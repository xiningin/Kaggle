{"cell_type":{"692690eb":"code","1b7cbc99":"code","105f8270":"code","71af5363":"code","95a67581":"code","814a5348":"code","4dfe1094":"code","9b677fa1":"code","ccf55576":"code","c2649c86":"code","6107ede7":"code","19af2643":"code","42e7e48c":"code","d4a559de":"code","3ce9a0cd":"code","de44612a":"code","dce343a8":"code","476c7c75":"code","f818ff63":"code","cec8eee9":"code","ce0e5a1d":"code","af9d302b":"code","3dfd7d92":"code","fc38c703":"code","667037c3":"code","eee93f29":"code","a7388d94":"code","11bde2ed":"code","f432ce7a":"code","fc4c0c60":"code","45f0b049":"code","f5a73cd6":"code","59eb0b51":"code","a8b36dd7":"code","27edc9a4":"code","84d3da3e":"code","48414de6":"code","4b932ae9":"code","4adaca70":"code","d3c77f06":"code","73795186":"code","9f4d0fe1":"markdown","1f02ab4b":"markdown","ac3d6629":"markdown","8e1dc5dc":"markdown","6ef84404":"markdown","b5afe682":"markdown","a89d13cc":"markdown","301b1375":"markdown","0077fb34":"markdown","7e38ef69":"markdown","644972b5":"markdown","b66015db":"markdown","a3460edf":"markdown","9d5567d8":"markdown","ae27f82e":"markdown","db528f93":"markdown","2d164f7d":"markdown","74f28420":"markdown","2c2c544c":"markdown","cff425d8":"markdown"},"source":{"692690eb":"import numpy as np\nimport os\nfrom skimage.transform import resize\nfrom imageio import imread\nimport datetime\nimport os\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","1b7cbc99":"np.random.seed(30)\nimport random as rn\nrn.seed(30)\nfrom keras import backend as K\nimport tensorflow as tf\ntf.random.set_seed(30)","105f8270":"device_name = tf.test.gpu_device_name()\nif \"GPU\" not in device_name:\n    print(\"GPU device not found\")\nelse:\n    print('Found GPU at: {}'.format(device_name))","71af5363":"train_doc = np.random.permutation(open('..\/input\/gesture-recognition\/train.csv').readlines())\nval_doc = np.random.permutation(open('..\/input\/gesture-recognition\/val.csv').readlines())\nbatch_size = 64","95a67581":"## Checking the GPU configuration\n!nvidia-smi","814a5348":"def cropResize(image, y, z):\n    h, w = image.shape\n    \n    # if smaller image crop at center for 120x120\n    if w == 160:\n        image = image[:120, 20:140]\n\n    # resize every image\n    return resize(image, (y,z))","4dfe1094":"def normalizeImage(image):\n    # applying normalization\n    return image\/255.0","9b677fa1":"def preprocessImage(image, y, z):\n    return normalizeImage(cropResize(image, y, z))","ccf55576":"def make3dFilter(x):\n    return tuple([x]*3)\n\ndef make2dFilter(x):\n    return tuple([x]*2)","c2649c86":"def getBatchData(source_path, t, batch, batch_size, img_tensor):\n    [x,y,z] = [len(img_tensor[0]),img_tensor[1], img_tensor[2]]\n    img_idx = img_tensor[0]\n    batch_data = np.zeros((batch_size,x,y,z,3)) # x is the number of images you use for each video, (y,z) is the final size of the input images and 3 is the number of channels RGB\n    batch_labels = np.zeros((batch_size,5)) # batch_labels is the one hot representation of the output\n    for folder in range(batch_size): # iterate over the batch_size\n        imgs = os.listdir(source_path+'\/'+ t[folder + (batch*batch_size)].split(';')[0]) # read all the images in the folder\n        for idx,item in enumerate(img_idx): #  Iterate iver the frames\/images of a folder to read them in\n            image = imread(source_path+'\/'+ t[folder + (batch*batch_size)].strip().split(';')[0]+'\/'+imgs[item]).astype(np.float32)\n\n            #crop the images and resize them. Note that the images are of 2 different shape \n            #and the conv3D will throw error if the inputs in a batch have different shapes\n\n            # separate preprocessImage function is defined for cropping, resizing and normalizing images\n            batch_data[folder,idx,:,:,0] = preprocessImage(image[:, :, 0], y, z)\n            batch_data[folder,idx,:,:,1] = preprocessImage(image[:, :, 1], y, z)\n            batch_data[folder,idx,:,:,2] = preprocessImage(image[:, :, 2], y, z)\n\n        batch_labels[folder, int(t[folder + (batch*batch_size)].strip().split(';')[2])] = 1\n    return batch_data, batch_labels","6107ede7":"def generator(source_path, folder_list, batch_size, img_tensor):\n    print( 'Source path = ', source_path, '; batch size =', batch_size)\n    while True:\n        t = np.random.permutation(folder_list)\n        num_batches = int(len(folder_list)\/batch_size)\n        for batch in range(num_batches): # we iterate over the number of batches\n            yield getBatchData(source_path, t, batch, batch_size, img_tensor)\n        \n        # write the code for the remaining data points which are left after full batches\n        # checking if any remaining batches are there or not\n        if len(folder_list)%batch_size != 0:\n            # updated the batch size and yield\n            batch_size = len(folder_list)%batch_size\n            yield getBatchData(source_path, t, batch, batch_size, img_tensor)","19af2643":"curr_dt_time = datetime.datetime.now()\ntrain_path = '..\/input\/gesture-recognition\/train'\nval_path = '..\/input\/gesture-recognition\/val'\nnum_train_sequences = len(train_doc)\nprint('# training sequences =', num_train_sequences)\nnum_val_sequences = len(val_doc)\nprint('# validation sequences =', num_val_sequences)\nnum_epochs = 10\nprint ('# epochs =', num_epochs)","42e7e48c":"def getImgTensor(n_frames):\n    img_idx = np.round(np.linspace(0, 29, n_frames)).astype(int)\n    return [img_idx, 100, 100, 3]\n\n# define image tensor size\nimg_tensor = getImgTensor(20)\nprint ('# img_tensor =', img_tensor)","d4a559de":"# check complete batch shape\nsample_generator = generator(train_path, train_doc, batch_size, img_tensor)\nsample_batch_data, sample_batch_labels = next(sample_generator)\nprint(sample_batch_data.shape)\n\n# validation batch sample\nsample_val_generator = generator(val_path, val_doc, batch_size, img_tensor)\nsample_val_batch_data, sample_val_batch_labels = next(sample_val_generator)\nprint(sample_val_batch_data.shape)","3ce9a0cd":"# plot generated sample images\nfig, ax = plt.subplots(1,2)\nax[0].imshow(sample_val_batch_data[16,10,:,:,:])   \nax[1].imshow(sample_val_batch_data[25,10,:,:,:])\nplt.show()","de44612a":"def plotModelHistory(h):\n    fig, ax = plt.subplots(1, 2, figsize=(15,4))\n    ax[0].plot(h.history['loss'])   \n    ax[0].plot(h.history['val_loss'])\n    ax[0].legend(['loss','val_loss'])\n    ax[0].title.set_text(\"Train loss vs Validation loss\")\n\n    ax[1].plot(h.history['categorical_accuracy'])   \n    ax[1].plot(h.history['val_categorical_accuracy'])\n    ax[1].legend(['categorical_accuracy','val_categorical_accuracy'])\n    ax[1].title.set_text(\"Train accuracy vs Validation accuracy\")\n    plt.show()\n\n    print(\"Max. Training Accuracy\", max(h.history['categorical_accuracy']))\n    print(\"Max. Validaiton Accuracy\", max(h.history['val_categorical_accuracy']))","dce343a8":"from keras.models import Sequential, Model\nfrom keras.layers import Dense, GRU, Flatten, TimeDistributed, Flatten, BatchNormalization, Activation, Dropout, LSTM\nfrom keras.layers.convolutional import Conv3D, MaxPooling3D, Conv2D, MaxPooling2D\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\nfrom keras import optimizers","476c7c75":"#write your model here\ndef defineModel(img_tensor):\n    inputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n\n    model = Sequential([\n        Conv3D(16, make3dFilter(5), activation='relu', input_shape=inputShape),\n        MaxPooling3D(make3dFilter(2), padding='same'),\n        BatchNormalization(),\n\n        Conv3D(32, make3dFilter(3), activation='relu'),\n        MaxPooling3D(pool_size=(1,2,2), padding='same'),\n        BatchNormalization(),\n\n        Conv3D(64, make3dFilter(3), activation='relu'),\n        MaxPooling3D(pool_size=(1,2,2), padding='same'),\n        BatchNormalization(),\n\n        Flatten(),\n        Dense(128, activation='relu'),\n        BatchNormalization(),\n        Dropout(0.25),\n\n        Dense(64, activation='relu'),\n        BatchNormalization(),\n        Dropout(0.25),\n\n        Dense(5, activation='softmax')\n    ])\n    model.compile(optimizer=optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n    return model\n\nmodel = defineModel(img_tensor)\nmodel.summary()","f818ff63":"train_generator = generator(train_path, train_doc, batch_size, img_tensor)\nval_generator = generator(val_path, val_doc, batch_size, img_tensor)","cec8eee9":"if (num_train_sequences%batch_size) == 0:\n    steps_per_epoch = int(num_train_sequences\/batch_size)\nelse:\n    steps_per_epoch = (num_train_sequences\/\/batch_size) + 1\n\nif (num_val_sequences%batch_size) == 0:\n    validation_steps = int(num_val_sequences\/batch_size)\nelse:\n    validation_steps = (num_val_sequences\/\/batch_size) + 1","ce0e5a1d":"model_name = 'model_init' + '_' + str(curr_dt_time).replace(' ','').replace(':','_') + '\/'\n    \nif not os.path.exists(model_name):\n    os.mkdir(model_name)\n\nfilepath = model_name + 'model-{epoch:05d}-{loss:.5f}-{categorical_accuracy:.5f}-{val_loss:.5f}-{val_categorical_accuracy:.5f}.h5'\n\ncheckpoint = ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=False, save_weights_only=False, mode='auto', period=1)\n\nLR = ReduceLROnPlateau(monitor='val_loss', factor=0.2, verbose=1, patience=4)\n\n# callbacks_list = [checkpoint, LR]\ncallbacks_list = [LR]","af9d302b":"def testBatchSize(batch_size, n_frames):\n    img_tensor = getImgTensor(n_frames)\n    print(\"Using frames as\", img_tensor[0])\n    global callbacks_list\n    num_epochs = 3\n    train_generator = generator(train_path, train_doc, batch_size, img_tensor)\n    val_generator = generator(val_path, val_doc, batch_size, img_tensor)\n    if (num_train_sequences%batch_size) == 0:\n        steps_per_epoch = int(num_train_sequences\/batch_size)\n    else:\n        steps_per_epoch = (num_train_sequences\/\/batch_size) + 1\n\n    if (num_val_sequences%batch_size) == 0:\n        validation_steps = int(num_val_sequences\/batch_size)\n    else:\n        validation_steps = (num_val_sequences\/\/batch_size) + 1\n\n    model = defineModel(img_tensor)\n    model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                callbacks=callbacks_list, validation_data=val_generator, \n                validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","3dfd7d92":"# testBatchSize(batch_size=64, n_frames=30)","fc38c703":"# testBatchSize(batch_size=64, n_frames=16)","667037c3":"# testBatchSize(batch_size=32, n_frames=30)","eee93f29":"# testBatchSize(batch_size=32, n_frames=16)","a7388d94":"n_frames = 16\nnum_epochs = 20\nbatch_size = 64\n\nimg_tensor = getImgTensor(n_frames)\ntrain_generator = generator(train_path, train_doc, batch_size, img_tensor)\nval_generator = generator(val_path, val_doc, batch_size, img_tensor)\n\nif (num_train_sequences%batch_size) == 0:\n    steps_per_epoch = int(num_train_sequences\/batch_size)\nelse:\n    steps_per_epoch = (num_train_sequences\/\/batch_size) + 1\n\nif (num_val_sequences%batch_size) == 0:\n    validation_steps = int(num_val_sequences\/batch_size)\nelse:\n    validation_steps = (num_val_sequences\/\/batch_size) + 1\n    \ninputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n\nmodel1 = Sequential([\n    Conv3D(16, make3dFilter(5), activation='relu', input_shape=inputShape),\n    MaxPooling3D(make3dFilter(2), padding='same'),\n    BatchNormalization(),\n\n    Conv3D(32, make3dFilter(3), activation='relu'),\n    MaxPooling3D(pool_size=(1,2,2), padding='same'),\n    BatchNormalization(),\n\n    Conv3D(64, make3dFilter(3), activation='relu'),\n    MaxPooling3D(pool_size=(1,2,2), padding='same'),\n    BatchNormalization(),\n\n    Flatten(),\n    Dense(128, activation='relu'),\n    BatchNormalization(),\n    Dropout(0.25),\n\n    Dense(64, activation='relu'),\n    BatchNormalization(),\n    Dropout(0.25),\n\n    Dense(5, activation='softmax')\n], name=\"conv_3d1\")\nmodel1.compile(optimizer=optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint(model1.summary())\n\nmodel1_history = model1.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n            callbacks=callbacks_list, validation_data=val_generator, \n            validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","11bde2ed":"plotModelHistory(model1_history)","f432ce7a":"n_frames = 30\nnum_epochs = 30\nbatch_size = 64\n\nimg_tensor = getImgTensor(n_frames)\ntrain_generator = generator(train_path, train_doc, batch_size, img_tensor)\nval_generator = generator(val_path, val_doc, batch_size, img_tensor)\n\nif (num_train_sequences%batch_size) == 0:\n    steps_per_epoch = int(num_train_sequences\/batch_size)\nelse:\n    steps_per_epoch = (num_train_sequences\/\/batch_size) + 1\n\nif (num_val_sequences%batch_size) == 0:\n    validation_steps = int(num_val_sequences\/batch_size)\nelse:\n    validation_steps = (num_val_sequences\/\/batch_size) + 1\n    \ninputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n\nmodel2 = Sequential([\n    Conv3D(16, make3dFilter(5), activation='relu', input_shape=inputShape),\n    MaxPooling3D(make3dFilter(2), padding='same'),\n    BatchNormalization(),\n\n    Conv3D(32, make3dFilter(3), activation='relu'),\n    MaxPooling3D(pool_size=(1,2,2), padding='same'),\n    BatchNormalization(),\n\n    Conv3D(64, make3dFilter(3), activation='relu'),\n    MaxPooling3D(pool_size=(1,2,2), padding='same'),\n    BatchNormalization(),\n\n    Flatten(),\n    Dense(128, activation='relu'),\n    BatchNormalization(),\n    Dropout(0.25),\n\n    Dense(64, activation='relu'),\n    BatchNormalization(),\n    Dropout(0.25),\n\n    Dense(5, activation='softmax')\n], name=\"conv_3d2\")\nmodel2.compile(optimizer=optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint(model2.summary())\n\nmodel2_history = model2.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n            callbacks=callbacks_list, validation_data=val_generator, \n            validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","fc4c0c60":"plotModelHistory(model2_history)","45f0b049":"n_frames = 30\nnum_epochs = 20\nbatch_size = 64\n\nimg_tensor = getImgTensor(n_frames)\ntrain_generator = generator(train_path, train_doc, batch_size, img_tensor)\nval_generator = generator(val_path, val_doc, batch_size, img_tensor)\n\nif (num_train_sequences%batch_size) == 0:\n    steps_per_epoch = int(num_train_sequences\/batch_size)\nelse:\n    steps_per_epoch = (num_train_sequences\/\/batch_size) + 1\n\nif (num_val_sequences%batch_size) == 0:\n    validation_steps = int(num_val_sequences\/batch_size)\nelse:\n    validation_steps = (num_val_sequences\/\/batch_size) + 1\n    \ninputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n\nmodel3 = Sequential([\n    Conv3D(16, make3dFilter(3), padding='same', activation='relu', input_shape=inputShape),\n    MaxPooling3D(make3dFilter(2), padding='same'),\n    BatchNormalization(),\n\n    Conv3D(32, make3dFilter(3), padding='same', activation='relu'),\n    MaxPooling3D(pool_size=(2), padding='same'),\n    BatchNormalization(),\n\n    Conv3D(64, make3dFilter(3), padding='same', activation='relu'),\n    MaxPooling3D(pool_size=(2), padding='same'),\n    BatchNormalization(),\n\n    Flatten(),\n    Dense(128, activation='relu'),\n    BatchNormalization(),\n    Dropout(0.25),\n\n    Dense(64, activation='relu'),\n    BatchNormalization(),\n    Dropout(0.25),\n\n    Dense(5, activation='softmax')\n], name=\"conv_3d3\")\nmodel3.compile(optimizer=optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint(model3.summary())\n\nmodel3_history = model3.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n            callbacks=callbacks_list, validation_data=val_generator, \n            validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","f5a73cd6":"plotModelHistory(model3_history)","59eb0b51":"n_frames = 20\nnum_epochs = 20\nbatch_size = 64\n\nimg_tensor = getImgTensor(n_frames)\ntrain_generator = generator(train_path, train_doc, batch_size, img_tensor)\nval_generator = generator(val_path, val_doc, batch_size, img_tensor)\n\nif (num_train_sequences%batch_size) == 0:\n    steps_per_epoch = int(num_train_sequences\/batch_size)\nelse:\n    steps_per_epoch = (num_train_sequences\/\/batch_size) + 1\n\nif (num_val_sequences%batch_size) == 0:\n    validation_steps = int(num_val_sequences\/batch_size)\nelse:\n    validation_steps = (num_val_sequences\/\/batch_size) + 1\n    \ninputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n\nmodel4 = Sequential([\n    Conv3D(16, make3dFilter(3), padding='same', activation='relu', input_shape=inputShape),\n    MaxPooling3D(make3dFilter(2), padding='same'),\n    BatchNormalization(),\n\n    Conv3D(32, make3dFilter(3), padding='same', activation='relu'),\n    MaxPooling3D(pool_size=(2), padding='same'),\n    BatchNormalization(),\n\n    Conv3D(64, make3dFilter(3), padding='same', activation='relu'),\n    MaxPooling3D(pool_size=(2), padding='same'),\n    BatchNormalization(),\n\n    Conv3D(128, make3dFilter(3), padding='same', activation='relu'),\n    MaxPooling3D(pool_size=(2), padding='same'),\n    BatchNormalization(),\n\n    Flatten(),\n    Dense(128, activation='relu'),\n    BatchNormalization(),\n    Dropout(0.25),\n\n    Dense(64, activation='relu'),\n    BatchNormalization(),\n    Dropout(0.25),\n\n    Dense(5, activation='softmax')\n], name=\"conv_3d4\")\nmodel4.compile(optimizer=optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint(model4.summary())\n\nmodel4_history = model4.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n            callbacks=callbacks_list, validation_data=val_generator, \n            validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","a8b36dd7":"plotModelHistory(model4_history)","27edc9a4":"n_frames = 20\nnum_epochs = 20\nbatch_size = 64\n\nimg_tensor = getImgTensor(n_frames)\ntrain_generator = generator(train_path, train_doc, batch_size, img_tensor)\nval_generator = generator(val_path, val_doc, batch_size, img_tensor)\n\nif (num_train_sequences%batch_size) == 0:\n    steps_per_epoch = int(num_train_sequences\/batch_size)\nelse:\n    steps_per_epoch = (num_train_sequences\/\/batch_size) + 1\n\nif (num_val_sequences%batch_size) == 0:\n    validation_steps = int(num_val_sequences\/batch_size)\nelse:\n    validation_steps = (num_val_sequences\/\/batch_size) + 1\n    \ninputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n\nmodel5 = Sequential([\n    Conv3D(16, make3dFilter(2), padding='same', activation='relu', input_shape=inputShape),\n    BatchNormalization(),\n    MaxPooling3D(make3dFilter(2)),\n\n    Conv3D(32, make3dFilter(2), padding='same', activation='relu'),\n    BatchNormalization(),\n    MaxPooling3D(pool_size=(2)),\n\n    Conv3D(64, make3dFilter(2), padding='same', activation='relu'),\n    BatchNormalization(),\n    MaxPooling3D(pool_size=(2)),\n\n    Conv3D(128, make3dFilter(2), padding='same', activation='relu'),\n    BatchNormalization(),\n    MaxPooling3D(pool_size=(2)),\n\n    Flatten(),\n    Dense(256, activation='relu'),\n    # BatchNormalization(),\n    # Dropout(0.3),\n\n    Dense(128, activation='relu'),\n    # BatchNormalization(),\n    # Dropout(0.2),\n\n    Dense(5, activation='softmax')\n], name=\"conv_3d5\")\nmodel5.compile(optimizer=optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint(model5.summary())\n\nmodel5_history = model5.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n            callbacks=callbacks_list, validation_data=val_generator, \n            validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","84d3da3e":"plotModelHistory(model5_history)","48414de6":"n_frames = 20\nnum_epochs = 30\nbatch_size = 32\n\nimg_tensor = getImgTensor(n_frames)\ntrain_generator = generator(train_path, train_doc, batch_size, img_tensor)\nval_generator = generator(val_path, val_doc, batch_size, img_tensor)\n\nif (num_train_sequences%batch_size) == 0:\n    steps_per_epoch = int(num_train_sequences\/batch_size)\nelse:\n    steps_per_epoch = (num_train_sequences\/\/batch_size) + 1\n\nif (num_val_sequences%batch_size) == 0:\n    validation_steps = int(num_val_sequences\/batch_size)\nelse:\n    validation_steps = (num_val_sequences\/\/batch_size) + 1\n    \ninputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n\nmodel6 = Sequential([\n    TimeDistributed(Conv2D(16, make2dFilter(3), padding='same', activation='relu'), input_shape=inputShape),\n    TimeDistributed(BatchNormalization()),\n    TimeDistributed(MaxPooling2D(make2dFilter(2))),\n\n    TimeDistributed(Conv2D(32, make2dFilter(3), padding='same', activation='relu')),\n    TimeDistributed(BatchNormalization()),\n    TimeDistributed(MaxPooling2D(make2dFilter(2))),\n\n    TimeDistributed(Conv2D(64, make2dFilter(3), padding='same', activation='relu')),\n    TimeDistributed(BatchNormalization()),\n    TimeDistributed(MaxPooling2D(make2dFilter(2))),\n\n    TimeDistributed(Conv2D(128, make2dFilter(3), padding='same', activation='relu')),\n    TimeDistributed(BatchNormalization()),\n    TimeDistributed(MaxPooling2D(make2dFilter(2))),\n\n    TimeDistributed(Conv2D(256, make2dFilter(3), padding='same', activation='relu')),\n    TimeDistributed(BatchNormalization()),\n    TimeDistributed(MaxPooling2D(make2dFilter(2))),\n\n    TimeDistributed(Flatten()),\n    LSTM(256),\n    Dropout(0.2),\n\n    Dense(256, activation='relu'),\n    Dropout(0.2),\n\n    Dense(5, activation='softmax')\n], name=\"conv_2d_lstm\")\nmodel6.compile(optimizer=optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint(model6.summary())\n\nmodel6_history = model6.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n            callbacks=callbacks_list, validation_data=val_generator, \n            validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","4b932ae9":"plotModelHistory(model6_history)","4adaca70":"from tensorflow.keras.applications import mobilenet","d3c77f06":"mobilenet = mobilenet.MobileNet(weights='imagenet', include_top=False)\n\nn_frames = 20\nnum_epochs = 30\nbatch_size = 64\n\nimg_tensor = getImgTensor(n_frames)\ntrain_generator = generator(train_path, train_doc, batch_size, img_tensor)\nval_generator = generator(val_path, val_doc, batch_size, img_tensor)\n\nif (num_train_sequences%batch_size) == 0:\n    steps_per_epoch = int(num_train_sequences\/batch_size)\nelse:\n    steps_per_epoch = (num_train_sequences\/\/batch_size) + 1\n\nif (num_val_sequences%batch_size) == 0:\n    validation_steps = int(num_val_sequences\/batch_size)\nelse:\n    validation_steps = (num_val_sequences\/\/batch_size) + 1\n    \ninputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n\nmodel7 = Sequential([\n    TimeDistributed(mobilenet, input_shape=inputShape)\n], name=\"mobilenet_lstm\")\n\nfor layer in model7.layers:\n    layer.trainable = False\n\nmodel7.add(TimeDistributed(BatchNormalization()))\nmodel7.add(TimeDistributed(MaxPooling2D(make2dFilter(2))))\nmodel7.add(TimeDistributed(Flatten()))\n\nmodel7.add(LSTM(256))\nmodel7.add(Dropout(0.2))\n\nmodel7.add(Dense(256,activation='relu'))\nmodel7.add(Dropout(0.2))\n\nmodel7.add(Dense(5, activation='softmax'))\n\nmodel7.compile(optimizer=optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint(model7.summary())\n\nmodel7_history = model7.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n            callbacks=callbacks_list, validation_data=val_generator, \n            validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","73795186":"plotModelHistory(model7_history)","9f4d0fe1":"### Model 4: Frames-20, Same pooling in Conv3D layer","1f02ab4b":"### Model 3: Frames-30, Epocs-20, Reduced parameters","ac3d6629":"The `steps_per_epoch` and `validation_steps` are used by `fit_generator` to decide the number of next() calls it need to make.","8e1dc5dc":"### Base Model","6ef84404":"We set the random seed so that the results don't vary drastically.","b5afe682":"### Model 1 - Frames-16, Epoc-20","a89d13cc":"### Model 7: Transfer Learning (MobileNet) with LSTM","301b1375":"With above observations, we can see that batch size is not impacting training time but number of frames. We will use batch size of 64 as it seems optimal. It is commented as it takes a lot of time to run that is restricting for the notebook to completely run.","0077fb34":"### Model 6: Switching Model architecture to Conv2D+LSTM","7e38ef69":"### Test Batch Size & Frames","644972b5":"Note here that a video is represented above in the generator as (number of images, height, width, number of channels). Take this into consideration while creating the model architecture.","b66015db":"In this block, you read the folder names for training and validation. You also set the `batch_size` here. Note that you set the batch size in such a way that you are able to use the GPU in full capacity. You keep increasing the batch size until the machine throws an error.","a3460edf":"## Model Building\nHere you make the model using different functionalities that Keras provides. Remember to use `Conv3D` and `MaxPooling3D` and not `Conv2D` and `Maxpooling2D` for a 3D convolution model. You would want to use `TimeDistributed` while building a Conv2D + RNN model. Also remember that the last layer is the softmax. Design the network in such a way that the model is able to give good accuracy on the least number of parameters so that it can fit in the memory of the webcam.","9d5567d8":"### Model Callbacks Setup","ae27f82e":"# Gesture Recognition\n\n\n**Problem Statement**\n\nImagine you are working as a data scientist at a home electronics company which manufactures state of the art smart televisions. You want to develop a cool feature in the smart-TV that can recognise five different gestures performed by the user which will help users control the TV without using a remote. \n\nIn this group project, you are going to build a 3D Conv model that will be able to predict the 5 gestures correctly. \n\nEach gesture corresponds to a specific command:\n \n| Gesture | Corresponding Action |\n| --- | --- | \n| Thumbs Up | Increase the volume. |\n| Thumbs Down | Decrease the volume. |\n| Left Swipe | 'Jump' backwards 10 seconds. |\n| Right Swipe | 'Jump' forward 10 seconds. |\n| Stop | Pause the movie. |\n\n\n\n### Objectives:\n1. **Generator**:  The generator should be able to take a batch of videos as input without any error. Steps like cropping, resizing and normalization should be performed successfully.\n\n2. **Model**: Develop a model that is able to train without any errors which will be judged on the total number of parameters (as the inference(prediction) time should be less) and the accuracy achieved. As suggested by Snehansu, start training on a small amount of data and then proceed further.\n\n3. **Write up**: This should contain the detailed procedure followed in choosing the final model. The write up should start with the reason for choosing the base model, then highlight the reasons and metrics taken into consideration to modify and experiment to arrive at the final model. ","db528f93":"### Generator Validation","2d164f7d":"## Generator\nThis is one of the most important part of the code. The overall structure of the generator has been given. In the generator, you are going to preprocess the images as you have images of 2 different dimensions as well as create a batch of video frames. You have to experiment with `img_idx`, `y`,`z` and normalization such that you get high accuracy.","74f28420":"### Model 2: Frames-30, Epocs-30","2c2c544c":"Reduce parameters, with padding in Conv3D layers and filter of (3,3,3).","cff425d8":"### Model 5: Frames:20, Epocs-20, BS-64, reduced kernel to (2,2,2), switching BatchNormalization before MaxPooling."}}