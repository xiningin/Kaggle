{"cell_type":{"eb6cb010":"code","dda48e42":"code","d2ff4192":"code","0618176a":"code","acb4c94f":"code","be6acdf4":"code","5820e6f0":"code","03fc1867":"code","0cfd6f2b":"code","5c3e7bff":"code","2e99a6f8":"code","71b6955f":"markdown","e05125e5":"markdown","65e98c3a":"markdown","6b23a378":"markdown","ae426da5":"markdown","649c3594":"markdown","d85a6a5b":"markdown","145af053":"markdown","6abd4d04":"markdown","196dc8a3":"markdown"},"source":{"eb6cb010":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","dda48e42":"data = pd.read_csv(\"..\/input\/croppred\/CROPP.csv\")\ndata.head()","d2ff4192":"data = data.loc[:, ['Area', 'Production']]\ndata.head(2)","0618176a":"X = data.values","acb4c94f":"sns.scatterplot(X[:,0], X[:, 1])\nplt.xlabel('AREA')\nplt.ylabel('PRODUCTION')\nplt.show()","be6acdf4":"def calculate_cost(X, centroids, cluster):\n  sum = 0\n  for i, val in enumerate(X):\n    sum += np.sqrt((centroids[int(cluster[i]), 0]-val[0])**2 +(centroids[int(cluster[i]), 1]-val[1])**2)\n  return sum","5820e6f0":"import random\ndef kmeans(X, k):\n  \n  diff = 1\n  cluster = np.zeros(X.shape[0])\n\n  # select k random centroids\n  random_indices = np.random.choice(len(X), size=k, replace=False)\n  centroids = X[random_indices, :]\n\n  while diff:\n\n    # for each observation\n    for i, row in enumerate(X):\n\n      mn_dist = float('inf')\n      # dist of the point from all centroids\n      for idx, centroid in enumerate(centroids):\n        d = np.sqrt((centroid[0]-row[0])**2 + (centroid[1]-row[1])**2)\n\n        # store closest centroid \n        if mn_dist > d:\n          mn_dist = d\n          cluster[i] = idx\n\n    new_centroids = pd.DataFrame(X).groupby(by=cluster).mean().values\n\n    # if centroids are same then leave\n    if np.count_nonzero(centroids-new_centroids) == 0:\n      diff = 0\n    else:\n      centroids = new_centroids\n  return centroids, cluster  ","03fc1867":"cost_list = []\n\nfor k in range(1, 10):\n  \n  centroids, cluster = kmeans(X, k)\n  \n  # WCSS (Within cluster sum of square)\n  cost = calculate_cost(X, centroids, cluster)\n  cost_list.append(cost)\n","0cfd6f2b":"sns.lineplot(x=range(1,10), y=cost_list, marker='o')\nplt.xlabel('k')\nplt.ylabel('WCSS')\nplt.show()","5c3e7bff":"k = 4\ncentroids, cluster = kmeans(X, k)","2e99a6f8":"sns.scatterplot(X[:,0], X[:, 1], hue=cluster)\nsns.scatterplot(centroids[:,0], centroids[:, 1], s=100, color='y')\nplt.xlabel('Area')\nplt.ylabel('Production')\nplt.show()","71b6955f":"#  Calculate WCSS","e05125e5":"# Plot a line plot between WCSS and k","65e98c3a":"#  Import dataset","6b23a378":"# Visualize the cluster formed","ae426da5":"# Visualize the data points\n","649c3594":"# Implement K-Means","d85a6a5b":"> REF: https:\/\/medium.com\/nerd-for-tech\/k-means-python-implementation-from-scratch-8400f30b8e5c\n\n\n# Importing Libraries","145af053":"# Convert to numpy array","6abd4d04":"#  Find K value using Elbow Method","196dc8a3":"# Make clusters"}}