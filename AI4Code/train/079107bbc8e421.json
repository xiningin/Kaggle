{"cell_type":{"adfda3ed":"code","5752bf62":"code","c849aaee":"code","df80e0da":"code","551db840":"code","68837dcd":"code","c29130a7":"code","22ac6fd7":"code","0515a0ff":"code","ea2d7669":"code","6a1bd193":"code","adce6205":"code","c39cffe0":"code","ef0fc5b3":"code","2f6fa7f8":"code","380d3a24":"code","f0fd584e":"code","2b324311":"code","98d42d9a":"code","a3b7b30e":"code","ade8ed1c":"code","58704284":"code","a2aee330":"code","51d70cd6":"code","66754ad3":"code","954b3180":"code","54f505fa":"code","d061b19f":"code","a68a2352":"code","e21235cf":"code","4ab34cb5":"code","6e596858":"code","afda7c7f":"code","73d74954":"code","8891ff2a":"code","4448999c":"code","0cf664eb":"code","34e379e1":"code","660c6f89":"code","0152bb3d":"code","508e6802":"code","21994b83":"code","d0acce4b":"code","05563c87":"code","4db38cf0":"code","b4b5b6fb":"code","40922c81":"code","793cb8fb":"code","6d6c0e05":"code","a24c0049":"code","93491b59":"code","083d4b9d":"code","8286fbb6":"code","b167f8e4":"code","1300e146":"code","54b6e2f0":"code","228b6a3f":"code","fc252e87":"code","36d1b1d6":"code","13745aaf":"code","9fb9c8b4":"code","9547b9d5":"code","ba394fec":"code","1b2b9b43":"code","929240be":"code","8f9b7ae2":"code","440893ba":"code","878a396b":"code","996096b5":"code","cb20535f":"code","e113620b":"code","fad021c2":"code","9df5a328":"code","3fa91721":"code","3877ba02":"code","c9ca5ada":"code","c1713614":"code","702cad15":"code","93e15bb7":"code","158dfc0d":"code","e9cfa224":"code","2826ed3f":"code","16d0a8a4":"code","363ea004":"code","3315a2b2":"code","9ebd7d78":"code","24ba9b59":"code","ed4bd0f5":"code","68c3f857":"code","42d261c0":"code","d66c66f9":"code","d571ef76":"code","d4712fc1":"code","eac6c31d":"code","677ea0c6":"code","862d02f5":"code","9e06b605":"code","6867d868":"code","03d0b162":"code","359ea1ab":"code","6748cff0":"code","d6e99531":"code","37ab6bbb":"code","6632a141":"code","2d36e8b1":"code","010569dd":"code","4e8b433b":"code","3769ec3b":"code","978b2759":"code","486fbd0c":"code","d611b521":"code","bcd96016":"code","159f2e4d":"code","5913255e":"code","e88240cf":"code","391da215":"code","4e182bc3":"code","8ea0fd0f":"code","ed086363":"code","37dcc8ba":"code","65930657":"code","92034689":"code","79d57850":"code","42dc9089":"code","02a6a4cd":"code","50cbe968":"code","0c1fb4ea":"code","e7a3b091":"code","19b61ee4":"code","0cb6831f":"code","31e28447":"code","bf01d97d":"code","bc544db4":"code","77259793":"code","e2b34be9":"code","31383514":"code","4bfd2181":"code","7c2600c2":"code","9a1bd725":"code","21695cef":"code","2a99b2fd":"code","f2a47e3d":"code","a4abde56":"code","4f24a7c2":"code","230e00dc":"code","2d2b3fc3":"code","e0cf0ab2":"code","3843b672":"code","b4ce7006":"code","318c102f":"code","9feede70":"code","802f12dd":"code","c952fbda":"code","a847ed4a":"code","7353c6ad":"code","459c3058":"code","c468e245":"code","6c1b2a50":"code","1d11aef5":"code","238ed074":"code","096920a6":"code","ebc4795a":"code","4d4ec711":"code","27b8f995":"code","63711b6b":"code","1bc8db57":"code","b3cd56cd":"code","0f713a5e":"code","2b2e371b":"code","046f4c4d":"code","6a976fd8":"code","5a72fc32":"code","6ad0a9c8":"code","108b1020":"code","358bea65":"code","0ab97416":"code","fbbccd27":"code","881eb67e":"code","31c44b5e":"code","73310753":"code","0919405d":"code","2e803b2b":"code","139a5862":"code","b7cc9b3a":"code","53510547":"code","e8ccb6c0":"code","1eadd73d":"code","9db652c3":"code","94d90304":"code","8aef3af7":"code","3b6f1334":"code","5fc527e7":"code","c5ff2903":"code","8863ed03":"code","9e0ed9c5":"code","8a5c00ce":"code","ad41bd33":"code","322fb48f":"code","79c3d5ea":"code","91242ac8":"code","31329170":"code","5a9dd1d3":"code","82360192":"code","559e9277":"code","06011dcf":"code","f2fea761":"code","bb3ff9a9":"code","eca3ae3d":"code","cf6c7e5c":"code","8cfbfe5e":"code","19675a1e":"code","663f5c20":"code","f141bd4e":"code","adb8f174":"code","8e39cf61":"code","648c1c38":"code","ae791435":"code","4542d69f":"code","e90a7598":"code","bffffb6f":"code","2b2816e3":"code","3c85ae81":"code","593e1286":"code","aaba3afa":"code","360879d2":"code","f9b86ae9":"code","e97de724":"code","95456839":"code","382940b5":"code","7bc4e49d":"code","616cd363":"code","2f19d7d3":"code","0d4b3a47":"code","2dbcedb9":"code","821cf98d":"code","3cf65f81":"code","e01ac4d5":"code","eafc4684":"code","17eae4f6":"code","61f595b1":"code","c0bc9d53":"code","aa790ce6":"code","6e40717e":"code","08bf839a":"code","08b7e766":"code","788eb4dc":"code","4b14894e":"code","c7fc08a0":"code","05be71b2":"code","b17bb507":"code","db52f51f":"code","1ca4f74b":"code","98747a56":"code","b097a019":"code","21536867":"code","6128b4f6":"code","45666a0a":"code","6a96bfd2":"code","88131b5f":"code","e5b8b3c8":"code","59828199":"code","0462a12a":"code","526a0584":"code","5c424a5b":"code","adb324ac":"code","770dcda4":"code","f97f1519":"code","2aa4b351":"code","b8e879c7":"code","142160b1":"code","405f70bc":"code","5b1bc9bf":"code","5d63ca53":"code","ed800d0e":"code","ddcc9090":"code","463a02b5":"code","d50d30cd":"code","8b6f2d02":"code","6be54e9e":"code","c62dbb7b":"code","34a111de":"code","5de754f3":"code","0830b2e5":"code","fbdc9cfa":"code","cc362fc1":"code","5986b94c":"code","6bce13e6":"code","d6f258f8":"code","8e467a5c":"code","bc176e58":"code","365fdcd4":"code","d4962123":"code","6d92a6d9":"code","2fbf4b2a":"code","38b7b600":"code","3957c230":"code","b23579b5":"code","94b6ded9":"code","743a8aab":"code","402192c4":"code","1a10f0d3":"code","ca5c689b":"code","88e46587":"code","d7a29712":"code","ef36a6c2":"code","6e547f16":"code","56171d80":"code","40d44be0":"code","7d7e70d4":"code","f7914138":"code","e0d538f7":"code","9b0ea50d":"code","2422a9f1":"code","555ef097":"code","ee4fc9ff":"code","ce9019dc":"code","8ea2028a":"code","3114d86f":"code","9ded37fb":"code","0070c7ba":"code","d25b6e21":"code","27b94e8c":"code","e5f35d80":"code","da125d97":"code","57261738":"code","8a0da289":"code","68a13127":"code","c1b023a1":"code","e4046962":"code","cafa7b21":"code","acb5bd5b":"code","72d773e7":"code","2cad9245":"code","735e20c0":"code","32cb0b3d":"code","ca79b91a":"code","df1ddd41":"code","2ba6e6a0":"code","4075eede":"code","8d70f410":"code","8e88072c":"code","271ec6cd":"code","65972326":"code","314f6679":"code","e9d34123":"code","b201f608":"code","7bed790d":"code","8a7a632c":"code","37340b59":"code","e4563179":"code","1dfe60d9":"code","b3e8fa46":"code","98bba997":"code","18a6c24d":"code","0c1c8f08":"code","0b04ef0e":"code","92c87a28":"code","4fb4f2b9":"markdown","f3e843d4":"markdown","a44acee9":"markdown","b0584b5d":"markdown","3cb29548":"markdown","9d5512a9":"markdown","c97b9bcf":"markdown","80cae6b6":"markdown","428a65b6":"markdown","d0a84210":"markdown","8a6c4578":"markdown","6c35a11e":"markdown","2c82853d":"markdown","a6c74374":"markdown","9ed4d8c3":"markdown","0496e7e8":"markdown","00a671de":"markdown","a9c3946b":"markdown","dd79aa16":"markdown","e0e00db3":"markdown","fa479d64":"markdown","7f3442e8":"markdown","21135558":"markdown","20909082":"markdown"},"source":{"adfda3ed":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nfrom matplotlib import cbook, rc_params_from_file, rcParamsDefault\nimport plotly.express as px\n\n#classifier\nfrom sklearn.linear_model import LogisticRegression,LinearRegression\nfrom sklearn.metrics import mean_squared_error,r2_score, mean_absolute_error\nfrom sklearn import metrics\n\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import *\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\n\nimport warnings\nwarnings.filterwarnings('ignore')","5752bf62":"df = pd.read_csv(r\"\/kaggle\/input\/d\/depekha\/bank-marketing-campaigns-dataset\/Bank Additional Full.csv\")","c849aaee":"print(df.shape)\ndf.head()","df80e0da":"df.isnull().head()","551db840":"df.notnull().head()","68837dcd":"df.shape","c29130a7":"df.dropna(how = 'any').shape","22ac6fd7":"df.duplicated().sum()","0515a0ff":"df.loc[df.duplicated(keep = 'last'), :]","ea2d7669":"df.loc[df.duplicated(keep = False), :]","6a1bd193":"df.drop_duplicates(keep = 'first').shape","adce6205":"df.drop_duplicates(keep = 'last').shape","c39cffe0":"df.drop_duplicates(keep = False).shape","ef0fc5b3":"df.drop_duplicates(subset = ['age', 'job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', \n                             'day_of_week', 'duration', 'campaign', 'pdays', 'previous', 'poutcome', 'emp.var.rate', \n                             'cons.price.idx', 'cons.conf.idx', 'euribor3m', 'nr.employed', 'y']).shape","2f6fa7f8":"df.info()","380d3a24":"df.columns","f0fd584e":"df.isnull().sum()","2b324311":"df.nunique()","98d42d9a":"total_miss = df.isnull().sum()\nperc_miss = total_miss\/df.isnull().count()*100\n\nmissing_data = pd.DataFrame({'Total missing':total_miss,'% missing':perc_miss})\n\nmissing_data.sort_values(by='Total missing',ascending=False).head(3)","a3b7b30e":"#Checking for percentage of missing values in each columns\n(df.isnull().sum()\/len(df))*100","ade8ed1c":"df.dropna(subset=['age', 'job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', \n                  'month', 'day_of_week', 'duration', 'campaign', 'pdays', 'previous', 'poutcome', \n                  'emp.var.rate', 'cons.price.idx', 'cons.conf.idx', 'euribor3m', 'nr.employed', 'y'])","58704284":"# find the unique values from categorical features\nfor col in df.select_dtypes(include='object').columns:\n    print(col)\n    print(df[col].unique())","a2aee330":"for column in df.columns:\n    print(column,df[column].nunique())","51d70cd6":"categorical_features = [feature for feature in df.columns if ((df[feature].dtypes=='O') & (feature not in ['deposit']))]\ncategorical_features","66754ad3":"for feature in categorical_features:\n    print('The feature is {} and number of categories are {}'.format(feature,len(df[feature].unique())))","954b3180":"print('Min Age :',df['age'].min())\nprint('Max Age :',df['age'].max())","54f505fa":"numerical_data = df.select_dtypes(include=np.number) # select_dtypes selects data with numeric features\nnumerical_col = numerical_data.columns \n\nprint(\"Numeric Features:\")\nprint(numerical_data.head())\nprint(\"====\"*20)","d061b19f":"categorical_data = df.select_dtypes(exclude=np.number) # we will exclude data with numeric features\ncategorical_col = categorical_data.columns                          # we will store the categorical features in a variable\n\nprint(\"Categorical Features:\")\nprint(categorical_data.head())\nprint(\"====\"*20)","a68a2352":"### numerical \nnumerical_cols = list(df.select_dtypes(exclude=['object']))\nnumerical_cols","e21235cf":"### categorical\ncategorical_cols = list(df.select_dtypes(include=['object']))\ncategorical_cols","4ab34cb5":"#Check target label split over categorical features and find the count\nfor categorical_feature in categorical_features:\n    print(df.groupby(['y',categorical_feature]).size())","6e596858":"# list of numerical variables\nnumerical_features = [feature for feature in df.columns if ((df[feature].dtypes != 'O') & (feature not in ['y']))]\nprint('Number of numerical variables: ', len(numerical_features))\n\n# visualise the numerical variables\ndf[numerical_features].head()","afda7c7f":"#Discrete Numerical Features\ndiscrete_feature=[feature for feature in numerical_features if len(df[feature].unique())<25]\nprint(\"Discrete Variables Count: {}\".format(len(discrete_feature)))","73d74954":"#Continuous Numerical Features\ncontinuous_features=[feature for feature in numerical_features if feature not in discrete_feature+['deposit']]\nprint(\"Continuous feature Count: {}\".format(len(continuous_features)))","8891ff2a":"cols_with_missing = [col for col in df.columns \n                                 if df[col].isnull().any()]\ncols_with_missing","4448999c":"df.describe()","0cf664eb":"df.corr()","34e379e1":"df.hist(figsize=(20,20))\nplt.show()","660c6f89":"matrix = df.corr() \nf, ax = plt.subplots(figsize=(25, 12)) \nsns.heatmap(matrix, vmax=.8, square=True, cmap=\"RdYlGn\",annot = True);","0152bb3d":"sns.pairplot(df)","508e6802":"def bar_plot(variable):\n    var = df[variable]\n    varValue = var.value_counts()\n    plt.figure(figsize=(15,3))\n    plt.bar(varValue.index, varValue,color=['#00008b','#00e5ee','#cd1076', '#008080','#cd5555','red','blue'])\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    \n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","21994b83":"categorical_cols = [\"job\", \"marital\", \"default\", \"education\", \"housing\", \"loan\", \"contact\", \"day_of_week\", \n                    \"poutcome\", \"month\", \"y\"]\nfor c in categorical_cols:\n    bar_plot(c)","d0acce4b":"categorcial_variables = ['job', 'marital', 'education', 'default', 'loan', 'contact', 'month', 'day_of_week', 'poutcome','y']\nfor col in categorcial_variables:\n    plt.figure(figsize=(10,4))\n    #Returns counts of unique values for each outcome for each feature.\n    pos_counts = df.loc[df.y.values == 'yes', col].value_counts() \n    neg_counts = df.loc[df.y.values == 'no', col].value_counts()\n    \n    all_counts = list(set(list(pos_counts.index) + list(neg_counts.index)))\n    \n    #Counts of how often each outcome was recorded.\n    freq_pos = (df.y.values == 'yes').sum()\n    freq_neg = (df.y.values == 'no').sum()\n    \n    pos_counts = pos_counts.to_dict()\n    neg_counts = neg_counts.to_dict()\n    \n    all_index = list(all_counts)\n    all_counts = [pos_counts.get(k, 0) \/ freq_pos - neg_counts.get(k, 0) \/ freq_neg for k in all_counts]\n\n    sns.barplot(all_counts, all_index)\n    plt.title(col)\n    plt.tight_layout()","05563c87":"#check count based on categorical features\nplt.figure(figsize=(15,80), facecolor='white')\nplotnumber =1\nfor categorical_feature in categorical_features:\n    ax = plt.subplot(11,2,plotnumber)\n    sns.countplot(y=categorical_feature,data=df)\n    plt.xlabel(categorical_feature)\n    plt.title(categorical_feature)\n    plotnumber+=1\nplt.show()","4db38cf0":"#check target label split over categorical features\n#Find out the relationship between categorical variable and dependent variable\nfor categorical_feature in categorical_features:\n    sns.catplot(x='y', col=categorical_feature, kind='count', data= df)\nplt.show()","b4b5b6fb":"#boxplot to show target distribution with respect numerical features\nplt.figure(figsize=(20,60), facecolor='white')\nplotnumber =1\nfor feature in continuous_features:\n    ax = plt.subplot(12,3,plotnumber)\n    sns.boxplot(x = \"y\", y = df[feature], data = df)\n    plt.xlabel(feature)\n    plotnumber+=1\nplt.show()","40922c81":"fig = plt.figure(figsize = [15,20])\ncols = ['marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'poutcome', 'job', 'y']\ncnt = 1\nfor col in cols :\n    ax = plt.subplot(5,2,cnt)\n    sns.countplot(data = df, x = col, order = df[col].value_counts().index)\n    if col == 'job' :\n        plt.xticks(rotation = 90)\n    cnt+=1\n    plot_name = \"Countplot for column : \"+col\n    ax.set_title(plot_name,fontsize = 15)\nplt.tight_layout()\nplt.show()  ","793cb8fb":"def Count_categorcial_variables(df):\n    categorcial_variables = df.select_dtypes(include=['object']).columns.tolist()\n    #fig = plt.figure(figsize=(14, 18))\n\n    for index, col in enumerate(categorcial_variables):\n        print(\"------------\",col,\" value counts---------------------\")\n        print(df[col].value_counts())\n        #fig.add_subplot(3, 2, index+1)\n        #dataframe[col].value_counts()[:20].plot(kind='bar', title=col, color = \"royalblue\")\n        #plt.tight_layout()\n        \n    print(\"\\n\\n------------Number of categories in each columns---------------------\")\n    for i in categorcial_variables:\n        a = df[i].unique()\n        print(\"There are {} categories in {}\".format(len(a),i))\nCount_categorcial_variables(df)","6d6c0e05":"fig, ax = plt.subplots()\nfig.set_size_inches(20, 8)\nsns.countplot(x = 'age',data = df)\nax.set_xlabel('age',fontsize = 15)\nax.set_ylabel('count',fontsize = 15)\nax.set_title('age count distribution',fontsize = 10)\nsns.despine()","a24c0049":"# What kind of jobs clients this bank have, if you cross jobs with default, loan or housing, there is no relation\nfig, ax = plt.subplots()\nfig.set_size_inches(20, 10)\nsns.countplot(x = 'job', data = df)\nax.set_xlabel('Job', fontsize=15)\nax.set_ylabel('Count', fontsize=15)\nax.set_title('Job Count Distribution', fontsize=15)\nax.tick_params(labelsize=15)\nsns.despine()","93491b59":"# What kind of 'marital clients' this bank have, if you cross marital with default, loan or housing, there is no relation\nfig, ax = plt.subplots()\nfig.set_size_inches(10, 5)\nsns.countplot(x = 'marital', data = df)\nax.set_xlabel('Marital', fontsize=15)\nax.set_ylabel('Count', fontsize=15)\nax.set_title('Marital Count Distribution', fontsize=15)\nax.tick_params(labelsize=15)\nsns.despine()","083d4b9d":"# What kind of 'education clients this bank have, if you cross education with default, loan or housing, there is no relation\nfig, ax = plt.subplots()\nfig.set_size_inches(20, 5)\nsns.countplot(x = 'education', data = df)\nax.set_xlabel('Education', fontsize=15)\nax.set_ylabel('Count', fontsize=15)\nax.set_title('Education Count Distribution', fontsize=15)\nax.tick_params(labelsize=15)\nsns.despine()","8286fbb6":"# Default, has credit in default ?\nfig, (ax1, ax2, ax3) = plt.subplots(nrows = 1, ncols = 3, figsize = (20,8))\nsns.countplot(x = 'default', data = df, ax = ax1, order = ['no', 'unknown', 'yes'])\nax1.set_title('Default', fontsize=15)\nax1.set_xlabel('')\nax1.set_ylabel('Count', fontsize=15)\nax1.tick_params(labelsize=15)\n\n# Housing, has housing loan ?\nsns.countplot(x = 'housing', data = df, ax = ax2, order = ['no', 'unknown', 'yes'])\nax2.set_title('Housing', fontsize=15)\nax2.set_xlabel('')\nax2.set_ylabel('Count', fontsize=15)\nax2.tick_params(labelsize=15)\n\n# Loan, has personal loan ?\nsns.countplot(x = 'loan', data = df, ax = ax3, order = ['no', 'unknown', 'yes'])\nax3.set_title('Loan', fontsize=15)\nax3.set_xlabel('')\nax3.set_ylabel('Count', fontsize=15)\nax3.tick_params(labelsize=15)\n\nplt.subplots_adjust(wspace=0.25)","b167f8e4":"print('Default:\\n No credit in default:'     , df[df['default'] == 'no']     ['age'].count(),\n              '\\n Unknown credit in default:',df[df['default'] == 'unknown']['age'].count(),\n              '\\n Yes to credit in default:' , df[df['default'] == 'yes']    ['age'].count())","1300e146":"print('Housing:\\n No housing in loan : '     , df[df['housing'] == 'no']     ['age'].count(),\n              '\\n Unknown housing in loan : ', df[df['housing'] == 'unknown']['age'].count(),\n              '\\n Yes to housing in loan : ' , df[df['housing'] == 'yes']    ['age'].count())","54b6e2f0":"print('Housing:\\n No to personal loan:'     , df[df['loan'] == 'no']     ['age'].count(),\n              '\\n Unknown to personal loan:', df[df['loan'] == 'unknown']['age'].count(),\n              '\\n Yes to personal loan:'    , df[df['loan'] == 'yes']    ['age'].count())","228b6a3f":"print('Default:\\n No credit in default:'     , df[df['default'] == 'no']     ['age'].count(),\n            '\\n Unknown to credit in default:', df[df['default'] == 'unknown']['age'].count(),\n              '\\n Yes to credit in default:' , df[df['default'] == 'yes']    ['age'].count())","fc252e87":"print('Housing:\\n No housing in loan:'     , df[df['housing'] == 'no']     ['age'].count(),\n               '\\n Unknown to housing in loan:', df[df['default'] == 'unknown']['age'].count(),\n               '\\n Yes to housing in loan:' , df[df['housing'] == 'yes']    ['age'].count())","36d1b1d6":"print('Housing:\\n No to personal loan:'     , df[df['loan'] == 'no']     ['age'].count(),\n            '\\n Unknown to personal loan:', df[df['default'] == 'unknown']['age'].count(),\n              '\\n Yes to personal loan:'    , df[df['loan'] == 'yes']    ['age'].count())","13745aaf":"print(\"Kind of Contact: \\n\", df['contact'].unique())\nprint(\"\\nWhich Months this Campaing Work: \\n\", df['month'].unique())\nprint(\"\\nWhich Days of Week this Campaing Work: \\n\", df['day_of_week'].unique())","9fb9c8b4":"print(\"Max duration  call in minutes:  \", round((df['duration'].max()\/60),1))\nprint(\"Min duration  call in minutes:   \", round((df['duration'].min()\/60),1))\nprint(\"Mean duration call in minutes:   \", round((df['duration'].mean()\/60),1))\nprint(\"STD duration  call in minutes:   \", round((df['duration'].std()\/60),1))\n# Std close to the mean means that the data values are close to the mean","9547b9d5":"# Quartiles\nprint('1\u00ba Quartile: ', df['duration'].quantile(q = 0.25))\nprint('2\u00ba Quartile: ', df['duration'].quantile(q = 0.50))\nprint('3\u00ba Quartile: ', df['duration'].quantile(q = 0.75))\nprint('4\u00ba Quartile: ', df['duration'].quantile(q = 1.00))\n#Calculate the outliers:\n  # Interquartile range, IQR = Q3 - Q1\n  # lower 1.5*IQR whisker = Q1 - 1.5 * IQR \n  # Upper 1.5*IQR whisker = Q3 + 1.5 * IQR\n    \nprint('Duration calls above: ', df['duration'].quantile(q = 0.75) + \n                      1.5*(df['duration'].quantile(q = 0.75) - df['duration'].quantile(q = 0.25)), 'are outliers')","ba394fec":"print('Numerber of outliers: ', df[df['duration'] > 644.5]['duration'].count())\nprint('Number of clients: ', len(df))\n#Outliers in %\nprint('Outliers are:', round(df[df['duration'] > 644.5]['duration'].count()*100\/len(df),2), '%')","1b2b9b43":"bank_se = df.loc[: , ['emp.var.rate', 'cons.price.idx', 'cons.conf.idx', 'euribor3m', 'nr.employed']]\nbank_se.head()","929240be":"bank_o = df.loc[: , ['campaign', 'pdays','previous', 'poutcome']]\nbank_o.head()","8f9b7ae2":"pd.crosstab(index=df['job'],columns=df['y'])","440893ba":"df.groupby('job').mean()","878a396b":"df.groupby('marital').mean()","996096b5":"df.groupby('education').mean()","cb20535f":"plt.figure(figsize=(10,10))\npd.crosstab(df['job'], df['y']).plot(kind='bar')\nplt.title('Purchase Frequency for Job Title')\nplt.xlabel('Job')\nplt.ylabel('Frequency of Purchase')\nplt.savefig('purchase_fre_job')","e113620b":"table=pd.crosstab(df['marital'], df['y'])\ntable.div(table.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)\nplt.title('Stacked Bar Chart of Marital Status vs Purchase')\nplt.xlabel('Marital Status')\nplt.ylabel('Proportion of Customers')\nplt.savefig('mariral_vs_pur_stack')","fad021c2":"table=pd.crosstab(df['education'], df['y'])\ntable.div(table.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)\nplt.title('Stacked Bar Chart of Education vs Purchase')\nplt.xlabel('Education')\nplt.ylabel('Proportion of Customers')\nplt.savefig('edu_vs_pur_stack')","9df5a328":"pd.crosstab(df['day_of_week'], df['y']).plot(kind='bar')\nplt.title('Purchase Frequency for Day of Week')\nplt.xlabel('Day of Week')\nplt.ylabel('Frequency of Purchase')\nplt.savefig('pur_dayofweek_bar')","3fa91721":"pd.crosstab(df['month'], df['y']).plot(kind='bar')\nplt.title('Purchase Frequency for Month')\nplt.xlabel('Month')\nplt.ylabel('Frequency of Purchase')\nplt.savefig('pur_fre_month_bar')","3877ba02":"df['age'].hist()\nplt.title('Histogram of Age')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.savefig('hist_age')","c9ca5ada":"pd.crosstab(df['poutcome'], df['y']).plot(kind='bar')\nplt.title('Purchase Frequency for Poutcome')\nplt.xlabel('Poutcome')\nplt.ylabel('Frequency of Purchase')\nplt.savefig('pur_fre_pout_bar')","c1713614":"df['age'].value_counts()","702cad15":"plt.subplots(figsize=(14,7))\nsns.countplot(df['age'])","93e15bb7":"df['job'].value_counts()","158dfc0d":"plt.subplots(figsize=(14,7))\nsns.countplot(df['job'])","e9cfa224":"plt.figure(figsize=(15,10))\ndf['job'].value_counts().plot.pie(autopct=\"%0.2f%%\")","2826ed3f":"df['marital'].value_counts()","16d0a8a4":"plt.subplots(figsize=(14,7))\nsns.countplot(df['marital'])","363ea004":"plt.figure(figsize=(15,10))\ndf['marital'].value_counts().plot.pie(autopct=\"%0.2f%%\")","3315a2b2":"df['education'].value_counts()","9ebd7d78":"plt.subplots(figsize=(14,7))\nsns.countplot(df['education'])","24ba9b59":"plt.figure(figsize=(15,10))\ndf['education'].value_counts().plot.pie(autopct=\"%0.2f%%\")","ed4bd0f5":"df['default'].value_counts()","68c3f857":"plt.subplots(figsize=(10,7))\nsns.countplot(df['default'])","42d261c0":"plt.figure(figsize=(5,5))\ndf['default'].value_counts().plot.pie(autopct=\"%0.2f%%\")","d66c66f9":"df['housing'].value_counts()","d571ef76":"plt.subplots(figsize=(14,7))\nsns.countplot(df['housing'])","d4712fc1":"plt.figure(figsize=(10,10))\ndf['housing'].value_counts().plot.pie(autopct=\"%0.2f%%\")","eac6c31d":"df['loan'].value_counts()","677ea0c6":"plt.subplots(figsize=(14,7))\nsns.countplot(df['loan'])","862d02f5":"plt.figure(figsize=(10,10))\ndf['loan'].value_counts().plot.pie(autopct=\"%0.2f%%\")","9e06b605":"df['contact'].value_counts()","6867d868":"plt.subplots(figsize=(14,7))\nsns.countplot(df['contact'])","03d0b162":"plt.figure(figsize=(15,10))\ndf['contact'].value_counts().plot.pie(autopct=\"%0.2f%%\")","359ea1ab":"df['month'].value_counts()","6748cff0":"plt.subplots(figsize=(14,7))\nsns.countplot(df['month'])","d6e99531":"plt.figure(figsize=(15,10))\ndf['month'].value_counts().plot.pie(autopct=\"%0.2f%%\")","37ab6bbb":"df['day_of_week'].value_counts()","6632a141":"plt.subplots(figsize=(14,7))\nsns.countplot(df['day_of_week'])","2d36e8b1":"plt.figure(figsize=(15,10))\ndf['day_of_week'].value_counts().plot.pie(autopct=\"%0.2f%%\")","010569dd":"df['campaign'].value_counts()","4e8b433b":"plt.subplots(figsize=(14,7))\nsns.countplot(df['campaign'])","3769ec3b":"df['previous'].value_counts()","978b2759":"plt.subplots(figsize=(14,7))\nsns.countplot(df['previous'])","486fbd0c":"plt.figure(figsize=(15,10))\ndf['previous'].value_counts().plot.pie(autopct=\"%0.2f%%\")","d611b521":"df['poutcome'].value_counts()","bcd96016":"plt.subplots(figsize=(14,7))\nsns.countplot(df['poutcome'])","159f2e4d":"df['emp.var.rate'].value_counts()","5913255e":"plt.subplots(figsize=(14,7))\nsns.countplot(df['emp.var.rate'])","e88240cf":"plt.figure(figsize=(15,10))\ndf['emp.var.rate'].value_counts().plot.pie(autopct=\"%0.2f%%\")","391da215":"df['cons.price.idx'].value_counts()","4e182bc3":"df['nr.employed'].value_counts()","8ea0fd0f":"plt.subplots(figsize=(14,7))\nsns.countplot(df['nr.employed'])","ed086363":"plt.figure(figsize=(17,12))\ndf['nr.employed'].value_counts().plot.pie(autopct=\"%0.2f%%\")","37dcc8ba":"df['y'].value_counts()","65930657":"plt.subplots(figsize=(5,5))\nsns.countplot(df['y'])","92034689":"plt.figure(figsize=(17,12))\ndf['y'].value_counts().plot.pie(autopct=\"%0.2f%%\")","79d57850":"fig=plt.figure(figsize=(20,20))\n\nax1=fig.add_subplot(331)\nax2=fig.add_subplot(332)\nax3=fig.add_subplot(333)\n\nsns.countplot(x = 'loan',data = df,ax = ax1)\nax1.set_title('Loan Taken ')\n\nsns.countplot(x = 'contact',data = df,ax = ax2)\nax2.set_title('Contact Medium ')\n\nsns.countplot(x='marital',data = df)\nax3.set_title('Marital Staus')","42dc9089":"#Marital, education and contact, Default, housing and loan vs Y\nplt.figure(figsize = [20,10])\n\nplt.subplot(231)\nsns.countplot(x = 'marital', hue = 'y', data = df)\n\nplt.subplot(232)\nsns.countplot(x = 'education', hue = 'y', data = df)\n\nplt.subplot(233)\nsns.countplot(x = 'contact', hue = 'y', data = df)\n\nplt.subplot(234)\nsns.countplot(x = 'default', hue = 'y', data = df)\n\nplt.subplot(235)\nsns.countplot(x = 'housing', hue = 'y', data = df)\n\nplt.subplot(236)\nsns.countplot(x = 'loan', hue = 'y', data = df)","02a6a4cd":"#Job and Month vs y\nplt.figure(figsize=(14,12))\n\nplt.subplot(211)\nsns.countplot(y = 'job', data = df, hue = 'y')\nplt.title('Job vs Term Deposit')\n\nplt.subplot(212)\nsns.countplot(x = 'month', data = df, hue = 'y')\nplt.title('Last contact month vs Term Deposit')","50cbe968":"#Poutcome vs Y\nplt.figure(figsize=(17,5))\nsns.countplot(x = 'poutcome', data = df, hue = 'y')\nplt.title('Outcome of the previous campaign vs Y')","0c1fb4ea":"#Age against Y\ng = sns.FacetGrid(data = df, hue = 'y', height = 4, aspect = 2)\ng.map(sns.kdeplot,'age', shade = True, legend = True)\ng.add_legend()\nplt.title('Age against Y')","e7a3b091":"plt.figure(figsize = (15,8))\nsns.countplot(x = df['job'], hue = df['y'])","19b61ee4":"plt.figure(figsize = (15,8))\nsns.countplot(x = df['marital'],hue = df['y'])","0cb6831f":"plt.figure(figsize = (15,8))\nsns.countplot(x=df['education'],hue=df['y'])","31e28447":"plt.figure(figsize = (15,8))\nsns.countplot(x=df['default'],hue=df['y'])","bf01d97d":"sns.countplot(x=df['housing'],hue=df['y'])","bc544db4":"sns.countplot(x=df['loan'],hue=df['y'])","77259793":"sns.countplot(x=df['contact'],hue=df['y'])","e2b34be9":"plt.figure(figsize=(15,8))\nsns.countplot(x=df['month'],hue=df['y'])","31383514":"f, ax = plt.subplots(figsize = (15, 4))\nsns.countplot(y = \"education\", hue = 'marital', data = df).set_title('Education Level vs Marital Status Distribution')","4bfd2181":"plt.subplots(figsize=(10,5))\nsns.countplot(x = \"day_of_week\",hue = \"y\",data = df)\nplt.show()","7c2600c2":"plt.figure(figsize = (10,5))\ndf[\"pdays_bin\"] = pd.cut(df.pdays,bins = 5,labels = [\"c1\",\"c2\",\"c3\",\"c4\",\"c5\"])\nsns.countplot(x = \"pdays_bin\",hue = \"y\",data = df)\nplt.show()","9a1bd725":"plt.figure(figsize=(10,5))\nsns.countplot(x = \"poutcome\",hue = \"y\",data = df)","21695cef":"pd.crosstab(index=df['job'],columns=df['education'])","2a99b2fd":"# Y VS JOB\npd.crosstab(df['job'],df['y']).style.background_gradient(cmap='winter')","f2a47e3d":"# Y VS MARITAL\npd.crosstab(df['marital'],df['y']).style.background_gradient(cmap='spring')","a4abde56":"# Y VS EDUCATION\npd.crosstab(df['education'],df['y']).style.background_gradient(cmap='autumn')","4f24a7c2":"# Y VS LOAN DEFAULT\npd.crosstab(df['default'],df['y']).style.background_gradient(cmap='cool')","230e00dc":"# y VS HOUSING LOAN\npd.crosstab(df['housing'],df['y']).style.background_gradient(cmap='Wistia')","2d2b3fc3":"# Y VS PERSONAL LOAN\npd.crosstab(df['loan'],df['y']).style.background_gradient(cmap='bwr')","e0cf0ab2":"# Y VS CONTACT\npd.crosstab(df['contact'],df['y']).style.background_gradient(cmap='seismic')","3843b672":"# Y VS MONTH\npd.crosstab(df['month'],df['y']).style.background_gradient(cmap='PRGn')","b4ce7006":"#Analysis of job and education\npd.crosstab(index = df['job'],columns = df['education'])","318c102f":"df.pivot_table(df,index=[\"y\"])","9feede70":"# Age and Y\n\na_df = pd.DataFrame()\na_df['age_yes'] = (df[df['y'] == 'yes'][['y','age']].describe())['age']\na_df['age_no'] = (df[df['y'] == 'no'][['y','age']].describe())['age']\n\na_df","802f12dd":"a_df.drop(['count', '25%', '50%', '75%']).plot.bar(title = 'Age and Y Statistics')","c952fbda":"# Number of contacts performed during this campaign ('campaign') and y\n\nc_df = pd.DataFrame()\nc_df['campaign_yes'] = (df[df['y'] == 'yes'][['y','campaign']].describe())['campaign']\nc_df['campaign_no'] = (df[df['y'] == 'no'][['y','campaign']].describe())['campaign']\n\nc_df","a847ed4a":"c_df.drop(['count', '25%', '50%', '75%']).plot.bar(title = 'Number of Contacts Performed during this Campaign and Y Statistics')","7353c6ad":"# Number of contacts performed during previous campaign ('previous') and y\n\np_df = pd.DataFrame()\np_df['previous_yes'] = (df[df['y'] == 'yes'][['y','previous']].describe())['previous']\np_df['previous_no'] = (df[df['y'] == 'no'][['y','previous']].describe())['previous']\n\np_df","459c3058":"p_df.drop(['count', '25%', '50%', '75%']).plot.bar(title = 'Number of Contacts performed during previous Campaign and Y Statistics')","c468e245":"plt.subplots(figsize=(10,5))\nsns.countplot(x = \"day_of_week\",hue = \"y\",data = df)\nplt.show()","6c1b2a50":"plt.figure(figsize = (10,5))\ndf[\"pdays_bin\"] = pd.cut(df.pdays,bins = 5,labels = [\"c1\",\"c2\",\"c3\",\"c4\",\"c5\"])\nsns.countplot(x = \"pdays_bin\",hue = \"y\",data = df)\nplt.show()","1d11aef5":"plt.figure(figsize=(10,5))\nsns.countplot(x = \"poutcome\",hue = \"y\",data = df)","238ed074":"plt.figure(figsize=(15,8))\nsns.lineplot(df['age'],df['y'])","096920a6":"plt.figure(figsize=(15,8))\nsns.lineplot(df['job'],df['y'])","ebc4795a":"plt.figure(figsize=(15,8))\nsns.lineplot(df['month'],df['y'])","4d4ec711":"plt.figure(figsize=(15,8))\nsns.lineplot(df['day_of_week'],df['y'])","27b8f995":"plt.figure(figsize=(15,8))\nsns.lineplot(df['campaign'],df['y'])","63711b6b":"plt.figure(figsize=(15,8))\nsns.lineplot(df['pdays'],df['y'])","1bc8db57":"plt.figure(figsize=(15,8))\nsns.lineplot(df['job'],df['age'])","b3cd56cd":"plt.figure(figsize=(15,8))\nsns.lineplot(df['marital'],df['age'])","0f713a5e":"plt.figure(figsize=(15,8))\nsns.lineplot(df['education'],df['age'])","2b2e371b":"plt.figure(figsize=(15,8))\nsns.lineplot(df['default'],df['age'])","046f4c4d":"plt.figure(figsize=(15,8))\nsns.lineplot(df['month'],df['age'])","6a976fd8":"plt.figure(figsize=(15,8))\nsns.lineplot(df['day_of_week'],df['age'])","5a72fc32":"plt.figure(figsize=(15,8))\nsns.lineplot(df['campaign'],df['age'])","6ad0a9c8":"plt.figure(figsize=(10,10))\nsns.violinplot(x = df['age'], y = df['y'])","108b1020":"plt.figure(figsize=(15,10))\nsns.violinplot(x = df['job'], y = df['age'])","358bea65":"plt.figure(figsize=(10,10))\nsns.violinplot(x = df['marital'], y = df['age'])","0ab97416":"plt.figure(figsize=(15,10))\nsns.violinplot(x = df['education'], y = df['age'])","fbbccd27":"plt.figure(figsize=(10,10))\nsns.violinplot(x = df['housing'], y = df['age'])","881eb67e":"plt.figure(figsize=(10,10))\nsns.violinplot(x = df['loan'], y = df['age'])","31c44b5e":"plt.figure(figsize=(10,10))\nsns.violinplot(x = df['contact'], y = df['age'])","73310753":"plt.figure(figsize=(15,10))\nsns.violinplot(x = df['month'], y = df['age'])","0919405d":"plt.figure(figsize=(15,10))\nsns.violinplot(x = df['day_of_week'], y = df['age'])","2e803b2b":"plt.figure(figsize=(15,10))\nsns.violinplot(x = df['campaign'], y = df['age'])","139a5862":"plt.figure(figsize=(15,10))\nsns.violinplot(x = df['pdays'], y = df['age'])","b7cc9b3a":"plt.figure(figsize=(15,10))\nsns.violinplot(x = df['previous'], y = df['age'])","53510547":"plt.figure(figsize=(15,10))\nsns.violinplot(x = df['poutcome'], y = df['age'])","e8ccb6c0":"plt.figure(figsize=(15,10))\nsns.violinplot(x = df['emp.var.rate'], y = df['age'])","1eadd73d":"plt.figure(figsize=(15,10))\nsns.violinplot(x = df['nr.employed'], y = df['age'])","9db652c3":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['age'],y = df['y'])","94d90304":"plt.figure(figsize=(15,15))\nsns.barplot(x = df['job'],y = df['age'])","8aef3af7":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['marital'], y = df['age'])","3b6f1334":"plt.figure(figsize=(15,10))\nsns.barplot(x = df['education'], y = df['age'])","5fc527e7":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['housing'], y = df['age'])","c5ff2903":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['loan'], y = df['age'])","8863ed03":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['contact'], y = df['age'])","9e0ed9c5":"plt.figure(figsize=(15,10))\nsns.barplot(x = df['month'], y = df['age'])","8a5c00ce":"plt.figure(figsize=(15,10))\nsns.barplot(x = df['day_of_week'], y = df['age'])","ad41bd33":"plt.figure(figsize=(15,10))\nsns.barplot(x = df['campaign'], y = df['age'])","322fb48f":"plt.figure(figsize=(15,10))\nsns.barplot(x = df['pdays'], y = df['age'])","79c3d5ea":"plt.figure(figsize=(15,10))\nsns.barplot(x = df['previous'], y = df['age'])","91242ac8":"plt.figure(figsize=(15,10))\nsns.barplot(x = df['poutcome'], y = df['age'])","31329170":"plt.figure(figsize=(15,10))\nsns.barplot(x = df['emp.var.rate'], y = df['age'])","5a9dd1d3":"plt.figure(figsize=(15,10))\nsns.barplot(x = df['nr.employed'], y = df['age'])","82360192":"plt.figure(figsize = (15, 10))\nsns.boxplot(df['job'], df['age'])","559e9277":"plt.figure(figsize = (15, 10))\nsns.boxplot(df['marital'], df['age'])","06011dcf":"plt.figure(figsize = (15, 10))\nsns.boxplot(df['education'], df['age'])","f2fea761":"plt.figure(figsize = (10, 10))\nsns.boxplot(df['housing'], df['age'])","bb3ff9a9":"plt.figure(figsize = (10, 10))\nsns.boxplot(df['loan'], df['age'])","eca3ae3d":"plt.figure(figsize = (10, 10))\nsns.boxplot(df['contact'], df['age'])","cf6c7e5c":"plt.figure(figsize = (15, 10))\nsns.boxplot(df['month'], df['age'])","8cfbfe5e":"plt.figure(figsize = (15, 10))\nsns.boxplot(df['day_of_week'], df['age'])","19675a1e":"plt.figure(figsize = (15, 10))\nsns.boxplot(df['campaign'], df['age'])","663f5c20":"plt.figure(figsize = (15, 10))\nsns.boxplot(df['pdays'], df['age'])","f141bd4e":"plt.figure(figsize = (15, 10))\nsns.boxplot(df['previous'], df['age'])","adb8f174":"plt.figure(figsize = (10, 10))\nsns.boxplot(df['poutcome'], df['age'])","8e39cf61":"plt.figure(figsize = (10, 10))\nsns.boxplot(df['emp.var.rate'], df['age'])","648c1c38":"plt.figure(figsize = (15, 10))\nsns.boxplot(df['cons.conf.idx'], df['age'])","ae791435":"plt.figure(figsize = (15, 10))\nsns.boxplot(df['nr.employed'], df['age'])","4542d69f":"plt.figure(figsize = (5, 5))\nsns.boxplot(df['y'], df['age'])","e90a7598":"df.groupby([\"age\"])[[\"y\"]].describe()","bffffb6f":"df.groupby([\"job\"])[[\"y\"]].describe()","2b2816e3":"df.groupby([\"marital\"])[[\"y\"]].describe()","3c85ae81":"df.groupby([\"education\"])[[\"y\"]].describe()","593e1286":"df.groupby([\"default\"])[[\"y\"]].describe()","aaba3afa":"df.groupby([\"housing\"])[[\"y\"]].describe()","360879d2":"df.groupby([\"loan\"])[[\"y\"]].describe()","f9b86ae9":"df.groupby([\"contact\"])[[\"y\"]].describe()","e97de724":"df.groupby([\"month\"])[[\"y\"]].describe()","95456839":"df.groupby([\"day_of_week\"])[[\"y\"]].describe()","382940b5":"df.groupby([\"duration\"])[[\"y\"]].describe()","7bc4e49d":"df.groupby([\"campaign\"])[[\"y\"]].describe()","616cd363":"df.groupby([\"pdays\"])[[\"y\"]].describe()","2f19d7d3":"df.groupby([\"previous\"])[[\"y\"]].describe()","0d4b3a47":"df.groupby([\"poutcome\"])[[\"y\"]].describe()","2dbcedb9":"df.groupby([\"emp.var.rate\"])[[\"y\"]].describe()","821cf98d":"df.groupby([\"cons.price.idx\"])[[\"y\"]].describe()","3cf65f81":"df.groupby([\"cons.conf.idx\"])[[\"y\"]].describe()","e01ac4d5":"df.groupby([\"euribor3m\"])[[\"y\"]].describe()","eafc4684":"df.groupby([\"nr.employed\"])[[\"y\"]].describe()","17eae4f6":"df['job'] = df['job'].map({'admin.': 0, 'blue-collar': 1, 'technician': 2, 'services': 3, 'management': 4, \n                           'retired': 5, 'entrepreneur': 6, 'self-employed': 7, 'housemaid': 8, 'unemployed': 9, \n                           'student': 10, 'unknown': 11})\ndf.head()","61f595b1":"df['marital'] = df['marital'].map({'married': 0, 'single': 1, 'divorced': 2, 'unknown': 3})\ndf.head()","c0bc9d53":"df['education'] = df['education'].map({'university.degree': 0, 'high.school': 1, 'basic.9y': 2, \n                                       'professional.course': 3, 'basic.4y': 4, 'basic.6y': 5, \n                                       'unknown': 6, 'illiterate': 7})\ndf.head()","aa790ce6":"df['default'] = df['default'].map({'no': 0, 'unknown': 1, 'yes': 2})\ndf.head()","6e40717e":"df['housing'] = df['housing'].map({'yes': 0, 'no': 1, 'unknown': 2})\ndf.head()","08bf839a":"df['loan'] = df['loan'].map({'no': 0, 'yes': 1, 'unknown': 2})\ndf.head()","08b7e766":"df['contact'] = df['contact'].map({'cellular': 0, 'telephone': 1})\ndf.head()","788eb4dc":"df['month'] = df['month'].map({'may': 0, 'jul': 1, 'aug': 2, 'jun': 3, 'nov': 4, 'apr': 5, 'oct': 6, \n                               'sep': 7, 'mar': 8, 'dec': 9})\ndf.head()","4b14894e":"df['day_of_week'] = df['day_of_week'].map({'thu': 0, 'mon': 1, 'wed': 2, 'tue': 3, 'fri': 4})\ndf.head()","c7fc08a0":"df['poutcome'] = df['poutcome'].map({'nonexistent': 0, 'failure': 1, 'success': 2})\ndf.head()","05be71b2":"df['y'] = df['y'].map({'no': 0, 'yes': 1})\ndf.head()","b17bb507":"df['pdays_bin'] = df['pdays_bin'].map({'c5': 0, 'c1': 1, 'c4': 2, 'c3': 3, 'c2': 4})\ndf.head()","db52f51f":"df['nr.employed'] = df['nr.employed'].map({'4964': 0, '4992': 1, '5009': 2, '5018': 3, '5024': 4, \n                                           '5076': 5, '5099': 6, '5176': 7, '5191': 8, '5196': 9, \n                                           '5228': 10})\ndf.head()","1ca4f74b":"plt.figure(figsize=(15,10))\nsns.violinplot(x = df['job'], y = df['y'])","98747a56":"plt.figure(figsize=(10,10))\nsns.violinplot(x = df['marital'], y = df['y'])","b097a019":"plt.figure(figsize=(15,10))\nsns.violinplot(x = df['education'], y = df['y'])","21536867":"plt.figure(figsize=(10,10))\nsns.violinplot(x = df['housing'], y = df['y'])","6128b4f6":"plt.figure(figsize=(10,10))\nsns.violinplot(x = df['loan'], y = df['y'])","45666a0a":"plt.figure(figsize=(10,10))\nsns.violinplot(x = df['contact'], y = df['y'])","6a96bfd2":"plt.figure(figsize=(10,10))\nsns.violinplot(x = df['month'], y = df['y'])","88131b5f":"plt.figure(figsize=(10,10))\nsns.violinplot(x = df['day_of_week'], y = df['y'])","e5b8b3c8":"plt.figure(figsize=(10,10))\nsns.violinplot(x = df['campaign'], y = df['y'])","59828199":"plt.figure(figsize=(10,10))\nsns.violinplot(x = df['pdays'], y = df['y'])","0462a12a":"plt.figure(figsize=(15,10))\nsns.violinplot(x = df['previous'], y = df['y'])","526a0584":"plt.figure(figsize=(15,10))\nsns.violinplot(x = df['poutcome'], y = df['y'])","5c424a5b":"plt.figure(figsize=(15,10))\nsns.violinplot(x = df['emp.var.rate'], y = df['y'])","adb324ac":"plt.figure(figsize=(15,15))\nsns.barplot(x = df['age'],y = df['y'])","770dcda4":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['job'],y = df['y'])","f97f1519":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['marital'],y = df['y'])","2aa4b351":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['education'],y = df['y'])","b8e879c7":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['default'],y = df['y'])","142160b1":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['housing'],y = df['y'])","405f70bc":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['loan'],y = df['y'])","5b1bc9bf":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['contact'],y = df['y'])","5d63ca53":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['month'],y = df['y'])","ed800d0e":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['day_of_week'],y = df['y'])","ddcc9090":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['campaign'],y = df['y'])","463a02b5":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['pdays'],y = df['y'])","d50d30cd":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['previous'],y = df['y'])","8b6f2d02":"plt.figure(figsize=(10,10))\nsns.barplot(x = df['poutcome'],y = df['y'])","6be54e9e":"plt.figure(figsize = (10, 10))\nsns.boxplot(data = df, x = \"y\", y = \"age\")","c62dbb7b":"plt.figure(figsize = (10, 10))\nsns.boxplot(data = df, x = \"y\", y = \"job\")","34a111de":"plt.figure(figsize = (10, 10))\nsns.boxplot(data = df, x = \"y\", y = \"month\")","5de754f3":"plt.figure(figsize = (10, 10))\nsns.boxplot(data = df, x = \"y\", y = \"day_of_week\")","0830b2e5":"plt.figure(figsize = (10, 10))\nsns.boxplot(data = df, x = \"y\", y = \"duration\")","fbdc9cfa":"plt.figure(figsize = (10, 10))\nsns.boxplot(data = df, x = \"y\", y = \"campaign\")","cc362fc1":"plt.figure(figsize = (10, 10))\nsns.boxplot(data = df, x = \"y\", y = \"emp.var.rate\")","5986b94c":"plt.figure(figsize = (10, 10))\nsns.boxplot(data = df, x = \"y\", y = \"cons.price.idx\")","6bce13e6":"plt.figure(figsize = (10, 10))\nsns.boxplot(data = df, x = \"y\", y = \"cons.conf.idx\")","d6f258f8":"plt.figure(figsize = (10, 10))\nsns.boxplot(data = df, x = \"y\", y = \"euribor3m\")","8e467a5c":"plt.figure(figsize=(12,8))\nsns.scatterplot(data = df, x = \"age\", y = \"campaign\",hue = \"job\")","bc176e58":"plt.figure(figsize=(12,8))\nsns.scatterplot(data = df, x = \"age\", y = \"job\",hue = \"y\")","365fdcd4":"plt.figure(figsize=(12,8))\nsns.scatterplot(data = df, x = \"age\", y = \"marital\",hue = \"y\")","d4962123":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'job', y = \"age\", data = df)\nplt.show()","6d92a6d9":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'marital', y = \"age\", data = df)\nplt.show()","2fbf4b2a":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'education', y = \"age\", data = df)\nplt.show()","38b7b600":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'education', y = \"age\", data = df)\nplt.show()","3957c230":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'default', y = \"age\", data = df)\nplt.show()","b23579b5":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'housing', y = \"age\", data = df)\nplt.show()","94b6ded9":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'loan', y = \"age\", data = df)\nplt.show()","743a8aab":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'contact', y = \"age\", data = df)\nplt.show()","402192c4":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'month', y = \"age\", data = df)\nplt.show()","1a10f0d3":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'day_of_week', y = \"age\", data = df)\nplt.show()","ca5c689b":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'campaign', y = \"age\", data = df)\nplt.show()","88e46587":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'pdays', y = \"age\", data = df)\nplt.show()","d7a29712":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'poutcome', y = \"age\", data = df)\nplt.show()","ef36a6c2":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'emp.var.rate', y = \"age\", data = df)\nplt.show()","6e547f16":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'cons.price.idx', y = \"age\", data = df)\nplt.show()","56171d80":"plt.figure(figsize=(15,10))\nsns.stripplot(x = 'cons.conf.idx', y = \"age\", data = df)\nplt.show()","40d44be0":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"age\"])\nplt.show()","7d7e70d4":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"job\"])\nplt.show()","f7914138":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"marital\"])\nplt.show()","e0d538f7":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"education\"])\nplt.show()","9b0ea50d":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"default\"])\nplt.show()","2422a9f1":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"housing\"])\nplt.show()","555ef097":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"loan\"])\nplt.show()","ee4fc9ff":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"contact\"])\nplt.show()","ce9019dc":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"duration\"])\nplt.show()","8ea2028a":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"campaign\"])\nplt.show()","3114d86f":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"pdays\"])\nplt.show()","9ded37fb":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"poutcome\"])\nplt.show()","0070c7ba":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"emp.var.rate\"])\nplt.show()","d25b6e21":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"cons.price.idx\"])\nplt.show()","27b94e8c":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"cons.conf.idx\"])\nplt.show()","e5f35d80":"plt.figure(figsize = (10, 10))\nsns.distplot(df[\"euribor3m\"])\nplt.show()","da125d97":"X = df.loc[:, ['age', 'job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'day_of_week', \n               'duration', 'campaign', 'pdays', 'previous', 'poutcome', 'emp.var.rate', 'cons.price.idx', 'cons.conf.idx', \n               'euribor3m', 'pdays_bin']]\nX.head()","57261738":"Y = df.loc[:, ['y']]\nY.head()","8a0da289":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state=42, shuffle = True)","68a13127":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","c1b023a1":"regressor = LinearRegression()  \nregressor.fit(X_train, Y_train) #training the algorithm\n#To retrieve the intercept:\nprint(regressor.intercept_)\n\n#For retrieving the slope:\nprint(regressor.coef_)","e4046962":"Y_pred = regressor.predict(X_test)\nprint('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, Y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test, Y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, Y_pred)))","cafa7b21":"# Model initialization\nregression_model = LinearRegression()\n# Fit the data(train the model)\nregression_model.fit(X, Y)\n# Predict\nY_pred = regression_model.predict(X)\n\n# model evaluation\nrmse = mean_squared_error(Y, Y_pred)\nr2 = r2_score(Y, Y_pred)\n\n# printing values\nprint('Slope:' ,regression_model.coef_)\nprint('Intercept:', regression_model.intercept_)\nprint('Root mean squared error: ', rmse)\nprint('R2 score: ', r2)","acb5bd5b":"import statsmodels.api as sm\n\nX = np.random.rand(100)\nY = X + np.random.rand(100)*0.1\n\nresults = sm.OLS(Y,sm.add_constant(X)).fit()\n\nprint(results.summary())\n\nplt.scatter(X,Y)\n\nX_plot = np.linspace(0,1,100)\nplt.plot(X_plot, X_plot*results.params[0] + results.params[1])\n\nplt.show()","72d773e7":"X = df.iloc[:, 0].values.reshape(-1, 1)\nY = df.iloc[:, 1].values.reshape(-1, 1)\nlinear_regressor = LinearRegression()\nlinear_regressor.fit(X, Y)\nY_pred = linear_regressor.predict(X)","2cad9245":"plt.scatter(X, Y)\nplt.plot(X, Y_pred, color='red')\nplt.show()","735e20c0":"from sklearn import linear_model\n# with sklearn\nregr = linear_model.LinearRegression()\nregr.fit(X, Y)\n\nprint('Intercept: \\n', regr.intercept_)\nprint('Coefficients: \\n', regr.coef_)","32cb0b3d":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)","ca79b91a":"y_pred = logreg.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, Y_test)))","df1ddd41":"print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, y_pred)))","2ba6e6a0":"confusion_matrix = confusion_matrix(Y_test, y_pred)\nprint(confusion_matrix)","4075eede":"print(classification_report(Y_test, y_pred))","8d70f410":"logit_roc_auc = roc_auc_score(Y_test, logreg.predict(X_test))\nfpr, tpr, thresholds = roc_curve(Y_test, logreg.predict_proba(X_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","8e88072c":"# create and fit RandomForestClassifier model  \nrfc=RandomForestClassifier()\nrfc.fit(X_train, Y_train)","271ec6cd":"#predict\ny_pred = rfc.predict(X_test)\ny_pred","65972326":"print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, y_pred)))","314f6679":"rfc_acc= accuracy_score(Y_test, y_pred)\nprint('The accuracy score using the RandomForestClassifier (befor resample) is :',rfc_acc)","e9d34123":"print(classification_report(Y_test, y_pred))","b201f608":"# create and fit DecisionTreeClassifier model\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train,Y_train)","7bed790d":"#predict\ny_pred = dtc.predict(X_test)\ny_pred","8a7a632c":"print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, y_pred)))","37340b59":"dtc_acc = accuracy_score(Y_test, y_pred)\nprint('The accuracy score with using the decision tree classifier is :',dtc_acc)","e4563179":"print(classification_report(Y_test, y_pred))","1dfe60d9":"# create and fit KNeighborsClassifier model\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train,Y_train)","b3e8fa46":"#predict\nY_pred = knn.predict(X_test)","98bba997":"print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, Y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test, Y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, Y_pred)))","18a6c24d":"#KNN accuracy score\n\nKnn_acc= accuracy_score(Y_test, knn.predict(X_test))\nprint('The accuracy socre using the KNeighborsClassifier is :',Knn_acc)","0c1c8f08":"print(classification_report(Y_test, Y_pred))","0b04ef0e":"pd.DataFrame([rfc_acc, dtc_acc, Knn_acc]).plot.bar();\nplt.xticks(np.arange(3),('RFC','DTC','KNN'))\nplt.legend().remove()\nplt.ylim(0,1)\nplt.ylabel('Accuracy')\nplt.xlabel('Models')\nplt.xticks(rotation = 0)\nplt.title('Comparing Model Accuracy');","92c87a28":"# ROC\/AUC curve\nplt.figure(figsize = (10,10))\nax = plt.gca()\nax.set_title('Receiver Operating Characteristic',size = 15)\nrfc_disp = plot_roc_curve(rfc, X_test, Y_test, ax = ax, alpha = 0.8, name = 'RandomForestClassifier')\ntree_disp = plot_roc_curve(dtc, X_test, Y_test,  ax = ax, alpha = 0.8, name = 'DecisionTreeClassifier')\nknn_disp =  plot_roc_curve(knn, X_test, Y_test,  ax = ax, alpha = 0.8, name = 'KNeighborsClassifier')","4fb4f2b9":"# GroupBy Plot","f3e843d4":"# K Nearest Neighbors Classifier","a44acee9":"# Count Plot","b0584b5d":"# Dist Plot","3cb29548":"# Random Forest Classifier Model","9d5512a9":"# Pivot Table Plot","c97b9bcf":"# Evaluation\nComparing Model Accuracy","80cae6b6":"# Bar Plot","428a65b6":"# Cross Tab Plot","d0a84210":"# Strip Plot","8a6c4578":"# Box Plot","6c35a11e":"# Box Plot","2c82853d":"# Univariate Analysis ","a6c74374":"# Violin Plot","9ed4d8c3":"# Linear Regression","0496e7e8":"# Training and Testing Data","00a671de":"# Scatter Plot","a9c3946b":"Here, 'y' is the Target Variable. After changing all(categorical) columns(\"job\", \"marital\", \"default\", \"education\", \"housing\", \"loan\", \"contact\", \"day_of_week\", \"poutcome\", \"month\", \"y\") to the Numerical values. ","dd79aa16":"# Line Plot","e0e00db3":"# Bank Client Data:\n1. age (numeric)\n2. job : type of job (categorical: \u2018admin.\u2019,\u2019bluecollar\u2019,\u2019entrepreneur\u2019,\u2019housemaid\u2019,\u2019management\u2019,\u2019retired\u2019,\u2019self-employed\u2019,\u2019services\u2019,\u2019student\u2019,\u2019technician\u2019,\u2019unemployed\u2019,\u2019unknown\u2019)\n3. marital : marital status (categorical: \u2018divorced\u2019,\u2019married\u2019,\u2019single\u2019,\u2019unknown\u2019; note: \u2018divorced\u2019 means divorced or widowed)\n4. education (categorical:\u2018basic.4y\u2019,\u2019basic.6y\u2019,\u2019basic.9y\u2019,\u2019high.school\u2019,\u2019illiterate\u2019,\u2019professional.course\u2019,\n\u2019university.degree\u2019,\u2019unknown\u2019)\n5. default: has credit in default? (categorical: \u2018no\u2019,\u2019yes\u2019,\u2019unknown\u2019)\n6. housing: has housing loan? (categorical: \u2018no\u2019,\u2019yes\u2019,\u2019unknown\u2019)\n7. loan: has personal loan? (categorical: \u2018no\u2019,\u2019yes\u2019,\u2019unknown\u2019)\n# Related with the last contact of the current campaign:\n8. contact: contact communication type (categorical: \u2018cellular\u2019,\u2019telephone\u2019)\n9. month: last contact month of year (categorical: \u2018jan\u2019, \u2018feb\u2019, \u2018mar\u2019, \u2026, \u2018nov\u2019, \u2018dec\u2019)\n10. day_of_week: last contact day of the week (categorical: \u2018mon\u2019,\u2019tue\u2019,\u2019wed\u2019,\u2019thu\u2019,\u2019fri\u2019)\n11. duration: last contact duration, in seconds (numeric). Important note: this attribute highly affects the output target (e.g., if duration=0 then y=\u2019no\u2019). Yet, the duration is not known before a call is performed. Also, after the end of the call y is obviously known. Thus, this input should only be included for benchmark purposes and should be discarded if the intention is to have a realistic predictive model.\n# other attributes:\n12. campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)\n13. pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)\n14. previous: number of contacts performed before this campaign and for this client (numeric)\n15. poutcome: outcome of the previous marketing campaign (categorical: \u2018failure\u2019,\u2019nonexistent\u2019,\u2019success\u2019)\n# social and economic context attributes\n16. emp.var.rate: employment variation rate \u2014 quarterly indicator (numeric)\n17. cons.price.idx: consumer price index \u2014 monthly indicator (numeric)\n18. cons.conf.idx: consumer confidence index \u2014 monthly indicator (numeric)\n19. euribor3m: euribor 3 month rate \u2014 daily indicator (numeric)\n20. nr.employed: number of employees \u2014 quarterly indicator (numeric)","fa479d64":"# Bar Plot","7f3442e8":"# Logistic Regression","21135558":"# Violion Plot","20909082":"# Decision Tree Classifier"}}