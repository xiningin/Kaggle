{"cell_type":{"e265d6a7":"code","0897baae":"code","e787d7ff":"code","5e90f751":"code","a1dd4437":"code","f3919437":"code","ba464b43":"code","3580ab0a":"code","a2405e93":"code","66c5ecac":"code","d99107ce":"code","f157e27a":"code","9bad530d":"code","50d45ea0":"code","ff18d3a9":"code","3b803323":"code","33370546":"code","ba1b8bcb":"code","7ea9f07c":"code","cf803015":"code","11510f27":"code","9b291f38":"code","5ac43259":"code","0af77953":"code","54ecc0e8":"code","71f216f0":"code","2d8108e5":"code","e4f2eadd":"code","af22d401":"code","017e7317":"code","1f4a6de1":"code","556fb7d1":"code","7beaa83f":"code","82d57b1a":"code","4eb6ea47":"code","99444ea3":"code","5d49a83c":"code","4831efb0":"markdown","4ee95036":"markdown","425352a8":"markdown","3378d02d":"markdown","757edb2a":"markdown","a9a26b3f":"markdown","6b515e78":"markdown","f21fae9c":"markdown","3a52e3eb":"markdown","22c29a23":"markdown","608653cb":"markdown","d70deb95":"markdown","e170fbc5":"markdown","0754c9c1":"markdown"},"source":{"e265d6a7":"# Import relevant modules\n\nimport pandas as pd\nimport numpy as np\nimport math\nimport seaborn as sns\nimport matplotlib.pyplot as plt","0897baae":"# Read data and get an overview of the data\n\nfile_1 = \"..\/input\/song-popularity-prediction\/train.csv\"\nfile_2 = \"..\/input\/song-popularity-prediction\/test.csv\"\n\ndf = pd.read_csv(file_1) # I will using train data mostly, so I passed into a variable df for ease.\ntest = pd.read_csv(file_2)\ndf.head()","e787d7ff":"# Let's take a more detailed view of the data\n\ndf.info","5e90f751":"# Let's pull the statistics of the TRAIN dataset\n\ndf.describe()","a1dd4437":"# Let's pull the statistics of the TRAIN dataset\n\ntest.describe()","f3919437":"# How many rows and columns do we have\n\ndf.shape","ba464b43":"# Very important to check for null values\n\ndf.isna().any()","3580ab0a":"# Let's visualize the missing data in the TRAIN data\n\nplt.figure(figsize=(10,6))\nsns.displot(\n    data=df.isna().melt(value_name=\"missing\"),\n    y=\"variable\",\n    hue=\"missing\",\n    multiple=\"fill\",\n    aspect=1.25)\n\nplt.show()","a2405e93":"# Let's visualize the missing data in the TEST data\n\nplt.figure(figsize=(10,6))\nsns.displot(\n    data=test.isna().melt(value_name=\"missing\"),\n    y=\"variable\",\n    hue=\"missing\",\n    multiple=\"fill\",\n    aspect=1.25)\n\nplt.show()","66c5ecac":"#Check for duplicate values\n\ndf.duplicated().any()","d99107ce":"# Let's kknow the data types we are dealing with\n\ndf.dtypes","f157e27a":"df.isna().values.any()","9bad530d":"# Let's have another view of the data\n\ndf.head()","50d45ea0":"# Filter out Nan values from song duration column\n\nfiltered_song_duration_ms = df[df['song_duration_ms'].notnull()]\n\n#Plot\n\nfig, ax = plt.subplots(figsize=(8,5))\nsns.kdeplot(filtered_song_duration_ms['song_duration_ms'], color=\"green\", shade=True)\nax.set_title('Density Plot for Song Duration')\nplt.show()","ff18d3a9":"# filter for null values\nfiltered_acousticness = df[df['acousticness'].notnull()]\n\n#plot\n\nfig, ax = plt.subplots(figsize=(8,5))\nsns.kdeplot(filtered_acousticness['acousticness'], color=\"blue\", shade=True)\nax.set_title('Density Plot for Acousticness')\nplt.show()","3b803323":"# filter for null values\nfiltered_danceability = df[df['danceability'].notnull()]\n\n#plot\n\nfig, ax = plt.subplots(figsize=(8,5))\nsns.kdeplot(filtered_danceability['danceability'], color=\"red\", shade=True)\nax.set_title('Density Plot for danceability')\nplt.show()","33370546":"# filter for null values\nfiltered_energy = df[df['energy'].notnull()]\n\n#plot\nfig, ax = plt.subplots(figsize=(8,5))\n\nsns.kdeplot(filtered_energy['energy'], color=\"yellow\", shade=True)\nax.set_title('Density Plot for energy')\nplt.show()","ba1b8bcb":"# filter for null values\nfiltered_instrumentalness = df[df['instrumentalness'].notnull()]\n\n#plot\nfig, ax = plt.subplots(figsize=(8,5))\n\nsns.kdeplot(filtered_instrumentalness['instrumentalness'], color=\"purple\", shade=True)\nax.set_title('Density Plot for Instrumentalness')\nplt.show()","7ea9f07c":"fig, ax = plt.subplots(figsize=(8,5))\ndf.groupby(['key'])['key'].count().plot.bar(width=0.9, color=plt.cm.Paired(np.arange(len(df))))\nax.set_title('Key')\nplt.show()","cf803015":"# ax = df['filtered_song_duration_ms'].plot.kde(bw_method=0.3)","11510f27":"# filter for null values\nfiltered_liveness = df[df['liveness'].notnull()]\n\n#plot\nfig, ax = plt.subplots(figsize=(8,5))\n\nsns.kdeplot(filtered_liveness['liveness'], color=\"grey\", shade=True)\nax.set_title('Density Plot for liveness')\nplt.show()","9b291f38":"# filter for null values\nfiltered_loudness = df[df['loudness'].notnull()]\n\n#plot\nfig, ax = plt.subplots(figsize=(8,5))\n\nsns.kdeplot(filtered_loudness['loudness'], color=\"orange\", shade=True)\nax.set_title('Density Plot for loudness')\nplt.show()","5ac43259":"\nfig, ax = plt.subplots(figsize=(8,5))\ndf.groupby(['audio_mode'])['audio_mode'].count().plot.bar(width=0.9, color=plt.cm.Paired(np.arange(len(df))))\nax.set_title('Audio Mode')\nplt.show()\n","0af77953":"# filter for null values\nfiltered_speechiness = df[df['speechiness'].notnull()]\n\n#plot\nfig, ax = plt.subplots(figsize=(8,5))\n\nsns.kdeplot(filtered_speechiness['speechiness'], color=\"cyan\", shade=True)\nax.set_title('Density Plot for Speechiness')\nplt.show()","54ecc0e8":"# filter for null values\nfiltered_tempo = df[df['tempo'].notnull()]\n\n#plot\nfig, ax = plt.subplots(figsize=(8,5))\n\nsns.kdeplot(filtered_tempo['tempo'], color=\"brown\", shade=True)\nax.set_title('Density Plot for Tempo')\nplt.show()","71f216f0":"\nfig, ax = plt.subplots(figsize=(8,5))\ndf.groupby(['time_signature'])['time_signature'].count().plot.bar(width=0.9, color=plt.cm.Paired(np.arange(len(df))))\nax.set_title('Time Signature')\nplt.show()\n","2d8108e5":"fig, ax = plt.subplots(4, 3, figsize=(14, 12))\n\nsns.kdeplot(filtered_song_duration_ms['song_duration_ms'],color = 'green',shade=True, ax=ax[0,0]).set(title='Song Duration')\nsns.kdeplot(filtered_acousticness['acousticness'], color=\"blue\", shade=True, ax=ax[0,1]).set(title='Acousticness')\nsns.kdeplot(filtered_danceability['danceability'], color=\"red\", shade=True, ax=ax[0,2]).set(title='Danceability')\nsns.kdeplot(filtered_energy['energy'], color='yellow', shade=True, ax=ax[1,0]).set(title='Energy')\nsns.kdeplot(filtered_instrumentalness['instrumentalness'], color='purple', shade=True, ax=ax[1,1]).set(title='Instrumentalness')\ndf.groupby(['key'])['key'].count().plot.bar(width=0.9, color=plt.cm.Paired(np.arange(len(df))), ax=ax[1,2], title='Key')\nsns.kdeplot(filtered_liveness['liveness'], color='grey', shade=True, ax=ax[2,0]).set(title='Liveness')\nsns.kdeplot(filtered_loudness['loudness'], color='orange', shade=True, ax=ax[2,1]).set(title='Loudness')\ndf.groupby(['audio_mode'])['audio_mode'].count().plot.bar(width=0.9,\n                                                          color=plt.cm.Paired(np.arange(len(df))),ax=ax[2,2],title='Audio Mode')\n\nsns.kdeplot(filtered_speechiness['speechiness'], color=\"cyan\", shade=True, ax=ax[3,0]).set(title='Speechiness')\nsns.kdeplot(filtered_tempo['tempo'], color=\"brown\", shade=True, ax=ax[3,1]).set(title='Tempo')\ndf.groupby(['time_signature'])['time_signature'].count().plot.bar(\n    width=0.9, color=plt.cm.Paired(np.arange(len(df))),ax=ax[3,2],title='Time Signature')\n\n\nplt.tight_layout(pad=2)\nplt.show()","e4f2eadd":"# filter for null values\nfiltered_audio_valence = df[df['audio_valence'].notnull()]\n\n#plot\nfig, ax = plt.subplots(figsize=(8,5))\n\nsns.kdeplot(filtered_audio_valence['audio_valence'], color=\"indigo\", shade=True)\nax.set_title('Density Plot for Audio Valence')\nplt.show()","af22d401":"# Separating the songs by popularity\n\nfig, ax = plt.subplots(figsize=(9,6))\ndf.groupby(['song_popularity'])['song_popularity'].count().plot.bar(width=0.9, color=plt.cm.Paired(np.arange(len(df))))\nax.set_title('Song Popularity')\n\ntotal = len(df)\nsizes = []\n\nfor p in ax.patches:\n    height = p.get_height()\n    sizes.append(height)\n    ax.text(p.get_x() + p.get_width()\/2.0, height+600, '{:1.2f}%'.format(height\/total*100), ha='center')\n    \nplt.show()","017e7317":"# Audio mode by popularity\n\nfig, ax = plt.subplots(figsize=(8,5))\nsns.countplot(data=df, x='audio_mode',hue='song_popularity')\nax.set_title('Audio Mode:Popular vs Unpopular')\nplt.show()\n","1f4a6de1":"# Let's view count of songs key by popularity\n\nfig, ax = plt.subplots(figsize=(8,5))\nsns.countplot(x='key',hue='song_popularity',data=df)\nax.set_title('Key: Popular & Unpopular')\nplt.show()","556fb7d1":"# Let's view time signature by popularity\n\nfig, ax = plt.subplots(figsize=(8,5))\nsns.countplot(x='time_signature', hue='song_popularity', data= df)\nax.set_title('Time Signature: Popular & Unpopular')\nplt.show()","7beaa83f":"# Let's plot correlation overview of the variables.\n\nfig, ax = plt.subplots(figsize=(11, 9))\ndf_correlations = df.iloc[:,1:].corr()\n  \n# plotting correlation heatmap\ndataplot = sns.heatmap(df_correlations.corr(), cmap=\"YlGnBu\", annot=True)\n  \n# displaying heatmap\nplt.show()","82d57b1a":"# Let's visualize the above observations using a scatterplot\n\n\nplt.figure(figsize = (15,7))\nplt.subplot(1,2,1)\nsns.scatterplot(data = df.iloc[:,1:], x = 'energy', y = 'acousticness', color = 'indigo')\nplt.xticks(size = 15,)\nplt.yticks(size = 15,)\n\nplt.subplot(1,2,2)\nsns.scatterplot(data = df.iloc[:,1:], x = 'energy', y = 'acousticness', hue = 'song_popularity')\nplt.xticks(size = 15,)\nplt.yticks(size = 15,)\n\nplt.show()","4eb6ea47":"# Let's visualize the above observations using a scatterplot\n\nplt.figure(figsize = (15,7))\n\nplt.subplot(1,2,1)\nsns.scatterplot(data = df.iloc[:,1:], x = 'loudness', y = 'acousticness', color = 'indigo')\nplt.xticks(size = 15,)\nplt.yticks(size = 15,)\n\nplt.subplot(1,2,2)\nsns.scatterplot(data = df.iloc[:,1:], x = 'loudness', y = 'acousticness', hue = 'song_popularity')\nplt.xticks(size = 15,)\nplt.yticks(size = 15,)\n\nplt.show()","99444ea3":"# Let's visualize the above observations using a scatterplot\n\nplt.figure(figsize = (15,7))\n\nplt.subplot(1,2,1)\nsns.scatterplot(data = df.iloc[:,1:], x = 'energy', y = 'loudness', color = 'indigo')\nplt.xticks(size = 15,)\nplt.yticks(size = 15,)\n\nplt.subplot(1,2,2)\nsns.scatterplot(data = df.iloc[:,1:] , x = 'energy', y = 'loudness', hue = 'song_popularity')\nplt.xticks(size = 15,)\nplt.yticks(size = 15,)\n\nplt.show()","5d49a83c":"import random\n\nuseful_colors = [col for col in df.columns if col not in ['id', 'song_popularity']]\ncolor_distribution = [col for col in useful_colors if col not in ['key', 'audio_mode', 'time_signature']]\n\n\nplt.figure(figsize = (12,11))\ncolors = ['#9D2417', '#AF41B4', '#003389' ,'#3C5F41',  '#967032', '#2734DE'] \nfor i in enumerate(df[color_distribution].columns):\n  rand_col = colors[random.sample(range(6), 1)[0]]\n\n  plt.subplot(4,3, i[0]+1)\n    \n  sns.kdeplot(data = df, x = i[1], hue = 'song_popularity', fill = rand_col, color = rand_col )\n  plt.title (i[1], color = 'black', fontsize=14)\n  plt.xlabel(\" \")\n  plt.ylabel(\" \")\n  plt.xticks(rotation = 45)\n  plt.tight_layout()\n    \nplt.show()","4831efb0":"#### Some observations.\n\n\n* So, we can see that there are NAN values in some columns, we dealt with Nans by filling with 0 since data is numeric.\n* We have no duplicate values.\n* The data types are in floats and integers, so, we have no categorical data.\n* Data contains 40,000 rows and 15 columns.\n\n#### Noted, now we will move on to other aspects of the EDA","4ee95036":"### Observation\n\n* There is only a minor difference between the length or popular songs & unpopular songs.","425352a8":"### Observation\n* Seen here the correlation between energy and loudness.","3378d02d":"### Some observations as follows;\n\n* There\u2019s a strong anti-correlation between acousticness vs energy (-0.91) and loudness (-0.86), respectively. \n* There's a strong correlation between energy and loudness (0.92).\n* None of the features individually show a notable correlation with song_popularity, the target variable.","757edb2a":"## Observations\n\n#### Based on the above visualizations, we observe that:\n\n* The veriable audio_mode is a boolean feature, while Key and time_scale are ordinal\/categorical variables.\n* The features - accosticness, danceability, energy, liveliness, speechiness & audio_valence are bound between 0 and 1.\n* The feature loudness may refer to decibel scale.","a9a26b3f":"# Analysis of Categorical Variables ","6b515e78":"### Observation\n\n* We see that for most part, there are more unpopular songs for each variables.\n* This is slightly different though, when song KEY is 11, and Time signature is 2 & 5.\n\n\n \n \n ","f21fae9c":"### Observation\n\n* 36.44% of the songs are popular, while 63.56% of the songs are not.\n\n#### Next, I will drill down by categorical variables by popularity.\n\n\n\n#  \n\n","3a52e3eb":"# Visualization of Individual Features","22c29a23":"* Audio mode\n* Key\n* Time signature","608653cb":"# CORRELATION OVERVIEW","d70deb95":"### Welcome to this community competition here on Kaggle. The challenge is about predicting song popularity based on a set of certain features. The data consists of the standard kaggle CSV, which are - train, test and sample submission.\n\n### I will be conducting this EDA to go over the data to understand all its features.","e170fbc5":"# INTRODUCTION","0754c9c1":"# Final Words\n\n* Thank you Martin Henze for the video on EDA, done in R.\n* Purpose of this EDA was to translate from R to Python, largely achieved that.\n* Observations here can form the basis to develop a machine learning model for prediction.\n* I will revisit this in the near future.\n"}}