{"cell_type":{"caa1f11e":"code","bbec817e":"code","53627830":"code","cb011ee9":"code","181eb207":"code","502c2f33":"code","46e672a8":"code","f8206040":"code","13a9978c":"code","ff00b4a9":"code","cd78f282":"code","f47237ed":"code","5c88c866":"code","9cc043d0":"code","3cade324":"code","56cf7ca0":"code","2f7399af":"code","be23ec59":"code","f850f9a8":"code","6dd68add":"code","7e34330f":"code","b2ddfefe":"markdown","b189a644":"markdown","d7117bab":"markdown","b024bc42":"markdown","6204881a":"markdown","68b8efc1":"markdown","10aed72c":"markdown","5d2982d0":"markdown","9e69e3bf":"markdown","a74a69ba":"markdown","37851c66":"markdown"},"source":{"caa1f11e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nprint(os.listdir(\"..\/input\/bike-sharing-dataset\"))\n\n# Any results you write to the current directory are saved as output.","bbec817e":"raw = pd.read_csv(\"..\/input\/bike-sharing-dataset\/hour.csv\")","53627830":"raw.head()","cb011ee9":"raw.describe()","181eb207":"def generate_dummies(df, dummy_column):\n    dummies = pd.get_dummies(df[dummy_column], prefix=dummy_column)\n    df = pd.concat([df, dummies], axis=1)\n    return df\n\nX = pd.DataFrame.copy(raw)\ndummy_columns = [\"season\",     # season (1:springer, 2:summer, 3:fall, 4:winter)\n                 \"yr\",          # year (0: 2011, 1:2012)\n                 \"mnth\",        # month ( 1 to 12)\n                 \"hr\",          # hour (0 to 23)\n                 \"weekday\",     # weekday : day of the week\n                 \"weathersit\"   # weathersit : \n                                 # - 1: Clear, Few clouds, Partly cloudy, Partly cloudy\n                                 # - 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n                                 # - 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n                                 # - 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog\n                ]\nfor dummy_column in dummy_columns:\n    X = generate_dummies(X, dummy_column)","502c2f33":"X.head()","46e672a8":"X.columns","f8206040":"for dummy_column in dummy_columns:\n    del X[dummy_column]\n\nX.columns","13a9978c":"X.head()","ff00b4a9":"X.describe()","cd78f282":"first_3_weeks = 3*7*24 # 3 weeks (7 days), 24 hours each day\nX[:first_3_weeks].plot(x='dteday', y='cnt', figsize=(18, 5))","f47237ed":"del X[\"instant\"]\ndel X[\"dteday\"]","5c88c866":"y = X[\"cnt\"]\ndel X[\"cnt\"]\ndel X[\"registered\"]\ndel X[\"casual\"]","9cc043d0":"X.head()","3cade324":"all_days = len(X) \/\/ 24\nprint(\"Total observations\", len(X))\nprint(\"Total number of days\", all_days)\ndays_for_training = int(all_days * 0.7)\nX_train = X[0:days_for_training]\nX_test = X[days_for_training:]","56cf7ca0":"print(\"Observations for training\", len(X_train))\nprint(\"Observations for testing\", len(X_test))\nprint(\"Some target values\", y.head())","2f7399af":"y_normalized = (y - y.min()) \/ (y.max() - y.min())\ny_normalized.head()\n\ny_train = y[0:days_for_training]\ny_test = y[days_for_training:]\ny_train_normalized = y_normalized[0:days_for_training]\ny_test_normalized = y_normalized[days_for_training:]","be23ec59":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfeatures = X.shape[1]\nmodel = Sequential()\nmodel.add(Dense(13, input_shape=(features,), activation='relu'))\nmodel.add(Dropout(0.75))\nmodel.add(Dense(1, activation='linear'))\n\nmodel.summary()","f850f9a8":"from keras.optimizers import SGD\nsgd = SGD(lr=0.01)\nmodel.compile(optimizer=sgd, loss=\"mean_squared_error\")","6dd68add":"results = model.fit(X_train, y_train_normalized, epochs=10, validation_data = (X_test, y_test_normalized))","7e34330f":"results.history\npd.DataFrame.from_dict(results.history).plot()","b2ddfefe":"### Time for us to plot some data and get an idea of what's going on here","b189a644":"## Now, we are going to explore that data and understand it. The description reads as this\n\nBoth hour.csv and day.csv have the following fields, except hr which is not available in day.csv\n\t\n\t- instant: record index\n\t- dteday : date\n\t- season : season (1:springer, 2:summer, 3:fall, 4:winter)\n\t- yr : year (0: 2011, 1:2012)\n\t- mnth : month ( 1 to 12)\n\t- hr : hour (0 to 23)\n\t- holiday : weather day is holiday or not (extracted from http:\/\/dchr.dc.gov\/page\/holiday-schedule)\n\t- weekday : day of the week\n\t- workingday : if day is neither weekend nor holiday is 1, otherwise is 0.\n\t+ weathersit : \n\t\t- 1: Clear, Few clouds, Partly cloudy, Partly cloudy\n\t\t- 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n\t\t- 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n\t\t- 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog\n\t- temp : Normalized temperature in Celsius. The values are divided to 41 (max)\n\t- atemp: Normalized feeling temperature in Celsius. The values are divided to 50 (max)\n\t- hum: Normalized humidity. The values are divided to 100 (max)\n\t- windspeed: Normalized wind speed. The values are divided to 67 (max)\n\t- casual: count of casual users\n\t- registered: count of registered users\n\t- cnt: count of total rental bikes including both casual and registered","d7117bab":"### Finally, we need to declare which one will be our \"target\" column, that is, what do we want to predict? in this case it would be either \"casual\", \"registered\" or \"cnt\". I will use \"cnt\"","b024bc42":"### It is also obvious that we do not need the \"instant\", \"'dteday\" columns, lets remove them","6204881a":"### We still need to normalize our target values!","68b8efc1":"## We will now split into train data and test data, using 70% as train data","10aed72c":"## Now we need to drop the columns used originally for dummies, notice that now we have weekday_0, weekday_1 ... weekday_6, which represents Sunday to Monday (personal note here!!: I am Spanish and in Spain weekday 0 would be Monday... in English however the first day of the week is Sunday... keep in in mind!)\n\n### In any case, despite having weekday_1... weekday_6 we still have the column weekday, which is of no use already, so lets remove it along with the rest of dummy columns","5d2982d0":"### And now, lets see how our data looks like","9e69e3bf":"##  Lets check the categorical variables now.\n\n### We have some variables such as the week days in which we do NOT really want to use numbers, but we just simply want to denotate whether or not a bicycle was used in a given day (Monday, Tuesday). At the moment that is done by assigning to the column \"weekday\" a value between 0 and 6, we want to change that... lets use dummy variables","a74a69ba":"## We will now build a simple model","37851c66":"## Lets get a deeper look"}}