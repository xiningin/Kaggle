{"cell_type":{"0f03c31f":"code","852a7921":"code","d9dce518":"code","d2667f80":"code","eea9c00e":"code","d7e959f5":"code","8f0ec00c":"code","e4d0c08e":"code","76799b4c":"code","779c42af":"code","1b6bbc90":"code","688b6ee9":"code","6f85cfc3":"code","7d1d2e4f":"code","d6427c9f":"code","564abada":"code","e12b8518":"code","0efd19c4":"code","dedb30aa":"code","13faf6ed":"code","230c995c":"code","64fb9c5d":"code","52466ce4":"code","099810bc":"markdown","7ec4c982":"markdown","30e40a46":"markdown","633ae42a":"markdown","da49e14d":"markdown","7aecf4f3":"markdown","0ca097fb":"markdown","8c6ee8a1":"markdown","c5471f5e":"markdown","09d1e8ed":"markdown"},"source":{"0f03c31f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","852a7921":"df = pd.read_csv(\"..\/input\/corona-virus-brazil\/brazil_covid19.csv\")\ndf.head()","d9dce518":"df_region = df\nregio_group = df_region.groupby([\"region\"])['date',\"cases\"].sum().reset_index()\nregio_group =regio_group.sort_values(by='cases', ascending=False)\nregio_group","d2667f80":"df_ceara = df[df[\"state\"]==\"Cear\u00e1\"]\ndf_ceara","eea9c00e":"dgc = df_ceara[df_ceara[\"cases\"]>0].groupby([\"date\"])[\"cases\"].sum().reset_index()\ndg_c = dgc.sort_values(by='date', ascending=True)\ndg_c.head(2)\n\ndf_ce = pd.DataFrame(dg_c.set_index('date').diff()).reset_index()\ndf_ce = df_ce.sort_values('date', ascending = True) \ndf_ce = df_ce[1:]\ndf_ce.tail(10).style.background_gradient(cmap='OrRd')","d7e959f5":"plt.plot(df_ce[\"date\"], df_ce[\"cases\"])\nplt.show()","8f0ec00c":"dg = df[df[\"cases\"]>0].groupby([\"date\"])[\"cases\"].sum().reset_index()\ndg_n = dg.sort_values(by='date', ascending=True)\ndg_n.head(2)","e4d0c08e":"plt.plot(dg_n[\"date\"], dg_n[\"cases\"])\nplt.show()","76799b4c":"bra = pd.DataFrame(dg_n.set_index('date').diff()).reset_index()\nbra = bra.sort_values('date', ascending = True) \nbra = bra[1:]\nbra.tail(20).style.background_gradient(cmap='OrRd')","779c42af":"bra.sum()","1b6bbc90":"plt.plot(bra[\"date\"], bra[\"cases\"])\nplt.show()","688b6ee9":"from statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.ar_model import AR\nfrom sklearn.metrics import mean_squared_error","6f85cfc3":"bra.set_index(\"date\", inplace=True)\nbra.head(2)","7d1d2e4f":"X = bra.values\ntrain = X[:len(bra)-5]\ntest = X[len(bra)-5:]\npred = []\nX.size","d6427c9f":"import itertools\np=range(0,7)\nq = range(0,3)\nd = range(0,4)\npdq = list(itertools.product(p,d,q))\nimport warnings\nwarnings.filterwarnings('ignore')\nfor param in pdq:\n    try:        \n        model_arima = ARIMA(train,order=param)\n        model_arima_fit = model_arima.fit()\n        print(param,model_arima_fit.aic)\n        predictions= model_arima_fit.forecast(steps=5)[0]\n        mse = mean_squared_error(test,predictions)        \n        print(mse)\n    except:\n        continue    \n        ","564abada":"model_Arima = ARIMA(train, order=(2,0,0))\nmodel_Arima_fit = model_Arima.fit()\nprint(model_Arima_fit.aic)","e12b8518":"predictions = model_Arima_fit.forecast(steps=5)[0]\npredictions","0efd19c4":"plt.plot(test)\nplt.plot(predictions, color=\"red\")\nplt.show()\nprint(predictions.sum())\nprint(test.sum())","dedb30aa":"import itertools\np=range(0,7)\nq = range(0,3)\nd = range(0,4)\npdq = list(itertools.product(p,d,q))\nimport warnings\nwarnings.filterwarnings('ignore')\nfor param in pdq:\n    try:        \n        model_arima = ARIMA(X,order=param)\n        model_arima_fit = model_arima.fit()\n        print(param,model_arima_fit.aic)\n        predictions= model_arima_fit.forecast(steps=5)[0]\n        mse = mean_squared_error(test,predictions)        \n        print(mse)\n    except:\n        continue    \n        ","13faf6ed":"model_Arima = ARIMA(X, order=(0,1,1))\nmodel_Arima_fit = model_Arima.fit()\nprint(model_Arima_fit.aic)","230c995c":"predictions = model_Arima_fit.forecast(steps=10)[0]\npredictions","64fb9c5d":"plt.plot(predictions, color=\"red\")\nplt.show()","52466ce4":"round(predictions.sum())","099810bc":"> > Predict the next 5 days and consider only 70% of predict","7ec4c982":"Predict the next 10 days","30e40a46":"> > Get the difference by day, because it have the aggregate number by day.","633ae42a":"> > Split the dataset into training and testing to apply to the ARIMA algorithm","da49e14d":"> > Train the data ","7aecf4f3":"> > PLot of the difference","0ca097fb":"> > Test tha parameters ","8c6ee8a1":"> > Visualization of aggregated data over time","c5471f5e":"> > Read the dataset of brazilians numbers","09d1e8ed":"> > Now make a groupby by date and get only when started the cases"}}