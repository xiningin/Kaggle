{"cell_type":{"f5dabe47":"code","611e1dba":"code","26dbaae8":"code","aa127725":"code","2f5ad0ca":"code","4479323a":"code","d18bba07":"code","876064b4":"code","af16054a":"code","e74e2191":"code","5a1a5c3e":"code","35bfa123":"code","07681ff6":"code","fafd332d":"code","4e7ad456":"code","e85814a0":"code","cf14310a":"code","9a500685":"code","36b64ba8":"code","0dc5213b":"code","f592dd25":"code","77150a68":"code","2b4f909f":"code","3be49e6c":"code","4aecba4c":"code","ccf19682":"code","a3ba575f":"code","b95ae74b":"code","b381db19":"code","921d3917":"code","8c06347d":"code","dc22b989":"code","2530ddce":"code","316fe272":"code","c4d20d9a":"code","fb825461":"code","eb258ed7":"code","71990d95":"code","5c4dad4e":"code","e24c3e3c":"code","c623e1ba":"code","e4e5a98f":"code","24dd43eb":"code","87cf1b06":"code","d00cf416":"code","7a1e0653":"code","99b54d73":"code","2701e5da":"code","6e3ce594":"code","a8577091":"code","477b837b":"code","537994c0":"code","ded0e821":"code","3e29cb36":"code","e258dae8":"code","bc3ed104":"code","9fc1371a":"code","93fff3fb":"code","fa205346":"code","15c0de21":"code","304e7ea3":"code","7f353086":"code","7989b02d":"markdown","b799f3a2":"markdown","156ae9f1":"markdown","e8c8cb40":"markdown","c81715e5":"markdown","7a78a216":"markdown","19663712":"markdown","3f42efe6":"markdown","0ccf549e":"markdown","68b66a29":"markdown","bb7c3891":"markdown","e36a8822":"markdown","e4be0062":"markdown","9f231def":"markdown","5e4dae6d":"markdown","c47a1c76":"markdown","e98486b0":"markdown","8a114c44":"markdown","ca51fc69":"markdown","d821ef61":"markdown","2619daca":"markdown","af890f48":"markdown","0941ac82":"markdown","a584a950":"markdown","ff951ebb":"markdown","8c579a97":"markdown","57b2989b":"markdown","938f75e8":"markdown","09b2dd23":"markdown","abe9980e":"markdown","8f10caa9":"markdown"},"source":{"f5dabe47":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","611e1dba":"df=pd.read_csv(\"..\/input\/uber-request-data\/Uber Request Data.csv\")\ndf.head()","26dbaae8":"len(df[\"Request id\"].unique())","aa127725":"df.shape","2f5ad0ca":"df.isnull().sum()","4479323a":"df.isnull().sum()\/df.shape[0]*100 # df.shape[0] gives the number of rows","d18bba07":"df.info()","876064b4":"df.describe(include=\"all\")","af16054a":"df[\"Request timestamp\"].value_counts()","e74e2191":"df[\"Request timestamp\"]=df[\"Request timestamp\"].astype(str)","5a1a5c3e":"df[\"Request timestamp\"]=df[\"Request timestamp\"].replace(\"\/\",\"-\")","35bfa123":"df[\"Request timestamp\"]=pd.to_datetime(df[\"Request timestamp\"],dayfirst=True)","07681ff6":"df.info()","fafd332d":"df[\"Drop timestamp\"]=pd.to_datetime(df[\"Drop timestamp\"],dayfirst=True)","4e7ad456":"df.info()","e85814a0":"df[\"Drop timestamp\"]","cf14310a":"req_hour=df[\"Request timestamp\"].dt.hour # Fetching the hour number from the request timestamp","9a500685":"df[\"req_hour\"]=req_hour # Adding a new column \"req_hour\" from the hour number fetched from above.","36b64ba8":"req_day=df[\"Request timestamp\"].dt.day # Fetching the day number from the request timestamp","0dc5213b":"df[\"req_day\"]=req_day # Adding a new column \"req_day\" from the day number fetched from above","f592dd25":"sns.countplot(x=\"req_hour\",data=df,hue=\"Status\")\nplt.show()","77150a68":"sns.catplot(x=\"req_hour\",data=df,hue=\"Pickup point\",kind=\"count\")\nplt.show()","2b4f909f":"df[\"Time_Slot\"]=0","3be49e6c":"df.head()","4aecba4c":"j=0\nfor i in df[\"req_hour\"]:\n    if df.iloc[j,6]<5:\n        df.iloc[j,8]=\"Pre_Morning\"\n    elif 5<=df.iloc[j,6]<10:\n        df.iloc[j,8]=\"Morning_Rush\"\n        \n    elif 10<=df.iloc[j,6]<17:\n        df.iloc[j,8]=\"Day_Time\"\n        \n    elif 17<=df.iloc[j,6]<22:\n        df.iloc[j,8]=\"Evening_Rush\"\n    else:\n        df.iloc[j,8]=\"Late_Night\"\n    j=j+1","ccf19682":"df.head()","a3ba575f":"df[\"Time_Slot\"].value_counts()","b95ae74b":"plt.figure(figsize=(10,6))\nsns.countplot(x=\"Time_Slot\",hue=\"Status\",data=df)\nplt.show()","b381db19":"df_morning_rush=df[df['Time_Slot']=='Morning_Rush']","921d3917":"sns.countplot(x=\"Pickup point\",hue=\"Status\",data=df_morning_rush)","8c06347d":"# Pickup point= Airport\n\ndf_airport_cancelled=df_morning_rush.loc[(df_morning_rush[\"Pickup point\"]==\"Airport\") & (df_morning_rush[\"Status\"]==\"Cancelled\")]\nlen(df_airport_cancelled)","dc22b989":"# Pickup point= City\ndf_city_cancelled=df_morning_rush.loc[(df_morning_rush[\"Pickup point\"]==\"City\") & (df_morning_rush[\"Status\"]==\"Cancelled\")]\nlen(df_city_cancelled)","2530ddce":"df_morning_rush[(df_morning_rush[\"Pickup point\"]==\"City\")].shape[0]","316fe272":"df_morning_rush[(df_morning_rush[\"Pickup point\"]==\"City\") & (df_morning_rush[\"Status\"]==\"Cancelled\")].shape[0]","c4d20d9a":"df_morning_rush[(df_morning_rush[\"Pickup point\"]==\"City\") & (df_morning_rush[\"Status\"]==\"Trip Completed\")].shape[0]","fb825461":"df_morning_rush[(df_morning_rush[\"Pickup point\"]==\"City\") & (df_morning_rush[\"Status\"]==\"No Cars Available\")].shape[0]","eb258ed7":"df_morning_rush[(df_morning_rush[\"Pickup point\"]==\"Airport\")].shape[0]","71990d95":"df_morning_rush[(df_morning_rush[\"Pickup point\"]==\"Airport\") & (df_morning_rush[\"Status\"]==\"Cancelled\")].shape[0]","5c4dad4e":"df_morning_rush[(df_morning_rush[\"Pickup point\"]==\"Airport\") & (df_morning_rush[\"Status\"]==\"Trip Completed\")].shape[0]","e24c3e3c":"df_morning_rush[(df_morning_rush[\"Pickup point\"]==\"Airport\") & (df_morning_rush[\"Status\"]==\"No Cars Available\")].shape[0]","c623e1ba":"df_evening_rush=df[df['Time_Slot']=='Evening_Rush']\ndf_evening_rush.head()","e4e5a98f":"df_city_cancelled=df_evening_rush[(df_evening_rush[\"Pickup point\"]==\"City\") & (df_evening_rush[\"Status\"]==\"Cancelled\")]","24dd43eb":"sns.countplot(x=\"Pickup point\",hue=\"Status\",data=df_evening_rush)","87cf1b06":"df_evening_rush[\"Status\"].value_counts()","d00cf416":"df_evening_rush[(df_evening_rush[\"Pickup point\"]==\"City\")].shape[0]","7a1e0653":"df_evening_rush[(df_evening_rush[\"Pickup point\"]==\"City\") & (df_evening_rush[\"Status\"]==\"Cancelled\")].shape[0]","99b54d73":"df_evening_rush[(df_evening_rush[\"Pickup point\"]==\"City\") & (df_evening_rush[\"Status\"]==\"Trip Completed\")].shape[0]","2701e5da":"df_evening_rush[(df_evening_rush[\"Pickup point\"]==\"City\") & (df_evening_rush[\"Status\"]==\"No Cars Available\")].shape[0]","6e3ce594":"df_evening_rush[(df_evening_rush[\"Pickup point\"]==\"Airport\")].shape[0]","a8577091":"df_evening_rush[(df_evening_rush[\"Pickup point\"]==\"Airport\") & (df_evening_rush[\"Status\"]==\"Cancelled\")].shape[0]","477b837b":"df_evening_rush[(df_evening_rush[\"Pickup point\"]==\"Airport\") & (df_evening_rush[\"Status\"]==\"Trip Completed\")].shape[0]","537994c0":"df_evening_rush[(df_evening_rush[\"Pickup point\"]==\"Airport\") & (df_evening_rush[\"Status\"]==\"No Cars Available\")].shape[0]","ded0e821":"df_morning_city=df[(df[\"Pickup point\"]==\"City\")&(df[\"Time_Slot\"]==\"Morning_Rush\")]","3e29cb36":"df_morning_city_count=pd.DataFrame(df_morning_city[\"Status\"].value_counts())","e258dae8":"df_morning_city_count","bc3ed104":"df_morning_city_count[\"Status\"].values","9fc1371a":"df_morning_city_count[\"Status\"].index","93fff3fb":"fig,ax=plt.subplots()\nax.pie(df_morning_city_count[\"Status\"].values,labels=df_morning_city_count[\"Status\"].index,\n      autopct=\"%.2f%%\",startangle=90)\nplt.show()","fa205346":"df_evening_airport=df[(df[\"Pickup point\"]==\"Airport\")&(df[\"Time_Slot\"]==\"Evening_Rush\")]\ndf_evening_airport_count=pd.DataFrame(df_evening_airport[\"Status\"].value_counts())\ndf_evening_airport_count","15c0de21":"df_evening_airport_count[\"Status\"].values","304e7ea3":"df_evening_airport_count[\"Status\"].index","7f353086":"fig,ax=plt.subplots()\nax.pie(df_evening_airport_count[\"Status\"].values,labels=df_evening_airport_count[\"Status\"].index,\n      autopct=\"%.2f%%\",startangle=90)\nplt.show()","7989b02d":"#### After doing the datatime conversion, if we pull the info again, we see that \"Request timestamp\" is converted to \"datetime\".","b799f3a2":"## Note: \n#### The NaNs\/missing values in the column \"Driver_Id\" can be ignored.\n#### This is because we see that since there were NO CARS AVAILABLE at point of the day after the user tried to book a cab, no driver was alloted the trip and hence the driver_id is empty.\n#### Similary, we can ignore the NaNs\/missing values in the column \"Drop timestamp\" as for all of them, the trip is either CANCELLED or NO CARS AVAILABLE.\n#### In both the above cases, the data is missing due to a genuine reason and not that it got lost during data collection. Hence, I have not substitued them with any other values based on any logic. ","156ae9f1":"#### Extracted Info:\n##### Number of Rows: 6745\n##### Number of Columns: 6\n##### Dtype of each column based on the type of data it holds\n##### There are 2 numerical(int and float) anf 4 objects columns","e8c8cb40":"### Hour Categories:\n    \n#### req_hour<5 as \"Pre_Morning\"\n#### req_hour<10 as \"Morning_Rush\"\n#### req_hour<17 as \"Day_Time\"\n#### req_hour<22 as \"Evening_Rush\"\n#### else \"Late_Night\"","c81715e5":"#### We now add 2 columns \"req_hour\"(which is Hour of the request during the day) and \"req_day\"(which is the day of the month) to determine and catogorise the load of cab service requests.","7a78a216":"#### Show the number of NaNs in each columns","19663712":"#### Adding a new column Time_Slot to make categories of hours from the req_hour column","3f42efe6":"## 2. Cleaning\/Handling the data","0ccf549e":"#### Show the % of NaNs in each columns","68b66a29":"#### Show the details ssuch as column names,dtypes,non-null count for the given data","bb7c3891":"#### Show the number of rows and columns in the dataset","e36a8822":"#### Importing the required libraries","e4be0062":"# Evening Rush","9f231def":"#### Similarly convert \"Drop timestamp\" column from \"object\" to \"datatime\"","5e4dae6d":"# Pie chart","c47a1c76":"#### 1) We understood the dataset with the number of user requests were done and the number of columns(6745,6) along with other facts such as number\/percentage of NaNs in each columns and format of dataTime in the request and drop timestamp columns.\n#### 2) We standardised format of dataTime in the request and drop timestamp columns.\n#### 3) Figured a logical reason as to why the NaNs in Driver_id and drop timestamp columns should be ignored.\n#### 4) Extracted the day number and hour from the request timestamp column to perform a deeper analysis.\n#### 5) Between hours 5AM-9AM, the load on cabs are high with almost equal amount of trips getting completed and cancelled.\n#### 6) Between hours 5PM-9PM, the load on cabs are significantly high. Hence, there is mismatch between cab demand and availabilty. Hence, we see more of \"No cars Available Status\".\n#### 7) Between hours 5AM-9AM, the users from city is significantly high.\n#### 8) Between hours 5PM-9PM, the users from Airport is significantly high.\n#### 9) The \"Morning_Rush\" and \"Evening_Rush\" are the hours with maximum load(i.e more number of users requesting cab services).\n#### 10) We also saw the load during \"Morning_rush\" and \"Evening_Rush\" from both pick-up points \"City\" and \"Airport\".\n#### 11) During the evening rush hour, we saw a significant number of No CARS AVAILABLE status  for the trip bookings from \"Airport\".","e98486b0":"## 1. Facts and Figures about our dataset(Understanding the data)","8a114c44":"#### Read the csv into a dataframe(df) and print the first 5 rows","ca51fc69":"#### Finding out the statistical summary for both numerical and object columns in one place","d821ef61":"# Evening- Rush Airport","2619daca":"#### We see that for the column \"Request timstamp\", the format of DateTime is different for different sections of data. Some have it separated by \"-\" and some have it separated by \"\/\". \n#### Let us first replace the \"\/\" with \"-\" to have uniformity and then convert the enite column to standard datatime format using \"pd.to_datatime\" function. Refer to lines 10,11 and 12.","af890f48":"# Evening- Rush City","0941ac82":"# Morning Rush- Airport","a584a950":"# Morning Rush- city","ff951ebb":"#### Pulling up the info, now we can see both \"Request timestamp\" and \"Drop timestamp\" are converted to datatime standard.","8c579a97":"#### Plot of Status of the trip at different hours of the day and also pick up locations shows that,\n#### 1) Between hours 5AM-9AM, the load on cabs are high with almost equal amount of trips getting completed and cancelled.\n#### 2) Between hours 5PM-9PM, the load on cabs are significantly high. Hence, there is mismatch between cab demand and availabilty. Hence, we see more of \"No cars Available Status\".\n#### 3) Between hours 5AM-9AM, the users from city is significantly high.\n#### 4) Between hours 5PM-9PM, the users from Airport is significantly high.","57b2989b":"# Key Take Aways","938f75e8":"# Case_Study\n\n## Summary:\n    \n#### We have a cab trip dataset wherein details regarding customer_request_id, pick up point, driver id, Status, Request timestamp and Drop timestamp. Based out of these features , I have cleaned the data and have applied basic EDA techniques to come to a broader conclusion.\n\nNOTE: This is just an exercise for educational purpose.","09b2dd23":"# 3. Visualize and Analyse","abe9980e":"# Cancellation of cab as per the pickup location at morning rush hours","8f10caa9":"#### You see from the above value counts, the \"Morning_Rush\" and \"Evening_Rush\" are the hours with maximum load."}}