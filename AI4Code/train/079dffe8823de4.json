{"cell_type":{"dbc019dd":"code","c894fd1d":"code","c4c0f0fc":"code","8834c673":"code","197c6805":"code","d85e5487":"code","8080fc35":"code","11479fea":"code","cda83481":"code","d150e81a":"code","1f1c0b8e":"code","1320dd7a":"code","142479ff":"code","d9fe603c":"code","41e87cfd":"code","d6f612c3":"code","8d89e03a":"code","3cc0ccc1":"code","d79bdeaf":"markdown","b83d4c78":"markdown","54598909":"markdown"},"source":{"dbc019dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n!pip install plotly-geo\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c894fd1d":"covid_df = pd.read_csv('\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\ncovid_df.head()","c4c0f0fc":"#setting the right order of the data and transforming the date column to function with choropleth map animations\n\ncovid_df['date'] = pd.to_datetime(covid_df['date'])\ncovid_df = covid_df.sort_values(['date', 'country'], ascending=True)\ncovid_df['date'] = covid_df['date'].dt.strftime('%m-%d-%Y')\n\ncovid_df.info()","8834c673":"#frontfilling all empty fields with the value of the previous column. \n#filling all final missing columns that have not been populated by frontfill with 0\n\ncovid_df = covid_df.groupby('country').apply(lambda group: group.fillna(method='ffill'))\ncovid_df = covid_df.groupby('country').apply(lambda group: group.fillna(0))","197c6805":"#adding the country population table\ncountry_area_df = pd.read_csv('..\/input\/countries-of-the-world-iso-codes-and-population\/countries_by_population_2019.csv')\ncountry_area_df = country_area_df[['name', 'area', 'Density']]\ncountry_area_df = country_area_df.rename(columns={'name': 'country'})\n\n#adding the country code table to later join with other tables\ncountry_code = pd.read_csv('..\/input\/countries-of-the-world-iso-codes-and-population\/country_codes_2020.csv')\ncountry_code_clean = country_code[['name', 'cca3']]\ncountry_code_clean = country_code_clean.rename(columns={'name': 'country', 'cca3': 'iso_code'})\n\n#adding the region table to be able to join the gdp table\ncountry_region = pd.read_csv('..\/input\/world-population-incomegdp-and-life-expectancy\/countries_total.csv')\ncountry_region_df = country_region[['name', 'alpha-3', 'region', 'sub-region']]\ncountry_region_df = country_region_df.rename(columns={'alpha-3': 'iso_code', 'name': 'country'})\n\n#adding the gdp table\ngdp_per_capita = pd.read_csv('..\/input\/world-population-incomegdp-and-life-expectancy\/income_per_person.csv')\ngdp_per_capita_df = gdp_per_capita[['country', '2020']]\ngdp_per_capita_df = gdp_per_capita_df.rename(columns={'2020': 'gdp_per_capita', 'alpha-3': 'iso_code'})\n\n#adding the population table\npopulation = pd.read_csv('..\/input\/world-population-incomegdp-and-life-expectancy\/population_total.csv')\npopulation_df = population[['country', '2020']]\npopulation_df = population_df.rename(columns={'2020': 'population'})","d85e5487":"#select the rows with the most up to date row for each country\n\nlatest_covid_df = covid_df.groupby('country').max().reset_index()\n\navg_vaccination_rate_df = covid_df[['country', 'daily_vaccinations']].groupby('country').mean('daily_vaccinations')\navg_vaccination_rate_df = avg_vaccination_rate_df.rename(columns={'daily_vaccinations': 'avg_daily_vaccinations'})","8080fc35":"### Mergin data sets\ncountry = country_area_df.merge(country_code_clean, on='country', how='inner', suffixes=('_1', '_2'))\ngdp = gdp_per_capita_df.merge(population_df, on='country', how='inner', suffixes=('_1', '_2'))\ngdp_region = gdp.merge(country_region_df, on='country', how='inner', suffixes=('_1', '_2'))\ncountry_data = gdp_region.merge(country, on='iso_code', how='inner', suffixes=('_1', '_2'))\nexpanded_df = latest_covid_df.merge(country_data, on='iso_code', how='inner', suffixes=('_1', '_2'))\nexpanded_df[\"gdp\"] = expanded_df[\"gdp_per_capita\"] * expanded_df[\"population\"]\nexpanded_df = expanded_df.merge(avg_vaccination_rate_df, on='country', how='inner', suffixes=('_1', '_2'))","11479fea":"#selecting only the required columns\nexpanded_master_df = expanded_df[['country', 'iso_code', 'region', 'daily_vaccinations_per_million', 'total_vaccinations', 'people_fully_vaccinated', 'daily_vaccinations', 'people_fully_vaccinated_per_hundred', 'people_vaccinated_per_hundred', 'avg_daily_vaccinations', 'area', 'population', 'Density', 'gdp', 'gdp_per_capita', 'vaccines']]\nexpanded_master_df.head()","cda83481":"unique_regions = expanded_master_df.region.unique()\nexpanded_master_df = expanded_master_df.sort_values(['people_vaccinated_per_hundred'], ascending=True)\n\n\nfor x in unique_regions:\n    fig2 = go.Figure(\n    data=[\n        go.Bar(\n            name=\"% VACCINATED\",\n            x=expanded_master_df[(expanded_master_df[\"region\"] == x)][\"country\"],\n            y=expanded_master_df[(expanded_master_df[\"region\"] == x)][\"people_vaccinated_per_hundred\"],\n            offsetgroup=0,\n        ),\n        go.Bar(\n            name=\"% FULLY VACCINATED\",\n            x=expanded_master_df[(expanded_master_df[\"region\"] == x)][\"country\"],\n            y=expanded_master_df[(expanded_master_df[\"region\"] == x)][\"people_fully_vaccinated_per_hundred\"],\n            offsetgroup=1,\n        ),\n    ],\n    layout=go.Layout(\n        title= x,\n        template='plotly_dark',\n        yaxis_title=\"Percent of Population\"\n    )\n    )\n    fig2.show()","d150e81a":"plt.subplots(figsize=(10,7.5))\nsns.heatmap(expanded_master_df.corr(), annot= True);","1f1c0b8e":"vaccines = expanded_master_df.vaccines.unique()\nfor v in vaccines:\n    countries = expanded_master_df.loc[expanded_master_df.vaccines==v, 'country'].values\n    print(f\"caccines: {v}: \\ncountries: {list(countries)}\\n\")","1320dd7a":"fig = px.choropleth(locations=expanded_master_df['country'], \n                    locationmode=\"country names\",\n                    color=expanded_master_df['vaccines'],\n                    title=\"Countries using each vaccine (different colors for each vaccine)\",\n                    height = 800\n                   )\nfig.update_layout({'legend_orientation':'v'})\nfig.update_layout({'legend_title':'Vaccine scheme'})\nfig.show()","142479ff":"#Creating a new df to avoid breaking other df\nanimation_covid_df = covid_df[['country', 'iso_code', 'date', 'total_vaccinations', 'daily_vaccinations_per_million', 'people_vaccinated_per_hundred', 'people_fully_vaccinated_per_hundred', 'daily_vaccinations']]\n\nanimation_covid_df.info()","d9fe603c":"#creating a df with all unique countries and iso_codes\n#creating a new table with all the dates in the original dataframe\ncountries = animation_covid_df.loc[:, ['country', 'iso_code']].drop_duplicates()\ndates_df = animation_covid_df.loc[:, ['date']].drop_duplicates()\n\n#creating an index called row number to later merge the dates table with the countries table on\ndates_df['row_number'] = dates_df.reset_index().index\n\nnumber_of_dates = dates_df.max() #shows the number of dates or rows in the the dates table\n\n#creating an equivilant number of rows for each country as there are dates in the dates_df \nindexed_country = countries.append([countries]*number_of_dates[1],ignore_index=True)\nindexed_country = indexed_country.sort_values(['country', 'iso_code'], ascending=True)\n#creating a new column called 'row_number' to join the indexed_country df with the dates_df\nindexed_country['row_number'] = indexed_country.groupby(['country', 'iso_code']).cumcount()+1\n\n#merging all the indexed countries with all the possible dates on the row number\nindexed_country_date_df = indexed_country.merge(dates_df, on='row_number', how='left', suffixes=('_1', '_2'))","41e87cfd":"#setting the 'date' column in both tables to datetime so they can be merged on\nanimation_covid_df['date'] = pd.to_datetime(animation_covid_df['date'])\nindexed_country_date_df['date'] = pd.to_datetime(indexed_country_date_df['date'])\n\n#merging the indexed_country_date_df with the original data from the animation_covid_df\nAnimation_df2 = indexed_country_date_df.merge(animation_covid_df, on=['iso_code', 'date'], how='left', suffixes=('_1', '_2'))\n#adding a region column \nAnimation_df3 = Animation_df2.merge(country_region_df, on=['iso_code'], how='left', suffixes=('_1', '_2'))\n\n#selecting the columns that the final df shall have\nfinal_Animation_df = Animation_df3[['country_1', 'iso_code', 'region', 'row_number', 'date', 'total_vaccinations', 'daily_vaccinations_per_million', 'people_vaccinated_per_hundred', 'people_fully_vaccinated_per_hundred', 'daily_vaccinations']]\nfinal_Animation_df = final_Animation_df.rename(columns={'country_1': 'country'})\n\n#populating the missing values\nfinal_Animation_df = final_Animation_df.groupby('country').apply(lambda group: group.fillna(method='ffill'))\nfinal_Animation_df = final_Animation_df.groupby('country').apply(lambda group: group.fillna(0))\n\n#dropping pitcirn because they are an outlier in the daily vaccination animation\nfinal_Animation_df = final_Animation_df[final_Animation_df['iso_code'] != 'PCN']\nfinal_Animation_df","d6f612c3":"#transforming the data so that it works with plotly express\nfinal_Animation_df['date'] = pd.to_datetime(final_Animation_df['date'])\nfinal_Animation_df = final_Animation_df.sort_values(['date', 'country'], ascending=True)\nfinal_Animation_df['date'] = final_Animation_df['date'].dt.strftime('%m-%d-%Y')","8d89e03a":"columnlist = ('total_vaccinations', 'people_vaccinated_per_hundred', 'people_fully_vaccinated_per_hundred')\n\nfor column_x in columnlist:\n    fig = px.choropleth(final_Animation_df,                            # Input Dataframe\n                         locations=\"iso_code\",           # identify country code column\n                         color=column_x,                     # identify representing column\n                         hover_name=\"country\",              # identify hover name\n                         animation_frame=\"date\",        # identify date column\n                         projection=\"natural earth\",        # select projection\n                         color_continuous_scale= 'RdBu',  # select prefer color scale\n                         range_color=[0,expanded_master_df[column_x].max()],             # select range of dataset     \n                         title=column_x)\n    fig.show()          \n    fig.write_html(\"example_map.html\")","3cc0ccc1":"unique_regions_2 = expanded_master_df.region.unique()\n\nfor region_x in unique_regions_2:\n    max_x_value = final_Animation_df[['daily_vaccinations_per_million']][final_Animation_df['region'] == region_x].max()\n    max_y_value = final_Animation_df[['people_vaccinated_per_hundred']][final_Animation_df['region'] == region_x].max()\n    fig = px.scatter(final_Animation_df[final_Animation_df['region'] == region_x], \n                     x=\"daily_vaccinations_per_million\", \n                     y=\"people_vaccinated_per_hundred\", \n                     animation_frame=\"date\", \n                     animation_group=\"country\",\n                     hover_name=\"country\", \n                     text='iso_code',\n                     range_x=[0, max_x_value.tolist()[0]], \n                     range_y=[0,max_y_value.tolist()[0]], \n                     title=region_x)\n\n    fig.update_traces(marker=dict(size=40,  color='DarkSlateGrey'))\n\n    fig.show()","d79bdeaf":"#### the following table shows us the correlation between several factors and covid vaccination","b83d4c78":"# Hey Everyone! \n# Welcome to my Covid Vaccination Visualization Project! \n\nIn this project I am working with data which was provided by the following 3 kaggle competitions. \n- [Covid vaccination data](https:\/\/www.kaggle.com\/gpreda\/covid-world-vaccination-progress)\n- [Country and Population Data](http:\/\/www.kaggle.com\/erikbruin\/countries-of-the-world-iso-codes-and-population)\n- [GDP Data](https:\/\/www.kaggle.com\/ahmdfatihin\/world-population-incomegdp-and-life-expectancy)\n\nI hope you enjoy the insights gained from the visualizations. \n\nIf you have any questions or feedback, I am happy to hear from you in the comment section \ud83d\ude0a","54598909":"#### In the following section the data is prepared to visualize the current state of the covid vaccination in different countries"}}