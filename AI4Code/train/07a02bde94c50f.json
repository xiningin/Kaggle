{"cell_type":{"6593771b":"code","73fb35a1":"code","a5bdbdc0":"code","bc54ab3c":"code","42916e74":"code","1589a257":"code","1e45e626":"code","933299f3":"code","5a48d48b":"code","1f2edd35":"code","568f28d5":"code","c48e80f5":"code","86111566":"code","70438b93":"code","d97ba79f":"code","cc192f3e":"code","d7cd13f1":"code","113d35d5":"code","fe37a11f":"code","be50ba75":"code","70f9943c":"code","ed50494e":"code","69220279":"code","ba7af8a2":"code","7118ee54":"code","356f92ec":"code","67515cfd":"code","6a9b1d1d":"code","8b00b22e":"code","0a5fcf54":"code","86b20d94":"code","922b6a4c":"code","302d7d17":"code","8c743f61":"code","33fb66cd":"code","6b99f572":"code","a0f8c86c":"code","f5e0ad8a":"code","fefd1873":"code","9432bc61":"code","74b59ccf":"markdown","8f46088b":"markdown","0c8593cb":"markdown","89179fe8":"markdown","400be335":"markdown","668f8dfd":"markdown","71c63b44":"markdown","fca009eb":"markdown","30f28ed5":"markdown","3270e3db":"markdown","5372758f":"markdown","b0035416":"markdown","9adeefd7":"markdown","98aac728":"markdown","8b55c4d4":"markdown","3240d1f9":"markdown","fba2a996":"markdown","3c8f965f":"markdown","7de2f8cf":"markdown","714c9ca1":"markdown","5b96964c":"markdown","0ac98ebb":"markdown","faa8bbf6":"markdown","66d9e3b9":"markdown","4e40211d":"markdown","de1bddc5":"markdown"},"source":{"6593771b":"# Importing the Required Libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport datetime\nfrom sklearn import model_selection\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom xgboost import plot_importance\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom sklearn import metrics\n\nimport warnings\nwarnings.filterwarnings('ignore')","73fb35a1":"df = pd.read_csv('\/kaggle\/input\/hotel-booking-demand\/hotel_bookings.csv')\ndf.head()","a5bdbdc0":"# Shape of the Dataset\nprint (\"The shape of the dataset : \", df.shape)","bc54ab3c":"df.dtypes","42916e74":"# Filling the Null Values\ndf['adults'].fillna(0, inplace = True)\ndf['children'].fillna(0, inplace = True)\ndf['babies'].fillna(0, inplace = True)\n\ndf['children'] = df['children'].astype(int)","1589a257":"# Parameters\nplt.rcParams['figure.figsize'] = [10, 7]\nsns.set(style = 'white', font_scale = 1.3)\n\n#1: canceled and 0: not canceled\ndf['is_canceled'].replace({1: 'canceled', 0: 'not canceled'}, inplace = True)\n\n# Plot\ndist = sns.countplot(df['hotel'], hue = 'is_canceled', data = df, palette = 'Set2');\n\ndist.set(title = \"Distribution of the hotel based on the booking status\");","1e45e626":"# parameters\nplt.rcParams['figure.figsize'] = [20, 7]\nsns.set(style = 'white', font_scale = 1.25)\n\n# plot\narrival = sns.countplot(df['arrival_date_year'], hue = 'arrival_date_month', data = df, palette = 'Set3',\n             hue_order = ['January', 'February', 'March', 'April', 'May', 'June',\n                          'July', 'August', 'September', 'October', 'November', 'December'])\narrival.set(title = \"Number of Reservations per year (months)\")\nplt.legend(loc='upper left');","933299f3":"# Parameters\nplt.rcParams['figure.figsize'] = [15, 7]\nsns.set(style = 'darkgrid', font_scale = 1.2)\n\n# catplot (countplot)\ncat = sns.catplot(x = 'reservation_status', col = 'arrival_date_year', kind = 'count', data = df,\n            height = 6, palette = ['orange', 'mediumaquamarine', 'darkgrey']);","5a48d48b":"fig, ax = plt.subplots(1, 3)\nsns.set(font_scale = 1.2)\n\nval_2015 = df['reservation_status'].groupby(df['arrival_date_year']).value_counts()[2015].values\nval_2016 = df['reservation_status'].groupby(df['arrival_date_year']).value_counts()[2016].values\nval_2017 = df['reservation_status'].groupby(df['arrival_date_year']).value_counts()[2017].values\nindex = list(df['reservation_status'].groupby(df['arrival_date_year']).value_counts()[2015].index)\n\ncolor = ['orange', 'mediumaquamarine', 'darkgrey']\n\n# 2015\nax[0].pie(val_2015, labels = index, autopct='%.02f%%', explode = [0, 0, 0.05], colors = color)\nax[0].set_title('2015')\n\n# 2016\nax[1].pie(val_2016, labels = index, autopct='%.02f%%', explode = [0, 0, 0.05], colors = color)\nax[1].set_title('2016')\n\n# 2017\nax[2].pie(val_2017, labels = index, autopct='%.02f%%', explode = [0, 0, 0.05], colors = color);\nax[2].set_title('2017')\nplt.show()","1f2edd35":"# Donut Graph showing the canceled and non canceled reservations each year\nval_2015 = df['is_canceled'].groupby(df['arrival_date_year']).value_counts()[2015].values\nval_2016 = df['is_canceled'].groupby(df['arrival_date_year']).value_counts()[2016].values\nval_2017 = df['is_canceled'].groupby(df['arrival_date_year']).value_counts()[2017].values\n\nt = np.array([val_2015, val_2016, val_2017])\n\nfig, ax = plt.subplots()\nsns.set(font_scale = 1.3)\nsize = 0.3 \n\ncmap = plt.get_cmap(\"tab20c\")\nouter_colors = cmap(np.arange(3)*4)\ninner_colors = cmap(np.array([1, 2, 5, 6, 9, 10]))\n\nax.pie(t.sum(axis = 1), radius=1, colors=outer_colors,\n       wedgeprops=dict(width=size, edgecolor='w'), autopct='%.01f%%')\n\nax.pie(t.flatten(), radius=1-size, colors=inner_colors,\n       wedgeprops=dict(width=size, edgecolor='w'), labels = ['nc', 'c', 'nc', 'c', 'nc', 'c'])\n\nax.set(aspect=\"equal\", title='Canceled and Non canceled reservations each year')\nax.legend([2015, 2016, 2017], loc = 'best');","568f28d5":"# Concatenation of arrivale date from year, month and day\ndf['arrival_date_month_num'] = df['arrival_date_month'].apply(lambda x: datetime.datetime.strptime(x, '%B').month)\n\ndf_1 = pd.DataFrame()\n\n# converting to datetime\ndf_1[['year', 'month', 'day']] = df[[\"arrival_date_year\", \"arrival_date_month_num\", \"arrival_date_day_of_month\"]].copy()\ndf['arrival_date'] = pd.to_datetime(df_1[['year', 'month', 'day']])\n\n# Sorting the dataframe by arrival dates\ndf.sort_values(by = ['arrival_date'], inplace = True)\ndel df_1\n\ndf['arrival_date'][0:10]","c48e80f5":"# Grouping the arrival dates and counting the canceled and not canceled reservations\ndf.replace({'not canceled' : -1, 'canceled' : 1}, inplace = True)\na = df[['is_canceled', 'arrival_date']].groupby(df['arrival_date'])['is_canceled'].value_counts()\n\n# timestamps\nb = [a.index[x][0] for x in range(len(a))]\n\n# canceled or not canceled array\nc = [a.index[x][1] for x in range(len(a))]\n\n# 1 represents the canceled and -1 represents not canceled\ng = a.values * c # below zero axis it will be not canceled and above it will be canceled\n\n\nfig = px.bar(x = b, y = g, title = 'Canceled and Non Canceled Reservation according to the Dates',\n            color = g,\n            labels = {\n                     \"x\": \"Date\",\n                     \"y\": \"Reservations (c or nc)\",\n                 })\nfig.show()","86111566":"# These are the datapoints where there is no adults, children and babies so we will not consider these points\n\n_ = df[(df.children ==0)&(df.babies ==0)&(df.adults == 0)].shape\nprint (\"Data Points without any adults, children and babies : \", _)\n\n# Dropping those data points\ndf_1 = df[(df.children !=0) | (df.babies !=0) | (df.adults != 0)]\n\nonly_adults = df_1[(df_1.children ==0)&(df_1.babies ==0)]\nadults_w_child = df_1[(df_1.children !=0) | (df_1.babies !=0)]\nonly_childs = df_1[df_1.adults == 0]\n\nprint (\"Only Adults : \", only_adults.shape[0])\nprint (\"Adults with children : \", adults_w_child.shape[0])\nprint (\"Only children and babies : \", only_childs.shape[0])","70438b93":"# Hotels\nhotel = ['City Hotel', 'Resort Hotel']\n\nfig = go.Figure()\n\n# Adults w\/o children\nfig.add_trace(go.Bar(\n    x = hotel,\n    y = only_adults['hotel'].value_counts().tolist(),\n    name='Adults w\/o children',\n    marker_color='indianred'\n))\n\n# Adults w\/ children\nfig.add_trace(go.Bar(\n    x = hotel,\n    y = adults_w_child['hotel'].value_counts().tolist(),\n    name='Adults w\/ children',\n    marker_color='lightsalmon'\n))\n\n# Only children\nfig.add_trace(go.Bar(\n    x = hotel,\n    y = only_childs['hotel'].value_counts().tolist(),\n    name='Only children'\n))\n\n# Here we modify the layout of the figure\nfig.update_layout(\n    barmode='group',\n    xaxis_tickangle=0,\n    autosize=False,\n    width = 750,\n    height = 900\n)\nfig.show()","d97ba79f":"# total people who booked from the countries\ndf['total_guest'] = df['adults'] + df['children'] + df['babies']\n\n# non canceled bookings\ndf.replace({-1 : 0, 1 : 1}, inplace = True)\ndf1 = df.loc[df.is_canceled == 0, :].copy()\n\ncountries = pd.DataFrame(df1[['total_guest', 'country']].groupby(df1['country'])['total_guest'].sum())\n\nprint (\"Total Countries in the dataset : \", df['country'].nunique())\n\n# piechart\nfig = px.pie(countries, values = 'total_guest', names = countries.index, title = 'Total Number of guest from different countries whose bookings are not canceled')\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.show()","cc192f3e":"# show on map\nworld_map = px.choropleth(countries,\n                    locations = countries.index,\n                    color = 'total_guest', \n                    hover_name = countries.index, \n                    color_continuous_scale = px.colors.sequential.Sunsetdark,\n                    title = \"Total Number of Guests from Different Countries on World Map\")\n\nworld_map.update_geos(fitbounds = \"locations\", visible = False)\n# world_map.update_layout(margin = {\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\nworld_map.show()","d7cd13f1":"# Non Canceled bookings\ndf_1 = df.loc[df.is_canceled == 0, :].copy()\n\n# Total Guest for Resort Hotel\na = df_1.loc[df.hotel == 'Resort Hotel', :]\n\nb = a[['arrival_date_month', 'total_guest']].groupby(a['arrival_date_month']).sum()\nb['hotel'] = ['Resort Hotel']*len(b)\nc = b.reindex(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\n\n# Total guest for City Hotel\na1 = df_1.loc[df.hotel == 'City Hotel', :]\n\nb1 = a1[['arrival_date_month', 'total_guest']].groupby(a1['arrival_date_month']).sum()\nb1['hotel'] = ['City Hotel']*len(b1)\nc1 = b1.reindex(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\n\nhot = pd.concat([c, c1])\nhot['month'] = hot.index\n\nplt.rcParams['figure.figsize'] = [12, 8]\nsns.set(style = 'whitegrid', font_scale = 1.3)\nax = sns.lineplot(x = 'month', y=\"total_guest\", data=hot, hue = 'hotel', sort = False, style = 'hotel', markers=True, dashes = False)\nax.set(title = \"Total Number of Hotel Guest per month\")\nplt.setp(ax.get_xticklabels(), rotation = 45);","113d35d5":"# preproc\ndf_1 = df.loc[df.is_canceled == 0, :].copy()\na = df_1[['hotel', 'arrival_date_month']].copy()\n\nrh = pd.DataFrame(a.loc[a.hotel == 'Resort Hotel', 'arrival_date_month'].value_counts())\nrh['hotel'] = ['Resort Hotel']*len(rh)\nrh = rh.reindex(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\n\nch = pd.DataFrame(a.loc[a.hotel == 'City Hotel', 'arrival_date_month'].value_counts())\nch['hotel'] = ['City Hotel']*len(ch)\nch = ch.reindex(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\n\nfin = pd.concat([rh, ch])\nfin['months'] = fin.index\n\n# Finding the average number of guest per month over the year the data is available\ndef average(x, y):\n    if y not in ['July', 'August']:\n        return x\/2\n    else:\n        return x\/3\n\nfin['avg'] = fin.apply(lambda x: average(x.arrival_date_month, x.months), axis = 1)\n\nax1 = sns.lineplot(fin['months'], fin['avg'], hue = 'hotel', data = fin, sort = False, lw = 2)\nax1.set(title = \"Average number of guest per month\", ylabel = \"Average number of Guest\")\nplt.setp(ax1.get_xticklabels(), rotation = 45);","fe37a11f":"# Parameters\nplt.rcParams['figure.figsize'] = [20, 9]\nfig, ax = plt.subplots(1, 2)\nsns.set(font_scale = 1.1)\n\nr = df[['is_canceled', 'reserved_room_type', 'assigned_room_type']].copy()\n\ndef samediff(x, y):\n    if x == y:\n        return (\"Same\")\n    else:\n        return (\"Diff\")\n    \nr['assignment'] = r.apply(lambda x : samediff(x.reserved_room_type, x.assigned_room_type), axis = 1)\n\nlen(r.loc[r.assignment == 'Diff', :]['is_canceled'])\ncnc = r.loc[r.assignment == 'Diff', :]['is_canceled'].value_counts()\n\nr = r['assignment'].value_counts()\n\n# pie chart for the assigned room type\nax[0].pie(r.values, labels = ['Same room type assigned', 'Different room type assigned'],\n        autopct='%.02f%%', explode = [0, 0.05], colors = ['mediumorchid', 'mediumturquoise']);\nax[0].set_title('Room Assigned to the Guest according to their reservation');\n\n# pie chart for the reservations status who are assigned different rooms\nax[1].pie(cnc.values, labels = ['Not Cancelled', 'Cancelled'],\n        autopct='%.02f%%', explode = [0, 0.05], colors = ['seagreen', 'firebrick']);\nax[1].set_title('Reservation Status of the guest who are assigned different rooms');","be50ba75":"# Removing the ghost values\ndf = df.loc[(df.children != 0)|(df.babies != 0)|(df.adults != 0), :]\n\n# Rate per person\ndf['adr_per_person'] = df['adr']\/(df['adults'] + df['children'])","70f9943c":"# Parameters\nplt.rcParams['figure.figsize'] = [25, 9]\nfig, ax = plt.subplots(1, 2)\nsns.set(style = 'whitegrid', font_scale = 1.3)\n\nnc = df.loc[df.is_canceled == 0, :].copy()\nrh = nc.loc[nc.hotel == 'Resort Hotel', ['adr_per_person', 'assigned_room_type', 'hotel']]\nch = nc.loc[nc.hotel == 'City Hotel', ['adr_per_person', 'assigned_room_type', 'hotel']]\n\n# Final df\nfin = pd.concat([rh, ch], ignore_index = True)\n\n# Boxplot Showing the 5 number summaries of the room price per person per night for the different room\nbox = sns.boxplot(y = fin.adr_per_person, data = fin, x = fin.assigned_room_type, hue = 'hotel', fliersize=0, ax = ax[0])\nbox.set(title = 'Price of the room per night per person (Boxplot)', xlabel = 'Room Type', ylabel = 'Price', ylim = (0, 200))\nbox.legend(loc='upper left');\n\n# lineplot showing the variation of the room price per person per night with 95% confidence interval\nline = sns.lineplot(y = fin.adr_per_person, data = fin, x = fin.assigned_room_type, hue = 'hotel', ci = 95, ax = ax[1])\nline.set(title = 'Price of the room per night per person (Lineplot)', xlabel = 'Room Type', ylabel = 'Price', ylim = (0, 80));","ed50494e":"resort_mean = nc.loc[(nc.is_canceled == 0) & (nc.hotel == 'Resort Hotel'), 'adr_per_person'].mean()\ncity_mean = nc.loc[(nc.is_canceled == 0) & (nc.hotel == 'City Hotel'), 'adr_per_person'].mean()\n\nprint (\"The mean price of the rooms per night per person for Resort Hotel is {:.2f}\".format(resort_mean))\nprint (\"The mean price of the rooms per night per person for City Hotel is {:.2f}\".format(city_mean))","69220279":"# Parameters\nplt.rcParams['figure.figsize'] = [20, 10]\nfig, ax = plt.subplots(1, 2)\nsns.set(style = 'darkgrid', font_scale = 1.2)\n\n# Special and non Special Request of the guest\nspecial_req = df[df.total_of_special_requests != 0].copy()\nnon_special_req = df[df.total_of_special_requests == 0].copy()\n\n# Plots\nspec = sns.countplot(special_req.reservation_status, ax = ax[0], palette = 'winter')\nspec.set(title = 'Guest with special requests', xlabel = 'Reservation_status')\n\nn_spec = sns.countplot(non_special_req.reservation_status, ax = ax[1], palette = 'winter')\nn_spec.set(title = 'Guest without special requests', ylabel = \"\", xlabel = 'Reservation_status');","ba7af8a2":"sns.set(style = 'whitegrid', font_scale = 1.2)\n\na = sns.lineplot(y = df.total_of_special_requests, x = df.arrival_date_month_num, data = df, color = 'darkcyan')\nplt.xticks(np.arange(1, 13, 1))\na.set_xticklabels(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\n\na.set(title = 'Average Number of Special request over the months [95% ci]', xlabel = 'Month', ylabel = 'Special request');","7118ee54":"# Pearson Correlation Heatmap\nplt.rcParams['figure.figsize'] == [18, 16]\nsns.set(font_scale = 0.8)\n\nsns.heatmap(df.corr(method = 'pearson'), annot = True, cmap = \"YlGnBu\");","356f92ec":"# Spearman Correlaton Heatmap\nsns.heatmap(df.corr(method = 'spearman'), annot = True, cmap = \"viridis\");","67515cfd":"# Unique Object values\na = df.select_dtypes(object).columns\nfor i in a:\n    print (i, df[i].nunique())","6a9b1d1d":"# columns with dtype object\ncategorical_features = list(df.select_dtypes(include=['object']).columns)\ncategorical_features.remove('reservation_status_date')\n\n# Label Encoder \nlabel_encoder_feat = {}\nfor i, feature in enumerate(categorical_features):\n    df[feature] = df[feature].astype(str)\n    label_encoder_feat[feature] = LabelEncoder()\n    df[feature] = label_encoder_feat[feature].fit_transform(df[feature])","8b00b22e":"# Filling agent null values \ndf.agent.fillna(0, inplace = True)\ndf.agent = df.agent.astype(int)","0a5fcf54":"# Checking the correlation to choose the features to use in the Modelling\n# Choosing the threshold Correlation as 0.04 (except for children)\n\ndf.corr(method = 'pearson')['is_canceled']","86b20d94":"# The features that are going to be used for the training and testing\n\ndf_hotel = df[['hotel', 'lead_time', 'adults', 'children', 'babies', 'country', 'market_segment', 'distribution_channel', 'is_repeated_guest',\n   'previous_cancellations', 'reserved_room_type', 'assigned_room_type', 'booking_changes', 'deposit_type', 'agent',\n   'days_in_waiting_list', 'required_car_parking_spaces', 'total_of_special_requests', 'is_canceled', 'adr', 'total_guest']].copy()\n\ndf_hotel.head()","922b6a4c":"df_hotel[\"kfold\"] = -1\n\n# shuffling\ndf_hotel = df_hotel.sample(frac = 1).reset_index(drop = True)\n\n# targets\ntarget = df_hotel.is_canceled.values\n\n# stratified k fold with 5 folds\nkf = model_selection.StratifiedKFold(n_splits = 5)\n\nfor i, (train, val) in enumerate(kf.split(X = df_hotel, y = target)):\n    df_hotel.loc[val, 'kfold'] = i","302d7d17":"df_hotel.kfold.unique()","8c743f61":"# This fuction will run 5 folds for each model and the performance can be seen during training.\n\ndef run(folds, model):\n\n    # training and validation set\n    df_train = df_hotel[df_hotel.kfold != folds].reset_index(drop = True)\n    df_valid = df_hotel[df_hotel.kfold == folds].reset_index(drop = True)\n\n    X_train = df_train.drop(columns = ['is_canceled']).values\n    y_train = df_train.is_canceled.values\n\n    X_valid = df_valid.drop(columns = ['is_canceled']).values\n    y_valid = df_valid.is_canceled.values\n\n    clf = models[model]\n\n    print (\"Training...\")\n    clf.fit(X_train, y_train)\n\n    print (\"Done!!\")\n    preds = clf.predict(X_valid)\n        \n    acc = metrics.accuracy_score(y_valid, preds)\n    print (\"Fold = {} Accuracy = {}\".format(folds, acc))\n    print (\"------Classification Report\")\n    print (metrics.classification_report(y_valid, preds))","33fb66cd":"# Models Trained + DNN\nmodels = {\n    'logistic_regression' : LogisticRegression(C = 1.2),\n    'xgboost': XGBClassifier(eta = 0.35, max_depth = 12),\n    'random_forest' :  RandomForestClassifier(n_estimators = 150)\n    }","6b99f572":"# 5 Folds -- Logistic Regression\nfor fold in range(0, 5):\n    run(fold, 'logistic_regression')","a0f8c86c":"# 5 Folds -- XGBoost\nfor fold in range(0, 5):\n    model = run(fold, 'xgboost')","f5e0ad8a":"# 5 Folds -- Random Forest\nfor fold in range(0, 5):\n    run(fold, 'random_forest')","fefd1873":"# Model\ndef dnn(input_shape):\n    dnn = keras.Sequential([\n        layers.BatchNormalization(input_shape = [input_shape]),\n        layers.Dense(512, activation = 'relu'),\n        layers.BatchNormalization(),\n        layers.Dropout(0.3),\n        layers.Dense(512, activation = 'relu'),\n        layers.BatchNormalization(),\n        layers.Dropout(0.2),\n        layers.Dense(256, activation = 'relu'),\n        layers.Dropout(0.2),\n        layers.Dense(1, activation = 'sigmoid')\n    ])\n\n    dnn.compile(\n    optimizer = 'adam',\n    loss = 'binary_crossentropy',\n    metrics = ['binary_accuracy']\n    )\n    return dnn","9432bc61":"# 5 folds\nfor fold in range(0, 5):\n    df_train = df_hotel[df_hotel.kfold != fold].reset_index(drop = True)\n    df_valid = df_hotel[df_hotel.kfold == fold].reset_index(drop = True)\n\n    X_train = df_train.drop(columns = ['is_canceled']).values\n    y_train = df_train.is_canceled.values\n\n    X_valid = df_valid.drop(columns = ['is_canceled']).values\n    y_valid = df_valid.is_canceled.values\n    \n    clf = dnn(X_train.shape[1])\n    \n    if fold == 0:\n        clf.summary()\n    \n    # Training\n    print (\"Training...\")\n    clf.fit(\n        X_train, y_train,\n        batch_size = 512,\n        epochs = 50,\n        verbose = 0\n    )\n    \n    print (\"Done!!\")\n    \n    preds = clf.predict(X_valid)\n    # default threshold 0.5\n    preds = (preds>0.5).astype(int)\n    \n    acc = metrics.accuracy_score(y_valid, preds)\n    print (\"Fold = {} Accuracy = {}\".format(fold, acc))\n    print (\"------Classification Report------\")\n    print (metrics.classification_report(y_valid, preds))","74b59ccf":"#### Total Number of Hotel Guests per month","8f46088b":"#### Canceled and Non Canceled Booking according to the Dates","0c8593cb":"#### Reservation Status per year","89179fe8":"#### Rooms Assigned to the Guests according to their reservation and the Reservation Status of the guest who are assigned different rooms","400be335":"#### XGBoost","668f8dfd":"#### Total Number of Guests from Different Countries on World Map","71c63b44":"## Modelling","fca009eb":"#### Spearman and Pearson correlation heatmap","30f28ed5":"#### Total Number of guest from different countries whose bookings are not canceled","3270e3db":"[GitHub Link](https:\/\/github.com\/SumitM0432\/EDA-SA-and-Hotel-Booking-Cancellation-Prediction.git)","5372758f":"#### Random Forest","b0035416":"#### Cross Validation - StratifiedKFolds","9adeefd7":"## Exploratory Data Analysis and SA","98aac728":"#### Distribution of the hotel based on the booking status","8b55c4d4":"#### Logistic Regression","3240d1f9":"#### Number of Reservations per year (months)","fba2a996":"## Preprocessing","3c8f965f":"#### Average Number of Special request over the months [95% ci]","7de2f8cf":"ADR - The average daily rate is calculated by taking the average revenue earned from rooms and dividing it by the number of rooms sold. It excludes complimentary rooms and rooms occupied by staff.","714c9ca1":"#### Reservation status of the Guests with and without special requests","5b96964c":"We can see the maximum number of hotel guests are there in August followed by July for both types of hotel. This can occur also because the data given for August and July span over 3 years and for all the other months the data is from 2 years. This discrepancy can be corrected if we take the average number of guests. The minimum number of guest is in January.","0ac98ebb":"#### Average number of guest per month  (Busiest Month over the years)","faa8bbf6":"#### Deep Neural Network","66d9e3b9":"#### Average Daily Rate of the Both Type of Hotels","4e40211d":"#### Donut Graph showing the canceled and non canceled booking each year","de1bddc5":"#### Hotel Choices for Adults without children, Adults with children and Only Children"}}