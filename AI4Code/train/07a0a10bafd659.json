{"cell_type":{"f82566c9":"code","68208d8a":"code","9e40619c":"code","b1a7676a":"code","091aae9f":"code","ac355d5a":"code","b719770b":"code","4e38a781":"code","f26e6ac8":"code","1049599d":"code","0812bdb9":"code","00403930":"code","ad6c61cb":"code","d7344a05":"code","f5fcd9fa":"code","8b1d4651":"code","9468de96":"code","da4bbba9":"code","d9c0fde3":"code","121e84e9":"code","352549f8":"code","729b0e0c":"code","2b66eb1f":"code","2da1d025":"code","553ba8c9":"code","d7fecb7e":"code","9960a7e5":"code","8d90849d":"code","bfc31d5f":"code","edd763b7":"code","f99dde08":"code","6ed55b55":"code","0ee6db30":"code","ba57efeb":"code","8190da80":"code","8d55afa3":"code","2f945b63":"code","adc030b9":"code","5b87e07d":"code","26c3c9f2":"code","65237258":"code","a0cae4f0":"code","78098081":"code","ae77e407":"code","2da59ea1":"code","6b438353":"code","d6dc6b37":"code","54e00d7c":"code","dcbe9c6c":"code","be510620":"code","a3f32bc5":"code","afb3e08c":"code","988e728d":"code","91b80256":"code","1c74e619":"code","1fd914f9":"code","bfc8d34e":"code","d1866cd8":"code","44ba9fff":"code","a5641dbe":"code","0ce4623d":"code","3ed72791":"code","451c93bc":"code","2ac79f83":"code","cf09bdca":"code","9114351a":"code","7c390238":"code","ed065c80":"code","32e81bd8":"code","cb7ea777":"code","c56336fb":"code","460ca056":"code","c47ee057":"code","196e0c4c":"code","69a41f9b":"code","94e6c37f":"markdown","a96f103b":"markdown"},"source":{"f82566c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","68208d8a":"data=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","9e40619c":"txt=pd.read_fwf(\"..\/input\/house-prices-advanced-regression-techniques\/data_description.txt\")","b1a7676a":"data.head(5)","091aae9f":"txt.head(5)","ac355d5a":"df= pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")","b719770b":"df.head(5)","4e38a781":"df.info()","f26e6ac8":"df.isnull().sum()","1049599d":"Test=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n","0812bdb9":"Test.head(5)","00403930":"Test.info()","ad6c61cb":"Test.isnull().sum()","d7344a05":"df.describe()","f5fcd9fa":"Test.describe()","8b1d4651":"import seaborn as sns\nimport matplotlib.pyplot as plt","9468de96":"plt.figure(figsize=(12,10))\nsns.set_style(\"ticks\")\nsns.histplot(data=df, x=\"SalePrice\", bins=50,cbar=True ,color='g')","da4bbba9":"df['SalePrice'].describe()","d9c0fde3":"print( df['SalePrice'].skew())\nprint( df['SalePrice'].kurt())","121e84e9":"df['SalePrice'] = np.log1p(df['SalePrice'])","352549f8":"print( df['SalePrice'].skew())\nprint( df['SalePrice'].kurt())","729b0e0c":"plt.figure(figsize=(12,10))\nsns.set_style(\"ticks\")\nsns.histplot(data=df, x=\"SalePrice\", bins=50,cbar=True ,color='g')","2b66eb1f":"sns.boxplot(data=df, x=\"SalePrice\", color='r')","2da1d025":"df[\"SalePrice\"].describe() ","553ba8c9":"df.corr()['SalePrice'].sort_values(ascending=True)","d7fecb7e":"sns.relplot(x=\"SalePrice\", y=\"OverallQual\", data=df, palette=\"ch:r=-.5,l=.75\",kind=\"line\",ci=\"sd\",color='g')","9960a7e5":"plt.figure(figsize=(20,20))\nsns.heatmap(df.corr(),cmap=\"jet\",annot=True,linewidths=1,robust=True)","8d90849d":"sns.relplot(x=\"OverallQual\", y=\"SalePrice\", data=df, palette=\"ch:r=-.5,l=.75\",kind=\"line\",ci=\"sd\",color='g')","bfc31d5f":"plt.figure(figsize=(12,10))\nsns.regplot(x=\"OverallQual\", y=\"SalePrice\",data=df)","edd763b7":"sns.relplot(x=\"KitchenAbvGr\", y=\"SalePrice\", data=df, palette=\"ch:r=-.5,l=.75\",kind=\"line\",ci=\"sd\",color='g')","f99dde08":"plt.figure(figsize=(12,10))\nsns.regplot(x=\"KitchenAbvGr\", y=\"SalePrice\",data=df,color=\"red\")","6ed55b55":"train = df.select_dtypes(include=['int64','float64'])\nfig,axs= plt.subplots(10,3,figsize=(20,80))\nfig.subplots_adjust(hspace=0.6)\nfor j,ax in zip(train.columns,axs.flatten()):\n    sns.scatterplot(x=j, y='SalePrice', hue='SalePrice',data=train,ax=ax,palette='rocket')\n    plt.xlabel(j,fontsize=10)\n    plt.ylabel('SalePrice',fontsize=10)\n    ax.set_title(str(j),size=10)","0ee6db30":"##Visualising Categorical predictor variables with Target Variables\ncategorical = df.select_dtypes(exclude=['int64','float64'])\ndef facetgrid_boxplot(x, y, **kwargs):\n    sns.boxplot(x=x, y=y)\n    x=plt.xticks(rotation=90)\n    \n\nf = pd.melt(df, id_vars=['SalePrice'], value_vars=sorted(df[categorical.columns]))\ng = sns.FacetGrid(f, col=\"variable\", col_wrap=3, sharex=False, sharey=False, size=5)\ng = g.map(facetgrid_boxplot, \"value\", \"SalePrice\")","ba57efeb":"num_cols=df.columns[df.dtypes!= \"object\"]\ncat_cols=df.columns[df.dtypes== \"object\"]\ntest_num_cols=Test.columns[Test.dtypes!= \"object\"]\ntest_cat_cols=Test.columns[Test.dtypes== \"object\"]","8190da80":"df[\"LotFrontage\"].value_counts() ","8d55afa3":"df[\"LotFrontage\"].describe()","2f945b63":"df[\"LotFrontage\"].fillna(df[\"LotFrontage\"].mean(),inplace=True) # we fill the missing values with the mean of the column\nTest[\"LotFrontage\"].fillna(Test[\"LotFrontage\"].mean(),inplace=True)","adc030b9":"df[\"GarageYrBlt\"].fillna(df[\"GarageYrBlt\"].median(),inplace=True)\nTest[\"GarageYrBlt\"].fillna(Test[\"GarageYrBlt\"].median(),inplace=True)\n","5b87e07d":"df[\"MasVnrArea\"].fillna(df[\"MasVnrArea\"].median(), inplace=True)\nTest[\"MasVnrArea\"].fillna(Test[\"MasVnrArea\"].median(), inplace=True)","26c3c9f2":"Test[\"BsmtHalfBath\"].fillna(Test[\"BsmtHalfBath\"].median(), inplace=True)\nTest[\"BsmtFullBath\"].fillna(Test[\"BsmtFullBath\"].median(), inplace=True)\nTest[\"BsmtFinSF1\"].fillna(Test[\"BsmtFinSF1\"].mean(), inplace=True)\nTest[\"GarageCars\"].fillna(Test[\"GarageCars\"].mean(), inplace=True)\nTest[\"GarageArea\"].fillna(Test[\"GarageArea\"].mean(), inplace=True)\nTest[\"TotalBsmtSF\"].fillna(Test[\"TotalBsmtSF\"].mean(), inplace=True)\nTest[\"BsmtUnfSF\"].fillna(Test[\"BsmtUnfSF\"].mean(), inplace=True)\nTest[\"BsmtFinSF2\"].fillna(Test[\"BsmtFinSF2\"].mean(), inplace=True)","65237258":"df[cat_cols].isnull().sum().sort_values(ascending=False)\/len(df[cat_cols])","a0cae4f0":"Test[test_cat_cols].isnull().sum().sort_values(ascending=False)\/len(Test[test_cat_cols])","78098081":"df.drop([\"PoolQC\",\"MiscFeature\",\"Alley\",\"Fence\"],axis=1, inplace=True)\ndf.isnull().sum().sort_values(ascending=False)","ae77e407":"Test.drop([\"PoolQC\",\"MiscFeature\",\"Alley\",\"Fence\"],axis=1, inplace=True)\nTest.isnull().sum().sort_values(ascending=False)","2da59ea1":"df[\"FireplaceQu\"].value_counts()\ndf[\"FireplaceQu\"].fillna(\"Gd\",inplace=True)","6b438353":"Test[\"GarageType\"].fillna(\"Attchd\",inplace=True)\ndf[\"GarageFinish\"].fillna(\"Unf\",inplace=True)\nTest[\"GarageFinish\"].fillna(\"Unf\",inplace=True)\ndf[\"GarageCond\"].fillna(\"TA\",inplace=True)\nTest[\"GarageCond\"].fillna(\"TA\",inplace=True)\ndf[\"GarageQual\"].fillna(\"TA\",inplace=True)\nTest[\"GarageQual\"].fillna(\"TA\",inplace=True)","d6dc6b37":"df[\"BsmtFinType2\"].fillna(\"Unf\",inplace=True)\ndf[\"BsmtExposure\"].fillna(\"No\",inplace=True)\ndf[\"BsmtFinType1\"].fillna(\"Unf\",inplace=True)\ndf[\"BsmtQual\"].fillna(\"TA\",inplace=True)\ndf[\"BsmtCond\"].fillna(\"TA\",inplace=True)\ndf[\"MasVnrType\"].fillna(\"None\",inplace=True)\ndf[\"Electrical\"].fillna(\"SBrkr\",inplace=True)","54e00d7c":"df.isnull().sum().sort_values(ascending=False)","dcbe9c6c":"Test[\"BsmtCond\"].fillna(\"TA\",inplace=True)\nTest[\"BsmtQual\"].fillna(\"TA\",inplace=True)\nTest[\"BsmtExposure\"].fillna(\"No\",inplace=True)\nTest[\"BsmtFinType2\"].fillna(\"Unf\",inplace=True)\nTest[\"BsmtFinType1\"].fillna(\"GLQ\",inplace=True)\nTest.isnull().sum().sort_values(ascending=False)","be510620":"Test[\"MasVnrType\"].fillna(\"None\",inplace=True)\nTest[\"MSZoning\"].fillna(\"RL\",inplace=True)\nTest[\"Functional\"].fillna(\"No\",inplace=True)\nTest[\"Utilities\"].fillna(\"AllPub\",inplace=True)\nTest[\"Exterior2nd\"].fillna(\"VinylSd\",inplace=True)\nTest.isnull().sum().sort_values(ascending=False)","a3f32bc5":"Test[\"KitchenQual\"].fillna(\"TA\",inplace=True)\nTest[\"Exterior1st\"].fillna(\"VinylSd\",inplace=True)\nTest[\"SaleType\"].fillna(\"WD\",inplace=True)\nTest.isnull().sum().sort_values(ascending=False)","afb3e08c":"sns.set_style(\"white\")\nf, ax = plt.subplots(figsize=(8, 7))\nax.set_xscale(\"log\")\nax = sns.boxplot(data=df[num_cols] , orient=\"h\", palette=\"Set1\")\nax.xaxis.grid(False)\nax.set(ylabel=\"Feature names\")\nax.set(xlabel=\"Numeric values\")\nax.set(title=\"Numeric Distribution of Features\")\nsns.despine(trim=True, left=True)","988e728d":"from scipy.stats import skew, norm\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax","91b80256":"skew_columns = df[num_cols].apply(lambda x: skew(x)).sort_values(ascending=False)\n\nhigh_skew = skew_columns[skew_columns > 0.5]\nskew_index = high_skew.index\n\nprint(\"There are {} numerical features with Skew > 0.5 :\".format(high_skew.shape[0]))\nskewness = pd.DataFrame({'Skew' :high_skew})\nskew_columns","1c74e619":"for i in skew_index:\n    df[i] = boxcox1p(df[i], boxcox_normmax(df[i] + 1))","1fd914f9":"sns.set_style(\"white\")\nf, ax = plt.subplots(figsize=(8, 7))\nax.set_xscale(\"log\")\nax = sns.boxplot(data=df[skew_index] , orient=\"h\", palette=\"Set1\")\nax.xaxis.grid(False)\nax.set(ylabel=\"Feature names\")\nax.set(xlabel=\"Numeric values\")\nax.set(title=\"Numeric Distribution of Features\")\nsns.despine(trim=True, left=True)\n","bfc8d34e":"sns.set_style(\"white\")\nf, ax = plt.subplots(figsize=(8, 7))\nax.set_xscale(\"log\")\nax = sns.boxplot(data=Test[test_num_cols] , orient=\"h\", palette=\"Set1\")\nax.xaxis.grid(False)\nax.set(ylabel=\"Feature names\")\nax.set(xlabel=\"Numeric values\")\nax.set(title=\"Numeric Distribution of Features\")\nsns.despine(trim=True, left=True)","d1866cd8":"skew_columns = Test[test_num_cols].apply(lambda x: skew(x)).sort_values(ascending=False)\n\nhigh_skew = skew_columns[skew_columns > 0.5]\nskew_index = high_skew.index\n\nprint(\"There are {} numerical features with Skew > 0.5 :\".format(high_skew.shape[0]))\nskewness = pd.DataFrame({'Skew' :high_skew})\nskew_columns","44ba9fff":"for i in skew_index:\n    Test[i] = boxcox1p(Test[i], boxcox_normmax(Test[i] + 1))\n\nsns.set_style(\"white\")\nf, ax = plt.subplots(figsize=(8, 7))\nax.set_xscale(\"log\")\nax = sns.boxplot(data=Test[skew_index] , orient=\"h\", palette=\"Set1\")\nax.xaxis.grid(False)\nax.set(ylabel=\"Feature names\")\nax.set(xlabel=\"Numeric values\")\nax.set(title=\"Numeric Distribution of Features\")\nsns.despine(trim=True, left=True)","a5641dbe":"#Object data Cleaning\ncat_cols=df.columns[df.dtypes== \"object\"]\ncat_cols","0ce4623d":"test_cat_cols = Test.columns[Test.dtypes==\"object\"]\ntest_cat_cols","3ed72791":"df= pd.get_dummies(df,columns =[\"MSZoning\",\"Street\",\"LotShape\",\"LandContour\",'LandSlope', \n                                'LotConfig','Neighborhood', 'Condition1', 'BldgType', \n                                'RoofStyle',  'MasVnrType', 'ExterQual', \n                                'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', \n                                'BsmtFinType1', 'HeatingQC', 'CentralAir', \n                                'KitchenQual', 'FireplaceQu', 'GarageType', 'GarageFinish', \n                                'GarageCond', 'PavedDrive', 'SaleType', 'SaleCondition'],drop_first =True)","451c93bc":"df.drop([\"Exterior2nd\",\"Condition2\",\"BsmtFinType2\",\"Utilities\", 'HouseStyle',\n         'RoofMatl', 'Exterior1st',  'Heating', 'Electrical', 'Functional', \n        'GarageQual'],axis=1,inplace=True) # We drop 3 columns because they have the same information with some columns\ndf.head()","2ac79f83":"Test= pd.get_dummies(Test,columns =[\"MSZoning\",\"Street\",\"LotShape\",\"LandContour\",'LandSlope', \n                                    'LotConfig','Neighborhood', 'Condition1', 'BldgType', \n                                    'RoofStyle',  'MasVnrType', 'ExterQual', \n                                    'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', \n                                    'BsmtFinType1', 'HeatingQC', 'CentralAir', \n                                    'KitchenQual', 'FireplaceQu', 'GarageType', 'GarageFinish', \n                                    'GarageCond', 'PavedDrive', 'SaleType', 'SaleCondition'],drop_first =True)\nTest.head()","cf09bdca":"df.drop(\"Id\",axis=1,inplace=True)\ndf.head()","9114351a":"Test.drop(\"Id\",axis=1,inplace=True)","7c390238":"#MODEL \nX=df.drop(\"SalePrice\",axis=1)\ny=df[\"SalePrice\"].values\nX = X.values\nX.shape\ny.shape\nTest= Test.values\nTest.shape","ed065c80":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train,y_test=train_test_split(X,y, test_size=0.05,random_state=42)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","32e81bd8":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\npredictions1 = model.predict(X_test)\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nprint(mean_absolute_error(y_test,predictions1))\nprint(mean_squared_error(y_test,predictions1))\nprint(np.sqrt(mean_squared_error(y_test,predictions1)))","cb7ea777":"import seaborn as sns\nsns.set_style(\"darkgrid\")\nplt.figure(figsize=(12,10))\nsns.regplot(predictions1,y_test)","c56336fb":"#NEW MODEL \nfrom sklearn.tree import DecisionTreeRegressor\ndtree = DecisionTreeRegressor()\ndtree.fit(X_train,y_train)\npredictions2 = dtree.predict(X_test)\nprint(mean_absolute_error(y_test,predictions2))\nprint(mean_squared_error(y_test,predictions2))\nprint(np.sqrt(mean_squared_error(y_test,predictions2))) ","460ca056":"42068.800040846334\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = dtree, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","c47ee057":"#another \nfrom sklearn.ensemble import RandomForestRegressor\nrandom_forest = RandomForestRegressor()\nrandom_forest.fit(X_train,y_train)\npredictions_rforest= random_forest.predict(X_test)\nprint(mean_absolute_error(y_test,predictions_rforest))\nprint(mean_squared_error(y_test,predictions_rforest))\nprint(np.sqrt(mean_squared_error(y_test,predictions_rforest)))\naccuracies = cross_val_score(estimator = random_forest, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","196e0c4c":"deep_predictions=model.predict(X_test)","69a41f9b":"print(mean_absolute_error(y_test,deep_predictions))\nprint(mean_squared_error(y_test,deep_predictions))\nprint(np.sqrt(mean_squared_error(y_test,deep_predictions)))","94e6c37f":"skew(a, axis=0, bias=True, nan_policy='propagate') Compute the sample skewness of a data set.\n\nFor normally distributed data, the skewness should be about zero. For\nunimodal continuous distributions, a skewness value greater than zero means\nthat there is more weight in the right tail of the distribution. The\nfunction `skewtest` can be used to determine if the skewness value\nis close enough to zero, statistically speaking.","a96f103b":"**EDA (Exploratory Data Analysis )**"}}