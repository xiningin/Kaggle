{"cell_type":{"30917b9e":"code","d5cb72a1":"code","c6890491":"code","1f4147be":"code","d62f0f42":"code","0fddfa2a":"code","c61c9644":"code","13acef4b":"code","abf9873b":"code","c81d0f14":"code","5a93715e":"code","2fcff8a0":"code","604d9521":"code","d3f960d1":"code","78c56bca":"code","2002c9b3":"code","d6ebdcf3":"code","f28a7ca8":"code","3b877a9c":"code","4c05efdd":"code","637eaaad":"code","e95e06b8":"code","8f3ec597":"code","5a583974":"code","863d4604":"code","35e91809":"code","271afee6":"code","fd540185":"code","69bb38ce":"code","39dabe29":"code","e14edad4":"code","980776d3":"code","44ba015b":"code","0b0bf551":"code","0db2624c":"code","4de93711":"code","72151422":"code","08bb15e7":"code","f969c0b2":"markdown","1e1bc33a":"markdown","fdc0d1a1":"markdown","3211d58d":"markdown","a28a3cdb":"markdown","b4c868ef":"markdown","fea230a3":"markdown","0827c35e":"markdown","f6ece13d":"markdown","28df79b1":"markdown","09c6b6fd":"markdown","4349304e":"markdown","1c0b148b":"markdown","c283c20c":"markdown","18b6a071":"markdown","283d4fcd":"markdown"},"source":{"30917b9e":"import pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\n\nimport plotly.offline as py\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nimport statsmodels.api as sm\nfrom plotly.offline import init_notebook_mode, iplot","d5cb72a1":"### Reading the data\n\ncase_data = pd.read_csv('..\/input\/coronavirusdataset\/case.csv')\npatient_data = pd.read_csv('..\/input\/coronavirusdataset\/patient.csv')\nroute_data = pd.read_csv('..\/input\/coronavirusdataset\/route.csv')\ntrend_data = pd.read_csv('..\/input\/coronavirusdataset\/trend.csv')\ntime_data = pd.read_csv('..\/input\/coronavirusdataset\/time.csv')","c6890491":"print(f\"Dataset is of {patient_data.shape[0]} rows and {patient_data.shape[1]} columns\")","1f4147be":"patient_data.head(10)","d62f0f42":"patient_data['birth_year'] = patient_data.birth_year.fillna(0.0).astype(int)\n\npatient_data['birth_year'] = patient_data['birth_year'].map(lambda val: val if val > 0 else np.nan)","0fddfa2a":"patient_data.confirmed_date = pd.to_datetime(patient_data.confirmed_date)\ndaily_count = patient_data.groupby(patient_data.confirmed_date).patient_id.count()\naccumulated_count = daily_count.cumsum()","c61c9644":"patient_data['age'] = 2020 - patient_data['birth_year'] \n\nimport math\n\ndef group_age(age):\n    if age >= 0: # not NaN\n        if age % 10 != 0:\n            lower = int(math.floor(age \/ 10.0)) * 10\n            upper = int(math.ceil(age \/ 10.0)) * 10 - 1\n            return f\"{lower}-{upper}\"\n        else:\n            lower = int(age)\n            upper = int(age + 9) \n            return f\"{lower}-{upper}\"\n    return \"Unknown\"","13acef4b":"patient_data[\"age_range\"] = patient_data[\"age\"].apply(group_age)","abf9873b":"import plotly.graph_objects as go\n\nsource_counts = patient_data.sex.value_counts().reset_index()\n\nlabels = source_counts['index'].values\nvalues = source_counts.sex.values\n\nlayout = dict(title= \"Male Vs Female\", width = 590, height = 500)\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)], layout=layout)\n\nfig.show()","c81d0f14":"def _generate_bar_plot_hor(df, col, title, color, w=None, h=None, lm=0, limit=100):\n    cnt_srs = df[col].value_counts()[:limit]\n\n    trace = go.Bar(y=cnt_srs.index[::-1], x=cnt_srs.values[::-1], orientation = 'h', marker=dict(color=color))\n\n    layout = dict(title=title, margin=dict(l=lm), width=w, height=h)\n\n    data = [trace]\n    \n    fig = go.Figure(data=data, layout=layout)\n    \n    iplot(fig)","5a93715e":"patient_data","2fcff8a0":"cols = ['infection_reason']\n_generate_bar_plot_hor(patient_data, cols[0], \"Distribution of Infection Reason\", '#f2b5bc', 1000, 600, 200)","604d9521":"cols = ['age_range']\n_generate_bar_plot_hor(patient_data, cols[0], \"Distribution of Age Range\", '#CD5C5C', 1000, 600, 400)","d3f960d1":"sns.set(rc={'figure.figsize':(18, 10)})\n\nsns.boxplot(x=\"infection_reason\", y=\"contact_number\", hue=\"sex\",  palette=\"PRGn\", data=patient_data)\n\nplt.title(\"#of people contacted by Infection Reason & gender\")\n\nplt.xticks(rotation='vertical')\nplt.show()","78c56bca":"cols = ['infection_reason', 'age_range']\n\nsns.set(rc={'figure.figsize':(18, 10)})\n\ncolmap = sns.light_palette(\"#ff4284\", as_cmap=True)\n\npd.crosstab(patient_data[cols[0]], patient_data[cols[1]]).style.background_gradient(cmap = colmap)","2002c9b3":"cols = ['infection_reason', 'state']\n\ncolmap = sns.light_palette(\"#7FB3D5\", as_cmap=True)\n\npd.crosstab(patient_data[cols[0]], patient_data[cols[1]]).style.background_gradient(cmap = colmap)","d6ebdcf3":"def _create_bubble_plots(col1, col2, aggcol, func, title, cs):\n\n    tempdf = patient_data.groupby([col1, col2]).agg({aggcol : func}).reset_index()\n    tempdf[aggcol] = tempdf[aggcol].apply(lambda x : int(x))\n    tempdf = tempdf.sort_values(aggcol, ascending=False)\n\n    sizes = list(reversed([i for i in range(10,31)]))\n    intervals = int(len(tempdf) \/ len(sizes))\n    size_array = [9]*len(tempdf)\n    \n    st = 0\n    for i, size in enumerate(sizes):\n        for j in range(st, st+intervals):\n            size_array[j] = size \n        st = st+intervals\n    tempdf['size_n'] = size_array\n\n    cols = list(tempdf['size_n'])\n\n    trace1 = go.Scatter(x=tempdf[col1], y=tempdf[col2], mode='markers', text=tempdf[aggcol],\n        marker=dict( size=tempdf.size_n, color=cols, colorscale=cs ))\n    data = [trace1]\n    layout = go.Layout(title=title)\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig)\n\n_create_bubble_plots('infection_reason', 'state', 'age', 'mean', '', 'Electric')","f28a7ca8":"patient_data_corr = patient_data[['age', 'infection_order', 'contact_number']]","3b877a9c":"corr = patient_data_corr.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.set(style=\"white\")\n\nf, ax = plt.subplots(figsize=(15, 12))\n\ncmap = sns.diverging_palette(30, 10, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0, square=True, linewidths=.1, cbar_kws={\"shrink\": .5});","4c05efdd":"import plotly.graph_objects as go\n\nct = pd.crosstab(patient_data['infection_reason'] , patient_data['infection_order'])\nctr = ct.index.tolist()\n\n\nfig = go.Figure(data=[\n    go.Bar(name='1.0', x=ctr, y=ct[1.0].tolist()),\n    go.Bar(name='2.0', x=ctr, y=ct[2.0].tolist()),\n    go.Bar(name='3.0', x=ctr, y=ct[3.0].tolist()),\n    go.Bar(name='4.0', x=ctr, y=ct[4.0].tolist()),\n    go.Bar(name='5.0', x=ctr, y=ct[5.0].tolist()),\n\n])\n\nfig.update_layout(barmode='group')\nfig.show()","637eaaad":"data = daily_count.resample('D').first().fillna(0).cumsum()","e95e06b8":"prophet= pd.DataFrame(data)\n\nprophet\n\npr_data = prophet.reset_index()\n\npr_data.columns = ['ds','y']","8f3ec597":"m=Prophet()\n\nm.fit(pr_data)\n\nfuture = m.make_future_dataframe(periods=30)\n\nforecast=m.predict(future)","5a583974":"figure = m.plot(forecast, xlabel='Date', ylabel='Confirmed Count')","863d4604":"df = time_data.set_index('date').sort_index()['confirmed'].cumsum().loc[lambda x: x > 0].to_frame('cases_cs')\ndf['t'] = df.reset_index().reset_index().index + 1","35e91809":"df.iloc[-10:]","271afee6":"def exp_func(a, b, t):\n    return a*np.exp(b*t)","fd540185":"x = df.t.tolist()\ny = df.cases_cs.tolist()","69bb38ce":"import scipy as sp\n\npop, params = sp.optimize.curve_fit(lambda t, a, b: exp_func(a, b, t),  x,  y, p0=[0.018, -0.243])\n\na_hat, b_hat = pop\n\nprint(a_hat, b_hat)","39dabe29":"df['cases_hat'] = df.t.apply(lambda t: exp_func(a_hat, b_hat, t))","e14edad4":"ts = [\n    {\n        't': t,\n        'cases_hat': exp_func(a_hat, b_hat, t)\n    }\n    for t in range(26, 91)\n]\ndf_hat = pd.DataFrame(ts)","980776d3":"df_proj = pd.concat([\n    df.drop(['cases_hat'], axis=1),\n    df_hat\n], sort=False).set_index('t')\n\ndf_proj.rename(\n    columns={\n        'cases_cs': 'Confirmed',\n        'cases_hat': 'Projected'\n    }, inplace=True\n)","44ba015b":"today_index = 53","0b0bf551":"delta_forecast = 150.0\ntoday_forecast = df.set_index('t').loc[today_index-1, 'cases_cs'] + delta_forecast","0db2624c":"today_actual = df_proj.loc[today_index].Confirmed.dropna().iloc[0]","4de93711":"today_abs_error = np.abs(today_actual - today_forecast)\ntoday_abs_percentage_error = round(today_abs_error \/ today_actual * 100,1)\n\nerror_string = (\"12\/03\/2020: \"\n                f\"\\nConfirmed={today_actual} \"\n                f\"\\nForecast={today_forecast} \"\n                f\"\\nError={today_abs_error} ({today_abs_percentage_error}%)\")\n\nprint(error_string)","72151422":"_, _, r_value, _, _ = sp.stats.linregress(df_proj.groupby('t').min().dropna()['Confirmed'],\n                                          df_proj.groupby('t').min().dropna()['Projected'])\nr_2 = round(r_value, 4)\nr_2","08bb15e7":"df_proj.loc[:today_index + 10].plot(alpha=0.5, lw=5)\n\nplt.text(x=today_index, y=100, s=f\"4 days ago\")\nplt.axvline(x=today_index, color=\"darkgreen\", linestyle=\"dotted\")\n\nplt.xlabel(\"Days from Outbreak\")\nplt.ylabel(\"# Covid-19 Cases\")\nplt.title(r\"$y = 0.033 e ^{- 0.227 t}$; $R^2=0.9965$\")","f969c0b2":"### Infection reason by Gender","1e1bc33a":"### What is the Mean Age of Patients having different States and different cause of infection","fdc0d1a1":"### Correlation among the variables","3211d58d":"### How many patients are there under different states and different infections ?","a28a3cdb":"### There are several datasets, so lets go one by one","b4c868ef":"<a id=\"uv\"><\/a>\n\n## Univariate Analysis\n\n\n\n\n### Male vs Female patient Count","fea230a3":"### How many patients are there under different age ranges and different infections ?","0827c35e":"### Forecasting using FB-Prophet","f6ece13d":"### CONTENTS\n\n1. [Importing those libraries](#Imp) \n2. [Preprocessing](#prp)\n3. [Univariate Analysis](#uv)\n4. [Multivariate Analysis](#mu)\n5. [Exponential Graph](#ex)","28df79b1":"<a id=\"mu\"><\/a>\n\n## Multivariate","09c6b6fd":"### Infection reason and Infection order","4349304e":"<a id=\"prp\"><\/a>\n\n### Preprocessing ","1c0b148b":"### Reason for Infection?","c283c20c":"<a id=\"ex\"><\/a>\n\n### Exponential Function","18b6a071":"### Fitting the model on Known data","283d4fcd":"### Distribution of age-range"}}