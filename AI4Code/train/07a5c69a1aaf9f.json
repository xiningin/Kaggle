{"cell_type":{"c92b428b":"code","843393a4":"code","802ee8b5":"code","36c0bb13":"code","09f1f695":"code","f602e651":"code","f79b9d5e":"code","2ae78f61":"markdown","b1824979":"markdown","a22ef9e9":"markdown","6b1cc7e6":"markdown"},"source":{"c92b428b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nimport gc \nimport warnings\nwarnings.filterwarnings('ignore')","843393a4":"%%time\ndf_train = pd.read_parquet('..\/input\/ubiquant-parquet\/train_low_mem.parquet')\ndf_train","802ee8b5":"df_train.info()","36c0bb13":"df_train.loc[:, 'row_id':'f_3'].describe()","09f1f695":"f, ax = plt.subplots(3,1,figsize=(10,10))\nsns.distplot(df_train['target'], ax=ax[0], bins=200, kde=False)\nax[0].set_title('Histgram of target')\n\nsns.distplot(df_train['time_id'], ax=ax[1], bins=200, kde=False)\nax[1].set_title('Histgram of time_id')\n\nsns.distplot(df_train['investment_id'], ax=ax[2], bins=200, kde=False)\nax[2].set_title('Histgram of investment_id')\n\nplt.tight_layout()","f602e651":"df_u300 = df_train[df_train.time_id<=300]\ndf_o1100 = df_train[df_train.time_id>=1100]\ndel df_train\n\nfeatures = ['f_'+str(i) for i in range(300)]\ntarget = 'target'\n\n# \u5b66\u7fd2\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u3092\u8a2d\u5b9a\ndata_train = lgb.Dataset(df_u300[features], df_u300[target])\ndata_eval = lgb.Dataset(df_o1100[features], df_o1100[target], reference=data_train) \n\n# LightGBM parameters\nparams = {\n        \"objective\": \"regression\",\n        \"metric\": \"rmse\",\n        \"num_leaves\": 14,\n        \"max_depth\": 4,\n        \"feature_fraction\": 0.8,\n        \"subsample_freq\": 1,\n        \"bagging_fraction\": 0.7,\n        \"min_data_in_leaf\": 10,\n        \"learning_rate\": 0.2,\n        \"boosting\": \"gbdt\",\n        \"lambda_l1\": 0.4,\n        \"lambda_l2\": 0.4,\n        \"verbosity\": -1,\n        \"random_state\": 42,\n}\n\n# \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\nmodel = lgb.train(params,\n                  train_set=data_train, # \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306e\u6307\u5b9a\n                  valid_sets=data_eval, # \u691c\u8a3c\u30c7\u30fc\u30bf\u306e\u6307\u5b9a\n                  )\ndf_feature = pd.DataFrame({\n    'features' :features,\n    'importance' : model.feature_importance()})\ndf_feature = df_feature.sort_values(by='importance',ascending = False)\n\nplt.figure(figsize=(16, 6))\nsns.barplot(x='features', y='importance', data=df_feature[0:30])\nplt.title(f'Head LightGBM Feature Importance')\nplt.tight_layout()\nplt.show()","f79b9d5e":"import ubiquant\n\nenv = ubiquant.make_env()  # initialize the environment\niter_test = env.iter_test()  # an iterator which loops over the test set and sample submission\n\nfor (test_df, sample_prediction_df) in iter_test:\n    sample_prediction_df['target'] = model.predict(test_df[features])  # make your predictions here\n    env.predict(sample_prediction_df)   # register your predictions","2ae78f61":"### \u5b66\u7fd2\u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\n\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308bCSV\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5bb9\u91cf\u306f18G\u307b\u3069\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u307e\u307e\u3067\u306f\u5927\u304d\u904e\u304e\u308b\u306e\u3067\u3001Dask\u3067\u8aad\u307f\u8fbc\u3080\u304bpickle\u3084parquet\u3067\u6271\u3046\u3053\u3068\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002<br>\n\u4eca\u56de\u306f\u3001ROB MULLA\u3055\u3093\u306eParquet\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\u611f\u8b1d\u3067\u3059\uff01<br>\n\u53c2\u8003\u30ab\u30fc\u30cd\u30eb\uff1a[\u23eb Fast Data Loading and Low Mem with Parquet Files](https:\/\/www.kaggle.com\/robikscube\/fast-data-loading-and-low-mem-with-parquet-files)","b1824979":"### \u63d0\u51fa\u78ba\u8a8d\nubiquant Python module\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u306e\u3053\u3068\u3002\u7c21\u6613\u30e2\u30c7\u30eb\u3067\u63d0\u51fa\u306e\u78ba\u8a8d\u3060\u3051\u3057\u3066\u304a\u304d\u307e\u3059\u3002<br>\n[Overview\/Evaluation](https:\/\/www.kaggle.com\/c\/ubiquant-market-prediction\/overview\/evaluation)\u306b\u8a18\u8f09\u306e\u901a\u308a\u3001prediction\u3092\u884c\u3044\u307e\u3059\u3002","a22ef9e9":"# Ubiquant Market Prediction\n\u6295\u8cc7\u306e\u53ce\u76ca\u7387\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9<br>\n\n- **row_id**\n- **time_id** - 0~1219\n- **investment_id** - 0~3773\n- **target** - The target.\n- **features** - [f_0:f_299] - \u5e02\u5834\u30c7\u30fc\u30bf\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u7279\u5fb4\u91cf\n\n\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d \uff5e \u63d0\u51fa\u30b3\u30fc\u30c9\u306e\u78ba\u8a8d\u307e\u3067\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002","6b1cc7e6":"\u30c7\u30fc\u30bf\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\u6b20\u640d\u3042\u308a\u307e\u3059\u306d\u3002<br>\ntime_id\u306b\u3064\u3044\u3066\u306f\u3001id\u304c\u5927\u304d\u3044\u307b\u3069\u30c7\u30fc\u30bf\u304c\u305d\u308d\u3063\u3066\u3044\u308b\u3001\u307e\u305f300\u5f8c\u534a\u3067\u304b\u306a\u308a\u30c7\u30fc\u30bf\u306e\u629c\u3051\u304c\u3042\u308a\u307e\u3059\u3002<br>\ninvestment_id\u306f\u3001bin\u6570\u3092\u5897\u3084\u3059\u3068\u30dc\u30b3\u30dc\u30b3\u3057\u3066\u308b\u306e\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002"}}