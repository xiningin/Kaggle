{"cell_type":{"838f2fa0":"code","baaa641f":"code","4c17cc3d":"code","cfc25017":"code","5b0ff561":"code","8298c1d0":"code","a9e1e0d6":"code","b3b795fa":"code","1d4df398":"code","d6369d93":"code","93d0d4eb":"code","e3c44919":"code","dabbadf5":"code","ab93dfc9":"code","12dda99e":"code","91c0df7d":"code","7cd0b31a":"code","65f86346":"code","4d0cf8bb":"code","c7f44057":"code","28508e75":"code","fa61d8d3":"code","1a2fc0dd":"code","5f99f672":"code","c0442712":"code","0148db63":"code","a4069ef1":"markdown","200bf29e":"markdown","73059e2d":"markdown","5c8fd04f":"markdown","2bb4b4cc":"markdown","a599ece0":"markdown","2238d470":"markdown","f2fe33c5":"markdown"},"source":{"838f2fa0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","baaa641f":"data = pd.read_csv(\"..\/input\/pokemon.csv\")","4c17cc3d":"data.columns","cfc25017":"data.head()\n# data.tail()","5b0ff561":"data.index = range(1,802,1) # index starts from 1\ndata.name[0:3] # however, zero is the index that's exclusive. show data 1st to 3rd index.\n","8298c1d0":"data[\"type1\"][5] # 5th index of 'type1'","a9e1e0d6":"data.loc[1,\"type1\":\"type2\"]  # 1st raw of type1 to type2","b3b795fa":"data[[\"name\",\"speed\"]] # show name and speed throughout the list","1d4df398":"filtered = data.speed > 150","d6369d93":"data[filtered]","93d0d4eb":"filter1 = data.attack > 150\nfilter2 = data[\"defense\"] > 120\ndata[filter1 & filter2]","e3c44919":"data.speed[data.attack>180] # speed of pokemons of the ones having greater attack than 180.","dabbadf5":"def prod(n):\n    return n**2\ndata[\"attack\"].apply(prod) # squares of attack column ","ab93dfc9":"data[\"full speed\"] = data.sp_attack + data.sp_defense \ndata.head()","12dda99e":"data = pd.read_csv(\"..\/input\/pokemon.csv\")","91c0df7d":"print(data.index.name)  # we dont have an index name yet.\ndata.index.name = [\"benimsin\"] # name of my index is \" benimsin\"","7cd0b31a":"data1 = data.set_index(\"type1\")  # setting another column as index\n# data.index.name = data[\"smth\"]\ndata1.head()","65f86346":"data1 = data.set_index([\"type1\",\"type2\"])\ndata1.head()","4d0cf8bb":"dic= {\"sex\":[\"F\",\"M\",\"M\",\"F\"],\"sizes\":[13,17,12,19],\"smt\":[\"x\",\"x\",\"y\",\"y\"]}\ndf = pd.DataFrame(dic)\ndf.index = range(1,8,2)  # index counts two each\ndf","c7f44057":"df.pivot(index = \"sex\",columns= \"smt\",values=\"sizes\")","28508e75":"df2 = df.set_index([\"smt\",\"sex\"])\ndf2","fa61d8d3":"df2.unstack(level=0)    # remove first index column","1a2fc0dd":"df3 = df2.swaplevel(0,1)\ndf3","5f99f672":"pd.melt(df,id_vars=\"sex\",value_vars=[\"smt\",\"sizes\"])\n","c0442712":"df.groupby(\"sex\").mean()","0148db63":"df.groupby(\"smt\").sizes.max()","a4069ef1":"**transforming data**","200bf29e":" **Category & Groupby**","73059e2d":"**indexing & slicing**","5c8fd04f":"**Melting Data**","2bb4b4cc":"**pivoting data**","a599ece0":"**Stacking & Unstacking Data Frames**","2238d470":" ** filtering data frames**\n","f2fe33c5":"**hierarchical indexing **"}}