{"cell_type":{"4ac2c9aa":"code","a0673947":"code","07be038b":"code","b326b181":"code","0d838019":"code","cd2036e2":"code","b41e81d8":"code","e1bd645c":"code","5fa36452":"code","1d964832":"code","b24b4e25":"code","d62b24c3":"code","3e31ba5e":"code","ffc5fc53":"code","2268690e":"code","84f1ff23":"code","6d4dfd0f":"code","7e98f5dc":"code","18342342":"code","7c600176":"code","9aadad87":"code","4a802d53":"code","72d50810":"code","84402d14":"code","c0aa3458":"code","4eab25de":"code","ea11c539":"code","618e76d6":"code","4d154df3":"code","e79f629f":"code","c6e54614":"code","66285e79":"markdown","0cf4bd94":"markdown","c8c2f5cc":"markdown","de267a5f":"markdown","5bd6f70f":"markdown","20619913":"markdown","d8a90a13":"markdown"},"source":{"4ac2c9aa":"# Vamos importar os pacotes necess\u00e1rios para esse tutorial:\n# Link com refer\u00eancias de markdown para destaques no notebook do kaggle -> https:\/\/markdown-it.github.io\/\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport requests\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a0673947":"# Criando uma s\u00e9rie com 4 n\u00fameros aleat\u00f3rios, estamos chamando ela de \"a\u00e7\u00f5es\"\n\ns = pd.Series(np.random.randn(4), name=\"a\u00e7\u00f5es\")\ns","07be038b":"# Os operadores podem ser aplicados a 'serie' de maneira similar aos arrays do NumPy\n\ns * 100","b326b181":"# Podemos pegar o m\u00f3dulo dos n\u00fameros\n\nnp.abs(s)","0d838019":"# Existem diversos m\u00e9todos que podemos aplicar (ler documenta\u00e7\u00e3o oficial)\n# .describe() nos entrega dados estat\u00edsticos referentes ao nosso dataset, como contagem, valor m\u00ednimo e m\u00e1ximo, etc\n\ns.describe()","cd2036e2":"# Podemos rotular nossos dados\ns.index = ['AMAZON', 'APPLE', 'MICROSOFT','GOOGLE']\ns","b41e81d8":"# A sintaxe utilizada nos dicion\u00e1rios do `Python` pode ser utilizada nas `Series` do `Pandas`\n\ns['AMAZON']","e1bd645c":"# Mais um exemplo\n\ns['AMAZON'] = 0\ns","5fa36452":"# Mais um exemplo\n\n'APPLE' in s","1d964832":"# Abrindo um .CSV dentro do meu Google Drive \n\nurl = 'https:\/\/drive.google.com\/file\/d\/1SOwu4GWBw_HljYFDD5K9sByp-smxFZ3P\/view?usp=sharing'\npath = 'https:\/\/drive.google.com\/uc?export=download&id='+url.split('\/')[-2]\ndf= pd.read_csv(path)\ndf","b24b4e25":"# Podemos utilizar cortes para ver apenas o conte\u00fado das linhas 2 a 5\n\ndf[2:5]","d62b24c3":"# Podemos pedir apenas colunas espec\u00edficas\n\ndf[['country', 'tcgdp']]","3e31ba5e":"# O atributo `iloc` \u00e9 usado para selecionar linhas e colunas atrav\u00e9s de `integers` (n\u00fameros inteiros), ele segue o formato .iloc[rows, columns]\ndf.iloc[2:5, 0:4]","ffc5fc53":"# O atributo `loc` \u00e9 usado para selecionar linhas e colunas atrav\u00e9s de `integers` (n\u00faemros inteiros) e `labels` (r\u00f3tulos)\ndf.loc[df.index[2:5], ['country', 'tcgdp']]","2268690e":"# O nosso DataFrame, por padr\u00e3o segue o \u00edndice de acordo com o n\u00famero da linha\n\ndf = df[['country', 'POP', 'tcgdp']]\ndf","84f1ff23":"# Para trocar o \u00b4index\u00b4 para os pa\u00edses, ao inv\u00e9s do n\u00famero da linha, podemos fazer o seguinte:\n\ndf = df.set_index('country')\ndf","6d4dfd0f":"# Podemos alterar o nome das colunas:\n\ndf.columns = 'population', 'total GDP'\ndf","7e98f5dc":"# Podemos multiplicar todos os dados de popula\u00e7\u00e3o por 1000\n\ndf['population'] = df['population'] * 1e3\ndf","18342342":"# Com uma linha de c\u00f3digo \u00e9 poss\u00edvel criar uma nova coluna que calcula o PIB per capita\n\ndf['GDP percap'] = df['total GDP'] * 1e6 \/ df['population']\ndf","7c600176":"# Tamb\u00e9m \u00e9 poss\u00edvel plotar gr\u00e1ficos para an\u00e1lises explorat\u00f3ria dos dados\n\nax = df['GDP percap'].plot(kind='bar')\nax.set_xlabel('country', fontsize=12)\nax.set_ylabel('GDP per capita', fontsize=12)\nplt.show()","9aadad87":"# Podemos ordenar os dados pelo PIB per capita para melhorar a visualiza\u00e7\u00e3o do gr\u00e1fico\ndf = df.sort_values(by='GDP percap', ascending=False)\ndf","4a802d53":"ax = df['GDP percap'].plot(kind='bar')\nax.set_xlabel('country', fontsize=12)\nax.set_ylabel('GDP per capita', fontsize=12)\nplt.show()","72d50810":"# Abrindo um CSV no meu Google Drive com filmes categorizados\n\nmovie_url = 'https:\/\/drive.google.com\/file\/d\/1zQ1qmg6llqm29tpLa_sJT31umesJn6hn\/view?usp=sharing'\nmovie_path = 'https:\/\/drive.google.com\/uc?export=download&id='+movie_url.split('\/')[-2]\nmovies = pd.read_csv(movie_path)\nmovies","84402d14":"# Abrindo um CSV no meu Google Drive com a nota do filme, dada por um usu\u00e1rio em um determinado timestamp\n\nrating_url = 'https:\/\/drive.google.com\/file\/d\/1i3habtRVO-C9T4fPk5elA6IgUBRtlEq4\/view?usp=sharing'\nrating_path = 'https:\/\/drive.google.com\/uc?export=download&id='+rating_url.split('\/')[-2]\nratings = pd.read_csv(rating_path)\nratings","c0aa3458":"movies.shape","4eab25de":"ratings.shape","ea11c539":"movies.columns","618e76d6":"ratings.columns","4d154df3":"movie_ratings = pd.merge(movies, ratings)\nmovie_ratings.columns","e79f629f":"movie_ratings.head()","c6e54614":"movie_ratings.shape","66285e79":"O Pandas define estruturas fundamentais para trabalhar com dados e est\u00e1 repleto de m\u00e9todos que facilitam opera\u00e7\u00f5es como:\n* Leitura de dados\n* Trabalhar com s\u00e9ries tempor\u00e1is\n* Ordenamento, agrupamento, reordena\u00e7\u00e3o e mesclagem geral de dados\n* Lidar com valores ausentes","0cf4bd94":"# DataFrames\n\nEnquanto que as `Series` trabalham com uma \u00fanica coluna de dados, o `DataFrame` trabalha com diversas colunas, uma para cada vari\u00e1vel.\n\nUm DataFrame seria ent\u00e3o uma matriz de matrizes, an\u00e1logo a um (ultra otimizado) spreadsheet de Excel","c8c2f5cc":"# Series\n\nOs dois tipos de dados mais importantes definidos pelo pandas s\u00e3o: `Series` e `DataFrame`","de267a5f":"Um pequeno exemplo de c\u00f3digo para refer\u00eancias futuras:\n\ndf1.append(df2):\n- stack vertical\n\npd.concat([df1, df2]):\n- stack horizontal ou vertical\n- inner\/outer joins simples via Index\n\ndf1.join(df2):\n- inner\/outer\/left\/right joins via Index\n\npd.merge(df1, df2):\n- joins em m\u00faltiplas colunas","5bd6f70f":"# DataFrames: Append\/Concat & Join\/Merge\n\nVamos aprender a juntar `DataFrames` utilizando as fun\u00e7\u00f5es `Append`\/`Concat` & `Join`\/`Merge`\n\n\n","20619913":"# [Documenta\u00e7\u00e3o Oficial](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.html?fbclid=IwAR2le4ZUJeJy1lTkf9yXMOYwrzXJ3hbiOjAJGlzco4VI3Tv9jQmUHUmV0KM)","d8a90a13":"# Pandas \u00e9 um um pacote de f\u00e1cil e eficiente an\u00e1lise de dados para Python.\n# Sua popularidade cresceu muito nos \u00faltimos anos, juntamente com o crescimento da \u00e1rea de ci\u00eancia de dados.\n![](https:\/\/camo.githubusercontent.com\/78ed67e87ba32fd7735dfc05c87932b756492fbb\/68747470733a2f2f73332d61702d736f757468656173742d322e616d617a6f6e6177732e636f6d2f707974686f6e2d70726f6772616d6d696e672e7175616e7465636f6e2e6f72672f5f7374617469632f6c6563747572655f73706563696669632f70616e6461732f70616e6461735f76735f726573742e706e67)"}}