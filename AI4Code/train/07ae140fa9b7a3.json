{"cell_type":{"857717d7":"code","71422f47":"code","b346806c":"code","b356742b":"code","15029695":"code","f064a6ee":"code","bd5a987b":"code","deab5d20":"code","f7c8d971":"code","c809dfd8":"code","bac9f53b":"code","106a8267":"code","58e5a156":"code","a5e78e7e":"code","cac7ad99":"code","f5c1d998":"code","9e98c0a0":"code","cdbb1708":"code","05f739cc":"code","3b5786c0":"code","ac3ba73a":"code","db582e38":"code","0e804ac9":"code","73e67b73":"code","76ec4341":"code","b065bbae":"code","92123216":"markdown","63e920f4":"markdown","8021b787":"markdown","fbe778fc":"markdown","7cde2096":"markdown","10618b25":"markdown","0443a894":"markdown","32463d3d":"markdown","3627618a":"markdown","918571fc":"markdown","b10c3572":"markdown","29cae5b0":"markdown","48922d88":"markdown","93c849e3":"markdown","7f2e4352":"markdown","cfd201f6":"markdown"},"source":{"857717d7":"import numpy as np\nimport pandas as pd\nfrom scipy import stats\n\nfrom IPython.display import display, Markdown, Latex\nimport re\n\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","71422f47":"df = pd.read_csv(\"\/kaggle\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv\")\nnoc = pd.read_csv(\"\/kaggle\/input\/120-years-of-olympic-history-athletes-and-results\/noc_regions.csv\")","b346806c":"df.info()","b356742b":"df.head()","15029695":"noc.info()","f064a6ee":"noc.loc[noc.region.isnull()==True]","bd5a987b":"noc.loc[noc.notes.isnull()==False]","deab5d20":"summer_olympic = df.query(\"Season =='Summer'\")\nwinter_olympic = df.query(\"Season =='Winter'\")\n\nmdquery = \"From \" + df.sort_values('Year').reset_index().City.values[0] + \" \" + str(df.Year.min()) \\\n           + \" to \" + df.sort_values('Year').reset_index().City.values[-1] + \" \" + str(df.Year.max())\\\n           + \". There are \" + str(len(summer_olympic.Year.unique())) + \" Summer Olympic Games and \"\\\n           + str(len(winter_olympic.Year.unique())) + \" Winter Olympic Games have been hold.\"\ndisplay(Markdown(mdquery))","f7c8d971":"games = {\"Summer\": summer_olympic, \n         \"Winter\": winter_olympic}","c809dfd8":"for season in games.keys():\n    sex_year_df = games[season].groupby([\"Year\",\"Sex\"]).ID.count().rename(\"Count\").reset_index()\n    fig = px.bar(sex_year_df.sort_values(\"Sex\", ascending=False), \n                 x=\"Year\", y=\"Count\", color='Sex', barmode='group',\n                 title=season+\" Olympic Games Athletes' Sex Comparation Over Years\")\n    fig.show()\n    sex_year_df = sex_year_df.pivot(index=\"Year\", columns=\"Sex\", values=\"Count\").reset_index()\n    sex_year_df[\"Ratio\"] = sex_year_df[\"M\"] \/ sex_year_df[\"F\"]\n    fig = px.line(sex_year_df, x=\"Year\", y=\"Ratio\",\n                  title=season+\" Olympic Games M\/F Ratio Over Years\")\n    fig.show()","bac9f53b":"fig = px.line(df.groupby([\"Year\",\"Season\"]).NOC.nunique().rename(\"NationCount\").reset_index(),\n              x=\"Year\", y=\"NationCount\", color=\"Season\", title='Olympic Games Nation Count Changing Over Years')\nfig.show()","106a8267":"fig = px.line(df.groupby([\"Year\",\"Season\"]).Sport.nunique().rename(\"SportCount\").reset_index(),\n              x=\"Year\", y=\"SportCount\", color=\"Season\", title='Olympic Games Sport Count Changing Over Years')\nfig.show()","58e5a156":"fig = px.line(df.groupby([\"Year\",\"Season\"]).Event.nunique().rename(\"EventCount\").reset_index(),\n              x=\"Year\", y=\"EventCount\", color=\"Season\", title='Olympic Games Event Count Changing Over Years')\nfig.show()","a5e78e7e":"df_Medal = df.loc[df.Medal.isnull()==False][[\"ID\", \"Name\", \"Sex\", \"Age\",\"Height\", \"Weight\", \"NOC\", \"Year\", \"Season\", \"Sport\", \"Event\", \"Medal\"]]\nmedal_type = df_Medal.Medal.unique()\nfor medal in medal_type:\n    df_Medal[medal] = df_Medal.Medal.apply(lambda x: 1 if x == medal else 0)\n\n\nmdquery = \"There are \" + str(len(df_Medal)) + \" athletes won at least one meldal in the Olympic Games history.\"\ndisplay(Markdown(mdquery))","cac7ad99":"df_Medal_player = df_Medal.groupby(['Name', 'Sex', 'NOC', 'Season', 'Sport'])\\\n                            .aggregate({'Gold': 'sum', 'Silver': 'sum', 'Bronze': 'sum'}).reset_index()\ndisplay(Markdown(\"**Top 5 Athletes Won the Most Gold Medal in Olympic Games History:**\"))\ndisplay(df_Medal_player.sort_values([\"Gold\", \"Silver\", \"Bronze\"], ascending=False).head(5).reset_index(drop=True))","f5c1d998":"seasons = ['Summer', 'Winter']\nsexes = ['Male', 'Female']\n\nfor season in seasons:\n    for sex in sexes:\n        sex_i = sex[0]\n        df_Medal_player = df_Medal.query(\"Season==@season & Sex==@sex_i\").groupby(['Name', 'NOC', 'Sport'])\\\n                                    .aggregate(minYear=('Year', 'min'),\n                                               maxYear=('Year', 'max'), \n                                               Gold=('Gold', 'sum'), \n                                               Silver=('Silver', 'sum'), \n                                               Bronze=('Bronze', 'sum')).reset_index()\n        display(Markdown(\"**Top 5 \" + sex + \" Athletes Won the Most Gold Medal in \" + season + \" Olympic Games History:**\"))\n        display(df_Medal_player.sort_values([\"Gold\", \"Silver\", \"Bronze\"], ascending=False).head(5).reset_index(drop=True))","9e98c0a0":"# Unique metal count by Event and NOC, reduced the duplicated medal count from team events for each nation\ndf_Medal_unique = df_Medal[['NOC', 'Year', 'Season', 'Sport', 'Event', 'Medal', 'Gold', 'Silver', 'Bronze']]\\\n                    .drop_duplicates().reset_index(drop=True)\ndf_Medal_unique","cdbb1708":"for season in seasons:\n    df_Medal_nation = df_Medal_unique.query(\"Year >= 1980 & Season==@season\").groupby('NOC')\\\n                                    .aggregate({'Gold': 'sum', 'Silver': 'sum', 'Bronze': 'sum'}).reset_index()\n    \n    display(Markdown(\"**Top 10 Nations Won the Most Gold Medal in \" + season + \" Olympic Games History:**\"))\n    display(df_Medal_nation.sort_values([\"Gold\", \"Silver\", \"Bronze\"], ascending=False).head(10).reset_index(drop=True))\n    fig = px.bar(df_Medal_nation.sort_values([\"Gold\", \"Silver\", \"Bronze\"], ascending=False).head(10).reset_index(drop=True), \n             x=\"NOC\", y=[\"Gold\", \"Silver\", \"Bronze\"], color_discrete_sequence=px.colors.qualitative.T10,\n             title=\"Top 10 Nations Won the Most Gold Medal in \" + season + \" Olympic Games History:\")\n             \n    fig.show()","05f739cc":"nations = ['USA', 'CHN', 'RUS']\nfor nation in nations:\n    display(Markdown(\"**Top 5 Sports \"+ nation +\" Won the Most Gold Medal in Summer Olympic Games History:**\"))\n    display(df_Medal_unique.query(\"Year >= 1980 & Season=='Summer' & NOC==@nation\").groupby(['Sport'])\\\n                        .aggregate({'Gold': 'sum', 'Silver': 'sum', 'Bronze': 'sum'}).reset_index()\\\n                        .sort_values([\"Gold\", \"Silver\", \"Bronze\"], ascending=False).head(5).reset_index(drop=True))","3b5786c0":"nations = ['GER', 'USA', 'NOR', 'CAN']\nfor nation in nations:\n    display(Markdown(\"**Top 5 Sports \"+ nation +\" Won the Most Gold Medal in Winter Olympic Games History:**\"))\n    display(df_Medal_unique.query(\"Year >= 1980 & Season=='Winter' & NOC==@nation\").groupby(['Sport'])\\\n                        .aggregate({'Gold': 'sum', 'Silver': 'sum', 'Bronze': 'sum'}).reset_index()\\\n                        .sort_values([\"Gold\", \"Silver\", \"Bronze\"], ascending=False).head(5).reset_index(drop=True))","ac3ba73a":"df_Medal_gymnastics = df_Medal.query(\"Sport == 'Gymnastics'\").dropna(subset=[\"Height\"]).groupby([\"Name\", \"Sex\", \"Height\"])\\\n                                .aggregate({'Gold': 'sum', 'Silver': 'sum', 'Bronze': 'sum'}).reset_index()\nstats.levene(df_Medal_gymnastics.query(\"Sex=='F'\").Height, \n             df_Medal_gymnastics.query(\"Sex=='M'\").Height, center='mean')","db582e38":"stats.ttest_ind(df_Medal_gymnastics.query(\"Sex=='F'\").Height, \n                df_Medal_gymnastics.query(\"Sex=='M'\").Height, equal_var = False)","0e804ac9":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=df_Medal_gymnastics.query(\"Sex=='F'\").Height, name='Female'))\nfig.add_trace(go.Histogram(x=df_Medal_gymnastics.query(\"Sex=='M'\").Height, name='Male'))\n\n# Overlay both histograms\nfig.update_layout(barmode='overlay',\n                 title_text=\"Gymnastics Medal Winners' Height Distribution\")\n# Reduce opacity to see both histograms\nfig.update_traces(opacity=0.75)\nfig.show()","73e67b73":"df_Medal_tabletannis = df_Medal.query(\"Sport == 'Table Tennis'\").dropna(subset=[\"Age\"]).groupby([\"Name\", \"Sex\", \"Age\"])\\\n                                .aggregate({'Gold': 'sum', 'Silver': 'sum', 'Bronze': 'sum'}).reset_index()\nstats.levene(df_Medal_tabletannis.query(\"Sex=='F'\").Age, \n             df_Medal_tabletannis.query(\"Sex=='M'\").Age, center='mean')","76ec4341":"stats.ttest_ind(df_Medal_tabletannis.query(\"Sex=='F'\").Age,\n                df_Medal_tabletannis.query(\"Sex=='M'\").Age, equal_var = True)","b065bbae":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=df_Medal_tabletannis.query(\"Sex=='F'\").Age, name='Female'))\nfig.add_trace(go.Histogram(x=df_Medal_tabletannis.query(\"Sex=='M'\").Age, name='Male'))\n\n# Overlay both histograms\nfig.update_layout(barmode='overlay',\n                 title_text=\"Table Tennis Medal Winners' Age Distribution\")\n# Reduce opacity to see both histograms\nfig.update_traces(opacity=0.75)\nfig.show()","92123216":"### Sex Analysis","63e920f4":"**Conclusion:** Since the p-value is LESS than alpha value 0.05, we **reject the null hypothesis** as there is enough proof that there is a difference in heights between male and female Gymnastics medal winners. ","8021b787":"### Question #2. Is There a Difference Between Male and Female Table Tennis Athletes' Age When They Won a Medal?\n**Test Statistic:** Mean ages of male and female Table Tennis medal winners.      \n**Null Hypothesis $H_0$:** there is no difference in medal winning ages between male and females.    \n**Alternative Hypothesis $H_1$:** there is a difference in medal winning ages between male and females.    \n**Use \u03b1 = 0.05**","fbe778fc":"#### Dominant Event of USA, CHN and RUS in Summer Olympic Games","7cde2096":"## EDA and Data Visualization","10618b25":"### Question #1. Is There a Difference Between Heights of Male and Female Gymnastics Athletes Who Won a Medal?\n**Test Statistic:** Mean heights of male and female Gymnastics medal winners.      \n**Null Hypothesis $H_0$:** there is no difference in heights between male and female Gymnastics medal winners.    \n**Alternative Hypothesis $H_1$:** there is a difference in heights between male and female Gymnastics medal winners.    \n**Use \u03b1 = 0.05**","0443a894":"### Last 30 Years's Nations' Medal Analysis","32463d3d":"No Olympic Games have be hold in during World War II (1940 and 1944).   \nSummer Olympic Games in 1900 is the first Olympic Games that female athletes attended. The M\/F athletes ratio in Summer Olympic Games reduced from 156:1 in 1906 to 1.19:1 in 2016.     \nThe Winter Olympic Games started been hold from 1924, the M\/F athletes ratio of that game is 26:1, and it is reduced to 1.42:1 in 2014.","3627618a":"#### Dominant Event of GER, USA, NOR and CAN in Winter Olympic Games","918571fc":"**Conclusion:** Since the p-value is GREATER than alpha value 0.05, we cannot reject the null hypothesis, so there is enough proof that there is **no difference** in heights between male and female Gymnastics medal winners. ","b10c3572":"### Nation and Sports Analysis","29cae5b0":"### Athletes' Medal Analysis","48922d88":"Since p-value in LeveneResult is less than the 0.05, we reject the null hypothesis that the variance is equal, which is, we use `equal_var = False` in `stats.ttest_ind()`","93c849e3":"## Hypothesis Testing\nThis section will discuss the age and height effect an athlete winning a medal.","7f2e4352":"## Loading Data and Check Null Values","cfd201f6":"Since p-value in LeveneResult is greater than the 0.05, we reject the null hypothesis that the variance is equal, which is, we use `equal_var = True` in `stats.ttest_ind()`"}}