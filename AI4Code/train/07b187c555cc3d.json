{"cell_type":{"5b6b8d00":"code","57454f9e":"code","2e72227a":"code","136e8fef":"code","9f836432":"code","06aefd7f":"code","e346b956":"code","242839c6":"code","69653f97":"markdown","187a9ff6":"markdown"},"source":{"5b6b8d00":"import numpy as np \nimport pandas as pd \nimport scipy as sp \nimport matplotlib.pyplot as plt \nfrom matplotlib import animation, rc\nimport cv2 \nfrom PIL import Image \n\nfrom sklearn.metrics.pairwise import cosine_similarity","57454f9e":"train = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/train.csv\")\ntest = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/test.csv\")\ntrain.head()","2e72227a":"\nuse_col = ['Subject Focus', 'Eyes', 'Face', 'Near', 'Action', 'Accessory',\n       'Group', 'Collage', 'Human', 'Occlusion', 'Info', 'Blur']\n\n\ntrain[\"img_file\"] = [f\"..\/input\/petfinder-pawpularity-score\/train\/{f}.jpg\" for f in train.Id.to_list()]\ntest[\"img_file\"] = [f\"..\/input\/petfinder-pawpularity-score\/test\/{f}.jpg\" for f in test.Id.to_list()]\n\ntrain_feature = train.groupby(\"Id\").max().loc[:, use_col]\ntest_feature = test.groupby(\"Id\").max().loc[:, use_col]\n\ntrain_feature.head()","136e8fef":"\n'''\nIt is necessary to align the feature units of the data in advance.\n\ncolumns: train.Id \nindex: test.Id\n\n'''\n\nlast_train_index = train_feature.shape[0]\ndf = pd.concat([train_feature, test_feature])\n\ndf_sparse = sp.sparse.csr_matrix(df.values)\ndf_sparse = cosine_similarity(df_sparse)\ndf_sparse = pd.DataFrame(df_sparse, columns=df.index, index=df.index)\ndf_sparse = df_sparse.iloc[:last_train_index, last_train_index:]\n\ndf_sparse.head()","9f836432":"\n'''\nSet up some functions and animations for similarity search.\nHere, the top 10 images from the similarity \nof annotation data are displayed frame by frame.\n'''\n\n\nrc('animation', html='jshtml')\n\ndef find_similar_train_id(test_id, n=10):\n    similar_train_id = df_sparse[test_id].sort_values(ascending=False)[:n]\n    return pd.DataFrame({\"similar\": similar_train_id.values}, index=similar_train_id.index)\n\n\ndef decode_img(img_f):\n    img = cv2.imread(img_f)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = cv2.resize(img, (224, 224))\n    return img \n\n\ndef create_animation(ims, ids):\n    fig = plt.figure(figsize=(6, 6))\n    plt.axis(\"off\")\n    plt.title(f\"test_id={ids}\", c=\"r\")\n    im = plt.imshow(ims[0])\n    \n    def animate_f(i):\n        im.set_array(ims[i])\n        return [im]\n    return animation.FuncAnimation(fig, animate_f, frames=len(ims), interval=1000)\n\n\ndef find_similar_animation(test_id):\n    sim_df = find_similar_train_id(test_id)\n    train_imgs = []\n    for sim in sim_df.index.to_list():\n        train_img_f = train.loc[train.Id == sim, \"img_file\"].values[0]\n        train_imgs.append(decode_img(train_img_f))\n    return train_imgs\n\n\ndef find_similar_score(test_id):\n    sim_df = find_similar_train_id(test_id, 1)\n    score = train.loc[train.Id == sim_df.index.values[0], \"Pawpularity\"].values[0]\n    return score \n    ","06aefd7f":"random_test_id = np.random.choice(test.Id.to_list(), 2)\n\nfind_similar_train_id(random_test_id[0]).style.background_gradient(cmap=\"Blues\")","e346b956":"a = find_similar_animation(random_test_id[0])\ncreate_animation(a, random_test_id[0])","242839c6":"\n'''\nApply from similarity search to test data.\n'''\n\nsimilar_list = []\nfor test_id in test.Id.to_list():\n    similar_score = find_similar_score(test_id)\n    similar_list.append(similar_score)\n    \nsub = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/sample_submission.csv\")\nsub[\"Pawpularity\"] = similar_list \nsub.to_csv(\"submission.csv\", index=False)\n","69653f97":"# A simple Submission ","187a9ff6":"# Search for "}}