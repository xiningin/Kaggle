{"cell_type":{"41f6f90f":"code","da4945f0":"code","1961076b":"code","4f9e07cf":"code","200af174":"code","0d65d640":"code","043091a0":"code","7d821ae3":"code","df39ed97":"code","cf78b986":"code","af3184e3":"code","6a15ae36":"code","7b9bdf95":"code","db382bae":"markdown","93b53965":"markdown","f131c76d":"markdown"},"source":{"41f6f90f":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom sklearn import datasets","da4945f0":"# First of all we have to define activation function\n\ndef activation_function(z): \n    return(np.where(z >= 0, 1, 0))","1961076b":"# Let's implement the algorithm:\n\ndef perceptron(X, y, learning_rate = 0.01, n_epochs = 100):\n    n_row, n_col = X.shape\n    \n    \n    # initialize parameter\n    weights = np.zeros(n_col)\n    bais = 0\n    \n    \n    for i in range(n_epochs):\n        for idx_i, xi in enumerate(X):\n            linear_sum = np.dot(xi, weights) + bais\n            y_pred = activation_function(linear_sum)\n            \n            # update parameters\n            update = learning_rate * (y[idx_i] - y_pred)\n            weights = weights + (update * xi)\n            bais +=  update\n    return(weights, bais)","4f9e07cf":"# Create Synthetic Dataset\n\nfeatures, target = datasets.make_blobs(n_samples = [50, 50], \n                                       n_features = 2, \n                                       centers = [(3, 3), (6, 6)], \n                                       cluster_std = 0.5, random_state = 123)\n","200af174":"features[:5]","0d65d640":"target","043091a0":"# Plot Our Data\ncdict = {0: 'green', 1: 'pink'}\nplt.figure(figsize = (4, 4))\nfor i in np.unique(target):\n    indices = np.where(target == i)\n    plt.scatter(x = features[indices, 0], y = features[indices, 1], c = cdict[i], \n                label = i, marker = \"o\", alpha = 1)\nplt.legend()","7d821ae3":"# Note that: Rosenblat Algorithm only obtain the exact answer which can separate our dataset with a line or a hyperplane\n# In this case, our dataset is separable\n\n# Let's apply our algorithm to the dataset and calculate Weights\n\nW, b = perceptron(features, target, learning_rate = 0.014, n_epochs = 100)","df39ed97":"W","cf78b986":"b","af3184e3":"# We can predict our model and relize that our model how well is fitted.\n# predictiction function\ndef predict(w, b, X):\n    return(activation_function(np.dot(X, W) + b))\n\n\ny_pred = predict(W, b, features)\ny_pred","6a15ae36":"# We can calculate the accuracy of model\nnp.sum(y_pred == target)\n# we got 100% accuracy","7b9bdf95":"#Plot Data\ncdict = {0: 'red', 1: 'blue'}\nplt.figure(figsize = (6, 6))\nfor i in np.unique(target):\n    indices = np.where(target == i)\n    plt.scatter(x = features[indices, 0], y = features[indices, 1], c = cdict[i], label = i,\n                marker = \"o\", alpha = 0.7)\nplt.legend()\n\n#Plot the Classifier\nx1p = np.linspace(features.min() - 1, features.max() + 1, 100)\nx2p = (W[0] * x1p + b) \/ - W[1]\nplt.plot(x1p, x2p, 'k')\nplt.xlim(features.min() - 1, features.max() + 1)\nplt.ylim(features.min() - 1, features.max() + 1)\n\n#Plot Regions\nx1, x2 = np.meshgrid(np.linspace(features.min() - 1, features.max() + 1, 100), \n                     np.linspace(features.min() - 1, features.max() + 1, 100))\ngrids = np.array((x1.ravel(), x2.ravel())).T\nregion_color = predict(w = W, b = b, X = grids)\nregion_color = region_color.reshape(100, 100)\nplt.contourf(x1, x2, region_color, alpha = 0.1, levels = [0, 0.5, 1], colors = ['red', 'blue'])","db382bae":"Rosenblatt's Algorithm: \n * intialize Wi's with a small random number or set it to zero\n * step two: for each observation: \n        for each input and weight predict the output(y_hat)\n        based on below formula update the each weight\n            wi = lr*(yi_ture - yi_hat) * xi","93b53965":"In This notebook, I want to introduce you to the first algorithm in the deep learning domain, which called Rosenblatt's Perceptron","f131c76d":"#### The first version of perceptron \n\n\n![the first version of perceptron.PNG](attachment:a6140d1d-8e17-42ef-a2c6-c3a2d73787d0.PNG)\n\n#### Ok, in this notebook we want to implement the Rosenblatt perceptron from scratch"}}