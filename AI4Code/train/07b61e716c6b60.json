{"cell_type":{"2539e15c":"code","c2359bce":"code","da095dd3":"code","fe264e2d":"code","2bdd35ad":"code","863c0d77":"code","dcfbebc6":"code","4cce9bf4":"code","f3a12320":"code","9c504f3e":"code","06691dbf":"markdown","5c662a12":"markdown","256a6243":"markdown","9c1a31bd":"markdown","24b45769":"markdown","5a1e78fa":"markdown","a6152e86":"markdown","ceeaaa1c":"markdown"},"source":{"2539e15c":"from sklearn.datasets import load_iris\n\niris = load_iris()","c2359bce":"from sklearn.ensemble import RandomForestClassifier\n\n# Limit max depth\nmodel = RandomForestClassifier(max_depth = 3, n_estimators=10)\n\n# Train\nmodel.fit(iris.data, iris.target)\n# Extract single tree\nestimator_limited = model.estimators_[5]\nestimator_limited","da095dd3":"# No max depth\nmodel = RandomForestClassifier(max_depth = None, n_estimators=10)\nmodel.fit(iris.data, iris.target)\nestimator_nonlimited = model.estimators_[5]","fe264e2d":"from sklearn.tree import export_graphviz\nexport_graphviz(estimator_limited, out_file='tree_limited.dot', feature_names = iris.feature_names,\n                class_names = iris.target_names,\n                rounded = True, proportion = False, precision = 2, filled = True)","2bdd35ad":"export_graphviz(estimator_nonlimited, out_file='tree_nonlimited.dot', feature_names = iris.feature_names,\n                class_names = iris.target_names,\n                rounded = True, proportion = False, precision = 2, filled = True)","863c0d77":"!dot -Tpng tree_limited.dot -o tree_limited.png -Gdpi=600","dcfbebc6":"from IPython.display import Image\nImage(filename = 'tree_limited.png')","4cce9bf4":"!dot -Tpng tree_nonlimited.dot -o tree_nonlimited.png -Gdpi=600","f3a12320":"Image(filename = 'tree_nonlimited.png')","9c504f3e":"from sklearn.datasets import load_iris\niris = load_iris()\n\n# Model (can also use single decision tree)\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=10)\n\n# Train\nmodel.fit(iris.data, iris.target)\n# Extract single tree\nestimator = model.estimators_[5]\n\nfrom sklearn.tree import export_graphviz\n# Export as dot file\nexport_graphviz(estimator, out_file='tree.dot', \n                feature_names = iris.feature_names,\n                class_names = iris.target_names,\n                rounded = True, proportion = False, \n                precision = 2, filled = True)\n\n# Convert to png\nfrom subprocess import call\ncall(['dot', '-Tpng', 'tree.dot', '-o', 'tree.png', '-Gdpi=600'])\n\n# Display in python\nimport matplotlib.pyplot as plt\nplt.figure(figsize = (14, 18))\nplt.imshow(plt.imread('tree.png'))\nplt.axis('off');\nplt.show();","06691dbf":"# Model: Random Forest Classifier\n\nWe'll create two version, one where the maximum depth is limited to 3 and another where the max depth is unlimited. (You could use a single decision tree for this as well, it's just that I often use a random forest for modeling.","5c662a12":"The no max depth version of the tree can be rather unwiedly if you are using a large tree (usually occurs with a lot of features).","256a6243":"## Convert to png from the command line\n\nUse the `dot` utility (may need to install on your computer). You can change the options, but the only one I have altered is the dots per inch (resolution)","9c1a31bd":"# Introduction: How to Visualize a Decision Tree in Python using Scikit-Learn\n\nThe title is pretty self explantory! ","24b45769":"## Export Tree as .dot File\n\nUse the `export_graphviz` functionality in scikit-learn. Format the decision tree however you like: I suggest trying a few different options.","5a1e78fa":"# Conclusions\n\nVisualizing a single decision tree can help give us an idea of how an entire random forest makes predictions: it's not random, but rather an ordered logical sequence of steps. I would go so far as to say this is how a human reasons: a flowchart of questions and answers. Feel free to use and adapt this code as required.\n\nBest,\n\nWill","a6152e86":"# Full Script (using call instead of ! for system commands)\n\nThis can be directly copied and pasted into Python and run (it looks better in a Jupyter Notebook)","ceeaaa1c":"### Data: Good Old Iris Dataset\n\nThe data does not matter for this example, feel free to use your own."}}