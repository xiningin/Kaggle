{"cell_type":{"2b1930e5":"code","cb12bee1":"code","918320dd":"code","c8353fd6":"code","d1fb6e39":"code","c83d1117":"code","bfbf5e1b":"code","52d8955a":"code","ff8bc554":"code","46092455":"code","2686e5bf":"code","0d6bfdf4":"code","8c48e195":"code","831724cb":"code","196a9850":"code","5f317130":"code","145437ac":"code","85a17168":"code","d275bd5f":"code","b8a8281c":"code","c2f28aab":"code","2419dc04":"code","161bec8c":"code","2996a1d7":"code","0b08bd6e":"code","f0374934":"code","6f7aea5d":"code","b389edd5":"code","bd8945e6":"code","cb04e9af":"code","7c19b676":"code","036c71d7":"code","5c15b9c6":"code","14bb196a":"code","b9abef09":"markdown","4a0ac7f0":"markdown","fcec6492":"markdown"},"source":{"2b1930e5":"\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n%matplotlib inline","cb12bee1":"df = pd.read_csv('..\/input\/noshowappointments\/KaggleV2-May-2016.csv')\ndf['OUTPUT_LABEL'] = (df['No-show'] == 'Yes').astype('int')","918320dd":"def calc_prevalence(y):\n#     print(sum(y))\n#     print(len(y))\n    return (sum(y)\/len(y))","c8353fd6":"print(calc_prevalence(df['OUTPUT_LABEL'].values))","d1fb6e39":"df['OUTPUT_LABEL'].value_counts().plot(kind='bar')","c83d1117":"df['ScheduledDay'] = pd.to_datetime(df['ScheduledDay'], format = '%Y-%m-%dT%H:%M:%SZ', errors = 'coerce')\ndf['AppointmentDay'] = pd.to_datetime(df['AppointmentDay'], format = '%Y-%m-%dT%H:%M:%SZ', errors = 'coerce')","bfbf5e1b":"assert df.ScheduledDay.isnull().sum() == 0, 'missing ScheduledDay dates'\nassert df.AppointmentDay.isnull().sum() == 0, 'missing AppointmentDay dates'","52d8955a":"df['ScheduledDay'].head()","ff8bc554":"(df['ScheduledDay'] > df['AppointmentDay']).sum()","46092455":"df['AppointmentDay'].head()","2686e5bf":"df['AppointmentDay'] = df['AppointmentDay'] + pd.Timedelta('1d') - pd.Timedelta('1s')","0d6bfdf4":"df['AppointmentDay'].head()","8c48e195":"(df['ScheduledDay'] > df['AppointmentDay']).sum()","831724cb":"df = df.loc[(df['ScheduledDay'] <= df['AppointmentDay'])].copy()","196a9850":"(df['ScheduledDay'] > df['AppointmentDay']).sum()","5f317130":"df['ScheduledDay_year'] = df['ScheduledDay'].dt.year\ndf['ScheduledDay_month'] = df['ScheduledDay'].dt.month\ndf['ScheduledDay_week'] = df['ScheduledDay'].dt.week\ndf['ScheduledDay_day'] = df['ScheduledDay'].dt.day\ndf['ScheduledDay_hour'] = df['ScheduledDay'].dt.hour\ndf['ScheduledDay_minute'] = df['ScheduledDay'].dt.minute\ndf['ScheduledDay_dayofweek'] = df['ScheduledDay'].dt.dayofweek\n\ndf['AppointmentDay_year'] = df['AppointmentDay'].dt.year\ndf['AppointmentDay_month'] = df['AppointmentDay'].dt.month\ndf['AppointmentDay_week'] = df['AppointmentDay'].dt.week\ndf['AppointmentDay_day'] = df['AppointmentDay'].dt.day\ndf['AppointmentDay_hour'] = df['AppointmentDay'].dt.hour\ndf['AppointmentDay_minute'] = df['AppointmentDay'].dt.minute\ndf['AppointmentDay_dayofweek'] = df['AppointmentDay'].dt.dayofweek","145437ac":"df[['ScheduledDay','ScheduledDay_year','ScheduledDay_month','ScheduledDay_week','ScheduledDay_day',\n   'ScheduledDay_hour','ScheduledDay_minute','ScheduledDay_dayofweek']].head()","85a17168":"print(df.groupby('AppointmentDay_year').size(), end=\"\\n\\n\")\nprint(df.groupby('ScheduledDay_year').size())","d275bd5f":"print(df.groupby('AppointmentDay_month').size(), end='\\n\\n')\nprint(df.groupby('ScheduledDay_month').size())","b8a8281c":"print(df.groupby('AppointmentDay_dayofweek').size(), end='\\n\\n')\nprint(df.groupby('ScheduledDay_dayofweek').size())","c2f28aab":"df.groupby('AppointmentDay_dayofweek').apply(lambda g: calc_prevalence(g.OUTPUT_LABEL.values))","2419dc04":"df.groupby('ScheduledDay_dayofweek').apply(lambda g: calc_prevalence(g.OUTPUT_LABEL.values))","161bec8c":"df['delta_days'] = (df['AppointmentDay']-df['ScheduledDay']).dt.total_seconds()\/(60*60*24)","2996a1d7":"print(df[['ScheduledDay', 'AppointmentDay', 'delta_days']].head())\nprint(df[['ScheduledDay', 'AppointmentDay', 'delta_days']].tail())","0b08bd6e":"plt.hist(df.loc[df.OUTPUT_LABEL == 1,'delta_days'], color='red',\n         label = 'Missed',bins = range(0,60,1), density = True)\nplt.hist(df.loc[df.OUTPUT_LABEL == 0,'delta_days'], color='blue',\n         label = 'Not Missed',bins = range(0,60,1), density = True,alpha =0.5)\nplt.legend()\nplt.xlabel('days until appointment')\nplt.ylabel('normed distribution')\nplt.xlim(0,40)","f0374934":"# shuffle the samples\ndf = df.sample(n = len(df), random_state = 42)\ndf = df.reset_index(drop = True)\ndf_valid = df.sample(frac = 0.3, random_state = 42)\ndf_train = df.drop(df_valid.index)","6f7aea5d":"print('Valid prevalence(n = %d):%.3f'%(len(df_valid),calc_prevalence(df_valid.OUTPUT_LABEL.values)))\nprint('Train prevalence(n = %d):%.3f'%(len(df_train),calc_prevalence(df_train.OUTPUT_LABEL.values)))","b389edd5":"col2use = ['ScheduledDay_day','ScheduledDay_hour',\n           'ScheduledDay_minute','ScheduledDay_dayofweek',\n           'AppointmentDay_day','AppointmentDay_dayofweek',\n           'delta_days']","bd8945e6":"X_train = df_train[col2use].values\nX_valid = df_valid[col2use].values\ny_train = df_train['OUTPUT_LABEL'].values\ny_valid = df_valid['OUTPUT_LABEL'].values\nprint('Training shapes:',X_train.shape, y_train.shape)\nprint('Validation shapes:',X_valid.shape, y_valid.shape)","cb04e9af":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(max_depth = 5, n_estimators=100, random_state = 42)\nrf.fit(X_train, y_train)","7c19b676":"y_train_preds = rf.predict_proba(X_train)[:,1]\ny_valid_preds = rf.predict_proba(X_valid)[:,1]","036c71d7":"from sklearn.metrics import roc_auc_score, accuracy_score, precision_score, recall_score\ndef calc_specificity(y_actual, y_pred, thresh):\n # calculates specificity\n return sum((y_pred < thresh) & (y_actual == 0)) \/sum(y_actual ==0)\ndef print_report(y_actual, y_pred, thresh):\n \n auc = roc_auc_score(y_actual, y_pred)\n accuracy = accuracy_score(y_actual, (y_pred > thresh))\n recall = recall_score(y_actual, (y_pred > thresh))\n precision = precision_score(y_actual, (y_pred > thresh))\n specificity = calc_specificity(y_actual, y_pred, thresh)\n print('AUC:%.3f'%auc)\n print('accuracy:%.3f'%accuracy)\n print('recall:%.3f'%recall)\n print('precision:%.3f'%precision)\n print('specificity:%.3f'%specificity)\n print('prevalence:%.3f'%calc_prevalence(y_actual))\n print(' ')\n return auc, accuracy, recall, precision, specificity","5c15b9c6":"print('Traing: ')\nprint_report(y_train, y_train_preds, 0.201)\nprint('Validation')\nprint_report(y_valid, y_valid_preds, 0.201)","14bb196a":"from sklearn.metrics import roc_curve\n\nfpr_train, tpr_train, thresholds_train = roc_curve(y_train, y_train_preds)\nauc_train = roc_auc_score(y_train, y_train_preds)\nfpr_valid, tpr_valid, thresholds_valid = roc_curve(y_valid, y_valid_preds)\nauc_valid = roc_auc_score(y_valid, y_valid_preds)\n\nplt.plot(fpr_train, tpr_train, 'r-',label ='Train AUC:%.3f'%auc_train)\nplt.plot(fpr_valid, tpr_valid, 'b-',label ='Valid AUC:%.3f'%auc_valid)\nplt.plot([0,1],[0,1],'k\u2014')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend()\nplt.show()","b9abef09":"# **Code from a [blog](https:\/\/towardsdatascience.com\/machine-learning-with-datetime-feature-engineering-predicting-healthcare-appointment-no-shows-5e4ca3a85f96) that I have read when I learned to handle datetime data.**","4a0ac7f0":"Change the *AppointmentDay* time to the end of the day","fcec6492":"New feature of the number of days between the scheduled date and the appointment date."}}