{"cell_type":{"65ea32c5":"code","a4caeb7c":"code","86294e58":"code","1492e8b5":"code","f2a57b09":"code","aaa28b87":"code","93212ed2":"code","c25b5950":"code","834d5975":"code","5248cd61":"code","f06e2feb":"code","8067badb":"code","2a51b698":"code","c738976a":"code","ee82111b":"code","c31ad9c1":"code","dd6dd412":"markdown","6f7a65e6":"markdown","c6397fdc":"markdown","9a5bd5a5":"markdown","93bd19c3":"markdown","406dbec2":"markdown","82a86e8e":"markdown","9e232387":"markdown","e47dae26":"markdown","10d21850":"markdown","6d88ab57":"markdown","da3bfd51":"markdown"},"source":{"65ea32c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a4caeb7c":"import fastai\nfrom fastai.vision.all import *\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom glob import glob\nfrom matplotlib import pyplot as plt","86294e58":"print(fastai.__version__)","1492e8b5":"paths = untar_data(URLs.PETS) \/'images'","f2a57b09":"file_names = get_image_files(paths)","aaa28b87":"def get_image_with_file_name(file):\n    img = PILImage.create(file)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    plt.title(file)","93212ed2":"get_image_with_file_name(file_names[0])","c25b5950":"get_image_with_file_name(file_names[1005])","834d5975":"def is_cat(x):\n  if(str(x).split(\"\/\")[-1].split(\"_\")[0][0].isupper()==True):\n    return \"Cat\"\n  else:\n    return \"Dog\"","5248cd61":"dls = ImageDataLoaders.from_name_func(\n    paths, get_image_files(paths), valid_pct=0.2, seed=42,\n    label_func=is_cat,item_tfms=Resize(224))","f06e2feb":"dls.show_batch()","8067badb":"learn = cnn_learner(dls, models.resnet34, metrics=error_rate)","2a51b698":"learn.fit_one_cycle(3)","c738976a":"def test_images(file):\n  img = PILImage.create(file)\n  pred,_,probs = learn.predict(img)\n  return pred,torch.max(probs).item()","ee82111b":"test_file_path = \"..\/input\/cat-or-dog-test\"\ntest_files = glob(test_file_path+\"\/*.jpg\")","c31ad9c1":"for i,file in enumerate(test_files):\n  fig = plt.Figure(figsize=(10,10))\n  plt.subplot(1,2,i+1)\n  img = PILImage.create(file)\n  img = img.resize((224,224))\n  plt.imshow(img)\n  plt.axis(\"off\")\n  preds,probs = test_images(file)\n  plt.title(\"Prediction : {} \\nProbability of {:.2f}\".format(preds,probs))","dd6dd412":"### 2.1.8 is a stable version and can be used. For lastest fastai version, check in https:\/\/pypi.org\/project\/fastai\/#history and do \n### !pip install fastai==version_number","6f7a65e6":"### In this step we actually fit the ImageDataLoaders with resnet34 (It is a pretrained model). We are not building the architecture of the model but we are calling the saved parameters of a pre-trained state of the art Neural Network for doing our Image Classification task.\n### Here we have considered error_rate as our metric.","c6397fdc":"### Upload different photos of dogs and cats and put this model to further test","9a5bd5a5":"### Showing the test images along with the predicted label and probability of prediction","93bd19c3":"### Let us see the files and how can we get the labels from the file name","406dbec2":"### Custom made function which returns prediction and the probability of prediction","82a86e8e":"### From the two images it is evident that the dog breeds are written in lower case letters while the cat breeds start with upper case letter. So we can make use of that logic to distinguish between dogs and cats in our dataset.","9e232387":"### show_batch() helps us to visulaize random images from our ImageDataLoaders","e47dae26":"### Getting the uploaded test images for prediction","10d21850":"### Creating the ImageDataLoader object (dls) which we would use to train our model. We would be using the function is_cat to get the label for our files. \n\n### valid_pct = 0.2 signify that 20% of the data would be reserved as validation set on which the model would not be trained but tested during evaluation.\n\n### item_tfms=Resize(224) would transform all the data into (224,224) size. It is necessary for all the images to be of the same dimension to get trained.","6d88ab57":"### This is the introductory project in fastai v2 course material.\n### In this project we would use images of dogs and cats to train a binary classifier to identify a given image as a dog or of a cat.\n### The most important thing that we should consider is that we have the correct version of fastai installed.\n### Otherwise you would not be able to use all the methods which are mentioned in the fastai v2 tutorial.","da3bfd51":"### After fitting just 3 cycles we have a really low error_rate.\n### Do use GPU while training the model otherwise it would take much time."}}