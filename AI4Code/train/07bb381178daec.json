{"cell_type":{"da929a52":"code","ea3fef69":"code","7833968e":"code","f1064265":"code","d4842fe0":"code","9a442e7b":"code","21db3a32":"code","eeffbf27":"code","659c1ebb":"code","f3e4190e":"code","f05e5288":"code","28341ac5":"code","c56433e4":"code","8c845ae2":"code","a00f57b2":"code","bf3eb9c3":"code","60fc9b25":"code","136ce140":"code","ef818b6c":"code","0b1d8cf7":"code","58ad5581":"code","d78e6c4e":"code","721ee402":"code","1df96313":"markdown"},"source":{"da929a52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea3fef69":"import numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_auc_score,roc_curve\nfrom sklearn.metrics import average_precision_score\n\nimport xgboost as xg\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report","7833968e":"train = pd.read_csv('..\/input\/santander-customer-transaction-prediction\/train.csv')\ntest  = pd.read_csv('..\/input\/santander-customer-transaction-prediction\/test.csv')","f1064265":"train.head(5)","d4842fe0":"train.info()","9a442e7b":"test.head(5)","21db3a32":"test.info()","eeffbf27":"def func(df):\n    a = df.isnull().sum()\n    b = df.count()\n    c = (a\/b) * 100\n    d = pd.DataFrame(a, columns = ['Missingvalue%'])\n    return d['Missingvalue%'].sum()","659c1ebb":"print('missing values in train data:', func(train))\nprint('missing values in test data:', func(test))\n\n#\u8f93\u51fa\u5224\u65ad\u65e0\u7f3a\u5931\u503c\uff0c\u4e0d\u7528\u505a\u6570\u636e\u6e05\u6d17","f3e4190e":"train.describe()","f05e5288":"test.describe()","28341ac5":"test_df = test\ntest_id_list = test_df.ID_code\ntest_df.drop(['ID_code'],axis=1,inplace=True)","c56433e4":"df = train\nprint(df[\"target\"].value_counts()\/df.shape[0])\nsns.countplot(\"target\", data = df)\n\n# \u7ed3\u8bba:\u6570\u636e\u9ad8\u5ea6\u4e0d\u5e73\u8861, target(Y) column value\u20191\u2018\u5360\u6bd410%","8c845ae2":"df.corr()","a00f57b2":"y = df[\"target\"]\nx = df.drop(columns=[\"target\", \"ID_code\"]).values","bf3eb9c3":"#model set\nx_train, x_test_val, y_train, y_test_val = train_test_split(x, y, test_size = 0.3, random_state = 100)","60fc9b25":"model = xg.XGBClassifier(objective ='binary:logistic', \n                         colsample_bytree = 0.3, \n                         learning_rate = 0.03,\n                         max_depth = 6,\n                         alpha = 10,\n                         n_estimators = 100,\n                         seed=100)\n\nmodel.fit(x_train,y_train)\nmodel.score(x_test_val,y_test_val)\n","136ce140":"#First optimization\nmodel_op1 = xg.XGBClassifier(objective ='binary:logistic', \n                             colsample_bytree = 0.8,\n                             colsample_bylevel=0.8,\n                             learning_rate = 0.1,\n                             max_depth = 5, \n                             alpha = 10, \n                             n_estimators = 100,\n                             subsample=0.8,\n                             gamma=0,\n                             scale_pos_weight=3,\n                             nthread=4,\n                             seed=100)\n\nmodel_op1.fit(x_train,y_train)\nmodel_op1.score(x_test_val,y_test_val)","ef818b6c":"#sec try  optimization\nmodel_op2 = xg.XGBClassifier(objective ='binary:logistic', \n                             colsample_bytree = 0.8,\n                             colsample_bylevel=0.8,\n                             learning_rate = 0.03,\n                             max_depth = 4, \n                             alpha = 1, \n                             n_estimators = 100,\n                             subsample=1,\n                             min_child_weight=1,\n                             scale_pos_weight=3,\n                             nthread=4,\n                             seed=100)\n\nmodel_op2.fit(x_train,y_train)\nmodel_op2.score(x_test_val,y_test_val)","0b1d8cf7":"# Last optimization\nclassifier = xg.XGBClassifier(n_thread = -1, tree_method='gpu_hist')\nparam_grid = {\n    \"n_estimators\" : np.arange(100, 500, 50),\n    \"max_depth\" : np.arange(3, 6, 1),\n    \"colsample_bytree\": np.arange(0.5,1, 0.1),\n    \"criterion\": [\"gini\",'entropy']\n}\nmodel3 = RandomizedSearchCV(estimator = classifier,\n                          param_distributions = param_grid,\n                          n_iter = 10,\n                          scoring = \"accuracy\",\n                          verbose = 10,\n                          n_jobs = -1,\n                          cv = 5)\nmodel3.fit(x_train, y_train)\nmodel3.best_score_","58ad5581":"print(model3.best_estimator_.get_params())","d78e6c4e":"accuracy_test = accuracy_score(y_test_val, model3.predict(x_test_val))\nprint(\"Accuracy on test %.2f%%\" % (accuracy_test * 100))","721ee402":"# submitting output\noutput_submission = pd.DataFrame(zip(test_id_list,model3.predict_proba(test_df)[:,1]), columns = ['ID_code','target'])\noutput_submission.to_csv('\/kaggle\/working\/output_submission.csv',index=False)","1df96313":"**XGBoost**"}}