{"cell_type":{"41c49291":"code","1c866738":"code","9b3bc5d0":"code","f5f95486":"code","ee5a88ff":"code","e3c2090f":"code","760a0bfa":"code","298858ea":"code","2e4b109f":"code","55abafce":"code","bf28ce01":"code","cb8ffbfe":"code","210435c5":"code","7a3cd181":"code","4de98217":"code","a2d8afb5":"code","69aaba43":"code","b032e90d":"code","e7adf0e2":"code","b551be0e":"code","8aaf4e22":"code","368f32ce":"code","99aafc75":"code","a32a367e":"code","351a044e":"code","9d382876":"code","c39db9d7":"code","e626bad0":"code","b42f9d12":"code","7fc0ffec":"code","e07a5b5b":"code","217caf0e":"code","04556904":"code","ad043c8c":"code","b4d9aa80":"code","ebf48535":"code","da6fb118":"code","1057cf74":"code","f66c7afd":"code","c6375bad":"code","23e7e817":"code","b6c0c31d":"code","2f7ee615":"code","d3a88968":"code","9a8ded46":"code","48f9a51b":"code","43f6f947":"code","e15e4c67":"code","604dd1b5":"code","72f2e563":"code","c7113af9":"code","25518e14":"code","b7262047":"code","0e4d0dc7":"code","7147ee77":"code","989958fd":"markdown","562c77c9":"markdown","ff4b7ed5":"markdown","5e1cd465":"markdown","a98a1910":"markdown","6172a36d":"markdown","fe01d004":"markdown","3cc43c82":"markdown","bff7289a":"markdown","f7596752":"markdown","016681ab":"markdown","2b5decfb":"markdown","dbda26c0":"markdown","c88ac482":"markdown","aae92360":"markdown","3421a1a5":"markdown","76d4fec4":"markdown","c1e4a6f8":"markdown","41e9f558":"markdown","6b09eddc":"markdown","42d803f5":"markdown","e7053829":"markdown","9de15fc3":"markdown","90dd599b":"markdown","15922e40":"markdown","c7392272":"markdown","a158e90c":"markdown","606c3f7c":"markdown","3bab7949":"markdown","ceaffc46":"markdown","f2443cb8":"markdown","dd43df84":"markdown","9b18c124":"markdown","bc89b1a4":"markdown","726dc8c2":"markdown","e760679a":"markdown","6f801456":"markdown","f93de424":"markdown","36f9ca28":"markdown","684bb360":"markdown","d94b9165":"markdown","d161e0a0":"markdown","df0f6ebe":"markdown","515fcdcb":"markdown","20f10baf":"markdown","e81c5df5":"markdown"},"source":{"41c49291":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nimport folium\nfrom folium.plugins import HeatMap","1c866738":"data = pd.read_csv('\/kaggle\/input\/top-spotify-songs-from-20102019-by-year\/top10s.csv', encoding='ISO-8859-1')\ndata.head()","9b3bc5d0":"data.shape","f5f95486":"data.describe()","ee5a88ff":"data.info()","e3c2090f":"data.count()","760a0bfa":"data = data.rename(columns={'top genre': 'top_genre'})\ndata = data.drop('Unnamed: 0', axis=1)\nprint(data.columns)","298858ea":"data.head(2)","2e4b109f":"data.corr()","55abafce":"plt.figure(figsize=(7, 6))\nsn.heatmap(data.corr(),\n            annot = True,\n            fmt = '.2f',\n            cmap='Blues')\nplt.title('Correlation between variables in the Spotify data set')\nplt.show()","bf28ce01":"\ndata.plot(x='acous',y='nrgy',kind='scatter', title='Relationship between Energy and Acousticness  ',color='r')\nplt.xlabel('Acousticness')\nplt.ylabel('Energy')\ndata.plot(x='nrgy',y='dB',kind='scatter', title='Relationship between Loudness (dB) and Energy',color='b')\nplt.xlabel('Energy')\nplt.ylabel('Loudness (dB)')\ndata.plot(x='val',y='dnce',kind='scatter', title='Relationship between Loudness (dB) and Valence',color='g')\nplt.xlabel('Valence')\nplt.ylabel('Loudness (dB)')","cb8ffbfe":"artists = data['artist'].unique()\nprint(\"The dataset has {} artists\".format (len(artists)))","210435c5":"artists = data['artist'].value_counts().reset_index().head(10)\nprint(artists)","7a3cd181":"plt.figure(figsize=(15,10))\nsn.barplot(x='index',y='artist', data=artists)\nplt.title(\"Number of Musics on top score by the 10 Top Artists\")","4de98217":"frames = []\ntopArtists = data['artist'].value_counts().head(10).index\nfor i in topArtists:\n     frames.append(data[data['artist'] == i])\n        \nresultArtist = pd.concat(frames)\nartistsYear = pd.crosstab(resultArtist[\"artist\"],resultArtist[\"year\"],margins=False)\nartistsYear","a2d8afb5":"plt.figure(figsize=(20,10))\nfor i in artists['index']:\n  tmp = []\n  for y in range(2010,2020):\n    songs = data[data['year'] == y][data['artist'] == i]\n    tmp.append(songs.shape[0])\n  sn.lineplot(x=list(range(2010,2020)),y=tmp)\nplt.legend(list(artists['index']))\nplt.title(\"Evolution of each Top 10 Artists throught the target Years\")","69aaba43":"data['artist'].value_counts().head(10).plot.pie(figsize=(8,8), autopct='%1.0f%%')","b032e90d":"data[data['artist'] == 'Lady Gaga'][data['year'] == 2018]","e7adf0e2":"data['title'].value_counts().head(20)>1","b551be0e":"plt.figure(figsize=(15,10))\nsn.countplot(y=data.title, order=pd.value_counts(data.title).iloc[:19].index, data=data)\ntopMusics = data['title'].value_counts().head(19).index\nplt.title(\"The Songs appear more than once\")\n\n","8aaf4e22":"plt.figure(figsize=(20,10))\nfor i in topMusics:\n  tmp = []\n  for y in range(2010,2020):\n    songs = data[data['year'] == y][data['title'] == i]\n    tmp.append(songs.shape[0])\n  sn.lineplot(x=list(range(2010,2020)),y=tmp)\nplt.legend(list(topMusics))\nplt.title(\"Evolution of each Top 10 Artists throught the target Years\")","368f32ce":"data[data['title']== 'Sugar']","99aafc75":"data.sort_values(by=['pop'], ascending=False).head(15)","a32a367e":"data.sort_values(by=['dur'], ascending=False).head(15)","351a044e":"data.sort_values(by=['acous'], ascending=False).head(15)","9d382876":"genres = data['top_genre'].value_counts().reset_index().head(10)","c39db9d7":"plt.figure(figsize=(23,10))\nsn.barplot(x='index',y='top_genre', data=genres)","e626bad0":"data['top_genre'].value_counts().head(10).plot.pie(figsize=(8,8), autopct='%1.0f%%')","b42f9d12":"plt.figure(figsize=(20,10))\nfor i in genres['index']:\n  tmp = []\n  for y in range(2010,2020):\n    songs = data[data['year'] == y][data['top_genre'] == i]\n    tmp.append(songs.shape[0])\n  sn.lineplot(x=list(range(2010,2020)),y=tmp)\nplt.legend(list(genres['index']))","7fc0ffec":"artists","e07a5b5b":"dicArtists = {\n    'Katy Perry':\"Santa Barbara\",\n    'Justin Bieber':\"London Canada\",\n     'Rihanna':\"Saint Michael\",\n    'Maroon 5':\"Los Angeles\",\n    'Lady Gaga':\"Manhattan\",\n    'Bruno Mars':\"Honolulu\", \n    'The Chainsmokers':\"Times Square\" ,\n    'Pitbull':\"Miami\",\n    'Shawn Mendes':\"Toronto\",\n    'Ed Sheeran':\"United Kingdom\", \n  }","217caf0e":"#!pip install folium\n!pip install geocoder","04556904":"import geocoder\nlistGeo = []\n\nfor value in (dicArtists.values()):\n    g = geocoder.arcgis(value)\n    listGeo.append(g.latlng)","ad043c8c":"top_genres =[]\nfor key in (dicArtists.keys()):\n    top_genres.append(data[data['artist']== key].top_genre.unique())\n","b4d9aa80":"lat = []\nlog = []\nfor i in listGeo:\n    lat.append(i[0])\n    log.append(i[1])","ebf48535":"colors = {\n 'dance pop': 'pink',\n 'pop': 'blue',\n 'barbadian pop': 'green',\n 'electropop': 'orange',\n 'canadian pop': 'red',\n}\n        ","da6fb118":"dfLocation = pd.DataFrame(columns=['Name','Lat','Log','Gen'])\ndfLocation['Name'] = artists['index']\ndfLocation['Gen']  = np.array(top_genres)\ndfLocation['Lat']  = lat\ndfLocation['Log']  = log\ndfLocation","1057cf74":"spotify = folium.Map(\n    location=[41.5503200,-8.4200500],# Coordenadas retiradas do Google Maps\n    zoom_start=2\n)\nspotify","f66c7afd":"for i in range(10):\n    singer = dfLocation.iloc[i]\n    folium.Marker(\n        \n        popup=singer['Name']+'-'+singer['Gen'],\n        location=[singer['Lat'], singer['Log']],\n    icon=folium.Icon(color=colors[singer['Gen']], icon='music')).add_to(spotify)\n    \nspotify","c6375bad":"spotify = folium.Map(\n    location=[41.5503200,-8.4200500],# Coordenadas retiradas do Google Maps\n    zoom_start=2\n)\n\nHeatMap(list(zip(lat, log))).add_to(spotify)\nspotify","23e7e817":"dic = {\n    'Katy Perry':\"Santa Barbara\",\n    'Justin Bieber':\"London Canada\",\n     'Rihanna':\"Saint Michael\",\n    'Maroon 5':\"Los Angeles\",\n    'Lady Gaga':\"Manhattan\",\n    'Bruno Mars':\"Honolulu\", \n    'The Chainsmokers':\"Times Square\" ,\n    'Pitbull':\"Miami\",\n    'Shawn Mendes':\"Toronto\",\n    'Ed Sheeran':\"United Kingdom\", \n    'Jennifer Lopez':'Castle Hill',\n    'Calvin Harris' :  'Dumfries',  \n    'Adele'  : 'Tottenham',\n    'Kesha'     :  'California',\n    'Justin Timberlake'   : 'Memphis' ,  \n    'David Guetta '      :'Paris',\n    'OneRepublic'       :'Colorado',\n    'Britney Spears '    : 'Mississippi',\n    'Ariana Grande '      :'Florida',\n    'Taylor Swift'       :'Pennsylvania',  \n  }\nlistGeo = []\nfor value in (dic.values()):\n    g = geocoder.arcgis(value)\n    listGeo.append(g.latlng)\n\nlat = []\nlog = []\nfor i in listGeo:\n    lat.append(i[0])\n    log.append(i[1])\n\nspotify = folium.Map(\n    location=[41.5503200,-8.4200500],# Coordenadas retiradas do Google Maps\n    zoom_start=2\n)\n\nHeatMap(list(zip(lat, log))).add_to(spotify)\nspotify","b6c0c31d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re, os\n%config IPCompleter.greedy=True","2f7ee615":"len(data['top_genre'].unique())","d3a88968":"from sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder","9a8ded46":"labelenconder = LabelEncoder()\ndata['title'] = labelenconder.fit_transform(data['title'].astype('str'))\ndata['artist'] = labelenconder.fit_transform(data['artist'].astype('str'))\ntarget = data['top_genre']","48f9a51b":"train = data.drop(columns=['top_genre'], axis=1) \ntrain.head()","43f6f947":"Sum_of_squared_distances = []\nstd = StandardScaler()\nstd.fit(train)\ndata_transformed = std.transform(train)\n\nK = range(1,60)\nfor i in K:\n    km = KMeans(n_clusters=i)\n    km.fit(data_transformed)\n    Sum_of_squared_distances.append(km.inertia_)","e15e4c67":"plt.plot(K, Sum_of_squared_distances, 'bx-')\nplt.xlabel('k')\nplt.ylabel('Sum_of_squared_distances')\nplt.title('Elbow Method For Optimal k')\nplt.show()","604dd1b5":"km = KMeans(n_clusters=2)\nkm.fit(train)\nkm.cluster_centers_","72f2e563":"def converter(cluster):\n    result = re.findall(\".*pop\",cluster)\n    if len(result) != 0:\n        return 1\n    else:\n        return 0","c7113af9":"data['is_pop'] = data['top_genre'].apply(converter)\ndata.head()","25518e14":"from sklearn.metrics import confusion_matrix, classification_report\nprint(confusion_matrix(data['is_pop'],km.labels_))\nprint(classification_report(data['is_pop'],km.labels_))","b7262047":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train,data['is_pop'],\n                                                    test_size=0.30)","0e4d0dc7":"km.fit(X_train,y_train)\nX_test.head()","7147ee77":"pred = km.predict(X_test)\nprint(\"Confusion Matrix \\n\")\nprint(confusion_matrix(y_test,pred))\nprint(\"\\n Metrics: \\n \\n\")\nprint(classification_report(y_test,pred))","989958fd":"   # 4. Where did the top 10 artists come from?","562c77c9":"# 2. Which songs appear more than once and other informations about songs?","ff4b7ed5":"#### Interessant :\nthis case is the song \"sugar\" of Maroon 5 that appear twice in the same year.","5e1cd465":"#### To check correlation between dataset's features","a98a1910":"# We try to use a grouping algorithm, K-means, to group the songs by genre according to their characteristics.","6172a36d":"# K Means Cluster Creation\n\nNow it is time to create the Cluster labels!\n\n** Import KMeans from SciKit Learn.**","fe01d004":"# Analysis of top songs 2010-2019 Spotify did by the team!\n\nThis analysis was made by 3 Informatics Engineers namely:\n\n1. [Filipe Monteiro](https:\/\/www.linkedin.com\/in\/pimonteiro\/)\n2. [Filipa Parente](https:\/\/www.linkedin.com\/in\/filipa-parente-54abb81a1\/)\n3. [Leonardo Silva](http:\/\/www.linkedin.com\/in\/leonardo-js\/)","3cc43c82":"## KMeans Model\n\nHowever, as we want to determine if a song is pop genre or not, we use value 2 on our model\nCreate an instance of K Means model with 2 clusters","bff7289a":"You can click on the music symbol and see information such as: artist name and genre.\nIn New York has two artists ","f7596752":"We will need coordinates, but we won't put hand on, because we will use the library to make it for us. We put one place and she gives coordinates.","016681ab":" #### We ask what the appear distribution each song along years of the dataset","2b5decfb":"#### Curiosity about songs: Top 15 songs by Acousticness:","dbda26c0":"**Some basical information from dataset**","c88ac482":"So we can avoid possible problems later on on the dataset, we will rename the column top genres to top_genres, as well as remove the Unnamed :0 column that correspondes to the index. At last, as the dataset as no NaN values, it is then ready for analysis.","aae92360":"#### Then, we apply the converter and we add a new column called 'is pop' ","3421a1a5":"#### Transform categorical variables into numerical variables","76d4fec4":"### Curiosities about songs: \n\n##### Top 15 songs by Popularity: \n\nConclusion that 2019 was a year with the most popular songs, with almost all songs being pop!","c1e4a6f8":"## Elbow Method\nIn order to get the best K to apply on our cluster, we'll apply Elbow Method","41e9f558":"## Evaluation\n\nNow let's define a converter that defines all pop genres (neo, canadian, etc.) as 1 and 0 for other genres","6b09eddc":"## Getting some info about the dataset","42d803f5":"##### Using elbow method to determine the best number of clusters, the best case rounds between 40 and 50.","e7053829":"Let's see the heat map with the top 20 artists","9de15fc3":"### plotting the globe graph with heat map","90dd599b":"\n # 1. Who are the ten artists with more music in the dataset?","15922e40":"**Dataset has 603 rows and 15 columns**","c7392272":"# 3. Which of the ten genders is more popular between the dataset?","a158e90c":"## KMeans Model with cross validation\nAnother approach is separate our dataset using train_test_split","606c3f7c":"**Information each features of dataset as mean, median, standard deviation and others.**","3bab7949":"#### Curiosity about songs: The Top 15 longer songs:","ceaffc46":"**Importing CSV**","f2443cb8":"### plotting the empty globe graph","dd43df84":"#### plotting the globe chart with the artists' origins","9b18c124":"### Conclusion about this question is:\n\nLooking into the previous graphs we see that Justin Bieber, even tho is on the top 10 artists with 16 songs he only got the placement thanks to a huge spike between 2014 and 2016, having the rest of the time between 0 and 2 popular songs. On a similar way, Lady Gaga also is a good target to analyse: starting strong in 2010-2011 with 3 to 5 songs making huge sucess, she lost her popularity until 2018-2019 where she got a huge increase on popular songs. This makes sense, since at the end of 2018 she became known for a song on the movie \"A Star is Born\":","bc89b1a4":"#### Now we create a confusion matrix and a classification report, in order to see how well the Kmeans clustering worked without any labels. ","726dc8c2":"#### This dataset has 50 genres. ","e760679a":"The features present correlactiones were:\n\n    -> Acous with NRGY  -0.56\n    -> Val   with DNCE   0.50\n    -> dB    with NRGY   0.54\n    \n**So we plotted some graphs for visualization relationship between this features**\n    ","6f801456":"![Alt Text](https:\/\/media.giphy.com\/media\/3ohs7JG6cq7EWesFcQ\/giphy.gif)","f93de424":"# Dataset analysis\n\nFor answer the analysis questions:","36f9ca28":"See the heat map with the top 10","684bb360":"## To work with dataset","d94b9165":"#### As we can observe this approach is equal than the other applied above, with bad accuracy (50%)\n\n#### From here we came to the conclusion that both approaches don't seem to be good to build a cluster of pop\/non pop songs ","d161e0a0":"##### Below we can observe the distribution of songs per year of each singer!","df0f6ebe":"#### We think about the question with analysis data were:\nHere we can see how pop music is popular in your generation. What if we looked back into the '80s, '90s, would we see a big difference? Type of songs per top artist.","515fcdcb":"## Importing necessary libraries","20f10baf":"#### From here we came to the conclusion that this model isn't a good cluster of pop\/non pop songs \n\n#### However, we can see that 80% of top songs are pop ones","e81c5df5":"#### The original idea was to take where is from the artist through the API, but we still can't do it!\nput hand on!"}}