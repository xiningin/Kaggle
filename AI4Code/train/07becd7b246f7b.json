{"cell_type":{"29ed6c32":"code","1c19ba93":"code","dfcfc2f2":"code","ff523f4d":"code","bb754a48":"code","76c7b076":"code","70324c12":"code","51c31949":"code","9df387bd":"markdown","e772833c":"markdown","f0aea6be":"markdown","4b1e9086":"markdown","47afa8d4":"markdown","1c4d0922":"markdown","862e28d7":"markdown"},"source":{"29ed6c32":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n#%matplotlib inline\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom pandas.plotting import autocorrelation_plot\nfrom statsmodels.tsa.stattools import acf\nfrom statsmodels.tsa.stattools import pacf\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import mean_squared_error\n\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX","1c19ba93":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ndf = pd.read_csv('..\/input\/electric-power-consumption-data-set\/household_power_consumption.txt', sep=';')","dfcfc2f2":"df['Date'] = df['Date'].astype(str)\ndf['Time'] = df['Time'].astype(str)\ndf.replace(['?', 'nan', np.nan], -1, inplace=True) \nnum_vars= ['Global_active_power', 'Global_reactive_power', 'Voltage', \n           'Global_intensity', 'Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3']\nfor i in num_vars:\n    df[i] = pd.to_numeric(df[i])\nimp = SimpleImputer(missing_values=-1, strategy='mean')\ndf[num_vars] = imp.fit_transform(df[num_vars])\n\ndf['exact_time'] = df['Date']+\";\"+df['Time']\ndf['exact_time_DT'] = pd.to_datetime(df['exact_time'],format=\"%d\/%m\/%Y;%H:%M:%S\")\ndata = df.drop(['Date', 'Time','exact_time'],axis = 1).sort_values(by=['exact_time_DT'])\ndf.head(10)","ff523f4d":"data = data.groupby(pd.Grouper(key='exact_time_DT',freq='SM')).sum()\n\ndata.head()","bb754a48":"plt.plot(data['Global_active_power'],linestyle = '-')\nplt.xticks(rotation=90)\nplt.title ('Global_active_power in Semi-Month Preiod')\nplt.legend()\nplt.show()","76c7b076":"skip_items = list()\ninclude_items = ['Global_active_power']#,'Global_reactive_power','Global_intensity','Sub_metering_1','Sub_metering_2','Sub_metering_3','other_power_consumption']\nfor i in data:\n    if i not in include_items:\n        continue\n    \n    series = data[i]\n    \n    test_series = series - series[0]\n    if test_series.sum() == 0:\n        continue\n        \n    ACF_Trend = acf(series)[:]\n    PACF_Trend = pacf(series,40)[:]\n\n    ACF_Trend_12 = acf(series)[::12]\n    PACF_Trend_12 = pacf(series,40)[::12]\n    \n    \n    fig, ax = plt.subplots(2)\n    ax[0].set_title('[ACF] ' + str(i))\n    ax[0].bar(range(ACF_Trend.size),ACF_Trend)\n    #ax[0].bar(range(PACF_Trend.size),PACF_Trend,color = 'green')\n    ax[1].set_title('[PACF] '+ str(i))\n    ax[1].bar(range(PACF_Trend.size),PACF_Trend,color = 'green')\n    #ax[2].set_title('Figure '+ str(i))\n    #ax[2].plot(range(series.size),series)\n\n    fig, ax = plt.subplots(2)\n    ax[0].set_title('[ACF] ' + str(i))\n    ax[0].bar(range(ACF_Trend_12.size),ACF_Trend_12)\n    #ax[0].bar(range(PACF_Trend.size),PACF_Trend,color = 'green')\n    ax[1].set_title('[PACF] '+ str(i))\n    ax[1].bar(range(PACF_Trend_12.size),PACF_Trend_12,color = 'green')\n    #ax[2].set_title('Figure '+ str(i))\n    #ax[2].plot(range(series.size),series)","70324c12":"\nX = data['Global_active_power']\n#Cut_size = int(len(X) * 0.1)\n#withdraw, series = X[0:Cut_size], X[Cut_size:len(X)]\n# fit model\n#model = ARIMA(series, order=(0,0,0))\n#model = ARIMA(series, order=(2,0,2))\n#model = SARIMAX(series,  order=(2,0,3),seasonal_order = (2,0,3,12))\nmodel = SARIMAX(X, order=(1,0,1),seasonal_order = (1,0,1,24))\nmodel_fit = model.fit()\n# summary of fit model\n\nprint(model_fit.summary())\nresiduals = pd.DataFrame(model_fit.resid)\nresiduals.plot()\nplt.show()\n\nresiduals.plot(kind='kde')\nplt.show()\n","51c31949":"\n# split into train and test sets\nX = data['Global_active_power']#.values\nsize = int(len(X) * 0.7)\nTest_size = len(X) - size\ntrain, test = X[0:size], X[size:len(X)]\n\n#model = ARIMA(history, order=(1,0,0))\nmodel = SARIMAX(train, order=(1,0,1),seasonal_order = (1,0,1,24))\nmodel_fit = model.fit()\nin_sample_forecast =model_fit.predict(start=2, end=size) #cut first value since it start value is 0\nout_sample_forecast = model_fit.get_forecast(Test_size+100, alpha = 0.4) #forecast on 100 period after\n\n#in Data Plot\nplt.plot(X[2:size])\nplt.plot(in_sample_forecast, color='red',linestyle='dashed')\nplt.show()\n\n#Forecast Plot\nplt.plot(X[size:len(X)])\nplt.plot(out_sample_forecast.predicted_mean, color='red',linestyle='dashed')\nplt.plot(out_sample_forecast.conf_int()['lower Global_active_power'], color='green',linestyle='dashed')\nplt.plot(out_sample_forecast.conf_int()['upper Global_active_power'], color='green',linestyle='dashed')\nplt.show()\n\n","9df387bd":"<b>Group Data in Semi-Month Data<\/b>","e772833c":"<b>ACF\/PACF review, Show Corelation base on time Preiod<\/b>","f0aea6be":"<b>That is, a simple forecast result base on SARIMA model<\/b>","4b1e9086":"<b>Simple plot in Global Active Power<\/b>","47afa8d4":"<b>Data Clearing\/Rearrange<\/b>","1c4d0922":"<b> PACF show sigificant Value on lag 1, and with ACF Plot show Preiod Trend, 24-period on ACF\/PACF is shown as well<\/b>\n\n<b>According from above result, suggest that p=q=1 with 24 seasonal as SARIMA model.<\/b>\n\n<b>Below is Summary preformance on SARIMA model in fiting the original Data<\/b>","862e28d7":"<u><b>Global_active_power 100 Semi-Month Forecast in SARIMA<\/b><\/u>"}}