{"cell_type":{"03f36274":"code","8740fe49":"code","1dbd38f0":"code","98a15144":"code","f2df93e8":"code","6b5ecb55":"code","0c76bf26":"code","ed13d0b7":"code","49e16444":"code","edf34c03":"code","bd03e64c":"code","d1a5a2c9":"code","09810276":"code","646d2fb5":"code","f734b98d":"code","57176305":"code","3df16dbf":"code","b2fe7e23":"code","df038448":"code","a0ef1bd8":"markdown","26bba067":"markdown","8014efdf":"markdown","b07258cc":"markdown","371bf3e7":"markdown","62b6746b":"markdown","d580c7cf":"markdown","9bb5012a":"markdown","af5171c4":"markdown","ed226fee":"markdown","eceff5c2":"markdown"},"source":{"03f36274":"import pandas as pd\nimport numpy as np","8740fe49":"df=pd.read_csv('..\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv')\ndf.head()","1dbd38f0":"df['Sentiment']=np.where(df['sentiment']=='positive',1,0)\ndf.drop('sentiment',axis=1,inplace=True)\ndf_copy=df","98a15144":"df.head()","f2df93e8":"df['review'][3]","6b5ecb55":"import re\ndef preprocess(text):\n    text = re.sub('<[^>]*>', '',text)\n    emoticons = re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', text)\n    text=re.sub('[\\W]+',' ',text.lower()) +\\\n       ' '.join(emoticons).replace('-','')    \n    return text","0c76bf26":"print('this is an example')\npreprocess('Hello world !!! :) :( . Wishing you a very good morning!!')","ed13d0b7":"df['review']=df['review'].apply(preprocess)","49e16444":"from nltk.stem.porter import PorterStemmer\n\nporter = PorterStemmer()","edf34c03":"def tokenizer_stem(text):\n    return [porter.stem(word) for word in text.split()]","bd03e64c":"from sklearn.feature_extraction.text import TfidfVectorizer \n\ntfidf=TfidfVectorizer(strip_accents=None,\n                     lowercase=False,\n                     preprocessor=None,\n                     tokenizer=tokenizer_stem,\n                     use_idf=True,\n                     norm='l2',\n                     smooth_idf=True)\n\ny=df.Sentiment.values\nX=tfidf.fit_transform(df.review)","d1a5a2c9":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=1)","09810276":"import pickle \nfrom sklearn.linear_model import LogisticRegressionCV\n\nclf= LogisticRegressionCV(cv=5,\n                         random_state=0,\n                         n_jobs=-1,\n                         verbose=3,\n                         max_iter=300).fit(X_train,y_train)\n\nsaved_model= open('saved_model1.sav', 'wb')\npickle.dump(clf,saved_model)\nsaved_model.close()\n","646d2fb5":"filename='saved_model1.sav'\nsaved_clf=pickle.load(open(filename,'rb'))","f734b98d":"saved_clf.score(X_test,y_test)","57176305":"from wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\nstopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='white',\n        stopwords=stopwords,\n        max_words=100,\n        max_font_size=40, \n        scale=3,\n        random_state=1 # chosen at random by flipping a coin; it was heads\n    ).generate(str(data))\n\n    fig = plt.figure(1, figsize=(12, 12))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()\n","3df16dbf":"positiveReview=df_copy[df_copy['Sentiment']==1]\nnegativeReview=df_copy[df_copy['Sentiment']==0]","b2fe7e23":"print('Bad review')\nshow_wordcloud(negativeReview['review'])","df038448":"print('Good review')\nshow_wordcloud(positiveReview['review'])","a0ef1bd8":"Saved the model by the name of 'saved_model1.sav' using pickle library.","26bba067":"# Model evaluation","8014efdf":"# tokenization of documents","b07258cc":"# Transforming text data into TF-IDF Vectors","371bf3e7":"# Creating World-Cloud for good and bad review","62b6746b":"# Data preparation","d580c7cf":"* Removed punctuations and html commands.\n* Transferred emoticons to the end of of the document.\n* Converted every text to lower case.","9bb5012a":"# **1.Importing data**\n","af5171c4":"# Document classification using Logistic regression","ed226fee":"**Accuracy of model on test set is about 90%.**","eceff5c2":"loaded the saved model."}}