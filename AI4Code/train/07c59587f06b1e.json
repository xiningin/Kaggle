{"cell_type":{"0ccb4c9e":"code","7e3ce71a":"code","bac5444c":"code","3c4bc01b":"code","376ccdd4":"code","844bc49d":"code","b7a2c856":"code","2328c197":"code","c2f60392":"code","c427f129":"code","6c3dd9b4":"code","f98843be":"code","8a3a6518":"code","8c29439b":"code","7edfe45a":"code","7f087ea6":"code","32d86188":"code","14611ba3":"code","eddce40b":"code","0b937f28":"code","983d0ac0":"markdown","cffb4e47":"markdown","a81ce423":"markdown","813e1d1f":"markdown","24155433":"markdown","599d08e0":"markdown","fac9673c":"markdown","6c2c746d":"markdown","642ca283":"markdown","b506ac56":"markdown","f59d4994":"markdown","b37ca566":"markdown","1ed9e395":"markdown","7caf1ca5":"markdown","1ba2a032":"markdown","c3e8fbdd":"markdown","1f14e83e":"markdown","bdda19d9":"markdown","4cc7ffb5":"markdown","bf1e210a":"markdown","d43fbe28":"markdown","397e4201":"markdown","88fb9917":"markdown","603de83a":"markdown","1b04cb85":"markdown","8eb5e362":"markdown","f21aa7aa":"markdown","1e4f5592":"markdown","e92f07b0":"markdown","6ea61374":"markdown","83cce26d":"markdown","91c8b608":"markdown","614d48e5":"markdown","e0f76c96":"markdown","48037f03":"markdown","18249330":"markdown","6ae74c43":"markdown","a65dce52":"markdown","00f3947f":"markdown","2027c582":"markdown"},"source":{"0ccb4c9e":"import numpy as np, pandas as pd\nimport matplotlib.pyplot as plt, seaborn as sns\nfrom tqdm import tqdm\nimport warnings\nwarnings.filterwarnings(\"ignore\")","7e3ce71a":"data = pd.read_csv(\"..\/input\/spotify-dataset-19212020-160k-tracks\/data.csv\")","bac5444c":"data.head()","3c4bc01b":"data.shape","376ccdd4":"data.isna().sum()","844bc49d":"viz_data = data.drop(columns=['id', 'name', 'artists', 'release_date', 'year'])\n\nplt.figure(figsize=(50, 50))\nfor i in tqdm(np.arange(1, len(viz_data.columns))):\n    plt.subplot(7, 2, i)\n    sns.barplot(x=data.year,y=viz_data[viz_data.columns[i]])\n    plt.xticks(rotation=45);\nplt.show()","b7a2c856":"plt.subplots(figsize=(12, 8))\nsns.heatmap(viz_data.corr(), annot=True, square=True)\nplt.show()","2328c197":"data.head(2)","c2f60392":"def normalize_column(col):\n    max_d = data[col].max()\n    min_d = data[col].min()\n    data[col] = (data[col] - min_d)\/(max_d - min_d)","c427f129":"num_types = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnum = data.select_dtypes(include=num_types)\n        \nfor col in num.columns:\n    normalize_column(col)","6c3dd9b4":"data.head(3)","f98843be":"from sklearn.cluster import KMeans\n\nkm = KMeans(n_clusters=10)\ncat = km.fit_predict(num)\ndata['cat'] = cat\nnormalize_column('cat')","8a3a6518":"data.cat[:10]","8c29439b":"caya=data[data.name=='Come As You Are']\ncaya.head(3)","7edfe45a":"class SpotifyRecommender():\n    def __init__(self, rec_data):\n        #our class should understand which data to work with\n        self.rec_data_ = rec_data\n    \n    #if we need to change data\n    def change_data(self, rec_data):\n        self.rec_data_ = rec_data\n    \n    #function which returns recommendations, we can also choose the amount of songs to be recommended\n    def get_recommendations(self, song_name, amount=1):\n        distances = []\n        #choosing the data for our song\n        song = self.rec_data_[(self.rec_data_.name.str.lower() == song_name.lower())].head(1).values[0]\n        #dropping the data with our song\n        res_data = self.rec_data_[self.rec_data_.name.str.lower() != song_name.lower()]\n        for r_song in tqdm(res_data.values):\n            dist = 0\n            for col in np.arange(len(res_data.columns)):\n                #indeces of non-numerical columns\n                if not col in [1, 6, 12, 14, 18]:\n                    #calculating the manhettan distances for each numerical feature\n                    dist = dist + np.absolute(float(song[col]) - float(r_song[col]))\n            distances.append(dist)\n        res_data['distance'] = distances\n        #sorting our data to be ascending by 'distance' feature\n        res_data = res_data.sort_values('distance')\n        columns = ['artists', 'name']\n        return res_data[columns][:amount]","7f087ea6":"recommender = SpotifyRecommender(data)","32d86188":"recommender.get_recommendations('come as you are', 5)","14611ba3":"recommender.get_recommendations('ace of spades', 5)","eddce40b":"recommender.get_recommendations('in da club', 5)","0b937f28":"recommender.get_recommendations('Red Roses (feat. Landon Cube)', 5)","983d0ac0":"Let's check if our data has any missing values.","cffb4e47":"Now, let's create a class which will make the recomendations for our songs.","a81ce423":"### Good luck!","813e1d1f":"Seems like results are pretty logical, as all the songs have pretty similar genre and the sounding.","24155433":"Seems like everything is fine, let's move on.","599d08e0":"Let's check the result.","fac9673c":"As we will use our data to calculate the distances between the songs and our feature's data veries, we will create a function to normalize it.","6c2c746d":"Now, we will vizualize our data, to understand, how music changed during the century.","642ca283":"Checking data's shape.","b506ac56":"Now, let's get all the numerical columns and normalize them.","f59d4994":"#### Lil Skies - Red Roses (feat. Landon Cube)","b37ca566":"And, as the result, we will choose the songs with the smallest distances.","1ed9e395":"#### Pearson Correlation","7caf1ca5":"That's why we will create a new feature, which would differ the songs from different groups.","1ba2a032":"Let's check if our data transformed correctly.","c3e8fbdd":"Checking if data loaded correctly.","1f14e83e":"Let's test our function on the other songs.","bdda19d9":"Let's check if any features correlates with each other.","4cc7ffb5":"There is a probability, that songs from the different genres could have quite similar characteristics, and that's not fine. ","bf1e210a":"Seems like recommender works pretty fine and gives us really accurate recommendations.","d43fbe28":"Our data has numeric features like acousticness, danceability, energy etc, we will use it to find the most similar songs for ours. ","397e4201":"### Feature Engineering","88fb9917":"As there could be many versions of the same song (example above), we will always take the oldest version.","603de83a":"#### Mot\u00f6rhead - Ace Of Spades ","1b04cb85":"#### 50 Cent - In Da Club","8eb5e362":"#### Correlation","f21aa7aa":"### Data Preprocessing","1e4f5592":"To find the difference among the songs, we will calculate the manhattan distance between all of them. ","e92f07b0":"There is no missing data, which is fine for us!","6ea61374":"Let's create the object of our SpotifyRecommender.","83cce26d":"### That's all. Thank you for reading this notebook, you can upvote it, if you find it useful!\n","91c8b608":"As we can see, loudness greatly correlates with energy\/accousticness and accousticness correlates with energy.","614d48e5":"### Data Loading","e0f76c96":"### Recommendation System","48037f03":"We will use KMeans clusterization with 10 clusters for this goal.","18249330":"Seems like everything worked fine.","6ae74c43":"#### Nirvana - Come As You Are","a65dce52":"### Exploratory Data Analisys","00f3947f":"For example, Nicki Minaj songs won't be an accurate recomendation for Slayer songs.","2027c582":"As can be seen from the plots, nowadays music became more energetic and popular. The loudness decreased and duration increased."}}