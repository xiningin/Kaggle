{"cell_type":{"4367f22f":"code","64386f8b":"code","e4565ec6":"code","f78b3bec":"code","fd8477a3":"code","a3d683ad":"code","9ea019dc":"code","3a0a355b":"code","a44696e7":"code","e470ae75":"code","731a43fe":"code","77f6b26d":"code","490f6711":"code","4a6bb5cf":"code","c2958cd3":"code","c1f0b4de":"code","283db9a4":"code","833a717d":"code","36a4771d":"code","e16f1b7c":"code","90f0db18":"code","3d2ef96d":"code","ba6335f2":"code","eab97606":"code","188cfa80":"markdown"},"source":{"4367f22f":"import numpy as np\nimport pandas as pd\nimport os\nimport copy\n\n%matplotlib inline\n\npd.options.display.precision = 15\nfrom collections import defaultdict\n\nimport time\nfrom collections import Counter\nimport datetime\n\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport eli5\nimport shap\n\nimport json\nimport altair as alt\n\n%matplotlib inline\nfrom typing import List\n\nimport os\nimport time\nimport datetime\nimport json\nimport gc\nfrom numba import jit\n\nfrom tqdm import tqdm_notebook\nfrom sklearn import metrics\nfrom typing import Any\nfrom itertools import product\npd.set_option('max_rows', 500)\nimport re\nfrom tqdm import tqdm\nfrom joblib import Parallel, delayed","64386f8b":"\"\"\"\nOriginal code by Andrew Lukyanenko https:\/\/www.kaggle.com\/artgor\/quick-and-dirty-regression\n\"\"\"\ndef add_datepart(df: pd.DataFrame, field_name: str,\n                 prefix: str = None, drop: bool = True, time: bool = True, date: bool = True):\n    \"\"\"\n    Helper function that adds columns relevant to a date in the column `field_name` of `df`.\n    from fastai: https:\/\/github.com\/fastai\/fastai\/blob\/master\/fastai\/tabular\/transform.py#L55\n    \"\"\"\n    field = df[field_name]\n    prefix = ifnone(prefix, re.sub('[Dd]ate$', '', field_name))\n    attr = ['Year', 'Month', 'Week', 'Day', 'Dayofweek', 'Is_month_end', 'Is_month_start']\n    if date:\n        attr.append('Date')\n    if time:\n        attr = attr + ['Hour', 'Minute']\n    for n in attr:\n        df[prefix + n] = getattr(field.dt, n.lower())\n    if drop:\n        df.drop(field_name, axis=1, inplace=True)\n    return df\n\n\ndef ifnone(a: Any, b: Any) -> Any:\n    \"\"\"`a` if `a` is not None, otherwise `b`.\n    from fastai: https:\/\/github.com\/fastai\/fastai\/blob\/master\/fastai\/core.py#L92\"\"\"\n    return b if a is None else a","e4565ec6":"\"\"\"\nOriginal code by Andrew Lukyanenko https:\/\/www.kaggle.com\/artgor\/quick-and-dirty-regression\n\"\"\"\nfrom sklearn.base import BaseEstimator, TransformerMixin\n@jit\ndef qwk(a1, a2):\n    \"\"\"\n    Source: https:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/114133#latest-660168\n\n    :param a1:\n    :param a2:\n    :param max_rat:\n    :return:\n    \"\"\"\n    max_rat = 3\n    a1 = np.asarray(a1, dtype=int)\n    a2 = np.asarray(a2, dtype=int)\n\n    hist1 = np.zeros((max_rat + 1, ))\n    hist2 = np.zeros((max_rat + 1, ))\n\n    o = 0\n    for k in range(a1.shape[0]):\n        i, j = a1[k], a2[k]\n        hist1[i] += 1\n        hist2[j] += 1\n        o +=  (i - j) * (i - j)\n\n    e = 0\n    for i in range(max_rat + 1):\n        for j in range(max_rat + 1):\n            e += hist1[i] * hist2[j] * (i - j) * (i - j)\n\n    e = e \/ a1.shape[0]\n\n    return 1 - o \/ e\n\n\ndef eval_qwk_lgb(y_true, y_pred):\n    \"\"\"\n    Fast cappa eval function for lgb.\n    \"\"\"\n\n    y_pred = y_pred.reshape(len(np.unique(y_true)), -1).argmax(axis=0)\n    return 'cappa', qwk(y_true, y_pred), True\n\n\ndef eval_qwk_lgb_regr(y_true, y_pred):\n    \"\"\"\n    Fast cappa eval function for lgb.\n    \"\"\"\n    y_pred[y_pred <= 1.12232214] = 0\n    y_pred[np.where(np.logical_and(y_pred > 1.12232214, y_pred <= 1.73925866))] = 1\n    y_pred[np.where(np.logical_and(y_pred > 1.73925866, y_pred <= 2.22506454))] = 2\n    y_pred[y_pred > 2.22506454] = 3\n\n    # y_pred = y_pred.reshape(len(np.unique(y_true)), -1).argmax(axis=0)\n\n    return 'cappa', qwk(y_true, y_pred), True","f78b3bec":"\"\"\"\nOriginal code by Andrew Lukyanenko https:\/\/www.kaggle.com\/artgor\/quick-and-dirty-regression\nand Bruno Aquino https:\/\/www.kaggle.com\/braquino\/890-features\n\"\"\"\ndef read_data():\n    print('Reading train.csv file....')\n    train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv')\n    print('Training.csv file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n\n    print('Reading test.csv file....')\n    test = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/test.csv')\n    print('Test.csv file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n\n    print('Reading train_labels.csv file....')\n    train_labels = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv')\n    print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n\n    print('Reading specs.csv file....')\n    specs = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/specs.csv')\n    print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n    print('Reading sample_submission.csv file....')\n    sample_submission = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')\n    print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))\n    return train, test, train_labels, specs, sample_submission\n\ndef encode_title(train, test, train_labels):\n    # encode title\n    train['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), train['title'], train['event_code']))\n    test['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), test['title'], test['event_code']))\n    all_title_event_code = list(set(train[\"title_event_code\"].unique()).union(test[\"title_event_code\"].unique()))\n    # make a list with all the unique 'titles' from the train and test set\n    list_of_user_activities = list(set(train['title'].unique()).union(set(test['title'].unique())))\n    # make a list with all the unique 'event_code' from the train and test set\n    list_of_event_code = list(set(train['event_code'].unique()).union(set(test['event_code'].unique())))\n    list_of_event_id = list(set(train['event_id'].unique()).union(set(test['event_id'].unique())))\n    # make a list with all the unique worlds from the train and test set\n    list_of_worlds = list(set(train['world'].unique()).union(set(test['world'].unique())))\n    # create a dictionary numerating the titles\n    activities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\n    activities_labels = dict(zip(np.arange(len(list_of_user_activities)), list_of_user_activities))\n    activities_world = dict(zip(list_of_worlds, np.arange(len(list_of_worlds))))\n    assess_titles = list(set(train[train['type'] == 'Assessment']['title'].value_counts().index).union(set(test[test['type'] == 'Assessment']['title'].value_counts().index)))\n    # replace the text titles with the number titles from the dict\n    train['title'] = train['title'].map(activities_map)\n    test['title'] = test['title'].map(activities_map)\n    train['world'] = train['world'].map(activities_world)\n    test['world'] = test['world'].map(activities_world)\n    train_labels['title'] = train_labels['title'].map(activities_map)\n    win_code = dict(zip(activities_map.values(), (4100*np.ones(len(activities_map))).astype('int')))\n    # then, it set one element, the 'Bird Measurer (Assessment)' as 4110, 10 more than the rest\n    win_code[activities_map['Bird Measurer (Assessment)']] = 4110\n    # convert text into datetime\n    train['timestamp'] = pd.to_datetime(train['timestamp'])\n    test['timestamp'] = pd.to_datetime(test['timestamp'])\n    \n    \n    return train, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code\n\ndef get_data(user_sample, test_set=False):\n    '''\n    The user_sample is a DataFrame from train or test where the only one \n    installation_id is filtered\n    And the test_set parameter is related with the labels processing, that is only requered\n    if test_set=False\n    '''\n    # Constants and parameters declaration\n    last_activity = 0\n    \n    user_activities_count = {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n    \n    # new features: time spent in each activity\n    last_session_time_sec = 0\n    accuracy_groups = {0:0, 1:0, 2:0, 3:0}\n    all_assessments = []\n    accumulated_accuracy_group = 0\n    accumulated_accuracy = 0\n    accumulated_correct_attempts = 0 \n    accumulated_uncorrect_attempts = 0\n    accumulated_actions = 0\n    counter = 0\n    time_first_activity = float(user_sample['timestamp'].values[0])\n    durations = []\n    last_accuracy_title = {'acc_' + title: -1 for title in assess_titles}\n    event_code_count: Dict[str, int] = {ev: 0 for ev in list_of_event_code}\n    event_id_count: Dict[str, int] = {eve: 0 for eve in list_of_event_id}\n    title_count: Dict[str, int] = {eve: 0 for eve in activities_labels.values()} \n    title_event_code_count: Dict[str, int] = {t_eve: 0 for t_eve in all_title_event_code}\n    \n    # itarates through each session of one instalation_id\n    for i, session in user_sample.groupby('game_session', sort=False):\n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n        \n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n        session_title_text = activities_labels[session_title]\n                    \n            \n        # for each assessment, and only this kind off session, the features below are processed\n        # and a register are generated\n        if (session_type == 'Assessment') & (test_set or len(session)>1):\n            # search for event_code 4100, that represents the assessments trial\n            all_attempts = session.query(f'event_code == {win_code[session_title]}')\n            # then, check the numbers of wins and the number of losses\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            # copy a dict to use as feature template, it's initialized with some itens: \n            # {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n            features = user_activities_count.copy()\n            features.update(last_accuracy_title.copy())\n            features.update(event_code_count.copy())\n            features.update(event_id_count.copy())\n            features.update(title_count.copy())\n            features.update(title_event_code_count.copy())\n            features.update(last_accuracy_title.copy())\n            \n            # get installation_id for aggregated features\n            features['installation_id'] = session['installation_id'].iloc[-1]\n            # add title as feature, remembering that title represents the name of the game\n            features['session_title'] = session['title'].iloc[0]\n            # the 4 lines below add the feature of the history of the trials of this player\n            # this is based on the all time attempts so far, at the moment of this assessment\n            features['accumulated_correct_attempts'] = accumulated_correct_attempts\n            features['accumulated_uncorrect_attempts'] = accumulated_uncorrect_attempts\n            accumulated_correct_attempts += true_attempts \n            accumulated_uncorrect_attempts += false_attempts\n            # the time spent in the app so far\n            if durations == []:\n                features['duration_mean'] = 0\n            else:\n                features['duration_mean'] = np.mean(durations)\n            durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            # the accurace is the all time wins divided by the all time attempts\n            features['accumulated_accuracy'] = accumulated_accuracy\/counter if counter > 0 else 0\n            accuracy = true_attempts\/(true_attempts+false_attempts) if (true_attempts+false_attempts) != 0 else 0\n            accumulated_accuracy += accuracy\n            last_accuracy_title['acc_' + session_title_text] = accuracy\n            # a feature of the current accuracy categorized\n            # it is a counter of how many times this player was in each accuracy group\n            if accuracy == 0:\n                features['accuracy_group'] = 0\n            elif accuracy == 1:\n                features['accuracy_group'] = 3\n            elif accuracy == 0.5:\n                features['accuracy_group'] = 2\n            else:\n                features['accuracy_group'] = 1\n            features.update(accuracy_groups)\n            accuracy_groups[features['accuracy_group']] += 1\n            # mean of the all accuracy groups of this player\n            features['accumulated_accuracy_group'] = accumulated_accuracy_group\/counter if counter > 0 else 0\n            accumulated_accuracy_group += features['accuracy_group']\n            # how many actions the player has done so far, it is initialized as 0 and updated some lines below\n            features['accumulated_actions'] = accumulated_actions\n            \n            # there are some conditions to allow this features to be inserted in the datasets\n            # if it's a test set, all sessions belong to the final dataset\n            # it it's a train, needs to be passed throught this clausule: session.query(f'event_code == {win_code[session_title]}')\n            # that means, must exist an event_code 4100 or 4110\n            if test_set:\n                all_assessments.append(features)\n            elif true_attempts+false_attempts > 0:\n                all_assessments.append(features)\n                \n            counter += 1\n        \n        # this piece counts how many actions was made in each event_code so far\n        def update_counters(counter: dict, col: str):\n                num_of_session_count = Counter(session[col])\n                for k in num_of_session_count.keys():\n                    x = k\n                    if col == 'title':\n                        x = activities_labels[k]\n                    counter[x] += num_of_session_count[k]\n                return counter\n            \n        event_code_count = update_counters(event_code_count, \"event_code\")\n        event_id_count = update_counters(event_id_count, \"event_id\")\n        title_count = update_counters(title_count, 'title')\n        title_event_code_count = update_counters(title_event_code_count, 'title_event_code')\n\n        # counts how many actions the player has done so far, used in the feature of the same name\n        accumulated_actions += len(session)\n        if last_activity != session_type:\n            user_activities_count[session_type] += 1\n            last_activitiy = session_type \n                        \n    # if it't the test_set, only the last assessment must be predicted, the previous are scraped\n    if test_set:\n        return all_assessments[-1]\n    # in the train_set, all assessments goes to the dataset\n    return all_assessments\n\ndef get_train_and_test(train, test):\n    compiled_train = []\n    compiled_test = []\n    for i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort = False)), total = 17000):\n        compiled_train += get_data(user_sample)\n    for ins_id, user_sample in tqdm(test.groupby('installation_id', sort = False), total = 1000):\n        test_data = get_data(user_sample, test_set = True)\n        compiled_test.append(test_data)\n    reduce_train = pd.DataFrame(compiled_train)\n    reduce_test = pd.DataFrame(compiled_test)\n    categoricals = ['session_title']\n    return reduce_train, reduce_test, categoricals\n\n# read data\ntrain, test, train_labels, specs, sample_submission = read_data()\n# get usefull dict with maping encode\ntrain, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code = encode_title(train, test, train_labels)\n# tranform function to get the train and test set\nreduce_train, reduce_test, categoricals = get_train_and_test(train, test)","fd8477a3":"\"\"\"\nOriginal code by Andrew Lukyanenko https:\/\/www.kaggle.com\/artgor\/quick-and-dirty-regression\n\"\"\"\ndef preprocess(reduce_train, reduce_test):\n    for df in [reduce_train, reduce_test]:\n        df['installation_session_count'] = df.groupby(['installation_id'])['Clip'].transform('count')\n        df['installation_duration_mean'] = df.groupby(['installation_id'])['duration_mean'].transform('mean')\n        #df['installation_duration_std'] = df.groupby(['installation_id'])['duration_mean'].transform('std')\n        df['installation_title_nunique'] = df.groupby(['installation_id'])['session_title'].transform('nunique')\n        \n        df['sum_event_code_count'] = df[[2050, 4100, 4230, 5000, 4235, 2060, 4110, 5010, 2070, 2075, 2080, 2081, 2083, 3110, 4010, 3120, 3121, 4020, 4021, \n                                        4022, 4025, 4030, 4031, 3010, 4035, 4040, 3020, 3021, 4045, 2000, 4050, 2010, 2020, 4070, 2025, 2030, 4080, 2035, \n                                        2040, 4090, 4220, 4095]].sum(axis = 1)\n        \n        df['installation_event_code_count_mean'] = df.groupby(['installation_id'])['sum_event_code_count'].transform('mean')\n        #df['installation_event_code_count_std'] = df.groupby(['installation_id'])['sum_event_code_count'].transform('std')\n        \n    features = reduce_train.loc[(reduce_train.sum(axis=1) != 0), (reduce_train.sum(axis=0) != 0)].columns # delete useless columns\n    features = [x for x in features if x not in ['accuracy_group', 'installation_id']] + ['acc_' + title for title in assess_titles]\n   \n    return reduce_train, reduce_test, features\n# call feature engineering function\nreduce_train, reduce_test, features = preprocess(reduce_train, reduce_test)","a3d683ad":"del train, test","9ea019dc":"from sklearn.model_selection import train_test_split\n\ndef ensemble_split(X, y):\n\n    X_train, X_meta, y_train, y_meta = train_test_split(X, y, test_size=0.5, stratify=y, random_state=42)\n    X_train = X_train.reset_index(drop=True)\n    X_meta = X_meta.reset_index(drop=True)\n    y_train = y_train.reset_index(drop=True)\n    y_meta = y_meta.reset_index(drop=True)\n    return X_train, X_meta, y_train, y_meta","3a0a355b":"import lightgbm as lgb\nfrom sklearn.model_selection import StratifiedKFold\ndef lgb_regressor(X_train,y_train,X_meta,final_test,n_splits=4):\n    params = {\n                'boosting_type': 'gbdt',\n                'objective': 'regression',\n                'metric': {'rmse'},\n                'subsample': 0.75,\n                'subsample_freq': 1,\n                'learning_rate': 0.01,\n                'max_depth': 15,\n                'feature_fraction': 0.75,\n                'lambda_l1': 1,  \n                'lambda_l2': 1,\n                'n_estimators':2000\n                }    \n\n    kf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)  \n    \n    final_pred=np.zeros((len(final_test)),dtype=float)    \n    \n    meta_pred=np.zeros((len(X_meta)),dtype=float)    \n\n    for train_index, val_index in kf.split(X_train, y_train):\n        train_X = X_train.iloc[train_index]\n        val_X = X_train.iloc[val_index]\n        train_y = y_train.iloc[train_index]\n        val_y = y_train.iloc[val_index]\n        lgb_train = lgb.Dataset(train_X, train_y)\n        lgb_eval = lgb.Dataset(val_X, val_y)\n        lgb_model = lgb.train(params,\n                    lgb_train,\n                    num_boost_round=500,\n                    valid_sets=(lgb_train, lgb_eval),\n                    early_stopping_rounds=100,\n                    verbose_eval = 250)\n        \n        final_pred+=lgb_model.predict(final_test)        \n        meta_pred += lgb_model.predict(X_meta)\n        \n    final_pred = final_pred\/n_splits  \n    meta_pred = meta_pred\/n_splits \n    \n    return final_pred, meta_pred\n        ","a44696e7":"from catboost import CatBoostRegressor\n\ndef ctb_regressor(X_train,y_train,X_meta,final_test,n_splits=4):   \n   \n    kf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)   \n    \n    # Initialise arrays which will be filled with the predictions\n    final_pred=np.zeros((len(final_test)),dtype=float)    \n    final_pred=np.zeros((len(final_test)),dtype=float)   \n    meta_pred=np.zeros((len(X_meta)),dtype=float)  \n    \n    # Do 4-fold validation to ensure similarity with the stacked model\n    for train_index, val_index in kf.split(X_train, y_train):\n        # Create the CatBoost regressor\n        ctb = CatBoostRegressor(\n                               task_type=\"CPU\",\n                               learning_rate=0.05,\n                               iterations=1000,\n                               od_type=\"Iter\",\n                               early_stopping_rounds=40,\n                               verbose = 250,\n                               loss_function='RMSE'\n                              )\n        \n        # initialise the training and validation data\n        train_X = X_train.iloc[train_index]\n        val_X = X_train.iloc[val_index]\n        train_y = y_train.iloc[train_index]\n        val_y = y_train.iloc[val_index]\n        \n        #fit the model to the data\n        ctb.fit(train_X, train_y, eval_set=(val_X,val_y))        \n        \n        # predict the test data and the data used to train the meta model\n        final_pred+=ctb.predict(final_test)        \n        meta_pred += ctb.predict(X_meta)\n    \n    # normalise the predicted data by dividing by the splits\n    final_pred = final_pred\/n_splits  \n    meta_pred = meta_pred\/n_splits         \n    \n    return final_pred, meta_pred","e470ae75":"from sklearn.ensemble import RandomForestRegressor\n\ndef rf_regressor(X_train,y_train,X_meta,final_test,n_splits=4):\n    \n    kf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42) \n    \n    final_pred=np.zeros((len(final_test)),dtype=float)\n    \n    meta_pred=np.zeros((len(X_meta)),dtype=float) \n    \n    for train_index, val_index in kf.split(X_train, y_train):    \n        train_X = X_train.iloc[train_index]\n        val_X = X_train.iloc[val_index]\n        train_y = y_train.iloc[train_index]\n        val_y = y_train.iloc[val_index]\n        \n        regressor = RandomForestRegressor(n_estimators = 100, max_depth = 15, random_state = 42, n_jobs = -1)    \n        regressor.fit(train_X, train_y)\n    \n        final_pred += regressor.predict(final_test)  \n        meta_pred += regressor.predict(X_meta)        \n               \n        \n    final_pred = final_pred\/n_splits\n    meta_pred = meta_pred\/n_splits        \n    \n    return final_pred, meta_pred","731a43fe":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error\ndef linear_regressor(X_train,y_train,X_meta,final_test,n_splits=4):\n    \n    kf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42) \n    \n    final_pred=np.zeros((len(final_test)),dtype=float)\n    \n    meta_pred=np.zeros((len(X_meta)),dtype=float) \n    \n    for train_index, val_index in kf.split(X_train, y_train):    \n        train_X = X_train.iloc[train_index]\n        val_X = X_train.iloc[val_index]\n        train_y = y_train.iloc[train_index]\n        val_y = y_train.iloc[val_index]\n\n        regressor = LinearRegression()\n\n        regressor.fit(train_X, train_y)              \n        \n        final_pred += regressor.predict(final_test)  \n        meta_pred += regressor.predict(X_meta)        \n               \n        \n    final_pred = final_pred\/n_splits\n    meta_pred = meta_pred\/n_splits        \n    \n    return final_pred, meta_pred","77f6b26d":"from sklearn.feature_selection import SelectFromModel\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(font_scale=1.5)\n\ndef reduce_dim(X, y, m_feats, test = None):\n    # Train a random forest regressor on the data\n    model = RandomForestRegressor(random_state = 42, n_jobs = -1)\n    model.fit(X, y)\n    \n    # Take the top x number of features\n    selector = SelectFromModel(model, prefit = True, threshold=-np.inf, max_features = m_feats)\n    X = pd.DataFrame(selector.transform(X))  \n    \n    # if there is a test set transform the test set as well\n    if test is not None:\n        test = pd.DataFrame(selector.transform(test))\n        return X, test\n        \n    return X\n","490f6711":"\"\"\"\nOriginal code by Andrew Lukyanenko https:\/\/www.kaggle.com\/artgor\/quick-and-dirty-regression\n\"\"\"\nfrom functools import partial\nimport scipy as sp\nclass OptimizedRounder(object):\n    \"\"\"\n    An optimizer for rounding thresholds\n    to maximize Quadratic Weighted Kappa (QWK) score\n    # https:\/\/www.kaggle.com\/naveenasaithambi\/optimizedrounder-improved\n    \"\"\"\n    def __init__(self):\n        self.coef_ = 0\n\n    def _kappa_loss(self, coef, X, y):\n        \"\"\"\n        Get loss according to\n        using current coefficients\n        \n        :param coef: A list of coefficients that will be used for rounding\n        :param X: The raw predictions\n        :param y: The ground truth labels\n        \"\"\"\n        X_p = pd.cut(X, [-np.inf] + list(np.sort(coef)) + [np.inf], labels = [0, 1, 2, 3])\n\n        return -qwk(y, X_p)\n\n    def fit(self, X, y):\n        \"\"\"\n        Optimize rounding thresholds\n        \n        :param X: The raw predictions\n        :param y: The ground truth labels\n        \"\"\"\n        loss_partial = partial(self._kappa_loss, X=X, y=y)\n        initial_coef = [0.5, 1.5, 2.5]\n        self.coef_ = sp.optimize.minimize(loss_partial, initial_coef, method='nelder-mead')\n\n    def predict(self, X, coef):\n        \"\"\"\n        Make predictions with specified thresholds\n        \n        :param X: The raw predictions\n        :param coef: A list of coefficients that will be used for rounding\n        \"\"\"\n        return pd.cut(X, [-np.inf] + list(np.sort(coef)) + [np.inf], labels = [0, 1, 2, 3])\n\n\n    def coefficients(self):\n        \"\"\"\n        Return the optimized coefficients\n        \"\"\"\n        return self.coef_['x']","4a6bb5cf":"def meta_model(stacked_train, y_stacked, stacked_test, n_splits=2 ):\n    params = {\n                'boosting_type': 'gbdt',\n                'objective': 'regression',\n                'metric': {'rmse'},\n                'subsample': 0.75,\n                'subsample_freq': 1,\n                'learning_rate': 0.05,\n                'max_depth': 8,\n                'feature_fraction': 0.5,\n                'lambda_l1': 1,  \n                'lambda_l2': 1,\n                'n_estimators':2000\n                }   \n\n    kf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)   \n    \n    final_pred=np.zeros((len(stacked_test)),dtype=float)\n    train_pred=np.zeros((len(stacked_train)),dtype=float)   \n\n    for train_index, val_index in kf.split(stacked_train, y_stacked):\n        train_X = stacked_train.iloc[train_index]\n        val_X = stacked_train.iloc[val_index]\n        train_y = y_stacked.iloc[train_index]\n        val_y = y_stacked.iloc[val_index]\n        lgb_train = lgb.Dataset(train_X, train_y)\n        lgb_eval = lgb.Dataset(val_X, val_y)\n        lgb_model = lgb.train(params,\n                    lgb_train,\n                    num_boost_round=500,\n                    valid_sets=(lgb_train, lgb_eval),\n                    early_stopping_rounds=100,\n                    verbose_eval = 100)\n        \n        final_pred += lgb_model.predict(stacked_test)\n        train_pred += lgb_model.predict(stacked_train)\n    \n    final_pred \/= n_splits\n    train_pred \/= n_splits\n    \n    optR = OptimizedRounder()\n    optR.fit(train_pred.reshape(-1,), y_stacked)\n    coefficients = optR.coefficients()\n    \n    pre = optR.predict(train_pred.reshape(-1, ), coefficients)\n    print(qwk(y_stacked, train_pred))\n    \n    final_pred = optR.predict(final_pred.reshape(-1, ), coefficients)\n    \n    return final_pred, coefficients","c2958cd3":"from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport scikitplot as skplt\n\ndef holdout_val(X, y):\n    X = reduce_dim(X, y, 200)\n    \n    X_train, X_holdout, y_train, y_holdout = train_test_split( X, y, test_size=0.1, random_state=42, stratify = y) \n    \n    X_train, X_stacked, y_train, y_stacked = ensemble_split(X_train, y_train)      \n    \n    print('dimenstion reduction complete')  \n    \n    stacked_train = pd.DataFrame() \n    stacked_test = pd.DataFrame()\n    \n    final_pred, meta_pred = lgb_regressor(X_train, y_train, X_stacked,X_holdout)\n    stacked_train['lgb_regressor'] = meta_pred\n    stacked_test['lgb_regressor'] = final_pred\n    print('lgb done')\n    \n    final_pred, meta_pred = rf_regressor(X_train, y_train,X_stacked,X_holdout)\n    stacked_train['rf_regressor'] = meta_pred\n    stacked_test['rf_regressor'] = final_pred\n    print('rf done')\n\n    final_pred, meta_pred = ctb_regressor(X_train, y_train,X_stacked,X_holdout)\n    stacked_train['ctb_regressor'] = meta_pred\n    stacked_test['ctb_regressor'] = final_pred\n    print('ctb done')\n    \n    final_pred, coefficients = meta_model(stacked_train, y_stacked, stacked_test)\n    \n    print('Stacked QWK', qwk(y_holdout, final_pred))\n    skplt.metrics.plot_confusion_matrix(y_holdout, final_pred, figsize=(12,12))\n    ","c1f0b4de":"from sklearn.model_selection import train_test_split\n\ndef KF_val(X, y, n_splits = 10):    \n    kf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n    scores = []\n    \n    # select the top 200 features to be used for training\n    X = reduce_dim(X, y, 200)\n    \n    # Do 10-fold cross validation\n    for train_index, val_index in kf.split(X, y):\n        X_train = X.iloc[train_index]\n        X_holdout = X.iloc[val_index]\n        y_train = y.iloc[train_index]\n        y_holdout = y.iloc[val_index]    \n        \n        # split the data into two parts\n        X_train, X_stacked, y_train, y_stacked = ensemble_split(X_train, y_train)  \n        \n        print('dimenstion reduction complete')  \n        \n        #initialise the stacked training and testinf dataframes\n        stacked_train = pd.DataFrame() \n        stacked_test = pd.DataFrame()\n        \n        # let all models predict on the test data and the training data for training the meta model\n        final_pred, meta_pred = lgb_regressor(X_train, y_train, X_stacked,X_holdout)\n        stacked_train['lgb_regressor'] = meta_pred\n        stacked_test['lgb_regressor'] = final_pred\n        print('lgb done')\n\n        final_pred, meta_pred = rf_regressor(X_train, y_train,X_stacked,X_holdout)\n        stacked_train['rf_regressor'] = meta_pred\n        stacked_test['rf_regressor'] = final_pred\n        print('rf done')\n\n        final_pred, meta_pred = ctb_regressor(X_train, y_train,X_stacked,X_holdout)\n        stacked_train['ctb_regressor'] = meta_pred\n        stacked_test['ctb_regressor'] = final_pred\n        print('ctb done')\n        \n        # Train the meta model on the stacked predictions of the base model and predict the test set\n        final_pred, coefficients = meta_model(stacked_train, y_stacked, stacked_test)\n        score = qwk(y_holdout, final_pred)\n        scores.append(score)\n        print('Stacked QWK', score)\n    return scores","283db9a4":"X_train = reduce_train.drop(['accuracy_group', 'installation_id'], axis=1)\ny_train = reduce_train['accuracy_group']","833a717d":"#holdout_val(X_train, y_train)","36a4771d":"#scores = KF_val(X_train, y_train)","e16f1b7c":"# plt.tick_params(\n#     axis='x',          \n#     which='both',      \n#     bottom=False,      \n#     top=False,         \n#     labelbottom=False)\n# plt.scatter(np.zeros_like(scores), scores)\n# plt.axhline(y=np.array(scores).mean(), c ='r')\n# plt.title('Stacked 10-fold performance')","90f0db18":"# np.array(scores).mean()","3d2ef96d":"def competition(X_train, y_train, reduce_test):    \n    \n    X_train, X_test = reduce_dim(X_train, y_train, 200, test = reduce_test.drop(['installation_id', 'accuracy_group'], axis=1))    \n    \n    X_train, X_stacked, y_train, y_stacked = ensemble_split(X_train, y_train) \n    \n    stacked_train = pd.DataFrame() \n    stacked_test = pd.DataFrame()\n    \n    final_pred, meta_pred = lgb_regressor(X_train, y_train, X_stacked,X_test)\n    stacked_train['lgb_regressor'] = meta_pred\n    stacked_test['lgb_regressor'] = final_pred\n    print('lgb done')\n    \n    final_pred, meta_pred = rf_regressor(X_train, y_train,X_stacked,X_test)\n    stacked_train['rf_regressor'] = meta_pred\n    stacked_test['rf_regressor'] = final_pred\n    print('rf done')\n\n    final_pred, meta_pred = ctb_regressor(X_train, y_train,X_stacked,X_test)\n    stacked_train['ctb_regressor'] = meta_pred\n    stacked_test['ctb_regressor'] = final_pred\n    print('ctb done')\n    \n    final_pred, coefficients = meta_model(stacked_train, y_stacked, stacked_test)    \n    \n    return final_pred","ba6335f2":"final_pred = competition(X_train, y_train, reduce_test)","eab97606":"sample_submission['accuracy_group'] = final_pred.astype(int)\nsample_submission.to_csv('submission.csv', index=False)","188cfa80":"## Helper functions and classes"}}