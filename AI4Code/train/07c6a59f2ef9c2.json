{"cell_type":{"82c03806":"code","b53ba5da":"code","76b2ac89":"code","8853add7":"code","4d149be4":"code","ece5e716":"code","bf737909":"code","0f916dcf":"code","6c66ab23":"code","f722bad7":"code","0749a007":"code","a57fae0e":"code","3598574e":"code","50e976a9":"code","53b20f2e":"code","e6704925":"markdown","614a2815":"markdown","e36f786b":"markdown","85f0e192":"markdown","d021573e":"markdown","512ac5d4":"markdown","036b04c1":"markdown"},"source":{"82c03806":"%%time\n\nimport os\nimport logging\nimport sys\nimport time\nfrom datetime import timedelta\n\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\nimport gc\ngc.enable()\n\nimport numpy as np\nimport pandas as pd\n\nimport plotly.figure_factory as ff\n\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import (AdaBoostClassifier, HistGradientBoostingClassifier)","b53ba5da":"%%time\n\n# Refer to https:\/\/www.kaggle.com\/bextuychiev\/how-to-work-w-million-row-datasets-like-a-pro\n\ndef reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max):\n                    df[col] = df[col].astype(np.float16)\n                elif (c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\". \n              format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","76b2ac89":"%%time\n\ndata_dir = \"..\/input\/tabular-playground-series-oct-2021\/\"\n\ntrain  = reduce_memory_usage(pd.read_csv(data_dir  + \"train.csv\"))\ntest = reduce_memory_usage(pd.read_csv(data_dir + \"test.csv\"))\nsubmission = reduce_memory_usage(pd.read_csv(data_dir + \"sample_submission.csv\"))","8853add7":"%%time\n\nprint(\"Train shape: \", train.shape)\nprint(\"Test shape: \", test.shape, end=\"\\n\\n\")","4d149be4":"train.head()","ece5e716":"test.head()","bf737909":"%%time\n\nTARGET = \"target\"\n\nfeatures = [col for col in train.columns if col not in [\"id\", TARGET]]\nprint(f\"All features {len(features)}:\")\nfor feat in features:\n    print(feat, end=\", \")\nprint(\"\\n\\n\")\n\ncont_features = []\ncat_features = []\nfor feat in features:\n    if \"float\" in str(train[feat].dtype):\n        cont_features.append(feat)\n    else:\n        cat_features.append(feat)\n\nprint(f\"Continuous features {len(cont_features)}\")\nfor feat in cont_features:\n    print(feat, end=\", \")\nprint(\"\\n\\n\")\n\nprint(f\"Categorical (binary) features {len(cat_features)}\")\nfor feat in cat_features:\n    print(feat, end=\", \")\nprint(\"\\n\\n\")","0f916dcf":"%%time\n\ny = train.pop(\"target\")\nX = train.copy()\nX_test = test.drop(\"id\", axis=1).copy()\n\ndel train\ndel test","6c66ab23":"%%time\n\n\nada1_params = {\n    \"random_state\": 42,\n    \"n_estimators\": 100,\n}\n\nhgb1_params = {\n    \"random_state\": 42,\n    \"max_iter\": 1500,\n    \"scoring\": \"roc_auc\",\n    \"early_stopping\": True,\n}\n\n# Model name must be unique\nmodels = [\n    (\"ada1\", AdaBoostClassifier(**ada1_params)),\n    (\"hgb1\", HistGradientBoostingClassifier(**hgb1_params)),\n]","f722bad7":"%%time\n\ndef predict_with_model(model, simple_fit=False, splits=5):\n    test_preds = []\n    valid_preds = {}\n    scores = []\n    \n    skf = StratifiedKFold(n_splits=splits, shuffle=True, random_state=42)\n    for fold, (idx_train, idx_valid) in enumerate(skf.split(X, y)):\n        start_time = time.monotonic()\n        \n        X_train, y_train = X.iloc[idx_train], y.iloc[idx_train]\n        X_valid, y_valid = X.iloc[idx_valid], y.iloc[idx_valid]\n        \n        valid_ids = X_valid.id.values.tolist()\n\n        X_train = X_train[features]\n        X_valid = X_valid[features]\n\n        if simple_fit:\n            model.fit(X_train, y_train)\n        else:\n            model.fit(\n                X_train, y_train,\n                eval_set=[(X_valid, y_valid)],\n                early_stopping_rounds=180,\n                verbose=1000\n            )\n        \n        valid_pred = model.predict_proba(X_valid)[:, 1]\n        test_pred = model.predict_proba(X_test)[:, 1]\n        \n        test_preds.append(test_pred)\n        valid_preds.update(dict(zip(valid_ids, valid_pred)))\n\n        score = roc_auc_score(y_valid, valid_pred)\n        \n        end_time = time.monotonic()\n        dur = timedelta(seconds=end_time - start_time)\n        print(f\"Fold {fold} | AUC: {score} | Took: {dur}\")\n        scores.append(score)\n    \n    test_preds = np.mean(np.column_stack(test_preds), axis=1)\n    valid_preds = pd.DataFrame.from_dict(valid_preds, orient=\"index\").reset_index()\n    \n    return test_preds, valid_preds, scores","0749a007":"%%time\n\ndef predict_with_models(models):\n    print(f\"Predicting with {len(models)} models...\", end=\"\\n\\n\")\n    for model_name, model in models:\n        # use simple fit for sklearn boosting\n        simple_fit = True\n\n        start_time = time.monotonic()\n        \n        print(\"-\" * 50)\n        print(f\"Using {model_name} model...\")\n        test_preds, valid_preds, scores = predict_with_model(model, simple_fit=simple_fit)\n        print(f\"Score: {np.mean(scores)}, Std: {np.std(scores)}\", end=\"\\n\\n\")\n\n        print(\"Saving predictions...\")\n        valid_preds.columns = [\"id\", model_name]\n        valid_preds.to_csv(f\"{model_name}_train.csv\", index=False)\n\n        test_preds_df = pd.DataFrame({\"id\": submission.id, model_name: test_preds})\n        test_preds_df.to_csv(f\"{model_name}_test.csv\", index=False)\n\n        sub = pd.DataFrame({\"id\": submission.id, TARGET: test_preds})\n        sub.to_csv(f\"{model_name}_submission.csv\", index=False)\n        \n        end_time = time.monotonic()\n        dur = timedelta(seconds=end_time - start_time)\n        print(f\"Took: {dur}\")","a57fae0e":"%%time\n\npredict_with_models(models)","3598574e":"# Free-up memory\n\ndel X\ndel y\ndel X_test","50e976a9":"def load_viz_data(submission_files):\n    dfs = []\n    for submission_file in submission_files:\n        df = pd.read_csv(submission_file)\n        dfs.append((submission_file, df))\n        \n    hist_data = []\n    for i in range(len(dfs)):\n        _, df = dfs[i]\n        hist_data.append(df[TARGET])\n        \n    return hist_data","53b20f2e":"%%time\n\nsubmission_files = [f\"{model_name}_submission.csv\" for (model_name, _) in models]\nviz_data = load_viz_data(submission_files)\n\nfig = ff.create_distplot(viz_data, submission_files, show_hist=False, show_rug=False)\nfig.show()","e6704925":"## Visualize","614a2815":"## TPS Oct. 2021 - Baseline AdaBoost\/HistGB","e36f786b":"## Import libraries","85f0e192":"## Load datasets","d021573e":"Please see [TPS Oct. 2021 - Baseline LGBM\/XGB\/CB](https:\/\/www.kaggle.com\/stevenrferrer\/tps-oct-2021-baseline-lgbm-xgb-cb) for other boosting models. \n\nI initially included sklearn `GradientBoostingClassifier` here, but it's just too slow and couldn't finish so, I removed it. ","512ac5d4":"## Features","036b04c1":"## Predict"}}