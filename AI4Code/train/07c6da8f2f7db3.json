{"cell_type":{"85121c56":"code","166482c3":"code","3bf99971":"code","c72fc0dd":"code","8273ac76":"code","882a17eb":"code","19f37f23":"code","5f3674a0":"code","18f29b0d":"code","112a936a":"code","42c1adb3":"code","e3df18a5":"code","f069121f":"code","41f4db4b":"code","1aff448b":"code","8c763c1d":"code","21e01645":"code","9963344a":"code","8094705b":"code","301ee602":"code","dcce328f":"code","c82451f2":"code","3c49dcf9":"code","7681fdb8":"code","bf41a62b":"code","9ea1f17b":"code","9f601a32":"code","f5e00c2b":"code","7394895e":"code","03778986":"code","be91b09f":"code","7a8eca9e":"code","64bf2c1c":"code","c90617f7":"code","f2a098e9":"code","f991b930":"code","3f53fea8":"code","ccb217b1":"code","83339739":"code","3e385631":"code","7da8068d":"code","9bd13a51":"code","6f59bde6":"code","c154dcb4":"code","d18f726a":"code","2bdfc026":"code","a50c8d7c":"code","e7ae510a":"code","e88599bb":"code","f6555f47":"code","a5b7eb3a":"code","e1be0ff1":"code","4952a26b":"code","b3cd8bf2":"code","f0bd4d20":"code","dba62235":"code","e73721f0":"code","fbab7919":"code","2bdc38aa":"code","8fd23f34":"code","e9640ffb":"code","c70d59a9":"code","0d0fdc37":"code","7843d50a":"code","a6795219":"code","e1ed7432":"code","4d3832a1":"code","30d45034":"code","8920b099":"code","59be8069":"code","f64edb46":"code","82720236":"code","0c7324e9":"code","bb5e658e":"code","a523cb18":"code","62713be3":"code","8319a8d5":"markdown","5c1b7a77":"markdown","128338e6":"markdown","d516d2b7":"markdown","bf3f6242":"markdown","39a394d5":"markdown","13bab0de":"markdown","c55f523a":"markdown","c26207dc":"markdown","bc81fc46":"markdown","8a117982":"markdown","983c88f7":"markdown","d16bfa0c":"markdown","37e0be0e":"markdown","087d39f1":"markdown","c1321f8e":"markdown","c0b285d8":"markdown","62c34654":"markdown","f918667e":"markdown","732d8916":"markdown","6ccf6dde":"markdown","840cb44a":"markdown","e63749b7":"markdown","2b4ff43e":"markdown","ef108b53":"markdown","74a40925":"markdown","d645c3a5":"markdown","0ab21a63":"markdown","dae5b14e":"markdown","ca4bc5a1":"markdown","cfd39780":"markdown","e681a077":"markdown","6df47e91":"markdown","9429c057":"markdown","251d4b06":"markdown","74cb4665":"markdown","98c43ffa":"markdown","399ceadf":"markdown","4edb14bb":"markdown","23564137":"markdown","a59354c1":"markdown","c14acb03":"markdown","d3eab592":"markdown","06f7c173":"markdown","b3adc89a":"markdown","dc6ffbff":"markdown","bcbf4ee5":"markdown","53d0a9b9":"markdown","d421d93e":"markdown","c68cb353":"markdown","9293f83c":"markdown"},"source":{"85121c56":"from pandas import Series\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve","166482c3":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3bf99971":"!pip freeze > requirements.txt","c72fc0dd":"DATA_DIR = '\/kaggle\/input\/sf-dst-scoring\/'\ntrain = pd.read_csv(DATA_DIR + 'train.csv')\ntest = pd.read_csv(DATA_DIR + 'test.csv')\nsample_submission = pd.read_csv(DATA_DIR + 'sample_submission.csv')","8273ac76":"pd.set_option('display.max_columns', None)\nprint('\u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: ', train.shape)\ndisplay(train.head(3))\nprint('\u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: ', test.shape)\ndisplay(test.head(3))","882a17eb":"# \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \ndisplay(test.info())","19f37f23":"test['default'] = 0 # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0443\u043b\u044f\u043c\u0438\ntest['train'] = 0 # \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c, \u0447\u0442\u043e \u0437\u0430\u043f\u0438\u0441\u0438 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443 train\ntrain['train'] = 1 # \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c, \u0447\u0442\u043e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443 train\ndata = pd.concat([train, test], ignore_index=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u0432 \u043e\u0434\u0438\u043d\n","5f3674a0":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\ndisplay(data)","18f29b0d":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\ndata.info()","112a936a":"#\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438\nfig, ax = plt.subplots(figsize=(20,12))\nsns_heatmap = sns.heatmap(data.isnull(), yticklabels=False, cbar=False, cmap='viridis')","42c1adb3":"# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u043c\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 'education'\ndata['education'].value_counts().plot.barh() ","e3df18a5":"# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u043c\u0441\u044f \"SCH\"\ndata[data['education'].isnull()] = data[data['education'].isnull()].fillna('SCH')","f069121f":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\ndata.nunique()","41f4db4b":"# \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nbin_cols = ['sex', 'car', 'car_type', 'good_work', 'foreign_passport']\n# \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ncat_cols = ['education', 'home_address', 'work_address', 'sna', 'first_time']\n# \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nnum_cols = ['age', 'decline_app_cnt', 'score_bki', 'bki_request_cnt', 'region_rating', 'income']","1aff448b":"sns.countplot(x='default', data = data[data['train'] == 1])","8c763c1d":"# \u043f\u0440\u0435\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 datetime\ndata.app_date = pd.to_datetime(data.app_date)\ndata.app_date","21e01645":"num_of_app_train = data['app_date'][data['train'] == 1].value_counts()\nnum_of_app_train","9963344a":"plt.bar(num_of_app_train.index, num_of_app_train)\nplt.xticks(rotation=45)\nplt.show()","8094705b":"num_of_def_train = data['app_date'][(data['train'] == 1) & (data['default'] == 1)].value_counts()","301ee602":"plt.bar(num_of_def_train.index, num_of_def_train)\nplt.xticks(rotation=45)\nplt.show()","dcce328f":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u044f\u0432\u043e\u043a, \u043f\u043e\u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043a\u0430\u0436\u0434\u0443\u044e \u0434\u0430\u0442\u0443 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 train\ndata['num_of_app'] = data['app_date'].replace(to_replace=num_of_app_train.to_dict())\n\n# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043a\u043e\u043b-\u0432\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u0432, \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0434\u0430\u0442\u0443 \u043f\u043e\u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u044f\u0432\u043a\u0438 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 train\ndata['num_of_def'] = data['app_date'].replace(to_replace=num_of_def_train.to_dict())\n\n# \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 - \u0434\u043e\u043b\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u0432 \u043e\u0442 \u043a\u043e\u043b-\u0432\u0430 \u043f\u043e\u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\ndata['per_of_def'] = data['num_of_def'] \/ data['num_of_app']\ndata.head()","c82451f2":"del data['num_of_def']","3c49dcf9":"num_of_app_data = data['app_date'].value_counts()\ndata['num_of_app'] = data['app_date'].replace(to_replace=num_of_app_data.to_dict())","7681fdb8":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 'per_of_def', 'num_of_app' \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nnum_cols.append('per_of_def')\nnum_cols.append('num_of_app')","bf41a62b":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b\ndata.head()","9ea1f17b":"# \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0434\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 train\nfor col in cat_cols:\n    print('\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"{a}\":'.format(a=col)) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n    print(data[col][data['train'] == 1].value_counts()) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\n    # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\n    plt.figure()\n    sns.countplot(x=col, data = data[data['train'] == 1])\n    plt.show()","9f601a32":"# \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0434\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 train\nfor col in bin_cols:\n    print('\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"{a}\":'.format(a=col)) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n    print(data[col][data['train'] == 1].value_counts()) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\n    # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\n    plt.figure()\n    sns.countplot(x=col, data = data[data['train'] == 1])\n    plt.show()","f5e00c2b":"# \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0434\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 train\nfor col in num_cols:\n    print('\u0427\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"{a}\":'.format(a=col)) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n    print(data[col][data['train'] == 1].describe())\n    # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\n    data[col].hist(bins=20)\n    plt.show()","7394895e":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u043e\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n# \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0434\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 train\nfor col in num_cols:\n    print('\u0427\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"{a}\":'.format(a=col)) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n    print(data[col][data['train'] == 1].describe())\n    # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\n    np.log(data[col] + 1).hist(bins=20)\n    plt.show()","03778986":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043a\u043e\u0440\u043d\u0435\u0439 \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n# \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0434\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 train\nfor col in num_cols:\n    print('\u0427\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"{a}\":'.format(a=col)) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n    print(data[col][data['train'] == 1].describe())\n    # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\n    np.sqrt(data[col] + 1).hist(bins=20)\n    plt.show()","be91b09f":"# \u0437\u0430\u043c\u0435\u043d\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c \u0434\u043b\u044f \u0432\u0441\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 data\ndata['age'] = np.log(data['age'] + 1)\ndata['bki_request_cnt'] = np.log(data['bki_request_cnt'] + 1)\ndata['income'] = np.log(data['income'] + 1)","7a8eca9e":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0448\u0438\u0445\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u043b\u044f \u0432\u0441\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 data\nfor col in num_cols:\n    print('\u0427\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"{a}\":'.format(a=col)) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n    print(data[col].describe())\n    # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\n    data[col].hist(bins=20)\n    plt.show()","64bf2c1c":"# \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n# \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u043b\u044f \u0432\u0441\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 data\nfor col in num_cols:\n    print('\u0427\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"{a}\":'.format(a=col)) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n    Q1 = data[col].quantile(0.25)\n    Q3 = data[col].quantile(0.75)\n    IQR = Q3 - Q1\n    left = Q1 - 1.5*IQR\n    right = Q3 + 1.5*IQR\n    print('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: ', data[col][(data[col] < left) | (data[col] > right)].count())\n    print('\\n')","c90617f7":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0435\u0435, \u043a\u0430\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445\ndata[bin_cols]","f2a098e9":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 fit \u043a\u043b\u0430\u0441\u0441\u0430 LabelEncoder\n# \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441\u043e \u0432\u0441\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c data\nlabel_encoder = LabelEncoder()\nfor col in bin_cols:\n    data[col] = label_encoder.fit_transform(data[col])","f991b930":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c\ndata[bin_cols].head()","3f53fea8":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0435\u0435, \u043a\u0430\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445\ndata[cat_cols]","ccb217b1":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"education\"\n# \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441\u043e \u0432\u0441\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c data\nlabel_encoder = LabelEncoder()\ndata['education'] = label_encoder.fit_transform(data['education'])","83339739":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\ndata[cat_cols]","3e385631":"# \u043e\u0446\u0435\u043d\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \nsns.heatmap(data[num_cols].corr().abs(), vmin=0, vmax=1)","7da8068d":"# \u043e\u0446\u0435\u043d\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0421\u043f\u0438\u0440\u043c\u0430\u043d\u0430 \u0434\u043b\u044f \u043d\u0435\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nsns.heatmap(data[bin_cols + cat_cols].corr(method='spearman').abs(), vmin=0, vmax=1)","9bd13a51":"# \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043c\u043e\u0434\u0435\u043b\u0438\nbin_cols = ['sex', 'car_type', 'good_work', 'foreign_passport']\ncat_cols = ['education', 'home_address', 'sna', 'first_time']","6f59bde6":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n# \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u0437\u0430\u043f\u0438\u0441\u044f\u043c\u0438 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 train\nimp_num = pd.Series(f_classif(data[data['train'] == 1][num_cols],\n                              data[data['train'] == 1]['default'])[0], index=num_cols)\nimp_num.sort_values(inplace=True)\nimp_num.plot(kind='barh')","c154dcb4":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n# \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u0437\u0430\u043f\u0438\u0441\u044f\u043c\u0438 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 train\nimp_cat = Series(mutual_info_classif(data[data['train'] == 1][bin_cols + cat_cols], data[data['train'] == 1]['default'],\n                                     discrete_features = True), index = bin_cols + cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","d18f726a":"# \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 data\ndata_train = data[data['train'] == 1]\ndata_train = data_train.drop(['client_id', 'app_date', 'train'], axis=1)","2bdfc026":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndata_train.head()","a50c8d7c":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u043c One-Hot Encoding\ndata_train_cat = OneHotEncoder(sparse = False).fit_transform(data_train[cat_cols].values)\n","e7ae510a":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ndata_train_cat","e88599bb":"# \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ndata_train_num = StandardScaler().fit_transform(data_train[num_cols].values)","f6555f47":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ndata_train_num","a5b7eb3a":"# \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043e\u0434\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e\nX = np.hstack([data_train_num, data_train[bin_cols].values, data_train_cat])\ny = data_train['default'].values","e1be0ff1":"# \u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","4952a26b":"# \u0441\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c\nmodel = LogisticRegression(max_iter = 1000)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","b3cd8bf2":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f confusion matrix:\nsns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Neg', 'False Pos', 'False Neg', 'True Pos']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(y_test, y_pred).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=labels, fmt='', cmap='Blues')","f0bd4d20":"# \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 (X_train, y_train) \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ny_train_probs = model.predict_proba(X_train)\ny_train_probs = y_train_probs[:,1]\nfpr_train, tpr_train, threshold_train = roc_curve(y_train, y_train_probs)\nroc_auc_train = roc_auc_score(y_train, y_train_probs)","dba62235":"# \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 (X_test, y_test) \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ny_test_probs = model.predict_proba(X_test)\ny_test_probs = y_test_probs[:,1]\nfpr_test, tpr_test, threshold_test = roc_curve(y_test, y_test_probs)\nroc_auc_test = roc_auc_score(y_test, y_test_probs)","e73721f0":"# \u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle = '--')\nplt.plot(fpr_train, tpr_train, label = 'Train')\nplt.plot(fpr_test, tpr_test, label = 'Test')\nplt.title('Logistic Regression ROC AUC Train = {a} \\n Logistic Regression ROC AUC Test = {b}'\n          .format(a = roc_auc_train.round(3), b = roc_auc_test.round(3)))\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","fbab7919":"# \u0438\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\nfrom sklearn.model_selection import GridSearchCV","2bdc38aa":"# \u0438\u0449\u0435\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nmodel = LogisticRegression()\nparam_grid = [\n    {'penalty': ['l1'], \n     'solver': ['liblinear', 'lbfgs'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr']}, \n    {'penalty': ['l2'], \n     'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr']}, \n    {'penalty': ['none'], \n     'solver': ['newton-cg', 'lbfgs', 'sag', 'saga'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr']} \n]\ngridsearch = GridSearchCV(model, param_grid, scoring='f1', n_jobs=-1)\ngridsearch.fit(X_train, y_train)\nmodel = gridsearch.best_estimator_\n## \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nbest_parameters = model.get_params()\nfor param_name in best_parameters:\n        print(param_name, best_parameters[param_name], '\\n')","8fd23f34":"# \u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e \u043d\u043e\u0432\u043e\u0439\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","e9640ffb":"# \u0441\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c\nnew_model = LogisticRegression(random_state = None, \n                               C = 1, \n                               class_weight = 'balanced', \n                               dual = False, \n                               fit_intercept = True, \n                               intercept_scaling = 1, \n                               l1_ratio = None, \n                               max_iter = 100, \n                               multi_class = 'auto', \n                               n_jobs = None, \n                               penalty = 'l1', \n                               solver = 'liblinear', \n                               tol = 0.0001,\n                               verbose = 0, \n                               warm_start = False)\nnew_model.fit(X_train, y_train)\ny_pred = new_model.predict(X_test)","c70d59a9":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f confusion matrix:\nsns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Neg', 'False Pos', 'False Neg', 'True Pos']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(y_test, y_pred).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=labels, fmt='', cmap='Blues')","0d0fdc37":"# \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 (X_train, y_train) \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ny_train_probs = new_model.predict_proba(X_train)\ny_train_probs = y_train_probs[:,1]\nfpr_train, tpr_train, threshold_train = roc_curve(y_train, y_train_probs)\nroc_auc_train = roc_auc_score(y_train, y_train_probs)","7843d50a":"# \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 (X_test, y_test) \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ny_test_probs = new_model.predict_proba(X_test)\ny_test_probs = y_test_probs[:,1]\nfpr_test, tpr_test, threshold_test = roc_curve(y_test, y_test_probs)\nroc_auc_test = roc_auc_score(y_test, y_test_probs)\n","a6795219":"# \u0441\u0442\u0440\u043e\u0438 \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle = '--')\nplt.plot(fpr_train, tpr_train, label = 'Train')\nplt.plot(fpr_test, tpr_test, label = 'Test')\nplt.title('Logistic Regression ROC AUC Train = {a} \\n Logistic Regression ROC AUC Test = {b}'\n          .format(a = roc_auc_train.round(3), b = roc_auc_test.round(3)))\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","e1ed7432":"# \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 data\ndata_test = data[data['train'] == 0]\ndata_test = data_test.drop(['client_id', 'app_date', 'train'], axis=1)","4d3832a1":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u043c One-Hot Encoding\ndata_test_cat = OneHotEncoder(sparse = False).fit_transform(data_test[cat_cols].values)","30d45034":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ndata_test_cat","8920b099":"# \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ndata_test_num = StandardScaler().fit_transform(data_test[num_cols].values)","59be8069":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ndata_test_num","f64edb46":"# \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043e\u0434\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e\nX = np.hstack([data_test_num, data_test[bin_cols].values, data_test_cat])","82720236":"# \u0434\u0435\u043b\u0430\u0435\u043c \u0440\u0430\u0441\u0447\u0435\u0442\ny = new_model.predict_proba(X)\ny = y[:,1]","0c7324e9":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\nsubmit = pd.DataFrame(test.client_id)","bb5e658e":"# \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0440\u0430\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 default\nsubmit['default'] = y\n","a523cb18":"# \u0432\u044b\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0432 \u0444\u0430\u0439\u043b\nsubmit.to_csv('submission.csv', index=False)","62713be3":"submit.sample(10)","8319a8d5":"**ROC-\u0430\u043d\u0430\u043b\u0438\u0437**","5c1b7a77":"\u0423\u0431\u0435\u0440\u0435\u043c \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 data \u043a\u043e\u043b-\u0432\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u0432 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 train, \n\u0442.\u043a. \u0432 \u043d\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 data \u043a\u0430\u0440\u0442\u0438\u043d\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439.","128338e6":"**\u0412\u044b\u0432\u043e\u0434: \u0440\u0430\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 ROC AUC \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u044b\u0439 \u0432\u044b\u0431\u043e\u0440\u043e\u043a \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c.\n\u0411\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u043c\u0438 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438.\n\u041f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0431\u044b\u043b\u0430 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0431\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 ROC AUC > 0.74\n\u041c\u043e\u0434\u0435\u043b\u044c \u0431\u044b\u043b\u0430 \u0434\u043e\u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u0430 \u0441 \u043f\u043e\u0434\u0431\u043e\u0440\u043e\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 GridSearchCV.\n\u0414\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0443\u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u043b\u0438 \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0442\u044c \u043a\u0430\u043a\u0438\u0435-\u043b\u0438\u0431\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0442 \u0441\u043e\u043c\u043d\u0435\u043d\u0438\u0435 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 IQR.**","d516d2b7":"## \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439","bf3f6242":"\u041f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043a\u043e\u043b-\u0432\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u0432 \u0440\u043e\u0441\u043b\u043e. \n\u0411\u043b\u0438\u0436\u0435 \u043a \u043a\u043e\u043d\u0446\u0443 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u043d\u0430\u043c\u0435\u0442\u0438\u043b\u0441\u044f \u0442\u0440\u0435\u043d\u0434 \u043d\u0430 \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u0435.\n\u041c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u0431\u0430\u043d\u043a \u0441\u0442\u0430\u043b \u043b\u0443\u0447\u0448\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c: \u043e\u043d \u0441\u0442\u0430\u043b \u043c\u0435\u043d\u044c\u0448\u0435 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043d\u044b\u0445 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0432 \u0438 \u043a\u043e\u043b-\u0432\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u0432 \u0441\u043d\u0438\u0437\u0438\u043b\u043e\u0441\u044c.","39a394d5":"* client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n* education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n* sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n* car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n* decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n* good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n* bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n* home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n* sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n* first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n* score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n* region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n* app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n* default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443","13bab0de":"\u0421\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u043c\u0438 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u043c\u0435\u0442\u0440\u0430\u043c\u0438","c55f523a":"**\u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439**","c26207dc":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'default' \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 'train'","bc81fc46":"# **\u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445**","8a117982":"# **\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432**","983c88f7":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \u0440\u0430\u0432\u043d\u043e \u043d\u0443\u043b\u044e. \u0422.\u0435. \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435.","d16bfa0c":"**\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","37e0be0e":"# **\u041f\u043e\u0438\u0441\u043a \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432**","087d39f1":"\u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 (\u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c 'default' \u0438 'train'), \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \n\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c 'client_id').","c1321f8e":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e, \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u0442.\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043c\u043e\u0436\u043d\u043e \u043b\u0438 \u043d\u0430\u0439\u0442\u0438 \u0431\u043e\u043b\u0435\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438.","c0b285d8":"**\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'app_date'**","62c34654":"\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 - \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438.\n\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 'train'.","f918667e":"\u041d\u0430 \u044d\u0442\u043e\u043c \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043c \u0438 \u043f\u0435\u0440\u0435\u0439\u0434\u0435\u043c \u043a \u0430\u043d\u0430\u043b\u0438\u0437\u0443 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0441\u0430\u043c\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445,\n\u0438\u0445 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","732d8916":"**\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438**","6ccf6dde":"\u0422\u0430\u043a\u0436\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u044f\u0432\u043e\u043a \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 train \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u044f\u0432\u043e\u043a \n\u0432 \u043d\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 data. (\u0422.\u0435. \u043f\u043e \u0441\u0443\u0442\u0438, \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u044d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 test.)","840cb44a":"# **\u0427\u0438\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435**","e63749b7":"\u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 test \u043d\u0435\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \"default\". \u041c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \n\u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0435\u0433\u043e \u043d\u0443\u043b\u044f\u043c\u0438.\n\u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b train \u0438 test, \n\u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432 \u043d\u043e\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \"train\" \u0443\u043a\u0430\u0437\u0430\u0432, \u043a\u0430\u043a\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u043e\u0442\u043d\u043e\u0441\u044f\u0442\u0441\u044f \u043a \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443 train.","2b4ff43e":"**\u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438**","ef108b53":"\u0412\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044e \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e  \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432:\n\u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0438, \u0442\u0430\u043a\u043e\u0432\u044b\u043c\u0438 \u043c\u043e\u0433\u0443\u0442 \u043d\u0435 \u044f\u0432\u043b\u044f\u0442\u044c\u0441\u044f - \n\u043f\u043e \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 \u0441\u043c\u044b\u0441\u043b\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\u041d\u0430 \u0434\u0430\u043d\u043d\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c.","74a40925":"\u0412\u044b\u0432\u043e\u0434\u044b:\n\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \"education\" \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043c\u0430\u043b\u0430\u044f \u0434\u043e\u043b\u044f \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f PGR \u0438 ACD,\n\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \"home_address\" \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043c\u0430\u043b\u0430\u044f \u0434\u043e\u043b\u044f \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 3.\n\u0414\u043b\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043e\u043b\u044f \u0432\u0441\u0435\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0432\u0435\u043b\u0438\u043a\u0430, \u043d\u043e \u0438\u043c\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u044f\u0440\u043a\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","d645c3a5":"**\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","0ab21a63":"\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 'train'.","dae5b14e":"**\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","ca4bc5a1":"\u0412\u044b\u0432\u043e\u0434\u044b:\n\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \"sex\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043f\u043e\u0440\u043e\u0432\u043d\u0443,\n\u0432 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e - \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u043e\u0435 \u043f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","cfd39780":"**\u0426\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'default'**","e681a077":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b-\u0432\u0430 \u0437\u0430\u044f\u0432\u043e\u043a \u043f\u043e \u0434\u043d\u044f\u043c.\n\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 'train'.","6df47e91":"**ROC-\u0430\u043d\u0430\u043b\u0438\u0437**","9429c057":"\u0421\u0430\u043c\u044b\u0439 \u0432\u0430\u0436\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - 'sna'. \u041d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u0432\u0430\u0436\u043d\u044b\u0439 - 'sex' \u043d\u0435 \u0432\u0430\u0436\u0435\u043d. \u0412\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043c\u043e\u0434\u0435\u043b\u0438.","251d4b06":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'app_date'.","74cb4665":"\u041a\u0430\u043a \u0438 \u043e\u0436\u0438\u0434\u0430\u043b\u043e\u0441\u044c, \u0441\u0430\u043c\u044b\u0439 \u0432\u0430\u0436\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - 'score_bki'.\n","98c43ffa":"**\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","399ceadf":"\u0412\u044b\u0432\u043e\u0434\u044b:\n* 1.\u0412\u044b\u0441\u043e\u043a\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u043b\u044f\u0446\u0438\u044f car \u0438 car_type. \u0412 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c car_type.\n* 2.\u0412\u044b\u0441\u043e\u043a\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f home_address \u0438 work_address. \u0412 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c home_address.","4edb14bb":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \"age\", \"bki_request_cnt\", \"income\" \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043e\u0432 \u0431\u043e\u043b\u0435\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435.\n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043d\u0430 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u044b.\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \"decline_app_cnt\", \"score_bki\" \u0438 \"region_rating\" \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 - \n\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u0440\u043d\u044f \u043d\u0435 \u0434\u0435\u043b\u0430\u044e\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c.","23564137":"\u0412\u044b\u0432\u043e\u0434\u044b:\n* 1.\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u043b\u0430\u0431\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439\n* 2.\u0412\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043c\u043e\u0434\u0435\u043b\u0438","a59354c1":"# **\u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438**","c14acb03":"# **\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","d3eab592":"\u041f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e  \u043d\u0430\u0447\u0430\u043b\u0435 \u0433\u043e\u0434\u0430 \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u044f\u0432\u043e\u043a \u0440\u043e\u0441\u043b\u043e. \n\u0411\u043b\u0438\u0436\u0435 \u043a \u043a\u043e\u043d\u0446\u0443 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u043d\u0430\u043c\u0435\u0442\u0438\u043b\u0441\u044f \u0442\u0440\u0435\u043d\u0434 \u043d\u0430 \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u0435.","06f7c173":"# **\u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a**","b3adc89a":"\u042d\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u0443\u0447\u0448\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0435\u0431\u043b\u0430\u0433\u043e\u043d\u0430\u0434\u0435\u0436\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432.","dc6ffbff":"**\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438**","bcbf4ee5":"# **\u0410\u043d\u0430\u043b\u0438\u0437 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445**","53d0a9b9":"# **\u0421\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c**","d421d93e":"\u041f\u0435\u0440\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 - \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u044f\u0432\u043a\u043e \u043f\u043e\u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430.","c68cb353":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b-\u0432\u0430 \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438.\n\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0434\u043b\u044f \u0441\u0442\u0440\u043e\u043a \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 train.","9293f83c":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043b\u043e\u0445\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u043c\u043e\u0433\u0443\u0442 \u043d\u0435 \u0432\u044b\u043f\u043b\u0430\u0447\u0438\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u044b."}}