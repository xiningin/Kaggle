{"cell_type":{"0ae67695":"code","279652fa":"code","3ce53253":"code","2be93b00":"code","ad1a9756":"code","e23d3999":"code","3fef605b":"code","25719e11":"code","430522b8":"code","3c38d99c":"code","7048866a":"code","50cb566c":"code","0f3dfbff":"code","9633a64b":"code","87cf18c3":"code","106ab010":"code","cfddda8f":"code","d163b7f7":"code","06380ec3":"code","8b382d26":"code","077496b9":"code","297e3705":"code","d66ef6ef":"code","86fc4fcb":"code","e4b1ce69":"code","348dae17":"code","56941cde":"code","23446059":"code","5a14c475":"code","807373ad":"code","2c63e6a3":"code","9d14e07f":"code","f2c95f4d":"code","5d41ead2":"code","f730d15b":"code","35540812":"code","70960f30":"code","f0dd5eaa":"code","ffbe749e":"code","8cf97559":"code","8fc07695":"code","1d5592f8":"code","f3694a7a":"code","b9864043":"code","5a63bbc2":"code","13479900":"code","664619fe":"code","b09a054f":"code","51b91455":"markdown","3aab80f8":"markdown","615f4ca9":"markdown","868c8675":"markdown","74290a40":"markdown","1d31478d":"markdown","76a59267":"markdown","efec7f6b":"markdown"},"source":{"0ae67695":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/data-cleaning-metadata-and-irrigation'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","279652fa":"os.chdir('\/kaggle\/input\/data-cleaning-metadata-and-irrigation\/')\nmeta = pd.read_csv('metadata_kaggle_cleaned.csv')\nprint(meta.shape)\nmeta.head()","3ce53253":"eda = meta.copy()\neda.info()","2be93b00":"target = meta['rating'].replace(['C1', 'D1'], ['C', 'D'])\ntarget.unique()","ad1a9756":"train = eda[meta['rating'].notna()]\nprint(train.shape)\ntrain.head()","e23d3999":"train.info()","3fef605b":"pd.value_counts(target).plot.bar(figsize=(15,5), title='Distribution of Target Variable (rating)')","25719e11":"eda['rating'] = eda['rating'].replace('C1', 'C')\neda['rating'] = eda['rating'].replace('D1', 'D')\neda['rating'].unique()","430522b8":"train['rating'] = train['rating'].replace('C1', 'C')\ntrain['rating'] = train['rating'].replace('D1', 'D')\ntrain['rating'].unique()","3c38d99c":"pd.value_counts(train['rating']).plot.bar(figsize=(15,5), title='Distriution of Target Variable (rating)')","7048866a":"fig, axs = plt.subplots(2,4, figsize=(20,8))\npd.value_counts(meta['irrigation']).plot.bar(ax=axs[0, 0], rot=0, subplots=True)\npd.value_counts(meta['steam']).plot.bar(ax=axs[0, 1], rot=0, subplots=True)\npd.value_counts(meta['chilledwater']).plot.bar(ax=axs[0, 2], rot=0, subplots=True)\npd.value_counts(meta['hotwater']).plot.bar(ax=axs[0, 3], rot=0, subplots=True)\npd.value_counts(meta['electricity']).plot.bar(ax=axs[1, 0], rot=0, subplots=True)\npd.value_counts(meta['water']).plot.bar(ax=axs[1, 1], rot=0, subplots=True)\npd.value_counts(meta['solar']).plot.bar(ax=axs[1, 2], rot=0, subplots=True)\npd.value_counts(meta['gas']).plot.bar(ax=axs[1, 3], rot=0, subplots=True)","50cb566c":"meta.loc[:, 'yearbuilt':'Steam Heating'].isin([0]).sum().sort_values(ascending=False)","0f3dfbff":"fig, axs = plt.subplots(2,4, figsize=(20,8))\npd.value_counts(train['irrigation']).plot.bar(ax=axs[0, 0], rot=0, subplots=True)\npd.value_counts(train['steam']).plot.bar(ax=axs[0, 1], rot=0, subplots=True)\npd.value_counts(train['chilledwater']).plot.bar(ax=axs[0, 2], rot=0, subplots=True)\npd.value_counts(train['hotwater']).plot.bar(ax=axs[0, 3], rot=0, subplots=True)\npd.value_counts(train['electricity']).plot.bar(ax=axs[1, 0], rot=0, subplots=True)\npd.value_counts(train['water']).plot.bar(ax=axs[1, 1], rot=0, subplots=True)\npd.value_counts(train['solar']).plot.bar(ax=axs[1, 2], rot=0, subplots=True)\npd.value_counts(train['gas']).plot.bar(ax=axs[1, 3], rot=0, subplots=True)","9633a64b":"train.loc[:, 'yearbuilt':'Steam Heating'].isin([0]).sum().sort_values(ascending=False)","87cf18c3":"train = train.drop(['solar', 'chilledwater', 'water', 'steam', 'irrigation'], axis=1)\neda = eda.drop(['solar', 'chilledwater', 'water', 'steam', 'irrigation'], axis=1)\neda.info()","106ab010":"drop_cols = ['eui', 'leed_level', 'Oil Heating', 'Boiler fed central heating', 'Gas Boilers', 'District Heating',\n             'Heat network but not ours', 'Heat network and steam', 'Steam Heating', 'Electric Heating',\n             'Electricity', 'Heat network']\n\neda = eda.drop(drop_cols, axis=1)\ntrain = train.drop(drop_cols, axis=1)\neda.info()","cfddda8f":"# dealing with the nulls in yearbuilt in the training data by filling in with mean of entire dataset\neda['yearbuilt'] = eda['yearbuilt'].fillna(eda.yearbuilt.mean()).astype('int64')\ntrain['yearbuilt'] = train['yearbuilt'].fillna(eda.yearbuilt.mean()).astype('int64')\ntrain.info()","d163b7f7":"pd.value_counts(train['yearbuilt']).plot.bar(title='distribution of year built', figsize=(10,5))","06380ec3":"fig, axs = plt.subplots(1,2, figsize=(20,5))\npd.value_counts(train['usage']).plot.bar(title='Distribution of Usage in Train', ax=axs[0], rot=0)\npd.value_counts(train['subusage']).plot.bar(title='Distribution of Subusage in Train', ax=axs[1])","8b382d26":"u1 = train[train['usage']=='Education']\nu2 = train[train['usage']=='Government']\nu = pd.concat([u1, u2])\nusages = pd.get_dummies(u['usage'])\ntrain = pd.concat([u, usages], axis=1).drop('usage', axis=1)\ntrain","077496b9":"train = train.drop('subusage', axis=1)\neda = eda.drop('subusage', axis=1)\neda","297e3705":"import seaborn as sns\nfig, axs = plt.subplots(1,2, figsize=(20,5))\nsns.distplot(train['sqm'], ax=axs[0]).set_title('Distribution of Building sqm')\nsns.distplot(train['sqft'], ax=axs[1]).set_title('Distribution of Building sqft')","d66ef6ef":"fig, axs = plt.subplots(1,2, figsize=(20,5))\npd.value_counts(train['timezone']).plot.bar(title='Distribution of Time Zones in Train', ax=axs[0])\npd.value_counts(eda['timezone']).plot.bar(title='Distribution of Time Zones in Full Dataset', ax=axs[1])","86fc4fcb":"eur1 = train[train['timezone']=='Europe\/London']\neur2 = train[train['timezone']=='Europe\/Dublin']\neur = pd.concat([eur1, eur2])\ntimezones = pd.get_dummies(eur['timezone'])\ntrain = pd.concat([eur, timezones], axis=1).drop('timezone', axis=1)\ntrain","e4b1ce69":"eur1 = eda[eda['timezone']=='Europe\/London']\neur2 = eda[eda['timezone']=='Europe\/Dublin']\neur = pd.concat([eur1, eur2])\ntimezones = pd.get_dummies(eur['timezone'])\neur_eda = pd.concat([eur, timezones], axis=1).drop('timezone', axis=1)\neur_eda","348dae17":"u1 = eur_eda[eur_eda['usage']=='Education']\nu2 = eur_eda[eur_eda['usage']=='Government']\nu = pd.concat([u1, u2])\nusages = pd.get_dummies(u['usage'])\neur_eda = pd.concat([u, usages], axis=1).drop('usage', axis=1)\neur_eda","56941cde":"fig, axs = plt.subplots(1,2, figsize=(20,5))\nplt1 = pd.value_counts(train['site_id_kaggle']).plot.bar(ax=axs[0], title='Distribution of Kaggle Site IDs')\nplt2 = pd.value_counts(train['site_id']).plot.bar(ax=axs[1], title='Distribution of Site IDs')","23446059":"fig, axs = plt.subplots(1,2, figsize=(20,5))\npd.value_counts(train['lat']).plot.bar(ax=axs[0], title='Distribution of Latitudes')\npd.value_counts(train['lng']).plot.bar(ax=axs[1], title='Distribution of Longitudes')","5a14c475":"eda = eda.drop(['site_id_kaggle', 'building_id_kaggle'], axis=1)\neur_eda = eur_eda.drop([ 'site_id_kaggle', 'building_id_kaggle'], axis=1)\ntrain = train.drop(['site_id_kaggle', 'building_id_kaggle'], axis=1)\neda.info()","807373ad":"eur_eda.info()","2c63e6a3":"train.info()","9d14e07f":"ids = eur_eda['building_id']\nids = ids.unique()\nids","f2c95f4d":"def annual(path, data, name):\n    name1 = '2016_'+name\n    name2 = '2017_'+name\n    os.chdir(path)\n    d = pd.read_csv(data)\n    d['Datetime'] = pd.to_datetime(d['timestamp'])\n    d = d.set_index(pd.DatetimeIndex(d['Datetime']))\n    d = d.drop('timestamp', axis=1)\n    d = d.resample('Y').mean()\n    d = d.T.reset_index().rename(columns={'index': 'building_id'})\n    d = d.rename_axis('index')\n    d = d.rename(columns={d.columns[1]: name1, d.columns[2]: name2})\n    return d    ","5d41ead2":"annual_hotWater = annual('\/kaggle\/input\/hot-eda\/', 'hot_water_cleaned.csv', 'HotWater')\nannual_gas = annual('\/kaggle\/input\/gas-eda', 'gas_cleaned_new.csv', 'Gas')\nannual_electricity = annual('\/kaggle\/input\/electricity-data-cleaning', 'electricity_cleaned_new.csv', 'Electricity')","f730d15b":"eur_eda = pd.merge(left=eur_eda, right=annual_hotWater, how='left', left_on='building_id', right_on='building_id')\neur_eda = pd.merge(left=eur_eda, right=annual_gas, how='left', left_on='building_id', right_on='building_id')\neur_eda = pd.merge(left=eur_eda, right=annual_electricity, how='left', left_on='building_id', right_on='building_id')\n\neur_eda[['2016_HotWater', '2016_Gas', '2016_Electricity']] = eur_eda[['2016_HotWater', '2016_Gas', '2016_Electricity']].fillna(-1)\neur_eda[['2017_HotWater', '2017_Gas', '2017_Electricity']] = eur_eda[['2017_HotWater', '2017_Gas', '2017_Electricity']].fillna(-1)\neur_eda.info()","35540812":"train = eur_eda[eur_eda['rating'].notna()]\ntrain.info()","70960f30":"test = eur_eda[eur_eda['rating'].isnull()]\ntest = test.drop('rating', axis=1)\ntest.info()","f0dd5eaa":"os.chdir('\/kaggle\/input\/hot-eda\/')\nhot = pd.read_csv('hot_water_cleaned.csv')\nprint(hot.shape)\nhot.head()","ffbe749e":"hot.dtypes","8cf97559":"hot['Datetime'] = pd.to_datetime(hot['timestamp'])\nhot = hot.set_index(pd.DatetimeIndex(hot['Datetime']))\nhot = hot.drop('timestamp', axis=1)\nhot.head()","8fc07695":"hot = hot.resample('Y').mean()\nprint(hot.shape)\nhot.head()","1d5592f8":"hot = hot.T.reset_index().rename(columns={'index': 'building_id'})\nhot = hot.rename_axis('index')\nhot.head()","f3694a7a":"hot.dtypes","b9864043":"hot = hot.rename(columns={hot.columns[1]: '2016_Avg_HotWater', hot.columns[2]: '2017_Avg_HotWater'})\nhot.info()","5a63bbc2":"#eur_eda = pd.merge(left=eur_eda, right=hot, how='left', left_on='building_id', right_on='building_id')\n#eur_eda['2016_Avg_HotWater'] = eur_eda['2016_Avg_HotWater'].fillna(-1)\n#eur_eda['2017_Avg_HotWater'] = eur_eda['2017_Avg_HotWater'].fillna(-1)\neur_eda.info()","13479900":"#train = eur_eda[eur_eda['rating'].notna()]\ntrain.info()","664619fe":"#test = eur_eda[eur_eda['rating'].isnull()]\n#test = test.drop('rating', axis=1)\ntest.info()","b09a054f":"train.to_csv('\/kaggle\/working\/train_rating_eu.csv')\ntest.to_csv('\/kaggle\/working\/test_rating_eu.csv')","51b91455":"**Dropped Columns:** chilledwater, water, steam, solar, irrigation, building_id_kaggle, building_id, site_id_kaggle, eui, leed_level, Oil Heating, Boiler fed central heating, Gas Boilers, District Heating, Heat network but not ours, Heat network and steam, Steam Heating, Electric Heating, Electricity, Heat network, subusage\n\n**Dropped Rows:** rows where the timezone was NOT European\/London or European\/Dublin\n\n**Outliers:** none identified after looking at distribution of remaining numerical variables\n\n**Data Types:** one-hot encoded time zone and usage, only remaining categorical variable is site_id\n\n**Missing Data:** filled nulls in yearbuilt with mean\n\n**Train Dataset:** prelabeled with rating (121 entries); not balanced\n\n**Preliminary Test Dataset:** no labels, only Europoean timezones (55 entries)","3aab80f8":"### Steps Written Out to Show how The Above Function Works\nFeature engineering to calculate the annual resource use for electricity, gas, and hot water consumption\n\n**Don't need to run if you already ran the above section using the annual function**","615f4ca9":"- add annual averages for usage of various additional datasets (gas, electricity, hotwater)\n- fill in null values with -1 (preserving the ability of the classification alogorithm to identify these values as missing since it is not possible to have negative annual averages for those that actually contain information)\n","868c8675":"## Modeling","74290a40":"# Challenge: Predict Energy Rating from Raw Data\n## Reading in the Data (metadata)","1d31478d":"## EDA","76a59267":"## Save Finalized Train and Test Datasets","efec7f6b":"## Feature Engineering"}}