{"cell_type":{"b357d25a":"code","1a04f742":"code","44780a6c":"code","83042277":"code","3e2adbed":"code","0cfb10ea":"code","db3ff1e2":"code","e4ba1ac2":"code","5c2d5bdb":"code","ab2949e9":"code","4d3dac04":"code","e158aae9":"code","34c91b01":"code","96e5f6a5":"code","c344c47c":"code","b6f26b58":"markdown","88266fa5":"markdown","497b2ac1":"markdown"},"source":{"b357d25a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport keras\nfrom keras import layers\nfrom keras.layers import Input, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout, GlobalMaxPooling2D, GlobalAveragePooling2D\nfrom keras.models import Model\n\n        \nimport keras.backend as K\nK.set_image_data_format('channels_last')\n\nfrom matplotlib.pyplot import imshow\nfrom keras.preprocessing import image\nfrom keras import applications\nfrom keras.models import Sequential\nimport os,sys\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\nimport cv2\nfrom keras.preprocessing.image import ImageDataGenerator","1a04f742":"os.listdir('..\/input\/cropped')","44780a6c":"img = cv2.imread('..\/input\/cropped\/cropped\/train\/n02085620-Chihuahua\/n02085620_7.jpg')\nprint(img.shape)\nimg1 = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\nplt.imshow(img1)","83042277":"train_dir = '..\/input\/cropped\/cropped\/train\/'\ntest_dir = '..\/input\/cropped\/cropped\/test\/'","3e2adbed":"# Training generator\ndatagen = ImageDataGenerator( \n    width_shift_range=0.1,  # randomly shift images horizontally (10% of total width)\n    height_shift_range=0.1,  # randomly shift images vertically (10% of total height)\n    rotation_range=40,\n    zoom_range = 0.1,\n    rescale=1.\/255,\n    validation_split=0.33)\ntrain_generator = datagen.flow_from_directory(\n    directory=train_dir,\n    target_size=(224, 224),\n    color_mode=\"rgb\",\n    batch_size=64,\n    class_mode=\"categorical\",\n    shuffle=True,\n    seed=42, \n    subset=\"training\"\n)\n\n# Valid generator\n\nvalid_generator = datagen.flow_from_directory(\n    directory=train_dir,\n    target_size=(224, 224),\n    color_mode=\"rgb\",\n    batch_size=64,\n    class_mode=\"categorical\",\n    shuffle=True,\n    seed=42, \n    subset=\"validation\"\n)\n\n# Test generator\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_datagen.flow_from_directory(\n    directory=test_dir,\n    target_size=(224, 224),\n    color_mode=\"rgb\",\n    batch_size=32,\n    class_mode=\"categorical\",\n    shuffle=False,\n    seed=42\n)","0cfb10ea":"from keras import optimizers\nfrom keras.callbacks import ReduceLROnPlateau\n\noptimizer = optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=None, decay=0.0)","db3ff1e2":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","e4ba1ac2":"STEP_SIZE_TRAIN=train_generator.n\/\/train_generator.batch_size\nSTEP_SIZE_VALID=valid_generator.n\/\/valid_generator.batch_size","5c2d5bdb":"from keras.applications.xception import Xception\nbase_model = Xception(weights='imagenet', include_top=False)","ab2949e9":"# add a global spatial average pooling layer\nx = base_model.output\nx = GlobalAveragePooling2D()(x)\n# let's add a fully-connected layer\nx = Dense(1024, activation='relu')(x)\n# and a logistic layer -- \npredictions = Dense(120, activation='softmax')(x)\n\n# first: train only the top layers (which were randomly initialized)\n# i.e. freeze all convolutional Xception layers\nfor layer in base_model.layers:\n    layer.trainable = False\n    \n# this is the model we will train\nxception = Model(inputs=base_model.input, outputs=predictions)","4d3dac04":"xception.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])","e158aae9":"xception.fit_generator(generator=train_generator,\n                    steps_per_epoch=STEP_SIZE_TRAIN,\n                    validation_data=valid_generator,\n                    validation_steps=STEP_SIZE_VALID,\n                    epochs=10,\n                    verbose=1,\n                    callbacks=[learning_rate_reduction]\n)","34c91b01":"STEP_SIZE_TEST=test_generator.n\/\/test_generator.batch_size","96e5f6a5":"loss, acc = xception.evaluate_generator(generator=test_generator, steps=STEP_SIZE_TEST, verbose=0)","c344c47c":"print(loss, acc)","b6f26b58":"# Dog breed classification with Stanford Dogs Dataset cropped according to annotations and splited into a train and test data. ","88266fa5":"# Xception model","497b2ac1":"![](https:\/\/i.imgur.com\/ZgEzXMc.jpg)"}}