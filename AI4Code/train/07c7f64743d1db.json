{"cell_type":{"60124818":"code","9925012f":"code","832d888a":"code","6e9a49ee":"code","8f74fbce":"code","42fa76d9":"code","8f9f8a71":"code","18f39306":"code","107e0244":"code","eca8b23b":"code","d690a7a3":"code","7b361952":"code","bd3c0767":"code","927d9742":"code","bafbdde0":"code","07e4c73d":"code","8dc880c7":"code","235a3340":"code","1ac65ac2":"code","f319e8e0":"code","820d5d17":"code","951999df":"code","91240f7d":"code","c4c2e3ed":"code","17993adf":"code","2e240783":"code","a0723ba6":"code","c2f0c158":"code","b5e9a7ce":"code","1cd54287":"code","33b43d1f":"code","f6d2cb8b":"code","2d2089cc":"code","1370da46":"code","e6dbaf96":"code","57d26765":"code","f6519334":"code","8653e076":"code","64cf21f6":"code","0a2a4f6a":"code","4d858f8a":"code","b4d81b09":"code","bdd61724":"code","55881a2f":"code","7c9fe27a":"code","8cb99ee5":"code","d84ca621":"code","fdefdb11":"code","49013958":"code","493f222c":"code","aded6943":"code","de1f27b3":"code","410b45d3":"code","656875ad":"code","e09af731":"code","eb2939cc":"code","a91b68f2":"code","628b8d8a":"code","8a0d4735":"code","a954e4b7":"code","204cdc09":"code","104aedfe":"code","efb32626":"code","312206e7":"code","7aa69d9d":"code","15e4daf1":"code","8ecde61b":"code","92e59229":"code","2ee15bda":"code","44386248":"code","9a3ffce7":"code","ed46053d":"code","d944f3e8":"code","922d3c2d":"code","109e43c3":"code","f03d324f":"code","7b58ffca":"code","4158fe4c":"code","6791ec33":"code","56ce7236":"code","aeb9cd33":"code","14881bc6":"code","a71e43f8":"code","026d6ac4":"code","914a7722":"code","8032fdad":"code","081a4211":"code","daadb425":"code","699f0238":"code","9efbc07d":"code","50d638c3":"code","879be074":"code","2818d3f7":"code","17c190a1":"code","14ae5289":"code","297cb28d":"code","cf53aaa7":"code","5b6d6b23":"code","e8f1f0e1":"code","33e64384":"code","b899ae31":"code","3a54ed29":"code","032f924c":"code","e0f83bdf":"code","b6229db6":"code","230dc1f3":"code","648b48ab":"code","731f5529":"code","4a88a3a4":"code","d5b38d1f":"code","a73474ef":"code","1c90bada":"code","2299445e":"code","bd9a30bc":"code","8e7f375f":"code","c7376743":"code","a90657f6":"code","8191551a":"code","66bbd370":"code","38131bfc":"code","23fcb27d":"code","a664677d":"code","68c3e646":"code","571277c0":"code","d42d09d6":"code","0b52f7e7":"code","e4ae95e5":"code","c76da956":"code","ae02d9ee":"markdown","4192976d":"markdown","c824ae82":"markdown","5596cd9d":"markdown","e24740d7":"markdown","78d6baaf":"markdown","f2e6b90b":"markdown","f8d47fca":"markdown","a350620f":"markdown","3456b907":"markdown","a217f2f2":"markdown","b6a590e2":"markdown","a01cf396":"markdown","79e454aa":"markdown","d1e68785":"markdown","03502651":"markdown","a3a86101":"markdown","2ecb1a05":"markdown","27592916":"markdown","a6fa1009":"markdown","0abc701d":"markdown","ce1a4a69":"markdown","1b49fd37":"markdown","d0191179":"markdown","a667a5f2":"markdown","e1969aac":"markdown","00fd0cc2":"markdown","04d679dd":"markdown","45d4baa8":"markdown","384075db":"markdown","6243121f":"markdown","780632be":"markdown","0a6a00b7":"markdown","1b3c3d9f":"markdown","0cbb59fb":"markdown","7adaddfd":"markdown","9e627144":"markdown","317547e3":"markdown","639e7a46":"markdown","b6f8eb10":"markdown","3d9605f3":"markdown","65d641ee":"markdown","094e7835":"markdown","19f0271e":"markdown","c177d62f":"markdown","f0e9616c":"markdown","f6478204":"markdown","388646e7":"markdown","21147e64":"markdown","8f996a22":"markdown","a7afbedd":"markdown","b7c801a2":"markdown","2967482e":"markdown","aa94ebc5":"markdown","54f41971":"markdown","c38fb99f":"markdown","b83af606":"markdown","977e1a54":"markdown","6ca31282":"markdown","0bb936b9":"markdown","f184c4c3":"markdown","5bfd523d":"markdown","69243642":"markdown","1ef66339":"markdown","dc8e476c":"markdown","6d0ea6f5":"markdown","2aa8d436":"markdown","36ffda43":"markdown","e01d9c4e":"markdown","6b10365d":"markdown","32a57f62":"markdown","a491eb00":"markdown","726d93f3":"markdown","5f396b86":"markdown","2d99928b":"markdown","7d6ace0f":"markdown","d4e1e965":"markdown","04064b40":"markdown","c5015197":"markdown","fa3d496f":"markdown","2a6939a1":"markdown","d4ccdca2":"markdown","63e9ec67":"markdown","150d90f5":"markdown","006ea87f":"markdown","be89ca32":"markdown","f8842794":"markdown","52113e8f":"markdown","216406e3":"markdown","2eeb7aae":"markdown","c3f18246":"markdown","a897bc7c":"markdown","9debe125":"markdown","29905b3e":"markdown","c900d5cc":"markdown","0a56fdc0":"markdown","cc2507d3":"markdown","f4290d24":"markdown","bbb8c78c":"markdown","7e730a61":"markdown","08084432":"markdown","4c74cb29":"markdown","9c9f33e0":"markdown","46557738":"markdown","9420bd80":"markdown","d789dc2f":"markdown","db512ddf":"markdown","1430d987":"markdown","4622ec56":"markdown","3956dc95":"markdown","a01c516c":"markdown","caed596f":"markdown","d5aa9e58":"markdown","eceaefe3":"markdown","e7c5c73a":"markdown","45ce2f5d":"markdown","574c95b4":"markdown","86d19b71":"markdown","9641313e":"markdown","7c8e2f2c":"markdown","08f85911":"markdown","33a7848a":"markdown","18384657":"markdown","40157ba3":"markdown","5790ef8b":"markdown","436798c4":"markdown","298613c5":"markdown","06c7312c":"markdown","2ed14fee":"markdown","07a70e35":"markdown","4ed167a8":"markdown","86381f8b":"markdown","68a3ce60":"markdown","774700d0":"markdown","5d04f029":"markdown","011e431f":"markdown","678163cf":"markdown","580925dd":"markdown","8d85eff5":"markdown","c926e9d9":"markdown","8680d2c3":"markdown","2e4ef3c0":"markdown","33fe7146":"markdown","3ac43a8a":"markdown","dd4f6cbb":"markdown","539db929":"markdown","0e2510d6":"markdown","4399c3cd":"markdown","fe21a97e":"markdown","f51551f6":"markdown","ab11b0e4":"markdown","1145ee54":"markdown","3dc3d6e0":"markdown","c6c09f4b":"markdown","bc0c1fc8":"markdown","158b852a":"markdown"},"source":{"60124818":"import numpy as np\nimport scipy.integrate\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# definindo o sistema de EDO's\ndef rigid (y, t):\n    return [ y[1]*y[2], -y[0]*y[2], -0.51*y[0]*y[1] ]\n\n# faixa de tempo\nt = np.arange(0.0, 12.1, 0.1)\n\n# condi\u00e7\u00e3o inicial\nx0 = [0.0, 1.0, 1.0]\n\n# resolvendo!!\nx = scipy.integrate.odeint(rigid, x0, t) \n\n# plotando\nplt.plot(t,x)\nplt.xlabel (\"Tempo, t (s)\")\nplt.ylabel (\"Posi\u00e7\u00e3o, x (m)\");","9925012f":"obj = 2","832d888a":"obj = 3","6e9a49ee":"id(obj)","8f74fbce":"type(obj)","42fa76d9":"novo_nome = 3","8f9f8a71":"id(obj)","18f39306":"id(novo_nome)","107e0244":"dir()","eca8b23b":"# Este \u00e9 um coment\u00e1rio. Coment\u00e1rios s\u00e3o linhas que come\u00e7am com hashtag (#)\n# Coment\u00e1rios s\u00e3o ignorados pelo interpretador do Python.\n# Eles s\u00f3 servem para o programador se comunicar com eventuais \n# leitores do c\u00f3digo, como vc, caro amigo.\n\n# abaixo temos comandos para realizar as opera\u00e7\u00f5es aritm\u00e9ticas\n\na = 3\nb = 4\nc = a + b\nd = a*b\ne = c\/d\nf = b**a","d690a7a3":"print(c)\nprint(d)\nprint(e)\nprint(f)\nprint(c+d)","7b361952":"type(c)","bd3c0767":"type(d)","927d9742":"type(e)","bafbdde0":"oi = 2.5\ntype(oi)","07e4c73d":"ai = 1.0 - 2.0j\ntype(ai)","8dc880c7":"ei = complex(2.0,3.0)\ntype(ei)","235a3340":"print(ai+ei)","1ac65ac2":"import numpy as np","f319e8e0":"valor1 = np.cos(0)\nvalor2 = np.sin(np.pi)\n\nprint(valor1)\nprint(valor2)","820d5d17":"lista_bolada = [1,2,3]","951999df":"elemento1 = lista_bolada[0]\nelemento2 = lista_bolada[1]\nelemento3 = lista_bolada[2]","91240f7d":"print(elemento1)\nprint(elemento2)\nprint(elemento3)","c4c2e3ed":"ult = lista_bolada[-1]\npenult = lista_bolada[-2]\nantepenult = lista_bolada[-3]\n\nprint(ult)\nprint(penult)\nprint(antepenult)","17993adf":"A = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nB = A[1:8:2]\n\nprint(B)","2e240783":"print(A[1: :2])","a0723ba6":"print(A[0:4])","c2f0c158":"print(A)","b5e9a7ce":"A[0:9:2] = [1, 3, 5, 7, 9]\n\nprint(A)","1cd54287":"lista_sagaz = [1.0, 2.0-3j, np.cos]\n\nx = lista_sagaz[2](np.pi)\n\nprint(x)","33b43d1f":"tupla_boladona = 1,2,3","f6d2cb8b":"tupla_mandada = (1,2,3)","2d2089cc":"a, b, c = 1, 2, 3","1370da46":"print(a)\nprint(b)\nprint(c)","e6dbaf96":"a, b = b, a","57d26765":"print(a)\nprint(b)","f6519334":"tupla_guardada = (100,200,300,400,500)\n\nprint(tupla_guardada[0:3:2])","8653e076":"s1 = 'Oi! Eu sou uma string!'\ntype(s1)","64cf21f6":"s2 = \"Ol\u00e1. Eu tamb\u00e9m sou uma string.\"\ntype(s2)","0a2a4f6a":"print(s1,s2)","4d858f8a":"delta_S = 2.0\ndelta_t = 3.0\n\nv = delta_S\/delta_t\n\nprint(\"A velocidade m\u00e9dia vale: \",v, \"m\/s.\")","b4d81b09":"S = 'computador'\n\nprint(S[0:3], S[7:])","bdd61724":"# dicion\u00e1rio armazenando massas molares de tr\u00eas subst\u00e2ncias\n# os \u00edndices dos objetos s\u00e3o strings contendo as f\u00f3rmulas das subst\u00e2ncias\nmassas_molares = {'H20': 18, 'CO2': 44, 'H2': 2}\n\nprint(massas_molares['CO2'])","55881a2f":"# dicion\u00e1rio armazenando os vencedores da copa do mundo fifa, de 1990 a 2014\n# os \u00edndices dos objetos s\u00e3o n\u00fameros inteiros representando os anos das copas\n\nvencedores_copas = {1990: 'Alemanha', 1994: 'Brasil', 1998: 'Fran\u00e7a',\\\n                    2002: 'Brasil', 2006: 'It\u00e1lia', 2010: 'Espanha',\\\n                    2014: 'Alemanha', 2018: 'Fran\u00e7a'}\n\nprint(vencedores_copas[2014])","7c9fe27a":"A = np.array([1,2,3,4])\n\nprint(A)","8cb99ee5":"B = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])\n\nprint(B)","d84ca621":"print(B[0,2])","fdefdb11":"B[0:2,1:4]","49013958":"B[:,3]","493f222c":"B[0,:]","aded6943":"A = np.arange(0.0, 5.0, 0.5)\nprint(A)","de1f27b3":"B = np.linspace(0.0, 5.0, 3)\nprint(B)","410b45d3":"C = np.zeros(3)\nprint(C)","656875ad":"D = np.zeros((2,3))\nprint(D)","e09af731":"E = np.ones((4,5))\nprint(E)","eb2939cc":"F = np.zeros_like(E)\nprint(F)","a91b68f2":"G = np.random.standard_normal((2,3))\nprint(G)","628b8d8a":"A = np.array([[1,2],[3,4]])\nprint(A)","8a0d4735":"B = np.array([[5,6],[7,8]])\nprint(B)","a954e4b7":"C = A@B\nprint(C)","204cdc09":"D = A*B\nprint(D)","104aedfe":"E = D.T\nprint(E)","efb32626":"F = np.linalg.inv(A)\nprint(F)","312206e7":"G = np.linalg.norm(B)\nprint(G)","7aa69d9d":"H = np.linalg.eigvals(A)\nprint(H)","15e4daf1":"import matplotlib.pyplot as plt","8ecde61b":"x = np.linspace(-2*np.pi,2*np.pi,50)","92e59229":"y = np.cos(x)","2ee15bda":"plt.plot(x,y);","44386248":"plt.plot(x,y,'*r');","9a3ffce7":"help(plt.plot)","ed46053d":"# definindo pontos do eixo x\nx = np.arange(0.0, 1.0, 0.001)\n\n# plotando quatro curvas\nplt.plot(x, x**2, label ='$y = x^2$')\nplt.plot(x, x**3, label = '$y = x^3$')\nplt.plot(x, x**(1\/2), label = '$y = \\sqrt{x}$')\nplt.plot(x, x**(1\/3), label='$y = \\sqrt[3]{x}$')\n\n# limites dos eixos: fun\u00e7\u00e3o axis\n# o argumento deve ser uma lista na forma [xmin, xmax, ymin, ymax]\nplt.axis([0, 1, 0, 1])\n\n# t\u00edtulo do gr\u00e1fico: fun\u00e7\u00e3o title\nplt.title('Gr\u00e1ficos bolad\u00f5es')\n\n# legendas dos eixos: fun\u00e7\u00f5es xlabel e ylabel\nplt.xlabel('Eixo x bolad\u00e3o')\nplt.ylabel('Eixo y bolad\u00e3o')\n\n# legendas das curvas: fun\u00e7\u00e3o legend\nplt.legend();","d944f3e8":"from mpl_toolkits.mplot3d import Axes3D","922d3c2d":"x = y = np.linspace(-4, 4, 50)\nX, Y = np.meshgrid(x, y)","109e43c3":"Z = (X**2 + Y**2)","f03d324f":"fig, ax = plt.subplots(subplot_kw={'projection': '3d'})\nax.plot_surface(X, Y, Z);","7b58ffca":"T = float(input(\"Insira uma temperatura em graus Celsius, por favor: \"))\n\nif T<-273.15:\n    print('Temperatura abaixo do zero absoluto!')\nelif T>-273.15 and T<0:\n    print('\u00c1gua no estado s\u00f3lido.')\nelif T==0:\n    print('\u00c1gua no equil\u00edbrio s\u00f3lido-l\u00edquido.')\nelif T>0 and T<100:\n    print('\u00c1gua no estado l\u00edquido.')\nelif T==100:\n    print('\u00c1gua no equilibrio l\u00edquido-vapor.')\nelse:\n    print('\u00c1gua no estado vapor.')","4158fe4c":"if (100>2000):\n    print('se esta string for impressa, significa que 100 \u00e9 maior que 2000!')\n    print('se o python imprimir essa string, ele ficou doido!')\nprint('essa string vai ser impressa pq n\u00e3o faz parte do if.')","6791ec33":"i = 10\n\nwhile i>0:\n    print(i)\n    i = i-1\n    \nprint('acabou!')","56ce7236":"sequencia = [1,2,3,4,5]\n\nfor i in sequencia:\n    print(i)\n    \nprint('acabou!')","aeb9cd33":"palavra = 'ain'\n\nfor cada_letrinha in palavra:\n    print(cada_letrinha)","14881bc6":"a = range(1,11,2)\n\nprint(a)\nprint(a[0])\nprint(a[1])\nprint(a[2])\nprint(a[3])\nprint(a[4])","a71e43f8":"L = [1,2,3,4,5]\nsoma = 0\n\nfor i in range(len(L)):\n    soma = soma+ L[i]**2\n\nprint(soma)","026d6ac4":"str = 'Nao gosto da letra a. Nao gosto que imprimam a letra a'\n\nfor s in str:\n    if s == 'a':\n        continue\n    print(s,end='')","914a7722":"str = 'Nao gosto da letra a. Nao gosto que imprimam a letra a'\n\nfor s in str:\n    if s == 'a':\n        break\n    print(s,end='')","8032fdad":"a = [i for i in range(10)]\na","081a4211":"b = [i for i in range(10) if i%2!=0]\nb","daadb425":"def somar2 (x):\n    y = x+2\n    return y","699f0238":"somar2(4)","9efbc07d":"k = 20\nz = somar2(k)\nprint(z)","50d638c3":"y = np.zeros((4,3))\nx = somar2(y)\nprint(x)","879be074":"def funcao_bolada (arg1, arg2):\n    \n    arg1 = 1.0\n    \n    for i in range(len(arg2)):\n        arg2[i] = 1.0\n        \narg1 = 0.0\narg2 = np.zeros((2,2))\n\nfuncao_bolada(arg1, arg2)\n\nprint(arg1)\nprint(arg2)","2818d3f7":"def f(t, A=1, a=1, omega=2*np.pi):\n    return A*np.exp(-a*t)*np.cos(omega*t)","17c190a1":"result1 = f(1)\nresult2 = f(1, a=2)\nresult3 = f(1, omega=4*np.pi, A=4)\n\nprint(result1, result2, result3)","14ae5289":"A = np.array([[3.5, 2.0, 0.0],[-1.5, 2.8, 1.9],[0, -2.5, 3.0]])\nb = np.array([5,-1,2])\n\nx = np.linalg.solve(A,b)\n\nprint(x)","297cb28d":"import scipy.optimize","cf53aaa7":"# definindo o sistema de equa\u00e7\u00f5es como uma fun\u00e7\u00e3o do Python\n\ndef func (x):\n    return [x[0]\/(1.0+np.exp(-27.*x[1])*(x[0]\/3.-1.))-5, \n            x[0]\/(1.0+np.exp(-39.*x[1])*(x[0]\/3.-1.))-6]\n    \n# estimativa inicial \n    \nx0 = [10, 0.1]\n    \n# resolvendo!    \n    \nresult = scipy.optimize.root(func, x0)    \n\n# imprimindo resultado\n\nprint(result)","5b6d6b23":"print(result.x)","e8f1f0e1":"import scipy.integrate","33e64384":"# definindo o sistema de equa\u00e7\u00f5es\ndef dCdt (C,t,k1,k2):\n    return [-k1*C[0], k1*C[0]-k2*C[1], k2*C[1]]\n    \n# par\u00e2metros\nk = (2,1)\n    \n# pontos no tempo\nt = np.arange(0.0,5.1,0.1)\n\n# condi\u00e7\u00f5es iniciais\nc0 = [5, 0, 0]\n\n# resolvendo!\nc = scipy.integrate.odeint(dCdt,c0,t,args=k)\n\n#plotando\nplt.plot(t,c)\n\n# ajeitando o gr\u00e1fico\nplt.xlabel('$t$ (h)')\nplt.ylabel('$C$ (mol\/L)')\nplt.legend(['$C_A$','$C_B$','$C_C$'])\nplt.axis([0,5,0,5]);","b899ae31":"from matplotlib import cm\n\nx = np.linspace(-2,2,20)\ny = np.linspace(-1,3,20)\nX,Y = np.meshgrid(x,y)\n\nZ = 100*(Y-X**2)**2 + (1-X)**2\n\nfig, ax = plt.subplots(subplot_kw={'projection': '3d'})\nax.plot_surface(X, Y, Z, cmap=cm.rainbow)\n\nax.set_xlabel('$x$')\nax.set_ylabel('$y$')\nax.set_zlabel('$f(x,y)$');","3a54ed29":"def rosenbrock (x):\n    return 100*(x[1]-x[0]**2)**2 + (1-x[0])**2","032f924c":"# estimativa inicial \nx0 = [0, 0]\n\n# minimizando!\nresultado = scipy.optimize.minimize(rosenbrock, x0)\n\nprint(resultado)","e0f83bdf":"x = y = np.linspace(-512,512,1000)\nX,Y = np.meshgrid(x,y)\n\nZ = -(Y+47)*np.sin((abs(X\/2+Y+47))**0.5) - X*np.sin((abs(X-(Y+47)))**0.5)\n\nfig, ax = plt.subplots(subplot_kw={'projection': '3d'})\nax.plot_surface(X, Y, Z, cmap=cm.inferno);","b6229db6":"def caixa_de_ovos(x):\n    return (-(x[1]+47)*np.sin((abs(x[0]\/2+x[1]+47))**0.5) \n           - x[0]*np.sin((abs(x[0]-(x[1]+47)))**0.5))","230dc1f3":"# limite de busca das vari\u00e1veis\nbounds = ((-512,512),(-512,512))\n\n# minimizando!\nresultado = scipy.optimize.differential_evolution(caixa_de_ovos, bounds)\n\nprint(resultado)","648b48ab":"resultado = scipy.optimize.differential_evolution(caixa_de_ovos, bounds, \n                                                  popsize=30, strategy = 'best2bin')\n\nprint(resultado)","731f5529":"import pandas as pd","4a88a3a4":"obj1 = pd.Series([5,6,8,9])\nprint(obj1)","d5b38d1f":"obj2 = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c'])\nprint(obj2)","a73474ef":"print(obj1.values)\nprint(obj1.index)","1c90bada":"print(obj2.values)\nprint(obj2.index)","2299445e":"obj2['b']","bd9a30bc":"obj2['e'] = 9\nobj2","8e7f375f":"sdata = {'Rio de Janeiro': 35000, 'S\u00e3o Paulo': 71000, 'Minas Gerais': 16000, 'Esp\u00edrito Santo': 5000}\nobj3 = pd.Series(sdata)\nprint(obj3)","c7376743":"states = ['S\u00e3o Paulo', 'Cear\u00e1', 'Rio de Janeiro', 'Rio Grande do Sul']\nobj4 = pd.Series(sdata, index=states)\nprint(obj4)","a90657f6":"obj3+obj4","8191551a":"nomes =['Tamefreu Chopin','Gumercindo Carrara','Acheropita Pac\u00edfico','Afr\u00e2nia Salgueiro']\n\ndados = {'P1': [8.0, 5.5, 4.3, 10.0],\n         'P2': [2.0, 6.0, 7.4, 10.0]}\n\ndf1 = pd.DataFrame(dados, index = nomes)\ndf1","66bbd370":"df1 = df1.sort_index()\ndf1","38131bfc":"df1['P1']","23fcb27d":"df1['P2'].values","a664677d":"df1.loc['Acheropita Pac\u00edfico']","68c3e646":"df1.loc['Gumercindo Carrara','P1']","571277c0":"df1['M\u00e9dia'] = 0.5*(df1['P1']+df1['P2'])\ndf1","d42d09d6":"df1['PF'] = [6.0,np.nan,1.5,4.9]\n\ndf1['M\u00e9dia Final'] = [0.5*(df1['M\u00e9dia'].loc[x]+df1['PF'].loc[x]) if pd.notnull(df1['PF'].loc[x]) \\\n                                                                 else df1['M\u00e9dia'].loc[x] \\\n                                                                 for x in df1.index]\n\ndf1['Situa\u00e7\u00e3o'] = ['Aprovado(a)' if df1['M\u00e9dia Final'].loc[x]>=5 else 'Reprovado(a)' for x in df1.index]\n\ndf1","0b52f7e7":"df1 = df1.sort_values(by='M\u00e9dia Final',ascending=False)\ndf1","e4ae95e5":"df1.loc['M\u00e9dia da turma'] = df1.mean()\ndf1.loc['Desvio-padr\u00e3o da turma'] = df1.std()\ndf1","c76da956":"df1.round(2)","ae02d9ee":"Um *objeto* em Python \u00e9 uma regi\u00e3o da mem\u00f3ria do computador contendo dados e informa\u00e7\u00f5es associadas a esses dados. Tais informa\u00e7\u00f5es s\u00e3o:\n\n* uma *identidade*, n\u00famero pelo qual o objeto \u00e9 identificado na mem\u00f3ria;\n* um *tipo*.\n\nN\u00e3o \u00e9 poss\u00edvel modificar a identidade ou o tipo de um objeto. A depender de qual seja seu tipo, pode ou n\u00e3o ser poss\u00edvel modificar os dados que o objeto armazena.\n\nPraticamente tudo em Python pode ser encarado como um objeto! N\u00fameros, fun\u00e7\u00f5es, estruturas de dados, m\u00f3dulos, etc.\n\nUm objeto pode ou n\u00e3o ter um ou mais *nomes* (tamb\u00e9m chamados de *identificadores*) que o programador usa para identific\u00e1-lo. Por exemplo, quando digitamos o seguinte comando:","4192976d":"Fun\u00e7\u00f5es matem\u00e1ticas como seno, cosseno ou exponencial n\u00e3o est\u00e3o dispon\u00edveis diretamente na linguagem. Para utiliz\u00e1-las, \u00e9 preciso importar um *m\u00f3dulo* que as contenha. \n\n*M\u00f3dulos* s\u00e3o c\u00f3digos contendo objetos previamente programados que voc\u00ea pode incorporar aos seus pr\u00f3prios c\u00f3digos.\n\nPara utilizar um m\u00f3dulo, \u00e9 necess\u00e1rio import\u00e1-lo com o comando **import**. Abaixo, importaremos o m\u00f3dulo [NumPy](http:\/\/www.numpy.org\/), que cont\u00e9m uma biblioteca de fun\u00e7\u00f5es dedicadas a c\u00e1lculos num\u00e9ricos:","c824ae82":"Perceba que os \u00edndices s\u00e3o criados a partir das chaves dos dicion\u00e1rios e est\u00e3o ordenados alfabeticamente. \u00c9 poss\u00edvel orden\u00e1-los de outra maneira:","5596cd9d":"#### *M\u00e3o na massa! *\n\n* Escreva um c\u00f3digo que solicite um valor inteiro ao usu\u00e1rio e exiba uma mensagem indicando se esse inteiro \u00e9 par ou \u00edmpar (obs: talvez voc\u00ea se interesse pelo operador m\u00f3dulo, denotado pelo s\u00edmbolo **%**).","e24740d7":"No comando acima, selecionamos as faixas **0:3** e **7:** da string **S**, deixando de fora a infame faixa **3:7**.","78d6baaf":"O uso de palavras-chave nos argumentos \u00e9 um recurso que flexibiliza bastante o uso de fun\u00e7\u00f5es e \u00e9 um dos grandes charmes da linguagem Python.","f2e6b90b":"Estruturas de controle s\u00e3o o cora\u00e7\u00e3o da arte da programa\u00e7\u00e3o. Elas s\u00e3o usadas para controlar o fluxo de execu\u00e7\u00e3o do c\u00f3digo por meio da automatiza\u00e7\u00e3o de *tomadas de decis\u00e3o* e de *tarefas repetitivas*.\n\nS\u00e3o divididas em dois tipos:\n\n* **Estruturas condicionais**, usadas para automatizar tomadas de decis\u00e3o;\n* **Estruturas iterativas**, usadas para automatizar tarefas repetitivas.\n\n## 6.1. Estruturas condicionais\n\nAs estruturas condicionais automatizam tomadas de decis\u00e3o por meio da avalia\u00e7\u00e3o de express\u00f5es l\u00f3gicas. *Express\u00f5es l\u00f3gicas* s\u00e3o senten\u00e7as matem\u00e1ticas que podem ser classificadas como verdadeiras ou falsas.\n\nPor exemplo, as seguintes senten\u00e7as s\u00e3o express\u00f5es l\u00f3gicas:\n\n* 3 > 2 (V)\n* 2 > 5 (F)\n* 3 = 3 (V)\n* 3 = 3 ou 3 = 4 (V)\n* 3 = 3 e 3 = 4 (F)\n\nEstudaremos uma estrutura condicional em particular: o bloco **if**.\n\n### 6.1.1. O bloco if\n\nO bloco **if** (*if* significa *se*, em ingl\u00eas) avalia uma express\u00e3o l\u00f3gica para decidir se executa ou n\u00e3o um conjunto de comandos. Se o resultado da express\u00e3o for verdadeiro, os comandos s\u00e3o executados. Se for falso, n\u00e3o s\u00e3o executados. \n\nNo exemplo a seguir, \u00e9 requerido ao usu\u00e1rio que informe um valor de temperatura. O bloco **if** \u00e9 ent\u00e3o utilizado para determinar em qual estado f\u00edsico a \u00e1gua se encontra nessa temperatura:","f8d47fca":"O argumento **end=''** fornecido \u00e0 fun\u00e7\u00e3o **print** faz com que todos os caracteres sejam impressos em uma s\u00f3 linha.","a350620f":"#### *M\u00e3o na massa! *\n\n* Calcule a soma $\\displaystyle\\sum_{i=1}^{20} \\displaystyle\\sum_{j=3}^{9} \\sin(i+j)$.","3456b907":"Podemos escrever strings diretamente dentro do comando **print**, sem atribuir identificadores a elas:","a217f2f2":"### Objetos num\u00e9ricos","b6a590e2":"*Strings* s\u00e3o objetos imut\u00e1veis que armazenam caracteres. Definimos strings usando aspas duplas ou simples:","a01cf396":"Agora estamos prontos para procurar nosso m\u00ednimo, partindo da estimativa inicial (0,0): ","79e454aa":"Definidos o dom\u00ednio e a imagem, s\u00f3 falta plotar! Para isso, utilizamos a fun\u00e7\u00e3o [plt.plot](https:\/\/matplotlib.org\/api\/pyplot_api.html#matplotlib.pyplot.plot):","d1e68785":"O segundo passo \u00e9 definir um vetor que armazene os valores da imagem:","03502651":"#### *M\u00e3o na massa! *\n\n* Acesse o [artigo da Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Test_functions_for_optimization) sobre fun\u00e7\u00f5es de teste para algoritmos de otimiza\u00e7\u00e3o. Escolha algumas, implemente-as e teste nelas alguns [algoritmos de otimiza\u00e7\u00e3o da biblioteca Scipy](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/optimize.html).","a3a86101":"## 6.2. Estruturas iterativas\n\nEstruturas iterativas automatizam tarefas repetitivas. Estudaremos aqui dois tipos de estruturas iterativas: o bloco **while** e o bloco **for**.\n\n### 6.2.1. O bloco while\n\nO bloco **while** (*while* significa *enquanto*, em ingl\u00eas), assim como o **if**, tamb\u00e9m avalia uma express\u00e3o l\u00f3gica para decidir se executa um conjunto de comandos ou n\u00e3o. A diferen\u00e7a \u00e9 que, no bloco **while**, os comandos s\u00e3o executados repetidamente enquanto a express\u00e3o l\u00f3gica testada permanece verdadeira. Cada repeti\u00e7\u00e3o de comandos \u00e9 chamada de *itera\u00e7\u00e3o*.\n\nNo exemplo a seguir, os n\u00fameros inteiros de 10 at\u00e9 1 s\u00e3o impressos em tela:","2ecb1a05":"A nota\u00e7\u00e3o das tuplas proporciona um m\u00e9todo bem f\u00e1cil para trocar os valores de objetos: ","27592916":"N\u00e3o se perca com os par\u00eanteses e colchetes no comando acima! Os par\u00eanteses delimitam os argumentos da fun\u00e7\u00e3o, os colchetes mais externos delimitam a matriz e os colchetes internos delimitam as linhas da matriz.\n\n\u00c9 importante que fique clara a interpreta\u00e7\u00e3o de uma matriz como uma array de duas dimens\u00f5es. As linhas constituem a primeira dimens\u00e3o e as colunas constituem a segunda dimens\u00e3o.\n\nPara acessar os elementos de uma array, usamos como \u00edndices uma tupla de inteiros positivos:","a6fa1009":"Em Python, temos tr\u00eas tipos de objetos num\u00e9ricos: **int**, **float** e **complex**:\n\n* **int**: corresponde ao conjunto dos n\u00fameros inteiros; \n\n* **float**: corresponde ao conjunto dos n\u00fameros racionais (conhecidos na \u00e1rea da computa\u00e7\u00e3o como n\u00fameros de ponto flutuante);\n\n* **complex**: corresponde ao conjunto dos n\u00fameros complexos.\n\nVamos checar os tipos dos objetos **c**, **d** e **e** calculados no item anterior.","0abc701d":"Ilustraremos a resolu\u00e7\u00e3o desse tipo de problema com a fun\u00e7\u00e3o [scipy.optimize.root](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.optimize.root.html#scipy.optimize.root).\n\nA fun\u00e7\u00e3o deve ser usada com a seguinte sintaxe:\n\n**scipy.optimize.root (fun, x0)**\n\nsendo os argumentos:\n\n* **fun**: fun\u00e7\u00e3o que aceita como entrada um vetor **(x1, x2, x3, ... , xn)** e retorna um vetor **(f1, f2, f3, ..., fn)** com os valores das fun\u00e7\u00f5es $f$ avaliadas no ponto $(x_1, x_2, x_3, ... , x_n)$; \n\n* **x0**: estimativa inicial da solu\u00e7\u00e3o.\n\nO m\u00e9todo num\u00e9rico utilizado por *default* \u00e9 um [m\u00e9todo de Powell](https:\/\/en.wikipedia.org\/wiki\/Powell%27s_method) h\u00edbrido modificado. H\u00e1 a possibilidade de se fornecer argumentos adicionais relacionados a aspectos num\u00e9ricos, como jacobiana, toler\u00e2ncia, escolha de outro m\u00e9todo, etc. Para mais informa\u00e7\u00f5es, consulte a [refer\u00eancia oficial da fun\u00e7\u00e3o](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.optimize.root.html#scipy.optimize.root). \n\nComo exemplo, resolveremos o seguinte sistema bidimensional:\n\n$$      \\begin{split}\n\\frac{x}{1+e^{-27 y}(x\/3-1)} - 5 = 0\\\\\n\\frac{x}{1+e^{-39 y}(x\/3-1)} - 6 = 0\n    \\end{split} $$","ce1a4a69":"## 5.2 Gr\u00e1ficos tridimensionais (3D)\n\nA biblioteca [Matplotlib](https:\/\/matplotlib.org\/) tradicionalmente \u00e9 usada para tra\u00e7ar gr\u00e1ficos 2D, mas podemos tra\u00e7ar gr\u00e1ficos 3D utilizando o m\u00f3dulo [Axes3D](https:\/\/matplotlib.org\/mpl_toolkits\/mplot3d\/api.html#module-mpl_toolkits.mplot3d.axes3d):","1b49fd37":"* Descubra o n\u00famero de termos na soma 1+2+3+... necess\u00e1rios para se atingir um milh\u00e3o.","d0191179":"No caso acima, efetua-se **um slice em cada dimens\u00e3o**. \n\nNa primeira dimens\u00e3o (ou seja, nas linhas), os \u00edndices v\u00e3o de 0 a 2, selecionando-se as duas primeiras linhas.\n\nNa segunda dimens\u00e3o (ou seja, nas colunas), os \u00edndices v\u00e3o de 1 a 4, selecionando-se a segunda, a terceira e a quarta colunas.\n\nObserve que a sintaxe do *slice* em cada dimens\u00e3o obedece ao que aprendemos com as listas, **start:end:intervalo**. Quando n\u00e3o se especifica o intervalo, ou seja, o formato \u00e9 **start:end**, o intervalo *default* \u00e9 1. Quando n\u00e3o se especifica o end, (o formato \u00e9 apenas **start:**), vai-se at\u00e9 o final da dita dimens\u00e3o. Quando n\u00e3o se especifica o start (o formato \u00e9 apenas **:end**), come\u00e7a-se do elemento inicial. Perceba que o Python interpreta se nos referimos ao start ou ao end a depender da posi\u00e7\u00e3o do sinal de dois pontos.","a667a5f2":"O comando acima quer dizer: em todas as linhas, pegue o elemento da coluna 3 (segunda coluna). Confira que pode ser o contr\u00e1rio:","e1969aac":"Gostou de resolver o exerc\u00edcio acima? Talvez voc\u00ea se divirta tamb\u00e9m tentando resolver [esses](https:\/\/www.reddit.com\/r\/learnpython\/comments\/4d2yl7\/i_need_list_comprehension_exercises_to_drill\/d1ndggs) :)","00fd0cc2":"E se quisermos reordenar a tabela, dessa vez na ordem decrescente das m\u00e9dias finais?","04d679dd":"## 5.1 Gr\u00e1ficos bidimensionais (2D)\n\nDe modo a tra\u00e7ar gr\u00e1ficos 2D, utilizaremos o m\u00f3dulo [PyPlot](https:\/\/matplotlib.org\/api\/pyplot_api.html), dispon\u00edvel  biblioteca [Matplotlib](https:\/\/matplotlib.org\/):","45d4baa8":"## 6.3.  Compreens\u00e3o de listas\n\nA [compreens\u00e3o de listas](https:\/\/pt.wikipedia.org\/wiki\/Compreens%C3%A3o_de_lista) \u00e9 uma forma de definir listas usando diretamente estruturas de controle, em um \u00fanico comando. Alguns exemplos:","384075db":"Se quisermos acessar o \u00faltimo elemento da lista, basta usar a forma  **nome_da_lista [ start :  : intervalo ]** (sem  um n\u00famero que represente o **end** entre os dois sinais de 'dois pontos'):","6243121f":"O \u00fanico sinal que pode causar um pouco de estranheza \u00e9 o **\\*\\***, que denota exponencia\u00e7\u00e3o.\n\nAo definir objetos e realizar opera\u00e7\u00f5es, o *prompt* n\u00e3o fornece nenhum retorno. Para visualizar os resultados, devemos usar a fun\u00e7\u00e3o **print**:","780632be":"Um \u00faltimo coment\u00e1rio sobre a utilidade geral das fun\u00e7\u00f5es. Fun\u00e7\u00f5es s\u00e3o \u00fateis porque proporcionam modularidade ao c\u00f3digo. De maneira geral, *modularidade* \u00e9 uma medida do grau em que os diversos componentes de um sistema podem ser separados e recombinados. Um c\u00f3digo modular \u00e9 um c\u00f3digo composto por diversas partes autocontidas que se integram de maneira harmoniosa. Em Python, a melhor maneira de criar essa divis\u00e3o harmoniosa entre as diversas se\u00e7\u00f5es de um programa \u00e9 por meio da defini\u00e7\u00e3o de fun\u00e7\u00f5es.\n\nA modularidade proporciona diversas vantagens ao programador, dentre as quais destacamos:\n\n* o aumento da clareza e redu\u00e7\u00e3o da complexidade do programa, j\u00e1 que ele passa a ser composto por blocos de c\u00f3digo independentes e reutiliz\u00e1veis;\n* o isolamento de opera\u00e7\u00f5es complicadas;\n* a preven\u00e7\u00e3o de c\u00f3digos duplicados;\n* a limita\u00e7\u00e3o de mudan\u00e7as em se\u00e7\u00f5es espec\u00edficas do programa, o que torna mais pr\u00e1tica a realiza\u00e7\u00e3o de testes e o *debug* (busca e repara\u00e7\u00e3o de erros no c\u00f3digo).","0a6a00b7":"Alguns coment\u00e1rios sobre o c\u00f3digo acima:\n\n* Para ser usada pela fun\u00e7\u00e3o [scipy.integrate.odeint](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.integrate.odeint.html#scipy.integrate.odeint), a fun\u00e7\u00e3o **dCdt** deve aceitar o vetor **C** e o escalar **t**, *necessariamente nessa ordem*. Tome cuidado, pois no caso de outras fun\u00e7\u00f5es que n\u00e3o a [scipy.integrate.odeint](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.integrate.odeint.html#scipy.integrate.odeint), essa ordem pode mudar.\n\n* Os par\u00e2metros **k1** e **k2** s\u00e3o fornecidos \u00e0 fun\u00e7\u00e3o **dCdt** logo ap\u00f3s o escalar **t**.\n\n* Os par\u00e2metros **k1** e **k2** s\u00e3o fornecidos \u00e0 fun\u00e7\u00e3o [scipy.integrate.odeint](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.integrate.odeint.html#scipy.integrate.odeint) em uma tupla como argumento opcional, n\u00e3o-ordenado, na forma de palavra-chave. Para uma lista de todos os argumentos opcionais que podem ser fornecidos \u00e0 fun\u00e7\u00e3o, consulte a [refer\u00eancia oficial](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.integrate.odeint.html#scipy.integrate.odeint).\n\n* A abordagem usada acima \u00e9 igualmente \u00fatil para resolver problemas unidimensionais, quando s\u00f3 h\u00e1 uma equa\u00e7\u00e3o $df\/dt = ...$\n\n* Os intervalos entre os pontos do vetor **t** s\u00e3o escolhidos a priori. Para um m\u00e9todo de intervalo adaptativo, consulte a fun\u00e7\u00e3o [scipy.integrate.ode](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.integrate.ode.html#scipy.integrate.ode), mais avan\u00e7ada e flex\u00edvel. Nessa fun\u00e7\u00e3o, tamb\u00e9m h\u00e1 outros m\u00e9todos num\u00e9ricos para resolu\u00e7\u00e3o de problemas mais complicados, como problemas r\u00edgidos ou com vari\u00e1veis complexas.\n\n* Esse gr\u00e1fico \u00e9 muito bonito!\n\nAgora que voc\u00ea j\u00e1 sabe resolver esse tipo de problema, volte ao in\u00edcio deste notebook e olhe com outros olhos aquele primeiro bloco de c\u00f3digo que te deixou babando h\u00e1 uns dias.","1b3c3d9f":"Um dos usos mais importantes das arrays \u00e9 em c\u00e1lculos relacionados \u00e0 \u00c1lgebra Linear. Muitas das fun\u00e7\u00f5es que realizam esses c\u00e1lculos est\u00e3o dispon\u00edveis no m\u00f3dulo [linalg](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/routines.linalg.html) da biblioteca [NumPy](http:\/\/www.numpy.org\/). Alguns exemplos:\n\n* [operador **@**](https:\/\/docs.python.org\/3\/library\/operator.html#module-operator): usado na forma **A@B**, efetua a multiplica\u00e7\u00e3o entre duas matrizes **A** e **B** . Obs: a fun\u00e7\u00e3o [np.matmul (A,B)](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.matmul.html#numpy.matmul) tamb\u00e9m efetua a multiplica\u00e7\u00e3o entre matrizes; \n<br> <br>\n* [operador **\\***](https:\/\/docs.python.org\/3\/library\/operator.html#module-operator): usado na forma **A*B**, efetua a multiplica\u00e7\u00e3o entre duas matrizes **A** e **B** calculando os produtos entre os elementos de posi\u00e7\u00f5es equivalentes, a chamada opera\u00e7\u00e3o elemento a elemento, ou *element-wise*. Obs: a fun\u00e7\u00e3o [np.multiply (A,B)](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.multiply.html) tamb\u00e9m efetua a multiplica\u00e7\u00e3o elemento a elemento;\n<br> <br>\n* [atributo **T**](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.ndarray.T.html): armazena a transposta da matriz. Acessado na forma **A.T**, sendo **A** a matriz que se est\u00e1 transpondo;\n<br> <br>\n\n* [np.linalg.inv (A)](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.linalg.inv.html#numpy.linalg.inv): calcula a inversa da matriz **A**;\n<br> <br>\n\n* [np.linalg.norm (A)](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.linalg.norm.html#numpy.linalg.norm): calcula a norma da matriz ou vetor **A**;\n<br> <br>\n\n* [np.linalg.eigvals (A)](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.linalg.eigvals.html#numpy.linalg.eigvals): calcula os autovalores da matriz **A**.\n\nExemplos de aplica\u00e7\u00f5es:","0cbb59fb":"Tente contar quantos m\u00ednimos locais a danada tem! Tentaremos, no meio de tantos m\u00ednimos, achar o menor de todos eles: -959,6407, no ponto (512, 404,23).\n\nUsaremos a fun\u00e7\u00e3o [scipy.optimize.differential_evolution](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.optimize.differential_evolution.html). Essa fun\u00e7\u00e3o utiliza o m\u00e9todo num\u00e9rico da [evolu\u00e7\u00e3o diferencial](https:\/\/en.wikipedia.org\/wiki\/Differential_evolution). Sua sintaxe \u00e9:\n\n**scipy.optimize.differential_evolution (fun, x0)**\n\nsendo os argumentos:\n\n* **fun**: fun\u00e7\u00e3o que deve ser minimizada, definida previamente com o comando **def**; \n\n* **bounds**: limites de busca das vari\u00e1veis, na forma de uma tupla.\n\nN\u00e3o h\u00e1 necessidade de estimativa inicial.\n\nO primeiro passo \u00e9 definir a fun\u00e7\u00e3o \"caixa de ovos\":","7adaddfd":"No comando acima, seleciona-se a posi\u00e7\u00e3o 0 da primeira dimens\u00e3o (ou seja, a primeira linha) e a posi\u00e7\u00e3o 2 da segunda dimens\u00e3o (ou seja, a terceira coluna). Lembre-se de que a contagem come\u00e7a do 0 e n\u00e3o do 1 - por isso a posi\u00e7\u00e3o 2 corresponde \u00e0 terceira coluna.\n\nTamb\u00e9m \u00e9 poss\u00edvel usar *slices* como \u00edndices:","9e627144":"Os elementos de uma lista podem ser objetos de qualquer tipo, inclusive fun\u00e7\u00f5es:","317547e3":"A fun\u00e7\u00e3o [np.meshgrid](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.meshgrid.html) aceita como entrada vetores unidimensionais que armazenam os pontos dos eixos $x$ e $y$ e retorna duas matrizes (**X** e **Y** no caso acima) contendo os pontos da malha bidimensional.\n\nObtidos esses pontos, calculamos a matriz que cont\u00e9m os pontos da imagem por meio da pr\u00f3pria f\u00f3rmula da fun\u00e7\u00e3o:","639e7a46":"As tuplas **tupla_boladona** e **tupla_mandada** s\u00e3o iguais.\n\nUm uso muito pr\u00e1tico das tuplas \u00e9 na defini\u00e7\u00e3o de v\u00e1rios objetos de uma s\u00f3 vez:","b6f8eb10":"# 3. Usando o Python como calculadora","3d9605f3":"*Fun\u00e7\u00f5es* s\u00e3o objetos que aceitam argumentos (entrada da fun\u00e7\u00e3o), processam esses argumentos e retornam valores (sa\u00edda da fun\u00e7\u00e3o).\n\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/3\/3b\/Function_machine2.svg\" width=\"200\" height=\"200\" align=\"center\"\/>\n\nOs \u00faltimos comandos que digitamos na Se\u00e7\u00e3o anterior ilustram o uso de fun\u00e7\u00f5es (no caso, as fun\u00e7\u00f5es **id** e **type**). \n\nA fun\u00e7\u00e3o **id** aceita como entrada um objeto e retorna como sa\u00edda a identidade desse objeto. No nosso caso espec\u00edfico, a fun\u00e7\u00e3o **id** aceitou o objeto **obj** e retornou **4309338176**, a identidade de **obj**.\n\nA fun\u00e7\u00e3o **type** aceita como entrada um objeto e retorna como sa\u00edda o tipo desse objeto. No nosso caso espec\u00edfico, a fun\u00e7\u00e3o **type** aceitou o objeto **obj** e retornou **int**, o tipo de **obj**.\n\n**id** e **type** s\u00e3o exemplos de fun\u00e7\u00f5es definidas na pr\u00f3pria linguagem Python. Mais adiante,  aprenderemos a utilizar fun\u00e7\u00f5es programadas por terceiros e tamb\u00e9m a programar nossas pr\u00f3prias fun\u00e7\u00f5es.","65d641ee":"#### *M\u00e3o na massa! *\n\n* Crie uma lista e uma tupla. Tente modificar um dos elementos de cada uma. O que ocorre? ","094e7835":"### Uso do Python\n\nA comunica\u00e7\u00e3o com o Python \u00e9 feita por meio de *comandos* que passamos ao interpretador da linguagem.\n\nS\u00f3 para sentir o gostinho, observe o exemplo do seguinte bloco de comandos, que resolve um sistema de equa\u00e7\u00f5es diferenciais ordin\u00e1rias e exibe em gr\u00e1fico o resultado:","19f0271e":"# 0. Instalando e usando o Python","c177d62f":"Uma lista completa dos marcadores para customizar as curvas pode ser acessada por meio do *help* da fun\u00e7\u00e3o:","f0e9616c":"Para definir uma lista dessa maneira, deve-se usar um colchete contendo um s\u00edmbolo para o elemento gen\u00e9rico da lista (nos casos acima, o s\u00edmbolo **i**), seguido de um loop **for** que ir\u00e1 usar esse s\u00edmbolo para gerar os elementos propriamente ditos. Pode-se adicionar ainda um **if** para condicionar a gera\u00e7\u00e3o dos elementos a alguma express\u00e3o l\u00f3gica, como no segundo exemplo acima.","f6478204":"#### *M\u00e3o na massa! *\n\n* Adicione mais uma aluna \u00e0 tabela anterior.","388646e7":"Fracasso! O m\u00e9todo num\u00e9rico caiu em um dos v\u00e1rios m\u00ednimos locais e de l\u00e1 n\u00e3o saiu. Lembre-se de que o m\u00ednimo global que desejamos encontrar \u00e9 o valor -959,6407, no ponto (512, 404,23).\n\nDe modo a encontrarmos o verdadeiro m\u00ednimo global, precisamos refinar a busca. D\u00ea uma olhada na [refer\u00eancia oficial da fun\u00e7\u00e3o differential_evolution](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution). Nessa refer\u00eancia, s\u00e3o listados diversos aspectos do m\u00e9todo que podem ser modificados de modo a tornar a busca mais efetiva. Vamos tentar aumentar o tamanho da popula\u00e7\u00e3o e utilizar outra estrat\u00e9gia de busca:","21147e64":"Como exemplo, plotaremos a superf\u00edcie da fun\u00e7\u00e3o $f(x,y) = x^2+y^2$ no intervalo $x = [-4,4]$ e $y = [-4,4]$.\n\nA l\u00f3gica dos comandos \u00e9 a mesma que para os gr\u00e1ficos 2D: devemos especificar o dom\u00ednio, definir os valores da curva nos pontos do dom\u00ednio e plotar. Em gr\u00e1ficos 3D, no entanto, existe uma complica\u00e7\u00e3o adicional: os pontos do dom\u00ednio fazem parte de uma malha de pontos bidimensional. De modo a especificar essa malha de pontos, usamos a fun\u00e7\u00e3o [np.meshgrid](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.meshgrid.html):","8f996a22":"Na segunda linha da c\u00e9lula acima, acessamos os elementos de \u00edndice 1 at\u00e9 8 (sem incluir o 8!) da lista **A**, indo de 2 em 2. \u00c9 importante destacar que o elemento entre os sinais de 'dois pontos', denotado por **end** (no caso acima, o de \u00edndice 8) *n\u00e3o \u00e9 inclu\u00eddo*.","a7afbedd":"Tudo calculado! Agora s\u00f3 falta plotar:","b7c801a2":"No comando acima, importamos o m\u00f3dulo [NumPy](http:\/\/www.numpy.org\/) utilizando o identificador **np**. Isso significa que qualquer objeto do [NumPy](http:\/\/www.numpy.org\/) em nosso c\u00f3digo deve ser precedido pelo prefixo **np.**, como ilustrado abaixo:","2967482e":"O acesso dos elementos de uma string usa o slice **nome_da_string [ start: end : intervalo ]**, exatamente da mesma forma que para as listas e as tuplas:","aa94ebc5":"Acessamos uma faixa de valores da lista usando um comando conhecido como *slice*, escrito na forma **nome_da_lista [ start: end : intervalo ]**. Exemplo:","54f41971":"A temperatura \u00e9 obtida do usu\u00e1rio por meio das fun\u00e7\u00f5es **input** (que serve para solicitar e receber a temperatura) e **float** (que converte a string fornecida \u00e0 fun\u00e7\u00e3o **input** em um objeto num\u00e9rico). No caso acima, a temperatura informada foi 25$^{\\circ}$C.\n\nQuanto ao bloco **if** em si, alguns detalhes merecem coment\u00e1rio:\n\n* No final de cada express\u00e3o l\u00f3gica, deve haver um sinal de dois-pontos (**:**). Esquecer esse sinal \u00e9 um erro muito comum.\n* Para testar express\u00f5es l\u00f3gicas adicionais \u00e0 primeira, a palavra-chave **elif** deve ser utilizada. Para testar a condi\u00e7\u00e3o complementar em rela\u00e7\u00e3o a todas as condi\u00e7\u00f5es testadas, a palavra-chave **else** deve ser utilizada. Tanto o uso de **elif** quanto o de **else** s\u00e3o opcionais.\n* A igualdade l\u00f3gica \u00e9 representada por um duplo sinal de igual (**==**).\n* O conectivo **e** \u00e9 representado pela sua tradu\u00e7\u00e3o em ingl\u00eas **and** (o mesmo se d\u00e1 com **ou** e **n\u00e3o**, representados por **or** e **not**, respectivamente).\n* A indenta\u00e7\u00e3o (recuo do texto logo ap\u00f3s o sinal de dois-pontos) \u00e9 obrigat\u00f3ria em Python. \u00c9 justamente a indenta\u00e7\u00e3o que define quais comandos est\u00e3o hierarquicamente subordinados ao **if**, ou seja, quais comandos devem ser executados no caso de a condi\u00e7\u00e3o testada ser verdadeira. Observe o seguinte exemplo:","c38fb99f":"Perceba que h\u00e1 diversos elementos no objeto **result**, cada um detalhando um aspecto da resolu\u00e7\u00e3o do problema, como n\u00famero de avalia\u00e7\u00f5es da fun\u00e7\u00e3o, valores finais das fun\u00e7\u00f5es avaliadas nas solu\u00e7\u00e3o, etc. O valor da solu\u00e7\u00e3o em si encontra-se no elemento **x**:","b83af606":"Este notebook est\u00e1 preparado para o ambiente [Kaggle](https:\/\/www.kaggle.com\/), ent\u00e3o voc\u00ea n\u00e3o precisa se preocupar em instalar nada em seu computador! Basta fazer um fork em seu perfil e rodar utilizando os recursos computacionais disponibilizados gratuitamente pela Alphabet.\n\n<img src=\"https:\/\/www.dataapplab.com\/wp-content\/uploads\/2016\/10\/kaggle-logo-transparent-300.png\" width=\"300\" height=\"300\" \/>\n\n### Plataformas de computa\u00e7\u00e3o cient\u00edfica\n\nH\u00e1 v\u00e1rias situa\u00e7\u00f5es em que n\u00e3o podemos utilizar a computa\u00e7\u00e3o em nuvem, como quando se t\u00eam conex\u00f5es de internet inst\u00e1veis ou se trabalha com dados sigilosos. Nesse caso, voc\u00ea precisar\u00e1 instalar o Python e as demais bibliotecas em seu computador, e para tal a op\u00e7\u00e3o mais recomend\u00e1vel \u00e9 que voc\u00ea obtenha uma plataforma integrada de computa\u00e7\u00e3o cient\u00edfica. Nessas plataformas, todas as bibliotecas e depend\u00eancias necess\u00e1rias para a aplica\u00e7\u00e3o do Python na \u00e1rea cient\u00edfica s\u00e3o instaladas de forma consistente, o que \u00e9 bem pr\u00e1tico e pode te poupar de certas dores de cabe\u00e7a.\n\n\nA plataforma que eu uso \u00e9 a [Anaconda](https:\/\/www.continuum.io\/anaconda-overview), disponibilizada gratuitamente pela [Continuum Analytics](https:\/\/www.continuum.io\/). Em particular, gosto de utilizar o [Spyder](https:\/\/pythonhosted.org\/spyder\/index.html) para escrever e rodar meus c\u00f3digos e o [JupyterLab](https:\/\/jupyterlab.readthedocs.io\/en\/stable\/) para escrever notebooks [Jupyter](http:\/\/jupyter.org\/) como este que voc\u00ea est\u00e1 lendo. Tanto [Spyder](https:\/\/pythonhosted.org\/spyder\/index.html) quanto [JupyterLab](https:\/\/jupyterlab.readthedocs.io\/en\/stable\/) s\u00e3o instalados quando se instala a [Anaconda](https:\/\/www.continuum.io\/anaconda-overview).\n\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/en\/c\/cd\/Anaconda_Logo.png\" width=\"300\" height=\"300\" \/>\n\nNo momento do download, voc\u00ea deve escolher entre Python 2 e Python 3. Recomendo que escolha a vers\u00e3o 3, j\u00e1 que essa vers\u00e3o \u00e9 cada vez mais usada e representa o futuro da linguagem. C\u00f3digos em Python 2 est\u00e3o se tornando pouco a pouco mais raros. Na \u00e9poca da escrita deste notebook (2019), algumas bibliotecas est\u00e3o dispon\u00edveis apenas para Python 2, mas elas s\u00e3o minoria e continuar\u00e3o a diminuir com o passar do tempo (voc\u00ea que est\u00e1 lendo em 2038... isso realmente aconteceu?).\n\nAl\u00e9m da [Anaconda](https:\/\/www.continuum.io\/anaconda-overview), outra plataforma muito usada \u00e9 a [Enthought Canopy](https:\/\/www.enthought.com\/products\/canopy\/).\n\nVale tamb\u00e9m ressaltar que, al\u00e9m do Kaggle, h\u00e1 v\u00e1rias outras alternativas para a computa\u00e7\u00e3o em nuvem, como [Microsoft Azure](https:\/\/notebooks.azure.com\/), [Google Colab](https:\/\/colab.research.google.com\/), [CoCalc](https:\/\/cocalc.com\/), etc.","977e1a54":"Agora, \u00e0 busca do m\u00ednimo global:","6ca31282":"Se quisermos modificar uma faixa de elementos de uma lista existente sem criar uma nova lista, basta escrever **nome_da_lista [ start: end : intervalo ]** do lado *esquerdo* da equa\u00e7\u00e3o:","0bb936b9":"A modifica\u00e7\u00e3o em **arg1** n\u00e3o se refletiu fora da fun\u00e7\u00e3o porque **arg1** \u00e9 do tipo **float**, ou seja, \u00e9 um objeto imut\u00e1vel. J\u00e1 a modifica\u00e7\u00e3o em **arg2** se refletiu fora da fun\u00e7\u00e3o porque **arg2** \u00e9 uma lista, ou seja, um objeto mut\u00e1vel.\n\nEsse exemplo ilustrou o fato de que as fun\u00e7\u00f5es n\u00e3o necessariamente retornam valores de sa\u00edda. Tamb\u00e9m \u00e9 poss\u00edvel que uma fun\u00e7\u00e3o n\u00e3o aceite argumentos de entrada.\n\nEsse \u00faltimo exemplo ilustrou tamb\u00e9m um dos m\u00e9todos usados para se fornecer mais de um argumento a uma fun\u00e7\u00e3o: pela ordem em que eles s\u00e3o escritos na defini\u00e7\u00e3o. No c\u00f3digo acima, \u00e9 claro que o primeiro argumento fornecido deve ser um **float** e o segundo argumento deve ser uma lista.\n\nNo entanto, existe outra maneira de se fornecer m\u00faltiplos argumentos \u00e0s fun\u00e7\u00f5es no Python: por meio de *palavras-chave*. \n\nNo exemplo a seguir, ilustramos o uso de palavras-chave nos argumentos por meio da implementa\u00e7\u00e3o da seguinte fun\u00e7\u00e3o matem\u00e1tica:\n\n$$ f(t; A, a, \\omega) = A e^{-at} \\cos(wt)$$","f184c4c3":"\u00c0 posi\u00e7\u00e3o do elemento na lista damos o nome de *\u00edndice*. A primeira posi\u00e7\u00e3o nas estruturas em Python \u00e9 identificada com o \u00edndice 0, a segunda posi\u00e7\u00e3o \u00e9 identificada com o \u00edndice 1, e assim por diante. No in\u00edcio, isso pode causar certa confus\u00e3o, mas logo voc\u00ea se acostuma (ou n\u00e3o).\n\nA \u00faltima posi\u00e7\u00e3o na lista pode ser acessada com o \u00edndice -1, a pen\u00faltima posi\u00e7\u00e3o com o \u00edndice -2, e assim por diante:","5bfd523d":"Pode-se criar s\u00e9ries a partir de dicion\u00e1rios:","69243642":"Para nomear cada curva, fornecemos \u00e0 fun\u00e7\u00e3o [plt.plot](https:\/\/matplotlib.org\/api\/pyplot_api.html#matplotlib.pyplot.plot) um argumento na forma **label = 'string' **. Essas strings est\u00e3o delimitadas, al\u00e9m das aspas, por cifr\u00f5es ($). Isso significa que a linguagem de marca\u00e7\u00e3o [LaTeX](https:\/\/www.latex-project.org\/) foi usada para escrever os s\u00edmbolos matem\u00e1ticos nessas strings. \n\nNa biblioteca [Matplotlib](https:\/\/matplotlib.org\/), h\u00e1 v\u00e1rios comandos \u00fateis para se tra\u00e7ar os mais diversos tipos de gr\u00e1ficos bidimensionais, como [pie](https:\/\/matplotlib.org\/api\/pyplot_api.html?highlight=matplotlib\\%20pyplot%20pie#matplotlib.pyplot.pie) (gr\u00e1ficos de torta), [bar](https:\/\/matplotlib.org\/api\/pyplot_api.html#matplotlib.pyplot.bar) (gr\u00e1ficos de barras), entre outros.","1ef66339":"Adicionando duas novas linhas contendo a m\u00e9dia e o desvio-padr\u00e3o das notas da turma:","dc8e476c":"Se n\u00e3o especificarmos o **intervalo**, ou seja, se usarmos a forma **nome_da_lista [ start : end ]**, acessaremos uma faixa da lista indo de 1 em 1:","6d0ea6f5":"# 7. Definindo fun\u00e7\u00f5es\n\nNa Se\u00e7\u00e3o 2 deste documento, afirmamos que *fun\u00e7\u00f5es* s\u00e3o objetos que aceitam argumentos (entrada da fun\u00e7\u00e3o), processam esses argumentos e retornam valores (sa\u00edda da fun\u00e7\u00e3o). \n\nNeste ponto do nosso estudo, podemos ser mais precisos e afirmar que fun\u00e7\u00f5es na verdade s\u00e3o *blocos de c\u00f3digo independentes criados para cumprir uma tarefa espec\u00edfica*. Essa tarefa pode ser calcular o cosseno de um n\u00famero, imprimir uma string na tela, plotar um gr\u00e1fico, etc.\n\nPara definir nossas pr\u00f3prias fun\u00e7\u00f5es no Python, fazemos uso da palavra-chave **def**: ","2aa8d436":"Na visualiza\u00e7\u00e3o acima, os \u00edndices est\u00e3o \u00e0 esquerda e os valores, \u00e0 direita. \n\nPerceba que os \u00edndices, se n\u00e3o especificados na defini\u00e7\u00e3o, por *default* s\u00e3o inteiros come\u00e7ando do zero.\n\n\u00c9 poss\u00edvel definir s\u00e9ries com \u00edndices de outra natureza:","36ffda43":"#### *M\u00e3o na massa! *\n\n* Crie uma array com todos os nu\u0301meros pares entre 100 e 200.","e01d9c4e":"# 10. Problemas de otimiza\u00e7\u00e3o\n\nDado um conjunto de possibilidades, a *otimiza\u00e7\u00e3o* \u00e9 a escolha do(s) elemento(s) desse conjunto que melhor atende(m) a um crit\u00e9rio espec\u00edfico.\n\nProblemas de otimiza\u00e7\u00e3o est\u00e3o no cerne de muitos campos do conhecimento:\n\n* **Ci\u00eancias Naturais**: muitos processos naturais ocorrem de modo que a energia de dado sistema se torne m\u00ednima. Al\u00e9m do mais, qualquer transforma\u00e7\u00e3o poss\u00edvel de ocorrer na natureza deve levar \u00e0 maximiza\u00e7\u00e3o de uma grandeza chamada entropia (que em certo sentido corresponde \u00e0 desordem geral do universo).\n\n* **Engenharia**: na Engenharia, h\u00e1 uma busca constante pelos processos com maior efici\u00eancia poss\u00edvel, ou seja, os que v\u00e3o levar a maior lucro, maior rendimento, menor gasto de energia, etc.\n\n* **Economia**: a pr\u00f3pria ci\u00eancia da Economia nada mais \u00e9 do que o estudo de um grande problema de otimiza\u00e7\u00e3o: como alocar recursos limitados de modo a satisfazer da melhor maneira poss\u00edvel nossos anseios ilimitados?\n\n* **Filosofia**: uma corrente de pensamento da Filosofia Moral chamada de *utilitarismo* advoga que a decis\u00e3o correta a se tomar em qualquer circunst\u00e2ncia \u00e9 a que vai resultar na m\u00e1xima felicidade geral. A a\u00e7\u00e3o classificada como a mais moral pelos utilit\u00e1rios, portanto, \u00e9 aquela que maximiza a felicidade total da popula\u00e7\u00e3o. Se o problema da moralidade um dia for resolvido por meio do pensamento utilit\u00e1rio, os fil\u00f3sofos com certeza ter\u00e3o recorrido a m\u00e9todos num\u00e9ricos de otimiza\u00e7\u00e3o.\n\nProblemas de otimiza\u00e7\u00e3o, do ponto de vista matem\u00e1tico, em geral s\u00e3o formulados como problemas de minimiza\u00e7\u00e3o de fun\u00e7\u00f5es. Por exemplo, sendo uma fun\u00e7\u00e3o $f(x_1,x_2,...x_n)$, o ponto de \u00f3timo \u00e9 definido como o conjunto $(x_1,x_2,...x_n)$ que torna m\u00ednimo o valor da fun\u00e7\u00e3o $f$. Conceitualmente, a maximiza\u00e7\u00e3o \u00e9 an\u00e1loga \u00e0 minimiza\u00e7\u00e3o: para encontrar o m\u00e1ximo da fun\u00e7\u00e3o $f$, basta encontrar o m\u00ednimo de $-f$.\n\nEstudaremos aqui dois tipos de problemas de otimiza\u00e7\u00e3o:\n\n* **otimiza\u00e7\u00e3o local**, em que se tenta encontrar qualquer um dos m\u00ednimos da fun\u00e7\u00e3o;\n\n* **otimiza\u00e7\u00e3o global**, em que se tenta encontrar o m\u00ednimo global da fun\u00e7\u00e3o, ou seja, o menor de todos os m\u00ednimos.","6b10365d":"## 11.2 - DataFrames","32a57f62":"Ilustraremos a resolu\u00e7\u00e3o desse tipo de problema com a fun\u00e7\u00e3o [scipy.integrate.odeint](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.integrate.odeint.html#scipy.integrate.odeint). Essa fun\u00e7\u00e3o implementa uma adapta\u00e7\u00e3o do tradicional *solver* [LSODA](http:\/\/www.oecd-nea.org\/tools\/abstract\/detail\/uscd1227), que por sua vez utiliza m\u00e9todos num\u00e9ricos do tipo [Adams](https:\/\/www.encyclopediaofmath.org\/index.php\/Adams_method) e [BDF](https:\/\/en.wikipedia.org\/wiki\/Backward_differentiation_formula).\n\nO uso da fun\u00e7\u00e3o [scipy.integrate.odeint](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.integrate.odeint.html#scipy.integrate.odeint) \u00e9 muito parecido com a da fun\u00e7\u00e3o [scipy.optimize.root](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.optimize.root.html#scipy.optimize.root) descrita anteriormente. Sua sintaxe \u00e9:\n\n**scipy.optimize.odeint (fun, x0, t)**\n\nsendo os argumentos:\n\n* **fun**: fun\u00e7\u00e3o que aceita como entrada um vetor **(x1, x2, x3, ... , xn)** e um escalar **t**, nessa ordem, e retorna um vetor **(dx1\/dt, dx2\/dt, dx3\/dt, ..., dxn\/dt)** com os valores das fun\u00e7\u00f5es $dx\/dt$ avaliadas no ponto $(x_1, x_2, x_3, ... , x_n, t)$; \n\n* **x0**: condi\u00e7\u00e3o inicial do problema;\n\n* **t**: vetor com os pontos de $t$ em que a fun\u00e7\u00e3o $f$ ser\u00e1 calculada.\n\nO valor de retorno da fun\u00e7\u00e3o \u00e9 uma matriz com os valores das fun\u00e7\u00f5es $f$ avaliadas nos pontos do vetor **t** fornecido.","a491eb00":"Para definir objetos **float**, usamos o ponto decimal:","726d93f3":"A identidade \u00e9 a mesma, portanto, os dois nomes referem-se ao mesmo objeto.\n\nA lista completa de nomes associados aos objetos na mem\u00f3ria \u00e9 chamada de *espa\u00e7o de nomes* (*namespace*). Podemos visualizar o espa\u00e7o de nomes com o comando **dir()**:","5f396b86":"Dicion\u00e1rios s\u00e3o muito \u00fateis para implementa\u00e7\u00e3o de bancos de dados simples, como pode-se notar acima.\n\n## 4.5 Arrays NumPy\n\n*Arrays* s\u00e3o as estruturas implementadas na biblioteca [NumPy](http:\/\/www.numpy.org\/) com o objetivo de providenciar uma forma conveniente e eficiente de se representar vetores e matrizes num\u00e9ricas na linguagem Python. S\u00e3o as estruturas mais importantes para quem trabalha com computa\u00e7\u00e3o cient\u00edfica e ci\u00eancia de dados.\n\nDefinimos uma array com  a fun\u00e7\u00e3o [np.array](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.array.html):","2d99928b":"Como exemplo, resolveremos um problema inspirado na Engenharia das Rea\u00e7\u00f5es Qu\u00edmicas.\n\nSeja um reator qu\u00edmico do tipo batelada (que opera fechado e em ciclos de parada e funcionamento) onde ocorrem as seguintes rea\u00e7\u00f5es qu\u00edmicas acopladas: \n\n$$A \\rightarrow  B \\rightarrow C$$\n\nA subst\u00e2ncia $A$ se transforma na subst\u00e2ncia $B$, que por sua vez se transforma na subst\u00e2ncia $C$.\n\nA modelagem matem\u00e1tica do reator leva ao seguinte sistema de EDO's:\n\n$$       \\begin{split}\n \\frac{dC_A}{dt} = -k_1 C_A\\\\\n \\frac{dC_B}{dt} = k_1 C_A - k_2 C_B\\\\\n \\frac{dC_C}{dt} = k_2 C_B\\\\\n     \\end{split} $$\n     \nsendo $C_A$, $C_B$ e $C_C$ valores das concentra\u00e7\u00f5es no reator. Os par\u00e2metros $k_1$ e $k_2$ s\u00e3o constantes que indicam as velocidades das rea\u00e7\u00f5es $A \\rightarrow  B $ e $B \\rightarrow C$, respectivamente.\n\nNosso objetivo \u00e9 resolver o sistema de EDO's e calcular a evolu\u00e7\u00e3o das concentra\u00e7\u00f5es das tr\u00eas subst\u00e2ncias ao longo do tempo. As especifica\u00e7\u00f5es s\u00e3o:\n\n* concentra\u00e7\u00f5es iniciais: $C_{A0} = 5$ mol\/L, $C_{B0} = C_{C0} = 0$;\n* par\u00e2metros cin\u00e9ticos: $k_1 = 2$ $h^{-1}$;  $k_2 = 1$ $h^{-1}$;\n* tempo de opera\u00e7\u00e3o: $t = 5 h$.\n\nSem mais delongas, segue a resolu\u00e7\u00e3o:","7d6ace0f":"estamos associando o nome **obj** a um objeto que armazena o valor **2** na mem\u00f3ria.\n\nSe digitarmos:","d4e1e965":"#### *M\u00e3o na massa! *\n\n* Plote as fun\u00e7\u00f5es arco seno, arco cosseno e arco tangente hiperb\u00f3licas nos dom\u00ednios $x=[-2,2], [1,2]$ e $]-1,1[$, respectivamente. Nomeie os eixos $x$ e $y$ e d\u00ea um t\u00edtulo e uma legenda a seu gr\u00e1fico.","04064b40":"Existem v\u00e1rias outras fun\u00e7\u00f5es mais flex\u00edveis para se definir arrays, dentre as quais se destacam:\n\n* [np.arange (start, end, interv)](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.arange.html): cria uma array unidimensional de elementos igualmente espa\u00e7ados entre **start** (inclusive) e **end** (exclusive), indo de **interv** em **interv**;\n<br> <br>\n* [np.linspace (start, end, size)](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.linspace.html): cria uma array unidimensional de elementos igualmente espa\u00e7ados entre **start** (inclusive) e **end** (inclusive), com n\u00famero total de elementos igual a **size**;\n<br> <br>\n* [np.zeros (dim)](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.zeros.html): cria uma array com elementos nulos, de dimens\u00e3o **dim**. Para criar uma array multidimensional com esse comando, devemos fornecer uma tupla como o argumento **dim** (ver exemplos abaixo);\n<br> <br>\n* [np.ones (dim)](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.ones.html): cria uma array com elementos unit\u00e1rios, de dimens\u00e3o **dim**;\n<br> <br>\n* [np.zeros_like (A)](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.zeros_like.html): cria uma array de mesma dimens\u00e3o que **A**, com elementos nulos;\n<br> <br>\n* [np.ones_like (A)](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.ones_like.html): cria uma array de mesma dimens\u00e3o que **A**, com elementos unit\u00e1rios;\n<br> <br>\n* [np.random.standard_normal (dim)](https:\/\/docs.scipy.org\/doc\/numpy-1.15.0\/reference\/generated\/numpy.random.standard_normal.html): cria uma array com elementos aleat\u00f3rios amostrados da [distribui\u00e7\u00e3o normal padr\u00e3o](https:\/\/pt.wikipedia.org\/wiki\/Distribui%C3%A7%C3%A3o_normal#Distribui%C3%A7%C3%A3o_normal_padr%C3%A3o), de dimens\u00e3o **dim**.\n\nExemplos de aplica\u00e7\u00f5es:","c5015197":"#### *M\u00e3o na massa! *\n\n* Resolva o seguinte sistema de equa\u00e7\u00f5es diferenciais ordin\u00e1rias, resultante da modelagem do movimento de um corpo r\u00edgido isolado de for\u00e7as externas, no intervalo de tempo [0-12]:\n\n $$\ny_1' = y_2 y_3 \\,\\,\\,\\,\\,\\,\\,\\,\\, y_1(0) = 0\\\\\ny_2' = - y_1 y_3 \\,\\,\\,\\,\\,\\,\\,\\,\\, y_2(0) = 1\\\\\ny_3' = -0{,}51 y_1 y_2 \\,\\,\\,\\,\\,\\,\\,\\,\\, y_3(0) = 1\n$$","fa3d496f":"### Comandos b\u00e1sicos","2a6939a1":"# Bibliografia\n\n[MCKINNEY, W. - Python for Data Analysis - Data Wrangling with Pandas, NumPy and IPython - 2a Edi\u00e7\u00e3o - O'Reilly, 2018](https:\/\/www.amazon.com.br\/Python-Data-Analysis-Wes-Mckinney\/dp\/1491957662\/ref=dp_ob_title_bk)\n\n[VANDERPLAS, J. - Python Data Science Handbook - Essential Tools for Working with Data - O'Reilly, 2017](https:\/\/jakevdp.github.io\/PythonDataScienceHandbook\/)\n\n[LANGTANGEN, H. P. - A Primer on Scientific Programming with Python - 4a Edi\u00e7\u00e3o - 2014](https:\/\/hplgit.github.io\/primer.html\/doc\/pub\/half\/book.pdf)\n\n[STEWART, J.M. - Python for Scientists - Cambridge University Press, 2014](https:\/\/www.amazon.com\/Python-Scientists-John-M-Stewart\/dp\/1316641236\/ref=sr_1_1?ie=UTF8&qid=1504027025&sr=8-1&keywords=python+for+scientists)\n\n[pandas 0.15.2 documentation - 10 minutes to pandas](http:\/\/pandas.pydata.org\/pandas-docs\/version\/0.15\/10min.html)\n\n[Python Objects - Fredrik Lundh (2000)](http:\/\/effbot.org\/zone\/python-objects.htm)\n\n","d4ccdca2":"# 9. Equa\u00e7\u00f5es diferenciais\n\nAprenderemos a resolver aqui sistemas de equa\u00e7\u00f5es diferenciais ordin\u00e1rias (EDO's), que s\u00e3o problemas que podem ser postos na forma:\n\n$$   \\begin{split}\n\\frac{dx_1}{dt} = f_1 (t, x_1, x_2, x_3, ... , x_n)\\\\\n\\frac{dx_2}{dt} = f_2 (t, x_1, x_2, x_3, ... , x_n)\\\\\n\\frac{dx_3}{dt} = f_3(t, x_1, x_2, x_3, ... , x_n)\\\\\n...... \\\\\n\\frac{dx_n}{dt} = f_n(t, x_1, x_2, x_3, ... , x_n)\\\\\n    \\end{split} $$\n   \nOu seja, conhecem-se as derivadas de $n$ fun\u00e7\u00f5es potencialmente n\u00e3o-lineares $x_1$, $x_2$,..., $x_n$ em rela\u00e7\u00e3o a uma vari\u00e1vel independente $t$ e deseja-se conhecer as pr\u00f3prias fun\u00e7\u00f5es $x_1$, $x_2$,..., $x_n$.\n\nAs fun\u00e7\u00f5es destinadas \u00e0 resolu\u00e7\u00e3o de EDO's est\u00e3o presentes no m\u00f3dulo [scipy.integrate](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/integrate.html):","63e9ec67":"O slice com dois pontos (:), sem **start** e **end**, significa que se quer selecionar tudo na dita dimens\u00e3o:","150d90f5":"# 6. Estruturas de controle","006ea87f":"O contador **i** assumiu o valor de cada um dos elementos da lista a cada passo da itera\u00e7\u00e3o. Ou seja, para cada elemento da lista **sequencia**, o comando **print** foi executado.\n\nA sequ\u00eancia n\u00e3o necessariamente precisa ser uma lista. Podemos usar uma string, por exemplo: ","be89ca32":"Um [DataFrame](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.html) \u00e9 uma tabela de dados composta por um conjunto ordenado de colunas, cada qual de um diferente tipo (num\u00e9rico, string, boleano...)\n\nH\u00e1 dois conjuntos de \u00edndices, um para as linhas e outro para as colunas. Podemos entender um DataFrame como um dicion\u00e1rio de s\u00e9ries que compartilham os mesmos \u00edndices.\n\nAbaixo, constru\u00edmos um DataFrame a partir de um dicion\u00e1rio. Este DataFrame cont\u00e9m notas de provas de alunos hipot\u00e9ticos.","f8842794":"Aos estados que n\u00e3o constam do dicion\u00e1rio *sdata* s\u00e3o atribu\u00eddos valores NaN (*Not a Number*), o que indica a exist\u00eancia de *dados faltantes* na s\u00e9rie. Dados faltantes constituem um problema s\u00e9rio e recorrente em qualquer an\u00e1lise de dados.\n\n\u00c9 poss\u00edvel realizar opera\u00e7\u00f5es matem\u00e1ticas com as s\u00e9ries:","52113e8f":"## 11.1 - S\u00e9ries\n\nUma [s\u00e9rie](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.html) no [pandas](https:\/\/pandas.pydata.org\/) \u00e9 composta por:\n\n* *valores*: uma array unidimensional, contendo uma sequ\u00eancia de valores num\u00e9ricos de interesse;\n* *\u00edndices*: uma outra array unidimensional, com legendas para estes valores.\n\nDefinimos s\u00e9ries fornecendo uma lista (ou outra estrutura como tupla, array [NumPy](http:\/\/www.numpy.org\/), ...) com os valores:","216406e3":"Repare que a unidade imagin\u00e1ria $\\sqrt{-1}$ \u00e9 denotada pela letra **j**.","2eeb7aae":"Caso n\u00e3o especific\u00e1ssemos os \u00edndices com a lista *nomes*, estes seriam uma sequ\u00eancia de inteiros come\u00e7ando do zero.\n\nPara reorganizar a tabela, de acordo com os \u00edndices:","c3f18246":"# 5. Gr\u00e1ficos - A biblioteca [Matplotlib](https:\/\/matplotlib.org\/)","a897bc7c":"#### *M\u00e3o na massa! *\n\n* Plote a superf\u00edcie da fun\u00e7\u00e3o $f(x,y) = \\cos(x^2) + \\sin^3(y)$ no intervalo $x = [-4,4]$ e $y = [-4,4]$.","9debe125":"Foram necess\u00e1rias 19 itera\u00e7\u00f5es para se atingir o m\u00ednimo (1,1).\n\nO m\u00e9todo num\u00e9rico usado por default na fun\u00e7\u00e3o  [scipy.optimize.minimize](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.optimize.minimize.html) \u00e9 o m\u00e9todo [BFGS](https:\/\/en.wikipedia.org\/wiki\/Broyden%E2%80%93Fletcher%E2%80%93Goldfarb%E2%80%93Shanno_algorithm). Consulte a [refer\u00eancia oficial da fun\u00e7\u00e3o](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.optimize.minimize.html) para uma lista com todos os m\u00e9todos dispon\u00edveis.","29905b3e":"# 4. Estruturas de dados","c900d5cc":"Limitando a exibi\u00e7\u00e3o dos n\u00fameros para duas casas decimais:","0a56fdc0":"## 4.2 Tuplas\n\n*Tuplas* s\u00e3o muito parecidas com as listas, com a diferen\u00e7a de que seus elementos n\u00e3o podem ser modificados. Ou seja, tuplas s\u00e3o *objetos imut\u00e1veis*.\n\nDefinimos tuplas de maneira parecida com que definimos as listas, mas sem o colchete:","cc2507d3":"\u00c9 importante destacar que cada fun\u00e7\u00e3o tem seu espa\u00e7o de nomes pr\u00f3prio, independente do espa\u00e7o de nomes do resto do programa. Isso quer dizer que os nomes **x** e **y**, definidos dentro da fun\u00e7\u00e3o **somar2**, n\u00e3o est\u00e3o definidos fora da fun\u00e7\u00e3o. Da mesma maneira, os nomes definidos fora da fun\u00e7\u00e3o (**k** e **z** acima) n\u00e3o est\u00e3o definidos dentro da fun\u00e7\u00e3o. Podemos inclusive associar, fora da fun\u00e7\u00e3o, os nomes **x** e **y** a outros objetos e esses nomes n\u00e3o ter\u00e3o rela\u00e7\u00e3o nenhuma com os nomes **x** e **y** utilizados dentro da fun\u00e7\u00e3o:","f4290d24":"No caso acima, **A** representa um vetor (array unidimensional). O argumento da fun\u00e7\u00e3o [np.array](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.array.html) deve ser uma lista (por isso os colchetes dentro dos par\u00eanteses).\n\nPara definir uma matriz (array bidimensional), basta fornecer \u00e0 fun\u00e7\u00e3o [np.array](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.array.html) uma lista que contenha v\u00e1rias outras listas que armazenem as linhas da matriz:","bbb8c78c":"Todos esses nomes (em sua maioria definidos por tr\u00e1s dos panos pelo Python) est\u00e3o sendo usados para se referir a objetos. Perceba a presen\u00e7a de **obj** e **novo_nome**, definidos nos exemplos acima.","7e730a61":"\u00c9 poss\u00edvel extrair apenas os valores ou apenas os \u00edndices das s\u00e9ries:","08084432":"Repare que o m\u00f3dulo [cm](https:\/\/matplotlib.org\/api\/cm_api.html) da biblioteca [Matplotlib](https:\/\/matplotlib.org\/) foi importado. Esse m\u00f3dulo possibilita o uso de diversos mapas de cores para tra\u00e7ar a superf\u00edcie da fun\u00e7\u00e3o. No caso acima, usamos o mapa de cores **cm.rainbow**. Para uma lista completa dos mapas de cores dispon\u00edveis, consulte a [refer\u00eancia oficial do m\u00f3dulo](https:\/\/matplotlib.org\/examples\/color\/colormaps_reference.html).\n\nPara efetuar a minimiza\u00e7\u00e3o, utilizaremos a fun\u00e7\u00e3o [scipy.optimize.minimize](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.optimize.minimize.html). Seu uso tem a seguinte sintaxe:\n\n**scipy.optimize.minimize (fun, x0)**\n\nsendo os argumentos:\n\n* **fun**: fun\u00e7\u00e3o que deve ser minimizada, definida previamente com o comando **def**; \n\n* **x0**: estimativa inicial do m\u00ednimo.\n\nPara efetuar a minimiza\u00e7\u00e3o, o primeiro passo \u00e9 definir a fun\u00e7\u00e3o a ser minimizada com o **def**:","4c74cb29":"O contador **i** foi inicializado com o valor **10** antes do come\u00e7o do bloco. A cada itera\u00e7\u00e3o, o valor de **i** foi atualizado. Caso essa atualiza\u00e7\u00e3o n\u00e3o fosse efetuada, a express\u00e3o l\u00f3gica **i>0** nunca se tornaria falsa e os comandos do bloco seriam executados infinitamente, em uma situa\u00e7\u00e3o conhecida como *loop infinito*.\n\nDe modo a evitar a possibilidade de loop infinito, devemos usar o bloco **for**.\n\n### 6.2.2. O bloco for\n\nO bloco **for** (*for* significa *para*, em ingl\u00eas) repete um conjunto de comandos para cada elemento de uma sequ\u00eancia especificada.\n\nNo exemplo a seguir, os elementos de uma lista s\u00e3o impressos em tela:","9c9f33e0":"A tupla acima armazena os valores 1, 2 e 3. \n\nTamb\u00e9m podemos usar par\u00eanteses para definir as tuplas:","46557738":"#### *M\u00e3o na massa! *\n\n* Adicione tr\u00eas novos estados \u00e0 s\u00e9rie **obj3**.","9420bd80":"Vamos confirmar que **obj** e **novo_nome** referem-se ao mesmo objeto:","d789dc2f":"O m\u00e9todo num\u00e9rico utilizado na fun\u00e7\u00e3o [np.linalg.solve](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.linalg.solve.html) \u00e9 uma [decomposi\u00e7\u00e3o LU](https:\/\/pt.wikipedia.org\/wiki\/Decomposi%C3%A7%C3%A3o_LU) com pivotamento parcial e permuta de linhas. Caso voc\u00ea tente usar essa fun\u00e7\u00e3o sem resultados satisfat\u00f3rios, seu problema pode ser mais complicado do que o habitual. Talvez o sistema seja esparso e tenha problemas de condicionamento, por exemplo. Nesse caso, voc\u00ea pode testar as fun\u00e7\u00f5es presentes no m\u00f3dulo [scipy.sparse.linalg](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/sparse.linalg.html#module-scipy.sparse.linalg).\n\n## 8.2 Sistemas de equa\u00e7\u00f5es n\u00e3o-lineares\n\nSistemas de equa\u00e7\u00f5es n\u00e3o-lineares s\u00e3o problemas que podem ser postos na forma:\n\n$$   \\begin{split}\nf_1 (x_1, x_2, x_3, ... , x_n) = 0\\\\\nf_2 (x_1, x_2, x_3, ... , x_n) = 0\\\\\nf_3 (x_1, x_2, x_3, ... , x_n) = 0\\\\\n...... \\\\\nf_n (x_1, x_2, x_3, ... , x_n) = 0\\\\\n    \\end{split} $$\n    \nem que $f_1$, $f_2$,..., $f_n$ s\u00e3o $n$ fun\u00e7\u00f5es n\u00e3o-lineares que dependem cada uma potencialmente de $n$ vari\u00e1veis $x_1$,  $x_2$, ...,  $x_n$. \n\nFundamentalmente, o problema de encontrar ra\u00edzes de sistemas n\u00e3o-lineares \u00e9 intimamente relacionado ao problema de otimiza\u00e7\u00e3o (tratado na Se\u00e7\u00e3o 10 adiante). Por esse motivo, as fun\u00e7\u00f5es destinadas \u00e0 resolu\u00e7\u00e3o de sistemas n\u00e3o-lineares encontram-se no m\u00f3dulo [scipy.optimize](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/optimize.html):","db512ddf":"# 2. Fun\u00e7\u00f5es","1430d987":"Perceba que o resultado de $sen(\\pi)$ n\u00e3o deu exatamente zero, como esperar\u00edamos, mas sim um n\u00famero extremamente pequeno. Esse \u00ednfimo valor residual \u00e9 resultado do inevit\u00e1vel erro inerente a qualquer c\u00e1lculo num\u00e9rico. Neste caso, o erro \u00e9 t\u00e3o pequeno (1,22 x 10$^{-16}$) que consideramos o valor como sendo zero, para todos os efeitos.","4622ec56":"No caso, como os \u00edndices s\u00e3o strings, o crit\u00e9rio de organiza\u00e7\u00e3o foi o alfab\u00e9tico.\n\nAbaixo, algumas maneiras de extrair se\u00e7\u00f5es da tabela:","3956dc95":"A lista acima armazena os valores 1, 2 e 3.\n\nAcessamos os valores escrevendo o nome da lista seguido de um colchete contendo a posi\u00e7\u00e3o do elemento desejado:","a01c516c":"Os comandos para realizar opera\u00e7\u00f5es aritm\u00e9ticas s\u00e3o intuitivos:","caed596f":"Este [notebook](http:\/\/jupyter.org\/) \u00e9 dedicado a uma breve inicia\u00e7\u00e3o \u00e0 programa\u00e7\u00e3o em Python com vistas \u00e0 utiliza\u00e7\u00e3o em problemas b\u00e1sicos de c\u00e1lculo num\u00e9rico, computa\u00e7\u00e3o cient\u00edfica, ci\u00eancia de dados, aprendizado de m\u00e1quina e aplica\u00e7\u00f5es de engenharia de processos. Os c\u00f3digos est\u00e3o escritos na linguagem [Python](https:\/\/www.python.org\/) e utilizam as bibliotecas [NumPy](http:\/\/www.numpy.org\/), [Matplotlib](https:\/\/matplotlib.org\/), [Scipy](https:\/\/www.scipy.org\/) e [pandas](https:\/\/pandas.pydata.org\/).\n\n<img src=\"https:\/\/www.python.org\/static\/img\/python-logo.png\" width=\"300\" height=\"300\" \/>","d5aa9e58":"#### *M\u00e3o na massa! *\n\n* Calcule o valor da express\u00e3o: $ [\\sin(\\pi^2)-\\cos(2\\pi-i)] ^3 $:","eceaefe3":"## 10.2 Otimiza\u00e7\u00e3o global\n\nM\u00e9todos num\u00e9ricos de otimiza\u00e7\u00e3o global s\u00e3o necess\u00e1rios quando se deseja encontrar o m\u00ednimo global de uma fun\u00e7\u00e3o que possui m\u00faltiplos m\u00ednimos. \n\nPara ilustrar a otimiza\u00e7\u00e3o global, buscaremos o m\u00ednimo da desafiadora fun\u00e7\u00e3o conhecida como \"caixa de ovos\":\n\n$$ f(x,y) = -(y+47) \\sin\\left(\\sqrt{\\left|\\displaystyle\\frac{x}{2}+(y+47)\\right|}\\right) - x \\sin\\left(\\sqrt{\\left|x-(y+47)\\right|}\\right) $$\n\nSe plotarmos a fun\u00e7\u00e3o, perceberemos o porqu\u00ea de ela ser t\u00e3o desafiadora (e o porqu\u00ea de ela ser chamada de \"caixa de ovos\"):","e7c5c73a":"No caso, nosso objeto **obj** tem a identidade **4309338176** e \u00e9 do tipo **int** (n\u00famero inteiro).\n\nUm objeto pode ter v\u00e1rios nomes. Por exemplo, j\u00e1 associamos anteriormente o nome **obj** ao objeto **3**. Podemos agora associar um novo nome a esse objeto: ","45ce2f5d":"Podemos definir objetos complexos de duas maneiras:","574c95b4":"Qualquer estrutura de dados que pode ser usada como sequ\u00eancia de um loop **for** \u00e9 classificada em Python como uma *estrutura iter\u00e1vel*. As estruturas aqui apresentadas (listas, tuplas, strings e dicion\u00e1rios) s\u00e3o todas iter\u00e1veis.\n\nMuitas vezes, \u00e9 conveniente usar a sequ\u00eancia de \u00edndices de uma dada estrutura como iter\u00e1vel em um loop for. Para isso, usamos uma combina\u00e7\u00e3o das fun\u00e7\u00f5es **range** e **len**. \n\nA fun\u00e7\u00e3o **range** \u00e9 uma estrutura iter\u00e1vel que n\u00e3o armazena seus elementos na mem\u00f3ria, e sim os gera *apenas no momento da itera\u00e7\u00e3o*. A sintaxe de defini\u00e7\u00e3o \u00e9 semelhante \u00e0 das listas:\n\n**range (start, end, interv)**\n\nOs elementos gerados s\u00e3o igualmente espa\u00e7ados entre **start** (inclusive) e **end** (exclusive), indo de **interv** em **interv**. Exemplo de uso:","86d19b71":"#### *M\u00e3o na massa! *\n\n* Resolva o sistema:\n\n$$\n2 x_1 - x_2 - e^{-x_1} = 0\n$$\n$$\n- x_1 + 2 x_2 - e^{-x_2} = 0\n$$","9641313e":"A t\u00edtulo de exemplo, plotaremos o gr\u00e1fico bidimensional da fun\u00e7\u00e3o $y = \\cos(x)$, no intervalo $x = [-2\\pi,2\\pi]$.\n\nO primeiro passo \u00e9 definir em um vetor os pontos do dom\u00ednio da fun\u00e7\u00e3o:","7c8e2f2c":"Em outras linguagens de programa\u00e7\u00e3o, implementar essa simples opera\u00e7\u00e3o n\u00e3o seria uma tarefa t\u00e3o pr\u00e1tica.\n\nO acesso a elementos das tuplas, assim como com as listas, tamb\u00e9m se d\u00e1 com o *slice* na forma **nome_da_tupla [ start: end : intervalo ]**.","08f85911":"Se voc\u00ea n\u00e3o conseguir resolver seu problema de primeira, considere tentar outros m\u00e9todos e fun\u00e7\u00f5es ou testar diversas estimativas iniciais.\n\nPara resolver problemas unidimensionais, em que h\u00e1 uma \u00fanica equa\u00e7\u00e3o n\u00e3o-linear $f(x) = 0$, \u00e9 poss\u00edvel utilizar a fun\u00e7\u00e3o aqui apresentada. H\u00e1 m\u00e9todos, por\u00e9m, mais simples e mais eficazes para esse tipo de problema, dispon\u00edveis no m\u00f3dulo [scipy.optmize](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/optimize.html). Exemplos s\u00e3o [scipy.optmize.brentq](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.optimize.brentq.html#scipy.optimize.brentq), [scipy.optmize.newton](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.optimize.newton.html#scipy.optimize.newton) ou [scipy.optmize.bisect](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.optimize.bisect.html#scipy.optimize.bisect).","33a7848a":"# 11. A Biblioteca [pandas](https:\/\/pandas.pydata.org\/)\n\nEsta \u00faltima se\u00e7\u00e3o ser\u00e1 dedicada \u00e0 apresenta\u00e7\u00e3o da biblioteca [pandas](https:\/\/pandas.pydata.org\/), que cont\u00e9m recursos especiais para an\u00e1lise e manipula\u00e7\u00e3o de dados (em particular, tabelas num\u00e9ricas e s\u00e9ries temporais). Seu uso \u00e9 padr\u00e3o em aplica\u00e7\u00f5es de ci\u00eancia de dados no Python. A biblioteca faz uso de v\u00e1rios recursos do [NumPy](http:\/\/www.numpy.org\/) e [Matplotlib](https:\/\/matplotlib.org\/), j\u00e1 apresentados anteriormente. Para import\u00e1-la, escrevemos:","18384657":"A fun\u00e7\u00e3o [plt.plot](https:\/\/matplotlib.org\/api\/pyplot_api.html#matplotlib.pyplot.plot) aceita como argumentos os vetores que armazenam os elementos do dom\u00ednio e da imagem, nessa ordem.\n\nPodemos customizar o tipo de curva por meio de uma string fornecida como terceiro argumento \u00e0 fun\u00e7\u00e3o [plt.plot](https:\/\/matplotlib.org\/api\/pyplot_api.html#matplotlib.pyplot.plot). Por exemplo, se quisermos tra\u00e7ar a mesma curva acima com asteriscos vermelhos, basta digitar:","40157ba3":"Podemos imprimir as strings na tela:","5790ef8b":"No caso acima, **y** \u00e9 usado para se referir ao objeto de entrada e **x** ao objeto de sa\u00edda, enquanto dentro da fun\u00e7\u00e3o **y** se refere ao objeto de sa\u00edda e **x** ao objeto de entrada.\n\nTamb\u00e9m \u00e9 importante destacar que os nomes dados ao argumento de entrada dentro e fora da fun\u00e7\u00e3o se referem ao mesmo objeto. Isso significa que, se fornecermos um objeto mut\u00e1vel como argumento de uma fun\u00e7\u00e3o e a fun\u00e7\u00e3o modificar de alguma forma esse objeto, essa mudan\u00e7a se refletir\u00e1 tamb\u00e9m fora da fun\u00e7\u00e3o. Observe o seguinte exemplo:","436798c4":"## 10.1 Otimiza\u00e7\u00e3o local\n\nM\u00e9todos de otimiza\u00e7\u00e3o local s\u00e3o convenientes para aplica\u00e7\u00f5es:\n\n* em fun\u00e7\u00f5es com um \u00fanico m\u00ednimo;\n* em fun\u00e7\u00f5es com v\u00e1rios m\u00ednimos, quando o interesse est\u00e1 em qualquer um desses m\u00ednimos e n\u00e3o apenas no menor de todos eles.\n\nComo exemplo de otimiza\u00e7\u00e3o local, buscaremos o m\u00ednimo da famosa fun\u00e7\u00e3o de Rosenbrock:\n\n$$ f(x,y) = 100(y-x^2)^2 + (1-x)^2 $$\n\nEssa fun\u00e7\u00e3o tem um \u00fanico m\u00ednimo, no ponto (1,1). Ela \u00e9 not\u00f3ria na \u00e1rea de otimiza\u00e7\u00e3o por proporcionar dificuldade de converg\u00eancia a diversos m\u00e9todos.\n\nAntes de resolver, vamos dar uma olhada na fun\u00e7\u00e3o, plotando-a:","298613c5":"Armazenamos a fun\u00e7\u00e3o cosseno na **lista_sagaz** e a acessamos na lista para calcular o cosseno de $\\pi$. Lembre-se de que o prefixo **np** antes de **cos** e **pi** \u00e9 o identificador da biblioteca [NumPy](http:\/\/www.numpy.org\/).","06c7312c":"* Implemente a seguinte fun\u00e7\u00e3o matem\u00e1tica como uma fun\u00e7\u00e3o em Python:\n\n$$ y(t) = \n \\begin{cases}\n    -\\alpha t^2+\\beta,& t\\geq 0\\\\\n    \\alpha t^2+\\beta,  & t<0\n\\end{cases}\n$$\n\nSua fun\u00e7\u00e3o deve aceitar um vetor $t$ e dois escalares $\\alpha$ e $\\beta$ e retornar um vetor $y$ com os valores $y(t)$. \n\nPlote $y(t)$ no intervalo $t=[-9,9]$ para $\\alpha = 3$ e $\\beta = 5$.","2ed14fee":"### Importando m\u00f3dulos","07a70e35":"Caso prossiga comigo neste notebook, l\u00e1 embaixo voc\u00ea aprender\u00e1 a resolver problemas como esse!","4ed167a8":"Ap\u00f3s a palavra-chave **def**, devemos escrever o nome da fun\u00e7\u00e3o (no caso acima, **somar2**). Entre par\u00eanteses, ap\u00f3s o nome, colocamos o(s) nome(s) do(s) objeto(s) que representa(m) o(s) input(s) do usu\u00e1rio (no caso acima, apenas um input, **x**). A fun\u00e7\u00e3o deve retornar um valor de sa\u00edda ao usu\u00e1rio, especificado pelo comando **return**.\n\nA fun\u00e7\u00e3o **somar2** acima \u00e9 bem simples: aceita um argumento **x** e retorna o valor **x+2** ao usu\u00e1rio. Para utiliz\u00e1-la, basta digitar seu nome seguido do argumento de entrada entre par\u00eanteses:","86381f8b":"Estruturas de dados s\u00e3o objetos que cont\u00e9m outros objetos. Estudaremos as seguintes estruturas: \n\n* listas;\n* tuplas;\n* strings;\n* dicion\u00e1rios;\n* arrays definidas na biblioteca [NumPy](http:\/\/www.numpy.org\/).\n\n## 4.1 Listas\n\n*Listas* s\u00e3o estruturas contendo objetos ordenados que podem ser modificados.\n\nDefinimos listas usando colchetes:","68a3ce60":"Podemos atribuir o valor retornado \u00e0 fun\u00e7\u00e3o a um objeto qualquer:","774700d0":"Ah! Agora sim! M\u00ednimo global encontrado!\n\nO exemplo acima ilustra a import\u00e2ncia de se conhecer, pelo menos superficialmente, o m\u00e9todo num\u00e9rico que se est\u00e1 utilizando, j\u00e1 que talvez ele pode n\u00e3o funcionar da maneira como desejamos. Nesses casos, \u00e9 necess\u00e1ria a interven\u00e7\u00e3o do usu\u00e1rio, e para isso o conhecimento sobre o mecanismo do m\u00e9todo \u00e9 essencial.","5d04f029":"# Conclus\u00e3o\n\nEste foi um breve tutorial sobre a aplica\u00e7\u00e3o do Python na resolu\u00e7\u00e3o de problemas de c\u00e1lculo num\u00e9rico, computa\u00e7\u00e3o cient\u00edfica e engenharia. Agora voc\u00ea tem plenas condi\u00e7\u00f5es de programar com suas pr\u00f3prias pernas, consultando o *help* das fun\u00e7\u00f5es, a refer\u00eancia oficial ou o Google, sempre que surgirem d\u00favidas. \n\nCaso voc\u00ea se interesse em ler alguns exemplos de aplica\u00e7\u00f5es do Python na Engenharia Qu\u00edmica e de Alimentos, confira [outros notebooks Jupyter de minha autoria](http:\/\/afrjr.weebly.com\/jupyter.html).\n\nAt\u00e9 a pr\u00f3xima!","011e431f":"Sempre use o *help* quando surgirem d\u00favidas sobre uma fun\u00e7\u00e3o!\n\nO seguinte exemplo ilustra o tra\u00e7ado de v\u00e1rias curvas em uma mesma janela e o uso de comandos para especificar os limites dos eixos e para atribuir um t\u00edtulo ao gr\u00e1fico e legendas aos eixos e \u00e0s curvas:","678163cf":"Pode-se acessar um elemento individual por meio de seu \u00edndice:","580925dd":"Fizemos uso da fun\u00e7\u00e3o [plt.subplots](https:\/\/matplotlib.org\/devdocs\/api\/_as_gen\/matplotlib.pyplot.subplots.html) para criar uma figura (objeto **fig**) contendo um gr\u00e1fico 3D (objeto **ax**). Uma vez criada a figura, usamos a fun\u00e7\u00e3o [plt.plot_surface](https:\/\/matplotlib.org\/mpl_toolkits\/mplot3d\/tutorial.html#surface-plots) para plotar a superf\u00edcie desejada utilizando os pontos armazenados em **X**, **Y** e **Z**.\n\nExistem v\u00e1rios outros tipos de gr\u00e1ficos tridimensionais que podem ser plotados com a biblioteca [Matplotlib](https:\/\/matplotlib.org\/). Caso tenha curiosidade, d\u00ea uma olhada no [tutorial](https:\/\/matplotlib.org\/mpl_toolkits\/mplot3d\/tutorial.html) do m\u00f3dulo [mplot3d](https:\/\/matplotlib.org\/mpl_toolkits\/mplot3d\/api.html#mplot3d-api).","8d85eff5":"Os dois primeiros comandos, subordinados ao bloco **if**, n\u00e3o foram executados porque a express\u00e3o l\u00f3gica testada \u00e9 claramente falsa. O terceiro comando, no entanto, por estar no n\u00edvel de indenta\u00e7\u00e3o normal do c\u00f3digo, indica o fim do bloco **if** e \u00e9 executado normalmente.\n\nA indenta\u00e7\u00e3o \u00e9 obrigat\u00f3ria tamb\u00e9m em rela\u00e7\u00e3o a outros blocos de comandos que estudaremos, como **while**, **for** e **def**.","c926e9d9":"## 4.4 Dicion\u00e1rios\n\nDicion\u00e1rios s\u00e3o estruturas mut\u00e1veis contendo objetos n\u00e3o ordenados cujos \u00edndices podem ser quaisquer objetos imut\u00e1veis.\n\nDicion\u00e1rios s\u00e3o definidos entre chaves e seus elementos devem estar escritos na forma **\u00edndice:objeto**:","8680d2c3":"Suponhamos tamb\u00e9m que os alunos tenham feito a prova final e deseja-se adicionar essas novas notas e a situa\u00e7\u00e3o final (aprovado ou reprovado):","2e4ef3c0":"* Crie duas matrizes de formato 2x3, chamadas **A** e **B**, com elementos aleato\u0301rios amostrados da distribui\u00e7\u00e3o normal padr\u00e3o;\n* Multiplique **A** pela transposta de **B**, guardando o resultado na matriz **C**;\n* Multiplique **A** e **B** elemento a elemento, guardando o resultado na matriz **D**;\n* Multiplique os elementos da primeira coluna de **C** pelo elemento **D**$_{\\textbf{11}}$, e substitua a segunda coluna de **A** pelo resultado.\n\nImprima os resultados ao t\u00e9rmino de cada um dos quatro passos acima.","33fe7146":"#### *M\u00e3o na massa! *\n\n* Defina uma lista que contenha os n\u00fameros naturais de 1 a 10 e use um *slice* para acessar apenas os m\u00faltiplos de 3.","3ac43a8a":"# 1. Objetos","dd4f6cbb":"A mesma sintaxe pode ser usada para adicionar um novo elemento \u00e0 s\u00e9rie:","539db929":"#### *M\u00e3o na massa! *\n\n* Na c\u00e9lula abaixo, crie um objeto num\u00e9rico que voc\u00ea imagine n\u00e3o ser do tipo **int** e imprima na tela seu **id** e seu **tipo**.","0e2510d6":"#### *M\u00e3o na massa! *\n\n* Utilize uma compreens\u00e3o de lista para gerar em uma linha uma lista contendo os n\u00fameros at\u00e9 1000 que contenham o algarismo 3. Talvez voc\u00ea se interesse pela palavra-chave **in** e pela fun\u00e7\u00e3o **str( )** do Python.","4399c3cd":"# 8. Equa\u00e7\u00f5es alg\u00e9bricas\n\nNeste tutorial, aprenderemos a resolver dois tipos de problemas envolvendo equa\u00e7\u00f5es alg\u00e9bricas:\n\n* sistemas de equa\u00e7\u00f5es lineares;\n* sistemas de equa\u00e7\u00f5es n\u00e3o-lineares.\n\n## 8.1 Sistemas de equa\u00e7\u00f5es lineares\n\nA maneira mais pr\u00e1tica de se resolver sistemas de equa\u00e7\u00f5es lineares no Python \u00e9 utilizando a fun\u00e7\u00e3o [np.linalg.solve](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.linalg.solve.html). Essa fun\u00e7\u00e3o resolve sistemas lineares na forma:\n\n$$ Ax = b $$\n\n$A$ \u00e9 uma matriz quadrada de dimens\u00f5es $n$ x $n$. J\u00e1 $x$ e $b$ s\u00e3o vetores de dimens\u00e3o $n$. \n\nA fun\u00e7\u00e3o [np.linalg.solve](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.linalg.solve.html) tem a seguinte sintaxe:\n\n**np.linalg.solve(A,b)**\n\nsendo os argumentos:\n\n* **A**: a matriz $A$;\n* **b**: o vetor $b$;\n\nO valor de retorno \u00e9 o vetor $x$.\n\nPor exemplo, vamos resolver o seguinte sistema:\n\n$$\n    \\begin{alignedat}{4}\n      3.5 x & {}+{} & 2y &       &    & = 5 \\\\\n       - 1.5 x &  {}+{}     & 2.8 y & {}+{} & 1.9z & = -1 \\\\\n          &       & -2.5 y & {}+{} & 3z & = 2\n    \\end{alignedat}\n$$","fe21a97e":"No caso acima, selecionamos o primeiro elemento de cada linha em todas as colunas.","f51551f6":"## 4.3 Strings","ab11b0e4":"#### *M\u00e3o na massa! *\n\n* Escreva e teste uma fun\u00e7\u00e3o que aceite tr\u00eas matrizes e retorne a soma de suas transpostas.","1145ee54":"Suponhamos que desejemos adicionar uma coluna com as m\u00e9dia das notas das provas. Nada mais f\u00e1cil:","3dc3d6e0":"No exemplo acima, **len(L)** fornece o comprimento da lista **L** (no caso, 5). Da\u00ed, **range(len(L))**, equivalente a **range(5)**, fornece os elementos 0,1,2,3 e 4 para itera\u00e7\u00e3o do contador **i**. Esse contador, por sua vez, \u00e9 usado como \u00edndice da lista **L** no c\u00e1lculo do somat\u00f3rio. O uso da fun\u00e7\u00e3o **range(len(L))** garante que o iter\u00e1vel do loop corresponda a uma lista com os \u00edndices de todos os elementos de **L**.\n\nMuito importante no uso das loops **for** e **while** s\u00e3o as palavras-chave **break** e **continue**. A palavra-chave **break** interrompe a execu\u00e7\u00e3o do loop, enquanto **continue** faz com que se pule para o pr\u00f3ximo passo da itera\u00e7\u00e3o. Observe os seguintes exemplos:","c6c09f4b":"Na fun\u00e7\u00e3o acima, o valor de $t$ deve invariavelmente ser fornecido pelo usu\u00e1rio. Os valores dos par\u00e2metros $A$, $a$ e $\\omega$ s\u00e3o opcionais. Caso n\u00e3o sejam fornecidos, os valores especificados na defini\u00e7\u00e3o acima (no caso, 1,1 e $2\\pi$) ser\u00e3o utilizados. Caso sejam fornecidos, devem ser escritos na forma **arg = ...**, em qualquer ordem. Analise o exemplo:","bc0c1fc8":"\nA fun\u00e7\u00e3o **len** retorna o tamanho, ou comprimento (*length*) de dada estrutura.\n\nNo seguinte exemplo, calculamos o seguinte somat\u00f3rio: $\\displaystyle\\sum_{i=1}^{5} i^2$, usando a combina\u00e7\u00e3o das fun\u00e7\u00f5es **range** e **len**:","158b852a":"estamos reassociando o nome **obj** a um outro objeto que armazena o valor **3** na mem\u00f3ria. O antigo objeto, que armazena o valor **2**, permanece intacto na mem\u00f3ria, mas sem um nome para identific\u00e1-lo.\n\nPodemos acessar a identidade e o tipo de um objeto com os seguintes comandos:"}}