{"cell_type":{"a50fa884":"code","bf2b10f4":"code","e1dcd9a9":"code","d0428f04":"code","a011bbb3":"code","cab45518":"code","191b1e53":"code","edca3872":"code","9273eeac":"code","a08bb570":"code","6910f0fb":"code","c82346fe":"code","d6445648":"code","4f66def0":"code","4108f952":"code","756f6c82":"code","8dc52c3f":"code","cabb5161":"code","ad40be3c":"code","d5a07f37":"code","3ea00091":"code","dcf230ab":"code","24ae35cd":"code","d5868c36":"code","bc5ce91d":"code","1dd9371d":"code","5b7ce993":"code","fa292ef1":"code","6d6aefb5":"code","b36a3c9d":"code","c21153db":"code","9a8536d7":"code","4ba5d913":"code","543c69ef":"code","afefa692":"code","cb25631e":"code","59218ad3":"code","b316fa92":"code","bed7ef7b":"code","2daa3c16":"code","4b96d24b":"code","4edfe7fe":"code","d6b4a591":"code","d363d88a":"code","dd66ffd1":"code","0c7f53fa":"code","35f9b183":"markdown","7994c6e9":"markdown","948e8c13":"markdown","6d84ecf8":"markdown","05c2d93e":"markdown","51dc5baa":"markdown","0ba7bba8":"markdown","c9c73bab":"markdown","e16e2698":"markdown","0b636c55":"markdown","5355a203":"markdown","8ffdfaaa":"markdown"},"source":{"a50fa884":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy\nimport descartes\nimport geopandas as gpd\nfrom shapely.geometry import Point, Polygon\nimport xlrd\nimport contextily as ctx\nimport geoplot as gplt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bf2b10f4":"#read and assign name to training data for EDA\ntrain = pd.read_csv('..\/input\/cee-498-project-4-no2-prediction\/train.csv')\n","e1dcd9a9":"#Shape of data frame\nprint(train.shape)","d0428f04":"#show full data frame\npd.set_option(\"display.max_rows\", None, \"display.max_columns\", None)\n#check out the columns of data frame\ntrain.head()","a011bbb3":"train.dtypes","cab45518":"#examine summary stats of data frame\ntrain.describe()","191b1e53":"#Are there missing values in the dataset? - no\nprint(sum(train.isnull().sum()))\n#Are there duplicated in the dataset? - no\nprint(sum(train.duplicated()))","edca3872":"mean = train['Observed_NO2_ppb'].mean()\nstd = train['Observed_NO2_ppb'].std()\nnum_bins = 20\n\nplt.figure(figsize=(8, 6))\nn, bins, patches = plt.hist(train['Observed_NO2_ppb'], num_bins, density=True)\ny = scipy.stats.norm.pdf(bins, mean, std)\nplt.plot(bins, y, 'r--')\nplt.xlabel('Observed NO2 (ppb)')\nplt.ylabel('Probability density')\nplt.title('PDF of Observed NO2 (ppb)')\nplt.show()\n\n","9273eeac":"sns.boxplot(x=train[\"Observed_NO2_ppb\"])","a08bb570":"States = train[\"State\"].unique()\nprint(train[\"Monitor_ID\"].nunique())\nprint(States)\nfor i in States:\n    sub = train[train[\"State\"] == i]\n    j = sub[\"Monitor_ID\"].nunique()\n    print(i,j)","6910f0fb":"fig,ax = plt.subplots(1,1)\nstates = gpd.read_file('..\/input\/usshapefile\/tl_2017_us_state.shp')\nstates.plot(ax=ax, color = 'black')\ntrain_points = train.apply(lambda row: Point(row.Longitude, row.Latitude), axis = 1)\ngpd_train = gpd.GeoDataFrame(train, geometry = df_points)\ngpd_train.plot(ax=ax, alpha=0.9,legend=True,markersize=10)\nplt.xlim(-130,-65)\nplt.ylim(24,50)\nplt.figure(figsize=(20,15))\nplt.show()","c82346fe":"fig,ax = plt.subplots(1,1)\nstates = gpd.read_file('..\/input\/usshapefile\/tl_2017_us_state.shp')\nstates.plot(ax=ax, color = 'grey')\ntrain_points = train.apply(lambda row: Point(row.Longitude, row.Latitude), axis = 1)\ngpd_train = gpd.GeoDataFrame(train, geometry = df_points)\ngpd_train.plot(column='Observed_NO2_ppb', ax=ax, alpha=0.9,legend=True, \n               markersize=15, legend_kwds={'label': 'Observed NO2 (ppb)', 'orientation':'horizontal'})\nplt.xlim(-130,-65)\nplt.ylim(24,50)\nplt.figure(figsize=(20,15))\nplt.show()","d6445648":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Impervious_100\"]))","4f66def0":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Impervious_1000\"]))","4108f952":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Impervious_3000\"]))","756f6c82":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Impervious_10000\"]))","8dc52c3f":"print('Impervious_100:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_100\"]))\nprint('Impervious_200:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_200\"]))\nprint('Impervious_300:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_300\"]))\nprint('Impervious_400:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_400\"]))\nprint('Impervious_500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_500\"]))\nprint('Impervious_600:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_600\"]))\nprint('Impervious_700:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_700\"]))\nprint('Impervious_800:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_800\"]))\nprint('Impervious_1000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_1000\"]))\nprint('Impervious_1200:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_1200\"]))\nprint('Impervious_1500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_1500\"]))\nprint('Impervious_1800:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_1800\"]))\nprint('Impervious_2000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_2000\"]))\nprint('Impervious_2500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_2500\"]))\nprint('Impervious_3000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_3000\"]))\nprint('Impervious_3500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_3500\"]))\nprint('Impervious_4000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_4000\"]))\nprint('Impervious_5000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_5000\"]))\nprint('Impervious_6000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_6000\"]))\nprint('Impervious_7000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_7000\"]))\nprint('Impervious_8000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_8000\"]))\nprint('Impervious_10000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Impervious_10000\"]))","cabb5161":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Population_100\"]))","ad40be3c":"print(plt.scatter(train[\"Observed_NO2_ppb\"], np.log(train[\"Population_1000\"])))","d5a07f37":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Population_3000\"]))","3ea00091":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Population_10000\"]))","dcf230ab":"train100 = train[train[\"Population_100\"]!= 0]\nprint(plt.scatter(train2[\"Observed_NO2_ppb\"], np.log(train2[\"Population_100\"])))\nprint('Population_100:',train100[\"Observed_NO2_ppb\"]. corr(np.log(train2[\"Population_100\"])))","24ae35cd":"train200 = train[train[\"Population_200\"]!= 0]\ntrain300 = train[train[\"Population_300\"]!= 0]\ntrain400 = train[train[\"Population_400\"]!= 0]\ntrain500 = train[train[\"Population_500\"]!= 0]\ntrain600 = train[train[\"Population_600\"]!= 0]\ntrain700 = train[train[\"Population_700\"]!= 0]\ntrain800 = train[train[\"Population_800\"]!= 0]\ntrain1000 = train[train[\"Population_1000\"]!= 0]\ntrain1200 = train[train[\"Population_1200\"]!= 0]\ntrain1500 = train[train[\"Population_1500\"]!= 0]\ntrain1800 = train[train[\"Population_1800\"]!= 0]\ntrain2000 = train[train[\"Population_2000\"]!= 0]\ntrain2500 = train[train[\"Population_2500\"]!= 0]\ntrain3000 = train[train[\"Population_3000\"]!= 0]\ntrain3500 = train[train[\"Population_3500\"]!= 0]\ntrain4000 = train[train[\"Population_4000\"]!= 0]\ntrain5000 = train[train[\"Population_5000\"]!= 0]\ntrain6000 = train[train[\"Population_6000\"]!= 0]\ntrain7000 = train[train[\"Population_7000\"]!= 0]\ntrain8000 = train[train[\"Population_8000\"]!= 0]\ntrain10000 = train[train[\"Population_10000\"]!= 0]","d5868c36":"print(plt.scatter(train2[\"Observed_NO2_ppb\"], np.log(train2[\"Population_1000\"])))","bc5ce91d":"print(plt.scatter(train2[\"Observed_NO2_ppb\"], np.log(train2[\"Population_3000\"])))","1dd9371d":"print(plt.scatter(train2[\"Observed_NO2_ppb\"], np.log(train2[\"Population_10000\"])))","5b7ce993":"print('Population_100:',train100[\"Observed_NO2_ppb\"]. corr(np.log(train100[\"Population_100\"])))\nprint('Population_200:',train200[\"Observed_NO2_ppb\"]. corr(np.log(train200[\"Population_200\"])))\nprint('Population_300:',train300[\"Observed_NO2_ppb\"]. corr(np.log(train300[\"Population_300\"])))\nprint('Population_400:',train400[\"Observed_NO2_ppb\"]. corr(np.log(train400[\"Population_400\"])))\nprint('Population_500:',train500[\"Observed_NO2_ppb\"]. corr(np.log(train500[\"Population_500\"])))\nprint('Population_600:',train600[\"Observed_NO2_ppb\"]. corr(np.log(train600[\"Population_600\"])))\nprint('Population_700:',train700[\"Observed_NO2_ppb\"]. corr(np.log(train700[\"Population_700\"])))\nprint('Population_800:',train800[\"Observed_NO2_ppb\"]. corr(np.log(train800[\"Population_800\"])))\nprint('Population_1000:',train1000[\"Observed_NO2_ppb\"]. corr(np.log(train1000[\"Population_1000\"])))\nprint('Population_1200:',train1200[\"Observed_NO2_ppb\"]. corr(np.log(train1200[\"Population_1200\"])))\nprint('Population_1500:',train1500[\"Observed_NO2_ppb\"]. corr(np.log(train1500[\"Population_1500\"])))\nprint('Population_1800:',train1800[\"Observed_NO2_ppb\"]. corr(np.log(train1800[\"Population_1800\"])))\nprint('Population_2000:',train2000[\"Observed_NO2_ppb\"]. corr(np.log(train2000[\"Population_2000\"])))\nprint('Population_2500:',train2500[\"Observed_NO2_ppb\"]. corr(np.log(train2500[\"Population_2500\"])))\nprint('Population_3000:',train3000[\"Observed_NO2_ppb\"]. corr(np.log(train3000[\"Population_3000\"])))\nprint('Population_3500:',train3500[\"Observed_NO2_ppb\"]. corr(np.log(train3500[\"Population_3500\"])))\nprint('Population_4000:',train4000[\"Observed_NO2_ppb\"]. corr(np.log(train4000[\"Population_4000\"])))\nprint('Population_5000:',train5000[\"Observed_NO2_ppb\"]. corr(np.log(train5000[\"Population_5000\"])))\nprint('Population_6000:',train6000[\"Observed_NO2_ppb\"]. corr(np.log(train6000[\"Population_6000\"])))\nprint('Population_7000:',train7000[\"Observed_NO2_ppb\"]. corr(np.log(train7000[\"Population_7000\"])))\nprint('Population_8000:',train8000[\"Observed_NO2_ppb\"]. corr(np.log(train8000[\"Population_8000\"])))\nprint('Population_10000:',train10000[\"Observed_NO2_ppb\"]. corr(np.log(train10000[\"Population_10000\"])))","fa292ef1":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Major_100\"]))","6d6aefb5":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Major_1000\"]))","b36a3c9d":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Major_3000\"]))","c21153db":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Major_10000\"]))","9a8536d7":"print('Major_100:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_100\"]))\nprint('Major_200:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_200\"]))\nprint('Major_300:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_300\"]))\nprint('Major_400:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_400\"]))\nprint('Major_500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_500\"]))\nprint('Major_600:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_600\"]))\nprint('Major_700:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_700\"]))\nprint('Major_800:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_800\"]))\nprint('Major_1000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_1000\"]))\nprint('Major_1200:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_1200\"]))\nprint('Major_1500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_1500\"]))\nprint('Major_1800:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_1800\"]))\nprint('Major_2000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_2000\"]))\nprint('Major_2500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_2500\"]))\nprint('Major_3000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_3000\"]))\nprint('Major_3500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_3500\"]))\nprint('Major_4000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_4000\"]))\nprint('Major_5000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_5000\"]))\nprint('Major_6000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_6000\"]))\nprint('Major_7000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_7000\"]))\nprint('Major_8000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_8000\"]))\nprint('Major_10000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Major_10000\"]))","4ba5d913":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Resident_100\"]))","543c69ef":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Resident_1000\"]))","afefa692":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Resident_3000\"]))","cb25631e":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Resident_10000\"]))","59218ad3":"print('Resident_100:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_100\"]))\nprint('Resident_200:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_200\"]))\nprint('Resident_300:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_300\"]))\nprint('Resident_400:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_400\"]))\nprint('Resident_500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_500\"]))\nprint('Resident_600:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_600\"]))\nprint('Resident_700:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_700\"]))\nprint('Resident_800:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_800\"]))\nprint('Resident_1000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_1000\"]))\nprint('Resident_1200:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_1200\"]))\nprint('Resident_1500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_1500\"]))\nprint('Resident_1800:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_1800\"]))\nprint('Resident_2000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_2000\"]))\nprint('Resident_2500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_2500\"]))\nprint('Resident_3000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_3000\"]))\nprint('Resident_3500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_3500\"]))\nprint('Resident_4000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_4000\"]))\nprint('Resident_5000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_5000\"]))\nprint('Resident_6000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_6000\"]))\nprint('Resident_7000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_7000\"]))\nprint('Resident_8000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_8000\"]))\nprint('Resident_10000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"Resident_10000\"]))","b316fa92":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"total_100\"]))","bed7ef7b":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Resident_1000\"]))","2daa3c16":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Resident_3000\"]))","4b96d24b":"print(plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Resident_10000\"]))","4edfe7fe":"print('total_100:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_100\"]))\nprint('total_200:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_200\"]))\nprint('total_300:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_300\"]))\nprint('total_400:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_400\"]))\nprint('total_500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_500\"]))\nprint('total_600:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_600\"]))\nprint('total_700:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_700\"]))\nprint('total_800:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_800\"]))\nprint('total_1000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_1000\"]))\nprint('total_1200:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_1200\"]))\nprint('total_1500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_1500\"]))\nprint('total_1800:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_1800\"]))\nprint('total_2000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_2000\"]))\nprint('total_2500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_2500\"]))\nprint('total_3000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_3000\"]))\nprint('total_3500:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_3500\"]))\nprint('total_4000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_4000\"]))\nprint('total_5000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_5000\"]))\nprint('total_6000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_6000\"]))\nprint('total_7000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_7000\"]))\nprint('total_8000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_8000\"]))\nprint('total_10000:', scipy.stats.spearmanr(train[\"Observed_NO2_ppb\"], train[\"total_10000\"]))","d6b4a591":"plt.scatter(train[\"Observed_NO2_ppb\"], train[\"WRF+DOMINO\"])","d363d88a":"plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Distance_to_coast_km\"])","dd66ffd1":"plt.scatter(train[\"Observed_NO2_ppb\"], train[\"Elevation_truncated_km\"])","0c7f53fa":"print(\"WRF+DOMINO\",train[\"Observed_NO2_ppb\"]. corr(train[\"WRF+DOMINO\"]))\nprint(\"Distance_to_coast_km\",train[\"Observed_NO2_ppb\"]. corr(train[\"Distance_to_coast_km\"])) \nprint(\"Elevation_truncated_km\",train[\"Observed_NO2_ppb\"]. corr(train[\"Elevation_truncated_km\"]))","35f9b183":"The map above shows the spatial distribution of monitors. From this graph we can see where data regarding NO2 observations is largely missing. We would likely not want to attempt to examine Hawaii or Alaska in this case, as our data is not close to either state and we wouldn't necessarily reflect the conditions in those regions. A large region in the Northwest continental US is largely lacking data. There is also a band spanning from southern-central US through the upper Great Lakes region which has very little data. Other sparse regions include Northern New England and the Southeast, save Florida.","7994c6e9":"While this is not a perfect transformation, it does seem to be an improvement.","948e8c13":"In each of these related cases, we see heteroscedasticity, so we will determine correlation with the Spearman correlation rather than Pearson.","6d84ecf8":"This seems to be an improvement.","05c2d93e":"We can see from the density curve that the distribution is unimodal and bell-shaped and slightly right-skewed. The boxplot of the same variable shows us that a few of these rightward values are outliers. \n\nNext, we may want to observe the geographical distribution of the monitoring stations.","51dc5baa":"In the case of all of these variables, we find that the correlation between the NO2 observed and the other covariate increases as the radius used in the covariate increases. The highest correlation for the variables with varying radii are as follows- Impervious_7000: 0.7938845722209367, Population_10000: 0.7208014056007302, Major_10000: 0.7697401809540461, Resident_10000: 0.7540803033811949, total_10000: 0.7707908754052802. In each instance except for impervious surface area, we find that the largest radius corresponds with the highest correlation. Since there is no reason to assume that there is significance to the 7000 m radius, adhering to the highest correlation in this case could result in overfitting to the training data, and it may be best to stick to the highest radius of 10000 m for each of these variables in modeling as a baseline and adjust as needed. \n\nWe also notice that each of these variables has a strong positive correlation, so we expect an increase in NO2 quantities as the value of each of these covariates increases.\n\nThere are three other variables which could be used to model NO2 observations: WRF+DOMINO, Distance_to_coast_km, and Elevation_truncated_km.","0ba7bba8":"The graph above shows the same map of the United States with the locations of monitors. However, on this map, the markers representing locations of monitors are colored to correspond with the concentration of NO2 observed at that location. It is difficult to determine any trends with the data given. It appears that the areas with the highest concentrations are on the Northern East coast, Midwest, and Southwestern US, although there is one monitor which observed a particularly high quantity of NO2 in Colorado.\n\nSince the goal of the project is to predict NO2 concentrations, we should examine the relationship between observed NO2 and other variables. Before checking these variables, we will plot the NO2 compared to a variable with various radii.","c9c73bab":"Population appears not to have a linear relationship with Observed_NO2_ppb. We should try to transform it to examine the relationship between the variables.","e16e2698":"The dataset contains columns for the IDs of the air quality monitors, the states in which they are located, the latitude and longitude of the monitors, the quantity of NO2 observed in parts per billion, an approximation created from a linear combination of WRF-Chem and DOMINO models, the distance from a monitor to the coast (km), the elevation of a monitor (km), and several covariates about the land in the area regarding impervious surface, tree canopy, population, and major\/minor\/total road length. The monitor ID and state variables are of type object while the rest of the variables are 64 bit floats.","0b636c55":"Overview of basic summary stats and the data frame tells us a couple things about this data. We see that the WRF+DOMINO values generally underestimate NO2, as the mean value and values at all quartiles are lower than the observed NO2 values. The minimum WRF+DOMINO value is negative, implying that there is negative NO2. The variable which we are interested in predicting is Observed_NO2_ppb. In our training dataset, there is a mean value of 11.83 ppb with a standard deviation of 6.29 ppb. The range of values of ppb NO2 goes from a minimum of 0.31 to a maximum of 31.02. It may be useful to know more about the overall distribution of NO2 observations.","5355a203":"We will first discuss WRF+DOMINO, the variable which is another prediction of NO2. It has a stong positive correlation with observed NO2, and this is to be expected. It is somewhat surprising that this variable is not a much better predictor of NO2 than our most strongly correlated covariates from the correlation calculations prior.\nThe two other covariates have to do with geographical positioning of the monitors. Distance_to_coast_km has a weak negative correlation with observed NO2, meaning that nearer proximitiy to the coast loosely correlates with more NO2 observed. Elevation appears to have no correlation with NO2.","8ffdfaaa":"There are a total of 255 unique stations across 43 states. There are no observations in the dataframe from the states of Alabama, Alaska, Hawaii, Mississippi, Montana, Oregon, Nebraska, or West Virginia. We can see how many stations we observe in each state. California has the most at 61, with Texas following at 32 and Pennsylvania with the third most at 17. 110 of the 255 or 48.9% of all of the stations are in these three states. While we are interested in the NO2 values, we may not learn much by attempting to compare these values since several states have only one or two monitors. Additionally, state borders may not give a good representaiton of where these monitors are actually located, as the monitor could be anywhere within that boundary."}}