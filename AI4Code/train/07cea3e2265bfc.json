{"cell_type":{"f74efb90":"code","29a9b224":"code","2bd4e10b":"code","8531d775":"code","ccd5c318":"code","f08bdfd7":"code","3d5367f4":"code","d031a53e":"code","a346374d":"code","5eb4ed3b":"code","032c4fdb":"code","ab5e27d9":"code","43768736":"code","11759ffb":"code","4c90416f":"code","c30570fe":"code","e5e1e3a3":"code","2ea68830":"code","c384bed7":"code","e9f28ef3":"code","805c7dae":"code","9c336bd9":"code","a00f5c3a":"code","6668ea9f":"markdown","9dd706e6":"markdown","27ad1f18":"markdown"},"source":{"f74efb90":"#importing the dependencies\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","29a9b224":"df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf.head()","2bd4e10b":"df.info()","8531d775":"cols = ['Name','Ticket','Cabin']\ndf = df.drop(cols,axis=1)","ccd5c318":"df = df.dropna()","f08bdfd7":"dummies = []\ncols = ['Pclass','Sex','Embarked']\nfor col in cols:\n dummies.append(pd.get_dummies(df[col]))","3d5367f4":"titanic_dummies = pd.concat(dummies, axis=1)","d031a53e":"df = pd.concat((df,titanic_dummies),axis=1)","a346374d":"df = df.drop(['Pclass','Sex','Embarked'],axis=1)","5eb4ed3b":"df['Age'] = df['Age'].interpolate()","032c4fdb":"df.isnull().sum()","ab5e27d9":"df.head()","43768736":"sns.countplot(x='Survived', data=df)","11759ffb":"X = df.values\ny = df['Survived'].values","4c90416f":"X = np.delete(X,1,axis=1)","c30570fe":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","e5e1e3a3":"from sklearn import tree\nclf = tree.DecisionTreeClassifier(max_depth=5)\nclf.fit(X_train,y_train)\nclf.score(X_test,y_test)\n","2ea68830":"clf.feature_importances_","c384bed7":"from sklearn import ensemble\nclf = ensemble.RandomForestClassifier(n_estimators=300)\nclf.fit (X_train, y_train)\nclf.score (X_test, y_test)","e9f28ef3":"clf = ensemble.GradientBoostingClassifier()\nclf.fit (X_train, y_train)\nclf.score (X_test, y_test)","805c7dae":"clf = ensemble.GradientBoostingClassifier(n_estimators=50)\nclf.fit(X_train,y_train)\nclf.score(X_test,y_test)","9c336bd9":" y_results = clf.predict(X_test)","a00f5c3a":"output = np.column_stack((X_test[:,0],y_results))\ndf_results = pd.DataFrame(output.astype('int'),columns=['PassengerID','Survived'])\ndf_results.to_csv('titanic_results.csv',index=False)\nprint(\"Your submission was successfully saved!\")","6668ea9f":"#### Splitting the datset into training and testing data","9dd706e6":"# Titanic Survival predictions","27ad1f18":"## A bar graph to see how many people survived and died ##"}}