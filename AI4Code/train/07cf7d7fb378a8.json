{"cell_type":{"b28cdf5e":"code","6dec196a":"code","914b3777":"code","5c776ff8":"code","7c5989a6":"code","bda4cc61":"code","45ea37ef":"code","817e6054":"code","d8b157f7":"code","2da7bc95":"code","63f8168a":"code","b70b82ce":"code","7dc0b887":"code","24ad3d72":"code","289474ed":"code","31e6d6f0":"code","4b8ced89":"code","d7c6b180":"markdown","1d960dab":"markdown","008a34d5":"markdown","4026d253":"markdown","1a361d37":"markdown","342f2aaf":"markdown","563a90ca":"markdown","6a81d559":"markdown"},"source":{"b28cdf5e":"!pip install keras-tuner","6dec196a":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport tensorflow as tf\n\nfrom kerastuner.tuners import RandomSearch\nimport kerastuner as kt","914b3777":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","5c776ff8":"train[\"Age\"].fillna(train.Age.mean(), inplace=True)\ntest[\"Age\"].fillna(train.Age.mean(), inplace=True)\n\ntest['Fare'].fillna(train.Fare.mean(), inplace=True)\n\ntrain.drop('Cabin', axis=1, inplace=True)\ntest.drop('Cabin', axis=1, inplace=True)\n\ntrain['Embarked'].fillna('S', inplace=True)\ntest['Embarked'].fillna('S', inplace=True)","7c5989a6":"train.replace({'Sex': {'male': 0, 'female': 1}}, inplace=True)\ntest.replace({'Sex': {'male': 0, 'female': 1}}, inplace=True)\n\ntrain.replace({'Title': {'Mr': 0, 'Mrs': 1, 'Miss': 2, 'Master': 3}}, inplace=True)\ntest.replace({'Title': {'Mr': 0, 'Mrs': 1, 'Miss': 2, 'Master': 3}}, inplace=True)","bda4cc61":"embarked = pd.concat([train['Embarked'], test['Embarked']])\n\nembarked_ohe = pd.get_dummies(embarked)\n\nembarked_ohe_train = embarked_ohe[:891]\nembarked_ohe_test = embarked_ohe[891:]\n\ntrain = pd.concat([train, embarked_ohe_train], axis=1)\ntest = pd.concat([test, embarked_ohe_test], axis=1)\n\ntrain.drop('Embarked', axis=1, inplace=True)\ntest.drop('Embarked', axis=1, inplace=True)","45ea37ef":"train.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)\n\ntrain.drop('Ticket', axis=1, inplace=True)\ntest.drop('Ticket', axis=1, inplace=True)","817e6054":"X = train.iloc[:, 2:].values\ny = train.iloc[:, 1].values\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3) ","d8b157f7":"def build_model(hp):\n    model = keras.Sequential()\n    for i in range(hp.Int('num_layers', 2, 20)):\n        model.add(layers.Dense(units=hp.Int('units_' + str(i),\n                                            min_value=32,\n                                            max_value=512,\n                                            step=32),\n                               activation='relu'))\n        if hp.Choice('batchnorm_and_dropout', ['batch', 'dropout', 'both']) == 'batch':\n            model.add(layers.BatchNormalization())\n        elif hp.Choice('batchnorm_and_dropout', ['batch', 'dropout', 'both']) == 'dropout':\n            model.add(layers.Dropout(0.2))\n        else:\n            model.add(layers.BatchNormalization())\n            model.add(layers.Dropout(0.2))\n    model.add(layers.Dense(1, activation=\"sigmoid\"))\n    model.compile(\n        optimizer=keras.optimizers.Adam(\n            hp.Choice('learning_rate', [1e-2, 1e-3, 1e-4])),\n        loss=keras.losses.BinaryCrossentropy(from_logits=True),\n        metrics=[keras.metrics.BinaryAccuracy(name='acc')])\n    return model","2da7bc95":"tuner = RandomSearch(\n    build_model,\n    objective='val_acc',\n    max_trials=100,\n    overwrite=True)","63f8168a":"callbacks=[keras.callbacks.EarlyStopping(monitor='val_acc', mode='max', patience=3)]\ntuner.search(X, y, validation_data=(X_val, y_val), callbacks=callbacks, epochs=100)","b70b82ce":"best_hp = tuner.get_best_hyperparameters()[0]\nmodel = build_model(best_hp)\nmodel.fit(X, y, epochs=1000)","7dc0b887":"model.summary()","24ad3d72":"tf.keras.utils.plot_model(model)","289474ed":"submission = pd.DataFrame()\nsubmission[\"PassengerId\"] = test[\"PassengerId\"]","31e6d6f0":"pred = model.predict_classes(test.iloc[:, 1:].values)","4b8ced89":"submission[\"Survived\"] = pred\nsubmission.to_csv(\"submission.csv\", index=False)","d7c6b180":"# Model","1d960dab":"# Preprocessing","008a34d5":"# Hyperparameter tuning with Keras Tuner","4026d253":"# Training","1a361d37":"# Library and Data Import","342f2aaf":"This notebook is a tutorial for hyperparameter tuning with Keras Tuner.","563a90ca":"# Hyperparameter Tuning","6a81d559":"# Submission"}}