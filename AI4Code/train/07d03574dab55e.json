{"cell_type":{"a35ed3d4":"code","534eaed1":"code","e0434817":"code","66389cc1":"code","f55b2e09":"code","a97128be":"code","fbdf42ba":"code","4d44b066":"code","c101dec4":"code","8f82a9f2":"code","85a57f80":"code","cc6b2143":"code","bc769f0f":"code","b36a90bd":"code","bd037e36":"code","d00c7690":"code","e3baeed7":"code","07b4b686":"code","2de5c46f":"code","81ebed89":"code","d448c8c3":"markdown","43312b7b":"markdown","dc0c005e":"markdown","dc99618d":"markdown","8d6d1322":"markdown","95236c30":"markdown","43934d7a":"markdown","da67fe31":"markdown","1add18f3":"markdown","3548e448":"markdown","9a9c993b":"markdown","0d1fed0c":"markdown","0e282c7f":"markdown"},"source":{"a35ed3d4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nsns.set()\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import OneHotEncoder\n\nimport warnings\nwarnings.filterwarnings('ignore')","534eaed1":"train = pd.read_csv('..\/input\/train_V2.csv')\ntest = pd.read_csv('..\/input\/test_V2.csv')","e0434817":"train.head()","66389cc1":"# Remove the row with the missing target value\ntrain = train[train['winPlacePerc'].isna() != True]\n","f55b2e09":"# Add a feature containing the number of players that joined each match.\ntrain['playersJoined'] = train.groupby('matchId')['matchId'].transform('count')\n","a97128be":"train['killsNorm'] = train['kills']*((100-train['playersJoined'])\/100 + 1)\ntrain['headshotKillsNorm'] = train['headshotKills']*((100-train['playersJoined'])\/100 + 1)\ntrain['killPlaceNorm'] = train['killPlace']*((100-train['playersJoined'])\/100 + 1)\ntrain['killPointsNorm'] = train['killPoints']*((100-train['playersJoined'])\/100 + 1)\ntrain['killStreaksNorm'] = train['killStreaks']*((100-train['playersJoined'])\/100 + 1)\ntrain['longestKillNorm'] = train['longestKill']*((100-train['playersJoined'])\/100 + 1)\ntrain['roadKillsNorm'] = train['roadKills']*((100-train['playersJoined'])\/100 + 1)\ntrain['teamKillsNorm'] = train['teamKills']*((100-train['playersJoined'])\/100 + 1)\ntrain['damageDealtNorm'] = train['damageDealt']*((100-train['playersJoined'])\/100 + 1)\ntrain['DBNOsNorm'] = train['DBNOs']*((100-train['playersJoined'])\/100 + 1)\ntrain['revivesNorm'] = train['revives']*((100-train['playersJoined'])\/100 + 1)\n\n    ","fbdf42ba":"# Features to remove\ntrain = train.drop([ 'kills', 'headshotKills', 'killPlace', 'killPoints', 'killStreaks', \n 'longestKill', 'roadKills', 'teamKills', 'damageDealt', 'DBNOs', 'revives'],axis=1)","4d44b066":"train.head()","c101dec4":"# Total distance travelled\ntrain['totalDistance'] = train['walkDistance'] + train['rideDistance'] + train['swimDistance']\n","8f82a9f2":"# Normalise the matchTypes to standard fromat\ndef standardize_matchType(data):\n    data['matchType'][data['matchType'] == 'normal-solo'] = 'Solo'\n    data['matchType'][data['matchType'] == 'solo-fpp'] = 'Solo'\n    data['matchType'][data['matchType'] == 'normal-solo-fpp'] = 'Solo'\n    data['matchType'][data['matchType'] == 'normal-duo-fpp'] = 'Duo'\n    data['matchType'][data['matchType'] == 'normal-duo'] = 'Duo'\n    data['matchType'][data['matchType'] == 'duo-fpp'] = 'Duo'\n    data['matchType'][data['matchType'] == 'squad-fpp'] = 'Squad'\n    data['matchType'][data['matchType'] == 'normal-squad'] = 'Squad'\n    data['matchType'][data['matchType'] == 'normal-squad-fpp'] = 'Squad'\n    data['matchType'][data['matchType'] == 'flaretpp'] = 'Other'\n    data['matchType'][data['matchType'] == 'flarefpp'] = 'Other'\n    data['matchType'][data['matchType'] == 'crashtpp'] = 'Other'\n    data['matchType'][data['matchType'] == 'crashfpp'] = 'Other'\n\n    return data\n\n\ndata = standardize_matchType(train)\n#print (set(data['matchType']))","85a57f80":"# We can do a sanity check of the data, making sure we have the new \n# features created and the matchType feature is standardised.\ndata.head()","cc6b2143":"# Seperate the data into the matchTypes\nsolo = data[data['matchType'] == 'Solo']\nduo = data[data['matchType'] == 'Duo']\nsquad = data[data['matchType'] == 'Squad']\nother = data[data['matchType'] == 'Other']","bc769f0f":"# SOLO: Features to keep\nsolo_features = ['boosts','heals', 'rideDistance','walkDistance','weaponsAcquired',\n                 # Engineered Features\n                 'damageDealtNorm','headshotKillsNorm','killPlaceNorm',\n                 'killsNorm','killStreaksNorm','longestKillNorm',\n                 'playersJoined','totalDistance']\n\nsolo = solo[solo_features]\nsolo.head()","b36a90bd":"f,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(solo.corr(), annot=True, linewidths=.5, fmt= '.2f',ax=ax)\nplt.show()","bd037e36":"# DUO: Features to keep\nduo_features = ['assists','boosts', 'heals','rideDistance','walkDistance',\n                'weaponsAcquired',\n                # Engineered Features\n                'damageDealtNorm','DBNOsNorm', 'killPlaceNorm',\n                'killsNorm','killStreaksNorm','longestKillNorm',\n                'revivesNorm', 'playersJoined','totalDistance']\n\nduo = duo[duo_features]\nduo.head()","d00c7690":"f,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(duo.corr(), annot=True, linewidths=.5, fmt= '.2f',ax=ax)\nplt.show()","e3baeed7":"# SQUAD: Features to keep\nsquad_features = ['assists','boosts','heals','rideDistance',\n                  'walkDistance','weaponsAcquired',\n                  # Engineered Features\n                  'damageDealtNorm','DBNOsNorm', 'killPlaceNorm',\n                  'killsNorm','killStreaksNorm','longestKillNorm',\n                  'revivesNorm','playersJoined','totalDistance']\n\nsquad = squad[squad_features]\nsquad.head()","07b4b686":"f,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(squad.corr(), annot=True, linewidths=.5, fmt= '.2f',ax=ax)\nplt.show()","2de5c46f":"# OTHER: Features to keep\nother_features = ['assists','boosts','heals','rideDistance',\n                  'walkDistance','weaponsAcquired',\n                  # Engineered Features\n                  'damageDealtNorm','DBNOsNorm','headshotKillsNorm',\n                  'killPlaceNorm','killsNorm','killStreaksNorm','longestKillNorm',\n                  'revivesNorm','playersJoined','totalDistance']\n\nother = other[other_features]\nother.head()","81ebed89":"f,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(other.corr(), annot=True, linewidths=.5, fmt= '.2f',ax=ax)\nplt.show()","d448c8c3":"## Missing Data\nBased on our EDA, we found a row that had a NULL value for teh target variable. We will remove the irrelevant row of data.","43312b7b":"### TotalDistance\nAn additional feature we can create is the total distance the player travels. This is a combination of all the distance features in the original data set.","dc0c005e":"### Normalised Features\nThis feature now allows us to create more features based on other game features. This will allow us to normalise these features, as it might be easier to find an enemy when there are 100 players, than it is when there are 50 players.\n","dc99618d":"# Standardize the matchType feature\nHere we decided that many of the existing 16 seperate modes of game play were just different versions of four types of game.\n\n1. Solo: Hunger Games style, last man\/women standing.\n2. Duo: Teams of two against all other players.\n3. Squad: Teams of up to 4 players against All other players\n4. Other: These modes consist of custom and special events modes","8d6d1322":"## Import libraries\nWe import the required libraries and import the data","95236c30":"We can now remove the original features that the normalised ones are based on","43934d7a":"## Seperate the data\nHere, we will create four seperate data sets which describes the matchType.","da67fe31":"## Lets Engineer some features\n### PlayersJoined\nWe can determine the number of players that joined each match by grouping the data by matchID and counting the players.","1add18f3":"Lets check out the data again.","3548e448":"## Feature Selection\nHere we use our previous EDA to determine the list of features that we want to keep for each data set.","9a9c993b":"If you liked this post, please upvote.","0d1fed0c":"# Feature Engineering of PUBG data\n\nWe previously created a notebook going through some [exploratory anaylsys] of the PUBG data. We went through many of the different features avalailable and displayed an interesting plot describing the data and potential correlation with the target variable.\n\n* We found that there was one missing value for the target variable and decided that this row of data should be removed, as there was only one player for the match identified by the missing value.\n\n* We also made a few decisions about creating new features and one important way of breaking the data up to gain higher correllations with our features for seperate match types.\n\n\n[exploratory anaylsys]: https:\/\/www.kaggle.com\/beaubellamy\/pubg-eda#","0e282c7f":"# Model Development\nThis is were we will develop our machine learning model"}}