{"cell_type":{"20163f65":"code","abb754ba":"code","b8eb2a6e":"code","3dc40ec1":"code","b7493c47":"code","8bd217ae":"code","df5b3ac9":"code","a4de36a4":"code","eeba01be":"code","5887b399":"code","7e2c2fa4":"code","5ba9ea9d":"code","89f706c1":"code","46daa70a":"code","94ff1a3c":"code","b31e0192":"code","d79570fd":"code","613f8a8d":"code","d6f18b6a":"code","3103357b":"code","ecc918c1":"code","fa818e2f":"code","01953489":"code","e3bf4897":"code","d10a4fcc":"code","1375ab62":"code","8f957f7d":"code","748a5e22":"code","40d52a46":"code","0e8f8ca0":"code","38853889":"code","d9b0784d":"code","f0a33e4b":"code","3ffa65c6":"code","a41d2811":"code","5a5fe6a2":"code","4c22cfbe":"code","da79e232":"code","e5756b31":"code","ec8ce718":"code","3b3eb28d":"code","41dcddbf":"code","8419d0fc":"code","7c15ad3e":"code","27a3cc89":"code","81d2e170":"code","7dd11a0c":"code","e3c55bda":"code","f3dc26f3":"code","52c1fa86":"code","843c1159":"code","4fa87a8b":"code","21f1b9e0":"code","03a015f6":"markdown","c3b7c026":"markdown","ecd0fe5f":"markdown","da3b7393":"markdown","f6f7951e":"markdown","824afdbf":"markdown","ded7ebf1":"markdown","c632dfc0":"markdown","9cd833ba":"markdown","6ebe175d":"markdown","0d4f5637":"markdown","47a10135":"markdown"},"source":{"20163f65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","abb754ba":"#importing required libraries\nimport pandas as pd\nimport numpy as np\nimport glob\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b8eb2a6e":"import os\nos.getcwd()","3dc40ec1":"os.chdir(\"..\/input\")","b7493c47":"#Finding the list of files to uplod\npattern = '*.csv'\ncsv_files = glob.glob(pattern)\nprint(csv_files)","8bd217ae":"#uploading files\naisles = pd.read_csv(\"aisles.csv\", dtype={'aisle_id': 'object'})\ndepartments = pd.read_csv(\"departments.csv\", dtype={'department_id':'object'})\norders = pd.read_csv(\"orders.csv\", dtype = {'order_number': 'uint32',\n                                            'order_dow': 'uint32',\n                                            'order_hour_of_day': 'uint32',\n                                            'days_since_prior_order': 'float16',\n                                            'order_id': 'object',\n                                            'user_id': 'object'})\norders_products_prior = pd.read_csv(\"order_products__prior.csv\", dtype={'add_to_cart_order':'uint32',\n                                                                        'reordered': 'uint32',\n                                                                        'order_id': 'object', \n                                                                        'product_id': 'object'})\norders_products_train = pd.read_csv(\"order_products__train.csv\", dtype={'add_to_cart_order':'uint32',\n                                                                        'reordered': 'uint32',\n                                                                        'order_id': 'object', \n                                                                        'product_id': 'object'})\nproducts = pd.read_csv(\"products.csv\", dtype={'product_id': 'object',\n                                              'aisle_id': 'object', \n                                              'department_id': 'object'})","df5b3ac9":"orders.dtypes","a4de36a4":"# Assigining names to the datasets\ndata_list = [aisles, departments, orders, orders_products_prior, orders_products_train, products]\ndata_list_name = ['aisles', 'departments', 'orders', 'orders_products_prior', 'orders_products_train', 'products']","eeba01be":"j=0\nfor i in data_list:\n    i.name = data_list_name[j]\n    j += 1","5887b399":"def null_columns(x):\n    y = x.columns[x.isnull().any()]\n    return y\n\nfor dataset in data_list:\n    if len(null_columns(dataset)) == 0:\n        print('Dataset ' + dataset.name + ' has no null values ')\n    else:\n        print('Dataset '+ dataset.name + ' has null values in column '+ str([i for i in null_columns(dataset)]))","7e2c2fa4":"#Dataset orders has null values in column ['days_since_prior_order'] \n#Finding the number of null values in orders.days_since_prior_order\n\nsum(orders.days_since_prior_order.isnull())\n\n#There are 206209 null values\n#Lets examine the null values\norders.loc[orders.days_since_prior_order.isnull()==True,['user_id', 'order_number']]","5ba9ea9d":"#days_since_prior_order attribue for first order for all the users is null so it can be changed to 0\n\norders.days_since_prior_order = orders.days_since_prior_order.fillna(int(0))","89f706c1":"# Merging Orders and orders_products_prior\ntotal = orders.merge(orders_products_prior, how = 'left', on='order_id').merge(orders_products_train,\n                                                                              how='left', on ='order_id')","46daa70a":"total.head()","94ff1a3c":"#for i in ('product_id', 'add_to_cart_order', 'reordered'):\ntotal.product_id_x = total.product_id_x.fillna(total.product_id_y)\ntotal.add_to_cart_order_x = total.add_to_cart_order_x.fillna(total.add_to_cart_order_y)\ntotal.reordered_x = total.reordered_x.fillna(total.reordered_y)","b31e0192":"#Dropping the duplicate columns\ntotal = total.drop(['product_id_y', 'add_to_cart_order_y', 'reordered_y'], axis=1)","d79570fd":"total.head()","613f8a8d":"#Renaming the columns after merging\ntotal=total.rename(columns = {'product_id_x':'product_id',\n                             'add_to_cart_order_x': 'add_to_cart_order',\n                             'reordered_x': 'reordered'})","d6f18b6a":"total.head()","3103357b":"total.dtypes","ecc918c1":"#Changing the data type of 'add_to_cart_order','reordered' to float16 to improve performance\ntotal[['add_to_cart_order','reordered']] = total[['add_to_cart_order','reordered']].astype('float16')","fa818e2f":"total.dtypes","01953489":"aisles.head()","e3bf4897":"products.head()","d10a4fcc":"departments.head()","1375ab62":"#Merging total with products dataframe as total1 \ntotal1 = total.merge(products, on='product_id', how = 'left')","8f957f7d":"#Merging total1 and aisles\ntotal1 = total1.merge(aisles, on='aisle_id', how = 'left')","748a5e22":"#Merging total1 and departments\ntotal1 = total1.merge(departments, on='department_id', how = 'left')","40d52a46":"os.getcwd()","0e8f8ca0":"total1.to_csv(\"\/kaggle\/working\/total1.csv\", index=None)","38853889":"os.listdir('\/kaggle')","d9b0784d":"total1.head()","f0a33e4b":"total1.shape","3ffa65c6":"total1.columns","a41d2811":"#Number of orders per day of the week\nplt.figure(figsize=(13,9))\nsns.countplot(x='order_dow', data=total1, )\nax = plt.gca()\nax.set_xticklabels(['Sunday','Monday','Tuesday','Wednesday','Thursday', 'Friday','Saturday'])\nplt.xticks(fontsize=14)\nplt.xlabel('Day of the Week', fontsize=14)\nplt.ylabel('Number of Orders', fontsize=14)\nplt.title('Number of orders Vs Day of the Week', fontsize=14)\nplt.show()","5a5fe6a2":"#Number of orders per hour of the day\nplt.figure(figsize=(13,9))\nsns.countplot(x='order_hour_of_day', data=total1)\nplt.xlabel('Hour of the Day', fontsize=14)\nplt.ylabel('Number of Orders', fontsize=14)\nplt.xticks(fontsize=14)\nplt.title('Number of orders Vs Hour of the Day', fontsize=14)\nplt.show()","4c22cfbe":"#Top 10 Aisles\naisle_top10 = pd.DataFrame(total1.groupby('aisle').aisle.count().sort_values(ascending=False).head(10))\nplt.figure(figsize=(13,9))\nsns.barplot(aisle_top10.index, aisle_top10.aisle, color='olive').set_title('Top 10 Aisles', fontsize=14)\nplt.xticks(rotation=90, fontsize=14)\nplt.xlabel('Aisle', fontsize=14)\nplt.ylabel('Number of Orders', fontsize=14)\nplt.show()","da79e232":"#Top 10 Departments\ndepartments_top10 = pd.DataFrame(total1.groupby('department').department.count().sort_values(ascending=False).head(10))\nplt.figure(figsize=(13,9))\nsns.barplot(departments_top10.index, departments_top10.department, color='limegreen').set_title('Top 10 Departments', fontsize=14)\nplt.xticks(fontsize=14, rotation=20)\nax = plt.gca()\nax.get_yaxis().get_major_formatter().set_scientific(False)\nplt.xlabel('Department', fontsize=14)\nplt.ylabel('Number of Orders', fontsize=14)\nplt.show()","e5756b31":"#Top 10 Products\nproducts_top10 = pd.DataFrame(total1.groupby('product_name').product_name.count().sort_values(ascending=False).head(10))\nplt.figure(figsize=(13,9))\nsns.barplot(products_top10.index, products_top10.product_name, color='teal').set_title('Top 10 Products', fontsize=14)\nplt.xticks(rotation=90, fontsize=14)\nplt.xlabel('Product', fontsize=14)\nplt.ylabel('Number of Orders', fontsize=14)\nplt.show()","ec8ce718":"#Top 20 reordered Products\nreordered = pd.DataFrame(total1.loc[total1['reordered']==1.0].groupby('product_name').size().sort_values(ascending=False).head(20).reset_index(name='counts'))\nplt.figure(figsize=(13,9))\nsns.barplot(reordered.product_name, reordered.counts, color='darkgoldenrod')\nplt.xticks(rotation=90, fontsize=14)\nplt.xlabel('Product', fontsize=14)\nplt.ylabel('Number of Orders', fontsize=14)\nplt.title('Top 20 reordered products', fontsize=14)\nplt.show()","3b3eb28d":"#Added to the Cart sequence Vs reordered\ndf2 = total1.groupby(['add_to_cart_order', 'reordered']).size().to_frame('Counts')\ndf = df2.groupby(level=[0]).apply(lambda x: round(x \/ x.sum()*100,2)).reset_index()\nplt.figure(figsize=(25,9))\nsns.barplot(df.add_to_cart_order, df.Counts, hue=df.reordered)\nplt.xlim(xmax=50)\nplt.xlabel('Order of adding to the Cart', fontsize=14)\nplt.ylabel('Percentage',fontsize=14)\nplt.title('Order of adding to the Cart VS reordered',fontsize=14)\nplt.show()","41dcddbf":"#Department Vs Reordered\ndep_reord = total1.groupby(['department', 'reordered']).size().to_frame('Counts')\ndep_reord1 = dep_reord.groupby(level=[0]).apply(lambda x: round(x \/ x.sum()*100,2)).reset_index()\nplt.figure(figsize=(25,9))\nsns.barplot(dep_reord1.department, dep_reord1.Counts, hue=dep_reord1.reordered)\nplt.xlabel('Department', fontsize=14)\nplt.ylabel('Percentage',fontsize=14)\nplt.title('Department VS reordered',fontsize=14)\nplt.show()","8419d0fc":"#Top 20 Users\ntop_20_users = total1.groupby('user_id').size().sort_values(ascending=False).to_frame('Counts').head(20)\nplt.figure(figsize=(25,9))\nsns.barplot(top_20_users.index,top_20_users.Counts, color='limegreen')\nplt.xticks(rotation=45)\nplt.xlabel('User')\nplt.ylabel('Number of Items Purchased')\nplt.title('Top 20 Users')\nplt.show()","7c15ad3e":"#Organic VS reordered\ndf4 = total1[['product_name','reordered']]\ndf4['is_organic'] = df4['product_name'].str.contains('Organic')\norganic2 = df4.groupby(['is_organic','reordered']).size().to_frame('Counts')\norganic3 = organic2.groupby(level=[0]).apply(lambda x: round(x \/ x.sum()*100,2)).reset_index()\nplt.figure(figsize=(13,9))\nsns.barplot(organic3.is_organic, organic3.Counts, hue=organic3.reordered)\nplt.xlabel('Is_Organic', fontsize=14)\nplt.ylabel('Percentage',fontsize=14)\nplt.title('Organic VS reordered',fontsize=14)\nplt.show()","27a3cc89":"#Avg add_to_cart for each product\nAvg_order = total1.groupby(['product_name'])['add_to_cart_order'].aggregate('mean').to_frame('Avg_add_to_cart')\nAvg_order['Avg_add_to_cart'] = Avg_order['Avg_add_to_cart'].apply(lambda x: round(x,2))","81d2e170":"Avg_order.sort_values(by='Avg_add_to_cart')","7dd11a0c":"#Gluten free VS reordered\ndf5 = total1[['product_name','reordered']]\ndf5['is_gluten_free'] = df4['product_name'].str.contains('gluten' and 'free')\ngluten_free = df5.groupby(['is_gluten_free','reordered']).size().to_frame('Counts')\ngluten_free1 = gluten_free.groupby(level=[0]).apply(lambda x: round(x \/ x.sum()*100,2)).reset_index()\nplt.figure(figsize=(13,9))\nsns.barplot(gluten_free1.is_gluten_free, gluten_free1.Counts, hue=gluten_free1.reordered)\nplt.xlabel('is_gluten_free', fontsize=14)\nplt.ylabel('reorder_Percentage',fontsize=14)\nplt.title('Gluten Free VS reordered',fontsize=14)\nplt.show()","e3c55bda":"#Asian VS reordered\ndf6 = total1[['product_name','reordered']]\ndf6['is_asian'] = df4['product_name'].str.contains('asian')\nasian = df6.groupby(['is_asian','reordered']).size().to_frame('Counts')\nasian1 = asian.groupby(level=[0]).apply(lambda x: round(x \/ x.sum()*100,2)).reset_index()\nplt.figure(figsize=(13,9))\nsns.barplot(asian1.is_asian, asian1.Counts, hue=asian1.reordered)\nplt.xlabel('is_asian', fontsize=14)\nplt.ylabel('reorder_Percentage',fontsize=14)\nplt.title('Asian food VS reordered',fontsize=14)\nplt.show()","f3dc26f3":"#Low fat VS reordered\ndf11 = total1[['product_name','reordered']]\ndf11['low_fat'] = df4['product_name'].str.contains('low' and 'fat')\nlow_fat = df11.groupby(['low_fat','reordered']).size().to_frame('Counts')\nlow_fat1 = low_fat.groupby(level=[0]).apply(lambda x: round(x \/ x.sum()*100,2)).reset_index()\nplt.figure(figsize=(13,9))\nsns.barplot(low_fat1.low_fat, low_fat1.Counts, low_fat1.reordered)\nplt.xlabel('low_fat', fontsize=14)\nplt.ylabel('reorder_Percentage',fontsize=14)\nplt.title('low_fat VS reordered',fontsize=14)\nplt.show()","52c1fa86":"def timezone(i):\n    if i < 3:\n        return 'midnight'\n    elif i < 6:\n        return 'early morning'\n    elif i < 12:\n        return 'morning'\n    elif i < 18:\n        return 'noon'\n    else:\n        return 'night'\n    ","843c1159":"df7 = total1[['department', 'order_hour_of_day']]\ndf7['time_zone'] = df7.order_hour_of_day.map(timezone)\ntime_zone = df7.groupby(['department', 'time_zone']).size().to_frame('Counts')\ntimezone1 = time_zone['Counts'].groupby(level=0, group_keys=False)\ntimezone2 = timezone1.apply(lambda x: x.sort_values(ascending=False).head(1)).to_frame('Counts')\n#timezone2 = timezone2.reset_index()","4fa87a8b":"timezone2","21f1b9e0":"total1.head(10).T","03a015f6":"**Top 10 Departments**\n\n-Produce is the top department with highest number of sales followed by dairy eggs and snacks.","c3b7c026":"All the depaetments have highest number of orders in 'Noon'","ecd0fe5f":"**Number of orders Vs Hour of the Day**\n\n-Number of orders increased from 6 AM until 10 Am and stayed high until 4PM and gradually decreased towards the night.","da3b7393":"There is no product with asian in the name","f6f7951e":"Products with low_fat tag were reordered more than other items","824afdbf":"**Top 20 reordered products**\n\n-'Banana' is the top reordered product with highest number of orders followed by bag of organic bananas and organic strawberries.","ded7ebf1":"**Top 10 Aisles**\n\n-'Fresh fruits' is the top Aisle with hightest orders followed by  'Fresh vegetables' and 'packeged vegetables fruits'.","c632dfc0":"**Number of orders Vs Day of the Week**\n\n-Number of orders are high on Sunday, which gradually decresed till Thursday and again increases towards friday and saturday.\n","9cd833ba":"**Order of adding to the Cart VS reordered**\n\n-There is a clear pattern that items that were added to the cart first are reordered most.\n-The pattern continued until item 16 and after that the reorder percentage gradually decreased.","6ebe175d":"**Department VS reordered**\n\n-'Dairy eggs' is the department with highest reordered rate followed by 'produce' and 'beverages'. ","0d4f5637":"Reorder rate in gluten free items is greater than other items","47a10135":"**Top 10 Products**\n\n-'Banana' is the top product with highest number of orders followed by bag of organic bananas and organic strawberries."}}