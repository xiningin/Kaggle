{"cell_type":{"0f77e28d":"code","8caff14b":"code","3f5ee865":"code","6d52ce95":"code","440dd136":"code","ee071244":"code","9a4e8d8e":"code","666b5606":"code","93bf86b7":"code","c5cbd149":"code","e757e492":"code","394642e8":"code","3f4d4630":"code","c255478b":"code","821f369f":"code","202ce847":"markdown","3ce0ef83":"markdown","c15c2afe":"markdown","f92dcb8d":"markdown","5f6b1f84":"markdown","53e99cc4":"markdown","a9ed2799":"markdown","ba5a068c":"markdown","f43b36ad":"markdown","7bfd6a05":"markdown","d1307938":"markdown","7e32cfba":"markdown","9f96def9":"markdown","92b5a8f3":"markdown","4b11f038":"markdown","e763a079":"markdown","b1caf603":"markdown","bc4e6afd":"markdown"},"source":{"0f77e28d":"import matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom matplotlib.offsetbox import (OffsetImage,AnnotationBbox)\nimport pandas as pd\nimport numpy as np\nfrom math import pi\nimport requests\nfrom time import time\nfrom datetime import datetime, timedelta\nimport random\n\n%matplotlib inline","8caff14b":"players = pd.read_csv('..\/input\/data.csv')","3f5ee865":"players.drop('Unnamed: 0', axis=1, inplace=True)\nplayers = players.dropna(subset=['Club', 'Position'])\nplayers[['Release Clause','Loaned From','Joined']] = players[['Release Clause',\n                                                              'Loaned From',\n                                                              'Joined']].fillna('No data')\nplayers = players.fillna(0)\nplayers = players.reset_index()","6d52ce95":"def defending(players):\n    return int(round((players[['Marking', 'StandingTackle', \n                               'SlidingTackle']].mean()).mean()))\n\ndef general(players):\n    return int(round((players[['HeadingAccuracy', 'Dribbling', 'Curve', \n                               'BallControl']].mean()).mean()))\n\ndef mental(players):\n    return int(round((players[['Aggression', 'Interceptions', 'Positioning', \n                               'Vision','Composure']].mean()).mean()))\n\ndef passing(players):\n    return int(round((players[['Crossing', 'ShortPassing', \n                               'LongPassing']].mean()).mean()))\n\ndef mobility(players):\n    return int(round((players[['Acceleration', 'SprintSpeed', \n                               'Agility','Reactions']].mean()).mean()))\n\ndef power(players):\n    return int(round((players[['Balance', 'Jumping', 'Stamina', \n                               'Strength']].mean()).mean()))\n\ndef rating(players):\n    return int(round((players[['Potential', 'Overall']].mean()).mean()))\n\ndef shooting(players):\n    return int(round((players[['Finishing', 'Volleys', 'FKAccuracy', \n                               'ShotPower','LongShots', 'Penalties']].mean()).mean()))\n","440dd136":"timeFinifih = 0\n\nstart_time = time()\n\nplayers['Defending'] = players.apply(defending, axis=1)\nplayers['General'] = players.apply(general, axis=1)\nplayers['Mental'] = players.apply(mental, axis=1)\nplayers['Passing'] = players.apply(passing, axis=1)\nplayers['Mobility'] = players.apply(mobility, axis=1)\nplayers['Power'] = players.apply(power, axis=1)\nplayers['Rating'] = players.apply(rating, axis=1)\nplayers['Shooting'] = players.apply(shooting, axis=1)\n\ntimeFinifih += (time() - start_time)\n\nprint('Ending - time: ' + str(timedelta(seconds=timeFinifih)))","ee071244":"players.rename(columns={'Club Logo':'Club_Logo'}, inplace=True)","9a4e8d8e":"data = players[['Name','Defending','General','Mental','Passing',\n                'Mobility','Power','Rating','Shooting','Flag','Age',\n                'Nationality', 'Photo', 'Club_Logo', 'Club']]","666b5606":"data.head()","93bf86b7":"### I receive the information of the graphPolar function (explained below), with this information I will create the graph\n\ndef detalle(row, title, image, age, nationality, photo, logo, club):\n\n### I create variables with the names that the images will have after downloading when using the request. When the image of the player's face is downloaded it will be saved as img_player.jpg.\n\n    flag_image = \"img_flag.jpg\"\n    player_image = \"img_player.jpg\"\n    logo_image = \"img_club_logo.jpg\"\n    fondo_image = \"img_fondo.jpg\"\n    url_fondo = \"https:\/\/i.ibb.co\/TMcGQXg\/fondo.jpg\"\n\n### This variable contains the url of the image that I am going to use in the background of the graphic (FIFA)\n\n    fondo_grafico = requests.get(url_fondo).content\n    with open(fondo_image, 'wb') as handler:\n        handler.write(fondo_grafico)\n    \n    fondo = mpimg.imread(fondo_image)\n\n### I download the images of the player's face, the club where he currently plays and the flag of the country where he was born.\n\n    img_flag = requests.get(image).content\n    with open(flag_image, 'wb') as handler:\n        handler.write(img_flag)\n    \n    player_img = requests.get(photo).content\n    with open(player_image, 'wb') as handler:\n        handler.write(player_img)\n     \n    logo_img = requests.get(logo).content\n    with open(logo_image, 'wb') as handler:\n        handler.write(logo_img)\n        \n    r = lambda: random.randint(0,255)\n    colorRandom = '#%02X%02X%02X' % (r(),r(),r())\n\n### I create a function that generates random colors to fill the graphic with new colors as the function is executed.\n\n    if colorRandom == '#ffffff':\n        colorRandom = '#a5d6a7'\n\n### I declare colors that will always be used, one for the name of the different statistics and the name of the player and the other for the background color of each of the notes that I put on the graph\n\n    basic_color = '#37474f'\n    color_annotate = '#01579b'\n\n### This is the image that will be used in the background, the flag.\n### The image file to read. This can be a filename, a URL or a Python file-like object opened in read-binary mode.\n\n    img = mpimg.imread(flag_image)\n\n### I delimit the size of the graphic and the categories\n\n    plt.figure(figsize=(15,8))\n    categories=list(data)[1:]\n\n### My data set has columns with data string so I do not need them for the graph so I create an array \n### with the name of the columns that I do not need so that when creating the N (categories to be plotted) \n### the function do not select the categories that are part of the array. When I get to it apart from getting the \n### values I also do the same thing, I get all the values of the columns that are different from the ones that \n### I declare in this array.\n\n    coulumnDontUseGraph = ['Flag', 'Age', 'Nationality', 'Photo', 'Logo', 'Club']\n    N = len(categories) - len(coulumnDontUseGraph)\n\n### Basic configuration of the graph\n    \n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n    \n    ax = plt.subplot(111, projection='polar')\n    ax.set_theta_offset(pi \/ 2)\n    ax.set_theta_direction(-1)\n    plt.xticks(angles[:-1], categories, color= 'black', size=17)\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75,100], [\"25\",\"50\",\"75\",\"100\"], color= basic_color, size= 10)\n    plt.ylim(0,100)\n\n### Values that will fill in the graph\n    \n    values = data.loc[row].drop('Name').values.flatten().tolist() \n    valuesDontUseGraph = [image, age, nationality, photo, logo, club]\n    values = [e for e in values if e not in (valuesDontUseGraph)]\n    values += values[:1]\n    \n    ax.plot(angles, values, color= basic_color, linewidth=1, linestyle='solid')\n    ax.fill(angles, values, color= colorRandom, alpha=0.5)\n\n### I put the background image of the graphic plane (FLAG)\n\n    axes_coords = [0, 0, 1, 1]\n    ax_image = plt.gcf().add_axes(axes_coords,zorder= -1)\n    ax_image.imshow(img,alpha=0.5)\n    ax_image.axis('off')\n\n### I put the background image of the polar graph (FIFA)\n### With ax.get_children () you get the list of objects that make up the plot,\n### among which are the polygonal line of the data, text labels, etc. One of these objects \n### is of type matplotlib.patches.Wedge, which is a circular sector (or also a full circle as in this case). \n### Just extract that patch and use it to make the clip\n\n    ax_fondo = plt.gcf().add_axes(axes_coords, zorder=1)\n    ax_fondo.axis('off')\n    fondo = ax_fondo.imshow(fondo, alpha=0.2)\n    clip = [c for c in ax.get_children() if type(c) == matplotlib.patches.Wedge][0]\n    fondo.set_clip_path(clip)\n\n### I create notes that I am going to fill in with the age of the player, the nationality \n### and the club where he currently plays. I set its color of letter, background and font size \n###and in the position of the x-axis and y-axis they have to be\n    \n    ax.annotate('Nacionality: ' + nationality.upper(), xy=(10,10), xytext=(103, 138),\n                fontsize= 12,\n                color = 'white',\n                bbox={'facecolor': color_annotate, 'pad': 7})\n        \n    ax.annotate('Age: ' + str(age), xy=(10,10), xytext=(43, 180),\n                fontsize= 15,\n                color = 'white',\n                bbox={'facecolor': color_annotate, 'pad': 7})\n    \n    ax.annotate('Team: ' + club.upper(), xy=(10,10), xytext=(92, 168),\n                fontsize= 12,\n                color = 'white',\n                bbox={'facecolor': color_annotate, 'pad': 7})\n\n### I add the images of the player's face and the logo of the club where he currently plays    \n\n    arr_img_player = plt.imread(player_image, format='jpg')\n\n    imagebox_player = OffsetImage(arr_img_player)\n    imagebox_player.image.axes = ax\n    abPlayer = AnnotationBbox(imagebox_player, (0.5, 0.7),\n                        xybox=(313, 223),\n                        xycoords='data',\n                        boxcoords=\"offset points\"\n                        )\n\n    arr_img_logo = plt.imread(logo_image, format='jpg')\n\n    imagebox_logo = OffsetImage(arr_img_logo)\n    imagebox_logo.image.axes = ax\n    abLogo = AnnotationBbox(imagebox_logo, (0.5, 0.7),\n                        xybox=(-320, -226),\n                        xycoords='data',\n                        boxcoords=\"offset points\"\n                        )\n\n    ax.add_artist(abPlayer)\n    ax.add_artist(abLogo)\n\n### Finally, I declare the title of the graphic, the size of the letter and the color\n\n    plt.title(title, size=50, color= basic_color)","c5cbd149":"def graphPolar(id = 0):\n    if 0 <= id < len(players.ID):\n        detalle(row = data.index[id], \n                title = data['Name'][id], \n                age = data['Age'][id], \n                photo = data['Photo'][id],\n                nationality = data['Nationality'][id],\n                image = data['Flag'][id], \n                logo = data['Club_Logo'][id], \n                club = data['Club'][id])\n    else:\n        print('The base has 17917 players. You can put positive numbers from 0 to 17917')       ","e757e492":"graphPolar(11)","394642e8":"graphPolar(0)","3f4d4630":"graphPolar(1)","c255478b":"df = pd.DataFrame({\n'Cero': ['Uno'],\n'Uno': [20],\n'Dos': [30],\n'Tres': [40],\n'Cuatro': [50],\n'Cinco': [60],\n'Seis': [70],\n'Siete': [80],\n'Ocho': [90],\n'Nueve': [100]\n})\n\ndef detalle():\n\n    color = '#80cbc4'\n    fondo_img = \"fondo_test.jpg\"\n    circle_img = \"circle_test.jpg\"\n    polygon_img = \"polygon_test.jpg\"\n\n    url_fondo_img = 'https:\/\/i.ibb.co\/TMcGQXg\/fondo.jpg'\n    url_circle_img = 'https:\/\/i.ibb.co\/QCGF8wv\/circle.jpg'\n    url_polygon_img = 'https:\/\/i.ibb.co\/L8xYT5c\/polygon.jpg'\n\n    fondo_img_url = requests.get(url_fondo_img).content\n    with open(fondo_img, 'wb') as handler:\n        handler.write(fondo_img_url)\n        \n    circle_img_url = requests.get(url_circle_img).content\n    with open(circle_img, 'wb') as handler:\n        handler.write(circle_img_url)\n        \n    polygon_img_url = requests.get(url_polygon_img).content\n    with open(polygon_img, 'wb') as handler:\n        handler.write(polygon_img_url)\n\n    fondo = mpimg.imread(fondo_img)\n    circle = mpimg.imread(circle_img)\n    polygon = mpimg.imread(polygon_img)\n\n    plt.figure(figsize=(15,8))\n\n    categories=list(df)[1:]\n    N = len(categories)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n    ax = plt.subplot(111, projection='polar')\n\n    ax.set_theta_offset(pi \/ 2)\n    ax.set_theta_direction(-1)\n    plt.xticks(angles[:-1], categories, color= \"black\", size=10)\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75,100], [\"25\",\"50\",\"75\",\"100\"], color=\"grey\", size=8)\n    plt.ylim(0,100)\n\n    values=df.loc[0].drop('Cero').values.flatten().tolist()   \n    values += values[:1]\n\n    ax.plot(angles, values, color= 'black', linewidth=1, linestyle='solid')\n    ax.fill(angles, values, color= 'green', alpha=0.5)\n\n    axes_coords = [0, 0, 1, 1]\n    ax_image = plt.gcf().add_axes(axes_coords,zorder= -1)\n    ax_image.imshow(fondo,alpha=0.5)\n    ax_image.axis('off')\n\n    ax_image2 = plt.gcf().add_axes(axes_coords, zorder=1)\n    ax_image2.axis('off')\n    ax_image1 = plt.gcf().add_axes(axes_coords, zorder=2)\n    ax_image1.axis('off')\n\n    im = ax_image1.imshow(polygon)\n    clip = [c for c in ax.get_children() if type(c) == matplotlib.patches.Polygon][0]\n    im.set_clip_path(clip)\n    \n    im2 = ax_image2.imshow(circle, alpha=0.6)\n    clip = [c for c in ax.get_children() if type(c) == matplotlib.patches.Wedge][0]\n    im2.set_clip_path(clip)\n\n    my_palette = plt.cm.get_cmap(\"Set2\", len(df.index))","821f369f":"detalle()","202ce847":"### I call each of the functions associating them to the corresponding column. These columns and the information are new.","3ce0ef83":"This is the first time I upload something to this page, I recently started studying python and data science so I would appreciate any comments that help me improve the code and performance.\nMy idea for this project was to take the statistics of the players, unite them, and create new data to be able to show in a polar type graphic, once the graphic was done I could use my time to focus on the format and the visualization. Hope you like.","c15c2afe":"### NEW CATEGORIES\n\nNew categories are created by joining player statistics and obtaining the average. For example, to obtain the strength of the player join the balance, jump, stamina and strength and the average of each of them is obtained a general average that transforms into the Power column\n\n### DIVISION OF CURRENT FEATURES TO GENERATE THE NEW COLUMNS\n\n- Defending = [Marking, StandingTackle, SlidingTackle]\n- General = [HeadingAccuracy, Dribbling, Curve, BallControl]\n- Mental = [Aggression, Interceptions, Positioning, Vision, Composure]\n- Passing = [Crossing, ShortPassing, LongPassing]\n- Mobility = [Acceleration, SprintSpeed, Agility, Reactions]\n- Power = [Balance, Jumping, Stamina, Strength]\n- Rating = [Potential, Overall]\n- Shooting = [Finishing, Volleys, FKAccuracy, ShotPower, LongShots, Penalties]","f92dcb8d":"### This is the function that creates the graph","5f6b1f84":"### BONUS:\n\n### On a small change you can make the clip be about the data polygon\n\n`clip = [c for c in ax.get_children() if type(c) == matplotlib.patches.Polygon][0]`\n\n`im.set_clip_path(clip)`\n\n### You can even create two ax_image, put a different image to each one as well as a different clip_path, and play with your z-order, one image can go to the polygon and another to the circle\n\n# Circle background\n\n`im2 = ax_image2.imshow(img2, alpha=0.5)\nclip = [c for c in ax.get_children() if type(c) == matplotlib.patches.Wedge][0]\nim2.set_clip_path(clip)`\n\n# Polygon background\n\n`im = ax_image.imshow(img, alpha=.5)\nclip = [c for c in ax.get_children() if type(c) == matplotlib.patches.Polygon][0]\nim.set_clip_path(clip)`","53e99cc4":"### DATA VISUALIZATION","a9ed2799":"### TYPE OF GRAPHIC\n\n- Matplotlib Polar\n\nThe graphic contains the name of the player, his age, the team where he currently plays, the nationality, the photo, the image of the club logo, the flag of the country where he was born and the statistics that were created with the function.\n\nTo see the information just pass the id to the graphPolar function, this calls the detail function by passing everything necessary to create the graph and visualize it. This function can be put inside a loop to bring all the players that are needed.\n\nThe dataset has 17918 so you can pass an id from 0 to 17917.\n\n### CREATION, DOWNLOAD AND VISUALIZATION OF IMAGES\n\n3 images will be downloaded: the flag of the country where the player was born, the logo of the team where he plays and a photo of his face (flag_image , player_image, logo_image). These images will be downloaded only once in the project folder, then they will be modified as the function is called again.","ba5a068c":"### I create functions that are going to be responsible for taking data from several columns and get the percentage among all, thus creating new information\n\n### For example, the percentage of Marking, StandingTackle and SlidingTackle creates the defending data","f43b36ad":"### My First Project","7bfd6a05":"### Libraries that I will use","d1307938":"### I read the csv","7e32cfba":"### This function receives the id of the player that I want to graph and sends the necessary data to the function that is responsible for creating the graph","9f96def9":"### Finally, just call the function and send the id of the player you want to see","92b5a8f3":"### Now I rename a column so I can use it later","4b11f038":"### I eliminate the rows where the players do not have the club and the position. Then I complete the fields that are string with No Data and those that are numeric with a zero, finally I reset the index.","e763a079":"### I create a new set of data only with the columns that I'm going to use","b1caf603":"![](https:\/\/i.ibb.co\/m8ZdtqY\/6d77a81a-324c-4732-810e-c83a2570b287-FIFA19-5.jpg)","bc4e6afd":"### You can create an array with players id and call the function in a loop to show several cards at once\n\n    timeFinifih = 0\n    start_time = time()\n\n    for x in range(0,3):\n        graphPolar(x)\n    \n    timeFinifih += (time() - start_time)\n    print('Ending - time: ' + str(timedelta(seconds=timeFinifih)))"}}