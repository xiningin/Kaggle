{"cell_type":{"86e39483":"code","6669f587":"code","fd6105b0":"code","d5df5c4d":"code","92464404":"code","6b12a390":"code","bef3a918":"code","f2bb5a3b":"code","ad8040af":"code","0e4e47ae":"code","de353076":"code","6b6708f0":"code","75c629d7":"markdown","86538b1a":"markdown","b0076b6a":"markdown","a39407f6":"markdown","ed6e2a55":"markdown","85dd1ae4":"markdown","8adcff99":"markdown","a98ee8e2":"markdown","00ca6c6e":"markdown","b0333238":"markdown"},"source":{"86e39483":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport os","6669f587":"flowers_path = \"..\/input\/flowers-recognition\/flowers\"","fd6105b0":"classes = os.listdir(\"..\/input\/flowers-recognition\/flowers\")\n","d5df5c4d":"classes","92464404":"image_size = (128, 128)\nbatch_size = 32\n\ntrain_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    flowers_path,\n    validation_split=0.2,\n    subset=\"training\",\n    seed=11,\n    image_size=image_size,\n    batch_size=batch_size,\n    label_mode=\"categorical\",\n    class_names=classes\n)\n\nval_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    flowers_path,\n    validation_split=0.2,\n    subset=\"validation\",\n    seed=1337,\n    image_size=image_size,\n    batch_size=batch_size,\n    label_mode=\"categorical\",\n    class_names=classes\n)","6b12a390":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(20, 10))\nfor images, labels in train_ds.take(1):\n    for i in range(9):\n        ax = plt.subplot(3, 3, i + 1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(classes[np.argmax(labels[i])])\n        plt.axis(\"off\")\nplt.show()","bef3a918":"# tamano de la imagen de entrada\ninput_shape = (128, 128, 3)\n\n# definicion del modelo Perceptron\nmodel = keras.Sequential(\n    [\n        keras.Input(shape=input_shape),\n        layers.Flatten(),\n        layers.Dense(200, activation=\"relu\"),\n        \n        # Cree mas capas Dense aqui: \n        layers.Dense(units=5, activation='softmax'),\n        layers.Dense(60, activation=\"relu\"),\n         layers.Dense(60, activation=\"relu\"),\n         layers.Dense(65, activation=\"relu\"),\n         layers.Dense(70, activation=\"relu\"),\n         layers.Dense(75, activation=\"relu\"),\n         layers.Dense(80, activation=\"relu\"),\n         layers.Dense(85, activation=\"relu\"),\n        layers.Dense(52, activation=\"softmax\"),\n        layers.Dense(25, activation=\"softmax\"),\n         layers.Dense(100, activation=\"softmax\"),\n        layers.Dense(70, activation=\"softmax\"),\n        layers.Dense(len(classes), activation=\"softmax\"),\n        #layers.Dense(100, activation=\"relu\"),\n    ]\n)\n\n# Construir el modelo y ver la arquitectura\nmodel.build(input_shape)\nmodel.summary()","f2bb5a3b":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","ad8040af":"history = model.fit(train_ds, epochs=20, verbose=1, validation_data=val_ds)","0e4e47ae":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nxepochs = [n for n in range(len(history.history['accuracy']))]\n\nfig = make_subplots(rows=1, cols=2, subplot_titles=(\"Accuracy over time\", \"Loss over time\"))\n\nfor metric in ['accuracy', 'val_accuracy']:\n    fig.add_trace(go.Scatter(x=xepochs, y=history.history[metric], mode='lines+markers', name=metric), row=1, col=1)\n\nfor metric in ['loss', 'val_loss']:\n    fig.add_trace(go.Scatter(x=xepochs, y=history.history[metric], mode='lines+markers', name=metric), row=1, col=2)\n\nfig.update_xaxes(title_text=\"Epoch\", row=1, col=1)\nfig.update_xaxes(title_text=\"Epoch\", row=1, col=2)\n\nfig.update_yaxes(title_text=\"Accuracy\", row=1, col=1)\nfig.update_yaxes(title_text=\"Loss\", row=1, col=2)\n\nfig.show()","de353076":"plt.figure(figsize=(20, 10))\nfor images, labels in val_ds.take(1):\n    for i in range(15):\n        ax = plt.subplot(3, 5, i + 1)\n        \n        img_array = images[i].numpy().astype(\"uint8\")\n        prediction = model.predict(np.array([img_array]))\n        prediction_name = classes[np.argmax(prediction)]\n        real_name = classes[np.argmax(labels[i])]\n        \n        plt.imshow(img_array)\n        if prediction_name == real_name:\n            plt.title(f'real: {real_name}\\npred:{prediction_name}', fontdict={'color': 'g'})\n        else:\n            plt.title(f'real: {real_name}\\npred:{prediction_name}', fontdict={'color': 'r'})\n        \n        plt.axis(\"off\")","6b6708f0":"#La primera prediccion toma todos como dandelion","75c629d7":"2. Modifique la arquitectura de la red neuronal para mejorar el accuracy (exactitud)","86538b1a":"# Flower Classification","b0076b6a":"# History Plots","a39407f6":"1. Coloque el directorio donde descarg\u00f3 las im\u00e1genes de flores","ed6e2a55":"# Predictions","85dd1ae4":"# Import Images","8adcff99":"# Train","a98ee8e2":"# Images","00ca6c6e":"# Compilation","b0333238":"# Neural Network"}}