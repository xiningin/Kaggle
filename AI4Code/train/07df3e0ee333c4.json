{"cell_type":{"95991cca":"code","6286325a":"code","644a2dde":"code","a484db54":"code","e210cb56":"code","e838662e":"code","2f739fb2":"code","66b152f3":"code","19562ee9":"code","d9426658":"code","7b856ab1":"code","0fcb7af5":"code","6a7e6036":"code","859506ed":"code","ab150948":"code","9993b33e":"code","3b71e8e5":"code","f1a0c8c6":"code","9eab9168":"code","c509b131":"code","c05ad6b4":"code","6631facb":"code","479a8055":"code","2f74f589":"code","e0b48f4d":"code","833ad902":"code","4aa8cb37":"code","b1335554":"code","8b6a4e04":"code","76dc20fb":"code","5223f118":"code","c7e39621":"code","1b4ba523":"code","ace69be5":"code","fa5d46a9":"code","39700b0a":"code","cabdf1c1":"code","8310a44c":"code","d5a13a03":"code","635c552d":"code","d39b451f":"code","275bdd42":"code","018809dc":"code","c275ae6f":"markdown","ffb07a45":"markdown","d792ed98":"markdown","639266b7":"markdown","3caaa27f":"markdown","00c22501":"markdown","78007816":"markdown","7ff587f4":"markdown","3500d9ac":"markdown","df7ed1cb":"markdown","6e467777":"markdown","7eddfd5b":"markdown","3896a2db":"markdown","ff314fd6":"markdown","b0034617":"markdown","bb744247":"markdown","22390a8d":"markdown","f31fb7db":"markdown","65004d6f":"markdown","e858b294":"markdown","ad3ff10d":"markdown","15289b0d":"markdown","c884ec79":"markdown","efaa7f5b":"markdown","caec2854":"markdown","4a2ede08":"markdown","513bdf42":"markdown","f85865a5":"markdown","3607d144":"markdown","7b351d2c":"markdown","6c17af9c":"markdown","78b49b4c":"markdown","446589d5":"markdown","2d88bcc4":"markdown","576e901c":"markdown","af6df3c7":"markdown","8dbe63d9":"markdown","831f0cf2":"markdown","7950001c":"markdown","aa1c6e10":"markdown","07151528":"markdown","1253d3ad":"markdown","484b8a0f":"markdown","b51b052c":"markdown","69e022d4":"markdown","18071c0f":"markdown","e493e25e":"markdown","c6d9cb6d":"markdown","49f1d936":"markdown","ad1fb7e3":"markdown","cc360f74":"markdown","3e24307b":"markdown","7b7824f8":"markdown","86ee3d6f":"markdown","128ff1e4":"markdown"},"source":{"95991cca":"import pandas as pd\nimport numpy as np\n\nprint(\"Libraries imported successfully\")","6286325a":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nprint(\"Libraries imported successfully\")","644a2dde":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nprint(\"Libraries imported successfully\")","a484db54":"filepath_train = \"..\/input\/titanic\/train.csv\"\nfilepath_test = \"..\/input\/titanic\/test.csv\"\ntrain = pd.read_csv(filepath_train)\ntest = pd.read_csv(filepath_test)\ndata = pd.concat([train, test])\ndata","e210cb56":"data.columns","e838662e":"data.isnull().sum()","2f739fb2":"for titles in data:\n    data['Title'] = data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ndata = data.drop(['Ticket', 'Cabin', 'Name', 'PassengerId'], axis=1)\ndata","66b152f3":"#segregating Age across 5 groups\nage_grp = ['0-16', '17-32', '33-48', '49-64', '65-80']\ntrain['AgeCat'] = pd.cut(train['Age'], 5)\n\n#grouping Age\nagecalc = train[['AgeCat', 'Survived']].groupby(['AgeCat'], as_index=False).mean()\nagecalc['Survived'] = agecalc['Survived']*100\nagecalc['AgeCat'] = age_grp\nprint(agecalc)\n\n#plotting graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_agelive = sns.barplot(x='AgeCat', y='Survived', data=agecalc.reset_index(), label=\"AgeCat\", ax=ax)\nax.set_title(\"Mean Percentage of Survival - Age Category\", fontsize=15)\nax.set_ylabel(\"Survival Rate\")\nax.set_xlabel(\"Age Group\")\nax.set_xticklabels(age_grp, rotation=45)\nplt.show()","19562ee9":"#grouping Gender\nsexcalc = train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()\nsexcalc['Survived'] = sexcalc['Survived']*100\nprint(sexcalc)\n\n#plotting graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_agelive = sns.barplot(x='Sex', y='Survived', data=sexcalc.reset_index(), label=\"Sex\", ax=ax)\nax.set_title(\"Mean Percentage of Survival - Sex Category\", fontsize=15)\nax.set_ylabel(\"Survival Rate\")\nax.set_xlabel(\"Sex\")\nax.set_xticklabels(sexcalc.Sex, rotation=45)\nplt.show()","d9426658":"#grouping Passenger Class\npclasscalc = train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()\npclasscalc['Survived'] = pclasscalc['Survived']*100\nprint(pclasscalc)\n\n#plotting graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_agelive = sns.barplot(x='Pclass', y='Survived', data=pclasscalc.reset_index(), label=\"Pclass\", ax=ax)\nax.set_title(\"Mean Percentage of Survival - Passenger Class Category\", fontsize=15)\nax.set_ylabel(\"Survival Rate\")\nax.set_xlabel(\"Passenger Class\")\nax.set_xticklabels(pclasscalc.Pclass, rotation=45)\nplt.show()","7b856ab1":"#grouping Embarked\nembarkcalc = train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean()\nembarkcalc['Survived'] = embarkcalc['Survived']*100\nprint(embarkcalc)\n\n#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_agelive = sns.barplot(x='Embarked', y='Survived', data=embarkcalc.reset_index(), label=\"Embarked\", ax=ax)\nax.set_title(\"Mean Percentage of Survival - Embarked Port Category\", fontsize=15)\nax.set_ylabel(\"Survival Rate\")\nax.set_xlabel(\"Embarked Port\")\nax.set_xticklabels(embarkcalc.Embarked, rotation=45)\nplt.show()","0fcb7af5":"#segregating Title across 5 categories\nfor title in data:\n    data['Title'] = data['Title'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')\n    data['Title'] = data['Title'].replace('Mlle', 'Miss')\n    data['Title'] = data['Title'].replace('Ms', 'Miss')\n    data['Title'] = data['Title'].replace('Mme', 'Mrs')\n\n#grouping Title\ntitlecalc = data[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()\ntitlecalc['Survived'] = titlecalc['Survived']*100\nprint(titlecalc)\n\n#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_agelive = sns.barplot(x='Title', y='Survived', data=titlecalc.reset_index(), label=\"Embarked\", ax=ax)\nax.set_title(\"Mean Percentage of Survival - Title Category\", fontsize=15)\nax.set_ylabel(\"Survival Rate\")\nax.set_xlabel(\"Title\")\nax.set_xticklabels(titlecalc.Title, rotation=45)\nplt.show()","6a7e6036":"#grouping Sibling\/Spouse\nsibspcalc = train[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean()\nsibspcalc['Survived'] = sibspcalc['Survived']*100\nprint(sibspcalc)\n\n#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_agelive = sns.barplot(x='SibSp', y='Survived', data=sibspcalc.reset_index(), label=\"SibSp\", ax=ax)\nax.set_title(\"Mean Percentage of Survival - Siblings \/ Spouse Category\", fontsize=15)\nax.set_ylabel(\"Survival Rate\")\nax.set_xlabel(\"Sibling \/ Spouse Present\")\nax.set_xticklabels(sibspcalc.SibSp, rotation=45)\nplt.show()","859506ed":"#grouping Parent \/ Child\nparchcalc = train[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean()\nparchcalc['Survived'] = parchcalc['Survived']*100\nprint(parchcalc)\n\n#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_agelive = sns.barplot(x='Parch', y='Survived', data=parchcalc.reset_index(), label=\"Parch\", ax=ax)\nax.set_title(\"Mean Percentage of Survival - Parent \/ Child Category\", fontsize=15)\nax.set_ylabel(\"Survival Rate\")\nax.set_xlabel(\"Parent \/ Child Present\")\nax.set_xticklabels(parchcalc.Parch, rotation=45)\nplt.show()","ab150948":"#segregating Age into 5 groups\nage_grp = ['0-16', '0-16', '17-32', '17-32', '33-48', '33-48', '49-64', '49-64', '65-80', '65-80']\ntrain['AgeCat'] = pd.cut(train['Age'], 5)\n\n#grouping Age and Gender\nagesexcalc = train[['AgeCat', 'Sex', 'Survived']].groupby(['AgeCat', 'Sex'], as_index=False).mean()\nagesexcalc['Survived'] = agesexcalc['Survived']*100\nagesexcalc['Survived'] = agesexcalc['Survived'].fillna(0)\nagesexcalc['AgeCat'] = age_grp\nprint(agesexcalc)\n\n#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_agelive = sns.barplot(x='AgeCat', y='Survived', data=agesexcalc.reset_index(), hue=\"Sex\", ax=ax)\nax.set_title(\"Mean Percentage of Survival - Age v Gender Category\", fontsize=15)\nax.set_ylabel(\"Survival Rate\")\nax.set_xlabel(\"Age\")\nax.set_xticklabels(['0-16', '17-32', '33-48', '49-64', '65-80'], rotation=45)\nplt.show()","9993b33e":"#grouping by Passenger Class and Gender\nsexpclasscalc = train[['Pclass', 'Sex', 'Survived']].groupby(['Pclass', 'Sex'], as_index=False).mean()\nsexpclasscalc['Survived'] = sexpclasscalc['Survived']*100\nprint(sexpclasscalc)\n\n#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_agelive = sns.barplot(x='Pclass', y='Survived', data=sexpclasscalc.reset_index(), hue=\"Sex\", ax=ax)\nax.set_title(\"Mean Percentage of Survival - Passenger Class v Gender Category\", fontsize=15)\nax.set_ylabel(\"Survival Rate\")\nax.set_xlabel(\"Passenger Class\")\nax.set_xticklabels([1, 2, 3], rotation=45)\nplt.show()","3b71e8e5":"#grouping Embarked and Gender\nsexembarkcalc = train[['Embarked', 'Sex', 'Survived']].groupby(['Embarked', 'Sex'], as_index=False).mean()\nsexembarkcalc['Survived'] = sexembarkcalc['Survived']*100\nprint(sexembarkcalc)\n\n#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_agelive = sns.barplot(x='Embarked', y='Survived', data=sexembarkcalc.reset_index(), hue=\"Sex\", ax=ax)\nax.set_title(\"Mean Percentage of Survival - Embarked Port v Gender Category\", fontsize=15)\nax.set_ylabel(\"Survival Rate\")\nax.set_xlabel(\"Embark Port\")\nax.set_xticklabels(['C', 'Q', 'S'], rotation=45)\nplt.show()","f1a0c8c6":"#grouping Sibling\/Spouse and Gender\nsexsibspcalc = train[['SibSp', 'Sex', 'Survived']].groupby(['SibSp', 'Sex'], as_index=False).mean()\nsexsibspcalc['Survived'] = sexsibspcalc['Survived']*100\nprint(sexsibspcalc)\n\n#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_agelive = sns.barplot(x='SibSp', y='Survived', data=sexsibspcalc.reset_index(), hue=\"Sex\", ax=ax)\nax.set_title(\"Mean Percentage of Survival - Siblings \/ Spouse v Gender Category\", fontsize=15)\nax.set_ylabel(\"Survival Rate\")\nax.set_xlabel(\"Sibling \/ Spouse\")\nax.set_xticklabels([0, 1, 2, 3, 4, 5, 8], rotation=45)\nplt.show()","9eab9168":"#grouping Parent\/Child and Gender\nsexparchcalc = train[['Parch', 'Sex', 'Survived']].groupby(['Parch', 'Sex'], as_index=False).mean()\nsexparchcalc['Survived'] = sexparchcalc['Survived']*100\nprint(sexparchcalc)\n\n#plotting Graph\nfig, ax = plt.subplots(figsize=(10,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_agelive = sns.barplot(x='Parch', y='Survived', data=sexparchcalc.reset_index(), hue=\"Sex\", ax=ax)\nax.set_title(\"Mean Percentage of Survival - Parent \/ Child v Gender Category\", fontsize=15)\nax.set_ylabel(\"Survival Rate\")\nax.set_xlabel(\"Parent \/ Child\")\nax.set_xticklabels([0, 1, 2, 3, 4, 5, 6], rotation=45)\nplt.show()","c509b131":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Other\": 5}\ndata[\"Title\"] = data['Title'].map(title_mapping)\ndata['Title'].fillna(data['Title'].dropna().median(), inplace=True)\ndata.head(10)","c05ad6b4":"data['Sex'] = data['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\ndata.head(10)","6631facb":"data['Age'].fillna(data['Age'].dropna().median(), inplace=True)\ndata.loc[ data['Age'] <= 16, 'Age'] = 0\ndata.loc[(data['Age'] > 16) & (data['Age'] <= 32), 'Age'] = 1\ndata.loc[(data['Age'] > 32) & (data['Age'] <= 48), 'Age'] = 2\ndata.loc[(data['Age'] > 48) & (data['Age'] <= 64), 'Age'] = 3\ndata.loc[ data['Age'] > 64, 'Age'] = 4\ndata.head(10)","479a8055":"data[\"Embarked\"] = data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} )\ndata['Embarked'] = data[\"Embarked\"].fillna(0)\ndata.head(10)","2f74f589":"data['Fare'].fillna(data['Fare'].dropna().median(), inplace=True)\ndata.loc[ data['Fare'] <= 7.91, 'Fare'] = 0\ndata.loc[(data['Fare'] > 7.91) & (data['Fare'] <= 14.454), 'Fare'] = 1\ndata.loc[(data['Fare'] > 14.454) & (data['Fare'] <= 31), 'Fare']   = 2\ndata.loc[ data['Fare'] > 31, 'Fare'] = 3\ndata['Fare'] = data['Fare'].astype(int)\ndata.head(10)","e0b48f4d":"data['IsAlone'] = 0\ndata['FamilySize'] = data['SibSp'] + data['Parch'] + 1\ndata.loc[data['FamilySize'] == 1, 'IsAlone'] = 1\ndata.head(10)","833ad902":"data['Embarked'] = data['Embarked'].astype(int)\ndata['Title'] = data['Title'].astype(int)\ndata['Age'] = data['Age'].astype(int)\ndata = data.drop(['SibSp', 'Parch'], axis = 1)\ndata","4aa8cb37":"data = [train, test]","b1335554":"#mapping Title\nfor title in data:\n    train['Title'] = train['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\nfor title in test:\n    train['Title'] = train['Title'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')\n    train['Title'] = train['Title'].replace('Mlle', 'Miss')\n    train['Title'] = train['Title'].replace('Ms', 'Miss')\n    train['Title'] = train['Title'].replace('Mme', 'Mrs')\n    title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Other\": 5}\ntrain[\"Title\"] = train['Title'].map(title_mapping)\ntrain['Title'].fillna(train['Title'].dropna().median(), inplace=True)\n\n#mapping Sex\ntrain['Sex'] = train['Sex'].map( {'female': 1, 'male': 0} )\ntrain['Sex'].fillna(train['Sex'].dropna().median(), inplace=True)\ntrain['Sex'] = train['Sex'].astype(int)\n\n#mapping Age\ntrain['Age'].fillna(train['Age'].dropna().median(), inplace=True)\ntrain.loc[ train['Age'] <= 16, 'Age'] = 0\ntrain.loc[(train['Age'] > 16) & (train['Age'] <= 32), 'Age'] = 1\ntrain.loc[(train['Age'] > 32) & (train['Age'] <= 48), 'Age'] = 2\ntrain.loc[(train['Age'] > 48) & (train['Age'] <= 64), 'Age'] = 3\ntrain.loc[ train['Age'] > 64, 'Age'] = 4\n\n#mapping Fare\ntrain['Fare'].fillna(train['Fare'].dropna().median(), inplace=True)\ntrain.loc[ train['Fare'] <= 7.91, 'Fare'] = 0\ntrain.loc[(train['Fare'] > 7.91) & (train['Fare'] <= 14.454), 'Fare'] = 1\ntrain.loc[(train['Fare'] > 14.454) & (train['Fare'] <= 31), 'Fare']   = 2\ntrain.loc[ train['Fare'] > 31, 'Fare'] = 3\ntrain['Fare'] = train['Fare'].astype(int)\n\n#mapping Embarked\ntrain[\"Embarked\"] = train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} )\ntrain['Embarked'] = train[\"Embarked\"].fillna(0)\n\n#mapping IsAlone\ntrain['IsAlone'] = 0\ntrain['FamilySize'] = train['SibSp'] + train['Parch'] + 1\ntrain.loc[train['FamilySize'] == 1, 'IsAlone'] = 1\n\n#cleaning up Remainder Data\ntrain['Embarked'] = train['Embarked'].astype(int)\ntrain['Title'] = train['Title'].astype(int)\ntrain['Age'] = train['Age'].astype(int)\ntrain = train.drop(['SibSp', 'Parch', 'PassengerId', 'Name', 'Ticket', 'Cabin', 'AgeCat'], axis = 1)\n\n#display Data\ntrain.head(10)","8b6a4e04":"#mapping Title\nfor title in data:\n    test['Title'] = test['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\nfor title in test:\n    test['Title'] = test['Title'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')\n    test['Title'] = test['Title'].replace('Mlle', 'Miss')\n    test['Title'] = test['Title'].replace('Ms', 'Miss')\n    test['Title'] = test['Title'].replace('Mme', 'Mrs')\n    title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Other\": 5}\ntest[\"Title\"] = test['Title'].map(title_mapping)\ntest['Title'].fillna(test['Title'].dropna().median(), inplace=True)\n\n#mapping Sex\ntest['Sex'] = test['Sex'].map( {'female': 1, 'male': 0} )\ntest['Sex'].fillna(test['Sex'].dropna().median(), inplace=True)\ntest['Sex'] = test['Sex'].astype(int)\n\n#mapping Age\ntest['Age'].fillna(test['Age'].dropna().median(), inplace=True)\ntest.loc[ test['Age'] <= 16, 'Age'] = 0\ntest.loc[(test['Age'] > 16) & (test['Age'] <= 32), 'Age'] = 1\ntest.loc[(test['Age'] > 32) & (test['Age'] <= 48), 'Age'] = 2\ntest.loc[(test['Age'] > 48) & (test['Age'] <= 64), 'Age'] = 3\ntest.loc[ test['Age'] > 64, 'Age'] = 4\n\n#mapping Fare\ntest['Fare'].fillna(test['Fare'].dropna().median(), inplace=True)\ntest.loc[ test['Fare'] <= 7.91, 'Fare'] = 0\ntest.loc[(test['Fare'] > 7.91) & (test['Fare'] <= 14.454), 'Fare'] = 1\ntest.loc[(test['Fare'] > 14.454) & (test['Fare'] <= 31), 'Fare']   = 2\ntest.loc[ test['Fare'] > 31, 'Fare'] = 3\ntest['Fare'] = test['Fare'].astype(int)\n\n#mapping Embarked\ntest[\"Embarked\"] = test['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} )\ntest['Embarked'] = test[\"Embarked\"].fillna(0)\n\n#mapping IsAlone\ntest['IsAlone'] = 0\ntest['FamilySize'] = test['SibSp'] + test['Parch'] + 1\ntest.loc[test['FamilySize'] == 1, 'IsAlone'] = 1\n\n#cleaning up Remainder Data\ntest['Embarked'] = test['Embarked'].astype(int)\ntest['Title'] = test['Title'].astype(int)\ntest['Age'] = test['Age'].astype(int)\ntest = test.drop(['SibSp', 'Parch', 'Name', 'Ticket', 'Cabin'], axis = 1)\n\n#display Data\ntest.head(10)","76dc20fb":"X_train = train.drop(\"Survived\", axis=1)\nY_train = train[\"Survived\"]\nX_test  = test.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","5223f118":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","c7e39621":"coeff = pd.DataFrame(train.columns.delete(0))\ncoeff.columns = ['Feature']\ncoeff[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff.sort_values(by='Correlation', ascending=False)","1b4ba523":"svc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","ace69be5":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","fa5d46a9":"gaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","39700b0a":"perceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron","cabdf1c1":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc","8310a44c":"sgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd","d5a13a03":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","635c552d":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","d39b451f":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Descent', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_linear_svc, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","275bdd42":"fig, ax = plt.subplots(figsize=(10, 8))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_agelive = sns.barplot(y='Model', x='Score', data=models.reset_index(), ax=ax)\nax.set_title(\"Machine Learning Models - Performance\", fontsize=15)\nax.set_ylabel(\"Score\")\nax.set_xlabel(\"Machine Learning Model\")\nax.set_yticklabels(models.Model)\nplt.show()","018809dc":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv(\"Predictions Titanic.csv\")","c275ae6f":"### Importing Libraries","ffb07a45":"#### Check Survival Rate Based on Gender","d792ed98":"#### Random Forest Classifier Algorithm","639266b7":"### Analysing the Training Dataset","3caaa27f":"We begin with a simple task, calling the libraries we need in order to analyse and predict with this dataset. \nFor this, we will divide the libraries we call into 3 parts - \n* Data Cleaning \/ Wrangling\n* Data Visualization \/ Analysis\n* Machine Learning","00c22501":"#### Mapping Age to Numerical Values","78007816":"#### Perceptron Algorithm","7ff587f4":"#### Check Survival Rate Based on Passenger Class and Gender","3500d9ac":"#### Check Survival Rate Based on Embarkation and Gender","df7ed1cb":"#### k-Nearest Neighbours (kNN) Algorithm","6e467777":"#### SVC Algorithm","7eddfd5b":"We now provide a coefficient of correlation, to better help explain the data available to us. \n\nFor example, we measure correlation as -> feature compared to its survival rate. \n\nSo, within the sex category, female has the highest correlation with survival. \n\nSimilarly, within title, Master and Mrs have the highest correlation with survival. \n\nWe can map this out as shown below.","3896a2db":"We need to select models based on our data. Since we have all the data to begin with, we need not look beyond a Supervised Learning ALgorithm. All the model has to do in this case is use the vailable data to make comparisons and provide us with the best value. \n\nWith these two criteria - Supervised Learning plus Classification and Regression, we can narrow down our choice of models to a few. These include:\n\n* Logistic Regression Algorithm\n* KNN or k-Nearest Neighbors Algorithm\n* Support Vector Machines Algorithm\n* Naive Bayes Classifier Algorithm\n* Decision Tree Algorithm\n* Random Forest Algorithm\n* Perceptron Algorithm\n* Artificial Neural Network Algorithm\n* RVM or Relevance Vector Machine Algorithm","ff314fd6":"#### Cleaning and Mapping Train Dataset","b0034617":"### Importing the Dataset","bb744247":"#### Mapping Fare to Numerical Values","22390a8d":"We now start with makng valued comparisons across various features present in the training dataset. This gives an idea of how we interpret the dataset, and provides an understanding with regards to the various features present in the dataset. ","f31fb7db":"#### Check Survival Rate Based on Passenger Class","65004d6f":"#### Check Survival Rate Based on Age","e858b294":"#### Decision Tree Classifier Algorithm","ad3ff10d":"#### Stochastic Gradient Descent Algorithm","15289b0d":"Now that the data has been dealt with, we can now move on to Machine Learning models. ","c884ec79":"#### Check Survival Rate Based on Parent\/Child and Gender","efaa7f5b":"#### Check Survival Rate Based on Age and Gender","caec2854":"As of now, we have imported and explored the dataset. It is now time to start briefly manipulating and analysing data","4a2ede08":"## Titanic: Machine Learning From Disaster\n### A Data Science Solution\n\nThis is a dataset containing a train module and a test module. There will be data wrangling, feature engineering, data cleaning, data visualisation, data analysis and a little bit of machine learning for the test module on the side. \nThis notebook has been partly inspired by the notebook titled \"Titanic Data Science Solutions\", a great help indeed. \n","513bdf42":"We now import the dataset","f85865a5":"#### Check Survival Rate Based on Siblings \/ Spouse","3607d144":"#### Check Survival Rate Based on Title","7b351d2c":"### Wrangling, Cleaning and Engineering our Dataset","6c17af9c":"#### Check Survival Rate Based on Embarkation","78b49b4c":"#### Cleaning Remainder Data","446589d5":"Now that we have represented all the models, it is time to see which model performed best. ","2d88bcc4":"#### Mapping Gender to Numerical Values","576e901c":"Survived has two values 0 and 1. They are already in numeric form.\n\nPclass, SibSp and Parch are also represented in numeric form. \n\nSex has two values, male and female. This column can be presented in the form of 0 and 1.\n\nEmbarked has three values, C, Q and S. This column can be presented in the form of 0, 1 and 2.\n \nAge and Title are two such categories where there is a bit of feature engineering required. ","af6df3c7":"#### Cleaning and Mapping Test Dataset","8dbe63d9":"Next, we check if there are any null values we can reject or convert to a value in the dataset.","831f0cf2":"Now that we have seen how the cleaned data will look like, we arrive at a slight dilemma. The \"data\" in question is a combination of the train and test datasets. \n\nSince we have done all our operations on data, it as not been reflected in the train and test datasets. We require the train and test datasets to reflect the same data as that is what will be used in the machine learning models. \n\nHence, we will apply the above mapping and cleaning operations to both, the train and the test data. ","7950001c":"#### Mapping IsAlone to Numerical Values","aa1c6e10":"Now that we have imported the dataset, it is time we look around and see what is in the dataset. Starting with, we first check the columns that are present in the dataset. ","07151528":"We do not fill the data in just yet. As we can see clearly, Cabin has a majority of its values empty. It makes much more sense to drop this entire column.\n","1253d3ad":"The best way to represent the dataset is to represent it in numerical form. So, for every unique value in a dataset, we assign it a number. ","484b8a0f":"#### Logistic Regression Algorithm","b51b052c":"#### Linear SVC Algorithm","69e022d4":"#### Mapping Embarked to Numerical Values","18071c0f":"This is the final step of the model. Here, we use different machine learning algorithms to see which gives the best prediction with our data. \n\nWe start with normalising both datasets, bringing them to the same shape and datatype.","e493e25e":"Importing Data Cleaning \/ Wrangling Libraries","c6d9cb6d":"### Machine Learning using Models and Predictions","49f1d936":"#### Gaussian Algorithm","ad1fb7e3":"Importing Machine Learning Libraries","cc360f74":"With this we complete our analysis section. Now that we have a brief understanding of the data present, it is time to mould and engineer the data in a way that makes it easier for predictions.","3e24307b":"Importing Data Visualisation \/ Analysis Libraries","7b7824f8":"#### Check Survival Rate Based on Sibling \/ Spouse and Gender","86ee3d6f":"#### Mapping Title to Numerical Values","128ff1e4":"#### Check Survival Rate Based on Parent \/ Child"}}