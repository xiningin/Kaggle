{"cell_type":{"97ddbef5":"code","0f5aab25":"code","0c3dc128":"code","b67ba2fb":"code","59e78c5e":"code","6bcc75e9":"code","26b39a7b":"code","3eb4eea3":"code","56f08f19":"code","ae86f064":"code","ba9c7900":"code","2fa8df9e":"code","3f8ac4c2":"code","6951078a":"code","b8e152ce":"code","1ee18455":"code","c2fe1037":"code","70011b42":"code","fa594268":"code","a0172b1b":"code","138e4d7f":"code","8563a4e4":"code","3863ad72":"code","ffb5b218":"code","f2ebf8be":"code","c997e146":"code","8697779f":"code","5b626fd5":"code","dd7ac935":"code","00a1aa87":"code","d000c223":"code","7255b396":"code","201ccb57":"code","f784adf0":"code","d7397c92":"code","0c1d2b08":"code","52fc92b3":"code","56f04889":"code","5bf247e4":"code","04d2a843":"code","dc8b576d":"code","9e6510eb":"code","3ac64cef":"code","749cb529":"code","439750b1":"code","8778509a":"code","358d40d1":"code","57002d27":"code","c6210b1e":"code","d5dcfba0":"markdown","7e2e7be2":"markdown","c5ade862":"markdown","ddc1390f":"markdown","d5b37510":"markdown","e9cac448":"markdown","aab0260b":"markdown","20bb0d23":"markdown","369ba7f5":"markdown","17469504":"markdown","f2b5dd6f":"markdown","4c4f9117":"markdown","d934a4a5":"markdown","2a2ce525":"markdown","bd348613":"markdown","a4359945":"markdown","f9c9b857":"markdown","8ea73d59":"markdown","dc6292b4":"markdown","8b495859":"markdown","82ae962c":"markdown","60ab0497":"markdown"},"source":{"97ddbef5":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn') \nsns.set(font_scale = 2.5)\n\nimport missingno as msno\n\n# warning \ubb34\uc2dc\ud558\uae30\nimport warnings\nwarnings.filterwarnings('ignore') \n\n%matplotlib inline ","0f5aab25":"df = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")\ndf","0c3dc128":"df.shape","b67ba2fb":"df.isnull().sum()","59e78c5e":"df.info()","6bcc75e9":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\n                     \ndf['target'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow = True)\nax[0].set_title('Pie plot - Heart Disease')\nax[0].set_ylabel('')\nsns.countplot('target', data=df, ax=ax[1])\nax[1].set_title('Count plot - Heart Disease')\nplt.show()","26b39a7b":"df[['cp', 'target']].groupby(['cp'], as_index=True).count().sort_values(by='target', ascending=False) ","3eb4eea3":"pd.crosstab(df['cp'], df['target'], margins=True)","56f08f19":"df[['cp', 'target']].groupby(['cp'], as_index=True).mean().sort_values(by='target', ascending=False)","ae86f064":"f, ax = plt.subplots(1, 2, figsize=(30, 10)) \ndf['cp'].value_counts().plot.bar(color=['#ff0000', '#ffff00', '#228b22', '#0000ff'], ax=ax[0]) \nax[0].set_title('Number of Patients by cp') \nax[0].set_ylabel('Count') \nsns.countplot('cp', hue='target', data=df, ax=ax[1])\nax[1].set_title('cp : Normal vs Heart Disease') \nplt.show()","ba9c7900":"df[['sex', 'target']].groupby(['sex'], as_index=True).count() # Sex\ubcc4 \uc2ec\uc7a5\ubcd1 \uc22b\uc790","2fa8df9e":"pd.crosstab(df['sex'], df['target'], margins=True)","3f8ac4c2":"df[['sex', 'target']].groupby(['sex'], as_index=True).mean() # Sex\ubcc4 \uc2ec\uc7a5\ubcd1 \ube44\uc728","6951078a":"f, ax = plt.subplots(1, 2, figsize=(30, 10))\ndf[['sex', 'target']].groupby(['sex'], as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Number of Patients by sex')\nsns.countplot('sex',hue='target', data=df, ax=ax[1]) \nax[1].set_title('Sex : Heart Disease vs Normal')\nplt.show()","b8e152ce":"df[['exang', 'target']].groupby(['exang']).count()","1ee18455":"pd.crosstab(df['exang'], df['target'], margins = True)","c2fe1037":"df[['exang', 'target']].groupby(['exang']).mean()","70011b42":"f, ax = plt.subplots(1, 2, figsize=(30, 10))\ndf[['exang', 'target']].groupby(['exang'], as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Number of Patients by exang')\nsns.countplot('exang',hue='target', data=df, ax=ax[1]) \nax[1].set_title('exang : Heart Disease vs Normal')\nplt.show()","fa594268":"df[['age']].describe()","a0172b1b":"print(\"\uc2ec\uc7a5\ubcd1 \ubc1c\ubcd1 \ud658\uc790 \uc911 \ub098\uc774\uac00 \uc81c\uc77c \ub9ce\uc740 \ud658\uc790 : {:.1f} years\".format(df[df[\"target\"] == 1][\"age\"].max()))\nprint(\"\uc2ec\uc7a5\ubcd1 \ubc1c\ubcd1 \ud658\uc790 \uc911 \ub098\uc774\uac00 \uc81c\uc77c \uc5b4\ub9b0 \ud658\uc790 : {:.1f} years\".format(df[df[\"target\"] == 1][\"age\"].min()))\nprint(\"\uc2ec\uc7a5\ubcd1 \ubc1c\ubcd1 \ud658\uc790 \uc911 \ud3c9\uade0 \ub098\uc774 : {:.1f} years\".format(df[df[\"target\"] == 1][\"age\"].mean()))","138e4d7f":"pd.crosstab(df['target'], df['age'], margins = True)","8563a4e4":"df[['age', 'target']].groupby(['target']).mean()","3863ad72":"df[['age', 'target']].groupby(['age']).mean()","ffb5b218":"# \uc0dd\uc874 \uc5ec\ubd80\uc5d0 \ub530\ub978 \ub098\uc774 \ud655\ub960 \ubd84\ud3ec\nfig, ax = plt.subplots(1, 1, figsize=(10, 5))\nsns.kdeplot(df.age, ax = ax)\nsns.kdeplot(df.age[df.target == 1], ax = ax)\nsns.kdeplot(df.age[df.target == 0], ax = ax)\nplt.legend([\"All\", \"target == 1\", \"target == 0\"])\nplt.show()     ","f2ebf8be":"df[df[\"target\"] == 1][\"age\"].sort_values()","c997e146":"f, ax = plt.subplots(1, 1, figsize=(30, 8))\ndf[['age', 'target']].groupby(['age'], as_index=True).count().plot.bar(ax=ax)\nax.set_title('Number of Patients by age')\nplt.show()","8697779f":"f, ax = plt.subplots(1, 1, figsize=(30, 8))\ndf[['age', 'target']].groupby(['age'], as_index=True).mean().plot.bar(ax=ax)\nax.set_title('Percentage of target 1 by age')\nplt.show()","5b626fd5":"f, ax = plt.subplots(1, 1, figsize=(30, 8))\nsns.countplot('age', hue='target', data=df, ax=ax)\nax.set_title('age : Normal vs Heart Disease', y = 1.02)\nplt.show()","dd7ac935":"df[['thalach']].describe()","00a1aa87":"print(\"\uc2ec\uc7a5\ubcd1 \ubc1c\ubcd1 \ud658\uc790 \uc911 \ucd5c\ub300 \uc2ec\ubc15\ub3d9\uc218 : {:.1f} bpm\".format(df[df[\"target\"] == 1][\"thalach\"].max()))\nprint(\"\uc2ec\uc7a5\ubcd1 \ubc1c\ubcd1 \ud658\uc790 \uc911 \ucd5c\uc18c \uc2ec\ubc15\ub3d9\uc218 : {:.1f} bpm\".format(df[df[\"target\"] == 1][\"thalach\"].min()))\nprint(\"\uc2ec\uc7a5\ubcd1 \ubc1c\ubcd1 \ud658\uc790 \uc911 \uc2ec\ubc15\ub3d9\uc218 \ud3c9\uade0 : {:.1f} bpm\".format(df[df[\"target\"] == 1][\"thalach\"].mean()))","d000c223":"pd.crosstab(df['thalach'], df['target'], margins = True)","7255b396":"df[['thalach', 'target']].groupby(['thalach']).mean()","201ccb57":"# \uc0dd\uc874 \uc5ec\ubd80\uc5d0 \ub530\ub978 \ub098\uc774 \ud655\ub960 \ubd84\ud3ec\nfig, ax = plt.subplots(1, 1, figsize=(10, 5))\nsns.kdeplot(df.thalach, ax = ax)\nsns.kdeplot(df.thalach[df.target == 1], ax = ax)\nsns.kdeplot(df.thalach[df.target == 0], ax = ax)\nplt.legend([\"All\", \"target == 1\", \"target == 0\"])\nplt.show()     ","f784adf0":"plt.figure(figsize=(15, 10))\nplt.title(\"Data Correlation Info.\", y = 1.02)\nsns.heatmap(data = df.corr(), annot=True, annot_kws = {'size' : 14}, fmt = '.2f', cmap='GnBu')\nplt.show()","d7397c92":"fig, ax = plt.subplots(1, 1, figsize=(15, 10))\nplt.scatter(df.age[df.target == 1], df.thalach[df.target == 1], c = 'red', s = 100)\nplt.scatter(df.age[df.target == 0], y = df.thalach[df.target == 0], c = 'blue', s = 100)\nplt.title(\"Correlation between 'age' and 'thalach'\", y = 1.02)\nplt.legend([\"target == 1\", \"target == 0\"])\nplt.xlabel(\"age\")\nplt.ylabel(\"thalach\")\nplt.show()","0c1d2b08":"X_data = df.drop([\"target\"], axis = 1)\n# Min-Max Normalization\nX = (X_data - np.min(X_data))\/(np.max(X_data)-np.min(X_data)).values\nX","52fc92b3":"Y = df.target.values\nY","56f04889":"from sklearn.model_selection import train_test_split\n\n# train : validation : test = 64 : 16 : 20 \/ Stratify \/ seed = 0\nX_t, X_test, Y_t, Y_test = train_test_split(X, Y, test_size=0.2, stratify = Y, random_state = 0)\nX_train, X_validation, Y_train, Y_validation = train_test_split(X_t, Y_t, test_size = 0.2, stratify = Y_t, random_state = 0)\n\nX_train = X_train.T\nX_validation = X_validation.T\nX_test = X_test.T\nX_train.shape\nm = X_train.shape[1]  # m = Sample\nn = X_train.shape[0]  # n = Feature","5bf247e4":"# w = (0.01, 0.01, ... , 0.01), b = 0.0\ndef Initialization(feature):\n    w = np.full((feature, 1), 0.01)\n    b = 0.0\n    \n    return w, b","04d2a843":"def Sigmoid(Z):\n    A = 1 \/ (1 + np.exp(-Z))\n    \n    return A","dc8b576d":"def Propagation(w, b, X_train, Y_train):\n    # Forward\n    Z = np.dot(w.T, X_train) + b\n    A = Sigmoid(Z)\n    loss = -(Y_train*np.log(A) + (1 - Y_train)*np.log(1 - A))\n    cost = (np.sum(loss)) \/ m\n    \n    # Backward\n    # da = (y\/a) + (1-y)\/(1-a)\n    # dz = a - y\n    dw = (1\/m) * np.dot(X_train, (A - Y_train).T)\n    db = (1\/m) * np.sum(A - Y_train)\n    \n    # gradient dictionary\n    grads = {\"dw\" : dw, \"db\" : db}\n    \n    return cost, grads","9e6510eb":"def Update(w, b, X_train, Y_train, lr, iterations):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    for i in range(iterations):\n        cost, grads = Propagation(w, b, X_train, Y_train)\n        cost_list.append(cost)\n        \n        w = w - lr * grads[\"dw\"]\n        b = b - lr * grads[\"db\"]\n        \n        if i % 5 == 0: # 5\ubc88 \ub9c8\ub2e4 \ucd94\uac00\n            cost_list2.append(cost)\n            index.append(i)\n            \n    parameters = {\"w\" : w, \"b\" : b}\n    plt.plot(index, cost_list2)\n    plt.xlabel(\"iter\")\n    plt.ylabel(\"cost\")\n    plt.show()\n    \n    return parameters, cost_list","3ac64cef":"# Validation set\ndef Predict_validation(w, b, validation):\n    Z = Sigmoid(np.dot(w.T, validation) + b)\n    Y_prediction = np.zeros((1, validation.shape[1]))\n    \n    for i in range(Z.shape[1]):\n        if Z[0, i] <= 0.5:\n            Y_prediction[0, i] = 0\n        else:\n            Y_prediction[0, i] = 1\n            \n    return Y_prediction  ","749cb529":"# Test set\ndef Predict_test(w, b, test):\n    Z = Sigmoid(np.dot(w.T, test) + b)\n    Y_prediction = np.zeros((1, test.shape[1]))\n    \n    for i in range(Z.shape[1]):\n        if Z[0, i] <= 0.5:\n            Y_prediction[0, i] = 0\n        else:\n            Y_prediction[0, i] = 1\n            \n    return Y_prediction  ","439750b1":"X_train.shape","8778509a":"def Logistic_regression(X_train, Y_train, X_validation, Y_validation, lr, iterations):\n    feature = X_train.shape[0]\n    w, b = Initialization(feature)\n    \n    parameters, cost_list = Update(w, b, X_train, Y_train, lr, iterations)\n    \n    Y_prediction_validation = Predict_validation(parameters[\"w\"], parameters[\"b\"], X_validation)\n    \n    print(\"Validation accuracy : {}%\".format(100 - np.mean(np.abs(Y_prediction_validation - Y_validation))*100))\n    \n    return parameters","358d40d1":"predicted_parameters = Logistic_regression(X_train, Y_train, X_validation, Y_validation, lr=0.1, iterations = 500)\npredicted_parameters","57002d27":"X_test.T","c6210b1e":"# \uc784\uc758\uc758 \ud658\uc790\npatient_index = 234\n\n# \uc608\uce21 \uac12\npredicted_target = Predict_test(predicted_parameters[\"w\"], predicted_parameters[\"b\"], (X_test.T.loc[[patient_index]]).T)\n\n# \uc2e4\uc81c \uac12\nreal_target = (df.loc[patient_index]['target'])\n\nprint(\"predicted:\", int(predicted_target), \"\\nreal:\", int(real_target))   \n\nif (predicted_target == real_target):\n    print(\"Model is correct\")\nelse:\n    print(\"Model is wrong\")","d5dcfba0":"# \ub370\uc774\ud130 \ud655\uc778\ud558\uae30","7e2e7be2":"5. Prediction","c5ade862":"# Null data \ud655\uc778\ud558\uae30","ddc1390f":"# EDA - exang(\ud611\uc2ec\uc99d \uc720\ubc1c \uc6b4\ub3d9)\n1 - yes, 0 - no","d5b37510":"\ub0a8\uc131\ubcf4\ub2e4 \uc5ec\uc131\uc758 \uacbd\uc6b0 \uc2ec\uc7a5\ubcd1\uc5d0 \uac78\ub9b4 \ud655\ub960\uc774 \ub192\ub2e4.","e9cac448":"# EDA - thalach(\ucd5c\ub300 \uc2ec\uc7a5\ubc15\ub3d9\uc218)","aab0260b":"# EDA - age","20bb0d23":"# EDA - sex(\uc131\ubcc4)\n1 - \ub0a8\uc131, 0 - \uc5ec\uc131","369ba7f5":"# \ubaa8\ub378 \ud568\uc218 \uc0dd\uc131","17469504":"# \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30","f2b5dd6f":"# \ub370\uc774\ud130 \uc900\ube44","4c4f9117":"1. \ud589\ub82c \uc0dd\uc131","d934a4a5":"4. Update","2a2ce525":"2. Sigmoid","bd348613":"# \ubaa8\ub378 \uc0dd\uc131","a4359945":"6. Logistic Regression","f9c9b857":"2. \ub370\uc774\ud130 \ubd84\ub9ac\ud558\uae30","8ea73d59":"1. Initialization","dc6292b4":"1(\ube44\uc804\ud615\uc801\uc778 \ud611\uc2ec\uc99d), 2(\ube44\ud611\uc2ec\uc99d \ud1b5\uc99d), 3(\uc99d\uc0c1 \uc5c6\uc74c), 0(\uc804\ud615\uc801\uc778 \ud611\uc2ec\uc99d) \uc21c\uc73c\ub85c \uc2ec\uc7a5\ubcc4\uc758 \uac78\ub9b4 \ud655\ub960\uc774 \ub192\ub2e4.","8b495859":"# \uc608\uce21","82ae962c":"3. Forward & Backward Propagation","60ab0497":"# EDA - CP(\uac00\uc2b4 \ud1b5\uc99d \uc720\ud615)\n0 - \uc804\ud615\uc801\uc778 \ud611\uc2ec\uc99d, 1 - \ube44\uc804\ud615\uc801\uc778 \ud611\uc2ec\uc99d, 2 - \ube44\ud611\uc2ec\uc99d \ud1b5\uc99d, 3 - \uc99d\uc0c1 \uc5c6\uc74c"}}