{"cell_type":{"2c1f6b15":"code","6c3ee5e6":"code","0ac8c7d0":"code","505da688":"code","e74751f1":"code","4a916c7f":"code","94b48d46":"code","2d4935b7":"code","7de6ff79":"code","a766a7bc":"code","753e2fee":"code","3af9b0fb":"code","7ea8ebd2":"code","11563c84":"code","d47eda78":"code","e313ae9f":"code","3d7e0083":"code","da4badfa":"code","17207015":"code","fceadc22":"code","71654748":"code","cce8fcd4":"code","159510d7":"code","58badcf2":"code","7165e2d7":"code","f7dcecec":"code","e20303f5":"code","7f4ea1fe":"code","6b2aeff1":"code","dc89719c":"code","4c5ec959":"code","613ec413":"code","6a083d61":"code","d292e656":"code","888df997":"code","630dd1d4":"code","12a1b952":"code","88210a75":"code","6be7007a":"code","48663476":"code","2718ec57":"markdown","239a256e":"markdown","d44aa62a":"markdown","7d5df8b1":"markdown","8a9f3ebc":"markdown","de6cd3dc":"markdown","805def1d":"markdown","68b3fe32":"markdown","3802cf78":"markdown","1da0c0cf":"markdown","64e6a655":"markdown","e409059b":"markdown","6c8701c4":"markdown","3c11aab5":"markdown","c04c275d":"markdown","1586bc08":"markdown","39e86d04":"markdown","cf08b835":"markdown","4338f91f":"markdown","9ae763f1":"markdown","bb4a8ca1":"markdown","57e4528a":"markdown","5eb067cd":"markdown","f09483b8":"markdown","85a750c6":"markdown","e174249c":"markdown","956d0e80":"markdown","84e3a231":"markdown","996d8974":"markdown","665dcb9e":"markdown","e1aebc8c":"markdown","eb160176":"markdown","ff489a3b":"markdown","5de4e734":"markdown","8b70245d":"markdown"},"source":{"2c1f6b15":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import tree\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.metrics import  roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LogisticRegression","6c3ee5e6":"address = r'..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv'\ndf=pd.read_csv(address)\ndf.head(10)","0ac8c7d0":"df.describe()","505da688":"df.info()","e74751f1":"df=df.drop(labels='id', axis = 1)\ndf.head()","4a916c7f":"labelencoder = LabelEncoder()\ndf['smoking_status'] = labelencoder.fit_transform(df['smoking_status'])\ndf['work_type'] = labelencoder.fit_transform(df['work_type'])\ndf['gender']=pd.get_dummies(df['gender'])\ndf['ever_married']=pd.get_dummies(df['ever_married'])\ndf['Residence_type']=pd.get_dummies(df['Residence_type'])\ndf.head()","94b48d46":"df.isnull().sum()","2d4935b7":"med = df['bmi'].mean()\ndf.bmi.fillna(med, inplace = True)\ndf.head()","7de6ff79":"d = df['stroke']==1\nprint(d.value_counts())\nprint(249\/5109*100,\"% has had strokes\")","a766a7bc":"plt.figure(figsize=(20,10))\nc= df.corr()\nsns.heatmap(c,cmap=\"Accent\",annot=True)\nplt.show()","753e2fee":"df.hist(bins=50, figsize=(20,15), color = 'Turquoise')\nplt.show()","3af9b0fb":"sns.scatterplot(x=df['age'],y=df['bmi'], hue=df['stroke'], palette=\"Greens\")\nplt.title('Age and BMI')\nplt.xlabel('Age')\nplt.ylabel('BMI')\nplt.show()","7ea8ebd2":"sns.barplot(x =df['stroke'], y=df['age'],palette=\"Reds\")\nplt.title('Age')\nplt.xlabel('Stroke')\nplt.ylabel('Age')\nplt.show()","11563c84":"sns.barplot(x=df['Residence_type'], y=df['stroke'],palette=\"ch:s=-.2,r=.6\")\nplt.title('Residence Type', fontsize = 20)\nplt.xlabel('Place of Residence')\nplt.ylabel('Stroke')\nplt.show()\nprint('0 = urban','1 = rural')","d47eda78":"sns.scatterplot(x=df['age'],y=df['avg_glucose_level'], hue=df['stroke'], palette='seismic')\nplt.xlabel('Age')\nplt.ylabel('Average Glucose Level')\nplt.title('Age and Average Glucose Level')\nplt.show()","e313ae9f":"sns.barplot(x=df['ever_married'],y=df['stroke'],palette=\"jet_r\")\nplt.title('Marriage Status', fontsize = 20)\nplt.xlabel('Marriage status')\nplt.ylabel('Stroke')\nplt.show()\nprint('0 = not married','1 = married')","3d7e0083":"k = df['smoking_status']==0\nk.value_counts()","da4badfa":"sns.barplot(x=df['smoking_status'], y=df['stroke'],palette=\"cubehelix\")\nplt.xlabel('Smoking Status')\nplt.ylabel('Stroke')\nplt.title('Smoking Status')\nplt.show()\nprint('0 = unknown','1 = formerly','2 = never','3 = smokes')","17207015":"plt.scatter(x=df['bmi'],y=df['age'],color='lightseagreen')\nplt.xlabel('BMI')\nplt.ylabel('Age')\nplt.title('Age and BMI correlation')\nplt.show()","fceadc22":"plt.figure(figsize = (7, 7))\nsns.barplot(x=df['gender'],y=df['stroke'],palette = \"cubehelix\")\nplt.title('Gender', fontsize = 15)\nplt.xlabel('Gender')\nplt.ylabel('Stroke')\nplt.show()\nprint('0 = male','1 = female')","71654748":"sns.catplot(x=\"stroke\", y=\"avg_glucose_level\", data=df, palette = \"magma\")\nplt.title('Average Glucose Level', fontsize = 10)\nplt.xlabel('Stroke')\nplt.ylabel('Glucose Levels')\nplt.show()","cce8fcd4":"sns.barplot(x=df['work_type'], y=df['stroke'],palette=\"viridis\")\nplt.title('Work Type')\nplt.xlabel('Work Field')\nplt.ylabel('Stroke')\nplt.show()\nprint('0 = government job','1 = never worked','2 = private','3 = self-employed','4 = children')","159510d7":"sns.barplot(x=\"stroke\", y=\"heart_disease\", data=df, palette = \"cubehelix\")\nplt.title('Heart Disease', fontsize = 15)\nplt.xlabel('Stroke')\nplt.ylabel('Heart Disease')\nplt.show()\nprint('0 = no','1 = yes')","58badcf2":"sns.barplot(x=df['hypertension'], y=df['stroke'],palette='flare')\nplt.title('Hypertension')\nplt.xlabel('Hypertension')\nplt.ylabel('Stroke')\nplt.show()\nprint('0 = no','1 = yes')","7165e2d7":"x = df.drop('stroke', axis = 1)\ny = df.stroke\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2)","f7dcecec":"dummy_clf = DummyClassifier(strategy=\"stratified\")\ndummy_clf.fit(x_train,y_train)\npred = dummy_clf.predict(x_test)\ndummy_a=dummy_clf.score(y_test, pred)\nprint(dummy_a)","e20303f5":"con_mat = confusion_matrix(y_test, pred)\nf, ax = plt.subplots(figsize=(8, 6))\nsns.heatmap(con_mat, annot=True, fmt='g')","7f4ea1fe":"false_positive_rate, true_positiv_rate, _= roc_curve(y_test, pred)\nauc= roc_auc_score(y_test, pred)\nplt.plot(false_positive_rate, true_positiv_rate, label=\"auc=\"+str(auc))\nplt.box(False)\nplt.title('ROC CURVE')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.grid(True)\nplt.show()\n \nprint(f\"The score ROC Curve is: {round(auc,3)*100}%\")","6b2aeff1":"clf = tree.DecisionTreeClassifier()\nclf.fit(x_train,y_train)\npredict = clf.predict(x_test)\ndecision_a=accuracy_score(y_test, predict)\nprint(decision_a)","dc89719c":"con_mat = confusion_matrix(y_test, predict)\nf, ax = plt.subplots(figsize=(8, 6))\nsns.heatmap(con_mat, annot=True, cmap=\"CMRmap\", fmt = 'g')\nplt.show()","4c5ec959":"false_positive_rate, true_positiv_rate, _= roc_curve(y_test, predict)\nauc= roc_auc_score(y_test, predict)\nplt.plot(false_positive_rate, true_positiv_rate, label=\"auc=\"+str(auc))\nplt.box(False)\nplt.title('ROC CURVE')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.grid(True)\nplt.show()\n \nprint(f\"The score ROC Curve is: {round(auc,3)*100}%\")","613ec413":"knn = KNeighborsClassifier(n_neighbors = 8)\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\nknn_a=accuracy_score(y_test, prediction)\nprint(knn_a)","6a083d61":"for i in range(1,10):\n    knn2 = KNeighborsClassifier(n_neighbors = i)\n    knn2.fit(x_train, y_train)\n    prediction2 = knn2.predict(x_test)\n    print (\"For k =\", i ,\":\", metrics.accuracy_score(y_test, prediction2))","d292e656":"arr = []\nfor i in range(1,14):\n    knn2 = KNeighborsClassifier(n_neighbors = i)\n    knn2.fit(x_train, y_train)\n    prediction2 = knn2.predict(x_test)\n    arr.append(accuracy_score(y_test, prediction2))\n    \nplt.plot(range(1,14), arr)\nplt.xticks(np.arange(1,14,1))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()","888df997":"confusion = metrics.confusion_matrix(y_test, prediction)\nTP = confusion[1, 1]\nTN = confusion[0, 0]\nFP = confusion[0, 1]\nFN = confusion[1, 0]\n\nf, ax = plt.subplots(figsize = (5,5))\n\nsns.heatmap(confusion,annot = True, linewidth = 0.5, fmt = \".0f\", ax = ax)\nplt.show()","630dd1d4":"false_positive_rate, true_positiv_rate, _= roc_curve(y_test, prediction)\nauc= roc_auc_score(y_test, prediction)\nplt.plot(false_positive_rate, true_positiv_rate, label=\"auc=\"+str(auc))\nplt.box(False)\nplt.title('ROC CURVE')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.grid(True)\nplt.show()\n \nprint(f\"The score ROC Curve is: {round(auc,3)*100}%\")","12a1b952":"logreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\nlogreg_predict = logreg.predict(x_test)\nlogreg_a = accuracy_score(y_test, logreg_predict)\nprint(logreg_a)","88210a75":"con_mat = confusion_matrix(y_test, logreg_predict)\nf, ax = plt.subplots(figsize=(8, 6))\nsns.heatmap(con_mat, annot=True, cmap=\"CMRmap\", fmt = 'g')\nplt.show()","6be7007a":"false_positive_rate, true_positiv_rate, _= roc_curve(y_test, logreg_predict)\nauc= roc_auc_score(y_test, logreg_predict)\nplt.plot(false_positive_rate, true_positiv_rate, label=\"auc=\"+str(auc))\nplt.box(False)\nplt.title('ROC CURVE')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.grid(True)\nplt.show()\nprint(f\"The score ROC Curve is: {round(auc,3)*100}%\")","48663476":"arrX = ['Dummy Classifier','Decision Tree Classifier','KNN', 'Logistic Regression']\narrY = [ dummy_a,decision_a,knn_a, logreg_a]\nplt.plot (arrX, arrY, linestyle='--',color='purple')\nplt.title(\"Model Accuracy Results Comparison\", fontsize = 18)\nplt.xlabel(\"Model\")\nplt.ylabel(\"Accuracy Score (%)\")\nplt.show()","2718ec57":"#### ROC Curve:","239a256e":"### Dummy Classifier","d44aa62a":"### Attribute Information","7d5df8b1":"#### Remove the ID column as it has no significance\n","8a9f3ebc":"The k values accuracy as a curve","de6cd3dc":"#### ROV Curve:","805def1d":"#### ROC Curve:","68b3fe32":"Let's check for null values","3802cf78":"#### Confusion Matrix:","1da0c0cf":"We can see that the optimal k value is k = 8","64e6a655":"#### Confusion Matrix:","e409059b":"Let's replace the NaN values with the BMI mean value","6c8701c4":"# The end","3c11aab5":"### Divide data into training and testing sets","c04c275d":"Let's check how many people in the data set have had strokes","1586bc08":"Let's check the KNN Classifier's results","39e86d04":"Let's look at a range of k values","cf08b835":"Let's check how many unknown smoking values there are","4338f91f":"## Correlation chart","9ae763f1":"### Replace object values with numeric values","bb4a8ca1":"Confusion Matrix Chart","57e4528a":"Let's check the Logistic Regression's results","5eb067cd":"### KNN Classifier","f09483b8":"### This makes sense since only a small amount of the people in the data actually had strokes.","85a750c6":"#### Confusion Matrix:","e174249c":"### Remove NaN values","956d0e80":"![confusion%20matrix%20chart.png](attachment:confusion%20matrix%20chart.png)","84e3a231":"#### Confusion Matrix:","996d8974":"### Logistic Regression","665dcb9e":" id: unique identifier\n\n gender: \"Male\", \"Female\" or \"Other\"\n\n age: age of the patient\n\n hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension\n\n heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease\n \n ever_married: \"No\" or \"Yes\"\n \n work_type: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"\n \n Residence_type: \"Rural\" or \"Urban\"\n \n avg_glucose_level: average glucose level in blood\n \n bmi: body mass index\n \n smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"*\n \n stroke: 1 if the patient had a stroke or 0 if not\n \n*Note: \"Unknown\" in smoking_status means that the information is unavailable for this patient","e1aebc8c":"Let's check the Decision Tree Classifier's results","eb160176":"### Decision Tree Classifier","ff489a3b":"#### ROC Curve:","5de4e734":"### Import Dataset","8b70245d":"Let's check the Dummy Classifier's results"}}