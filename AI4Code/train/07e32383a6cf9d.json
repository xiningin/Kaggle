{"cell_type":{"7680684b":"code","db9b0244":"code","da373d7d":"code","281600fe":"code","43521221":"code","788d2660":"code","bf5552db":"code","faa8f3a9":"code","05df0709":"code","3143e320":"code","6a7f1fe4":"code","1bb820a7":"code","44b4a3d7":"code","748ccf5b":"code","c06d40b4":"code","825f738e":"code","e607b380":"code","85419839":"code","94d44263":"code","3f753428":"code","b643743e":"markdown","a6dc1bd0":"markdown"},"source":{"7680684b":"import os \nos.listdir('..\/input\/stanford-dogs-dataset')","db9b0244":"#-------Import Dependencies-------#\n%matplotlib inline\nimport pandas as pd\nimport os,shutil,math,scipy,cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random as rn\n\n\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import confusion_matrix,roc_curve,auc\n\nfrom PIL import Image\nfrom PIL import Image as pil_image\nfrom PIL import ImageDraw\n\nfrom time import time\nfrom glob import glob\nfrom tqdm import tqdm\n\nfrom IPython.display import SVG\n\nfrom scipy import misc,ndimage\nfrom scipy.ndimage.interpolation import zoom\n# from scipy.ndimage import imread\nfrom keras import backend as K\nfrom keras.utils.np_utils import to_categorical\nfrom keras import layers\nfrom keras.preprocessing.image import save_img\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.applications.vgg16 import VGG16,preprocess_input\nfrom keras.applications.xception import Xception\nfrom keras.applications.nasnet import NASNetMobile\nfrom keras.models import Sequential,Input,Model\nfrom keras.layers import Dense,Flatten,Dropout,Concatenate,GlobalAveragePooling2D,Lambda,ZeroPadding2D\nfrom keras.layers import SeparableConv2D,BatchNormalization,MaxPooling2D,Conv2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam,SGD\nfrom keras.utils.vis_utils import plot_model\nfrom keras.callbacks import ModelCheckpoint,EarlyStopping,TensorBoard,CSVLogger,ReduceLROnPlateau,LearningRateScheduler","da373d7d":"def label_assignment(img,label):\n    return label\n\ndef training_data(label,data_dir):\n    for img in tqdm(os.listdir(data_dir)):\n        label = label_assignment(img,label)\n        path = os.path.join(data_dir,img)\n        img = cv2.imread(path,cv2.IMREAD_COLOR)\n        img = cv2.resize(img,(imgsize,imgsize))\n        \n        X.append(np.array(img))\n        Z.append(str(label))","281600fe":"#top 10 dog breeds\nchihuahua_dir = '..\/input\/stanford-dogs-dataset\/images\/Images\/n02085620-Chihuahua'\njapanese_spaniel_dir = '..\/input\/stanford-dogs-dataset\/images\/Images\/n02085782-Japanese_spaniel'\nmaltese_dir = '..\/input\/stanford-dogs-dataset\/images\/Images\/n02085936-Maltese_dog'\npekinese_dir = '..\/input\/stanford-dogs-dataset\/images\/Images\/n02086079-Pekinese'\nshitzu_dir = '..\/input\/stanford-dogs-dataset\/images\/Images\/n02086240-Shih-Tzu'\nblenheim_spaniel_dir = '..\/input\/stanford-dogs-dataset\/images\/Images\/n02086646-Blenheim_spaniel'\npapillon_dir = '..\/input\/stanford-dogs-dataset\/images\/Images\/n02086910-papillon'\ntoy_terrier_dir = '..\/input\/stanford-dogs-dataset\/images\/Images\/n02087046-toy_terrier'\nafghan_hound_dir = '..\/input\/stanford-dogs-dataset\/images\/Images\/n02088094-Afghan_hound'\nbasset_dir = '..\/input\/stanford-dogs-dataset\/images\/Images\/n02088238-basset'\n\n\nX = []\nZ = []\nimgsize = 150","43521221":"training_data('chihuahua',chihuahua_dir)\ntraining_data('japanese_spaniel',japanese_spaniel_dir)\ntraining_data('maltese',maltese_dir)\ntraining_data('pekinese',pekinese_dir)\ntraining_data('shitzu',shitzu_dir)\ntraining_data('blenheim_spaniel',blenheim_spaniel_dir)\ntraining_data('papillon',papillon_dir)\ntraining_data('toy_terrier',toy_terrier_dir)\ntraining_data('afghan_hound',afghan_hound_dir)\ntraining_data('basset',basset_dir)","788d2660":"#One hot encoding\nlabel_encoder= LabelEncoder()\nY = label_encoder.fit_transform(Z)\nY = to_categorical(Y,10)\nX = np.array(X)\nX=X\/255\n\nx_train,x_test,y_train,y_test = train_test_split(X,Y,test_size=0.3,random_state=69)","bf5552db":"#total 10 breads have been taken\nfig,ax=plt.subplots(5,2)\nfig.set_size_inches(15,15)\nfor i in range(5):\n    for j in range (2):\n        l=rn.randint(0,len(Z))\n        ax[i,j].imshow(X[l])\n        ax[i,j].set_title('Dog: '+Z[l])\n        \nplt.tight_layout()","faa8f3a9":"from keras.applications.mobilenet import MobileNet","05df0709":"base_model=MobileNet(include_top=False,alpha=1.0,weights='imagenet',input_shape=(imgsize,imgsize,3))","3143e320":"for layer in base_model.layers:\n    layer.trainable = False","6a7f1fe4":"x=base_model.output\nx=GlobalAveragePooling2D()(x)\nx=Dense(1024,activation='relu')(x)\nx=Dense(1024,activation='relu')(x)\nx=Dense(512,activation='relu')(x)\npreds=Dense(10,activation='softmax')(x)","1bb820a7":"model = Model(inputs=base_model.input, outputs=preds)","44b4a3d7":"model.summary()","748ccf5b":"model.compile(optimizer='Adam',loss='categorical_crossentropy',metrics=['accuracy'])\n# Adam optimizer\n# loss function will be categorical cross entropy\n# evaluation metric will be accuracy\n# history=model.fit(x_train,y_train,epochs=20,validation_data=(x_test,y_test),batch_size=32)","c06d40b4":"# model.compile(optimizer=tf.keras.optimizers.Adam(lr=0.001),loss='binary_crossentropy',metrics=['acc'])\n# history = model.fit_generator(training_generator,validation_data = validation_generator,epochs = 20, verbose = 1)","825f738e":"datagen=ImageDataGenerator(\n    featurewise_center=True,\n    featurewise_std_normalization=True,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True)","e607b380":"checkpoint = ModelCheckpoint(\n    '.\/base.model',\n    monitor='val_loss',\n    verbose=1,\n    save_best_only=True,\n    mode='min',\n    save_weights_only=False,\n    period=1\n)\nearlystop = EarlyStopping(\n    monitor='val_loss',\n    min_delta=0.001,\n    patience=30,\n    verbose=1,\n    mode='auto'\n)\ntensorboard = TensorBoard(\n    log_dir = '.\/logs',\n    histogram_freq=0,\n    batch_size=16,\n    write_graph=True,\n    write_grads=True,\n    write_images=False,\n)\n\ncsvlogger = CSVLogger(\n    filename= \"training_csv.log\",\n    separator = \",\",\n    append = False\n)\n\nreduce = ReduceLROnPlateau(\n    monitor='val_loss',\n    factor=0.1,\n    patience=3,\n    verbose=1, \n    mode='auto'\n    )\n\ncallbacks = [checkpoint,tensorboard,csvlogger,reduce]","85419839":"datagen.fit(x_train)","94d44263":"model.fit(datagen.flow(x_train, y_train, batch_size=32),\n          steps_per_epoch=len(x_train) \/ 32, epochs=20,callbacks=callbacks)","3f753428":"score_1 = model.evaluate(x_test,y_test)","b643743e":"# When we use Data Augmentation","a6dc1bd0":"**Data Augmentation**"}}