{"cell_type":{"1caeaf84":"code","7a0413f3":"code","4920d3b0":"code","72a11ccf":"code","eef5be43":"code","7822765a":"code","379d7916":"code","2aaee6cb":"code","30b20d18":"code","945194b1":"code","3c648976":"code","6ce0dca3":"code","44d33ae3":"code","ff748c31":"code","af0e5b66":"code","55b60aff":"code","d7407800":"code","f6251b8b":"code","48b49b54":"code","025387f9":"code","da3959c1":"code","9ae3cfc9":"code","ebc02e14":"code","c37a87ab":"code","0dc5a013":"code","b5f88ee9":"code","36519a5c":"code","0083832f":"code","d1ad15d0":"code","751fb751":"code","93a02585":"code","074b5d9e":"code","694eea59":"code","d119c88a":"code","cce542de":"code","0f4ada05":"code","9d9e1bc9":"code","ed87fa63":"markdown","d7026d03":"markdown","0f5f3ee1":"markdown","60bd146a":"markdown","7c6c5afe":"markdown","517f3e9f":"markdown","6a68885b":"markdown","fbf42957":"markdown","1427d89b":"markdown","7bea72a1":"markdown","4e0378a2":"markdown","a94e9688":"markdown","4fe0b8db":"markdown","eb29f678":"markdown","410403bf":"markdown","a8fa209d":"markdown","19853fa9":"markdown","f9cb326b":"markdown"},"source":{"1caeaf84":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_recall_fscore_support as error_metric\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.feature_selection import VarianceThreshold","7a0413f3":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","4920d3b0":"train.head()","72a11ccf":"test.head()","eef5be43":"#Check for null values\ntrain.isnull().values.any()","7822765a":"test.isnull().values.any()","379d7916":"train.drop('subject', axis =1, inplace=True)\ntest.drop('subject', axis =1, inplace=True)","2aaee6cb":"train.head()","30b20d18":"rem_cols2 = test.columns.tolist()","945194b1":"# We check the datatypes \ntrain.dtypes.value_counts()","3c648976":"test.dtypes.value_counts()","6ce0dca3":"train.describe()  #we see that the min = -1 and the max = +1. so no need for scaling","44d33ae3":"train.dtypes.tail()","ff748c31":"object_feature = train.dtypes == np.object\nobject_feature = train.columns[object_feature]\nobject_feature","af0e5b66":"train.Activity.value_counts()","55b60aff":"le = LabelEncoder()\nfor x in [train, test]:\n    x['Activity'] = le.fit_transform(x.Activity)\n    ","d7407800":"train.Activity.sample(5)","f6251b8b":"test.Activity.sample(5)","48b49b54":"feature_cols = train.columns[: -1]   #exclude the Activity column\n#Calculate the correlation values\ncorrelated_values = train[feature_cols].corr()\n#stack the data and convert to a dataframe\n\ncorrelated_values = (correlated_values.stack().to_frame().reset_index()\n                    .rename(columns={'level_0': 'Feature_1', 'level_1': 'Feature_2', 0:'Correlations'}))\ncorrelated_values.head()","025387f9":"#create an abs_correlation column\ncorrelated_values['abs_correlation'] = correlated_values.Correlations.abs()\ncorrelated_values.head()","da3959c1":"#Picking most correlated features\ntrain_fields = correlated_values.sort_values('Correlations', ascending = False).query('abs_correlation>0.8')\ntrain_fields.sample(5)","9ae3cfc9":"#Getting the split indexes\n\nsplit_data = StratifiedShuffleSplit(n_splits = 1, test_size = 0.3, random_state = 42)\ntrain_idx, val_idx = next(split_data.split(train[feature_cols], train.Activity))\n\n#creating the dataframes\n\nx_train = train.loc[train_idx, feature_cols]\ny_train = train.loc[train_idx, 'Activity']\n\nx_val = train.loc[val_idx, feature_cols]\ny_val = train.loc[val_idx, 'Activity']","ebc02e14":"y_train.value_counts(normalize = True)","c37a87ab":"y_val.value_counts(normalize = True)","0dc5a013":"#Same ratio of classes in both the train and validation data thanks to StratifiedShuffleSPlit","b5f88ee9":"lr = LogisticRegression()\nlr_l2 = LogisticRegressionCV(Cs=10, cv=4, penalty='l2')\nrf = RandomForestClassifier(n_estimators = 10)\n\nlr = lr.fit(x_train, y_train)\n\nrf = rf.fit(x_train, y_train)\n\nlr_l2 = lr_l2.fit(x_train, y_train)\n","36519a5c":"#predict the classes and probability  for each\n\ny_predict = list()\ny_proba = list()\n\nlabels = ['lr', 'lr_l2', 'rf']\nmodels = [lr, lr_l2, rf]\n\nfor lab, mod in zip(labels, models):\n    y_predict.append(pd.Series(mod.predict(x_val), name = lab))\n    y_proba.append(pd.Series(mod.predict_proba(x_val).max(axis=1), name = lab))\n    #.max(axis = 1) for a 1 dimensional dataframe\n\ny_predict = pd.concat(y_predict, axis = 1)\ny_proba = pd.concat(y_proba, axis = 1)\n\ny_predict.head()","0083832f":"y_proba.head(10)","d1ad15d0":"metrics = list()\nconfusion_m = dict()\n\nfor lab in labels:\n    precision, recall, f_score, _ = error_metric(y_val, y_predict[lab], average = 'weighted')\n    \n    accuracy = accuracy_score(y_val, y_predict[lab])\n    \n    confusion_m[lab] = confusion_matrix(y_val, y_predict[lab])\n    \n    metrics.append(pd.Series({'Precision': precision, 'Recall': recall,\n                            'F_score': f_score, 'Accuracy': accuracy}, name = lab))\n    \nmetrics= pd.concat(metrics, axis =1) ","751fb751":"metrics","93a02585":"fig, axList = plt.subplots(nrows=2, ncols=2)\naxList = axList.flatten()\nfig.set_size_inches(12, 10)\n\naxList[-1].axis('off')\n\nfor ax,lab in zip(axList[:-1], labels):\n    sns.heatmap(confusion_m[lab], ax=ax, annot=True, fmt='d');\n    ax.set(title=lab);\n    \nplt.tight_layout()","074b5d9e":"#Remeber>..\ntrain_fields.sample(5)","694eea59":"#Getting the features with high Variance and split the data into train and test\n\nlow_var = VarianceThreshold(threshold=(0.8 * (1 - 0.8)))\n\ntrain2 = pd.concat([x_train,x_val])\ntrain_new = pd.DataFrame(low_var.fit_transform(train2))\n                         \ntest_new = pd.concat([y_train,y_val])\n\n                         \nx_new,x_val_new = train_test_split(train_new)\ny_new,y_val_new = train_test_split(test_new)","d119c88a":"lr_new = lr.fit(x_new, y_new)\n\nlr_l2_new = lr_l2.fit(x_new, y_new)","cce542de":"#predict the classes and probability  for each\n\ny_predict_new = list()\ny_proba_new = list()\n\nlabels_new = ['lr_new', 'lr_l2_new']\nmodels_new = [lr_new, lr_l2_new]\n\nfor lab, mod in zip(labels_new, models_new):\n    y_predict_new.append(pd.Series(mod.predict(x_val_new), name = lab))\n    y_proba_new.append(pd.Series(mod.predict_proba(x_val_new).max(axis=1), name = lab))\n    #.max(axis = 1) for a 1 dimensional dataframe\n\ny_predict_new = pd.concat(y_predict_new, axis = 1)\ny_proba_new = pd.concat(y_proba_new, axis = 1)\n\ny_predict_new.head()","0f4ada05":"y_proba_new.head()","9d9e1bc9":"metrics_new = list()\ncon_mat = dict()\n\nfor lab in labels_new:\n    precision, recall, f_score, _ = error_metric(y_val_new, y_predict_new[lab], average = 'weighted')\n    \n    accuracy = accuracy_score(y_val_new, y_predict_new[lab])\n    \n    con_mat[lab] = confusion_matrix(y_val, y_predict[lab])\n    \n    metrics_new.append(pd.Series({'precision': precision, 'recall': recall,\n                            'f_score': f_score, 'accuracy': accuracy}, name = lab))\n    \nmetrics_new= pd.concat(metrics_new, axis =1) \n","ed87fa63":"Observation: \n\nWe can see that the Logistic regression with L2 regularization gives slightly better error metric than the other models. In part 2 of this porject, we will look at the effect of correlation on the error metrics. The question we ask here is:\n\nWhat happens when we discard the most correlated feature? do we have a better model or not?\n\nwe will discard the features whose threshold is less that 0.8 that is, features with low variance. We will be using the sklearn feature_selection method VarianceThreshold.\n        ","d7026d03":"The subject column is not going to be usefull here so i will drop it from both data sets","0f5f3ee1":"\nWORK PLAN\n\nIn this Project:\n* Import the necessary Libraries\n* Load and analyse the data\n* Find Correlations among the faetures\n* Split the data into train and test data(validation data)\n* Predict the activity using Logistic Regression and Logisctic Regression CV\n* Calculate the Classification error metrics \n* Feature selection to pick the best features for the a better prediction\n* Calculate the new classification error metric\n* Compare 6 and 8 above to get the best model\n* Conclusion and submission","60bd146a":"## PART 2 - Feature_selection: Discarding the Most Correlated Features","7c6c5afe":"As we can see, the only object data type in both train and the test dataset is the Activity feature. Lets take a closer look at it...","517f3e9f":"I am using the Kaggle data which can be found here:\n\nhttps:\/\/www.kaggle.com\/uciml\/human-activity-recognition-with-smartphones\/downloads\/human-activity-recognition-with-smartphones.zip  ","6a68885b":"We need to encode the Activity column becasue sklearn won't accept sparse matrix as prediction columns . WEe will use LabelEncoder to encode the Activities ","fbf42957":"## Predictive Models","1427d89b":"## 3- Finding the Correlation\/ Relationships between the features\n\nCorrelation refers to the mutual relationship and association between quantities and it is generaly used to express one quantity in terns of its relationship with other quantities. The can either be Positive(variables change in the same direction), negative(variables change in opposite direction or neutral(No correlation).\n\nVariable within a dataset can be related in lots of ways and for lost of reasons:\n    - They could depend on values of other variable\n    - They could be associated to each other\n    - They could both depend on a thirf variable.\n    \nIn this project, we will be using the pandas method .corr() for calculating correlation between dataframe columns","7bea72a1":"****Should we rescale the data? Scaling a dataset usually produces better dataset and more accurate predictions. First we check the range( the min and the max) for each of the datasets. Lets try using the .describe() method and lets exclude the activity column which is the last column. ****","4e0378a2":"## 5 - Predictive Modelling","a94e9688":"## 4 - Splitting the data into train and validation ","4fe0b8db":"There are no null values in either the test and the train datasets","eb29f678":"## Calculating the error metrics","410403bf":"They have the same data types. That is, mostly floats and one object feature. Lets see what the object feature is abd extract it from the rest","a8fa209d":"## 2 - Load and analyse the data","19853fa9":"## 6 - Calculating the Error Metrics","f9cb326b":"## 1 - Importing thr Necessary Libraries"}}