{"cell_type":{"94cc0687":"code","d26d6920":"code","83052a0f":"code","8be40170":"code","96c6395a":"code","f8b523cf":"code","76a187fd":"code","278d8dd8":"code","0d3f9deb":"code","dba1c721":"code","bb7538f7":"code","3c913650":"code","90339ccf":"code","646bb4c6":"markdown","a15ddd84":"markdown","1bbc2d9b":"markdown","aa9a97df":"markdown","99bd44e0":"markdown","1fc7eb7b":"markdown","49212ebd":"markdown","5f478bf6":"markdown"},"source":{"94cc0687":"#install jcopml --> %pip install jcopml\n%pip install jcopml","d26d6920":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\n\n\nfrom jcopml.pipeline import num_pipe, cat_pipe\nfrom jcopml.utils import save_model, load_model\nfrom jcopml.plot import plot_missing_value\nfrom jcopml.feature_importance import mean_score_decrease\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","83052a0f":"df = pd.read_csv(\"\/kaggle\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv\", index_col=\"Serial No.\")\ndf.head()","8be40170":"X = df.drop(columns=\"Chance of Admit \")\ny = df[\"Chance of Admit \"]","96c6395a":"from jcopml.automl import AutoRegressor","f8b523cf":"# Training with AutoRegressor\nmodel = AutoRegressor([\"GRE Score\", \"TOEFL Score\", \"CGPA\", \"SOP\", \"LOR \"], [\"University Rating\", \"Research\"])\nmodel.fit(X, y, cv=5, n_trial=100)","76a187fd":"X = df.drop(columns=\"Chance of Admit \")\ny = df[\"Chance of Admit \"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","278d8dd8":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom jcopml.tuning import random_search_params as rsp","0d3f9deb":"# Training with RandomForest Algorithm\npreprocessor = ColumnTransformer([\n    ('numeric', num_pipe(), [\"GRE Score\", \"TOEFL Score\", \"SOP\", \"LOR \", \"CGPA\"]),\n    ('categoric', cat_pipe(encoder='onehot'), [\"University Rating\", \"Research\"]),\n])\n\n\npipeline = Pipeline([\n    ('prep', preprocessor),\n    ('algo', RandomForestRegressor(n_jobs=-1, random_state=42))\n])\n\nmodel = RandomizedSearchCV(pipeline, rsp.rf_params, cv=3, n_iter=50, n_jobs=-1, verbose=1, random_state=42)\nmodel.fit(X_train, y_train)\n\nprint(model.best_params_)\nprint(model.score(X_train, y_train), model.best_score_, model.score(X_test, y_test))","dba1c721":"from sklearn.linear_model import ElasticNet\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom jcopml.tuning import random_search_params as rsp","bb7538f7":"# Training with Elasticnet Algorithm\npreprocessor = ColumnTransformer([\n    ('numeric', num_pipe(), [\"GRE Score\", \"TOEFL Score\", \"SOP\", \"LOR \", \"CGPA\"]),\n    ('categoric', cat_pipe(encoder='onehot'), [\"University Rating\", \"Research\"]),\n])\n\n\npipeline = Pipeline([\n    ('prep', preprocessor),\n    ('algo', ElasticNet())\n])\n\nmodel = RandomizedSearchCV(pipeline, rsp.enet_params, cv=3, n_iter=50, n_jobs=-1, verbose=1, random_state=42)\nmodel.fit(X_train, y_train)\n\nprint(model.best_params_)\nprint(model.score(X_train, y_train), model.best_score_, model.score(X_test, y_test))","3c913650":"from jcopml.utils import save_model","90339ccf":"save_model(model, \"graduate_admission_v1.pkl\")","646bb4c6":"# Benchmark with AutoML","a15ddd84":"# Import Data","1bbc2d9b":"# Data Splitting","aa9a97df":"# Training","99bd44e0":"# Dataset Splitting (continuing)","1fc7eb7b":"Benchmark Score is\n\n=========== Score ===========\n- Train: 0.8205011218568327\n- Valid: 0.8092720744925209\n- Test : 0.8165479313947287","49212ebd":"# Final Result\n\nBenchmark Score is\n\n=========== Score ===========\n- Train: 0.8205011218568327\n- Valid: 0.8092720744925209\n- Test : 0.8165479313947287\n\n\n\nRandom Forest Algo\n\n=========== Score ===========\n- Train: 0.849401359840304\n- Valid: 0.8005940881739319\n- Test : 0.8091796323787092\n\n\n\nElasticnet Algo\n\n=========== Score ===========\n- Train: 0.8200322203226443\n- Valid: 0.8086927815997776\n- Test : 0.8163406468720726\n","5f478bf6":"# Save Model"}}