{"cell_type":{"00540ca7":"code","aa822f33":"code","41f87269":"code","1d025f12":"code","50303d18":"code","ea4b9167":"code","2caea141":"code","53247f90":"code","af41174b":"code","ce8150f0":"code","b43189d6":"code","8f875b4d":"code","c8e224b2":"code","a98239ef":"code","77ba1b5e":"code","44b21134":"code","a13daf5c":"code","980e87ae":"code","9fc376bb":"code","a838dbc5":"code","ff224145":"code","83ae8700":"code","ea540093":"code","f1fa16da":"code","13040ba0":"code","6c5a75a9":"markdown"},"source":{"00540ca7":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","aa822f33":"dataset = pd.read_csv('..\/input\/predict-loan-approval-problem\/train_u6lujuX_CVtuZ9i.csv')\nprint('dataset :\\n',dataset.head(5))","41f87269":"dataset.drop(['Loan_ID'],axis=1,inplace=True)","1d025f12":"import statistics\ndataset['Gender'] = dataset['Gender'].replace(np.nan,statistics.mode(dataset[\"Gender\"]))\ndataset['Married'] = dataset['Married'].replace(np.nan,statistics.mode(dataset[\"Married\"]))\ndataset['Dependents'] = dataset['Dependents'].replace(np.nan,statistics.mode(dataset[\"Dependents\"]))\ndataset['Self_Employed'] = dataset['Self_Employed'].replace(np.nan,statistics.mode(dataset[\"Self_Employed\"]))\ndataset['Credit_History'] = dataset['Credit_History'].replace(np.nan,statistics.mode(dataset[\"Credit_History\"]))\n\ndataset['LoanAmount'] = dataset['LoanAmount'].replace(np.nan,dataset['LoanAmount'].median())\ndataset['Loan_Amount_Term'] = dataset['Loan_Amount_Term'].replace(np.nan,dataset['Loan_Amount_Term'].median())","50303d18":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ndataset['Gender'] = dataset['Gender'].map({'Male':1,'Female':0}) \ndataset['Married'] = dataset['Married'].map({'Yes':1,'No':0}) \ndataset['Education'] = dataset['Education'].map({'Graduate':1,'Not Graduate':0}) \ndataset['Self_Employed'] = dataset['Self_Employed'].map({'Yes':1,'No':0}) \ndataset['Loan_Status'] = dataset['Loan_Status'].map({'Y':1,'N':0}) \ndataset['Property_Area'] = dataset['Property_Area'].map({'Rural':0,'Urban':1,'Semiurban':2}) \n\ndataset['Dependents'] = le.fit_transform(dataset['Dependents'])","ea4b9167":"dataset = pd.concat([dataset, pd.get_dummies(dataset['Dependents'], prefix='Dependents')], axis=1)\ndataset = pd.concat([dataset, pd.get_dummies(dataset['Property_Area'], prefix='Property_Area')], axis=1)","2caea141":"dataset.drop(['Dependents','Property_Area'],axis=1,inplace=True)","53247f90":"y = dataset['Loan_Status'].values\ndataset = dataset.drop('Loan_Status',axis=1,inplace=False)\nX = dataset.values","af41174b":"one_column = np.ones((X.shape[0],1))\nX = np.concatenate((one_column, X), axis = 1)","ce8150f0":"y=np.reshape(y,(y.shape[0],1))\ntheta2 = np.zeros(X.shape[1])","b43189d6":"print(X.shape)\nprint(y.shape)\nprint(theta2.shape)","8f875b4d":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX[:,1:] = sc.fit_transform(X[:,1:])","c8e224b2":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=22)","a98239ef":"def sigmoid(z):\n    return 1 \/ (1 + np.exp(-z))\nn = np.arange(-20,20,step=1)\nplt.figure(figsize=(8,5))\nplt.plot(n,sigmoid(n),color='red')","77ba1b5e":"#y_train=np.reshape(y_train,(y_train.shape[0],1))","44b21134":"def costReg(theta2, X2, y2,lr):\n    theta2 = np.matrix(theta2)\n    X2 = np.matrix(X2)\n    y2 = np.matrix(y2)\n    first = np.multiply(-y2, np.log(sigmoid(X2 * theta2.T)))\n    second = np.multiply((1 - y2), np.log(1 - sigmoid(X2 * theta2.T)))\n    total_equation=np.sum(first - second) \/ (len(X2))\n    reg = (lr \/ 2 * len(X2)) * np.sum(np.power(theta2[:,1:theta2.shape[1]], 2))\n    final = total_equation + reg\n    return final ","a13daf5c":"# Graphically, the Cost function looks like so:\nnums = np.arange(0, 1, step=.01)\n\nfig, ax = plt.subplots(figsize=(13,7))\n\nax.plot(nums, np.multiply(1, -np.log(nums)), c='r', label='If y = 1')\nax.plot(nums, np.multiply(1, -np.log(1-nums)), c='b', label='If y = 0')\nax.set_xlabel('h(x)')\nax.set_ylabel('Cost(h(x), y)')\nax.legend(loc='upper center')","980e87ae":"def gradientReg(theta, X, y, learningRate):\n    theta = np.matrix(theta)\n    X = np.matrix(X)\n    y = np.matrix(y)\n    \n    parameters = int(theta.ravel().shape[1])\n    grad = np.zeros(parameters)\n    \n    error = sigmoid(X * theta.T) - y\n    \n    for i in range(parameters):\n        term = np.multiply(error, X[:,i])\n        \n        if (i == 0):\n            grad[i] = np.sum(term) \/ len(X)\n\n        else:\n            grad[i] =(np.sum(term)\/len(X))+((learningRate\/len(X))*theta[:,i])\n\n    return grad\n\nlearningRate = 0.000001\n\n\nrcost = costReg(theta2, X_train, y_train, learningRate)\nprint()\nprint('regularized cost = ' , rcost)\nprint()\n\n","9fc376bb":"import scipy.optimize as opt\nresult = opt.fmin_tnc(func=costReg, x0=theta2, fprime=gradientReg,args=(X_train, y_train, learningRate))\nprint( 'result = ' , result )\nprint()\nCost_After_Optimize = costReg(result[0], X_train, y_train,learningRate)\nprint()\nprint('Cost_Function After Optimize = ' , Cost_After_Optimize)\nprint()","a838dbc5":"print('Number of iterations :',result[1])","ff224145":"def predict(theta, X):\n    probability = sigmoid(X * theta.T)\n    return [1 if x >= 0.5 else 0 for x in probability]\n\ntheta_min = np.matrix(result[0])\npredictions = predict(theta_min, X_test)\ncorrect = [1 if ((a == 1 and b == 1) or (a == 0 and b == 0)) else 0 for (a, b) in zip(predictions, y_test)]\nprint('Accuracy',np.sum(correct)\/ len(correct) *100) ","83ae8700":"from sklearn.metrics import confusion_matrix\ncm  = confusion_matrix(y_test,predictions)\nprint(cm)","ea540093":"plt.figure(figsize=(8,5))\nsns.heatmap(cm,annot=True)\nplt.show()","f1fa16da":"from sklearn.metrics import classification_report\ncr = classification_report(y_test,predictions)\nprint(cr)","13040ba0":"from sklearn.metrics import roc_curve,auc\ntpr_LR,fpr_LR,threshold_LR = roc_curve(y_test,predictions)\nprint('tpr_LR: ',tpr_LR)\nprint('fpr_LR: ',fpr_LR)\nprint('threshold_LR:',threshold_LR)\n\nauc_LR = auc(tpr_LR,fpr_LR)\nprint('Area Under The Curve :',auc_LR)\n\n#Draw ROC Curve && AUC [Area Under The Curve]\nplt.figure(figsize=(10,8))\nplt.plot(tpr_LR,fpr_LR,marker='o',color='blue',label='Logistic Regression (auc = %0.3f)'% auc_LR)\nplt.ylabel('True Positive Rate -->')\nplt.xlabel('False Positive Rate -->')\n\nplt.legend()\nplt.show()","6c5a75a9":"\n\n> Logistic Regression Implementation [ From Scratch ] Without Library \ud83d\udd1d\n\n> Classification by Regularizationn\n"}}