{"cell_type":{"8bd8d737":"code","57ceebb5":"code","a1d66d88":"code","8df07057":"code","163ba803":"code","db556ba0":"code","87db0b74":"code","8984f085":"code","1f36e312":"code","e1b07739":"code","7b9145d2":"code","8612c9c3":"code","ef6398b1":"code","f0a48dad":"code","06c7119f":"code","ec1fa26c":"code","1c45c136":"code","00ac29b3":"code","a6911679":"code","63865a18":"markdown","001a3228":"markdown","410e460e":"markdown","3f45605e":"markdown","129e4ac4":"markdown","5cb19e16":"markdown","c30ddd09":"markdown","6c6f2231":"markdown","ad44a93a":"markdown","e7a078e8":"markdown","8b45330a":"markdown"},"source":{"8bd8d737":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","57ceebb5":"import tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport seaborn as sns","a1d66d88":"ops=pd.read_csv(\"\/kaggle\/input\/opsd_germany_daily.csv\")","8df07057":"uni_data = ops['Consumption']\nuni_data.index = ops['Date']\nuni_data.head()","163ba803":"def univariate_data(dataset, start_index, end_index, history_size, target_size):\n  data = []\n  labels = []\n\n  start_index = start_index + history_size\n  if end_index is None:\n    end_index = len(dataset) - target_size\n\n  for i in range(start_index, end_index):\n    indices = range(i-history_size, i)\n    # Reshape data from (history_size,) to (history_size, 1)\n    data.append(np.reshape(dataset[indices], (history_size, 1)))\n    labels.append(dataset[i+target_size])\n  return np.array(data), np.array(labels)","db556ba0":"uni_data.plot(subplots=True)","87db0b74":"TRAIN_SPLIT = 960","8984f085":"tf.random.set_seed(13)","1f36e312":"uni_data = uni_data.values","e1b07739":"uni_train_mean = uni_data[:TRAIN_SPLIT].mean()\nuni_train_std = uni_data[:TRAIN_SPLIT].std()","7b9145d2":"uni_data = (uni_data-uni_train_mean)\/uni_train_std","8612c9c3":"univariate_past_history = 8\nunivariate_future_target = 0\n\nx_train_uni, y_train_uni = univariate_data(uni_data, 0, TRAIN_SPLIT,\n                                           univariate_past_history,\n                                           univariate_future_target)\nx_val_uni, y_val_uni = univariate_data(uni_data, TRAIN_SPLIT, None,\n                                       univariate_past_history,\n                                       univariate_future_target)","ef6398b1":"x_train_uni.shape","f0a48dad":"print ('Single window of past history')\nprint (x_train_uni[0])\nprint ('\\n Target temperature to predict')\nprint (y_train_uni[0])","06c7119f":"simple_RNN_model = tf.keras.models.Sequential([\n    tf.keras.layers.SimpleRNN(20,return_sequences=True, input_shape=x_train_uni.shape[-2:]),\n    keras.layers.SimpleRNN(20),\n    tf.keras.layers.Dense(1)\n])\n\nsimple_RNN_model.compile(optimizer='adam', loss='mae')","ec1fa26c":"history = simple_RNN_model.fit(x_train_uni, y_train_uni, epochs=100,\n                     batch_size=30,\n                      validation_data=(x_val_uni, y_val_uni))","1c45c136":"import pandas as pd\nimport matplotlib.pyplot as plt\npd.DataFrame(history.history).plot(figsize=(8, 5))\nplt.grid(True)\nplt.gca().set_ylim(0.15, .5) # set the vertical range to [0-1]\nplt.show()","00ac29b3":" def prediction_plot(testY, test_predict):\n      len_prediction=[x for x in range(len(testY))]\n      plt.figure(figsize=(8,4))\n      plt.plot(len_prediction, testY, marker='.', label=\"actual\")\n      plt.plot(len_prediction, test_predict, 'r', label=\"prediction\")\n      plt.tight_layout()\n      sns.despine(top=True)\n      plt.subplots_adjust(left=0.07)\n      plt.ylabel('Power Consumption', size=15)\n      plt.xlabel('Time step', size=15)\n      plt.legend(fontsize=15)\n      plt.show();","a6911679":"y_pred = simple_RNN_model.predict(x_val_uni)\nprediction_plot(y_val_uni,y_pred)","63865a18":"Thankful to The TensorFlow Authors.","001a3228":"# Time series forecasting","410e460e":"Let's now create the data for the univariate model. For part 1, the model will be given the last 20 recorded temperature observations, and needs to learn to predict the temperature at the next time step. ","3f45605e":"Let's standardize the data.","129e4ac4":"You will see the LSTM requires the input shape of the data it is being given.","5cb19e16":"### Recurrent neural network\n\nA Recurrent Neural Network (RNN) is a type of neural network well-suited to time series data. RNNs process a time series step-by-step, maintaining an internal state summarizing the information they've seen so far. For more details, read the [RNN tutorial](https:\/\/www.tensorflow.org\/tutorials\/sequences\/recurrent). In this tutorial, you will use a specialized RNN layer called Long Short Term Memory ([LSTM](https:\/\/www.tensorflow.org\/versions\/r2.0\/api_docs\/python\/tf\/keras\/layers\/LSTM))\n\nLet's now use `tf.data` to shuffle, batch, and cache the dataset.","c30ddd09":"Now that the data has been created, let's take a look at a single example. The information given to the network is given in blue, and it must predict the value at the red cross.","6c6f2231":"Let's make a sample prediction, to check the output of the model. ","ad44a93a":"This is what the `univariate_data` function returns.","e7a078e8":"Let's train the model now. Due to the large size of the dataset, in the interest of saving time, each epoch will only run for 200 steps, instead of the complete training data as normally done.","8b45330a":"This tutorial is an introduction to time series forecasting using Recurrent Neural Networks (RNNs). This is covered in two parts: first, you will forecast a univariate time series, then you will forecast a multivariate time series."}}