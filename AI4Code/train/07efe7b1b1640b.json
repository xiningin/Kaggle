{"cell_type":{"2aa2feb7":"code","e08352e9":"code","a1fea596":"code","67fb4e54":"code","2b61cb83":"code","46aa7c2a":"code","8efa6a42":"code","3c2b4d86":"code","d6ba0c97":"code","8f8aacd3":"code","5f27f7a5":"code","a2614754":"code","f8bc91c7":"code","d0900282":"code","ff7de61f":"code","fe6602fc":"code","89e306b3":"code","dd8d2be8":"code","f7545355":"code","1c99a123":"code","4e14b3f8":"code","f3f4f570":"code","be50d2cf":"code","da9c34c7":"code","ed330179":"code","b88f5d69":"code","49530f84":"code","d0337d84":"code","36a844f2":"code","e0fcbb7c":"code","018f7cd8":"code","9355d535":"code","897058ee":"code","efcbb354":"code","67d1c11f":"code","e77b5bb5":"code","39b3a0ff":"code","f7705b74":"markdown","abedd6e9":"markdown","929fa155":"markdown","d3c66fdc":"markdown","36488781":"markdown","56114c33":"markdown","c536a1e8":"markdown","37808c99":"markdown","672fdffd":"markdown","5a72b05d":"markdown","c1465e65":"markdown","8e00af3d":"markdown","95fdff7b":"markdown","14f4c43a":"markdown"},"source":{"2aa2feb7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e08352e9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom nltk.tokenize import RegexpTokenizer  \nfrom nltk.stem.snowball import SnowballStemmer\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.feature_extraction.text import CountVectorizer  \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import make_pipeline","a1fea596":"df= pd.read_csv(\"..\/input\/phishing-site-urls\/phishing_site_urls.csv\")","67fb4e54":"df.head()","2b61cb83":"df.isnull().sum()","46aa7c2a":"df.describe()","8efa6a42":"df = df.drop_duplicates()","3c2b4d86":"sns.countplot(x=\"Label\",data=df)","d6ba0c97":"tokenizer = RegexpTokenizer(r'[A-Za-z]+')","8f8aacd3":"df['text_tokenized'] = df.URL.map(lambda t: tokenizer.tokenize(t))","5f27f7a5":"df.head()","a2614754":"root_words = SnowballStemmer(\"english\")\ndf['root_words'] = df['text_tokenized'].map(lambda l: [root_words.stem(word) for word in l])","f8bc91c7":"df.head()","d0900282":"df['text_sent'] = df['root_words'].map(lambda l: ' '.join(l))\ndf.head()","ff7de61f":"bad_sites = df[df.Label == 'bad']\ngood_sites = df[df.Label == 'good']\nbad_sites.head()\n","fe6602fc":"good_sites.head()","89e306b3":"print(list(STOPWORDS)[:10])","dd8d2be8":"data = good_sites.text_sent\ndata.reset_index(drop=True, inplace=True)\ntext = str(data)\n\n\nstopwords = set(STOPWORDS).union({'com','http','www'})  \nwordcloud = WordCloud(width = 800, height = 800, background_color ='white', stopwords = stopwords, max_words = 400, min_font_size = 10).generate(text)\n  \n               \nplt.figure(figsize = (8, 8), facecolor = None)\nplt.imshow(wordcloud)\nplt.title(\"Most common words used in Good Urls\", fontdict={'size': 20, 'color': 'navy', 'verticalalignment': 'bottom'})\nplt.axis(\"off\")\nplt.tight_layout(pad = 0)\n  \nplt.show()","f7545355":"data = bad_sites.text_sent\ndata.reset_index(drop=True, inplace=True)\ntext = str(data)\n\n\nstopwords = set(STOPWORDS).union({'com','http','www'})  \nwordcloud = WordCloud(width = 800, height = 800, background_color ='white', stopwords = stopwords, max_words = 400, min_font_size = 10).generate(text)\n  \n               \nplt.figure(figsize = (8, 8), facecolor = None)\nplt.imshow(wordcloud)\nplt.title(\"Most common words used in Bad Urls\", fontdict={'size': 20, 'color': 'navy', 'verticalalignment': 'bottom'})\nplt.axis(\"off\")\nplt.tight_layout(pad = 0)\n  \nplt.show()","1c99a123":"c = CountVectorizer()\ncv = c.fit_transform(df.text_sent)","4e14b3f8":"print(list(c.vocabulary_)[:10])","f3f4f570":"print('The length of vocabulary', len(c.get_feature_names()))\nprint('The shape is', cv.shape)\n\n#This means 507196 unique urls are there in the dataset and 350837 unique words in the dataset","be50d2cf":"Xtrain, Xtest, Ytrain, Ytest = train_test_split(cv, df.Label,test_size=0.3, random_state=5)","da9c34c7":"model = KNeighborsClassifier(n_neighbors=2)\nmodel.fit(Xtrain, Ytrain)\nprint(model)","ed330179":"model.score(Xtest, Ytest)","b88f5d69":"ypred = model.predict(Xtest)","49530f84":"con_mat = pd.DataFrame(confusion_matrix(ypred, Ytest),columns = ['Predicted:Bad', 'Predicted:Good'],index = ['Actual:Bad', 'Actual:Good'])\nplt.figure(figsize= (6,4))\nsns.heatmap(con_mat, annot = True,fmt='g', cmap=\"Blues\", annot_kws = {'size': 14})","d0337d84":"print('\\nCLASSIFICATION REPORT\\n')\nprint(classification_report(ypred, Ytest, target_names =['Bad','Good']))","36a844f2":"lr = LogisticRegression(max_iter=507197)\nlr.fit(Xtrain,Ytrain)","e0fcbb7c":"lr.score(Xtest,Ytest)","018f7cd8":"ypred = lr.predict(Xtest)","9355d535":"con_mat = pd.DataFrame(confusion_matrix(ypred, Ytest),columns = ['Predicted:Bad', 'Predicted:Good'],index = ['Actual:Bad', 'Actual:Good'])\nplt.figure(figsize= (6,4))\nsns.heatmap(con_mat, annot = True,fmt='g', cmap=\"Blues\", annot_kws = {'size': 14})","897058ee":"print('\\nCLASSIFICATION REPORT\\n')\nprint(classification_report(ypred, Ytest, target_names =['Bad','Good']))","efcbb354":"Xtrain, Xtest, Ytrain, Ytest = train_test_split(df.URL, df.Label,test_size=0.3, random_state=5)","67d1c11f":"pipeline_ls = make_pipeline(CountVectorizer(tokenizer = RegexpTokenizer(r'[A-Za-z]+').tokenize,stop_words='english'), LogisticRegression(max_iter=507197))","e77b5bb5":"pipeline_ls.fit(Xtrain,Ytrain)","39b3a0ff":"bad = ['yeniik.com.tr\/wp-admin\/js\/login.alibaba.com\/login.jsp.php','fazan-pacir.rs\/temp\/libraries\/ipad','tubemoviez.exe','svision-online.de\/mgfi\/administrator\/components\/com_babackup\/classes\/fx29id1.txt']\ngood = ['youtube.com\/','youtube.com\/watch?v=qI0TQJI3vdU','bestbuy.com\/','restorevisioncenters.com\/html\/technology.html']\n\nresult1 = pipeline_ls.predict(bad)\nresult2 = pipeline_ls.predict(good)\n\nprint(result1)\nprint(result2)","f7705b74":"### Taking all the root words into a sentence. \nThis is done to pass into CountVectorizer function later on.","abedd6e9":"#### Logistic Regression\nLogistic Regression is a classification algorithm. It's a technique for predicting a binary outcome from a series of independent variables.\n\nA binary outcome is one in which there are only two options: the occurrence occurs (1) or it does not occur (0). Independent variables are variables or factors that have the ability to affect the result (or dependent variable).\n\nWhen dealing with binary data, the best method of analysis to use is logistic regression. When the performance or dependent variable is dichotomous or categorical in nature (e.g., \"yes\" or \"no,\" \"pass\" or \"fail,\" and so on), you're dealing with binary results.\n","929fa155":"#### Removind Duplicates in Dataset Data.\n\nThe data set contains some duplicate data. You should probably remove them. Duplicates are an extreme case of nonrandom sampling, and they bias your fitted model. Including them will essentially lead to the model overfitting this subset of points.","d3c66fdc":"Wordcloud for the good urls.","36488781":"#### Let study the data!\n\nThe dataset contains a total of 507,196 unique rows and 2 columns. The data consists of URLs and each URL has a lable which denotes if it is a phishy URL with the label 'bad' and for a non phishy URL it has the lable 'good'.","56114c33":"### Preprocession\n\nNow we have to gather all the proper words (tokens) from the URLs using RegexpTokenizer() method from the nltk method.\n\nWe pass \"r'[A-Za-z]+'\" to consider only alphabets for forming tokens.","c536a1e8":"#### Splitting the dataset","37808c99":"### Model Creation\n#### CountVectorizer\n\nCountVectorizer tokenizes(tokenization means breaking down a sentence or paragraph or any text into words) the text along with performing very basic preprocessing like removing the punctuation marks, converting all the words to lowercase, etc.\n","672fdffd":"The text has been preprocessed, tokenized(word-level tokenization: means each word is a separate token), and represented as a sparse matrix. The best part is it ignores single character during tokenization like I and a.","5a72b05d":"#### Conclusion\nFrom this we can see that Logistic Regression gives a better accuracy when comaperd to the K-Nearest Neigbor Algorithm. Hence Logistic Regression is the appropriate algorithm to use for classification of the URLs.","c1465e65":"### SnowballStemmer\n\nSnowball is a small string processing language, gives root words\n\nDifference Between Porter Stemmer and Snowball Stemmer:\n* Snowball Stemmer is more aggressive than Porter Stemmer.\n* Some issues in Porter Stemmer were fixed in Snowball Stemmer.\n* There is only a little difference in the working of these two.","8e00af3d":"Wordcloud for the bad urls.","95fdff7b":"### Visualizing Data\nSpliting Data into data with bad lables and good lables","14f4c43a":"#### KNN (K-Nearest Neighbor Algorithm)"}}