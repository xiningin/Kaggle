{"cell_type":{"f5a0958e":"code","79bf5f83":"code","06384d34":"code","d62b2e0c":"code","f5dcf5e2":"code","be32ca12":"code","f8dda683":"code","2e141703":"code","41d361a5":"code","69845f64":"code","f576443e":"code","68e12d58":"code","995506da":"code","0e5339d3":"code","e6bf4454":"code","1e5388d8":"code","b8f9325d":"code","3734513d":"code","0bc7b712":"code","121db4d6":"markdown","406155de":"markdown","7a7547e7":"markdown","fd83f5d1":"markdown","47ec7f72":"markdown","acc03536":"markdown","f5dd31b7":"markdown","b7cfec26":"markdown"},"source":{"f5a0958e":"!ls ..\/input\/Kannada-MNIST\n","79bf5f83":"# %tensorflow_version 1.x\nimport tensorflow\nprint(tensorflow.__version__)\nimport tensorflow.keras as keras\nprint(keras.__version__)","06384d34":"import pandas as pd\ntrain_set = pd.read_csv(\"..\/input\/Kannada-MNIST\/train.csv\")\nprint(type(train_set))\ntrain_array = train_set.values\ny_train, x_train = train_array[:, :1], train_array[:, 1:]\n# print(y_train, y_train.shape,\"\\n\", x_train, x_train.shape)\nprint(x_train.dtype, x_train.min(), x_train.max())\n","d62b2e0c":"test_set = pd.read_csv(\"..\/input\/Kannada-MNIST\/test.csv\")\nprint(type(test_set))\ntest_array = test_set.values\n\ny_test, x_test = test_array[:, :1], test_array[:, 1:]","f5dcf5e2":"print(x_test)\nprint(x_test.max(), x_test.min())\nprint(y_test)\nprint(y_train)","be32ca12":"from skimage.io import imshow, imshow_collection\n\nimshow_collection(x_train[:12].reshape(12, 28, 28))\n","f8dda683":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler((-1, 1), False)\nprint(scaler.fit(x_train))\n# print(scaler.data_max_)\nx_train = scaler.transform(x_train)\n# print(scaler.data_max_)\n# print(x_train)\nprint(x_train.min(), x_train.max())\n","2e141703":"print(x_test.min(), x_test.max())\nscaler = MinMaxScaler((-1, 1), False)\nscaler.fit(x_test)\nx_test = scaler.transform(x_test)\nprint(x_test.min(), x_test.max())","41d361a5":"border = 55000\nx_train, x_valid, y_train, y_valid = x_train[:border], x_train[border:], y_train[:border], y_train[border:]\n","69845f64":"from keras.layers import *\nfrom keras.models import Model, Sequential\nfrom keras.callbacks import CSVLogger, ModelCheckpoint\n\nx = Input(shape=(784,))\ny = Dense(30, activation=None)(x)\ny = Activation('elu')(y)\ny = Dropout(rate=0.15)(y)\ny = Dense(30, activation=None)(y)\ny = Activation('elu')(y)\nprediction = Dense(10, activation='softmax')(y)\n\nmodel = Model(inputs=[x], output=[prediction])\n\nmodel.compile(optimizer ='sgd',\n              loss = 'sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.summary()","f576443e":"model.fit(\n    # x_train - 0.5, y_train,\n          x_train, y_train,\n          batch_size=16,\n          epochs=25,\n          verbose=1,\n          # validation_data=(x_valid - 0.5, y_valid),\n          validation_data=(x_valid, y_valid),\n          callbacks=[\n              CSVLogger('log.csv'),\n              ModelCheckpoint('model.h5', save_best_only=True),\n          ])","68e12d58":"!ls\n","995506da":"print(x_test)","0e5339d3":"model = keras.models.load_model('model.h5')\n\n# pred_probas = model.predict(x_test - 0.5, batch_size=16)\npred_probas = model.predict(x_test, batch_size=16)\n\nprediction = pred_probas.argmax(axis=1)\n\n# predictions = model.predict(x_test)\n# print(predictions)","e6bf4454":"submission = pd.read_csv('..\/input\/Kannada-MNIST\/sample_submission.csv')","1e5388d8":"submission['label'] = prediction","b8f9325d":"submission.head()","3734513d":"submission.to_csv(\"submission.csv\",index=False)","0bc7b712":"!ls","121db4d6":"\u0414\u0430\u0441\u0442\u0430\u0435\u043c \u0434\u0430\u0434\u0437\u0435\u043d\u044b\u044f \u0434\u043b\u044f \u0442\u0440\u044d\u0439\u043d\u0430 \u0456 \u0432\u0430\u043b\u0456\u0434\u0430\u0446\u044b\u0456","406155de":"\u041f\u0430\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u0434\u0437\u0435\u043d\u044b\u044f","7a7547e7":"\u0412\u044b\u0437\u043d\u0430\u0447\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u0430\u0434\u044d\u043b\u0456","fd83f5d1":"\u0411'\u0435\u043c \u0434\u0430\u0434\u0437\u0435\u043d\u044b\u044f \u043d\u0430 \u0442\u0440\u044d\u0439\u043d \u0456 \u0432\u0430\u043b\u0456\u0434\u044d\u0439\u0448\u043d","47ec7f72":"\u041d\u0430\u043c\u0430\u043b\u044e\u0435\u043c \u043d\u0435\u043a\u0430\u043b\u044c\u043a\u0456 \u0430\u0431'\u0435\u043a\u0442\u0430\u045e","acc03536":"\u041d\u0430\u0440\u043c\u0430\u043b\u0456\u0437\u0430\u0446\u044b\u044f \u0434\u043b\u044f \u0442\u044d\u0441\u0442\u0430\u0432\u044b\u0445, \u0430\u043b\u0435 \u0442\u0443\u0442 \u043d\u0435\u0439\u043a\u0430\u044f \u043b\u0443\u0445\u0442\u0430\n","f5dd31b7":"\u041d\u0430\u0440\u043c\u0430\u043b\u0456\u0437\u0443\u0435\u043c \u0434\u0430\u0434\u0437\u0435\u043d\u044b\u044f\n","b7cfec26":"\u0414\u0430\u0441\u0442\u0430\u0435\u043c \u0434\u0430\u0434\u0437\u0435\u043d\u044b\u044f \u0434\u043b\u044f \u0442\u044d\u0441\u0442\u0430\n"}}