{"cell_type":{"3f981e36":"code","c3a33796":"code","3a1bb018":"code","cb500a23":"code","775965c1":"code","62470d45":"code","4590984e":"code","0b73ba85":"code","4649ea96":"code","1920e0d0":"code","5294c479":"code","c7226cb4":"code","0b6f75cf":"code","05181009":"code","071277a8":"code","ca0d235d":"code","5a03742f":"code","a5cc1d98":"code","975b9cd1":"code","46f42444":"code","cf7c63a8":"code","66ed8fa9":"code","b41f7b1a":"code","2d170504":"code","bac2a759":"markdown","09b7b76b":"markdown","74096fc8":"markdown","ffff5210":"markdown","62f0f614":"markdown","1182e3e8":"markdown"},"source":{"3f981e36":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.preprocessing import OneHotEncoder","c3a33796":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","3a1bb018":"train.shape, test.shape","cb500a23":"train.head(5)","775965c1":"test.head(5)","62470d45":"y_train = train['label']\nx_train = train.drop('label', axis=1)\ny_train.shape, x_train.shape","4590984e":"x_train.head(5)","0b73ba85":"y_train.value_counts()","4649ea96":"x_train.isnull().any().describe()","1920e0d0":"test.isnull().any().describe()","5294c479":"x_train = x_train\/255.0\ntest = test\/255.0","c7226cb4":"x_train = x_train.values.reshape(-1,28,28,1)","0b6f75cf":"test = test.values.reshape(-1,28,28,1)","05181009":"test.shape","071277a8":"# Use the Scikit to make one-hot encoding label\ny_train = pd.DataFrame(data=y_train)\none_hot = OneHotEncoder(handle_unknown='ignore')\none_hot.fit(y_train.values)\ny_train = one_hot.transform(y_train.values).toarray()","ca0d235d":"y_train, y_train.shape","5a03742f":"from sklearn.model_selection import train_test_split\nrandom_seed = 3\nx_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.1, random_state=random_seed)\nx_train.shape, x_val.shape, y_train.shape, y_val.shape","a5cc1d98":"g = plt.imshow(x_train[0][:,:,0])","975b9cd1":"from keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\n\nmodel = Sequential([\n    Conv2D(filters = 64, input_shape=(28,28,1), kernel_size=(3,3), strides=(1,1), padding='valid'),\n    Activation('relu'),\n    MaxPooling2D(pool_size=(2,2), strides=(1,1), padding='valid'),\n    BatchNormalization(),\n    \n    Conv2D(filters=128, kernel_size=(3,3), strides=(1,1), padding='valid'),\n    Activation('relu'),\n    MaxPooling2D(pool_size=(2,2), strides=(1,1), padding='valid'),\n    BatchNormalization(),\n    \n    Conv2D(filters=192, kernel_size=(1,1), strides=(1,1), padding='valid'),\n    Activation('relu'),\n    BatchNormalization(),\n    \n    Conv2D(filters=192, kernel_size=(3,3), strides=(1,1), padding='valid'),\n    Activation('relu'),\n    BatchNormalization(),\n\n    Conv2D(filters=128, kernel_size=(3,3), strides=(1,1), padding='valid'),\n    Activation('relu'),\n    MaxPooling2D(pool_size=(2,2), strides=(1,1), padding='valid'),\n    BatchNormalization(),\n    \n    Flatten(),\n    Dense(2048),\n    Activation('relu'),\n    Dropout(0.4),\n    BatchNormalization(),\n    \n    Dense(2048),\n    Activation('relu'),\n    Dropout(0.4),\n    BatchNormalization(),\n\n    Dense(800),\n    Activation('relu'),\n    Dropout(0.4),\n    BatchNormalization(),\n    \n    Dense(10),\n    Activation('softmax'),\n])","46f42444":"model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])","cf7c63a8":"model.fit(x_train, y_train, batch_size=200, validation_data=(x_val,y_val), epochs = 10)","66ed8fa9":"results = model.predict(test)","b41f7b1a":"results = np.argmax(results, axis=1)\n# select the indix with the maximum probability\nresults = pd.Series(results,name=\"Label\")","2d170504":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_submission1.csv\",index=False)","bac2a759":"**Label Encoding**\n* Use the Scikit to make one-hot encoding label (Be careful about the format), which must be used with **np.array**.\n* Detail [OneHotEncoder](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.OneHotEncoder.html)","09b7b76b":"**Reshape**\n* [np.reshape](https:\/\/docs.scipy.org\/doc\/numpy-1.15.1\/reference\/generated\/numpy.reshape.html) detail\n* x_train is numpy.ndarray format now","74096fc8":"**Build AlexNet with Keras**","ffff5210":"* Now, y_train becomes** numpy.ndarray**","62f0f614":" **Normalization**","1182e3e8":"**Splitting dataset as train data and cross-validation data**\n* Detail [train_test_split](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.train_test_split.html)"}}