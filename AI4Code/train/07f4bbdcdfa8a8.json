{"cell_type":{"96a70459":"code","404856a6":"code","59918ba4":"code","7faddba7":"code","f07817a5":"code","0fe45221":"code","2c7b0b52":"code","f0b87747":"code","8281709b":"code","331a695f":"code","56b934ad":"code","41806e13":"code","7f561d20":"code","748a7fc8":"code","a3bd7eda":"code","314cb543":"code","836fef26":"code","cbb38df0":"code","b2b55727":"code","60240f21":"code","f4ffd4b3":"code","355b74ff":"code","a2f7714b":"code","b79751f1":"code","3d98d1ae":"code","7be62336":"code","db6893ec":"markdown","aafe09a1":"markdown"},"source":{"96a70459":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","404856a6":"import pandas as pd\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nacc = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")","59918ba4":"del train['Name']\ndel train['PassengerId']\ndel train['Ticket']","7faddba7":"del train['Cabin']\n\ndef CleanEmbarked(str):\n    if str == 'S':\n        return 0\n    elif str == 'C':\n        return 1\n    else:\n        return 2\n    \ntrain['Port'] = train['Embarked'].apply(CleanEmbarked)\ndel train['Embarked']\n\ndef CleanSex(str):\n    if str == 'male':\n        return 0\n    else:\n        return 1\n    \ntrain['Gender'] = train['Sex'].apply(CleanSex)\ndel train['Sex']","f07817a5":"train.describe()","0fe45221":"train['Age'].fillna(0, inplace=True)","2c7b0b52":"train.describe()","f0b87747":"Y_train = train['Survived']\ndel train['Survived']","8281709b":"X_train = np.array(train.values)","331a695f":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nscaler.fit(X_train)\nX_train_scaled = scaler.transform(X_train)","56b934ad":"print(X_train_scaled.shape)\nprint(Y_train.shape)","41806e13":"del test['Name']\ndel test['PassengerId']\ndel test['Ticket']\n\ndel test['Cabin']\n\ndef CleanEmbarked(str):\n    if str == 'S':\n        return 0\n    elif str == 'C':\n        return 1\n    else:\n        return 2\n    \ntest['Port'] = test['Embarked'].apply(CleanEmbarked)\ndel test['Embarked']\n\ndef CleanSex(str):\n    if str == 'male':\n        return 0\n    else:\n        return 1\n    \ntest['Gender'] = test['Sex'].apply(CleanSex)\ndel test['Sex']\n\ntest['Age'].fillna(0, inplace=True)","7f561d20":"test['Fare'].fillna(0, inplace=True)","748a7fc8":"X_test = np.array(test.values)","a3bd7eda":"X_test_scaled = scaler.transform(X_test)","314cb543":"from sklearn.svm import SVC\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split","836fef26":"X_train_1, X_test_1, Y_train_1, Y_test_1 = train_test_split(X_train_scaled, Y_train, random_state = 0)","cbb38df0":"clf1 = SVC()\ngrid = {'C' : [1, 10, 1000, 10000], 'kernel' : ['linear', 'rbf'], 'gamma' : [0.1, 0.01, 0.001]}\nCV = GridSearchCV(clf1, grid)","b2b55727":"clf_SVC = SVC(C=1000, cache_size=200, class_weight=None, coef0=0.0,\n    decision_function_shape='ovr', degree=3, gamma=0.1, kernel='rbf',\n    max_iter=-1, probability=False, random_state=None, shrinking=True,\n    tol=0.001, verbose=False)\n\nclf_SVC.fit(X_train_1, Y_train_1)\nY_pred_SVC = clf_SVC.predict(X_test_1)\nprint(classification_report(Y_test_1, Y_pred_SVC))\nprint(clf_SVC.score(X_test_1, Y_test_1))","60240f21":"clf2 = RandomForestClassifier()\ngrid2 = {'n_estimators' : [5, 10, 30], 'criterion' : ['gini', 'entropy'], 'max_depth' : [1, 10]}\nCV2 = GridSearchCV(clf2, grid2)","f4ffd4b3":"CV2.fit(X_train_1, Y_train_1)\nprint(CV2.best_estimator_)","355b74ff":"clf_RF = RandomForestClassifier(bootstrap=True, class_weight=None, criterion='entropy',\n                       max_depth=10, max_features='auto', max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=30,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)\n\nclf_RF.fit(X_train_1, Y_train_1)\nY_pred_RF = clf_RF.predict(X_test_1)\nprint(classification_report(Y_test_1, Y_pred_RF))\nprint(clf_RF.score(X_test_1, Y_test_1))","a2f7714b":"predictions = clf_SVC.predict(X_test_scaled)\nprint(predictions)","b79751f1":"submission = pd.DataFrame({'PassengerId':acc['PassengerId'],'Survived':predictions})","3d98d1ae":"submission.head()","7be62336":"filename = 'Titanic Predictions 2.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","db6893ec":"**-------------------------------------------------------------**","aafe09a1":"**--------------------------**"}}