{"cell_type":{"9ca13d1d":"code","03d7cea9":"code","1c7702c0":"code","83d2c85c":"code","bb57126a":"code","73886f2b":"code","973d6c09":"code","46fb8233":"code","f5be7b06":"code","f58f2d7e":"markdown","9a5f45c2":"markdown","7a80af42":"markdown","fe69ef27":"markdown","7fcb6ee7":"markdown","a428e2f3":"markdown","a3be2a7b":"markdown","ecb59056":"markdown","ee2730b2":"markdown","f705536e":"markdown","044ca5cd":"markdown"},"source":{"9ca13d1d":"import numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport pytesseract\nimport re\n\nfrom pytesseract import Output","03d7cea9":"def plot_gray(image):\n    plt.figure(figsize=(16,10))\n    return plt.imshow(image, cmap='Greys_r')","1c7702c0":"def plot_rgb(image):\n    plt.figure(figsize=(16,10))\n    return plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))","83d2c85c":"file_name = \"\/kaggle\/input\/receipt-ocr-part-1-image-segmentation-by-opencv\/result.png\"\nimage = cv2.imread(file_name, cv2.IMREAD_GRAYSCALE) \nplot_gray(image)","bb57126a":"d = pytesseract.image_to_data(image, output_type=Output.DICT)\nn_boxes = len(d['level'])\nboxes = cv2.cvtColor(image.copy(), cv2.COLOR_BGR2RGB)\nfor i in range(n_boxes):\n    (x, y, w, h) = (d['left'][i], d['top'][i], d['width'][i], d['height'][i])    \n    boxes = cv2.rectangle(boxes, (x, y), (x + w, y + h), (0, 255, 0), 2)\n    \nplot_rgb(boxes)","73886f2b":"extracted_text = pytesseract.image_to_string(image)\nprint(extracted_text)","973d6c09":"def find_amounts(text):\n    amounts = re.findall(r'\\d+\\.\\d{2}\\b', text)\n    floats = [float(amount) for amount in amounts]\n    unique = list(dict.fromkeys(floats))\n    return unique","46fb8233":"amounts = find_amounts(extracted_text)\namounts","f5be7b06":"max(amounts)","f58f2d7e":"# Step 2: Text recognition","9a5f45c2":"# Resources\n\n1. [OCR a document, form, or invoice with Tesseract, OpenCV, and Python](https:\/\/www.pyimagesearch.com\/2020\/09\/07\/ocr-a-document-form-or-invoice-with-tesseract-opencv-and-python\/) by Adrian Rosebrock\n2. [Text Detection and Extraction using OpenCV and OCR](https:\/\/www.geeksforgeeks.org\/text-detection-and-extraction-using-opencv-and-ocr\/) by Anandh Jagadeesan\n3. [A comprehensive guide to OCR with Tesseract, OpenCV and Python](https:\/\/nanonets.com\/blog\/ocr-with-tesseract\/) by Filip Zelic & Anuj Sable","7a80af42":"Feel free to experiment with other regular expressions to find VAT number, company name, date or even read receipt positions!","fe69ef27":"# About this notebook\n\nThis is a **part two notebook** in the *Receipt OCR with OpenCV* series. [Previously](https:\/\/www.kaggle.com\/dmitryyemelyanov\/receipt-ocr-part-1-image-segmentation-by-opencv) we have extracted a scanned version of the receipt out of the image. This notebook deals with the second step of the process: reading text information from it.\n* Locating text boxes on the image\n* Extracting all the texts from the image\n* Obtaining grand total as the largest floating point number among texts\n\nLet's get started!","7fcb6ee7":"We will use a scanned version of the receipt, which is the output of the [previous notebook in the series](https:\/\/www.kaggle.com\/dmitryyemelyanov\/receipt-ocr-part-1-image-segmentation-by-opencv):","a428e2f3":"# About the Author\n\nThis notebook is published under the **Data Science DJ** initiative with the goal of giving you distilled pieces of valuable information, short and concise, easy to comprehend. \n\nI spend a few hours every day to write a single post about a single concept. You can find them by:\n\n* [Joining my Telegram channel](https:\/\/t.me\/datasciencedj)\n* [Following my LinkedIn tag](https:\/\/www.linkedin.com\/feed\/hashtag\/?keywords=datasciencedj)\n\nIf this work gives you joy, or maybe even inspiration, please consider contributing to my [Patreon account](https:\/\/www.patreon.com\/datasciencedj).\nThank you!","a3be2a7b":"Defining helper methods:","ecb59056":"# Receipt OCR notebook series: Problem definition\n\n> Given a arbitrary photo containing a receipt, extract grand total number\n\n![](https:\/\/storage.googleapis.com\/www.forwardit.lv\/kaggle\/receipt_home_kaggle.png)\n\nThe solution is divided into smaller tasks:\n\n1. Get a scanned version of receipt by restoring perspective (done in the [previous notebook](https:\/\/www.kaggle.com\/dmitryyemelyanov\/receipt-ocr-part-1-image-segmentation-by-opencv))\n2. **Apply OCR to find all texts within image**\n3. **Find grand total as the largest number among recognized texts**\n\n> One should remember that some tasks could be solved with traditional computer vision algorithms\n\nThis work aims to address a common pitfall among machine learning practitioners: trying to solve simple problems with the complex tools. ","ee2730b2":"# Step 3: Extracting grand total\n\nWe will use regular expression to extract all floating point numbers out of the all detected texts.","f705536e":"# Step 1: Text box detection","044ca5cd":"Grand total is the largest one:"}}