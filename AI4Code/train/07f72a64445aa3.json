{"cell_type":{"74007551":"code","8cd01724":"code","ac074fe5":"code","4300b159":"code","4b8f5212":"code","d1395d8f":"code","29b22ee1":"code","d7260b40":"code","bd426fe4":"code","22662178":"code","dd3e3a74":"code","fe2d3428":"code","60a5d113":"code","35cb29b2":"code","9b1794f1":"code","feee3847":"code","f9223a1d":"code","d004255a":"code","a9514278":"code","6903f899":"code","119588d0":"code","f3f71541":"markdown","c162fdbd":"markdown","b8807b9d":"markdown"},"source":{"74007551":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8cd01724":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity","ac074fe5":"df = pd.read_csv(\"\/kaggle\/input\/indian-food-101\/indian_food.csv\")","4300b159":"df.tail()","4b8f5212":"df.name.unique()","d1395d8f":"sns.scatterplot(x=\"prep_time\",y=\"cook_time\",hue=\"diet\",data=df)","29b22ee1":"sns.barplot(x='cook_time',y='flavor_profile',data=df)","d7260b40":"sns.barplot(x='cook_time',y='region',data=df)","bd426fe4":"sns.barplot(x='course',y='cook_time',data=df)","22662178":"sns.barplot(x='diet',y='cook_time',data=df)","dd3e3a74":"def get_index_by_name(name):\n    return df[df.name==name].index.values[0]\n\ndef get_name_by_index(index):\n    return df[df.index==index]['name'].values[0]","fe2d3428":"features = ['diet','ingredients','course','flavor_profile','state']\n\nfor feature in features:\n    df[feature].fillna(' ')","60a5d113":"def combine_row(row):\n    return row['diet']+ \" \" + \" \"+row['ingredients']+ \" \" +row['course']+ \" \" +row['flavor_profile']+ \" \" +row['state']\n\ndff= df.apply(combine_row,axis=1)","35cb29b2":"dff","9b1794f1":"cv = CountVectorizer ()\nco_vec = cv.fit_transform(dff)","feee3847":"print(enumerate (co_vec))","f9223a1d":"co_sim= cosine_similarity(co_vec)","d004255a":"liked_food= 'Red Rice'\ni = get_index_by_name(liked_food)","a9514278":"sim = list(enumerate (co_sim[i]))","6903f899":"simm = sorted(sim,key=lambda x:x[1], reverse=True)","119588d0":"i = 0\nfor movie in simm:\n    print (get_name_by_index(movie[0]))\n    i = i+1\n    if i>20:\n        break","f3f71541":"Now we are going to build Simple Recommended System","c162fdbd":"You can it is Working like a charm. ","b8807b9d":"We Start by Visualizing the data"}}