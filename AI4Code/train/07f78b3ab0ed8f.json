{"cell_type":{"030ef969":"code","a3d67ec0":"code","87da971c":"code","014fb74f":"code","c29730b2":"code","15f9a360":"code","22c8adde":"code","24c5a058":"code","65fb52b4":"code","4a1a45ba":"code","a221b8f6":"code","49b56aa7":"code","9e64b0ea":"code","4d4c8041":"code","e2b12a65":"code","9baad74b":"code","7c4029d3":"code","d7ed257b":"code","4337e0d6":"code","41127e4d":"code","92ac9b43":"code","e5d8137d":"code","877887fa":"code","1e50908c":"code","56b19d54":"code","23e8089a":"code","1b1db42d":"code","aa590e4a":"code","54b1d067":"code","7a2f2e0a":"code","573b077c":"code","458a75ac":"code","5b6f3b12":"code","3d4de0f3":"code","d1a99b0a":"code","220f0030":"code","bf2b8822":"code","f8bb46d7":"code","389ab3cf":"code","b071368b":"code","9da2f835":"code","1625f6fb":"code","c115b023":"code","517d0e9d":"code","616a86c6":"code","dee1c1e1":"code","d0d497a8":"markdown","4fea3549":"markdown","82e138db":"markdown","a1930ff2":"markdown","9622faf0":"markdown","d1bf01e0":"markdown","1c06df27":"markdown","2ea1939f":"markdown","685b3486":"markdown","2187c317":"markdown","b7851377":"markdown","82df8516":"markdown","861296e8":"markdown","0d557a68":"markdown","be54c06a":"markdown","856235b9":"markdown","b2c17e33":"markdown"},"source":{"030ef969":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3d67ec0":"#reading the dataset for task 1\nb=pd.read_csv('\/kaggle\/input\/epitope-prediction\/input_bcell.csv')\nb.head()","87da971c":"b.columns","014fb74f":"b.isnull().sum()","c29730b2":"b['target'].value_counts()\/len(b)*100.0","15f9a360":"b.info()","22c8adde":"#for statiscal analysis of continuous variables\nb.describe()","24c5a058":"#for statistical analysis of object variables\nb.describe(include='all')","65fb52b4":"#to calculate peptide length\nb['peptide_length']=b['end_position'] - b['start_position'] + 1","4a1a45ba":"b.head()","a221b8f6":"#function to convert characters into their lengths\ndef length(col):\n    for i in col:\n        return len(i)","49b56aa7":"#converting all the three object type features\nb['parent_protein_id']=length(b['parent_protein_id'])","9e64b0ea":"b['protein_seq']=length(b['protein_seq'])","4d4c8041":"b['peptide_seq']=length(b['peptide_seq'])","e2b12a65":"x=b.drop(columns='target')\ny=b['target']","9baad74b":"#feature importance\nfrom sklearn.ensemble import ExtraTreesClassifier\nr = ExtraTreesClassifier(random_state=0)\nr.fit(x,y)\nfeature_importance = r.feature_importances_\nfeature_importance_normalized = np.std([tree.feature_importances_ for tree in \n                                        r.estimators_], \n                                        axis = 0) ","7c4029d3":"#importing libraries for visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px#dropping unnecessary columns\nb.drop(columns=['parent_protein_id','protein_seq','peptide_seq'],inplace=True)\nplt.figure(figsize=(10,10))\nsns.barplot(feature_importance_normalized,x.columns) \nplt.xlabel('Feature Labels') \nplt.ylabel('Feature Importances') \nplt.title('Comparison of different Feature Importances') \nplt.show() ","d7ed257b":"b.head()","4337e0d6":"b['peptide_length'].value_counts()\/len(b)*100","41127e4d":"features=[\"chou_fasman\",\"emini\",\"kolaskar_tongaonkar\",\"parker\",\"peptide_length\",\"isoelectric_point\",\"aromaticity\",\n            \"hydrophobicity\",\"stability\"]\nplt.figure(figsize=(20,20))\nplt.subplots_adjust(hspace=2.0)\nj=1\nfor i in features:\n    plt.subplot(4,5,j)\n    sns.distplot(b[i])\n    j+=1","92ac9b43":"sns.set_style('whitegrid')\nplt.figure(figsize=(30,30))\nsns.catplot(y='isoelectric_point',x='peptide_length',data=b,ci=None,col='target',sharey=False)","e5d8137d":"plt.figure(figsize=(30,30))\nsns.catplot(y='aromaticity',x='peptide_length',data=b,ci=None,col='target',sharey=False)","877887fa":"plt.figure(figsize=(30,30))\nsns.catplot(y='hydrophobicity',x='peptide_length',data=b,ci=None,col='target',sharey=False)","1e50908c":"plt.figure(figsize=(30,30))\nsns.catplot(y='stability',x='peptide_length',data=b,ci=None,col='target',sharey=False)","56b19d54":"x.head()","23e8089a":"X=b.drop(columns='target')\nY=b['target']","1b1db42d":"#train and test\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nX_train,X_valid,Y_train,Y_valid=train_test_split(X,Y,stratify=Y,test_size=0.2,random_state=0)","aa590e4a":"from sklearn.preprocessing import MinMaxScaler\nd=MinMaxScaler()\nd.fit_transform(X_train,Y_train)","54b1d067":"d.transform(X_valid)","7a2f2e0a":"#fitting the lightbgm model \nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import roc_auc_score","573b077c":"l=LGBMClassifier(random_state=10)\nl.fit(X_train,Y_train)","458a75ac":"lg_train=l.predict(X_train)","5b6f3b12":"roc_auc_score(lg_train,Y_train)","3d4de0f3":"lg_pred=l.predict(X_valid)\nlg_pred","d1a99b0a":"roc_auc_score(lg_pred,Y_valid)","220f0030":"#predictions of validation dataset\npredictions=pd.DataFrame(lg_pred,columns=['validation_pred'])\npredictions.head()","bf2b8822":"#predicting on covid dataset\nc=pd.read_csv('\/kaggle\/input\/epitope-prediction\/input_covid.csv')\nc.head()","f8bb46d7":"c.info()","389ab3cf":"c.drop(columns=['parent_protein_id','protein_seq','peptide_seq'],inplace=True)","b071368b":"c.head()","9da2f835":"c.isnull().sum()","1625f6fb":"c['length']=c['end_position']-c['start_position'] + 1","c115b023":"d.transform(c)","517d0e9d":"y_pred=l.predict(c)\ny_pred","616a86c6":"y_pred=pd.DataFrame(y_pred,columns=['test_pred'])\ny_pred.head()","dee1c1e1":"y_pred.value_counts()\/len(c)*100","d0d497a8":"**INSIGHTS-**\n* The number of peptides of length 8,10 and 15 have certainly strong values of isoelectric point at range above 7 at negative target.\n* In another figure,most of the values of peptide_length have greater range of values below 7 having low isoelectric point at positive target.","4fea3549":"**INSIGHTS-**\n* 'parent_protein_id' contains 760 unique values with 560 frequency.\n* 'protein_seq' contains 757 unique values with same frequency as of 'parent_protein_id'.\n* 'peptide_seq' contains the most number of unique values.\n*  We can say that 'parent_protein_id' and 'protein_seq' contains mostly same number of characteristics. ","82e138db":"**INSIGHTS-**\n* 'parent_protein_id','protein_seq',and 'peptide_seq' are of object type as they contain characters not numbers.\n*  Rest of the features are of float type.\n*  No categorical feature is present in the dataset.\n*  Target feature is binary i.e. containing only 0 and 1.\n","a1930ff2":"## EXPLORATORY DATA ANALYSIS","9622faf0":"**INSIGHTS-**\n* By looking at the huge difference between 75% quartile value and maximum value of 'start_position','emini' and 'end_position' features there can be a possibility of outliers in these features.\n* Minimum values in 'parker' and 'hydrophobicity' features are negative.\n* Negative mean,25th,50th and 75th quartiles in 'hydrophobicity' feature.","d1bf01e0":"According to the ExtraTreesClassifier,protein features **'stability','hydorphobicity','aromaticity'** and **'isoelectric_point'** conveys most info about the target feature determining their importance in the dataset.","1c06df27":"Here most of the peptides showing strong hydrophobicity property are at positive target than negative target.","2ea1939f":"The model was trained at training ROC score of 0.9022 whereas testing score is 0.8420,which means model has fitted pretty well and had made good predictions on validation set.","685b3486":"**INSIGHTS-**\n* Most of the peptides show stability within range 20 to 60 at positive target.\n* Most of the peptides show stability within range 20 to 80 at negative target","2187c317":"**If you like this notebook do upvote it.**\n\nDo provide your valuable feedback.\n\nDo checkout my other notebooks at https:\/\/www.kaggle.com\/tmchls","b7851377":"72.8% target values i.e. Anitbody valence of this dataset is negative and 27.1% of values are positive.It means that most of the antibodies can resist binding of SARS-COV virus with themselves.","82df8516":"## MODEL BUILDING","861296e8":"**INSIGHTS-**\n* Most of the peptides have range of aromaticity within range of 0.05 to 0.10 at negative target.\n* Most of the peptides have range of aromaticity within range of 0.04 to 0.12 at positive target.","0d557a68":"Most of the peptides are of length 15(32%),10(26%) and 8(15%) respectively.\n","be54c06a":"**INSIGHTS**-\n* 'Emini' feature shows right skewed distribution.\n* 'peptide_length','isoelectric_point','aromaticity','hydrophobicity','stability' are not perfectly normal and contains outliers.\n* 'chou_fasman','kolaskar_tongaonkar','parker' shows near-to-perfect normal distribution.","856235b9":"There are no missing values in the dataset.","b2c17e33":"The test predicitons shows us that the antibody valence will be negative around 55.6% and positive around 44.3% which means that majority of antibodies will resist binding of virus like SARS-Cov which will reduce number of cases."}}