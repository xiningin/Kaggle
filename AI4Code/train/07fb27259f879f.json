{"cell_type":{"870a9e1a":"code","220d3134":"code","c555f2f5":"code","b9299697":"code","ba6dca66":"code","259173f6":"code","7edaf520":"code","3c437b32":"code","45170eac":"code","77686963":"code","d0dfa092":"code","8ecb3510":"code","e806b5ff":"code","71ba4646":"code","9b06cd23":"code","c9c2c35b":"code","78a1ec21":"code","90f9d4e1":"code","1a0db25f":"code","6600791c":"code","5d949c89":"code","4236b203":"code","788a598b":"code","54b8589f":"code","d8defa9e":"code","4b4375a5":"code","cf40dfbc":"code","7667be47":"code","7a429832":"code","84661c30":"code","2726b47e":"code","3488f0df":"code","feeed97f":"code","c77f7fd2":"code","7086e2cd":"code","1214e1d1":"code","db2b0d1e":"code","6705a061":"code","0821f4f9":"code","f78ef11d":"code","e0ea22d3":"code","b3854254":"code","fb4ca8db":"code","e2de0e74":"code","d9cd5640":"code","99b1ab2f":"code","47daced2":"code","319d7f1f":"code","196bb4e0":"code","a76f5f96":"code","c3e57ada":"code","8e948609":"code","73427591":"code","39ea022a":"code","2e134728":"code","a2afbb9d":"code","77b40807":"code","dc38cf3b":"code","366fd2dc":"code","d1eb64b0":"code","944325c5":"code","704b699b":"code","b3354fac":"code","4931d78e":"code","7a1c44ff":"code","1abeab18":"code","fa238265":"code","9930b37d":"code","c78d1587":"code","dda23c19":"code","82e1716a":"code","4ca3c83b":"code","4af70df2":"code","c1ff7581":"code","f875b74c":"code","52fdd20b":"code","e39e2827":"code","8e381c47":"code","c2911984":"code","66edbdb5":"code","c1e7eed2":"code","725ca590":"code","3f0db1af":"code","1fa5ef60":"code","3609b905":"code","11d203f9":"code","632ce24f":"code","4bf74985":"code","7db0919e":"code","4d8f27a5":"code","bbaa2a63":"code","363ccf61":"code","b823d42d":"code","9883e229":"code","f76a4c87":"code","ee2d2d2d":"markdown","f967189e":"markdown","8fb6265b":"markdown","ea5e9899":"markdown","9943a9fd":"markdown","be191961":"markdown"},"source":{"870a9e1a":"# Importing libraries\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","220d3134":"# Importing dataframe\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain.head()","c555f2f5":"# Checking shape of dataframe\ntrain.shape","b9299697":"# Info on train dataset\ntrain.info()","ba6dca66":"# Checking unique values in train dataset\ntrain['PassengerId'].nunique()","259173f6":"# Building function for calculating null values in each column\ndef per_null(df):\n    percentage_columns = []\n    for i in train.columns:\n        per = (train[i].isnull().sum()\/len(train.index))*100\n        percentage_columns.append(per)\n    null_per = pd.DataFrame(list(zip(train.columns, percentage_columns)), columns = ['Column', 'Null Percentage'])\n    print(null_per)","7edaf520":"# Checking percentage of null values in train dataset\nper_null(train)","3c437b32":"# Dropping Cabin column\ntrain = train.drop(['Cabin'], axis = 1)\ntrain.head()","45170eac":"# Checking shape of dataframe\ntrain.shape","77686963":"# Checking values of age at different percentiles\ntrain['Age'].describe(percentiles = [0, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 1])","d0dfa092":"# Replacing the null values of Age with median value\ntrain['Age'] = train['Age'].fillna(train['Age'].quantile(0.5))\ntrain['Age'].isnull().sum()","8ecb3510":"per_null(train)","e806b5ff":"# Checking value counts of Embarked column\ntrain['Embarked'].value_counts()","71ba4646":"# Filling the null values of Embarked column with 'S' value\ntrain['Embarked'] = train['Embarked'].fillna('S')","9b06cd23":"# Checking percentage of null values in dataset\nper_null(train)","c9c2c35b":"# Checking class distribution in dataset\ntrain['Survived'].value_counts().plot(kind = 'bar')\nplt.show()","78a1ec21":"# Checking values of class distribution\n(train['Survived'].value_counts()\/len(train.index))*100","90f9d4e1":"# Dropping certain columns as not required for analysis\ntrain = train.drop(['PassengerId','Name', 'Ticket'], axis = 1)","1a0db25f":"train.head()","6600791c":"train.groupby(['Embarked'])['Survived'].sum().plot.bar()\nplt.show()","5d949c89":"train.groupby(['Pclass'])['Survived'].sum().plot.bar()\nplt.show()","4236b203":"train.groupby(['SibSp'])['Survived'].sum().plot.bar()\nplt.show()","788a598b":"plt.figure(figsize = (10,10))\nsns.boxplot(train['Survived'], train['Fare'])\nplt.show()","54b8589f":"train = train[train['Fare']<200]","d8defa9e":"train['Fare'].describe(percentiles = [0.75])","4b4375a5":"train.shape","cf40dfbc":"# Percentage of data retained\n\n(train.shape[0]\/891)*100","7667be47":"plt.figure(figsize = (10,10))\nsns.boxplot(train['Survived'], train['Fare'])\nplt.show()","7a429832":"sns.boxplot(train.Survived, train.Age)\nplt.show()","84661c30":"train.groupby(['Parch'])['Survived'].sum().plot.bar()\nplt.show()","2726b47e":"train.info()","3488f0df":"train['Pclass'] = train['Pclass'].astype('category')","feeed97f":"categorical_columns = ['Sex', 'Embarked', 'Pclass']\ndummies_categorical = pd.get_dummies(train[categorical_columns])\ndummies_categorical.head()","c77f7fd2":"train = pd.concat([train,dummies_categorical], axis = 1)\ntrain.head()","7086e2cd":"# Dropping categorical columns\ntrain = train.drop(categorical_columns, axis = 1)","1214e1d1":"train.head()","db2b0d1e":"y = train['Survived']\ny.head()","6705a061":"X = train.drop(['Survived'], axis = 1)\nX.head()","0821f4f9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, random_state = 100)","f78ef11d":"# SMOTE analysis to create data balance\nimport imblearn\nfrom collections import Counter\nfrom imblearn.over_sampling import SMOTE\nprint('Counter before SMOTE: ', Counter(y_train))\noversample = SMOTE()\nX_train_sm, y_train_sm = oversample.fit_resample(X_train, y_train)\nprint('Counter aftre SMOTE: ', Counter(y_train_sm))","e0ea22d3":"from sklearn.metrics import f1_score, accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV","b3854254":"parameters = {\n    'max_depth': [1, 2, 5, 10, 20],\n    'min_samples_leaf': [5, 10, 20, 50, 100],\n    'max_features': [2,3,4],\n    'n_estimators': [10, 30, 50, 100, 200]\n}\n\nrf = RandomForestClassifier(random_state = 42, n_jobs = -1)\nreg_xgb = GridSearchCV(estimator=rf,\n                                       param_grid=parameters,\n                                       n_jobs=-1,\n                                       cv=3,\n                                       refit=True, verbose = 1, scoring = 'accuracy')\n\nreg_xgb.fit(X_train_sm, y_train_sm)","fb4ca8db":"from sklearn import metrics\nmetrics.SCORERS.keys()","e2de0e74":"print(reg_xgb.best_params_)\nprint(reg_xgb.best_score_)\nprint(reg_xgb.best_estimator_)","d9cd5640":"best_model = RandomForestClassifier(max_depth=20, max_features=4, min_samples_leaf=5,\n                       n_estimators=10, n_jobs=-1, random_state=42)","99b1ab2f":"best_model.fit(X_train_sm, y_train_sm)","47daced2":"y_train_pred = best_model.predict(X_train_sm)\nf1_train = f1_score(y_train_sm,y_train_pred, average='weighted')\nprint(\"F1 Score is : {}\".format(f1_train))","319d7f1f":"y_test_pred = best_model.predict(X_test)\nf1_test = f1_score(y_test,y_test_pred, average='weighted')\nprint(\"F1 Score is : {}\".format(f1_test))","196bb4e0":"# Importing test dataframe\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ntest.head()","a76f5f96":"test.head()","c3e57ada":"# Dropping Cabin column from test data\ntest = test.drop(['Cabin', 'Name', 'Ticket'], axis = 1)","8e948609":"test.head()","73427591":"test.info()","39ea022a":"test['Pclass'] = test['Pclass'].astype('category')","2e134728":"categorical_columns = ['Sex', 'Embarked', 'Pclass']\ndummies_categorical = pd.get_dummies(test[categorical_columns])\ndummies_categorical.head()","a2afbb9d":"test = pd.concat([test, dummies_categorical], axis = 1, join = 'inner')","77b40807":"test = test.drop(categorical_columns, axis = 1)","dc38cf3b":"test.head()","366fd2dc":"test['Age'].describe()","d1eb64b0":"test['Age'] = test['Age'].fillna(test['Age'].quantile(0.5))","944325c5":"test['Age'].isnull().sum()","704b699b":"test_pred = test.drop(['PassengerId'], axis = 1)","b3354fac":"test_pred.info()","4931d78e":"test_pred[test_pred.Fare.isnull()]","7a1c44ff":"test_pred.Fare.describe()","1abeab18":"test_pred.Fare = test_pred.Fare.fillna(test_pred.Fare.quantile(0.5))","fa238265":"test_pred.Fare.isnull().sum()","9930b37d":"y_testcsv_pred = best_model.predict(test_pred)","c78d1587":"y_test_pred","dda23c19":"survived_pred = pd.DataFrame(data = y_testcsv_pred, columns = ['Survived'], index = test.index)","82e1716a":"gender_submission = test[['PassengerId']]","4ca3c83b":"gender_submission = pd.concat([gender_submission, survived_pred], axis = 1)","4af70df2":"gender_submission.head()","c1ff7581":"gender_submission = gender_submission.set_index('PassengerId')","f875b74c":"gender_submission.to_csv('gender_submission.csv')","52fdd20b":"from sklearn.ensemble import GradientBoostingClassifier","e39e2827":"parameters = {\n    'learning_rate' : [0.1, 0.3, 0.4, 0.5],\n    'max_depth': [1, 2, 5, 10, 20],\n    'min_samples_leaf': [5, 10, 20, 50, 100],\n    'max_features': [1,2,3,4],\n    'n_estimators': [10, 30, 50, 100, 200]\n}\n\ngbm = GradientBoostingClassifier(random_state = 42)\nreg_xgb = GridSearchCV(estimator=gbm,\n                                       param_grid=parameters,\n                                       n_jobs=-1,\n                                       cv=3,\n                                       refit=True, verbose = 1, scoring = 'accuracy')\n\nreg_xgb.fit(X_train_sm, y_train_sm)\n","8e381c47":"print(reg_xgb.best_params_)\nprint(reg_xgb.best_score_)\nprint(reg_xgb.best_estimator_)","c2911984":"best_model = GradientBoostingClassifier(learning_rate=0.3, max_depth=20, max_features=3,\n                           min_samples_leaf=10, n_estimators=10,\n                           random_state=42)","66edbdb5":"best_model.fit(X_train_sm, y_train_sm)","c1e7eed2":"y_train_pred = best_model.predict(X_train_sm)\nf1_train = f1_score(y_train_sm,y_train_pred, average='weighted')\nprint(\"F1 Score is : {}\".format(f1_train))","725ca590":"y_test_pred = best_model.predict(X_test)\nf1_test = f1_score(y_test,y_test_pred, average='weighted')\nprint(\"F1 Score is : {}\".format(f1_test))","3f0db1af":"y_test_pred_testcsv = best_model.predict(test_pred)","1fa5ef60":"y_test_pred_testcsv","3609b905":"survived_pred = pd.DataFrame(data = y_test_pred_testcsv, columns = ['Survived'], index = test.index)","11d203f9":"gender_submission = test[['PassengerId']]\ngender_submission = pd.concat([gender_submission, survived_pred], axis = 1)\ngender_submission = gender_submission.set_index('PassengerId')\ngender_submission.to_csv('gender_submission_GradientBoosting_1.csv')","632ce24f":"from sklearn.ensemble import AdaBoostClassifier","4bf74985":"best_model_rf = RandomForestClassifier(max_depth=20, max_features=4, min_samples_leaf=5,\n                       n_estimators=10, n_jobs=-1, random_state=42)","7db0919e":"estimators = list(range(10, 30, 1))\n\nabc_scores = []\nfor n_est in estimators:\n    ABC = AdaBoostClassifier(base_estimator=best_model_rf, n_estimators = n_est, random_state=101)\n    \n    ABC.fit(X_train_sm, y_train_sm)\n    y_pred = ABC.predict(X_test)\n    score = metrics.accuracy_score(y_test, y_pred)\n    abc_scores.append(score)","4d8f27a5":"plt.plot(estimators, abc_scores)\nplt.xlabel('n_estimators')\nplt.ylabel('accuracy')\nplt.show()","bbaa2a63":"ABC_best_model = AdaBoostClassifier(base_estimator=best_model_rf, n_estimators = 100, random_state=101)\nABC_best_model.fit(X_train_sm, y_train_sm)","363ccf61":"y_train_pred = best_model.predict(X_train_sm)\nf1_train = f1_score(y_train_sm,y_train_pred, average='weighted')\nprint(\"F1 Score is : {}\".format(f1_train))\ny_test_pred = best_model.predict(X_test)\nf1_test = f1_score(y_test,y_test_pred, average='weighted')\nprint(\"F1 Score is : {}\".format(f1_test))","b823d42d":"y_test_pred_testcsv = best_model.predict(test_pred)","9883e229":"survived_pred = pd.DataFrame(data = y_test_pred_testcsv, columns = ['Survived'], index = test.index)","f76a4c87":"gender_submission = test[['PassengerId']]\ngender_submission = pd.concat([gender_submission, survived_pred], axis = 1)\ngender_submission = gender_submission.set_index('PassengerId')\ngender_submission.to_csv('gender_submission_Adaboosting.csv')","ee2d2d2d":"### Gradient Boosting Classifier","f967189e":"#### Adaboosting","8fb6265b":"We see high percentage of null values in Cabin column\n\nHence, we will drop this column","ea5e9899":"We see approximately 20% of null values in Age column","9943a9fd":"### Test Data","be191961":"### Random Forest Classifier"}}