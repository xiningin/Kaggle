{"cell_type":{"bcb75472":"code","ed2ef421":"code","a7c49436":"code","04b28506":"code","e3b39d8c":"code","95b28756":"code","f4dda92a":"code","cfdfd7e3":"code","922b94a1":"code","35772afd":"code","d32a8d4e":"code","0327a7dd":"code","d92b4c1e":"code","0dbec744":"code","c3fe80b7":"code","bcf3cbe3":"code","1888b0b5":"code","d4f78ab0":"code","ed59668c":"code","88fd5bbe":"code","78c65ccf":"markdown","771cbf1c":"markdown","560508fb":"markdown","547515ce":"markdown","516db6a3":"markdown","b88747cb":"markdown","2d234905":"markdown","9d4f5e02":"markdown","3eaa2504":"markdown","5e732e33":"markdown","0bb74881":"markdown","51c1893b":"markdown","18b87384":"markdown","9ef737ad":"markdown"},"source":{"bcb75472":"import numpy as np, pandas as pd, matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential, Model\nfrom tensorflow.keras.layers import Dense","ed2ef421":"train_df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\nlabel = train_df.label\nprint(\"Label column: \", label.values[:10])\ntrain_df = train_df.drop(['label'], axis=1)\nprint(\"Train Data shape: \", train_df.shape)\ntest_df = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nprint(\"Test Data shape: \", test_df.shape)","a7c49436":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_df.iloc[i].values.reshape(28,28), cmap=plt.cm.binary)\n    plt.xlabel(str(label.values[i]))\nplt.show()","04b28506":"train_df = train_df.astype('float32')\ntest_df = test_df.astype('float32')\n\n# normalizing the data to help with the training\ntrain_df \/= 255\ntest_df \/= 255\n\n# one-hot encoding using keras' numpy-related utilities\ntrain_labels = tf.keras.utils.to_categorical(label)\n\nprint(\"Train Matrix shape: \", train_df.shape)\nprint(\"Test Matrix shape: \", test_df.shape)\nprint(\"Train Labels shape before One-Hot Encoding: \", label.shape)\nprint(\"Train Labels shape after One-Hot Encoding: \", train_labels.shape)","e3b39d8c":"model = Sequential()\nmodel.add(Dense(1024, input_shape=(784,)))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))","95b28756":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","f4dda92a":"model_data = model.fit(train_df, train_labels,\n                       batch_size=128, epochs=20,\n                       verbose=2)","cfdfd7e3":"model_data.history","922b94a1":"# plotting the metrics\nfig = plt.figure()\nplt.subplot(2,1,1)\nplt.plot(range(0,20), model_data.history['loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['Loss'], loc='lower right')\n\nplt.subplot(2,1,2)\nplt.plot(range(0,20), model_data.history['accuracy'],)\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['Accuracy'], loc='lower right')","35772afd":"predict_labels = model.predict_classes(test_df)\nprediction_df = pd.DataFrame(data=zip(range(1,len(test_df)), predict_labels.tolist()),\n            columns=['ImageId','Label'])\nprediction_df.head(5)","d32a8d4e":"prediction_df.to_csv('MNIST_Submission_ANN.csv', index=False)","0327a7dd":"import pandas as pd, numpy as np","d92b4c1e":"train_df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\nlabel = train_df.label\nprint(\"Label column: \", label.values[:10])\ntrain_df = train_df.drop(['label'], axis=1)\nprint(\"Train Data shape: \", train_df.shape)\ntest_df = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nprint(\"Test Data shape: \", test_df.shape)","0dbec744":"train_df = train_df.values.reshape(42000, 28,28,1)\ntest_df = test_df.values.reshape(28000, 28, 28, 1)","c3fe80b7":"train_df = train_df.astype('float32')\ntest_df = test_df.astype('float32')\n\n# normalizing the data to help with the training\ntrain_df \/= 255\ntest_df \/= 255\n\n# one-hot encoding using keras' numpy-related utilities\ntrain_labels = tf.keras.utils.to_categorical(label)\n\nprint(\"Train Matrix shape: \", train_df.shape)\nprint(\"Test Matrix shape: \", test_df.shape)\nprint(\"Train Labels shape before One-Hot Encoding: \", label.shape)\nprint(\"Train Labels shape after One-Hot Encoding: \", train_labels.shape)","bcf3cbe3":"import tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Conv2D, Dense, MaxPooling2D, Flatten, Dropout","1888b0b5":"model = Sequential()\n\n# Adding the Convolution layers\nmodel.add(Conv2D(filters = 64,kernel_size = (3,3),activation = 'relu',input_shape = (28,28,1)))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(.2))\n\nmodel.add(Conv2D(filters = 128,kernel_size = (3,3),activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(.2))\n\nmodel.add(Conv2D(128,kernel_size = (3,3),activation = 'relu'))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128,activation = 'relu'))\nmodel.add(Dense(10,activation = 'softmax'))\n\nmodel.summary()","d4f78ab0":"model.compile(optimizer='rmsprop',loss='categorical_crossentropy',\n              metrics=['accuracy'])","ed59668c":"model.fit(train_df,train_labels,epochs=20,batch_size = 65)","88fd5bbe":"results = model.predict(test_df)\nresults = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"MNIST_Submission_Keras_CNN.csv\",index=False)","78c65ccf":"## Visualising the data set","771cbf1c":"## Plotting model performance","560508fb":"## Processing the data","547515ce":"## Results","516db6a3":"# 2. Keras CNN Model","b88747cb":"# 1. Predicting using Fully Connected ANN","2d234905":"## Building the CNN Model","9d4f5e02":"### Reshaping the dataframe for CNN model fitting","3eaa2504":"### Loading the MNIST Data\n\nThe data files train.csv and test.csv contain gray-scale images of hand-drawn digits, from zero through nine.\n\nEach image is 28 pixels in height and 28 pixels in width, for a total of 784 pixels in total. Each pixel has a single pixel-value associated with it, indicating the lightness or darkness of that pixel, with higher numbers meaning darker. This pixel-value is an integer between 0 and 255, inclusive.\n\nThe training data set, (train.csv), has 785 columns. **The first column, called \"label\"**, is the digit that was drawn by the user. The rest of the columns contain the pixel-values of the associated image.\n\nThe test data set, (test.csv), is the same as the training set, except that it does not contain the \"label\" column.","5e732e33":"### Compile the Model","0bb74881":"### Train the Model","51c1893b":"## Data Preparations\n1. Data is currently flattened. Need to reshape it into a picture shape [nrows, ncols, nchannels]","18b87384":"## Building the ANN Model","9ef737ad":"# MNIST Handwritten Digit\n\n## Methods:\n* **Fully Connected ANN**\n* **Keras CNN + ANN**"}}