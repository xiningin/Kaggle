{"cell_type":{"d934f078":"code","7d3ea201":"code","b7fb3b79":"code","17134602":"code","0e3b0575":"code","8cdaf7c7":"code","67177990":"code","bd99532f":"code","66687081":"code","ed86920f":"code","33ed8384":"code","30074661":"code","8808dd30":"code","513bbec3":"code","af9e949f":"code","6df86ffa":"markdown","e88f2f4b":"markdown","20f67753":"markdown","e21cb540":"markdown","97828e11":"markdown"},"source":{"d934f078":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport skimage.io\nimport os \nimport glob\nimport tqdm\nimport tensorflow\n\nfrom tqdm import tqdm\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import InputLayer, Conv2D, BatchNormalization, MaxPool2D, Dropout, Flatten, Dense, Activation\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\n\n%matplotlib inline\n\n# from keras.preprocessing.image import load_img,img_to_array","7d3ea201":"generator = ImageDataGenerator()\nbatches   = generator.flow_from_directory('..\/input\/100-bird-species\/train')","b7fb3b79":"indices = batches.class_indices\n\nlabels  = list(indices.keys())\nlabels","17134602":"for X, y in batches:\n    fig, ax = plt.subplots(1, 5, figsize=(20, 20))\n    \n    for i in range(0,5):\n        img = X[i].astype('int')\n        label = labels[np.argmax(y[i])]\n        ax[i].imshow(img)\n        ax[i].set_title(label)\n        ax[i].set_xticks([])\n        ax[i].set_yticks([])\n\n    \n    plt.show()\n    break # We only need the first batch","0e3b0575":"train_datagen = ImageDataGenerator(rescale = 1\/255,\n                                   horizontal_flip=True,\n                                   vertical_flip=True,\n                                   zoom_range=0.2,\n                                   shear_range=0.2,\n                                   rotation_range=30,\n                                   fill_mode='nearest')\n\nvalid_datagen = ImageDataGenerator(rescale = 1\/255)\n\ntest_datagen  = ImageDataGenerator(rescale = 1\/255)","8cdaf7c7":"# Reading Directories \n\ntrain_directory = '..\/input\/100-bird-species\/train'\nval_directory   = '..\/input\/100-bird-species\/valid'\ntest_directory  = '..\/input\/100-bird-species\/test'","67177990":"train_generator=train_datagen.flow_from_directory(train_directory,\n                                                  target_size=(224,224),\n                                                  color_mode='rgb',\n                                                  class_mode='sparse',\n                                                  batch_size=256)","bd99532f":"val_generator=valid_datagen.flow_from_directory(val_directory,\n                                               target_size=(224,224),\n                                               color_mode='rgb',\n                                               class_mode='sparse',\n                                               batch_size=256)","66687081":"test_gemerator=test_datagen.flow_from_directory(test_directory,\n                                                target_size=(224,224),\n                                                color_mode='rgb',\n                                                class_mode='sparse',\n                                                batch_size=256)","ed86920f":"# Model Initialization\n\nfrom keras.applications import ResNet101V2\n\nconvlayer = ResNet101V2(input_shape=(224,224,3),\n                        weights='imagenet',\n                        include_top=False)","33ed8384":"# Freezing Layers\n\nfor layer in convlayer.layers:\n    layer.trainable=False","30074661":"# Building Model\n\nmodel=Sequential()\nmodel.add(convlayer)\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(2048,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1024,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(225,activation='softmax'))\n\nprint(model.summary())","8808dd30":"# Model Compile\n\nopt=tensorflow.keras.optimizers.Adam(lr=0.001)\n\nmodel.compile(loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'],\n              optimizer=opt)","513bbec3":"# Define Callbacks \n\nfilepath = '.\/best_weights.hdf5'\n\nearlystopping = EarlyStopping(monitor = 'val_accuracy', \n                              mode = 'max' , \n                              patience = 10,\n                              verbose = 1)\n\ncheckpoint    = ModelCheckpoint(filepath, \n                                monitor = 'val_accuracy', \n                                mode='max', \n                                save_best_only=True, \n                                verbose = 1)\n\ncallback_list = [earlystopping, checkpoint]","af9e949f":"model_history=model.fit(train_generator,\n                        validation_data=val_generator,\n                        epochs = 500,\n                        callbacks = callback_list,\n                        verbose = 1)","6df86ffa":"REFERENCES \n\n1) https:\/\/www.kaggle.com\/anuragmishra2311\/birds-classification-using-resnet-101\n\n2) https:\/\/www.kaggle.com\/naim99\/birds-species-classification\n\n3) https:\/\/www.kaggle.com\/aditya276\/bird-cnn-vgg16-99-accuracy-on-test-set","e88f2f4b":"### IMPORTING LIBRARIES","20f67753":"> `DATA AUGMENTATION`","e21cb540":"### IMPORT \/ VIEWING \/ PREPROCESSING DATASET","97828e11":"### BUILDING MODEL (RESTNET101)"}}