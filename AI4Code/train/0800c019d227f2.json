{"cell_type":{"7a644f1b":"code","a6329342":"code","98487dcb":"code","47608d66":"code","fa7499d2":"code","4d7c62f5":"code","6c71d99a":"code","f3057ee8":"markdown","95cacec6":"markdown","85c9fdf5":"markdown","a12f2f38":"markdown","4392ea1e":"markdown"},"source":{"7a644f1b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a6329342":"# Load libraries\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nimport optuna.integration.lightgbm as lgb","98487dcb":"# Load data\ntrain = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/test.csv')\nprint('Train size:', train.shape)\nprint('Test size:', test.shape)\n\nprint('Train data info: ')\ndisplay(train.head())\ntrain.info()","47608d66":"features = [f'cont{i}' for i in range(1, 15)]\n\nscaler = StandardScaler()\nscaler.fit(train[features])\n\n# transform step\ntrain[features] = scaler.transform(train[features])\ntest[features] = scaler.transform(test[features])","fa7499d2":"# separate features and target\nX_train = train[features]\ny_train = train['target']\n\nX_test = test[features]","4d7c62f5":"%%time\n\ndtrain = lgb.Dataset(X_train, label=y_train)\n\nparams = {\n    \"objective\": \"regression\", \n    \"metric\": \"rmse\", \n    \"boosting_type\": \"gbdt\", \n    \"seed\": 1\n        }\n\ntuner = lgb.LightGBMTunerCV(\n    params, dtrain, verbose_eval=False, early_stopping_rounds=10, \n    num_boost_round=10000, folds=KFold(n_splits=5, shuffle=True, random_state=1), seed=1\n)\ntuner.run()","6c71d99a":"print(\"Best score:\", tuner.best_score)\nbest_params = tuner.best_params\nprint(\"Best params:\", best_params)\nprint(\"  Params: \")\nfor key, value in best_params.items():\n    print(\"    {}: {}\".format(key, value))","f3057ee8":"## Abstract\n- In this notebook, I will introduce very simple example of 'LightGBMTunerCV' from 'optuna.integration.lightgbm'.\n- Because 'it tunes the important hyperparameter variables in order', we can reduce the number of trials for tuning.\n- For more details, see [official documant](https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/generated\/optuna.integration.lightgbm.LightGBMTunerCV.html) and [this blog](https:\/\/medium.com\/optuna\/lightgbm-tuner-new-optuna-integration-for-hyperparameter-optimization-8b7095e99258)\n- Finnaly I got CV = 0.6974 !","95cacec6":"### Standarization\n- Before tuning, let's standardize explain variables.\n- In this competition, all of the columns in given data are continuous.","85c9fdf5":"## Discussion\n- As described above, I used features as it was. Better score is expected by adequate feature engineering.\n- In 'optuna.integration', several models are covered, for example, Keras, sklearn, XGBoost and so on. It's worth tryng them.","a12f2f38":"## Tuning Result","4392ea1e":"## Tuning\n'LightGBMTunerCV' is a hyperparameter tuner for LightGBM with cross-validation."}}