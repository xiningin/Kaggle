{"cell_type":{"ed5f3aa1":"code","7f515f3c":"code","462603ad":"code","9166816d":"code","0d52e116":"code","44736eec":"code","5fdd0ec0":"code","93133bb6":"code","10371528":"code","b2410edc":"code","856773f8":"code","6f210af6":"code","18c612d9":"code","5416edb9":"code","83120b98":"code","8dcddb45":"code","dfe3c1e3":"code","64f01dc8":"code","57465de3":"code","5a91fc74":"code","582c7439":"code","8fb8323c":"code","aad2bdb1":"code","dce04524":"code","423839b4":"code","44d6b148":"code","ec803082":"code","c927095d":"code","c300c013":"code","1a1afe40":"code","38b6b1bc":"code","8ffe8a78":"code","53398090":"code","210edd3f":"code","7e20b06e":"code","ee624316":"code","e1d77b11":"code","3b1e1977":"code","cd0fa99d":"code","f205a1cf":"code","18ccb1f2":"code","4d5028b5":"code","2d232a66":"code","d6516b63":"code","25400247":"code","bd04860d":"code","8756429f":"code","1c97d3d4":"code","a5d519c7":"code","5f2dae2b":"markdown","f6601487":"markdown","4f1b0bb2":"markdown","2ec79a88":"markdown","3846771b":"markdown","914bc86d":"markdown","679358a8":"markdown","0c6735f4":"markdown","793f074d":"markdown","0c4d4e62":"markdown","977dc868":"markdown","a052fc83":"markdown","4d85a542":"markdown","e1430cec":"markdown","4dd773bc":"markdown","7953e992":"markdown","9ccd4f12":"markdown","bfaf8595":"markdown","88a76a78":"markdown","3e1fc7bf":"markdown","1a1ce8fc":"markdown","d14e984a":"markdown","22bec919":"markdown","0ac55b8c":"markdown","e2dbbd3e":"markdown","2d3e5b96":"markdown"},"source":{"ed5f3aa1":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n%matplotlib inline","7f515f3c":"train = pd.read_json('..\/input\/stanford-covid-vaccine\/train.json', lines=True)\ntest = pd.read_json('..\/input\/stanford-covid-vaccine\/test.json', lines=True)\nsubmission = pd.read_csv('..\/input\/stanford-covid-vaccine\/sample_submission.csv')","462603ad":"train.head()","9166816d":"test.head()","0d52e116":"submission.head()","44736eec":"train.columns","5fdd0ec0":"test.columns","93133bb6":"set(train.columns).difference(test.columns).difference(submission.columns)","10371528":"# let's do some cleaning and understand our data more clearly\ntrain = train.drop(['index'], axis=1)\ntest = test.drop(['index'], axis=1)","b2410edc":"train.info()","856773f8":"print(train['sequence'].apply(lambda x: len(x)).value_counts())  # all the sequences have 107 bases\nprint(train['structure'].apply(lambda x: len(x)).value_counts())  # all the structures have 107 bases\nprint(train['predicted_loop_type'].apply(lambda x: len(x)).value_counts())  # all the structures have 107 bases","6f210af6":"train.head()","18c612d9":"test.head()","5416edb9":"3005 * 130 + 629 * 107","83120b98":"train['seq_counts'] = train['sequence'].apply(lambda x: Counter(x.upper()))\ntrain['seq_counts']","8dcddb45":"train['seq_counts'].apply(lambda x: (x.keys(), x.values()))","dfe3c1e3":"# doing a bit of feature engieering by taking up the contribution of each code\npercentage = []\nfor i in range(len(train)):\n  count = train.iloc[i]['seq_counts']\n  percentage.append((count['A']\/train.iloc[i]['seq_length'],\n                     count['G']\/train.iloc[i]['seq_length'],\n                     count['C']\/train.iloc[i]['seq_length'],\n                     count['U']\/train.iloc[i]['seq_length']))\n  \npercentage = pd.DataFrame(percentage, columns=['A_p', 'G_p', 'C_p', 'U_p'])\npercentage","64f01dc8":"pairs = []\nall_partners = []\nfor j in range(len(train)):\n    partners = [-1 for i in range(130)]\n    pairs_dict = {}\n    queue = []\n    for i in range(0, len(train.iloc[j]['structure'])):\n        if train.iloc[j]['structure'][i] == '(':\n            queue.append(i)\n        if train.iloc[j]['structure'][i] == ')':\n            first = queue.pop()\n            try:\n                pairs_dict[(train.iloc[j]['sequence'][first], train.iloc[j]['sequence'][i])] += 1\n            except:\n                pairs_dict[(train.iloc[j]['sequence'][first], train.iloc[j]['sequence'][i])] = 1\n                \n            partners[first] = i\n            partners[i] = first\n    \n    all_partners.append(partners)\n    \n    pairs_num = 0\n    pairs_unique = [('U', 'G'), ('C', 'G'), ('U', 'A'), ('G', 'C'), ('A', 'U'), ('G', 'U')]\n    for item in pairs_dict:\n        pairs_num += pairs_dict[item]\n    add_tuple = list()\n    for item in pairs_unique:\n        try:\n            add_tuple.append(pairs_dict[item]\/pairs_num)\n        except:\n            add_tuple.append(0)\n    pairs.append(add_tuple)\n    \npairs = pd.DataFrame(pairs, columns=['U-G', 'C-G', 'U-A', 'G-C', 'A-U', 'G-U'])\npairs","57465de3":"pairs_rate = []\n\nfor j in range(len(train)):\n    res = dict(Counter(train.iloc[j]['structure']))\n    pairs_rate.append(res['('] \/ 53.5)  # 2 * res['(']\/107\n    \npairs_rate = pd.DataFrame(pairs_rate, columns=['pairs_rate'])\npairs_rate","5a91fc74":"loops = []\nfor j in range(len(train)):\n    counts = dict(Counter(train.iloc[j]['predicted_loop_type']))\n    available = ['E', 'S', 'H', 'B', 'X', 'I', 'M']\n    row = []\n    for item in available:\n        try:\n            row.append(counts[item] \/ 107)\n        except:\n            row.append(0)\n    loops.append(row)\n    \nloops = pd.DataFrame(loops, columns=available)\nloops","582c7439":"bbps_dir = '..\/input\/stanford-covid-vaccine\/bpps'\n\nbbps_fns = os.listdir(bbps_dir)\nlen(train) + len(test) == len(bbps_fns)","8fb8323c":"def get_bppm(id_):\n    return np.load(os.path.join(bbps_dir, bbps_fns[id_]))\n\n\ndef draw_structure(structure: str):\n    pm = np.zeros((len(structure), len(structure)))\n    start_token_indices = []\n    for i, token in enumerate(structure):\n        if token == \"(\":\n            start_token_indices.append(i)\n        elif token == \")\":\n            j = start_token_indices.pop()\n            pm[i, j] = 1.0\n            pm[j, i] = 1.0\n    return pm\n\n\ndef plot_structures(bppm: np.ndarray, pm: np.ndarray):\n    fig, axes = plt.subplots(1, 2, figsize=(10, 10))\n    axes[0].imshow(bppm)\n    axes[0].set_title(\"BPPM\")\n    axes[1].imshow(pm)\n    axes[1].set_title(\"structure\")\n    plt.show()","aad2bdb1":"for _ in range(5):\n  idx = np.random.randint(len(bbps_fns))\n  fn = bbps_fns[idx]\n  df_id = fn.split('.')[0]\n\n  print(fn)\n  bbps_ff = get_bppm(idx)\n  struct = train[train['id']==df_id]['structure'].values[0] if df_id in train['id'].to_list() else test[test['id']==df_id]['structure'].values[0]\n  plot_struct = draw_structure(struct)\n  plot_structures(bbps_ff, plot_struct)","dce04524":"target_cols = submission.columns.to_list()[1:]\nfor col in target_cols:\n  print(train[col].apply(lambda x: len(x)).sum()\/len(train))\n\n# prediction sequence lenght is 68","423839b4":"import tensorflow as tf\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras import layers as L\nfrom sklearn.model_selection import StratifiedKFold, KFold, GroupKFold","44d6b148":"def tokentoInt(bases):\n  return {x:i for i, x in enumerate(bases)}\n  pass\n\nprint(tokentoInt(\"\".join([x for x in loops.columns])))","ec803082":"def gru_layer(hidden_dim, dropout):\n    return L.Bidirectional(L.GRU(hidden_dim, dropout=dropout, return_sequences=True, kernel_initializer='orthogonal'))\n\ndef lstm_layer(hidden_dim, dropout):\n    return L.Bidirectional(L.LSTM(hidden_dim, dropout=dropout, return_sequences=True, kernel_initializer='orthogonal'))","c927095d":"# source : https:\/\/www.kaggle.com\/c\/stanford-covid-vaccine\/discussion\/183211\ndef MCRMSE(y_true, y_pred):\n    colwise_mse = tf.reduce_mean(tf.square(y_true - y_pred), axis=1)\n    return tf.reduce_mean(tf.sqrt(colwise_mse), axis=1)","c300c013":"def encoding(df, col):\n  \"\"\"\n  df: dataframe containing sequences and the features\n  col: column to apply encoding\n      : valid values are: 'sequence', 'structure' and 'predicted_loop_type'\n  \"\"\"\n  try:\n    if col == 'sequence':\n      seq_encoding = tokentoInt('AGCU')\n      \n    elif col == 'structure':\n      seq_encoding = tokentoInt('(.)')\n\n    elif col == 'predicted_loop_type':\n      seq_encoding = tokentoInt(\"\".join([x for x in loops.columns]))\n\n    return np.array(df[col].apply(lambda seq: [seq_encoding[x] for x in seq]).values.tolist())\n\n  except KeyError:\n    print('Invalid arguments as col')","1a1afe40":"from tqdm import tqdm","38b6b1bc":"private_test = test.query(\"seq_length==130\").copy()\npublic_test = test.query(\"seq_length==107\").copy()\n\n# this split on train set is applied if none of the cv folding aren't applied\ntrain_data = train.query('SN_filter==0')\nval_data = train.query('SN_filter==1')","8ffe8a78":"def get_features(df):\n  seq_inp = encoding(df, 'sequence')\n  struc_inp = encoding(df, 'structure')\n  plt_inp = encoding(df, 'predicted_loop_type')\n  '''\n  bpps_arr = []\n  for i in tqdm(range(len(df))):\n    idx = df.loc[i]['id']\n    bpps_arr.append(np.expand_dims(np.load(os.path.join(bbps_dir, str(idx)+'.npy')), axis=-1))\n\n  cnn_inp = np.array(bpps_arr) # cnn data input\n  '''\n  return seq_inp, struc_inp, plt_inp #, cnn_inp","53398090":"train_labels = np.array(train[target_cols].values.tolist()).transpose(0, 2, 1)\ntrain_labels[0, 0, :]","210edd3f":"def seq_model(encoding_dict,\n              seq_len=107,\n              pred_len=68,\n              dropout=0.4,\n              sp_dropout=0.2,\n              embed_size=128,\n              hidden_dim=256,\n              layers=2,\n              gru=False):\n  \n  # one sequence at a time of len 107 (if training specified)\n  input = L.Input(shape=(seq_len, ))\n\n  # apply embedding layer\n  embed = L.Embedding(input_dim=len(encoding_dict),\n                      output_dim=embed_size)(input)\n\n  '''reshaped = tf.reshape(embed,\n                        shape=(-1, embed.shape[1], embed.shape[2] * embed.shape[3]))'''\n  hidden = tf.keras.layers.SpatialDropout1D(sp_dropout)(embed)\n  # apply bidirectional lstm\/gru layers * layers count\n  if gru:\n    for _ in range(layers):\n      hidden = gru_layer(hidden_dim, dropout)(hidden)\n  else:\n    for _ in range(layers):\n      hidden = gru_layer(hidden_dim, dropout)(hidden)\n  \n  return tf.keras.Model(input, hidden)\n  pass","7e20b06e":"def cnn_model(input_shape=(107, 107), flag=False):\n  \"\"\"\n  can be of shape 107*107(train and public set) and 130*130(private set) \n  \"\"\"\n  input = L.Input(shape=(*input_shape, 1))  # images are of 2-D\n\n  # let's just go with 3 layers of CNN\n  x = L.Conv2D(kernel_size=(5, 5),\n               filters=64,\n               strides=(2, 2))(input)\n  x = L.MaxPool2D(pool_size=(2, 2))(x)\n  x = L.Activation('relu')(x)\n\n  x = L.Conv2D(kernel_size=(3, 3),\n               filters=256)(x)\n  x = L.MaxPool2D(pool_size=(2, 2))(x)\n  x = L.Activation('relu')(x)\n  \n  x = L.Conv2D(kernel_size=(1, 4), filters=512)(x)\n  x = L.Activation('relu')(x)\n  \n  if flag:\n    x = L.Conv2D(kernel_size=(2, 2), filters=512)(x)\n    x = L.Activation('relu')(x)\n    x = tf.reshape(x, shape=(-1, x.shape[1]*x.shape[2], x.shape[-1], 1))\n    return tf.keras.Model(input, x)\n\n  x = tf.reshape(x, shape=(-1, x.shape[1]*x.shape[2], x.shape[-1], 1))\n  x = L.Conv2D(kernel_size=(2, 1), filters=1)(x)\n  x = L.Activation('relu')(x)\n\n\n\n\n  return tf.keras.Model(input, x)\n  pass","ee624316":"def main_model(seq_len=107, pred_len=68, cnn_input_shape=(107, 107), flag=False):\n  \"\"\"\n  Consists of four models, one seq_model each for sequence, structure and predicted_loop\n  and one CNN for BPPS files.\n  \"\"\"\n  # extract from sequences\n  Seq_model = seq_model(tokentoInt('AGCU'), seq_len=seq_len, pred_len=pred_len, dropout=0.0)\n  Seq_op = Seq_model.output  # for train,  seq_len = 107\n\n  Struct_model = seq_model(tokentoInt('(.)'), seq_len=seq_len, pred_len=pred_len, dropout=0.0)\n  Struct_op = Struct_model.output\n\n  PLT_model = seq_model(tokentoInt(\"\".join([x for x in loops.columns])), seq_len=seq_len, pred_len=pred_len, dropout=0.0)\n  PLT_op = PLT_model.output\n  '''\n  # add cnn layer output\n  CNN_model = cnn_model(cnn_input_shape, flag=flag)\n  CNN_op = CNN_model.output\n  CNN_op = tf.reshape(CNN_op, shape=(-1, CNN_op.shape[1], CNN_op.shape[2] * CNN_op.shape[3]))\n  \n  print(Seq_op.shape, Struct_op.shape, PLT_op.shape, CNN_op.shape)\n  '''\n  # now we got 4 tensors of shape (BS, 107, 512)\n  ip = tf.add_n([Seq_op, Struct_op, PLT_op])\/3\n  print(ip.shape)\n  ip = ip[:, :pred_len]\n  ip = L.Dense(5, activation='linear')(ip)\n  print(ip.shape)\n  return tf.keras.Model(inputs=[Seq_model.input, Struct_model.input, PLT_model.input], outputs=ip)\n  pass","e1d77b11":"model = main_model()\nmodel.summary()","3b1e1977":"model.compile(loss=MCRMSE,\n           optimizer=tf.keras.optimizers.Adam(lr=0.001))","cd0fa99d":"lr_callback = tf.keras.callbacks.ReduceLROnPlateau(patience=5)\nsv_lstm = tf.keras.callbacks.ModelCheckpoint(f'lstm.h5')","f205a1cf":"model.fit(get_features(train), train_labels,\n       epochs=75, batch_size=64,\n       callbacks=[lr_callback, sv_lstm])","18ccb1f2":"model_long = main_model(seq_len=130, pred_len=130, cnn_input_shape=(130, 130), flag=True)\nmodel_long.summary()","4d5028b5":"model_long.load_weights('.\/lstm.h5')","2d232a66":"pred_long = model_long.predict(get_features(private_test), verbose=1)\npred_long.shape","d6516b63":"model_short = main_model(seq_len=107, pred_len=107, cnn_input_shape=(107, 107), flag=True)\nmodel_short.summary()","25400247":"model_short.load_weights('.\/lstm.h5')\npred_short = model_short.predict(get_features(public_test), verbose=1)\npred_short.shape","bd04860d":"def format_predictions(public_preds, private_preds):\n    preds = []\n    \n    for df, preds_ in [(public_test, public_preds), (private_test, private_preds)]:\n        for i, uid in enumerate(df.id):\n            single_pred = preds_[i]\n\n            single_df = pd.DataFrame(single_pred, columns=target_cols)\n            single_df['id_seqpos'] = [f'{uid}_{x}' for x in range(single_df.shape[0])]\n\n            preds.append(single_df)\n\n    return pd.concat(preds).groupby('id_seqpos')","8756429f":"df = format_predictions(pred_short, pred_long)\ndf.first()","1c97d3d4":"submission = df.sum().reset_index()\nsubmission","a5d519c7":"submission.to_csv('submission.csv', index=False)","5f2dae2b":"This is a great insight found by [Hidehisa Arai](https:\/\/https:\/\/www.kaggle.com\/hidehisaarai1213\/openvaccine-checkout-bpps). Let's cultivate on it.","f6601487":"# Model\nSo my plan is to use the sequences, structures and predicted loops features along with bbps features (via CNN layers) with separate custom embedding for each sequential input and then concatenating them all together to get our desired output sequence of measures.","4f1b0bb2":"## For Predicted Loop Type","2ec79a88":"## BBPS features","3846771b":"Our target columns are","914bc86d":"\n\n*   There were 3029 RNA sequeces.\n*   Experiments were done using first 68 values of the 107-length sequence.\n-   These 3069 (107-base) were split into 2400 train + 629 test with filters being applied to choose the 629 samples. The filters are as follows:\n\n\n\n---\n\n1. Minimum value across all 5 conditions must be greater than -0.5.\n2. Mean signal\/noise across all 5 conditions must be greater than 1.0. [Signal\/noise is defined as mean( measurement value over 68 nts )\/mean( statistical error in measurement value over 68 nts)]\n3. To help ensure sequence diversity, the resulting sequences were clustered into clusters with less than 50% sequence similarity, and the 629 test set sequences were chosen from clusters with 3 or fewer members. That is, any sequence in the test set should be sequence similar to at most 2 other sequences.\n\n---\nAnd as per the instructions, Private LB scoring will be made on 130-base 3005 sequences where the measurement is done on the basis of first 91 bases.\n\n> Note that, the above filters won't be applied to these 3005 samples.","679358a8":"From here, I will go for a very simple model by stacking 3 seq-models and one DNN model for our created features. Let's move ahead.","0c6735f4":"No null values present in the train set.","793f074d":"## Preparing Data to fit into our Model\n- Sequence Model\n- Structure Model\n- Predicted Loop Type\n- CNN model for BPPS files","0c4d4e62":"## For Sequences:\n\n- The possible values are A, G, C and U.","977dc868":"Some Measure clues that you might miss:\n- Test set has two types of sequences one of length 107 and another of length 130. \n- As mentioned earlier, the 107 base sequences are filtered out from the 3029 samples of the previous dataset, and these consists of public leader board.\n- Rest 3005 samples are of length 130.","a052fc83":"Each  ```.npy``` file corresponds to each sample in our train and test dataset IDs.\n\n","4d85a542":"# Understading our Train set","e1430cec":"If you find this notebook, consider upvoting the same, I will experimenting with other approaches, I set this as my base model as of now. Thank you for reading so far.","4dd773bc":"### Features","7953e992":"So I plan to split the data like following:\n- train: `train_data` and `valid_data` by filtering on SN_filer == 1\n- test: `private_test` and `public_test` filtered on seq_length","9ccd4f12":"In RNA, its sequence that matters. Let's have a look on the paired-sequence. (We will focus on 3-gram model later on.)","bfaf8595":"## For Structures","88a76a78":"And interestingly, our result will be measured or evalulated on 'reactivity', 'deg_Mg_pH10', 'deg_Mg_50C'. However, we gotta predict for all the 5 values.","3e1fc7bf":"# EDA on RNA Sequences","1a1ce8fc":"### Labels","d14e984a":"Ah! Got something. If we look at the train set columns and test set columns, here is what I found.","22bec919":"### Compare between Structure and BPPS files","0ac55b8c":"This is what is the lenght of our submission file. So, we gotta predict the five measurements for each base of each sequence, or say it in terms of Sequence models, we gotta predict sequences of length x from sequences of length x, where the values of x can be 107 -> 107 and 130 -> 130 for test cases and 107 -> 68 for train cases.","e2dbbd3e":"Apart from the columns from submission files, we have the above columns extra in our train set. This thing is mentiond in the Data section of the competition, however I am summarizing a few points as per my understading.","2d3e5b96":"And reactivity_error,\tdeg_error_Mg_pH10,\tdeg_error_pH10,\tdeg_error_Mg_50C,\tdeg_error_50C,\treactivity,\tdeg_Mg_pH10,\tdeg_pH10,\tdeg_Mg_50C,\tdeg_50C; these columns have length 68 as its measured on first 68 bases."}}