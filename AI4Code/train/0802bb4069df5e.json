{"cell_type":{"b5f94815":"code","bd305985":"code","c9a0b9de":"code","a2c722d3":"code","860e6407":"code","2b1321c4":"code","936b5356":"code","9731a0bc":"code","abcb93cf":"code","f4270bf5":"code","838b5fec":"code","4c110138":"code","b26003e3":"code","f4e015fd":"code","71928d2b":"code","1be9df07":"code","ec8666e1":"code","b8009c3d":"code","f330b044":"code","6aa9e099":"code","07a02fa5":"code","c28ce065":"code","4aea014e":"code","a6255522":"code","a0b54542":"code","a084c43d":"code","46f2c4d8":"markdown","b58bd1f6":"markdown","6b85eb64":"markdown","781220f0":"markdown","9294432a":"markdown","39e37b6f":"markdown","30f73dde":"markdown","073d02f0":"markdown","aa550bb8":"markdown","a6f06710":"markdown","0cd7124d":"markdown","4e2731e4":"markdown","040b321a":"markdown","c1da570b":"markdown","356660a3":"markdown","37d4883f":"markdown","5d6dde9f":"markdown","8381b333":"markdown","8b04ba63":"markdown","ac3160cb":"markdown","546ee66c":"markdown","6fbb08f2":"markdown","f1d39560":"markdown"},"source":{"b5f94815":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","bd305985":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\n","c9a0b9de":"#input the data\ntrain = pd.read_csv(\"..\/input\/train.csv\");\ntest = pd.read_csv('..\/input\/test.csv');\ntest_new = pd.read_csv('..\/input\/test.csv');","a2c722d3":"train.head()","860e6407":"train.info()","2b1321c4":"train[train['Embarked'].isnull()]","936b5356":"train['Embarked'].fillna('C',inplace=True);\ntrain[train['Embarked'].isnull()]","9731a0bc":"train[train['Age'].isnull()]","abcb93cf":"print('Mr is for people between')\nprint(train[train['Name'].str.contains(\"Mr\\.\")]['Age'].min())\nprint('and')\nprint(train[train['Name'].str.contains(\"Mr\\.\")]['Age'].max())\nprint('Mean is')\nprint(train[train['Name'].str.contains(\"Mr\\.\")]['Age'].mean())\nprint(' ')\n\nprint('Master is for people between')\nprint(train[train['Name'].str.contains(\"Master\\.\")]['Age'].min())\nprint('and')\nprint(train[train['Name'].str.contains(\"Master\\.\")]['Age'].max())\nprint('Mean is')\nprint(train[train['Name'].str.contains(\"Master\\.\")]['Age'].mean())\nprint(' ')\n\nprint('Mrs is for people between')\nprint(train[train['Name'].str.contains(\"Mrs\\.\")]['Age'].min())\nprint('and')\nprint(train[train['Name'].str.contains(\"Mrs\\.\")]['Age'].max())\nprint('Mean is')\nprint(train[train['Name'].str.contains(\"Mrs\\.\")]['Age'].mean())\nprint(' ')\n\nprint('Miss is for people between')\nprint(train[train['Name'].str.contains(\"Miss\\.\")]['Age'].min())\nprint('and')\nprint(train[train['Name'].str.contains(\"Miss\\.\")]['Age'].max())\nprint('Mean is')\nprint(train[train['Name'].str.contains(\"Miss\\.\")]['Age'].mean())\nprint(' ')\n","f4270bf5":"\nx = train[train['Age'].isnull()].index.tolist()\nfor i in x:\n    name = train.iloc[i]['Name']\n    if(str('Mr.') in name):\n        if(train.iloc[i]['Parch']>0):\n                train.loc[train['PassengerId']==(i+1),'Age'] = random.randrange(11, 16)\n        else:\n                 train.loc[train['PassengerId']==(i+1),'Age'] = random.randrange(16, 50)\n    elif(str('Master.') in name):\n          train.loc[train['PassengerId']==(i+1),'Age'] = random.randrange(1, 10)\n    elif(str('Mrs.') in name):\n         train.loc[train['PassengerId']==(i+1),'Age'] = random.randrange(21, 63)\n    elif(str('Miss.') in name):\n        if(train.iloc[i]['Parch']>0):\n                train.loc[train['PassengerId']==(i+1),'Age'] = random.randrange(1, 18)\n        else:\n                train.loc[train['PassengerId']==(i+1),'Age'] = random.randrange(18, 35)\n\ntrain[train['Age'].isnull()]","838b5fec":"train.loc[train['PassengerId']==767,'Age']=40\ntrain[train['Age'].isnull()]","4c110138":"train.info()","b26003e3":"train.drop(['PassengerId','Name','Cabin','Ticket'],axis=1,inplace=True)\ntrain.info()","f4e015fd":"train=pd.get_dummies(train,columns=['Sex','Embarked'])\ntrain.drop(['Sex_female','Embarked_Q'],axis=1,inplace=True)\ntrain.head()","71928d2b":"plt.figure(figsize=(12,10))\ncor = train.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","1be9df07":"train_x = train.iloc[:,1:]\ntrain_y= train.iloc[:,0]\n\ntrain_x = preprocessing.scale(train_x)\ntrain_x","ec8666e1":"classifier=Sequential()\nclassifier.add(Dense(output_dim=12,init='uniform',activation='relu',input_dim=8))\nclassifier.add(Dropout(0.3))\nclassifier.add(Dense(output_dim=8,init='uniform',activation='relu'))\nclassifier.add(Dropout(0.2))\nclassifier.add(Dense(output_dim=1,init='uniform',activation='sigmoid'))\nclassifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","b8009c3d":"classifier.fit(train_x,train_y,batch_size=10,epochs=300)","f330b044":"test.head()\npassengers = test['PassengerId'] \nprint(test.info())","6aa9e099":"# handle missing age\ny = test[test['Age'].isnull()].index.tolist()\nfor i in y:\n    name = test.iloc[i]['Name']\n    if(str('Mr.') in name):\n        if(test.iloc[i]['Parch']>0):\n                test.loc[i,'Age'] = random.randrange(11, 16)\n        else:\n                 test.loc[i,'Age'] = random.randrange(16, 50)\n    elif(str('Master.') in name):\n          test.loc[i,'Age'] = random.randrange(1, 10)\n    elif(str('Mrs.') in name):\n         test.loc[i,'Age'] = random.randrange(21, 63)\n    elif(str('Miss.') in name):\n        if(test.iloc[i]['Parch']>0):\n                test.loc[i,'Age'] = random.randrange(1, 18)\n        else:\n                test.loc[i,'Age'] = random.randrange(18, 35)\n\ntest.loc[88,'Age']= random.randrange(18, 35)               \ntest[test['Age'].isnull()]\n","07a02fa5":"#handle missing fare\ntest.loc[152,'Fare']=7.7500\ntest[test['Fare'].isnull()]","c28ce065":"\ntest.drop(['PassengerId','Name','Cabin','Ticket'],axis=1,inplace=True)\ntest.info()","4aea014e":"test=pd.get_dummies(test,columns=['Sex','Embarked'])\ntest.drop(['Sex_female','Embarked_Q'],axis=1,inplace=True)\n\ntest = preprocessing.scale(test)\ntest","a6255522":"y_pred = classifier.predict(test) \npred=[]\nfor i in range(0,y_pred.shape[0]):\n    if(y_pred[i]>0.5):\n        pred.append(1)\n    else:\n        pred.append(0)","a0b54542":"test_new.head()","a084c43d":"output = pd.DataFrame({'PassengerId': test_new.PassengerId,'Survived': pred})\noutput.to_csv('submission.csv', index=False)","46f2c4d8":"### Feature encoding","b58bd1f6":"lets again check the info om the dataset.","6b85eb64":"We missed out a Dr in the missing list lets handle it too\n","781220f0":"**Missing values handled**","9294432a":"Lets check Info of training data to know data types and missing values of columns.","39e37b6f":"There is a relation between Age and Name (Mr,Miss,Mrs...) so based on that we can estimate age and fill missing values.","30f73dde":"## Prediction","073d02f0":"2. Now lets check missing values in Age","aa550bb8":"Missing values are present in \n1. Age\n2. Cabin\n3. Embarked\n\nCabin has too many missing values i think we can't handle it so lets drop that coulmn, also we will drop passengerId as it is just a index from 1-891.","a6f06710":"Most of the entries from 'Q(Queenstown)' look to have ticket no above 330000 so think it might they might not be from Q. So they should be from S(Southampton) or C(Cherbourg). My best guess is from ticket and fare they might be from C(Cherbourg).","0cd7124d":"1. 1st we will check missing values in Embarked.","4e2731e4":"Converting Ctegorical variables into numbers. ","040b321a":"Except for cabin all the missing values are handled.","c1da570b":"Cabin has too many missing values so we drop it and PassengerId and name are also not useful fro predction so we drop them too. ","356660a3":"So based on those upper and lower limits in the dataset let us fill missing values. For Mr if parch is present lest limit till 16 and for Miss if parch is present lest limit for 18. Also for Miss lest limit max for 35, for Master lets limit max for 10.","37d4883f":"**Information on the dataset**","5d6dde9f":"#### Handle Missing values","8381b333":"Lets look at relational heat map for feature selection.","8b04ba63":"### Normalization","ac3160cb":"**Missing values handled.**","546ee66c":"### Training Data","6fbb08f2":"## Data Preprocessing","f1d39560":"**Preidcting test set**"}}