{"cell_type":{"7ce2eaf4":"code","5d8147d1":"code","db66d121":"code","732dda18":"code","d4483423":"code","30c3fc4b":"code","ccef97d6":"code","bb8befdb":"code","0217d252":"code","a36311e9":"code","6eb0b675":"code","e8e5e058":"code","c123c3d9":"code","ff0078e2":"code","7ac38ec8":"code","54dfebe4":"code","edf59418":"code","8c5d7b25":"code","079aba7a":"code","c7dffcef":"code","bca2be67":"code","99256e2c":"code","8b7f5a03":"code","bcffb83d":"code","1d62e01c":"code","7a561fac":"code","9f8ddb3f":"code","7ec7ade7":"code","76dd4f51":"markdown","31243c11":"markdown"},"source":{"7ce2eaf4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5d8147d1":"#read Csv File\ndata=pd.read_csv('\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')\ndata.head()","db66d121":"data.describe()","732dda18":"#to Find any missing Value\ndata.isnull().sum()","d4483423":"##To fill the missing values with 0\n\ndata = data.fillna(0)\n\ndata.isnull().sum()","30c3fc4b":"import matplotlib.pyplot as mp\nimport seaborn as sb\nimport plotly.express as px\nsb.set()","ccef97d6":"data.head()","bb8befdb":"mp.pie(data['gender'].value_counts(),labels=data['gender'].value_counts().index,autopct='%1.1f%%')","0217d252":"grp1=data.groupby(['gender','specialisation'])[['salary']].mean().reset_index()\nfig=px.bar(grp1[['gender','specialisation','salary']].sort_values('salary',ascending=False),x='gender',y='salary',color='specialisation',template='ggplot2',log_y=True)\nfig.show()\n","a36311e9":"grp2 = data.groupby([\"degree_t\"])[[\"degree_p\"]].mean().reset_index()\nfig2=px.pie(grp2,values='degree_p',names='degree_t',template='seaborn')\nfig2.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig2.show()","6eb0b675":"grp1","e8e5e058":"grp2","c123c3d9":"D=data.copy()\ndef plot_wrt_feature(feature):\n     return sb.countplot(x=feature,data=D,hue='status')","ff0078e2":"plot_wrt_feature('ssc_b')","7ac38ec8":"plot_wrt_feature('degree_t')","54dfebe4":"mp.barh(data['status'].value_counts().index,data['status'].value_counts(),tick_label =data['status'].value_counts())","edf59418":"plot_wrt_feature('workex')","8c5d7b25":"plot_wrt_feature('specialisation')","079aba7a":"mp.bar(data['specialisation'].value_counts().index,data['specialisation'].value_counts())","c7dffcef":"sb.heatmap(data.corr(),annot=True)","bca2be67":"data=data.assign(outcome=(data['status']=='Placed').astype(int))\ndata.head()","99256e2c":"Y=data['outcome']\nvariables=['ssc_p','hsc_b','degree_p','degree_t','etest_p','mba_p']\nX=data[variables]","8b7f5a03":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\n\nX_train, X_test, y_train, y_test = train_test_split(X,Y, test_size=.30, random_state=1)\n\n#numerical_cols = [col for col in X_train.columns if X_train[col].isnull.any]\ns = (X_train.dtypes == 'object')\ncategorical_cols = list(s[s].index)\n\n#PreProcessing fro numerical data. \n\n#numerical_transformer = SimpleImputer(strategy='constant')\n\n#PreProcessing for categorcial data. \n\ncategorical_transformer = Pipeline(steps=[('imputer',SimpleImputer(strategy='most_frequent')),('onehot',OneHotEncoder(handle_unknown='ignore'))])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(n_estimators=1000, random_state=42)\n\nfrom sklearn.metrics import mean_absolute_error\n\n#bundle preprocessing and modeling code\n\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model)\n                             ])\n\n#Preprocessing of training data, fit model.\nmy_pipeline.fit(X_train,y_train)\n\npreds = my_pipeline.predict(X_test)\nscore = mean_absolute_error(y_test,preds)\nprint(score)","bcffb83d":"from sklearn.linear_model import LogisticRegression\nmodel2=LogisticRegression()\nmy_pipeline2=Pipeline(steps=[('preprocessor',preprocessor),('model2',model2)])\n\nmy_pipeline2.fit(X_train,y_train)\npreds2=my_pipeline2.predict(X_test)\nscore2=mean_absolute_error(y_test,preds2)\nscore2","1d62e01c":"variable2=['ssc_p','hsc_p','degree_p','workex','etest_p','mba_p']\nx=data[variable2]\nx","7a561fac":"x_train,x_test,y_train,y_test=train_test_split(x,Y,test_size=0.1,random_state=1)\n\nlabel_x_train=x_train.copy()\nlabel_x_test=x_test.copy()\n#to generate Categorical Columns\ns=(x_train.dtypes=='object')\ncols=list(s[s].index)\n\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder=LabelEncoder()\nfor col in cols:\n    label_x_train[col]=labelencoder.fit_transform(x_train[col])\n    label_x_test[col]=labelencoder.fit_transform(x_test[col])\n\n","9f8ddb3f":"from sklearn.linear_model import LogisticRegression\n\n\n\nmodel = LogisticRegression()\n\nmodel.fit(label_x_train,y_train)\nmodel.predict(label_x_test)","7ec7ade7":"print(model.score(label_x_test,y_test))","76dd4f51":"As we can see there are 67 missing values in salary attribute.So, we can say that there are total 67 students which doesn't get placement.We can overcome this problem by filling these missing value with 0\n","31243c11":"Importing userful libraries\n"}}