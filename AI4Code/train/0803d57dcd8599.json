{"cell_type":{"7a3ea084":"code","ee4930bd":"code","145edc18":"code","d6dd8431":"code","84266739":"code","6d0a8e35":"code","495444fb":"code","bd08fe87":"code","6e1fd67e":"code","abd06d0b":"code","43ff8c5f":"code","b23da2b7":"code","93d4342d":"code","1dc2f448":"code","def5d748":"code","e3396fe3":"code","b48fa1e4":"code","65f5f10f":"code","882e58a9":"code","5cde942c":"code","be72e94e":"code","8e53bb0f":"code","a128fc21":"code","8cdaa7ea":"code","30995f00":"code","97fa5906":"code","fd58da68":"code","c3e165b0":"code","8188cf4e":"code","24717582":"code","594e29ee":"code","94475a2f":"code","9eb9dbdb":"code","4a077ba5":"code","3ff02f01":"code","17bd7249":"code","8adbeef0":"code","f9ccac9b":"code","4e1de333":"code","6b5df59d":"code","d7c8d3aa":"code","01694f7d":"code","64d656ff":"code","352b4ea2":"code","982913b6":"code","d90d624c":"code","68fe3cb8":"code","c99e4145":"code","81eb6481":"code","3312b060":"code","4b8b456a":"code","075d6f68":"code","122b5996":"code","503831c0":"code","252a2d1f":"code","d3a636a3":"code","bcd8697e":"code","b9ff1734":"code","aaabe54d":"code","227f6744":"code","0bea7a63":"code","93ffff8d":"code","b5c4c3f4":"code","dba30eb4":"code","d879505e":"code","94eff8a9":"code","3cd67d2c":"code","70127bdb":"code","601c95fc":"code","6641c910":"code","c8dfa25d":"code","8f546b09":"code","33daead2":"code","3fde1782":"code","180b7a49":"code","13ba7f32":"markdown","e4199704":"markdown","30dac54b":"markdown","71074e37":"markdown","71020087":"markdown","70aeb18b":"markdown","01be61e9":"markdown","9332dd29":"markdown","a79f1ccc":"markdown","3a3d6fa7":"markdown","8696a398":"markdown","8e027cd0":"markdown","7e71b1d0":"markdown"},"source":{"7a3ea084":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","ee4930bd":"pd.set_option('display.max_columns',None)","145edc18":"train_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","d6dd8431":"combine_data = pd.concat([train_data, test_data])","84266739":"combine_data.shape","6d0a8e35":"combine_data.tail()","495444fb":"top_null_columns = combine_data.isnull().sum() \/ combine_data.shape[0] * 100\n# top_null_columns.values > 20\ndeleted_null_columns = top_null_columns[top_null_columns.values > 20].keys()\ndeleted_null_columns","bd08fe87":"af_del_combine = combine_data.drop(deleted_null_columns, axis='columns')\naf_del_combine.head()","6e1fd67e":"plt.figure(figsize=(20, 7))\nsns.heatmap(af_del_combine.isnull())","abd06d0b":"numeric_data = af_del_combine.select_dtypes(['int64', 'float64'])\nnumeric_data_columns = numeric_data.columns\nnumeric_data_columns","43ff8c5f":"numeric_null =  numeric_data.isnull().sum()\nnumeric_null_collumns = numeric_null[numeric_null.values > 0].keys()\nnumeric_null_collumns","b23da2b7":"numeric_null","93d4342d":"numeric_data[numeric_data[numeric_null_collumns].isnull().any(axis=1)].head()","1dc2f448":"numeric_fill_data_mean = numeric_data.fillna(numeric_data.mean())","def5d748":"numeric_fill_data_mean.isnull().sum().sum()","e3396fe3":"categorical_data = af_del_combine.select_dtypes(['O'])\ncategorical_data.head()","b48fa1e4":"cat_null_col = categorical_data.isnull().sum()\ncat_null_col = cat_null_col[cat_null_col.values > 0].keys()\ncat_null_col","65f5f10f":"categorical_data[categorical_data[cat_null_col].isnull().any(axis=1)].head()","882e58a9":"categorical_fill_data_mode = categorical_data.copy()","5cde942c":"categorical_fill_data_mode.head()","be72e94e":"# categorical_data['GarageType'].mode()[0]","8e53bb0f":"# categorical_data['GarageType'].fillna(categorical_data['GarageType'].mode)","a128fc21":"for column in cat_null_col:\n    print(column, categorical_data[column].mode()[0])\n    categorical_fill_data_mode[column] = categorical_data[column].fillna(categorical_data[column].mode()[0])","8cdaa7ea":"categorical_data.isnull().sum().sum()","30995f00":"categorical_fill_data_mode.isnull().sum().sum()","97fa5906":"combine_data.head()","fd58da68":"combine_data.isnull().sum()","c3e165b0":"numeric_fill_data_mean.head()","8188cf4e":"categorical_fill_data_mode.head()","24717582":"combine_fill_data = pd.concat([numeric_fill_data_mean, categorical_fill_data_mode], axis=1, sort=False)","594e29ee":"combine_fill_data.head()","94475a2f":"combine_fill_data.isnull().sum().sum()","9eb9dbdb":"categorical_columns = categorical_data.columns\ncategorical_columns","4a077ba5":"combine_fill_data[categorical_columns].head()","3ff02f01":"combine_fill_data['GarageCond'].unique()","17bd7249":"ordinal_cat_columns = ['KitchenQual', 'ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'HeatingQC', 'GarageQual', 'GarageCond']\nnominal_cat_columns = ['BldgType',\n 'Condition1',\n 'Condition2',\n 'Exterior1st',\n 'Electrical',\n 'GarageType',\n 'GarageFinish',\n 'SaleCondition',\n 'RoofMatl',\n 'SaleType',\n 'MasVnrType',\n 'LandSlope',\n 'LotShape',\n 'PavedDrive',\n 'Utilities',\n 'Heating',\n 'Functional',\n 'LandContour',\n 'LotConfig',\n 'Exterior2nd',\n 'Neighborhood',\n 'HouseStyle',\n 'Street',\n 'MSZoning',\n 'Foundation',\n 'RoofStyle',\n 'CentralAir'\n]","8adbeef0":"len(nominal_cat_columns)","f9ccac9b":"len(ordinal_cat_columns)","4e1de333":"# pd.get_dummies()","6b5df59d":"# combine_data['BsmtCond'].unique()","d7c8d3aa":"combine_fill_data['GarageCond'].unique()","01694f7d":"# combine_fill_data['KitchenQual']","64d656ff":"combine_map_data = combine_fill_data.copy()","352b4ea2":"KitchenQual_map = {'Gd':3, 'TA':2, 'Ex':4, 'Fa':1}\nExterQual_map = {'Gd':3, 'TA':2, 'Ex':4, 'Fa':1}\nExterCond_map = {'TA': 3, 'Gd': 4, 'Fa': 2, 'Po': 1, 'Ex': 5}\nBsmtQual_map = {'Gd':3, 'TA':2, 'Ex':4, 'Fa':1}\nBsmtCond_map = {'TA':3, 'Gd':4, 'Fa':2, 'Po':1}\nBsmtExposure_map = {'No': 1, 'Gd': 4, 'Mn': 2, 'Av': 3}\nBsmtFinType1_map = {'GLQ': 6, 'ALQ': 5, 'BLQ': 4, 'Rec': 3, 'LwQ': 2, 'Unf':1}\nBsmtFinType2_map = {'GLQ': 6, 'ALQ': 5, 'BLQ': 4, 'Rec': 3, 'LwQ': 2, 'Unf':1} \nHeatingQC_map = {'TA': 3, 'Gd': 4, 'Fa': 2, 'Po': 1, 'Ex': 5}\nGarageQual_map = {'TA': 3, 'Gd': 4, 'Fa': 2, 'Po': 1, 'Ex': 5}\nGarageCond_map = {'TA': 3, 'Gd': 4, 'Fa': 2, 'Po': 1, 'Ex': 5}","982913b6":"combine_map_data['KitchenQual'] = combine_fill_data['KitchenQual'].map(KitchenQual_map)\ncombine_map_data['ExterQual'] = combine_fill_data['ExterQual'].map(ExterQual_map)\ncombine_map_data['ExterCond'] = combine_fill_data['ExterCond'].map(ExterCond_map)\ncombine_map_data['BsmtQual'] = combine_fill_data['BsmtQual'].map(BsmtQual_map)\ncombine_map_data['BsmtCond'] = combine_fill_data['BsmtCond'].map(BsmtCond_map)\ncombine_map_data['BsmtExposure'] = combine_fill_data['BsmtExposure'].map(BsmtExposure_map)\ncombine_map_data['BsmtFinType1'] = combine_fill_data['BsmtFinType1'].map(BsmtFinType1_map)\ncombine_map_data['BsmtFinType2'] = combine_fill_data['BsmtFinType2'].map(BsmtFinType2_map)\ncombine_map_data['HeatingQC'] = combine_fill_data['HeatingQC'].map(HeatingQC_map)\ncombine_map_data['GarageQual'] = combine_fill_data['GarageQual'].map(GarageQual_map)\ncombine_map_data['GarageCond'] = combine_fill_data['GarageCond'].map(GarageCond_map)","d90d624c":"combine_map_data['GarageCond']","68fe3cb8":"combine_map_data.head()","c99e4145":"combine_dummy_data = pd.get_dummies(combine_map_data, drop_first=True)\ncombine_dummy_data.head()","81eb6481":"combine_dummy_data[combine_dummy_data['CentralAir_Y'] == 0].head()","3312b060":"from sklearn.preprocessing import RobustScaler","4b8b456a":"saleprice = np.log(train_data['SalePrice']+1)\nsaleprice","075d6f68":"combine_dummy_drop_data = combine_dummy_data.drop(['Id'], axis=1)\ncombine_dummy_drop_data","122b5996":"robust = RobustScaler()\nrobust.fit(combine_dummy_drop_data)\ncombine_scale_data = robust.transform(combine_dummy_drop_data)","503831c0":"combine_scale_data[:100]","252a2d1f":"combine_dummy_drop_data.columns","d3a636a3":"combine_column_scale_data = pd.DataFrame(combine_scale_data, columns=combine_dummy_drop_data.columns)","bcd8697e":"combine_column_scale_data","b9ff1734":"train_len = len(train_data)\ntrain_len","aaabe54d":"X_train = combine_scale_data[:train_len]\nX_test = combine_scale_data[train_len:]\ny_train = saleprice","227f6744":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import make_scorer, r2_score","0bea7a63":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import make_scorer, r2_score\n\ndef test_model(model, X_train=X_train, y_train=y_train):\n    cv = KFold(n_splits = 3, shuffle=True, random_state = 45)\n    r2 = make_scorer(r2_score)\n    r2_val_score = cross_val_score(model, X_train, y_train, cv=cv, scoring = r2)\n    score = [r2_val_score.mean()]\n    return score","93ffff8d":"import sklearn.linear_model as linear_model\nLR = linear_model.LinearRegression()\ntest_model(LR)","b5c4c3f4":"from sklearn.svm import SVR\nsvr_reg = SVR(kernel='rbf')\ntest_model(svr_reg)","dba30eb4":"from sklearn.tree import DecisionTreeRegressor\ndt_reg = DecisionTreeRegressor(random_state=21)\ntest_model(dt_reg)","d879505e":"from sklearn.ensemble import RandomForestRegressor\nrf_reg = RandomForestRegressor(n_estimators = 1000, random_state=51)\ntest_model(rf_reg)","94eff8a9":"from sklearn.ensemble import BaggingRegressor, GradientBoostingRegressor\nbr_reg = BaggingRegressor(n_estimators=1000, random_state=51)\ngbr_reg = GradientBoostingRegressor(n_estimators=1000, learning_rate=0.1, loss='ls', random_state=51)","3cd67d2c":"test_model(br_reg)","70127bdb":"test_model(gbr_reg)","601c95fc":"import xgboost\n#xgb_reg=xgboost.XGBRegressor()\nxgb_reg = xgboost.XGBRegressor(bbooster='gbtree', random_state=51)\ntest_model(xgb_reg)","6641c910":"gbr_reg.fit(X_train, y_train)","c8dfa25d":"y_pred = np.exp(gbr_reg.predict(X_test)).round(2)","8f546b09":"y_pred","33daead2":"submit_result = pd.concat([test_data['Id'],pd.DataFrame(y_pred)], axis=1)\nsubmit_result.columns=['Id', 'SalePrice']","3fde1782":"submit_result.head(10)","180b7a49":"submit_result.to_csv('house_submission.csv', index=False )","13ba7f32":"# Decision Tree Regressor","e4199704":"# 1. Missing value Imputation","30dac54b":"# 2. One-Hot Encoding","71074e37":"# Support Vector Machine","71020087":"# Linear Regression","70aeb18b":"## 1.1 Numerical Imputation","01be61e9":"# scaling dataset","9332dd29":"# XGBoost","a79f1ccc":"# Machine Learning Models","3a3d6fa7":"note: this notebook still in progress. work on increasing accuracy, added soon acknowledgement and description. thank you.","8696a398":"# Bagging & boosting","8e027cd0":"# Random Forest Regressor","7e71b1d0":"## 1.2 Categorical Imputation"}}