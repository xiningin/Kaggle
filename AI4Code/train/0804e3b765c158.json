{"cell_type":{"0d4e3c7f":"code","dcddcbfd":"code","2bb0f049":"code","b115b3b6":"code","c3e80443":"code","7a4dd814":"code","05de31e7":"code","b88d1348":"code","d7548d1a":"code","b6fd5462":"code","aba5cdbf":"code","5bdeac46":"code","6f801966":"code","268f3b9a":"code","415c50a2":"code","76bad6e9":"code","52bacf2b":"code","f5ef0c9c":"code","9b5030f2":"code","efb41f7b":"code","ee81320d":"code","a15a2e3e":"code","393c590b":"code","c90a8659":"code","304d1c02":"code","ec3e1cba":"code","ebafd216":"code","c482bf18":"code","9824526d":"code","aaf61d0e":"code","cf607da9":"code","06a78b1a":"code","91550235":"code","d41440e8":"code","7b71aaf1":"code","2d704790":"code","e70a3bfa":"code","71fd67cc":"code","788e9bb6":"markdown","f15316ae":"markdown","e342d8dd":"markdown","c45d8cb1":"markdown","20604d6f":"markdown","81a63424":"markdown","4783844e":"markdown","dc9bd951":"markdown","914a4f42":"markdown","f3713feb":"markdown","6a036662":"markdown","31d14286":"markdown","6b5046b7":"markdown","e905340b":"markdown","b10315d8":"markdown","8a38b346":"markdown","6c7b521d":"markdown","204fc5c3":"markdown","acde3638":"markdown","8911d1be":"markdown","8822486d":"markdown","68a28ecb":"markdown","20e7381d":"markdown","946cd77a":"markdown","7cfea720":"markdown","5483f689":"markdown","9a3866ac":"markdown","8c7a40e4":"markdown","74927d5d":"markdown","4eeca810":"markdown","141f1c67":"markdown","f5c18a63":"markdown","4fce25e3":"markdown","3638a219":"markdown","9550a70b":"markdown","4130fd20":"markdown","b08ff601":"markdown","1ae17aa3":"markdown","35f9ad1a":"markdown","74168b6b":"markdown","550f3e0a":"markdown","fb7b3890":"markdown","dd595d9a":"markdown","68c20ecf":"markdown","2e7bf94f":"markdown","67788b65":"markdown","8d4cc414":"markdown","206aea19":"markdown"},"source":{"0d4e3c7f":"from datetime import datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n\ntl_dates = [\n    \"WED April 10\",\n    \"SUN April 14\",\n    \"MON April 15\",\n    \"THU April 18\"\n]\n\ntl_x = [1, 2, 6, 9]\n\ntl_sub_x = [1.5, 2.4, 2.9, 3.4, 3.8, 4.5, 5.0, 6.5, 7, 7.6, 8]\ntl_sub_times = [\n    \"1:30 PM\",\n    \"9:00 AM\",\n    \"1:42 PM\",\n    \"7:15 PM\",\n    \"10:00 PM\",\n    \"11:30 PM\",\n    \"11:40 PM\",\n    \"12:20 AM\",\n    \"12:45 AM\",\n    \"2:00 AM\",\n    \"2:20 AM\",\n]\n\ntl_text = [\n    \"Titanic sets sail.\",\n    \"Recieve Message.\",\n    \"Baltic Warns Titanic\\nof icebergs.\", \n    \"Smith requests the\\n return of the message.\",\n    \"Second Officer\\n Lightroller is\\n relievced from duty.\",\n    \"Warning bells, iceberg\\n sighting.\",\n    \"Titanic hits an iceberg.\",\n    \"Life boats are being\\n lowered.\",\n    \"Passengers slowly arrive\\n on deck.\",\n    \"Rear of boat begins to\\n raise.\",\n    \"Titanic sinks.\"\n]\n\n# Set figure & Axes\nfig, ax = plt.subplots(figsize=(15, 5), constrained_layout=True)\nax.set_ylim(-2, 2)\nax.set_xlim(0, 10)\n\n\n# Timeline : line\nax.axhline(0, xmin=0.1, xmax=0.95, c='#4a4a4a', zorder=1)\n# Timeline : Date Points\nax.scatter(tl_x, np.zeros(len(tl_x)), s=120, c='#4a4a4a', zorder=2)\nax.scatter(tl_x, np.zeros(len(tl_x)), s=30, c='#fafafa', zorder=3)\n# Timeline : Time Points\nax.scatter(tl_sub_x, np.zeros(len(tl_sub_x)), s=50, c='#4a4a4a',zorder=4)\n\n# Date Text\nfor x, date in zip(tl_x, tl_dates):\n    ax.text(x, -0.2, date, ha='center', \n            fontfamily='serif', fontweight='bold',\n            color='#4a4a4a')\n    \n\n# Stemplot : vertical line\nlevels = np.zeros(len(tl_sub_x))    \nlevels[::2] = 0.3\nlevels[1::2] = -0.3\nmarkerline, stemline, baseline = ax.stem(tl_sub_x, levels, use_line_collection=True)    \nplt.setp(baseline, zorder=0)\nplt.setp(markerline, marker=',', color='#4a4a4a')\nplt.setp(stemline, color='#4a4a4a')\n\n# Text\nfor idx, x, time, txt in zip(range(1, len(tl_sub_x)+1), tl_sub_x, tl_sub_times, tl_text):\n    ax.text(x, 1.3*(idx%2)-0.5, time, ha='center', \n            fontfamily='serif', fontweight='bold',\n            color='#4a4a4a' if idx!=len(tl_sub_x) else '#e3120b', fontsize=11)\n    \n    ax.text(x, 1.3*(idx%2)-0.6, txt, va='top', ha='center', \n        fontfamily='serif',color='#4a4a4a' if idx!=len(tl_sub_x) else '#e3120b')\n\n# Spine\nfor spine in [\"left\", \"top\", \"right\", \"bottom\"]:\n    ax.spines[spine].set_visible(False)\n\n# Ticks    \nax.set_xticks([]) \nax.set_yticks([]) \n\n# Title\nax.set_title(\"Titanic Timeline\", fontweight=\"bold\", fontfamily='serif', fontsize=16, color='#4a4a4a')\n\nplt.show()","dcddcbfd":"import pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sb\nimport os \n\nprint(\"Version Pandas\", pd.__version__)\nprint(\"Version Matplotlib\", matplotlib.__version__)\nprint(\"Version Numpy\", np.__version__)\nprint(\"Version Seaborn\", sb.__version__)","2bb0f049":"os.listdir('..\/input\/tabular-playground-series-apr-2021\/')","b115b3b6":"train = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')","c3e80443":"train.shape, test.shape, sample_submission.shape","7a4dd814":"train.info()","05de31e7":"train.head()","b88d1348":"test.info()","d7548d1a":"temp = pd.DataFrame({\"id\": [1, 1, 2, 3, 4], \n                     \"values\":[\"a\", \"a\", \"b\", \"c\", \"c\"]})\ntemp","b6fd5462":"temp.duplicated().sum()","aba5cdbf":"temp.drop_duplicates(inplace=True)","5bdeac46":"temp.reset_index(drop=True)","6f801966":"train.duplicated().sum()","268f3b9a":"test.duplicated().sum()","415c50a2":"def check_na(data):\n  isnull_total = data.isnull().sum()\n  data_total = isnull_total.drop(isnull_total[isnull_total == 0].index).sort_values(ascending=False)\n  isnull_ratio = (data.isnull().sum() \/ len(data)) * 100\n  data_ratio = isnull_ratio.drop(isnull_ratio[isnull_ratio == 0].index).sort_values(ascending=False)\n\n  missing_data = pd.DataFrame({'Missing Ratio' :data_ratio, \n                               'Missing Total' : data_total, \n                               'Data Type': data.dtypes[data_ratio.index]})\n  \n  return missing_data","76bad6e9":"check_na(train)","52bacf2b":"check_na(test)","f5ef0c9c":"sns.set_style(\"white\")\nsns.set_context(\"talk\")\n\n# dataset\nmiss_df_train = check_na(train)\nmiss_df_test = check_na(test)\n\n# x\ucd95 index\nx = np.arange(0, len(miss_df_train.index))\nratio_text = np.round(miss_df_train['Missing Ratio'].tolist() + miss_df_test['Missing Ratio'].tolist(), 1)\n\nfig, ax = plt.subplots(figsize=(16, 10), facecolor=\"w\")\n\n# draw basic two graphs\nax.bar(x - 0.15, miss_df_train['Missing Total'], color='b', width = 0.3)\nax.bar(x + 0.15, miss_df_test['Missing Total'], color = \"k\", width = 0.3)\n\n# Text\nfor i, p in enumerate(ax.patches):\n  h = p.get_height()\n  if i <= 4:\n    ax.text(i-0.15, h + 1000, str(ratio_text[i]) + \"%\", ha = \"center\")\n  else:\n    ax.text(i-4.85, h + 1000, str(ratio_text[i]) + \"%\", ha = \"center\")\n\n# X axis \nplt.xticks(x, miss_df_train.index)\n\n# add grid\nax.grid(axis=\"y\")\n\n# delete some spines\nfor s in [\"left\", \"right\", \"top\"]:\n    ax.spines[s].set_visible(False)\n    ax.spines[s].set_visible(False)\n\n# legend\ncolors = {'train':'blue', 'test':'black'}         \nlabels = list(colors.keys())\nhandles = [plt.Rectangle((0,0),1,1, color=colors[label]) for label in labels]\nplt.legend(handles, labels, bbox_to_anchor = (0.9, 0.9))\n\n# add background image\nax.axvspan(0.3, 4.3, fc=\"gray\", alpha=0.2)\nax.text(1.5, 40000, \"Relatively Small Portion of Missing Values\\n\", color=\"k\", fontdict={\"size\":20})\n\n# title\nplt.title(\"Missing Values in Each Column\", fontsize=30)\n\nfig.tight_layout()\nplt.show()","9b5030f2":"train['Survived'].value_counts()","efb41f7b":"# Copy Data\ntrain_viz = train.copy()\ntrain_viz.info()","ee81320d":"train_viz = train_viz.replace({'Survived': [0, 1]}, {'Survived': ['Not Survived', 'Survived']})\ntrain_viz['Survived'].value_counts()","a15a2e3e":"train_viz['Ticket'].value_counts()","393c590b":"train_viz['Cabin'].value_counts()","c90a8659":"train_viz['Pclass'] = train_viz['Pclass'].astype('object')\ntrain_viz.info()","304d1c02":"crosstab_df = pd.crosstab(train_viz['Survived'], \n                          train_viz['Pclass'],margins = False)\n\ncrosstab_df","ec3e1cba":"survived_df = crosstab_df.loc['Survived']\nnon_survived_df = crosstab_df.loc['Not Survived']\nprint(\"Survived values:\", survived_df.values)\nprint(\"Not Survived values\", non_survived_df.values)","ebafd216":"survived_df = crosstab_df.loc['Survived']\nnon_survived_df = crosstab_df.loc['Not Survived']\nsurvived_max_val = survived_df.values.max()\nnon_survived_max_val = non_survived_df.values.max()\n\n# x\ucd95 index\nx = np.arange(0, len(survived_df.index))\n\nfig, ax = plt.subplots(figsize=(16, 10), facecolor=\"w\")\n\n# draw basic two graphs\nax.bar(x - 0.15, survived_df.values, \n       color=['#0095FF' if survived_df.values[idx] == survived_max_val else \"#AECFE6\" for idx in range(0, len(survived_df))], \n       width = 0.3)\nax.bar(x + 0.15, non_survived_df.values, \n       color = ['#FF6123' if non_survived_df.values[idx] == non_survived_max_val else \"#E6C0B1\" for idx in range(0, len(non_survived_df))], \n       width = 0.3)\n\n# Text\nfor i, p in enumerate(ax.patches):\n  h = p.get_height()\n  fontweight = \"normal\"\n  if i <= 2:\n    ax.text(i-0.15, h + 1000, h, ha = \"center\", \n            fontsize=16 if h == survived_max_val else 12, \n            fontweight = \"bold\" if h == survived_max_val else fontweight, \n            color = \"#0095FF\" if h == survived_max_val else \"#AECFE6\"\n           )\n  else:\n    ax.text(i-2.85, h + 1000, h, ha = \"center\", \n            fontsize=16 if h == non_survived_max_val else 12, \n            fontweight = \"bold\" if h == non_survived_max_val else fontweight, \n            color = \"#FF6123\" if h == non_survived_max_val else \"#E6C0B1\"\n           )\n\n# X axis \nplt.xticks(x, survived_df.index)\nax.set_xlabel(\"Pclass\")\n\n# add grid\nax.grid(axis=\"y\")\n\n# delete some spines\nfor s in [\"left\", \"right\", \"top\"]:\n    ax.spines[s].set_visible(False)\n    ax.spines[s].set_visible(False)\n\n# legend\ncolors = {'Survived':'#0095FF', 'Not Survived':'#E6C0B1'}         \nlabels = list(colors.keys())\nhandles = [plt.Rectangle((0,0),1,1, color=colors[label]) for label in labels]\nplt.legend(handles, labels, bbox_to_anchor = (0.25, 0.9))\n\nplt.show()","c482bf18":"def helper_graph(data, \n                 dependent_variable = \"Survived\", \n                 independent_variable=\"Plcass\", \n                 val_1 = \"Survived\", \n                 val_2 = \"Not Survived\", \n                 val_1_colors = [\"#0095FF\", \"#AECFE6\"], \n                 val_2_colors = [\"#FF6123\", \"#E6C0B1\"]\n                ):\n    crosstab_df = pd.crosstab(train_viz[dependent_variable], \n                              train_viz[independent_variable],margins = False)\n    \n    # data transforming\n    val_1_df = crosstab_df.loc[val_1]\n    val_2_df = crosstab_df.loc[val_2]\n    \n    val_1_max_val = val_1_df.values.max()\n    val_2_max_val = val_2_df.values.max()\n\n    # x\ucd95 index\n    x = np.arange(0, len(val_1_df.index))\n\n    fig, ax = plt.subplots(figsize=(16, 10), facecolor=\"w\")\n\n    # draw basic two graphs\n    ax.bar(x - 0.15, val_1_df.values, \n           color=[val_1_colors[0] if val_1_df.values[idx] == val_1_max_val else val_1_colors[1] for idx in range(0, len(val_1_df))], \n           width = 0.3)\n    ax.bar(x + 0.15, val_2_df.values, \n           color = [val_2_colors[0] if val_2_df.values[idx] == val_2_max_val else val_2_colors[1] for idx in range(0, len(val_2_df))], \n           width = 0.3)\n\n    # Text\n    for i, p in enumerate(ax.patches):\n      h = p.get_height()\n      fontweight = \"normal\"\n      if i <= len(val_1_df)-1:\n        ax.text(i-0.15, h + 1000, h, ha = \"center\", \n                fontsize=16 if h == val_1_max_val else 12, \n                fontweight = \"bold\" if h == val_1_max_val else fontweight, \n                color = val_1_colors[0] if h == val_1_max_val else val_1_colors[1]\n               )\n      else:\n        ax.text(i-(len(val_1_df) - 0.15), h + 1000, h, ha = \"center\", \n                fontsize=16 if h == val_2_max_val else 12, \n                fontweight = \"bold\" if h == val_2_max_val else fontweight, \n                color = val_2_colors[0] if h == val_2_max_val else val_2_colors[1]\n               )\n\n    # X axis \n    plt.xticks(x, val_1_df.index)\n    ax.set_xlabel(independent_variable)\n\n    # add grid\n    ax.grid(axis=\"y\")\n\n    # delete some spines\n    for s in [\"left\", \"right\", \"top\"]:\n        ax.spines[s].set_visible(False)\n        ax.spines[s].set_visible(False)\n\n    # legend\n    colors = {val_1:val_1_colors[0], val_2: val_2_colors[0]}         \n    labels = list(colors.keys())\n    handles = [plt.Rectangle((0,0),1,1, color=colors[label]) for label in labels]\n    plt.legend(handles, labels, bbox_to_anchor = (0.25, 0.9))\n\n    plt.show()","9824526d":"helper_graph(train_viz, \n             dependent_variable = \"Survived\", \n             independent_variable=\"Pclass\", \n             val_1 = \"Survived\", \n             val_2 = \"Not Survived\", \n             val_1_colors = [\"#0095FF\", \"#AECFE6\"], \n             val_2_colors = [\"#FF6123\", \"#E6C0B1\"]\n            )","aaf61d0e":"helper_graph(train_viz, \n             dependent_variable = \"Survived\", \n             independent_variable=\"Sex\", \n             val_1 = \"Survived\", \n             val_2 = \"Not Survived\", \n             val_1_colors = [\"#0095FF\", \"#AECFE6\"], \n             val_2_colors = [\"#FF6123\", \"#E6C0B1\"]\n            )","cf607da9":"train_viz['SibSp'] = train_viz['SibSp'].astype('object')\nhelper_graph(train_viz, \n             dependent_variable = \"Survived\", \n             independent_variable=\"SibSp\", \n             val_1 = \"Survived\", \n             val_2 = \"Not Survived\", \n             val_1_colors = [\"#0095FF\", \"#AECFE6\"], \n             val_2_colors = [\"#FF6123\", \"#E6C0B1\"]\n            )","06a78b1a":"train_viz['Parch'] = train_viz['Parch'].astype('object')\nhelper_graph(train_viz, \n             dependent_variable = \"Survived\", \n             independent_variable=\"Parch\", \n             val_1 = \"Survived\", \n             val_2 = \"Not Survived\", \n             val_1_colors = [\"#0095FF\", \"#AECFE6\"], \n             val_2_colors = [\"#FF6123\", \"#E6C0B1\"]\n            )","91550235":"helper_graph(train_viz, \n             dependent_variable = \"Survived\", \n             independent_variable=\"Embarked\", \n             val_1 = \"Survived\", \n             val_2 = \"Not Survived\", \n             val_1_colors = [\"#0095FF\", \"#AECFE6\"], \n             val_2_colors = [\"#FF6123\", \"#E6C0B1\"]\n            )","d41440e8":"temp = train.copy()\ntemp.dropna(subset=['Pclass', 'Embarked'], inplace=True)\ntemp_df = pd.crosstab(temp['Embarked'], temp['Pclass'], normalize='index')\nfig, ax = plt.subplots(figsize=(10, 6))\nax = sns.heatmap(temp_df, annot=True, fmt=\".1%\")\nplt.show()","7b71aaf1":"train_viz[\"Cabin\"].fillna(\"No Cabin\", inplace = True)\ntrain_viz[\"Cabin\"].unique()","2d704790":"train_viz[\"Cabin_code\"] = train_viz[\"Cabin\"].str[0]\ntrain_viz[\"Cabin_code\"].unique()","e70a3bfa":"helper_graph(train_viz, \n             dependent_variable = \"Survived\", \n             independent_variable=\"Cabin_code\", \n             val_1 = \"Survived\", \n             val_2 = \"Not Survived\", \n             val_1_colors = [\"#0095FF\", \"#AECFE6\"], \n             val_2_colors = [\"#FF6123\", \"#E6C0B1\"]\n            )","71fd67cc":"temp = train_viz['Survived'].value_counts()\nnot_survived_num = temp.values[0]\nsurvived_num = temp.values[1]\nprint(not_survived_num, survived_num)\n\nfig, ax = plt.subplots(figsize=(10, 6))\nsns.kdeplot(data=train_viz, x=\"Fare\", hue=\"Survived\", multiple=\"fill\", ax=ax, \n           palette= [\"#0095FF\", \"#FF6123\"],)\n\n# delete some spines\nfor s in [\"left\", \"right\", \"top\"]:\n    ax.spines[s].set_visible(False)\n    ax.spines[s].set_visible(False)\n    \nax.text(250, 0.7, \"{*} {**} {***}\".format(**{\"*\": 'Survived', \"**\": '{:,}'.format(survived_num), \"***\": \"people\"}), color='w')\nax.text(150, 0.07, \"{*} {**} {***}\".format(**{\"*\": 'Not Survived', \"**\": '{:,}'.format(not_survived_num), \"***\": \"people\"}), color='w')\n\nax.set_ylabel(\"Rate (0 ~ 1)\")\n\nplt.show()","788e9bb6":"<a id=\"dependent_variable\"><\/a>\n### (1) Dependent Variable - Survived\n- Let's count the frequency of each value. ","f15316ae":"- Let's check datasets","e342d8dd":"- [Overview](#overview)\n    - [Etiquette](#etiquette)\n    - [Titanic Sinks](#titanic_sanks)\n    - [Timeline](#timeline)\n    \n- [Step 1. Setup](#setup)\n- [Step 2. Import Dataset](#data_import)\n    - [(1) Check Dataset](#check_dataset)\n        - [A. Definition of Variables](#definition_variables)\n    - [(2) Duplicated Rows?](#duplicated)\n    - [(3) Missing Values Visualisation](#missing_value_visuslisation)\n    \n- [Step 3. EDA with Variables](#eda_with_variables)\n    - [(1) Dependent Variable - Survived](#dependent_variable)\n    - [(2) Independent Variable](#independent_variable)\n        - [A. Survived ~ Pclass](#survived_pclass)\n        - [B. Helper Graph](#helper_graph)\n        - [C. Survived ~ Sex](#survived_sex)\n        - [D. Survived ~ SibSp](#survived_sibsp)\n        - [E. Survived ~ Parch](#survived_parch)\n        - [F. Survived ~ Embarked](#survived_embarked)\n        - [G. Embarked ~ Pclass](#embarked_pclass)\n        - [H. Survived ~ Cabin](#survived_cabin)\n        - [I. Survived ~ fare](#survived_fare)\n    - [(3) Summary](#summary)\n    \n- [Step 4. Machine Learning](#machine_learning)\n> If you want to know how to create table of contents in Kaggle Notebooks, please check this article [Create Table of Contents in a Notebook](https:\/\/www.kaggle.com\/dcstang\/create-table-of-contents-in-a-notebook) by David Tang","c45d8cb1":"<a id='duplicated'><\/a>\n### (2) Duplicated Rows?\n- Let's see what the duplicated values. ","20604d6f":"- The number of rows in both train and test is 100,000. It's interesting. \n- One column in test is removed. Let's see what it is. ","81a63424":"- This graph said that Male passed away more than Female in number. ","4783844e":"- get values each value from .loc['index'], replace index with values","dc9bd951":"- Let's chagne Dtype of \"Pclass\" as object","914a4f42":"- The only difference is the column Survived.\n- Some columns have missing values. It needs to deal with it in Feature Engineering Section.","f3713feb":"<a id=\"helper_graph\"><\/a>\n#### B. Helper Graph\n- It seems to re-use the same code above since many columns can be treated as object\n    + Sex, SibSp, Parch, Cabin, Embarked, and even other columns can be. \n    \n- So, let's create helper_graph function.","6a036662":"<a id='survived_fare'><\/a>\n#### I. Survived ~ fare\n- Density plot is a good choice to see the trends with fare. \n","31d14286":"<a id='titanic_sanks'><\/a>\n### Titanic Sinks\n- Sad, Tragedy but humanity\n- Have you watched this movie? \n\n![](https:\/\/kathafmcki.files.wordpress.com\/2015\/11\/titanic_movie-hd.jpg?w=700)\n\n\n- Yes, We will deal with titanic data in this tutorial. ","6b5046b7":"<a id='survived_embarked'><\/a>\n#### F. Survived ~ Embarked\n- Let's visualize between Survived and Embarked","e905340b":"- Let's make pivot table using crosstab( ). ","b10315d8":"- This result is same with the result of the column \"SibSp\"\n    + One interesting point is here. In most cases except for category 1, the number of the survived was higher than other group.\n    + If you have a time, then it needs to figure it out why they are more survived. ","8a38b346":"<a id='timeline'><\/a>\n### Timeline\n- This code is from Subin An's [[TPS-Apr] Highlighting the Data](https:\/\/www.kaggle.com\/subinium\/tps-apr-highlighting-the-data). Thank you so much for your beautiful visualisation notebooks. (Upvoted).  \n- For students, it's important to analyze the code below for your sake. It shows many features of Matplotlib. \n    + Always Remember this pic taken from https:\/\/matplotlib.org\/stable\/gallery\/showcase\/anatomy.html\n![](https:\/\/matplotlib.org\/stable\/_images\/sphx_glr_anatomy_001.png)","6c7b521d":"<a id=\"machine_learning\"><\/a>\n## Step 4. Machine Learning\n- Please click here: [TPS-April SkLearn, PyCaret, LAML for Newbies](https:\/\/www.kaggle.com\/j2hoon85\/tps-april-sklearn-pycaret-laml-for-newbies). Let's continue. \n\n> If you like to read this notebook, please upvote :D","204fc5c3":"<a id='survived_sibsp'><\/a>\n#### D. Survived ~ SibSp\n- Let's visualize between Survived and SibSp","acde3638":"<a id='independent_variable'><\/a>\n### (2) Independent Variable\n- The ratio of each value is 57.2% as Not Survived and 42.7% as Survived. \n- It's not important to draw visusalisation because we can't find any insight with dependent variable alone. \n- Now, it's time to look at independent variables considering the column, Survived, and with simple question, is this variable helpful to classify? \n    + PassengerId, Not at all\n    + Pclass, Yes \n    + Name, maybe not at this time. \n    + Sex, Yes\n    + Age, Yes\n    + SibSp, Yes, related to family\n    + Parch, Yes, related to family\n    + Ticket, maybe not at this time because it has 75331 values. \n    + Fare, this implies social class can be helpful\n    + Cabin, it has many values but need to consider the combination of letter.\n        * If you want to know further, then it's time to check [Discussion](https:\/\/www.kaggle.com\/c\/tabular-playground-series-apr-2021\/discussion?search=Cabin). In general, this kind of variables is always related to feature engineering. \n    + Embarked: Each value is a region where each Passenger rode in. So, Might be yes. ","8911d1be":"- N is Missing Values, among them, the number of Not Survived is much higher than survived, even A Code. \n- What is Cabin? \n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/0\/0d\/Olympic_%26_Titanic_cutaway_diagram.png\/440px-Olympic_%26_Titanic_cutaway_diagram.png)\n\n- The image is from https:\/\/en.wikipedia.org\/wiki\/First-class_facilities_of_the_Titanic\n- Wonder why people in Cabin Number were more died in other Cabin. \n- Now, let's focus on the continuous variables","8822486d":"<a id='summary'><\/a>\n### (3) Summary\n- the ratio of Surived is 57.2 (Not Survived):42.8 (Survived)\n    + It's not quite imbalanced data\n- The male group were more died than the female group\n- The wealthy class were more survived than the other group. \n    + Embarked, Pclass, Cabin. \n    + If it needs new variable, combining three variables, then I would make classify if each passenger was wealthy or not at that time.\n- My Personal insight from EDA is the wealthy-female group is more survived than other group. \n- Now, Let's Move on Feature Engineering and Modeling in other notebooks. \n\n> Thank you for reviewing my notebooks. ","68a28ecb":"<a id='data_import'><\/a>\n## Step 2. Data Import\n- Three datasets-sample_submission, train, and test, are available to upload.","20e7381d":"- Let's get first letter from each value. ","946cd77a":"- It showed that the more you pay, the more you survive.","7cfea720":"- passengers from C and Q with 1st Pclass likely to be more survived than others. \n- This is important when conducting Feature Engineering. \n    + it can create new drawable variable, combining Embarked and Pclass. ","5483f689":"<a id='survived_pclass'><\/a>\n#### A. Survived ~ Pclass\n- 1st step is Plcass needs to convert the int64 into string\n- 2nd step is that it needs to create new table, so-called pivot table using crosstab( )\n- 3rd step is to visualise bar graph based on the new table. \n    + I want you strongly recommend to read this book for visualisation. It contains many suggestions when visualising data with `rules`, `rules`, and `rules`, considering the readers to read graph that we all draw here.  \n    + Book: [Fundamentals of Data Visualization](https:\/\/clauswilke.com\/dataviz\/)\n    \n![](https:\/\/clauswilke.com\/dataviz\/cover.png)","9a3866ac":"<a id=\"overview\"><\/a>\n## Overview\n- This is my personal tutorial sharing with my students as example. \n- The whole processes will be shared from EDA to Modeling and Evaluation, Finally Submission. \n- The well-known notebooks shared will be enough for students to learn Kaggle as an entry level. \n\n> Happy to Code","8c7a40e4":"<a id='survived_sex'><\/a>\n#### C. Survived ~ Sex\n- Let's visualize between Survived and Sex","74927d5d":"- When visualizing, the main concept is to compare between the Survived and the Not Survived per each independent variable.\n- Each column has distinguished value to classify the dependent variable. \n    + Thus, the small values, which is not important, make it vague where the representative value must be clearer. ","4eeca810":"- What does the category 0 mean by? \n    + Some passengers travel alone without Siblings.","141f1c67":"- Okay. Very Good. Let's move on Missing Values Section. ","f5c18a63":"<a id='etiquette'><\/a>\n### Etiquette\n- When students get codes and ideas from other notebooks, then please make sure to leave a reference and upvote it as well. \ud83d\udc46\ud83d\udc46\ud83d\udc46","4fce25e3":"- The 1st and 2nd rows are same. \n- So, it needs to remove if it has. \n    + step 1. check if duplicated rows exist and remove them. ","3638a219":"- What does this graph explain? \n    + For Cabin, it is a room where family stays inside Titanic. Since many different classes were together in the ship, it might be important to classifiy the survived. \n    + But, unfortunately, it has many missing values. Remove or not. If not, then how to fill out the missing values? This could be main issue for kagglers.\n    + The missing values in other groups are relatively small, so, this could be easy to replace with the frequent values or median value in each column.\n    \n- Well, if you want to deal with it now, Let's read this article [Basic Feature Engineering with the Titanic Data](https:\/\/triangleinequality.wordpress.com\/2013\/09\/08\/basic-feature-engineering-with-the-titanic-data\/)\n\n> Happy to Code. ","9550a70b":"- First, Extract columns if the column has any missing values. \n- Second, Check train and test datasets \n- Third, Compare the missing values visualisation between train and test.","4130fd20":"<a id='eda_with_variables'><\/a>\n## Step 3. EDA with Variables\n- When analyzing data, it needs to split variables into two groups - Independent Variables, and Dependent Variable. \n- Train dataset has 12 variables, 11 independent variables and 1 dependent variable.\n- It might be easier to start with 1 dependent variable, the column `Survived`\n","b08ff601":"- The value `0` means didn't survived, whereas the value `1` did survived. \n- As you know, the number might be confused, so, let's change the number with some distinguished words. \n- When conducting visualisation, it's better to copy original data leaving it for feature engineering. Tip.","1ae17aa3":"<a id='setup'><\/a>\n## Step 1. Setup\n- Let's set up basic libaries for Exploratory Data Analysis","35f9ad1a":"- The Ship, Titanic, sank in the very early morning hours of 15 April 1912. \n- Let us think that most of families would sleep at that time. It implies that many families were together when it happened. ","74168b6b":"<a id='check_dataset'><\/a>\n### (1) Check Dataset","550f3e0a":"- Okay, very good. Same result shown. ","fb7b3890":"<a id='embarked_pclass'><\/a>\n#### G. Embarked ~ Pclass\n- Let's visualize between Embarked and Pclass\n- C is Cherbourg, Q is Queenstown, S is Southampton\n- Another question comes up. Why were the passengers from C more survived than the people from S?\n    + Then it's easy to figure out when drawling new graph. ","dd595d9a":"<a id='missing_value_visuslisation'><\/a>\n### (3) Missing Values Visualisation\n","68c20ecf":"<a id='definition_variables'><\/a>\n### A. Definition of Variables\n- Let's check [here](https:\/\/www.kaggle.com\/c\/tabular-playground-series-apr-2021\/data)\n","2e7bf94f":"<a id='survived_parch'><\/a>\n#### E. Survived ~ Parch\n- Let's visualize between Survived and Parch","67788b65":"- This graph can use in other dataset as well.\n- Creating function is reusable when conducting similar task. \n- And if you find some bug in this function, then you can update it for your own task. \n    + I will show you. ","8d4cc414":"<a id='survived_cabin'><\/a>\n#### H. Survived ~ Cabin\n- For Cabin, How to deal with it.\n- It's better to replace with \"None\", using fillna","206aea19":"- If train and test has duplicated rows, then remove it. "}}