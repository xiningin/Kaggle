{"cell_type":{"ff0885cf":"code","6a3544c6":"code","5d93dae7":"code","78f4bf8e":"code","d74d320f":"code","570ee3b6":"code","a02c254d":"code","dc22370b":"code","54592b84":"code","d4b01375":"code","562f7ed7":"code","82f8fa86":"code","9aaf4f74":"code","fc090006":"code","dd40d614":"code","e8c1b07d":"code","b8dfb7f7":"code","8f891072":"code","4da77b65":"code","38cf5a7b":"code","0d844c76":"code","67a6cde1":"code","3c0220b8":"markdown","2654d878":"markdown","b8877a87":"markdown","554896dd":"markdown","bff511a3":"markdown","d60054b3":"markdown","6395a422":"markdown","e8b5e0a8":"markdown","d1007af7":"markdown"},"source":{"ff0885cf":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel","6a3544c6":"movies=pd.read_csv('..\/input\/movies.csv')\nratings=pd.read_csv('..\/input\/ratings.csv')","5d93dae7":"movies.info()","78f4bf8e":"ratings.info()","d74d320f":"movies.shape","570ee3b6":"ratings.shape","a02c254d":"movies.describe()","dc22370b":"ratings.describe()","54592b84":"genres=[]\nfor genre in movies.genres:\n    \n    x=genre.split('|')\n    for i in x:\n         if i not in genres:\n            genres.append(str(i))\ngenres=str(genres)    \nmovie_title=[]\nfor title in movies.title:\n    movie_title.append(title[0:-7])\nmovie_title=str(movie_title)    ","d4b01375":"wordcloud_genre=WordCloud(width=1500,height=800,background_color='black',min_font_size=2\n                    ,min_word_length=3).generate(genres)\nwordcloud_title=WordCloud(width=1500,height=800,background_color='cyan',min_font_size=2\n                    ,min_word_length=3).generate(movie_title)","562f7ed7":"plt.figure(figsize=(30,10))\nplt.axis('off')\nplt.title('WORDCLOUD for Movies Genre',fontsize=30)\nplt.imshow(wordcloud_genre)\n","82f8fa86":"plt.figure(figsize=(30,10))\nplt.axis('off')\nplt.title('WORDCLOUD for Movies title',fontsize=30)\nplt.imshow(wordcloud_title)","9aaf4f74":"df=pd.merge(ratings,movies, how='left',on='movieId')\ndf.head()","fc090006":"df1=df.groupby(['title'])[['rating']].sum()\nhigh_rated=df1.nlargest(20,'rating')\nhigh_rated.head()","dd40d614":"plt.figure(figsize=(30,10))\nplt.title('Top 20 movies with highest rating',fontsize=40)\ncolors=['red','yellow','orange','green','magenta','cyan','blue','lightgreen','skyblue','purple']\nplt.ylabel('ratings',fontsize=30)\nplt.xticks(fontsize=25,rotation=90)\nplt.xlabel('movies title',fontsize=30)\nplt.yticks(fontsize=25)\nplt.bar(high_rated.index,high_rated['rating'],linewidth=3,edgecolor='red',color=colors)\n","e8c1b07d":"df2=df.groupby('title')[['rating']].count()\nrating_count_20=df2.nlargest(20,'rating')\nrating_count_20.head()","b8dfb7f7":"plt.figure(figsize=(30,10))\nplt.title('Top 20 movies with highest number of ratings',fontsize=30)\nplt.xticks(fontsize=25,rotation=90)\nplt.yticks(fontsize=25)\nplt.xlabel('movies title',fontsize=30)\nplt.ylabel('ratings',fontsize=30)\n\nplt.bar(rating_count_20.index,rating_count_20.rating,color='red')","8f891072":"cv=TfidfVectorizer()\ntfidf_matrix=cv.fit_transform(movies['genres'])","4da77b65":"movie_user = df.pivot_table(index='userId',columns='title',values='rating')\nmovie_user.head()","38cf5a7b":"\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","0d844c76":"indices=pd.Series(movies.index,index=movies['title'])\ntitles=movies['title']\ndef recommendations(title):\n    idx = indices[title]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:21]\n    movie_indices = [i[0] for i in sim_scores]\n    return titles.iloc[movie_indices]","67a6cde1":"recommendations('Toy Story (1995)')","3c0220b8":"In this notebook we are going to implement content based recommendation system.","2654d878":"## Data Visualization","b8877a87":"### The data consists of 105339 ratings applied over 10329 movies.\n\nThe movies.csv dataset contains three columns:\n\n - movieId: the ID of the movie\n - title: movies title\n - genres: movies genres \n \nThe ratings.csv dataset contains four columns:\n\n - userId: the ID of the user who rated the movie.\n - movieId: the ID of the movie\n - ratings: ratings given by each user (from 0 to 5)\n - Timstamp: The time the movie was rated. \n ","554896dd":"# Movie Recommendation\n\nGroupLens Research has collected and made available rating data sets from the MovieLens web site (http:\/\/movielens.org). The data sets were collected over various periods of time, depending on the size of the set.","bff511a3":"## Loading data files","d60054b3":" From the above table we can conclue that\n \n - The average rating is 3.5 and minimum and maximum rating is 0.5 and 5 respectively. \n - There are 668 user who has given their ratings for 149532 movies.\n","6395a422":"## Types of recommendation system\n - Popularity Based \n\nIt keeps a track of view counts for each movie\/video and then lists movies based on views in descending order.\n\n - Content Based\n \nThis type of recommendation systems, takes in a movie that a user currently likes as input. Then it analyzes the contents of the movie to find out other movies which have similar content. Then it ranks similar movies according to their similarity scores and recommends the most relevant movies to the user. \n\n - Collaborative filtering\n\nIn other words, the recommendations get filtered based on the collaboration between similar user\u2019s preferences.","e8b5e0a8":"## Importing libraries","d1007af7":"Suppose a user wants to watch a movie similar to Toy Story (1995) then we can recommend the user by calculating the cosine similarity between Toy Story and other movies. So we have to first find the cosine similarity betw"}}