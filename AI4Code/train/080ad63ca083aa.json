{"cell_type":{"b746646c":"code","967d1163":"code","79cb9b6b":"code","49ee1f8d":"code","a1babebe":"code","3e12c010":"code","86f1feaf":"code","1a86c5ee":"code","431becad":"code","cd83c51f":"code","8a9b7ff0":"code","185ae55d":"code","bc5ef90e":"code","3689259a":"code","2b2cdf2c":"code","fc8bae13":"code","c1bdb49c":"code","efd47604":"code","bd85261c":"code","dbc070a9":"code","dfeb90e9":"code","a064c8be":"code","78654c2e":"code","d0966454":"code","53679f1a":"code","d0243973":"code","b3452298":"code","4b0845c8":"code","f17cb39e":"code","7b67ce0c":"code","f00bf28c":"code","3b54f100":"code","6aa90ff0":"code","ff5fb685":"code","164ac400":"code","64b5cd37":"code","538107ef":"code","d560b205":"code","1ee69e09":"code","cc466a5b":"code","930d054a":"markdown","68e3c106":"markdown","6ecfdbb2":"markdown","b51f88e0":"markdown","b75bb3f8":"markdown","54f992ba":"markdown","49ac2995":"markdown"},"source":{"b746646c":"import os,cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 20, 10\n\nfrom sklearn.utils import shuffle\nfrom sklearn.cross_validation import train_test_split\n\nimport keras\n\nfrom keras.utils import np_utils\n\nfrom keras import backend as K\n\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Dropout, Activation, Flatten\nfrom keras.layers.convolutional import Convolution2D, MaxPooling2D\nfrom keras.optimizers import SGD,RMSprop,adam, Adadelta\nfrom keras.preprocessing.image import ImageDataGenerator\nimport pandas as pd","967d1163":"import os\nfor dirname, _, filenames in os.walk('..\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","79cb9b6b":"# get the data\nfilname = '..\/input\/facial-expression\/fer2013\/fer2013.csv'\nlabel_map = ['Anger', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\nnames=['emotion','pixels','usage']\ndf=pd.read_csv('..\/input\/facial-expression\/fer2013\/fer2013.csv',names=names, na_filter=False)\nim=df['pixels']\ndf.head(10)","49ee1f8d":"a = df['emotion']\nidx = pd.Index(a)\ncount = idx.value_counts()\nprint(count)","a1babebe":"from keras.models import Sequential\nfrom keras.layers import Dense , Activation , Dropout ,Flatten\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.metrics import categorical_accuracy\nfrom keras.models import model_from_json\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.optimizers import *\nfrom keras.layers.normalization import BatchNormalization","3e12c010":"def getData(filname):\n    # images are 48x48\n    # N = 35887\n    Y = []\n    X = []\n    first = True\n    for line in open(filname):\n        #This condition skips the first condition\n        if first:\n            first = False\n        else:\n            row = line.split(',')\n            Y.append(int(row[0]))\n            X.append([int(p) for p in row[1].split()])\n\n    #X, Y = np.array(X) \/ 255.0, np.array(Y)\n    X, Y = np.array(X)\/255.0 , np.array(Y)\n    return X, Y","86f1feaf":"X, Y = getData(filname)\nnum_class = len(set(Y))\nprint(num_class)","1a86c5ee":"X.shape","431becad":"# keras with tensorflow backend\nN,D = X.shape\nX = X.reshape(N, 48, 48, 1)","cd83c51f":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\ny_train = (np.arange(num_class) == y_train[:, None]).astype(np.float32)\ny_test = (np.arange(num_class) == y_test[:, None]).astype(np.float32)","8a9b7ff0":"img = X_train[780].reshape(48,48)\nplt.imshow(img, interpolation='nearest')\nplt.show()","185ae55d":"from keras.applications import VGG19\n#Load the VGG model\nvgg_conv = VGG19(weights=None, include_top=False, input_shape=(48, 48,1))","bc5ef90e":"def vgg_custom():\n    model = Sequential()\n    #add vgg conv model\n    model.add(vgg_conv)\n    \n    #add new layers\n    model.add(Flatten())\n    model.add(Dense(7,  kernel_initializer='normal'))\n    #model.compile(loss='mean_squared_error', optimizer=adam())\n    model.compile(loss='mean_squared_error', optimizer=RMSprop())\n    \n    return model","3689259a":"def custom_model():\n    \n    input_shape=(48,48,1)\n\n    model = Sequential()\n    model.add(Conv2D(6, (5, 5), input_shape=input_shape, padding='same', activation = 'relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Conv2D(16, (5, 5), padding='same', activation = 'relu'))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Conv2D(64, (3, 3), activation = 'relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Flatten())\n    model.add(Dense(128, activation = 'relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(7, activation = 'softmax'))\n\n    model.compile(loss='categorical_crossentropy', metrics=['accuracy'],optimizer='RMSprop')\n    \n    return model","2b2cdf2c":"model = vgg_custom()\nmodel.summary()","fc8bae13":"from keras import callbacks\nfilename='model_train_new.csv'\nfilepath=\"Best-weights-my_model-{epoch:03d}-{loss:.4f}-{acc:.4f}.hdf5\"\n\ncsv_log=callbacks.CSVLogger(filename, separator=',', append=False)\ncheckpoint = callbacks.ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\ncallbacks_list = [csv_log,checkpoint]\ncallbacks_list = [csv_log]","c1bdb49c":"aug = ImageDataGenerator(\n    rotation_range=25, width_shift_range=0.1,\n    height_shift_range=0.1, shear_range=0.2, \n    zoom_range=0.2,horizontal_flip=True, \n    fill_mode=\"nearest\")","efd47604":"BS =8\nEPOCHS = 50","bd85261c":"len(X_train)","dbc070a9":"history = model.fit_generator(\n    aug.flow(X_train, y_train, batch_size=BS),\n    validation_data=(X_test, y_test),\n    steps_per_epoch=len(X_train) \/\/ BS,\n    epochs=EPOCHS, verbose=1,\n    callbacks = callbacks_list \n    ,shuffle = True\n    )","dfeb90e9":"#Model Save\nmodel.save_weights('model_weights.h5')\nmodel.save('model_keras.h5')","a064c8be":"hist = history","78654c2e":"# visualizing losses and accuracy\n# %matplotlib inline\n\ntrain_loss=hist.history['loss']\nval_loss=hist.history['val_loss']\n#train_acc=hist.history['acc']\n#val_acc=hist.history['val_acc']\n\nepochs = range(len(val_loss))\n\nplt.plot(epochs,train_loss,'r-o', label='train_loss')\nplt.plot(epochs,val_loss,'b', label='val_loss')\nplt.title('train_loss vs val_loss')\n#plt.plot(epochs,train_loss,'r-o', label='train_acc')\n#plt.plot(epochs,val_loss,'b', label='val_acc')\n#plt.title('train_acc vs val_acc')\nplt.title('train_loss vs val_loss')\nplt.legend()\nplt.figure()\n#plt.savefig('train_test_acc.png')\nplt.savefig('train_test.png')","d0966454":"print(train_loss)","53679f1a":"print('accuracy: {} loss: {}'.format((1-train_loss[-1])*100,(train_loss[-1])*100))","d0243973":"print(val_loss)","b3452298":"print('accuracy: {} loss: {}'.format((1-val_loss[-1])*100,(val_loss[-1])*100))","4b0845c8":"# Evaluating the model\nscore = model.evaluate(X_test, y_test, verbose=0)\nprint('Test Loss:', score)\n\ntest_image = X_test[0:1]\nprint (test_image.shape)\n\n#predict\ny_pred = model.predict(X_test) \n\nprint(model.predict(test_image))\nprint(model.predict_classes(test_image))\nprint(y_test[0:1])\n\nres = model.predict_classes(X_test[9:18])\nplt.figure(figsize=(10, 10))","f17cb39e":"from sklearn.metrics import confusion_matrix\nresults = model.predict_classes(X_test)\ncm = confusion_matrix(np.where(y_test == 1)[1], results)\n#cm = cm.astype(np.float) \/ cm.sum(axis=1)[:, np.newaxis]","7b67ce0c":"import seaborn as sns","f00bf28c":"label_mapdisgust = ['Anger', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']","3b54f100":"#Transform to df for easier plotting\ncm_df = pd.DataFrame(cm, index = label_mapdisgust,\n                     columns = label_mapdisgust\n                    )","6aa90ff0":"final_cm = cm_df.drop('Disgust',axis=0)\nfinal_cm = final_cm.drop('Disgust',axis=1)","ff5fb685":"final_cm","164ac400":"plt.figure(figsize = (5,5))\nsns.heatmap(final_cm, annot = True,cmap='Greys',cbar=False,linewidth=2,fmt='d')\nplt.title('CNN Emotion Classify')\nplt.ylabel('True class')\nplt.xlabel('Prediction class')\nplt.show()","64b5cd37":"from sklearn.metrics import roc_curve,auc\nfrom itertools import cycle","538107ef":"new_label = ['Anger', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\nfinal_label = new_label\nnew_class = 6","d560b205":"#ravel flatten the array into single vector\ny_pred_ravel = y_pred.ravel()\nlw = 2","1ee69e09":"fpr = dict()\ntpr = dict()\nroc_auc = dict()\n\nfor i in range(new_class):\n    fpr[i], tpr[i], _ = roc_curve(y_test[:,i], y_pred[:,i])\n    roc_auc[i] = auc(fpr[i], tpr[i])\n    \n#colors = cycle(['red', 'green','black'])\ncolors = cycle(['red', 'green','black','blue', 'yellow','purple'])\nfor i, color in zip(range(new_class), colors):\n    plt.plot(fpr[i], tpr[i], color=color, lw=lw,\n             label='ROC curve of class {0}'''.format(final_label[i]))\n    \n\nplt.plot([0, 1], [0, 1], 'k--', lw=lw)\nplt.xlim([0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","cc466a5b":"#keras.optimizers.SGD(learning_rate=0.01, momentum=0.0, nesterov=False)\n#keras.optimizers.RMSprop(learning_rate=0.001, rho=0.9)\n#keras.optimizers.Adagrad(learning_rate=0.01)\n#keras.optimizers.Adadelta(learning_rate=1.0, rho=0.95)\n#keras.optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, amsgrad=False)\n#keras.optimizers.Adamax(learning_rate=0.002, beta_1=0.9, beta_2=0.999)\n#keras.optimizers.Nadam(learning_rate=0.002, beta_1=0.9, beta_2=0.999)","930d054a":"ROC Curve","68e3c106":"Confusion Matrix","6ecfdbb2":"Define Batch Size and Epoch iteration","b51f88e0":"**Split Train Test data**","b75bb3f8":"Fit augmentated Data into model","54f992ba":"Image Augmentation","49ac2995":"Preprocess Image to detect only face"}}