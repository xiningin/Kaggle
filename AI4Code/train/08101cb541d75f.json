{"cell_type":{"8ff347a8":"code","d4175906":"code","d9a84351":"code","5e04552c":"code","d34da7f2":"code","f469d5bb":"code","e3dd3e60":"code","df87fb6d":"code","52705355":"code","989b7dbc":"code","2051b2a6":"code","1f1b038c":"code","c2650336":"code","886172c4":"code","baa92bd4":"code","1505e829":"code","8ef80270":"code","643ece73":"code","d088884c":"code","1b91fa97":"code","f55898a0":"code","40cb1f4a":"code","5cde2261":"code","a255e502":"code","23ad9fc4":"code","76c204ab":"code","46daa1de":"code","c2d13e5b":"code","52a54976":"code","a9591e1f":"code","f5ca9f23":"code","b316be08":"code","eb450ec3":"code","89248562":"code","8284e9cb":"code","53dae3fd":"code","71826ffe":"code","b72b0141":"code","3a9fa32b":"code","d19ffc1a":"code","277e4648":"code","426a484a":"code","aca922d6":"code","0a4a3584":"code","1800e2cd":"code","65d0cdef":"code","c5cd555b":"code","5a56d6fb":"code","06a314d9":"code","cbe6eebb":"code","c061e2bb":"code","681a14ce":"code","d754e671":"code","6feb268e":"code","da75e0fd":"code","49046f8b":"code","7fcb4a88":"code","da832000":"code","501c8a53":"code","fdc3094a":"code","bcbc520e":"code","5ea98456":"code","e72aa085":"code","63628e15":"code","0871630b":"code","c7effef2":"code","ba537467":"code","27459840":"code","66d76491":"code","846a99cd":"code","d8032726":"code","ce3a1535":"code","57c52c5a":"code","6b0bedd8":"code","8df8aa7e":"code","86f10e95":"code","88406182":"code","4265add9":"code","74aa6079":"code","ca606e26":"code","a074879c":"code","32c3bb49":"code","ceb82508":"code","390fcf3d":"code","fb7c1bf1":"markdown","f50b79ff":"markdown","99e8f719":"markdown","6e5b4d50":"markdown","7117d84d":"markdown","be3cf649":"markdown","ffe6a7a9":"markdown","c5adac76":"markdown","2ee5bb1f":"markdown","b4ce1ba3":"markdown"},"source":{"8ff347a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d4175906":"pd.set_option ('display.max_columns', 20)","d9a84351":"pd.set_option ('display.width', None)","5e04552c":"movie = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/movie.csv')","d34da7f2":"rating = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/rating.csv')","f469d5bb":"df = movie.merge(rating, how=\"left\", on=\"movieId\")","e3dd3e60":"df.head()","df87fb6d":"#1 film ka\u00e7 kez ge\u00e7mi\u015f?\ncomment_counts = pd.DataFrame(df[\"title\"].value_counts())","52705355":"comment_counts.head()","989b7dbc":"#title'\u0131 binden az olanlara nadir filmler dedim\nrare_movies = comment_counts[comment_counts['title'] < 1000].index","2051b2a6":"rare_movies[0:10]","1f1b038c":"# binden fazla olanlara da yayg\u0131n filmler dedim\ncommon_movies = df[~df['title'].isin(rare_movies)]","c2650336":"common_movies.head()","886172c4":"#user ve film ismine g\u00f6re bir tablo \u00e7\u0131kard\u0131k de\u011ferler ratinglerdir.\nuser_movie_df = common_movies.pivot_table(index=['userId'], columns=['title'], values = 'rating')","baa92bd4":"user_movie_df.head()","1505e829":"user_movie_df.shape","8ef80270":"# kendimize hedef user belirledik. her zaman hedef ayn\u0131 \u00e7\u0131ks\u0131n diye random state atad\u0131k.\nrandom_user = int(pd.Series(user_movie_df.index).sample(1, random_state = 45).values)","643ece73":"random_user","d088884c":"#user ve filmlerle olu\u015fturdu\u011fumuz dfin i\u00e7erisinden random user\u0131m\u0131z\u0131 \u00e7ektik = random_user_df\nrandom_user_df = user_movie_df[user_movie_df.index == random_user]","1b91fa97":"random_user_df.head()","f55898a0":"#random user\u0131m\u0131z\u0131n izledi\u011fi filmleri getirdik.\nmovies_watched = random_user_df.columns[random_user_df.notna().any()].tolist()","40cb1f4a":"movies_watched[:10]","5cde2261":"#user\u0131m\u0131z 33 tane filmi izlemi\u015f\nlen(movies_watched)","a255e502":"#user\u0131m\u0131z\u0131n izledi\u011fi 33 filmden herhangi birini veya birka\u00e7\u0131n\u0131 izleyen userlar\u0131 bulduk = movies_watched_df\nmovies_watched_df = user_movie_df[movies_watched]","23ad9fc4":"movies_watched_df.head()","76c204ab":"# ka\u00e7ar tane ayn\u0131 izlemi\u015fler ona bakt\u0131k\nuser_movie_count = movies_watched_df.T.notnull().sum()","46daa1de":"user_movie_count.head()","c2d13e5b":"user_movie_count = user_movie_count.reset_index()","52a54976":"user_movie_count.head()","a9591e1f":"user_movie_count.columns = [\"userId\", \"movie_count\"]","f5ca9f23":"#20den daha fazla ayn\u0131 izleyenleri s\u0131ralad\u0131k.\nuser_movie_count.sort_values(\"movie_count\", ascending = False)","b316be08":"perc = len(movies_watched) * 60 \/ 100","eb450ec3":"#izlediklerinin hepsini izleyen ki\u015fi say\u0131s\u0131na bakt\u0131k. 214 ki\u015fiymi\u015f.\nuser_movie_count[user_movie_count[\"movie_count\"] == perc].count()","89248562":"#y\u00fczde 60'dan fazla ayn\u0131 filmi izleyenlerin userIdlerini user_same_movies'e atad\u0131k.\nuser_same_movies = user_movie_count[user_movie_count[\"movie_count\"] > perc]['userId']","8284e9cb":"user_same_movies.head()","53dae3fd":"user_same_movies.count()","71826ffe":"movies_watched_df.head()","b72b0141":"#user\u0131n izledi\u011fi filmlerden en az birini izleyenlerin i\u00e7inde oldu\u011fu movies_watched_df i\u00e7erisinden\n#en az y\u00fczde 60 tane izleyenleri ald\u0131k ve bunun ile kendi user\u0131m\u0131z\u0131n 33 tane izledi\u011fi filmleri birle\u015ftirdik.\nfinal_df = pd.concat([movies_watched_df[movies_watched_df.index.isin(user_same_movies)],\n                    random_user_df[movies_watched]])\n#ilk k\u0131s\u0131n 137 bin k\u00fcs\u00fcr film i\u00e7erisinden sadece same izleyenleri getirdi.\n# 2. k\u0131s\u0131m ise bize user\u0131m\u0131z\u0131n izledi\u011fi filmleri getirdi. yani 191 tane ","3a9fa32b":"final_df.head(10)","d19ffc1a":"final_df.shape\n#1 tane user artt\u0131 neden? kendi user\u0131m\u0131zda eklendi. filmler de 33 tane.","277e4648":"#useridlerin hepsinin birbirleri ile olan benzerliklerine bakt\u0131k.\nfinal_df.T.corr()","426a484a":"# bir \u015feyi birden fazla g\u00f6stermesini \u00f6nledik ve tablo haline getirdik.\ncorr_df = final_df.T.corr().unstack().sort_values().drop_duplicates()","aca922d6":"#corelasyonu column olarak ekledik \ncorr_df = pd.DataFrame(corr_df, columns = [\"corr\"])","0a4a3584":"corr_df.head()","1800e2cd":"#userlar kar\u0131\u015fmas\u0131n diye isim d\u00fczenlemesi\ncorr_df.index.names = [\"user_id_1\", \"user_id_2\"]","65d0cdef":"corr_df.head()","c5cd555b":"corr_df = corr_df.reset_index()","5a56d6fb":"corr_df.head()","06a314d9":"#korelasyonu %65 \u00fcst\u00fc olan ve ilk user\u0131 bizim se\u00e7ti\u011fimiz user olanlar\u0131n userId2 sini ve korelasyonunu\n# getirdik.\ntop_users = corr_df[(corr_df[\"user_id_1\"] == random_user) & (corr_df[\"corr\"] >= 0.65)][[\"user_id_2\", \"corr\"]].reset_index(drop=True)","cbe6eebb":"top_users.head()","c061e2bb":"#corelasyonuna g\u00f6re b\u00fcy\u00fckten k\u00fc\u00e7\u00fc\u011fe s\u0131ral\u0131 olsun dedik\ntop_users = top_users.sort_values(by='corr', ascending=False)","681a14ce":"top_users.head()","d754e671":"#user_id_2 ismini de\u011fi\u015ftirdik\ntop_users.rename(columns={\"user_id_2\": \"userId\"}, inplace=True)","6feb268e":"rating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')","da75e0fd":"#top userlar\u0131m\u0131z\u0131n ratinglerini, movieidlerini ve user idlerini bar\u0131nd\u0131ran bir df yapt\u0131k.\ntop_users_ratings = top_users.merge(rating[[\"userId\", \"movieId\", \"rating\"]],how = 'inner')","49046f8b":"top_users_ratings.head()","7fcb4a88":"top_users_ratings = top_users_ratings[top_users_ratings[\"userId\"] != random_user]","da832000":"top_users_ratings.head()","501c8a53":"top_users_ratings[\"weighted_rating\"] = top_users_ratings['corr'] * top_users_ratings['rating']","fdc3094a":"top_users_ratings.head()","bcbc520e":"top_users_ratings.groupby(\"movieId\").agg({\"weighted_rating\": \"mean\"})","5ea98456":"recommendation_df = top_users_ratings.groupby('movieId').agg({'weighted_rating': 'mean'})","e72aa085":"recommendation_df = recommendation_df.reset_index()","63628e15":"import matplotlib.pyplot as plt","0871630b":"# a\u011f\u0131rl\u0131k ortalmas\u0131 yakla\u015f\u0131k 2.5 \u00e7\u0131kt\u0131. buna g\u00f6re hareket edebiliriz.\nrecommendation_df[\"weighted_rating\"].hist()","c7effef2":"plt.show()","ba537467":"# weighted_rating'i 2.5'den b\u00fcy\u00fck olanlar\u0131 getirelim.\nmovies_to_be_recommended = recommendation_df[recommendation_df['weighted_rating'] > 2.5].sort_values(\"weighted_rating\", ascending = False).head()","27459840":"movies_to_be_recommended.head()","66d76491":"movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')","846a99cd":"recommended_user_based_df = movies_to_be_recommended.merge(movie[[\"movieId\",\"title\"]])","d8032726":"recommended_user_based_df.head()","ce3a1535":"recommended_user_based_df.shape","57c52c5a":"movie_id = rating[(rating[\"userId\"] == random_user) & (rating[\"rating\"] == 5.0)].sort_values(by=\"timestamp\", ascending = False)[\"movieId\"][0:1].values[0]","6b0bedd8":"user_movie_df[movie[movie[\"movieId\"] == movie_id][\"title\"].values[0]]","8df8aa7e":"user_movie_df.corrwith(movie).sort_values(ascending=False).head(5)","86f10e95":"def item_based_recommender(movie_name, user_movie_df, head=10):\n    movie = user_movie_df[movie_name]\n    return user_movie_df.corrwith (movie).sort_values(ascending=False).head(head)","88406182":"movies_from_item_based = item_based_recommender(movie[movie[\"movieId\"] == movie_id][\"title\"].values[0], user_movie_df, 20).reset_index()","4265add9":"movies_from_item_based.head()","74aa6079":"movies_from_item_based.rename(columns={0:\"corr\"}, inplace=True)","ca606e26":"movies_from_item_based.head()","a074879c":"recommended_item_based_df = movies_from_item_based.loc[~movies_from_item_based[\"title\"].isin(movies_watched)][:5]","32c3bb49":"recommended_item_based_df","ceb82508":"hybrid_rec_df = pd.concat([recommended_user_based_df[\"title\"], recommended_item_based_df[\"title\"]]).reset_index(drop=True)","390fcf3d":"hybrid_rec_df","fb7c1bf1":"Veri Haz\u0131rlama","f50b79ff":"3) Ayn\u0131 Filmleri \u0130zleyen Di\u011fer Kullan\u0131c\u0131lar\u0131n Verisine ve Id'lerine Eri\u015fmek","99e8f719":"Bizim random_user sayesinde belirledi\u011fimiz user\u0131m\u0131z ile y\u00fczde 65 \u00fczeri korelasyona sahip olan kullan\u0131c\u0131lara eri\u015felim.","6e5b4d50":"\u00d6neri yap\u0131lacak kullan\u0131c\u0131n\u0131n 5 puan verdi\u011fi filmlerden puan\u0131 en g\u00fcncel olan filmin al\u0131nmas\u0131","7117d84d":"5) Weighted Average Recommendation Score'un Hesaplanmas\u0131 ve ilk 5 Filmin Tutulmas\u0131","be3cf649":"### ","ffe6a7a9":"Bunun i\u00e7in 3 ad\u0131m ger\u00e7ekle\u015ftirece\u011fiz:\n* 1 User\u0131m\u0131z ve di\u011fer kullan\u0131c\u0131lar\u0131n verilerini bir araya getirece\u011fiz.\n* 2 Korelayon dataframe'ini olu\u015fturaca\u011f\u0131z.\n* 3 En benzer kullan\u0131c\u0131lar\u0131 (Top Users) bulaca\u011f\u0131z.","c5adac76":"4) \u00d6neri Yap\u0131lacak Kullan\u0131c\u0131 ile En Benzer Davran\u0131\u015f\u0131 G\u00f6steren Kullan\u0131c\u0131lar\u0131n Belirlenmesi","2ee5bb1f":"2) \u00d6neri Yap\u0131lacak Kullan\u0131c\u0131lar\u0131n \u0130zledi\u011fi Filmlerin Belirlenmesi","b4ce1ba3":"6) Item-Based Recommendation"}}