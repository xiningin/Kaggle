{"cell_type":{"308e2468":"code","c47fb3b6":"code","adc3788a":"code","823e8b2f":"code","c2894178":"code","4c446ebf":"code","1d3a686f":"code","264041eb":"code","e0d111cb":"code","fbd7d34d":"code","cb6e4c99":"code","6b37d42f":"code","ce9ab616":"code","9e0a7f81":"code","039d0eed":"code","2a49aa7e":"code","914207dd":"code","5271232e":"code","9fa118cd":"code","b83f7e1c":"code","086a9e44":"code","81497c60":"code","6fe8b9af":"code","8389f950":"code","feb3151c":"code","5eb7b65b":"code","5921eef0":"code","de0969e7":"code","dadc34a7":"code","58fb9de5":"code","f51a9259":"code","3e2e5f6b":"code","31c6d730":"code","17aa96ad":"code","8dae5dea":"code","4671d6da":"code","f9ad3c98":"markdown","a36672db":"markdown","619495a3":"markdown","806fdfcc":"markdown","cce88ea4":"markdown","81dbde28":"markdown","af3cbe61":"markdown","90321a35":"markdown","25875ba1":"markdown","f5b198bc":"markdown","d5bfa013":"markdown","13dd9f90":"markdown","4be3762c":"markdown","2e591c67":"markdown","e8f4d5ec":"markdown","e14cff09":"markdown","510a4b96":"markdown","cd90cde2":"markdown","350fc5f1":"markdown","471603ad":"markdown","27bc45c3":"markdown","588492cf":"markdown","64585006":"markdown","b3517c64":"markdown","f98e36d4":"markdown","ced75141":"markdown","cb0131fe":"markdown","5357a6d9":"markdown","56bd99c9":"markdown","ccfbe848":"markdown","372f947d":"markdown","0581b179":"markdown"},"source":{"308e2468":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c47fb3b6":"df = pd.read_csv(\"\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")\ndf.head()","adc3788a":"df.info()","823e8b2f":"df[\"bmi\"] = df[\"bmi\"].fillna(df[\"bmi\"].mean())\n\nprint(\"Smoking Status:\\n{}\".format(df[\"smoking_status\"].value_counts()))\nprint(\"\\n\\nGender:\\n{}\".format(df[\"gender\"].value_counts()))\nprint(\"\\n\\nWork Type:\\n{}\".format(df[\"work_type\"].value_counts()))\nprint(\"\\n\\nResidence Type:\\n{}\".format(df[\"Residence_type\"].value_counts()))\n","c2894178":"indexToDrop = df[df[\"gender\"] == \"Other\"].index\ndf.drop(indexToDrop,inplace=True)\ndf[\"gender\"].value_counts()","4c446ebf":"df[\"smoking_status\"] = df[\"smoking_status\"].apply(lambda x: x.replace(\"formerly smoked\",\"smokes\"))\ndf[\"smoking_status\"].value_counts()\n","1d3a686f":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\nto_encode = [\"gender\",\"work_type\",\"Residence_type\",\"ever_married\",\"smoking_status\"]\ndef encode(colName):\n    newName = colName + \"_encoded\"\n    df[newName] = le.fit_transform(df[colName])\n    return df\n\nfor x in to_encode:\n    encode(x)\n    \ndf.head()","264041eb":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px","e0d111cb":"marriageStrokeAffect = sns.countplot(x=\"stroke\",hue=\"ever_married\",data=df,palette=\"husl\")\nmarriageStrokeAffect.set_title(\"Marriage Affect on Stroke\")\nplt.show()","fbd7d34d":"onlyStroke = df[df[\"stroke\"] == 1]\nmarriageStrokeAffectOnlyStroke = sns.countplot(x=\"stroke\",hue=\"ever_married\",data=onlyStroke,palette=\"husl\")\nmarriageStrokeAffectOnlyStroke.set_title(\"Marriage Affect On Stroke\")\nplt.show()","cb6e4c99":"f, ax = plt.subplots(figsize=(18, 7))\n\nageStroke = sns.countplot(x=\"age\",hue=\"stroke\",data=onlyStroke,palette=\"husl\")\nageStroke.set_title(\"Age Affect on Stroke\")\nplt.show()\n","6b37d42f":"genderStroke = sns.countplot(x=\"stroke\",hue=\"gender\",data=df,palette=\"Set2\")\ngenderStroke.set_title(\"Gender Affect on Stroke\")\nplt.show()","ce9ab616":"genderStroke = sns.countplot(x=\"stroke\",hue=\"gender\",data=onlyStroke,palette=\"Set2\")\ngenderStroke.set_title(\"Gender Affect on Stroke(Data Only Stroke)\")\nplt.show()","9e0a7f81":"ageGenderStrokeFig = px.bar(onlyStroke,x=\"age\",y=\"stroke\",color=\"gender\",title=\"Age and Gender Affect on Stroke\")\nageGenderStrokeFig.show()","039d0eed":"heartDiseaseStroke = px.bar(onlyStroke,x=\"heart_disease\",y=\"stroke\",title=\"Heart Disease affect on Stroke\")\nheartDiseaseStroke.show()","2a49aa7e":"heartDiseaseStrokeGender = px.bar(onlyStroke,x=\"heart_disease\",y=\"stroke\",color=\"gender\",title=\"Heart Disease affect on Stroke\")\nheartDiseaseStrokeGender.show()\n","914207dd":"df[\"stroke_str\"] = df[\"stroke\"].apply(str)\nbmiAgeStroke = px.scatter(df,x=\"age\",y=\"bmi\",color=\"stroke_str\",color_discrete_sequence=px.colors.qualitative.Set3,\n                          title=\"Age and BMI Affect on Stroke\")\nbmiAgeStroke.show()\n","5271232e":"glucoseAgeStroke = px.scatter(df,x=\"age\",y=\"avg_glucose_level\",color=\"stroke\",\n                              color_discrete_sequence=px.colors.qualitative.Set3,\n                              title=\"Glucose Level and Age Affect on Stroke\")\nglucoseAgeStroke.show()","9fa118cd":"smokeStroke = px.bar(df,x=\"smoking_status\",y=\"stroke\",title=\"Smoke Affect on Stroke\")\nsmokeStroke.show()","b83f7e1c":"hypertensionStroke = sns.countplot(x=\"hypertension\",hue=\"stroke\",data=df)\nhypertensionStroke.set_title(\"Hypertension Affect on Stroke\")\nplt.show()","086a9e44":"workStroke = px.bar(df,x=\"work_type\",y=\"stroke\",color=\"gender\",title=\"Work Type Affect on Stroke\")\nworkStroke.show()","81497c60":"residenceStroke = sns.countplot(x=\"Residence_type\",data=df,hue=\"stroke\")\nplt.show()","6fe8b9af":"corr_df = df.corr()\nf, ax = plt.subplots(figsize=(10, 8))\n\ncorr_vis = sns.heatmap(corr_df,cmap=\"YlGnBu\")\nplt.show()","8389f950":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import GridSearchCV\nfrom imblearn.over_sampling import SMOTE","feb3151c":"X = df[[\"age\",\"hypertension\",\"heart_disease\",\"avg_glucose_level\",\"bmi\",\"gender_encoded\",\"work_type_encoded\",\"Residence_type_encoded\",\"ever_married_encoded\",\"smoking_status_encoded\"]]\ny = df[\"stroke\"]","5eb7b65b":"smk = SMOTE()\nX_sam, y_sam = smk.fit_resample(X,y)","5921eef0":"print(X.shape)\nprint(y.shape)\n","de0969e7":"print(X_sam.shape)\nprint(y_sam.shape)","dadc34a7":"X = X_sam[[\"age\",\"hypertension\",\"heart_disease\",\"avg_glucose_level\",\"bmi\",\"gender_encoded\",\"work_type_encoded\",\"Residence_type_encoded\",\"ever_married_encoded\",\"smoking_status_encoded\"]]\ny = y_sam","58fb9de5":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3)","f51a9259":"knn = KNeighborsClassifier()\nparameters_knn = {\"n_neighbors\" : range(1,100,5), \"weights\" : (\"uniform\",\"distance\"), \"leaf_size\" : range(10,100,10)}\ngsKnn = GridSearchCV(knn,parameters_knn,scoring=\"accuracy\")\ngsKnn.fit(X_train,y_train)\nprint(gsKnn.best_score_)\nprint(gsKnn.best_estimator_)","3e2e5f6b":"knn = KNeighborsClassifier(leaf_size=10, n_neighbors=1)\nknn.fit(X_train,y_train)\nknnPred = knn.predict(X_test)\n\nprint(classification_report(y_test,knnPred))\nprint(confusion_matrix(y_test,knnPred))\n","31c6d730":"knnCfMatrix = confusion_matrix(y_test,knnPred)\nf, ax = plt.subplots(figsize=(10, 8))\nknnHeat = sns.heatmap(knnCfMatrix,annot=True,cmap=\"Blues\",fmt=\"g\")\nplt.show()","17aa96ad":"rfc = RandomForestClassifier()\nparameters = {\"n_estimators\" : range(10,300,10), \"criterion\" : (\"gini\",\"entropy\"), \"max_features\" : (\"auto\", \"sqrt\", \"log2\")}\ngs = GridSearchCV(rfc,parameters,scoring=\"accuracy\")\ngs.fit(X_train,y_train)\nprint(gs.best_score_)\nprint(gs.best_estimator_)","8dae5dea":"rfc = RandomForestClassifier(max_features='sqrt', n_estimators=210)\nrfc.fit(X_train,y_train)\nrfcPred = rfc.predict(X_test)\nprint(classification_report(y_test,rfcPred))\nprint(confusion_matrix(y_test,rfcPred))","4671d6da":"rfcCfMatrix = confusion_matrix(y_test,rfcPred)\nf, ax = plt.subplots(figsize=(10, 8))\nknnHeat = sns.heatmap(rfcCfMatrix,annot=True,cmap=\"Blues\",fmt=\"g\")\nplt.show()","f9ad3c98":"# <a id='OVERSAMPLING' style=\"color:khaki\" >**Oversampling**\n\n","a36672db":"# <a id='Data-Cleansing' style=\"color:khaki\" >**Data Cleansing**\n\n","619495a3":"Features and target data","806fdfcc":"Old data","cce88ea4":"Now let's Label Encode our string columns.\n* Gender\n* Work type\n* Residence type\n* Ever Married\n* Smoking Status","81dbde28":"I'll also put \"Formerly smoked\" into \"Smokes\" group","af3cbe61":"<h3>In this notebook we'll deal with analyzing all factors that can lead to stroke. We'll compare what has more impact on stroke and after that we'll build a model to predict whether patient suffers of stroke. This is a classification problem and later we'll se which models we are going to use.<\/h3>","90321a35":"# <a id='Models' style=\"color:khaki\" >**Models**\n\n","25875ba1":"Libraries","f5b198bc":"Let's see if age has any impact on stroke.","d5bfa013":"# <a id='Label-Encoding' style=\"color:khaki\" >**Label Encoding**\n\n","13dd9f90":"Our data is imbalanced - there is much more data for no stroke, then there is for stroke. So, we'll need to do oversample. I'll use SMOTE.","4be3762c":"Let's implement best parameters on Random Forest Classifier Model","2e591c67":"# <a id='KNN' style=\"color:khaki\" >**KNN**\n\n","e8f4d5ec":"# <a id='KNNCV' style=\"color:khaki\" >**GRID SEARCH CV - KNN**\n\n","e14cff09":"1. First we'll fill those null values in BMI column\n2. We'll check all unique data in:\n* gender\n* work type\n* residence type\n* smoking status\n","510a4b96":"Let's import libraries for visualizations.","cd90cde2":"I'll remove gender == \"other\" because there's only 1 field","350fc5f1":"Train test split","471603ad":"New data","27bc45c3":"# <a id='RFCCV' style=\"color:khaki\" >**GRID SEARCH CV - RANDOM FOREST CLASSIFIER**\n\n","588492cf":"# <a id='Data-Analysis' style=\"color:khaki\" >**Data Analysis**\n\n","64585006":"<h3> Upvote if you want to see more editing\/model improvement\/tuning on this code. :) <\/h3>","b3517c64":"Let's start with basic countplot for Marriage effect on stroke","f98e36d4":"<h1>STROKE PREDICTION & ANALYSIS<\/h1>","ced75141":"![Stroke](https:\/\/blog.encompasshealth.com\/wp-content\/uploads\/2020\/09\/did-you-have-a-stroke.jpg?w=700&h=400&crop=1)","cb0131fe":"# <a id='RFC' style=\"color:khaki\" >**RANDOM FOREST CLASSIFIER**\n\n","5357a6d9":"Let's have a closer look for those patients who had a stroke and their marriage status.","56bd99c9":"Let's train our KNN with best parameters.","ccfbe848":"# <span style=\"color:khaki\">**Content**<span> \n- [Data Cleansing](#Data-Cleansing) <a href = '#Data-Cleansing'><\/a>\n- [Label Encoding](#Label-Encoding) <a href = '#Label-Encoding'><\/a>\n- [Data Analysis](#Data-Analysis) <a href = '#Data-Analysis'><\/a>\n- [Models](#Models) <a href = '#Models'><\/a>\n- [Oversampling](#OVERSAMPLING) <a href = '#OVERSAMPLING'><\/a>\n- [Grid Search CV KNN](#KNNCV) <a href = '#KNNCV'><\/a>\n- [KNN](#KNN) <a href = '#KNN'><\/a>\n- [Grid Search CV Random Forest Classifier](#RFRCV) <a href = '#RFRCV'><\/a>\n- [Random Forest Classifier](#RFR) <a href = '#KRFR'><\/a>\n\n\n\n\n\n","372f947d":"Let's read our dataset and see what we have.","0581b179":"Next plot will see which gender had more strokes.\n"}}