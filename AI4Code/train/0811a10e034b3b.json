{"cell_type":{"356bf3ec":"code","59d0ef35":"code","878391c5":"code","6d534eab":"code","87d62e22":"code","f1298f1a":"code","07f18726":"code","733f272b":"code","bbf3e5e8":"code","851f39bf":"code","bb95441c":"code","8a193e19":"code","e22259bf":"code","3cd24cc3":"code","f0294265":"code","51c6a1e1":"code","fc0ed6f7":"code","6271044e":"markdown"},"source":{"356bf3ec":"import numpy as np\nimport pandas as pd\nimport cv2\nimport re\nfrom tqdm.notebook import tqdm\nfrom PIL import Image\nimport hashlib\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom keras import backend as K\nfrom keras.preprocessing.image import ImageDataGenerator,load_img, img_to_array\nfrom keras.models import Sequential, Model\nfrom keras.layers import Conv2D, MaxPooling2D,GlobalAveragePooling2D\nfrom keras.layers import Activation, Dropout, BatchNormalization, Flatten, Dense, AvgPool2D,MaxPool2D\nfrom keras.models import Sequential, Model\nfrom keras.applications.vgg16 import VGG16, preprocess_input\nfrom keras.optimizers import Adam, SGD, RMSprop\nimport random\nimport tensorflow as tf\n\nimport os\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nsns.set()\n\nDIR_INPUT = '\/kaggle\/input\/global-wheat-detection'\nDIR_TRAIN_IMAGES = f'{DIR_INPUT}\/train'","59d0ef35":"train_df = pd.read_csv(f'{DIR_INPUT}\/train.csv')\ntrain_df.shape\n","878391c5":"train_df.sample(6)","6d534eab":"train_df['image_id'].nunique()","87d62e22":"train_df.nunique()","f1298f1a":"train_df['x'] = -1\ntrain_df['y'] = -1\ntrain_df['w'] = -1\ntrain_df['h'] = -1\n\ndef expand_bbox(x):\n    r = np.array(re.findall(\"([0-9]+[.]?[0-9]*)\", x))\n    if len(r) == 0:\n        r = [-1, -1, -1, -1]\n    return r\n\ntrain_df[['x', 'y', 'w', 'h']] = np.stack(train_df['bbox'].apply(lambda x: expand_bbox(x)))\ntrain_df.drop(columns=['bbox'], inplace=True)\ntrain_df['x'] = train_df['x'].astype(np.float)\ntrain_df['y'] = train_df['y'].astype(np.float)\ntrain_df['w'] = train_df['w'].astype(np.float)\ntrain_df['h'] = train_df['h'].astype(np.float)","07f18726":"train_df.groupby(by='image_id')['source'].count().agg(['min', 'max', 'mean'])","733f272b":"source = train_df['source'].value_counts()\nsource","bbf3e5e8":"fig = go.Figure(data=[\n    go.Pie(labels=source.index, values=source.values)\n])\n\nfig.update_layout(title='Source distribution')\nfig.show()","851f39bf":"def show_images(image_ids):\n    \n    col = 5\n    row = min(len(image_ids) \/\/ col, 5)\n    \n    fig, ax = plt.subplots(row, col, figsize=(16, 8))\n    ax = ax.flatten()\n\n    for i, image_id in enumerate(image_ids):\n        image = cv2.imread(DIR_TRAIN_IMAGES + '\/{}.jpg'.format(image_id))\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n        ax[i].set_axis_off()\n        ax[i].imshow(image)\n        \n        \ndef show_image_bb(image_data):\n    \n    fig, ax = plt.subplots(1, 1, figsize=(16, 8))\n    \n    image = cv2.imread(DIR_TRAIN_IMAGES + '\/{}.jpg'.format(image_data.iloc[0]['image_id']))\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n    for i, row in image_data.iterrows():\n        \n        cv2.rectangle(image,\n                      (int(row['x']), int(row['y'])),\n                      (int(row['x']) + int(row['w']), int(row['y']) + int(row['h'])),\n                      (220, 0, 0), 3)\n\n    ax.set_axis_off()\n    ax.imshow(image)\n    ","bb95441c":"show_images(train_df.sample(n=15)['image_id'].values)","8a193e19":"show_image_bb(train_df[train_df['image_id'] == '5e0747034'])","e22259bf":"show_image_bb(train_df[train_df['image_id'] == '013fd7d80'])","3cd24cc3":"show_image_bb(train_df[train_df['image_id'] == '00764ad5d'])","f0294265":"show_image_bb(train_df[train_df['image_id'] == '00e903abe'])","51c6a1e1":"show_image_bb(train_df[train_df['image_id'] == '01189a3c3'])","fc0ed6f7":"show_image_bb(train_df[train_df['image_id'] == '006a994f7'])","6271044e":"So, all the images we have are in same dimensions 1024x1024"}}