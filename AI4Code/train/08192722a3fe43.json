{"cell_type":{"1f38c018":"code","4243f733":"code","9d383549":"code","02744135":"code","b1c916b6":"code","c69c8b41":"code","82f6e701":"code","a95d67dd":"code","c3c75964":"code","1f4b4114":"code","02212da6":"code","d298b4a2":"code","f750145e":"code","c398d8ba":"code","6e25524c":"code","e6de29c2":"code","71967664":"code","2fb94601":"code","e0fa624c":"code","c495d978":"code","286dd2c6":"code","41d1460e":"code","d90404f7":"code","c1725798":"code","8f3f38ae":"code","4dd38388":"code","3fc9333a":"code","b4dd311a":"code","4223ff0d":"code","01706e2b":"code","eca20e79":"code","c8b241d8":"code","fbc5e221":"code","33e75630":"code","4646ae16":"code","12505706":"code","32a14cf8":"code","c5e96ee7":"code","59bafc6c":"code","26029b18":"code","d6e9eea9":"code","5f3bfd3e":"code","03f1980c":"code","efe0bb80":"code","b3acc16c":"code","50a72296":"code","33bf3f58":"code","e2b62e85":"code","ee9f242a":"code","40f0b271":"code","c9cb1130":"code","cc484af1":"code","91160f0d":"code","a7b40770":"code","0b57d030":"markdown","aa3efd2b":"markdown"},"source":{"1f38c018":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4243f733":"FILEPATH = '\/kaggle\/input\/sms-spam-collection-dataset\/spam.csv'","9d383549":"df = pd.read_csv(FILEPATH, encoding='iso-8859-1', engine = 'c') # engine 'c' used instead of 'python' for higher performance\ndf.sample(10)","02744135":"# delete unnecessary cols\ncols = ['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4']\n\ndf.drop(cols, axis = 1, inplace = True)","b1c916b6":"df.head()","c69c8b41":"# Title change v1 = result, v2 = input\n\ndf.columns = ['result', 'input']\n\n# we can also use df.rename() option here","82f6e701":"df.head()","a95d67dd":"# reorder options - must be applicable for all cols\ndf = df[['input','result']]\n ","c3c75964":"df.head()","1f4b4114":"# Rename cols by using .rename - can be used for selected cols\n\ndf.rename(columns = {'input' : 'my_new_input', 'result' : 'my_new_result'}, inplace = True)","02212da6":"df.head()","d298b4a2":"df.count()","f750145e":"# print first string\n\ndf.iloc[1]","c398d8ba":"df.iloc[2][1]","6e25524c":"def find_message_length(msg):\n    \n    msg_words = msg.split(' ')\n    \n    msg_len = len(msg_words)\n    \n    return msg_len","e6de29c2":"print(find_message_length('spaCy is an open-source software library for advanced natural language processing, written in the programming languages Python and Cython. The library is published under the MIT license and its main developers are Matthew Honnibal and Ines Montani, the founders of the software company Explosion.'))","71967664":"# Create a new col called 'message_word_length' showing how many words in the message\ndf['input_words_count'] = df['my_new_input'].apply(find_message_length)\ndf.head()\n\n# ref: https:\/\/rajacsp.github.io\/mlnotes\/python\/data-wrangling\/advanced-custom-lambda\/","2fb94601":"# show the unique labels\n\nset(df['my_new_result'])","e0fa624c":"def find_length(msg):\n    \n    msg_len = len(msg)\n    \n    return msg_len","c495d978":"print(find_length(df.iloc[0][0]))","286dd2c6":"# Create a new col called 'message_word_length' showing how many words in the message\ndf['input_char_length'] = df['my_new_input'].apply(find_length)\ndf.head()","41d1460e":"# History words count\n\nimport matplotlib.pyplot as plt\n\n# to avoid popups use inline\n%matplotlib inline ","d90404f7":"# plt.hist(data['label'], bins=3, weights=np.ones(len(data['label'])) \/ len(data['label']))\n\nimport numpy as np\n\nplt.hist(df['input_words_count'], bins = 100, weights = np.ones(len(df['input_words_count'])) \/ len(df['input_words_count']))\n\nplt.xlabel('Word Length')\nplt.ylabel('Group Count')\nplt.title('Word Length Histogram')","c1725798":"# Find more than 80 words\ndf['input_words_count']","8f3f38ae":"df_above_80 = df[df['input_words_count'] > 80]","4dd38388":"df_above_80.sort_values(by='input_words_count')","3fc9333a":"import numpy as np\n\nplt.hist(df['input_char_length'], bins = 100, weights = np.ones(len(df['input_char_length'])) \/ len(df['input_char_length']))\n\nplt.xlabel('Char Length')\nplt.ylabel('Group Count')\nplt.title('Char Length Histogram')","b4dd311a":"df.my_new_result.value_counts()","4223ff0d":"spams = df[df['my_new_result']=='spam'].iloc[: ,0]\nspams[:5]","01706e2b":"hams = df[df['my_new_result']=='ham'].iloc[:,0]\nhams[:5]","eca20e79":"plt.hist(spams.apply(lambda msg : len(msg)),bins = 100,label = 'Spams')\n\nplt.hist(hams.apply(lambda msg : len(msg)),bins=100,label='Hams',alpha=0.3)\n\nplt.xlabel('Message length')\n\nplt.ylabel('Count')\n\nplt.title('String lengths')\n\nplt.legend()\n\nplt.show()","c8b241d8":"import spacy\nfrom spacy.lang.en.stop_words import STOP_WORDS\nnlp = spacy.load('en')","fbc5e221":"def normalize(msg):\n    \n    doc = nlp(msg)\n    \n    res=[]\n    \n    #for sent in doc.sents:\n     #   print(sent.text)\n    \n    for token in doc:\n        \n        \n        if(token.is_stop or token.is_digit or token.is_punct or not(token.is_oov)):\n            \n            pass\n        \n        else:\n            \n            res.append(token.lemma_.lower())\n    \n    return res\n        ","33e75630":"normalize('spaCy is an open-source software library for advanced natural language processing, written in the programming languages Python and Cython. The library is published under the MIT license and its 23 main developers are Matthew Honnibal and Ines Montani, the founders of the software company Explosion.')","4646ae16":"spam_tokens = []\nfor spam in spams:\n    spam_tokens += normalize(spam)\n    \nham_tokens = []\nfor ham in hams:\n    ham_tokens += normalize(ham)","12505706":"from collections import Counter","32a14cf8":"most_common_tokens_in_spams = Counter(spam_tokens).most_common(20)\nmost_common_tokens_in_hams = Counter(ham_tokens).most_common(20)\n\nprint(most_common_tokens_in_spams,end=\"\\n\\n\")\nprint(most_common_tokens_in_hams)","c5e96ee7":"from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer","59bafc6c":"binary_vectorizer = CountVectorizer(binary=True)\ncount_vectorizer = CountVectorizer()\ntfidf_vectorizer = TfidfVectorizer()","26029b18":"def feature_extraction(msg):\n    \n    mat = pd.DataFrame(tfidf_vectorizer.fit_transform(msg).toarray(),columns=tfidf_vectorizer.get_feature_names(),index=None)\n    return mat","d6e9eea9":"from sklearn.model_selection import train_test_split","5f3bfd3e":"df['my_new_result']=df['my_new_result'].map({\"ham\":0,\"spam\":1})","03f1980c":"k=feature_extraction(df['my_new_input'])\nprint(k.shape,df['my_new_result'].shape)","efe0bb80":"train_x,train_y, test_x,test_y = train_test_split(k,df['my_new_result'], test_size=0.3)\n","b3acc16c":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import f1_score, confusion_matrix","50a72296":"clfs = {\n    'mnb': MultinomialNB(),\n    'gnb': GaussianNB(),\n    'svm1': SVC(kernel='linear'),\n    'svm2': SVC(kernel='rbf'),\n    'svm3': SVC(kernel='sigmoid'),\n    'mlp1': MLPClassifier(),\n    'mlp2': MLPClassifier(hidden_layer_sizes=[100, 100]),\n    'ada': AdaBoostClassifier(),\n    'dtc': DecisionTreeClassifier(),\n    'rfc': RandomForestClassifier(),\n    'gbc': GradientBoostingClassifier(),\n    'lr': LogisticRegression()\n}","33bf3f58":"f1_scores = dict()\nfor clf_name in clfs:\n    clf = clfs[clf_name]\n    clf.fit(train_x, test_x)\n    y_pred = clf.predict(train_y)\n    f1_scores[clf_name] = f1_score(y_pred, test_y)\n    print(clf_name, f1_scores[clf_name])","e2b62e85":"solver=['lbfgs', 'sgd', 'adam']","ee9f242a":"max_f1_score = float('-inf')\nbest_solver = None\n\nfor s in solver:\n    \n    clf = MLPClassifier(solver = s)\n    clf.fit(train_x, test_x)\n    y_pred = clf.predict(train_y)\n    current_f1_score = f1_score(y_pred, test_y)\n    if current_f1_score > max_f1_score:\n        max_f1_score = current_f1_score\n        best_solver = s\n        \nprint('Best Solver: {0}'.format(best_solver))","40f0b271":"alpha_values = [i * 0.1 for i in range(11)]\nmax_f1_score = float('-inf')\nbest_alpha = None\nfor alpha in alpha_values:\n    clf = MLPClassifier(solver = 'adam')\n    clf.fit(train_x, test_x)\n    y_pred = clf.predict(train_y)\n    current_f1_score = f1_score(y_pred, test_y)\n    if current_f1_score > max_f1_score:\n        max_f1_score = current_f1_score\n        best_alpha = alpha\n        \nprint('Best f1-score: {0}'.format(max_f1_score))","c9cb1130":"print('Best alpha: {0}'.format(best_alpha))","cc484af1":"clf = MLPClassifier(solver = 'lbfgs', alpha=0.4)\nclf.fit(train_x, test_x)\ny_pred = clf.predict(train_y)\nprint(confusion_matrix(y_pred, test_y))","91160f0d":"import seaborn as sns","a7b40770":"sns.regplot(x=test_y,y=y_pred,marker=\"*\")","0b57d030":"# Final","aa3efd2b":"Source:\n\nhttps:\/\/docs.python.org\/3\/library\/codecs.html#standard-encodings\n\nhttps:\/\/www.kaggle.com\/devghiles\/step-by-step-solution-with-f1-score-as-a-metric\n\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_csv.html\n\nTo rename the columns:\nhttps:\/\/stackoverflow.com\/questions\/11346283\/renaming-columns-in-pandas\n\nTo change cols:\nhttps:\/\/stackoverflow.com\/questions\/12329853\/how-to-rearrange-pandas-column-sequence\/23741704\n\nhttps:\/\/rajacsp.github.io\/mlnotes\/python\/data-wrangling\/advanced-custom-lambda\/\n"}}