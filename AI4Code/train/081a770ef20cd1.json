{"cell_type":{"3efbacfd":"code","800a3ccc":"code","e017f5da":"code","541d6ac2":"code","44f6b2b9":"code","d1d4254a":"code","9a5aa353":"code","b9a27508":"code","69374666":"code","ae93c4aa":"code","445d40fb":"code","d065f2bc":"code","421efc11":"code","92a880e1":"code","1cc574eb":"code","0fb46347":"code","bc7d4ad1":"code","189a6eb5":"code","d26318d5":"code","14069b37":"code","af632ceb":"code","7afe1f42":"code","c13648b1":"code","782573b9":"code","144ace18":"code","5e6c25af":"code","30a59693":"code","58bce732":"code","c1e83a42":"code","9bd3bb89":"code","e0e0c48e":"code","b33c3f18":"code","6fd4411c":"code","02684c7e":"code","4fb1207c":"code","7ca654d5":"code","c8634a23":"code","f812b826":"code","5841e1fb":"code","74276d30":"code","8b4ff441":"code","ce780c44":"markdown","372d5339":"markdown","99ef3abb":"markdown","eeeb65fa":"markdown","4f97fa85":"markdown","53f1c202":"markdown","f1252a3a":"markdown","ec3ea538":"markdown","7e995d48":"markdown","5a8a1632":"markdown","dd3dfd6b":"markdown","6648c8bb":"markdown","ca0586ea":"markdown","ae366eeb":"markdown","c7279886":"markdown","145d77cf":"markdown","670f9a93":"markdown","9d76494f":"markdown","5911679c":"markdown","e3feeda6":"markdown","15b2da3a":"markdown","0e42963f":"markdown","c1cadd5a":"markdown","dc536645":"markdown","23876ef7":"markdown","770aef15":"markdown","05092951":"markdown","c7088a22":"markdown","ed0bae70":"markdown","171f49ef":"markdown","0f6de635":"markdown","964067c3":"markdown","dbe9fd20":"markdown","1898cf26":"markdown","f0027a38":"markdown","9b4ac5f3":"markdown","5b179f04":"markdown","57ac24aa":"markdown","91a030ed":"markdown","920b1dc2":"markdown","e9f1fbe5":"markdown","49388050":"markdown","90fde116":"markdown","31163fa8":"markdown","115b7719":"markdown"},"source":{"3efbacfd":"!pip install pycaret --user","800a3ccc":"# EDA\n#-------------------\nimport numpy as np\nimport pandas as pd\n\n\n# visualization\n#-------------------\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.offline as pyo\nfrom plotly.subplots import make_subplots\npyo.init_notebook_mode()\n\n\n# working with date\n#-------------------\nfrom datetime import date , datetime , timedelta\n\n\n# Machine Learning models\n#-------------------\nimport pycaret.regression as caret\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","e017f5da":"data_detailed = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\ndata_total = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations_by_manufacturer.csv')","541d6ac2":"print(\"* \"*10+\" data_detailed \"+\" *\"*10)\nprint(\"\\nShape: rows = {} , columns = {}\".format(data_detailed.shape[0] , data_detailed.shape[1]))\nprint(data_detailed.info())\nprint(\"* \"*10+\" data_total \"+\" *\"*10)\nprint(\"\\nShape: rows = {} , columns = {}\".format(data_total.shape[0] , data_total.shape[1]))\nprint(data_total.info())","44f6b2b9":"data_detailed.date.max() , data_total.date.max()","d1d4254a":"data_detailed.tail(3)","9a5aa353":"data_total.tail(3)","b9a27508":"countries = data_detailed.country.unique()\n\nfor country in countries:\n    print(country,end = \":\\n\")\n    print(data_detailed[data_detailed.country == country]['vaccines'].unique()[0] , end = \"\\n\"+\"_\"*20+\"\\n\\n\")","69374666":"# find the last date\nlast_date = data_detailed.sort_values(by = 'date' , ascending=False)['date'].iloc[0]\n# its ''2021-10-22'","ae93c4aa":"data_detailed[(data_detailed.date == last_date)&(data_detailed.people_fully_vaccinated_per_hundred.isnull())]","445d40fb":"data_detailed[(data_detailed.date == last_date)&(data_detailed.country == 'Germany')]","d065f2bc":"dict_vac_percentages = {}\niso_list = data_detailed.iso_code.unique()\nfor iso_code in iso_list:\n    dict_vac_percentages[iso_code]=data_detailed[data_detailed.iso_code==iso_code]['people_fully_vaccinated_per_hundred'].max()\n\ndf_vac_percentages = pd.DataFrame()\ndf_vac_percentages['iso_code'] = dict_vac_percentages.keys()\ndf_vac_percentages['fully vaccinated percentage'] = dict_vac_percentages.values()\ndf_vac_percentages['country'] = countries","421efc11":"dict_total_vac = {}\nfor iso_code in iso_list:\n    dict_total_vac[iso_code]=data_detailed[data_detailed.iso_code==iso_code]['total_vaccinations'].max()\n\ndf_total_vac = pd.DataFrame()\ndf_total_vac['iso_code'] = dict_total_vac.keys()\ndf_total_vac['total vaccinations'] = dict_total_vac.values()\ndf_total_vac['country'] = countries","92a880e1":"map_total_vac = px.choropleth(data_frame = df_total_vac , locations=\"iso_code\" , color=\"total vaccinations\" \n                             , hover_name=\"country\" , color_continuous_scale=px.colors.sequential.deep)\nmap_total_vac.update_layout(title_text='Total vaccinations in each country'\n                                  , title_font={'family':'serif','size':26} , title = {'y':0.94 , 'x':0.45})\nmap_total_vac.show()","1cc574eb":"map_full_percentage = px.choropleth(df_vac_percentages, locations=\"iso_code\" , color=\"fully vaccinated percentage\"\n                                    , hover_name=\"country\" , color_continuous_scale=px.colors.sequential.YlGn)\n\nmap_full_percentage.show()","0fb46347":"plot_font = {'family':'serif' , 'size':26}\nbar_full_percentage  = px.bar(data_frame = df_vac_percentages.sort_values(by='fully vaccinated percentage',ascending = False)\n       , x = 'country', y = 'fully vaccinated percentage')\n\nbar_full_percentage.update_layout(title_text='Countries percentage of fully vaccinated people'\n                                  ,title_font={'family':'serif','size':26} , title = {'x':0.5 , 'y':0.95})\n\nbar_full_percentage.show()","bc7d4ad1":"euro_vaccines = data_total[(data_total.location == 'European Union') &\n                         (data_total.date == last_date)][['vaccine','total_vaccinations']]\neuro_vaccines.sort_values(by = 'total_vaccinations' , ascending = False , inplace = True)","189a6eb5":"euro_vaccines","d26318d5":"pie_euro_vac = go.Figure(data = go.Pie(values = euro_vaccines.total_vaccinations, \n                          labels = euro_vaccines.vaccine, hole = 0.55))\npie_euro_vac.update_traces(textposition='outside', textinfo='percent+label')\npie_euro_vac.update_layout(annotations=[dict(text='Vaccines used by', x=0.5, y=0.55, font_size=16, showarrow=False),\n                                       dict(text='European Union', x=0.5, y=0.45, font_size=16, showarrow=False)])\npie_euro_vac.show()","14069b37":"usa_vaccines = data_total[(data_total.location == 'United States') &\n                         (data_total.date == last_date)][['vaccine','total_vaccinations']]\nusa_vaccines.sort_values(by = 'total_vaccinations' , ascending = False , inplace = True)","af632ceb":"usa_vaccines","7afe1f42":"pie_usa_vac = go.Figure(data = go.Pie(values = usa_vaccines.total_vaccinations, \n                          labels = usa_vaccines.vaccine, hole = 0.55))\npie_usa_vac.update_traces(textposition='outside', textinfo='percent+label')\npie_usa_vac.update_layout(annotations=[dict(text='Vaccines used by', x=0.5, y=0.55, font_size=16, showarrow=False),\n                                       dict(text='United States', x=0.5, y=0.45, font_size=16, showarrow=False)])\npie_usa_vac.show()","c13648b1":"data_detailed[data_detailed.country == 'Germany']['date'].max() , data_total[data_total.location == 'Germany']['date'].max()","782573b9":"germany_vaccines=data_total[(data_total.location=='Germany')&(data_total.date=='2021-10-21')][['vaccine','total_vaccinations']]\ngermany_vaccines.sort_values(by = 'total_vaccinations' , ascending = False , inplace = True)\ndf_germany_info = data_detailed[data_detailed.country == 'Germany']","144ace18":"fig_germany = make_subplots(rows = 4 , cols = 2\n    , specs=[[{\"type\": \"pie\",\"rowspan\": 2}, {\"type\": \"scatter\",\"rowspan\": 2}]\n           ,[None , None]\n           ,[{\"type\": \"scatter\",\"colspan\": 2,\"rowspan\": 2}, None]\n           ,[None , None]]\n                            \n    , subplot_titles=[\n        '', \n        'temp',\n        'temp' # i will change the titles a few lines later ...\n    ])\n\nfig_germany.add_trace(go.Pie(labels = germany_vaccines.vaccine , values = germany_vaccines.total_vaccinations\n                                   , hole = 0.5 , pull = [0,0.1,0.1,0.1] , title = \"Vaccines\" , titleposition='middle center'\n                                   , titlefont = {'family':'serif' , 'size':18}\n                                   , textinfo = 'percent+label' , textposition = 'inside')\n                     , row = 1 , col = 1)\n\nfig_germany.add_trace(go.Scatter(x = df_germany_info['date']\n                                , y = df_germany_info['daily_vaccinations']\n                                , name = \"Daily vaccinations\")\n                     , row = 1 , col = 2)\n\nfig_germany.add_trace(go.Scatter(x = df_germany_info['date']\n                                , y = df_germany_info['people_fully_vaccinated_per_hundred']\n                                , name = \"Fully vaccinated people percentage\"\n                                 # <br> for the next line in hover\n                                , hovertemplate = \"<b>%{x}<\/b><br>\" +\"Fully vaccinated people = %{y:.2f} %\" +\"<extra><\/extra>\")\n                     , row = 3 , col = 1)\n\n\nfig_germany.layout.annotations[0].update(text=\"Number of daily vaccinations\" , x=0.75\n                                         , font = {'family':'serif','size':20})\n\nfig_germany.layout.annotations[1].update(text=\"Fully vaccinated people percentage\" , x=0.25 \n                                         , font = {'family':'serif','size':20})\n\nfig_germany.update_yaxes(range=[0, 100], row=3, col=1)\nfig_germany.update_layout(width = 950,height=600, showlegend=True)\nfig_germany.update_layout(title_text='Germany abstract informations'\n                                  ,title_font={'family':'serif','size':26} , title = {'x':0.25 , 'y':0.95})\nfig_germany.update_layout(template = 'plotly_dark')\nfig_germany.show()","5e6c25af":"data = pd.DataFrame()\ndata['Date'] = pd.to_datetime(df_germany_info['date'])\ndata['Target'] = df_germany_info['people_fully_vaccinated_per_hundred']\ndata.reset_index(drop = True , inplace = True)","30a59693":"data.Date.min() , data.Date.max() , len(data)","58bce732":"d0 = date(2020 , 12 , 27)\nd1 = date(2021 , 10 , 21)\ndelta = d1 - d0\n\ndays = delta.days + 1\nprint(days)","c1e83a42":"data.isnull().sum()","9bd3bb89":"data['Series'] = np.arange(1 , len(data)+1)\n\n# Shift1 is the previous value(Target) for each row :\ndata['Shift1'] = data.Target.shift(1)\n\n# mean of the Target during 10 previous days :\nwindow_len = 10\nwindow = data['Shift1'].rolling(window = window_len)\nmeans = window.mean()\ndata['Window_mean'] = means\n\n\n# This approach will make some Missing values (for example we dont have the previous value for the first row)\ndata.dropna(inplace = True)\ndata.reset_index(drop = True , inplace=True)\n\ndates = data['Date'] # we will need this\n\ndata = data[['Series' , 'Window_mean' , 'Shift1' , 'Target']]\n\ndata","e0e0c48e":"# 80% for train & 20% for test\ntrain = data.iloc[:230,:] \ntest = data.iloc[230:,:]\n\ntrain.shape , test.shape","b33c3f18":"setup = caret.setup(data = train , test_data = test , target = 'Target' , fold_strategy = 'timeseries'\n                 , remove_perfect_collinearity = False , numeric_features = ['Series' , 'Window_mean' , 'Shift1'] \n                     , fold = 5 , session_id = 51)","6fd4411c":"best = caret.compare_models(sort = 'MAE' , turbo = False)","02684c7e":"best = caret.tune_model(best)","4fb1207c":"_ = caret.predict_model(best)","7ca654d5":"# generate predictions on the original dataset\npredictions = caret.predict_model(best , data=data)\n\n# add a date column in the dataset\npredictions['Date'] = dates\n\n# line plot\nfig = px.line(predictions.rename(columns = {'Target':'Actual' , 'Label':'Predicted'}), x='Date', y=[\"Actual\", \"Predicted\"]\n              , template = 'plotly_dark')\nfig.update_layout(annotations=[dict(text='Test set', x='2021-9-25', y=30, font_size=20, showarrow=False)])\n# add a vertical rectangle for test-set separation\n\nfig.add_vrect(x0 = dates.iloc[230], x1 = dates.iloc[-1], fillcolor=\"grey\", opacity=0.25, line_width=1)\nfig.show()","c8634a23":"future = pd.DataFrame(columns = ['Series' , 'Window_mean' , 'Shift1'])\nfuture['Series'] = np.arange(300,450) # for the next 150 time steps\nfuture['Window_mean'] = np.nan\nfuture['Shift1'] = np.nan\n\n# initialize the first row :\n#------------------------------\nfuture.iloc[0,2] = data['Target'].max()\nsum = 0\nfor i in range(window_len):\n    sum += data.iloc[len(data)-1-i,3]\n    \nfuture.iloc[0,1] = sum\/window_len\nfuture","f812b826":"for j in range(len(future)):\n    current_row = j\n    next_row = j+1\n    \n    # for the next_row we are going to fill :\n    # 1. Shift1 --> use currnet_row predicted value\n    # 2. Window_mean\n    \n    if current_row != len(future)-1 :\n        # fill Shift1 for the next_row\n        future.iloc[next_row,2] = caret.predict_model(best , future.iloc[[current_row]])['Label']\n#         print(future.iloc[next_row,2]-future.iloc[current_row,2])\n        \n        \n        # fill the Window_mean for the next_row\n        if next_row < 9 :\n            sum = 0\n            num_rows_from_data = window_len - (next_row + 1)\n            num_rows_from_future = window_len - num_rows_from_data\n\n            for i in range(num_rows_from_data):\n                sum += data.iloc[len(data)-1-i , 2]\n\n\n            for i in range(num_rows_from_future):\n                sum += future.iloc[next_row - i , 2]\n\n            future.iloc[next_row , 1] = sum\/window_len\n\n\n        elif next_row >= 9:\n            sum = 0\n            for i in range(window_len):\n                sum += future.iloc[next_row-i,2]\n            future.iloc[next_row,1] = sum\/window_len\n","5841e1fb":"future","74276d30":"future['Predicted'] = future['Shift1'].shift(-1)\n\nstart = datetime.strptime(\"2021-10-22\", \"%Y-%m-%d\")\ndate_generated = [start + timedelta(days=x) for x in range(0, 150)]\ndate_list = []\nfor date in date_generated:\n    date_list.append(date.strftime(\"%Y-%m-%d\"))\n    \nfuture['Date'] = date_list\n\nfuture = future[['Date' , 'Predicted']]\nfuture.dropna(inplace = True)\nfuture","8b4ff441":"fig = go.Figure(data=go.Scatter(x=df_germany_info['date'], y = df_germany_info['people_fully_vaccinated_per_hundred']\n                                ,mode='lines', line_color='red' , name = 'Until now'))\nfig.add_trace(go.Scatter(x=future['Date'], y=future['Predicted'],mode='lines', line=dict(color=\"#0000ff\"), name = 'Future'))\n\nfig.update_layout(template = 'plotly_dark')\n\nfig.show()","ce780c44":"- <h2 style = \"color:#009b96\">Same as the last part, 'total_vaccinations' feature has an increasing behaviour so i will use the maximum of this feature for each country, because this refers to the last update.<\/h2>","372d5339":"<h2><a href=\"https:\/\/machinelearningmastery.com\/basic-feature-engineering-time-series-data-python\/\">[1] Basic feature engineering for time series data with python<\/a><\/h2>\n\n<h2><a href=\"https:\/\/towardsdatascience.com\/time-series-forecasting-with-pycaret-regression-module-237b703a0c63\">[2] Time series with PyCaret<\/a><h2>","99ef3abb":"<a id = \"5\"><\/a>\n## 5. Strorytelling - Visualization","eeeb65fa":"<a id = \"3\"><\/a>\n## 3. EDA","4f97fa85":"- <h2>As we used lag and window features, forecasting the future is a little harder.<\/h2>\n- <h2>For example we dont have the previous value for 2022-1-2 since we dont know the target value at 2022-1-1<\/h2>\n- <h2>So we will start from the first future time step and both we make predictions and also fill the lag features for next time steps. (maybe something like recursive functions)<\/h2>","53f1c202":"<a id = \"5_3\"><\/a>\n- <h2 style=\"color:#005b96\">5-3. Bar chart : Fully vaccinated people percentage<\/h2>","f1252a3a":"<h1 style= \"color:tomato\">Note :<\/h1>\n\n- <h2>Time series datasets are sequential datasets.<\/h2>\n- <h2>We shouldn't perform random splitting on time series dataset, because we should respect the order of samples.<\/h2>","ec3ea538":"- <h2 style = \"color:#009b96\">There isn't any missing date.<\/h2>","7e995d48":"- <h2 style = \"color:#009b96\">In this part we extract some useful features, and make some extra data frames.<\/h2>\n- <h2 style = \"color:#009b96\">The main goal of this part is to make the visualization part easier.<\/h2>\n- <h2 style = \"color:#009b96\"><u>The preprocess for machine learning will be done in part 6.<\/u><\/h2>","5a8a1632":"<h2 style = \"color:#009b96\">From time series dataset we can extract the following features :<\/h2>\n\n<h3>1. Date Time Features: these are components of the time step itself for each observation.<\/h3>\n\n- - <h3>'Series' refers to each time step(you will see that in the next cell)<\/h3>\n- - <h3>'Target' refers to the target value at the current time step.<\/h3>\n\n<h3>2. Lag Features: these are values at prior time steps.<\/h3>\n\n- - <h3>'Shift1' refers to the target value at the previous time step.<\/h3>\n\n<h3>3. Window Features: these are a summary of values over a fixed window of prior time steps.<\/h3>\n\n- - <h3>Here i assumed that each window has 10 samples in it.<\/h3>\n- - <h3>'Window_mean' is the average of the target during 10 previous days.<\/h3>\n\n<h3>For more information check reference[1]<\/h3>","dd3dfd6b":"<a id = \"5_2\"><\/a>\n- <h2 style=\"color:#005b96\">5-2. Map : Fully vaccinated people percentage<\/h2>","6648c8bb":"<a id = \"4\"><\/a>\n## 4. Data Preprocessing (for the visualization part)","ca0586ea":"<a id = \"7\"><\/a>\n## 7. Train the model","ae366eeb":"<h1>Data<\/h1>\n\n- <h2><a href=\"https:\/\/www.kaggle.com\/gpreda\/covid-world-vaccination-progress\">Source<\/a><\/h2>\n- <h2 style=\"color:#005b96\">Data collected by <a href=\"https:\/\/www.kaggle.com\/gpreda\">Gabriel Preda<\/a><\/h2>\n- <h2 style=\"color:#005b96\">V.212<\/h2>\n- <h2 style=\"color:#005b96\">Until 22th October 2021<\/h2>","c7279886":"<a id = \"5_6\"><\/a>\n<h1 style=\"color:#005b96\">5-6. Let's focus on Geramny<\/h1>\n\n<h2>In version 212, the last update for Germany is 21th October 2021<\/h2>","145d77cf":"<a id = \"5_5\"><\/a>\n<h2 style=\"color:#005b96\">5-5 Pie chart : Vaccine usage in United states<\/h2>","670f9a93":"<a id = \"6_2\"><\/a>\n<h1 style=\"color:#005b96\">6-2. Check the time step<\/h1>","9d76494f":"<a id = \"1\"><\/a>\n## 1. Importing the libraries","5911679c":"<h1 style=\"color:#88bddb\">What will i do in this notebook?<\/h1>\n\n- 1.<a href=\"#1\">Importing the libraries<\/a>\n\n\n- 2.<a href=\"#2\">Load the data<\/a>\n\n\n- 3.<a href=\"#3\">EDA :<\/a>\n- - 3-1.<a href=\"#3_1\">Abstract information about datasets<\/a>\n- - 3-2.<a href=\"#3_2\">Which country is using what vaccine ?<\/a>\n\n\n- 4.<a href=\"#4\">Data Preprocessing (for the visualization part) :<\/a>\n- - 4-1.<a href=\"#4_1\">Extract percentage of fully vaccinated people for each country until 22th October 2021<\/a>\n- - 4-2.<a href=\"#4_2\">Extract total vaccinations for each country until 22th October 2021<\/a>\n\n\n- 5.<a href=\"#5\">Visualization :<\/a>\n- - 5-1.<a href=\"#5_1\">Map : Total vaccinations<\/a>\n- - 5-2.<a href=\"#5_2\">Map : Fully vaccinated people percentage<\/a>\n- - 5-3.<a href=\"#5_3\">Bar chart : Fully vaccinated people percentage<\/a>\n- - 5-4.<a href=\"#5_4\">Pie chart : Vaccine usage in Eropean Union<\/a>\n- - 5-5.<a href=\"#5_5\">Pie chart : Vaccine usage in United states<\/a>\n- - 5-6.<a href=\"#5_6\">Germany abstract plot<\/a>\n\n\n- 6.<a href=\"#6\">Prepare Data for Machine learning :<\/a>\n- - 6-1.<a href=\"#6_1\">Prepare data for predicting percentage of fully vaccinated people in Geramny<\/a>\n- - 6-2.<a href=\"#6_2\">Check the time step<\/a>\n- - 6-3.<a href=\"#6_3\">Check for null values<\/a>\n- - 6-4.<a href=\"#6_4\">Feature engineering<\/a>\n- - 6-5.<a href=\"#6_5\">Train-Test split<\/a>\n\n\n\n- 7.<a href=\"#7\">Train the model :<\/a>\n- - 7-1.<a href=\"#7_1\">Pycaret setup<\/a>\n- - 7-2.<a href=\"#7_2\">Compare models<\/a>\n- - 7-3.<a href=\"#7_3\">Tune the hyper parameters<\/a>\n- - 7-4.<a href=\"#7_4\">Model performance on the test data<\/a>\n- - 7-5.<a href=\"#7_5\">Future forecasting<\/a>\n\n\n- 8.<a href=\"#8\">References<\/a>","e3feeda6":"- <h2 style = \"color:#009b96\">For the ML part i will use <u>PyCaret<\/u> in this notebook<\/h2>\n- <h2>PyCaret is an open source, low-code machine learning library in Python<\/h2>\n- <h2>There is also a tutorial about time series with PyCaret by <u>Moez Ali<\/u> (founder & author of PyCaret) <\/h2>\n- <h2>For more information check reference[2]<\/h2>","15b2da3a":"<a id = \"5_4\"><\/a>\n<h2 style=\"color:#005b96\">5-4 Pie chart : Vaccine usage in Eropean Union<\/h2>","0e42963f":"<a id = \"6_5\"><\/a>\n<h1 style=\"color:#005b96\">6-5. Train-Test split<\/h1>","c1cadd5a":"<a id = \"3_1\"><\/a>\n<h2 style=\"color:#005b96\">3-1. Abstract information about datasets<\/h2>","dc536645":"<a id = \"7_4\"><\/a>\n<h1 style=\"color:#005b96\">7-4. Model performance on the test data<\/h1>","23876ef7":"<a id = \"7_2\"><\/a>\n<h1 style=\"color:#005b96\">7-2. Compare models(based on 5-fold cross validation)<\/h1>","770aef15":"- <h2 style=\"color:#005b96\">The content is same as the above map.<\/h2>\n- <h2 style=\"color:#005b96\">Just for a better comparison they are plotted with bar chart.<\/h2>","05092951":"<a id = \"7_3\"><\/a>\n<h1 style=\"color:#005b96\">7-3. Tune the hyper parameters<\/h1>\n\n- <h3 style = \"color:#009b96\">As you see the evaluation scores are really good, here we do tuning for a <u>more regularized model<\/u><\/h3>\n","c7088a22":"- <h3>As you see in the above cell, in each row of the future data frame we have the previous value in 'Shift1' column.<\/h3>\n- <h3>So with a reverse shift of this column, we have the current value for each row.<\/h3>","ed0bae70":"<a id = \"4_2\"><\/a>\n- <h2 style=\"color:#005b96\">4-2. Extract total vaccinations for each country until 22th October 2021<\/h2>","171f49ef":"<a id = \"5_1\"><\/a>\n- <h2 style=\"color:#005b96\">5-1. Map : Total vaccinations<\/h2>","0f6de635":"<h2 style = \"color:tomato\">We are going to predict when 100% of people in Germany get fully vaccinated.<\/h2>","964067c3":"<a id = \"7_1\"><\/a>\n<h1 style=\"color:#005b96\">7-1. Pycaret setup<\/h1>","dbe9fd20":"<h1 style=\"color:#005b96\">About <u>14th March 2022<\/u><br>100% of people in Germany will get fully vaccinated ?! Maybe<\/h1>","1898cf26":"- <h2 style = \"color:#009b96\">So There are some countries that have not updated their data until 22th October 2021.<\/h2>\n- <h2 style = \"color:#009b96\">And we know that 'people_fully_vaccinated_per_hundred' has an increasing behaviour.<\/h2>\n- <h2 style = \"color:#009b96\">So i will use the maximum of this feature for each country, because this refers to the last update.<\/h2>","f0027a38":"<a id = \"6\"><\/a>\n## 6. Prepare Data for Machine learning","9b4ac5f3":"<a id = \"2\"><\/a>\n## 2. Load and Prepare Data","5b179f04":"- <h2 style = \"color:#009b96\">As this is a time series problem, time step is important for us.<\/h2>\n- <h2 style = \"color:#009b96\">Let's check if a date is missing...<\/h2>","57ac24aa":"<a id = \"3_2\"><\/a>\n<h2 style=\"color:#005b96\">3-2. Which country is using what vaccine ?<\/h2>\n\n- <h2>Open the hidden output for full results<\/h2>","91a030ed":"<a id = \"6_1\"><\/a>\n<h2 style=\"color:#005b96\">6-1. Prepare data for predicting percentage of fully vaccinated people in Geramny<\/h2>","920b1dc2":"<a id = \"6_3\"><\/a>\n<h1 style=\"color:#005b96\">6-3. Check for null values<\/h1>","e9f1fbe5":"<h2 style = \"color:tomato\">Last date in datasets :<\/h2>","49388050":"<a id = \"6_4\"><\/a>\n<h1 style=\"color:#005b96\">6-4. Feature engineering<\/h1>","90fde116":"<a id = \"4_1\"><\/a>\n- <h2 style=\"color:#005b96\">4-1. Extract percentage of fully vaccinated people for each country until 22th October 2021<\/h2>","31163fa8":"<a id = \"8\"><\/a>\n<h1 style=\"color:tomato\">8. References<\/h1>","115b7719":"<a id = \"7_5\"><\/a>\n<h1 style=\"color:#005b96\">7-5. Future forecasting<\/h1>"}}