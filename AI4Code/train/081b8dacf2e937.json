{"cell_type":{"aa7786e9":"code","73fd8eda":"code","6266b77b":"code","ac48687e":"code","79c4e591":"code","b8616fe4":"code","dc56d0cc":"code","c9cf2887":"code","4e8d19b8":"code","1f5717d5":"code","6863d38e":"code","eab0a652":"code","af298816":"code","24c0ba63":"code","ae3dd00c":"code","ee103d5f":"code","f6ee0d84":"code","5288c86b":"code","e3014a13":"code","44f4431b":"code","f8106b78":"code","2d36c311":"code","9f9a80e0":"code","249dea49":"code","d15e7be8":"code","bdd04cb8":"code","4b7f0e61":"code","b7861587":"code","89a89935":"code","29972ca4":"code","71672792":"code","c381ed8e":"code","80834ea6":"code","41fec878":"code","b89d629e":"code","44cdf6db":"code","2e9ffd27":"code","053a0220":"code","d46d0054":"code","fc910262":"code","67e217df":"code","7f6f8b0e":"code","95c4166e":"code","2cb4c049":"code","43d2606d":"code","1adda7a6":"code","bac3719e":"markdown","cabbfb47":"markdown","e38d4165":"markdown","6a6e2dcf":"markdown","702e817f":"markdown","2dd934ad":"markdown","2417fbf7":"markdown","fbc26316":"markdown","e2fe7d45":"markdown","e368421c":"markdown","a1affbfa":"markdown","0efe8b3b":"markdown","76460d48":"markdown","b7587b9b":"markdown","b91b0246":"markdown","4a584784":"markdown"},"source":{"aa7786e9":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns ","73fd8eda":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","6266b77b":"train.head()","ac48687e":"train.info()","79c4e591":"train.describe()","b8616fe4":"train.dtypes","dc56d0cc":"train.isna().sum()","c9cf2887":"train.Age.fillna(train.Age.mean() , inplace=True)\ntest.Age.fillna(test.Age.mean() , inplace=True)","4e8d19b8":"train.drop(['PassengerId' ,'Name','Cabin'] ,axis=1,inplace=True)\ntest.drop(['PassengerId' ,'Name','Cabin'] ,axis=1,inplace=True)","1f5717d5":"train.head()","6863d38e":"train.Ticket.value_counts().sum()","eab0a652":"train.Embarked.value_counts()","af298816":"from sklearn.preprocessing import LabelEncoder\nlabelEncoder =LabelEncoder()\ntrain['Sex']=labelEncoder.fit_transform(train['Sex'])\n\n# in another way\ndef er(s):\n    if  s==\"S\":\n        return 0 \n    elif s==\"C\" :\n        return 2\n    else :\n        return 1\n\ntrain.Embarked =train.Embarked .apply(er)\n\ntest.Embarked =test.Embarked .apply(er)","24c0ba63":"train.head()","ae3dd00c":"train.drop(\"Ticket\" ,axis=1,inplace=True)\ntest.drop(\"Ticket\" ,axis=1,inplace=True)","ee103d5f":"train.head(1)","f6ee0d84":"train[\"Embarked\"].value_counts().plot.pie(figsize=(12,8),explode=(0.1,0.1,0.1),autopct=\"%1.1f%%\")\nplt.title(\"Embarked\",fontsize=15)\nplt.show()","5288c86b":"sns.histplot(train['Age'],bins=20 ,color='g')","e3014a13":"sns.boxplot(x=train.Survived , y=train.Fare ,hue=train.Embarked , palette=['b' , 'g' ,'y'] )","44f4431b":"sns.set_theme(style=\"white\", context=\"talk\")\nsns.countplot(train.Survived)\n","f8106b78":"sns.countplot(train.Survived , hue=train.Sex)","2d36c311":"plt.figure(figsize=(10, 7))\nsns.boxplot(x='Pclass',y='Age',data=train)","9f9a80e0":"plt.figure(figsize=(13, 8))\nsns.heatmap(train.corr() , annot=True)","249dea49":"x=train.drop('Survived' ,axis=1)\ny=train['Survived']","d15e7be8":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.3, random_state=50)","bdd04cb8":"from sklearn.preprocessing import MinMaxScaler\nscale = MinMaxScaler()\nx_test=scale.fit_transform(x_test)\nx_train=scale.fit_transform(x_train)","4b7f0e61":"from sklearn.ensemble import RandomForestClassifier\nrandom_forest =RandomForestClassifier( max_depth=5)\nrandom_forest.fit(x_train,y_train)\n","b7861587":"print('RandomForestClassifierModel Train Score is : ' , random_forest.score(x_train,y_train))\nprint('RandomForestClassifierModel Test Score is : ' , random_forest.score(x_test, y_test))\nprint('RandomForestClassifierModel features importances are : ' , random_forest.feature_importances_)","89a89935":"y_pre_random = random_forest.predict(x_test)","29972ca4":"from sklearn.metrics import classification_report ,confusion_matrix","71672792":"print(classification_report(y_test,y_pre_random))","c381ed8e":"confusion_matrix(y_test, y_pre_random)","80834ea6":"\nsns.heatmap(confusion_matrix(y_test, y_pre_random),annot=True)","41fec878":"from sklearn.metrics import f1_score","b89d629e":"F1Score = f1_score(y_test, y_pre_random, average='micro')\nprint(F1Score)","44cdf6db":"from sklearn import svm \nsvc=svm.SVC()\n\nsvc.fit(x_train, y_train)","2e9ffd27":"print('SUPORT VECTOR MACHINE Train Score is : ' , svc.score(x_train,y_train))\nprint('SUPORT VECTOR MACHINE Test Score is : ' , svc.score(x_test, y_test))","053a0220":"y_pred_svc = svc.predict(x_test)","d46d0054":"print(classification_report(y_test,y_pred_svc))","fc910262":"from sklearn.linear_model import SGDClassifier\n\n#penalty='l2',loss='squared_loss',learning_rate='optimal',random_state=33\nSGD = SGDClassifier()\nSGD.fit(x_train, y_train)\n","67e217df":"y_pre_SGD =SGD.predict(x_test)","7f6f8b0e":"print(classification_report(y_test,y_pre_SGD))","95c4166e":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = {\n    'bootstrap': [True],\n    'max_depth': [80, 90, 100, 110],\n    'max_features': [2, 3],\n    'min_samples_leaf': [3, 4, 5],\n    'min_samples_split': [8, 10, 12],\n    'n_estimators': [100, 200, 300, 1000]\n}\n\nrand_f = RandomForestClassifier()\n\ngrid_search = GridSearchCV(estimator = rand_f, param_grid = param_grid, \n                          cv = 3, verbose = 2)","2cb4c049":"grid_search.fit(x_train , y_train)","43d2606d":"y_pre_grid =grid_search.predict(x_test)","1adda7a6":"print(classification_report(y_test,y_pre_grid))","bac3719e":"\n## Titanic \n","cabbfb47":"### Discover and Prepare the data \n","e38d4165":"# Model Building","6a6e2dcf":"# models","702e817f":"# SUPORT VECTOR MACHINE","2dd934ad":"# Fine-Tune  Model","2417fbf7":"### predict","fbc26316":"## Encode","e2fe7d45":"### Train Test Split","e368421c":"### Visualize the Data","a1affbfa":"## Scaler","0efe8b3b":"# Thank you","76460d48":"# SGD Classifier","b7587b9b":"### 1- Get the Data","b91b0246":"### Evaluation","4a584784":"# Random Forest"}}