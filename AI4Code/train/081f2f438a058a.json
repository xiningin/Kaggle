{"cell_type":{"372a3a1e":"code","0a53350a":"code","694a0b60":"code","136f9208":"code","3a821d25":"code","5d3e4a88":"code","15ea6ee4":"code","d3e24e06":"code","ec072bc0":"code","b23c3706":"markdown","89d3e2d3":"markdown","3177b904":"markdown","e3ae3efc":"markdown","793e0c87":"markdown","343dcf53":"markdown","58e69b4c":"markdown","91b804e8":"markdown","7072a495":"markdown","28b86b17":"markdown","3694a6f6":"markdown"},"source":{"372a3a1e":"import numpy as np\nimport pandas as pd\ndf = pd.read_csv('..\/input\/titanic-data\/titanic.csv')\ndf","0a53350a":"from sklearn.preprocessing import LabelEncoder\nlb = LabelEncoder()\ndf.Sex = lb.fit_transform(df.Sex)\ndf","694a0b60":"df.describe()","136f9208":"df.Age = df.Age.fillna(df.Age.mean())\ndf","3a821d25":"x = df[['Pclass', 'Sex', 'Age', 'SibSp']]\ny = df['Survived']\nprint(x, y)","5d3e4a88":"from sklearn.svm import SVC\nmodel = SVC(kernel=\"linear\")\nmodel.fit(x, y)","15ea6ee4":"model.predict(x)","d3e24e06":"model.score(x, y)","ec072bc0":"x_0 = df[df['Survived']==0]['Age']\ny_0 = df[df['Survived']==0]['Survived']\nx_1 = df[df['Survived']==1]['Age']\ny_1 = df[df['Survived']==1]['Survived']\n\nimport matplotlib.pyplot as plt\nplt.scatter(x_0, y_0)\nplt.scatter(x_1, y_1)\nplt.xlabel('Age')\nplt.ylabel('Survived')\nplt.show()","b23c3706":"<span style=\"color:red;\">Data Preprocessing : <\/span> I am going to use Sex attribute also, which is non-numeric. So I have to convert that attribute in the numeric data. For that I will use LabelEncoder method from sklearn library. We have seen all methods of data preprocessing in [this](https:\/\/www.kaggle.com\/omkarsantoshraut\/data-pre-processing) notebook. You can check it out.","89d3e2d3":"Let's predict the output, whether he\/she survived or not? For that I will use predict() method of the SVC object.","3177b904":"<span style=\"color:red;\">Plot a data: <\/span> I will use matplotlib library to plot a scatter of Age and Survuved. The code for that is as follows. First, I will store the Age and survived data in two parts, one for Survived = 0, and another for Survived = 1.","e3ae3efc":"<span style = \"color:red;\">Introduction to SVM : <\/span> Support Vector Machine is the most effective classifier among the other techniques that we have seen previously. It has a proper way to prevent the overfitting. SVM algorithm gives us a two classes with maximum margin. The following image shows the details of the SVM.\n<br>\n![](https:\/\/static.javatpoint.com\/tutorial\/machine-learning\/images\/support-vector-machine-algorithm.png)\n<br>\nOf course, we can read more about [Support Vector Machine.](https:\/\/en.wikipedia.org\/wiki\/Support_vector_machine)","793e0c87":"Here, I will store the input values in the variable x and output values in the variable y.","343dcf53":"<span style = \"color:red;\">Coding : <\/span> I will use Titanic dataset to build a classifier. Now, I will import some libraries of python and read a csv file of the Titanic dataset.","58e69b4c":"<span style=\"color:red\">Training a model : <\/span> It's time to train the model. I will use sklearn python library to build a model and fit() methos with input and output values for training of the data.","91b804e8":"<p style=\"color:purple; font-weight:bold; font-size:50px; text-align:center;\">Classification using Support Vector Machine<\/p>","7072a495":"I will use Pclass, Sex, Age, SibSp, Parch, Fare attributes for model building. In the above line, we can see that there is no null values in any attribute except Age. So, I will fill the null values of Age with mean value of the Age attribute.","28b86b17":"<span style=\"color:green; font-weight:bold\">Conclusion: <\/span> I have successfully build a model which can classify based on the Support Vector Machine.\n<br><br><br><br><br>\n<center>Thank you<\/center>","3694a6f6":"<span style=\"color:red;\">Score of model : <\/span> I will use score() method on the SVC object with input and output values to check the score of the model."}}