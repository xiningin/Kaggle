{"cell_type":{"31c75dba":"code","092e02fc":"code","1e215675":"code","eaa31a44":"code","4b9b37d6":"code","49956b44":"code","b933d885":"code","e2e24aa4":"code","666930c4":"code","bfb55593":"code","9c3d32ec":"code","9d6204aa":"markdown"},"source":{"31c75dba":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense,Conv2D,Flatten,MaxPool2D,Dropout,BatchNormalization\nfrom keras.optimizers import Adam\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.utils import np_utils","092e02fc":"# data attribute\nROOT_PATH = '..\/input\/Kannada-MNIST\/'\nclass_num = 10\nwidth = 28\nheight = 28\ncolor_num = 1\ninput_shape = (width, height, color_num)","1e215675":"# load data\ntrain = pd.read_csv(ROOT_PATH+'train.csv').values\ndig = pd.read_csv(ROOT_PATH+'Dig-MNIST.csv').values\nX_test = pd.read_csv(ROOT_PATH+'test.csv').drop('id', axis=1).values","eaa31a44":"# reshape train data\ny = train[:, 0].astype('int32')\nX = train[:, 1:].astype('float32').reshape(-1, width, height, color_num)\n\n# train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.10, random_state=42)\n\n# reshape check data\ny_dig = dig[:, 0].astype('int32')\nX_dig = dig[:, 1:].astype('float32').reshape(-1,  width, height, color_num)\n\n# reshape test data\nX_test = X_test.astype('float32').reshape(-1,  width, height, color_num)","4b9b37d6":"# plot training images\nfig = plt.figure(figsize=(15, 15))\n\nfor i in range(class_num):\n    ax = fig.add_subplot(2, class_num, i+1, xticks=[], yticks=[])\n    ax.imshow(X_train[i].reshape(width, height), cmap='gray')\n    ax.set_title(str(y_train[i]))","49956b44":"# one-hot encode the labels\ny_train = np_utils.to_categorical(y_train, class_num)\ny_val = np_utils.to_categorical(y_val, class_num)\n\n# setting keras input data\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255.,\n                                   rotation_range = 10,\n                                   width_shift_range = 0.3,\n                                   height_shift_range = 0.3,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.3)\n\nvalid_datagen = ImageDataGenerator(rescale=1.\/255)","b933d885":"# define the model\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization(momentum=.15))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization(momentum=0.15))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization(momentum=.15))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(10, activation = \"softmax\"))","e2e24aa4":"# set parameter\nbatch_size = 1024\nepochs = 30\n\n# Set a learning rate annealer\nlr_reducer = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\n\n# model compile\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=Adam(lr=0.001,beta_1=0.9,beta_2=0.999),\n              metrics=['accuracy'])\n\n# model fitting\nhistory = model.fit_generator(  train_datagen.flow(X_train, y_train, batch_size=batch_size),\n                                steps_per_epoch=epochs,\n                                epochs=epochs,\n                                workers=4,\n                                callbacks=[lr_reducer],\n                                validation_data=valid_datagen.flow(X_val, y_val),\n                                validation_steps=epochs\/2,\n                                verbose=2)","666930c4":"# Check accuracy \npreds_dig = model.predict_classes(X_dig\/255, verbose=2)\n\nprint(metrics.accuracy_score(preds_dig, y_dig))","bfb55593":"# predict test data\ntestY = model.predict_classes(X_test, verbose=2)\n\n# output\nsub = pd.read_csv(ROOT_PATH+'sample_submission.csv')\nsub['label'] = testY\nsub.to_csv('submission.csv', index=False)","9c3d32ec":"# check submisson.csv\nsub.head()","9d6204aa":"## CNN implementation in Keras for beginners\n### KEI Takahashi\n \n *I tried eliminating waste code to implement CNN model in Keras.*\n \n *So beginners can easily and quickly write code.*\n \n *If you have questions, pls let me know.*"}}