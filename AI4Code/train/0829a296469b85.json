{"cell_type":{"c7ad53b4":"code","19a5577f":"code","42bd04bc":"code","7873076f":"code","aa8e994c":"code","4a54364e":"code","e17bf9e0":"code","7c350e89":"code","c6720d5f":"code","602013ed":"code","ceb0000a":"code","9358a148":"code","783b68e1":"code","0223604a":"code","d76ed90f":"code","d572b84a":"code","316cc007":"code","72d1d995":"code","4b0bf40d":"code","cde2eda2":"code","051ca905":"code","17eb7a2a":"code","e43cdf2f":"code","f3b2b9d6":"code","22b0ee6f":"code","b749cde4":"code","ad6ae057":"code","fbec33aa":"code","03c206c8":"code","9a715d5e":"code","36896af1":"code","75aec68d":"code","22c75e76":"code","08127df5":"code","787a99da":"code","c2289f1d":"code","4fcddd4f":"code","15e3291f":"code","d395a9e4":"code","e78b0df6":"code","84e5ac4c":"code","d870a337":"code","4b1bd371":"code","52d496cb":"code","d44218d3":"code","e2279351":"code","2a7ba116":"code","1611a86f":"code","8eb4f62b":"code","211fc02c":"code","879fea43":"code","3b5d0d94":"code","36742a18":"code","7a03d44b":"code","83b9626a":"code","8fa931a3":"code","9e8d00e3":"code","70136e00":"code","6a02a52a":"code","95af31fe":"code","780c99c3":"code","4f50d9f7":"code","edcc66e9":"code","2564cae9":"code","49604cd0":"code","776dfe35":"code","a11aaa0b":"code","241b3992":"code","b37f9f17":"code","f553d985":"code","81f2b1b7":"code","96d706c5":"code","5e5aa286":"code","9ec4bf15":"code","d85813a3":"code","27ff2a6e":"code","85c1cecb":"code","2028d33b":"code","87e4bfd2":"code","7050b987":"code","98015c37":"code","1936652f":"code","87d6470e":"code","11797e1a":"code","c7ad3c21":"code","d1d29bbd":"markdown","a16e1e0d":"markdown","9acf7cdc":"markdown","a056d2b1":"markdown","7edfe188":"markdown","a081a87a":"markdown","23a1c717":"markdown","c8badea6":"markdown","f07322c7":"markdown","c877ebea":"markdown","b21f375b":"markdown","166b55a0":"markdown","961e4a1a":"markdown","9c99a4cb":"markdown","9cba9ac5":"markdown","8d2979fe":"markdown","d73850b2":"markdown","1292f53b":"markdown","81754866":"markdown","5cbb0374":"markdown","fbfcba01":"markdown","768a1caf":"markdown","c0d84632":"markdown","8760e09b":"markdown","df11841c":"markdown","5a0f60c4":"markdown","8a469aaf":"markdown","2aa44aaf":"markdown"},"source":{"c7ad53b4":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\n\nfrom collections import Counter\nfrom pandas_profiling import ProfileReport\nfrom sklearn.feature_selection import f_classif, mutual_info_classif, SelectKBest\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, RobustScaler\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn.pipeline import Pipeline\nfrom sklearn import decomposition\nfrom sklearn.compose import ColumnTransformer\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    #for filename in filenames:\n        #print(os.path.join(dirname, filename))\n","19a5577f":"RANDOM_SEED = 42","42bd04bc":"DATA_DIR = '\/kaggle\/input\/sf-dst-scoring\/'\ntrain = pd.read_csv(DATA_DIR+'\/train.csv')\ntest = pd.read_csv(DATA_DIR+'\/test.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","7873076f":"#train = pd.read_csv('train.csv')\n#test = pd.read_csv('test.csv')\n#sample_submission = pd.read_csv('sample_submission.csv')","aa8e994c":"train.head()","4a54364e":"test.head()","e17bf9e0":"train.shape, test.shape","7c350e89":"# \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ntrain['sample']  = 1   \ntest['sample']   = 0    \ntest['default'] = -1\ndata = pd.concat([train, test], ignore_index=True)","c6720d5f":"sns.countplot(x='default', data=train)","602013ed":"#\u0412 \u0412\u0438\u0434\u0443 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043a\u043b\u0430\u0441\u0441\u044b  \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f\n#weights \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 class_weight \u0438\u0437 LogisticRegression\ncount = data[data['default']!=-1]['default'].value_counts(normalize=False)\ncount\nn_samples= count[0] + count[1]\nweighting0 = n_samples \/ (2 * count[0])\nweighting1 = n_samples \/ (2 * count[1])\nweights = {0:weighting0, 1:weighting1}\nweights","ceb0000a":"def Split(data, shuffle=True):\n    '''\u0434\u0435\u043b\u0438\u0442 \u0447\u0430\u0441\u0442\u044c train \u0438\u0437 data \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n       \u0447\u0430\u0441\u0442\u044c test \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f'''\n    data_train = data[data['sample'] == 1].drop(['sample','client_id'], axis=1)\n    data_test = data[data['sample'] == 0].drop(['sample','client_id'], axis=1)\n    X = data_train.drop(['default'], axis=1)\n    y = data_train['default']\n    return train_test_split(X, y, test_size=0.20, random_state=74, shuffle=shuffle)","9358a148":"def SplitTrainTest(data):\n    ''' \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 data \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 train \u0438 test \u0438 \u0435\u0449\u0435 \u0434\u0435\u043b\u0438\u0442 \u0438\u0445 \u043d\u0430 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0442\u0430\u0440\u0433\u0435\u0442'''\n    data_train = data[data['sample'] == 1].drop(['sample'], axis=1)\n    data_test = data[data['sample'] == 0].drop(['sample'], axis=1)\n    X_train = data_train.drop(['default'], axis=1)\n    y_train = data_train['default']\n    X_test = data_test.drop(['default'], axis=1)\n    y_test = data_test['default']\n    return X_train, X_test, y_train, y_test","783b68e1":"def LogReg(X, y, weights=weights, max_iter=100, penalty='l2', C=1.0):\n    '''\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u0438 \u0434\u043e\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.\n     \u0411\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 class_weight=weights, confusion matrix \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e,\n     \u0445\u043e\u0442\u044f  logreg.score \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0445\u043e\u043f\u0440\u043e\u0448\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - 0,876, \n     \u043d\u043e \u043c\u044b \u0442\u043e \u0437\u043d\u0430\u0435\u043c, \u0447\u0442\u043e \u044d\u0442\u043e \u043e\u0442 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432'''\n    \n    logreg = LogisticRegression(solver='liblinear', class_weight=weights, penalty=penalty, C=C, max_iter=max_iter).fit(X, y) \n    print('Score: {:.3f}'.format(logreg.score(X, y)))                                      \n    return logreg","0223604a":"#  \u044d\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u043d\u0435 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u043e\u0441\u044c\ndata_agg = data.agg({'nunique', lambda s: s.unique()[:10]})\\\n    .append(pd.Series(data.isnull().sum(), name='null'))\\\n    .append(pd.Series(data.dtypes, name='dtype'))\\\n    .transpose()\n\ndata_agg","d76ed90f":"# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445\nnum_cols = ['app_date', 'age', 'decline_app_cnt', 'score_bki', 'bki_request_cnt', 'income']\nbin_cols = ['sex', 'car', 'car_type', 'good_work', 'foreign_passport']\ncat_cols = ['education', 'region_rating', 'home_address', 'work_address', 'sna', 'first_time']","d572b84a":"#\u0412 \u044d\u0442\u043e\u043c \u043f\u043e\u043b\u0435 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\ndata['education'].value_counts().plot.barh()","316cc007":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u043e\u043b\u0435 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ndata = data.fillna('SCH')","72d1d995":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 data['app_date'] \u0432 \u0447\u0438\u0441\u043b\u043e \u0434\u043d\u0435\u0439 \u0441\u043e \u0434\u043d\u044f \u0441\u0435\u0433\u043e\u0434\u043d\u044f\u0448\u043d\u0435\u0433\u043e \u043c\u0438\u043d\u0443\u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \ndata['app_date'] = data['app_date'].apply(lambda x: (pd.Timestamp.today() - pd.to_datetime(x)).days)\ndata['app_date'] = data['app_date'] - min(data['app_date'])","4b0bf40d":"le = LabelEncoder()\nfor col in bin_cols:\n    data[col] = le.fit_transform(data[col])","cde2eda2":"le = LabelEncoder()\nfor col in cat_cols:\n    data[col] = le.fit_transform(data[col])","051ca905":"data","17eb7a2a":"X_train, X_valid, y_train, y_valid = Split(data) #\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u043e\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438\nlogreg = LogReg(X_train, y_train)              #\u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nLogReg(X_valid, y_valid)                       #\u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\ny_pred = logreg.predict(X_valid)\n","e43cdf2f":"y_train.value_counts(normalize=True), y_valid.value_counts(normalize=True)","f3b2b9d6":"y_train.value_counts(normalize=False), y_valid.value_counts(normalize=False)","22b0ee6f":"print('accuracy_score:', round(accuracy_score(y_valid,y_pred), 3))\nprint('precision_score:', round(precision_score(y_valid,y_pred), 3))\nprint('recall_score:', round(recall_score(y_valid,y_pred), 3))\nprint('f1_score:', round(f1_score(y_valid,y_pred), 3))\ncm = confusion_matrix(y_valid, y_pred)\nprint('confusion_matrix:\\n', cm)","b749cde4":"# mean income by age\nmean_income = data.groupby('age')['income'].mean().to_dict()\ndata['mean_income_age'] = data['age'].map(mean_income)","ad6ae057":"# Max income by age\nmax_income = data.groupby('age')['income'].max().to_dict()\ndata['max_income_age'] = data['age'].map(max_income)","fbec33aa":"# and normalize it\ndata[\"normalized_income\"] = abs((data.income - data.mean_income_age)\/data.max_income_age)","03c206c8":"# requests to BKI by age\nmean_bki = data.groupby('age')['bki_request_cnt'].mean().to_dict()\ndata['mean_requests_age'] = data['age'].map(mean_bki)","9a715d5e":"# mean BKI requests by income\nmean_bki_inc = data.groupby('income')['bki_request_cnt'].mean().to_dict()\ndata['mean_requests_income'] = data['income'].map(mean_bki_inc)","36896af1":"# Mean income by region\nmean_income_rat = data.groupby('region_rating')['income'].mean().to_dict()\ndata['mean_income_region'] = data['region_rating'].map(mean_income_rat)","75aec68d":"data","22c75e76":"num_cols = ['age','decline_app_cnt','score_bki','income','bki_request_cnt','app_date', 'mean_income_age','region_rating','max_income_age', 'normalized_income',\n       'mean_requests_age', 'mean_requests_income', 'mean_income_region'] # numerical\ncat_cols = ['education','work_address','home_address','sna','first_time'] # categorical\nbin_cols = ['sex','car','car_type','good_work','foreign_passport'] # bina","08127df5":"X_train, X_valid, y_train, y_valid = Split(data)","787a99da":"imp_cat = pd.Series(mutual_info_classif(X_train[bin_cols + cat_cols], y_train,\n                                     discrete_features =True), index = bin_cols + cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","c2289f1d":"imp_num = pd.Series(f_classif(X_train[num_cols], y_train)[0], index = num_cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","4fcddd4f":"scaler = RobustScaler()\ndata[num_cols] = scaler.fit_transform(data[num_cols].values)","15e3291f":"X_train, X_valid, y_train, y_valid = Split(data) #\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u043e\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438\nlogreg = LogReg(X_train, y_train)              #\u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nLogReg(X_valid, y_valid)                       #\u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\ny_pred = logreg.predict(X_valid)\n","d395a9e4":"print('accuracy_score:', round(accuracy_score(y_valid,y_pred), 3))\nprint('precision_score:', round(precision_score(y_valid,y_pred), 3))\nprint('recall_score:', round(recall_score(y_valid,y_pred), 3))\nprint('f1_score:', round(f1_score(y_valid,y_pred), 3))\ncm = confusion_matrix(y_valid, y_pred)\nprint('confusion_matrix:\\n', cm)","e78b0df6":"\ndata_agg = data.agg({'nunique', lambda s: s.unique()[:10]})\\\n    .append(pd.Series(data.isnull().sum(), name='null'))\\\n    .append(pd.Series(data.dtypes, name='dtype'))\\\n    .transpose()\n\ndata_agg","84e5ac4c":"X_train, X_test, y_train, y_test = SplitTrainTest(data) #\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043d\u0430\u0448 data \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","d870a337":"from imblearn.over_sampling import SMOTE\nX_resampled, y_resampled = SMOTE().fit_resample(X_train, y_train) #\u0423\u0432\u0435\u043b\u0438\u0447\u0438\u043c \u043c\u0438\u043d\u043e\u0440\u0438\u0442\u0430\u0440\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nprint(sorted(Counter(y_resampled).items()))","4b1bd371":"train = pd.concat([X_resampled, y_resampled], axis=1) #\u0441\u043e\u0431\u0435\u0440\u0435\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e train\ntest = pd.concat([X_test, y_test], axis=1)            #\u0441\u043e\u0431\u0435\u0440\u0435\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e test","52d496cb":"train.shape, test.shape","d44218d3":"train['sample']  = 1   \ntest['sample']   = 0    \ntest['default'] = -1\ndata = pd.concat([train, test], ignore_index=True) #\u0441\u043e\u0431\u0435\u0440\u0435\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c data","e2279351":"data #\u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0442\u0440\u043e\u043a","2a7ba116":"#\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c,   \u043e\u0442\u043d\u044b\u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 weights=None. score \u0432\u044b\u0440\u043e\u0441\nX_train, X_valid, y_train, y_valid = Split(data)\nlogreg = LogReg(X_train, y_train, weights=None)       \ny_pred = logreg.predict(X_valid)","1611a86f":"y_train.value_counts(normalize=True), y_valid.value_counts(normalize=True)","8eb4f62b":"y_train.value_counts(normalize=False), y_valid.value_counts(normalize=False)","211fc02c":"print('accuracy_score:', round(accuracy_score(y_valid,y_pred), 3))\nprint('precision_score:', round(precision_score(y_valid,y_pred), 3))\nprint('recall_score:', round(recall_score(y_valid,y_pred), 3))\nprint('f1_score:', round(f1_score(y_valid,y_pred), 3))\ncm = confusion_matrix(y_valid, y_pred)\nprint('confusion_matrix:\\n', cm)","879fea43":"plt.rcParams['figure.figsize'] = (15,10)\nsns.heatmap(data.corr().abs(), vmin=0, vmax=1)","3b5d0d94":"#\u0443\u0431\u0435\u0440\u0435\u043c \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435 car_type, \u0430 work_address \u0438  home_address \u0441\u043b\u043e\u0436\u0438\u043c. \n#-1 \u0443 app_date \u0438 client_id \u0434\u0443\u043c\u0430\u044e \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u0435\u043c, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u043d\u044b, \u0430 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043d\u043e\u043c\u0435\u0440\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0440\u0430\u0441\u0442\u0435\u0442, \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e  \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0434\u043d\u0435\u0439 \u043e\u0442 \u0441\u0435\u0433\u043e\u0434\u043d\u044f","36742a18":"data['car_comb'] = data['car'] + data['car_type']\ndata['address'] = data['work_address'] + data['home_address']\ndata.drop(['car', 'car_type', 'work_address', 'home_address'], inplace=True, axis=1)","7a03d44b":"X_train, X_valid, y_train, y_valid = Split(data)","83b9626a":" #\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0430\u0441\u044c \u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c?\nprint('\u041f\u043e\u0441\u043b\u0435 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 :')\nlogreg = LogReg(X_train, y_train, weights=None)","8fa931a3":"X_train, X_valid, y_train, y_valid = Split(data, shuffle=False)\ndata_poly = X_train[num_cols].copy()                               #\u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0432 \u043d\u043e\u0432\u044b\u0439 DF data_poly\nX_train.drop(num_cols, axis=1, inplace=True)                       #\u0443\u0434\u0430\u043b\u0438\u043c \u044d\u0442\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0438\u0437 \u0441\u0442\u0430\u0440\u043e\u0433\u043e DF X_train\npoly = PolynomialFeatures(degree=2, include_bias=False)\npoly.fit(data_poly)\ndata_poly = poly.transform(data_poly)\ndata_poly = pd.DataFrame(data_poly)                                #\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 DF\ndata_poly = data_poly.rename(columns={0: 'age', 1: 'decline_app_cnt', 2: 'score_bki', 3: 'bki_request_cnt', 4:'income'})\n                                                                   #\u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043b\u043e\u043d\u043e\u043a\nX_train = pd.concat([X_train, data_poly], axis = 1)             # \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u043d\u043e\u0432\u044b\u0439 DF \u0441 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043a \u0441\u0442\u0430\u0440\u043e\u043c\u0443 DF\n","9e8d00e3":"X_train1, X_valid, y_train1, y_valid = Split(data) #\u041e\u0441\u0442\u0430\u0432\u0438\u043c X_train, y_train \u043d\u0435 \u0442\u0440\u043e\u043d\u0443\u0442\u044b\u043c \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043e\u043a,\n#\u0430 X_valid \u0438 y_valid \u043e\u0431\u043d\u043e\u0432\u0438\u043c \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0435\u0438\u043c shuffle=True, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043d\u0430\u0431\u0440\u0430\u0442\u044c \u0432 y_valid \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u043a\u043b\u0430\u0441\u0441","70136e00":"y_train.value_counts(), y_valid.value_counts()","6a02a52a":" #\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0430\u0441\u044c \u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c?\nprint('\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u0441\u043b\u0435 Poly:')\nLogReg(X_train, y_train, weights=None, max_iter=1000)\nprint('\u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0435\u0437 Poly:')\nLogReg(X_valid, y_valid, weights=None, max_iter=1000)   ","95af31fe":"data_poly = data[num_cols].copy()                               \ndata.drop(num_cols, axis=1, inplace=True)                       \npoly = PolynomialFeatures(degree=2, include_bias=False)\npoly.fit(data_poly)\ndata_poly = poly.transform(data_poly)\ndata_poly = pd.DataFrame(data_poly)                               \ndata_poly = data_poly.rename(columns={0: 'age', 1: 'decline_app_cnt', 2: 'score_bki', 3: 'bki_request_cnt', 4:'income'}) \ndata = pd.concat([data, data_poly], axis = 1)            \n","780c99c3":"def Binning(row, n_bins):\n    bins = np.linspace(min(row), max(row), n_bins+1)\n    which_bin = np.digitize(row, bins=bins)\n   \n    return which_bin","4f50d9f7":"\ndata_agg = data.agg({'nunique', lambda s: s.unique()[:10]})\\\n    .append(pd.Series(data.isnull().sum(), name='null'))\\\n    .append(pd.Series(data.dtypes, name='dtype'))\\\n    .transpose()\n\ndata_agg","edcc66e9":"bin_cols = ['decline_app_cnt','score_bki', 'income','bki_request_cnt'] # numerical","2564cae9":"X_train, X_valid, y_train, y_valid = Split(data, shuffle=False) #\u043f\u043e\u0434\u0435\u043b\u0438\u043c \u0431\u0435\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u044f, \u0442.\u043a. \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0442\u044c  \u043a\u043e\u043b\u043e\u043d\u043a\u0438\nfor col in bin_cols:\n    X_train[col] = Binning(X_train[col], 20)","49604cd0":"encoder = OneHotEncoder(sparse=False)\nencoder.fit(X_train[bin_cols])\nX_binned = encoder.transform(X_train[bin_cols])","776dfe35":"X_train.drop(bin_cols, axis=1, inplace=True)\nX_binned = pd.DataFrame(X_binned)\nX_train = pd.concat([X_train, X_binned], axis = 1) ","a11aaa0b":"X_train1, X_valid, y_train1, y_valid = Split(data) #\u041e\u0441\u0442\u0430\u0432\u0438\u043c X_train, y_train \u043d\u0435 \u0442\u0440\u043e\u043d\u0443\u0442\u044b\u043c \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043e\u043a,\n#\u0430 X_valid \u0438 y_valid \u043e\u0431\u043d\u043e\u0432\u0438\u043c \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0435\u0438\u043c shuffle=True, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043d\u0430\u0431\u0440\u0430\u0442\u044c \u0432 y_valid \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u043a\u043b\u0430\u0441\u0441","241b3992":"y_train.value_counts(), y_valid.value_counts()","b37f9f17":" #\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0430\u0441\u044c \u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c?\nprint('\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u0441\u043b\u0435 \u0431\u0438\u043d\u043d\u0438\u043d\u0433\u0430:')\nLogReg(X_train, y_train, weights=None, max_iter=1000)\nprint('\u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0435\u0437 \u0431\u0438\u043d\u043d\u0438\u043d\u0433\u0430:')\nLogReg(X_valid, y_valid, weights=None, max_iter=1000) ","f553d985":"X_train, X_valid, y_train, y_valid = Split(data)","81f2b1b7":"fvalue_selector = SelectKBest(f_classif, k=50)\nfeatures_kbest = fvalue_selector.fit_transform(X_train, y_train)\nprint('\u0418\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:', X_train.shape)\nprint('\u0421\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:', features_kbest.shape)\nX_train = features_kbest","96d706c5":"logreg = LogReg(X_train, y_train, weights=None, max_iter=1000)","5e5aa286":"print('accuracy_score:', round(accuracy_score(y_valid,y_pred), 3))\nprint('precision_score:', round(precision_score(y_valid,y_pred), 3))\nprint('recall_score:', round(recall_score(y_valid,y_pred), 3))\nprint('f1_score:', round(f1_score(y_valid,y_pred), 3))\ncm = confusion_matrix(y_valid, y_pred)\nprint('confusion_matrix:\\n', cm)","9ec4bf15":"#X_train, X_valid, y_train, y_valid = Split(data)\n#\u0434\u0430\u043b\u0435\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0431\u0443\u0434\u0435\u043c \u043d\u0430 \u0442\u0435\u0445 \u0436\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 X_train, X_valid, y_train, y_valid  \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043f\u0443\u043d\u043a\u0442\u0430 \u043d\u0435\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u044f \n#\u0442.\u043a. data \u043c\u044b \u043d\u0435 \u043f\u043e\u0434\u0432\u0435\u0440\u0433\u0430\u043b\u0438  ANOWA","d85813a3":"X_train, X_valid, y_train, y_valid = Split(data)","27ff2a6e":"logreg = LogReg(X_train, y_train, weights=None, max_iter=1000,penalty='l2', C=100)","85c1cecb":"y_pred = logreg.predict(X_valid)","2028d33b":"print('accuracy_score:', round(accuracy_score(y_valid,y_pred), 3))\nprint('precision_score:', round(precision_score(y_valid,y_pred), 3))\nprint('recall_score:', round(recall_score(y_valid,y_pred), 3))\nprint('f1_score:', round(f1_score(y_valid,y_pred), 3))\ncm = confusion_matrix(y_valid,y_pred)\nprint('confusion_matrix:\\n', cm)","87e4bfd2":"probs = y_pred","7050b987":"fpr, tpr, threshold = roc_curve(y_valid, probs)\nroc_auc = roc_auc_score(y_valid, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","98015c37":"data_train = data[data['sample'] == 1].drop(['sample', 'client_id'], axis=1)\ndata_test = data[data['sample'] == 0].drop(['sample', 'client_id'], axis=1)\n#X_train = data_train.drop(['default'], axis=1)\n#y_train = data_train['default']\nX_test = data_test.drop(['default'], axis=1)\n#y_test = data_test['default']","1936652f":"X_test.shape","87d6470e":"# \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435\ny_pred = logreg.predict_proba(X_test)[:,1]","11797e1a":"y_pred","c7ad3c21":"results_df = pd.DataFrame(data={'client_id':test['client_id'], 'default':y_pred})\nresults_df.to_csv('submission.csv', index=False)\nresults_df","d1d29bbd":"\u041f\u0443\u0441\u0442\u044c \u0442\u0430\u043a, \u0430 \u0442\u043e \u0440\u0435\u0448\u0435\u0442\u0447\u0430\u0442\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0435 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u043b\u0441\u044f 5 \u0447\u0430\u0441\u043e\u0432","a16e1e0d":"### \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0440\u0435\u0448\u0435\u0442\u0447\u0430\u0442\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0434\u043b\u044f \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","9acf7cdc":"Score \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u043b\u0441\u044f. \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c  \u043c\u0435\u0442\u043e\u0434 \u043a\u043e \u0432\u0441\u0435\u043c\u0443 data","a056d2b1":"\u0418\u0442\u0430\u043a, \u043f\u043e\u0441\u043b\u0435 \u043d\u043e\u0447\u0438 \u0440\u0430\u0441\u0447\u0435\u0442\u043e\u0432 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435:\nBest solver: liblinear\nBest C: 100\nBest Penalty: l2\n\n\u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u044d\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 Markdown \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0441\u0442\u043e\u043f\u043e\u0440\u0438\u0442\u044c Kaggle","7edfe188":"print('Best solver:', clf_GS.best_estimator_.get_params()['solver'])\nprint('Best C:', clf_GS.best_estimator_.get_params()['C'])\nprint('Best Penalty:', clf_GS.best_estimator_.get_params()['penalty'])","a081a87a":"### \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438","23a1c717":"### \u041f\u0440\u043e\u0448\u043a\u0430\u043b\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","c8badea6":"### \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0438\u043d\u043e\u0440\u0438\u0442\u0430\u0440\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430","f07322c7":"### \u0424\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0433\u043e\u0434\u044f\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u043e","c877ebea":"model = clf_GS.fit(X_train, y_train)","b21f375b":"\u041c\u043d\u043e\u0433\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043b\u0443\u0447\u0448\u0435 \u0438\u043b\u0438 \u0441\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u043a\u043e\u0433\u0434\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u043c \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0435 \u0438 \/ \u0438\u043b\u0438 \u0431\u043b\u0438\u0437\u043a\u0438 \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e. \n\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043c\u043e\u0447\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u0443\u044e \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f  \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432.\n\nRobustScaler\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0432\u0435\u043a\u0442\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u0443\u0442\u0435\u043c \u0432\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u044f \u043c\u0435\u0434\u0438\u0430\u043d\u044b, \n\u0430 \u0437\u0430\u0442\u0435\u043c \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043c\u0435\u0436\u0434\u0443 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u044f\u043c\u0438 (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 75% - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 25%).\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 RobustScaler, \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n","166b55a0":"\u0421\u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442\u0438\u043c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0444\u0438\u0447 \u0438\u0437 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u043e\u0432 \u043f\u0435\u0440\u0432\u044b\u0445 \u043b\u044e\u0434\u0435\u0439 (\u0438 \u0430\u043d\u0434\u0430\u043b\u043e\u0432) \u0432 \u043b\u0438\u0434\u0435\u0440\u0431\u043e\u0440\u0434\u0435","961e4a1a":"\u0432\u044b\u0440\u043e\u0441\u043b\u0438 \u0432\u0441\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 confusion_matrix \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e ","9c99a4cb":"\u042d\u0442\u043e \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0443\u0445\u0443\u0434\u0448\u0438\u043b\u043e \u043c\u043e\u0434\u0435\u043b\u044c, \u043d\u043e \u044d\u0442\u043e \u0431\u044b\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e","9cba9ac5":"### \u0411\u0438\u043d\u043d\u0438\u0433 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","8d2979fe":"C_value = [0.01, 0.1, 1, 10, 100]","d73850b2":"print('\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435: {:.3f}'.format(logreg.score(X_train, y_train))) ","1292f53b":"### \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c ANOWA","81754866":"### ROC AUC","5cbb0374":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","fbfcba01":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0435\u0440\u0432\u0443\u044e \u043d\u0430\u0438\u0432\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c","768a1caf":"\u0420\u0430\u0437\u043e\u0431\u044a\u0435\u043c data \u043d\u0430 train \u0438 test, \u0443\u0434\u0430\u043b\u0438\u043c 'sample' \u0438 'client_id' \u043d\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e X_test","c0d84632":"clf_GS = GridSearchCV(LogisticRegression(max_iter = 1000, class_weight=None), param_grid)","8760e09b":"\u041f\u043e\u043c\u043d\u0438\u043c, \u0447\u0442\u043e data \u0443 \u043d\u0430\u0441 \u043e\u0441\u0442\u0430\u043b\u0441\u044f \u0441\u0442\u0430\u0440\u044b\u0439: \u043f\u043e\u0441\u043b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0431\u0435\u0437 \u0431\u0438\u043d\u043d\u0438\u043d\u0433\u0430.\n\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043a \u043d\u0435\u043c\u0443 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b. \u041e\u0431\u043d\u043e\u0432\u0438\u043c X_train, X_valid, y_train, y_valid","df11841c":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439\n- client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n- app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n- education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n- sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n- age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n- car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n- decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n- good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n- score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n- bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0411\u041a\u0418 \u043e \u0441\u0432\u043e\u0435\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438\n- region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n- home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n- work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n- income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n- sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n- first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n- foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n- default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443\n- sample - \u0444\u043b\u0430\u0433 \u0434\u0430\u043d\u043d\u044b\u0445 train","5a0f60c4":"param_grid = [#{'solver': ['lbfgs'], 'C': C_value, 'penalty': ['l2']},\n             # {'solver': ['newton-cg'], 'C': C_value, 'penalty': ['l2']},\n              {'solver': ['liblinear'], 'C': C_value, 'penalty': ['l1', 'l2']}] #,\n              #{'solver': ['sag'], 'C': C_value, 'penalty': ['l2']},\n             # {'solver': ['saga'], 'C': C_value, 'penalty': ['l1', 'l2']}]\n              ","8a469aaf":"\u0412\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u0435\u0449\u0435 \u0440\u0430\u0437 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435","2aa44aaf":"- \u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u0441\u043b\u0435 \u0431\u0438\u043d\u043d\u0438\u043d\u0433\u0430:  Score: 0.810\n- \u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0435\u0437 \u0431\u0438\u043d\u043d\u0438\u043d\u0433\u0430:  Score: 0.816\n\n\u0411\u0438\u043d\u043d\u0438\u043d\u0433 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u043a data \u043d\u0435 \u0431\u0443\u0434\u0435\u043c"}}