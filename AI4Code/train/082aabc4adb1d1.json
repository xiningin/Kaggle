{"cell_type":{"8e08c9de":"code","07757157":"code","902d4e2f":"code","c31be14f":"code","2723544a":"code","ccaebba9":"code","d7ebe039":"code","67313e1a":"code","a0297007":"code","30eadee0":"code","f8ad2355":"code","0dc3c50c":"code","c9402748":"code","8727673f":"code","80bee45c":"code","00224f23":"code","0ea28849":"code","53354e3b":"code","df29a57d":"code","5f0bf404":"code","a10b63b7":"code","f6dea613":"code","ac0dc938":"code","75519d02":"code","cf9dde96":"code","9508d821":"code","913e5044":"code","e13d1e4c":"code","e7e25a45":"code","2e4e5da5":"markdown","02034941":"markdown","a603afde":"markdown","7882791d":"markdown","36b37bba":"markdown","65f1511a":"markdown","78e87e38":"markdown","ced802c1":"markdown","1aa18885":"markdown","f11367dc":"markdown","a6952d15":"markdown","401cd4ba":"markdown","a569942b":"markdown","ac066aed":"markdown","a5925c47":"markdown","3ac1cc75":"markdown","c75ed1d5":"markdown","b5c962a4":"markdown","a73d0d1b":"markdown","7e6cafc5":"markdown","c6dc8db2":"markdown"},"source":{"8e08c9de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07757157":"training_data = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Training.csv\")\ntraining_data_date = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv\")\ncurrent_data_date = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv\")\nsubmission = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/sample_submission.csv\")","902d4e2f":"training_data.head()","c31be14f":"training_data.describe()","2723544a":"training_data.isna().sum()","ccaebba9":"training_data[\"match_id\"] = training_data[\"Id\"].apply(lambda x: int(x.split(\"_\")[0]))\ntraining_data[\"player\"] = training_data[\"Id\"].apply(lambda x: x.split(\"_\")[1])\ntraining_data_date[\"date\"] = pd.to_datetime(training_data_date[\"date\"])\ntraining_data.drop(training_data.iloc[:,1:13],axis=1,inplace=True)\ntraining_data = training_data.merge(training_data_date.iloc[:,[0,3]],on = \"match_id\", how = \"inner\")\ntraining_data_new = training_data.groupby([\"player\",\"date\"],axis = 0, as_index= False).sum()\ntraining_data_new","d7ebe039":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestRegressor\nimport xgboost\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import StackingRegressor","67313e1a":"name = [\"SK Raina\"]\nplayer_wise_data = pd.DataFrame()\nplayer_wise_data[\"player\"] = name\nplayer_wise_data = player_wise_data.merge(training_data_new,on = \"player\", how = \"inner\")\n#if player_wise_data.count()[0] >= 15:\nplayer_wise_data_features = pd.DataFrame()\nplayer_wise_data_features[\"feature_1\"] = player_wise_data[\"Total Points\"].shift(3)\nplayer_wise_data_features[\"feature_2\"] = player_wise_data[\"Total Points\"].shift(2)\nplayer_wise_data_features[\"feature_3\"] = player_wise_data[\"Total Points\"].shift(1)\nplayer_wise_data_features[\"response\"] =  player_wise_data[\"Total Points\"]\nplayer_wise_data_features = player_wise_data_features.dropna()\nplayer_wise_data_features = player_wise_data_features.reset_index(drop= True)\nplayer_wise_data_features","a0297007":"model1 = LinearRegression().fit(player_wise_data_features.iloc[0:165,0:3],player_wise_data_features.iloc[0:165,3])\ny_hat1 = model1.predict(player_wise_data_features.iloc[165:,0:3]).astype(int)\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(player_wise_data_features.iloc[165:,3],y_hat1)))","30eadee0":"model2 = RandomForestRegressor().fit(player_wise_data_features.iloc[0:165,0:3],player_wise_data_features.iloc[0:165,3])\ny_hat2 = model2.predict(player_wise_data_features.iloc[165:,0:3]).astype(int)\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(player_wise_data_features.iloc[165:,3],y_hat2)))","f8ad2355":"model3 = xgboost.XGBRegressor().fit(player_wise_data_features.iloc[0:165,0:3],player_wise_data_features.iloc[0:165,3])\ny_hat3 = model3.predict(player_wise_data_features.iloc[165:,0:3]).astype(int)\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(player_wise_data_features.iloc[165:,3],y_hat3)))","0dc3c50c":"model4 = SVR().fit(player_wise_data_features.iloc[0:165,0:3],player_wise_data_features.iloc[0:165,3])\ny_hat4 = model4.predict(player_wise_data_features.iloc[165:,0:3]).astype(int)\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(player_wise_data_features.iloc[165:,3],y_hat4)))","c9402748":"model5 = get_stacking().fit(player_wise_data_features.iloc[0:165,0:3],player_wise_data_features.iloc[0:165,3])\ny_hat5 = model5.predict(player_wise_data_features.iloc[165:,0:3]).astype(int)\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(player_wise_data_features.iloc[165:,3],y_hat5)))","8727673f":"from sklearn.linear_model import Lasso\nmodel6 = Lasso(alpha=0.05).fit(player_wise_data_features.iloc[0:165,0:3],player_wise_data_features.iloc[0:165,3])\ny_hat6 = model6.predict(player_wise_data_features.iloc[165:,0:3]).astype(int) \nprint('RMSE:',np.sqrt(metrics.mean_squared_error(player_wise_data_features.iloc[165:,3],y_hat6)))","80bee45c":"def get_stacking():\n    # define the base models\n    level0 = list()\n    level0.append(('XGB', xgboost.XGBRegressor()))\n    level0.append(('RF', RandomForestRegressor()))\n    level0.append(('svr', SVR()))\n    level0.append(('lasso', Lasso(alpha=0.05)))\n    # define meta learner model\n    level1 = LinearRegression()\n    # define the stacking ensemble\n    s_model = StackingRegressor(estimators=level0, final_estimator=level1, cv=5)\n    return s_model","00224f23":"def future_values(name,model_num):\n    name = [name]\n    player_wise_data = pd.DataFrame()\n    player_wise_data[\"player\"] = name\n    player_wise_data = player_wise_data.merge(training_data_new,on = \"player\", how = \"inner\")\n    if player_wise_data.count()[0] > 15:\n        player_wise_data_features = pd.DataFrame()\n        player_wise_data_features[\"feature_1\"] = player_wise_data[\"Total Points\"].shift(3)\n        player_wise_data_features[\"feature_2\"] = player_wise_data[\"Total Points\"].shift(2)\n        player_wise_data_features[\"feature_3\"] = player_wise_data[\"Total Points\"].shift(1)\n        player_wise_data_features[\"response\"] =  player_wise_data[\"Total Points\"]\n        player_wise_data_features = player_wise_data_features.dropna()\n        player_wise_data_features = player_wise_data_features.reset_index(drop= True)\n        if model_num == 1:\n            model = LinearRegression().fit(player_wise_data_features.iloc[0:player_wise_data_features.shape[0]-1,0:3],player_wise_data_features.iloc[0:player_wise_data_features.shape[0]-1,3])\n        elif model_num == 2:\n            model = RandomForestRegressor().fit(player_wise_data_features.iloc[0:player_wise_data_features.shape[0]-1,0:3],player_wise_data_features.iloc[0:player_wise_data_features.shape[0]-1,3])\n        elif model_num == 3:\n            model = SVR().fit(player_wise_data_features.iloc[0:player_wise_data_features.shape[0]-1,0:3],player_wise_data_features.iloc[0:player_wise_data_features.shape[0]-1,3])\n        elif model_num == 4:\n            model = xgboost.XGBRegressor().fit(player_wise_data_features.iloc[0:player_wise_data_features.shape[0]-1,0:3],player_wise_data_features.iloc[0:player_wise_data_features.shape[0]-1,3])\n        elif model_num == 5:\n            model = Lasso(alpha=0.05).fit(player_wise_data_features.iloc[0:player_wise_data_features.shape[0]-1,0:3],player_wise_data_features.iloc[0:player_wise_data_features.shape[0]-1,3])\n        else:\n            model = get_stacking().fit(player_wise_data_features.iloc[0:player_wise_data_features.shape[0]-1,0:3],player_wise_data_features.iloc[0:player_wise_data_features.shape[0]-1,3])\n        y_hat = model.predict(player_wise_data_features.iloc[player_wise_data_features.shape[0]-1:,0:3]).astype(int)\n    else:\n        y_hat = player_wise_data[\"Total Points\"].mean()\n    if y_hat < -2:\n        y_hat = -2\n    return y_hat","0ea28849":"def model_selection(model_num):\n    response_fun = pd.DataFrame(columns = [\"y_pred\",\"y_test\"])\n    response_fun[\"player\"] = training_data_new[\"player\"].value_counts().index\n    response_fun.set_index(\"player\",inplace = True)\n    for name in response_fun.index:\n        response_fun.loc[name].y_pred = int(future_values(name,model_num))\n        response_fun.loc[name].y_test = int(training_data_new[\"Total Points\"][training_data_new[\"player\"] == name].iloc[-1:])\n    return response_fun    ","53354e3b":"#Using Support Vector Regressor\nresponse = model_selection(model_num=3)\nprint(\"RMSE using Support Vector Regressor : \",np.sqrt(metrics.mean_squared_error(response.y_pred[0:253],response.y_test[0:253])))","df29a57d":"#Using XGBoost\nresponse = model_selection(model_num=4)\nprint(\"RMSE using XGBoost : \",np.sqrt(metrics.mean_squared_error(response.y_pred[0:253],response.y_test[0:253])))","5f0bf404":"#Using RandomForest\nresponse = model_selection(model_num=2)\nprint(\"RMSE using RandomForest : \",np.sqrt(metrics.mean_squared_error(response.y_pred[0:253],response.y_test[0:253])))","a10b63b7":"#Using Linear Regression\nresponse = model_selection(model_num=1)\nprint(\"RMSE using Linear Regression : \",np.sqrt(metrics.mean_squared_error(response.y_pred[0:253],response.y_test[0:253])))","f6dea613":"#Using Lasso\nresponse = model_selection(model_num=5)\nprint(\"RMSE using Lasso : \",np.sqrt(metrics.mean_squared_error(response.y_pred[0:253],response.y_test[0:253])))","ac0dc938":"#Using Stacking\nresponse = model_selection(model_num=6)\nprint(\"RMSE using Stacking : \",np.sqrt(metrics.mean_squared_error(response.y_pred[0:253],response.y_test[0:253])))","75519d02":"submission = submission.drop(index=551).reset_index(drop= True)\nsubmission[\"match_id\"] = submission[\"Id\"].apply(lambda x: int(x.split(\"_\")[0]))\nsubmission[\"player\"] = submission[\"Id\"].apply(lambda x: x.split(\"_\")[1])\ncurrent_data_date[\"date\"] = pd.to_datetime(current_data_date[\"date\"])\nsubmission = submission.merge(current_data_date.iloc[:,[0,2]],on = \"match_id\", how = \"left\")\nsubmission_new = submission.groupby([\"player\",\"date\"],axis = 0, as_index= False).sum()","cf9dde96":"submission_new = submission_new.iloc[0:1279,:]\nsubmission_new","9508d821":"for i in range(0,submission_new.shape[0]):\n    name = submission_new[\"player\"][i]\n    date = submission_new[\"date\"][i]\n    training_data_new.loc[training_data_new.shape[0]] = [name, date, 0, 1111]\n    submission_new.loc[i,\"Total Points\"] = int(future_values(name,model_num=3))\n    training_data_new.loc[training_data_new.shape[0]-1,\"Total Points\"] = submission_new[\"Total Points\"][i]","913e5044":"submission_new","e13d1e4c":"submission_final = pd.DataFrame()\nsubmission_final[\"Id\"] = submission_new[\"match_id\"].astype(str) + \"_\" + submission_new[\"player\"]\nsubmission_final[\"Total Points\"] = submission_new[\"Total Points\"]\nsubmission_final.loc[1279] = [\"1216517_KD Karthik\",0]\nsubmission_final.loc[1280] = [\"1216493_nan\",0]\nsubmission_final.loc[1281] = [\"1216512_nan\",0]\nsubmission_final.loc[1282] = [\"1216547_nan\",0]\nsubmission_final.sort_values(by= [\"Id\"],inplace = True)\nsubmission_final.reset_index(drop = True)","e7e25a45":"submission_final.to_csv(\"submission.csv\",index=False)","2e4e5da5":"**Starting with Linear Regression**","02034941":"# Predicting IPL 2020 player performance","a603afde":"**No Missing Values present in the Training DataSet**","7882791d":"**Final Submission Data has 1279 rows instead of 1283 because of one duplicate and 3 nan values**","36b37bba":"**Stacking Ensemble**","65f1511a":"# DATA IMPORTING","78e87e38":"**Picking a single player to predict what will be their last 20 matches performance will be based on their previous matches. For that we going to make supervised data for the model. We know that players form can be known from last couple of matches. Here, I take last 3 matches played by Suresh Raina as the features and 4th match as the response variable.**","ced802c1":"# Comparing predicted data and test data","1aa18885":"**Data Cleaning**","f11367dc":"**We could perform the analysis for the players who have played more than 15 matches as new players doesn't have a lot of data.\nIf we use all data (including new players) then RMSE will be less as there are more than 50 players with only playing single match**","a6952d15":"**Result**","401cd4ba":"**After performing well with single player now I will now predict the last match played by every player. As there is no data for the new players, I would simply take the average of the last few matches played by the new players and assigning 0 to the debutants.**","a569942b":"**XGBoost**","ac066aed":"**Predicting Players performance match by match and adding the latest data in the training data for the next prediction.**","a5925c47":"**Support Vector Regressor**","3ac1cc75":"**Removing Duplicate KD Karthik and Spliting Match Id and Player Name and adding Date column for sorting in chronological order.**","c75ed1d5":"**Importing the required Libraries.**","b5c962a4":"**Dropping the columns that we do not need and adding the Date Column as the Match ID column is not in Chronological order**","a73d0d1b":"**Lasso**","7e6cafc5":"**Removing NA values**","c6dc8db2":"**Random Forest**"}}