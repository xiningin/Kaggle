{"cell_type":{"c5c73004":"code","13993b93":"code","403687b1":"code","611f1a3f":"code","218126a3":"code","377124c8":"code","0f56eeea":"code","a87a4db0":"code","5c773de4":"code","4b278f2b":"code","de218a85":"code","17887548":"code","30c4b6de":"code","6d765454":"code","2a6ab858":"code","8769b548":"code","55484ee6":"code","118740b0":"code","52ece154":"code","d7b7930a":"code","e396fa32":"code","f3dfcc2d":"code","1c6b69c5":"code","4954e241":"code","509d9d1f":"code","f8faaf08":"code","2e527720":"code","2d079dfe":"code","b79ed6d0":"code","a0b3f619":"code","0325fb49":"code","9a640b2d":"code","058d1866":"code","a194b9e5":"code","ffce8e22":"code","a546f5e5":"code","96dfc45b":"code","a232eefb":"code","c18bc90b":"code","850812a4":"code","1972fd24":"code","db9c12f7":"code","be091d65":"code","8ae21c1f":"code","d0d82ccf":"code","ce778877":"code","a09774bf":"code","9c03ca56":"code","2eefbe13":"code","7eef11f3":"code","4749e9d8":"code","996318a7":"code","31deabc2":"code","733ce5dd":"code","c9470855":"code","a492b767":"code","a67b91ed":"code","9f28919f":"code","6288554c":"code","6e25661e":"code","156ee688":"code","038f7c26":"code","3af00451":"code","88413593":"code","877bb6f9":"code","e73de45e":"code","9af6c01c":"code","6c287395":"code","e2a81a8e":"code","42e322ed":"code","d80aaa7c":"code","cc293ce7":"code","e0d50bb4":"code","4ff3f28d":"code","51a53bc1":"code","db52bde5":"markdown","29d5035b":"markdown","6b7e9706":"markdown","2d0ffe44":"markdown","ca728457":"markdown","959bd344":"markdown","7996942a":"markdown","37e29cfe":"markdown","c494b108":"markdown","fc85fe85":"markdown","53ffa850":"markdown","813db0e1":"markdown","83343c2c":"markdown","b7e9191f":"markdown","4e963009":"markdown","dee471ad":"markdown","05db43d4":"markdown","a95d85b2":"markdown","2adaf9cf":"markdown","747fc764":"markdown","ba4df950":"markdown","7b0b3b1e":"markdown","d8cb0314":"markdown","732d8086":"markdown","0d4dcd6e":"markdown","7cfe7dc9":"markdown"},"source":{"c5c73004":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","13993b93":"#First file to be explored is the dataset_labels file. \n\ndf1= pd.read_csv('..\/input\/pvs-passive-vehicular-sensors-datasets\/PVS 1\/dataset_labels.csv')","403687b1":"df1.head()","611f1a3f":"df1.shape","218126a3":"df1.describe()","377124c8":"fig = plt.figure(figsize = (15,20))\nax = fig.gca()\ndf1.hist(ax = ax)","0f56eeea":"#Looking at the first file: dataset_gps\n\ndf2= pd.read_csv('..\/input\/pvs-passive-vehicular-sensors-datasets\/PVS 1\/dataset_gps.csv')","a87a4db0":"df2.head(10)","5c773de4":"df2.info()","4b278f2b":"#Removing null columns \ndf2=df2.drop(columns=['ageofdgpsdata','dgpsid', 'activity','annotation'])","de218a85":"df2['provider'].unique()\n#As the provider is gps always, this coulmn can be removed too","17887548":"#Decoding timestamps \nfrom datetime import datetime\ndt_object = datetime.fromtimestamp(df2['timestamp'][1340])-datetime.fromtimestamp(df2['timestamp'][0])\nprint(dt_object)\n","30c4b6de":"#Plotting how the track looks\nplt.plot(df2['longitude'], df2['latitude'])","6d765454":"#How elevation changes with time\nplt.plot(df2['timestamp'], df2['elevation'])","2a6ab858":"df2['accuracy'].unique() #Accuracy of the sensor in recording data ","8769b548":"#Bearing is the compass direction from your current position to your intended destination. \n#There are a few null values for the same. This indiactes the car wasn't moving in any direction at that time\n#Checking the speed\/m parameter\n\n(df2['speed_meters_per_second'] == 0).sum(axis=0)","55484ee6":"df2['satellites'].unique() #The satellite being used to identify the GPS co-ordinates","118740b0":"df2['geoidheight'].unique() #Geoid Height is a scientific term that relates latitiude, longitude and height \n","52ece154":"df2['battery'].value_counts()","d7b7930a":"plt.plot(df2['timestamp'], df2['battery']) #Battery is reducing with time","e396fa32":"#distance_meters is the distance covered in that given time of 1 sec\ndf2['distance_meters'].sum()\/1000 \n#total distance covered in kms","f3dfcc2d":"#mpu left file\ndf3=pd.read_csv('..\/input\/pvs-passive-vehicular-sensors-datasets\/PVS 1\/dataset_mpu_left.csv')","1c6b69c5":"df3.head()","4954e241":"df3.info()","509d9d1f":"dt_object = datetime.fromtimestamp(df3['timestamp'][144035])-datetime.fromtimestamp(df3['timestamp'][0])\nprint(dt_object)\n#Data is produced at each microsecond for total of 24 minutes ","f8faaf08":"#Changes in temperature\nplt.plot(df3['timestamp'], df3['temp_above_suspension'], color='red')\nplt.plot(df3['timestamp'], df3['temp_below_suspension'], color='blue')\nplt.plot(df3['timestamp'], df3['temp_dashboard'], color='orange')\n","2e527720":"from mpl_toolkits import mplot3d\n%matplotlib inline\nfig = plt.figure()\nax = plt.axes(projection='3d')\nax.scatter3D(df3['acc_x_dashboard'], df3['acc_y_dashboard'], df3['acc_z_dashboard'], cmap='Greens');","2d079dfe":"def magnitude(vector): \n    return math.sqrt(sum(pow(element, 2) for element in vector))","b79ed6d0":"# We will be making this new parameter for acc_dashboard, acc_above_suspension , acc_below_suspension, gyro_above_suspension, gyro_below_suspension, gyro_dashboard, mag_dashboard, mag_above  \n\nimport math\n\nacc_dashb=[]\nacc_above=[]\nacc_below=[]\ngyro_above=[]\ngyro_below=[]\ngyro_dashb=[]\nmag_dashb=[]\nmag_above=[]\n\nfor i in range(0, len(df3)):\n  vector=np.array([df3['acc_x_dashboard'][i],df3['acc_y_dashboard'][i],df3['acc_z_dashboard'][i]])\n  acc_dashb.append(magnitude(vector))\n  vector1=np.array([df3['acc_x_above_suspension'][i],df3['acc_y_above_suspension'][i],df3['acc_z_above_suspension'][i]])\n  acc_above.append(magnitude(vector1))\n  vector2=np.array([df3['acc_x_below_suspension'][i],df3['acc_y_below_suspension'][i],df3['acc_z_below_suspension'][i]])\n  acc_below.append(magnitude(vector2))\n  vector3=np.array([df3['gyro_x_above_suspension'][i],df3['gyro_y_above_suspension'][i],df3['gyro_z_above_suspension'][i]])\n  gyro_above.append(magnitude(vector3))\n  vector4=np.array([df3['gyro_x_below_suspension'][i],df3['gyro_y_below_suspension'][i],df3['gyro_z_below_suspension'][i]])\n  gyro_below.append(magnitude(vector4))\n  vector5=np.array([df3['gyro_x_dashboard'][i],df3['gyro_y_dashboard'][i],df3['gyro_z_dashboard'][i]])\n  gyro_dashb.append(magnitude(vector5))\n  vector6=np.array([df3['mag_x_dashboard'][i],df3['mag_y_dashboard'][i],df3['mag_z_dashboard'][i]])\n  mag_dashb.append(magnitude(vector6))\n  vector7=np.array([df3['mag_x_above_suspension'][i],df3['mag_y_above_suspension'][i],df3['mag_z_above_suspension'][i]])\n  mag_above.append(magnitude(vector7))\n","a0b3f619":"fig = plt.figure(figsize=(10,8))\n\nax = fig.add_subplot(311)\nsns.lineplot(df3['timestamp'], acc_dashb, color='red', ax=ax)\nax.set_title('Acc_dashboard')\n\nax = fig.add_subplot(312)\nsns.lineplot(df3['timestamp'], acc_above, color='blue', ax=ax)\nax.set_title('Acc_above_suspension')\n\nax = fig.add_subplot(313)\nsns.lineplot(df3['timestamp'], acc_below, color='yellow', ax=ax)\nax.set_title('Acc_below_suspension')\n","0325fb49":"fig = plt.figure(figsize=(10,8))\n\nax = fig.add_subplot(311)\nsns.lineplot(df3['timestamp'], gyro_dashb, color='red', ax=ax)\nax.set_title('Gyro_dashboard')\n\nax = fig.add_subplot(312)\nsns.lineplot(df3['timestamp'], gyro_above, color='blue', ax=ax)\nax.set_title('Gyro_above_suspension')\n\nax = fig.add_subplot(313)\nsns.lineplot(df3['timestamp'], gyro_below, color='yellow', ax=ax)\nax.set_title('Gyro_below_suspension')\n","9a640b2d":"fig = plt.figure(figsize=(10,8))\n\nax = fig.add_subplot(211)\nsns.lineplot(df3['timestamp'], mag_dashb, color='red', ax=ax)\nax.set_title('Mag_dashboard')\n\nax = fig.add_subplot(212)\nsns.lineplot(df3['timestamp'], mag_above, color='blue', ax=ax)\nax.set_title('Mag_suspension')\n\n\n","058d1866":"#Checking for correlation \nfig, ax = plt.subplots(figsize=(12,12)) \nsns.heatmap(df3.corr(), ax=ax)\n","a194b9e5":"df4=pd.read_csv('..\/input\/pvs-passive-vehicular-sensors-datasets\/PVS 1\/dataset_mpu_right.csv')\ndf4.head()","ffce8e22":"df4.info()","a546f5e5":"#Changes in temperature\nplt.plot(df4['timestamp'], df4['temp_above_suspension'], color='red')\nplt.plot(df4['timestamp'], df4['temp_below_suspension'], color='blue')\nplt.plot(df4['timestamp'], df4['temp_dashboard'], color='orange')\n","96dfc45b":"# We will be making this new parameter for acc_dashboard, acc_above_suspension , acc_below_suspension, gyro_above_suspension, gyro_below_suspension, gyro_dashboard, mag_dashboard, mag_above  \nracc_dashb=[]\nracc_above=[]\nracc_below=[]\nrgyro_above=[]\nrgyro_below=[]\nrgyro_dashb=[]\nrmag_dashb=[]\nrmag_above=[]\n\nfor i in range(0, len(df4)):\n  vector=np.array([df4['acc_x_dashboard'][i],df4['acc_y_dashboard'][i],df4['acc_z_dashboard'][i]])\n  racc_dashb.append(magnitude(vector))\n  vector1=np.array([df4['acc_x_above_suspension'][i],df4['acc_y_above_suspension'][i],df4['acc_z_above_suspension'][i]])\n  racc_above.append(magnitude(vector1))\n  vector2=np.array([df4['acc_x_below_suspension'][i],df4['acc_y_below_suspension'][i],df4['acc_z_below_suspension'][i]])\n  racc_below.append(magnitude(vector2))\n  vector3=np.array([df4['gyro_x_above_suspension'][i],df4['gyro_y_above_suspension'][i],df4['gyro_z_above_suspension'][i]])\n  rgyro_above.append(magnitude(vector3))\n  vector4=np.array([df4['gyro_x_below_suspension'][i],df4['gyro_y_below_suspension'][i],df4['gyro_z_below_suspension'][i]])\n  rgyro_below.append(magnitude(vector4))\n  vector5=np.array([df4['gyro_x_dashboard'][i],df4['gyro_y_dashboard'][i],df4['gyro_z_dashboard'][i]])\n  rgyro_dashb.append(magnitude(vector5))\n  vector6=np.array([df4['mag_x_dashboard'][i],df4['mag_y_dashboard'][i],df4['mag_z_dashboard'][i]])\n  rmag_dashb.append(magnitude(vector6))\n  vector7=np.array([df4['mag_x_above_suspension'][i],df4['mag_y_above_suspension'][i],df4['mag_z_above_suspension'][i]])\n  rmag_above.append(magnitude(vector7))\n","a232eefb":"fig = plt.figure(figsize=(10,8))\n\nax = fig.add_subplot(311)\nsns.lineplot(df4['timestamp'], racc_dashb, color='red', ax=ax)\nax.set_title('Acc_dashboard-Right')\n\nax = fig.add_subplot(312)\nsns.lineplot(df4['timestamp'], racc_above, color='blue', ax=ax)\nax.set_title('Acc_above_suspension-Right')\n\nax = fig.add_subplot(313)\nsns.lineplot(df4['timestamp'], racc_below, color='yellow', ax=ax)\nax.set_title('Acc_below_suspension-Right')\n","c18bc90b":"fig = plt.figure(figsize=(10,8))\n\nax = fig.add_subplot(311)\nsns.lineplot(df4['timestamp'], rgyro_dashb, color='red', ax=ax)\nax.set_title('Gyro_dashboard-Right')\n\nax = fig.add_subplot(312)\nsns.lineplot(df4['timestamp'], rgyro_above, color='blue', ax=ax)\nax.set_title('Gyro_above_suspension-Right')\n\nax = fig.add_subplot(313)\nsns.lineplot(df4['timestamp'], rgyro_below, color='yellow', ax=ax)\nax.set_title('Gyro_below_suspension-Right')\n","850812a4":"fig = plt.figure(figsize=(10,8))\n\nax = fig.add_subplot(211)\nsns.lineplot(df4['timestamp'], rmag_dashb, color='red', ax=ax)\nax.set_title('Mag_dashboard-right')\n\nax = fig.add_subplot(212)\nsns.lineplot(df4['timestamp'], rmag_above, color='blue', ax=ax)\nax.set_title('Mag_suspension-right')\n","1972fd24":"#Starting with data labels file that has one hot encoded data of the road condition\n\ndf1.head()","db9c12f7":"df1.info() #No null values as expected","be091d65":"#Creating a function that measures the distribution \ndef metricsDataClass(classes):\n    \n    list_data = []\n    list_data.append(df1[classes].sum())\n       \n    data = pd.DataFrame(list_data)\n    data[\"Total\"] = data.sum(axis=1)\n    \n    for classe in classes:\n        data[classe + \"%\"] = round(data[classe]\/data[\"Total\"] * 100, 2)\n        \n    data.index = np.arange(1, len(data) + 1)\n    data.index = data.index.rename(\"PVS\")\n    return data","8ae21c1f":"#Road Surface type\nmetricsDataClass([\"dirt_road\", \"cobblestone_road\", \"asphalt_road\"])","d0d82ccf":"#Road surface condition\nmetricsDataClass([\"paved_road\", \"unpaved_road\"])","ce778877":"#road roughness condition-left\nmetricsDataClass([\"good_road_left\", \"regular_road_left\", \"bad_road_left\"])","a09774bf":"#road roughness condition-right\nmetricsDataClass([\"good_road_right\", \"regular_road_right\", \"bad_road_right\"])\n#almost same as the left side","9c03ca56":"#Speed bumps\nmetricsDataClass([\"speed_bump_asphalt\", \"speed_bump_cobblestone\", \"no_speed_bump\"])\n","2eefbe13":"#Function to convert one hot encoded values back to labels so that we can use it with other datasets\ndef one_hot_to_label(df_in, classes, df_out, class_name): \n    conditions = []\n    for r in classes:\n        conditions.append(df_in[r] == 1)\n    df_out[class_name] = np.select(conditions, classes)\n    return df_out","7eef11f3":"labels = pd.DataFrame(columns = ['road', 'condition','quality_right', 'quality_left','bumps'])","4749e9d8":"road_classes = ['dirt_road', 'cobblestone_road', 'asphalt_road']\nquality_left_classes = ['good_road_left', 'regular_road_left', 'bad_road_left']\nquality_right_classes = ['good_road_right', 'regular_road_right', 'bad_road_right']\ncondition_classes = ['paved_road', 'unpaved_road']\nbump_classes=['no_speed_bump', 'speed_bump_asphalt', 'speed_bump_cobblestone']","996318a7":"# Convert from one-hot encoding to single label encoding\nlabels = one_hot_to_label(df1, road_classes, labels, 'road')\nlabels = one_hot_to_label(df1, quality_right_classes, labels, 'quality_right')\nlabels = one_hot_to_label(df1, quality_left_classes, labels, 'quality_left')\nlabels = one_hot_to_label(df1, condition_classes, labels, 'condition')\nlabels = one_hot_to_label(df1, bump_classes, labels, 'bumps')","31deabc2":"# Convert road quality labels to numeric values\nlabels = labels.replace({'quality_right' : { 'good_road_right' : 2, 'regular_road_right' : 1, 'bad_road_right' : 0 }})\nlabels = labels.replace({'quality_left' : { 'good_road_left' : 2, 'regular_road_left' : 1, 'bad_road_left' : 0 }})\nlabels['quality'] = labels.loc[: , \"quality_right\":\"quality_left\"].mean(axis=1)\nlabels = labels.drop(columns = [\"quality_right\",\"quality_left\"], axis = 1)","733ce5dd":"labels.head()","c9470855":"acc_columns = [\n    'acc_x_dashboard', 'acc_y_dashboard', 'acc_z_dashboard',\n    'acc_x_above_suspension', 'acc_y_above_suspension',\n    'acc_z_above_suspension', 'acc_x_below_suspension',\n    'acc_y_below_suspension', 'acc_z_below_suspension'\n]\n\ngyro_columns= ['gyro_x_dashboard', 'gyro_y_dashboard', 'gyro_z_dashboard',\n    'gyro_x_above_suspension', 'gyro_y_above_suspension',\n    'gyro_z_above_suspension', 'gyro_x_below_suspension',\n    'gyro_y_below_suspension', 'gyro_z_below_suspension']\n\nmag_columns= ['mag_x_dashboard', 'mag_y_dashboard', 'mag_z_dashboard',\n    'mag_x_above_suspension', 'mag_y_above_suspension',\n    'mag_z_above_suspension']\n\nacc_axis = len(acc_columns)\ngyro_axis = len(gyro_columns)\nmag_axis = len(mag_columns)","a492b767":"df_left=pd.read_csv('..\/input\/pvs-passive-vehicular-sensors-datasets\/PVS 1\/dataset_gps_mpu_left.csv')\ndf_right=pd.read_csv('..\/input\/pvs-passive-vehicular-sensors-datasets\/PVS 1\/dataset_gps_mpu_right.csv')","a67b91ed":"def absolute(columns, axis):\n  sum_left = df_left[columns].abs().sum(axis=1).div(axis)\n  sum_right = df_right[columns].abs().sum(axis=1).div(axis)\n  \n  return pd.concat([sum_left, sum_right], axis=1).mean(axis=1)","9f28919f":"mpu = pd.DataFrame(columns = ['acceleration', 'gyro','mag'])\nmpu['acceleration']= absolute(acc_columns, acc_axis)\nmpu['gyro']= absolute(gyro_columns, gyro_axis)\nmpu['mag']= absolute(mag_columns, mag_axis)","6288554c":"gps=df_left.iloc[:,-4:]","6e25661e":"#Combing all the relevant data into single dataset \ntemp = pd.concat([gps, labels], axis = 1)\ndata= pd.concat([temp,mpu], axis=1)","156ee688":"#This is how final data looks like for PVS1\ndata.head()","038f7c26":"data.info()","3af00451":"data.drop_duplicates(keep=False,inplace=True) #no duplicates found\n","88413593":"#clustering to find patterns\n\ncluster_columns=['speed','quality','acceleration','gyro','mag']","877bb6f9":"from sklearn import preprocessing\nscaler = preprocessing.MaxAbsScaler()\n\nclusters = scaler.fit_transform(data[cluster_columns])\nclusters = pd.DataFrame(data, columns=cluster_columns)","e73de45e":"from sklearn.cluster import KMeans\n\ndef kmeans_cluster(df, n_clusters):\n    model = KMeans(n_clusters, random_state=0)\n    clusters = model.fit_predict(df)\n    cluster_results = df.copy()\n    cluster_results['Cluster'] = clusters\n    return cluster_results\n\ndef summarize_clustering(results):\n    cluster_size = results.groupby(['Cluster']).size().reset_index()\n    cluster_size.columns = ['Cluster', 'Count']\n    cluster_means = results.groupby(['Cluster'], as_index=False).mean()\n    cluster_summary = pd.merge(cluster_size, cluster_means, on='Cluster')\n    return cluster_summary\n\n","9af6c01c":"#clustering into 6 as we have 3 types of roads and 2 conditions for each row\ncluster_results = kmeans_cluster(clusters, 6)\ncluster_summary = summarize_clustering(cluster_results)","6c287395":"sns.heatmap(cluster_summary[cluster_columns].transpose(), annot=True)","e2a81a8e":"#Having so many clusters isn't helping, let's try with less parameters and only 3 clusters \n\ncluster_results = kmeans_cluster(clusters, 3)\ncluster_summary = summarize_clustering(cluster_results)\n\nsns.heatmap(cluster_summary[cluster_columns].transpose(), annot=True)","42e322ed":"sns.scatterplot(cluster_results['speed'], cluster_results['acceleration'], hue=cluster_results['Cluster'], \n                palette=sns.color_palette('hls', 3))","d80aaa7c":"sns.scatterplot(cluster_results['speed'], cluster_results['gyro'], hue=cluster_results['Cluster'], \n                palette=sns.color_palette('hls', 3))","cc293ce7":"sns.scatterplot(cluster_results['speed'], cluster_results['mag'], hue=cluster_results['Cluster'], \n                palette=sns.color_palette('hls', 3))","e0d50bb4":"data.groupby(['road']).mean()['acceleration']","4ff3f28d":"data.groupby(['road']).mean()['speed']","51a53bc1":"fig, ax = plt.subplots(figsize=(15,7))\ndata.groupby(['timestamp_gps','road']).mean()['acceleration'].unstack().plot(ax=ax)\n\n#How type of road impacts acceleration","db52bde5":"To get more clear trends, let's consider data produced by accelerometer as a vector with x, y and z magnitude. So, the magnitude of the vector is defined as the following:\n![magnitude-3d-vector.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAXgAAAFlCAIAAABut2S0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAF\/MSURBVHhe7Z0HfBTF24AnhI4goDQDoiAqK0UFRESaIOWPSCcU6b1KLwEB6QgI0nsvQXoviZSE9N4LaZfkeu\/p+71bPO+7JEdIcsllM8\/vJdzO7W27mefe2YpIDAaDsTFYNBgMxuZg0WAwGJuDRYPBYGwOFg0Gg7E5WDQYDMbmYNFgMBibg0WDwWBsDhYNBoOxOVg0GAzG5mDRYDAYm4NFg8FgbA4WDQaDsTlYNBgMxuZwVTR5T58aoqKy2SEMBlOucFM0eXk506cLV61SscMYDKZc4aZoeDz9J58kDBqkzcxkSzAYTDnCTdG4ugoRikBIHRJiZIswGEz5wU3RLFz4GqF4hJS7dqnZIgwGU35wUDRJSbqGDb0RSgTR9OypYUsxGEz5wUHRPHokqVkzACEeiKZFC3lcnI59A4PBlBNcE01mZu6wYaEIgWj4CKkQkv\/5Jz72hMGUM1wTjUBg7NQpECFwjRAyGogxY2RZWfiEGgymPOGaaC5fFjg4eCIUhZCIFo26eXNBWJiBfRuDwZQHXBPN2rUJCHkhFIeQGCEFiAaM8+ABPsiNwZQnnBJNbm7e3LmgGD+EkhCS0BmNBl7cvIlFg8GUJ1zLaI4dEzZqFIlQCkJShFTVqmm6d1c9fKhn38ZgMOUB10STk5MXEmKcOVOGUNQHHyRs2pQhk+Wx72EwmHKCa6JhSE42Nm78on37VzpdDluEwWDKD26KhsczNG\/+kiC8sGgwGHuAq6IxOjl5EoQPFg0GYw9wWDReBOGHRYPB2AMcFo0PFg0GYydwWDR+BOGPRYPB2AMcFo0\/QQRi0WAw9gCHRRNAEEFYNBiMPcBV0WQ4OQURRAgWDQZjD3BYNMEEEYpFg8HYAxwWTQhBhGHRYDD2AIdFE0YQEZVCNEFB5PXr7GsbAdNHiFy2jB20Namp5MCB1BwhundnCzEVGQ6LJpwgokokmlOn2Lr+xRdU1S8MaIT16lGjtWjBlpQxzNx\/\/50dtAVlLBqQC8wOXANzhL+FsXcvOyaz8Z2dLb8m2CbMu6aA0WCCb\/QyzBdGhgkWBkwHRgDFY4oGFk3hMLWNCSvN2FTXIcoF8CDMGrRogkkH3NzYwZJTlqIBWcC83mhtZh1BsrD9mS0AYfGTwHyDMCkYhwlmNAh4beXHAzYdjAMTLxDm3TcuYRFhpmbFp5yAw6KJIIiYUhAN\/KxZqVVMLWHGgbATmBb1xt\/tolOWomHmBatgHWiZYH+TLJgvAgLSHBPMN2ix2DACkwOClazA5Czm+jYxaxb1VmmlkEVc3woOh0UTSRCxpSAa+Gul3TKKYeoKhJ1QGUSTH2atzRfS9A1aAFZiXGNuJQsYmxTYe2IcVFr9pmKvb4WC26KJKx3RQHUssM6ZJ\/nwAsIcqIjwEaZSQhS4awB+ME1pv3kwML\/SsADMpJi3YHyL6Zh3lJhltghmfKZC50\/RodCilsN6weyYpgjLD6vPfNaixTKjma8gswzWgUkxCwwBs7DYLEy5eRQ9cWBEYz6+6RvMD\/OWlaQGtjmMkL\/3xHwp5h8synZgvkFmk8JfeM14ivmIeZh\/F+afYt6yMKOphsALZgHsVVgcFk00QbzW6XLZomJgqqZQk5gvG16YA3UaCpmaDS8gTEDjgY8wVQqmAH+ZEcwbFTN9qB\/wAn4\/mVlANYVBBqZ5QwnzFtQhU202r8pMA2OmDH\/h48xozKwhmDrNTC1\/RbQohHVk3AczNc2RKTEtGADTNF9gU3swX8H8MGkCM0Hz1TG1H2ZSUMJsFoj8jbZAmD33sAzm3xF8HArhb35g+ZlZW4FZa4u2zayCqbAo2wFWgSmElTKtNbPNmY8wb8FrCNOUTccimE8xCwMB45tgvlOmhkDAaDBol3BYNDEEkVg6ogGY2mDx6wo1AL5dpmbDu+bfMVQX+PrNKz1jJfNawlQO0zimSmOCKYGASsbIAoARLKbDVC\/zmp2\/BGCmxtRvcywKmbWGOZoWjFlyCGZTMDCzMG+EzK8rbJPCYBYAVtl8wZiJ598O+ZczP9AUYZEgmG0CH7GwErMu5ottDrwFYUVkzLKZfyMALCoUmpa2KNuBcYSFIEBYptfwrsX6wvSZGZlXORiTKTRtQOazEObfl13CVdEYadEklZpo8tce5gfHVHuY79sKFvWJGTSvfACUQE0ywYwDMzWvQ8ySmNdLpq6bKh+QvwSwWAATFoUwOyixaH5MkzO1WCYdgMptATPfwpourKz5REww7dDUVgtbzvwwfjEFfAS+FHPMv8H8MJ+y2ErmwGZnxjFtf+ZLN6mnKNshf82xoMD1ha2RvxCw2HPEfNZc0\/YKZzOa5s3j2rVLKTXRAEx7MNVL88oEwGsIC6AiQo2BKUAwzcxUdZgqUhTR5K9tUGhecZklMS0YkL8EsDI180IYhLCA+axpUzDtDZaBWTVTMJKymK+JAhUGwAfNJ17YcloBtjN8nPm1N08uLKZsAbwFYUoVC4RxmWmazJdo0llRtgOjDIu0yJwC15eZkXk6w2AxcjG2VTnBQdGkpeXu3Klo3Dj2ww+Tjx3TiUTFfQoC1Bj4FuEvg3mNYX7KrLRP+IVh6opFmD4CI0DDgBpp+i1iKo15jSysGjGTMgEjwCCMbCJ\/CWBlauZLBYMQFjCfNW0KZssUFoVlNMy7+bHYzoUt5xthviAI0ya1mLI5zDcIYR0LTcBXZv5LUJTtYGUZGApc3wK\/QcBi5GJvqzLnTRu6onHtmuHTT9MQCkEoHKF4B4eor77iP3+eyb79VlhUEUYNUAJ1lJGI6YcOgEEIE0yKCxXU1Ory1wlmIszvIYzPVGLzVlpYNYJCCBP5K2X+EsDK1MwLYRDCAuazpk3B\/JLnn5R1mK1ni4zGBHwQwrTiFlM2h3nLSqLBYPrS4QWz1vCtmSjKdmB6neafsqDA9YUFg0Kc0dgnWi35009ihIIRekb\/jUXIE6GI6dOVucXoQuWvpowaTFIwB8ohTJhqp4kCqwjUJ6ZHxry2aISFVSNmfBMwAgzCyCbylwDM1Cx2KMAcodB8FgXqwGIfDfOp\/PsmrMM0HnM7MzBbwNQfKWyt34gpSTH1hvJ\/gwwmfeRfmPwwXzpsAeaF+VYtynZgVgd+TgqjwPUtTE\/MDxj8ZSj2tipzOCUalSqvXz8pQmEIvUDIG6EA+jnc0ePHK7Oz2XHegvzVlKlYTJi+bAam0IR5L52BqaamOsHUpPw\/WeYUVo2gEMIEjACD5vMqsElD62I+aN6kmfZmPgvTcposyWwHCPNNwaxg\/lmYJp4fGBk+AnM0txjTcszbYVEaD4wDI5ivMsyaEZb5B\/N\/gwAsIbPw1mdhgklbYOKw5Pl9UZTtwIxjvhiw5KZBplJZTNkkTfMpM0sCYTJpUbaVfcAx0eT06wcZDXSdYmjdQMQjlD5unDw7++331BRYTZnabP5lMzCFJpjPQtWEhgSvoRpZNGmoi\/Ca+RQTMAKUmKunsGrEjG+CmY55q2OaNPNZmLXpLaZVM+XMiuRvnLBezKIyy2NabPhrvimgeZjegnIIxm7mk8oPYzEImK9p4vDXXD1FaTwm4zMLCWEaNJ8U8y3AFmDGgWDmCAFLazLpG2FMAWHx6wIUZTuYBMEsCTM18xGYEtNyMpi+RPNPQZirB4umXMjOzl24MAWhZIQECIFxIIRNmvAPH1axY7wVBSYdzNcPlckCqG0Q5kCdYyoHlMP4TI001QlmEIKpnRDQCJnxTbWZaU7558VM0wRTs80bGAATgXGgHJq0uRNhRkw5zAteAzBoUVNhUsw0mY9DO2GWhBnfBEzWtMzMmDDTN7Ze2ICM3SDgszAFC2UXttYWQBt749yZb9A8YDT4lLmUiwKsOPNxi43MUJTtAHM0bdL8aw2TZbYJUx9MmH8K3oLXFktexG1lB3BKNAzu7pqvvkqvUSOpVq2Un39WBAYWa0+wrWEqkEW9gdrJ1CoMhltws06Hh+tatPBo186zRNc62RRIIkAoFr97zA8U\/OJhMNyCm6Lh8QxOTi8Iwo4f8s9k45APQxYNryFMSbL5fkQMhhNwWDR2\/5D\/vWY3iINguu4F7gXAYCo4XBWNET\/kH4OxHzgsmlcE4YtFg8HYAxwWjRcWDQZjJ3BYND5YNBiMncBh0fgRhD8WDQZjD2DRYDAYm8Nh0QQQRCAWDQZjD3BVNBlOToEEEYRFg8HYA9wWTTAWDQZjD3BYNMEEEYJFg8HYA9wWTSgWDQZjD3BYNCEEEYZFg8HYAxwWTShBhGPRYDD2AIdFE0YQEVg0GIw9wGHRhBNEFBYNBmMPcFg0EVg0GIydwFXRGOmMJhqLBoOxBzic0UQSRAwWDQZjD3BbNHFYNBiMPYBFg8FgbA6H99FEEUS8TleMZ25jMJhShsMZTTRBJGDR2AiEKRbs5qt8cFg0MQSRiEVjI9h2g3lL2M1X+eBw1wlEk4RFYyMqc5vBFAMOZzSxBJGCRWMjsGgwbwWHRROHRWMj6E4AFg3mLeBmdYmIyGjRIr5du1Q+H4um9Cm6aLRabd++fWHk9957Lzg4mC0tK8pl7uW7ynYLB0Xz7Flmp04pNWpE1qqV1KePKCQkm32jnChimywhZTMXhqLP68SJE0xjmzRpEjQ\/aIRMedlQLnMv31W2WzglmuxsctEiJUKxCPkgFIpQHEJBjRsnPn6cwY5RHlRm0ZiAttelSxeBQMAOly3lMvfyXWV7g1OiUany+vUTgVwQckMoEKEIhF4gFD52rAIcVF5g0QDQ6saMGVNeP+\/lMvfyXWV7g2ui6d9fhlAMQr4IvULIm9bN6\/HjVRVCNKas2wT8HrZq1QqmYAGk5ewY\/wKF7CvbU4x53bt3b\/fu3exAmVMucy\/fVbY3OCUapTKrT58UhPgIwd8EOngIpU2fLsstv53CRWyWVjJtqK8wEVOthRoMgyAg85HLTDQwo7edFyznzJkzy+u3vVzmXr6rbIdwSjSZmTkHD6Z\/+mkS7RoJQrIaNcQjR0p9fIzsGOVBUZol1Mi+fftauMMEIxrwCzucTz3A2zb+YlOMGW3cuLHA9SobymXu5bvKdginRAPk5eWlpGRu2yZr1CikRYvI48f1en0e+145UZSWyYijsIMU0FGycBCT1Jh3oOxWNLBqjCIhZYO+IVNYZpTL3Mt3le0TromGgcczNG\/+vF07T3u4TcQbWyZUx4EDB0K\/qUDRgF\/AMhY7ZRgxwV922F5FA4sN4zMU\/bwSWK\/8O6GKQTHmXvJZF2+VOQ9XRWN0cnpJEF72Lxowy5gxYzw8PMAyBVZxJnkxdwqjHoscx\/pcSpH8M4LFNm9RjARL0lyL3trzb4oCvVx0ijhr5kuxwHwxMBZwWDQeBOFt\/6KBmg1YaR7wrnkzZqp4\/jptfS6liPmMYKlg2aAEYBYeltZ8sHjARIrycdO8AKarAjBbsthnyhVx1ha7YJgvxbQMmPxwWDSeBOFj56KBhsqcasG0WKjl7Bv\/Am9Bm6GbEkthTQjeYl\/9i3k7LJD8s3sj8Cn2lRlM2wYePHiwdOlStrQEFLG1MzCrab4usDwgAnbgLSnKrGH7C4VCduBf22LLWIfDovEiCF97Fg3UV7AMk6oUJhqm3FT1Td7JP2ZhcyldCpsL09qLnUdYUJTWboLJJsw3CJQUu9m\/1awBbJkiwmHReNu5aKB2wlvm5K+vzDjm5Uz6AJWbMZQJGI19ZUsKm0thoiwijKesYKXxW7j4bdOZks+62GtdqeCwaHwJws9uRQPtwfyELlBJfncAUMstygtLagqcS7GhWlhBEyxsLkyTK5eMxkI0+c+ufiuKPmvG+NgyRYTDovEjCH+7Fc3SpUvN2wPU1\/yiYaqyRetlCmGaFulP\/rnANKHQCoU1EvbttxHNyZMnR4wYAQsGi8cWlYCit3bAfCvBNilhyy\/irJmZFn0hMRwWjT9BBNinaKA2W7QHqLL5WynzW20xJgzCBPOPXJgC3hbTdOBF\/mnmLwGgeTPAu\/CXLS0BsI5Fb8NMigfEx8cXex+wiaLMmpkjtsxbUTq1096gRRNAEIF2KBqoyhaaYCpuYV0kU9M1leTPfYACFVASYIIW07QYhJYGy+Ph4cEcaTL9yMMCQzksLTNaMSiGaGDWs2bNspBvMXjjrJnZWawgrDJ8kB3AFARXRZPh5BRIEMF2JRqmKdLt97+UBCooU8LA1HL4yw7no7AKDW+xr0oPZo7sQL5ZMEtu3uSYxS66Iwrjja3dAma+ZZNMWXxfDBbeweSHw6IJIogQu91HU+rYYi50IypUNPYDqKFULIOxHRwWTTAWTcmhTPPvlG00ixICisGWsX84LJoQggjDoikhlGbsWDTBwcGlci4yxtZwWDShBBGORVNyKNPQE7fdLN4W6Cv1pfdD43tlVhSwaGxO2bRP282F0gwNO1zeMMd9YHnwLtgKBIdFE04QUVg0pQKlGbsRDaYiwmHRRGDRlBa0Z7BoMMUHi8bmlE0TtfVcsGgwJYHboomxB9FgMBgOiyaSIGKxaDAYe4DboonDosFg7AGuisbo5BRFEPE6Xfk9OA6DwfwLhzOaaIJ4jUWDwdgD3BZNAhYNBmMPcLjrFEMQSVg0GIw9gEWDwVQKDBkGnVFHhYENvVGv0qmESqFIJaJCzUa6Kj1BlqAyqthPlgYc7jrFEkQKFg0GA3i\/9h5xeMSgPwcN3jt48CE2hhwZ0mNPj4\/Xfdz699ZUbG3danurJhubfHvo263PtoYKQtkPlwacFU3z5nFffMHDosFgcvJyRv8xGk1BaDZCMxBaitByOlYgtBKhVQitoWMVqr62+q8PfvVP88\/NK+WGw0HRZGWRL17omjSJbd2aFxGRBYMYTGUmVZbaZW0XSjSradeAWdYitA6h3\/6N1chxtaPTNqdd\/+xiP1PacE00fn5Zv\/wiq1IlEqEwhF7XrJm4apVKqcxj38ZgKhm5ublBKUH9tvVDzrRiliA0j5YLiAbChcpr2u1ut\/nJZrFazH7GBnBKNDodOWyYBKFQhF7Sf+MR8kYoet06DTsGBlM5gL6PX7zf3id7h+8f\/tHSj+pNrYfGIrSY7i5Np\/0C2c1yVHdN3R\/3\/xiWFsZ+zGZwSjQqVV6\/fiKEQhByQ8gPoWDaOBFjxyqys9lxMBiuYsw0CtXCRxGPlrkua7OqjeNURyqLGY3emflOm+Vtak6oieYgtIzdTVNjRY0OWzvcDrmdnVMWbYNjosnt31+KUDLdbwLRQEAfKmXcOCwaDGcRKAT+Sf47H+8cc3BMq9Wt0HiExqGqY6sSK4lhe4ftf7LfK94rKydr6O6haBJCi1C1KdWIDcTme5uhV8VOwvZwTDRZ\/fu\/RigVIQFCQvovRNratQp2DAyGK4gUomsB1369+utXm75qsrQJ1TMajxwmOXT9veuyy8tuBd5KEiWpDWp2bJK8F3TP6VcnNBmNPzieJ+FpDGW6P4FrO4N5PMOaNWInp3TQTfXqog4d5E+fGnNz8c5gTIUHEhCpVhovjt\/xcMeYE2NqLqqJZiL0C6o2o1qjZY0G7xq89\/7eeGG8MctY2MHpJElSVHpU2fSVLOCaaBg8PDTVq3u2bx+SlIS7TJiKDfglLCnsZtjNBVcWfLfnu3cWvoOmIUhMmi1s9s2mb9ZcX3PN71qSOIkd217hpmhSU40tWrwgCE98PxpMBQX84hfvt\/vp7qEnhjqtdarzax00lTpg1GR5E+eDzgf+ORCcFMyX89mx7R5uioa+1uklQXhh0WAqEAajIVWR+ijy0cIrCz\/b8RlahNBchOagd5e82+a3Ni7XXK77XTdkGcql71NCOCwaD4LwxqLB2AM+8T73Q+6b75o1RyAX+CT4bHfbPvL4yFZbWqGFCM1HVeZU6bC5w8hjIw89P+Qd4601VuwnWHFYNK8IwgeLBlPunH5+usmqJjUX1Vx7Y21e3n\/HJYQK4VWfqwtuLuiwp8P76993WOCAFiCHJQ7f\/vHtyqsr74bd5cl4hbmpwsFh0XgRhB8WDaZ8ySPzft7xM5pAnSNXdXbVoKSgWGnstgfbRp8fXW11NerKxsXUuXNOG50GHxp86OmhOEEc9IzMfcQNOCwab4LwxaLBlC8gmpnHZ1InuYBTlqAPln3w7sZ3qdNzF6OmG5t2291t7f21zDkv7Ac4CodF40sQ\/lg0mPICEhPfON8\/Hv3xxeovKNEspK9pnIEabWw09uTYI8+PhPPDRQpRqd+QwT7hsGj8sGgwZYzOqEuUJj4Mfzjn3Jy2q9pSPabRyGGsAxqDqJPrlqKGixo+CX\/Cjl2Z4LBoAggiEIsGUwaIVCLPWM8tD7YM3Tf045UfO4xzoK5mHIW+WvvV6P2jTzw\/8d2G76jrjBajWvNrufq4sh+rTHBVNBlOToEEEYRFg7EJ9L5agVxwxffKnItziHVE\/YX1q4ytgsYjx8mO3TZ1c3F1eRj6kK\/ga4zUJUWnX5xG46ik5oNfPwjj2fyeDHYIt0UTjEWDKV1EalFoWui2+9tGHh1ZdW5V6mqACajG9BotV7QcvGfwMfdjMfwYdlQzcnJztt\/fDtnNdd\/rbFElg8OiCcKiwZQWQa+DXANdXe669PizR50FddBkBF2hxgsa99jWY\/2t9XeD7iaJk\/KYPAdTEBwWTTBBhGLRYIpHXl5eRnYG5C9HXx4df358wxUNay6sSe1nmY6arWg2\/tD4Y8+PRfGjpBppWd7VpeLCYdGEEEQYFg3mrTBkGvhK\/uPox9PPTCd2EGg+dakRRKNljb7c\/OW66+tu+t+EfhD3TqizNRwWTShBhGPRYACVXpWRlcEOFIRUJX0e\/Xyb+7YpF6d8vefrmr\/Sd72chb7e8rXzMefT3qd943zL+E5RHIPDogkjiAgsmkpOdm62y02X1qtab7q9yfyiZ+jvwKA+S+8W6bbNbdtnf3xWZ02dKvOroHnIcbFjtz+6QfLyJOqJSCXSGir21Yx2AodFE04QUVg0lZxLry5RzzNagKrNqnbV5yqUiJXieGn85vubh58c7rjKkXqa2iLqaqM2W9oMOTrk9MvT0WnRzGcxpQiHRROBRVPJySPzXK64UDfrXkJdFT3or0GrHq\/qfaj3xzs\/ph5vtBi9v+79H\/b9sPHhxodhD5NFyZXkaoByoUxFk63XS2bPlnTrlpdj2\/ZPnxkMGU00Fk2lJSc3JzM7c+e9ndR1RgvY64zQr9SLplub\/nLmlxMvT8SKYxVaRY6NayMGKFPRGKXS+GHDUhBSbtqUm5nJltoAOqOJJIgYLJrKhjHLyJPxnoQ\/mXx08hcu9NWMENNp0UxF44+Pvx90H2cuZU9Zd52MYnFky5ZJCOmuXWOLbMC\/oonDoqkkKHSKp+FPN93bNOH4hA7rOtSeWBuNpq426rKuS9N5TdFE6gmNDpMd9jzaw34AU7aUwz6ahE2bIhASDhmSo1SyRaUNFg3nyc3NhZ6RyqByi3YDv3y65tMas2tUca6CxlEPSOv2e7f119f\/E\/WP1qil9gePou7S4PCLw56HWDTlQzmIJg9cs3RpOLhm7Fi2qLSh99FEEUS8ToeTZK4hVAujhdGbbm8atn9Y1TlVqasBxqOaM2sSLsSwfcPOvjwblR7Fjkoj18nHHxzfeFljyG78XvuxpZiypRxEAyj8\/Pzeey+udu2M0FC2qFShM5pogkjAouEMwa+DL\/ldmus6t+efPVuubol+oa42qj+7\/o9\/\/Pj7nd+fRDxJEacUdjWAQCEITApMFCeyw5gyp3xEAwhv3AiqVSupXTtDZCRbVHrQookhiEQsmopLXl6ePlMvUov+cv9rwtkJdRbXcZznSOUv05HTCqfJxyaffnk6QZygMWhycnEH2d4pN9EA\/v36+SOU5uycazSyRaUE3XUC0SRh0VQ4MrIzQB9PYp643HLpc6BP7V9roxnIYbZDs+XNvtv53fqb6+8E3amIDzaq5JSnaNShoYEdO4ZXqaK4eJEtKiXojCaWIJKxaCoK4I6g5KBjr45NOD+h7fa27yx+h7r35QzqaqPxx8a7BroGJgTiq40qLuUpGkDi7u5dv35k3bqKW7fYotKAFk0cQaRg0ZQv0Pe5+OpirCC2wFu1ZGVnqTPUblFu6++t\/3zX53VW16GezTgf1VxSs\/ue7htvbHwZ91KhUxgyDOwHMBWWchZNXk5O9KJFHgi97t8\/L7vU8mEQTYsW8e3apWLRlCMyrazDbx3QdNRoUaMIXgRbSpJCuTCMH3bI89DE8xNbb2+NFlPHnmuvqN1+W\/sRx0dc8L4QzgtnR8VwhXIWDZAhlYaPGRPk6Ji2bl1uabgmMDBn3DhhrVrR9eol7dunUSrxrUPKh+dRz6l7dC+lPDL15NQoXtT98Psuj1267e\/24bYPqeTlV\/TO6nf+d\/B\/Wx5ueRbzjCfm4d26XKX8RQPokpPdHR19ETJG\/b8zIIqBt3dm27apCAUhFIZQvINDJEGke3llsW9jypDo9GjqMSPzEFqJqs6p+q7Lu45rHakzdFc6tNjWYtqFaWc9zibLkvVGPb7aiPPYhWjycnNfb9niWa1a7JAhmUIhW\/r2qFR5\/fqJaMu4IxSCUAxCLxGKGD9eUXrdMswbyMrJihXEPgp7NP\/cfOrW\/1MQWkfdpM5prVOfY302PNlwP\/i+MbOUjzNi7By7EA0ArgkaOdINoZRly9iitwdE07+\/GKFwhDzoeIWQD0LREyZg0dic3LzcwOTAw\/8cHnt47CcrPqk7sS4agSjRjKeuM0Kz0Zj9Y5RqW110grFz7EU0gOjhw2cNGryqX1\/x6BFb9JYoldk\/\/CBAiA+dJkhk6EhAKH3KFAXOzW1BZnamTCdzj3Jfc30N4ULUnF3TYbwDmoDqzqzbcnHLtX+vdd7vzN6lYQ5yPuScmWXDS\/Yx9owdiQYQXLv2CKEAgjAkFudscaMxZ+tWfv36yQiBbqR0iJo1S793T8+OgSkNBEpBcErwPrd9E45NaO3Smnrw6zhUdWzVNivaDN4z2NXbNZTHXlki1Ui7u3RHE5GDs8Of9\/9kCjGVEPsSTZZK5dm582OE4hYsYIvekry83Jcv9bNmSSCdcXJKnjhRFRCA9wSXDhKl5Hbw7ZU3V36z\/RunFU5UqjIR1ZpW6+c\/f956d+udoDux6bFqg5od+198XvuMPDBy0ZlFfAWfLcJUPuxLNIA2OtqzQwd3R0fBpUswWLxD08nJhiZNnrdv76VQ4H0zJSCXVOqVPDlvz5M940+Pr7e0XpV5VdBUVHVW1WbLmvX\/o\/\/2O9tjBbHQgbJ+WDojKyMrB+u+UmN3ogGoDlS1as\/ff1+yfr1u\/Xr9oUNGd3fybfay8HjG5s1fEMQrfD+aYgDWiE6Lvhdxb9m1ZT329Xhn0TvUHeomo6YLmnbc2HHjrY2Pwx7rjDp2bAymCNijaPJyckKnTQtAKBUhMUJC+NuwYcaVK+zbRYC+qNKDILyxaIpOXl5eYGLggZcHRp8a\/dH6j+ouqUv5ZSbquKnjlBNTXANdfeJ9UiWp7NgYzNtgj6IBhCNHptF7dOMRikYoFl63bk1mWHsGmDm0aDyxaPQZeusPbM3IyBBpRG7RbiuuryB2EY7LHNECVGVhlQYrGny64dNll5Zd9rlsyDJkZeOOD6ZE2KNoFG5ur+vWhXQmFCE\/hF4g5AvGqVrVcOIEO8aboEXziiB8K7NoPF57jDoyavnV5a9Fr9mifxEqhAHJAX8+\/3PsmbGfbP+EuhpgAXKc5dh2Y9shh4f8HfB3SFIIOyoGUxrYo2iS5s5NpM\/qBcVAOhNJn3WXUK9e1osX7BhvghaNN0H4VVrR8GS8divaUXdamIbGHB6jNVKPW5QoJTeDby69u\/TrvV83+b2Jw0IHUEy15dWGHx2+7eG2hxEPXwteq\/QqZgoYTClij6LRPn0qqlsX0pln9Lm9PLoDJZ86lX27CNCi8a3MookXxn+44ENKNEvQl5u+XOW6aqLrxFq\/1UKrkcNyhxprarTc2nLAgQG77++OEcTk5OZY72FhMCXETvfR8AYOjKWvWfKiL45MQUh74QL7XhHAonkW\/ewrl6+oU+nWUHd4oR5ZvwQ1Xd+0085OG59sdI90V+lw5oIpO+xUNMqEBNWKFbJx4yQ9e8Z26xaMkKBTp+wiX29J3\/jKnyACKpVo8vLyApIC9j7eO2LfiKYLmjr+4khdakQ\/W7rtmrY3I24GJAekS9NhNPYDGExZYaeioYD2kJ1N5uRo4+PDunWLQUixfj371pugM5oAggi0IhqNhty1izx3jppPxcWYYUxTpLlFuS2+vJh6MOMUhJxRtV+qNZ7XuPWS1o4THKm7NCxGHX\/riI8cYcoROxaNGeq4uNBWrRLr1VOePMkWWYUWTSBBBFkRTUIC2bw52bMnmVUBG6BIJfJN8P3j8R+jDo76ZM0nVOYyFjmMcWi3st3QP4de978enhou1ojbLW+HplH3l2q2qFlGVlFPDsBgSp2KIRqAd\/hwAELx775blA4U3XUC0QRbEc3evWT79mTfvuTLl2yJ\/SNWiq8HXv\/V9deOv3d8f8n7DuMc0HhUZXKVkQdH7ri\/41n0s2Rxslr\/39VGm29upp4GOxltuL6BLcJgyoMKI5psozF62rQIhESLF7\/x8Sy0aIIIIqQw0Wi15MCB5F9\/kStWkCW4AY7Nyc3NlWqkMcKYXY92jTs5rvrC6tSBpAmo+ozqzZY3G7BrwP5H+6P50TBmgXtecnJyPGI8YvmxeL8MpnypMKIBMtXq0N69QxGS7trFFhUCLZoQgggrTDRXr5K9e5NSKXnnDvnTT2S4\/d0MOyw57GbYzflX5nff073eonpoKnWruibzm3y76dvVf6++HnD9tdDyNDwMxm6pSKIBeMeP+yKU2LVrtkDAFhUELZpQK6KZMYOcPZt6oVCQgweTrq50aXmTk5sTkBCw2333z8d+bubSrM7iOtTO3emo0bJGow6MOuB+IDQlVKgQ5ubhc14wFYwKJhogac8eP3BN3765ukIvIP5XNOEFiiYoiPz8c9LNjR1cv56cOJEyTrmgN+qTZclPY57OvzS\/3a52aCFCc6nTXhosa\/D575+vurLqqs\/VjOwMfEIdpkJT8URjFAg8P\/wwACHFuXNsUT5o0YQRRGSBooGOV7Nm5OnT5JUrVC4D2c2nn5Ilfv7C\/0Nj0HjGej4Of5yZXfDNKyUqyav4V9vdtw8\/Nrz11tbU1QDzEZqFOm7sOOLoiCMvj3jFeuEHM2I4Q8UTDSB+8sSvWbPwBg203t5s0f+HFk04QUTlF41EQvbqRVarRtarR9avT0XduqSDA7llCztCqbDl1pa6i+vWWVRnwfkF+gz6RqL03liRUnTN\/9qCGwsgean\/W\/0qC6tQV0svrvLNzm9WXl15L+xeuizd\/LARBsMNKqRogLA5c54jFN+zZxaYIx9WRPPiBdmmDenrS50+A30vvZ46c2\/VKrJLF1JZSrfoV+qV\/Tb3Q5Ops\/7h74PgBzGSmD8e\/+F83rnammpoOXUGXfXl1Vtuajnw4MAjbkei0qLywEP4uFAlICeHjIkhnz8n\/\/mHCk9PMiXlre7pVlGpqKLRJSQE9Ojhg5Bw9262yAz6hD0QTUx+0UyaRO0Gzvz\/HZqAAMo+hXfF3g6JRtJrUy\/qMSOrqIc0Nlra6N2N71J+WYYarWv0\/Z7vXe673A66nSBMwEedKxtqNTl8OFm7NlXfoMP+2Wdkt27kgQPUDx63qaiiAdQRER4ffOBfq5Yo331q6IwmMr9o4Kfj11\/J\/E9zgfa+YQO5bx87WEzyqGenBcQH7Li345Mln7BPg12J0AzUdEtT5xPOhz0OR\/AjJCoJfvBrpQVEM3Ik9WvH45FpaVQ6c+MG2bEj6e\/PjsBVKrBogIRt29wQCmnVKtdgYIto\/hVNbP6MprCjN+Ca4mWwOqMuXhz\/OPzxrDOz2ru0p54NMBpVHVfVYYIDdfxoGWq8uDG12wXnLhhaNCNGkAsW\/HeFnUxGncm1Zg07yFUqtmiyVKqoOXO8qlRJWrgwW\/PfMRq66xRFEPE6na2OCsu18hfRL7Y+3Dpk75BWq1pVGV+FSmFGoS\/XfDl6\/+hzHueaz2lOnWW3BNVfVD8yLZL9GKZyw4hm4cL\/RBMYSPbpQx0A5TYVWzRAtlbr3rjxc4SU9+6xRWxGE00Qr0tRNHk0QqXQ1cd13sV5n6\/9vO78ulXGVUETUNUpVb\/Z+M3qq6sfhj2EETRGSnlrrqyhrnWciZotbIaf0IhhANE4O5Nt25LTp5MzZ5JTp1KWWbSIymu4TYUXDZB8+PCzGjXCevQwQpeX5l\/RJJRcNDk5OUKVMIgXtOPhjlFHR1WbV406W3c8dbXRJ6s++d+e\/514fiIiLYId2wxdhm7ayWkTj0689Ip6QBUGAzCiad+enD+fymvmzSOHDqWMk5TEjsBVuCAaIGbFikcIRQ0fzgzSookhiKSSiCYkMeRa0LWp56d23dm17qK6aBJ1rLrh3Ia9d\/Red3Pd\/ZD7CeIEfMIu5q1guk5gGVPXKSuLXL2aMg63qxJHRKPw83vevLl71aoi+vmWxRMNJC\/GbKNfvN\/2h9sHHB7QcGXD6guqU\/nLDNR0edNxh8YdfXY0mh+t0Cmyc\/EDMDHFAUQzciSlFZNogAsXyM6dyf9\/PINrcEQ0gPzly0fVq79q0SIjyDtNmNuiRVz79ilFEY1Wr40WRD+IejD9zPQOf3SgDhXNpqLRskadtnZac23Ndf\/r4CB2bAx3SU9PFwgENs1SmYzG\/KgTsH8\/2bUr+aZ7n1RsuCMawG\/gwKcI3Rm1fNactDrvxDRokLhihTgxseA7y6l0KvdI9y1uWwYfHtxqSyvHRfRdL2ejr7Z+5XzM+bzveUht8j+yHsM9srOz79y5s3Hjxm7dunXt2tXFxeXs2bMy2+yeZUQDSU1AAHVxb2Agefky2b07tT\/YXD3cg1OiyeUn\/PXNosboPnJ4TT\/eMhkhYbt2isBAyEqzAKhSfDn\/ksel2Rdnf77983fXvFt1cVWQS9UFVTtt67Ty0sqHYQ8FcoEhk9NZLOb\/8+zZs1q1aiEzHBwcOnfuPHHixHv37qlUKqg27KiFkJeXp1ZnQ4c9KEit1eZmZRWaE2k01K7fjz+mUphvv6X+\/vgj6eJCpnL9UcOcEs3dB7JGjSPop7NIEVIhZEBIidCZjz4a7+w8Zty4sc7OztWJ6uhThD5D1N82dHyIiG+JiRMmThgH\/yZO+mXS1i1bt5QGmzZtOn36NPxa3ioNvLy8fEoJb2\/vuLi45OTkpJKRmJio0WiMRqOhlCj7Lip0lAYOHMgKpiDeeeedGTNm3Lx5E7YYCIX9mBm5uXmnT4uaNg1HKBGhVCentHnzhGq1tf5XQgJ1KjCkMyEh1A34KwOcEk2fPkEIRdHP7AbLGBEiEYKvvwpbZSo49evXb1hKNGjQoG3btl9++WXHktGhQ4dBgwb9\/PPPQ0qDn376adq0aQsWLJhfYhYuXPjXX3\/tfxMHDx7cvHkzbA12E1vl008\/nTp16pEjR+RyOVvhaHbvTqtWDX7eUv\/9eVNXqSIbPVqSmopPnvoPDokmj\/yweSDdYxIipEEokxbNebaaYCoZ0P0pCo6OjvCX\/UwRqFq1asuWLQcMGPDw4UOVShERIX\/vvWA6l5EgpKV\/3qDiwV\/53LniPHwvxH\/hgmgyczJTZEmnH9+p8f5lhOL+zWgyEMpDaD1bQTCY0qZ+\/Zrt2u2vWhWqXBpCCrqrno1QLkI5COm\/\/Vaq12PRsFRg0eiMuschjzc\/2jzu5LgvNnxRd3Yt1KszQtF0Eiujf17g+z7HVgoMpvSBVGgznUSDaJS0aKDKwc8b\/DU4OAgDAwu922xloyKJhjqhLtMo1Umfxz3\/\/cHvbbe0rbqgqsMUBzQZVZ9dvfuOrr3nrUDIn05q0sE1VZFsOZo+EaEqNWvWgKCB2lEFEmAHVAOK6rxTq3YdprwwILVm6hQGYwFUjWrVNtK\/bTz6t01H95uy6L9aBwdRSgp+OihLxRCNSCGKEkZte7xt6NGhtVbUoh5ZPxPVWlCr3YZ2ww4OO+95PjQlFEZTKrPGjYuoXt0PoRjIa95HfjdRq0iErowfe\/HShUtnT106e3LTtJHzurca39RhXqdma0b2Prlvl+vly5fPn7t09vSlM6cs4sq5M\/t27Vy7asVva1aVMNa7rF6zYtmoEcNLHqNHjhg0oH\/3bt9+\/123kgdM55NWrVqXOD5p3fqDDz6oXbt2nVLirXadlCV169aF9R0xbOj+PVsXzX1ctWrAvx12SGrANXo6m5YMHCgwGnHXicWuRROcGHzJ79KM6zN6HOrRcmtL6gkBC1DtxbUH7Ru04e4G9yj3FFGKxU2kNJrsfftSW7YMRCgQOUSN+OCvcKgCH3+sCwnMNGiytMosvZoX5BnqevDB6nFHejRwHd8p7NI+SXSgUSbK0WuzdZosjTJTrTBFtlaVo1OXVpBGXSlEhl4nE6cnxPET40seMJ2AVx7+ni9LGDCRl08f37p65fbfrqUSR\/bvO7Tvz5IHTGfjurUL5s5ZNH+eRSxeuGD8WGeQI6sQq8Bo333bdeG8uX9fPB\/o5ZmhVuQZ1PER6e2+8EIoCKEEhPj0gScIUdOmvGfPtGylxNi5aG5H3K6zoQ5ajByWO3yw6YPJpyefenkqUZKoz9Bn51g7\/SA4WN2kycs2n\/nGhoojBvaHpCZ9wnitSqZVSLQykUElz9BrNVJRjMdjn\/N\/Xf91+N\/Te1+Z1jPi9hlRdLBazM\/QafVKuV4u1UpF9hkgGoNCWlphLtaSBDg6RwdeLp0gDdrSCaMOlo3ZaBaRpVa4P7zfrEkT1iX5gC53wwYNRg4fuu33jTGhQemJ8Xq5JFevgQnCx2GaWRpxsE9Kuy9eIcTkNSkIxTZqFHv3roqtixgauxaNSCcafnb4mvtr7gXeM2S8xdm6PJ6hefOXX3zhrc8gDfz0sG7dYqtUEWz+XSPma+VicA2ETi7WK2VMSJPjPE9suzF\/8NkxX95dPgbynbQQb2laikGl1NL1CUeFDnO5WESGSv73pQtNGjdm1ULzYfPm33TutHTRgsvnziTFRIJWjEoZBFgGPmIx8SyNJD4idefWqJ4dr3RpfWn8uJiHj8RsRcT8i73vo9EZirPfnr7DnidB+DC38hTevu3v6BhTvYbsySOdXs2IxjxAOkad2qhVpwR5+p35Y9\/3750Y9NGVyd\/7ntoh5yUYlAq9QqaVSyxqGA5uBCRiIJTGjRs1d3IaM3LEH1u3vHrmlhwbBV1UUAzIxWL8\/KGXi3INsru\/T78+b3BeNj7SVAAVY2fw20KLxosg\/BjR5JFk7NKloZDXjh6lTk0yJTX5wwC\/XTqNJDEm\/uW9a4uGHez5\/okfP7gwsVvo3QsqfkqGVmNQ4xyHawFJCtgkMToCkhc5PzVbq8rWKo3Kt+s46xTS6+tmXJ\/TP9PI9QcaFAsOi8bbJBogJzMzatKkIHDNrBk6g8bCLxahV0qhP6VTyuJ8X3ie2XNl9oDzYzv9Pbu\/z5GNCS\/uQb00ajVQsfJn0TgqaMBXyeyuKkr+UmBQolk749psLJqC4bBofM1FAwjv3fOqWTPqg2bKQF+dWm4hlwIDdJOhVcmFaYLYsNAbJ55snnN6ZPsHq8a+OrguyfeZKCnOoFLolXId7lVV+sCisQ6HReNHEP4Wj1tJPXfOF6GYr79SxkYW0TUQ4BHKOHoqi5G8jkjweHh31bjj\/Z1O\/fRJwLldgnBfeXoyleNg3VTiwKKxDldFk+Hk5E8QARaiycvNfdWxow9Cab+56LRKC6G8OeRiqE\/Mgao4j4c3V4z\/s1v9fZ1rXJrWO\/DcHpUgNUOn1SlkFlUQR2UILBrrcDijCSCIQAvRAApv74DPPgtydBS6XtJpFJYqKXIY1Qq1TBTr5RZy+9zZST23fl71ysTvHq2bnOj5UCsT6+RSvUJmz2fi4CjdwKKxDoczmkCCCMovGiBh1y43hMI\/aS0PCyqJa6iD4hqlQa2UC3ji15G8wBdPti86N6rj7YVD3Lcv4Id6SZNiDWq1UYN7VdwPLBrrcFs0wQWKxpieHvzzz68QSpg3lzpXmD5duCShU0h0SimEQaUQxIXHvbh3b9XYkz9\/dnZEu1d\/rQ6\/e0HOp3pVegVOcDgbWDTW4bBoggkitEDRAOAa788+861ePXHDbyAIC3GUJPQKiUGj0MjFcR4Pri4ds69X033d6l4c1\/ne6gkxLx9R\/SkIpQwfGudYYNFYh8OiCbEiGiDt7NmnCHnXrKmMjSr6EagiBtOrUokF8rSkkIeup3\/pfrBP05M\/fXJ3pXPC8zui6BCol3qlAnepOBNYNNbhtmjCrIgmJyMjdvVqD0fHqFEjFfHROmVJO1AFBHWUijo0btSqJCnxyUGvHm+df2fZqEu\/fPt8x8K0IA9FaiJ0qQxKuUWtxVHhAovGOhwWTRhBRFgRDZCbleXdtasbQklbNhmyDJaaKNUA4xhUcpCOIj05weP+reVj\/p436NKELjcXDA66eUYt5tNn68jxfpwKGlg01uGwaMIJItK6aAC+q6t7rVq+7b6QenuU7s6agoPOcQwapVoikPPib66dfm5Ct33d6u3tVP3a4pEJXk\/kqYlGjZq6hjNfVcZhz4FFYx0OiyaCIKLeKBog+fDhBwgFdO6kk4utXG9Z2iGGFIbej8MPuHXuwcbZp0Z9ufebWpcnfx9174IgKhDvwalYgUVjHW6LJroootGnpLxs2\/YxQgnbtuh0qnxGsG1Qu421qgyDjh8XEf34queR3923L7ww9ut\/ts7jR\/hrxHzIbnQKuUEp18mwd+w3sGisw23RxBRFNIA6ONjdyemfd+qkXb1MXdttUOsgtMU\/l68YoVfJjFq1XinTSAUJ3k\/v\/Tb11sKfLozt5HFgXfj9i\/xwf6WIb1Ar8U4c+wwsGutwWDSRBBFbRNEA4bNm3UHo1XfdZLdvqk+flB87In94T6uy\/V6bggJsQvWqROmht89cmP7Dnq51\/uxW787K8Ykv7wsTYrRyKe5V2Vtg0ViH26KJK7poMiSS4J9\/DkaI3+h9cY0akqpVxU0aK65c0pbgGoUSBvSqMrRqWVpy3MsHXqd3HRnc5mjfpudGEH6ndgojA6BLRSc4eLexXQQWjXW4Khqjk1MUQcQXXTRkXp5w9Og0+nm6SQjF0085FXb9Rgdtvuz2EBcQOgW1z1ivlkOCw48IeLJjya3Fw8+NaOe2ZW682w1xXLhRq8nQaYxqWoj5GgCOsomSiCY0NPTKlSvsAEfhcEYTTRCviy4aTWBgXPXqfPppYD7Qh6Lvap\/o6Cg\/dOCNd+Qrm4AEhzk0rlfKYp7f\/+ePpVdn9r3wy7f\/bJkTcOGvCPc7Gjl9Y0DcqyqPKIpoEhMTnZ2dO3fujBCaO3cuDDLlrVu3HjBgAPOaq3BYNDEEkajTFfUJXolLl0IiE4eQB0LhCIUh9BKkU\/cdxeXzZX8o6o1hUCsyDXp5etLrF\/e8jv2+97t3D\/ZoeGfJsJinN1LDA6kT\/1RyfG\/jsoyiiAbk0qBBA5lMdvToUeZxC6AYUA\/8haSGHYmjcFs0SUUXjfrGDaGjYyhCbgj50s9ShteJ3b7Rprwu+eXdNgqo3FSCo1bIePGvzvxxcmTHk4M+OtzzvWc7FvFDvfUqRYZOp8P3xCmTKKJoQC6enp7wGtKZnTt3gncgwTGlNhyGw6KJfSvR5GVnC7p0gX4TWAaSmkiEkhESbt5oh+lM\/qCv4VSIeQkpoT5uu5fv79uCurfx6vH+p3dKEqOZo+b4enGbRhH30TCWYQDvVBLLABwWTRxBpBRdNIA+KEgyZAivfv20Tz+N6toVXCMcNpQSTbnuDC56UHtw1HKdSs6LCEz0cQ92PXRldv\/zozrcnDsw\/OYpVXoS3R7k0LHCvapSjyKKxkSlsgzATdGkpma0aBHfvj3vrURDkZdHZmbC\/8rw8LCOHV8jJNq+lboLXwVxDRVysUElp458qxUaqUCaGO19eue5sZ0Of1f3zpLhHke3pAZ70b0qrUVTwVGSeCvRHD16tFJZBuCgaNRq0tVVU6dOdMOGKa6ub\/EgXQsUAQF+Dg6J778vu39bW9o3rCmjoK\/eMmqUkpR4jxM7biwZeax\/iyP9mj1eO9Hv7G7QDXNlA+5VlTyKLporV65UNssAXBNNRER2377iunWj6GNHr2vWfD1xojwl5S3zGprcnJzQUaNCEeL92E8rFZbFtd02C+qReGqFUizgRwc\/3LHk0E+fH+zV2HVyd++jm8SxoWphmh6SIBX74HocxQgrosmDNPlfwDINGjQw31Mjk8kQQs7OzuwwR+GUaNTqvAEDRPTxopf0X+j6eCMUMWmSIqfIJ+6Zk6FURgwZEolQ+oplan5qRepA5Q+5SCeXGJQyrUKqkQjUovTQu+dvLBp6YcyXV2f8EHbtKM\/vuUYizNDrdTBOvoaEw3pYEQ0\/4HmWQQdCAZvQB7UpIKkxHdLG59FUMFQqsn9\/MUIhCD1HyAshf\/rMu4gJExTZ2ew4b4vMy8v\/\/UYRCImOHdFn6Cxbb0UNqkulV8lghaQp8a+Ob3m4ftqpnz65s+B\/nvtdUkO8jBr1v9eL4xynSGFFNPLX4TmZxqNHjzK5DHSamAPboBsoBAGBaB48eMCOzVE4JRqlMgf6TfSBaeg3BdABfaiUiROVxctoGBK3bw9EKKnvD6qEWG1F7kAVGEyvSiMVBt4692TbwoO9Gx\/5ofEF569fHt0qTaae+WvUqPDJOG+Mt9oZDIBuXFxcIJGBNIfzlgE4JZqMjJwpU3gIQQjpgG6UsFq1tDNnNOwYxSXexQWklTDkJ51aZtFQORHUXbigx2RQydNjwx\/sWnV9yai\/erx3evgXrw6si3tyTcFLMGo1etylKjzeVjSVDa7tDE5JMbq4iJo3T6MvjUzt3Vtx8KDWYPhvb1zxUIWFeTVuHFK1qvyZW0meOWf\/oVNQN+IC6US\/fBh49cjzXYsvTfru2sw+gRf2JPv+A6kNtc+YuU8F3nNsFlg01uGaaBi8vbWNGnm0auXD5xd330w+RLdu+dWtF9nmE5nXy+I8t7tiBX2qcYZeY9RpJEkx\/pf231835dL4Lud+\/vTR5nlpob7K9GSdUm5UK\/Fjf5nAorEON0XD4xmbN3\/Rrt2rt7hNRBEI+OknD8iUpk3VqWR2ewFUqQf0mKgrGBQSQWzok52LDw\/4aPtn6FC\/j3zO7EnwfCxKijdo1Di7waKxDldFY3ByekkQXqUrGk1kpP\/XX\/sjlH5gH7c7UAUGc5OKpBAf7\/N7b6+euOe7d3d3qnFr+diw6ydUglT2WTFgnEopHSwa63A2o3Fy8iAI79IVDSC8ffsJQkHvNZR6vij151uWY2hkomyxPOf\/B5TopZanDhnU8kyDTi0VpkUGhN2\/5Hd+74Vxna\/N6BN6\/Xiix0OtRKBTUDc\/NlSyW\/9h0ViHw6J5RRA+pS6aLKUydOLE5wjFjBiuEfMr9OnC5qGXibMklgfUdLR9MvOVQ+io03Cou95AIiPjvQ67d8l9x6JzozrcXjLi2Z+rIu9dTI8OBd0YNcpKcrYxFo11OCwab4LwK3XRAJkymV\/Pnl4ODq8XL1KL0jmwswbSGbCMXlrAisBbUF6ga0wB0oE0x6hV8UJ8\/M7s3t+35eZP0KkR7V7sXeV39YRCmEad+8f1o1RYNNbBoikOkidP3KpW9UBI+sxNr1dbNLwKF2CTTInUKKFcAE7JFSuYyBMpIKOByBMpwUQwmsUHLcKgkmcYdKKE6PhXj6+tGLe\/V+MD39W7Mum7iNtnVenJWplEr4IEh5t3GsWisQ6HReNrO9EACTt2vKhePbTfD4qoMG4cgQKVkCKleWSLZUapBHpVICDwji7f\/poCgzpKRT9lHMQUcu\/ibZfJF8Z1vrloyPPdS+Of\/A0jZBr0GVo1x+5tjEVjHa6KJsPJyZ8gAmwnGjIvL\/SXXx4jFDN9GmeugbIUjUQBf3PEcnAQiAaSHWqHS75PWQmjRinnp\/Jjw8LvX3y+d8WZ0V9en93\/wYoxL49sEiXGMY+L4YZxsGisw+GMBkQTaEPRQAfKzc29YUNPJyeR2yN9BTzaDRmHUSJlOkdsF0lMmeU\/0fD48Bc6UEzk0j0pyG7e2IcyD51CAtmNEVIYpVQUH\/76xZ1zE7ru6VLr5JBPL87oG3TznIrPo7pUYJyK3KvCorEOh0UTYGvRAKK7dx8g5NXmE4nvK+osvnzNzJ4D0pMMiRTCKGUjUyL9TzRilTjAixRS6UyGVJIjpizDpDbwQXDNW+kGgjpQpZRSvSq1PN7n2d0NMy9N\/v7At7UvT+gadu2YNClGIxbolQqLBlxRAovGOhzuOgUSRLCtRZOj13t27foQobBJv1Cn8IFrmKgId64xUvqQg2j+k4tFSDSWJXSAa5gMyFDQgaqiBBgn06BTifnBdy\/c3zj70tRet34demfJ8Lh\/bkPGBP0pqkulqEhP\/sWisQ6HRRNEECG2Fg2gi4vz+OqrRwilHDmk\/uep2vO5OixIUxEOe4MmMqTSbIncwiPWA8aHjEYvpYJ6jGcJAjxiUCs1comM9zo9jHp+w1nnry+M6fh00xye7z\/SxFilMJ3qVVWEy6mwaKzDYdEEE0RoGYgGSPjzTzeEYuvUEdevL0ZIWKWK\/PeNlGjsO68BX0BW8v88IlEXlsUwwR7wlsjftt9kJagulUKig14VdVGVNMH76ZMtc470a36oT5Pri4aG\/H1cmZ6SodfBuxZt264Ci8Y6HBZNCEGElY1oFFeuxNesKUAonb45RTJCqfXfVYcG2fktzaHrlE3vc2E9ItFoIiNk\/l6kVGsyi0WAaLLEMlKkAt1YTK20Qq+SZWYYkgI9\/c\/vcZ3Zb2+XWq6\/fPN43aRI99vQmOkrquzxGVVYNNbhsGhCCSK8DESTYzSmjBzJKCaEvkexD\/38OcnCBXZ+Oz4QDVgDOlCsR8SqnDQRdaRJrDKZxSKYg9z0GTeUcUoxr7EIg1qRodOoROnhbrfubpp3YihxfECLW4tHxD6+KooOhj5Xhk5rV4fGsWisw2HRhBFERFnso4mKimnVKhWhIIQ8EYqg71ccgBB\/2mQ7vxIKFAPi+P+HtEExhVoGIlMiBb9AOqOTUpdB2U40bMipQ+MGjULCS0gKevVs35ob8wadHf3l49+mhFw+IIgKkqanGlRKizZfLoFFYx0OiyacIKLKQDTimJjwNm0S6Nugg2ISEYpxoJ7AoPjniZ1f3q2jrzzIkErBOGCN\/GcGWwSMwBwFz6B1A58t9lGntw3m0HimXqtTyhK8nvif2Xl93qBzozu4Tu0Reu049bgYhQx6VbZLcKCzZrC6TxqLxjocFk1E2YgmlyQNbm4pDRsG0q6BrhP0ofi9emr4KRXiTuZMhsKkKhZmMQ\/q\/GC6n6WTiukxIfFRGCUSmyc1FkFdwKk0atUqUVrU46sXJvc41LvxsT6N\/54\/JMbtllqQSu82Lv2TceTC1LTk2CyF0ghGK+jEQiwa63BVNEY6o4kum53BgHLevLQvvuA1bx4NemvePK11a\/nDexXo+ZZG+hJtC7lYBLgmV0zlNUxAKmQxkTIN+sm\/Kokw6uXjl8e3nXLusuurqtfnDvA7uS3F7xn18Aa1qrSuFzfKZVtcf+u0vMPhu38mJUYo0tMylZb9NSwa63A4o4kkiJgyEw2p1+cmJWUHB+fxeGlHjgQjlPr5Z8qosAr0eBZjQWfuMbe\/ovpKYBa6rwS5j0YmhESmrHOZAoPWTYZOw38dFfP8XtjNE3dXTzgzov2T36Z4H9skTYzWy6kuFdWrKoF0DApph6XtPpz\/4bsz6n2xqu3gLX1vvriklgqMcmmmQg45Dkxcp5Bg0ViB26KJLTvRmKFPSQn7\/vsYhASLFtj5WcL0ra1kYBNGKHn\/7hvOEymghH5BRS591wiwjFomhNwHjGMxnXIPvVJq1CiNOg1s7UQf99DbZ6\/PG3C8X7Pzzp0ibp7ih\/oohenQq4JMx0IiRQmDTPrR3A+Xn1v6Mvj5gfv7u7h0qTe9XuM5703ZM+65\/\/2EhDCjTJan0936bfbfWDSFwG3RxJWLaABNQoJ\/kybxNWtKzpy02w4UpCSQp5jv0GUkAgFagQQHdMMkNdQVlWIFlEM6AwGvC7xLll3Ev1dUaaSi0PuXrsz93+4utf769p0bvw73P\/PHa5\/nevpxMRYqsR4gmpbzWqy4sEylkkvkQh4\/6cSDY6vPr2q\/vB0agVrMbLbp8tobLy4fnDfk+tyBWDQFwmHRRBFEvE5XnMf7lwqR8+cHIBTfrJkqMsw+72SeXzSQ4DAljFbAOxB6mRj+Uur599pLGCzhxQdlEXKRUauSC1LjXj31cz18+OcvtrZBR35s\/mTTLH6YD+hDr5DS5\/69+UAVI5rlF5bKlZJ0MY8vTpUqRfA6KMb\/8ouLC07Mf3\/6ezUm1\/ixh8PdeYOxaAqEw6KJJoiEchRNjtEYNWVKKEKpM6ap+Ty77UCBWZiu079BdZqYa7WZYMphNIsPVojQKyTQpYIERyFITQv3D3\/oetdl4qUJ39yYN8jr0AZJXLhGIjBqNdRjfwvfiWMhGlOIZHwoEUjSYnlR9wPvD1749a7lOKMpGG6LJrEcRQNo4uL827YNQyhtnYs+Q2vRBnCUXcipnbU66goGmU4p5ceERj24dH3eINfpvZ9umuW5b2X005sa6DZqNQWeiVOYaJiABAdcI5WL1uya9uOO\/voMLJoC4KpojE5OMQSRVL6iAVJPnPBFKK5dO2VEKJcez1Khg9pzrFUpBLwkH7fbqyft69Fo\/\/cNL4zr\/GDjbF5YoE7OXlGllbI5jnXRMCGSpq\/8YwoWTWFwWDSxBJFc7qIBkvfv9wfXdO+uTk2uQEe7OR+Q40CPSS0RyNOTXl3Yf9K5y6Efmh3o+d7VOQNfP7srjg03qBXM2cZYNCWHw12nOIJIsQfRZMrlnh9\/7IeQ6PIFnU5lUd1xlG\/ooFcll+jpk3HSokOfH954e9mo+6vHXZzwjfeh3wSRgYr05Cy9vuW8D5efx6IpPpwVTfPmIBqePYgGkLi7+7VoEfbBB6IHd3EHym6DupzKoNMqpPK0pKiHl67OH3x9\/v\/+ntHn8cZZTSa8s+ziMplKKpAL+JK0dEmqSTF8CU8g44llqSt2TP5xe3+tUcd+6xgzuCaajAwyPDx77lxJs2axCCUePaqVyfLY98qVyCVL\/kEoqnMnZVw0do09B5XjKKTQb1KL02Up8b4X9p0e81Xb\/1UZ37v2hc0zYoJe8ITJQqlAJOMzopGq0i66hk6Y6NWq89BG43t93yv61EmlwWAXv3D2A9dEc+aMrnbtRIQCEQpD6LWDQ3jnzukvX2ayb5cf+qSkoD59fBBKXreGun1ERbipcCUPulclBuNI05KeXT30eMPMI\/9r\/fsPDa\/9OuTIKRffpCBIcORqgeu12BYtgqCy1W50En3+O0JSxyqilStlBkP5nCxqn3BKNFotOWSICKFghCB7gL8x9C1iwmfOVObawQ+MOizsCUJ+tWsLr1+1z1P4cBQYOoUkS68xaNVpkUHBbn8\/XDVhwuB6Y6e2mu\/Se8OJ\/R+38gfLICRGSI8cdAhlIqSrWlW6Zo04Lw\/nNSycEo1KRfbrJwWzIORB37MBLOMNuhk\/XpGdzY5Tiri4uCCEHjx4wAzKZLIBAwZAiaenJ1OSn4SdO90RCnD6QJOeUuEez1LZQy6m9hlrVHqFNCLM+\/rpLccW9WhDzEXU3YfSEFIgZEAoh45shLS9e0vf2IHS68noaNLDg\/TxIXk80ha11E7gmGhy+vUT0rfuTaDTGWo3DQyOHSvLzi7lPTU7d+5s3bo1aAXkAoNgmc6dOzs7O1sXTbZWGzJ27EtYuGlTlMmv7fwWfDgKC3BNlk4lFqX37AU\/ZtQpmQgpETLSlsmj\/xocHIShodaOQAkE5MqV5Pffk926kd27k337kgcPkkYj+y7H4JRoMjNzNm7kvftuMkJ8hCR0CD\/\/XOTpWcrfXmhoKFgmMTGRcQ1YZi4NlDRo0AAG2fEKQhkY+E\/DhtC1Sz953JCpt6jBOOw56Bv9yQwapUYh1cpF6dHBI3seQwi6TiAaOdV1Qlm0ZeCv3sFBkJCQwX7r+dDpyEWLyMGDybAwUigk+Xzy5k2SIMiTJ9kROAbXdgYDcXHGPn0E1arF1ayZNGiQMiCg9PcEQ87C9JiOHj0KooFEBvIa8AuIBkqYcazAO378nxo1Ar\/pIgvyw0lNhQiDmjrRRiWX8mPDeH5uj\/5Y9vf03qe61dzQpUNNR\/jVSEJIhJCa7j1BXgPGkffsKbLSdfL1JTt2JIOD2UEA+k2LF5PDhpE5XNyJzEHRADyeoUWLZ+3aedj6NhFgFhANk92wRUUjbv36hwiF\/NhPj0\/hs8tgT+RTUse5jTp1xCu38GtH761wPjfii6Pdal8Y\/vmDNRNi754J+Odlw\/rP6XvSp9CuUdAhq1KFd+WKmv2yC2LTJrJHDyqXMScmhrx3D4um4kBfgvCSILxsLRrIa0A0wNuKRhUc\/KxlS\/eaNfm3b+jxESi7Cdoscr1GpZII1cLUMLc7bruW3ZjW\/UTfpie617k+pdvjP5ZJooPUIn5mdhbzVe7dC131l\/SzduJo3SQ7OiasXy\/JySl0t2BeHrlgATlgACmXsyWch7MZje1EA05h+k3Mnpq5c+eCaJgeE\/SerO+gMUfh7f20Tp0XTZoIHt7V6VVaLf3obrt\/kC4ng77uCTIXrYiXmBriFXn37JVfh5\/t\/+HJXu+dH\/rpE5cJgX8fFye\/hm8tvzxAKH\/\/LejTJ5Qgwpo2De3SJc7VVcK+VwggmrlzyYEDSYWCLeE8HM5oPAnCxxaiAae4uLiAZRo0aADGYXpPzLEnkM7OnTuZ0YpCwNCh9xHyG9Bf5eulun1D6eOpiovCrimDgJ4Rfe8I6l58GVqNMPl1yONrr\/5cdmVarxN9G53o1eD67H6v\/lqd4v8c1MN+W1bRaLLS0\/Xe3jK5\/M37BEE0ixeT\/fvjjKaCQ4vGiyB8bSEaZ2fnzp07g2VM+31hEFwDf4GiZzSAIT3d54cfPBDiN3eSNKgvbtZU3LmTOjxYq8an2NgkqMNGKplBo1IrJGoJPy0q2PP8X\/eWjbowpPWJHxqf7lX\/\/rqpYbfPqvnJBq0m15bXrhw4QHbtChWVHWR48oTcsAHvo6k40KLxtpFoIJ0xtwzA7KmBpOZt99TkZWeLp0+Hbj0fIR596AJeSxbMpVoFvkahVIM+bKRWyaWp0SHJ3k+e7Fp+dUafo51qnxrQ\/PbMXl6Hfot99TSrDE9igZoCorl2jR0ElEpy+HBy+nQq3+EeHBaNr41EU4poAwISatcWIBRPn4zhRV83kVyzpurGNa0eH40qUdCHjajTXphbQIR7uoX+ffju0hHnRn5xoIPjqX4fXZzRN+buWV5EUKbRwH4fZQjY5PBh8rvvqJP0Hj0ib98mly+n1OPlxY7AMTgsGj+C8Ldz0URPnpxAn8UMigmhrwSFblT0O7UUt67jO9cUL0AuBrUCOkdKMV\/FTw59evvJziVXx3c61qfR0W61b0757snuVeIof5WAp1VbO\/xcBmRlkVevkkOHkl9+SSnGxYU62m0PF+XZAq6KJsPJyZ8gAuxcNLJjx9LoM9iZa0DhdQB0oAb\/Tyfm413CbxU6hdioUWQY9FqFLMn\/RdTdc5cXDT83oNXxnu9dGEncnT\/A++zuSO9n7Ha3JyC1yc7m5n4Zczic0QQQRKCdi4aUSqWffx5BZzQv6dMwkhASrFymy9BZNCQc+YPqHCmkOqXMqFGJeUlB9129\/lx2f+mwk30b\/dXW8eIv3Z5snssPfiUu2mEjjE3hcEYTSBBB9i4ayJ99fNLbtUuoVSuxYcOgOnXANeLpU3WZerwzuLBgrzaSSxWCVHlKbPj9S+7bF5z7X4ujvRqe6lX\/wW\/Twu6cU\/HidCplRkahlxphyhhuiybY\/kUD5KWn54aGkmKxPCAg4pNPkhs3ll65iO\/CZxEGFZW5ZGYYhQnR6cGeT\/5YdmVa78Nf1zk1qOWdWb3dfp\/uf+eyWvaGM+Uw5QWHRRNMECEVQjTmSB498kco+YMP5K9eUicK52tvlSd0cgn1MCb6+bZGrTrc0y3w8oGnaydcmdD5eK8mp\/p8eHnWjzF3z6XHhhn1+Da99g63RRNa4USTpVaHDhoUiVCq82hNpbzjJ3XYSCU3aFVyYbqc91oUFfD8wPrb8wYc7VH\/aPd3bkzp9vTPNeLoIK0kXa\/T5nHynBMuwmHRhBBEWIUTDWAQCII7d45CSLj7D22l6UCBX6jDRnqtVinjhfrGPbp8ad6QcwNaH+\/x3oXR7R8sHRZw\/k\/7PGyEKQocFk0YQURURNEAaRcu+FSpEtOwodz9iU6vtmiTHAnqmBH0jGQQBo1Cmp7id\/uCx67F9xYNPjuk1f4v61yZ+N2jzfMEYd7i1CR2u2AqLFg0dkrsihVBCCWPGK7mJXLsnBrqVgwapVohlacnS19HRNy\/+GTL3LMDmx\/t2fB074aPN84MuX1Ww082atWZmeX\/+ApMqcBh0YQTRFTFFU2mXO7fvTu4JmnKJG4kNfRhI2VmhkGYEJ0a8MLtj6WXJvc8\/PU7pwd\/fGvOj8+3zA59dE0uFrDrj+EWHBZNRIUWDSC8edO7bt3I999X+HtXxKPdVM9IIaWuNlLKMrSqcE93vwt\/PVox6sr4Tsd7Nz7Zu7nrvEExd8+CdwxaDbvOGI7CVdEY6YwmpkKLBki\/dMnP0THqy46KsMAK8ygo9rCRWiZIkybFCCP9nh9Yd2fegKPf1zva492bU7u7\/\/WbJC5ULxcbDQZ82KiSwOGMJpIDoiHz8ry7dPFCKH3HNr1BY9mk7SpAHGrqsJFOrUgO8op9eOni3MHn\/vfpX+2rnPq5zY25A4Iv74\/Ch40qK9wWTVyFFw1JKvz8\/D\/\/PPi99wRFPl1YL5cYFVKDjXch05caSfQqORNyYar39bMvdiy8M\/fHM4M\/OvBVHddJ3z3aOp\/n\/ViQGGfEVwNUbrBoKgDJBw48RSjso5byYH8rHSijUpatVmUpFRJBSkJyuCA9QSuzyfl+eqXUqFVpFDJJapI4NiTyweXHm2adHeB0tGeD0z+8f31O\/xen\/xTEhGUZDZlZ7B28MZUcDu+jiSKI19wQjZHPDxk+\/BVC8TNnaKVCi6PdkL9kqhSkTh8fG\/os6OGGK2sG7ujXcE79n7YNTE2NBfuYj1ySgPzFoFZkGvTChOhkX3f3XUsvTOp+qEMt8MvFX779Z\/PsSPfbUn4qu9AYjBkczmiiCSJBp+PIfYTANe7vvutTrVrqkUN6rcKokGUo5czfmJigk48OzTw+5YtVbd+f917zRc0Hbx+06e+NH8396LeLq2AEC18UPZj7MEC3iDqnTq1Ij4sMvnHy2eZZl507nujT+ETPZn8vHBJ582R6hL9cKsF7dTFW4LBoYggiiTOiAVJPn3ZzcPCuU0cWHpTMjw+O8Vp1cmmvrd83WNCg0YL3O67tMPvYzMvPLsTwIlPSEzVq5dEHh+tMqrPr2tYczVufhmOknpqmUcslspQ4YaT\/s79cbs358USvBid+aPS3c8cHW+aHud02quSZmZn4sBGmKHC468Q10eRmZUX\/+qsHQs8H9Oq1rGPNWbU+XdFm0M6Be+7+cc\/ztlQhFsn4IilfKE0XSNLSxTylWjZs+7DP5rcR8ROL2IHSK2VGrUqvVsb7e8Q9OP9ow\/TLYzoc7lb77JBPbi38KeTKgWif5+zSYDBvA4czmjiCSOGSaABdfLzH558\/QOjE+B9cw+74RnoJRGlypUQsF4BZLAJ04x\/t02t9z3F7x4j4SQZFAQ\/5pg4bUSfUyaGLpJGJol489D6y8e6CQScGtjjSufbVX7pB8pLq5y5JeZ2RYadXA+zcuRMh5OLiwgyGhoaaD2LsBC6Lpl07rokGEFy\/\/k+dOoFftBN4eYhVYr4k1cIv5qFQSW++uo5+Rrc8r5Barckv1GEjjVKvVcv5POpqoweX766benGQ08m+jc8MbHFrwWDv8\/sE8RE5WRlZ2dnsjO2SK1eutG7dGswCf5kSRjSdO3dmBjF2AjdF8+yZoWXL+CZNUtLSuHDUyYLUkycfIfSqY\/t0foJEnS5RpkIIpJaWgRBI0xLT4mcemP7t2m+CIj2gA2VQyzMNOn5CzOtXj32PrL8xb9Cpvo2P9WpwZXL3Z1vnRT+\/J05NZmdj98hkMvAL86RQwPToPng9d+5c5jXGTuCaaJKScmfOVLVsmVC7dhRCCd2788+fN5Thc8HKAiOf\/\/KLL9wQ8tu9\/8DRiIOHY06ciguJTBLKeQLZ\/xMN5DsihShNnNZ2ITFk+yBFUkLQtRNuG6ddGNX+eJ9GJ75vdO3XYWHXj4tiQlRyWW5F260LyQvzEPQBAwZYiAYyHeY1xk7glGhycsh58+QIgWK8EIIUOp5+fkncjh1cu2bPGBVy\/9NO\/dEah6qvq1ZNqVYtvXbt9OEjE2ISksUKqjMlVAiEamm6OJ0XF5oS\/mrZoh97dEPbf6x\/+ocmV8d97bZjUcQ\/d4waVXZ2NgcOGzGi8fT0hNegngYNGrzVg4kxZQCnRKNS5fXrJ0IoCCH4vfelH8r2EqHwceMU9r2r4a1J5Wf1+PIV\/YAWWF8lQlqENPCjPmxESlhsmlQjCfF6GnHzxNEtE9dOazfq59pj53y+Ycto99uHX\/t65HLuGWUuLi4gGia7gU4T7jfZIdwTjezfRAaSGm\/6uWyJ48YpuSQayEFWrkxAKAKhdIQUCOkRykIoEyFj1SqipaP2nFjT55dxTgOH1p60otuGwwtexL2MFSUauHsTKebAE4gGEhl4AV0q9g2M3cAp0Wg02T\/9lEo\/Mh\/+ptCRVqWKYNkyBZd+xXk8Q6tWfgjFICSmExlQTA5CuQhlg3HqEDtG7vzh2P0DkbzojNzsbK4+Y9UMk2jghbOzM1uKsSc4JZrc3Dxvb+Xw4fA7D6KBPoXE0VG0ZImSYwe5Y2I0tWp50P0mIUJqM9FAXqMe0F+mkHOro\/gmrly5AqKBHlODBg1wOmOfcEo0DEpl9qVL6vfeC\/3ww\/BHj4waDdfOkU9PN7RtCxlNJJ27MV0ncE0endHIli5VsONVGjw9PUE0AD5Pz27hoGgAHi+jefOAdu3s\/tnbxUKvzxk9OhQhcE0indQoHZD6O\/TgM+TpWE1y5kwlFQ1zTg1bhLEzOCsaJ6dQggjnpGiAJ09kDRpA6wpBKAlcUx9FuqJOT9EnM3s+SUmvdLeAefDgAYiGOeqEsU84LJoILtzKs3Bu3hR26BCAUCDdh4qfhaaBclJ\/HMC+XZkYMGAAPqRt53BYNJy6H02BQB\/qxIm06dOjFy5NfnLaJ\/qbr+PeeUddyU6KPXr0aOfOnXGnyc7hpmhSUoxNm8Z89lmKVsv9g7smlCEh3tWrx77\/vvaff9girsNcVIktY\/9wUzQaTfbmzdI\/\/1RnZ1em2zLl5YWOHeuHUPKPP+Zx9\/Q8SGEQfX22s7MzzmUqCtwUTaUlS60OGTIkACHh77+zRZzjAX01EyQyO3fuxNc0VRSwaLiG6NEjj3r1gmvWVN68yRZhMOUNFg0HSdq92xOh2H79sqRStgiDKVewaDhIXm5u4NChlGt+\/jkvh7MH+DEVCCwaeyc7m3z2jNy\/n9y7l9y3jzx3joyKYt+ygsLb+1nTpq8cHLQ+PmwRBlN+YNHYO3o9OXUq2awZ+f33ZM+e5Fdfke3bk7\/\/TiredKWB6M4dzwYNAj\/9VBsczBZhMOUEFo29A6KZOJGcMoU0Gsm8PDI3l7x5k\/zyS3LJEuqOgtbIywsYPfohQom\/\/sqWYDDlBBaNvQOimTSJnDaNNH+M9eXL5Ndfk0FB7GBhaKOivL\/++kX9+sLz59kiDKY8wKKxdwoUTUIC2aMHuXs3O2gF8ePHdxF60bChCrQEGVF29psSIQym9MGisXcKFI1GQ44aRW7YwA5aIVulCps69b6DQ1Tnzpm\/\/KIbPVq7dm2ewcC+jcGUCVg09k6BooHUZObMIokGMCYmxrZpk0bf9VOFkLRaNemqVdnYNZgyBIvG3ilQNDIZ+fPP5MaN7KB1dNevC+vUkdFPS6AelYBQaufOGQIB+zYGY3uwaOydAkUTGUl+8w155Ag7aIUcnS555MhYhAQIyek7DINu0h0cdG5u7BgYjO3BorF3QDQTJ5LTp\/8nmpwccutWsmtXapfwG4HMJaRrV+qhM\/QzE6DrBK6BF\/zffqtMF7ZjyhksGntHpyPHjycHDSJ5PKrH5OVFrlhBWabo95yRPHjg6+QUQj99BvpNIBpIbfjff4+vTsCUGVg09k52Nrl5M9mhA3U8u2dPsndvcvFi0teXfbeISN3dAzt0ANek0l0nyGv4tWrpX79m38ZgbAwWTQVAoSBDQsjgYCpiY6mTg4uBkceLGT8+1MEhnRaNpEoV+cmT7HsYjI3BoqlE5BiNqXv2hNetK6AfByUZNox9A4OxMVg0lQ61n1\/q8OFihNSdO+fqdGwpBmNLsGgqI1kKhXT9ekmTJtmenmwRBmNLsGgqKXkkaXjwQH\/jBjuMwdgSLBoMBmNzsGgwGIzNwaLBYDA2B4sGg8HYHCwaDAZjc7BoMBiMzcGiwWAwNgeLBoPB2BwsGgwGY3OwaDAYjM3BosFgMDYHiwaDwdgcLBoMBmNzsGgwGIzNwaLBYDA2B4sGg8HYHCwaDAZjY0jy\/wDtqRWYeU4MkQAAAABJRU5ErkJggg==)\nCreating new variable to store the value","29d5035b":"### Inertial Sensor Data","6b7e9706":"***The number of paramters can be significantly reduced by taking each value as a vector and getting its magnitude. All the trends have been shown. The next section has the same for right side. ***","2d0ffe44":"This file consists of data classes- 3 different types of roads(dirt,cobblestone and asphalt), 2 road surafces (paved and unpaved), 3 types of road conditions for both left and right side(good, bad, regular) and information about speed bumps(not present, present on asphalt, present on cobblestone). All this information is present in one-hot encoded form.","ca728457":"Exactly same parameters as previous dataset and no null values. ","959bd344":"\n\n---\n\n","7996942a":"The next three columns hdop, vdop and pdop are horizontal or vertical or position dilution of precision values. They describe current strength of satellite. The values can range from 1-10 and lesser values are preferred. ","37e29cfe":"So, 25 null values in Bearing column means that the speed was zero at that time. However, GPS coordinates were not same throughout, thus, the vehicle has non zero veloity.","c494b108":"For this notebook, I will be using only one PVS dataset with the following files:\n\n**dataset_labels.csv,dataset_gps.csv, dataset_mpu_left.csv, dataset_mpu_right.csv**\n\n","fc85fe85":"Result: No significant difference can be seen between cluster 0 and 2 in terms of acceleration, only speed is a parameter that is contrasted because speed increased as the journey progressed. \nSo, data has clearly 3 clusters:\n\n- Cluster 1= high speed, low gyrometer reading\n- Cluster 0= Low speed, low gyrometer reading, low magnetometer reading\n- Cluster 2= Low speed, high gyrometer and magnetometer reading","53ffa850":"Exploring each column one by one ","813db0e1":"**Significant differences can be seen between readings of the MPU on two sides.**","83343c2c":"The source consists of PVS datasets for 3 cars driven by 3 different drivers in 3 different situations. i.e. total 9 datasets. \n\nEach dataset consists of following 14 files:\n\n\n\n*   dataset_gps.csv- GPS data, including latitude, longitude, altitude, speed, accuracy, etc\n*   dataset_gps_mpu_left.csv- Inertial sensor data on the left side of the vehicle, combined with GPS data.\n*   dataset_gps_mpu_right.csv- Inertial sensor data on the right side of the vehicle, combined with GPS data.\n*   dataset_labels.csv- Data classes for each sample data in the dataset (for both sides).\n*   dataset_mpu_left.csv- Inertial sensor data on the left side of the vehicle.\n*   dataset_mpu_right.csv- Inertial sensor data on the right side of the vehicle.\n*   dataset_settings_left.csv- Settings of the inertial sensors placed on the left side of the vehicle. Includes measurement range, resolution, etc.\n*   dataset_settings_right.csv- Settings of the inertial sensors placed on the right side of the vehicle. Includes measurement range, resolution, etc.\n*   map.html- Interactive maps with data classes.\n*   video_dataset_left.mp4- Video with data plotted from inertial sensors and speed, sampled on the left side of the vehicle.\n*   video_dataset_right.mp4- Video with data plotted from inertial sensors and speed, sampled on the right side of the vehicle.\n*   video_environment.mp4- External environment video.\n*   video_environment_dataset_left.mp4- Videos side by side from video_environment.mp4 and video_dataset_left.mp4\n*   video_environment_dataset_right.mp4- Videos side by side from video_environment.mp4 and video_dataset_right.mp4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","b7e9191f":"**In the gps dataset, timestamp is the index and the important features are:** \n\nlatitude, longitude\/elevation, speed\/distance. Others define technicalities of the GPS system. \n\n","4e963009":"From the GPS MPU dataset for left and right side, we have a total of 18 acceleration values, 18 gyrometer values and 12 magnetomter values. \n\n\n* Sum absolute values of all 18 values and combine in a single column (divided by number of axis (9)). \n*   Taking average of both left and right side values\n\n","dee471ad":"The new road type dataset will have road type, condition,quality left, quality right, bumps, Quality (avergae of left and right)","05db43d4":"From the GPS dataset, we will take timestamp, latitude, longitude and speed","a95d85b2":"Insights\n\n- Acceleration at the 3 positions (dashboard, above and below suspension) follow the same trend. \n- Temperature recorded at the dashboard is approximately average of that recorded above and below the suspension\n- Acceleration suffers a change when the road condition changes\n- During a single ride, on clustering the data, we see normal behaviour of the vehicle as clusters are distinct \n- Vehicle has highest speed on asphalt road but highest acceleration on cobblestone road. Obvioulsly, speed is greater on paved road\n- Higher speeds on higher quality road","2adaf9cf":"### Data labels","747fc764":"**From the graphs, this can be analysed that the road was mostly paved and cobblestone and asphalt but rarely dirt road. There were hardly any speed bumps on the road. On both the sides (left and right), the road condition was same (mosty regular)**","ba4df950":"We are provided with four data sets having mpu data (two for each side). The MPU-9250 is installed on the dashboard, above suspesion and below suspension on both right and left side. 2 datasets purely have data collected by mpu and 2 have data combined with GPS data(latitude longitude, speed). We will explore the mpu_left and mpu_right datasets. Both of them have the same parameters but different values","7b0b3b1e":"There are no missing values. For each parameter(accelerometer, magnetometer and gyrometer reading- dashboard, above suspension\/below suspension\/both) , values at x,y and z coordinates are given. The temperature at the 3 positions is also sensed. ","d8cb0314":"### GPS Data","732d8086":"Aim: Explore the Passive Vehicular Sensors Datasets [ from Kaggle](https:\/\/www.kaggle.com\/jefmenegazzo\/pvs-passive-vehicular-sensors-datasets)","0d4dcd6e":"On decoding the timestamps, we get to know that data is collected every 1 to 5 seconds for 24:22.5 minutes. The last column 'elpased_time_seconds' show the time interval between every two records. ","7cfe7dc9":"# More Data Exploration"}}