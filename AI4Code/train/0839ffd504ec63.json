{"cell_type":{"fcf95f58":"code","a7ec8bb6":"code","b83ffaf6":"code","659b5382":"code","22dcc116":"code","3037b595":"code","866203ab":"code","518144ea":"code","52a66638":"code","f0365679":"code","a04dd4b8":"code","da690fbd":"code","22cf5539":"code","425c82de":"code","9998c59d":"code","2ce82898":"code","e273ed62":"code","cdddb843":"code","fa295a3f":"code","d7bf2e6e":"code","6272538c":"markdown","ce367098":"markdown","6169aa8f":"markdown","95c3cb61":"markdown","41fff212":"markdown","ab70f90c":"markdown"},"source":{"fcf95f58":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F","a7ec8bb6":"data = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")","b83ffaf6":"normal_data = data[data[\"Class\"] == 0].drop([\"Class\"], axis=1)\nanormal_data = data[data[\"Class\"] == 1].drop([\"Class\"], axis=1)","659b5382":"X_train = normal_data.values[0:283823]\nX_normal_test = normal_data.values[283823:]\nX_anormal_test = anormal_data.values","22dcc116":"# \u6a19\u6e96\u5316\nsc = StandardScaler()\nX_train_std = sc.fit_transform(X_train)","3037b595":"class Model(nn.Module):\n    \n    def __init__(self):\n        super(Model, self).__init__()\n        self.fc1 = nn.Linear(30, 10)\n        self.fc2 = nn.Linear(10, 30)\n    \n    def forward(self, x):\n        x = self.fc1(x)\n        x = F.relu(x)\n        x = self.fc2(x)\n        return x","866203ab":"class Mydatasets(torch.utils.data.Dataset):\n    def __init__(self, data):\n\n        self.data = data\n\n        self.datanum = len(self.data)\n\n    def __len__(self):\n        return self.datanum\n\n    def __getitem__(self, idx):\n        out_data = self.data[idx]\n        \n        return out_data","518144ea":"trainset = Mydatasets(X_train_std)","52a66638":"trainloader = torch.utils.data.DataLoader(trainset, batch_size = 100, shuffle = True, num_workers = 2)","f0365679":"model = Model()","a04dd4b8":"learning_rate = 0.0001\nepochs = 10","da690fbd":"optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)\ncriterion = nn.SmoothL1Loss()","22cf5539":"for epoch in range(epochs):\n    train_loss = 0\n    model.train()\n    model.double()\n    for data in trainloader:\n        \n        res = model(data)\n        \n        loss = criterion(res, data)\n        \n        train_loss += loss.item()\n        \n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n    print(train_loss\/len(trainloader))","425c82de":"X_normal_test_pred = model(torch.Tensor(sc.transform(X_normal_test)).double())\nX_anormal_test_pred = model(torch.Tensor(sc.transform(X_anormal_test)).double())","9998c59d":"normal_diff = X_normal_test_pred.detach().numpy() - X_normal_test\nanormal_diff = X_anormal_test_pred.detach().numpy() - X_anormal_test","2ce82898":"X = np.array(list(normal_diff) + list(anormal_diff))\ny = [0] * 492 + [1] * 492","e273ed62":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","cdddb843":"clf = SVC(gamma=0.01)\nclf.fit(X_train, y_train)","fa295a3f":"y_pred = clf.predict(X_test)","d7bf2e6e":"accuracy_score(y_test, y_pred)","6272538c":"# Load Data","ce367098":"# Data Preparation","6169aa8f":"# Test","95c3cb61":"# Import Library","41fff212":"# Train","ab70f90c":"> # Pytroch Deep Learning Model"}}