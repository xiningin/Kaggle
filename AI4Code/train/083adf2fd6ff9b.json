{"cell_type":{"17928ccc":"code","df5b4b94":"code","972bfdc5":"code","20d913c5":"code","64079c4a":"code","c9ae1837":"code","499e7014":"code","8bba0721":"markdown","e5c07bf0":"markdown","1c80d7f1":"markdown","c5903e20":"markdown"},"source":{"17928ccc":"import os,cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 10, 10\n\nfrom sklearn.utils import shuffle\nimport keras\n\nfrom keras.utils import np_utils\n\nfrom keras import backend as K\n\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Dropout, Activation, Flatten\nfrom keras.layers.convolutional import Convolution2D, MaxPooling2D\nfrom keras.optimizers import SGD,RMSprop,adam\nfrom keras.preprocessing.image import ImageDataGenerator\nimport pandas as pd\n","df5b4b94":"from keras.applications import VGG19\n#Load the VGG model\nvgg_conv = VGG19(weights=None, include_top=False, input_shape=(64, 64,3))","972bfdc5":"def vgg_custom():\n    model = Sequential()\n    #add vgg conv model\n    model.add(vgg_conv)\n    \n    #add new layers\n    model.add(Flatten())\n    model.add(Dense(1,  kernel_initializer='normal'))\n    #model.compile(loss='mean_squared_error', optimizer=sgd())\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    \n    return model","20d913c5":"classifier = vgg_custom()\nclassifier.summary()","64079c4a":"#Data augmentation\nfrom keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255, \n                                   shear_range = 0.2, \n                                   zoom_range = 0.2, \n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntraining_set = train_datagen.flow_from_directory('..\/input\/training_set', \n                                                    target_size = (64, 64), \n                                                    batch_size = 32,\n                                                   class_mode = 'binary')\ntest_set = test_datagen.flow_from_directory('..\/input\/test_set',\n                                                target_size = (64, 64),\n                                                 batch_size = 32, \n                                                 class_mode = 'binary')\n\n","c9ae1837":"hist = classifier.fit_generator(training_set, \n                         samples_per_epoch = 521, \n                        nb_epoch = 13, \n                        validation_data = test_set, \n                        nb_val_samples = 64)","499e7014":"# visualizing losses and accuracy\n# %matplotlib inline\n\ntrain_loss=hist.history['loss']\nval_loss=hist.history['val_loss']\n#train_acc=hist.history['acc']\n#val_acc=hist.history['val_acc']\n\nepochs = range(len(val_loss))\n\nplt.plot(epochs,train_loss,'r-o', label='train_loss')\nplt.plot(epochs,val_loss,'b', label='val_loss')\nplt.title('train_loss vs val_loss')\n#plt.plot(epochs,train_loss,'r-o', label='train_acc')\n#plt.plot(epochs,val_loss,'b', label='val_acc')\n#plt.title('train_acc vs val_acc')\nplt.title('train_loss vs val_loss')\nplt.legend()\nplt.figure()\n#plt.savefig('train_test_acc.png')\nplt.savefig('train_test.png')","8bba0721":"VGG MODEL","e5c07bf0":"Testing model","1c80d7f1":"## 3. Fit the model on images, image preprocessing\nData augmentation prevents overfitting, by generating more samples of the images through flipping, rotating, distorting, etc. Keras has built-in Image Augmentation function. To learn more about this function, refer to this [guide](https:\/\/keras.io\/preprocessing\/image\/). ","c5903e20":"Import LIbraries"}}