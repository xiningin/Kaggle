{"cell_type":{"f0032e1f":"code","9a74ca76":"code","29e5d8d4":"code","78c31dc7":"code","b19a5efa":"code","36d3d5b5":"code","de001ab8":"code","ed24f0d4":"markdown","23b720f9":"markdown","1d7e3a57":"markdown","4dc9a7a0":"markdown","1e040833":"markdown","beb471ce":"markdown"},"source":{"f0032e1f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a74ca76":"from sklearn import preprocessing\nfrom sklearn.naive_bayes import GaussianNB\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import plot_confusion_matrix\nimport numpy as np\nimport matplotlib.pyplot as plt","29e5d8d4":"data_train = pd.read_csv(\"\/kaggle\/input\/main-tenis\/play_tennis_train.csv\")\ndata_test = pd.read_csv(\"\/kaggle\/input\/main-tenis\/play_tennis_test.csv\")","78c31dc7":"le = preprocessing.LabelEncoder() # instance LabelEncoder dg object le\n# mengubah data teks dari file train & test menjadi data numeric\n# encode data train\ndata_train_df = pd.DataFrame(data_train)\ndata_train_df_encoded = data_train_df.apply(le.fit_transform)\n\nprint(data_train_df_encoded.head())\n\n#encode data test\ndata_test_df = pd.DataFrame(data_test)\ndata_test_df_encoded = data_test_df.apply(le.fit_transform)","b19a5efa":"# x_train adalah data fitur (outlock, temp, humid, wind) \n# semua kolom diambil kecuali kolom play (isinya output class) \nx_train = data_train_df_encoded.drop(['play'],axis=1)\ny_train = data_train_df_encoded['play']\n# x adalah data fitur, sedangkan y adalah data output class\n# x bentuknya matriks multidimensi (2D karena > 1 kolom)\n# skalar, vector, matriks, dan tensor\n# skalar = 1 atau 2 atau 3 (haya satuan, tidak punya arah\/dimensi)\n# vector = [1,2,3,4,5] (1 dimensi)\n# matriks = [[1,2],[2,3],[3,4]] (>= 2D)\n# tensor = >= 3D\nx_test = data_test_df_encoded.drop(['play'],axis=1)\ny_test = data_test_df_encoded['play']","36d3d5b5":"model = GaussianNB()\nnbtrain = model.fit(x_train, y_train)\n\ny_pred = nbtrain.predict(x_test)\nprint(\"Accuracy : \", metrics.accuracy_score(y_test, y_pred))","de001ab8":"disp = plot_confusion_matrix(nbtrain, x_test, y_test,\n                                 display_labels=['No','Yes'],\n                                 cmap=plt.cm.Blues)\ndisp.ax_.set_title('Confusion Matrix')\n\nprint('Confusion Matrix')\nprint(disp.confusion_matrix)\n\nplt.show()\n# confusion_matrix(y_test, y_pred, labels=[0, 1])","ed24f0d4":"Encoding data from text into number","23b720f9":"In this classification, we use GaussianNB model for prediction","1d7e3a57":"Splitting dataset into test and train variables","4dc9a7a0":"Display confusion matrix results","1e040833":"Read all data from both training and testing dataset","beb471ce":"#### Import all necessery libraries ####\nscikit-learn = sklearn"}}