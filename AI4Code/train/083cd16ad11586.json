{"cell_type":{"112e59f3":"code","dff326cb":"code","4b977d7a":"code","9eaf588e":"code","b95c6dbd":"code","7f2b735d":"code","9afd084d":"code","d9c0cc47":"code","76081b49":"code","99540eaf":"code","e3b440bb":"code","1f1e8ac0":"code","0a30b7c7":"code","547e8b68":"code","05ab28df":"code","af7bb4ed":"code","b08c6580":"code","baa062a9":"code","420a5937":"code","a398b9f3":"code","6d0fdd4f":"code","b6bf3c77":"code","31a5a4c5":"code","ce1c071b":"code","1ac1f6d5":"code","1247a8b8":"code","b3f4db2a":"code","ed030f05":"code","a6c9f88d":"code","804c7bfb":"code","ccb8810b":"code","c7c7acd8":"code","e8cba2f0":"code","0d2f1f96":"code","63e8e208":"code","0607d44e":"code","dafd00db":"markdown","d20cf188":"markdown","dad4c2a7":"markdown","f8a73e7d":"markdown","702d5897":"markdown","2ccc91fb":"markdown","c9d843e3":"markdown","c2d4786c":"markdown","0631233b":"markdown","bd5c0cb7":"markdown","72ff79bd":"markdown","81360161":"markdown","b2d52dac":"markdown","0e3d8766":"markdown","54a93466":"markdown","03017751":"markdown","9a829e64":"markdown","1c8a6bbf":"markdown","3adbc447":"markdown"},"source":{"112e59f3":"from datetime import datetime\nimport numpy as np\nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as pyplot","dff326cb":"# changeme\nSTART_DATE='05-mar-2020'","4b977d7a":"MEAN_INCUBATION_TIME=6 #days\n\n# see https:\/\/www.bundesregierung.de\/breg-de\/themen\/coronavirus\/coronavirus-1725960\nEVENTS = {\n    'ESCALATION_EVENTS_LESS_1000_DATE':'10-mar-2020',    \n    'BORDERS_CLOSED_DATE':'15-mar-2020',\n    'BAR_CLUB_GYM_SHUTDOWN_DATE':'16-mar-2020',\n    'KONTAKT_SPERRE_DATE':'23-mar-2020',\n    'OSTERN': '12-apr-2020',\n    'LADEN_OEFFNUNG': '20-apr-2020',\n    'RUN_ON_IKEA_NRW': '02-may-2020',\n    'GYM_REOPENING_NRW': '11-may-2020',\n    'LOCKDOWN_LIGHT': '02-nov-2020',\n    'LOCKDOWN_2_1': '10-dec-2020',\n    'LOCKDOWN_2_2': '05-jan-2021'\n}\n\nEVENT_TIMES = [pd.to_datetime(t) for t in EVENTS.values()]","9eaf588e":"fed_inhabitants = pd.read_csv('..\/input\/de-stats\/german-federation-inhabitants.csv', thousands='.', decimal=',')\nfed_inhabitants_2018 = fed_inhabitants[['Bundesland','2018']].rename(columns={'2018':'inhabitants_2018'})","b95c6dbd":"CURRENT_DATA_URL='https:\/\/funkeinteraktiv.b-cdn.net\/current.v4.csv'\nHISTORY_DATA_URL='https:\/\/funkeinteraktiv.b-cdn.net\/history.light.v4.csv'","7f2b735d":"df = pd.read_csv(HISTORY_DATA_URL, usecols=['parent', 'label', 'label_parent', 'population', 'date', 'updated', 'confirmed',\n       'recovered', 'deaths'])\ndf['date'] = pd.to_datetime(df['date'], format=\"%Y%m%d\")\n\nLATEST_DATE = df.date.max() - pd.Timedelta(days=1) # current day may not have been reported\n\nhistory_df = df[(df.date>pd.to_datetime(START_DATE)) & (df.date<=LATEST_DATE)]","9afd084d":"LATEST_DATE","d9c0cc47":"de_history_df = history_df.loc[history_df.label_parent=='Deutschland',['label','date','recovered','confirmed','deaths']]","76081b49":"de_history_df['active'] = de_history_df['confirmed'] - (de_history_df['recovered'] + de_history_df['deaths'])","99540eaf":"de_by_date = de_history_df.groupby('date').sum()","e3b440bb":"def plot_events_x(ax, ypos):\n    for event, event_date in EVENTS.items():\n        ax.axvline(event_date, color=\"blue\", linestyle=\"--\")\n        pyplot.text(event_date,ypos,event,rotation=90)\n        \ndef earliest_effect_date (event_date: str):\n    return pd.to_datetime(event_date) + pd.Timedelta(days=MEAN_INCUBATION_TIME)        \n        \ndef plot_events(ax, ypos):\n    i = 1\n    for event, event_date in EVENTS.items():\n        ax.axvline(event_date, color=\"blue\", linestyle=\"--\")        \n        pyplot.text(event_date,ypos,\"({}) {}\".format(i,event),rotation=90, color='blue')\n\n        earliest_effect = earliest_effect_date(event_date)\n        if earliest_effect < LATEST_DATE:\n            ax.axvline(earliest_effect, color=\"red\", linestyle=\"--\")     \n            if earliest_effect in EVENT_TIMES:\n                text = \"({})\".format(i)\n                y = 0\n            else:              \n                text = \"({}) {}\".format(i,event)\n                y = ypos\n            pyplot.text(earliest_effect,y,text,rotation=90, color='red') \n        i += 1","1f1e8ac0":"ax=de_by_date.plot(figsize=(18,5), title='Corona in Germany')\nplot_events(ax, de_by_date.confirmed.max())\npyplot.grid(True);","0a30b7c7":"deaths_by_date = de_by_date[['deaths']]\n\nax=deaths_by_date.plot(figsize=(18,5), title='Corona in Germany - Deaths')\nplot_events(ax, deaths_by_date.deaths.max())\npyplot.grid(True);","547e8b68":"def abs_growth_from(df_by_date):\n    return df_by_date.diff().fillna(0)\n\ndef plot_abs_growth(df_abs_growth,details=\"\", max_y=None):\n    max_y = max_y if max_y else df_abs_growth.max().max()\n    ax = df_abs_growth.plot(figsize=(18,4), title='Absolute Growth (1st derivate):'+details, ylim=(0,max_y))\n    pyplot.ylabel('Delta to day before');\n    pyplot.grid(True)\n    return ax\n    \ndef plot_abs_growth_confirmed(df_abs_growth,details=\"\"):\n    df=df_abs_growth[['confirmed']]  \n    df['confirmed_mean_7days'] = df.rolling(7).mean()  \n    ax = df.plot(figsize=(18,4), title='Absolute Growth (1st derivate):'+details)\n    pyplot.ylabel('Delta to day before');\n    pyplot.grid(True)    \n    return ax","05ab28df":"abs_growth_de_by_date = abs_growth_from(de_by_date)\nax = plot_abs_growth(abs_growth_de_by_date)\nplot_events(ax, abs_growth_de_by_date.max().max()-10)","af7bb4ed":"abs_growth_deaths_by_date = abs_growth_de_by_date[['deaths']]\nax = plot_abs_growth(abs_growth_deaths_by_date, 'Deaths')\nplot_events(ax, abs_growth_deaths_by_date.max().max()-10)","b08c6580":"def growth_factor_from(df,shift):\n    return (df\/ df.shift(shift))\n\ndef plot_growth_factor(growth_factor_df, max_growth=10, details=\"\"):\n    ax = growth_factor_df.plot(figsize=(18,6), marker='+', markersize=12, linestyle=':', title='Growth Factor' + details, ylim=(0,max_growth))\n    ax.axhline(y=1, color='red', linestyle='--')\n    pyplot.grid(True)\n    pyplot.ylabel('Delta today\/Delta day before');\n    return ax     ","baa062a9":"abs_growth_s = abs_growth_from(de_by_date)['confirmed']\nabs_growth = pd.DataFrame({'confirmed':abs_growth_s, 'confirmed_mean_7days' : abs_growth_s.rolling(7).mean()})\n\ngrowth_factors = growth_factor_from(abs_growth,shift=1)\nmax_growth = growth_factors[growth_factors<10].max().max()","420a5937":"ax = plot_growth_factor(growth_factors,max_growth, \" (gf1)\")\nplot_events(ax, max_growth)","a398b9f3":"abs_growth = pd.DataFrame({'Reff' : abs_growth_s.rolling(4).mean()})\n\ngrowth_factors = growth_factor_from(abs_growth,shift=4)\nmax_growth = 3","6d0fdd4f":"ax = plot_growth_factor(growth_factors,max_growth, \" (gf4==Reff)\")\nplot_events(ax, max_growth)","b6bf3c77":"de_fed_by_date_all = de_history_df.groupby(['date','label']).sum().reset_index()\n#feds = list(de_fed_by_date_all.label.unique())\nfeds = ['Baden-W\u00fcrttemberg',\n 'Bayern',\n 'Berlin',\n 'Brandenburg',\n 'Bremen',\n 'Hamburg',\n 'Hessen',\n 'Mecklenburg-Vorpommern',\n 'Niedersachsen',\n 'Nordrhein-Westfalen',\n 'Rheinland-Pfalz',\n 'Saarland',\n 'Sachsen',\n 'Sachsen-Anhalt',\n 'Schleswig-Holstein',\n 'Th\u00fcringen']\n\nde_fed_by_date = de_fed_by_date_all[de_fed_by_date_all.label.isin(feds)]","31a5a4c5":"de_fed_by_date.set_index(['date']).groupby('label').last().sort_values(by='active', ascending=False)","ce1c071b":"de_fed_by_date.set_index(['date']).groupby('label')['confirmed'].plot(figsize=(18,7), legend=True, title='Absolute Confirmed by Federation State')\nplot_events(pyplot.gca(),9000)\npyplot.grid(True);","1ac1f6d5":"for fed in ['Berlin']: # feds:\n    df = de_fed_by_date.loc[de_fed_by_date.label==fed].set_index('date')\n    ax = df.plot(figsize=(18,5), title=fed)\n    plot_events(ax,df.confirmed.max())\n    pyplot.grid(True)","1247a8b8":"PER_INHABITANTS = 100000","b3f4db2a":"de_fed_by_date_w_inhabitants = pd.merge(de_fed_by_date.rename ({\"label\":\"Bundesland\"}, axis=1), fed_inhabitants_2018, on='Bundesland', how='inner').set_index(['date','Bundesland'])","ed030f05":"active_per_inhabitants = (de_fed_by_date_w_inhabitants['active']*PER_INHABITANTS)\/de_fed_by_date_w_inhabitants['inhabitants_2018']\n\nactive_per_inhabitants.to_frame().reset_index().set_index(['date']).groupby('Bundesland')[0].plot(figsize=(18,7), legend=True, title='Active Cases per {} inhabitants by Federation State'.format(PER_INHABITANTS))\nplot_events(pyplot.gca(),active_per_inhabitants.max())\npyplot.grid(True);","a6c9f88d":"confirmed_df_diff = de_fed_by_date.set_index(['date','label'])['confirmed'].unstack().diff()","804c7bfb":"def highlight_new_max(df):\n    num_of_cols = df.size\n    if df['new\/max %'] >= 100:\n        return ['background-color: red']*num_of_cols\n    elif df['new\/max %'] >= 50:\n        return ['background-color: yellow']*num_of_cols\n    else:\n        return ['']*num_of_cols ","ccb8810b":"last_abs = confirmed_df_diff.tail(1).melt()\nlast_abs.set_index('label', inplace=True)\nlast_abs['max_infections1d'] = confirmed_df_diff.max()\nlast_abs.rename(columns={'value':'new_infections1d'}, inplace=True)\nlast_abs['new\/max %']=last_abs['new_infections1d']\/last_abs['max_infections1d']*100\nlast_abs.sort_values(by='new\/max %', ascending=False).style.apply(highlight_new_max,axis=1)\n","c7c7acd8":"de_last = float(de_by_date['confirmed'].diff().tail(1))\nde_max = de_by_date['confirmed'].diff().max()\n\nprint (\"Germany: Last    Day: \", de_last)\nprint (\"Germany: Max per Day: \", de_max)\nprint ()\nprint (\"Germany: Last Day\/Max per Day %: \", de_last*100\/de_max)","e8cba2f0":"ax = confirmed_df_diff.plot(figsize=(18,7), legend=True, title=\"New Infections (1 day)\")\nplot_events(ax,confirmed_df_diff.max().max())\npyplot.grid(True);","0d2f1f96":"for fed in feds:\n    fed_confirmed_by_date=de_fed_by_date.loc[de_fed_by_date.label==fed,['date','confirmed']].set_index('date')\n    abs_growth = abs_growth_from(fed_confirmed_by_date)\n    ax = plot_abs_growth_confirmed(abs_growth, fed)\n    plot_events(ax, abs_growth.max())","63e8e208":"def rolling_mean(days, df_confirmed_by_date, fed):\n    fed_confirmed_by_date=df_confirmed_by_date.loc[df_confirmed_by_date.label==fed,['date','confirmed']].set_index('date')\n    fed_confirmed_by_date['confirmed_mean_{}days'.format(days)] = fed_confirmed_by_date.rolling(days).mean()    \n    return fed_confirmed_by_date","0607d44e":"for fed in ['Berlin']: #feds:\n    fed_confirmed_by_date = rolling_mean(4, de_fed_by_date, fed)\n    gf = growth_factor_from(abs_growth_from(fed_confirmed_by_date),4)[['confirmed_mean_4days']]\n\n    # fed_confirmed_by_date=de_fed_by_date.loc[de_fed_by_date.label==fed,['date','confirmed']].set_index('date')\n    # abs_growth = abs_growth_from(fed_confirmed_by_date)\n    # gf = growth_factor_from(abs_growth[['confirmed']])\n    gf = gf[gf<1000]\n    max_y = 3 # gf.max().max()\n    if gf.size>0:\n        ax = plot_growth_factor(gf, max_y, \" (gf4==Reff) :\" + fed)\n        plot_events(ax,max_y)\n        pyplot.show()","dafd00db":"## Growth Factor\n\n\n<img src=\"https:\/\/i1.wp.com\/feld.com\/wp-content\/uploads\/2020\/03\/Screen-Shot-2020-03-10-at-10.18.51-AM.png?resize=768%2C451&ssl=1\" width=\"500px\">Growth Factor<\/img>\n\nsee [Exponential Growth and Covid-19](https:\/\/feld.com\/archives\/2020\/03\/exponential-growth-and-covid-19.html)\nand [Kaggle contribution of dferhadi](https:\/\/www.kaggle.com\/dferhadi\/covid-19-growth-factor-visualization-and-calculus)\n\n> the growth factor can be used to estimate the lifespan of the growth. \n> When the growth factor for the spread is 1.0 this can be a sign that we have hit the inflection point.\n\n> ... The inflection point is where the curve changes concavity.","d20cf188":"# German Federal States","dad4c2a7":"### Utilities","f8a73e7d":"# German Data","702d5897":"## Growth Factor 4 == R<sub>eff<\/sub> of RKI\n\n\n### Definition\nsee [Corona-Pandemie: Die Mathematik hinter den Reproduktionszahlen R](https:\/\/www.heise.de\/newsticker\/meldung\/Corona-Pandemie-Die-Mathematik-hinter-den-Reproduktionszahlen-R-4712676.html)\n\n`gf4 = Reff = (new infections on the 4 days([N-3,N])\/4) \/ (new infections on the 4 days([N-7,N-4])\/4)`","2ccc91fb":"### Utilities","c9d843e3":"### Infections last day vs max Infections ever in %","c2d4786c":"# Links\n\nFor a more detailed geographical case analysis please visit \n- the [Robert Koch-Institut: COVID-19-Dashboard](https:\/\/experience.arcgis.com\/experience\/478220a4c454480e823b17327b2bf1d4)\n- the [Infektionskarte of the Berliner Morgenpost](https:\/\/interaktiv.morgenpost.de\/corona-virus-karte-infektionen-deutschland-weltweit\/)\n\nMy further analyses notebooks can be found at\n- [COVID-19-Germany - Geo Case Hotspot Analysis](https:\/\/www.kaggle.com\/pat777\/covid-19-germany-geo-case-hotspot-analysis\/)\n- [COVID-19-Berlin](https:\/\/www.kaggle.com\/pat777\/covid-19-berlin)","0631233b":"## Absolute Growth","bd5c0cb7":"On base of the data the of the [Berliner Morgenpost](https:\/\/interaktiv.morgenpost.de\/corona-virus-karte-infektionen-deutschland-weltweit\/) the following notebook tries to analyze the current Corona situation in Germany.\n\nIt shows timelines with \n- absolute covid-19 cases\n- absolute growth and \n- growth factors \nfor whole Germany (`gf1`<sup>1<\/sup> and `gf4`<sup>1<\/sup>) and some of its federal states (`gf4` only).\nNote, that the `gf4` corresponds to the R<sub>eff<\/sub><sup>1<\/sup> of the RKI.\n\nIn all the following timelines \n- the dates of measures of the german goverment against corona are marked with a **blue** vertical line, \n- the dates after the mean incubation time thereafter are marked with **red** vertical lines\n\nIn all timelines with `gf1` you also can see the values for the mean of confirmed cases over 7 days, `called confirmed_mean_7days`. Reason for this is the federative data collection in germay with a possible day of 7 days.\n\n### References\n(1) A more detailed explanation of the growth factors `gf1` and `gf4` (aka R<sub>eff<\/sub>) can be found in my [Corona Hotspot Analysis Notebook](https:\/\/www.kaggle.com\/pat777\/covid-19-germany-geo-case-hotspot-analysis).\n\n### Kudos ..\n\n... to the great Data Team of the [Berliner Morgenpost](https:\/\/interaktiv.morgenpost.de\/corona-virus-karte-infektionen-deutschland-weltweit\/), which tirelessly collects current case data and seems to be the best informed source in Germany!!! \n","72ff79bd":"## Growth Factor 4 - R<sub>eff<\/sub> of RKI","81360161":"### Active","b2d52dac":"## Absolute German Cases","0e3d8766":"## Active Fed Cases per 10000 Inhabitants","54a93466":"## Absolute Growth","03017751":"## Absolute Cases","9a829e64":"# Overview of the Corona Cases in Germany - absolute, delta and growth over Time","1c8a6bbf":"## Current Corona Data","3adbc447":"## Statistics and Timeline Data"}}