{"cell_type":{"d3dc18d1":"code","fc5c8be9":"code","f7d45f3f":"code","29c9551a":"code","e315a114":"code","739955c8":"code","9c351d47":"code","f1f55d0f":"code","33cf7446":"code","51265656":"code","b07a1e5a":"code","709d20ed":"code","3e9a1853":"code","c8c57990":"code","dfe405a4":"code","247f0e4e":"code","23b6e345":"code","a12eebd1":"code","840d61e4":"code","335e48ee":"code","42f01380":"code","d8a2758f":"code","5ce0127e":"code","fb769914":"code","8c3df994":"code","9d479a24":"code","cca9a44e":"code","ba2c23ef":"code","4e991cf6":"code","354c4c81":"code","aaced5eb":"code","995f4b1b":"code","c87f4f30":"code","02d3dc95":"code","872cc0ec":"code","452094ad":"code","630ce229":"code","563eb747":"code","acc4623d":"code","4b3afafe":"markdown","05ab24ce":"markdown","43470ffc":"markdown"},"source":{"d3dc18d1":"import pandas as pd\nimport numpy as np\nfrom pandas.plotting import scatter_matrix\nimport matplotlib.pyplot as plt\nfrom sklearn import model_selection\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport warnings\nwarnings.filterwarnings(\"ignore\")","fc5c8be9":"train_data = pd.read_csv(\"..\/input\/train_u6lujuX_CVtuZ9i.csv\")\ntest_data = pd.read_csv(\"..\/input\/test_Y3wMUE5_7gLdaTN.csv\")","f7d45f3f":"train_data.head(10)","29c9551a":"train_data.columns","e315a114":"train_data.dtypes","739955c8":"train_data.describe()","9c351d47":"train_data['ApplicantIncome'].plot.box()","f1f55d0f":"train_data.boxplot(column='ApplicantIncome', by = 'Education')\nplt.suptitle(\" \")","33cf7446":"train_data.boxplot(column='ApplicantIncome', by = 'Self_Employed')\nplt.suptitle(\" \")","51265656":"train = train_data","b07a1e5a":"train.isnull().sum()","709d20ed":"train['Gender'].fillna(train['Gender'].mode()[0], inplace= True)\ntrain['Married'].fillna(train['Married'].mode()[0], inplace= True)\ntrain['Dependents'].fillna(train['Dependents'].mode()[0], inplace= True)\ntrain['Self_Employed'].fillna(train['Self_Employed'].mode()[0], inplace= True)\ntrain['Credit_History'].fillna(train['Credit_History'].mode()[0], inplace= True)","3e9a1853":"train.isnull().sum()","c8c57990":"train['LoanAmount'].fillna(train['LoanAmount'].median(), inplace= True)","dfe405a4":"train['Loan_Amount_Term'].value_counts()","247f0e4e":"train['Loan_Amount_Term'].fillna(train['Loan_Amount_Term'].mode()[0], inplace= True)","23b6e345":"train.isnull().sum()","a12eebd1":"train.columns","840d61e4":"train = train.drop('Loan_ID', axis=1)","335e48ee":"X = train.drop('Loan_Status', axis=1)\ny = train.Loan_Status","42f01380":"X = pd.get_dummies(X)","d8a2758f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","5ce0127e":"classifier = []\nclassifier.append((\"LogisticReg\", LogisticRegression(solver='liblinear', multi_class='ovr')))\nclassifier.append((\"CART\", DecisionTreeClassifier(criterion = 'entropy')))\nclassifier.append((\"KNN\", KNeighborsClassifier()))\nclassifier.append((\"KernelSVM\", SVC(gamma='auto')))\nclassifier.append((\"NaiveBayes\", GaussianNB()))\nclassifier.append((\"RandomForest\", RandomForestClassifier()))","fb769914":"seed = 0\nresults = []\nnames = []\nfor name, model in classifier:\n    kfold = model_selection.KFold(n_splits=10, random_state=seed)\n    cv_results = model_selection.cross_val_score(model, X_train, y_train, cv=kfold)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","8c3df994":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)","9d479a24":"y_pred = logreg.predict(X_test)","cca9a44e":"cm = confusion_matrix(y_test, y_pred)\nprint(cm)","ba2c23ef":"accuracy_score = accuracy_score(y_test, y_pred)\nprint(accuracy_score)","4e991cf6":"report = classification_report(y_test, y_pred)\nprint(report)","354c4c81":"test_data.shape","aaced5eb":"test_data.isnull().sum()","995f4b1b":"test = test_data.drop('Loan_ID', axis=1)","c87f4f30":"test['Gender'].fillna(test['Gender'].mode()[0], inplace= True)\ntest['Married'].fillna(test['Married'].mode()[0], inplace= True)\ntest['Dependents'].fillna(test['Dependents'].mode()[0], inplace= True)\ntest['Self_Employed'].fillna(test['Self_Employed'].mode()[0], inplace= True)\ntest['Credit_History'].fillna(test['Credit_History'].mode()[0], inplace= True)\ntest['LoanAmount'].fillna(test['LoanAmount'].median(), inplace= True)\ntest['Loan_Amount_Term'].fillna(test['Loan_Amount_Term'].mode()[0], inplace= True)","02d3dc95":"test.isnull().sum()","872cc0ec":"test = pd.get_dummies(test)","452094ad":"test_pred = logreg.predict(test)","630ce229":"Submission = pd.DataFrame()\nSubmission['Loan_ID'] = test_data['Loan_ID']\nSubmission['Loan_Status'] = test_pred.reshape((test_pred.shape[0]))","563eb747":"Submission.head(10)","acc4623d":"#Submission.to_csv('sample_submission.csv', index=False)","4b3afafe":"Now, its time to apply our model on the test_data and find the predicted values","05ab24ce":"Finding the best model for our dataset using Cross Validation","43470ffc":"As per the output, Logistic Regression seems to be the best with 80% accuracy and 5% variance, so lets apply it to the dataset"}}