{"cell_type":{"8edca45a":"code","07c058ab":"code","c50555eb":"code","c257fd6b":"code","ca66d336":"code","543475f9":"code","47e745e1":"code","c7454704":"code","e80d0e90":"code","5b84ed32":"code","31fec197":"code","d8b44751":"code","c2cbf8b7":"code","b987e404":"code","527c6bc2":"code","7f986f93":"code","361373be":"code","80e334b7":"code","2a23086d":"code","67683004":"code","572bb0a0":"markdown","73f1c8b0":"markdown","720ae30e":"markdown","ebc4fab5":"markdown","dde78b61":"markdown","ad70fbb7":"markdown"},"source":{"8edca45a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata=pd.read_csv(\"..\/input\/doordash-dataset\/DoorDash.csv\")\n\nprint(data.columns)\nprint(data.info())\nprint(data.isna().sum())\n##Dropped rows with null values for Driver_at_restaurant_datetime and for Placed_order_with_restaurant_datetime","07c058ab":"data=data.dropna()\nprint(data.info())\ndata=data.rename(columns={\"Customer placed order datetime\": \"Customer_placed_order_datetime\", \"Placed order with restaurant datetime\": \"Placed_order_with_restaurant_datetime\",\"Driver at restaurant datetime\":\"Driver_at_restaurant_datetime\",\"Delivered to consumer datetime\":\"Delivered_to_consumer_datetime\",\"Driver ID\":\"Driver_ID\",\"Restaurant ID\":\"Restaurant_ID\",\"Consumer ID\":\"Consumer_ID\",\"Delivery Region\":\"Delivery_Region\",\"Is ASAP\":\"Is_ASAP\",\"Order total\":\"Order_total\",\"Amount of discount\":\"Amount_of_discount\",\"Amount of tip\":\"Amount_of_tip\",\"Refunded amount\":\"Refunded_amount\"})\n\n#Changing customer datetime\nnew = data[\"Customer_placed_order_datetime\"].str.split(\" \", n = 1, expand = True) \ndata[\"Customer_placed_order_day\"]=new[0]\ndata[\"Customer_placed_order_time\"]=new[1]\ndata['Customer_order_Timestamp'] = pd.to_datetime(\n    data['Customer_placed_order_time'],\n    format='%H:%M:%S')\n\n#Changing Placed_order_with_restaurant_datetime\nnew = data[\"Placed_order_with_restaurant_datetime\"].str.split(\" \", n = 1, expand = True) \ndata[\"Placed_order_with_restaurant_day\"]=new[0]\ndata[\"Placed_order_with_restaurant_time\"]=new[1]\ndata['Placed_order_Timestamp'] = pd.to_datetime(\n    data['Placed_order_with_restaurant_time'],\n    format='%H:%M:%S')\n\n#Changing Driver_at_restaurant_datetime\nnew = data[\"Driver_at_restaurant_datetime\"].str.split(\" \", n = 1, expand = True) \ndata[\"Driver_at_restaurant_day\"]=new[0]\ndata[\"Driver_at_restaurant_time\"]=new[1]\ndata['Driver_at_rest_Timestamp'] = pd.to_datetime(\n    data['Driver_at_restaurant_time'],\n    format='%H:%M:%S')\n\n\n#Changing Delivered_to_consumer_datetime\nnew = data[\"Delivered_to_consumer_datetime\"].str.split(\" \", n = 1, expand = True) \ndata[\"Delivered_to_consumer_day\"]=new[0]\ndata[\"Delivered_to_consumer_time\"]=new[1]\ndata['Deliver_to_cust_Timestamp'] = pd.to_datetime(\n    data['Driver_at_restaurant_time'],\n    format='%H:%M:%S')\n\ndata=data.drop(['Customer_placed_order_datetime', 'Placed_order_with_restaurant_datetime','Driver_at_restaurant_datetime','Delivered_to_consumer_datetime','Customer_placed_order_time','Placed_order_with_restaurant_time','Driver_at_restaurant_time','Delivered_to_consumer_time'], axis=1)\n\ndata.info()\n","c50555eb":"#Timezone conversion\nfrom pytz import timezone\neastern = timezone('US\/Eastern')\n\ndata[\"Customer_order_Timestamp_1\"] = data[\"Customer_order_Timestamp\"].dt.tz_localize('GMT').dt.tz_convert('US\/Pacific').dt.tz_localize(None)\ndata[\"Placed_order_Timestamp_1\"] = data[\"Placed_order_Timestamp\"].dt.tz_localize('GMT').dt.tz_convert('US\/Pacific').dt.tz_localize(None)\ndata[\"Driver_at_rest_Timestamp_1\"] = data[\"Driver_at_rest_Timestamp\"].dt.tz_localize('GMT').dt.tz_convert('US\/Pacific').dt.tz_localize(None)\ndata[\"Deliver_to_cust_Timestamp_1\"] = data[\"Deliver_to_cust_Timestamp\"].dt.tz_localize('GMT').dt.tz_convert('US\/Pacific').dt.tz_localize(None)\n\n\n#Delete old timestamp\ndata=data.drop(['Customer_order_Timestamp', 'Placed_order_Timestamp','Driver_at_rest_Timestamp','Deliver_to_cust_Timestamp'], axis=1)\n\n","c257fd6b":"z= data[\"Customer_order_Timestamp_1\"].dt.hour\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#figure(figsize=(40,7))\n#df=z.sort_values(by=['Customer_order_Timestamp_1'])\nsns.countplot(x=z,data=z)\nplt.title(\"Number of orders placed VS hour of the day\",size=20)\nplt.ylabel(\"Number of orders placed\",size=10)\nplt.xlabel(\"Hour or the day\",size=10)\nplt.show()","ca66d336":"#Analyzing how many deliveries each driver makes per month\nprint(data.columns)\na=data.groupby(\"Driver_ID\").count()\nfrom matplotlib.pyplot import figure\n#figure(figsize=(50,16))\n#plt.figure(figsize=(20,10))\npd.value_counts(data[\"Driver_ID\"]).plot.bar()\nplt.ylabel(\"Number of orders covered\",size=10)\nplt.title(\"Number of orders covered by each driver individually\",size=20)\nprint(a)\n##We see that some drivers have delivered many orders (over 100) in a month, while others have delivered below 20","543475f9":"##Customer_order and order placed at restaurant by rest delay\ndata[\"Placed_diff\"]=data[\"Placed_order_Timestamp_1\"]-data[\"Customer_order_Timestamp_1\"]\ndata[data[\"Is_ASAP\"]==False].head(50)\ndata[data[\"Is_ASAP\"]==True].head(100)","47e745e1":"data[data[\"Is_ASAP\"]==False].head(50)","c7454704":"#time diff between order placed by cust and delivery time\ndata[\"Delay_in_Delivery\"]=data[\"Deliver_to_cust_Timestamp_1\"]-data[\"Customer_order_Timestamp_1\"]\ndata[data[\"Is_ASAP\"]==True].head(60)","e80d0e90":"##Driver at rest and order placed by rest delay\ndata[\"Driver_Rest_delay\"]=data[\"Driver_at_rest_Timestamp_1\"]-data[\"Placed_order_Timestamp_1\"]\ndata.head(60)\nx = data[['Driver_Rest_delay']].apply(pd.to_numeric)     \nx.head(60)\nb=x<0\nb.sum()\n## Out of 15k+ data records, 509 times the driver reached the restaurant before the order was placed at the restaurant-->3%\n##At others times, the difference between order placed at the restaurant and the arrival of the driver was very less, implying that the driver had to wait for the food to be prepared","5b84ed32":"data[\"Placed_diff\"]=data[\"Placed_order_Timestamp_1\"]-data[\"Customer_order_Timestamp_1\"]\na=data[data[\"Is_ASAP\"]==True]\ny= a[['Driver_Rest_delay']]\nprint(y)\n\nb=data[data[\"Is_ASAP\"]==False]\ny1= b[['Driver_Rest_delay']]\nprint(y1)","31fec197":"data[data[\"Refunded_amount\"]>0]","d8b44751":"#Day wise orders\nfigure(figsize=(40,10))\ndf=data.sort_values(by=['Customer_placed_order_day'])\nsns.countplot(x=\"Customer_placed_order_day\",data=df)\nplt.title(\"Number of deliveries per day\",size=40)\nplt.ylabel(\"Number of deliveries\",size=30)\nplt.xlabel(\"Day of the month\",size=20)\nplt.show()\n","c2cbf8b7":"import seaborn as sns\nx1=data.groupby(['Driver_ID']).mean()\nx2=data.groupby(['Driver_ID']).sum()\nfigure(figsize=(50,10))\nprint(x1)\nsns.barplot(x=x1.index,y=x1[\"Amount_of_tip\"])\nplt.title(\"Average amount of tip per individual driver\",size=40)\nplt.ylabel(\"Average amount of tip\",size=30)\nplt.xlabel(\"Driver_ID\",size=30)\n\nplt.show()\nfigure(figsize=(50,10))\n\nsns.barplot(x=x2.index,y=x2[\"Amount_of_tip\"])\nplt.title(\"Total amount of tip per individual driver\",size=40)\nplt.ylabel(\"Total amount of tip\",size=30)\nplt.xlabel(\"Driver_ID\",size=30)\nplt.show()\n\nfigure(figsize=(50,10))\ndf=data.sort_values(by=['Driver_ID'])\nsns.countplot(x=\"Driver_ID\",data=df)\nplt.title(\"Number of deliveries per individual driver\",size=40)\nplt.ylabel(\"Number of deliveries\",size=30)\nplt.xlabel(\"Driver_ID\",size=30)\nplt.show()\nprint(x1.index)\nprint(df[\"Driver_ID\"])","b987e404":"#3Restaurant wise orders\nfigure(figsize=(50,10))\nsns.countplot(x=\"Restaurant_ID\",data=df)\nplt.title(\"Number of deliveries per individual restaurant\",size=40)\nplt.ylabel(\"Number of deliveries\",size=30)\nplt.xlabel(\"Restaurant_ID\",size=30)\nplt.show()","527c6bc2":"#3Restaurant wise orders\n#figure(figsize=(70,20))\nsns.countplot(x=\"Consumer_ID\",data=df)\nplt.title(\"Number of deliveries per individual restaurant\",size=20)\nplt.ylabel(\"Number of deliveries\",size=10)\nplt.xlabel(\"Consumer_ID\",size=10)\nplt.show()","7f986f93":"#3Delivery_Region wise analysis:\nfigure(figsize=(30,5))\n\ndf=data.sort_values(by=['Delivery_Region'])\nsns.countplot(x=\"Delivery_Region\",data=df)\nplt.title(\"Number of deliveries per delivery region\",size=30)\nplt.ylabel(\"Number of deliveries\",size=25)\nplt.xlabel(\"Delivery_Region\",size=25)\nplt.show()","361373be":"#Consumer id\nfigure(figsize=(200,25))\n#df=data.sort_values(by=['Consumer_ID'])\nsns.countplot(x=\"Consumer_ID\",data=data)\nplt.title(\"Number of deliveries per individual customer\",size=40)\nplt.ylabel(\"Number of deliveries\",size=30)\nplt.xlabel(\"Customer_ID\",size=20)\nplt.show()","80e334b7":"#Discount based orders\nfigure(figsize=(80,40))\ndf=data.sort_values(by=['Amount_of_discount'])\nsns.countplot(x=\"Amount_of_discount\",data=df)\nplt.title(\"Number of deliveries based on discount amount\",size=40)\nplt.ylabel(\"Number of deliveries\",size=30)\nplt.xlabel(\"Driver_ID\",size=20)\nplt.show()\nprint(df.groupby(['Amount_of_discount']).count().head(60))","2a23086d":"data[\"Delivery_Region\"].unique()\nz=data.groupby(['Delivery_Region','Driver_ID']).count()\nz","67683004":"print (data.groupby('Delivery_Region')['Driver_ID'].nunique())\n","572bb0a0":"## **Data Analysis**","73f1c8b0":"1. Data preparation and cleaning:\nBefore I began exploring the data for insights to identify the possible areas of improvement in the system, I \nwanted to clean and prepare the data using Python.\ni. I renamed the column names and replaced the spaces with underscores.\nii. I then converted all the four datetime columns from UTC to PT time zone so that I could interpret my \ndata more easily.\niii. I inspected the null values in the dataset and found that two columns consisted of null values. I dropped \nthe rows which consisted of null values since those would not contribute towards my analysis.\nNOTE: The Delivery_Region has 4 unique values one of them being \u2018None\u2019. However, I did not remove the rows \nwith \u2018None\u2019 value since those rows could be used in analyzing other aspects of the data set.","720ae30e":"2. Exploratory Data Analysis:\nAfter cleaning and preparing the data, I proceeded to explore some of the relations within the dataset to derive \ninsights.\na. I then computed the difference between the time when customer placed the order and time when restaurant \nreceived the order.\nObservation: In many cases, this difference was very significant with delays way over 5 minutes even for \nIs_ASAP=True orders.\nb. I also computed the difference between when the order was received by the restaurant and when the driver \nreached the restaurant.\nObservation: In approximately 3% of the orders placed (509 orders), the driver reached the restaurant before \nthe order was received at the restaurant. In some other cases, the driver reached the restaurant within a few \nminutes of the restaurant receiving the order. \nc. I also plotted the Average tip received by each driver, the total tip received by each driver, and the number \nof deliveries made by each driver to understand if there exists any relation.Observations:\n\u27a2 The average tip received by drivers primarily varies between 3 and 4.5 dollars barring a few exceptions\nin drivers who make 6 dollars tip on an average.\n\u27a2 The total amount of tip received by a driver is proportional to the number of food deliveries made, as \nexpected.\n\u27a2 Most of the drivers who make exceptionally high tips on an average (typically 5.5 dollars and above) are \ndrivers who very few orders overall.\n\u27a2 We can see that while some drivers covered a very high number of food deliveries (above 300), there \nwere some drivers who covered less than 30 food orders over the period of a month.\nd. I also plotted a restaurant-wise number of orders placed.\nObservation: Quite a few restaurants cross the 100 orders mark, while some barely cross the 50 orders mark. e. I computed the number of drivers delivering to each delivery region. I also plotted the number of food \ndeliveries made in each of these regions.\nObservations:\n\u27a2 We see that the number of drivers delivering to a particular delivery region are in proportion to the \nnumber of orders placed to be delivered in that region.\n\u27a2 We also see that Mountain View and San Jose have relatively a smaller number of orders delivered to.\nf. I also computed the number of orders placed my individual customers. \nObservation: While quite a few customers place over 10 orders this month, the number of customers who \nordered less than 5 times was a lot more. \ng. I also computed how the pattern for ordering varied with the discount offered and availed.\nObservation: Close to 75% orders (11434) were placed without any discount availed. A noticeable number of \norders (1865) were placed by availing a 6-dollar discount.\nh. I also computed the number of orders placed at different times during the day.\nObservation: Most orders are placed between 9 AM PT and 8 PM PT with the number of orders peaking at 6 \nPM PT.\ni. I also plotted the number of orders placed each day of the month.\nObservation: No specific pattern for orders placed can be observed based on day of the month.","ebc4fab5":"4. Additional data that can be useful for deriving insights:\n\u27a2 More info about driver wait-time for restaurants, and restaurant wait-time for drivers could be helpful\nin analyzing how this wait-time can be reduced.\n\u27a2 Information regarding why there was a lag between orders placed by customers and orders received by \nthe restaurants for on-demand orders especially can help mitigate the problem.\n\u27a2 Information about the distance between restaurant and the delivery address can help gauge the time \ntaken for drivers to deliver after food is picked up from the restaurant.\n\u27a2 For scheduled deliveries (Is_ASAP = False orders), information about the desired time of order delivery\nwould be helpful to understand if there were any unnecessary delays that could have been avoided from \nthe driver\u2019s and the restaurant\u2019s end.\n\u27a2 For those orders that were refunded, information about the reason for refund would help draw insights\nand help direct efforts to improve customer experience.\nFor Example: Refunds could be due to a) Delay in food delivery b) Quality of food delivered c) Poor and \nunhygienic packaging d) Change of mind.\n\u27a2 Time of order-cancellation for refunded orders can also help to understand and compute the percentage \nof amount with respect to the order amount that needs to be refunded accordingly.\n\u27a2 More information about the type of restaurant and the food items\/cuisine offered can help understand \nwhy some restaurants received very less orders.\n\u27a2 Additional data around number of restaurants currently listed on the platform with respect to the total\nnumber of restaurants in that region can help enhance customer experience and business profits by\ncreating tie-ups with restaurants currently not listed. ","dde78b61":"3. Inferences & Suggestions:Observation a \u2192 The delay in order being received by the restaurant, especially for on-demand orders \n(Is_ASAP=True) should be reduced so that the overall lower delivery time can be achieved. Use of improved and \nprompt APIs could help mitigate this issue.\nObservation b\u2192 On few occasions the drivers reached the restaurant before the restaurants received the \norders. On other occasions, the driver arrived at the restaurant within a few minutes of the order being received \nby the restaurant. This can often lead to drivers having have to wait at the restaurant till the order is ready.\nSuggestion: An improvised prompt placement of orders to the restaurants using an optimized set of APIs along \nwith an improved Machine learning algorithm to match drivers to the restaurants based on their Estimated Time \nof Arrival can result in a time-optimized process flow.\nObservation c\u2192 It is possible that some of the drivers who received above average tips and covered less number \nof orders became complacent in picking up more orders because they were satisfied with the amount of tip \nmade overall. \nSuggestion: A well-structured incentivization plan should be put in place to encourage and motivate such drivers \nto pick up more food deliveries. Penalizations around not picking up enough number of orders over a period\nshould be implemented to prevent such drivers from becoming lazy. \nObservation d\u2192 Some of the restaurants received a high number of orders while others did not. This can be \nbecause of various reasons: a) Subpar quality and taste of food b) Niche cuisine\/food type c) Limited food item \nofferings d) Poor packaging e) Newly opened, among others.\nSuggestion: With more information, the root cause can be narrowed down accurately. For reasons such as \nSubpar quality and taste of food as well as for poor packaging complaints, the restaurants need to be made \naware so that they can improve on these fronts.\nObservation e\u2192 While the number of orders placed being in proportion to the number of drivers delivering in \nthat region can have a reinforcing effect, it is also possible that the customers from regions where a smaller\nnumber of orders are placed tend to order less because they have a frustrating experience due to a smaller\nnumber of available drivers and longer delivery times.\nSuggestion: An investigation around how many restaurant listings Instacart has in regions where a smaller\nnumber of orders get delivered (Mountain View and San Jose) can help understand if Instacart could look at \ninviting more restaurants to be listed on its platform to offer more near by options to customers. \nObservation f\u2192 For customers who ordered less than 5 times in a month, one need to dig in deeper to \nunderstand they encountered poor customer experience to identify what stopped them from ordering more\noften. A clearer understanding of what needs to be improved can help focus efforts more effectively.\nObservation g\u2192 While most people ordered without availing discounts, some got incentivized to order because \nthey were able to avail discounts. \nSuggestion: More information around coupons availed can help structure enticing offers to attract more \ncustomers to the platform. \nObservation h\u2192 Because there is a big number of orders placed in the evenings, one needs to look at the \ndemand and supply of drivers needed to facilitate a smooth customer experience with optimum delivery times.\nSuggestion: Devise a comprehensive and optimized machine learning model to help with driver-restaurant \nmatchings.","ad70fbb7":"The main aim of this exercise is to analyse data from DoorDash and identify potential problems, root causes and suggestions to address the observed problems in the current system.\n\nThe analysis and insights derived from this exercise can be found at the end of the notebook."}}