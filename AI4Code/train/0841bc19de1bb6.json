{"cell_type":{"1105cc8a":"code","e9d8833b":"code","b1ec60df":"code","4344876b":"code","83b3e3e8":"code","dee421b7":"code","6d8a24cb":"code","dfd28bfd":"code","5c63910d":"code","910e1ea9":"code","10b35798":"code","140c83bb":"code","c75fca2c":"code","bd0d2cbd":"code","1d140739":"code","021eac10":"code","4917edca":"code","1a0d3108":"code","c93d73ea":"code","36157af8":"code","7c6863ed":"code","7e8af255":"code","7e3f7425":"code","d768c39a":"code","2bf6d865":"code","76afaf74":"code","31691f3e":"code","2cbf1b6f":"code","e5ec971d":"code","49b99d65":"markdown","5077d0b9":"markdown","a24b0777":"markdown"},"source":{"1105cc8a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","e9d8833b":"individuals = pd.read_csv(\"..\/input\/individual-ingredients\/nutrition.csv\") # ingredients nutrition values \n\ndata= pd.read_csv(\"..\/input\/datac\/final version data.csv\") # meals nutrition values \n\nrecipes=pd.read_csv(\"..\/input\/nutritionfacts\/my_data.csv\") # 10K recipes dataset\n\nsuggestions_low=pd.read_csv(\"..\/input\/suggestionslowcsv\/suggestions low.csv\") # table of ingredients low in nutrtion values\n\nsuggestions_high=pd.read_csv(\"..\/input\/suggestions-high\/suggestions high.csv\") # table of ingredients high in nutrtion values\n\nAdvices=pd.read_csv(\"..\/input\/advices\/Risk of bad diet .csv\")\n","b1ec60df":"daily_values= {\n               \"calories_cal_\":[2000] ,\n               \"fat_g\":[78] ,\n               \"cholesterol_mg\": [300],\n               \"sodium_mg\":[2300],\n               \"carbohydrate_g\": [275],\n               \"sugar_g\": [50],\n    \n               \"fiber_g\":[25],\n               \"vitamin_A_mcg\" :[900],\n               \"vitamin_B12_mcg\": [2.4],\n               \"vitamin_B6_mg\": [1.7],\n               \"vitamin_c_mg\": [90],\n               \"vitamin_D_mcg\": [15],\n               \"vitamin_E_mg\": [15],\n               \"iron_mg\":[14],\n               \"calcium_mg\": [1300],\n               \"magnesium_mg\": [420],\n               \"zink_mg\": [11],\n               \"protein_g\":[110]\n               }","4344876b":"default_foucsed_nutrients =  [\"fiber\",\"Ok\", \"vitA\",\"Ok\", \"vitB12\",\"Ok\", \"viB6\",\"Ok\", \"vitC\",\"Ok\",\n               \"vitD\",\"Ok\", \"vitE\",\"Ok\", \"iron\" ,\"Ok\",\"calcium\" ,\"Ok\"\n               ,\"magnesium\",\"Ok\", \"zink\",\"Ok\", \"protein\" ,\"Ok\",\"calories\", \"Ok\",\n               \"fat\", \"Ok\",\"cholesterol\", \"Ok\",\"sodium\", \"Ok\",\"carbohydrates\",\"Ok\", \"sugar\",\"Ok\"]\ndefault_score= 18","83b3e3e8":"sample =data.iloc[[1,2,6,121],:]\nprint(sample)","dee421b7":"def display_advice(index): # function that display advice based on the nutrient defficancy \n    \n    print( Advices.iloc[index,2])\n    \n    ","6d8a24cb":"\ndef report_generator(sample): # function that takes set of meals taken by a day and return :list of the nutrients value, the feedback of each nutrient (low,high, ok), diet report, \n    \n    DV_list=[]\n    DV=[]\n    foucsed_nutrients=[]\n    target=sample.iloc[:,1:19]\n    \n    \n    \n   # the sum of the user's daily nutrients \n    for i in range(target.shape[1]):\n        DV.append(sum(target.iloc[:,i]))\n        \n \n    DV_list.extend((\"total_fiber\", DV[0], \"total_vitA \",DV[1], \"total_Vitb12 \", DV[2], \"total_vitb6 \",DV[3], \"total_vitC \",DV[4]\n                    ,\"total_Vitd \", DV[5] ,\"total_vitE \", DV[6], \"total_iron \", DV[7],\"total_calcium \", DV[8]\n                     ,\"total_magnesium \" ,DV[9],\"total_zinc\",DV[10],\"total_protein\",DV[11],\n                   \"total_calories \",DV[12],\"total_fat\",DV[13] ,\"total_cholestrol \", DV[14],\n                    \"total_sodium\", DV[15],\"total_carbohydrate \",DV[16], \"total_sugar \",DV[17]))\n    \n    user_dietary_intake= DV_list[1:37:2] # user's numbers of fiber vitA vitb12 vitb6 vitc vitd vite iron calcium magnesium potassium zink protein \n\n    DV=[25,900,2.4,1.7,1300,15,15,14,90,420,11,110,2000,78,300,2300,275,50] # Referance Daily values of fiber vitA vitb12 vitb6 vitc vitd vite iron calcium magnesium  zink protein daily values of calories, fat, cholestrol, sodium, carbohydrates, sugar\n  \n    nutrients=[\"fiber\", \"vitA\", \"vitB12\", \"viB6\", \"vitC\",\n               \"vitD\", \"vitE\", \"iron\" ,\"calcium\" \n               ,\"magnesium\", \"zink\", \"protein\" ,\"calories\", \n               \"fat\", \"cholesterol\", \"sodium\", \"carbohydrates\", \"sugar\"] # the right sequance of the nutrients\n\n    for i in range(len(DV)):\n\n        if i<12: \n            if (user_dietary_intake[i]*1.2< DV[i] ) :\n                foucsed_nutrients.extend((nutrients[i],'Low'))\n                print(\"Your total dietary \"+ nutrients[i] + \" intake is lower than the Daily value\")\n                print(\"Try to add some of the follwing foods to your diet:\")\n                print( suggestions_high.iloc[i,1:].dropna())\n                display_advice(i)\n                print('')\n            else :\n                foucsed_nutrients.extend((nutrients[i],'Ok'))\n\n\n        else:\n            if (user_dietary_intake[i]> 1.2*DV[i] ) :\n                foucsed_nutrients.extend((nutrients[i],'High'))\n                print(\"Your total dietary \"+ nutrients[i] + \" intake is higher than the Daily value\")\n                print(\"Try to get red of the follwing foods:\")\n                print( suggestions_high.iloc[i,1:].dropna())\n                print(\"And try to add some of the follwing foods to your diet:\")\n                print( suggestions_low.iloc[i-12,1:].dropna())\n                display_advice(i)\n                print('')\n            else :\n                foucsed_nutrients.extend((nutrients[i],'Ok'))\n\n\n    return DV_list,foucsed_nutrients\n        \n","dfd28bfd":"def report_without_print(sample):\n        \n    DV_list=[]\n    DV=[]\n    foucsed_nutrients=[]\n    target=sample.iloc[:,1:19]\n    \n    \n    \n   # the sum of the user's daily nutrients \n    for i in range(target.shape[1]):\n        DV.append(sum(target.iloc[:,i]))\n        \n \n    DV_list.extend((\"total_fiber\", DV[0], \"total_vitA \",DV[1], \"total_Vitb12 \", DV[2], \"total_vitb6 \",DV[3], \"total_vitC \",DV[4]\n                    ,\"total_Vitd \", DV[5] ,\"total_vitE \", DV[6], \"total_iron \", DV[7],\"total_calcium \", DV[8]\n                     ,\"total_magnesium \" ,DV[9],\"total_zinc\",DV[10],\"total_protein\",DV[11],\n                   \"total_calories \",DV[12],\"total_fat\",DV[13] ,\"total_cholestrol \", DV[14],\n                    \"total_sodium\", DV[15],\"total_carbohydrate \",DV[16], \"total_sugar \",DV[17]))\n    \n    user_dietary_intake= DV_list[1:37:2] # user's numbers of fiber vitA vitb12 vitb6 vitc vitd vite iron calcium magnesium potassium zink protein \n\n    DV=[25,900,2.4,1.7,1300,15,15,14,90,420,11,110,2000,78,300,2300,275,50] # Referance Daily values of fiber vitA vitb12 vitb6 vitc vitd vite iron calcium magnesium  zink protein daily values of calories, fat, cholestrol, sodium, carbohydrates, sugar\n  \n    nutrients=[\"fiber\", \"vitA\", \"vitB12\", \"viB6\", \"vitC\",\n               \"vitD\", \"vitE\", \"iron\" ,\"calcium\" \n               ,\"magnesium\", \"zink\", \"protein\" ,\"calories\", \n               \"fat\", \"cholesterol\", \"sodium\", \"carbohydrates\", \"sugar\"] # the right sequance of the nutrients\n\n    for i in range(len(DV)):\n\n        if i<12: \n            if (user_dietary_intake[i]*1.2< DV[i] ) :\n                foucsed_nutrients.extend((nutrients[i],'Low'))\n\n            else :\n                foucsed_nutrients.extend((nutrients[i],'Ok'))\n\n\n        else:\n            if (user_dietary_intake[i]> 1.2*DV[i] ) :\n                foucsed_nutrients.extend((nutrients[i],'High'))\n\n            else :\n                foucsed_nutrients.extend((nutrients[i],'Ok'))\n\n\n    return DV_list,foucsed_nutrients\n        \n    ","5c63910d":"def user_consumption(sample): # function that take set of meals consumed in a day and return the percentage of DV\n    DV_percent=[]\n    DV=[25,900,2.4,1.7,1300,15,15,14,90,420,11,110,2000,78,300,2300,275,50]\n    nutrients=[\"fiber\", \"vitA\", \"vitB12\", \"viB6\", \"vitC\",\n               \"vitD\", \"vitE\", \"iron\" ,\"calcium\" \n               ,\"magnesium\", \"zink\", \"protein\" ,\"calories\", \n               \"fat\", \"cholesterol\", \"sodium\", \"carbohydrates\", \"sugar\"] \n    meals_nutrinets=sample.iloc[:,1:19]\n    daily_consumptiom=[]\n    \n    for i in range(meals_nutrinets.shape[1]):\n        daily_consumptiom.append(sum(meals_nutrinets.iloc[:,i]))\n\n        \n    for  i in range(len(daily_consumptiom)):\n            DV_percent.extend((nutrients[i],round(daily_consumptiom[i]\/DV[i]*100,2)))\n    return DV_percent","910e1ea9":"def scoring_function_v1 (foucsed_nutrients,data): # function that takes the foucsed nutrients from the user diet and return scores assigned for the meals\n    DV=[25,900,2.4,1.7,1300,15,15,14,90,420,11,110,2000,78,300,2300,275,50]\n    # Referance Daily values of fiber vitA vitb12 vitb6 vitc vitd vite iron calcium magnesium  zink protein daily values of calories, fat, cholestrol, sodium, carbohydrates, sugar\n\n    meals_nutrients =data.iloc[:,1:19]\n    calculated_nutrients =foucsed_nutrients[1:36:2] # array of okays, L, H \n    full_score =0\n    \n    for i in range (len(calculated_nutrients)):\n        if calculated_nutrients[i]==\"Ok\":\n            full_score =full_score +1\n        else:\n            full_score=full_score +2\n            \n    score =0.0\n    meals_score =[]\n    scores_dict={}\n    for i in range(meals_nutrients.shape[0]): # for each meal in the dataset\n        score =0.0  # reset the score value \n        for j in range(meals_nutrients.shape[1]): # for each nutrient of the corresponding meal\n\n\n            if j<12: # first 12 nutrients\n                if( calculated_nutrients[j]==\"Ok\"):\n\n                    if (meals_nutrients.iloc[i,j] < DV[j]*0.2): # less than 20% of the daily value \n                        score =score + (meals_nutrients.iloc[i,j] \/(DV[j]*0.2))\n\n                    else :\n                        score =score +1\n\n\n                else:  # the meal is low in certian vitamin \n                    if (meals_nutrients.iloc[i,j] < DV[j]*0.3): # less than 30% of the daily value \n                        score  =score +meals_nutrients.iloc[i,j]\/(DV[j]*0.3)\n                    else:\n                        score =score+2\n\n            else: # last 8 nutrients\n\n                if( calculated_nutrients[j]==\"Ok\"):\n\n                    if (meals_nutrients.iloc[i,j] <= 0.5*DV[j]):\n                        score =score +1\n\n                    elif (DV[j]>meals_nutrients.iloc[i,j] >DV[j]*0.5): #greater than 50% of the daily value\n                        score=score+ (1-(meals_nutrients.iloc[i,j]-0.5*DV[j])\/((0.5)*DV[j]))\n\n\n                else:\n\n                    if (meals_nutrients.iloc[i,j]<= 0.3*DV[j]):\n                        score =score+2 \n\n                    elif(DV[j]>=meals_nutrients.iloc[i,j] > DV[j]*0.3):\n                        score=score+ (1-((meals_nutrients.iloc[i,j]-0.3*DV[j])\/((1-0.3)*DV[j])))\n\n\n        scores_dict[data.iloc[i,0]]=round((score\/full_score *100),2)    \n        sorted_scores={k:v for k, v in sorted(scores_dict.items(),key=lambda item:item[1],reverse=True)}\n\n    return sorted_scores","10b35798":"def top_nth_meals (N,sorted_scores): #function that takes set of scores, the number of desired meals and return the top n meals\n    \n    top_meals=list(sorted_scores.items())[0:N:1]\n    return top_meals\n    ","140c83bb":"def rapleced_meal(k): #  the meal index   \n    sample=data.iloc[k,:]\n    user_diet=scoring_function_v1(default_foucsed_nutrients,sample)\n    dropped_meal=list(user_diet.keys())[-1] # extracting the meal with the lowest score\n    \n    return dropped_meal","c75fca2c":"def meals_replacement(data_,sample,top_meal,user_diet,dropped_meal): # function that replace the worst meal from the user diet with the highest scored meal\n\n    user_diet.pop(dropped_meal) # remove the worst meal in the user diet\n    \n\n    user_diet.keys() \n    meals_index=[]\n\n    for j in range(len(data.iloc[:,0])) :# meals in the dataset\n        for i in range(len(list(user_diet.keys()))):\n            if list(user_diet.keys())[i]==data.iloc[j,0]:\n                    meals_index.append(j)\n        if top_meal==data.iloc[j,0]:\n                meals_index.append(j)\n                \n    user_consumption_before=user_consumption(sample)\n    user_consumption_after=user_consumption(data.iloc[meals_index,:])\n\n    total_differance=[]\n    for i in range(len(user_consumption_after)):\n        if i %2==0:\n            total_differance.append(user_consumption_after[i])\n        else:\n            total_differance.append(round(user_consumption_after[i]-user_consumption_before[i],2))\n            \n    user_DV_after,new_foucsed_nutrients=report_without_print(data.iloc[meals_index,:])\n    \n    return  user_consumption_before,user_consumption_after,total_differance,new_foucsed_nutrients\n    \n    \n    \n","bd0d2cbd":"def diet_checker (user_dict):# fnction to check if the user meals need replacement or not\n    x=len(list(user_dict.values()))\n\n    for i in range(len(list(user_dict.values()))):\n        if list(user_dict.values())[i]>= 75:\n            x=x-1\n        if x==0:  \n            print('your meals seems good!, no need for any replacement ')\n            return  True\n        \n    return False \n            \n         \n    ","1d140739":"def category_finder(dropped_meal):\n    for i in range(len(data.iloc[:,0])):\n        if data.iloc[i,0]==dropped_meal:\n            index=i\n            return data.iloc[i,22]\n","021eac10":"def category_mapping(category):\n\n    if category ==1:\n        i='breakfast'\n    elif category ==2:\n        i='lunch'\n    elif category ==3:\n        i='dinner'\n    elif category ==4:\n        i='snack'\n    \n    return i\n    \n    \n        ","4917edca":"def index_finder(meals_set,data):\n    meals_index=[]\n    for j in range(len(data.iloc[:,0])) :# meals in the dataset\n        for i in range(len(meals_set)):\n            if meals_set[i]==data.iloc[j,0]:\n                meals_index.append(j)\n    return meals_index","1a0d3108":"def meals_menu(Category):\n    # meals classifier \n    category=data.iloc[:,-2]\n    Breakfast=[]\n    Lunch =[]\n    Dinner=[]\n    Snack=[]\n    \n    \n    breakfast=[]\n    lunch =[]\n    dinner=[]\n    snack=[]\n\n    for i in range(len(category)) :\n        if category[i]==1.0:\n            Breakfast.append(data.iloc[i,0])\n\n        elif category[i]==2.0:\n            Lunch.append(data.iloc[i,0])\n        elif category[i]==3.0:\n            Dinner.append(data.iloc[i,0])\n        elif category[i]==4.0:\n            Snack.append(data.iloc[i,0])\n\n    if Category ==1:\n        for i in range(len(Breakfast)):\n            \n            breakfast.extend((int(i),Breakfast[i]))\n            \n            if i ==len(Breakfast)-1:\n                return breakfast\n            \n  \n    elif Category ==2:\n        for i in range(len(Lunch)):\n\n            lunch.extend((int(i),Lunch[i]))\n            \n            if i==len(Lunch)-1:\n                return lunch \n\n\n    elif Category ==3:\n        for i in range(len(Dinner)):\n                \n            dinner.extend((int(i),Dinner[i]))\n\n            if i ==len(Dinner)-1:\n                return dinner\n\n\n\n\n    elif Category ==4:\n        for i in range(len(Snack)):\n            snack.extend((int(i),Snack[i]))\n\n            if i ==len(Snack)-1:\n                return snack\n","c93d73ea":"\ndef best_meals_printer(top_n_meals):\n\n    best_meals_list=[]\n\n    for i in range(len(top_n_meals)):\n        best_meals_list.extend((i,top_n_meals[i] ))\n    print(best_meals_list)\n    ","36157af8":"def category_limitation (y_n,index):\n   \n    if y_n ==\"no\": \n        return data\n    elif y_n ==\"yes\":     \n        if index==1 :\n            return meals_menu(1)\n        elif index== 2:\n            return meals_menu(2)\n        elif index== 3:\n            return meals_menu(3)\n        elif index==4 :\n            return meals_menu(4)\n    \n","7c6863ed":"def display_menu(): \n    \n    meals=[]\n\n\n    print('Please choose your breakfast')\n    breakfast=meals_menu(1)\n    breakfast_meals=breakfast[1:-1:2]\n    breakfast_index=breakfast[0:-1:2]\n    for i in range(len(breakfast_meals)):\n        print(breakfast_index[i],breakfast_meals[i])\n\n\n    user_breakfast= [int(x) for x in input().split()]\n\n    for i in user_breakfast:\n        meals.append(breakfast[i*2+1]) # appending the names of the meals \n\n\n\n    print('Please choose your lunch')\n    lunch=meals_menu(2)\n    lunch_meals=lunch[1:-1:2]\n    lunch_index=lunch[0:-1:2]\n    for i in range(len(lunch_meals)):\n        print(lunch_index[i],lunch_meals[i])\n\n    user_lunch= [int(x) for x in input().split()]\n\n    for i in user_lunch:\n        meals.append(lunch[i*2+1])\n\n\n    print('Please choose your dinner')\n    dinner=meals_menu(3)\n    dinner_meals=dinner[1:-1:2]\n    dinner_index=dinner[0:-1:2]\n    for i in range(len(dinner_meals)):\n        print(dinner_index[i],dinner_meals[i])\n    user_dinner= [int(x) for x in input().split()]\n\n    for i in user_dinner:\n        meals.append(dinner[i*2+1])\n\n\n\n    print('Please choose your snacks')\n    snack=meals_menu(4)\n    snack_meals=snack[1:-1:2]\n    snack_index=snack[0:-1:2]\n    for i in range(len(snack_meals)):\n        print(snack_index[i],snack_meals[i])\n\n    user_snack= [int(x) for x in input().split()]\n\n    for i in user_snack:\n        meals.append(snack[i*2+1])\n        \n    return meals","7e8af255":"my_meals=display_menu()","7e3f7425":"my_meals","d768c39a":"# the main function ## all categories\n # my_meals=display_menu() remove the comment latter \nk=index_finder(my_meals,data)\nfull_deatils=data.iloc[k,:]\nprint(\"Your nutrition report--->\")\nprint(\"\")\nDV_user,nutrients_feedback =report_generator(full_deatils)\ndata_Scores= scoring_function_v1 (nutrients_feedback,data)# data could be different based on different categories\nuser_scores= scoring_function_v1 (default_foucsed_nutrients,full_deatils)\nx=diet_checker (user_scores)\nprint(user_scores)\nif x== False:\n    print('We suggest you replace :')\n    dropped_meal=rapleced_meal(k)# the meal that should be replced \n    print(dropped_meal) \n    cat=category_mapping(category_finder(dropped_meal))\n\n    print(\"From Category: \", cat)\n    print('With one of the follwing meals:')\n    top_5_meals= top_nth_meals(5,data_Scores)\n    best_meals_printer(top_5_meals)\n    print('Note that the meal that best fits your diet is the top one')\n\n\n    y_n= input('Do you want more selections from the same category thet will be replaced? yes or no')\n\n    if y_n =='no':\n        chose_meal=input('Your index: ')\n        top_meal=top_5_meals[int(chose_meal)][0]\n        user_consumption_before,user_consumption_after,total_differance,new_foucsed_nutrients=meals_replacement(data,full_deatils,top_meal,user_scores,dropped_meal)\n    elif y_n=='yes':\n        data_= meals_menu(category_finder(dropped_meal))\n        data_=data.iloc[index_finder(data_[1:-1:2],data),:]\n        data_Scores= scoring_function_v1 (nutrients_feedback,data_)# data could be different based on different categories\n\n        top_5_meals= top_nth_meals(5,data_Scores)\n        best_meals_printer(top_5_meals)\n        print('Note that the meal that best fits your diet is the top one')\n        chose_meal=input('Your choice index: ')\n        top_meal=top_5_meals[int(chose_meal)][0]\n        user_consumption_before,user_consumption_after,total_differance,new_foucsed_nutrients=meals_replacement(data_,full_deatils,top_meal,user_scores,dropped_meal)\n\n    #user_consumption_before\n    user_consumption_after","2bf6d865":"user_scores","76afaf74":"nutrients_feedback","31691f3e":"user_consumption_before","2cbf1b6f":"nutrients_feedback","e5ec971d":"user_consumption_after","49b99d65":"# taking a random sample of meals eaten in a day","5077d0b9":"#  Data reading","a24b0777":"1. Organize the code and the functions \n1. Test for three versions:\n1.   \tmultiple samples, take the perfect shoot\n1.  \tExperiment the category limitation \n1. Ask him If he want to replace meal by another meal or\n    search for meals contained the recommended    ingredients \n"}}