{"cell_type":{"1a8e1243":"code","d57658bc":"code","85725e5e":"code","36730df8":"code","d835e237":"code","aef289e2":"code","bcc8f83a":"code","786d0417":"code","c1110da3":"code","798f3f92":"code","ddaf855a":"code","054d2862":"code","501250c7":"markdown"},"source":{"1a8e1243":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d57658bc":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\ntrain=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ngender=pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","85725e5e":"print(\"keys of train:\\n{}\".format(train.keys()))\nprint(\"keys of test:\\n{}\".format(test.keys()))\nprint(\"keys of gender:\\n{}\".format(gender.keys()))","36730df8":"print(train['Survived'])\nprint(train['PassengerId'])\nprint(test['PassengerId'])","d835e237":"train_data=train.drop(columns=['Survived'])\ntrain_data.head()","aef289e2":"sns.barplot(x=\"Embarked\", y=\"Survived\", hue=\"Sex\", data=train)","bcc8f83a":"sns.pointplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=train,\n              palette={\"male\": \"yellow\", \"female\": \"brown\"},\n              markers=[\"^\", \"o\"], linestyles=[\"-\", \"--\"]);","786d0417":"def simplify_ages(df):\n    df.Age = df.Age.fillna(-0.5)\n    bins = (-1, 0, 5, 12, 18, 25, 35, 60, 120)\n    group_names = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\n    categories = pd.cut(df.Age, bins, labels=group_names)\n    df.Age = categories\n    return df\n\ndef simplify_cabins(df):\n    df.Cabin = df.Cabin.fillna('N')\n    df.Cabin = df.Cabin.apply(lambda x: x[0])\n    return df\n\ndef simplify_fares(df):\n    df.Fare = df.Fare.fillna(-0.5)\n    bins = (-1, 0, 8, 15, 31, 1000)\n    group_names = ['Unknown', '1_quartile', '2_quartile', '3_quartile', '4_quartile']\n    categories = pd.cut(df.Fare, bins, labels=group_names)\n    df.Fare = categories\n    return df\n\ndef format_name(df):\n    df['Lname'] = df.Name.apply(lambda x: x.split(' ')[0])\n    df['NamePrefix'] = df.Name.apply(lambda x: x.split(' ')[1])\n    return df    \n    \ndef drop_features(df):\n    return df.drop(['Ticket', 'Name', 'Embarked'], axis=1)\n\ndef transform_features(df):\n    df = simplify_ages(df)\n    df = simplify_cabins(df)\n    df = simplify_fares(df)\n    df = format_name(df)\n    df = drop_features(df)\n    return df\n\ntrain = transform_features(train)\ntest = transform_features(test)\ntrain.head()","c1110da3":"from sklearn import preprocessing\ndef encode_features(train,test):\n    features = ['Fare', 'Cabin', 'Age', 'Sex', 'Lname', 'NamePrefix']\n    df_combined = pd.concat([train[features],test[features]])\n    \n    for feature in features:\n        le = preprocessing.LabelEncoder()\n        le = le.fit(df_combined[feature])\n        train[feature] = le.transform(train[feature])\n        test[feature] = le.transform(test[feature])\n    return train,test\n    \ntrain,test = encode_features(train,test)\ntrain.head()","798f3f92":"X_all = train.drop(['Survived', 'PassengerId'], axis=1)\ny_all = train['Survived']\nnum_test = 0.20\nX_train,X_test,y_train,y_test=train_test_split(X_all,y_all,test_size=num_test, random_state=23)\nforest=RandomForestClassifier(n_estimators=5,random_state=2)\nforest.fit(X_train,y_train)","ddaf855a":"print(\"Accuracy on training set:{:.3f}\".format(forest.score(X_train,y_train)))\nprint(\"Accuracy on test set:{:.3f}\".format(forest.score(X_test,y_test)))","054d2862":"ids = test['PassengerId']\npredictions = forest.predict(test.drop('PassengerId', axis=1))\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\ndisplay(output)","501250c7":"The last step:"}}