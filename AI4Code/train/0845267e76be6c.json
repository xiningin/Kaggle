{"cell_type":{"5fa1b82c":"code","1c96f8d1":"code","5f1ee77d":"code","9ab4d29c":"code","b55f89dd":"code","41f3cf9f":"code","390c3bd9":"code","91b1a0ac":"code","4fd5ace8":"code","311aa876":"code","821b591a":"code","f6dc0d44":"code","a1ecdb5d":"code","17ebaa4e":"code","6a367a7d":"code","97a87160":"code","0a999de7":"code","6d79383e":"code","1876a91f":"code","6ee5e228":"code","5963b90d":"code","2550cc92":"code","6688b7b7":"code","23084d4b":"code","3fc42fd7":"code","a4bdb4d7":"markdown","674358f3":"markdown","74dd6788":"markdown","ffbe7eae":"markdown","eb587b0c":"markdown","9862653d":"markdown","abb0d02a":"markdown","c283d0d9":"markdown","ced66ad4":"markdown","15fe747e":"markdown","aba51880":"markdown","d4a678e2":"markdown","886909e8":"markdown","00c85afc":"markdown"},"source":{"5fa1b82c":"import os #to communicate with the opertive system\nimport numpy as np #vector operations\nfrom PIL import Image\n\n#Libraries related with PyTorch\nimport torch #PyTorch library\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom torchvision.datasets import ImageFolder\nimport torchvision.transforms as tt\n\n#Useful libraries for plotting\nfrom torchvision.utils import make_grid\nimport matplotlib.pyplot as plt\n%matplotlib inline  \n#plots in the line below the code, inside the notebook ","1c96f8d1":"train_dir = '\/kaggle\/input\/twoclass-weather-classification\/train' \nclasses = os.listdir(train_dir)\n#num_classes = len(classes)\nprint(classes)","5f1ee77d":"test_dir = '\/kaggle\/input\/twoclass-weather-classification\/test' \nclasses = os.listdir(train_dir)\n#num_classes = len(classes)\nprint(classes)","9ab4d29c":"#Train dataset\n\nsunny_dir = '\/kaggle\/input\/twoclass-weather-classification\/train\/sunny\/'\nsunny_files = os.listdir(sunny_dir)\nprint(len(sunny_files))\n\ncloudy_dir = '\/kaggle\/input\/twoclass-weather-classification\/train\/cloudy\/'\ncloudy_files = os.listdir(cloudy_dir)\nprint(len(cloudy_files))","b55f89dd":"#Test dataset\n\ntest_sunnydir = '\/kaggle\/input\/twoclass-weather-classification\/test\/sunny\/'\ntest_sunny_files = os.listdir(test_sunnydir)\nprint(len(test_sunny_files))\n\ntest_cloudydir = '\/kaggle\/input\/twoclass-weather-classification\/test\/cloudy\/'\ntest_cloudy_files = os.listdir(test_cloudydir)\nprint(len(test_cloudy_files))","41f3cf9f":"print('Examples of the train sunny files: ' + str(sunny_files[:5]))\nprint('Examples of the train cloudy files: ' + str(cloudy_files[:5]))","390c3bd9":"#Using PIL library and pyplot\nplt.imshow(Image.open(sunny_dir+sunny_files[0]))","91b1a0ac":"plt.imshow(Image.open(cloudy_dir+cloudy_files[2974]))","4fd5ace8":"from torchvision.datasets import ImageFolder\ndataset = ImageFolder(train_dir, transform=tt.ToTensor())\ntest_dataset = ImageFolder(test_dir, transform=tt.ToTensor())","311aa876":"#Using the matplotlib.pyplot (plt) library\ndef show_example(img, label):\n    print('Label: ', dataset.classes[label], \"(\"+str(label)+\")\")\n    plt.imshow(img.permute(1, 2, 0))","821b591a":"img, label = dataset[0]\nprint(img.shape, label)\nimg","f6dc0d44":"show_example(*dataset[0])","a1ecdb5d":"img, label = dataset[5000]\nprint(img.shape, label)\nimg","17ebaa4e":"show_example(*dataset[5000])","6a367a7d":"img, label = test_dataset[0]\nprint(img.shape, label)\nimg","97a87160":"show_example(*test_dataset[0])","0a999de7":"img, label = test_dataset[100]\nprint(img.shape, label)\nimg","6d79383e":"show_example(*test_dataset[100])","1876a91f":"batch_size = 64","6ee5e228":"train_loader = DataLoader(dataset, batch_size, shuffle=True, num_workers=4, pin_memory=True)\ntest_loader = DataLoader(test_dataset, batch_size, num_workers=4, pin_memory=True)","5963b90d":"def show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 6))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images, nrow=16).permute(1, 2, 0)) \n        #Permutation \n        break","2550cc92":"show_batch(train_loader)","6688b7b7":"show_batch(test_loader)","23084d4b":"#Import Jovian to commit and save my work there\n!pip install jovian --upgrade -q\nimport jovian","3fc42fd7":"projectName = 'Exploring data_Binary weather classification'\njovian.commit(project=projectName, environment=None)","a4bdb4d7":"## Introduction\n\nI uploaded the dataset on Kaggle and created a new notebook from there.\n\nThe train dataset was a hard work made by other people and [this](https:\/\/www.cse.cuhk.edu.hk\/leojia\/projects\/weatherclassify\/index.htm) is the source. I had to make some pre-processing on it because in the original dataset the image's size are different from one another, this is the [notebook](http:\/\/www.kaggle.com\/polavr\/images-resize) where that code can be found. ","674358f3":"Let's see a couple of examples. The __dataset__[0:4999] are the cloudy images and are labeled with a 0.  \n\nThe __dataset__[5000:9999] are the sunny images and are labeled with a 1. \n\nI will define the function _show_example_ to plot some pictures with their corresponding label. ","74dd6788":"Let's plot a couple of images:","ffbe7eae":"It is possible to observe that the train images are normalized, in the way that the max value of any channel is 1. and the min is 0., for every image. #Hacer funcion para probar","eb587b0c":"An observation: when the 200x200 jpg images are transformed into Tensors through the __tt.ToTensor()__ function, those Tensors have a Tensor.shape = [3,200,200] i.e. three 200x200 matrixes. Each one of those 3 matrix represents a channel; we can imagine that a channel is a color, red, green or blue, and each cell of the matrix stores the intensity (value between 0. and 1.) of the color that the image has there (in that pixel). \nIf we'd want to plot a RGB image stored as a Tensor or matrixes the rows and columns (size) goes before the channels. Thats why we must change the order of the dimensions of the Tensor using the function __permute()__.","9862653d":"## Uploading the images into a dataset","abb0d02a":"# Exploring the dataset: Two-class weather classification","c283d0d9":"Let's plot a batch of the train dataset. ","ced66ad4":"Let's check how many images each folder has","15fe747e":"Importing useful libraries","aba51880":"The train folder contains two folders, cloudy and sunny. These are the classes. Each folder contains 5000 RGB, jpg images of cloudy outdoors and 5000 images of sunny respectively. The size of the images is 200x200 pixels.","d4a678e2":"The names of the images are coded like this:\n\nFor the training dataset: a '__c__' if it represents a cloudy outdoor or a '__s__' for a sunny outdoor + __4 digits__ representing the number of the image + __.jpg__ (the format). \n\nFor the test dataset it's the same but it has 3 digits instead of 4.","886909e8":"Let's plot a batch of the test dataset.","00c85afc":"The test dataset is mostly my own work, except for 13 images in the test_cloud folder (obtained from the webpage Creative commons. It also has two folders, one contains 100 cloudy images and the other contains 153 sunny images. The images are RGB an the format is .jpg. Each has a size of 200x200 pixels."}}