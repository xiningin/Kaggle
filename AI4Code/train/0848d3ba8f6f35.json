{"cell_type":{"e622d51f":"code","8cda49db":"code","588198b7":"code","d9451766":"code","9214885d":"code","0c0bc1fc":"code","dbfaa9b1":"code","c935f125":"code","ed5cb006":"code","1b56a987":"code","fad963ff":"code","0d87246d":"code","4b015938":"code","c457e727":"code","0631933a":"code","ac83c03c":"code","a80b13ce":"code","c52bcb53":"code","464b406a":"code","6caa4ff8":"code","9b0836a0":"code","12c5bfc6":"code","d246f2fc":"code","12d2b411":"code","9113c300":"code","6ab7b5ad":"code","21aa875b":"code","9c67a575":"code","b3621397":"code","b7051fdf":"code","60afa248":"code","026b5f3b":"code","b6983751":"code","1562f05e":"code","843acaa3":"markdown","3b06d6c3":"markdown","8992002b":"markdown","93e6adf5":"markdown","8ff78211":"markdown","ce1cba86":"markdown","ebec3353":"markdown","3100e5ff":"markdown","0e917abc":"markdown","e736ba33":"markdown","04a1c57b":"markdown","2b43c2d1":"markdown","0688b397":"markdown","948acad7":"markdown","12b08576":"markdown","9c684eed":"markdown","021af2f7":"markdown","987bfb24":"markdown"},"source":{"e622d51f":"# linear algebra\nimport numpy as np\n\n# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd \n\n#%matplotlib inline\nimport matplotlib.pyplot as plt\n\n#data visualization\nimport seaborn as sns\n\nimport os\n\nfrom sklearn.model_selection import train_test_split\n\n#logisticRegression\nfrom sklearn.linear_model import LogisticRegression\n\nfrom xgboost import XGBClassifier\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.neighbors import KNeighborsClassifier \n\nfrom sklearn.svm import SVC\n\nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.model_selection import GridSearchCV\n\n#feature scaling\nfrom sklearn.preprocessing import StandardScaler  \n","8cda49db":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","588198b7":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","d9451766":"train_data.dtypes","9214885d":"categorical_columns = [\"Sex\",\"Embarked\",\"Pclass\"]\ncontinous_columns  = [\"Age\",\"Fare\",\"SibSp\",\"Parch\"]","0c0bc1fc":"plt.figure(figsize=(10,3))\nfor i,col in enumerate(categorical_columns,1):\n    plt.subplot(1,3,i)\n    train_data[col].value_counts().plot.bar()\n    plt.title(col)\n    \n    \n","dbfaa9b1":"plt.figure(figsize=(15,3))\nfor i,col in enumerate(continous_columns,1):\n    plt.subplot(1,4,i)\n    train_data[col].hist(log=True)\n    plt.title(col)\n    ","c935f125":"plt.figure(figsize=(15,3))\nfor i,col in enumerate(continous_columns,1):\n    plt.subplot(1,4,i)\n    plt.boxplot(np.log(train_data[col].fillna(0)+1),meanline=True,showmeans=True)\n    plt.title(col)\n    \n\n\n","ed5cb006":"sns.pairplot(train_data)","1b56a987":"sns.boxplot(x=train_data.Sex,y = train_data.Age)","fad963ff":"len(train_data)","0d87246d":"def preprocess(data):\n    x = data[categorical_columns+continous_columns].copy()\n    ageNadict = {\"male\":30,\"female\":25}\n    x.Age.fillna(x.Sex.map(ageNadict),inplace=True)\n    \n    x.Fare.fillna(0,inplace=True)\n    \n    x.SibSp = x.SibSp.map(lambda x: x > 0).astype(int)\n    x.Parch=x.Parch.map(lambda x: x > 0).astype(int)\n    x.Fare = (x.Fare - train_data.Fare.mean())\/train_data.Fare.std()\n    x.Age = (x.Age - train_data.Age.mean())\/train_data.Age.std()\n    x=pd.get_dummies(x,columns=[\"Pclass\",\"SibSp\",\"Parch\",\"Embarked\",\"Sex\"])\n    \n    return x","4b015938":"x = preprocess(train_data)\ny = train_data[\"Survived\"]","c457e727":"x","0631933a":"x.shape, y.shape","ac83c03c":"train_x,val_x,train_y, val_y = train_test_split(x, y, test_size=0.30, random_state=42)","a80b13ce":"train_x.shape,train_y.shape,val_x.shape,val_y.shape","c52bcb53":"classifier = LogisticRegression(random_state=0, max_iter=2500)\nclassifier.fit(train_x,train_y)\nclassifier.score(val_x,val_y)\nsns.heatmap(confusion_matrix(val_y,classifier.predict(val_x)),annot=True,fmt='d')","464b406a":"classifier.score(val_x,val_y)","6caa4ff8":"classifier = XGBClassifier(max_depth= 7, n_estimators= 25,learning_rate = 0.1)\nclassifier.fit(train_x,train_y)\nclassifier.score(val_x,val_y)\nsns.heatmap(confusion_matrix(val_y,classifier.predict(val_x)),annot=True,fmt='d')","9b0836a0":"classifier.score(val_x,val_y)","12c5bfc6":"classifier = RandomForestClassifier(n_estimators = 15,max_depth=5)\nclassifier.fit(train_x,train_y)\nclassifier.score(val_x,val_y)\nsns.heatmap(confusion_matrix(val_y,classifier.predict(val_x)),annot=True,fmt='d')","d246f2fc":"classifier.score(val_x,val_y)","12d2b411":"classifier = SVC(kernel='linear', random_state = 0)\nclassifier.fit(train_x,train_y)\nclassifier.score(val_x,val_y)\nsns.heatmap(confusion_matrix(val_y,classifier.predict(val_x)),annot=True,fmt='d')","9113c300":"classifier.score(val_x,val_y)","6ab7b5ad":"clf = KNeighborsClassifier(n_neighbors=90)\nclassifier.fit(train_x,train_y)\nclassifier.score(val_x,val_y)\nsns.heatmap(confusion_matrix(val_y,classifier.predict(val_x)),annot=True,fmt='d')","21aa875b":"classifier.score(val_x,val_y)","9c67a575":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","b3621397":"test_data.isna().sum()","b7051fdf":"test_x = preprocess(test_data)\n","60afa248":"test_survived = classifier.predict(test_x)","026b5f3b":"submission = test_data[[\"PassengerId\"]].copy()","b6983751":"submission[\"Survived\"] = test_survived","1562f05e":"submission.to_csv(\"submission.csv\",index = False)\n","843acaa3":"# Variable identification\n\n* ## Predictor\nPclass, Name, Sex, Age, SibSp, Parch, Ticket, Fare, Cabin, Embarked\n* ## Target\nSurvived","3b06d6c3":"## Continuous column visualization","8992002b":"# Importing the Libraries","93e6adf5":"## Finding data types using .dtypes inorder to find the categorical & continuous coulmns","8ff78211":"# Reading the test data","ce1cba86":"## For knowing the file paths of train & test files provided","ebec3353":"# Finding missing values from test data ","3100e5ff":"# SVM","0e917abc":"# Random Forest Classifier","e736ba33":"## Bivariant Visualization","04a1c57b":"# LogisticRegression Model","2b43c2d1":"## Categorical column visualization","0688b397":"* ### Reading a train.csv file","948acad7":"# Prediction","12b08576":"# Feature Engineering\n\n* Normalizing Fare & Age\n* Applying One Hot Encoding","9c684eed":"# Data preprocessing","021af2f7":"# KNN","987bfb24":"# XGBoost Classifier"}}