{"cell_type":{"96ea9396":"code","c56c6f4d":"code","f9568411":"code","8b1337eb":"code","0b59d8f2":"code","df6569aa":"code","de70ae5c":"code","33c4807f":"code","740d6040":"code","d8d47cb4":"code","78fb98ac":"code","8a4fd729":"code","70abdeff":"code","3ad10f62":"code","77ece466":"code","2de554f2":"code","9a611997":"code","9f151b98":"code","35d6a4c2":"code","b91ca5ee":"code","3c433dfa":"code","322f89c7":"code","6a9a35fa":"code","ce1186f5":"markdown","3ad89a58":"markdown"},"source":{"96ea9396":"import numpy as np\nimport sklearn\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.preprocessing import PolynomialFeatures\nimport matplotlib.pyplot as plt","c56c6f4d":"# Generate data\n# training data\ntraining_samples = 1000\nx_train = np.random.rand(training_samples,1)\nnoise_train = np.random.rand(training_samples,1) * 0.6\ny_train = 24 + 4*x_train + noise_train\n\n# testing data\ntesting_samples = 100\nx_test = np.random.rand(testing_samples,1)\nnoise_test = np.random.rand(testing_samples,1) * 0.6\ny_test = 24 + 4*x_test + noise_test","f9568411":"# plot data\n# plot training data\nplt.scatter(x_train, y_train, alpha=0.2)\n# plot testing data\nplt.scatter(x_test, y_test)","8b1337eb":"# call linear regression model from sklearn\nmodel = LinearRegression()\n# fit model to data\nmodel.fit(x_train, y_train)\n# show model parameters \nprint('Coef:', model.coef_, 'Intercept:', model.intercept_)","0b59d8f2":"# predict on test data\ny_prediction = model.predict(x_test)","df6569aa":"# calculate mse loss\nprediction_error = mean_squared_error(y_test, y_prediction)\n\n# print error\nprint('error:', prediction_error)","de70ae5c":"# calculate mae loss\nmse_error = mean_absolute_error(y_test, y_prediction)\n# print error\nprint('error:', mse_error)","33c4807f":"# plot training samples\nplt.scatter(x_train, y_train, alpha=0.2, label='training samples')\n# plot testing samples\nplt.scatter(x_test, y_test, alpha=0.4, label='testing samples')\n# plot predicted testing samples\nplt.scatter(x_test, y_prediction, label='predicted testing samples')\n# plot fitting line\nplt.plot(x_test, y_prediction, 'r', label='fitting line')\n# add legend\nplt.legend()","740d6040":"# Generate data\n# training data\ntraining_samples = 1000\nx_train = np.random.rand(training_samples,1)\nnoise_train = np.random.rand(training_samples,1) * 0.9\ny_train = 24 + 4*x_train + noise_train\n\n# testing data\ntesting_samples = 100\nx_test = np.random.rand(testing_samples,1)\nnoise_test = np.random.rand(testing_samples,1) * 0.9\ny_test = 24 + 4*x_test + noise_test","d8d47cb4":"# plot data\n# plot training data\nplt.scatter(x_train, y_train, alpha=0.2)\n# plot testing data\nplt.scatter(x_test, y_test)","78fb98ac":"# call linear regression model from sklearn\nmodel = LinearRegression()\n# fit model to data\nmodel.fit(x_train, y_train)\n# show model parameters \nprint('Coef:', model.coef_, 'Intercept:', model.intercept_)","8a4fd729":"# predict on test data\ny_prediction = model.predict(x_test)","70abdeff":"# calculate mse loss\nprediction_error = mean_squared_error(y_test, y_prediction)\n\n# print error\nprint('error:', prediction_error)","3ad10f62":"# Generate data\n# training data\ntraining_samples = 1000\nx_train = np.random.rand(training_samples,1)\nnoise_train = np.random.rand(training_samples,1) * 0.6\ny_train = 5 + 2*x_train + 4*(x_train**2) + 2*(x_train**3) - 7*(x_train**4) - 2*(x_train**5) + noise_train\n\n# testing data\ntesting_samples = 100\nx_test = np.random.rand(testing_samples,1)\nnoise_test = np.random.rand(testing_samples,1) * 0.6\ny_test = 5 + 2*x_test + 4*(x_test**2) + 2*(x_test**3) - 7*(x_test**4) - 2*(x_test**5) + noise_test","77ece466":"# plot data\n# plot training data\nplt.scatter(x_train, y_train, alpha=0.2)\n# plot testing data\nplt.scatter(x_test, y_test)","2de554f2":"# call linear regression model from sklearn\nmodel = LinearRegression()\n# fit model to data\nmodel.fit(x_train, y_train)\n# show model parameters \nprint('Coef:', model.coef_, 'Intercept:', model.intercept_)","9a611997":"# predict on test data\ny_prediction = model.predict(x_test)","9f151b98":"# calculate mse loss\nprediction_error = mean_squared_error(y_test, y_prediction)\n\n# print error\nprint('error:', prediction_error)","35d6a4c2":"# plot training samples\nplt.scatter(x_train, y_train, alpha=0.2, label='training samples')\n# plot testing samples\nplt.scatter(x_test, y_test, alpha=0.4, label='testing samples')\n# plot predicted testing samples\nplt.scatter(x_test, y_prediction, label='predicted testing samples')\n# plot fitting line\nplt.plot(x_test, y_prediction, 'r', label='fitting line')\n# add legend\nplt.legend()","b91ca5ee":"# call polynomail features\npoly_transform = PolynomialFeatures(degree=5)\nx_train_poly = poly_transform.fit_transform(x_train)[:,1:]\n\n# call linear regression model from sklearn\nmodel = LinearRegression()\n# fit model to data\nmodel.fit(x_train_poly, y_train)\n# show model parameters \nprint('Coef:', model.coef_, 'Intercept:', model.intercept_)","3c433dfa":"# transfrom test samples\nx_test_poly = poly_transform.fit_transform(x_test)[:,1:]\n# predict on test data\ny_prediction = model.predict(x_test_poly)","322f89c7":"# calculate mse loss\nprediction_error = mean_squared_error(y_test, y_prediction)\n\n# print error\nprint('error:', prediction_error)","6a9a35fa":"# plot training samples\nplt.scatter(x_train, y_train, alpha=0.2, label='training samples')\n# plot testing samples\nplt.scatter(x_test, y_test, alpha=0.4, label='testing samples')\n# plot predicted testing samples\nplt.scatter(x_test, y_prediction, label='predicted testing samples')\n# # plot fitting line\n# plt.plot(x_test, y_prediction, 'r', label='fitting line')\n# sort x_test index\nsorted_index = np.argsort(x_test, axis=0)[:,0]\n# plot fitting line using sorted index\nplt.plot(x_test[sorted_index], y_prediction[sorted_index], 'r', label='fitting line')\n# add legend\nplt.legend()","ce1186f5":"# Another example","3ad89a58":"# High degree example"}}