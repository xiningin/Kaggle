{"cell_type":{"19431115":"code","122649f4":"code","11834854":"code","37320ea3":"code","24789b5f":"code","707d2808":"code","785c804f":"code","44419637":"code","86395bc8":"code","095f9e03":"code","fbee9c9f":"code","b9a5d073":"code","a716939a":"code","dc25a1a5":"code","1672708d":"code","b88427d7":"code","d6318a18":"code","79c348bb":"code","df85a41c":"code","309773a0":"code","e3992e8b":"code","a024b991":"code","1f7efa87":"code","5776a5ef":"code","1d768d9e":"code","1122c67e":"code","71fdb357":"code","72867562":"code","54d0427d":"code","e6348b26":"code","ce9c3c6c":"code","79bdd185":"code","bf5abed3":"code","5fb57abc":"code","d9c93bc6":"code","663f8388":"code","0193c89e":"code","03b30897":"code","7c1954e2":"code","54197d85":"markdown","98e954fe":"markdown","9792e37b":"markdown"},"source":{"19431115":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom random import randint\nimport warnings\nwarnings.filterwarnings('ignore')","122649f4":"df = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')","11834854":"print (\"Size of Data:\",df.size)\nprint(\"Shape of Columns:\",df.shape[1])\nprint(\"Shape of Rows:\",df.shape[0])\n","37320ea3":"df.info()","24789b5f":"print(df.duplicated().sum().sum(),\"Duplicate Value Found\")\nprint(df.isnull().sum().sum(),\"Missing Value Found\")","707d2808":"df.head()","785c804f":"df.describe().T","44419637":"color = ['Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', 'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys', 'Greys_r', 'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', 'Pastel1_r', 'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', 'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy', 'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r', 'Wistia', 'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn', 'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r', 'cool', 'cool_r', 'coolwarm', 'coolwarm_r', 'copper', 'copper_r', 'crest', 'crest_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'flare', 'flare_r', 'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', 'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', 'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'icefire', 'icefire_r', 'inferno', 'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', 'mako', 'mako_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma', 'plasma_r', 'prism', 'prism_r', 'rainbow', 'rainbow_r', 'rocket', 'rocket_r', 'seismic', 'seismic_r', 'spring', 'spring_r', 'summer', 'summer_r', 'tab10', 'tab10_r', 'tab20', 'tab20_r', 'tab20b', 'tab20b_r', 'tab20c', 'tab20c_r', 'terrain', 'terrain_r', 'turbo', 'turbo_r', 'twilight', 'twilight_r', 'twilight_shifted', 'twilight_shifted_r', 'viridis', 'viridis_r', 'vlag', 'vlag_r', 'winter', 'winter_r']","86395bc8":"print (df['Age'].value_counts().sort_index(ascending=True))\n\nvalue = randint(0,len(color)-4)\nplt.figure(figsize=(10,5))\nsns.countplot(df['Age'],palette=color[value])\nplt.xticks(rotation='vertical')\nplt.title(\"Age Count\",fontsize = 16)\n\nplt.tight_layout(pad=0.5)\nplt.show()","095f9e03":"print (df['Pregnancies'].value_counts().sort_index(ascending=True))\nvalue = randint(0,len(color)-4)\n\nplt.figure(figsize=(10,5))\nsns.countplot(df['Pregnancies'],palette=color[value])\nplt.xlabel(\"Pregnency Times\")\nplt.xticks(rotation='vertical')\nplt.title(\"Pregnency Times\",fontsize = 16)\n\nplt.tight_layout(pad=0.5)\nplt.show()","fbee9c9f":"plt.figure(figsize=(10,5))\nvalue = randint(0,len(color)-4)\nsns.barplot(data=df,x='Pregnancies',y=\"Age\",palette=color[value])\nplt.xlabel(\"Pregnency Times\")\nplt.xticks(rotation='vertical')\nplt.title(\"Ralation Between Age and Pregnency Times\",fontsize = 16)\n\nplt.tight_layout(pad=0.5)\nplt.show()","b9a5d073":"plt.figure(figsize=(12,8))\nvalue = randint(0,len(color)-4)\n\nplt.subplot(2,2,1)\nsns.scatterplot(data=df,x='BMI',y=\"Age\",hue='Outcome',palette=color[value])\nplt.xticks(rotation='vertical')\nplt.title(\"Ralation Between Age and BMI\",fontsize = 16)\n\nplt.subplot(2,2,2)\nsns.scatterplot(data=df,x='BloodPressure',y=\"Age\",hue='Outcome',palette=color[value])\nplt.xticks(rotation='vertical')\nplt.title(\"Ralation Between Age and Blood Pressure\",fontsize = 16)\n\nplt.subplot(2,2,3)\nsns.scatterplot(data=df,x='Glucose',y=\"Age\",hue='Outcome',palette=color[value])\nplt.xticks(rotation='vertical')\nplt.title(\"Ralation Between Age and Glucose Level\",fontsize = 16)\n\nplt.subplot(2,2,4)\nsns.scatterplot(data=df,x='Insulin',y=\"Age\",hue='Outcome',palette=color[value])\nplt.xticks(rotation='vertical')\nplt.title(\"Ralation Between Age and Insulin\",fontsize = 16)\n\nplt.tight_layout(pad=0.5)\nplt.show()","a716939a":"df_diabetic = df.copy()","dc25a1a5":"df_diabetic.head()","1672708d":"df_diabetic['Outcome'].replace(0,'Healthy',inplace=True)","b88427d7":"df_diabetic['Outcome'].replace(1,'Diabetic',inplace=True)","d6318a18":"df_diabetic.head()","79c348bb":"print (df_diabetic['Outcome'].value_counts().sort_index(ascending=True))\n\nplt.figure(figsize=(6,5))\nvalue = randint(0,len(color)-4)\n\nsns.countplot(df_diabetic['Outcome'],palette=color[value])\nplt.xlabel(\"Diabetes Or Healty\")\nplt.title(\"Diabeties Count\",fontsize = 16)\n\nplt.tight_layout(pad=0.5)\nplt.show()","df85a41c":"out_df=pd.DataFrame(df.groupby('Outcome')['Outcome'].count())\ncolors = ['green','red']\nplt.pie(out_df['Outcome'],labels=['healthy','Diabetic'],autopct='%.0f%%',colors=colors,radius=2,explode = (0, 0.1),shadow=True)\nplt.legend()\nplt.show()","309773a0":"value = randint(0,len(color)-4)\nsns.pairplot(df,palette=color[value],hue='Outcome',corner=True)\nplt.show()","e3992e8b":"plt.figure(figsize=(10,5))\nvalue = randint(0,len(color)-4)\n\nplt.suptitle(\"Diabetes Age And Pregenency\",fontsize=15)\nplt.subplot(1,2,1)\nsns.violinplot(data = df,y='Age',x='Outcome',palette=color[value])\nplt.subplot(1,2,2)\nsns.violinplot(data = df,y='Pregnancies',x='Outcome',palette=color[value])\n\nplt.tight_layout(pad=0.5)\nplt.show()","a024b991":"plt.figure(figsize=(8,6))\nvalue = randint(0,len(color)-4)\n\nsns.heatmap(df.corr(),annot=True,cmap=color[value])\nplt.title(\"Correlation Heatmap\",fontsize = 16)\n\nplt.tight_layout(pad=0.5)\nplt.show()","1f7efa87":"df.head()","5776a5ef":"plt.figure(figsize=(12,8))\nplt.suptitle(\"Plot Outliars\",fontsize=16)\nvalue = randint(0,len(color)-4)\n\n\nplt.subplot(4,2,1)\nsns.boxplot(data=df,x='Glucose',palette=color[value])\n\nplt.subplot(4,2,2)\nsns.boxplot(data=df,x='BloodPressure',palette=color[value])\n\nplt.subplot(4,2,3)\nsns.boxplot(data=df,x='SkinThickness',palette=color[value])\n\nplt.subplot(4,2,4)\nsns.boxplot(data=df,x='Insulin',palette=color[value])\n\nplt.subplot(4,2,5)\nsns.boxplot(data=df,x='BMI',palette=color[value])\n\nplt.subplot(4,2,6)\nsns.boxplot(data=df,x='DiabetesPedigreeFunction',palette=color[value])\n\nplt.subplot(4,2,7)\nsns.boxplot(data=df,x='Pregnancies',palette=color[value])\n\nplt.subplot(4,2,8)\nsns.boxplot(data=df,x='Age',palette=color[value])\n\nplt.tight_layout(pad=0.5)\nplt.show()","1d768d9e":"plt.figure(figsize=(12,8))\nplt.suptitle(\"Removing Outliars\",fontsize=16)\nvalue = randint(0,len(color)-4)\n\nplt.subplot(4,2,1)\ndf=df[(df['Glucose']>45)&(df['Glucose']<170)]\nsns.boxplot(data=df,x='Glucose',palette=color[value])\n\nplt.subplot(4,2,2)\ndf=df[(df['BloodPressure']>40)&(df['BloodPressure']<100)]\nsns.boxplot(data=df,x='BloodPressure',palette=color[value])\n\nplt.subplot(4,2,3)\ndf=df[(df['SkinThickness']<95)]\nsns.boxplot(data=df,x='SkinThickness',palette=color[value])\n\nplt.subplot(4,2,4)\ndf=df[(df['Insulin']<260)]\nsns.boxplot(data=df,x='Insulin',palette=color[value])\n\nplt.subplot(4,2,5)\ndf=df[(df['BMI']>10)&(df['BMI']<47)]\nsns.boxplot(data=df,x='BMI',palette=color[value])\n\nplt.subplot(4,2,6)\ndf=df[(df['DiabetesPedigreeFunction']<1.0)]\nsns.boxplot(data=df,x='DiabetesPedigreeFunction',palette=color[value])\n\nplt.subplot(4,2,7)\ndf=df[(df['Pregnancies']<12)]\nsns.boxplot(data=df,x='Pregnancies',palette=color[value])\n\nplt.subplot(4,2,8)\ndf=df[(df['Age']<55)]\nsns.boxplot(data=df,x='Age',palette=color[value])\n\nplt.tight_layout(pad=0.5)\nplt.show()","1122c67e":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.utils import resample\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, f1_score,accuracy_score, precision_score, recall_score, roc_auc_score  ","71fdb357":"encoder =LabelEncoder()","72867562":"columns = ['Age','Pregnancies','DiabetesPedigreeFunction','BMI','Insulin','SkinThickness','BloodPressure','Glucose']","54d0427d":"for i in columns:\n    df[i] = encoder.fit_transform(df[i])","e6348b26":"df.head()","ce9c3c6c":"majority = df[df['Outcome']==0]\nminority = df[df['Outcome']==1]","79bdd185":"unsample =resample(minority,replace=True,n_samples=len(majority))","bf5abed3":"diabetic_analysis = pd.concat([majority,unsample])\ndiabetic_analysis = diabetic_analysis.sample(frac=1).reset_index(drop=True)","5fb57abc":"diabetic_analysis.head()","d9c93bc6":"X = diabetic_analysis.drop(columns=['Outcome'],axis=1)\ny = diabetic_analysis['Outcome']","663f8388":"DataModels = pd.DataFrame()","0193c89e":"def TrainandTestwithMinMaxScalar (X,y,algorithm,modelname):\n    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=52)\n    norm =MinMaxScaler().fit(X_train)\n    X_train =norm.transform(X_train)\n    X_test = norm.transform(X_test)\n    model = algorithm\n    model.fit(X_train,y_train)\n    predection = model.predict(X_test)\n    score = round((accuracy_score(y_test, predection)*100),2)\n    print (\"\\nModel Score:\",score,\"%\")\n    print (\"precision_score:\",precision_score(y_test,predection))\n    print(\"Recall\",recall_score(y_test,predection))\n    print (\"F1 Score:\",f1_score(y_test,predection))\n    print (\"ROC AUC Score:\",roc_auc_score(y_test,predection))\n    print(\"Confusion Matrix:\",confusion_matrix(y_test,predection))\n    print()\n    \n    model = {}\n    \n    model['Algorithm'] = modelname\n    model['Model Score'] = str(score) + \"%\"\n    model['Precision'] = round(precision_score(y_test, predection),2)\n    model['Recall'] = round(recall_score(y_test, predection),2)\n    model['F1 score'] = round(f1_score(y_test, predection),2)\n    model['ROC-AUC score'] = round(roc_auc_score(y_test, predection),2)\n    \n    return model","03b30897":"algorithms = {\"Random Forest\":RandomForestClassifier(),\"Decesion Tree\":DecisionTreeClassifier(),\"Logistic Regression\":LogisticRegression(),\n            \"K-Nearest- Neghobour\":KNeighborsClassifier(n_neighbors=3),\"Supportive Vector Classifier\":SVC()}\n\nfor i,j in algorithms.items():\n    print(\"Algorithm Performance: {}\".format(i))\n    model= TrainandTestwithMinMaxScalar(X,y,j,i)\n    DataModels =DataModels.append(model,ignore_index=True)\n    print()","7c1954e2":"DataModels.sort_values(by=\"F1 score\",ascending=False)","54197d85":"# Reading Data","98e954fe":"# Modeling","9792e37b":"# Analyzing Data"}}