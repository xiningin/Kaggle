{"cell_type":{"fe8005a8":"code","7326f6a6":"code","09ee68fa":"code","bb892c7d":"code","4c5eed06":"code","09bd6cd5":"code","032133a2":"code","461fd5a8":"code","15e3e62f":"code","75657527":"code","6cbbe254":"code","cf4c63e3":"code","aaa83185":"code","66115c53":"code","24c04ae9":"code","eac1e515":"code","b00425df":"code","febbc301":"code","18323257":"code","8c0104eb":"code","f6e2dce3":"code","0d6aad1f":"code","6429364a":"code","6ef293bf":"code","3d69becf":"code","40ef0b23":"code","b0adb7cc":"code","b8b0f7a3":"code","8837b2f8":"code","92f99e48":"code","bf6af1ee":"code","9054d35e":"code","653c910b":"code","b46cc589":"code","b9e1e970":"code","b5195b5b":"code","90e45c8e":"code","e545fd33":"code","abea8827":"code","c1b666df":"code","7ad21ac8":"code","76a924a6":"code","d53a47c6":"code","d5d0ed93":"code","193389ef":"code","c1695826":"code","f56f187f":"code","e265129b":"code","60bda42f":"code","19fe6efd":"code","40fe8f1a":"code","5604916e":"code","f12da426":"code","7508c427":"code","7900ba7d":"code","d24c4abb":"code","cc795b6a":"code","9c789c1c":"code","ab0c9a35":"code","1c8a3fb1":"code","8ecfc26d":"code","85213807":"code","014b8a11":"code","8532a5b0":"code","0af4eab0":"code","4d4c4319":"code","d21a319a":"markdown","49e2d2f1":"markdown","e42712b3":"markdown","4ce4ea36":"markdown","f6b44253":"markdown","536cd31c":"markdown","3b5ac873":"markdown","3d5ec5d4":"markdown"},"source":{"fe8005a8":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')\nimport matplotlib.pyplot as plt\nimport seaborn as sns","7326f6a6":"df_train = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")","09ee68fa":"#creating dataframe for the required output\nsubmission_MIX = pd.DataFrame()\nsubmission_MIX['User_ID'] = df_test['User_ID']\nsubmission_MIX['Product_ID'] = df_test['Product_ID']","bb892c7d":"df_train.shape","4c5eed06":"df_test.shape","09bd6cd5":"df = pd.concat([df_train,df_test])","032133a2":"df.shape","461fd5a8":"df.head()","15e3e62f":"df.info()","75657527":"df.describe()","6cbbe254":"df['Marital_Status'].unique()","cf4c63e3":"a = df.groupby('Marital_Status')['Purchase'].mean()\na.plot.bar()","aaa83185":"df['Occupation'].unique()","66115c53":"a = df.groupby('Occupation')['Purchase'].mean()\na.plot.bar()","24c04ae9":"df['Gender'].unique()","eac1e515":"a = df.groupby('Gender')['Purchase'].mean()\na.plot.bar()","b00425df":"df['Product_Category_1'].unique()","febbc301":"a = df.groupby('Product_Category_1')['Purchase'].count()\na.plot.bar()","18323257":"df['Product_Category_2'].unique()","8c0104eb":"a = df.groupby('Product_Category_2')['Purchase'].count()\na.plot.bar()","f6e2dce3":"df['Product_Category_3'].unique()","0d6aad1f":"a = df.groupby('Product_Category_3')['Purchase'].count()\na.plot.bar()","6429364a":"df['Age'].unique()","6ef293bf":"a=df.groupby('Age')['Purchase'].mean()\na.plot.bar()","3d69becf":"df['City_Category'].unique()","40ef0b23":"a=df.groupby('City_Category')['Purchase'].mean()\na.plot.bar()","b0adb7cc":"df['Stay_In_Current_City_Years'].unique()","b8b0f7a3":"a = df.groupby('Stay_In_Current_City_Years')['Purchase'].mean()\na.plot.bar()","8837b2f8":"#df['Product_Category_1'] = df['Product_Category_1'].astype(\"O\")\ndf['Product_Category_2'] = df['Product_Category_2'].astype(\"O\")\ndf['Product_Category_3'] = df['Product_Category_3'].astype(\"O\")","92f99e48":"#df['Product_Category_1'] = df['Product_Category_1'].fillna(df['Product_Category_1'].mode()[0])\ndf['Product_Category_2'] = df['Product_Category_2'].fillna(df['Product_Category_2'].mode()[0])\ndf['Product_Category_3'] = df['Product_Category_3'].fillna(df['Product_Category_3'].mode()[0])","bf6af1ee":"df['Product_Category_2'] = df['Product_Category_2'].astype(\"int\")\ndf['Product_Category_3'] = df['Product_Category_3'].astype(\"int\")","9054d35e":"df.info()","653c910b":"df['Gender'] = df['Gender'].map({'F':0,'M':1})\ndf['City_Category'] = df['City_Category'].map({'A':0,'B':1,'C':2})\ndf['Stay_In_Current_City_Years'] = df['Stay_In_Current_City_Years'].map({'0':0,'1':1,'2':2,'3':3,'4+':4})\ndf['Age'] = df['Age'].map({'0-17':0,'18-25':1,'26-35':2,'36-45':3,'46-50':4,'51-55':5,'55+':6})","b46cc589":"df.head()","b9e1e970":"df_train = df[:550068]\ndf_test = df[550068:]","b5195b5b":"#df_train.drop(['User_ID','Product_ID'],axis=1,inplace=True)","90e45c8e":"from scipy import stats\nz = np.abs(stats.zscore(df_train['Purchase']))\n\nthreshold = 2.33\nnp.where(z > 2.33)\n\ndf_train = df_train[(z<2.33)]","e545fd33":"df_train.head()","abea8827":"df_train[\"Age_Count\"] = df_train.groupby(['Age'])['Age'].transform('count')\nage_count_dict = df_train.groupby(['Age']).size().to_dict()\ndf_test['Age_Count'] = df_test['Age'].apply(lambda x:age_count_dict.get(x,0))\n\ndf_train[\"Occupation_Count\"] = df_train.groupby(['Occupation'])['Occupation'].transform('count')\noccupation_count_dict = df_train.groupby(['Occupation']).size().to_dict()\ndf_test['Occupation_Count'] = df_test['Occupation'].apply(lambda x:occupation_count_dict.get(x,0))\n\ndf_train[\"User_ID_Count\"] = df_train.groupby(['User_ID'])['User_ID'].transform('count')\nuserID_count_dict = df_train.groupby(['User_ID']).size().to_dict()\ndf_test['User_ID_Count'] = df_test['User_ID'].apply(lambda x:userID_count_dict.get(x,0))\n\ndf_train[\"Product_ID_Count\"] = df_train.groupby(['Product_ID'])['Product_ID'].transform('count')\nproductID_count_dict = df_train.groupby(['Product_ID']).size().to_dict()\ndf_test['Product_ID_Count'] = df_test['Product_ID'].apply(lambda x:productID_count_dict.get(x,0))","c1b666df":"\ndf_train[\"Product_Category_1_Count\"] = df_train.groupby(['Product_Category_1'])['Product_Category_1'].transform('count')\npc1_count_dict = df_train.groupby(['Product_Category_1']).size().to_dict()\ndf_test['Product_Category_1_Count'] = df_test['Product_Category_1'].apply(lambda x:pc1_count_dict.get(x,0))\n\ndf_train[\"Product_Category_2_Count\"] = df_train.groupby(['Product_Category_2'])['Product_Category_2'].transform('count')\npc2_count_dict = df_train.groupby(['Product_Category_2']).size().to_dict()\ndf_test['Product_Category_2_Count'] = df_test['Product_Category_2'].apply(lambda x:pc2_count_dict.get(x,0))\n\ndf_train[\"Product_Category_3_Count\"] = df_train.groupby(['Product_Category_3'])['Product_Category_3'].transform('count')\npc3_count_dict = df_train.groupby(['Product_Category_3']).size().to_dict()\ndf_test['Product_Category_3_Count'] = df_test['Product_Category_3'].apply(lambda x:pc3_count_dict.get(x,0))","7ad21ac8":"df_train[\"User_ID_MinPrice\"] = df_train.groupby(['User_ID'])['Purchase'].transform('min')\nuserID_min_dict = df_train.groupby(['User_ID'])['Purchase'].min().to_dict()\ndf_test['User_ID_MinPrice'] = df_test['User_ID'].apply(lambda x:userID_min_dict.get(x,0))\n\ndf_train[\"User_ID_MaxPrice\"] = df_train.groupby(['User_ID'])['Purchase'].transform('max')\nuserID_max_dict = df_train.groupby(['User_ID'])['Purchase'].max().to_dict()\ndf_test['User_ID_MaxPrice'] = df_test['User_ID'].apply(lambda x:userID_max_dict.get(x,0))\n\ndf_train[\"User_ID_MeanPrice\"] = df_train.groupby(['User_ID'])['Purchase'].transform('mean')\nuserID_mean_dict = df_train.groupby(['User_ID'])['Purchase'].mean().to_dict()\ndf_test['User_ID_MeanPrice'] = df_test['User_ID'].apply(lambda x:userID_mean_dict.get(x,0))","76a924a6":"\ndf_train[\"Product_ID_MinPrice\"] = df_train.groupby(['Product_ID'])['Purchase'].transform('min')\nproductID_min_dict = df_train.groupby(['Product_ID'])['Purchase'].min().to_dict()\ndf_test['Product_ID_MinPrice'] = df_test['Product_ID'].apply(lambda x:productID_min_dict.get(x,0))\n\ndf_train[\"Product_ID_MaxPrice\"] = df_train.groupby(['Product_ID'])['Purchase'].transform('max')\nproductID_max_dict = df_train.groupby(['Product_ID'])['Purchase'].max().to_dict()\ndf_test['Product_ID_MaxPrice'] = df_test['Product_ID'].apply(lambda x:productID_max_dict.get(x,0))\n\ndf_train[\"Product_ID_MeanPrice\"] = df_train.groupby(['Product_ID'])['Purchase'].transform('mean')\nproductID_mean_dict = df_train.groupby(['Product_ID'])['Purchase'].mean().to_dict()\ndf_test['Product_ID_MeanPrice'] = df_test['Product_ID'].apply(lambda x:productID_mean_dict.get(x,0))","d53a47c6":"userID_25p_dict = df_train.groupby(['User_ID'])['Purchase'].apply(lambda x:np.percentile(x,25)).to_dict()\ndf_train['User_ID_25PercPrice'] = df_train['User_ID'].apply(lambda x:userID_25p_dict.get(x,0))\ndf_test['User_ID_25PercPrice'] = df_test['User_ID'].apply(lambda x:userID_25p_dict.get(x,0))\n\nuserID_75p_dict = df_train.groupby(['User_ID'])['Purchase'].apply(lambda x:np.percentile(x,75)).to_dict()\ndf_train['User_ID_75PercPrice'] = df_train['User_ID'].apply(lambda x:userID_75p_dict.get(x,0))\ndf_test['User_ID_75PercPrice'] = df_test['User_ID'].apply(lambda x:userID_75p_dict.get(x,0))\n\nproductID_25p_dict = df_train.groupby(['Product_ID'])['Purchase'].apply(lambda x:np.percentile(x,25)).to_dict()\ndf_train['Product_ID_25PercPrice'] = df_train['Product_ID'].apply(lambda x:productID_25p_dict.get(x,0))\ndf_test['Product_ID_25PercPrice'] = df_test['Product_ID'].apply(lambda x:productID_25p_dict.get(x,0))\n\nproductID_75p_dict = df_train.groupby(['Product_ID'])['Purchase'].apply(lambda x:np.percentile(x,75)).to_dict()\ndf_train['Product_ID_75PercPrice'] = df_train['Product_ID'].apply(lambda x:productID_75p_dict.get(x,0))\ndf_test['Product_ID_75PercPrice'] = df_test['Product_ID'].apply(lambda x:productID_75p_dict.get(x,0))\n","d5d0ed93":"\ndf_train[\"Product_Cat1_MinPrice\"] = df_train.groupby(['Product_Category_1'])['Purchase'].transform('min')\npc1_min_dict = df_train.groupby(['Product_Category_1'])['Purchase'].min().to_dict()\ndf_test['Product_Cat1_MinPrice'] = df_test['Product_Category_1'].apply(lambda x:pc1_min_dict.get(x,0))\n\ndf_train[\"Product_Cat1_MaxPrice\"] = df_train.groupby(['Product_Category_1'])['Purchase'].transform('max')\npc1_max_dict = df_train.groupby(['Product_Category_1'])['Purchase'].max().to_dict()\ndf_test['Product_Cat1_MaxPrice'] = df_test['Product_Category_1'].apply(lambda x:pc1_max_dict.get(x,0))\n\ndf_train[\"Product_Cat1_MeanPrice\"] = df_train.groupby(['Product_Category_1'])['Purchase'].transform('mean')\npc1_mean_dict = df_train.groupby(['Product_Category_1'])['Purchase'].mean().to_dict()\ndf_test['Product_Cat1_MeanPrice'] = df_test['Product_Category_1'].apply(lambda x:pc1_mean_dict.get(x,0))\n\n\npc1_25p_dict = df_train.groupby(['Product_Category_1'])['Purchase'].apply(lambda x:np.percentile(x,25)).to_dict()\ndf_train['Product_Cat1_25PercPrice'] = df_train['Product_Category_1'].apply(lambda x:pc1_25p_dict.get(x,0))\ndf_test['Product_Cat1_25PercPrice'] = df_test['Product_Category_1'].apply(lambda x:pc1_25p_dict.get(x,0))\n\npc1_75p_dict = df_train.groupby(['Product_Category_1'])['Purchase'].apply(lambda x:np.percentile(x,75)).to_dict()\ndf_train['Product_Cat1_75PercPrice'] = df_train['Product_Category_1'].apply(lambda x:pc1_75p_dict.get(x,0))\ndf_test['Product_Cat1_75PercPrice'] = df_test['Product_Category_1'].apply(lambda x:pc1_75p_dict.get(x,0))\n\n\ndf_train[\"Product_Cat2_MinPrice\"] = df_train.groupby(['Product_Category_2'])['Purchase'].transform('min')\npc2_min_dict = df_train.groupby(['Product_Category_2'])['Purchase'].min().to_dict()\ndf_test['Product_Cat2_MinPrice'] = df_test['Product_Category_2'].apply(lambda x:pc2_min_dict.get(x,0))\n\n\ndf_train[\"Product_Cat2_MaxPrice\"] = df_train.groupby(['Product_Category_2'])['Purchase'].transform('max')\npc2_max_dict = df_train.groupby(['Product_Category_2'])['Purchase'].max().to_dict()\ndf_test['Product_Cat2_MaxPrice'] = df_test['Product_Category_2'].apply(lambda x:pc2_max_dict.get(x,0))\n\ndf_train[\"Product_Cat2_MeanPrice\"] = df_train.groupby(['Product_Category_2'])['Purchase'].transform('mean')\npc2_mean_dict = df_train.groupby(['Product_Category_2'])['Purchase'].mean().to_dict()\ndf_test['Product_Cat2_MeanPrice'] = df_test['Product_Category_2'].apply(lambda x:pc2_mean_dict.get(x,0))\n\npc2_25p_dict = df_train.groupby(['Product_Category_2'])['Purchase'].apply(lambda x:np.percentile(x,25)).to_dict()\ndf_train['Product_Cat2_25PercPrice'] = df_train['Product_Category_2'].apply(lambda x:pc2_25p_dict.get(x,0))\ndf_test['Product_Cat2_25PercPrice'] = df_test['Product_Category_2'].apply(lambda x:pc2_25p_dict.get(x,0))\n\npc2_75p_dict = df_train.groupby(['Product_Category_2'])['Purchase'].apply(lambda x:np.percentile(x,75)).to_dict()\ndf_train['Product_Cat2_75PercPrice'] = df_train['Product_Category_2'].apply(lambda x:pc2_75p_dict.get(x,0))\ndf_test['Product_Cat2_75PercPrice'] = df_test['Product_Category_2'].apply(lambda x:pc2_75p_dict.get(x,0))\n\n\ndf_train[\"Product_Cat3_MinPrice\"] = df_train.groupby(['Product_Category_3'])['Purchase'].transform('min')\npc3_min_dict = df_train.groupby(['Product_Category_3'])['Purchase'].min().to_dict()\ndf_test['Product_Cat3_MinPrice'] = df_test['Product_Category_3'].apply(lambda x:pc3_min_dict.get(x,0))\n\ndf_train[\"Product_Cat3_MaxPrice\"] = df_train.groupby(['Product_Category_3'])['Purchase'].transform('max')\npc3_max_dict = df_train.groupby(['Product_Category_3'])['Purchase'].max().to_dict()\ndf_test['Product_Cat3_MaxPrice'] = df_test['Product_Category_3'].apply(lambda x:pc3_max_dict.get(x,0))\n\ndf_train[\"Product_Cat3_MeanPrice\"] = df_train.groupby(['Product_Category_3'])['Purchase'].transform('mean')\npc3_mean_dict = df_train.groupby(['Product_Category_3'])['Purchase'].mean().to_dict()\ndf_test['Product_Cat3_MeanPrice'] = df_test['Product_Category_3'].apply(lambda x:pc3_mean_dict.get(x,0))\n\npc3_25p_dict = df_train.groupby(['Product_Category_3'])['Purchase'].apply(lambda x:np.percentile(x,25)).to_dict()\ndf_train['Product_Cat3_25PercPrice'] = df_train['Product_Category_3'].apply(lambda x:pc3_25p_dict.get(x,0))\ndf_test['Product_Cat3_25PercPrice'] = df_test['Product_Category_3'].apply(lambda x:pc3_25p_dict.get(x,0))\n\npc3_75p_dict = df_train.groupby(['Product_Category_3'])['Purchase'].apply(lambda x:np.percentile(x,75)).to_dict()\ndf_train['Product_Cat3_75PercPrice'] = df_train['Product_Category_3'].apply(lambda x:pc3_75p_dict.get(x,0))\ndf_test['Product_Cat3_75PercPrice'] = df_test['Product_Category_3'].apply(lambda x:pc3_75p_dict.get(x,0))","193389ef":"df_train.head()","c1695826":"#label encoding User ID and Product ID\nfrom sklearn.preprocessing import LabelEncoder\ncat_columns_list = [\"User_ID\", \"Product_ID\"]\nfor var in cat_columns_list:\n    lb = LabelEncoder()\n    full_var_data = pd.concat((df_train[var],df_test[var]),axis=0).astype('str')\n    temp = lb.fit_transform(np.array(full_var_data))\n    df_train[var] = lb.transform(np.array( df_train[var] ).astype('str'))\n    df_test[var] = lb.transform(np.array( df_test[var] ).astype('str'))","f56f187f":"#df_train.drop(['User_ID','Product_ID'],axis=1,inplace=True)","e265129b":"from sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel","60bda42f":"X = df_train.drop('Purchase',axis=1)\ny = df_train['Purchase']","19fe6efd":"#from sklearn.model_selection import train_test_split\n#X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=0)","40fe8f1a":"model = SelectFromModel(Lasso(alpha=0.005,random_state=0))","5604916e":"model.fit(X,y)","f12da426":"model.get_support()","7508c427":"df_1 = df_test.copy()\n#df_test.drop(['User_ID','Product_ID'],axis=1,inplace=True)\ndf_test.drop(['Purchase'],axis=1,inplace=True)","7900ba7d":"from sklearn.model_selection import RandomizedSearchCV","d24c4abb":"# # number of trees\n# n_estimators = [int(x) for x in np.linspace(start=100,stop=200,num=5)]\n# # number of fetaures to consider at every split\n# max_features = ['sqrt']\n# # max level in tree\n# max_depth = [int(x) for x in np.linspace(5,10,num=5)]\n# # min sample required for split\n# min_samples_split = [10,15,100]\n# # min samples at each leaf node\n# min_samples_leaf = [5,10]","cc795b6a":"# # create a random grid\n# random_grid = {'n_estimators': n_estimators}\n# #               'max_features': max_features}\n# #               'max_depth': max_depth}\n# #               'min_samples_split': min_samples_split,\n# #                'min_samples_leaf': min_samples_leaf}\n# print(random_grid)","9c789c1c":"# # use the random search to find best hyper parameters\n# # first create a base model to tune\n# from sklearn.ensemble import RandomForestRegressor\n# rf = RandomForestRegressor()\n# # search of parameters\n# rf_random = RandomizedSearchCV(estimator=rf,param_distributions=random_grid,scoring='neg_mean_squared_error',n_iter=1,cv=5,verbose=2,random_state=42,n_jobs=1)","ab0c9a35":"#rf_random.fit(X,y)","1c8a3fb1":"# y_pred = rf_random.predict(df_test)\n# submission = pd.DataFrame({\n#         \"Purchase\":y_pred,\n#         \"User_ID\": df_1[\"User_ID\"],\n#         \"Product_ID\": df_1[\"Product_ID\"]\n        \n#     })\n\n# submission.to_csv('Black_Friday_Sales_submission.csv', index=False)","8ecfc26d":"# import xgboost as xgb\n\n# xg_reg = xgb.XGBRegressor(objective ='reg:squarederror', colsample_bytree = 0.3, learning_rate = 0.2,\n#                 max_depth = 10, alpha = 15, n_estimators = 1000)\n# xg_reg.fit(X,y)\n# y_pred_XGB = xg_reg.predict(df_test)\n\n# submission_XGB = pd.DataFrame({\n#         \"Purchase\":y_pred_XGB,\n#         \"User_ID\": df_1[\"User_ID\"],\n#         \"Product_ID\": df_1[\"Product_ID\"]\n        \n#     })\n\n# submission_XGB.to_csv('Black_Friday_Sales_submission_XGB.csv', index=False)","85213807":"alist = ['User_ID',\n'Product_ID',\n'Gender',\n'Age',\n'Occupation',\n'City_Category',\n'Stay_In_Current_City_Years',\n'Marital_Status',\n'Product_Category_1',\n'Product_Category_2',\n'Product_Category_3',\n'Age_Count',\n'Occupation_Count',\n'Product_Category_1_Count',\n'Product_Category_2_Count',\n'Product_Category_3_Count',\n'User_ID_Count',\n'Product_ID_Count']\n\n         \nblist = ['User_ID_MinPrice',\n'User_ID_MaxPrice',\n'User_ID_MeanPrice',\n'Product_ID_MinPrice',\n'Product_ID_MaxPrice',\n'Product_ID_MeanPrice']\n\n\nclist = ['User_ID_25PercPrice',\n'User_ID_75PercPrice',\n'Product_ID_25PercPrice',\n'Product_ID_75PercPrice',\n'Product_Cat1_MinPrice',\n'Product_Cat1_MaxPrice',\n'Product_Cat1_MeanPrice',\n'Product_Cat1_25PercPrice',\n'Product_Cat1_75PercPrice',\n'Product_Cat2_MinPrice',\n'Product_Cat2_MaxPrice',\n'Product_Cat2_MeanPrice',\n'Product_Cat2_25PercPrice',\n'Product_Cat2_75PercPrice',\n'Product_Cat3_MinPrice',\n'Product_Cat3_MaxPrice',\n'Product_Cat3_MeanPrice',\n'Product_Cat3_25PercPrice',\n'Product_Cat3_75PercPrice']","014b8a11":"#LGB model 1 dataframe\ntrain1 = X[alist+blist]\ntest1 = df_test[alist+blist]\n\n#LGB model 2 dataframe \ntrain2 = X[alist+clist]\ntest2 = df_test[alist+clist]","8532a5b0":"import lightgbm as lgb\ntrain_data=lgb.Dataset(train1,label=y)\n#define parameters\nparams = {'n_estimators':205,'learning_rate':0.1,'max_depth': 10,'num_leaves':200,'min_data_in_leaf':10,'max_bin':200}\nmodel= lgb.train(params, train_data, 200) \ny_pred_LGB1=model.predict(test1)\n\nsubmission_LGB1 = pd.DataFrame({\n        \"Purchase\":y_pred_LGB1,\n        \"User_ID\": df_1[\"User_ID\"],\n        \"Product_ID\": df_1[\"Product_ID\"]\n        \n    })\n\nsubmission_LGB1.to_csv('Black_Friday_Sales_submission_LGB1.csv', index=False)","0af4eab0":"import lightgbm as lgb\ntrain_data=lgb.Dataset(train2,label=y)\n#define parameters\nparams = {'n_estimators':205,'learning_rate':0.1,'max_depth': 10,'num_leaves':200,'min_data_in_leaf':10,'max_bin':200}\nmodel= lgb.train(params, train_data, 200) \ny_pred_LGB2=model.predict(test2)\n\nsubmission_LGB2 = pd.DataFrame({\n        \"Purchase\":y_pred_LGB2,\n        \"User_ID\": df_1[\"User_ID\"],\n        \"Product_ID\": df_1[\"Product_ID\"]\n        \n    })\n\nsubmission_LGB2.to_csv('Black_Friday_Sales_submission_LGB2.csv', index=False)","4d4c4319":"# ensembled prediction over splitted test data\nensembled_prediction = (0.5*(y_pred_LGB1)+0.5*(y_pred_LGB2))\n\nsubmission_MIX[\"Purchase\"] = ensembled_prediction\n\nsubmission_MIX.to_csv('Black_Friday_Sales_submission_MIX.csv', index=False)","d21a319a":"### Feature Selection","49e2d2f1":"### LGBoost-2","e42712b3":"### Random Forest","4ce4ea36":"### Random Forest Regressor - all variables are important","f6b44253":"### XGBoost","536cd31c":"## Black Friday Sales Prediction","3b5ac873":"### LGBoost-1","3d5ec5d4":"### Stacked Ensemble\nHere we are going to taked weighted average (as per mean squared error score) of XGBoost and LGBM.\n"}}