{"cell_type":{"40e3a5e8":"code","2a53979e":"code","05599a59":"code","e4466f90":"code","20728bc0":"code","3ab0bb3d":"code","39b86c5d":"code","476955cd":"code","ddbf6163":"code","10ca930b":"code","627f9ecf":"code","793ad848":"code","011413eb":"code","f74f3641":"code","e9ac3191":"code","1e289aee":"code","d533c632":"code","95852fce":"code","95e759aa":"code","cd2738aa":"code","d529367d":"code","cffa8660":"code","0f2f02a0":"code","0b0e4d58":"code","e6ee7733":"code","35b58c49":"code","5407c098":"code","6dd6a100":"code","a80dffd3":"code","f5a20fc6":"code","6d83d6ae":"code","b1f74451":"code","6200ad24":"code","6e952e0f":"code","4707fe0a":"code","620f9a17":"code","d4c8cbe7":"code","e817fd71":"code","06c445b8":"code","a9fe03cb":"code","051714f6":"code","78c91611":"code","6154e50e":"code","e567a2cd":"code","6acf189b":"code","08178874":"code","0bbf5c68":"code","0e716147":"code","f3e9aa90":"code","31c08a67":"code","a4e79d59":"code","216fe97a":"code","7c9d7fa0":"code","5e62d521":"code","ed377818":"code","a661e3cf":"code","069b1dec":"code","995f5b11":"code","99a07973":"code","c42a8194":"code","da379923":"code","19f056aa":"code","035a1b04":"code","19ca33e5":"code","53b7d2a7":"code","44bf55cc":"code","3069f36a":"code","1d1362fe":"code","dac68023":"code","e754282d":"code","36596798":"code","fdbf7080":"code","8a7dba15":"code","9ff8e3ff":"code","e38c31bd":"code","2db95d2b":"code","fd96396d":"code","8b2d5864":"code","4b023d24":"code","31c826d4":"code","bbaa1a17":"code","bd055ec9":"code","c23be275":"code","0d1b5374":"code","8ecc0abd":"code","f2159f19":"code","a6370de5":"code","4a6fa011":"code","b6f07698":"code","baa51681":"code","8dcc8de7":"code","86f41abc":"code","7949a1a3":"markdown","c8b3fdcc":"markdown","4605f7ee":"markdown","96a70b4d":"markdown","77d300fe":"markdown","a6e585e2":"markdown","50e3b022":"markdown","d0a9c87a":"markdown","e9994449":"markdown","e1109ec1":"markdown","96069356":"markdown","a93e3b0e":"markdown","c1f7dd8c":"markdown","700f7e5a":"markdown","749875a7":"markdown","fcb03eec":"markdown","2b034051":"markdown","9ce6f29d":"markdown","a9e97b87":"markdown","83427e05":"markdown","2f6f5c81":"markdown","7be90f16":"markdown","14f234f1":"markdown","924dc500":"markdown","5bda8ee7":"markdown","849f0258":"markdown","a7b1089a":"markdown","217476b4":"markdown","2acb7e43":"markdown","728496e8":"markdown","685df1a5":"markdown","b3f61d43":"markdown","67fffbaa":"markdown","e17b3fc9":"markdown","3b9ab2bb":"markdown","896e2d44":"markdown"},"source":{"40e3a5e8":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","2a53979e":"df_Train = pd.read_csv('..\/input\/d\/rahulsah06\/titanic\/train.csv')\ndf_test=pd.read_csv('..\/input\/d\/rahulsah06\/titanic\/test.csv')\ndf_survived=pd.read_csv('..\/input\/d\/rahulsah06\/titanic\/gender_submission.csv')","05599a59":"df_test.head()","e4466f90":"df_survived.head()","20728bc0":"df_survived.drop(['PassengerId'],axis=1)","3ab0bb3d":"df_test['Survived']=df_survived['Survived']","39b86c5d":"df_survived.head()","476955cd":"df_test.head()","ddbf6163":"df_Train.head()","10ca930b":"df=pd.concat([df_test,df_Train])","627f9ecf":"df.head()","793ad848":"df.info()","011413eb":"df.corr()['Survived'].sort_values()","f74f3641":"sns.scatterplot(data=df , x='Survived', y='Fare')","e9ac3191":"sns.boxplot(data=df , x='Survived', y='Fare')","1e289aee":"df[(df['Survived']==1)&(df['Fare']>400)][['Survived','Fare']]","d533c632":"index_drop=df[(df['Fare']>400) & (df['Survived']==1) ].index\ndf=df.drop(index_drop, axis=0)","95852fce":"sns.scatterplot(data=df_Train , x='Survived', y='Fare')","95e759aa":"sns.boxplot(data=df , x='Survived', y='Fare')","cd2738aa":"df.isnull().any()","d529367d":"df=df.drop(['Name'],axis=1)","cffa8660":"df.isnull().sum()","0f2f02a0":"100*(df.isnull().sum()\/len(df))","0b0e4d58":"def missing_percent(df):\n    nan_percent= 100*(df.isnull().sum()\/len(df))\n    nan_percent= nan_percent[nan_percent>0].sort_values()\n    return nan_percent","e6ee7733":"nan_percent= missing_percent(df)","35b58c49":"sns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","5407c098":"sns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\nplt.ylim(0,1)","6dd6a100":"df[df['Fare'].isnull()]","a80dffd3":"df= df.dropna(axis=0, subset=['Fare'])","f5a20fc6":"df[df['Embarked'].isnull()]","6d83d6ae":"df= df.dropna(axis=0, subset=['Embarked'])","b1f74451":"nan_percent= missing_percent(df)\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","6200ad24":"df[df['Age'].isnull()]","6e952e0f":"sns.kdeplot(data=df['Age'])","4707fe0a":"df['Age'] = df['Age'].fillna(df['Age'].mean())\n\nmissing_percent(df)","620f9a17":"df= df.drop(['Cabin'], axis=1)","d4c8cbe7":"df.isnull().any()","e817fd71":"df=df.drop(['Ticket'],axis=1)","06c445b8":"df.head()","a9fe03cb":"sns.barplot(data=df,x='Survived',y='Fare',color='c')","051714f6":"sns.barplot(data=df,x='Survived',y='Age',color='c')","78c91611":"sns.barplot(data=df,y='Survived',x='Sex',color='c')","6154e50e":"sns.heatmap(data=df.corr(),annot=True,cmap=\"Blues\")","e567a2cd":"sns.barplot(x=\"Survived\", y=\"Fare\", hue=\"Pclass\", data=df,palette=\"Blues_d\")","6acf189b":"df.info()","08178874":"df.head()","0bbf5c68":"df['Survived'] = df['Survived'].apply(str)\ndf['Pclass'] = df['Pclass'].apply(str)","0e716147":"df.info()","f3e9aa90":"df_num= df.select_dtypes(exclude='object')\ndf_obj= df.select_dtypes(include='object')","31c08a67":"df_num.info()","a4e79d59":"df_obj.info()","216fe97a":"# Converting objects to number by one-hot encoding(drop_first=True:removes multi-collinearity)\ndf_obj= pd.get_dummies(df_obj, drop_first=True)","7c9d7fa0":"Final_df= pd.concat([df_num, df_obj], axis=1)","5e62d521":"Final_df.head()","ed377818":"sns.countplot(data=Final_df, x='Survived_1')","a661e3cf":"X= Final_df.drop('Survived_1', axis=1)\ny= Final_df['Survived_1']","069b1dec":"from sklearn.model_selection import train_test_split","995f5b11":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","99a07973":"from sklearn.preprocessing import StandardScaler","c42a8194":"scaler= StandardScaler()","da379923":"scaler.fit(X_train)","19f056aa":"scaled_X_train= scaler.transform(X_train)\nscaled_X_test= scaler.transform(X_test)","035a1b04":"from sklearn.neighbors import KNeighborsClassifier","19ca33e5":"knn_model= KNeighborsClassifier(n_neighbors=1)","53b7d2a7":"knn_model.fit(scaled_X_train, y_train)","44bf55cc":"y_pred= knn_model.predict(scaled_X_test)","3069f36a":"#The prediction Value VS Actual Value of Test Data\npd.DataFrame({'Y_Test':y_test, 'Y_Pred': y_pred})","1d1362fe":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score","dac68023":"accuracy_score(y_test, y_pred)","e754282d":"confusion_matrix(y_test, y_pred)","36596798":"print(classification_report(y_test, y_pred))","fdbf7080":"test_error_rate= []\n\n\nfor k in range (1, 30):\n    knn_model = KNeighborsClassifier(n_neighbors=k)\n    knn_model.fit(scaled_X_train, y_train)\n    \n    y_pred_test = knn_model.predict(scaled_X_test)\n    \n    test_error=1- accuracy_score(y_test, y_pred_test)\n    test_error_rate.append(test_error)","8a7dba15":"test_error_rate","9ff8e3ff":"plt.figure(figsize=(10, 6))\nplt.plot(range(1, 30), test_error_rate, label='Test Error')\nplt.legend()\nplt.ylabel('Error Rate')\nplt.xlabel('K Value')","e38c31bd":"#first operation\nscaler= StandardScaler()","2db95d2b":"#second operation is modeling\nknn= KNeighborsClassifier()","fd96396d":"#\nknn.get_params().keys()","8b2d5864":"#sequence of operations\noperations= [('scaler', scaler), ('knn', knn)]","4b023d24":"from sklearn.pipeline import Pipeline","31c826d4":"pipe= Pipeline(operations)","bbaa1a17":"from sklearn.model_selection import GridSearchCV","bd055ec9":"k_values= list(range(1, 20))","c23be275":"#a dictionary of k values\nparam_grid= {'knn__n_neighbors': k_values}","0d1b5374":"full_cv_classifier= GridSearchCV(pipe, param_grid, cv=5, scoring='accuracy')\n#pipe is the estimator(our model).\n#param grid is the k values","8ecc0abd":"full_cv_classifier.fit(X_train, y_train)# note that we didn't use scaled_X_train because we had scaler in the Pipe","f2159f19":"full_cv_classifier.best_estimator_.get_params()","a6370de5":"full_cv_classifier.cv_results_.keys()","4a6fa011":"scaler= StandardScaler()\nknn5= KNeighborsClassifier(n_neighbors=5)\noperations= [('scaler', scaler), ('knn5', knn5)]","b6f07698":"pipe= Pipeline(operations)","baa51681":"pipe.fit(X_train, y_train)","8dcc8de7":"pipe_pred= pipe.predict(X_test)","86f41abc":"print(classification_report(y_test, pipe_pred))","7949a1a3":"**the question is which one is the optimum K that minimizes the Error?**\n\n**Error=1-Accuracy**\n\n**Two methods to choose optimum K:**\n* Elbow Method\n* Cross Validation + grid search","c8b3fdcc":"**it says best estimator is k=5(knn__n_neighbors = 5)**","4605f7ee":"**the more they paid for Fare the more they survived**","96a70b4d":"### checking for outliers:","77d300fe":"**Final Model**","a6e585e2":"# K-Nearest Neighbours(KNN)","50e3b022":"**most of the survivors were female**","d0a9c87a":"**Creating a Pipeline to find K value**","e9994449":"# EDA","e1109ec1":"**Scaling the Features**","96069356":"**Evaluating the Model**","a93e3b0e":"**Fare value had the most impact on surviving**","c1f7dd8c":"**as it shows people with more fare and the high Pclass had more chance to survive**","700f7e5a":"**Train the Model**","749875a7":"**KNN concideration:**\n* Distance metric(Minkowski | Euclidean | Manhattan | Chebyshev)\n* Scaling for distance(Necessary)\n* optimal K","fcb03eec":"# KNN","2b034051":"**Pipeline:**\n> this technique can set up a repeated operations. in other word it is a sequence of operations(such as a scaler and a model)","9ce6f29d":"**Predicting Test Data**","a9e97b87":"**\"Survived\" and \"Pclass\" are categorical but now they are Int. we have to change them to object**","83427e05":"**it seems age didn't affected on this issue**","2f6f5c81":"**this algorithm assigns a label to new data based on the distance between the old data and the new one.**\n\n**don't get this wrong with k means algorithm**\n\n**k is the number nearest neighbour to the new data**\n\n**Tie: it happens when the number of nearest neighbours are equal**\n\n**Tie conciderations:**\n\n* Always choose odd k\n* reduce k by 1 until tie is broken\n* randomly break Tie\n* choose nearest class point\n\n","7be90f16":"**we almost don't have any data about Cabin(missing=77%) so we drop it**","14f234f1":"the problem is balanced","924dc500":"**grid search:**\n> it searches based on cross validation","5bda8ee7":"# EDA & Data Cleaning:","849f0258":"**K=7 is the best.**","a7b1089a":"**since missing ages are not neglectable,we replace them with mean.**","217476b4":"### Checking for missing data:","2acb7e43":"**Dummy Variables:**","728496e8":"**ticket column doesn't help us in model buillding so we drop it**","685df1a5":"**Elbow Method for Choosing Reasonable K Values**","b3f61d43":"# dealing with categorical data","67fffbaa":"**we don't have any missing value**","e17b3fc9":"**Split the Data to Train & Test**","3b9ab2bb":"**now the data set is ready**","896e2d44":"**we have passenger Id so we can drop the names because it can not help us for our model building**"}}