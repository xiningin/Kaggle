{"cell_type":{"55687a5e":"code","fa474fcc":"code","80865d6c":"code","99f8e32e":"code","5fb60dcf":"code","fcfb6b71":"code","1672335b":"code","83c270cd":"code","3bbb9ee2":"markdown","9e5b8ace":"markdown","fb0db387":"markdown","ac8f8236":"markdown","76e3b038":"markdown","93b23600":"markdown","f8ecc3b8":"markdown","02482df7":"markdown","efdceaea":"markdown","fc24d383":"markdown","8cb67818":"markdown","389a2154":"markdown","ac454ca2":"markdown","9663fc3a":"markdown","1fce966b":"markdown"},"source":{"55687a5e":"import tensorflow as tf\nimport keras_preprocessing\nfrom keras_preprocessing import image\nfrom keras_preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt\n","fa474fcc":"\nIMG_SIZE = 100\n\nTRAINING_DIR = \"\/kaggle\/input\/fruits\/fruits-360\/Training\"\ntraining_datagen = ImageDataGenerator(rescale = 1.\/255)\ntrain_generator = training_datagen.flow_from_directory(TRAINING_DIR,target_size=(IMG_SIZE,IMG_SIZE), \n                                                       batch_size=64, class_mode='categorical' ,shuffle=True)\n\n\nTEST_DIR = \"\/kaggle\/input\/fruits\/fruits-360\/Test\"\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_generator = test_datagen.flow_from_directory(TEST_DIR,target_size=(IMG_SIZE,IMG_SIZE) , batch_size=64 , shuffle=False)\n","80865d6c":"x,y = train_generator.next()\nfor i in range(0,1):\n    image = x[i]\n    plt.imshow(image)\n    plt.show()","99f8e32e":"import tensorflow_hub as hub\n\nURL = 'https:\/\/tfhub.dev\/google\/imagenet\/resnet_v2_50\/feature_vector\/4' \nfeature_extractor = hub.KerasLayer(URL, input_shape=(100,100,3))\nfeature_extractor.trainable = False","5fb60dcf":"model = tf.keras.models.Sequential([    \n    feature_extractor,\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(131,activation='softmax')\n    \n])\nmodel.summary()","fcfb6b71":"class myCallback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self,epoch,logs={}):\n    if(logs['accuracy']>=0.99):\n      self.model.stop_training=True\n\ncallbacks=myCallback()\nMETRICS = [\n        'accuracy',\n        tf.keras.metrics.Precision(name='precision'),\n        tf.keras.metrics.Recall(name='recall')\n    ]\nmodel.compile(optimizer=tf.optimizers.Adam(learning_rate=0.0001),loss='categorical_crossentropy',metrics=METRICS )\n\nhistory = model.fit(train_generator , epochs=25 , callbacks=[callbacks] )","1672335b":"fig, ax = plt.subplots(1, 4, figsize=(20, 3))\nax = ax.ravel()\n\nfor i, met in enumerate(['precision', 'recall', 'accuracy', 'loss']):\n    ax[i].plot(history.history[met])\n    ax[i].set_title('Model {}'.format(met))\n    ax[i].set_xlabel('epochs')\n    ax[i].set_ylabel(met)\n    ax[i].legend(['train'])","83c270cd":"model.evaluate(test_generator)","3bbb9ee2":"**Compiling and Training the Model**","9e5b8ace":"**Plotting the Training Accuracy for all 3 metrics**","fb0db387":"**Displaying a Sample Picture from training data**","ac8f8236":"**Firstly let's import all the required libraries** ","76e3b038":"# **Fruits Classification using Transfer Learning**","93b23600":"**Using TensorflowHub for Transfer Learning**","f8ecc3b8":"As you can see I have achieved accuracy 0f around 94% but have a training accuracy of 99% that means there is still some overfitting but doen't seem to be a big issue in this case.","02482df7":"I used 3 different metrics for measuring accuracy of the model.","efdceaea":"Used a callback to stop training if accuracy reaches 99%","fc24d383":"**Creating the Model**","8cb67818":"**Evaluating against test data.**","389a2154":"I have used Adam as Optimizer and Categorical Crossentropy as loss function","ac454ca2":"I did not apply augmentation as there is enough data already.","9663fc3a":"I have used Resnet50 from TensorflowHub for this kernel and achieved a ~94% accuracy on test set.","1fce966b":"I have Used ImageDataGenerator as the data is in perfect format for it."}}