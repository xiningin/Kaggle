{"cell_type":{"b15b23d7":"code","a3ed7ad7":"code","e5b8d314":"code","1aac803f":"code","5fc19843":"code","2250a3e9":"code","915255c3":"code","344a24a5":"code","bc5d07d3":"code","f16d8beb":"code","947aa561":"code","d2bfea24":"code","e57e2e38":"code","d2961a51":"code","735b8e24":"code","8d1a9985":"code","f7f0e68f":"code","245e87e6":"code","2757bb83":"code","9c57f77c":"code","262317be":"code","8582d750":"code","28175bc2":"code","9ecd9861":"code","12b26238":"code","3eef3d91":"code","9c669918":"code","0c379de8":"code","dbe13fd0":"code","4614d28d":"code","fb9d5555":"code","ca25375f":"code","2dd16227":"code","ed90b545":"code","bb59190f":"code","d6a8ad2b":"code","9bdb3005":"code","425cd82d":"code","6b72c563":"code","3c41613a":"markdown","d305bb38":"markdown"},"source":{"b15b23d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3ed7ad7":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\ndf = pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/vw.csv\")","e5b8d314":"print(\"Dataset shape :\",df.shape)\nprint(\"Number of Rows :\",df.shape[0])\nprint(\"Number of Columns :\",df.shape[1])","1aac803f":"print(\"Column names :\",list(df.columns))","5fc19843":"df.info()","2250a3e9":"df.describe","915255c3":"df.head()","344a24a5":"df.tail()","bc5d07d3":"df = df.drop('model',axis=1)","f16d8beb":"df","947aa561":"list(df['transmission'].unique())","d2bfea24":"# Import LabelEncoder\nfrom sklearn import preprocessing\n#creating labelEncoder\nle = preprocessing.LabelEncoder()\n# Converting string labels into numbers.\ndf['transmission']=le.fit_transform(df['transmission'])\nprint(df['transmission'])","e57e2e38":"list(df['transmission'].unique())","d2961a51":"df.info()","735b8e24":"df['fuelType'].unique()","8d1a9985":"df['fuelType']=le.fit_transform(df['fuelType'])\nprint(df['fuelType'])","f7f0e68f":"df['mpg'].unique()","245e87e6":"df.info()","2757bb83":"df['year'].unique()","9c57f77c":"plt.figure(figsize=(500,10))\nsns.scatterplot(df['mileage'],df['price'])","262317be":"plt.figure(figsize=(20,10))\nsns.countplot(df['year'])","8582d750":"sns.distplot(df['year'])","28175bc2":"sns.countplot(df['transmission']) #automatic, manual, semi-automatic = 0,1,2","9ecd9861":"df.columns","12b26238":"sns.scatterplot(df['tax'],df['price'])","3eef3d91":"df.corr()","9c669918":"sns.heatmap(df.corr())","0c379de8":"sns.pairplot(df)","dbe13fd0":"from pandas_profiling import ProfileReport\nprof = ProfileReport(df)\nprof.to_notebook_iframe()\n#prof.to_file(output_file='output.html')","4614d28d":"prof.to_file(output_file=\"output1.html\")","fb9d5555":"#df.columns\n\nX = df[['transmission', 'mileage', 'fuelType', 'tax', 'mpg','engineSize']]\ny = df['price']","ca25375f":"y = y.reshape(-1,1)","2dd16227":"X = X.reshape(-1,1)","ed90b545":"from sklearn.model_selection import train_test_split\n\n\nX_train, X_test, y_train, y_test = train_test_split(df.drop(columns = ['price']),\n                                                    df, train_size = 0.7)","bb59190f":"df.info()","d6a8ad2b":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","9bdb3005":"from sklearn.linear_model import LinearRegression\n\nreg = LinearRegression()\n\nreg.fit(X_train,y_train)","425cd82d":"y_pred = reg.predict(X_test)","6b72c563":"from sklearn import metrics\n\nprint(\"Mean Squared Error :\",np.sqrt(metrics.mean_absolute_error(y_test,y_pred)))\nprint(metrics.r2_score(y_test,y_pred))","3c41613a":"automatic, manual, semi-automatic = 0,1,2","d305bb38":"Dielsel = 0\npetrol = 3\n"}}