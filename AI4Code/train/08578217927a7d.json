{"cell_type":{"349b8e54":"code","eb5778ea":"code","49d51728":"code","108b49a0":"code","89f31d79":"code","446cbe3e":"code","f411ed35":"code","a69aa7e1":"code","50faf6e4":"code","ac0f13a1":"code","64715ed8":"code","421ec62f":"code","9c450a7d":"code","27d73806":"code","84f197ad":"code","d1eb25a8":"code","b2b1224c":"code","1a44ea19":"code","a492cd69":"code","1751e580":"code","95b7464c":"code","129cb620":"code","d301bc62":"code","1903c314":"code","cc9ef7b5":"code","8480514e":"code","7c6a9a8a":"code","f865b33a":"code","4cd2ea28":"code","1adf03b1":"code","7b938fbf":"code","65d96ca3":"code","30dafbba":"code","0ed4458f":"code","ef6bab0a":"code","68ca8daa":"code","c874f702":"code","bf195a80":"code","04962abd":"code","69bcb2fd":"markdown","6a70f518":"markdown","94952987":"markdown","a781b813":"markdown","bd75e494":"markdown","f8a38de3":"markdown","8c4b26a4":"markdown","13a0847d":"markdown","4bdb3212":"markdown"},"source":{"349b8e54":"#Import Libararies\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nimport time\nfrom datetime import datetime \nimport scipy.stats as stats\nimport statsmodels.api as sm","eb5778ea":"#  Read datasets\ntest = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-1\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-1\/train.csv\")","49d51728":"#We are using weather data provided on Kaggle\nweather=pd.read_csv(\"..\/input\/weather-data\/training_data_with_weather_info.csv\")","108b49a0":"#We are using Tanu's dataset of population based on webscraping\npopulation=pd.read_csv(\"..\/input\/population3\/population_by_country_2020.csv\")","89f31d79":"# Select required columns and rename few of them\npopulation = population[['Country (or dependency)', 'Population (2020)', 'Density (P\/Km\u00b2)', 'Land Area (Km\u00b2)', 'Med. Age', 'Urban Pop %']]\npopulation.columns = ['Country (or dependency)', 'Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']","446cbe3e":"# Replace United States by US\npopulation.loc[population['Country (or dependency)']=='United States', 'Country (or dependency)'] = 'US'","f411ed35":"# Handling Urban Pop values\npopulation['Urban Pop'] = population['Urban Pop'].str.rstrip('%')\np=population.loc[population['Urban Pop']!='N.A.', 'Urban Pop'].median()\npopulation.loc[population['Urban Pop']=='N.A.', 'Urban Pop']= int(p)\npopulation['Urban Pop'] = population['Urban Pop'].astype('int64')","a69aa7e1":"# Handling Med Age values\npopulation.loc[population['Med Age']=='N.A.', 'Med Age'] = int(population.loc[population['Med Age']!='N.A.', 'Med Age'].mode()[0])\npopulation['Med Age'] = population['Med Age'].astype('int64')","50faf6e4":"print(\"Combined dataset\")\ncorona_data = weather.merge(population, left_on='Country\/Region', right_on='Country (or dependency)', how='left')\ncorona_data.shape","ac0f13a1":"#checking for null values\nsns.heatmap(corona_data.isnull(),yticklabels=False,cbar=False,cmap='viridis')","64715ed8":"#Drop Province\/State \ncorona_data.drop('Province\/State', axis=1, inplace=True)","421ec62f":"#Drop Country or dependency\ncorona_data.drop('Country (or dependency)', axis=1, inplace=True)","9c450a7d":"#checking for null values\nsns.heatmap(corona_data.isnull(),yticklabels=False,cbar=False,cmap='viridis')","27d73806":"corona_data[['Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']] = corona_data[['Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']].fillna(0)","84f197ad":"#checking for null values\nsns.heatmap(corona_data.isnull(),yticklabels=False,cbar=False,cmap='viridis')","d1eb25a8":"from sklearn.preprocessing import LabelEncoder\nlabelencoder_X = LabelEncoder() \ncorona_data.iloc[:, 1] = labelencoder_X.fit_transform(corona_data.iloc[:, 1])","b2b1224c":"corona_data['day']=pd.DatetimeIndex(corona_data['Date']).day\ncorona_data['year'] = pd.DatetimeIndex(corona_data['Date']).year\ncorona_data['month'] = pd.DatetimeIndex(corona_data['Date']).month\ncorona_data.head()","1a44ea19":"corona_data['Population (2020)'] = corona_data['Population (2020)'].astype(int)","a492cd69":"corona_data['Active'] = corona_data['ConfirmedCases'] - corona_data['Fatalities'] \n \ngroup_data = corona_data.groupby([\"Country\/Region\"])[\"Fatalities\", \"ConfirmedCases\"].sum().reset_index()\ngroup_data = group_data.sort_values(by='Fatalities', ascending=False)\ngroup_data = group_data[group_data['Fatalities']>100]\nplt.figure(figsize=(15, 5))\nplt.plot(group_data['Country\/Region'], group_data['Fatalities'],color='red')\nplt.plot(group_data['Country\/Region'], group_data['ConfirmedCases'],color='green')\n\n \nplt.title('Total Deaths(>100), Confirmed Cases by Country')\nplt.show()","1751e580":"import pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\n \ngrouped = corona_data.groupby('Date')['Date', 'ConfirmedCases', 'Fatalities'].sum().reset_index()\nfig = px.line(grouped, x=\"Date\", y=\"ConfirmedCases\",\n             title=\"Worldwide Confirmed Novel Coronavirus(COVID-19) Cases Over Date\")\nfig.show()","95b7464c":"import pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\n \ngrouped = corona_data.groupby('Country\/Region')['Country\/Region', 'Fatalities'].sum().reset_index()\nfig = px.line(grouped, x=\"Country\/Region\", y=\"Fatalities\",\n             title=\"Worldwide fatalities Novel Coronavirus(COVID-19) Cases Over country\")\nfig.show()","129cb620":"corona_data.corr()['ConfirmedCases']","d301bc62":"#Attributes showing high correlation with dependent variables are not included\nX_train=corona_data[['Lat','Long','day','month','Population (2020)','Land Area','Med Age']]","1903c314":"y_train=corona_data[['ConfirmedCases','Fatalities']]","cc9ef7b5":"sns.heatmap(X_train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","8480514e":"test_data = test.merge(population, left_on='Country\/Region', right_on='Country (or dependency)', how='left')\ntest_data.shape","7c6a9a8a":"test_data['day']=pd.DatetimeIndex(test_data['Date']).day\ntest_data['year'] = pd.DatetimeIndex(test_data['Date']).year\ntest_data['month'] = pd.DatetimeIndex(test_data['Date']).month\ntest_data.head()\ntest_data.drop('Province\/State',axis=1,inplace=True)","f865b33a":"X_test=test_data[['Lat','Long','day','month','Population (2020)','Land Area','Med Age']]","4cd2ea28":"X_test[['Population (2020)', 'Land Area', 'Med Age']] = X_test[['Population (2020)', 'Land Area', 'Med Age']].fillna(0)","1adf03b1":"X_test.info()","7b938fbf":"# Fitting Polynomial Regression to the dataset\n# Fitting Linear Regression to the dataset\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.multioutput import MultiOutputRegressor\n\npolynomial_regressor = PolynomialFeatures(degree = 4) #try 2,3 and 4\n\nX_polynomial = polynomial_regressor.fit_transform(X_train)\nlinear_regressor_2 = LinearRegression()\n#for multi-output\nregr_multirf = MultiOutputRegressor(linear_regressor_2)\nregr_multirf.fit(X_polynomial, y_train)","65d96ca3":"y_multirf = regr_multirf.predict(polynomial_regressor.fit_transform(X_test))\ny_pred = np.round(y_multirf, 1)\ny_multirf.shape","30dafbba":"y_pred = y_pred.astype(int)","0ed4458f":"submission = pd.DataFrame(data = np.zeros((y_pred.shape[0],3)), columns = ['ForecastId', 'ConfirmedCases', 'Fatalities'])\nsubmission.shape\ny_pred1 = pd.DataFrame(y_pred)","ef6bab0a":"for i in range(0, len(submission)):\n    submission.loc[i,'ForecastId'] = i + 1\n    submission.loc[i,'ConfirmedCases'] = y_pred1.iloc[i, 0]\n    submission.loc[i,'Fatalities'] = y_pred1.iloc[i, 1]","68ca8daa":"submission['ForecastId'] = submission['ForecastId'].astype(int)\nsubmission['ConfirmedCases'] = submission['ConfirmedCases'].astype(int)\nsubmission['Fatalities'] = submission['Fatalities'].astype(int)","c874f702":"submission","bf195a80":"submission.to_csv('submission.csv', index = False)","04962abd":"submission.head()","69bcb2fd":"## Visualization of total deaths and confirmed cases by country","6a70f518":"### The relationship between independent and dependent variables being exponential linear regression would not be beneficial, hence polynomial regression is being applied.","94952987":"## Topic of Content\n### 1. Data Preparation\n### 2. Exploratory Data Analysis\n### 3. Prediction","a781b813":"## World Wide Fatalities country wise","bd75e494":"# COVID Global Forecast","f8a38de3":"# Prediction - Polynomial Regression","8c4b26a4":"## Worldwide Confirmed Cases over Date","13a0847d":"# 1. Exploratory Data Analysis","4bdb3212":"## 1. Data Preparation"}}