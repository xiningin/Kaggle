{"cell_type":{"2ec3c119":"code","d84d68d9":"code","c4d70866":"code","ec3c76cc":"code","adba199d":"code","425b530d":"code","e0df5330":"code","f205820f":"code","616d56ef":"code","b439a38c":"markdown","c22a0a1f":"markdown","734a27fc":"markdown","5c53726d":"markdown","b418d90e":"markdown"},"source":{"2ec3c119":"import numpy as np \nimport pandas as pd\nimport datatable as dt\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom catboost import CatBoostClassifier","d84d68d9":"%%time\ntrain = dt.fread('..\/input\/tabular-playground-series-oct-2021\/train.csv').to_pandas()\ntest  = dt.fread('..\/input\/tabular-playground-series-oct-2021\/test.csv').to_pandas()\nsub   = dt.fread('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv').to_pandas()","c4d70866":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","ec3c76cc":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64','float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                else:\n                    df[col] = df[col].astype(np.float32)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","adba199d":"train = reduce_mem_usage(train)\ntest  = reduce_mem_usage(test)","425b530d":"y = train['target']\ntrain.drop('target',axis=1,inplace=True)","e0df5330":"# catboost params\ncat_params = {'iterations': 2866,\n 'od_wait': 3385,\n 'learning_rate': 0.04280810491488757,\n 'reg_lambda': 0.32139709692279206,\n 'subsample': 0.8442605943226449,\n 'random_strength': 22.468752639603235,\n 'depth': 4,\n 'min_data_in_leaf': 31,\n 'leaf_estimation_iterations': 15,\n 'task_type':\"GPU\",\n 'bootstrap_type':'Poisson'\n}","f205820f":"folds = KFold(n_splits = 5, random_state = 102021, shuffle = True)\n\npredictions = np.zeros(len(test))\ncat_oof = np.zeros(train.shape[0])\n\nfor fold, (trn_idx, val_idx) in enumerate(folds.split(train)):\n\n    X_train, X_test = train.iloc[trn_idx], train.iloc[val_idx]\n    y_train, y_test = y.iloc[trn_idx], y.iloc[val_idx]\n\n    model = CatBoostClassifier(**cat_params)\n    print(f\"model fit started for Fold: {fold}\")\n    model.fit(X_train, \n              y_train,\n              eval_set=[(X_test, y_test)],\n              early_stopping_rounds=400,\n              verbose=False)\n    pred = model.predict_proba(X_test)[:,1]\n    cat_oof[val_idx] = pred\n    roc = roc_auc_score(y_test, pred)\n    print(f\" roc_auc_score: {roc}\")\n    print(\"-\"*50)\n    \n    predictions += model.predict_proba(test)[:,1] \/ folds.n_splits ","616d56ef":"sub['target'] = predictions\nsub.to_csv(f'submission_catboost_1.csv',index = False)\nnp.savez_compressed('oof_catboost.npz', cat_oof)","b439a38c":"# Load dataset","c22a0a1f":"# Model hyperparameters","734a27fc":"# Imports","5c53726d":"# Store submission and oof ","b418d90e":"# 5-fold model training and prediction"}}