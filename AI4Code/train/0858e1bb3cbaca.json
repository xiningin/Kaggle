{"cell_type":{"d5cae1b7":"code","219e09ae":"code","f0f51a28":"code","99c8a9b0":"code","fb6c0677":"code","5955067c":"code","46733644":"code","896554c8":"code","25a6ddca":"code","8e75c31c":"code","18f29131":"code","4dded6e6":"code","0a661eff":"code","fa01335b":"code","4b30c239":"code","d138dad6":"code","2e510076":"code","ba08da16":"code","cf764116":"code","b1417c3a":"code","5ad09c5f":"code","52b771f1":"code","56a20bf7":"code","7b53459f":"code","8d1b4c52":"code","a2c81037":"code","ff45c5d5":"code","18b4ba11":"code","b35935c4":"markdown","409ec8d7":"markdown","817cebc8":"markdown","c15cdc79":"markdown","f62f7836":"markdown","f6d63e77":"markdown","83823239":"markdown","30eb883f":"markdown","dbf63b06":"markdown","58621a93":"markdown","a5f8f280":"markdown","906bd139":"markdown","2b445fa7":"markdown","6d0d3eb8":"markdown","a9bfca06":"markdown","ef0c9898":"markdown","b608e833":"markdown","5b892ffd":"markdown","2d71dce1":"markdown","053f4d39":"markdown","184c5f12":"markdown","6f74bae5":"markdown","4e1f3672":"markdown","6317e819":"markdown","7dcdf456":"markdown","7b4b5d07":"markdown","a86184c3":"markdown","df3f24b6":"markdown","027389d6":"markdown","ad5fc3d1":"markdown","3aab86ee":"markdown","8ba742ae":"markdown","01836a31":"markdown"},"source":{"d5cae1b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","219e09ae":"sales = pd.read_csv('\/kaggle\/input\/retail-business-sales-20172019\/business.retailsales.csv',index_col=0)","f0f51a28":"sales.head()","99c8a9b0":"sales.tail(10)","fb6c0677":"sales.columns","5955067c":"sales.shape","46733644":"sales['Returns']","896554c8":"sales.loc['Basket']","25a6ddca":"sales['Returns'].loc['Basket']","8e75c31c":"sales.loc['Basket']['Returns']","18f29131":"sales[ ['Gross Sales', 'Returns']].loc['Basket']","4dded6e6":"sales.sum()","0a661eff":"sales.loc['Basket'].sum()","fa01335b":"sales.loc['Basket'].mean()","4b30c239":"sales['Total Net Sales'].sort_values(ascending = False).head(10)","d138dad6":"#select category 'Total Net Sales'\n#sort values descendingly\n#display the first 10 rows\nsales['Total Net Sales']\\\n    .sort_values(ascending = False)\\\n    .head(10)","2e510076":"sales['Total Net Sales'].max()","ba08da16":"sales['Total Net Sales'].idxmax()","cf764116":"sales.groupby('Product Type').sum()","b1417c3a":"#split the dataframe by category 'Product Type' \n#and select column name 'Returns'\n#generate the sum of each category\n#sort values ascendingly\n\nsales.groupby('Product Type')['Returns']\\\n    .sum()\\\n    .sort_values()","5ad09c5f":"sales.groupby('Product Type').size()","52b771f1":"#split data by category 'product type' \n#calculate size of each group\n#plot the data\nsales.groupby('Product Type').size().plot()","56a20bf7":"sales.groupby('Product Type').size().plot.pie()","7b53459f":"#Split the data by 'Product Type' and select column 'Total Net Sales'\n#calculate the sum of each group\n#sort data in ascending order\n#make a horizontal bargraph \nsales.groupby('Product Type')['Total Net Sales']\\\n    .sum()\\\n    .sort_values()\\\n    .plot.barh()","8d1b4c52":"#Split the data and select column \n#calculate the sum of each group\n#sort data in ascending order\n#display the first three rows\nsales.groupby('Product Type')['Net Quantity']\\\n    .sum()\\\n    .sort_values(ascending=False)\\\n    .head(3)","a2c81037":"#split dataframe by categories\n#calculate discount over net quantity for each group\n#round to two decimal places\n#sort values ascendingly\na = sales.groupby('Product Type').sum()\n\n(a['Discounts']\/a['Net Quantity'])\\\n    .round(2)\\\n    .sort_values()\n\n","ff45c5d5":"#split dataframe by category and sum up values\n#caculate average price\n#get the index of the max price value\na = sales.groupby('Product Type').sum()\nb = (a['Gross Sales']\/a['Net Quantity'])\nb.idxmax()","18b4ba11":"b.idxmin()","b35935c4":"Here are some questions we can answer from analyzing this dataset with pandas.","409ec8d7":"Alternatively, if I only want to know the one sale with the max net profits, we can use\n\n**.max()** \n\nto access the max among our data","817cebc8":"or","c15cdc79":"This can also be tailored to specific products by combining **.loc[]** and **.sum()** ","f62f7836":"and\n\n**.idxmax()**\nto access the product(index) associated with that value","f6d63e77":"Finally, we can draw graphs with these data by using \n\n**.plot()**","83823239":"Now, to get a quick summary of the dataset, we can use function\n\n**.sum()**","30eb883f":"To count how many items are in the groups, we can use the function\n\n**.size()**","dbf63b06":"3. Which type of product have the highest average price? How about the lowest?","58621a93":"This is a guide introducing potential ways of using pandas to interpret sales dataset. First of all, let's import the dataframe we are using by\n\n**pd.read_csv(' ')**\n\nthe string in the brackets should be the route to access your file","a5f8f280":"Similarily, we can get the average data by using\n\n**.mean()**","906bd139":"# Sort","2b445fa7":"To view the return of all baskets sold, we can combine the two codes above and display","6d0d3eb8":"To display multiple columns, we can combine them as a list","a9bfca06":"1. What are the top 3 popular product categories and how mant of those items were sold?","ef0c9898":"# Analysis","b608e833":"# Summarize","5b892ffd":"Now I want to know which are the sales that generated most net profits.\nWe can sort the data by using\n\n**.sort_values()**\n\nThe default order of this function is ascending. To reverse it, we can add\n\n**ascending = False** \n![](http:\/\/)to the bracket.\n\n","2d71dce1":"2. What is the average discount given for each type of products?","053f4d39":"To see the dataset on python, we can use \n\n**.head(*n*)**\n\nto display the top *n* rows of data, default *n*=5","184c5f12":"# Split-apply-combine","6f74bae5":"we can draw many different types of plots with pandas, for example:","4e1f3672":"When we look at a whole book of sales data, categorizing them can be very helpful. With pandas, we can *split* our data with specific criteria, and *apply* or *combine* different calculations on these data. We can split the dataset by\n\n**.groupby(' ')**\n\nin which the string should be the name of category you want to group by.","6317e819":"We can also use \n\n**.tail(*n*)**\n\nto display the bottom *n* rows of data, default *n* = 5","7dcdf456":"# Data Attributes","7b4b5d07":"To focus on only one aspect of the data, we can use\n\n** *DataFrame name*['*column name*']**\n\nto select a specific column\n","a86184c3":"To quickly validate the comprehensiveness of this dataset, we can use\n\n**.shape**\n\nto know how many rows (number of samples) and columns (categories of information) are included.","df3f24b6":"# Plots","027389d6":"# Display","ad5fc3d1":"When we try to analyze this dataset, how do I check what information is provided?\nWe can use\n\n **.columns**\n\n to display the name(index) of each column","3aab86ee":"What if we only want to focus on one product?\nWe can display data with specific aspects by using\n\n**.loc[]**\n\nwhere in the sqaure brackets could be the name of the row(s) you want to see","8ba742ae":"For clarity, we can also write a long code like this","01836a31":"# Select"}}