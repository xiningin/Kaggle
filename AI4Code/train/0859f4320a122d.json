{"cell_type":{"16ebe702":"code","5500ee02":"code","f221e275":"code","c9fd539a":"code","3f13dbd4":"code","07946e57":"code","14966bb8":"code","e013b4e9":"code","7a65e12d":"code","fcb64714":"code","d1530eaf":"markdown","729598b4":"markdown","dab09132":"markdown","74f1bef8":"markdown","80b4cd4f":"markdown","f3b75b2c":"markdown","2f3b19ab":"markdown","8ebdc901":"markdown","189d8426":"markdown","a88eb1c2":"markdown","3d58a80b":"markdown"},"source":{"16ebe702":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5500ee02":"#importing libraries\nimport numpy as np #linear Algebra\nimport pandas as pd #data preprocessing\n\nimport matplotlib.pyplot as plt #visualization\nfrom PIL import Image\n%matplotlib inline\nimport seaborn as sns #visualization\nimport itertools\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport io\nimport plotly.offline as py#visualization\npy.init_notebook_mode(connected=True)#visualization\nimport plotly.graph_objs as go#visualization\nimport plotly.tools as tls#visualization\nimport plotly.figure_factory as ff#visualization","f221e275":"telcom = pd.read_csv(\"..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\ntelcom.head()\n#first few rows","c9fd539a":"print (\"Rows     : \" ,telcom.shape[0])\nprint (\"Columns  : \" ,telcom.shape[1])\nprint (\"\\nFeatures : \\n\" ,telcom.columns.tolist())\nprint (\"\\nMissing values :  \", telcom.isnull().sum().values.sum())\nprint (\"\\nUnique values :  \\n\",telcom.nunique())","3f13dbd4":"telcom.dtypes","07946e57":"#Data Manipulation\n\n#Replacing spaces with null values in total charges column\ntelcom[\"TotalCharges\"] = telcom[\"TotalCharges\"].replace(\" \",np.nan)\n\n#Droping null values from total charges column which contaon .15% missing values\ntelcom = telcom[telcom[\"TotalCharges\"].notnull()]\ntelcom = telcom.reset_index()[telcom.columns]\n\n","14966bb8":"#convert to float type\ntelcom[\"TotalCharges\"] = telcom[\"TotalCharges\"].astype(float)\n\n#replace 'No Internet service' to No for the following columns\n\nreplace_cols =[ 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n              'StreamingMovies']\nfor i in replace_cols:\n    telcom[i] = telcom[i].replace({'No internet service':'No'})\n    \n#replace values\ntelcom[\"SeniorCtizen\"] = telcom[\"SeniorCitizen\"].replace({1:'Yes',0:\"No\"})\n\n#Tenure to categorical column\ndef tenure_lab(telcom):\n    \n    if telcom[\"tenure\"] <= 12:\n        return \"Tenure_0-12\"\n    elif (telcom['tenure']> 12) & (telcom[\"tenure\"] <= 24 ):\n        return \"Tenure_12-24\"\n    elif (telcom['tenure']>24) & (telcom[\"tenure\"] <= 48):\n        return 'Tenure_24-48'\n    elif (tecom['tenure'] >48) & (telcom[\"tenure\"]<=60):\n        return \"Tenure_48-60\"\n    elif telcom[\"tenure\"]> 60:\n        return \"Tenure_gt_60\"\n    telcom[\"tenure_group\"] = telcom.apply(lambda telcom:tenure_lab(telcom), axis = 1)\n    \n    \n#Separating churn and non churn customers\n\nchurn   = telcom[telcom[\"Churn\"] == 'Yes']\nnot_churn = telcom[telcom[\"Churn\"] == \"No\"]","e013b4e9":"#Separating catagorical and numerical columns\nID_col = [\"customerID\"]\ntarget_col = ['Churn']\ncat_cols   = telcom.nunique()[telcom.nunique() < 6].keys().tolist()\ncat_cols = [x for x in cat_cols if x not in target_col]\nnum_cols = [x for x in telcom.columns if x not in cat_cols + target_col + ID_col]","7a65e12d":"#labels\n\nlab = telcom[\"Churn\"].value_counts().keys().tolist()\n\n#values \nval = telcom[\"Churn\"].value_counts().values.tolist()\n\ntrace = go.Pie(labels = lab,\n               values = val,\n               marker = dict(colors = [ 'royalblue', 'lime'],\n                            line = dict(color = \"white\",\n                                       width = 1.3)\n                            ),\n              rotation = 90,\n              hoverinfo = 'label +value+text',\n              hole = .5\n              )\nlayout = go.Layout(dict(title = \"Customer attrition in data\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                       )\n                  )\n\ndata = [trace]\nfig = go.Figure(data = data,layout = layout)\npy.iplot(fig)","fcb64714":"#function  for pie plot for customer attrition types\ndef plot_pie(column) :\n    \n    trace1 = go.Pie(values  = churn[column].value_counts().values.tolist(),\n                    labels  = churn[column].value_counts().keys().tolist(),\n                    hoverinfo = \"label+percent+name\",\n                    domain  = dict(x = [0,.48]),\n                    name    = \"Churn Customers\",\n                    marker  = dict(line = dict(width = 2,\n                                               color = \"rgb(243,243,243)\")\n                                  ),\n                    hole    = .6\n                   )\n    trace2 = go.Pie(values  = not_churn[column].value_counts().values.tolist(),\n                    labels  = not_churn[column].value_counts().keys().tolist(),\n                    hoverinfo = \"label+percent+name\",\n                    marker  = dict(line = dict(width = 2,\n                                               color = \"rgb(243,243,243)\")\n                                  ),\n                    domain  = dict(x = [.52,1]),\n                    hole    = .6,\n                    name    = \"Non churn customers\" \n                   )\n\n\n    layout = go.Layout(dict(title = column + \" distribution in customer attrition \",\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            annotations = [dict(text = \"churn customers\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .15, y = .5),\n                                           dict(text = \"Non churn customers\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .88,y = .5\n                                               )\n                                          ]\n                           )\n                      )\n    data = [trace1,trace2]\n    fig  = go.Figure(data = data,layout = layout)\n    py.iplot(fig)\n\n\n#function  for histogram for customer attrition types\ndef histogram(column) :\n    trace1 = go.Histogram(x  = churn[column],\n                          histnorm= \"percent\",\n                          name = \"Churn Customers\",\n                          marker = dict(line = dict(width = .5,\n                                                    color = \"black\"\n                                                    )\n                                        ),\n                         opacity = .9 \n                         ) \n    \n    trace2 = go.Histogram(x  = not_churn[column],\n                          histnorm = \"percent\",\n                          name = \"Non churn customers\",\n                          marker = dict(line = dict(width = .5,\n                                              color = \"black\"\n                                             )\n                                 ),\n                          opacity = .9\n                         )\n    \n    data = [trace1,trace2]\n    layout = go.Layout(dict(title =column + \" distribution in customer attrition \",\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                             title = column,\n                                             zerolinewidth=1,\n                                             ticklen=5,\n                                             gridwidth=2\n                                            ),\n                            yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                             title = \"percent\",\n                                             zerolinewidth=1,\n                                             ticklen=5,\n                                             gridwidth=2\n                                            ),\n                           )\n                      )\n    fig  = go.Figure(data=data,layout=layout)\n    \n    py.iplot(fig)\n    \n#function  for scatter plot matrix  for numerical columns in data\ndef scatter_matrix(df)  :\n    \n    df  = df.sort_values(by = \"Churn\" ,ascending = True)\n    classes = df[\"Churn\"].unique().tolist()\n    classes\n    \n    class_code  = {classes[k] : k for k in range(2)}\n    class_code\n\n    color_vals = [class_code[cl] for cl in df[\"Churn\"]]\n    color_vals\n\n    pl_colorscale = \"Portland\"\n\n    pl_colorscale\n\n    text = [df.loc[k,\"Churn\"] for k in range(len(df))]\n    text\n\n    trace = go.Splom(dimensions = [dict(label  = \"tenure\",\n                                       values = df[\"tenure\"]),\n                                  dict(label  = 'MonthlyCharges',\n                                       values = df['MonthlyCharges']),\n                                  dict(label  = 'TotalCharges',\n                                       values = df['TotalCharges'])],\n                     text = text,\n                     marker = dict(color = color_vals,\n                                   colorscale = pl_colorscale,\n                                   size = 3,\n                                   showscale = False,\n                                   line = dict(width = .1,\n                                               color='rgb(230,230,230)'\n                                              )\n                                  )\n                    )\n    axis = dict(showline  = True,\n                zeroline  = False,\n                gridcolor = \"#fff\",\n                ticklen   = 4\n               )\n    \n    layout = go.Layout(dict(title  = \n                            \"Scatter plot matrix for Numerical columns for customer attrition\",\n                            autosize = False,\n                            height = 800,\n                            width  = 800,\n                            dragmode = \"select\",\n                            hovermode = \"closest\",\n                            plot_bgcolor  = 'rgba(240,240,240, 0.95)',\n                            xaxis1 = dict(axis),\n                            yaxis1 = dict(axis),\n                            xaxis2 = dict(axis),\n                            yaxis2 = dict(axis),\n                            xaxis3 = dict(axis),\n                            yaxis3 = dict(axis),\n                           )\n                      )\n    data   = [trace]\n    fig = go.Figure(data = data,layout = layout )\n    py.iplot(fig)\n\n#for all categorical columns plot pie\nfor i in cat_cols :\n    plot_pie(i)\n\n#for all categorical columns plot histogram    \nfor i in num_cols :\n    histogram(i)\n\n#scatter plot matrix\nscatter_matrix(telcom)","d1530eaf":"**Companies usually make a distinction between voluntary churn and involuntary churn. Voluntary churn occurs due to a decision by the customer to switch to another company or service provider, involuntary churn occurs due to circumstances such as a customer's relocation to a long-term care facility, death, or the relocation to a distant location. In most applications, involuntary reasons for churn are excluded from the analytical models. Analysts tend to concentrate on voluntary churn, because it typically occurs due to factors of the company-customer relationship which companies control, such as how billing interactions are handled or how after-sales help is provided.**","729598b4":"**Customer attrition is also known as customer churn, customer turnover, or customer defection, is the loss of clients or customers.**","dab09132":"## Data Manipulation","74f1bef8":"## Customer attrition in data","80b4cd4f":"## Importing Data","f3b75b2c":"**predictive analytics use churn prediction models that predict customer churn by assessing their propensity of risk to churn. Since these models generate a small prioritized list of potential defectors, they are effective at focusing customer retention marketing programs on the subset of the customer base who are most vulnerable to churn**","2f3b19ab":"## Exploratory Data Analysis","8ebdc901":"## 3.b. Variables distribution in customer attrition","189d8426":"##  Telecom Customer Attrition","a88eb1c2":"**Telephone service companies, Internet service providers, pay TV companies, insurance firms, and alarm monitoring services, often use customer attrition analysis and customer attrition rates as one of their key business metrics because the cost of retaining an existing customer is far less than acquiring a new one.  Companies from these sectors often have customer service branches which attempt to win back defecting clients, because recovered long-term customers can be worth much more to a company than newly recruited clients.**","3d58a80b":"## 1.a Data overview"}}