{"cell_type":{"f0845ac5":"code","ed9896a9":"code","5bc84b00":"code","ffcf3b71":"code","9c07aa27":"code","18c4703b":"code","ba234c29":"code","6ecc8e5a":"code","da8e36ac":"code","274eda04":"code","cae02e17":"code","e0709736":"code","df4a0f55":"code","f11c2b8b":"code","017816a5":"code","9b7f3b51":"code","c42bb0e1":"code","2b0031be":"code","7d9be4b4":"code","b078bafd":"code","39ebc94f":"code","c79b717f":"code","813eae9a":"code","8f10d8a1":"code","84ae3d7d":"code","bf2de680":"code","289e810f":"code","b1da84d8":"code","9729416e":"code","58f4462c":"code","0e9b9e76":"code","4b21a1ca":"code","6bbb5c8a":"code","4680c738":"code","a53f0458":"code","30f69507":"code","26503b28":"code","3eec0bfb":"code","1d52c58e":"code","119316ac":"code","cafd9bbd":"code","19f80e1f":"code","a8ed8b3c":"code","9e00c90d":"code","777f4a21":"code","63c1f60d":"code","f54c98a8":"code","4531a2e7":"code","94249df5":"code","b303e2be":"code","14823137":"code","ecba9b47":"code","9c9fdb0e":"code","d60d4960":"code","89105e89":"code","dd2c39af":"code","02cba48f":"code","9a14bfc9":"code","7ddad7cd":"markdown","09063f2f":"markdown","166e083b":"markdown","e9fc11e4":"markdown","95a9fc05":"markdown","ac36eb5d":"markdown","4524a639":"markdown","538fab50":"markdown","595a62ae":"markdown","2c74a9b2":"markdown","ce3879fc":"markdown","5792db9f":"markdown","00d41de2":"markdown","f7d52450":"markdown","5e91e024":"markdown","76dfecaf":"markdown","99885a7f":"markdown","ed50ba01":"markdown","cc34fbeb":"markdown","9301070b":"markdown","80a3da05":"markdown","a1190617":"markdown","0f83215d":"markdown","b813e7f3":"markdown","69b7b431":"markdown","eb7e5bbd":"markdown","20d02577":"markdown","c9a479ba":"markdown","4a0be8e6":"markdown","ead05e47":"markdown","bc9cd4a3":"markdown","4261487e":"markdown","287910f9":"markdown","d448fbe4":"markdown","b65e5407":"markdown","2f95a002":"markdown","9fd8fbcf":"markdown","02ed23ff":"markdown","b88b5b01":"markdown","f25d0602":"markdown","87dbf1cb":"markdown","7d1ed40f":"markdown","7dd20cfd":"markdown","04153981":"markdown","d92cd229":"markdown","dfabacf4":"markdown","96b9660c":"markdown","c497b611":"markdown","b35df1d3":"markdown","76658534":"markdown","5623a053":"markdown","afaee66d":"markdown","f372eb05":"markdown","f9cb8e9c":"markdown"},"source":{"f0845ac5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\n# Visualization Packages Importing\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom plotly import graph_objects as go\nfrom plotly import express as px\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode,iplot\n\n# WordCloud Packages\nfrom wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\n\n# Ignore Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","ed9896a9":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5bc84b00":"# Read Data Using read_csv() method\ndf = pd.read_csv('\/kaggle\/input\/videogamesales\/vgsales.csv')","ffcf3b71":"df.sample(5)","9c07aa27":"df.head()","18c4703b":"df.tail()","ba234c29":"df.shape","6ecc8e5a":"df.columns","da8e36ac":"df.describe()","274eda04":"df.info()","cae02e17":"df.isna().any()","e0709736":"(df.isna().sum() * 100) \/ df.shape[0]","df4a0f55":"# Creating Categorical DataFrame\ncategorical_df = df.select_dtypes('O')\n\ncategorical_df.head()","f11c2b8b":"# Create Numerical DataFrame\n\nnumerical_df = df.select_dtypes(('int', 'float'))\n\nnumerical_df.head()","017816a5":"categorical_features = categorical_df.columns\nprint(categorical_features)\n\nprint('-' * 60)\n\nnumerical_features = numerical_df.columns\nprint(numerical_features)","9b7f3b51":"# Categorical Features Normalization\n\nfor category_name in categorical_features:\n    print('-' * 50)\n    print(\"Column Name: \", category_name)\n    print(' ' * 50)\n    \n    print(df[category_name].value_counts().head())\n    \n    print('-' * 50)\n    print('-' * 50)","c42bb0e1":"#  Remove Null Values\n\ndf.isna().sum()","2b0031be":"df[['Year', 'Publisher']].describe(include='all')","7d9be4b4":"df.Year = df.Year.fillna(df.Year.mean())","b078bafd":"# Change Year dtype to int32\n\ndf.Year = df.Year.astype('int32')\ndf.Year","39ebc94f":"df.Publisher.value_counts(normalize=True)","c79b717f":"df.Publisher = df.Publisher.fillna(df.Publisher.mode()[0])","813eae9a":"df[['Publisher','Year']].dtypes","8f10d8a1":"# Get Top 10 Video Games Publishers\ntop_10_publishers = df.Publisher.value_counts().head(10)\n\npx.bar(top_10_publishers, title='Top 10 Video Game Pubishers', \n       labels={\n           'value': \"Number of Games Publishing\",\n           'index': \"Name of the Publisher\"\n       })","84ae3d7d":"# Get Top 10 Video Games Genre\ntop_10_generes = df.Genre.value_counts()\n# top_10_generes\n\nfig =px.bar(top_10_generes, title='Top 10 Video Game Genres', \n       labels={\n           'value': \"Number of Games Genres\",\n           'index': \"Name of the Genre\"\n       })\n\nfig.show()\n\n\nfig = px.scatter(top_10_generes, title='Top Gernres Games',\n              labels={\n                   'value': \"Numbers\",\n                   'index': \"Genre\"\n               })\nfig.show()\n\n\n\n# px.bar(top_10_generes.index, top_10_generes.values, title='Top 10 Video Game Genres', \n#        labels={\n#            'value': \"Numbers\",\n#            'index': \"Genre\"\n#        })","bf2de680":"# Get Top 10 Video Games Genre\ntop_10_platform = df.Platform.value_counts().sort_values()\ntop_10_platform\n\nfig = px.line(top_10_platform, title='Top Playing Platforms',\n              labels={\n                   'value': \"Counts\",\n                   'index': \"Name of the Platform\"\n               })\n\n# fig = go.Figure(data=go.Scatter(x= top_10_platform.index, y=top_10_platform.values,\n#                                title=\"Top Playing Platforms\"))\n\nfig.show()","289e810f":"df.head()","b1da84d8":"year_wise_sales = df.loc[:, ['Name', 'Year', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].groupby(by =  'Year'  ).sum()\n\n\nfig1 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['NA_Sales'],\n                  name = \"North America's Sales\",\n                  line_shape='vh'\n                 )\n\nfig2 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['EU_Sales'],\n                  name = \"Europe's Sales\",\n                  line_shape='vh')\n\nfig3 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['JP_Sales'],\n                  name = \"Japan's Sales\",\n                  line_shape='vh')\n\nfig4 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['Other_Sales'],\n                  name = \"Other Sales\",\n                  line_shape='vh')\n\nfigs = [ fig1, fig2, fig3, fig4 ]\n\nlayout = dict(title = 'Year Wise Total Game Sales of North America, Europe, Japan and Other Country',\n              xaxis= dict(title= 'Year' ),\n              yaxis= dict(title= 'Total Sales In Millions',)\n             )\n\nfigure = dict(data = figs, layout = layout)\n\niplot(figure)","9729416e":"year_wise_sales = df.loc[:, ['Name', 'Year', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].groupby(by =  'Year'  ).mean()\n\n\nfig1 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['NA_Sales'],\n                  name = \"North America's Sales\",\n                  line_shape='vh'\n                 )\n\nfig2 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['EU_Sales'],\n                  name = \"Europe's Sales\",\n                  line_shape='vh')\n\nfig3 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['JP_Sales'],\n                  name = \"Japan's Sales\",\n                  line_shape='vh')\n\nfig4 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['Other_Sales'],\n                  name = \"Other Sales\",\n                  line_shape='vh')\n\nfigs = [ fig1, fig2, fig3, fig4 ]\n\nlayout = dict(title = 'Year Wise Average Sales for North America, Europe, Japan and Other Country',\n              xaxis= dict(title= 'Year' ),\n              yaxis= dict(title= 'Average Sales In Millions',)\n             )\n\nfigure = dict(data = figs, layout = layout)\n\niplot(figure)","58f4462c":"# Scatter \n\nfig = px.scatter(df, x=\"Year\", y=\"Global_Sales\", color=\"Genre\",\n                 size='Global_Sales', hover_data=['Name'],\n                 title=\"Year Wise Global Video Game Sales by Genere\",\n                 labels={'x':'Years', 'y':'Global Sales In Millions'}\n                )\n\nfig.show()","0e9b9e76":"top_sales = df.sort_values(by=['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales'], ascending=False).head(10)\n\n# ['NA_Sales', '', '', '']\ndicts_name = {\n    'NA_Sales' : \"North America Sales ( In Millions)\",\n    'EU_Sales' : \"Europe Sales ( In Millions)\",\n    'JP_Sales' : \"Japan Sales ( In Millions)\",\n    'Other_Sales' : \"Other Sales ( In Millions)\",\n}\n\nfor (key, title) in dicts_name.items():\n    \n    fig = px.sunburst(top_sales, path=['Genre', 'Publisher', 'Platform'], values=key, title= 'Top Selling by '+ title)\n    \n    fig.update_layout(\n        grid= dict(columns=2, rows=2),\n        margin = dict(t=40, l=2, r=2, b=5)\n    )\n\n    fig.show()","4b21a1ca":"global_sales = df.sort_values(by='Other_Sales', ascending=False)\n\n# plt.subplot(1, 2, 1)\n\n\nfig = plt.figure(figsize=(17,17))\n\n\nfor index, col,  in enumerate(categorical_features):\n    \n    plt.subplot(len(categorical_features), 2, index + 1)\n    \n    stopwords = set(STOPWORDS)\n    wordcloud = WordCloud(\n        stopwords=stopwords\n    ).generate(\" \".join(global_sales[col]))\n\n    # Show WordCloud Image\n    \n    \n    plt.imshow(wordcloud)\n    plt.title(\"Video Game \" + col, fontsize=20)\n    plt.axis('off')\n    plt.tight_layout(pad=3)\n\nplt.show()","6bbb5c8a":"corr_ = df.corr()\n\nplt.figure(figsize=(12, 7))\n\nsns.heatmap(corr_, annot=True, linewidths=.2, cmap='RdYlBu_r')\n\nplt.show()","4680c738":"df.head(5)","a53f0458":"from sklearn.preprocessing import LabelEncoder","30f69507":"data = df.copy()\n\nle = LabelEncoder()","26503b28":"feature = [\"Platform\", \"Genre\"]\n\nfor col in feature:\n    data[col] = le.fit_transform(df[col])    ","3eec0bfb":"X = data[['Platform', 'Genre', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].values\n\ny = data['Global_Sales'].values","1d52c58e":"X[:5], y[:5]","119316ac":"from sklearn.model_selection import train_test_split","cafd9bbd":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, random_state=45)","19f80e1f":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","a8ed8b3c":"from sklearn.linear_model import LinearRegression\n\n# Import r2 score for Calculation\nfrom sklearn.metrics import r2_score","9e00c90d":"lr = LinearRegression()\n\nlr.fit(X_train, y_train)\n\npred = lr.predict(X_test)\n\nr2_MultiLinear = r2_score(y_test,pred)","777f4a21":"print(r2_MultiLinear)\n\nprint(lr.score(X_test, y_test))","63c1f60d":"#  \n\nfrom sklearn.neighbors import KNeighborsRegressor","f54c98a8":"kRange = range(1,15,1)\n\nscores_list = []\nfor i in kRange:\n    regressor_knn = KNeighborsRegressor(n_neighbors = i)\n    \n    regressor_knn.fit(X_train,y_train)\n    pred = regressor_knn.predict(X_test)\n    \n    scores_list.append(r2_score(y_test,pred))","4531a2e7":"plt.plot(kRange, scores_list, linewidth=2, color='blue')\nplt.xticks(kRange)\n\nplt.xlabel('Neighbor Number')\nplt.ylabel('r2_Score of KNN')\nplt.show()   ","94249df5":"# Training the KNN model on the training set\nregressor_knn = KNeighborsRegressor(n_neighbors = 3)\n\nregressor_knn.fit(X_train,y_train)\npred = regressor_knn.predict(X_test)\n\nr2_knn = r2_score(y_test,pred)\nprint(r2_knn)","b303e2be":"from sklearn.tree import DecisionTreeRegressor\n\ndtr = DecisionTreeRegressor(random_state=32)","14823137":"dtr.fit(X_train, y_train)\n\npred = dtr.predict(X_test)\n\nprint(r2_score(y_test, pred))","ecba9b47":"from sklearn.ensemble import RandomForestRegressor\n\nrfr = RandomForestRegressor(random_state= 10)","9c9fdb0e":"rfr.fit(X_train, y_train)\n\npred = rfr.predict(X_test)\n\nprint(r2_score(y_test, pred))","d60d4960":"from sklearn.svm import SVR\n\nsvr_linear = SVR(kernel='linear')\n\nsvr_rbf = SVR(kernel='rbf')","89105e89":"svr_linear.fit(X_train, y_train)\nsvr_rbf.fit(X_train, y_train)\n\npred_linear = svr_linear.predict(X_test)\npred_rbf = svr_rbf.predict(X_test)\n\nprint(r2_score(y_test, pred_linear))\nprint(r2_score(y_test, pred_rbf))","dd2c39af":"from xgboost import XGBRegressor\n\nxgb = XGBRegressor()","02cba48f":"xgb.fit(X_train, y_train)\n\npred = xgb.predict(X_test)\n\nprint(r2_score(y_test, pred))","9a14bfc9":"# DecisionTree Tunning","7ddad7cd":"#### Analysis for Categorical Features & check the most repetitive values.","09063f2f":"** Overall information of datasets...\n\nUsing this `.info()` method we can see that, it will return the complete details about our dataset behavior. Like \n1. Total Number of records,\n* Feature Names,\n* Number of missing values,\n* What's the datatype for all features, And\n* It's memory usage","166e083b":"<img align=\"center\" src=\"https:\/\/media.giphy.com\/media\/idvY7ibAEvN9bh2rlV\/giphy.gif\" alt=\"Video Games Sales Visualization\" width=\"100%\"\/>","e9fc11e4":"#### *Showing top 10 Video Games Genres that has most playing video games using bar and scatter plots*","95a9fc05":"## Import Necessary Packages","ac36eb5d":"<center>\n    <h1>\ud83c\udfae Video Game Sales Analysis EDA, Visualizations<\/h1>\n<\/center>\n<!--  and Sales Prediction Using Machine Learning Models -->","4524a639":"#### *Top Ten Video Games Sales by Genre, Publisher and Platforms For All Country using sunburst graph.*","538fab50":"** Statistical information for all numerical features","595a62ae":"### Splite the data into Train and Test set","2c74a9b2":"Here, we have only two features are having missing values, Names are `Year` and `Publisher`.","ce3879fc":"** Categorical Features are:","5792db9f":"Create a list of Categorical and Numerical Feature from `categorical_df` and `numerical_df`.","00d41de2":"## Applying HyperParams Tunning ","f7d52450":"#### *Showing Year wise Overall Global Sales (In Millions) By Genres With Name of the Game using Scatter Plot.*","5e91e024":"## Data Visualization","76dfecaf":"#### *Showing top 10 Playing Video games Platforms using line plots*","99885a7f":"#### *Showing top 10 Publisher who has published many video games by viewing bar plots*","ed50ba01":"### Implementing LabelEncoder","cc34fbeb":"## Data Exploration and Analysis","9301070b":"Let's create train and target feature for train and test splites","80a3da05":"#### *Showing Total Number of Sales (In Millions) for North America, Europe, Japan and Other Country's Sales by Year wise.*","a1190617":"## Model Selection","0f83215d":"Same Here, We can see the last few records for better understanding of datasets records.","b813e7f3":"Get the first few records and display it. Let's take some time to overview some data and it's feature names","69b7b431":"Now, Let's check the datatype for both features.","eb7e5bbd":"### Data Cleaning and Remove NaN values.","20d02577":"<img align=\"center\" src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRjU3MyvLT2oT-7mMElUQzxHfj8q7y2iompRg&usqp=CAU\" alt=\"Video Game Salary\" width=\"100%\"\/>","c9a479ba":"### Implementing KNeighbor","4a0be8e6":"<img align=\"center\" src=\"https:\/\/media.giphy.com\/media\/1XeAoRH74h7i0MtwCU\/giphy.gif\" alt=\"Video Games Sales Visualization\" width=\"100%\" \/>","ead05e47":"### Implementing Decision Tree Regressor","bc9cd4a3":"Let's print the features names with the help of `.columns` attribute. It'll returning `pandas Index` type of list with `dtype` is `object`","4261487e":"<img align=\"center\" src=\"https:\/\/i.pinimg.com\/originals\/69\/cb\/61\/69cb61ef329d954713fea8560892e505.gif\" alt=\"Thanks for Visiting\"\n     width=\"100%\"\/>","287910f9":"- To replace value we can use `mode` to get 'Electronic Arts'.","d448fbe4":"* Now, We need to know how many features are having missing values, So we can easily find the feature name that has `NaN` values.","b65e5407":"--- \n---\n\n<div class=\"text-center\">\n    <h1>That's it Guys,<\/h1>\n    <h1>\ud83d\ude4f<\/h1>\n    \n        \n        I Hope you guys you like and enjoy it, and learn something interesting things from this notebook, \n        \n        Even I learn a lots of things while I'm creating this notebook\n    \n        Keep Learning,\n        Regards,\n        Vikas Ukani.\n    \n<\/div>\n\n---\n---\n\n<img src=\"https:\/\/static.wixstatic.com\/media\/3592ed_5453a1ea302b4c4588413007ac4fcb93~mv2.gif\" align=\"center\" alt=\"Thank You\" style=\"min-height:20%; max-height:20%\" width=\"90%\" \/>\n\n","2f95a002":"## Data Collection & Loading","9fd8fbcf":"Here, `Publisher` is a categorical feature so we need to fill the missing values with values which is most repetitive.\n\nSo, We use the `.value_counts()` methods to get the value which is continue repeating.","02ed23ff":"#### *Showing Average Sales (In Millions) By Year for Countries.*","b88b5b01":"#### *Showing Most repeting word in the dataset for all Categorical values like 'Name', 'Publisher', 'Platform' and 'Genre'.*","f25d0602":"** Numerical Features are:","87dbf1cb":"We clearly see that, `Year` has `1.63%` of values are actually missing. And, `Publisher` has `3.4%` of values are missing.","7d1ed40f":"Initially, We need to check the `How many number of missing values are there.`","7dd20cfd":"<img align=\"center\" src=\"https:\/\/i.chzbgr.com\/full\/8226604032\/hD903110C\/steam-sales-have-me-on-the-run\" alt=\"Sales Statistics\"\n     width=\"100%\" \/>","04153981":"### Implementing XGBoost","d92cd229":"Firstly, We need to know how many values are missing? So Here, We use some calculations to show the percentage values of missing values features.  ","dfabacf4":"Here, We can see the shape of the dataset that we are using here. `.shape` attribute will return the tuple with (number of rows and number of columns)","96b9660c":"#### *Displaying the correlation for the numerical feature.*","c497b611":"Check some random data using `.sample()` method. It will pick the random number of records.","b35df1d3":"#### Fill missing value in Publisher Feature","76658534":"#### Fill Missing Value in year Feature","5623a053":"### Implementing SVM","afaee66d":"### Implementing RandomForest Regressor","f372eb05":"* Here, One feature is numerical and another is categorical featue, So we use `include='all'` to show both feature descriptions","f9cb8e9c":"### Separate the Numerical And Categorical Features\n"}}