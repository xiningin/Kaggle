{"cell_type":{"703352c4":"code","5e8f4c9d":"code","5f35ea10":"code","2fc0174c":"code","6ccbbccd":"code","c25c7db9":"code","6526c613":"code","3c1cb5a4":"code","f5650d45":"code","848934ef":"code","5d5b88a9":"code","a41e0d54":"code","62a8ad6f":"code","d6a843b2":"code","cabd68d1":"code","79614b10":"code","7fd67600":"code","f4e784b3":"code","612533b8":"code","2b77257e":"code","38744327":"code","92e06229":"code","3f8f1aa2":"code","53caaebe":"code","02409118":"code","e5ff3f25":"code","85e9850c":"code","5f9c2331":"code","c7ee6247":"code","cd1b2947":"code","0a193b40":"markdown","01a04970":"markdown","fecc74f3":"markdown","028abf6c":"markdown","e28604a5":"markdown","31397e79":"markdown","48566b02":"markdown","6038ca95":"markdown","c56bc201":"markdown","cdabaf76":"markdown","0e2c108a":"markdown","92c95583":"markdown","4c54202c":"markdown","9d5b943e":"markdown","3f598684":"markdown","74190ad0":"markdown","14d032f4":"markdown","7fb274a4":"markdown","51a3a194":"markdown","d48e6483":"markdown","41a45984":"markdown","088e5458":"markdown","b3b8dbc6":"markdown","f46c1aad":"markdown","a2df8714":"markdown","f9c2f4b7":"markdown","6618b2e0":"markdown","97aaca56":"markdown","bf5e8fd7":"markdown","40404e11":"markdown","687b843d":"markdown","cad95f9c":"markdown","073bd290":"markdown","e59075de":"markdown","172e18c6":"markdown","8631c395":"markdown","b4e03e9d":"markdown"},"source":{"703352c4":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, roc_auc_score, confusion_matrix, classification_report, plot_roc_curve\nfrom sklearn.model_selection import train_test_split, cross_validate\n\npd.set_option('display.max_columns', None)\npd.set_option('display.float_format', lambda x: '%.3f' % x)\npd.set_option('display.width', 500)","5e8f4c9d":"data = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndf = data.copy()","5f35ea10":"def check_df(dataframe: object, head: object = 5) -> object:\n    print(\"########################### Shape ###########################\")\n    print(dataframe.shape)\n\n    print(\"########################### Types ###########################\")\n    print(dataframe.dtypes)\n\n    print(\"########################### Head ###########################\")\n    print(dataframe.head(head))\n\n    print(\"########################### Tail ###########################\")\n    print(dataframe.tail(head))\n\n    print(\"########################### NA ###########################\")\n    print(dataframe.isnull().sum())\n\n    print(\"########################### Quantiles ###########################\")\n    print(dataframe.quantile([0, 0.05,0.1, 0.25, 0.50,0.75, 0.90, 0.95, 0.99, 1]).T)","2fc0174c":"check_df(df)","6ccbbccd":"df.groupby(['Outcome']).agg({\"Age\":[\"mean\", \"median\"],\n                            \"Glucose\":[\"mean\",\"median\"],\n                            \"Pregnancies\":[\"mean\", \"median\"],\n                            \"BMI\":[\"mean\", \"median\"],\n                            \"SkinThickness\":[\"mean\", \"median\"]})","c25c7db9":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n\n    return cat_cols, num_cols, cat_but_car\ncat_cols, num_cols, cat_but_car = grab_col_names(df)","6526c613":"def cat_summary(dataframe, col_name, plot=False):\n\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts() \/ len(dataframe)}))\n\n    if plot:\n        plt.style.use('seaborn-darkgrid')\n        fig, ax = plt.subplots(1, 2)\n        ax = np.reshape(ax, (1, 2))\n        ax[0, 0] = sns.countplot(x=dataframe[col_name], color=\"green\", ax=ax[0, 0])\n        ax[0, 0].set_ylabel('Count')\n        ax[0, 0].set_xticklabels(ax[0, 0].get_xticklabels(), rotation=-45)\n        ax[0, 1] = plt.pie(dataframe[col_name].value_counts().values, labels=dataframe[col_name].value_counts().keys(),\n                           colors=sns.color_palette('bright'), shadow=True, autopct='%.0f%%')\n        plt.title(\"Percent\")\n        fig.set_size_inches(10, 6)\n        fig.suptitle('Analysis of Categorical Variables', fontsize=13)\n        plt.show()\n\n\nfor col in cat_cols:\n    cat_summary(df, col, plot=True)","3c1cb5a4":"def num_summary(dataframe, numerical_col):\n    # setup the plot grid\n    plt.style.use('seaborn-darkgrid')\n    fig, ax = plt.subplots(1, 2)\n    ax = np.reshape(ax, (1, 2))\n    ax[0, 0] = sns.histplot(x=dataframe[numerical_col], color=\"green\", bins=20, ax=ax[0, 0])\n    ax[0, 0].set_ylabel('Count')\n    ax[0, 0].set_title('Distribution')\n    ax[0, 1] = sns.boxplot(y=dataframe[numerical_col], color=\"purple\", ax=ax[0, 1])\n    ax[0, 1].set_title('Quantiles')\n\n    fig.set_size_inches(12, 8)\n    fig.suptitle('Analysis of Numerical Variables', fontsize=13)\n    plt.show()\n\nfor col in df[num_cols]:\n    num_summary(df, col)","f5650d45":"def correlated_map(dataframe, plot=False):\n    corr = dataframe.corr()\n    if plot:\n        sns.set(rc={'figure.figsize': (10, 10)})\n        sns.heatmap(corr, cmap=\"YlGnBu\", annot=True, linewidths=.7)\n        plt.xticks(rotation=60, size=10)\n        plt.yticks(size=10)\n        plt.title('Correlation Map', size=20)\n        plt.show()\n\ncorrelated_map(df, plot=True)","848934ef":"def missing_values_table(dataframe, na_name=False):\n    na_columns = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]\n    n_miss = dataframe[na_columns].isnull().sum().sort_values(ascending=False)\n    ratio = (dataframe[na_columns].isnull().sum() \/ dataframe.shape[0] * 100).sort_values(ascending=False)\n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])\n    print(missing_df, end=\"\\n\")\n    if na_name:\n        return na_columns\n    \nmissing_values_table(df, na_name=True)","5d5b88a9":"def outlier_thresholds(dataframe, col_name, q1=0.05, q3=0.95):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\nfor col in num_cols:\n    print(outlier_thresholds(df, col))","a41e0d54":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n\nfor col in num_cols:\n    replace_with_thresholds(df,col)","62a8ad6f":"df.describe().T","d6a843b2":"bmi_labels = [\"underweight\", \"normal_weight\", \"overweight\", \"obesity_class_1\", \"obesity_class_2\", \"obesity_class_3\"]\ndf['BMI_Cat'] = pd.cut(df['BMI'], [-1, 18.5, 25, 30, 35, 40, df['BMI'].max()], \n                       labels=bmi_labels)\ncat_summary(df,\"BMI_Cat\", plot=True)","cabd68d1":"df[\"New_Age_Cat\"] = df[\"Age\"].apply(lambda x: \"youngmale\" if x < 30 else (\"maturemale\" if 30 <= x <= 50 else \"seniormale\"))\ncat_summary(df,\"New_Age_Cat\", plot=True)","79614b10":"df[\"Glucose_Cat\"] = df[\"Glucose\"].apply(lambda x: \"Normal\" if x < 140 else (\"IGT\" if 140 <= x <= 200 else \"DM\"))\ncat_summary(df,\"Glucose_Cat\", plot=True)","7fd67600":"bp_labels = [\"optimal\", \"normal\", \"high_normal\", \"grade_1_hypertension\", \"grade_2_hypertension\", \"grade_3_hypertension\"]\ndf['Blood_Pressure_Cat'] = pd.cut(df['BloodPressure'], [-1, 80,  85, 90, 100, 110, df['BloodPressure'].max()], labels=bp_labels)\ncat_summary(df,\"Blood_Pressure_Cat\", plot=True)","f4e784b3":"def label_encoder(dataframe, binary_col):\n    labelencoder = LabelEncoder()\n    dataframe[binary_col] = labelencoder.fit_transform(dataframe[binary_col])\n    return dataframe\n\nbinary_cols = [col for col in df.columns if df[col].dtype not in [int, float] and df[col].nunique() == 2]\nlen(binary_cols)","612533b8":"for col in binary_cols:\n    label_encoder(df, col)\n\ndf.head()","2b77257e":"def one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n    return dataframe\n\nohe_cols = [col for col in df.columns if 10 >= df[col].nunique() > 2]\ndf = one_hot_encoder(df, ohe_cols, drop_first=True)\ndf.head()","38744327":"cat_cols, num_cols, cat_but_car = grab_col_names(df)","92e06229":"scaler = StandardScaler()\ndf[num_cols] = scaler.fit_transform(df[num_cols])\n\ncheck_df(df)","3f8f1aa2":"y = df[\"Outcome\"]\nX = df.drop([\"Outcome\"], axis=1)\n\nlog_model = LogisticRegression().fit(X, y)","53caaebe":"cv_results = cross_validate(log_model,\n                            X, y,\n                            cv=10,\n                            scoring=[\"accuracy\", \"precision\", \"recall\", \"f1\", \"roc_auc\"])","02409118":"y_pred = log_model.predict(X)","e5ff3f25":"# Confusion Matrix\ndef plot_confusion_matrix(y, y_pred):\n    acc = round(accuracy_score(y, y_pred), 2)\n    cm = confusion_matrix(y, y_pred)\n    sns.heatmap(cm, annot=True, fmt=\".0f\")\n    plt.xlabel('y_pred')\n    plt.ylabel('y')\n    plt.title('Accuracy Score: {0}'.format(acc), size=10)\n    plt.show()\n\nplot_confusion_matrix(y, y_pred)","85e9850c":"# Ba\u015far\u0131 skorlar\u0131:\nprint(classification_report(y, y_pred))","5f9c2331":"# ROC AUC\ny_prob = log_model.predict_proba(X)[:, 1]\nroc_auc_score(y, y_prob)","c7ee6247":"# Prediction for A New Observation\n\nX.columns\n\nrandom_user = X.sample(1, random_state=42)\n\nlog_model.predict(random_user)","cd1b2947":"feature_imp = pd.DataFrame({'Value': log_model.coef_[0], 'Feature': X.columns})\nplt.figure(figsize=(10, 10))\nsns.set(font_scale=1)\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\",\n                                                                     ascending=False)[0:8])\nplt.title('Features')\nplt.tight_layout()\nplt.show()","0a193b40":"## Analysis of Correlation","01a04970":"## Missing Values","fecc74f3":"## One-Hot Encoding","028abf6c":"<a id = \"8\"><\/a><h1 id=\"Encoding\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; color: Black; \">Encoding<\/span><\/h1>","e28604a5":"\n<a id = \"9\"><\/a><h1 id=\"Model\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; color: Black; \">Model<\/span><\/h1>","31397e79":"## Analysis of Numerical Variables","48566b02":"![unnamed.jpg](attachment:ef12839f-690d-4cca-8a21-ba1b87235a69.jpg)","6038ca95":"![Ekran G\u00f6r\u00fcnt\u00fcs\u00fc (834).png](attachment:5c0d777a-924d-47cc-8575-68b757ac6cdc.png) https:\/\/en.wikipedia.org\/wiki\/Blood_pressure","c56bc201":"## Blood Pressure","cdabaf76":"## Label Encoding","0e2c108a":"## Model Validation: 10-Fold Cross Validation","92c95583":"<a id = \"3\"><\/a><h1 id=\"Importing Libraries and Utilities\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; color: Black; \">Importing Libraries and Utilities<\/span><\/h1>","4c54202c":"\nThe dataset is available at the National Institutes of Diabetes-Digestive-Kidney Diseases in the USA. It is part of the large data set.\n\nPhoenix, a major city in the State of Arizona in the USA, is one of the best experiences. Underwear on Pima Indian women who are aged and over using for.\n\nIt consists of 768 observations and 8 numerical independent variables.\n\nThe target variable is specified as \"**outcome**\";\n\n**1** diabetes test result being positive,\n**0** indicates negative.\n\n* **Pregnancies**: Number of times pregnant\n* **Glucose**: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n* **BloodPressure**: Diastolic blood pressure (mm Hg)\n* **SkinThickness**: Triceps skin fold thickness (mm)\n* **Insulin**: 2-Hour serum insulin (mu U\/ml)\n* **BMI**: Body mass index (weight in kg\/(height in m)^2)\n* **DiabetesPedigreeFunction**: Diabetes pedigree function\n* **Age**: Age (years)\n* **Outcome**: Class variable ( 0 - 1)","9d5b943e":"<a id = \"1\"><\/a><h1 id=\"Introduction\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; color: Black; \">Introduction<\/span><\/h1>","3f598684":"![3.19_Colloquial_English_Age_Stages.jpg](attachment:4e75b760-05bc-4c3b-b741-bbd4d4a71cce.jpg)","74190ad0":"<a id = \"6\"><\/a><h1 id=\"Data Preprocessing\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; color: Black; \">Data Preprocessing<\/span><\/h1>","14d032f4":"![unnamed.png](attachment:377e2747-0c85-4fad-aa16-185329d24c2c.png)","7fb274a4":"**Blood Pressure (BP)** is the pressure of circulating blood against the walls of blood vessels. Most of this pressure results from the heart pumping blood through the circulatory system. When used without qualification, the term \"blood pressure\" refers to the pressure in the large arteries. ","51a3a194":"## Outliers","d48e6483":"## Glucose","41a45984":"## Predict","088e5458":"<p style=\"padding: 10px; background-color:#7FDBFF;color: Black;font-weight: bold;\n          text-align: center; font-size:250%;\">Diabetes Prediction<\/p>","b3b8dbc6":"## BMI","f46c1aad":"<a id = \"5\"><\/a><h1 id=\"Exploratory Data Analysis\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; color: Black; \">Exploratory Data Analysis<\/span><\/h1>","a2df8714":"<a id = \"7\"><\/a><h1 id=\"Feature Extraction\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; color: Black; \">Feature Extraction<\/span><\/h1>","f9c2f4b7":"![Ekran G\u00f6r\u00fcnt\u00fcs\u00fc (831).png](attachment:1272c366-e305-4300-9918-4e71ed7e44cf.png)\n[https:\/\/www.researchgate.net\/figure\/Weight-Classification-by-Body-Mass-Index-BMI_tbl1_12753525](http:\/\/)","6618b2e0":"<a id = \"4\"><\/a><h1 id=\"Load and Check Data\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; color: Black; \">Load and Check Data<\/span><\/h1>","97aaca56":"![Ekran G\u00f6r\u00fcnt\u00fcs\u00fc (836).png](attachment:1d395bce-49f7-44c2-bf78-c5420e134b5a.png)","bf5e8fd7":"![](https:\/\/i.pinimg.com\/474x\/c2\/4f\/c2\/c24fc21a2ba2f9e8847616ae0424788f.jpg)","40404e11":"## Model Evaluation","687b843d":"![Blue-background-produce-on-bottom-blocks-spelling-out-DIABETES-stethoscope-and-blood-sugar-meter.jpg](attachment:f8894d30-fb04-4e36-a8f9-87779f1fd0c0.jpg)","cad95f9c":"<a id = \"2\"><\/a><h1 id=\"Dataset Story\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; color: Black; \">Dataset Story<\/span><\/h1>","073bd290":"## Standart Scaler","e59075de":"## Age","172e18c6":"**Oral glucose tolerance test**:\n\nFor this test, you fast overnight, and the fasting blood sugar level is measured. Then you drink a sugary liquid, and blood sugar levels are tested periodically for the next two hours.\n\n* A blood sugar level less than 140 mg\/dL (7.8 mmol\/L) is normal.\n* A reading of more than 200 mg\/dL (11.1 mmol\/L) after two hours indicates diabetes. \n* A reading between 140 and 199 mg\/dL (7.8 mmol\/L and 11.0 mmol\/L) indicates prediabetes.\n\nhttps:\/\/www.mayoclinic.org\/diseases-conditions\/diabetes\/diagnosis-treatment\/drc-20371451","8631c395":"**Diabetes Mellitus**, which is generally referred to as sugar among the people, is the presence of sugar in the blood in general when glucose (sugar) is well above normal, and accordingly, sugar should not contain sugar. Its different derivatives are among the common and most common derivatives in the world. It can be targeted by a person with international disease intact.","b4e03e9d":"## Analysis of Categorical Variables"}}