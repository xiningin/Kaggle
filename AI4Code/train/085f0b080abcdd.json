{"cell_type":{"2062d21e":"code","b9e0e435":"code","398fd2f7":"code","6c7d0f9d":"code","95532bbf":"code","fe243451":"code","93e8bc64":"code","035f483d":"code","10777e9f":"code","1c4a959a":"markdown","d5db8d16":"markdown","7327db7c":"markdown","b4464a4b":"markdown","96882c42":"markdown","be0eed76":"markdown","04cbe377":"markdown","0373cc5f":"markdown","42235102":"markdown","12b70285":"markdown"},"source":{"2062d21e":"# imports\nimport os\nfrom operator import itemgetter\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\n\n# constants\npd.set_option('display.max_columns', 200)\npd.set_option('display.max_rows', 200)\ncolors = {\n  'very_light_gray': '#ececec',\n  'light_gray': '#b6b6b6',\n  'medium_gray': '#929292',\n  'very_dark_gray': '#414141',\n  'orange': '#ff6f00',\n  'light_blue': '#79c3ff',\n  'light_purple': '#d88aff',\n  'light_green': '#b4ec70',\n  'light_yellow': '#fff27e',\n  'light_red': '#ff7482',\n  'light_cyan': '#84ffff'\n}\nstart_date = np.datetime64('2020-01-22')\nall_dates = [start_date + np.timedelta64(x, 'D') for x in range(0, 100)]","b9e0e435":"# converts a country's data into a time series dataframe\ndef convert_to_ts (data, country):\n  df = data[data['Country\/Region'] == country].groupby(['Date'], as_index=False)['ConfirmedCases'].sum()\n  df.columns = ['date', 'count']\n  df['date'] = df['date'].astype('datetime64[ns]')\n  return df\n\ndata = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv')\ndat = [\n  { 'name': 'China', 'color': 'light_gray' },\n  { 'name': 'Korea, South', 'color': 'medium_gray' },\n  { 'name': 'Italy', 'color': 'very_dark_gray' },\n  { 'name': 'Iran', 'color': 'light_blue' },\n  { 'name': 'Spain', 'color': 'light_purple' },\n  { 'name': 'Germany', 'color': 'light_green' },\n  { 'name': 'France', 'color': 'light_yellow' },\n  { 'name': 'United Kingdom', 'color': 'light_red' },\n  { 'name': 'Switzerland', 'color': 'light_cyan' },\n  { 'name': 'US', 'color': 'orange' },\n]\ncountries = { d['name']: convert_to_ts(data, d['name']) for d in dat}","398fd2f7":"pd.DataFrame(\n  map(lambda obj: [obj[0], f'{obj[1][\"count\"].max():,.0f}'], countries.items()),\n  columns=['Country', 'Max infected']\n)","6c7d0f9d":"def comparison_to_china_penalty (df, offset):\n  china_counts = countries['China']['count'].to_numpy()\n  counts = df['count'].to_numpy()\n  residuals = []\n  for i in range(0, 7):\n    if i + offset < len(counts):\n      residuals.append(china_counts[i] - counts[i + offset])\n    else:\n      residuals.append(0)\n  return np.power(residuals, 2).sum()\n\ndef find_optimal_offset (df):\n  penalties = []\n  for offset in range(len(df)):\n    penalties.append(comparison_to_china_penalty(df, offset))\n  return np.argmin(penalties)\n\nfor d in dat:\n  d['offset'] = find_optimal_offset(countries[d['name']])\ndat.sort(key=lambda x: x['offset'])","95532bbf":"pd.DataFrame(dat, columns=['name', 'offset'])","fe243451":"fig = plt.figure(figsize=(20, 10))\nax = fig.add_subplot(111)\n\nfor d in dat:\n  country_name, offset, color_key = itemgetter('name', 'offset', 'color')(d)\n  country = countries[country_name]\n  ax.plot(\n    country['date'] - np.timedelta64(offset, 'D'),\n    country['count'],\n    label=f'{country_name} = China - {offset} days',\n    color=colors[color_key]\n  )\n\nplt.xlim((np.datetime64('2020-01-22'), np.datetime64('2020-02-22')))\nplt.xticks([np.datetime64('2020-01-22') + np.timedelta64(d, 'D') for d in range(0, 15)])\nax.set_xticklabels(range(0, 15))\nplt.xlabel('Days since onset for each Country')\n\nplt.ylim((0, 30000))\nax.set_yticklabels(['0' if x == 0 else '{:.0f}k'.format(int(x) \/ 1000) for x in ax.get_yticks().tolist()])\nplt.ylabel('Confirmed infections')\n\nplt.legend(title='Countries', loc='lower right')\n\nplt.show()\n","93e8bc64":"def sigmoid (x, A, slope, offset):\n  return A \/ (1 + np.exp ((x - (offset + 17.75)) \/ slope))\n\ndef fit_to_sigmoid (df, offset, all_dates):\n  dates = (df['date'] - start_date) \/ np.timedelta64(1, 'D')\n  p, _ = curve_fit(\n    lambda x, A, slope: sigmoid(x, A, slope, offset),\n    dates,\n    df['count'],\n    p0=[80000, -5],\n    bounds=(\n      [-np.inf, -np.inf],\n      [np.inf, -0.01]\n    ),\n    maxfev=5000,\n  )\n  return sigmoid((all_dates - start_date) \/ np.timedelta64(1, 'D'), *p, offset), p\n\nfor d in dat:\n  country_name, offset, color_key = itemgetter('name', 'offset', 'color')(d)\n  country = countries[country_name]\n  fit, p = fit_to_sigmoid(country, offset, all_dates)\n  d['fit'] = fit\n  d['p'] = p","035f483d":"china_slope = dat[0]['p'][1]\ngrowth_rate_relative_to_china = lambda p: china_slope\/p[1]\n\ntable_data = []\nfor d in dat:\n  country_name, offset, p = itemgetter('name', 'offset', 'p')(d)\n  # name, days behind china, relative growth rate, max infected\n  table_data.append([\n    country_name, \n    '' if country_name == 'China' else f'{offset}',\n    f'{growth_rate_relative_to_china(p):.1f}',\n    f'{p[0]:,.0f}'\n  ])\n\npd.DataFrame(table_data, columns=['Country', 'Days behind China', 'Growth rate relative to China', 'Estimated max infected'])","10777e9f":"fig = plt.figure(figsize=(20, 10))\nax = fig.add_subplot(111)\n\nfor d in dat:\n  country_name, color_key, fit = itemgetter('name', 'color', 'fit')(d)\n  country = countries[country_name]\n  ax.plot(\n    country['date'],\n    country['count'],\n    label=country_name,\n    color=colors[color_key],\n    linewidth=3\n  )\n  ax.plot(\n    all_dates,\n    fit,\n    color=colors[color_key],\n    linestyle=':'\n  )\n\n# plots the \"now\" line\ny_max = 150000\nnow = np.datetime64('2020-03-18').astype('datetime64[D]')\nplt.vlines(now, ymin=0, ymax=y_max, colors=colors['very_light_gray'], linestyles='dashed')\nplt.annotate('Actual', xy=(now - np.timedelta64(1, 'D'), y_max - 5000), ha='right', va='top')\nplt.annotate('Estimated', xy=(now + np.timedelta64(1, 'D'), y_max - 5000), ha='left', va='top')\n\nticks = [np.datetime64('2020-02-01') + np.timedelta64(7 * x, 'D') for x in range(0, 15)]\nlabel_from_tick = lambda tick: pd.to_datetime(tick).strftime('%b %d')\ntick_labels = list(map(label_from_tick, ticks))\nplt.xticks(ticks, tick_labels, rotation=20, horizontalalignment='right')\n\nplt.ylim((0, y_max))\nax.set_yticklabels(['0' if x == 0 else '{:.0f}k'.format(int(x) \/ 1000) for x in ax.get_yticks().tolist()])\nplt.ylabel('Confirmed infections')\n\nplt.grid(color=colors['very_light_gray'])\n\nplt.legend(title='Countries', loc='lower right')\n\nplt.show()","1c4a959a":"### Plot growth curves\n\nFor each country, plot the model-estimated growth curves overlaid with the actual data.","d5db8d16":"# Visualization of growth rates per country\n\nTo better understand the progression of the COVID-19 infection over time, we'll visualize the growth rate of the epidemic at the country level, fit a simple epidemic growth model to the data, and visualize the model estimates for how the epidemic will progress over time.","7327db7c":"### Compute offset for each country that best fits onset of epidemic (i.e., first 7 days)\n\nFor each country, find the best-fit \"offset\", that is, the number of days behind China it is. Compute the offset by selecting the number of days that makes the curve most look like China's curve.","b4464a4b":"### Estimate growth curves\n\nA simple model of epidemic behavior is a [logistic](https:\/\/en.wikipedia.org\/wiki\/Logistic_function) or sigmod function. That is, a function that grows exponentially at first, and then transitions to a constant value. For each country, find the best-fit parameters based on the available data.","96882c42":"### Visualize the initial epidemic onsets for each country\n\nOverlay each country's initial growth curve, offset by the offset parameter, so we can directly compare each country's growth rate of confirmed cases.","be0eed76":"Best-fit offset for each country, sorted by days behind China","04cbe377":"One thing to note is that the growth curves can change dramatically for countries still in the early stages of the epidemic (i.e., most countries other than China and South Korea) based on daily data updates. In other words, it's really too early in the epidemic for most countries to have any confidence that these simple predictions are accurate.\n\nTo see the latest data, check out <https:\/\/github.com\/mstubna\/covid-19>","0373cc5f":"### Summary table\n\nShow a summary table of the best-fit model paramters and their interpretation.","42235102":"Maximum confirmed cases per country","12b70285":"### Load data and filter to a select list of countries of interest\n\nLoad data from the training data set. For these visualizations we'll focus on the countries with the most cases."}}