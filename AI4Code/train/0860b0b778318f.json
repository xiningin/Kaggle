{"cell_type":{"23744e3c":"code","dfe18b10":"code","5afcefaf":"code","c4178f90":"code","f61a3b21":"code","33d8c215":"code","483ebfb9":"code","876a334a":"code","5471545c":"code","af947689":"code","98bfe4da":"code","e204ddc8":"code","131a7d73":"code","c058ab11":"code","2ac36abb":"code","3ffae242":"code","b0e93f98":"code","203e211e":"code","831628e8":"code","0c12d73f":"code","1f8e1190":"code","0fe5d8c3":"code","afc6ea49":"code","d5a1adfe":"code","3dab62b6":"code","4d850481":"code","e155b195":"code","01fb4df1":"code","d6e2c70b":"code","7b23c860":"code","cf45846f":"code","e31c9860":"code","ad3c13e2":"code","96e73d8a":"code","d243371a":"code","75cf1fdf":"code","9c4be3b1":"code","3116ee9c":"code","9575cbf0":"code","2e4cea75":"code","68a5bb79":"code","92243376":"code","9a30ef56":"code","99ab9d87":"code","bd5c4dac":"code","93f791be":"code","1e3b0002":"code","ff2836dc":"code","52ba7a2a":"code","5849f195":"code","90ebe5dd":"code","ca290a89":"markdown","6a03ca6f":"markdown","ea65a675":"markdown","236c6f37":"markdown","53497486":"markdown","1a826bcd":"markdown","1dd76915":"markdown","77c0e927":"markdown","6163d5d0":"markdown","e24074de":"markdown","3490a258":"markdown","acba7d74":"markdown","7f462989":"markdown","26562904":"markdown","018720d3":"markdown","270bf7f2":"markdown","fe49d538":"markdown","d551461d":"markdown"},"source":{"23744e3c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.set_option('display.float_format', lambda x: '%.3f' % x)","dfe18b10":"!pip install pandas-profiling --quiet","5afcefaf":"!pip install googletrans --quiet\nfrom googletrans import Translator\ntranslator = Translator()","c4178f90":"import glob\nfiles = glob.glob(\"..\/input\/competitive-data-science-predict-future-sales\/*\")\nfiles = {file.split(\"\/\")[3][:-4] : file for file in files}","f61a3b21":"item_categories  = pd.read_csv(files['item_categories'])\nitem_categories.head()","33d8c215":"items  = pd.read_csv(files['items'])\nitems.head()","483ebfb9":"#Takes a while to execute - Uncomment and execute if you want names in English otherwise move on.\n# from tqdm import tqdm\n# item_names = []\n# for item in tqdm(items['item_name'].values):\n#     item_names.append(translator.translate(item).text)\n    \n# items['item_name'] = item_names\n# items.head()","876a334a":"sales_train = pd.read_csv(files['sales_train'])\nsales_train.head()","5471545c":"shops = pd.read_csv(files['shops'])\nshops.head()","af947689":"shops['english_name'] = shops['shop_name'].apply(lambda shop_name : translator.translate(shop_name).text)","98bfe4da":"shops.head()","e204ddc8":"test = pd.read_csv(files['test'])\ntest.head()","131a7d73":"sample_submission = pd.read_csv(files['sample_submission'])\nsample_submission.head()","c058ab11":"sales_train.head()","2ac36abb":"from pandas_profiling import ProfileReport\nprofile = ProfileReport(sales_train, title=\"Sales Data Profiling Report\")","3ffae242":"profile","b0e93f98":"sales_train['total_sale'] = sales_train.item_price * sales_train.item_cnt_day\nsales_train.head()","203e211e":"months = ['Jan','Feb','Mar','Apr','May', 'Jun', 'Jul','Aug','Sept','Oct','Nov','Dec']\nmonths_mapping = { i : str(months[i%12])+\"'\"+str(i\/\/12 + 13) for i in range(34) }","831628e8":"sales_train['month-year'] = sales_train.date_block_num.map(months_mapping)\nsales_train.head()","0c12d73f":"returned_items = sales_train[sales_train['item_cnt_day'] < 0]\nreturned_items['total_sale'] = returned_items['total_sale'] * -1\nreturned_items.head()","1f8e1190":"sales_train[sales_train['total_sale'] > 0].describe()","0fe5d8c3":"sales_train['date'] = pd.to_datetime(sales_train['date'])\nsales_train.head()","afc6ea49":"total_sales = sales_train.groupby('date').sum()[['total_sale']]\ntotal_sales.plot()","d5a1adfe":"total_sales.groupby(pd.Grouper(freq='M')).sum().plot(figsize=(15,6))","3dab62b6":"sales_scatter = sales_train.loc[sales_train['total_sale'] > 0,['total_sale']]\nsales_scatter['idx'] = sales_scatter.index\nsns.scatterplot(x='idx',y='total_sale',data=sales_scatter)","4d850481":"plt.figure(figsize=(15,6))\nsns.distplot(np.log(sales_scatter['total_sale']),kde=False)","e155b195":"sales_train.groupby('date').sum()[['total_sale']].sort_values('total_sale',ascending=False).head(30).plot(kind='bar',figsize=(15,6))","01fb4df1":"sales_train.groupby('date').sum()[['total_sale']].sort_values('total_sale',ascending=False).head(30).plot(kind='bar',figsize=(15,6),logy=True)","d6e2c70b":"total_sales_by_date = sales_train.groupby('date').sum()[['total_sale']].sort_values('total_sale',ascending=False)\ntotal_sales_by_date.head(15).append(total_sales_by_date.tail(15)).plot(kind='bar',figsize=(15,6))","7b23c860":"total_sales_by_date = sales_train.groupby('date').sum()[['total_sale']].sort_values('total_sale',ascending=False)\ntotal_sales_by_date.head(15).append(total_sales_by_date.tail(15)).plot(kind='bar',figsize=(15,6), logy=True)","cf45846f":"total_items_by_date = sales_train.groupby('date').sum()[['item_cnt_day']].sort_values('item_cnt_day',ascending=False).head(30).plot(kind='bar', figsize=(15,6))","e31c9860":"returned_items.groupby('date').count()[['item_cnt_day']].sort_values('item_cnt_day',ascending=False).head(30).plot(kind='bar',figsize=(15,6))","ad3c13e2":"sales_train.groupby('month-year').sum()[['total_sale']].sort_values('total_sale',ascending=False).head(30).plot(kind='bar',figsize=(15,6))","96e73d8a":"returned_items.groupby('month-year').sum()[['total_sale']].sort_values('total_sale', ascending=False).head(30).plot(kind='bar',figsize=(15,6))","d243371a":"top5_month = returned_items.groupby(['month-year','item_id']).sum()[['total_sale']].sort_values('total_sale',ascending=False).iloc[:,:5]\ntop5_month.index.get_level_values(0).nunique()","75cf1fdf":"plt.figure(figsize=(15,15))\nsns.barplot(y='month-year',x='total_sale',data=top5_month.reset_index())","9c4be3b1":"returned_items.groupby('item_id').count()[['date']].sort_values('date',ascending=False).head(20).plot(kind='bar', figsize=(15,6))","3116ee9c":"returned_items.groupby('date').count()[['item_cnt_day']].sort_values('item_cnt_day',ascending=False).head(20).plot(kind='bar', figsize=(15,6))","9575cbf0":"sales_train.groupby('shop_id').sum()[['total_sale']].sort_values('total_sale', ascending=False).head(30).plot(kind='bar', figsize=(15,6))","2e4cea75":"returned_items.groupby('shop_id').count()[['item_cnt_day']].sort_values('item_cnt_day', ascending=False).head(30).plot(kind='bar', figsize=(15,6))","68a5bb79":"returned_items.groupby('shop_id').sum()[['total_sale']].sort_values('total_sale', ascending=False).head(30).plot(kind='bar', figsize=(15,6))","92243376":"shops_data = pd.merge(sales_train,shops)\nshop_wise_revenue = shops_data.groupby('english_name').sum()[['total_sale']]","9a30ef56":"shop_wise_revenue['share'] = (shop_wise_revenue['total_sale']\/shop_wise_revenue['total_sale'].sum())*100","99ab9d87":"top30_shops = shop_wise_revenue.sort_values('share', ascending=False).head(30)","bd5c4dac":"shop_data_pie = top30_shops.to_dict()\nshop_data_pie['total_sale']['Others'] = shop_wise_revenue['total_sale'].sum() - top30_shops['total_sale'].sum()\nshop_data_pie['share']['Others'] = 100 - top30_shops['share'].sum()\nshop_data_pie = pd.DataFrame(shop_data_pie)\nshop_data_pie.tail()","93f791be":"fig, ax = plt.subplots(figsize=(10,10))\nax.pie(shop_data_pie['share'].values, labels=shop_data_pie.index.values, autopct='%1.1f%%',shadow=True, startangle=90)\nax.axis('equal')\nax.set_title(\"Revenue wise share of Top 30 shops and Others is remaning 30\",pad=20.0, fontdict = {'fontsize': 20,'fontweight' : 'bold'})\nplt.show()","1e3b0002":"item_data = pd.merge(sales_train,items)\nitem_share_revenue = item_data.groupby('item_name').sum()[['total_sale']].sort_values('total_sale',ascending=False)\nitem_share_revenue['share'] = (item_share_revenue['total_sale']\/item_share_revenue['total_sale'].sum()) * 100","ff2836dc":"item_share_revenue.head()","52ba7a2a":"top30_items = item_share_revenue.sort_values('share', ascending=False).head(20)","5849f195":"item_data_pie = top30_items.to_dict()\nitem_data_pie['total_sale']['Others'] = item_share_revenue['total_sale'].sum() - top30_items['total_sale'].sum()\nitem_data_pie['share']['Others'] = 100 - top30_items['share'].sum()\nitem_data_pie = pd.DataFrame(item_data_pie)\nitem_data_pie.head()","90ebe5dd":"fig, ax = plt.subplots(figsize=(10,10))\nax.pie(item_data_pie['share'].values, labels=item_data_pie.index.values, autopct='%1.1f%%',shadow=True, startangle=90)\nax.axis('equal')\nax.set_title(\"Revenue wise share of Top 20 Items and Others\",pad=20.0, fontdict = {'fontsize': 20,'fontweight' : 'bold'})\nplt.show()","ca290a89":"## Months with most returned revenue","6a03ca6f":"## Top 20 Dates With Most Returned Items - Count Wise","ea65a675":"## Dates With Maximum Sales - Revenue in contrast with Minimum Sales - Revenue Logy Enabled","236c6f37":"## Shops share in revenue","53497486":"## Shops with highest Sales Revenue","1a826bcd":"## Dates With Most Returned Items - Count Wise","1dd76915":"## Items share by revenue","77c0e927":"## Top 20 Month-Year with Maximum Sales Revenue","6163d5d0":"## Sales Scatter Plot","e24074de":"## Day wise Revenue Plot","3490a258":"## Dates With Maximum Sales - Revenue in contrast with Minimum Sales - Revenue","acba7d74":"## Dates With Highest Number of Items Returned","7f462989":"## Dates With Maximum Sales - Revenue","26562904":"## Shops with maximum revenue returned","018720d3":"## Dates With Maximum Sales - Revenue Logy Enabled","270bf7f2":"## Dates with Highest number of Items Sold","fe49d538":"## Shops with maximum item returned","d551461d":"## Month wise Revenue Plot"}}