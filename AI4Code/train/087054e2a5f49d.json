{"cell_type":{"bb92df12":"code","3a6954c6":"code","63c0bff5":"code","dfca963d":"code","a12862cd":"code","aca9b087":"code","6697e198":"code","1c1520dd":"code","1ad69f33":"code","e5ab3845":"code","fce1e9d5":"code","c292877c":"code","79e58e61":"code","23711031":"code","8596ac80":"code","f70064cd":"code","fa975f03":"code","76db1c25":"code","1546d890":"code","c6b209fc":"code","3bd06e03":"code","878ca165":"markdown"},"source":{"bb92df12":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a6954c6":"import math\nimport pandas_datareader as web\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense,LSTM\nfrom matplotlib import pyplot as plt\nplt.style.use('fivethirtyeight')\n","63c0bff5":"df=web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end='2019-12-17')\ndf","dfca963d":"df.shape","a12862cd":"plt.figure(figsize=(19,8))\nplt.plot(df['Close'], label='AAPL', linewidth=2)\nplt.title('Close Price History')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)')\nplt.legend(loc='upper left')\nplt.show()","aca9b087":"data=df.filter(['Close'])\ndataset=data.values\ntraining_data_len=math.ceil(len(dataset)*0.8)\ntraining_data_len","6697e198":"scaler=MinMaxScaler(feature_range=(0,1))\nscaled_data=scaler.fit_transform(dataset)\nscaled_data","1c1520dd":"train_data=scaled_data[0:training_data_len,:]\nx_train=[]\ny_train=[]\n\nfor i in range(60, len(train_data)):\n    x_train.append(train_data[i-60:i,0])\n    y_train.append(train_data[i,0])\n    if i<=60:\n        print(x_train)\n        print(y_train)\n        print()","1ad69f33":"x_train,y_train=np.array(x_train),np.array(y_train)\nx_train=np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))\nx_train.shape","e5ab3845":"model=Sequential()\nmodel.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1],1)))\nmodel.add(LSTM(50, return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))","fce1e9d5":"model.compile(optimizer='adam',loss='mean_squared_error')","c292877c":"model.fit(x_train, y_train, batch_size=1, epochs=1)","79e58e61":"test_data=scaled_data[training_data_len-60:,:]\nx_test=[]\ny_test=dataset[training_data_len:,:]\n\nfor i in range(60, len(test_data)):\n    x_test.append(test_data[i-60:i,0])\n\n","23711031":"x_test=np.array(x_test)\nx_test=np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))\nx_test.shape","8596ac80":"predictions=model.predict(x_test)\npredictions=scaler.inverse_transform(predictions)","f70064cd":"rmse=np.sqrt(np.mean(predictions-y_test)**2)\nrmse","fa975f03":"train=data[:training_data_len]\nvalid=data[training_data_len:]\nvalid['Predictions']=predictions\n","76db1c25":"plt.figure(figsize=(19,8))\nplt.plot(train['Close'], linewidth=2)\nplt.plot(valid[['Close','Predictions']], linewidth=2)\nplt.title('Model')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)')\nplt.legend(['Train','Val','Predictions'], loc='lower right')\nplt.show()","1546d890":"valid","c6b209fc":"apple_quote=web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end='2019-12-17')\nnew_df=apple_quote.filter(['Close'])\nlast_60_days=new_df[-60:].values\nlast_60_days_scaled=scaler.transform(last_60_days)\nX_test=[]\nX_test.append(last_60_days_scaled)\nX_test=np.array(X_test)\nX_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))\npred_price=model.predict(x_test)\npred_price=scaler.inverse_transform(pred_price)\nprint(pred_price)","3bd06e03":"apple_quote2=web.DataReader('AAPL', data_source='yahoo', start='2019-12-18', end='2019-12-18')\nprint(apple_quote2['Close'])","878ca165":" # predict '2019-12-18' price and compare with the real price"}}