{"cell_type":{"577fe1f1":"code","063601a2":"code","bc3bf276":"code","8ab94eac":"code","d7b4e21b":"code","e23f57da":"code","ca929164":"code","eb6616e7":"code","63ac8ba4":"code","4cb26ee0":"code","1bc1d7eb":"code","58e81229":"code","f99772c4":"code","f0735330":"code","98520777":"code","21457438":"code","b3e0b910":"code","1e8e5a8e":"code","004b026b":"code","99c2e593":"code","ebc285e5":"markdown","503b9107":"markdown","9e394414":"markdown","9ee36f71":"markdown","3f16fbdd":"markdown","48e7a63a":"markdown","cf64ab84":"markdown","5e6791bc":"markdown","b8278401":"markdown","41ca48df":"markdown","43ec2038":"markdown","e25645ac":"markdown","be02aa98":"markdown","63959ba4":"markdown"},"source":{"577fe1f1":"!pip install chart-studio","063601a2":"# Data processing libraries\nimport numpy as np \nimport pandas as pd \n\n# Visualization libraries\nimport datetime\nimport matplotlib\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n%matplotlib inline\nsns.set()\n\n# Plotly visualization libraries\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport chart_studio.plotly as py\nfrom plotly.graph_objs import *\nfrom IPython.display import Image\npd.set_option('display.max_rows', None)\n\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode()\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc3bf276":"char_df = pd.read_csv('..\/input\/lord-of-the-rings-data\/lotr_characters.csv')\nscript_df = pd.read_csv('..\/input\/lord-of-the-rings-data\/lotr_scripts.csv')","8ab94eac":"char_df.head()","d7b4e21b":"script_df.head()","e23f57da":"records = script_df.groupby(['movie']).size()\nrecords = records.sort_values()\n\ngrouped_df = pd.DataFrame(records)\n\ngrouped_df['Count'] = pd.Series(records).values\ngrouped_df['Movies'] = grouped_df.index\ngrouped_df['Log Count'] = np.log(grouped_df['Count'])\ngrouped_df.head()","ca929164":"fig = go.Figure(go.Bar(\n    x = grouped_df['Movies'],\n    y = grouped_df['Log Count'],\n    text=['Bar Chart'],\n    name='LOTR Movies',\n    marker_color=grouped_df['Count']\n))\n\nfig.update_layout(\n    height=800,\n    title_text='Movies distribution in the LOTR Trilogy',\n    showlegend=True\n)\n\nfig.show()","eb6616e7":"char_df.head()","63ac8ba4":"gender_df = char_df[['gender','name', 'spouse']]\ngender_df.head()","4cb26ee0":"gen_df = gender_df.groupby('gender')['name'].value_counts().reset_index(name='count')\ngen_df['count'] = gender_df.groupby('gender')['name'].transform('size')\ngen_df.head()","1bc1d7eb":"test_df = gender_df\ndf = test_df.groupby(['gender'], as_index=False, sort=False)['name'].count()\ndf.head()","58e81229":"fig = px.pie(df, values='name', names='gender')\nfig.show()","f99772c4":"tdf = char_df.groupby(['race'], as_index=False, sort=False)['name'].count()\ntdf.head()","f0735330":"fig = px.pie(tdf, values='name', names='race')\nfig.show()","98520777":"char_df.head()","21457438":"script_df.head()","b3e0b910":"sdf = script_df.groupby('char')['movie'].value_counts().reset_index(name='count')\nsdf['count'] = script_df.groupby('char')['movie'].transform('size')\n\nsdf.head()","1e8e5a8e":"fig = px.pie(sdf, values='count', names='char')\nfig.show()","004b026b":"def generate_wordcloud(dffile, user):\n\n    # remove stopwords from text field\n    comment_words = '' \n    stopwords = set(STOPWORDS)\n\n    # iterate through the csv file \n    for val in dffile.Text_Lemma: \n        \n        # typecaste each val to string \n        val = str(val) \n    \n        # split the value \n        tokens = val.split() \n        \n        # Converts each token into lowercase \n        for i in range(len(tokens)): \n            tokens[i] = tokens[i].lower() \n        \n        comment_words += \" \".join(tokens)+\" \"\n\n    # generate wordcloud over comment_words\n    wordcloud = WordCloud(width = 800, height = 800, \n        background_color ='white', \n        prefer_horizontal=1, font_path='Arial',\n        stopwords = stopwords, \n        min_font_size = 10).generate(comment_words) \n\n    # plot the WordCloud image                        \n    plt.figure(figsize = (8, 8), facecolor = None) \n    plt.imshow(wordcloud) \n    plt.axis(\"off\") \n    plt.tight_layout(pad = 0) \n\n    img_data = io.BytesIO()\n    plt.savefig(img_data, format='png')\n    img_data.seek(0)","99c2e593":"def generate_mask_wordcloud(dffile, obj, user):\n\n    # remove stopwords from text field\n    comment_words = '' \n    stopwords = set(STOPWORDS)\n\n    # iterate through the csv file \n    for val in dffile.text: \n        \n        # typecaste each val to string \n        val = str(val) \n    \n        # split the value \n        tokens = val.split() \n        \n        # Converts each token into lowercase \n        for i in range(len(tokens)): \n            tokens[i] = tokens[i].lower() \n        \n        comment_words += \" \".join(tokens)+\" \"\n\n    # generate mask from the uploaded image\n    mask = np.array(Image.open(obj['Body']))\n\n    # generate wordcloud over comment_words enclosed in mask\n    wordcloud_usa = WordCloud(stopwords=stopwords, background_color=\"white\", mode=\"RGBA\", max_words=1000, mask=mask).generate(comment_words)\n\n    # create coloring from image\n    image_colors = ImageColorGenerator(mask)\n    plt.figure(figsize=[7,7])\n    plt.imshow(wordcloud_usa.recolor(color_func=image_colors), interpolation=\"bilinear\")\n    plt.axis(\"off\")\n\n    img_data = io.BytesIO()\n    plt.savefig(img_data, format='png')\n    img_data.seek(0)","ebc285e5":"### Analyze the scripts for the triology","503b9107":"### Get the metadata about the datasets","9e394414":"> **Far over the misty mountains cold **\n<br>\n> **To dungeons deep and caverns old**\n<br>\n> **We must away ere break of day**\n<br>\n> **To find our long-forgotten gold!**","9ee36f71":"# Let's begin our adventure to **Misty Mountains** on Middle Earth!","3f16fbdd":"**Bar Chart**","48e7a63a":"### Generate Wordcloud for every character","cf64ab84":"### Count the characters present across all the genders","5e6791bc":"### Group by gender","b8278401":"### Count the number of occurences of each character in the dialogues across triology","41ca48df":"![LOTR](https:\/\/wallpapercave.com\/wp\/PQVpQko.jpg)","43ec2038":"### **Visualize the distribution of characters on Pie Chart**","e25645ac":"### Group the characters from the scripts by movies\nIn order to scale the data, bring the data in log scale","be02aa98":"### Read LOTR data into dataframes","63959ba4":"### Visualize the character composition in LOTR"}}