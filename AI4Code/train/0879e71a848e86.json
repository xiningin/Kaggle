{"cell_type":{"849c1ef6":"code","885fafe9":"code","1ad86484":"code","f47fe1dd":"code","e81c3050":"code","16b630f8":"code","5775bcd4":"code","c9da5e26":"code","acb6f114":"code","8fdd3cd4":"code","5691782c":"code","314548ef":"code","d3b2148b":"code","906ab057":"code","0d48057a":"code","ff0e7fc1":"code","1115975a":"code","0a574993":"markdown","ece547ea":"markdown"},"source":{"849c1ef6":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense,Dropout\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.regularizers import l2\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix","885fafe9":"df = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","1ad86484":"df.columns.isnull()","f47fe1dd":"plt.matshow(df.corr())\nplt.show()","e81c3050":"x_df = df.iloc[:,:-1]","16b630f8":"y_df = df.iloc[:,-1]","5775bcd4":"X_train,X_test,y_train,y_test = train_test_split(x_df,y_df,test_size=0.1,random_state=42)","c9da5e26":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","acb6f114":"def create_model(optimizer='adam'):\n    model = Sequential()\n    model.add(Dense(128,activation='selu',input_shape=[13]))\n    model.add(Dropout(0.4))\n    model.add(Dense(64,activation='selu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(32,activation='selu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(16,activation='selu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(1,activation='sigmoid'))\n    \n    model.compile(optimizer=optimizer,loss='binary_crossentropy',metrics=['accuracy'])\n    \n    return model","8fdd3cd4":"from keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import GridSearchCV\n\n# Wrap Keras model so it can be used by scikit-learn\nnn = KerasClassifier(build_fn=create_model, verbose=0)\n\n# Create Hyperparameter space\nepochs = [10,50,100]\nbatches = [5,10,100]\noptimizers = ['rmsprop','adam']\n\n# Create Hyperparameter options \nhyperparameters = dict(optimizer=optimizers, epochs=epochs,batch_size=batches)\n\n# Create GridSearch\ngrid = GridSearchCV(estimator=nn, param_grid=hyperparameters)\n\ngrid_result = grid.fit(X_train,y_train)","5691782c":"print(grid_result.best_params_)","314548ef":"optimizer_best = grid_result.best_params_['optimizer']\nepochs_best = grid_result.best_params_['epochs']","d3b2148b":"model = create_model(optimizer_best)\nhistory = model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=epochs_best,verbose=0)","906ab057":"acc = history.history['accuracy']\nloss = history.history['loss']\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\n\nepoch = range(len(acc))\n\nplt.figure(figsize=(16,8))\n\nplt.subplot(1,2,1)\nplt.plot(epoch,acc,label='acc')\nplt.plot(epoch,val_acc,label='val_acc')\nplt.title('Accuracy')\n\nplt.subplot(1,2,2)\nplt.plot(epoch,loss,label='loss')\nplt.plot(epoch,val_loss,label='val_loss')\nplt.title('Loss')\n","0d48057a":"y_pred = model.predict(X_test)","ff0e7fc1":"y_pred = (y_pred > 0.5)\nprint(confusion_matrix(y_pred, y_test))","1115975a":"print(np.concatenate((y_pred.reshape(len(y_pred),1), np.array(y_test).reshape(len(y_test),1)),1))","0a574993":"### Compare predicted result with testset.","ece547ea":"## Implement GridSearchCV on Keras"}}