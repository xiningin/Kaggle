{"cell_type":{"29dc0145":"code","fae4bca1":"code","fc0968b5":"code","150e13b8":"code","a12f2726":"code","24fd7fcf":"code","213d559f":"code","73ef6d79":"code","73a6f3f0":"code","2461e5f9":"code","399a829d":"code","bc366158":"code","3c7a16a6":"code","f7e5f298":"markdown","a7cfb5d3":"markdown","5cb77215":"markdown","83badd89":"markdown","922da842":"markdown","9712f7fe":"markdown","acce4034":"markdown"},"source":{"29dc0145":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\"))","fae4bca1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom skimage.io import imread\nimport matplotlib.pyplot as plt\nfrom skimage.segmentation import mark_boundaries\nfrom skimage.util.montage import montage2d as montage\nmontage_rgb = lambda x: np.stack([montage(x[:, :, :, i]) for i in range(x.shape[3])], -1)\nship_dir = '..\/input\/airbus-ship-detection\/'\ntrain_image_dir = os.path.join(ship_dir, 'train_v2')\ntest_image_dir = os.path.join(ship_dir, 'test_v2')\nimport gc; gc.enable() # memory is tight\n\nfrom skimage.morphology import label\ndef multi_rle_encode(img):\n    labels = label(img[:, :, 0])\n    return [rle_encode(labels==k) for k in np.unique(labels[labels>0])]\n\n# ref: https:\/\/www.kaggle.com\/paulorzp\/run-length-encode-and-decode\ndef rle_encode(img):\n    '''\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels = img.T.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)\n\ndef rle_decode(mask_rle, shape=(768, 768)):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (height,width) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape).T  # Needed to align to RLE direction\n\ndef masks_as_image(in_mask_list):\n    # Take the individual ship masks and create a single mask array for all ships\n    all_masks = np.zeros((768, 768), dtype = np.int16)\n    #if isinstance(in_mask_list, list):\n    for mask in in_mask_list:\n        if isinstance(mask, str):\n            all_masks += rle_decode(mask)\n    return np.expand_dims(all_masks, -1)","fc0968b5":"print(os.listdir(\"..\/input\"))","150e13b8":"from keras import models, layers\nfullres_model = models.load_model('..\/input\/u-net-base-on-resnet34-transfer-learning-keras\/seg_model.h5', compile=False)\nseg_in_shape = fullres_model.get_input_shape_at(0)[1:3]\nseg_out_shape = fullres_model.get_output_shape_at(0)[1:3]\nprint(seg_in_shape, '->', seg_out_shape)","a12f2726":"test_paths = os.listdir(test_image_dir)\nprint(len(test_paths), 'test images found')","24fd7fcf":"fig, m_axs = plt.subplots(8, 2, figsize = (10, 40))\nfor (ax1, ax2), c_img_name in zip(m_axs, test_paths):\n    c_path = os.path.join(test_image_dir, c_img_name)\n    c_img = imread(c_path)\n    first_img = np.expand_dims(c_img, 0)\/255.0\n    first_seg = fullres_model.predict(first_img)\n    ax1.imshow(first_img[0])\n    ax1.set_title(c_img_name)\n    ax2.imshow(first_seg[0, :, :, 0], vmin = 0, vmax = 1)\n    ax2.set_title('Prediction')\nfig.savefig('test_predictions.png')","213d559f":"#Debug use\n\"\"\"\nfrom skimage.morphology import binary_opening, disk\nc_path = os.path.join(test_image_dir, '8a56c9bdd.jpg')\nc_img = imread(c_path)\nfirst_img = np.expand_dims(c_img, 0)\/255.0\nfirst_seg = fullres_model.predict(first_img)[0]\nfirst_seg = binary_opening(first_seg>0.5, np.expand_dims(disk(2), -1))\n\"\"\"","73ef6d79":"have_ship= pd.read_csv(\"..\/input\/simple-transfer-learning-detect-ship-exist-keras\/Have_ship_or_not.csv\")","73a6f3f0":"have_ship.head()","2461e5f9":"test_names = have_ship.loc[have_ship['Have_ship'] > 0.5, ['ImageId']]['ImageId'].values.tolist()\ntest_names_nothing = have_ship.loc[have_ship['Have_ship'] <= 0.5, ['ImageId']]['ImageId'].values.tolist()\nlen(test_names), len(test_names_nothing)","399a829d":"ship_list_dict = []\nfor name in test_names_nothing:\n    ship_list_dict.append({'ImageId':name,'EncodedPixels':None})","bc366158":"from tqdm import tqdm_notebook\nfrom skimage.morphology import binary_opening, disk\nfor c_img_name in tqdm_notebook(test_paths):\n    if c_img_name in test_names:\n        c_path = os.path.join(test_image_dir, c_img_name)\n        c_img = imread(c_path)\n        c_img = np.expand_dims(c_img, 0)\/255.0\n        cur_seg = fullres_model.predict(c_img)[0]\n        cur_seg = binary_opening(cur_seg>0.5, np.expand_dims(disk(2), -1))\n        cur_rles = multi_rle_encode(cur_seg)\n        if len(cur_rles)>0:\n            for c_rle in cur_rles:\n                ship_list_dict += [{'ImageId': c_img_name, 'EncodedPixels': c_rle}]\n        else:\n            ship_list_dict += [{'ImageId': c_img_name, 'EncodedPixels': None}]\n    gc.collect()\n    ","3c7a16a6":"submission_df = pd.DataFrame(ship_list_dict)[['ImageId', 'EncodedPixels']]\nsubmission_df.to_csv('submission.csv', index=False)\nsubmission_df.sample(3)","f7e5f298":"## Have ship data to submission file","a7cfb5d3":"## No ship data to submission file","5cb77215":"## Use Part-1 result to seperate have ship and no ship data","83badd89":"## Part2 - U-net base on ResNet34 transfer learning \n* https:\/\/www.kaggle.com\/super13579\/u-net-base-on-resnet34-transfer-learning-keras","922da842":"##  Part1 - Simple tansfer learning to detect ship exist\n* https:\/\/www.kaggle.com\/super13579\/simple-transfer-learning-detect-ship-exist-keras","9712f7fe":"## Plot Test Image by part-2 trained model","acce4034":"# Introduction\n* This is part 3 for this competitions submit"}}