{"cell_type":{"b7f7573d":"code","c0a0ebdb":"code","5709cf2a":"code","710f06eb":"code","da1d27a4":"code","d5a591bc":"code","6cf107ff":"code","5b826a0e":"code","7d0f5e40":"code","3b24f7b9":"code","c771ee8d":"code","c1082e0b":"code","de993768":"code","2f242972":"code","8afcc002":"code","1b3dd060":"code","8040e352":"markdown"},"source":{"b7f7573d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0a0ebdb":"# import pyspark\n!pip install pyspark","5709cf2a":"# Import th\u01b0 vi\u1ec7n.\nfrom pyspark.sql.session import SparkSession\nfrom pyspark.sql import functions as f\nfrom pyspark.sql.types import FloatType\nfrom pyspark.sql.functions import col, when\nfrom pyspark.sql.functions import udf\nfrom pyspark.ml.feature import StringIndexer, OneHotEncoder, VectorAssembler\nfrom pyspark.ml.feature import StopWordsRemover, RegexTokenizer\nfrom pyspark.ml.feature import HashingTF, IDF, Tokenizer, CountVectorizer, Word2Vec\nfrom pyspark.sql import Row\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.classification import LogisticRegression, DecisionTreeClassifier, RandomForestClassifier\n","710f06eb":"# Import d\u1eef li\u1ec7u\nspark = SparkSession.builder.appName(\"Thuan_Vinh_Thien_Tai_Phuong\").config(\"spark.executor.memory\",\"8g\").getOrCreate()\n\nschema_train = \"polarity FLOAT, id LONG, date_time STRING, query STRING, user STRING, text STRING\"\nschema_test = \"id LONG, date_time STRING, query STRING, user STRING, text STRING\"\n\ntrain = spark.read.csv('..\/input\/it2034ch1502-nlp\/train.csv', header=True, schema=schema_train).select('id','text','polarity')\ntest = spark.read.csv('..\/input\/it2034ch1502-nlp\/test.csv', header=True, schema=schema_test).select('id','text')","da1d27a4":"# Lo\u1ea1i b\u1ecf c\u00e1c k\u00ed t\u1ef1 \u0111\u1eb7c bi\u1ec7t.\n# remove special characters.\nuser_regex = r\"(@\\w{1,15})\"\nhashtag_replace_regex = \"#(\\w{1,})\"\nurl_regex = r\"((https?|ftp|file):\\\/{2,3})+([-\\w+&@#\/%=~|$?!:,.]*)|(www.)+([-\\w+&@#\/%=~|$?!:,.]*)\"\nemail_regex = r\"[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{1,}\"\ni_regex = r\"i \"\n\ndef cleaning_process(data):\n            # Lo\u1ea1i b\u1ecf @Mention kh\u1ecfi text\n    data=(data.withColumn(\"text\",f.regexp_replace(f.col(\"text\"), user_regex, \"\")) \n            # Lo\u1ea1i b\u1ecf #Hashtag kh\u1ecfi text\n            .withColumn(\"text\",f.regexp_replace(f.col(\"text\"), hashtag_replace_regex, \"$1\"))\n            # Lo\u1ea1i b\u1ecf URL kh\u1ecfi text\n            .withColumn(\"text\",f.regexp_replace(f.col(\"text\"), url_regex, \"\")) \n            # Lo\u1ea1i b\u1ecf Email kh\u1ecfi text\n            .withColumn(\"text\",f.regexp_replace(f.col(\"text\"), email_regex, \"\"))\n            # Lo\u1ea1i b\u1ecf s\u1ed1 c\u0169ng nh\u01b0 c\u00e1c k\u00fd t\u1ef1 kh\u1ecfi \u0111o\u1ea1n text\n            .withColumn(\"text\",f.regexp_replace(f.col(\"text\"), \"[^a-zA-Z]\", \" \"))\n            # Lo\u1ea1i b\u1ecf c\u00e1c kho\u1ea3ng tr\u1eafng th\u1eeba trong c\u00e2u\n            .withColumn(\"text\",f.regexp_replace(f.col(\"text\"), \" +\", \" \"))\n            # Lo\u1ea1i v\u1ecf c\u00e1c kho\u1ea3ng tr\u1eafng \u0111\u1ea7u v\u00e0 cu\u1ed1i c\u00e2u\n            .withColumn(\"text\",f.trim(f.col(\"text\")))\n            # Chu\u1ea9n ho\u00e1 vi\u1ebft th\u01b0\u1eddng\n            .withColumn(\"text\",f.lower(f.col(\"text\")))\n            # Gi\u1eef l\u1ea1i c\u00e1c d\u00f2ng m\u00e0 \u0111o\u1ea1n text c\u00f3 n\u1ed9i dung \n            .filter(f.col(\"text\") != \"\"))\n    return data","d5a591bc":"# Clean d\u1eef li\u1ec7u train v\u00e0 test trong c\u1ed9t text.\ntrain = cleaning_process(train)\ntest = cleaning_process(test)","6cf107ff":"train.show()","5b826a0e":"# T\u00e1ch string th\u00e0nh t\u1eeb word.\n\nregexTokenizer = RegexTokenizer(inputCol=\"text\", outputCol=\"words\", pattern=\"\\\\W\")\nstopwords_remover = StopWordsRemover(inputCol=\"words\", outputCol=\"words1\", \n                                     stopWords=StopWordsRemover.loadDefaultStopWords(\"english\"))\nhashtf = HashingTF(numFeatures=2**16, inputCol=\"words1\", outputCol='tf')\nidf = IDF(inputCol='tf', outputCol=\"features\", minDocFreq=5) #minDocFreq: remove sparse terms\n","7d0f5e40":"# label_stringIdx = StringIndexer(inputCol = \"polarity\", outputCol = \"label\")\nlr = LogisticRegression(labelCol = \"polarity\",featuresCol=\"features\",maxIter = 100, regParam = 0.001)\n\npipeline = Pipeline(stages=[regexTokenizer, stopwords_remover, hashtf, idf, lr])","3b24f7b9":"model = pipeline.fit(train)\npredictions = model.transform(test)","c771ee8d":"pred = predictions.select('id', 'text', 'probability', 'prediction')\nfrom textblob import TextBlob\n\ndef get_polarity(s):\n    return TextBlob(s).sentiment.polarity\n\nudf1 = udf(get_polarity, FloatType())\npred = pred.withColumn('sentiment', udf1(col('text')))\n","c1082e0b":"# -1 to 1\n#pred = pred.withColumn('polarity',when(col('sentiment')< -0.5, 0).when(col('sentiment') >= 0.5, 4).otherwise(2))\npred = pred.withColumn('polarity',when(col('sentiment')< 0, 0).when(col('sentiment') == 0, 2).otherwise(4))\n#pred = pred.withColumn('polarity',when(col('sentiment')< 0, 0).when(col('sentiment') ==0 , 2).otherwise(4))\npred = pred.withColumn('prob', col('probability').cast(\"string\").substr(2,4).cast(\"float\"))","de993768":"pred1 = pred.withColumn('polarity', when((col('polarity')==4) & (col('prob')>0.56) & (col('prob')<0.90),2).otherwise(col('polarity')))\npred1 = pred1.withColumn('polarity', when((col('polarity')==4) & (col('prob')>0.90),0).otherwise(col('polarity')))\npred1 = pred1.withColumn('polarity', when((col('polarity')==2) & (col('prob')>0.60),0).otherwise(col('polarity')))\npred1.select('id','polarity').toPandas().to_csv('result.csv', header=True, index=False)","2f242972":"pred.show()","8afcc002":"pred1 = pred.withColumn('polarity', when((col('polarity')==4) & (col('prob')>0.5) & (col('prob')<0.90) ,2).otherwise(col('polarity')))\n\npred1 = pred1.withColumn('polarity', when((col('polarity')==4) & (col('prob')>0.90),0).otherwise(col('polarity')))\n\n\npred1 = pred1.withColumn('polarity', when((col('polarity')==2) & (col('prob')>0.62),0).otherwise(col('polarity')))\n\n\n\n\npred1.select('id','polarity').toPandas().to_csv('result.csv', header=True, index=False)","1b3dd060":"pred1.filter(pred1.polarity == 2).count()","8040e352":"Th\u00e0nh vi\u00ean trong nh\u00f3m:\n\n1. Tr\u1ea7n \u0110\u1ee9c Thu\u1eadn\n2. Tr\u1ea7n Ng\u1ecdc Kh\u00e1nh Vinh\n3. L\u00ea B\u00e1 Thi\u1ec1n\n4. V\u0169 C\u00f4ng T\u1ea5n T\u00e0i\n5. B\u00f9i Thanh Ph\u01b0\u01a1ng"}}