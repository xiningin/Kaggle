{"cell_type":{"dd3d9e40":"code","cd968d57":"code","768cda9c":"code","8a0418fd":"code","c3fa2a85":"markdown"},"source":{"dd3d9e40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport itertools\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cd968d57":"#list(itertools.islice(os.walk('\/kaggle\/input\/siim-covid19-detection\/train'),1))\n#print(os.listdir('\/kaggle\/input\/siim-covid19-detection\/train\/cd5dd5e6f3f5\/b2ee36aa2df5'))\n\nimport matplotlib.pyplot as plt\nimport pydicom \nfrom PIL import Image\n\nimg = pydicom.dcmread('\/kaggle\/input\/siim-covid19-detection\/train\/cd5dd5e6f3f5\/b2ee36aa2df5\/d8ba599611e5.dcm')\n\nvalues = img.pixel_array\nprint(values.shape[0])\n\n\nrgbvalues = (values*(256\/32768)).astype('uint8')\n\nrgbvalues = np.stack((rgbvalues,rgbvalues,rgbvalues),axis = 2)\n\nplt.imshow(values, cmap=plt.cm.gray)\n#plt.imshow(rgbvalues)\nplt.show()","768cda9c":"import matplotlib.pyplot as plt\nimport pydicom \nfrom PIL import Image\n\nratios = np.array([])\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/siim-covid19-detection\/train'):\n    for filename in filenames:\n        if os.path.join(dirname, filename)[-1] == 'm':\n            file_path = os.path.join(dirname, filename)\n            print(file_path)\n            dicom = pydicom.read_file(file_path, stop_before_pixels=False)\n            #img = pydicom.dcmread(os.path.join(dirname, filename))\n            values = dicom.pixel_array\n            #np.append(ratios,np.array([values.shape[1]\/values.shape[0]]))\n            \n#print(ratios.min, ratios.max)\n#print(ratio.mean, ratios.std)","8a0418fd":"asdf = 1234\njkl = 345","c3fa2a85":"First we are going to try to take the first input and transform it into a picture that Flos algorithm can work with."}}