{"cell_type":{"159f3bb8":"code","af44f9b9":"code","89dca6f4":"code","75cac327":"code","53562680":"code","b5bd9e45":"code","14ac9225":"code","78adcb9b":"code","a8bc3a7c":"code","75468244":"code","fb933d0f":"code","d6591231":"code","d6561b6f":"code","09dcc782":"code","79bf2fff":"code","62868aeb":"code","1504eb7c":"code","f01a7681":"code","c6f0e870":"code","4bfe3d5f":"code","46b72f2a":"code","9dbf05f2":"code","1b32ec87":"code","2e09c35f":"code","89d7a2c2":"code","bcf95348":"code","2eeabb4d":"code","fffcf323":"code","9e7e5c06":"code","43b0dff0":"code","ab0239b6":"code","48c54334":"code","f06caa69":"code","c8db295c":"code","7574d9a5":"markdown","040f07dd":"markdown","6281754f":"markdown","e818a547":"markdown","82bd63b9":"markdown","7351efa2":"markdown","b057c05e":"markdown","feaa8fcb":"markdown"},"source":{"159f3bb8":"import PIL, cv2 as cv, matplotlib.pyplot as plt, numpy as np, pandas as pd, os","af44f9b9":"INPUT_PATH = '\/kaggle\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset\/'\nclasses = []\nfor dirname, folders, filenames in os.walk(INPUT_PATH):\n    if dirname != INPUT_PATH and folders != []:\n        classes.append([s for s in folders if \"GT\" not in s][0])","89dca6f4":"classes","75cac327":"count_of_classes = {}\ncount_class = []\nfor i in range(len(classes)):\n    count_class.append(len([files for _, _, files in os.walk(os.path.join(INPUT_PATH,classes[i],classes[i]))][0]))\ncount_of_classes['name'] = classes\ncount_of_classes['count'] = count_class\ncount_of_classes = pd.DataFrame.from_dict(count_of_classes)","53562680":"len(count_of_classes)","b5bd9e45":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg","14ac9225":" %matplotlib inline\n\nplt.figure(figsize=(40,40))\nk = 1\nSAMPLE_SIZE = 5\n# Sample for each class of fish\nfor j in range(len(classes)):\n    temp_files = [files for _, _, files in os.walk(os.path.join(INPUT_PATH,classes[j],classes[j]))][0]\n    temp_files.sort()\n    i = 0\n    while i < SAMPLE_SIZE and k <= len(classes)*SAMPLE_SIZE :\n        img = mpimg.imread(os.path.join(INPUT_PATH,classes[j],classes[j],temp_files[i]))\n        plt.subplot(len(classes),SAMPLE_SIZE,k)\n        plt.imshow(img)\n        plt.title(classes[j] +\" \"+ temp_files[i])\n        i += 1\n        k += 1","78adcb9b":"full_files = pd.DataFrame(columns=['Class','Image_Path'])\nfor j in range(len(classes)):\n    tmp = [os.path.join(INPUT_PATH,classes[j],classes[j], f) for _, _, files in os.walk(os.path.join(INPUT_PATH,classes[j],classes[j])) for f in files]\n    tmp.sort()\n    tmp_cls = [classes[j] for _, _, files in os.walk(os.path.join(INPUT_PATH,classes[j],classes[j])) for f in files]\n    tmp = pd.DataFrame(list(zip(tmp_cls, tmp)),columns =['Class','Image_Path'])\n    full_files = pd.concat([full_files, tmp]).reset_index(drop=True)","a8bc3a7c":"full_files['Image_Path'][0]","75468244":"import cv2\n\nimage_size= cv2.imread(full_files['Image_Path'][0]).shape","fb933d0f":"image_size","d6591231":"from sklearn.preprocessing import OrdinalEncoder\n\nord_enc = OrdinalEncoder()\nfull_files[\"Class_Code\"] = ord_enc.fit_transform(full_files[[\"Class\"]])\nfull_files[[\"Class\", \"Class_Code\"]].head(11)","d6561b6f":"full_files[['Class_Code','Class']].drop_duplicates().sort_values(['Class_Code'], ascending=True).reset_index(drop=True)","09dcc782":"from sklearn.model_selection import train_test_split\n\ntrain_df, test_df = train_test_split(full_files, test_size=0.3, random_state=2, shuffle=True)\nprint(train_df.count())\ntest_df.count()","79bf2fff":"import cv2 \nimport numpy as np ","62868aeb":"from keras.preprocessing.image import ImageDataGenerator\n\n#Importing images using image data preprocessing provided from keras\ntrain_generator = ImageDataGenerator(validation_split=0.2)\ntest_generator = ImageDataGenerator()\n\ntrain_imgs = train_generator.flow_from_dataframe(\n    dataframe = train_df,\n    x_col = \"Image_Path\",\n    y_col = \"Class\",\n    target_size = image_size[:2],\n    color_mode = \"rgb\",\n    class_mode = \"categorical\",\n    batch_size = 32,\n    shuffle = True,\n    subset = \"training\"\n)\n\nval_imgs = train_generator.flow_from_dataframe(\n    dataframe = train_df,\n    x_col = \"Image_Path\",\n    y_col = \"Class\",\n    target_size = image_size[:2],\n    color_mode = \"rgb\",\n    class_mode = \"categorical\",\n    batch_size = 32,\n    shuffle = True,\n    subset = \"validation\"\n)\n\ntest_imgs = test_generator.flow_from_dataframe(\n    dataframe = test_df,\n    x_col = \"Image_Path\",\n    y_col = \"Class\",\n    target_size = image_size[:2],\n    color_mode = \"rgb\",\n    class_mode = \"categorical\",\n    batch_size = 32,\n    shuffle = False\n)","1504eb7c":"from tensorflow.keras.applications.vgg19 import VGG19\nfrom tensorflow.keras.applications.vgg19 import preprocess_input\nfrom tensorflow.keras.applications.xception import Xception \n\n## Loading VGG16 model\nbase_model = Xception(weights=\"imagenet\", include_top=False, input_shape=image_size, classes=len(count_of_classes))\nbase_model.trainable = False ## Not trainable weights","f01a7681":"from tensorflow.keras import layers, models\nfrom tensorflow.keras.layers import LeakyReLU\nfrom tensorflow.keras.layers import AveragePooling2D, BatchNormalization, Activation\nfrom tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras import regularizers\nfrom keras.metrics import Recall,Precision\n\nimport tensorflow as tf","c6f0e870":"# Building Model\nmodel=models.Sequential()\nmodel.add(base_model)\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(512,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dense(9,activation='softmax'))\n\nmodel.summary()","4bfe3d5f":"from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nimport tensorflow","46b72f2a":"OPT    = tensorflow.keras.optimizers.Adam(lr=0.001)\n\nmodel.compile(loss='categorical_crossentropy',\n              metrics=['accuracy',Precision(),Recall()],\n              optimizer=OPT)","9dbf05f2":"filepath = '.\/best_weights.hdf5'\n\nearlystopping = EarlyStopping(monitor = 'val_accuracy', \n                              mode = 'max' , \n                              patience = 50,\n                              verbose = 1)\n\ncheckpoint    = ModelCheckpoint(filepath, \n                                monitor = 'val_accuracy', \n                                mode='max', \n                                save_best_only=True, \n                                verbose = 1)\n\n\ncallback_list = [earlystopping, checkpoint]","1b32ec87":"epochs = 200\nbatch_size = 32\nmodel_history=model.fit(train_imgs,\n                        validation_data=val_imgs,\n                        steps_per_epoch=len(train_imgs)\/\/batch_size,\n                        validation_steps=len(val_imgs)\/\/batch_size,\n                        epochs = epochs,\n                        callbacks = callback_list,\n                        verbose = 1)","2e09c35f":"model.save('.\/best_weights_latest.hdf5')","89d7a2c2":"model = tensorflow.keras.models.load_model('.\/best_weights_latest.hdf5')\nloss, accuracy , precision,recall=model.evaluate(test_imgs)\nprint('Test Accuracy: %.2f' % accuracy)\nprint('Test Precision: %.2f' % precision)\nprint('Test Recall: %.2f' % recall)\nprint('Test loss: %.2f' % loss)","bcf95348":"model = tensorflow.keras.models.load_model('.\/best_weights.hdf5')\nloss, accuracy , precision,recall=model.evaluate(test_imgs)\nprint('Test Accuracy: %.2f' % accuracy)\nprint('Test Precision: %.2f' % precision)\nprint('Test Recall: %.2f' % recall)\nprint('Test loss: %.2f' % loss)","2eeabb4d":"y_pred = model.predict(test_imgs)\ny_pred = np.argmax(y_pred,axis=1)","fffcf323":"y_pred","9e7e5c06":"from sklearn.metrics import classification_report\nprint(classification_report(test_df.Class_Code.astype(int),y_pred))","43b0dff0":"test_df['Image_Path'][3194]","ab0239b6":"img = mpimg.imread(test_df['Image_Path'][3194])\nplt.imshow(img)\nplt.title(test_df['Image_Path'][3194])","48c54334":"y_sample = model.predict(test_imgs.__getitem__(0)[0][:1])\ny_sample = np.argmax(y_sample, axis = 1)","f06caa69":"print(\"Predicted Sample: \", y_sample[0])","c8db295c":"full_files[full_files['Class_Code'] == 3][['Class','Class_Code']].iloc[0,:]","7574d9a5":"# **Latest Trained Epoch**","040f07dd":"# **Train Test Split**","6281754f":"# **Transfer Learning based Classification from Xception Net**","e818a547":"# **Data Generator**","82bd63b9":"# **Best Validation Accuracy Model during training**","7351efa2":"# **Samples of Different Fishes**","b057c05e":"# **Class Distribution**","feaa8fcb":"# **Sample Taken for Prediction from Red Mullet Fish**"}}