{"cell_type":{"03cbc8c5":"code","7352f74c":"code","fded83ad":"code","aa22a590":"code","e2da01f1":"code","859e3dcc":"code","ab5bc8f3":"code","5a0d51f1":"code","259aa570":"code","c67db8fd":"code","4c5f0c16":"code","00d96631":"code","e0f600ad":"code","c98c9f19":"code","f68756f3":"code","a0b50562":"code","92509ac4":"code","6c3780d8":"code","b737fb9d":"code","40ed54b4":"markdown","cfa5f366":"markdown","de655771":"markdown","f80350a9":"markdown","f843b992":"markdown","bf95b564":"markdown","b7e35f1c":"markdown","925b7528":"markdown"},"source":{"03cbc8c5":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\n","7352f74c":"df = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\ndf.head()","fded83ad":"df.info()","aa22a590":"df.describe().T","e2da01f1":"df.nunique()","859e3dcc":"# Add histogram data\nx1 = df['Age']\nx2 = df['Annual Income (k$)']\nx3 = df['Spending Score (1-100)']\n# Group data together\nhist_data = [x1, x2, x3]\ngroup_labels = ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']\n\nrug_text_one = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n                'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n                'u', 'v', 'w', 'x', 'y', 'z']\n\nrug_text_two = ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'gg', 'hh', 'ii', 'jj',\n                'kk', 'll', 'mm', 'nn', 'oo', 'pp', 'qq', 'rr', 'ss', 'tt',\n                'uu', 'vv', 'ww', 'xx', 'yy', 'zz']\n\nrug_text_three = ['aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj',\n                'kkk', 'lll', 'mmm', 'nnn', 'ooo', 'ppp', 'qqq', 'rrr', 'sss', 'ttt',\n                'uuu', 'vvv', 'www', 'xxx', 'yyy', 'zzz']\n\nrug_text = [rug_text_one, rug_text_two, rug_text_three] # for hover in rug plot\ncolors = ['rgb(0, 0, 100)', 'rgb(0, 200, 200)','rgb(0, 0, 200)']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(\n    [x1, x2 ,x3], group_labels, bin_size=3,\n    rug_text=rug_text, colors=colors)\n\nfig.update_layout(title_text='Customized Distplot')\nfig.show()","ab5bc8f3":"plt.figure(1 , figsize = (15 , 5))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(y=\"Gender\", data=df)","5a0d51f1":"fig = px.scatter_matrix(df,\n    dimensions=['Age', 'Annual Income (k$)', 'Spending Score (1-100)'],\n    color=\"Gender\")\nfig.show()","259aa570":"fig = px.scatter(df, x=\"Age\", y=\"Annual Income (k$)\", color=\"Gender\", size='Age' )\nfig.show()","c67db8fd":"df[\"e\"] = df[\"Annual Income (k$)\"]\/100\nfig = px.scatter(df, x=\"Annual Income (k$)\", y=\"Spending Score (1-100)\", color=\"Gender\",\n                 error_x=\"e\", error_y=\"e\")\nfig.show()","4c5f0c16":"df.drop(['e','CustomerID'], axis=1, inplace=True)\ndf.head()","00d96631":"fig = px.violin(df, y=\"Gender\", x=\"Age\", color=\"Gender\", box=True, points=\"all\",\n          hover_data=df.columns)\nfig.show()","e0f600ad":"fig = px.violin(df, y=\"Gender\", x=\"Annual Income (k$)\", color=\"Gender\", box=True, points=\"all\",\n          hover_data=df.columns)\nfig.show()","c98c9f19":"fig = px.violin(df, y=\"Gender\", x=\"Spending Score (1-100)\", color=\"Gender\", box=True, points=\"all\",\n          hover_data=df.columns)\nfig.show()","f68756f3":"X = df.iloc[:,2:4].values","a0b50562":"from sklearn.cluster import KMeans\n\nSum_of_squared_distances = []\n\n# Use k from 1 to 15\nK = range(1,15)\nfor k in K:\n    km = KMeans(n_clusters=k, init='random', n_init=10, max_iter=500,  tol=1e-04, random_state=0)\n    km = km.fit(X)\n    # Get sum of square distances by applying km.inertia_ \n    Sum_of_squared_distances.append(km.inertia_)\n\n# Plot Results\nplt.plot(K, Sum_of_squared_distances, marker='o')\nplt.xlabel('k')\nplt.ylabel('Sum_of_squared_distances')\nplt.title('Elbow Method For Optimal k')\nplt.show()","92509ac4":"from sklearn.cluster import KMeans, AgglomerativeClustering, AffinityPropagation, DBSCAN\nfrom sklearn.metrics import silhouette_score\nfrom sklearn import preprocessing\nfrom sklearn import cluster, tree, decomposition\n\nfor n_cluster in range(2, 11):\n    kmeans = KMeans(n_clusters=n_cluster).fit(X)\n    label = kmeans.labels_\n    sil_coeff = silhouette_score(X, label, metric='euclidean')\n    print(\"For n_clusters={}, The Silhouette Coefficient is {}\".format(n_cluster, sil_coeff))","6c3780d8":"import scipy.cluster.hierarchy as sch\nfig = ff.create_dendrogram(X,\n                           linkagefun = lambda x: sch.linkage(x, \"ward\"),)\n\n# Ward minimizes the variance of the points inside a cluster.\n\nfig.update_layout(title = 'Hierarchical Clustering', xaxis_title='Customers',\n                   yaxis_title='Euclidean Distance', width=700, height=700)\n\nfig.show()","b737fb9d":"kmeans = KMeans(n_clusters = 5, init=\"k-means++\", max_iter = 500, n_init = 10, random_state = 123)\nidentified_clusters = kmeans.fit_predict(X)\n\n\ndata_with_clusters = df.copy()\ndata_with_clusters['Cluster'] = identified_clusters\nfig = px.scatter_3d(data_with_clusters, x = 'Age', y='Annual Income (k$)', z='Spending Score (1-100)',\n              color='Cluster', opacity = 0.8, size='Age', size_max=30)\nfig.show()","40ed54b4":"Importing Libraries.\n","cfa5f366":"Selecting N Clusters With Elbow Method","de655771":"Data Visualization","f80350a9":"Selecting N Clusters With Silhouette Analysis","f843b992":"Data Exploration","bf95b564":"Cluster With KMeans","b7e35f1c":"Cluster with AgglomerativeClustering","925b7528":"Hierarchical Clustering"}}