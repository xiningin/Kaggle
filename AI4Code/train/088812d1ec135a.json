{"cell_type":{"69b4f3fa":"code","de85e07d":"code","a4cfccb2":"code","f71802b1":"code","088591bf":"code","bf275c97":"code","7679c381":"code","c6fb2110":"code","9c16013a":"code","24339791":"code","ff0f881e":"code","199c83af":"code","e2fcff40":"code","e96113ba":"code","dea84ecd":"code","e5252daa":"code","59734550":"code","e68bf106":"code","d84b18b5":"code","6225863f":"code","515b8daf":"code","815e450b":"code","e3e349b3":"code","9d1b1b15":"code","9bfc5ba0":"code","7c70bc79":"code","6598b0e4":"code","01589388":"code","cc0066ab":"code","c780c2c1":"code","af3d9cc0":"code","18947b30":"code","6e2fcec9":"code","111f2c8b":"code","38837004":"code","2f99890e":"code","1deb3ea9":"code","55e806bf":"code","753974f7":"code","d8dad271":"code","a8309cfe":"code","ac0f0229":"code","4cb5b507":"code","33d91418":"code","30f3acdc":"code","7fb276a5":"code","347d1dc6":"code","74e1ccfe":"code","6fba8e08":"code","8141aa0c":"code","187c72f1":"code","939430f7":"code","e30dd483":"code","9079dbc4":"code","9ac7dc88":"code","d9b70eac":"code","ebd283cd":"code","d4290995":"markdown"},"source":{"69b4f3fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # graph\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","de85e07d":"data = pd.read_csv('..\/input\/Pokemon.csv')","a4cfccb2":"data.head()","f71802b1":"len(data)","088591bf":"# How many Pokemon per generation ?\nsns.set(rc={'figure.figsize':(9,7)})\nsns.countplot(data.Generation)","bf275c97":"data.groupby(['Generation'])['#'].count()","7679c381":"# Repartition of the Types\nplt.figure(figsize=(10,8))\ndata.groupby(['Type 1'])['#'].count().plot.pie(autopct='%1.0f%%', pctdistance=0.9, labeldistance=1.1)","c6fb2110":"data.groupby(['Type 1'])['#'].count().sort_values(ascending=False)","9c16013a":"# Water and Normal are the most recurrent types for the Pokemon","24339791":"# Best Pokemon\nsns.distplot(data.Total)\nplt.axvline(data.Total.mean())","ff0f881e":"data.Total.sort_values(ascending=True)","199c83af":"# Who are the weakest Pokemon ?\ndata.iloc[data.Total.nsmallest(10).index.values][['Name', 'Total']]","e2fcff40":"# Who are the strongest ?\ndata.iloc[data.Total.nlargest(10).index.values][['Name', 'Total']]","e96113ba":"# Which type is the better ?\ng=sns.catplot(x='Type 1', y='Total', kind='bar', data=data)\ng.set_xticklabels(rotation=90)","dea84ecd":"data.groupby(['Type 1'])['Total'].mean()","e5252daa":"# Dragon is the best type","59734550":"# Proportion of legendary pokemon\nsns.countplot(data.Legendary)","e68bf106":"sns.violinplot(x='Legendary', y='Total', data=data)","d84b18b5":"fig, ax = plt.subplots(figsize=(9, 7))\n# Draw the two density plots\nlegendary = data[data.Legendary == True]\nnot_legendary = data[data.Legendary == False]\n\nax = sns.kdeplot(legendary.Attack, legendary.Defense,\n                 cmap=\"Reds\", shade=True, shade_lowest=False)\nax = sns.kdeplot(not_legendary.Attack, not_legendary.Defense,\n                 cmap=\"Blues\", shade=True, shade_lowest=False)\n\n# Add labels to the plot\nred = sns.color_palette(\"Reds\")[-2]\nblue = sns.color_palette(\"Blues\")[-2]\nax.text(25, 0, \"Non Legendary\", size=16, color=blue)\nax.text(125, 150, \"Legendary\", size=16, color=red)","6225863f":"legend = pd.melt(data[['HP', 'Attack', 'Defense',\n       'Sp. Atk', 'Sp. Def', 'Speed', 'Legendary']], \"Legendary\", var_name=\"attributes\")\nsns.swarmplot(x=\"attributes\", y=\"value\", hue=\"Legendary\", data=legend)","515b8daf":"# Difference between generations\nsns.boxplot(x=\"Generation\", y=\"Total\", data=data)","815e450b":"# The 4th generation seems to be the best","e3e349b3":"generations = data.groupby('Generation')[['Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Legendary']].mean()","9d1b1b15":"generations = generations.reset_index()","9bfc5ba0":"generations.index = generations.index + 1","7c70bc79":"generations","6598b0e4":"data.columns","01589388":"sns.lineplot(data=generations[['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed']])","cc0066ab":"data[data.Name == \"Pikachu\"].index[0]","c780c2c1":"# Radar chart for Pokemon\n%matplotlib inline\n\nlabels = np.array(['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed'])\npikachu = data.loc[data[data.Name == \"Pikachu\"].index[0],labels].values","af3d9cc0":"pikachu","18947b30":"angles=np.linspace(0, 2*np.pi, len(labels), endpoint=False)\n# close the plot\npikachu=np.concatenate((pikachu,[pikachu[0]]))\nangles=np.concatenate((angles,[angles[0]]))","6e2fcec9":"fig = plt.figure(figsize=(20,10))\nax = fig.add_subplot(111, polar=True)\nax.plot(angles, pikachu, 'o-', linewidth=2)\nax.fill(angles, pikachu, alpha=0.25)\nax.set_thetagrids(angles * 180\/np.pi, labels)\nax.set_title(data.loc[data[data.Name == \"Pikachu\"].index[0],\"Name\"])\nax.grid(True)","111f2c8b":"# Who is the best starter ? (1st Generation)\n# Short term","38837004":"data.iloc[:15]","2f99890e":"bulbasaur = data.loc[data[data.Name == \"Bulbasaur\"].index[0],labels].values\ncharmander = data.loc[data[data.Name == \"Charmander\"].index[0],labels].values\nsquirtle = data.loc[data[data.Name == \"Squirtle\"].index[0],labels].values\n\nangles=np.linspace(0, 2*np.pi, len(labels), endpoint=False)\n# close the plot\nbulbasaur = np.concatenate((bulbasaur,[bulbasaur[0]]))\ncharmander = np.concatenate((charmander,[charmander[0]]))\nsquirtle = np.concatenate((squirtle,[squirtle[0]]))\n\nangles = np.concatenate((angles,[angles[0]]))","1deb3ea9":"fig = plt.figure(figsize=(20,10))\nax1 = fig.add_subplot(111, polar=True)\nax1.plot(angles, bulbasaur, 'o-', linewidth=2, label = 'Bulbasaur')\nax1.fill(angles, bulbasaur, alpha=0.25)\nax1.set_thetagrids(angles * 180\/np.pi, labels)\nax1.grid(True)\n\nax2 = fig.add_subplot(111, polar=True)\nax2.plot(angles, charmander, 'o-', linewidth=2, label = 'Charmander')\nax2.fill(angles, charmander, alpha=0.25)\nax2.set_thetagrids(angles * 180\/np.pi, labels)\nax2.grid(True)\n\nax3 = fig.add_subplot(111, polar=True)\nax3.plot(angles, squirtle, 'o-', linewidth=2, label = 'Squirtle')\nax3.fill(angles, squirtle, alpha=0.25)\nax3.set_thetagrids(angles * 180\/np.pi, labels)\nax3.grid(True)\n\nplt.legend(bbox_to_anchor=(0.9,1))","55e806bf":"# In the long term : Final starters evolution","753974f7":"venusaur = data.loc[data[data.Name == \"Venusaur\"].index[0],labels].values\ncharizard = data.loc[data[data.Name == \"Charizard\"].index[0],labels].values\nblastoise = data.loc[data[data.Name == \"Blastoise\"].index[0],labels].values\n\nvenusaur = np.concatenate((venusaur,[venusaur[0]]))\ncharizard = np.concatenate((charizard,[charizard[0]]))\nblastoise = np.concatenate((blastoise,[blastoise[0]]))","d8dad271":"fig = plt.figure(figsize=(20,10))\nax1 = fig.add_subplot(111, polar=True)\nax1.plot(angles, venusaur, 'o-', linewidth=2, label = 'Venusaur')\nax1.fill(angles, venusaur, alpha=0.25)\nax1.set_thetagrids(angles * 180\/np.pi, labels)\nax1.grid(True)\n\nax2 = fig.add_subplot(111, polar=True)\nax2.plot(angles, charizard, 'o-', linewidth=2, label = 'Charizard')\nax2.fill(angles, charizard, alpha=0.25)\nax2.set_thetagrids(angles * 180\/np.pi, labels)\nax2.grid(True)\n\nax3 = fig.add_subplot(111, polar=True)\nax3.plot(angles, blastoise, 'o-', linewidth=2, label = 'Blastoise')\nax3.fill(angles, blastoise, alpha=0.25)\nax3.set_thetagrids(angles * 180\/np.pi, labels)\nax3.grid(True)\n\nplt.legend(bbox_to_anchor=(1.1,1))","a8309cfe":"# Best type combination ?","ac0f0229":"data.isnull().sum()","4cb5b507":"combination = data.dropna()","33d91418":"combination = combination[['Type 1', 'Type 2', 'Total']]","30f3acdc":"types_total = combination.groupby(['Type 1', 'Type 2']).mean()","7fb276a5":"types_total = types_total.reset_index()\ntypes_total.columns = ['Type 1', 'Type 2', 'Mean']","347d1dc6":"types_total.head()","74e1ccfe":"sns.set(rc={'figure.figsize':(25,10)})\nsns.barplot(x='Type 1', y='Mean', hue='Type 2', data=types_total)","6fba8e08":"types_total.sort_values(by='Mean', ascending=False).head()","8141aa0c":"data[(data['Type 1'] == \"Ground\") & (data['Type 2'] == \"Fire\")]['#'].count()","187c72f1":"# Just one, we will change the selection","939430f7":"types_count = combination.groupby(['Type 1', 'Type 2']).count()\ntypes_count = types_count.reset_index()","e30dd483":"types_filter = pd.merge(types_total, types_count, on=['Type 1', 'Type 2'])","9079dbc4":"types_filter.Total.sum() \/ types_filter.groupby(['Type 1', 'Type 2']).count().sum()['Total']","9ac7dc88":"types_filter = types_filter[types_filter.Total > 3]","d9b70eac":"sns.barplot(x='Type 1', y='Mean', hue='Type 2', data=types_filter)","ebd283cd":"types_filter.sort_values(by='Mean', ascending=False).head()","d4290995":"The best combinations are Dragon\/Psychic and Dragon\/Flying"}}