{"cell_type":{"b03eb9fe":"code","0a65d7b3":"code","f7455f8e":"code","1e59a13b":"code","3e5ae244":"code","2c638ed1":"code","971ddfc3":"code","a73c2c46":"code","5d5a3a74":"code","74e52d10":"code","a3a9daf4":"code","2da2be73":"code","af9eecc1":"code","e7742f12":"code","ea764ce1":"code","143636d2":"code","b1834133":"code","88227da3":"code","c8e81a22":"code","202dd365":"code","3fba1023":"code","70631a54":"code","d6d969b2":"code","9f9265ea":"code","6f99462f":"code","44574f12":"code","a70bab24":"code","d1c87fb3":"code","1a4785e2":"code","71d98527":"code","a8f2dbea":"code","914f1e89":"code","1c578fdb":"code","cd6b04e3":"code","6b08b9af":"code","adf4bc35":"code","051eb5ab":"code","f4114d4f":"code","a45753fc":"code","d4a0cd07":"code","d350b76e":"code","e451d99d":"code","51fd842e":"code","1ff48cf1":"code","7e89b64f":"code","73f49b13":"code","52f8a0de":"code","7ed746da":"code","e543a822":"code","eafe730e":"code","5fa16278":"code","0229ce40":"code","bca23c23":"code","f0171156":"code","fc04c2ca":"code","33a440ed":"code","3edb8d16":"code","685dc2c3":"code","9afb4d2d":"code","11a33155":"code","988c4cf8":"code","bf1bc30b":"code","1d686580":"code","b7bc1ecd":"code","4bc91ae8":"code","d7412b9d":"code","e0c10b56":"code","d86b19ed":"code","9ed462de":"code","77d15323":"code","d9dcd691":"code","caf10a45":"code","04ca48e5":"code","ae4b5bfc":"code","cfb599b9":"code","3bbc5ff5":"code","56f8ff28":"code","cfeb8c49":"code","2d0a83fd":"code","aba1346d":"code","f9781ca2":"code","28f103d2":"code","eba34de3":"code","5ab4b8c0":"code","067cce69":"code","6ff88d91":"code","5baee3c8":"code","5a585153":"code","bd2876f4":"code","c93ff1cb":"code","897687e3":"code","e28198c6":"code","04f284f9":"code","41f01d5e":"code","d5ee4412":"code","e8c5c1ae":"code","fe14b5eb":"code","941dad4c":"code","213c40f0":"code","73e7cf61":"code","76acfa24":"code","3384babd":"code","7dea8b7e":"code","82e5494d":"code","906c8ccd":"code","898754f8":"code","d129a4e9":"code","2f12a542":"code","60b02dbd":"code","afa89e47":"code","af5f4989":"code","a0584566":"code","0309bc63":"code","52083ce1":"code","af4cd814":"code","7c764a4a":"markdown","5723d611":"markdown","51151d7d":"markdown","1e7b7ead":"markdown","e3a45591":"markdown","b0db0209":"markdown","8c16b8e2":"markdown","b9877cdf":"markdown","fcc52f2b":"markdown","99abc9b7":"markdown","7e72c428":"markdown","8d1758a9":"markdown"},"source":{"b03eb9fe":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0a65d7b3":"# df_original=pd.read_csv('data\/Train_aBjfeNk.csv')\n# test_data=pd.read_csv('data\/Test_LqhgPWU.csv')\n# df_original.head()\ntrain_df=pd.read_csv('..\/input\/janata-hack-customer-segmentation-data\/Train_aBjfeNk.csv')\ntrain_df.head()","f7455f8e":"test_df=pd.read_csv('..\/input\/janata-hack-customer-segmentation-data\/Test_LqhgPWU.csv')\ntest_df.head()","1e59a13b":"train_df.info()","3e5ae244":"train_df.columns\n","2c638ed1":"test_df.info()","971ddfc3":"# def perc_null(df):\n#     for i in range(len(df.columns)):\n#         print('The percent of null valus in ' + df.columns[i] +' are '+ str(df[df.columns[i]].isnull().sum()\/len(df)*100))\n\n# print('Train Data')\n# perc_null(train_df)\n# print()\n# print('...................................................')\n# print()\n# print('Test Data')\n# perc_null(test_df)\n    \ntotal_missing=train_df.isnull().sum().sort_values(ascending=False)\npercentage=(train_df.isnull().sum()\/train_df.isnull().count()).sort_values(ascending=False)*100\nmissing_data=pd.concat([total_missing, percentage], axis=1, keys=['Total','Percentage'])\nmissing_data.head(40)","a73c2c46":"#plot missing training data \nimport missingno as mso\nmso.bar(train_df, color='green', sort='ascending')\nmso.matrix(train_df)","5d5a3a74":"#plt missing test data\nmso.bar(test_df, color='green', sort='ascending')\nmso.matrix(test_df)","74e52d10":"train_df.describe()","a3a9daf4":"train_df.drop(['ID'],axis=1,  inplace=True)\ntrain_df.head()","2da2be73":"train_df[['Age']].head()","af9eecc1":"train_df.Age.describe()","e7742f12":"train_df.Age.isnull().sum()","ea764ce1":"train_df.Age.unique()","143636d2":"plt.hist(train_df.Age, )\nplt.title('Age Distribution')\nplt.ylabel('Frequency')\nplt.xlabel('Age Groups')\nplt.show()","b1834133":"train_df[['Work_Experience']].head()","88227da3":"train_df.Work_Experience.describe()","c8e81a22":"train_df.Work_Experience.isnull().sum()","202dd365":"train_df.Work_Experience.unique()","3fba1023":"plt.hist(train_df.Work_Experience)\nplt.title('Work Experience')\nplt.ylabel('Frequncy')\nplt.xlabel('Experience in Years')\nplt.show()","70631a54":"null_work_exp=train_df[train_df['Work_Experience'].isnull()]\nnull_work_exp.head()","d6d969b2":"plt.subplot(1,2,1)\nplt.hist(null_work_exp.Age)\nplt.title('Age Distribution\/Work_exp is Null')\nplt.show()\n\nplt.subplot(1,2,2)\nplt.hist(train_df.Age)\nplt.title('Age Distribution Overall')\nplt.show()","9f9265ea":"train_df.Work_Experience.std()","6f99462f":"def filling_missing_data(column):\n    median=column.median()\n    std=column.std()\n    column.fillna(value=median, inplace=True)\n    \nfilling_missing_data(train_df.Work_Experience)\nfilling_missing_data(test_df.Work_Experience)    \n    ","44574f12":"train_df[['Work_Experience']].head()","a70bab24":"train_df.Work_Experience.isnull().sum()","d1c87fb3":"test_df.Work_Experience.isnull().sum()","1a4785e2":"train_df[['Family_Size']].head()","71d98527":"train_df[['Family_Size']].describe()","a8f2dbea":"train_df.Family_Size.isnull().sum()","914f1e89":"plt.hist(train_df.Family_Size)\nplt.show()","1c578fdb":"train_df.Family_Size.unique()","cd6b04e3":"null_famiy_size=train_df[train_df['Family_Size'].isnull()]\nnull_famiy_size","6b08b9af":"plt.hist(null_famiy_size.Age)","adf4bc35":" def filling_missing_data(column):\n    median=column.median()\n    std=column.std()\n    column.fillna(value=median, inplace=True)\n    \nfilling_missing_data(train_df.Family_Size)\nfilling_missing_data(test_df.Family_Size)","051eb5ab":"train_df.Family_Size.isnull().sum()","f4114d4f":"test_df.Family_Size.isnull().sum()","a45753fc":"train_df.describe(include='all')","d4a0cd07":"train_df[['Gender']].head()","d350b76e":"train_df[['Gender']].describe()","e451d99d":"train_df.Gender.isnull().sum()","51fd842e":"def ratio(column):\n    unique=column.unique()\n    count=column.value_counts()\n    for i in range(len(unique)):\n        print('Percentage of ' + unique[i] + ' is ' + str(count[i]\/len(column)))\n    sns.barplot(x=unique, y=count, palette='mako')\n    plt.xlabel(column.name)\n    plt.ylabel('count')\n    plt.title(column.name +' division')\n        \nratio(train_df.Gender)\n        \n    ","1ff48cf1":"gender_dict={'Male':0,\n            'Female':1}\ntrain_df['Gender']=train_df['Gender'].map(gender_dict)\ntrain_df.head()","7e89b64f":"test_df['Gender']=test_df['Gender'].map(gender_dict)\ntest_df.head()","73f49b13":"train_df.Gender.isnull().sum()","52f8a0de":"test_df.Gender.isnull().sum()","7ed746da":"train_df[['Ever_Married']].head()","e543a822":"train_df[['Ever_Married']].describe()","eafe730e":"train_df.Ever_Married.isnull().sum()","5fa16278":"train_df.Ever_Married.value_counts()","0229ce40":"null_evrmarried=train_df[train_df['Ever_Married'].isnull()]\nnull_evrmarried.head()","bca23c23":"plt.hist(null_evrmarried.Family_Size)","f0171156":"null_evrmarried.Age.value_counts(sort='ascending').head()","fc04c2ca":"for i in range(len(null_evrmarried)):\n    if null_evrmarried.iloc[i, 2]<=40:\n        null_evrmarried.iloc[i, 1]='No'\n    elif null_evrmarried.iloc[i, 7]==1.0:\n        null_evrmarried.iloc[i, 1]='Yes'\n    else:\n        null_evrmarried.iloc[i, 1]='Yes'\nnull_evrmarried","33a440ed":"null_evrmarried_test=test_df[test_df['Ever_Married'].isnull()]\nfor i in range(len(null_evrmarried_test)):\n    if null_evrmarried_test.iloc[i, 3]<=40:\n        null_evrmarried_test.iloc[i, 2]='No'\n    elif null_evrmarried_test.iloc[i, 8]==1.0:\n        null_evrmarried_test.iloc[i, 2]='Yes'\n    else:\n        null_evrmarried_test.iloc[i, 2]='Yes'\ntest_df['Ever_Married'][test_df['Ever_Married'].isnull()]=null_evrmarried_test['Ever_Married']\ntest_df['Ever_Married'].isnull().sum()","3edb8d16":"test_df.head()","685dc2c3":"len(null_evrmarried[null_evrmarried.Ever_Married.isnull()])\n","9afb4d2d":"train_df['Ever_Married'][train_df['Ever_Married'].isnull()]=null_evrmarried['Ever_Married']","11a33155":"train_df['Ever_Married'].isnull().sum()","988c4cf8":"train_df.isnull().sum()","bf1bc30b":"def ratio(column):\n    unique=column.unique()\n    count=column.value_counts(sort=False)\n    #for i in range(len(unique)):\n        #print('Percentage of ' + unique[i] + ' is ' + str(count[i]\/len(column)))\n    sns.barplot(x=unique, y=count, palette='mako')\n    plt.xlabel(column.name)\n    plt.ylabel('count')\n    plt.title(column.name +' division')\n        \nratio(train_df.Ever_Married)","1d686580":"dict_evr_married={'No':0,\n                 'Yes':1}\ntrain_df['Ever_Married']=train_df['Ever_Married'].map(dict_evr_married)\ntrain_df.head()","b7bc1ecd":"test_df['Ever_Married']=test_df['Ever_Married'].map(dict_evr_married)\ntest_df.head()","4bc91ae8":"test_df.Ever_Married.unique()","d7412b9d":"train_df[['Graduated']].head()","e0c10b56":"train_df[['Graduated']].describe()","d86b19ed":"train_df.Graduated.isnull().sum()","9ed462de":"train_df[train_df['Graduated'].isnull()].groupby('Profession').sum()","77d15323":"train_df.Graduated=train_df.Graduated.apply(lambda x:1 if x=='Yes' else 0)\ntrain_df.Graduated","d9dcd691":"test_df.Graduated=test_df.Graduated.apply(lambda x:1 if x=='Yes' else 0)\ntest_df.Graduated","caf10a45":"test_df.Graduated.isnull().sum()","04ca48e5":"train_df.Graduated.fillna(1)\ntrain_df.Graduated.isnull().sum()","ae4b5bfc":"def ratio(column):\n    unique=column.unique()\n    count=column.value_counts(sort=False)\n    #for i in range(len(unique)):\n     #   print('Percentage of ' + unique[i] + ' is ' + str(count[i]\/len(column)))\n    sns.barplot(x=unique, y=count, palette='mako')\n    plt.xlabel(column.name)\n    plt.ylabel('count')\n    plt.title(column.name +' division')\n    \n        \nratio(train_df.Graduated)","cfb599b9":"train_df.Graduated.unique(), train_df.Graduated.value_counts(sort=False)","3bbc5ff5":"train_df.head()","56f8ff28":"train_df[['Profession']].head()","cfeb8c49":"train_df[['Profession']].describe()","2d0a83fd":"train_df.Profession.unique()","aba1346d":"train_df.Profession.value_counts()","f9781ca2":"train_df.Profession.isnull().sum()","28f103d2":"train_df[train_df['Profession'].isnull()].groupby('Work_Experience').count()","eba34de3":"train_df.head()","5ab4b8c0":"null_profession=train_df[train_df['Profession'].isnull()]\nfor i in range(len(null_profession)):\n    if null_profession.iloc[i, 5]==0:\n        null_profession.iloc[i, 4]='Unemployed'\n    else:\n        null_profession.iloc[i, 4]='Other'\n","067cce69":"train_df[train_df['Profession'].isnull()]=null_profession\ntrain_df.Profession.unique()","6ff88d91":"train_df.Profession.isnull().sum()\n","5baee3c8":"def ratio(column):\n    unique=column.unique()\n    count=column.value_counts(sort=False)\n    #for i in range(len(unique)):\n     #   print('Percentage of ' + unique[i] + ' is ' + str(count[i]\/len(column)))\n    sns.barplot(x=count, y=unique, palette='mako', orient='h')\n    plt.xlabel(column.name)\n    plt.ylabel('count')\n    plt.title(column.name +' division')\n    \n        \nratio(train_df.Profession)","5a585153":"from sklearn.preprocessing import OneHotEncoder\n# creating instance of one-hot-encoder\nenc = OneHotEncoder(handle_unknown='ignore')\ncol_name=train_df.Profession.unique()\nenc_df=pd.DataFrame(enc.fit_transform(train_df[['Profession']]).toarray(), columns=enc.get_feature_names())\n\ntrain_df=train_df.join(enc_df)\ntrain_df.head()\n","bd2876f4":"null_profession_test=test_df[test_df['Profession'].isnull()]\nfor i in range(len(null_profession_test)):\n    if null_profession_test.iloc[i, 6]==0:\n        null_profession_test.iloc[i, 5]='Unemployed'\n    else:\n        null_profession_test.iloc[i, 5]='Other'\n        \ntest_df[test_df['Profession'].isnull()]=null_profession_test\ntest_df.Profession.unique()","c93ff1cb":"test_df.Profession.isnull().sum()","897687e3":"col_name=test_df.Profession.unique()\ntest_df.Profession.isnull().sum()\nenc_df=pd.DataFrame(enc.fit_transform(test_df[['Profession']]).toarray(), columns=enc.get_feature_names())\n\ntest_df=test_df.join(enc_df)\ntest_df.head()","e28198c6":"test_df.isnull().sum()","04f284f9":"train_df.drop('Profession', axis=1, inplace=True)\ntrain_df.head()","41f01d5e":"test_df.drop('Profession', axis=1, inplace=True)\ntest_df.head()","d5ee4412":"train_df[['Spending_Score']].head()","e8c5c1ae":"train_df[['Spending_Score']].describe()","fe14b5eb":"train_df[['Spending_Score']].isnull().sum()","941dad4c":"def ratio(column):\n    unique=column.unique()\n    count=column.value_counts(sort=False)\n    #for i in range(len(unique)):\n     #   print('Percentage of ' + unique[i] + ' is ' + str(count[i]\/len(column)))\n    sns.barplot(x=unique, y=count, palette='mako')\n    plt.xlabel(column.name)\n    plt.ylabel('count')\n    plt.title(column.name +' division')\n    \n        \nratio(train_df.Spending_Score)","213c40f0":"#one hot encoding Spending Score\none_hot_ss=pd.DataFrame(enc.fit_transform(train_df[['Spending_Score']]).toarray(), columns=enc.get_feature_names())\ntrain_df=train_df.join(one_hot_ss)\ntrain_df.head()","73e7cf61":"train_df.drop('Spending_Score', axis=1, inplace=True)\ntrain_df.head()","76acfa24":"#one hot encoding(test) Spending Score\none_hot_ss=pd.DataFrame(enc.fit_transform(test_df[['Spending_Score']]).toarray(), columns=enc.get_feature_names())\ntest_df=test_df.join(one_hot_ss)\ntest_df.head()","3384babd":"test_df.drop('Spending_Score', axis=1, inplace=True)\ntest_df.head()","7dea8b7e":"train_df[['Var_1']].head()","82e5494d":"train_df[['Var_1']].describe()","906c8ccd":"train_df.Var_1.isnull().sum()","898754f8":"train_df.Var_1.unique(), train_df.Var_1.value_counts()","d129a4e9":"train_df.Var_1.fillna(value='Cat_6', inplace=True)\ntrain_df.Var_1.isnull().sum()","2f12a542":"def ratio(column):\n    unique=column.unique()\n    count=column.value_counts(sort=False)\n    #for i in range(len(unique)):\n     #   print('Percentage of ' + unique[i] + ' is ' + str(count[i]\/len(column)))\n    sns.barplot(x=unique, y=count, palette='mako')\n    plt.xlabel(column.name)\n    plt.ylabel('count')\n    plt.title(column.name +' division')\n    \n        \nratio(train_df.Var_1)","60b02dbd":"one_hot_var=pd.DataFrame(enc.fit_transform(train_df[['Var_1']]).toarray(), columns=enc.get_feature_names())\ntrain_df=train_df.join(one_hot_var)\ntrain_df.head()","afa89e47":"train_df.drop('Var_1', axis=1, inplace=True)\ntrain_df.head()","af5f4989":"test_df.Var_1.fillna(value='Cat_6', inplace=True)\ntest_df.Var_1.isnull().sum()","a0584566":"#one hot encoding(test) Var_1\none_hot_var=pd.DataFrame(enc.fit_transform(test_df[['Var_1']]).toarray(), columns=enc.get_feature_names())\ntest_df=test_df.join(one_hot_var)\ntest_df.drop('Var_1', axis=1, inplace=True)\ntest_df.head()\n","0309bc63":"train_df.Ever_Married.isnull().sum()","52083ce1":"target_category={'A':1,\n                'B':2,\n                'C':3,\n                'D':4}\ntrain_df['Segmentation']=train_df['Segmentation'].map(target_category)\ntrain_df.head()","af4cd814":"plt.figure(figsize=(20,20))\ncorrmat=train_df.corr()\nsns.heatmap(corrmat, annot=True)","7c764a4a":"#### Work Exp","5723d611":"#### EDA on Categorical Data ","51151d7d":"#### Ever_Married","1e7b7ead":"We can se there are some null values in Work Experience. We have to figure out why some of the data of this columns is null. According to my intution the null values may imply 0 to None work experience that is the person misght be a fresher or a person searching for his\/her first job.","e3a45591":"#### Profession","b0db0209":"#### Age","8c16b8e2":"#### Family_Size","b9877cdf":"#### Var_1","fcc52f2b":"#### Graduated ","99abc9b7":"#### Exporatory data analysis on Discrete training Data","7e72c428":"#### Spending Score","8d1758a9":"#### AGE "}}