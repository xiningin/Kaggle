{"cell_type":{"3371c1de":"code","980f557e":"code","1aa3ddc2":"code","65c44f83":"code","46ad71fd":"code","d0a05455":"code","4b288b7b":"code","10324730":"code","170cdb5c":"code","d81fb0a5":"code","b4e79856":"code","03a845a0":"code","cc0ad666":"code","e9a62b7e":"code","725b8cfa":"code","1efb4b03":"code","40346313":"code","a548c256":"code","64b9ee00":"code","6087ec4f":"code","917037cb":"code","782d5bab":"code","8d0b42b0":"code","7e57d047":"code","14360706":"code","a62840f8":"code","cc247264":"code","7d141675":"code","73889883":"code","750b0f56":"code","bb3ee4a8":"code","72399d41":"code","70ba0446":"code","3040b3a4":"code","e7fcdd03":"code","1b75ad29":"code","b7669fcb":"code","9e7911ce":"code","2eaaeabc":"markdown","690db87d":"markdown","e2bce5e9":"markdown","fd5d4c67":"markdown","7a12ef96":"markdown","6b9721cf":"markdown","de43897f":"markdown"},"source":{"3371c1de":"#import libraries\nimport numpy as np # linear algebra\nimport pandas as pd \nimport seaborn as sns\n# plotly\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True) #offline modela ilgili\nimport plotly.graph_objs as go\n\n\nfrom wordcloud import WordCloud\n# matplotlib\nimport matplotlib.pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.","980f557e":"#read the data\nbook_tags = pd.read_csv('..\/input\/goodbooks-10k\/book_tags.csv',encoding=\"Latin1\")\nbooks = pd.read_csv('..\/input\/goodbooks-10k\/books.csv', encoding=\"Latin1\")\nratings = pd.read_csv('..\/input\/goodbooks-10k\/ratings.csv',encoding=\"Latin1\")\ntags = pd.read_csv('..\/input\/goodbooks-10k\/tags.csv', encoding=\"Latin1\")\nto_read = pd.read_csv('..\/input\/goodbooks-10k\/to_read.csv',encoding=\"Latin1\")","1aa3ddc2":"books.head(2)","65c44f83":"books.shape","46ad71fd":"books.info()","d0a05455":"books.describe()","4b288b7b":"books['authors'].unique()","10324730":"len(books['authors'].unique())","170cdb5c":"books['average_rating'].sort_values(ascending=False)","d81fb0a5":"# clean the data\nbooks['authors'].value_counts(dropna=False)","b4e79856":"import warnings\nwarnings.filterwarnings(\"ignore\")","03a845a0":"plt.figure(figsize=(8,5))\n# An \"interface\" to matplotlib.axes.Axes.hist() method\nn, bins, patches = plt.hist(x=ratings['rating'],bins=5,alpha=0.8,rwidth=0.85)\nplt.xlabel('Rating')\nplt.ylabel('Rating_count')\nplt.title('Ratings Histogram')\nplt.show()","cc0ad666":"#change some features' name.\ndata1= books.head(20)\ndata1.rename(columns={'ratings_1':'R1', 'ratings_2':'R2','ratings_3':'R3','ratings_4':'R4','ratings_5':'R5'}, inplace=True)","e9a62b7e":"# Percentage of Ratings According to Authors\nauthor_list= list(data1['authors'].unique())\n\nratings1= []\nratings2= []\nfor i in author_list:\n    \n    x = data1[data1['authors']==i]\n    ratings1.append(sum(x.R1)\/len(x))\n    ratings2.append(sum(x.R2)\/len(x))\n    \nf,ax = plt.subplots(figsize = (5,8))\nsns.barplot(x=ratings1,y=author_list,color='green',alpha = 0.5,label='Rating1' )\nsns.barplot(x=ratings2,y=author_list,color='blue',alpha = 0.5,label='Rating2' )\nax.legend(loc='lower right',frameon = True)   \nax.set(xlabel='Percentage of Ratings', ylabel='Authors',title = \"Percentage of Ratings According to Authors \")\nplt.show()\n","725b8cfa":"# prepare data frames\ndf2004 = books[books.original_publication_year == 2004].iloc[:200,:]\ndf2005 = books[books.original_publication_year == 2005].iloc[:200,:]\ndf2003 = books[books.original_publication_year == 2003].iloc[:200,:]\n\nimport plotly.graph_objs as go\ntrace1 =go.Scatter(\n                    x = data1.average_rating,\n                    y = data1.R1,\n                    mode = \"markers\",\n                    name = \"2004\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df2004.authors)\ntrace2 =go.Scatter(\n                    x = data1.average_rating,\n                    y = data1.R2,\n                    mode = \"markers\",\n                    name = \"2005\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2005.authors)\ntrace3 =go.Scatter(\n                    x = data1.average_rating,\n                    y = data1.R3,\n                    mode = \"markers\",\n                    name = \"2003\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2003.authors)\ndata = [trace1, trace2, trace3]\nlayout = dict(\n              xaxis= dict(title= 'Average Ratings',ticklen= 9,zeroline= False),\n              yaxis= dict(title= 'Ratings',ticklen= 9,zeroline= False),\n              title = \"Ratings and Average Ratings of 2004\/2005\/2006\"\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","1efb4b03":"data3=books.head(6)\nsta = books.average_rating.value_counts().index[:10]  \nplt.figure(figsize = (8,5))\nsns.barplot(x=sta,y =books.average_rating.value_counts().values[:10]) \nplt.title('Avarage Ratings of First 10 Books ',color = 'blue',fontsize=15)\nplt.show()","40346313":"df = books[books.original_publication_year == 2014].iloc[:10,:]\n\nimport plotly.graph_objs as go\n\nx = df.authors\ntrace1 = {\n  'x': x,\n  'y': df.ratings_1,\n  'name': 'ratings_1',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': x,\n  'y': df.ratings_2,\n  'name': 'ratings_2',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Top 3 Authors'},\n  'barmode': 'relative',\n  'title': 'Ratings1 and Ratings2 of Top 10 Authors in 2014'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","a548c256":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ndf = books[books.original_publication_year == 2009].iloc[:7,:]\npie1 = df.ratings_1\ndf1 = books[books.original_publication_year == 2010].iloc[:7,:]\npie2 = df1.ratings_1\nlabels = df.authors.value_counts().index\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=labels, values=pie1, name=\"Number Of Authors Rates\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=pie1, name=\"Number Of Authors Rates\"),\n              1, 2)\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.45, hoverinfo=\"label+percent+name\")\nfig.update_layout(\n    height=800, width=800,\n    title_text=\"Number of Authors Ratings Rates\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='2009', x=0.175, y=0.5, font_size=14, showarrow=False),\n                 dict(text='2010', x=0.82, y=0.5, font_size=14, showarrow=False)])\nfig.show()","64b9ee00":"from plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\ndf1 = books[books.original_publication_year == 2009]\ntrace0 = go.Scatter(\n    y=df1.ratings_1,\n    name = 'Rating1',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Scatter(\n    y=df1.ratings_2,\n    name = 'Rating2',\n     xaxis='x2',\n     yaxis='y2',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Ratings1 and Ratings2 of 2009'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","6087ec4f":"books2= books.drop(columns=['work_id','id','book_id','best_book_id','best_book_id','isbn13','original_publication_year',\"image_url\",\"small_image_url\"])","917037cb":"books2.corr()","782d5bab":"f,ax = plt.subplots(figsize=(7,7))\nsns.heatmap(books2.corr(), annot=True, linewidths=0.6,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show() ","8d0b42b0":"from scipy import stats\ndata_new = pd.DataFrame({'ratings1':ratings1,'ratings2':ratings2})\ng = sns.jointplot(data_new.ratings1, data_new.ratings2, kind=\"kde\", size=5)\ng = g.annotate(stats.pearsonr)\nplt.show()","7e57d047":"sns.lmplot(x=\"ratings_3\", y=\"work_ratings_count\", data=books2)\nplt.show()","14360706":"pip install pyspark","a62840f8":"import pyspark as ps\nfrom pyspark.sql import SQLContext,Row\nfrom pyspark.ml.evaluation import  RegressionEvaluator\nfrom pyspark.ml.tuning import CrossValidator,ParamGridBuilder\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.recommendation import ALS\nfrom pyspark.sql.functions import udf,col,when\n\n\nimport numpy as np\n","cc247264":"spark = ps.sql.SparkSession.builder.master(\"local\")\\\n                                   .appName(\"BookRes\")\\\n                                   .getOrCreate()\n\nsc = spark.sparkContext\nsqlContext = SQLContext(sc)","7d141675":"ratings_df  = spark.read.csv(\"..\/input\/goodbooks-10k\/ratings.csv\",header=True,inferSchema=True)\nratings_df.printSchema()","73889883":"ratings_df.show(n=2)","750b0f56":"books_df  = spark.read.csv(\"..\/input\/goodbooks-10k\/books.csv\",header=True,inferSchema=True)\nbooks_df.printSchema()","bb3ee4a8":"training_df,validation_df = ratings_df.randomSplit([.8,0.2])","72399d41":"iterations = 10\nregularisation_para = 0.1\nrank=4\nerrors = []\nerr=0","70ba0446":"als  = ALS(maxIter=iterations,regParam=regularisation_para,rank=4,userCol=\"user_id\",itemCol=\"book_id\",ratingCol=\"rating\")\nmodel = als.fit(training_df)","3040b3a4":"predictions = model.transform(validation_df)\nnew_predictions = predictions.filter(col(\"prediction\")!= np.nan)\nevalutor = RegressionEvaluator(metricName=\"rmse\",labelCol=\"rating\",predictionCol=\"prediction\")\n\nrmse_score = evalutor.evaluate(new_predictions)\nprint(\"Root Mean Square Errr Value :\",str(rmse_score))","e7fcdd03":"predictions.join(books_df,\"book_id\").select(\"user_id\",\"title\",\"prediction\").show(5)","1b75ad29":"for_one_user = predictions.filter(col(\"user_id\")==35982).join(books_df,\"book_id\").select(\"user_id\",\"title\",'image_url','prediction')\nfor_one_user.count()","b7669fcb":"for_one_user.show()","9e7911ce":"print(\"Recommnedations by ALS algorithm \\n for user_id:35982\\n\\n\")\nfor book in for_one_user.take(5):\n  print(book.title)","2eaaeabc":"- **Correlation coefficient** is a statistical method used to determine the direction and severity of relationship between two numerical measurements which have a linear relationship.\n\n-If the data is normally distributed,** Pearson correlation coefficient** is preferred but if it is not, **Spearman rank correlation coefficient ** is preferred.\n-In order to interpret a correlation coefficient, p value should be less than 0.05.\n\n- **Pearson correlation coefficient (r)**\n- r <0.2 very weak relationship or no correlation\n- 0.2<r<0.4 poor correlation between\n- 0.4<r<0.6 moderate correlation between \n- 0.6<r<0.8 high correlation between \n- r>0.8 is interpreted to be very high correlation.\n\n-If the correlation coefficient is negative,there is an inverse proportion between the two variables,that means when the value of one variable increases, the other decreases. If the correlation coefficient is positive, when the value of one variable increases, the other increases as well.","690db87d":"# Predictions And Evalution","e2bce5e9":"# the avarage reviews that given authors on goodreads.\ndf = books.work_text_reviews_count>29700\nbooks_newdata2=books[df]\nmelted_books2= pd.melt(frame=books_newdata2,id_vars='authors',value_vars='work_text_reviews_count')\nreviews_list= list(melted_books2['authors'].unique())\nauthor_reviews_ratio=[]\n\nfor i in reviews_list:\n    x= melted_books2[melted_books2['authors']==i]\n    author_reviews_ratio_rate=sum(x.value)\/len(x)\n    author_reviews_ratio.append(  author_reviews_ratio_rate)\n\ndata = pd.DataFrame({'reviews_list':reviews_list,'author_reviews_ratio':author_reviews_ratio})\nnew_index = (data['author_reviews_ratio'].sort_values(ascending=False)).index.values\nsorted_data2 = data.reindex(new_index)\n\n#visualization\nplt.figure(figsize=(30,20))\nsns.barplot(x=sorted_data2['reviews_list'],y=sorted_data2['author_reviews_ratio'])\nplt.xticks(rotation= 90)\nplt.xlabel('Authors',size='30')\nplt.ylabel('Avarage Reviews')\nplt.title('Avarage Reviews Given Authors',color='purple',size='30')\nplt.show()","fd5d4c67":"# EDA","7a12ef96":"> - Data has tweenty three columns and 10000 rows.","6b9721cf":"Testing A Single User with user_id = 35982","de43897f":"# **Building Book Recommendation System**\n\n> Using pyspark"}}