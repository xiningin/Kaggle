{"cell_type":{"fec2b6d0":"code","2243b455":"code","1be1921f":"code","ea494439":"code","aa9e6893":"code","d0c3072c":"code","433827fd":"code","8b5dd760":"code","54d46157":"code","6e1d31ba":"code","ad98eedc":"code","7666a313":"code","7b88f043":"code","82e8af06":"code","c9229378":"code","c417c2be":"code","45bcc016":"code","90572a60":"code","4be1ffdd":"code","198d19bf":"code","abf6d58b":"code","90222186":"code","1dfde4fb":"markdown","aca1a643":"markdown","376b80c4":"markdown","51bd1d37":"markdown","a6aa1990":"markdown","c3d87e28":"markdown"},"source":{"fec2b6d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(style=\"white\", color_codes=True)\nimport warnings # current version of seaborn generates a bunch of warnings that we'll ignore\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/\"))","2243b455":"pip install chart_studio","1be1921f":"# Importing plotting libraries\nimport cufflinks as cf\nimport chart_studio.plotly as py\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight') \n# Above is a special style template for matplotlib, highly useful for visualizing time series data\n%matplotlib inline\nfrom pylab import rcParams\nfrom plotly import tools\n#import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport seaborn as sns\nimport datetime as dt\n\n# Libraries for forecasting - FB Prophet\nfrom fbprophet import Prophet\n# Statsmodels widely known for forecasting than Prophet\nimport statsmodels.api as sm\nfrom scipy import stats\n#from pandas.core import datetools\nfrom plotly import tools\n#import plotly.plotly as py\nimport plotly.figure_factory as ff\nimport plotly.tools as tls\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# plt.style.available\nplt.style.use(\"seaborn-whitegrid\")","ea494439":"df = pd.read_csv('..\/input\/sandp500\/all_stocks_5yr.csv')\ndf.head()","aa9e6893":"amazon = pd.read_csv('..\/input\/stock-time-series-20050101-to-20171231\/AMZN_2006-01-01_to_2018-01-01.csv', index_col='Date', parse_dates=['Date'])\namazon.head()","d0c3072c":"amazon['2008':'2010'].plot(subplots=True, figsize=(10,12))\nplt.title('Amazon stock attributes from 2008 to 2010')\nplt.savefig('stocks.png')\nplt.show()","433827fd":"# OHLC chart of January 2009\ntrace = go.Ohlc(x=amazon['01-2009'].index,\n                open=amazon['01-2009'].Open,\n                high=amazon['01-2009'].High,\n                low=amazon['01-2009'].Low,\n                close=amazon['01-2009'].Close)\ndata = [trace]\niplot(data, filename='simple_ohlc')","8b5dd760":"# OHLC chart of 2009\ntrace = go.Ohlc(x=amazon['2009'].index,\n                open=amazon['2009'].Open,\n                high=amazon['2009'].High,\n                low=amazon['2009'].Low,\n                close=amazon['2009'].Close)\ndata = [trace]\niplot(data, filename='simple_ohlc')","54d46157":" #Candlestick chart of January 2009\ntrace = go.Candlestick(x=amazon['01-2009'].index,\n                open=amazon['01-2009'].Open,\n                high=amazon['01-2009'].High,\n                low=amazon['01-2009'].Low,\n                close=amazon['01-2009'].Close)\ndata = [trace]\niplot(data, filename='simple_candlestick')","6e1d31ba":"#Candlestick chart of October 2009\ntrace = go.Candlestick(x=amazon['10-2009'].index,\n                open=amazon['10-2009'].Open,\n                high=amazon['10-2009'].High,\n                low=amazon['10-2009'].Low,\n                close=amazon['10-2009'].Close)\ndata = [trace]\niplot(data, filename='simple_candlestick')","ad98eedc":"#Candlestick chart of 2009\ntrace = go.Candlestick(x=amazon['2009'].index,\n                open=amazon['2009'].Open,\n                high=amazon['2009'].High,\n                low=amazon['2009'].Low,\n                close=amazon['2009'].Close)\ndata = [trace]\niplot(data, filename='simple_candlestick')\n","7666a313":"# Replace the column name from name to ticks\ndf = df.rename(columns={'Name': 'Ticks'})","7b88f043":"# Let's analyze some of the stocks.\namzn = df.loc[df['Ticks'] == 'AMZN']\namzn.head()","82e8af06":"amzn.tail()","c9229378":"amzn.info()","c417c2be":"# Create a copy to avoid the SettingWarning .loc issue \namzn_df = amzn.copy()\n# Change to datetime datatype.\namzn_df.loc[:, 'date'] = pd.to_datetime(amzn.loc[:,'date'], format=\"%Y\/%m\/%d\")","45bcc016":"m = Prophet() # Prophet package from fb for predictive analytics\n\n# Drop the columns\nph_df = amzn_df.drop(['open', 'high', 'low','volume', 'Ticks'], axis=1)\nph_df.rename(columns={'close': 'y', 'date': 'ds'}, inplace=True)\n\nph_df.head()","90572a60":"m = Prophet()\n\nm.fit(ph_df)","4be1ffdd":"# Create Future dates\nfuture_prices = m.make_future_dataframe(periods=365)\n\n# Predict Prices\nforecast = m.predict(future_prices)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","198d19bf":"# Create Future dates for 2 years\nfuture_prices2 = m.make_future_dataframe(periods=730)\n\n# Predict Prices\nforecast2 = m.predict(future_prices2)\nforecast2[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","abf6d58b":"import matplotlib.dates as mdates\n\n# Dates\nstarting_date = dt.datetime(2018, 4, 7)\nstarting_date1 = mdates.date2num(starting_date)\ntrend_date = dt.datetime(2018, 6, 7)\ntrend_date1 = mdates.date2num(trend_date)\n\npointing_arrow = dt.datetime(2018, 2, 18)\npointing_arrow1 = mdates.date2num(pointing_arrow)\n\n# Price forecast and plot the forecast for amazon.\nfig = m.plot(forecast)\nax1 = fig.add_subplot(111)\nax1.set_title(\"Amazon Stock Price Forecast\", fontsize=16)\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"Close Price\", fontsize=12)\n\n# Forecast initialization arrow\nax1.annotate('Forecast \\n Initialization', xy=(pointing_arrow1, 1350), xytext=(starting_date1,1700),\n            arrowprops=dict(facecolor='#ff7f50', shrink=0.1),\n            )\n\n# Trend emphasis arrow\nax1.annotate('Upward Trend', xy=(trend_date1, 1225), xytext=(trend_date1,950),\n            arrowprops=dict(facecolor='#6cff6c', shrink=0.1),\n            )\n\nax1.axhline(y=1260, color='b', linestyle='-')\n\nplt.show()","90222186":"import matplotlib.dates as mdates\n\n# Dates\nstarting_date = dt.datetime(2019, 4, 7)\nstarting_date1 = mdates.date2num(starting_date)\ntrend_date = dt.datetime(2019, 6, 7)\ntrend_date1 = mdates.date2num(trend_date)\n\npointing_arrow = dt.datetime(2019, 2, 18)\npointing_arrow1 = mdates.date2num(pointing_arrow)\n\n# Price forecast and plot the forecast for amazon.\nfig = m.plot(forecast2)\nax1 = fig.add_subplot(111)\nax1.set_title(\"Amazon Stock Price Forecast - 2 years \", fontsize=16)\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"Close Price\", fontsize=12)\n\n\nax1.axhline(y=1260, color='b', linestyle='-')\n\nplt.show()","1dfde4fb":"![image.png](attachment:7742a883-a3f2-443e-8d16-40c3702e93e0.png)![image.png](attachment:b1d1dbef-bef3-4161-9b35-7880efcf9d81.png)","aca1a643":"![image.png](attachment:53423ef9-6573-40c8-a4bf-ebab4e7da476.png)","376b80c4":"**PRICE PREDICTION EXERCISE (AMAZON STOCKS)**","51bd1d37":"**Below is the guidechart to analyse Candlestick pattern** (Source: top10stockbroker.com)","a6aa1990":"**PART A - ANALYSIS OF AMAZON STOCK PRICES**\n\nThe following section analyses the historic stock prices of Amazon","c3d87e28":"**Below is the guidechart to analyse OHLC (Open, High, Low , Close) Charts** \n(Source: datavizcatalogue.com)"}}