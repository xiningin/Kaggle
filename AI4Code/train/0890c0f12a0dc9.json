{"cell_type":{"be03f993":"code","a77c057e":"code","6548ffaf":"code","6c5e85a3":"code","8526fd0e":"code","00f32bad":"code","b090823d":"code","730bf114":"markdown","614e4f49":"markdown","67d04ba7":"markdown","5158ade4":"markdown","f776ec44":"markdown","eeded64a":"markdown","3c85e462":"markdown","e810699b":"markdown","c7b93df1":"markdown"},"source":{"be03f993":"import numpy  as np\nimport matplotlib.pyplot  as plt \n\nnumEpocas = 60  #numero de epocas - sugest\u00e3o de quantas \u00e9pocas algoritmo vai ser treinado , por\u00e9m pode ser mais r\u00e1pido (vai colocando de acordo com sua prefer\u00eancia para observa\u00e7\u00e3o do apredizando)\npadrao = 13     # numero de  dados correspondentes as frutas \ntaxApre = 0.1  #taxa de apredizando\nmEntrada = 2   #camada de entrada\nnEscon = 4    #camadas escondidas\nNsaida = 1    #camada de sa\u00edda\nbias = 1     #adicionando o bias \n\n\n","a77c057e":"peso = np.array([113, 112, 127, 100, 118, 125, 101, 98, 118, 102, 112, 109,121])\nPH   = np.array([2.77, 4.25, 2.33, 3.78, 4.12, 4.2, 2.3, 4.0, 4.3, 2.2, 3.69, 2.1, 3.7])\nvetClass = np.array([1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1  ])","6548ffaf":"W1 = np.random.random((nEscon, mEntrada + 1))\nW2 = np.random.random((Nsaida, nEscon + 1))","6c5e85a3":"erros = np.zeros(padrao)\netm = np.zeros(numEpocas)","8526fd0e":"X = np.vstack((peso, PH))","00f32bad":"for i in range(numEpocas):\n    for j in range(padrao ):\n        \n            \n        Xb = np.hstack((bias, X[:,j])) #Inserindo o bias no vetor de entrada\n\n        #usando fun\u00e7\u00e3o de ativa\u00e7\u00e3o Tanh\n        O1 = np.tanh(W1.dot(Xb)) #sa\u00edda da camada escondida\n\n\n        O1b = np.insert(O1, 0, bias) #inserindo bias na saida da camada escondida\n\n  \n        Y = np.tanh(W2.dot(O1b))       # resultado da sa\u00edda da camada    \n        \n        erro = vetClass[j] - Y         #calculando  o erro da sa\u00edda              \n\n     \n        erros[j] = (erro.transpose().dot(erro))\/2  #calculando erro total atrav\u00e9s da equa\u00e7\u00e3o do erro quadr\u00e1\n        \n        \n        #fazendo retro-propaga\u00e7\u00e3o\n        delta2 = np.diag(erro).dot((1 - Y*Y))         \n        vdelta2 = (W2.transpose()).dot(delta2)      \n        delta1 = np.diag(1 - O1b*O1b).dot(vdelta2)  \n\n        # Atualiza\u00e7\u00e3o dos pesos.\n        W1 = W1 + taxApre*(np.outer(delta1[1:], Xb))\n        W2 = W2 + taxApre*(np.outer(delta2, O1b))\n    \n    #pegando os erros\n    etm[i] = erros.mean()\n   \n#cria\u00e7\u00e3o do grafico em rela\u00e7\u00e3o e media total de erros\nplt.plot(etm)\nplt.show()\n\n# ===============================================================\n# TESTE DA REDE.\n# ===============================================================\n\nError_Test = np.zeros(padrao)\n\nfor i in range(padrao):\n    # Insere o bias no vetor de entrada.\n    Xb = np.hstack((bias, X[:,i]))\n\n    # Sa\u00edda da Camada Escondida.\n    O1 = np.tanh(W1.dot(Xb))              \n\n    # Incluindo o bias. Sa\u00edda da camada escondida \u00e9 a entrada da camada\n    # de sa\u00edda.\n    O1b = np.insert(O1, 0, bias)\n\n\n    Y = np.tanh(W2.dot(O1b)) # resultado da sa\u00edda da camada   \n\n    Error_Test[i] = vetClass[i] - Y\n    \n    \n #vai mostrar os erros que rede teve   \nprint(Error_Test)\n#quando mostrar o vetor todo zerado (0) treinamento foi 100% eficaz com numero de \u00e9pocas\n#quando mostrar o vetor todo com um (1) treinamento n\u00e3o foi 100% eficaz com as \u00e9pocas\nprint(np.round(Error_Test) - vetClass)","b090823d":"        #fa\u00e7a excuta\u00e7\u00e3o depois do algoritimo encima dessa\n        #faz teste se rede aprendeu realmente\n\n\npeso = np.array([110, 113, 120,  125, 97])\nPH   = np.array([2.0, 2.30, 2.5, 3.5, 3.0])\nvetClass = np.array([-1, -1, -1, 1, 1])\nError_Test = np.zeros(5)\n\n        \n\n\nfor i in range(5):\n    # Insere o bias no vetor de entrada.\n    Xb = np.hstack((bias, X[:,i]))\n\n    # Sa\u00edda da Camada Escondida.\n    O1 = np.tanh(W1.dot(Xb))                 \n\n    # Incluindo o bias. Sa\u00edda da camada escondida \u00e9 a entrada da camada\n    # de sa\u00edda.\n    O1b = np.insert(O1, 0, bias)\n\n    # Neural network output\n    Y = np.tanh(W2.dot(O1b))            \n\n    Error_Test[i] = vetClass[i] - Y\n#vai mostrar os erros que rede teve   \nprint(Error_Test)\n#quando mostrar o vetor todo zerado (0) treinamento foi 100% eficaz com numero de \u00e9pocas\n#quando mostrar o vetor todo com um (1) treinamento n\u00e3o foi 100% eficaz com as \u00e9pocas\nprint(np.round(Error_Test) - vetClass)","730bf114":"\n\n\n\n# Classifica\u00e7\u00e3o de laranja e lim\u00e3o atrav\u00e9s do peso e PH\n# atrav\u00e9s de dados fict\u00edcio:\n\n       Peso(gama)      PH     Fruta\n        113           2,77    Lim\u00e3o\n        112           4,25    Laranja\n        127           2,33    Lim\u00e3o\n        100           3,78    Laranja\n        118           4,12    Laranja\n        125           4,2     Laranja\n        101           2,3     Lim\u00e3o\n        98            4,0     Laranja\n        118           4,3     laranja\n        102           2,2     Lim\u00e3o\n        112           3,69    Laranja\n        109           2,1     Lim\u00e3o\n        121           3,7     Laranja\n        \n        \n# Vamos considerar algumas coisas no c\u00f3digo:\n    Laranja = -1(representa\u00e7\u00e3o no algoritimo )\n    Lim\u00e3o =   1(representa\u00e7\u00e3o no algoritimo )\n\n\n# Importa\u00e7\u00e3o das bibliotecas que ser\u00e3o usada e cria\u00e7\u00e3o de vari\u00e1veis","614e4f49":"# entrada do perceptron","67d04ba7":"#     Acad\u00eamicos : Amaury Ferreira Silva\n#                     Bruno Gon\u00e7alves Barros","5158ade4":"# Iniciando aleatoriamente as matrizes do peso","f776ec44":"# Array para amanezarnar os erros","eeded64a":"#       Rede Treinamento\n       O gr\u00e1fico mostra percentual de \u00e9pocas e erros\n       Mostra os erros da rede\n       Mostra eficaz da rede se for 100% ou n\u00e3o","3c85e462":"# Os dados do treinamento seguindo poblema em quest\u00e3o:","e810699b":"# Treinamento da rede:","c7b93df1":"# Rede Teste\n       Mostra os erros da rede\n       Mostra eficaz da rede se for 100% ou n\u00e3o"}}