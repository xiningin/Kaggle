{"cell_type":{"0ec108d4":"code","b8f6278f":"code","af76cbef":"code","43d756c7":"code","9aad961e":"code","0a73ca2f":"code","f1e3530b":"code","aa62af3b":"code","927a5037":"code","3ae952c7":"code","6ea94494":"code","0db711dc":"code","c5c32e5d":"code","da3b0c6e":"code","9a106922":"code","2d7993d3":"code","c3c9eccb":"code","487e7407":"code","d66e19c7":"code","2b21c21b":"code","5f357bf8":"code","ab0ea072":"code","f49b2bfa":"markdown","cb6598fb":"markdown","260d6e7f":"markdown","b88a33c5":"markdown","3ac41789":"markdown","0db6b7db":"markdown","916a3ce3":"markdown"},"source":{"0ec108d4":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b8f6278f":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\ntrain.head()","af76cbef":"train.describe().loc['max',].max()","43d756c7":"train.shape, test.shape","9aad961e":"from keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils.np_utils import to_categorical","0a73ca2f":"Y_train = to_categorical(train['label'].values, 10)\nX_train = (train.loc[:, 'pixel0':] \/ 255).values\n\nX_train.shape, Y_train.shape","f1e3530b":"X_test = (test \/ 255).values","aa62af3b":"X_train = X_train.reshape((X_train.shape[0], 28, 28, 1))\nX_test = X_test.reshape((X_test.shape[0], 28, 28, 1))","927a5037":"X_train.shape, X_test.shape","3ae952c7":"datagener = ImageDataGenerator(\n    rotation_range=15,\n    zoom_range=0.1,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n)","6ea94494":"example = X_train[6].reshape((1, 28, 28, 1))\nlabel = Y_train[6]","0db711dc":"label = label.reshape((1, 10))\nlabel","c5c32e5d":"plt.figure(figsize=(12, 12))\nfor i in range(20):\n    plt.subplot(1, 20, i + 1)\n    img, lb = datagener.flow(example, label).next()\n    plt.imshow(img[0].squeeze(), cmap=plt.cm.binary)\n    plt.axis('off')","da3b0c6e":"def graph_plot(history):\n    fig = plt.figure(figsize=(16, 24))\n    for i in history.history.keys():\n        print(f'{i} = [{min(history.history[i])}; {max(history.history[i])}]\\n')\n    \n    epoch = len(history.history['loss'])\n    # \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e: (train, val) + lr\n    size = len(history.history.keys()) \/\/ 2 + 1\n    \n    i = 1\n    for k in list(history.history.keys()):\n        if 'val' not in k:\n            fig.add_subplot(size, 1, i)\n            plt.plot(history.history[k], marker='o', markersize=5)\n            if k != 'lr':\n                plt.plot(history.history['val_' + k], marker='o', markersize=5)\n            plt.title(k, fontsize=10)\n\n            plt.ylabel(k)\n            plt.xlabel('epoch')\n            plt.grid()\n\n            plt.yticks(fontsize=10, rotation=30)\n            plt.xticks(fontsize=10, rotation=30)\n            plt.legend(['train', 'valid'], loc='upper left', fontsize=10, title_fontsize=15)\n            i += 1\n#         plt.show()","9a106922":"# from sklearn.utils import class_weight\n\n# weight = class_weight.compute_class_weight('balanced', np.unique(Y_train), Y_train)\n# weight = {i : weight[i] for i in np.unique(Y_train)}\n# weight","2d7993d3":"def lr_scheduler(epoch, lr):\n    return lr * 0.99","c3c9eccb":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, Y_train, Y_valid = train_test_split(X_train, Y_train, test_size=0.2)","487e7407":"from keras import models, optimizers\nfrom keras.utils import to_categorical\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, LearningRateScheduler\nfrom keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten, SpatialDropout2D\nfrom keras.layers.normalization import BatchNormalization\nimport tensorflow as tf\nimport tensorflow_addons as tfa\nnp.random.seed(42)\ntf.random.set_seed(42)\n\n\nmodel = models.Sequential()\nmodel.add(Conv2D(96, 3, activation='relu', padding='same', input_shape=(28, 28, 1)))\nmodel.add(BatchNormalization())\nmodel.add(SpatialDropout2D(0.4))\n\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(160, 3, activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(SpatialDropout2D(0.4))\n\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(256, 3, activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(SpatialDropout2D(0.4))\n\n# model.add(MaxPooling2D((2, 2)))\n# model.add(Conv2D(128, 3, activation='relu', padding='same'))\n# model.add(BatchNormalization())\n# model.add(SpatialDropout2D(0.5))\n\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(64, 3, activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(SpatialDropout2D(0.4))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.3))\n# model.add(Dense(96, activation='relu'))\n# model.add(Dropout(0.6))\nmodel.add(Dense(96, activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.compile(optimizer=optimizers.Adam(lr=1e-2), \n              loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n\ncheckpoint_path = 'bestmodel.hdf5'\ncheckpoint = ModelCheckpoint(checkpoint_path, monitor='val_categorical_accuracy', \n                             verbose=0, save_best_only=True, mode='max')\n\nscheduler = LearningRateScheduler(lr_scheduler, verbose=0)\n\nearly_stop = EarlyStopping(monitor='val_loss', min_delta=0, patience=15, mode='min', verbose=0)\n\ntqdm_callback = tfa.callbacks.TQDMProgressBar(leave_epoch_progress=False, \n                                              leave_overall_progress=True, \n                                              show_epoch_progress=False,\n                                              show_overall_progress=True)\n\ncallbacks_list = [\n    checkpoint, \n    scheduler, \n    tqdm_callback, \n  #  early_stop\n]\n\nhistory = model.fit_generator(datagener.flow(X_train, Y_train, batch_size=150), epochs=225, steps_per_epoch=X_train.shape[0] \/\/ 150,\n                    callbacks=callbacks_list, \n                   # class_weight=weight,\n                    verbose=1, validation_data=(X_valid, Y_valid))","d66e19c7":"graph_plot(history)","2b21c21b":"model.load_weights(checkpoint_path)\nprint(model.evaluate(X_valid, Y_valid))\n# X_test = X_test.reshape((X_test.shape[0], 28, 28, 1))","5f357bf8":"submit = pd.DataFrame(np.argmax(model.predict(X_test), axis=1), columns=['Label'], \n                      index=pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')['ImageId'])\n\nsubmit.index.name = 'ImageId'\nsubmit.to_csv('submittion.csv')","ab0ea072":"submit","f49b2bfa":"Strategy learning rate","cb6598fb":"RGB format","260d6e7f":"Normalize","b88a33c5":"CNN","3ac41789":"Loss graphs","0db6b7db":"Load model","916a3ce3":"Loading data"}}