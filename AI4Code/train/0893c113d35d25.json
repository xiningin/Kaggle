{"cell_type":{"fdc96da3":"code","590dddcc":"code","9f0ff1f6":"code","19584c77":"code","7a3717d6":"code","08eb84ac":"code","f987a679":"code","2526d5c6":"code","ae7dded4":"code","a5e50616":"code","028d28c5":"code","20727260":"code","b946f80d":"code","f16c461f":"code","e3478dea":"code","0e24ecd2":"code","6e4abc96":"code","33220395":"code","3671a441":"markdown","d2d88676":"markdown"},"source":{"fdc96da3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","590dddcc":"# Get training dataset\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain_df.head(3)","9f0ff1f6":"# Get test dataset\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\ntest_df.head(3)","19584c77":"# train data info\n\nprint(train_df.info())","7a3717d6":"# test data info\n\nprint(test_df.info())","08eb84ac":"print(' Sex value counts :\\n',train_df['Sex'].value_counts())\nprint('\\n Cabin value counts :\\n',train_df['Cabin'].value_counts())\nprint('\\n Embarked vlaue counts :\\n',train_df['Embarked'].value_counts())","f987a679":"import seaborn as sns\n\nsns.barplot(x='Sex', y = 'Survived', data=train_df)","2526d5c6":"sns.barplot(x='Pclass', y='Survived', hue='Sex', data=train_df)","ae7dded4":"import matplotlib.pyplot as plt\n\n# Split age using apply lambda \ndef get_category(age):\n    cat = ''\n    if age <= -1: cat = 'Unknown'\n    elif age <= 5: cat = 'Baby'\n    elif age <= 12: cat = 'Child'\n    elif age <= 18: cat = 'Teenager'\n    elif age <= 25: cat = 'Student'\n    elif age <= 35: cat = 'Young Adult'\n    elif age <= 60: cat = 'Adult'\n    else : cat = 'Elderly'\n    \n    return cat\n\nplt.figure(figsize=(10,6))\n\ngroup_names = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Elderly']\n\ntrain_df['Age_cat'] = train_df['Age'].apply(lambda x : get_category(x))\nsns.barplot(x='Age_cat', y = 'Survived', hue='Sex', data=train_df, order=group_names)\ntrain_df.drop('Age_cat', axis=1, inplace=True)","a5e50616":"from sklearn.preprocessing import LabelEncoder\n\n# Handling NULL\ndef fillna(df):\n    df['Age'].fillna(df['Age'].mean(),inplace=True)\n    df['Cabin'].fillna('N',inplace=True)\n    df['Embarked'].fillna('N',inplace=True)\n    df['Fare'].fillna(0,inplace=True)\n\n    return df\n\n# Drop useless features for machine learning\ndef drop_features(df):\n    df.drop(['PassengerId','Name','Ticket'] ,axis=1,inplace=True)\n    return df\n\n# label encoding. \ndef format_features(df):\n    df['Cabin'] = df['Cabin'].str[:1]\n    features = ['Cabin','Sex','Embarked']\n    for feature in features:\n        le = LabelEncoder()\n        le = le.fit(df[feature])\n        df[feature] = le.transform(df[feature])\n    return df\n\ndef transform_features(df):\n    df = fillna(df)\n    df = drop_features(df)\n    df = format_features(df)\n    return df","028d28c5":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ny_train = train_df['Survived']\nX_train= train_df.drop('Survived',axis=1)\n\nX_train = transform_features(X_train)","20727260":"test_df = pd.read_csv('..\/input\/titanic\/test.csv')\n\nX_test = transform_features(test_df)","b946f80d":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val=train_test_split(X_train, y_train, \\\n                                                  test_size=0.2, random_state=11)","f16c461f":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n\n# Construct Classifier class for DecisionTree, Random Forest, LogisticRegression,  Classifier \ndt_clf = DecisionTreeClassifier(random_state=11)\nrf_clf = RandomForestClassifier(n_estimators= 500,random_state=11)\nlr_clf = LogisticRegression()\n\n# DecisionTreeClassifier train\/val\/\ndt_clf.fit(X_train , y_train)\ndt_pred = dt_clf.predict(X_val)\nprint('DecisionTreeClassifier Accuracy: {0:.4f}'.format(accuracy_score(y_val, dt_pred)))\n\n# RandomForestClassifier train\/val\/\nrf_clf.fit(X_train , y_train)\nrf_pred = rf_clf.predict(X_val)\nprint('RandomForestClassifier Accuracy:{0:.4f}'.format(accuracy_score(y_val, rf_pred)))\n\n# LogisticRegression train\/val\/\nlr_clf.fit(X_train , y_train)\nlr_pred = lr_clf.predict(X_val)\nprint('LogisticRegression Accuracy: {0:.4f}'.format(accuracy_score(y_val, lr_pred)))","e3478dea":"from sklearn.model_selection import GridSearchCV\n\nparameters = {\n             'max_depth':[2,3,5,10,12,15,17,20],\n             'min_samples_split':[2,3,5,6,8,10], \n              'min_samples_leaf':[1,5,8,10,13,15]\n}\n\ngrid_dclf = GridSearchCV(dt_clf , param_grid=parameters , scoring='accuracy' , cv=5)\ngrid_dclf.fit(X_train , y_train)\n\nprint('GridSearchCV Best_Params :',grid_dclf.best_params_)\nprint('GridSearchCV Best_score: {0:.4f}'.format(grid_dclf.best_score_))\nbest_dclf = grid_dclf.best_estimator_\n\ndpredictions = best_dclf.predict(X_test)\n#accuracy = accuracy_score(y_test , dpredictions)\n#print('\ud14c\uc2a4\ud2b8 \uc138\ud2b8\uc5d0\uc11c\uc758 DecisionTreeClassifier \uc815\ud655\ub3c4 : {0:.4f}'.format(accuracy))\n","0e24ecd2":"finals_pred = best_dclf.predict(X_test)\n\nfinals_pred","6e4abc96":"predict = pd.DataFrame(finals_pred)\nsub_d = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsub_d['Survived'] = predict\nsub_d.to_csv('Submissionsd.csv', index = False)","33220395":"submission =  pd.read_csv('Submissionsd.csv')\nsubmission.head()","3671a441":"> Basic EDA","d2d88676":"> Preprocessing"}}