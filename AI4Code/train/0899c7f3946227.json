{"cell_type":{"d1d8040f":"code","e056cad8":"code","a288dc0c":"code","8f4d0570":"code","56bf5398":"code","ad0d83f8":"code","859fd6bd":"code","7aa29269":"code","897491f7":"code","973819c8":"code","4aaea62a":"code","ff9b6b06":"code","5f6bd282":"markdown","177eb862":"markdown"},"source":{"d1d8040f":"import numpy as np\nimport pandas as pd\nimport re\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity","e056cad8":"data = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\ndata.head(15)","a288dc0c":"# Understanding the data\ndata.shape","8f4d0570":"data.isnull().sum()","56bf5398":"# Drop missing data in the excel, it is a personal choice not to drop country cause tbh I will not look at the country for recommendation\ndata = data.dropna(subset=['director','cast', 'rating'])\ndata.shape","ad0d83f8":"data = data.drop(['show_id','date_added','release_year','duration','description'], axis = 1)\ndata.head()","859fd6bd":"data.isnull().sum()","7aa29269":"data.groupby('type').count()","897491f7":"# splitting the data, perfect place to use the Regular expression\ndata['listed_in'] = [re.sub(r'[^\\w\\s]', '', t) for t in data['listed_in']]\ndata['cast'] = [re.sub(r'[^\\w]', '', t) for t in data['cast']]\n\ndata['listed_in'] = [t.lower() for t in data['listed_in']]\ndata['cast'] = [t.lower() for t in data['cast']]\n\n# creating bag of words\ndata[\"combined\"] = data['listed_in'] + '  ' + data['title'] + ' ' + data['cast'] + ' ' + data['country'] \ndata.drop([\"cast\", \"listed_in\", \"country\", 'director'],axis=1,inplace=True)\ndata.head()","973819c8":"#separate tv shows and movies\nTv = data[data['type'] =='TV Show'].reset_index()\nMov = data[data['type'] =='Movie'].reset_index()\nTv.head()","4aaea62a":"# main\n\nvectorizer = CountVectorizer()\nrecommended_movies = []\n\n# matrixTv = vectorizer.fit_transform(Tv['combined'].values.astype('U'))\n# idx = Tv[Tv['title'] == search].index.item()\n# similar = cosine_similarity(matrix,matrix)\n# score = pd.Series(similar[idx]).sort_values(ascending = False)\n# top_10 = list(score.iloc[1:11].index)\n\n# for i in top_10:\n#     recommended_movies.append((Tv['title'])[i])\n# recommended_movies\n\ndef netflix_recommender(search):\n    if search in Tv['title'].values:\n        matrixTv = vectorizer.fit_transform(Tv['combined'].values.astype('U'))\n        #find the index of the item been searched\n        idx = Tv[Tv['title'] == search].index.item()\n        similar = cosine_similarity(matrixTv,matrixTv)\n        score = pd.Series(similar[idx]).sort_values(ascending = False)\n        top_10 = list(score.iloc[1:11].index)\n        \n        for i in top_10:\n            recommended_movies.append((Tv['title'])[i])\n        return recommended_movies\n    \n    elif search in Mov['title'].values:\n        matrixMov = vectorizer.fit_transform(Mov['combined'].values.astype('U'))\n        idx = Mov[Mov['title'] == search].index.item()\n        similar = cosine_similarity(matrixMov,matrixmov)\n        score = pd.Series(similar[idx]).sort_values(ascending = False)\n        top_10 = list(score.iloc[1:11].index)\n        \n        for i in top_10:\n            recommended_movies.append((Mov['title'])[i])\n            \n        return recommended_movies\n    \n    else :\n        print(\"Error! No such title found\")\n        ","ff9b6b06":"netflix_recommender('Almost Happy')","5f6bd282":"Future work : We can also use the Description column and combine it with the current recommendation egine, perhaps, we can use Tfidf on the description and enumerate to the code to take a combined score from both as the information within the description provide some insight such as adjective and keywords for viewers that attract them to watch the movie as well","177eb862":"Movie Recommendation engine\n1. your recommended engine will return maximum 10 movies name if an user search for a particular movie.\nEvaluation\n\n2. Recommended engine must return 5 movie names and maximum it can return 10 movie names if an user search for a particular movie. This recommender engine should not give suggestion in between 1 to 4 and 6 to 10 it have to return 5 movie names or 10 movie names.\n\nAnalysis\n\n1. This will be a content-based filtering which make recomemndation based on the attributes\n\n2. As a netflix binge watcher, the category are very well separated by the type, so we will want recommendation based on the type, i.e TV shows or Movies\n\n3. Since the current content involve alot of unqiue features such as director, genre, country and casts, we will use a CountVectorizer rather than a TfidfVectorizer which is meant for eliminating any repeated words. "}}