{"cell_type":{"771ee49e":"code","3162eea6":"code","2f31c22b":"code","64b5d126":"code","0b7c8911":"code","4843a739":"code","3266ed1d":"code","21540887":"code","a42423f1":"code","1922ec97":"code","4292be36":"code","a08f6b29":"code","b17e7b57":"code","13d935c5":"code","9a50e5fa":"code","1447572b":"code","085b0a86":"code","4295f03f":"code","5aafc8db":"code","a2947916":"code","e7979d88":"code","3e4bf5e5":"code","8175c0aa":"code","af978590":"code","21de04f1":"code","bda9bf37":"code","10089304":"code","fc1ebc27":"code","2e9d778e":"code","1bb68e64":"code","bc4ccec7":"code","c937061d":"code","37b43b5c":"code","a9ebe6f5":"code","76d8e6f2":"code","79817d71":"code","7d306969":"code","636ac626":"code","7307146c":"code","15d48d4b":"code","15686949":"code","0ccb35fe":"code","57a3a392":"code","07662cee":"code","f56e5b96":"code","4f3107f3":"code","58f0cc36":"code","fd676675":"code","81eea510":"code","c0051bbb":"code","723c1d0d":"code","3375bce3":"code","5a69a553":"code","80495409":"code","9a67a90f":"code","7cdff39a":"code","9ffeb802":"code","628e216d":"code","f15afec7":"code","978dfdf6":"code","cf57d5c2":"code","8c35db2c":"code","175b8a81":"code","b3764ce3":"code","122e6a09":"code","fb7d99ea":"code","5191af3b":"code","d374cbbc":"code","fbe5b9ca":"code","e8ca9e4e":"code","b022e64a":"code","7f345eed":"code","1edcc626":"code","63d08df3":"code","097c3385":"code","4d2f2ed3":"code","4ad35afb":"code","d6af3846":"code","89298670":"code","69281565":"code","52c984ad":"code","fd45fb20":"code","815b8a61":"code","ec6611d3":"code","dfc2012a":"code","dc4a336b":"code","7e1240a4":"code","c500757a":"code","247d0a32":"markdown","1eb67c78":"markdown","e2b2883d":"markdown","baeab459":"markdown","c8ea8dee":"markdown","29de4973":"markdown","ed4d4a94":"markdown","22f3558c":"markdown","56754fa3":"markdown","58c59fa7":"markdown","8bda9505":"markdown","4096c42f":"markdown","8c307027":"markdown","884e2a58":"markdown","7821c567":"markdown","b41b19d1":"markdown","f435ddfa":"markdown","7d4caac6":"markdown","506861d7":"markdown","99aa8f77":"markdown","0981c53e":"markdown","99de15d0":"markdown","21472bc1":"markdown","3a0b294b":"markdown","8b2809aa":"markdown","3f6d5eeb":"markdown","c878a901":"markdown","2c763ef7":"markdown","af8e2420":"markdown","13f4e46b":"markdown","03675f4a":"markdown","27e5f56f":"markdown","1bc0ade4":"markdown","53dae5bd":"markdown","1f645f4d":"markdown","66355a3c":"markdown","476cdf22":"markdown","97ad8313":"markdown","ed43f024":"markdown","08bd265d":"markdown","ef368451":"markdown","f0b8cebf":"markdown","1b7290ea":"markdown","8cee090a":"markdown","c74ff484":"markdown","f64b0c37":"markdown","f94ca8be":"markdown","ec73851b":"markdown"},"source":{"771ee49e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3162eea6":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","2f31c22b":"train_df.columns","64b5d126":"train_df.head()","0b7c8911":"train_df.describe()","4843a739":"train_df.info()","3266ed1d":"def bar_plot(veriable): \n    \"\"\"\n        input: veriable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get future\n    var = train_df[veriable]\n    # count number of categorical veriable(value\/sample) futurelar i\u00e7indeki kategoriler\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(veriable)\n    plt.show()\n    print(\"{}: \\n{}\".format(veriable,varValue))","21540887":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","a42423f1":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","1922ec97":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","4292be36":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","a08f6b29":"# Plcass vs Survived\n# Grupla ve ortalamas\u0131n\u0131 g\u00f6ster dedik. sonras\u0131nda survived'a g\u00f6re s\u0131ralama yapt\u0131k. (sort). A\u015fa\u011f\u0131daki analysisler i\u00e7in de ge\u00e7erli.\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)\n","b17e7b57":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False) ","13d935c5":"# Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","9a50e5fa":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","1447572b":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","085b0a86":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]\n","4295f03f":"train_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)\n","5aafc8db":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","a2947916":"train_df.head()\n","e7979d88":"#missing valuelar\u0131n hangilerinde oldu\u011funu \u00f6\u011frenelim\ntrain_df.columns[train_df.isnull().any()]\n","3e4bf5e5":"train_df.isnull().sum()\n","8175c0aa":"train_df[train_df[\"Embarked\"].isnull()]\n","af978590":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","21de04f1":"#embarked de\u011ferleri fare de\u011ferine bakarsak c ye en yak\u0131n. yukarda da g\u00f6r\u00fcn\u00fcyor.\ntrain_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","bda9bf37":"train_df[train_df[\"Fare\"].isnull()]\n","10089304":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))\n","fc1ebc27":"train_df[train_df[\"Fare\"].isnull()]\n","2e9d778e":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","1bb68e64":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","bc4ccec7":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","c937061d":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","37b43b5c":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","a9ebe6f5":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","76d8e6f2":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","79817d71":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","7d306969":"train_df[train_df[\"Age\"].isnull()]","636ac626":"# cinsiyetle ya\u015ftaki bo\u015fluklar\u0131 doldurabilir miyiz? Bunu inceleyece\u011fiz.\nsns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","7307146c":"# yolcu s\u0131n\u0131flar\u0131n\u0131n ya\u015f\u0131 doldurabilmek i\u00e7in ya\u015fla ilgisine bakaca\u011f\u0131z.\nsns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","15d48d4b":"# ebeveyn ve \u00e7ocuklar\u0131n ya\u015f\u0131 doldurabilmek i\u00e7in ya\u015f ile ilgisine bakaca\u011f\u0131z\nsns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","15686949":"# train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","0ccb35fe":"# Bu \u00f6zelliklerin hepsinin korelasyonuna bak\u0131yoruz\nsns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","57a3a392":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","07662cee":"train_df[train_df[\"Age\"].isnull()]","f56e5b96":"train_df[\"Name\"].head(10)","4f3107f3":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","58f0cc36":"train_df[\"Title\"].head(10)","fd676675":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","81eea510":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","c0051bbb":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","723c1d0d":"#yukarda yaratt\u0131\u011f\u0131m\u0131z kategorilerin hayatta kalma oranlar\u0131\ng = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","3375bce3":"#machine learningde name i kullanamayaca\u011f\u0131z. bu y\u00fczden \u00e7\u0131kart\u0131yoruz. Title yeterli.\ntrain_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","5a69a553":"train_df.head()","80495409":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","9a67a90f":"train_df.head()","7cdff39a":"#bu iki feature'\u0131 birle\u015ftirip family size elde edece\u011fiz.\ntrain_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1 # +1 deme sebebimiz 0 ki\u015filik aile olmaz. Bireyin kendisini say\u0131yoruz yani bu feature'da 0 yok.","9ffeb802":"train_df.head()","628e216d":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","f15afec7":"# 2 tane kategori yapaca\u011f\u0131z. 4.5 dan kk\u00fc\u00e7\u00fckler bir kategori 4.5 dan b\u00fcy\u00fckler ayr\u0131 kategori. Bu daha iyi g\u00f6rmemizi sa\u011flayacak.\ntrain_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","978dfdf6":"train_df.head(10)","cf57d5c2":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","8c35db2c":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","175b8a81":"#family size'i 2 ye b\u00f6lece\u011fiz daha da a\u00e7\u0131k g\u00f6rebilmek i\u00e7in.\ntrain_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","b3764ce3":"train_df[\"Embarked\"].head()","122e6a09":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","fb7d99ea":"# 3 e b\u00f6l\u00fcyoruz.\ntrain_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","5191af3b":"# ba\u015flarda bi A\/5 var. 2. tarafta bulanan say\u0131lar e\u015fsiz. Ba\u015fta bulunan say\u0131lar birbirlerini tekrarl\u0131yor.\n# Burdaki ba\u015ftaki yaz\u0131lar\u0131 sondakilerden ay\u0131r\u0131caz. E\u011fer hi\u00e7bi\u015fey yoksa x verece\u011fiz.\ntrain_df[\"Ticket\"].head(20)","d374cbbc":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","fbe5b9ca":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","e8ca9e4e":"train_df[\"Ticket\"].head(20)","b022e64a":"train_df.head()","7f345eed":"# Ticketlar\u0131 kategorik hale getiriyoruz.\ntrain_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","1edcc626":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","63d08df3":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","097c3385":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","4d2f2ed3":"#Machine learningde kullanamayca\u011f\u0131m\u0131z \u015feyleri drop ediyoruz.\ntrain_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","4ad35afb":"train_df.columns","d6af3846":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","89298670":"train_df_len","69281565":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)\n","52c984ad":"test.head()","fd45fb20":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","815b8a61":"logreg = LogisticRegression()\nlogreg = LogisticRegression(C=1, penalty='l1', solver='liblinear')\nlogreg.fit(X_train, y_train) # fit edip e\u011fitiyoruz\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) # x train datam\u0131n nas\u0131l e\u011ftildi\u011fine bak\u0131yoruz \nacc_log_test = round(logreg.score(X_test,y_test)*100,2) # test datamda kontrol\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","ec6611d3":"random_state = 42 # buna fix 42 yazaca\u011f\u0131z. yoksa farkl\u0131 sonu\u00e7lar gelir.\nclassifier = [DecisionTreeClassifier(random_state = random_state), \n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","dfc2012a":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","dc4a336b":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","7e1240a4":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","c500757a":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","247d0a32":"<a id = \"34\"><\/a><br>\n## Prediction and Submission","1eb67c78":"<a id = \"8\"><\/a><br>**\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","e2b2883d":"Cinsiyet, ya\u015f tahmini i\u00e7in bilgilendirici de\u011fildir, ya\u015f da\u011f\u0131l\u0131m\u0131 ayn\u0131 g\u00f6r\u00fcnmektedir.","baeab459":"<a id = \"7\"><\/a><br>\n# Outlier Detection\n* Outlier detection \u00f6nemlidir. \u00c7\u00fcnk\u00fc veriyi bozan ayr\u0131k de\u011ferlerden bizi kurtar\u0131r. Bazen di\u011fer verilerden \u00e7ok b\u00fcy\u00fck ve \u00e7ok k\u00fc\u00e7\u00fck veriler olabilir. Bunlar verilerin ortalamas\u0131n\u0131 bir anda artt\u0131r\u0131p azaltabildi\u011fi i\u00e7in verinin b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc bozar.","c8ea8dee":"* Embarked has 2 missing value\n* Fare has only 1","29de4973":"<a id = \"25\"><\/a><br>\n## Ticket","ed4d4a94":"<a id = \"26\"><\/a><br>\n## Pclass","22f3558c":"<a id = \"20\"><\/a><br>\n## Fill Missing: Age Feature\nAge feature'\u0131nda bulunan bo\u015fluklar\u0131 dolduraca\u011f\u0131z. Asl\u0131nda di\u011fer \u00f6zelliklere g\u00f6re ortalama bir \u015feyler bulup ona g\u00f6re dolduraca\u011f\u0131z.","56754fa3":"<a id = \"23\"><\/a><br>\n## Family Size\naile i\u00e7inde 2 tane feature'\u0131m\u0131z vard\u0131. Parch ve SibSp","58c59fa7":"<a id = \"2\"><\/a><br>\n# Veriable Description\n1. PassengerId : unique id number to each passenger ->  Yolcular\u0131n numaras\u0131\n2. Survived : passenger survive(1) or died(0) -> \u00d6nemli. i\u00e7inde 0 ve 1 leri bar\u0131nd\u0131r\u0131r. \n3. Pclass : passenger class -> Yolcular\u0131n s\u0131n\u0131flar\u0131\n4. Name : name -> isim\n5. Sex : gender of passenger -> cinsiyetleri belirtir\n6. Age : age of passenger -> ya\u015f\n7. SibSp : number of sblings\/spouses -> Karde\u015fler ve e\u015fler(kar\u0131-koca)\n8. Parch : number of parents\/children -> Ebeveyn ve \u00e7ocuk\n9. Ticket : ticket number -> Bilet numaras\u0131\n10. Fare : amount of money spent on ticket -> Bileti almak i\u00e7in \u00f6denen para\n11. Cabin : cabin category -> Oda kabin numaras\u0131\n12. Embarked : port where passenger embarked (C = Cherbourg, Q = Queenstwon, S = Southampton) -> Gemiye hangi limandan bindi\u011fi\n   ","8bda9505":"<a id = \"5\"><\/a><br>\n## Numerical Veriable Analysis","4096c42f":"<a id = \"24\"><\/a><br>\n## Embarked\nYolcular\u0131m\u0131z\u0131n nerden bindi\u011fiyle ilgili \u00f6zellikler yapaca\u011fiz.","8c307027":"* pclass model e\u011fitimi i\u00e7in \u00f6nemli bir \u00f6zelliktir.\n","884e2a58":"<a id = \"14\"><\/a><br>\n## Parch -- Survived\nEbeveyn ve \u00e7ocuk say\u0131s\u0131n\u0131n hayatta kalma ile ili\u015fkisi","7821c567":"<a id = \"17\"><\/a><br>\n## Pclass -- Survived -- Age\nYolcular\u0131n s\u0131n\u0131f\u0131 ve ya\u015f\u0131n\u0131n hayatta kalma ile ili\u015fkisi","b41b19d1":"* Sibsp ve parch, th = 3 ile yeni \u00f6zellik \u00e7\u0131kar\u0131m\u0131 i\u00e7in kullan\u0131labilir\n* K\u00fc\u00e7\u00fck ailelerin hayatta kalma \u015fans\u0131 daha fazlad\u0131r.\n* parch = 3 olan yolcunun hayatta kalmas\u0131nda bir std var. Yani 0.2 ile 1.0 aras\u0131nda de\u011fi\u015fkenlik var. B\u00fcy\u00fck aral\u0131k yani.\n\n\n","f435ddfa":"* Kad\u0131n yolcular\u0131n hayatta kalma oran\u0131 erkeklere g\u00f6re \u00e7ok daha y\u00fcksektir.\n* Erkekler, C liman\u0131nda y\u00fcksek hayatta kalm\u0131\u015f. Erkekler pclass 3'te di\u011fer pclasslara g\u00f6re daha az hayatta kalma oran\u0131na sahiptir.\n* E\u011fitimde liman ve cinsiyet kullan\u0131lacakt\u0131r.\n","7d4caac6":"<a id = \"30\"><\/a><br>\n## Train - Test Split","506861d7":"<a id = \"4\"><\/a><br>\n## Categorical Veriable","99aa8f77":"<a id = \"33\"><\/a><br>\n## Ensemble Modeling","0981c53e":"<a id = \"21\"><\/a><br>\n# Feature Engineering\nFarkl\u0131 featurelar\u0131 kullanarak yeni featurelar t\u00fcretece\u011fiz hem de mevcut featurelar\u0131 daha farkl\u0131 yorumlayaca\u011f\u0131z.","99de15d0":"1. s\u0131n\u0131f yolcular 2. s\u0131n\u0131ftan, 2. s\u0131n\u0131f yolcular 3. s\u0131n\u0131ftan daha ya\u015fl\u0131d\u0131r. Bu kullan\u0131labilecek bir \u00f6zellik.\n","21472bc1":"<a id = \"10\"><\/a><br>\n## Fill Missing Value","3a0b294b":"<a id = \"15\"><\/a><br>\n## Pclass -- Survived\nYolcular\u0131n s\u0131n\u0131flar\u0131 ile hayatta kalmalar\u0131 aras\u0131ndaki ili\u015fki","8b2809aa":"* ya\u015f <= 10 y\u00fcksek bir hayatta kalma oran\u0131na sahiptir.\n* en ya\u015fl\u0131 yolcular (80) hayatta kalm\u0131\u015f.\n* 20 ya\u015f\u0131ndaki \u00e7ok say\u0131da ki\u015fi hayatta kalamam\u0131\u015f.\n* \u00e7o\u011fu yolcu 15-35 ya\u015f aral\u0131\u011f\u0131ndad\u0131r,\n* machine learning modeli e\u011fitimde ya\u015f \u00f6zelli\u011fini kullanabiliriz.\n* eksik ya\u015f de\u011feri i\u00e7in ya\u015f da\u011f\u0131l\u0131m\u0131n\u0131 kullmal\u0131y\u0131z(missing value)\n","3f6d5eeb":"Ya\u015f cinsiyetle de\u011fil, parch, sibsp ve pclass ile ili\u015fkilidir.","c878a901":"Fare feature seems to have correlation with survived feature (0.26). -> Fare ile survived do\u011fru orant\u0131l\u0131. Ancak bu yeterli de\u011fil daha detayl\u0131 yap\u0131caz.\n","2c763ef7":"<a id = \"27\"><\/a><br>\n## Sex","af8e2420":"<a id = \"22\"><\/a><br>\n## Name -- Title\nName featurelar\u0131n\u0131 kullanarak yeni \u015feyler yapaca\u011f\u0131z.","13f4e46b":"<a id = \"18\"><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived\nGemiye hangi limandan bindi\u011fi, cinsiyet ve yolcu s\u0131n\u0131f\u0131 aras\u0131ndaki hayatta kalma ili\u015fkisi","03675f4a":"<a id = \"16\"><\/a><br>\n## Age -- Survived\nYa\u015f ile hayatta kalma aras\u0131ndaki ili\u015fki","27e5f56f":"# Content\n1. [Load and check data](#1)\n2. [Veriable description](#2)\n   * [Univarite Veriable Analysis](#3)\n     * [Categorical Veriable](#4)\n     * [Numerical Veriable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outliear Detection](#7)\n5. [Missing Value](#8)\n   * [Find Missing Value](#9)\n   * [Fill Missing Value](#10)\n6. [Visualization](#11)   \n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n7. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n8. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32) \n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)    ","1bc0ade4":"<a id = \"13\"><\/a><br>\n## SibSp -- Survived\nKarde\u015fler yada e\u015fler ile hayatta kalman\u0131n ilgisi var m\u0131 bunu inceliyoruz.","53dae5bd":"K\u00fc\u00e7\u00fck ailelerin hayatta kalma \u015fans\u0131, b\u00fcy\u00fck ailelere g\u00f6re daha fazlad\u0131r.\n","1f645f4d":"<a id = \"1\"><\/a><br>\n# Load and Check Data","66355a3c":"* float64(2) : Fare and Age\n* int64(5) : Pclass, sibsp, parch, passengerId and survived\n* object(5) : Cabin, embarked, ticket, name and sex","476cdf22":"<a id = \"9\"><\/a><br>\n## Find Missing Value\n","97ad8313":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Birbirleri aras\u0131ndaki ili\u015fkiler incelenecek\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","ed43f024":"\n* Daha y\u00fcksek \u00fccret \u00f6deyen yolcular daha y\u00fcksek oranda hayatta kal\u0131r. \u00dccret, e\u011fitim i\u00e7in kategorik olarak kullan\u0131labilir.","08bd265d":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n* 5 farkl\u0131 machine learning modelini kar\u015f\u0131la\u015ft\u0131raca\u011f\u0131z. Bunlar\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131rken ayn\u0131 zamanda bu modellerdeki en iyi parametreleri arayaca\u011f\u0131z. Bunu ararken Grid search kullanaca\u011f\u0131z. Buldu\u011fumuz parametrelerin en iyi de\u011ferlerini kar\u015f\u0131la\u015ft\u0131r\u0131rken de cross validation kullanaca\u011f\u0131z. \n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","ef368451":"Yolcular en pahal\u0131 s\u0131n\u0131fta daha \u00e7ok hayatta kalm\u0131\u015flar. Fiyat d\u00fc\u015ft\u00fck\u00e7e hayatta kalma d\u00fc\u015f\u00fcyor.","f0b8cebf":"<a id = \"31\"><\/a><br>\n## Simple Logistic Regression","1b7290ea":"<a id = \"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- Survived\nLiman cinsiyet ve bilet fiyat\u0131n\u0131n hayatta kalma ile ili\u015fkisi","8cee090a":"<a id = \"28\"><\/a><br>\n## Drop Passenger ID and Cabin ","c74ff484":"<a id = \"29\"><\/a><br>\n# Modeling","f64b0c37":"<a id = \"3\"><\/a><br>\n# Univarite Veriable Analysis\n* Categorical Veriable Analysis: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch -> 2 veya daha fazla kategoriden olu\u015fan veriler. Ka\u00e7 tane kategoriye sahip oldu\u011funu \u00f6\u011frenebilmek i\u00e7in bu analizi yap\u0131yoruz.\n* Numerical Veriable Analysis: Age, PassengerId and Fare -> Say\u0131lardan olu\u015fan veriablellar. \u0130nsanlar\u0131n farkl\u0131 verileri olabilir. Sabit kategoriler bulunmaz","f94ca8be":"<a id = \"12\"><\/a><br>\n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","ec73851b":"* E\u011fer 2 den fazla karde\u015f yada e\u015f durumu varsa hayatta kalma azal\u0131yor. \n* sibsp == 0 veya 1 veya 2 ise, yolcunun hayatta kalma \u015fans\u0131 daha fazlad\u0131r.\n* Bu kategorileri a\u00e7\u0131klayan yeni bir \u00f6zellik d\u00fc\u015f\u00fcnebiliriz. Machine learning'de i\u015fe yarayabilir."}}