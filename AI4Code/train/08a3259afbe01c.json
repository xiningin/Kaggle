{"cell_type":{"d7038c14":"code","f56e9d0d":"code","3d34f1c3":"code","69576061":"code","c2638614":"code","7a549ecb":"code","45e0d5c2":"code","37bdf6f9":"code","2165a783":"code","98bfe9e3":"code","983c669d":"code","e91dc184":"code","00628ac9":"code","eb158de2":"code","54d38a46":"code","b473a15e":"code","7f91676c":"code","6c4a676d":"code","8483323d":"code","c64f67c9":"code","284e0b18":"code","6586b1f1":"code","34ff5d8b":"code","bce4ff44":"code","488e8321":"code","4c29c871":"code","cd1f57d2":"code","8f1367a0":"code","c874a837":"code","1c213bab":"code","fb9ca4c4":"code","cdad268d":"code","c4acd045":"code","82eb2d7f":"code","77b2320a":"code","a6e9f4aa":"code","88709875":"code","620c8924":"code","a5462877":"code","964c57a6":"code","3560a8e3":"code","d847f232":"code","924a1841":"code","a3a482ac":"code","13751b9a":"code","740301d4":"code","fe730831":"code","3196940d":"markdown","088085ba":"markdown","cfc36a5b":"markdown","1c9126b7":"markdown","05aee204":"markdown","2776e707":"markdown","75360249":"markdown","03b52a51":"markdown","d68e5eaa":"markdown","7be67439":"markdown","c7320e27":"markdown","a89b1c62":"markdown","5c8f29f4":"markdown","c278ce38":"markdown","ddb41d89":"markdown","bbc745bf":"markdown","21fef079":"markdown","29defb87":"markdown","b5fc52a7":"markdown","485a7712":"markdown","99929415":"markdown","422d2121":"markdown","bb53d9e8":"markdown","22e58aac":"markdown","1c8ec56f":"markdown","7d024ada":"markdown","4ecc52d8":"markdown","13ef95e2":"markdown","d58be47d":"markdown","6efed20c":"markdown","18f7e3f7":"markdown","53a647b7":"markdown","1b68b1ef":"markdown","b7aaa0d9":"markdown","cd15231f":"markdown","87b71b8e":"markdown","e7853eff":"markdown"},"source":{"d7038c14":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt","f56e9d0d":"df = pd.read_csv(\"..\/input\/blore_apartment_data.csv\")","3d34f1c3":"df.head()","69576061":"df.isnull().values.any()","c2638614":"df.isnull().sum()","7a549ecb":"df = df.dropna(how='any',axis=0)","45e0d5c2":"df['Price'].value_counts()","37bdf6f9":"PriceList = list(df['Price'])","2165a783":"def sep(li):\n    newli1=[]\n    newli2=[]\n    for i in range(len(li)):\n        text = li[i]\n        head, sep, tail = text.partition('-')\n        newli1.append(head)\n        newli2.append(tail)\n    return newli1,newli2","98bfe9e3":"Min,Max= sep(PriceList)","983c669d":"def Converter(li):\n    newli=[]\n    for i in range(len(li)):\n        if 'L' in li[i]:\n            text = li[i]\n            li[i] = li[i].replace('L',' ')\n            li[i] = float(li[i])\n            li[i] = li[i]*100000\n            li[i] = int(li[i])\n            newli.append(li[i])\n            li[i] = str(li[i])\n        elif 'K' in li[i]:\n            text = li[i]\n            li[i] = li[i].replace('K',' ')\n            li[i] = float(li[i])\n            li[i] = li[i]*1000\n            li[i] = int(li[i])\n            newli.append(li[i])\n            li[i] = str(li[i])\n        elif 'Cr' in li[i]:\n            text = li[i]\n            li[i] = li[i].replace('Cr',' ')\n            li[i] = float(li[i])\n            li[i] = li[i]*10000000\n            li[i] = int(li[i])\n            newli.append(li[i])\n            li[i] = str(li[i])\n        else:\n            newli.append(li[i])\n    return newli","e91dc184":"MinRange = Converter(Min)\nMaxRange = Converter(Max)     ","00628ac9":"df['MinRange'] = MinRange\ndf['MaxRange'] = MaxRange","eb158de2":"df[[\"MinRange\", \"MaxRange\"]] = df[[\"MinRange\", \"MaxRange\"]].apply(pd.to_numeric)","54d38a46":"col = df.loc[: , \"MinRange\":\"MaxRange\"]\ndf['AveragePrice'] = col.mean(axis=1)","b473a15e":"df = df.drop(['MaxRange','MinRange','Price'], axis=1)","7f91676c":"df.head()","6c4a676d":"def AreaConverter(li):\n    newli=[]\n    for i in range(len(li)):\n        if 'sq.ft' in li[i]:\n            text = li[i]\n            li[i] = li[i].replace('sq.ft','')\n            newli.append(li[i])\n        else:\n            newli.append(li[i])\n    return newli","8483323d":"AreaList = list(df['Area'])\nAreaWithoutUnit = AreaConverter(AreaList)","c64f67c9":"AreaWithoutUnit ","284e0b18":"Min,Max= sep(AreaWithoutUnit)","6586b1f1":"df['MinArea'] = Min\ndf['MaxArea'] = Max","34ff5d8b":"df['AverageArea'] = df[['MinArea','MaxArea']].mean(axis=1)","bce4ff44":"df = df.drop(['MinArea','MaxArea','Area'], axis=1)","488e8321":"df.head()","4c29c871":"UnitTypeList= list(df['Unit Type'])","cd1f57d2":"def BHK(li):\n    newli = []\n    for i in range(len(li)):\n        if 'Plot' in li[i]:\n            li[i] = str(\"0 Not:BHK\/RK \") + li[i]\n            newli.append(li)\n        else:\n            newli.append(li)\n    return newli","8f1367a0":"BHK1 = BHK(UnitTypeList)","c874a837":"def Unitsep(li):\n    newli1=[]\n    newli2=[]\n    for i in range(len(li)):\n        text = li[i]\n        head, sep, tail = text.partition(' ')\n        newli1.append(head+sep)\n        newli2.append(tail)\n    return newli1,newli2","1c213bab":"NoUnitType,Uni2 = Unitsep(UnitTypeList)\nBHKorRK,UnitType1 = Unitsep(Uni2)","fb9ca4c4":"df['UnitNo'] = NoUnitType\ndf['BHKorRK'] = BHKorRK\ndf['UnitType']= UnitType1","cdad268d":"df = df[df.UnitNo != 'Studio ']\ndf= df[df.UnitNo != 'Apartment']\ndf= df[df.UnitType != 'BHK Apartment']","c4acd045":"df = df.drop(['Unit Type'], axis=1)","82eb2d7f":"df.head()","77b2320a":"df['UnitNo'].value_counts()","a6e9f4aa":"df = df.replace('4+ ','4.5')\ndf.UnitNo = df.UnitNo.astype(float)\ndf['UnitNo'].value_counts()","88709875":"df.head()","620c8924":"dataset = df[['names','UnitNo','BHKorRK','UnitType','AverageArea','AveragePrice']]","a5462877":"dataset.head()","964c57a6":"X = dataset.iloc[:, 4:5].values\ny = dataset.iloc[:, 5:].values","3560a8e3":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","d847f232":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","924a1841":"y_pred = regressor.predict(X_test)","a3a482ac":"plt.scatter(X_train, y_train, color = 'red')\nplt.plot(X_train, regressor.predict(X_train), color = 'blue')\nplt.title('Price vs Area (Training set)')\nplt.xlabel('Area')\nplt.ylabel('Price')\nplt.show()","13751b9a":"plt.scatter(X_test, y_test, color = 'red')\nplt.plot(X_train, regressor.predict(X_train), color = 'blue')\nplt.title('Price vs Area (Test set)')\nplt.xlabel('Area')\nplt.ylabel('Price')\nplt.show()","740301d4":"from sklearn.metrics import r2_score","fe730831":"r2_score(y_test, y_pred)","3196940d":"Removing the Minimum Range, Maximum Range and Price column from the dataframe","088085ba":"Checking for null values","cfc36a5b":"Convert them into numeric type ","1c9126b7":"Check Price Columns","05aee204":"Changing record '4+' into '4' for calculation","2776e707":"Adding these columns in the dataset","75360249":"Removing nulls from all columns","03b52a51":"Dropping the columns","d68e5eaa":"User defined function to remove L,Cr & K, and add respective numbers so further calculation can be done","7be67439":"User defined function for removing the '-' between the values and save it into two lists.","c7320e27":"Removing addition values to the columns","a89b1c62":"Extracting minimum & maximum range from Area list using function 'sep'","5c8f29f4":"Taking the mean of Minimum & Maximum Range and adding new column to the dataframe named Average Price","c278ce38":"Have a look at dataset","ddb41d89":"User defined function for adding not bhk\/Rk, if its value is \"plot\"","bbc745bf":"Splitting the dataset into the Training set and Test set","21fef079":"Converting Area column into list, and list is the parameter in the defined function","29defb87":"Converting the UnitType into List ","b5fc52a7":"Adding the columns to the dataframe","485a7712":"Extracting the values from UnitType list","99929415":"Removing Unit Type Column","422d2121":"X_train = X_train.reshape(1,-1)\ny_train = y_train.reshape(1,-1)\n","bb53d9e8":"Linear Regression","22e58aac":"To remove units, and further manipulation,converting column into list","1c8ec56f":"Have a look at dataset","7d024ada":"Now, Removing Area Column's Unit sq.ft for calculations, for this a function is defined.","4ecc52d8":"\nFitting Simple Linear Regression to the Training set","13ef95e2":"Importing the libraries","d58be47d":" Checking how many null are in the columns","6efed20c":"Adding these two list to the dataframe","18f7e3f7":"Taking the mean of these ranges and assign it to a new column named AverageArea","53a647b7":"Using the variables AverageArea and AveragePrice for simple linear regression","1b68b1ef":"Have a look at AreaWithoutUnit ","b7aaa0d9":"Importing the dataset","cd15231f":"Predicting the Test set results","87b71b8e":"Now have a look at the dataset","e7853eff":"Now have a look at dataframe"}}