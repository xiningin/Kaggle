{"cell_type":{"2e7edbe7":"code","ea42c289":"code","d62161c8":"code","b738b651":"code","0eb7a4f3":"code","e81f87ed":"code","518751eb":"code","f4e16cd5":"code","c35fba6a":"code","7de8ff8f":"code","55bdae5a":"code","0f06fc06":"code","3a2b55f2":"code","9c90807c":"code","c14ec59f":"code","0210ed88":"markdown","56ef844c":"markdown","6d32d24d":"markdown","5d4cf26f":"markdown"},"source":{"2e7edbe7":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, LSTM, GRU, Bidirectional, SimpleRNN\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\nimport numpy as np","ea42c289":"(X_train, y_train), (X_test, y_test) = mnist.load_data()","d62161c8":"X_train, X_test = X_train.astype('float32') \/ 255, X_test.astype('float32') \/ 255","b738b651":"time_step = 28\nfeatures = 28\nrnn = Sequential([\n    SimpleRNN(512, input_shape=(None,features), return_sequences=True, activation='relu'),\n    SimpleRNN(512, activation='relu'),\n    Dense(10, activation='softmax')  \n    ])\nrnn.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","0eb7a4f3":"rnn.summary()","e81f87ed":"# Callbacks\ncheckpts = ModelCheckpoint('.\/Simplernn.h5', verbose=1, save_best_only=True)\nearly = EarlyStopping(patience=5)\ncallback_list = [checkpts, early]","518751eb":"rnn.fit(X_train, y_train, validation_split=.2, verbose=1, batch_size=64, epochs=100, callbacks=callback_list)","f4e16cd5":"rnn.evaluate(X_test, y_test)","c35fba6a":"gru = Sequential([\n    GRU(256, input_shape=(time_step,features), return_sequences=True, activation='relu'),\n    GRU(256, activation='relu'),\n    Dense(10, activation='softmax')  \n    ])\ngru.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\ngru.summary()\n# Callbacks\ncheckpts = ModelCheckpoint('.\/GRU.h5', verbose=1, save_best_only=True)\nearly = EarlyStopping(patience=5)\ncallback_list = [checkpts, early]","7de8ff8f":"gru.fit(X_train, y_train, validation_split=.2, verbose=1, batch_size=64, epochs=30, callbacks=callback_list)\ngru.evaluate(X_test, y_test)","55bdae5a":"lstm = Sequential([\n    LSTM(256, input_shape=(time_step,features), return_sequences=True, activation='relu'),\n    LSTM(256, activation='relu'),\n    Dense(10, activation='softmax')  \n    ])\nlstm.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nlstm.summary()\n# Callbacks\ncheckpts = ModelCheckpoint('.\/lstm.h5', verbose=1, save_best_only=True)\nearly = EarlyStopping(patience=5)\ncallback_list = [checkpts, early]","0f06fc06":"lstm.fit(X_train, y_train, validation_split=.2, verbose=1, batch_size=64, epochs=30, callbacks=callback_list)\nlstm.evaluate(X_test, y_test)","3a2b55f2":"bilstm = Sequential([\n    Bidirectionaltional(LSTM(256, input_shape=(time_step,features), return_sequences=True, activation='relu')),\n    Bidirectional(LSTM(256, activation='relu')),\n    Dense(10, activation='softmax')  \n    ])\nbilstm.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nbilstm.summary()\n# Callbacks\ncheckpts = ModelCheckpoint('.\/bilstm.h5', verbose=1, save_best_only=True)\nearly = EarlyStopping(patience=5)\ncallback_list = [checkpts, early]","9c90807c":"bilstm.fit(X_train, y_train, validation_split=.2, verbose=1, batch_size=64, epochs=30, callbacks=callback_list)\nbilstm.evaluate(X_test, y_test)","c14ec59f":"a = np.random.choice(len(X_test))\nnp.argmax(bilstm.predict(X_test[a:a+1])), np.argmax(lstm.predict(X_test[a:a+1])), np.argmax(rnn.predict(X_test[a:a+1])),\\\nnp.argmax(gru.predict(X_test[a:a+1])),y_test[a]","0210ed88":"# Simple RNN","56ef844c":"# LSTM","6d32d24d":"# GRU","5d4cf26f":"# Bidirectional LSTM"}}