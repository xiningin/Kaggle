{"cell_type":{"6026ce32":"code","522829b8":"code","531edc00":"code","ae2e411b":"code","3dd8eaef":"code","8ef0a68a":"code","14d2fd0c":"code","73b035ef":"markdown","a2a14540":"markdown","fc07a5ad":"markdown","17bfb2cb":"markdown"},"source":{"6026ce32":"!pip install pychesscom","522829b8":"import pandas as pd\nimport re\nfrom datetime import datetime\n\nfrom pychesscom import ChessComClient\n","531edc00":"## get all WGM usernames\nclient = ChessComClient()\n\nwgm_usernames_response = await client.player.get_titled_players('WGM')\nwgm_usernames = wgm_usernames_response.content['players']\nprint(wgm_usernames)\n","ae2e411b":"## new month details\nyear = 2021\nmonth = 2\n\ngame_id = []\ngame_url = []\npgn = []\ntime_control = []\nend_time = []\nrated = []\ntime_class = []\nrules = []\nwgm_username = []\nwhite_username = []\nwhite_rating = []\nwhite_result = []\nblack_username = []\nblack_rating = []\nblack_result = []\n\n## iterating over WGM usernames\nfor username in wgm_usernames:\n    wgm_games_response = await client.player.get_games(username, year, month)\n    wgm_games = wgm_games_response.content['games']\n\n    # iterating over WGM's games\n    if len(wgm_games) > 0:\n        for game in wgm_games:\n            # add dataset feature values\n            if 'pgn' not in game.keys():\n                game['pgn'] = ''\n\n            game_id.append(re.sub('https:\/\/www.chess.com\/live\/game\/', '', game['url']))\n            game_url.append(game['url'])\n            pgn.append(game['pgn'])\n            time_control.append(game['time_control'])\n            end_time.append(datetime.fromtimestamp(int(game['end_time'])).strftime('%Y-%m-%d %H:%M:%S'))\n            rated.append(game['rated'])\n            time_class.append(game['time_class'])\n            rules.append(game['rules'])\n            wgm_username.append(username)\n            white_username.append(game['white']['username'])\n            white_rating.append(game['white']['rating'])\n            white_result.append(game['white']['result'])\n            black_username.append(game['black']['username'])\n            black_rating.append(game['black']['rating'])\n            black_result.append(game['black']['result'])\n\nnew_data = pd.DataFrame({\n    'game_id': game_id,\n    'game_url': game_url,\n    'pgn': pgn,\n    'time_control': time_control,\n    'end_time': end_time,\n    'rated': rated,\n    'time_class': time_class,\n    'rules': rules,\n    'wgm_username': wgm_username,\n    'white_username': white_username,\n    'white_rating': white_rating,\n    'white_result': white_result,\n    'black_username': black_username,\n    'black_rating': black_rating,\n    'black_result': black_result\n})\n\nnew_data\n","3dd8eaef":"## current dataset\ncurrent_dataset = pd.read_csv('..\/input\/chess-games-of-woman-grandmasters\/games_wgm.csv')\n\ncurrent_dataset\n","8ef0a68a":"## updated dataset\nupdated_dataset = pd.concat([current_dataset, new_data], ignore_index = True)\n\nupdated_dataset\n","14d2fd0c":"updated_dataset.to_csv('games_wgm.csv', index = False)\n","73b035ef":"## PyChessCom\nData is extracted using [pychesscom](https:\/\/github.com\/vopani\/pychesscom) package.   \nDocumentation: https:\/\/pychesscom.readthedocs.io\/\n","a2a14540":"## Update Data\nAdding the new data to the existing dataset and saving it.\n","fc07a5ad":"## Dataset Update\nThis notebook shows how the [Chess Games of Woman Grandmasters](https:\/\/www.kaggle.com\/rohanrao\/chess-games-of-woman-grandmasters) dataset is updated.\n\nSince chess games are added each month, the data of a new month is fetched and added to the already existing dataset.\n","17bfb2cb":"## New Data\nLet's first prepare data for a new month.\n"}}