{"cell_type":{"ecb0c7e0":"code","9770bf62":"code","9b413930":"code","1f6aeceb":"code","753cf848":"code","a97a60ce":"code","98a59df4":"code","9ff4bebf":"code","29fbf8a7":"markdown","ff733e01":"markdown","3e5226d4":"markdown","0454acda":"markdown"},"source":{"ecb0c7e0":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import GridSearchCV,train_test_split,cross_val_score\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.preprocessing import minmax_scale\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9770bf62":"df=pd.read_csv('\/kaggle\/input\/graduate-admissions\/Admission_Predict.csv')\ndf.head(3)","9b413930":"def first_look(df):\n    print('dataset shape: ',df.shape)\n    print('dataset columns\\n')\n    print('-'*15)\n    print(df.columns)\n    print('data-type of each column: ')\n    print('-'*15)\n    print(df.dtypes)\n    print('column distributions %:')\n    for i in df.columns:\n        print(i)\n        print('-'*10)\n        print(df[i].value_counts(normalize=True)*100)\n    print('missing columns is : \\n')\n    c=df.isnull().sum()\n    print(c[c>0])","1f6aeceb":"first_look(df)","753cf848":"all_x=df\nall_y=df['Chance of Admit ']\nall_x.drop(['Chance of Admit ','Serial No.'],axis=1,inplace=True)\nprint('it is Done!')","a97a60ce":"def change_col_names(df):\n    for i in df.columns:\n        changer=i.strip().lower().replace(' ','_')\n        df.rename(columns={i:changer},inplace=True)\nchange_col_names(all_x)","98a59df4":"lst=['gre_score','toefl_score','sop','lor','cgpa']\ndef rescale(data,cols_lst):\n    for i in cols_lst:\n        data[i]=(data[i]-data[i].min())\/(data[i].max()-data[i].min())\n    return data\nrescale(all_x,lst)","9ff4bebf":"def select_model(x,y):\n    models=[{\n        'name':'LinearRegression',\n        'estimator':LinearRegression(),\n        'hyperparameters':{\n        }\n    },\n    {\n        'name':'RandomForestRegressor',\n        'estimator':RandomForestRegressor(),\n        'hyperparameters':{\n            \"n_estimators\": [4, 6, 9],\n            \"max_depth\": [2, 5, 10],\n            \"max_features\": [\"log2\", \"sqrt\"],\n            \"min_samples_leaf\": [1, 5, 8],\n            \"min_samples_split\": [2, 3, 5]\n    }},\n    {\n        'name':'ExtermeGradientBoost',\n        'estimator':XGBRegressor(),\n        'hyperparameters':{\n            'n_estimators':[800,1000],\n            'learning_rate':[0.05],\n            'n_jobs':[5]\n        }\n    }    \n        \n    ]\n    for i in models:\n        print(i['name'])\n        grid=GridSearchCV(i['estimator'],param_grid=i['hyperparameters'],cv=10,scoring='neg_mean_absolute_error')\n        grid.fit(x,y)\n        i[\"best_params\"] = grid.best_params_\n        i[\"best_score\"] = grid.best_score_\n        i[\"best_model\"] = grid.best_estimator_\n        print(\"Best Score: {}\".format(i[\"best_score\"]))\n        print(\"Best Parameters: {}\\n\".format(i[\"best_params\"]))\n\n    return models\n\nresult = select_model(all_x,all_y)","29fbf8a7":"<h1>model Selection<h1>","ff733e01":"<h1>First Look<\/h1>","3e5226d4":"<p>The dataset contains several parameters which are considered important during the application for Masters Programs. The parameters included are : 1. GRE Scores ( out of 340 ) 2. TOEFL Scores ( out of 120 ) 3. University Rating ( out of 5 ) 4. Statement of Purpose and Letter of Recommendation Strength ( out of 5 ) 5. Undergraduate GPA ( out of 10 ) 6. Research Experience ( either 0 or 1 ) 7. Chance of Admit ( ranging from 0 to 1 )<\/p>","0454acda":"<h1>Preprocessing the Data<\/h1>"}}