{"cell_type":{"5f9eb89e":"code","9ad23cb4":"code","0708f02e":"code","024fc1d3":"code","2d1a6a31":"code","b2f67239":"code","8a91bf62":"code","a1932700":"code","cb014a10":"code","65b23bfc":"code","217a752c":"code","04ff9850":"code","bb85802f":"code","4d2b1c41":"code","415f4502":"code","632f4a3e":"code","18664d1f":"code","ac9ed8d7":"code","cc567fb3":"code","d4fb9c69":"code","2a43b8b2":"code","4142dfd6":"code","0158e24c":"code","6a53b919":"code","e6c315ee":"code","3aead407":"code","f1e26e94":"code","c3873e76":"code","bf51f742":"code","2affc2ef":"code","6cfda748":"code","4192d0d0":"code","4caa30ac":"code","3d1b5b13":"code","3bce400f":"code","b435cbb6":"code","d8c3a6b2":"code","59733a08":"code","e61acbb9":"code","1abf7d7e":"code","ebb09ba7":"code","2a829cc9":"code","4b5b968b":"markdown","10537bac":"markdown","ec454049":"markdown","30717736":"markdown","7837376b":"markdown","1b706917":"markdown","0dae3106":"markdown","0cd9f989":"markdown","98f8e501":"markdown"},"source":{"5f9eb89e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime\nimport pickle\nimport os\n%matplotlib inline\npd.set_option('display.max_columns', 100)","9ad23cb4":"training = pd.read_csv('..\/input\/exploratory-data-analysis\/ml_case_training_data.csv')\nhistory = pd.read_csv('..\/input\/exploratory-data-analysis\/ml_case_training_hist_data.csv')\nchurn = pd.read_csv('..\/input\/exploratory-data-analysis\/ml_case_training_output.csv')","0708f02e":"churn.head(10)","024fc1d3":"training.head(10)","2d1a6a31":"history.head()","b2f67239":"train_data = pd.merge(training, churn, on='id')\npd.DataFrame({'Data type': train_data.dtypes})","8a91bf62":"pd.DataFrame({'Data type': history.dtypes})","a1932700":"train_data.describe()","cb014a10":"history.describe()","65b23bfc":"pd.DataFrame({'Missing values':train_data.isnull().sum()})","217a752c":"pd.DataFrame({'Missing values (%)':train_data.isnull().sum()\/len(train_data)*100})\n\n#There is high percentage of null values in train_data, they need to be removed","04ff9850":"pd.DataFrame({'Missing Values (%)':history.isnull().sum()\/len(history)*100})\n\n# In this case the missing values are small, they can be replaced with approxmimates","bb85802f":"churn_data = train_data[['id', 'churn']]\nchurn_data.columns = ['companies', 'churn']\nchurn_data","4d2b1c41":"def plot_stacked_bar(dataframe, title, size= (20, 10), rot=0, legend= 'upper right'):\n    ax = dataframe.plot(kind='bar',\n                       stacked= True,\n                       figsize= size,\n                       rot=rot,\n                       title = title)\n    bars(ax, textsize= 16)\n    plt.legend(['WithHolding Customers', 'Churn'], loc=legend)\n    plt.ylabel('Company Base (%)')\n    plt.show()\n\ndef bars(ax, colour= 'white', textsize= 13):\n    for p in ax.patches:\n        value= str(round(p.get_height(), 1))\n        if value == '0.0':\n            continue\n            ax.bars(value,\n                 color= colour,\n                 size= textsize\n                )\n                ","415f4502":"churn_total = churn_data.groupby(churn_data['churn']).count()\nchurn_percentage = churn_total\/churn_total.sum()*100\nplot_stacked_bar(churn_percentage.transpose(), 'Churning Status', (5,5), legend= 'lower right')","632f4a3e":"activity = train_data[['id', 'activity_new', 'churn']]\nactivity = activity.groupby([activity['activity_new'], \n                             activity['churn']])['id'].count().unstack(level=1).sort_values(by=[0], ascending= False)\nactivity.plot(kind='bar',\n             figsize= (18,10),\n             width= 2,\n             stacked= True,\n             title= 'SME ACTIVITY')\nplt.xlabel('ACTIVITY')\nplt.ylabel('NUMBER OF COMPANIES')\nplt.legend(['Withholded Customers', 'Churn'], loc= 'upper right')\nplt.xticks()\nplt.show()","18664d1f":"activity_total = activity.fillna(0)[0]+activity.fillna(0)[1]\nactivity_percentage = activity.fillna(0)[1]\/(activity_total)*100\npd.DataFrame({'Percentage Churn': activity_percentage, 'Total companies': activity_total}).sort_values(by='Percentage Churn', ascending= False).head(10)","ac9ed8d7":"channel = train_data[['id', 'churn', 'channel_sales']]\nchannel = channel.groupby([channel['channel_sales'],\n                          channel['churn']])['id'].count().unstack(level=1).fillna(0)","cc567fb3":"channel_churn = (channel.div(channel.sum(axis=1), axis=0)*100).sort_values(by=[1], ascending= False)","d4fb9c69":"plot_stacked_bar(channel_churn, 'Sales Channel', rot= 30)","2a43b8b2":"consumption = train_data[['id', \n                         'cons_12m', \n                         'cons_gas_12m', \n                         'cons_last_month',\n                        'imp_cons',\n                        'has_gas',\n                        'churn']]\ndef plot_distribution(dataframe, column, ax, bins= 100):\n    temp= pd.DataFrame({'Withholded Customers': dataframe[dataframe['churn']==0][column],\n                       'churn':dataframe[dataframe['churn']==1][column]})\n    temp[['Withholded Customers', 'churn']].plot(kind='hist', bins=bins, ax=ax, stacked=True)\n    ax.set_xlabel(column)\n    ax.ticklabel_format(style='plain', axis= 'x')","4142dfd6":"fig, axs = plt.subplots(nrows=4, figsize= (18,25))\nplot_distribution(consumption, 'cons_12m', axs[0])\nplot_distribution(consumption[consumption['has_gas'] == 't'], 'cons_gas_12m', axs[1])\nplot_distribution(consumption, 'cons_last_month', axs[2])\nplot_distribution(consumption, 'imp_cons', axs[3])","0158e24c":"fig, axs = plt.subplots(nrows=4, figsize=(18,25))\nsns.boxplot(consumption[\"cons_12m\"], ax=axs[0])\nsns.boxplot(consumption[consumption[\"has_gas\"] == \"t\"][\"cons_gas_12m\"], ax=axs[1])\nsns.boxplot(consumption[\"cons_last_month\"], ax=axs[2])\nsns.boxplot(consumption[\"imp_cons\"], ax=axs[3])\nfor ax in axs:\n ax.ticklabel_format(style='plain', axis='x')\naxs[0].set_xlim(-200000, 2000000)\naxs[1].set_xlim(-200000, 2000000)\naxs[2].set_xlim(-20000, 100000)\nplt.show()","6a53b919":"forecast = train_data[[\"id\",\"forecast_base_bill_ele\",\"forecast_base_bill_year\",\n \"forecast_bill_12m\",\"forecast_cons\",\"forecast_cons_12m\",\n \"forecast_cons_year\",\"forecast_discount_energy\",\"forecast_meter_rent_12m\",\n \"forecast_price_energy_p1\",\"forecast_price_energy_p2\",\n \"forecast_price_pow_p1\",\"churn\"]]","e6c315ee":"fig, axs = plt.subplots(nrows=11, figsize=(18,50))\nplot_distribution(train_data, \"forecast_base_bill_ele\", axs[0])\nplot_distribution(train_data, \"forecast_base_bill_year\", axs[1])\nplot_distribution(train_data, \"forecast_bill_12m\", axs[2])\nplot_distribution(train_data, \"forecast_cons\", axs[3])\nplot_distribution(train_data, \"forecast_cons_12m\", axs[4])\nplot_distribution(train_data, \"forecast_cons_year\", axs[5])\nplot_distribution(train_data, \"forecast_discount_energy\", axs[6])\nplot_distribution(train_data, \"forecast_meter_rent_12m\", axs[7])\nplot_distribution(train_data, \"forecast_price_energy_p1\", axs[8])\nplot_distribution(train_data, \"forecast_price_energy_p2\", axs[9])\nplot_distribution(train_data, \"forecast_price_pow_p1\", axs[10])","3aead407":"contract_type = train_data[[\"id\", \"has_gas\", \"churn\"]]\ncontract = contract_type.groupby([contract_type[\"churn\"],contract_type[\"has_gas\"]])[\"id\"].count().unstack(level=0)\ncontract_percentage = (contract.div(contract.sum(axis=1), axis=0)*100).sort_values(by=[1], ascending=False)\nplot_stacked_bar(contract_percentage, \"Contract type (with gas)\")","f1e26e94":"margin = train_data[[\"id\",\"margin_gross_pow_ele\",\"margin_net_pow_ele\",\"net_margin\"]]\n\n\nfig, axs = plt.subplots(nrows=3, figsize=(18,20))\nsns.boxplot(margin[\"margin_gross_pow_ele\"], ax=axs[0])\nsns.boxplot(margin[\"margin_net_pow_ele\"],ax=axs[1])\nsns.boxplot(margin[\"net_margin\"], ax=axs[2])\n\n\naxs[0].ticklabel_format(style='plain', axis='x')\naxs[1].ticklabel_format(style='plain', axis='x')\naxs[2].ticklabel_format(style='plain', axis='x')\nplt.show()","c3873e76":"power = train_data[[\"id\",\"pow_max\", \"churn\"]].fillna(0)\nfig, axs = plt.subplots(nrows=1, figsize=(18,10))\nplot_distribution(power, \"pow_max\", axs)","bf51f742":"others = train_data[[\"id\",\"nb_prod_act\",\"num_years_antig\", \"origin_up\", \"churn\"]]\nproducts = others.groupby([others[\"nb_prod_act\"],others[\"churn\"]])[\"id\"].count().unstack(level=1)\nproducts_percentage = (products.div(products.sum(axis=1), axis=0)*100).sort_values(by=[1], ascending=False)\nplot_stacked_bar(products_percentage, \"Number of products\")","2affc2ef":"years_antig = others.groupby([others[\"num_years_antig\"],others[\"churn\"]])[\"id\"].count().unstack(level=1)\nyears_antig_percentage = (years_antig.div(years_antig.sum(axis=1), axis=0)*100)\nplot_stacked_bar(years_antig_percentage, \"Number years\")","6cfda748":"origin = others.groupby([others[\"origin_up\"],others[\"churn\"]])[\"id\"].count().unstack(level=1)\norigin_percentage = (origin.div(origin.sum(axis=1), axis=0)*100)\nplot_stacked_bar(origin_percentage, \"Origin contract\/offer\")","4192d0d0":"(train_data.isnull().sum()\/len(train_data.index)*100).plot(kind=\"bar\", figsize=(18,10))\n# Set axis labels\nplt.xlabel(\"Variables\")\nplt.ylabel(\"Missing values (%)\")\nplt.show()","4caa30ac":"train_data.drop(columns=[\"campaign_disc_ele\", \"date_first_activ\",\n \"forecast_base_bill_ele\",\"forecast_base_bill_year\",\n\"forecast_bill_12m\", \"forecast_cons\"], inplace=True)","3d1b5b13":"pd.DataFrame({\"Dataframe columns\": train_data.columns})","3bce400f":"train_data[train_data.duplicated()]","b435cbb6":"train_data.loc[train_data[\"date_modif_prod\"].isnull(),\"date_modif_prod\"] = train_data[\"date_modif_prod\"].value_counts().index[0]\ntrain_data.loc[train_data[\"date_end\"].isnull(),\"date_end\"] = train_data[\"date_end\"].value_counts().index[0]\ntrain_data.loc[train_data[\"date_renewal\"].isnull(),\"date_renewal\"] = train_data[\"date_renewal\"].value_counts().index[0]","d8c3a6b2":"missing_data_percentage = history.isnull().sum()\/len(history.index)*100","59733a08":"missing_data_percentage.plot(kind=\"bar\", figsize=(18,10))\nplt.xlabel(\"Variables\")\nplt.ylabel(\"Missing values (%)\")\nplt.show()","e61acbb9":"history[history.isnull().any(axis=1)]","1abf7d7e":"history.loc[history[\"price_p1_var\"].isnull(),\"price_p1_var\"] = history[\"price_p1_var\"].median()\nhistory.loc[history[\"price_p2_var\"].isnull(),\"price_p2_var\"] = history[\"price_p2_var\"].median()\nhistory.loc[history[\"price_p3_var\"].isnull(),\"price_p3_var\"] = history[\"price_p3_var\"].median()\nhistory.loc[history[\"price_p1_fix\"].isnull(),\"price_p1_fix\"] = history[\"price_p1_fix\"].median()\nhistory.loc[history[\"price_p2_fix\"].isnull(),\"price_p2_fix\"] = history[\"price_p2_fix\"].median()\nhistory.loc[history[\"price_p3_fix\"].isnull(),\"price_p3_fix\"] = history[\"price_p3_fix\"].median()","ebb09ba7":"fig, axs = plt.subplots(nrows=7, figsize=(18,50))\nsns.boxplot((train_data[\"cons_12m\"].dropna()), ax=axs[0])\nsns.boxplot((train_data[train_data[\"has_gas\"]==1][\"cons_gas_12m\"].dropna()), ax=axs[1])\nsns.boxplot((train_data[\"cons_last_month\"].dropna()), ax=axs[2])\nsns.boxplot((train_data[\"forecast_cons_12m\"].dropna()), ax=axs[3])\nsns.boxplot((train_data[\"forecast_meter_rent_12m\"].dropna()), ax=axs[5])\nsns.boxplot((train_data[\"imp_cons\"].dropna()), ax=axs[6])\nplt.show()","2a829cc9":"history.describe()","4b5b968b":"1. The overall data looks good in history, but we are concerned about the negative values in min (price_p1_fix, price_p2_fix, price_p3_fix), we will change them to positive while cleaning the data\n\nNOW WE DEAL WITH THE MISSING DATA","10537bac":"It is very clear now that we have a highly skewed distribution, and several outliers.","ec454049":"if sorted by activity some companies have churned a 100% but this is due to the fact that only a few companies belong to that activity.\n\nNOW CALCULATING THE SALES","30717736":"For simplicity we will remove the variables with more than 60% of the values missing.\n*We might re-use some of these variables if our model is not good enough","7837376b":"ABOUT 10% OF THE TOTA CUSTOMERS HAS BEEN LOSS(CHURNED)","1b706917":"CONSUMPTION","0dae3106":"The distribution of the classes over the labelled data despite the lack of 60% of the entries\nWe see churn is not secifically related to any SME category in particular\n\nIF WE TAKE A LOOK AT PERCENTAGE WISE","0cd9f989":"There is not much data missing. Instead of removing the entries that are empty we will simply substitute them with the median","98f8e501":"1. \"campaign_disc_ele\" has lots of na values\n\n2. Here min consumption of gas and electricity is negative. There is  a possibiity clients companies are producing energy, but that's not highly unlikely possible; So we will wil treat this data as corrupt. "}}