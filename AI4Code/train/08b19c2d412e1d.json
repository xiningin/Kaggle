{"cell_type":{"55093025":"code","78485090":"code","a84bbf42":"code","2f7d99b3":"code","2aebd526":"code","6f621ab1":"code","6cf16530":"code","07b08d8c":"code","276c634d":"code","a7af1d34":"code","7f02243d":"code","aa5992cd":"code","1f9e4699":"code","468b5e0e":"code","306740b3":"code","c19d0b0f":"markdown"},"source":{"55093025":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow as keras\nimport os\nfrom tensorflow.keras.preprocessing import image\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.layers import Dense,GlobalAveragePooling2D,Dropout\nfrom tensorflow.keras.applications import MobileNet\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.mobilenet import preprocess_input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom kaggle_datasets import KaggleDatasets\nimport re\nimport random\n","78485090":"\nIMAGE_SIZE = [224, 224]\nBATCH_SIZE = 64\nAUTO = tf.data.experimental.AUTOTUNE\n\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('tpu-getting-started')\nGCS_PATH = GCS_DS_PATH + '\/tfrecords-jpeg-224x224'\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec')\n","a84bbf42":"TRAINING_FILENAMES[0]","2f7d99b3":"# try:\n#     # TPU detection. No parameters necessary if TPU_NAME environment variable is set.\n#     # On Kaggle this is always the case.\n#     tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n#     print('Running on TPU ', tpu.master())\n# except ValueError:\n#     tpu = None\n\n# # TPUStrategy for distributing training\n# if tpu:\n#     tf.config.experimental_connect_to_cluster(tpu)\n#     tf.tpu.experimental.initialize_tpu_system(tpu)\n#     strategy = tf.distribute.experimental.TPUStrategy(tpu)\n# else: # default strategy that works on CPU and single GPU\n#     strategy = tf.distribute.get_strategy()\n\n# print('Replicas ',strategy.num_replicas_in_sync)\n","2aebd526":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.reshape(image, [*IMAGE_SIZE, 3])\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True):\n    dataset = tf.data.TFRecordDataset(filenames)\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n","6f621ab1":"\nNUM_CLASSES = 104\nCROP_SIZE = [200, 200]\n\ndef data_augment(image, label):\n    image = tf.image.random_flip_left_right(image)\n    if bool(random.getrandbits(1)):\n        image = tf.image.random_crop(image, [*CROP_SIZE, 3])\n        image = tf.image.resize(image, IMAGE_SIZE)\n    return image, label\n\ndef input_preprocess(image, label):\n    label = tf.one_hot(label, NUM_CLASSES)\n    return image, label\n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(input_preprocess, num_parallel_calls=AUTO)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\ndef get_validation_dataset():\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True)\n    dataset = dataset.map(input_preprocess)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    return dataset\n\ndef get_test_dataset():\n    dataset = load_dataset(TEST_FILENAMES, labeled=False)\n    dataset = dataset.batch(BATCH_SIZE)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec\n    # files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nprint('Dataset: {} training images\\n, {} validation images\\n, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))\n\nds_train = get_training_dataset()\nds_valid = get_validation_dataset()\nds_test = get_test_dataset()\n","6cf16530":"base_model=MobileNet(weights='imagenet',include_top=False)\n","07b08d8c":"\nbase_model=MobileNet(weights='imagenet',include_top=False)\nCLASSES = 104\nx = base_model.output\nx = GlobalAveragePooling2D(name='avg_pool')(x)\nx = Dropout(0.4)(x)\npredictions = Dense(CLASSES, activation='softmax')(x)\nmodel = Model(inputs=base_model.input, outputs=predictions)\n# model.summary()\n    ","276c634d":"# for layer in base_model.layers:\n#     layer.trainable = False\n    \nmodel.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.summary()\n\n","a7af1d34":"EPOCHS = 25\n\nhistory = model.fit(\n    ds_train,\n    validation_data=ds_valid,\n    epochs=EPOCHS,\n    verbose = 10\n)","7f02243d":"plt.plot(history.history['accuracy'],'r',label='training acc')\nplt.plot(history.history['val_accuracy'],label='validation acc')\nplt.xlabel('# epochs')\nplt.ylabel('accuracy')\nplt.legend()\nplt.show()\n\nplt.plot(history.history['loss'],'r',label='training loss')\nplt.plot(history.history['val_loss'],label='validation loss')\nplt.xlabel('# epochs')\nplt.ylabel('loss')\nplt.legend()\nplt.show()\n","aa5992cd":"# predict on test data\n\ntest_ds = get_test_dataset()\n\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)","1f9e4699":"# make submission.csv\n\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U')\n\nnp.savetxt(\n    'submission.csv',\n    np.rec.fromarrays([test_ids, predictions]),\n    fmt=['%s', '%d'],\n    delimiter=',',\n    header='id,label',\n    comments=''\n)","468b5e0e":"p = pd.read_csv('submission.csv')","306740b3":"p.head()","c19d0b0f":"tf.data builds a performance model of the input pipeline and runs an optimization algorithm to find a good allocation of its CPU budget across all tunable operations. While the input pipeline is running, tf.data tracks the time spent in each operation, so that these times can be fed into the optimization algorithm.\n\n"}}