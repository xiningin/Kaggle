{"cell_type":{"b574894f":"code","d0c2dbae":"code","926af0e9":"code","6700e0c3":"code","6fa7156b":"code","9cef88fb":"code","4a5d17f9":"code","ff690770":"code","37b57a03":"code","ba2c38d3":"code","8aded349":"code","9b3fc999":"code","1473dba4":"code","b62df3bb":"code","7dbd9e25":"code","e450c327":"code","3d9894c2":"code","b7a53df1":"code","67e15016":"code","572d8a83":"code","2e5dcd91":"code","9ce02842":"code","dbfaf6e8":"code","84423523":"code","f249ba49":"markdown","67fdf472":"markdown","e3085f64":"markdown","d2b19e49":"markdown","5928995d":"markdown","88d54d41":"markdown","b4709a8f":"markdown","a3b11177":"markdown","65a460ff":"markdown"},"source":{"b574894f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d0c2dbae":"df= pd.read_csv('..\/input\/d\/aditisaxena20\/ecommerce-purchases\/Ecommerce Purchases.csv')","926af0e9":"df.head(5)","6700e0c3":"df.info()","6fa7156b":"df.isnull().sum()","9cef88fb":"df.shape\n#Method1\nprint('Number of rows:',df.shape[0])\nprint('Number of columns:',df.shape[1])","4a5d17f9":"#Method2\nprint('Number of rows',len(df))\nprint('Number of columns:',len(df.columns))","ff690770":"df['Purchase Price'].describe()","37b57a03":"print('The maximum purchase price is:',df['Purchase Price'].max())\nprint('The minimum purchase price is:',df['Purchase Price'].min())\nprint('The average purchase price is:',df['Purchase Price'].mean())","ba2c38d3":"df['Language'].value_counts()","8aded349":"len(df[df['Language']=='fr'])","9b3fc999":"df[df['Language']=='fr'].count()","1473dba4":"df.columns","b62df3bb":"len(df[df['Job'].str.contains('engineer',case=False)])","7dbd9e25":"df[df['IP Address']=='132.207.160.22']['Email']","e450c327":"df[df['Purchase Price']>50].count()","3d9894c2":"df[df['CC Provider'].str.contains('Mastercard',case=False)].count()","b7a53df1":"len(df[(df['Purchase Price']>50) & (df['CC Provider'].str.contains('Mastercard',case=False))])","67e15016":"df[df['Credit Card']==4664825258997300]['Email']","572d8a83":"df['AM or PM'].value_counts()","2e5dcd91":"def fun():\n    count=0\n    for date in df['CC Exp Date']:\n        if date.split('\/')[1]=='20':\n            count=count+1\n    print(count)","9ce02842":"fun()","dbfaf6e8":"len(df[df['CC Exp Date'].apply(lambda x:x[3:]=='20')])","84423523":"df['Email'].apply(lambda x:x.split('@')[1]).value_counts().head()","f249ba49":"#Credit Card expires in 2020","67fdf472":"#Number of French natives","e3085f64":"#Email of the person with 4664825258997300 credit card number","d2b19e49":"#Number of people who made a purchase of more than 50 dollars using Mastercard","5928995d":"#Email of the person with IP address 132.207.160.22","88d54d41":"#Top 5 Most Popular email providers","b4709a8f":"#Highest and Lowest Purchase Price","a3b11177":"#Break up by time period","65a460ff":"#Job title contains 'engineer'"}}