{"cell_type":{"cce7b434":"code","04673006":"code","72a1b3c2":"code","3bd9f909":"code","b6f77cd6":"code","61ea8635":"code","38c0929c":"code","c00be722":"code","e99e7955":"code","73519216":"code","40282606":"code","82a0b6ea":"code","b19e1128":"code","ac148031":"code","44baba3f":"code","8a93aaae":"code","0bedcbe4":"code","217d6a4d":"code","a9d946f1":"code","12fd777f":"code","fd2ce0bf":"code","202c7298":"code","c81997f0":"code","e1e32bd2":"code","7f3a2cf3":"code","95b88b4c":"markdown","2477e3fc":"markdown","41d412bc":"markdown","93f6702d":"markdown"},"source":{"cce7b434":"#Minst data download from Kaggle.com\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\n   \ndata = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndata.head()","04673006":"data.columns","72a1b3c2":"#save the labels into variable l\nl = data['label']\n\n# drop the label feature and store rhe pixels data in d .\nd = data.drop('label' ,axis=1)\nd.head()","3bd9f909":"d.shape","b6f77cd6":"l.shape","61ea8635":"#display or plot a number a try.\nplt.figure(figsize=(7,7))\n\nidx = np.random.randint(0 ,d.shape[0])\ngrid_data = d.iloc[idx].to_numpy().reshape(28,28) #reshape from 1d to 2d array\nplt.imshow(grid_data, interpolation='none' ,cmap='gray' )\nplt.show()\nprint(l[idx])","38c0929c":"labels = l\ndata = d\nprint('the shape of the data : ', data.shape)\nn = data.shape[0]","c00be722":"#data preprocessing standardization\nfrom sklearn.preprocessing import StandardScaler\nstandardized_data = StandardScaler().fit_transform(data)\nprint(standardized_data.shape)","e99e7955":"#find the covariance matrix  which is A^T*A\nsample_data = standardized_data\n\n#matrix multiplication using numpy\ncovar_matrix = (1\/n)*sample_data.T @ sample_data\nprint('the shape of the covriance Matrix is : ', covar_matrix.shape)","73519216":"# find the top 2 eigenvalues and corresponding eigenvectors\nfrom scipy.linalg import eigh\n# the parameter 'eigvals' is defined (low value to heigh value) \n# eigh function will return the eigen values in asending order\n# this code generates only the top 2 (782 and 783) eigenvalues.\nvalues ,vecotrs = eigh(covar_matrix ,eigvals=(782,783))\nprint('the shape of  eignvecors   is : ', vecotrs.shape)\n\n# converting the eigen vecotors to in 2d \nvecotrs = vecotrs.T\nprint('the update  shape of  eignvecors   is : ', vecotrs.shape) \n\n#here the vectors[1] represent the  eigen vector coresponding the the first principal component \n# the vectors[0] represent the  eigen vector coresponding the the second  principal component \n","40282606":"# projecting the original data sample on the plane\n#formed by the two principal eigen vectors by vector-vector multiplication.\n\nnew_coordinates = np.matmul(vecotrs ,sample_data.T)\nprint(\"result an new data point's shape ??, : \" , new_coordinates.shape)","82a0b6ea":"labels.shape ","b19e1128":"#appendind labels to the 2d projected data\nnew_coordinates = np.vstack((new_coordinates ,labels)).T\n\n#creating a dataframe for ploting the labeled points.\ndataframe = pd.DataFrame(data=new_coordinates , columns=(\"1st_principal\", \"2nd_principal\", \"label\"))\ndataframe.head()","ac148031":"df = dataframe.sample(5 ,random_state=11541)\ndf","44baba3f":"\nsns.FacetGrid(df , hue ='label' ,height=5).map(plt.scatter , '1st_principal' ,'2nd_principal' ).add_legend()\nplt.show()","8a93aaae":"sns.scatterplot(data=df ,x='1st_principal' , y='2nd_principal' ,hue='label' ,legend='full')\n\nplt.show()","0bedcbe4":"#ploting the 2d data points with seaborn \n\nsns.FacetGrid(dataframe , hue='label' , height=6 ).map(plt.scatter , '1st_principal' ,'2nd_principal' ).add_legend()\nplt.show()","217d6a4d":"plt.figure(figsize=(15,7))\nsns.scatterplot(data=dataframe , x='1st_principal' ,y ='2nd_principal' ,hue='label' ,legend='full')\nplt.show()","a9d946f1":"# initializing the pca\nfrom sklearn import decomposition\npca = decomposition.PCA()","12fd777f":"#configuring the parameters\n# the number of componnent is 2\npca.n_components = 2\npca_data = pca.fit_transform(sample_data)\n\n# pca_reduced will contain the 2-d projects of simple data\nprint('the shape of pca_reduced is : ' ,pca_data.shape)","fd2ce0bf":"#attaching the labels to the pac_reduced for each 2d data point\npca_data  = np.vstack((pca_data.T , labels) ).T","202c7298":"# creating a new data fram which help us in ploting the result data\npca_df = pd.DataFrame(data= pca_data , columns=(\"1st_principal\", \"2nd_principal\", \"label\"))\npca_df.sample(5)","c81997f0":"#ploting the result data\nsns.FacetGrid(pca_df , hue='label' , height=5).map(plt.scatter , '1st_principal' ,'2nd_principal' ).add_legend()\nplt.show()","e1e32bd2":"# PCA for dimensionality redcution (non-visualization)\n\npca.n_components = 784\npca_data = pca.fit_transform(sample_data)\n\npercentage_var_explained = pca.explained_variance_ \/ np.sum(pca.explained_variance_);\n\ncum_var_explained = np.cumsum(percentage_var_explained)","7f3a2cf3":"#plot the PCA spectrum\nplt.figure(figsize=(6,4))\nplt.plot(cum_var_explained ,linewidth=2 )\nplt.axis('tight')\nplt.grid()\nplt.xlabel('n_components')\nplt.ylabel('Cumulative_explained_variance')\nplt.show()","95b88b4c":"# Load MNIST Data","2477e3fc":"# 2D Visualization using PCA  ","41d412bc":"# PCA using skllearn","93f6702d":"# PCA for dimensionality redcution (not for visualization)\n"}}