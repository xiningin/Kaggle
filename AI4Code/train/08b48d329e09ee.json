{"cell_type":{"248b1feb":"code","843b8747":"code","aab9001d":"code","829cf4af":"code","c05f30af":"code","46beb310":"code","6a54ace8":"code","677481bf":"code","82be6439":"code","f53f5d3d":"code","ff457f5f":"code","526f4677":"code","384d7da3":"code","7c3b053e":"code","a338eee3":"code","45007510":"code","0e596424":"code","1307d195":"code","7f5fb502":"code","55028bd2":"code","dfd564a1":"code","23f09527":"code","2a657325":"code","24f00e9b":"code","e0b05e79":"code","b9c88f48":"code","14ead347":"code","1dd8a3e7":"code","041414bb":"code","4de22073":"code","73aaa61c":"code","1917b4d5":"code","df6d337f":"code","f0af947a":"code","bdefbe01":"code","35791a7f":"code","6e5c4777":"code","56ea3373":"code","7f1784d9":"code","1435933d":"code","001a2833":"code","60cea5d9":"code","bf27c3c7":"code","0951a668":"code","7311d0a3":"code","4b3f2fa0":"code","c241a0c6":"code","abc7fc48":"code","43526738":"code","f5f1e0f6":"code","d1316b0d":"code","52c189b5":"code","107259d6":"code","f330b464":"code","ed5461bd":"code","6cd537cd":"code","63a0f3b7":"code","339bc7aa":"code","d7b4ba04":"code","6efdc237":"code","9232c386":"code","26065bd5":"code","d0e2e1ae":"code","d3e36e88":"code","7258db38":"code","ca3a16a7":"code","58b13167":"code","ae802a8c":"code","ee1175fa":"code","d73abf27":"code","191f0a6e":"code","220526df":"code","cb81f02e":"code","88fbad54":"code","a97953cf":"code","5c46a503":"code","9e102b65":"code","03982465":"code","428abeb8":"code","8ae5aabd":"code","7110d562":"code","504155b2":"code","cf737763":"code","7321de29":"code","5089c265":"markdown","80cccc2c":"markdown","6eb3ddc9":"markdown","5eb42ea7":"markdown","93471ebb":"markdown","7607c592":"markdown","e8d947d9":"markdown","471cbd8a":"markdown","1a913dcf":"markdown","6d9559b4":"markdown","9c0cbf47":"markdown","32939202":"markdown","71e52142":"markdown","7a507adf":"markdown","dbe4c4ae":"markdown","d87f6086":"markdown","9095a9f3":"markdown","5224ddf7":"markdown","6ce8c1ee":"markdown","4b8ce470":"markdown","f4c683ab":"markdown","546dbd37":"markdown","882705a8":"markdown","13b8bf5d":"markdown","a6090f74":"markdown","ef2dbd76":"markdown","37ae48e2":"markdown","e231980d":"markdown"},"source":{"248b1feb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","843b8747":"#importing usual libraries\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","aab9001d":"#importing dataset csv to pandas dataframe\n\nautomobile = pd.read_csv(\"\/kaggle\/input\/CarPrice_Assignment.csv\")\nautomobile.head()","829cf4af":"#checking number of rows and columns\n\nautomobile.shape","c05f30af":"#checking dtypes and null values of columns\n\nautomobile.info()","46beb310":"#checking summary of numeric variables\n\nautomobile.describe()","6a54ace8":"#checking number of columns of each data type for general EDA\n\nautomobile.dtypes.value_counts()","677481bf":"#cleaning Car Name to keep only brand(company) name and remove model names \n\nautomobile['CarName']=automobile['CarName'].apply(lambda x:x.split(' ', 1)[0])\nautomobile.rename(columns = {'CarName':'companyname'}, inplace = True)\nautomobile.head()","82be6439":"#checking unique values in company name column\n\nautomobile.companyname.unique()","f53f5d3d":"#counting number of unique company names\n\nautomobile.companyname.nunique()","ff457f5f":"# Fixing values in company name\n\nautomobile.companyname = automobile.companyname.str.lower()\n\ndef replace_name(a,b):\n    automobile.companyname.replace(a,b,inplace=True)\n\nreplace_name('maxda','mazda')\nreplace_name('porcshce','porsche')\nreplace_name('toyouta','toyota')\nreplace_name('vokswagen','volkswagen')\nreplace_name('vw','volkswagen')\n\nautomobile.companyname.unique()","526f4677":"#counting number of unique company names\n\nautomobile.companyname.nunique()","384d7da3":"#plotting count of company names\n\nplt.figure(figsize=(30, 8))\nplt1=sns.countplot(x=automobile.companyname, data=automobile, order= automobile.companyname.value_counts().index)\nplt.title('Company Wise Popularity', size=14)\nplt1.set_xlabel('Car company', fontsize=14)\nplt1.set_ylabel('Frequency of Car Body', fontsize=14)\nplt1.set_xticklabels(plt1.get_xticklabels(),rotation=360, size=14)\nplt.show()","7c3b053e":"#plotting company wise average price of car\n\nplt.figure(figsize=(30, 6))\n\ndf = pd.DataFrame(automobile.groupby(['companyname'])['price'].mean().sort_values())\ndf=df.reset_index(drop=False)\nplt1=sns.barplot(x=\"companyname\", y=\"price\", data=df)\nplt1.set_title('Car Range vs Average Price', size=14)\nplt1.set_xlabel('Car company', fontsize=14)\nplt1.set_ylabel('Price', fontsize=14)\nplt1.set_xticklabels(plt1.get_xticklabels(),rotation=360, size=14)\nplt.show()","a338eee3":"#Binning the Car Companies based on avg prices of each Company.\n\ndef replace_values(a,b):\n    automobile.companyname.replace(a,b,inplace=True)\n\nreplace_values('chevrolet','Low_End')\nreplace_values('dodge','Low_End')\nreplace_values('plymouth','Low_End')\nreplace_values('honda','Low_End')\nreplace_values('subaru','Low_End')\nreplace_values('isuzu','Low_End')\nreplace_values('mitsubishi','Budget')\nreplace_values('renault','Budget')\nreplace_values('toyota','Budget')\nreplace_values('volkswagen','Budget')\nreplace_values('nissan','Budget')\nreplace_values('mazda','Budget')\nreplace_values('saab','Medium')\nreplace_values('peugeot','Medium')\nreplace_values('alfa-romero','Medium')\nreplace_values('mercury','Medium')\nreplace_values('audi','Medium')\nreplace_values('volvo','Medium')\nreplace_values('bmw','High_End')\nreplace_values('porsche','High_End')\nreplace_values('buick','High_End')\nreplace_values('jaguar','High_End')\n\nautomobile.rename(columns = {'companyname':'segment'}, inplace = True)\nautomobile.head()","45007510":"## FUNCTION TO PLOT CHARTS\n\ndef plot_charts(var1, var2):\n    plt.figure(figsize=(15, 10))   \n    plt.subplot(2,2,1)\n    plt.title('Histogram of '+ var1)\n    sns.countplot(automobile[var1], palette=(\"husl\"))\n    plt1.set(xlabel = '%var1', ylabel='Frequency of'+ '%s'%var1)\n    \n    plt.subplot(2,2,2)\n    plt.title(var1+' vs Price')\n    sns.boxplot(x=automobile[var1], y=automobile.price, palette=(\"husl\"))\n    \n    plt.subplot(2,2,3)\n    plt.title('Histogram of '+ var2)\n    sns.countplot(automobile[var2], palette=(\"husl\"))\n    plt1.set(xlabel = '%var2', ylabel='Frequency of'+ '%s'%var2)\n    \n    plt.subplot(2,2,4)\n    plt.title(var1+' vs Price')\n    sns.boxplot(x=automobile[var2], y=automobile.price, palette=(\"husl\"))\n    \n    plt.show()   ","0e596424":"plot_charts('symboling', 'fueltype')","1307d195":"plot_charts('aspiration', 'doornumber')","7f5fb502":"plot_charts('drivewheel', 'carbody')","55028bd2":"plot_charts('enginelocation', 'enginetype')","dfd564a1":"plot_charts('cylindernumber', 'fuelsystem')","23f09527":"#checking distribution and spread of car price\n\nplt.figure(figsize=(20,6))\n\nplt.subplot(1,2,1)\nplt.title('Car Price Distribution Plot')\nsns.distplot(automobile.price)\n\nplt.subplot(1,2,2)\nplt.title('Car Price Spread')\nsns.boxplot(y=automobile.price)\n\nplt.show()","2a657325":"# checking numeric columns\n\nautomobile.select_dtypes(include=['float64','int64']).columns","24f00e9b":"#function to plot scatter plot numeric variables with price\n\ndef pp(x,y):\n    sns.pairplot(automobile, x_vars=[x,y], y_vars='price',height=4, aspect=1, kind='scatter')\n    plt.show()\n\npp('carlength', 'carwidth')\npp('carwidth', 'curbweight')","e0b05e79":"#function to plot scatter plot numeric variables with price\n\ndef pp(x,y,z):\n    sns.pairplot(automobile, x_vars=[x,y,z], y_vars='price',height=4, aspect=1, kind='scatter')\n    plt.show()\n\npp('wheelbase', 'compressionratio', 'enginesize')\npp('boreratio', 'horsepower', 'peakrpm')\npp('stroke', 'highwaympg', 'citympg')","b9c88f48":"#converting cylinder number to numeric and replacing values\n\ndef replace_values(a,b):\n    automobile.cylindernumber.replace(a,b,inplace=True)\n\nreplace_values('four','4')\nreplace_values('six','6')\nreplace_values('five','5')\nreplace_values('three','3')\nreplace_values('twelve','12')\nreplace_values('two','2')\nreplace_values('eight','8')\n\nautomobile.cylindernumber=automobile.cylindernumber.astype('int')","14ead347":"automobile.symboling.unique()","1dd8a3e7":"#converting symboling to categorical because the numeric values imply weight\n\ndef replace_values(a,b):\n    automobile.symboling.replace(a,b,inplace=True)\n\nreplace_values(3,'Very_Risky')\nreplace_values(2,'Moderately_Risky')\nreplace_values(1,'Neutral')\nreplace_values(0,'Safe')\nreplace_values(-1,'Moderately_Safe')\nreplace_values(-2,'Very_Safe')","041414bb":"# Converting variables with 2 values to 1 and 0\n\nautomobile['fueltype'] = automobile['fueltype'].map({'gas': 1, 'diesel': 0})\nautomobile['aspiration'] = automobile['aspiration'].map({'std': 1, 'turbo': 0})\nautomobile['doornumber'] = automobile['doornumber'].map({'two': 1, 'four': 0})\nautomobile['enginelocation'] = automobile['enginelocation'].map({'front': 1, 'rear': 0})","4de22073":"#dropping card_Id because it has all unique values\n\nautomobile.drop(['car_ID'], axis =1, inplace = True)","73aaa61c":"#numeric variables\n\nnum_vars=automobile.select_dtypes(include=['float64','int64']).columns","1917b4d5":"# plotting heatmap to check correlation amongst variables\n\nplt.figure(figsize = (20,10))  \nsns.heatmap(automobile[num_vars].corr(),cmap=\"YlGnBu\",annot = True)","df6d337f":"#dropping variables which are highly correlated to other variables\n\nautomobile.drop(['compressionratio','carwidth','curbweight','wheelbase','citympg'], axis =1, inplace = True)","f0af947a":"automobile.head()","bdefbe01":"#getting dummies for categorical variables\n\ndf = pd.get_dummies(automobile)\ndf.head()","35791a7f":"#checking column names for dummy variables\n\ndf.columns","6e5c4777":"# importing necessary libraries and functions\n\nfrom sklearn.model_selection import train_test_split\n\n# We specify this so that the train and test data set always have the same rows, respectively\n\ndf_train, df_test = train_test_split(df, train_size = 0.7, test_size = 0.3, random_state = 100)","56ea3373":"# for scaling\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","7f1784d9":"# Apply scaler() to all the columns except the 'yes-no' and 'dummy' variables\n\nnum_vars = ['fueltype', 'aspiration', 'doornumber', 'enginelocation', 'enginesize','horsepower', \n            'peakrpm', 'highwaympg', 'carlength', 'carheight', 'boreratio', 'stroke', 'price']\n\n\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])\n\ndf_train.head()","1435933d":"#dividing into x and y sets where y has the variable we have to predict\n\ny_train = df_train.pop('price')\nX_train = df_train","001a2833":"# Importing RFE and LinearRegression\n\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","60cea5d9":"# Running RFE with the output number of the variable equal to 10\nlm = LinearRegression()\nlm.fit(X_train, y_train)\n\nrfe = RFE(lm, 10)             # running RFE\nrfe = rfe.fit(X_train, y_train)","bf27c3c7":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","0951a668":"#checking RFE columns\ncol = X_train.columns[rfe.support_]\ncol","7311d0a3":"# Creating X_test dataframe with RFE selected variables\nX_train_rfe = X_train[col]","4b3f2fa0":"# Adding a constant variable \nimport statsmodels.api as sm  \nX_train_rfe = sm.add_constant(X_train_rfe)","c241a0c6":"#function for checking VIF\n\ndef checkVIF(X):\n    vif = pd.DataFrame()\n    vif['variable'] = X.columns    \n    vif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n    vif['VIF'] = round(vif['VIF'], 2)\n    vif = vif.sort_values(by = \"VIF\", ascending = False)\n    return(vif)","abc7fc48":"# building MODEL #1\n\nlm = sm.OLS(y_train,X_train_rfe).fit() # fitting the model\nprint(lm.summary()) # model summary","43526738":"#dropping constant to calculate VIF\n\nX_train_rfe.drop('const', axis = 1, inplace=True)","f5f1e0f6":"#checking VIF\n\ncheckVIF(X_train_rfe)","d1316b0d":"#dopping boreratio because it has the highest p-value and also high VIF. It is also something which is difficult to explain to management\n\nX_train_new = X_train_rfe.drop([\"boreratio\"], axis = 1)","52c189b5":"#building MODEL #2 after dropping boreratio\n\nX_train_new = sm.add_constant(X_train_new)\nlm = sm.OLS(y_train,X_train_new).fit() # fitting the model\nprint(lm.summary()) # model summary","107259d6":"#dropping constant to calculate VIF\n\nX_train_new.drop('const', axis=1, inplace=True)","f330b464":"#checking VIF\n\ncheckVIF(X_train_new)","ed5461bd":"#dopping enginelocation because it has the highest p-value and also high VIF. it has very few values for rear as we saw earlier\n\nX_train_new.drop([\"enginelocation\"], axis=1, inplace=True)","6cd537cd":"#building MODEL #3 after dropping enginelocation\n\nX_train_new = sm.add_constant(X_train_new)\nlm = sm.OLS(y_train,X_train_new).fit() # fitting the model\nprint(lm.summary()) # model summary","63a0f3b7":"#dropping constant to calculate VIF\n\nX_train_new.drop('const', axis=1, inplace=True)","339bc7aa":"#checking VIF\n\ncheckVIF(X_train_new)","d7b4ba04":"#dopping horsepower because it has the high VIF and exhibits multicollinearity. \n#it is highly correlated to engine size and can be dropped.\n\nX_train_new.drop([\"horsepower\"], axis=1, inplace=True)","6efdc237":"#building MODEL #4 after dropping horsepower\n\nX_train_new = sm.add_constant(X_train_new)\nlm = sm.OLS(y_train,X_train_new).fit() # fitting the model\nprint(lm.summary()) # model summary","9232c386":"#dropping constant to calculate VIF\n\nX_train_new.drop('const', axis=1, inplace=True)","26065bd5":"#checking VIF\n\ncheckVIF(X_train_new)","d0e2e1ae":"#dopping carlength because it has the high VIF and exhibits multicollinearity. \n#it is highly correlated to engine size and can be dropped.\n\nX_train_new.drop([\"carlength\"], axis=1, inplace=True)","d3e36e88":"#building MODEL #5 after dropping carlength\n\nX_train_new = sm.add_constant(X_train_new)\nlm = sm.OLS(y_train,X_train_new).fit() # fitting the model\nprint(lm.summary()) # model summary","7258db38":"#dropping constant to calculate VIF\n\nX_train_vif=X_train_new.drop('const', axis=1)","ca3a16a7":"#checking VIF\n\ncheckVIF(X_train_vif)","58b13167":"#calculating price on train set using the model built\n\ny_train_price = lm.predict(X_train_new)","ae802a8c":"# Plot the histogram of the error terms\n\nfig = plt.figure()\nsns.distplot((y_train - y_train_price), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  # Plot heading \nplt.xlabel('Errors', fontsize = 18)                         # X-label","ee1175fa":"# Plotting y_train and y_train_price to understand the residuals.\n\nplt.figure(figsize = (8,6))\nplt.scatter(y_train,y_train_price)\nplt.title('y_train vs y_train_price', fontsize=20)              # Plot heading \nplt.xlabel('y_train', fontsize=18)                          # X-label\nplt.ylabel('y_train_price', fontsize=16)                          # Y-label","d73abf27":"# Actual vs Predicted for TRAIN SET\n\nplt.figure(figsize = (8,5))\nc = [i for i in range(1,144,1)]\nd = [i for i in range(1,144,1)]\nplt.plot(c, y_train_price, color=\"blue\", linewidth=1, linestyle=\"-\")     #Plotting Actual\nplt.plot(d, y_train, color=\"red\",  linewidth=1, linestyle=\"-\")  #Plotting predicted\nplt.xlabel('Index', fontsize=18)                               # X-label\nplt.ylabel('Car Price', fontsize=16)  \nplt.show()","191f0a6e":"# Error terms for TRAIN SET\nplt.figure(figsize = (8,5))\nc = [i for i in range(1,144,1)]\nplt.scatter(c,y_train-y_train_price)\n\nplt.title('Error Terms', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                      # X-label\nplt.ylabel('ytest-ypred', fontsize=16)                # Y-label","220526df":"# Applying the scaling on the test sets\n\nnum_vars = ['fueltype', 'aspiration', 'doornumber', 'enginelocation', 'enginesize','horsepower', \n            'peakrpm', 'highwaympg', 'carlength', 'carheight', 'boreratio', 'stroke', 'price']\n\ndf_test[num_vars] = scaler.transform(df_test[num_vars])","cb81f02e":"# Dividing into X_test and y_test\n\ny_test = df_test.pop('price')\nX_test = df_test","88fbad54":"X_train_new.drop('const', axis=1, inplace=True)","a97953cf":"# Creating X_test_new dataframe by dropping variables from X_test\nX_test_new = X_test[X_train_new.columns]\n\n# Adding a constant variable \nX_test_new = sm.add_constant(X_test_new)","5c46a503":"# Making predictions\ny_pred = lm.predict(X_test_new)","9e102b65":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","03982465":"# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_test', fontsize=18)                          # X-label\nplt.ylabel('y_pred', fontsize=16)                          # Y-label","428abeb8":"# Actual vs Predicted\nc = [i for i in range(1,63,1)]\nd = [i for i in range(1,63,1)]\nplt.plot(c, y_pred, color=\"blue\", linewidth=1, linestyle=\"-\")     #Plotting Actual\nplt.plot(d, y_test, color=\"red\",  linewidth=1, linestyle=\"-\")  #Plotting predicted\nplt.xlabel('Index', fontsize=18)                               # X-label\nplt.ylabel('Car Price', fontsize=16)  \nplt.show()","8ae5aabd":"# Error terms\n\nfig = plt.figure()\nc = [i for i in range(1,63,1)]\nplt.scatter(c,y_test-y_pred)\n\nfig.suptitle('Error Terms', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                      # X-label\nplt.ylabel('ytest-ypred', fontsize=16)                # Y-label","7110d562":"#RMSE score for test set\n\nimport numpy as np\nfrom sklearn import metrics\nprint('RMSE :', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","504155b2":"#RMSE score for train set\n\nimport numpy as np\nfrom sklearn import metrics\nprint('RMSE :', np.sqrt(metrics.mean_squared_error(y_train, y_train_price)))","cf737763":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","7321de29":"r2_score(y_train, y_train_price)","5089c265":"### <font color=navy>Business Goal<\/font>\n\nYou are required to model the price of cars with the available independent variables. It will be used by the management to understand how exactly the prices vary with the independent variables. They can accordingly manipulate the design of the cars, the business strategy etc. to meet certain price levels. Further, the model will be a good way for management to understand the pricing dynamics of a new market.","80cccc2c":"**INFERENCES**\n- Most cars have fwd **(front wheel drive)**, followed by rwd **(reverse wheel drive)**. The 4wd **4 wheel drive** is very uncommon and has the least number of records.\n- cars with rwd have higher median price but their are very few records to make any conclusion on this.\n\n- sedan followed by hatchback seem to be the most popular carbody.\n- box plot shows that car body convertible and hardtop have higher median values, but very few entries again.","6eb3ddc9":"### <font color=navy>Step 2 : Data Cleaning and Exploratory Data Analysis<\/font>\n1. Cleanup carname to consider only company name as the independent variable for model building.\n2. Identify null values.\n3. Replace neccessary values.\n4. Convert dtypes if required.\n5. Explore spread of variables and their influence on price","5eb42ea7":"**There are 28 unique companies right now**","93471ebb":"**INFERENCES:**\n- Chevrolet has the cheapest average price amongst all companies.\n- Jaguar has the highest average price.\n- The avg price seems to be dependant on the company name and this is an indicator that we can use this variable in our model because it shows correlation with car price\n\n\nNow, since the number of companies are too many and it would create a lot of dummy variables, lets divide these companies into segments based on their avg price.","7607c592":"Error Terms are normally distributed with mean 0","e8d947d9":"Invalid Values\n\nThere is some inconsistency in the spellings of company names, which needs to be fixed. We need to do the following replacements:\n\n- maxda -> mazda\n- Nissan -> nissan\n- porcshce -> porsche \n- toyouta -> toyota\n- vokswagen -> volkswagen\n- vw -> volkswagen","471cbd8a":"### <font color=navy>STEP 1: Reading and Understanding the Data<\/font>\n\n1. Import data using the pandas library\n2. Understanding the structure of the data","1a913dcf":"## Making Predictions","6d9559b4":"- Except Car Height, all variables show a positive correlation with respect to price.","9c0cbf47":"A Chinese **automobile company** Geely Auto aspires to enter the US market by setting up their manufacturing unit there and producing cars locally to give competition to their US and European counterparts.\n\nThey have contracted an automobile consulting company to understand the factors on which the pricing of cars depends. Specifically, they want to understand the **factors affecting the pricing of cars in the American market**, since those may be very different from the Chinese market. \n\nThe company wants to know:\n\n- `Which variables are significant in predicting the price of a car.`\n\n\n- `How well those variables describe the price of a car.`\n\nBased on various market surveys, the consulting firm has gathered a large dataset of different types of cars across the Americal market","32939202":"### DIVIDING INTO TRAIN AND TEST","71e52142":"### Let's visualize other categorical variables now, and see if the have any correlation with price.","7a507adf":"## Residual Analysis of the train data\n\nSo, now to check if the error terms are also normally distributed (which is infact, one of the major assumptions of linear regression), let us plot the histogram of the error terms and see what it looks like.","dbe4c4ae":"### Visualizing Numeric Variables\n","d87f6086":"**INFERENCES**\n- Most common value for symboling is 0 and 1. The box plot shows us that symboing 1 has the least median price, followed by 0 and 2. symboling values of -1 and -2 have highest median car price. \n- Symboling could be a good predictor variables because we can see a relation in the value of symboling and the price of car.\n\n- More number of cars have fuel type Gas than diesel.\n- Disel cars have higher median price than gas, although we can see some outliers in the gas boxplot.","9095a9f3":"## <font color=purple> PROBLEM STATEMENT<\/font>","5224ddf7":"**After fixing there are 28 unique companies right now**\n\nLet's see their company wise popularity (count) and company wise average price","6ce8c1ee":"**INFERENCES**\n- Most cars have std aspiration. The box plot shows that cars with turbo aspiration have higher median price\n- door number shows no relation to car price and hence seems like an insignificant variable right now.","4b8ce470":"**Inferences:**\n- Toyota has most number of rows and seems to be the most popular brand\/company.\n- Mercury had the least number of rows and is the least popular company.","f4c683ab":"### Building model using statsmodel, for the detailed statistics","546dbd37":"**INFERENCES**\n- Most cars have engine located at the front and very few cars have engine located at the rear.\n- the boxplot shows that when it is at the rear, the median price is higher than the when it is at the front.\n\n- ohc engine is preferred over others.\n- ohcv engine has the higherst median value","882705a8":"## Model Evaluation","13b8bf5d":"**INFERENCES**\n- 4 cylinders is the most common number, followed by 4. Cars with four cylinder have the 2nd lowest median value after 3 (very few entries again).\n\n- mpfi is the most occuring fuelsystem. It has the highest median value and also contains outliers.","a6090f74":"- The plot is right-skewed, meaning that the most prices in the dataset are low (Below 15,000).\n- There is a significant difference between the mean and the median of the price distribution.\n- There is a high variance in the car prices, data points are far spread out from the mean.","ef2dbd76":"### SCALING NUMERIC VARIABLES","37ae48e2":"- Compression Ratio, Stoke and Peakrpm show no obvious correlation b\/w them and car price.\n- Boreratio shows some positive correlation with a lot of variance.\n- Citympg and highwaympg are negatively correlated to the price.","e231980d":"### Dividing into X and Y sets for the Model Building"}}