{"cell_type":{"bd4b6c69":"code","a735d070":"code","6751c14d":"code","d1302578":"code","5e4e2579":"code","a87871e9":"code","40760d09":"code","3edfadaa":"code","76cba966":"code","4e55dc65":"code","d685d204":"code","d1a3b7f2":"code","81911d20":"code","61b84a12":"code","5406cc36":"code","e2dee172":"code","aa907020":"markdown","1e933d47":"markdown","46a3dd20":"markdown","e225aa74":"markdown","3d43d54c":"markdown","286ddce1":"markdown","095497ec":"markdown","0c648b8c":"markdown","8b6e9ee7":"markdown","0bc5df34":"markdown","a2ec4bac":"markdown","b7d613fb":"markdown","ea6dc630":"markdown","ec50a99b":"markdown","32a4b2fd":"markdown","e728d78a":"markdown","7fb4c49c":"markdown","24f71adb":"markdown","acb7fdce":"markdown","9fd63ec9":"markdown","e31d256b":"markdown","da506cdf":"markdown","0b34d22c":"markdown","b963e1b8":"markdown","05d608d0":"markdown","4daab770":"markdown","318d6ef6":"markdown","44a21989":"markdown","a65c3276":"markdown","ab72072b":"markdown","43861f9b":"markdown","09cfd384":"markdown","c9ff2572":"markdown","e3117bca":"markdown","a5978e75":"markdown","825c720c":"markdown","7fb7b8bf":"markdown"},"source":{"bd4b6c69":"# For getting Wikipedia page from URL through get request\nimport requests\n\n# For scraping information from the HTML source\n!pip install bs4\nfrom bs4 import BeautifulSoup\n\n# To create the DataFrame for neighborhood data\nimport pandas as pd\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# For handling arrays and vectors\nimport numpy as np\n\n# Supress warnings\nimport warnings\nwarnings.filterwarnings('ignore')","a735d070":"# Get the HTML source\nsource = requests.get(\"https:\/\/en.wikipedia.org\/wiki\/List_of_postal_codes_of_Canada:_M\")\nsoup = BeautifulSoup(source.text, 'lxml')\n\n# Initialise empty list to store table contents\ntable_contents = []\n\n# Scrape all information in the HTML 'table' tag\ntable = soup.find('table')\n# Scrape information in table rows i.e., HTML 'td' tag\nfor row in table.findAll('td'):\n    # Store record of DataFrame\n    cell = {}\n    # Drop record if borough is 'Not assigned'\n    if row.span.text=='Not assigned':\n        pass\n    else:\n        # Add PostalCode, Borough and Neighborhood to record\n        cell['Postal Code'] = row.p.text[:3]\n        cell['Borough'] = (row.span.text).split('(')[0]\n        cell['Neighborhood'] = (((((row.span.text).split('(')[1]).strip(')')).replace(' \/',',')).replace(')',' ')).strip(' ')\n        table_contents.append(cell)\n\n# Create Pandas DataFrame\ntoronto_DF = pd.DataFrame(table_contents)\n\n# Replace Borough values with appropriate name\ntoronto_DF['Borough'] = toronto_DF['Borough'].replace({'Downtown TorontoStn A PO Boxes25 The Esplanade':'Downtown Toronto', \n                                                     'East TorontoBusiness reply mail Processing Centre969 Eastern':'East Toronto Business', \n                                                     'EtobicokeNorthwest':'Etobicoke Northwest',\n                                                     'East YorkEast Toronto':'East York\/East Toronto', \n                                                     'MississaugaCanada Post Gateway Processing Centre':'Mississauga'})\n\n# Number of neighborhods in Toronto\nprint('There are {} neighborhoods in Toronto, Ontario.\\n'.format(toronto_DF.shape[0]))\n\n# Diaplay first 10 records\ntoronto_DF.head(10)","6751c14d":"# Get geospatial data for latitue and longitude values\ngeospatial_data = pd.read_csv('..\/input\/geospatial-coordinates\/Geospatial_Coordinates.csv')\n\n# Join DataFrame with geospatial DataFrame to get columns for latitude and longitue of each neighborhoopd\ntoronto_DF = toronto_DF.join(geospatial_data.set_index('Postal Code'), on='Postal Code')\n\n# Display first 10 records\ntoronto_DF.head(10)","d1302578":"# # To get latitude and longitude values for given address\nfrom geopy.geocoders import Nominatim\n\n# Create a Nominatim object for geolocation\ngeolocator = Nominatim(user_agent=\"ny_explorer\")\n\n# Get latitue and longitude values for Toronto\nlocation = geolocator.geocode('Toronto')\ntor_lat = location.latitude\ntor_lon = location.longitude\n\n# Display latitude and longitude values for Toronto\nprint('The geograpical coordinates of Toronto are {}, {}.'.format(tor_lat, tor_lon))","5e4e2579":"# To plot interactive maps\nimport folium\n\n# Matplotlib and associated packages\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\n\n# Create map of Toronto using latitude and longitude values\ntoronto_map = folium.Map(location=[tor_lat, tor_lon], zoom_start=11)\n\n# List of all boroughs\nboroughs = list(toronto_DF['Borough'].unique())\n\n# Set colour scheme for boroughs\ncolors_array = cm.rainbow(np.linspace(0, 1, len(boroughs)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# Add markers to map\nfor lat, lon, borough, neighborhood in zip(toronto_DF['Latitude'], toronto_DF['Longitude'], toronto_DF['Borough'], toronto_DF['Neighborhood']):\n    label = 'Neighborhood: {}\\nBorough: {}'.format(neighborhood, borough)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker([lat, lon], \n                        radius=5, \n                        popup=label, \n                        color=rainbow[boroughs.index(borough)], \n                        fill=True, \n                        fill_color='#3186cc', \n                        fill_opacity=0.7, \n                        parse_html=False).add_to(toronto_map)  \n\n# Display map for Toronto   \ntoronto_map","a87871e9":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\n\n# Your Foursqaure API Client ID\nCLIENT_ID = user_secrets.get_secret(\"foursquare-client-id\")\n\n# Your Foursquare API CLient secret\nCLIENT_SECRET = user_secrets.get_secret(\"foursquare-client-secret\")\n\n# Foursquare API version\nVERSION = '20180604'\n\nLIMIT = 100\nradius = 500\n\n# URL for getting data from Foursquare API\nurl = 'https:\/\/api.foursquare.com\/v2\/venues\/search?client_id={}&client_secret={}&ll={},{}&v={}&radius={}&limit={}'.format(CLIENT_ID, CLIENT_SECRET, tor_lat, tor_lon, VERSION, radius, LIMIT)","40760d09":"# Function to get nearby venues\ndef getNearbyVenues(boroughs, neighborhoods, latitudes, longitudes, radius=500):\n    venues_list=[]\n    for borough, neighborhood, lat, lng in zip(boroughs, neighborhoods, latitudes, longitudes):\n        # URL to get data about venues from Foursquare API\n        url = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(CLIENT_ID, CLIENT_SECRET, VERSION, lat, lng, radius, LIMIT)   \n        \n        # Get data through get request\n        results = requests.get(url).json()[\"response\"]['groups'][0]['items']\n        \n        # Add results to list of all venues\n        venues_list.append([(borough, neighborhood, lat, lng, v['venue']['name'], v['venue']['location']['lat'], v['venue']['location']['lng'], v['venue']['categories'][0]['name']) for v in results])\n\n    # Create DataFrame for nearby venues\n    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n    nearby_venues.columns = ['Borough', 'Neighborhood', 'Neighborhood Latitude', 'Neighborhood Longitude', 'Venue', 'Venue Latitude', 'Venue Longitude', 'Venue Category']\n    \n    # Return DataFrame of nearby venues\n    return(nearby_venues)","3edfadaa":"# Get nearby venues for Toronto\ntoronto_venues = getNearbyVenues(boroughs=toronto_DF['Borough'], neighborhoods=toronto_DF['Neighborhood'], latitudes=toronto_DF['Latitude'], longitudes=toronto_DF['Longitude'])\n\n# Print number of nearby venues returned\nprint('Foursquare retured {} nearby venues for Toronto.'.format(toronto_venues.shape[0]))\n\n# Print number of unique venue categories\nprint('There are {} uniques categories of venues.\\n'.format(len(toronto_venues['Venue Category'].unique())))\n\n# Display first 10 records for nearby venues for Toronto\ntoronto_venues.head(10)","76cba966":"# List of required venue types\nvenue_categories = ['Athletics & Sports', 'Baseball Field', 'Baseball Stadium', 'Basketball Court', 'Basketball Stadium',\n                    'Beach', 'Climbing Gym', 'College Gym', 'College Rec Center', 'College Stadium',\n                    'Curling Ice', 'Field', 'Golf Course', 'Gym', 'Gym \/ Fitness Center',\n                    'Gym Pool', 'Hockey Arena', 'Martial Arts School', 'Park', 'Playground',\n                    'Pool', 'Skate Park', 'Skating Rink', 'Soccer Field', 'Sporting Goods Shop',\n                    'Sports Bar', 'Stadium', 'Supplement Shop', 'Swim School', 'Tennis Court', 'Yoga Studio']\n\n# Filter toronto_venues DataFrame\ntoronto_sports_venues = toronto_venues[toronto_venues['Venue Category'].isin(venue_categories)].reset_index()\ntoronto_sports_venues.drop(['index'], axis=1, inplace=True)\n\n# Print number of sports venues\nprint('There are {} sports related venues in and around Toronto.\\n'.format(toronto_sports_venues.shape[0]))\n\n# Display first 10 records\ntoronto_sports_venues.head(10)","4e55dc65":"boroughs = toronto_sports_venues.groupby('Borough').count().Venue.sort_values(ascending=False).reset_index()\nx = list(boroughs['Borough'])\ny = list(boroughs['Venue'])\nplt.figure(figsize=(16, 12))\nplt.barh(x, y)\nplt.title('Number of sports venues per borough', fontdict=dict(fontsize=15), fontweight=\"bold\")\nplt.xlabel('Number of sports venues', fontdict=dict(fontsize=15), fontweight=\"bold\")\nplt.ylabel('Borough', fontdict=dict(fontsize=15), fontweight=\"bold\")\nplt.xticks(fontsize='large', weight='bold')\nplt.yticks(fontsize='large', weight='bold')\nfor i, v in enumerate(y):\n    plt.text(v+0.5, i-0.15, str(v), fontdict=dict(fontsize=15), fontweight='bold')\nplt.show()","d685d204":"# Create map of Toronto using latitude and longitude values\ntoronto_sports_map = folium.Map(location=[tor_lat, tor_lon], zoom_start=11)\n\n# List of all boroughs\nboroughs = list(toronto_DF['Borough'].unique())\n\n# Set colour scheme for boroughs\ncolors_array = cm.rainbow(np.linspace(0, 1, len(boroughs)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# Add markers to map\nfor lat, lon, venue, category, borough, neighborhood in zip(toronto_sports_venues['Venue Latitude'], toronto_sports_venues['Venue Longitude'], toronto_sports_venues['Venue'], toronto_sports_venues['Venue Category'], toronto_sports_venues['Borough'], toronto_sports_venues['Neighborhood']):\n    label = 'Venue Name: {}\\nVenue Category: {}\\nNeighborhood: {}\\nBorough: {}'.format(venue, category, neighborhood, borough)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker([lat, lon], \n                        radius=5, \n                        popup=label, \n                        color=rainbow[boroughs.index(borough)], \n                        fill=True, \n                        fill_color='#3186cc', \n                        fill_opacity=0.7, \n                        parse_html=False).add_to(toronto_sports_map)  \n\n# Display the map for sports venues in and around Toronto   \ntoronto_sports_map","d1a3b7f2":"# List of selected boroughs\nselected_boroughs = ['Downtown Toronto', 'Central Toronto', 'East Toronto', 'East Toronto Business', 'West Toronto', 'East York']\n\n# Filter DataFrame for sports venues for selected boroughs only\ntoronto_sports_venues_filtered = toronto_sports_venues[toronto_sports_venues['Borough'].isin(selected_boroughs)]\n\n# Keep only required columns\ncols = ['Borough', 'Neighborhood', 'Venue', 'Venue Latitude', 'Venue Longitude', 'Venue Category']\ntoronto_sports_venues_filtered = toronto_sports_venues_filtered[cols].reset_index()\ntoronto_sports_venues_filtered.drop(['index'], axis=1, inplace=True)\ntoronto_sports_venues_filtered.head(10)","81911d20":"# For k-means clustering\nfrom sklearn.cluster import KMeans\n\n# Set number of clusters\nkclusters = 4\n\n# DataFrame with data for clustering\ntoronto_sports_clustering = toronto_sports_venues_filtered[['Venue Latitude', 'Venue Longitude']]\n\n# Run k-means clustering\nkmeans = KMeans(n_clusters=kclusters, random_state=0).fit(toronto_sports_clustering)\n\n# Add cluster labels\ntoronto_sports_venues_clustered = toronto_sports_venues_filtered\ntoronto_sports_venues_clustered.insert(loc=6, column='Cluster Label', value=kmeans.labels_)","61b84a12":"# Plotting map\nmap_clusters = folium.Map(location=[tor_lat, tor_lon], zoom_start=12)\n\n# Set color scheme for the clusters\nx = np.arange(kclusters)\nys = [i + x + (i*x)**2 for i in range(kclusters)]\ncolors_array = cm.tab10(np.linspace(0, 1, len(ys)))\ntab10 = [colors.rgb2hex(i) for i in colors_array]\n\n# Add markers to the map\nmarkers_colors = []\nfor lat, lon, venue, category, cluster in zip(toronto_sports_venues_clustered['Venue Latitude'], toronto_sports_venues_clustered['Venue Longitude'], toronto_sports_venues_clustered['Venue'], toronto_sports_venues_clustered['Venue Category'], toronto_sports_venues_clustered['Cluster Label']):\n    label = folium.Popup('Venue Name: {}\\nVenue Category: {}\\n(Cluster {})'.format(venue, category, str(cluster)), parse_html=True)\n    folium.CircleMarker([lat, lon], \n                        radius=5, \n                        popup=label, \n                        color=tab10[int(cluster)], \n                        fill=True, \n                        fill_color=tab10[int(cluster)], \n                        fill_opacity=1.0).add_to(map_clusters)\n\n# Display map with clusters\nmap_clusters","5406cc36":"# Coordinates of cluster centers\nlatitudes, longitudes, addresses = [], [], []\nfor center in kmeans.cluster_centers_:\n    latitudes.append(center[0])\n    longitudes.append(center[1])\n    location = geolocator.reverse(\"{}, {}\".format(center[0], center[1]))\n    addresses.append(location.address)\n\n# Create DataFrame\nselected_locations = pd.DataFrame({'Latitude':latitudes, 'Longitude':longitudes, 'Address':addresses})\nselected_locations","e2dee172":"# Plotting map\nselected_locations_map = folium.Map(location=[tor_lat, tor_lon], zoom_start=12)\n\n# Set color scheme for the clusters\nx = np.arange(kclusters)\nys = [i + x + (i*x)**2 for i in range(kclusters)]\ncolors_array = cm.tab10(np.linspace(0, 1, len(ys)))\ntab10 = [colors.rgb2hex(i) for i in colors_array]\n\n# Add markers to the map\nmarkers_colors = []\nfor lat, lon, addr in zip(selected_locations['Latitude'], selected_locations['Longitude'], selected_locations['Address']):\n    label = folium.Popup('Address: ' + addr, parse_html=True)\n    folium.CircleMarker([lat, lon], \n                        radius=5, \n                        popup=label, \n                        color=tab10[1], \n                        fill=True, \n                        fill_color=tab10[1], \n                        fill_opacity=1.0).add_to(selected_locations_map)\n\n# Display map with clusters\nselected_locations_map","aa907020":"Finally, here I have added the columns for latitude and longitude values by joining the DataFrame created above with the geospatial dataset.","1e933d47":"For further analysis, let's narrow down our focus to these selected boroughs having a high density of sports related venues and find some suitable neighborhoods in these boroughs.\n\nTo select suitable neighborhoods in these boroughs, I have performed clustering based on the latitude and longitude values of each neighborhood. The cluster centroids will then correspond to the required suitable neighborhoods.","46a3dd20":"The following code cell creates a DataFrame to store the details about the cluster centers identified using k-means clustering performed above. It includes the latitude and longitude of the target location (cluster center), as well as the address.","e225aa74":"The final data will include the following:\n1. Neighborhood name\n2. Borough name\n3. Postal Code\n4. Latitude and longitude values\n5. Venues in each neighborhood\n\nThis data will be analyzed to provide a solution to the discussed business problem.","3d43d54c":"Further, let's take a look at a map of Toronto showing the different sports venues, based on the data collected so far.","286ddce1":"Next, the Foursquare API is used to get data about venues near each neighborhood in Toronto. For this, the Foursquare API needs to be configured with the client ID and client secret.","095497ec":"# Conclusion <a name=\"conclusion\"><\/a>","0c648b8c":"As expected, a lot of the sports venues are located close to each other in the borough of Downtown Toronto (as shown on the map in dark blue colour).\n\nA considerably high density of sports related venues is also observed in the surrounding boroughs of Central Toronto, East Toronto, East Toronto Business, West Toronto and East York.","8b6e9ee7":"Next, I have clustered the venues into 4 clusters based on the venue coordinates using k-means clustering algorithm.","0bc5df34":"In the following code cell, I have used geopy to get the coordinates for Toronto using reverse geocoding.","a2ec4bac":"Therefore, data for all neighborhoods in Toronto, including their names, respective boroughs and postal codes will be collected from Wikipedia by web scraping.\n\nFurther, data about all different venues in each neighborhood will be collected using the Foursquare Places API, using latitude and longitude values, which will be collected using geospatial data.\n","b7d613fb":"In the next 2 code cells, I have gathered data about venues in and around Toronto, along with all related information for the venues, through the Foursquare API.\n\nFinally, I have created a DataFrame that stores details about various different venues in the different neighborhoods of Toronto, along with their coordinates and venue types (catageories).","ea6dc630":"The task is to identify and group neighborhoods in the city of Toronto, Ontario that the company must target and setup their operations and stores in. Since the company specializes in sports-related consumer goods, the ideal neighborhood(s) or groups of neighborhoods for the company would be neighborhoods with many sport-related facilities, such as gyms, yoga classes, soccer fields, and so on.\n\nThus, the task is to identify such neighborhoods and present an analysis, outlining which neighborhood(s) should UP! Sports setup their retail stores in, as well as the rationale behind the same.","ec50a99b":"## Data Collection <a name=\"collection\"><\/a>","32a4b2fd":"# Data <a name=\"data\"><\/a>","e728d78a":"# Analysis <a name=\"analysis\"><\/a>","7fb4c49c":"## Business Use-case <a name=\"usecase\"><\/a>","24f71adb":"The data that will be used for this business use-case is location data for neighborhoods in Toronto, Ontario, Canada. This data will be collected through Wikipedia, along with the Foursquare API.\n\nThe Wikipedia page \"List of postal codes of Canada: M\" gives details and list of all postal codes in Toronto, Ontario.\n\n[List of postal Codes of Canada: M](https:\/\/en.wikipedia.org\/wiki\/List_of_postal_codes_of_Canada:_M)","acb7fdce":"UP! Sports is a (hypothetical) retail company selling sporting goods, equipment, sports apparel, and much more, for various sporting activities, all under one roof.\n\nBusiness is booming and the company has decided to expand its operations. For\nthe same, the company is looking to setup stores in Canada, starting with the\ncity of Toronto, Ontario. However, the company wants to make this decision using a strategic and methodical approach.\n","9fd63ec9":"Our analysis shows that there are **168 sports related venues** in and around Toronto, Ontario, located in **103 neighborhoods.**\n\nA high density of such venues is observed in **Downtown Toronto** as well as the surrounding boroughs of **East Toronto, East Toronto Business, Central Toronto, West Toronto, and East York.**\n\nUpon grouping these venues into 4 different clusters, we have identified 4 locations that the company can target in order to setup their first retail store in Toronto, Ontario, Canada.\n\nThese locations are:\n\n1. 382, Shaw Street, University\u2014Rosedale, Old Toronto, Toronto, Golden Horseshoe, Ontario, M6G 1C5, Canada\n\n2. 12, Glebemount Avenue, Danforth Village, Beaches\u2014East York, Old Toronto, Toronto, Golden Horseshoe, Ontario, M4C 1K9, Canada\n\n3. 357, Manor Road East, Davisville, Don Valley West, Old Toronto, Toronto, Golden Horseshoe, Ontario, M4S 1S3, Canada\n\n4. Tim Hortons, Grand Opera Lane, King East, Toronto Centre, Old Toronto, Toronto, Golden Horseshoe, Ontario, M5H, Canada\n\nTherefore, the results of our analysis provide valuable information to the company which can be used to solve the problem at hand.","e31d256b":"In the following code cell,  data is scraped from the Wikipedia page titled 'List of postal codes of Canada: M'. The scraped web page is transformed into a Pandas DataFrame.","da506cdf":"## Data Description <a name=\"datadesc\"><\/a>","0b34d22c":"Let's now plot the clustered venues using folium.","b963e1b8":"# Introduction: Business Problem <a name=\"introduction\"><\/a>","05d608d0":"Here, I have plotted a horizontal bar chart showing the number of sports related venues in each borough.","4daab770":"# Results and Discussion <a name=\"results\"><\/a>","318d6ef6":"Let's plot these target location on a map to visualize the options.","44a21989":"Since we are only interested in venues related to sporting activities, such as gyms, yoga classes, etc., I have filtered the DataFrame for venues in and around Toronto to include only such venues.","a65c3276":"## Exploratory Data Analysis <a name=\"eda\"><\/a>","ab72072b":"To solve the problem at hand, neighborhoods and boroughs that have a **high density of sports related venues**, such as gyms, stadiums, etc., have to be identified.\n\nTo do this, we have already collected the required data, through web scraping and through the Foursquare API.\n\nThe first step of the analysis involves filtering the collected data to **include only those venues that are related to sporting activities.**\n\nAfter filtering out such venues, some basic **exploratory analysis** is done to get more insight on the available data. This involves plotting some charts and maps to visualize the data. Through these visualizations, we will be able to **identify the boroughs that have a high density of sports related venues.**\n\nFinally, **the selected venues are clustered** to identify cluster centers, which will become the **target locations** for the company. For this, **k-means clustering algorithm** is used.","43861f9b":"Next, I have created a map for Toronto using folium. I have highlighted the different neighborhoods scraped in the previous few code cells.","09cfd384":"Acknowledging the power of data and analytics, UP! Sports has decided to use a data science based approach to support their decision-making process for business expansion.","c9ff2572":"By far, Downtown Toronto has the greatest number of sports related venues (76).\n\nNorth York ranks 2nd in terms of the number of sports venues in the borough. However, these venues are scattered around North York i.e., the density of sports related venues in North York is quite low (see map in next code cell).\n\nTargeting neighborhoods in Downtown Toronto can be a great starting point for the company to set up their first store in Toronto, Ontario.","e3117bca":"## Clustering Venues <a name=\"clustering\"><\/a>","a5978e75":"# Methodology <a name=\"methodology\"><\/a>","825c720c":"## Task Description <a name=\"task\"><\/a>","7fb7b8bf":"Hence, we have successfully identified 4 prime locations that can be targetted by UP! Sports as locations to setup their first retail store in Toronto, Ontario, Canada."}}