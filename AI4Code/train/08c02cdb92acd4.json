{"cell_type":{"d8a97730":"code","ed61713d":"code","b1c79c21":"code","07bfd7b4":"code","26b44202":"code","c7fc3b49":"code","09ef9020":"code","f8bd72f6":"code","d939147e":"code","8d364686":"code","543094ec":"code","f012bd43":"code","cc62c901":"code","9502e383":"code","f71d755b":"code","bb81d8b1":"code","c14f9a8a":"code","bb71c403":"code","990dfef9":"code","08d7bba6":"code","4f078f9f":"code","204d62aa":"code","afb81754":"code","d049f6c2":"code","4317df54":"code","48ba356a":"code","a1f2ae92":"code","02a59714":"code","59313fdd":"code","78317873":"code","a6244c1e":"code","b5fdff8e":"code","7f0d75bc":"code","a69fbfd4":"code","fc7f6427":"code","29a1ff7b":"code","30d1a08d":"markdown","5328c898":"markdown","798e9053":"markdown","3accc6ff":"markdown","ba3027f1":"markdown","794667c9":"markdown","f45d72e3":"markdown","30dfac70":"markdown","5d84d642":"markdown","244b6022":"markdown","189580e0":"markdown","38f54c03":"markdown"},"source":{"d8a97730":"import numpy as np\nimport pandas as pd\n\nimport warnings\nwarnings.simplefilter('ignore')\n\nimport gc\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ed61713d":"train = pd.read_csv('..\/input\/liverpool-ion-switching\/train.csv')","b1c79c21":"train.shape","07bfd7b4":"train.head()","26b44202":"test = pd.read_csv('..\/input\/liverpool-ion-switching\/test.csv')","c7fc3b49":"test.shape","09ef9020":"test.head()","f8bd72f6":"test['time'] = (test['time'] - 500).round(4)","d939147e":"def add_batch(data, batch_size):\n    c = 'batch_' + str(batch_size)\n    data[c] = 0\n    ci = data.columns.get_loc(c)\n    n = int(data.shape[0] \/ batch_size)\n    print('Batch size:', batch_size, 'Column name:', c, 'Number of batches:', n)\n    for i in range(0, n):\n        data.iloc[i * batch_size: batch_size * (i + 1), ci] = i","8d364686":"for batch_size in [500000, 50000, 5000]:\n    add_batch(train, batch_size)\n    add_batch(test, batch_size)","543094ec":"original_batch_column = 'batch_500000'\n\nbatch_columns = [c for c in train.columns if c.startswith('batch')]\nbatch_columns","f012bd43":"batch_6 = train[train[original_batch_column] == 6]","cc62c901":"import matplotlib.pyplot as plt\n\n\nplt.figure(figsize=(15, 5))\nplt.plot(batch_6['signal'], color='blue')\nplt.plot(batch_6['open_channels'], color='green')\nplt.show()","9502e383":"# From https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\n\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n#        else:\n#            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\n\ntrain = reduce_mem_usage(train)\ntest = reduce_mem_usage(test)","f71d755b":"def add_stats(data, batch_column, column):\n    \n    # mean,std: one value per batch\n    stats = {}\n    group = data.groupby(batch_column)[column]\n    stats['mean']   = group.mean()\n    stats['median'] = group.median()\n    stats['max']    = group.max()\n    stats['min']    = group.min()\n    stats['std']    = group.std()\n    \n    c = column + '_' + batch_column\n    \n    # apply it to batches\n    for key in stats:\n        data[c + '_' + key] = data[batch_column].map(stats[key].to_dict())\n    \n    # range\n    data[c + '_range'] = data[c + '_max'] - data[c + '_min']\n    data[c + '_max_to_min_ratio'] = data[c + '_max'] \/ data[c + '_min']","bb81d8b1":"for batch_column in batch_columns:\n    if batch_column == original_batch_column:\n        continue\n    \n    add_stats(train, batch_column, 'signal')\n    # add_stats(train, batch_column, 'open_channels')\n    \n    add_stats(test, batch_column, 'signal')","c14f9a8a":"def add_shifted_signal(data, shift):\n    for batch in data[original_batch_column].unique():\n        m = data[original_batch_column] == batch\n        new_feature = 'shifted_signal_'\n        if shift > 0:\n            shifted_signal = np.concatenate((np.zeros(shift), data.loc[m, 'signal'].values[:-shift]))\n            new_feature += str(shift)\n        else:\n            t = -shift\n            shifted_signal = np.concatenate((data.loc[m, 'signal'].values[t:], np.zeros(t)))\n            new_feature += 'minus_' + str(t)\n        data.loc[m, new_feature] = shifted_signal","bb71c403":"add_shifted_signal(train, -1)\nadd_shifted_signal(test, -1)","990dfef9":"add_shifted_signal(train, 1)\nadd_shifted_signal(test, 1)","08d7bba6":"exclude_columns = ['time', 'signal', 'open_channels'] + batch_columns","4f078f9f":"def add_signal_minus(data, exclude_columns):\n    for column in [c for c in data.columns if c not in exclude_columns]:\n        data['signal_minus_' + column] = data['signal'] - data[column]","204d62aa":"add_signal_minus(train, exclude_columns)\nadd_signal_minus(test, exclude_columns)","afb81754":"# groups = train['batch'].copy()\n\ny_train = train['open_channels'].copy()\nx_train = train.drop(['time', 'open_channels'] + batch_columns, axis=1)\n\nx_test = test.drop(['time'] + batch_columns, axis=1)","d049f6c2":"list(x_train.columns)","4317df54":"del train\ndel test\n\ngc.collect()","48ba356a":"set(x_train.columns) ^ set(x_test.columns)","a1f2ae92":"from sklearn.preprocessing import StandardScaler\n\n\n# scaler = StandardScaler()\n# x_train = scaler.fit_transform(x_train)\n# x_test = scaler.transform(x_test)\n\nx_train = x_train.values\nx_test = x_test.values","02a59714":"from sklearn.model_selection import train_test_split\n\nimport lightgbm as lgb","59313fdd":"x_train_train, x_train_valid, y_train_train, y_train_valid = train_test_split(x_train, y_train, test_size=0.3, random_state=42)","78317873":"params = {\n    'objective': 'multiclass',\n    'num_class': len(np.unique(y_train)),\n    'metric': 'multi_logloss',\n    'learning_rate': 0.05,\n    'max_depth': -1,\n    'num_leaves': 200,\n    'num_threads': 4,\n    'random_state': 42\n}","a6244c1e":"lgb_train = lgb.Dataset(data=x_train_train.astype('float32'), label=y_train_train.astype('float32'))\nlgb_valid = lgb.Dataset(data=x_train_valid.astype('float32'), label=y_train_valid.astype('float32'))","b5fdff8e":"lgb_model = lgb.train(params, lgb_train, 100, valid_sets=lgb_valid,\n                      early_stopping_rounds=100, verbose_eval=100)","7f0d75bc":"y_pred = lgb_model.predict(x_test, num_iteration=lgb_model.best_iteration)","a69fbfd4":"y_pred = np.argmax(y_pred, axis=1)","fc7f6427":"plt.hist(y_pred)\nplt.show()","29a1ff7b":"submission = pd.read_csv('..\/input\/liverpool-ion-switching\/sample_submission.csv')\nsubmission['open_channels'] = y_pred\nsubmission.to_csv('submission.csv', index=False, float_format='%.4f')\n\nsubmission.head()","30d1a08d":"## Shift time in test data","5328c898":"## Visualize","798e9053":"## Standard scaling","3accc6ff":"## Free memory","ba3027f1":"## Visualize predictions","794667c9":"## Submit predictions","f45d72e3":"## Create 'batch' feature","30dfac70":"## Add copies of the signal with time shift","5d84d642":"## Add signal minus other features","244b6022":"## Extract target variable","189580e0":"## Add stats","38f54c03":"## LightGBM"}}