{"cell_type":{"bb013ec5":"code","829d902e":"code","bdd546bb":"code","a37eeb12":"code","88e753fc":"code","eadc45b3":"code","90619782":"code","4425bd3c":"code","4e8ba645":"code","d7cce3c5":"code","ffe1f62f":"code","395b62a8":"code","9b3cd630":"markdown"},"source":{"bb013ec5":"import tensorflow as tf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Load the fashion-mnist pre-shuffled train data and test data\ndata_train = pd.read_csv('..\/input\/fashion-mnist_train.csv')\ndata_test = pd.read_csv('..\/input\/fashion-mnist_test.csv')","829d902e":"x_train = np.array(data_train.iloc[:, 1:])\ny_train = np.array(data_train.iloc[:, 0])\n\nx_test = np.array(data_test.iloc[:, 1:])\ny_test = np.array(data_test.iloc[:, 0])\n\nprint(\"x_train shape:\", x_train.shape, \"y_train shape:\", y_train.shape)","bdd546bb":"print(\"x_train shape:\", x_train.shape, \"y_train shape:\", y_train.shape)\n\nx_train = x_train.reshape(x_train.shape[0], 28, 28)\nx_test = x_test.reshape(x_test.shape[0], 28, 28)\n\n# Print the number of training and test datasets\nprint(x_train.shape[0], 'train set')\nprint(x_test.shape[0], 'test set')\n\n# Define the text labels\nfashion_mnist_labels = [\"T-shirt\/top\",  # index 0\n                        \"Trouser\",      # index 1\n                        \"Pullover\",     # index 2 \n                        \"Dress\",        # index 3 \n                        \"Coat\",         # index 4\n                        \"Sandal\",       # index 5\n                        \"Shirt\",        # index 6 \n                        \"Sneaker\",      # index 7 \n                        \"Bag\",          # index 8 \n                        \"Ankle boot\"]   # index 9","a37eeb12":"plt.imshow(x_train[20])","88e753fc":"print(fashion_mnist_labels[y_train[20]])","eadc45b3":"x_train = x_train.astype('float32') \/ 255\nx_test = x_test.astype('float32') \/ 255","90619782":"# Further break training data into train \/ validation sets\n(x_train, x_valid) = x_train[5000:], x_train[:5000] \n(y_train, y_valid) = y_train[5000:], y_train[:5000]\n\n# Reshape input data\nx_train = x_train.reshape(x_train.shape[0], 28,28, 1)\nx_valid = x_valid.reshape(x_valid.shape[0], 28,28, 1)\nx_test = x_test.reshape(x_test.shape[0], 28,28, 1)\n\n# One-hot encode the labels\ny_train = tf.keras.utils.to_categorical(y_train, 10)\ny_valid = tf.keras.utils.to_categorical(y_valid, 10)\ny_test = tf.keras.utils.to_categorical(y_test, 10)\n\n# Print training set shape\nprint(\"x_train shape:\", x_train.shape, \"y_train shape:\", y_train.shape)\n\n# Print the number of training, validation, and test datasets\nprint(x_train.shape[0], 'train set')\nprint(x_valid.shape[0], 'validation set')\nprint(x_test.shape[0], 'test set')","4425bd3c":"model = tf.keras.Sequential()\n\n# Must define the input shape in the first layer of the neural network\nmodel.add(tf.keras.layers.Conv2D(filters=64, kernel_size=2, padding='same', activation='relu', input_shape=(28,28,1))) \nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Conv2D(filters=64, kernel_size=2, padding='same', activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.5))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n# Take a look at the model summary\nmodel.summary()","4e8ba645":"model.compile(loss='categorical_crossentropy',\n             optimizer='adam',\n             metrics=['accuracy'])","d7cce3c5":"model.fit(x_train,y_train, batch_size=100, epochs=100, validation_data=(x_valid, y_valid))","ffe1f62f":"# Evaluate the model on test set\nscore = model.evaluate(x_test, y_test, verbose=0)\n\n# Print test accuracy\nprint('\\n', 'Test accuracy:', score[1])","395b62a8":"y_hat = model.predict(x_test)\n\n# Plot a random sample of 10 test images, their predicted labels and ground truth\nfigure = plt.figure(figsize=(20, 8))\nfor i, index in enumerate(np.random.choice(x_test.shape[0], size=15, replace=False)):\n    ax = figure.add_subplot(3, 5, i + 1, xticks=[], yticks=[])\n    # Display each image\n    ax.imshow(np.squeeze(x_test[index]))\n    predict_index = np.argmax(y_hat[index])\n    true_index = np.argmax(y_test[index])\n    # Set the title for each image\n    ax.set_title(\"{} ({})\".format(fashion_mnist_labels[predict_index], \n                                  fashion_mnist_labels[true_index]),\n                                  color=(\"green\" if predict_index == true_index else \"red\"))","9b3cd630":"# Fashion-MNIST\nI will try to build a Convolution Neural Network using Keras and check how good does it work. Fashion-MNIST can be used as drop-in replacement for the original MNIST dataset (10 categories of handwritten digits). It shares the same image size (28x28) and structure of training (60,000) and testing (10,000) splits. It\u2019s great for writing \u201chello world\u201d tutorials for deep learning."}}