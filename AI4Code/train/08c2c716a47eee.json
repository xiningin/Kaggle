{"cell_type":{"91375875":"code","2bf11c24":"code","72497da5":"code","71e3a619":"code","1663d6e6":"code","3c460043":"code","bfa3f4df":"code","552a22d7":"code","21d3745d":"code","5b74d9fa":"code","7dc9f08b":"code","3b86a26b":"code","c95e7a69":"code","c8f1d247":"code","c3efa661":"code","2a5ead84":"code","cf5c5c68":"code","091356f5":"code","8891c14c":"code","c96d51b7":"code","b80b402a":"code","78c5bba5":"code","a4b3957a":"code","b7e2c878":"markdown","ccfbc17f":"markdown"},"source":{"91375875":"import pandas as pd\nimport numpy as np","2bf11c24":"df = pd.read_csv('..\/input\/london-bike-sharing-dataset\/london_merged.csv')\ndf.head()","72497da5":"df.timestamp.value_counts()","71e3a619":"for i in range(0,len(df)):\n    df.timestamp[i] = df.timestamp[i][0:7]\n\n# I only want the year and the month of the data to do my time series","1663d6e6":"df.head()","3c460043":"df1 = df[['timestamp' , 'cnt']]\n\n# I also only want the timestamp and the count for my time series","bfa3f4df":"df1","552a22d7":"a = []\nfor i in range(1,10):\n  for n in range(15,17):\n    a.append({\"year\/month\":f\"20{n}-0{i}\",\"count\":df1.loc[df1['timestamp'] == f'20{n}-0{i}', 'cnt'].sum()})\nfor i in range(10,13):\n  for n in range(15,17):\n    a.append({\"year\/month\":f\"20{n}-{i}\",\"count\":df1.loc[df1['timestamp'] == f'20{n}-{i}', 'cnt'].sum()})\n\n# this forloop of code will sum all the bikes for the given year + month","21d3745d":"bikes = pd.DataFrame.from_dict(a)\nbikes['year\/month'] = pd.to_datetime(bikes['year\/month'])\nbikes = bikes.sort_values(by=['year\/month'])\nbikes.index = sorted(bikes['year\/month'])\nbikes.drop(['year\/month'],axis = 1, inplace = True)\n\n# formatting the aforementioned code into a datatime dataframe","5b74d9fa":"bikes","7dc9f08b":"import matplotlib.pyplot as plt\nfrom matplotlib.dates import DateFormatter\nimport matplotlib.dates as mdates\n\nfig, ax = plt.subplots(figsize=(20, 10))\n\n\nax.plot(np.array(bikes.index.values),\n        np.array(bikes), '-o',\n        color = 'purple')\n\n\nax.set(xlabel=\"Date\",\n       ylabel=\"Count\",\n       title=\"Number of bikes\")\n\nax.xaxis.set_minor_locator(mdates.MonthLocator(interval=1))\nax.xaxis.set_major_locator(mdates.MonthLocator(interval = 3))\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))\n\nplt.show()\n\n#plotting the created dataframe to see any trends and seasonality in the dataframe\n# as we can see in the summer time there is a peak in the number of bikes rented\n# and as the weather gets colder the number decreases","3b86a26b":"from statsmodels.graphics.tsaplots import plot_acf,plot_pacf","c95e7a69":"from statsmodels.tsa.seasonal import seasonal_decompose\nfrom pylab import rcParams\nresult = seasonal_decompose(bikes['count'] , model = 'multiplicative')\n\nrcParams['figure.figsize'] = 12,5\n\nresult.plot();","c8f1d247":"train_data = bikes.iloc[:13]\ntest_data = bikes.iloc[12:]","c3efa661":"from statsmodels.tsa.holtwinters import ExponentialSmoothing\n\nfitted_model = ExponentialSmoothing(train_data['count'],\n                                   trend = 'mul' , \n                                   seasonal = 'mul' , \n                                   seasonal_periods = 12).fit()","2a5ead84":"test_predictions = fitted_model.forecast(12)","cf5c5c68":"pd.options.display.float_format = '{:.2f}'.format\ntest_predictions","091356f5":"train_data['count'].plot(legend = True , label = 'Train');\ntest_data['count'].plot(legend = True , label = 'Test');\ntest_predictions.plot(legend = True , label = 'PREDICTION');\n\nplt.show()\n\n# We can see that my prediction is a bit off from the actual testing data set\n# Nevertheless it is still a decent prediction for one year","8891c14c":"from sklearn.metrics import mean_squared_error , mean_absolute_error\n\nprint(test_data.describe())\nprint('')\nprint('mean absolute error:', np.round(mean_absolute_error(test_data , test_predictions),2))\nprint('root mean squared error:', np.round(mean_squared_error(test_data, test_predictions)**(1\/2),2))\n\n# The root mean squared error in comparison to the STD is a pretty good value","c96d51b7":"final_model = ExponentialSmoothing(bikes['count'] , trend = 'mul'\n                                  , seasonal = 'mul' , seasonal_periods = 12).fit()","b80b402a":"forecast_predictions = final_model.forecast(12)","78c5bba5":"bikes['count'].plot(legend = True, label = 'Counted Bikes');\nforecast_predictions.plot(legend = True , label = 'Yearly Prediction');\nplt.show()\n\n# We can see that our prediction into the future somewhat replicates the trend\n# of the previous two years","a4b3957a":"FP = pd.Series(forecast_predictions)\nFP","b7e2c878":"Our numerical values to predict the number of bikes one year in the future","ccfbc17f":"Our RMSE in comparison to the data is pretty good, it is much lower than the standard deviation."}}