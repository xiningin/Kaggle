{"cell_type":{"9b9b48aa":"code","a55eb192":"code","52241f6a":"code","422134e1":"code","480d76f0":"code","bbbbdad5":"code","49081ae8":"code","32abf27d":"code","317f88d7":"code","f90e2689":"code","1f2ac815":"code","b3c63656":"code","715474b6":"code","4722b758":"code","e2575167":"code","8540fbeb":"code","84505bb4":"code","d40c2789":"code","6198adb2":"code","c66486da":"code","1621a4c1":"code","9d6ae012":"code","8292e96b":"code","2decaefe":"code","e208c0d2":"code","9ab90063":"markdown","7043816e":"markdown","866c3fa7":"markdown","01f03d32":"markdown","9cdf7178":"markdown","1b5a9394":"markdown","de3682ce":"markdown","bbb53c4e":"markdown","5725cd30":"markdown","a691fc41":"markdown","525774ac":"markdown","d2378b23":"markdown","0eec082e":"markdown","5500e0d8":"markdown","0c7574ff":"markdown","d27c8db8":"markdown","eb5bf92b":"markdown","356278ff":"markdown","9dea51e0":"markdown","a8ed78c9":"markdown","43a47417":"markdown","5cc941aa":"markdown","88277542":"markdown","5c7f1c05":"markdown","e9ef68a1":"markdown","2b0384c1":"markdown"},"source":{"9b9b48aa":"import numpy as np\nimport json\nimport matplotlib.pyplot as plt\nfrom tqdm.auto import tqdm\nimport time\n\nactions = [\n    'CONVERT',\n    'NONE',\n    'EAST',\n    'WEST',\n    'NORTH',\n    'SOUTH',\n]\naction_map = {\n    'CONVERT': 0,\n    'EAST': 2,\n    'WEST': 3,\n    'NORTH': 4,\n    'SOUTH': 5,\n}\nN_ACTIONS = 6\n\ndef plot(state: np.ndarray, title = None, subtitles = None, size=5, vmax=1):\n    D = state.ndim\n    R = 1 if D < 4 else state.shape[-4]\n    C = 1 if D < 3 else state.shape[-3]\n    plt.figure(figsize=(C*size, R*size))\n    if title is not None:\n        plt.suptitle(title)\n    for r in range(R):\n        for c in range(C):\n            plt.subplot(R, C, r * C + c + 1)\n            X = state.shape[-1]\n            Y = state.shape[-2]\n            board = state if D == 2 else state[c] if D == 3 else state[r][c]\n            subtitle = None if subtitles is None else subtitles if D == 2 else subtitles[c] if D == 3 else subtitles[r][c]\n            plt.imshow(board, cmap='binary', vmax=vmax, extent=(0, X, Y, 0))\n            ax = plt.gca();\n            ax.set_xticks(range(0,X+1), minor=True)\n            ax.set_yticks(range(0,Y+1), minor=True)\n            ax.set_xticks(range(0,X+1,3))\n            ax.set_yticks(range(0,Y+1,3))\n            ax.set_xticklabels(range(0,X+1,3))\n            ax.set_yticklabels(range(0,Y+1,3))\n            ax.grid(which='both', color='k', linestyle='-', linewidth=1)\n            if subtitle is not None:\n                plt.title(subtitle)\n    plt.show()","a55eb192":"class Simulator:\n    def __init__(self, configuration, N_PLAYERS):\n        self.configuration = configuration\n        self.N_PLAYERS = N_PLAYERS\n        self.player_data = [[0, {}, {}] for _ in range(self.N_PLAYERS)]\n\n        # Halite configuration\n        self.START_HALITE = configuration['startingHalite']\n        self.MAX_HALITE = configuration['maxCellHalite']\n        self.COST_SPAWN = configuration['spawnCost']\n        self.COST_CONVERT = configuration['convertCost']\n        self.RATE_COLLECT = configuration['collectRate']\n        self.RATE_REGEN = configuration['regenRate']\n\n        # Board dimentions\n        self.N_CELLS = configuration['size']\n        self.SIZE_DATA = (self.N_CELLS, self.N_CELLS)\n        self.SIZE_PLAYER_DATA = (self.N_PLAYERS, self.N_CELLS, self.N_CELLS)\n        self.SIZE_ACTION_DATA = (self.N_PLAYERS, N_ACTIONS, self.N_CELLS, self.N_CELLS)\n        \n        # We need our simulator to produce same replay as original kaggle_environment would do.\n        # We can not use np.round because it can give different result in some corner cases when value is close to or is exactly half integer.\n        # Read more on differences: https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.around.html#numpy.around\n        # We also have to convert numpy float32\/float64 type to python float before rounding, otherwise result can be different in some cases\n        # Coming up with this approach was the most trickiest part of the simulator\n        self.round3 = np.frompyfunc(lambda x: round(float(x) * (1 + self.RATE_REGEN), 3), 1, 1)\n        \n        # Board data\n        self.player_halite = np.zeros(self.N_PLAYERS)\n        self.board_halite = np.zeros(self.SIZE_DATA)\n        self.yards = np.zeros(self.SIZE_PLAYER_DATA, dtype=bool)\n        self.ships = np.zeros(self.SIZE_PLAYER_DATA, dtype=bool)\n        self.ship_halite = np.zeros(self.SIZE_PLAYER_DATA)\n\n        # Action data\n        self.yard_actions = np.zeros(self.SIZE_PLAYER_DATA, dtype=bool)\n        self.ship_actions = np.zeros(self.SIZE_ACTION_DATA, dtype=bool)\n\n        # Intermediate data\n        self.next_places = np.zeros(self.SIZE_ACTION_DATA, dtype=bool)\n        self.next_halite = np.zeros(self.SIZE_ACTION_DATA, dtype=int)","52241f6a":"with open('..\/input\/sample-halite-4-playground-replay\/8603037.json') as f:\n    replay_data = json.load(f)\n\nN_PLAYERS = len(replay_data['info']['TeamNames'])\nPLOT_MAX_HALITE = replay_data['configuration']['maxCellHalite'] + replay_data['configuration']['convertCost']\nsimulator = Simulator(replay_data['configuration'], N_PLAYERS)\n\nreplay_steps = replay_data['steps']\nreplay_length = len(replay_steps)\n\nplayer_legends = [f'Player {p}' for p in range(N_PLAYERS)]\naction_legends = [[f'Player {p} {actions[a]}' for a in range(N_ACTIONS)] for p in range(N_PLAYERS)]","422134e1":"def parse(self, observation):\n    self.board_halite.flat[:] = observation['halite']\n    self.yards = np.zeros(self.SIZE_PLAYER_DATA, dtype=bool)\n    self.ships = np.zeros(self.SIZE_PLAYER_DATA, dtype=bool)\n    self.ship_halite = np.zeros(self.SIZE_PLAYER_DATA)\n    player_data = observation['players']\n    for p in range(self.N_PLAYERS):\n        self.player_halite[p] = player_data[p][0]\n        self.player_data[p][0] = player_data[p][0]\n        self.player_data[p][1] = player_data[p][1]\n        self.player_data[p][2] = player_data[p][2]\n        self.yards[p].flat[list(self.player_data[p][1].values())] = True\n        for v in self.player_data[p][2].values():\n            self.ships[p].flat[v[0]] = True\n            self.ship_halite[p].flat[v[0]] = v[1]\n\nsetattr(Simulator, 'parse', parse)\n\nsimulator.parse(replay_steps[0][0]['observation'])\n\nplot(simulator.board_halite, 'Board halite', vmax=simulator.MAX_HALITE)\nplot(simulator.yards, 'Shipyards', player_legends)\nplot(simulator.ships, 'Ships', player_legends)\nplot(simulator.ship_halite, 'Ship halite', player_legends, vmax=PLOT_MAX_HALITE)","480d76f0":"def parse_actions(self, step_data):\n    self.yard_actions = np.zeros(self.SIZE_PLAYER_DATA, dtype=bool)\n    self.ship_actions = np.zeros(self.SIZE_ACTION_DATA, dtype=bool)\n    for p in range(self.N_PLAYERS):\n        action_data = step_data[p]['action']\n        for key in self.player_data[p][1]:\n            if key in action_data and action_data[key] == 'SPAWN':\n                self.yard_actions[p].flat[self.player_data[p][1][key]] = True\n        for key in self.player_data[p][2]:\n            a = 1\n            if key in action_data and action_data[key] in action_map:\n                a = action_map[action_data[key]]\n            self.ship_actions[p][a].flat[self.player_data[p][2][key][0]] = True\n\nsetattr(Simulator, 'parse_actions', parse_actions)\n\nsimulator.parse_actions(replay_steps[1])\n\nplot(simulator.yard_actions, 'Shipyard SPAWN actions', player_legends)\nplot(simulator.ship_actions, 'Ship actions', action_legends)","bbbbdad5":"def step1_spawn(self):\n    temp1 = self.yards & self.yard_actions\n    temp2 = temp1 * self.COST_SPAWN\n    temp3 = np.cumsum(temp2.reshape((self.N_PLAYERS, -1)), axis=1).reshape(self.SIZE_PLAYER_DATA)\n    temp4 = temp3 <= self.player_halite[:,None,None]\n    temp5 = temp1 & temp4\n\n    self.next_places[:,0] = temp5\n    self.player_halite -= np.sum(temp5, axis=(1, 2)) * self.COST_SPAWN\n\nsetattr(Simulator, 'step1_spawn', step1_spawn)\n\nsimulator.step1_spawn()\n\nprint(simulator.player_halite)\nplot(simulator.next_places[:,0], 'Ships SPAWNed', player_legends)","49081ae8":"def step2_convert(self):\n    temp1 = ~self.yards & self.ships & self.ship_actions[:, 0]\n    temp2 = temp1 * np.maximum(0, self.COST_CONVERT - self.ship_halite)\n    temp3 = np.cumsum(temp2.reshape((self.N_PLAYERS, -1)), axis=1).reshape(self.SIZE_PLAYER_DATA)\n    temp4 = temp3 <= self.player_halite[:,None,None]\n    temp5 = temp1 & temp4\n\n    self.yards[:] = self.yards | temp5\n    self.player_halite -= np.sum(temp5, axis=(1, 2)) * self.COST_CONVERT\n    self.player_halite += np.sum(temp5 * self.ship_halite, axis=(1, 2))\n    self.ship_halite *= ~temp5\n    self.board_halite *= ~np.any(temp5, axis = 0)\n\nsetattr(Simulator, 'step2_convert', step2_convert)\n\nsimulator.step2_convert()\n\nprint(simulator.player_halite)\nplot(simulator.yards, 'Shipsyards', player_legends)","32abf27d":"def step3_move(self):\n    temp1 = self.ships[:,None] & self.ship_actions\n    temp2 = temp1 * self.ship_halite[:,None]\n\n    self.next_places[:,1] = temp1[:, 1]\n    self.next_places[:,2] = np.roll(temp1[:, 2], +1, axis=2)\n    self.next_places[:,3] = np.roll(temp1[:, 3], -1, axis=2)\n    self.next_places[:,4] = np.roll(temp1[:, 4], -1, axis=1)\n    self.next_places[:,5] = np.roll(temp1[:, 5], +1, axis=1)\n    self.next_halite[:,1] = temp2[:, 1]\n    self.next_halite[:,2] = np.roll(temp2[:, 2], +1, axis=2)\n    self.next_halite[:,3] = np.roll(temp2[:, 3], -1, axis=2)\n    self.next_halite[:,4] = np.roll(temp2[:, 4], -1, axis=1)\n    self.next_halite[:,5] = np.roll(temp2[:, 5], +1, axis=1)\n\nsetattr(Simulator, 'step3_move', step3_move)\n\nsimulator.step3_move()\n\nplot(simulator.next_places, 'New ship positions', action_legends)\nplot(simulator.next_halite, 'Ship halite', action_legends, vmax=PLOT_MAX_HALITE)","317f88d7":"def step4_collide(self):\n    temp1 = np.min(self.next_halite + (~self.next_places) * self.START_HALITE, axis = (0, 1))\n    temp2 = self.next_places & (self.next_halite == temp1)\n    temp3 = np.sum(temp2, axis = (0, 1)) == 1\n\n    self.ships[:] = np.sum(temp2 & temp3, axis = 1) == 1\n    self.ship_halite[:] = self.ships * np.sum(self.next_halite, axis = (0, 1))\n\nsetattr(Simulator, 'step4_collide', step4_collide)\n\nsimulator.step4_collide()\n\nplot(simulator.ships, 'Ships', player_legends)\nplot(simulator.ship_halite, 'Ship halite', player_legends, vmax=PLOT_MAX_HALITE)","f90e2689":"def step5_crash(self):\n    temp1 = np.any(self.yards & ~self.ships & np.any(self.ships, axis=0), axis=0)\n\n    self.yards &= ~temp1\n    self.ships &= ~temp1\n    self.ship_halite *= ~temp1\n\nsetattr(Simulator, 'step5_crash', step5_crash)\n\nsimulator.step5_crash()\n\nplot(simulator.yards, 'Yards', player_legends)\nplot(simulator.ships, 'Ships', player_legends)\nplot(simulator.ship_halite, 'Ship halite', player_legends, vmax=PLOT_MAX_HALITE)","1f2ac815":"def step6_deposit(self):\n    temp1 = self.yards & self.ships\n\n    self.player_halite += np.sum(temp1 * self.ship_halite, axis=(1, 2))\n    self.ship_halite *= ~temp1\n\nsetattr(Simulator, 'step6_deposit', step6_deposit)\n\nsimulator.step6_deposit()\n\nprint(simulator.player_halite)\nplot(simulator.ship_halite, 'Ship halite', player_legends, vmax=PLOT_MAX_HALITE)","b3c63656":"def step7_mine(self):\n    temp1 = self.ships & self.ship_actions[:, 1]\n    temp2 = (temp1 * self.board_halite * self.RATE_COLLECT).astype(int)\n\n    self.ship_halite += temp2\n    self.board_halite -= np.sum(temp2, axis=0)\n\nsetattr(Simulator, 'step7_mine', step7_mine)\n\nsimulator.step7_mine()\n\nplot(simulator.board_halite, 'Board halite', vmax=simulator.MAX_HALITE)\nplot(simulator.ship_halite, 'Ship halite', player_legends, vmax=PLOT_MAX_HALITE)","715474b6":"def step8_regen(self):\n    temp1 = np.any(self.ships, axis=0)\n\n    self.board_halite[:] = np.where(temp1, self.board_halite, np.minimum(self.round3(self.board_halite), self.MAX_HALITE))\n\nsetattr(Simulator, 'step8_regen', step8_regen)\n\nsimulator.step8_regen()\n\nplot(simulator.board_halite, 'Board halite', vmax=simulator.MAX_HALITE)","4722b758":"def encode_data(self):\n    for p in range(self.N_PLAYERS):\n        indices = np.flatnonzero(self.yards[p])\n        self.player_data[p][0] = int(self.player_halite[p])\n        self.player_data[p][1] = { f'{i+1}-{p+1}': int(indices[i]) for i in range(len(indices)) }\n        indices = np.flatnonzero(self.ships[p])\n        self.player_data[p][2] = { f'{i+1}-{p+1}': [int(indices[i]), int(self.ship_halite[p].ravel()[indices[i]])] for i in range(len(indices)) }\n\nsetattr(Simulator, 'encode_data', encode_data)\n\nsimulator.encode_data()\n\nprint(simulator.player_data)","e2575167":"def next_step(self, step_data):\n    self.parse_actions(step_data)\n    self.step1_spawn()\n    self.step2_convert()\n    self.step3_move()\n    self.step4_collide()\n    self.step5_crash()\n    self.step6_deposit()\n    self.step7_mine()\n    self.step8_regen()\n    self.encode_data()\n    \nsetattr(Simulator, 'next', next_step)","8540fbeb":"def end_turn(self, step, step_data):\n    for p in range(self.N_PLAYERS):\n        if step_data[p]['status'] != 'ACTIVE':\n            continue\n        step_data[p]['observation'] = {\n            'halite': list(self.board_halite.ravel()),\n            'players': self.player_data,\n            'player': p,\n            'remainingOverageTime': 60,\n            'step': step,\n        }\n        if not self.player_data[p][2] and (self.player_data[p][0] < self.COST_SPAWN or not self.player_data[p][1]):\n            step_data[p]['status'] = 'DONE'\n            step_data[p]['reward'] = step - self.N_STEPS - 1\n        else:\n            step_data[p]['reward'] = self.player_data[p][0]\n    return [utils.structify(player_data) for player_data in step_data]\n\nsetattr(Simulator, 'end_turn', end_turn)","84505bb4":"def validate(self, observation, verbose = False):\n    valid = True\n    player_data = observation['players']\n    for p in range(N_PLAYERS):\n        valid &= np.all(self.player_halite[p] == np.array(player_data[p][0]))\n        if verbose:\n            print(f'Player {p} halite:', ['Error','OK'][valid * 1])\n        if not valid:\n            print(self.player_data[p][0], np.array(player_data[p][0]))\n        valid &= np.all(np.sort(np.array(list(self.player_data[p][1].values()))) == np.sort(np.array(list(player_data[p][1].values()))))\n        if not valid:\n            print(self.player_data[p][1], player_data[p][1])\n        self.player_data[p][1] = player_data[p][1]\n        mask = np.zeros(self.yards[p].shape, bool)\n        mask.flat[list(self.player_data[p][1].values())] = True\n        valid &= np.all(self.yards[p] == mask)\n        if verbose:\n            print(f'Player {p} yards:', ['Error','OK'][valid * 1])\n        if not valid:\n            print(self.yards[p], mask)\n        mask = np.zeros(self.ships[p].shape, bool)\n        mask_halite = np.zeros(self.ship_halite[p].shape)\n        valid &= np.all(np.sort(np.array(list(self.player_data[p][2].values())), axis=0) == np.sort(np.array(list(player_data[p][2].values())), axis=0))\n        if not valid:\n            print(self.player_data[p][2], player_data[p][2])\n        self.player_data[p][2] = player_data[p][2]\n        for v in self.player_data[p][2].values():\n            mask.flat[v[0]] = True\n            mask_halite.flat[v[0]] = v[1]\n        valid &= np.all(self.ships[p] == mask)\n        if verbose:\n            print(f'Player {p} ships:', ['Error','OK'][valid * 1])\n        if not valid:\n            print(self.ships[p], mask)\n        valid &= np.all(self.ship_halite[p] == mask_halite)\n        if verbose:\n            print(f'Player {p} ship halite:', ['Error','OK'][valid * 1])\n        if not valid:\n            print(self.ship_halite[p], mask_halite)\n    halite_data = np.array(observation['halite']).reshape(self.board_halite.shape)\n    valid &= np.all(np.abs(self.board_halite - halite_data) < 1e-15)\n    if verbose:\n        print('Board halite:', ['Error','OK'][valid * 1])\n    if not valid:\n        print(self.board_halite - halite_data)\n    return valid\n\nsetattr(Simulator, 'validate', validate)\n\nsimulator.validate(replay_steps[1][0]['observation'], True)","d40c2789":"simulator.parse(replay_steps[0][0]['observation'])\nfor t in tqdm(range(1,replay_length), total=replay_length-1):\n    step_data = replay_steps[t]\n    simulator.next(step_data)\n    if not simulator.validate(step_data[0]['observation']):\n        print(f'Failed on step {t}')\n        break\nprint('Done!')","6198adb2":"def run(self, agents):\n    self.N_STEPS = self.configuration['episodeSteps']\n    steps = [[]] * self.N_STEPS\n    step_data = [{\n        'action': {},\n        'info': {},\n        'observation': {},\n        'reward': 0,\n        'status': 'ACTIVE',\n    } for p in range(self.N_PLAYERS)]\n\n    for step in range(self.N_STEPS):\n        steps[step] = self.end_turn(step, step_data)\n        remaining = sum(1 for p in range(self.N_PLAYERS) if step_data[p]['status'] == 'ACTIVE')\n        if remaining < 2:\n            break\n        for p in range(self.N_PLAYERS):\n            step_data[p]['action'] = agents[p](step_data[p]['observation'], self.configuration)\n        self.next(step_data)\n    for p in range(self.N_PLAYERS):\n        steps[step][p]['status'] = 'DONE'\n    return steps[:step+1]\n\nsetattr(Simulator, 'run', run)","c66486da":"%%writefile submission.py\n\nfrom random import choice\n\ndef get_pos(N, pos, a):\n    return (pos % N + (-1 if a == \"WEST\" else 1 if a == \"EAST\" else 0)) + N * ((pos \/\/ N + (1 if a == \"SOUTH\" else -1 if a == \"NORTH\" else 0)) % N)\n\ndef agent(observation, configuration):\n    actions = {}\n    try:\n        N_CELLS = configuration['size']\n        COST_SPAWN = configuration['spawnCost']\n        COST_CONVERT = configuration['convertCost']\n        p = observation['player']\n        halite, yard_data, ship_data = observation['players'][p]\n        halite_data = observation['halite']\n        ship_hash = {ship_data[k][0]:k for k in ship_data}\n\n        for yard_id in yard_data:\n            action = choice([\"SPAWN\", None])\n            if halite >= COST_SPAWN and action is not None:\n                actions[yard_id] = action\n                halite -= COST_SPAWN\n                ship_hash[yard_data[yard_id]] = yard_id\n\n        for ship_id in ship_data:\n            ship_pos, ship_halite = ship_data[ship_id]\n            if halite_data[ship_pos] < COST_CONVERT\/2:\n                if not yard_data or ship_halite >= COST_SPAWN + COST_CONVERT:\n                    actions[ship_id] = \"CONVERT\"\n                else:\n                    a = choice([\"NORTH\", \"SOUTH\", \"EAST\", \"WEST\"])\n                    if get_pos(N_CELLS, ship_pos, a) not in ship_hash:\n                        actions[ship_id] = a\n    except Exception as ex:\n        print(ex)\n    return actions","1621a4c1":"%run submission.py\n\nfrom kaggle_environments import evaluate, make, utils\nagents = ['\/kaggle\/working\/submission.py'] * N_PLAYERS\nlegends = [{ 'name': a.split('\/')[-1] } for a in agents]\nenv = make('halite', configuration={ 'episodeSteps': 400 }, info={ 'EpisodeId': 0, 'TeamNames': legends })","9d6ae012":"%%time\nagents = [agent] * N_PLAYERS\nstate = env.reset(N_PLAYERS)\nsimulator = Simulator(env.configuration, N_PLAYERS)\nsimulator.parse(state[0]['observation'])\nenv.steps = simulator.run(agents)","8292e96b":"env.render(mode=\"ipython\", width=800, height=400, agents=legends, autoplay=True, controls=True)","2decaefe":"%%time\nstate = env.reset(len(agents))\nresult = env.run(agents)","e208c0d2":"env.render(mode=\"ipython\", width=800, height=400, agents=legends)","9ab90063":"## Sample submission\n\nThis simple random agent is stable enough to be used in our tests.\n\nIn next version Simulator will generate same spip and yard IDs and we will be able to cache responses returned on first Simulator pass and return same cached responses to following Simulator and Kaggle environment runs (to make runs identical for true benchmark).","7043816e":"## Load replay\n\nLet's load replay and use it to initialize our simulator","866c3fa7":"## Execute Kaggle Enviromnent","01f03d32":"## Render result","9cdf7178":"## Parse actions\n\nWhen working with replay, we need to load actions from step sata.","1b5a9394":"# Turn Resolution\n\n> After both players have submitted their actions for the turn, the system will automatically resolve the turn and update the board state. Both player turns are resolved simultaneously across the following phases:\n\n\n\n## 1. Spawning\n\n> All shipyards that ordered a spawn action are resolved with new ships being added to the board on top of the shipyards that spawned them. At this phase multiple ships\/shipyards can occupy the same space on the board- these overlaps will be resolved in collision resolution. Spawning is resolved in board position order (top left first), which becomes relevant if a player runs out of halite part way through resolving all of their spawning orders.\n\nSuccessful spawn can be obtained by clipping cumulative sum of spawns, and using diff to restore original spawn positions.","de3682ce":"## 8. Halite Regeneration\n\n> Every cell on the board that has more than 0 halite and no ships on top of it will now regenerate by 2% of the existing amount of halite in the cell. Halite can grow up to a maximum of 500 halite per cell.","bbb53c4e":"## Validate replay\n\nNow let's simulate every step of replay and compare to replay data. If they match then we know that Simulator implementation matches kaggle_environment.","5725cd30":"# Halite Simulator\n\nIn this Kernel you will find halite environment simulator. It is:\n* ~10 times more performant\n* 100% matches behavior of kaggle_environments\n* Compatible with all agents and Halite renderer\n\nCreating this simulator was an interesting excercise. There is already similar [Simulator](https:\/\/www.kaggle.com\/elvenmonk\/high-performance-rps-dojo) I made for [Rock Paper Scissors](https:\/\/www.kaggle.com\/c\/rock-paper-scissors) environment.\n\nI can see how \"Simulator\" can be used\/modified for efficient forward search.","a691fc41":"## 7. Halite Mining\n\n> All ships that held their position on top of halite mine it, moving 25% of the cell\u2019s halite into that ship\u2019s storage. Halite in ship storage is indicated in the visualizer by a blue glow on top of the ship.","525774ac":"# Validation\n\nFirst let's define method that compares next replay step data with data generated by Simulator. This is to ensure that Simulator is 100% accurate","d2378b23":"## Parse observation\n\nWe can reset our simulator to any valid observation","0eec082e":"## 5. Shipyard Collision\n\n> If a ship and shipyard from different players occupy the same cell on the board both are destroyed. Any halite held by the ships is lost. Having your shipyard destroyed does not reduce your total halite, all deposited halite has already been teleported safely back to your homeworld.","5500e0d8":"# Define simulator\n\nIn this section we will build Simulator step-by-step and validate each step, using sample replay from the top of [Halite by Two Sigma - Playground Edition](https:\/\/www.kaggle.com\/c\/halite-iv-playground-edition) leaderboard, which I exposed as [Public Dataset](https:\/\/www.kaggle.com\/elvenmonk\/sample-halite-4-playground-replay)\n\n## Init configuration\nWe can assume configuration doesn't change over time, so it is used to initialize configuration","0c7574ff":"## Execute Simulator","d27c8db8":"# Benchmark\n\nWe still need to improve our Simulator to use it interchangably with kaggle_environments\n\n## Run agents\n\nNow let's use Simulator to play new match instead of simulating existing replay. We can implement method similar to \"env.run\"","eb5bf92b":"## Load Kaggle environment\n\nWe will use same board and agents for both Kaggle environment and Simulator runs.","356278ff":"## 2. Conversion\n\n> All ships that attempted to convert into shipyards are resolved. Ships turn into shipyards if there are sufficient funds available and they are not already on top of an existing shipyard. Shipyard conversions are resolved in board position order (top left first), which becomes relevant if a player runs out of halite part way through resolving all of their conversion orders.\n\nFrom [source code](https:\/\/github.com\/Kaggle\/kaggle-environments\/blob\/b7882beacb45aa9b46d66da4e83460b36a641199\/kaggle_environments\/envs\/halite\/helpers.py#L755):\n> Excess halite leftover from conversion is added to the player's total only after all conversions have completed\n> This is to prevent the edge case of chaining halite from one convert to fund other converts","9dea51e0":"## 4. Ship Collision\n\n> Ship collision is resolved, reducing the number of ships in every cell on the board to one or less. In each collision the smallest ship is the survivor, with all others destroyed. The smallest ship is defined as the ship with the least halite in its storage. If multiple ships tie for having the least halite, all the ships in the collision are destroyed. Note that collision does not consider which player owns which ships, collision between friendly ships is possible. The surviving ships takes all of the halite from the destroyed ships\u2019 cargoes and retains its place on the board.","a8ed78c9":"## Render","43a47417":"## Observation players data\n\nIn order to get next actions from agents, we need to convert data back to observation format.\nNote: current version does not preserve ship and yard IDs between steps. This is enough for simple agents but can break agents that rely on consistent IDs.\nRendering also relies on IDs to be preserved, so you can see \"explosion\" artifacts on replays produced from Simulator.\nI hope to fix it in next version.","5cc941aa":"# Conclusion\n\nAs shown above Halite rules can be fully vectorized using Numpy. Potentially evaluation performance can be further improved using GPU, parallel computations, etc.\nAdditional optimizations possible if multiple similar initial states are evaluated to get similar next steps (e.g. if forward moves space search is performed).\n\nI hope you find this Kernel useful.\n\nI hope also that we will see Halive V+ competitions and new rules will be still compatible with Numpy.","88277542":"## 3. Movement\n\n> All ships are moved according to their orders. Note that ships are able to move \u201cthrough\u201d each other (if they each move to the other\u2019s previous space) without colliding.","5c7f1c05":"## All together\n\nNow we can combine entire turn resolution into single method","e9ef68a1":"## End Turn\n\n> The \u201cstep\u201d number is incremented, ending the turn. The updated board is saved and redistributed to each agent as the \u201cobservation\u201d, moving to the next turn.\n\n> At this step a player is eliminated if they are no longer able to viably compete in the game. This happens when the player no longer has any ships and has less than 500 halite remaining or no remaining shipyards (and thus cannot spawn any more ships).\n\n> At the end of each turn the game also checks if either player has been eliminated or if the game has reached turn 400. If either of those is true instead of starting a new turn the game moves to the game end step.","2b0384c1":"## 6. Halite Depositing\n\n> All ships that are on top of friendly shipyards deposit all halite they have in their individual storage."}}