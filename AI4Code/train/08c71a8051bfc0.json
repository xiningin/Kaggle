{"cell_type":{"1eb055fd":"code","5dacfbce":"code","5017d087":"code","bf634224":"code","2ef986ec":"code","41dbf70d":"code","74089b30":"code","5d01ef64":"code","af2e6f96":"code","b8cd0e20":"markdown"},"source":{"1eb055fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5dacfbce":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as mpatches\n\nfrom pandas_profiling import ProfileReport\nfrom scipy.stats import shapiro\nfrom scipy.stats import levene\nimport missingno\n%matplotlib inline\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import iplot\nfrom collections import Counter\nfrom lightgbm import LGBMClassifier\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import VotingClassifier\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import plot_roc_curve\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\n\nimport warnings\nwarnings.filterwarnings('ignore')","5017d087":"water = pd.read_csv('\/kaggle\/input\/water-potability\/water_potability.csv')\ndf = water.copy()\ndf.head()","bf634224":"def check_df(dataframe, head=5):\n    \n    print(\" SHAPE \".center(70,'#'))\n    print('Rows: {}'.format(dataframe.shape[0]))\n    print('Columns: {}'.format(dataframe.shape[1]))\n    print(\" TYPES \".center(70,'#'))\n    print(dataframe.dtypes)\n    print(\" HEAD \".center(70,'#'))\n    print(dataframe.head(head))\n    print(' TAIL '.center(70,'#'))\n    print(dataframe.tail(head))\n    print(' MISSING VALUES '.center(70,'#'))\n    print(dataframe.isnull().sum())\n    print(' DUPLICATED VALUES '.center(70,'#'))\n    print(dataframe.duplicated().sum())\n    print(\" QUANTILES \".center(70,'#'))\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n    \ncheck_df(df)","2ef986ec":"desc = df.describe().T\ndesc_df = pd.DataFrame(index= [col for col in df.columns if df[col].dtype != 'O'], \n                   columns= df.describe().T.columns.tolist(),data= desc )\n\nf,ax = plt.subplots(figsize=(12,8))\nsns.heatmap(desc_df, annot=True,cmap = \"Blues\", fmt= '.0f',\n            ax=ax,linewidths = 5, cbar = False,\n            annot_kws={\"size\": 16})\n\nplt.xticks(size = 18)\nplt.yticks(size = 14, rotation = 0)\nplt.title(\"Descriptive Statistics\", size = 16)\nplt.show()","41dbf70d":"sns.set_style(\"white\")\nmatrix = np.triu(df.corr(method=\"pearson\"))\nf,ax=plt.subplots(figsize = (15,15))\nsns.heatmap(df.corr(),annot= True,fmt = \".2f\",ax=ax,\n            vmin = -1, vmax = 1, mask = matrix, cmap = \"Blues\",\n            linewidth = 0.4,linecolor = \"white\",annot_kws={\"size\": 12})\nplt.xticks(rotation=90,size=10)\nplt.yticks(rotation=0,size=10)\nplt.title('Pearson Correlation Map', size = 14)\nplt.show()","74089b30":"df_clean = df.copy()\ndf_clean.dropna(inplace = True)\nfig, ax = plt.subplots(nrows=3, ncols=3, figsize=(30, 20))\n\ndf_clean['temp_pH'] = df_clean['ph'].copy()\ndf_clean['temp_pH'] = df_clean['temp_pH'].round().astype('int')\nsns.set(style=\"darkgrid\")\n# set the figure size\n# top bar -> sum all values to find y position of the bars\ndf1 = df_clean.groupby(['temp_pH'])['Potability'].count().reset_index(name = 'count')\ndff = df_clean[df_clean.Potability == 0].groupby(['temp_pH'])['Potability'].count().reset_index(name = 'count')\npH = df1.merge(dff, on='temp_pH', how='outer').fillna(0)\n\ndf_clean['temp_Hardness'] = df_clean['Hardness'].copy()\ndf_clean['temp_Hardness'] = (df_clean['temp_Hardness']\/40).round().astype('int')\nsns.set(style=\"darkgrid\")\n# set the figure size\n# top bar -> sum all values to find y position of the bars\ndf1 = df_clean.groupby(['temp_Hardness'])['Potability'].count().reset_index(name = 'count')\ndff = df_clean[df_clean.Potability == 0].groupby(['temp_Hardness'])['Potability'].count().reset_index(name = 'count')\nhardness = df1.merge(dff, on='temp_Hardness', how='outer').fillna(0)\nhardness['temp_Hardness'] =  hardness['temp_Hardness'].apply(lambda x:str(x*40) + \"-\" + str(x*40+40))\n\ndf_clean['temp_Solids'] = df_clean['Solids'].copy()\ndf_clean['temp_Solids'] = (df_clean['temp_Solids']\/15000).round().astype('int')\nsns.set(style=\"darkgrid\")\n# set the figure size\n# top bar -> sum all values to find y position of the bars\ndf1 = df_clean.groupby(['temp_Solids'])['Potability'].count().reset_index(name = 'count')\ndff = df_clean[df_clean.Potability == 0].groupby(['temp_Solids'])['Potability'].count().reset_index(name = 'count')\nsolids = df1.merge(dff, on='temp_Solids', how='outer').fillna(0)\nsolids['temp_Solids'] =  solids['temp_Solids'].apply(lambda x:str(x*15000) + \"-\" + str(x*15000+1500))\n\ndf_clean['temp_Chloramines'] = df_clean['Chloramines'].copy()\ndf_clean['temp_Chloramines'] = (df_clean['temp_Chloramines']).round().astype('int')\nsns.set(style=\"darkgrid\")\n# set the figure size\n# top bar -> sum all values to find y position of the bars\ndf1 = df_clean.groupby(['temp_Chloramines'])['Potability'].count().reset_index(name = 'count')\ndff = df_clean[df_clean.Potability == 0].groupby(['temp_Chloramines'])['Potability'].count().reset_index(name = 'count')\nchloramines = df1.merge(dff, on='temp_Chloramines', how='outer').fillna(0)\n\ndf_clean['temp_Sulfate'] = df_clean['Sulfate'].copy()\ndf_clean['temp_Sulfate'] = (df_clean['temp_Sulfate']\/50).round().astype('int')\nsns.set(style=\"darkgrid\")\n# set the figure size\n# top bar -> sum all values to find y position of the bars\ndf1 = df_clean.groupby(['temp_Sulfate'])['Potability'].count().reset_index(name = 'count')\ndff = df_clean[df_clean.Potability == 0].groupby(['temp_Sulfate'])['Potability'].count().reset_index(name = 'count')\nsulfate = df1.merge(dff, on='temp_Sulfate', how='outer').fillna(0)\nsulfate['temp_Sulfate'] =  sulfate['temp_Sulfate'].apply(lambda x:str(x*50) + \"-\" + str(x*50+50))\n\ndf_clean['temp_Conductivity'] = df_clean['Conductivity'].copy()\ndf_clean['temp_Conductivity'] = (df_clean['temp_Conductivity']\/75).round().astype('int')\nsns.set(style=\"darkgrid\")\n# set the figure size\n# top bar -> sum all values to find y position of the bars\ndf1 = df_clean.groupby(['temp_Conductivity'])['Potability'].count().reset_index(name = 'count')\ndff = df_clean[df_clean.Potability == 0].groupby(['temp_Conductivity'])['Potability'].count().reset_index(name = 'count')\nconductivity = df1.merge(dff, on='temp_Conductivity', how='outer').fillna(0)\nconductivity['temp_Conductivity'] =  conductivity['temp_Conductivity'].apply(lambda x:str(x*75) + \"-\" + str(x*75+75))\n\ndf_clean['temp_Organic_carbon'] = df_clean['Organic_carbon'].copy()\ndf_clean['temp_Organic_carbon'] = (df_clean['temp_Organic_carbon']\/2).round().astype('int')\nsns.set(style=\"darkgrid\")\n# set the figure size\n# top bar -> sum all values to find y position of the bars\ndf1 = df_clean.groupby(['temp_Organic_carbon'])['Potability'].count().reset_index(name = 'count')\ndff = df_clean[df_clean.Potability == 0].groupby(['temp_Organic_carbon'])['Potability'].count().reset_index(name = 'count')\norganic_carbon = df1.merge(dff, on='temp_Organic_carbon', how='outer').fillna(0)\norganic_carbon['temp_Organic_carbon'] =  organic_carbon['temp_Organic_carbon'].apply(lambda x:str(x*2) + \"-\" + str(x*2+2))\n\ndf_clean['temp_Trihalomethanes'] = df_clean['Trihalomethanes'].copy()\ndf_clean['temp_Trihalomethanes'] = (df_clean['temp_Trihalomethanes']\/20).round().astype('int')\nsns.set(style=\"darkgrid\")\n# set the figure size\n# top bar -> sum all values to find y position of the bars\ndf1 = df_clean.groupby(['temp_Trihalomethanes'])['Potability'].count().reset_index(name = 'count')\ndff = df_clean[df_clean.Potability == 0].groupby(['temp_Trihalomethanes'])['Potability'].count().reset_index(name = 'count')\ntrihalomethanes = df1.merge(dff, on='temp_Trihalomethanes', how='outer').fillna(0)\ntrihalomethanes['temp_Trihalomethanes'] =  trihalomethanes['temp_Trihalomethanes'].apply(lambda x:str(x*20) + \"-\" + str(x*20+20))\n\ndf_clean['temp_Turbidity'] = df_clean['Turbidity'].copy()\ndf_clean['temp_Turbidity'] = (df_clean['temp_Turbidity']).round().astype('int')\nsns.set(style=\"darkgrid\")\n# set the figure size\n# top bar -> sum all values to find y position of the bars\ndf1 = df_clean.groupby(['temp_Turbidity'])['Potability'].count().reset_index(name = 'count')\ndff = df_clean[df_clean.Potability == 0].groupby(['temp_Turbidity'])['Potability'].count().reset_index(name = 'count')\nturbidity = df1.merge(dff, on='temp_Turbidity', how='outer').fillna(0)\n\n# bar chart 1 -> top bars 1\nbar1 = sns.barplot(x = \"temp_pH\", y = 'count_x', data=pH, ax=ax[0][0],color='darkblue')\n\n# bar chart 1 -> bottom bars (group of 'sex=0')\nbar2 = sns.barplot(x=\"temp_pH\", y= 'count_y', data=pH, ax=ax[0][0], estimator=sum, ci=None,  color='lightblue')\n\n# bar1 chart 2\nbar1 = sns.barplot(x = \"temp_Hardness\", y = 'count_x', data=hardness, ax=ax[0][1], color='darkblue')\n\n# bar chart 2 -> bottom bars (group of 'sex=0')\nbar2 = sns.barplot(x=\"temp_Hardness\", y= 'count_y', data=hardness, ax=ax[0][1], estimator=sum, ci=None,  color='lightblue')\n\n# bar1 chart 2\nbar1 = sns.barplot(x = \"temp_Solids\", y = 'count_x', data=solids, ax=ax[0][2], color='darkblue')\n\n# bar chart 2 -> bottom bars (group of 'sex=0')\nbar2 = sns.barplot(x=\"temp_Solids\", y= 'count_y', data=solids, ax=ax[0][2], estimator=sum, ci=None,  color='lightblue')\n\n# bar1 chart 2\nbar1 = sns.barplot(x = \"temp_Chloramines\", y = 'count_x', data=chloramines, ax=ax[1][0], color='darkblue')\n\n# bar chart 2 -> bottom bars (group of 'sex=0')\nbar2 = sns.barplot(x=\"temp_Chloramines\", y= 'count_y', data=chloramines, ax=ax[1][0], estimator=sum, ci=None,  color='lightblue')\n\n# bar1 chart 2\nbar1 = sns.barplot(x = \"temp_Sulfate\", y = 'count_x', data=sulfate, ax=ax[1][1], color='darkblue')\n\n# bar chart 2 -> bottom bars (group of 'sex=0')\nbar2 = sns.barplot(x=\"temp_Sulfate\", y= 'count_y', data=sulfate, ax=ax[1][1], estimator=sum, ci=None,  color='lightblue')\n\n# bar1 chart 2\nbar1 = sns.barplot(x = \"temp_Conductivity\", y = 'count_x', data=conductivity, ax=ax[1][2], color='darkblue')\n\n# bar chart 2 -> bottom bars (group of 'sex=0')\nbar2 = sns.barplot(x=\"temp_Conductivity\", y= 'count_y', data=conductivity, ax=ax[1][2], estimator=sum, ci=None,  color='lightblue')\n\n# bar1 chart 2\nbar1 = sns.barplot(x = \"temp_Organic_carbon\", y = 'count_x', data=organic_carbon, ax=ax[2][0], color='darkblue')\n\n# bar chart 2 -> bottom bars (group of 'sex=0')\nbar2 = sns.barplot(x=\"temp_Organic_carbon\", y= 'count_y', data=organic_carbon, ax=ax[2][0], estimator=sum, ci=None,  color='lightblue')\n\n# bar1 chart 2\nbar1 = sns.barplot(x = \"temp_Trihalomethanes\", y = 'count_x', data=trihalomethanes, ax=ax[2][1], color='darkblue')\n\n# bar chart 2 -> bottom bars (group of 'sex=0')\nbar2 = sns.barplot(x=\"temp_Trihalomethanes\", y= 'count_y', data=trihalomethanes, ax=ax[2][1], estimator=sum, ci=None,  color='lightblue')\n\n# bar1 chart 2\nbar1 = sns.barplot(x = \"temp_Turbidity\", y = 'count_x', data=turbidity, ax=ax[2][2], color='darkblue')\n\n# bar chart 2 -> bottom bars (group of 'sex=0')\nbar2 = sns.barplot(x=\"temp_Turbidity\", y= 'count_y', data=turbidity, ax=ax[2][2], estimator=sum, ci=None,  color='lightblue')\n\n# add legend\ntop_bar = mpatches.Patch(color='darkblue', label='Potable')\nbottom_bar = mpatches.Patch(color='lightblue', label='Not Potable')\nax[0][0].legend(handles=[top_bar, bottom_bar])\nax[0][0].set_title(\"pH vs Potability Plot\")\nax[0][0].set_xlabel(\"pH\")\nax[0][0].set_ylabel(\"Count\")\n\nax[0][1].legend(handles=[top_bar, bottom_bar])\nax[0][1].set_title(\"Hardness vs Potability Plot\")\nax[0][1].set_xlabel(\"Hardness\")\nax[0][1].set_ylabel(\"Count\")\n\nax[0][2].legend(handles=[top_bar, bottom_bar])\nax[0][2].set_title(\"Solids vs Potability Plot\")\nax[0][2].set_xlabel(\"Solids\")\nax[0][2].set_ylabel(\"Count\")\n\nax[1][0].legend(handles=[top_bar, bottom_bar])\nax[1][0].set_title(\"Chloramines vs Potability Plot\")\nax[1][0].set_xlabel(\"Chloramines\")\nax[1][0].set_ylabel(\"Count\")\n\nax[1][1].legend(handles=[top_bar, bottom_bar])\nax[1][1].set_title(\"Sulfate vs Potability Plot\")\nax[1][1].set_xlabel(\"Sulfate\")\nax[1][1].set_ylabel(\"Count\")\n\nax[1][2].legend(handles=[top_bar, bottom_bar])\nax[1][2].set_title(\"Conductivity vs Potability Plot\")\nax[1][2].set_xlabel(\"Conductivity\")\nax[1][2].set_ylabel(\"Count\")\n\nax[2][0].legend(handles=[top_bar, bottom_bar])\nax[2][0].set_title(\"Organic Carbon vs Potability Plot\")\nax[2][0].set_xlabel(\"Organic Carbon\")\nax[2][0].set_ylabel(\"Count\")\n\nax[2][1].legend(handles=[top_bar, bottom_bar])\nax[2][1].set_title(\"Trihalomethanes vs Potability Plot\")\nax[2][1].set_xlabel(\"Trihalomethanes\")\nax[2][1].set_ylabel(\"Count\")\n\nax[2][2].legend(handles=[top_bar, bottom_bar])\nax[2][2].set_title(\"Turbidity vs Potability Plot\")\nax[2][2].set_xlabel(\"Turbidity\")\nax[2][2].set_ylabel(\"Count\")\n\nfig.suptitle(\"Potability VS Quantitative Data\", fontsize=18)\n\n# show the graph\nplt.show()\n\n#df.drop(columns = ['temp_pH','temp_hardness','temp_chol','temp_thalachh'], inplace = True)","5d01ef64":"sns.violinplot(x='Potability', y='ph', data=df, palette='Blues')","af2e6f96":"sns.pairplot(df, hue=\"Potability\", palette='Blues')","b8cd0e20":"# Data Info\n* ph : pH of water\n* Hardness : Capacity of water to precipitate soap in mg\/L\n* Solids : Total dissolved solids in ppm\n* Chloramines : Amount of Chloramines in ppm\n* Sulfate : Amount of Sulfates dissolved in mg\/L\n* Conductivity : Electrical conductivity of water in \u03bcS\/cm\n* Organic_carbon : Amount of organic carbon in ppm\n* Trihalomethanes : Amount of Trihalomethanes in \u03bcg\/L\n* Turbidity : Measure of light emiting property of water in NTU (Nephelometric Turbidity Units)\n* Potability : Indicates if water is safe for human consumption\n    + 1 means Potable \n    + 0 means Not potable"}}