{"cell_type":{"ab8f2ae4":"code","b3c4839f":"code","1cc12f8f":"code","a0d0235e":"code","180de684":"code","2de4c9f5":"code","0283b77c":"code","26e560a6":"code","68a6152f":"code","82990366":"code","cf2493e8":"code","9d7b18d0":"code","61ec3df3":"code","c006e55b":"code","afc3616d":"code","c15132d1":"code","46a39827":"code","bc96b341":"code","b1e127e1":"code","ca0a670f":"code","73cee10b":"code","4c82e7a9":"code","67942d5f":"code","ccdf40a8":"code","4a90c514":"code","0d12e94f":"code","6ded3d7d":"code","1e324bfe":"code","9bbbc20f":"code","82b99091":"code","e5de4f9d":"markdown","55959cff":"markdown","fa5994e0":"markdown","1363c76e":"markdown","8f0ef999":"markdown","260e9e77":"markdown","ef4bfac4":"markdown","8098eb7f":"markdown","55a21008":"markdown","d8abad79":"markdown","6f059de8":"markdown","1256d4a1":"markdown","51a86517":"markdown"},"source":{"ab8f2ae4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b3c4839f":"import pandas as pd\nworld = pd.read_csv(\"..\/input\/corona-virus-report\/covid_19_clean_complete.csv\")\nworld.head(-5)","1cc12f8f":"# Satir Sayisi\nprint(\"Sat\u0131r Say\u0131s\u0131:\\n\",world.shape[0:])\n\n# Sutun Adlari\nprint(\"S\u00fctun Adlari:\\n\",world.columns.tolist())\n\n# Veri Tipleri\nprint(\"Veri Tipleri:\\n\",world.dtypes)","a0d0235e":"# Eksik veri say\u0131lar\u0131 ve veri setindeki oranlar\u0131 \nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.concat([world.isnull().sum(), 100 * world.isnull().sum()\/len(world)], \n              axis=1).rename(columns={0:'Missing Records', 1:'Percentage (%)'})","180de684":"world[\"WHO Region\"].fillna(\"Other\", inplace = True)  ","2de4c9f5":"world.isnull().sum()","0283b77c":"world['WHO Region'].unique()","26e560a6":"world.describe().T","68a6152f":"# Veri seti i\u00e7erisinden belli alanlar se\u00e7ilerek yeni bir veriseti olu\u015fturuldu.\ndf1=pd.Series(world['Country\/Region'],name=\"Country\")\ndf2=pd.Series(world['Date'],name=\"Date\")\ndf3=pd.Series(world['Confirmed'],name=\"Confirmed\")\ndf4=pd.Series(world['Deaths'],name=\"Deaths\")\ndf5=pd.Series(world['Recovered'],name=\"Recovered\")\ndf_world=pd.concat([df1, df2,df3, df4,df5], axis=1)","82990366":"#t\u00fcrkiye i\u00e7in korelasyon grafi\u011fi\nturkey=df_world.copy()\nturkey_values = (turkey['Country'] == 'Turkey').astype(int)\nfields = list(turkey.columns[1:])  # everything except \"country name\"\ncorrelations = turkey[fields].corrwith(turkey_values)\ncorrelations.sort_values(inplace=True)\ncorrelations\nax = correlations.plot(kind='bar')\nax.set(ylim=[0, 0.5], ylabel='turkey correlation');","cf2493e8":"plt.figure()\ndf_world.boxplot(column=['Confirmed','Deaths','Recovered'])\n\nfig,axs=plt.subplots(2,2) \naxs[0, 0].boxplot(df_world['Confirmed'])\naxs[0, 0].set_title('Hasta Say\u0131s\u0131')\n\naxs[0, 1].boxplot(df_world['Recovered'])\naxs[0, 1].set_title('\u0130yile\u015fen Hasta Say\u0131s\u0131')\n\naxs[1, 0].boxplot(df_world['Deaths'])\naxs[1, 0].set_title('Hayat\u0131n\u0131 Kaybeden Hasta Say\u0131s\u0131')","9d7b18d0":"# Enlem ve boylam de\u011ferlerinin de oldu\u011fu yeni bir dataframe olu\u015fturuldu. \n# De\u011ferler 1\/22\/2020 - 25\/05\/2020 tarihleri aral\u0131\u011f\u0131n\u0131 i\u00e7ermektedir.\ndf_1=df_world\ndf_2=pd.Series(world['Long'],name=\"Long\")\ndf_3=pd.Series(world['Lat'],name=\"Lat\")\ndf_4=pd.Series(world['WHO Region'],name=\"Region\")\ndf_location=pd.concat([df_1,df_2,df_3,df_4], axis=1)\n","61ec3df3":"df_location.head()","c006e55b":"# Zaman \u0130\u00e7erisindeki De\u011fi\u015fim\nimport plotly.express as px\nfig = px.choropleth(df_location, locations=\"Country\", locationmode='country names', color=np.log(df_location[\"Confirmed\"]), \n                    hover_name=\"Country\", animation_frame=df_location[\"Date\"],\n                    title='Zaman \u0130\u00e7erisindeki De\u011fi\u015fim', color_continuous_scale=px.colors.sequential.Purp)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","afc3616d":"import folium\n# World wide\ntemp = df_location[df_location['Date'] == max(df_location['Date'])]\nm = folium.Map(location=[0, 0], titles='D\u00fcnya Haritas\u0131 \u00dczerinde De\u011ferler',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Lat'], temp.iloc[i]['Long']],\n        color='crimson', fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country'])+\n                    '<li><bold>Province : '+str(temp.iloc[i]['Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Deaths']),\n        radius=int(temp.iloc[i]['Confirmed'])**0.5).add_to(m)\nm","c15132d1":"import plotly.express as px\nfig = px.bar(df_location.sort_values(\"Confirmed\"),\n            x='Region', y=\"Confirmed\",\n            hover_name=\"Region\",\n            hover_data=[\"Recovered\",\"Deaths\",\"Confirmed\"],\n            title='COVID-19: Test Sonucu Pozitif Olan Hasta Say\u0131s\u0131 B\u00f6lgelere G\u00f6re',\n)\nfig.update_xaxes(title_text=\"Region\")\nfig.update_yaxes(title_text=\"Positif Test Say\u0131s\u0131(%)\")\nfig.show()\nfig = px.bar(df_location.sort_values(\"Recovered\"),\n            x='Region', y=\"Recovered\",\n            hover_name=\"Region\",\n            hover_data=[\"Confirmed\",\"Deaths\",\"Recovered\"],\n            title='COVID-19: \u0130yile\u015fen Hasta Say\u0131s\u0131 B\u00f6lgelere G\u00f6re',\n)\nfig.update_xaxes(title_text=\"Region\")\nfig.update_yaxes(title_text=\"\u0130yile\u015fen Hasta Say\u0131s\u0131\")\nfig.show()\nfig = px.bar(df_location.sort_values(\"Deaths\"),\n            x='Region', y=\"Deaths\",\n            hover_name=\"Region\",\n            hover_data=[\"Confirmed\",\"Recovered\",\"Deaths\"],\n            title='COVID-19: Hayat\u0131n\u0131 Kaybeden Hasta Say\u0131s\u0131 B\u00f6lgelere G\u00f6re ',\n)\nfig.update_xaxes(title_text=\"Region\")\nfig.update_yaxes(title_text=\"Hayat\u0131n\u0131 Kaybeden Hasta Say\u0131s\u0131\")\nfig.show()","46a39827":"from sklearn.model_selection import train_test_split\n\n\nX = df_world.iloc[:,2:5]\ny = df_world['Recovered']\n\nfrom sklearn.preprocessing import MinMaxScaler\nmms = MinMaxScaler()\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.3, random_state=0)\nX_train = mms.fit_transform(X_train) \nX_test= mms.fit_transform(X_test)\nprint(\"Dataframe boyutu: \",df_world.shape)\nprint(\"E\u011fitim verisi boyutu: \",X_train.shape, y_train.shape)\nprint(\"Test verisi boyutu: \",X_test.shape,y_test.shape)","bc96b341":"# type error i\u00e7in target types\u0131 \"Label Encoder\" ile  multiclassa \u00e7evirdim.(Target=Y_train)\nfrom sklearn import preprocessing\nfrom sklearn import utils\n\nlab_enc = preprocessing.LabelEncoder()\nencoded = lab_enc.fit_transform(y)\nprint(utils.multiclass.type_of_target(y))\nprint(utils.multiclass.type_of_target(y_train.astype('int')))\nprint(utils.multiclass.type_of_target(encoded))\n\nlab_enc = preprocessing.LabelEncoder()\nY_train = lab_enc.fit_transform(y_train)\n","b1e127e1":"from sklearn    import metrics, svm\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn import  linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier","ca0a670f":"# Her bir modelin do\u011fruluk de\u011feri ,s\u0131n\u0131fland\u0131rma raporu , kar\u0131\u015f\u0131kl\u0131k matrisi ve MSE(Ortalama Kare Hata Regresyon Oran\u0131) de\u011ferlerini hesaplamak i\u00e7in import edildi.\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import mean_squared_error","73cee10b":"# Lineer Regresyon\nprint(\"\\nLineer Regresyon\")\nlm = linear_model.LinearRegression()\nmodel = lm.fit(X_train, Y_train)\ny_true1 , y_pred1 =y_test,lm.predict(X_test)\nprint(\"\\nTahmin de\u011ferleri: \",y_pred1)\nplt.scatter(y_true1, y_pred1,c='orange')\nplt.scatter(y_true1, y_test,c='green')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predictions\")","4c82e7a9":"#Lineer Regresyon\n#predictions multiclass oldu\u011fundan y_validation da multiclassa d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\nencoded_v = lab_enc.fit_transform(y_true1)\nutils.multiclass.type_of_target(y_true1.astype('int'))\nypred1= lab_enc.fit_transform(y_pred1)\nutils.multiclass.type_of_target(ypred1.astype('int'))\nconf=confusion_matrix(encoded_v, ypred1)\nprint(\"\\nConfusion matrix :\\n\",conf)\nprint(\"Accuracy score(Do\u011fruluk de\u011feri):\\n\",accuracy_score(encoded_v, ypred1))\nprint(\"\\nClassification Report:\\n\",classification_report(encoded_v, ypred1))\nprint(\"MSE:\",mean_squared_error(encoded_v, ypred1))","67942d5f":"# SVR(Support Vector Regressions)\nprint(\"SVR(Support Vector Regressions)\")\nclf = svm.SVR(gamma=\"auto\")\n# modelimizi e\u011fitim verilerimiz ve buna kar\u015f\u0131l\u0131k gelen Y_train(target ) de\u011ferleri ile e\u011fittik\nclf.fit(X_train, Y_train)\n# test de\u011ferlerimize kar\u015f\u0131l\u0131k gelecek olan tahmin de\u011ferlerimizi olu\u015fturduk\ny_true2 , y_pred2 =y_test,clf.predict(X_test)\nprint(\"\\nTahmin de\u011ferleri: \",y_pred2)\nplt.scatter(y_true2, y_pred2,c='black')\nplt.scatter(y_true2, y_test,c='green')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predictions\")","ccdf40a8":"#SVR\n#predictions multiclass oldu\u011fundan y_validation da multiclassa d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\nencoded_v1 = lab_enc.fit_transform(y_true2)\nutils.multiclass.type_of_target(y_true2.astype('int'))\nypred2= lab_enc.fit_transform(y_pred2)\nutils.multiclass.type_of_target(ypred2.astype('int'))\nconf=confusion_matrix(encoded_v1, ypred2)\nprint(\"\\nConfusion matrix :\\n\",conf)\nprint(\"Accuracy score(Do\u011fruluk de\u011feri):\\n\",accuracy_score(encoded_v1, ypred2))\nprint(\"\\nClassification Report:\\n\",classification_report(encoded_v1, ypred2))\nprint(\"MSE:\",mean_squared_error(encoded_v1, ypred2))","4a90c514":"# GaussianNB\nprint(\"GaussianNB\")\nclf = GaussianNB()\nclf.fit(X_train, Y_train)\ny_true3 , y_pred3=y_test,clf.predict(X_test)\nprint(\"\\nTahmin de\u011ferleri: \",y_pred3)\nplt.scatter(y_true3, y_pred3,c='grey')\nplt.scatter(y_true3, y_test,c='green')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predictions\")","0d12e94f":"# GaussianNB\n#predictions multiclass oldu\u011fundan y_validation da multiclassa d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\nencoded_v2 = lab_enc.fit_transform(y_true3)\nutils.multiclass.type_of_target(y_true3.astype('int'))\nypred3= lab_enc.fit_transform(y_pred3)\nutils.multiclass.type_of_target(ypred3.astype('int'))\nconf=confusion_matrix(encoded_v2, ypred3)\nprint(\"\\nConfusion matrix :\\n\",conf)\nprint(\"Accuracy score(Do\u011fruluk de\u011feri):\\n\",accuracy_score(encoded_v2, ypred3))\nprint(\"\\nClassification Report:\\n\",classification_report(encoded_v2, ypred3))\nprint(\"MSE:\",mean_squared_error(encoded_v2, ypred3))","6ded3d7d":"# Decision Tree Classifier\nprint(\"Decision Tree Classifier\")\nclf = DecisionTreeClassifier()\nclf.fit(X_train, Y_train)\ny_true5 , y_pred5=y_test,clf.predict(X_test)\nprint(\"\\nTahmin de\u011ferleri: \",y_pred5)\nplt.scatter(y_true5, y_pred5,c='brown')\nplt.scatter(y_true5, y_test,c='green')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predictions\")","1e324bfe":"#predictions multiclass oldu\u011fundan y_validation da multiclassa d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\nencoded_v4 = lab_enc.fit_transform(y_true5)\nutils.multiclass.type_of_target(y_true5.astype('int'))\nypred5= lab_enc.fit_transform(y_pred5)\nutils.multiclass.type_of_target(ypred5.astype('int'))\nconf=confusion_matrix(encoded_v4, ypred5)\nprint(\"\\nConfusion matrix :\\n\",conf)\nprint(\"Accuracy score(Do\u011fruluk de\u011feri):\\n\",accuracy_score(encoded_v4, ypred5))\nprint(\"\\nClassification Report:\\n\",classification_report(encoded_v4, ypred5))\nprint(\"MSE:\",mean_squared_error(encoded_v4, ypred5))","9bbbc20f":"# KNeighborsClassifier\nprint(\"KNeighbors Classifier\")\nclf = KNeighborsClassifier()\nclf.fit(X_train, Y_train)\ny_true7 , y_pred7=y_test,clf.predict(X_test)\nprint(\"\\nTahmin de\u011ferleri: \",y_pred7)\nplt.scatter(y_true7, y_pred7,c='blue')\nplt.scatter(y_true7, y_test,c='green')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predictions\")\n","82b99091":"#predictions multiclass oldu\u011fundan y_validation da multiclassa d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\nencoded_v6 = lab_enc.fit_transform(y_true7)\nutils.multiclass.type_of_target(y_true7.astype('int'))\nypred7= lab_enc.fit_transform(y_pred7)\nutils.multiclass.type_of_target(ypred7.astype('int'))\nconf=confusion_matrix(encoded_v6, ypred7)\nprint(\"\\nConfusion matrix :\\n\",conf)\nprint(\"Accuracy score(Do\u011fruluk de\u011feri):\\n\",accuracy_score(encoded_v6, ypred7))\nprint(\"\\nClassification Report:\\n\",classification_report(encoded_v6, ypred7))\nprint(\"MSE:\",mean_squared_error(encoded_v6, ypred7))","e5de4f9d":"Kategorik de\u011fi\u015fkenlerde bo\u015f alanlar;\n\n*  Tepe de\u011fer(mode) kullan\u0131larak en fazla frekansa sahip olan de\u011fer ile eksik veriler doldurulabilir.\n \n*  Eksik\/kay\u0131p veriler etiketlenerek model ya da analiz i\u00e7in de\u011ferlendirilebilir.\n \n*  Lojistik regresyon ya da ANOVA gibi y\u00f6ntemler ile eksik de\u011ferler tahmin edilebilir.\n\n'Who Region' kategorik bir de\u011fi\u015fken oldu\u011fu i\u00e7in o sutun i\u00e7erisindeki bo\u015f alanlar 'Other' ile dolduruldu.","55959cff":"\u2022\tDataset \u00fczerinde analiz , modelleme yapabilmek i\u00e7in eksik veri say\u0131s\u0131 kontrol edildi. Bu g\u00f6zlem sonucunda yaln\u0131zca \u2018Who Region\u2019 de\u011fi\u015fkeninde eksik veri oldu\u011fu g\u00f6zlemlendi.\n","fa5994e0":"Naive Bayes Algoritmas\u0131n\u0131n Gaussian se\u00e7ilmi\u015ftir \u00e7\u00fcnk\u00fc veriler s\u00fcreklidir.","1363c76e":"\u0130\u00e7erisinde \u00fclkelerin koordinatlar\u0131n\u0131n yer ald\u0131\u011f\u0131 yeni dataframe ile harita \u00fczerinden \u00fclkelerin  \u2018Covid Pozitif Hasta Say\u0131s\u0131\u2019(Confirmed) , \u2018\u0130yile\u015fen Hasta Say\u0131s\u0131\u2019(Recovered) , \u2018Hayat\u0131n\u0131 Kaybeden Hasta Say\u0131s\u0131\u2019(Deaths) de\u011ferleri g\u00f6rselle\u015ftirildi. ","8f0ef999":"Bu kezde bar plotlar \u00fczerinde 'Region' de\u011fi\u015fkeni g\u00f6rselle\u015ftirildi. B\u00f6ylelikle b\u00f6lgelere g\u00f6re \"Test Sonucu Pozitif Olan Hasta Say\u0131s\u0131,\u0130yile\u015fen Hasta Say\u0131s\u0131,Hayat\u0131n\u0131 Kaybeden Hasta Say\u0131s\u0131\" g\u00f6zlemlenmi\u015f oldu.","260e9e77":"# **COVID-19 **","ef4bfac4":"Bu dataframe i\u00e7in 'Deaths ,Recovered ,Confirmed ' de\u011fi\u015fkenleri \u00fczerinden 'Recovered'(\u0130yile\u015fen hasta say\u0131s\u0131) \u00fczerine tahminleme yap\u0131lm\u0131\u015ft\u0131r. \n\nVeri modellemeden \u00f6nce normalize edildi.Bunu yaparken de MinMaxScaler kullan\u0131ld\u0131.\n\n* Bu y\u00f6ntemde, bir grup verinin i\u00e7erisindeki en b\u00fcy\u00fck ve en k\u00fc\u00e7\u00fck de\u011ferler ele al\u0131n\u0131r. Di\u011fer b\u00fct\u00fcn veriler, bu de\u011ferlere g\u00f6re normalle\u015ftirilir. \n\nBunun i\u00e7in be\u015f farkl\u0131 s\u0131n\u0131fland\u0131rma ve regresyon algoritmas\u0131 se\u00e7ilmi\u015ftir.\nBunlar;\n* SVR(Support Vector Regressions)\n* Lineer Regresyon\n* GaussianNB\n* KNN\n* Decision Tree\n\nBa\u015far\u0131 k\u0131yaslamalar\u0131 i\u00e7inde ;\n* confusion matrix (kar\u0131\u015f\u0131kl\u0131k matrisi) \n* classification report(s\u0131n\u0131fland\u0131rma raporlar\u0131)  \n* MSE\n\nkullan\u0131ld\u0131.\n\nBa\u015far\u0131 k\u0131yaslamalar\u0131 sonu\u00e7lar\u0131na bak\u0131ld\u0131\u011f\u0131nda en iyi sonu\u00e7lar Lineer Regresyon ve SVR ile elde edilmi\u015ftir.","8098eb7f":"Ayk\u0131r\u0131 de\u011fer g\u00f6zlemi yapabilmek ad\u0131na s\u00fcrekli de\u011fi\u015fkenler i\u00e7in boxplotlar olu\u015fturuldu. Ayk\u0131r\u0131 de\u011fer analizi ile de\u011fi\u015fkenler i\u00e7erisindeki de\u011ferlerin ortalama ile mi seyretti\u011fi yoksa b\u00fcy\u00fck farkl\u0131l\u0131klar\u0131n m\u0131 oldu\u011fu sonucuna var\u0131r\u0131z.","55a21008":"T\u00fcrkiye i\u00e7in \"Deaths, Recovered ve Confirmed\" aras\u0131ndaki ili\u015fkiyi g\u00f6zlemleyebilmek ad\u0131na korelasyon grafi\u011fi olu\u015fturuldu.","d8abad79":"\u2022\t\u00d6ncelikli olarak sat\u0131r say\u0131s\u0131,veri tipi ve de\u011fi\u015fken isimleri \u00f6\u011frenilerek dataset hakk\u0131nda genel bilgiye sahip olundu.","6f059de8":"**Covid-19 olarak adland\u0131r\u0131lan \u00c7in \u2018in Hubei eyaletinin ba\u015fkenti Wuhan\u2019 da ortaya \u00e7\u0131kan vir\u00fcs i\u00e7in  22 Ocak 2020 ve 4 Haziran 2020 tarihleri aral\u0131\u011f\u0131ndaki d\u00fcnya \u00fclkelerinin \u2018Covid Pozitif Hasta Say\u0131s\u0131\u2019 , \u2018\u0130yile\u015fen Hasta Say\u0131s\u0131\u2019 , \u2018Hayat\u0131n\u0131 Kaybeden Hasta Say\u0131s\u0131\u2019 de\u011ferlerini i\u00e7ermektedir.**","1256d4a1":"Eksik veri analizinden sonra dataframedeki s\u00fcrekli de\u011fi\u015fkenler i\u00e7in describe metodu ile \"count,mean ,min ,max\" de\u011ferleri \u00f6\u011frenildi.","51a86517":"'Who Region' de\u011fi\u015fkeni i\u00e7erisinde \"Other\" de\u011ferinin de olu\u015fturuldu g\u00f6r\u00fcl\u00fcyor."}}