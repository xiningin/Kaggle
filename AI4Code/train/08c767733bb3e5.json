{"cell_type":{"245efeaa":"code","4b30df01":"code","288e28ae":"code","0c77f9e8":"code","bc594c65":"code","e5dc0ca1":"code","8dadfcba":"code","7d2f8d92":"code","a5b685a7":"code","b0011e7a":"code","af033037":"code","225a9b38":"code","ba4a42e6":"code","db357476":"code","0d533d41":"code","af5b925a":"code","75abb14e":"code","672cc270":"code","a0e70bdd":"code","86ba56b5":"code","5fc2c8c2":"code","4b34e74a":"code","dc053961":"code","cdb97db6":"code","fb3c8c2e":"code","08d88c87":"code","4c4dd130":"code","1f60faad":"markdown","a9fa71e3":"markdown","580b99dc":"markdown","90fddcec":"markdown","8c9332ad":"markdown"},"source":{"245efeaa":"# Importing all the libraris we need\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport keras\nimport cv2\nimport matplotlib.pyplot as plt\nfrom matplotlib.image import imread\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D , MaxPooling2D , Dropout\nfrom keras.layers import Dense , Flatten \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom keras.preprocessing.image import ImageDataGenerator , load_img\nfrom keras.optimizers import SGD\nimport os","4b30df01":"for dirname, _, filenames in os.walk(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\"):\n    print(dirname)\n\n# Dividing the folders, as per training , testing , Normal , Pneumonia \nchest_xray_train_normal = os.listdir(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/NORMAL\/\")\nchest_xray_train_pneumonia = os.listdir(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/PNEUMONIA\/\")\nchest_xray_test_normal = os.listdir(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/NORMAL\")\nchest_xray_test_pneumonia = os.listdir(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/PNEUMONIA\")\n\n# To store the file names and category\nfilenames = []\nCategory = []\n\n# Appending all the normal images to filenames and category to Category\nfor file in chest_xray_train_normal:\n    filenames.append(file)\n    Category.append(\"NORMAL\")\n    \n# Appending all the pneumonia images to filenames and category to Category\nfor file in chest_xray_train_pneumonia:\n    filenames.append(file)\n    Category.append(\"PNEUMONIA\")\n    \n# To find the total number of observations we have\nprint(len(filenames))\nprint(len(Category))","288e28ae":"# Creating a Dataframe although we are not going to use one, just to show how you can create a dataframe \n\ndf_train = pd.DataFrame({\n    \"Files\" : filenames,\n    \"Category\" : Category\n})\n\ndf_train.head(10)","0c77f9e8":"df_train.tail(10)","bc594c65":"# Same thing as training, but this is for testing\n\ntest_files = []\ntest_category = []\nfor file in chest_xray_test_normal:\n    test_files.append(file)\n    test_category.append(\"NORMAL\")\n\nfor file in chest_xray_test_pneumonia:\n    test_files.append(file)\n    test_category.append(\"PNEUMONIA\")\n    \nprint(len(test_files))\nprint(len(test_category))","e5dc0ca1":"df_test = pd.DataFrame({\n    \"Files\" : test_files,\n    \"Category\" : test_category\n})\n\ndf_test.head(10)","8dadfcba":"df_test.tail(10)","7d2f8d92":"# It's better to know the dimensions of the image before preprocessing\n\n#to read the image\nimg = cv2.imread(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/NORMAL\/NORMAL2-IM-0569-0001.jpeg\")\n\n#this will return dimensions of the image and store it in dimensions variable \ndimensions = img.shape\n\n# Printing the dimensions \nprint(\"Dimensions : \",dimensions)\nprint(\"Height : \",dimensions[0])\nprint(\"Width : \",dimensions[1])\nprint(\"Channels : \",dimensions[2])","a5b685a7":"# Plotting image of a Chest X-ray that is Normal\n\nimage_title = \"NORMAL\"\nimg = load_img(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/NORMAL\/NORMAL2-IM-0569-0001.jpeg\")\n\nplt.imshow(img)\nplt.title(image_title)\nplt.show()","b0011e7a":"# Plotting image of a Chest X-ray that is affected by Pneumonia \n\nimage_title = \"PNEUMONIA\"\nimg = load_img(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/PNEUMONIA\/person675_bacteria_2569.jpeg\")\n\nplt.imshow(img)\nplt.title(image_title)\nplt.show()","af033037":"# Converting the images from original dimensions to (128,128,3)\n\nX_train = []\nY_train = []\nx_test = []\ny_test = []\n\nfor file in chest_xray_train_normal:\n    try:\n        img = cv2.imread(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/NORMAL\/\"+file,cv2.IMREAD_COLOR)\n        img = cv2.resize(img,(128,128))\n    \n        X_train.append(np.array(img))\n        Y_train.append(\"NORMAL\")\n\n    except:\n        pass\n        \nfor file in chest_xray_train_pneumonia:\n    try :\n        img = cv2.imread(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/PNEUMONIA\/\"+file,cv2.IMREAD_COLOR)\n        img = cv2.resize(img,(128,128))\n    \n        X_train.append(np.array(img))\n        Y_train.append(\"PNUEMONIA\")\n        \n    except: \n        pass \n\nfor file in chest_xray_test_normal:\n    \n    try:\n        #print(file)\n        img = cv2.imread(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/NORMAL\/\"+file,cv2.IMREAD_COLOR)\n        img = cv2.resize(img,(128,128))\n    \n        x_test.append(np.array(img))\n        y_test.append(\"NORMAL\")\n    \n    except:\n        pass\n    \nfor file in chest_xray_test_pneumonia:\n    \n    try:\n        img = cv2.imread(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/PNEUMONIA\/\"+file,cv2.IMREAD_COLOR)\n        img = cv2.resize(img,(128,128))\n    \n        x_test.append(np.array(img))\n        y_test.append(\"PNUEMONIA\")    \n    \n    except:\n        pass\n\nprint(\"Total size of X_train is: \",len(X_train))\nprint(\"Total size of Y_train is: \",len(Y_train))\nprint(\"Total size of x_test is: \",len(x_test))\nprint(\"Total size of y_test is: \",len(y_test))","225a9b38":"dimensions = X_train[1].shape\nprint(\"The shape of Image is : \",dimensions)\nprint(\"Height of Image is : \",dimensions[0])\nprint(\"Width of Image is : \",dimensions[1])\nprint(\"Number of channels : \",dimensions[2])","ba4a42e6":"# This variables were lists we need to convert them to numpy arrays\n\nX_train = np.array(X_train)\nx_test = np.array(x_test)\nY_train = np.array(Y_train)\ny_test = np.array(y_test)","db357476":"Y_train.shape","0d533d41":"# Plotting some random images\n\nimport random\nfig,ax = plt.subplots(2,5)\nplt.subplots_adjust(bottom=0.3, top=0.7, hspace=0)\nfig.set_size_inches(15,15)\n\nfor i in range(2):\n    for j in range(5):\n        l = random.randint(0,len(Y_train))\n        ax[i,j].imshow(X_train[l])\n        ax[i,j].set_title(str(Y_train[l]))\n        ax[i,j].set_aspect('equal')","af5b925a":"print(Y_train.shape)\nprint(y_test.shape)","75abb14e":"# Encoding the categories using OneHotEncoder\n# As we have two classes here \"NORMAL\" , \"PNEUMONIA\", so the one hot encoded values will be\n# NORMAL : [1,0]\n# PNEUMONIA : [0,1]\n\nenc = LabelEncoder()\nY_train = enc.fit_transform(Y_train)\ny_test = enc.fit_transform(y_test)","672cc270":"Y_train.shape","a0e70bdd":"y_test.shape","86ba56b5":"Y_train[0:5]","5fc2c8c2":"x_test.shape","4b34e74a":"sgd = SGD(lr = 0.1 , decay = 1e-2 , momentum = 0.9 )","dc053961":"model = Sequential()\n\nmodel.add(Conv2D(32, (3,3), activation = 'relu', input_shape=(128,128,3)))\nmodel.add(MaxPooling2D((2,2)))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2,2)))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2,2)))\n\nmodel.add(Conv2D(256 , (3,3) , activation = 'relu'))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(256, activation='relu'))\n\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(1, activation='sigmoid'))","cdb97db6":"# This will give us a summary of our model\n\nmodel.summary()","fb3c8c2e":"model.compile( loss = \"binary_crossentropy\" , optimizer  = 'adam' , metrics = ['accuracy'])","08d88c87":"# Training our model \n\nmodel.fit(X_train,Y_train,epochs = 30, batch_size = 32)","4c4dd130":"# Evaluating our model on testing data\n\nloss , accuracy = model.evaluate(x_test , y_test , batch_size = 32)\n\nprint('Test accuracy: {:2.2f}%'.format(accuracy*100))","1f60faad":"# Phew, we did it. Implemented our ConvNet that classifies\/detects Pneumonia\n","a9fa71e3":"# Max-Pooling :\n\n#### **This is just the convolution layer part, the fun begans at the MaxPooling layer, where we also use a matrix(matrix2) and stride it over matrix1 and find the maximum values and store them in matrix2.**\n\n\n<div align=\"center\">\n![MaxpoolSample2.png](attachment:MaxpoolSample2.png)\n    <\/div>\n\n\n## And wow, thats how Feature Extraction is done, and this small features combine and give us the correct result. \n\n\n","580b99dc":"# <div style=\"color:red\">Note : Quiz time find the libraries that I included but never used, comment below.<\/div>","90fddcec":"> # Detecting Pneumonia give Chest Xrays\n\n---\n\nSo What is Pneumonia? firstly, So Pneumonia is an infection of the lungs with a range of possible causes. It can be a serious and life-threatening disease. It normally starts with a bacterial, viral, or fungal infection.\n\nAs we have understood about Pnumonia and it's causes, the main objective here for us is to learn about ConvNets that are Convolutional Networks so how a convolutional neural network works:\n\n### Convolutional Neural Networks (ConvNets) :\n\n#### In deep learning, a convolutional neural network (CNN, or ConvNet) is a class of deep neural networks, most commonly applied to analyzing visual imagery. They are also known as shift invariant or space invariant artificial neural networks (SIANN), based on their shared-weights architecture and translation invariance characteristics.[1][2] They have applications in image and video recognition, recommender systems,[3] image classification, medical image analysis, and natural language processing. and yes this is copied from wikipedia. but to make it interesting and informative i have to do what it takes , becuase as our heroes said.\n\n<div align=\"center\" style=\"height:200px,width:200px\">\n![justice_league.jpg](attachment:justice_league.jpg)\n<\/div>  \n\n\n\n#### So in Layman's term a ConvNet is a technique in computer vision to make the algorithm \u201csee\u201d the picture at a deeper level as a composition of various edges, lines, corners and somehow capture the contents of the image.\n","8c9332ad":"## Getting Some more details on Convnets\n---\n\n#### So what happens? as we all know that how we see an image is not like what a computer sees, for computer it's just a matrix of rows and columns, and that to filled with a binary representation of 0s and 1s \n\n## Mind-Blowing isn't it, yeah sure thats a lot of work.\n\nSo what happens in the backgorund is we impletement a frame(i.e a matrix) whatever the number may be 2x2 , 3x3 and it passes by the original image and calculates a summation and stores it in respectable slot as you can see from the below gif\n\n<div align=\"center\">\n![convnet.gif](attachment:convnet.gif)\n    <\/div>\n    \n\n\n"}}