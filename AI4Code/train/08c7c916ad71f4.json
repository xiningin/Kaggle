{"cell_type":{"a75ae777":"code","3431be7c":"code","bbcba9c4":"code","83adf7ab":"code","0de96f8a":"code","767907e8":"code","63c13412":"code","8875493a":"code","b8c2369d":"code","beb76f0d":"code","53d9e91c":"code","c45e9778":"code","59ad84cd":"code","f08df28b":"code","9c54f0fe":"code","a6b437d7":"code","ba61965d":"code","0d735d7b":"code","62d0754e":"code","d031082d":"markdown","3705b920":"markdown","6ae02df5":"markdown","a7182ab7":"markdown","f7c5acea":"markdown","9932753d":"markdown","54866749":"markdown","e0756538":"markdown"},"source":{"a75ae777":"# Plotting\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Machine Learning\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import cohen_kappa_score\n\n# Bread and Butter\nimport os\nimport numpy as np\nimport pandas as pd","3431be7c":"train_df = pd.read_csv(\"..\/input\/train\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test\/test.csv\")","bbcba9c4":"train_df.describe()","83adf7ab":"train_df.head()","0de96f8a":"train_df.dtypes","767907e8":"plt.title('Species', fontsize='xx-large')\ntrain_df['Type'].value_counts().rename(\n    {1:'Dogs',\n     2:'Cats'}).plot(kind='barh')\nplt.xlabel('Count')","63c13412":"plt.title('Adoption Speed', fontsize='xx-large')\ntrain_df['AdoptionSpeed'].value_counts().rename(\n    {0:'Same Day',\n     1:'1-7 Days',\n     2:'8-30 Days',\n     3:'31-90 Days',\n     4:'No adoption after 100 Days'}).plot(kind='barh')\nplt.xlabel('Count')","8875493a":"# define target variable and eliminate the less useful metrics\ntarget = train_df['AdoptionSpeed']\nclean_df = train_df.drop(columns=['Name', 'RescuerID', 'Description', 'PetID', 'AdoptionSpeed'])\nclean_test = test_df.drop(columns=['Name', 'RescuerID', 'Description', 'PetID'])","b8c2369d":"# calculate the length of the description\ndescr_len_train = train_df['Description'].str.len()\ndescr_len_test = test_df['Description'].str.len()","beb76f0d":"# add the length of the decriptions to the dataframe\nclean_df = pd.concat([clean_df,descr_len_train.fillna(0).astype(np.int32)],axis=1)\nclean_test = pd.concat([clean_test,descr_len_test.fillna(0).astype(np.int32)],axis=1)","53d9e91c":"clean_df['Description'].describe()","c45e9778":"classifier = RandomForestClassifier()\n\n# Define the grid\nrand_forest_grid = {\n    'bootstrap': [True],\n    'max_depth': [75, 80, 85, 90],\n    'max_features': ['auto'],\n    'min_samples_leaf': [5, 10, 15],\n    'min_samples_split': [5, 10, 15],\n    'n_estimators': [150, 175, 200, 225]\n}\n\n\n# Search parameter space\nrand_forest_gridsearch = GridSearchCV(estimator = classifier, \n                           param_grid = rand_forest_grid, \n                           cv = 2, \n                           verbose = 1,\n                           n_jobs = -1)","59ad84cd":"# Fit the models\nrand_forest_gridsearch.fit(clean_df, target)","f08df28b":"# What are the best parameters for each model?\nrand_forest_gridsearch.best_params_","9c54f0fe":"# Measure of performance \nprint('Random Forest score: ', cohen_kappa_score(rand_forest_gridsearch.predict(clean_df), \n                                target, weights='quadratic'))","a6b437d7":"test_predictions = rand_forest_gridsearch.predict(clean_test)","ba61965d":"prediction_df = pd.DataFrame({'PetID' : test_df['PetID'],\n                              'AdoptionSpeed' : test_predictions})","0d735d7b":"prediction_df.head()","62d0754e":"prediction_df.to_csv('submission.csv', index=False)","d031082d":"## Train the Classifier","3705b920":"## Prepare Submission","6ae02df5":"## Get predictions for test set","a7182ab7":"## Import Libraries","f7c5acea":"## Describe the Data","9932753d":"## Let's Visualize ","54866749":"## Prepare the Data","e0756538":"## Import Data"}}