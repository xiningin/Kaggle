{"cell_type":{"32eebf3a":"code","d4871211":"code","05b8c1e8":"code","d6d49dbc":"code","d1ca5a9e":"code","c2c4c7ef":"code","b9af9a04":"code","79fe0e34":"code","4bb1268e":"code","e0fb2b99":"code","8972c137":"code","560664d7":"code","e6d0d91c":"code","fb0f75be":"code","cfbbb0cc":"code","618d9ce4":"code","15f84a98":"code","bc845d8e":"code","41112a2b":"code","7bec9aa6":"code","0677793e":"code","23b4e9bb":"code","bdf73b25":"code","084e0015":"code","e9cb9d89":"code","13260729":"code","9b13fa48":"code","34ac8087":"code","2cf2d81c":"code","5e1934e6":"code","70080fbe":"code","f68ecf71":"code","9e89e7c5":"code","81d1f7b6":"code","7040dbed":"code","de432bf9":"code","df61fde5":"code","65b7cdb7":"code","43002026":"code","fd56b60a":"code","fa7acb37":"code","378ce5fd":"code","1c7ccab8":"code","22ba86ff":"code","71df50eb":"code","06f38e58":"code","74817690":"code","37f58397":"code","7a213aef":"code","203c792f":"code","46f0178a":"markdown","3577a75f":"markdown","a77ec55f":"markdown","4533816d":"markdown","b70671d7":"markdown","40d54efe":"markdown","db151425":"markdown","5513d28e":"markdown","432d8e34":"markdown","7d479fc3":"markdown","33d88615":"markdown","1a89d10b":"markdown","f0403ceb":"markdown","d2003a0e":"markdown","c1938ead":"markdown","2dcfc37c":"markdown","6e768a8f":"markdown","d8df6f85":"markdown","59ece10b":"markdown","f4cd669b":"markdown","40493f85":"markdown","47ea37e1":"markdown","fd7fe6e6":"markdown","7b0b9668":"markdown","034ad006":"markdown","17fb353d":"markdown","4087c394":"markdown","812ba9fb":"markdown","75da9a42":"markdown","d1436205":"markdown","c5e69db7":"markdown","082a8491":"markdown"},"source":{"32eebf3a":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d4871211":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","05b8c1e8":"#The shape of the data both train & test\nprint(\"shape of train dataset: \",df_train.shape)\nprint(\"shape of test Dataset: \",df_test.shape)","d6d49dbc":"#Preview of the first 5 rows of the train data\ndf_train.head(n=5)","d1ca5a9e":"#Preview of the first 5 rows of the test data\ndf_test.head(n=5)","c2c4c7ef":"#Checking the number of unique values in each column\ndict = {}\nfor i in list(df_train.columns):\n    dict[i]=df_train[i].value_counts().shape[0]\npd.DataFrame(dict,index=['Unique count']).T","b9af9a04":"df_train.info()","79fe0e34":"df_train.describe()","4bb1268e":"pd.DataFrame(df_train.isnull().sum(),columns=['null'])","e0fb2b99":"pd.DataFrame(df_test.isnull().sum(),columns=['null'])\n","8972c137":"df_train['Age'] = df_train['Age'].fillna(df_train['Age'].mean())\ndf_test['Age'] = df_test['Age'].fillna(df_test['Age'].mean())\ndf_train['Cabin'] = df_train['Cabin'].fillna('unknown')\ndf_test['Cabin'] = df_test['Cabin'].fillna('unknown')\ndf_train = df_train.dropna()\ndf_test['Fare'] = df_test['Fare'].fillna(df_test['Fare'].mean())","560664d7":"df_train.duplicated().sum()","e6d0d91c":"df_test.duplicated().sum()","fb0f75be":"# Classifying data into numerical and categorical variables.\ndata_numerical=df_train[['Age','Fare']]\ndata_categorical=df_train[['Survived', 'Pclass', 'Sex', 'SibSp','Parch', 'Embarked']]","cfbbb0cc":"fig, ax = plt.subplots(figsize = (12,6))\nfig.patch.set_facecolor('#f6f5f7')\nax.set_facecolor('#f6f5f5')\nsns.kdeplot(data=data_numerical,shade=True,palette='rocket') # Distributions\n# removing spines\nfor i in [\"top\",\"right\"]:\n    ax.spines[i].set_visible(False)\nplt.title('Kde Plots for age and Fare',weight='bold')\nplt.show()","618d9ce4":"# Skewness and kurtosis\ns_k=[]\nfor i in data_numerical.columns:\n    s_k.append([i,data_numerical[i].skew(),data_numerical[i].kurt()])\nskew_kurt=pd.DataFrame(s_k,columns=['Columns','Skewness','Kurtosis'])\nskew_kurt","15f84a98":"fig, ax = plt.subplots(figsize = (12,6))\nfig.patch.set_facecolor('#f6f5f7')\nax.set_facecolor('#f6f5f5')\nsns.kdeplot(df_train.loc[(df_train['Survived']==1),'Age'], color='r',\n            shade=True, Label='Survived')\n  \nsns.kdeplot(df_train.loc[(df_train['Survived']==0),'Age'], color='b',\n            shade=True, Label='Not Survived')\nfor i in [\"top\",\"right\"]:\n    ax.spines[i].set_visible(False)\nplt.title('Kde Plots for age',weight='bold')\n\nplt.show()","bc845d8e":"fig, ax = plt.subplots(figsize = (12,6))\nfig.patch.set_facecolor('#f6f5f7')\nax.set_facecolor('#f6f5f5')\nsns.kdeplot(df_train.loc[(df_train['Survived']==1),\n            'Fare'], color='r', shade=True, Label='Survived')\n  \nsns.kdeplot(df_train.loc[(df_train['Survived']==0), \n            'Fare'], color='b', shade=True, Label='Not Survived')\nfor i in [\"top\",\"right\"]:\n    ax.spines[i].set_visible(False)\nplt.title('Kde Plots for fare',weight='bold')\n\nplt.show()","41112a2b":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nsns.scatterplot(data=df_train,x=df_train['Age'],y=df_train['Fare'],hue=df_train['Survived'],palette=\"OrRd\")\nplt.title('Scatterplot for age vs fare')\nplt.subplot(1,2,2)\nsns.scatterplot(data=df_train,x=df_train['Fare'],y=df_train['Age'],hue=df_train['Survived'],palette=\"OrRd\")\nplt.title('Scatterplot for fare vs age')\nplt.show()","7bec9aa6":"sns.heatmap(data_numerical.corr(),annot=True)\nplt.show()","0677793e":"fig=plt.figure(figsize=(20,15),dpi=100)\nsns.pairplot(data=df_train,hue='Survived',size=2,palette='OrRd')\nplt.show()","23b4e9bb":"fig=plt.figure(figsize=(20,23))\nbackground_color = '#f6f5f7'\nfig.patch.set_facecolor(background_color) \nfor indx,val in enumerate(data_categorical.columns):\n    ax=plt.subplot(4,2,indx+1)\n    ax.set_facecolor(background_color)\n    ax.set_title(val,fontweight='bold',fontfamily='serif')\n    for i in ['top','right']:\n        ax.spines[i].set_visible(False)\n    ax.grid(linestyle=':',axis='y')\n    sns.countplot(data_categorical[val],palette='OrRd')","bdf73b25":"data_cat=df_train[[ 'Pclass', 'Sex', 'SibSp','Parch', 'Embarked']]\n\nfig=plt.figure(figsize=(20,23))\nbackground_color = '#f6f5f7'\nfig.patch.set_facecolor(background_color) \nfor indx,val in enumerate(data_cat.columns):\n    ax=plt.subplot(4,2,indx+1)\n    ax.set_facecolor(background_color)\n    ax.set_title(val,fontweight='bold',fontfamily='serif')\n    for i in ['top','right']:\n        ax.spines[i].set_visible(False)\n    ax.grid(linestyle=':',axis='y')\n    sns.countplot(data_cat[val],palette='OrRd_r',hue=df_train['Survived'])","084e0015":"plt.figure(figsize=(10,8))\nsns.heatmap(df_train.corr(),annot=True)\nplt.show()","e9cb9d89":"from sklearn.preprocessing import LabelEncoder\ncols = ['Sex','Embarked']\ndf_train[cols] = df_train[cols].apply(LabelEncoder().fit_transform)\ndf_test[cols] = df_test[cols].apply(LabelEncoder().fit_transform)\ndf_train.head(n=5)","13260729":"x_train = df_train.drop(['PassengerId','Name','Ticket','Cabin','Survived'],axis=1)\ny_train = df_train['Survived']","9b13fa48":"x_test = df_test.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)","34ac8087":"plt.figure(figsize=(15,3))\nplt.subplot(1,2,1)\nsns.boxplot(data=data_numerical,x=data_numerical['Age'], orient=\"h\",color='crimson')\nplt.subplot(1,2,2)\nsns.boxplot(data=data_numerical,x=data_numerical['Fare'], orient=\"h\",color='crimson')\nplt.show()","2cf2d81c":"zscore = np.abs(stats.zscore(x_train))\nprint(zscore)","5e1934e6":"threshold = 5\nprint(np.where(zscore > 5))","70080fbe":"x_train1 = x_train[(zscore<5).all(axis=1)]","f68ecf71":"x_train.shape,x_train1.shape","9e89e7c5":"# Standardizing our training and testing data.\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx_train1 = scaler.fit_transform(x_train1)\nx_test = scaler.transform(x_test)","81d1f7b6":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score,confusion_matrix","7040dbed":"k_nei = KNeighborsClassifier()\nk_nei.fit(x_train,y_train)\n\nk_acc = accuracy_score(y_train,k_nei.predict(x_train))\n\nprint(\"Train set Accuracy:\"+str(accuracy_score(y_train,k_nei.predict(x_train))*100))","de432bf9":"plt.figure(figsize=(6,4))\ndf_ = pd.DataFrame(confusion_matrix(y_train, k_nei.predict(x_train)), range(2),range(2))\nsns.set(font_scale=1.4)#for label size\nsns.heatmap(df_, annot=True,annot_kws={\"size\": 16}, fmt='g')\nplt.xlabel('Predicted Class')\nplt.ylabel('Original Class')\nplt.show()","df61fde5":"log_reg = LogisticRegression()\nlog_reg.fit(x_train,y_train)\n\nlog_acc=accuracy_score(y_train,log_reg.predict(x_train))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,log_reg.predict(x_train))*100))","65b7cdb7":"plt.figure(figsize=(6,4))\ndf_ = pd.DataFrame(confusion_matrix(y_train, log_reg.predict(x_train)), range(2),range(2))\nsns.set(font_scale=1.4)#for label size\nsns.heatmap(df_, annot=True,annot_kws={\"size\": 16}, fmt='g')\nplt.xlabel('Predicted Class')\nplt.ylabel('Original Class')\nplt.show()","43002026":"s_vec = SVC()\ns_vec.fit(x_train,y_train)\n\ns_acc = accuracy_score(y_train,s_vec.predict(x_train))\n\nprint(\"Train set Accuracy:\"+str(accuracy_score(y_train,s_vec.predict(x_train))*100))","fd56b60a":"r_for = RandomForestClassifier()\nr_for.fit(x_train,y_train)\n\nr_acc=accuracy_score(y_train,r_for.predict(x_train))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,r_for.predict(x_train))*100))","fa7acb37":"y_pred= r_for.predict(x_train).ravel()\n\nfrom sklearn.metrics import roc_curve\nfpr_keras, tpr_keras, thresholds_keras = roc_curve(y_train, y_pred)\n\nfrom sklearn.metrics import auc\nauc_keras = auc(fpr_keras, tpr_keras)\n\nplt.figure(figsize=(8,6))\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr_keras, tpr_keras, label='Random forest (area = {:.3f})'.format(auc_keras))\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='best')\nplt.show()","378ce5fd":"g_clf = GaussianNB()\ng_clf.fit(x_train,y_train)\n\ng_acc = accuracy_score(y_train,g_clf.predict(x_train))\n\nprint(\"Train set Accuracy:\"+str(accuracy_score(y_train,g_clf.predict(x_train))*100))","1c7ccab8":"GB_clf = GradientBoostingClassifier(n_estimators=100,random_state=6)\nGB_clf.fit(x_train,y_train)\n\nGB_acc = accuracy_score(y_train,GB_clf.predict(x_train))\n\nprint(\"Train set Accuracy:\"+str(accuracy_score(y_train,GB_clf.predict(x_train))*100))","22ba86ff":"x_clf = XGBClassifier()\nx_clf.fit(x_train,y_train)\n\nx_acc = accuracy_score(y_train,x_clf.predict(x_train))\n\nprint(\"Train set Accuracy:\"+str(accuracy_score(y_train,x_clf.predict(x_train))*100))","71df50eb":"plt.figure(figsize=(6,4))\ndf_ = pd.DataFrame(confusion_matrix(y_train, x_clf.predict(x_train)), range(2),range(2))\nsns.set(font_scale=1.4)#for label size\nsns.heatmap(df_, annot=True,annot_kws={\"size\": 16}, fmt='g')\nplt.xlabel('Predicted Class')\nplt.ylabel('Original Class')\nplt.show()","06f38e58":"y_pred= x_clf.predict(x_train).ravel()\n\nfrom sklearn.metrics import roc_curve\nfpr_keras, tpr_keras, thresholds_keras = roc_curve(y_train, y_pred)\n\nfrom sklearn.metrics import auc\nauc_keras = auc(fpr_keras, tpr_keras)\n\nplt.figure(figsize=(8,6))\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr_keras, tpr_keras, label='XG Boost (area = {:.3f})'.format(auc_keras))\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='best')\nplt.show()","74817690":"models = pd.DataFrame({\n    'Model': ['Logistic','KNN', 'SVC',\n             'Randomfo',  'Gaussian','Gboost','XGB'],\n    'Score': [ log_acc,k_acc, s_acc, r_acc, g_acc,GB_acc,x_acc]\n})\n\nmodels.sort_values(by = 'Score', ascending = False)","37f58397":"plt.figure(figsize=(10,6))\nsns.barplot(x='Model',y='Score',data=models)\nplt.show()","7a213aef":"prediction = x_clf.predict(x_test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": df_test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","203c792f":"submission = pd.read_csv('submission.csv')\nsubmission.head()","46f0178a":"### Univariate Analysis of Categorical Variables","3577a75f":"### Correlation Matrix","a77ec55f":"### imputing missing data and handling categorical variables","4533816d":"# <center> Titanic Survival|EDA and Prediction\n    \n![image.png](attachment:6041fb4d-57cd-45c4-ba8f-765814d196c7.png)","b70671d7":"As there is no strong correlation between the variables, we can ignore the chances of multicollinearity.","40d54efe":"### KNeighbors","db151425":"**Numerical Variable analysis**","5513d28e":">**Observations:**\n* No strong correlation between our features.\n\n* The highest correlation can be observed between parch and sibsp.\n\n* The weakest correlation can be observed between pclass and fare.","432d8e34":"### Training the Models","7d479fc3":"### Data","33d88615":">**Observations:**\n* The probability of 1st pclass have more as compared to other\n* As males are more in number than females but as compared to males, females have more chance of survived\n* Southampton people are survived more in number but also they are only more number that not survived\n* Cherbourg people are more in number that survived as they are less in number.","1a89d10b":"### GradientBoosting","f0403ceb":"### Packages","d2003a0e":"> **Exploratory Data Analysis**","c1938ead":"### Understanding Data","2dcfc37c":"> **Observations :**\n* The Fare is heavily skewed towards Left and most of the distribution is between 0-100.\n\n* The age is between 0 and 50 for most of the people.\n\n* The age is distributed between 0 and 100.","6e768a8f":"### Support Vector","d8df6f85":">**obesrvations:**\n* The maximum value of fare is 500 maybe a outlier\n* kids survived more as compared to olders\n* Fare is extremly positive skweed","59ece10b":"* If the skewness is between -0.5 & 0.5, the data are nearly symmetrical.If the skewness is between -1 & -0.5 (negative skewed) or between 0.5 & 1(positive skewed), the data are slightly skewed.If the skewness is lower than -1 (negative skewed) or greater than 1 (positive skewed), the data are extremely skewed.\n* Kurtosis is a statistical measure, whether the data is heavy-tailed or light-tailed in a normal distribution","f4cd669b":">**Observations:**\n* Mostly the given data is not survived\n* The number of people are more in 3 pclass\n* As compared to females, males are more in number in the ship\n* Mostly 0 siblings and 0 Parents\n* The number of people are more from southmpton","40493f85":"> **observations:**\n* Maximum Fare is 512 and Minimum is 0\n* Maximum age is 80\n* The average fare is 32","47ea37e1":"### Correlation plot for numerical variables","fd7fe6e6":"### GaussianNB","7b0b9668":"> **observations:**\n* Total 147 cabins\n* Totla 891 passengers","034ad006":"### LogisticRegression","17fb353d":"**Check my other notebooks**\n\nhttps:\/\/www.kaggle.com\/gudisesaichand\/diabetes-eda-and-prediction\n\nhttps:\/\/www.kaggle.com\/gudisesaichand\/delhi-house-price-predictions\n\n**Refrences**\n\nhttps:\/\/www.kaggle.com\/ruthvikpvs\/stroke-data-eda-and-prediction\n\nhttps:\/\/www.kaggle.com\/namanmanchanda\/heart-attack-eda-prediction-90-accuracy\n\nhttps:\/\/www.kaggle.com\/anshigupta01\/diabetes-prediction-eda-models","4087c394":"### RandomForest","812ba9fb":"### Data Description\n\n* **survived:** 0 = No, 1 = Yes\n* **pclass:** Ticket class 1 = 1st, 2 = 2nd, 3 = 3rd\n* **sex:** Sex\n* **Age:** Age in years\n* **sibsp:** siblings\n* **parch:**  parents \n* **ticket:** Ticket number\n* **fare** Passenger fare\n* **cabin** Cabin number\n* **embarked:** Port of Embarkation , C = Cherbourg, Q = Queenstown, S = Southampton","75da9a42":"### Data Preprocessing","d1436205":"### XGBoost","c5e69db7":"### Bivariate analysis of Numerical Variables","082a8491":"### Summary statistics"}}