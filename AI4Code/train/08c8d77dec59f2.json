{"cell_type":{"963af61f":"code","60c4dd91":"code","49387c5a":"code","65374744":"code","85b92122":"code","196247dc":"code","2686903a":"code","9d42d458":"code","4a76072f":"code","6d9877f4":"code","a2b7499b":"code","f1fa4266":"code","3cc13e76":"code","effe3502":"code","c7f9e838":"code","e8f414c5":"code","ebe42ab4":"code","810ef72f":"code","b81b4f0c":"code","37398621":"code","b2a578ca":"code","79a71fc6":"code","8d4c64ee":"code","cbe6ac0c":"code","accaa27f":"code","1ad353ae":"code","a9ff983c":"code","e3f10ca5":"code","82899644":"code","0170f268":"code","024dfff4":"code","911157bf":"code","d099d399":"code","f7226252":"markdown","30fd980b":"markdown","2f527d0f":"markdown","61529a7c":"markdown","347a0110":"markdown","0d27662a":"markdown","92486204":"markdown"},"source":{"963af61f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","60c4dd91":"df= pd.read_csv('\/kaggle\/input\/customer-analytics\/Train.csv')\ndf.head()","49387c5a":"df.info()","65374744":"df.isna().sum()","85b92122":"df.describe()","196247dc":"df.drop('ID', axis=1, inplace=True)","2686903a":"df.head()","9d42d458":"cat_cols= ['Warehouse_block','Mode_of_Shipment', 'Product_importance', 'Gender' ]","4a76072f":"plt.figure(figsize=(15,10))\ni=1\nfor col in cat_cols:\n    plt.subplot(2,2,i)\n    sns.countplot(df[col])\n    i+=1","6d9877f4":"i = 1\nplt.figure(figsize=(15,10))\nfor col in ['Cost_of_the_Product', 'Weight_in_gms', 'Discount_offered']:\n    plt.subplot(2,2,i)\n    sns.distplot(df[col])\n    i+=1","a2b7499b":"i=1\nplt.figure(figsize=(15,10))\nfor col in ['Customer_care_calls', 'Customer_rating', 'Prior_purchases']:\n    plt.subplot(2,2,i)\n    sns.countplot(df[col], hue=df['Reached.on.Time_Y.N'])\n    i+=1","f1fa4266":"df['Discount_offered'].hist()","3cc13e76":"sns.pairplot(df)","effe3502":"df= pd.get_dummies(df)","c7f9e838":"df.head()","e8f414c5":"df.drop('Gender_F', axis=1, inplace=True)\ndf.head()","ebe42ab4":"plt.figure(figsize=(15,12))\nsns.heatmap(df.corr(), annot=True, cmap='coolwarm')","810ef72f":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","b81b4f0c":"X= df.drop('Reached.on.Time_Y.N', axis=1)\ny= df['Reached.on.Time_Y.N']\n\nX_train, X_test, y_train, y_test= train_test_split(X,y, test_size=0.2, stratify=y)","37398621":"ss= StandardScaler()\nX_train= ss.fit_transform(X_train)\nX_test=ss.transform(X_test)","b2a578ca":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report, confusion_matrix","79a71fc6":"key= ['LogisticRegression', 'DecisionTreeClassifier', 'RandomForestClassifier', 'KNeighborsClassifier', 'XGBClassifier', 'SVC']\nvalue= [LogisticRegression(), DecisionTreeClassifier(), RandomForestClassifier(), KNeighborsClassifier(), XGBClassifier(), SVC()]\n\nmodels= dict(zip(key, value))","8d4c64ee":"for key,value in models.items():\n    value.fit(X_train, y_train)\n    pred= value.predict(X_test)\n    print(key)\n    print(classification_report(y_test, pred))\n    print(confusion_matrix(y_test, pred))\n        ","cbe6ac0c":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.utils.np_utils import to_categorical","accaa27f":"X_train_arr= np.array(X_train)\ny_train_arr= np.array(to_categorical(y_train))\nX_test_arr= np.array(X_test)\ny_test_arr= np.array(to_categorical(y_test))\n","1ad353ae":"X_train_arr.shape","a9ff983c":"y_train.shape","e3f10ca5":"X_test_arr.shape","82899644":"from keras.optimizers import Adam\ndef create_model(activation, learning_rate):\n    \n    model= Sequential()\n    model.add(Dense(100, activation=activation, kernel_initializer='normal', input_shape=(18,)))\n    model.add(Dense(50, activation=activation))\n    model.add(Dense(25, activation=activation))\n    model.add(Dense(1, activation='sigmoid'))\n    my_opt= Adam(lr=learning_rate)\n\n    model.compile(optimizer=my_opt, loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","0170f268":"from keras.wrappers.scikit_learn import KerasClassifier\n\nmodel= KerasClassifier(build_fn= create_model)","024dfff4":"from sklearn.model_selection import RandomizedSearchCV\n\nparams= {'epochs': [20,30,40,50],\n        'batch_size': [220,330,440],\n        'activation':['relu', 'tanh'],\n        'learning_rate':[0.001, 0.01, 0.1,1]}\n\nrandom= RandomizedSearchCV(model, param_distributions= params, cv=5)\nrandom.fit(X_train, y_train)","911157bf":"random.best_estimator_","d099d399":"random.best_estimator_.score(X_test, y_test)","f7226252":"# Preprocessing","30fd980b":"# Training Model using ML Algorithms","2f527d0f":"# The accuracy on test set is still 65%. ","61529a7c":"# Exploratory Data Analysis","347a0110":"# Upvote and Comment if you liked :)","0d27662a":"# Load Data","92486204":"# Using Neural Networks"}}