{"cell_type":{"b8ed9927":"code","184bf0de":"code","5e19ee96":"code","122d2383":"code","862f3b3a":"code","7e535b4a":"code","0fd1fc5f":"code","01243d12":"code","aa1bf104":"code","612b18ae":"code","3649c1fb":"code","4e02b75a":"code","5765bf47":"code","3db3d80d":"code","fe4f7232":"code","23d66e75":"code","28edd209":"code","a49c8dce":"code","fb7f8bc6":"code","3d6775e9":"code","37d9e758":"markdown","7802119e":"markdown","4514ac7e":"markdown"},"source":{"b8ed9927":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","184bf0de":"# load data\ntrain_data = pd.read_csv('..\/input\/leaf-classification\/train.csv.zip', index_col ='id')\ntest_data = pd.read_csv('..\/input\/leaf-classification\/test.csv.zip')","5e19ee96":"test_ids = test_data.id\ntest_data = test_data.drop(['id'], axis =1)","122d2383":"train_data.head()","862f3b3a":"# taking care of missing values\ntrain_data.isnull().any().sum()","7e535b4a":"test_data.head()","0fd1fc5f":"test_data.isnull().any().sum()","01243d12":"# encoding catagorical\ntrain_data.info()","aa1bf104":"test_data.info()","612b18ae":"train_data.shape","3649c1fb":"test_data.shape","4e02b75a":"train_data['species'].nunique()","5765bf47":"# IV and DV\nx = train_data.drop('species',axis=1)\ny = train_data['species']","3db3d80d":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ny_fit = encoder.fit(train_data['species'])\ny_label = y_fit.transform(train_data['species']) \nclasses = list(y_fit.classes_) \nclasses","fe4f7232":"# splitting\nfrom sklearn.model_selection import  train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y_label, test_size = 0.2, random_state =1)","23d66e75":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 40)\nclassifier.fit(x_train, y_train)","28edd209":"from sklearn.metrics import classification_report\npredictions = classifier.predict(x_test)\nprint (classification_report(y_test, predictions))","a49c8dce":"final_predictions = classifier.predict_proba(test_data)","fb7f8bc6":"submission = pd.DataFrame(final_predictions, columns=classes)\nsubmission.insert(0, 'id', test_ids)\nsubmission.reset_index()","3d6775e9":"submission.to_csv('submission.csv', index = False)","37d9e758":"# Part 1: Data Preprocessing","7802119e":"The target y is the only catagorical column","4514ac7e":"# Part 2: Building model"}}