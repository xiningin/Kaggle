{"cell_type":{"d681429a":"code","18bc44b0":"code","d3e2cf34":"code","386e57da":"code","80ae5b26":"code","3d1cd4f3":"code","d6d2e898":"code","84e047d2":"code","dcae4b34":"code","a0f19b0b":"code","a3d19066":"code","840447f9":"code","47ae4eeb":"code","1c6df283":"code","804ec52f":"code","369967c2":"code","bff29906":"code","b8e6b97c":"code","e76abf30":"code","7c71ef68":"code","329400d9":"code","71cf5cba":"code","50d16006":"code","ec5df4f8":"code","01e123bf":"code","89a4ae95":"code","8ae350b0":"code","d3006de0":"code","fd3c42e0":"markdown","83550cd0":"markdown","ca0cbde1":"markdown","bdbf4852":"markdown","1ec7888c":"markdown","c166d4e7":"markdown","a5aaa962":"markdown","4085b7e1":"markdown","0718e161":"markdown","25c962d1":"markdown","1dd51654":"markdown","91541afd":"markdown","0b19cc43":"markdown","648158c6":"markdown","8264048f":"markdown","84263c14":"markdown","9d05b819":"markdown"},"source":{"d681429a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot\nimport seaborn as sns\n\nfrom keras.models import Sequential\nfrom keras.layers import LSTM\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\n\nfrom sklearn.preprocessing import MinMaxScaler \n\nimport pylab\nimport os","18bc44b0":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nplt.rcParams[\"figure.figsize\"] = (7.5,5)\nplt.style.use('seaborn')\n\npylab.rc('figure', figsize=(10,7))\n\nSMALL_SIZE = 10\nMEDIUM_SIZE = 12\nBIGGER_SIZE = 16\n\nplt.rc('font', size=BIGGER_SIZE)          # controls default text sizes\nplt.rc('axes', titlesize=BIGGER_SIZE)     # fontsize of the axes title\nplt.rc('axes', labelsize=BIGGER_SIZE)    # fontsize of the x and y labels\nplt.rc('xtick', labelsize=MEDIUM_SIZE)    # fontsize of the tick labels\nplt.rc('ytick', labelsize=MEDIUM_SIZE)    # fontsize of the tick labels\nplt.rc('legend', fontsize=MEDIUM_SIZE)    # legend fontsize\nplt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title","d3e2cf34":"stock=pd.read_csv('\/kaggle\/input\/YahooFinance_Stock_2014-2019_train.csv',header=0,index_col=0,parse_dates=True,squeeze=True)\nstock.head()","386e57da":"stock[[\"Open\",\"High\",\"Low\",\"Close\"]].plot.area(figsize=(15,10),alpha=0.5);\nplt.title('Yahoo Finance Stock trend (2014-2019)')\nplt.show()","80ae5b26":"stock=stock[\"Open\"]","3d1cd4f3":"##Grouping the data by Year\ngroups=stock.groupby(pd.Grouper(freq='A'))\n\nyears={}\nfor name, group in groups:\n    years[name.year] = group.values\n    \nyears[2017]=np.append(years[2017],years[2017][-1]) ## Keeping the number of days same. Just to visualise the yearly data\nyears[2018]=np.append(years[2018],years[2018][-1]) \n\nyears=pd.DataFrame(years)","d6d2e898":"years.plot.box(figsize=(15,10))\nplt.title('Stock Price distribution by year')\nplt.ylabel('Stock Price')\nplt.xlabel('Year')\nplt.show()","84e047d2":"plt.figure(figsize=(15,7.5))\nsns.barplot(years.iloc[-1,:].index,years.iloc[-1,:].values,palette='YlOrBr')\nplt.title('End of year Stock Value')\nplt.ylabel('Stock Price')\nplt.xlabel('Year')\nplt.show()","dcae4b34":"years.plot(figsize=(15,7.5))\nplt.title('Yahoo Stock Trends by year',fontsize=20)\nplt.ylabel('Stock Price')\nplt.xlabel('Time')\nplt.show()","a0f19b0b":"fig,ax=plt.subplots(nrows=3,ncols=2,figsize=(15,15))\npd.plotting.lag_plot(years[2014],ax=ax[0,0],lag=1)\npd.plotting.lag_plot(years[2015],ax=ax[0,1],lag=1)\npd.plotting.lag_plot(years[2016],ax=ax[1,0],lag=1)\npd.plotting.lag_plot(years[2017],ax=ax[1,1],lag=1)\npd.plotting.lag_plot(years[2018],ax=ax[2,0],lag=1)\npd.plotting.lag_plot(years[2019],ax=ax[2,1],lag=1)\nfig.suptitle('1 Day Lag Plots',fontsize=20)\nax[0,0].set_title('2014',X=0.1)\nax[0,1].set_title('2015',X=0.1)\nax[1,0].set_title('2016',X=0.1)\nax[1,1].set_title('2017',X=0.1)\nax[2,0].set_title('2018',X=0.1)\nax[2,1].set_title('2019',X=0.1)\nplt.show()","a3d19066":"fig,ax=plt.subplots(nrows=3,ncols=2,figsize=(15,15))\npd.plotting.autocorrelation_plot(years[2014],ax=ax[0,0])\npd.plotting.autocorrelation_plot(years[2015],ax=ax[0,1])\npd.plotting.autocorrelation_plot(years[2016],ax=ax[1,0])\npd.plotting.autocorrelation_plot(years[2017],ax=ax[1,1])\npd.plotting.autocorrelation_plot(years[2018],ax=ax[2,0])\npd.plotting.autocorrelation_plot(years[2019],ax=ax[2,1])\nfig.suptitle('Auto corelation Plots',fontsize=20)\nax[0,0].set_title('2014',X=0.1)\nax[0,1].set_title('2015',X=0.1)\nax[1,0].set_title('2016',X=0.1)\nax[1,1].set_title('2017',X=0.1)\nax[2,0].set_title('2018',X=0.1)\nax[2,1].set_title('2019',X=0.1)\n#plt.rc('axes', titlesize=20)\nplt.show()","840447f9":"fig,ax=plt.subplots(nrows=3,ncols=1,figsize=(12,12))\nstock.rolling(window=1).mean().plot(ax=ax[0])\nstock.rolling(window=7).mean().plot(ax=ax[1])\nstock.rolling(window=30).mean().plot(ax=ax[2])\n#stock.rolling(window=7).mean().plot(ax=ax[1,1])\n#fig.suptitle('Auto corelation Plots',fontsize=20)\nax[0].set_title('Daily Moving Average',fontsize=20)\nax[1].set_title('7-Days Moving Average',fontsize=20)\nax[2].set_title('30-Days Moving Average',fontsize=20)\n#ax[1,1].set_title('2016')\nplt.tight_layout()","47ae4eeb":"data_train=stock.reset_index()\ndata_train.columns=['ds','y']","1c6df283":"model=Prophet()\nmodel.fit(data_train) ##Fitting our data\n\nfuture=model.make_future_dataframe(periods=365)\npredict=model.predict(future)","804ec52f":"fig1=model.plot(predict,figsize=(12,7.5))\nplt.title('Yahoo Stock Trends',fontsize=20)\nplt.ylabel('Stock Price')\nplt.xlabel('Year')","369967c2":"fig = model.plot(predict,figsize=(12,7.5))\na = add_changepoints_to_plot(fig.gca(), model, predict)\nplt.title('Yahoo Stock Trends with Potential change points',fontsize=20)\nplt.ylabel('Stock Price')\nplt.xlabel('Year')","bff29906":"fig2=model.plot_components(predict,figsize=(12,10))","b8e6b97c":"training_dataset=pd.read_csv('\/kaggle\/input\/YahooFinance_Stock_2014-2019_train.csv')\ntraining_data=training_dataset.iloc[:,1:2].values\n\n\nsc=MinMaxScaler(feature_range=(0,1))  ##Normalising\ntraining_data=sc.fit_transform(training_data)\n\n#Scaling\n\nX_train=[]\ny_train=[]\nfor i in range(60,len(training_data)):\n    X_train.append(training_data[i-60:i,0])\n    y_train.append(training_data[i,0])\n\nX_train= np.array(X_train)\ny_train=np.array(y_train)    \n\nX_train=X_train.reshape((len(training_data)-60),60,1)","e76abf30":"regressor= Sequential()\n\n#Adding LSTM layers\n\nregressor.add(LSTM(units=50,return_sequences=True,input_shape=(X_train.shape[1],1)))\nregressor.add(Dropout(0.2))\n\nregressor.add(LSTM(units=50,return_sequences=True))\nregressor.add(Dropout(0.2))\n\nregressor.add(LSTM(units=50,return_sequences=True))\nregressor.add(Dropout(0.2))\n\nregressor.add(LSTM(units=50))\nregressor.add(Dropout(0.2))\n\nregressor.add(Dense(units=1))\n\n#Compiling RNN\nregressor.compile(optimizer='adam',loss='mean_squared_error')","7c71ef68":"regressor.summary()","329400d9":"regressor.fit(X_train,y_train,epochs=100,batch_size=32)","71cf5cba":"predict_2020=predict[(predict['ds']>'2019-12-31') & (predict['ds']<'2020-8-01')][['ds','trend']]  ##Extracting 2020 prediction from linear Model\npredict_2020=predict_2020.set_index('ds',drop=True)\n\nXt=test_dataset.set_index('Date',drop=True)  ##Ignoring the holidays\nnew=Xt.join(predict_2020)\nlinear_prediction=new['trend'].values.reshape(len(new),1)","50d16006":"#Getting the real stock price of 2020\ntest_dataset=pd.read_csv('\/kaggle\/input\/YahooFinance_Stock_2020_Test.csv')\nreal_stock_prices=test_dataset.iloc[:,1:2].values","ec5df4f8":"total_dataset=pd.concat((training_dataset['Open'],test_dataset['Open']),axis=0)\ninputs=total_dataset.iloc[len(total_dataset)-len(test_dataset)-60:].values\ninputs=inputs.reshape(-1,1)\n\ninputs=sc.transform(inputs)\n\nX_test=[]\nfor i in range(60,(60+len(real_stock_prices))):\n    X_test.append(inputs[i-60:i,0])\n    \nX_test= np.array(X_test)\nX_test=X_test.reshape(X_test.shape[0],X_test.shape[1],1)\n\npredicted_stock_values=regressor.predict(X_test)\npredicted_stock_values=sc.inverse_transform(predicted_stock_values)","01e123bf":"Year_2020=pd.DataFrame(np.concatenate((real_stock_prices,predicted_stock_values,linear_prediction),axis=1),index=test_dataset['Date'],columns=['Real','Predicted','Linear'])\nYear_2020.index = pd.to_datetime(Year_2020.index)\nYear_2020.tail()","89a4ae95":"groups_real = Year_2020['Real'].groupby(pd.Grouper(freq='M'))\ngroups_predict = Year_2020['Predicted'].groupby(pd.Grouper(freq='M'))\n\nmonths_real = pd.concat([pd.DataFrame(x[1].values) for x in groups_real], axis=1)\nmonths_predict = pd.concat([pd.DataFrame(x[1].values) for x in groups_predict], axis=1)\n\nmonths_real = pd.DataFrame(months_real)\nmonths_predict = pd.DataFrame(months_predict)\n\nmonths_real.columns = ['Jan','Feb','Mar','Apr','May','Jun','July']\nmonths_predict.columns = ['Jan','Feb','Mar','Apr','May','Jun','July']","8ae350b0":"plt.figure(figsize=(12,7.5))\nplt.plot(real_stock_prices,color='red',label='Real Stock Price')\nplt.plot(predicted_stock_values,color='blue',label='Predicted Stock Price')\n#plt.plot(predicted_stock_values_2,color='green',label='Predicted Google Stock Price_2')\nplt.plot(linear_prediction,color='black',label='Linear Prediction')\nplt.title('January 2020 Stock Price of Yahoo')\nplt.legend()\nplt.xlabel('Time')\nplt.ylabel('Stock Price')\nplt.show()","d3006de0":"mon=pd.DataFrame({'Real':months_real[18:19].values.ravel(),'predict':months_predict[18:19].values.ravel()},index=months_real[18:19].columns)\nmon.plot(kind='bar',figsize=(12,7.5))\nplt.xlabel(\"Month\")\nplt.ylabel(\"Stock Price\")\nplt.title(\"Month End Stock Price for 2020\")\nplt.show()","fd3c42e0":"### Data Preprocessing","83550cd0":"### Load the Visualise the data","ca0cbde1":"We are going to focus only on the Opening stocks and ignore the `Highs`, `Lows` and `Close` prices.","bdbf4852":"Except for '2015' where we see a little dip, there is a positive YoY trend with `2019 Q4` seeing some strong gains.","1ec7888c":"The model has predicted the trends much better than the linear model and better able to capture the directional trend over time.\n\n## Please upvote and leave your valueble feedback.\n\n## Thank you!","c166d4e7":" ### Making prediction\n Let's try to see how the future stock values look like based on a linear model before building our actual model. We will be using fbprophet library to predict future stock price for the entire 2020 year.","a5aaa962":"The plots created show a relatively strong positive correlation stock prices between the current and previous day's value.","4085b7e1":"### Introduction\n\n![960x0.jpg](attachment:960x0.jpg)\n\nThe goal of this kernel is to identify the trend in the future stock price of Yahoofinance based on previous years data.\n\nWe have historical stock data for `Yahoo Finance`. The stock dates back to as old as 1986, however for our model we will be looking at last 6 years of data, i.e. since 2014, and try to predict the stock price for January 2020. Then we will compare how close our predictions are to the true values. Is our model able to forcast the `ups` and `downs` accurately? \n\nSo let's get started.","0718e161":"### Import Libraries","25c962d1":"### Model Building","1dd51654":"### Visualising the forecasts","91541afd":"### Preprocessing test data","0b19cc43":"### Predicting the 2020 stock values","648158c6":"Although we see a similar trend, but this is clearly not a good fit to our training data since it greatly underfits the training data.","8264048f":"### Building a RNN model\n\nNow let's build our model to predict the stock price for Yahoo. The idea is to train the model to predict `d` day's stock based on past past 2 months stock prices `(d-60) `. ","84263c14":"### Extracting linear forecast for 2020","9d05b819":"We see a stong autocorrelation at the begining of every year which stabilises towards the mid and starts increasing again during the last quarter."}}