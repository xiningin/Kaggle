{"cell_type":{"241d24c7":"code","397427c1":"code","eea164dc":"code","0ac040b6":"code","d2a9f8a1":"code","b5d4be9c":"code","1a2266e5":"code","b7d0eb5a":"code","08dc354f":"code","000e2f6f":"code","2d05a232":"code","85c2fa59":"code","5f36e236":"code","cbbb38bd":"code","16d6c335":"code","336c72df":"code","84c39fad":"code","8021bd13":"markdown","3516b964":"markdown","5a5a5237":"markdown","7bc2f7ae":"markdown","63212a18":"markdown","2c7f7c2e":"markdown","f739ddc8":"markdown","f3f1dbbc":"markdown"},"source":{"241d24c7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_score\nprint(os.listdir(\"..\/input\/\"))","397427c1":"train_df = pd.read_csv('..\/input\/train.csv', nrows=2000000)\ntrain_df['distance'] = np.sqrt(\n                            np.abs(train_df['pickup_longitude']-train_df['dropoff_longitude'])**2 +\n                            np.abs(train_df['pickup_latitude']-train_df['dropoff_latitude'])**2\n                                )\ntrain_df.head()","eea164dc":"# Separate year month and day\n# SUPER SLOW ACTION\n# train_df['year'] = pd.DatetimeIndex(train_df['pickup_datetime']).year\n# train_df['month'] = pd.DatetimeIndex(train_df['pickup_datetime']).month\n# train_df['day'] = pd.DatetimeIndex(train_df['pickup_datetime']).day","0ac040b6":"test_df = pd.read_csv('..\/input\/test.csv')\ntest_df['distance'] = np.sqrt(\n                            np.abs(test_df['pickup_longitude']-test_df['dropoff_longitude'])**2 +\n                            np.abs(test_df['pickup_latitude']-test_df['dropoff_latitude'])**2\n                                )\ntest_df.head()","d2a9f8a1":"# Exclude non-sense data\ntrain_df = train_df[train_df.fare_amount>=0]\ntrain_df = train_df.dropna(how = 'any', axis = 'rows')\ntest_df = test_df.dropna(how = 'any', axis = 'rows')\n\n# Select just the interesting columns\nfeat_columns = ['passenger_count', 'distance']\nlabel_column = ['fare_amount']\nfeat_data = train_df[feat_columns]\nlabel_data= train_df[label_column]","b5d4be9c":"# Define fare categories\nlabel_data['fare_cat'] = np.where(label_data['fare_amount'] >= 100, 3, \n                         np.where(label_data['fare_amount'] >= 50, 2, \n                         np.where(label_data['fare_amount'] >= 20, 1, 0)))\nlabel_data = label_data['fare_cat']\n\n# Flatten columns\nlabel_data = np.ravel(label_data)\n# Create DMatrix\nD_train = xgb.DMatrix(data=feat_data, silent=1, nthread=-1, label =label_data)\n\n# Train parameters\nparam = { 'silent' : 1,\n       'learning_rate' :  0.6,\n       'max_depth': 8,\n       'tree_method': 'exact',\n       'objective': 'multi:softprob',\n       \"num_class\": 4,\n       'eval_metric': 'mlogloss' }\nn_rounds = 50\nbst = xgb.train(param, D_train, n_rounds)","1a2266e5":"feat_test_data = test_df[feat_columns]\n\nD_test = xgb.DMatrix(data=feat_test_data, silent=1, nthread=-1)\npred = bst.predict( D_test )\npredictions = np.asarray([np.argmax(line) for line in pred])\n# accuracy = precision_score(test_labels, predictions, average='micro')\n# print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","b7d0eb5a":"df2 = feat_test_data\ndf2.loc[:,('pred')] = list(predictions)","08dc354f":"df2.groupby(\"pred\").agg(\"count\")","000e2f6f":"xgb.plot_importance(bst)","2d05a232":"feat_data = train_df[feat_columns]\nlabel_data= train_df[label_column]\n\nlabel_data['fare_cat'] = np.where(label_data['fare_amount'] >= 100, 6, \n                         np.where(label_data['fare_amount'] >= 50, 5, \n                         np.where(label_data['fare_amount'] >= 35, 4, \n                         np.where(label_data['fare_amount'] >= 20, 3, \n                         np.where(label_data['fare_amount'] >= 10, 2, \n                         np.where(label_data['fare_amount'] >= 5, 1, 0))))))\n\nlabel_data = label_data['fare_cat']\n# Flatten columns\nlabel_data = np.ravel(label_data)\n# Create DMatrix\nD_train = xgb.DMatrix(data=feat_data, silent=1, nthread=-1, label =label_data)\n\n# Train parameters\nparam = { 'silent' : 1,\n       'learning_rate' :  0.6,\n       'max_depth': 8,\n       'tree_method': 'exact',\n       'objective': 'multi:softprob',\n       \"num_class\": 7,\n       'eval_metric': 'mlogloss' }\n\nn_rounds = 50\nbst = xgb.train(param, D_train, n_rounds)","85c2fa59":"feat_test_data = test_df[feat_columns]\n\nD_test = xgb.DMatrix(data=feat_test_data, silent=1, nthread=-1)\npred = bst.predict( D_test )\npredictions = np.asarray([np.argmax(line) for line in pred])\n# accuracy = precision_score(test_labels, predictions, average='micro')\n# print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","5f36e236":"df2 = feat_test_data\n\ndf2.loc[:,('pred')] = list(predictions)\ndf2.groupby(\"pred\").agg(\"count\")","cbbb38bd":"test_df['pred'] = df2['pred'].values","16d6c335":"test_df['fare_amount'] = np.where(test_df['pred'] == 6, 100, \n                         np.where(test_df['pred'] == 5, 75, \n                         np.where(test_df['pred'] == 4, 42, \n                         np.where(test_df['pred'] >= 3, 27, \n                         np.where(test_df['pred'] >= 2, 15, \n                         np.where(test_df['pred'] >= 1, 7.5, 3))))))","336c72df":"submission = test_df[['key', 'fare_amount']]","84c39fad":"submission.to_csv('submission.csv', index = False)","8021bd13":"# Simple prediction using XGBoost \n# Simple straightforward relation between distance-fare","3516b964":"#### Train_data","5a5a5237":"# Create column 'distance' using euclidian distance","7bc2f7ae":"label_data['fare_cat'] = np.where(label_data['fare_amount'] >= 100, 6, \n                         np.where(label_data['fare_amount'] >= 50, 5, \n                         np.where(label_data['fare_amount'] >= 35, 4, \n                         np.where(label_data['fare_amount'] >= 20, 3, \n                         np.where(label_data['fare_amount'] >= 10, 2, \n                         np.where(label_data['fare_amount'] >= 5, 1, 0))))))\n\nlabel_data = label_data['fare_cat']","63212a18":"## Test set","2c7f7c2e":"### Test_data","f739ddc8":"# Second try - selecting more closely for fare_amount","f3f1dbbc":"## Treat data and train the model"}}