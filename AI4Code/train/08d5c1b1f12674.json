{"cell_type":{"72ca1134":"code","4ce2bf63":"code","0f261c1f":"code","f0b699b9":"code","3ac63e73":"code","9a951bf7":"code","ed057a25":"code","d6ef4a6a":"code","2a232967":"code","c94ae66f":"code","46d49934":"code","d8e95b98":"code","5fe3e716":"code","a3d1a183":"code","0c43b7ac":"code","1a21e01b":"code","3a7a290d":"code","9306bc55":"code","ac3d1c9e":"code","6d522c33":"code","9ca84fb4":"code","cd58e385":"code","cf067301":"code","b64c3e74":"code","fe3e215e":"code","4078738c":"markdown","29f3208c":"markdown","5f1b5c8a":"markdown","88d6e352":"markdown","1fb4bbe9":"markdown","ebf85b35":"markdown","aeb17232":"markdown","09db01a4":"markdown","ff152058":"markdown","8e29b3c2":"markdown","481627cf":"markdown","7a832224":"markdown","12c5f239":"markdown","0f6724d0":"markdown","dc08d8d6":"markdown","374d05f4":"markdown","b04e319d":"markdown","07766358":"markdown","a8eaa478":"markdown","b683bab0":"markdown","a5214df5":"markdown","6b1a9c0a":"markdown","0c23aa1f":"markdown","a60a49fd":"markdown","d7a0a6b9":"markdown"},"source":{"72ca1134":"import torch\n\n# If there's a GPU available...\nif torch.cuda.is_available():    \n\n    # Tell PyTorch to use the GPU.    \n    device = torch.device(\"cuda\")\n\n    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n\n    print('We will use the GPU:', torch.cuda.get_device_name(0))\n\n# If not...\nelse:\n    print('No GPU available, using the CPU instead.')\n    device = torch.device(\"cpu\")","4ce2bf63":"import pandas as pd\n\ntrain_df = pd.read_csv(\"..\/input\/nlp-getting-started\/train.csv\")\ntrain_df.head()","0f261c1f":"sentences = train_df.text.values\nlabels = train_df.target.values","f0b699b9":"num_labels = len(set(labels))\nprint(num_labels)","3ac63e73":"from transformers import BertTokenizer\n\n# Load the BERT tokenizer.\nprint('Loading BERT tokenizer...')\ntokenizer = BertTokenizer.from_pretrained('bert-base-cased')","9a951bf7":"# Print the original sentence.\nprint(' Original: ', sentences[0])\n\n# Print the sentence split into tokens.\nprint('Tokenized: ', tokenizer.tokenize(sentences[0]))\n\n# Print the sentence mapped to token ids.\nprint('Token IDs: ', tokenizer.convert_tokens_to_ids(tokenizer.tokenize(sentences[0])))","ed057a25":"# Tokenize all of the sentences and map the tokens to thier word IDs.\ninput_ids = []\nattention_masks = []\n\n# For every sentence...\nfor sent in sentences:\n    # `encode_plus` will:\n    #   (1) Tokenize the sentence.\n    #   (2) Prepend the `[CLS]` token to the start.\n    #   (3) Append the `[SEP]` token to the end.\n    #   (4) Map tokens to their IDs.\n    #   (5) Pad or truncate the sentence to `max_length`\n    #   (6) Create attention masks for [PAD] tokens.\n    encoded_dict = tokenizer.encode_plus(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                        max_length = 128,           # Pad & truncate all sentences.\n                        padding = \"max_length\",\n                        truncation = True,\n                        return_attention_mask = True,   # Construct attn. masks.\n                        return_tensors = 'pt',     # Return pytorch tensors.\n                   )\n    \n    # Add the encoded sentence to the list.    \n    input_ids.append(encoded_dict['input_ids'])\n    \n    # And its attention mask (simply differentiates padding from non-padding).\n    attention_masks.append(encoded_dict['attention_mask'])\n\n# Convert the lists into tensors.\ninput_ids = torch.cat(input_ids, dim=0)\nattention_masks = torch.cat(attention_masks, dim=0)\nlabels = torch.tensor(labels)\n\n# Print sentence 0, now as a list of IDs.\nprint('Original: ', sentences[0])\nprint('Token IDs:', input_ids[0])","d6ef4a6a":"from torch.utils.data import TensorDataset, random_split\n\n# Combine the training inputs into a TensorDataset.\ndataset = TensorDataset(input_ids, attention_masks, labels)\n\n# Create a 90-10 train-validation split.\n\n# Calculate the number of samples to include in each set.\ntrain_size = int(0.9 * len(dataset))\nval_size = len(dataset) - train_size\n\n# Divide the dataset by randomly selecting samples.\ntrain_dataset, val_dataset = random_split(dataset, [train_size, val_size])\n\nprint('{:>5,} training samples'.format(train_size))\nprint('{:>5,} validation samples'.format(val_size))","2a232967":"from torch.utils.data import DataLoader, RandomSampler, SequentialSampler\n\n# The DataLoader needs to know our batch size for training, so we specify it \n# here. For fine-tuning BERT on a specific task, the authors recommend a batch \n# size of 16 or 32.\nbatch_size = 32\n\n# Create the DataLoaders for our training and validation sets.\n# We'll take training samples in random order. \ntrain_dataloader = DataLoader(\n            train_dataset,  # The training samples.\n            sampler = RandomSampler(train_dataset), # Select batches randomly\n            batch_size = batch_size # Trains with this batch size.\n        )\n\n# For validation the order doesn't matter, so we'll just read them sequentially.\nvalidation_dataloader = DataLoader(\n            val_dataset, # The validation samples.\n            sampler = SequentialSampler(val_dataset), # Pull out batches sequentially.\n            batch_size = batch_size # Evaluate with this batch size.\n        )","c94ae66f":"from transformers import BertForSequenceClassification, AdamW, BertConfig\n\n# Load BertForSequenceClassification, the pretrained BERT model with a single \n# linear classification layer on top. \nmodel = BertForSequenceClassification.from_pretrained(\n    \"bert-base-cased\", # Use the 12-layer BERT model, with an uncased vocab.\n    num_labels = num_labels, # The number of output labels--2 for binary classification.\n                    # You can increase this for multi-class tasks.   \n    output_attentions = False, # Whether the model returns attentions weights.\n    output_hidden_states = False, # Whether the model returns all hidden-states.\n)\n\n# Tell pytorch to run this model on the GPU.\nmodel.cuda()","46d49934":"# Note: AdamW is a class from the huggingface library (as opposed to pytorch) \n# I believe the 'W' stands for 'Weight Decay fix\"\noptimizer = AdamW(model.parameters(),\n                  lr = 2e-5, # args.learning_rate - default is 5e-5, our notebook had 2e-5\n                  eps = 1e-8 # args.adam_epsilon  - default is 1e-8.\n                )\n","d8e95b98":"from transformers import get_linear_schedule_with_warmup\n\n# Number of training epochs. The BERT authors recommend between 2 and 4. \n# We chose to run for 4, but we'll see later that this may be over-fitting the\n# training data.\nepochs = 1\n\n# Total number of training steps is [number of batches] x [number of epochs]. \n# (Note that this is not the same as the number of training samples).\ntotal_steps = len(train_dataloader) * epochs\n\n# Create the learning rate scheduler.\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps = 0, # Default value in run_glue.py\n                                            num_training_steps = total_steps)","5fe3e716":"import numpy as np\n\n# Function to calculate the accuracy of our predictions vs labels\ndef flat_accuracy(preds, labels):\n    pred_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return np.sum(pred_flat == labels_flat) \/ len(labels_flat)","a3d1a183":"import time\nimport datetime\n\ndef format_time(elapsed):\n    '''\n    Takes a time in seconds and returns a string hh:mm:ss\n    '''\n    # Round to the nearest second.\n    elapsed_rounded = int(round((elapsed)))\n    \n    # Format as hh:mm:ss\n    return str(datetime.timedelta(seconds=elapsed_rounded))\n","0c43b7ac":"import random\nimport numpy as np\n\n# Set the seed value all over the place to make this reproducible.\nseed_val = 42\n\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)\ntraining_stats = []\ntotal_t0 = time.time()\n\nfor epoch_i in range(0, epochs):\n    \n    # Perform one full pass over the training set.\n\n    print(\"\")\n    print('======== Epoch {:} \/ {:} ========'.format(epoch_i + 1, epochs))\n    print('Training...')\n\n    # Measure how long the training epoch takes.\n    t0 = time.time()\n\n    # Reset the total loss for this epoch.\n    total_train_loss = 0\n\n    # Put the model into training mode. Don't be mislead--the call to \n    # `train` just changes the *mode*, it doesn't *perform* the training.\n    # `dropout` and `batchnorm` layers behave differently during training\n    # vs. test (source: https:\/\/stackoverflow.com\/questions\/51433378\/what-does-model-train-do-in-pytorch)\n    model.train()\n\n    for step, batch in enumerate(train_dataloader):\n\n        # Progress update every 40 batches.\n        if step % 40 == 0 and not step == 0:\n            # Calculate elapsed time in minutes.\n            elapsed = format_time(time.time() - t0)\n            \n            # Report progress.\n            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))\n\n        # Unpack this training batch from our dataloader. \n        #\n        # As we unpack the batch, we'll also copy each tensor to the GPU using the \n        # `to` method.\n        #\n        # `batch` contains three pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n\n        # Always clear any previously calculated gradients before performing a\n        # backward pass. PyTorch doesn't do this automatically because \n        # accumulating the gradients is \"convenient while training RNNs\". \n        # (source: https:\/\/stackoverflow.com\/questions\/48001598\/why-do-we-need-to-call-zero-grad-in-pytorch)\n        model.zero_grad()        \n\n        # Perform a forward pass (evaluate the model on this training batch).\n        # In PyTorch, calling `model` will in turn call the model's `forward` \n        # function and pass down the arguments. The `forward` function is \n        # documented here: \n        # https:\/\/huggingface.co\/transformers\/model_doc\/bert.html#bertforsequenceclassification\n        # The results are returned in a results object, documented here:\n        # https:\/\/huggingface.co\/transformers\/main_classes\/output.html#transformers.modeling_outputs.SequenceClassifierOutput\n        # Specifically, we'll get the loss (because we provided labels) and the\n        # \"logits\"--the model outputs prior to activation.\n        result = model(b_input_ids, \n                       token_type_ids=None, \n                       attention_mask=b_input_mask, \n                       labels=b_labels,\n                       return_dict=True)\n\n        loss = result.loss\n        logits = result.logits\n\n        # Accumulate the training loss over all of the batches so that we can\n        # calculate the average loss at the end. `loss` is a Tensor containing a\n        # single value; the `.item()` function just returns the Python value \n        # from the tensor.\n        total_train_loss += loss.item()\n\n        # Perform a backward pass to calculate the gradients.\n        loss.backward()\n\n        # Clip the norm of the gradients to 1.0.\n        # This is to help prevent the \"exploding gradients\" problem.\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        # Update parameters and take a step using the computed gradient.\n        # The optimizer dictates the \"update rule\"--how the parameters are\n        # modified based on their gradients, the learning rate, etc.\n        optimizer.step()\n\n        # Update the learning rate.\n        scheduler.step()\n\n    # Calculate the average loss over all of the batches.\n    avg_train_loss = total_train_loss \/ len(train_dataloader)            \n    \n    # Measure how long this epoch took.\n    training_time = format_time(time.time() - t0)\n\n    print(\"\")\n    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n    print(\"  Training epoch took: {:}\".format(training_time))\n        \n    # ========================================\n    #               Validation\n    # ========================================\n    # After the completion of each training epoch, measure our performance on\n    # our validation set.\n\n    print(\"\")\n    print(\"Running Validation...\")\n\n    t0 = time.time()\n\n    # Put the model in evaluation mode--the dropout layers behave differently\n    # during evaluation.\n    model.eval()\n\n    # Tracking variables \n    total_eval_accuracy = 0\n    total_eval_loss = 0\n    nb_eval_steps = 0\n\n    # Evaluate data for one epoch\n    for batch in validation_dataloader:\n        \n        # Unpack this training batch from our dataloader. \n        #\n        # As we unpack the batch, we'll also copy each tensor to the GPU using \n        # the `to` method.\n        #\n        # `batch` contains three pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n        \n        # Tell pytorch not to bother with constructing the compute graph during\n        # the forward pass, since this is only needed for backprop (training).\n        with torch.no_grad():        \n\n            # Forward pass, calculate logit predictions.\n            # token_type_ids is the same as the \"segment ids\", which \n            # differentiates sentence 1 and 2 in 2-sentence tasks.\n            result = model(b_input_ids, \n                           token_type_ids=None, \n                           attention_mask=b_input_mask,\n                           labels=b_labels,\n                           return_dict=True)\n\n        # Get the loss and \"logits\" output by the model. The \"logits\" are the \n        # output values prior to applying an activation function like the \n        # softmax.\n        loss = result.loss\n        logits = result.logits\n            \n        # Accumulate the validation loss.\n        total_eval_loss += loss.item()\n\n        # Move logits and labels to CPU\n        logits = logits.detach().cpu().numpy()\n        label_ids = b_labels.to('cpu').numpy()\n\n        # Calculate the accuracy for this batch of test sentences, and\n        # accumulate it over all batches.\n        total_eval_accuracy += flat_accuracy(logits, label_ids)\n        \n\n    # Report the final accuracy for this validation run.\n    avg_val_accuracy = total_eval_accuracy \/ len(validation_dataloader)\n    print(\"  Accuracy: {0:.2f}\".format(avg_val_accuracy))\n\n    # Calculate the average loss over all of the batches.\n    avg_val_loss = total_eval_loss \/ len(validation_dataloader)\n    \n    # Measure how long the validation run took.\n    validation_time = format_time(time.time() - t0)\n    \n    print(\"  Validation Loss: {0:.2f}\".format(avg_val_loss))\n    print(\"  Validation took: {:}\".format(validation_time))\n\n    # Record all statistics from this epoch.\n    training_stats.append(\n        {\n            'epoch': epoch_i + 1,\n            'Training Loss': avg_train_loss,\n            'Valid. Loss': avg_val_loss,\n            'Valid. Accur.': avg_val_accuracy,\n            'Training Time': training_time,\n            'Validation Time': validation_time\n        }\n    )\n\nprint(\"\")\nprint(\"Training complete!\")\n\nprint(\"Total training took {:} (h:mm:ss)\".format(format_time(time.time()-total_t0)))","1a21e01b":"import pandas as pd\n\n# Display floats with two decimal places.\npd.set_option('precision', 2)\n\n# Create a DataFrame from our training statistics.\ndf_stats = pd.DataFrame(data=training_stats)\n\n# Use the 'epoch' as the row index.\ndf_stats = df_stats.set_index('epoch')\n\n# A hack to force the column headers to wrap.\n#df = df.style.set_table_styles([dict(selector=\"th\",props=[('max-width', '70px')])])\n\n# Display the table.\ndf_stats","3a7a290d":"import os\n\n# Saving best-practices: if you use defaults names for the model, you can reload it using from_pretrained()\n\noutput_dir = '.\/model_save\/'\n\n# Create output directory if needed\nif not os.path.exists(output_dir):\n    os.makedirs(output_dir)\n\nprint(\"Saving model to %s\" % output_dir)\n\n# Save a trained model, configuration and tokenizer using `save_pretrained()`.\n# They can then be reloaded using `from_pretrained()`\nmodel_to_save = model.module if hasattr(model, 'module') else model  # Take care of distributed\/parallel training\nmodel_to_save.save_pretrained(output_dir)\ntokenizer.save_pretrained(output_dir)","9306bc55":"# Load a trained model and vocabulary that you have fine-tuned\nmodel = BertForSequenceClassification.from_pretrained(output_dir)\ntokenizer = BertTokenizer.from_pretrained(output_dir)\n\n# Copy the model to the GPU.\nmodel.to(device)","ac3d1c9e":"test_df = pd.read_csv(\"..\/input\/nlp-getting-started\/test.csv\")\ntest_sentences = test_df.text.values","6d522c33":"# Tokenize all of the sentences and map the tokens to thier word IDs.\ntest_input_ids = []\ntest_attention_masks = []\n\n# For every sentence...\nfor sent in test_sentences:\n    # `encode_plus` will:\n    #   (1) Tokenize the sentence.\n    #   (2) Prepend the `[CLS]` token to the start.\n    #   (3) Append the `[SEP]` token to the end.\n    #   (4) Map tokens to their IDs.\n    #   (5) Pad or truncate the sentence to `max_length`\n    #   (6) Create attention masks for [PAD] tokens.\n    encoded_dict = tokenizer.encode_plus(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                        max_length = 128,           # Pad & truncate all sentences.\n                        padding = \"max_length\",\n                        truncation = True,\n                        return_attention_mask = True,   # Construct attn. masks.\n                        return_tensors = 'pt',     # Return pytorch tensors.\n                   )\n    \n    # Add the encoded sentence to the list.    \n    test_input_ids.append(encoded_dict['input_ids'])\n    \n    # And its attention mask (simply differentiates padding from non-padding).\n    test_attention_masks.append(encoded_dict['attention_mask'])\n\n# Convert the lists into tensors.\ntest_input_ids = torch.cat(test_input_ids, dim=0)\ntest_attention_masks = torch.cat(test_attention_masks, dim=0)","9ca84fb4":"from torch.utils.data import TensorDataset,DataLoader, RandomSampler, SequentialSampler\n\n# Combine the test inputs into a TensorDataset.\ntest_dataset = TensorDataset(test_input_ids, test_attention_masks)\n\nbatch_size = 32  \ntest_dataloader = DataLoader(\n            test_dataset,  # The training samples.\n            sampler = SequentialSampler(test_dataset),\n            batch_size = batch_size # Trains with this batch size.\n        )","cd58e385":"model.eval()\n# Tracking variables \npredictions , true_labels = [], []\n# Predict \nfor batch in test_dataloader:\n  # Add batch to GPU\n  batch = tuple(t.to(device) for t in batch)\n  # Unpack the inputs from our dataloader\n  b_input_ids, b_input_mask = batch\n  # Telling the model not to compute or store gradients, saving memory and speeding up prediction\n  with torch.no_grad():\n    # Forward pass, calculate logit predictions\n    logits = model(b_input_ids, token_type_ids=None, attention_mask=b_input_mask)\n  # Move logits and labels to CPU\n  logits = logits[0].cpu().numpy()\n  # Store predictions and true labels\n  predictions.append(logits)","cf067301":"import numpy as np\n\nflat_predictions = [item for sublist in predictions for item in sublist]\nflat_predictions = np.argmax(flat_predictions, axis=1).flatten()\n    ","b64c3e74":"output_df = pd.DataFrame({'id':test_df.id.values, 'target':flat_predictions})\noutput_df","fe3e215e":"output_df.to_csv('.\/predictions.csv', index=False) # Index put to False to keep kaggle format","4078738c":"Define a helper function for calculating accuracy.","29f3208c":"Below is our training loop. There's a lot going on, but fundamentally for each pass in our loop we have a trianing phase and a validation phase. \n\n> *Thank you to [Stas Bekman](https:\/\/ca.linkedin.com\/in\/stasbekman) for contributing the insights and code for using validation loss to detect over-fitting!*\n\n**Training:**\n- Unpack our data inputs and labels\n- Load data onto the GPU for acceleration\n- Clear out the gradients calculated in the previous pass. \n    - In pytorch the gradients accumulate by default (useful for things like RNNs) unless you explicitly clear them out.\n- Forward pass (feed input data through the network)\n- Backward pass (backpropagation)\n- Tell the network to update parameters with optimizer.step()\n- Track variables for monitoring progress\n\n**Evalution:**\n- Unpack our data inputs and labels\n- Load data onto the GPU for acceleration\n- Forward pass (feed input data through the network)\n- Compute loss on our validation data and track variables for monitoring progress\n\nPytorch hides all of the detailed calculations from us, but we've commented the code to point out which of the above steps are happening on each line. \n\n> *PyTorch also has some [beginner tutorials](https:\/\/pytorch.org\/tutorials\/beginner\/blitz\/cifar10_tutorial.html#sphx-glr-beginner-blitz-cifar10-tutorial-py) which you may also find helpful.*","5f1b5c8a":"## 3.1. BERT Tokenizer","88d6e352":"# 2. Loading Dataset\n","1fb4bbe9":"Now that we have our model loaded we need to grab the training hyperparameters from within the stored model.\n\nFor the purposes of fine-tuning, the authors recommend choosing from the following values (from Appendix A.3 of the [BERT paper](https:\/\/arxiv.org\/pdf\/1810.04805.pdf)):\n\n>- **Batch size:** 16, 32  \n- **Learning rate (Adam):** 5e-5, 3e-5, 2e-5  \n- **Number of epochs:** 2, 3, 4 \n\nWe chose:\n* Batch size: 32 (set when creating our DataLoaders)\n* Learning rate: 2e-5\n* Epochs: 4 (we'll see that this is probably too many...)\n\nThe epsilon parameter `eps = 1e-8` is \"a very small number to prevent any division by zero in the implementation\" (from [here](https:\/\/machinelearningmastery.com\/adam-optimization-algorithm-for-deep-learning\/)).\n\nYou can find the creation of the AdamW optimizer in `run_glue.py` [here](https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L109).","ebf85b35":"Helper function for formatting elapsed times as `hh:mm:ss`\n","aeb17232":"# Kaggle disaster tweet competition - using BERT with transformers\n\nBased on [Chris McCormick tutorial](https:\/\/mccormickml.com\/2019\/07\/22\/BERT-fine-tuning\/)\n\nReady to be used with Google Colab and Google drive, the datasets are stored on my drive in '\/content\/drive\/MyDrive\/Colab Notebooks\/kaggle\/'.\nIn part A1 I save the trained model in a sub-directory named 'model_save'.\n\nI use only one epoch for faster training.\n\n\n","09db01a4":"## 4.2. Optimizer & Learning Rate Scheduler","ff152058":"# 1. Setup","8e29b3c2":"Let's view the summary of the training process.","481627cf":"# 4. Train Our Classification Model","7a832224":"Let's apply the tokenizer to one sentence just to see the output.\n","12c5f239":"# Inference with test data ","0f6724d0":"We're ready to kick off the training!","dc08d8d6":"\nTo feed our text to BERT, it must be split into tokens, and then these tokens must be mapped to their index in the tokenizer vocabulary.\n\nThe tokenization must be performed by the tokenizer included with BERT--the below cell will download this for us. We'll be using the \"uncased\" version here.\n\n**If you are using this notebook on kaggle the notebook settings must have internet allowed to load bert**","374d05f4":"Now that our input data is properly formatted, it's time to fine tune the BERT model. ","b04e319d":"## 3.4. Training & Validation Split\n","07766358":"Divide up our training set to use 90% for training and 10% for validation.","a8eaa478":"## 4.1. BertForSequenceClassification","b683bab0":"We'll be using Kaggle GPU for Training or CPU if GPU not available.\n","a5214df5":"# 3. Tokenization & Input Formatting\n\nIn this section, we'll transform our dataset into the format that BERT can be trained on.","6b1a9c0a":"## 3.3. Tokenize Dataset","0c23aa1f":"## 4.3. Training Loop","a60a49fd":"Loading the dataset from kaggle notebook.","d7a0a6b9":"## A1. Saving & Loading Fine-Tuned Model\n\nThis first cell (taken from `run_glue.py` [here](https:\/\/github.com\/huggingface\/transformers\/blob\/35ff345fc9df9e777b27903f11fa213e4052595b\/examples\/run_glue.py#L495)) writes the model and tokenizer out to disk."}}