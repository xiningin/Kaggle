{"cell_type":{"ca322799":"code","137235f8":"code","c509d8a9":"code","8e7e2d99":"code","2d84a29c":"code","1f103aca":"code","067f305f":"code","35b1571a":"code","b79dfcad":"code","b0e20323":"code","0948fb47":"code","a781ba61":"code","1be1fc24":"code","ba269d9a":"code","c04c7d82":"code","d7c48618":"code","55a80d2c":"code","5ee2b2c8":"code","21678cd1":"code","58f38a73":"code","6e2b58cf":"code","070faf56":"code","cbfb5b7b":"code","4e03b395":"code","996e6018":"code","61f574e8":"code","e63e4a91":"code","f76a0e4f":"code","e3f25168":"code","1838ab41":"code","09d29095":"code","a6a9c2c4":"code","161c834d":"code","5293988a":"code","4f7513a0":"code","a41ad369":"code","4d1dff1f":"code","fec2e2bd":"code","c71f6b50":"code","d6a61929":"code","4eb7d274":"code","3238b753":"code","fa4a0ef5":"code","f9939f5d":"code","60102ccb":"code","2b30630c":"code","925fd831":"code","b81a790b":"code","644d1c8c":"code","d9845e21":"code","6a6c2d0d":"code","5fcc93b5":"code","1d730b3d":"code","b6ffa0f4":"code","3b2e6caa":"code","76a66fcc":"code","2e652115":"code","e7f69428":"code","6faa3a75":"code","4a27a319":"code","a111d9e4":"code","c14053c8":"code","29e140e6":"code","77c9cc42":"code","16e51920":"code","30ae6ab2":"code","8ac36c06":"markdown","31bc61c4":"markdown","44fc9be7":"markdown","6fd29adb":"markdown","82da1e65":"markdown","73e6655b":"markdown","c735e779":"markdown","f9ac8b8f":"markdown","464c5c90":"markdown","99b01fc0":"markdown","bd6a04e0":"markdown","44774bd9":"markdown","539d4388":"markdown","02240e9b":"markdown","5a5e36bb":"markdown","14382fb9":"markdown","2a7643c8":"markdown","2a2001a9":"markdown","bb1a94ee":"markdown","3069b7bc":"markdown","29a85c86":"markdown","554636f9":"markdown","872ffdaa":"markdown","eac595b2":"markdown","1e78720a":"markdown","3f52c95d":"markdown","e9635ccc":"markdown","d4de5633":"markdown","6533642f":"markdown"},"source":{"ca322799":"# import libraries\nimport pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport plotly as py\nimport plotly.express as px\n\npd.set_option('display.max_rows', 500)","137235f8":"corona_df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ndf = corona_df.copy()\n","c509d8a9":"df.head()","8e7e2d99":"df.tail()","2d84a29c":"df.shape","1f103aca":"df.info()","067f305f":"df.isnull().sum()","35b1571a":"nan_states_df = df[df['Province\/State'].isnull()]\n\nprint('nan_states_df shape is : '+ str(nan_states_df.shape))\nprint('nan_states_df has got : '+ str(nan_states_df['Country\/Region'].nunique()) + ' unique Country\/Region values')\n\nnan_states_df = nan_states_df[['ObservationDate','Country\/Region','Confirmed','Deaths','Recovered']]\nnan_states_df.head()","b79dfcad":"states_df = df[df['Province\/State'].notnull()]\n\nprint('states_df shape is : '+ str(states_df.shape))\nprint('states_df has got : '+ str(states_df['Province\/State'].nunique()) + ' unique Province\/State values')\n \nstates_df = states_df[['ObservationDate','Province\/State','Country\/Region','Confirmed','Deaths','Recovered']]\nstates_df.head()","b0e20323":"concentrated_states_df= states_df.groupby(['ObservationDate','Country\/Region'])[['Confirmed','Deaths','Recovered']].sum().reset_index()\nconcentrated_states_df.head()","0948fb47":"full_countries_df = pd.concat([nan_states_df, concentrated_states_df], axis=0).reset_index()\nfull_countries_df.head()","a781ba61":"lastest_full_countries_df = full_countries_df.groupby(['Country\/Region'])[['ObservationDate','Confirmed','Deaths','Recovered']].max().reset_index()\nlastest_full_countries_df.head()","1be1fc24":"china_df = states_df[states_df['Country\/Region']=='Mainland China'] \nchina_df.head()","ba269d9a":"lastest_china_df = china_df.groupby(['Province\/State']).max().reset_index()\nlastest_china_df.head()","c04c7d82":"other_countries_df = full_countries_df[~(full_countries_df['Country\/Region']=='Mainland China')]\nother_countries_df.head()","d7c48618":"lastest_other_countries_df = other_countries_df.groupby('Country\/Region')[['Confirmed','Deaths','Recovered']].max().reset_index()\nlastest_other_countries_df.head()","55a80d2c":"sorted_lastest_other_countries_df = lastest_other_countries_df.sort_values(by='Confirmed', ascending=False)","5ee2b2c8":"lastest_other_countries_df.head()","21678cd1":"print('Total countries affected by virus: ' + str(lastest_full_countries_df['Country\/Region'].nunique()) + '\\n' + 'That countries are : ' +'\\n'+str(lastest_full_countries_df['Country\/Region'].unique()) )","58f38a73":"print('Worlwide Confirmed Cases: ',lastest_full_countries_df['Confirmed'].sum())\nprint('Worlwide Deaths: ',lastest_full_countries_df['Deaths'].sum())\nprint('Worlwide Recovered Cases: ',lastest_full_countries_df['Recovered'].sum())","6e2b58cf":"lastest_full_countries_df.sort_values(by='Confirmed', ascending=False)","070faf56":"sorted_lastest_full_countries_df = lastest_full_countries_df.sort_values(by='Confirmed', ascending=False)","cbfb5b7b":"sorted_lastest_full_countries_df[:10]","4e03b395":"f, ax = plt.subplots(figsize=(12, 40))\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Confirmed\", y=\"Country\/Region\", data=sorted_lastest_other_countries_df[:],\n            label=\"Confirmed\", color=\"y\")\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Recovered\", y=\"Country\/Region\", data=sorted_lastest_other_countries_df[:],\n            label=\"Recovered\", color=\"g\")\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Deaths\", y=\"Country\/Region\", data=sorted_lastest_other_countries_df[:],\n            label=\"Deaths\", color=\"r\")\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, 400), ylabel=\"\",\n       xlabel=\"Stats\")\nsns.despine(left=True, bottom=True)","996e6018":"fig = px.pie(sorted_lastest_other_countries_df, values = 'Confirmed',names='Country\/Region', height=600)\nfig.update_traces(textposition='inside', textinfo='percent+label')\n\nfig.update_layout(\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n\nfig.show()","61f574e8":"sorted_lastest_full_countries_df[(sorted_lastest_full_countries_df['Confirmed'] == sorted_lastest_full_countries_df['Recovered'])]","e63e4a91":"sorted_lastest_full_countries_df[(sorted_lastest_full_countries_df['Confirmed'] == sorted_lastest_full_countries_df['Deaths'])]","f76a0e4f":"sorted_lastest_full_countries_df[(sorted_lastest_full_countries_df['Recovered'] < sorted_lastest_full_countries_df['Deaths'])]","e3f25168":"lastest_full_countries_df['DeathsRatio'] = (lastest_full_countries_df['Deaths']\/lastest_full_countries_df['Confirmed'])*100","1838ab41":"lastest_full_countries_df[lastest_full_countries_df['Deaths'] > 5].sort_values(by='DeathsRatio', ascending = False)","09d29095":"lastest_full_countries_df['RecoveredRatio'] = (lastest_full_countries_df['Recovered']\/lastest_full_countries_df['Confirmed'])*100","a6a9c2c4":"lastest_full_countries_df[lastest_full_countries_df['Recovered'] > 5].sort_values(by='RecoveredRatio', ascending = False)","161c834d":"fig = px.treemap(lastest_full_countries_df, path=[\"Country\/Region\"], values=\"Confirmed\", \n                 title='Number of Confirmed Cases Worldwide',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()","5293988a":"fig = px.treemap(lastest_full_countries_df, path=[\"Country\/Region\"], values=\"Deaths\", \n                 title='Number of Deaths Cases Worldwide',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()","4f7513a0":"fig = px.treemap(lastest_other_countries_df, path=[\"Country\/Region\"], values=\"Confirmed\", \n                 title='Number of Confirmed Cases outside China',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()","a41ad369":"fig = px.treemap(lastest_other_countries_df, path=[\"Country\/Region\"], values=\"Deaths\", \n                 title='Number of Deaths Cases outside China',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()","4d1dff1f":"lastest_full_countries_df['Treatment'] = (lastest_full_countries_df['Confirmed']-(lastest_full_countries_df['Recovered']+lastest_full_countries_df['Deaths']))\n\nUS = lastest_full_countries_df[lastest_full_countries_df['Country\/Region']=='US'][['Treatment','Recovered','Deaths']].iloc[0]\nSpain = lastest_full_countries_df[lastest_full_countries_df['Country\/Region']=='Spain'][['Treatment','Recovered','Deaths']].iloc[0]\nItaly = lastest_full_countries_df[lastest_full_countries_df['Country\/Region']=='Italy'][['Treatment','Recovered','Deaths']].iloc[0]\nFrance = lastest_full_countries_df[lastest_full_countries_df['Country\/Region']=='France'][['Treatment','Recovered','Deaths']].iloc[0]\n","fec2e2bd":"fig, axes = plt.subplots(\n                     ncols=2,\n                     nrows=2,\n                     figsize=(15, 15))\n\nax1, ax2, ax3, ax4 = axes.flatten()\n\ncolors = ['peachpuff','salmon','tomato']\nax1.pie(US\n           , colors=colors\n           , autopct='%1.1f%%' # adding percentagens\n           , labels=['Treatment','Recovered','Deaths']\n           , shadow=True\n           , startangle=140)\nax1.set_title(\"US Cases Distribution\")\n\nax2.pie(Spain\n           , colors=colors\n           , autopct='%1.1f%%' # adding percentagens\n           , labels=['Treatment','Recovered','Deaths']\n           , shadow=True\n           , startangle=140)\nax2.set_title(\"Spain Cases Distribution\")\n\nax3.pie(Italy\n        , colors=colors\n        , autopct='%1.1f%%' # adding percentagens\n        , labels=['Treatment','Recovered','Deaths']\n        , shadow=True\n        , startangle=140)\nax3.set_title(\"Italy Cases Distribution\")\n\nax4.pie(France\n           , colors=colors\n           , autopct='%1.1f%%' # adding percentagens\n           , labels=['Treatment','Recovered','Deaths']\n           , shadow=True\n           , startangle=140)\nax4.set_title(\"France Cases Distribution\")\n\nfig.legend(['Treatment','Recovered','Deaths']\n           , loc = \"upper right\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 2 \n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1)\n\nplt.show();\n","c71f6b50":"lastest_china_df.head()","d6a61929":"print('Total states affected by virus: ' + str(lastest_china_df['Province\/State'].nunique()) + '\\n' + 'That countries are : ' +'\\n'+str(lastest_china_df['Province\/State'].unique()) )","4eb7d274":"print('China Confirmed Cases: ',lastest_china_df['Confirmed'].sum())\nprint('China Deaths: ',lastest_china_df['Deaths'].sum())\nprint('China Recovered Cases: ',lastest_china_df['Recovered'].sum())","3238b753":"sorted_lastest_china_df = lastest_china_df.sort_values(by='Confirmed', ascending=False)\nsorted_lastest_china_df[:5]","fa4a0ef5":"f, ax = plt.subplots(figsize=(10,15))\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Confirmed\", y=\"Province\/State\", data=sorted_lastest_china_df[:],\n            label=\"Confirmed\", color=\"y\")\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Recovered\", y=\"Province\/State\", data=sorted_lastest_china_df[:],\n            label=\"Recovered\", color=\"g\")\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Deaths\", y=\"Province\/State\", data=sorted_lastest_china_df[:],\n            label=\"Deaths\", color=\"r\")\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, 400), ylabel=\"\",\n       xlabel=\"Stats\")\nsns.despine(left=True, bottom=True)","f9939f5d":"fig = px.pie(lastest_china_df, values = 'Confirmed',names='Province\/State', height=600)\nfig.update_traces(textposition='inside', textinfo='percent+label')\n\nfig.update_layout(\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n\nfig.show()","60102ccb":"lastest_china_df[(lastest_china_df['Confirmed'] == lastest_china_df['Recovered'])]","2b30630c":"lastest_china_df[(lastest_china_df['Confirmed'] == lastest_china_df['Deaths'])]","925fd831":"lastest_china_df[(lastest_china_df['Recovered'] < lastest_china_df['Deaths'])]","b81a790b":"lastest_china_df['DeathsRatio'] = (lastest_china_df['Deaths']\/lastest_china_df['Confirmed'])*100","644d1c8c":"lastest_china_df.sort_values(by='DeathsRatio', ascending=False).head()","d9845e21":"lastest_china_df.sort_values(by='Deaths', ascending=False).head()","6a6c2d0d":"lastest_china_df['RecoveredRatio'] = (lastest_china_df['Recovered']\/lastest_china_df['Confirmed'])*100","5fcc93b5":"lastest_china_df.sort_values(by='RecoveredRatio', ascending=False).head()","1d730b3d":"lastest_china_df.sort_values(by='Recovered', ascending=False).head()","b6ffa0f4":"fig = px.treemap(lastest_china_df, path=[\"Province\/State\"], values=\"Confirmed\", \n                 title='Number of Confirmed Cases in China',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()","3b2e6caa":"fig = px.treemap(lastest_china_df, path=[\"Province\/State\"], values=\"Deaths\", \n                 title='Number of Deaths Cases in China',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()","76a66fcc":"temp = sorted_lastest_china_df[sorted_lastest_china_df['Confirmed'] > 1000]\ntemp['Treatment'] = (temp['Confirmed']-(temp['Recovered']+temp['Deaths']))\ntemp.head()","2e652115":"Hubei = temp[temp['Province\/State']=='Hubei'][['Recovered','Deaths','Treatment']].iloc[0]\nGuangdong = temp[temp['Province\/State']=='Guangdong'][['Recovered','Deaths','Treatment']].iloc[0]\nHenan = temp[temp['Province\/State']=='Henan'][['Recovered','Deaths','Treatment']].iloc[0]\nZhejiang = temp[temp['Province\/State']=='Zhejiang'][['Recovered','Deaths','Treatment']].iloc[0]\nHunan = temp[temp['Province\/State']=='Hunan'][['Recovered','Deaths','Treatment']].iloc[0]\n","e7f69428":"fig, axes = plt.subplots(\n                     ncols=3,\n                     nrows=2,\n                     figsize=(13,15))\n\nax1,ax2,ax3,ax4,ax5,ax6 = axes.flatten()\n\n\nlabels = ['Treatment','Recovered','Deaths']\nexplode = (0, 0,0)\n\nax1.pie(Hubei,explode=explode,labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=180)\nax1.set_title('Hubei')\n  \nax2.pie(Guangdong,explode=explode,labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=180)\nax2.set_title('Guangdong')\n\nax3.pie(Henan,explode=explode,labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=180)\nax3.set_title('Henan')\n\nax4.pie(Zhejiang,explode=explode,labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=180)\nax4.set_title('Zhejiang')\n\nax5.pie(Hunan,explode=explode,labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=180)\nax5.set_title('Hunan')\n\nplt.show()","6faa3a75":"full_countries_df.head()","4a27a319":"fig = px.choropleth(full_countries_df, \n                    locations=\"Country\/Region\", \n                    locationmode = \"country names\",\n                    color=\"Confirmed\",\n                    #color_continuous_scale='Rainbow',\n                    hover_name=\"Country\/Region\", \n                    animation_frame=\"ObservationDate\"\n                   )\n\nfig.update_layout(\n    title_text = 'Spread of Coronavirus',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nfig.show()","a111d9e4":"temp = full_countries_df.groupby('ObservationDate')['Country\/Region'].nunique().reset_index()\ntemp.columns = ['ObservationDate','CountOfCountry']","c14053c8":"fig = px.bar(temp, x='ObservationDate', y='CountOfCountry')\nfig.update_layout(\n    title_text = 'Number Of Countries With Cases',\n    title_x = 0.5)\nfig.show()","29e140e6":"line_data = full_countries_df.groupby('ObservationDate').sum().reset_index()\n\nline_data = line_data.melt(id_vars='ObservationDate', \n                 value_vars=['Confirmed',\n                             'Deaths',\n                             'Recovered', \n                             ], \n                 var_name='Ratio', \n                 value_name='Value')\n\nfig = px.line(line_data, x=\"ObservationDate\", y=\"Value\", color='Ratio', \n              title='Confirmed cases, Recovered cases, and Death Over Time')\nfig.show()","77c9cc42":"temp = china_df.groupby('ObservationDate')['Province\/State'].nunique().reset_index()\ntemp.columns = ['ObservationDate','CountOfState']","16e51920":"fig = px.bar(temp, x='ObservationDate', y='CountOfState')\nfig.update_layout(\n    title_text = 'Number Of Countries With Cases',\n    title_x = 0.5)\nfig.show()","30ae6ab2":"temp = china_df.groupby('ObservationDate').sum().reset_index()\n\ntemp = temp.melt(id_vars='ObservationDate', \n                 value_vars=['Confirmed', \n                             'Deaths', \n                             'Recovered'], \n                 var_name='Ratio', \n                 value_name='Value')\n\nfig = px.line(temp, x=\"ObservationDate\", y=\"Value\", color='Ratio', \n              title='Confirmed cases, Recovered cases, and Death Over Time In China')\nfig.show()","8ac36c06":"***Deaths and Recovered ratio in confirmed cases.***","31bc61c4":"## Table Of Contents:\n* Introduction\n* Concentrating and preparing dataframes\n* Exploring Current Status Worldwide\n* Exploring Current Status in China\n* Exploring Cases Over Time Worldwide\n* Exploring Cases Over Time in China\n* Comparing Hubei - China - Other Countries","44fc9be7":"***Spread of 'Corono Virus' over time***","6fd29adb":"***What are the top 10 countries with the highest number of cases?***","82da1e65":"***A closer look at the states with more cases.***","73e6655b":"# Exploring Current Status Worldwide","c735e779":"***Are there any country where the case of death is more than the case of recovery?***","f9ac8b8f":"***How many states affected by Corono Virus in China? And Which States?***","464c5c90":"## Concentrating  and preparing dataframes ","99b01fc0":"***Number of Countries with Cases***","bd6a04e0":"### Other Countries","44774bd9":"## Introduction","539d4388":"###  ***Comparison of States in China***","02240e9b":"***Total number of cases('Confirmed','Deaths','Recovered')***","5a5e36bb":"***What are the top 5 states with the highest number of cases?***","14382fb9":"***Total number of cases('Confirmed','Deaths','Recovered') in China***","2a7643c8":"***Deaths and Recovered ratio in confirmed cases.***","2a2001a9":"***A closer look at the countries with more cases.***\n\nLater, I will deal with China separately, for now, I will deal with countries other than China.","bb1a94ee":"### Full Countries","3069b7bc":"# Exploring Current Status in China","29a85c86":"***Are there any country where all patients are recovered or died?***","554636f9":"***Number of Countries with Cases***","872ffdaa":"### ***Comparison of Countries Except China***","eac595b2":"# Exploring Cases  Over Time in China","1e78720a":"***Are there any state where all patients are recovered or died?***","3f52c95d":"***How many countries affected by Corono Virus ? And Which Countries?***","e9635ccc":"# Exploring Cases  Over Time Worldwide","d4de5633":"***Are there any state in China where the case of death is more than the case of recovery?***","6533642f":"### China"}}