{"cell_type":{"d2c62e42":"code","76c21cc8":"code","3954cf3b":"code","2ce874dd":"code","337e01a3":"code","34866bc1":"code","e20b58d8":"code","b02a6c8d":"code","a43e0428":"code","6cc161b9":"code","d6d33a7c":"code","15929439":"code","e2bc2b96":"code","b26c2915":"code","bd456ae1":"code","e7885a97":"code","e8a272b9":"code","50ad4591":"code","158bbbf7":"code","2f873e4d":"code","09596331":"code","1401515b":"code","b3b7de83":"code","2bc4eddf":"code","ecfc6eb1":"code","ffb6e74a":"code","d2d13d6f":"code","b9042ed0":"code","26518ef2":"code","5b4b105d":"code","3852da75":"code","66dd4369":"code","a3fedb3c":"code","5aec8ec4":"code","df102dda":"code","2cd52a83":"code","ff20beef":"code","94e2fe00":"code","d8f09030":"code","8f69fbf8":"code","00bc2733":"markdown","fac596c5":"markdown","ae2c552c":"markdown","a72fba55":"markdown","720f37c0":"markdown"},"source":{"d2c62e42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","76c21cc8":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","3954cf3b":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","2ce874dd":"train.info()","337e01a3":"test.info()","34866bc1":"all = pd.concat([train, test], sort = False)\nall.info()","e20b58d8":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","b02a6c8d":"all.info()","a43e0428":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","6cc161b9":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","d6d33a7c":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","15929439":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","e2bc2b96":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","b26c2915":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","bd456ae1":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","e7885a97":"all.info()","e8a272b9":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","50ad4591":"all.info()","158bbbf7":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","2f873e4d":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","09596331":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","1401515b":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","b3b7de83":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","2bc4eddf":"from sklearn.ensemble import RandomForestClassifier","ecfc6eb1":"RF_Model = RandomForestClassifier()","ffb6e74a":"#from sklearn.model_selection import GridSearchCV","d2d13d6f":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","b9042ed0":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","26518ef2":"#RF_grid_model = RF_grid.fit(X_train, y_train)","5b4b105d":"#RF_grid_model.best_estimator_","3852da75":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","66dd4369":"RF_Model.fit(X_train, y_train)","a3fedb3c":"predictions = RF_Model.predict(X_test)\npredictions","5aec8ec4":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","df102dda":"all_test.head()","2cd52a83":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","ff20beef":"t_pred = RF_Model.predict(TestForPred).astype(int)","94e2fe00":"PassengerId = all_test['PassengerId']","d8f09030":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","8f69fbf8":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","00bc2733":"****Final Predictions","fac596c5":"****Extra Features:","ae2c552c":"### Build Random Forest","a72fba55":"****Check Accuracy","720f37c0":"****Train\/Test Split"}}