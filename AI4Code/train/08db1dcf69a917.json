{"cell_type":{"f914cb62":"code","e7680444":"code","24c5546d":"code","efd0b195":"code","1e59cdd2":"code","d8498c76":"code","9146dbc4":"code","b3c44dc6":"code","5b5d61a8":"code","b7e8217b":"code","ff4aa15f":"code","e62dc5c9":"code","0355c108":"code","855a4328":"code","905382b3":"code","9db039fb":"code","79a83dbb":"code","2b350c0e":"code","8890c912":"code","0ceb6e8e":"code","e66506f7":"code","12b160d7":"code","3998b1c0":"code","1828bbd1":"code","4d3d3aa9":"code","988fe608":"code","80aba687":"code","accbf982":"code","e24966cf":"code","bcdbf276":"code","cff67894":"markdown","774f53df":"markdown","0b9c599e":"markdown","78abd855":"markdown","e3050e34":"markdown","890bf564":"markdown","802c3bac":"markdown","bb5bf6eb":"markdown","2d083573":"markdown","2e37b461":"markdown"},"source":{"f914cb62":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e7680444":"fileNameTrain = '\/kaggle\/input\/titanic\/train.csv'\nfileNameTest  = '\/kaggle\/input\/titanic\/test.csv'\n\ndfTrain = pd.read_csv(fileNameTrain)\ndfTest  = pd.read_csv(fileNameTest)","24c5546d":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import auc\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nimport lightgbm as lgb\n\n\nfrom xgboost import XGBRegressor\nfrom xgboost import XGBClassifier\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport seaborn as sns; sns.set(style=\"ticks\", color_codes=True)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nprint(lgb.__version__)","efd0b195":"dfTrain.head()","1e59cdd2":"for df in [dfTrain,dfTest]:\n    lastName = [x.split(', ')[0] for x in df.Name] \n    title    = [x.split(', ')[1].split('. ')[0] for x in df.Name]\n    #replace some titles\n    title    = [x.replace('Mme', 'Mrs') for x in title]\n    title    = [x.replace('Ms', 'Miss') for x in title]\n    title    = [x.replace('Mlle', 'Miss') for x in title]\n    title    = [x.replace('the Countess', 'Lady') for x in title]\n    title    = [x.replace('Jonkheer', 'Sir') for x in title]\n    title    = [x.replace('Capt', 'Col') for x in title]\n    title    = [x.replace('Dona', 'Mrs') for x in title]\n    title    = [x.replace('Don', 'Mr') for x in title]\n    \n    title    = [x.replace('Dr', 'Col') for x in title]\n    title    = [x.replace('Major', 'Col') for x in title]\n    title    = [x.replace('Rev', 'Col') for x in title]\n    title    = [x.replace('Sir', 'Col') for x in title]\n\n    df['Lastname'] = lastName\n    df['Title']    = title\n    \nprint(dfTrain['Title'].unique())\nprint(dfTest['Title'].unique())","d8498c76":"for df in [dfTrain,dfTest]:\n    df['FamilySize'] = df['SibSp'] + df['Parch'] + 1\n    \nfor df in [dfTrain,dfTest]:    \n    df['IsAlone'] = 0\n    df.loc[df['FamilySize'] == 1, 'IsAlone'] = 1","9146dbc4":"for df in [dfTrain,dfTest]:\n    ticketClean = [x for x in df.Ticket]\n    ticketClean = [x.replace('W.\/C.', 'W\/C') for x in ticketClean]\n    ticketClean = [x.replace('STON\/O 2', 'STON\/O2') for x in ticketClean]\n    ticketClean = [x.replace('C.A.', 'CA') for x in ticketClean]\n    ticketClean = [x.replace('CA.', 'CA') for x in ticketClean]\n    ticketClean = [x.replace('A.', 'A') for x in ticketClean]\n    ticketClean = [x.replace('A\/', 'A') for x in ticketClean]\n    ticketClean = [x.replace('SOTON\/O.Q.', 'SOTON\/OQ') for x in ticketClean]\n    ticketClean = [x.replace('A4.', 'A4') for x in ticketClean]\n    ticketClean = [x.replace('A5.', 'A5') for x in ticketClean]\n    ticketClean = [x.replace('W.E.P.', 'WEP') for x in ticketClean]\n    ticketClean = [x.replace('WE\/P', 'WEP') for x in ticketClean]\n    ticketClean = [x.replace('A 2.', 'A2') for x in ticketClean]\n\n    df['TicketClean'] = ticketClean","b3c44dc6":"freq_port = dfTrain.Embarked.dropna().mode()[0]\ndfTrain['Embarked'] = dfTrain['Embarked'].fillna(freq_port)\ndfTest['Embarked']  = dfTest['Embarked'].fillna(freq_port)","5b5d61a8":"label_encoder = LabelEncoder()\nfor col in sorted(['Sex','Ticket','Lastname','Title','TicketClean','Embarked']):\n    label_encoder.fit(dfTrain[col].append(dfTest[col]))\n    dfTrain[col] = label_encoder.transform(dfTrain[col])\n    dfTest[col] = label_encoder.transform(dfTest[col])\n    print(col,' - done')\n\n# Manuel version    \n#for dataset in [dfTrain, dfTest]:\n#    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)","b7e8217b":"dfTrain['XLastname'] = dfTrain['Lastname'].to_numpy() -430\ndfTest['XLastname'] = dfTest['Lastname'].to_numpy() -430\n\ndfTrain['XPclass'] = dfTrain['Pclass'].to_numpy() -2\ndfTest['XPclass'] = dfTest['Pclass'].to_numpy() -2","ff4aa15f":"cols = dfTrain.columns.to_list()\ncols.remove('Survived')\ndfCombined = dfTrain[cols].append(dfTest[cols])\n\ndf=dfCombined\nprint('Train data: ',dfTrain.shape[0])\nprint('Test  data: ',dfTest.shape[0])\nprint('all   data: ',dfCombined.shape[0])\ndfCombinedAgeMissing = dfCombined[dfCombined.Age.isna()]\ndfCombinedAgeIn      = dfCombined[dfCombined.Age > 0]\nprint('all   data - age NOT missing:    ',dfCombinedAgeIn.shape[0])\nprint('all   data - age missing:        ',dfCombinedAgeMissing.shape[0])","e62dc5c9":"pd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_rows\", 40)\ndfCombined","0355c108":"allColls = dfTrain.columns.to_list()\nprint(allColls)\nfeature_names = allColls\nfeature_names.remove('Survived')\nfeature_names.remove('Fare')\nfeature_names.remove('Cabin')\n#feature_names.remove('Embarked')\nfeature_names.remove('Name')\nfeature_names.remove('Age')\n\nXage = dfCombinedAgeIn[feature_names]\nyage = dfCombinedAgeIn['Age']\n\ntrain_Xage, valid_Xage, train_yage, valid_yage = train_test_split(Xage, yage, random_state = 1)\nprint('SampleSize of Age training set: ',Xage.shape[0],train_Xage.shape[0],valid_Xage.shape[0],train_Xage.shape[0]\/Xage.shape[0])\n#train_Xage.head()\n\ntest_Xage = dfCombinedAgeMissing[feature_names]\ntest_Xage.head()","855a4328":"nbrOfNodes = []\nerrors     = []\nfor k in range(3,50,1):\n    treeModel = DecisionTreeRegressor(max_leaf_nodes=k, random_state=0)\n    treeModel.fit(train_Xage, train_yage)\n    preds_val = treeModel.predict(valid_Xage)\n    mae = mean_absolute_error(valid_yage, preds_val)\n    nbrOfNodes.append(k)\n    errors.append(mae)\n\nplt.plot(nbrOfNodes,errors)","905382b3":"nbrOfNodes = []\nerrors     = []\nfor k in range(25,400,225):\n    print(k,end=' ')\n    forestModel = RandomForestRegressor(n_estimators=k, \n                                        random_state=0, \n                                        criterion='mae', \n                                        min_samples_split=5,\n                                        max_depth=10\n                                        )\n    forestModel.fit(train_Xage, train_yage)\n    preds_val = forestModel.predict(valid_Xage)\n    mae = mean_absolute_error(valid_yage, preds_val)\n    nbrOfNodes.append(k)\n    errors.append(mae)\n\nplt.plot(nbrOfNodes,errors)","9db039fb":"xgboostModel = XGBRegressor(objective ='reg:squarederror',\n                        n_estimators=400,\n                        learning_rate=0.15,\n                        n_jobs=4)\n\nxgboostModel.fit(train_Xage, train_yage, \n             early_stopping_rounds=15, \n             eval_set=[(valid_Xage, valid_yage)],\n             verbose=False)\n\npreds_val = xgboostModel.predict(valid_Xage)\nmae = mean_absolute_error(valid_yage, preds_val)\nprint(mae)","79a83dbb":"forestModel = RandomForestRegressor(n_estimators=200, \n                                        random_state=0, \n                                        criterion='mae', \n                                        min_samples_split=5,\n                                        max_depth=10\n                                        )\n\nforestModel.fit(train_Xage, train_yage)\npredictesAges = forestModel.predict(test_Xage)\n#dfCombinedAgeMissing['estAge']=predictesAges","2b350c0e":"passId = test_Xage['PassengerId'].to_numpy()\npredAges = predictesAges\ndictPassId_predAges = {}\nfor k in range(len(passId)):\n    dictPassId_predAges[passId[k]]=predAges[k]\n#dictPassId_predAges","8890c912":"allColls = dfTrain.columns.to_list()\nprint(allColls)\nfeature_names2 = allColls\nfeature_names2.remove('Survived')\nfeature_names2.remove('Cabin')\nfeature_names2.remove('Name')\n#feature_names2.remove('Embarked')\n#feature_names2.remove('Fare')\n\ndfTrain2 = dfTrain[feature_names2].copy()\ndfTrain2['estAge'] = 'NA'\n\ndfTest2 = dfTest[feature_names2].copy()\ndfTest2['estAge'] = 'NA'","0ceb6e8e":"for k in range(1,dfTrain2.shape[0]+1,1):\n    dfTrain2.at[k-1,'estAge'] = dictPassId_predAges.get(k,dfTrain2.iloc[k-1]['Age'])\n\nfor k in range(1,dfTest2.shape[0]+1,1):\n    j = dfTest2.loc[k-1].PassengerId\n    dfTest2.loc[k-1,'estAge'] = dictPassId_predAges.get(j,dfTest2.iloc[k-1]['Age'])","e66506f7":"bandSize = 16\ndfTrain2['estAgeBand'] = (dfTrain2['estAge']\/bandSize).astype('int') -3\ndfTest2['estAgeBand'] = (dfTest2['estAge']\/bandSize).astype('int') -3\n\nset(dfTrain2['estAgeBand'])","12b160d7":"bandSize = 16\nfreq_Fare = dfTrain.Fare.dropna().mode()[0]\ndfTrain2['Fare'] = dfTrain2['Fare'].fillna(freq_Fare)\n\ndfTest2['Fare']  = dfTest2['Fare'].fillna(freq_Fare)\n\ndfTrain2['FareBand'] = (dfTrain2['Fare']\/bandSize).astype('int') \ndfTest2['FareBand'] = (dfTest2['Fare']\/bandSize).astype('int') \n\nthresh = 4\ndfTrain2['FareBand'] = [x if x < thresh else thresh for x in dfTrain2['FareBand'].to_numpy()] \ndfTest2['FareBand'] = [x if x < thresh else thresh for x in dfTest2['FareBand'].to_numpy()] \n\nset(dfTrain2['FareBand'])","3998b1c0":"dfTrain2['ChildP12']=((dfTrain2['estAge']<16) & (dfTrain2['Pclass']<3)).map( {True: 1, False: 0} ).astype(int)\ndfTest2['ChildP12'] =((dfTest2['estAge']<16)  & (dfTest2['Pclass']<3)).map( {True: 1, False: 0} ).astype(int)","1828bbd1":"pd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_rows\", 40)\ndfTrain2\n#dfTest2","4d3d3aa9":"feature_names3=['PassengerId','XPclass','Sex','SibSp','Parch','Ticket','TicketClean','XLastname','Title','estAge','estAgeBand','Embarked','FamilySize','IsAlone','FareBand','ChildP12']\nfeature_names3=['IsAlone','Sex','XPclass','FareBand','estAgeBand','XLastname','ChildP12']\n#feature_names3=['Sex','FareBand','IsAlone','ChildP12','estAgeBand','Title']\n\ndfTrain2['estAge'] = pd.to_numeric(dfTrain2['estAge'])\ndfTest2['estAge'] = pd.to_numeric(dfTest2['estAge'])\n\nX = dfTrain2[feature_names3]\ny = dfTrain['Survived']\n\ntrain_X, valid_X, train_y, valid_y = train_test_split(X, y, random_state = 1)\nprint('SampleSize of Age training set: ',X.shape[0],train_X.shape[0],valid_X.shape[0],train_X.shape[0]\/X.shape[0])\n\nXTest = dfTest2[feature_names3]","988fe608":"colormap = plt.cm.RdBu\nplt.figure(figsize=(14,12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(dfTrain2.astype(float).corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)","80aba687":"X = valid_X\ny = valid_y\n\n# Logistic Regression\nlogreg = LogisticRegression(solver='lbfgs',max_iter=10000)\nlogreg.fit(train_X, train_y)\npreds_val = logreg.predict(valid_X)\ncm_log = confusion_matrix(valid_y, preds_val).ravel()\ntn, fp, fn, tp = cm_log\nhit_log=(tp+tn)\/(tn+fp+fn+tp)\nacc_log = round(logreg.score(X, y) * 100, 2)\n\n# Support Vector Machines\n#svc = SVC(gamma='auto')\nsvc = SVC(gamma='scale',probability=True)\nsvc.fit(train_X, train_y)\npreds_val = svc.predict(valid_X)\ncm_svc = confusion_matrix(valid_y, preds_val).ravel()\ntn, fp, fn, tp = cm_svc\nhit_svc = (tp+tn)\/(tn+fp+fn+tp)\nacc_svc = round(svc.score(X, y) * 100, 2)\n\n# K nearest neighbours\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(train_X, train_y)\npreds_val = knn.predict(valid_X)\ncm_knn = confusion_matrix(valid_y, preds_val).ravel()\ntn, fp, fn, tp = cm_knn\nhit_knn = (tp+tn)\/(tn+fp+fn+tp)\nacc_knn = round(knn.score(X, y) * 100, 2)\n\n# Gaussian Naive Bayes\ngaussian = GaussianNB()\ngaussian.fit(train_X, train_y)\npreds_val = gaussian.predict(valid_X)\ncm_gaussian =  confusion_matrix(valid_y, preds_val).ravel()\ntn, fp, fn, tp = cm_gaussian\nhit_gaussian = (tp+tn)\/(tn+fp+fn+tp)\nacc_gaussian = round(gaussian.score(X, y) * 100, 2)\n\n# Perceptron\nperceptron = Perceptron(max_iter=1000,tol=1e-4)\nperceptron.fit(train_X, train_y)\npreds_val = perceptron.predict(valid_X)\ncm_perceptron = confusion_matrix(valid_y, preds_val).ravel()\ntn, fp, fn, tp = cm_perceptron\nhit_perceptron = (tp+tn)\/(tn+fp+fn+tp)\nacc_perceptron = round(perceptron.score(X, y) * 100, 2)\n\n# Stochastic Gradient Descent\nsgd = SGDClassifier(max_iter=10000,\n                    tol=1e-4,\n                    random_state=10)\nsgd.fit(train_X, train_y)\npreds_val = sgd.predict(valid_X)\ncm_sgd = confusion_matrix(valid_y, preds_val).ravel()\ntn, fp, fn, tp = cm_sgd\nhit_sgd = (tp+tn)\/(tn+fp+fn+tp)\nacc_sgd = round(sgd.score(X, y) * 100, 2)\n\n# Linear SVC\nlinear_svc = LinearSVC(max_iter=100000,dual=False)\nlinear_svc.fit(train_X, train_y)\npreds_val = linear_svc.predict(valid_X)\ncm_linear_svc = confusion_matrix(valid_y, preds_val).ravel()\ntn, fp, fn, tp = cm_linear_svc\nhit_linear_svc = (tp+tn)\/(tn+fp+fn+tp)\nacc_linear_svc = round(linear_svc.score(X, y) * 100, 2)\n\n# Decision Tree\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(train_X, train_y)\npreds_val = decision_tree.predict(valid_X)\ncm_decision_tree = confusion_matrix(valid_y, preds_val).ravel()\ntn, fp, fn, tp = cm_decision_tree\nhit_decision_tree = (tp+tn)\/(tn+fp+fn+tp)\nacc_decision_tree = round(decision_tree.score(X, y) * 100, 2)\n\n# Random Forest\nrandom_forest = RandomForestClassifier(n_estimators=1100, \n                                       #criterion='entropy',\n                                       #max_features='sqrt'\n                                       criterion='gini',\n                                       max_features='auto',\n                                       oob_score=True,\n                                       random_state=0,\n                                       min_samples_split=5,\n                                       min_samples_leaf=5,\n                                       max_depth=6,\n                                       n_jobs=-1\n                                      )\n\nrandom_forest.fit(train_X, train_y)\npreds_val = random_forest.predict(valid_X)\ncm_random_forest = confusion_matrix(valid_y, preds_val).ravel()\ntn, fp, fn, tp = cm_random_forest\nhit_random_forest = (tp+tn)\/(tn+fp+fn+tp)\nrandom_forest.score(X, y)\nacc_random_forest = round(random_forest.score(X, y) * 100, 2)\n\n# ADAboost\nadaBoost = AdaBoostClassifier(n_estimators=300, \n                                random_state=0,\n                                learning_rate=0.1\n                              )\nadaBoost.fit(train_X, train_y)\npreds_val = adaBoost.predict(valid_X)\ncm_ada = confusion_matrix(valid_y, preds_val).ravel()\ntn, fp, fn, tp = cm_ada\nhit_ada = (tp+tn)\/(tn+fp+fn+tp)\nadaBoost.score(X, y)\nacc_ada = round(adaBoost.score(X, y) * 100, 2)\n\n# ExtraTrees\nextraTrees = ExtraTreesClassifier(n_jobs=-1,\n                                n_estimators=500,\n                                #max_features=0.5,\n                                max_depth=8,\n                                min_samples_leaf=2)\nextraTrees.fit(train_X, train_y)\npreds_val = extraTrees.predict(valid_X)\ncm_et = confusion_matrix(valid_y, preds_val).ravel()\ntn, fp, fn, tp = cm_et\nhit_et = (tp+tn)\/(tn+fp+fn+tp)\nextraTrees.score(X, y)\nacc_et = round(extraTrees.score(X, y) * 100, 2)\n\n# GradientBoosting\ngb = GradientBoostingClassifier(n_estimators= 150,\n                             max_depth= 5,\n                             learning_rate=0.05,\n                             min_samples_leaf= 2)\ngb.fit(train_X, train_y)\npreds_val = gb.predict(valid_X)\ncm_gb = confusion_matrix(valid_y, preds_val).ravel()\ntn, fp, fn, tp = cm_gb\nhit_gb = (tp+tn)\/(tn+fp+fn+tp)\ngb.score(X, y)\nacc_gb = round(gb.score(X, y) * 100, 2)\n\n# XGBoost\nxgboostModel = XGBClassifier(learning_rate = 0.03,\n                             n_estimators= 2000,\n                             max_depth= 5,\n                             min_child_weight= 2,\n                             #gamma=1,\n                             gamma=0.9,                        \n                             subsample=0.8,\n                             colsample_bytree=0.8,\n                             #objective= 'binary:logistic',\n                             #objective ='reg:squarederror',\n                             nthread= -1,\n                             scale_pos_weight=1)\nxgboostModel.fit(train_X, train_y)\npreds_val = xgboostModel.predict(valid_X)\ncm_xgb = confusion_matrix(valid_y, preds_val).ravel()\ntn, fp, fn, tp = cm_xgb\nhit_xgb = (tp+tn)\/(tn+fp+fn+tp)\nxgboostModel.score(X, y)\nacc_xgb = round(xgboostModel.score(X, y) * 100, 2)\n\n# lightgbm\ngbm = lgb.LGBMClassifier(boosting_type='gbdt',\n                        objective='binary',\n                        num_leaves=31,\n                        learning_rate=0.05,\n                        #num_boost_round=100000,\n                        n_estimators=200,\n                        silent=-1,\n                        verbose=-1)\ngbm.fit(train_X, train_y,\n        eval_set=[(valid_X, valid_y)],\n        eval_metric='l1',\n        early_stopping_rounds=5,\n        verbose=100)\npreds_val = gbm.predict(valid_X)\ncm_gbm = confusion_matrix(valid_y, preds_val).ravel()\ntn, fp, fn, tp = cm_gbm\nhit_gbm = (tp+tn)\/(tn+fp+fn+tp)\ngbm.score(X, y)\nacc_gbm = round(gbm.score(X, y) * 100, 2)","accbf982":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC','Decision Tree',\n              'XGBoost','lightgbm','AdaBoost','extraTrees','GradientBoost'],\n    'Score': [acc_svc, acc_knn, acc_log, acc_random_forest, acc_gaussian, \n              acc_perceptron, acc_sgd, acc_linear_svc, acc_decision_tree, \n              acc_xgb, acc_gbm, acc_ada, acc_et, acc_gb],\n    'hitScore': [cm_svc, cm_knn, cm_log, cm_random_forest, cm_gaussian, \n                 cm_perceptron, cm_sgd, cm_linear_svc, cm_decision_tree,\n                 cm_xgb, cm_gbm, cm_ada, cm_et, cm_gb]})\npd.set_option(\"display.max_rows\", None)\nmodels.sort_values(by='Score', ascending=False)","e24966cf":"print(train_X.columns.values)\nprint(decision_tree.feature_importances_)\nprint(extraTrees.feature_importances_)\nprint(random_forest.feature_importances_)\nprint(xgboostModel.feature_importances_)\nprint(gb.feature_importances_)\nprint(gbm.feature_importances_\/sum(gbm.feature_importances_))\nprint(adaBoost.feature_importances_)","bcdbf276":"#estimate = np.around(gbm.predict(XTest)).astype(int)\nestimate = np.around(logreg.predict(XTest)).astype(int)\ndf=pd.DataFrame(dfTest['PassengerId'])\ndf.insert(1,'Survived',estimate)\ndf.to_csv('submission.csv', index=False)","cff67894":"### Add age band","774f53df":"### Calculating missing Ages","0b9c599e":"### Model testing for missing Ages","78abd855":"### Add child in class 1 or 2","e3050e34":"### Extract Familisize and add to table","890bf564":"### Add fare bands","802c3bac":"### Extract Lastname and Title for Name and add to table","bb5bf6eb":"### Encode relevant non-numerical columns","2d083573":"### Clean ticket ID","2e37b461":"### Lets have a first look at the data"}}