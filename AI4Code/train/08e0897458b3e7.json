{"cell_type":{"50d2275e":"code","b3ddfd0c":"code","485635cf":"code","41b43bae":"code","17687d75":"code","432a4eec":"code","d38972f9":"code","2e93c7f5":"code","1edadd81":"code","c0fb4350":"code","bcbce3d7":"code","4480a180":"code","666e16b7":"code","4884d4d5":"markdown","24fc29ab":"markdown","98180276":"markdown","451d0e99":"markdown","0d76da93":"markdown","66ad4a87":"markdown"},"source":{"50d2275e":"import numpy as np \nimport pandas as pd \nimport pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nimport cv2\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport os\nimport albumentations as A\nimport mlcrate as mlc\nimport shutil\nimport json","b3ddfd0c":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nusername = user_secrets.get_secret(\"KAGGLE_USERNAME\")\nos.environ['KAGGLE_USERNAME'] = username\nos.environ['KAGGLE_KEY'] = user_secrets.get_secret(\"KAGGLE_KEY\")","485635cf":"## Function modified from https:\/\/www.kaggle.com\/lucamtb\/brain-tumor-very-basice-inference\ndef read_xray(path, voi_lut = True, fix_monochrome = True, normalize=False):\n    dicom = pydicom.read_file(path)\n    \n    # VOI LUT (if available by DICOM device) is used to transform raw DICOM data to \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n               \n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n    \n    if normalize:\n        data = data - np.min(data)\n        data = data \/ np.max(data)\n        #data = (data * 255).astype(np.uint8)\n    else:\n        data = (data \/ 256).astype(np.uint8)\n        \n    return data","41b43bae":"def resize_function(image_size, original_dir=None, new_dir=None):\n    shape = (image_size, image_size)\n    transform = A.Compose([A.LongestMaxSize(image_size) ,A.PadIfNeeded(*shape, border_mode=0)])\n    def resized(path):\n        image = read_xray(path)\n        image = transform(image=image)['image']\n        new_path = str(path).replace('.dcm', '.npy')\n        if original_dir is not None and new_dir is not None:\n            new_path = new_path.replace(original_dir, new_dir)\n        new_path = Path(new_path)\n        new_path.parent.mkdir(exist_ok=True, parents=True)\n        np.save(new_path, image)\n    return resized","17687d75":"IM_SIZE = 256\nDATA_DIR = Path('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification')","432a4eec":"SAVE_DIR = f'\/kaggle\/tmp\/resized-{IM_SIZE}'\nos.environ['SAVE_DIR'] = SAVE_DIR\nos.makedirs(SAVE_DIR, exist_ok=True)","d38972f9":"!kaggle datasets init -p $SAVE_DIR","2e93c7f5":"with open(f'{SAVE_DIR}\/dataset-metadata.json') as f:\n    data = json.load(f)\n    \ndataset_title = f\"miccai-brain-{IM_SIZE}\"\ndata['title'] = dataset_title\ndata['id'] = f\"{username}\/{dataset_title}\"\n\nwith open(f'{SAVE_DIR}\/dataset-metadata.json', 'w') as json_file:\n    json.dump(data, json_file)","1edadd81":"for path in DATA_DIR.glob('*.csv'):\n    new_path = str(path).replace(str(DATA_DIR), str(SAVE_DIR))\n    shutil.copy(path, new_path)","c0fb4350":"resizing_func = resize_function(IM_SIZE, str(DATA_DIR), str(SAVE_DIR))","bcbce3d7":"paths = list((DATA_DIR).rglob('*.dcm'))","4480a180":"pool = mlc.SuperPool()\nresults = pool.map(resizing_func, paths)","666e16b7":"! kaggle datasets create -p $SAVE_DIR -u --dir-mode tar\n#! kaggle datasets version -p $SAVE_DIR -m \"Full Sample\" --dir-mode tar","4884d4d5":"## Initialize Dataset and add Metadata","24fc29ab":"## Add Kaggle Secrets to Notebook","98180276":"## Create or Update Dataset","451d0e99":"## How to make a Dataset with over 20GB\n- https:\/\/www.kaggle.com\/ksmcg90\/miccai-brain-256","0d76da93":"## Read Xray and Resize Functions","66ad4a87":"## Copy the csv files in case you want to use the dataset in Google Colab\n- kaggle datasets download -d ksmcg90\/miccai-brain-256"}}