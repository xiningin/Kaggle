{"cell_type":{"81ef02de":"code","27dd5457":"code","097b0ee2":"code","5cf20a6f":"code","a36cc69a":"code","f5586aea":"code","4a029054":"code","fe33146c":"code","49508efc":"code","6736759c":"code","80d0a1c4":"code","b041e92f":"code","a619f738":"code","3101368a":"code","1149418d":"code","39cb3cfa":"code","c02ca0b3":"code","986f244d":"code","acf4708b":"code","a0687be2":"code","4040fbfc":"code","80515eed":"code","ff816c2c":"code","414888c0":"code","01a59f01":"code","9466a6ca":"code","4157909b":"code","637fd071":"code","96698245":"code","6cd351d8":"code","dab7d0e2":"code","4a25f61b":"code","54885377":"markdown","e6d83599":"markdown","821e7502":"markdown","f9d7f845":"markdown","c071e31a":"markdown","17a6283d":"markdown","18c93637":"markdown","83b894ce":"markdown","a05058ed":"markdown","360c5bf1":"markdown"},"source":{"81ef02de":"# Fastai 2 works on Pytorch 1.6\n# Since kaggle still uses PyTorch 1.5.x we need to manually upgrade to 1.6\n!pip install torch==1.6.0+cu101 torchvision==0.7.0+cu101 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html","27dd5457":"import torch\ntorch.__version__","097b0ee2":"!pip install fastai==2.0.13","5cf20a6f":"import fastai\ntorch.__version__, fastai.__version__","a36cc69a":"import fastai\nfrom fastai.text.all import *","f5586aea":"path = Path('..\/input\/nlp-getting-started')\npath.ls()","4a029054":"train_df = pd.read_csv(path\/'train.csv')\ntrain_df.head(5)","fe33146c":"test_df = pd.read_csv(path\/'test.csv')\ntest_df.head(5)","49508efc":"import seaborn as sns\nplt.figure(figsize = (14,6))\nplt.title(\"Classes histogram\")\nsns.distplot(a=train_df['target'], kde=False)\nplt.xlabel(\"Class\")\nplt.xlabel(\"Frequency\")","6736759c":"#we can use both the train and test data to train lamguage model\nop = pd.concat([train_df['text'], test_df['text']])\nop = pd.DataFrame(op)\n# op.head()\nlen(op), len(train_df)+len(test_df)","80d0a1c4":"dls_lm = TextDataLoaders.from_df(op, path=path, text_col='text', is_lm=True, valid_col=None)\ndls_lm.show_batch(max_n=3)","b041e92f":"learn = language_model_learner(dls_lm, AWD_LSTM, metrics=[accuracy, Perplexity()], path='\/kaggle\/working\/', wd=0.1).to_fp16()","a619f738":"torch.cuda.is_available()","3101368a":"learn.fit_one_cycle(1, 1e-2)","1149418d":"learn.save('1epoch')","39cb3cfa":"learn = learn.load('1epoch')","c02ca0b3":"learn.unfreeze()\nlearn.fit_one_cycle(10, 1e-3)","986f244d":"learn.save_encoder('finetuned')","acf4708b":"!cp ..\/input\/nlp-getting-started\/train.csv \/kaggle\/working","a0687be2":"dls = TextDataLoaders.from_csv(path='\/kaggle\/working\/', csv_fname='train.csv', text_col='text', label_col='target', bs = 8, text_vocab=dls_lm.vocab)\ndls.show_batch(max_n=8)","4040fbfc":"learn = text_classifier_learner(dls, AWD_LSTM, drop_mult=0.5, metrics = accuracy).to_fp16()","80515eed":"learn = learn.load_encoder('finetuned')","ff816c2c":"learn.fit_one_cycle(4, 2e-2)","414888c0":"learn.freeze_to(-2)\nlearn.fit_one_cycle(4, slice(1e-2\/(2.6**4),1e-2))","01a59f01":"# learn.freeze_to(-3)\n# learn.fit_one_cycle(4, slice(5e-3\/(2.6**4),5e-3))","9466a6ca":"# learn.unfreeze()\n# learn.fit_one_cycle(4, slice(1e-3\/(2.6**4),1e-3))","4157909b":"test_df.head(5)","637fd071":"test_df.iloc[:10,3]# row first, column second","96698245":"id_ , target_  = [], [] \nfor i, text in zip(test_df.iloc[:,0], test_df.iloc[:,3]):\n    id_.append(i)\n    target_.append(int(learn.predict(text)[0]))\nid_, target_","6cd351d8":"submission = pd.DataFrame(list(zip(id_, target_)), \n               columns =['id', 'target']) ","dab7d0e2":"submission.head()","4a25f61b":"submission.to_csv('\/kaggle\/working\/submission.csv', index = False)","54885377":"language model loading fails with datablock","e6d83599":"# Training Language Model","821e7502":"# Installation: Fastai 2.0.13 + torch 1.6","f9d7f845":"`learn.save` does not give us option to explicity choose the folderpath to save our model.\nIt automatically creates the `models` directory inside the path where our input data(train.csv) resides. But, kaggle input directory is read-only. So, I copy-paste input data into the working directory.","c071e31a":"lr_find issue unresolved","17a6283d":"`lm = DataBlock(blocks=TextBlock.from_df('text', is_lm=True),\n                    get_x=ColReader('text'),\n                    splitter=RandomSplitter(valid_pct = 0.2))\ndls = lm.dataloaders(op, bs=64, seq_len=72)\ndls.show_batch(max_n=6)`","18c93637":"# Creating submission","83b894ce":"# Inference:\n### Training the text classifier got me an accuracy of 76%. But when I added a pretrained language model and fine-tuned it with competition data(ULMFIT technique), I could achieve an accuracy of 81%","a05058ed":"# Data Processing","360c5bf1":"# Training Classifier"}}