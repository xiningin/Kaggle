{"cell_type":{"49e70a8e":"code","f12f357b":"markdown"},"source":{"49e70a8e":"#from scrappy import Selector\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport numpy as np\nimport re\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nfrom matplotlib.ticker import FormatStrFormatter\nfrom matplotlib import colors\n\nl1=requests.get(\"https:\/\/www.imdb.com\/search\/title\/?title_type=feature&num_votes=25000,&genres=action&sort=num_votes,desc\")\nc1=l1.content\nsoup=BeautifulSoup(c1,\"html.parser\")\nl2=requests.get(\"https:\/\/www.imdb.com\/search\/title\/?title_type=feature&num_votes=25000,&genres=drama&sort=num_votes,desc\")\nc2=l2.content\nsoup2=BeautifulSoup(c2,\"html.parser\")\nl3=requests.get(\"https:\/\/www.imdb.com\/search\/title\/?title_type=feature&num_votes=25000,&genres=romance&sort=num_votes,desc\")\nc3=l3.content\nsoup3=BeautifulSoup(c3,\"html.parser\")\nl4=requests.get(\"https:\/\/www.imdb.com\/search\/title\/?title_type=feature&num_votes=25000,&genres=sci-fi&sort=num_votes,desc\")\nc4=l4.content\nsoup4=BeautifulSoup(c4,\"html.parser\")\nl5=requests.get(\"https:\/\/www.imdb.com\/search\/title\/?title_type=feature&num_votes=25000,&genres=comedy&sort=num_votes,desc\")\nc5=l5.content\nsoup5=BeautifulSoup(c5,\"html.parser\")\nl6=requests.get(\"https:\/\/www.imdb.com\/search\/title\/?title_type=feature&num_votes=25000,&genres=animation&sort=num_votes,desc\")\nc6=l6.content\nsoup6=BeautifulSoup(c6,\"html.parser\")\n\n\nmovies=[]\n#Scraping for movie names\nfor h3 in soup.findAll('h3', attrs={'class':'lister-item-header'}):\n    #print (\"\\n\")\n    for a in h3.findAll('a'):\n            movies.append(a.text)\n            \n#print(movies)\n#CREATING DF with Movie Details\nmovielist=pd.DataFrame(movies,columns=[\"MovieTitle\"])\n#print(movielist)\nAct=[\"Action\"]*50\n#print(Action)\nmovielist[\"Genre\"]=pd.Series(Act)\n#print(movielist)\n\n#SCRAPING movie ratings\nrate=[]\nfor div in soup.findAll('div', attrs={'class':'inline-block ratings-imdb-rating'}):\n    #print (\"\\n\")\n    for r in div.findAll('strong'):\n            rate.append(r.text)\n#print(len(rate))\n\nmovielist[\"Rating\"]=pd.Series(rate)\n#print(movielist)\n\n#SCRAPING Number of Votes\nVote=[]\nfor p in soup.findAll('span', attrs={'name':'nv'}):\n    #print (\"\\n\")\n    Vote.append(p.text)\n    \n    \n#SCRAPING to add VoterCount and Gross\nVotes=[]\nfor i in range(0,100,2):\n    V=Vote[i]\n    Votes.append(V)\n#print(Votes)\nGr=[]\nfor j in range(1,100,2):\n    G=Vote[j]\n    Gr.append(G)\n#print(Gr)\n#print(len(Votes))\n#print(len(Gr))\nmovielist[\"Votercount\"]=pd.Series(Votes)\nmovielist[\"Gross\"]=pd.Series(Gr)\n#print(movielist)\n\n\n#DRAMA MOVIES\n\nmovies2=[]\n#Scraping for movie names\nfor h3 in soup2.findAll('h3', attrs={'class':'lister-item-header'}):\n    #print (\"\\n\")\n    for a in h3.findAll('a'):\n            movies2.append(a.text)\n            \n#print(movies)\n#CREATING DF with Movie Details\nmovielist2=pd.DataFrame(movies2,columns=[\"MovieTitle\"])\n#print(movielist)\nDr=[\"Drama\"]*50\n#print(Action)\nmovielist2[\"Genre\"]=pd.Series(Dr)\n#print(movielist)\n\n#SCRAPING movie ratings\nrate2=[]\nfor div in soup2.findAll('div', attrs={'class':'inline-block ratings-imdb-rating'}):\n    #print (\"\\n\")\n    for r in div.findAll('strong'):\n            rate2.append(r.text)\n#print(len(rate))\n\nmovielist2[\"Rating\"]=pd.Series(rate2)\n#print(movielist)\n\n#SCRAPING Number of Votes\nVote2=[]\nfor p in soup2.findAll('span', attrs={'name':'nv'}):\n    #print (\"\\n\")\n    Vote2.append(p.text)\n    \n    \n#SCRAPING to add VoterCount and Gross\nVotes2=[]\nfor i in range(0,100,2):\n    V=Vote2[i]\n    Votes2.append(V)\n#print(Votes)\nGr2=[]\nfor j in range(1,100,2):\n    G2=Vote[j]\n    Gr2.append(G2)\n#print(Gr)\n#print(len(Votes))\n#print(len(Gr))\nmovielist2[\"Votercount\"]=pd.Series(Votes2)\nmovielist2[\"Gross\"]=pd.Series(Gr2)\n#print(movielist2)\nmovielist=movielist.append(movielist2,ignore_index=True)\n#print(movielist)\n\n#ROMANCE MOVIES\nmovies3=[]\n#Scraping for movie names\nfor h3 in soup3.findAll('h3', attrs={'class':'lister-item-header'}):\n    #print (\"\\n\")\n    for a in h3.findAll('a'):\n            movies3.append(a.text)\n            \n#print(movies)\n#CREATING DF with Movie Details\nmovielist3=pd.DataFrame(movies3,columns=[\"MovieTitle\"])\n#print(movielist)\nRom=[\"Romance\"]*50\n#print(Action)\nmovielist3[\"Genre\"]=pd.Series(Rom)\n#print(movielist)\n\n#SCRAPING movie ratings\nrate3=[]\nfor div in soup3.findAll('div', attrs={'class':'inline-block ratings-imdb-rating'}):\n    #print (\"\\n\")\n    for r in div.findAll('strong'):\n            rate3.append(r.text)\n#print(len(rate))\n\nmovielist3[\"Rating\"]=pd.Series(rate3)\n#print(movielist)\n\n#SCRAPING Number of Votes\nVote3=[]\nfor p in soup3.findAll('span', attrs={'name':'nv'}):\n    #print (\"\\n\")\n    Vote3.append(p.text)\n    \n    \n#SCRAPING to add VoterCount and Gross\nVotes3=[]\nfor i in range(0,100,2):\n    V=Vote3[i]\n    Votes3.append(V)\n#print(Votes)\nGr3=[]\nfor j in range(1,100,2):\n    G3=Vote[j]\n    Gr3.append(G3)\n#print(Gr)\n#print(len(Votes))\n#print(len(Gr))\nmovielist3[\"Votercount\"]=pd.Series(Votes3)\nmovielist3[\"Gross\"]=pd.Series(Gr3)\n#print(movielist2)\nmovielist=movielist.append(movielist3,ignore_index=True)\n\n\n#SCI-FI MOVIE list\n\nmovies4=[]\n#Scraping for movie names\nfor h3 in soup4.findAll('h3', attrs={'class':'lister-item-header'}):\n    #print (\"\\n\")\n    for a in h3.findAll('a'):\n            movies4.append(a.text)\n            \n#print(movies)\n#CREATING DF with Movie Details\nmovielist4=pd.DataFrame(movies4,columns=[\"MovieTitle\"])\n#print(movielist)\nScifi=[\"Sci-Fi\"]*50\n#print(Action)\nmovielist4[\"Genre\"]=pd.Series(Scifi)\n#print(movielist)\n\n#SCRAPING movie ratings\nrate4=[]\nfor div in soup4.findAll('div', attrs={'class':'inline-block ratings-imdb-rating'}):\n    #print (\"\\n\")\n    for r in div.findAll('strong'):\n            rate4.append(r.text)\n#print(len(rate))\n\nmovielist4[\"Rating\"]=pd.Series(rate4)\n#print(movielist)\n\n#SCRAPING Number of Votes\nVote4=[]\nfor p in soup4.findAll('span', attrs={'name':'nv'}):\n    #print (\"\\n\")\n    Vote4.append(p.text)\n    \n    \n#SCRAPING to add VoterCount and Gross\nVotes4=[]\nfor i in range(0,100,2):\n    V=Vote4[i]\n    Votes4.append(V)\n#print(Votes)\nGr4=[]\nfor j in range(1,100,2):\n    G4=Vote[j]\n    Gr4.append(G4)\n#print(Gr)\n#print(len(Votes))\n#print(len(Gr))\nmovielist4[\"Votercount\"]=pd.Series(Votes4)\nmovielist4[\"Gross\"]=pd.Series(Gr4)\n#print(movielist2)\nmovielist=movielist.append(movielist4,ignore_index=True)\n\n\n#COMEDY MOVIES list\n\n\nmovies5=[]\n#Scraping for movie names\nfor h3 in soup5.findAll('h3', attrs={'class':'lister-item-header'}):\n    #print (\"\\n\")\n    for a in h3.findAll('a'):\n            movies5.append(a.text)\n            \n#print(movies)\n#CREATING DF with Movie Details\nmovielist5=pd.DataFrame(movies5,columns=[\"MovieTitle\"])\n#print(movielist)\nCom=[\"Comedy\"]*50\n#print(Action)\nmovielist5[\"Genre\"]=pd.Series(Com)\n#print(movielist)\n\n#SCRAPING movie ratings\nrate5=[]\nfor div in soup5.findAll('div', attrs={'class':'inline-block ratings-imdb-rating'}):\n    #print (\"\\n\")\n    for r in div.findAll('strong'):\n            rate5.append(r.text)\n#print(len(rate))\n\nmovielist5[\"Rating\"]=pd.Series(rate5)\n#print(movielist)\n\n#SCRAPING Number of Votes\nVote5=[]\nfor p in soup5.findAll('span', attrs={'name':'nv'}):\n    #print (\"\\n\")\n    Vote5.append(p.text)\n    \n    \n#SCRAPING to add VoterCount and Gross\nVotes5=[]\nfor i in range(0,100,2):\n    V=Vote5[i]\n    Votes5.append(V)\n#print(Votes)\nGr5=[]\nfor j in range(1,100,2):\n    G5=Vote[j]\n    Gr5.append(G5)\n#print(Gr)\n#print(len(Votes))\n#print(len(Gr))\nmovielist5[\"Votercount\"]=pd.Series(Votes5)\nmovielist5[\"Gross\"]=pd.Series(Gr5)\n#print(movielist2)\nmovielist=movielist.append(movielist5,ignore_index=True)\n\n\n\n#CREATING ANIMATION list\n\n\n\nmovies6=[]\n#Scraping for movie names\nfor h3 in soup6.findAll('h3', attrs={'class':'lister-item-header'}):\n    #print (\"\\n\")\n    for a in h3.findAll('a'):\n            movies6.append(a.text)\n            \n#print(movies)\n#CREATING DF with Movie Details\nmovielist6=pd.DataFrame(movies6,columns=[\"MovieTitle\"])\n#print(movielist)\nAni=[\"Animation\"]*50\n#print(Action)\nmovielist6[\"Genre\"]=pd.Series(Ani)\n#print(movielist)\n\n#SCRAPING movie ratings\nrate6=[]\nfor div in soup6.findAll('div', attrs={'class':'inline-block ratings-imdb-rating'}):\n    #print (\"\\n\")\n    for r in div.findAll('strong'):\n            rate6.append(r.text)\n#print(len(rate))\n\nmovielist6[\"Rating\"]=pd.Series(rate6)\n#print(movielist)\n\n#SCRAPING Number of Votes\nVote6=[]\nfor p in soup6.findAll('span', attrs={'name':'nv'}):\n    #print (\"\\n\")\n    Vote6.append(p.text)\n    \n    \n#SCRAPING to add VoterCount and Gross\nVotes6=[]\nfor i in range(0,100,2):\n    V=Vote6[i]\n    Votes6.append(V)\n#print(Votes)\nGr6=[]\nfor j in range(1,100,2):\n    G6=Vote[j]\n    Gr6.append(G6)\n#print(Gr)\n#print(len(Votes))\n#print(len(Gr))\nmovielist6[\"Votercount\"]=pd.Series(Votes6)\nmovielist6[\"Gross\"]=pd.Series(Gr6)\n#print(movielist2)\nmovielist=movielist.append(movielist6,ignore_index=True)\n\n\n\n'''x=[]\nfor z in soup6.findAll('div',attrs={'class':'lister-item-content'}):\n    for p in z.findAll('p'):\n        w=p.text\n        s1=w.find(\"Director\")\n        s2=w.find(\"|\")\n        d=(w[s1:s2])\n        x.append(d)\nprint(x)'''\nmovielist\n\n\n#Fixing the movielist dataframe column GrossProtift and removing duplicate movies \n\n\nmovielist[\"GrossI\"]=movielist[\"Gross\"].str.split(\"$\")\nmovielist[\"G1\"]=movielist.GrossI.str.get(1)\ndel movielist[\"GrossI\"]\nmovielist[\"G2\"]=movielist[\"G1\"].str.split(\"M\")\nmovielist[\"GrossProfit\"]=movielist[\"G2\"].str.get(0)\ndel movielist[\"G2\"]\ndel movielist[\"G1\"]\ndel movielist[\"Gross\"]\nmovielist[\"GrossProfit\"]=pd.to_numeric(movielist[\"GrossProfit\"])\nmovielist[\"Rating\"]=pd.to_numeric(movielist[\"Rating\"])\nGenres=movielist[\"Genre\"].unique()\nmovielist = movielist.drop_duplicates(subset='MovieTitle', keep=\"first\")\nprint(Genres)\n\n#GENREWISE summation of Gross profits\n#PLOTTING GRAPH for Gross prod per Genre\n\nGross=movielist.groupby('Genre')[\"GrossProfit\"].mean()\nprint(Gross)\nfr1={\"GrossProfit\":Gross}\nGenreGross=pd.DataFrame(fr1)\n\nGenreGross.describe()\n\ndef grosscol(col):\n    if col>315:\n        return(\"indianred\")\n    elif (col>=305 and col<=315):\n        return(\"tomato\")\n    else:\n        return(\"gold\")\n\n\n\nfig,ax=plt.subplots()\nfig.set_size_inches(10,8, forward=True)\nfor ind,gprof in zip(GenreGross.index,GenreGross[\"GrossProfit\"]):\n    ax.bar(ind,gprof,color=grosscol(gprof))\n\n    \n#Creating Legend:\nHighG = mpatches.Patch(color='indianred', label='Gross:>$315M')\nMedG = mpatches.Patch(color='tomato', label='Gross:$305M-315M')\nLowG = mpatches.Patch(color='gold', label='Gross:<$305M')\n\nax.set_xlabel(\"Genre\")\nax.set_ylabel(\"Average Gross in USD(Millions)\")\nplt.title(\"Aaverage Gross per movie from various genres\",color=\"indianred\",fontsize=18)\nplt.legend(handles=[HighG,MedG,LowG],prop={\"size\":8})\nplt.ylim((0,400))\nplt.savefig(\"GenrewiseGrossIncome.png\")\nplt.show()\n\n\n#PLOT GENRE WISE TOP 10\n#TOP 10 movies from each genre and their ratings\n#PLOT ACTION\n\n#####TRY\n\n\ndef grosscol1(val):\n    if val>8.5:\n        return(\"mediumvioletred\")\n    elif (val>=8 and val<=8.5):\n        return(\"deeppink\")\n    elif (val>=7 and val<=7.9):\n        return(\"pink\")\n    else:\n        return(\"darkmagenta\")\n\nHighR = mpatches.Patch(color='mediumvioletred', label='Rating:>8.5')\nMedR = mpatches.Patch(color='deeppink', label='Rating:8-8.5')\nLowR = mpatches.Patch(color='pink', label='Rating:7-7.9')\nBlowR=mpatches.Patch(color='darkmagenta', label='Rating:<7')\n#plt.legend(handles=[HighR,MedR,LowR],prop={\"size\":8})\n    \nfig,ax=plt.subplots(3,2,figsize=(16,16))\ng1=movielist.groupby(\"Genre\")\ng11=g1.get_group(\"Action\")\nActTop10=g11.sort_values([\"Rating\"],ascending=(False)).head(10)\nActTop10=ActTop10.sort_values([\"Rating\"],ascending=True)\n#print(ActTop10)\nActTop10.reset_index(inplace = True) \n\n##START\n\nfig.tight_layout(pad=2.0)\n#ax[0,0].scatter(ActTop10[\"Rating\"],ActTop10[\"MovieTitle\"],marker=\"h\",color='green',s=150,edgecolors=\"black\",label=\"ACTION\")\n#ax[0,0].barh(ActTop10[\"MovieTitle\"],ActTop10[\"Rating\"],color=grosscol1(ActTop10))\n\nfor mov,rate in zip(ActTop10[\"MovieTitle\"],ActTop10[\"Rating\"]):\n    ax[0,0].barh(mov,rate,color=grosscol1(rate))\n\nax[0,0].set_xlabel(\"Rating\")\n#ax[0,0].set_ylabel(\"Rating\")\nax[0,0].set_title(\"IMDb Ratings:Top 10 Action Movies\")\n\n\n\n#PLOT ANIMATION\nfig.tight_layout(pad=2.0)\ng2=movielist.groupby(\"Genre\")\ng22=g2.get_group(\"Animation\")\nAniTop10=g22.sort_values([\"Rating\"],ascending=(False)).head(10)\n\nAniTop10=AniTop10.sort_values([\"Rating\"],ascending=True)\nAniTop10.reset_index(inplace = True) \n#rint(AniTop10)\n\n\n#ax[0,1].barh(AniTop10[\"MovieTitle\"],AniTop10[\"Rating\"],color='yellow')\n\nfor mov,rate in zip(AniTop10[\"MovieTitle\"],AniTop10[\"Rating\"]):\n    ax[0,1].barh(mov,rate,color=grosscol1(rate))\n#ax[0,1].set_xticklabels(AniTop10[\"MovieTitle\"],rotation=90)\nax[0,1].set_xlabel(\"Rating\")\n\nax[0,1].set_title(\"IMDb Ratings:Top 10 Animation Movies\")\n#ax[0,1].set_ylim([0,10])\n\n\n#PLOT COMEDY\n\nfig.tight_layout(pad=2.0)\ng3=movielist.groupby(\"Genre\")\ng33=g3.get_group(\"Comedy\")\nComTop10=g33.sort_values([\"Rating\"],ascending=(False)).head(10)\nComTop10=ComTop10.sort_values([\"Rating\"],ascending=True)\nComTop10.reset_index(inplace = True) \n#rint(AniTop10)\n\n#ax[1,0].barh(ComTop10[\"MovieTitle\"],ComTop10[\"Rating\"],color='cyan')\n\nfor mov,rate in zip(ComTop10[\"MovieTitle\"],ComTop10[\"Rating\"]):\n    ax[1,0].barh(mov,rate,color=grosscol1(rate))\n\nax[1,0].set_xlabel(\"Rating\")\n\nax[1,0].set_title(\"IMDb Ratings:Top 10 Comedy Movies\")\n\n\n#PLOT DRAMA\n\nfig.tight_layout(pad=2.0)\ng4=movielist.groupby(\"Genre\")\ng44=g4.get_group(\"Drama\")\nDraTop10=g44.sort_values([\"Rating\"],ascending=(False)).head(10)\nDraTop10=DraTop10.sort_values([\"Rating\"],ascending=True)\nDraTop10.reset_index(inplace = True) \n#rint(AniTop10)\n\n#ax[1,1].barh(DraTop10[\"MovieTitle\"],DraTop10[\"Rating\"],color='pink')\n#ax[1,1].set_xticklabels(DraTop10[\"MovieTitle\"],rotation=90)\n\nfor mov,rate in zip(DraTop10[\"MovieTitle\"],DraTop10[\"Rating\"]):\n    ax[1,1].barh(mov,rate,color=grosscol1(rate))\nax[1,1].set_xlabel(\"Rating\")\n\nax[1,1].set_title(\"IMDb Ratings:Top 10 Drama Movies\")\n\n\n#ROMANCE PLOT\n\nfig.tight_layout(pad=2.0)\ng5=movielist.groupby(\"Genre\")\ng55=g5.get_group(\"Romance\")\nRomTop10=g55.sort_values([\"Rating\"],ascending=(False)).head(10)\nRomTop10=RomTop10.sort_values([\"Rating\"],ascending=True)\nRomTop10.reset_index(inplace = True) \n#rint(AniTop10)\n\n#ax[2,0].barh(RomTop10[\"MovieTitle\"],RomTop10[\"Rating\"],color='purple')\n\nfor mov,rate in zip(RomTop10[\"MovieTitle\"],RomTop10[\"Rating\"]):\n    ax[2,0].barh(mov,rate,color=grosscol1(rate))\n\nax[2,0].set_xlabel(\"Rating\")\n\nax[2,0].set_title(\"IMDb Ratings:Top 10 Romance Movies\")\n\n\n#SCIFI PLOT\n\nfig.tight_layout(pad=2.0)\ng6=movielist.groupby(\"Genre\")\ng66=g6.get_group(\"Sci-Fi\")\nSciTop10=g66.sort_values([\"Rating\"],ascending=(False)).head(10)\nSciTop10=SciTop10.sort_values([\"Rating\"],ascending=True)\nSciTop10.reset_index(inplace = True) \n#rint(AniTop10)\n\n#ax[2,1].barh(SciTop10[\"MovieTitle\"],SciTop10[\"Rating\"],color='red')\nfor mov,rate in zip(SciTop10[\"MovieTitle\"],SciTop10[\"Rating\"]):\n    ax[2,1].barh(mov,rate,color=grosscol1(rate))\n\nax[2,1].set_xlabel(\"Rating\")\n\nax[2,1].set_title(\"IMDb Ratings:Top 10 Sci-Fi Movies\")\n\n\nplt.suptitle(\"IMDb Ratings for Top 10 Movies in Each Genre\",fontsize=34,color=\"indianred\",y=1.)\n\n#Displaying the legend\nfig.tight_layout(rect=(0,0,1,0.9))\nfig.legend(handles=[HighR,MedR,LowR,BlowR],prop={\"size\":14},loc=\"upper right\")\nplt.savefig('IMDb Genre Ratings', ext='png', bbox_inches=\"tight\") \nplt.show()\n\nmovielist\n\n#AVERAGE RATING PER GENRE\nGenAvgR=movielist.groupby(\"Genre\")[\"Rating\"].mean()\n\n#LEGEND\ndef grosscol2(val):\n    if val>8.2:\n        return(\"darkred\")\n    elif (val>7.8 and val<=8.2):\n        return(\"orangered\")\n    else:\n        return(\"orange\")\n\nHighRt = mpatches.Patch(color='darkred', label='Rating:>8.2')\nMedRt = mpatches.Patch(color='orangered', label='Rating:7.8-8.2')\nLowRt = mpatches.Patch(color='orange', label='Rating:<7.8')\n\n\n\nfig,ax=plt.subplots()\nfig.set_size_inches(10,8, forward=True)\nfor gen,avrate in zip(Genres,GenAvgR):\n    ax.bar(gen,avrate,color=grosscol2(avrate))\n#ax.bar(Genres,GenAvgR)\nax.set_xticklabels(Genres,rotation=90)\nax.set_ylim(0,10)\nax.set_ylabel(\"Average IMDb Rating\",fontsize=12)\nplt.title(\"Average IMDb Rating for Top 219 Movies from various genres\",fontsize=20,color=\"indianred\")\nax.legend(handles=[HighRt,MedRt,LowRt],prop={\"size\":12},loc=\"upper right\")\n#fig.tight_layout(rect=(0,0,1,0.9))\nplt.savefig(\"Genrewise Average IMDb Rating.png\")\nplt.show()\n\n\n#Most common IMDb Ratings\nfig,ax=plt.subplots()\nfig.set_size_inches(10,8, forward=True)\nN, bins, patches=ax.hist(movielist[\"Rating\"],bins=25,histtype=\"bar\",color=\"crimson\",edgecolor=\"orange\",linewidth=2)\n#print(counts)\n#print(bins)\n#ax.set_xlim(0,10)\nax.set_xlabel(\"IMDb Rating\",fontsize=10)\nax.set_ylabel(\"Number of Movies\",fontsize=10)\nax.set_xticks(bins)\nax.xaxis.set_major_formatter(FormatStrFormatter('%0.1f'))\n\n\n##############\n\n# We'll color code by height, but you could use any scalar\nfracs = N \/ N.max()\n\n# we need to normalize the data to 0..1 for the full range of the colormap\nnorm = colors.Normalize(fracs.min(), fracs.max())\n\n# Now, we'll loop through our objects and set the color of each accordingly\nfor thisfrac, thispatch in zip(fracs, patches):\n    color = plt.cm.viridis(norm(thisfrac))\n    thispatch.set_facecolor(color)\n\n\n#############\nplt.title(\"Number of Movies per Rating\",fontsize=16,color=\"indianred\")\nplt.savefig(\"HistRating.png\")\nplt.show()\nprint(movielist)\n\n\nrr=movielist.groupby('Genre')[\"MovieTitle\"].count()\nprint(rr)\nprint(movielist.head(219))","f12f357b":"## Exploring Web Scraping with IMDb\n\n I had recently picked up a course on Web Scraping and got myself well-versed with its concepts.\n \nHere is what I did with a cup of perfectly brewed black tea by my side:\n\n* I opened the IMDb website and saw a list of movies load onto my screen. I right-clicked on one of the movie names to Inspect the HTML code of the page. It took quite a few clicks to understand how the page was structured before I could start scraping data using BeautifulSoup.\n\n* I scraped information about movie titles, genres, votes, ratings and gross revenue for a total of six genres segregated into Action, Animation, Comedy, Drama, Sci-Fi and Romance.\n\n* I collected all this information in a Pandas DataFrame, cleaned and re-organised the data to make it more comprehensible.\n\n* Lastly I played around with the data, plotted comparisons between various parameters and drew conclusions out of them.\n\n## **Take-Aways:**\n1. My first plot summarized the Average Gross Revenue categorized based on genre.\n\n2. I then plotted the IMDb ratings of Top 10 movies from each genre and categorized the ratings into three slabs. Even though \"Drama\" came second after \"Comedy\" in terms of Average Gross Revenue, it was the only category to have all of it's Top 10 movies with a rated above 8.5. The genre Sci-Fi not only ranked last in terms of Average Gross revenue, but was also the only genre to have a rating of below 7 and none above 8.5 among it's Top 10 movies.\n\n3. My next observation was around the average IMDb rating categorized based on genre. Surprisingly Sci-Fi had the highest average IMDb rating, and perhaps the only category to cross the 8.5 mark, in-spite of having ratings below 7 for a few of it's Top 10 movies. This could be due to the fact that other genres had more number of movies with lower ratings that caused their Average IMDb rating to plummet.\n\n4. My last plot was regarding the most common rating given to movies by viewers in the data set I worked with. From the looks of it, 8-8.2 is the most popular 'rating window' for movies. While one can find very few movies rated above 9 or below 6.2. I color-coded the plot based on the count under each bin to make it more visually distinguishable.\n"}}