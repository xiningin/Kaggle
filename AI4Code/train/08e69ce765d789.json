{"cell_type":{"1a0699b7":"code","b338f6f5":"code","9a69c01d":"code","9c4251ab":"code","2e217101":"code","fa1e3b6a":"code","6023f132":"code","43a56186":"code","55422592":"code","d431b572":"code","64bd566c":"code","46fe6825":"code","694c8429":"code","6b441d7c":"markdown","3f8e23cf":"markdown","76ae11cc":"markdown"},"source":{"1a0699b7":"'''According to the following paper:\nhttps:\/\/pubs.rsna.org\/doi\/10.1148\/radiol.2020200370\n\nThe common pattern in the COVID progression over time is:\n\nDay 0-4: Ground glass opacities\nDay 5-8: Crazy Paving & Consolidation\nDay 9-13: Consolidation\nDay>= 14: Residual Ground glass opacities & parenchymal bands\n\nIn this code, these COVID distinctive characteristics are searched in the dataset to see \nthe comnbination of characteristics appearing in the limited number of radiologist currently\navailable in the COVID meta-data file.\n\nWe also visually contrast these characteristics sampling their corresponding CT scan images.\n'''\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n        print(os.path.join(dirname))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b338f6f5":"# reading COVID meta data file\ndf = pd.read_csv('\/kaggle\/input\/large-covid19-ct-slice-dataset\/meta_data_covid.csv', encoding='windows-1252')","9a69c01d":"# specifiying the search terms we want to look for in the meta data file\nsearch_terms =['consolidation','ground glass','diffuse','bilateral','paving','parenchymal']\n    \nnum = 0\ncol_list = []\nfor i in df.columns:\n    df[i].astype('str').apply(lambda x: col_list.append(df[i].name)  if any(ele in x.lower() for ele in search_terms)  else 'pass')\n    \nprint(\"Number of rows containing the search_terms: \",len(col_list)) \nprint(\"The columns containing the search_terms: \",set(col_list))\n\nrelavant_columns = list(set(col_list))\nfrom collections import Counter\nCounter(col_list)","9c4251ab":"def reformatting(x):\n# relpace missing values with '-'\n    try:\n        return str(x)\n    except:\n        return '-'\n\ndef filtered_columns(column_name,terms):\n    df[column_name] = df[column_name].iloc[:].apply(lambda x : reformatting(x)) \n    filterred_column = df.loc[df[column_name].str.lower().str.contains(terms)]\n    print(column_name,len(filterred_column))\n    return filterred_column\n    \nfinding = filtered_columns('finding','|'.join(search_terms))\nPresentation = filtered_columns('Presentation','|'.join(search_terms))\nDiscussion = filtered_columns('Case Discussion','|'.join(search_terms))\nSeverity = filtered_columns('Severity','|'.join(search_terms))\nother = filtered_columns('Other diseases','|'.join(search_terms))","2e217101":"#All the rows with the search terms\nmerged = pd.merge(pd.merge(pd.merge(pd.merge(finding, Presentation, how=\"outer\"), \n                                    Discussion, how=\"outer\"), \n                                    Severity, how=\"outer\"), \n                                    other, how=\"outer\")\nmerged[relavant_columns]","fa1e3b6a":"def new_column(x,i):\n            ele = 'GGO'\n            if (('ground' in x.lower()) and ('glass' in x.lower())) or ('ggo' in x.lower()):\n                merged.loc[merged[i]==x,str(ele)] = str(ele)+', '\n            #else:\n            #    merged.loc[merged[i]==x,str(ele)] = ''\n                    \n    \n\nfor i in merged.columns:\n    merged[i].astype('str').apply(lambda x: new_column(x,i)  if any(ele in x.lower() for ele in search_terms)  else 'pass')","6023f132":"search_terms =['consolidation','diffuse','opacification','bilateral','paving','parenchymal']\ndef new_column(x,i):\n        for ele in search_terms:\n            if ele in x.lower():            \n                merged.loc[merged[i]==x,str(ele).capitalize()] = str(ele).capitalize()+', '\n            #else:\n            #    merged.loc[merged[i]==x,str(ele)] = ''\n                    \n    \n\nfor i in merged.columns:\n    merged[i].astype('str').apply(lambda x: new_column(x,i)  if any(ele in x.lower() for ele in search_terms)  else 'pass')\n","43a56186":"terms_count = pd.DataFrame((merged.notnull().sum()[-7:]\/796)*100 ,columns  =['Proportion']).sort_values('Proportion',ascending = True)\nterms_count.rename(index={'Bilateral':'Bilateral Involvement','Parenchymal':'Parenchymal Bands','Paving':'Crazy Paving','Diffuse':'Diffuse Distribution'},inplace = True)\nterms_count.reset_index()\ndf.rename(index={'alpha': 'mu'})\nterms_count.reset_index(inplace = True)\nterms_count.rename(columns={'index':'CT Characteristic'},inplace = True)\nimport plotly.express as px\n\nfig = px.bar(terms_count,orientation=\"h\", x='Proportion',y = 'CT Characteristic',width=500, height=400,color = \"Proportion\", color_continuous_scale = \"Matter\", template=\"simple_white\")\nfig.update_yaxes(ticks=\"\",showgrid=False, zeroline=False)\nfig.update_xaxes(ticks=\"\",showgrid=False, zeroline=False)\n","55422592":"merged.fillna('', inplace=True)\nmerged['combinations'] = merged.iloc[:, -1]+merged.iloc[:, -2]+merged.iloc[:, -3]+merged.iloc[:, -4]+merged.iloc[:, -5]+merged.iloc[:, -6]+merged.iloc[:, -7]\nmerged['combinations'] = merged['combinations'].apply(lambda x: x.lstrip().rstrip(', '))\n\n\nfrom collections import Counter\nx = Counter(merged['combinations'])\nsummary = [[l,k] for k,l in sorted([(j,i) for i,j in x.items()], reverse=True)]","d431b572":"from tabulate import tabulate\nsummary = pd.DataFrame(summary, columns = ['Combination', 'Count']) \n\n# different combination of the terms and the number of rows they appear in\nprint(tabulate(summary, headers='keys', tablefmt='psql'))","64bd566c":"import plotly.express as px\npx.bar(summary.sort_values(by ='Count'),x='Count',y='Combination')\n#summary.sort_values(by ='Count').plot(x=\"Combination\", y=\"Count\", kind=\"barh\")\n","46fe6825":"unique_comnibations = list(set(merged['combinations']))\nsample_file_names = pd.DataFrame(\n    [ p , merged[merged['combinations'] == p ].reset_index()['File name'].iloc[-1]] for p in unique_comnibations)\n\nsample_file_names.columns=['Combinations','File Name']\nsample_file_names\n\n#merged.loc[0,'combinations']\n#merged['combinations']","694c8429":"plt.figure(figsize=(80,80))  \nfor i in range(len(sample_file_names)):\n    img = cv2.imread('\/kaggle\/input\/large-covid19-ct-slice-dataset\/curated_data\/curated_data\/2COVID\/'+sample_file_names.loc[i,'File Name'])\n    plt.imshow(img)\n    plt.subplot(6, 5, i+1)\n    plt.imshow(img)\n    plt.title(sample_file_names.loc[i,'Combinations'],fontsize= 35) \n#plt.show()  \n    ","6b441d7c":"### We want to count how many from each of lesion type and their combinations exists\n### To that end, we first decode the existance of the lesion type in the case report in a new column. ","3f8e23cf":"### Now, we concat the new columns, and count the number from each unique combination","76ae11cc":"### Number of cases with the lesion type (among the 796 exsiting reports)"}}