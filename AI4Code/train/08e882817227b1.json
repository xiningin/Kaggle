{"cell_type":{"e097bfeb":"code","0ab00d72":"code","82784201":"code","cfd3c1e4":"code","703d0bec":"code","e8d41896":"code","247e41de":"code","a81632fc":"code","b917e92f":"markdown","e3d63bb9":"markdown","a7434ad5":"markdown","73356fa3":"markdown","49ea7949":"markdown","4e1269ae":"markdown","4c4dff80":"markdown","593a1594":"markdown"},"source":{"e097bfeb":"import numpy as np \nfrom numpy.linalg import norm as norm\nfrom ast import literal_eval\nimport pandas as pd \nimport plotly.express as px\nimport os\nfrom PIL import Image\n\nh = 153\nw = 155\n\nradius = int(w\/2.5)","0ab00d72":"df = pd.read_csv(\"\/kaggle\/input\/na-lcs-summer-2020-player-locations\/nalcssummer2020.csv\")\ndf.head()","82784201":"df_c9_jgl_blue = df[(df.team == 'c9') & (df.roles == \"jgl\") & (df.side == \"blue\")]\ndf_c9_jgl_blue","cfd3c1e4":"minimap = Image.open(\"\/kaggle\/input\/na-lcs-summer-2020-player-locations\/lcs.png\")\npx.imshow(minimap)","703d0bec":"def classify_jgl(points):\n    reds = [0]*9\n    for point in points:\n        try:\n            point = literal_eval(point)\n            if(norm(point - np.array([0,0])) < radius): # Toplane\n                reds[5]+=1\n            elif(norm(point - np.array([149,0])) < radius): # Red base\n                reds[6]+=1\n            elif(norm(point - np.array([149,149])) < radius): # Botlane\n                reds[8]+=1\n            elif(norm(point - np.array([0,149])) < radius): # Blue base\n                reds[7]+=1\n            elif(point[0] < h - point[1] - h\/10): # Mid lane upper border\n                if(point[0] < (5\/4)*point[1]): # Blue side\n                    reds[1]+=1\n                else: # Red side\n                    reds[0]+=1\n            elif(point[0] < h - point[1] + h\/10): # Mid lane lower border\n                reds[4]+=1 \n            elif(point[0] > h - point[1] + h\/10): # Below lower border\n                if(point[0] < (5\/4)*point[1]): # Blue side\n                    reds[2]+=1\n                elif(point[0] > (5\/4)*point[1]): # Red side\n                    reds[3]+=1\n        except:\n            pass\n    return(reds)","e8d41896":"colour = \"blue\"\ncol=\"Cloud 9\"\n\ntimesplits =  {480:\"0-8\", 840:\"8-14\", 1200:\"14-20\"}\ntimesplits2 = {480:0, 840:480, 1200:840}\n\nfor times in timesplits.keys():\n\n    times_floor = timesplits2[times]\n    \n    all_games = df_c9_jgl_blue.iloc[0][6+times_floor:6+times]\n    for i in range(1,df_c9_jgl_blue.shape[0]):\n        all_games = all_games.append(df_c9_jgl_blue.iloc[i][6+times_floor:6+times])\n    \n    reds = classify_jgl(all_games)\n    reds = list(map(lambda x : 255-255*(x - min(reds))\/(max(reds)), reds))\n\n    fig = px.scatter(\n            x = [1], \n            y = [1],\n            range_x = [0,w],\n            range_y = [h, 0],\n            width = 800,\n            height = 800)\n\n\n    fig.update_layout(\n            template = \"plotly_white\",\n            xaxis_showgrid = False,\n            yaxis_showgrid = False\n            )\n\n    fig.update_xaxes(showticklabels = False, title_text = \"\")\n    fig.update_yaxes(showticklabels = False, title_text = \"\")\n\n    # Different colours for each team\n    fill_team = \"255, %d, %d\" if colour == \"red\" else \"%d, %d, 255\"\n    fig.update_layout(\n        shapes=[\n        dict(\n                type=\"path\",\n                path = \"M 0,0 L %d,%d L %d,0 Z\" % (w\/2,h\/2,w),\n                line=dict(\n                    color=\"white\",\n                    width=2,\n                ),\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[0],reds[0]),\n            ),\n        dict(\n                type=\"path\",\n                path = \"M 0,0 L %d,%d L 0,%d Z\" % (w\/2,h\/2,w),\n                line=dict(\n                    color=\"white\",\n                    width=2,\n                ),\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[1],reds[1]),\n            ),\n\n        dict(\n                type=\"path\",\n                path = \"M %d,%d L %d,%d L 0,%d Z\" % (w,h,w\/2, h\/2,h),\n                line=dict(\n                    color=\"white\",\n                    width=2,\n                ),\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[2],reds[2]),\n            ),\n        dict(\n                type=\"path\",\n                path = \"M %d,%d L %d,%d L %d,0 Z\" % (w,h,w\/2,h\/2,w),\n                line=dict(\n                    color=\"white\",\n                    width=2,\n                ),\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[3],reds[3]),\n            ),\n        dict(\n                type=\"path\",\n                path = \"M %d,%d L %d,%d L %d,0 L 0,%d Z\" % (w\/10,h, w,h\/10,w-w\/10,h-h\/10),\n                line=dict(\n                    color=\"white\",\n                    width=2,\n                ),\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[4],reds[4]),\n            ),\n\n        dict(\n                type=\"circle\",\n                xref=\"x\",\n                yref=\"y\",\n                x0=-radius,\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[5],reds[5]),\n                y0=radius,\n                x1=radius,\n                y1=-radius,\n                line_color=\"white\",\n            ),\n        dict(\n                type=\"circle\",\n                xref=\"x\",\n                yref=\"y\",\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[6],reds[6]),\n                x0=w-radius,\n                y0=radius,\n                x1=w+radius,\n                y1=-radius,\n                line_color=\"white\",\n            ),\n        dict(\n                type=\"circle\",\n                xref=\"x\",\n                yref=\"y\",\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[7],reds[7]),\n                x0=-radius,\n                y0=h+radius,\n                x1=radius,\n                y1=h-radius,\n                line_color=\"white\",\n            ),\n        dict(\n                type=\"circle\",\n                xref=\"x\",\n                yref=\"y\",\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[8],reds[8]),\n                x0=w-radius,\n                y0=h+radius,\n                x1=w+radius,\n                y1=h-radius,\n                line_color=\"white\",\n            )])\n    fig.update_layout(\n        title = \"%s: %smins\" % (col.capitalize(), timesplits[times]),\n        template = \"plotly_white\",\n        xaxis_showgrid = False,\n        yaxis_showgrid = False\n        )\n\n    fig.show()","247e41de":"c9_olaf = df_c9_jgl_blue[df_c9_jgl_blue['champ']==\"olaf\"]\nc9_other = df_c9_jgl_blue[df_c9_jgl_blue['champ']!=\"olaf\"]\n\ntitles = ['Cloud 9: Olaf (0-8mins)', 'Cloud 9: Others (0-8mins)']\n\ntimes = 480\ntimes_floor = timesplits2[times]\n\nfor index, dataf in enumerate([c9_olaf, c9_other]):\n    \n    all_games = dataf.iloc[0][6+times_floor:6+times]\n    for i in range(1,dataf.shape[0]):\n        all_games = all_games.append(dataf.iloc[i][6+times_floor:6+times])\n    \n    reds = classify_jgl(all_games)\n    reds = list(map(lambda x : 255-255*(x - min(reds))\/(max(reds)), reds))\n\n    fig = px.scatter(\n            x = [1], \n            y = [1],\n            range_x = [0,w],\n            range_y = [h, 0],\n            width = 800,\n            height = 800)\n\n\n    fig.update_layout(\n            template = \"plotly_white\",\n            xaxis_showgrid = False,\n            yaxis_showgrid = False\n            )\n\n    fig.update_xaxes(showticklabels = False, title_text = \"\")\n    fig.update_yaxes(showticklabels = False, title_text = \"\")\n\n    # Different colours for each team\n    fill_team = \"255, %d, %d\" if colour == \"red\" else \"%d, %d, 255\"\n    fig.update_layout(\n        shapes=[\n        dict(\n                type=\"path\",\n                path = \"M 0,0 L %d,%d L %d,0 Z\" % (w\/2,h\/2,w),\n                line=dict(\n                    color=\"white\",\n                    width=2,\n                ),\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[0],reds[0]),\n            ),\n        dict(\n                type=\"path\",\n                path = \"M 0,0 L %d,%d L 0,%d Z\" % (w\/2,h\/2,w),\n                line=dict(\n                    color=\"white\",\n                    width=2,\n                ),\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[1],reds[1]),\n            ),\n\n        dict(\n                type=\"path\",\n                path = \"M %d,%d L %d,%d L 0,%d Z\" % (w,h,w\/2, h\/2,h),\n                line=dict(\n                    color=\"white\",\n                    width=2,\n                ),\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[2],reds[2]),\n            ),\n        dict(\n                type=\"path\",\n                path = \"M %d,%d L %d,%d L %d,0 Z\" % (w,h,w\/2,h\/2,w),\n                line=dict(\n                    color=\"white\",\n                    width=2,\n                ),\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[3],reds[3]),\n            ),\n        dict(\n                type=\"path\",\n                path = \"M %d,%d L %d,%d L %d,0 L 0,%d Z\" % (w\/10,h, w,h\/10,w-w\/10,h-h\/10),\n                line=dict(\n                    color=\"white\",\n                    width=2,\n                ),\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[4],reds[4]),\n            ),\n\n        dict(\n                type=\"circle\",\n                xref=\"x\",\n                yref=\"y\",\n                x0=-radius,\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[5],reds[5]),\n                y0=radius,\n                x1=radius,\n                y1=-radius,\n                line_color=\"white\",\n            ),\n        dict(\n                type=\"circle\",\n                xref=\"x\",\n                yref=\"y\",\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[6],reds[6]),\n                x0=w-radius,\n                y0=radius,\n                x1=w+radius,\n                y1=-radius,\n                line_color=\"white\",\n            ),\n        dict(\n                type=\"circle\",\n                xref=\"x\",\n                yref=\"y\",\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[7],reds[7]),\n                x0=-radius,\n                y0=h+radius,\n                x1=radius,\n                y1=h-radius,\n                line_color=\"white\",\n            ),\n        dict(\n                type=\"circle\",\n                xref=\"x\",\n                yref=\"y\",\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[8],reds[8]),\n                x0=w-radius,\n                y0=h+radius,\n                x1=w+radius,\n                y1=h-radius,\n                line_color=\"white\",\n            )])\n    fig.update_layout(\n        title = titles[index],\n        template = \"plotly_white\",\n        xaxis_showgrid = False,\n        yaxis_showgrid = False\n        )\n\n    fig.show()","a81632fc":"colour = \"red\"\ndf_c9_jgl_red = df[(df.team == 'c9') & (df.roles == \"jgl\") & (df.side == \"red\")]\n\nc9_lee = df_c9_jgl_red[df_c9_jgl_red['champ']==\"leesin\"]\nc9_other = df_c9_jgl_red[df_c9_jgl_red['champ']!=\"leesin\"]\n\ntitles = ['Cloud 9: Lee Sin (0-8mins)', 'Cloud 9: Others (0-8mins)']\n\ntimes = 480\ntimes_floor = timesplits2[times]\n\nfor index, dataf in enumerate([c9_lee, c9_other]):\n    \n    all_games = dataf.iloc[0][6+times_floor:6+times]\n    for i in range(1,dataf.shape[0]):\n        all_games = all_games.append(dataf.iloc[i][6+times_floor:6+times])\n    \n    reds = classify_jgl(all_games)\n    reds = list(map(lambda x : 255-255*(x - min(reds))\/(max(reds)), reds))\n\n    fig = px.scatter(\n            x = [1], \n            y = [1],\n            range_x = [0,w],\n            range_y = [h, 0],\n            width = 800,\n            height = 800)\n\n\n    fig.update_layout(\n            template = \"plotly_white\",\n            xaxis_showgrid = False,\n            yaxis_showgrid = False\n            )\n\n    fig.update_xaxes(showticklabels = False, title_text = \"\")\n    fig.update_yaxes(showticklabels = False, title_text = \"\")\n\n    # Different colours for each team\n    fill_team = \"255, %d, %d\" if colour == \"red\" else \"%d, %d, 255\"\n    fig.update_layout(\n        shapes=[\n        dict(\n                type=\"path\",\n                path = \"M 0,0 L %d,%d L %d,0 Z\" % (w\/2,h\/2,w),\n                line=dict(\n                    color=\"white\",\n                    width=2,\n                ),\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[0],reds[0]),\n            ),\n        dict(\n                type=\"path\",\n                path = \"M 0,0 L %d,%d L 0,%d Z\" % (w\/2,h\/2,w),\n                line=dict(\n                    color=\"white\",\n                    width=2,\n                ),\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[1],reds[1]),\n            ),\n\n        dict(\n                type=\"path\",\n                path = \"M %d,%d L %d,%d L 0,%d Z\" % (w,h,w\/2, h\/2,h),\n                line=dict(\n                    color=\"white\",\n                    width=2,\n                ),\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[2],reds[2]),\n            ),\n        dict(\n                type=\"path\",\n                path = \"M %d,%d L %d,%d L %d,0 Z\" % (w,h,w\/2,h\/2,w),\n                line=dict(\n                    color=\"white\",\n                    width=2,\n                ),\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[3],reds[3]),\n            ),\n        dict(\n                type=\"path\",\n                path = \"M %d,%d L %d,%d L %d,0 L 0,%d Z\" % (w\/10,h, w,h\/10,w-w\/10,h-h\/10),\n                line=dict(\n                    color=\"white\",\n                    width=2,\n                ),\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[4],reds[4]),\n            ),\n\n        dict(\n                type=\"circle\",\n                xref=\"x\",\n                yref=\"y\",\n                x0=-radius,\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[5],reds[5]),\n                y0=radius,\n                x1=radius,\n                y1=-radius,\n                line_color=\"white\",\n            ),\n        dict(\n                type=\"circle\",\n                xref=\"x\",\n                yref=\"y\",\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[6],reds[6]),\n                x0=w-radius,\n                y0=radius,\n                x1=w+radius,\n                y1=-radius,\n                line_color=\"white\",\n            ),\n        dict(\n                type=\"circle\",\n                xref=\"x\",\n                yref=\"y\",\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[7],reds[7]),\n                x0=-radius,\n                y0=h+radius,\n                x1=radius,\n                y1=h-radius,\n                line_color=\"white\",\n            ),\n        dict(\n                type=\"circle\",\n                xref=\"x\",\n                yref=\"y\",\n                fillcolor=('rgba(%s,1)' % fill_team) % (reds[8],reds[8]),\n                x0=w-radius,\n                y0=h+radius,\n                x1=w+radius,\n                y1=h-radius,\n                line_color=\"white\",\n            )])\n    fig.update_layout(\n        title = titles[index],\n        template = \"plotly_white\",\n        xaxis_showgrid = False,\n        yaxis_showgrid = False\n        )\n\n    fig.show()","b917e92f":"It's easy to see patterns such as Huang playing more to his botlane between 8 and 14 minutes. He also tends to invade the enemy botside jungle less in the first 8 minutes.\n\nIt's also fairly simple to graph under certain conditions. Let's see how Cloud 9 play when they pick 'Olaf' (A playable character) versus when they pick other champions","e3d63bb9":"So you can see a clear difference in how Huang plays the first 8 minutes of the game when he plays as Olaf vs when he plays other champions on blue side. He plays a bit more to the botside of the map when on Olaf, and invades the enemy side a bit more. \n\nIt's also very easy to do the same for games where Cloud 9 plays on red side. Let's see how their 'Lee Sin' games compare to others when on red side","a7434ad5":"So we can see very little difference between the two\n\nOverall, I think this is a very powerful method of showing professional Jungler playstyles. Being able to quickly create these graphs is useful for analysis and scouting opposition teams!","73356fa3":"# League of Legends Playstyles: Pro Junglers\n\nLeague of Legends is the most popular esport in the world. Analytics are starting to become a key focus in the scene, with massive investment coming in for both internal and external data science departments. Every team is trying to find the next big innovation, meaning interest in research in the field is quickly growing.\n\nIt's a 5v5 game where each player has a unique role. In this notebook, I'll focus on the *Jungler* role, a free-roaming player who tries to support his team and apply pressure. I'll use player location data to try and show a way of graphing a given team's playstyle. I'll use the *nalcssummer2020.csv* file, player location data gathered from a subset of games from the 2020 Summer split of the North American League of Legends Championship Series (NALCS):","49ea7949":"This map can be split up into different regions fairly trivially:\n\n![map](https:\/\/i.imgur.com\/INOh2Pk.png)\n\nI'm trying to figure out which areas the Jungler tends to play in, so I'll split this up into regions. A good way to do this is by splitting the map up:\n\n![splitmap](https:\/\/i.imgur.com\/eP13HZu.png)\n\nThere are a total of 9 regions on this map. These correspond to the 3 main areas the Jungler can be in\n\n* The 3 lanes. The Jungler's main job is to assist their teammates who play in the lanes, seeing which lane they focus is important\n* The 4 quadrants of the jungle. This is where both Junglers get their resources. This area is hidden from the rest of the players so playing around this is crucial\n* The 2 bases. Players don't spend much time here, but not including them may skew the values for the rest of the regions\n\nThe good thing about splitting the map up like this is that it can be done using simple equations. The corners are just arcs of a circle while the rest of the lines are simple linear equations. This means that classifying each point is as easy as checking it against these linear equations","4e1269ae":"The locations are based on the in-game minimap:\n\n","4c4dff80":"For each region, the amount of points in that region are classified. It then becomes fairly trivial to use these regions in a plot, colouring them by the amount of points found there. The darker a region is, the more points found in that region. This means it's very easy to look at these maps and see how the games went. Look at Cloud 9's Jungler patterns for their blue side games","593a1594":"I'll focus on Cloud 9's jungler, Robert 'Blaber' Huang. Cloud 9 were the champions of the Spring spit, dominating the league on the back of the newly-promoted Huang. Finding patterns in his play may prove useful for dethroning Cloud 9. First we'll look at their games played on Blue side (the left-hand side)"}}