{"cell_type":{"60c81354":"code","5ba46e41":"code","38353c75":"code","f0e3172a":"code","e0375a21":"code","be9a938e":"code","82245b70":"code","1a9e8af5":"code","2be0ab08":"code","264ff59a":"code","a0092586":"code","61b1c6bc":"code","fe7a1548":"code","fb86af31":"code","ac63a156":"code","615498fd":"code","95c41811":"code","c8cd506a":"code","e98c583d":"code","da1fb680":"code","f538531d":"code","bc42ff81":"code","0a07fe6e":"code","ba660c8f":"code","28425b8b":"code","d4e5d8e1":"code","2b8df6a6":"code","7657aa50":"code","9860ec2c":"code","b2856422":"code","2da41b95":"code","d9e78ee9":"code","7bacb390":"code","ac1e2c18":"code","e3f34ab3":"code","2b90360d":"code","05a62613":"code","f3429a9d":"code","477fae16":"code","3501d3c3":"code","2840a525":"code","fbc1bbfd":"code","caff8e2f":"code","9039209b":"code","5171a6da":"code","7a5cdc16":"code","0012c383":"code","43493e87":"code","8044d4ad":"code","890c16e1":"code","479fdd78":"code","54f036f1":"code","8311e098":"code","526b6a9f":"code","6ec35e59":"code","160a8c4a":"code","996f47ae":"code","8395b766":"code","f6d4b9fb":"code","a2859491":"code","fcf9569a":"code","b0c5bbd4":"code","104028f0":"code","aba945bb":"code","c00275c6":"code","2bfdf5c2":"code","86a9f1e9":"code","19fb3630":"code","79d7e0cb":"code","a8051171":"code","7da85ec6":"code","7268eb44":"code","adbbd415":"code","2ae5c2b5":"code","e5e2c316":"code","5a1d1996":"code","6c396a3a":"markdown","dbca1580":"markdown","4b51f70b":"markdown","7b899d6d":"markdown","748c22bf":"markdown","d86468da":"markdown","fa7b94ca":"markdown","f34a9956":"markdown","0c0345c3":"markdown","2da0a8a0":"markdown"},"source":{"60c81354":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5ba46e41":"df_train=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_test=pd.read_csv(\"..\/input\/titanic\/test.csv\")","38353c75":"df_train.head()","f0e3172a":"df_test.head()","e0375a21":"df_train.describe()  # ","be9a938e":"df_train.shape","82245b70":"df_test.shape","1a9e8af5":"df_test.describe()","2be0ab08":"df_train.info()","264ff59a":"df_test.info()","a0092586":"df_train.columns","61b1c6bc":"df_train.Survived.value_counts()","fe7a1548":"# unnecessary columns\n\ndf_train=df_train.drop([\"Ticket\",\"Cabin\"],axis=1)\ndf_test=df_test.drop([\"Ticket\",\"Cabin\"],axis=1)","fb86af31":"df_train.shape","ac63a156":"df_test.shape","615498fd":"df_train.isnull().sum()","95c41811":"df_test.isnull().sum()","c8cd506a":"# there are lot of missing values in age column , we cant drop them, we have to fill those na with some appropriate values","e98c583d":"df_train.corr()","da1fb680":"# Replacing the null values in the Age column with Mean\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\n# Fit and transform to the parameters\ndf_train['Age'] = imputer.fit_transform(df_train[['Age']])\ndf_test['Age'] = imputer.fit_transform(df_test[['Age']])\n","f538531d":"df_train.isnull().sum()","bc42ff81":"df_test.isnull().sum()","0a07fe6e":"df_test.Fare.describe()","ba660c8f":"df_test['Fare'] = imputer.fit_transform(df_test[['Fare']])","28425b8b":"df_test.isnull().sum()    # no null values remaining in test dataset","d4e5d8e1":"df_train.isnull().sum()","2b8df6a6":"df_train.Embarked.value_counts()","7657aa50":"# we can replace missing values of embarked with S\ndf_train['Embarked'] = df_train['Embarked'].fillna(df_train['Embarked'].value_counts().index[0])","9860ec2c":"df_train.isnull().sum()  # no missing values in train","b2856422":"df_train.shape","2da41b95":"df_test.shape","d9e78ee9":"df_train.head()","7bacb390":"df_train=df_train.drop(\"Name\",axis=1)\ndf_test=df_test.drop(\"Name\",axis=1)","ac1e2c18":"df_train.info()","e3f34ab3":"df_test.info()","2b90360d":"# we should convert pclass to categorical as it defines classes 1,2,3\ndf_train[\"Pclass\"]=df_train[\"Pclass\"].astype(str)\ndf_test[\"Pclass\"]=df_test[\"Pclass\"].astype(str)","05a62613":"df_train.info()","f3429a9d":"df_train=df_train.drop(\"PassengerId\",axis=1)","477fae16":"submission_id=df_test[\"PassengerId\"]","3501d3c3":"df_test=df_test.drop(\"PassengerId\",axis=1)","2840a525":"df_train=pd.get_dummies(df_train)\ndf_test=pd.get_dummies(df_test)","fbc1bbfd":"df_train.head()","caff8e2f":"df_test.head()","9039209b":"df_train.shape","5171a6da":"df_test.shape","7a5cdc16":"submission_id","0012c383":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score,auc,roc_curve,confusion_matrix, classification_report,roc_auc_score","43493e87":"# splitting the data\ny=df_train[\"Survived\"]\nX=df_train.drop(\"Survived\",axis=1)\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)","8044d4ad":"X_train.shape,y_train.shape,X_test.shape,y_test.shape","890c16e1":"model_lr=LogisticRegression(max_iter=2000)\nmodel_lr.fit(X_train,y_train)","479fdd78":"y_pred_lr=model_lr.predict(X_test)\nconfusion_matrix(y_test,y_pred_lr)","54f036f1":"acc_lr=143\/179\nacc_lr","8311e098":"# logistic regression accuracy is 79.88826\nmodel_lr.score(X_test,y_test)","526b6a9f":"model_tree=DecisionTreeClassifier(max_depth=3,random_state=42)\nmodel_tree.fit(X_train,y_train)","6ec35e59":"y_pred_tree=model_tree.predict(X_test)","160a8c4a":"confusion_matrix(y_pred_tree,y_test)","996f47ae":"acc_tree=143\/179\nacc_tree","8395b766":"hyperparameters={\"max_depth\":np.arange(3,10)}\nmodel=DecisionTreeClassifier()\nmodel_tree_tune=GridSearchCV(model,hyperparameters,cv=5).fit(X_train,y_train)","f6d4b9fb":"model_tree_new=model_tree_tune.best_estimator_\ny_pred_tree_new=model_tree_new.predict(X_test)\nconfusion_matrix(y_test,y_pred_tree_new)","a2859491":"model_tree_new.score(X_test,y_test)","fcf9569a":"from sklearn.neighbors import KNeighborsClassifier\nfor i in range(1,10):\n    knn=KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    print(knn.score(X_test,y_test))","b0c5bbd4":"# k=5 have max accuracy but still less the logitic regression and decisiontreeclassifier","104028f0":"model_rf=RandomForestClassifier(n_estimators=500,oob_score=True,verbose=1).fit(X_train,y_train)\nprint(model_rf.score(X_test,y_test))","aba945bb":"model_rf","c00275c6":"# getting good accuracies then logisticregression and decisiontre3eclassifier","2bfdf5c2":"parameters = {'max_features':np.arange(1,10),'max_depth':np.arange(1,6)}\ntune_model = GridSearchCV(model_rf,parameters,cv=5,scoring='accuracy').fit(X_train,y_train)","86a9f1e9":"tune_model_rf=tune_model.best_estimator_\ny_pred_rf_tuned=tune_model_rf.predict(X_test)\nconfusion_matrix(y_test,y_pred_rf_tuned)","19fb3630":"accuracy_score(y_test,y_pred_rf_tuned)","79d7e0cb":"import xgboost as xgb\nfrom xgboost.sklearn import XGBClassifier","a8051171":"model_xgb =  XGBClassifier(n_estimators=500, objective= 'binary:logistic',seed=80).fit(X_train,y_train)","7da85ec6":"y_pred_xgb=model_xgb.predict(X_test)","7268eb44":"accuracy_score(y_test,y_pred_xgb)","adbbd415":"y_pred_submit=model_xgb.predict(df_test)","2ae5c2b5":"submission_df1=pd.DataFrame({\"PassengerId\":pd.Series(submission_id),\"Survived\":pd.Series(y_pred_submit)})","e5e2c316":"\nsubmission_df1","5a1d1996":"submission_df1.to_csv(\"submission_titanic3.csv\",index=False)","6c396a3a":"# kNeighbors classifier","dbca1580":"# decision tree classifier","4b51f70b":"# hyperparameter tuning in decision tree","7b899d6d":"# getting better accuracy then random forest in xgboost","748c22bf":"# making models","d86468da":"# getting dummies for categorical variables","fa7b94ca":"# logistic regression","f34a9956":"# random forest classifier","0c0345c3":"# hyperparameter tuning in random forest","2da0a8a0":"# boosting"}}