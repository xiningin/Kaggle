{"cell_type":{"0742cbd2":"code","e7001a91":"code","88e5a66b":"code","da49bab8":"code","977c1cf6":"code","23bc1889":"code","90c30feb":"code","f5342086":"code","e40d457c":"code","0369dc15":"code","4779ba92":"code","f90d5012":"code","9d4af2e7":"code","5b5d7a0b":"code","1f4a22b9":"code","a189967c":"code","341513a2":"code","60ed1118":"markdown","7dbc72f0":"markdown"},"source":{"0742cbd2":"import numpy as np\nimport pandas as pd\n\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nimport plotly_express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\n# setting default template to plotly_white for all visualizations\npio.templates.default = \"plotly_white\"\n%matplotlib inline\nimport gc\n\nfrom colorama import Fore, Back, Style\n\ny_ = Fore.YELLOW\nr_ = Fore.RED\ng_ = Fore.GREEN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA\nc_ = Fore.CYAN\nres = Style.RESET_ALL\n\nimport warnings\nwarnings.filterwarnings('ignore')","e7001a91":"!pip install python-gdcm","88e5a66b":"image_df = pd.read_csv('\/kaggle\/input\/siim-covid19-detection\/train_image_level.csv', index_col=None)\nstudy_df = pd.read_csv('\/kaggle\/input\/siim-covid19-detection\/train_study_level.csv', index_col=None)\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_colwidth', None)\nimage_df.shape, study_df.shape","da49bab8":"import os\nall_files = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        all_files.append(os.path.join(dirname, filename))","977c1cf6":"train_files = [file for file in all_files if '\/train\/' in file]\ntest_files = [file for file in all_files if '\/test\/' in file] ","23bc1889":"len(train_files),len(test_files)","90c30feb":"from pydicom import read_file\n\ndef show_image(img, figsize=None, ax=None, cmap=\"gray\"):\n    if not ax: \n        fig, ax = plt.subplots(figsize=figsize)\n    ax.imshow(img, cmap=cmap)\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n\ndef get_image(file):\n    dicom = read_file(file, stop_before_pixels=False)\n    return dicom.pixel_array    \n\ndef get_dicom(file):\n    dicom = read_file(file, stop_before_pixels=False)\n    return dicom","f5342086":"image_df","e40d457c":"def find_file(img_id):\n    imgs = [file for file in train_files if img_id in file]\n    return imgs[0]\nimage_df['img_id'] = image_df['id'].apply(lambda x: x.split('_')[0])\nimage_df['file'] = image_df['img_id'].apply(lambda x : find_file(x))","0369dc15":"study_grp = pd.melt(study_df, id_vars=list(study_df.columns)[:1], value_vars=list(study_df.columns)[1:],\n             var_name='label', value_name='value')\nstudy_grp = study_grp.loc[study_grp['value']!=0]\nlbl_map = {'Negative for Pneumonia' : 'negative', 'Typical Appearance' : 'typical',\n       'Indeterminate Appearance' : 'indeterminate', 'Atypical Appearance' : 'atypical'}\n\nstudy_grp['StudyInstanceUID'] = study_grp['id'].apply(lambda x: x.split('_')[0])\nstudy_grp['label'] = study_grp['label'].apply(lambda x: lbl_map[x])\nstudy_map = dict(zip(study_grp.StudyInstanceUID, study_grp.label))","4779ba92":"img_grp = image_df.groupby(['StudyInstanceUID'])['id'].count().reset_index()\nimg_grp","f90d5012":"image_df.head()","9d4af2e7":"image_df['class'] = image_df['StudyInstanceUID'].apply(lambda x: study_map[x])","5b5d7a0b":"image_df.head()","1f4a22b9":"from tqdm import tqdm\nimport cv2 \nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\n\ndef resize_imagev_v0(img, image_size=(512,512)):\n    img = cv2.resize(img, image_size)\n    return img\n\ndef resize_image(dicom, image_size=(512,512)):\n    img = apply_voi_lut(dicom.pixel_array, dicom)\n    if dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        img = np.amax(img) - img\n    img = img - np.min(img)\n    img = img \/ np.max(img)\n    img = (img * 255).astype(np.uint8)    \n    img = cv2.resize(img, image_size)   \n    return img\n\nprint('Resizing train Images')\nBASE_PATH = '\/kaggle\/out_dir\/train'\nos.makedirs(BASE_PATH, exist_ok=True)\nfor lbl in list(image_df['class'].unique()):\n    os.makedirs(BASE_PATH + '\/' + lbl, exist_ok=True)\n    \ntrn_files_dict = image_df[['img_id','file','StudyInstanceUID','class']].set_index('img_id').T.to_dict()\nfor iid, rec in tqdm(trn_files_dict.items()):\n    out_file = BASE_PATH + '\/' + rec['class'] + '\/' + iid + '.jpg'\n    img = resize_image(get_dicom(rec['file']))\n    cv2.imwrite(out_file, img)\n","a189967c":"print('Resizing test Images')\nTEST_PATH = '\/kaggle\/out_dir\/test'\nos.makedirs(TEST_PATH, exist_ok=True)\nfor file in tqdm(test_files):\n    out_file = TEST_PATH + '\/' + file.split('\/')[-1].split('.')[0] + '.jpg'\n    img = resize_image(get_dicom(file))\n    cv2.imwrite(out_file, img)","341513a2":"!tar -zcf train.tar.gz -C \"\/kaggle\/out_dir\/train\/\" .\n!tar -zcf test.tar.gz -C \"\/kaggle\/out_dir\/test\/\" .","60ed1118":"<link href=\"https:\/\/fonts.googleapis.com\/css?family=Merriweather:300,300i,400,400i,700,700i,900,900i\" rel='stylesheet' >\n<link href=\"https:\/\/fonts.googleapis.com\/css?family=Source+Sans+Pro:300,300i,400,400i,700,700i\" rel='stylesheet' >\n<link href='http:\/\/fonts.googleapis.com\/css?family=Source+Code+Pro:300,400' rel='stylesheet' >\n<style>\n@font-face {\n    font-family: \"Computer Modern\";\n    src: url('http:\/\/mirrors.ctan.org\/fonts\/cm-unicode\/fonts\/otf\/cmunss.otf');\n}\n<\/style>","7dbc72f0":"> Resize images for classification task\n\nReferences : \n\n- [https:\/\/www.kaggle.com\/xhlulu\/siim-covid-19-convert-to-jpg-256px](https:\/\/www.kaggle.com\/xhlulu\/siim-covid-19-convert-to-jpg-256px)\n- [https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way](https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way)\n\ntrain.tar.gz consists of resized training images under respective label folders\n  - negative\n  - typical\n  - atypical\n  - indeterminate\n  "}}