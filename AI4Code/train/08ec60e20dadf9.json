{"cell_type":{"7955c490":"code","61bb1f52":"code","08264fe8":"code","d73c594b":"code","10416070":"code","2cf2ff07":"code","f77182ed":"code","6fd36253":"code","d408f176":"code","ec927f9d":"code","813c0122":"code","71362246":"code","f3096189":"code","502c57c3":"code","345317bd":"code","47c2bf26":"code","8da6bf65":"code","57f0083e":"code","2e820931":"code","918c121d":"code","f9317d82":"code","4c7e3747":"code","c20f068e":"code","bdd7cd4d":"code","5031d225":"code","20e64198":"code","1af909e1":"code","e4c44a8f":"code","372beacd":"code","0a83387b":"code","dcb67789":"code","bde74ce0":"code","17915550":"code","673f6557":"code","882bc236":"code","7becafb3":"code","cce10565":"code","4e618651":"code","cb25bebd":"code","8f1e2cc5":"code","6344a941":"code","2c91fa93":"markdown"},"source":{"7955c490":"import sys\nsys.path.append('..\/input\/iterative-stratification\/iterative-stratification-master')\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold","61bb1f52":"import numpy as np\nimport random\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport copy\nimport seaborn as sns\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import log_loss\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\n\nimport warnings\nwarnings.filterwarnings('ignore')","08264fe8":"from sklearn.preprocessing import QuantileTransformer\n","d73c594b":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets_scored = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntrain_targets_nonscored = pd.read_csv('..\/input\/lish-moa\/train_targets_nonscored.csv')\n\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\nsample_submission = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')","10416070":"GENES = [col for col in train_features.columns if col.startswith('g-')]\nCELLS = [col for col in train_features.columns if col.startswith('c-')]","2cf2ff07":"gnum = train_features[GENES].shape[1]\ngraphs = []\n\nfor i in range(0, gnum -1 , 7):\n    #for least display.... \n    if i >= 3:\n        break\n    idxs = list(np.array([0, 1, 2, 3, 4, 5, 6]) + i)\n    \n\n    fig, axs = plt.subplots(1, 7, sharey=True)\n    for k, item in enumerate(idxs):\n        if item >=771:\n            break\n        graph = sns.distplot(train_features[GENES].values[:,item], ax=axs[k])\n        graph.set_title(f\"g-{item}\")\n        graphs.append(graph)","f77182ed":"cnum = train_features[CELLS].shape[1]\ngraphs = []\n\nfor i in range(0, cnum -1 , 7):\n    #for least display.... \n    if i >= 3:\n        break\n    idxs = list(np.array([0, 1, 2, 3, 4, 5, 6]) + i)\n    \n\n    fig, axs = plt.subplots(1, 7, sharey=True)\n    for k, item in enumerate(idxs):\n        if item >=100:\n            break\n        graph = sns.distplot(train_features[CELLS].values[:,item], ax=axs[k])\n        graph.set_title(f\"c-{item}\")\n        graphs.append(graph)","6fd36253":"gnum = test_features[GENES].shape[1]\ngraphs = []\n\nfor i in range(0, gnum -1 , 7):\n    #for least display.... \n    if i >= 3:\n        break\n    idxs = list(np.array([0, 1, 2, 3, 4, 5, 6]) + i)\n    \n\n    fig, axs = plt.subplots(1, 7, sharey=True)\n    for k, item in enumerate(idxs):\n        if item >=771:\n            break\n        graph = sns.distplot(test_features[GENES].values[:,item], ax=axs[k])\n        graph.set_title(f\"g-{item}\")\n        graphs.append(graph)","d408f176":"cnum = test_features[CELLS].shape[1]\ngraphs = []\n\nfor i in range(0, cnum -1 , 7):\n    #for least display.... \n    if i >= 3:\n        break\n    idxs = list(np.array([0, 1, 2, 3, 4, 5, 6]) + i)\n    \n\n    fig, axs = plt.subplots(1, 7, sharey=True)\n    for k, item in enumerate(idxs):\n        if item >=100:\n            break\n        graph = sns.distplot(test_features[CELLS].values[:,item], ax=axs[k])\n        graph.set_title(f\"c-{item}\")\n        graphs.append(graph)","ec927f9d":"#RankGauss\n\nfor col in (GENES + CELLS):\n\n    transformer = QuantileTransformer(n_quantiles=100,random_state=0, output_distribution=\"normal\")\n    vec_len = len(train_features[col].values)\n    vec_len_test = len(test_features[col].values)\n    raw_vec = train_features[col].values.reshape(vec_len, 1)\n    transformer.fit(raw_vec)\n\n    train_features[col] = transformer.transform(raw_vec).reshape(1, vec_len)[0]\n    test_features[col] = transformer.transform(test_features[col].values.reshape(vec_len_test, 1)).reshape(1, vec_len_test)[0]","813c0122":"def seed_everything(seed=1903):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    \nseed_everything(seed=1903)","71362246":"gnum = train_features[GENES].shape[1]\ngraphs = []\n\nfor i in range(0, gnum -1 , 7):\n    #for least display.... \n    if i >= 3:\n        break\n    idxs = list(np.array([0, 1, 2, 3, 4, 5, 6]) + i)\n    \n\n    fig, axs = plt.subplots(1, 7, sharey=True)\n    for k, item in enumerate(idxs):\n        if item >=771:\n            break\n        graph = sns.distplot(train_features[GENES].values[:,item], ax=axs[k])\n        graph.set_title(f\"g-{item}\")\n        graphs.append(graph)","f3096189":"cnum = train_features[CELLS].shape[1]\ngraphs = []\n\nfor i in range(0, cnum -1 , 7):\n    #for least display.... \n    if i >= 3:\n        break\n    idxs = list(np.array([0, 1, 2, 3, 4, 5, 6]) + i)\n    \n\n    fig, axs = plt.subplots(1, 7, sharey=True)\n    for k, item in enumerate(idxs):\n        if item >=100:\n            break\n        graph = sns.distplot(train_features[CELLS].values[:,item], ax=axs[k])\n        graph.set_title(f\"c-{item}\")\n        graphs.append(graph)","502c57c3":"gnum = test_features[GENES].shape[1]\ngraphs = []\n\nfor i in range(0, gnum -1 , 7):\n    #for least display.... \n    if i >= 3:\n        break\n    idxs = list(np.array([0, 1, 2, 3, 4, 5, 6]) + i)\n    \n\n    fig, axs = plt.subplots(1, 7, sharey=True)\n    for k, item in enumerate(idxs):\n        if item >=771:\n            break\n        graph = sns.distplot(test_features[GENES].values[:,item], ax=axs[k])\n        graph.set_title(f\"g-{item}\")\n        graphs.append(graph)","345317bd":"cnum = test_features[CELLS].shape[1]\ngraphs = []\n\nfor i in range(0, cnum -1 , 7):\n    #for least display.... \n    if i >= 3:\n        break\n    idxs = list(np.array([0, 1, 2, 3, 4, 5, 6]) + i)\n    \n\n    fig, axs = plt.subplots(1, 7, sharey=True)\n    for k, item in enumerate(idxs):\n        if item >=100:\n            break\n        graph = sns.distplot(test_features[CELLS].values[:,item], ax=axs[k])\n        graph.set_title(f\"c-{item}\")\n        graphs.append(graph)","47c2bf26":"# GENES\nn_comp = 600  #<--Update\n\ndata = pd.concat([pd.DataFrame(train_features[GENES]), pd.DataFrame(test_features[GENES])])\ndata_PCA = PCA(n_components=n_comp, random_state=42).fit(data[GENES][:train_features.shape[0]])\ndata2 = (data_PCA.transform(data[GENES]))\n\ntrain2 = data2[:train_features.shape[0]]; test2 = data2[-test_features.shape[0]:]\n\ntrain2 = pd.DataFrame(train2, columns=[f'pca_G-{i}' for i in range(n_comp)])\ntest2 = pd.DataFrame(test2, columns=[f'pca_G-{i}' for i in range(n_comp)])\n\n# drop_cols = [f'c-{i}' for i in range(n_comp,len(GENES))]\ntrain_features = pd.concat((train_features, train2), axis=1)\ntest_features = pd.concat((test_features, test2), axis=1)","8da6bf65":"#CELLS\nn_comp = 50  #<--Update\n\ndata = pd.concat([pd.DataFrame(train_features[CELLS]), pd.DataFrame(test_features[CELLS])])\ndata_PCA = (PCA(n_components=n_comp, random_state=42).fit(data[CELLS][:train_features.shape[0]]))\ndata2 = (data_PCA.transform(data[CELLS]))\n\ntrain2 = data2[:train_features.shape[0]]; test2 = data2[-test_features.shape[0]:]\n\ntrain2 = pd.DataFrame(train2, columns=[f'pca_C-{i}' for i in range(n_comp)])\ntest2 = pd.DataFrame(test2, columns=[f'pca_C-{i}' for i in range(n_comp)])\n\n# drop_cols = [f'c-{i}' for i in range(n_comp,len(CELLS))]\ntrain_features = pd.concat((train_features, train2), axis=1)\ntest_features = pd.concat((test_features, test2), axis=1)","57f0083e":"from sklearn.feature_selection import VarianceThreshold\n\n\nvar_thresh = VarianceThreshold(0.8)  #<-- Update\ndata = train_features.append(test_features)\ndata_transformed_var = var_thresh.fit(data.iloc[:, 4:][:train_features.shape[0]])\ndata_transformed = data_transformed_var.transform(data.iloc[:, 4:])\ntrain_features_transformed = data_transformed[ : train_features.shape[0]]\ntest_features_transformed = data_transformed[-test_features.shape[0] : ]\n\n\ntrain_features = pd.DataFrame(train_features[['sig_id','cp_type','cp_time','cp_dose']].values.reshape(-1, 4),\\\n                              columns=['sig_id','cp_type','cp_time','cp_dose'])\n\ntrain_features = pd.concat([train_features, pd.DataFrame(train_features_transformed)], axis=1)\n\n\ntest_features = pd.DataFrame(test_features[['sig_id','cp_type','cp_time','cp_dose']].values.reshape(-1, 4),\\\n                             columns=['sig_id','cp_type','cp_time','cp_dose'])\n\ntest_features = pd.concat([test_features, pd.DataFrame(test_features_transformed)], axis=1)\n\ntrain_features.shape","2e820931":"def fe_stats(train, test):\n    \n    features_g = list(train.columns[4:776])\n    features_c = list(train.columns[776:876])\n    \n    for df in train, test:\n        df['g_sum'] = df[features_g].sum(axis = 1)\n        df['g_mean'] = df[features_g].mean(axis = 1)\n        df['g_std'] = df[features_g].std(axis = 1)\n        df['g_kurt'] = df[features_g].kurtosis(axis = 1)\n        df['g_skew'] = df[features_g].skew(axis = 1)\n        df['c_sum'] = df[features_c].sum(axis = 1)\n        df['c_mean'] = df[features_c].mean(axis = 1)\n        df['c_std'] = df[features_c].std(axis = 1)\n        df['c_kurt'] = df[features_c].kurtosis(axis = 1)\n        df['c_skew'] = df[features_c].skew(axis = 1)\n        df['gc_sum'] = df[features_g + features_c].sum(axis = 1)\n        df['gc_mean'] = df[features_g + features_c].mean(axis = 1)\n        df['gc_std'] = df[features_g + features_c].std(axis = 1)\n        df['gc_kurt'] = df[features_g + features_c].kurtosis(axis = 1)\n        df['gc_skew'] = df[features_g + features_c].skew(axis = 1)\n        \n    return train, test\n\ntrain_features,test_features=fe_stats(train_features,test_features)","918c121d":"train = train_features.merge(train_targets_scored, on='sig_id')\ntrain = train[train['cp_type']!='ctl_vehicle'].reset_index(drop=True)\ntest = test_features[test_features['cp_type']!='ctl_vehicle'].reset_index(drop=True)\ntarget = train[train_targets_scored.columns]\ntrain = train.drop('cp_type', axis=1)\ntest = test.drop('cp_type', axis=1)","f9317d82":"train_non_scored = train_features.merge(train_targets_nonscored, on='sig_id')\ntrain_non_scored = train_non_scored[train_non_scored['cp_type']!='ctl_vehicle'].reset_index(drop=True)\ntest = test_features[test_features['cp_type']!='ctl_vehicle'].reset_index(drop=True)\n\ntarget_non_scored = train_non_scored[train_targets_nonscored.columns]\n\ntrain_non_scored = train_non_scored.drop('cp_type', axis=1)\ntest = test.drop('cp_type', axis=1)\n","4c7e3747":"target_cols = target.drop('sig_id', axis=1).columns.values.tolist()\ntarget_non_scored_cols = train_targets_nonscored.drop('sig_id', axis=1).columns.values.tolist()","c20f068e":"folds = train.copy()\n\nmskf = MultilabelStratifiedKFold(n_splits=7)\n\nfor f, (t_idx, v_idx) in enumerate(mskf.split(X=train, y=target)):\n    folds.loc[v_idx, 'kfold'] = int(f)\n\nfolds['kfold'] = folds['kfold'].astype(int)","bdd7cd4d":"folds_non_scored = train_non_scored.copy()\n\nmskf = MultilabelStratifiedKFold(n_splits=7)\n\nfor f, (t_idx, v_idx) in enumerate(mskf.split(X=train, y=target)):\n    folds_non_scored.loc[v_idx, 'kfold'] = int(f)\n\nfolds_non_scored['kfold'] = folds_non_scored['kfold'].astype(int)","5031d225":"class MoADataset:\n    def __init__(self, features, targets):\n        self.features = features\n        self.targets = targets\n        \n    def __len__(self):\n        return (self.features.shape[0])\n    \n    def __getitem__(self, idx):\n        dct = {\n            'x' : torch.tensor(self.features[idx, :], dtype=torch.float),\n            'y' : torch.tensor(self.targets[idx, :], dtype=torch.float)            \n        }\n        return dct\n    \nclass TestDataset:\n    def __init__(self, features):\n        self.features = features\n        \n    def __len__(self):\n        return (self.features.shape[0])\n    \n    def __getitem__(self, idx):\n        dct = {\n            'x' : torch.tensor(self.features[idx, :], dtype=torch.float)\n        }\n        return dct","20e64198":"def train_fn(model, optimizer, scheduler, loss_fn, dataloader, device):\n    model.train()\n    final_loss = 0\n    \n    for data in dataloader:\n        optimizer.zero_grad()\n        inputs, targets = data['x'].to(device), data['y'].to(device)\n        #print(inputs.shape)\n        outputs = model(inputs)\n        loss = loss_fn(outputs, targets)\n        loss.backward()\n        optimizer.step()\n        scheduler.step()\n        \n        final_loss += loss.item()\n        \n    final_loss \/= len(dataloader)\n    \n    return final_loss\n\n\ndef valid_fn(model, loss_fn, dataloader, device):\n    model.eval()\n    final_loss = 0\n    valid_preds = []\n    \n    for data in dataloader:\n        inputs, targets = data['x'].to(device), data['y'].to(device)\n        outputs = model(inputs)\n        loss = loss_fn(outputs, targets)\n        \n        final_loss += loss.item()\n        valid_preds.append(outputs.sigmoid().detach().cpu().numpy())\n        \n    final_loss \/= len(dataloader)\n    valid_preds = np.concatenate(valid_preds)\n    \n    return final_loss, valid_preds\n\ndef inference_fn(model, dataloader, device):\n    model.eval()\n    preds = []\n    \n    for data in dataloader:\n        inputs = data['x'].to(device)\n\n        with torch.no_grad():\n            outputs = model(inputs)\n        \n        preds.append(outputs.sigmoid().detach().cpu().numpy())\n        \n    preds = np.concatenate(preds)\n    \n    return preds\n   ","1af909e1":"class Model(nn.Module):\n    def __init__(self, num_features, num_targets, hidden_size):\n        super(Model, self).__init__()\n        self.batch_norm1 = nn.BatchNorm1d(num_features)\n        self.dropout1 = nn.Dropout(0.2)\n        self.dense1 = nn.utils.weight_norm(nn.Linear(num_features, hidden_size))\n        \n        self.batch_norm2 = nn.BatchNorm1d(hidden_size)\n        self.dropout2 = nn.Dropout(0.3)\n        self.dense2 = nn.utils.weight_norm(nn.Linear(hidden_size, hidden_size))\n        \n        self.batch_norm3 = nn.BatchNorm1d(hidden_size)\n        self.dropout3 = nn.Dropout(0.25)\n        self.dense3 = nn.utils.weight_norm(nn.Linear(hidden_size, num_targets))\n    \n    def forward(self, x):\n        x = self.batch_norm1(x)\n        x = self.dropout1(x)\n        x = F.relu(self.dense1(x))\n        \n        x = self.batch_norm2(x)\n        x = self.dropout2(x)\n        x = F.relu(self.dense2(x))\n        \n        x = self.batch_norm3(x)\n        x = self.dropout3(x)\n        x = self.dense3(x)\n        \n        return x\n    \nimport torch\nfrom torch.nn.modules.loss import _WeightedLoss\nimport torch.nn.functional as F\n\nclass SmoothBCEwLogits(_WeightedLoss):\n    def __init__(self, weight=None, reduction='mean', smoothing=0.0):\n        super().__init__(weight=weight, reduction=reduction)\n        self.smoothing = smoothing\n        self.weight = weight\n        self.reduction = reduction\n\n    @staticmethod\n    def _smooth(targets:torch.Tensor, n_labels:int, smoothing=0.0):\n        assert 0 <= smoothing < 1\n        with torch.no_grad():\n            targets = targets * (1.0 - smoothing) + 0.5 * smoothing\n        return targets\n\n    def forward(self, inputs, targets):\n        targets = SmoothBCEwLogits._smooth(targets, inputs.size(-1),\n            self.smoothing)\n        loss = F.binary_cross_entropy_with_logits(inputs, targets,self.weight)\n\n        if  self.reduction == 'sum':\n            loss = loss.sum()\n        elif  self.reduction == 'mean':\n            loss = loss.mean()\n\n        return loss    ","e4c44a8f":"def process_data(data):\n    \n    data = pd.get_dummies(data, columns=['cp_time','cp_dose'])\n#     data.loc[:, 'cp_time'] = data.loc[:, 'cp_time'].map({24: 0, 48: 1, 72: 2})\n#     data.loc[:, 'cp_dose'] = data.loc[:, 'cp_dose'].map({'D1': 0, 'D2': 1})\n\n# --------------------- Normalize ---------------------\n#     for col in GENES:\n#         data[col] = (data[col]-np.mean(data[col])) \/ (np.std(data[col]))\n    \n#     for col in CELLS:\n#         data[col] = (data[col]-np.mean(data[col])) \/ (np.std(data[col]))\n    \n#--------------------- Removing Skewness ---------------------\n#     for col in GENES + CELLS:\n#         if(abs(data[col].skew()) > 0.75):\n            \n#             if(data[col].skew() < 0): # neg-skewness\n#                 data[col] = data[col].max() - data[col] + 1\n#                 data[col] = np.sqrt(data[col])\n            \n#             else:\n#                 data[col] = np.sqrt(data[col])\n    \n    return data","372beacd":"feature_cols = [c for c in process_data(folds).columns if c not in target_cols]\nfeature_cols = [c for c in feature_cols if c not in ['kfold','sig_id']]\nlen(feature_cols)","0a83387b":"# HyperParameters\n\nDEVICE = ('cuda' if torch.cuda.is_available() else 'cpu')\nEPOCHS = 100\nBATCH_SIZE = 128\nLEARNING_RATE = 1e-3\nWEIGHT_DECAY = 1e-5\nNFOLDS = 7\nEARLY_STOPPING_STEPS = 10\nEARLY_STOP = True\n\nnum_features=len(feature_cols)\nnum_targets=len(target_cols)\nnum_non_scored_targets=len(target_non_scored_cols)\n\nhidden_size=2048","dcb67789":"import copy","bde74ce0":"def run_training(fold, seed, pretrain=False):\n    \n    seed_everything(seed)\n    \n    train = process_data(folds)\n    test_ = process_data(test)\n    \n    trn_idx = train[train['kfold'] != fold].index\n    val_idx = train[train['kfold'] == fold].index\n    \n    train_df = train[train['kfold'] != fold].reset_index(drop=True)\n    valid_df = train[train['kfold'] == fold].reset_index(drop=True)\n    \n    x_train, y_train  = train_df[feature_cols].values, train_df[target_cols].values\n    x_valid, y_valid =  valid_df[feature_cols].values, valid_df[target_cols].values\n    \n    train_dataset = MoADataset(x_train, y_train)\n    valid_dataset = MoADataset(x_valid, y_valid)\n    trainloader = torch.utils.data.DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n    validloader = torch.utils.data.DataLoader(valid_dataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n    if pretrain:\n        model = Model(\n            num_features=num_features,\n            num_targets=num_non_scored_targets, # non scored targets\n            hidden_size=hidden_size,\n        )\n        \n        # Load pretrained model\n        model.load_state_dict(torch.load(f\"seed{seed}FOLD{fold}_non_scored.pth\"))\n        \n        # Reinitialize last layers\n        model.batch_norm3 = nn.BatchNorm1d(hidden_size)\n        model.dropout3 = nn.Dropout(0.5)\n        model.dense3 = nn.utils.weight_norm(nn.Linear(hidden_size, num_targets))\n        \n    else:\n        model = Model(\n            num_features=num_features,\n            num_targets=num_targets,\n            hidden_size=hidden_size,\n        )\n    \n    model.to(DEVICE)\n    \n    optimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=WEIGHT_DECAY)\n    if pretrain:\n        scheduler = optim.lr_scheduler.OneCycleLR(optimizer=optimizer, pct_start=0.1, div_factor=1e3, \n                                              max_lr=1e-3, epochs=EPOCHS, steps_per_epoch=len(trainloader))\n#         scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer=optimizer, mode='min', factor=0.5, patience=10, \n#                                                          threshold=0.0001, threshold_mode='rel', cooldown=0, min_lr=0, eps=1e-08, verbose=False)\n        epochs = 100\n    else:\n        scheduler = optim.lr_scheduler.OneCycleLR(optimizer=optimizer, pct_start=0.1, div_factor=1e3, \n                                              max_lr=1e-2, epochs=EPOCHS, steps_per_epoch=len(trainloader))\n        epochs = copy.copy(EPOCHS)\n    \n    loss_fn = nn.BCEWithLogitsLoss()\n    loss_tr = SmoothBCEwLogits(smoothing =0.001)\n    \n    early_stopping_steps = EARLY_STOPPING_STEPS\n    early_step = 0\n    \n    oof = np.zeros((len(train), target.iloc[:, 1:].shape[1]))\n    best_loss = np.inf\n    print(epochs)\n    for epoch in range(epochs):\n        \n        train_loss = train_fn(model, optimizer,scheduler, loss_tr, trainloader, DEVICE)\n        print(f\"FOLD: {fold}, EPOCH: {epoch}, train_loss: {train_loss}\")\n        valid_loss, valid_preds = valid_fn(model, loss_fn, validloader, DEVICE)\n        print(f\"FOLD: {fold}, EPOCH: {epoch}, valid_loss: {valid_loss}\")\n        \n        if valid_loss < best_loss:\n            \n            best_loss = valid_loss\n            oof[val_idx] = valid_preds\n            torch.save(model.state_dict(), f\"seed{seed}FOLD{fold}_.pth\")\n        \n        elif(EARLY_STOP == True):\n            \n            early_step += 1\n            if (early_step >= early_stopping_steps):\n                break\n            \n    \n    #--------------------- PREDICTION---------------------\n    x_test = test_[feature_cols].values\n    testdataset = TestDataset(x_test)\n    testloader = torch.utils.data.DataLoader(testdataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n    model = Model(\n        num_features=num_features,\n        num_targets=num_targets,\n        hidden_size=hidden_size,\n    )\n    \n    model.load_state_dict(torch.load(f\"seed{seed}FOLD{fold}_.pth\"))\n    model.to(DEVICE)\n    \n    predictions = np.zeros((len(test_), target.iloc[:, 1:].shape[1]))\n    predictions = inference_fn(model, testloader, DEVICE)\n    \n    return oof, predictions","17915550":"def run_training_non_scored(fold, seed):\n    \n    seed_everything(seed)\n    \n    train = process_data(folds_non_scored)\n    test_ = process_data(test)\n    \n    trn_idx = train[train['kfold'] != fold].index\n    val_idx = train[train['kfold'] == fold].index\n    \n    train_df = train[train['kfold'] != fold].reset_index(drop=True)\n    valid_df = train[train['kfold'] == fold].reset_index(drop=True)\n    \n    x_train, y_train  = train_df[feature_cols].values, train_df[target_non_scored_cols].values\n    x_valid, y_valid =  valid_df[feature_cols].values, valid_df[target_non_scored_cols].values\n    \n    train_dataset = MoADataset(x_train, y_train)\n    valid_dataset = MoADataset(x_valid, y_valid)\n    trainloader = torch.utils.data.DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n    validloader = torch.utils.data.DataLoader(valid_dataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n    model = Model(\n        num_features=num_features,\n        num_targets=num_non_scored_targets,\n        hidden_size=hidden_size,\n    )\n    \n    model.to(DEVICE)\n    \n    optimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=WEIGHT_DECAY)\n    scheduler = optim.lr_scheduler.OneCycleLR(optimizer=optimizer, pct_start=0.1, div_factor=1e3, \n                                              max_lr=1e-4, epochs=EPOCHS, steps_per_epoch=len(trainloader))\n    \n    loss_fn = nn.BCEWithLogitsLoss()\n    loss_tr = SmoothBCEwLogits(smoothing =0.001)\n\n    early_stopping_steps = EARLY_STOPPING_STEPS\n    early_step = 0\n    \n    oof = np.zeros((len(train), target_non_scored.iloc[:, 1:].shape[1]))\n    best_loss = np.inf\n    \n    for epoch in range(10):\n        \n        train_loss = train_fn(model, optimizer,scheduler, loss_tr, trainloader, DEVICE)\n        print(f\"FOLD: {fold}, EPOCH: {epoch}, train_loss: {train_loss}\")\n        valid_loss, valid_preds = valid_fn(model, loss_fn, validloader, DEVICE)\n        print(f\"FOLD: {fold}, EPOCH: {epoch}, valid_loss: {valid_loss}\")\n        \n        if valid_loss < best_loss:\n            \n            best_loss = valid_loss\n            oof[val_idx] = valid_preds\n            \n            torch.save(model.state_dict(), f\"seed{seed}FOLD{fold}_non_scored.pth\")\n        \n        elif(EARLY_STOP == True):\n            \n            early_step += 1\n            if (early_step >= early_stopping_steps):\n                break\n            \n    \n    #--------------------- PREDICTION---------------------\n    x_test = test_[feature_cols].values\n    testdataset = TestDataset(x_test)\n    testloader = torch.utils.data.DataLoader(testdataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n    model = Model(\n        num_features=num_features,\n        num_targets=num_non_scored_targets,\n        hidden_size=hidden_size,\n    )\n    model.load_state_dict(torch.load(f\"seed{seed}FOLD{fold}_non_scored.pth\"))\n    model.to(DEVICE)\n    \n    predictions = np.zeros((len(test_), target_non_scored.iloc[:, 1:].shape[1]))\n    predictions = inference_fn(model, testloader, DEVICE)\n    \n    return oof, predictions","673f6557":"# DEVICE = 'cuda'\n# _ =run_training_non_scored(0, 1903)","882bc236":"# DEVICE = 'cuda'\n# run_training(0, 1903)\n\n# FOLD: 0, EPOCH: 0, train_loss: 0.46244512059960236\n# FOLD: 0, EPOCH: 0, valid_loss: 0.0240093282610178\n# FOLD: 0, EPOCH: 1, train_loss: 0.02092809342861581\n# FOLD: 0, EPOCH: 1, valid_loss: 0.018888159692287444\n# FOLD: 0, EPOCH: 2, train_loss: 0.018816922126071795\n# FOLD: 0, EPOCH: 2, valid_loss: 0.01800884075462818\n# FOLD: 0, EPOCH: 3, train_loss: 0.017810757183248087\n# FOLD: 0, EPOCH: 3, valid_loss: 0.01769792936742306\n# FOLD: 0, EPOCH: 4, train_loss: 0.017475304117768396\n# FOLD: 0, EPOCH: 4, valid_loss: 0.01728056639432907\n# FOLD: 0, EPOCH: 5, train_loss: 0.01740609006132601\n# FOLD: 0, EPOCH: 5, valid_loss: 0.01737230896949768\n# FOLD: 0, EPOCH: 6, train_loss: 0.01758593175762973\n# FOLD: 0, EPOCH: 6, valid_loss: 0.01755769729614258\n# FOLD: 0, EPOCH: 7, train_loss: 0.01760850864506903\n# FOLD: 0, EPOCH: 7, valid_loss: 0.017486654482781888\n# FOLD: 0, EPOCH: 8, train_loss: 0.017644745056979917\n# FOLD: 0, EPOCH: 8, valid_loss: 0.017575139924883843\n# FOLD: 0, EPOCH: 9, train_loss: 0.017639228054100557\n# FOLD: 0, EPOCH: 9, valid_loss: 0.017470576576888563\n# FOLD: 0, EPOCH: 10, train_loss: 0.01757889861861865\n# FOLD: 0, EPOCH: 10, valid_loss: 0.017275790348649026\n# FOLD: 0, EPOCH: 11, train_loss: 0.017565052956342697\n# FOLD: 0, EPOCH: 11, valid_loss: 0.017419889569282532\n# FOLD: 0, EPOCH: 12, train_loss: 0.017465318185689093\n# FOLD: 0, EPOCH: 12, valid_loss: 0.017237151339650154\n# FOLD: 0, EPOCH: 13, train_loss: 0.01740128183927463\n# FOLD: 0, EPOCH: 13, valid_loss: 0.017149463519454\n# FOLD: 0, EPOCH: 14, train_loss: 0.01731707109455146\n# FOLD: 0, EPOCH: 14, valid_loss: 0.01704262338578701\n# FOLD: 0, EPOCH: 15, train_loss: 0.01713968474468609\n# FOLD: 0, EPOCH: 15, valid_loss: 0.016989846974611283\n# FOLD: 0, EPOCH: 16, train_loss: nan\n# FOLD: 0, EPOCH: 16, valid_loss: nan\n# FOLD: 0, EPOCH: 17, train_loss: nan\n# FOLD: 0, EPOCH: 17, valid_loss: nan\n# FOLD: 0, EPOCH: 18, train_loss: nan\n# FOLD: 0, EPOCH: 18, valid_loss: nan\n# FOLD: 0, EPOCH: 19, train_loss: nan\n# FOLD: 0, EPOCH: 19, valid_loss: nan","7becafb3":"# DEVICE = 'cuda'\n# _ = run_training(0, 1903, pretrain=True)","cce10565":"def run_k_fold(NFOLDS, seed, pretrain=False):\n    oof = np.zeros((len(train), len(target_cols)))\n    predictions = np.zeros((len(test), len(target_cols)))\n    \n    for fold in range(NFOLDS):\n        oof_, pred_ = run_training(fold, seed, pretrain)\n        \n        predictions += pred_ \/ NFOLDS\n        oof += oof_\n        \n    return oof, predictions","4e618651":"def run_k_fold_none_scored(NFOLDS, seed):\n    oof = np.zeros((len(train), len(target_non_scored_cols)))\n    predictions = np.zeros((len(test), len(target_non_scored_cols)))\n    \n    for fold in range(NFOLDS):\n        oof_, pred_ = run_training_non_scored(fold, seed)\n        \n        predictions += pred_ \/ NFOLDS\n        oof += oof_\n        \n    return oof, predictions","cb25bebd":"# Averaging on multiple SEEDS\n\nSEED = [1903, 1881]\noof = np.zeros((len(train), len(target_cols)))\npredictions = np.zeros((len(test), len(target_cols)))\n\n\nfor seed in SEED:\n    run_k_fold_none_scored(NFOLDS, seed)   \n    oof_, predictions_ = run_k_fold(NFOLDS, seed, pretrain=True)\n    oof += oof_ \/ len(SEED)\n    predictions += predictions_ \/ len(SEED)\n\ntrain[target_cols] = oof\ntest[target_cols] = predictions","8f1e2cc5":"valid_results = train_targets_scored.drop(columns=target_cols).merge(train[['sig_id']+target_cols], on='sig_id', how='left').fillna(0)\n\n\ny_true = train_targets_scored[target_cols].values\ny_pred = valid_results[target_cols].values\n\nscore = 0\nfor i in range(len(target_cols)):\n    score_ = log_loss(y_true[:, i], y_pred[:, i])\n    score += score_ \/ target.shape[1]\n    \nprint(\"CV log_loss: \", score)","6344a941":"sub = sample_submission.drop(columns=target_cols).merge(test[['sig_id']+target_cols], on='sig_id', how='left').fillna(0)\nsub.to_csv('submission.csv', index=False)","2c91fa93":"## This kerenl was copied from [kubi-Pytorch | MoA transfer](https:\/\/www.kaggle.com\/chriscc\/kubi-pytorch-moa-transfer)\n## Label smoothing ,PCA and RankGauss were added to the kernel"}}