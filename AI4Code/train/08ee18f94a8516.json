{"cell_type":{"ae64f5ac":"code","a351a8af":"code","0d4f9031":"code","8f46128d":"code","534a9f0f":"code","3df147a8":"code","9c74cbd9":"code","1421bfbc":"code","6ed0eab8":"code","52f31892":"code","1ee7e62d":"code","dc2aa48e":"code","fae11bc9":"code","a1f0b6e3":"code","6b31a797":"code","dc62ed24":"code","86bdef30":"code","f07ac0c7":"code","1fb98ae8":"code","5bd56131":"markdown","ed1a4ad1":"markdown","00205996":"markdown","e752f0ef":"markdown","66a589bf":"markdown","3d9ffa1d":"markdown","5fa430cb":"markdown","4824c811":"markdown","d0453e2e":"markdown","8a087293":"markdown","e93d2f69":"markdown","3ae8071d":"markdown","b4084ede":"markdown","e27654e8":"markdown","875a7740":"markdown"},"source":{"ae64f5ac":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport xgboost as xgb\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\n\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\n# for ignoring warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)","a351a8af":"df = pd.read_csv('..\/input\/commonlitreadabilityprize\/train.csv')\ndf.head()","0d4f9031":"import re\nimport string\nimport nltk\n# nltk.download('stopwords')\n# nltk.download('punkt')\n# nltk.download('wordnet')\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import PorterStemmer\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize\n\n\ndef preprocessing_text(text):\n    text = text.lower()\n    text = re.sub(r'd+','', text)\n    # remove punctuation\n    text = text.translate(str.maketrans('','',string.punctuation))\n    # removing spaces\n    text = text.strip()\n    # remove stopwords\n    stop_words = set(stopwords.words('english'))\n    word_tokens = word_tokenize(text)\n    filtered_text = [word for word in word_tokens if word not in stop_words]\n    text = ' '.join(str(elem) for elem in filtered_text)\n    # steaming\n    stemmer = PorterStemmer()\n    token_text = word_tokenize(text)\n    for word in token_text:\n        # print(stemmer.stem(word))\n        text = text +' '+stemmer.stem(word)\n    # lemmatization\n    lemmatizer = WordNetLemmatizer()\n    input_text = word_tokenize(text)\n    for word in input_text:\n        text = text + '' + lemmatizer.lemmatize(word)\n    return text","8f46128d":"df['process_text'] = ''\nfor i in range(0,len(df)):\n    df['process_text'][i] = preprocessing_text(df.excerpt[i])","534a9f0f":"df.head()","3df147a8":"X = df.process_text\ny = df.target\n\n# splitting dataset for training and testing\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.05, shuffle=False)","9c74cbd9":"# Initialize the `tfidf_vectorizer` \ntfidf_vectorizer = TfidfVectorizer() \n\n# Fit and transform the training data \ntfidf_train = tfidf_vectorizer.fit_transform(X_train) \n\n# Transform the test set \ntfidf_test = tfidf_vectorizer.transform(X_test)","1421bfbc":"tfidf_train.shape, X_train.shape, tfidf_test.shape, X_test.shape","6ed0eab8":"reg = LinearRegression().fit(tfidf_train, y_train)\ny_pred = reg.predict(tfidf_test)","52f31892":"rmse = sqrt(mean_squared_error(y_test, y_pred))\nprint('Root mean Square is :',rmse)","1ee7e62d":"rf_reg = RandomForestRegressor()\nrf_reg.fit(tfidf_train, y_train)\ny_pred = rf_reg.predict(tfidf_test)\nrmse = sqrt(mean_squared_error(y_test, y_pred))\nprint('Root mean Square is :',rmse)","dc2aa48e":"dt_reg = DecisionTreeRegressor()\ndt_reg.fit(tfidf_train, y_train)\ny_pred = dt_reg.predict(tfidf_test)\nrmse = sqrt(mean_squared_error(y_test, y_pred))\nprint('Root mean Square is :',rmse)","fae11bc9":"xgb_clf = xgb.XGBRegressor()\nxgb_clf.fit(tfidf_train, y_train)\ny_pred = xgb_clf.predict(tfidf_test)\nrmse = sqrt(mean_squared_error(y_test, y_pred))\nprint('Root mean Square is :',rmse)","a1f0b6e3":"test = pd.read_csv('..\/input\/commonlitreadabilityprize\/test.csv')\ntest['process_text'] = ''\nfor i in range(0,len(test)):\n    test['process_text'][i] = preprocessing_text(test.excerpt[i])","6b31a797":"# Applyinh TF-IDF on test dataset\ntX = test.process_text\ntest_tfidf = tfidf_vectorizer.transform(tX) ","dc62ed24":"#checking shape same or not\ntest_tfidf.shape, tfidf_train.shape","86bdef30":"# Prediction on test\ny_pred = reg.predict(test_tfidf)","f07ac0c7":"a = pd.DataFrame()\na['id'] = test['id']\na['target'] = y_pred\na.reset_index(inplace=True,drop=True)\na.to_csv('submission.csv',index=False)  #file save as submission.csv","1fb98ae8":"a","5bd56131":"## Apply preprocessing on dataset","ed1a4ad1":"### XGBoost","00205996":"# importing libraries","e752f0ef":"## seperate dependent and independent variables","66a589bf":"# Models","3d9ffa1d":"### Random Forest","5fa430cb":"# Text Preprocessing","4824c811":"### Decision Tree","d0453e2e":"### Checking Root mean square","8a087293":"### Predicting","e93d2f69":"### Creating submission.csv file ","3ae8071d":"# Submitting Score","b4084ede":"# Apply TF-IDF","e27654e8":"### Linear Regression","875a7740":"# Read Data"}}