{"cell_type":{"4ee1061c":"code","36137dde":"code","5b8fc747":"code","01868d20":"code","a3e9456a":"code","93c05a08":"code","f562f318":"code","bfa2438b":"code","28b8d2c3":"code","eb91f7a1":"code","cf98ce60":"code","13b69319":"code","f729776a":"code","0073bc30":"code","56eed3b2":"code","4408f330":"code","1f01b68d":"code","d7b06e25":"code","b26180fc":"code","71e7a5a1":"code","c43b19c4":"code","d4bfea1d":"code","f0ef6ed3":"code","7a5757b7":"code","37c10cb2":"code","068065ef":"code","caabe4bd":"code","e9a008b2":"code","46dc7d4c":"code","936bedbd":"code","ce2496d3":"markdown","11013808":"markdown","bb808146":"markdown","4a9dacb9":"markdown","e60b53ff":"markdown","95b00bae":"markdown","2cdf9399":"markdown","4ff4b570":"markdown"},"source":{"4ee1061c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error","36137dde":"data = pd.read_csv('\/kaggle\/input\/pizza-price-prediction\/pizza_v1.csv')","5b8fc747":"print(data.shape)\ndata.head()","01868d20":"data.info()","a3e9456a":"# Clean \"price\" column\ndata.rename(columns={'price_rupiah': 'price'}, inplace=True)\ndata['price'] = data['price'].str.extract(r'(\\d*,\\d*)')\ndata['price'] = data['price'].str.replace(',', '').astype(int)","93c05a08":"# Fix typos\ndata.loc[data['size'] == 'reguler', 'size'] = 'regular'\ndata.loc[data['variant'] == 'spicy tuna', 'variant'] = 'spicy_tuna'\ndata.loc[data['variant'] == 'gournet_greek', 'variant'] = 'gourmet_greek'\ndata.loc[data['topping'] == 'papperoni', 'topping'] = 'pepperoni'\ndata.loc[data['topping'] == 'black papper', 'topping'] = 'black pepper'","f562f318":"data.head()","bfa2438b":"data['topping'].value_counts()","28b8d2c3":"onion = data.loc[data['topping'] == 'onion'].index\ndata.drop(onion, inplace=True)","eb91f7a1":"data.groupby('company').price.mean().plot(kind='bar', title=\"Price vs Company\")\nplt.show()","cf98ce60":"data.groupby('size').price.mean().plot(kind='bar', title=\"Price vs Size\")\nplt.show()","13b69319":"data.groupby('variant').price.mean().plot(kind='barh', figsize=(10,6), title=\"Price vs Variant\")\nplt.show()","f729776a":"data.groupby('topping').price.mean().plot(kind='barh', figsize=(10,6), title=\"Price vs Topping\")\nplt.show()","0073bc30":"fig, (ax1, ax2) = plt.subplots(1,2)\ndata.groupby('extra_sauce').price.mean().plot(kind='bar', figsize=(12,4), ylabel='price', ax=ax1, title=\"Price vs Extra Sauce\")\ndata.groupby('extra_cheese').price.mean().plot(kind='bar', ylabel='price', ax=ax2, title=\"Price vs Extra Cheese\")\nplt.show()","56eed3b2":"plt.figure(figsize=(10,5))\nsns.scatterplot(x='price', y='diameter', data=data, hue='company')\nplt.title(\"Price vs Diameter\")\nplt.grid(True)\nplt.subplot()\nplt.show()","4408f330":"sns.countplot(x=data['company'], data=data)\nplt.show()","1f01b68d":"sns.countplot(x=data['topping'], data=data)\nplt.xticks(rotation=90)\nplt.show()","d7b06e25":"sns.countplot(x=data['size'], data=data)\nplt.show()","b26180fc":"sns.countplot(x=data['variant'], data=data)\nplt.xticks(rotation=90)\nplt.show()","71e7a5a1":"sns.countplot(x=data['diameter'], data=data)\nplt.show()","c43b19c4":"fig, ax = plt.subplots(1,2)\nfig.tight_layout()\nsns.countplot(x=data['extra_sauce'], ax=ax[0])\nsns.countplot(x=data['extra_cheese'], ax=ax[1])\nfig.show()","d4bfea1d":"df = data.copy()","f0ef6ed3":"X = df.drop('price', axis=1)\ny = df['price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=1)","7a5757b7":"print(f\"X_train {X_train.shape}\")\nprint(f\"X_test {X_test.shape}\")\nprint(f\"y_train {y_train.shape}\")\nprint(f\"y_test{y_test.shape}\")","37c10cb2":"# Cols for binary encoding\nbinary_cols = ['extra_sauce', 'extra_cheese']\n\n# Cols for one-hot encoding\nlow_cardinality_cols = ['company', 'size'] \n\n# Cols for ordinal encoding\nhigh_cardinality_cols = ['topping', 'variant']\n\n# Numerical\nnumerical_cols = ['diameter']","068065ef":"def binary_encoder(df, cols):\n    \n    binary_mapping = {\"yes\": 1, \"no\": 0}\n    temp = df[cols].copy()\n    \n    for col in temp.columns:\n        temp[col] = temp[col].map(binary_mapping)\n    \n    return temp\n\nX_train[binary_cols] = binary_encoder(X_train, binary_cols)\nX_test[binary_cols] = binary_encoder(X_test, binary_cols)","caabe4bd":"OH_encoder = OneHotEncoder(sparse=False)\n\nX_train_oh = OH_encoder.fit_transform(X_train[low_cardinality_cols])\ncolnames = OH_encoder.get_feature_names(['company', 'size'])\nX_train_oh = pd.DataFrame(X_train_oh, index=X_train.index, columns=colnames)\n\nX_test_oh = OH_encoder.transform(X_test[low_cardinality_cols])\nX_test_oh = pd.DataFrame(X_test_oh, index=X_test.index, columns=colnames)\n\nordinal_encoder = OrdinalEncoder()\n\nX_train_label = pd.DataFrame(ordinal_encoder.fit_transform(X_train[high_cardinality_cols]), index=X_train.index)\nX_test_label = pd.DataFrame(ordinal_encoder.transform(X_test[high_cardinality_cols]), index=X_test.index)\n\nX_train = pd.concat([X_train[numerical_cols], X_train_oh, X_train_label, X_train[binary_cols]], axis=1)\nX_test = pd.concat([X_test[numerical_cols], X_test_oh, X_test_label, X_test[binary_cols]], axis=1)","e9a008b2":"scaler = StandardScaler()\n\nscaler.fit(X_train)\nX_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\nX_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)","46dc7d4c":"xgb = XGBRegressor(n_estimators=100, learning_rate=0.9, max_depth=10, alpha=1, random_state=1, n_jobs=4)\n\nxgb.fit(X_train, y_train, verbose=False)\n\ny_preds = xgb.predict(X_test)\n\nmae = mean_absolute_error(y_test, y_preds)\nprint(f\"Mean Absolute Error: {mae:.2f}\\n\")\nprint(f\"R^2 score: {xgb.score(X_test, y_test):.4f}\")","936bedbd":"plt.figure(figsize=(10,5))\nsns.regplot(x=y_test, y=y_preds, line_kws={\"color\": \"red\"})\nplt.title(\"Actual vs Predicted Price\")\nplt.xlabel(\"Actual\")\nplt.ylabel(\"Predicted\")\nplt.xlim(0, 250000)\nplt.ylim(0, 250000)\nplt.grid(True)\nplt.subplot()\nplt.show()","ce2496d3":"#### 2a Count Plots","11013808":"Scale","bb808146":"#### 1. Data Cleaning","4a9dacb9":"#### 4. Fitting XGB Regressor","e60b53ff":"#### 3. Preprocessing","95b00bae":"Split data","2cdf9399":"Encode","4ff4b570":"#### 2. Data Visualization"}}