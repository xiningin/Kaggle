{"cell_type":{"a26d770b":"code","3b06d7dd":"code","db837525":"code","ec66e95c":"code","9e2f610d":"code","775aaae6":"code","4ad36064":"code","a717c491":"code","d1d17976":"code","2b6dff00":"code","9127355f":"code","b52ee914":"code","b2a32692":"code","035efa32":"code","3ad250fd":"code","1543ba36":"code","1cee40fd":"code","85e09238":"code","cc96d0a9":"code","adcca629":"code","98f49525":"code","51934a4f":"code","19edb311":"code","f6459d7a":"code","5dc4632f":"code","abb363fd":"code","4eadf58c":"code","e05a37fa":"code","aa137854":"code","642d0aa5":"code","5f615a4b":"code","39e81aaa":"code","56b3d6a6":"code","15eade9f":"code","02f173c0":"code","c0d43b58":"markdown","adadbb5c":"markdown","f2673395":"markdown","334c342c":"markdown","5af14a74":"markdown","71d19a08":"markdown","b26d61e1":"markdown","7c09d8ba":"markdown","361ca4e5":"markdown","6da4291b":"markdown","2f306f59":"markdown","13d606cd":"markdown","65f411c8":"markdown","7e98b8ce":"markdown","f7fefb73":"markdown","9a5fa587":"markdown","3963dbdb":"markdown","7f56afc8":"markdown","b3e6e607":"markdown","754f9374":"markdown","25eba94c":"markdown","2930c494":"markdown"},"source":{"a26d770b":"%matplotlib inline\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_context(\"notebook\")\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport glob\nfilelist = glob.glob(\"..\/input\/*.csv\")\n\n# Load data\nsantander = pd.read_csv('..\/input\/santander.csv', sep=',', index_col=0, parse_dates=True)\ncols = ['Open', 'High', 'Low', 'Close', 'Volume']\nsantander = santander[cols].copy()\nsantander = santander[santander.index>='2015-01-01']\n\ndf_stocks = pd.DataFrame()\n\nfor i in filelist:\n    tmp = pd.read_csv(i)\n    tmp['symbol'] = i.split('\/')[-1].split('.')[0]\n    df_stocks = df_stocks.append(tmp)\n\ncols = ['Date', 'Close', 'Volume', 'symbol']\ndf_stocks = df_stocks[cols].copy()\ndf_stocks['Date'] = pd.to_datetime(df_stocks['Date'])\n\n# create new dataframe with just closing price for each stock\ndf = df_stocks.pivot(index='Date', columns='symbol', values='Close')\n\n# subset data since 2015\ndf = df[df.index>='2015-01-01']\ndf.tail()","3b06d7dd":"plt.figure(figsize=(15,7))\ntop = plt.subplot2grid((4,4), (0, 0), rowspan=3, colspan=4)\nbottom = plt.subplot2grid((4,4), (3,0), rowspan=1, colspan=4)\ntop.plot(santander.index, santander['Close']) \nbottom.bar(santander.index, santander['Volume']) \n \n# set the labels\ntop.axes.get_xaxis().set_visible(False)\ntop.set_title('Santander')\ntop.set_ylabel('Closing Price')\nbottom.set_ylabel('Volume');","db837525":"plt.figure(figsize=(15,7))\nsns.distplot(santander['Close'].dropna(), bins=50, color='purple');","ec66e95c":"# simple moving averages\nsma5 = santander['Close'].rolling(5).mean() #5 days\nsma100 = santander['Close'].rolling(100).mean() #100 days\n \nsantander_sma = pd.DataFrame({'santander': santander['Close'], 'SMA 5': sma5, 'SMA 100': sma100})\nsantander_sma.plot(figsize=(15, 7), legend=True, title='Santander');","9e2f610d":"df.plot(figsize=(15,8))\nplt.ylabel('Price');","775aaae6":"returnfstart = df.apply(lambda x: x \/ x[0])\nreturnfstart.plot(figsize=(15,7)).axhline(1, lw=1, color='black')\nplt.ylabel('Return From Start Price');","4ad36064":"df.pct_change().plot(figsize=(15,7))\nplt.axhline(0, color='black', lw=1)\nplt.ylabel('Daily Percentage Return');","a717c491":"# Resample df to business months, take last observation as value \nmonthly = df.resample('BM').apply(lambda x: x[-1])\n\n# Calculate the monthly percentage change\nmonthly.pct_change().plot(figsize=(15,7))\nplt.axhline(0, color='black', lw=1)\nplt.ylabel('Monthly Percentage Return');","d1d17976":"# Resample df to quarters, take the mean as value per quarter\nquarter = df.resample('4M').mean()\n\n# Calculate the quarterly percentage change\nquarter.pct_change().plot(figsize=(15,7))\nplt.axhline(0, color='black', lw=1)\nplt.ylabel('Quarterly Percentage Return');","2b6dff00":"sns.jointplot('santander', 'siemens-gamesa', df, kind='reg', color='seagreen');","9127355f":"# Compute the correlation matrix\ncorr = df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(10, 10))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5});\n","b52ee914":"fig = sns.PairGrid(df[['santander', 'siemens-gamesa', 'telefnica']].dropna())\n# define top, bottom and diagonal plots\nfig.map_upper(plt.scatter, color='purple')\nfig.map_lower(sns.kdeplot, cmap='cool_d')\nfig.map_diag(sns.distplot, bins=30);","b2a32692":"daily_pct_c = df\/ df.shift(1) -1\ndaily_pct_c.hist(bins=50, figsize=(15,20))\nplt.show()\n\ndisplay(daily_pct_c.describe())","035efa32":"cum_daily_return = (1 + daily_pct_c).cumprod()\n\ncum_daily_return.plot(figsize=(12,8))\nplt.ylabel('Cumulative Daily Returns');\nplt.axhline(1, color='black', lw=1)\nplt.show()","3ad250fd":"# Resample the cumulative daily return to cumulative monthly return \ncum_monthly_return = cum_daily_return.resample(\"M\").mean()\n\ncum_monthly_return.plot(figsize=(12,8))\nplt.ylabel('Cumulative Monthly Returns');\nplt.axhline(1, color='black', lw=1)\nplt.show()","1543ba36":"# Define the minumum of periods to consider \nmin_periods = 75 \n\n# Calculate the volatility\nvol = daily_pct_c.rolling(min_periods).std() * np.sqrt(min_periods) \n\n# Plot the volatility\nvol.plot(figsize=(10, 8))\n\n# Show the plot\nplt.show()","1cee40fd":"santander.head()","85e09238":"# Initialize the short and long windows\nshort_window = 40\nlong_window = 100\n\n# Initialize the `signals` DataFrame with the `signal` column\nsignals = pd.DataFrame(index=santander.index)\nsignals['signal'] = 0.0\n\n# Create short simple moving average over the short window\nsignals['short_mavg'] = santander['Close'].rolling(window=short_window, min_periods=1, center=False).mean()\n\n# Create long simple moving average over the long window\nsignals['long_mavg'] = santander['Close'].rolling(window=long_window, min_periods=1, center=False).mean()\n\n# Create signals\nsignals['signal'][short_window:] = np.where(signals['short_mavg'][short_window:] \n                                            > signals['long_mavg'][short_window:], 1.0, 0.0)   \n\n# Generate trading orders\nsignals['positions'] = signals['signal'].diff()","cc96d0a9":"# Initialize the plot figure\nfig = plt.figure(figsize=(10, 8))\n\n# Add a subplot and label for y-axis\nax1 = fig.add_subplot(111,  ylabel='Price in $')\n\n# Plot the closing price\nsantander['Close'].plot(ax=ax1, color='grey', lw=2.)\n\n# Plot the short and long moving averages\nsignals[['short_mavg', 'long_mavg']].plot(ax=ax1, lw=2.)\n\n# Plot the buy signals\nax1.plot(signals.loc[signals.positions == 1.0].index, \n         signals.short_mavg[signals.positions == 1.0],\n         '^', markersize=10, color='m')\n         \n# Plot the sell signals\nax1.plot(signals.loc[signals.positions == -1.0].index, \n         signals.short_mavg[signals.positions == -1.0],\n         'v', markersize=10, color='k')\n         \n# Show the plot\nplt.show()","adcca629":"# Set the initial capital\ninitial_capital= float(100000.0)\n\n# Create a DataFrame `positions`\npositions = pd.DataFrame(index=signals.index).fillna(0.0)\n\n# Buy a 100 shares\npositions['santander'] = 100*signals['signal']   \n  \n# Initialize the portfolio with value owned   \nportfolio = positions.multiply(santander['Close'], axis=0)\n\n# Store the difference in shares owned \npos_diff = positions.diff()\n\n# Add `holdings` to portfolio\nportfolio['holdings'] = (positions.multiply(santander['Close'], axis=0)).sum(axis=1)\n\n# Add `cash` to portfolio\nportfolio['cash'] = initial_capital - (pos_diff.multiply(santander['Close'], axis=0)).sum(axis=1).cumsum()   \n\n# Add `total` to portfolio\nportfolio['total'] = portfolio['cash'] + portfolio['holdings']\n\n# Add `returns` to portfolio\nportfolio['returns'] = portfolio['total'].pct_change()\n","98f49525":"fig = plt.figure(figsize=(10, 8))\n\nax1 = fig.add_subplot(111, ylabel='Portfolio value in $')\n\n# Plot the equity curve in dollars\nportfolio['total'].plot(ax=ax1, lw=2.)\n\n# Plot the \"buy\" trades against the equity curve\nax1.plot(portfolio.loc[signals.positions == 1.0].index, \n         portfolio.total[signals.positions == 1.0],\n         '^', markersize=10, color='m')\n\n# Plot the \"sell\" trades against the equity curve\nax1.plot(portfolio.loc[signals.positions == -1.0].index, \n         portfolio.total[signals.positions == -1.0],\n         'v', markersize=10, color='k')\n\n# Show the plot\nplt.show()","51934a4f":"# Isolate the returns of your strategy\nreturns = portfolio['returns']\n\n# annualized Sharpe ratio\nsharpe_ratio = np.sqrt(252) * (returns.mean() \/ returns.std())\n\n# Print the Sharpe ratio\nprint(np.round(sharpe_ratio,2))","19edb311":"# Define a trailing 252 trading day window\nwindow = 252\n\n# Calculate the max drawdown in the past window days for each day\nrolling_max = santander['Close'].rolling(window, min_periods=1).max()\ndaily_drawdown = santander['Close']\/rolling_max - 1.0\n\n# Calculate the minimum (negative) daily drawdown\nmax_daily_drawdown = daily_drawdown.rolling(window, min_periods=1).min()\n\n# Plot the results\ndaily_drawdown.plot()\nmax_daily_drawdown.plot()\n\n# Show the plot\nplt.show()","f6459d7a":"# Get the number of days in `aapl`\ndays = (santander.index[-1] - santander.index[0]).days\n\n# Calculate the CAGR \ncagr = ((((santander['Close'][-1]) \/ santander['Close'][1])) ** (365.0\/days)) - 1\n\n# Print CAGR\nprint(np.round(cagr,3))","5dc4632f":"# Drop the columns\nph_df = santander.drop(['Open', 'High', 'Low','Volume'], axis=1)\nph_df.reset_index(inplace=True)\nph_df.rename(columns={'Close': 'y', 'Date': 'ds'}, inplace=True)\nph_df['ds'] = pd.to_datetime(ph_df['ds'])\nph_df.head()","abb363fd":"from fbprophet import Prophet\nm = Prophet()\nm.fit(ph_df)\n\n# Create Future dates\nfuture_prices = m.make_future_dataframe(periods=365)\n\n# Predict Prices\nforecast = m.predict(future_prices)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","4eadf58c":"fig = m.plot(forecast)\nax1 = fig.add_subplot(111)\nax1.set_title(\"Santander Stock Price Forecast\", fontsize=16)\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"Close Price\", fontsize=12)\nplt.show()","e05a37fa":"fig2 = m.plot_components(forecast)\nplt.show()","aa137854":"# Monthly Data Predictions\nm = Prophet(changepoint_prior_scale=0.01).fit(ph_df)\nfuture = m.make_future_dataframe(periods=12, freq='M')\nfcst = m.predict(future)\nfig = m.plot(fcst)\nplt.title(\"Monthly Prediction \\n 1 year time frame\", fontsize=16)\nplt.xlabel(\"Date\", fontsize=12)\nplt.ylabel(\"Close Price\", fontsize=12)\n\nplt.show()","642d0aa5":"fig = m.plot_components(fcst)\nplt.show()","5f615a4b":"from plotly import tools\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\nimport plotly.tools as tls\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)","39e81aaa":"trace = go.Ohlc(x=santander.index,\n                open=santander['Open'],\n                high=santander['High'],\n                low=santander['Low'],\n                close=santander['Close'],\n               increasing=dict(line=dict(color= '#58FA58')),\n                decreasing=dict(line=dict(color= '#FA5858')))\n\nlayout = {\n    'title': 'Santander Historical Price',\n    'xaxis': {'title': 'Date',\n             'rangeslider': {'visible': False}},\n    'yaxis': {'title': 'Stock Price'},\n    'shapes': [{\n        'x0': '2018-12-31', 'x1': '2018-12-31',\n        'y0': 0, 'y1': 1, 'xref': 'x', 'yref': 'paper',\n        'line': {'color': 'rgb(30,30,30)', 'width': 1}\n    }],\n    'annotations': [{\n        'x': '2019-01-01', 'y': 0.05, 'xref': 'x', 'yref': 'paper',\n        'showarrow': False, 'xanchor': 'left',\n        'text': '2019 <br> starts'\n    }]\n}\n\ndata = [trace]\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='simple_ohlc')\n","56b3d6a6":"# Moving Averages (10, 50 and 200)\nsantander['10_d_avg'] = santander.Close.rolling(window=10).mean()\nsantander['50_d_avg'] = santander.Close.rolling(window=50).mean()\nsantander['200_d_avg'] = santander.Close.rolling(window=200).mean()\nclose_p = santander['Close'].values.tolist()\n\n\n# Variables to insert into plotly\nten_d = santander['10_d_avg'].values.tolist()\nfifty_d = santander['50_d_avg'].values.tolist()\ntwoh_d = santander['200_d_avg'].values.tolist()\ndate = santander.index.values.tolist()\n\n# Set date as index\n#amzn_df = amzn_df.set_index('date')","15eade9f":"fig = tls.make_subplots(rows=2, cols=1, shared_xaxes=True)\n\ncolors = ['#ff4500', '#92a1cf', '#6E6E6E']\navgs = ['10_d_avg', '50_d_avg', '200_d_avg']\n# for i,c in zip(range(n),color):\n#    ax1.plot(x, y,c=c)\n\nfor col, c in zip(avgs, colors):\n    fig.append_trace({'x': santander.index, 'y': santander[col], 'type': 'scatter', 'name': col, 'line': {'color': c}}, 1, 1)\nfor col in ['Close']:\n    fig.append_trace({'x': santander.index, 'y': santander[col], 'type': 'scatter', 'name': 'Closing Price', 'line':{'color': '#01DF3A'}}, 2, 1)\n    \nfig['layout'].update(height=800,title='Relationship between MAs <br> and Closing Price',\n                    paper_bgcolor='#F2DFCE', plot_bgcolor='#F2DFCE')\n    \niplot(fig, filename='pandas\/mixed-type subplots')","02f173c0":"# Take off the date index\nsantander = santander.reset_index()\n\n# Plotly\ntrace0 = go.Scatter(\n    x = santander['Date'],\n    y = ten_d,\n    name = '10-day MA',\n    line = dict(\n        color = ('#ff6347'),\n        width = 4)\n)\ntrace1 = go.Scatter(\n    x = santander['Date'],\n    y = fifty_d,\n    name = '50-day MA',\n    line = dict(\n        color = ('#92a1cf'),\n        width = 4,\n    dash=\"dot\")\n)\ntrace2 = go.Scatter(\n    x = santander['Date'],\n    y = twoh_d,\n    name = '200-day MA',\n    line = dict(\n        color = ('#2EF688'),\n        width = 4,\n        dash = 'dash') # dash options include 'dash', 'dot', and 'dashdot'\n)\n\ndata = [trace0, trace1, trace2]\n\n\n# Edit the layout\nlayout = dict(title = 'Moving Averages for Santander',\n              xaxis = dict(title = 'Date'),\n              yaxis = dict(title = 'Price'),\n#               annotations=[\n#         dict(\n#             x='2016-01-13',\n#             y=657,\n#             xref='x',\n#             yref='y',\n#             text='<i> First major decline <br> after 10-d crosses <br> 50-d moving average <\/i>',\n#             showarrow=True,\n#             arrowhead=5,\n#             ax=5,\n#             ay=-50\n#         ), dict(\n#         x = \"2016-02-24\",\n#         y = 535,\n#         text = \"<i>Upward trend after <br> 10-day crosses <br>200-day moving average <\/i>\",\n#         textangle = 0,\n#         ax = 50,\n#         ay = 50,\n#         font = dict(\n#           color = \"black\",\n#           size = 12\n#         )\n#         )],\n              paper_bgcolor='#FFF9F5',\n              plot_bgcolor='#FFF9F5'\n              )\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename='styled-line')","c0d43b58":"Distribution of daily percentage change","adadbb5c":"### Forecast stock price","f2673395":"### Monthly Predictions","334c342c":"#### Maximum Drawdown","5af14a74":"### Building a trading strategy","71d19a08":"### 2. Visualizing Stock Data\n\n#### Plot the Daily Closing Price and Volume of a Stock","b26d61e1":"#### Chart Simple Moving Average","7c09d8ba":"### OHLC","361ca4e5":"#### Plot a Histogram of the Daily Closing Price","6da4291b":"#### Plot  Daily Closing Price of multiple stocks","2f306f59":"Another way is the plot the daily percentage change of stock price.","13d606cd":"Because of stocks overlapping each other, it is a little hard to make any comparisons here. It is better to have some hard numbers so lets do some correlation plots.\n\n#### Correlation Plots","65f411c8":"### Moving Averages","7e98b8ce":"#### Compound Annual Growth Rate (CAGR)","f7fefb73":"Volatility Calculation","9a5fa587":"Just looking at the chart, you can see that the relationship is somewhat linear. Strongly correlated stocks can be used in pair trading","3963dbdb":"PairGrid can be used for paired comparisons with flexibility on the type of charts being plotted. For this case, a scatterplots, kde plots and histograms are plotted.","7f56afc8":"Cumulative daily returns","b3e6e607":"# Workflow for visualizing and analyzing stocks\nBasics for handling and analyzing stock market data\n\n### 1. Import Multiple Stock Data","754f9374":"As each stock has different prices, it is difficult to compare between them to visualise any relationships. Some transformation can help to normalise this issue.\n\n#### Normalizing multiple stocks\nDividing all the closing price to the first closing price in the period.","25eba94c":"### Evaluating Moving Average Crossover Strategy\n#### Sharpe Ratio","2930c494":"### Backtesting a strategy"}}