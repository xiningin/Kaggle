{"cell_type":{"268ad9cf":"code","00cfd99f":"code","3c46ff81":"code","2f147493":"code","32828bc8":"code","31e16cec":"code","c37a8f6b":"code","bdc30845":"code","aba6d715":"code","b539534e":"code","e3ebd471":"code","89812f68":"code","50420661":"code","36bfaa73":"code","721b7530":"code","80326a4e":"code","4a65dc44":"code","29f0b4cf":"code","b5a4ed62":"code","c5b83cb4":"code","000bb385":"code","0fc5c76a":"code","3de4fdc2":"code","8ab1481a":"code","50f20e9f":"code","29512003":"code","939788e0":"code","84bb4d67":"code","201b22db":"code","849bd46c":"code","93914fbc":"code","41c1dddd":"code","4e7b5b6d":"code","ff37299d":"code","c85c518b":"code","b69cbe39":"markdown"},"source":{"268ad9cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","00cfd99f":"%config IPCompleter.greedy=True\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nmissing_values=[\"n\/a\", \"?\", \"na\"]\ndf=pd.read_csv(\"..\/input\/heart.csv\", na_values=missing_values)\ndf.head(10)","3c46ff81":"df.shape","2f147493":"df.columns","32828bc8":"df.dtypes","31e16cec":"df['target'].value_counts()","c37a8f6b":"df.isnull().sum()","bdc30845":"countFemale = len(df[df.sex == 0])\ncountMale = len(df[df.sex == 1])\nprint(\"Percentage of Female Patients: {:.2f}%\".format((countFemale \/ (len(df.sex))*100)))\nprint(\"Percentage of Male Patients: {:.2f}%\".format((countMale \/ (len(df.sex))*100)))","aba6d715":"sns.countplot(x='sex', data=df, palette=\"mako_r\")\nplt.xlabel(\"Sex (0 = female, 1= male)\")\nplt.show()","b539534e":"#df1 = len(df[(df.sex == 1) & (df.target == 1)])\n#df2 = len(df[(df.sex == 0) & (df.target == 0)])\nprint(\"Percentage of Male having heart disease: {:.2f}%\".format((len(df[(df.sex == 1) & (df.target == 1)]) \/ (len(df[(df.sex == 1)]))*100)))\nprint(\"Percentage of Male Not having heart disease: {:.2f}%\".format((len(df[(df.sex == 1) & (df.target == 0)]) \/ (len(df[(df.sex == 1)]))*100)))\nprint(\"Percentage of Female having heart disease: {:.2f}%\".format((len(df[(df.sex == 0) & (df.target == 1)]) \/ (len(df[(df.sex == 0)]))*100)))\nprint(\"Percentage of Female Not having heart disease: {:.2f}%\".format((len(df[(df.sex == 0) & (df.target == 0)]) \/ (len(df[(df.sex == 0)]))*100)))","e3ebd471":"print(\"Percentage of Male having heart disease:\" ,len(df[(df.sex == 1) & (df.target == 1)]))\nprint(\"Percentage of Male Not having heart disease: \",len(df[(df.sex == 1) & (df.target == 0)]))\nprint(\"Percentage of Female having heart disease: \",len(df[(df.sex == 0) & (df.target == 1)]))\nprint(\"Percentage of Female Not having heart disease: \",len(df[(df.sex == 0) & (df.target == 0)]))","89812f68":"sns.countplot(df.sex, hue=df.target)","50420661":"pd.crosstab(df.age,df.target).plot(kind=\"bar\",figsize=(20,6))\nplt.title('Heart Disease Frequency for Ages')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.savefig('heartDiseaseAndAges.png')\nplt.show()","36bfaa73":"plt.scatter(x=df.age[df.target==1], y=df.thalach[(df.target==1)], c=\"red\")\nplt.scatter(x=df.age[df.target==0], y=df.thalach[(df.target==0)])\nplt.legend([\"Disease\", \"Not Disease\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","721b7530":"pd.crosstab(df.slope,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#DAF7A6','#FF5733' ])\nplt.title('Heart Disease Frequency for Slope')\nplt.xlabel('The Slope of The Peak Exercise ST Segment ')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency')\nplt.show()","80326a4e":"pd.crosstab(df.fbs,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#FFC300','#581845' ])\nplt.title('Heart Disease Frequency According To FBS')\nplt.xlabel('FBS - (Fasting Blood Sugar > 120 mg\/dl) (1 = true; 0 = false)')\nplt.xticks(rotation = 0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","4a65dc44":"pd.crosstab(df.cp,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#11A5AA','#AA1190' ])\nplt.title('Heart Disease Frequency According To Chest Pain Type')\nplt.xlabel('Chest Pain Type')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","29f0b4cf":"df['sex'].value_counts().plot(kind='pie', autopct='%1.1f%%')","b5a4ed62":"df['target'].value_counts().plot(kind='pie', autopct='%1.1f%%')","c5b83cb4":"from operator import add\ndef create_percent_stacked_barchart(data, title = None, ylabel = None, xlabel = None):\n    default_colors = ['red', 'blue', 'black']\n    # From raw value to percentage\n    totals = data.sum(axis=1)\n    bars = ((data.T \/ totals) * 100).T\n    r = list(range(data.index.size))\n\n    # Plot\n    barWidth = 0.95\n    names = data.index.tolist()\n    bottom = [0] * bars.shape[0]\n\n    # Create bars\n    color_index = 0\n    plots = []\n    for bar in bars.columns:\n        plots.append(plt.bar(r, bars[bar], bottom=bottom, color=default_colors[color_index], edgecolor='white', width=barWidth))\n        bottom = list(map(add, bottom, bars[bar]))\n        color_index = 0 if color_index >= len(default_colors) else color_index + 1\n\n    # Custom x axis\n    plt.title(title)\n    plt.xticks(r, names)\n    plt.xlabel(data.index.name if xlabel is None else xlabel)\n    plt.ylabel(data.columns.name if ylabel is None else ylabel)\n    ax = plt.gca()\n        \n    y_labels = ax.get_yticks()\n    ax.set_yticklabels([str(y) + '%' for y in y_labels])\n\n    flat_list = [item for sublist in data.T.values for item in sublist]\n    for i, d in zip(ax.patches, flat_list):\n        data_label = str(d) + \" (\" + str(round(i.get_height(), 2)) + \"%)\"\n        ax.text(i.get_x() + 0.45, i.get_y() + 5, data_label, horizontalalignment='center', verticalalignment='center', fontdict = dict(color = 'white', size = 20))\n\n    for item in ([ax.title]):\n        item.set_fontsize(27)\n        \n    for item in ([ax.xaxis.label, ax.yaxis.label] + ax.get_xticklabels() + ax.get_yticklabels()):\n        item.set_fontsize(24)\n    \n    legend = ax.legend(plots, bars.columns.tolist(), fancybox=True)\n    plt.setp(legend.get_texts(), fontsize='20')","000bb385":"fig = plt.gcf()\nfig.set_size_inches(25, 35)\ngrid_rows = 4\ngrid_cols = 2\n\n# Draw Disease Status vs Sex chart\nplt.subplot(grid_rows, grid_cols, 1)\ntemp = df[['sex','target']].groupby(['sex','target']).size().unstack('target')\ntemp.rename(index={0:'Female', 1:'Male'}, columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs Sex', ylabel = 'Population')\n\n# Draw Disease Status vs Chest pain type chart\nplt.subplot(grid_rows, grid_cols, 2)\ntemp = df[['cp','target']].groupby(['cp','target']).size().unstack('target')\ntemp.rename(index={0:'Typical \\nAngina', 1:'Atypical \\nAngina', 2:'Non-\\nanginal\\nPain',3:'Asymptomatic'}, columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs Chest Pain Type (cp)', ylabel = 'Population', xlabel = 'Chest Pain Type')\n\n# Draw fbs - fasting blood sugar chart\nplt.subplot(grid_rows, grid_cols, 3)\ntemp = df[['fbs','target']].groupby(['fbs','target']).size().unstack('target')\ntemp.rename(index={0:'True', 1:'False'}, columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs Fasting Blood Sugar(fbs)', ylabel = 'Population', xlabel = 'Fasting Blood Sugar > 120 mg\/dl')\n\n# Draw restecg - resting electrocardiographic results chart\nplt.subplot(grid_rows, grid_cols, 4)\ntemp = df[['restecg','target']].groupby(['restecg','target']).size().unstack('target')\ntemp.rename(index={0:'Normal', 1:'Abnormality', 2:'Left Ventricular \\nHypertrophy'}, columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs Resting Electrocardiographic Results (restecg)', ylabel = 'Population', xlabel = 'Resting Electrocardiographic Results')\n\n# Draw exang - exercise induced angina chart\nplt.subplot(grid_rows, grid_cols, 5)\ntemp = df[['exang','target']].groupby(['exang','target']).size().unstack('target')\ntemp.rename(index={0:'Not Induced', 1:'Induced'}, columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs Exercise Induced Angina (exang)', ylabel = 'Population', xlabel = 'Exercise Induced Angina')\n\n# Draw slope - the slope of the peak exercise ST segment chart\nplt.subplot(grid_rows, grid_cols, 6)\ntemp = df[['slope','target']].groupby(['slope','target']).size().unstack('target')\ntemp.rename(index={0:'Upsloping', 1:'Flat', 2:'Downsloping'}, columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs Slope', ylabel = 'Population', xlabel = 'Slope')\n\n# Draw ca - number of major vessels (0-3) colored by flourosopy chart\nplt.subplot(grid_rows, grid_cols, 7)\ntemp = df[['ca','target']].groupby(['ca','target']).size().unstack('target')\ntemp.rename(columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs CA', ylabel = 'Population', xlabel = 'CA')\n\n# Draw thal chart\nplt.subplot(grid_rows, grid_cols, 8)\ntemp = df[['thal','target']].groupby(['thal','target']).size().unstack('target')\ntemp.rename(columns={0:'No Disease', 1:'Has Disease'}, inplace = True)\ncreate_percent_stacked_barchart(temp, title = 'Disease Status vs Thal', ylabel = 'Population', xlabel = 'Thal')\nfig.tight_layout()\nplt.savefig(\"all.png\")\nplt.show()\n#The feature 'sex' is biased in the sample. Hence saying 'most of the Females are tend to have heart disease' is untrue.\n#Pain with chest pain types Atypical Angina, Non-Anginal Pain, Asymptomatic more likely to have heart disease.","0fc5c76a":"fig = plt.gcf()\nfig.set_size_inches(15, 8)\nsns.heatmap(df.corr(), annot = True)\nplt.show()\n#There is no features with more than 0.5 correlation. This is a sad thing. :(","3de4fdc2":"continuous_features = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak', 'target']\nnumber_of_columns = len(continuous_features)\nnumber_of_rows = 5\nplt.figure(figsize=(30, 18))\n\nfor i, f in enumerate(continuous_features):\n    plt.subplot(number_of_rows + 1, number_of_columns, i + 1)\n    sns.distplot(df[f], kde=True)\n\n    \n#The features Age, trestbps, chol are normally distributed.\n#The likelihood of getting heart disease of more for the people with age 50 - 60.\n#The target variable is balanced.\n","8ab1481a":"#since 'cp', 'thal' and 'slope' are categorical variables we'll turn them into dummy variables\na = pd.get_dummies(df['cp'], prefix = \"cp\")\nb = pd.get_dummies(df['thal'], prefix = \"thal\")\nc = pd.get_dummies(df['slope'], prefix = \"slope\")","50f20e9f":"frames = [df, a, b, c]\ndf = pd.concat(frames, axis = 1)\ndf.head()","29512003":"df = df.drop(columns = ['cp', 'thal', 'slope'])\ndf.head()","939788e0":"y = df.target.values\nx_data = df.drop(['target'], axis = 1)","84bb4d67":"x = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data)).values","201b22db":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=0)","849bd46c":"#Feature Scalling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","93914fbc":"#Linear Discriminant Analysis (LDA) will be used as dimensionality reduction technique for this dataset since it's a classification problem.\nprint(\"Shape of X before Dimensionlity Reduction: \", x_train.shape)\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nlda = LDA()\nx_train = lda.fit_transform(x_train, y_train)\nx_test = lda.transform(x_test)\n\nprint(\"Shape of X after Dimensionlity Reduction: \", x_train.shape)","41c1dddd":"# SVM\nfrom sklearn.svm import SVC\nsvm = SVC(kernel = 'linear', random_state = 0)\nsvm.fit(x_train, y_train)\nsvm_prediction = svm.predict(x_test)\nprint(\"Test Accuracy of SVM {:.2f}%\".format(svm.score(x_test,y_test)*100))\nprint(svm)\nfrom sklearn.metrics import confusion_matrix\n\nprint(\"SVM Confusion Matrix\")\ncm = confusion_matrix(y_test, svm_prediction)\nsns.heatmap(cm,annot=True)\nplt.show()\nTN=cm[0][0]\nFN=cm[1][0]\nTP=cm[1][1]\nFP=cm[0][1]\nrecall=TP\/(FN+TP)*100 #means 91% time model told that disease has present\nprint(\"recall :\",recall)\nprecision=TP\/(FP+TP)*100\nprint(\"precision :\",precision)\nF1_Score=2*(recall * precision) \/ (recall + precision)\nprint(\"F1_Score :\",F1_Score)","4e7b5b6d":"#K-Fold Cross Validation(10 fold is used here)\nfrom sklearn.model_selection import cross_val_score\nscores = cross_val_score(svm, x_train, y_train, cv = 10)\nprint(\"Scores: \", scores)\nprint(\"Accuracy: \", round(scores.mean(), 2) * 100, \"%\")\nprint(\"Standard Deviation: +\/-\", scores.std())","ff37299d":"from sklearn.model_selection import GridSearchCV\nparameters = [{'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n              {'C': [1, 10, 100, 1000], 'kernel': ['rbf'], 'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]}]\ngrid_search = GridSearchCV(estimator = svm, param_grid = parameters, scoring = 'accuracy', cv = 10, n_jobs = -1)\ngrid_search = grid_search.fit(x_train, y_train)\nbest_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\n\nprint(\"Best Score: \", best_accuracy)\nprint(\"Best Params: \", best_parameters)","c85c518b":"#AUC\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\n\nfrom sklearn.svm import SVC\nsvm = SVC(kernel = 'linear', C = 1, random_state = 0, probability = True)\nsvm.fit(x_train, y_train)\nprobs = svm.predict_proba(x_test)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# calculate AUC\nauc = roc_auc_score(y_test, probs)\nprint('SVM AUC: %.3f' % auc)\n# calculate roc curve\nfpr, tpr, thresholds = roc_curve(y_test, probs)\n# plot no skill\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.plot(fpr, tpr, marker='.')\nplt.show()\n\n#Linear SVM with C = 1, will be chosen as the best model for this problem.\n#The best accuracy has been obtained as 91.4%","b69cbe39":"**Acchieved 91% maximum accuracy**"}}