{"cell_type":{"7a85f554":"code","31dcf85b":"code","4b1c8f3f":"code","5ab9974a":"code","dba7e170":"code","6c2e33cb":"code","3ef222d9":"code","70aa3991":"code","5d276518":"code","28623a66":"code","74bebfef":"code","1cff0609":"code","ce92c034":"code","9c3a8b08":"code","a31177de":"code","118fff8f":"code","fad3b020":"code","0bdd508f":"code","23274972":"code","a13f24f4":"code","ea89eb67":"code","37a2935e":"code","412a4248":"code","f59bc239":"code","3bfbf6e2":"code","943f1dfc":"code","43d0cd6c":"code","6c6472d9":"code","a5277d8c":"code","941c03d9":"markdown","8b4b2e51":"markdown","42381d34":"markdown","4a53d508":"markdown","14cd88b1":"markdown","8091a48f":"markdown","41d5ecfc":"markdown","ad379b23":"markdown","e63bc4cf":"markdown","62090c5a":"markdown","f01d2fdb":"markdown","97758a80":"markdown","a7b34a75":"markdown","ffc79cbf":"markdown","c64a7ecc":"markdown","387b660c":"markdown"},"source":{"7a85f554":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31dcf85b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('fivethirtyeight')","4b1c8f3f":"df = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv',\n                 low_memory = False)\ndf.head()","5ab9974a":"len(df)","dba7e170":"df.info()","6c2e33cb":"df.dtypes","3ef222d9":"df.isna().sum()","70aa3991":"# Grouping the columns into numerical and categorical columns\nnum_cols = ['age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_sodium','serum_creatinine', 'time']\n\n# categorical columns\ncat_cols =list( set(df.columns) - set(num_cols))\n\n# change the data types to categories\nfor col in cat_cols:\n    df[col] = df[col].astype('category')\n\n# Check the dtypes again\ndf.dtypes","5d276518":"# Plot histogram for age\ndf.age.hist()","28623a66":"# Plot histogram for platelets\ndf.platelets.hist()","74bebfef":"# Plot histogram for serum sodium\ndf.serum_sodium.hist()","1cff0609":"# Plot histogram for serum creatinine\ndf.serum_creatinine.plot.hist()","ce92c034":"df.sex.value_counts(normalize=True).plot.bar(rot = 0, title = 'Sex');","9c3a8b08":"df.smoking.value_counts(normalize=True).plot.bar(rot=0, title = 'Smoking?');","a31177de":"df.anaemia.value_counts(normalize=True).plot.bar(rot = 0, title = 'Has anaemia?');","118fff8f":"df.DEATH_EVENT.value_counts(normalize=True).plot.bar(rot = 0,\n                                                     title = 'Death Event');","fad3b020":"pd.crosstab(df.sex, df.DEATH_EVENT, normalize='index').plot.bar(rot = 0);","0bdd508f":"pd.crosstab(df.high_blood_pressure,df.DEATH_EVENT, normalize='index').plot.bar(rot=0);","23274972":"pd.crosstab(df.anaemia,df.DEATH_EVENT,normalize='index').plot.bar(rot=0);","a13f24f4":"pd.crosstab(df.diabetes,df.high_blood_pressure,normalize='all')#.plot.bar(rot=0)","ea89eb67":"# Employ the minmax_scale on the continous variables\nfrom sklearn.preprocessing import minmax_scale\n\nfor col in num_cols:\n    df[col] = minmax_scale(df[col])","37a2935e":"# Preview changes in the df\ndf.head()","412a4248":"from sklearn.model_selection import train_test_split\n\n# Split the data into features (X) and label (y)\nX = df.iloc[:, :-1]\ny  = df['DEATH_EVENT']\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 94)","f59bc239":"# import models and the cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier","3bfbf6e2":"from sklearn.model_selection import cross_val_score\n\n# Set random seed\nnp.random.seed(94)\n\n# A function to store the cross-validated scores on the training data\ndef model_metrics(models, X_train, y_train):\n    \n    # Create an empty dataframe to store the metrics for each model\n    metrics_df = pd.DataFrame()\n    \n    # Loop through each model\n    for name, model in models.items():\n        \n        # Compute and store cv_scores in a dictionary\n        metrics_dict = {'accuracy' : round(np.mean(cross_val_score(model, X_train, y_train)), 2),\n                        'precision' : round(np.mean(cross_val_score(model, X_train, y_train, scoring='precision')), 2),\n                        'recall' : round(np.mean(cross_val_score(model, X_train, y_train, scoring='recall')), 2),\n                        'f1' : round(np.mean(cross_val_score(model, X_train, y_train, scoring='f1')), 2)}\n        \n        # Add the scores to the dataframe\n        metrics_df[name] = metrics_dict.values()\n    \n    # Set the indices of the dataframe \n    metrics_df.index = metrics_dict.keys()\n    \n    return metrics_df","943f1dfc":"# A dictionary to house the models\nmodels = {'Logistic Regression' : LogisticRegression(),\n          'Random Forest' : RandomForestClassifier()}\n\n# Apply the model_metrics function on the models\ncv_scores = model_metrics(models, X_train, y_train)\n\n# Visualise the metrics dataframe\ncv_scores","43d0cd6c":"# Plot the metrics from the cv_scores\ncv_scores.plot.bar(rot = 0, title = 'Plot of cross_val_scores on the training data');","6c6472d9":"# Import evaluation metrics \nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n# np.random.seed(94)\n\n# An empty dataFrame to house the results\ntest_metrics = pd.DataFrame()\n\n# Loop through the models\nfor name, model in models.items():\n    # Fit the model\n    clf = model.fit(X_train, y_train)\n    \n    # Make predictions on the X_test\n    y_preds = clf.predict(X_test)\n    \n    # Evaluate the predictions\n    test_dict = {'accuracy' : accuracy_score(y_test, y_preds),\n                 'precision': precision_score(y_test, y_preds),\n                 'recall' : recall_score(y_test, y_preds),\n                 'f1' : f1_score(y_test, y_preds)}\n    \n    # Add the evaluation metrics to the dataframe (test_metrics)\n    test_metrics[name] = test_dict.values()\n\n# Set the indices of the dataframe\ntest_metrics.index = test_dict.keys()\n\n# View the test_metrics_df\ntest_metrics","a5277d8c":"# plot the test_metrics dataframe\ntest_metrics.plot.bar(rot = 0, title = 'Evaluation metrics on the test set');","941c03d9":"The data has no missing values","8b4b2e51":"All the columns are numerical","42381d34":"## Importing models","4a53d508":"# Preliminary checks on the data","14cd88b1":"## Assessing models on the test set","8091a48f":"Summary ofthe models performaces\n","41d5ecfc":"## Model performance on cv_scores","ad379b23":"## Splitting the data","e63bc4cf":"There is a clear class imbalance in the target column(DEATH_EVENT).Clearly, majority of the patients did not die.\n\nThis will inturn affect the evaluation metrics of interest in machine learning","62090c5a":"# Importing and reading the data","f01d2fdb":"# Visualising the data","97758a80":"The table above shows that only 37.5% of all the patients did not have any co-morbid condition. The majority had at least one of either high blood pressure or diabetes or both","a7b34a75":"## ...Visualising the categorical variables","ffc79cbf":"## ..Visualising the continuous variables","c64a7ecc":"# Preparing data for ML","387b660c":"## ..Checking for quick associations between categorical features"}}