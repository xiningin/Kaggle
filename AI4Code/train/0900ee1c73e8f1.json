{"cell_type":{"10bb9634":"code","969857c1":"code","0e5472ec":"code","b2115af6":"code","7aa1d3d9":"code","81267d15":"code","35c2e8e0":"code","98858e80":"code","f3f75ae8":"code","70370eef":"code","f8153911":"markdown","43308603":"markdown","96780aaf":"markdown","d0e1f6a3":"markdown","049adc78":"markdown","0be03f8e":"markdown"},"source":{"10bb9634":"%%time\n\n# https:\/\/www.kaggle.com\/cdeotte\/rapids\n\nimport sys\n!cp ..\/input\/rapids\/rapids.0.12.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.6\/site-packages\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.6\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","969857c1":"%%time\n\nimport os\n\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom cuml.svm import SVC\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm","0e5472ec":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b2115af6":"%%time\n\npath_input = Path('\/kaggle\/input\/digit-recognizer\/')\n\ndf_train = pd.read_csv(path_input \/ 'train.csv')\ndf_test  = pd.read_csv(path_input \/ 'test.csv')\n\nX_train = df_train.iloc[:, 1:].values.reshape(-1, 28, 28).astype(np.float32)\ny_train = df_train.iloc[:, 0 ].values\n\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, random_state=42)\n\nX_test  = df_test.values.reshape(-1, 28, 28).astype(np.float32)","7aa1d3d9":"fig = plt.figure(figsize=(18, 9))\nfor row in range(5):\n    for col in range(10):\n        ax = fig.add_subplot(5, 10, 1+10*row+col)\n        ax.imshow(X_train[10*row+col])\n        ax.set_axis_off()\n        ax.set_title(y_train[10*row+col])","81267d15":"%%time\n\nlist_model = []\n\nfor ans in tqdm(range(10)):\n    model = SVC()\n    model.fit(X_train.reshape(-1, 28*28), y_train==ans)\n    list_model.append(model)","35c2e8e0":"%%time\n\nlist_h_valid = []\n\nfor ans in tqdm(range(10)):\n    h_valid = list_model[ans].predict(X_valid.reshape((-1, 28*28)))\n    h_valid = h_valid.values.get()\n    list_h_valid.append(h_valid)\n\nh_valid = np.array(list_h_valid).argmax(axis=0)","98858e80":"confusion_matrix(y_valid, h_valid)","f3f75ae8":"accuracy_score(y_valid, h_valid)","70370eef":"fig = plt.figure(figsize=(18, 9))\nfor row in range(5):\n    for col in range(10):\n        ax = fig.add_subplot(5, 10, 1+10*row+col)\n        ax.imshow(X_valid[y_valid != h_valid][10*row+col])\n        ax.set_axis_off()\n        ax.set_title(h_valid[y_valid != h_valid][10*row+col])","f8153911":"# Predict","43308603":"https:\/\/rapidsai.github.io\/projects\/cuml\/en\/0.12.0\/api.html?highlight=svc#support-vector-machines  \n> Support Vector Machines  \n> classcuml.svm.SVC(C-Support Vector Classification)  \n> Currently only binary classification is supported.  ","96780aaf":"# Import libraries","d0e1f6a3":"# validation","049adc78":"# Train","0be03f8e":"# Load datasets"}}