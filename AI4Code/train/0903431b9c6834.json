{"cell_type":{"364b7208":"code","31bed4c4":"code","6003977c":"code","caa6a5ed":"code","cf5d8193":"code","4cb2d68a":"code","6d9cb5a4":"code","c5e281ae":"code","2dd9e703":"code","c74b9454":"code","88e69be9":"code","65687563":"code","9e053abb":"code","11d7e05c":"code","55bd07cb":"code","d6df7e1f":"code","43d15bbd":"code","6579c595":"code","8fcdf71e":"code","359c68cc":"code","69b82b75":"code","a9b4e7e5":"code","c046201c":"code","1c3d4902":"code","ac3b2d7b":"code","948f9c44":"code","4968cc02":"code","0b93d95e":"code","9e385a0c":"code","3ac7bbd6":"code","be4e49e8":"code","d9bf7401":"code","feab1175":"code","b5889ba1":"code","c50026fa":"markdown","dc1ff8da":"markdown"},"source":{"364b7208":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))","31bed4c4":"from pathlib import Path\nfrom glob import glob\nfrom PIL import Image","6003977c":"from fastai import *\nfrom fastai.vision import *\nfrom fastai.callbacks.hooks import *","caa6a5ed":"PATH = Path('..\/input')\ntrn_df = pd.read_csv(PATH\/f'train_labels.csv')","cf5d8193":"trn_df.head()","4cb2d68a":"trn_df.columns = [0,1]\n\ntrn_df.to_csv('..\/working\/trn.csv',index=False)\n\npath = Path('..\/input\/train')\n\ntfms = []","6d9cb5a4":"src = ImageItemList.from_df(trn_df,'..\/input\/train',suffix='.tif')\nsrc = src.random_split_by_pct()\nsrc = src.label_from_df()\nsrc = src.transform(tfms)\nsrc = src.databunch(path='..\/input\/train').normalize(imagenet_stats)","c5e281ae":"x,y = src.one_batch(DatasetType.Train,True,True)","2dd9e703":"grab_idx(x,63).size()","c74b9454":"src.show_batch(3)","88e69be9":"MODEL_PATH = \"\/tmp\/model\/\"","65687563":"gc.collect()\nlearn = create_cnn(src, models.resnet34, metrics=error_rate, bn_final=True,model_dir=MODEL_PATH)","9e053abb":"learn.lr_find()","11d7e05c":"learn.recorder.plot()","55bd07cb":"learn.fit_one_cycle(3, slice(1e-2), pct_start=0.8)","d6df7e1f":"learn.unfreeze()\nlearn.fit_one_cycle(3, max_lr=slice(1e-6,1e-3), pct_start=0.8)","43d15bbd":"m = learn.model.eval();","6579c595":"## was trying to make code modular : TODO\nclass Heatmap:\n    def __init__(self, data, model,xs, ys, idxs):\n        self.data, self.m = data, model\n        # self.ds = data.train_ds if mode == 'train' else data.valid_ds\n        self.xs, self.ys ,self.idxs = xs, ys, idxs\n        # self.xb,_ = self.data.one_item(self.xs)\n\n    def get_hm(self,idx): # this will be called by plot_* func\n        \n        xb_im = Image(self.data.denorm(self.xb)[0]) # this will the image to display\n        self.xb = self.xb.cuda() # pushed the xb to GPU\n        hook_a, hook_g = self.hooked_backward()\n        acts  = hook_a.stored[0].cpu()\n        avg_acts = acts.mean(0)\n        grad = hook_g.stored[0][0].cpu()\n        grad_chan = grad.mean(1).mean(1)\n        hm = (acts * grad_chan[...,None,None]).mean(0)\n        return xb_im, y, hm\n    @classmethod\n    def plot_rand(cls, data, model, mode='train'):\n        pass\n    @classmethod\n    def plot_pos(cls, data, model, count = 4, mode='train'):\n        dtype = DatasetType.Train if mode == 'train' else DatasetType.Valid\n        xs, ys = data.one_batch(dtype, True, True)\n        idxs = np.argwhere(y)[0][:count]\n        return cls(data, model, xs, ys, idxs)\n    @classmethod\n    def plot_neg(cls, data, model, mode='train'):\n        pass\n    \n    def hooked_backward(self):\n        with hook_output(self.m[0]) as hook_a: \n            with hook_output(self.m[0], grad=True) as hook_g:\n                preds = self.m(self.xb)\n                preds[0,int(self.y)].backward()\n        return hook_a,hook_g","8fcdf71e":"def show_heatmap():\n    _,ax = plt.subplots()\n    xb_im.show(ax)\n    ax.imshow(hm, alpha=0.6, extent=(0,96,96,0),\n              interpolation='bilinear', cmap='magma');","359c68cc":"def get_xb_im(idx):\n    x,y = src.valid_ds[idx]\n    xb,_ = src.one_item(x)\n    xb_im = Image(src.denorm(xb)[0])\n    return xb_im,y","69b82b75":"def get_hm(idx):\n    x,y = src.train_ds[idx]\n    xb,_ = src.one_item(x)\n    xb = xb.cuda()\n    hook_a,hook_g = hooked_backward(y,m,xb)\n    acts  = hook_a.stored[0].cpu()\n    avg_acts = acts.mean(0)\n    grad = hook_g.stored[0][0].cpu()\n    grad_chan = grad.mean(1).mean(1)\n    hm = (acts*grad_chan[...,None,None]).mean(0)\n    return hm","a9b4e7e5":"def hooked_backward(cat,m,xb):\n    with hook_output(m[0]) as hook_a: \n        with hook_output(m[0], grad=True) as hook_g:\n            preds = m(xb)\n            preds[0,int(cat)].backward()\n    return hook_a,hook_g","c046201c":"def plot(r,c,cmap='magma',figsize=(10,10)):\n    axes = plt.subplots(r, c, figsize=figsize)[1]\n    for i in range(r):\n        for j in range(c): \n            INDEX = np.random.randint(0,1000)\n            hm = get_hm(INDEX)\n            xb_im,y = get_xb_im(INDEX)\n            xb_im.show(axes[i][j])\n            axes[i][j].imshow(hm, alpha=0.6, extent=(0,96,96,0),\n                      interpolation='bilinear', cmap=cmap);\n            axes[i][j].set_title(y)\n            plt.axis('off')\n            plt.tight_layout()","1c3d4902":"plot(4,4,figsize=(10,10))","ac3b2d7b":"plot(4,4,'PuOr',figsize=(10,10))","948f9c44":"plot(4,4,'plasma')","4968cc02":"plot(4,4,'inferno')","0b93d95e":"plot(4,4,'cividis')","9e385a0c":"plot(4,4,'cool')","3ac7bbd6":"plot(4,4,'hsv')","be4e49e8":"plot(4,4,'hsv')","d9bf7401":"plot(4,4,'tab20b')","feab1175":"plot(4,4,'flag')","b5889ba1":"plot(4,4,'spring')","c50026fa":"try out few more visualization  https:\/\/matplotlib.org\/tutorials\/colors\/colormaps.html","dc1ff8da":"This has been inspired from this wonderful paper! [https:\/\/arxiv.org\/pdf\/1610.02391.pdf ]"}}