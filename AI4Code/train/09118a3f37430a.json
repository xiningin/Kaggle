{"cell_type":{"8d6622b2":"code","161cb182":"code","2c58c383":"code","2d0b059f":"code","38305ba7":"code","6455d58e":"code","a2b061bf":"code","5bf8a8c5":"code","c2c5dba8":"code","445cc84d":"markdown"},"source":{"8d6622b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","161cb182":"!pip install kaggle\nfrom google.colab import files\nfiles.upload()","2c58c383":"!ls -lha kaggle.json\n\n!pip uninstall -y kaggle\n!pip install --upgrade pip\n!pip install kaggle==1.5.6","2d0b059f":"!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\n!chmod 600 ~\/.kaggle\/.kaggle.json\n!kaggle -v\n\n!kaggle competitions download -c star-classifier\n!unzip star-classifier.zip","38305ba7":"import torch.optim as optim\nimport torch\n\ntorch.cuda.is_available()\ntorch.manual_seed(1)\n\nimport numpy as np \nimport torch\nimport pandas as pd\n\npd_train=pd.read_csv('star_train.csv')\nx_train=np.array(pd_train.iloc[:,1:7])\ny_train=np.array(pd_train.iloc[:,7])\n\nx_train=torch.FloatTensor(x_train)\ny_train=torch.LongTensor(y_train)\n\nprint(x_train.shape)\nprint(y_train.shape)\n\nprint(x_train)\nprint(y_train)","6455d58e":"import torch.nn.functional as F\nimport torch\nimport torch.optim as optim\nimport numpy as np\nimport torch.nn.functional as F\n\nnb_class = 6\nnb_data=len(y_train)\n\nW = torch.zeros((6, 6), requires_grad=True)\nb = torch.zeros(6, requires_grad=True)\n\noptimizer = optim.SGD([W, b], lr=1e-1,momentum=0.8)\nnb_epochs = 10000\n\nfor epoch in range(nb_epochs + 1):\n\n    cost = F.cross_entropy(x_train.matmul(W)+b,y_train)\n\n    optimizer.zero_grad()\n    cost.backward()\n    optimizer.step()\n\n    if epoch % 500 == 0:\n        print('Epoch {:4d}\/{} Cost: {:.6f}'.format(\n            epoch, nb_epochs, cost.item()\n        ))","a2b061bf":"test = pd.read_csv('star_test.csv')\nx_test = np.array(test.iloc[:,1:7])\n\nx_test=torch.FloatTensor(x_test)\n\nprint(x_test.shape)\nprint(x_test)","5bf8a8c5":"hypo = F.softmax(x_test.matmul(W)+b,dim=1)\npredict=torch.argmax(hypo, dim=1)\n\npd_correct=pd.read_csv('star_solution.csv')\nanswer = torch.LongTensor(np.array(pd_correct.iloc[:,1]))\n\ncorrect_predict=predict==answer\n\naccuracy=correct_predict.sum().item() \/ len(correct_predict)\nprint('accuracy : {:.6f}'.format(accuracy))","c2c5dba8":"id = np.array([i for i in range(len(x_test))]).reshape(-1,1)\nlabel=predict.detach().numpy().reshape(-1,1)\nresult = np.hstack((id,label))\n\ndf=pd.DataFrame(result,columns=('Id','Label'))\ndf.to_csv('baseline.csv',index=False,header=True)","445cc84d":"\uc601\uc0c1\uc5d0\ub294 \ubca0\uc774\uc2a4\ub77c\uc778\uc744 0.9\ub85c \uc62c\ub838\ub2e4\uace0 \ub9d0\uc500 \ub4dc\ub838\uc9c0\ub9cc, \ubca0\uc774\uc2a4\ub77c\uc778\uc744 0.6\uc73c\ub85c \uc218\uc815\ud588\uc2b5\ub2c8\ub2e4!\n\ubca0\uc774\uc2a4\ub77c\uc778\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \uc601\uc0c1\uc5d0 \uac19\uc774 \ub179\ud654\ud574\ub450\uc5c8\uc2b5\ub2c8\ub2e4. \n\n\n\nhttps:\/\/youtu.be\/uT8oNi5iSWU\n\n\n![slide-000.JPG](attachment:slide-000.JPG)![slide-001.JPG](attachment:slide-001.JPG)![slide-002.JPG](attachment:slide-002.JPG)![slide-003.JPG](attachment:slide-003.JPG)![slide-004.JPG](attachment:slide-004.JPG)![slide-005.JPG](attachment:slide-005.JPG)![slide-006.JPG](attachment:slide-006.JPG)![slide-007.JPG](attachment:slide-007.JPG)![slide-008.JPG](attachment:slide-008.JPG)![slide-009.JPG](attachment:slide-009.JPG)"}}