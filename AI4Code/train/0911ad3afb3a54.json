{"cell_type":{"cf7a00a8":"code","496daf9a":"code","4b9dc933":"code","9e3681e3":"code","599e0f71":"code","4254ba72":"code","98b070ec":"code","7c83d41a":"code","e0728db7":"code","7b5b8612":"code","3df575f8":"code","3e52094b":"code","aad2bb97":"code","abbf4d1d":"code","52d8dbc7":"code","265eebc0":"code","fe0449f9":"code","a2d9a120":"code","12e2c8f6":"code","6064cf51":"code","e067b636":"code","d1a2ce7a":"code","c155352e":"code","d8545c48":"code","085b325e":"code","04145feb":"code","c9675bb0":"code","59cd6722":"code","d5c1b47a":"code","c3ba2f73":"code","7f120d50":"code","396758c5":"markdown","7e388522":"markdown","4fe8b479":"markdown","1b7fe462":"markdown","9dc27b29":"markdown","2a76cbb3":"markdown","7bbdda56":"markdown","c6eb7a5f":"markdown","11b9fb0d":"markdown","2395c869":"markdown","b97265ea":"markdown","1e5b2731":"markdown","12d09b7c":"markdown","53fa9dea":"markdown","b93ed15d":"markdown","d43890f7":"markdown","dfa5c5f8":"markdown","7ac4b612":"markdown","c0dab8d8":"markdown","e239c122":"markdown","7ffbb800":"markdown","f12704ec":"markdown","17f9e4b8":"markdown","a9527d89":"markdown","795c38e3":"markdown","c8383ce8":"markdown","feaa9962":"markdown"},"source":{"cf7a00a8":"import pandas as pd\nimport numpy as np\nimport wfdb\nimport ast\nfrom tqdm import tqdm\nimport warnings; warnings.filterwarnings('ignore')\nfrom IPython.display import display\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","496daf9a":"def load_raw_data(df, sampling_rate, path):\n    if sampling_rate == 100:\n        data = [wfdb.rdsamp(path+f) for f in tqdm(df.filename_lr)]\n    else:\n        data = [wfdb.rdsamp(path+f) for f in tqdm(df.filename_hr)]\n    data = np.array([signal for signal, meta in data])\n    return data","4b9dc933":"path = '..\/input\/ptb-xl-dataset\/ptb-xl-a-large-publicly-available-electrocardiography-dataset-1.0.1\/'\nsampling_rate=100\n\n# load and convert annotation data\nY = pd.read_csv(path+'ptbxl_database.csv', index_col='ecg_id')\nY.scp_codes = Y.scp_codes.apply(lambda x: ast.literal_eval(x))\n\n# Load raw signal data\nX = load_raw_data(Y, sampling_rate, path)\n\nprint('data shpae:', X.shape)\nY[['scp_codes']]\nY","9e3681e3":"# Load scp_statements.csv for diagnostic aggregation\nagg_df = pd.read_csv(path+'scp_statements.csv', index_col=0)\nagg_df = agg_df[agg_df.diagnostic == 1]\nprint(agg_df.shape)\nagg_df.head()","599e0f71":"def aggregate_supclass_diagnostic(y_dic):\n    tmp = []\n    for key in y_dic.keys():\n        if key in agg_df.index:\n            tmp.append(agg_df.loc[key].diagnostic_class)\n    return list(set(tmp))\n    \n# Apply diagnostic superclass\nY['diagnostic_superclass'] = Y.scp_codes.apply(aggregate_supclass_diagnostic)\nY['diagnostic_superclass_len'] = Y['diagnostic_superclass'].apply(len)\nY.loc[Y.diagnostic_superclass_len > 1, 'diagnostic_superclass']","4254ba72":"vc = Y['diagnostic_superclass_len'].value_counts()\n\nsns.set_style(\"whitegrid\")\nbar,ax = plt.subplots(figsize=(10,6))\nax = sns.barplot(x=vc.values\/vc.values.sum()*100., y=vc.index, ci=None, palette=\"muted\",orient='h' )\nax.set_title(\"Diagnostic Superclass Len Distribution\", fontsize=20)\nax.set_xlabel (\"percentage over all samples\")\nax.set_ylabel (\"diagnostic_superclass_len\")\nfor rect in ax.patches:\n    ax.text (rect.get_width(), rect.get_y() + rect.get_height() \/ 2,\"%.1f%%\"% rect.get_width(), weight='bold' )","98b070ec":"def aggregate_subclass_diagnostic(y_dic):\n    tmp = []\n    for key in y_dic.keys():\n        if key in agg_df.index:\n            tmp.append(agg_df.loc[key].diagnostic_subclass)\n    ret = list(set(tmp))\n    ret = ['sub_'+r for r in ret] # to distinguish between subclass and superclass columns\n    return ret\n\n# Apply diagnostic subclass\nY['diagnostic_subclass'] = Y.scp_codes.apply(aggregate_subclass_diagnostic)\nY['diagnostic_subclass_len'] = Y['diagnostic_subclass'].apply(len)\nY.loc[Y.diagnostic_subclass_len > 1, 'diagnostic_subclass']","7c83d41a":"vc = Y['diagnostic_subclass_len'].value_counts()\n\nsns.set_style(\"whitegrid\")\nbar,ax = plt.subplots(figsize=(10,6))\nax = sns.barplot(x=vc.values\/vc.values.sum()*100., y=vc.index, ci=None, palette=\"muted\",orient='h' )\nax.set_title(\"Diagnostic Subclass Length Distribution\", fontsize=20)\nax.set_xlabel (\"percentage over all samples\")\nax.set_ylabel (\"diagnostic_subclass_len\")\nfor rect in ax.patches:\n    ax.text (rect.get_width(), rect.get_y() + rect.get_height() \/ 2,\"%.1f%%\"% rect.get_width(), weight='bold' )","e0728db7":"Y.columns.tolist()","7b5b8612":"all_superclass = pd.Series(np.concatenate(Y['diagnostic_superclass'].values))\nall_subclass = pd.Series(np.concatenate(Y['diagnostic_subclass'].values))\nsuperclass_cols = all_superclass.unique()\nsubclass_cols = all_subclass.unique()\nupdate_cols = np.concatenate([superclass_cols, subclass_cols]) # add meta data columns\nmeta_cols = ['age', 'sex', 'height', 'weight', 'nurse', 'site', 'device',] # could add more columns as features","3df575f8":"class ClassUpdate():\n    def __init__(self, cols):\n        self.cols = cols\n\n    def __call__(self, row):\n        for sc in row['diagnostic_superclass']:\n            row[sc] = 1\n        for sc in row['diagnostic_subclass']:\n            row[sc] = 1\n            \n        return row\n\ndef get_data_by_folds(folds, x, y, update_cols, feature_cols):\n    assert len(folds)  > 0, '# of provided folds should longer than 1'\n    #print(y.strat_fold)\n    filt = np.isin(y.strat_fold.values, folds)\n    x_selected = x[filt]\n    y_selected = y[filt]\n    \n    for sc in update_cols:\n        y_selected[sc] = 0\n        \n    cls_updt = ClassUpdate(update_cols)\n    \n    y_selected = y_selected.apply(cls_updt, axis=1)\n    \n    return x_selected, y_selected[list(feature_cols)+list(update_cols)+['strat_fold']]","3e52094b":"x_all, y_all = get_data_by_folds(np.arange(1, 11), X, Y, update_cols, meta_cols)","aad2bb97":"y_all","abbf4d1d":"vc = y_all[superclass_cols].sum(axis=0)\n\nsns.set_style(\"whitegrid\")\nbar,ax = plt.subplots(figsize=(10,6))\nax = sns.barplot(x=vc.values\/y_all.shape[0]*100., y=vc.index, ci=None, palette=\"muted\",orient='h' )\nax.set_title(\"Diagnositic Superclass Distribution\", fontsize=20)\nax.set_xlabel (\"percentage over all samples\")\nax.set_ylabel (\"diagnositic superclass\")\nfor rect in ax.patches:\n    ax.text (rect.get_width(), rect.get_y() + rect.get_height() \/ 2,\"%.1f%%\"% rect.get_width(), weight='bold' )","52d8dbc7":"vc = y_all[subclass_cols].sum(axis=0)\n\nsns.set_style(\"whitegrid\")\nbar,ax = plt.subplots(figsize=(10,6))\nax = sns.barplot(x=vc.values\/y_all.shape[0]*100., y=vc.index, ci=None, palette=\"muted\",orient='h' )\nax.set_title(\"Diagnositic Subclass Distribution\", fontsize=20)\nax.set_xlabel (\"percentage over all samples\")\nax.set_ylabel (\"diagnositic subclass\")\nfor rect in ax.patches:\n    ax.text (rect.get_width(), rect.get_y() + rect.get_height() \/ 2,\"%.1f%%\"% rect.get_width(), weight='bold' )","265eebc0":"for superclass in superclass_cols:\n    \n    vc = y_all.loc[y_all[superclass] == 1][subclass_cols].sum(axis=0)\n    \n    sns.set_style(\"whitegrid\")\n    bar,ax = plt.subplots(figsize=(10,6))\n    ax = sns.barplot(x=vc.values\/y_all.shape[0]*100., y=vc.index, ci=None, palette=\"muted\",orient='h' )\n    ax.set_title(\"{} Subclass Distribution\".format(superclass), fontsize=20)\n    ax.set_xlabel (\"percentage over all samples\")\n    ax.set_ylabel (\"diagnositic subclass\")\n    for rect in ax.patches:\n        ax.text (rect.get_width(), rect.get_y() + rect.get_height() \/ 2,\"%.1f%%\"% rect.get_width(), weight='bold' )","fe0449f9":"meta_cols","a2d9a120":"fig, ax = plt.subplots(figsize=(10,6))\nplt.title('Age Distributions of Different Superclass')\n\nfor superclass in superclass_cols:\n    data = y_all.loc[y_all[superclass] == 1]['age']   \n    sns.distplot(data, label=superclass)\n\n\nplt.legend(loc='upper left')\nplt.show()","12e2c8f6":"fig, ax = plt.subplots(figsize=(10,6))\nplt.title('Height Distributions of Different Superclass')\n\nfor superclass in superclass_cols:\n    data = y_all.loc[y_all[superclass] == 1][['height']]\n    sns.distplot(data, label=superclass)\n\nplt.legend(labels=superclass_cols, loc='upper left')\nplt.show()","6064cf51":"fig, ax = plt.subplots(figsize=(10,6))\nplt.title('Height Distributions of Different Superclass')\n\nfor superclass in superclass_cols:\n    data = y_all.loc[y_all[superclass] == 1][['weight']]\n    sns.distplot(data, label=superclass)\n\nplt.legend(labels=superclass_cols, loc='upper left')\nplt.show()","e067b636":"sns.set_style(\"whitegrid\")\nbar,ax = plt.subplots(figsize=(10,6))\n    \nax.set_title(\"Diagnositic Superclass Distribution of Different Sex\", fontsize=20)\n\nall_index, all_count, all_values = [], [], []\nfor sex in y_all.sex.unique():\n    vc = y_all.loc[y_all.sex == sex][superclass_cols].sum(axis=0)\n    all_index += list(vc.index)\n    all_count += list(vc.values\/y_all.shape[0]*100.)\n    all_values += [sex]*len(vc)\n    #print(all_sex)\n    \ndf = pd.DataFrame()\ndf['diagnositic superclass'] = all_index\ndf['percentage over all samples'] = all_count\ndf['sex'] = all_values\n    \nax = sns.barplot(data=df, x=\"percentage over all samples\", y=\"diagnositic superclass\", hue=\"sex\",ci=None, orient='h')\nfor rect in ax.patches:\n    ax.text (rect.get_width(), rect.get_y() + rect.get_height() \/ 2,\"%.1f%%\"% rect.get_width(), weight='bold')","d1a2ce7a":"sns.set_style(\"whitegrid\")\nbar,ax = plt.subplots(figsize=(10,20))\n    \nax.set_title(\"Diagnositic Superclass Distribution of Different Nurse\", fontsize=20)\n\nall_index, all_count, all_values = [], [], []\nfor nurse in y_all.nurse.unique():\n    vc = y_all.loc[y_all.nurse == nurse][superclass_cols].sum(axis=0)\n    all_index += list(vc.index)\n    all_count += list(vc.values\/y_all.shape[0]*100.)\n    all_values += [nurse]*len(vc)\n    #print(all_sex)\n    \ndf = pd.DataFrame()\ndf['diagnositic superclass'] = all_index\ndf['percentage over all samples'] = all_count\ndf['nurse'] = all_values\n    \nax = sns.barplot(data=df, x=\"percentage over all samples\", y=\"diagnositic superclass\", hue=\"nurse\",ci=None, orient='h')\nfor rect in ax.patches:\n    ax.text (rect.get_width(), rect.get_y() + rect.get_height() \/ 2,\"%.1f%%\"% rect.get_width(), weight='bold')","c155352e":"sns.set_style(\"whitegrid\")\nbar,ax = plt.subplots(figsize=(10,50))\n    \nax.set_title(\"Diagnositic Superclass Distribution of Different Site\", fontsize=20)\n\nall_index, all_count, all_values = [], [], []\nfor site in y_all.site.unique():\n    vc = y_all.loc[y_all.site == site][superclass_cols].sum(axis=0)\n    all_index += list(vc.index)\n    all_count += list(vc.values\/y_all.shape[0]*100.)\n    all_values += [site]*len(vc)\n    #print(all_sex)\n    \ndf = pd.DataFrame()\ndf['diagnositic superclass'] = all_index\ndf['percentage over all samples'] = all_count\ndf['site'] = all_values\n    \nax = sns.barplot(data=df, x=\"percentage over all samples\", y=\"diagnositic superclass\", hue=\"site\",ci=None, orient='h')\nfor rect in ax.patches:\n    ax.text (rect.get_width(), rect.get_y() + rect.get_height() \/ 2,\"%.2f%%\"% rect.get_width(), weight='bold')","d8545c48":"sns.set_style(\"whitegrid\")\nbar,ax = plt.subplots(figsize=(10,20))\n    \nax.set_title(\"Diagnositic Superclass Distribution of Different Device\", fontsize=20)\n\nall_index, all_count, all_values = [], [], []\nfor device in y_all.device.unique():\n    vc = y_all.loc[y_all.device == device][superclass_cols].sum(axis=0)\n    all_index += list(vc.index)\n    all_count += list(vc.values\/y_all.shape[0]*100.)\n    all_values += [device]*len(vc)\n    #print(all_sex)\n    \ndf = pd.DataFrame()\ndf['diagnositic superclass'] = all_index\ndf['percentage over all samples'] = all_count\ndf['device'] = all_values\n\nax = sns.barplot(data=df, x=\"percentage over all samples\", y=\"diagnositic superclass\", hue=\"device\",ci=None, orient='h')\nfor rect in ax.patches:\n    ax.text (rect.get_width(), rect.get_y() + rect.get_height() \/ 2,\"%.2f%%\"% rect.get_width(), weight='bold')","085b325e":"sample_num = 5\n\nfor superclass in superclass_cols:\n    filt = y_all[superclass] == 1\n    y_selected = y_all.loc[filt]\n    x_selected = x_all[filt]\n    \n    for i in range(sample_num):\n        y_ = y_selected.iloc[i]\n        x_ = x_selected[i]\n        \n        #display(y_)\n        #print(y_.shape, x_.shape); assert False\n        bar, axes = plt.subplots(x_.shape[1], 1, figsize=(10,10))\n        title = \"Superclass = {}, Age = {}, Height = {}, Weight = {}, Sex = {}, Nurse = {}, Site = {}, Device = {}\".format(superclass, \n                                                                                                                           y_['age'], y_['height'], y_['weight'],\n                                                                                                                           y_['sex'], y_['nurse'], y_['site'], y_['device'],)\n        axes[0].set_title(title, fontsize=15)\n        \n        for c in np.arange(x_.shape[1]):\n            sns.lineplot(x=np.arange(x_.shape[0]), y=x_[:, c], ax=axes[c])\n        \n        plt.tight_layout()\n        plt.show()\n        #assert False","04145feb":"x_train, y_train = get_data_by_folds(np.arange(1, 9), X, Y, update_cols, meta_cols)\nprint('data shape', x_train.shape)\ny_train","c9675bb0":"x_valid, y_valid = get_data_by_folds([9], X, Y, update_cols, meta_cols)\nprint('data shape', x_valid.shape)\ny_valid","59cd6722":"x_test, y_test = get_data_by_folds([10], X, Y, update_cols, meta_cols)\nprint('data shape', x_test.shape)\ny_test","d5c1b47a":"id_cols = ['ecg_id']\nchannel_cols = ['channel-{}'.format(i) for i in range(12)]\n\ny_train.to_csv('train_meta.csv', index=True)\ny_train_signal = pd.DataFrame(columns=id_cols+channel_cols, index=np.arange(y_train.shape[0]*1000), dtype=np.float32)\n\necg_ids = []\nsignals = []\nfor i, ecg_id in enumerate(y_train.index.values):\n    y_train_signal.loc[i*1000:(i+1)*1000-1, 'ecg_id'] = [ecg_id]*1000\n    y_train_signal.loc[i*1000:(i+1)*1000-1, channel_cols] = x_train[i,:,:]\n\ny_train_signal['ecg_id'] = y_train_signal['ecg_id'].astype(np.int)\ny_train_signal.to_csv('train_signal.csv', index=False)\n\ndisplay(y_train) \ndisplay(y_train_signal)","c3ba2f73":"y_valid.to_csv('valid_meta.csv', index=True)\ny_valid_signal = pd.DataFrame(columns=id_cols+channel_cols, index=np.arange(y_valid.shape[0]*1000), dtype=np.float32)\n\necg_ids = []\nsignals = []\nfor i, ecg_id in enumerate(y_valid.index.values):\n    y_valid_signal.loc[i*1000:(i+1)*1000-1, 'ecg_id'] = [ecg_id]*1000\n    y_valid_signal.loc[i*1000:(i+1)*1000-1, channel_cols] = x_valid[i,:,:]\n\ny_valid_signal['ecg_id'] = y_valid_signal['ecg_id'].astype(np.int)\ny_valid_signal.to_csv('valid_signal.csv', index=False)\n\ndisplay(y_valid) \ndisplay(y_valid_signal)","7f120d50":"y_test.to_csv('test_meta.csv', index=True)\ny_test_signal = pd.DataFrame(columns=id_cols+channel_cols, index=np.arange(y_test.shape[0]*1000), dtype=np.float32)\n\necg_ids = []\nsignals = []\nfor i, ecg_id in enumerate(y_test.index.values):\n    y_test_signal.loc[i*1000:(i+1)*1000-1, 'ecg_id'] = [ecg_id]*1000\n    y_test_signal.loc[i*1000:(i+1)*1000-1, channel_cols] = x_test[i,:,:]\n\ny_test_signal['ecg_id'] = y_test_signal['ecg_id'].astype(np.int)\ny_test_signal.to_csv('test_signal.csv', index=False)\n\ndisplay(y_test) \ndisplay(y_test_signal)","396758c5":"### Train","7e388522":"### Per Superclass Age Distribution","4fe8b479":"## Load Raw Data","1b7fe462":"# EDA","9dc27b29":"### Per Nurse Superclass Distribution","2a76cbb3":"### Per Superclass ECG Examples","7bbdda56":"### Number of Superclass per ECG record","c6eb7a5f":"### Subclass Distribution of each Superclass","11b9fb0d":"# Reference\n* [Paper: Wagner, P., Strodthoff, N., Bousseljot, R.-D., Kreiseler, D., Lunze, F.I., Samek, W., Schaeffter, T. (2020), PTB-XL: A Large Publicly Available ECG Dataset. Scientific Data. https:\/\/doi.org\/10.1038\/s41597-020-0495-6](https:\/\/www.nature.com\/articles\/s41597-020-0495-6)","2395c869":"> There could be up to 4 super class for the same ecg record!","b97265ea":"### Test","1e5b2731":"### Superclass Distribution","12d09b7c":"## Reformat Data for EDA","53fa9dea":"#### Meaning of Superclassses\n* NORM: Normal ECG\n* MI:   Myocardial Infarction, a myocardial infarction (MI), commonly known as a heart attack, occurs when blood flow decreases or stops to a part of the heart, causing damage to the heart muscle [Reference](https:\/\/en.wikipedia.org\/wiki\/Myocardial_infarction)\n* STTC: ST\/T Change, ST and T wave changes may represent cardiac pathology or be a normal variant. Interpretation of the findings, therefore, depends on the clinical context and presence of similar findings on prior electrocardiograms.[Reference](https:\/\/www.uptodate.com\/contents\/ecg-tutorial-st-and-t-wave-changes)\n* CD:   Conduction Disturbance. Your heart rhythm is the way your heart beats. Conduction is how electrical impulses travel through your heart, which causes it to beat. Some conduction disorders can cause arrhythmias, or irregular heartbeats. [Reference](https:\/\/www.heart.org\/en\/health-topics\/arrhythmia\/about-arrhythmia\/conduction-disorders)\n* HYP:  Hypertrophy, Hypertrophic cardiomyopathy (HCM) is a disease in which the heart muscle becomes abnormally thick (hypertrophied). The thickened heart muscle can make it harder for the heart to pump blood. [Reference](https:\/\/www.mayoclinic.org\/diseases-conditions\/hypertrophic-cardiomyopathy\/symptoms-causes\/syc-20350198)","b93ed15d":"### Per Superclass Height Distribution","d43890f7":"### Per Site Superclass Distribution","dfa5c5f8":"## Load Data for Heart Beat Diagnostic ","7ac4b612":"### Per Device Superclass Distribution","c0dab8d8":"### Per Sex Superclass Distribution","e239c122":"### Number of Subclass per ECG record","7ffbb800":"### Per Superclass Weight Distribution","f12704ec":"### Note:\n* x_train, x_valid, x_test: 12-lead ECG signals for train, valid, and test set.\n* y_train, y_valid, y_test: fold number, ecg id, possible feature and possible target columns for modeling.\n* Columns that **should be skipped** for modeling:\n    * **strat_fold**: kept to be used cross validation within train set\n    * **ecg id**: the id for the ecg signal in the raw dataset, kept as a reference\n* Possibly Feature columns aside the heart beat signal: ['age', 'sex', 'height', 'weight', 'nurse', 'site', 'device']\n* Possibly Target columns: All superclass and subclass columns.","17f9e4b8":"According to the source of the [dataset](https:\/\/physionet.org\/content\/ptb-xl\/1.0.1\/), there are recommended ***stratified 10-folds***, where the ***same patients are kept within the same folds***. Moreover, ***9th fold and 10th are of higher quality, which are recommeded to be used as validation set and test set***. \n\n\n> 5. Cross-validation Folds: recommended 10-fold train-test splits (strat_fold) obtained via stratified sampling while respecting patient assignments, i.e. all records of a particular patient were assigned to the same fold. Records in fold 9 and 10 underwent at least one human evaluation and are therefore of a particularly high label quality. We therefore propose to use folds 1-8 as training set, fold 9 as validation set and fold 10 as test set.\n\nHere, I will split compile fold 1-8 as train sets, fold 9 as validation set, and fold 10 as test set.","a9527d89":"# Train-Valid-Test Set Splitting","795c38e3":"> There could be up to 6 sub class for the same ecg record!","c8383ce8":"### Valid","feaa9962":"### Subclass Distribution"}}