{"cell_type":{"f24fdff9":"code","859a090c":"code","b58a25b7":"code","abca0e36":"code","e7a5fef6":"code","0b8aa2f2":"code","ddc1c7d5":"code","5f0b8a47":"code","c990c107":"code","9fabe386":"code","f806f3aa":"code","bbadea36":"code","516315cf":"code","c0167dd2":"code","e7cf8915":"code","d05cef88":"code","fd72fda9":"code","d1661e90":"code","f853a50a":"code","08a05e06":"code","791112e2":"code","1ff2a4dc":"code","16fdaba1":"code","a92375b6":"markdown","0e80575f":"markdown","f2e0b773":"markdown","3f0be9ac":"markdown","b48c4e11":"markdown","4ec83f94":"markdown","6d839119":"markdown","b35fbe67":"markdown","d69265d7":"markdown","15a47019":"markdown"},"source":{"f24fdff9":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# \u5bfc\u5165\u6587\u4ef6\u4f9d\u636e\u8fd0\u884c\u7684\u73af\u5883\u548c\u5e73\u53f0\u8fdb\u884c\u5fc5\u8981\u7684\u66f4\u6539\ndata = pd.read_csv(\"..\/input\/commercial-vedio-data\/commercial_vedio_data.csv\", index_col=0)\n\n# Rename\ndata.rename(columns={'1':'Length', '2':'Move_E', '3':'Move_D', '4':'Frame_E', '5':'Frame_D', '6':'Energe_E', '7':'Energe_D', '8':'ZCR_E', '9':'ZCR_D', '10':'Centroid_E', '11':'Centroid_D', '12':'Rolloff_E', '13':'Rolloff_D', '14':'Flux_E', '15':'Flux_D', '16':'BasFreq_E', '17':'BasFreq_D', '4124':'Edge_E', '4125':'Edge_D', 'labels':'Label'}, inplace=True)\n\n# \u7279\u5f81\u540d\u548c\u6807\u7b7e\u540d\ncol_name = data.columns[:-2]\nlabel_name = data.columns[-1]\n\nprint ('\u8bad\u7ec3\u96c6\u7684\u6807\u7b7e:{}\\n'.format(label_name))\nprint ('\u8bad\u7ec3\u96c6\u7684\u7279\u5f81:{}\\n'.format(col_name))\nprint ('\u8bad\u7ec3\u96c6\u7684\u5f62\u72b6:{}\\n'.format(data.shape))","859a090c":"# \u6253\u5370data\u7684\u524d\u4e94\u884c\u6570\u636e\ndata.head()","b58a25b7":"# Label\u5206\u5e03\u7684\u76f4\u65b9\u56fe\nsns.distplot(data['Label'], kde=False)","abca0e36":"# \u63cf\u8ff0\u6570\u636e\u4e2d\u7279\u5f81\u7684\u5206\u5e03\ndata.describe()","e7a5fef6":"# \u65f6\u957fLength\u5206\u5e03\u548c\u7edf\u8ba1\ndata.drop(data[data['Length'] > 10000].index.tolist(), inplace=True)\n\nfig, axes = plt.subplots(1, 2)\nsns.barplot(x='Label', y='Length', data=data, ax=axes[0])\nsns.stripplot(x='Label', y='Length', data=data, ax=axes[1], jitter=True)\nplt.show()\n\nfacet = sns.FacetGrid(data[['Length', 'Label']], hue='Label', aspect=2)\nfacet.map(sns.kdeplot, \"Length\", shade=True)\nfacet.set(xlim=(0, 500))\nfacet.add_legend()\nfacet.set_axis_labels(\"Length\", \"Density\")","0b8aa2f2":"# \u7f3a\u5931\u503c\ndata.isnull().any()","ddc1c7d5":"# \u586b\u5145\u7f3a\u5931\u503c\ndata = data.fillna(data.mean())","5f0b8a47":"# \u91cd\u590d\u503c\ndata.drop_duplicates(inplace=True)\ndata.shape","c990c107":"# Label -1 -> 0\ndata['Label'] = data['Label'].apply(lambda x:0 if x == -1 else x)\ndata['Label'].hist()","9fabe386":"# \u5206\u79bb\u7279\u5f81\u548c\u6807\u7b7e\nX = data.drop(['Label'], axis=1)\nY = data['Label']\n\n# \u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nfrom sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(X, Y, train_size=0.75)\n\nxtrain.shape","f806f3aa":"from sklearn.ensemble import RandomForestClassifier\nrfcModel = RandomForestClassifier()\nrfcModel.fit(xtrain, ytrain)","bbadea36":"# \u5c06\u7279\u5f81\u7684\u91cd\u8981\u6027\u7a0b\u5ea6\u8fdb\u884c\u6392\u5e8f\nN_most_important = 25\n\nimp = np.argsort(rfcModel.feature_importances_)[::-1]\nimp_slct = imp[:N_most_important]\n\nFeaturesImportances = zip(col_name, map(lambda x:round(x,5), rfcModel.feature_importances_))\nFeatureRank = pd.DataFrame(columns=['Feature', 'Imp'], data=sorted(FeaturesImportances, key=lambda x:x[1], reverse=True)[:N_most_important])","516315cf":"# \u91cd\u65b0\u9009\u62e9X\nxtrain_slct = xtrain.iloc[:,imp_slct]\nxtest_slct  = xtest.iloc[:,imp_slct]","c0167dd2":"# \u7279\u5f81\u6392\u5e8f\u56fe\nax1 = fig.add_subplot(111)\nax1 = sns.barplot(x='Feature', y='Imp', data=FeatureRank)\nax1.set_xticklabels(ax1.get_xticklabels(), rotation=90)\n\nSumImp = FeatureRank\nfor i in SumImp.index:\n    if (i==0):\n        SumImp['Imp'][i] = FeatureRank['Imp'][i]\n    else:\n        SumImp['Imp'][i] = SumImp['Imp'][i-1] + FeatureRank['Imp'][i]\nax2 = ax1.twinx()\nplt.step(x=SumImp['Feature'], y=SumImp['Imp'])\n","e7cf8915":"from sklearn.decomposition import PCA\npca = PCA(n_components=N_most_important)\npca.fit(xtrain)\npca.explained_variance_ratio_","d05cef88":"# \u5bf9\u8bad\u7ec3\u96c6\u4f7f\u7528PCA\u751f\u6210\u65b0\u7279\u5f81\uff0c\u6839\u636e\u7d2f\u8ba1\u8d21\u732e\u7387\uff0c\u4fdd\u7559\u524d5\u4e2a\u4e3b\u6210\u5206\npca1 = PCA(6)\npc = pd.DataFrame(pca1.fit_transform(xtrain))\npc.index = xtrain.index\nxtrain_pca = xtrain.join(pc)","fd72fda9":"# \u5bf9\u6d4b\u8bd5\u96c6\u8fdb\u884c\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u6ce8\u610f\u6d4b\u8bd5\u96c6\u4e0a\u76f4\u63a5\u4f7f\u7528pca\u4e2d\u7684transform\u51fd\u6570\npc = pd.DataFrame(pca1.fit_transform(xtest))\npd.index = xtrain.index\nxtest_pca = xtest.join(pc)","d1661e90":"#  cut_bin\u5bf9\u8bad\u7ec3\u96c6\u8fdb\u884c\u5206\u7bb1\ndef cut_bin(df,label,max_depth,p):\n    df_bin = df[[label]]\n    df_feature = df.drop([label],axis=1)\n    dict_bin = {}\n    for col in df_feature.columns:\n        get_model = DecisionTreeClassifier(max_depth=max_depth,min_samples_leaf=int(p*len(df)))\n        get_cut_point = get_model.fit(df[col].values.reshape(-1,1),df[label].values.reshape(-1,1))\n        cut_point = get_cut_point.tree_.threshold[get_cut_point.tree_.threshold!=-2]\n        \n        N_split = np.zeros_like(df[col])\n        inter_range = []\n        if len(cut_point)==1:\n            N_split[np.array(df[col]<cut_point[0])]=1\n            N_split[np.array(df[col]>=cut_point[0])]=2\n            inter_range=[[1,-100000000,cut_point[0]],[2,cut_point[0],100000000]]\n        elif len(cut_point)>1:\n            cut_point.sort()\n            N_split[np.array(df[col]<cut_point[0])]=1\n            inter_range=[[1,-100000000,cut_point[0]]]\n            for i in range(len(cut_point)-1):\n                N_split[np.array((df[col]>=cut_point[i]) & (df[col]<cut_point[i+1]))]=i+2\n                inter_range=inter_range+[[i+2,cut_point[i],cut_point[i+1]]]\n            N_split[np.array(df[col]>=cut_point[len(cut_point)-1])]=len(cut_point)+1\n            inter_range=inter_range+[[len(cut_point)+1,cut_point[len(cut_point)-1],100000000]]\n        else:\n            N_split=1\n            inter_range=np.array([1,-100000000,100000000]).reshape(1,-1)\n        df_bin[col] = N_split\n        inter_df = pd.DataFrame(inter_range)\n        inter_df.columns=['bin','lower','upper']\n        crosstable = pd.crosstab(df_bin[col],df_bin[label])\n        crosstable.columns = ['notCommercial','Commercial']\n        crosstable['all'] = crosstable['notCommercial']+crosstable['Commercial']\n        crosstable['percent'] = crosstable['all']\/sum(crosstable['all'])\n        crosstable['c_rate'] = crosstable['Commercial']\/crosstable['all']\n        inter_df = pd.merge(inter_df, crosstable, left_on='bin', right_index=True)\n        dict_bin[col] = inter_df\n    return df_bin, dict_bin\n\n#  cut_test_bin\u5bf9\u6d4b\u8bd5\u96c6\u8fdb\u884c\u5206\u7bb1\ndef cut_test_bin(df, label, train_dict_bin):\n    df_bin = df[[label]]\n    df_feature = df.drop([label],axis=1)\n    dict_bin = {}\n    for col in df_feature.columns:\n        train_bin = train_dict_bin[col]\n        splited = pd.Series([np.nan]*len(df[col]))\n        for i in range(len(train_bin['bin'])):\n            splited[((df[col]>=train_bin['lower'][i]) & (df[col]<train_bin['upper'][i])).tolist()]=train_bin['bin'][i]\n            df_bin[col]=splited.tolist()\n        crosstable = pd.crosstab(df_bin[col],df_bin[label])\n        crosstable.columns = ['notCommercial','Commercial']\n        crosstable['all'] = crosstable['notCommercial']+crosstable['Commercial']\n        crosstable['percent'] = crosstable['all']\/sum(crosstable['all'])\n        crosstable['c_rate'] = crosstable['Commercial']\/crosstable['all']\n        inter_df = pd.merge(train_bin[['bin','lower','upper']], crosstable, left_on='bin', right_index=True, how='left')\n        dict_bin[col] = inter_df\n    return df_bin, dict_bin   ","f853a50a":"# \u4f7f\u7528\u51b3\u7b56\u6811\u8fdb\u884c\u7279\u5f81\u5206\u7bb1\nfrom sklearn.tree import DecisionTreeClassifier\ntrain = xtrain.join(ytrain)\ntest  = xtest.join(ytest)\nnew_train, train_dict_bin = cut_bin(train, 'Label', 50, 0.2)\nnew_test , test_dict_bin  = cut_test_bin(test, 'Label', train_dict_bin)\n# \u5206\u79bb\u7279\u5f81\u548c\u6807\u7b7e\nxtrain = new_train.drop(['Label'], axis=1)\nxtest  = new_test.drop(['Label'] , axis=1)\nytrain = new_train['Label']\nytest  = new_test['Label']","08a05e06":"# \u968f\u673a\u68ee\u6797\u5206\u7c7b\u5668\u8bad\u7ec3\u6a21\u578b\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(max_features=16,max_depth=12,n_estimators=2048,n_jobs=-1,random_state=0)\nrf.fit(xtrain, ytrain)","791112e2":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_auc_score, accuracy_score\n\n# AUC\u548c\u6df7\u6dc6\u77e9\u9635\u8bc4\u4f30\nytrain_pred_clf = rf.predict_proba(xtrain)\nytrain_pred = rf.predict(xtrain)\nytest_pred_clf = rf.predict_proba(xtest)\nytest_pred = rf.predict(xtest)\n\n# \u8bc4\u4f30\u8bad\u7ec3\u96c6\u6548\u679c\uff0c\u76f4\u89c2\u5224\u65ad\u662f\u5426\u8fc7\u62df\u5408\nprint ('\u5206\u7c7b\u6a21\u578b\u8bad\u7ec3\u96c6\u8868\u73b0\uff1a')\nprint ('ml train model auc score {:.6f}'.format(roc_auc_score(ytrain, ytrain_pred_clf[:,1])))\nprint ('------------------------------')\nprint ('ml train model accuracy score {:.6f}'.format(accuracy_score(ytrain, ytrain_pred)))\nprint ('------------------------------')\nthreshold = 0.5\nprint (confusion_matrix(ytrain, (ytrain_pred_clf>threshold)[:,1]))\n\n# \u8bc4\u4f30\u6d4b\u8bd5\u96c6\u6548\u679c\nprint ('\u5206\u7c7b\u6a21\u578b\u6d4b\u8bd5\u96c6\u8868\u73b0\uff1a')\nprint ('ml model auc score {:.6f}'.format(roc_auc_score(ytest, ytest_pred_clf[:,1])))\nprint ('------------------------------')\nprint ('ml model accuracy score {:.6f}'.format(accuracy_score(ytest, ytest_pred)))\nprint ('------------------------------')\nthreshold = 0.5\nprint (confusion_matrix(ytest, (ytest_pred_clf>threshold)[:,1]))\n\n# \u968f\u673a\u731c\u6d4b\u51fd\u6570\u5bf9\u6bd4\nytest_random_clf = np.random.uniform(low=0.0, high=1.0, size=len(ytest))\nprint ('random model auc score {:.6f}'.format(roc_auc_score(ytest, ytest_random_clf)))\nprint ('------------------------------')\nprint (confusion_matrix(ytest, (ytest_random_clf<=threshold).astype('int')))","1ff2a4dc":"## \u8ba1\u7b97\u5404\u9608\u503c\u4e0b\u5047\u9633\u6027\u7387\u3001\u771f\u9633\u6027\u7387\u548cAUC\nfrom sklearn.metrics import roc_curve, auc\nfpr,tpr,threshold = roc_curve(ytest,ytest_pred_clf[:,1])\nroc_auc = auc(fpr,tpr)","16fdaba1":"## \u5047\u9633\u6027\u7387\u4e3a\u6a2a\u5750\u6807\uff0c\u771f\u9633\u6027\u7387\u4e3a\u7eb5\u5750\u6807\u505a\u66f2\u7ebf\nplt.figure()\nlw = 2\nplt.figure(figsize=(10,10))\nplt.plot(fpr, tpr, color='darkorange',\n         lw=lw, \n         label='ROC curve (area = %0.2f)' % roc_auc) \nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic curve')\nplt.legend(loc=\"lower right\")\nplt.show()","a92375b6":"## \u7279\u5f81\u91cd\u8981\u6027\u6392\u5e8f\n- \u901a\u8fc7\u91cd\u8981\u6027\u503c\u8fdb\u884c\u6392\u5e8f\u753b\u51fa\u67f1\u72b6\u56fe\n- \u901a\u8fc7\u8ba1\u7b97\u524d\u7f00\u548c\u753b\u51fa\u9636\u68af\u56fe","0e80575f":"# \u8bad\u7ec3\u6a21\u578b\n\n> \u57fa\u4e8e\u4ee5\u4e0a\u7684\u7279\u5f81\u5de5\u7a0b\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\n\n- \u4f7f\u7528\u968f\u673a\u68ee\u6797\u5206\u7c7b\u5668\n- \u9884\u8bbe\u53c2\u6570\u4e3a\n    - max_features=16\n    - max_depth=12\n    - n_estimators=2048\n    - n_jobs=-1\n    - random_state=0","f2e0b773":"# \u7279\u5f81\u5de5\u7a0b\n- \u7279\u5f81\u8fc7\u6ee4\n- \u7279\u5f81\u751f\u6210\n- \u7279\u5f81\u5206\u7bb1\n\n\u53ef\u7efc\u5408\u591a\u79cd\u65b9\u6cd5\u8fdb\u884c\u7279\u5f81\u5de5\u7a0b\n- \u4e00\u662f\u4f7f\u7528\u67d0\u4e9b\u65b9\u6cd5\u751f\u6210\u65b0\u7684\u7279\u5f81\u7eb3\u5165\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\n- \u4e8c\u662f\u901a\u8fc7\u67d0\u4e9b\u65b9\u6cd5\u8fdb\u884c\u7279\u5f81\u8fc7\u6ee4\uff0c\u51cf\u5c11\u7eb3\u5165\u6a21\u578b\u7684\u7279\u5f81\u6570\u91cf\n- \u4e09\u662f\u5bf9\u8fde\u7eed\u7279\u5f81\u8fdb\u884c\u7279\u5f81\u5206\u7bb1\uff0c\u79bb\u6563\u7279\u5f81\u8fdb\u884c\u7279\u5f81\u7ec4\u5408\u3002","3f0be9ac":"## PCA\n\n> \u4f7f\u7528PCA\u8fdb\u884c\u7279\u5f81\u751f\u6210\uff0c\u5373\u4e0e\u9009\u62e9\u51fa\u7684\u4e3b\u6210\u5206\u4e0e\u539f\u6570\u636e\u5408\u5e76\uff0c\u80fd\u591f\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u63d0\u9ad8\u9884\u6d4b\u7cbe\u51c6\u5ea6\n\n- \u5bf9\u8bad\u7ec3\u96c6\u4f7f\u7528PCA\u751f\u6210\u65b0\u7279\u5f81\uff0c\u6839\u636e\u7d2f\u8ba1\u8d21\u732e\u7387\uff0c\u4fdd\u7559\u524d5\u4e2a\u4e3b\u6210\u5206\n- \u5bf9\u6d4b\u8bd5\u96c6\u8fdb\u884c\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u6ce8\u610f\u6d4b\u8bd5\u96c6\u4e0a\u76f4\u63a5\u4f7f\u7528pca\u4e2d\u7684transform\u51fd\u6570\uff0c\u76f8\u540c\u65b9\u6cd5\u5904\u7406\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6","b48c4e11":"## \u7279\u5f81\u5206\u7bb1By\u51b3\u7b56\u6811\n- \u4f7f\u7528cut_bin\u548ccut_test_bin\u57fa\u4e8e\u51b3\u7b56\u6811\u8fdb\u884c\u5206\u7bb1\n- \u91cd\u65b0\u83b7\u5f97\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6","4ec83f94":"# \u4efb\u52a1\n- \u4e3a\u4e86\u5438\u5f15\u89c2\u4f17\u7684\u6ce8\u610f\u529b\uff0c\u5e7f\u544a\u89c6\u9891\u7684\u957f\u5ea6\u3001\u97f3\u9891\u3001\u6587\u672c\u4f4d\u7f6e\u548c\u753b\u9762\u4f1a\u6709\u4e0e\u4f17\u4e0d\u540c\u4e4b\u5904\u3002\n- \u6211\u4eec\u5c06\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u7684\u65b9\u6cd5\u6784\u5efa\u4e00\u5957\u5546\u7528\u5e7f\u544a\u8bc6\u522b\u7cfb\u7edf\u6765\u9884\u6d4b\u6296\u97f3\u77ed\u89c6\u9891\u662f\u5426\u4e3a\u5546\u7528\u5e7f\u544a\uff0c\u901a\u8fc7\u5bf9Tik Tok\u5e73\u53f0\u4e0a\u89c6\u9891\u7684\u65f6\u957f\u3001\u58f0\u97f3\u9891\u8c31\u3001\u89c6\u9891\u5149\u8c31\u3001\u6587\u5b57\u5206\u5e03\u3001\u753b\u9762\u53d8\u5316\u7b49\u7279\u5f81\uff0c\u8fdb\u884c\u7279\u5f81\u62bd\u53d6\u3001\u7279\u5f81\u8fc7\u6ee4\u7b49\u65b9\u5f0f\u5904\u7406\u540e\u8fdb\u884c\u5efa\u6a21\uff0c\u6765\u5feb\u901f\u533a\u5206\u51fa\u6295\u7a3f\u89c6\u9891\u4e2d\u7684\u5546\u4e1a\u5e7f\u544a\u3002\n- \u5177\u4f53\u5305\u62ec\n    - \u4e86\u89e3\u8fd9\u4efd\u6570\u636e\n    - \u8fdb\u884c\u5fc5\u8981\u7684\u6570\u636e\u6e05\u6d17\n    - \u81ea\u7531\u8fdb\u884c\u7279\u5f81\u751f\u6210\u3001\u7279\u5f81\u9009\u62e9\u3001\u7279\u5f81\u964d\u7ef4\u7b49\u5de5\u4f5c\n    - \u5efa\u7acb\u5408\u9002\u7684\u9884\u6d4b\u6a21\u578b\uff0c\u5e76\u8fdb\u884c\u8c03\u53c2\n    - \u9009\u7528\u5408\u9002\u7684\u65b9\u5f0f\u8fdb\u884c\u6a21\u578b\u96c6\u6210\uff0c\u4f18\u5316\u6a21\u578b\n\n# \u6570\u636e\n- \u5e7f\u544a\u6570\u636e\u96c6\u5305\u62ec5\u6b21\u91c7\u6837\u3001\u603b\u957f\u5ea6\u4e3a150\u5c0f\u65f6\u7684\u6296\u97f3\u89c6\u9891\u4e2d\u63d0\u53d6\u7684\u89c6\u9891\u955c\u5934\u7684\u6807\u51c6\u89c6\u542c\u7279\u5f81\uff0c\u4ee5270 fps\u7684\u5206\u8fa8\u7387\u5f55\u5236\u89c6\u9891\uff0c\u5206\u8fa8\u7387\u4e3a720 X 576\u3002\u5c06\u89c6\u9891\u6570\u636e\u5904\u7406\u4e3a\u89c6\u9891\u7684\u65f6\u957f\u3001\u58f0\u97f3\u9891\u8c31\u3001\u89c6\u9891\u5149\u8c31\u3001\u6587\u5b57\u5206\u5e03\u548c\u753b\u9762\u53d8\u5316\u7b49\u7279\u5f81\uff0c\u4ee5\u5224\u65ad\u5176\u662f\u5426\u4e3a\u5546\u7528\u5e7f\u544a\u3002\u6700\u7ec8\u7684\u6570\u636e\u5305\u542b1\u4e2a\u6807\u7b7e\u3001230\u4e2a\u7279\u5f81\u3002\n- \u6570\u636e\u63d0\u4f9b\u4e86129685\u4efd\u89c6\u9891\u7684\u4fe1\u606f\uff0c\u50a8\u5b58\u5728commercial_vedio_data.csv\u6587\u4ef6\u4e2d\uff0c\u5176\u4e2dlabels\u4e3a\u6807\u7b7e\u3002\n- \u6570\u636e\u96c6\u5171\u5305230\u4e2a\u7279\u5f81\uff0c\u6db5\u76d6\u89c6\u9891\u7684\u65f6\u957f\u3001\u58f0\u97f3\u9891\u8c31\u3001\u89c6\u9891\u5149\u8c31\u3001\u6587\u5b57\u5206\u5e03\u548c\u753b\u9762\u53d8\u5316\u7b49\u65b9\u9762\u3002\n- \u5177\u4f53\u63cf\u8ff0\u8be6\u89c1\uff1a\u6570\u636e\u96c6\u548c\u53d8\u91cf\u8bf4\u660e.pdf\n\n## \u89c6\u89c9\u7279\u5f81\n- \u89c6\u9891\u955c\u5934\u957f\u5ea6Length  1\n- \u6bcf\u4e2a\u89c6\u9891\u955c\u5934\u7684\u5c4f\u5e55\u6587\u672c\u5206\u5e03Text    92-122\n- \u8fd0\u52a8\u5206\u5e03Move      2-3     18-58\n- \u5e27\u5dee\u5f02\u5206\u5e03Frame    4-5     59-91\n- \u8fb9\u7f18\u53d8\u5316\u7387Edge    4124-4125\n\n## \u97f3\u9891\u7279\u5f81\n- \u77ed\u671f\u80fd\u91cfEnerge      6-7\n- \u96f6\u4ea4\u53c9\u7387ZCR      8-9\n- \u5149\u8c31\u8d28\u5fc3Centroid      10-11\n- \u5149\u8c31\u901a\u91cfFlux      14-15\n- \u9891\u8c31\u6eda\u964d\u9891\u7387Rolloff  12-13\n- \u57fa\u9891BasFreq          16-17\n- \u97f3\u9891\u8bcd\u5305MFCC  123-4123","6d839119":"# \u6a21\u578b\u8bc4\u4f30\n- \u8bc4\u4ef7\u8bad\u7ec3\u96c6\u8868\u73b0\n- \u8bc4\u4ef7\u6d4b\u8bd5\u96c6\u8868\u73b0\n- \u968f\u673a\u731c\u6d4b\u51fd\u6570\u5bf9\u6bd4","b35fbe67":"## \u7279\u5f81\u9009\u62e9By\u968f\u673a\u68ee\u6797\n- \u4f7f\u7528\u968f\u673a\u68ee\u6797\u8fdb\u884c\u7279\u5f81\u9009\u62e9\n- \u8bad\u7ec3\u96c6\u62df\u5408\u968f\u673a\u68ee\u6797\u6a21\u578b\n- \u7528\u4e8e\u83b7\u5f97feature_importances_","d69265d7":"# \u6e05\u6d17\u6570\u636e\n- \u67e5\u770b\u3001\u586b\u5145\u7f3a\u5931\u503c\n- \u53bb\u9664\u91cd\u590d\u6837\u672c\n- \u65e0\u79bb\u6563\u578b\u53d8\u91cf\uff0c\u65e0\u9700get_dummies","15a47019":"# \u6570\u636e\u7684\u63a2\u7d22\u4e0e\u95ee\u9898\u5206\u6790\n- \u5bfc\u5165\u5e93\n- \u5bfc\u5165\u6570\u636e\u96c6\n- \u83b7\u5f97\u7279\u5f81\u548c\u6807\u7b7e\n- \u91cd\u547d\u540d\u6807\u7b7e\n- \u6570\u636e\u6574\u4f53\u63cf\u8ff0\n- \u67e5\u770b\u5206\u5e03"}}