{"cell_type":{"5700c71b":"code","525ac210":"code","de1ff7d1":"code","022038f4":"code","d31b4be4":"code","d9435782":"code","61a78b21":"code","ca44bc42":"code","c59c8391":"code","570a2137":"code","902744fe":"code","bbdce03f":"code","b748c3a7":"code","6d8f6bb1":"code","595579a9":"code","e0a3c45b":"code","0a309110":"code","43ec6525":"code","6c4cf12a":"code","e18cb76a":"code","f4f368ef":"code","14139f3d":"code","f74d60f1":"code","8bf87327":"code","0d5b0a74":"code","6b9e83c1":"code","c90da5b6":"code","2ef4419f":"code","639dd721":"code","4b300f89":"code","9289e3de":"code","96d1a780":"code","805cb35f":"code","78f1651f":"code","7fa394a1":"code","689bfe17":"code","7532ea0b":"code","ddce6d51":"code","27615231":"code","ae8dcc01":"code","c28afe4b":"code","6b16d3f3":"code","56d24664":"code","21a152bc":"code","e76e8437":"code","0846520d":"code","771db5ae":"code","e62dc89e":"code","df051aa2":"code","3296717e":"code","4472b346":"code","980660a6":"code","c0f53d90":"code","40f47d41":"markdown","10b2e75c":"markdown","5c679af5":"markdown","2bde058a":"markdown","d27a07b7":"markdown","8b1c9048":"markdown","63e4aa01":"markdown","e65179b4":"markdown","e844fcea":"markdown","b8b4300b":"markdown","bf12cfe2":"markdown","94547684":"markdown"},"source":{"5700c71b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, normalize\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\n","525ac210":"creditcard_df = pd.read_csv('..\/input\/ccdata\/CC GENERAL.csv')\n","de1ff7d1":"creditcard_df","022038f4":"creditcard_df.info() ","d31b4be4":"creditcard_df.describe()","d9435782":"# Let's see who made one off purchase of $40761!\ncreditcard_df[creditcard_df['ONEOFF_PURCHASES'] == 40761.25]\n","61a78b21":"creditcard_df['CASH_ADVANCE'].max()","ca44bc42":"# Let's see who made cash advance of $47137!\n# This customer made 123 cash advance transactions!!\n# Never paid credit card in full\n\ncreditcard_df[creditcard_df['CASH_ADVANCE'] == 47137.211760000006]\n","c59c8391":"# Let's see if we have any missing data, luckily we don't!\nsns.heatmap(creditcard_df.isnull(), yticklabels = False, cbar = False, cmap=\"Blues\")\n","570a2137":"creditcard_df.isnull().sum()","902744fe":"# Fill up the missing elements with mean of the 'MINIMUM_PAYMENT' \ncreditcard_df.loc[(creditcard_df['MINIMUM_PAYMENTS'].isnull() == True), 'MINIMUM_PAYMENTS'] = creditcard_df['MINIMUM_PAYMENTS'].mean()\n","bbdce03f":"# Fill up the missing elements with mean of the 'CREDIT_LIMIT' \ncreditcard_df.loc[(creditcard_df['CREDIT_LIMIT'].isnull() == True), 'CREDIT_LIMIT'] = creditcard_df['CREDIT_LIMIT'].mean()","b748c3a7":" sns.heatmap(creditcard_df.isnull(), yticklabels = False, cbar = False, cmap=\"Blues\")","6d8f6bb1":"# Let's see if we have duplicated entries in the data\ncreditcard_df.duplicated().sum()","595579a9":"# Let's drop Customer ID since it has no meaning here \ncreditcard_df.drop(\"CUST_ID\", axis = 1, inplace= True)","e0a3c45b":"creditcard_df.head()","0a309110":"n = len(creditcard_df.columns)\nn","43ec6525":"creditcard_df.columns","6c4cf12a":"plt.figure(figsize=(10,50))\nfor i in range(len(creditcard_df.columns)):\n    plt.subplot(17, 1, i+1)\n    sns.distplot(creditcard_df[creditcard_df.columns[i]], kde_kws={\"color\": \"b\", \"lw\": 3, \"label\": \"KDE\"}, hist_kws={\"color\": \"g\"})\n    plt.title(creditcard_df.columns[i])\n\nplt.tight_layout()","e18cb76a":"sns.pairplot(creditcard_df)\n# Correlation between 'PURCHASES' and ONEOFF_PURCHASES & INSTALMENT_PURCHASES \n# Trend between 'PURCHASES' and 'CREDIT_LIMIT' & 'PAYMENTS'\n","f4f368ef":"correlations = creditcard_df.corr()\n","14139f3d":"f, ax = plt.subplots(figsize = (20, 20))\nsns.heatmap(correlations, annot = True)\n\n# 'PURCHASES' have high correlation between one-off purchases, 'installment purchases, purchase transactions, credit limit and payments. \n# Strong Positive Correlation between 'PURCHASES_FREQUENCY' and 'PURCHASES_INSTALLMENT_FREQUENCY'\n","f74d60f1":"# Let's scale the data first\nscaler = StandardScaler()\ncreditcard_df_scaled = scaler.fit_transform(creditcard_df)","8bf87327":"creditcard_df_scaled.shape","0d5b0a74":"creditcard_df_scaled","6b9e83c1":"scores_1 = []\n\nrange_values = range(1, 20)\n\nfor i in range_values:\n    kmeans = KMeans(n_clusters = i)\n    kmeans.fit(creditcard_df_scaled)\n    scores_1.append(kmeans.inertia_)\n\nplt.plot(scores_1, 'bx-')\nplt.title('Finding the right number of clusters')\nplt.xlabel('Clusters')\nplt.ylabel('Scores') \nplt.show()\n\n# From this we can observe that, 4th cluster seems to be forming the elbow of the curve. \n# However, the values does not reduce linearly until 8th cluster. \n# Let's choose the number of clusters to be 7.","c90da5b6":"kmeans = KMeans(8)\nkmeans.fit(creditcard_df_scaled)\nlabels = kmeans.labels_","2ef4419f":"kmeans.cluster_centers_.shape","639dd721":"\ncluster_centers = pd.DataFrame(data = kmeans.cluster_centers_, columns = [creditcard_df.columns])\ncluster_centers           ","4b300f89":"# In order to understand what these numbers mean, let's perform inverse transformation\ncluster_centers = scaler.inverse_transform(cluster_centers)\ncluster_centers = pd.DataFrame(data = cluster_centers, columns = [creditcard_df.columns])\ncluster_centers\n\n# First Customers cluster (Transactors): Those are customers who pay least amount of intrerest charges and careful with their money, Cluster with lowest balance ($104) and cash advance ($303), Percentage of full payment = 23%\n# Second customers cluster (revolvers) who use credit card as a loan (most lucrative sector): highest balance ($5000) and cash advance (~$5000), low purchase frequency, high cash advance frequency (0.5), high cash advance transactions (16) and low percentage of full payment (3%)\n# Third customer cluster (VIP\/Prime): high credit limit $16K and highest percentage of full payment, target for increase credit limit and increase spending habits\n# Fourth customer cluster (low tenure): these are customers with low tenure (7 years), low balance \n","9289e3de":"# Labels associated to each data point\nlabels.shape ","96d1a780":"labels.max()","805cb35f":"labels.min()","78f1651f":"y_kmeans = kmeans.fit_predict(creditcard_df_scaled)\ny_kmeans\n","7fa394a1":"# concatenate the clusters labels to our original dataframe\ncreditcard_df_cluster = pd.concat([creditcard_df, pd.DataFrame({'cluster':labels})], axis = 1)\ncreditcard_df_cluster.head()","689bfe17":"# Plot the histogram of various clusters\nfor i in creditcard_df.columns:\n    plt.figure(figsize = (35, 5))\n    for j in range(8):\n        plt.subplot(1,8,j+1)\n        cluster = creditcard_df_cluster[creditcard_df_cluster['cluster'] == j]\n        cluster[i].hist(bins = 20)\n        plt.title('{}    \\nCluster {} '.format(i,j))\n  \n    plt.show()\n\n","7532ea0b":"# Obtain the principal components \npca = PCA(n_components=2)\nprincipal_comp = pca.fit_transform(creditcard_df_scaled)\nprincipal_comp","ddce6d51":"# Create a dataframe with the two components\npca_df = pd.DataFrame(data = principal_comp, columns =['pca1','pca2'])\npca_df.head()","27615231":"# Concatenate the clusters labels to the dataframe\npca_df = pd.concat([pca_df,pd.DataFrame({'cluster':labels})], axis = 1)\npca_df.head()","ae8dcc01":"plt.figure(figsize=(10,10))\nax = sns.scatterplot(x=\"pca1\", y=\"pca2\", hue = \"cluster\", data = pca_df, palette =['red','green','blue','pink','yellow','gray','purple', 'black'])\nplt.show()","c28afe4b":"from tensorflow.keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling2D, MaxPooling2D, Dropout\nfrom tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras.initializers import glorot_uniform\nfrom keras.optimizers import SGD\n\nencoding_dim = 7\n\ninput_df = Input(shape=(17,))\n\n\n# Glorot normal initializer (Xavier normal initializer) draws samples from a truncated normal distribution \n\nx = Dense(encoding_dim, activation='relu')(input_df)\nx = Dense(500, activation='relu', kernel_initializer = 'glorot_uniform')(x)\nx = Dense(500, activation='relu', kernel_initializer = 'glorot_uniform')(x)\nx = Dense(2000, activation='relu', kernel_initializer = 'glorot_uniform')(x)\n\nencoded = Dense(10, activation='relu', kernel_initializer = 'glorot_uniform')(x)\n\nx = Dense(2000, activation='relu', kernel_initializer = 'glorot_uniform')(encoded)\nx = Dense(500, activation='relu', kernel_initializer = 'glorot_uniform')(x)\n\ndecoded = Dense(17, kernel_initializer = 'glorot_uniform')(x)\n\n# autoencoder\nautoencoder = Model(input_df, decoded)\n\n#encoder - used for our dimention reduction\nencoder = Model(input_df, encoded)\n\nautoencoder.compile(optimizer= 'adam', loss='mean_squared_error')\n","6b16d3f3":"creditcard_df_scaled.shape","56d24664":"autoencoder.fit(creditcard_df_scaled, creditcard_df_scaled, batch_size = 128, epochs = 25,  verbose = 1)","21a152bc":"autoencoder.save_weights('autoencoder.h5')","e76e8437":"pred = encoder.predict(creditcard_df_scaled)","0846520d":"pred.shape","771db5ae":"scores_2 = []\n\nrange_values = range(1, 20)\n\nfor i in range_values:\n    kmeans = KMeans(n_clusters= i)\n    kmeans.fit(pred)\n    scores_2.append(kmeans.inertia_)\n\nplt.plot(scores_2, 'b+-')\nplt.title('Finding right number of clusters')\nplt.xlabel('Clusters')\nplt.ylabel('scores') \nplt.show()","e62dc89e":"plt.plot(scores_1, 'bx-', color = 'r')\nplt.plot(scores_2, 'bx-', color = 'g')","df051aa2":"kmeans = KMeans(4)\nkmeans.fit(pred)\nlabels = kmeans.labels_\ny_kmeans = kmeans.fit_predict(creditcard_df_scaled)","3296717e":"df_cluster_dr = pd.concat([creditcard_df, pd.DataFrame({'cluster':labels})], axis = 1)\ndf_cluster_dr.head()","4472b346":"pca = PCA(n_components=2)\nprin_comp = pca.fit_transform(pred)\npca_df = pd.DataFrame(data = prin_comp, columns =['pca1','pca2'])\npca_df.head()","980660a6":"pca_df = pd.concat([pca_df,pd.DataFrame({'cluster':labels})], axis = 1)\npca_df.head()","c0f53d90":"plt.figure(figsize=(10,10))\nax = sns.scatterplot(x=\"pca1\", y=\"pca2\", hue = \"cluster\", data = pca_df, palette =['red','green','blue','yellow'])\nplt.show()","40f47d41":"#  APPLY K-MEANS ","10b2e75c":"# VISUALIZE AND EXPLORE DATASET","5c679af5":"- Mean balance is $1564 \n= Balance frequency is frequently updated on average ~0.9\n- Purchases average is $1000\n- one off purchase average is ~$600\n- Average purchases frequency is around 0.5\n- average ONEOFF_PURCHASES_FREQUENCY, PURCHASES_INSTALLMENTS_FREQUENCY, and CASH_ADVANCE_FREQUENCY are generally low\n- Average credit limit ~ 4500\n- Percent of full payment is 15%\n- Average tenure is 11 years","2bde058a":"# UNDERSTAND THE PROBLEM STATEMENT ","d27a07b7":"# APPLY AUTOENCODERS ","8b1c9048":"# IMPORT LIBRARIES AND DATASETS","63e4aa01":"#  APPLY PCA AND VISUALIZE THE RESULTS","e65179b4":"### PERFORM DIMENSIONALITY REDUCTION USING AUTOENCODERS","e844fcea":"- distplot combines the matplotlib.hist function with seaborn kdeplot()\n- KDE Plot represents the Kernel Density Estimate\n- KDE is used for visualizing the Probability Density of a continuous variable. \n- KDE demonstrates the probability density at different values in a continuous variable. \n\n Mean of balance is $1500\n- 'Balance_Frequency' for most customers is updated frequently ~1\n- For 'PURCHASES_FREQUENCY', there are two distinct group of customers\n- For 'ONEOFF_PURCHASES_FREQUENCY' and 'PURCHASES_INSTALLMENT_FREQUENCY' most users don't do one off puchases or installment purchases frequently \n- Very small number of customers pay their balance in full 'PRC_FULL_PAYMENT'~0\n- Credit limit average is around $4500\n- Most customers are ~11 years tenure","b8b4300b":"- 18 features with 8950 points ","bf12cfe2":"# FIND THE OPTIMAL NUMBER OF CLUSTERS USING ELBOW METHOD","94547684":"- CUSTID: Identification of Credit Card holder \n- BALANCE: Balance amount left in customer's account to make purchases\n- BALANCE_FREQUENCY: How frequently the Balance is updated, score between 0 and 1 (1 = frequently updated, 0 = not frequently updated)\n- PURCHASES: Amount of purchases made from account\n- ONEOFFPURCHASES: Maximum purchase amount done in one-go\n- INSTALLMENTS_PURCHASES: Amount of purchase done in installment\n- CASH_ADVANCE: Cash in advance given by the user\n- PURCHASES_FREQUENCY: How frequently the Purchases are being made, score between 0 and 1 (1 = frequently purchased, 0 = not frequently purchased)\n- ONEOFF_PURCHASES_FREQUENCY: How frequently Purchases are happening in one-go (1 = frequently purchased, 0 = not frequently purchased)\n PURCHASES_INSTALLMENTS_FREQUENCY: How frequently purchases in installments are being done (1 = frequently done, 0 = not frequently done)\n- CASH_ADVANCE_FREQUENCY: How frequently the cash in advance being paid\n- CASH_ADVANCE_TRX: Number of Transactions made with \"Cash in Advance\"\n- PURCHASES_TRX: Number of purchase transactions made\n- CREDIT_LIMIT: Limit of Credit Card for user\n- PAYMENTS: Amount of Payment done by user\n- MINIMUM_PAYMENTS: Minimum amount of payments made by user  \n- PRC_FULL_PAYMENT: Percent of full payment paid by user\n- TENURE: Tenure of credit card service for user"}}