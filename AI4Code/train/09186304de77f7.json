{"cell_type":{"b789dff8":"code","a6f05b45":"code","12846897":"code","51f6ebeb":"code","18b9c6a7":"code","471859ab":"code","2c4684d7":"code","c196a5d4":"code","0486ab0f":"code","a5790a9c":"code","d8dd9a22":"code","5fd6da78":"code","7179ace8":"code","8a6c77dc":"code","3417023a":"code","22f302e3":"code","5a47ec3b":"code","968fd703":"code","39a3a495":"code","4c7d28e2":"code","462083b5":"code","146a35da":"code","9cbfda85":"code","d6cc9c0b":"code","b2a88666":"code","2d8fce2e":"code","67ba1bc8":"code","cc46f8a5":"code","7c558cbd":"code","df9b1df3":"markdown","856113bd":"markdown","cda42e01":"markdown","3a352e21":"markdown","b3039861":"markdown","d13f526a":"markdown","e088c238":"markdown"},"source":{"b789dff8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math as m\n%matplotlib inline\n\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\nimport sklearn.neural_network as nn","a6f05b45":"# read the dataset\ndf = pd.read_csv(\"..\/input\/london-bike-sharing-dataset\/london_merged.csv\")","12846897":"# some basic statistics about the dataset\nprint(\"Shape of data:\",df.shape)\nprint(\"Number of missing values in the data\", df.isnull().sum().sum())","51f6ebeb":"df.head()","18b9c6a7":"# some basic statistics on the numerical columns\ndf.describe().T # here .T is used to transpose","471859ab":"# It's nice to copy the dataset to another dataframe before preprocessing it\n# so if you mess up somehow, you can always compare with your previous dataset without restarting session always.\nprocessed_df = df.copy()","2c4684d7":"# Let's convert the timestamp to datatime format so we can separate date, time\nprocessed_df['timestamp'] = pd.to_datetime(processed_df['timestamp'])","c196a5d4":"#Separate year, month, day, weekday, hour from timestamp\nprocessed_df[\"year\"] = processed_df['timestamp'].dt.year\nprocessed_df[\"month\"] = processed_df['timestamp'].dt.month\nprocessed_df[\"day_of_month\"] = processed_df['timestamp'].dt.day\nprocessed_df[\"day_of_week\"] = processed_df['timestamp'].dt.weekday\nprocessed_df[\"hour\"] = processed_df['timestamp'].dt.hour\nprocessed_df.head()","0486ab0f":"# now let's see how many rows are there for each year\nsns.countplot(x=\"year\", data=processed_df)\n","a5790a9c":"# now let's see how many rows are there for each season\nsns.countplot(x=\"season\", data=processed_df)\n","d8dd9a22":"# now let's see how many rows are there for each day of the week\nsns.countplot(x=\"day_of_week\", data=processed_df)\n","5fd6da78":"# now let's see if weekend has any effect\nsns.countplot(x=\"is_weekend\", data=processed_df)\n","7179ace8":"# Let's see the effect of weather condition\nsns.countplot(x=\"weather_code\", data=processed_df)\n","8a6c77dc":"#let's look at the distribution of the count \nsns.distplot(processed_df['cnt'], label='count')\n","3417023a":"# let's see how many count they have on each day\nprocessed_df['date_year']  = processed_df[[ 'year', 'month','day_of_month']].astype(str).apply(lambda x: '-'.join(x), axis=1)\nplot_data = processed_df[[ 'cnt', 'date_year']]\nax = plot_data.groupby('date_year').sum().plot(figsize=(20,8))\nax.set_xlabel(\"Date\")\nax.set_ylabel(\"number of rides per day\")","22f302e3":"#Let's smooth the curve using rolling window mean and deviations\nplot_data = plot_data.groupby('date_year').sum()\nwindow = 7\nrolling_means = plot_data.rolling(window).mean()\nrolling_deviations = plot_data.rolling(window).std()\nax = rolling_means.plot(figsize=(20,8))\nax.set_xlabel(\"Date\")\nax.set_ylabel(\"number of rides per day\")","5a47ec3b":"#let's see count in terms of months\n\n\nplt.figure(figsize=(10,6), dpi=120)\nsns.barplot(x=\"month\", y=\"cnt\", data=processed_df);","968fd703":"#difference between seasons\nsns.pointplot(data=processed_df, x=\"day_of_week\", y=\"cnt\", hue=\"season\")","39a3a495":"#let's plot everything in groups of two\nplt.figure(figsize=(30,20))\nsns.pairplot(processed_df[['cnt', 't1', 't2', 'hum', 'wind_speed', 'weather_code', 'is_holiday', 'is_weekend', 'season', 'hour', 'month']])\nplt.show()","4c7d28e2":"#let's take a look at the correlation heatmap\n\nplt.figure(figsize=(16,8), dpi=150)\nsns.heatmap(processed_df.corr(),annot=True)","462083b5":"#converting type to int\n\nprocessed_df.weather_code = processed_df.weather_code.astype(int)\nprocessed_df.season = processed_df.season.astype(int)\nprocessed_df.is_weekend = processed_df.is_weekend.astype(int)\nprocessed_df.is_holiday = processed_df.is_holiday.astype(int)\n","146a35da":"#get dummy variables for few columns \nprocessed_df = pd.get_dummies(processed_df, columns = ['weather_code', 'season','hour','month'], drop_first = True)","9cbfda85":"processed_df.head()","d6cc9c0b":"processed_df.info()","b2a88666":"processed_df.drop('timestamp', axis=1, inplace=True)\nprocessed_df.drop('year', axis=1, inplace=True)\nprocessed_df.drop('day_of_month', axis=1, inplace=True)\nprocessed_df.drop('date_year', axis=1, inplace=True)\n","2d8fce2e":"#what we want to predict\ny = processed_df['cnt']\n# predictior variables\nX = processed_df.drop('cnt', axis = 1)\n","67ba1bc8":"#split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)\nX_train.head()","cc46f8a5":"#let's train multi layer perceptron regressor\nregr = nn.MLPRegressor(hidden_layer_sizes = (128,),solver = 'adam', activation = 'relu', random_state=1, max_iter=500).fit(X_train, y_train)","7c558cbd":"regr.score(X_test, y_test)","df9b1df3":"Here are the meaning of these columns copied from the Data section. \n\n### Metadata:\n\"timestamp\" - timestamp field for grouping the data  \\\n\"cnt\" - the count of a new bike shares\\\n\"t1\" - real temperature in C\\\n\"t2\" - temperature in C \"feels like\"\\\n\"hum\" - humidity in percentage\\\n\"windspeed\" - wind speed in km\/h\\\n\"weathercode\" - category of the weather\\\n\"isholiday\" - boolean field - 1 holiday \/ 0 non holiday\\\n\"isweekend\" - boolean field - 1 if the day is weekend\\\n\"season\" - category field meteorological seasons: 0-spring ; 1-summer; 2-fall; 3-winter.\\\n\\\n\\\n\"weathe_code\" category description:\\\n1 = Clear ; mostly clear but have some values with haze\/fog\/patches of fog\/ fog in vicinity\\\n2 = scattered clouds \/ few clouds\\\n3 = Broken clouds\\\n4 = Cloudy\\\n7 = Rain\/ light Rain shower\/ Light rain\\\n10 = rain with thunderstorm\\\n26 = snowfall\\\n94 = Freezing Fog","856113bd":"Trouble understanding the output? please visit to [this link](https:\/\/www.sharpsightlabs.com\/blog\/pandas-describe\/) to learn more about it.","cda42e01":"# Data preprocessing and visualizations","3a352e21":"To learn more about correlation please visit to [this link](https:\/\/en.wikipedia.org\/wiki\/Correlation)","b3039861":"So we weekend has less requests than workdays","d13f526a":"So we got 89.12% of accuracy :) \n","e088c238":"# Imports"}}