{"cell_type":{"47e3ce38":"code","96672256":"code","68c4356e":"code","a50ab122":"code","c5a1dfa3":"code","fc5f7009":"code","b8db1c2d":"code","76bafc71":"code","ca8fe3f2":"code","e82ddd30":"code","dbf0d93d":"code","987d54c9":"code","a4f34d7a":"code","5884d72a":"markdown","6ca471c5":"markdown","91356968":"markdown","41ef8b2e":"markdown","58376fc1":"markdown","d4ea191b":"markdown"},"source":{"47e3ce38":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nplt.style.use('seaborn')\nimport os","96672256":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","68c4356e":"items = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nsales_train = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntest = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')\nsales_train = sales_train.merge(items[['item_id','item_category_id']],on='item_id',how='left')\n\nitem_prices = sales_train.groupby(['item_id'],as_index=False).agg({\n    'item_price':'mean'\n})\n\ntest = test.merge(items[['item_id','item_category_id']],on='item_id',how='left')\ntest = test.merge(item_prices,on='item_id',how='left')","a50ab122":"train = sales_train.pivot_table(index=['shop_id','item_category_id','item_id'],columns='date_block_num',values='item_cnt_day',aggfunc='sum',fill_value=0).reset_index()\ntrain = train.applymap(lambda x: x if x >= 0 else 0)\ntrain","c5a1dfa3":"from sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV\nimport xgboost as xgb","fc5f7009":"train_copy = train[['shop_id', 'item_id','item_category_id'] + list(range(34))].copy()\nX = train_copy.iloc[:,  (train_copy.columns != 33)].values\ny = train_copy.iloc[:,  (train_copy.columns == 33)].values\nt = xgb.DMatrix(X,y)\nxgr = xgb.train(\n    dict(\n        objective='count:poisson',\n        max_depth=10\n    ),\n    t\n)","b8db1c2d":"preds = xgr.predict(xgb.DMatrix(train_copy.iloc[:,  (train_copy.columns != 33)].values))\nrmse = np.sqrt(metrics.mean_squared_error(preds,train_copy.iloc[:, train_copy.columns == 33].values))\nrmse","76bafc71":"xgb.plot_importance(xgr,height=.5);","ca8fe3f2":"metrics.mean_absolute_error(preds,train_copy.iloc[:, train_copy.columns == 33].values)","e82ddd30":"final_test = test.drop(['item_price'],axis=1).merge(train, how = 'left', on = ['shop_id', 'item_id','item_category_id']).fillna(0.0)\nfinal_test['shop_id'] = final_test['shop_id'].astype(int)\nfinal_test['item_id'] = final_test['item_id'].astype(int)\nfinal_test['item_category_id'] = final_test['item_category_id'].astype(int)\n\n# Move one month forth\nd = dict(zip(final_test.columns[4:],list(np.array(list(final_test.columns[4:])) - 1)))\nfinal_test  = final_test.rename(d, axis = 1)\nfinal_test","dbf0d93d":"final_pred = xgr.predict(xgb.DMatrix(final_test.iloc[:, (final_test.columns != 'ID') & (final_test.columns != -1)].values))","987d54c9":"sub_df  = final_test.copy()\nsub_df['item_cnt_month'] = final_pred\nsub_df = sub_df[['ID','item_cnt_month']]\nsub_df","a4f34d7a":"sub_df.to_csv('submission.csv',index=False)","5884d72a":"## Load Data + Pre-Processing","6ca471c5":"## Imports","91356968":"# Sales Prediction","41ef8b2e":"## Modelling","58376fc1":"## Data","d4ea191b":"I've borrowed few tricks from [ashishpatel26](https:\/\/www.kaggle.com\/ashishpatel26\/predict-sales-price-using-xgboost)"}}