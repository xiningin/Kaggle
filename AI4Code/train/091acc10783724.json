{"cell_type":{"6eff36fc":"code","6ef1b1d9":"code","5d683379":"code","faf139c9":"code","3a8b1cf6":"code","1516a1bc":"code","6b16d5ed":"code","1ddcbee5":"code","768b8b5e":"code","493cb3f2":"code","0e8c32a3":"code","9538e4ca":"code","e7281193":"code","f4d8a410":"code","ecdefd72":"code","029a4a37":"code","c6964466":"code","5570f474":"code","3f2b7341":"code","71be888a":"code","a283d3dd":"code","0531d646":"code","3d9c0a61":"code","52172171":"code","a2f5cb5a":"code","daaaed7e":"code","c316b0f8":"code","64109431":"code","eeefeece":"code","d1cd2846":"code","d6a93c75":"code","24881156":"code","4a191e45":"code","f9577c78":"code","753d11db":"code","b9c2ab29":"code","128a8bc5":"code","4e889236":"code","36691ccc":"code","65713f07":"code","c4251f69":"code","3ad65e02":"code","dedc9306":"code","20115a40":"code","48add362":"code","3c7c2fc7":"code","8b893877":"code","be331035":"code","45e5800c":"code","0fe0772e":"code","bc5147a9":"code","ee33c261":"markdown","f14348cb":"markdown","51bf83be":"markdown","43878fae":"markdown","dbc5b12c":"markdown","360c6cb1":"markdown","d7a207a8":"markdown","b490793a":"markdown","928004ea":"markdown","7d295070":"markdown","fa97fbd6":"markdown","099a0101":"markdown","39d2c13f":"markdown","f1b9776b":"markdown","9b4a6b45":"markdown","40951714":"markdown","9b485861":"markdown","f40aa00e":"markdown","14f9c073":"markdown","450f15f0":"markdown","5504e7d9":"markdown","62f9c946":"markdown","783435f6":"markdown","b3af5a3c":"markdown","fbd17e16":"markdown","226dcb68":"markdown","55795043":"markdown","35a9b527":"markdown","313fd608":"markdown","83a5e290":"markdown"},"source":{"6eff36fc":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))","6ef1b1d9":"fandango = pd.read_csv('..\/input\/fandango-rating-discrepancy\/fandango_scrape.csv')","5d683379":"fandango.head()","faf139c9":"fandango.describe()","3a8b1cf6":"plt.figure(figsize=(10, 4), dpi=150)\nsns.scatterplot(data=fandango, y=\"VOTES\", x=\"RATING\")","1516a1bc":"fandango.corr()","6b16d5ed":"# example\n\ntitle = 'Film Title Name (Year)'","1ddcbee5":"title.split('(')[-1].replace(')', '')","768b8b5e":"fandango['YEAR'] = fandango['FILM'].apply(lambda title: title.split('(')[-1].replace(')', ''))","493cb3f2":"fandango","0e8c32a3":"fandango['YEAR'].value_counts()","9538e4ca":"sns.countplot(data=fandango, x='YEAR')","e7281193":"len(fandango[fandango['VOTES'] == 0])","f4d8a410":"fan_reviewed = fandango[fandango['VOTES'] > 0]","ecdefd72":"plt.figure(figsize=(10,4), dpi=150)\n\nsns.kdeplot(data=fan_reviewed, x='RATING', clip=[0, 5], fill=True, label='True Rating')\nsns.kdeplot(data=fan_reviewed, x='STARS', clip=[0, 5], fill=True, label='Stars Displayed')\n\nplt.legend(loc=(1.05, 0.5))","029a4a37":"fan_reviewed['STARS_DIFF'] = fan_reviewed['STARS'] - fan_reviewed['RATING']","c6964466":"fan_reviewed['STARS_DIFF'] = fan_reviewed['STARS_DIFF'].round(2)","5570f474":"fan_reviewed","3f2b7341":"plt.figure(figsize=(12, 4), dpi=150)\nsns.countplot(data=fan_reviewed, x='STARS_DIFF')","71be888a":"fan_reviewed[fan_reviewed['STARS_DIFF'] == 1]","a283d3dd":"all_sites = pd.read_csv('..\/input\/fandango-rating-discrepancy\/all_sites_scores.csv')","0531d646":"all_sites.head()","3d9c0a61":"all_sites.describe()","52172171":"plt.figure(dpi=150)\nsns.scatterplot(data=all_sites, x='RottenTomatoes', y='RottenTomatoes_User')\nplt.ylim(0, 100)\nplt.xlim(0, 100)","a2f5cb5a":"all_sites['Rotten_Diff'] = all_sites['RottenTomatoes'] - all_sites['RottenTomatoes_User']","daaaed7e":"all_sites['Rotten_Diff'].apply(abs).mean()","c316b0f8":"plt.figure(figsize=(10, 4), dpi=200)\nsns.histplot(data=all_sites, x='Rotten_Diff', kde=True, bins=25)","64109431":"plt.figure(figsize=(10, 4), dpi=200)\nsns.histplot(x=all_sites['Rotten_Diff'].apply(abs), kde=True, bins=25)","eeefeece":"all_sites.nsmallest(5, 'Rotten_Diff')[['FILM', 'Rotten_Diff']]","d1cd2846":"plt.figure(figsize=(10, 4), dpi=150)\nsns.scatterplot(data=all_sites, x='Metacritic', y='Metacritic_User')\nplt.xlim(0, 100)\nplt.ylim(0, 10)","d6a93c75":"plt.figure(figsize=(10,4),dpi=150)\nsns.scatterplot(data=all_sites,x='Metacritic_user_vote_count',y='IMDB_user_vote_count')","24881156":"all_sites.nlargest(1, 'IMDB_user_vote_count')","4a191e45":"all_sites.nlargest(1, 'Metacritic_user_vote_count')","f9577c78":"df = pd.merge(fandango, all_sites, on='FILM', how='inner')","753d11db":"df.info()","b9c2ab29":"df.head()","128a8bc5":"# Dont run this cell multiple times, otherwise you keep dividing!\ndf['RT_Norm'] = np.round(df['RottenTomatoes']\/20,1)\ndf['RTU_Norm'] =  np.round(df['RottenTomatoes_User']\/20,1)","4e889236":"# Dont run this cell multiple times, otherwise you keep dividing!\ndf['Meta_Norm'] =  np.round(df['Metacritic']\/20,1)\ndf['Meta_U_Norm'] =  np.round(df['Metacritic_User']\/2,1)","36691ccc":"# Dont run this cell multiple times, otherwise you keep dividing!\ndf['IMDB_Norm'] = np.round(df['IMDB']\/2,1)","65713f07":"df.head()","c4251f69":"df.columns","3ad65e02":"norm_scores = df[['STARS', 'RATING', 'RT_Norm', 'RTU_Norm', 'Meta_Norm', 'Meta_U_Norm', 'IMDB_Norm']]","dedc9306":"norm_scores.head()","20115a40":"def move_legend(ax, new_loc, **kws):\n    old_legend = ax.legend_\n    handles = old_legend.legendHandles\n    labels = [t.get_text() for t in old_legend.get_texts()]\n    title = old_legend.get_title().get_text()\n    ax.legend(handles, labels, loc=new_loc, title=title, **kws)","48add362":"fig, ax = plt.subplots(figsize=(15,6),dpi=150)\nsns.kdeplot(data=norm_scores,clip=[0,5],shade=True,palette='Set1',ax=ax)\nmove_legend(ax, 'upper left')","3c7c2fc7":"fig, ax = plt.subplots(figsize=(15,6),dpi=150)\nsns.kdeplot(data=norm_scores[['RT_Norm','STARS']],clip=[0,5],shade=True,palette='Set1',ax=ax)\nmove_legend(ax, \"upper left\")","8b893877":"plt.subplots(figsize=(15,6),dpi=150)\nsns.histplot(norm_scores,bins=50)","be331035":"sns.clustermap(norm_scores, col_cluster=False)","45e5800c":"norm_films = df[['STARS','RATING','RT_Norm','RTU_Norm','Meta_Norm','Meta_U_Norm','IMDB_Norm','FILM']]","0fe0772e":"norm_films.nsmallest(10, 'RT_Norm')","bc5147a9":"plt.figure(figsize=(15,6),dpi=150)\nworst_films = norm_films.nsmallest(10,'RT_Norm').drop('FILM',axis=1)\nsns.kdeplot(data=worst_films,clip=[0,5],shade=True,palette='Set1')\nplt.title(\"Ratings for RT Critic's 10 Worst Reviewed Films\");","ee33c261":"**histplot comparing all normalized scores**","f14348cb":"We can see from the plot that Rotten Tomatoes has the most uniform disrtibution where as fandango has unenven distribution.","51bf83be":"### Extract the year from the title string and set new column as YEAR","43878fae":"# IMDB\n\nFinally let's explore IMDB.\n\n**scatterplot of the votes counts between MetaCritics versus IMDB.**","dbc5b12c":"### distribution plot showing the absolute value difference between critics and users.","360c6cb1":"**KDE plot that compare the distribution of Rottem Tomatoes critic ratings against the STARS displayed by Fandango.**","d7a207a8":"#### Create a dataframe that only contains the normalize ratings","b490793a":"**movies which has the highest IMDB user vote count**","928004ea":"### Creating dataFrame of only reviewed films by removing any films that have zero votes.","7d295070":"#### Top 5 movies user rated higher that critics on average.\n- we saw earlier that larger positive values means critics rated much higher than users whereas larger negative values means users rated much higher than critics.","fa97fbd6":"## Notice Rotten Tomatoes, Metacritic, and IMDB does not use score a between 0-5 stars like fandango. \n#### So we need to normalize these values so that they are between 0-5 stars.","099a0101":"**movies which has the highest MetaCritic user vote count**\n","39d2c13f":"#### Plot to display the number of times a certain difference occurs:","f1b9776b":"## MetaCritic\n\nLets take a look at the ratings from MetaCritic.\n\n**scatterplot of the Metacritic Rating versus the Metacritic User rating.**","9b4a6b45":"We can see from the plot that one movies has 1 star difference than its true rating","40951714":"### what are the worst movies across all platforms ?","9b485861":"**Conclusion**\nSo fandango is clearly showing rating between 3-4 for films that are bad.","f40aa00e":"### Calculate the mean absolute difference between RottenTomatoes scores and RottenTomatoes_User scores","14f9c073":"### Scatter plot exploring the relationship between RottenTomatoes critic reviews and RottenTomatoes User reviews","450f15f0":"## How many movies are in the fandango dataframe per year ?","5504e7d9":"### Fandango Scores VS. All Sites\n\nlet's explore whether or not fandango artificially displays higher rating.\n\n**Combine the fandango table with all sites table**","62f9c946":"## Create a new column based off the difference between critics ratings and users ratings for Rotten Tomatoes.\n1. quantify the difference between critics ratings and the RT User ratings. We will calculate this with RottenTomatoes-RottenTomatoes_User.So values closer to 0 means aggrement between Critics and Users. \n2. Larger positive values means critics rated much higher than users. Larger negative values means users rated much higher than critics.","783435f6":"### distribution plot of the differences between RT Critics Score and RT User Score.","b3af5a3c":"### Movies with zero votes","fbd17e16":"# Comparing Fandango ratings with other sites","226dcb68":"## Quantify the discrepancy","55795043":"#### let's display the distribution of STARS vs true rating (RATING_","35a9b527":"In the above plot we can see there two outliers. Movie with highest vote count on IMDB has only 500 MetaCritic ratings.","313fd608":"## Comparing the distribution of scores across sites","83a5e290":"### let's explore the relationship between popularity of a film and its rating."}}