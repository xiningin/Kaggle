{"cell_type":{"55b15d5f":"code","44de9c59":"code","69aeddff":"code","d8283b45":"code","ae7626a6":"code","743bf85d":"code","3b71c364":"code","1c36e9b9":"code","f60bcfa2":"code","8034d185":"code","16d8f800":"code","4b915752":"code","78ee8a9f":"code","6f495063":"code","caafd0f3":"code","c280b10c":"code","11f2711b":"code","3d0b1bb8":"code","dd7c2665":"code","7937153f":"code","d2cd369a":"code","5dfe1f6d":"code","7384b2d3":"code","05f25aa8":"code","88ec3e9c":"code","061e33c0":"code","6acc4750":"markdown","a63d1bd6":"markdown","d5520a3a":"markdown","f5e52fba":"markdown","ee40c627":"markdown","5ed1ad87":"markdown","2e9fa3f5":"markdown","125e194d":"markdown","00455615":"markdown","4a219256":"markdown","62f0cca9":"markdown","4da385f3":"markdown","2d6bca54":"markdown","46b41a9a":"markdown","21887d9e":"markdown","c643063a":"markdown","19072be6":"markdown","3b6eb3e8":"markdown","4b326686":"markdown","b9aba97b":"markdown","e3bc7678":"markdown","5b02e069":"markdown","7fa99f07":"markdown","a45e6101":"markdown","2f42c70c":"markdown","8d104faa":"markdown","ad688e4e":"markdown","7a374421":"markdown","302369a6":"markdown","4fea1f80":"markdown","11e0dc5e":"markdown","3e641c12":"markdown","52fb0847":"markdown","f442843e":"markdown","474babc7":"markdown","8b1c3708":"markdown","18d535af":"markdown"},"source":{"55b15d5f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","44de9c59":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go","69aeddff":"df_pgen1 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv\")\ndf_sen1 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv\")\ndf_pgen2 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv\")\ndf_sen2 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv\")","d8283b45":"plt.rcParams['figure.figsize'] = [8, 4]\nplt.rcParams['figure.dpi'] = 100","ae7626a6":"df_pgen1['DATE_TIME'] = pd.to_datetime(df_pgen1['DATE_TIME'],format = '%d-%m-%Y %H:%M')\ndf_pgen1['DATE'] = df_pgen1['DATE_TIME'].apply(lambda x:x.date())\ndf_pgen1['TIME'] = df_pgen1['DATE_TIME'].apply(lambda x:x.time())\ndf_pgen1['DATE'] = pd.to_datetime(df_pgen1['DATE'],format = '%Y-%m-%d')\ndf_pgen1['HOUR'] = pd.to_datetime(df_pgen1['TIME'],format='%H:%M:%S').dt.hour\ndf_pgen1['MINUTES'] = pd.to_datetime(df_pgen1['TIME'],format='%H:%M:%S').dt.minute","743bf85d":"df_sen1['DATE_TIME'] = pd.to_datetime(df_sen1['DATE_TIME'],format = '%Y-%m-%d %H:%M')\ndf_sen1['DATE'] = df_sen1['DATE_TIME'].apply(lambda x:x.date())\ndf_sen1['TIME'] = df_sen1['DATE_TIME'].apply(lambda x:x.time())\ndf_sen1['DATE'] = pd.to_datetime(df_sen1['DATE'],format = '%Y-%m-%d')\ndf_sen1['HOUR'] = pd.to_datetime(df_sen1['TIME'],format='%H:%M:%S').dt.hour\ndf_sen1['MINUTES'] = pd.to_datetime(df_sen1['TIME'],format='%H:%M:%S').dt.minute","3b71c364":"df_pgen2['DATE_TIME'] = pd.to_datetime(df_pgen2['DATE_TIME'],format = '%Y-%m-%d %H:%M')\ndf_pgen2['DATE'] = df_pgen2['DATE_TIME'].apply(lambda x:x.date())\ndf_pgen2['TIME'] = df_pgen2['DATE_TIME'].apply(lambda x:x.time())\ndf_pgen2['DATE'] = pd.to_datetime(df_pgen2['DATE'],format = '%Y-%m-%d')\ndf_pgen2['HOUR'] = pd.to_datetime(df_pgen2['TIME'],format='%H:%M:%S').dt.hour\ndf_pgen2['MINUTES'] = pd.to_datetime(df_pgen2['TIME'],format='%H:%M:%S').dt.minute","1c36e9b9":"df_sen2['DATE_TIME'] = pd.to_datetime(df_sen2['DATE_TIME'],format = '%Y-%m-%d %H:%M')\ndf_sen2['DATE'] = df_sen2['DATE_TIME'].apply(lambda x:x.date())\ndf_sen2['TIME'] = df_sen2['DATE_TIME'].apply(lambda x:x.time())\ndf_sen2['DATE'] = pd.to_datetime(df_sen2['DATE'],format = '%Y-%m-%d')\ndf_sen2['HOUR'] = pd.to_datetime(df_sen2['TIME'],format='%H:%M:%S').dt.hour\ndf_sen2['MINUTES'] = pd.to_datetime(df_sen2['TIME'],format='%H:%M:%S').dt.minute","f60bcfa2":"iplot([go.Histogram2dContour(x=df_pgen1.head(10000)['HOUR'], \n                             y=df_pgen1.head(10000)['DC_POWER'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df_pgen1.head(20000)['HOUR'], y=df_pgen1.head(20000)['DC_POWER'], mode='markers')])","8034d185":"iplot([go.Histogram2dContour(x=df_pgen1.head(10000)['HOUR'], \n                             y=df_pgen1.head(10000)['AC_POWER'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df_pgen1.head(20000)['HOUR'], y=df_pgen1.head(20000)['AC_POWER'], mode='markers')])","16d8f800":"iplot([go.Histogram2dContour(x=df_pgen1.head(10000)['HOUR'], \n                             y=df_pgen1.head(10000)['DAILY_YIELD'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df_pgen1.head(20000)['HOUR'], y=df_pgen1.head(20000)['DAILY_YIELD'], mode='markers')])","4b915752":"iplot([go.Histogram2dContour(x=df_pgen1.head(10000)['HOUR'], \n                             y=df_pgen1.head(10000)['TOTAL_YIELD'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df_pgen1.head(20000)['HOUR'], y=df_pgen1.head(20000)['TOTAL_YIELD'], mode='markers')])","78ee8a9f":"iplot([go.Histogram2dContour(x=df_sen1.head(10000)['HOUR'], \n                             y=df_sen1.head(10000)['AMBIENT_TEMPERATURE'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df_sen1.head(20000)['HOUR'], y=df_sen1.head(20000)['AMBIENT_TEMPERATURE'], mode='markers')])","6f495063":"iplot([go.Histogram2dContour(x=df_sen1.head(10000)['HOUR'], \n                             y=df_sen1.head(10000)['MODULE_TEMPERATURE'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df_sen1.head(20000)['HOUR'], y=df_sen1.head(20000)['MODULE_TEMPERATURE'], mode='markers')])","caafd0f3":"iplot([go.Histogram2dContour(x=df_sen1.head(10000)['HOUR'], \n                             y=df_sen1.head(10000)['IRRADIATION'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df_sen1.head(20000)['HOUR'], y=df_sen1.head(20000)['IRRADIATION'], mode='markers')])","c280b10c":"iplot([go.Histogram2dContour(x=df_pgen2.head(10000)['HOUR'], \n                             y=df_pgen2.head(10000)['DC_POWER'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df_pgen2.head(20000)['HOUR'], y=df_pgen2.head(20000)['DC_POWER'], mode='markers')])","11f2711b":"iplot([go.Histogram2dContour(x=df_pgen2.head(10000)['HOUR'], \n                             y=df_pgen2.head(10000)['AC_POWER'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df_pgen2.head(20000)['HOUR'], y=df_pgen2.head(20000)['AC_POWER'], mode='markers')])","3d0b1bb8":"iplot([go.Histogram2dContour(x=df_pgen2.head(10000)['HOUR'], \n                             y=df_pgen2.head(10000)['DAILY_YIELD'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df_pgen2.head(20000)['HOUR'], y=df_pgen2.head(20000)['DAILY_YIELD'], mode='markers')])","dd7c2665":"iplot([go.Histogram2dContour(x=df_pgen2.head(10000)['HOUR'], \n                             y=df_pgen2.head(10000)['TOTAL_YIELD'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df_pgen2.head(20000)['HOUR'], y=df_pgen2.head(20000)['TOTAL_YIELD'], mode='markers')])","7937153f":"iplot([go.Histogram2dContour(x=df_sen2.head(10000)['HOUR'], \n                             y=df_sen2.head(10000)['AMBIENT_TEMPERATURE'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df_sen2.head(20000)['HOUR'], y=df_sen2.head(20000)['AMBIENT_TEMPERATURE'], mode='markers')])","d2cd369a":"iplot([go.Histogram2dContour(x=df_sen2.head(10000)['HOUR'], \n                             y=df_sen2.head(10000)['MODULE_TEMPERATURE'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df_sen2.head(20000)['HOUR'], y=df_sen2.head(20000)['MODULE_TEMPERATURE'], mode='markers')])","5dfe1f6d":"iplot([go.Histogram2dContour(x=df_sen2.head(10000)['HOUR'], \n                             y=df_sen2.head(10000)['IRRADIATION'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df_sen2.head(20000)['HOUR'], y=df_sen2.head(20000)['IRRADIATION'], mode='markers')])","7384b2d3":"sns.pairplot(df_pgen1.iloc[:,3:7]);\nsns.pairplot(df_pgen1.iloc[:,3:5],diag_kind=\"kde\", markers=\"\", kind='reg');\nplt.show()","05f25aa8":"sns.pairplot(df_sen1.iloc[:,3:6]);\nsns.pairplot(df_sen1.iloc[:,3:6],diag_kind=\"kde\", markers=\"\", kind='reg');\nplt.show()","88ec3e9c":"sns.pairplot(df_pgen2.iloc[:,3:7]);\nsns.pairplot(df_pgen2.iloc[:,3:5],diag_kind=\"kde\", markers=\"\", kind='reg');\nplt.show()","061e33c0":"sns.pairplot(df_sen2.iloc[:,3:6]);\nsns.pairplot(df_sen2.iloc[:,3:6],diag_kind=\"kde\", markers=\"\", kind='reg');\nplt.show()","6acc4750":"**Power Plant 2**","a63d1bd6":"1. Ambient Temperature","d5520a3a":"# **Importing Necessary Libraries and DataBases**","f5e52fba":"3. Irradiation","ee40c627":"*Sensor Data*\n\nRelations between:\n* Ambient Temperature\n* Module Temperature\n* Irradiation","5ed1ad87":"# **Finding relations between Variables and Date\/Time Attributes**","2e9fa3f5":"**Power Plant 1**","125e194d":"*Generation Data*\n\nRelations between:\n* DC Power\n* AC Power\n* Daily Yield\n* Total Yield","00455615":"*Sensor Data*\n\nRelations between Date\/Time attributes and the following:\n* Ambient Temperature\n* Module Temperature\n* Irradiation","4a219256":"2. AC Power","62f0cca9":"*Sensor Data*\n\nRelations between Date\/Time attributes and the following:\n* Ambient Temperature\n* Module Temperature\n* Irradiation","4da385f3":"*Sensor Data*\n\nRelations between:\n* Ambient Temperature\n* Module Temperature\n* Irradiation","2d6bca54":"1. DC Power","46b41a9a":"*Generation Data*\n\nRelations between:\n* DC Power\n* AC Power\n* Daily Yield\n* Total Yield","21887d9e":"# **Cleaning Data**","c643063a":"3. Irradiation","19072be6":"Sensor Data","3b6eb3e8":"1. DC Power","4b326686":"**Power Plant 1**","b9aba97b":"**Setting Graph Parameters**","e3bc7678":"**Power Plant 2**","5b02e069":"2. Module Temperature","7fa99f07":"*Generation Data*\n\nRelations between Date\/Time attributes and the following:\n* DC Power\n* AC Power\n* Daily Yield\n* Total Yield","a45e6101":"2. AC Power","2f42c70c":"1. Ambient Temperature","8d104faa":"4. Total Yield","ad688e4e":"Generation Data","7a374421":"3. Daily Yield","302369a6":"4. Total Yield","4fea1f80":"Generation Data","11e0dc5e":"**Power Plant 2**","3e641c12":"*Generation Data*\n\nRelations between Date\/Time attributes and the following:\n* DC Power\n* AC Power\n* Daily Yield\n* Total Yield","52fb0847":"3. Daily Yield","f442843e":"Sensor Data","474babc7":"# **Finding relations between Variables**","8b1c3708":"**Power Plant 1**","18d535af":"2. Module Temperature"}}