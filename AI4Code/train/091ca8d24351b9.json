{"cell_type":{"edebddcd":"code","53bd3a09":"code","6f0eb4b5":"code","621a4cca":"code","b835284d":"code","0f0b3337":"code","2e6551de":"code","8a016741":"code","6b0b7933":"code","e5518dfa":"markdown","758ce558":"markdown","31cd89f9":"markdown","4d08ce0e":"markdown"},"source":{"edebddcd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","53bd3a09":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nimport sklearn\nfrom sklearn.metrics import f1_score, roc_auc_score, confusion_matrix, precision_recall_curve, auc, roc_curve, recall_score, precision_score\nfrom xgboost import XGBClassifier\n\n# some hyper parameters\nSEED = 1970\ntest_train_split_SEED = 1970\n# FOLDS = 10\nshow_fold_stats = True\nVERBOSE = 0\nFOLDS = 5","6f0eb4b5":"pd_abundance = pd.read_csv('..\/input\/human-gut-microbiome-with-asd\/GSE113690_Autism_16S_rRNA_OTU_assignment_and_abundance.csv')\npd_meta_abundance = pd.read_csv('..\/input\/human-gut-microbiome-with-asd\/ASD meta abundance.csv')","621a4cca":"taxa = pd_abundance[['OTU', 'taxonomy']].set_index('OTU')\npd_abundance_T = pd_abundance.drop('taxonomy', axis=1).set_index('OTU').transpose()\n\ntarget = pd_abundance_T.index.to_list()\nbinary_target = np.array([1 if t.startswith('A') else 0 for t in target ])\n\ntotal_species = pd_abundance_T.sum(axis = 1)\nabs_abundance = 31757\npd_rel_abundance = pd_abundance_T \/ abs_abundance \n","b835284d":"# Lets put aside a small test set, so we can check performance of different classifiers against it\ndisease_train, disease_test, disease_y_train, disease_y_test = train_test_split(pd_rel_abundance, binary_target, test_size = 0.05,  random_state = test_train_split_SEED , shuffle = True)   ","0f0b3337":"skf = StratifiedKFold(n_splits = FOLDS, shuffle = True, random_state = SEED)\n\nfor fold, (idxT,idxV) in enumerate(skf.split(disease_train, disease_y_train)):\n\n    X_train = disease_train.iloc[idxT]\n    X_val = disease_train.iloc[idxV]\n    y_train = disease_y_train[idxT]\n    y_val = disease_y_train[idxV]\n\n    clf = RandomForestClassifier(n_estimators = 500, random_state = SEED, verbose = 0)\n    clf.fit(X_train, y_train )\n\n    RF_pred_class = clf.predict(X_val)\n    RF_preds = clf.predict_proba(X_val)\n    \n    RF_AUC_test_score = roc_auc_score(y_val, RF_preds[:,1])\n    RF_f1_test = f1_score(y_val, RF_pred_class)\n    RF_recall_test = recall_score(y_val, RF_pred_class)\n    RF_precision_test = precision_score(y_val, RF_pred_class)\n    \n    if show_fold_stats:\n        print('-' * 80)\n        print('Fold : %s'%(fold+1))\n        print('ROC AUC score for RandomForest model, validation set: %.4f'%RF_AUC_test_score)\n        print('F1 : %.4f, Recall : %.4f , Precision : %.4f'%(RF_f1_test, RF_recall_test, RF_precision_test))\n        print(confusion_matrix(y_val, RF_pred_class))\n    \n    XGB_model = XGBClassifier(n_estimators=5000, max_depth=None, \n                        learning_rate=0.005,\n                        objective='binary:logistic', \n                        metric='auc',\n                        verbosity  = VERBOSE,\n                        # tree_method = 'gpu_hist',\n                        use_label_encoder=False,\n                        n_jobs=-1, random_state  = SEED )\n    \n    XGB_model.fit(X_train, y_train,\n                    eval_set = [(X_val, y_val)],\n                    eval_metric=['logloss'],\n                    early_stopping_rounds = 100, verbose = VERBOSE )\n        \n    XGB_preds = XGB_model.predict_proba(X_val)\n    XGB_class = XGB_model.predict(X_val)\n\n    XGB_score = roc_auc_score(y_val, XGB_preds[:,1])\n    XGB_f1 = f1_score(y_val, XGB_class)\n    XGB_recall = recall_score(y_val, XGB_class)\n    XGB_precision = precision_score(y_val, XGB_class)\n\n    if show_fold_stats:        \n        print('ROC AUC score for XGBoost model, validation set: %.4f'%XGB_score)\n        print('F1 : %.4f, Recall : %.4f , Precision : %.4f'%(XGB_f1, XGB_recall, XGB_precision))\n        print(confusion_matrix(y_val, XGB_class))\n\n    RF_preds_test = clf.predict_proba(disease_test)\n    XGB_preds_test = XGB_model.predict_proba(disease_test)\n    avg_preds_test = (RF_preds_test[:,1] + XGB_preds_test[:,1]) \/ 2\n\n    RF_test_AUC = roc_auc_score(disease_y_test, RF_preds_test[:,1])\n    print('ROC AUC score for RF for test set: %.4f'%RF_test_AUC)\n    XGB_test_AUC = roc_auc_score(disease_y_test, XGB_preds_test[:,1])\n    print('ROC AUC score for XGBoost model test set: %.4f'%XGB_test_AUC)\n    average_AUC = roc_auc_score(disease_y_test, avg_preds_test )\n    print('ROC AUC score averaged between 2 models for test set: %.4f'%average_AUC)\n    \n    avg_class = np.where(avg_preds_test < 0.7, 0, 1)\n    print('F1 : %.4f, Recall : %.4f , Precision : %.4f'%(f1_score(disease_y_test, avg_class), recall_score(disease_y_test, avg_class), precision_score(disease_y_test, avg_class)))\n    print(confusion_matrix(disease_y_test, avg_class))","2e6551de":"# exclude absent spcecies\npd_meta_abundance = pd_meta_abundance[pd_meta_abundance.sum(axis = 1) !=0]","8a016741":"pd_meta_abndc = pd_meta_abundance.drop(['Taxonomy'], axis=1).T\ntarget = pd_meta_abndc.index.to_list()\nbinary_target = np.array([1 if t.startswith('A') else 0 for t in target ])","6b0b7933":"# this subset of data is too small to have a separate test set, so we'd have to rely on CV only\nskf = StratifiedKFold(n_splits = FOLDS, shuffle = True, random_state = SEED)\nfor fold, (idxT,idxV) in enumerate(skf.split(pd_meta_abndc, binary_target)):\n\n    X_train = pd_meta_abndc.iloc[idxT]\n    X_val = pd_meta_abndc.iloc[idxV]\n    y_train = binary_target[idxT]\n    y_val = binary_target[idxV]\n\n    clf = RandomForestClassifier(n_estimators = 500, random_state = SEED, verbose = 0)\n    clf.fit(X_train, y_train )\n\n    RF_pred_class = clf.predict(X_val)\n    RF_preds = clf.predict_proba(X_val)\n    \n    RF_AUC_test_score = roc_auc_score(y_val, RF_preds[:,1])\n    RF_f1_test = f1_score(y_val, RF_pred_class)\n    RF_recall_test = recall_score(y_val, RF_pred_class)\n    RF_precision_test = precision_score(y_val, RF_pred_class)\n    \n    if show_fold_stats:\n        print('-' * 80)\n        print('Fold : %s'%(fold+1))\n        print('ROC AUC score for RandomForest model, validation set: %.4f'%RF_AUC_test_score)\n        print('F1 : %.4f, Recall : %.4f , Precision : %.4f'%(RF_f1_test, RF_recall_test, RF_precision_test))\n        print(confusion_matrix(y_val, RF_pred_class))\n    \n    XGB_model = XGBClassifier(n_estimators=5000, max_depth=None, \n                        learning_rate=0.005,\n                        objective='binary:logistic', \n                        metric='auc',\n                        verbosity  = VERBOSE,\n                        # tree_method = 'gpu_hist',\n                        use_label_encoder=False,\n                        n_jobs=-1, random_state  = SEED )\n    \n    XGB_model.fit(X_train, y_train,\n                    eval_set = [(X_val, y_val)],\n                    eval_metric=['logloss'],\n                    early_stopping_rounds = 100, verbose = VERBOSE )\n        \n    XGB_preds = XGB_model.predict_proba(X_val)\n    XGB_class = XGB_model.predict(X_val)\n\n    XGB_score = roc_auc_score(y_val, XGB_preds[:,1])\n    XGB_f1 = f1_score(y_val, XGB_class)\n    XGB_recall = recall_score(y_val, XGB_class)\n    XGB_precision = precision_score(y_val, XGB_class)\n\n    if show_fold_stats:        \n        print('ROC AUC score for XGBoost model, validation set: %.4f'%XGB_score)\n        print('F1 : %.4f, Recall : %.4f , Precision : %.4f'%(XGB_f1, XGB_recall, XGB_precision))\n        print(confusion_matrix(y_val, XGB_class))  ","e5518dfa":"From the Abstract:<br>\n> Autism Spectrum Disorder (ASD) is a severe neurodevelopmental disorder. To enhance the understanding of the gut microbiota structure in ASD children at different ages as well as the relationship between gut microbiota and fecal metabolites, we first used the 16S rRNA sequencing to evaluate the gut microbial population in a cohort of 143 children aged 2\u201313 years old. We found that the \u03b1-diversity of ASD group showed no significant change with age, while the TD group showed increased \u03b1-diversity with age, which indicates that the compositional development of the gut microbiota in ASD varies at different ages in ways that are not consistent with TD group. Recent studies have shown that chronic constipation is one of the most commonly obvious gastrointestinal (GI) symptoms along with ASD core symptoms. To further investigate the potential interaction effects between ASD and GI symptoms, the 30 C-ASD and their aged-matched TD were picked out to perform metagenomics analysis. We observed that C-ASD group displayed decreased diversity, depletion of species of Sutterella, Prevotella, and Bacteroides as well as dysregulation of associated metabolism activities, which may involve in the pathogenesis of C-ASD. Consistent with metagenomic analysis, liquid chromatography-mass spectrometry (LC\/MS) revealed some of the differential metabolites between C-ASD and TD group were involved in the metabolic network of neurotransmitters including serotonin, dopamine, histidine, and GABA. Furthermore, we found these differences in metabolites were associated with altered abundance of specific bacteria. The study suggested possible future modalities for ASD intervention through targeting the specific bacteria associated with neurotransmitter metabolism.","758ce558":"Lets try metagenomic data: 30 samples with ASD and 30 TD","31cd89f9":"The dataset is from the research paper by Zhou Dan et al. published on April 21st of 2020 - [Altered gut microbial profile is associated with abnormal metabolism activity of Autism Spectrum Disorder](https:\/\/www.tandfonline.com\/doi\/full\/10.1080\/19490976.2020.1747329)","4d08ce0e":"First will try 16s rRNA using both RF and XGBoost"}}