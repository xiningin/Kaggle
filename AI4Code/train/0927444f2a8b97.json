{"cell_type":{"7040f004":"code","1110be7e":"code","d72f45d3":"code","bd51fd0a":"code","4805d045":"code","40cada77":"code","addc9ea1":"code","74e8839d":"code","076d02b0":"code","53b65dd7":"markdown","75c5ffd8":"markdown"},"source":{"7040f004":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1110be7e":"import numpy as np\nimport pandas as pd\nfrom sklearn.datasets import load_digits\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\nX = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv').drop('label',1)\ny = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')['label'].values\n\npred = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\n","d72f45d3":"\n#normalizing pixels\nX = X\/255\npred = pred\/255\n\n#changing datframes to arrays\nX = X.values\npred = pred.values\n\n# you know what is this for\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10, random_state=101)\n\n#reshaping for Conv2d ayers\nX_train = X_train.reshape(X_train.shape[0],28,28,1)\nX_test = X_test.reshape(X_test.shape[0],28,28,1)","bd51fd0a":"#nueral Networks\nfrom tensorflow.keras.models import Sequential\n\nfrom tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPool2D, Flatten\nmodel = Sequential()\nmodel.add(Conv2D(15, kernel_size=(3,3), strides=(1,1), padding='valid', activation='relu', input_shape=(28,28,1)))\nmodel.add(MaxPool2D(pool_size=(1,1)))\n\nmodel.add(Conv2D(55, kernel_size=(2,2), strides=(1,1), padding='valid', activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\n\nmodel.add(Flatten())\n\nmodel.add(Dense(784, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(60, activation='relu'))\n#segmoid for binary classification \n#softmax for multiclass classification\n\nmodel.add(Dense(10, activation='softmax'))\n#model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy', \n              metrics=['accuracy'])\n\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nes = EarlyStopping(\n    monitor='val_loss',\n    min_delta=0,\n    patience=8,\n    verbose=1,\n    mode='min',\n    baseline=None,\n    restore_best_weights=False)\n\nmodel.fit(x=X_train,y=y_train ,epochs=500,verbose=1,validation_data=(X_test, y_test), callbacks=[es])","4805d045":"#model Evaluation\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Baseline Error: %.2f%%\" % (100-scores[1]*100))\n\nprint('Loss & Accuracy',model.evaluate(X_test, y_test, verbose=0))","40cada77":"pred = pred.reshape(pred.shape[0],28,28,1)","addc9ea1":"\n\n#writing Submision File with custom name\n(pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\n .join(pd.DataFrame(model.predict_classes(pred)))\n .drop('Label',1)\n .rename(columns = {0:'Label'})\n .to_csv(str(input()),index = None))","74e8839d":"sub = pd.read_csv('\/kaggle\/input\/finaln\/ffdffdfd.csv')","076d02b0":"for x,i in enumerate(model.predict(pred[0:])):\n    if i.max() <= 0.9 and i.max() >= 0.8:\n        plt.imshow(pred[x].reshape(28,28), cmap = 'Greys')\n        plt.show()\n        print('Image Id:',x+1)\n        print('Predicted Class:', list(i).index(i.max()))\n        print('Change the value from',sub.iloc[x]['Label'],'to')\n        jk = input()\n        if pd.isnull(jk):\n            sub.iloc[x]['Label']=sub.iloc[2]['Label']\n        else:\n            sub.iloc[x]['Label']=jk\n            \nprint('\\n')\nprint('Enter the name for your output file (add .csv at the end):')\nsub.to_csv(input(), index = False)","53b65dd7":"### This code below will show you at which digits this model has poor predictions and it will ask you to replace that prediction if you want if you dont want to replace than just press enter leaving the input box empty. ****","75c5ffd8":"### Manually Looking for the poor oredictions**\n\n### load your Submitted file this file is best submission of mine you can use yours\n"}}