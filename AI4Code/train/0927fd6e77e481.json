{"cell_type":{"04760606":"code","f5d4d672":"code","72337efd":"code","ec8234fe":"code","8b9df423":"code","10179633":"code","ca5f23c8":"code","3fdb0e59":"code","ff3ba5e8":"code","6ef413e4":"markdown","a5822062":"markdown","504b6fc6":"markdown","3f9cb67e":"markdown","eed74118":"markdown","fc3a9563":"markdown","06e8d0f3":"markdown","2f2b4304":"markdown","bc314541":"markdown"},"source":{"04760606":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np \nimport math\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\nfrom keras.layers import LSTM\nimport preprocessing \nimport sklearn\nimport backtest_functions as bt","f5d4d672":"# loading dataset\ndef getData(strt_date, end_date):\n    FF = pd.read_csv(\"..\/input\/fulldata\/Fulldata_2.csv\")\n    # Date format change\n    FF[\"Date\"] = pd.to_datetime(FF[\"Date\"])\n    # Data selection\n    df = FF[(FF[\"Date\"] >= strt_date) & (FF[\"Date\"] <= end_date)]\n    # Reset Index\n    df = df.reset_index()\n    df = df.drop([\"index\"], axis =1)\n    # Average Column and no. of days calculations\n    df[\"Average\"] = (FF[\"Open\"] + 2*FF[\"High\"] + FF[\"Close\"])\/4\n    df[\"Days\"] = range(1,df.shape[0]+1)\n    df[\"beta_0\"] = 1\n    return df","72337efd":"# FUNCTION TO CREATE 1D DATA INTO TIME SERIES DATASET\ndef new_dataset(dataset, step_size):\n    data_X, data_Y = [], []\n    for i in range(len(dataset)-step_size-1):\n        a = dataset[i:(i+step_size), 0]\n        data_X.append(a)\n        data_Y.append(dataset[i + step_size, 0])\n    return np.array(data_X), np.array(data_Y)\n\n# THIS FUNCTION CAN BE USED TO CREATE A TIME SERIES DATASET FROM ANY 1D ARRAY","ec8234fe":"# FOR REPRODUCIBILITY\nnp.random.seed(7)\n\ntrain_start_date = \"2019-01-01\"\ntrain_end_date =  \"2019-10-31\"\ntest_start_date = \"2019-11-01\"\ntest_end_date = \"2019-12-31\"\n\n# IMPORTING DATASET \n\ndf = getData(train_start_date,test_end_date)\n\ndataset = df[['Open','High', 'Low', 'Close']]\n#dataset = dataset.reindex(index = dataset.index[::-1])\n\n# CREATING OWN INDEX FOR FLEXIBILITY\nobs = np.arange(1, len(dataset) + 1, 1)\n\n# TAKING DIFFERENT INDICATORS FOR PREDICTION\nOHLC_avg = dataset['Open']\nHLC_avg = dataset[['High', 'Low', 'Close']].mean(axis = 1)\nclose_val = dataset[['Close']]\n\n# PLOTTING ALL INDICATORS IN ONE PLOT\nplt.figure(figsize=(20,10))\nplt.plot(obs, OHLC_avg, 'r', label = 'Opening Price')\nplt.plot(obs, HLC_avg, 'b', label = 'HLC avg')\nplt.plot(obs, close_val, 'g', label = 'Closing price')\nplt.legend(loc = 'upper right')\nplt.show()","8b9df423":"# PREPARATION OF TIME SERIES DATASE\nOHLC_avg = np.reshape(OHLC_avg.values, (len(OHLC_avg),1)) # 1664\nscaler = MinMaxScaler(feature_range=(0, 1))\nOHLC_avg = scaler.fit_transform(OHLC_avg)\n\n# TRAIN-TEST SPLIT\ntrain_OHLC = int(len(df[(df[\"Date\"] >= train_start_date) & (df[\"Date\"] <= train_end_date)]))\ntest_OHLC = len(OHLC_avg) - train_OHLC\ntrain_OHLC, test_OHLC = OHLC_avg[0:train_OHLC,:], OHLC_avg[train_OHLC:len(OHLC_avg),:]\n\n# TIME-SERIES DATASET (FOR TIME T, VALUES FOR TIME T+1)\ntrainX, trainY = new_dataset(train_OHLC, 1)\ntestX, testY = new_dataset(test_OHLC, 1)\n\n# RESHAPING TRAIN AND TEST DATA\ntrainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))\nstep_size = 1","10179633":"# LSTM MODEL\nmodel = Sequential()\nmodel.add(LSTM(32, input_shape=(1, step_size), return_sequences = True))\nmodel.add(LSTM(16))\nmodel.add(Dense(1))\nmodel.add(Activation('linear'))\n\n# MODEL COMPILING AND TRAINING\nmodel.compile(loss='mean_squared_error', optimizer='adagrad') # Try SGD, adam, adagrad and compare!!!\nmodel.fit(trainX, trainY, epochs=5, batch_size=1, verbose=2)\n\n# PREDICTION\ntrainPredict = model.predict(trainX)\ntestPredict = model.predict(testX)","ca5f23c8":"# DE-NORMALIZING FOR PLOTTING\ntrainPredict = scaler.inverse_transform(trainPredict)\ntrainY = scaler.inverse_transform([trainY])\ntestPredict = scaler.inverse_transform(testPredict)\ntestY = scaler.inverse_transform([testY])\n\n\n# TRAINING RMSE\ntrainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\nprint('Train RMSE: %.2f' % (trainScore))\n\n# TEST RMSE\ntestScore = math.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\nprint('Test RMSE: %.2f' % (testScore))","3fdb0e59":"# CREATING SIMILAR DATASET TO PLOT TRAINING PREDICTIONS\ntrainPredictPlot = np.empty_like(OHLC_avg)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[step_size:len(trainPredict)+step_size, :] = trainPredict\n\n# CREATING SIMILAR DATASSET TO PLOT TEST PREDICTIONS\ntestPredictPlot = np.empty_like(OHLC_avg)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(trainPredict)+(step_size*2)+1:len(OHLC_avg)-1, :] = testPredict\n\n# DE-NORMALIZING MAIN DATASET \nOHLC_avg = scaler.inverse_transform(OHLC_avg)\n\n# PLOT OF MAIN OHLC VALUES, TRAIN PREDICTIONS AND TEST PREDICTIONS\n\nplt.figure(figsize=(20,10))\nplt.plot(OHLC_avg, 'g', label = 'original dataset')\nplt.plot(trainPredictPlot, 'r', label = 'training set')\nplt.plot(testPredictPlot, 'b', label = 'predicted stock price\/test set')\nplt.legend(loc = 'upper right')\nplt.xlabel('Time in Days')\nplt.ylabel('OHLC Value of P&G Stocks')\nplt.show()","ff3ba5e8":"backtest_data = pd.DataFrame()\nbacktest_data['P_Open'] = list(list(testPredict[:,0]))\nbtdata = df[(df[\"Date\"] > test_start_date) & (df[\"Date\"] < test_end_date)]\nbacktest_data['R_Open'] = list(btdata['Open'])\nbacktest_data['R_Close'] = list(btdata['Close'])\nbacktest_data['R_High'] = list(btdata['High'])\nbacktest_data['SP_Open'] = list(btdata['S&P 500-Open'])\nbacktest_data['SP_Close'] = list(btdata['S&P-Close'])\nBackTest = bt.Back_Test(backtest_data)\nr2 = sklearn.metrics.r2_score(backtest_data['R_Open'],backtest_data['P_Open'])\nprint(\"R_2 value Test: \",r2)\nprint(\"Sharpe Ratio : \",BackTest[0])\nprint(\"Treynor Ratio: \",BackTest[1])\nprint(\"Profit: \",BackTest[2])\nprint(\"Hit Rate: \",BackTest[3])","6ef413e4":"**User defined functions for data extraction and transformation**","a5822062":"# **LONG SHORT TERM MEMORY FOR P&G STOCK**","504b6fc6":"**Backtesting of the Strategy**","3f9cb67e":"**Plot of Predicted and Original Opening Price**","eed74118":"**LSTM Model Training and Prediction**","fc3a9563":"**IMPORTING IMPORTANT LIBRARIES**","06e8d0f3":"**Plot of P&G stock index values**","2f2b4304":"**Train - Test Split and Data Transformation**","bc314541":"**Model Validation using RMSE**"}}