{"cell_type":{"167732c1":"code","3addb950":"code","603c53e3":"code","6d1f6c73":"code","5baf6bb1":"code","063d1bba":"code","9124a84b":"code","3158e740":"code","f414e51b":"code","fbc181a6":"code","14c3e7b0":"code","ac5ba12c":"code","de07ae93":"markdown","a53cda52":"markdown","33e7d557":"markdown","8398839c":"markdown","92683213":"markdown","08b74ae2":"markdown","1bf82997":"markdown","f1875ebe":"markdown"},"source":{"167732c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3addb950":"ratingsdf = pd.read_csv('..\/input\/ml-challenge\/ratings.csv')\nratingsdf.count()","603c53e3":"ratingsdf['venue_id'].nunique()","6d1f6c73":"uniqueVenuedf = ratingsdf['venue_id']\nuniqueVenuedf.drop_duplicates(inplace=True)\nuniqueVenuedf.count()","5baf6bb1":"uniqueVenuedf.head()","063d1bba":"venuesdf = pd.read_csv('..\/input\/data-exploration\/correct_venues.csv')\nvenuesdf.count()\n","9124a84b":"result = pd.merge(venuesdf,uniqueVenuedf, left_on='id', right_on='venue_id')\nresult = result.drop('venue_id', axis=1)\nresult.head(20)","3158e740":"result.shape","f414e51b":"top10df = pd.read_csv('..\/input\/data-exploration\/top10checkins.csv')\ntop10df.head()","fbc181a6":"result['tmp'] = 1\ntop10df['tmp'] = 1\ncombinedf = pd.merge(top10df, result, on=['tmp'])\ncombinedf = combinedf.drop('tmp', axis=1)\ncombinedf.head()","14c3e7b0":"combinedf.shape","ac5ba12c":"combinedf.to_csv('combine_user_venues.csv', index=False)","de07ae93":"One way to do that would be for each user, we should only shortlist the venues that are within a certain distance, let's say 80km (50 miles) from the user's location, to reflect the likelihood that a user isn't going to spend hours to travel to a faraway venue even though it's highly rated.","a53cda52":"Now we need to combine with the top 10 user table with their locations","33e7d557":"Due to Kaggle's session timing limits, I will need to run several notebooks to reduce this list, so let's go ahead to save this large dataframe for subsequent processing.","8398839c":"# This notebook is to prepare the data to pass to the saved SVD model to make predictions","92683213":"Wow, the potential list of venues for the top 10 check-in users has almost 16 million rows!\nWe need to reduce this list before passing to the SVD prediction model.","08b74ae2":"Create a new dataframe with the unique venue_ids only","1bf82997":"Get ratings table and find all unique venues in the table that have been rated.","f1875ebe":"Merge above table with the venues table to get the latitude and longitude values"}}