{"cell_type":{"a21b889d":"code","7732d8ed":"code","bfe584c2":"code","8c4bb64d":"code","6eb47cd4":"code","57c2be34":"code","518d2a26":"code","4e2f86b7":"code","451fc9e0":"code","1bbb1e0d":"code","5343a764":"code","5aba3ab3":"code","e45e47c6":"code","673c914d":"code","2090baaa":"code","289e65ee":"code","c72d1ef0":"code","9c8d721a":"code","dd7e14be":"code","6d88eeef":"code","70f9684f":"code","2df535ca":"code","f276b808":"code","f5a4d116":"code","438323d1":"code","2a4f95e5":"code","2b678e1f":"markdown","f7e01ffc":"markdown","8675f30d":"markdown","87d5c79c":"markdown","9b8a162e":"markdown","877fdc88":"markdown","722ac285":"markdown","a122a4b6":"markdown","3f1bc7fc":"markdown","a5fcaeb9":"markdown"},"source":{"a21b889d":"!pip install -U lightautoml","7732d8ed":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML\nfrom lightautoml.tasks import Task","bfe584c2":"df_train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')","8c4bb64d":"df_train['IsTrain'] = 1\ndf_test['IsTrain'] = 0\ndf = pd.concat([df_train, df_test], sort=False,axis=0)\n\ndf['date_time'] = pd.to_datetime(df['date_time'])\n\ndf['day_of_week'] = df['date_time'].dt.dayofweek\ndf['hour'] = df['date_time'].dt.hour\ndf['working_hours'] =  df.hour.isin(np.arange(8, 21, 1)).astype(\"int\")\ndf.loc[(df['date_time'].dt.month >= 3) & (df['date_time'].dt.month <= 5), 'season'] = 1\ndf.loc[(df['date_time'].dt.month >= 6) & (df['date_time'].dt.month <= 8), 'season'] = 2\ndf.loc[(df['date_time'].dt.month >= 9) & (df['date_time'].dt.month <= 11), 'season'] = 3\ndf.loc[(df['date_time'].dt.month == 12) | (df['date_time'].dt.month <= 2), 'season'] = 4\n\ntrain = df.query('IsTrain == 1').drop(['IsTrain'], axis=1)\ntest =  df.query('IsTrain == 0').drop(['IsTrain','target_carbon_monoxide','target_benzene','target_nitrogen_oxides'], axis=1)","6eb47cd4":"train.head()","57c2be34":"def do_lightautoml(target, train):\n    laml = TabularAutoML(task=Task('reg', loss='rmsle', metric='rmsle'),\n                         timeout=3600, cpu_limit=4,\n                         reader_params = {'n_jobs': 4, 'cv': 5, 'random_state': 42},\n                         general_params = {'use_algos': [['lgb_tuned', 'cb_tuned'], ['lgb', 'cb']]})\n    laml.fit_predict(train_data=train, roles={'target': target })\n    return(laml)","518d2a26":"train1 = train.query('absolute_humidity >= 0.24').loc[:,['deg_C', 'relative_humidity','absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_5', 'season', 'working_hours', 'target_carbon_monoxide']]\ntrain1","4e2f86b7":"laml1 = do_lightautoml('target_carbon_monoxide', train1)","451fc9e0":"pred1 = laml1.predict(test).data.ravel()\npred1","1bbb1e0d":"train2 = train.loc[:,['sensor_2','target_benzene']]\ntrain2.head()","5343a764":"laml2 = do_lightautoml('target_benzene', train2)","5aba3ab3":"pred2 = laml2.predict(test).data.ravel()\npred2","e45e47c6":"train3 = train.query('absolute_humidity >= 0.24 & season >= 3').loc[:,['deg_C', 'relative_humidity','absolute_humidity', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5', 'working_hours', 'target_nitrogen_oxides']]\ntrain3","673c914d":"laml3 = do_lightautoml('target_nitrogen_oxides', train3)","2090baaa":"pred3 = laml3.predict(test).data.ravel()\npred3","289e65ee":"sub1 = pd.DataFrame({\n    'date_time': test.date_time,\n    'target_carbon_monoxide': pred1,\n    'target_benzene': pred2,\n    'target_nitrogen_oxides': pred3\n})\n\nsub1.head()","c72d1ef0":"train4 = train.query('season >= 3').loc[:,['day_of_week', 'hour', 'season', 'working_hours', 'target_carbon_monoxide']]\ntrain4","9c8d721a":"laml4 = do_lightautoml('target_carbon_monoxide', train4)","dd7e14be":"pred4 = laml4.predict(test).data.ravel()\npred4","6d88eeef":"train5 = train.query('season >= 3').loc[:,['day_of_week', 'hour', 'season', 'working_hours', 'target_nitrogen_oxides']]\ntrain5","70f9684f":"laml5 = do_lightautoml('target_nitrogen_oxides', train5)","2df535ca":"pred5 = laml5.predict(test).data.ravel()\npred5","f276b808":"sub2 = pd.DataFrame({\n    'date_time': test.date_time,\n    'target_carbon_monoxide': pred4,\n    'target_benzene': pred2,\n    'target_nitrogen_oxides': pred5\n})\n\nsub2","f5a4d116":"sub_temp1 = sub1.query(\"date_time < '2011-01-02 21:00:00'\")\nsub_temp2 = sub2.query(\"date_time >= '2011-01-02 21:00:00' & date_time <= '2011-01-05 00:00:00'\")\nsub_temp3 = sub1.query(\"date_time > '2011-01-05 00:00:00' & date_time < '2011-01-28 17:00:00'\")\nsub_temp4 = sub1.query(\"date_time >= '2011-01-28 17:00:00' & date_time <= '2011-01-29 01:00:00'\")\nsub_temp5 = sub1.query(\"date_time > '2011-01-29 01:00:00' & date_time < '2011-02-08 17:00:00'\")\nsub_temp6 = sub2.query(\"date_time >= '2011-02-08 17:00:00' & date_time <= '2011-02-11 20:00:00'\")\nsub_temp7 = sub1.query(\"date_time > '2011-02-11 20:00:00'\")\n\nsubmission = pd.concat([sub_temp1, sub_temp2, sub_temp3, sub_temp4, sub_temp5, sub_temp6, sub_temp7], sort=False,axis=0)","438323d1":"submission","2a4f95e5":"submission.to_csv('LightAutoML_submission.csv',index=False)","2b678e1f":"### Merge predictions","f7e01ffc":"Let's try predicting with LightAutoML using the valid features that we have identified with Pycaret.  \n\nThe results were almost identical to Pycaret. When the features are the same, the results do not seem to change much.","8675f30d":"#### Benzene\nI use only sensor 2, which has a high correlation.","87d5c79c":"### Prediction when the sensor is on\n#### Carbon monoxide\nI use sensors 1, 2, and 5 with high correlation.","9b8a162e":"#### Nitrogen oxides\nI tried excluding the sensors from the feature set one by one, and the score was better when sensor_1 was excluded.","877fdc88":"### Prediction when the sensor is off\n#### Carbon monoxide","722ac285":"#### Nitrogen oxides","a122a4b6":"### Predict with LightAutoML","3f1bc7fc":"# Tabular Playground Series - Jul 2021\nContinued from [last time ](https:\/\/www.kaggle.com\/astashiro\/tps-jul2021-06rethink-features).","a5fcaeb9":"## LightAutoML"}}