{"cell_type":{"ee991690":"code","eda6d73f":"code","8c93b3b5":"code","3b3f0e41":"code","b2777e2f":"code","d77d5539":"code","c5da8c6b":"code","702a8f70":"code","984a53e0":"code","91c3eed4":"code","78992d77":"code","bf37c3fb":"code","27bb2f4e":"code","f1999bf3":"code","f440961b":"code","05f70752":"code","50ce920d":"code","87e3e3fc":"code","bbb4dfa9":"code","bae89d3e":"code","f77f7e5b":"code","51fe4481":"code","2bf9d060":"code","d1b44522":"code","ea4ce74a":"code","3afe0748":"code","14850325":"code","4cc99202":"code","595ae692":"code","5a0019ac":"code","3a23c94d":"code","1ee04f85":"code","03fc6d1c":"code","bb5ed2f9":"code","ae8a85d3":"code","5730d963":"code","39914995":"code","eff95c02":"code","962e71ef":"code","492d994c":"code","3144f0a1":"code","834de717":"code","4930b04e":"code","2471e602":"code","6bb6dc39":"code","619d1acd":"code","b11d2227":"code","959d381e":"code","2f12f274":"code","773fc11c":"code","294d3708":"code","601f4fed":"code","c10326db":"code","13b13440":"code","40983c79":"code","b0e5e29a":"code","7dd315a7":"code","99500590":"code","1d6c63f6":"code","7ce83e40":"code","01987ae2":"code","2b619bc5":"code","d3372a27":"code","ab8fea6b":"code","0c46b1fb":"code","e235c283":"code","d7c93edc":"code","32ef0d37":"code","fdf1b972":"code","b2581a6f":"code","1f704467":"code","adc2ea82":"code","2e225745":"code","f848f3e6":"code","685cf142":"code","f856270c":"code","912eb415":"code","db16b778":"code","e660245c":"code","f0638ac0":"code","82f4fa6a":"code","d2e59a86":"code","7d01f92a":"code","14d427f8":"markdown","88133cb2":"markdown","cd1c0000":"markdown","496fde0f":"markdown","17a350e7":"markdown","6a146b16":"markdown","95b93ee1":"markdown","856a75c9":"markdown","c95791ae":"markdown","4d817bb2":"markdown","251b25a8":"markdown","de0a95e7":"markdown","371adbbf":"markdown","39663334":"markdown","38efd93b":"markdown","1f0b8780":"markdown","a7312994":"markdown","4f1cf019":"markdown","53cd0671":"markdown","eb08bb70":"markdown","1ae81a69":"markdown","cadc1d11":"markdown","887ba451":"markdown","83920c45":"markdown","af40638c":"markdown","9720001a":"markdown","89f4da5f":"markdown","46a37e30":"markdown","08fabc8a":"markdown","84a75902":"markdown","8b042f0a":"markdown","f922f0c0":"markdown","cb8c85d1":"markdown","dd72e89f":"markdown","511a43d1":"markdown","8a62e518":"markdown","0fbd363d":"markdown","7203b01f":"markdown","9a3e8f84":"markdown","27ccaafc":"markdown","7e5ff97a":"markdown","deea3061":"markdown","399e2fe1":"markdown","e9413819":"markdown","7ffb4655":"markdown"},"source":{"ee991690":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nimport warnings\nimport re\nimport PIL.Image as Image #Loading images for the wordcloud mask\nfrom wordcloud import ImageColorGenerator #Also for the mask\nimport squarify\nimport missingno as msno # MissingNo \nwarnings.filterwarnings('ignore')\n%matplotlib inline","eda6d73f":"df_1 = pd.read_csv(r\"..\/input\/google-play-store-apps\/googleplaystore.csv\")\ndf_2 = pd.read_csv(r\"..\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv\")","8c93b3b5":"text = \" \".join(app for app in df_1[\"App\"])\ntext2 = re.sub('[^A-Za-z0-9]+', ' ', text)","3b3f0e41":"char_mask = np.array(Image.open((\"..\/input\/imggoogle\/Google-Play-Store-icon.jpg\")))\nimage_colors = ImageColorGenerator(char_mask)","b2777e2f":"fig, ax = plt.subplots(figsize=(16,8))\n\nwc = WordCloud(background_color=\"white\", mask=char_mask).generate(text2)\nplt.imshow(wc.recolor(color_func=image_colors), interpolation='bilinear')\nplt.axis(\"off\")","d77d5539":"msno.matrix(df_1)","c5da8c6b":"df_1.info()","702a8f70":"msno.matrix(df_2)","984a53e0":"df_2.info()","91c3eed4":"df_1.dropna(inplace=True)\ndf_1.drop_duplicates(\"App\",inplace=True)","78992d77":"df_2.dropna(inplace=True)","bf37c3fb":"#No unusual data\nprint(df_1[\"Type\"].unique())","27bb2f4e":"print(df_1[\"Size\"].unique())","f1999bf3":"df_1[\"Size\"] = df_1[\"Size\"].apply(lambda x: x.replace(\"M\",\"\") if \"M\" in str(x) else x)\ndf_1[\"Size\"] = df_1[\"Size\"].apply(lambda x: x.replace(\",\",\"\") if \",\" in str(x) else x)\ndf_1[\"Size\"] = df_1[\"Size\"].apply(lambda x: x.replace(\"Varies with device\",\"0\") if \"Varies with device\" in str(x) else x)\ndf_1[\"Size\"] = df_1[\"Size\"].apply(lambda x: float(str(x).replace(\"k\",\"\"))\/1024 if \"k\" in str(x) else x)","f440961b":"print(df_1[\"Price\"].unique())","05f70752":"df_1[\"Price\"] = df_1[\"Price\"].apply(lambda x: x.replace(\"$\",\"\") if \"$\" in str(x) else x)\ndf_1[\"Price\"] = df_1[\"Price\"].apply(lambda x: float(x))","50ce920d":"print(df_1[\"Category\"].unique())","87e3e3fc":"print(df_1[\"Installs\"].unique())","bbb4dfa9":"df_1[\"Installs\"] = df_1[\"Installs\"].apply(lambda x: x.replace(\"+\", \"\") if \"+\" in str(x) else x)\ndf_1[\"Installs\"] = df_1[\"Installs\"].apply(lambda x: x.replace(\",\", \"\") if \",\" in str(x) else x)\ndf_1[\"Installs\"] = df_1[\"Installs\"].apply(lambda x: int(x))","bae89d3e":"df_1[\"Reviews\"] = df_1[\"Reviews\"].astype(int)","f77f7e5b":"numerical_data = pd.DataFrame()\nnumerical_data[\"Reviews_Log\"] = np.log(df_1[\"Reviews\"])\nnumerical_data[\"Installs_Log\"] = np.log(df_1[\"Installs\"])\nnumerical_data[\"Rating\"] = df_1[\"Rating\"]\nnumerical_data[\"Price\"] = df_1[\"Price\"]\nnumerical_data[\"Type\"] = df_1[\"Type\"]\nnumerical_data[\"Size\"] = df_1[\"Size\"]","51fe4481":"# Distribution of ratings over all the apps\nsns.distplot(numerical_data[\"Rating\"]).set_title(\"Distribution of ratings\")","2bf9d060":"numerical_data_free = numerical_data[numerical_data[\"Type\"] == \"Free\"]\nnumerical_data_paid = numerical_data[numerical_data[\"Type\"] == \"Paid\"]\n# Seperated per type\nfig,(ax1,ax2) = plt.subplots(1,2,figsize=(15,5))\nsns.distplot(numerical_data_free[\"Rating\"],ax=ax1).set_title(\"Distribution of ratings - Free Apps\")\nsns.distplot(numerical_data_paid[\"Rating\"],ax=ax2,color=\"red\").set_title(\"Distribution of ratings - Paid Apps\")\n","d1b44522":"fig,ax1 = plt.subplots(figsize=(14,10))\np1= sns.catplot(x=\"Rating\",y=\"Category\",kind=\"box\",data=df_1,ax=ax1)\nplt.close(p1.fig)\nplt.title(\"Distribution of ratings - Based on App Category\")","ea4ce74a":"best_cat = df_1.groupby(\"Category\")[\"Rating\"].mean().sort_values(ascending=False)","3afe0748":"print(best_cat.iloc[:5])","14850325":"print(best_cat.iloc[28:34])","4cc99202":"cnt_rating = sns.catplot(x=\"Rating\",y=\"Content Rating\",data=df_1,kind=\"violin\",hue=\"Type\")\nsns.color_palette(\"Spectral\", 10)\ncnt_rating.set_xticklabels(rotation=30, horizontalalignment='right')","595ae692":"content_mean = df_1.groupby(\"Content Rating\")[\"Rating\"].mean().sort_values(ascending=False)","5a0019ac":"print(content_mean)","3a23c94d":"most_rev = df_1.groupby(\"App\")[\"Reviews\"].sum().sort_values(ascending=False)[:10]","1ee04f85":"most_reviewed_apps = df_1[df_1[\"App\"].isin(most_rev.index)]\nmost_reviewed_apps = most_reviewed_apps[[\"App\",\"Reviews\"]].sort_values(by=\"Reviews\")","03fc6d1c":"most_reviewed_apps","bb5ed2f9":"text_replace =  {\"Security Master - Antivirus, VPN, AppLock, Booster\" : \"Security Master\",\n                \"Clean Master- Space Cleaner & Antivirus\": \"Clean Master\",\n                \"Messenger \u2013 Text and Video Chat for Free\": \"Messenger\"}","ae8a85d3":"most_reviewed_apps[\"App\"] = most_reviewed_apps[\"App\"].replace(text_replace)","5730d963":"most_reviewed_apps[\"Milions\"] = round(most_reviewed_apps[\"Reviews\"] \/ 1000000,2)\nmost_reviewed_apps[\"Milions\"] = most_reviewed_apps[\"Milions\"].apply(lambda x: str(x) + \"M\")\nmost_reviewed_apps[\"App\"] = most_reviewed_apps[\"App\"].map(str) + \" \" +  most_reviewed_apps[\"Milions\"]\nmost_reviewed_apps[\"App\"] = most_reviewed_apps[\"App\"].replace(text_replace)","39914995":"fig, ax = plt.subplots(figsize=(14,7))\nsquarify.plot(sizes=most_reviewed_apps[\"Reviews\"], label=most_reviewed_apps[\"App\"], alpha=.8,text_kwargs={'fontsize':10})\nplt.axis('off')","eff95c02":"num_corr = numerical_data.corr()\nprint(num_corr)","962e71ef":"sns.heatmap(num_corr,annot=True,cmap = 'Reds')","492d994c":"sns.lmplot(x=\"Installs_Log\", y=\"Reviews_Log\", data=numerical_data,col=\"Type\");","3144f0a1":"sns.jointplot(x=\"Price\",y=\"Rating\",data=numerical_data)","834de717":"df_1[\"Price\"].describe()","4930b04e":"wow_price = df_1[df_1[\"Price\"] > 200]","2471e602":"#Worst thing about it is that one has over 100k installs\nprint(wow_price[\"Installs\"].sum())","6bb6dc39":"print(wow_price[\"App\"])\n#Wow","619d1acd":"wow_price[\"Money Spend\"] = wow_price[\"Installs\"] * wow_price[\"Price\"]","b11d2227":"print(\"The amount of money people spend on this :\")\nprint(wow_price[\"Money Spend\"].sum())","959d381e":"clean_price = df_1[df_1[\"Price\"] < 200]\nsns.jointplot(x=\"Price\",y=\"Rating\",data=clean_price)","2f12f274":"ax,fig = plt.subplots(figsize=(15,7))\nsns.countplot(y= df_1[\"Category\"],order=df_1[\"Category\"].value_counts().index)","773fc11c":"df_split = pd.DataFrame(df_1)","294d3708":"list_of_comb = []\ndf_split[\"Combinations\"] = df_split[\"Genres\"].apply(lambda x: list_of_comb.append(x) if \";\" in str(x) else x)","601f4fed":"combination_data = pd.Series(list_of_comb)","c10326db":"sns.countplot(y = combination_data, order=combination_data.value_counts().iloc[:10].index)","13b13440":"df_split['A'], df_split['B'] = df_split['Genres'].str.split(';', 1).str","40983c79":"#Primary Genres\nsns.countplot(y = df_split[\"A\"], order=df_split[\"A\"].value_counts().iloc[:15].index)","b0e5e29a":"# Sec Genres\nsns.countplot(y= df_split[\"B\"], order=df_split[\"B\"].value_counts().index)","7dd315a7":"df_games = pd.DataFrame(df_split[df_split[\"Category\"] == \"GAME\"])","99500590":"sns.countplot(y = df_games[\"A\"], order = df_games[\"A\"].value_counts().index)","1d6c63f6":"mean_rating_games = df_games.groupby(\"A\")[\"Rating\"].mean().sort_values(ascending=False)\nmean_rating_games","7ce83e40":"df_merge_col = pd.merge(df_1, df_2, on='App')","01987ae2":"sentiment_df = df_merge_col[[\"App\",\"Category\",\"Sentiment\",\"Translated_Review\",\"Sentiment_Polarity\",\"Sentiment_Subjectivity\"]]","2b619bc5":"sentiment_df[\"Review_Len\"] = sentiment_df[\"Translated_Review\"].astype(str).apply(lambda x : len(x))","d3372a27":"sentiment_df.head()","ab8fea6b":"split = sentiment_df.groupby(\"Category\")[\"Sentiment\"].value_counts()","0c46b1fb":"sent = sentiment_df.groupby(\"Category\").count()","e235c283":"rating = split \/ sent[\"Sentiment\"]","d7c93edc":"rating = pd.DataFrame(rating)\nrating.rename(columns={\"Sentiment\" : \"Percent\"}, inplace=True)\nrating.reset_index(level=\"Sentiment\", inplace=True)","32ef0d37":"rating.head()","fdf1b972":"rating_positive = rating[rating[\"Sentiment\"] == \"Positive\"]\nrating_neutral = rating[rating[\"Sentiment\"] == \"Neutral\"]\nrating_negative = rating[rating[\"Sentiment\"] == \"Negative\"]","b2581a6f":"fig,ax = plt.subplots(figsize=(15,7))\nplt.bar(rating_positive.index,rating_positive[\"Percent\"],color=\"forestgreen\", label=\"Positive\")\nplt.bar(rating_neutral.index,rating_neutral[\"Percent\"],bottom=rating_positive[\"Percent\"],color=\"darkgrey\",label=\"Neutral\",)\nplt.bar(rating_negative.index,rating_negative[\"Percent\"],bottom=rating_positive[\"Percent\"] + rating_neutral[\"Percent\"],color=\"maroon\",label=\"Negative\")\nplt.xticks(rotation='vertical')\nplt.legend()","1f704467":"sort_positive_ratings = rating_positive.sort_values(by=[\"Percent\"], ascending=False)","adc2ea82":"print(sort_positive_ratings.head())","2e225745":"print(sort_positive_ratings.tail())","f848f3e6":"positive_review = sentiment_df[sentiment_df[\"Sentiment\"]==\"Positive\"]\nneutral_review = sentiment_df[sentiment_df[\"Sentiment\"]==\"Neutral\"]\nnegative_review = sentiment_df[sentiment_df[\"Sentiment\"]==\"Negative\"]","685cf142":"text_positive = \" \".join(review for review in positive_review[\"Translated_Review\"].astype(str))\ntext_neutral = \" \".join(review for review in neutral_review[\"Translated_Review\"].astype(str))\ntext_negative = \" \".join(review for review in negative_review[\"Translated_Review\"].astype(str))","f856270c":"fig, ax = plt.subplots(figsize=(14,6))\n\nwordcloud = WordCloud(background_color=\"white\").generate(text_positive)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")","912eb415":"fig, ax = plt.subplots(figsize=(14,6))\n\nwordcloud = WordCloud(background_color=\"white\").generate(text_neutral)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")","db16b778":"fig, ax = plt.subplots(figsize=(14,6))\n\nwordcloud = WordCloud(background_color=\"white\").generate(text_negative)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")","e660245c":"sentiment_df.dropna(inplace=True)","f0638ac0":"sns.distplot(sentiment_df[\"Sentiment_Polarity\"]).set_title(\"Distribution of Sentiment Polarity\")","82f4fa6a":"fig, (ax1, ax2) = plt.subplots(1,2,figsize=(12,5))\nsns.distplot(positive_review[\"Sentiment_Polarity\"],ax=ax1).set_title(\"Distribution of Sentiment Polarity - Positive Review\")\nsns.distplot(negative_review[\"Sentiment_Polarity\"],color=\"r\",ax=ax2).set_title(\"Distribution of Sentiment Polarity - Negative Review\")","d2e59a86":"fig = plt.subplots(figsize=(12,6))\nsns.boxplot(x = sentiment_df[\"Sentiment_Polarity\"],y= sentiment_df[\"Category\"]).set_title(\"Distribution of Sentiment Polarity per Category\")","7d01f92a":"fig, (ax1, ax2, ax3) = plt.subplots(1,3,figsize=(15,5))\nsns.distplot(positive_review[\"Review_Len\"],ax=ax1).set_title(\"Distribution of review lengths - Positive\")\nsns.distplot(neutral_review[\"Review_Len\"],ax=ax2).set_title(\"Distribution of review lengths - Neutral\")\nsns.distplot(negative_review[\"Review_Len\"],ax=ax3).set_title(\"Distribution of review lengths - Negative\")","14d427f8":"Generally, the mean of the ratings is close. There are many extream values on the lower end. It's a bit hard to determine what the best category is, so we are going to calculate the mean using groupby and print out the best and the worst below.","88133cb2":"Seperating the distribution between the positive and negative reviews.","cd1c0000":"## <a id=app_wordcloud>App Wordcloud<\/a>","496fde0f":"The ratings of the free apps look to be more evenly distributed with their rating, but there is no major difference between them.","17a350e7":"Mandatory look at the game category.","6a146b16":"Positive reviews WordCloud","95b93ee1":"Games than to have the most extream values on the box plot. The conclusion I draw from it is that they tend to have more passionate positive and negative reviews that either go to +1 or -1.","856a75c9":"**Loading the dataset**","c95791ae":"We need to fix three things in the \"Size\" column.\n* The M & k at the end of the number\n* The string \"Varies with device\"\n* Convert everything to a number","4d817bb2":"Merging the two datasets based on the Apps.","251b25a8":"Most frequent categories.","de0a95e7":"**Introduction**","371adbbf":"There are more negative sentiment reviews that are closer to zero then there are positive ones. Also, the extream value of 1 is more frequent on the positive reviews.","39663334":"The \"Installs\" column needs the plus sign removed and turned into a number.","38efd93b":"Events score the highest mean rating while dating apps perform the worst.","1f0b8780":"Most frequent genre combinations.","a7312994":"## <a id=genres>Genres & Categories<\/a>","4f1cf019":"Now, let us see if there is a difference of ratings between different categories using a box plot.","53cd0671":"Some strange prices on the \"Price\" axis.","eb08bb70":"There are of course a lot more things that can be done with the data and this EDA only covers a small segment of it.\n\nThank you for your time. Please let me know if it helped you in any way with your analysis and constructive feedback is always welcome.","1ae81a69":"## <a id=numerical_data>Numerical Data<\/a>","cadc1d11":"Let us see if there is any difference to the distribution of rating between free and paid apps.","887ba451":"Making another dataset with the columns that we will need later.","83920c45":"I like to create a separate dataset with numerical values when I need to log() some columns. In the lines below we are going to look into the numerical columns of the dataset.","af40638c":"## <a id=review_dataset>Reviews Dataset<\/a>","9720001a":"Spliting the \"Genres\" column into two seperate columns.","89f4da5f":"Distribution of sentiment polarity.","46a37e30":"Preparing review text for a wordcloud.","08fabc8a":"Looks like Action and Arcade really dominate the mobile game market.","84a75902":"## <a id=data_cleaning>Data Cleaning<\/a>","8b042f0a":"Spliting the dataset between the Positive, Neutral and Negative sentiments.","f922f0c0":"Neutral reviews WordCloud","cb8c85d1":"## <a id=done>Finish line<\/a>","dd72e89f":"Table of content\n1. [App Wordcloud](#app_wordcloud)\n2. [Missing Data Check](#missing_data_check)\n3. [Data Cleaning](#data_cleaning)\n4. [Numerical Data](#numerical_data)\n5. [Genres & Categories](#genres)\n6. [Reviews Dataset](#review_dataset)\n7. [Finish line](#done)","511a43d1":"**Importing of libraries**","8a62e518":"Negative reviews WordCloud","0fbd363d":"## <a id=missing_data_check>Missing Data Check<\/a>","7203b01f":"This notebook covers the data cleaning and initial exploration of the \"Google Play Store Apps\" dataset.\n\nEach EDA I do provides an opportunity for me to learn and improve. During this specific analysis, I have scratched the very surface of NLP, explored the Treemap plot type and played with the lambda function.\n\nIn the future, I plan to dwell deeper into NLP to get a firm understanding of it.","9a3e8f84":"Generation of the mask used for the word cloud","27ccaafc":"The last thing we are going to do is check if there is any substantial difference in the length of the positive, negative and neutral reviews.","7e5ff97a":"The most reviewed apps on the store","deea3061":"Checking for correlations between the numerical data.","399e2fe1":"In the \"Price\" column we need to remove the dollar sign and turn everything into a number.","e9413819":"Data preparation for a stacked bar plot.","7ffb4655":"Let us check again without the absurd prices."}}