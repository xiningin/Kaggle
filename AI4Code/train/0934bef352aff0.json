{"cell_type":{"e5e2905d":"code","5cbc29cc":"code","dc5f16fe":"code","f34468bd":"code","eaa74c12":"code","493ed46a":"code","655f08cd":"code","9938e038":"code","9b350d28":"code","b63ff5bb":"code","366f2962":"code","afbb762e":"code","012ece0c":"code","bf161814":"code","4e23cb70":"code","01d0c13e":"markdown","8ea1a4e8":"markdown","d3c444db":"markdown","0bfb23cd":"markdown","900d1bb7":"markdown","67a7885e":"markdown","53a4ee3d":"markdown"},"source":{"e5e2905d":"!pip install -U lightautoml","5cbc29cc":"from lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.tasks import Task\nfrom lightautoml.dataset.roles import NumericRole\n\n\nimport sys\nimport os\nimport math\nimport time\nimport random\nimport shutil\nfrom pathlib import Path\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.metrics import mean_absolute_error\n\nimport scipy as sp\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import accuracy_score, mean_squared_error\nfrom sklearn.metrics import mean_squared_error","dc5f16fe":"train = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/train.csv')\n\ntarget = train.loss\ntrain = train.drop(['id'],axis=1)\nfeature_columns = train.columns.values\nfeature_columns =feature_columns[:-1]\n\ntarget_column = 'loss'\ntrain","f34468bd":"train_add = pd.read_csv('..\/input\/tabular-denoising-residual-network\/yoof.csv')\ntrain_add = train_add.rename(columns={'loss':'pred'})\ntrain_add = train_add.drop(['ID'],axis=1)\ntrain = pd.concat([train,train_add],axis=1)\ntrain","eaa74c12":"test = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/test.csv')\ntest = test.drop(['id'],axis=1)\ntest","493ed46a":"test_add = pd.read_csv('..\/input\/tabular-denoising-residual-network\/submission.csv')\ntest_add = test_add.rename(columns={'loss':'pred'})\ntest_add = test_add.drop(['ID'],axis=1)\ntest = pd.concat([test,test_add],axis=1)\ntest","655f08cd":"x_train, x_test, y_train, y_test = train_test_split(train, target, test_size=0.2, random_state=42)","9938e038":"%%time\ntask = Task('reg',)\n\nTARGET_NAME = 'loss'\nroles = {\n    'target': TARGET_NAME,\n    NumericRole(np.float32): feature_columns\n}\n#roles = {\n#    'target': TARGET_NAME\n#    'weights': 'weight' # To calculate metric only on real targets\n#}\n\n#    NumericRole(np.float32, prob = True): feature_columns\n","9b350d28":"N_THREADS = 4 # threads cnt for lgbm and linear models\nN_FOLDS = 5 # folds cnt for AutoML\nRANDOM_STATE = 42 # fixed random state for various reasons\nTEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 8 * 3600 # Time in seconds for automl run","b63ff5bb":"params = {\n    'metric': 'binary_logloss',\n    'n_estimators': 10000,\n    'objective': 'binary',\n    'learning_rate': 0.02,\n    'min_child_samples': 150,\n    'reg_alpha': 3e-5,\n    'reg_lambda': 9e-2,\n    'num_leaves': 20,\n    'max_depth': 16,\n    'colsample_bytree': 0.8,\n    'subsample': 0.8,\n    'subsample_freq': 2,\n    'max_bin': 240\n}\n\ncb_params = {\n    'max_depth':6,\n    'max_ctr_complexity': 5,\n    'num_trees': 50000,\n    'od_wait': 500,\n    'od_type':'Iter', \n    'learning_rate': 0.04,\n    'min_data_in_leaf': 3\n}","366f2962":"#automl = TabularAutoML(task = task, \n#                       timeout = TIMEOUT,\n#                       cpu_limit = N_THREADS,\n#                       reader_params = {'n_jobs': N_THREADS, 'cv': N_FOLDS, 'random_state': RANDOM_STATE},\n#                      )\n\nautoml = TabularAutoML(task = task, \n                           timeout = TIMEOUT,\n                           cpu_limit = N_THREADS,\n                           general_params = {'use_algos': [['linear_l2', 'lgb', 'cb']]},\n                           selection_params = {'mode': 0},\n                           reader_params = {'n_jobs': N_THREADS, 'cv': N_FOLDS, 'random_state': 42},\n                           lgb_params = {'default_params': params, 'freeze_defaults': True},\n                           cb_params = {'default_params': cb_params, 'freeze_defaults': True})\noof_pred = automl.fit_predict(x_test, roles = roles)\n#logging.info('oof_pred:\\n{}\\nShape = {}'.format(oof_pred, oof_pred.shape))","afbb762e":"%%time\n\n# Fast feature importances calculation\n#fast_fi = automl.get_feature_scores('fast')\n#fast_fi.set_index('Feature')['Importance'].plot.bar(figsize = (20, 10), grid = True)","012ece0c":"preds_df = automl.predict(x_test)\nprint('#############',np.sqrt(mean_squared_error(y_test, preds_df.data[:,0])),mean_squared_error(y_test,preds_df.data[:,0]))","bf161814":"preds_df = automl.predict(test)","4e23cb70":"sub = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/sample_submission.csv')\nsub.loss = preds_df.data[:,0]\nsub.to_csv('submit.csv',index=False)\nsub","01d0c13e":"\u3299\ud83d\udd30\ud83d\uddd1\u2b1b\ud83d\udfe5\ud83d\udfe8\ud83d\udfe9","8ea1a4e8":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Data create<\/span>","d3c444db":"![image.png](attachment:d121460a-300c-4d98-b4c2-ca30645d4621.png)","0bfb23cd":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">LightAUTOML<\/span>","900d1bb7":"thanks https:\/\/www.kaggle.com\/alexryzhkov\/n3-tps-april-21-lightautoml-starter<br>\nthanks your comment. @Alexander Ryzhkov ","67a7885e":"<span style=\"color: orabge; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Submit<\/span>","53a4ee3d":"### Final submission deadline - August 31, 2021"}}