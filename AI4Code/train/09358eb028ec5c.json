{"cell_type":{"7e3a8257":"code","27408841":"code","e9fd3de9":"code","1354c282":"code","93e2217c":"code","1a2796fe":"code","4161b1ab":"code","e00efcf8":"code","c650c552":"code","3d7bceca":"code","52f91322":"code","5c4ca3b5":"code","6bec898e":"code","b6b542db":"code","e0dd2a31":"code","5db235eb":"code","8da07a67":"code","8e7fceb5":"code","7e36ec5b":"code","198aa97b":"code","18073a6b":"code","c9ebfd85":"code","048e9226":"code","f69dc689":"code","ab2147d9":"code","b8e59434":"code","c623a927":"markdown","04c4b6cc":"markdown","85d0b2e6":"markdown","75cbd331":"markdown","8a7336a6":"markdown","41774e0a":"markdown","39f0ec5e":"markdown","06500f8d":"markdown","ae540dda":"markdown","dfa5b194":"markdown","d796ae8c":"markdown","7459031f":"markdown","97c798ae":"markdown","2e218d0c":"markdown","f0bf806b":"markdown","63621a89":"markdown","f9a29884":"markdown","0f591c60":"markdown","81c3e5f0":"markdown"},"source":{"7e3a8257":"import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n# disable Pandas notification \npd.options.mode.chained_assignment = None\n#to write model in file\nfrom sklearn.externals import joblib\n# for plotting\n%matplotlib inline\nfrom matplotlib import pyplot as plt\n\n#function for check missing data in Dataframes\ndef missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    alldata = pd.concat([total, percent], axis=1, keys=['Total', 'in Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    alldata['Types'] = types\n    return(np.transpose(alldata)) ","27408841":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv('..\/input\/test.csv')","e9fd3de9":"train_df.head()","1354c282":"test_df.head()","93e2217c":"missing_data(train_df)","1a2796fe":"missing_data(test_df)","4161b1ab":"train_df['Embarked'].value_counts()","e00efcf8":"# Getting median for Age\nmedian_age = train_df.Age.median()\n# Getting mean value for Fare\nmean_fare = train_df.Fare.mean()\n# Feature Engineering\nfor line in [train_df, test_df]:    \n    # filling 'Age' Nan values and converting to integer type\n    line['Age'].fillna(median_age, inplace = True)\n    line['Age'] = line['Age'].astype(int)    \n    # Filling 'Fare' feature with mean value\n    line['Fare'].fillna(mean_fare, inplace = True)    \n    # Filling 'Embarked' nan with S\n    line['Embarked'].fillna('S', inplace = True)    \n    # Creating new feature \"Family Size\"\n    line['FamSize'] = line.SibSp + line.Parch","c650c552":"# Creating dictionarys for mapping values\nmap_embarked = {'S': 1, 'C': 2, 'Q': 3}\nmap_sex = {'male': 1, 'female': 2}\n\nfor dataset in [train_df, test_df]:\n    dataset['Embarked'] = dataset.Embarked.map(map_embarked)\n    dataset['Sex'] = dataset.Sex.map(map_sex)","3d7bceca":"train_df = train_df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)","52f91322":"test_df = test_df.drop(['Name', 'Ticket', 'Cabin'], axis=1)","5c4ca3b5":"train_df.head()","6bec898e":"test_df.head()","b6b542db":"train_df.info()","e0dd2a31":"test_df.info()","5db235eb":"X_train = train_df.drop('Survived', axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop('PassengerId', axis=1).copy()","8da07a67":"# Random Forest with oob\n\nrandom_forest = RandomForestClassifier(n_estimators=100, oob_score = True)\nrandom_forest.fit(X_train, Y_train)\n\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)","8e7fceb5":"print('Accuracy:', acc_random_forest, '%')","7e36ec5b":"print(\"oob score:\", round(random_forest.oob_score_, 4)*100, \"%\")","198aa97b":"feature_imp = pd.DataFrame({'Feature':X_train.columns,'Importance':np.round(random_forest.feature_importances_,3)})\nfeature_imp = feature_imp.sort_values('Importance',ascending=False).set_index('Feature')\nfeature_imp.head(15)","18073a6b":"submission = pd.DataFrame({'PassengerId':test_df['PassengerId'],'Survived':Y_prediction})","c9ebfd85":"submission.head()","048e9226":"# submission.to_csv('submission.csv', index=False)","f69dc689":"mean_fare","ab2147d9":"im = random_forest.predict([[2, 1, 32, 0, 0, 32.2000, 1, 0]])","b8e59434":"print ('Survived =', im[0])","c623a927":"Looks like everything is good. So we can start building machine learning model","04c4b6cc":"## Taking a prediction on me.","85d0b2e6":"Ok. There are NaN values in our data set in the Age, Fare and Embarked columns. We will fill them later. We can also drop the Cabin column as it contains a lot of NaN values.","75cbd331":"Take a look at our data again","8a7336a6":"## Importing Libraries and Packages","41774e0a":"We have a model, we need to try it. Let's imagine me on Tiatnic and try to predict whether I will survive or not. So, Im 32 years old (Age = 32) man (Sex = 1) traveling Second class (Pclass = 2) without family (SibSp = 0, Parch = 0, FamSize = 0). My Port of Embarkation is Southampton (Embarked = 1). And my Fare is mean_fare value (32.2). Array to prediction will be look like this '2, 1, 32, 0, 0, 32.2000, 1, 0'","39f0ec5e":"### Converting Features","06500f8d":"## Building Machine Learning Model","ae540dda":"# Very Simple Predicting the Survival of Titanic Passengers with RandomForest","dfa5b194":"Let's look at the Embarked column to determine better candidate to fill in the missing values.","d796ae8c":"## Feature Engineering","7459031f":"### Feature Importance","97c798ae":"### Viewing missing values","2e218d0c":"As you remember, we wrote a small function to display NaN values in our datasets. Let's use it.","f0bf806b":"### In this challenge, we are asked to predict whether a passenger on the titanic would have been survived or not.","63621a89":"Unfortunately, the model predicts not that I want to see. But it's works.","f9a29884":"## Loading and Viewing Dataset","0f591c60":"So we use value *\"S\"*. For fill all Nan values in Age columns we will use median(), for fare mean() value. Also we add some extra field named FamSize (counting family).","81c3e5f0":"In both datasets we drop 'PassengerId', 'Name', 'Ticket' and 'Cabin' features "}}