{"cell_type":{"eec3d26b":"code","2b8c92b6":"code","2609ccab":"code","6cdc7ef2":"code","7ef7b0de":"code","25a801f6":"code","c9759a5d":"code","09708406":"code","c9733329":"code","a9c9f28e":"code","f8511f77":"code","ec873ff1":"code","b5b8e903":"code","dc3addb9":"code","5598c324":"code","72857af2":"code","7a2ef5f0":"code","d0e5c3b8":"code","1961d8f1":"code","0d293d41":"code","8786e566":"code","65d41bb8":"code","8aba4c8f":"code","ac5d16f2":"code","3d812d7c":"code","4e4e050f":"code","973a706d":"code","b48aae98":"code","6f5988bb":"code","b9df4400":"code","cb54b9ed":"code","b3270f56":"code","32f9eebb":"code","99351585":"code","07e0544b":"code","30fa6e48":"code","e5586cb8":"code","d16767e7":"code","61d1e391":"code","fbed3cff":"code","220f56ac":"code","bec3c8d1":"code","50205434":"code","b60f6550":"code","229dd965":"code","07019c96":"code","1d095dbb":"code","90d2db73":"code","a750074f":"code","1f499c52":"code","02a093fe":"code","631b7c48":"code","b23995a1":"code","51edc057":"code","9d4fd537":"code","305c518a":"code","b929e6a3":"code","269234e2":"code","d40b9ee9":"code","cd04e042":"code","a776fafe":"code","35b632aa":"code","aaef527d":"code","e08a2e04":"code","450404d6":"code","a65ef90e":"code","c78d0d8a":"code","e2c4115f":"code","8b75b5d8":"code","b13228eb":"code","47b3f5e1":"code","fa105b98":"code","4b10a472":"code","9778b652":"code","c16e4dfd":"code","756a7f33":"code","4252d7de":"code","0045fc4f":"code","520d79dd":"code","eea8ec73":"code","87cd4843":"code","60a48daf":"code","85c9bc0e":"code","60f23ea8":"code","63525a20":"code","0d62899c":"code","d2f9225d":"code","fb8f8466":"code","d1694c48":"code","dc7a6dfe":"code","87f9f530":"code","bddf8fec":"code","62d8cc53":"code","7c55e6b5":"code","c117368c":"code","3fb187eb":"code","0bc110ab":"code","11fed1cb":"code","6615a1e5":"code","2ec81ca4":"code","bd2a1db2":"code","959f7714":"code","4788d90e":"code","4c69a233":"code","4701f72e":"code","62a34ecf":"code","14358f64":"code","ebae689b":"code","dc75c8cd":"code","25709aee":"code","3271d60d":"code","7a35d01e":"code","2d6da6ac":"code","d7bb5c4f":"code","575b292d":"code","4f570ed0":"code","f173be93":"code","2c5f0025":"code","819577c1":"code","85f7e2c6":"code","abc99200":"code","d1654b02":"code","981de157":"code","e0366429":"code","4e0f2b4e":"code","c6ccbd1d":"code","4978a6d8":"code","f0e90844":"code","010d9135":"code","685b2b6b":"code","480b3806":"code","acec5a8a":"code","1e9a9db5":"code","8f53358a":"code","7c5f3bbd":"code","be0a59a9":"code","85f68ca4":"code","29f0b967":"code","2d7c1361":"code","52427360":"code","200e33d2":"code","da9c40c8":"code","dcf18398":"code","9f047c39":"code","76e2f91a":"code","55e65a28":"code","3bcc6205":"code","67cc1951":"code","bd336bf3":"markdown","98a0cee0":"markdown","c8713c20":"markdown","6a598624":"markdown","660c8694":"markdown","5c762655":"markdown","be820144":"markdown","931454a0":"markdown"},"source":{"eec3d26b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import LeaveOneOut\nfrom sklearn.model_selection import LeavePOut\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import tree\nfrom sklearn.tree import export_graphviz\nfrom sklearn.externals.six import StringIO  \nfrom IPython.display import Image\nfrom sklearn.model_selection import GridSearchCV, train_test_split, StratifiedKFold\nimport warnings\nwarnings.filterwarnings('ignore')","2b8c92b6":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2609ccab":"df = pd.read_csv('\/kaggle\/input\/bank-marketing.csv')","6cdc7ef2":"df.head()","7ef7b0de":"df.tail()","25a801f6":"df.info()","c9759a5d":"df.dtypes","09708406":"df.isnull().sum()","c9733329":"df.describe()","a9c9f28e":"df","f8511f77":"df['pdays']","ec873ff1":"df['pdays'].value_counts().sum()","b5b8e903":"df['pdays'].value_counts()","dc3addb9":"df['pdays'].describe()","5598c324":"df['pdays'].describe()","72857af2":"x = df.groupby(['education'], as_index=False)['balance'].median()\n\nfig = plt.figure(figsize=(12,8))\n\nsns.barplot(x=\"balance\", y=\"education\", data=x,\n            label=\"Total\", palette=\"magma\")\nplt.show()","7a2ef5f0":"df['education'].value_counts()","d0e5c3b8":"plt.boxplot(df['pdays'])\nplt.show()","1961d8f1":"df.head()","0d293d41":"cat = ['job', 'marital', 'education', 'targeted',   'default', 'housing', 'loan', 'contact', 'month','poutcome']\n\nfig, axis = plt.subplots(4, 3,  figsize=(25, 20))\n\ncounter = 0\nfor items in cat:\n    value_counts = df[items].value_counts()\n    \n    trace_x = counter \/\/ 3\n    trace_y = counter % 3\n    x_pos = np.arange(0, len(value_counts))\n    my_colors = 'rgbkymc'\n    \n    axis[trace_x, trace_y].bar(x_pos, value_counts.values, tick_label = value_counts.index,color=my_colors)\n    \n    axis[trace_x, trace_y].set_title(items)\n    \n    for tick in axis[trace_x, trace_y].get_xticklabels():\n        tick.set_rotation(90)\n    \n    counter += 1\n\nplt.tight_layout()\nplt.show()","8786e566":"num = ['age','salary','balance', 'day','duration', 'campaign', 'pdays', 'previous']\n\nfig, axis = plt.subplots(3, 3, sharex=False, sharey=False, figsize=(20, 15))\n\ncounter = 0\nfor items in num:\n    \n    trace_x = counter \/\/ 3\n    trace_y = counter % 3\n    \n    \n    axis[trace_x, trace_y].hist(df[items])\n    \n    axis[trace_x, trace_y].set_title(items)\n    \n    counter += 1\n\nplt.tight_layout()\nplt.show()","65d41bb8":"plt.figure(figsize=(25, 6))\n\n\n\nplt.subplot(1,2,1)\nplt1 = df.age.value_counts().plot('bar')\nplt.title('Age')\n\n\nplt.subplot(1,2,2)\nplt1 = df.job.value_counts().plot('bar')\nplt.title('Job')\n\nplt.figure(figsize=(25, 6))\n\nplt.subplot(1,2,1)\nplt1 = df.salary.value_counts().plot('bar')\nplt.title('Salary')\nplt.show()\n\nplt.subplot(1,2,2)\nplt1 = df.education.value_counts().plot('bar')\nplt.title('Education')\nplt.show()\n\n\nplt.figure(figsize=(25, 6))\n\nplt.subplot(1,2,1)\nplt1 = df.targeted.value_counts().plot('bar')\nplt.title('targeted')\nplt.show()\n\nplt.subplot(1,2,2)\nplt1 = df.default.value_counts().plot('bar')\nplt.title('default')\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.tight_layout()\nplt.show()","8aba4c8f":"def plot_count(x,fig):\n    plt.subplot(4,2,fig)\n   \n    sns.countplot(df[x],palette=(\"magma\"))\n    plt.subplot(4,2,(fig+1))\n    \n    sns.boxplot(x=df[x], y=df.response, palette=(\"magma\"))\n    \nplt.figure(figsize=(15,20))\n\nplot_count('age', 1)\nplot_count('salary', 3)\nplot_count('day', 5)\nplot_count('campaign', 7)\n\n\nplt.tight_layout()\nplt.show()","ac5d16f2":"df.head()","3d812d7c":"num = ['age','salary','balance', 'day','duration', 'campaign', 'pdays', 'previous']\n\nfor items in num:\n    plt.figure(figsize=(10,6))\n    sns.distplot(df[items])\n    \nplt.tight_layout()","4e4e050f":"\n\nnum = ['age','salary','balance', 'day','duration', 'campaign', 'pdays', 'previous']\n\n\nfor item in num:\n    plt.figure(figsize=(10,8))\n    sns.violinplot(df[item],df[\"response\"])\n    \n    plt.xlabel(item,fontsize=12)\n    plt.ylabel(\"Response\",fontsize=12)\n    plt.show()","973a706d":"df.corr()","b48aae98":"plt.figure(figsize=(15,12))\nsns.heatmap(df.corr(),annot=True,cmap='Blues')\nplt.show()","6f5988bb":"num = ['age','salary','balance', 'day','duration', 'campaign', 'pdays', 'previous']\n\nfor items in num:\n    plt.figure(figsize=(10,8))\n    sns.jointplot(x = df[items],y = df['salary'],kind='reg')\n    plt.xlabel(items,fontsize = 15)\n    plt.ylabel(\"Response\",fontsize = 15)\n    plt.grid()\n    plt.show()","b9df4400":"num = ['age','salary','balance', 'day','duration', 'campaign', 'pdays', 'previous']\n\nfor items in num:\n    plt.figure(figsize=(10,8))\n    sns.jointplot(x = df[items],y = df['balance'],kind='reg')\n    plt.xlabel(items,fontsize = 15)\n    plt.ylabel(\"Response\",fontsize = 15)\n    plt.grid()\n    plt.show()","cb54b9ed":"num = ['age','salary','balance', 'day','duration', 'campaign', 'pdays', 'previous']\n\nfor items in num:\n    plt.figure(figsize=(10,8))\n    sns.jointplot(x = df[items],y = df['day'],kind='reg')\n    plt.xlabel(items,fontsize = 15)\n    plt.ylabel(\"Response\",fontsize = 15)\n    plt.grid()\n    plt.show()","b3270f56":"num = ['age','salary','balance', 'day','duration', 'campaign', 'pdays', 'previous']\n\nfor items in num:\n    plt.figure(figsize=(10,8))\n    sns.jointplot(x = df[items],y = df['duration'],kind='reg')\n    plt.xlabel(items,fontsize = 15)\n    plt.ylabel(\"Response\",fontsize = 15)\n    plt.grid()\n    plt.show()","32f9eebb":"num = ['age','salary','balance', 'day','duration', 'campaign', 'pdays', 'previous']\n\nfor items in num:\n    plt.figure(figsize=(10,8))\n    sns.jointplot(x = df[items],y = df['campaign'],kind='reg')\n    plt.xlabel(items,fontsize = 15)\n    plt.ylabel(\"Response\",fontsize = 15)\n    plt.grid()\n    plt.show()","99351585":"num = ['age','salary','balance', 'day','duration', 'campaign', 'pdays', 'previous']\n\nfor items in num:\n    plt.figure(figsize=(10,8))\n    sns.jointplot(x = df[items],y = df['pdays'],kind='reg')\n    plt.xlabel(items,fontsize = 15)\n    plt.ylabel(\"Response\",fontsize = 15)\n    plt.grid()\n    plt.show()","07e0544b":"num = ['age','salary','balance', 'day','duration', 'campaign', 'pdays', 'previous']\n\nfor items in num:\n    plt.figure(figsize=(10,8))\n    sns.jointplot(x = df[items],y = df['previous'],kind='reg')\n    plt.xlabel(items,fontsize = 15)\n    plt.ylabel(\"Response\",fontsize = 15)\n    plt.grid()\n    plt.show()","30fa6e48":"df","e5586cb8":"sns.pairplot(df)\nplt.show()","d16767e7":"df.head()","61d1e391":"df.drop(['campaign','pdays','previous'],axis=1,inplace=True)","fbed3cff":"df","220f56ac":"def binary_map(x):\n    return x.map({'yes': 1, \"no\": 0})","bec3c8d1":"cols_yn = ['targeted', 'default', 'housing', 'loan', 'response']","50205434":"df1 = df.copy()","b60f6550":"df1[cols_yn] = df1[cols_yn].apply(binary_map)","229dd965":"df1","07019c96":"df1 = pd.get_dummies(df1, drop_first=True)","1d095dbb":"df1.head()","90d2db73":"df1.info()","a750074f":"df1","1f499c52":"X = df1.drop('response',axis=1)","02a093fe":"X.head()","631b7c48":"y = df1[['response']]","b23995a1":"y.head()","51edc057":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)","9d4fd537":"log = LogisticRegression()","305c518a":"scalar = MinMaxScaler()","b929e6a3":"log.fit(X_train,y_train)","269234e2":"log.classes_","d40b9ee9":"log.coef_","cd04e042":"pred = log.predict(X_test)","a776fafe":"from sklearn.metrics import accuracy_score","35b632aa":"accuracy_score(y_test,pred)","aaef527d":"from sklearn.metrics import confusion_matrix","e08a2e04":"confusion_matrix(y_test,pred)","450404d6":"# lets select all the features onces just forget about pvalues","a65ef90e":"import statsmodels.api as sm","c78d0d8a":"log1 = sm.GLM(y_train,(sm.add_constant(X_train)), family = sm.families.Binomial())\nlog1.fit().summary()","e2c4115f":"from sklearn.feature_selection import RFE","8b75b5d8":"rfe = RFE(log, 25)","b13228eb":"rfe.fit(X_train,y_train)","47b3f5e1":"rfe.ranking_","fa105b98":"rfe.support_","4b10a472":"a=X_train.columns[rfe.support_]","9778b652":"a","c16e4dfd":"len(a)","756a7f33":"X_train[a].describe()","4252d7de":"log1 = sm.GLM(y_train,(sm.add_constant(X_train[a])), family = sm.families.Binomial())\nlog1.fit().summary()","0045fc4f":"# the rfe has selected features but some featues are high value but just build a model","520d79dd":"log.fit(X_train[a],y_train)","eea8ec73":"log.classes_","87cd4843":"log.coef_","60a48daf":"pred = log.predict(X_test[a])","85c9bc0e":"from sklearn.metrics import accuracy_score","60f23ea8":"accuracy_score(y_test,pred)","63525a20":"from sklearn.metrics import confusion_matrix","0d62899c":"confusion_matrix(y_test,pred)","d2f9225d":"# the model done well but in that there were few high p values","fb8f8466":"# lets check with another approach ie.. vif","d1694c48":"# vif with all the values of X_train","dc7a6dfe":"from statsmodels.stats.outliers_influence import variance_inflation_factor","87f9f530":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 25)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","bddf8fec":"# now looking to the various factors such as vif and rfe lets take features manually and build a model","62d8cc53":"b = ['housing','loan','job_retired','marital_married','education_secondary','education_tertiary','education_unknown','contact_telephone',\n     'contact_unknown','month_aug','month_dec','month_feb','month_jan','month_jul','month_mar','month_may','month_nov','month_oct',\n    'month_sep','poutcome_other','poutcome_success' ]","7c55e6b5":"log2 = sm.GLM(y_train,(sm.add_constant(X_train[b])), family = sm.families.Binomial())\nlog2.fit().summary()","c117368c":"log.fit(X_train[b],y_train)","3fb187eb":"log.classes_","0bc110ab":"log.coef_","11fed1cb":"predf = log.predict(X_test[b])","6615a1e5":"from sklearn.metrics import accuracy_score","2ec81ca4":"accuracy_score(y_test,predf)","bd2a1db2":"from sklearn.metrics import confusion_matrix\nfrom sklearn import metrics","959f7714":"confusion_matrix(y_test,predf)","4788d90e":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(6, 4))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return fpr, tpr, thresholds","4c69a233":"draw_roc(y_test,predf)","4701f72e":"from sklearn.metrics import classification_report","62a34ecf":"print(classification_report(y_test,predf))","14358f64":"X.head(n=3)","ebae689b":"y.head(n=3)","dc75c8cd":"# Holdout Validation Approach - Train and Test Set Split","25709aee":"X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.3, random_state=100)\nlog = LogisticRegression()\nlog.fit(X_train,y_train)\nresult = log.score(X_train,y_train)\nprint(\"Accuracy: %.2f%%\" % (result*100.0))","3271d60d":"# Stratified K-fold Cross-Validation","7a35d01e":"skfold = StratifiedKFold(n_splits=3, random_state=100)\nmodel_skfold = LogisticRegression()\nresults_skfold = model_selection.cross_val_score(model_skfold, X, y, cv=skfold)\nprint(\"Accuracy: %.2f%%\" % (results_skfold.mean()*100.0))","2d6da6ac":"# K-fold Cross-Validation","d7bb5c4f":"kfold = model_selection.KFold(n_splits=5, random_state=100)\nmodel_kfold = LogisticRegression()\nresults_kfold = model_selection.cross_val_score(model_kfold, X, y, cv=kfold)\nprint(\"Accuracy: %.2f%%\" % (results_kfold.mean()*100.0)) ","575b292d":"# Repeated Random Test-Train Splits","4f570ed0":"kfold2 = model_selection.ShuffleSplit(n_splits=5, test_size=0.30, random_state=100)\nmodel_shufflecv = LogisticRegression()\nresults_4 = model_selection.cross_val_score(model_shufflecv, X, y, cv=kfold2)\nprint(\"Accuracy: %.2f%% (%.2f%%)\" % (results_4.mean()*100.0, results_4.std()*100.0))","f173be93":"from sklearn.model_selection import cross_val_score","2c5f0025":"log = LogisticRegression()","819577c1":"cross_val_score(log,X,y,cv=5)","85f7e2c6":"cross_val_score(log,X,y,cv=5).mean()","abc99200":"standardizer = StandardScaler()\nlog = LogisticRegression()\npipeline = make_pipeline(standardizer, log)","d1654b02":"kf = KFold(n_splits=10, shuffle=True, random_state=100)","981de157":"cv_results = cross_val_score(pipeline, \n                             X, \n                             y, \n                             cv=kf, \n                             scoring=\"accuracy\", \n                             n_jobs=-1) ","e0366429":"cv_results.mean()","4e0f2b4e":"from sklearn.ensemble import RandomForestClassifier","c6ccbd1d":"model = RandomForestClassifier(n_estimators=50)","4978a6d8":"model.fit(X_train,y_train)","f0e90844":"print('Number of Trees used : ', model.n_estimators)","010d9135":"predict_train = model.predict(X_train)\nprint('\\nTarget on train data',predict_train) \n\n\naccuracy_train = accuracy_score(y_train,predict_train)\nprint('\\naccuracy_score on train dataset : ', accuracy_train)","685b2b6b":"predict_test = model.predict(X_test)\nprint('\\nTarget on test data',predict_test) \n\n\naccuracy_test = accuracy_score(y_test,predict_test)\nprint('\\naccuracy_score on test dataset : ', accuracy_test)","480b3806":"kfold = model_selection.KFold(n_splits=5, random_state=100)\nmodel_kfold = RandomForestClassifier()\nresults_kfold = model_selection.cross_val_score(model_kfold, X, y, cv=kfold)\nprint(\"Accuracy: %.2f%%\" % (results_kfold.mean()*100.0)) ","acec5a8a":"print(classification_report(y_test,predict_test))","1e9a9db5":"from sklearn.model_selection import GridSearchCV","8f53358a":"param_grid = {\n    'max_depth': [1, 2, 5, 10, 20],\n    'max_features': [1, 2, 3],\n    'min_samples_leaf': [1, 3, 4, 5],\n#    'min_samples_split': [8, 10, 12],\n    'n_estimators': [10, 30, 50, 100, 200]\n}","7c5f3bbd":"grid_search = GridSearchCV(estimator=model, param_grid=param_grid, \n                          cv=4, n_jobs=-1, verbose=1, scoring = \"accuracy\")","be0a59a9":"grid_search.fit(X_train,y_train)","85f68ca4":"grid_search.best_estimator_","29f0b967":"best_model = grid_search.best_estimator_","2d7c1361":"pred= best_model.predict(X_test)","52427360":"confusion_matrix(y_test,pred)","200e33d2":"#XGB-Classifier","da9c40c8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)","dcf18398":"from xgboost import XGBClassifier","9f047c39":"classifier = XGBClassifier()","76e2f91a":"classifier.fit(X_train,y_train)","55e65a28":"pred = classifier.predict(X_test)","3bcc6205":"confusion_matrix(y_test,pred)","67cc1951":"print(classification_report(y_test,pred))","bd336bf3":"Describe the pdays column, make note of the mean, median and minimum values. Anything fishy in the values?","98a0cee0":"Make a box plot for pdays. Do you see any outliers?","c8713c20":"tertiary has highest median","6a598624":"Describe the pdays column again, this time limiting yourself to the relevant values of pdays. How different are the mean and the median values?","660c8694":"mean has an value of 40\nand the medain has value of -1","5c762655":"MEAN AND MEDIAN ARE FAR AWAY THERE ARE OUTLIERS IN PDAYS","be820144":"THERE ARE OUTLIERS IN P-DAYS","931454a0":"Plot a horizontal bar graph with the median values of balance for each education level value. Which group has the highest median"}}