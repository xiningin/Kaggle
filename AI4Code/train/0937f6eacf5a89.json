{"cell_type":{"d9e6f099":"code","d1ac6597":"code","d846bed1":"code","49df11eb":"code","78b6e79e":"code","82db79b7":"code","b0fbc170":"code","ff185a31":"code","73019ef3":"code","e4a76108":"code","d3c30d64":"code","2b713263":"code","b1cc2273":"code","07cbf522":"code","528cdddb":"code","76954537":"code","bc3a9704":"code","a1bdebb9":"code","07eb7792":"code","fd480c6e":"code","d1a667e9":"code","e24cc426":"code","9e589478":"code","95789f13":"code","8df268d4":"code","d8605bc7":"code","dd4b4fab":"code","3f02593b":"code","724cc7ba":"code","8fdfb047":"code","a33049a4":"markdown","fada843e":"markdown","80c6d23f":"markdown","994a060f":"markdown","4d14dc74":"markdown","6bf4bf2b":"markdown","4a0fa15d":"markdown","b2e5cd79":"markdown","a95ce821":"markdown","af4051d0":"markdown","500bf799":"markdown","fa2dd49b":"markdown","4c90d1dc":"markdown","b36c2a06":"markdown","29b06a51":"markdown","c939ea96":"markdown","18f7e1be":"markdown"},"source":{"d9e6f099":"import IPython.display\nIPython.display.YouTubeVideo('B4XzLDM3Py8', width=768, height=524)","d1ac6597":"import os\nimport gc\nimport json\nimport random\n\nimport numpy as np\nimport pandas as pd\nimport pickle as pkl\n\nimport cv2\nfrom PIL import Image\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n#%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","d846bed1":"PATH = '\/kaggle\/input\/g2net-gravitational-wave-detection\/'\ndf_labels = pd.read_csv(PATH+'training_labels.csv')","49df11eb":"plt.figure(figsize=(7,6))\nax = sns.countplot(x = df_labels['target'])","78b6e79e":"# Example \nevent = '00000e74ad'\nfile_npy_ev = '\/kaggle\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/{}.npy'.format(event)\nprint(np.load(file_npy_ev).shape)\nnp.load(file_npy_ev)","82db79b7":"# We have GW\ndf_labels[df_labels['id'] == event]","b0fbc170":"# The recommended way of installing GWpy is:\n# !conda install -c conda-forge gwpy  # with Conda\n# !python -m pip install gwpy          # with Pip\n\ntry:\n    from gwpy.timeseries import TimeSeries, TimeSeriesDict\n    from gwpy.plot import Plot\nexcept:\n    ! python -m pip install -q gwpy\n    from gwpy.timeseries import TimeSeries, TimeSeriesDict\n    from gwpy.plot import Plot","ff185a31":"def get_npy_data(file):\n    \"\"\"Get .npy file content.\"\"\"\n    data_npy = np.load(file)\n    Hanford    = TimeSeries(data_npy[0,:], sample_rate=2048)\n    Livingston = TimeSeries(data_npy[1,:], sample_rate=2048)\n    Virgo      = TimeSeries(data_npy[2,:], sample_rate=2048)\n    return Hanford, Livingston, Virgo","73019ef3":"# Get detectors data\nHanford, Livingston, Virgo = get_npy_data(file_npy_ev)","e4a76108":"print(Hanford.shape)\nHanford","d3c30d64":"plt.figure(figsize=(12, 9))\nsns.histplot(data=Hanford)\nplt.xlim(-2e-20, 2e-20)\nplt.xlabel('Amplitude [strain]')\nplt.show()","2b713263":"plt.figure(figsize=(12, 9))\nsns.histplot(data=Livingston)\nplt.xlim(-2e-20, 2e-20)\nplt.xlabel('Amplitude [strain]')\nplt.show()","b1cc2273":"plt.figure(figsize=(12, 9))\nsns.histplot(data=Virgo)\nplt.xlim(-0.5e-20, 0.5e-20)\nplt.xlabel('Amplitude [strain]')\nplt.show()","07cbf522":"plt.figure(figsize=(12, 9))\nsns.histplot(data=Hanford)\nsns.histplot(data=Livingston)\n#sns.histplot(data=Virgo)\nplt.xlim(-2e-20, 2e-20)\nplt.xlabel('Amplitude [strain]')\nplt.show()","528cdddb":"# Check out: \n# https:\/\/gwpy.github.io\/docs\/latest\/overview.html\n# https:\/\/gwpy.github.io\/docs\/latest\/plot\/index.html\n\ndef plot_time_series(Hanford, Livingston, Virgo):\n    \"\"\"Plot time series. Separate subplots.\n    Detectors order: LIGO Hanford, LIGO Livingston, and Virgo\n    \"\"\"\n    plot = Plot(Hanford, Livingston, Virgo, \n                separate=True, \n                sharex=True, \n                figsize=[18, 12])\n    ax = plot.gca()\n    ax.set_xlim(0,2)\n    ax.set_xlabel('Time [s]')\n    plot.show()\n    \ndef plot_time_series_all(Hanford, Livingston, Virgo):\n    \"\"\"Plot time series. All detectors together.\"\"\"\n    plot = Plot(figsize=(18, 4))\n    ax = plot.add_subplot()\n    ax.plot(Hanford, color='gwpy:ligo-hanford', label='LIGO-Hanford')\n    ax.plot(Livingston, color='gwpy:ligo-livingston', label='LIGO-Livingston')\n    ax.plot(Virgo, color='gwpy:virgo', label='Virgo')\n    ax.set_ylabel('Amplitude [strain]')\n    ax.set_xlim(0, 2)\n    ax.set_ylim(-2e-20, 2e-20)\n    ax.legend()\n    \ndef plot_time_series_LIGO(Hanford, Livingston):\n    \"\"\"Plot time series. LIGO detectors.\"\"\"\n    plot = Plot(figsize=(18, 4))\n    ax = plot.add_subplot()\n    ax.plot(Hanford, color='gwpy:ligo-hanford', label='LIGO-Hanford')\n    ax.plot(Livingston, color='gwpy:ligo-livingston', label='LIGO-Livingston')\n    ax.set_ylabel('Amplitude [strain]')\n    ax.set_xlim(0, 2)\n    ax.set_ylim(-2e-20, 2e-20)\n    ax.legend()","76954537":"plot_time_series(Hanford, Livingston, Virgo)","bc3a9704":"plot_time_series_LIGO(Hanford, Livingston)","a1bdebb9":"plot_time_series_all(Hanford, Livingston, Virgo)","07eb7792":"# Check out:\n# https:\/\/gwpy.github.io\/docs\/latest\/examples\/timeseries\/qscan.html\n\ndef plot_spectrograms(detector_data, detector_name, event, target_ev, grid):\n    \"\"\"Plot spectrograms for specific detector's event.\"\"\"\n    \n    qspecgram = detector_data.q_transform(outseg=(0.0, 2.0))\n    \n    plot = qspecgram.plot(figsize=[12, 10])\n    ax = plot.gca()\n    ax.set_title('{}. Event: {}. Target: {}'.format(detector_name, event, target_ev))\n    ax.set_xlabel('Time [s]')\n    ax.set_ylabel('Frequency [Hz]')\n    #ax.set_yscale('log')\n    ax.grid(grid)\n    ax.colorbar(cmap='viridis', label='Normalized energy')\n    plot.show()","fd480c6e":"# Get data and target value for specific event\nHanford, Livingston, Virgo = get_npy_data(file_npy_ev)\ntarget_ev = df_labels[df_labels['id'] == event]['target'].iloc[0]","d1a667e9":"plot_spectrograms(Hanford, 'LIGO Hanford', event, target_ev, False)","e24cc426":"plot_spectrograms(Livingston, 'LIGO Livingston', event, target_ev, False)","9e589478":"plot_spectrograms(Virgo, 'Virgo', event, target_ev, True)","95789f13":"# Calculating a Spectrogram from a TimeSeries\n# The time-frequency Spectrogram of a TimeSeries can be calculated using the spectrogram() method. \n# We can extend previous examples of plotting a TimeSeries with calculation of a Spectrogram with a 2-second stride:\n# https:\/\/gwpy.github.io\/docs\/latest\/spectrogram\/index.html#calculating-a-spectrogram-from-a-timeseries\n# https:\/\/gwpy.github.io\/docs\/latest\/api\/gwpy.spectrogram.Spectrogram.html#gwpy.spectrogram.Spectrogram\n# https:\/\/gwpy.github.io\/docs\/stable\/api\/gwpy.timeseries.TimeSeries.html\n# https:\/\/gwpy.github.io\/docs\/stable\/api\/gwpy.timeseries.TimeSeries.html#gwpy.timeseries.TimeSeries.spectrogram\n\ndef plot_spectrograms_from_timeseries(spectrogram):\n    \"\"\"Plot spectrograms from Time Series.\"\"\"\n    plot = spectrogram.plot(figsize=[12, 10], \n                       norm='log', \n                       #vmin=1e-24, \n                       #vmax=1e-21\n                      )\n    ax = plot.gca()\n    ax.set_ylim(1, 1000)\n    ax.set_yscale('log')\n    ax.set_xlabel('Time [s]')\n    ax.set_ylabel('Frequency [Hz]')\n    ax.colorbar(label='GW strain ASD [strain\/$\\sqrt{\\mathrm{Hz}}$]')\n    plot.show()","8df268d4":"H_spec = Hanford.spectrogram(stride=2,       # number of seconds in single PSD (column of spectrogram). \n                             fftlength=0.75, # number of seconds in single FFT\n                             overlap=0,      # number of seconds of overlap between FFTs, defaults to the recommended overlap for the given window (if given), or 0\n                             nproc=8         # number of CPUs to use in parallel processing of FFTs\n                            ) ** (1\/2.)      # sqrt","d8605bc7":"L_spec = Livingston.spectrogram(stride=2,       # number of seconds in single PSD (column of spectrogram). \n                                fftlength=0.75, # number of seconds in single FFT\n                                overlap=0,      # number of seconds of overlap between FFTs, defaults to the recommended overlap for the given window (if given), or 0\n                                nproc=8         # number of CPUs to use in parallel processing of FFTs\n                                ) ** (1\/2.)      # sqrt","dd4b4fab":"V_spec = Virgo.spectrogram(stride=2,       # number of seconds in single PSD (column of spectrogram). \n                           fftlength=0.75, # number of seconds in single FFT\n                           overlap=0,      # number of seconds of overlap between FFTs, defaults to the recommended overlap for the given window (if given), or 0\n                           nproc=8         # number of CPUs to use in parallel processing of FFTs\n                          ) ** (1\/2.)      # sqrt","3f02593b":"plot_spectrograms_from_timeseries(H_spec)","724cc7ba":"plot_spectrograms_from_timeseries(L_spec)","8fdfb047":"plot_spectrograms_from_timeseries(V_spec)","a33049a4":"<a id=\"4.1\"><\/a>\n<h3 style='background:#0788f0; font-size:200%; border:0; color:white'><center> 4.1 Time Series <center><h0>","fada843e":"<a id=\"0\"><\/a>\n<h1 style='background:#0788f0; font-size:200%; border:0; color:white;'><center> Table of Contents<\/center><\/h1>\n\n1. [Gravitational Wave Detection](#1)\n2. [Competition Overview](#2)\n3. [Import packages](#3)\n4. [Processing GW data: GWpy](#4)  \n    4.1 [Time Series](#4.1)  \n    4.2 [Spectrograms](#4.2)  \n   \n[References](#100)","80c6d23f":"On September 14, 2015 at 09:50:45 UTC the two detectors of the Laser Interferometer Gravitational-Wave Observatory ([LIGO](https:\/\/www.ligo.org\/)) simultaneously observed a transient gravitational-wave signal. \n\n<img style=\"float:left; padding-right:10px\" src=\"https:\/\/raw.githubusercontent.com\/kabartay\/kaggle-g2net-gravitational-wave-detection\/main\/pics\/ripple.jpg\" data-canonical-src=\"https:\/\/raw.githubusercontent.com\/kabartay\/kaggle-g2net-gravitational-wave-detection\/main\/pics\/ripple.jpg\" width=\"225\" height=\"225\"\/>  \n\nIt required the collaboration of experts in physics, mathematics, information science, and computing. GW signals have led researchers to observe a new population of massive, stellar-origin **black holes (BH)**, to unlock the mysteries of neutron star mergers, and to measure the expansion of the Universe. These signals are unimaginably **tiny ripples** in the fabric of space-time and even though the global network of GW detectors are some of the most sensitive instruments on the planet, the signals are buried in detector noise. Analysis of GW data and the detection of these signals is a crucial mission for the growing global network of increasingly sensitive GW detectors. These challenges in data analysis and noise characterization could be solved with the help of data science. As with the multi-disciplined approach to the discovery of GWs, additional expertise will be needed to further GW research. In particular, social and natural sciences have taken an interest in machine learning, deep learning, classification problems, data mining, and visualization to develop new techniques and algorithms to efficiently handle complex and massive data sets. The increase in computing power and the development of innovative techniques for the rapid analysis of data will be vital to the exciting new field of GW Astronomy. Potential outcomes may include increased sensitivity to GW signals, application to control and feedback systems for next-generation detectors, noise removal, data conditioning tools, and signal characterization.  \n\n\n<img style=\"float:left; padding-right:10px\" src=\"https:\/\/raw.githubusercontent.com\/kabartay\/kaggle-g2net-gravitational-wave-detection\/main\/pics\/bh.png\" data-canonical-src=\"https:\/\/raw.githubusercontent.com\/kabartay\/kaggle-g2net-gravitational-wave-detection\/main\/pics\/bh.png\" width=\"70\" height=\"70\"\/>  \n\n[G2Net](www.g2net.eu) is a network of **Gravitational Wave, Geophysics and Machine Learning**. Via an Action from [COST](www.cost.eu) (European Cooperation in Science and Technology), a funding agency for research and innovation networks, G2Net aims to create a broad network of scientists. From four different areas of expertise, namely GW physics, Geophysics, Computing Science and Robotics, these scientists have agreed on a common goal of tackling challenges in data analysis and noise characterization for GW detectors.","994a060f":"### Rules for spectrogram function:\n- `stride` cannot be greater than the duration of this TimeSeries\n- `fftlength` cannot be greater than stride\n- `overlap` must be less than fftlength\n- `window` should be not longer than input signal","4d14dc74":"<div align=\"center\">\n<font size=\"6\"> G2Net Gravitational Wave Detection  <\/font>  \n<\/div> \n\n\n<div align=\"center\">\n<font size=\"4\"> Find gravitational wave signals from binary black hole collisions  <\/font>  \n<\/div> ","6bf4bf2b":"[GWpy](https:\/\/gwpy.github.io\/docs\/latest\/index.html) is a collaboration-driven Python package providing tools for studying data from ground-based GW detectors. It provides a user-friendly, intuitive interface to the common time-domain and frequency-domain data produced by the [LIGO](https:\/\/www.ligo.org\/) and [Virgo](https:\/\/www.ego-gw.it\/) instruments and their analysis, with easy-to-follow tutorials at each step.","4a0fa15d":"<img align=\"left\" src=\"https:\/\/raw.githubusercontent.com\/kabartay\/kaggle-g2net-gravitational-wave-detection\/main\/pics\/header.png\" data-canonical-src=\"https:\/\/raw.githubusercontent.com\/kabartay\/kaggle-g2net-gravitational-wave-detection\/main\/pics\/header.png\" width=\"1350\" \/>","b2e5cd79":"<a id=\"4.2\"><\/a>\n<h2 style='background:#0788f0; font-size:200%; border:0; color:white'><center> 4.2 Spectrograms <center><h0>","a95ce821":"<a id=\"4\"><\/a>\n<h2 style='background:#0788f0; font-size:200%; border:0; color:white'><center> 4 Processing GW data: GWpy <center><h0>","af4051d0":"<a id=\"100\"><\/a>\n<h2 style='background:#0788f0; font-size:200%; border:0; color:white'><center> References <center><h0>","500bf799":"- [G2Net](www.g2net.eu). COST Action CA17137: A network for Gravitational Waves, Geophysics and Machine Learning.\n- [COST](www.cost.eu): European Cooperation in Science and Technology.\n- [EGO](https:\/\/www.ego-gw.it\/): European Gravitational Observatory.\n- [LIGO](https:\/\/www.ligo.org\/): Laser Interferometer Gravitational-Wave Observatory.\n- [LIGO](https:\/\/www.ligo.caltech.edu\/) at CalTech.\n- B.\u2009P. Abbott et al. (LIGO Scientific Collaboration and Virgo Collaboration) Phys. Rev. Lett. 116, 061102 [DOI:10.1103\/PhysRevLett.116.061102](https:\/\/link.aps.org\/doi\/10.1103\/PhysRevLett.116.061102)","fa2dd49b":"<a id=\"3\"><\/a>\n<h2 style='background:#0788f0; font-size:200%; border:0; color:white'><center> 3 Import packages <center><h0>","4c90d1dc":"<img style=\"float:left; padding-right:10px\" src=\"https:\/\/raw.githubusercontent.com\/kabartay\/kaggle-g2net-gravitational-wave-detection\/main\/pics\/ego_logo.png\" data-canonical-src=\"https:\/\/raw.githubusercontent.com\/kabartay\/kaggle-g2net-gravitational-wave-detection\/main\/pics\/ego_logo.png\" width=\"70\" height=\"70\"\/> \n\nThis competition is hosted by [European Gravitational Observatory (EGO)](https:\/\/www.ego-gw.it\/). We **aim to detect GW signals** from the mergers of **binary black holes (BBH)**.  It is assumed that we build a model to analyze simulated GW time-series data from a network of 3 Earth-based GW interferometers (LIGO Hanford, LIGO Livingston, and Virgo). We are provided with a **72 GB time-series dataset** of time series data containing simulated GW measurements. Each time series contains either detector noise or detector noise plus a simulated GW signal. \n\n## Task\nIdentify when a signal is present in the data (`target=1`).  \n\n## Files\n- **train\/** - the training set files, one npy file per observation; labels are provided in a files shown below   \n- **test\/** - the test set files; you must predict the probability that the observation contains a gravitational wave   \n- **training_labels.csv** - target values of whether the associated signal contains a gravitational wave   \n- **sample_submission.csv** - a sample submission file in the correct format","b36c2a06":"<a id=\"1\"><\/a>\n<h2 style='background:#0788f0; font-size:200%; border:0; color:white'><center> 1 Graviational Waves Detection <center><h0>","29b06a51":"<a id=\"2\"><\/a>\n<h2 style='background:#0788f0; font-size:200%; border:0; color:white'><center> 2 Competition Overview <center><h0>","c939ea96":"Each data sample (`.npy` file) contains 3 time series (1 for each detector: LIGO Hanford, LIGO Livingston, and Virgo) and each spans 2 sec and is sampled at 2048 Hz.","18f7e1be":"### Generate the Q-transform of a TimeSeries\nOne of the most useful tools for filtering and visualising short-duration features in a **TimeSeries** is the **Q-transform**. This is regularly used by the Detector Characterization working groups of the LIGO Scientific Collaboration and the Virgo Collaboration to produce high-resolution time-frequency maps of transient noise (glitches) and potential gravitational-wave signals. Check out [here](https:\/\/gwpy.github.io\/docs\/latest\/examples\/timeseries\/qscan.html).\n"}}