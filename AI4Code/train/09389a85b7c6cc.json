{"cell_type":{"81fdab88":"code","faac55ff":"code","42591a31":"code","70c47a2d":"code","e9a4a589":"code","09b92572":"code","260b9581":"code","89d55a4b":"code","aa32c7c8":"code","74c35b3b":"markdown","7bdeff58":"markdown","9581d8f1":"markdown","c27374bc":"markdown","1b39a45a":"markdown"},"source":{"81fdab88":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","faac55ff":"from xgboost import XGBRegressor as xgbr # for modelling\nfrom sklearn.pipeline import Pipeline # for making pipleine \nfrom sklearn.impute import SimpleImputer # for handling missing variables either categorical or numerical\nfrom sklearn.preprocessing import OneHotEncoder # for one hot encoding categorical variables\nfrom sklearn.metrics import mean_absolute_error # for Mean absolute error\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.compose import ColumnTransformer\n\n","42591a31":"# Read the data\nX_full = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv', index_col='Id')\n\n# Remove rows with missing target, separate target from predictors\nX_full.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X_full.SalePrice\nX_full.drop(['SalePrice'], axis=1, inplace=True)\n\n# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]\n\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()\n","70c47a2d":"# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='median')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# handle unknown is set to ignore because sometimes in test set we have variables that were not present in Training set and hence were not encoded while training \n# but if we use these variables while testing we will get error hence to ignore these errors we use this argument\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","e9a4a589":"# Define the model\nmy_model_2 = xgbr(random_state=42,n_estimators=2000,learning_rate=0.055) # Your code here\n\n# Bundle preprocessing and modeling code in a pipeline\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model2', my_model_2)\n                     ])\n\n# Preprocessing of training data, fit model \nclf.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = clf.predict(X_valid)\n\nprint('MAE:', mean_absolute_error(y_valid, preds))","09b92572":"preds_test = clf.predict(X_test) # Your code here\n\n# Save test predictions to file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\noutput.to_csv('submission1.csv', index=False)","260b9581":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import cross_val_score, GridSearchCV","89d55a4b":"X = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv', index_col='Id')\nfrom sklearn.impute import SimpleImputer\n# Remove rows with missing target, separate target from predictors\nX.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X.SalePrice              \nX.drop(['SalePrice'], axis=1, inplace=True)\ncols= [cname for cname in X.columns if X[cname].dtype in ['int64', 'float64']]\n\nX=X[cols]\nX.head()\nmy_imputer=SimpleImputer(strategy='median')\n\nX_train=pd.DataFrame(my_imputer.fit_transform(X))\n\nX_train.columns=X.columns\ny_train=y\nX_train.head()\ndef rfr_model(X, y):\n# Perform Grid-Search\n    gsc = GridSearchCV(\n        estimator=RandomForestRegressor(),\n        param_grid={\n            'max_depth': range(2,10),\n            'n_estimators': (10, 50, 100,200,150,300,500,600,700,800,900, 1000),\n        },\n        cv=5, scoring='neg_mean_squared_error', verbose=0, n_jobs=-1)\n    \n    grid_result = gsc.fit(X_train,y_train)\n    best_params = grid_result.best_params_\n    \n    rfr = RandomForestRegressor(max_depth=best_params[\"max_depth\"], n_estimators=best_params[\"n_estimators\"], random_state=False, verbose=False)\n    scores = cross_val_score(rfr,X_train,y_train, cv=10, scoring='neg_mean_absolute_error')\n#     print(best_params)\n    return best_params","aa32c7c8":"rfr_model(X_train,y_train)","74c35b3b":"<a id=\"1\"><\/a> <br>\n## 1-Imports","7bdeff58":"<a id=2><\/a> <br>\n## 2- Getting Data\n","9581d8f1":"<a id=\"3\"><\/a> <br>\n## 3-Strategy to Handle Categorical and Missing Values","c27374bc":"<a id=4><\/a> <br>\n## 4-Final Model","1b39a45a":"<a id=5><\/a> <br>\n## 5-Submission"}}