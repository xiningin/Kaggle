{"cell_type":{"b522091b":"code","f736c8a1":"code","5cfd914a":"code","9b6af97d":"code","b9530dab":"code","e9036ab5":"code","2a4ad03f":"code","2f8100b1":"code","2e37b4b6":"code","c55764da":"code","93977e7e":"code","877c990e":"code","6ff7e3c5":"code","9b4ecbcf":"code","4d13d9be":"code","8552c656":"code","c1dd4715":"code","d87825e1":"code","7cfc44d2":"markdown","52edfa04":"markdown","45d012d0":"markdown","6007f0cc":"markdown","f3d06742":"markdown","c044c385":"markdown","2fae527e":"markdown","8c512f1c":"markdown","abc753fc":"markdown","a65b8346":"markdown","e86396cf":"markdown","2047ffbc":"markdown","7cb78e45":"markdown","312d8767":"markdown","db9f32a5":"markdown","0ced54bb":"markdown","b8f956ea":"markdown","530c4091":"markdown","ca9126ac":"markdown","faea0d2f":"markdown","52b15c46":"markdown","741f2844":"markdown","4f9f5c53":"markdown","79729cb2":"markdown","5b03f034":"markdown"},"source":{"b522091b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # plots\nimport seaborn as sns # plots\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f736c8a1":"housing = pd.read_csv(\"..\/input\/london-housing-data\/london_housing_data.csv\")","5cfd914a":"housing.head()","9b6af97d":"nrows, ncols = housing.shape\n\nprint(f\"There are {nrows} rows and {ncols} columns.\")","b9530dab":"print(\"Missing values :\")\nprint()\nprint(\"|\"+\"-\"*40+\"|\")\nprint(\"|{} | {} | {}   |\".format(\"column\".rjust(15), \"no.\".rjust(6), \"percentage\".rjust(10)))\nprint(\"|\"+\"-\"*40+\"|\")\n\nfor index, value in housing.isna().sum().items():\n    n_missing = str(value).rjust(6)\n    proportion = str(round(value\/nrows * 100, 5)).rjust(10)\n    print(\"|{} | {} | {} % |\".format(index.rjust(15), n_missing, proportion))\n    \nprint(\"|\"+\"-\"*40+\"|\")","e9036ab5":"housing.info()","2a4ad03f":"# Convert string type to datetiye type\nhousing[\"date\"] = pd.to_datetime(housing[\"date\"])","2f8100b1":"housing[\"date\"].head(2)","2e37b4b6":"len(housing[\"area\"].unique())","c55764da":"len(housing[\"code\"].unique())","93977e7e":"from sklearn.metrics import confusion_matrix\n\n# Correlation of factorized categorical variables\nhousing[[\"code\", \"area\"]].apply(lambda x : pd.factorize(x)[0]).corr(method='pearson', min_periods=1)","877c990e":"housing = housing.drop(columns=[\"code\"])","6ff7e3c5":"housing.head(2)","9b4ecbcf":"plt.figure(figsize=(12,6))\nsns.countplot(housing[\"area\"])\nplt.xticks(rotation=85)\nplt.show()","4d13d9be":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(14,6))\nsns.distplot(housing[\"average_price\"], ax=axes[0])\nsns.violinplot(housing[\"average_price\"], ax=axes[1])\nfig.show()","8552c656":"plt.figure(figsize=(12,6))\nsns.distplot(housing[\"no_of_crimes\"])\nplt.xlabel(\"No. of crimes\")\nplt.show()","c1dd4715":"plt.figure(figsize=(14,10))\nsns.lineplot(data=housing, x=\"date\", y=\"average_price\", hue=\"area\")\nplt.xticks(rotation=75)\nplt.xlabel(\"Date\")\nplt.ylabel(\"Average prices\")\nplt.legend(loc='right')\nplt.show()","d87825e1":"plt.figure(figsize=(14,10))\nsns.lineplot(data=housing.query(\"area == 'london'\"), x=\"date\", y=\"average_price\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Average prices\")\nplt.legend(loc='right')\nplt.show()","7cfc44d2":"# Housing in London \ud83c\uddec\ud83c\udde7\n\nThis notebook has for goal to explore the data given by the user *sani8126* in Kaggle.\n> the link is [here](https:\/\/www.kaggle.com\/sani8126\/london-housing-data)\n\n## Table of contents\n\n### I.   Load the data\n### II.  Identify and clean\n### III. Analyse the data","52edfa04":"## III. Analyse the data\nIn this part we will create some basic plots with *matplotlib* and *seaborn* packages!","45d012d0":"Now after taking a quick look what would be interesting for us to know is the size of our data! So we can get it by getting the ***shape*** attribute of ***housing***  which will return a *tuple* of the length of every dimensions.\n\n> For instance our DataFrame here is a 2-dimensional like array so we will get two elements in the tuple.","6007f0cc":"___","f3d06742":"### <ins>The number of rows for each *area*<\/ins>","c044c385":"___","2fae527e":"It seems like the *area* and *code* variables are both linked, so we'll only keep the *area*.","8c512f1c":"### <ins>Evolution of prices in London<\/ins>","abc753fc":"### <ins>Distribution of *average_price*<\/ins>","a65b8346":"## Conclusion","e86396cf":"After reading the file and putting it into a variable, let's take a quick look at our data by visualizing the 5 first rows by using the ***head*** method of our ***DataFrame*** instance ***housing***.","2047ffbc":"## II.  Identify and clean\nIn this part we will be indentifying and cleaning the different variables that need to.","7cb78e45":"> This is a bad plot because of the quantity of data","312d8767":"Here we can identify some variable types :\n- ***date***          : datetime variable\n- ***area***          : categorical variable\n- ***average_price*** : numerical variable\n- ***code***          : categorical variable\n- ***houses_sold***   : numerical variable\n- ***no_of_crimes***  : numerical variable","db9f32a5":"___","0ced54bb":"### <ins>Distribution of *no_of_crimes*<\/ins>","b8f956ea":"- ### *date*\nHere we will convert the *date* variable from ***string*** type to ***datetime*** type with the help of the ***to_datetime*** function from the ***pandas*** package.","530c4091":"___","ca9126ac":"- ### *area* & *code*\nLet's see if the *area* and *code* are both related or not.","faea0d2f":"For instance, this plot shows us that the average price of housing in London is **increasing**!","52b15c46":"Now another interesting fact to look at, is the quantity of missing values! Yes data can't always be perfect, so we have to check the proportion of missing values in our ***DataFrame*** here.","741f2844":"This basic notebook mostly focused on the following points :\n- \ud83d\udcdc How to read a csv file with *python*\n- \ud83d\udcc8Create basic plots with *seaborn* package\n\nSo I would like to thank you for reading this notebook and apologize for any English mistakes. I hope that you learnt something by taking a look at it and I hope to get some advices in order to improve myself.","4f9f5c53":"### <ins>Evolution of average prices<\/ins>","79729cb2":"___","5b03f034":"## I. Load the data\nHere the file type of the data is a ***csv*** file so we use the ***read_csv*** function from the ***pandas*** packages. This function will generate a ***DataFrame*** which will be easier to use in order to analyse the data."}}