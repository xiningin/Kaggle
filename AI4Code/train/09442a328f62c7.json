{"cell_type":{"c6a49dcf":"code","69ad661f":"code","95d0df4c":"code","af9f0ca1":"code","911cc7f2":"code","07ac165e":"code","ad853d38":"code","962b2354":"markdown","dcc8167d":"markdown","13d3234d":"markdown"},"source":{"c6a49dcf":"import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets","69ad661f":"class LogisticRegression:\n    def __init__(self,learning_rate=0.0001,n_iters=10000):\n        self.lr = learning_rate\n        self.n_iters = n_iters\n        self.weights = None\n        self.bias = None\n    def sigmoid(self,X):\n        return 1\/(1+np.exp(-X))\n    def fit(self,X,y):\n        n_row,n_col = X.shape #no of samples and no of features\n        \n        self.weights = np.zeros(n_col)\n        self.bias = 0\n        \n        for i in range(self.n_iters):  #gradient descent\n            Z = np.dot(X,self.weights)+self.bias #Z = C + mX\n            predictions = self.sigmoid(Z)\n            \n            dw = (1\/n_row)*np.dot(X.T,(predictions-y))   #calculating gradients\n            db = (1\/n_row)*np.sum(predictions - y)\n            \n            self.weights -= self.lr*dw #updating the weights and bias\n            self.bias -= self.lr*db\n        return self.weights,self.bias\n    def predict(self,X):\n        Z = np.dot(X,self.weights)+self.bias\n        y_predict = self.sigmoid(Z)   #calculating probabilities\n        clas = [1 if j>0.5 else 0 for j in y_predict]  #converting probabilities to classes\n        return np.array(clas)\n            \n        \n        ","95d0df4c":"data = datasets.load_breast_cancer() \nX,y = data.data,data.target\nprint(X.shape)\nprint(y.shape)","af9f0ca1":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)","911cc7f2":"clf = LogisticRegression(learning_rate=0.0001,n_iters=10000)\nfinal_weights,final_bias = clf.fit(X_train,y_train)\npredict = clf.predict(X_test)\nprint(f''' \n final weights: {final_weights}\n final bias : {final_bias}\n ''')\nprint(predict.shape)","07ac165e":"def accuracy(y_true,y_pred):\n    acc = np.sum(y_true == y_pred)\/len(y_true)\n    return acc","ad853d38":"print('Accuracy:',accuracy(y_test,predict))","962b2354":"I am in a 100 days of ML code challenge and today is the Day 7 and this challenge is mainly to upgrade myself in Machine Learning and I choose to do ML using Shallow networks, so that i will be strong in the popular basic Algorithms.","dcc8167d":"#             Please upvote if you like it","13d3234d":"# Logistic Regression "}}