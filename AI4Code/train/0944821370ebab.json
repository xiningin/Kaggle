{"cell_type":{"53b06728":"code","26c67444":"code","c12cce1d":"code","79911548":"code","a65216bc":"code","ca7fab5d":"code","d18eac93":"code","6ace48b1":"code","ab66989c":"code","a3a8c243":"code","49152fd6":"code","3687c89f":"code","863372b6":"code","36934ce2":"code","73474b1a":"code","ba87097e":"code","c1605d24":"code","fef28b17":"code","a431354d":"code","d85b1df4":"markdown","6a201644":"markdown","0f17bcf6":"markdown"},"source":{"53b06728":"#data processing\nimport pandas as pd\n#linear algebra\nimport numpy as np\n#data visualisation\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n","26c67444":"#loading datasets\norders=pd.read_csv('..\/input\/retail-store-analysis\/TR_OrderDetails.csv')\nproducts=pd.read_csv('..\/input\/retail-store-analysis\/TR_Products.csv')\nprops=pd.read_csv('..\/input\/retail-store-analysis\/TR_PropertyInfo.csv')","c12cce1d":"#understanding shape of the data\nprint('Orders, Products and Props datasets have',orders.shape,products.shape,props.shape,'rows and columns respectively')","79911548":"#merging the datasets\ndf=orders.merge(products,left_on='ProductID',right_on='ProductID',how='left')\ndf.head()","a65216bc":"data=df.merge(props,left_on='PropertyID',right_on='Prop ID',how='left')\ndata.head()","ca7fab5d":"#Calculating Total Sales\ndata['Total Sales']= data['Quantity']*data['Prop ID']\ndata.head()","d18eac93":"data.shape","6ace48b1":"data.info()","ab66989c":"data.describe()","a3a8c243":"#check for nulls\ndata.isnull().sum()","49152fd6":"#1. Maximum quantity sold in any transaction\ndata['Quantity'].max()","3687c89f":"#2. Unique products in all the transactions\nprint(\"There are\" ,data['ProductName'].nunique(),\"unique products in the store\")","863372b6":"data['ProductName'].unique","36934ce2":"#Total sales of each product\n#By quantity\nTop_by_quant=pd.DataFrame(data.groupby(['ProductName']).sum()['Quantity']).sort_values(by='Quantity',ascending=False)\nTop_by_quant=Top_by_quant.reset_index()\n#Plotting Top 10\nplt.figure(figsize=(12,3))\ngraph1=sns.barplot(data=Top_by_quant.head(10),x='ProductName',y='Quantity',palette='rocket')\ngraph1.set(title='Top 10 Products by Quantity')\nplt.xticks(rotation=90)\n#plt.show()\n\nfor p in graph1.patches:\n    graph1.annotate(format(p.get_height(), '1.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9) ,\n                   textcoords = 'offset points')","73474b1a":"#By Sales\nTop_by_sales=pd.DataFrame(data.groupby(['ProductName']).sum()['Total Sales']).sort_values(by='Total Sales',ascending=False)\nTop_by_sales=Top_by_sales.reset_index()\n#Plotting Top 10\nplt.figure(figsize=(12,3))\ngraph2=sns.barplot(data=Top_by_sales.head(10),x='ProductName',y='Total Sales',palette='mako')\ngraph2.set(title='Top 10 Products by Dollar Sales')\nplt.xticks(rotation=90)\n#plt.show()\n\nfor a in graph2.patches:\n    graph2.annotate(format(a.get_height(),'1.0f'),\n                   (a.get_x()+a.get_width()\/2,a.get_height()),\n                   ha=\"center\",va=\"center\",\n                   xytext=(0,9),\n                   textcoords='offset points')","ba87097e":"#Products distribution by category\nprod_cat=pd.DataFrame(data.groupby(['ProductCategory','ProductName']).sum()['Quantity'])\nprod_cat=prod_cat.reset_index().sort_values(by=['ProductCategory','Quantity'],ascending=False)\n#Top 5 Products in each category by quantity sold\nTop_5_prod_cat=prod_cat.groupby('ProductCategory').head(5)","c1605d24":"plt.figure(figsize=(16,5))\ngraph3=sns.barplot(data=Top_5_prod_cat,x='ProductName',y='Quantity',hue='ProductCategory',dodge=False,palette='magma')\ngraph3.set(title='Top 5 Products in each category by quantity sold')\nplt.xticks(rotation=90)\n#plt.show()\n\nfor a in graph3.patches:\n    graph3.annotate(format(a.get_height(),'1.0f'),\n                   (a.get_x()+a.get_width()\/2,a.get_height()),\n                   ha=\"center\",va=\"center\",\n                   xytext=(0,9),\n                   textcoords='offset points')","fef28b17":"#Distribution of stores amongst states\nstores_by_city=pd.DataFrame(data.groupby(['PropertyState']).nunique()['PropertyCity'])\nstores_by_city=stores_by_city.reset_index().sort_values(by='PropertyCity',ascending=False)\nplt.figure(figsize=(12,5))\ngraph4=sns.barplot(data=stores_by_city,x='PropertyState',y='PropertyCity',color='teal')\ngraph4.set(title='Number of Stores by State')\nplt.xticks(rotation=90)\n#plt.show()\n\nfor a in graph4.patches:\n    graph4.annotate(format(a.get_height(),'1.0f'),\n                   (a.get_x()+a.get_width()\/2,a.get_height()),\n                   ha=\"center\",va=\"center\",\n                   xytext=(0,9),\n                   textcoords='offset points')\n","a431354d":"#Top 5 properties that registered highest sales\nhighest_sales=pd.DataFrame(data.groupby(['PropertyCity']).sum()['Total Sales'])\nhighest_sales=highest_sales.reset_index().sort_values(by='Total Sales',ascending=False)\nhighest_sales.head(5)","d85b1df4":"# Importing Libraries","6a201644":"# Data imputing","0f17bcf6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session"}}