{"cell_type":{"7c5c639b":"code","6366eda3":"code","48d3582f":"code","60522c72":"code","57169814":"code","f9389bb6":"code","e6282357":"code","347d3c3b":"code","fcf673d9":"code","424da376":"code","94f0c3bb":"code","f1bbf0ad":"code","2efd962b":"code","eda53641":"code","def3751d":"code","b99e12e5":"code","5613d458":"code","e1f87933":"code","3beb1440":"code","d668b43f":"code","a709ab6c":"code","f0129bdf":"code","ce098a91":"code","4b454bad":"code","f5f1539c":"code","0c5b8297":"code","f623f422":"code","43672a0f":"code","565a1a4d":"code","c7ec246f":"code","01a3972c":"code","9ec5d92f":"code","84610bae":"code","ac1036c3":"markdown"},"source":{"7c5c639b":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport seaborn as sns \n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\n# Any results you write to the current directory are saved as output.","6366eda3":"data = pd.read_csv('..\/input\/countries of the world.csv')\n#data reading","48d3582f":"#first of all, make smaller the names of the colon and changing name be easy to write code\ndata.columns=[each.lower() for each in data]\nnew_columns_name = ['country', 'region', 'population', 'area', 'pop_density','coastline', \n                    'net_migration', 'infant_mortality', 'GDP','literacy', 'phone_using',\n                    'arable', 'crops',  'other', 'climate', 'birthrate', \n                    'deathrate', 'agriculture', 'industry','service']\n\ndata.columns = new_columns_name","60522c72":"data.info()","57169814":"# We can show there are NaN values in the data. It's problem because requires columns to be numeric.\ndata.dropna(how=\"any\",inplace=True)\n\n#NaN values destroyed :)","f9389bb6":"def convert_currency(val):\n    new_val = val.replace(',','.')\n    return float(new_val)\n","e6282357":"data[\"infant_mortality\"] = data[\"infant_mortality\"].apply(convert_currency)\ndata[\"net_migration\"] = data[\"net_migration\"].apply(convert_currency)\ndata[\"agriculture\"] = data[\"agriculture\"].apply(convert_currency)\ndata[\"birthrate\"] = data[\"birthrate\"].apply(convert_currency)\ndata[\"deathrate\"] = data[\"deathrate\"].apply(convert_currency)\ndata[\"pop_density\"] = data[\"pop_density\"].apply(convert_currency)\ndata[\"literacy\"] = data[\"literacy\"].apply(convert_currency)\ndata[\"phone_using\"] = data[\"phone_using\"].apply(convert_currency)\ndata[\"industry\"] = data[\"industry\"].apply(convert_currency)\ndata[\"coastline\"] = data[\"coastline\"].apply(convert_currency)\ndata[\"arable\"] = data[\"arable\"].apply(convert_currency)\ndata[\"climate\"] = data[\"climate\"].apply(convert_currency)\ndata[\"crops\"] = data[\"crops\"].apply(convert_currency)\ndata[\"service\"] = data[\"service\"].apply(convert_currency)\n\n#               ________\"Object\" convert to \"Integer\"_________","347d3c3b":"data.info()","fcf673d9":"# we can show the correlation of data columns relative to each other.\ndata.corr()\n","424da376":"plt.figure(figsize=(16,12))\nsns.heatmap(data=data.iloc[:,2:].corr(),annot=True,fmt='.2f',cmap='coolwarm')\nplt.show()\n# If the value \"1\", the colon is related.","94f0c3bb":"data.region","f1bbf0ad":"data[\"infant_mortality\"] = data[\"infant_mortality\"].astype(str)\ndata[\"infant_mortality\"] = data[\"infant_mortality\"].apply(convert_currency)\ndata1=data\narea_list = list(data1['region'].unique())\nmortality_ratio = []\nfor i in area_list:\n    x = data1[data1['region']==i]\n    mortality_rate = sum(x[\"infant_mortality\"])\/len(x)\n    mortality_ratio.append(mortality_rate)\ndata1 = pd.DataFrame({'area_list': area_list,'area_mortality_ratio':mortality_ratio})\nnew_index = (data1['area_mortality_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data1.reindex(new_index)","2efd962b":"plt.figure(figsize=(15,9))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_mortality_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('Regions')\nplt.ylabel('Mortality Birth Rate')\nplt.title('Mortality Birth Rate Given States')\nplt.show()","eda53641":"data_mortality_country_high = data[(data['infant_mortality'] > 80)]\nprint(data_mortality_country_high)\nlen(data_mortality_country_high)","def3751d":"data_mortality_country_low= data[(data['infant_mortality'] < 5)]\nprint(data_mortality_country_low)\nlen(data_mortality_country_low)","b99e12e5":"print(data.loc[:10,\"country\":\"infant_mortality\"])","5613d458":"plt.subplot(2,1,1)\nplt.scatter(data_mortality_country_low.pop_density, data_mortality_country_low.GDP, color=\"blue\", label=\"mortality low\")\nplt.ylabel(\"GDP\")\nplt.legend()\nplt.subplot(2,1,2)\nplt.scatter(data_mortality_country_high.pop_density, data_mortality_country_high.GDP, color=\"red\", label=\"mortality high\")\nplt.ylabel(\"GDP\")\nplt.xlabel(\"Population Density\")\nplt.legend()\nplt.show()","e1f87933":"plt.subplot(2,1,1)\nplt.scatter(data_mortality_country_low.pop_density, data_mortality_country_low.literacy, color=\"green\", label=\"mortality low\")\nplt.ylabel(\"Literacy\")\nplt.legend()\nplt.subplot(2,1,2)\nplt.scatter(data_mortality_country_high.pop_density, data_mortality_country_high.literacy, color=\"black\", label=\"mortality high\")\nplt.ylabel(\"Literacy\")\nplt.xlabel(\"Population Density\")\nplt.legend()\nplt.show()","3beb1440":"plt.subplot(2,1,1)\nplt.scatter(data_mortality_country_low.GDP, data_mortality_country_low.population, color=\"purple\", label=\"mortality low\")\nplt.ylabel(\"GDP\")\nplt.legend()\nplt.subplot(2,1,2)\nplt.scatter(data_mortality_country_high.GDP, data_mortality_country_high.population, color=\"black\", label=\"mortality high\")\nplt.ylabel(\"GDP\")\nplt.xlabel(\"Population\")\nplt.legend()\nplt.show()","d668b43f":"data[\"literacy\"].plot(kind=\"hist\",color=\"magenta\",bins=30,grid=True,alpha=0.6,label=\"Birthrate\",figsize=(20,8))\nplt.legend()\nplt.xlabel(\"Birthrate\",color=\"brown\",size=12)\nplt.ylabel(\"Frequency\",color=\"brown\",size=12)\nplt.title(\"Birthrate Distribution\")\nplt.show()","a709ab6c":"# _______Data Melting and uisng Seaborn lib.\n\ndatamelt1 = data.melt(value_vars=\"literacy\",value_name=\"literacy\",id_vars=\"country\")\ndatamelt1[\"literacy\"].head()\nplt.figure(figsize=(20,35))\nsns.set()\nsns.barplot(x=datamelt1[\"literacy\"],y=datamelt1[\"country\"].unique())\nplt.xlabel(\"Deathrate\")\nplt.ylabel(\"Country\")\nplt.title(\"Deathrate-Country\")\nplt.tight_layout()\nplt.show()\n","f0129bdf":"\nsns.jointplot(x = 'literacy', y ='GDP', data = data, kind = 'hex',size=15, joint_kws={'gridsize':35})\n    \n#Literacy increased as GDP increased or vice versa.","ce098a91":"#_____Filtering ____\n\nMCC = data[data.population > 100000000]\nMCC\n# MCC : Most Crowded Country","4b454bad":"#sns.lmplot(x=\"birthrate\", y=\"deathrate\", hue=\"GDP\", data=data_mortality_country_high,  palette=\"Set1\")\n#print(data_mortality_country_high.country)\n\n\nplt.scatter(data_mortality_country_high.birthrate, data_mortality_country_high.deathrate, s=120)\nplt.xlabel(\"Birthrate\")\nplt.ylabel(\"Deathrate\")\nplt.show()\nprint(data_mortality_country_high.country)\n# Death and birth rate in countries with high GDP.","f5f1539c":"## Death and birth rate in countries with low GDP.\n\nplt.scatter(data_mortality_country_low.birthrate, data_mortality_country_low.deathrate, s=120)\nplt.xlabel(\"Birthrate\")\nplt.ylabel(\"Deathrate\")\nplt.show()\nprint(data_mortality_country_low.country)","0c5b8297":"sns.set(style=\"whitegrid\")              \ng = sns.jointplot(\"arable\", \"climate\", data=data, kind=\"reg\",xlim=(0, 60), ylim=(0, 12), color=\"Green\")\nplt.show()\n\n# I think so;\n\n#1: Spring\n#2: Summer \n#3: Autumn\n#4: Winter\n#we can see peak in climate=2 values.","f623f422":"data[data.climate==2].arable.hist(bins=20, color='blue')\ndata[data.climate==3].crops.hist(bins=20, color='purple')\nplt.xlabel('arable')\nplt.ylabel('crops')\nplt.show()","43672a0f":"x= data.agriculture\ny= data.GDP\nsns.set(style=\"white\", color_codes=True)\ngrid = sns.JointGrid(x, y)\ngrid.plot_joint(plt.scatter, color=\"purple\")\ngrid.plot_marginals(sns.rugplot, height=1, color=\"g\")","565a1a4d":"x= data.industry\ny= data.GDP\nsns.set(style=\"white\", color_codes=True)\ngrid = sns.JointGrid(x, y)\ngrid.plot_joint(plt.scatter, color=\"black\")\ngrid.plot_marginals(sns.rugplot, height=1, color=\"g\")","c7ec246f":"x1= data.industry\ny1= data.agriculture\nfig = plt.figure()\nsns.set_style(\"ticks\")\ng = sns.JointGrid(x1, y1, xlim=[0, max(x1)], ylim=[0, max(y1)])\ng.plot_marginals(sns.distplot, color=\".5\")\ng.plot_joint(plt.hexbin, bins='log', gridsize=40)\nplt.show()","01a3972c":"#filtering\nculture_low_country = data[(data['GDP']<7000) & (data['literacy']<50)].min()\nculture_low_country","9ec5d92f":"culture_high_country = data[(data['GDP']>20000) & (data['literacy']>95)].max()\nculture_high_country","84610bae":"print(\":)\")","ac1036c3":"In this section, we see the ratio of death numbers at birth by region.\nThis rate may mean that the mother is not able to eat enough, the geographical disadvantages of the region where she lives, the civil wars in the region and the low GDP. Let's continue the analysis by making comparisons between the regions with the highest number of deaths and the least number of deaths.\n"}}