{"cell_type":{"44b84a0d":"code","9018e480":"code","81071b72":"code","d3842063":"code","b888cd54":"code","690a4861":"code","134c3b53":"code","3683df5a":"code","25ac64a9":"code","4640e361":"code","101d8f89":"markdown"},"source":{"44b84a0d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9018e480":"df = pd.read_csv('\/kaggle\/input\/sentenced-to-death-last-words\/deathrow_text.csv', index_col = 'Unnamed: 0')","81071b72":"df.age.describe()","d3842063":"df.race.value_counts()","b888cd54":"import emoji\nimport re\nimport itertools\n\n# A list of CONTRACTION_EN from http:\/\/stackoverflow.com\/questions\/19790188\/expanding-english-language-contractions-in-python\nCONTRACTION_EN = {\n    \"ain't\": \"am not\",\n    \"aren't\": \"are not\",\n    \"can't\": \"cannot\",\n    \"can't've\": \"cannot have\",\n    \"'cause\": \"because\",\n    \"could've\": \"could have\",\n    \"couldn't\": \"could not\",\n    \"couldn't've\": \"could not have\",\n    \"didn't\": \"did not\",\n    \"doesn't\": \"does not\",\n    \"don't\": \"do not\",\n    \"hadn't\": \"had not\",\n    \"hadn't've\": \"had not have\",\n    \"hasn't\": \"has not\",\n    \"haven't\": \"have not\",\n    \"he'd\": \"he would\",\n    \"he'd've\": \"he would have\",\n    \"he'll\": \"he will\",\n    \"he's\": \"he is\",\n    \"how'd\": \"how did\",\n    \"how'll\": \"how will\",\n    \"how's\": \"how is\",\n    \"i'd\": \"i would\",\n    \"i'll\": \"i will\",\n    \"i'm\": \"i am\",\n    \"i've\": \"i have\",\n    \"isn't\": \"is not\",\n    \"it'd\": \"it would\",\n    \"it'll\": \"it will\",\n    \"it's\": \"it is\",\n    \"let's\": \"let us\",\n    \"ma'am\": \"madam\",\n    \"mayn't\": \"may not\",\n    \"might've\": \"might have\",\n    \"mightn't\": \"might not\",\n    \"must've\": \"must have\",\n    \"mustn't\": \"must not\",\n    \"needn't\": \"need not\",\n    \"oughtn't\": \"ought not\",\n    \"shan't\": \"shall not\",\n    \"sha'n't\": \"shall not\",\n    \"she'd\": \"she would\",\n    \"she'll\": \"she will\",\n    \"she's\": \"she is\",\n    \"should've\": \"should have\",\n    \"shouldn't\": \"should not\",\n    \"that'd\": \"that would\",\n    \"that's\": \"that is\",\n    \"there'd\": \"there had\",\n    \"there's\": \"there is\",\n    \"they'd\": \"they would\",\n    \"they'll\": \"they will\",\n    \"they're\": \"they are\",\n    \"they've\": \"they have\",\n    \"wasn't\": \"was not\",\n    \"we'd\": \"we would\",\n    \"we'll\": \"we will\",\n    \"we're\": \"we are\",\n    \"we've\": \"we have\",\n    \"weren't\": \"were not\",\n    \"what'll\": \"what will\",\n    \"what're\": \"what are\",\n    \"what's\": \"what is\",\n    \"what've\": \"what have\",\n    \"where'd\": \"where did\",\n    \"where's\": \"where is\",\n    \"who'll\": \"who will\",\n    \"who's\": \"who is\",\n    \"won't\": \"will not\",\n    \"wouldn't\": \"would not\",\n    \"you'd\": \"you would\",\n    \"you'll\": \"you will\",\n    \"you're\": \"you are\",\n    \"thx\": \"thanks\",\n    \"lool\": \"lol\"\n}\n\n# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\nABBREVATION_EN = {\n    \"$\": \" dollar \",\n    \"\u20ac\": \" euro \",\n    \"4ao\": \"for adults only\",\n    \"a.m\": \"before midday\",\n    \"a3\": \"anytime anywhere anyplace\",\n    \"aamof\": \"as a matter of fact\",\n    \"acct\": \"account\",\n    \"adih\": \"another day in hell\",\n    \"afaic\": \"as far as i am concerned\",\n    \"afaict\": \"as far as i can tell\",\n    \"afaik\": \"as far as i know\",\n    \"afair\": \"as far as i remember\",\n    \"afk\": \"away from keyboard\",\n    \"app\": \"application\",\n    \"approx\": \"approximately\",\n    \"apps\": \"applications\",\n    \"asap\": \"as soon as possible\",\n    \"asl\": \"age, sex, location\",\n    \"atk\": \"at the keyboard\",\n    \"ave.\": \"avenue\",\n    \"aymm\": \"are you my mother\",\n    \"ayor\": \"at your own risk\",\n    \"b&b\": \"bed and breakfast\",\n    \"b+b\": \"bed and breakfast\",\n    \"b.c\": \"before christ\",\n    \"b2b\": \"business to business\",\n    \"b2c\": \"business to customer\",\n    \"b4\": \"before\",\n    \"b4n\": \"bye for now\",\n    \"b@u\": \"back at you\",\n    \"bae\": \"before anyone else\",\n    \"bak\": \"back at keyboard\",\n    \"bbbg\": \"bye bye be good\",\n    \"bbc\": \"british broadcasting corporation\",\n    \"bbias\": \"be back in a second\",\n    \"bbl\": \"be back later\",\n    \"bbs\": \"be back soon\",\n    \"be4\": \"before\",\n    \"bfn\": \"bye for now\",\n    \"blvd\": \"boulevard\",\n    \"bout\": \"about\",\n    \"brb\": \"be right back\",\n    \"bros\": \"brothers\",\n    \"brt\": \"be right there\",\n    \"bsaaw\": \"big smile and a wink\",\n    \"btw\": \"by the way\",\n    \"bwl\": \"bursting with laughter\",\n    \"c\/o\": \"care of\",\n    \"cet\": \"central european time\",\n    \"cf\": \"compare\",\n    \"cia\": \"central intelligence agency\",\n    \"csl\": \"can not stop laughing\",\n    \"cu\": \"see you\",\n    \"cul8r\": \"see you later\",\n    \"cv\": \"curriculum vitae\",\n    \"cwot\": \"complete waste of time\",\n    \"cya\": \"see you\",\n    \"cyt\": \"see you tomorrow\",\n    \"dae\": \"does anyone else\",\n    \"dbmib\": \"do not bother me i am busy\",\n    \"diy\": \"do it yourself\",\n    \"dm\": \"direct message\",\n    \"dwh\": \"during work hours\",\n    \"e123\": \"easy as one two three\",\n    \"eet\": \"eastern european time\",\n    \"eg\": \"example\",\n    \"embm\": \"early morning business meeting\",\n    \"encl\": \"enclosed\",\n    \"encl.\": \"enclosed\",\n    \"etc\": \"and so on\",\n    \"faq\": \"frequently asked questions\",\n    \"fawc\": \"for anyone who cares\",\n    \"fb\": \"facebook\",\n    \"fc\": \"fingers crossed\",\n    \"fig\": \"figure\",\n    \"fimh\": \"forever in my heart\",\n    \"ft.\": \"feet\",\n    \"ft\": \"featuring\",\n    \"ftl\": \"for the loss\",\n    \"ftw\": \"for the win\",\n    \"fwiw\": \"for what it is worth\",\n    \"fyi\": \"for your information\",\n    \"g9\": \"genius\",\n    \"gahoy\": \"get a hold of yourself\",\n    \"gal\": \"get a life\",\n    \"gcse\": \"general certificate of secondary education\",\n    \"gfn\": \"gone for now\",\n    \"gg\": \"good game\",\n    \"gl\": \"good luck\",\n    \"glhf\": \"good luck have fun\",\n    \"gmt\": \"greenwich mean time\",\n    \"gmta\": \"great minds think alike\",\n    \"gn\": \"good night\",\n    \"g.o.a.t\": \"greatest of all time\",\n    \"goat\": \"greatest of all time\",\n    \"goi\": \"get over it\",\n    \"gps\": \"global positioning system\",\n    \"gr8\": \"great\",\n    \"gratz\": \"congratulations\",\n    \"gyal\": \"girl\",\n    \"h&c\": \"hot and cold\",\n    \"hp\": \"horsepower\",\n    \"hr\": \"hour\",\n    \"hrh\": \"his royal highness\",\n    \"ht\": \"height\",\n    \"ibrb\": \"i will be right back\",\n    \"ic\": \"i see\",\n    \"icq\": \"i seek you\",\n    \"icymi\": \"in case you missed it\",\n    \"idc\": \"i do not care\",\n    \"idgadf\": \"i do not give a damn fuck\",\n    \"idgaf\": \"i do not give a fuck\",\n    \"idk\": \"i do not know\",\n    \"ie\": \"that is\",\n    \"i.e\": \"that is\",\n    \"ifyp\": \"i feel your pain\",\n    \"IG\": \"instagram\",\n    \"iirc\": \"if i remember correctly\",\n    \"ilu\": \"i love you\",\n    \"ily\": \"i love you\",\n    \"imho\": \"in my humble opinion\",\n    \"imo\": \"in my opinion\",\n    \"imu\": \"i miss you\",\n    \"iow\": \"in other words\",\n    \"irl\": \"in real life\",\n    \"j4f\": \"just for fun\",\n    \"jic\": \"just in case\",\n    \"jk\": \"just kidding\",\n    \"jsyk\": \"just so you know\",\n    \"l8r\": \"later\",\n    \"lb\": \"pound\",\n    \"lbs\": \"pounds\",\n    \"ldr\": \"long distance relationship\",\n    \"lmao\": \"laugh my ass off\",\n    \"lmfao\": \"laugh my fucking ass off\",\n    \"lol\": \"laughing out loud\",\n    \"ltd\": \"limited\",\n    \"ltns\": \"long time no see\",\n    \"m8\": \"mate\",\n    \"mf\": \"motherfucker\",\n    \"mfs\": \"motherfuckers\",\n    \"mfw\": \"my face when\",\n    \"mofo\": \"motherfucker\",\n    \"mph\": \"miles per hour\",\n    \"mr\": \"mister\",\n    \"mrw\": \"my reaction when\",\n    \"ms\": \"miss\",\n    \"mte\": \"my thoughts exactly\",\n    \"nagi\": \"not a good idea\",\n    \"nbc\": \"national broadcasting company\",\n    \"nbd\": \"not big deal\",\n    \"nfs\": \"not for sale\",\n    \"ngl\": \"not going to lie\",\n    \"nhs\": \"national health service\",\n    \"nrn\": \"no reply necessary\",\n    \"nsfl\": \"not safe for life\",\n    \"nsfw\": \"not safe for work\",\n    \"nth\": \"nice to have\",\n    \"nvr\": \"never\",\n    \"nyc\": \"new york city\",\n    \"oc\": \"original content\",\n    \"og\": \"original\",\n    \"ohp\": \"overhead projector\",\n    \"oic\": \"oh i see\",\n    \"omdb\": \"over my dead body\",\n    \"omg\": \"oh my god\",\n    \"omw\": \"on my way\",\n    \"p.a\": \"per annum\",\n    \"p.m\": \"after midday\",\n    \"pm\": \"prime minister\",\n    \"poc\": \"people of color\",\n    \"pov\": \"point of view\",\n    \"pp\": \"pages\",\n    \"ppl\": \"people\",\n    \"prw\": \"parents are watching\",\n    \"ps\": \"postscript\",\n    \"pt\": \"point\",\n    \"ptb\": \"please text back\",\n    \"pto\": \"please turn over\",\n    \"qpsa\": \"what happens\",  # \"que pasa\",\n    \"ratchet\": \"rude\",\n    \"rbtl\": \"read between the lines\",\n    \"rlrt\": \"real life retweet\",\n    \"rofl\": \"rolling on the floor laughing\",\n    \"roflol\": \"rolling on the floor laughing out loud\",\n    \"rotflmao\": \"rolling on the floor laughing my ass off\",\n    \"rt\": \"retweet\",\n    \"ruok\": \"are you ok\",\n    \"sfw\": \"safe for work\",\n    \"sk8\": \"skate\",\n    \"smh\": \"shake my head\",\n    \"sq\": \"square\",\n    \"srsly\": \"seriously\",\n    \"ssdd\": \"same stuff different day\",\n    \"tbh\": \"to be honest\",\n    \"tbs\": \"tablespooful\",\n    \"tbsp\": \"tablespooful\",\n    \"tfw\": \"that feeling when\",\n    \"thks\": \"thank you\",\n    \"tho\": \"though\",\n    \"thx\": \"thank you\",\n    \"tia\": \"thanks in advance\",\n    \"til\": \"today i learned\",\n    \"tl;dr\": \"too long i did not read\",\n    \"tldr\": \"too long i did not read\",\n    \"tmb\": \"tweet me back\",\n    \"tntl\": \"trying not to laugh\",\n    \"ttyl\": \"talk to you later\",\n    \"u\": \"you\",\n    \"u2\": \"you too\",\n    \"u4e\": \"yours for ever\",\n    \"utc\": \"coordinated universal time\",\n    \"w\/\": \"with\",\n    \"w\/o\": \"without\",\n    \"w8\": \"wait\",\n    \"wassup\": \"what is up\",\n    \"wb\": \"welcome back\",\n    \"wtf\": \"what the fuck\",\n    \"wtg\": \"way to go\",\n    \"wtpa\": \"where the party at\",\n    \"wuf\": \"where are you from\",\n    \"wuzup\": \"what is up\",\n    \"wywh\": \"wish you were here\",\n    \"yd\": \"yard\",\n    \"ygtr\": \"you got that right\",\n    \"ynk\": \"you never know\",\n    \"zzz\": \"sleeping bored and tired\"\n}\n\n\ndef remove_CONTRACTION(text):\n    return CONTRACTION_EN[text.lower()] if text.lower() in CONTRACTION_EN.keys() else text\n\n\ndef remove_abbrevation_ENABBREVATION_EN(text):\n    return ABBREVATION_EN[text.lower()] if text.lower() in ABBREVATION_EN.keys() else text\n\n\ndef to_lowercase(text):\n    text = text.lower()\n    return text\n\n\ndef remove_ponctuation(text):\n    # Remove punctuation\n    text = ' '.join(re.sub(\"[\\.\\,\\!\\?\\:\\;\\-\\=\\\/\\|\\'\\(\\']\", \" \", text).split())\n    return text\n\n\ndef remove_line_breaks(text):\n    text = re.sub(r'\\n', ' ', text)  # Remove line breaks\n    return text\n\n\ndef remove_extraspace_leading_trailing(text):\n    # Remove leading, trailing, and extra spaces\n    text = re.sub('\\s+', ' ', text).strip()\n    return text\n\n\ndef remove_links(text):\n    text = re.sub(r'https?:\/\/\\S+', '', text)  # Remove link\n    return text\n","690a4861":"df.lastwords","134c3b53":"df_nlp = df[['lastwords']].dropna()","3683df5a":"\ndef main_feat_eng(text):\n    text = to_lowercase(text)\n    text = remove_extraspace_leading_trailing(text)\n    text = remove_line_breaks(text)\n    text = remove_ponctuation(text)\n    text = remove_abbrevation_ENABBREVATION_EN(text)\n    text = remove_CONTRACTION(text)\n    return text\n\n\ndf_nlp.lastwords.apply(lambda x: main_feat_eng(x))","25ac64a9":"df_nlp","4640e361":"from collections import Counter\nCounter(\" \".join(df_nlp[\"lastwords\"]).split()).most_common(100)","101d8f89":"# most used words"}}