{"cell_type":{"449495dc":"code","8aacd79e":"code","f12b0085":"code","db748176":"code","c2fcddab":"code","ae033d89":"code","998cc3b1":"code","2184d916":"code","047defa7":"code","332afd5e":"code","f3bf6da6":"code","aafed8c6":"code","04bf3fe7":"code","65b9d205":"code","1d070e37":"code","fe4f1efe":"code","921ca36c":"code","19b58f6c":"code","d6cf6516":"code","ca3cdc7c":"code","c67a6ed5":"code","117b005f":"code","fa934da8":"code","9e9971ce":"code","4ba39643":"code","0d67ee9c":"markdown","d304714c":"markdown"},"source":{"449495dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8aacd79e":"!git clone https:\/\/cortexbci.admin@bitbucket.org\/cortexbci.admin\/eeg_artefact_dataset.git","f12b0085":"!cd eeg_artefact_dataset && ls","db748176":"train = pd.read_csv('.\/eeg_artefact_dataset\/S02_21.08.20_14.34.32.csv')\ntrain.head()","c2fcddab":"classes = train['MarkerValueInt']","ae033d89":"from scipy.signal import butter, lfilter\n\n'''\nCode for Butterworth Bandpass Filters\n'''\ndef butter_bandpass(lowcut, highcut, fs, order=5):\n    nyq = 0.5 * fs\n    low = lowcut \/ nyq\n    high = highcut \/ nyq\n    b, a = butter(order, [low, high], btype='band')\n    return b, a\n\n\ndef butter_bandpass_filter(data, lowcut, highcut, fs, order=5):\n    b, a = butter_bandpass(lowcut, highcut, fs, order=order)\n    y = lfilter(b, a, data)\n    return y","998cc3b1":"train = train[1:]","2184d916":"train[train['MarkerType']==1]","047defa7":"del train['MarkerValueInt']\ndel train['EEG.Counter']\ndel train['Timestamp']\ndel train['MarkerIndex']\ndel train['MarkerType']","332afd5e":"orig_data = train.values","f3bf6da6":"l = 2\nr = 12\ntrain['1'] = butter_bandpass_filter(train['EEG.AF3'].values,l,r,128,2)\ntrain['2'] = butter_bandpass_filter(train['EEG.F7'].values,l,r,128,2)\ntrain['3'] = butter_bandpass_filter(train['EEG.F3'].values,l,r,128,2)\ntrain['4'] = butter_bandpass_filter(train['EEG.FC5'].values,l,r,128,2)\ntrain['5'] = butter_bandpass_filter(train['EEG.T7'].values,l,r,128,2)\ntrain['6'] = butter_bandpass_filter(train['EEG.P7'].values,l,r,128,2)\ntrain['7'] = butter_bandpass_filter(train['EEG.O1'].values,l,r,128,2)\ntrain['8'] = butter_bandpass_filter(train['EEG.O2'].values,l,r,128,2)\ntrain['9'] = butter_bandpass_filter(train['EEG.P8'].values,l,r,128,2)\ntrain['10'] = butter_bandpass_filter(train['EEG.T8'].values,l,r,128,2)\ntrain['11'] = butter_bandpass_filter(train['EEG.FC6'].values,l,r,128,2)\ntrain['12'] = butter_bandpass_filter(train['EEG.F4'].values,l,r,128,2)\ntrain['13'] = butter_bandpass_filter(train['EEG.F8'].values,l,r,128,2)\ntrain['14'] = butter_bandpass_filter(train['EEG.AF4'].values,l,r,128,2)","aafed8c6":"train['1'] = train['EEG.AF3']\ntrain['2'] = train['EEG.F7']\ntrain['3'] = train['EEG.F3']\ntrain['4'] = train['EEG.FC5']\ntrain['5'] = train['EEG.T7']\ntrain['6'] = train['EEG.P7']\ntrain['7'] = train['EEG.O1']\ntrain['8'] = train['EEG.O2']\ntrain['9'] = train['EEG.P8']\ntrain['10'] = train['EEG.T8']\ntrain['11'] = train['EEG.FC6']\ntrain['12'] = train['EEG.F4']\ntrain['13'] = train['EEG.F8']\ntrain['14'] = train['EEG.AF4']","04bf3fe7":"del train['EEG.AF3']\ndel train['EEG.F7']\ndel train['EEG.F3']\ndel train['EEG.FC5']\ndel train['EEG.T7']\ndel train['EEG.P7']\ndel train['EEG.O1']\ndel train['EEG.O2']\ndel train['EEG.P8']\ndel train['EEG.T8']\ndel train['EEG.FC6']\ndel train['EEG.F4']\ndel train['EEG.F8']\ndel train['EEG.AF4']","65b9d205":"import matplotlib.pyplot as plt","1d070e37":"import scipy.signal as sps\nfrom sklearn.decomposition import FastICA","fe4f1efe":"train_nparr = train.values","921ca36c":"ica = FastICA(n_components=14)\nica.fit(train_nparr)\ncomponents = ica.transform(train_nparr)","19b58f6c":"components.shape","d6cf6516":"s = orig_data*train_nparr","ca3cdc7c":"true_artifacts = train[train['MarkerType']==1].index\ntrue_artifacts","c67a6ed5":"n = 13\nplt.subplot(3, 1, 2)\nplt.plot([[np.nan, np.nan, np.nan]])  # advance the color cycler to give the components a different color :)\n# plt.plot(components + [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0])\nplt.plot(s[6300:6500,n:n+1])\n# plt.plot(components + [0.5, 1.0, 1.5])\n# plt.yticks([0.5, 1.0, 1.5], ['0', '1', '2'])\nplt.ylabel('components')\ni = 6000\ncount = 0\narr = []\nwhile i < 46065:\n    if s[i,n:n+1] > 18500000: #and s[i-1,n:n+1] <= s[i,n:n+1] and s[i+1,n:n+1] >= s[i,n:n+1]:\n        i += 64 #Window Size\n        count += 1\n        arr.append(i)\n    i += 1\ni = 0\nj = 0\ndiff = []\nmiss_artifact = []\nmiss_predict = []\nwhile i < len(arr) and j < len(true_artifacts):\n    if  arr[i] - true_artifacts[j] > 100:\n        miss_artifact.append(true_artifacts[j])\n        j += 1\n    elif arr[i] - true_artifacts[j] < -100:\n        miss_predict.append(arr[i])\n        i += 1\n    else:\n        diff.append(arr[i] - true_artifacts[j])\n        i += 1\n        j += 1\nprint('Artifacts missed:',len(miss_artifact),miss_artifact)\nprint('Artifacts mispredicted:',len(miss_predict),miss_predict)\nprint('General Diffrence between values:',diff)\nprint('Number of artifacts predicted:',count)\nprint('Predicted Values:',arr)\nprint('True Values:',true_artifacts)","117b005f":"restored = ica.inverse_transform(components)","fa934da8":"train_nparr[:,:1]","9e9971ce":"n = 0\nval = restored[:,n:n+1]-train_nparr[:,n:n+1]\nplt.subplot(3, 1, 2)\nplt.plot([[np.nan, np.nan, np.nan]])  # advance the color cycler to give the components a different color\nplt.plot(val[6700:6800])\n# plt.plot(components + [0.5, 1.0, 1.5])\n# plt.yticks([0.5, 1.0, 1.5], ['0', '1', '2'])\nplt.ylabel('components')\nprint(val[6440],val[6719],val[7116],val[7363],val[7774])","4ba39643":"count = 0\nfor i in range(len(classes)):\n    if classes[i] == 22 or classes[i] == 23:\n        val[i] += (10*(10**-13))\n    else:\n        count += 1\nplt.plot(val[00:7400])","0d67ee9c":"* No bandpass\n* Channel 0 : > 185000000 (Artifacts missed: 1 [12161] Artifacts mispredicted: 7 [8633, 10021, 14157, 16373, 19171, 25856, 41757])\n* Channel 1 : > 185000000 (Artifacts missed: 2 [7774, 12161] Artifacts mispredicted: 6 [9008, 10025, 14166, 19171, 45049, 45238])\n* Channel 3 : > 182000000 (Artifacts missed: 0 [] Artifacts mispredicted: 8 [7145, 7465, 19179, 25310, 30356, 30422, 31724, 31799])\n* Channel 10 : > 181000000 (Artifacts missed: 6 [8953, 9332, 13693, 16654, 27225, 34380] Artifacts mispredicted: 6 [19223, 30362, 30441, 36923, 38359, 44372])\n* Channel 11 : > 182000000 (Artifacts missed: 3 [8953, 13693, 27225] Artifacts mispredicted: 4 [18012, 19648, 32515, 41931])\n* Channel 13 : >185000000 (Artifacts missed: 5 [7774, 12161, 18703, 24737, 41411] Artifacts mispredicted: 10 [6756, 7173, 7487, 8630, 9005, 10020, 14156, 16376, 19176, 25856])","d304714c":"* l = 2, r = 12\n* Channel 0 : < -100000 (Artifacts mispredicted: 14 [6770, 9074, 9414, 10035, 14173, 16392, 19211, 28630, 31163, 33400, 33739, 39356, 44511, 45244])\n* Channel 1 : < -239000 (Artifacts missed: 11 [8528, 8953, 12161, 15136, 23343, 23843, 24737, 28464, 30320, 32115, 35231])\n* Channel 2 : < -25000 (Artifacts missed: 11 [8528, 10661, 11539, 14080, 16279, 19617, 22899, 25757, 33986, 34380, 43355] Artifacts mispredicted: 6 [7165, 8749, 15547, 19464, 31725, 38361])\n* Channel 3 : < -210000 (Artifacts missed: 13 [6440, 6719, 8528, 8953, 10661, 13013, 13693, 14080, 16279, 19115, 24737, 25757, 32115] Artifacts mispredicted: 1 [31723] )\n* **Minima Maxima Checking added here on out**\n* Channel 5 : > 50000 (Artifacts missed: 7 [8528, 8953, 10661, 11870, 16279, 16654, 19115] Artifacts mispredicted: 10 [7146, 8725, 11275, 16386, 19227, 20489, 20625, 25287, 30377, 32415])\n* Channel 6 : > 50000 (Artifacts missed: 11 [6440, 8528, 8953, 9932, 10661, 14080, 14444, 16279, 19115, 19617, 36371] Artifacts mispredicted: 6 [12277, 23954, 25286, 32415, 35074, 44999])\n* Channel 7 : > 37500 (Artifacts missed: 3 [8528, 8953, 10430] Artifacts mispredicted: 8 [8729, 18820, 19456, 20481, 24615, 31815, 38702, 42666])\n* **End of Minima Maxima Checking**\n* Channel 8 : > 50000 (Artifacts missed: 3 [8953, 10661, 19115] Artifacts mispredicted: 11 [9765, 10764, 11274, 15920, 19217, 20484, 20625, 20958, 25288, 34471, 36696])\n* Channel 10 : < -120000 (Artifacts missed: 6 [8528, 8953, 9932, 14080, 19115, 36371] Artifacts mispredicted: 10 [10034, 13816, 14185, 16394, 19232, 21176, 34496, 34983, 45049, 45240])\n* Channel 11 : > 120000 (Artifacts missed: 8 [8528, 9332, 14080, 16279, 19115, 24737, 33986, 34380] Artifacts mispredicted: 6 [10054, 10208, 11045, 32517, 38357, 43461])\n* Channel 13 : < -140000 (Artifacts missed: 13 [7116, 12161, 12617, 15136, 15798, 19115, 23843, 27507, 28464, 30320, 30924, 33594, 35836] Artifacts mispredicted: 13 [6769, 9076, 9419, 10035, 14180, 16390, 19227, 25875, 30035, 33404, 40892, 44874, 45242])"}}