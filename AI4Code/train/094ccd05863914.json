{"cell_type":{"9cd4777b":"code","4dda0529":"code","d058829e":"code","0407ba37":"code","6afedab0":"code","aa69ae25":"code","44655b3e":"code","741fe572":"code","a2634da6":"code","4507fb79":"code","066ea29c":"code","d9169b26":"code","ab42f389":"code","baf9cdfd":"code","dc74371d":"code","47a4b17d":"code","ce3153fd":"code","7e0f69a3":"code","bbc0cf85":"code","f6965a16":"code","0252d4d2":"code","54bf3372":"code","80433e9c":"code","1baaa94f":"code","bed5c5e5":"code","e4cc2168":"code","7c12c121":"code","c909c1d7":"code","4b20914f":"code","38e40f5c":"code","cef62b7d":"code","ed1fbe64":"code","59f83b4c":"code","e24058db":"code","6ce5d259":"code","6de8cfc7":"code","da2e8b0e":"code","26dfcac4":"code","dc6a6ab6":"code","83da65f1":"code","083c0d88":"code","fa09cf48":"code","fceefff4":"code","2603a00b":"code","c0cb53ff":"markdown","f4df4669":"markdown","daa5f6ff":"markdown","64d77f11":"markdown","3e65a241":"markdown","15e12b36":"markdown","34779b13":"markdown","f6d3fa8f":"markdown","0fa22dab":"markdown","f074e533":"markdown","57ec5b7a":"markdown","52946eb1":"markdown","541902bc":"markdown","0de0b208":"markdown","2c680495":"markdown","5af1ee08":"markdown","ce0df1c0":"markdown","b8d7a73a":"markdown","8be1b069":"markdown","f0cc8622":"markdown","0db95fd1":"markdown","5a65a367":"markdown","4f421728":"markdown"},"source":{"9cd4777b":"import os\nfrom tqdm import tqdm\n\n# Data Processing Libraries \n\nimport pandas as pd \nimport numpy as np \n\n\n# Feature Engineering Libraries\n\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn import preprocessing\n\n# Data Visualisation libraries \n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport cv2\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n## Image Augmentation \n\n# skimage\nfrom skimage.io import imshow, imread, imsave\nfrom skimage.transform import rotate, AffineTransform, warp,rescale, resize, downscale_local_mean\nfrom skimage import color,data\nfrom skimage.exposure import adjust_gamma\nfrom skimage.util import random_noise\n\n\n# 3D scatter plot\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nfrom matplotlib import colors\n\n\n#OpenCV-Python\nimport cv2\n\n# imgaug\nimport imageio\nimport imgaug as ia\nimport imgaug.augmenters as iaa\n\n# Albumentations\nimport albumentations as A\n\nSAMPLE_LEN=100","4dda0529":"train_image_path = '..\/input\/plant-pathology-2021-fgvc8\/train_images'\ntest_image_path = '..\/input\/plant-pathology-2021-fgvc8\/test_images'\ntrain_df_path = '..\/input\/plant-pathology-2021-fgvc8\/train.csv'\ntest_df_path = '..\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv'","d058829e":"#\u0110\u1ecdc d\u1eef li\u1ec7u\ndf_train = pd.read_csv(train_df_path)","0407ba37":"#In d\u1eef li\u1ec7u\ndf_train.head()","6afedab0":"#K\u00edch th\u01b0\u1edbc d\u1eef li\u1ec7u\ndf_train.shape","aa69ae25":"#S\u1ed1 l\u01b0\u1ee3ng c\u1ee7a m\u1ed7i label\ndf_train['labels'].value_counts()","44655b3e":"# sns.histplot(df_train['labels'].value_counts(sort=True))","741fe572":"plt.figure(figsize=(15,12))\nlabels = sns.barplot(df_train.labels.value_counts().index,df_train.labels.value_counts())\nfor item in labels.get_xticklabels():\n    item.set_rotation(45)","a2634da6":"source = df_train['labels'].value_counts()","4507fb79":"fig = go.Figure(data=[go.Pie(labels=source.index,values=source.values)])\nfig.update_layout(title='Label distribution')\nfig.show()","066ea29c":"img_shapes = {}\nfor image_name in tqdm(os.listdir(train_image_path)[:300]):\n    image = cv2.imread(os.path.join(train_image_path, image_name))\n    img_shapes[image.shape] = img_shapes.get(image.shape, 0) + 1\n\nprint(img_shapes)","d9169b26":"def visualize_batch(path,image_ids, labels):\n    plt.figure(figsize=(16, 12))\n    \n    for ind, (image_id, label) in enumerate(zip(image_ids, labels)):\n        plt.subplot(3, 3, ind + 1)\n        image = cv2.imread(os.path.join(path, image_id))\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n        plt.imshow(image)\n        plt.title(f\"Class: {label}\", fontsize=12)\n        plt.axis(\"off\")\n    plt.show()","ab42f389":"tmp_df = df_train.sample(9)\nimage_ids = tmp_df[\"image\"].values\nlabels = tmp_df[\"labels\"].values\nvisualize_batch(train_image_path,image_ids,labels)","baf9cdfd":"label_encoder = preprocessing.LabelEncoder()\n  \n# Label encoding.\ndf_train[\"labels_code\"]= label_encoder.fit_transform(df_train[[\"labels\"]])\ndf_train","dc74371d":"#label = complex\ntmp_df = df_train[df_train[\"labels_code\"] == 0]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image\"].values\nlabels = tmp_df[\"labels\"].values\n\nvisualize_batch(train_image_path, image_ids, labels)","47a4b17d":"#label = frog_eye_leaf_spot\ntmp_df = df_train[df_train[\"labels_code\"] == 1]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image\"].values\nlabels = tmp_df[\"labels\"].values\n\nvisualize_batch(train_image_path, image_ids, labels)","ce3153fd":"#label = frog_eye_leaf_spot complex\ntmp_df = df_train[df_train[\"labels_code\"] == 2]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image\"].values\nlabels = tmp_df[\"labels\"].values\n\nvisualize_batch(train_image_path, image_ids, labels)","7e0f69a3":"#label = healthy\ntmp_df = df_train[df_train[\"labels_code\"] == 3]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image\"].values\nlabels = tmp_df[\"labels\"].values\n\nvisualize_batch(train_image_path, image_ids, labels)","bbc0cf85":"#label = powdery_mildew\ntmp_df = df_train[df_train[\"labels_code\"] == 4]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image\"].values\nlabels = tmp_df[\"labels\"].values\n\nvisualize_batch(train_image_path, image_ids, labels)","f6965a16":"#label = powdery_mildew complex\ntmp_df = df_train[df_train[\"labels_code\"] == 5]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image\"].values\nlabels = tmp_df[\"labels\"].values\n\nvisualize_batch(train_image_path, image_ids, labels)","0252d4d2":"#label = rust\ntmp_df = df_train[df_train[\"labels_code\"] == 6]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image\"].values\nlabels = tmp_df[\"labels\"].values\n\nvisualize_batch(train_image_path, image_ids, labels)","54bf3372":"#label = rust complex\ntmp_df = df_train[df_train[\"labels_code\"] == 7]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image\"].values\nlabels = tmp_df[\"labels\"].values\n\nvisualize_batch(train_image_path, image_ids, labels)","80433e9c":"#label = rust frog_eye_leaf_spot\ntmp_df = df_train[df_train[\"labels_code\"] == 8]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image\"].values\nlabels = tmp_df[\"labels\"].values\n\nvisualize_batch(train_image_path, image_ids, labels)","1baaa94f":"#label = scab\ntmp_df = df_train[df_train[\"labels_code\"] == 9]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image\"].values\nlabels = tmp_df[\"labels\"].values\n\nvisualize_batch(train_image_path, image_ids, labels)","bed5c5e5":"#label = scab frog_eye_leaf_spot\ntmp_df = df_train[df_train[\"labels_code\"] == 10]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image\"].values\nlabels = tmp_df[\"labels\"].values\n\nvisualize_batch(train_image_path, image_ids, labels)","e4cc2168":"#label = scab frog_eye_leaf_spot complex\ntmp_df = df_train[df_train[\"labels_code\"] == 11]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image\"].values\nlabels = tmp_df[\"labels\"].values\n\nvisualize_batch(train_image_path, image_ids, labels)","7c12c121":"def load_image(image_id):\n    file_path = image_id\n    image = cv2.imread(train_image_path+'\/'+ file_path)\n    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n# Just take 100 sample images with SAMPLE_LEN=100 for RBG Channel Analysis\n\ntrain_images = df_train[\"image\"][:SAMPLE_LEN].apply(load_image)","c909c1d7":"red_values = [np.mean(train_images[idx][:, :, 0]) for idx in range(len(train_images))]\ngreen_values = [np.mean(train_images[idx][:, :, 1]) for idx in range(len(train_images))]\nblue_values = [np.mean(train_images[idx][:, :, 2]) for idx in range(len(train_images))]\nvalues = [np.mean(train_images[idx]) for idx in range(len(train_images))]","4b20914f":"fig = ff.create_distplot([red_values], group_labels=[\"R\"], colors=[\"red\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"Ph\u00e2n ph\u1ed1i K\u00eanh \u0110\u1ecf\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","38e40f5c":"fig = ff.create_distplot([green_values], group_labels=[\"G\"], colors=[\"green\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"Ph\u00e2n ph\u1ed1i K\u00eanh Xanh L\u00e1\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","cef62b7d":"fig = ff.create_distplot([blue_values], group_labels=[\"B\"], colors=[\"blue\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"Ph\u00e2n ph\u1ed1i K\u00eanh Xanh Lam\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","ed1fbe64":"fig = go.Figure()\n\nfor idx, values in enumerate([red_values, green_values, blue_values]):\n    if idx == 0:\n        color = \"Red\"\n    if idx == 1:\n        color = \"Green\"\n    if idx == 2:\n        color = \"Blue\"\n    fig.add_trace(go.Box(x=[color]*len(values), y=values, name=color, marker=dict(color=color.lower())))\n    \nfig.update_layout(yaxis_title=\"Mean value\", xaxis_title=\"Color channel\",\n                  title=\"Mean value vs. Color channel\", template=\"plotly_white\")","59f83b4c":"fig = ff.create_distplot([red_values, green_values, blue_values],\n                         group_labels=[\"R\", \"G\", \"B\"],\n                         colors=[\"red\", \"green\", \"blue\"])\nfig.update_layout(title_text=\"Distribution of red channel values\", template=\"simple_white\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig.data[1].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[1].marker.line.width = 0.5\nfig.data[2].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[2].marker.line.width = 0.5\nfig","e24058db":"image = train_images[10]\nimshow(image)\nprint(image.shape)","6ce5d259":"r, g, b = cv2.split(image)\nfig = plt.figure()\naxis = fig.add_subplot(1, 1, 1, projection=\"3d\")\n\npixel_colors = image.reshape((np.shape(image)[0]*np.shape(image)[1], 3))\nnorm = colors.Normalize(vmin=-1.,vmax=1.)\nnorm.autoscale(pixel_colors)\npixel_colors = norm(pixel_colors).tolist()\n\naxis.scatter(r.flatten(), g.flatten(), b.flatten(), facecolors=pixel_colors, marker=\".\")\naxis.set_xlabel(\"Red\")\naxis.set_ylabel(\"Green\")\naxis.set_zlabel(\"Blue\")\nplt.show()","6de8cfc7":"hsv_image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)\nh, s, v = cv2.split(hsv_image)\nfig = plt.figure()\naxis = fig.add_subplot(1, 1, 1, projection=\"3d\")\n\naxis.scatter(h.flatten(), s.flatten(), v.flatten(), facecolors=pixel_colors, marker=\".\")\naxis.set_xlabel(\"Hue\")\naxis.set_ylabel(\"Saturation\")\naxis.set_zlabel(\"Value\")\nplt.show()","da2e8b0e":"df_train['label_list'] = df_train['labels'].str.split(' ')","26dfcac4":"lbls = ['healthy','complex','rust','frog_eye_leaf_spot','powdery_mildew','scab']\nfor x in lbls:\n    df_train[x]=0","dc6a6ab6":"def lbl_lgc(col,lbl_list):\n    if col in lbl_list:\n        res = 1 \n    else:\n        res = 0\n    return res","83da65f1":"lbls = ['healthy','complex','rust','frog_eye_leaf_spot','powdery_mildew','scab']\n\nfor x in lbls:\n    df_train[x] = np.vectorize(lbl_lgc)(x,df_train['label_list'])","083c0d88":"df_train","fa09cf48":"df_train_lbl_onehot = pd.get_dummies(df_train, columns=[\"labels\"], prefix=[\"LBL\"])","fceefff4":"df_train_lbl_onehot.columns","2603a00b":"plt.figure(figsize=(35,20))\nfig = px.parallel_categories(df_train[['healthy','complex','rust','frog_eye_leaf_spot','powdery_mildew','scab']], color=\"healthy\", color_continuous_scale=\"sunset\",\\\n                             title=\"Parallel categories plot of targets\")\nfig","c0cb53ff":"Distinct List of labels \n\n\n\n*     healthy\n*     complex\n*     rust\n*     frog_eye_leaf_spot\n*     powdery_mildew\n*     scab","f4df4669":"# Distribution of Blue Channel Values","daa5f6ff":"### Quan s\u00e1t: \nGi\u00e1 tr\u1ecb k\u00eanh m\u00e0u xanh l\u00e1 c\u00e2y c\u00f3 ph\u00e2n ph\u1ed1i \u0111\u1ed3ng \u0111\u1ec1u h\u01a1n gi\u00e1 tr\u1ecb k\u00eanh m\u00e0u \u0111\u1ecf nh\u01b0ng l\u1ec7ch ph\u1ea3i, v\u1edbi \u0111\u1ec9nh nh\u1ecf h\u01a1n. S\u1ef1 ph\u00e2n b\u1ed1 c\u0169ng c\u00f3 \u0111\u1ed9 l\u1ec7ch b\u00ean ph\u1ea3i (tr\u00e1i ng\u01b0\u1ee3c v\u1edbi m\u00e0u \u0111\u1ecf) v\u00e0 ch\u1ebf \u0111\u1ed9 l\u1edbn h\u01a1n kho\u1ea3ng 160. \u0110i\u1ec1u n\u00e0y cho th\u1ea5y r\u1eb1ng m\u00e0u xanh l\u00e1 c\u00e2y r\u00f5 n\u00e9t h\u01a1n trong nh\u1eefng h\u00ecnh \u1ea3nh n\u00e0y so v\u1edbi m\u00e0u \u0111\u1ecf, \u0111i\u1ec1u n\u00e0y c\u00f3 \u00fd ngh\u0129a, b\u1edfi v\u00ec \u0111\u00e2y l\u00e0 h\u00ecnh \u1ea3nh c\u1ee7a nh\u1eefng chi\u1ebfc l\u00e1!","64d77f11":"## Importing c\u00e1c th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft","3e65a241":"## 3D scatter plot cho \u1ea3nh v\u1edbi h\u1ec7 m\u00e0u HSV","15e12b36":"Ch\u00fang t\u00f4i s\u1ebd ki\u1ec3m tra k\u00edch th\u01b0\u1edbc c\u1ee7a 300 h\u00ecnh \u1ea3nh \u0111\u1ea7u ti\u00ean\n\nNh\u01b0 b\u1ea1n c\u00f3 th\u1ec3 th\u1ea5y b\u00ean d\u01b0\u1edbi, t\u1ea5t c\u1ea3 c\u00e1c h\u00ecnh \u1ea3nh c\u00f3 k\u00edch th\u01b0\u1edbc kh\u00e1c nhau.","34779b13":"### Quan s\u00e1t: \n\nK\u00eanh m\u00e0u xanh lam c\u00f3 s\u1ef1 ph\u00e2n b\u1ed1 \u0111\u1ed3ng \u0111\u1ec1u nh\u1ea5t trong s\u1ed1 ba k\u00eanh m\u00e0u, v\u1edbi \u0111\u1ed9 l\u1ec7ch t\u1ed1i thi\u1ec3u (l\u1ec7ch m\u1ed9t ch\u00fat sang tr\u00e1i). K\u00eanh m\u00e0u xanh lam cho th\u1ea5y s\u1ef1 thay \u0111\u1ed5i l\u1edbn gi\u1eefa c\u00e1c h\u00ecnh \u1ea3nh trong t\u1eadp d\u1eef li\u1ec7u.","f6d3fa8f":"# Ph\u00e2n ph\u1ed1i RBG (T\u1ea5t c\u1ea3 c\u00e1c gi\u00e1 tr\u1ecb k\u00eanh)","0fa22dab":"## K\u1ebft Lu\u1eadn\n\n- T\u1eadp d\u1eef li\u1ec7u kh\u00e1 kh\u00f4ng c\u00e2n b\u1eb1ng theo bi\u1ec3u \u0111\u1ed3 h\u00ecnh tr\u00f2n \u1edf tr\u00ean\n- Ch\u00fang t\u00f4i s\u1ebd ch\u1ecdn chi\u1ebfn l\u01b0\u1ee3c l\u1ea5y m\u1eabu th\u00edch h\u1ee3p \u0111\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 n\u00e0y (s\u1eed d\u1ee5ng albumentation)","f074e533":"# N\u1ed9i dung\n\n* [<font size=4>EDA<\/font>](#1)\n    * [Chu\u1ea9n b\u1ecb d\u1eef li\u1ec7u](#1.1)\n    * [M\u1ed9t s\u1ed1 \u1ea3nh v\u00ed d\u1ee5 t\u1eeb t\u1eadp d\u1eef li\u1ec7u](#1.2)\n    * [Ph\u00e2n ph\u1ed1i RBG](#1.3)\n    * [Parallel categories plot](#1.4)\n","57ec5b7a":"Ch\u00fang \u0111\u00e3 plot m\u1ed9t v\u00e0i h\u00ecnh \u1ea3nh trong training data \u1edf tr\u00ean (c\u00e1c gi\u00e1 tr\u1ecb RGB c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c nh\u00ecn th\u1ea5y b\u1eb1ng c\u00e1ch di chu\u1ed9t qua h\u00ecnh \u1ea3nh). C\u00e1c ph\u1ea7n m\u00e0u xanh l\u00e1 c\u00e2y c\u1ee7a h\u00ecnh \u1ea3nh c\u00f3 gi\u00e1 tr\u1ecb m\u00e0u xanh lam r\u1ea5t th\u1ea5p, nh\u01b0ng ng\u01b0\u1ee3c l\u1ea1i, c\u00e1c ph\u1ea7n m\u00e0u n\u00e2u c\u00f3 gi\u00e1 tr\u1ecb m\u00e0u xanh lam cao. \u0110i\u1ec1u n\u00e0y cho th\u1ea5y r\u1eb1ng c\u00e1c ph\u1ea7n m\u00e0u xanh l\u00e1 c\u00e2y (healthy) c\u1ee7a h\u00ecnh \u1ea3nh c\u00f3 gi\u00e1 tr\u1ecb m\u00e0u xanh lam th\u1ea5p, trong khi c\u00e1c ph\u1ea7n unhealthy c\u00f3 nhi\u1ec1u kh\u1ea3 n\u0103ng c\u00f3 gi\u00e1 tr\u1ecb m\u00e0u xanh lam cao. \n**\u0110i\u1ec1u n\u00e0y c\u00f3 th\u1ec3 cho th\u1ea5y r\u1eb1ng k\u00eanh m\u00e0u xanh lam c\u00f3 th\u1ec3 l\u00e0 ch\u00eca kh\u00f3a \u0111\u1ec3 ph\u00e1t hi\u1ec7n b\u1ec7nh tr\u00ean c\u00e2y tr\u1ed3ng**","52946eb1":"# Ph\u00e2n ph\u1ed1i K\u00eanh \u0110\u1ecf ","541902bc":"Histofram l\u00e0 m\u1ed9t bi\u1ec3u di\u1ec5n \u0111\u1ed3 h\u1ecda cho bi\u1ebft t\u1ea7n su\u1ea5t xu\u1ea5t hi\u1ec7n c\u1ee7a c\u00e1c gi\u00e1 tr\u1ecb m\u00e0u kh\u00e1c nhau trong h\u00ecnh \u1ea3nh. Trong kh\u00f4ng gian m\u00e0u RGB, c\u00e1c gi\u00e1 tr\u1ecb pixel n\u1eb1m trong kho\u1ea3ng t\u1eeb 0 \u0111\u1ebfn 255 trong \u0111\u00f3 0 l\u00e0 m\u00e0u \u0111en v\u00e0 255 l\u00e0 m\u00e0u tr\u1eafng. Ph\u00e2n t\u00edch bi\u1ec3u \u0111\u1ed3 c\u00f3 th\u1ec3 gi\u00fap ch\u00fang ta hi\u1ec3u \u0111\u01b0\u1ee3c ph\u00e2n b\u1ed1 \u0111\u1ed9 s\u00e1ng, \u0111\u1ed9 t\u01b0\u01a1ng ph\u1ea3n v\u00e0 c\u01b0\u1eddng \u0111\u1ed9 c\u1ee7a h\u00ecnh \u1ea3nh. B\u00e2y gi\u1edd ch\u00fang ta h\u00e3y xem bi\u1ec3u \u0111\u1ed3 c\u1ee7a m\u1ed9t m\u1eabu \u0111\u01b0\u1ee3c ch\u1ecdn ng\u1eabu nhi\u00ean t\u1eeb m\u1ed7i danh m\u1ee5c.","0de0b208":"# Chu\u1ea9n b\u1ecb d\u1eef li\u1ec7u","2c680495":"\n\n\n<!-- #### <a>\u0110\u1ebfm s\u1ed1 l\u01b0\u1ee3ng c\u00e1c labels<\/a>            -->\n### \u0110\u1ebfm s\u1ed1 l\u01b0\u1ee3ng c\u00e1c labels","5af1ee08":"### L\u1eadp bi\u1ec3u \u0111\u1ed3","ce0df1c0":"# Parallel categories plot","b8d7a73a":"## 3D scatter plot cho \u1ea3nh v\u1edbi h\u1ec7 m\u00e0u RGB\n","8be1b069":"# T\u1ea5t c\u1ea3 c\u00e1c k\u00eanh h\u1ee3p l\u1ea1i","f0cc8622":"## <a name=\"Wheat Detection\">Plant Pathology 2021 FGVC8 <\/a>\n\n#### <a name=\"About_Competition\"> Gi\u1edbi thi\u1ec7u <\/a>\n\nT\u00e1o l\u00e0 m\u1ed9t trong nh\u1eefng lo\u1ea1i c\u00e2y \u0103n qu\u1ea3 \u00f4n \u0111\u1edbi quan tr\u1ecdng nh\u1ea5t tr\u00ean th\u1ebf gi\u1edbi. B\u1ec7nh ch\u00e1y l\u00e1  l\u00e0 m\u1ed1i \u0111e d\u1ecda l\u1edbn \u0111\u1ed1i v\u1edbi n\u0103ng su\u1ea5t v\u00e0 ch\u1ea5t l\u01b0\u1ee3ng chung c\u1ee7a v\u01b0\u1eddn t\u00e1o. Quy tr\u00ecnh ch\u1ea9n \u0111o\u00e1n b\u1ec7nh tr\u00ean v\u01b0\u1eddn t\u00e1o hi\u1ec7n nay d\u1ef1a tr\u00ean vi\u1ec7c d\u00f2 t\u00ecm th\u1ee7 c\u00f4ng c\u1ee7a con ng\u01b0\u1eddi, t\u1ed1n nhi\u1ec1u th\u1eddi gian v\u00e0 chi ph\u00ed.\n\nM\u1eb7c d\u00f9 c\u00e1c m\u00f4 h\u00ecnh d\u1ef1a tr\u00ean th\u1ecb gi\u00e1c m\u00e1y t\u00ednh \u0111\u00e3 cho th\u1ea5y nhi\u1ec1u h\u1ee9a h\u1eb9n trong vi\u1ec7c x\u00e1c \u0111\u1ecbnh b\u1ec7nh th\u1ef1c v\u1eadt, nh\u01b0ng v\u1eabn c\u00f2n m\u1ed9t s\u1ed1 h\u1ea1n ch\u1ebf c\u1ea7n \u0111\u01b0\u1ee3c gi\u1ea3i quy\u1ebft. S\u1ef1 kh\u00e1c bi\u1ec7t l\u1edbn v\u1ec1 c\u00e1c tri\u1ec7u ch\u1ee9ng h\u00ecnh \u1ea3nh c\u1ee7a m\u1ed9t b\u1ec7nh \u0111\u01a1n l\u1ebb tr\u00ean c\u00e1c gi\u1ed1ng t\u00e1o kh\u00e1c nhau, ho\u1eb7c c\u00e1c gi\u1ed1ng m\u1edbi c\u00f3 ngu\u1ed3n g\u1ed1c \u0111\u01b0\u1ee3c tr\u1ed3ng tr\u1ecdt, l\u00e0 nh\u1eefng th\u00e1ch th\u1ee9c l\u1edbn \u0111\u1ed1i v\u1edbi vi\u1ec7c x\u00e1c \u0111\u1ecbnh b\u1ec7nh d\u1ef1a tr\u00ean th\u1ecb gi\u00e1c m\u00e1y t\u00ednh. Nh\u1eefng bi\u1ebfn th\u1ec3 n\u00e0y ph\u00e1t sinh do s\u1ef1 kh\u00e1c bi\u1ec7t trong m\u00f4i tr\u01b0\u1eddng ch\u1ee5p \u1ea3nh v\u00e0 t\u1ef1 nhi\u00ean, v\u00ed d\u1ee5, m\u00e0u s\u1eafc l\u00e1 v\u00e0 h\u00ecnh th\u00e1i l\u00e1, tu\u1ed5i c\u1ee7a c\u00e1c m\u00f4 b\u1ecb nhi\u1ec5m b\u1ec7nh, n\u1ec1n \u1ea3nh kh\u00f4ng \u0111\u1ed3ng nh\u1ea5t v\u00e0 \u0111\u1ed9 chi\u1ebfu s\u00e1ng kh\u00e1c nhau trong qu\u00e1 tr\u00ecnh ch\u1ee5p \u1ea3nh, v.v.\n\nPlant Pathology 2021-FGVC8 c\u00f3 t\u1eadp d\u1eef li\u1ec7u th\u00ed \u0111i\u1ec3m g\u1ed3m 3.651 h\u00ecnh \u1ea3nh RGB v\u1ec1 b\u1ec7nh l\u00e1 tr\u00ean qu\u1ea3 t\u00e1o.T\u1eadp d\u1eef li\u1ec7u ch\u1ee9a kho\u1ea3ng 23.000 h\u00ecnh \u1ea3nh RGB ch\u1ea5t l\u01b0\u1ee3ng cao v\u1ec1 c\u00e1c b\u1ec7nh tr\u00ean l\u00e1 t\u00e1o, bao g\u1ed3m m\u1ed9t t\u1eadp d\u1eef li\u1ec7u l\u1edbn v\u1ec1 b\u1ec7nh \u0111\u01b0\u1ee3c chuy\u00ean gia ch\u00fa th\u00edch. B\u1ed9 d\u1eef li\u1ec7u n\u00e0y ph\u1ea3n \u00e1nh c\u00e1c t\u00ecnh hu\u1ed1ng th\u1ef1c t\u1ebf b\u1eb1ng c\u00e1ch th\u1ec3 hi\u1ec7n c\u00e1c n\u1ec1n kh\u00f4ng \u0111\u1ed3ng nh\u1ea5t c\u1ee7a h\u00ecnh \u1ea3nh chi\u1ebfc l\u00e1 \u0111\u01b0\u1ee3c ch\u1ee5p \u1edf c\u00e1c giai \u0111o\u1ea1n tr\u01b0\u1edfng th\u00e0nh kh\u00e1c nhau v\u00e0 v\u00e0o c\u00e1c th\u1eddi \u0111i\u1ec3m kh\u00e1c nhau trong ng\u00e0y trong c\u00e1c c\u00e0i \u0111\u1eb7t m\u00e1y \u1ea3nh ti\u00eau c\u1ef1 kh\u00e1c nhau.\n                           \n\n#### <a name=\"Specific Objectives\">X\u00e1c \u0111\u1ecbnh m\u1ee5c ti\u00eau<\/a>           \n\nM\u1ee5c ti\u00eau ch\u00ednh c\u1ee7a cu\u1ed9c thi l\u00e0 ph\u00e1t tri\u1ec3n c\u00e1c m\u00f4 h\u00ecnh d\u1ef1a tr\u00ean m\u00e1y h\u1ecdc \u0111\u1ec3 ph\u00e2n lo\u1ea1i ch\u00ednh x\u00e1c m\u1ed9t h\u00ecnh \u1ea3nh l\u00e1 nh\u1ea5t \u0111\u1ecbnh t\u1eeb b\u1ed9 d\u1eef li\u1ec7u th\u1eed nghi\u1ec7m cho m\u1ed9t lo\u1ea1i b\u1ec7nh c\u1ee5 th\u1ec3 v\u00e0 x\u00e1c \u0111\u1ecbnh m\u1ed9t b\u1ec7nh ri\u00eang l\u1ebb t\u1eeb nhi\u1ec1u tri\u1ec7u ch\u1ee9ng b\u1ec7nh tr\u00ean m\u1ed9t h\u00ecnh \u1ea3nh l\u00e1 \u0111\u01a1n l\u1ebb.\n\n\n#### <a name=\"Y\u00eau c\u1ea7u\">Y\u00eau c\u1ea7u<\/a>           \n\nM\u1ee5c ti\u00eau ch\u00ednh c\u1ee7a cu\u1ed9c thi l\u00e0 ph\u00e1t tri\u1ec3n c\u00e1c m\u00f4 h\u00ecnh d\u1ef1a tr\u00ean m\u00e1y h\u1ecdc \u0111\u1ec3 ph\u00e2n lo\u1ea1i ch\u00ednh x\u00e1c m\u1ed9t h\u00ecnh \u1ea3nh l\u00e1 nh\u1ea5t \u0111\u1ecbnh t\u1eeb b\u1ed9 d\u1eef li\u1ec7u th\u1eed nghi\u1ec7m cho m\u1ed9t lo\u1ea1i b\u1ec7nh c\u1ee5 th\u1ec3 v\u00e0 x\u00e1c \u0111\u1ecbnh m\u1ed9t b\u1ec7nh ri\u00eang l\u1ebb t\u1eeb nhi\u1ec1u tri\u1ec7u ch\u1ee9ng b\u1ec7nh tr\u00ean m\u1ed9t h\u00ecnh \u1ea3nh l\u00e1 \u0111\u01a1n l\u1ebb.\n\n\n#### <a name=\"dataset_description\">M\u00f4 t\u1ea3 d\u1eef li\u1ec7u<\/a>: \n\nD\u1eef li\u1ec7u l\u01b0u gi\u1eef h\u00ecnh \u1ea3nh c\u1ee7a c\u00e2y t\u00e1o. L\u00e1 c\u00e2y kh\u1ecfe m\u1ea1nh v\u00e0 b\u1ecb nhi\u1ec5m b\u1ec7nh.\n\nFiles train.csv - d\u1eef li\u1ec7u t\u1eadp hu\u1ea5n luy\u1ec7n.\n\nImage - ID c\u1ee7a h\u00ecnh \u1ea3nh\n\nLabel - c\u00e1c l\u1edbp m\u1ee5c ti\u00eau th\u1ec3 hi\u1ec7n t\u1ea5t c\u1ea3 c\u00e1c b\u1ec7nh \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y trong h\u00ecnh \u1ea3nh. Nh\u1eefng l\u00e1 kh\u00f4ng t\u1ed1t c\u00f3 qu\u00e1 nhi\u1ec1u b\u1ec7nh \u0111\u1ec3 ph\u00e2n lo\u1ea1i b\u1eb1ng m\u1eaft th\u01b0\u1eddng s\u1ebd c\u00f3 l\u1edbp ph\u1ee9c t\u1ea1p, v\u00e0 c\u0169ng c\u00f3 th\u1ec3 c\u00f3 m\u1ed9t t\u1eadp h\u1ee3p con c\u1ee7a c\u00e1c b\u1ec7nh \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh.\n\n\nsample_submission.csv - T\u1ec7p g\u1eedi m\u1eabu \u1edf \u0111\u1ecbnh d\u1ea1ng:\n\n    1. image\n    2. labels\n\ntrain_images - t\u1eadp hu\u1ea5n luy\u1ec7n.\ntest_images - b\u1ed9 th\u1eed nghi\u1ec7m. Cu\u1ed9c thi n\u00e0y c\u00f3 m\u1ed9t b\u1ed9 th\u1eed nghi\u1ec7m \u1ea9n: ch\u1ec9 c\u00f3 ba h\u00ecnh \u1ea3nh \u0111\u01b0\u1ee3c cung c\u1ea5p \u1edf \u0111\u00e2y d\u01b0\u1edbi d\u1ea1ng m\u1eabu trong khi 5.000 h\u00ecnh \u1ea3nh c\u00f2n l\u1ea1i s\u1ebd c\u00f3 s\u1eb5n trong s\u1ed5 ghi ch\u00e9p sau khi n\u00f3 \u0111\u01b0\u1ee3c g\u1eedi.\n\nPh\u00e2n lo\u1ea1i Labels:\n*     healthy\n*     complex\n*     frog_eye_leaf_spot\n*     frog_eye_leaf_spot complex\n*     powdery_mildew\n*     powdery_mildew complex\n*     rust\n*     rust complex\n*     rust frog_eye_leaf_spot\n*     scab\n*     scab frog_eye_leaf_spot\n*     scab frog_eye_leaf_spot complex\n","0db95fd1":"### Quan s\u00e1t :\nC\u00e1c gi\u00e1 tr\u1ecb k\u00eanh m\u00e0u \u0111\u1ecf c\u00f3 v\u1ebb g\u1ea7n nh\u01b0 ph\u00e2n ph\u1ed1i chu\u1ea9n, nh\u01b0ng h\u01a1i l\u1ec7ch v\u1ec1 b\u00ean tr\u00e1i (\u0110\u1ed9 l\u1ec7ch \u00e2m). \u0110i\u1ec1u n\u00e0y cho th\u1ea5y r\u1eb1ng k\u00eanh m\u00e0u \u0111\u1ecf c\u00f3 xu h\u01b0\u1edbng t\u1eadp trung nhi\u1ec1u h\u01a1n \u1edf c\u00e1c gi\u00e1 tr\u1ecb cao h\u01a1n, v\u00e0o kho\u1ea3ng 100. C\u00f3 s\u1ef1 thay \u0111\u1ed5i l\u1edbn v\u1ec1 gi\u00e1 tr\u1ecb m\u00e0u \u0111\u1ecf trung b\u00ecnh tr\u00ean c\u00e1c h\u00ecnh \u1ea3nh.","5a65a367":"### Quan s\u00e1t: \n\nTrong s\u01a1 \u0111\u1ed3 tr\u00ean, ch\u00fang ta c\u00f3 th\u1ec3 th\u1ea5y m\u1ed1i quan h\u1ec7 gi\u1eefa t\u1ea5t c\u1ea3 6 lo\u1ea1i. \u0110\u00fang nh\u01b0 d\u1ef1 \u0111o\u00e1n, kh\u00f4ng th\u1ec3 n\u00e0o m\u1ed9t chi\u1ebfc l\u00e1 kh\u1ecfe m\u1ea1nh l\u1ea1i c\u00f3 th\u1ec3 b\u1ecb v\u1ea3y, g\u1ec9 s\u1eaft, hay nhi\u1ec1u b\u1ec7nh. Ngo\u00e0i ra, m\u1ed7i chi\u1ebfc l\u00e1 kh\u00f4ng kh\u1ecfe m\u1ea1nh \u0111\u1ec1u c\u00f3 m\u1ed9t trong c\u00e1c b\u1ec7nh v\u1ea3y, g\u1ec9 s\u1eaft ho\u1eb7c nhi\u1ec1u b\u1ec7nh. T\u1ea7n su\u1ea5t c\u1ee7a m\u1ed7i k\u1ebft h\u1ee3p c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c nh\u00ecn th\u1ea5y b\u1eb1ng c\u00e1ch di chu\u1ed9t qua plot.","4f421728":"# M\u1ed9t s\u1ed1 \u1ea3nh v\u00ed d\u1ee5 t\u1eeb t\u1eadp d\u1eef li\u1ec7u"}}