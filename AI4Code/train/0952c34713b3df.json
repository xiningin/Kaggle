{"cell_type":{"c334c1e3":"code","ffae529e":"code","cd4ec591":"code","9699aa1f":"code","5b872403":"code","311607aa":"code","a0d75106":"code","bc72c467":"code","4d41b5d5":"code","3d37d12f":"code","3c9f0754":"code","dfffc872":"code","980c409b":"code","ce976826":"code","c8a64a8e":"code","ab8b7696":"code","17d06f10":"code","de06b894":"code","b9540bd5":"markdown","b0e99f26":"markdown","dae2a98e":"markdown","2122b2c7":"markdown","93c291d3":"markdown","93a12e4d":"markdown","9c6fe8c1":"markdown","c7d66ca8":"markdown","a605117a":"markdown","c79f83d1":"markdown"},"source":{"c334c1e3":"import math, re, os\n\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nimport tensorflow as tf\nimport tensorflow.keras.layers as L\n#import efficientnet.tfkeras as efn\nimport tensorflow.keras.applications.inception_resnet_v2 as irv\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n","ffae529e":"# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","cd4ec591":"# For tf.dataset\nAUTO = tf.data.experimental.AUTOTUNE\n\n# Data access\nGCS_DS_PATH = KaggleDatasets().get_gcs_path()\n\n# Configuration\nEPOCHS = 10\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync","9699aa1f":"def append_path(pre):\n    return np.vectorize(lambda file: os.path.join(GCS_DS_PATH, pre, file))","5b872403":"sub = pd.read_csv('\/kaggle\/input\/alaska2-image-steganalysis\/sample_submission.csv')\ntrain_filenames = np.array(os.listdir(\"\/kaggle\/input\/alaska2-image-steganalysis\/Cover\/\"))","311607aa":"np.random.seed(0)\npositives = train_filenames.copy()\nnegatives = train_filenames.copy()\nnp.random.shuffle(positives)\nnp.random.shuffle(negatives)\n\njmipod = append_path('JMiPOD')(positives[:10000])\njuniward = append_path('JUNIWARD')(positives[10000:20000])\nuerd = append_path('UERD')(positives[20000:30000])\n\npos_paths = np.concatenate([jmipod, juniward, uerd])","a0d75106":"test_paths = append_path('Test')(sub.Id.values)\nneg_paths = append_path('Cover')(negatives[:30000])","bc72c467":"train_paths = np.concatenate([pos_paths, neg_paths])\ntrain_labels = np.array([1] * len(pos_paths) + [0] * len(neg_paths))","4d41b5d5":"train_paths, valid_paths, train_labels, valid_labels = train_test_split(\n    train_paths, train_labels, test_size=0.15, random_state=2020)","3d37d12f":"def decode_image(filename, label=None, image_size=(299 , 299)):\n    bits = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(bits, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.resize(image, image_size)\n    \n    if label is None:\n        return image\n    else:\n        return image, label\n\ndef data_augment(image, label=None):\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    \n    if label is None:\n        return image\n    else:\n        return image, label","3c9f0754":"train_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((train_paths, train_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .cache()\n    .repeat()\n    .shuffle(1024)\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n)\n\nvalid_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((valid_paths, valid_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE)\n    .cache()\n    .prefetch(AUTO)\n)\n\ntest_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(test_paths)\n    .map(decode_image, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE)\n)","dfffc872":"def build_lrfn(lr_start=0.00001, lr_max=0.000075, \n               lr_min=0.000001, lr_rampup_epochs=20, \n               lr_sustain_epochs=0, lr_exp_decay=.8):\n    lr_max = lr_max * strategy.num_replicas_in_sync\n\n    def lrfn(epoch):\n        if epoch < lr_rampup_epochs:\n            lr = (lr_max - lr_start) \/ lr_rampup_epochs * epoch + lr_start\n        elif epoch < lr_rampup_epochs + lr_sustain_epochs:\n            lr = lr_max\n        else:\n            lr = (lr_max - lr_min) * lr_exp_decay**(epoch - lr_rampup_epochs - lr_sustain_epochs) + lr_min\n        return lr\n    \n    return lrfn","980c409b":"with strategy.scope():\n    model = tf.keras.Sequential([\n        irv.InceptionResNetV2(include_top=False, \n                              weights='imagenet',\n                              input_shape=(299, 299, 3)),\n        L.GlobalAveragePooling2D(),\n        L.Dense(1, activation='sigmoid')\n    ])\n        \n    model.compile(\n        optimizer='adam',\n        loss = 'binary_crossentropy',\n        metrics=['accuracy']\n    )\n    model.summary()","ce976826":"lrfn = build_lrfn()\nlr_schedule = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=1)\nSTEPS_PER_EPOCH = train_labels.shape[0] \/\/ BATCH_SIZE\n\nhistory = model.fit(\n    train_dataset, \n    epochs=EPOCHS, \n    callbacks=[lr_schedule],\n    steps_per_epoch=STEPS_PER_EPOCH,\n    validation_data=valid_dataset\n)","c8a64a8e":"model.save(\"model.h5\")","ab8b7696":"def display_training_curves(training, validation, title, subplot):\n    \"\"\"\n    Source: https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu\n    \"\"\"\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","17d06f10":"display_training_curves(\n    history.history['loss'], \n    history.history['val_loss'], \n    'loss', 211)\ndisplay_training_curves(\n    history.history['accuracy'], \n    history.history['val_accuracy'], \n    'accuracy', 212)","de06b894":"sub.Label = model.predict(test_dataset, verbose=1)\nsub.to_csv('submission.csv', index=False)\nsub.head()","b9540bd5":"## TPU Strategy and other configs ","b0e99f26":"## Load label and paths","dae2a98e":"## Modelling","2122b2c7":"### Load Model into TPU","93c291d3":"## About this kernel\nI just modified a little to make this kernel: only model is changed.\n### References\n\n* [Alaska2: EfficientNet on TPUs](https:\/\/www.kaggle.com\/xhlulu\/alaska2-efficientnet-on-tpus\/comments)","93a12e4d":"## Evaluation","9c6fe8c1":"Unhide below to see helper function `display_training_curves`:","c7d66ca8":"### Start training","a605117a":"### Helper Functions","c79f83d1":"## Submission"}}