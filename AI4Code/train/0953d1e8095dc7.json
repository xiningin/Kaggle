{"cell_type":{"ab6bfdee":"code","cc4ac92c":"code","09d3e67d":"code","b152e7bb":"code","32ef84dc":"code","b10bdec0":"code","29d4aa02":"code","b86d07cd":"code","aefa6df8":"code","6accbd5e":"code","7f6b4502":"code","c7250b2c":"code","18b2766b":"code","1169b22f":"code","0bd9022b":"code","a6ebf386":"code","ecea772b":"code","09fe2ae4":"code","e2de520f":"code","a6928859":"code","8109b2f2":"code","be15ab39":"code","604d7e5b":"code","192ae86d":"code","291213f7":"code","aa0ca225":"markdown","9088177c":"markdown","a4e1b1c3":"markdown","fa6e0fa5":"markdown","689a17e2":"markdown","2936dbbf":"markdown","4fae90a2":"markdown","2ef46c70":"markdown","a44e2c11":"markdown","1bf5e3ca":"markdown","2e84c1e2":"markdown","a219d94a":"markdown","1207ac5a":"markdown","e65e88fc":"markdown"},"source":{"ab6bfdee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cc4ac92c":"data = pd.read_csv(\"..\/input\/youtube-new\/USvideos.csv\")\ndata.head()","09d3e67d":"data.columns","b152e7bb":"data.describe()","32ef84dc":"data.info()","b10bdec0":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","29d4aa02":"data.drop([\"video_id\", \"trending_date\", \"category_id\", \"tags\", \"thumbnail_link\", \"comments_disabled\", \"ratings_disabled\", \"video_error_or_removed\", \"description\"],axis=1,inplace=True)","b86d07cd":"data.info()","aefa6df8":"data.head()","6accbd5e":"data.describe()","7f6b4502":"filter1 = data.likes >= 1000000","c7250b2c":"data.likes.idxmax()","18b2766b":"data.loc[38273]","1169b22f":"filter2 = data.publish_time > \"2018-01-01T15:00:02.000Z\" \n#data.loc[:, \"channel_title\"]","0bd9022b":"data[filter1 & filter2]","a6ebf386":"channel = data[data.channel_title == \"ibighit\"]","ecea772b":"channel2 = data[data.channel_title == \"Logan Paul Vlogs\"]","09fe2ae4":"plt.figure(figsize=(15,10))\nplt.plot(channel.publish_time, channel.likes, color = \"blue\", label = \"ibighit\")\nplt.plot(channel2.publish_time, channel2.likes, color = \"green\", label = \"Logan Paul Vlogs\")\nplt.xticks(rotation= 90)\nplt.xlabel(\"Publish Time\")\nplt.ylabel(\"Like Counts\")\nplt.legend()\nplt.show()","e2de520f":"a = data.channel_title[:20]\nb = data.likes[:20]","a6928859":"plt.figure(figsize=(15,10))\nsns.barplot(x= a, y=b)\nplt.xticks(rotation= 90) # put the labels in degree of 45\nplt.xlabel('Channel Title')\nplt.ylabel('Like')\nplt.title('Like of Channel')","8109b2f2":"# Line Plot\n# kind = type of plot(barplot, scatter plot, line plot vs.), alpha = opacity\nchannel.likes.plot(kind = 'line', color = 'g',label = 'Like Counts',linewidth=1,alpha = 0.8,grid = True,linestyle = 'solid') # b = blue, g = green, r = red, c = cyan, m = magenta, y = yellow, k = black, w = white in color abbreviations\nchannel.dislikes.plot(color = 'r',label = 'Dislike Counts',linewidth=1, alpha = 0.8,grid = True,linestyle = 'solid')\nplt.legend(loc='upper left') # legend = puts label into plot\nplt.xlabel('x-axis')    # label = name of label\nplt.ylabel('y-axis')\nplt.title('Line Plot of Likes & Dislikes of ibighit') # title = title of plot\n\nplt.show()","be15ab39":"# Scatter Plot \n# x = likes, y = views\nplt.scatter(channel.likes, channel.views, color = \"red\", label = \"ibighit\", alpha = 0.5)\nplt.scatter(channel2.likes, channel2.views, color = \"blue\", label = \"ibighit\", alpha = 0.5)\nplt.xlabel(\"Like Counts\")\nplt.ylabel(\"View Counts\")\nplt.title(\"Like & View Counts of Scatter Plot\")\nplt.legend()\nplt.show()","604d7e5b":"channel.info()","192ae86d":"plt.hist(channel.views, bins = \"auto\", color = \"#86bf91\", alpha = 1.0, rwidth=0.85)  # bin = bar sayisi\nplt.xlabel(\"View Count\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Histogram\")\nplt.figure(figsize=[10,18])","291213f7":"fig = plt.figure(figsize = (15,8))\nax = fig.gca()\nchannel.hist(ax=ax, bins = \"auto\", color = \"#86bf91\", grid = False, rwidth=0.85)\nplt.show()","aa0ca225":"* Here, we learn that the index of the most liked video.","9088177c":"<a id = \"3\"><\/a><br>\n# Basic Data Analysis","a4e1b1c3":"<a id = \"1\"><\/a><br>\n# Load and Check Data","fa6e0fa5":"** Now, let's remove unnecessary columns from our data to working more efficiently \ud83d\udca1**","689a17e2":"* *We've set the axis = 1 because we want to drop the columns. If we want to drop the rows, we use axis = 0.*\n\n* *We've used the inplace operation to change directly the content of given data frame without making a copy.*","2936dbbf":"* You can use .info() method for being sure that those columns are removed. As you can see, the number of columns is decreased from 16 to 7.","4fae90a2":"<a id = \"2\"><\/a><br>\n# Variable Description\n1. video_id: unique ID number to each video\n1. trending_date: date of the video was trend\n1. title: video title\n1. channel_title: channel title\n1. category_id: ID number of a video's region\n1. publish_time: time of the video is published\n1. tags: tags about the video\n1. views: number of views of a video\n1. likes: number of likes of a video\n1. dislikes: number of dislikes of a video\n1. comment_count: number of comments about a video\n1. thumbnail_link: thumbnail link\n1. comments_disabled: comments are disabled(True) or comments are available(False) \n1. ratings_disabled: ratings are disabled(True) or ratings are available(False)\n1. video_error_or_removed: video gives error\/removed(True) or video is available(False)\n1. description: descriptions under the video","2ef46c70":"* Let's compare it with one of my favorite Youtuber","a44e2c11":"* We see the mathematical explanations about our data.","1bf5e3ca":"* Now, we know all of the informations about the most liked video.\n* I want to see the all likes and dislikes of the published videos after the 2018-01-01 of most liked video's channel's which name is **\"ibighit\"**.","2e84c1e2":"Here, we can understand from this output that; our data has 16 columns and 40949 rows.\n* bool(3): comments_disabled, ratings_disabled, video_error_or_removed \n* int64(5): category_id, views, likes, dislikes, comment_count \n* object(8): video_id, trending_date, title, channel_title, publish_time, tags, thumbnail_link, description","a219d94a":"* This output shows that the correlations between each columns. Negative ones say that there is no relationship between them, and positive ones vice versa.","1207ac5a":"# Introduction\nYouTube is an online video sharing platform which is providing a list of the top trending videos since February 2005. And this dataset has a daily record of the top trending YouTube videos in USA. \n\n**Aim**\nIn this kernel, I want to see the all likes and dislikes of the published videos after the 2018-01-01 of most liked video's channel's which name is *\"ibighit\".\n\n<font color = \"purple\">\nContent:\n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n1. [Basic Data Analysis](#3)\n","e65e88fc":"* We understand from the table that the maximum number of the likes is 5,613,827.\n\n> And I want to apply a filtering which only shows the likes at least 1 million "}}