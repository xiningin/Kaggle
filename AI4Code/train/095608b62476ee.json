{"cell_type":{"462e679a":"code","9c29d5cd":"code","c1cba3c7":"code","0f58b630":"code","743e41b8":"code","21a816a0":"code","5b7301ff":"code","2a4e9d84":"code","f5b2a0af":"code","9cb53fd0":"code","0cb27740":"code","7b4cb164":"code","037392d6":"code","ceaea018":"code","c040deb4":"code","f7be8f0d":"code","b56d3abc":"code","0ea2e715":"code","4886f5da":"code","91c95c73":"code","8c68a66b":"code","74748424":"code","a573a649":"code","9e88d076":"code","2d825aaf":"code","30d81cbf":"code","f74779cc":"code","a6aa301d":"code","3f7453ea":"code","d956507b":"code","37cf50fd":"code","ab7cf154":"code","ee0ed985":"code","3d0ae632":"code","c6010182":"code","92098bc1":"code","d396050f":"code","1cac15b9":"code","4e3417d3":"code","948b6758":"code","fc99b142":"code","df6fc470":"code","4e8fd169":"code","13a53eb9":"code","f0a2b65b":"code","82126044":"code","b361fb21":"code","bae0149c":"code","1d9a21fa":"code","eb7a1ec7":"code","32c17157":"code","dfa3bfb8":"code","4dafdd53":"code","3c92dc5d":"code","89848913":"code","0bcdd7b1":"code","7769b062":"code","03fb4df7":"code","05339d9a":"code","e52896eb":"code","b8967c00":"code","b927bb79":"code","861718e3":"code","a0bdb9d2":"code","9bc19ef2":"code","5521d9dd":"code","abfb7232":"code","e00679f6":"code","c7a94b88":"code","b90d4d4b":"code","295a1f6b":"code","d2826229":"code","b1f12377":"code","e94810b5":"code","f871782c":"code","b5d8f02f":"code","54a187f0":"code","d4dec394":"code","23ecca20":"code","d3f76e35":"code","c424fabb":"code","74cccf1d":"code","e710d627":"code","5ba8b8b3":"code","bd5d08dd":"code","4b40df29":"code","bb594600":"code","7ba78157":"code","cbbc574a":"code","41174114":"code","e94b8728":"code","92e041b1":"code","65140d28":"code","f4232dd6":"code","96850941":"code","56a3e9ba":"code","58663ba8":"code","714833ae":"code","e6014cb6":"code","5dc38523":"code","a1645439":"code","4da36acf":"code","a573deb4":"code","a2244175":"code","d4bb415a":"code","d2afed89":"code","409355dd":"code","97abcdba":"code","690f0a90":"markdown","87b07ee1":"markdown","57fd75cb":"markdown","323dda49":"markdown","f3c2ff4e":"markdown","677bf9fd":"markdown","c010d687":"markdown","649a5bee":"markdown","be8a8586":"markdown","a0f6369b":"markdown","b41923c6":"markdown","6a0f743a":"markdown","6ee66018":"markdown","8fe839c6":"markdown","91d2d5d8":"markdown","75353bcf":"markdown","f6110d17":"markdown","27f3e95a":"markdown","190fd3f8":"markdown","487d4aa0":"markdown","6fd5f4e9":"markdown","d623724f":"markdown","3d3cec47":"markdown","fd201847":"markdown","d40d2d3c":"markdown","19fb2898":"markdown","3399071d":"markdown","6420e6c9":"markdown","7b137bc7":"markdown","f6673968":"markdown","f6c03b5d":"markdown","42e257dc":"markdown","75572069":"markdown","ad063100":"markdown"},"source":{"462e679a":"# numpy \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","9c29d5cd":"# \ud30c\uc774\uc36c \ub9ac\uc2a4\ud2b8 \uc120\uc5b8\nL = [1, 2, 3, 4, 5]","c1cba3c7":"# \ud30c\uc774\uc36c 2\ucc28\uc6d0 \ub9ac\uc2a4\ud2b8(\ud589\ub82c) \uc120\uc5b8\nL2 = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]","0f58b630":"# \ud30c\uc774\uc36c list\ub97c numpy array\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4.\narr = np.array(L) # np.array([1, 2, 3, 4, 5])\narr\n# numpy array\ub97c \ub9cc\ub4dc\ub294 \ubc29\uc2dd\uc758 \ub300\ubd80\ubd84\uc740 \ud30c\uc774\uc36c \ub9ac\uc2a4\ud2b8\ub97c np.array\ub85c \ubcc0\ud658\ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4.\n# np.array.shape\uc740 np.array\uc758 \ud06c\uae30\ub97c \uc54c\ub824\uc90d\ub2c8\ub2e4.\narr.shape","743e41b8":"# 2\ucc28\uc6d0 \ub9ac\uc2a4\ud2b8\ub97c np.array\ub85c \ub9cc\ub4ed\ub2c8\ub2e4.\narr2 = np.array(L2)\narr2","21a816a0":"# arr2\uc758 \ucc28\uc6d0\narr2.ndim\n# arr2\uc758 \ud589, \uc5f4\uc758 \ud06c\uae30\narr2.shape\n# arr2\uc758 \ud589 x \uc5f4\narr2.size\n# arr2\uc758 \uc6d0\uc18c\uc758 \ud0c0\uc785. # int64 : integer + 64bits\narr2.dtype\n# arr2\uc758 \uc6d0\uc18c\uc758 \uc0ac\uc774\uc988(bytes) # 64bits = 8B\narr2.itemsize\n# itemsize * size # numpy array\uac00 \ucc28\uc9c0\ud558\ub294 \uba54\ubaa8\ub9ac \uacf5\uac04.\narr2.nbytes","5b7301ff":"# 0\uc774 5\uac1c \uc788\ub294 array\nnp.zeros(5)","2a4e9d84":"# 0\uc774 3x3\uc778 array\nnp.zeros((3, 3))","f5b2a0af":"# 1\uc774 3\uac1c \uc788\ub294 array\nnp.ones(3)","9cb53fd0":"# 1\uc774 2x2\uc778 array\nnp.ones((2, 2))","0cb27740":"# 0\ubd80\ud130 9\uae4c\uc9c0 \uc22b\uc790\ub97c \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ud55c array\nnp.arange(0, 10)","7b4cb164":"# 10\ubd80\ud130 99\uae4c\uc9c0 \uc22b\uc790\ub97c \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ud55c array\nnp.arange(10, 100)","037392d6":"# v1 = (1, 2, 3), v2 = (4, 5, 6) \ubca1\ud130 2\uac1c \uc0dd\uc131\ud558\uae30.\nv1 = np.array((1, 2, 3))\nv2 = np.array((4, 5, 6))","ceaea018":"# \ub9ac\uc2a4\ud2b8\ub85c \ub354\ud558\uae30 \uc5f0\uc0b0\ud574\ubcf4\uae30\nL = [1, 2, 3]\nL2 = [4, 5, 6]\nL + L2","c040deb4":"#  vector addition\nv1 + v2","f7be8f0d":"#  vector subtraction\nv1 - v2","b56d3abc":"# (not vector operation) elementwise multiplication\nv1 * v2","0ea2e715":"# (not vector operation) elementwise division\nv1 \/ v2","4886f5da":"# dot product\nv1 @ v2 # 1x4 + 2x5 + 3x6 = 32","91c95c73":"arr1 = np.array([[1, 2, 3],\n               [4, 5, 6]])","8c68a66b":"arr1.shape","74748424":"arr2 = np.array([7, 8, 9])#.reshape(3, 1)\narr2","a573a649":"arr2.shape","9e88d076":"# 2\uac1c\uc758 array\ub97c \ub354\ud574\ubcf4\uba74?\narr1 + arr2","2d825aaf":"# 2\uac1c\uc758 array\ub97c \uacf1\ud574\ubcf4\uba74? (**)\narr1 * arr2","30d81cbf":"# arr1\uc5d0 10\uc744 \uacf1\ud574\ubcf4\uba74?\narr1 * 10","f74779cc":"# arr1\uc744 \uc81c\uacf1\ud574\ubcf4\uba74?\narr1 * arr1","a6aa301d":"arr1 = np.array([1, 2, 3])\narr1","3f7453ea":"# \ubaa8\ub4e0 \uc6d0\uc18c\ub97c \uc5ed\uc218\ub97c \ucde8\ud558\ub824\uba74 \uc5b4\ub5bb\uac8c \ud574\uc57c\ud560\uae4c?\ndef reverse_num(number): # function definition\n    return 1 \/ number\n\nfor number in arr1:\n    print(reverse_num(number))\n    \n[reverse_num(number) for number in arr1] # list comprehension","d956507b":"1 \/ arr1 ---> lambda x : 1\/x (broadcast)","37cf50fd":"# \ubaa8\ub4e0 \uc6d0\uc18c\uc5d0 2\ub97c \ub354\ud558\ub824\uba74 \uc5b4\ub5bb\uac8c \ud574\uc57c\ud560\uae4c?\narr1 + 2 ---> lambda x : x+2 (broadcast)","ab7cf154":"import numpy as np # \ucd94\uac00\n\narr1 = np.arange(10)\narr1","ee0ed985":"# \uccab\ubc88\uc9f8 \uc6d0\uc18c\narr1[0]","3d0ae632":"# \ub9c8\uc9c0\ub9c9 \uc6d0\uc18c\narr1[-1]","c6010182":"# \uc55e\uc5d0\uc11c\ubd80\ud130 \uc6d0\uc18c 3\uac1c slicing\narr1[:3]","92098bc1":"arr2 = np.array([[1, 2, 3, 4],\n               [5, 6, 7, 8],\n               [9, 10, 11, 12]])\narr2","d396050f":"# arr2\uc758 2, 3 \uc6d0\uc18c = 7\narr2[1] # [5, 6, 7, 8]\narr2[1][2]\n\narr2[1, 2] # numpy\uac00 \uc81c\uacf5\ud558\ub294 indexing \uae30\ubc95","1cac15b9":"# arr2\uc758 \uc138\ubc88\uc9f8 columnm (3, 7, 11)\narr2[0, 2] <--> arr2[0][2]\narr2[1, 2]\narr2[2, 2]\n\narr2[:, 2] <--> [row\uc5d0 \ub300\ud55c \uc870\uac74, column\uc5d0 \ub300\ud55c \uc870\uac74] (**)\narr2[:][2] <--> arr2[:, 2](X)","4e3417d3":"# arr2\uc758 \ub450\ubc88\uc9f8 row\narr2[1, :]\narr2[1][:]","948b6758":"mask = np.array([1, 0, 0, 1, 1, 0, 0])\nmask","fc99b142":"data = np.random.randn(7, 4)\ndata","df6fc470":"data.shape","4e8fd169":"mask","13a53eb9":"# mask \ub9cc\ub4e4\uae30 == filter\nmasked = (mask == 1)\nmasked # boolean index","f0a2b65b":"data","82126044":"# \uc704\uc5d0\uc11c \uc0dd\uc131\ud55c data\uc5d0 mask\ub97c \uc801\uc6a9\ud574\ubcf8\ub2e4.\ndata[masked] # boolean mask\ub97c indexing\ud558\uba74, boolean mask\uc5d0\uc11c True\uc5d0 \ud574\ub2f9\ud558\ub294 \uc815\ubcf4\ub9cc \ub0a8\uae34\ub2e4.","b361fb21":"# \ub9c8\uc2a4\ud06c\ub97c 0\uc73c\ub85c \ubc14\uafd4\ubcf8\ub2e4.\ndata[mask == 0]","bae0149c":"# fancy indexing\uc744 \uc774\uc6a9\ud574\uc11c masking\ndata[mask > 0]","1d9a21fa":"data","eb7a1ec7":"# Q. \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\uc5d0\uc11c \uccab\ubc88\uc9f8 column\uc5d0 0\ubcf4\ub2e4 \ud070 \uc6d0\uc18c\uac00 \uc788\ub294 \ud589\uc744 \ubaa8\ub450 \ucd9c\ub825\ud558\uc138\uc694.\n\n# 1. \uccab\ubc88\uc9f8 column \ubf51\uae30\ndata[:, 0]\n\n# 2. \uccab\ubc88\uc9f8 column\uc5d0 0\ubcf4\ub2e4 \ud070\ndata[:, 0] > 0 # universal function\n\n# 3. \uccab\ubc88\uc9f8 column\uc5d0 0\ubcf4\ub2e4 \ud070 \uc6d0\uc18c\uac00 \uc788\ub294 \ud589\ndata[data[:, 0] > 0]","32c17157":"# 2\ucc28\uc6d0 data\uc5d0\uc11c \uccab\ubc88\uc9f8 column\uc5d0 0\ubcf4\ub2e4 \uc791\uc740 \uc6d0\uc18c\ub4e4\uc744 0\uc73c\ub85c \uce58\ud658\ud574\uc8fc\uc138\uc694.\n#data2 = data.copy() # \ub370\uc774\ud130 \ubcf5\uc0ac\n#data2 = data # \ub370\uc774\ud130 \uc8fc\uc18c\ub9cc \ubcf5\uc0ac\n\n# 1. \uccab\ubc88\uc9f8 column \ucc3e\uae30\ndata[:, 0]\n\n# 2. 0\ubcf4\ub2e4 \uc791\uc740 \ud589 \ucc3e\uae30\ndata[:, 0] < 0\n\n# 3. 0\ubcf4\ub2e4 \uc791\uc740 \uc6d0\uc18c \ucc3e\uae30\ndata[data[:, 0] < 0, 0] # [row\uc5d0 \ub300\ud55c \uc870\uac74, column\uc5d0 \ub300\ud55c \uc870\uac74]\n\n# 4. 0\uc73c\ub85c \uce58\ud658\ndata[data[:, 0] < 0, 0] = 0\nprint(data)","dfa3bfb8":"data[data[:,0]<0,0]\ndata[data[:,0]<0,0]=0","4dafdd53":"# \ud45c\uc900\uc815\uaddc\ubd84\ud3ec\uc5d0\uc11c random sampling\uc744 \ud55c \uc6d0\uc18c\ub97c \uac00\uc9c0\ub294 5x3 \ud589\ub82c\uc744 \ub9cc\ub4e0\ub2e4.\nmat1 = np.random.randn(5, 3)\nmat1","3c92dc5d":"# mat1\uc5d0 \uc808\ub300\uac12 \uc50c\uc6b0\uae30\nnp.abs(mat1)","89848913":"# mat1\uc758 square root(\uc81c\uacf1\uadfc) \uad6c\ud558\uae30\nnp.sqrt(mat1)","0bcdd7b1":"# mat1 \uc81c\uacf1\ud558\uae30\nnp.square(mat1)","7769b062":"# mat1\uc758 \uc9c0\uc218\uac12 \uad6c\ud558\uae30\n","03fb4df7":"# mat\uc758 log\uac12(\uc790\uc5f0\ub85c\uadf8) \uad6c\ud558\uae30\n","05339d9a":"# \uc0c1\uc6a9\ub85c\uadf8\n","e52896eb":"# \uc774\uc9c4\ub85c\uadf8\n","b8967c00":"# \ubd80\ud638\ucc3e\uae30\n","b927bb79":"# \uc62c\ub9bc\n","861718e3":"# \ub0b4\ub9bc\n","a0bdb9d2":"# \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uac12\uc774 \uc788\ub294\uc9c0 \uc5c6\ub294\uc9c0 # nan = not a number\n","9bc19ef2":"np.isnan(np.log(mat1))","5521d9dd":"np.isinf(mat1)","abfb7232":"np.sin(mat1)","e00679f6":"np.cos(mat1)","c7a94b88":"np.tan(mat1)","b90d4d4b":"np.tanh(mat1)","295a1f6b":"mat2 = np.random.randn(5, 3)\nmat2","d2826229":"np.maximum(mat1, mat2)","b1f12377":"x = np.array([[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]])\n\nx1 = np.arange(1, 10)","e94810b5":"# x1\ub97c 3x3 \ud589\ub82c\ub85c \ubcc0\ud615\ud569\ub2c8\ub2e4.\n#x1.shape (9, ) --> (3, 3)\nx1 = x1.reshape(3, 3)\n\n# x2\ub294 0\ubd80\ud130 \uc21c\uc11c\ub300\ub85c 24\uae4c\uc9c0 \uac00\uc9c0\ub294 5x5 \ud589\ub82c\uc785\ub2c8\ub2e4.\nx2 = np.arange(0, 25).reshape(5, 5) # method chaining\nx2","f871782c":"x == x1","b5d8f02f":"# (1, 2, 3)\uc744 transpose \ud574\ubd05\ub2c8\ub2e4.\nv = np.array([1, 2, 3])\nv.reshape(-1, 1) # row vector -> column vector\n# reshape\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 -1\uc744 \ud574\ub2f9 \ubd80\ubd84\uc740 \uc790\ub3d9\uc73c\ub85c \uacc4\uc0b0\ud574\uc11c \ub9de\ucdb0\ub2ec\ub77c\ub294 \ub73b.","54a187f0":"arr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\n# arr1\uc640 arr2\ub97c \ud569\uce69\ub2c8\ub2e4\n# arr1 + arr2?\narr1 + arr2","d4dec394":"# stacking vertically\nnp.vstack([arr1, arr2])","23ecca20":"# stacking horizontally\nnp.hstack([arr1, arr2])","d3f76e35":"mat1","c424fabb":"# 15\uac1c \uc22b\uc790\uc758 \ucd1d\ud569.\nnp.sum(mat1)","74cccf1d":"# \ub2e4\ub978 \ucd95\uc73c\ub85c \ub354\ud574\ubcf4\uae30\nnp.sum(mat1, axis=0) # axis=0 -> column \ubc29\ud5a5","e710d627":"# \ub2e4\ub978 \ucd95\uc73c\ub85c \ub354\ud574\ubcf4\uae30\nnp.sum(mat1, axis=1)","5ba8b8b3":"# \ud3c9\uade0\nnp.mean(mat1)","bd5d08dd":"mat3 = np.random.rand(5, 3)\nmat3","4b40df29":"np.mean(mat3)","bb594600":"np.mean(mat3, axis=0)","7ba78157":"np.mean(mat3, axis=1)","cbbc574a":"np.std(mat3) # \ud45c\uc900\ud3b8\ucc28","41174114":"np.min(mat3, axis=0)","e94b8728":"np.max(mat3, axis=1)","92e041b1":"mat3","65140d28":"# \ucd5c\uc18c\uac12\uc774 \uc788\ub294 Index (***)\nnp.argmin(mat3, axis=0)","f4232dd6":"# \ucd5c\ub300\uac12\uc774 \uc788\ub294 Index (***)\nnp.argmax(mat3, axis=1)","96850941":"np.cumsum(mat3)","56a3e9ba":"np.cumsum(mat3, axis=1) # row\ubcc4 \ub204\uc801\ud569.","58663ba8":"np.cumprod(mat3, axis=0)","714833ae":"# \uadf8\ub0e5 \uc815\ub82c\n# Q. \uc598\ub294 \uc5b4\ub5a4 \ubc29\ud5a5\uc744 \uae30\uc900\uc73c\ub85c \uc7a1\uc558\uc744\uae4c\uc694? (axis=0 or 1)\nnp.sort(mat3, axis=0)","e6014cb6":"mat3","5dc38523":"np.sort(mat3, axis=0) # \uc624\ub984\ucc28\uc21c \uc815\ub82c","a1645439":"# index\ub97c \uc815\ub82c\nnp.argsort(mat3, axis=0) # argument sorting\uc5d0\uc11c \uc815\ub82c\ub41c \uac12\uc758 \uc6d0\ub798 \uc704\uce58\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\n# \uc815\ub82c\ub41c \ub2e4\uc74c\uc758 index\ub97c \uc6d0\ub798 \uc6d0\uc18c\uc758 \uc704\uce58\uc5d0 \ud45c\uc2dc\ud574\uc90d\ub2c8\ub2e4.","4da36acf":"np.random.seed(0)\n\n# Numpy array\uc758 \uac01 \uc6d0\uc18c\uc758 \uc5ed\uc218\ub97c \ucde8\ud558\ub294 \ud568\uc218.\ndef reverse_num(values):\n    output = np.empty(len(values))\n    \n    for i in range(len(values)):\n        output[i] = 1.0 \/ values[i]\n    \n    return output\n\n# Numpy array\uc758 \ubaa8\ub4e0 \uc6d0\uc18c\uc758 \ud569\uc744 \uad6c\ud558\ub294 \ud568\uc218.\n","a573deb4":"# 1\ubd80\ud130 100\uae4c\uc9c0 \ubc94\uc704\uc5d0\uc11c 1000000\uac1c\ub97c \ub79c\ub364\uc73c\ub85c \ubf51\uc544\uc11c array\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\nbig_array = np.random.randint(1, 100, size=10000000)","a2244175":"big_array","d4bb415a":"%timeit reverse_num(big_array)","d2afed89":"%timeit 1.0 \/ big_array","409355dd":"%timeit","97abcdba":"%timeit","690f0a90":"### Q. \uc65c numpy\uac00 \ud30c\uc774\uc36c(\uc815\ud655\ud788\ub294 CPython)\uc73c\ub85c \uad6c\ud604\ud55c \ud568\uc218\ub97c \ud1b5\ud574 \ubc18\ubcf5\ubb38\uc744 \uc218\ud589\ud55c\uac83\ubcf4\ub2e4 \ube60\ub97c\uae4c?\n\nA1. \ub9e4\ubc88 \ubc18\ubcf5\ud560 \ub54c\ub9c8\ub2e4 ***\"type matching\"*** \uacfc ***\"function dispatching\"*** \uc744 \ud30c\uc774\uc36c interpreter\uac00 \uc218\ud589\ud558\uae30 \ub54c\ubb38\uc5d0 **\"performance bottleneck\"** \uc774 \uc0dd\uae41\ub2c8\ub2e4.\n\nA2.","87b07ee1":"## 2.11. Aggregation functions \n\n- \uc9d1\uacc4 \ud568\uc218(\ub370\uc774\ud130\ub97c \ud569\uce60 \ub54c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218)\n\n- mean, sum, ...","57fd75cb":"# 2. Numpy Basics ","323dda49":"- \ub9e8 \ucc98\uc74c\uc5d0\ub3c4 \ubd24\ub4ef\uc774 numpy array\ub294 \ud30c\uc774\uc36c \ub9ac\uc2a4\ud2b8\uc5d0 \ube44\ud574 \uc5f0\uc0b0\uc774 \ube60\ub985\ub2c8\ub2e4.\n> broadcast, static type binding, fixed array size, ... --> vectorize\n> \uc870\uac74 : \uc6d0\uc18c\uc758 \uac1c\uc218\uac00 \ub9ce\uc744 \ub54c.\n\n- \uc9c1\uc811 \uc2e4\ud5d8\uc744 \ud1b5\ud574 \uadf8 \ucc28\uc774\ub97c \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","f3c2ff4e":"- numpy array\ub294 \ud558\ub098\uc758 \ud568\uc218\ub97c \ubaa8\ub4e0 \uc6d0\uc18c\uc5d0 \uc790\ub3d9\uc73c\ub85c \uc801\uc6a9\ud574\uc8fc\ub294 Universal Function\uc774\ub77c\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. \uc774 \ub355\ubd84\uc5d0 \ubaa8\ub4e0 \uc6d0\uc18c\uc5d0 \ub300\ud574 \uac19\uc740 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud560 \ub54c \uc5c4\uccad\ub098\uac8c \ube60\ub978 \uc18d\ub3c4\ub97c \ub0bc \uc218 \uc788\ub2e4.","677bf9fd":"![Vector operation](..\/images\/numpy\/vector_operations.png)","c010d687":"- \ub450 \ubca1\ud130 A = (1, 2), B = (2, 1)\uc774\ub77c\uace0 \ud560 \ub54c, \ubca1\ud130\uc758 \uc5f0\uc0b0\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4.\n\nA + B = (3, 3)\n\n\nA - B = (-1, 1)\n\n\nA o B = 1x2 + 2x1 = 4 (dot product)","649a5bee":"## 2.4. Broadcast","be8a8586":"- numpy\ub294 <b>\"numerical python\"<\/b>\uc758 \uc57d\uc790\uc785\ub2c8\ub2e4.\n\n\n- numpy\ub294 \ub2e4\uc591\ud55c \uba38\uc2e0\ub7ec\ub2dd \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc5d0 \uc758\uc874\uc131\uc744 \uac00\uc9c0\uace0 \uc788\uace0, \uc77c\ubc18 \ud30c\uc774\uc36c \ub9ac\uc2a4\ud2b8\uc5d0 \ube44\ud574 \uac15\ub825\ud55c \uc131\ub2a5\uc744 \uc790\ub791\ud569\ub2c8\ub2e4.\n\n\n- python list\uc640 \ube44\uc2b7\ud55c \uac1c\ub150\uc744 numpy\uc5d0\uc11c\ub294 **numpy array**\ub77c\uace0 \ubd80\ub978\ub2e4.\n\n\n- C\uc5b8\uc5b4\uc640 JAVA\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 array\uc640 \ube44\uc2b7\ud55c \uac1c\ub150\uc774\uba70, \ub3d9\uc801 \ud560\ub2f9(dynamic type binding)\uc744 \uc9c0\uc6d0\ud558\ub294 \ud30c\uc774\uc36c\uc758 \ub9ac\uc2a4\ud2b8\uc640 \uad6c\uc870\uac00 \ub2e4\ub985\ub2c8\ub2e4.\n\n\n- Numpy\uc758 \ud2b9\uc9d5\n<br>\n<br>\n\n**1) numpy array\ub294 \ubaa8\ub4e0 \uc6d0\uc18c\uc758 \uc790\ub8cc\ud615\uc774 \ub3d9\uc77c\ud574\uc57c \ud55c\ub2e4.**\n\n(\uc544\ub798\ub294 numpy array\uac00 \uc9c0\uc6d0\ud558\ub294 data types)","a0f6369b":"**3) \uc0ac\uc2e4 numpy array\ub294 C, C++\ub85c \uad6c\ud604\uc774 \ub418\uc5b4 \uc788\ub2e4. \uc774\ub294 high performance\ub97c \ub0b4\uae30 \uc704\ud574\uc11c\uc774\uba70, python\uc774 Numerical computing\uc5d0 \ucde8\uc57d\ud558\ub2e4\ub294 \ub2e8\uc810\uc744 \ubcf4\uc644\ud55c\ub2e4.**\n\n(\uc544\ub798 \uc608\uc2dc\ub294 C\uc5b8\uc5b4\uc640 \ud30c\uc774\uc36c\uc758 \ucf54\ub4dc \ube44\uad50)","b41923c6":"![numpy_data_type](..\/images\/numpy\/numpy_datatypes.png)","6a0f743a":"- \uc11c\ub85c \ud06c\uae30\uac00 \ub2e4\ub978 numpy array\ub97c \uc5f0\uc0b0\ud560 \ub54c, \uc790\ub3d9\uc73c\ub85c \uc5f0\uc0b0\uc744 \uc804\ud30c(broadcast)\ud574\uc8fc\ub294 \uae30\ub2a5. \ud589\ub82c\uacf1 \uc5f0\uc0b0\uc744 \ud560 \ub54c \ud3b8\ub9ac\ud558\ub2e4.\n\n\n- parallel processing","6ee66018":"## 2.8. Numpy Methods ","8fe839c6":"# 1. What is Numpy?\n<small>and how to use it? <\/small>","91d2d5d8":"## 2.2 Array Initialization ","75353bcf":"**5) numpy array\ub294 universal function(through broadcast)\ub97c \uc81c\uacf5\ud558\uae30 \ub54c\ubb38\uc5d0 \uac19\uc740 \uc5f0\uc0b0 \ubc18\ubcf5\uc5d0 \ub300\ud574 \ud6e8\uc52c \ube60\ub974\ub2e4. \ub370\uc774\ud130\uc758 \ud06c\uae30\uac00 \ud074\uc218\ub85d \ucc28\uc774\uac00 \ub354 \ud06c\ub2e4.**\n\n- \uc544\ub798\ub294 big_array\ub77c\ub294 1000000\uac1c\uc758 \uc6d0\uc18c\ub97c \uac00\uc9c0\ub294 array\ub97c \ub9cc\ub4e0 \ub4a4\uc5d0 for\ubb38\uc744 \ub3cc\uba74\uc11c \uac01 \uc6d0\uc18c\ub97c \ub4a4\uc9d1\ub294 \uc5f0\uc0b0\uc744 \ud588\uc744 \ub54c\uc758 \uac78\ub9ac\ub294 \uc2dc\uac04\uacfc, numpy array\uc5d0 \uc788\ub294 UFuncs(Universal function)\uc744 \uc0ac\uc6a9\ud588\uc744 \ub54c \uac78\ub9ac\ub294 \uc2dc\uac04\uc744 \uce21\uc815\ud55c \uac83\uc774\ub2e4.\n\n\n- \uac70\uc758 1000\ubc30\uc815\ub3c4 \ucc28\uc774\uac00 \ub098\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\ub2e4.","f6110d17":"## 3. Powerful Numpy ","27f3e95a":"(python list\uc640 numpy array\uc758 \ub0b4\ubd80 \uad6c\ud604 \ube44\uad50)\n\n![Integer Memory Layout](..\/images\/numpy\/cint_vs_pyint.png)\n\n![Array Memory Layout](..\/images\/numpy\/array_vs_list.png)\n\n<small> (Source from Data Science Handbook) <\/small>","190fd3f8":"- numpy array\ub97c \ucd08\uae30\uac12\uacfc \ud568\uaed8 \uc0dd\uc131\ud558\ub294 \ubc29\ubc95\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n- \uc6d0\uc18c\uac00 0\uc778 array\ub97c \uc0dd\uc131\ud558\ub294 np.zeros()\n\n- \uc6d0\uc18c\uac00 1\uc778 array\ub97c \uc0dd\uc131\ud558\ub294 np.ones()\n\n- \ud2b9\uc815 \ubc94\uc704\uc758 \uc6d0\uc18c\ub97c \uac00\uc9c0\ub294 np.arange()","487d4aa0":"## 2.6. Indexing (same as python list, but more powerful) ","6fd5f4e9":"![speed_comparison](..\/images\/numpy\/list_vs_nparray.png)","d623724f":"## 2.3. Array Operation (like vector) --> Universal Function","3d3cec47":"## 2.1 Numpy array Creation","fd201847":"```C\n\/* C \ucf54\ub4dc *\/\nint result = 0;\nfor(int i=0; i<100; i++){\n    result += i;\n}\n```\n\n```python\n# \ud30c\uc774\uc36c \ucf54\ub4dc\nresult = 0\nfor i in range(100):\n    result += i\n```","d40d2d3c":"- numpy array\ub97c \uc4f0\ub294 \uac00\uc7a5 \ud070 \uc774\uc720\ub294 vector\ucc98\ub7fc \uc0ac\uc6a9\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n> e.g. arr1 = np.array([1, 2, 3, 4, 5]) --> (1, 2, 3, 4, 5) # vector\n\n- \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 scipy, matplotlib, scikit-learn, pandas, tensorflow, pytorch \ub4f1 \ub300\ubd80\ubd84\uc758 \ub370\uc774\ud130\ubd84\uc11d \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc774 numpy array\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n> \ub300\ubd80\ubd84\uc758 \ub370\uc774\ud130 \ubd84\uc11d \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc740 \ubca1\ud130\ub97c \uc0ac\uc6a9\ud558\ub294\ub370, \uadf8 \ubca1\ud130\uac00 \ubc14\ub85c numpy array\ub85c \ud45c\ud604\ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n\n\n- \ub370\uc774\ud130 \ubd84\uc11d\uc740 99.9% \ub370\uc774\ud130\ub97c \ubca1\ud130\ub85c \ud45c\ud604\ud558\uc5ec \ubd84\uc11d\ud558\uae30 \ub54c\ubb38\uc5d0, \uc774 \ud2b9\uc9d5\uc740 ***\uad49\uc7a5\ud788*** \uc911\uc694\ud569\ub2c8\ub2e4.\n> \ubca1\ud130 == numpy array","19fb2898":"## 2.10. Concatenation of arrays","3399071d":"**4) numpy array\uac00 python list\ubcf4\ub2e4 \ube60\ub978 \uc774\uc720 \uc911\uc5d0 \ud558\ub098\ub294 \uc6d0\uc18c\uc758 type checking\uc744 \ud560 \ud544\uc694\uac00 \uc5c6\uae30 \ub54c\ubb38\uc774\ub2e4.**\n\n(\uc544\ub798 \uc608\uc2dc\ub97c \ubcf4\uc790)","6420e6c9":"![Vector product](..\/images\/numpy\/vector_product.png)","7b137bc7":"**2) numpy array\ub294 \uc120\uc5b8\ud560 \ub54c \ud06c\uae30\ub97c \uc9c0\uc815\ud55c \ub4a4, \ubcc0\uacbd\ud560 \uc218 \uc5c6\ub2e4. list.append(), pop()\uc744 \ud1b5\ud574 \uc790\uc720\ub86d\uac8c \uc6d0\uc18c \ubcc0\uacbd \ubc0f \ud06c\uae30 \ubcc0\uacbd\uc774 \uac00\ub2a5\ud558\uc9c0\ub9cc, numpy array\ub294 \ub9cc\ub4e4\uc5b4\uc9c0\uace0 \ub098\uba74 \uc6d0\uc18c\uc758 update\ub294 \uac00\ub2a5\ud558\uc9c0\ub9cc, array\uc758 \ud06c\uae30\ub97c \ubcc0\uacbd\ud560 \uc218\ub294 \uc5c6\ub2e4.**\n\n","f6673968":"```C\n\/* C \ucf54\ub4dc *\/\nint x = 4;\nx = \"four\";  \/\/ \uc2e4\ud328\n```\n-> It is called, \"Static type binding\"\n\n\n\n```python\n# \ud30c\uc774\uc36c \ucf54\ub4dc\nx = 4\nx = \"four\"\n```\n\n-> It is called, \"Dynamic type binding\"","f6c03b5d":"- numpy\uc758 \uae30\ubcf8\uc801\uc778 \uc0ac\uc6a9\ubc95\uc5d0 \ub300\ud574\uc11c \ubc30\uc6cc\ubd05\ub2c8\ub2e4.\n\n\n- numpy\uc5d0\uc11c numpy.array\ub97c \ub9cc\ub4dc\ub294 \uc5ec\ub7ec\uac00\uc9c0 \ubc29\ubc95\uacfc \uc9c0\uc6d0\ud558\ub294 \uc5f0\uc0b0\uc790\uc5d0 \ub300\ud574\uc11c \uacf5\ubd80\ud569\ub2c8\ub2e4.","42e257dc":"## 2.9. Reshaping array","75572069":"## 2.7. Masking ","ad063100":"## 2.5. Universal Functions "}}