{"cell_type":{"09f8922f":"code","b50dd04b":"code","88b85553":"code","98260c6a":"code","41d496e0":"code","9168901f":"code","1324bc22":"code","bfc814e8":"code","09235811":"code","5207834f":"code","c23241fa":"code","05ab2bdf":"code","ef9f4dc1":"code","00925bb4":"code","e26ccac7":"code","97f0c66a":"code","3e5cc59b":"code","0ceba97e":"code","6a1dbc6f":"code","2b7172e9":"code","768de829":"code","e0466498":"code","2821abc1":"code","17160553":"code","9a2acb01":"code","647b4548":"code","c239e172":"code","95643333":"code","97e097ba":"code","2cf52fdf":"code","88bf4503":"code","90876ce5":"code","22cfef3a":"code","7099575f":"code","0e7be1ff":"code","d44b9ee3":"code","2b4a42fc":"code","32453beb":"code","0a5261ad":"code","38a3b76e":"code","4b63c6f1":"code","eb4df83d":"code","188bdff0":"code","0c8559b5":"code","edb1e8aa":"code","088fe556":"code","30e317b1":"code","7b4f746b":"code","2511edae":"code","1e99b715":"code","3976db9c":"code","af99b45b":"code","53e8186d":"code","928893cb":"code","c22a4a54":"code","95b1526a":"code","6dd4a216":"code","10d24bb1":"code","1cc12ace":"code","5196b204":"code","cf558bd5":"code","f4e2ef6f":"code","d9a9ea41":"markdown","24e57658":"markdown","f9c804d5":"markdown","9b630907":"markdown","610c5413":"markdown","4c0eae5f":"markdown","062e9249":"markdown","30e7d3e4":"markdown","64e7a4eb":"markdown","cb2a6384":"markdown","f4030cec":"markdown","c229b349":"markdown","1d8ff906":"markdown","2a88b917":"markdown","aa9abccf":"markdown","57d0ccac":"markdown","997f3100":"markdown","bf2ca9e3":"markdown","c9bb5504":"markdown","ad9ec277":"markdown","06d09acb":"markdown","eabe855d":"markdown","8dc76687":"markdown","04e6beae":"markdown","ecc64c95":"markdown","740327a1":"markdown"},"source":{"09f8922f":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport math\nimport datetime\nimport re\nimport traceback\n\nimport lightgbm as lgb\nimport xgboost as xgb\nimport matplotlib.pyplot as plt\nsns.set()","b50dd04b":"pd.options.display.max_rows = None\npd.options.display.max_columns = None","88b85553":"# import os\n# os.listdir('..')","98260c6a":"data = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv')","41d496e0":"# data.shape","9168901f":"data['ToLeft'] = data.PlayDirection == \"left\"\ndata['IsBallCarrier'] = data.NflId == data.NflIdRusher\ndata['Dir_rad'] = np.mod(90 - data.Dir, 360) * math.pi\/180.0\n\n# is that way more efficient?\ndata['TeamOnOffense'] = \"home\"\ndata.loc[data.PossessionTeam != data.HomeTeamAbbr, 'TeamOnOffense'] = \"away\"\n\ndata['IsOnOffense'] = data.Team == data.TeamOnOffense # Is player on offense?\n\ndata['YardLine_std'] = 100 - data.YardLine\ndata.loc[data.FieldPosition.fillna('') == data.PossessionTeam,  'YardLine_std'] = data.loc[data.FieldPosition.fillna('') == data.PossessionTeam, 'YardLine']\n\ndata['X_std'] = data.X\ndata.loc[data.ToLeft, 'X_std'] = 120 - data.loc[data.ToLeft, 'X'] \n\ndata['Y_std'] = data.Y\ndata.loc[data.ToLeft, 'Y_std'] = 160\/3 - data.loc[data.ToLeft, 'Y'] \n\ndata['Dir_std'] = data.Dir_rad\ndata.loc[data.ToLeft, 'Dir_std'] = np.mod(np.pi + data.loc[data.ToLeft, 'Dir_rad'], 2*np.pi)","1324bc22":"# data.select_dtypes(include='object').columns","bfc814e8":"# Cleaning team names\nteams = {'ARI':'ARZ','BAL':'BLT','CLE':'CLV', 'HOU':'HST'}\n\nfor old_name in teams:\n    new_name = teams[old_name]\n    data.replace(old_name, new_name, inplace=True)","09235811":"# Cleaning stadium names\nstadiums =  {'Broncos Stadium at Mile High':'Broncos Stadium At Mile High','CenturyLink':'CenturyLink Field',\n             'CenturyField':'CenturyLink Field','Everbank Field':'EverBank Field', 'First Energy Stadium':'FirstEnergy Stadium',\n            'FirstEnergy':'FirstEnergy Stadium','FirstEnergyStadium':'FirstEnergy Stadium', 'Lambeau field':'Lambeau Field',\n             'Los Angeles Memorial Coliesum':'Los Angeles Memorial Coliseum','M & T Bank Stadium':'M&T Bank Stadium',\n            'M&T Stadium':'M&T Bank Stadium','Mercedes-Benz Dome':'Mercedes-Benz Stadium','MetLife':'MetLife Stadium',\n            'Metlife Stadium':'MetLife Stadium','NRG':'NRG Stadium','Oakland Alameda-County Coliseum':'Oakland-Alameda County Coliseum',\n            'Paul Brown Stdium':'Paul Brown Stadium', 'Twickenham':'Twickenham Stadium'}\n\nfor old_name in stadiums:\n    new_name = stadiums[old_name]\n    data.replace(old_name, new_name, inplace=True)\n","5207834f":"# Cleaning stadium types\n\nisOpen = data['StadiumType'].str.contains('open', case=False) | data['StadiumType'].str.contains('outdoor', case=False)\nisClosed = data['StadiumType'].str.contains('closed', case=False) | data['StadiumType'].str.contains('indoor', case=False)\n\ndata.loc[isOpen,'StadiumType'] = 'Open'\ndata.loc[isClosed,'StadiumType'] = 'Closed'\n\ndata.loc[data['Stadium']==\"TIAA Bank Field\",'StadiumType'] = 'Open'\ndata.loc[data['Stadium']==\"StubHub Center\",'StadiumType'] = 'Open'\ndata.loc[data['Stadium']=='MetLife Stadium','StadiumType'] = 'Open'\n\n\nstadium_types = {\"Heinz Field\":\"Open\",\"Dome\":\"Retractable Roof\",\"Outddors\":\"Open\",\"Oudoor\":\"Open\",\n                 \"Ourdoor\":\"Open\",\"Outdor\":\"Open\",\"Outside\":\"Open\",\"Domed\":\"Closed\"}\n\nfor old_name in stadium_types:\n    new_name = stadium_types[old_name]\n    data.replace(old_name, new_name, inplace=True)","c23241fa":"# sns.violinplot(x=\"StadiumType\", y='Yards', data=data[data['Yards']<30])","05ab2bdf":"# Cleaning Location\nlocations = {'Orchard Park NY':'Orchard Park, NY','Orchard Park':'Orchard Park, NY','Chicago. IL':'Chicago, IL',\n             'Cleveland Ohio':'Cleveland, OH', 'Jacksonville Florida':'Jacksonville, FL','Pittsburgh':'Pittsburgh, PA',\n            'Detroit':'Detroit, MA','London':'London, England',\n        'Mexico City':'Mexico City, Mexico','Seattle':'Seattle, WA','Cleveland':'Cleveland, OH', 'New Orleans':'New Orleans, LA'}\n\nfor old_name in locations:\n    new_name = locations[old_name]\n    data.replace(old_name, new_name, inplace=True)\n    \nlocation = data['Location'].str.split(',', expand=True)\ndata['City'] = location[0]\ndata['State'] = location[1].str.strip()\n\nstates = {'Calif.':'CA','FLA':'FL','Fl':'FL','Fla.':'FL','Florida':'FL', 'Ind.':'IN','La.':'LA','Ma':'MA','Maryland':'MA',\n         'Md.':'MD', 'N.J.':'NJ', 'North Carolina':'NC', 'Ohio':'OH', 'Pa.':'PA','Texas':'TX'}\n\nfor old_name in states:\n    new_name = states[old_name]\n    data.replace(old_name, new_name, inplace=True)","ef9f4dc1":"# sns.boxplot(x='State',y='Yards',data=data[(data['Yards']<10) & (data['Yards']>-5)])","00925bb4":"# Cleaning WindDirection\nwind_directions = {'South':'S','North':'N','West':'W', 'East':'E','Northwest':'NW','SouthWest':'SW','Northeast':'NE','From S':'S',\n     'South Southeast':'SSE','From SW':'SW','s':'S', 'NorthEast':'NE','from W':'W', 'W-NW':'WNW','South Southwest':'SSW',\n     'Southeast':'SE','From WSW':'WSW', 'West Northwest':'WNW','From SSE':'SSE','From W':'W', 'East North East':'ENE',\n     'From ESE':'ESE','EAST':'E','East Southeast':'ESE','From SSW':'SSW','North East':'NE', 'Southwest':'SW', \n     'North\/Northwest':'NNW', 'From NNE':'NNE','N-NE':'NNE','W-SW':'WSW', 'From NNW':'NNW','West-Southwest':'WSW',\n     'Calm':'Missing','8':'Missing','1':'Missing','13':'Missing'}\n\nfor old_name in wind_directions:\n    new_name = wind_directions[old_name]\n    data.replace(old_name, new_name, inplace=True)\n    \ndata.loc[(data['WindDirection'].isna()),'WindDirection'] = 'Missing'","e26ccac7":"# Cleaning WindDirection\ndata.loc[data['WindSpeed']=='14-23','WindSpeed'] = 18\ndata.loc[data['WindSpeed']=='11-17','WindSpeed'] = 16\ndata.loc[data['WindSpeed']=='12-22','WindSpeed'] = 17\ndata.loc[data['WindSpeed']=='15 gusts up to 25','WindSpeed'] = 20\n# some WindSpeed values contains characters, so below we just extract the numbers, e.g.\"15 MPH\" will be changed to 15\ndata['WindSpeed'] = data['WindSpeed'].astype(str).str.extract('(\\d+)')[0].astype(float)","97f0c66a":"# Cleaning GameWeather\nrainy = ['Cloudy with periods of rain, thunder possible. Winds shifting to WNW, 10-20 mph.',\n         'Cloudy, 50% change of rain','Cloudy, Rain','Light Rain','Rain','Rain Chance 40%', \n         'Rain likely, temps in low 40s.', 'Rain shower', 'Rainy', 'Scattered Showers', 'Showers',]\nclear = ['Clear','Clear Skies','Clear and Cool','Clear and Sunny','Clear and cold','Clear and sunny','Clear and warm',\n         'Clear skies','Partly clear',]\nsnowy = ['Cloudy, light snow accumulating 1-3\"','Heavy lake effect snow','Snow']\nsunny = ['Mostly Sunny', 'Mostly Sunny Skies','Mostly sunny','Partly Sunny','Partly sunny','Sunny',\n 'Sunny Skies', 'Sunny and clear', 'Sunny and cold', 'Sunny and warm', 'Sunny, Windy', 'Sunny, highs to upper 80s',]\ncloudy = ['30% Chance of Rain','Cloudy', 'Cloudy and Cool', 'Cloudy and cold','Cloudy, chance of rain',\n          'Cloudy, fog started developing in 2nd quarter','Coudy','Mostly Cloudy','Mostly Coudy','Mostly cloudy',\n          'Overcast','Partly Cloudy','Partly Clouidy','Partly cloudy','Party Cloudy','Sun & clouds','cloudy']\n# other = ['Cold','Controlled Climate','Fair', 'Hazy','T: 51; H: 55; W: NW 10 mph']\n\ndata['GameWeatherGrouped'] = 'Other'\ndata.loc[data['StadiumType']=='Closed','GameWeatherGrouped'] = 'Indoor'\ndata.loc[data['GameWeather'].isin(rainy),'GameWeatherGrouped'] = 'Rainy'\ndata.loc[data['GameWeather'].isin(clear),'GameWeatherGrouped'] = 'Clear'\ndata.loc[data['GameWeather'].isin(snowy),'GameWeatherGrouped'] = 'Snowy'\ndata.loc[data['GameWeather'].isin(sunny),'GameWeatherGrouped'] = 'Sunny'\ndata.loc[data['GameWeather'].isin(cloudy),'GameWeatherGrouped'] = 'Cloudy'\n# data.loc[data['GameWeather'].isin(other),'GameWeatherGrouped'] = 'Other'","3e5cc59b":"# Cleaning Turf - add a isNatural column\ndata['isNatural'] = False\nisNatural = data['Turf'].str.contains('natural', case=False) | data['Turf'].str.contains('grass', case=False)\ndata.loc[isNatural,'isNatural'] = True\ndata.loc[isNatural,'Turf'] = 'Natural grass'\n\nturfs = {'Artifical':'Artificial','Field Turf':'FieldTurf','Field turf':'FieldTurf','FieldTurf360':'FieldTurf 360',\n        'UBU Sport Speed S5-M':'UBU Speed Series-S5-M'}\n\nfor old_name in turfs:\n    new_name = turfs[old_name]\n    data.replace(old_name, new_name, inplace=True)","0ceba97e":"# Parsing PlayerBirthDate to datetime and adding Age variable\ndata['PlayerBirthDate'] = pd.to_datetime(data['PlayerBirthDate'],format='%m\/%d\/%Y')\n\ncurrent = datetime.datetime(2019, 11, 1)\n\ndata['PlayerAge'] = (current-data['PlayerBirthDate']).apply(lambda x: int(x.days\/365))","6a1dbc6f":"# Converting player height from string in feet to centimeters\nheight_feet = data['PlayerHeight'].str.split('-',expand=True)\ndata['PlayerHeightCm'] = 30.48*height_feet[0].astype(float)+2.54*height_feet[1].astype(float)","2b7172e9":"# Converting GameClock which is relative to the quarter to TimeElapsed that is relative to the whole game\n\ngame_clock = data['GameClock'].str.split(':', expand=True)\ndata['TimeElapsed'] = data['Quarter']*15*60+game_clock[0].astype(int)*60+game_clock[1].astype(int)","768de829":"# doubt\ndata['GameClock'] = pd.to_datetime(data['GameClock'].str.slice(0,5), format='%M:%S')","e0466498":"# data.to_csv(\"train_cleaned.csv\")","2821abc1":"# data = pd.read_csv(\"train_cleaned.csv\")","17160553":"# data.shape","9a2acb01":"score_col = ['HomeScoreBeforePlay','VisitorScoreBeforePlay']","647b4548":"data['OffenseFormation'].unique()","c239e172":"offense_formations = data['OffensePersonnel'].unique()\nprint('Possible offensive positions',list(set(re.findall('[A-Z]+',offense_formations.sum()))))","95643333":"positions = ['OL', 'QB', 'RB', 'TE', 'WR', 'DL', 'DB','LB']\nnr_positions = ['Offense #'+pos for pos in positions]\n\nfor pos in nr_positions: data[pos] = 0\n\nfor formation in offense_formations:\n    pos_list = [p.strip() for p in formation.split(',')]\n#     print(pos_list)\n    df_values = np.zeros(len(positions),int)\n    for pos in pos_list:\n        for i, p in enumerate(positions):\n            if p in pos:\n                df_values[i] = pos[0]\n    if 'QB' not in formation:\n        df_values[1] = 1\n    if 'OL' not in formation:\n        df_values[0] = 11-sum(df_values)\n    data.loc[data['OffensePersonnel']==formation, nr_positions] = df_values\n#     print('Formation',formation)","97e097ba":"# data[['OffensePersonnel']+nr_positions].drop_duplicates(subset='OffensePersonnel')","2cf52fdf":"# data['FieldPosition'].unique()","88bf4503":"defense_formations = data['DefensePersonnel'].unique()\nprint('Possible defensive positions',list(set(re.findall('[A-Z]+',defense_formations.sum()))))","90876ce5":"positions = ['DL', 'OL', 'DB', 'LB']\nnr_positions = ['Defense #'+pos for pos in positions]\n\nfor pos in nr_positions: data[pos] = 0\n\nfor formation in defense_formations:\n    pos_list = [p.strip() for p in formation.split(',')]\n    df_values = np.zeros(len(positions),int)\n    for pos in pos_list:\n        for i, p in enumerate(positions):\n            if p in pos:\n                df_values[i] = pos[0]\n    data.loc[data['DefensePersonnel']==formation, nr_positions] = df_values\n#     print('Formation',formation)","22cfef3a":"# data[['DefensePersonnel']+nr_positions].drop_duplicates(subset='DefensePersonnel').head()","7099575f":"# import matplotlib.pyplot as plt\n# # plt.figure(figsize = (20,20))\n# s = data.drop_duplicates(subset='PlayId')\n# sns.stripplot(x='Offense #TE', y='Yards',data=s,jitter=.3)","0e7be1ff":"# sns.violinplot(x='Offense #TE', y='Yards',data=s,jitter=.3)","d44b9ee3":"\n# sns.stripplot(x='Defense #DL', y='Yards',data=s,jitter=.3)\n","2b4a42fc":"# sns.violinplot(x='Defense #DL', y='Yards',data=s)","32453beb":"# data.shape","0a5261ad":"# data.to_csv('train_cleaned_formations.csv', index=False)","38a3b76e":"# data[data['Yards']<0].shape[0]\/data.shape[0]","4b63c6f1":"# data['Yards'].describe()","eb4df83d":"# sns.distplot(data['Yards'])","188bdff0":"# team name of the player\ndata['TeamName'] = np.where(data['Team']=='away', data['VisitorTeamAbbr'], data['HomeTeamAbbr'])","0c8559b5":"# data.shape","edb1e8aa":"def closestOpponent(x):\n    coords = ['X_std','Y_std']\n#     get rusher index\n    rusher_ix = x[x['NflId']==x['NflIdRusher']].index[0]\n#     get rusher X and Y\n    rusher_coords = data.at[rusher_ix,'X_std'],data.at[rusher_ix,'Y_std']\n#     get coords of defensive team\n    defensive_team_coords = x[x['PossessionTeam']!=x['TeamName']][coords]\n#     get euclidean distance between each deffense team player and the rusher\n    euclideanDis = (defensive_team_coords-rusher_coords).pow(2).sum(1).pow(0.5)\n#     get minimal distance to the rusher\n    return euclideanDis.min()\n\nd = data.groupby(by='PlayId').apply(closestOpponent)\n\ndata['ClosestOpponent'] = [d[x] for x in data['PlayId']]","088fe556":"x = data['ClosestOpponent']\ny = data['Yards']\nh =plt.hist2d(x, y)\nplt.colorbar(h[3])","30e317b1":"# a = sns.jointplot(x='ClosestOpponent', y='Yards',data=data, kind='hex')","7b4f746b":"# rushers = data[data.NflId==data.NflIdRusher].copy()\n# rushers['DistRushScrimmage'] = (rushers['YardLine_std']+10-rushers['X_std']).abs()","2511edae":"# sns.distplot(rushers['DistRushScrimmage'])","1e99b715":"# rushers['DistRushScrimmage'].describe()","3976db9c":"# sns.scatterplot(x='Yards', y='DistRushScrimmage', data=rushers)","af99b45b":"# %matplotlib inline\n# import matplotlib.pyplot as plt\n# plt.figure(figsize = (30,30))\n\n# sns.heatmap(data.corr(),vmin=-1,vmax=1,center=0,annot=True)\n# # plt.show()","53e8186d":"# data['YardLine_std'].describe()","928893cb":"# data.to_csv('train_proc.csv',index=False)","c22a4a54":"from kaggle.competitions import nflrush\nenv = nflrush.make_env()","95b1526a":"import os\nos.listdir('..\/..\/kaggle')","6dd4a216":"import pandas as pd\n# data = pd.read_csv('..\/..\/kaggle\/output\/working\/train_proc.csv')\ndata = data.drop(['GameClock','PlayerBirthDate'],axis=1)","10d24bb1":"from sklearn.model_selection import GroupKFold\ncat_vars = data.select_dtypes(include='object').columns\ncont_vars = data.select_dtypes(exclude='object').columns\nprint(cat_vars)\nprint(cont_vars)\ncont_medians = {}\nfor col in cont_vars:\n    print(col)\n    data[col] = data[col].fillna(data[col].median())\n    cont_medians[col] = data[col].median()\n\nfor col in cat_vars:\n    data[col] = data[col].fillna('Missing')    \n\nfrom sklearn.preprocessing import LabelEncoder\n\nle_dict = {}\nfor col in cat_vars:\n    le = LabelEncoder()\n    le.fit(list(set(data[col].values))+['Missing'])\n    le_dict[col] = le\n    data[col] = le.transform(data[col])\n#     test[col] = le.transform(list(test[col].astype(str).values))   ","1cc12ace":"from sklearn.metrics import mean_squared_error\n\nmodels = []\ndef train_model(X, y, folds, model_type='lgb', eval_metric='auc', n_jobs=-1, n_estimators=None, plot_feature_importance=True, verbose=500,early_stopping_rounds=200):\n    result_dict = {}\n    scores = []\n    n_splits = folds.n_splits\n    columns = X.columns\n    # out-of-fold predictions on train data\n    oof = np.zeros((len(X), 1))\n    feature_importance = pd.DataFrame()\n    for fold_n, (train_index, valid_index) in enumerate(folds.split(X,y,X['GameId'])):\n        print('Fold nr {}'.format(fold_n))\n        X_train, X_valid = X[columns].iloc[train_index], X[columns].iloc[valid_index]\n        y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n        \n        model = lgb.LGBMRegressor(n_estimators=n_estimators, n_jobs = n_jobs)\n        model.fit(X_train, y_train, \n                eval_set=[(X_train, y_train), (X_valid, y_valid)], eval_metric='rmse',\n                verbose=verbose, early_stopping_rounds=early_stopping_rounds)\n        models.append(model)\n        y_pred = model.predict(X_valid)\n        rmse = np.sqrt(mean_squared_error(y_valid, y_pred))\n        oof[valid_index] = y_pred.reshape(-1, 1)\n        scores.append(rmse)\n    \n        if model_type == 'lgb' and plot_feature_importance:\n            # feature importance\n            fold_importance = pd.DataFrame()\n            fold_importance[\"feature\"] = columns\n            fold_importance[\"importance\"] = model.feature_importances_\n            fold_importance[\"fold\"] = fold_n + 1\n            feature_importance = pd.concat([feature_importance, fold_importance], axis=0)\n    \n    print('CV mean score: {0:.4f}, std: {1:.4f}.'.format(np.mean(scores), np.std(scores)))\n    \n    result_dict['oof'] = oof\n    result_dict['scores'] = scores\n    \n    if model_type == 'lgb':\n        if plot_feature_importance:\n            feature_importance[\"importance\"] \/= n_splits\n            best_features = feature_importance[[\"feature\", \"importance\"]].groupby(\"feature\").mean().sort_values(\n                by=\"importance\", ascending=False)[:50].reset_index(level=['feature'])\n\n\n            plt.figure(figsize=(16, 12));\n            sns.barplot(x=\"importance\", y=\"feature\", data=best_features);\n            plt.title('LGB Features (avg over folds)');\n            \n            result_dict['feature_importance'] = feature_importance\n            result_dict['top_columns'] = best_features['feature'].unique()\n        \n    return result_dict","5196b204":"rushers = data[data.NflId==data.NflIdRusher]","cf558bd5":"import matplotlib.pyplot as plt\nX = rushers.drop(['Yards'],axis=1)\ny = rushers['Yards']\nfolds = GroupKFold(n_splits=5)\nresults = train_model(X, y, folds, n_estimators=1000) # a, s, clos, dirstd,gamecloc, dir,orient, x, time","f4e2ef6f":"\nimport tqdm\ntest_dfs = pd.DataFrame(columns=X.columns)\nfor (test_df, sample_prediction_df) in tqdm.tqdm(env.iter_test()):\n    test_df1 = test_df.copy()\n    \n    for old_name in teams:\n        new_name = teams[old_name]\n        test_df.replace(old_name, new_name, inplace=True)\n    \n    test_df['ToLeft'] = test_df.PlayDirection == \"left\"\n    test_df['X_std'] = test_df.X\n    test_df.loc[test_df.ToLeft, 'X_std'] = 120 - test_df.loc[test_df.ToLeft, 'X'] \n    \n    test_df['Y_std'] = test_df.X\n    test_df.loc[test_df.ToLeft, 'Y_std'] = 160\/3 - test_df.loc[test_df.ToLeft, 'Y'] \n    \n    test_df['TeamName'] = np.where(test_df['Team']=='away', test_df['VisitorTeamAbbr'], test_df['HomeTeamAbbr'])\n    \n    test_df['ClosestOpponent'] = closestOpponent(test_df)\n    test_df = test_df[test_df.NflId == test_df.NflIdRusher]\n    test_df = test_df.iloc[0]\n    \n    test_df['ToLeft'] = test_df.PlayDirection == \"left\"\n    test_df['IsBallCarrier'] = test_df.NflId == test_df.NflIdRusher\n    test_df['Dir_rad'] = np.mod(90 - test_df.Dir, 360) * math.pi\/180.0\n\n    if test_df.PossessionTeam != test_df.HomeTeamAbbr:\n        test_df['TeamOnOffense'] = \"away\"\n    else:\n        test_df['TeamOnOffense'] = \"home\"\n        \n    test_df['IsOnOffense'] = test_df.Team == test_df.TeamOnOffense # Is player on offense?\n\n    \n    if test_df.FieldPosition == test_df.PossessionTeam:\n        test_df['YardLine_std'] = test_df['YardLine']\n    else:\n        test_df['YardLine_std'] = 100 - test_df.YardLine\n    \n    \n    if test_df['ToLeft']:\n#         test_df['X_std'] = 120 - test_df.loc['X'] \n#         test_df.loc['Y_std'] = 160\/3 - test_df['Y']\n        test_df['Dir_std'] = np.mod(np.pi + test_df['Dir_rad'], 2*np.pi)\n    else:\n#         test_df['X_std'] = test_df.X\n#         test_df['Y_std'] = test_df.Y\n        test_df['Dir_std'] = test_df.Dir_rad\n        \n\n    \n    if test_df.Stadium in stadiums:\n        test_df.Stadium = stadiums[test_df.Stadium]\n    elif test_df.Stadium not in data.Stadium.unique():\n        test_df.Stadium = 'Missing'\n    # Cleaning stadium types\n    try:\n        isOpen = test_df['StadiumType'].str.contains('open', case=False) | test_df['StadiumType'].str.contains('outdoor', case=False)\n        isClosed = test_df['StadiumType'].str.contains('closed', case=False) | test_df['StadiumType'].str.contains('indoor', case=False)\n        print('isOpen {} isClosed {}'.format(isOpen,isClosed))\n\n        if isOpen or test_df['Stadium']==\"TIAA Bank Field\" or test_df['Stadium']==\"StubHub Center\" or test_df['Stadium']=='MetLife Stadium':\n            test_df['StadiumType'] = 'Open'\n        elif isClosed:\n            test_df.loc['StadiumType'] = 'Closed'\n        elif test_df.StadiumType in stadium_types:\n            test_df.StadiumType = stadium_types[test_df.StadiumType]\n            \n    except Exception:\n        traceback.print_exc()\n        test_df['StadiumType'] = 'Missing'\n\n    \n    if test_df.Location in locations:\n        test_df.Location = locations[test_df.Location]\n    elif test_df.Location not in data.Location.unique():\n        test_df.Location = 'Missing'\n#         \/here\n        \n    \n    try:\n        location = test_df['Location'].split(',')\n        test_df['City'] = location[0]\n        test_df['State'] = location[1].strip()\n    except Exception:\n        traceback.print_exc()\n        test_df['City'] = 'Missing'\n        test_df['State'] = 'Missing'\n\n\n    if test_df.State in states:\n        test_df.State = states[test_df.State]\n\n    if test_df.WindDirection in wind_directions:\n        test_df.WindDirection = wind_directions[test_df.WindDirection]\n    elif test_df.WindDirection not in data.WindDirection.unique():\n        test_df.WindDirection = 'Missing'\n\n    wind_speed = {'14-23':18,'11-17':16,'12-22':17,'15 gusts up to 25':20}\n\n    if test_df.WindSpeed in wind_speed:\n        test_df.WindSpeed = wind_speed[test_df.WindSpeed]\n    else:\n        try:\n            # some WindSpeed values contains characters, so below we just extract the numbers, e.g.\"15 MPH\" will be changed to 15\n            test_df['WindSpeed'] = float(re.findall('(\\d+)',str(test_df['WindSpeed']))[0])\n        except Exception:\n            traceback.print_exc()\n            test_df['WindSpeed'] = np.nan\n            \n    if test_df.StadiumType=='Closed':\n        test_df['GameWeatherGrouped'] = 'Indoor'\n    elif test_df.GameWeather in rainy:\n        test_df['GameWeatherGrouped'] = 'Rainy'\n    elif test_df.GameWeather in clear:\n        test_df['GameWeatherGrouped'] = 'Clear'\n    elif test_df.GameWeather in snowy:\n        test_df['GameWeatherGrouped'] = 'Snowy'\n    elif test_df.GameWeather in sunny:\n        test_df['GameWeatherGrouped'] = 'Sunny'\n    elif test_df.GameWeather in cloudy:\n        test_df['GameWeatherGrouped'] = 'Cloudy'\n    else:\n        test_df['GameWeatherGrouped'] = 'Other'\n\n\n\n    isNatural = 'natural' in test_df['Turf'].lower() or 'grass' in test_df['Turf'].lower()\n    test_df['isNatural'] = isNatural\n    print(test_df.isNatural)\n    if isNatural:\n        test_df['Turf'] = 'Natural grass'\n    elif test_df.Turf in turfs:\n        test_df.Turf = turfs[test_df.Turf]\n    elif test_df.Turf not in data.Turf.unique():\n        test_df.Turf = 'Missing'\n\n    test_df['PlayerBirthDate'] = pd.to_datetime(test_df['PlayerBirthDate'],format='%m\/%d\/%Y')\n\n    test_df['PlayerAge'] = int((current-test_df['PlayerBirthDate']).days\/365)\n\n    # Converting player height from string in feet to centimeters\n    height_feet = test_df['PlayerHeight'].split('-')\n    test_df['PlayerHeightCm'] = 30.48*float(height_feet[0])+2.54*float(height_feet[1])\n\n    # Converting GameClock which is relative to the quarter to TimeElapsed that is relative to the whole game\n    game_clock = test_df['GameClock'].split(':')\n    test_df['TimeElapsed'] = test_df['Quarter']*15*60+int(game_clock[0])*60+int(game_clock[1])\n\n    # doubt\n    test_df = test_df.drop(['GameClock','PlayerBirthDate'])\n    #     test_df['GameClock'] = pd.to_datetime(test_df['GameClock'].str.slice(0,5), format='%M:%S')\n    positions = ['OL', 'QB', 'RB', 'TE', 'WR', 'DL', 'DB','LB']\n    nr_positions = ['Offense #'+pos for pos in positions]\n\n    for pos in nr_positions: test_df[pos] = 0\n    #     offense_formations = test_df['OffensePersonnel'].unique()\n    #     print('Possible offensive positions',list(set(re.findall('[A-Z]+',offense_formations.sum()))))\n    formation =test_df['OffensePersonnel']\n    pos_list = [p.strip() for p in formation.split(',')]\n    df_values = np.zeros(len(positions),int)\n    for pos in pos_list:\n        for i, p in enumerate(positions):\n            if p in pos:\n                df_values[i] = pos[0]\n    if 'QB' not in formation:\n        df_values[1] = 1\n    if 'OL' not in formation:\n        df_values[0] = 11-sum(df_values)\n    test_df[nr_positions] = df_values\n\n    #     print('Formation',formation)\n    #     defense_formations = test_df['DefensePersonnel'].unique()\n    #     print('Possible defensive positions',list(set(re.findall('[A-Z]+',defense_formations.sum()))))\n    positions = ['DL', 'OL', 'DB', 'LB']\n    nr_positions = ['Defense #'+pos for pos in positions]\n\n    for pos in nr_positions: test_df[pos] = 0 \n    formation = test_df['DefensePersonnel']\n    pos_list = [p.strip() for p in formation.split(',')]\n    df_values = np.zeros(len(positions),int)\n    for pos in pos_list:\n        for i, p in enumerate(positions):\n            if p in pos:\n                df_values[i] = pos[0]\n    test_df[nr_positions] = df_values\n\n    test_df = pd.DataFrame(test_df).transpose()\n    for col in cont_vars:\n        if col!='Yards':\n            test_df[col] = test_df[col].fillna(cont_medians[col])\n    for col in cat_vars:\n        test_df[col] = test_df[col].fillna('Missing')\n        \n    test_dfs = test_dfs.append(test_df)\n    from sklearn.preprocessing import LabelEncoder\n    for col in cat_vars:\n        try:\n            test_df[col] = le_dict[col].transform(test_df[col])\n        except Exception:\n            traceback.print_exc()\n            test_df[col] = 'Missing'\n            test_df[col] = le_dict[col].transform(test_df[col])\n    #     test[col] = le_dict[col].transform(list(test[col].astype(str).values)) \n    \n    folds = 5\n    y_pred_p = np.sum(np.round([model.predict(test_df)[0] for model in models]))\/folds\n    y_pred = np.zeros(199) \n    y_pred_p += 99\n    for j in range(199):\n        if j>=y_pred_p+10:\n            y_pred[j]=1.0\n        elif j>=y_pred_p-10:\n            y_pred[j]=(j+10-y_pred_p)*0.05\n    env.predict(pd.DataFrame(data=[y_pred],columns=sample_prediction_df.columns))\nenv.write_submission_file()\ntest_dfs.to_csv('test_dfs.csv')\n","d9a9ea41":"## TO DO\n* Check if it's more difficult to gain yardage close to the defensive team endzone\n* Prediction processing trick: Remember that the yards gained cant be more than length of the field - line of scrimmage!\n* Prediction processing trick: For rows with the same PlayId, the Yards must be the same\n* Get a better intuition what the Dis variables really is, try plotting the points\n* Try to visualize from the data what happened in the game, retrieve touchdowns, fumbles, interceptions etc. Verify it with a match, you can watch all matches on youtube https:\/\/www.youtube.com\/channel\/UCP4Wts8iiR9-Ddfq7FK0x3g\/videos\n","24e57658":"I was expecting a linear relationship but boy was I wrong","f9c804d5":"I wasn't certain about the PlayerCollegeName column so I left it intact for now. Maybe creating a variable indicating in which state the player went to college could be helpful. Position looks sort of clean. I would like to experiment by building the same models based on different positions, so for example only model based on QBs and only on TEs and so on. This would indicate which position's data is the most important.","9b630907":"## Data standardization\nSource: https:\/\/www.kaggle.com\/cpmpml\/initial-wrangling-voronoi-areas-in-python","610c5413":"It's quite cumbersome to change the type to int due to NaNs, so to avoid the trouble, I changed the type to float.","4c0eae5f":"Maybe splitting the OffensePersonnel variable into objects could improve the score. OL stands for Offensive Lineman","062e9249":"* Offensive unit<br>\n<img src=\"offensive_unit.png\" width=\"400\" align=\"left\">","30e7d3e4":"<img src=\"Compass_Rose_English_North.svg.png\" width=200 align=left>","64e7a4eb":"## Columns","cb2a6384":"## Data cleaning\n### Cleaning categorical variables","f4030cec":"There are some duplicates and typos in Location, let's fix the typos and split it into city and state","c229b349":"### Column candidates for removal\nFieldPosition indicates on which team's half the play is happening. Probably it can be deleted, but let's leave it for now. After executing the code below, the attacking team will always attack from left to right. Therefore, we can probably delete the PlayDirection column. DisplayName which is player name is also redundant for training because we already have NflId.","1d8ff906":"Each row in the file corresponds to a single player's involvement in a single play. The dataset was intentionally joined (i.e. denormalized) to make the API simple. All the columns are contained in one large dataframe which is grouped and provided by PlayId. **This dataset only contains passing plays** (https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2020\/discussion\/111935#latest-645825)\n\n* GameId - a unique game identifier\n* PlayId - a unique play identifier\n* Team - home or away\n* X - player position along the long axis of the field. See figure below.\n* Y - player position along the short axis of the field. See figure below.\n* S - speed in yards\/second\n* A - acceleration in yards\/second^2\n* Dis - distance traveled from prior time point, in yards (by that player?)\n* Orientation - orientation of player (deg)\n* Dir - angle of player motion (deg)\n* NflId - a unique identifier of the player\n* DisplayName - player's name\n* JerseyNumber - jersey number\n* Season - year of the season<br>\nThe data is gathere from two seasons: 2017\/2018 for which the value is 2017 and 2018\/19 for which the value is 2018\n* YardLine - the yard line of the line of scrimmage\n* Quarter - game quarter (1-5, 5 == overtime)\n* GameClock - time on the game clock<br>\nThe game clock starts at 15:00:00 at the beginning of every quarter and then goes until 00:00:00 when the quarter ends. Then the clock is reset to 15 mins when the new quarter starts.\n* PossessionTeam - team with possession\n* Down - the down (1-4)\n* Distance - yards needed for a first down\n* FieldPosition - which side of the field the play is happening on\n* HomeScoreBeforePlay - home team score before play started\n* VisitorScoreBeforePlay - visitor team score before play started\n* NflIdRusher - the NflId of the rushing player<br>\nRushing, on offense, is running with the ball when starting from behind the line of scrimmage with an intent of gaining yardage. While this usually means a running play, any offensive play that does not involve a forward pass is a rush - also called a run. It is usually done by the running back after a handoff from the quarterback, although quarterbacks and wide receivers can also rush. The quarterback will usually run when a passing play has broken down \u2013 such as when there is no receiver open to catch the ball \u2013 and there is room to run down the field.\n* OffenseFormation - offense formation\n* OffensePersonnel - offensive team positional grouping\n* DefendersInTheBox - number of defenders lined up near the line of scrimmage, spanning the width of the offensive line\n* DefensePersonnel - defensive team positional grouping\n* PlayDirection - direction the play is headed\n* TimeHandoff - UTC time of the handoff<br>\nIn American football, a hand-off is the act of handing the ball directly from one player to another, i. e. without it leaving the first player's hands.Most rushing plays on offense begin with a handoff from the quarterback to another running back.\n* TimeSnap - UTC time of the snap <br>\nA snap (colloquially called a \"hike\", \"snapback\", or \"pass from center\") is the backwards passing of the ballat the start of play from scrimmage.\n* Yards - the yardage gained on the play (you are predicting this)\n* PlayerHeight - player height (ft-in)\n* PlayerWeight - player weight (lbs)\n* PlayerBirthDate - birth date (mm\/dd\/yyyy)\n* PlayerCollegeName - where the player attended college\n* Position - the player's position (the specific role on the field that they typically play)\n* HomeTeamAbbr - home team abbreviation\n* VisitorTeamAbbr - visitor team abbreviation\n* Week - week into the season\n* Stadium - stadium where the game is being played\n* Location - city where the game is being player\n* StadiumType - description of the stadium environment\n* Turf - description of the field surface\n* GameWeather - description of the game weather\n* Temperature - temperature (deg F)\n* Humidity - humidity\n* WindSpeed - wind speed in miles\/hour\n* WindDirection - wind direction\n<img src=\"columns_visualization.png\">\n<img src=\"down_and_distance.png\">","2a88b917":"* Special teams","aa9abccf":"* Defensive unit<br>\n<img src=\"defensive_unit.png\" width=\"400\" align=\"left\">","57d0ccac":"There are 4 different ways of scoring:\n1. Touchdown - 6 points - the ball is carried into the endzone or thrown into the endzone and caught\n2. Extra points - after a touchdown is scored: kick through the uprights (1 point) or try to get the ball to the endzone again for 2 points (most team go for the kick)\n3. Field goal - a ball must be passed to a player who will hold the ball at the ground ready for the kicker to make a kick, a successful kick scores 3 points\n4. Safety - if the defense tackles the defensive player behind his own goal line, the defensive team gets 2 points","997f3100":"First standardize the directions according to 16-point compass rose. Then maybe make features like if player runs against the wind. However, for that we would need orientation of the stadium.","bf2ca9e3":"## Read raw data","c9bb5504":"## Data exploration","ad9ec277":"Same remarks as for offense","06d09acb":"* Fumble - when the ball carrier drops the ball on the ground, the team that recovers it gets the posession.\n* Interception - intercepting passes\n* Sack - defense tackles the quarterback while he has the ball (down is wasted)\n* Incomplete pass - when a pass touches the ground before reaching the receiver or goes out (down is wasted)\n* Penalty - after a player makes a foul his team is penalized some yards\n* Challenge - same as in tennis\n* Timeout - each team has 3 timeouts per half, each timeout lasts 60 seconds\n* Line of scrimmage - an imaginary transverse line (across the width of the football field) beyond which a team cannot cross until the next play has begun. Its location is based on the spot where the ball is placed after the end of the most recent play and following the assessment of any penalty yards.","eabe855d":"The violinplots for all three values seem roughly the same, so it does not seem that the StadiumType variables will be very helpful","8dc76687":"## Rules\n* The offence is given 4 chances (or 4 downs) to make at least 10 yards. If they do so, they retain the possesion and have another 4 chances to move 10 yards. Otherwise, the defending team gets the ball at that point\n\nEach team usually consists of 3 units","04e6beae":"In 11% of plays the offensive team looses yards instead of gaining","ecc64c95":"https:\/\/www.data-to-viz.com\/caveat\/overplotting.html","740327a1":"## Read processed data"}}