{"cell_type":{"7790c6f5":"code","37d71183":"code","88bffefe":"code","412ad02e":"code","b9a78fed":"code","8ff7b62e":"code","c9cfcf48":"code","b1b0de25":"code","f4f2f6b0":"markdown","b847f001":"markdown","30a7c07f":"markdown","14734bb1":"markdown","79a71583":"markdown","613c67e5":"markdown","b6faf2d3":"markdown","6b2ae52f":"markdown","6638cd88":"markdown","b5df6f72":"markdown"},"source":{"7790c6f5":"! pip -q install transformers","37d71183":"from transformers import BlenderbotTokenizer, BlenderbotForConditionalGeneration\nimport torch\n\nmodel = BlenderbotForConditionalGeneration.from_pretrained(\"facebook\/blenderbot-400M-distill\")\ntokenizer = BlenderbotTokenizer.from_pretrained(\"facebook\/blenderbot-400M-distill\")\n\nprint(\"Type \\\"q\\\" to quit\")\nwhile True:\n    message = input(\"MESSAGE: \")\n    if message in [\"\", \"q\", \"quit\"]:\n        break\n    inputs = tokenizer([message], return_tensors='pt')\n    reply_ids = model.generate(**inputs)\n    print(f\"BOT:     {tokenizer.batch_decode(reply_ids, skip_special_tokens=True)[0]}\")","88bffefe":"!pip -q install --upgrade chaipy\n\nimport chai_py\nchai_py.setup_notebook()","412ad02e":"from chai_py.auth import set_auth\n\nDEV_UID = input(\"Enter dev UID: \")\nDEV_KEY = input(\"Enter dev key: \")\nset_auth(DEV_UID, DEV_KEY)","b9a78fed":"%%write_and_run bot bot.py Bot\nimport json, requests, time\nfrom chai_py import ChaiBot, Update\n\n\nclass Bot(ChaiBot):\n    def setup(self): \n        self.apiToken = \"<YOUR API_TOKEN GOES HERE>\"  # put your huggingface API token here\n        self.model = \"facebook\/blenderbot-400M-distill\" # You can change this\n\n        self.ENDPOINT = f\"https:\/\/api-inference.huggingface.co\/models\/{self.model}\"\n        self.headers = {\"Authorization\": f\"Bearer {self.apiToken}\"}\n        self.first_response = \"Hey!\"\n\n    async def on_message(self, update: Update) -> str:\n        if update.latest_message.text == self.FIRST_MESSAGE_STRING:\n            return self.first_response\n        payload = await self.get_payload(update)\n        return self.query(payload)\n\n    def query(self, payload):\n        data = json.dumps(payload)\n        response = requests.post(self.ENDPOINT, headers=self.headers, data=data)\n        if response.status_code == 503: # This means we need to wait for the model to load \ud83d\ude34.\n            estimated_time = response.json()['estimated_time']\n            time.sleep(estimated_time)\n            self.logger.info(f\"Sleeping for model to load: {estimated_time}\")\n            data = json.loads(data)\n            data[\"options\"] = {\"use_cache\": False, \"wait_for_model\": True}\n            data = json.dumps(data)\n            response = requests.post(\n                self.ENDPOINT,\n                headers=self.headers,\n                data=data\n            )\n        return json.loads(response.content.decode(\"utf-8\"))[\"generated_text\"]\n\n    async def get_payload(self, update):\n        messages = await self.get_messages(update.conversation_id)\n        past_user_inputs = [\"Hey\"] # You can change this!\n        generated_responses = [self.first_response]\n        for message in messages:\n            content = message.content\n            if content == self.FIRST_MESSAGE_STRING:\n                continue\n            if message.sender_uid == self.uid:\n                # Put the user's messages into past_user_inputs\n                past_user_inputs.append(content)\n            else:\n                # Put the model generated messages into here\n                generated_responses.append(content) \n        return {\n            \"inputs\": {\n                \"past_user_inputs\": past_user_inputs,\n                \"generated_responses\": generated_responses,\n                \"text\": update.latest_message.text,\n            },\n        }\n","8ff7b62e":"from chai_py import package, Metadata, upload_and_deploy, wait_for_deployment, share_bot\n\npackage(\n    Metadata(\n        name=\"Blenderbot Tutorial\",\n        image_url=\"https:\/\/i.imgur.com\/vs0uUfD.png\",\n        color=\"0000ff\",\n        description=\"Hey! Come chat with me\",\n        input_class=Bot,\n        developer_uid=DEV_UID,\n        memory=3000,\n    )\n)\n\nbot_uid = upload_and_deploy(\"bot\/_package.zip\")","c9cfcf48":"wait_for_deployment(bot_uid)","b1b0de25":"share_bot(bot_uid)","f4f2f6b0":"Head over to the [Chai Dev Platform](https:\/\/chai.ml\/dev\/?utm_source=kaggle&utm_medium=social&utm_campaign=kaggle) to set up your developer account. This allows us to deploy the bot under our own account\n\nYour developer ID and keys can be found at the bottom of the [dev page](https:\/\/chai.ml\/dev\/?utm_source=kaggle&utm_medium=social&utm_campaign=kaggle)","b847f001":"## Trying out the bot\n\nHere's an example conversation:\n<img src=\"https:\/\/i.imgur.com\/BoM0eR8.png\" width=\"675\">\n\nTo try it out ourself, we can use HuggingFace's Transformers module:","30a7c07f":"# Deploying the chatbot to Chai\n\n<img src=\"https:\/\/i.imgur.com\/IjZ12pt.png\" width=\"450\">\n\nChai's mobile app allows us to show off the bot really easily, no need to whip out your laptop and fire up a kaggle instance!\n\nThere's also a bot leaderboard to climb. We can see how our new bot compares to others on the platform:\n\n<img src=\"https:\/\/i.imgur.com\/ctPYQVZ.png\" width=\"800\">","14734bb1":"### Setting up the notebook","79a71583":"## Success \ud83c\udf89\nScan the QR code above with your phone and you will be taken to a chat screen with your brand new bot, how cool is that?!\n\n(Make sure you have the Chai app installed on your phone, get it on the [App store](https:\/\/apps.apple.com\/us\/app\/chai\/id1544750895) or [Google Play](https:\/\/play.google.com\/store\/apps\/details?id=com.Beauchamp.Messenger.external&pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1))\n\n# Conclusion\n\nAnd thats it! You now have your very own chatbot \ud83d\ude04\n\n**More tutorials:**\n- **[Chai docs](https:\/\/chai.ml\/docs\/?utm_source=kaggle&utm_medium=social&utm_campaign=kaggle) creating your first bot**\n- **[Google Colab tutorial on training a Rick & Morty chatbot on custom dialogue](https:\/\/colab.research.google.com\/drive\/1o5LxBspm-C28HQvXN-PRQavapDbm5WjG?usp=sharing)**\n- **[Making a Rock Paper Scissors bot](https:\/\/www.kaggle.com\/rsedlr\/making-a-rock-paper-scissors-ai-chatbot-with-chai)**","613c67e5":"# Deploying a pretrained chatbot on Chai\n\n<img src=\"https:\/\/i.imgur.com\/c08FbQN.png\" width=\"275\">\n\nThis tutorial will cover deploying the bot to [Chai](https:\/\/chai.ml\/?utm_source=kaggle&utm_medium=social&utm_campaign=kaggle), a platform for creating and interacting with conversational AI's. It will allow us to chat with our bot through a mobile app. We will also be able to see performance stats and watch it climb the Chai bot leaderboard.\n\nBy the end of this tutorial you will have your very own chatbot, like the one pictured above \ud83d\ude0e","b6faf2d3":"Pretty cool right?\n\n","6b2ae52f":"### Chai bot code\n\nThis is the code that will run whenever a user messages our bot.\n\nAny model on huggingface can be used. To change our bot to another model, change the `self.model` url.\nYou can also add to the `past_user_inputs` to change the bot's starting context. This changes how the bot will act when the conversation starts.\n\nBefore we run this, head over to [huggingface.co](https:\/\/huggingface.co\/) and create an account. Go to the top right corner to access your [settings](https:\/\/huggingface.co\/settings\/profile), where you will find your [API Tokens](https:\/\/huggingface.co\/settings\/token). Copy this and paste it in the line that says `<YOUR API_TOKEN GOES HERE>`","6638cd88":"# Finding a chatbot\n\nWe can use [huggingface \ud83e\udd17](http:\/\/huggingface.co\/) for this. It's home to hundreds of state-of-the-art NLP models.\nWe're going to use Facebook's Blenderbot for this tutorial as it's one of the best around at the moment. It learns from the conversation and gets smarter as you chat!","b5df6f72":"## Time to deploy the bot!\n\nYou can change the `name`, `image_url` and `description` to personalise how the bot will appear on the platform"}}