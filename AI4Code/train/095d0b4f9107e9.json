{"cell_type":{"64c65d91":"code","293739c7":"code","0e792c8e":"code","165c394b":"code","3914bb5a":"code","1456147d":"code","d37ec9ae":"code","34d3cfd0":"code","7cea236c":"code","197dac05":"code","0489a5c5":"code","d2516d20":"code","9326d179":"code","754b6077":"code","b005b749":"code","0abb1d89":"code","28396f38":"code","4f0affc5":"code","e12787cf":"code","9f6ffcb6":"code","5eef1e10":"markdown","3541c8df":"markdown","a89c63a8":"markdown","b5f6563c":"markdown","b988fe07":"markdown","8a5697ba":"markdown","c467490d":"markdown","b3215873":"markdown","131d39ff":"markdown","b150e016":"markdown","d7823bff":"markdown","62b85222":"markdown","2b34dd48":"markdown","c0bbf0fc":"markdown","327fda51":"markdown","3e574f08":"markdown","7d120ade":"markdown","67a1d163":"markdown","e6240493":"markdown","8a11c81f":"markdown"},"source":{"64c65d91":"import pandas as pd\nimport numpy as np\nimport sys\nimport matplotlib.pylab as plt\nimport seaborn as sns\nfrom sklearn.decomposition import PCA\nfrom gensim.test.utils import common_texts, get_tmpfile\nfrom gensim.models import Word2Vec","293739c7":"INPUT_DIR = '..\/input\/epitope-prediction'\nbcell = pd.read_csv(f'{INPUT_DIR}\/input_bcell.csv')\nsars = pd.read_csv(f'{INPUT_DIR}\/input_sars.csv')\ncovid = pd.read_csv(f'{INPUT_DIR}\/input_covid.csv')\nbcell_sars = pd.concat([bcell, sars], axis=0, ignore_index=True)\nbcell_sars.head()","0e792c8e":"np.sum(bcell_sars.isnull())","165c394b":"# create length columns\nfor df in [bcell, sars, covid, bcell_sars]:\n    df[\"length\"] = df[\"end_position\"] - df[\"start_position\"] + 1","3914bb5a":"import lightgbm as lgb\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.metrics import roc_auc_score","1456147d":"params = {'task': 'train',\n        'boosting_type': 'gbdt',\n        'objective': 'binary',\n        'metric': {'auc'},\n        \"verbosity\":-1,\n        \"seed\":0,\n        \"bagging_freq\": 3,\n        \"min_child_samples\": 5,\n        \"bagging_fraction\" : 0.632,\n        \"feature_fraction\" : 0.632\n         }","d37ec9ae":"kf = GroupKFold(n_splits = 5)\noof = np.zeros(len(bcell))\npreds = np.zeros(len(sars))\nfeature_importance = pd.DataFrame()\nfeature_columns = [\"chou_fasman\",\"emini\",\"kolaskar_tongaonkar\",\"parker\",\"length\",\"isoelectric_point\",\"aromaticity\",\"hydrophobicity\",\"stability\"]\ntarget = \"target\"\nfor i,(train_index,valid_index) in enumerate(kf.split(bcell[feature_columns],bcell[\"target\"],bcell[\"parent_protein_id\"])):\n    train_x = bcell.loc[train_index][feature_columns].values\n    train_y = bcell.loc[train_index][target].values\n    valid_x = bcell.loc[valid_index][feature_columns].values\n    valid_y = bcell.loc[valid_index][target].values\n    train_data = lgb.Dataset(train_x, label = train_y)\n    valid_data = lgb.Dataset(valid_x, label = valid_y)\n    model = lgb.train(params, train_data, valid_sets = [valid_data], verbose_eval=20,num_boost_round=500,early_stopping_rounds=50) \n    oof[valid_index] = model.predict(valid_x)\n    preds += model.predict(sars[feature_columns].values)\/kf.n_splits\n    feature_importance[\"feature\"] = feature_columns\n    feature_importance[\"importance\"+str(i)] = model.feature_importance()\nroc_auc_score(bcell[\"target\"],oof)","34d3cfd0":"select = [i != \"feature\" for i in feature_importance.columns]\nselect = feature_importance.columns[select]\nfeature_importance[select] = feature_importance[select]\/feature_importance[select].sum()\nfeature_importance[\"importance\"] = feature_importance.select_dtypes(include=[np.number]).mean(axis=1)\nsns.barplot(x=\"importance\", y=\"feature\", data=feature_importance.sort_values(by=\"importance\", ascending=False));\nplt.title('GBDT Features (avg over folds)');","7cea236c":"from sklearn.metrics import accuracy_score, classification_report\nprint(\"Accuracy:\", accuracy_score(sars[\"target\"].values, np.int32(preds >= 0.5)))\nprint(classification_report(sars[\"target\"].values, np.int32(preds >= 0.5)))","197dac05":"idx_train = bcell_sars['target'].astype(\"bool\").values\nfig, axes = plt.subplots(1, 2,figsize=(14,4))\nname = [\"label\", \"predict\"]\nfor i, tar in enumerate([sars[\"target\"], preds]):\n    sns.distplot(tar,ax = axes[i])\n    axes[i].set_xlabel(name[i],fontsize=12)","0489a5c5":"params = {'task': 'train',\n        'boosting_type': 'gbdt',\n        'objective': 'binary',\n        'metric': {'auc'},\n        \"verbosity\":-1,\n        \"seed\":0,\n        \"bagging_freq\": 3,\n        \"min_child_samples\": 5,\n        \"bagging_fraction\" : 0.632,\n        \"feature_fraction\" : 0.632\n         }","d2516d20":"kf = GroupKFold(n_splits = 5)\noof = np.zeros(len(bcell_sars))\npreds = np.zeros(len(covid))\nfeature_importance = pd.DataFrame()\nfeature_columns = [\"chou_fasman\",\"emini\",\"kolaskar_tongaonkar\",\"parker\",\"length\",\"isoelectric_point\",\"aromaticity\",\"hydrophobicity\",\"stability\"]\ntarget = \"target\"\nfor i,(train_index,valid_index) in enumerate(kf.split(bcell_sars[feature_columns],bcell_sars[\"target\"],bcell_sars[\"parent_protein_id\"])):\n    train_x = bcell_sars.loc[train_index][feature_columns].values\n    train_y = bcell_sars.loc[train_index][target].values\n    valid_x = bcell_sars.loc[valid_index][feature_columns].values\n    valid_y = bcell_sars.loc[valid_index][target].values\n    train_data = lgb.Dataset(train_x, label = train_y)\n    valid_data = lgb.Dataset(valid_x, label = valid_y)\n    model = lgb.train(params, train_data, valid_sets = [valid_data], verbose_eval=20,num_boost_round=500,early_stopping_rounds=50) \n    oof[valid_index] = model.predict(valid_x)\n    preds += model.predict(covid[feature_columns].values)\/kf.n_splits\n    feature_importance[\"feature\"] = feature_columns\n    feature_importance[\"importance\"+str(i)] = model.feature_importance()\nroc_auc_score(bcell_sars[\"target\"],oof)","9326d179":"select = [i != \"feature\" for i in feature_importance.columns]\nselect = feature_importance.columns[select]\nfeature_importance[select] = feature_importance[select]\/feature_importance[select].sum()\nfeature_importance[\"importance\"] = feature_importance.select_dtypes(include=[np.number]).mean(axis=1)\nsns.barplot(x=\"importance\", y=\"feature\", data=feature_importance.sort_values(by=\"importance\", ascending=False));\nplt.title('GBDT Features (avg over folds)');","754b6077":"covid[\"target\"] = preds\ncovid.to_csv(\"sub.csv\",index=False)","b005b749":"sns.distplot(covid[\"target\"])\nplt.show()","0abb1d89":"idx_train = bcell_sars['target'].astype(\"bool\").values\nfig, axes = plt.subplots(2, 2,figsize=(16,8))\naxes = [x for a in axes for x in a]\nfor i,name in enumerate([\"chou_fasman\",\"emini\",\"kolaskar_tongaonkar\",\"parker\"]):\n    value = bcell_sars[name]\n    sns.distplot(value[~idx_train],ax = axes[i])\n    sns.distplot(value[idx_train],ax = axes[i])\n    axes[i].set_xlabel(name,fontsize=12)\n    fig.legend(labels = [\"target 0\",\"target 1\"],loc=\"right\",fontsize=12)","28396f38":"clf = PCA(n_components=2)\nz = clf.fit_transform(bcell_sars[[\"chou_fasman\",\"emini\",\"kolaskar_tongaonkar\",\"parker\"]])\nplt.figure(figsize=(8, 6))\nplt.scatter(*z[idx_train].T,s = 3)\nplt.scatter(*z[~idx_train].T,s = 3)\nplt.legend(labels=[\"target_1\",\"target_0\"],fontsize=12)\nplt.show()","4f0affc5":"idx_train = bcell_sars['target'].astype(\"bool\").values\nfig, axes = plt.subplots(2, 2,figsize=(16,8))\naxes = [x for a in axes for x in a]\nfor i,name in enumerate([\"isoelectric_point\", \"aromaticity\", \"hydrophobicity\", \"stability\"]):\n    value = bcell_sars[name]\n    sns.distplot(value[~idx_train],ax = axes[i])\n    sns.distplot(value[idx_train],ax = axes[i])\n    axes[i].set_xlabel(name,fontsize=12)\n    fig.legend(labels = [\"target 0\",\"target 1\"],loc=\"right\",fontsize=12)","e12787cf":"clf = PCA(n_components=2)\nz = clf.fit_transform(bcell_sars[[\"isoelectric_point\", \"aromaticity\", \"hydrophobicity\", \"stability\"]])\nplt.figure(figsize=(8, 6))\nplt.scatter(*z[idx_train].T,s = 3)\nplt.scatter(*z[~idx_train].T,s = 3)\nplt.legend(labels=[\"target_1\",\"target_0\"],fontsize=12)\nplt.show()","9f6ffcb6":"fig, ax = plt.subplots(figsize=(12,6))\nsns.countplot(bcell_sars[\"length\"],ax=ax,color = \"lightblue\")\nsns.countplot(bcell_sars.query(\"target == 1\")[\"length\"],ax=ax,color = \"coral\")\nplt.legend(labels = [\"target 0\",\"target 1\"],fontsize=12)\nplt.show()","5eef1e10":"We find:\n\n- Almost of the length of peptides are within 5 to 20 length.\n- The longest length of sequence is 393, and the shortest length is 5.\n- The number of `target: 1` is larger than that of `target: 0`.","3541c8df":"## Look classification results","a89c63a8":"# Task2: Covid-19 prediction with B-cell and SARS data\n\n## Employed features\n\n- peptide's length: each peptide have different sequence which is part of parent protein sequence, but using sequence data for prediction is not so easy that we use sequence length instead of that.\n- chou_fasman: one of peptide features.\n- emini: one of peptide features.\n- kolaskar_tongaonkar: one of peptide features.\n- parker: one of peptide features.\n- isoelectric_point: one of protein features.\n- aromacity: one of protein features.\n- hydrophobicity: one of protein features.\n- stability: one of protein features.\n\n## Used model\n\n- Gradient Boosting (LightGBM)","b5f6563c":"## Train model","b988fe07":"We find:\n\n- There are no significant difference between `target 0` and `target 1` in 4 peptide features in terms of difference of distribution.\n\nNow, we will also eliminate feature dimention via PCA as below:\n","8a5697ba":"## Load datasets and Quick Look","c467490d":"# Exploratory Data Analysis (EDA)","b3215873":"## Look feature importance","131d39ff":"## Length","b150e016":"# Preparation\n\n## Load libraries","d7823bff":"# Introduction\nSample code for Tasks 1 and 2 is shown below.","62b85222":"We find:\n\n- The feature value of peptides are largely follow normal distribution except for `emini` which contain outlier.\n- There are no significant difference between `target: 0` and `target: 1` in 4 peptide feature in terms of difference of distribution.\n\nNow, we will eliminate feature dimention via PCA as below:","2b34dd48":"# Task1: SARS Prediction with B-cell Data \n\n## Employed features\n\n- peptide's length: each peptide have different sequence which is part of parent protein sequence, but using sequence data for prediction is not so easy that we use sequence length instead of that.\n- chou_fasman: one of peptide features.\n- emini: one of peptide features.\n- kolaskar_tongaonkar: one of peptide features.\n- parker: one of peptide features.\n- isoelectric_point: one of protein features.\n- aromacity: one of protein features.\n- hydrophobicity: one of protein features.\n- stability: one of protein features.\n\n## Used model\n\n- Gradient Boosting (LightGBM)","c0bbf0fc":"## Peptide feature","327fda51":"## Visualization with histgram","3e574f08":"This data set has many columns to display them all:\n\n```\n# tuple(map(len, [bcell_sars.columns, bcell_sars]))\n# (columns, rows)\n# (14, 14907)\n```\n\nAlso, this data contain sequence information including peptide and protein. These data size is:\n\n```\n# bcell_sars.peptide_seq.nunique(), bcell_sars.protein_seq.nunique()\n# (the number of unique peptide , the number of unique protein)\n# (14841, 758)\n```","7d120ade":"## Train model","67a1d163":"## Protein feature","e6240493":" We find:\n\n<!-- - There is little duplication in column `peptide_seq`, but are in `parent_protein_id` and `protein_seq`. -->\n\n- Each row contain information of parent protein, peptide(candidate), and antibody titer.\n- The protein ID linked to the protein sequence.\n- Length of the peptide sequence is differ from one to another.\n- There is no missing value in any columns.\n- Target values is binary: 0 or 1.","8a11c81f":"## Look feature importance"}}