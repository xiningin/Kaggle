{"cell_type":{"c6b4cb28":"code","7daa371d":"code","9c00d447":"code","fe311b1f":"code","c31dde65":"code","e264cf91":"code","6de62b83":"code","79c9e64d":"code","0a634aba":"code","eb9497d8":"code","7c842d8f":"markdown","4e1c5032":"markdown","6560645a":"markdown","7db2aa36":"markdown","a62b103a":"markdown","72cce011":"markdown","f8b4665b":"markdown"},"source":{"c6b4cb28":"from importlib import reload\nimport sys\nfrom imp import reload\nimport warnings\nwarnings.filterwarnings('ignore')\nif sys.version[0] == '2':\n    reload(sys)\n    sys.setdefaultencoding(\"utf-8\")","7daa371d":"import pandas as pd\ndf1 = pd.read_csv('..\/input\/word2vec-nlp-tutorial\/labeledTrainData.tsv', delimiter=\"\\t\")\ndf1 = df1.drop(['id'], axis=1)\ndf1.head()","9c00d447":"df2 = pd.read_csv('..\/input\/imdb-review-dataset\/imdb_master.csv',encoding=\"latin-1\")\ndf2.head()","fe311b1f":"df2 = df2.drop(['Unnamed: 0','type','file'],axis=1)\ndf2.columns = [\"review\",\"sentiment\"]\ndf2.head()","c31dde65":"df2 = df2[df2.sentiment != 'unsup']\ndf2['sentiment'] = df2['sentiment'].map({'pos': 1, 'neg': 0})\ndf2.head()","e264cf91":"df = pd.concat([df1, df2]).reset_index(drop=True)\ndf.head()","6de62b83":"import re\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import stopwords\n\nstop_words = set(stopwords.words(\"english\")) \nlemmatizer = WordNetLemmatizer()\n\n\ndef clean_text(text):\n    text = re.sub(r'[^\\w\\s]','',text, re.UNICODE)\n    text = text.lower()\n    text = [lemmatizer.lemmatize(token) for token in text.split(\" \")]\n    text = [lemmatizer.lemmatize(token, \"v\") for token in text]\n    text = [word for word in text if not word in stop_words]\n    text = \" \".join(text)\n    return text\n\ndf['Processed_Reviews'] = df.review.apply(lambda x: clean_text(x))","79c9e64d":"df.head()","0a634aba":"from keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Dense , Input , LSTM , Embedding, Dropout , Activation, GRU, Flatten\nfrom keras.layers import Bidirectional, GlobalMaxPool1D\nfrom keras.models import Model, Sequential\nfrom keras.layers import Convolution1D\nfrom keras import initializers, regularizers, constraints, optimizers, layers\n\nmax_features = 6000\ntokenizer = Tokenizer(num_words=max_features)\ntokenizer.fit_on_texts(df['Processed_Reviews'])\nlist_tokenized_train = tokenizer.texts_to_sequences(df['Processed_Reviews'])\n\nmaxlen = 130\nX_t = pad_sequences(list_tokenized_train, maxlen=maxlen)\ny = df['sentiment']\n\nembed_size = 128\nmodel = Sequential()\nmodel.add(Embedding(max_features, embed_size))\nmodel.add(Bidirectional(LSTM(32, return_sequences = True)))\nmodel.add(GlobalMaxPool1D())\nmodel.add(Dense(20, activation=\"relu\"))\nmodel.add(Dropout(0.05))\nmodel.add(Dense(10, activation=\"relu\"))\nmodel.add(Dropout(0.05))\nmodel.add(Dense(1, activation=\"sigmoid\"))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()\n\nbatch_size = 100\nepochs = 3\nmodel.fit(X_t,y, batch_size=batch_size, epochs=epochs, validation_split=0.2)","eb9497d8":"df_test=pd.read_csv(\"..\/input\/word2vec-nlp-tutorial\/testData.tsv\",header=0, delimiter=\"\\t\", quoting=3)\ndf_test.head()\ndf_test[\"review\"]=df_test.review.apply(lambda x: clean_text(x))\ndf_test[\"sentiment\"] = df_test[\"id\"].map(lambda x: 1 if int(x.strip('\"').split(\"_\")[1]) >= 5 else 0)\ny_test = df_test[\"sentiment\"]\nlist_sentences_test = df_test[\"review\"]\nlist_tokenized_test = tokenizer.texts_to_sequences(list_sentences_test)\nX_te = pad_sequences(list_tokenized_test, maxlen=maxlen)\nprediction = model.predict(X_te)\ny_pred = (prediction > 0.5)\nfrom sklearn.metrics import f1_score, confusion_matrix\nprint('F1-score: {0}'.format(f1_score(y_pred, y_test)))\nprint('Confusion matrix:')\nconfusion_matrix(y_pred, y_test)","7c842d8f":"**It is better to drop columns *Unnamed: 0,File* and *type* since these will not contribute to final learning.***","4e1c5032":"**Here we start to build our deep neural network with Keras after tokenizing the words since neural network can only accept numerical values. After the model is created we run the model against our data for 3 epochs.**","6560645a":"**Let us map the positive sentiments to 1 and negative sentiments to 0.**","7db2aa36":"**Merging both datasets into one.**","a62b103a":"**To do better analysis it is important that we clean the data. We remove unnessecary spaces and stop words like *the, if, of,etc.* Further we process to lemmatize the words to group them.**","72cce011":"**Import panda and the datasets**","f8b4665b":"**This is the step where we test how accurate our model is with various metrics.**"}}