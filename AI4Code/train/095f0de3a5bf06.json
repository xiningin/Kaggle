{"cell_type":{"d284b177":"code","b3411cc4":"code","56e3384c":"code","d39e7151":"code","195b62a1":"code","4635bb8f":"code","29babec9":"code","dc3c7752":"code","04b2712c":"code","c8640831":"code","49e3d147":"code","dbb9f168":"code","5e71f6db":"code","ee584851":"code","a12a3646":"code","78607988":"code","61e3ba47":"code","c9321f2e":"code","3f6db078":"code","6f510b72":"code","be6f8493":"code","5cf6d1f2":"code","c8a36d37":"code","52ad1c72":"code","5e6537af":"code","a0538619":"code","99c18ad1":"code","5196624f":"code","fd5a3268":"markdown","df9e3aa3":"markdown","2951c364":"markdown","2d9ed862":"markdown","d8e34906":"markdown","a89d957e":"markdown","9f7cd396":"markdown","8ef9ad8e":"markdown"},"source":{"d284b177":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b3411cc4":"df = pd.read_csv('\/kaggle\/input\/travel-insurance-prediction-data\/TravelInsurancePrediction.csv')\n\nprint(df.shape)\ndf.head()","56e3384c":"df.drop('Unnamed: 0', axis = 1, inplace = True)\ndf['ChronicDiseases'] = np.where(df['ChronicDiseases'] == 1, 'Yes', 'No')","d39e7151":"target = 'TravelInsurance'","195b62a1":"df.groupby(target)['Age'].count().plot.bar()\nplt.xlabel(target)\nplt.ylabel('count')\nplt.show()","4635bb8f":"print('N: {}%'.format((df[target].value_counts()[0] \/ len(df)) * 100))\nprint('Y: {}%'.format((df[target].value_counts()[1] \/ len(df)) * 100))","29babec9":"#missing values\ndf.isnull().sum()","dc3c7752":"#Numeric Features\nnum_features = [feature for feature in df.columns if df[feature].dtype != 'O' and feature != target]\n\ndf[num_features].head()","04b2712c":"#discrete features\ndis_features = [feature for feature in num_features if len(df[feature].unique()) < 20]\n\nprint(dis_features)","c8640831":"#Distribution\nfor feature in dis_features:\n    df.groupby(feature)[target].count().plot.bar()\n    \n    plt.xlabel(feature)\n    plt.ylabel('count')\n    plt.show()","49e3d147":"for feature in dis_features:\n    df.groupby(feature)[target].mean().plot.bar()\n    \n    plt.xlabel(feature)\n    plt.ylabel('count')\n    plt.show()","dbb9f168":"#Continuous features\ncon_features = [feature for feature in num_features if feature not in dis_features]\n\nprint(con_features)","5e71f6db":"#distribution\ndf[con_features].hist(bins = 25)\nplt.show()","ee584851":"#categorical features\ncat_features = [feature for feature in df.columns if feature not in num_features and feature != target]\n\ndf[cat_features].head()","a12a3646":"for feature in cat_features:\n    print('{}: {} categories'.format(feature, len(df[feature].unique())))","78607988":"#distribution\nfor feature in cat_features:\n    df.groupby(feature)[target].count().plot.bar()\n    \n    plt.xlabel(feature)\n    plt.ylabel('count')\n    plt.show()","61e3ba47":"for feature in cat_features:\n    df.groupby(feature)[target].mean().plot.bar()\n    \n    plt.xlabel(feature)\n    plt.ylabel(target)\n    plt.show()","c9321f2e":"dummy_df = pd.get_dummies(df, drop_first = True)\ndummy_df.head()","3f6db078":"X = dummy_df.drop(target, axis = 1)\ny = dummy_df[target]","6f510b72":"cor = X[num_features].corr()\n\nsns.heatmap(cor, annot = True, cmap = plt.cm.CMRmap_r)\nplt.show()","be6f8493":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\nscaler = MinMaxScaler()\n\nscaler.fit(X_train)\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)","5cf6d1f2":"random_grid = {'n_estimators': [50, 100, 200, 400, 500, 700, 900],\n               'criterion': ['gini', 'entropy'],\n               'max_features': ['auto', 'sqrt', 'log2'],\n               'max_depth': [None],\n               'min_samples_split': [2, 5, 10],\n               'min_samples_leaf': [1, 2, 4],\n               'bootstrap': [True, False]}","c8a36d37":"model = RandomForestClassifier()\n\nrf_random = RandomizedSearchCV(estimator = model, \n                               param_distributions = random_grid, \n                               n_iter = 100, \n                               cv = 3, \n                               verbose=2, \n                               random_state=42, \n                               n_jobs = -1)\n\nrf_random.fit(X_train, y_train)\n\nrf_random.best_params_","52ad1c72":"param_grid = {'n_estimators': [800,900, 1000, 1100],\n               'criterion': ['gini'],\n               'max_features': ['log2'],\n               'max_depth': [None],\n               'min_samples_split': [2, 3, 4],\n               'min_samples_leaf': [3, 4, 5, 6],\n               'bootstrap': [True]}","5e6537af":"model = RandomForestClassifier()\n\nrf_grid = GridSearchCV(estimator = model, param_grid = param_grid, cv = 3, n_jobs = -1, verbose = 2)\n\nrf_grid.fit(X_train, y_train)\n\nrf_grid.best_params_","a0538619":"model = RandomForestClassifier(n_estimators = 800,\n                               min_samples_split = 2,\n                               min_samples_leaf = 4,\n                               max_features = 'log2',\n                               max_depth = None,\n                               criterion = 'gini',\n                               bootstrap = True)\n\nmodel.fit(X_train, y_train)","99c18ad1":"y_pred_hp_rf = model.predict(X_test)","5196624f":"print(confusion_matrix(y_test, y_pred_hp_rf))\nprint(classification_report(y_test, y_pred_hp_rf, digits = 4))\nprint('score: ', accuracy_score(y_test, y_pred_hp_rf))","fd5a3268":"# Feature Selection","df9e3aa3":"### Observations\n1. Frequenet fliers are more likely to purchase insurance\n2. People who have travelled abroad are more likely to purchase insurance","2951c364":"# Random Forest","2d9ed862":"## Scaling","d8e34906":"### Context\nA Tour & Travels Company Is Offering Travel Insurance Package To Their Customers.\nThe New Insurance Package Also Includes Covid Cover.\nThe Company Requires To Know The Which Customers Would Be Interested To Buy It Based On Its Database History.\nThe Insurance Was Offered To Some Of The Customers In 2019 And The Given Data Has Been Extracted From The Performance\/Sales Of The Package During That Period.\nThe Data Is Provided For Almost 2000 Of Its Previous Customers And You Are Required To Build An Intelligent Model That Can Predict If The Customer Will Be Interested To Buy The Travel Insurance Package Based On Certain Parameters Given Below.\n\n### Content\nAge- Age Of The Customer\nEmployment Type- The Sector In Which Customer Is Employed\nGraduateOrNot- Whether The Customer Is College Graduate Or Not\nAnnualIncome- The Yearly Income Of The Customer In Indian Rupees[Rounded To Nearest 50 Thousand Rupees]\nFamilyMembers- Number Of Members In Customer's Family\nChronicDisease- Whether The Customer Suffers From Any Major Disease Or Conditions Like Diabetes\/High BP or Asthama,etc.\nFrequentFlyer- Derived Data Based On Customer's History Of Booking Air Tickets On Atleast 4 Different Instances In The Last 2 Years[2017-2019].\nEverTravelledAbroad- Has The Customer Ever Travelled To A Foreign Country[Not Necessarily Using The Company's Services]\nTravelInsurance- Did The Customer Buy Travel Insurance Package During Introductory Offering Held In The Year 2019.","a89d957e":"# Exploratory Data Analysis","9f7cd396":"# Predict Whether A Customer Will Be Interested In Buying Travel Insurance or not","8ef9ad8e":"# Feature Engineering"}}