{"cell_type":{"3e12b9b9":"code","82a349c4":"code","7b42569c":"code","05117b55":"code","19a914d6":"code","91cd3a22":"code","cc73a069":"code","d8303fc8":"code","16012477":"code","5df34eed":"code","758f3ff9":"code","62b3600c":"code","ceeeb5ee":"code","5a2f2934":"code","b363b091":"code","676b8740":"code","7a6fb0db":"code","18190a4e":"code","6ddafc5f":"code","b0758ea1":"code","13fc2bd3":"code","663e3041":"code","9c97e619":"code","6d965c2d":"code","04ef0feb":"code","0b4cd380":"code","618c3f56":"code","2cadd979":"code","1abfbcd9":"code","1e71ede5":"code","a3eaeaca":"code","bd812e3f":"code","9be8e1fa":"code","9d5e78d5":"code","efbeca10":"code","1ccee24e":"code","5616bde6":"code","a60be25b":"code","3a430e8a":"code","e25eadcc":"code","2e23195d":"code","c046c645":"code","7e871507":"code","2e41955f":"code","249408f5":"code","6139fa9e":"code","2c98c2c1":"code","4b3f50ee":"code","5ddcdb00":"code","e3a3fd06":"code","9b8cbb35":"code","72319608":"code","c7ff126a":"code","cf692668":"code","e10c11e6":"code","0c466ac5":"code","3e207cc0":"code","e55a2d13":"code","274d405f":"code","cc500329":"code","47572b49":"code","6fa3e59c":"code","6fee1ae5":"code","49f6e74d":"code","009be98e":"code","701055ab":"code","85b2c678":"code","a828613d":"code","faac4d9f":"code","304fe712":"code","ef7fceac":"code","52f996e2":"markdown","72b1cace":"markdown","77359c27":"markdown","761ae06d":"markdown","f11ca2c5":"markdown","e0617756":"markdown","d63ed8e8":"markdown","b791c261":"markdown","102e83d1":"markdown","54b92b26":"markdown","acf6c74c":"markdown","91229ad1":"markdown","22a9e3c5":"markdown","fcad54bd":"markdown","16ff59cf":"markdown","e90c424d":"markdown","8904a49c":"markdown","441f3da3":"markdown","d598dd64":"markdown","4e903bb5":"markdown","ac8aaceb":"markdown","98e88093":"markdown","9b5e6e32":"markdown","44c93620":"markdown","01498278":"markdown","6d9aa044":"markdown"},"source":{"3e12b9b9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","82a349c4":"import warnings\nwarnings.filterwarnings('ignore')","7b42569c":"sns.set_style('whitegrid')","05117b55":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","19a914d6":"train_data.head()","91cd3a22":"train_data.info()","cc73a069":"plt.figure(figsize=(12,6))\nsns.countplot(data=train_data,x='Sex',hue='Survived',palette='RdBu_r')","d8303fc8":"plt.figure(figsize=(12,6))\nsns.countplot(x='Embarked',data=train_data,hue='Survived',palette='RdBu_r')","16012477":"plt.figure(figsize=(12,6))\nsns.countplot(x='Pclass',data=train_data,hue='Sex',palette='RdBu_r')","5df34eed":"plt.figure(figsize=(12,6))\nsns.countplot(x='Pclass',data=train_data,hue='Survived',palette='RdBu_r')","758f3ff9":"plt.figure(figsize=(12,6))\nsns.countplot(x='Parch',data=train_data,hue='Sex',palette='RdBu_r')","62b3600c":"plt.figure(figsize=(12,6))\nsns.boxplot(x='Pclass',y='Age',data=train_data,hue='Sex',palette='RdBu_r')","ceeeb5ee":"plt.figure(figsize=(12,6))\nsns.countplot(x='Pclass',data=train_data,hue='Sex',palette='RdBu_r')","5a2f2934":"plt.figure(figsize=(12,6))\nsns.barplot(data=train_data,y='Fare',x='Pclass',palette='RdBu_r')","b363b091":"plt.figure(figsize=(12,6))\nsns.heatmap(data=train_data.corr(),cmap=\"YlGnBu\")","676b8740":"train_data['Embarked'] = train_data['Embarked'].fillna('S')\ntest_data['Embarked'] = test_data['Embarked'].fillna('S')","7a6fb0db":"def fix_age(blob):\n    Age = blob[0]\n    Pclass = blob[1]\n    Sex = blob[2]\n    \n    if pd.isnull(Age):\n        if Sex == 'male':\n            if Pclass == 1:\n                return 40\n            elif Pclass == 2:\n                return 30\n            else:\n                return 25\n        else:\n            if Pclass == 1:\n                return 35\n\n            elif Pclass == 2:\n                return 27\n\n            else:\n                return 22\n    else:\n        return Age","18190a4e":"train_data['Age'] = train_data[['Age','Pclass','Sex']].apply(fix_age,axis=1)\ntest_data['Age'] = test_data[['Age','Pclass','Sex']].apply(fix_age,axis=1)","6ddafc5f":"train_data[\"Fare\"] = train_data[\"Fare\"].fillna(train_data[\"Fare\"].median())\ntest_data[\"Fare\"] = test_data[\"Fare\"].fillna(test_data[\"Fare\"].median())","b0758ea1":"train_data['SibSp'].fillna(-1,inplace=True)\ntest_data['SibSp'].fillna(-1,inplace=True)","13fc2bd3":"train_data['Parch'].fillna(-1,inplace=True)\ntest_data['Parch'].fillna(-1,inplace=True)","663e3041":"train_data['Sex'] = train_data['Sex'].fillna('male')\ntest_data['Sex'] = test_data['Sex'].fillna('male')","9c97e619":"def add_family(blob):\n    temp = blob.split(' ')[0]\n    temp = temp[:len(temp)-1]\n    return temp","6d965c2d":"train_data['FamilyName'] = train_data['Name'].apply(add_family)","04ef0feb":"test_data['FamilyName'] = test_data['Name'].apply(add_family)","0b4cd380":"train_data['FamilyName'].value_counts()","618c3f56":"def apply_name_suffix(blob):\n    temp = blob.split(' ')[1]\n    return temp","2cadd979":"train_data['NameSuffix'] = train_data['Name'].apply(apply_name_suffix)","1abfbcd9":"test_data['NameSuffix'] = test_data['Name'].apply(apply_name_suffix)","1e71ede5":"def fix_name_suffix(blob):\n    temp = ['Mr.','Miss.','Mrs.','Master.','Dr.','Rev.']\n    if blob in temp:\n        return blob[0:len(blob)-1]\n    else:\n        return 'no_suffix'","a3eaeaca":"train_data['NameSuffix'] = train_data['NameSuffix'].apply(fix_name_suffix)\ntest_data['NameSuffix'] = test_data['NameSuffix'].apply(fix_name_suffix)","bd812e3f":"del train_data['Name']\ndel test_data['Name']","9be8e1fa":"train_data.Ticket = [i[0] for i in train_data.Ticket.astype(\"str\")]\ntest_data.Ticket = [i[0] for i in test_data.Ticket.astype(\"str\")]","9d5e78d5":"train_data['Ticket'] = train_data['Ticket'].apply(lambda x: x if x in ['S','P','C','A','W','F','L'] else 'G')","efbeca10":"test_data['Ticket'] = test_data['Ticket'].apply(lambda x: x if x in ['S','P','C','A','W','F','L'] else 'G')","1ccee24e":"train_data.Cabin = [i[0] for i in train_data.Cabin.astype(\"str\")]\ntest_data.Cabin = [i[0] for i in test_data.Cabin.astype(\"str\")]","5616bde6":"def most_common(lst):\n    return max(set(lst), key=lst.count)\ndef fix_cabin(blob):\n    temp = blob.tolist()\n    temp1 = []\n    for i in temp :\n        if i == 'n':\n            continue\n        else:\n            temp1.append(i)\n    if temp1 == [] :\n        return 'Z'\n    else:\n        temp1 = most_common(temp1)\n        return temp1","a60be25b":"train_data['Cabin'] = train_data['Cabin'].groupby(train_data['FamilyName']).transform(fix_cabin)\ntest_data['Cabin'] = test_data['Cabin'].groupby(test_data['FamilyName']).transform(fix_cabin)","3a430e8a":"del train_data['PassengerId']","e25eadcc":"from sklearn.pipeline import Pipeline , FeatureUnion\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.feature_extraction import DictVectorizer","2e23195d":"list_of_obj = []\nlist_of_num = []\nfor i in train_data.columns :\n    if train_data[i].dtypes == 'object':\n        list_of_obj.append(i)\n    else:\n        if i == 'Survived':\n            continue\n        else:\n            list_of_num.append(i)","c046c645":"def return_text(df):\n    return df[list_of_obj]","7e871507":"get_text = FunctionTransformer(func=return_text,validate=False)","2e41955f":"def return_num(df):\n    return df[list_of_num]","249408f5":"get_numerical = FunctionTransformer(func=return_num,validate=False)","6139fa9e":"num_pipeline = Pipeline([\n    ('numerical',get_numerical),\n])","2c98c2c1":"def return_dict(blob):\n    return blob.to_dict(\"records\")","4b3f50ee":"text_pipeline = Pipeline([\n    ('textual',get_text),\n    ('dictifier',FunctionTransformer(func=return_dict,validate=False)),\n    ('vectorizer',DictVectorizer(sort=False)),\n])","5ddcdb00":"from sklearn.model_selection import train_test_split","e3a3fd06":"X_train, X_test, y_train, y_test = train_test_split(\n...     train_data.drop(['Survived'],axis=1), train_data['Survived'], test_size=0.2, random_state=42)","9b8cbb35":"from sklearn.metrics import confusion_matrix , classification_report, roc_auc_score","72319608":"import xgboost as xgb","c7ff126a":"xgb_model = xgb.XGBClassifier(silent=False, \n                      scale_pos_weight=1,\n                      learning_rate=0.01,  \n                      colsample_bytree = 0.4,\n                      subsample = 0.8,\n                      objective='binary:logistic', \n                      n_estimators=500, \n                      reg_alpha = 0.3,\n                      gamma=10,\n                      eval_metric = 'auc')","cf692668":"pipeline = Pipeline([\n    ('union',FeatureUnion(\n        transformer_list = [\n            ('num',num_pipeline),\n            ('text',text_pipeline)\n        ])),\n    ('clf',xgb_model)\n])","e10c11e6":"pipeline.fit(X_train,y_train)","0c466ac5":"preds_xgb = pipeline.predict(X_test)","3e207cc0":"print(confusion_matrix(y_test,preds_xgb))\nprint(roc_auc_score(y_test,preds_xgb))\nprint(classification_report(y_test,preds_xgb))","e55a2d13":"from sklearn.model_selection import RandomizedSearchCV","274d405f":"params = {\n    \"clf__learning_rate\"    : list(np.arange(0.05,0.6,0.05)) ,\n    \"clf__max_depth\"        : list(np.arange(1,20,2)),\n    \"clf__min_child_weight\" : list(np.arange(1,9,1)),\n    \"clf__gamma\"            : list(np.arange(1,20,1)),\n    \"clf__colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ],\n    \"clf__subsample\" : list(np.arange(0.1,0.9,0.1)),\n    \"clf__n_estimators\" : [200,500,800,1000,1500,2000],\n    \"clf__reg_alpha\" : list(np.arange(0.1,0.9,0.1))\n         }","cc500329":"grid = RandomizedSearchCV(pipeline,\n                         param_distributions=params,\n                         scoring='roc_auc',cv=5,verbose=5)","47572b49":"grid.fit(X_train,y_train)","6fa3e59c":"grid.best_params_, grid.best_score_","6fee1ae5":"best_matrix = {'subsample': 0.30000000000000004,\n  'reg_alpha': 0.2,\n  'n_estimators': 500,\n  'min_child_weight': 3,\n  'max_depth': 9,\n  'learning_rate': 0.15000000000000002,\n  'gamma': 4,\n  'colsample_bytree': 0.3}","49f6e74d":"xgb_model = xgb.XGBClassifier(**best_matrix,silent=False, \n                      eval_metric = 'auc')","009be98e":"finalized_model = pipeline = Pipeline([\n    ('union',FeatureUnion(\n        transformer_list = [\n            ('num',num_pipeline),\n            ('text',text_pipeline)\n        ])),\n    ('clf',xgb_model)\n])","701055ab":"X = train_data.drop(['Survived'],axis=1)\ny = train_data['Survived']","85b2c678":"finalized_model.fit(X,y)","a828613d":"final_test = test_data.drop(['PassengerId'],axis=1)","faac4d9f":"PassengerId = test_data['PassengerId']","304fe712":"final_prediction = finalized_model.predict(final_test)","ef7fceac":"submission = pd.DataFrame({ 'PassengerId': PassengerId,\n                            'Survived': final_prediction })\nsubmission.to_csv(path_or_buf =\"Titanic_Submission.csv\", index=False)","52f996e2":"**Main Code:**","72b1cace":"# Visualization","77359c27":"Training on full data now","761ae06d":"Fixing ticket column","f11ca2c5":"**Following observations can be made from this dataset**\n* Number of female survivors is far more than male survivors.\n* Most people belonging to Passenger class 3 (lowest class) did not survived.\n* Most of the young passengers were travelling my third passenger class.\n* Passengers with expensive tickets had a better survival rate.\n* Number of siblings have a positive correlation with survival rate i.e people with their siblings on board had better chance of survival.","e0617756":"Fixing Parch","d63ed8e8":"Fixing SibSp","b791c261":"# Model","102e83d1":"From the graphs it is clear that Age depends upon the Pclass, therefore using the median per class to fill missing age","54b92b26":"Fixing 'Fare' feature","acf6c74c":"Fixing cabin","91229ad1":"Importing the data","22a9e3c5":"Fixing feature 'Embarked'","fcad54bd":"trying to improve upon xgbclassifier using randomizedSearch","16ff59cf":"Fixing feature age","e90c424d":"Deleting Name feature","8904a49c":"# Submission","441f3da3":"# Pipeline","d598dd64":"# Findings","4e903bb5":"Fixing name suffix","ac8aaceb":"Lets try to use XGBClassifier with it","98e88093":"Adding Name suffix","9b5e6e32":"Lets plot some graphs using seaborn library","44c93620":"Fixing Sex","01498278":"Extracting features from 'Name' column","6d9aa044":"# Feature Engineering"}}