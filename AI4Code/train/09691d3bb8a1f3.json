{"cell_type":{"3aa7def4":"code","dac93755":"code","1dd8c98c":"code","c9fe916c":"code","2415a9f8":"code","b02d06fd":"code","31527a70":"code","a232b1b5":"code","fe86a03b":"code","1be4fb79":"code","216da0f1":"markdown","fd2a5ba4":"markdown","479c5b8a":"markdown","5587c003":"markdown","bc5c3e0a":"markdown","59a48afb":"markdown"},"source":{"3aa7def4":"import pandas as pd\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import make_pipeline, Pipeline\n\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import LinearSVC\n\nfrom sklearn.feature_selection import SelectFromModel","dac93755":"root_df = pd.read_csv('..\/input\/train.csv')\nX = root_df.drop(['id', 'target'], axis=1)\ny = root_df['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)","1dd8c98c":"y.value_counts()","c9fe916c":"pipe = Pipeline(steps=[\n    ('pre', None),\n    ('feature_selection', None),\n    ('clf', LogisticRegression(solver='liblinear')),\n    ]\n)\n\nparams = {  \n    'pre': [\n        None, StandardScaler(), MinMaxScaler(),\n    ],\n    'feature_selection': [\n        None, \n        SelectFromModel(LogisticRegression(solver='liblinear')),\n        SelectFromModel(XGBClassifier(n_estimators=500, max_depth=3)),\n    ],\n    'clf__penalty': ['l1', 'l2'],\n    'clf__C': [000.1, 00.1, 0.1, 1, 10],\n    'clf__class_weight': [None, 'balanced']\n}\nclf = GridSearchCV(pipe, param_grid=params, scoring='roc_auc', cv=8, n_jobs=-1)","2415a9f8":"clf.fit(X_train, y_train)","b02d06fd":"clf.best_estimator_","31527a70":"roc_auc_score(y_test, clf.predict(X_test))","a232b1b5":"test_df = pd.read_csv('..\/input\/test.csv')\nX = test_df.drop(['id'], axis=1)","fe86a03b":"predictions = clf.predict_proba(X)[:,1]\nsubmission = {\n    \"id\": test_df['id'],\n    \"target\": predictions\n}\nsubmission = pd.DataFrame(submission)","1be4fb79":"submission.to_csv('submission.csv', index=False)","216da0f1":"## Load data and create dataframes","fd2a5ba4":"## Build a pipeline \/ classifier","479c5b8a":"### Data is imbalanced!\n\nSo lets use the 'roc_auc' metric to account for this\n","5587c003":"## Export Data","bc5c3e0a":"## Score the model","59a48afb":"## Fit the model"}}