{"cell_type":{"40a8fa00":"code","891af883":"code","cf47993c":"code","cababdb8":"code","b2bc93b3":"code","25ea2067":"code","0ea4c7c4":"code","55b09553":"code","f57ec6bb":"code","557b2017":"code","ae911d51":"code","c79f128f":"code","0ecc9e49":"code","9ce3c4b8":"code","42571399":"code","fbc08bd7":"code","94b2f9c0":"code","bfc7440c":"code","7149527e":"code","f696c0b7":"code","dfeabdc5":"code","5b254423":"code","c119b58c":"code","f209910a":"code","9776a85d":"code","336dcb9d":"code","98d2b4c6":"code","c4c51d8d":"code","1a2b8943":"code","0430feac":"code","7b8d9df5":"code","b46e5400":"code","3029adfa":"markdown","a1f42130":"markdown","b5521741":"markdown","a1fb1dd1":"markdown","cdfed668":"markdown","f633ba5c":"markdown","6cecdca9":"markdown","7233a0b6":"markdown","4173e19e":"markdown","a1a0d52a":"markdown","1f7fa6bf":"markdown","ad6f60fc":"markdown","cd27e7ec":"markdown","5da03c2b":"markdown","32c71f33":"markdown","05857f72":"markdown","e426294e":"markdown","7cde8589":"markdown","01116e51":"markdown","434eb89f":"markdown","dc1db79f":"markdown","39448d18":"markdown"},"source":{"40a8fa00":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta","891af883":"br_states_population = pd.read_csv('\/kaggle\/input\/brazilianstates\/states.csv')\ndadosms_macro = pd.read_csv('\/kaggle\/input\/corona-virus-brazil\/brazil_covid19_macro.csv', parse_dates=['date'], index_col=['date'])\ndadosms_cities = pd.read_csv('\/kaggle\/input\/corona-virus-brazil\/brazil_covid19.csv', parse_dates=['date'], index_col=['date'])\ndadosgoogle = pd.read_csv('\/kaggle\/input\/covid19-mobility-datasets-google-and-apple\/Global_Mobility_Report.csv', parse_dates=['date'], index_col=['date'], low_memory=False)\ndadosapple = pd.read_csv('\/kaggle\/input\/covid19-mobility-datasets-google-and-apple\/applemobilitytrends.csv').query('region == \"Brazil\"').T[13:].rename(columns={12: 'driving', 13:'transit', 14: 'walking'})","cf47993c":"#Function to calc number of deaths per day\ndef calcdiario2(data):\n    obdiario = []\n    for i in range(len(data)):\n        if i == 0:\n            obdiario.append(data[i])\n        else:\n            obdiario.append(data[i] - data[i-1])\n    obdiario = pd.DataFrame({'date':data.index,'obdiario':obdiario}).set_index('date')\n    return obdiario\n\n#Function to create dataset of deaths and mobility\ndef create_df_mob_ob2(datact, obdiarioct, state):\n    obdiario_ct = pd.DataFrame({'datact': datact.values, 'deaths': obdiarioct['obdiario']})\n    obdiario_ct = obdiario_ct.set_index('datact')\n    obdiario_ct.index.rename('date', inplace=True)\n    google_res = dadosgooglebr[dadosgooglebr['region'] == state]['residential']\n    final_res_ob_ct = obdiario_ct\n    final_res_ob_ct['google_res'] = google_res\n    return final_res_ob_ct\n\n#Function to calculate accumulated deaths\ndef acummdeaths(state):\n    dadosms_st = dadosms_cities[dadosms_cities['state'] == state]\n    obst = dadosms_st.groupby(by='date').sum()['deaths']\n    datast = obst.index\n    return obst, datast","cababdb8":"# Extract of population of states in mi \nbr_states_population = br_states_population.assign(Population=(br_states_population.Population \/ 1000000).astype('float64'))\nbr_states_population = br_states_population.set_index('State')\n\n# Extract of covid-19 cases in Brasil\ndatabrasil = dadosms_macro.index\nobbrasil = dadosms_macro['deaths']\n\n#Number of deaths per day in Brazil\nobdiariobrasil = calcdiario2(obbrasil)\nma7_br = obdiariobrasil.rolling(window=7).mean()\n\n#Calc the deaths per milion in Brazil\nobpmbr = round(obbrasil\/br_states_population['Population'].sum(),1)\nobdiariopmbr = round(obdiariobrasil\/br_states_population['Population'].sum(),1)\nma7_pmibr = obdiariopmbr.rolling(window=7).mean()\n\n# Accumulated deaths in states\ncities_grouped= dadosms_cities.groupby(by=['date', 'state']).sum()['deaths']\ncities_grouped = pd.DataFrame(cities_grouped).reset_index()\ncities_grouped = cities_grouped.sort_values(by='deaths', ascending=False)\ncities_grouped2 = cities_grouped.groupby(by='state').max()['deaths'].sort_values(ascending=False)\ncities_grouped2 = pd.DataFrame(cities_grouped2).reset_index()\n\n# Accumulated deaths\/mi in states\ncities_grouped2_n = cities_grouped2.set_index('state')\ncities_dea_mi = cities_grouped2_n['deaths'] \/ br_states_population['Population']\ncities_dea_mi = cities_dea_mi.reset_index().rename(columns={'index':'state', 0: 'deaths'})\ncities_dea_mi.loc[:,'deaths'] = round(cities_dea_mi['deaths'],1)\ncities_dea_mi = cities_dea_mi.sort_values(by='deaths', ascending=False)\n\n#Deaths in RJ\nobrj, datarj = acummdeaths('Rio de Janeiro')\nobdiariorj = calcdiario2(obrj)\nma7_obrj = obdiariorj.rolling(window=7).mean()\n\n#Deaths in SP\nobsp, datasp = acummdeaths('S\u00e3o Paulo')\nobdiariosp = calcdiario2(obsp)\nma7_obsp = obdiariosp.rolling(window=7).mean()\n\n#Deaths in AM\nobam, dataam = acummdeaths('Amazonas')\nobdiarioam = calcdiario2(obam)\nma7_obam =obdiarioam.rolling(window=7).mean()\n\n#Mobilty data from Google\ndadosgoogle.rename(columns={'country_region_code': 'crc', 'country_region': 'country', 'sub_region_1':'region', 'sub_region_2':'sr2',\n       'retail_and_recreation_percent_change_from_baseline': 'retail', 'grocery_and_pharmacy_percent_change_from_baseline':'grocery_and_pharmacy',\n       'parks_percent_change_from_baseline': 'parks', 'transit_stations_percent_change_from_baseline': 'transit_stations',\n       'workplaces_percent_change_from_baseline': 'workplaces', 'residential_percent_change_from_baseline': 'residential'}, inplace=True)\ndadosgooglebr = dadosgoogle[dadosgoogle['country'] == 'Brazil']\ndadosgooglebr_geral = dadosgooglebr[dadosgooglebr['region'].isnull()]\ndatasgoogle_geral = dadosgooglebr_geral.index\n\ndadosapple_br = dadosapple\ndadosapple_br_driving = dadosapple['driving']\ndadosapple_br_transit = dadosapple_br['transit']\ndadosapple_br_walking = dadosapple_br['walking']\n\n#Unifying mobility data from Apple e Google\nmobility_frame = { 'br_google_retail': dadosgooglebr_geral['retail'], 'br_google_grocery_and_pharmacy': dadosgooglebr_geral['grocery_and_pharmacy'],\n         'br_google_parks': dadosgooglebr_geral['parks'], 'br_google_transit_stations': dadosgooglebr_geral['transit_stations'],\n         'br_google_workplaces': dadosgooglebr_geral['workplaces'], 'br_google_residential': dadosgooglebr_geral['residential'], \n         'br_apple_driving': dadosapple_br_driving,'br_apple_transit': dadosapple_br_transit,\n         'br_apple_walking': dadosapple_br_walking}\n\nmobility_frame_df = pd.DataFrame(mobility_frame)\nmobility_frame_df = mobility_frame_df.reset_index().melt('index', var_name='mobility', value_name='vals').rename(columns={'index': 'date'})\n\n#Final datasets mobility for Apple and Google\nmobility_google = mobility_frame_df[mobility_frame_df['mobility'].str.contains('google')]\nmobility_google = mobility_google.assign(vals=(mobility_google.vals.astype('float64')))\nmobility_apple = mobility_frame_df[mobility_frame_df['mobility'].str.contains('apple')]\nmobility_apple = mobility_apple.assign(vals=(mobility_apple.vals.astype('float64')))\n\n#Create DF with daily deaths and mobility for BR\nobdiario_br = pd.DataFrame({'databrasil': databrasil, 'obdiariobrasil': obdiariobrasil['obdiario'].values})\nobdiario_br = obdiario_br.set_index('databrasil')\nobdiario_br.index.rename('date', inplace=True)\ngoogle_res_br = mobility_frame_df[mobility_frame_df['mobility'] == 'br_google_residential'][['date', 'vals']]\ngoogle_res_br = google_res_br.set_index('date')\n\nfinal_res_ob_br = obdiario_br\nfinal_res_ob_br['google_res_br'] = google_res_br\n\n#Create DF with daily deaths and mobility for states\nfinal_res_ob_rj = create_df_mob_ob2(datarj, obdiariorj, 'State of Rio de Janeiro')\nfinal_res_ob_sp = create_df_mob_ob2(datasp, obdiariosp, 'State of S\u00e3o Paulo')\nfinal_res_ob_am = create_df_mob_ob2(dataam, obdiarioam, 'State of Amazonas')\n\n#Dataframe with Google residential mobility and deaths per million in states\nres_states_mean = dadosgooglebr.groupby(by='region').mean()['residential'].sort_values(ascending=False)\nres_states_mean = round(res_states_mean,2)\nres_states_mean = res_states_mean.reset_index()\nres_states_mean['region'] = res_states_mean['region'].replace({'Federal District': 'Distrito Federal', 'State of Rio de Janeiro': 'Rio de Janeiro', 'State of Piau\u00ed': 'Piau\u00ed',\n        'State of Cear\u00e1': 'Cear\u00e1', 'State of S\u00e3o Paulo': 'S\u00e3o Paulo', 'State of Rio Grande do Sul': 'Rio Grande do Sul','State of Pernambuco': 'Pernambuco', 'State of Bahia': 'Bahia',\n        'State of Rio Grande do Norte': 'Rio Grande do Norte', 'State of Santa Catarina': 'Santa Catarina', 'State of Esp\u00edrito Santo':'Esp\u00edrito Santo', 'State of Goi\u00e1s': 'Goi\u00e1s',\n        'State of Amap\u00e1': 'Amap\u00e1', 'State of Para\u00edba':'Para\u00edba', 'State of Sergipe':'Sergipe', 'State of Minas Gerais':'Minas Gerais', 'State of Paran\u00e1':'Paran\u00e1', 'State of Amazonas':'Amazonas',\n       'State of Par\u00e1':'Par\u00e1', 'State of Alagoas':'Alagoas', 'State of Maranh\u00e3o':'Maranh\u00e3o', 'State of Tocantins':'Tocantins', 'State of Roraima':'Roraima', 'State of Acre':'Acre',\n        'State of Mato Grosso':'Mato Grosso', 'State of Rond\u00f4nia':'Rond\u00f4nia', 'State of Mato Grosso do Sul':'Mato Grosso do Sul'})\nres_states_mean.rename(columns={'region':'state'}, inplace=True)\nres_states_mean.set_index('state', inplace=True)\ncities_dea_mi2 = cities_dea_mi.set_index('state')\nres_states_mean['deaths'] = cities_dea_mi2['deaths']\nres_states_mean.reset_index(inplace=True)\nres_states_mean.rename(columns={'state': 'State', 'residential':'Mean of residential mobility', 'deaths': 'Deaths per million'}, inplace=True)\n\n#To plot the graphs\n%matplotlib inline\nplt.style.use('ggplot')","b2bc93b3":"fig, ax1 = plt.subplots(figsize=(21,10))\n\nplt.title(\"Deaths accumulated and per day in BR\", fontsize=40)\n\nax1.set_ylabel('Accum. deaths', color='tab:blue', fontsize=35)\nax1.tick_params(axis='y', labelcolor='tab:blue', labelsize=35, length=10, width=10)\nax1.plot(databrasil, obbrasil, lw=8, color='tab:blue', label='Accum. deaths -> last: {} in {}'.format(obbrasil.iloc[-1], max(databrasil.date)))\nax1.legend(loc=1, bbox_to_anchor=(0.68,1), fontsize=30)\nax1.set_xlabel('Date', color='black', fontsize=30)\nax1.tick_params(axis='x', labelcolor='black', labelsize=30, length=10, width=10, rotation=75)\n\nax2 = ax1.twinx()\nax2.set_ylabel('Deaths p\/ day', color='tab:red', fontsize=35)\nax2.tick_params(axis='y', labelcolor='tab:red', labelsize=35, length=10, width=10)\nax2.bar(obdiariobrasil.index, obdiariobrasil['obdiario'], color='tab:red', label='Deaths p\/ day -> last: {} in {}'.format(obdiariobrasil['obdiario'].iloc[-1], max(obdiariobrasil.index.date)))\n\nax3 = ax2\nax3.plot(ma7_br.index, ma7_br['obdiario'], lw=8, color='purple', label='7-day Moving Average  -> last: {} in {}'.format(round(max(ma7_br[ma7_br['obdiario'].notna()].values)[0],2), max(ma7_br.index.date)))\nax3.legend(loc=1, bbox_to_anchor=(0.79,0.9), fontsize=30)\n\nx= np.arange(np.datetime64(min(databrasil)), np.datetime64(max(databrasil) + timedelta(days=1)), timedelta(days=5)).astype(datetime)\nk = []\nfor i in x:\n    k.append(i.date())\nx = k\nax2.set_xticks(x)\nax2.set_xticklabels(x)\n\nfig.tight_layout()\nplt.show();","25ea2067":"fig, ax1 = plt.subplots(figsize=(20,10))\nplt.title(\"Deaths accumulated and per day p\/ mi in BR\", fontsize=40)\n\nax1.set_ylabel('Accum. deaths\/mi', color='tab:blue', fontsize=35)\nax1.tick_params(axis='y', labelcolor='tab:blue', labelsize=35, length=10, width=10)\nax1.plot(databrasil, obpmbr.values, lw=8, color='tab:blue', label='Accum. deaths\/mi p\/ day -> last: {} in {}'.format(obpmbr.values[len(obpmbr.values)-1], max(databrasil.date)))\nax1.legend(loc=1, bbox_to_anchor=(0.78,1), fontsize=30)\nax1.set_xlabel('Date', color='black', fontsize=30)\nax1.tick_params(axis='x', labelcolor='black', labelsize=30, length=10, width=10, rotation=75)\n\nax2 = ax1.twinx()\nax2.set_ylabel('Deaths\/mi p\/ day', color='tab:red', fontsize=35)\nax2.tick_params(axis='y', labelcolor='tab:red', labelsize=35, length=10, width=10)\nax2.bar(obdiariopmbr.index, obdiariopmbr['obdiario'], color='tab:red', label='Deaths\/mi p\/ day -> last: {} in {}'.format(obdiariopmbr.values[len(obdiariopmbr.values)-1][0], max(obdiariopmbr.index.date)))\nax2.legend(loc=1, bbox_to_anchor=(0.66,0.9), fontsize=30)\n\nax3 = ax2\nax3.plot(ma7_pmibr.index, ma7_pmibr['obdiario'], lw=8, color='purple', label='7-day Moving Average  -> last: {} in {}'.format(round(max(ma7_pmibr[ma7_pmibr['obdiario'].notna()].values)[0],2), max(ma7_pmibr.index.date)))\nax3.legend(loc=1, bbox_to_anchor=(0.76,0.9), fontsize=30)\n\nx= np.arange(np.datetime64(min(databrasil)), np.datetime64(max(databrasil) + timedelta(days=1)), timedelta(days=5)).astype(datetime)\nk = []\nfor i in x:\n    k.append(i.date())\nx = k\nax2.set_xticks(x)\nax2.set_xticklabels(x)\n\nfig.tight_layout()\nplt.show();","0ea4c7c4":"pop = br_states_population[['UF','Population']].sort_values(by='Population', ascending=False)\npop['Population'] = round(pop['Population'],2)\n\nfig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Population of States of Brazil in millions\", fontsize=35)\nchart = sns.barplot(ax=ax, data=pop, x = 'UF', y='Population', palette='cubehelix')\nchart.set_xticklabels( chart.get_xticklabels(), rotation=15, horizontalalignment='right')\nplt.ylim(0,55)\nax.set_ylabel('Population in millions', color='black', fontsize=35)\nax.set_xlabel('State', color='black', fontsize=20);\nax.tick_params(axis='y', labelsize=35, length=10, width=10)\nax.tick_params(axis='x', labelsize=20, length=10, width=10)\n\nc=0\nfor i in pop['Population'].values:\n    ax.text(c, pop['Population'].values[c]+1, pop['Population'].values[c], rotation=65, horizontalalignment='center', size='xx-large', color='k', weight='semibold')\n    c = c+1;","55b09553":"plt.figure(figsize = (20,10))\nsns.set(font_scale=1)\nsns.lineplot(x = \"date\", y = \"deaths\", data = cities_grouped, hue = \"state\", palette = \"Paired\", dashes = False, legend=\"full\", lw=5)\nplt.title(\"Absolute number of deaths over time in States of Brazil\", fontsize = 35)\nplt.xlabel(\"Date\", fontsize = 25)\nplt.ylabel(\"Deaths in States of Brazil\", fontsize = 35)\nplt.tick_params(axis='y', labelsize=35, length=10, width=10)\nplt.tick_params(axis='x', labelsize=35, rotation=75, length=10, width=10)\n\nx= np.arange(np.datetime64(min(cities_grouped['date'])), np.datetime64(max(cities_grouped['date']) + timedelta(days=1)), timedelta(days=5)).astype(datetime)\nk = []\nfor i in x:\n    k.append(i.date())\nx = k\nlocs, labels = plt.xticks(x, x)\n\nleg = plt.legend(fontsize='xx-large', title_fontsize='xx-large', loc=0, ncol=3, handlelength=3)\nfor line in leg.get_lines():\n    line.set_linewidth(4.0)\n\nplt.show()","f57ec6bb":"fig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Total accumulated deaths in States of Brazil\", fontsize=35)\nchart = sns.barplot(ax=ax, data=cities_grouped2, x = 'state', y='deaths', palette='Paired')\nchart.set_xticklabels( chart.get_xticklabels(), rotation=25, horizontalalignment='right')\nplt.ylim(0,cities_grouped2['deaths'].max() + 1000)\nax.set_ylabel('Total of deaths states', color='black', fontsize=35)\nax.set_xlabel('State', color='black', fontsize=20);\nax.tick_params(axis='y', labelsize=35, length=10, width=10)\nax.tick_params(axis='x', labelsize=20, length=10, width=10)\n\nc=0\nfor i in cities_grouped2['deaths'].values:\n    ax.text(c, cities_grouped2['deaths'].values[c]+50, cities_grouped2['deaths'].values[c], rotation=65, horizontalalignment='center', size='xx-large', color='k', weight='semibold')\n    c = c+1;","557b2017":"fig, ax = plt.subplots(figsize=(20, 10))\nplt.title(\"Total accumulated deaths\/mi in States of Brazil\", fontsize=35)\nchart = sns.barplot(ax=ax, data=cities_dea_mi, x = 'state', y='deaths')\nchart.set_xticklabels( chart.get_xticklabels(), rotation=25, horizontalalignment='right')\nplt.ylim(0,cities_dea_mi['deaths'].max() + 85)\nax.set_ylabel('Total of deaths\/mi in states', color='black', fontsize=35)\nax.set_xlabel('State', color='black', fontsize=20);\nax.tick_params(axis='y', labelsize=35, length=10, width=10)\nax.tick_params(axis='x', labelsize=20, length=10, width=10)\n\nc=0\nfor i in cities_dea_mi['deaths'].values:\n    ax.text(c, cities_dea_mi['deaths'].values[c]+5, cities_dea_mi['deaths'].values[c], rotation=65, horizontalalignment='center', size='xx-large', color='k', weight='semibold')\n    c = c+1;","ae911d51":"fig, ax1 = plt.subplots(figsize=(21,10))\n\nplt.title(\"Deaths accumulated and per day in RJ\", fontsize=40)\n\nax1.set_ylabel('Accumulated deaths p\/ day', color='tab:blue', fontsize=35)\nax1.tick_params(axis='y', labelcolor='tab:blue', labelsize=35, length=10, width=10)\nax1.plot(datarj, obrj, lw=6, color='tab:blue', label='Accumulated deaths -> last: {} in {}'.format(max(obrj), max(obrj.index.date)))\nax1.set_xlabel('Date', color='black', fontsize=30)\nax1.tick_params(axis='x', labelcolor='black', labelsize=30, length=10, width=10, rotation=75)\nax1.legend(loc=1, bbox_to_anchor=(0.7,1), fontsize=30)\n\nax2 = ax1.twinx()\nax2.set_ylabel('Deaths p\/ day', color='tab:red', fontsize=35)  # we already handled the x-label with ax1\nax2.tick_params(axis='y', labelcolor='tab:red', labelsize=35, length=10, width=10)\nax2.bar(obdiariorj.index, obdiariorj['obdiario'], color='tab:red', label='Deaths p\/ day -> last: {} in {}'.format(obdiariorj['obdiario'][len(obdiariorj['obdiario']) -1], max(obdiariorj.index.date)))\nax2.legend(loc=1, bbox_to_anchor=(0.62,1), fontsize=30)\n\nax3 = ax2\nax3.plot(ma7_obrj.index, ma7_obrj['obdiario'], lw=8, color='purple', label='7-day Moving Average -> last: {} in {}'.format(round(max(ma7_obrj[ma7_obrj['obdiario'].notna()].values)[0],2), max(ma7_obrj.index.date)))\nax3.legend(loc=1, bbox_to_anchor=(0.75,0.87), fontsize=30)\n\nx= np.arange(np.datetime64(min(datarj)), np.datetime64(max(datarj) + timedelta(days=1)), timedelta(days=5)).astype(datetime)\nk = []\nfor i in x:\n    k.append(i.date())\nx = k\nax2.set_xticks(x)\nax2.set_xticklabels(x)\n\nfig.tight_layout()\nplt.show();","c79f128f":"fig, ax1 = plt.subplots(figsize=(21,10))\n\nplt.title(\"Deaths accumulated and per day in SP\", fontsize=40)\n\nax1.set_ylabel('Accumulated deaths p\/ day', color='tab:blue', fontsize=35)\nax1.tick_params(axis='y', labelcolor='tab:blue', labelsize=35, length=10, width=10)\nax1.plot(datasp, obsp, lw=6, color='tab:blue', label='Accumulated deaths -> last: {} in {}'.format(max(obsp), max(obsp.index.date)))\nax1.set_xlabel('Date', color='black', fontsize=30)\nax1.tick_params(axis='x', labelcolor='black', labelsize=30, length=10, width=10, rotation=75)\nax1.legend(loc=1, bbox_to_anchor=(0.7,1), fontsize=30)\n\nax2 = ax1.twinx()\nax2.set_ylabel('Deaths per day', color='tab:red', fontsize=35)\nax2.tick_params(axis='y', labelcolor='tab:red', labelsize=35, length=10, width=10)\nax2.bar(obdiariosp.index, obdiariosp['obdiario'], color='tab:red', label='Deaths p\/ day -> last: {} in {}'.format(obdiariosp['obdiario'][len(obdiariosp['obdiario']) -1], max(obdiariosp.index.date)))\n\nax3 = ax2\nax3.plot(ma7_obsp.index, ma7_obsp['obdiario'], lw=8, color='purple', label='7-day Moving Average  -> last: {} in {}'.format(round(max(ma7_obsp[ma7_obsp['obdiario'].notna()].values)[0],2), max(ma7_obsp.index.date)))\nax3.legend(loc=1, bbox_to_anchor=(0.76,0.9), fontsize=30)\n\nx= np.arange(np.datetime64(min(datasp)), np.datetime64(max(datasp) + timedelta(days=1)), timedelta(days=5)).astype(datetime)\nk = []\nfor i in x:\n    k.append(i.date())\nx = k\nax2.set_xticks(x)\nax2.set_xticklabels(x)\n\nfig.tight_layout()\nplt.show();","0ecc9e49":"fig, ax1 = plt.subplots(figsize=(21,10))\n\nplt.title(\"Deaths accumulated and per day in AM\", fontsize=40)\n\nax1.set_ylabel('Accumulated deaths p\/ day', color='tab:blue', fontsize=35)\nax1.tick_params(axis='y', labelcolor='tab:blue', labelsize=35, length=10, width=10)\nax1.plot(dataam, obam, lw=6, color='tab:blue', label='Accumulated deaths -> last: {} in {}'.format(max(obam), max(obam.index.date)))\nax1.set_xlabel('Date', color='black', fontsize=30)\nax1.tick_params(axis='x', labelcolor='black', labelsize=30,  length=10, width=10, rotation=75)\nax1.legend(loc=1, bbox_to_anchor=(0.7,1), fontsize=30)\n\nax2 = ax1.twinx()\nax2.set_ylabel('Deaths p\/ day', color='tab:red', fontsize=35)\nax2.tick_params(axis='y', labelcolor='tab:red', labelsize=35, length=10, width=10)\nax2.bar(obdiarioam.index, obdiarioam['obdiario'], color='tab:red', label='Deaths p\/ day -> last: {} in {}'.format(obdiarioam['obdiario'][len(obdiarioam['obdiario']) -1], max(obdiarioam.index.date)))\n\nax3 = ax2\nax3.plot(ma7_obam.index, ma7_obam['obdiario'], lw=8, color='purple', label='7-day Moving Average  -> last: {} in {}'.format(round(max(ma7_obam[ma7_obam['obdiario'].notna()].values)[0],2), max(ma7_obam.index.date)))\nax3.legend(loc=1, bbox_to_anchor=(0.74,0.87), fontsize=30)\n\nx= np.arange(np.datetime64(min(dataam)), np.datetime64(max(dataam) + timedelta(days=1)), timedelta(days=5)).astype(datetime)\nk = []\nfor i in x:\n    k.append(i.date())\nx = k\nax2.set_xticks(x)\nax2.set_xticklabels(x)\n\nfig.tight_layout()\nplt.show();","9ce3c4b8":"fig, ax = plt.subplots(figsize=(20,10))\n#ax = sns.heatmap(mobility_frame_df.corr(), annot=True, linewidths=.5, annot_kws={\"size\": 22})\nax = sns.heatmap(pd.DataFrame(mobility_frame).reset_index().dropna().iloc[:, 1:].astype('float64').corr(), annot=True, linewidths=.5, annot_kws={\"size\": 22})\nsns.set(font_scale=3)\nplt.title(\"Correlation Heatmap of Apple and Google data \\n\", fontsize = 35)\nplt.legend(fontsize='xx-large')\nplt.tick_params(axis='y', labelsize=25)\nplt.tick_params(axis='x', labelsize=25)\nplt.show();","42571399":"sns.set(font_scale=1)\n\nfig, ax1 = plt.subplots(figsize= [25,10])\nplt.title(\"Mobility in Brazil according Google and Apple \\n\", fontsize = 35)\nax1 = sns.lineplot(x = \"date\", y = \"vals\", data = mobility_google, hue = \"mobility\", palette = \"YlOrRd\", dashes = False, legend=\"full\", lw=6)\nax1.set_xlabel('\\n Date', fontsize=25)\nax1.set_ylabel('Google mobility', color='tab:brown', fontsize=35)\nax1.tick_params(axis='y', labelcolor='tab:brown', labelsize=30,  length=10, width=10)\nax1.tick_params(axis='x', labelcolor='black', labelsize=30,  length=10, width=10, rotation=85)\n\nleg = plt.legend(fontsize='xx-large', loc=3, ncol=2, handlelength=2)\nfor line in leg.get_lines():\n    line.set_linewidth(6.0)\nleg.texts[0].set_text(\"Google mobility\")\n\nax2 = ax1.twinx()\nax2 = sns.lineplot(x = \"date\", y = \"vals\", data = mobility_apple, hue = \"mobility\", palette = \"PuBu\", dashes = False, legend=\"full\", lw=6)\nax2.set_xlabel('Date', fontsize=35)\nax2.set_ylabel('Apple mobility', color='tab:blue', fontsize=35)\nax2.tick_params(axis='y', labelcolor='tab:blue', labelsize=30,  length=10, width=10)\n\nleg = plt.legend(fontsize='xx-large', loc=0, ncol=2, handlelength=2)\nfor line in leg.get_lines():\n    line.set_linewidth(6.0)\nleg.texts[0].set_text(\"Apple mobility\")\n\nx= np.arange(np.datetime64(min(mobility_frame_df['date'])), np.datetime64(max(mobility_frame_df['date']) + timedelta(days=1)), timedelta(days=5)).astype(datetime)\nk = []\nfor i in x:\n    k.append(i.date())\nx = k\nlocs, labels = plt.xticks(x, x)\nplt.show()","fbc08bd7":"fig, ax1 = plt.subplots(figsize=(20,10))\n\nplt.title(\"Residential mobility and daily deaths Brazil\", fontsize=40)\n\nax1.set_ylabel('Residential google mobility', color='tab:blue', fontsize=35)\nax1.tick_params(axis='y', labelcolor='tab:blue', labelsize=35, length=10, width=10)\nax1.plot(final_res_ob_br.index, final_res_ob_br['google_res_br'], color='tab:blue', lw=5, label='google')\nax1.set_xlabel('Date', color='black', fontsize=30)\nax1.tick_params(axis='x', labelcolor='black', labelsize=30, length=10, width=10, rotation=75)\n\nax2 = ax1.twinx()\nax2.set_ylabel('Deaths\/mi p\/ day', color='tab:red', fontsize=35)\nax2.tick_params(axis='y', labelcolor='tab:red', labelsize=35, length=10, width=10)\nax2.bar(obdiariobrasil.index, obdiariobrasil['obdiario'], color='tab:red', label='Deaths p\/ day -> last: {} in {}'.format(obdiariobrasil['obdiario'].iloc[-1], max(obdiariobrasil.index.date)))\n\nax3 = ax2\nax3.plot(ma7_br.index, ma7_br['obdiario'], lw=8, color='purple', label='7-day Moving Average  -> last: {} in {}'.format(round(max(ma7_br[ma7_br['obdiario'].notna()].values)[0],2), max(ma7_br.index.date)))\nax3.legend(loc=1, bbox_to_anchor=(0.79,1.03), fontsize=30)\n\nx= np.arange(np.datetime64(min(final_res_ob_br.index)), np.datetime64(max(final_res_ob_br.index) + timedelta(days=1)), timedelta(days=5)).astype(datetime)\nk = []\nfor i in x:\n    k.append(i.date())\nx = k\nax2.set_xticks(x)\nax2.set_xticklabels(x)\n\nfig.tight_layout()\n\nplt.show();","94b2f9c0":"res_states_mean.sort_values(by='Mean of residential mobility', ascending=False).style.bar( color='#d65f5f')","bfc7440c":"fig, ax1 = plt.subplots(figsize=(20,10))\n\nplt.title(\"Residential mobility and daily deaths in RJ\", fontsize=40)\n\nax1.set_ylabel('Residential google mobility', color='tab:blue', fontsize=35)\nax1.tick_params(axis='y', labelcolor='tab:blue', labelsize=35, length=10, width=10)\nax1.plot(final_res_ob_rj.index, final_res_ob_rj['google_res'], color='tab:blue', lw=5, label='google')\nax1.set_xlabel('Date', color='black', fontsize=30)\nax1.tick_params(axis='x', labelcolor='black', labelsize=30, length=10, width=10, rotation=75)\n\nax2 = ax1.twinx()\nax2.set_ylabel('Deaths\/mi p\/ day', color='tab:red', fontsize=35)\nax2.tick_params(axis='y', labelcolor='tab:red', labelsize=35, length=10, width=10)\nax2.bar(obdiariorj.index, obdiariorj['obdiario'], color='tab:red', label='Deaths p\/ day -> last: {} in {}'.format(obdiariorj['obdiario'][len(obdiariorj['obdiario']) -1], max(obdiariorj.index.date)))\n\nax3 = ax2\nax3.plot(ma7_obrj.index, ma7_obrj['obdiario'], lw=8, color='purple', label='7-day Moving Average -> last: {} in {}'.format(round(max(ma7_obrj[ma7_obrj['obdiario'].notna()].values)[0],2), max(ma7_obrj.index.date)))\nax3.legend(loc=1, bbox_to_anchor=(0.78,1), fontsize=30)\n\nx= np.arange(np.datetime64(min(final_res_ob_rj.index)), np.datetime64(max(final_res_ob_rj.index) + timedelta(days=1)), timedelta(days=5)).astype(datetime)\nk = []\nfor i in x:\n    k.append(i.date())\nx = k\nax2.set_xticks(x)\nax2.set_xticklabels(x)\n\nfig.tight_layout()\n\nplt.show();","7149527e":"fig, ax1 = plt.subplots(figsize=(20,10))\n\nplt.title(\"Residential mobility and daily deaths in SP\", fontsize=40)\n\nax1.set_ylabel('Residential google mobility', color='tab:blue', fontsize=35)\nax1.tick_params(axis='y', labelcolor='tab:blue', labelsize=35, length=10, width=10)\nax1.plot(final_res_ob_sp.index, final_res_ob_sp['google_res'], color='tab:blue', lw=5, label='google')\nax1.set_xlabel('Date', color='black', fontsize=30)\nax1.tick_params(axis='x', labelcolor='black', labelsize=30, length=10, width=10, rotation=75)\n\nax2 = ax1.twinx()\nax2.set_ylabel('Deaths\/mi p\/ day', color='tab:red', fontsize=35)\nax2.tick_params(axis='y', labelcolor='tab:red', labelsize=35, length=10, width=10)\nax2.bar(obdiariosp.index, obdiariosp['obdiario'], color='tab:red', label='Deaths p\/ day -> last: {} in {}'.format(obdiariosp['obdiario'][len(obdiariosp['obdiario']) -1], max(obdiariosp.index.date)))\n\nax3 = ax2\nax3.plot(ma7_obsp.index, ma7_obsp['obdiario'], lw=8, color='purple', label='7-day Moving Average  -> last: {} in {}'.format(round(max(ma7_obsp[ma7_obsp['obdiario'].notna()].values)[0],2), max(ma7_obsp.index.date)))\nax3.legend(loc=1, bbox_to_anchor=(0.79,1), fontsize=30)\n\nx= np.arange(np.datetime64(min(final_res_ob_sp.index)), np.datetime64(max(final_res_ob_sp.index) + timedelta(days=1)), timedelta(days=5)).astype(datetime)\nk = []\nfor i in x:\n    k.append(i.date())\nx = k\nax2.set_xticks(x)\nax2.set_xticklabels(x)\n\nfig.tight_layout()\n\nplt.show();","f696c0b7":"fig, ax1 = plt.subplots(figsize=(20,10))\n\nplt.title(\"Residential mobility and daily deaths in AM\", fontsize=40)\n\nax1.set_ylabel('Residential google mobility', color='tab:blue', fontsize=35)\nax1.tick_params(axis='y', labelcolor='tab:blue', labelsize=35, length=10, width=10)\nax1.plot(final_res_ob_am.index, final_res_ob_am['google_res'], color='tab:blue', lw=5, label='google')\nax1.set_xlabel('Date', color='black', fontsize=30)\nax1.tick_params(axis='x', labelcolor='black', labelsize=30, length=10, width=10, rotation=75)\n\nax2 = ax1.twinx()\nax2.set_ylabel('Deaths\/mi p\/ day', color='tab:red', fontsize=35)\nax2.tick_params(axis='y', labelcolor='tab:red', labelsize=35, length=10, width=10)\nax2.bar(obdiarioam.index, obdiarioam['obdiario'], color='tab:red', label='Deaths p\/ day -> last: {} in {}'.format(obdiarioam['obdiario'][len(obdiarioam['obdiario']) -1], max(obdiarioam.index.date)))\n\nax3 = ax2\nax3.plot(ma7_obam.index, ma7_obam['obdiario'], lw=8, color='purple', label='7-day Moving Average  -> last: {} in {}'.format(round(max(ma7_obam[ma7_obam['obdiario'].notna()].values)[0],2), max(ma7_obam.index.date)))\nax3.legend(loc=1, bbox_to_anchor=(0.77,1), fontsize=30)\n\nx= np.arange(np.datetime64(min(final_res_ob_am.index)), np.datetime64(max(final_res_ob_am.index) + timedelta(days=1)), timedelta(days=5)).astype(datetime)\nk = []\nfor i in x:\n    k.append(i.date())\nx = k\nax2.set_xticks(x)\nax2.set_xticklabels(x)\n\nfig.tight_layout()\n\nplt.show();","dfeabdc5":"pd.DataFrame(ma7_obrj['obdiario']).join(final_res_ob_rj['google_res']).dropna().corr().iloc[0,1]","5b254423":"for i in res_states_mean['State'].values:\n    if i == 'Distrito Federal':\n        state = 'Federal District'\n    else:\n        state = 'State of '+i\n    \n    obok, dataok = acummdeaths(i)\n    obdiariook = calcdiario2(obok)\n    ma7_obok = obdiariook.rolling(window=7).mean()\n    final_res_ob_ok = create_df_mob_ob2(dataok, obdiariook, state)\n    print('corelation of {} is {}'.format(state, pd.DataFrame(ma7_obok['obdiario']).join(final_res_ob_ok['google_res']).dropna().corr().iloc[0,1]))","c119b58c":"pd.DataFrame(ma7_obrj['obdiario']).join(final_res_ob_rj['google_res']).dropna().corr().iloc[0,1]","f209910a":"pd.DataFrame(ma7_obrj['obdiario']).set_index(ma7_obrj['obdiario'].index  + timedelta(days=int(8))).join(final_res_ob_rj['google_res']).dropna().corr().iloc[0,1]","9776a85d":"teste = {}\nfor i in np.arange(1,31):\n    teste[i] = pd.DataFrame(ma7_obrj['obdiario']).set_index(ma7_obrj['obdiario'].index  + timedelta(days=int(i))).join(final_res_ob_rj['google_res']).dropna().corr().iloc[0,1]\nprint(max(teste, key=teste.get), teste[22])","336dcb9d":"teste.get","98d2b4c6":"teste.values()","c4c51d8d":"teste2 = []\nfor i in res_states_mean['State'].values:\n    if i == 'Distrito Federal':\n        state = 'Federal District'\n    else:\n        state = 'State of '+i\n    \n    obok, dataok = acummdeaths(i)\n    obdiariook = calcdiario2(obok)\n    ma7_obok = obdiariook.rolling(window=7).mean()\n    final_res_ob_ok = create_df_mob_ob2(dataok, obdiariook, state)\n    #print('corelation of {} is {}'.format(state, pd.DataFrame(ma7_obok['obdiario']).join(final_res_ob_ok['google_res']).dropna().corr().iloc[0,1]))\n    \n    teste = {}\n    for i in np.arange(1,31):\n        teste[i] = pd.DataFrame(ma7_obok['obdiario']).set_index(ma7_obok['obdiario'].index  + timedelta(days=int(i))).join(final_res_ob_ok['google_res']).dropna().corr().iloc[0,1]\n    minimo = min(teste, key=teste.get)\n    print(state, minimo, teste[minimo])\n    \n    teste2.append((state, minimo, teste[minimo]))\n\nteste2 = pd.DataFrame(teste2).rename(columns={0:'state', 1:'day_offset', 2:'correlation'})","1a2b8943":"teste2.sort_values(by='correlation')['day_offset'].mean()","0430feac":"teste2.sort_values(by='correlation')","7b8d9df5":"    i = 'Rio de Janeiro'\n    state = 'State of '+i\n    \n    obok, dataok = acummdeaths(i)\n    obdiariook = calcdiario2(obok)\n    ma7_obok = obdiariook.rolling(window=7).mean()\n    final_res_ob_ok = create_df_mob_ob2(dataok, obdiariook, state)\n    \n    teste = pd.DataFrame(ma7_obok['obdiario']).set_index(ma7_obok['obdiario'].index  + timedelta(days=int(22))).join(final_res_ob_ok['google_res']).dropna()\n    ax = sns.scatterplot(x=\"google_res\", y=\"obdiario\", data=teste)","b46e5400":"teste2 = []\nfor i in res_states_mean['State'].values:\n    if i == 'Distrito Federal':\n        state = 'Federal District'\n    else:\n        state = 'State of '+i\n    \n    obok, dataok = acummdeaths(i)\n    obdiariook = calcdiario2(obok)\n    ma7_obok = obdiariook.rolling(window=7).mean()\n    final_res_ob_ok = create_df_mob_ob2(dataok, obdiariook, state)\n    \n    teste = {}\n    for j in np.arange(1,31):\n        teste[j] = pd.DataFrame(ma7_obok['obdiario']).set_index(ma7_obok['obdiario'].index  + timedelta(days=int(j))).join(final_res_ob_ok['google_res']).dropna().corr().iloc[0,1]\n    minimo = min(teste, key=teste.get)\n    \n    teste2.append((state, minimo, teste[minimo]))\n      \n    temp = pd.DataFrame(ma7_obok['obdiario']).set_index(ma7_obok['obdiario'].index  + timedelta(days=int(teste[minimo]))).join(final_res_ob_ok['google_res']).dropna()\n    \n    plt.figure()\n    sns.scatterplot(x=\"google_res\", y=\"obdiario\", data=temp).set_title(i)\n\nteste2 = pd.DataFrame(teste2).rename(columns={0:'state', 1:'day_offset', 2:'correlation'})","3029adfa":"### Pre-processing","a1f42130":"### Functions","b5521741":"# Total deaths in the country","a1fb1dd1":">First, before the mobility issues, it is presented the context of COVID-19 through the number of deaths, which, due to the sub notification problem, is more accurate that the number of infections. In the next two graphs, it is possible to observe the ascending curve of accumulated deaths over time, and the number of records notifieds per day in absolute values in the first graph and per million in the second.<br><br>\nSince the first death in Brazil on March 17, 2020, the mean of new deaths reported is lower on Sundays and Mondays. This problem occurs because the daily numbers communicated by the government are not about the last 24h, [they could be related to weeks ago](https:\/\/www.terra.com.br\/vida-e-estilo\/saude\/atraso-em-notificacoes-faz-numeros-da-covid-19-cair-aos-domingos-e-segundas,4fe30cd864373e5da9bd2c951327723f8wy0p6zq.html). This is more one challenge to make predictions based on these numbers. Thus, it is presented also in each graph a line with the 7-day simple moving average [(SMA)](https:\/\/www.sciencedirect.com\/topics\/engineering\/moving-average) of the number of notifications per day. Each point in the SMA curve corresponds to the average of the last 7 days.","cdfed668":"### Datasets","f633ba5c":">**It was shown some data related to COVID19 pandemic in Brazil and the changes in mobility during the analyzed time frame, using open data.**<br> \n**As broadly addressed in several scientific publications, there is no doubt about the need for social isolation as a countermeasure against COVID-19 and the collapse of health systems, with more deaths.**\n\n <font style=\"color:#050aff\"><h3><center>Thanks!<\/center><\/h3><\/font>\n","6cecdca9":">The next three graphs show details of the numbers of deaths in S\u00e3o Paulo, Rio de Janeiro, and Amazonas states. These states where chosen because S\u00e3o Paulo and Rio de Janeiro have the higher absolute numbers and Amazonas is the more impacted proportionally, considering deaths per million. The figures contains the absolute numbers and per million, besides the 7-day simple moving average [(SMA)](https:\/\/www.sciencedirect.com\/topics\/engineering\/moving-average) curve, since the deaths records provided [could be related to weeks ago](https:\/\/www.terra.com.br\/vida-e-estilo\/saude\/atraso-em-notificacoes-faz-numeros-da-covid-19-cair-aos-domingos-e-segundas,4fe30cd864373e5da9bd2c951327723f8wy0p6zq.html). The image referring to Rio de Janeiro seems to be the one with the greatest growth trend, considering the SMA curve.","7233a0b6":">The next graphs show a macro view of the death numbers for the states of Brazil. The first graph contains the population of each state. The second figure shows the evolution of deaths in accumulated absolute numbers. The third graph shows the total of deaths in absolute numbers in each state, and the fourth graph presents he values per million, considerind the population of each state. <br><br>\nIt is possible to observe that considering absolute values, S\u00e3o Paulo has the higher number of deaths, followed by Rio de Janeiro, and Cear\u00e1. When considering the population, it is possible to observe that Amazonas is the most impacted, with the higher number of deaths per million, Cear\u00e1 is in second, and Pernambuco in third.","4173e19e":">To analize the mobility in Brazil during COVID-19 pandemic it is used here Google and Apple mobility reports, and as a reference the map of the company named Inloco, available publicly. First a brief explanation of each mobility source used:\n\n>>Google\n>>>The mobility reports from Google uses percentage change of visits and permanence time to show tendences of displacement of people over time in different category of locations such as retail and leisure, markets and pharmacies, parks, public transport stations, workplaces and residential areas. The reference value used in its dataset is the median of the corresponding day of the week, over the five-week period from January 3 to February 6, 2020. According to Google, the most recent data represents approximately 2 3 days ago, which is the time needed to produce the data sets.<br>\n**Source: [Google mobility - COVID19](https:\/\/www.google.com\/covid19\/mobility\/)**\n\n>>Apple\n>>>The data from Apple shows a relative volume of direction requests by type of transport (diving, walking or public transportation) made to Apple maps compared to a reference value in January 13, 2020.<br>\n**Source: [Apple mobility - COVID19](https:\/\/www.apple.com\/covid19\/mobility)**\n\n>>Inloco\n>>>Inloco is a company that created an index that aims to show the percentage of the Brazilian population that is respecting the distancing recommendation. They inform in its website that use data from telephony, GPS and Wi-Fi  networks. Despite the data used by Inloco does not represent the entire Brazilian population, they supposedly have a large database. There are some news about its map, like in [en](https:\/\/labs.ebanx.com\/en\/notes\/in-loco-social-isolation-brazil-data\/), and [pt-br](https:\/\/tecnoblog.net\/332496\/in-loco-divulga-mapa-com-indice-de-isolamento-social-no-brasil\/).<br>\n**Source: [Inloco map - COVID19](https:\/\/www.inloco.com.br\/covid-19)**\n\n","a1a0d52a":"# How is mobility going in Brazil with COVID-19?\n<hr>\n![COVID-19](https:\/\/github.com\/saraivacode\/covid19\/blob\/master\/19rjsp.png?raw=true)\n*Image Credits : [Portal FGV](https:\/\/portal.fgv.br\/noticias\/fgv-emap-e-fiocruz-divulgam-estimativa-risco-espalhamento-covid-19-brasil) and [Pexels](https:\/\/www.pexels.com\/public-domain-images\/)*\n\n\n>The **COVID-19** is an infectious decease recently discovered, and the majority of affected people present mild or moderate symptoms. Despite that, some people could face severe consequences. Nowadays, the COVID-19 is severely impacting the world due to its high rates of infections, which collapses the health systems of affected countries, resulting in several deaths.<br>\nThe transmission of COVID-19 occurs through contact with the secretions of a sick person or infected surfaces. As long as an efficient treatment or a vaccine is not available, the only way to avoid the transmission and the consequent collapse of health systems, with more deaths, is through **social isolation**, despite its economic implications. Several scientific publications and entities defend social isolation as a way to control the spread of COVID-19. This is defended for example by the **World Health Organization** <a href=\"https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019\">[2]<\/a>, the **UK government** <a href=\"https:\/\/www.gov.uk\/government\/publications\/covid-19-stay-at-home-guidance\/stay-at-home-guidance-for-households-with-possible-coronavirus-covid-19-infection\"> [3]<\/a>, and the **Center for Disease Control and Prevention of the United States** <a href=\"https:\/\/www.cdc.gov\/coronavirus\/2019-ncov\/prevent-getting-sick\/social-distancing.html\">[4]<\/a>.<br>\nIn **Brazil**, the first recorded case of infection was on Feb 25, 2020, and now (May 2020) the country has the most cases and deaths per million in **Latin America**, even with probably substantial underestimates <a href=\"https:\/\/www.thelancet.com\/journals\/lancet\/article\/PIIS0140-6736(20)31095-3\/fulltext\">[1]<\/a>. Unfortunately, some people in Brazil disbelief the need for social isolation <a href=\"https:\/\/www1.folha.uol.com.br\/internacional\/en\/scienceandhealth\/2020\/04\/of-15-countries-brazil-is-2nd-with-greatest-disbelief-in-social-isolation-says-study.shtml\">[5]<\/a>, as long as the COVID-19 deaths rate increases each day.<br>\nThe intention here is to analize the mobility of the population during the COVID-19 evolution in Brazil, using public available data. It is used open data about the COVID-19 cases from the BR government <a href=\"https:\/\/covid.saude.gov.br\">[6]<\/a>, and mobility data from Apple <a href=\"https:\/\/www.apple.com\/covid19\/mobility\">[7]<\/a>, Google <a href=\"https:\/\/www.google.com\/covid19\/mobility\/\">[8]<\/a>, besides the map of a company named Inloco <a href=\"https:\/\/mapabrasileirodacovid.inloco.com.br\/pt\/?hsCtaTracking=68943485-8e65-4d6f-8ac0-af7c3ce710a2%7C45448575-c1a6-42c8-86d9-c68a42fa3fcc\">[9]<\/a>. In this analysis we used the numbers of deaths, instead of those of infections, as they are more accurate, considering the probably high underreporting in Brazil <a href=\"https:\/\/www.ft.com\/content\/7b46b8c3-b395-45ba-af68-50280cfeed47?shareType=nongift\">[10]<\/a>.<br>\n\n<hr>\n\n<center> <h4> This analisys is firstly based on data until <font style=\"color:#ff0a11\">May 2020 <\/font>. <br> I will try to update this notebook continuously with new viz and updated data. <font style=\"color:#55bb6d\">Please UPVOTE if you LIKE! <\/font> <\/h4> <\/center>\n\n<hr>\n\n### References:\n\n* <a href=\"https:\/\/www.thelancet.com\/journals\/lancet\/article\/PIIS0140-6736(20)31095-3\/fulltext\">[1] https:\/\/www.thelancet.com\/journals\/lancet\/article\/PIIS0140-6736(20)31095-3\/fulltext <\/a>\n\n* <a href=\"https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019\">[2] https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019<\/a>\n\n* <a href=\"https:\/\/www.gov.uk\/government\/publications\/covid-19-stay-at-home-guidance\/stay-at-home-guidance-for-households-with-possible-coronavirus-covid-19-infection\">[3] https:\/\/www.gov.uk\/government\/publications\/covid-19-stay-at-home-guidance\/stay-at-home-guidance-for-households-with-possible-coronavirus-covid-19-infection<\/a>\n\n* <a href=\"https:\/\/www.cdc.gov\/coronavirus\/2019-ncov\/prevent-getting-sick\/social-distancing.html\">[4] https:\/\/www.cdc.gov\/coronavirus\/2019-ncov\/prevent-getting-sick\/social-distancing.html<\/a>\n \n* <a href=\"https:\/\/www1.folha.uol.com.br\/internacional\/en\/scienceandhealth\/2020\/04\/of-15-countries-brazil-is-2nd-with-greatest-disbelief-in-social-isolation-says-study.shtml\">[5] https:\/\/www1.folha.uol.com.br\/internacional\/en\/scienceandhealth\/2020\/04\/of-15-countries-brazil-is-2nd-with-greatest-disbelief-in-social-isolation-says-study.shtml<\/a>\n \n* <a href=\"https:\/\/covid.saude.gov.br\">[6] https:\/\/covid.saude.gov.br<\/a>\n \n* <a href=\"https:\/\/www.apple.com\/covid19\/mobility\">[7] https:\/\/www.apple.com\/covid19\/mobility<\/a>\n \n* <a href=\"https:\/\/www.google.com\/covid19\/mobility\/\">[8] https:\/\/www.google.com\/covid19\/mobility\/<\/a>\n \n* <a href=\"https:\/\/mapabrasileirodacovid.inloco.com.br\/pt\/?hsCtaTracking=68943485-8e65-4d6f-8ac0-af7c3ce710a2%7C45448575-c1a6-42c8-86d9-c68a42fa3fcc\">[9] https:\/\/mapabrasileirodacovid.inloco.com.br\/pt\/?hsCtaTracking=68943485-8e65-4d6f-8ac0-af7c3ce710a2%7C45448575-c1a6-42c8-86d9-c68a42fa3fcc<\/a>\n\n* <a href=\"https:\/\/www.ft.com\/content\/7b46b8c3-b395-45ba-af68-50280cfeed47?shareType=nongift\">[10] https:\/\/www.ft.com\/content\/7b46b8c3-b395-45ba-af68-50280cfeed47?shareType=nongift<\/a>.\n<hr>\n***","1f7fa6bf":"## Content :\n\n* [Imports](#Imports)\n* [Datasets](#Datasets)\n* [Functions](#Functions)\n* [Pre-processing](#Pre-processing)\n* [Total deaths in the country](#Total-deaths-in-the-country)\n* [Deaths in States of Brazil](#Deaths-in-States-of-Brazil)\n    * [Rio de Janeiro, Sao Paulo, and Amazonas deaths](#Rio-de-Janeiro,-Sao-Paulo,-and-Amazonas-deaths)\n* [Mobility in Brazil](#Mobility-in-Brazil)\n* [Mobility in states of Brazil](#Mobility-in-states-of-Brazil)","ad6f60fc":"### Imports","cd27e7ec":">The table below shows the mean of the Google mobility residential indicator and the deaths per million for each state during the analyzed time frame. The graphs show the deaths versus the residential mobility indicator for the states of Rio de Janeiro, S\u00e3o Paulo, and Amazonas.","5da03c2b":"## Rio de Janeiro, Sao Paulo, and Amazonas deaths","32c71f33":"# Mobility in states of Brazil","05857f72":"# Deaths in States of Brazil","e426294e":"<center> <h1>Conclusions<\/h1> <\/center>","7cde8589":"# Mobility in Brazil","01116e51":"# Testes","434eb89f":"<div class='tableauPlaceholder' id='viz1586263510113' style='position: relative'>\n  <noscript>\n    <a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;MK&#47;MKTScoredeisolamentosocial&#47;VisoGeral&#47;1_rss.png' style='border: none' \/><\/a>\n  <\/noscript>\n  <object class='tableauViz' style='display:none;'>\n    <param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/>\n    <param name='embed_code_version' value='3' \/>\n    <param name='site_root' value='' \/>\n    <param name='name' value='MKTScoredeisolamentosocial&#47;VisoGeral' \/>\n    <param name='tabs' value='yes' \/>\n    <param name='toolbar' value='yes' \/>\n    <param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;MK&#47;MKTScoredeisolamentosocial&#47;VisoGeral&#47;1.png' \/>\n    <param name='animate_transition' value='yes' \/>\n    <param name='display_static_image' value='yes' \/>\n    <param name='display_spinner' value='yes' \/>\n    <param name='display_overlay' value='yes' \/>\n    <param name='display_count' value='yes' \/>\n  <\/object>\n<\/div>\n\n<script type='text\/javascript'>\n  var divElement = document.getElementById('viz1586263510113');\n  var vizElement = divElement.getElementsByTagName('object')[0];\n  if (divElement.offsetWidth > 800) {\n    vizElement.style.width = '1100px';\n    vizElement.style.height = '850px';\n  } else if (divElement.offsetWidth > 500) {\n    vizElement.style.width = '1100px';\n    vizElement.style.height = '850px';\n  } else {\n    vizElement.style.width = '100%';\n    vizElement.style.height = '950px';\n  }\n  var scriptElement = document.createElement('script');\n  scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';\n  vizElement.parentNode.insertBefore(scriptElement, vizElement);\n<\/script>","dc1db79f":">For this section, it was considered data at the country level. As can be seen in the correlation heatmap in the first figure of this section, there is a high negative correlation between the values of residential mobility from the Google dataset and the other values. This negative correlation makes sense, and it is expected since the other values refer to tendencies of mobility to several different places or displacements using different ways. On the other hand, residential mobility refers to the tendency of going to the or staying at home.<br><br>\nIn the second graph are the mobility indicators of Apple and Google over time. It is possible to observe that when the residential rate increases, the other values decrease. There is an increment in the residential indicator of around 20% in the analyzed time frame. The Inloco Map shows an increment of social isolation rate in the same time interval. The last graph shows that the residential mobility indicator starts to increase with the first registers of deaths by COVID-19. <br><br>\n**It is necessary to note that any conclusion using this data must consider that the registers of death are provided by the authorities delayed, and there is a period since the infection until the deaths. Thus, it is expected that it takes some days until social isolation results in effects to reduce the number of deaths records.**","39448d18":"![COVID-19](https:\/\/github.com\/saraivacode\/covid19\/blob\/master\/indicebrazil2.PNG?raw=true)\n*Image Credits : [Inloco Map](https:\/\/mapabrasileirodacovid.inloco.com.br\/pt\/?hsCtaTracking=68943485-8e65-4d6f-8ac0-af7c3ce710a2%7C45448575-c1a6-42c8-86d9-c68a42fa3fcc)*"}}