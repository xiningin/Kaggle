{"cell_type":{"8df0ffd2":"code","6f973d4f":"code","f0a9589c":"code","73aa0e39":"code","04f13dd9":"code","b1eda3d1":"code","c9d4ebf8":"code","f20d62d7":"code","85a0df13":"code","0dcac327":"code","4bd6e2bb":"code","a577e175":"code","81132d71":"code","4fce75fb":"code","05c6d3dd":"code","1ce165b8":"code","fc8d5705":"code","b8e57336":"code","98a44151":"code","a7ebf823":"code","e691e899":"code","053166f1":"code","776f42fa":"code","f1ae4aa5":"code","a4006360":"code","d4d864fa":"code","7d322e07":"code","5f9b0824":"code","b01b1db7":"code","2544850d":"code","8dbcea0f":"code","874794ce":"code","c68f61d1":"code","954b1608":"code","fd87c94e":"code","5d5fb8f6":"code","be00b92f":"code","e43927e3":"code","0c5e6ec3":"code","9f0cabcd":"code","7ab69518":"code","bddb1eb6":"code","b3fb2a39":"code","2dfb12d7":"code","8ff7676a":"code","97bcbf77":"code","a4e0f339":"code","174d869e":"code","67864cc4":"code","0fa1c486":"code","f5b0fd6a":"code","55d0f8c7":"code","03b55e71":"code","b60d5ad6":"code","eef0f482":"code","03b2e4d1":"code","ee55bcdb":"code","047bcf1b":"code","aee0bfc2":"code","a11f225a":"code","f8c442cd":"code","6af32d98":"code","24c23d1f":"code","debfffbb":"code","7ba473b8":"code","bf2a1207":"code","9caa7145":"markdown","667f6416":"markdown","7afc1e49":"markdown","f43d82b6":"markdown","3856fe5a":"markdown","a3c1fd22":"markdown","6a45093f":"markdown","98fc8a7a":"markdown","5039e727":"markdown","94f2c265":"markdown","1f368d23":"markdown","8316d9f4":"markdown","892fc23f":"markdown","56c592c9":"markdown","c92c4639":"markdown"},"source":{"8df0ffd2":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom warnings import filterwarnings\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nimport os\nimport os.path\nfrom pathlib import Path\nimport cv2\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom keras.optimizers import RMSprop,Adam","6f973d4f":"filterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","f0a9589c":"Train_Data_Path = Path(\"..\/input\/brain-tumor-classification-mri\/Training\")","73aa0e39":"Train_JPG_Path = list(Train_Data_Path.glob(r\"*\/*.jpg\"))","04f13dd9":"print(Train_JPG_Path[0:10])","b1eda3d1":"Train_JPG_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],Train_JPG_Path))","c9d4ebf8":"print(\"NO: \",Train_JPG_Labels.count(\"no_tumor\"))\nprint(\"Pituitary: \",Train_JPG_Labels.count(\"pituitary_tumor\"))\nprint(\"Meningioma: \",Train_JPG_Labels.count(\"meningioma_tumor\"))\nprint(\"Glioma: \",Train_JPG_Labels.count(\"glioma_tumor\"))","f20d62d7":"Train_JPG_Path_Series = pd.Series(Train_JPG_Path,name=\"JPG\").astype(str)\nTrain_JPG_Labels_Series = pd.Series(Train_JPG_Labels, name=\"TUMOR_CATEGORY\")","85a0df13":"print(Train_JPG_Path_Series.head())\nprint(\"-----\"*20)\nprint(Train_JPG_Labels_Series.head())","0dcac327":"Main_Train_Data = pd.concat([Train_JPG_Path_Series,Train_JPG_Labels_Series],axis=1)","4bd6e2bb":"print(Main_Train_Data.head())","a577e175":"Test_Data_Path = Path(\"..\/input\/brain-tumor-classification-mri\/Testing\")","81132d71":"Test_JPG_Path = list(Test_Data_Path.glob(r\"*\/*.jpg\"))","4fce75fb":"print(Test_JPG_Path[0:5])","05c6d3dd":"Test_JPG_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],Test_JPG_Path))","1ce165b8":"print(\"NO: \",Test_JPG_Labels.count(\"no_tumor\"))\nprint(\"Pituitary: \",Test_JPG_Labels.count(\"pituitary_tumor\"))\nprint(\"Meningioma: \",Test_JPG_Labels.count(\"meningioma_tumor\"))\nprint(\"Glioma: \",Test_JPG_Labels.count(\"glioma_tumor\"))","fc8d5705":"Test_JPG_Path_Series = pd.Series(Test_JPG_Path,name=\"JPG\").astype(str)\nTest_JPG_Labels_Labels = pd.Series(Test_JPG_Labels,name=\"TUMOR_CATEGORY\")","b8e57336":"print(Test_JPG_Path_Series.head())\nprint(\"-----\"*20)\nprint(Test_JPG_Labels_Labels.head())","98a44151":"Main_Test_Data = pd.concat([Test_JPG_Path_Series,Test_JPG_Labels_Labels],axis=1)","a7ebf823":"print(Main_Test_Data.head())","e691e899":"Main_Train_Data = Main_Train_Data.sample(frac=1).reset_index(drop=True)\nMain_Test_Data = Main_Test_Data.sample(frac=1).reset_index(drop=True)","053166f1":"print(Main_Train_Data.head(10))\nprint(\"----\"*20)\nprint(Main_Test_Data.head(10))","776f42fa":"Main_Train_Data[\"TUMOR_CATEGORY\"].replace({\"glioma_tumor\":\"Glioma\",\n                                         \"meningioma_tumor\":\"Meningioma\",\n                                         \"no_tumor\":\"No\",\n                                         \"pituitary_tumor\":\"Pituitary\"},inplace=True)","f1ae4aa5":"print(Main_Train_Data.head())","a4006360":"Main_Test_Data[\"TUMOR_CATEGORY\"].replace({\"glioma_tumor\":\"Glioma\",\n                                         \"meningioma_tumor\":\"Meningioma\",\n                                         \"no_tumor\":\"No\",\n                                         \"pituitary_tumor\":\"Pituitary\"},inplace=True)","d4d864fa":"print(Main_Test_Data.head())","7d322e07":"figure = plt.figure(figsize=(8,8))\nplt.imshow(plt.imread(Main_Train_Data[\"JPG\"][10],0))\nplt.title(Main_Train_Data[\"TUMOR_CATEGORY\"][10])\nplt.show()","5f9b0824":"figure = plt.figure(figsize=(8,8))\nplt.imshow(plt.imread(Main_Train_Data[\"JPG\"][7],0))\nplt.title(Main_Train_Data[\"TUMOR_CATEGORY\"][7])\nplt.show()","b01b1db7":"figure = plt.figure(figsize=(8,8))\nplt.imshow(plt.imread(Main_Train_Data[\"JPG\"][200],0))\nplt.title(Main_Train_Data[\"TUMOR_CATEGORY\"][200])\nplt.show()","2544850d":"fig, axes = plt.subplots(nrows=5, ncols=5, figsize=(8, 8),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(Main_Train_Data[\"JPG\"][i]))\n    ax.set_title(Main_Train_Data[\"TUMOR_CATEGORY\"][i])\nplt.tight_layout()\nplt.show()","8dbcea0f":"figure = plt.figure(figsize=(8,8))\nplt.imshow(plt.imread(Main_Test_Data[\"JPG\"][200],0))\nplt.title(Main_Test_Data[\"TUMOR_CATEGORY\"][200])\nplt.show()","874794ce":"figure = plt.figure(figsize=(8,8))\nplt.imshow(plt.imread(Main_Test_Data[\"JPG\"][2],0))\nplt.title(Main_Test_Data[\"TUMOR_CATEGORY\"][2])\nplt.show()","c68f61d1":"figure = plt.figure(figsize=(8,8))\nplt.imshow(plt.imread(Main_Test_Data[\"JPG\"][12],0))\nplt.title(Main_Test_Data[\"TUMOR_CATEGORY\"][12])\nplt.show()","954b1608":"fig, axes = plt.subplots(nrows=5, ncols=5, figsize=(8, 8),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(Main_Test_Data[\"JPG\"][i]))\n    ax.set_title(Main_Test_Data[\"TUMOR_CATEGORY\"][i])\nplt.tight_layout()\nplt.show()","fd87c94e":"train_data,test_data = train_test_split(Main_Train_Data,train_size=0.9,random_state=42)","5d5fb8f6":"print(train_data.shape)","be00b92f":"print(test_data.shape)","e43927e3":"Generator = ImageDataGenerator(rescale=1.\/255,\n                               brightness_range=[0.2,0.9],\n                               featurewise_center=False,  \n        samplewise_center=False, \n        featurewise_std_normalization=False,  \n        samplewise_std_normalization=False,  \n        zca_whitening=False,  \n        rotation_range=0,\n        zoom_range = 0,\n        width_shift_range=0,  \n        height_shift_range=0, validation_split=0.1)","0c5e6ec3":"Train_Set = Generator.flow_from_dataframe(dataframe=train_data,\n                                         x_col=\"JPG\",\n                                         y_col=\"TUMOR_CATEGORY\",\n                                         seed=42,\n                                          color_mode=\"rgb\",\n                                         class_mode=\"categorical\",\n                                          batch_size=10,\n                                         subset=\"training\"\n                                         )","9f0cabcd":"print(Train_Set.class_indices)\nprint(Train_Set.classes[0:5])\nprint(Train_Set.image_shape)","7ab69518":"Validation_Set = Generator.flow_from_dataframe(dataframe=train_data,\n                                              x_col=\"JPG\",\n                                              y_col=\"TUMOR_CATEGORY\",\n                                              seed=42,\n                                               color_mode=\"rgb\",\n                                              class_mode=\"categorical\",\n                                              batch_size=10,\n                                               subset=\"validation\"\n                                              )","bddb1eb6":"print(Validation_Set.class_indices)\nprint(Validation_Set.classes[0:5])\nprint(Validation_Set.image_shape)","b3fb2a39":"Test_Set = Generator.flow_from_dataframe(dataframe=test_data,\n                                              x_col=\"JPG\",\n                                              y_col=\"TUMOR_CATEGORY\",\n                                              seed=42,\n                                               color_mode=\"rgb\",\n                                              class_mode=\"categorical\",\n                                              batch_size=10\n                                              )","2dfb12d7":"print(Test_Set.class_indices)\nprint(Test_Set.classes[0:5])\nprint(Test_Set.image_shape)","8ff7676a":"Model = Sequential()\n#\nModel.add(Conv2D(filters = 64, kernel_size = (3,3), \n                 activation ='relu', input_shape = (256,256,3)))\nModel.add(MaxPool2D(pool_size=(2,2)))\nModel.add(Dropout(0.2))\n\n#\nModel.add(Conv2D(filters = 128, kernel_size = (3,3), \n                 activation ='relu'))\nModel.add(MaxPool2D(pool_size=(2,2)))\nModel.add(Dropout(0.2))\n\n#\nModel.add(Conv2D(filters = 128, kernel_size = (3,3), \n                 activation ='relu'))\nModel.add(MaxPool2D(pool_size=(2,2)))\nModel.add(Dropout(0.2))\n\n#\nModel.add(Conv2D(filters = 128, kernel_size = (3,3), \n                 activation ='relu'))\nModel.add(MaxPool2D(pool_size=(2,2)))\nModel.add(Dropout(0.2))\n\n# \nModel.add(Flatten())\nModel.add(Dense(256, activation = \"relu\"))\nModel.add(Dropout(0.25))\nModel.add(Dense(4, activation = \"softmax\"))","97bcbf77":"Model.compile(optimizer=RMSprop(lr=0.001),\n             loss=\"categorical_crossentropy\",\n             metrics=[\"accuracy\"])","a4e0f339":"Call_Back = tf.keras.callbacks.EarlyStopping(monitor=\"loss\",patience=2,mode=\"min\")","174d869e":"ANN_Model = Model.fit(Train_Set,\n                      validation_data=Validation_Set,\n                     epochs=50,\n                      batch_size=20,\n                     callbacks=Call_Back)","67864cc4":"Model_Results = Model.evaluate(Test_Set,verbose=False)\nprint(\"LOSS:  \" + \"%.4f\" % Model_Results[0])\nprint(\"ACCURACY:  \" + \"%.2f\" % Model_Results[1])","0fa1c486":"print(Model.summary())","f5b0fd6a":"plt.plot(ANN_Model.history[\"accuracy\"])\nplt.plot(ANN_Model.history[\"val_accuracy\"])\nplt.ylabel(\"ACCURACY\")\nplt.legend()\nplt.show()","55d0f8c7":"HistoryDict = ANN_Model.history\n\nval_losses = HistoryDict[\"val_loss\"]\nval_acc = HistoryDict[\"val_accuracy\"]\nacc = HistoryDict[\"accuracy\"]\nlosses = HistoryDict[\"loss\"]\nepochs = range(1,len(val_losses)+1)","03b55e71":"plt.plot(epochs,val_losses,\"k-\",label=\"LOSS\")\nplt.plot(epochs,val_acc,\"r\",label=\"ACCURACY\")\nplt.title(\"LOSS & ACCURACY\")\nplt.xlabel(\"EPOCH\")\nplt.ylabel(\"Loss & Acc\")\nplt.legend()\nplt.show()","b60d5ad6":"plt.plot(epochs,losses,\"k-\",label=\"LOSS\")\nplt.plot(epochs,val_losses,\"r\",label=\"LOSS VAL\")\nplt.title(\"LOSS & LOSS VAL\")\nplt.xlabel(\"EPOCH\")\nplt.ylabel(\"LOSS & LOSS VAL\")\nplt.legend()\nplt.show()","eef0f482":"Dict_Summary = pd.DataFrame(ANN_Model.history)\nDict_Summary.plot()","03b2e4d1":"Main_Test_Set = Generator.flow_from_dataframe(dataframe=Main_Test_Data,\n                                              x_col=\"JPG\",\n                                              y_col=\"TUMOR_CATEGORY\",\n                                              seed=42,\n                                               color_mode=\"rgb\",\n                                              class_mode=\"categorical\",\n                                              batch_size=20\n                                              )","ee55bcdb":"Model_Predict = Model.predict(Main_Test_Set)","047bcf1b":"Model_Predict = np.argmax(Model_Predict,axis=1)","aee0bfc2":"Predict_Label = (Main_Test_Set.class_indices)\nPredict_Label = dict((v,k) for k,v in Predict_Label.items())","a11f225a":"Model_Predict = [Predict_Label[k] for k in Model_Predict]","f8c442cd":"print(Model_Predict[:50])","6af32d98":"Test_Results = list(Main_Test_Data[\"TUMOR_CATEGORY\"])","24c23d1f":"print(Test_Results[:50])","debfffbb":"Class_Report = classification_report(Test_Results,Model_Predict)\nprint(Class_Report)","7ba473b8":"Conf_Report = confusion_matrix(Test_Results,Model_Predict, normalize=\"true\")\nfigure = plt.figure(figsize=(10,10))\nsns.heatmap(Conf_Report,vmax=1,center=0,vmin=-1,annot=True)\nplt.show()","bf2a1207":"fig, axes = plt.subplots(nrows=8,\n                         ncols=8,\n                         figsize=(20, 20),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(Main_Test_Data[\"JPG\"].iloc[i]))\n    ax.set_title(f\"TEST:{Main_Test_Data.TUMOR_CATEGORY.iloc[i]}\\n PREDICTION:{Model_Predict[i]}\")\nplt.tight_layout()\nplt.show()","9caa7145":"# PATH PROCESS","667f6416":"# PREDICTION PROCESS","7afc1e49":"#### TEST","f43d82b6":"#### TEST","3856fe5a":"# MODEL","a3c1fd22":"# REPLACE NAME","6a45093f":"# MODEL TRAINING DATA","98fc8a7a":"#### TRAIN","5039e727":"#### IGNORING WARNINGS","94f2c265":"# VISUALIZATION","1f368d23":"# IMAGE GENERATOR","8316d9f4":"# PACKAGES AND LIBRARIES","892fc23f":"#### TRAIN","56c592c9":"# Abstract\n* A Brain tumor is considered as one of the aggressive diseases, among children and adults. Brain tumors account for 85 to 90 percent of all primary Central Nervous System(CNS) tumors. Every year, around 11,700 people are diagnosed with a brain tumor. The 5-year survival rate for people with a cancerous brain or CNS tumor is approximately 34 percent for men and36 percent for women. Brain Tumors are classified as: Benign Tumor, Malignant Tumor, Pituitary Tumor, etc. Proper treatment, planning, and accurate diagnostics should be implemented to improve the life expectancy of the patients. The best technique to detect brain tumors is Magnetic Resonance Imaging (MRI). A huge amount of image data is generated through the scans. These images are examined by the radiologist. A manual examination can be error-prone due to the level of complexities involved in brain tumors and their properties.\n* Application of automated classification techniques using Machine Learning(ML) and Artificial Intelligence(AI)has consistently shown higher accuracy than manual classification. Hence, proposing a system performing detection and classification by using Deep Learning Algorithms using ConvolutionNeural Network (CNN), Artificial Neural Network (ANN), and TransferLearning (TL) would be helpful to doctors all around the world.\n\n#### Context\n* Brain Tumors are complex. There are a lot of abnormalities in the sizes and location of the brain tumor(s). This makes it really difficult for complete understanding of the nature of the tumor. Also, a professional Neurosurgeon is required for MRI analysis. Often times in developing countries the lack of skillful doctors and lack of knowledge about tumors makes it really challenging and time-consuming to generate reports from MRI\u2019. So an automated system on Cloud can solve this problem.","c92c4639":"# SHUFFLING"}}