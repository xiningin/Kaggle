{"cell_type":{"3ebe7c93":"code","deff41c3":"code","1d22a5a0":"code","490e9774":"code","48c1b9fa":"code","6218ed71":"code","1bc5bfb7":"code","9e447962":"code","deb212ed":"code","25e0f8e3":"code","a58c0e41":"code","211f8414":"code","72c2bd2d":"code","b2c87f72":"code","f311828c":"code","043548fe":"code","5aa4c2c4":"code","e1bdcfd9":"code","6531ef14":"code","c3531a93":"code","087702d8":"code","2fe53117":"code","017e5bd2":"code","729aaeba":"code","1438fcc1":"code","2a2ea4bb":"code","327d06ce":"code","6e43b217":"code","988b6bb5":"code","cb67b0a1":"code","f562d6b7":"code","901c230f":"code","57be7743":"code","613bbdd9":"markdown"},"source":{"3ebe7c93":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra \nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n#Bir\u00e7ok Jupyter defter kullan\u0131c\u0131s\u0131, defterin ba\u015f\u0131nda %matplotlib inline komutunu vermeyi tercih eder. Bu sayede \u00fcretti\u011finiz matplotlib grafikleri defterin i\u00e7ine g\u00f6m\u00fcl\u00fcr ve tam bir belge olu\u015fturman\u0131z\u0131 sa\u011flar.\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\")) #input dosya yolunun alt\u0131ndaki dosyalar\u0131 listeliyor ve ekrana yazd\u0131r\u0131yor.\n\n# Any results you write to the current directory are saved as output.","deff41c3":"pd.options.display.precision = 20 # virg\u00fclden sonra ka\u00e7 basamak oluca\u011f\u0131n\u0131n hassal\u0131k ayar\u0131\ntrain = pd.read_csv(\"..\/input\/train.csv\", nrows=10000000,\n                    dtype={'acoustic_data': np.int16, 'time_to_failure': np.float64}) \n#pandas ile csv dosyas\u0131 okunuyor.\n#1 Dosya yolu\n#2 Ka\u00e7 sat\u0131r okunacak\n#3 Veri tipleri belirleniyor\n\n\ntrain.head(10) #ilk 10 datay\u0131 g\u00f6ster","1d22a5a0":"train.rename({\"acoustic_data\": \"signal\", \"time_to_failure\": \"quaketime\"}, axis=\"columns\", inplace=True)\n#Columns do\u011frusundaki isimleri anlaml\u0131 isimlerle de\u011fi\u015ftiriyoruz.\ntrain.head() # ilk 5 sat\u0131r\u0131 (default olarak 5) yazd\u0131r\u0131yoruz.","490e9774":"plt.rcParams[\"figure.figsize\"] = (40,10) #asagidaki grafi\u011fin ekrandaki boyutunu belirliyoruz.","48c1b9fa":"import matplotlib.pyplot as plt\nplt.plot(train.quaketime.values[:20], train.signal.values[:20], 'ro') #Grafi\u011fi times ve signals listelerine g\u00f6re \u00e7izdiriyoruz. Ilk 20 deger\n#r k\u0131rm\u0131z\u0131 demek. o ise yuvarlak demek. ro diyerek grafikte k\u0131rm\u0131z\u0131 noktalamalar yap\u0131yoruz.\n\nplt.axis([train.quaketime.values[0]-0.0000000001, train.quaketime.values[20] + 0.0000000001, -10, 10]) \n#axisleri belirliyoruz. \n#X ekseni times dizisinin ilk verisinin 0.0000000001 eksi\u011finden times dizisinin son verisinin 0.0000000001 fazlas\u0131 aral\u0131\u011f\u0131nda\n#Y ekseni -10 ve 10 aral\u0131\u011f\u0131nda\nplt.show() # ekrana \u00e7izdiriyoruz.","6218ed71":"print(train.describe()) #DF(DATAFRAME)'imizin belirli istatistiklerine bak\u0131yoruz.","1bc5bfb7":"print(train['signal'].unique())  # signal kolonundaki verilerin sadece benzersiz olanlar\u0131n\u0131 yazd\u0131r\u0131yoruz\nprint(type(train['signal'].unique()))  # Signal kolonundaki benzersiz verilerin tipine bakiyoruz. Sonrasinda ona gore islem yapmak icin.\nprint(np.sort(train['signal'].unique())) # Numpy array oldugunu bildigimiz datayi siraliyoruz. Dizinin taban ve tavan degerlerini gormek icin","9e447962":"meanDF = train.groupby(['signal'], as_index=False).mean() #sinyale g\u00f6re gruplay\u0131p ortalamas\u0131n\u0131 al\u0131yoruz. # Indexliyoruz\nmeanDF.head() # ekrana yazd\u0131r\u0131yoruz.(default 5)","deb212ed":"meanDF.describe() # ortalamalara gore istatisik bilgileri","25e0f8e3":"meanDF.loc[meanDF['quaketime'] == 5.73671644094828270255].head() # Maximum ortalama degere sahip signal","a58c0e41":"plt.rcParams[\"figure.figsize\"] = (40,15) #grafi\u011fin ekrandaki boyutunu belirliyoruz.","211f8414":"plt.plot(meanDF.signal.values[:200], meanDF.quaketime.values[:200], 'ro') #Grafi\u011fi times ve signals listelerine g\u00f6re \u00e7izdiriyoruz. \n#r k\u0131rm\u0131z\u0131 demek. o ise yuvarlak demek. ro diyerek grafikte k\u0131rm\u0131z\u0131 noktalamalar yap\u0131yoruz.\n#axisleri belirliyoruz. \nplt.xlabel(\"Signals\")\nplt.ylabel(\"Times\")\nplt.title(\"Ortalamaya gore degerler\")\nplt.show() # ekrana \u00e7izdiriyoruz.\n","72c2bd2d":"plt.rcParams[\"figure.figsize\"] = (200,40) #grafi\u011fin ekrandaki boyutunu belirliyoruz.","b2c87f72":"plt.plot(meanDF.signal.values[:200], meanDF.quaketime.values[:200], 'r') #Grafi\u011fi times ve signals listelerine g\u00f6re \u00e7izdiriyoruz.  r kirmizi demek\n#axisleri isimlerimi belirliyoruz. \nplt.xlabel(\"Signals\")\nplt.ylabel(\"Times\")\nplt.title(\"Ortalamaya gore degerler\")\nplt.show() # ekrana \u00e7izdiriyoruz.","f311828c":"sampleMeanDF = meanDF.sample(200 , random_state=1) # verilerin icinden rastgele 200 tanesini aliyoruz # Random state =1 her seferinde ayni degerleri versin diye\nsampleMeanDF.sort_values(by=['signal'], inplace=True) # signale gore kucukten buyuge siraliyoruz\nsampleMeanDF.head(10) # ilk 10 degeri ekrana bastiriyoruz,","043548fe":"plt.rcParams[\"figure.figsize\"] = (200,40) #grafi\u011fin ekrandaki boyutunu belirliyoruz.","5aa4c2c4":"plt.plot(sampleMeanDF.signal.values, sampleMeanDF.quaketime.values, 'ro') #Grafi\u011fi times ve signals listelerine g\u00f6re \u00e7izdiriyoruz. \n#r k\u0131rm\u0131z\u0131 demek. o ise yuvarlak demek. ro diyerek grafikte k\u0131rm\u0131z\u0131 noktalamalar yap\u0131yoruz.\n#axisleri belirliyoruz. \nplt.xlabel(\"Signals\")\nplt.ylabel(\"Times\")\nplt.title(\"Orneklenmis ortalamaya gore degerler\")\nplt.show() # ekrana \u00e7izdiriyoruz.\n","e1bdcfd9":"plt.rcParams[\"figure.figsize\"] = (40,10) #grafi\u011fin ekrandaki boyutunu belirliyoruz.","6531ef14":"plt.plot(sampleMeanDF.signal.values, sampleMeanDF.quaketime.values, 'r') #Grafi\u011fi times ve signals listelerine g\u00f6re \u00e7izdiriyoruz. \n#r k\u0131rm\u0131z\u0131 demek. o ise yuvarlak demek. ro diyerek grafikte k\u0131rm\u0131z\u0131 noktalamalar yap\u0131yoruz.\n#axisleri belirliyoruz. \nplt.xlabel(\"Signals\")\nplt.ylabel(\"Times\")\nplt.title(\"Orneklenmis ortalamaya gore degerler\")\nplt.show() # ekrana \u00e7izdiriyoruz.","c3531a93":"sampleMeanDF.describe() # sample ornegin istatistik bilgisi","087702d8":"halfSampleDF = train.sample(frac=0.5, random_state=4) # verilerin icinden rastgele yarsini aliyoruz # https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.sample.html\nhalfSampleDF.sort_values(by=['signal'], inplace=True) # signale gore kucukten buyuge siraliyoruz\nhalfSampleDF.head(10) # ilk 10 degeri ekrana bastiriyoruz,","2fe53117":"plt.rcParams[\"figure.figsize\"] = (200,40) #grafi\u011fin ekrandaki boyutunu belirliyoruz.","017e5bd2":"plt.plot(halfSampleDF.signal.values, halfSampleDF.quaketime.values, 'ro') #Grafi\u011fi times ve signals listelerine g\u00f6re \u00e7izdiriyoruz. \n#r k\u0131rm\u0131z\u0131 demek. o ise yuvarlak demek. ro diyerek grafikte k\u0131rm\u0131z\u0131 noktalamalar yap\u0131yoruz.\n#axisleri belirliyoruz. \nplt.xlabel(\"Signals\")\nplt.ylabel(\"Times\")\nplt.title(\"Orneklenmis ortalamaya gore degerler\")\nplt.show() # ekrana \u00e7izdiriyoruz.\n","729aaeba":"plt.rcParams[\"figure.figsize\"] = (40,10) #grafi\u011fin ekrandaki boyutunu belirliyoruz.","1438fcc1":"plt.plot(halfSampleDF.signal.values, halfSampleDF.quaketime.values, 'r') #Grafi\u011fi times ve signals listelerine g\u00f6re \u00e7izdiriyoruz. \n#r k\u0131rm\u0131z\u0131 demek. o ise yuvarlak demek. ro diyerek grafikte k\u0131rm\u0131z\u0131 noktalamalar yap\u0131yoruz.\n#axisleri belirliyoruz. \nplt.xlabel(\"Signals\")\nplt.ylabel(\"Times\")\nplt.title(\"Orneklenmis ortalamaya gore degerler\")\nplt.show() # ekrana \u00e7izdiriyoruz.","2a2ea4bb":"from sklearn.preprocessing import PolynomialFeatures # ortalama degerlere gore Polynomial Regression\nfrom sklearn.linear_model import LinearRegression   # https:\/\/github.com\/krishnaik06\/Polynomial-Linear-Regression\/blob\/master\/polynomial_regression.py\nX = meanDF.signal.values.reshape(2065,1)\ny = meanDF.quaketime.values.reshape(2065,1)\npoly_reg = PolynomialFeatures(degree = 4)\nX_poly = poly_reg.fit_transform(X)\npoly_reg.fit(X_poly, y)\nlin_reg_2 = LinearRegression()\nlin_reg_2.fit(X_poly, y)","327d06ce":"plt.rcParams[\"figure.figsize\"] = (200,40) #grafi\u011fin ekrandaki boyutunu belirliyoruz.","6e43b217":"plt.scatter(X, y, color = 'red')\nplt.plot(X, lin_reg_2.predict(poly_reg.fit_transform(X)), color = 'blue')\nplt.title('(Polynomial Regression)')\nplt.xlabel('signal')\nplt.ylabel('times')\nplt.show()","988b6bb5":"x_test = np.array([4,8]).reshape(2,1)\nlin_reg_2.predict(poly_reg.fit_transform(x_test))","cb67b0a1":"sortedTrain = train.sort_values(by=['signal'],) # signale gore kucukten buyuge siraliyoruz\nsortedTrain.head()","f562d6b7":"sortedTrain.reset_index()\nsortedTrain.head()","901c230f":"X = sortedTrain.signal.values.reshape(10000000 ,1)     # Tum degerlere gore Polynomial Regression\ny = sortedTrain.quaketime.values.reshape(10000000 ,1)  # https:\/\/github.com\/krishnaik06\/Polynomial-Linear-Regression\/blob\/master\/polynomial_regression.py\npoly_reg = PolynomialFeatures(degree = 4)\nX_poly = poly_reg.fit_transform(X)\npoly_reg.fit(X_poly, y)\nlin_reg_2 = LinearRegression()\nlin_reg_2.fit(X_poly, y)","57be7743":"x_test = np.array([4,8]).reshape(2,1)\nlin_reg_2.predict(poly_reg.fit_transform(x_test))","613bbdd9":"### TODO\n- Grafik cizdirme islemleri fonksiyona atilacak\n- sortedTrain datasi haric digerlerinin indexleri resetlenebilir. Resetli olmadigi icin grafikler hatali cikiyor olabilir.\n\n\n### Cikarimlar\n- Yuksek sureler genellikle datanin orta kisminda [-600,600] arasinda toplanmis diger kisimlar genellikle 0'a yakin"}}