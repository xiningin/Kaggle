{"cell_type":{"3cdac19b":"code","62266d5b":"code","46bb7bf0":"code","2af6d11f":"code","15f20b22":"code","86fb814c":"code","dc4e2ab8":"code","20116060":"code","29455b5c":"code","5575079f":"code","fa738328":"code","2dfa553b":"code","7088764a":"code","8e8900fa":"markdown","24005eb0":"markdown","3fdbc409":"markdown","e899c424":"markdown","91d17acf":"markdown","7a665f6b":"markdown","a813018b":"markdown","7b60694d":"markdown","a8819441":"markdown","40c268ef":"markdown"},"source":{"3cdac19b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","62266d5b":"dataset = pd.read_csv(\"\/kaggle\/input\/family-income-and-expenditure\/Family Income and Expenditure.csv\")","46bb7bf0":"dataset.head()","2af6d11f":"null_data = dataset[dataset.isnull().any(axis=1)]\nprint(null_data.shape)","15f20b22":"dataset = dataset.fillna(dataset.mean())","86fb814c":"dataset = dataset.drop(['Household Head Occupation', 'Household Head Class of Worker', 'Type of Roof', 'Type of Walls', 'Toilet Facilities', 'Main Source of Water Supply'], axis= 1)","dc4e2ab8":"dataset = pd.get_dummies(dataset, columns=['Region','Main Source of Income','Household Head Sex', 'Household Head Marital Status', 'Household Head Highest Grade Completed', 'Household Head Job or Business Indicator', 'Type of Household', 'Type of Building\/House', 'Tenure Status'])","20116060":"y = dataset['Total Household Income']\ndataset = dataset.drop(['Total Household Income'], axis = 1)\nx = dataset","29455b5c":"from sklearn.model_selection import train_test_split\nxTrain, xTest, yTrain, yTest = train_test_split(x, y, random_state = 0)","5575079f":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 100, random_state=0)\nregressor.fit(xTrain, yTrain)\npredictedWithoutScaling = regressor.predict(xTest) ","fa738328":"from sklearn.metrics import r2_score, mean_squared_error\nr2score = r2_score(yTest, predictedWithoutScaling)\nmse = mean_squared_error(yTest, predictedWithoutScaling)\nprint('R2 Score using Random Forest without scaling using mean to fill NA values: ',r2score)\nprint('Mean Squared Error using Random Forest without scaling using mean to fill NA values: ',mse)","2dfa553b":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(xTrain)\nxTrain = scaler.transform(xTrain)\nxTest = scaler.transform(xTest)\nregressor.fit(xTrain, yTrain)\npredictedWithScaling = regressor.predict(xTest) \nr2score2 = r2_score(yTest, predictedWithScaling)\nmse2 = mean_squared_error(yTest, predictedWithScaling)\nprint('R2 Score using Random Forest without scaling using mean to fill NA values: ',r2score2)\nprint('Mean Squared Error using Random Forest without scaling using mean to fill NA values: ',mse2)\n","7088764a":"from sklearn.ensemble import GradientBoostingRegressor\nboostedRegressor = GradientBoostingRegressor( loss ='ls', learning_rate = 0.1, n_estimators= 200)\nboostedRegressor.fit(xTrain, yTrain)\nboostedPredicted = boostedRegressor.predict(xTest)\nr2score3 = r2_score(yTest, boostedPredicted)\nmse3 = mean_squared_error(yTest, boostedPredicted)\nprint('R2 Score using Gradient Boosted Forest without scaling using mean to fill NA values: ',r2score3)\nprint('Mean Squared Error using Gradient Boosted Forest without scaling using mean to fill NA values: ',mse3)","8e8900fa":"We can infer that the Random Forest Regressor perfroms same, with or without scaling, So we shall look into another Regressor. Now we shall use Gradient boosted decision trees","24005eb0":"Our dataset has total 7536 rows which have missing values, so we will have to deal with them respectively. We shall try replacing these missing values by mean and median, and then removing the rows, and try to find the effect on the model. Then we shall draw our conclusions for the dataset. First we shall replace these missing values using mean of the dataset.\nIn the first method we shall be replacing the NAN values using mean of the column.","3fdbc409":"As we can see that the model predicted not so good without Scaling, we shall now scale the data using MinMaxScaler.","e899c424":"Creating test and train set, with random_state set at 0.","91d17acf":"Now that we have filled the NA and missing values, we shall begin with creating dummy varibales for Region, Main Source of Income, Household Head Sex, Household Head Marital Status, Household Head Highest Grade Completed, Household Head Job or Business Indicator, Type of Household, Type of Building\/House and Tenure Status. We shall be using pandas.get_dummies() for that.","7a665f6b":"Viewing the columns using .head() function","a813018b":"Now we shall be scaling the dataset, and then compare the models accuracy on grounds of scaled and not scaled. The first model we shall be using is Random Forest Regression regression using 10 trees only.","7b60694d":"We shall be dropping some columns like: Household Head Occupation, Household Head Class of Worker, Type of Roof, Type of Walls, Toilet Facilities, Main Source of Water Supply.\n","a8819441":"Now we shall compare the predicted and true labels using R2Score and Mean Square Error.","40c268ef":"Importing the dataset"}}