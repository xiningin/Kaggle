{"cell_type":{"a7594f71":"code","722688e2":"code","3214a232":"code","b1ea1b20":"code","e794e1cd":"code","4fa7a612":"code","c3fb0ad5":"code","46300955":"code","645af707":"code","302008ae":"code","e04a880d":"code","9a50a96d":"code","932c2a9d":"code","f6a697b0":"code","44741a2e":"code","3f3bf7ba":"code","6c41f7cd":"code","47b55429":"code","1e1177f1":"code","099162b9":"markdown","408ae24d":"markdown","10dff5b2":"markdown","4d16ee26":"markdown","3feda3d1":"markdown","d0d6c6eb":"markdown","ee672598":"markdown","d66185bc":"markdown"},"source":{"a7594f71":"import pandas as pn\nimport re\n\nfrom string import ascii_lowercase\nfrom datetime import datetime","722688e2":"#load data into dataframe\nraw_books = pn.read_json('..\/input\/nyt2.json', lines=True, orient='columns')\nraw_books.head()","3214a232":"regex = re.compile('[^a-z0-9]')\n\n#convert string to lowercase and replace all non alphanumeric characters\ndef set_lc_values(col_name):\n    new_values = []\n    for values in raw_books[col_name]:\n        new_values.append(regex.sub('', values.lower()))\n\n    return new_values\n\n\n\ndef flatten_json(y):\n    # extract values from json string in dataframe\n    \n    out = {}\n    ret_val = '-'\n    \n    def flatten(x, name=''):\n        if type(x) is dict:\n            for a in x:\n                flatten(x[a], name + a + '_')\n        elif type(x) is list:\n            i = 0\n            for a in x:\n                flatten(a, name + str(i) + '_')\n                i += 1\n        elif type(x) is str:\n            out[name[:-1]] = x\n\n\n    flatten(y)\n\n    if type(out) is dict:\n        for v in out:\n            ret_val = out[v]\n    \n    return ret_val\n","b1ea1b20":"#prepare data, extract values from json string, convert from unix stamp to datetime\n\nfor i in range(len(raw_books)):\n    raw_books.loc[i][\"_id\"] = flatten_json(raw_books.loc[i][\"_id\"])\n    raw_books.loc[i][\"bestsellers_date\"] = datetime.fromtimestamp(int(flatten_json(raw_books.loc[i][\"bestsellers_date\"])[:10])).strftime('%Y-%m-%d')\n    raw_books.loc[i][\"price\"] = flatten_json(raw_books.loc[i][\"price\"])\n    raw_books.loc[i][\"published_date\"] = datetime.fromtimestamp(int(flatten_json(raw_books.loc[i][\"published_date\"])[:10])).strftime('%Y-%m-%d')\n    raw_books.loc[i][\"rank\"] = flatten_json(raw_books.loc[i][\"rank\"])\n    raw_books.loc[i][\"rank_last_week\"] = flatten_json(raw_books.loc[i][\"rank_last_week\"])\n    raw_books.loc[i][\"title\"] = flatten_json(raw_books.loc[i][\"title\"]) \n    raw_books.loc[i][\"weeks_on_list\"] = flatten_json(raw_books.loc[i][\"weeks_on_list\"])     \n    \nraw_books.head()","e794e1cd":"# add three new columns only with alphanumeric values for comparision and spellcheck detection\n\nraw_books['l_author'] = set_lc_values('author')\nraw_books['l_publisher'] = set_lc_values('publisher')\nraw_books['l_title'] = set_lc_values('title')\n\nraw_books.head()","4fa7a612":"print('Total number of titles: %s' % (len(raw_books['title'].unique())))\nprint('Total number of clean titles: %s' % (len(raw_books['l_title'].unique())))","c3fb0ad5":"#find just one clean lower title in data that have two different real titles\nspec_title = raw_books.groupby(['l_title', 'title'])\n\ndoubleTitle = ''\nfor name, group in spec_title:\n    if doubleTitle == name[0]:\n        print('lower title: %s' % (name[0]))\n    doubleTitle = name[0]\n","46300955":"#find real titles based on single lower case title\nfilter_titles = raw_books[(raw_books['l_title'] == 'crossfire')].title.unique()\nfor t in filter_titles:\n    print(raw_books[(raw_books['title'] == t)][['author', 'publisher', 'title']].reset_index(drop=True)[:1])","645af707":"print('Total number of authors: %s' % (len(raw_books['author'].unique())))\nprint('Total number of clean authors: %s' % (len(raw_books['l_author'].unique())))","302008ae":"spec_author = raw_books.groupby(['l_author', 'author'])\n\ndouble_author = ''\nfor name, group in spec_author:\n    if double_author == name[0]:\n        print('lower author: %s' % (name[0]))\n    double_author = name[0]","e04a880d":"#find real author name based on single lower case author name\nfilter_auth_col = raw_books[(raw_books['l_author'] == 'baparis')].author.unique()\nfor t in filter_auth_col:\n    print(raw_books[(raw_books['author'] == t)][['author', 'publisher', 'title']].reset_index(drop=True)[:1])","9a50a96d":"print('Total number of publisher names: %s' % (len(raw_books['publisher'].unique())))\nprint('Total number of clean publisher names: %s' % (len(raw_books['l_publisher'].unique())))","932c2a9d":"spec_publisher = raw_books.groupby(['l_publisher', 'publisher'])\n\ndouble_publisher = ''\nfor name,group in spec_publisher:\n    if double_publisher == name[0]:\n        print(name[0])\n    double_publisher = name[0]","f6a697b0":"filter_auth_col = raw_books[(raw_books['l_publisher'] == 'stmartins')].publisher.unique()\nfor t in filter_auth_col:\n    print(raw_books[(raw_books['publisher'] == t)][['publisher']].reset_index(drop=True)[:1])","44741a2e":"print(raw_books['rank'].unique())","3f3bf7ba":"num_of_ranks = raw_books.groupby(['rank'])['rank'].count()\nnum_of_ranks","6c41f7cd":"#date values\nprint(raw_books.bestsellers_date.min())\nprint(raw_books.bestsellers_date.max())","47b55429":"#e.g. top 5 books with number of weeks on rank #1\ntop_rank_books = raw_books[(raw_books['rank'] == '1')][['title', 'author', 'publisher']]\ntop_rank = top_rank_books.groupby(['title', 'author', 'publisher'])['title'].count().reset_index(name='weeks_rank_1')\ntop_rank.sort_values(by='weeks_rank_1', ascending=False)[:5]","1e1177f1":"#e.g. number of weeks that publisher have been on list as rank #1\ntop_rank_books = raw_books[(raw_books['rank'] == '1')][['publisher']]\ntop_rank = top_rank_books.groupby(['publisher'])['publisher'].count().reset_index(name='weeks_rank_1')\ntop_rank.sort_values(by='weeks_rank_1', ascending=False)[:5]","099162b9":"**Actions to take:**\n> 1. Delete all rows that have 'rank' higher then 15","408ae24d":"**Actions to take:**\n> 1. For all 'l_publisher' values (stmartins) replace 'publisher' with single author name (St. Martin's)","10dff5b2":"**Actions to take:**\n> 1. Delete all rows with year 2009 and 2018\n> 2. Remove last three columns\n\n\n**Save dataframe as new csv file and perform data analytics on it.**","4d16ee26":"### Compare titles from json file with clean alpha titles","3feda3d1":"### Compare authors from json file with clean alpha titles","d0d6c6eb":"**False alert**\n\nBooks have similar titles but different authors and publishers.\n\n> No action required for this case.","ee672598":"Data taken from\nhttps:\/\/www.kaggle.com\/cmenca\/new-york-times-hardcover-fiction-best-sellers","d66185bc":"**Actions to take:**\n> 1. For all 'l_author' values (e.g. baparis) replace 'author' with single author name (e.g. BA Paris)"}}