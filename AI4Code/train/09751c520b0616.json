{"cell_type":{"d45f3cbc":"code","f762ce9d":"code","e7a2f898":"code","5562cfd5":"code","77e56db3":"code","ca9ebf07":"code","7ed455bc":"code","46606ebe":"code","8204cc48":"code","e0afd4a3":"code","7ec31c41":"code","e7c89116":"code","0ed64c97":"code","173e00b9":"code","26421276":"code","c395152a":"code","b12d82dd":"code","57827b56":"code","53bb06d4":"code","38f4a95b":"code","98a42b08":"code","5dc40352":"code","cd0689ec":"code","05a783d7":"code","a33eeb98":"code","d56662be":"code","3299019a":"code","22db0c79":"code","7d881144":"code","ed306d7d":"code","547813cf":"code","0bc37d57":"code","258af28d":"code","44e40fdc":"code","ff537293":"code","e705efd5":"code","dcb4d192":"code","d300b1c4":"code","81443f39":"code","36e737ba":"code","35c3eb07":"code","a2beff89":"code","d66f0585":"code","a264d1c8":"code","d50a09e8":"code","1436f983":"code","d3673fd3":"code","efd9a5a3":"code","6ff48005":"code","c33f7b9d":"code","5e4889a3":"code","0e0b5835":"code","5ef976fc":"code","b9eead05":"code","268a4be5":"code","eb2d9743":"code","1887c0a9":"code","ccdf67ef":"code","38ce9547":"code","6e071690":"code","f0184441":"code","f00cf9a1":"code","b4e4d7e3":"code","29af8245":"code","5a87f7a7":"code","7e688862":"markdown","e6ebf699":"markdown","5bb9b9eb":"markdown","5b8eed01":"markdown","586774e7":"markdown","64db42e9":"markdown","7905adca":"markdown","794a21b8":"markdown","12f1beff":"markdown","111af6a1":"markdown","e3f16815":"markdown","d1be969d":"markdown","b5ea5aeb":"markdown","fb2efd87":"markdown","444d0cdb":"markdown","8037e4e3":"markdown","95e60c17":"markdown","782b1d40":"markdown","6222cd8b":"markdown","f0676ced":"markdown","db09b07f":"markdown","b3c73d78":"markdown","d3966d2d":"markdown","9f2694ca":"markdown","6e18f9a3":"markdown","ce2ca981":"markdown","2f8b2096":"markdown","70119ea9":"markdown","40a982aa":"markdown","93da2192":"markdown","c1c4a199":"markdown","2f7e178b":"markdown","d5d7da56":"markdown","88c16425":"markdown","feb596df":"markdown","811ba8f7":"markdown","4aad4f77":"markdown","e2a34519":"markdown","5a910b13":"markdown","12900afc":"markdown","1e4ea1d7":"markdown","fc1f2593":"markdown","77a7b65b":"markdown","4114ef12":"markdown","6fbb8703":"markdown","fd1e28d3":"markdown","73641674":"markdown","a4b0c8f0":"markdown","d2c5f9d4":"markdown","0ab3c4fe":"markdown","8a072960":"markdown","2b75eae0":"markdown","955bb5bb":"markdown","c4b4d35f":"markdown","f6e4eddf":"markdown","4f7fb4f8":"markdown","49f4c29c":"markdown","97299369":"markdown","07dc80a1":"markdown","f30530af":"markdown","3fb3dce8":"markdown","f808a2e2":"markdown","d5304483":"markdown","8c6cd169":"markdown","945f669c":"markdown"},"source":{"d45f3cbc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport math","f762ce9d":"train_df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","e7a2f898":"train_df.head()","5562cfd5":"test_df.head()","77e56db3":"train_df['train']=1","ca9ebf07":"test_df['train']=0","7ed455bc":"df=pd.concat([train_df,test_df],axis=0,sort=False)","46606ebe":"df.head()","8204cc48":"drop_null=[]\nfor i in df.columns:\n    count=0\n    p=0\n    for  j in np.array(df[i].isnull()):\n        p+=1\n        if j==True:\n            count+=1\n    pr=(((count)\/p)*100)\n    print(i,'\\t-\\t',pr)\n    if pr>=50:\n        drop_null.append(i)","e0afd4a3":"drop_null","7ec31c41":"df=df.drop(drop_null,axis=1)","e7c89116":"cat_df=df.select_dtypes(include=['object'])\nnum_df=df.select_dtypes(exclude=['object'])","0ed64c97":"cat_df.isnull().sum()","173e00b9":"cat_low_null=[]\ncat_high_null=[]\nfor i in cat_df.columns:\n    if cat_df[i].isnull().sum()!=0 and cat_df[i].isnull().sum()<=50:\n        cat_low_null.append(i)\n    elif cat_df[i].isnull().sum()>50:\n        cat_high_null.append(i)\n","26421276":"cat_low_null","c395152a":"cat_high_null","b12d82dd":"cat_df[cat_high_null]=cat_df[cat_high_null].fillna('none')","57827b56":"cat_df[cat_low_null]=cat_df[cat_low_null].fillna(cat_df.mode().iloc[0])","53bb06d4":"num_df.isnull().sum()\n    ","38f4a95b":"num_df['LotFrontage'].median()\n","98a42b08":"(num_df['YrSold']-num_df['YearBuilt']).median()","5dc40352":"num_df['LotFrontage']=num_df['LotFrontage'].fillna(68)","cd0689ec":"num_df['GarageYrBlt']=num_df['GarageYrBlt'].fillna(num_df['YrSold']-35)","05a783d7":"num_df=num_df.fillna(0)","a33eeb98":"for i in cat_df.columns:\n    print(cat_df[i].value_counts())\n    cat_df[i].value_counts().plot(kind='bar',figsize=[10,3])\n    plt.show()","d56662be":"cat_df=cat_df.drop(['Street','Utilities','Condition2','RoofMatl','Heating'],axis=1)","3299019a":"num_df['Age']=num_df['YrSold']-num_df['YearBuilt']\nnum_df['Age'].head()","22db0c79":"num_df['Age'].describe()","7d881144":"num_df[num_df['Age']<0]","ed306d7d":"num_df.loc[num_df['YrSold']<num_df['YearBuilt'],'YrSold']=2009\nnum_df['Age']=num_df['YrSold']-num_df['YearBuilt']\nnum_df['Age'].describe()","547813cf":"num_df['TotalBsmtbath']=num_df['BsmtFullBath']+num_df['BsmtHalfBath']*0.5","0bc37d57":"num_df[['BsmtFullBath','BsmtHalfBath','TotalBsmtbath']].head()","258af28d":"num_df['TotalBath']=num_df['FullBath']+num_df['HalfBath']*0.5","44e40fdc":"num_df[['FullBath','HalfBath','TotalBath']].head()","ff537293":"num_df['TotalSF']=num_df['TotalBsmtSF']+num_df['1stFlrSF']+num_df['2ndFlrSF']","e705efd5":"num_df[['TotalBsmtSF','1stFlrSF','2ndFlrSF','TotalSF']].head()","dcb4d192":"num_df.head()","d300b1c4":"for i in cat_df.columns:\n    cat_df[i]=cat_df[i].astype('category')","81443f39":"for i in cat_df.columns:\n    cat_df[i]=cat_df[i].cat.codes","36e737ba":"cat_df.head()","35c3eb07":"df_final=pd.concat([num_df,cat_df],axis=1,sort=False)","a2beff89":"df_final.head()","d66f0585":"df_final=df_final.drop('Id',axis=1)","a264d1c8":"df_final.head()","d50a09e8":"df_train=df_final[df_final['train']==1]\ndf_train=df_train.drop(['train'],axis=1)","1436f983":"df_test=df_final[df_final['train']==0]\ndf_test=df_test.drop(['train','SalePrice'],axis=1)","d3673fd3":"sns.distplot(df_train['SalePrice'])\nprint('skewness of SalePrice is %f'%df_train['SalePrice'].skew())","efd9a5a3":"var=['LotArea','TotalBsmtSF','1stFlrSF','2ndFlrSF','TotalSF','GarageArea','GrLivArea']\n     \nfor u in var:\n    sns.scatterplot(x=u,y=df_train['SalePrice'],data=df_train)\n    plt.title(u)\n    plt.show()","6ff48005":"yr=['YearBuilt','YearRemodAdd','YrSold']\nfor i in yr:\n    df_train.groupby(i)['SalePrice'].median().plot()\n    plt.title(i)\n    plt.show()","c33f7b9d":"df_train.groupby('Age')['SalePrice'].median().plot()","5e4889a3":"bath=['BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath','TotalBsmtbath', 'TotalBath']\nfor i in bath:\n    sns.lineplot(i,'SalePrice',data=df_train)\n    plt.show()","0e0b5835":"X=df_train.drop(['SalePrice'],axis=1)\nY=df_train['SalePrice']","5ef976fc":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.3,random_state=45)","b9eead05":"y_train=y_train.values.reshape(-1,1)\ny_test=y_test.values.reshape(-1,1)","268a4be5":"from sklearn.preprocessing import StandardScaler\nsc_x=StandardScaler()\nsc_y=StandardScaler()\nx_train=sc_x.fit_transform(x_train)\nx_test=sc_x.fit_transform(x_test)\ny_train=sc_y.fit_transform(y_train)\ny_test=sc_y.fit_transform(y_test)","eb2d9743":"from sklearn.ensemble import RandomForestRegressor\nrfr=RandomForestRegressor(n_estimators=100,random_state=0)\nrfr.fit(x_train,y_train)","1887c0a9":"pred=rfr.predict(x_test)\npred=pred.reshape(-1,1)","ccdf67ef":"from sklearn.metrics import r2_score\nr2=r2_score(y_test,pred)","38ce9547":"from sklearn.metrics import mean_squared_error\nmse=mean_squared_error(y_test,pred)\nrmse=math.sqrt(mse)","6e071690":"print('r2 score is - ',r2)\nprint('Root mean squarred error - ',rmse)","f0184441":"plt.figure(figsize=(18,6))\nplt.plot(y_test,label='Actual')\nplt.plot(pred,label='Predicted')\nplt.show()\n\n","f00cf9a1":"rfr.fit(X,Y)","b4e4d7e3":"f_pred=rfr.predict(df_test)","29af8245":"final_sub=pd.DataFrame({\n    'Id': test_df['Id'],\n    'SalePrice':f_pred\n})","5a87f7a7":"final_sub.to_csv('sample_submission.csv',index=False)","7e688862":"## 5.Final Submission","e6ebf699":"- <b>SalePrice<\/b> v\/s <b>Age<\/b><br>\nSalePrice behavior with age of the house","5bb9b9eb":"- Making plots<br>\nAfter making plots we found that some columns have low variance so we decide to drop them.","5b8eed01":"### Prediction accuracy","586774e7":"- Scores","64db42e9":" - Calculate null values in dataset<br>\n calculate percent null value in features of dataset and\n Features add in 'drop_null' List which<br> has Most null value percent or grater then 50% null value","7905adca":"- Separate Train and test dataset","794a21b8":"###  Handling missing values","12f1beff":"## 3. Exploratory Data Analysis","111af6a1":"#### (iii) TotalBath : Sum of : FullBath and 1\/2 HalfBath","e3f16815":"- Making predictions","d1be969d":"<b>we analyse the dataset through some plots","b5ea5aeb":"### Standardization of train and test data","fb2efd87":"#### (i) Dealing with most null value feature in dataset","444d0cdb":"#### (iii) Dealing with categorical feature","8037e4e3":"# <font color=blue>*HOUSE PRICING: Preprocessing,EDA and Modeling*<\/font>","95e60c17":" - Importing dataset and making ready for preprocessing<br>\n Traing data - train.csv<br>\nTest data - test.csv","782b1d40":"### Fitting model to whole data","6222cd8b":"### Making prediction for test dataset","f0676ced":"### train_test_split","db09b07f":"- r2_score","b3c73d78":"### Fitting modeling algorithm","d3966d2d":"It is strange to find that the house was sold in 2007 before the YearRemodAdd 2009<br>\n- So we decide to change the year of sold to 2009","9f2694ca":"### Split train and test dataset","6e18f9a3":"## *2. Data Preprocessing*","ce2ca981":"<b>Filling 'GarageYrBlt' null values with ('YrSold'-35)","2f8b2096":" - Getting information about train and test datase<\/b>","70119ea9":"- fixing negative value in Age","40a982aa":"- Some more plots to analyse the data","93da2192":"<b>Filling remaining null values with 0.","c1c4a199":"- To encod categorical feature using Label Encoding technique","2f7e178b":"###  Dealing with low variance feature","d5d7da56":"- Age can't be negative","88c16425":"<b>Filling 'LotFrontage' null values with  median of 'LotFrontage' (68).<\/b>","feb596df":"- Root mean squared error","811ba8f7":"Finding median of diffrance in 'YrSold' and 'YearBuilt'","4aad4f77":"- Filling null value<br>\n'LotFrontage'and 'GarageYrBlt' has most null values<br>","e2a34519":"- Plot actual and predicted values","5a910b13":"- <b> Import Libraries","12900afc":"### Making some new features","1e4ea1d7":"### Select training and target variable","fc1f2593":"## 4. Modeling","77a7b65b":"- <b>SalePrice<\/b> variation through out years according to year features","4114ef12":"- Behavior of <b>SalePrice<\/b> according to Area related feature<br>\n<br>\nUsing scatterplot<br>\nSalePrice v\/s LotArea,TotalBsmtSF,1stFlrSF,2ndFlrSF,TotalSF, GarageArea and GrLivArea","6fbb8703":"- Fitting model","fd1e28d3":"- Concat Numerical and Categorical dataset","73641674":"<b>High null value feature filling with 'none'.<\/b>","a4b0c8f0":"#### (i) Age - age of house","d2c5f9d4":" - Filling null value<br>\n Make two lists<br>\n cat_low_null - low null value <br>\ncat_high_null - high null value","0ab3c4fe":"#### (ii) Separate Categorical and Numerical feature<br>\nCategorical feature = cat_df (dtype-object)<br>\nNumrical feature = num_df(dtype-int,float)","8a072960":"#### (ii) TotalBsmtBath : Sum of : BsmtFullBath and 1\/2 BsmtHalfBath","2b75eae0":"- Final dataset - <b> df_final <\/b>","955bb5bb":"<b>Low null value feature filling with the most frequent value.<\/b>","c4b4d35f":"<b> We are using RandomForest algorithm to model and making prediction","f6e4eddf":"- Final numerical dataset","4f7fb4f8":"## *1. Import train and test dataset*","49f4c29c":"- Skewness of SalePrice","97299369":"#### (iv) Dealing with numrical features","07dc80a1":" - Concat train and test dataset for futher preprocessing togather ","f30530af":"#### (iv) TotalSF : Sum of : 1stFlrSF and 2ndFlrSF and basement area","3fb3dce8":"Finding median of 'LotFrontage'","f808a2e2":" - Calculate null values","d5304483":"### Encoding categorical feature","8c6cd169":" - Droping features in drop_null from dataset","945f669c":" - Calculate null values"}}