{"cell_type":{"06520f92":"code","0fd82457":"code","abededad":"code","1fcf930b":"code","36923615":"code","3a0dfda0":"code","0f0d1f78":"code","e348bc69":"code","ea789558":"code","124fb20b":"code","9a09ebdf":"code","fddb095d":"code","f7096d08":"code","7b1bb349":"code","92b8f15b":"code","3ed49d21":"code","3df6cfe0":"code","3041979b":"code","5926d059":"code","475c6cc9":"code","7231141f":"code","a9bd7871":"code","138b5f7f":"code","44613366":"code","814f5ef8":"code","6ab14080":"code","e12e0702":"code","866c4c1a":"code","a70546a7":"code","bcae2d36":"code","897497b6":"code","dbd8b5e5":"code","411017ee":"code","c3c2e34f":"code","faff6818":"code","1d55fd41":"code","dbac1384":"code","f392151d":"code","24ce9b86":"code","b6ff6638":"code","1288c73d":"code","89781320":"code","0a9f479c":"code","c55ddbd2":"code","87fc1429":"code","e2863d55":"code","4960561a":"code","f0b4c1b7":"code","7dc29d93":"code","55c11264":"code","19efb332":"code","80995f0b":"code","ec4e37ff":"code","aca5f046":"code","d1a19530":"code","b06eef9e":"code","13525bdd":"code","b7bff171":"markdown","b2d98033":"markdown","b138c066":"markdown","332a3ef2":"markdown","296f45d2":"markdown","85bb007e":"markdown","623ea06f":"markdown","4689036b":"markdown","ae887824":"markdown","d1d8a40f":"markdown","2c5f4a25":"markdown","f6ca7cec":"markdown","3cecf698":"markdown","4712ed67":"markdown","dd85e79f":"markdown","e45a68ed":"markdown","f901c410":"markdown","53fcdd10":"markdown","438c4eb2":"markdown","36fe50b0":"markdown","f3f65030":"markdown","64b46c06":"markdown","56950c1d":"markdown","d2a5ee9b":"markdown","f137ea21":"markdown","ad82cdf3":"markdown","e4672674":"markdown","81ac280d":"markdown","9bd0d19f":"markdown","650ab8b0":"markdown","d4d1501e":"markdown","939e1579":"markdown","01e00360":"markdown"},"source":{"06520f92":"# import all required libraries for reading, analysing and visualizing data\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom math import sqrt","0fd82457":"train_df = pd.read_csv('..\/input\/metro-traffic-volume\/Metro_Interstate_Traffic_Volume.csv')","abededad":"print('Dataset shape: ', train_df.shape)","1fcf930b":"train_df.info()","36923615":"train_df.head()","3a0dfda0":"train_df.describe(include = 'all')","0f0d1f78":"train_df.isnull().sum()","e348bc69":"# convert the date_time column to datetime type\ntrain_df['date_time'] = pd.to_datetime(train_df['date_time'])","ea789558":"train_df['time'] = train_df['date_time'].dt.hour","124fb20b":"fig, (axis1,axis2) = plt.subplots(2, 1, figsize = (20,12))\nsns.countplot(x = 'time', data = train_df, ax = axis1)\nsns.lineplot(x = 'time', y = 'traffic_volume', data = train_df, ax = axis2);","9a09ebdf":"train_df['month'] = train_df['date_time'].dt.month","fddb095d":"fig, (axis1,axis2) = plt.subplots(2, 1, figsize = (20,12))\nsns.countplot(x = 'month', data = train_df, ax = axis1)\nsns.lineplot(x = 'month', y = 'traffic_volume', data = train_df, ax = axis2);","f7096d08":"train_df['year'] = train_df['date_time'].dt.year","7b1bb349":"fig, (axis1,axis2) = plt.subplots(1, 2, figsize = (20,6))\nsns.countplot(x = 'year', data = train_df, ax = axis1)\nsns.lineplot(x = 'year', y = 'traffic_volume', data = train_df, ax = axis2);","92b8f15b":"train_df['day'] = train_df['date_time'].dt.day_name()","3ed49d21":"fig, (axis1,axis2) = plt.subplots(1, 2, figsize = (20,6))\nsns.countplot(x = 'day', data = train_df, ax = axis1)\nsns.lineplot(x = 'day', y = 'traffic_volume', data = train_df, ax = axis2);","3df6cfe0":"train_df['holiday'].value_counts()","3041979b":"z = lambda x: False if x == 'None' else True\ntrain_df['holiday'] = train_df['holiday'].apply(z)","5926d059":"fig, (axis1,axis2) = plt.subplots(1, 2, figsize = (20,6))\nsns.countplot(x = 'holiday', data = train_df, ax = axis1)\nsns.barplot(x = 'holiday', y = 'traffic_volume', data = train_df, ax = axis2);","475c6cc9":"(train_df['temp'] == 0).sum()","7231141f":"train_df = train_df[train_df['temp'] != 0]","a9bd7871":"sns.scatterplot(x = 'temp', y = 'traffic_volume', data = train_df);","138b5f7f":"(train_df['rain_1h'] > 100).sum()","44613366":"train_df = train_df[train_df.rain_1h < 100]","814f5ef8":"sns.scatterplot(x = 'rain_1h', y = 'traffic_volume', data = train_df);","6ab14080":"sns.scatterplot(x = 'snow_1h', y = 'traffic_volume', data = train_df);","e12e0702":"sns.scatterplot(x = 'clouds_all', y = 'traffic_volume', data = train_df);","866c4c1a":"fig, (axis1,axis2) = plt.subplots(2, 1, figsize = (16,12))\nsns.countplot(x = 'weather_main', data = train_df, ax = axis1)\nsns.lineplot(x = 'weather_main', y = 'traffic_volume', data = train_df, ax = axis2);","a70546a7":"train_df['weather_description'].value_counts()","bcae2d36":"plt.figure(figsize = (20,6))\nsns.lineplot(x = 'weather_description', y = 'traffic_volume', data = train_df);","897497b6":"plt.figure(figsize=(8, 5))\nplt.title('Correlation between features')\nsns.heatmap(train_df.corr(), annot = True);","dbd8b5e5":"from sklearn.preprocessing import LabelEncoder","411017ee":"# drop the unrequired columns\ntrain_df.drop(['date_time', 'weather_description'], axis = 1, inplace = True)","c3c2e34f":"# convert values of day column to numerical format\nencoder = LabelEncoder()\ntrain_df['day'] = encoder.fit_transform(train_df['day'])","faff6818":"# subtract 242 from the temp column as there is no temperature below it\ntrain_df['temp'] = train_df['temp'] - 242","1d55fd41":"# convert the values of weather_main column to numerical format\nencoder = LabelEncoder()\ntrain_df['weather_main'] = encoder.fit_transform(train_df['weather_main'])","dbac1384":"# import the required modules\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor \nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import AdaBoostRegressor","f392151d":"(X, Y) = (train_df.drop(['traffic_volume'], axis = 1).values, train_df['traffic_volume'].values)\n\n# Scale the values\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n(X_train, X_val, Y_train, Y_val) = train_test_split(X, Y)\nprint(\"X_train shape:\" + str(X_train.shape))\nprint(\"Y_train shape:\" + str(Y_train.shape))\nprint(\"X_val shape:\" + str(X_val.shape))\nprint(\"Y_val shape:\" + str(Y_val.shape))","24ce9b86":"# DataFrame to store the RMSE scores of various algorithms\nresults = pd.DataFrame(columns = ['RMSE'])","b6ff6638":"# helper function to evaluate a model\ndef evaluate_model(regressor, name):\n    # train and test scores\n    train_score = round(regressor.score(X_train, Y_train), 2)\n    val_score = round(regressor.score(X_val, Y_val), 2)\n    # predicted output\n    Y_pred = regressor.predict(X_val)\n\n    print(name + ' Train score: ', train_score)\n    print(name + 'Test score: ', val_score)\n    print('Root Mean Squared error: ', sqrt(mean_squared_error(Y_val, Y_pred)))\n    print('Coefficient of determination: ', r2_score(Y_val, Y_pred))\n    \n    # add the current RMSE to the scores list\n    results.loc[name] = sqrt(mean_squared_error(Y_val, Y_pred))\n    \n    # plot predicted vs true values\n    x_points=np.linspace(0,8e3)\n    plt.figure(figsize=(12,5))\n    plt.plot(x_points, x_points, color='r')\n    plt.scatter(Y_val, Y_pred)\n    plt.xlabel('True Values')\n    plt.ylabel('Predicted Values')\n    plt.title('True Values Vs Predicted Values');","1288c73d":"lireg = LinearRegression()\nlireg.fit(X_train, Y_train)","89781320":"# evaluate the Regressor\nevaluate_model(lireg, 'Linear Regression')","0a9f479c":"dtreg = DecisionTreeRegressor(max_depth = 12)\ndtreg.fit(X_train, Y_train)","c55ddbd2":"# evaluate the Regressor\nevaluate_model(dtreg, 'Decision Tree')","87fc1429":"# n_estimators - The number of trees in the forest.\n# min_samples_split - The minimum number of samples required to split an internal node\nrfreg = RandomForestRegressor(n_estimators = 50, max_depth = 12, min_samples_split = 5)\nrfreg.fit(X_train, Y_train)","e2863d55":"# evaluate the Regressor\nevaluate_model(rfreg, 'Random Forest')","4960561a":"# n_estimators - The number of boosting stages to perform.\n# max_depth - maximum depth of the individual regression estimators.\ngbreg = GradientBoostingRegressor(n_estimators=500, max_depth=10)\ngbreg.fit(X_train, Y_train)","f0b4c1b7":"# evaluate the Regressor\nevaluate_model(gbreg, 'Gradient Boosting')","7dc29d93":"# n_estimators - The number of trees in the forest.\n# learning_rate - Learning rate shrinks the contribution of each classifier by learning_rate.\nadareg = AdaBoostRegressor(base_estimator=dtreg, n_estimators=50, learning_rate=0.01)\nadareg.fit(X_train, Y_train)","55c11264":"# evaluate the Regressor\nevaluate_model(adareg, 'Ada Boost')","19efb332":"results","80995f0b":"plt.plot(gbreg.feature_importances_)","ec4e37ff":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn.pipeline import Pipeline","aca5f046":"def nn_model ():\n    model = Sequential()\n    model.add(Dense(128, input_dim=10, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(256, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(256, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(1, kernel_initializer='normal'))\n\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    return model","d1a19530":"estimator = KerasRegressor(build_fn=nn_model, epochs=10, batch_size=5, verbose=0)\nkfold = KFold(n_splits=10)","b06eef9e":"estimator.fit(X_train, Y_train)","13525bdd":"# predicted output\nY_pred_nn = estimator.predict(X_val)\n\nprint('Root Mean Squared error: ', sqrt(mean_squared_error(Y_val, Y_pred_nn)))\nprint('Coefficient of determination: ', r2_score(Y_val, Y_pred_nn))","b7bff171":"### Temperature vs Traffic Volume","b2d98033":"### Day vs Traffic Volume","b138c066":"### Year vs Traffic Volume","332a3ef2":"### Using Random Forest Regressor","296f45d2":"### Neural Networks using Keras","85bb007e":"### Holiday vs Traffic Volume","623ea06f":"Thus we can see that in the months when its cold, the traffic volume decreases is slightly less.","4689036b":"### Using Gradient Boosting","ae887824":"### Using Decision Tree Regressor","d1d8a40f":"### Clouds vs Traffic Volume","2c5f4a25":"## Data Analysis","f6ca7cec":"### Correlation between features","3cecf698":"Therefore there is an outlier and we have to remove it.","4712ed67":"As the temperature can't be 0 kelvin therefore these are outliers.","dd85e79f":"### Short Weather Description vs Traffic Volume","e45a68ed":"## Data Visualization","f901c410":"### Time vs Traffic Volume","53fcdd10":"We can see from the above heatmap that features are not coorelated.","438c4eb2":"Thus we can see that **Gradient Boosting** provide the least RMSE, therefore we will use it to compute the outputs.","36fe50b0":"## Machine Learning","f3f65030":"### Snow vs Traffic Volume","64b46c06":"### Rain vs Traffic Volume","56950c1d":"## Preprocessing of data","d2a5ee9b":"The above plot shows that time and da are the most important features.","f137ea21":"Now we can see from the values of the column that it contains long description of the weather_main column, so we can drop it.","ad82cdf3":"### Comparison between all the above algorithms","e4672674":"Thus from the above plots we can see that traffic on holidays is usually less than traffic on non holidays.","81ac280d":"### Month vs Traffic Volume","9bd0d19f":"### Long Weather Description vs Traffic Volume","650ab8b0":"### Using Linear Regression","d4d1501e":"# Traffic Volume Prediction\n\nGive some attributes we have to predict the traffic volume.\n\n**There are 9 attributes which represents the following -**\n\n-    **date_time** - DateTime Hour of the data collected in local CST time\n-    **holiday** - Categorical US National holidays plus regional holiday, Minnesota State Fair\n-    **temp** - Numeric Average temp in kelvin\n-    **rain_1h** - Numeric Amount in mm of rain that occurred in the hour\n-    **snow_1h** - Numeric Amount in mm of snow that occurred in the hour\n-    **clouds_all** - Numeric Percentage of cloud cover\n-    **weather_main** - Categorical Short textual description of the current weather\n-    **weather_description** - Categorical Longer textual description of the current weather\n-    **traffic_volume** - Numeric Hourly I-94 ATR 301 reported westbound traffic volume (Target)","939e1579":"Thus we can infer that traffic is much higher in morning and noon time and gradually decreases as night progresses.","01e00360":"### Using AdaBoost"}}