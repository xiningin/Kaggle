{"cell_type":{"44df0a16":"code","a5711a59":"code","d626232a":"code","4e1ce636":"code","a6bb0db9":"code","22be785e":"code","0e06f669":"code","7b747645":"code","6ecd3a00":"code","0201b0f0":"code","f7667639":"code","defa7839":"code","6b99fa95":"code","8120bdd3":"code","df9e1583":"code","193f881a":"code","91ef828d":"code","f9f07ec5":"code","035e50eb":"code","289af9dd":"code","28f1110e":"code","6fe08597":"code","905f1e38":"code","66d57683":"code","040b4aee":"code","ad13a21d":"markdown","e3671e0b":"markdown","a842f9ca":"markdown","e78edabc":"markdown","584a8651":"markdown","aac36c9a":"markdown","4eb741d0":"markdown","6cd16b63":"markdown","98017c96":"markdown","9328b07d":"markdown","bafb753c":"markdown","f162ccc0":"markdown","f564edce":"markdown","d56a53f9":"markdown","85f3a2ec":"markdown","27eaee38":"markdown","6674a36a":"markdown"},"source":{"44df0a16":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.model_selection import RandomizedSearchCV\nimport pickle\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm\nfrom sklearn.utils import shuffle\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a5711a59":"df=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/test.csv\")","d626232a":"print(df.shape,\"\\n\",df.head())","4e1ce636":"df[\"Province_State\"].fillna(\"state\", inplace = True)    \ndf[\"Country_Region\"] = [country_name.replace(\"'\",\"\") for country_name in df[\"Country_Region\"]]\nprint(df.shape,\"\\n\",df.head())","a6bb0db9":"data=[]\ncountries=df.Country_Region.unique()\nfor country in countries:\n    provinces=df[df.Country_Region==country].Province_State.unique()\n    for province in provinces:\n        temp_df=df[(df['Country_Region'] == country) & (df['Province_State']==province)]\n        for i in range(0,70):\n            Iday1=float(temp_df.iloc[i].ConfirmedCases)\n            Iday2=float(temp_df.iloc[i+1].ConfirmedCases)\n            Iday3=float(temp_df.iloc[i+2].ConfirmedCases)\n            Iday4=float(temp_df.iloc[i+3].ConfirmedCases)\n            Iday5=float(temp_df.iloc[i+4].ConfirmedCases)\n            Iday6=float(temp_df.iloc[i+5].ConfirmedCases)\n            Iday7=float(temp_df.iloc[i+6].ConfirmedCases)\n            Fday1=float(temp_df.iloc[i].Fatalities)\n            Fday2=float(temp_df.iloc[i+1].Fatalities)\n            Fday3=float(temp_df.iloc[i+2].Fatalities)\n            Fday4=float(temp_df.iloc[i+3].Fatalities)\n            Fday5=float(temp_df.iloc[i+4].Fatalities)\n            Fday6=float(temp_df.iloc[i+5].Fatalities)\n            Fday7=float(temp_df.iloc[i+6].Fatalities)\n            target_infection=float(temp_df.iloc[i+7].ConfirmedCases)\n            target_fatal=float(temp_df.iloc[i+7].Fatalities)\n            data.append({\"Iday1\":Iday1,\"Iday2\":Iday2,\"Iday3\":Iday3,\"Iday4\":Iday4,\"Iday5\":Iday5,\n                         \"Iday6\":Iday6,\"Iday7\":Iday7,\"Fday1\":Fday1,\"Fday2\":Fday2,\"Fday3\":Fday3,\n                         \"Fday4\":Fday4,\"Fday5\":Fday5,\"Fday6\":Fday6,\"Fday7\":Fday7,\n                         \"target_infection\":target_infection,\"target_fatal\":target_fatal})        ","22be785e":"new_data=pd.DataFrame(data)\nprint(\"The shape of new dataFrame:\",new_data.shape,\"\\nThe columns are:\",new_data.columns)\nprint(new_data.head(-5))","0e06f669":"X_y=shuffle(new_data)\ny_cases=X_y['target_infection']\ny_fatal=X_y['target_fatal']\nX=X_y.drop(['target_infection','target_fatal'],axis=1)\nX_train_cases, X_test_cases, y_train_cases, y_test_cases = train_test_split(X, y_cases, test_size=0.33)\nX_train_fatal, X_test_fatal, y_train_fatal, y_test_fatal = train_test_split(X, y_fatal, test_size=0.33)\nprint(\"Shape of infection train dataset:\",(X_train_cases.shape,y_train_cases.shape))\nprint(\"Shape of infection test dataset:\",(X_test_cases.shape,y_test_cases.shape))\nprint(\"Shape of fatal train dataset:\",(X_train_fatal.shape,y_train_fatal.shape))\nprint(\"Shape of fatal test dataset:\",(X_test_fatal.shape,y_test_fatal.shape))","7b747645":"reg_case=ElasticNet(random_state=42,l1_ratio=0.1,max_iter=2200)\nparams = [{'alpha': [10**-4,10**-3, 10**-2,10**-1, 10**0,10**1, 10**2,10**3,10**4]}]\nclf = RandomizedSearchCV(reg_case, params, cv=4, scoring='neg_root_mean_squared_error',return_train_score=True)\nsearch=clf.fit(X_train_cases, y_train_cases)\nresults = pd.DataFrame.from_dict(clf.cv_results_)\nprint(\"The best parameter is:\",search.best_params_)","6ecd3a00":"best_alpha=10000\nbest_itr=2400\nfinal_reg_case=ElasticNet(random_state=42,alpha=best_alpha,l1_ratio=0.1,max_iter=best_itr)\nfinal_reg_case.fit(X_train_cases,y_train_cases)","0201b0f0":"pred=final_reg_case.predict(X_test_cases)\nprint(\"The RMSE value\",(mean_squared_error(y_test_cases,pred))**0.5)","f7667639":"reg_fatal=ElasticNet(random_state=42,l1_ratio=0.1,max_iter=3500)\nparams = [{'alpha': [10**-4,10**-3, 10**-2,10**-1, 10**0,10**1, 10**2,10**3,10**4]}]\nclf = RandomizedSearchCV(reg_fatal, params, cv=4, scoring='neg_root_mean_squared_error',return_train_score=True)\nsearch=clf.fit(X_train_fatal, y_train_fatal)\nresults = pd.DataFrame.from_dict(clf.cv_results_)\nprint(\"The best parameter is:\",search.best_params_)","defa7839":"best_alpha=100\nbest_iter=3500\nfinal_reg_fatal = ElasticNet(random_state=42,alpha=best_alpha,l1_ratio=0.1,max_iter=best_iter)\nfinal_reg_fatal.fit(X_train_fatal, y_train_fatal)","6b99fa95":"pred=final_reg_fatal.predict(X_test_fatal)\nprint(\"The RMSE value\",(mean_squared_error(y_test_fatal,pred))**0.5)","8120bdd3":"data=[]\ncountries=df.Country_Region.unique()\nfor country in countries:\n    provinces=df[df.Country_Region==country].Province_State.unique()\n    for province in provinces:\n        temp_df=df[(df['Country_Region'] == country) & (df['Province_State']==province)]\n        for i in range(0,70):\n            Iday1=float(temp_df.iloc[i].ConfirmedCases)\n            Iday2=float(temp_df.iloc[i+1].ConfirmedCases)\n            Iday3=float(temp_df.iloc[i+2].ConfirmedCases)\n            Iday4=float(temp_df.iloc[i+3].ConfirmedCases)\n            Iday5=float(temp_df.iloc[i+4].ConfirmedCases)\n            Iday6=float(temp_df.iloc[i+5].ConfirmedCases)\n            Iday7=float(temp_df.iloc[i+6].ConfirmedCases)\n            Fday1=float(temp_df.iloc[i].Fatalities)\n            Fday2=float(temp_df.iloc[i+1].Fatalities)\n            Fday3=float(temp_df.iloc[i+2].Fatalities)\n            Fday4=float(temp_df.iloc[i+3].Fatalities)\n            Fday5=float(temp_df.iloc[i+4].Fatalities)\n            Fday6=float(temp_df.iloc[i+5].Fatalities)\n            Fday7=float(temp_df.iloc[i+6].Fatalities)\n            if Iday6==0 :\n                iavg=1\n            else:\n                iavg=Iday7\/(Iday6)\n            if Fday6==0:\n                favg=1\n            else:    \n                favg=Fday7\/(Fday6)        \n            target_infection=float(temp_df.iloc[i+7].ConfirmedCases)\n            target_fatal=float(temp_df.iloc[i+7].Fatalities)\n            data.append({\"Iday1\":Iday1,\"Iday2\":Iday2,\"Iday3\":Iday3,\"Iday4\":Iday4,\"Iday5\":Iday5,\n                         \"Iday6\":Iday6,\"Iday7\":Iday7,\"Fday1\":Fday1,\"Fday2\":Fday2,\"Fday3\":Fday3,\n                         \"Fday4\":Fday4,\"Fday5\":Fday5,\"Fday6\":Fday6,\"Fday7\":Fday7,'iratio':iavg,\"fratio\":favg,\"target_infection\":target_infection,\"target_fatal\":target_fatal})        ","df9e1583":"featured=pd.DataFrame(data)\nX_y_f=shuffle(featured)\ny_cases_f=X_y_f['target_infection']\ny_fatal_f=X_y_f['target_fatal']\nX_f=X_y_f.drop(['target_infection','target_fatal'],axis=1)\nX_train_cases_f, X_test_cases_f, y_train_cases_f, y_test_cases_f = train_test_split(X_f, y_cases_f, test_size=0.33)\nX_train_fatal_f, X_test_fatal_f, y_train_fatal_f, y_test_fatal_f = train_test_split(X_f, y_fatal_f, test_size=0.33)\nprint(\"Shape of featurized infection train dataset:\",(X_train_cases_f.shape,y_train_cases_f.shape))\nprint(\"Shape of featurized infection test dataset:\",(X_test_cases_f.shape,y_test_cases_f.shape))\nprint(\"Shape of featurized fatal train dataset:\",(X_train_fatal_f.shape,y_train_fatal_f.shape))\nprint(\"Shape of featurized fatal test dataset:\",(X_test_fatal_f.shape,y_test_fatal_f.shape))","193f881a":"reg_case_f=ElasticNet(random_state=42,l1_ratio=0.1,max_iter=2200)\nparams = [{'alpha': [10**-4,10**-3, 10**-2,10**-1, 10**0,10**1, 10**2,10**3,10**4]}]\nclf_f= RandomizedSearchCV(reg_case_f, params, cv=4, scoring='neg_root_mean_squared_error',return_train_score=True)\nsearch_f=clf_f.fit(X_train_cases_f, y_train_cases_f)\nresults_f = pd.DataFrame.from_dict(clf_f.cv_results_)\nprint(\"The best parameter is:\",search_f.best_params_)","91ef828d":"best_alpha=100\nbest_itr=4200\nfinal_reg_case_f=ElasticNet(random_state=42,alpha=best_alpha,l1_ratio=0.1,max_iter=best_itr)\nfinal_reg_case_f.fit(X_train_cases_f,y_train_cases_f)","f9f07ec5":"pred_f=final_reg_case_f.predict(X_test_cases_f)\nprint(\"RMSE is:\",(mean_squared_error(y_test_cases_f,pred_f))**0.5)","035e50eb":"reg_fatal_f=ElasticNet(random_state=42,alpha=best_alpha,l1_ratio=0.1,max_iter=2200)\nparams = [{'alpha': [10**-4,10**-3, 10**-2,10**-1, 10**0,10**1, 10**2,10**3,10**4]}]\nclf_f= RandomizedSearchCV(reg_fatal_f, params, cv=4, scoring='neg_root_mean_squared_error',return_train_score=True)\nsearch_f=clf_f.fit(X_train_fatal_f, y_train_fatal_f)\nresults_f = pd.DataFrame.from_dict(clf_f.cv_results_)\nprint(\"The best parameter is:\",search_f.best_params_)\n","289af9dd":"best_alpha=100\nbest_itr=2400\nfinal_reg_fatal_f=ElasticNet(random_state=42,alpha=best_alpha,l1_ratio=0.1,max_iter=best_itr)\nfinal_reg_fatal_f.fit(X_train_fatal_f,y_train_fatal_f)","28f1110e":"pred_f=final_reg_fatal_f.predict(X_test_fatal_f)\nprint(\"RMSE is:\",(mean_squared_error(y_test_fatal_f,pred_f))**0.5)","6fe08597":"test[\"Province_State\"].fillna(\"state\", inplace = True)    \ntest[\"Country_Region\"] = [country_name.replace(\"'\",\"\") for country_name in test[\"Country_Region\"]]","905f1e38":"import math\nimport random\npredicted_case=[]\npredicted_fatal=[]\ncountries=df.Country_Region.unique()\nfor country in countries:\n    provinces=df[df.Country_Region==country].Province_State.unique()\n    for province in provinces:\n        temp_df=df[(df['Country_Region'] == country) & (df['Province_State']==province)&(df['Date']>='2020-03-26')]\n        ongoingCases=list(temp_df.ConfirmedCases.values)\n        ongoingFatal=list(temp_df.Fatalities.values)\n        predicted_case.extend(ongoingCases)\n        predicted_fatal.extend(ongoingFatal)\n        for _ in range(1,31):  \n            if ongoingCases[-2]==0:\n                iavg=ongoingCases[-1]\n            else:\n                iavg=ongoingCases[-1]\/ongoingCases[-2]\n            if ongoingFatal[-2]==0:\n                favg=ongoingFatal[-1]\n            else:    \n                favg=ongoingFatal[-1]\/ongoingFatal[-2] \n            point=ongoingCases[len(ongoingCases)-7:]+ongoingFatal[len(ongoingFatal)-7:]+[iavg,favg]\n            # print(point)\n            # print()\n            randF=random.random()\n            randI=random.random()\n            predC=final_reg_case_f.predict([point])\n            predF=final_reg_fatal_f.predict([point])\n            predicted_case.append(int(predC[0]-(randI*predC[0]*0.002)))\n            predicted_fatal.append(abs(int(predF[0]-(randF*predF[0]*0.0005))))\n            ongoingCases.append(predC[0]-(randI*predC[0]*0.002))\n            ongoingFatal.append(abs(predF[0]-(randF*predF[0]*0.0005)))","66d57683":"test['ConfirmedCases']=list(map(int,predicted_case))\ntest['Fatalities']=list(map(int,predicted_fatal))","040b4aee":"submission=test[['ForecastId','ConfirmedCases','Fatalities']]\nsubmission=shuffle(submission)\nsubmission.to_csv(\"submission.csv\",index=False)","ad13a21d":"# COVID-19 Forecasting using ElasticNet ","e3671e0b":"### RandomSearch is been done to find out the best parameter\n#### Note:Scaling didn't yield good output hence proceeded with the original data \n    ","a842f9ca":"### Considering the past 7 days data to forecast the cases and fatalities on the 8th day","e78edabc":"### All other procedures remain the same","584a8651":"### Considering the fact that the number of cases on a given day is influenced by the ratio of cases in the two previous days.Taking this into account we create two new features 'iratio' and 'fratio'","aac36c9a":"## Forecasting the number of cases and fatalities","4eb741d0":"<h2>Training the Infection data using Elastic Net ","6cd16b63":"## Featurization","98017c96":"#### Calculating the Root mean squared value .Since the data isn't noramlized we get a large value","9328b07d":"### Some countries where the provinces are not mentioned can be replaced .And some data preprocessing ","bafb753c":"## Dataset preparation","f162ccc0":"## Importing Libraries","f564edce":"### The same procedure is been followed on this data also","d56a53f9":"## Updating the values in the test data","85f3a2ec":"## Training the fatality data","27eaee38":"### Method used :\n### 1)Intialize the list with the data of previous seven days and predict the value for the next day.\n### 2)Append this value to the list and use this updated list's latest data to predict the next one.(So on........)\n","6674a36a":"## Splitting the data into Train and test data"}}