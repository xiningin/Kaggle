{"cell_type":{"2274992b":"code","674a76e4":"code","d015ae9b":"code","72a25f3d":"code","fae95afc":"code","ff256be5":"code","13fab9d7":"code","2fa5f1f6":"code","58c7f058":"code","bbcce571":"code","1cb34a86":"code","6b46df56":"code","dd29bb21":"code","27e24f98":"code","5ac287ee":"code","b8550f65":"code","d950187a":"code","ab08ae27":"code","d8380d84":"code","c4e91001":"code","e850f472":"code","dbce0672":"code","73fac710":"code","c74b540e":"code","0f93ce87":"code","67ced830":"code","9eff8fbe":"code","bf24be5f":"code","4b8a4587":"code","11c21ea8":"code","3e969dd3":"code","b87420e4":"code","02b25de1":"code","d58ca9e7":"code","2aa20da7":"code","f5caf047":"code","ffb589f7":"code","d095343e":"code","82ced383":"code","80afff57":"code","221c15db":"markdown","9678b65d":"markdown","f370b59d":"markdown","637d16d8":"markdown","dd3f6c1f":"markdown","c55045b4":"markdown"},"source":{"2274992b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport re\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf","674a76e4":"data = pd.read_csv('..\/input\/all-space-missions-from-1957\/Space_Corrected.csv')","d015ae9b":"data","72a25f3d":"data.drop([data.columns[0], data.columns[1], 'Location', 'Detail'], axis=1, inplace=True)","fae95afc":"data","ff256be5":"data.columns","13fab9d7":"data.columns = ['Company Name', 'Datum', 'Status Rocket', 'Rocket', 'Status Mission']","2fa5f1f6":"data.isnull().sum()","58c7f058":"data['Rocket'].unique()","bbcce571":"for value in data['Rocket']:\n    print(type(value))","1cb34a86":"data['Rocket'] = data['Rocket'].astype(str).apply(lambda x: x.replace(',', '')).astype(np.float32)","6b46df56":"data['Rocket'] = data['Rocket'].fillna(data['Rocket'].mean())","dd29bb21":"data.isnull().sum()","27e24f98":"data","5ac287ee":"def get_year_from_date(date):\n    year = re.search(r'[^,]*$', date).group(0)\n    year = re.search(r'^\\s[^\\s]*', year).group(0)\n    return np.int16(year)","b8550f65":"def get_month_from_date(date):\n    month = re.search(r'^[^0-9]*', date).group(0)\n    month = re.search(r'\\s.*$', month).group(0)\n    return month.strip()\n    ","d950187a":"data['Year'] = data['Datum'].apply(get_year_from_date)\ndata['Month'] = data['Datum'].apply(get_month_from_date)\ndata.drop('Datum', axis=1, inplace=True)","ab08ae27":"data","d8380d84":"data['Status Mission'].unique()","c4e91001":"data['Status Mission'] = data['Status Mission'].apply(lambda x: x if x == 'Success' else 'Failure')","e850f472":"encoder = LabelEncoder()\n\ndata['Status Mission'] = encoder.fit_transform(data['Status Mission'])","dbce0672":"data","73fac710":"month_ordering = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']","c74b540e":"data['Status Rocket'].unique()","0f93ce87":"status_ordering = ['StatusRetired', 'StatusActive']","67ced830":"# Given some data, a column of that data, and an ordering of the values in that column,\n# perform ordinal encoding on the column and return the result.\n\ndef ordinal_encode(data, column, ordering):\n    return data[column].apply(lambda x: ordering.index(x))","9eff8fbe":"data['Month'] = ordinal_encode(data, 'Month', month_ordering)\ndata['Status Rocket'] = ordinal_encode(data, 'Status Rocket', status_ordering)","bf24be5f":"data","4b8a4587":"def onehot_encode(data, column):\n    dummies = pd.get_dummies(data[column])\n    data = pd.concat([data, dummies], axis=1)\n    data.drop(column, axis=1, inplace=True)\n    return data","11c21ea8":"data = onehot_encode(data, 'Company Name')","3e969dd3":"data","b87420e4":"y = data['Status Mission']\nX = data.drop('Status Mission', axis=1)","02b25de1":"scaler = MinMaxScaler()\n\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)","d58ca9e7":"X","2aa20da7":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7)","f5caf047":"y.sum() \/ len(y)","ffb589f7":"inputs = tf.keras.Input(shape=(60,))\nx = tf.keras.layers.Dense(16, activation='relu')(inputs)\nx = tf.keras.layers.Dense(16, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=[tf.keras.metrics.AUC(name='auc')]\n)\n\n\nbatch_size=32\nepochs=35\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs\n)","d095343e":"plt.figure(figsize=(14, 10))\n\nepochs_range = range(1, epochs + 1)\ntrain_loss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.plot(epochs_range, train_loss, label=\"Training Loss\")\nplt.plot(epochs_range, val_loss, label=\"Validation Loss\")\n\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend('upper right')\n\nplt.show()","82ced383":"np.argmin(val_loss)","80afff57":"model.evaluate(X_test, y_test)","221c15db":"# Training","9678b65d":"## Missing Values","f370b59d":"# Preprocessing","637d16d8":"## Encoding","dd3f6c1f":"# Getting Started","c55045b4":"## Scaling"}}