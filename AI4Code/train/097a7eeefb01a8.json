{"cell_type":{"8980ea61":"code","711b6bbb":"code","071b8b11":"code","894df335":"code","353a968a":"code","9256c7ad":"code","313016f6":"code","2dde8af2":"code","48b0edbf":"code","067be73e":"code","2ef4b491":"code","3f19561b":"code","12070e81":"code","ca2878ab":"code","dda3ff90":"code","b3a6a321":"code","c8e3e3ba":"code","7a587ce9":"code","ad6be4a2":"code","448d71d2":"code","a74cf330":"code","fb407ee0":"code","61025f54":"code","ecbde4ba":"code","0395ab85":"code","506682d5":"code","f8cd3d93":"code","c03f040d":"code","b9e1e499":"code","02415df4":"code","fa54d999":"code","989b60b0":"code","c8e95a00":"code","58425f95":"code","04b306dc":"code","83d8b49e":"code","c8c0e054":"code","9b0695c9":"code","a23d1820":"code","0b0ccc23":"code","915a92e3":"code","8a46bc2d":"code","abf32602":"code","4fc09bac":"markdown","81a89609":"markdown","838c81bd":"markdown","f0699ba2":"markdown","30e158ca":"markdown","8677c50d":"markdown","8a889fa3":"markdown","9f1f7151":"markdown","0abbfc67":"markdown","57664f92":"markdown","90bc0cb3":"markdown","3cd5156a":"markdown"},"source":{"8980ea61":"# automatic reloading and inline plotting\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","711b6bbb":"# import libraries\nfrom fastai.imports import *\nfrom fastai.torch_imports import *\nfrom fastai.transforms import *\nfrom fastai.conv_learner import *\nfrom fastai.model import *\nfrom fastai.dataset import *\nfrom fastai.sgdr import *\nfrom fastai.plots import *\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","071b8b11":"# make sure CUDA is available and enabled\nprint(torch.cuda.is_available(), torch.backends.cudnn.enabled)","894df335":"# setup paths\n# model needs in be stored in \/tmp or else kaggle complains about creating too many files\nPATH = \"..\/input\"\nTMP_PATH = \"\/tmp\/tmp\"\nMODEL_PATH = \"\/tmp\/model\/\"","353a968a":"# all the necessary data is in the CSV files\n!ls -l ..\/input","9256c7ad":"# create panda dataframes from CSVs\ntrain_df = pd.read_csv(f'{PATH}\/fashion-mnist_train.csv')\ntest_df = pd.read_csv(f'{PATH}\/fashion-mnist_test.csv')","313016f6":"# examine dataframe structure\ntrain_df.head()","2dde8af2":"# test data is also labeled\ntest_df.head()","48b0edbf":"print('train:', train_df.shape)\nprint('test: ', test_df.shape)","067be73e":"# split out cross-validation dataframe\nvalid_df = train_df.sample(frac=0.10, random_state=42)\nvalid_df.shape","2ef4b491":"# drop cross-validation data from train dataframe\ntrain_df = train_df.drop(valid_df.index)\ntrain_df.shape","3f19561b":"# create inputs\ntrain_X = train_df.drop('label', axis=1)\nvalid_X = valid_df.drop('label', axis=1)\ntest_X = test_df.drop('label', axis=1)","12070e81":"# create labels \ntrain_Y = train_df['label']\nvalid_Y = valid_df['label']\ntest_Y = test_df['label']","ca2878ab":"# sanity check\nprint('train:', train_X.shape, train_Y.shape)\nprint('valid:', valid_X.shape, valid_Y.shape)\nprint('test: ', test_X.shape, test_Y.shape)","dda3ff90":"# convert to ndarray\ntrain_X = np.array(train_X)\nvalid_X = np.array(valid_X)\ntest_X = np.array(test_X)\ntrain_Y = np.array(train_Y)\nvalid_Y = np.array(valid_Y)\ntest_Y = np.array(test_Y)","b3a6a321":"# reshape into single channel ndarray\ntrain_X = train_X.reshape(-1, 28, 28)\nvalid_X = valid_X.reshape(-1, 28, 28)\ntest_X = test_X.reshape(-1, 28, 28)\nprint('train:', train_X.shape)\nprint('valid:', valid_X.shape)\nprint('test:', test_X.shape)","c8e3e3ba":"# reshape into 3 channel ndarray (as expected by model)\ntrain_X = np.stack((train_X, ) * 3, axis=-1)\nvalid_X = np.stack((valid_X, ) * 3, axis=-1)\ntest_X = np.stack((test_X, ) * 3, axis=-1)\nprint('train:', train_X.shape)\nprint('valid:', valid_X.shape)\nprint('test:', test_X.shape)","7a587ce9":"# sanity check\nprint('train:', train_X.shape, train_Y.shape)\nprint('valid:', valid_X.shape, valid_Y.shape)\nprint('test:', test_X.shape, test_Y.shape)","ad6be4a2":"# create label dictionary\nlabel_dict = {\n    0: 't-shirt\/top',\n    1: 'trouser',\n    2: 'pullover',\n    3: 'dress',\n    4: 'coat',\n    5: 'sandal',\n    6: 'shirt',\n    7: 'sneaker',\n    8: 'bag',\n    9: 'ankle boot'    \n}","448d71d2":"# visualize training images with labels\nimages = [train_X[i] for i in range(36)]\nlabels = [label_dict.get(train_Y[i]) for i in range(36)]\nplots(images, figsize=(12,12), rows=6, titles=labels)","a74cf330":"# define architecture, image size, batch size\n# resnet34 is one of the smaller, modern, pre-trained models, so it will run fairly quickly\n# for better accuracy try a bigger model\narch = resnet34\nsz = 28\nbs = 64","fb407ee0":"def get_data(sz):\n    tfms = tfms_from_model(arch, sz)\n    return ImageClassifierData.from_arrays(path=PATH, \n                                       trn=(train_X, train_Y),\n                                       val=(valid_X, valid_Y),\n                                       bs=bs,\n                                       tfms=tfms,\n                                       classes=train_Y,\n                                       test=test_X)","61025f54":"data = get_data(sz)","ecbde4ba":"# create learner with precompute enabled\nlearn = ConvLearner.pretrained(arch, data, precompute=True, tmp_name=TMP_PATH, models_name=MODEL_PATH)","0395ab85":"# summarize model structure\n# the fully connected layers at the end are the only ones that are trained when the model is frozen\nlearn.summary","506682d5":"# find optimal learning rate\nlrf = learn.lr_find()\nlearn.sched.plot()","f8cd3d93":"lr = 0.01","c03f040d":"# first train only the randomly initialized layers added to the end of the model\nlearn.fit(lr, 4)","b9e1e499":"learn.sched.plot_loss()","02415df4":"# disable precompute and unfreeze layers\nlearn.precompute=False\nlearn.unfreeze()","fa54d999":"# define differential learning rates\nlrs = np.array([lr\/9, lr\/3, lr])","989b60b0":"# retrain full model\nlearn.fit(lrs, 3, cycle_len=1, cycle_mult=2)","c8e95a00":"learn.sched.plot_loss()","58425f95":"# save full model\nlearn.save(\"28_all\")","04b306dc":"# get accuracy for validation set\nlog_preds, y = learn.TTA(n_aug=1)\nprobs = np.mean(np.exp(log_preds), 0)\naccuracy_np(probs, y)","83d8b49e":"# print classification report\npreds = np.argmax(probs, axis=1)\ntarget_names = [label_dict.get(i) for i in range(10)]\nprint(classification_report(y, preds, target_names=target_names))","c8c0e054":"# plot confusion matrix\ncm = confusion_matrix(y, preds)\nclasses = np.unique(train_Y)\nplot_confusion_matrix(cm, classes)","9b0695c9":"# count incorrect predictions\nidxs = np.where(preds != y)[0]\nlen(idxs)","a23d1820":"# visualize incorrect predictions\n# title is (prediction, label)\nimages = [test_X[i] for i in idxs[0:40]]\ntitles = [(preds[i], test_Y[i]) for i in idxs[0:40]]\nplots(images, rows=4, titles=titles)","0b0ccc23":"# get accuracy for test set\nlog_preds_test, y_test = learn.TTA(n_aug=1, is_test=True)\nprobs_test = np.mean(np.exp(log_preds_test), 0)\naccuracy_np(probs_test, test_Y)","915a92e3":"# print classification report\npreds_test = np.argmax(probs_test, axis=1)\ntarget_names = [label_dict.get(i) for i in range(10)]\nprint(classification_report(test_Y, preds_test, target_names=target_names))","8a46bc2d":"# plot confusion matrix\npreds_test = np.argmax(probs_test, axis=1)\ncm_test = confusion_matrix(test_Y, preds_test)\nplot_confusion_matrix(cm_test, classes)","abf32602":"# count incorrect predictions\nidxs = np.where(preds_test != test_Y)[0]\nlen(idxs)","4fc09bac":"# Prepare data","81a89609":"# Train model","838c81bd":"# Results","f0699ba2":"#### Validation set","30e158ca":"# Future considerations\nIdeas that might improve performance:\n* Use bigger pre-trained model\n* Add data augmentations\n* Increase batch size\n* Don't create validation set, just use test set","8677c50d":"# About\nLeverage the techniques learned in the [fast.ai](https:\/\/www.fast.ai\/) course to classify clothing in the Fashion MNIST dataset.\n* Validation set accuracy: 92.6%\n* Test set accuracy: 92.8%","8a889fa3":"# Acknowledgements\n\nThanks to the following kernels which I learned things from:\n* [MNIST test with fastai]( https:\/\/www.kaggle.com\/stefanbuenten\/mnist-test-with-fastai)\n* [fast.ai lesson1](https:\/\/www.kaggle.com\/hortonhearsafoo\/fast-ai-lesson-1)\n* [Tutorial CNN Model with Tensorflow,Keras](https:\/\/www.kaggle.com\/pavansanagapati\/tutorial-cnn-model-with-tensorflow-keras)","9f1f7151":"# Define model","0abbfc67":"# Visualize data","57664f92":"#### Test set","90bc0cb3":"# Setup","3cd5156a":"# Inspect data"}}