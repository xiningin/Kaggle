{"cell_type":{"e8964205":"code","1636d81d":"code","1b970265":"code","eff563fa":"code","db442d48":"markdown"},"source":{"e8964205":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom IPython.display import HTML\nfrom matplotlib import animation\n\ndata_dir = '..\/input\/nfl-big-data-bowl-2020\/'\ndf = pd.read_csv(data_dir + 'train.csv', low_memory=False)\ndrop_cols = ['Team', 'PlayerHeight', 'PlayerWeight', 'PlayerBirthDate', 'PlayerCollegeName',\n           'Position', 'Stadium', 'Location', 'StadiumType', 'Turf', 'GameWeather',\n           'Temperature', 'Humidity', 'WindSpeed', 'WindDirection']\ndf = df.drop(drop_cols, axis=1)\n\ngames = np.unique(df['GameId'].values)\nplays = np.unique(df['PlayId'].values)\n\ndef update(i, df_game, play_list):\n    plt.cla()\n    df_play = df_game[df_game['PlayId']==play_list[i]]\n\n    # player info\n    acc        = df_play['A'].values\n    x_coord    = df_play['X'].values\n    y_coord    = df_play['Y'].values\n    direction  = df_play['Dir'].values\n    nfl_id     = df_play['NflId'].values\n\n    # play info\n    game_id         = df_play['GameId'].values[0]\n    play_id         = df_play['PlayId'].values[0]\n    yards           = df_play['Yards'].values[0]\n    yard_line       = df_play['YardLine'].values[0]\n    quarter         = df_play['Quarter'].values[0]\n    down            = df_play['Down'].values[0]\n    distance        = df_play['Distance'].values[0]\n    home_score      = df_play['HomeScoreBeforePlay'].values[0]\n    visitor_score   = df_play['VisitorScoreBeforePlay'].values[0]\n    rusher_id       = df_play['NflIdRusher'].values[0]\n    play_dir        = df_play['PlayDirection'].values[0]\n    field_position  = df_play['FieldPosition'].values[0]\n    possession_team = df_play['PossessionTeam'].values[0]\n    game_clock      = df_play['GameClock'].values[0]\n    season          = df_play['Season'].values[0]\n    week            = df_play['Week'].values[0]\n    home_team       = df_play['HomeTeamAbbr'].values[0]\n    visitor_team    = df_play['VisitorTeamAbbr'].values[0]\n    \n    a_x =  np.cos(direction * ((2 * np.pi)\/360 + (np.pi\/2)))\n    a_y =  np.sin(direction * ((2 * np.pi)\/360 + (np.pi\/2)))\n\n    rusher_idx = np.where(rusher_id == nfl_id)[0][0]\n    \n    plt.ylim((0, 53))\n    plt.xlim((0, 120))\n    norm = matplotlib.colors.Normalize(vmin=acc.min(),vmax=acc.max())\n    plt.grid()\n    hw = 1.2\n\n    q_away = ax.quiver(x_coord[0:10], y_coord[0:10],\n                       a_x[0:10], a_y[0:10],acc[0:10],\n                       cmap='autumn', norm=norm, \n                       scale=30, headwidth=hw)\n    q_home = ax.quiver(x_coord[11:21], y_coord[11:21],\n                       a_x[11:21], a_y[11:21],acc[11:21],\n                       cmap='winter', norm=norm, \n                       scale=30, headwidth=hw)\n\n    plt.plot(x_coord[0:10],y_coord[0:10],'o',color='red', label=\"home\")\n    plt.plot(x_coord[11:21],y_coord[11:21],'o',color='blue', label=\"away\")\n\n    plt.plot(x_coord[rusher_idx],y_coord[rusher_idx],'d',color='brown', markersize=16)\n\n    ax.axvline(10,c='gray') #Home Endzone\n    ax.axvline(60,c='gray') #Center line\n    ax.axvline(110,c='gray') #Away Endzone\n    \n    #PlayDirection arrow\n    if play_dir == 'right':\n        ax.arrow(x=3,y=51,dx=3,dy=0,width=0.4,color='b')\n    else:\n        ax.arrow(x=8,y=51,dx=-3,dy=0,width=0.4,color='r')\n\n    #Score Board\n    ax.text(1, 47, game_clock[:5], size=22, color='orange')\n    ax.text(1, 44, 'HOME TOGO GUEST', size=13, color='k')\n    score = format(home_score, '02') + '    ' + format(distance, '02') + '    ' + format(visitor_score, '02')\n    ax.text(1, 42, score, size=18, color='orange')\n    ax.text(1, 38, str(down) + ' down', size=18, color='k')\n    ax.text(1, 35, str(quarter) + ' quarter', size=18, color='k')\n\n    #Start line\n    own = (field_position == possession_team)\n    if (own and play_dir == 'left') or (own == False and play_dir == 'right'):\n        start_line = 110 - yard_line\n    elif (own and play_dir == 'right') or (own == False and play_dir == 'left'):\n        start_line = 10 + yard_line\n    #Gain line\n    #10 yard line\n    if play_dir == 'right':\n        gain_line = start_line + yards\n        ten_yard_line = start_line + distance\n    elif play_dir == 'left':\n        gain_line = start_line - yards\n        ten_yard_line = start_line - distance\n    \n    plt.vlines([start_line], 0, 53, 'royalblue', label=\"YardLine\")\n    plt.vlines([gain_line], 0, 53, 'red', label=\"YardLine + Yards\")\n    plt.vlines([ten_yard_line], 0, 53, 'orange', label=\"First Down Line\")\n\n    plt.legend(loc=\"lower left\", fontsize=16)\n    plt.title(f\"frame: {i}, Season:{season}, Week:{week}, {home_team} vs {visitor_team}, GameId:{game_id}, PlayId:{play_id}\")","1636d81d":"def show_gameplay(game_id):\n    # Animation interval\n    anim_interval = 400\n    \n    df_game = df[df['GameId']==game_id]\n    play_list = df[df['GameId']==game_id]['PlayId'].unique()\n\n    anim = animation.FuncAnimation(\n          fig, update, \n          fargs = (df_game, play_list), \n          interval = anim_interval, \n          frames = play_list.size\n    )\n\n    return anim.to_jshtml()","1b970265":"# Chose GameId to plot\ngame_id = 2017091100\n\nfig, ax = plt.subplots(figsize=(20,8.9))\nHTML(show_gameplay(game_id))","eff563fa":"# Chose which game to plot(0 - 511)\ngame_index = 71\ngame_id = games[game_index]\n\nfig, ax = plt.subplots(figsize=(20,8.9))\nHTML(show_gameplay(game_id))","db442d48":"# Visualizing Play Information\n\nfork from [NFL Data: Visualizing Acceleration](https:\/\/www.kaggle.com\/iaarod\/nfl-data-visualizing-acceleration)"}}