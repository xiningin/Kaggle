{"cell_type":{"0868d31b":"code","02fca2fe":"code","8c8688f9":"code","1aefb7cc":"code","256c345d":"code","748b93fa":"code","d767bbf5":"code","0fa26af2":"code","0d596aa8":"code","fea52b37":"code","8734c96a":"code","2706a16a":"code","f9939eee":"code","9060dcda":"markdown"},"source":{"0868d31b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nfrom collections import Counter\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot # plotly offline mode\ninit_notebook_mode(connected=True) \nimport numpy as np\nimport pycountry\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","02fca2fe":"# read data and write first 5 component\ndataset = pd.read_csv(\"..\/input\/master.csv\")\ndataset.head()","8c8688f9":"#information about dataset\ndataset.info()","1aefb7cc":"# Number of suicide before and after 2000\nyears = [\"after2000\" if i >= 2000 else \"before2000\" for i in dataset.year]\nyearsd = pd.DataFrame({\"years\":years})\nx = plt.figure(figsize=(5,10))\nsns.countplot(yearsd.years)\nplt.show()","256c345d":"#Suicides rates by countries\ncountries = list(dataset.country.unique())\nnumbers = {}\nfor i in countries:\n    numbers[i] = 0\nfor i in dataset.country:\n    numbers[i] += 1\n\ndata_by_countries = pd.DataFrame({\"countrys\":list(numbers.keys()),\"valu\":list(numbers.values())})\ngec = (data_by_countries[\"valu\"].sort_values(ascending = True)).index.values\ndata_by_countries= data_by_countries.reindex(gec)\nplt.figure(figsize = (15,5))\nax = sns.barplot(x = data_by_countries.countrys,y = data_by_countries.valu)\nplt.xticks(rotation = 90)\nplt.show()","748b93fa":"#suicide rates by gender\nx1 = plt.figure(figsize =(7,9))\nsns.countplot(dataset.sex)\nplt.show()","d767bbf5":"#suicide rates by country with wordcloud\nplt.subplots(figsize = (20,20))\nwordcloud = WordCloud(\n        background_color= \"black\",\n        width=900,\n        height=922\n        ).generate(\" \".join(dataset.country))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","0fa26af2":"#3 stages to show suicide rates on the world map\n# first stage conver country names to country ids alpha3\nalphas = list()\nfor j in countries:\n    for i in pycountry.countries:\n        if j == i.name:\n            alphas.append(i.alpha_3)\n# some incorrect datas fixes\nalphas.insert(17,\"CPV\")\nalphas.insert(54,\"MAC\")\nalphas.insert(73,\"KOR\")\nalphas.insert(78,\"VCT\")\n# second stage data preparation for the world map\nframe = {\"alphas\":alphas,\"counts\":list(numbers.values())}\ndataWorldMap = pd.DataFrame(frame)\n#last stage plotting a world map\ndata = [ dict(\n        type='choropleth',\n        colorscale = \"Reds\",\n        autocolorscale = False,\n        locations = dataWorldMap.alphas,\n        z = dataWorldMap.counts,\n        text = countries,\n        marker = dict(\n            line = dict (\n                color = 'rgb(255,255,255)',\n                width = 2\n            ) ),\n        colorbar = dict(\n            title = \"Count\")\n        ) ]\n\nlayout = dict(\n        title = \"Suicides Counts with World Map\",\n        geo = dict(\n            showcountries = True,\n            countrycolor = \"rgb(10,10,10)\",\n            \n            scope='world',\n            projection=dict( type='mercator' ),\n            showlakes = True,\n            lakecolor = 'rgb(255, 255, 255)'),\n             )\n    \nfig = dict( data=data, layout=layout )\niplot( fig )\n","0d596aa8":"#National Gross Domestic Product for years with mapplot animations\n# first prepare the data according to the requirements\nyears1 = dataset.year.unique()\nyears1 = np.sort(years1)\ndataWorldMap[\"country\"] = dataset.country.unique()\ndata_for_gdp = dataset.loc[:,[\"country\",\"year\"]]\ngdp = list()\nfor i in range(len(dataset[\" gdp_for_year ($) \"])):\n    gdp.append(dataset[\" gdp_for_year ($) \"].iloc[i].replace(\",\",\"\"))\n    gdp[i] = gdp[i][:-6]\ndata_for_gdp[\" gdp_for_year ($) \"] = gdp\ndata_for_gdp[\" gdp_for_year ($) \"] = data_for_gdp[\" gdp_for_year ($) \"].astype(int)\ndata_for_gdp = data_for_gdp.drop_duplicates()\nalph = list()\nfor i in data_for_gdp.country:\n    alph.append(dataWorldMap.alphas[dataWorldMap.country == i].iloc[0])\ndata_for_gdp[\"alphas\"] = alph\n# and plotting worldmap animations\nyears = [str(each) for each in list(dataset.year.unique())]  \n\n\n# make figure\nfigure = {\n    'data': [],\n    'layout': {},\n    'frames': []\n}\n\nfigure['layout']['geo'] = dict(showframe=False, showland=True, showcoastlines=True, showcountries=True,\n               countrywidth=1, \n              landcolor = 'rgb(217, 217, 217)',\n              subunitwidth=1,\n              showlakes = True,\n              lakecolor = 'rgb(255, 255, 255)',\n              countrycolor=\"rgb(5, 5, 5)\")\nfigure['layout']['hovermode'] = 'closest'\nfigure['layout']['sliders'] = {\n    'args': [\n        'transition', {\n            'duration': 400,\n            'easing': 'cubic-in-out'\n        }\n    ],\n    'initialValue': '1965',\n    'plotlycommand': 'animate',\n    'values': years,\n    'visible': True\n}\nfigure['layout']['updatemenus'] = [\n    {\n        'buttons': [\n            {\n                'args': [None, {'frame': {'duration': 500, 'redraw': False},\n                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],\n                'label': 'Play',\n                'method': 'animate'\n            },\n            {\n                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',\n                'transition': {'duration': 0}}],\n                'label': 'Pause',\n                'method': 'animate'\n            }\n        ],\n        'direction': 'left',\n        'pad': {'r': 10, 't': 87},\n        'showactive': False,\n        'type': 'buttons',\n        'x': 0.1,\n        'xanchor': 'right',\n        'y': 0,\n        'yanchor': 'top'\n    }\n]\n\nsliders_dict = {\n    'active': 0,\n    'yanchor': 'top',\n    'xanchor': 'left',\n    'currentvalue': {\n        'font': {'size': 20},\n        'prefix': 'Year:',\n        'visible': True,\n        'xanchor': 'right'\n    },\n    'transition': {'duration': 300, 'easing': 'cubic-in-out'},\n    'pad': {'b': 10, 't': 50},\n    'len': 0.9,\n    'x': 0.1,\n    'y': 0,\n    'steps': []\n}\n\n# make data\nyear = 1695\n# make frames\n\ndata_dict = dict(\n         type='choropleth',\n         colorscale = \"Reds\",\n         autocolorscale = False,\n         locations = data_for_gdp.alphas,\n         z = data_for_gdp[\" gdp_for_year ($) \"],\n         text = data_for_gdp.country,\n         marker = dict(\n                 line = dict (\n                         color = 'rgb(255,255,255)',\n                         width = 2\n                      ) ),\n                 colorbar = dict(\n                      title = \"Count\")\n      ) \nfigure['data'].append(data_dict)\nfor year in years1:\n    frame = {'data': [], 'name': str(year)}\n    data_by_year = data_for_gdp[data_for_gdp['year'] == int(year)]\n    data_dict = dict(\n           type='choropleth',\n           colorscale = \"Reds\",\n           autocolorscale = False,\n           locations = data_by_year.alphas,\n           z = data_by_year[\" gdp_for_year ($) \"],\n           text = data_by_year.country,\n           marker = dict(\n                   line = dict (\n                           color = 'rgb(255,255,255)',\n                           width = 2\n                           ) ),\n                   colorbar = dict(\n                           title = \"Count\")\n        ) \n    frame['data'].append(data_dict)\n\n    figure['frames'].append(frame)\n    slider_step = {'args': [\n        [year],\n        {'frame': {'duration': 300, 'redraw': False},\n         'mode': 'immediate',\n       'transition': {'duration': 300}}\n     ],\n     'label': str(year),\n     'method': 'animate'}\n    sliders_dict['steps'].append(slider_step)\n\n\nfigure[\"layout\"][\"autosize\"]= True\nfigure[\"layout\"][\"title\"] = \"Gross Domestic Product for Year (M Dollar)\"       \n\nfigure['layout']['sliders'] = [sliders_dict]\n\niplot(figure)","fea52b37":"#Corralation between gdp per capita and suicide amounts with heatmap\ndata_corr = dataset.loc[:,[\"country\",\"gdp_per_capita ($)\"]]\ndata_corr = data_corr.groupby(\"country\").mean()\ndata_corr[\"suicides\"] = list(numbers.values())\n\nf,ax = plt.subplots(figsize=(5,5))\nsns.heatmap(data_corr.corr(),annot=True,linewidths=0.5,fmt=\".3f\",ax=ax)\nplt.show()","8734c96a":"#Gdp for year and gpd per capita ratios of countries in 2013 \ndata2013 = dataset[dataset.year == 2013]\ndata2013 = data2013.loc[:,[\"country\",\" gdp_for_year ($) \",\"gdp_per_capita ($)\"]]\ngdp = list()\nfor i in range(len(data2013[\" gdp_for_year ($) \"])):\n    gdp.append(data2013[\" gdp_for_year ($) \"].iloc[i].replace(\",\",\"\"))\n    gdp[i] = gdp[i][:-8]\ndata2013[\" gdp_for_year ($) \"] = gdp\ndata2013[\" gdp_for_year ($) \"] = data2013[\" gdp_for_year ($) \"].astype(int)\ndata2013 = data2013.groupby(\"country\").mean()\nnew_index = (data2013[\" gdp_for_year ($) \"].sort_values(ascending = False)).index.values\ndata2013 = data2013.reindex(new_index)\ntrace1 = go.Scatter(x = data2013.index,\n                    y = data2013[\" gdp_for_year ($) \"],\n                    mode = \"lines\",\n                    name = \" gdp for year 100M($) \",\n                    marker = dict(color =\"rgba(255,0,0,0.8)\"),\n                    text = data2013.index)\ntrace2 = go.Scatter(x = data2013.index,\n                    y = data2013[\"gdp_per_capita ($)\"],\n                    mode = \"lines\",\n                    name = \" gdp per capita ($) \",\n                    marker = dict(color =\"rgba(0,255,0,0.8)\"),\n                    text = data2013.index)\ndata = [trace1,trace2]\nlayout = dict(title = \"gdp per capita vs gdp for year in 2013\",\n              xaxis = dict(title = \"Countrys\",ticklen = 5,zeroline = True))\nfig = dict(data = data, layout = layout)\niplot(fig)","2706a16a":"#Gdp per capita rates of the first 8 countries in 2013 with piechard\nnew_index = (data2013[\"gdp_per_capita ($)\"].sort_values(ascending = False)).index.values\ndata_per_capita = data2013.reindex(new_index)\npiedata= data_per_capita.iloc[:8]\nfig = {\n       \"data\":[\n               {\n                 \"values\": piedata[\"gdp_per_capita ($)\"],\n                 \"labels\": piedata.index,\n                 \"domain\":{\"x\":[0,0.5]},\n                 \"name\":  \"gdp per capita\",\n                 \"hoverinfo\":\"label+percent+name\",\n                 \"type\":\"pie\"\n                       },],\n    \"layout\":{\n            \"title\":\"GDP per Capital\",\n            \"annotations\":[{\n                    \"font\":{\"size\":20},\n                    \"showarrow\": False,\n                    \"text\": \"Top 8 Country in 2013\",\n                    \"x\":0.20,\n                    \"y\": 1\n                    }]\n            }\n    }\n\niplot(fig)","f9939eee":"#The first 20 countries in 2013 gdp for year and gdp per capita comparison with bubblechar\n#suicide size entered in size\nbubbledata = data2013.iloc[:20]\nsuicides = [numbers[i]\/10 for i in bubbledata.index]\ncolors = [float(i) for i in suicides]\ndata = [\n    {\n        'y': bubbledata[\" gdp_for_year ($) \"],\n        'x': bubbledata[\"gdp_per_capita ($)\"],\n        'mode': 'markers',\n        'marker': {\n            'color': colors,\n            'size': suicides,\n            'showscale': True\n        },\n        \"text\" :  bubbledata.index    \n    }\n]\niplot(data)\n","9060dcda":"**Data Visualization Suicide Rates Overview**\nuseing WordCloud, mapplo, seaborn and plotly\n*my first work sorry for my mistakes \u263a\u263a\u2665\u2665*"}}