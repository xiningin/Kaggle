{"cell_type":{"fe83d0cf":"code","59562e69":"code","31a46910":"code","dc39410b":"code","61c4c52e":"code","6aecac6c":"code","3cb131cd":"code","7cd076b9":"code","abaf127d":"code","bfd383f2":"code","7419937f":"code","efb0f51b":"code","412065d1":"markdown","47a86e26":"markdown","c2163239":"markdown"},"source":{"fe83d0cf":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","59562e69":"!pip install xlrd","31a46910":"#Letting all names uniform so we can join all the informaiton later\ndf_patients = pd.read_excel('\/kaggle\/input\/lung-cancer-patients-mrna-microarray\/raw\/DCLungStudy_Clinical_Covariates_with_Hgrade.xls')\n\ndf_origins = df_patients[['BlindedIDs', 'MICROARRAY']].loc[\n    ~df_patients.BlindedIDs.isin(['None4TestSets'])].set_index('BlindedIDs').to_dict()[\n    'MICROARRAY']\n\n#Patients that are not in the study because of exam quality\npatients_to_drop = pd.read_excel('\/kaggle\/input\/lung-cancer-patients-mrna-microarray\/raw\/DCLungStudy_Not_In_Study_Reasons.xls')\n\nMicro_array_to_drop = patients_to_drop['Chip name']\nMicro_array_to_drop = Micro_array_to_drop.str.replace('MOFF_', 'Moff ')\nMicro_array_to_drop = Micro_array_to_drop.str.replace('NCI_LUNG', 'NCI_Lung')\nMicro_array_to_drop = Micro_array_to_drop.str.replace('NCI_lung', 'NCI_Lung')\ndf_patients.MICROARRAY = df_patients.MICROARRAY.str.replace('NCI_lung', 'NCI_Lung')\ndf_patients.MICROARRAY = df_patients.MICROARRAY.str.replace('NCI_Lung_', 'NCI_Lung')\ndf_patients.MICROARRAY = df_patients.MICROARRAY.str.replace('Control', 'control').str.replace(' ', '')\nMicro_array_to_drop = Micro_array_to_drop.str.replace('NCI_Lung_', 'NCI_Lung')\nMicro_array_to_drop = Micro_array_to_drop.str.replace('CONTROL', 'control').str.replace(' ', '')\n\ndf_patients = df_patients[(df_patients.MICROARRAY.isin(list(Micro_array_to_drop)) == False)]","dc39410b":"#Only patients with time of death or last contact!\ndf_patients = df_patients.replace('na', np.nan) #Another  for NaN\ndf_patients = df_patients[df_patients['MONTHS_TO_LAST_CONTACT_OR_DEATH'].notnull()]\ndf_patients['MONTHS_TO_LAST_CONTACT_OR_DEATH'] = df_patients['MONTHS_TO_LAST_CONTACT_OR_DEATH'].apply(\n    lambda x: int(x))","61c4c52e":"plt.style.use('ggplot')","6aecac6c":"plt.figure(figsize=(12, 8))\nplt.boxplot(df_patients['MONTHS_TO_LAST_CONTACT_OR_DEATH'])\nplt.show()","3cb131cd":"print('Life time mean: {} \\nStandard Deviation: {}'.format(df_patients['MONTHS_TO_LAST_CONTACT_OR_DEATH'].mean(), df_patients['MONTHS_TO_LAST_CONTACT_OR_DEATH'].std()))","7cd076b9":"mc_MSKCC = pd.read_excel('\/kaggle\/input\/lung-cancer-patients-mrna-microarray\/raw\/DCLungStudy_dChip-Processed_microarray_data.xls', sheet_name = 'MSKCC', index_col = 'PROBE').T\nmc_MSKCC","abaf127d":"mc_DFCI = pd.read_excel('\/kaggle\/input\/lung-cancer-patients-mrna-microarray\/raw\/DCLungStudy_dChip-Processed_microarray_data.xls', sheet_name = 'CanadaDFCI', index_col = 'PROBE').T\n\nmc_MICH = pd.read_excel('\/kaggle\/input\/lung-cancer-patients-mrna-microarray\/raw\/DCLungStudy_dChip-Processed_microarray_data.xls', header=1, sheet_name = 'MICH', index_col = 'RANDOM_NUMBER_IDENTIFIER').T\n\nmc_HLM = pd.read_excel('\/kaggle\/input\/lung-cancer-patients-mrna-microarray\/raw\/DCLungStudy_dChip-Processed_microarray_data.xls', header=1, sheet_name = 'HLM', index_col = 'RANDOM_NUMBER_IDENTIFIER').T","bfd383f2":"mc_MICH","7419937f":"#Producing our dataset with only microarray expression\nmicro_array = pd.concat([mc_MSKCC, mc_HLM, mc_MICH, mc_DFCI])\n\n#Renaming indexes\nmicro_array = micro_array.rename(df_origins)\n\n#Adjusting indexes\nmicro_array.index = micro_array.index.str.replace(\n    'NCI_LUNG', 'NCI_Lung').str.replace(\n    'MOFF_', 'Moff ').str.replace(\n    'NCI_lung', 'NCI_Lung').str.replace(\n    'NCI_Lung_', 'NCI_Lung').str.replace(\n    'Control', 'control').str.replace(\n    'CONTROL', 'control').str.replace(\n    'REP', 'Rep').str.replace(' ', '')\n\n#Now droping the guys we previously dropped\nmicro_array = micro_array.loc[micro_array.index.isin(list(df_patients.MICROARRAY))]\n\n#Creating targets\nmicro_array = micro_array.dropna(axis=1).dropna()\nmicro_array.shape","efb0f51b":"df = df_patients.set_index('MICROARRAY').join(micro_array)","412065d1":"#### By now we have imported patients data and replaced some annoying typos to turn this dataset more approachable. Now we we'll import gene data! ","47a86e26":"### This notebook I'll be showing how I got from raw data to the complete dataframe.\nThis does not replicate exactly into the dataframe showed in complete_dataframe.csv. In complete_dataframe I applied a technique to normalize the data,and created a target column which I called high_risk. So here you'll learn how to acess to transform the raw data into the dataset.\n\nIn case you missed it I strongly advise you to read the description and article of this database.","c2163239":"## It's Done!\nThis notebook does not have much data \"sciencing\" or data \"analysing\", since this is an annoying dataframe to deal with, I uploaded the steps I used to get to a \"raw\" dataframe. \n* Ps: The column MONTHS_TO_LAST_CONTACT_OR_DEATH was acquired after the mRNA exam, so its usefull to create a model to predict survivability. I defined less than 36 months initialy because it was the life expectancy of a lung cancer diagnosed patient, but feel free to manipulate this target and let me know what you can come up with :)"}}