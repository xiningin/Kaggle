{"cell_type":{"9f131ead":"code","38ff00b1":"code","58b62df6":"code","3b9761b1":"code","48e00817":"code","0ad38ba3":"code","51b5ccf4":"code","8d795e8e":"code","64b7f723":"code","c06a980b":"code","39d4616b":"code","6b53a977":"code","1cbf0b3a":"code","1c00daa9":"code","0658c252":"code","cd882282":"code","901d5d13":"code","d2e649c8":"code","afaf58f7":"code","2c88311f":"code","a32d194f":"code","9606892d":"code","26151dbf":"code","29715559":"code","d10d8f0e":"code","25d31b98":"code","ac7aa6d4":"code","aeaba73c":"markdown","93ff40f2":"markdown","e9d04a14":"markdown","1a63a8c3":"markdown","9e8db0d7":"markdown"},"source":{"9f131ead":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","38ff00b1":"data0 = pd.read_csv(\"..\/input\/company-bankruptcy-prediction\/data.csv\")\ndata0[0:2].T","58b62df6":"data0.columns","3b9761b1":"data0['Bankrupt?'].value_counts()","48e00817":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","0ad38ba3":"data1=df\ndata1[0:2].T","51b5ccf4":"data1.columns","8d795e8e":"target=['Bankrupt?']\ndatay=data1[target]\ndatax=data1.drop(target,axis=1)","64b7f723":"print(datay[0:2].T)\nprint(datax[0:2].T)","c06a980b":"train=np.array(datax)\ntrainy=np.array(datay)\nprint(train.shape)\nprint(trainy.shape)","39d4616b":"df_columns = list(datax.columns)\nprint(df_columns)","6b53a977":"train_df=pd.DataFrame(train)\n#test_df=pd.DataFrame(test)","1cbf0b3a":"train_df.columns=df_columns\n#test_df.columns=df_columns","1c00daa9":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","0658c252":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","cd882282":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","901d5d13":"train_feat_df = to_feature(train_df)\n#test_feat_df = to_feature(test_df)","d2e649c8":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","afaf58f7":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","2c88311f":"y = trainy\nprint(y.shape)","a32d194f":"ydf=pd.DataFrame(y)\nydf","9606892d":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('oof '+str(i),fontsize=12)\n    ax.set_ylabel('train_y '+str(i),fontsize=12)\n    ax.scatter(oof,y)\n","26151dbf":"print(target)","29715559":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n    \n    print()\n    print(order[0:3])\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","d10d8f0e":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","25d31b98":"data2=data1[['Bankrupt?',' Persistent EPS in the Last Four Seasons']]\ndata2","ac7aa6d4":"sns.relplot(x='Bankrupt?', y=' Persistent EPS in the Last Four Seasons', \n            data=data2, kind='scatter',hue=\"Bankrupt?\")\nplt.show()","aeaba73c":"# Model","93ff40f2":"# Target setting","e9d04a14":"# Visualize Importance","1a63a8c3":"# Data preparation","9e8db0d7":"### For 'Bankrupt?', 1:'Persistent EPS in the Last Four Seasons', 2:'Net Value Growth Rate' and 3:'Net Income to Stockholder's Equity' are the top 3 important factors. "}}