{"cell_type":{"77b2f04d":"code","f6b1ce94":"code","34ca9567":"code","cf3663d7":"code","3b645b1d":"code","ba835707":"code","1030fb86":"code","14905efc":"code","0cb46569":"code","984f7e49":"code","41ee6887":"code","90931ee1":"code","54b97bb9":"code","f789036e":"code","b992c869":"code","3e04978f":"code","0a488235":"code","658b0991":"code","0dfbea3e":"code","5854fd9a":"code","6f21b7f0":"code","28641dd0":"code","6691d33f":"code","e9280093":"code","476d5294":"code","294746a2":"code","206ebab2":"code","f8a612f2":"code","2487d1d4":"code","294ddd96":"code","8cac3f2b":"code","c2f2816c":"code","8ee08f64":"code","e3833650":"markdown"},"source":{"77b2f04d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f6b1ce94":"\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","34ca9567":"df = pd.read_csv(\"..\/input\/monthly-beer-production-in-austr.csv\")","cf3663d7":"df.head()","3b645b1d":"df[\"Month\"] = pd.to_datetime(df[\"Month\"],infer_datetime_format=True)\ndf = df.set_index([\"Month\"])","ba835707":"from datetime import datetime\ndf.head()","1030fb86":"plt.figure(figsize = (12,8))\nplt.xlabel(\"Date\")\nplt.ylabel(\"Amount of Beer Production\")\nplt.plot(df)\nplt.show()","14905efc":"#Perform Rolling Statistic\nrolmean = df.rolling(window=12).mean()\nrolstd = df.rolling(window=12).std()\nprint(rolmean,rolstd)","0cb46569":"orig = plt.plot(df,color = \"blue\",label = \"original\")\nmean = plt.plot(rolmean,color = \"red\",label = \"Rolling Mean\")\nstd = plt.plot(rolstd,color = \"gray\",label = \"Rolling STD\")\nplt.legend(loc=\"best\")\nplt.title(\"Rolling Mean & Standard Deviation\")\nplt.show(block=False)","984f7e49":"#Perform Dickey-Fuller Test\nfrom statsmodels.tsa.stattools import adfuller\n\nprint(\"Results of Dickey-Fuller Test\")\ndftest = adfuller(df[\"Monthly beer production\"],autolag = \"AIC\")\n\ndfoutput = pd.Series(dftest[0:4],index = [\"Test-Statistic\",\"p-value\",\"#Lags Used\",\"Number of Observations used\"])\nfor key,value in dftest[4].items():\n    dfoutput[\"Critical Value (%s)\"% key] = value\n    \nprint(dfoutput)","41ee6887":"plt.figure(figsize = (20,10))\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndecomposition = seasonal_decompose(df)\n\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\n\nplt.subplot(411)\nplt.plot(df,label = \"Original\")\nplt.legend(loc = \"best\")\nplt.subplot(412)\nplt.plot(trend,label = \"Trend\")\nplt.legend(loc = \"best\")\nplt.subplot(413)\nplt.plot(seasonal,label = \"seasonality\")\nplt.legend(loc = \"best\")\nplt.subplot(414)\nplt.plot(residual,label = \"Residuals\")\nplt.legend(loc=\"best\")\nplt.tight_layout()","90931ee1":"plt.figure(figsize = (20,10))\nfrom statsmodels.tsa.stattools import acf,pacf\n\nlag_acf = acf(df,nlags = 20)\nlag_pacf = pacf(df,nlags = 20,method = \"ols\")\n\n#Plot ACF\nplt.subplot(121)\nplt.plot(lag_acf)\nplt.axhline(y = 0,linestyle = \"--\",color = \"gray\")\nplt.axhline(y = 1.96\/np.sqrt(len(df)),linestyle = \"--\",color = \"gray\")\nplt.axhline(y = 1.96\/np.sqrt(len(df)),linestyle = \"--\",color = \"gray\")\nplt.title(\"Autocorrelation Function\")\n\n#Plot PACF\nplt.subplot(122)\nplt.plot(lag_pacf)\nplt.axhline(y = 0,linestyle = \"--\",color = \"gray\")\nplt.axhline(y = 1.96\/np.sqrt(len(df)),linestyle = \"--\",color = \"gray\")\nplt.axhline(y = 1.96\/np.sqrt(len(df)),linestyle = \"--\",color = \"gray\")\nplt.title(\"Partial Autocorrelation Function\")","54b97bb9":"from statsmodels.tsa.statespace.sarimax import SARIMAX","f789036e":"train_data = df[:len(df)-12]\ntest_data = df[len(df)-12:]","b992c869":"arima_model = SARIMAX(train_data[\"Monthly beer production\"],order = (2,1,1),seasonal_order = (4,0,3,12))\narima_result = arima_model.fit()\narima_result.summary()","3e04978f":"arima_pred = arima_result.predict(start = len(train_data),end = len(df)-1,typ = \"levels\").rename(\"ARIMA Predictions\")\narima_pred","0a488235":"test_data[\"Monthly beer production\"].plot(figsize = (16,5),legend = True)\narima_pred.plot(legend = True)","658b0991":"from statsmodels.tools.eval_measures import rmse","0dfbea3e":"arima_rmse_error = rmse(test_data[\"Monthly beer production\"],arima_pred)\narima_mse_error = arima_rmse_error**2\nmean_value = df[\"Monthly beer production\"].mean()\n\nprint(f\"MSE Error: {arima_mse_error}\\nRMSE Error: {arima_mse_error}\\nMean: {mean_value}\")","5854fd9a":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","6f21b7f0":"scaler.fit(train_data)\nscaled_train_data = scaler.transform(train_data)\nscaled_test_data = scaler.transform(test_data)","28641dd0":"from keras.preprocessing.sequence import TimeseriesGenerator\n\nn_input = 12\nn_features = 1\ngenerator = TimeseriesGenerator(scaled_train_data,scaled_train_data,length = n_input,batch_size = 1)","6691d33f":"from keras.models import Sequential\nfrom keras.layers import LSTM,Dense\n\nlstm_model = Sequential()\nlstm_model.add(LSTM(200,activation = \"relu\",input_shape = (n_input,n_features)))\nlstm_model.add(Dense(1))\nlstm_model.compile(optimizer = \"adam\",loss = \"mse\")\n\nlstm_model.summary()","e9280093":"lstm_model.fit_generator(generator,epochs = 20)","476d5294":"losses_lstm = lstm_model.history.history['loss']\nplt.figure(figsize=(12,4))\nplt.xticks(np.arange(0,21,1))\nplt.plot(range(len(losses_lstm)),losses_lstm);","294746a2":"lstm_predictions_scaled = list()\n\nbatch = scaled_train_data[-n_input:]\ncurrent_batch = batch.reshape(1,n_input,n_features)\n\nfor i in range(len(test_data)):\n    lstm_pred = lstm_model.predict(current_batch)[0]\n    lstm_predictions_scaled.append(lstm_pred)\n    current_batch = np.append(current_batch[:,1:,:],[[lstm_pred]],axis = 1)","206ebab2":"lstm_predictions_scaled","f8a612f2":"lstm_predictions = scaler.inverse_transform(lstm_predictions_scaled)","2487d1d4":"lstm_predictions","294ddd96":"test_data[\"LSTM_Predictions\"] = lstm_predictions","8cac3f2b":"test_data","c2f2816c":"test_data[\"Monthly beer production\"].plot(figsize = (16,5),legend = True)\ntest_data[\"LSTM_Predictions\"].plot(legend = True)","8ee08f64":"lstm_rmse_error = rmse(test_data[\"Monthly beer production\"],test_data[\"LSTM_Predictions\"])\nlstm_mse_error = lstm_rmse_error**2\nmean_value = df[\"Monthly beer production\"].mean()\n\nprint(f\"MSE Error: {lstm_mse_error}\\nRMSE Error: {lstm_rmse_error}\\nMean: {mean_value}\")","e3833650":"*LSTM*"}}