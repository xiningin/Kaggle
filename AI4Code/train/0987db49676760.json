{"cell_type":{"c78576c2":"code","a8ebef7b":"code","1dc7dd4c":"code","dd144ca3":"code","f758430b":"code","b70257c9":"code","dcadc4fc":"code","7e66eea1":"code","e932b2bd":"code","53dd75fc":"code","849b8bce":"code","7c4b0126":"code","f82fbabe":"code","ab1ffa0e":"code","6f92420c":"code","21be6376":"code","06cde1a3":"code","6d045848":"code","e8db9506":"code","99770ee5":"code","58e56154":"code","4830ea3d":"code","536b0713":"code","6ef0acbf":"code","264dafcb":"code","cecc601a":"code","c40ad918":"code","f202e2d5":"code","29cd6619":"code","e71d8d8a":"code","ae9f20be":"code","c24b153f":"code","093cddb6":"code","30c46642":"code","eb288a98":"code","f5c04adb":"code","38d76abe":"code","d1ab4d83":"code","ebb1f2dd":"code","a0f56e9f":"code","306a991f":"code","f59c930b":"code","4b27f901":"code","9bde0a3b":"code","1f26c90f":"code","d4cf4a27":"code","c5eef74c":"code","3c75c202":"code","48a7b6ae":"markdown","c74c0e80":"markdown","4eaddae9":"markdown","36e0f853":"markdown","6ee5c553":"markdown","5b89913c":"markdown","f5a9b170":"markdown","e86fa37b":"markdown","1a16269b":"markdown","47c1b25b":"markdown","5bfcf8ce":"markdown","086267c6":"markdown","2cecbbec":"markdown","bd5077cd":"markdown","ecc3c9e6":"markdown","94b7bb32":"markdown"},"source":{"c78576c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8ebef7b":"data = pd.read_csv('\/kaggle\/input\/melbourne-housing-market\/Melbourne_housing_FULL.csv')","1dc7dd4c":"data.head(10)","dd144ca3":"data.shape","f758430b":"data.describe()","b70257c9":"data.index","dcadc4fc":"data.info","7e66eea1":"data.dtypes","e932b2bd":"data.isnull().sum()","53dd75fc":"data.drop(columns=['SellerG', 'Date', 'Propertycount'], inplace=True)","849b8bce":"data.shape","7c4b0126":"data.isnull().sum()","f82fbabe":"data.isnull().sum()","ab1ffa0e":"data.dropna(subset=['CouncilArea','Lattitude', 'Longtitude', 'Regionname'], inplace=True)","6f92420c":"data.isnull().sum()","21be6376":"data['Price'].fillna((data['Price'].mean()), inplace=True)\ndata['Bedroom2'].fillna((data['Bedroom2'].value_counts().index[0]), inplace=True)\ndata['Bathroom'].fillna((data['Bathroom'].value_counts().index[0]), inplace=True)\ndata['Car'].fillna((data['Car'].value_counts().index[0]), inplace=True)\ndata['Landsize'].fillna((data['Landsize'].mean()), inplace=True)\ndata['BuildingArea'].fillna((data['BuildingArea'].mean()), inplace=True)","06cde1a3":"data.dropna(subset=['YearBuilt'], inplace=True)","6d045848":"data.isnull().sum()","e8db9506":"data.shape","99770ee5":"import matplotlib.pyplot as plt","58e56154":"plt.hist(data['Price'], color = 'gray')\nplt.title('Price Frequency')\nplt.xlabel('Price')\nplt.ylabel('Frequency')\nplt.show()","4830ea3d":"plt.hist(data['Price'],bins = 50, color = 'gray')","536b0713":"data.dtypes","6ef0acbf":"data['Suburb'].astype('category').describe()","264dafcb":"data['Suburb'] = data['Suburb'].astype('category')\ndata['Rooms'] = data['Rooms'].astype('category')\ndata['Type'] = data['Type'].astype('category')\ndata['Method'] = data['Method'].astype('category')\ndata['CouncilArea'] = data['CouncilArea'].astype('category')\ndata['Regionname'] = data['Regionname'].astype('category')\ndata['Postcode'] = data['Postcode'].astype(\"int64\")\ndata['Bedroom2'] = data['Bedroom2'].astype(\"int64\")\ndata['Bathroom'] = data['Bathroom'].astype(\"int64\")\ndata['Car'] = data['Car'].astype('int64')","cecc601a":"data.dtypes","c40ad918":"data.duplicated().sum()","f202e2d5":"data.drop_duplicates(keep = False, inplace = True) ","29cd6619":"data.duplicated().sum()","e71d8d8a":"import seaborn as sns","ae9f20be":"pearsoncorr = data.corr(method='pearson')\npearsoncorr","c24b153f":"sns.heatmap(pearsoncorr, \n            xticklabels=pearsoncorr.columns,\n            yticklabels=pearsoncorr.columns,\n            annot=True,\n            linewidth=0.5)","093cddb6":"kendallcorr = data.corr(method='kendall')\nkendallcorr","30c46642":"sns.heatmap(kendallcorr, \n            xticklabels=pearsoncorr.columns,\n            yticklabels=pearsoncorr.columns,\n            annot=True,\n            linewidth=0.5)","eb288a98":"spearmancorr = data.corr(method='spearman')\nspearmancorr","f5c04adb":"sns.heatmap(kendallcorr, \n            xticklabels=pearsoncorr.columns,\n            yticklabels=pearsoncorr.columns,\n            annot=True,\n            linewidth=0.5)","38d76abe":"data_normal = data.select_dtypes(exclude=['object', 'category'])\n\ndata_normal","d1ab4d83":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\ndata_minmax = pd.DataFrame(scaler.fit_transform(data_normal), columns=data_normal.columns)\n\ndata_minmax","ebb1f2dd":"plt.hist(data['Price'], color = 'gray')\nplt.title('Frequency of Price (Original)')\nplt.xlabel('Price')\nplt.ylabel('Frequency')\nplt.show()","a0f56e9f":"plt.hist(data_minmax['Price'], color = 'gray')\nplt.title('Frequency of Price (Min-Max)')\nplt.xlabel('Price')\nplt.ylabel('Frequency')\nplt.show()","306a991f":"from sklearn.preprocessing import StandardScaler\n\nstd_scaler = StandardScaler()\nstd_scaler\ndata_zscore = pd.DataFrame(std_scaler.fit_transform(data_normal), columns=data_normal.columns)\n\ndata_zscore","f59c930b":"plt.hist(data['Price'], color = 'gray')\nplt.title('Frequency of Price (Original)')\nplt.xlabel('Price')\nplt.ylabel('Frequency')\nplt.show()","4b27f901":"plt.hist(data_zscore['Price'], color = 'gray')\nplt.title('Frequency of Price (Z-Score)')\nplt.xlabel('Price')\nplt.ylabel('Frequency')\nplt.show()","9bde0a3b":"from sklearn.decomposition import PCA\npca = PCA(n_components=5)\nprincipalComponents = pca.fit_transform(data_minmax)\nprincipalDf = pd.DataFrame(data = principalComponents\n             , columns = ['principal component 1', 'principal component 2', 'principal component 3', 'principal component 4', 'principal component 5'])\nprincipalDf","1f26c90f":"finalDf = pd.concat([principalDf, data[['Method']]], axis = 1)\nfinalDf","d4cf4a27":"import random","c5eef74c":"data_sample_w = data\nsampled_list_w = data_sample_w.sample(n=3, replace=True, random_state=1)\nsampled_list_w","3c75c202":"data_sample_wo = data\nsampled_list_wo = data_sample_wo.sample(n=3, replace=False, random_state=1)\nsampled_list_wo","48a7b6ae":"Equal Width Binning (In-built feature in the matplotlib)\nThe first array represents the no. of elements in the particular,\nwhile the second array represents the boundaries of the bins","c74c0e80":"# **Correlations**","4eaddae9":"Kendall Correlation","36e0f853":"Sampling without replacement","6ee5c553":"Sampling with replacement","5b89913c":"**Binning**","f5a9b170":"# **Sampling**","e86fa37b":"# **Data Transformation**","1a16269b":"# **Data Reduction : PCA**","47c1b25b":"Min-max Normalization","5bfcf8ce":"# **Data Integration**","086267c6":"# **Importing Data and Analysing**","2cecbbec":"Spearman Correlation","bd5077cd":"Handling Missing Data","ecc3c9e6":"Z-score Normalization","94b7bb32":"**Pearson Correlation**"}}