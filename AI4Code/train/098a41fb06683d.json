{"cell_type":{"d5068ae6":"code","30256f05":"code","5803e098":"code","63621015":"code","c60a6db5":"code","d9d61ec8":"code","168b09ac":"code","f1863c22":"code","6b22ea0e":"code","7645a894":"code","8f519e1c":"code","f617d205":"code","4a4b7776":"markdown","e8371391":"markdown","16d7773b":"markdown","8ca4c3f5":"markdown","73798bfb":"markdown","75320d97":"markdown","abe9dc2c":"markdown","7aee5790":"markdown","17eadf45":"markdown"},"source":{"d5068ae6":"import pandas as pd\nimport numpy as np\nimport string\n\nnp.random.seed(23) #fixing random seed to get reproducible results\n","30256f05":"df = pd.read_csv(\"..\/input\/every-pub-in-england\/open_pubs.csv\")\ndf.head()","5803e098":"input_names = df['name']","63621015":"data = \"\\n\".join(input_names).lower()","c60a6db5":"chars = list(set(data))\ndata_size, vocab_size = len(data), len(chars)\n(data_size, vocab_size)","d9d61ec8":"outliers = set(chars) - set(string.ascii_lowercase + string.digits+ '\\n ') \noutliers","168b09ac":"for outlier in outliers:\n    for name in df['name']:\n        if outlier in set(name):\n            print(outlier, name)\n            break","f1863c22":"#the content of coursera's utils.py:\n\ndef softmax(x):\n    e_x = np.exp(x - np.max(x))\n    return e_x \/ e_x.sum(axis=0)\n\ndef smooth(loss, cur_loss):\n    return loss * 0.999 + cur_loss * 0.001\n\ndef print_sample(sample_ix, ix_to_char):\n    txt = ''.join(ix_to_char[ix] for ix in sample_ix)\n    txt = txt[0].upper() + txt[1:]  # capitalize first character \n    print ('%s' % (txt, ), end='')\n\ndef get_initial_loss(vocab_size, seq_length):\n    return -np.log(1.0\/vocab_size)*seq_length\n\ndef softmax(x):\n    e_x = np.exp(x - np.max(x))\n    return e_x \/ e_x.sum(axis=0)\n\ndef initialize_parameters(n_a, n_x, n_y):\n    \"\"\"\n    Initialize parameters with small random values\n    \n    Returns:\n    parameters -- python dictionary containing:\n                        Wax -- Weight matrix multiplying the input, numpy array of shape (n_a, n_x)\n                        Waa -- Weight matrix multiplying the hidden state, numpy array of shape (n_a, n_a)\n                        Wya -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a)\n                        b --  Bias, numpy array of shape (n_a, 1)\n                        by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1)\n    \"\"\"\n    np.random.seed(1)\n    Wax = np.random.randn(n_a, n_x)*0.01 # input to hidden\n    Waa = np.random.randn(n_a, n_a)*0.01 # hidden to hidden\n    Wya = np.random.randn(n_y, n_a)*0.01 # hidden to output\n    b = np.zeros((n_a, 1)) # hidden bias\n    by = np.zeros((n_y, 1)) # output bias\n    \n    parameters = {\"Wax\": Wax, \"Waa\": Waa, \"Wya\": Wya, \"b\": b,\"by\": by}\n    \n    return parameters\n\ndef rnn_step_forward(parameters, a_prev, x):\n    \n    Waa, Wax, Wya, by, b = parameters['Waa'], parameters['Wax'], parameters['Wya'], parameters['by'], parameters['b']\n    a_next = np.tanh(np.dot(Wax, x) + np.dot(Waa, a_prev) + b) # hidden state\n    p_t = softmax(np.dot(Wya, a_next) + by) # unnormalized log probabilities for next chars # probabilities for next chars \n    \n    return a_next, p_t\n\ndef rnn_step_backward(dy, gradients, parameters, x, a, a_prev):\n    \n    gradients['dWya'] += np.dot(dy, a.T)\n    gradients['dby'] += dy\n    da = np.dot(parameters['Wya'].T, dy) + gradients['da_next'] # backprop into h\n    daraw = (1 - a * a) * da # backprop through tanh nonlinearity\n    gradients['db'] += daraw\n    gradients['dWax'] += np.dot(daraw, x.T)\n    gradients['dWaa'] += np.dot(daraw, a_prev.T)\n    gradients['da_next'] = np.dot(parameters['Waa'].T, daraw)\n    return gradients\n\ndef update_parameters(parameters, gradients, lr):\n\n    parameters['Wax'] += -lr * gradients['dWax']\n    parameters['Waa'] += -lr * gradients['dWaa']\n    parameters['Wya'] += -lr * gradients['dWya']\n    parameters['b']  += -lr * gradients['db']\n    parameters['by']  += -lr * gradients['dby']\n    return parameters\n\ndef rnn_forward(X, Y, a0, parameters, vocab_size):\n    \n    # Initialize x, a and y_hat as empty dictionaries\n    x, a, y_hat = {}, {}, {}\n    \n    a[-1] = np.copy(a0)\n    \n    # initialize your loss to 0\n    loss = 0\n    \n    for t in range(len(X)):\n        \n        # Set x[t] to be the one-hot vector representation of the t'th character in X.\n        # if X[t] == None, we just have x[t]=0. This is used to set the input for the first timestep to the zero vector. \n        x[t] = np.zeros((vocab_size,1)) \n        if (X[t] != None):\n            x[t][X[t]] = 1\n        \n        # Run one step forward of the RNN\n        a[t], y_hat[t] = rnn_step_forward(parameters, a[t-1], x[t])\n        \n        # Update the loss by substracting the cross-entropy term of this time-step from it.\n        loss -= np.log(y_hat[t][Y[t],0])\n        \n    cache = (y_hat, a, x)\n        \n    return loss, cache\n\ndef rnn_backward(X, Y, parameters, cache):\n    # Initialize gradients as an empty dictionary\n    gradients = {}\n    \n    # Retrieve from cache and parameters\n    (y_hat, a, x) = cache\n    Waa, Wax, Wya, by, b = parameters['Waa'], parameters['Wax'], parameters['Wya'], parameters['by'], parameters['b']\n    \n    # each one should be initialized to zeros of the same dimension as its corresponding parameter\n    gradients['dWax'], gradients['dWaa'], gradients['dWya'] = np.zeros_like(Wax), np.zeros_like(Waa), np.zeros_like(Wya)\n    gradients['db'], gradients['dby'] = np.zeros_like(b), np.zeros_like(by)\n    gradients['da_next'] = np.zeros_like(a[0])\n    \n    # Backpropagate through time\n    for t in reversed(range(len(X))):\n        dy = np.copy(y_hat[t])\n        dy[Y[t]] -= 1\n        gradients = rnn_step_backward(dy, gradients, parameters, x[t], a[t], a[t-1])\n\n    return gradients, a","6b22ea0e":"def clip(gradients, maxValue):    \n    '''\n    Clips the gradients' values between minimum and maximum.\n    \n    Arguments:\n    gradients -- a dictionary containing the gradients \"dWaa\", \"dWax\", \"dWya\", \"db\", \"dby\"\n    maxValue -- everything above this number is set to this number, and everything less than -maxValue is set to -maxValue\n    \n    Returns: \n    gradients -- a dictionary with the clipped gradients.\n    '''\n    dWaa, dWax, dWya, db, dby = gradients['dWaa'], gradients['dWax'], gradients['dWya'], gradients['db'], gradients['dby']\n    for gradient in [dWax, dWaa, dWya, db, dby]:\n        np.clip(gradient, -maxValue, maxValue, out=gradient)\n    gradients = {\"dWaa\": dWaa, \"dWax\": dWax, \"dWya\": dWya, \"db\": db, \"dby\": dby} \n    return gradients\n\ndef sample(parameters, char_to_ix, seed):\n    \"\"\"\n    Sample a sequence of characters according to a sequence of probability distributions output of the RNN\n\n    Arguments:\n    parameters -- python dictionary containing the parameters Waa, Wax, Wya, by, and b. \n    char_to_ix -- python dictionary mapping each character to an index.\n    seed -- used for grading purposes. Do not worry about it.\n\n    Returns:\n    indices -- a list of length n containing the indices of the sampled characters.\n    \"\"\"\n    \n    # Retrieve parameters and relevant shapes from \"parameters\" dictionary\n    Waa, Wax, Wya, by, b = parameters['Waa'], parameters['Wax'], parameters['Wya'], parameters['by'], parameters['b']\n    vocab_size = by.shape[0]\n    n_a = Waa.shape[1]\n    \n    # Step 1: Create the one-hot vector x for the first character (initializing the sequence generation). (\u22481 line)\n    x = np.zeros((vocab_size, 1))\n    # Step 1': Initialize a_prev as zeros (\u22481 line)\n    a_prev = np.zeros((n_a, 1))\n    \n    # Create an empty list of indices, this is the list which will contain the list of indices of the characters to generate (\u22481 line)\n    indices = []\n    \n    # Idx is a flag to detect a newline character, we initialize it to -1\n    idx = -1 \n    \n    # Loop over time-steps t. At each time-step, sample a character from a probability distribution and append \n    # its index to \"indices\". We'll stop if we reach 50 characters (which should be very unlikely with a well \n    # trained model), which helps debugging and prevents entering an infinite loop. \n    counter = 0\n    newline_character = char_to_ix['\\n']\n    \n    while (idx != newline_character and counter != 50):\n        \n        # Step 2: Forward propagate x using the equations (1), (2) and (3)\n        a = np.tanh(np.dot(Wax, x) + np.dot(Waa, a_prev) + b)\n        z = np.dot(Wya, a) + by\n        y = softmax(z)\n        \n        np.random.seed(counter + seed) \n        \n        # Step 3: Sample the index of a character within the vocabulary from the probability distribution y\n        idx = np.random.choice(list(range(vocab_size)), p=y.ravel())\n\n        # Append the index to \"indices\"\n        indices.append(idx)\n        \n        # Step 4: Overwrite the input character as the one corresponding to the sampled index.\n        x = np.zeros((vocab_size, 1))\n        x[idx] = 1\n        \n        a_prev = a\n        \n        seed += 1\n        counter +=1\n        \n    if (counter == 50):\n        indices.append(char_to_ix['\\n'])\n    \n    return indices\n\ndef optimize(X, Y, a_prev, parameters, vocab_size, learning_rate = 0.01):\n    \"\"\"\n    Execute one step of the optimization to train the model.\n    \n    Arguments:\n    X -- list of integers, where each integer is a number that maps to a character in the vocabulary.\n    Y -- list of integers, exactly the same as X but shifted one index to the left.\n    a_prev -- previous hidden state.\n    parameters -- python dictionary containing:\n                        Wax -- Weight matrix multiplying the input, numpy array of shape (n_a, n_x)\n                        Waa -- Weight matrix multiplying the hidden state, numpy array of shape (n_a, n_a)\n                        Wya -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a)\n                        b --  Bias, numpy array of shape (n_a, 1)\n                        by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1)\n    learning_rate -- learning rate for the model.\n    \n    Returns:\n    loss -- value of the loss function (cross-entropy)\n    gradients -- python dictionary containing:\n                        dWax -- Gradients of input-to-hidden weights, of shape (n_a, n_x)\n                        dWaa -- Gradients of hidden-to-hidden weights, of shape (n_a, n_a)\n                        dWya -- Gradients of hidden-to-output weights, of shape (n_y, n_a)\n                        db -- Gradients of bias vector, of shape (n_a, 1)\n                        dby -- Gradients of output bias vector, of shape (n_y, 1)\n    a[len(X)-1] -- the last hidden state, of shape (n_a, 1)\n    \"\"\"\n    \n    # Forward propagate through time (\u22481 line)\n    loss, cache = rnn_forward(X, Y, a_prev, parameters, vocab_size)\n    # Backpropagate through time (\u22481 line)\n    gradients, a = rnn_backward(X, Y, parameters, cache)    \n    # Clip your gradients between -5 (min) and 5 (max) (\u22481 line)\n    gradients = clip(gradients, 5)\n    # Update parameters (\u22481 line)\n    parameters = update_parameters(parameters, gradients, learning_rate)\n    return loss, gradients, a[len(X)-1]","7645a894":"def model(input_names, num_iterations = 35000, n_a = 50, names = 7):\n    \"\"\"\n    Trains the model and generates names. \n    \n    Arguments:\n    input_names -- iteratable object with names (panda series \/ just list)\n    ix_to_char -- dictionary that maps the index to a character\n    char_to_ix -- dictionary that maps a character to an index\n    num_iterations -- number of iterations to train the model for\n    n_a -- number of units of the RNN cell\n    names -- number of names you want to sample at each iteration. \n    vocab_size -- number of unique characters found in the text, size of the vocabulary\n    \n    Returns:\n    parameters -- learned parameters\n    \"\"\"\n    \n    data = \"\\n\".join(input_names).lower()\n    chars = list(set(data))\n    data_size, vocab_size = len(data), len(chars)\n    print('There are %d total characters and %d unique characters in your data.' % (data_size, vocab_size))\n\n    char_to_ix = { ch:i for i,ch in enumerate(sorted(chars)) }\n    ix_to_char = { i:ch for i,ch in enumerate(sorted(chars)) }\n    print(ix_to_char)\n    \n    # Retrieve n_x and n_y from vocab_size\n    n_x, n_y = vocab_size, vocab_size\n    \n    # Initialize parameters\n    parameters = initialize_parameters(n_a, n_x, n_y)\n    \n    # Initialize loss (this is required because we want to smooth our loss, don't worry about it)\n    loss = get_initial_loss(vocab_size, names)\n    \n    # Build list of all dinosaur names (training examples).\n    examples = [x.lower().strip() for x in input_names]\n    \n    # Shuffle list of all dinosaur names\n    np.random.seed(0)\n    np.random.shuffle(examples)\n    \n    # Initialize the hidden state of your LSTM\n    a_prev = np.zeros((n_a, 1))\n    \n    # Optimization loop\n    for j in range(num_iterations):\n        # Use the hint above to define one training example (X,Y) (\u2248 2 lines)\n        index = j % len(examples)\n        X = [None] + [char_to_ix[ch] for ch in examples[index]] \n        Y = X[1:] + [char_to_ix[\"\\n\"]]\n        \n        # Perform one optimization step: Forward-prop -> Backward-prop -> Clip -> Update parameters\n        # Choose a learning rate of 0.01\n        curr_loss, gradients, a_prev = optimize(X, Y, a_prev, parameters, vocab_size)\n        \n        # Use a latency trick to keep the loss smooth. It happens here to accelerate the training.\n        loss = smooth(loss, curr_loss)\n\n        # Every 2000 Iteration, generate \"n\" characters thanks to sample() to check if the model is learning properly\n        if j % 2000 == 0:\n            \n            print('Iteration: %d, Loss: %f' % (j, loss) + '\\n')\n            \n            # The number of dinosaur names to print\n            seed = 0\n            for name in range(names):\n                \n                # Sample indices and print them\n                sampled_indices = sample(parameters, char_to_ix, seed)\n                print_sample(sampled_indices, ix_to_char)\n                \n                seed += 1  # To get the same result for grading purposed, increment the seed by one. \n      \n            print('\\n')\n        \n    return parameters","8f519e1c":"parameters = model(input_names)","f617d205":"input_names = df['address']\nparameters = model(input_names)","4a4b7776":"# Possible further improvements\n\n* rewrite to one of the frameworks (Keras\/Tensorflow) - so low level functions won't be needed\n* make it work based not on characters, but on words - to get more realistic names\n* make, make it generate address\/postcode and build a UK map with \"Alternative Reality Pubs\"? ","e8371391":"# Summary \n\n* First iterations provide pretty much rubbish, but towards the end it shows significant improvement (meaning: you can read them :D)\n* Although it clearly produces a lot of rubbish, some names are actually very pub-like!\n* The code we have is quite generic - you can easily use it with any iteratable dataset (try city's names as input, or  address - it can be fun!)\n* Some of the names looks quite real:\n    * The Bill at New\n    * The Larhaulhor Header\n    * The Alms\n    * The Cotch\n    * The Told Locthels (I would like to hear those Locthels!)\n    * The 5ivon arms (Very hipsterish)\n    * Sea Arms\n    * The Club\n    * The Tolingsexerst Club\n\n","16d7773b":"# Building a model\n\nthis functions are taken from coursera's assignment:","8ca4c3f5":"# Trying with Address","73798bfb":"# Let's run it!","75320d97":"Now that make more sense! Apparently, there is some data to cleanup (like `#NAME?`) but let's have fun first!","abe9dc2c":"# Pub Name Generator\n\nHello everyone!\n\nI always liked the idea of computer generating something by itself, and when I saw \"every pub in England\" dataset, I've got an idea to create such pub name generator for Pubs!\n\nAs a continuation, it would be possible to generate an some new island for fantasy book, which almost-like-England-pub names :)\n\nFor first version, I want to base my generator on [\"Dinosaur Island\"](https:\/\/www.coursera.org\/learn\/nlp-sequence-models\/notebook\/MLhxP\/dinosaur-island-character-level-language-modeling) assignment from [\"Deep Learning - Sequence Models\"](https:\/\/www.coursera.org\/learn\/nlp-sequence-models\/home\/welcome) course on Coursera.\n\nThere are also finished assignments on github - [this one for instance](https:\/\/github.com\/Kulbear\/deep-learning-coursera\/blob\/master\/Sequence%20Models\/Dinosaurus%20Island%20--%20Character%20level%20language%20model%20final%20-%20v3.ipynb) - it's useful to see some pictures explaining concept of gradient etc. \n\n**Sooo, let's get our hands dirty with that sticky pubs tables and the taste of refreshing ales!!!**\n\n","7aee5790":"Some intersting highlights of addresses:\n\n* Evoor, coshs road, lond roaf, 42 duber\n* Ussex\n* Baberte clubre, the w club, poll forth, london, lo\n* Babeatc ann, earth, walms axmkan, kithenote street\n* Ewston pincterry sorouh roar, 22 dolkead, brdon\n\nSo what's really cool, even when generator works on characters, some of results are quite real & readable","17eadf45":"## Stop, what?\n\nIt's very strange that we have 61 chars here, I would expect something like ~26 - the size of Latin alphabet. Let's see what's inside!"}}