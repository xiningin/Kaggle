{"cell_type":{"9adc6035":"code","f2a60c9f":"code","72ebef4c":"code","ac4a6440":"code","7e890caa":"code","bc7cc841":"code","aed44a5f":"code","17a22776":"code","7b8703bc":"code","5b1aa091":"code","ea1d4380":"code","d150c632":"code","9f21ac92":"code","a70f93b4":"code","35dab347":"code","9b1bd23a":"markdown"},"source":{"9adc6035":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f2a60c9f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly as ply\nimport plotly.express as px","72ebef4c":"import pandas as pd\ncalendar = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/calendar.csv\")\ntrain = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv\")\nsample_submission = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sample_submission.csv\")\nsell_prices = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sell_prices.csv\")","ac4a6440":"train.head(10)","7e890caa":"#selecting just the numerical features to do basic calculation\nnum_feats =  train.select_dtypes(exclude = [\"object\"]).columns\nnum_feats","bc7cc841":"train['item_sum']= train[num_feats].sum(axis=1) # calculating the total sales in each of the month against each item_id\ntrain.head(15)","aed44a5f":"# combine validation data set and calendar data set\ntrain_cal = pd.concat([train,calendar], axis =1)\ntrain_cal.head(10)","17a22776":"fig1 = sns.boxplot(x=train_cal['store_id'], y = train_cal['item_sum'], showfliers = False)\n","7b8703bc":"#average sales across items and stores by category. Again data is noisy. \ntrain['mean_sales']=train[num_feats].mean(axis=1)\ntrain_cal['mean_sales']=train['mean_sales']\nplt.ylim(0, 40)\nplt.figure(figsize=(15,8))\nfig6 = sns.boxplot(x = train_cal['cat_id'], y = train_cal['mean_sales'], hue = train_cal['state_id'], showfliers = False)","5b1aa091":"#df = px.data.train_cal()\nfig = px.scatter_matrix(train_cal,\n    dimensions=['mean_sales','event_name_1','event_name_2','state_id'],\n    color=\"cat_id\")\nfig.show()","ea1d4380":"plt.figure(figsize=(15,8))\nfig6 = sns.boxplot(x = train_cal['year'], y = train_cal['mean_sales'], hue = train_cal['state_id'], showfliers = False)","d150c632":"fig5 = px.pie(train_cal, values='mean_sales', names='state_id') #average sales by state\nfig5.show()","9f21ac92":"fig6 = px.pie(train_cal, values='mean_sales', names='cat_id') # Average Sales per category\nfig6.show()","a70f93b4":"fig6 = px.pie(train_cal, values='mean_sales', names='store_id')\nfig6.show()","35dab347":"naive_avg = train.set_index('id')[num_feats[-30:]].mean(axis=1).to_dict()\nfcols = [f for f in sample.columns if 'F' in f]\n#fcols = train.columns\nfor f in fcols:\n#count = len(train.columns)\n#count\n#for i in train.columns:\n    sample[i] = sample['id'].map(naive_avg).fillna(0)\n    \nsample.to_csv('M5_submission.csv', index=False)\nprint(\"Your submission is saved\")","9b1bd23a":"**Naive Model**"}}