{"cell_type":{"13b281f2":"code","4d9beabb":"code","30663da0":"code","0e37d960":"code","4b0c2881":"code","fb7a21cb":"code","0acb15f9":"code","8df275a2":"code","6881bf08":"code","41405255":"code","9a3eec62":"code","cc6bdb2c":"code","9ac22a7f":"code","5dd7ba7c":"code","8fd9f7a2":"code","e612f04f":"code","f1eca9c2":"code","362f8f82":"code","8560d6ec":"code","f160f120":"code","b63fb2ab":"code","bb7dbdf7":"code","3e88bfaf":"code","4dc16ef1":"code","31ed7670":"code","69e164dc":"code","c46e375c":"code","5aab0e80":"code","20492264":"code","6789c70f":"code","7204aa6c":"markdown","ddaa1023":"markdown","1a1a40e4":"markdown"},"source":{"13b281f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d9beabb":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","30663da0":"train_data.head()","0e37d960":"train_data.isnull().sum()","4b0c2881":"#CHANGE NULL VALUE OF AGE COLUMN BY MEAN VALUE\nage_mean=train_data[\"Age\"].mean()\ntrain_data['Age'] = train_data['Age'].fillna(age_mean)\n#CHANGE VALUE OF AGE COLUMN BY 0 AND 1 RESPECT TO MEAN VALUE IF MEAN VALUE>ACTUAL VALUE THEN 1 ELSE 0\ntrain_data[\"Age\"] = np.where( ( train_data[\"Age\"] > age_mean), 1, 0)","fb7a21cb":"train_data=pd.get_dummies(train_data,columns=[\"Pclass\",\"Sex\",\"Embarked\"],drop_first=True)","0acb15f9":"#CHANGE VALUE OF FARE COLUMN BY 0 AND 1 REPECT TO MEAN VALUE IF MEAN VALUE>ACTUAL VALUE THEN 1 ELSE 0\nfare_mean=train_data[\"Fare\"].mean()\ntrain_data[\"Fare\"] = np.where( ( train_data[\"Fare\"] > fare_mean), 1, 0)","8df275a2":"train_data.head()","6881bf08":"train_data['SibSp'].value_counts()","41405255":"import matplotlib.pyplot as plt\nimport seaborn as sns","9a3eec62":"sns.countplot(x=\"Survived\",hue=\"SibSp\", data=train_data)","cc6bdb2c":"#CHANGE VALUE OF SIBSP COLUMN BY 0 AND 1 REPECT TO MEAN VALUE IF MEAN VALUE>ACTUAL VALUE THEN 1 ELSE 0\nsibsp_mean=train_data[\"SibSp\"].mean()\ntrain_data[\"SibSp\"] = np.where( ( train_data[\"SibSp\"] > sibsp_mean), 1, 0)","9ac22a7f":"train_data['Parch'].value_counts()","5dd7ba7c":"sns.countplot(x=\"Survived\",hue=\"Parch\", data=train_data)","8fd9f7a2":"#CHANGE VALUE OF PARCH COLUMN BY 0 AND 1 REPECT TO MEAN VALUE IF MEAN VALUE>ACTUAL VALUE THEN 1 ELSE 0\nparch_mean=train_data[\"Parch\"].mean()\ntrain_data[\"Parch\"] = np.where( ( train_data[\"Parch\"] > parch_mean), 1, 0)","e612f04f":"train_data['Cabin'].value_counts()","f1eca9c2":"train_data.drop([\"PassengerId\",\"Name\",\"Cabin\",\"Ticket\"],axis=1,inplace=True)","362f8f82":"train_data.head()","8560d6ec":"sns.countplot(x=\"Survived\",hue=\"Survived\", data=train_data)","f160f120":"train_x=train_data.drop(\"Survived\",axis=1)\ntrain_y=train_data[\"Survived\"]","b63fb2ab":"train_y.head()","bb7dbdf7":"train_x.head()","3e88bfaf":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.head()","4dc16ef1":"#CHANGE NULL VALUE OF AGE COLUMN BY MEAN VALUE\nage_mean=train_data[\"Age\"].mean()\ntest_data['Age'] = test_data['Age'].fillna(age_mean)\n#CHANGE VALUE OF AGE COLUMN BY 0 AND 1 RESPECT TO MEAN VALUE IF MEAN VALUE>ACTUAL VALUE THEN 1 ELSE 0\ntest_data[\"Age\"] = np.where( ( test_data[\"Age\"] > age_mean), 1, 0)\n\ntest_data=pd.get_dummies(test_data,columns=[\"Pclass\",\"Sex\",\"Embarked\"],drop_first=True)\n\n#CHANGE VALUE OF FARE COLUMN BY 0 AND 1 REPECT TO MEAN VALUE IF MEAN VALUE>ACTUAL VALUE THEN 1 ELSE 0\nfare_mean=train_data[\"Fare\"].mean()\ntest_data[\"Fare\"] = np.where( ( test_data[\"Fare\"] > fare_mean), 1, 0)\n\n#CHANGE VALUE OF SIBSP COLUMN BY 0 AND 1 REPECT TO MEAN VALUE IF MEAN VALUE>ACTUAL VALUE THEN 1 ELSE 0\nsibsp_mean=train_data[\"SibSp\"].mean()\ntest_data[\"SibSp\"] = np.where( ( test_data[\"SibSp\"] > sibsp_mean), 1, 0)\n\n#CHANGE VALUE OF PARCH COLUMN BY 0 AND 1 REPECT TO MEAN VALUE IF MEAN VALUE>ACTUAL VALUE THEN 1 ELSE 0\nparch_mean=train_data[\"Parch\"].mean()\ntest_data[\"Parch\"] = np.where( ( test_data[\"Parch\"] > parch_mean), 1, 0)\npid=test_data['PassengerId']\ntest_data.drop([\"PassengerId\",\"Name\",\"Cabin\",\"Ticket\"],axis=1,inplace=True)","31ed7670":"test_data.head()","69e164dc":"#TRAINING\nfrom sklearn import svm\ntraining=svm.SVC(kernel='linear').fit(train_x,train_y)","c46e375c":"predicted=training.predict(test_data)\nsubmission=pd.DataFrame({\"PassengerId\":pid, \"Survived\":predicted})","5aab0e80":"submission.to_csv(path_or_buf='\/kaggle\/working\/submission.csv',index=False)","20492264":"sub = pd.read_csv('\/kaggle\/working\/submission.csv')\nsub.head()","6789c70f":"submission['Survived'].value_counts()","7204aa6c":"***TRAINING***","ddaa1023":"***TEST DATA***","1a1a40e4":"**data preprocessing and visualyzation on train data**"}}