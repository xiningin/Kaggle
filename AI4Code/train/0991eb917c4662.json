{"cell_type":{"77fb15e3":"code","e90393da":"code","8e973174":"code","a5b1bf7d":"code","774bfd3a":"code","4ab38ed3":"code","2b76da68":"code","d6ae8ad1":"code","aaf6597d":"code","7472a6a2":"code","9cf89edc":"code","ff30cc33":"code","f695756a":"code","730d92e0":"code","d1123072":"code","04bcf359":"code","12815348":"code","a55a0c1b":"code","c42867f0":"code","a80dda18":"code","8b72ae84":"code","4c940d90":"code","eabf6b73":"code","80db8129":"code","8f2e702c":"code","93b19cbd":"code","58624ad0":"code","ff2c9ac3":"code","61b53077":"code","3cbfc64b":"code","bb74e4b4":"code","1f170cb3":"code","04f744e2":"code","bfb34605":"code","27887f35":"code","dd932ad7":"code","6ed434ef":"code","17299165":"code","244cd8f8":"code","3168ea67":"code","cc13eee7":"code","1c6617ac":"code","f9e269b5":"code","5421e470":"code","c402e5ce":"code","f4e62101":"code","d80a1b06":"code","f946fc78":"code","56a2dbe7":"code","db34141b":"code","a5ed34b6":"markdown","c61f74bd":"markdown","0cc8b0d7":"markdown","3e4ee9b2":"markdown","52cfd6d7":"markdown"},"source":{"77fb15e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e90393da":"df_2010_2011 = pd.read_excel(\"..\/input\/uci-online-retail-ii-data-set\/online_retail_II.xlsx\", sheet_name = \"Year 2010-2011\")\n","8e973174":"df = df_2010_2011.copy() # df ad\u0131nda de\u011fi\u015fkene kopya olu\u015fturdum.\ndf.head() # df'in ilk 5 row'una bakal\u0131m.","a5b1bf7d":"df.tail() # df'in son 5 row'una da g\u00f6z gezdirelim","774bfd3a":"# e\u015fsiz \u00fcr\u00fcn say\u0131s\u0131 \ndf['Description'].nunique()","4ab38ed3":"# Hangi \u00fcr\u00fcnden ka\u00e7ar tane var?\ndf['Description'].value_counts().head()","2b76da68":"# Fatura ba\u015f\u0131na ortalama ne kadar kazan\u0131lm\u0131\u015ft\u0131r? \ndf['Total'] = df[\"Quantity\"] * df['Price']","d6ae8ad1":"df.head()","aaf6597d":"# Fatura ba\u015f\u0131 ne kadar kazan\u0131ld\u0131? (Yani her al\u0131\u015fveri\u015fte ne kadar kazan\u0131ld\u0131?)\ndf.groupby(\"Invoice\").agg({'Total':\"sum\"})","7472a6a2":"# iadeleri sildik\niadeler = []\nfor i,j in enumerate(df[\"Invoice\"].values):\n    if str(j).startswith(\"C\"):\n        iadeler.append(i)\n    \n\ndf.drop(iadeler, inplace=True) ","9cf89edc":"df.isnull().sum()","ff30cc33":"df.dropna(inplace = True)","f695756a":"df.shape","730d92e0":"for feature in [\"Quantity\",\"Price\",\"Total\"]:\n\n    Q1 = df[feature].quantile(0.01)\n    Q3 = df[feature].quantile(0.99)\n    IQR = Q3-Q1\n    upper = Q3 + 1.5*IQR\n    lower = Q1 - 1.5*IQR\n\n    if df[(df[feature] > upper) | (df[feature] < lower)].any(axis=None):\n        print(feature,\"yes\")\n        print(df[(df[feature] > upper) | (df[feature] < lower)].shape[0])\n    else:\n        print(feature, \"no\")","d1123072":"df.head()","04bcf359":"df.info()","12815348":"df['InvoiceDate'].min() # ilk tarih","a55a0c1b":"df['InvoiceDate'].max() # Son tarih","c42867f0":"import datetime as dt\ntoday_date = dt.datetime(2011,12,9)","a80dda18":"today_date","8b72ae84":"df.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}).head()","4c940d90":"df[\"Customer ID\"] = df[\"Customer ID\"].astype(int)","eabf6b73":"(today_date - df.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"})).head()","80db8129":"temp_df = (today_date - df.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}))","8f2e702c":"temp_df.rename(columns={\"InvoiceDate\": \"Recency\"}, inplace = True)","93b19cbd":"temp_df.head()","58624ad0":"recency_df = temp_df[\"Recency\"].apply(lambda x: x.days)","ff2c9ac3":"recency_df.head()","61b53077":"temp_df = df.groupby([\"Customer ID\",\"Invoice\"]).agg({\"Invoice\":\"count\"})","3cbfc64b":"temp_df.head()","bb74e4b4":"temp_df.groupby(\"Customer ID\").agg({\"Invoice\":\"sum\"}).head()","1f170cb3":"freq_df = temp_df.groupby(\"Customer ID\").agg({\"Invoice\":\"sum\"})\nfreq_df.rename(columns={\"Invoice\": \"Frequency\"}, inplace = True)\nfreq_df.head()","04f744e2":"monetary_df = df.groupby(\"Customer ID\").agg({\"Total\":\"sum\"})","bfb34605":"monetary_df.head()","27887f35":"monetary_df.rename(columns={\"Total\": \"Monetary\"}, inplace = True)","dd932ad7":"print(recency_df.shape,freq_df.shape,monetary_df.shape)","6ed434ef":"rfm = pd.concat([recency_df, freq_df, monetary_df],  axis=1)","17299165":"rfm.head()","244cd8f8":"rfm[\"RecencyScore\"] = pd.qcut(rfm['Recency'], 5, labels = [5, 4, 3, 2, 1])\nrfm[\"FrequencyScore\"] = pd.qcut(rfm['Frequency'], 5, labels = [1, 2, 3, 4, 5])\nrfm[\"MonetaryScore\"] = pd.qcut(rfm['Monetary'], 5, labels = [1, 2, 3, 4, 5])","3168ea67":"rfm.head()","cc13eee7":"(rfm['RecencyScore'].astype(str) + \n rfm['FrequencyScore'].astype(str) + \n rfm['MonetaryScore'].astype(str)).head()","1c6617ac":"rfm[\"RFM_SCORE\"] = rfm['RecencyScore'].astype(str) + rfm['FrequencyScore'].astype(str) + rfm['MonetaryScore'].astype(str)","f9e269b5":"rfm.head()","5421e470":"seg_map = {\n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At Risk',\n    r'[1-2]5': 'Can\\'t Loose',\n    r'3[1-2]': 'About to Sleep',\n    r'33': 'Need Attention',\n    r'[3-4][4-5]': 'Loyal Customers',\n    r'41': 'Promising',\n    r'51': 'New Customers',\n    r'[4-5][2-3]': 'Potential Loyalists',\n    r'5[4-5]': 'Champions'\n}","c402e5ce":"rfm['Segment'] = rfm['RecencyScore'].astype(str) + rfm['FrequencyScore'].astype(str)\nrfm['Segment'] = rfm['Segment'].replace(seg_map, regex=True)\nrfm.head()","f4e62101":"rfm[[\"Segment\", \"Recency\",\"Frequency\",\"Monetary\"]].groupby(\"Segment\").agg([\"mean\",\"count\"])","d80a1b06":"rfm[rfm[\"Segment\"] == \"Need Attention\"].head()","f946fc78":"need_att = pd.DataFrame()\nneed_att['Need Attention Customer ID'] = rfm[rfm['Segment'] == 'Need Attention'].index","56a2dbe7":"need_att.head()","db34141b":"need_att.to_csv('need_att.csv')","a5ed34b6":"# RFM Skorlar\u0131 ile M\u00fc\u015fteri Segmentasyonu\n\nRecency, Frequency, Monetary ifadelerinin ba\u015f harflerinden olu\u015fur.\n\nM\u00fc\u015fterilerin sat\u0131n alma al\u0131\u015fkanl\u0131klar\u0131 \u00fczerinden pazarlama ve sat\u0131\u015f stratejileri belirlemeye yard\u0131mc\u0131 olan bir tekniktir.\n\n- Recency (yenilik): M\u00fc\u015fterinin son sat\u0131n almas\u0131ndan bug\u00fcne kadar ge\u00e7en s\u00fcre\n\n    -- Di\u011fer bir ifadesiyle \u201cM\u00fc\u015fterinin son temas\u0131ndan bug\u00fcne kadar ge\u00e7en s\u00fcre\u201d dir.\n\n    -- Bug\u00fcn\u00fcn tarihi - Son sat\u0131n alma\n\n    -- \u00d6rnek verecek olursak bug\u00fcn bu analizi yap\u0131yorsak bug\u00fcn\u00fcn tarihi - son \t\u00fcr\u00fcn sat\u0131n alma tarihi.\n\n    -- Bu \u00f6rne\u011fin 20 olabilir 100 olabilir. Biliriz ki 20 olan m\u00fc\u015fteri daha s\u0131cakt\u0131r. Daha son zamanlarda bizimle temas\u0131 olmu\u015ftur.\n\n- Frequency (S\u0131kl\u0131k): Toplam sat\u0131n alma say\u0131s\u0131.\n\n- Monetary (Parasal De\u011fer): M\u00fc\u015fterinin yapt\u0131\u011f\u0131 toplam harcama.\n","c61f74bd":"## Frequency","0cc8b0d7":"# Monetary","3e4ee9b2":"## Data Preparation","52cfd6d7":"## **De\u011fi\u015fkenler**\n\n* InvoiceNo: Fatura numaras\u0131. Her i\u015fleme yani faturaya ait e\u015fsiz numara. E\u011fer bu kod C ile ba\u015fl\u0131yorsa i\u015flemin iptal edildi\u011fini ifade eder.\n* StockCode: \u00dcr\u00fcn kodu. Her bir \u00fcr\u00fcn i\u00e7in e\u015fsiz numara.\n* Description: \u00dcr\u00fcn ismi\n* Quantity: \u00dcr\u00fcn adedi. Faturalardaki \u00fcr\u00fcnlerden ka\u00e7ar tane sat\u0131ld\u0131\u011f\u0131n\u0131 ifade etmektedir.\n* InvoiceDate: Fatura tarihi ve zaman\u0131.\n* UnitPrice: \u00dcr\u00fcn fiyat\u0131 (Sterlin cinsinden)\n* CustomerID: E\u015fsiz m\u00fc\u015fteri numaras\u0131\n* Country: \u00dclke ismi. M\u00fc\u015fterinin ya\u015fad\u0131\u011f\u0131 \u00fclke."}}