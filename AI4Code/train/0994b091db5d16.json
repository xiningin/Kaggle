{"cell_type":{"0bf287fa":"code","a35a58e1":"code","288ae88b":"code","8c491ed5":"code","b4c2e4d3":"code","93fe6574":"code","7f3076e7":"code","80d52b27":"code","46d52998":"code","435a2352":"code","b5af6388":"code","efff7b71":"code","30017d6f":"code","929336e7":"code","e3524202":"code","364c4324":"code","3e78cbd9":"code","de278d31":"markdown","38f48f62":"markdown"},"source":{"0bf287fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a35a58e1":"from sklearn.metrics import mean_squared_error\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.simplefilter(action='ignore')","288ae88b":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","8c491ed5":"for df in [df_train, df_test]:\n\tdf['sale_yr'] = pd.to_numeric(df.date.str.slice(0, 4))\n\tdf['sale_month'] = pd.to_numeric(df.date.str.slice(4, 6))\n\tdf['sale_day'] = pd.to_numeric(df.date.str.slice(6, 8))\n\tdf.drop(['id', 'date'], axis=1, inplace=True)","b4c2e4d3":"df_train = df_train.astype('float32')\ndf_test = df_test.astype('float32')","93fe6574":"for df in [df_train, df_test]:\n\t#\uc7ac\uac74\ucd95 \uc5ec\ubd80\n    df['is_renovated'] = df['yr_renovated'] - df['yr_built']\n    df['is_renovated'] = df['is_renovated'].apply(lambda x: 0 if x < 0 else 1)\n\t\n    # \uc6a9\uc801\ub960 \uc8fc\uac70 \uacf5\uac04 \/ \ub300\uc9c0 \uba74\uc801\n    df['far1'] = df['sqft_living'] \/ df['sqft_lot']\n\n\t# 1\uce35\uc758 \ud06c\uae30\n\t# sqft_living = sqft_above + sqft_basement\n    #df['1st_living'] = df['sqft_above'] \/ (df['floors'] )\n\n    #%% \uac74\ud3d0\ub960\n    #df['far2'] = df['1st_living'] \/ df['sqft_lot']\n\n\t# \ub9c8\ub2f9\uc758 \ud06c\uae30\n\t# \ub300\uc9c0 \uba74\uc801\uc5d0\uc11c 1\uce35\uc758 \ud06c\uae30\ub97c \ube7c\uc11c \ub9c8\ub2f9 \ud06c\uae30\ub85c \uac04\uc8fc\n    #df['yard'] = df['sqft_lot'] - df['1st_living']\n    #df['is_yard'] = df['yard'].apply(lambda x: 0 if x <= 0 else 1)\n\n    # \uc9c0\ud558\uac00 \uc788\ub0d0 \uc5c6\ub0d0?\n    #df['is_basement'] = df['sqft_basement'].apply(lambda x: 0 if x == 0 else 1)\n    # \ub2e4\ub77d\uc774 \uc788\ub0d0 \uc5c6\ub0d0?\n    #df['is_top'] = df['floors'].apply(lambda x: 0 if int(x) == x else 1)\n\n    # Full Bath \uc218\n    df['full_bath'] = (df['bathrooms'] \/ 1) \n    df['full_bath'] = df['full_bath'].astype('int')\n\n    df['75bath'] = (df['bathrooms'] - df['full_bath']) \/ 0.75\n    df['75bath'] = df['75bath'].astype('int')\n\n    df['50bath'] = (df['bathrooms'] - df['full_bath'] - df['75bath']*0.75) \/ 0.5\n    df['50bath'] = df['50bath'].astype('int')\n\n    df['25bath'] = (df['bathrooms'] - df['full_bath'] - df['75bath']*0.75 - df['50bath']*0.5) \/ 0.25\n    df['25bath'] = df['25bath'].astype('int')\n\n    df['total_bath'] = df['full_bath'] + df['75bath'] + df['50bath'] + df['25bath']\n\n    # \uce35\ub2f9 \ud654\uc7a5\uc2e4 \uac1c\uc218\n    df['bath_per_floors'] = df['total_bath'] \/ df['floors']\n\n    # \ubc29\ub2f9 \ud654\uc7a5\uc2e4 \uac1c\uc218\n    df['bath_per_rooms'] = df['total_bath'] \/ df['bedrooms']","7f3076e7":"df_train['per_price'] = df_train['price'] \/ df_train['sqft_living']\nzipcode_price = df_train.groupby(['zipcode'])['per_price'].agg({'mean'}).reset_index()\ndf_train = pd.merge(df_train,zipcode_price,how='left',on='zipcode')\ndf_test = pd.merge(df_test,zipcode_price,how='left',on='zipcode')","80d52b27":"encoder = LabelEncoder()\nfor df in [df_train, df_test]:\n    df['zipcode_mean'] = df['mean'] * df['sqft_living']\n    del df['mean']\n    df['zipcode'] = encoder.fit_transform(df['zipcode'])\n    df.drop([\n        'sale_day', 'full_bath', '75bath', \n        '50bath', '25bath', 'sqft_living15', 'sqft_lot15'], axis=1, inplace=True)\n\ndf_train.drop(['per_price'], axis=1, inplace=True)","46d52998":"for c in df_train.columns:\n\tsns.kdeplot(df_train[c])\n\tplt.show()","435a2352":"skew_columns = [\n    'sqft_living', \n    'sqft_lot', \n    'sqft_above',\n    'sqft_basement',\n    'far1',\n    'zipcode_mean']","b5af6388":"for df in [df_train, df_test]:\n\tfor c in skew_columns:\n\t\tdf[c] = np.log1p(df[c])\n\ndf_train['price'] = np.log1p(df_train['price'])","efff7b71":"df_train_target = df_train['price']\ndf_train_features = df_train.drop(['price'], axis=1)","30017d6f":"def print_best_params(model, params):\n    grid_model = GridSearchCV(\n        model, \n        param_grid = params,\n        cv=5,\n        scoring='neg_mean_squared_error')\n\n    grid_model.fit(df_train_features, df_train_target)\n    rmse = np.sqrt(-1*grid_model.best_score_)\n    print(\n        '{0} 5 CV \uc2dc \ucd5c\uc801 \ud3c9\uade0 RMSE \uac12 {1}, \ucd5c\uc801 alpha:{2}'.format(model.__class__.__name__, np.round(rmse, 4), grid_model.best_params_))\n    return grid_model.best_estimator_","929336e7":"xgb_params ={\n    'learning_rate': [0.05],\n    'max_depth': [5],\n    'subsample': [0.9],\n    'colsample_bytree': [0.5],\n    'silent': [True],\n    'gpu_id':[0] ,         \n    'tree_method':['gpu_hist'],\n    'predictor':['gpu_predictor'],\n    'n_estimators':[1000],\n    'refit' : [True]\n}\n\nxgb_model = XGBRegressor()\nxgb_estimator = print_best_params(xgb_model, xgb_params)","e3524202":"lgb_params = {\n    'objective':['regression'],\n    'num_leave' : [1],\n    'learning_rate' : [0.05],\n    'n_estimators':[1000],\n    'max_bin' : [80],\n    'gpu_id':[0] ,         \n    'tree_method':['gpu_hist'],\n    'predictor':['gpu_predictor'],\n    'refit':[True]\n}\n\nlgb_model = LGBMRegressor()\nlgb_estimator = print_best_params(lgb_model, lgb_params)","364c4324":"xgb_preds = xgb_estimator.predict(df_test)\nlgb_preds = lgb_estimator.predict(df_test)\npreds = 0.5* xgb_preds + 0.5*lgb_preds","3e78cbd9":"submission=pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['price']=np.exp(preds)\nsubmission.to_csv('xgb_lgb_submission.csv',index=False)","de278d31":"\uc544\ub798 \ucf54\ub4dc\ub294 \ud30c\uc774\uc36c \uba38\uc2e0\ub7ec\ub2dd \uc644\ubcbd\uac00\uc774\ub4dc\uc5d0\uc11c \uac00\uc838\uc634.","38f48f62":"EDA \ub294 \uc0dd\ub7b5 \uc785\ub2c8\ub2e4. "}}