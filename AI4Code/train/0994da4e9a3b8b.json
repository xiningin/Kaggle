{"cell_type":{"68ca69c9":"code","88371622":"code","f38b177e":"code","79afa4a0":"code","dfdf89a0":"code","346aa29d":"code","cf4c1f4c":"code","0037669c":"code","d200f668":"code","ca974c68":"code","a895b3c4":"code","e97c8d8a":"code","95843b64":"code","87b58f10":"code","b7ae7fa6":"code","d5171fbc":"code","2edf0d29":"code","1a8e8b5f":"code","4bc4d9e8":"code","5ce43176":"code","6fae7cb1":"code","563fbfa7":"code","67ebf263":"code","e6a5f662":"code","3c6ff466":"code","83e5e679":"code","44053213":"code","dea30c50":"code","200e7266":"code","15c95cf3":"code","91a8957f":"code","d67b971b":"code","bf45c54b":"code","c8733544":"code","0875cc6f":"code","26e88cd6":"code","e5a01d8d":"code","b7f39f6a":"code","773a3604":"code","aeb8263e":"code","c2c166aa":"code","c04007ca":"code","378c398f":"code","1e3d63e8":"code","09e5370d":"code","f45755c7":"markdown","9ae75dd2":"markdown","f37d11d6":"markdown","617897ab":"markdown","510d994b":"markdown","efba697c":"markdown","3b523631":"markdown"},"source":{"68ca69c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","88371622":"import numpy as np\nimport pandas as pd","f38b177e":"train_df = pd.read_csv('\/kaggle\/input\/ml-exam-20201006\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/ml-exam-20201006\/test.csv')\ncityinfo_df = pd.read_csv('\/kaggle\/input\/ml-exam-20201006\/city_info.csv')\nstation_df = pd.read_csv('\/kaggle\/input\/ml-exam-20201006\/station_info.csv')","79afa4a0":"cityinfo_df.head()","dfdf89a0":"cityinfo_df = cityinfo_df.rename(columns={'Latitude': 'cityLatitude','Longitude': 'cityLongitude'})\ncityinfo_df.drop(['Municipality'], axis=1,inplace=True)\n\ncityinfo_df.head()","346aa29d":"station_df.head()","cf4c1f4c":"station_df = station_df.rename(columns={'Latitude': 'stationLatitude','Longitude': 'stationLongitude'})\n\nstation_df.head()","0037669c":"train_df['DistrictName'].isnull().sum()","d200f668":"test_df['DistrictName'].isnull().sum()","ca974c68":"train_df['NearestStation'].isnull().sum()","a895b3c4":"test_df['NearestStation'].isnull().sum()","e97c8d8a":"# \u5909\u6570\u6307\u5b9a\ntarget = 'TradePrice' #\u30bf\u30fc\u30b2\u30c3\u30c8\u30ab\u30e9\u30e0\n\nidcol = 'id' #id\u30ab\u30e9\u30e0","95843b64":"print(train_df.shape, test_df.shape)","87b58f10":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30ec\u30b3\u30fc\u30c9\u884c\u6570\u3092\u4fdd\u7ba1\nxshape = train_df.shape[0] \nprint('\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u884c\u6570\uff1a\u3000', xshape)","b7ae7fa6":"train_df.head()","d5171fbc":"test_df.head()","2edf0d29":"y_train = train_df[target]\nX_train = train_df.drop(target, axis=1)\nX_test = test_df","1a8e8b5f":"y_train","4bc4d9e8":"X = X_train.append(X_test)","5ce43176":"X.shape","6fae7cb1":"X.columns","563fbfa7":"print(X_train['AreaIsGreaterFlag'].count(),\n     X_test['AreaIsGreaterFlag'].count())","67ebf263":"print(X_train['Remarks'].nunique(),\n      X_test['Remarks'].nunique())","e6a5f662":"X_train['Remarks'].unique()","3c6ff466":"X_test['Remarks'].unique()","83e5e679":"#X = pd.merge(X, station_df, left_on='NearestStation', right_on='Station')\n#X = pd.merge(X, cityinfo_df, left_on='Prefecture', right_on='Prefecture')","44053213":"#\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u30c1\u30a7\u30c3\u30af\n\n#\u3053\u3053\u306b\u5206\u985e\u3057\u305f\u3044\u30c7\u30fc\u30bf\u65b9\u3092\u914d\u5217\u3067\u8a18\u8f09\ndatachkcols = ['number','bool','object']\n\nfor dck in datachkcols:\n    print(dck,\" \u30ab\u30e9\u30e0\uff1a\")\n    print(X.select_dtypes(include=dck).columns)\n    print(\" \")\n\nprint(\"\u305d\u306e\u4ed6\u3000\u30ab\u30e9\u30e0\uff1a\")\n\notherCols = X.select_dtypes(exclude=datachkcols).columns\nfor ocol in otherCols:\n    print(ocol,\" : \",train_df[ocol].dtype)","dea30c50":"# Object\u30ab\u30e9\u30e0\u306e\u30e6\u30cb\u30fc\u30af\u306a\u5024\u306e\u6570\u3092\u30c1\u30a7\u30c3\u30af\nfor obcol in ['Type', 'Region', 'Prefecture', 'Municipality', 'DistrictName',\n       'NearestStation', 'TimeToNearestStation', 'FloorPlan', 'LandShape',\n       'Structure', 'Use', 'Purpose', 'Direction', 'Classification',\n       'CityPlanning', 'Renovation', 'Remarks']:\n    print(obcol,\" : \",train_df[obcol].nunique())","200e7266":"#\u6570\u5024\u7cfb\nX_cust = X[['MinTimeToNearestStation', 'Area',\n            'AreaIsGreaterFlag', 'Frontage', 'TotalFloorArea',\n            'TotalFloorAreaIsGreaterFlag', 'BuildingYear', 'PrewarBuilding',\n            'Breadth', 'CoverageRatio', 'FloorAreaRatio', 'Year', 'Quarter',\n#             'cityLatitude', 'cityLongitude'\n           ]]\n\n","15c95cf3":"#boolean\u7cfb\n\nX_cust = pd.concat([X_cust, X[['FrontageIsGreaterFlag']]], axis=1)","91a8957f":"naive_cat_cols = ['Type' , 'Region' , 'Purpose' , 'LandShape',\n                 'Structure', 'Renovation', 'Classification', 'CityPlanning', 'FloorPlan','Remarks']  #\u3053\u306e\u884c\u306f\u5f8c\u3067\u898b\u76f4\u3057\n\nfor naive_cat_col in naive_cat_cols:\n    X[naive_cat_col] = X[naive_cat_col].astype('category')\n    \n\nX_cust = pd.concat([X_cust, X[naive_cat_cols]], axis=1)\n","d67b971b":"### DirectionNS ###\nf = 'Direction'\nuniqparams = ['North','Northwest','Northeast',\n'East','West',\n'South','Southwest','Southeast']\n\nnums = [0,0,0,\n1,1,\n2,2,2]\n\nfillnaparam = -9999\n\nfor i,col in zip(nums, uniqparams):\n    X.loc[X[f] == col, 'DirectionNS'] = i\n\nX_cust = pd.concat([X_cust, X['DirectionNS']], axis=1)\nX_cust['DirectionNS'] = X['DirectionNS'].astype('category')\n\n### DirectionWE ###\nf = 'Direction'\nuniqparams = ['West','Northwest','Southwest',\n'North','South',\n'East','Southeast''Northeast',]\n\nnums = [0,0,0,\n1,1,\n2,2,2]\n\nfillnaparam = -9999\n\nfor i,col in zip(nums, uniqparams):\n    X.loc[X[f] == col, 'DirectionWE'] = i\n\nX_cust = pd.concat([X_cust, X['DirectionWE']], axis=1)\nX_cust['DirectionWE'] = X['DirectionWE'].astype('category')\n","bf45c54b":"#np.where(X['NearestStation'].isnull().values = True, 1, 0)","c8733544":"# \u6700\u5bc4\u308a\u99c5\u306a\u3057\u30d5\u30e9\u30b0\n#X_cust['NearestStationFlag'] = X[]\n\n# \u5730\u533a\u540d\u5165\u3063\u3066\u3044\u306a\u3044\u30d5\u30e9\u30b0","0875cc6f":"X_cust.head()","26e88cd6":"#\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u30c1\u30a7\u30c3\u30af\n\n#\u3053\u3053\u306b\u5206\u985e\u3057\u305f\u3044\u30c7\u30fc\u30bf\u65b9\u3092\u914d\u5217\u3067\u8a18\u8f09\ndatachkcols = ['number','bool','object']\n\nfor dck in datachkcols:\n    print(dck,\" \u30ab\u30e9\u30e0\uff1a\")\n    print(X_cust.select_dtypes(include=dck).columns)\n    print(\" \")\n\nprint(\"\u305d\u306e\u4ed6\u3000\u30ab\u30e9\u30e0\uff1a\")\n\notherCols = X_cust.select_dtypes(exclude=datachkcols).columns\nfor ocol in otherCols:\n    print(ocol,\" : \",X_cust[ocol].dtype)","e5a01d8d":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3068\u30c6\u30b9\u30c8\u306b\u518d\u5206\u5272\nX_train = X_cust[:xshape]\nX_test = X_cust[xshape:]","b7f39f6a":"X_train.head()","773a3604":"X_train.columns","aeb8263e":"# RMSLE\u5bfe\u7b56\u3002\u5b66\u7fd2\u524d\u306by_train\u306b\u3001log(y+1)\u3067\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3001RMSE\u305d\u306e\u307e\u307e\u4f7f\u3046\ny_train = np.log(y_train + 1) ","c2c166aa":"#\u4e00\u6642\u7684\u306bcat_cols\u3092\u6307\u5b9a\ncat_cols = []","c04007ca":"#### \u4eee\u30d9\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3000\u5f8c\u3067\u6d88\u3059\nbest_params = {'objective': 'regression', \n               'metric': 'rmse', \n               'learning_rate': 0.05, \n               'lambda_l1': 7.8883628576942, \n               'lambda_l2': 5.057269196433768e-07, \n               'num_leaves': 251, \n               'feature_fraction': 0.5, \n               'bagging_fraction': 1.0, \n               'bagging_freq': 0, \n               'min_child_samples': 20}","378c398f":"import lightgbm as lgb2\nfrom tqdm import tqdm\nimport time\n\nfrom sklearn.model_selection import KFold\n\n\nfold = 5\ncvrepeat = 1 # cv\u5168\u4f53\u3092\u4f55\u56de\u7e70\u308a\u8fd4\u3059\u304b\uff1f\n\n\n\ny_pred_finals = []\n\nskf = KFold(n_splits=fold, shuffle=True)\n\nfor j in range(cvrepeat):\n    \n    y_preds = [] # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u683c\u7d0d\u7528array\n    \n    for i, (train_ix, test_ix) in tqdm(enumerate(skf.split(X_train, y_train))):\n\n        X_train_, y_train_ = X_train.iloc[train_ix], y_train.values[train_ix]\n        X_valid, y_valid = X_train.iloc[test_ix], y_train.values[test_ix]\n\n        evaluation_results = {}\n\n        lgb_train = lgb2.Dataset(X_train_, y_train_) \n        lgb_eval = lgb2.Dataset(X_valid, y_valid, reference=lgb_train)\n\n        model = lgb2.train(best_params, lgb_train, valid_sets=[lgb_train, lgb_eval], \n                           valid_names=['train', 'valid'], evals_result=evaluation_results, \n                           verbose_eval=-1, num_boost_round=1000, early_stopping_rounds=10,\n                          categorical_feature=cat_cols)\n\n        print(i,'\u56de\u76ee\u306e\u4e88\u6e2c')\n        y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n        y_pred = np.exp(y_pred) - 1  #RMSLE\u5bfe\u7b56\u3002\u9006\u95a2\u6570\u3067\u3082\u3068\u306b\u623b\u3059\n        y_preds.append(y_pred)\n        \n    y_pred_final = sum(y_preds) \/ fold\n    y_pred_finals.append(y_pred_final)\n\n\ny_pred_final = sum(y_pred_finals) \/ cvrepeat","1e3d63e8":"# \u6295\u7a3f\u7528CSV\u4f5c\u6210\nsubmit_df = pd.read_csv('..\/input\/ml-exam-20201006\/sample_submission.csv' , index_col=0)","09e5370d":"#\u8ca0\u306e\u5024\u306f0\u306b\u3059\u308b\ny_pred_final = np.where(y_pred_final<0,0,y_pred_final)\n\nsubmit_df[target] = y_pred_final\nsubmit_df.to_csv('.\/submission2_6.csv')","f45755c7":"#### \u5916\u90e8\u30c7\u30fc\u30bf\u30de\u30fc\u30b8","9ae75dd2":"#### \u30d5\u30e9\u30b0\u751f\u6210","f37d11d6":"### \u7279\u5fb4\u91cf\u751f\u6210","617897ab":"### \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u958b\u59cb","510d994b":"### \u8abf\u67fb","efba697c":"#### \u30ab\u30b9\u30bf\u30e0\u30ab\u30c6\u30b4\u30ea","3b523631":"#### \u5358\u7d14\u30ab\u30c6\u30b4\u30ea\u30d5\u30a9\u30fc\u30de\u30c3\u30c8"}}