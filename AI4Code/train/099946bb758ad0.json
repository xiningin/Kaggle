{"cell_type":{"a6804511":"code","2018b831":"code","003d5ccd":"code","07f93cee":"code","926de7cb":"code","f0057d87":"code","8ddaf692":"code","332bbc3e":"code","363d2157":"code","a004d7a4":"code","18cc848b":"code","9cda1f47":"code","0f33ee60":"code","63193fdb":"code","edbbfdf8":"code","1442a858":"code","2cc9844b":"code","c4c96b52":"code","feddb117":"code","22308ecc":"code","8724ce91":"code","7173bb96":"code","edc249a0":"code","fb975ec4":"code","1069eae3":"code","d1c5815b":"code","8e533c8c":"code","8f8793a3":"markdown","60b0f936":"markdown","7819f058":"markdown","b0518c4c":"markdown","8ba9f38f":"markdown","1ec9e646":"markdown"},"source":{"a6804511":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#Text cleaning\nimport re, string\nimport emoji\nimport nltk\nfrom nltk.stem import WordNetLemmatizer,PorterStemmer\nfrom nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))","2018b831":"df=pd.read_csv('..\/input\/cyberbullying-classification\/cyberbullying_tweets.csv')\n","003d5ccd":"# read first 10 columns from data\ndf.head(10)","07f93cee":"# show the shape for data\ndf.shape","926de7cb":"# show information about data\ndf.info()","f0057d87":"df['tweet_text'].dtype","8ddaf692":"df.duplicated().sum()","332bbc3e":"df.drop_duplicates(\"tweet_text\",inplace=True)","363d2157":"df.duplicated().sum()","a004d7a4":"##CUSTOM DEFINED FUNCTIONS TO CLEAN THE TWEETS\nimport emoji\n#Clean emojis from text\ndef strip_emoji(tweet_text):\n    return re.sub(emoji.get_emoji_regexp(), r\"\", tweet_text) #remove emoji\n\n#Remove punctuations, links, stopwords, mentions and \\r\\n new line characters\ndef strip_all_entities(tweet_text): \n    tweet_text = tweet_text.replace('\\r', '').replace('\\n', ' ').lower() #remove \\n and \\r and lowercase\n    tweet_text = re.sub(r\"(?:\\@|https?\\:\/\/)\\S+\", \"\", tweet_text) #remove links and mentions\n    tweet_text = re.sub(r'[^\\x00-\\x7f]',r'', tweet_text) #remove non utf8\/ascii characters such as '\\x9a\\x91\\x97\\x9a\\x97'\n    banned_list= string.punctuation\n    table = str.maketrans('', '', banned_list)\n    tweet_text = tweet_text.translate(table)\n    tweet_text = [word for word in tweet_text.split() if word not in stop_words]\n    tweet_text = ' '.join(tweet_text)\n    tweet_text =' '.join(word for word in tweet_text.split() if len(word) < 14) # remove words longer than 14 characters\n    return tweet_text","18cc848b":"#remove contractions\ndef decontract(tweet_text):\n    tweet_text = re.sub(r\"can\\'t\", \"can not\", tweet_text)\n    tweet_text = re.sub(r\"n\\'t\", \" not\", tweet_text)\n    tweet_text = re.sub(r\"\\'re\", \" are\", tweet_text)\n    tweet_text = re.sub(r\"\\'s\", \" is\", tweet_text)\n    tweet_text = re.sub(r\"\\'d\", \" would\", tweet_text)\n    tweet_text = re.sub(r\"\\'ll\", \" will\", tweet_text)\n    tweet_text = re.sub(r\"\\'t\", \" not\", tweet_text)\n    tweet_text = re.sub(r\"\\'ve\", \" have\", tweet_text)\n    tweet_text = re.sub(r\"\\'m\", \" am\", tweet_text)\n    return tweet_text","9cda1f47":"#clean hashtags at the end of the sentence, and keep those in the middle of the sentence by removing just the \"#\" symbol\ndef clean_hashtags(tweet):\n    new_tweet = \" \".join(word.strip() for word in re.split('#(?!(?:hashtag)\\b)[\\w-]+(?=(?:\\s+#[\\w-]+)*\\s*$)', tweet)) #remove last hashtags\n    new_tweet2 = \" \".join(word.strip() for word in re.split('#|_', new_tweet)) #remove hashtags symbol from words in the middle of the sentence\n    return new_tweet2","0f33ee60":"#Filter special characters such as \"&\" and \"$\" present in some words\ndef filter_chars(a):\n    sent = []\n    for word in a.split(' '):\n        if ('$' in word) | ('&' in word):\n            sent.append('')\n        else:\n            sent.append(word)\n    return ' '.join(sent)\n\n#Remove multiple sequential spaces\ndef remove_mult_spaces(tweet_text):\n    return re.sub(\"\\s\\s+\" , \" \", tweet_text)","63193fdb":"#Stemming\ndef stemmer(tweet_text):\n    tokenized = nltk.word_tokenize(tweet_text)\n    ps = PorterStemmer()\n    return ' '.join([ps.stem(words) for words in tokenized])\n\n#Lemmatization \n#NOTE:Stemming seems to work better for this dataset\ndef lemmatize(tweet_text):\n    tokenized = nltk.word_tokenize(tweet_text)\n    lm = WordNetLemmatizer()\n    return ' '.join([lm.lemmatize(words) for words in tokenized])","edbbfdf8":"#Then we apply all the defined functions in the following order\ndef deep_clean(tweet_text):\n    tweet_text = strip_emoji(tweet_text)\n    tweet_text = decontract(tweet_text)\n    tweet_text = strip_all_entities(tweet_text)\n    tweet_text = clean_hashtags(tweet_text)\n    tweet_text = filter_chars(tweet_text)\n    tweet_text = remove_mult_spaces(tweet_text)\n    tweet_text = stemmer(tweet_text)\n    return tweet_text","1442a858":"texts_new = []\nfor t in df.tweet_text:\n    texts_new.append(deep_clean(t))","2cc9844b":"df.head()","c4c96b52":"# lets plot the Wordscloud\nfrom wordcloud import WordCloud\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(stop_words = 'english')\nwords = cv.fit_transform(df['tweet_text'])\nsum_words = words.sum(axis=0)\n\nwords_freq = [(word, sum_words[0, idx]) for word, idx in cv.vocabulary_.items()]\nwords_freq = sorted(words_freq, key = lambda x: x[1], reverse = True)\n\nwordcloud = WordCloud(background_color = 'black', width = 2000, height = 2000).generate_from_frequencies(dict(words_freq))\n\nplt.style.use('fivethirtyeight')\nplt.figure(figsize=(10, 10))\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.title(\"Vocabulary from text Reviews\", fontsize = 20)\nplt.show()","feddb117":"# creating bag of words\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncv = CountVectorizer(max_features = 2500)\n\nX = cv.fit_transform(df['tweet_text']).toarray()\ny = cv.fit_transform(df['cyberbullying_type']).toarray()\n\nprint(X.shape)\nprint(y.shape)","22308ecc":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n","8724ce91":"print(\"Train shape:\",X_train)\nprint(\"Test shape:\",y_test)","7173bb96":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)","edc249a0":"# Fitting K-NN to the Training set\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)\n","fb975ec4":"#making predictions on test data\ny_predict = classifier.predict(X_test)","1069eae3":"print(\"The predict is:\",y_predict)","d1c5815b":"score=classifier.score(X_test,y_predict)","8e533c8c":"print(\"The Score is:\",score)","8f8793a3":"### Load Data","60b0f936":"\n\n\n\n\n![safas](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMSEhUSEBIWFRUXGBgVFRcWFRUXFRgWFhgWFhUVFRUYHyggGRolGxgVITEhJSkrLi4uFx8zODMtNygwLi0BCgoKDg0OGxAQGy8mICYrMC4rLS0tLS0tLisrLzctLSsuLTIwLi0tLS0tLS8tLSstLS04LSstLS8vLS0tLS0yLf\/AABEIAKgBKwMBIgACEQEDEQH\/xAAcAAEAAgMBAQEAAAAAAAAAAAAABAUDBgcCCAH\/xABKEAABAwEEBQgDCwwCAgMAAAABAAIDEQQFEiEGBzFBURMiYXFygZGxMqHBFCMzNDVCUlOywtEIFRckYnOCkqLS4fAWJWPxQ1SD\/8QAGgEBAAIDAQAAAAAAAAAAAAAAAAMEAQIFBv\/EADIRAAICAQMCBAYBAQkAAAAAAAABAhEDBCExEkFRYYHwBRMicZGhsRQGJDJCUoLB0eH\/2gAMAwEAAhEDEQA\/AOI8oeJ8SnKHifErGiAycoeJ8SnKHifErGiAycoeJ8SnKHifErGiAycoeJ8SnKHifErGiAycoeJ8SnKHifErGiAycoeJ8SnKHifEpFEXGjQSeAUq03ZJG3G6lN9DmK8UBF5Q8T4lSLNZZpPg2vd1Vp47FvWqnReK2TMEuwlxJoCQ1oOTa7zTb0r6BsGiljhpggaSN7ucf6skB8x3VoRbpzRjHd2Jx8Gq10g1ZWyyWY2mQnC2lakVz2ZBxIX1AxgAoAAOAyC1TWr8mT\/w\/aCA+TsbtlT4le8MnB3rW0av9HpbZO9sLcTg0naBQVFTmR0LoP6M7d9WP52f3IDi2GTg71phk4O9a7R+jO3fVj+dn9y\/f0Z276sfzs\/uQHEy9w2k+JUiz2aWQEsBIGW2nmVtusXRaax8mZ2BpdWhq01ApwJ3+a2jVroH7tsZkEoaQ4gAtJBqK1xA5eCA5PNFIz0g4ddaeKxcoeJ8Su2XnqztsdSxrZB+ya+o5+paheWi72Gk1nLT0tLT7CgNC5Q8T4lOUPE+JV9eNwhrSWYgQK0OYNNwS59Ep7TC6djTybSAXBpIBIrnwQFDyh4nxKcoeJ8SpN4XbJCaPblxGz\/ChIDJyh4nxKcoeJ8SsaIDJyh4nxKcoeJ8SsaIDJyh4nxKcoeJ8SsaIDJyh4nxKcoeJ8SsaIDJyh4nxKcoeJ8SsaIAiIgCIiAIiIAiIgCtbDcz35v5rf6j3bu9YLnZWZgOeZ9QJC7dofq6fOGzTnBGRUb3OHEDd1nwQGiaP3C6Rwjs0ZJPAVJ6T0dOxXun2gj7JYBNK8Yy8DAMwBQnN285bB4rut1XRDZmYIGBo3n5x7TtpWka9vk8fvB9lyA0jUJ8Mzqk9q78uA6hPhmdUnkV2C1aQjZEyvS7IeG1ayko8mUmy+Wn60ZAbttABBIw1AOznDasdovGaT0nkDg3IepU+lQ\/6y1\/\/n9orSOXqdIy40jTfyevjUvYd5tXflwD8nn41L2HebV2a9byLDhZtHpGlaKPV6vHpcbyZOP2\/JGceOWSXTEuUWo+63nPG7rqrG670JIbJnXIO9ld65el+P6fPkWPpcb4bqvWuP48yxk0c4xtOzmf5RfowdTvMK\/1DfJ57f3QqD8or0YOp3mFf6iD\/wBe7t\/dC7pUOlLxJGHCjgCOBAI8CoL73jBpUnpopVntLZBVhr7OsKti1mnyy6Mc4t+CaZvLHOKto5zrbuWCOy8rHE1jy4glopUYXGlBltAXnUI0e4Hinzx9kK01xfER2\/uPVZqC+Iv7Y+yFZNCRpxoA2dzDZI2tLiRIKgMGVQ7DuG0ZdGS4xpToNLZnkFhYfon0T0tdw9S+rVQ6aWRkljmxtBwsLmkjMEbwdyA+PpYi0lrgQRuKxq40nHv\/APCPMqnQBERAEREAREQBERAEREAREQBERAFIslldI7CwZ+odaxwxlzg1oqTkFvmiNy1ljhY0uc9wBoMyd56gEBrd3Xe+G0xCQUrUg7iKO2eBX1jor8Ts\/wC7b5Lket6wxxWyyMjaGtbEGtA4Ay+vMmvSus6NyBtigc7ICJpPgsN0rYLlc417fJ4\/eD7Llf2u+3YmjGGYjRjSW1cQC6gr6RoCaDcCtY1yz8pdbXb8efWGuC52j+K4NXkePHeyu2uVxa7\/AJonyaeeNJyNP1DfDN7Mnk5b5NaA2gJFXENFXNaC5xo1oLiAXE5ADMrRNQnwzOqTyK3y1WNjyMbGuwOa9hcK4XsxYXt6RiNCrWodVtfv3\/69npDuYbZbxHHymCR\/o0ZG3FIcbmtFGkjZiBNTkAVh0mdW7LXXiwddHuFe+lVPa7DShplTLh\/tM1C0p+TLWOiP7RUeJy60mlX7e3h2r7u\/Kt9pVTNN\/J6+NS9h3m1dQvGaUCdsMnJSPq1smEPwOzo7CcjTPIrl\/wCT18al7DvNq65f1yiVzJACcD2yUB3t6NjgRUEd+3ZX+KYs0ljyYXTjK20uppNNNqPer48DbTyjvGXdfbz57FVZzRjBI5r3hoD3YWtD5AKF5YMhV2dAl3STtgjjtE3LyNLiZcDY8VTVvMbkKDLuVoLa0ZckK0psG3jSm1ebquQcs+ctLQ8tND+wAGgN3DaTxJ8OG9O8sZ4tNnUut\/Uo4+nlrdu\/pSq6232rct9fS1LJCqW1u\/0c8\/KL9Cz9TvMKdqjkIut1N8g8KBQPyivRg6neYVpqbgL7reBtD6juaMvNem18JZNNljDlxdfgoYWlOLfFovm2uF0ssEcmKWARmZuEgN5VuNlHHJwpwULSGa2WZrZ7EY3mMh00DjzpI35NYCM2uOeHiacKHBa77igtPJztMYfGHCcMc\/G5jsIjcI2lwwh1anIV6V+3TNZZ5rRaIHY3Ow2eZwxYHCMDDQHI80jNeSSw4v75HG4x6V0U1Jde\/wDi3bSa+zTt80dOUMjSg3dt26a28vGiLpvpFFbrr5aIPaWymOWORpbJHK2NxdG8HeKjZxWbUF8Rf2x9kL91iA\/m3E6Lk3Ok5wOGpPJuaDVu3IAA8ANmxV+p2QtuuSm+QDLb6Ir6l6xaqtL\/AFGSLVR6nHuvK2ctQbn0LxOrMtDSaNcCeCg6VfE5\/wB27yVBY5xLnEHNIc5tHlodzDUSZHJrm5iuzMHYrS+5i+wzk+kI3NI6QFW0OvnmnLHkhTXDTuL2T2lxdNOvB2S5sCgri\/zs16Hy5fVlMlqwA0qNvCmI+xV15Xc6Ghriad9KZ8CF07V5dsc964JmB7TG9pB4Fkg7j0r3p\/ogbJIWkF0L64HeGR4OH+7V1CucfRS7fYzE7Cdm1p4j8VEQBERAEREAREQBERAEREAREQHQNX2ib7U5rWDnPFS47Gs4n1eoLu+hOhzLCC91HSuyxfRbwb17StP1Cj3t5\/8AHGuozWxjHBrjmf8Ac+C0yZIY1c2kvPYyotukch11\/HrL2B5yrbL4vn3JdMctMWCEPpxIADAeguIWp66\/j1l7A85Vu1nb+q2U7uTAXP8AjOT5ejm2ttk+2zkk16q16k2mjeVev8HOzopabZYrCXzujmY580jiXB9JnGQ4aZh4BaAMqZ7FsOtptLpb0yV9Th7FX6HzWqa9rc0tk5CuBpdi5MPhLWNDK5ZtxuNOhXmu6MNu1rRsDwP6XLn\/AAnHmlnc5tOKW1cJ5Gpyj\/t7rtZLqJR6aXLf6jav1NK1Cn35vZk8nLpcF2Sv2MPWeaPWua6hPh2dUntXfl6CcOoqqVFFY9HmjOU16G5DvO0+pVWs2FrLrnDGho5uwU+cFuS1LWp8mT\/w\/aCzGCjwYbbOXfk9fGpew7zau\/L5Z1XaTusM8jwwOq0ihrTMjPLqXUP0uO+ob4uWxg6si5T+lp\/\/ANdvi5P0uO+ob4uWW2+QVn5RXowdTvMK\/wBQ3yee390LmGtfS91uEVWBmHEMq57DvXT9Q3yee390LANh0v0a91xjki1rw7FziQ12RBBoCQdmdNyzXFo02zxtY4g0FXYW0Dnn0nHjUrY0VPJoNPkdyiubrtfi1w39++5a\/rc3ylh6vpTv2zRNcXxEdv7j1rup2Ot2SdEjT\/SB7VsWuL4iO39x6qNReH83yYqBuLOuQpgFalTanF87DPG\/8ya\/KK8JdElLwIts0jAfOyaA8gHckZGkHKgEjpGEijASRUVyBqFswbgsVojrUNio3oawYWjuFB3LXb\/sbGyyxtLS1+LOtQ50rczXpxbFsvuZzbBPj2iHDXcSG84joqvO6bTPDqNPGCrlyV7WotNvte9WvFE61SzRzJ19LpfZ8fwc31VfK\/8AA77Ei7Xfd0x2qF0MoqDsO9rtzh0rimqr5X\/gd9iRdwgtzHuLWnMevjReknlhBqMmk3svN+RXUW02ux85acaMPs73wyjZUsduP0XDo\/yFzRfS+utg5KE7\/fPuL5oUhgIiIAiIgCIiAIiIAiIgCsLogD3moqAN\/Hd7VXrYNF4KmvE08P8A2gO36lYSwSginMYQOipI9VFsNstQL8TzTG7A3InnGuEZbBQbdwCx6L2PkJ7TGPmQQN72wsB9dVhttoLATm7HKxrRQDC1xYwAAbQKF1TmSSvM\/wBo5JrHF7rd9O++36S3t+exf0Se7X2vwNP1xOrbLIeMTT48ouo6P2dslis4cP8A42kcQably7XG2lrsg4RNHhyi6vor8Ts\/7tvkvRdCnj6Zq01un3+5RunaJllsTI\/RGfE5laFr1+Tx+8+65blfd\/QWVuKZ4B3NGbz1D2nJcN1raeG2RCFrQ1mKrRtcabST1cOO9Zx44Y4qEEkl2XAlJydsk6hD7+zqk8nLvUsrWir3Bo4kgDxK+QdFr1tMUgbZnBpFXB1SC3iQQa\/+1s9stdomNbTapJD0Gg9dT61uYO6Xtp5YLPXHO1xG5mfr2etcv1j6047TZnWeCJwa8jnurmAa0GVOHFaiyBjcw0V4nM+JzVTpQ+sbe2PJyAobHbXROLm0zyIOwqf+f3\/Rb6\/xWG4rOySXDI2owk0qRnlwWwfmaz\/Vf1P\/ALkBTjSKSlMLad\/mvP5\/f9Fvr\/FXX5ms\/wBV\/U\/+5PzNZ\/qv6n\/3IDWLdbnSkYqADYB07Vt2g2sKa72GJriGE12Bw7wfYtd0hsscbmCNuGoNcyd\/SVM0ZY10bw9ocMWwgHd0oDsdza5WPoJWMd2XFh\/ldVbld+n9il2yGM8Hj2tqvnee5IH7Glh\/ZPsNQsDbnmj+An6g6oHtHqQHdNbN4RSWEGORj+f81wPzH7abFF1CitgeDmC8fZC4ZeNttTGYZQKHm4hQ+FD7F13UPpDZ2QPs8kgZIXAtDsgRSm3igNxvzRI1L7KBTaY60of2Ccu4\/wCFZXnaXyWCZ0sZjdybwWnoG0dBWxKq0q+Jz\/u3eSjjjUXcSKGGMJNx2vt2OL6rz\/2p\/dv+xIuoyM5Msc1wJID6bxWtCRwND10K5hqr+V\/4HfYkXRJrM5toxRYWyYoInl2x0DJSXjPKuCScDpouL8bxRyPGns26jL\/S3OO\/4v8AHmdHSya6n27rxVMqtcb8UEJG\/GR3hi4Lft1ci3CW0cw0d5H1ru+snOCzDaMUtO4t9i0DWtduCd9Bk9jHjrdG0n+qq7ODJ8zFHJ4pP8lWcemTXh\/2cqREUpqEREAREQBERAEREAW\/6sbEJZ4Wne5vrkaD6iVoC6XqeP63Z+2PtIDulgZW32scWR\/YAUGw3c904EhBDHEgBpGEEU5xJNTtA2elvoKWV2\/KFq7MX2QrueVrGl7yGtAq4nYAN5VDV6COonCbddNp7J2nVryuqbXMW1wybFmeNNJc\/o41rtNLdZj\/AOMecq9Tay3RWWOGABhYwNdI6lagZ4dwHT5LTtb2lfum2NdEKCNoDa7wC7M9dStPhs09qNXHCzjsb3D5x\/2qvkJZX1pU+V5wkvc4+kampPAbSVS3hYZWtEsxzcaUJ52wnPh1LZrBd0cI5oq7e47e7gFW6UvrG3tewoCDoy6kp7B82rZHSrVbidSQ9k+YVy6ZAS3Tqnv+SrB2vYVndKq69H1aOv2FAebhfSWv7J9i2H3StXu51H9xVly6AtvdKe6VChs0rwHNYcJ2ONGtPU51AsMjiNtKVpUOa4VG0VaSK9CAj6Qvq5nUfNZdH5aNd1+xV95vqW9SyXbJQHrQGyNtCytnVM2dZGzoBpPJWNva9hUfRmAOLzic1zcOFzTQiuKuWw7BtWK+JKsHa9hWbRd9DJ\/D95AbxotrCtFgtAZanOkiyFakNc2lBka0I6OHBdevHSey2qwTvhlaaxu5pIDs8tm\/uquFskUG12Usa6SBxZQFxZtY6gqebuPUgN11Un\/tx2HfYkXWNJbse+jocnYm4qZVApib1FvrAXAtVekghvFks+wgty3AtcMuqtV9OQyte0OaQWkVBGwg7CFW1elhqcfy5\/deT97PxVolw5Ximpr98epzjWRCWQ2Vp21kr34TRU+uazDBZ5N5ja3wr+IWxa2tln63\/cVLroPvFl7B8mKXFjjixxxx4SSXpsRyfU22fPcgoSOkrwskvpHrPmsakMBERAEREAREQBERAFumgt8ixyRTluIh4DRWgLucQCdwyWlqxkP6u3tjyegPp3Qe+W2yaa0gYcbGYm1rhc0YXCu\/ZXqIWq6zNNBJighfSJvpur6ZH3R\/ngueaJ6SStikZG8t5Rojk6SDUHorsNOJ4LXL5tzpn8kypzoek\/gEBW3pa+VkLt2wdQW1XZJ7zH2QtXvWztjc1rc6NFTxdU1KurFNSJnZCAsZJlSX\/JVre17CpMkyqrzkqB1oDDdjqOPV7QrB0qq7IaHu\/BSTIgMzpFEtjqgda\/S9YpjkgLbRi4JbZIWx4WtaKySOPNYDWmzNzjQ0aMzTrK63cOhlggdGXR+6nOjfIDNmHGMtBbHAKMObtjsVMuNRU3NY2WGzQQPcBK8CaVpNDjkLQBT9lpjB6STvU632ZtogfEXUJ50Ts\/e5mVwPBGbSDUEjOhOSsPT9WNqLqX8e0QLPWRWtvf8Ayc6vuz4MZtRc6XDjDHBzWgOdzS0CgHUOByyVLd1ocXCIkljzhpU0DnZNeOkGndUbyrjS2Z8lpe62B7HYRhADX1NBUtdUVbXFT8aqRoVoxJPMJGkMY2jgXAkODtjWnY4jfwVVy6Vctiwlb+k1S0OrSq9WV1AV6vRrBNIIvgw94ZnXmBxw578qZrBGVsYJokXsSqEHr0HoDLbX1aOtZrkfQu7vaoUzqhZbvdSvd7UBskc692qWsT+w7yKq45lkml5juyfIoCksdoMb2vG4+rYfUu+artNgA2CZ9Yneg4\/Mcdx4A+o964XckTXzNa8VaQ4H+V1COkGhVhZJn2OYxvPMOYO6m5w9o6OhAfQGtpzQ2zlxo0GQnjTmbOlc\/wBN9Lm3hC1oiMboOa7nYgcYGHOgzo3MU3hVOkmlUssETZnYmwgiPiS6lATvpQU4Cq1q5ZC6CdzjUl7CfByA16X0j1nzWNZJfSPWVjQBERAEREAREQBERAFPk+LjtjyeoCnO+AHbHk9Afl12vk3g\/NOTurj3K6njaxzpRtft6ONOvatYV7aZP1dnU3yQFbb5MTq9H4qfZ5eY3qVRIalS45OaOpASXyqFanVHev10iwSuqgEJzWQuWFhX7VAey5W+iViE1shY8VYHco8bi2MGRzT1htO9UlVdaH28QWyF7iGsLuTe47Gsk5jnnsg4u5bRq1ZiV06LXWDeptEjHDnR0JbJkQ5zjz8Lgdno800IpsUS4dKLRE\/DzpwaDASS7LYWnM1plvyA4BT7RoVaDapY3FkUXKOLnA1aAHEUbGMy4AkAZDpAzU++70gu9rYLHGMeRe51C8j6Urt7jnRoyaDszqUsrcupcmI4l00+CXe17wvazHZpHTYhycTm0IcCHCrtlMh0kdFVPhYbKySVx5WfAZC0DmNwMqGtaBzWANpnmaLabPdsEdiErix87mNIkyLgXei1nUCRXfmTwGhXS6Sy2tzJnGQSHlGPdseK0LXbqjIEcDwWIazrTa5\/Hr4v1EtKotLt728jmq\/QrPSK7vc1plhHotdzCdpjcA6Nx6SwtPeqtYNj1VftV4RAenFZbM6lVhqvUZQE9kiyPk5p6j5KE16s7tut8wLqhkYydI+uHpDRte7oHfQZoCtu+TDI13CvkQtme1k7BjFcBBHWfm9Rp6lFkviGzNMdjYC6lHTPAc93Gm5g\/Zb3lywWC0kxPO\/M5AAVpuAyHUgId9WzG\/CPRbl1nefYptxn9Wm7TPJy19bBcfxabts8nICik2nrK8L3JtPWV4QBERAEREAREQBERAFOefeB2h5PUFSHn3sDp\/FAR1c2h9IGdGHbs71TK0tB94b\/AAoCwgvmOdojtTQfou2Yey75nVm3oUW8bpdGMTDjj+kBzmj9tu4dIqOncqVWF33o+I5GreFdnUdyAhFy8kq\/kskVoGOCjH720o0nhT5p6Rl1bVXWAwCvLh5NaANoABvJ3k9HWgIISqufzTHJnZ5gf2X5HxG3wCg2u7pY83sIH0hm3+YZICGiIgNiOltpMYY6QktAaHigeQBQBziDWg35HpKoZZC4kuJJOZJNSTxJ3rGiAmWa3yMe14catFBUn0a1wjgKkrp1xtbelmkwkctA5j42bHuNAXtBrRuNuNnAkAnYKclWzaC6S\/m+08sWF7XNLHAGhoS01FcicvWtMik4\/Tz72N4NXvwbBra0cfFOLXEw+55GMBIqRG9oDMDvo1oCK7STwXOV9D3jrEuvkC50olDwQYhGXOfUZtkY8BuezOneuCXpNG+aR8MfJxucSxlcWFpNQ2u+ijwSk41JPb3791tlik7TIaL0BXIKys1ySv2gMHF+R\/lGfqU5EVa\/Qr42KzQ\/CvL3cBkPBufrChXlbo5ABHEGU2EAA04EDb3koCbZ7HFC1slo5ziA5kQrShFRjO07RkKDZU7lCvK95JsicLQKBgyaANgAGQHQAB0LNpE6rm9n2qnQBWt2n3qTv+yqpWV3n3t\/f5ICtV9cx\/Vpu0zycqFXd0P94mH7TPJyAp37T1rwvb9p614QBERAEREAREQBERAFlc\/mgLEiAKwtB95b3KvU2Y+9juQEJERAW+jrqPd1e0Ktn9J3WfNTrhPPPV7QoEvpHrPmgMasLJe80ex5I4HP17VXogLr3fZ5fhocJ+lHl30GXqKh3nYxE4YTia4VaejgoKsr0PMh7HsCArUV6y\/GxgMjibhAArkCTQVJyzNV6\/5K76tvj\/hAUCK\/\/wCSu+rb4\/4T\/krvq2+P+EBQKfdNmEkga7YASemm71qc++2yc2WIYTkSNo6Rko1wZSnsnzCAlSXsyIlsEYFMsXGnrI6yq203jK\/0nmnAZD1bVGk2nrK8IAiIgLS\/Dzmdn2qrVjexqWdlVyAKfYjzH9\/koCmWU8x3+7kBDU2xSkNc3cSD4VUJZYZKVQHl+09a8L9JX4gCIiAIiIAiIgCIiAIiIApMh5g7kRARkREBYXOecer2hQpNp6yiIDwiIgCsLyPMh7H4IiAr0REAREQBWNxn3w9k+YREBBftPWvCIgCIiAnXkfR7KgoiAKTAeaf93IiAjIiIAiIgCIiAIiID\/9k=)\n\n\n\n# <html><center> Stop Cyberbullying\ud83d\ude4f<center\/><html\/>","7819f058":"`There are some frequent tweets. Its number is 36 .`","b0518c4c":"# Clean Data","8ba9f38f":"# Feature Extraction","1ec9e646":"`Now there are no more frequent tweets =0.`"}}