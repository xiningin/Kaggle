{"cell_type":{"f6c076d9":"code","d4372513":"code","667b70f2":"code","063dc544":"code","9d05be04":"code","a2d69dc4":"code","a7757930":"code","871fa2ba":"markdown"},"source":{"f6c076d9":"import os\nimport gc\nimport sys\nimport time\nimport pickle\nimport random\nimport numpy as np\nimport pandas as pd\nimport datatable as dt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n \nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport lightgbm as lgb\n\nfrom sklearn.metrics import roc_auc_score, mean_squared_error\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.preprocessing import (StandardScaler, PowerTransformer,\n                                   QuantileTransformer ,LabelEncoder, \n                                   OneHotEncoder,OrdinalEncoder)","d4372513":"folder_path = '..\/input\/tabular-playground-series-may-2021'\ntrain_data = pd.read_csv(f'{folder_path}\/train.csv')\ntest_data = pd.read_csv(f'{folder_path}\/test.csv')\nsample = pd.read_csv(f'{folder_path}\/sample_submission.csv')","667b70f2":"train_data.head()","063dc544":"features = [f'feature_{i}' for i in range(50)]\n\ntarget = train_data['target']\nle = LabelEncoder()\ntarget = le.fit_transform(target)\n\ntrain_data = train_data[features].to_numpy()\ntest_data = test_data[features].to_numpy()\n\nscaler = StandardScaler()\ntrain_data = scaler.fit_transform(train_data)\ntest_data = scaler.transform(test_data)","9d05be04":"nfolds = 5\nseed = 43\n\n# params = {\n#  'objective':'multiclass',\n#  'num_class':4,\n#  'reg_alpha': 6.147694913504962,\n#  'reg_lambda': 0.002457826062076097,\n#  'colsample_bytree': 0.3,\n#  'subsample': 0.8,\n#  'learning_rate': 0.001,\n#  'max_depth': 20,\n#  'num_leaves': 111,\n#  'min_child_samples': 285,\n#  'random_state': 48,\n# 'verbose':-1,\n#  'n_estimators': 1600000,\n# #  'n_estimators': 100,\n#  'cat_smooth': 39}\n\nparams = {\n 'objective':'multiclass',\n 'num_class':4,\n 'random_state': 43,\n'verbose':-1,\n 'n_estimators': 10000}","a2d69dc4":"lgbm_preds = np.zeros((test_data.shape[0],4))\n\nkfold = StratifiedKFold(n_splits=nfolds,shuffle=True,random_state=seed)\nlgbm_scores = list()\nfor k, (train_idx, valid_idx) in enumerate(kfold.split(X=train_data,y=target)):\n    print(f\"Fold: {k}\")\n    lgb_train = lgb.Dataset(train_data[train_idx],target[train_idx])\n    lgb_valid = lgb.Dataset(train_data[valid_idx],target[valid_idx],reference=lgb_train)\n    lgb_model = lgb.train(params,\n                      lgb_train, \n                      valid_sets=[lgb_train,lgb_valid],\n                      verbose_eval=1000,\n                      early_stopping_rounds=800,\n                      )\n    lgbm_preds += lgb_model.predict(test_data)\/nfolds","a7757930":"sample.loc[:,['Class_1','Class_2','Class_3','Class_4']] = lgbm_preds\nsample.to_csv(\"submission.csv\",index=False)\nsample.head()","871fa2ba":"## LGBM"}}