{"cell_type":{"717adc61":"code","9c7f5d56":"code","e4ced327":"code","98ea95b0":"code","3d792fd2":"code","89da3c45":"code","93c47e30":"code","a7c8617c":"code","c8a3faa4":"code","c435a176":"markdown","c3b3fcf0":"markdown","6e1380b8":"markdown","273d3bba":"markdown","d26bccb8":"markdown","e428341e":"markdown","149d2f70":"markdown"},"source":{"717adc61":"import os\nimport numpy as np\nimport pandas as pd\nfrom tqdm.auto import tqdm\ntqdm.pandas()\nimport Levenshtein\nimport cv2\nfrom PIL import Image\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","9c7f5d56":"%%time\n\ntrain = pd.read_csv('..\/input\/bms-molecular-translation\/train_labels.csv')\ntest = pd.read_csv('..\/input\/bms-molecular-translation\/sample_submission.csv')\n\ndef get_train_file_path(image_id):\n    return \"..\/input\/bms-molecular-translation\/train\/{}\/{}\/{}\/{}.png\".format(\n        image_id[0], image_id[1], image_id[2], image_id \n    )\n\ndef get_test_file_path(image_id):\n    return \"..\/input\/bms-molecular-translation\/test\/{}\/{}\/{}\/{}.png\".format(\n        image_id[0], image_id[1], image_id[2], image_id \n    )\n\ntrain['file_path'] = train['image_id'].progress_apply(get_train_file_path)\ntest['file_path'] = test['image_id'].progress_apply(get_test_file_path)\n\nprint(f'train.shape: {train.shape}  test.shape: {test.shape}')\ndisplay(train.head())\ndisplay(test.head())","e4ced327":"for i in range(5):\n    image = cv2.imread(train.loc[i, 'file_path'], cv2.IMREAD_GRAYSCALE)\n    image = 255 - image\n    image = image[:, :, np.newaxis]\n    label = train.loc[i, 'InChI']\n    print(image.shape)\n    plt.imshow(image)\n    plt.title(label)\n    plt.show()","98ea95b0":"%%time\n\ntrain['InChI_list'] = train['InChI'].progress_apply(lambda x: x.split('\/'))\ntrain['InChI_length'] = train['InChI_list'].progress_apply(len)\nInChI_df = train['InChI_list'].progress_apply(pd.Series)\ntrain = pd.concat([train, InChI_df.add_prefix('InChI_')], axis=1)\ndisplay(train)","3d792fd2":"train.to_pickle('train.pkl')\ntest.to_pickle('test.pkl')","89da3c45":"def get_score(y_true, y_pred):\n    scores = []\n    for true, pred in zip(y_true, y_pred):\n        score = Levenshtein.distance(true, pred)\n        scores.append(score)\n    avg_score = np.mean(scores)\n    return avg_score","93c47e30":"# sample submission baseline\ny_true = train['InChI'].values\ny_pred = ['InChI=1S\/H2O\/h1H2'] * len(train)\nscore = get_score(y_true, y_pred)\nprint(score)","a7c8617c":"# mode baseline\n\nmode_concat_string = ''\nfor i in range(11):\n    mode_string = train[f'InChI_{i}'].fillna('nan').mode()[0]\n    if mode_string != 'nan':\n        if i == 0:\n            mode_concat_string += mode_string\n        else:\n            mode_concat_string += '\/' + mode_string\nprint(mode_concat_string)\n\ny_true = train['InChI'].values\ny_pred = [mode_concat_string] * len(train)\nscore = get_score(y_true, y_pred)\nprint(score)","c8a3faa4":"test['InChI'] = mode_concat_string\noutput_cols = ['image_id', 'InChI']\ndisplay(test[output_cols])\ntest[output_cols].to_csv('submission.csv', index=False)","c435a176":"# Library","c3b3fcf0":"# Naive baseline","6e1380b8":"# Quick EDA","273d3bba":"# Data Loading","d26bccb8":"# Submission","e428341e":"# Preprocessing","149d2f70":"# Scoring function"}}