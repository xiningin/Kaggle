{"cell_type":{"32e867b6":"code","f184ae80":"code","99f71a5b":"code","34741f22":"code","6e15d022":"code","fc9b5c8a":"code","57579f45":"markdown","97a5e683":"markdown","2ae592b9":"markdown","6753e8f2":"markdown","8cb2087a":"markdown","ed2d5a4c":"markdown"},"source":{"32e867b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f184ae80":"df = pd.read_csv(\"\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")\n\n# latest report date\nmax_date = df['date'].max()\n\n# create country\/region list\ncountry_lst = df.country.tolist()\ncountry_lst = set(country_lst)\n\n# create dict to access index of each column \ncol_inx = {col_name:i for i,col_name in enumerate(df.columns.values)}","99f71a5b":"df.groupby(['country']).get_group('China').tail(5)","34741f22":"# Started to impute country by country\ntemp_df_lst = []\nfor country in country_lst:\n    \n    temp_df = pd.DataFrame(df.groupby(['country']).get_group(country))\n    # lastest date of this country\n    last_update = temp_df['date'].max()\n    \n    if last_update < max_date:\n        # create date list \n        time_delta = pd.to_datetime(max_date) - pd.to_datetime(last_update)\n        # length of lack data\n        append_len = time_delta.days\n        # create date string list\n        time_lst = [pd.to_datetime(temp_df['date'].max())+pd.Timedelta(x, unit=\"day\") for x in range(1,time_delta.days+1)]\n        time_lst = [x.strftime(\"%Y-%m-%d\") for x in time_lst]\n        \n        # create append data for other features, basically remain the same like the last day's information\n        last_data = temp_df[temp_df['date'] == last_update].values\n        # cloning to append length\n        append_data = np.tile(last_data,(append_len,1))\n        # specify 0 to \"daily\" related columns since there is no updates at these dates, and other features remain the same\n        append_data[:,col_inx['date']] = time_lst\n        append_data[:,col_inx['daily_vaccinations_raw']] = 0\n        append_data[:,col_inx['daily_vaccinations']]=0\n        append_data[:,col_inx['daily_vaccinations_per_million']]=0\n        # create df \n        append_df = pd.DataFrame(append_data,columns=df.columns)\n        # append to origin df and add to list \n        temp_df_lst.append(temp_df.append(append_df,ignore_index=True))\n    else:\n        temp_df_lst.append(temp_df)\n\n# concate into new df\n\nnew_df = pd.concat(temp_df_lst,axis=0,ignore_index=True)\n","6e15d022":"# sorting \nnew_df = new_df.sort_values(by=['country','date'])\n\nnew_df.reset_index(inplace=True,drop=True)\n","fc9b5c8a":"# check imputation\nnew_df.groupby(['country']).get_group('China').tail(10)","57579f45":"%%html\n<div class='tableauPlaceholder' id='viz1613892574569' style='position: relative'><noscript><a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;6X&#47;6XDFR2GM5&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='path' value='shared&#47;6XDFR2GM5' \/> <param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;6X&#47;6XDFR2GM5&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='language' value='zh-Hant' \/><param name='filter' value='publish=yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1613892574569');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else { vizElement.style.width='100%';vizElement.style.height='1827px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","97a5e683":"## Data Clean \n\nI did some data clean for the purpose of plotting cumulative chart and calculating last n days average, both of them need data that has value at current data, however some countries are not updating daily. So I just assume that the date they are not updated is 0 or remain the same.\n\nFor example on 2021-02-21 one of the countries data looks like this, there has no data of 2\/20 and 2\/21\n\n> | Country       | Date       | Daily Vaccinations | People Fully Vaccinated |\n|---------------|------------|--------------------|-------------------------|\n| United States | 2021-02-17 | 100                | NaN                     |\n| United States | 2021-02-18 | 200                | NaN                     |\n| United States | 2021-02-19 | 300                | 200                     |\n\nThen after imputation it should look like this, 0 was imputed to daily associated columns and latest data was cloned to status features like _People Fully Vaccinated_.\n\n> | Country       | Date       | Daily Vaccinations | People Fully Vaccinated |\n|---------------|------------|--------------------|-------------------------|\n| United States | 2021-02-17 | 100                | NaN                     |\n| United States | 2021-02-18 | 200                | NaN                     |\n| United States | 2021-02-19 | 300                | 200                     |\n| United States | 2021-02-20 | 0                  | 200                     |\n| United States | 2021-02-21 | 0                  | 200                     |","2ae592b9":"## How to use\n\nMost of the information are in the tool tip of map chart, the control bars are explained below\n\n- __Select Metric:__ \nChose one from the 4 metics ( People fully vaccinated \/ People vaccinated \/ Total Vaccinated \/ Last N days Avg.) and result will be present on left 2 charts.\n\n- __Unit:__ \nBy raw number \/ By per hundred (only applies to first 3 metrics)\n\n- __Vaccination Threshold__: \nWhen observing metrics with By per hundred, the rank chart may include some region that with small population, can be avoid by increading vaccinations threshold.\n\n- __N days:__ \nHow days are used to calculate average of daily vaccinations (only applies to Last N days Avg.)","6753e8f2":"[Show on gallery](https:\/\/public.tableau.com\/views\/covid2_16138717906360\/Dashboard1?:language=zh-Hant&:display_count=y&publish=yes&:origin=viz_share_link)","8cb2087a":"\n<div class='tableauPlaceholder' id='viz1613888325983' style='position: relative'><noscript><a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;co&#47;covid2_16138717906360&#47;Dashboard1&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='path' value='views&#47;covid2_16138717906360&#47;Dashboard1?:language=zh-Hant&amp;:embed=y&amp;:display_count=y&amp;publish=yes' \/> <param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;co&#47;covid2_16138717906360&#47;Dashboard1&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='language' value='zh-Hant' \/><param name='filter' value='publish=yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1613888325983');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else { vizElement.style.width='100%';vizElement.style.height='1827px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","ed2d5a4c":"_Country that doesn't update for a while, for example China has stopped from 2\/9_"}}