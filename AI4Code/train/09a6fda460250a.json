{"cell_type":{"95b89c39":"code","9d38892f":"code","625f7030":"code","136fa3de":"code","36dfe4c6":"code","d0be86e4":"code","2538a7a4":"code","0ecc3a60":"code","b7955095":"code","fffb867e":"code","e96d1c77":"code","fdfe3248":"code","2415b1f3":"code","0c216447":"code","78e212ca":"code","fb58c477":"code","d6cd39cf":"code","701822ad":"code","2a07586e":"code","c8df7caa":"code","12f4cc87":"code","fcfde2cf":"code","fe3e4e97":"code","8290fb2e":"code","d2b42248":"code","4d1c4b56":"code","6e8b942c":"code","ddeb21f9":"code","6b57d834":"code","4b175b86":"code","f4e1380b":"code","fda07e68":"code","bd48073e":"code","d626e1dd":"code","68f7a8e2":"code","5f98ee2b":"code","53ef905c":"code","8fdde2cb":"code","59ceb16a":"code","7e75b277":"code","b41ee176":"code","7579678a":"code","e546206f":"code","9f75a3be":"code","671746fc":"code","ae54cdb7":"code","138e1ed5":"code","8379bd95":"code","ea9a5241":"code","23ceae59":"code","2d4236be":"code","178fd4a2":"code","250b6fce":"code","1f870aa4":"code","38cb55ef":"code","926af22a":"code","6a04ced4":"code","c7c70cd4":"code","7797f495":"code","3ff39b47":"code","e83f841e":"code","e4cfd128":"code","c569974b":"code","df11a576":"code","9a76a240":"code","ec9a223e":"code","8ae673fc":"code","13e25efe":"code","67952ccc":"markdown","021d0c1c":"markdown","8dcc647c":"markdown","9f9d4384":"markdown","74287fc2":"markdown","fb50305d":"markdown","91f3723f":"markdown","88b9c213":"markdown","76ab06b7":"markdown","e9f3dfff":"markdown","94faa5bf":"markdown","61ff5ead":"markdown","cc397458":"markdown","d985c5e4":"markdown","d9182fa1":"markdown","34fec4f6":"markdown","45a13269":"markdown","68428b4a":"markdown","4b4ad2e6":"markdown","c84bcb97":"markdown","25e8fe81":"markdown","f3372988":"markdown","f3392075":"markdown","d426feb3":"markdown","65f00217":"markdown","191f6049":"markdown","712987c1":"markdown","39b3cef3":"markdown","4ce407bd":"markdown"},"source":{"95b89c39":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set()\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing   import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics         import accuracy_score, balanced_accuracy_score, plot_confusion_matrix\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.inspection      import permutation_importance, plot_partial_dependence\n","9d38892f":"import time as tim\nimport altair as alt\nimport missingno as msno\nimport unidecode\nfrom geopy.geocoders import Nominatim","625f7030":"# M\u00e1s librer\u00edas para testear todos los modelos\nfrom sklearn.linear_model  import LogisticRegression\nfrom sklearn.tree          import DecisionTreeClassifier\nfrom sklearn.ensemble      import RandomForestRegressor\nfrom sklearn.ensemble      import ExtraTreesClassifier\nfrom sklearn.ensemble      import GradientBoostingClassifier\nfrom xgboost               import XGBClassifier, plot_tree, XGBRegressor\nimport lightgbm as lgb\n\nfrom tqdm import tqdm_notebook as tqdm\n","136fa3de":"df = pd.read_csv(\"..\/input\/murcia-car-challenge\/train.csv\")\ntsts = pd.read_csv(\"..\/input\/murcia-car-challenge\/test.csv\")\n\n","36dfe4c6":"tsts","d0be86e4":"df.head(1000)\n","2538a7a4":"tsts[\"diferencia\"] = 0\ndf[\"diferencia\"] = 1\n\nall = pd.concat([df,tsts])","0ecc3a60":"all","b7955095":"all = all.drop(\"Id\",axis=\"columns\")\nall = all.drop(\"Localidad\",axis=\"columns\")\n","fffb867e":"all.shape","e96d1c77":"cat  = all.select_dtypes(include=[object]).columns\n# Quitamos modelo para encodearlo de forma individual antes de tratar los valores missing\ncat = cat.drop(\"Modelo\")\n\nnum  = all.select_dtypes(exclude=[object, 'datetime64','timedelta64']).columns\n\ntime = all.select_dtypes(include=['datetime64']).columns\n\nprint(\"\\nNumerical features:\\n\", num.values)\nprint(\"\\nCategorical features:\\n\", cat.values)\nprint(\"\\nDate\/time features:\\n\", time.values)\n","fdfe3248":"all[all.Tiempo == \"destacado\"]","2415b1f3":"#\u00a0Creamos la columna destacado\nall[\"Destacado\"] = 0","0c216447":"all.head()","78e212ca":"def transform2type(Tiempo):\n    if   Tiempo.endswith('d\u00edas'):  return 'dias'\n    elif Tiempo.endswith('horas'): return 'horas'\n    elif Tiempo.endswith('hora'):  return 'hora'\n    elif Tiempo.endswith('min'):   return 'min'\n    elif Tiempo.endswith('seg'):   return 'seg'\n    elif Tiempo.endswith('nuevo anuncio'):  return 'nuevo anuncio'\n    elif Tiempo.endswith('destacado'):      return 'destacado'","fb58c477":"def cuadrar_tiempo(cell):\n    \n\n    #\u00a0Por consejo de Javier Abell\u00e1n, creo una segunda columna en la que \n    #\u00a0Indico si un anuncio es destacado o si no lo es \n    \n    if \"d\u00eda\" in cell or \"dia\" in cell or \"d\u00edas\" in cell or \"dias\" in cell:\n        return (float(cell.split()[0]))\n    \n\n    elif \"hora\" in cell or \"horas\" in cell :\n        return (float(cell.split()[0])\/24)\n    \n\n    elif \"minuto\" in cell or \"minutos\" in cell :\n        return (float(cell.split()[0])\/(24*60))\n    \n\n    elif \"seg\" in cell or \"segs\" in cell:\n        return (float(cell.split()[0])\/(24*3600))\n    \n    elif \"nuevo anuncio\" in cell:\n        return 0\n    elif \"destacado\" in cell:\n        return -1\n    else:\n        return 1","d6cd39cf":"all[\"Tiempo_tipo\"] = all[\"Tiempo\"].apply(transform2type)","701822ad":"all.loc[(all.Tiempo == \"destacado\"), \"Destacado\"] = 1\nall[\"Tiempo\"] = all[\"Tiempo\"].apply(cuadrar_tiempo)","2a07586e":"all[\"Destacado\"].value_counts()","c8df7caa":"def cleanString(valor):\n    return unidecode.unidecode(valor.upper().strip())\n\ndef clean(data):\n    \n    data['Marca']  = data['Marca'].apply(cleanString)\n    data['Modelo'] = data['Modelo'].apply(cleanString)\n\n    data['Marca'].replace(\"MERCEDES\", \"MERCEDES-BENZ\",     inplace=True) # Fix Mercedes\n    data['Modelo'].replace(\"CLASE \", \"CLASE_\", regex=True, inplace=True) # Fix Mercedes models\n    data['Modelo'].replace(\"SERIE \", \"SERIE_\", regex=True, inplace=True) # Fix BMW models\n    data['Modelo'].replace(\"RANGE ROVER \", \"\", regex=True, inplace=True) # Fix Land Rover models\n    \n    return data","12f4cc87":"all = clean(all)","fcfde2cf":"palabrasModeloEliminar = [\"CAMBIO\",\"GARANTIA\",\"IMPECABLE\",\"GASOLINA\",\"DIESEL\",\"FINANCIAMOS\",\"CON\",\"ASNEF\",\"RESTAURADO\",\\\n\t\"KILOMETROS\",\"PLAZAS\", \"HDI\",\"TDI\",\"CDI\",\"MOTOR\",\"VELOCIDADES\",\"UNICO\",\"DUENO\",\"SOLO\",\"AUTOMATICO\",\\\n\t\"BLUE\",\"BLUEDRIVE\",\"BLUEHDI\",\"BLUEMOTION\",\"BLUETEC\",\"RESERVADO\",\"D4D\",\"COMPRO\",\"COCHES\",\"CERTIFICADOS\"]\n\ncambios = [[\"HYBRID\",\"HIBRIDO\"]]\n\nnuevasColumnas = [\"GARANTIA\",\"IMPECABLE\",\"BLUE\",\"GLP\",\"HDI\",\"TDI\",\"CDI\"]\nexregulares = [\"PUERTAS\",\"CV\",\"KM\",\"KMS\",\"KILOMETROS\",\"KW\"]\nexregularesquitarespacios = [\"CLASE\",\"SERIE\"]\n\nmarcas = []\n\nquitar = [\"\\\"\",\",\"]\n\ndef tran(valor):\n    try:\n        return unidecode.unidecode(valor.upper().strip())\n    except:\n        return valor\n\ndef tranModelo(valor):\n    vorig = valor\n    valor = unidecode.unidecode(valor.upper().strip())\n    for eli in marcas:\n        valor = valor.replace(eli,\"\")\n    for eli in quitar:\n        valor = valor.replace(eli,\"\")\n    for eli in palabrasModeloEliminar:\n        valor = valor.replace(eli,\"\")\n    for cam in cambios:\n        valor = valor.replace(cam[0],cam[1])\t\n\tfor res in exregularesquitarespacios:\n\t\tmat = re.search(r'(' + res + '\\s+\\w+)', valor)\n\t\tif mat:\n\t\t\tvalor = valor.replace (mat.group(0), mat.group(0).replace(\" \", \"\"))\n\tfor res in \texregulares:\n\t\tmat = re.search(r'(\\w+\\s*' + res + ')', valor)\n\t\tif mat:\n\t\t\tvalor = valor.replace (mat.group(0), \"\")\n\treturn valor","fe3e4e97":"all[\"Modelo\"] = all[\"Modelo\"].apply(tranModelo)","8290fb2e":"current_year = 2020.1\nall[\"Anos hasta Feb 2020\"] = abs(all[\"A\u00f1o\"] - current_year)\nall[\"Kms medios por ano\"]  = all[\"Kms\"] \/ all[\"Anos hasta Feb 2020\"]","d2b42248":"geolocator = Nominatim(user_agent=\"myGeocoder\")\n\nprovincias = all['Provincia'].unique().tolist()","4d1c4b56":"def getLatLon():\n    provincias_loc = pd.DataFrame(columns=('Provincia', 'Latitude', 'Longitude'))\n\n    for p in provincias:\n        loc = geolocator.geocode(p.replace('_', ' ') + \", Espa\u00f1a\")\n        print(p,\"-->\", loc, \"-->\", loc.latitude, loc.longitude)\n        provincias_loc = provincias_loc.append({'Provincia':p , 'Latitude':loc.latitude, 'Longitude':loc.longitude}, ignore_index=True)\n        tim.sleep(.5)\n    return provincias_loc\n\n\n","6e8b942c":"provincias_loc = getLatLon()\n","ddeb21f9":"provincias_loc.to_csv(\"provincias.csv\", index=False)\nprovincias_loc = pd.read_csv(\"provincias.csv\")","6b57d834":"all = pd.merge(all, provincias_loc, on='Provincia', how='left')","4b175b86":"def getMotorLitros(modelo):\n    if \". \" in modelo:\n        idx   = modelo.index(\". \")\n        left  = modelo[idx-1:idx]\n        right = modelo[idx+2:idx+3]\n        if left.isnumeric() and right.isnumeric():\n            return left+\".\"+right\n        else:\n            return None        \n    else:\n        return None","f4e1380b":"all['Motor_litros'] = all['Modelo'].apply(getMotorLitros)","fda07e68":"def quitar_aislados(dff):\n    tst = dff\n    for i in tqdm(range(len(dff.Precio.value_counts().index))):\n      if dff.Precio.value_counts().values[i] < 3:\n        tst = tst[tst.Precio != dff.Precio.value_counts().index[i]]\n\n    return tst\n","bd48073e":"all = quitar_aislados(all) \n","d626e1dd":"le = LabelEncoder()\nfor label in cat:\n    print(label)\n    all.loc[(all[label].notnull()),label] = le.fit_transform(all[(all[label].notnull())][label])","68f7a8e2":"all.head()","5f98ee2b":"lemod = LabelEncoder()\nall[\"Modelo\"] = lemod.fit_transform(all[\"Modelo\"])","53ef905c":"def remove_missings(dff):\n    # Array de los valores que tienen missings\n    array = ['Cambio','Cv','Combust','Puertas','Vendedor','Kms','A\u00f1o']\n    #\u00a0Inicializar columna de missings\n    \n    dff[\"Missings\"] = 0\n    for var in tqdm(array):\n        dff.loc[(dff[var].isnull()),\"Missings\"] = 1\n        moda_general = dff[var].mode()[0]\n        dff[var] = dff.groupby(\"Modelo\")[var].transform(lambda x : ( x.fillna(moda_general) if pd.isnull(x).all() else x.fillna(dff[(dff.Modelo== x.name) & (dff[var].notnull())][var].mode()[0])) if pd.isnull(x).any() else x )\n           \n    \n    return dff","8fdde2cb":"all.isnull().sum()","59ceb16a":"# Comprobamos que se ha quitado bien\nall.isnull().sum()\nall = remove_missings(all)","7e75b277":"all.head()","b41ee176":"all[\"Modelo\"]","7579678a":"all[\"Modelo\"] = lemod.inverse_transform(all[\"Modelo\"])","e546206f":"all[\"Missings\"].value_counts()\n","9f75a3be":"from sklearn.feature_extraction.text import CountVectorizer\n\ncv = CountVectorizer(strip_accents=\"unicode\",min_df=0.001)\n\nX = cv.fit_transform(all[\"Modelo\"])\nfeat = pd.DataFrame(X.toarray(), columns=cv.get_feature_names())\nfeat.index = all.index\nall = pd.concat([all, feat], axis=1, sort=False)","671746fc":"all[\"Modelo\"] = lemod.fit_transform(all[\"Modelo\"])\n","ae54cdb7":"all.rename(columns={'A\u00f1o': 'Ano'},inplace=True)\n","138e1ed5":"for col in all.columns:\n    print(col)","8379bd95":"array = ['Cambio','Combust','Marca','Modelo','Provincia','Tiempo','Vendedor','Tiempo_tipo','Motor_litros']\nfor valor in array:\n    all[valor] = pd.to_numeric(all[valor], errors='coerce')\n","ea9a5241":"all","23ceae59":"tsts = all[all.diferencia == 0]\ndf = all[all.diferencia == 1]\n\ntsts = tsts.drop(\"diferencia\",axis=\"columns\")\ndf = df.drop(\"diferencia\",axis=\"columns\")","2d4236be":"df[array].dtypes","178fd4a2":"x_train = df.drop(\"Precio\", axis=\"columns\")\ny_train = df[\"Precio\"]\n \n'''\nx_train, x_valid, y_train, y_valid = train_test_split(x, y,\n                                                      test_size=0.2,\n                                                      stratify=y\n                                                      ,shuffle=True,\n                                                      random_state= 89438942\n                                                      )\n'''","250b6fce":"# Librer\u00edas necesarias para la optimizaci\u00f3n de par\u00e1metros bayesiana\nimport warnings\nimport time\nwarnings.filterwarnings(\"ignore\")\nimport lightgbm as lgb\nfrom bayes_opt import BayesianOptimization\nfrom sklearn.metrics import roc_auc_score","1f870aa4":"'''\ncat  =  ['Marca','Tiempo','Provincia','Cambio','Combust','Vendedor','Modelo']\n\n\n\ndef bayes_parameter_opt_lgb(X, y, init_round=15, opt_round=25, n_folds=5, random_seed=0, n_estimators=10000, learning_rate=0.05, output_process=False):\n    # prepare data\n    train_data = lgb.Dataset(data=X, label=y, categorical_feature = cat,free_raw_data=False)\n    # parameters\n\n    def lgb_eval(num_leaves, feature_fraction, max_depth , min_split_gain, min_child_weight):\n        params = {\n            \"objective\" : \"regression\", \"bagging_fraction\" : 0.8, \"bagging_freq\": 1,\n            \"min_child_samples\": 20, \"reg_alpha\": 1, \"reg_lambda\": 1,\"boosting\": \"rf\",\n            \"learning_rate\" : 0.01, \"subsample\" : 0.8, \"colsample_bytree\" : 0.8, \"verbosity\": -1, \"metric\" : 'rmse'\n        }\n        params['feature_fraction'] = max(min(feature_fraction, 1), 0)\n        params['max_depth'] = int(round(max_depth))\n        params['num_leaves'] = int(round(num_leaves))\n        params['min_split_gain'] = min_split_gain\n        params['min_child_weight'] = min_child_weight\n        cv_result = lgb.cv(params, train_data, nfold=n_folds, seed=random_seed, verbose_eval =200,stratified=False)\n        return (-1.0 * np.array(cv_result['rmse-mean'])).max()\n    \n        # range \n    lgbBO = BayesianOptimization(lgb_eval, {'feature_fraction': (0.1, 0.9),\n                                            'max_depth': (5, 9),\n                                            'num_leaves' : (200,300),\n                                            'min_split_gain': (0.001, 0.1),\n                                            'min_child_weight': (5, 50)}, random_state=0)\n        # optimize\n    lgbBO.maximize(init_points=init_round, n_iter=opt_round,acq='ei')\n\n        # output optimization process\n    if output_process==True: lgbBO.points_to_csv(\"bayes_opt_result.csv\")\n\n        # return best parameters\n    return lgbBO.max\n\nopt_params = bayes_parameter_opt_lgb(x, y, init_round=31, opt_round=100000, n_folds=5, random_seed=656577, n_estimators=100000, learning_rate=0.01)\n\n'''","38cb55ef":"#print(opt_params)","926af22a":"model = lgb.LGBMRegressor(feature_fraction=0.8829, max_depth=8,min_child_weight=25.77, min_split_gain=0.07827, num_leaves=212)\nmodel.fit(x_train, np.log1p(y_train))\n","6a04ced4":"\n#preds = np.expm1(model.predict(x_valid))\n#preds\n","c7c70cd4":"\nfrom sklearn.metrics import mean_squared_log_error\n#print(\"Accuracy (Caution):\", np.sqrt(mean_squared_log_error( y_valid, preds )))\n","7797f495":"'''\n# Compute Permutation Feature Importance\npfi = permutation_importance(model, x_valid, y_valid, n_repeats=10, random_state=0, n_jobs=-1)\n\n# Clean data\nsorted_idx = pfi.importances_mean.argsort()[::-1]\npfi_df = pd.DataFrame(data=pfi.importances[sorted_idx].T, columns=x_valid.columns[sorted_idx])\n\n# Plot (This can be barplot, boxplot, violinplot,...)\nplt.figure(figsize=(12,4))\nsns.barplot(data=pfi_df, orient=\"h\").set_title(\"Permutation Feature Importance (validation set)\",  fontsize=20);\n'''","3ff39b47":"tsts[\"Modelo\"] = lemod.fit_transform(tsts[\"Modelo\"])","e83f841e":"tsts = tsts.drop(\"Precio\",axis=\"columns\")","e4cfd128":"tsts","c569974b":"preds = np.expm1(model.predict(tsts))","df11a576":"tsts[\"Precio\"] = preds\ntsts = tsts[[\"Precio\"]]\ntsts","9a76a240":"tst = pd.read_csv(\"..\/input\/murcia-car-challenge\/test.csv\")","ec9a223e":"tsts[\"Id\"] = tst.index\ntsts = tsts[[\"Id\",\"Precio\"]]","8ae673fc":"tsts.head()","13e25efe":"\ntsts.to_csv('\/kaggle\/working\/sub.csv', index= False)","67952ccc":"#\u00a04. `def`Quitamos aquellas filas que tengan un Precio aislado (< 3 )","021d0c1c":"# 13. (opcional) Calculamos la importancia de las variables","8dcc647c":"\n\n\n# 2. Eliminamos las variables que no aportan nada","9f9d4384":"### Limpiamos las variables `Marca` y `Modelo`","74287fc2":"# 3. Agrupamos las variables (cat y num)","fb50305d":"# 3d. Creaci\u00f3n de variables adicionales con m\u00e1s informaci\u00f3n\n","91f3723f":"# 10 Optimizaci\u00f3n de los par\u00e1metros para LightGBM","88b9c213":"### Quitamos aquellos que tengan un precio disparatado\n\nAqu\u00ed convendr\u00eda estudiar estad\u00edsticamente los precios que son m\u00e1s extra\u00f1os","76ab06b7":"# 7. Tratamos valores que tengan strings, en este caso `df.Modelo`","e9f3dfff":"# 15. Realizamos la predicci\u00f3n","94faa5bf":"# 5. Hacemos el encoding a las categ\u00f3ricas","61ff5ead":"# 8. Traducimos a car\u00e1cteres ascii `A\u00f1o`","cc397458":"# 3c. Limpiando variables \n\n","d985c5e4":"# 9 Entrenamiento ","d9182fa1":"##\u00a0Capacidad del motor en litros","34fec4f6":"# <center>FIN","45a13269":"##\u00a0Cambiamos a tipo num\u00e9rico","68428b4a":"## Quitamos aquellos precios que no corresponden \n","4b4ad2e6":"### `KMS``","c84bcb97":"###\u00a0Paso de provincias a > Lat y Long\n*ADVERTENCIA: ACTIVAR EL INTERNET DEL NOTEBOOK DE KAGGLE PARA QUE FUNCIONE ESTE TROCITO DE C\u00d3DIGO *","25e8fe81":"### Limpiamos las variable `Modelo``\nLe quitamos si aparecen puertas o kil\u00f3metros dentro del nombre y otras cosas","f3372988":"# 12. Evaluamos el modelo escogido","f3392075":"# 14. Aplicandole el conjunto de test\n","d426feb3":"# 16. Guardando como csv","65f00217":"# 6. `def` Tratamos valores missing","191f6049":"# 3b. `def` Procesamos la columna de tiempo","712987c1":"# 1. Leer CSV","39b3cef3":"# 1.2. Fusionamos los dos conjuntos","4ce407bd":"# 11. Entrenamos el modelo escogido"}}