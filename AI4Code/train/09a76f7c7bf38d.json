{"cell_type":{"08b4b50f":"code","0475aadf":"code","9e697b29":"code","6f49e999":"code","31a6fe73":"code","c713ed56":"code","34bca559":"code","9cce4453":"code","6822eeff":"code","dbbb5cc7":"code","04c9c646":"code","536e835a":"code","e1f12a5b":"code","4bcdfdae":"markdown","35e82e55":"markdown","07b4e516":"markdown","a235cb9f":"markdown","712bbc2f":"markdown","5b610c96":"markdown","bef432ca":"markdown","2c8c678f":"markdown","8df95c32":"markdown"},"source":{"08b4b50f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0475aadf":"import torch\nimport torchvision\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom PIL import Image, ImageDraw\nimport xml.etree.ElementTree as ET\n\nimages_dir = '\/kaggle\/input\/datasetdentifricio\/images\/'\nannotations_dir = '\/kaggle\/input\/datasetdentifricio\/annotations\/xmls\/'","9e697b29":"sample_id = '400086900039_349605'\n\nsample_image_path = f'\/kaggle\/input\/datasetdentifricio\/images\/{sample_id}.jpg'\nsample_annot_path = f'\/kaggle\/input\/datasetdentifricio\/annotations\/{sample_id}.xml'","6f49e999":"sample_image = Image.open(sample_image_path)\nsample_image","31a6fe73":"with open(sample_annot_path) as annot_file:\n    print(''.join(annot_file.readlines()))","c713ed56":"tree = ET.parse(sample_annot_path)\nroot = tree.getroot()\n\nsample_annotations = []\n\nfor neighbor in root.iter('bndbox'):\n    xmin = int(neighbor.find('xmin').text)\n    ymin = int(neighbor.find('ymin').text)\n    xmax = int(neighbor.find('xmax').text)\n    ymax = int(neighbor.find('ymax').text)\n    \n    sample_annotations.append([xmin, ymin, xmax, ymax])\n    \nprint('Ground-truth annotations:', sample_annotations)","34bca559":"sample_image_annotated = sample_image.copy()\n\nimg_bbox = ImageDraw.Draw(sample_image_annotated)\n\nfor bbox in sample_annotations:\n    img_bbox.rectangle(bbox, outline=\"white\") \n    \nsample_image_annotated","9cce4453":"model = torchvision.models.detection.fasterrcnn_resnet50_fpn(\n    pretrained=True, progress=True, num_classes=91, pretrained_backbone=True)\n\nmodel","6822eeff":"model.eval()\n\nnp_sample_image = np.array(sample_image.convert(\"RGB\"))\n\ntransformed_img = torchvision.transforms.transforms.ToTensor()(\n        torchvision.transforms.ToPILImage()(np_sample_image))\n\nresult = model([transformed_img])\n\nresult","dbbb5cc7":"COCO_INSTANCE_CATEGORY_NAMES = [\n    'toothpaste','__background__', 'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus',\n    'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'N\/A', 'stop sign',\n    'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',\n    'elephant', 'bear', 'zebra', 'giraffe', 'N\/A', 'backpack', 'umbrella', 'N\/A', 'N\/A',\n    'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball',\n    'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket',\n    'bottle', 'N\/A', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl',\n    'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza',\n    'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'N\/A', 'dining table',\n    'N\/A', 'N\/A', 'toilet', 'N\/A', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone',\n    'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'N\/A', 'book',\n    'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush']","04c9c646":"toothpaste_id = 1\ntoothpaste_boxes = [x.detach().numpy().tolist() for i, x in enumerate(result[0]['boxes']) if result[0]['labels'][i] == toothpaste_id]\ntoothpaste_boxes","536e835a":"sample_image_annotated = sample_image.copy()\n\nimg_bbox = ImageDraw.Draw(sample_image_annotated)\n\nfor bbox in sample_annotations:\n    img_bbox.rectangle(bbox, outline=\"white\") \n\nfor bbox in toothpaste_boxes:\n    x1, x2, x3, x4 = map(int, bbox)\n    print(x1, x2, x3, x4)\n    img_bbox.rectangle([x1, x2, x3, x4], outline=\"red\") \n\nsample_image_annotated","e1f12a5b":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. Mar\u00edlia Prata, @mpwolke was here' )","4bcdfdae":"#Write the `sample_id` number with ticks, otherwise it read that number without underscore.\n\nAnd will result in an error.","35e82e55":"#I included tootpaste in that list.","07b4e516":"#Why that toothpaste is on the floor? Multi Protezioni (multiprotection) for the floor too? ","a235cb9f":"#Download Faster R-CNN","712bbc2f":"#Codes by Mateusz Kwasniak https:\/\/www.kaggle.com\/mtszkw\/inference-with-pretrained-faster-r-cnn-pytorch","5b610c96":"#Draw Image With Annotations","bef432ca":"#Choose a name in COCO then check what's the position, i.e Toothpaste is the 17 in the list above. (I included toothpaste in that dataset, in the 1st position)","2c8c678f":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQ0e6GS2jbWrKNVC3UY8Lqm3H3ggyU60a4cyA&usqp=CAU)nca.ufma.br","8df95c32":"#Draw Predictions"}}