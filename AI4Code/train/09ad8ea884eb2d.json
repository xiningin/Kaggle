{"cell_type":{"d5343015":"code","c0627a87":"code","3ee79729":"code","73a30fbd":"code","d0f0db2d":"code","9a9e3589":"code","c1de1931":"code","383a126d":"code","b91daaca":"code","d1237789":"code","163948e8":"code","d7701a03":"code","a53b60e3":"code","9152d65e":"code","c159a7d0":"code","6cc9b778":"code","71da5859":"code","ec5c5fbb":"code","ef979fac":"code","070c56d1":"code","9d8ac51f":"code","40417d8b":"code","51e4250b":"code","10f9d089":"code","c76e2e94":"code","2fc2c640":"code","ccf15cba":"code","2a338c91":"code","dc6e9886":"code","b5994f82":"code","db190851":"code","e3a1282d":"code","06e2bd9a":"code","59bd0994":"code","f310ccf0":"code","b3d26bbe":"code","a03d77a4":"code","27e9bf12":"code","890e4f0c":"code","236287e0":"code","e3d2ed8f":"code","94607f13":"code","db767976":"code","2965fe68":"code","e4d65878":"code","cc2c57c6":"code","972b8f77":"code","719d2278":"code","af08fce1":"code","35e07adb":"code","307453db":"code","19785462":"code","21e92afd":"code","e40d891c":"code","3f783674":"code","1cdfc202":"code","6d627c75":"code","4b7a63c6":"code","b17702b0":"code","230834e3":"code","0c19b8d6":"code","4ef5cfd8":"code","8b70e25c":"code","9ce951c0":"code","9f0408d2":"code","487fd321":"code","7cb3ae8a":"code","dc755b09":"code","7ddf9299":"code","5a352e89":"code","b96cb973":"code","01701113":"code","8ee86930":"code","ca4dbccb":"code","ef36d8a5":"code","ed18a534":"code","9a0b213b":"code","58e228eb":"code","02e946d7":"code","23aa0abe":"code","2d398ec9":"code","9269a5fe":"code","8d70ad6e":"code","0bb0dad5":"code","cec654a3":"code","f989a3b9":"code","c3d25322":"code","ed39cf9b":"code","05da4d93":"code","32d389bb":"code","d1889a7b":"code","523eb279":"code","b39a5ea4":"code","020ad2c4":"code","7625320e":"code","1f6b9dac":"code","b23bf478":"code","a6cc31fc":"code","43b33210":"code","966acb77":"code","76e4994a":"code","e479cf12":"code","d27c6201":"code","eed9e320":"code","daed3a34":"code","228c7dd7":"code","340a86a7":"code","f9df5e69":"code","8e918c9d":"code","70c66b60":"code","0c422b8e":"code","1dc77e03":"code","93f84d45":"code","aba614c3":"code","76e0b489":"code","af68e506":"code","f178b501":"code","83cb527c":"code","76e8e9c3":"code","aa569c12":"code","5577870a":"code","f6f5cefa":"code","960fe2fd":"code","0e75e2b1":"code","d1a8c222":"code","03b0a48e":"code","0f925654":"code","31ed285d":"code","c5e463ab":"code","d1b2bc28":"code","b51c537e":"code","cf62fa34":"code","4c919555":"code","d4096155":"code","671a8fe0":"markdown","439d2035":"markdown","a43632e0":"markdown","c29c08de":"markdown","33e7451e":"markdown","1993846b":"markdown","db340707":"markdown","068adc59":"markdown","73738dfe":"markdown","36994d78":"markdown","6572e3d2":"markdown","1f0712ed":"markdown","122d6e01":"markdown","2e63b6fa":"markdown","4f1bbeec":"markdown","2bfcf742":"markdown","c000e50d":"markdown","bd520f34":"markdown","07dc7dad":"markdown","c7e7cdbd":"markdown","753b77dc":"markdown","b0f94c74":"markdown","37a62f82":"markdown","d46fb03c":"markdown","a6c94452":"markdown","97a5962a":"markdown","d7e8369e":"markdown","60b6c471":"markdown","1b970a1b":"markdown","7a8334b2":"markdown","c24e1cc5":"markdown"},"source":{"d5343015":"import pandas as pd\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nimport urllib\nfrom geopy.distance import geodesic","c0627a87":"data = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')","3ee79729":"data.head(5)","73a30fbd":"len(data)","d0f0db2d":"data[[\"price\",\"latitude\",\"longitude\",\"minimum_nights\",\"number_of_reviews\",\"reviews_per_month\",\"calculated_host_listings_count\",\"availability_365\"]].describe()","9a9e3589":"data.isnull().sum()","c1de1931":"data.price.describe()","383a126d":"data = data[data['price']>0]\ndata.head(5)","b91daaca":"data['price'].describe()","d1237789":"len(data)","163948e8":"data1 = data[data['price']<= data['price'].mean() + 3*data['price'].std()]\ndata1.head(5)","d7701a03":"len(data1)","a53b60e3":"data1.price.describe()","9152d65e":"data1.groupby('neighbourhood_group')['id'].agg(['count'])","c159a7d0":"data1.groupby('neighbourhood_group')['id'].agg(['count']).plot(kind=\"bar\")","6cc9b778":"plt.figure(figsize=(15,15))\nnyc_img=plt.imread(urllib.request.urlopen('https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/ec\/Neighbourhoods_New_York_City_Map.PNG'))\nplt.imshow(nyc_img,zorder=0,extent=[-74.258, -73.7, 40.49,40.92])\nsns.scatterplot(x=data1['longitude'], y=data1['latitude'], hue='neighbourhood_group',s=20, data=data1)\nplt.legend()\nplt.show()","71da5859":"sns.set(rc={'figure.figsize':(15,10)})\nsns.distplot(data1['price'],kde_kws={\"label\": 'price'}, bins=20)","ec5c5fbb":"sns.set(rc={'figure.figsize':(15,10)})\nfor groups in data1.neighbourhood_group.unique():\n    sns.distplot(data1.price[data1['neighbourhood_group']==groups],kde_kws={\"label\": groups}, bins=20)","ef979fac":"f = plt.figure(figsize=(10,30))\nfor i, groups in enumerate(data1.neighbourhood_group.unique()):\n    f.add_subplot(5, 1, i+1)\n    sns.distplot(data1.price[data1['neighbourhood_group']==groups],color=\"r\" ,kde_kws={\"label\": groups}, bins=20)","070c56d1":"data1['price_log_e'] = np.log(data1['price'])\ndata1.head(5)","9d8ac51f":"sns.set(rc={'figure.figsize':(15,10)})\nsns.distplot(data1['price_log_e'],kde_kws={\"label\": 'price in log e'}, bins=20)","40417d8b":"stats.normaltest(data1[\"price_log_e\"])","51e4250b":"data1['price_log_10'] = np.log10(data1['price'])\ndata1.head(5)","10f9d089":"sns.set(rc={'figure.figsize':(15,10)})\nsns.distplot(data1['price_log_10'],kde_kws={\"label\": 'price in log 10'}, bins=20)","c76e2e94":"stats.normaltest(data1[\"price_log_10\"])","2fc2c640":"sns.set(rc={'figure.figsize':(15,10)})\nfor groups in data1.neighbourhood_group.unique():\n    sns.distplot(data1.price_log_10[data1['neighbourhood_group']==groups],kde_kws={\"label\": groups}, bins=20)","ccf15cba":"f = plt.figure(figsize=(10,30))\nfor i, groups in enumerate(data1.neighbourhood_group.unique()):\n    f.add_subplot(5, 1, i+1)\n    sns.distplot(data1.price_log_10[data1['neighbourhood_group']==groups],color=\"r\" ,kde_kws={\"label\": groups}, bins=20)\n    print('Test for Normal Distribution for ' , groups)\n    print('------------------------------------------')\n    print(stats.normaltest(data1[\"price_log_10\"]))\n    print('------------------------------------------')","2a338c91":"plt.figure(figsize=(15,8))\nsns.violinplot(\"neighbourhood_group\", \"price_log_10\", data=data1)","dc6e9886":"plt.figure(figsize=(15,8))\nsns.boxplot(\"neighbourhood_group\", \"price_log_10\", data=data1)","b5994f82":"fstat, pval = stats.f_oneway(*[data1.price_log_10[data1.neighbourhood_group == s]\nfor s in data1.neighbourhood_group.unique()])\nprint(\"Oneway Anova log10(price) ~ neighbourhood_group F=%.2f, p-value=%E\" % (fstat, pval))","db190851":"data1[[\"neighbourhood_group\",'price']].groupby(\"neighbourhood_group\").describe()","e3a1282d":"plt.figure(figsize=(15,8))\nsns.violinplot(\"room_type\", \"price_log_10\", data=data1)","06e2bd9a":"plt.figure(figsize=(15,8))\nsns.boxplot(\"room_type\", \"price_log_10\", data=data1)","59bd0994":"fstat, pval = stats.f_oneway(*[data1.price_log_10[data1.room_type == s]\nfor s in data1.room_type.unique()])\nprint(\"Oneway Anova log10(price) ~ room_type F=%.2f, p-value=%E\" % (fstat, pval))","f310ccf0":"room = data1.groupby('room_type')['id'].agg(['count'])\nroom.head()","b3d26bbe":"room.reset_index(level=0, inplace=True)\nroom.head()","a03d77a4":"room = room[['room_type','count']]","27e9bf12":"plt.pie(\n    room['count'],\n    labels=room['room_type'],\n    shadow=False,\n    startangle=90,\n    autopct='%1.1f%%',\n    )\n\nplt.axis('equal')\n\nplt.tight_layout()\nplt.show()","890e4f0c":"plt.figure(figsize=(15,15))\nnyc_img=plt.imread(urllib.request.urlopen('https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/ec\/Neighbourhoods_New_York_City_Map.PNG'))\nplt.imshow(nyc_img,zorder=0,extent=[-74.258, -73.7, 40.49,40.92])\nsns.scatterplot(x=data1['longitude'], y=data1['latitude'], hue='room_type',s=20, data=data1)\nplt.legend()\nplt.show()","236287e0":"data1.groupby('room_type')['id'].agg(['count']).plot(kind=\"bar\")","e3d2ed8f":"data1.head(5)","94607f13":"data1['All_year_availability'] = 0","db767976":"for i in data1.index.values:\n    if data1['availability_365'][i] == 365:\n        data1['All_year_availability'][i] = 1","2965fe68":"data1.head(5)","e4d65878":"plt.figure(figsize=(15,15))\nnyc_img=plt.imread(urllib.request.urlopen('https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/ec\/Neighbourhoods_New_York_City_Map.PNG'))\nplt.imshow(nyc_img,zorder=0,extent=[-74.258, -73.7, 40.49,40.92])\nsns.scatterplot(x=data1['longitude'], y=data1['latitude'], hue='All_year_availability',s=20, data=data1)\nplt.legend()\nplt.show()","cc2c57c6":"sns.violinplot(\"neighbourhood_group\", \"price_log_10\", hue=\"All_year_availability\",data=data1)","972b8f77":"sns.boxplot(\"neighbourhood_group\", \"price_log_10\", hue=\"All_year_availability\",data=data1)","719d2278":"sns.violinplot(\"neighbourhood_group\", \"price_log_10\", hue=\"All_year_availability\",data=data1 , split=True)","af08fce1":"sns.violinplot(\"All_year_availability\", \"price_log_10\",data=data1)","35e07adb":"sns.violinplot(\"All_year_availability\", \"price_log_10\", hue=\"neighbourhood_group\",data=data1)","307453db":"sns.boxplot(\"All_year_availability\", \"price_log_10\", hue=\"neighbourhood_group\",data=data1)","19785462":"sns.boxplot(\"All_year_availability\", \"price_log_10\",data=data1)","21e92afd":"stats.ttest_rel(data1['All_year_availability'],data1[\"price_log_10\"])","e40d891c":"data1['minimum_nights'].describe()","3f783674":"sns.set(rc={'figure.figsize':(30,20)})\nsns.lmplot(\"minimum_nights\",\"price_log_10\", hue=\"neighbourhood_group\", data=data1)","1cdfc202":"sns.set(rc={'figure.figsize':(30,20)})\nsns.lmplot(\"minimum_nights\",\"price_log_10\", hue=\"room_type\", data=data1)","6d627c75":"sns.lmplot(\"minimum_nights\", \"price_log_10\", hue=\"All_year_availability\",data=data1)","4b7a63c6":"data1.isnull().sum()","b17702b0":"data1[data1['reviews_per_month'].isnull()]","230834e3":"data1[['reviews_per_month','neighbourhood_group']] = data1[['reviews_per_month','neighbourhood_group']].fillna(value=0)","0c19b8d6":"data1.reviews_per_month.describe()","4ef5cfd8":"data1.isnull().sum()","8b70e25c":"plt.figure(i,figsize=(20,15))\ncorrelation_matrix = data1[[\"price\",'price_log_10',\"minimum_nights\",\"All_year_availability\",\"number_of_reviews\",\"reviews_per_month\"]].corr().round(2)\nsns.heatmap(data=correlation_matrix ,center=0 , linewidths=.7, annot=True)","9ce951c0":"temp = data1[data1['reviews_per_month']>0]\ntemp.head(5)","9f0408d2":"temp.describe()","487fd321":"plt.figure(figsize=(15,8))\nsns.violinplot(\"neighbourhood_group\", \"reviews_per_month\", data=temp)","7cb3ae8a":"plt.figure(figsize=(15,10))\nsns.boxplot(\"neighbourhood_group\", \"reviews_per_month\", data=temp)","dc755b09":"fstat, pval = stats.f_oneway(*[temp.reviews_per_month[temp.neighbourhood_group == s]\nfor s in temp.neighbourhood_group.unique()])\nprint(\"Oneway Anova reviews_per_month ~ neighbourhood_group F=%.2f, p-value=%E\" % (fstat, pval))","7ddf9299":"plt.figure(i,figsize=(20,15))\ncorrelation_matrix = temp[[\"price\",'price_log_10',\"minimum_nights\",\"All_year_availability\",\"number_of_reviews\",\"reviews_per_month\"]].corr().round(2)\nsns.heatmap(data=correlation_matrix ,center=0 , linewidths=.7, annot=True)","5a352e89":"stats.stats.spearmanr(data1['reviews_per_month'],data1['price_log_10'])","b96cb973":"data1.head(5)","01701113":"data1.reset_index()","8ee86930":"duplicate_host = data1[data1[['host_id']].duplicated()]\nduplicate_host.head(5)","ca4dbccb":"duplicate = duplicate_host.groupby('host_id')['id'].agg(['count']).sort_values(by=['count'],ascending=False)\nduplicate.head(25)","ef36d8a5":"duplicate.reset_index(level=0, inplace=True)","ed18a534":"frames = []\ncounter = 0\nfor ids in duplicate[\"host_id\"]:\n    \n    \n    group_list = []\n    num_list = []\n    \n    temp = data1[data1['host_id'] == ids]\n    price = temp.price.sum()\n    avarage = price\/len(temp)\n    t = temp.groupby('neighbourhood_group')['id'].agg(['count'])\n    t.reset_index(level=0, inplace=True)\n    for i in range(len(t)):\n        group_name = t[\"neighbourhood_group\"][i]\n        if group_name not in group_list:\n            group_list.append(group_name)\n            num_group = t['count'][i]\n            num_list.append(num_group)\n        \n    if 'Brooklyn' not in group_list:\n        group_list.append(\"Brooklyn\")\n        num_list.append(0)\n    if 'Manhattan' not in group_list:\n        group_list.append(\"Manhattan\")\n        num_list.append(0)\n    if 'Queens' not in group_list:\n        group_list.append(\"Queens\")\n        num_list.append(0)\n    if 'Staten Island' not in group_list:\n        group_list.append(\"Staten Island\")\n        num_list.append(0)\n    if 'Bronx' not in group_list:\n        group_list.append(\"Bronx\")\n        num_list.append(0)\n        \n    dict = {'host_id':[ids],'total_price':[price],'average_price':[avarage],'num':[len(temp)]}\n    for i in range(5):\n        d = {group_list[i]:[num_list[i]]}\n        dict.update(d)\n    df_temp = pd.DataFrame(dict,index=[counter])   \n    frames.append(df_temp)\n    counter = counter + 1\nduplicate_price = pd.concat(frames)\nduplicate_price.head(15)","9a0b213b":"nyc_metro = pd.read_csv('..\/input\/newyorkcityairbnblocations\/NYC_Transit_Subway_Entrance_And_Exit_Data.csv')\nnyc_metro.head(5)","58e228eb":"nyc_metro_location = nyc_metro[['Entrance Latitude','Entrance Longitude']]\nnyc_metro_location.head(5)","02e946d7":"nyc_metro_location.describe()","23aa0abe":"data1 = data1.reset_index(drop=True)","2d398ec9":"data1.head(5)","9269a5fe":"# data1['distance_metro_entrance'] = 0.0","8d70ad6e":"# for i in range(len(data1)):\n#     Latitude = data1['latitude'][i]\n#     Longitude = data1['longitude'][i]\n#     min_distance = 9999999\n#     for j in range(len(nyc_metro_location)):\n#         metro_Latitude = nyc_metro_location['Entrance Latitude'][j]\n#         metro_Longitude = nyc_metro_location['Entrance Longitude'][j]\n#         origin = (Latitude, Longitude)\n#         dist = (metro_Latitude, metro_Longitude)\n#         distance = geodesic(origin, dist).meters\n#         if distance <= min_distance:\n#             min_distance = distance\n#     data1['distance_metro_entrance'][i] = round(min_distance, 2)\n#     if i%100 == 0:\n#         print(i,round(min_distance, 2))","0bb0dad5":"#data1.head(5)","cec654a3":"# data1.to_csv('distance_metro.csv')","f989a3b9":"metro_distance = pd.read_csv('..\/input\/newyorkcityairbnblocations\/distance_metro.csv')","c3d25322":"metro_distance.head(5)","ed39cf9b":"metro_distance['distance_metro_entrance'].describe()","05da4d93":"plt.figure(figsize=(15,10))\nsns.boxplot(\"neighbourhood_group\", \"distance_metro_entrance\", data=metro_distance)","32d389bb":"plt.figure(figsize=(15,8))\nsns.violinplot(\"neighbourhood_group\", \"distance_metro_entrance\", data=metro_distance)","d1889a7b":"plt.figure(i,figsize=(20,15))\ncorrelation_matrix = metro_distance[[\"price\",'price_log_10',\"minimum_nights\",\"All_year_availability\",\"number_of_reviews\",\"reviews_per_month\",\"distance_metro_entrance\"]].corr().round(2)\nsns.heatmap(data=correlation_matrix ,center=0 , linewidths=.7, annot=True)","523eb279":"stats.stats.spearmanr(metro_distance['distance_metro_entrance'],metro_distance['price_log_10'])","b39a5ea4":"sns.set(rc={'figure.figsize':(30,20)})\nsns.lmplot(\"price_log_10\",\"distance_metro_entrance\", hue=\"neighbourhood_group\", data=metro_distance)","020ad2c4":"sns.set(rc={'figure.figsize':(30,20)})\nsns.lmplot(\"price_log_10\",\"distance_metro_entrance\", hue=\"room_type\", data=metro_distance)","7625320e":"stats.stats.spearmanr(metro_distance['distance_metro_entrance'],metro_distance['minimum_nights'])","1f6b9dac":"sns.set(rc={'figure.figsize':(30,20)})\nsns.lmplot(\"minimum_nights\",\"distance_metro_entrance\", hue=\"neighbourhood_group\", data=metro_distance)","b23bf478":"sns.set(rc={'figure.figsize':(30,20)})\nsns.lmplot(\"minimum_nights\",\"distance_metro_entrance\", hue=\"room_type\", data=metro_distance)","a6cc31fc":"f = plt.figure(figsize=(10,30))\nfor i, groups in enumerate(metro_distance.neighbourhood_group.unique()):\n    f.add_subplot(5, 1, i+1)\n    sns.distplot(metro_distance.distance_metro_entrance[metro_distance['neighbourhood_group']==groups],color=\"r\" ,kde_kws={\"label\": groups}, bins=20)\n    print('Test for Normal Distribution for ' , groups)\n    print('------------------------------------------')\n    print(stats.normaltest(metro_distance[\"distance_metro_entrance\"]))\n    print('------------------------------------------')","43b33210":"#data1['distance_from_central_station'] = 0.0","966acb77":"#data1.head(5)","76e4994a":"# central_station_latitude = 40.7527\n# central_station_longitude = -73.9772\n# origin = (central_station_latitude,central_station_longitude)\n# for i in range(len(data1)):\n#     Latitude = data1['latitude'][i]\n#     Longitude = data1['longitude'][i]\n#     dist = (Latitude,Longitude)\n#     min_distance = geodesic(origin, dist).meters\n#     data1['distance_from_central_station'][i] = round(min_distance, 2)\n#     if i%100 == 0:\n#         print(i,round(min_distance, 2))","e479cf12":"#data1.to_csv('distance_from_central_station.csv')","d27c6201":"data1 = pd.read_csv('..\/input\/newyorkcityairbnbdistance\/distance_from_central_station.csv')","eed9e320":"plt.figure(figsize=(15,10))\nsns.boxplot(\"neighbourhood_group\", \"distance_from_central_station\", data=data1)","daed3a34":"plt.figure(figsize=(15,8))\nsns.violinplot(\"neighbourhood_group\", \"distance_from_central_station\", data=data1)","228c7dd7":"plt.figure(figsize=(15,8))\nsns.violinplot(\"room_type\", \"distance_from_central_station\", data=data1)","340a86a7":"plt.figure(figsize=(15,10))\nsns.boxplot(\"room_type\", \"distance_from_central_station\", data=data1)","f9df5e69":"plt.figure(figsize=(15,10))\nsns.boxplot(\"All_year_availability\", \"distance_from_central_station\", data=data1)","8e918c9d":"plt.figure(figsize=(15,10))\nsns.boxplot(\"All_year_availability\", \"distance_from_central_station\",hue = 'room_type', data=data1)","70c66b60":"plt.figure(figsize=(15,10))\nsns.boxplot(\"All_year_availability\", \"distance_from_central_station\",hue = 'neighbourhood_group', data=data1)","0c422b8e":"stats.stats.spearmanr(data1['distance_from_central_station'],data1['price_log_10'])","1dc77e03":"plt.figure(i,figsize=(20,15))\ncorrelation_matrix = data1[[\"price\",'price_log_10',\"minimum_nights\",\"All_year_availability\",\"number_of_reviews\",\"reviews_per_month\",\"distance_from_central_station\"]].corr().round(2)\nsns.heatmap(data=correlation_matrix ,center=0 , linewidths=.7, annot=True)","93f84d45":"sns.set(rc={'figure.figsize':(30,20)})\nsns.lmplot(\"price_log_10\",\"distance_from_central_station\", hue=\"neighbourhood_group\", data=data1)","aba614c3":"sns.set(rc={'figure.figsize':(30,20)})\nsns.lmplot(\"price_log_10\",\"distance_from_central_station\",line_kws={'color': 'red'}, data=data1)","76e0b489":"sns.set(rc={'figure.figsize':(30,20)})\nsns.lmplot(\"price_log_10\",\"distance_from_central_station\", hue=\"room_type\", data=data1)","af68e506":"f = plt.figure(figsize=(10,30))\nfor i, groups in enumerate(data1.neighbourhood_group.unique()):\n    f.add_subplot(5, 1, i+1)\n    sns.distplot(data1.distance_from_central_station[data1['neighbourhood_group']==groups],color=\"r\" ,kde_kws={\"label\": groups}, bins=20)\n    print('Test for Normal Distribution for ' , groups)\n    print('------------------------------------------')\n    print(stats.normaltest(data1[\"distance_from_central_station\"]))\n    print('------------------------------------------')","f178b501":"data1['distance_from_JFK_airport'] = 0.0","83cb527c":"data1.head(5)","76e8e9c3":"JFK_airport_latitude = 40.6413\nJFK_airport_longitude = -73.7781\norigin = (JFK_airport_latitude,JFK_airport_longitude)\nfor i in range(len(data1)):\n    Latitude = data1['latitude'][i]\n    Longitude = data1['longitude'][i]\n    dist = (Latitude,Longitude)\n    min_distance = geodesic(origin, dist).meters\n    data1['distance_from_JFK_airport'][i] = round(min_distance, 2)\n    if i%100 == 0:\n        print(i,round(min_distance, 2))","aa569c12":"plt.figure(figsize=(15,10))\nsns.boxplot(\"neighbourhood_group\", \"distance_from_JFK_airport\", data=data1)","5577870a":"plt.figure(figsize=(15,8))\nsns.violinplot(\"neighbourhood_group\", \"distance_from_JFK_airport\", data=data1)","f6f5cefa":"plt.figure(figsize=(15,8))\nsns.violinplot(\"room_type\", \"distance_from_JFK_airport\", data=data1)","960fe2fd":"plt.figure(figsize=(15,10))\nsns.boxplot(\"room_type\", \"distance_from_JFK_airport\", data=data1)","0e75e2b1":"plt.figure(figsize=(15,10))\nsns.boxplot(\"All_year_availability\", \"distance_from_JFK_airport\", data=data1)","d1a8c222":"plt.figure(figsize=(15,10))\nsns.boxplot(\"All_year_availability\", \"distance_from_JFK_airport\",hue = 'room_type', data=data1)","03b0a48e":"f = plt.figure(figsize=(10,30))\nfor i, groups in enumerate(data1.neighbourhood_group.unique()):\n    f.add_subplot(5, 1, i+1)\n    sns.distplot(data1.distance_from_JFK_airport[data1['neighbourhood_group']==groups],color=\"r\" ,kde_kws={\"label\": groups}, bins=20)\n    print('Test for Normal Distribution for ' , groups)\n    print('------------------------------------------')\n    print(stats.normaltest(data1[\"distance_from_JFK_airport\"]))\n    print('------------------------------------------')","0f925654":"stats.stats.spearmanr(data1['distance_from_JFK_airport'],data1['minimum_nights'])","31ed285d":"sns.set(rc={'figure.figsize':(30,20)})\nsns.lmplot(\"minimum_nights\",\"distance_from_JFK_airport\", hue=\"neighbourhood_group\", data=data1)","c5e463ab":"sns.set(rc={'figure.figsize':(30,20)})\nsns.lmplot(\"minimum_nights\",\"distance_from_JFK_airport\", hue=\"room_type\", data=data1)","d1b2bc28":"sns.set(rc={'figure.figsize':(30,20)})\nsns.lmplot(\"minimum_nights\",\"distance_from_JFK_airport\", hue=\"All_year_availability\", data=data1)","b51c537e":"stats.stats.spearmanr(data1['distance_from_JFK_airport'],data1['price_log_10'])","cf62fa34":"plt.figure(i,figsize=(20,15))\ncorrelation_matrix = data1[[\"price\",'price_log_10',\"minimum_nights\",\"All_year_availability\",\"number_of_reviews\",\"reviews_per_month\",\"distance_from_JFK_airport\"]].corr().round(2)\nsns.heatmap(data=correlation_matrix ,center=0 , linewidths=.7, annot=True)","4c919555":"sns.set(rc={'figure.figsize':(30,20)})\nsns.lmplot(\"price_log_10\",\"distance_from_JFK_airport\", hue=\"neighbourhood_group\", data=data1)","d4096155":"sns.set(rc={'figure.figsize':(30,20)})\nsns.lmplot(\"price_log_10\",\"distance_from_JFK_airport\", hue=\"room_type\", data=data1)","671a8fe0":"### Anova test","439d2035":"### find distance from JFK airport","a43632e0":"### Data Cleaning\nclean records with price = 0","c29c08de":"### Check Null Data","33e7451e":"### realation between minimum_nights & distance_from_JFK_airport","1993846b":"### realation between minimum_nights & distance_metro_entrance","db340707":"### Basic Stat Report from numeric Columns","068adc59":"### check distribution of price","73738dfe":"### realation between price_log_10 & distance_from_JFK_airport","36994d78":"### Transfer price to $\\ln^{price}$ to make the dist , Normal\nwe want to adjust a function to make price data , normal dist.","6572e3d2":"### Check Distribution  of price in each Neighbourhood group","1f0712ed":" ### realation between price_log_10 & distance_from_central_station","122d6e01":"### T-Test","2e63b6fa":"### read data","4f1bbeec":"### find distance of each home from nearest metro enterance\n\nwe save data in distinct csv because this code take 5 hours to run.","2bfcf742":"### realation between room_type & price_log_10","c000e50d":"### realation between price_log_10 & distance_metro_entrance","bd520f34":"### Add new data NY metro station location ","07dc7dad":"### realation between reviews_per_month & price_log_10","c7e7cdbd":"### find outlier records in price\nif \n\\begin{equation*}\ndata > mean + 3*std \n\\end{equation*}\nwe know it as outlier","753b77dc":"Define new variable {All_year_availability}\n\nAll_year_availability = $\\begin{cases} 1 ~ if ~ availability365 = 365 \\\\\n0 ~ otherwise\n\\end{cases}$\n\nthis var say that could a person books in all days of year or not","b0f94c74":"### find distance from NY centeral Station","37a62f82":"### realation between neighbourhood_group & price_log_10","d46fb03c":"### Clean reviews_per_month\nfill null data with zero","a6c94452":"### find duplicate hosts by host_id","97a5962a":"### realation between reviews_per_month & neighbourhood_group","d7e8369e":"### Transfer price to $\\log_{10}^{price}$ to make the dist , Normal\nwe want to adjust a function to make price data , normal dist.","60b6c471":"### check number of records","1b970a1b":"### realation between All_year_availability & price_log_10","7a8334b2":"### realation between minimum_nights & price_log_10","c24e1cc5":"### realation between neighbourhood_group & distance_metro_entrance"}}