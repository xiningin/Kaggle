{"cell_type":{"15a48e72":"code","1f02c82f":"code","75a0b068":"code","51bd276c":"code","238f142d":"code","4e641d7f":"code","f095d3b3":"code","906f2581":"code","4d336f7b":"code","e50e6842":"code","4379676d":"code","26899a9b":"code","35f8a647":"code","2a370697":"code","a082888b":"code","6dfc74fb":"code","187d48e6":"code","9a38f12b":"code","a914dbc3":"code","926f1be2":"code","2560ac57":"code","54ab4cd2":"code","25b419ec":"code","f3c4682a":"code","fc77ad56":"code","09fb2b5a":"code","8724b9c0":"code","bec7a4e0":"code","3bc3a7d5":"code","71ea1106":"code","4e68ae1b":"code","82faf88c":"code","5425e730":"code","569d7938":"code","0fbe144e":"code","56a52fba":"code","b491d290":"code","3db958d2":"code","9ea84ac4":"code","e69d1d68":"code","3da1ca3d":"code","14727506":"code","b5f67a9e":"code","88b2652a":"code","0c22861c":"code","8c5ab2d0":"code","5e6d7469":"code","deff1f61":"code","ab978eb1":"code","6043312c":"code","5ba77812":"code","813880b4":"code","4a52447d":"code","b0c163fb":"code","909d465f":"code","bf5013da":"code","c93902de":"code","ee06777d":"code","49115f62":"code","6f90a7b9":"code","7a74cbe8":"code","dba5f689":"code","276e3ff1":"code","3a3fc6cd":"code","e01c46c6":"code","9b39c71c":"code","f3fb1385":"code","afc8d9fe":"markdown","d39d9654":"markdown","6f766936":"markdown","201c5cde":"markdown","87277fc4":"markdown","0d0f9ca0":"markdown","be1a6751":"markdown","29d6b903":"markdown","b48b83db":"markdown","090907c1":"markdown","e39ee084":"markdown","48d10730":"markdown","b680ae14":"markdown","2852044e":"markdown","30d0dd8a":"markdown","d248fecc":"markdown","2d31c641":"markdown","73d300fd":"markdown","eb463506":"markdown","1653aa08":"markdown","77546745":"markdown","ece94efd":"markdown","2f9b8554":"markdown","e5ddef16":"markdown","c880228c":"markdown","49717f8f":"markdown","b4183b79":"markdown","689def91":"markdown","5f3f9bdf":"markdown","80b54d3c":"markdown","37f7c0cf":"markdown","1a25e228":"markdown","a3674c2b":"markdown","00de5003":"markdown","3adf5cc0":"markdown","d51ef2ec":"markdown","76534b08":"markdown","59e8011c":"markdown","f8d6f20c":"markdown","ad37ce7b":"markdown","75e89ff2":"markdown","fe2ea288":"markdown","1430fe24":"markdown","d60899c3":"markdown"},"source":{"15a48e72":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f02c82f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings # Ignores any warning\nwarnings.filterwarnings(\"ignore\")\n!ls ..\/input\/bigmart-sales-data\ntrain = pd.read_csv(\"..\/input\/bigmart-sales-data\/Train.csv\") \ntest = pd.read_csv(\"..\/input\/bigmart-sales-data\/Test.csv\") ","75a0b068":"train.head()","51bd276c":"train.info()","238f142d":"train.describe()","4e641d7f":"train.isnull().sum()","f095d3b3":"idsUnique = len(set(train.Item_Identifier))\nidsTotal = train.shape[0]\nidsDupli = idsTotal - idsUnique\nprint(\"There are \" + str(idsDupli) + \" duplicate IDs for \" + str(idsTotal) + \" total entries\")\n","906f2581":"train['Item_Fat_Content'].unique()","4d336f7b":"train['Outlet_Establishment_Year'].unique().max()\n\ntrain['Outlet_Establishment_Year'].unique().min()","e50e6842":"plt.style.use('fivethirtyeight')\nplt.figure(figsize=(12,7))\nsns.distplot(train.Item_Outlet_Sales, bins = 25)\nplt.ticklabel_format(style='plain', axis='x', scilimits=(0,1))\nplt.xlabel(\"Item_Outlet_Sales\")\nplt.ylabel(\"Number of Sales\")\nplt.title(\"Item_Outlet_Sales Distribution\")","4379676d":"print (\"Skew is:\", train.Item_Outlet_Sales.skew())\nprint(\"Kurtosis: %f\" % train.Item_Outlet_Sales.kurt())\n","26899a9b":"numeric_features = train.select_dtypes(include=[np.number])\nnumeric_features.dtypes","35f8a647":"corr = numeric_features.corr()\nprint (corr['Item_Outlet_Sales'].sort_values(ascending=False))\n","2a370697":"f, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corr, vmax=.8, square=True);\n","a082888b":"train.Item_Fat_Content.value_counts()","6dfc74fb":"sns.countplot(train.Item_Fat_Content)","187d48e6":"train.Item_Type.value_counts()","9a38f12b":"sns.countplot(train.Item_Type)\nplt.xticks(rotation=90)","a914dbc3":"train.Outlet_Size.value_counts()","926f1be2":"sns.countplot(train.Outlet_Size)","2560ac57":"train.Outlet_Location_Type.value_counts()","54ab4cd2":"sns.countplot(train.Outlet_Location_Type.value_counts())","25b419ec":"train.Outlet_Type.value_counts()","f3c4682a":"sns.countplot(train.Outlet_Type)\nplt.xticks(rotation=90)","fc77ad56":"plt.figure(figsize=(12,7))\nplt.xlabel(\"Item_Weight\")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Item_Weight and Item_Outlet_Sales Analysis\")\nplt.plot(train.Item_Weight, train[\"Item_Outlet_Sales\"],'.', alpha = 0.3)","09fb2b5a":"plt.figure(figsize=(12,7))\nplt.xlabel(\"Item_Visibility\")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Item_Visibility and Item_Outlet_Sales Analysis\")\nplt.plot(train.Item_Visibility, train[\"Item_Outlet_Sales\"],'.', alpha = 0.3)","8724b9c0":"plt.figure(figsize=(12,7))\nplt.xlabel(\"Item_MRP\")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Item_MRP and Item_Outlet_Sales Analysis\")\nplt.plot(train.Item_MRP, train[\"Item_Outlet_Sales\"],'.', alpha = 0.3)","bec7a4e0":"Outlet_Establishment_Year_pivot = \\\ntrain.pivot_table(index='Outlet_Establishment_Year', values=\"Item_Outlet_Sales\", aggfunc=np.median)\n\nOutlet_Establishment_Year_pivot.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Outlet_Establishment_Year\")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Impact of Outlet_Establishment_Year on Item_Outlet_Sales\")\nplt.xticks(rotation=0)\nplt.show()","3bc3a7d5":"numeric_features = train.select_dtypes(include=[np.object])\nnumeric_features.dtypes","71ea1106":"plt.figure(figsize=(12,7))\nplt.xlabel(\"Item_Identifier\")\nplt.ylabel(\"SQRT Item_Outlet_Sales\")\nplt.title(\"Item_Identifier  and Item_Outlet_Sales Analysis\")\nplt.plot(train.Item_Identifier , train[\"Item_Outlet_Sales\"],'.', alpha = 0.3)","4e68ae1b":"Item_Fat_Content_pivot = \\\ntrain.pivot_table(index='Item_Fat_Content', values=\"Item_Outlet_Sales\", aggfunc=np.median)\nItem_Fat_Content_pivot.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Item_Fat_Content\")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Impact of Item_Fat_Content on Item_Outlet_Sales\")\nplt.xticks(rotation=0)\nplt.show()","82faf88c":"Outlet_Identifier_pivot = \\\ntrain.pivot_table(index='Outlet_Identifier', values=\"Item_Outlet_Sales\", aggfunc=np.median)\n\nOutlet_Identifier_pivot.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Outlet_Identifier \")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Impact of Outlet_Identifier on Item_Outlet_Sales\")\nplt.xticks(rotation=0)\nplt.show()","5425e730":"train.pivot_table(values='Outlet_Type', columns='Outlet_Identifier',aggfunc=lambda x:x.mode())\n","569d7938":"train.pivot_table(values='Outlet_Type', columns='Outlet_Size',aggfunc=lambda x:x.mode())","0fbe144e":"Outlet_Size_pivot = \\\ntrain.pivot_table(index='Outlet_Size', values=\"Item_Outlet_Sales\", aggfunc=np.median)\n\nOutlet_Size_pivot.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Outlet_Size \")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Impact of Outlet_Size on Item_Outlet_Sales\")\nplt.xticks(rotation=0)\nplt.show()","56a52fba":"Outlet_Location_Type_pivot = \\\ntrain.pivot_table(index='Outlet_Location_Type', values=\"Item_Outlet_Sales\", aggfunc=np.median)\n\nOutlet_Location_Type_pivot.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Outlet_Location_Type \")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Impact of Outlet_Location_Type on Item_Outlet_Sales\")\nplt.xticks(rotation=0)\nplt.show()","b491d290":"train.pivot_table(values='Outlet_Location_Type', columns='Outlet_Type',aggfunc=lambda x:x.mode())","3db958d2":"Outlet_Type_pivot = \\\ntrain.pivot_table(index='Outlet_Type', values=\"Item_Outlet_Sales\", aggfunc=np.median)\n\nOutlet_Type_pivot.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Outlet_Type \")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Impact of Outlet_Type on Item_Outlet_Sales\")\nplt.xticks(rotation=0)\nplt.show()","9ea84ac4":"pivoTable = \\\ntrain.pivot_table(index='Item_Type', values=\"Item_Outlet_Sales\", aggfunc=np.mean)\n\npivoTable.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Item_Type \")\nplt.ylabel(\"Item_Outlet_Sales\")\nplt.title(\"Impact of Item_Type on Item_Outlet_Sales\")\nplt.xticks(rotation=90)\nplt.show()","e69d1d68":"pivoTable = \\\ntrain.pivot_table(index='Item_Type', values=\"Item_Visibility\", aggfunc=np.mean)\n\npivoTable.plot(kind='bar', color='blue',figsize=(12,7))\nplt.xlabel(\"Item_Type \")\nplt.ylabel(\"Item_Visibility\")\nplt.title(\"Item_Type vs Item_Visibility\")\nplt.xticks(rotation=90)\nplt.show()","3da1ca3d":"train['source']='train'\ntest['source']='test'\n\ndata = pd.concat([train,test], ignore_index = True)\ndata.to_csv(\"data.csv\",index=False)\nprint(train.shape, test.shape, data.shape)","14727506":"item_avg_weight = data.pivot_table(values='Item_Weight', index='Item_Identifier')\nprint(item_avg_weight)","b5f67a9e":"def impute_weight(cols):\n    Weight = cols[0]\n    Identifier = cols[1]\n    \n    if pd.isnull(Weight):\n        return item_avg_weight['Item_Weight'][item_avg_weight.index == Identifier]\n    else:\n        return Weight","88b2652a":"print ('Orignal #missing: %d'%sum(data['Item_Weight'].isnull()))\ndata['Item_Weight'] = data[['Item_Weight','Item_Identifier']].apply(impute_weight,axis=1).astype(float)\nprint ('Final #missing: %d'%sum(data['Item_Weight'].isnull()))","0c22861c":"from scipy.stats import mode\n\n#Determing the mode for each\noutlet_size_mode = data.pivot_table(values='Outlet_Size', columns='Outlet_Type',aggfunc=lambda x:x.mode())\noutlet_size_mode","8c5ab2d0":"def impute_size_mode(cols):\n    Size = cols[0]\n    Type = cols[1]\n    if pd.isnull(Size):\n        return outlet_size_mode.loc['Outlet_Size'][outlet_size_mode.columns == Type][0]\n    else:\n        return Size\n\nprint ('Orignal #missing: %d'%sum(data['Outlet_Size'].isnull()))\ndata['Outlet_Size'] = data[['Outlet_Size','Outlet_Type']].apply(impute_size_mode,axis=1)\nprint ('Final #missing: %d'%sum(data['Outlet_Size'].isnull()))","5e6d7469":"data.pivot_table(values='Item_Outlet_Sales', columns='Outlet_Type')","deff1f61":"visibility_item_avg = data.pivot_table(values='Item_Visibility',index='Item_Identifier')","ab978eb1":"def impute_visibility_mean(cols):\n    visibility = cols[0]\n    item = cols[1]\n    if visibility == 0:\n        return visibility_item_avg['Item_Visibility'][visibility_item_avg.index == item]\n    else:\n        return visibility\n\nprint ('Original #zeros: %d'%sum(data['Item_Visibility'] == 0))\ndata['Item_Visibility'] = data[['Item_Visibility','Item_Identifier']].apply(impute_visibility_mean,axis=1).astype(float)\nprint ('Final #zeros: %d'%sum(data['Item_Visibility'] == 0))","6043312c":"data['Outlet_Years'] = 2013 - data['Outlet_Establishment_Year']\ndata['Outlet_Years'].describe()","5ba77812":"data['Item_Type_Combined'] = data['Item_Identifier'].apply(lambda x: x[0:2])\n#Rename them to more intuitive categories:\ndata['Item_Type_Combined'] = data['Item_Type_Combined'].map({'FD':'Food',\n                                                             'NC':'Non-Consumable',\n                                                             'DR':'Drinks'})\ndata['Item_Type_Combined'].value_counts()","813880b4":"print('Original Categories:')\nprint(data['Item_Fat_Content'].value_counts())\n\nprint('\\nModified Categories:')\ndata['Item_Fat_Content'] = data['Item_Fat_Content'].replace({'LF':'Low Fat',\n                                                             'reg':'Regular',\n                                                             'low fat':'Low Fat'})\n\nprint(data['Item_Fat_Content'].value_counts())","4a52447d":"data.loc[data['Item_Type_Combined']==\"Non-Consumable\",'Item_Fat_Content'] = \"Non-Edible\"\ndata['Item_Fat_Content'].value_counts()","b0c163fb":"func = lambda x: x['Item_Visibility']\/visibility_item_avg['Item_Visibility'][visibility_item_avg.index == x['Item_Identifier']][0]\ndata['Item_Visibility_MeanRatio'] = data.apply(func,axis=1).astype(float)\ndata['Item_Visibility_MeanRatio'].describe()","909d465f":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\n#New variable for outlet\ndata['Outlet'] = le.fit_transform(data['Outlet_Identifier'])\nvar_mod = ['Item_Fat_Content','Outlet_Location_Type','Outlet_Size','Item_Type_Combined','Outlet_Type','Outlet']\nle = LabelEncoder()\nfor i in var_mod:\n    data[i] = le.fit_transform(data[i])","bf5013da":"data = pd.get_dummies(data, columns=['Item_Fat_Content','Outlet_Location_Type','Outlet_Size','Outlet_Type',\n                              'Item_Type_Combined','Outlet'])\n\ndata.dtypes","c93902de":"#Drop the columns which have been converted to different types:\ndata.drop(['Item_Type','Outlet_Establishment_Year'],axis=1,inplace=True)\n\n#Divide into test and train:\ntrain = data.loc[data['source']==\"train\"]\ntest = data.loc[data['source']==\"test\"]\n\n#Drop unnecessary columns:\ntest.drop(['Item_Outlet_Sales','source'],axis=1,inplace=True)\ntrain.drop(['source'],axis=1,inplace=True)\n\n#Export files as modified versions:\ntrain.to_csv(\"train_modified.csv\",index=False)\ntest.to_csv(\"test_modified.csv\",index=False)","ee06777d":"train_df = pd.read_csv('train_modified.csv')\ntest_df = pd.read_csv('test_modified.csv')","49115f62":"target = 'Item_Outlet_Sales'\nIDcol = ['Item_Identifier','Outlet_Identifier']\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_validate\n\n\ndef modelfit(alg, dtrain, dtest, predictors, target, IDcol, filename):\n    #Fit the algorithm on the data\n    alg.fit(dtrain[predictors], dtrain[target])\n        \n    #Predict training set:\n    dtrain_predictions = alg.predict(dtrain[predictors])\n\n    #Perform cross-validation:\n    cv_score = cross_validate(alg, dtrain[predictors],(dtrain[target]) , cv=20, scoring='neg_mean_squared_error')\n    cv_score = np.sqrt(np.abs(cv_score['test_score']))\n    \n    #Print model report:\n    print(\"\\nModel Report\")\n    print(\"RMSE : %.4g\" % np.sqrt(metrics.mean_squared_error((dtrain[target]).values, dtrain_predictions)))\n    print(\"CV Score : Mean - %.4g | Std - %.4g | Min - %.4g | Max - %.4g\" % (np.mean(cv_score),np.std(cv_score),np.min(cv_score),np.max(cv_score)))\n    \n    #Predict on testing data:\n    dtest[target] = alg.predict(dtest[predictors])\n    \n    #Export submission file:\n    IDcol.append(target)\n    submission = pd.DataFrame({ x: dtest[x] for x in IDcol})\n    submission.to_csv(filename, index=False)","6f90a7b9":"from sklearn.linear_model import LinearRegression\nLR = LinearRegression(normalize=True)\n\npredictors = train_df.columns.drop(['Item_Outlet_Sales','Item_Identifier','Outlet_Identifier'])\nmodelfit(LR, train_df, test_df, predictors, target, IDcol, 'LR.csv')\n\ncoef1 = pd.Series(LR.coef_, predictors).sort_values()\ncoef1.plot(kind='bar', title='Model Coefficients')","7a74cbe8":"from sklearn.linear_model import Ridge\nRR = Ridge(alpha=0.05,normalize=True)\nmodelfit(RR, train_df, test_df, predictors, target, IDcol, 'RR.csv')\n\ncoef2 = pd.Series(RR.coef_, predictors).sort_values()\ncoef2.plot(kind='bar', title='Model Coefficients')","dba5f689":"from sklearn.tree import DecisionTreeRegressor\nDT = DecisionTreeRegressor(max_depth=15, min_samples_leaf=100)\nmodelfit(DT, train_df, test_df, predictors, target, IDcol, 'DT.csv')\n\ncoef3 = pd.Series(DT.feature_importances_, predictors).sort_values(ascending=False)\ncoef3.plot(kind='bar', title='Feature Importances')","276e3ff1":"RF = DecisionTreeRegressor(max_depth=8, min_samples_leaf=150)\nmodelfit(RF, train_df, test_df, predictors, target, IDcol, 'RF.csv')\n\ncoef4 = pd.Series(RF.feature_importances_, predictors).sort_values(ascending=False)\ncoef4.plot(kind='bar', title='Feature Importances')","3a3fc6cd":"from xgboost import XGBRegressor\n\nxgb = XGBRegressor(n_estimators=2500, learning_rate=.02, tree_method='gpu_hist', \n                   objective='reg:squarederror', n_jobs=10, colsample_bytree=.8, max_depth=8,\n                   random_state=42, importance_type='total_gain', reg_alpha=.5)\nxgb.fit(train_df[predictors], train_df[target], early_stopping_rounds=10, \n             eval_set=[(test_df[predictors], test_df[target])], verbose=False)\n","e01c46c6":"#Predict training set:\ntrain_df_predictions = xgb.predict(train_df[predictors])\n\n# make predictions\npredictions = xgb.predict(test_df[predictors])\n","9b39c71c":"from sklearn.metrics import mean_absolute_error\nprint(\"Mean Absolute Error : \" + str(mean_absolute_error(predictions, test_df[target])))\nprint(\"RMSE : %.4g\" % np.sqrt(metrics.mean_squared_error((train_df[target]).values, train_df_predictions)))","f3fb1385":"    IDcol.append(target)\n    submission = pd.DataFrame({ x: test_df[x] for x in IDcol})\n    submission.to_csv(\"XGboost.csv\", index=False)","afc8d9fe":"**Numerical Variable**","d39d9654":"**Impact of Outlet Location type on Item Outlet Sales**","6f766936":"Linear Regression","201c5cde":"Mark non-consumables as seperate category in low fat","87277fc4":"Numerical Variables","0d0f9ca0":"**Outlet Establishment Year and Item Outlet Sales**","be1a6751":"**Feature Transformations**","29d6b903":"Distribution of the Outlet Location Type","b48b83db":"Missing Values","090907c1":"**Impact of Item_Fat_Content on Item_Outlet_Sales**","e39ee084":"**Imputing missing values**","48d10730":"**Prediction**","b680ae14":"Impact of Outlet_Type on Item_Outlet_Sales","2852044e":"Distribution of Target variable - Item Outlet Sales","30d0dd8a":"Combine Outlet Type","d248fecc":"Distribution of Outlet Size","2d31c641":"**Ridge Regression**","73d300fd":"**Modify categories of Item Fat Content**","eb463506":"Impute Outlet size with mode","1653aa08":"Numerical and Categorical Variables \u2013 Dummy variables","77546745":"Bigmart Project\n\nProblem Statement: BigMart has collected sales data for 1559 products across 10 stores in different cities. Attributes of each product and store have been defined. Objective: \u2022 Build a predictive model and find out the sales of each product at a particular ","ece94efd":"Exporting Data","2f9b8554":"Impact of  Item Type vs Item Visibility","e5ddef16":"Creating variable Item_Visibility_MeanRatio","c880228c":"**Item MRP and Item Outlet Sales**","49717f8f":"**Bivariate Distribution**","b4183b79":"Distribution of Item Type","689def91":"**Random Forest Regression**","5f3f9bdf":"**Categorical Variables**","80b54d3c":"Item visibility minimum value 0","37f7c0cf":"Impact of Item Identifier on Item Outlet Sales","1a25e228":"Categorical Variables","a3674c2b":"Distribution of Outlet Type","00de5003":"**XGBoost**","3adf5cc0":"Distribution of Item Fat Content","d51ef2ec":"Determine the years of operation of a store","76534b08":"**Impact of Outlet Identifier on Item Outlet Sales**","59e8011c":"**Item visibility and Item Outlet Sales**","f8d6f20c":"**Create a broad category of Type of Item**","ad37ce7b":"**Data Preprocessing**","75e89ff2":"**Impact of Outlet Size on Item Outlet Sales**","fe2ea288":"**Impact of Item Type on Item Outlet Sales**","1430fe24":"**Feature Engineering**","d60899c3":"**Decision Tree Regression**"}}