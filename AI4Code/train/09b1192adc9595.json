{"cell_type":{"9ca996d9":"code","99950e32":"code","8e3b53b7":"code","fe54c6bc":"code","13c7f199":"code","fba00f71":"code","ed8af84d":"code","e5f2a1cb":"code","33fbbd6d":"code","8aa8dfa3":"code","30c05cfc":"code","8b10db78":"code","6651fc6d":"code","62a652a3":"code","8389503b":"code","f90f59d7":"code","a82ae28e":"code","e9005e48":"code","4244f1d0":"code","896e6810":"code","6d7a3f92":"code","273f3a24":"code","11dbd011":"code","16e5c369":"code","bfc79e58":"code","4fc24221":"code","d3892b7b":"code","9f59d1e2":"code","42bae29b":"code","d5aae38e":"code","c91f6a71":"code","d3c73e74":"code","b0945301":"code","eca0118a":"code","b1471f25":"code","37075785":"code","0fc2a9b3":"code","ae6750b8":"code","8e5679a3":"code","e808c87f":"code","63dee0c2":"code","9e898f98":"code","667f3e1f":"code","b6d37d42":"code","2e65e00a":"code","6c76e646":"code","9442bf87":"code","e63e1009":"code","454c4aa2":"code","10fae9ec":"code","07883443":"code","af0f0d12":"code","f230a593":"code","7f02dac2":"code","608d4095":"code","20dd6d31":"code","d6c4039f":"code","c8dea07f":"code","c221b804":"code","9dfb8d68":"code","172cf3bd":"code","82af19e6":"code","1de7c74c":"code","1533183c":"code","7c50657c":"code","9bf377c0":"code","18d9d309":"code","3e672edb":"code","a855fe2c":"code","f0b30bc2":"code","c0eeb8f9":"code","846cfdeb":"code","78e0b865":"code","b5cad1c5":"code","1cfbc550":"code","4cbadfd2":"code","3580e577":"code","26a4805c":"code","05ba7be7":"code","beebd0e3":"code","e5f091c3":"code","bbcb7a76":"code","508bd2a0":"code","835b00cb":"code","666fb3ac":"code","c607f150":"code","d4f05010":"code","99888d44":"code","8236279d":"code","b6f8bbcd":"code","454734f8":"code","4217430a":"code","58f76ae4":"code","7fa2d13d":"code","da15f831":"code","ab26bb82":"code","5c6601b1":"code","cd58a4d4":"code","c1b7c538":"code","3d94dc3c":"code","f6e758b9":"code","a3ddae07":"code","fd022820":"code","b7c46701":"code","a95afcfc":"code","53ed1377":"code","647b7640":"code","8264233a":"code","cacb072f":"code","a08a4c5d":"code","7a0ad8ba":"code","8b11c79a":"code","b46baf64":"code","13cde7a5":"code","536c557c":"code","c3cb8301":"code","3dcf72a8":"code","be271ea8":"code","4b5fb4d1":"code","1717d6c4":"code","9ca23f37":"code","dff1a9d4":"code","aaa35135":"code","b9e58c14":"code","77bf7597":"code","f206703d":"markdown","51241142":"markdown","7583aacf":"markdown","1d53fccb":"markdown","57c1b3aa":"markdown","08520283":"markdown","3fcacb61":"markdown","10a8cebf":"markdown","23cfdf4e":"markdown","c4c8a7f2":"markdown","23cbf99a":"markdown","f962de14":"markdown","b2458f39":"markdown","bee65814":"markdown","1885d1b9":"markdown","dc51a8c0":"markdown","7da635d9":"markdown","3934ad38":"markdown","cf383301":"markdown","b5b75b1c":"markdown","40a87214":"markdown","abd996ee":"markdown","038dddd3":"markdown","dc92544c":"markdown","c312b4a2":"markdown","b22aff41":"markdown","c71368fe":"markdown","191fb094":"markdown","f84fac0f":"markdown","fd893eab":"markdown","1315f780":"markdown","00c33423":"markdown","4e224d92":"markdown","843c322f":"markdown","16b496e4":"markdown","a970995b":"markdown","cddfde67":"markdown"},"source":{"9ca996d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","99950e32":"data = pd.read_csv('..\/input\/pokemon_alopez247.csv')","8e3b53b7":"data","fe54c6bc":"# top 7 row of data\ndata.head(7)","13c7f199":"# bottom 5 row of data\ndata.tail()","fba00f71":"# data about information\ndata.info()","ed8af84d":"data.corr()","e5f2a1cb":"#correlation map\nf,ax = plt.subplots(figsize=(12, 12))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","33fbbd6d":"data.columns","8aa8dfa3":"#number of row and column \ndata.shape","30c05cfc":"# hoe many different Type_1\ndata.Type_1.unique()","8b10db78":"data_unique = data.Type_1.unique()","6651fc6d":"data_unique.shape","62a652a3":"new_type_1 = data[data.Type_1 == 'Flying']","8389503b":"new_type_1","f90f59d7":"x = (data['HP'] > 75)&(data['Speed'] > 100)\ndata [x]","a82ae28e":"data1=data.loc[:,[\"Attack\",\"Speed\"]]\ndata1.plot()","e9005e48":"data1.plot(subplots=True)\nplt.show()","4244f1d0":"# Line Plot\ndata.Attack.plot(kind = 'line', color = 'g',label = 'Attack',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.Speed.plot(color = 'r',label = 'Speed',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper left')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","896e6810":"# Scatter Plot \n# x = attack, y = defense\ndata.plot(kind='scatter', x='Attack', y='Defense',alpha = 0.5,color = 'red')\nplt.xlabel('Attack')              # label = name of label\nplt.ylabel('Defence')\nplt.title('Attack Defense Scatter Plot')    ","6d7a3f92":"# Histogram\n# bins = number of bar in figure\ndata.Speed.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","273f3a24":"# clf() = cleans it up again you can start a fresh\ndata.Speed.plot(kind = 'hist',bins = 50)\nplt.clf()","11dbd011":"#It has 'key' and 'value'\ndictionary = {'south_korea' : 'seul','russia' : 'moscow'}\nprint(dictionary.keys())\nprint(dictionary.values())","16e5c369":"dictionary['russia'] = \"st.petersburg\"    # update existing entry\nprint(dictionary)\ndictionary['france'] = \"paris\"       # Add new entry\nprint(dictionary)\ndel dictionary['russia']              # remove entry with key 'spain'\nprint(dictionary)\nprint('france' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)","bfc79e58":"series = data['Defense']        # data['Defense'] = series\nprint(type(series))\ndata_frame = data[['Defense']]  # data[['Defense']] = data frame\nprint(type(data_frame))","4fc24221":" # learn logic, control flow and filtering\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","d3892b7b":"x = data['Defense']>200     # There are only one pokemons who have higher defense value than 200\ndata[x]","9f59d1e2":"data[np.logical_and(data['Defense']>100, data['Attack']>145 )]","42bae29b":"# gives the same result as the code in a top row\ndata[(data['Defense']>100) & (data['Attack']>145)]","d5aae38e":"i = 0\nwhile i != 5 :\n    print('i is: ',i)\n    i +=1 \nprint(i,' is equal to 5')","c91f6a71":"lis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['Attack']][0:1].iterrows():\n    print(index,\" : \",value)","d3c73e74":"# import data\ndata=pd.read_csv('..\/input\/pokemon_alopez247.csv')","b0945301":"# information of data\ndata.info()","eca0118a":"#top 5 data\ndata.head(5)","b1471f25":"def tuble():\n    t = (2,4,6)\n    return t\nx,y,z = tuble()\nprint(x,y,z)","37075785":"def tuble():\n    t = (2,4,6)\n    return t\nx,y,z = tuble()\nprint(y)","0fc2a9b3":"x = 7 # global\ndef f():\n    x = 9 # local\n    return x\nprint(x)      # x = 7\nprint(f())    # x = 9","ae6750b8":"x = 3\ndef f():\n    y = 2*x  # there is no local scope x\n    return y\nprint(f())  ","8e5679a3":"#give information on defined words\nimport builtins\ndir(builtins)","e808c87f":"# function inside function\ndef square():\n    def add():\n        x = 5\n        y = 9\n        z = x + y\n        return z\n    return add()**2\nprint(square())  ","63dee0c2":"# default arguments\ndef f(p, r = 1, h = 2, n =3):\n    y = p + r + h + n\n    return y\nprint(f(5))\n# We may change default arguments\nprint(f(5,4,3)) #p=5,r=4,h=3 and n=3(remanin same)","9e898f98":"# flexible arguments *args\ndef f(*args): # *args = one or more value\n    for i in args:\n        print(i)      \nf(1)\nprint(\"\")\nf(1,2,3,4)\ndef f(**kwargs):\n    for key, value in kwargs.items():              \n        print(key, \" \", value)\nf(Name = 'Bulbasaur', Type_2 = 'Poison', Speed = 45)","667f3e1f":"# lambda function\n# faster and easier function writing\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","b6d37d42":"#Like lambda function but it can take more than one arguments.\nnumber_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","2e65e00a":"# iteration example\nname = \"carpe diem\"\nit = iter(name)\nprint(next(it))   # print next iteration\nprint(next(it))\nprint(*it)         # print remaining iteration","6c76e646":"# ZIP\n# zip()\n# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","9442bf87":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuple\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2)) # tuple\nlst = list(un_list2)  # list\nprint(lst)\nprint(type(lst))","e63e1009":"# Example of list comprehension       # [i + 1 for i in num1 ]: list of comprehension \nnum1 = [1,2,3]                       # i+1: list comprehension syntax \nprint(num1)                          # for i in num1: for loop syntax \nnum2 = [i + 1 for i in num1 ]        # i: iterator \nprint(num2)                          # num1: iterable object","454c4aa2":"# Conditionals on iterable\nnum1 = [5,10,15,0]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","10fae9ec":"threshold = sum(data.Speed)\/len(data.Speed)\nprint('threshold = ',threshold)\ndata[\"speed_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\ndata.loc[:10,[\"speed_level\",\"Speed\"]] ","07883443":"data.head()","af0f0d12":"data.tail()","f230a593":"data.shape","7f02dac2":"data.info()","608d4095":"print(data.Type_1.value_counts(dropna =False))","20dd6d31":"data.describe()","d6c4039f":"# for example: compare attack of pokemons that are isLegendary or not\n# black line at top is max\n# blue line at top is 75%\n# green line is median (50%)\n# blue line at bottom is 25%\n# black line at bottom is min\ndata.boxplot(column='Attack',by = 'isLegendary')\nplt.show","c8dea07f":"data_n = data.head()\ndata_n","c221b804":"# melt() -> make out new data\n# id_vars -> we want to keep same the column\n# value_vars -> consist of variable and value\nmelted = pd.melt(frame=data_n,id_vars = 'Name', value_vars= ['Attack','Defense'])\nmelted","9dfb8d68":"#reverse of melting\nmelted.pivot(index = 'Name', columns = 'variable',values='value')","172cf3bd":"#concatenating two data\ndata1 = data.head()\ndata2= data.tail()\n# ignore_index = True -> is provide sequential of index\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 -> vertical unite datas\nconc_data_row","82af19e6":"data1 = data['Attack'].head()\ndata2= data['Defense'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) # axis = 1 -> horizontal unite datas\nconc_data_col","1de7c74c":"data.dtypes","1533183c":"# convert object(str) to categorical and int to float.\ndata['Type_1'] = data['Type_1'].astype('category')\ndata['Speed'] = data['Speed'].astype('float')","7c50657c":"data.dtypes","9bf377c0":"# look at does pokemon data have nan value\n# As you can see there are 721 entries. However Type_2 has 350 non-null object so it has 371 null object.\ndata.info()","18d9d309":"# dropna= False -> we can see Type_2 has that NaN values\ndata[\"Type_2\"].value_counts(dropna =False)","3e672edb":"# Lets drop nan values\ndata1=data   # also we will use data to fill missing value so I assign it to data1 variable\ndata1[\"Type_2\"].dropna(inplace = True)# inplace = True means we do not assign it to new variable. Changes automatically assigned to data","a855fe2c":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true","f0b30bc2":"# assert 1==2 # return error because it is false","c0eeb8f9":"assert  data['Type_2'].notnull().all() # returns nothing because we drop nan values","846cfdeb":"data[\"Type_2\"].fillna('empty',inplace = True)","78e0b865":"assert  data['Type_2'].notnull().all() # returns nothing because we do not have nan values","b5cad1c5":"assert data.columns[4] == 'Total'\nassert data.Speed.dtypes == np.float","1cfbc550":"# data frames from dictionary\ncountry = [\"Spain\",\"France\"]\npopulation = [\"11\",\"12\"]\nlist_label = [\"country\",\"population\"]\nlist_col = [country,population]\nzipped = list(zip(list_label,list_col))\nprint(zipped)","4cbadfd2":"data_dict = dict(zipped)\nprint(data_dict)","3580e577":"df = pd.DataFrame(data_dict)\ndf","26a4805c":"# Add new columns\ndf[\"capital\"] = [\"madrid\",\"paris\"]\ndf","05ba7be7":"# Broadcasting\ndf[\"income\"] = 0 #Broadcasting entire column\ndf","beebd0e3":"# Plotting all data \ndata1 = data.loc[:,[\"Attack\",\"Defense\",\"Speed\"]]\ndata1.plot()\n# it is confusing","e5f091c3":"# subplots\ndata1.plot(subplots = True)\nplt.show()","bbcb7a76":"# scatter plot  \ndata1.plot(kind = \"scatter\",x=\"Attack\",y = \"Defense\")\nplt.show()","508bd2a0":"# hist plot  \n# range -> Indicates the range of the x-axis.\n# if normed is true,y axis is in the range of 0-1\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True)","835b00cb":"# histogram subplot with non cumulative and cumulative\n# cumulative = True -> add previous values\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt.show()","666fb3ac":"data.describe()","c607f150":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","d4f05010":"import warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2 ","99888d44":"print(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"]) # Returns data between 1992-03-10 and 1993-03-16","8236279d":"# find mean of columns according to year\ndata2.resample(\"A\").mean()","b6f8bbcd":"# find mean of columns according to month\ndata2.resample(\"M\").mean()","454734f8":"# NaN values are valued between initial and final values\n# We can interpolete from first value\ndata2.resample(\"M\").first().interpolate(\"linear\")","4217430a":"data2.resample(\"M\").mean().interpolate(\"linear\")","58f76ae4":"data = pd.read_csv('..\/input\/pokemon_alopez247.csv')\ndata.head()","7fa2d13d":"# new index column\ndata= data.set_index(\"Number\")\ndata.head()","da15f831":"# indexing using square brackets\ndata[\"Total\"][3]","ab26bb82":"# using column attribute and row label\ndata.Total[3]","5c6601b1":"# using loc accessor\ndata.loc[2,[\"Speed\"]]","cd58a4d4":"# Selecting only some columns\ndata[[\"HP\",\"Attack\"]]","c1b7c538":"# Difference between selecting columns: series and dataframes\nprint(type(data[\"HP\"]))     # series\nprint(type(data[[\"HP\"]]))   # data frames","3d94dc3c":"# Slicing and indexing series\ndata.loc[1:10,\"HP\":\"Defense\"]   # 10 and \"Defense\" are inclusive","f6e758b9":"# Reverse slicing \ndata.loc[10:1:-1,\"HP\":\"Defense\"] ","a3ddae07":"# From something to end\ndata.loc[1:10,\"Height_m\":] ","fd022820":"# Creating boolean series\nboolean = data.HP > 200\ndata[boolean]","b7c46701":"# Combining filters\nfirst_filter = data.HP > 150\nsecond_filter = data.Speed > 55\ndata[first_filter & second_filter]","a95afcfc":"# Filtering column based others\n# returns the HP column of data with a speed less than 15\ndata.HP[data.Speed<15]","53ed1377":"# Plain python functions\ndef div(n):\n    return n\/2\ndata.HP.apply(div)","647b7640":"# Or we can use lambda function\ndata.HP.apply(lambda n : n\/2)","8264233a":"# Defining column using other columns\ndata[\"total_power\"] = data.Attack + data.Defense\ndata.head()","cacb072f":"# our index name is this:\nprint(data.index.name)\n# lets change it\ndata.index.name = \"index_name\"\ndata.head()","a08a4c5d":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data3 then change index \ndata3 = data.copy()\n# lets make index start from 100. It is not remarkable change but it is just example\ndata3.index = range(100,821,1)\ndata3.head()","7a0ad8ba":"# lets read data frame one more time to start from beginning\ndata = pd.read_csv('..\/input\/pokemon_alopez247.csv')\ndata.head()\n# As you can see there is index. However we want to set one or more column to be index","8b11c79a":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"Type_1\",\"Type_2\"]) \ndata1.head(100)\n# data1.loc[\"Fire\",\"Flying\"] # howw to use indexes","b46baf64":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","13cde7a5":"# pivoting: reshape tool\ndf.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")","536c557c":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1\n# lets unstack it","c3cb8301":"# level determines indexes\ndf1.unstack(level=0)","3dcf72a8":"df1.unstack(level=1)","be271ea8":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","4b5fb4d1":"df","1717d6c4":"# Reverse of pivoting\npd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","9ca23f37":"df","dff1a9d4":"# according to treatment take means of other features\ndf.groupby(\"treatment\").mean()   # mean is aggregation \/ reduction method\n# there are other methods like sum, std,max or min","aaa35135":"# we can only choose one of the feature\ndf.groupby(\"treatment\").age.max() ","b9e58c14":"# Or we can choose multiple features\ndf.groupby(\"treatment\")[[\"age\",\"response\"]].min() ","77bf7597":"df.info()","f206703d":"Pivoting Data","51241142":"Pandas","7583aacf":"Visual Exploratory Data Analysis\n* Plot\n* Subplot\n* Histogram:\n  * bins: number of bins\n  * range(tuble): min and max values of bins\n  * normed(boolean): normalize or not\n  * cumulative(boolean): compute cumulative distribution","1d53fccb":"Slicing Data Frames\n* Difference between selecting columns\n  * Series and data frames\n* Slicing and indexing series\n* Reverse slicing\n* From something to end","57c1b3aa":"Anonymous Function","08520283":"Building Data Frames from Scratch\n* We can build data frames from csv as we did earlier.\n* Also we can build dataframe from dictionaries\n   * zip() method: This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.\n* Adding new column\n* Broadcasting: Create new column and assign a value to entire column","3fcacb61":"Exploratory Data Analysis\n\n* Lets say value at 75% is Q3 and value at 25% is Q1.\n* Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR \n* We will use describe() method. Describe method includes:\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n\n What is quantile?\n\n 1,4,5,6,8,9,11,12,13,14,15,16,17\n The median is the number that is in middle of the sequence. In this case it would be 11.\n\n The lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n\n The upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14         according to the question above.","10a8cebf":"Pivoting Data Frames","23cfdf4e":"List Comprehension","c4c8a7f2":"Visual Exploratory Data Analysis","23cbf99a":"Tidy Data","f962de14":"Resampling Pandas Time Series\n* Resampling: statistical method over different time intervals\n  * Needs string to specify frequency like \"M\" = month or \"A\" = year\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: increase date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019","b2458f39":"INTRODUCTION TO PYTHON\n\nMatplotlib","bee65814":"Thank you...","1885d1b9":"Scope","dc51a8c0":"PYTHON DATA SCIENCE TOOLBOX\n\nUser Defined Functions","7da635d9":"Stacking and Unstacking Data Frames\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","3934ad38":"Categoricals and Groupby","cf383301":"Dictionary","b5b75b1c":"Iterators","40a87214":"MANIPULATING DATA FRAMES WITH PANDAS\n\nIndexing Data Frames\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns\n","abd996ee":"CLEANING DATA\n\nDiagnose Data for Cleaning","038dddd3":"PANDAS FOUNDATION\n\n Review of Pandas\n * single column = series\n * NaN = not a number\n * dataframe.values = numpy","dc92544c":"Default and Flexible Arguments","c312b4a2":"Hierarchical Indexing","b22aff41":"Lambda Function","c71368fe":"Melting Data Frames","191fb094":"Transforming Data Frames\n* Plain python functions\n* Lambda function: to apply arbitrary python function to every element\n* Defining column using other columns","f84fac0f":"Missing Data and Testing with Assert","fd893eab":"Statistical Explatory Data Analysis","1315f780":"Filtering Data Frames","00c33423":"While and For Loops","4e224d92":"Index Objects and Labeled Data","843c322f":"Indexing Pandas Time Series\n* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","16b496e4":"Nested Function","a970995b":"Concatenating Data","cddfde67":"Data Types"}}