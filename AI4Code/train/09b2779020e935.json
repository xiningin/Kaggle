{"cell_type":{"17263a18":"code","8876b142":"code","557f2fec":"code","398b6338":"code","7c4b404e":"code","1e4b271d":"code","d7d43213":"code","3902b005":"code","bfea5d66":"code","c5129f7d":"code","3a65731e":"code","fd87b0c9":"markdown","57f0a185":"markdown"},"source":{"17263a18":"import albumentations\nimport os\nimport pandas as pd\nimport argparse\nimport torch\nimport torchvision\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport numpy as np\n\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import DataLoader\n\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split","8876b142":"# dataset.py\nimport cv2\nclass PlantDataset(Dataset):\n    \n    def __init__(self, df, transforms=None):\n    \n        self.df = df\n        self.transforms=transforms\n        \n    def __len__(self):\n        return self.df.shape[0]\n    \n    def __getitem__(self, idx):\n        image_src = DIR_INPUT + '\/images\/' + self.df.loc[idx, 'image_id'] + '.jpg'\n        # print(image_src)\n        image = cv2.imread(image_src, cv2.IMREAD_COLOR)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        labels = self.df.loc[idx, ['healthy', 'multiple_diseases', 'rust', 'scab']].values\n        labels = torch.from_numpy(labels.astype(np.int8))\n        labels = labels.unsqueeze(-1)\n        \n        if self.transforms:\n            transformed = self.transforms(image=image)\n            image = transformed['image']\n\n        return image, labels","557f2fec":"# model.py\nclass PlantModel(nn.Module):\n    \n    def __init__(self, num_classes):\n        super().__init__()\n        \n        self.backbone = torchvision.models.resnet18(pretrained=True)\n        \n        in_features = self.backbone.fc.in_features\n        \n        self.logit = nn.ModuleList(\n            [nn.Linear(in_features, c) for c in num_classes]\n        )\n        \n    def forward(self, x):\n        batch_size, C, H, W = x.shape\n        \n        x = self.backbone.conv1(x)\n        x = self.backbone.bn1(x)\n        x = self.backbone.relu(x)\n        x = self.backbone.maxpool(x)\n\n        x = self.backbone.layer1(x)\n        x = self.backbone.layer2(x)\n        x = self.backbone.layer3(x)\n        x = self.backbone.layer4(x)\n        \n        x = F.adaptive_avg_pool2d(x,1).reshape(batch_size,-1)\n        x = F.dropout(x, 0.25, self.training)\n\n        logit = [l(x) for l in self.logit]\n\n        return logit\n","398b6338":"# # Engine.py\nfrom tqdm import tqdm\ndef train(dataloader, model, optimizer, device):\n    model.train()\n    tr_loss = 0\n    tk0 = tqdm(dataloader, desc=\"Train\")\n    for step, batch in enumerate(tk0):\n        inputs = batch[0]\n        targets = batch[1]\n        \n        inputs = inputs.to(device, dtype=torch.float)\n        targets = targets.to(device, dtype=torch.float)\n        \n        optimizer.zero_grad()\n        outputs = model(inputs)\n        losses = []\n        for i in range(4):\n            losses.append(criterion(outputs[i], targets[:,i]))\n        loss = losses[0]+losses[1]+losses[2]+losses[3]\n        loss.backward()\n        tr_loss += loss.item()\n        optimizer.step()\n\ndef evaluate(data_loader, model, device):\n    model.eval()\n    val_loss = 0\n    val_preds = None\n    val_labels = None\n    tk0 = tqdm(data_loader, desc='Validate')\n    \n    for step, batch in enumerate(tk0):\n            \n        inputs = batch[0]\n        targets = batch[1]\n        \n        if val_labels is None:\n            val_labels = targets.clone().squeeze(-1)\n        else:\n            val_labels = torch.cat((val_labels, targets.squeeze(-1)))\n        \n        inputs = inputs.to(device, dtype=torch.float)\n        targets = targets.to(device, dtype=torch.float)\n        with torch.no_grad():\n            output = model(inputs)\n            losses = []\n            for i in range(4):\n                losses.append(criterion(output[i], targets[:,i]))\n            loss = losses[0]+losses[1]+losses[2]+losses[3]\n            val_loss += loss.item()\n            \n            preds = torch.sigmoid(torch.stack(output).permute(1, 0, 2).cpu().squeeze(-1))\n            \n            if val_preds is None:\n                val_preds = preds\n            else:\n                val_preds = torch.cat((val_preds, preds), dim=0)\n        return val_loss","7c4b404e":"from albumentations.pytorch import ToTensorV2\ntransforms_train = albumentations.Compose([\n    albumentations.RandomResizedCrop(height=256, width=256, p=1.0),\n    albumentations.Flip(),\n    albumentations.ShiftScaleRotate(rotate_limit=1.0, p=0.8),\n    albumentations.Normalize(p=1.0),\n    ToTensorV2(p=1.0),\n])\n\ntransforms_valid = albumentations.Compose([\n    albumentations.RandomResizedCrop(height=256, width=256, p=1.0),\n    albumentations.Normalize(p=1.0),\n    ToTensorV2(p=1.0),\n])","1e4b271d":"#train.py\nDIR_INPUT = '..\/input\/plant-pathology-2020-fgvc7'\nBATCH_SIZE = 64\n\n\ntrain_df = pd.read_csv(DIR_INPUT + '\/train.csv')\ntrain_df['sample_type'] = 'train'\n\nsample_idx = train_df.sample(frac=0.2, random_state=42).index\ntrain_df.loc[sample_idx, 'sample_type'] = 'valid'\n\nvalid_df = train_df[train_df['sample_type'] == 'valid']\nvalid_df.reset_index(drop=True, inplace=True)\n\ntrain_df = train_df[train_df['sample_type'] == 'train']\ntrain_df.reset_index(drop=True, inplace=True)\n\ndataset_train = PlantDataset(df=train_df, transforms=transforms_train)\ndataset_valid = PlantDataset(df=valid_df, transforms=transforms_valid)\n\ndataloader_train = DataLoader(dataset_train, batch_size=BATCH_SIZE, num_workers=4, shuffle=True)\ndataloader_valid = DataLoader(dataset_valid, batch_size=BATCH_SIZE, num_workers=4, shuffle=False)\ndevice = torch.device(\"cuda:0\")\n\nmodel = PlantModel(num_classes=[1, 1, 1, 1])\nmodel.to(device)\n\ncriterion = nn.BCEWithLogitsLoss()\nplist = [{'params': model.parameters(), 'lr': 5e-5}]\noptimizer = torch.optim.Adam(plist, lr=5e-5)\n\nfor epoch in range(5):\n    train(dataloader_train, model, optimizer, device)\n    val_los = evaluate(dataloader_valid, model, device)\n    print(f'epoch = {epoch}, valid loss = {val_los}')","d7d43213":"submission_df = pd.read_csv(DIR_INPUT + '\/sample_submission.csv')\nsubmission_df.head()","3902b005":"dataset_test = PlantDataset(df=submission_df, transforms=transforms_valid)\ndataloader_test = DataLoader(dataset_test, batch_size=BATCH_SIZE, num_workers=4, shuffle=False)","bfea5d66":"model.eval()\n\ntk0 = tqdm(dataloader_test, desc=\"Predict\")\ntest_preds = None\n\nfor step, batch in enumerate(tk0):\n\n    images = batch[0]\n    images = images.to(device, dtype=torch.float)\n\n    with torch.no_grad():\n        outputs = model(images)\n\n        preds = torch.sigmoid(torch.stack(outputs).permute(1, 0, 2).cpu().squeeze(-1))\n\n        if test_preds is None:\n            test_preds = preds\n        else:\n            test_preds = torch.cat((test_preds, preds), dim=0)\n","c5129f7d":"submission_df[['healthy', 'multiple_diseases', 'rust', 'scab']] = test_preds.numpy()\nsubmission_df.to_csv('submission.csv', index=False)","3a65731e":"submission_df","fd87b0c9":"# Augmentatio","57f0a185":"# prediction"}}