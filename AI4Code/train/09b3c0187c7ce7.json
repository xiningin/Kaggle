{"cell_type":{"2ed61b53":"code","4c073166":"code","439fa642":"code","edfa54e9":"code","09df7787":"code","bda977c1":"code","89e28348":"code","50062058":"code","331ab3ce":"code","c4f0f590":"code","0bd39bd3":"code","527ae806":"code","c39bdf65":"code","7e1b3b3d":"code","59e52369":"markdown"},"source":{"2ed61b53":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom fbprophet import Prophet\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c073166":"train = pd.read_csv(\"..\/input\/web-traffic-time-series-forecasting\/train_1.csv.zip\")\nkeys = pd.read_csv(\"..\/input\/web-traffic-time-series-forecasting\/key_1.csv.zip\")\nss = pd.read_csv(\"..\/input\/web-traffic-time-series-forecasting\/sample_submission_1.csv.zip\")","439fa642":"train.head()","edfa54e9":"# Drop Page column\nX_train = train.drop(['Page'], axis=1)\nX_train.head()","09df7787":"# Check the data\nX_train.isnull().any().describe()","bda977c1":"y = X_train.to_numpy()[0]\ndf = pd.DataFrame({ 'ds': X_train.T.index.values, 'y': y})","89e28348":"df.tail()","50062058":"df['ds']=pd.to_datetime(df['ds'],format='%Y-%m')","331ab3ce":"plt.figure(figsize=(14,7))\nplt.plot(df.ds,df.y)","c4f0f590":"# With outliers\nm = Prophet()\nm.fit(df)\nfuture = m.make_future_dataframe(periods=10)\nforecast = m.predict(future)\nm.plot(forecast);","0bd39bd3":"# Remove outliers\ny = X_train.dropna(0).to_numpy()[0] # Replace NaN to 0 for list comprehension\ny = [ None if i >= np.percentile(y, 95) or i <= np.percentile(y, 5) else i for i in y ]\ndf_na = pd.DataFrame({ 'ds': X_train.T.index.values, 'y': y})","527ae806":"# With outliers\nm = Prophet()\nm.fit(df_na)\nfuture = m.make_future_dataframe(periods=10)\nforecast = m.predict(future)\nm.plot(forecast);","c39bdf65":"future.tail()","7e1b3b3d":"forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","59e52369":"Prophet ignores nan value for calculation, so nan values does not affect predictions. For I replace null values into 0 because it may affect the calculation."}}