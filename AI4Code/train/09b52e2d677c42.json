{"cell_type":{"26eefd5d":"code","b2b3a7f0":"code","0f40a402":"markdown","80f2b761":"markdown","2f6bee46":"markdown"},"source":{"26eefd5d":"## Change cat and num list according to your dataframe\ndef cutevizz(data,num,cat):\n    from IPython.core.display import HTML\n    def multi_table(table_list):\n        ''' Acceps a list of IpyTable objects and returns a table which contains each IpyTable in a cell\n        '''\n        return HTML(\n            '<table><tr style=\"background-color:white;\">' + \n            ''.join(['<td>' + table._repr_html_() + '<\/td>' for table in table_list]) +\n            '<\/tr><\/table>')\n    def libraries():\n        global np,pd,plt,sns\n        import numpy as np\n        import pandas as pd\n        import matplotlib.pyplot as plt\n        import seaborn as sns\n        %matplotlib inline\n        plt.style.use('seaborn-darkgrid')\n\n    def load(data):\n        global df\n        df=pd.read_csv(data)\n\n    ## Categorical variable analysis using countplot and multitable\n    def countplota(column,heading):\n        fig, ax = plt.subplots(1, 2, figsize=(15,6))\n        x=df[column].value_counts().index\n        y=df[column].value_counts().values.tolist()\n        data = df.groupby(column).size()\n        pal = sns.color_palette(\"magma\", len(data))\n        rank = data.argsort().argsort() \n        sns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\n        for p in ax[0].patches:\n                ax[0].annotate('{:.2f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                            ha='center', va='bottom',\n                            color= 'black',fontsize=15)\n                my_circle=plt.Circle( (0,0), 0.4, color='#FFFDE7') # Adding circle at the centre\n                p=plt.gcf()\n                p.gca().add_artist(my_circle)\n        _, _, autotexts= ax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%', textprops={'fontsize': 15},\n                explode=[0.03 for i in df[column].value_counts().index])\n        for autotext in autotexts:\n            autotext.set_color('white')\n        plt.legend(bbox_to_anchor=(1, 1))\n        plt.suptitle (heading,weight = 'bold')\n        plt.show()\n\n    def countplotb(column,heading):\n        x=df[column].value_counts().index\n        y=df[column].value_counts().values.tolist()\n        data = df.groupby(column).size()\n        sns.set(rc={\"axes.facecolor\":\"#FFFDE7\",'figure.facecolor':'#FFFDE7',\n                    'xtick.labelsize':15,'ytick.labelsize':15,\n                    'axes.labelsize':20,'figure.figsize':(10.0, 6.0)})\n        pal = sns.color_palette(\"magma\", len(data))\n        rank = data.argsort().argsort() \n        ax = sns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank])\n        for p in ax.patches:\n                ax.annotate('{:.2f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                            ha='center', va='bottom',\n                            color= 'black',fontsize=15)\n        plt.title(heading,weight = 'bold',size=18)\n        plt.show()\n\n    def scatterplot():\n        for i in range(len(num)):\n            for j in range(len(num)):\n                if num[j] != num[i]:\n                    plt.figure(figsize=(13,6))\n                    sns.scatterplot(x=df[num[i]] , y=df[num[j]])\n                    h = num[i] +\" vs \"+num[j]\n                    plt.title(h,weight = 'bold').set_fontsize('22')\n                    plt.show()\n                    print(\"-----------------------------------------------------------------------------------------------\")\n\n        for i in range(len(num)):\n            for j in range(len(num)):\n                if num[j] != num[i]:\n                    for k in cat:\n                        plt.figure(figsize=(13,6))\n                        sns.scatterplot(x=df[num[i]] , y=df[num[j]],hue = df[k])\n                        plt.legend(bbox_to_anchor=(1, 1),title=k)\n                        h = num[i] +\" vs \"+num[j]\n                        plt.title(h,weight = 'bold').set_fontsize('21')\n                        plt.show()\n                        print(\"-------------------------------------------------------------------------------------------\")\n\n    def barplot():\n        for i in range(len(cat)):\n            for j in range(len(num)):\n                for k in range(len(cat)):\n                    if cat[i] != cat[k]:\n                        plt.figure(figsize=(11,6))\n                        ax = sns.barplot(x=df[cat[i]] , y=df[num[j]],hue = df[cat[k]],palette = 'magma',ci = None)\n                        for p in ax.patches:\n                            ax.annotate('{:.2f}'.format(p.get_height()), (p.get_x()+0.125, p.get_height()),\n                            ha='center', va='bottom',\n                            color= 'black',fontsize=12)\n                        plt.legend(bbox_to_anchor=(1, 1),title=cat[k])\n                        sns.despine()\n                        h = cat[i]+\" vs \"+num[j]+\" with \"+cat[k]+\" as Hue\"\n                        plt.title(h,weight = 'bold').set_fontsize('21')\n                        plt.show()\n                        print(\"-------------------------------------------------------------------------------------------\")\n\n    def catplot():    \n        for i in range(len(cat)):\n            for j in range(len(num)):\n                for k in range(len(cat)):\n                    if cat[i] != cat[k]:\n                        sns.set(rc={'xtick.labelsize':15,'ytick.labelsize':15,'axes.labelsize':15 , \"axes.facecolor\":\"#FFFDE7\" , \"axes.grid\":False})\n                        ax = sns.catplot(x=cat[i] , y=num[j],col = cat[k],data=df,palette = 'magma',ci = None,kind=\"bar\",height=6 , aspect=.5 )\n                        for axes in ax.axes.flat:\n                            _ = axes.set_xticklabels(axes.get_xticklabels(), rotation=90)\n                        plt.tight_layout()\n                        sns.despine()\n                        plt.show()\n                        print(\"-------------------------------------------------------------------------------------------\")\n\n    def histplota():\n        for i in range(len(num)):\n                plt.figure(figsize=(13,6))\n                ax = sns.histplot(x = df[num[i]], palette = 'magma', alpha = 0.8, multiple = 'stack')\n                Quantiles = np.quantile(df[num[i]], [0, 0.25, 0.50, 0.75, 1])\n                for q in Quantiles: ax.axvline(x = q, linewidth = 0.5, color = 'r')\n                h = \"Distribution of \"+num[i]\n                plt.title(h,weight = 'bold').set_fontsize('21')\n                plt.show()\n                print(\"-------------------------------------------------------------------------------------------\")\n\n    def histplotb():\n        for i in range(len(num)):\n            for j in cat:\n                plt.figure(figsize=(13,6))\n                ax = sns.histplot(x = df[num[i]],hue = df[j],palette = 'magma', alpha = 0.8, multiple = 'stack')\n                Quantiles = np.quantile(df[num[i]], [0, 0.25, 0.50, 0.75, 1])\n                for q in Quantiles: ax.axvline(x = q, linewidth = 0.5, color = 'r')\n                legend = ax.get_legend()\n                handles = legend.legendHandles\n                legend.remove()\n                ax.legend(handles, df[j].value_counts().keys().tolist(), title = j, loc = 'upper right',bbox_to_anchor=(1.15, 1))\n                plt.tight_layout()\n                h = \"Distribution of \"+num[i]+\" with \"+j+\" as Hue\"\n                plt.title(h,weight = 'bold').set_fontsize('21')\n                plt.show()\n                print(\"-------------------------------------------------------------------------------------------\")\n\n    def violinplota():\n        for i in range(len(num)):\n            for k in cat:\n                plt.figure(figsize=(13,6))\n                sns.violinplot(y=df[num[i]] , x = df[k] , palette=\"magma\" , scale=\"count\" , bw=.2)\n                h = \"Distribution of \"+num[i]+\" with \"+k+\" as Hue\"\n                plt.title(h,weight = 'bold').set_fontsize('21')\n                plt.show()\n                print(\"-------------------------------------------------------------------------------------------\")\n\n    def violinplotb():\n        for i in range(len(num)):\n            for j in cat:\n                for k in cat:\n                    if j != k:\n                        plt.figure(figsize=(13,6))\n                        sns.violinplot(x = df[j],y=df[num[i]] ,hue = df[k], palette=\"magma\")\n                        plt.legend(bbox_to_anchor=(1.15, 1),title=k)\n                        h = j+\" vs \"+num[i]+\" with \"+k+\" as Hue\"\n                        plt.title(h,weight = 'bold').set_fontsize('21')\n                        plt.show()\n                        print(\"-------------------------------------------------------------------------------------------\")\n\n    def violinplotc():\n        catnew = []\n        for i in cat:\n            if len(df[i].value_counts().keys().tolist()) == 2:\n                catnew.append(i)\n        for i in range(len(num)):\n            for j in cat:\n                for k in catnew:\n                    if j != k:\n                        plt.figure(figsize=(13,6))\n                        sns.violinplot(x = df[j],y=df[num[i]] ,hue = df[k], palette=\"magma\",split=True , inner=\"stick\")\n                        plt.legend(bbox_to_anchor=(1.15, 1),title=k)\n                        h = j+\" vs \"+num[i]+\" with \"+k+\" as Hue\"\n                        plt.title(h,weight = 'bold').set_fontsize('21')\n                        plt.show()\n                        print(\"-------------------------------------------------------------------------------------------\")\n\n    def striplot():\n        for i in range(len(num)):\n            for j in cat:\n                for k in cat:\n                    if j != k:\n                        params = dict(x = df[j] ,y = df[num[i]] ,hue=df[k],dodge=True)\n                        ax = sns.stripplot(**params , size=8,jitter=0.35,palette=['#33FF66','#FF6600'],edgecolor='black',linewidth=1)\n                        sns.boxplot(**params ,palette=['#BDBDBD','#E0E0E0'],linewidth=6)\n                        plt.legend(bbox_to_anchor=(1.15, 1),title=k)\n                        h = j+\" vs \"+num[i]+\" with \"+k+\" as Hue\"\n                        plt.title(h,weight = 'bold').set_fontsize('21')\n                        plt.show()\n                        print(\"-------------------------------------------------------------------------------------------\")\n\n    def jointplot():\n        for i in range(len(num)):\n            for j in range(len(num)):\n                if num[i] != num[j]:\n                    sns.jointplot(x=df[num[i]], y=df[num[j]], data=df , height = 10 , kind=\"hex\" , color=\"#fb9224\")\n                    plt.show()\n                    print(\"---------------------------------------------------------------------------------------------\")\n\n    # Diagonal correlation is always unity & less relevant, shifted variant shows only relevant cases\n    def corrMat(df,id=False):\n\n        corr_mat = df.corr().round(2)\n        f, ax = plt.subplots(figsize=(12,7))\n        mask = np.triu(np.ones_like(corr_mat, dtype=bool))\n        mask = mask[1:,:-1]\n        corr = corr_mat.iloc[1:,:-1].copy()\n        sns.heatmap(corr,mask=mask,vmin=-0.3,vmax=0.3,center=0, \n                    cmap='RdPu_r',square=False,lw=2,annot=True,cbar=False)\n        ax.set_title('Shifted Linear Correlation Matrix',weight = 'bold').set_fontsize('21')  \n        plt.show()\n\n\n    libraries()\n    load(data)\n    print(\"------------------------\"+\"\\033[1m\"+\"Distribution of Categorical Vraiables\"+\"\\033[0m\"+\"------------------------\")\n    sns.set(rc={\"axes.facecolor\":\"#FFFDE7\",'figure.facecolor':'#FFFDE7','xtick.labelsize':15,'ytick.labelsize':15,'axes.labelsize':20})\n    for i in cat:\n        column = i\n        heading = \"Distribution of \"+i\n        if len(df[i].value_counts().keys().tolist()) > 3:\n            countplotb(column,str(heading))\n        else:\n            countplota(column,str(heading))\n    print(\"------------------------\"+\"\\033[1m\"+\"Scatter Plots of Numerical Features\"+\"\\033[0m\"+\"------------------------\")\n    scatterplot()\n    print(\"------------------------\"+\"\\033[1m\"+\"Bar Plots Analysis\"+\"\\033[0m\"+\"------------------------\")\n    barplot()\n    print(\"------------------------\"+\"\\033[1m\"+\"Cat Plots Analysis\"+\"\\033[0m\"+\"------------------------\")\n    catplot()\n    print(\"------------------------\"+\"\\033[1m\"+\"Histogram Plots Analysis\"+\"\\033[0m\"+\"------------------------\")\n    histplota()\n    histplotb()\n    print(\"------------------------\"+\"\\033[1m\"+\"Violin Plots Analysis\"+\"\\033[0m\"+\"------------------------\")\n    violinplota()\n    violinplotb()\n    violinplotc()\n    sns.set(rc={\"axes.facecolor\":\"#b0deff\",\"axes.grid\":False,'xtick.labelsize':15,'ytick.labelsize':15,'axes.labelsize':20,'figure.figsize':(12.0, 6.0)})\n    print(\"------------------------\"+\"\\033[1m\"+\"Box\/Strip Plots Analysis\"+\"\\033[0m\"+\"------------------------\")\n    striplot()\n    # Recover default matplotlib settings\n    plt.rcParams.update(plt.rcParamsDefault)\n    %matplotlib inline\n    sns.set(style=\"white\", color_codes=True)\n    sns.set(rc={'xtick.labelsize':15,'ytick.labelsize':15,'axes.labelsize':20})\n    print(\"------------------------\"+\"\\033[1m\"+\"Joint Plots Analysis\"+\"\\033[0m\"+\"------------------------\")\n    jointplot()\n    sns.set(rc={\"axes.facecolor\":\"#FFFDE7\",'figure.facecolor':'#FFFDE7',\n                    'xtick.labelsize':15,'ytick.labelsize':15,\n                    'axes.labelsize':20,'figure.figsize':(10.0, 6.0)})\n    print(\"------------------------\"+\"\\033[1m\"+\"Heat Map\"+\"\\033[0m\"+\"------------------------\")\n    corrMat(df)\n    print(\"------------------------\"+\"\\033[1m\"+\"Multi Table Analysis\"+\"\\033[0m\"+\"------------------------\")\n    df_nunique = {var: pd.DataFrame(df[var].value_counts()) for var in set(cat)}        \n    multi = []\n    for i in cat:\n        multi.append(df_nunique[i].style\\\n          .format('{:.2f}')\\\n          .highlight_max(color = 'lightgreen')\\\n          .highlight_min(color = 'coral'))\n    display(multi_table(multi))\n\n    for i in cat:\n        df_groupby = {var: pd.DataFrame(df.groupby([var, i]).size()) \n                      for var in set(cat)}\n        multi = []\n        for j in cat:\n            if j != i: \n                multi.append(df_groupby[j])\n        display(multi_table(multi))","b2b3a7f0":"# here you need pass dataset of your choice and numerical, categorical column list\ncutevizz(data=\"..\/input\/heart-failure-prediction\/heart.csv\",num=['Age','RestingBP','Cholesterol','MaxHR','Oldpeak'],cat=['Sex','ChestPainType','FastingBS','RestingECG','ExerciseAngina','ST_Slope','HeartDisease'])","0f40a402":"### Below is the code for Automation of data visualization in seaborn\n#### How we can use this?? Just pass 3 arguments to the function cutevizz(data=\".csv\",num=\"Numerical column list\",cat=\"Categorical column list\") and then run the cell, you will be getting all the visualization.\n#### Basically it is like autovizz(not that advanced but it almost covers all plots we do while data visualization and it also have multitables)\n#### Note: This doesnot include time series plots","80f2b761":"#### I am thinking to covert it to a package. Make sure to give your views in comment section, is it worthy to convert this into a package","2f6bee46":"### Make sure to check, you will like it for sure and this is my 50th notebook on kaggle. I have completed uploading 50 notebooks with in 80 days. Thanks to all who supported\/supporting me, I am glad to share my knowledge with you all."}}