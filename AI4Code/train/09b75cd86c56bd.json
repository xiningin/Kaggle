{"cell_type":{"c0d21db0":"code","407f5784":"code","44eb6a72":"code","a5a09c2d":"code","22093426":"code","ce004e60":"code","30aeb37e":"code","893da4fd":"code","1c02fbcb":"code","44ce763f":"code","3b8422ae":"code","a565f8fb":"code","10b05d48":"code","35a447f9":"code","b478a100":"code","f4f6d89e":"code","3fc0daaa":"code","edf548df":"code","79d1bc3e":"code","17b6e3f5":"code","dbd2171b":"code","31830233":"code","35e238b3":"code","136c9e0e":"code","8615f9b1":"code","dfb56e1b":"code","9393d3ee":"code","9a6ba1d8":"code","9db645f7":"code","e686c12f":"code","0bd26ab3":"code","f9e5d79f":"code","798aaf08":"code","cca1aaa5":"code","b8b35cd5":"code","90e21214":"code","61dfa638":"code","ddd83a4e":"code","7b1404fd":"code","1463e25b":"code","bd84a2c3":"code","764d41f9":"code","89facc81":"code","e41bb98b":"code","32354fd1":"code","f977cf2e":"code","94bd652f":"code","e0923611":"code","5160daf2":"code","6d4365aa":"code","9366de79":"code","3a78862a":"code","cafe0322":"code","350603c3":"code","20b3529f":"code","0665d55c":"markdown","7725cafb":"markdown","b78f9ee9":"markdown","18c36aec":"markdown"},"source":{"c0d21db0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n%matplotlib inline\nsns.set_style('darkgrid')","407f5784":"train = pd.read_csv('..\/input\/used-cars-price-prediction\/train-data.csv')","44eb6a72":"train.head()","a5a09c2d":"train.isnull().sum()\/len(train)","22093426":"import re\nprint(train.Mileage.str.replace('\\d+\\.?\\d+','').value_counts())\nprint(train.Engine.str.replace('\\d+','').value_counts())\nprint(train.Power.str.replace('\\d+\\.?\\d+','').value_counts())","ce004e60":"train.Name = train.Name.str.split().str[0]","30aeb37e":"group = train.groupby('Name').Price.describe()['50%']","893da4fd":"def myfunc(car):\n    if group[car]<10:\n        return 1\n    elif group[car]>=10 and group[car]<20:\n        return 2\n    elif group[car]>=20 and group[car]<50:\n        return 3\n    else:\n        return 4\n\ntrain['Car_Group'] = train.Name.apply(myfunc)","1c02fbcb":"train['Mileage'] = train['Mileage'].str.replace(' km\/kg', '')\ntrain['Mileage'] = train['Mileage'].str.replace(' kmpl', '')\ntrain['Mileage'] = pd.to_numeric(train['Mileage'], errors='coerce')","44ce763f":"train['Engine'] = train['Engine'].str.replace(' CC', '')\ntrain['Engine'] = pd.to_numeric(train['Engine'], errors='coerce')","3b8422ae":"train['Power'] = train['Power'].str.replace(' bhp', '')\ntrain['Power'] = train['Power'].str.replace('null', '0.0')\ntrain['Power'] = pd.to_numeric(train['Power'], errors='coerce')","a565f8fb":"train['Mileage'].replace(0.0,np.nan,inplace=True)\n# print(\"Mean of Mileage =\",np.mean(train['Mileage']))\n# train['Mileage'].fillna(value=np.mean(train['Mileage']),inplace=True)","10b05d48":"train['Engine'].replace(0.0,np.nan,inplace=True)\n# print(\"Mean of Engine =\",np.mean(train['Engine']))\n# train['Engine'].fillna(value=np.mean(train['Engine']),inplace=True)","35a447f9":"train['Power'].replace(0.0,np.nan,inplace=True)\n# print(\"Mean of Power =\",np.mean(train['Power']))\n# train['Power'].fillna(value=np.mean(train['Power']),inplace=True)","b478a100":"train['Seats'].replace(0.0,np.nan,inplace=True)\n# print(\"Mean of Seats = \",np.mean(train['Seats']))\n# train['Seats'].fillna(value=np.mean(train['Seats']),inplace=True)","f4f6d89e":"train.isna().sum()","3fc0daaa":"train.corr()","edf548df":"train.Location.nunique()","79d1bc3e":"train.Location = train.Location.astype('category')","17b6e3f5":"print(train.Fuel_Type.unique())","dbd2171b":"train.Fuel_Type = train.Fuel_Type.astype('category')","31830233":"train.Transmission.unique()","35e238b3":"train.Transmission = train.Transmission.astype('category')","136c9e0e":"train.Owner_Type.unique()","8615f9b1":"train.Owner_Type = train.Owner_Type.astype('category')","dfb56e1b":"train.corr()","9393d3ee":"train.columns","9a6ba1d8":"train.drop(['Name','New_Price','Unnamed: 0','Seats','Kilometers_Driven'],axis=1,inplace=True)","9db645f7":"train.dropna(inplace=True)","e686c12f":"temp_df = pd.get_dummies(train.Location,drop_first=True)\ntrain = pd.concat([train,temp_df],axis=1)\ntrain.drop(['Location'],axis=1,inplace=True)","0bd26ab3":"temp_df = pd.get_dummies(train.Transmission,drop_first=True)\ntrain = pd.concat([train,temp_df],axis=1)\ntrain.drop(['Transmission'],axis=1,inplace=True)","f9e5d79f":"temp_df = pd.get_dummies(train.Owner_Type,drop_first=True)\ntrain = pd.concat([train,temp_df],axis=1)\ntrain.drop(['Owner_Type'],axis=1,inplace=True)","798aaf08":"temp_df = pd.get_dummies(train.Fuel_Type,drop_first=True)\ntrain = pd.concat([train,temp_df],axis=1)\ntrain.drop(['Fuel_Type'],axis=1,inplace=True)","cca1aaa5":"train.corr()['Price']","b8b35cd5":"train.drop(['Electric'],axis=1,inplace=True)","90e21214":"from sklearn.ensemble import RandomForestRegressor\nfeatures = list(train.columns)\nfeatures.remove('Price')\ntarget = ['Price']\nx_rf = train[features]\ny_rf = train[target]\nxtrain_rf, xtest_rf, ytrain_rf, ytest_rf = train_test_split(x_rf, y_rf, test_size=0.25, random_state=1)","61dfa638":"from skopt import BayesSearchCV\n\nrfr = RandomForestRegressor()\n\nsearch_space_rfr = {\n    'n_estimators':list(range(10,200)),\n    'max_depth':list(range(10,100)),\n    'min_samples_split':list(range(2,10)),\n    'min_samples_leaf':list(range(1,10))\n}\n\nopt = BayesSearchCV(rfr,search_spaces=search_space_rfr,n_iter=40,n_points=8,cv=5,n_jobs=-1,verbose=True,scoring='neg_mean_squared_error')","ddd83a4e":"opt.fit(xtrain_rf,ytrain_rf)","7b1404fd":"opt.best_params_","1463e25b":"opt.best_score_","bd84a2c3":"ytrainpredict_rf = opt.predict(xtrain_rf)\nytestpredict_rf = opt.predict(xtest_rf)\n\nytrainpredict_rf = np.expand_dims(ytrainpredict_rf,axis=1)\nytestpredict_rf = np.expand_dims(ytestpredict_rf,axis=1)","764d41f9":"print(f'MAE train: {metrics.mean_absolute_error(ytrain_rf, ytrainpredict_rf)}, test: {metrics.mean_absolute_error(ytest_rf, ytestpredict_rf)}')\nprint(f'RMSE train: {metrics.mean_squared_error(ytrain_rf, ytrainpredict_rf,squared=False)}, test: {metrics.mean_squared_error(ytest_rf, ytestpredict_rf,squared=False)}')\nprint(f'R^2 train: {(r2_score(ytrain_rf, ytrainpredict_rf))}, test: {(r2_score(ytest_rf, ytestpredict_rf))}')\nprint(f'MSE train: {(mean_squared_error(ytrain_rf, ytrainpredict_rf))}, test: {(mean_squared_error(ytest_rf, ytestpredict_rf))}')","89facc81":"dict(zip(features,opt.best_estimator_.feature_importances_))","e41bb98b":"plt.scatter(ytrainpredict_rf, ytrainpredict_rf-ytrain_rf, c='steelblue', marker='o', edgecolors='white', s=35, alpha=0.9, label=\"Training data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytrainpredict_rf.min()-2, xmax=ytrainpredict_rf.max()+5, lw=1, color='black')\nplt.xlim([ytrainpredict_rf.min()-1, ytrainpredict_rf.max()+1])\nplt.show()","32354fd1":"plt.scatter(ytestpredict_rf, ytestpredict_rf-ytest_rf, c='limegreen', marker='s', edgecolors='white', s=35, alpha=0.9, label=\"Test data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytestpredict_rf.min()-1, xmax=ytestpredict_rf.max()+1, lw=1, color='black')\nplt.xlim([ytestpredict_rf.min()-1, ytestpredict_rf.max()+1])\nplt.show()","f977cf2e":"np.mean(ytrain_rf.values),np.max(ytrain_rf.values),np.std(ytrain_rf.values)","94bd652f":"np.mean(ytest_rf.values),np.max(ytest_rf.values), np.std(ytest_rf.values)","e0923611":"from sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nx_kk = train.loc[:,train.columns!='Price'].values\ny_kk = train['Price'].values\n\nxtrain_kk, xtest_kk, ytrain_kk, ytest_kk = train_test_split(x_kk, y_kk, test_size=0.25, random_state=1)\nxtrain_kk = scaler.fit_transform(xtrain_kk)\nxtest_kk = scaler.transform(xtest_kk)","5160daf2":"from skopt import BayesSearchCV\n\nknn = KNeighborsRegressor()\n\nsearch_space_knn = {\n    'n_neighbors':list(range(2,20)),\n    'weights':['uniform','distance']\n}\n\nopt = BayesSearchCV(knn,search_spaces=search_space_knn,n_iter=40,n_points=8,cv=5,n_jobs=-1,verbose=True,scoring='neg_mean_squared_error')","6d4365aa":"opt.fit(xtrain_kk,ytrain_kk)","9366de79":"opt.best_params_","3a78862a":"ytrainpredict_kk = opt.predict(xtrain_kk)\nytestpredict_kk = opt.predict(xtest_kk)","cafe0322":"print(f'MAE train: {metrics.mean_absolute_error(ytrain_kk, ytrainpredict_kk)}, test: {metrics.mean_absolute_error(ytest_kk, ytestpredict_kk)}')\nprint(f'RMSE train: {metrics.mean_squared_error(ytrain_kk, ytrainpredict_kk,squared=False)}, test: {metrics.mean_squared_error(ytest_kk, ytestpredict_kk,squared=False)}')\nprint(f'R^2 train: {(r2_score(ytrain_kk, ytrainpredict_kk))}, test: {(r2_score(ytest_kk, ytestpredict_kk))}')\nprint(f'MSE train: {(mean_squared_error(ytrain_kk, ytrainpredict_kk))}, test: {(mean_squared_error(ytest_kk, ytestpredict_kk))}')","350603c3":"plt.scatter(ytrainpredict_kk, ytrainpredict_kk-ytrain_kk, c='steelblue', marker='o', edgecolors='white', s=35, alpha=0.9, label=\"Training data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytrainpredict_kk.min()-2, xmax=ytrainpredict_kk.max()+5, lw=1, color='black')\nplt.xlim([ytrainpredict_kk.min()-1, ytrainpredict_kk.max()+1])\nplt.show()","20b3529f":"plt.scatter(ytestpredict_kk, ytestpredict_kk-ytest_kk, c='limegreen', marker='s', edgecolors='white', s=35, alpha=0.9, label=\"Test data\")\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.legend(loc='upper left')\nplt.hlines(y=0, xmin=ytestpredict_kk.min()-1, xmax=ytestpredict_kk.max()+1, lw=1, color='black')\nplt.xlim([ytestpredict_kk.min()-1, ytestpredict_kk.max()+1])\nplt.show()","0665d55c":"**Feature importance**","7725cafb":"## RANDOM FOREST REGRESSION\n### Training Data","b78f9ee9":"\n\n## Objective:\n### To predict the costs of used cars given the data collected from various sources and distributed across various locations in India.\n\n## Features:\n\n- Name: The brand and model of the car.\n- Location: The location in which the car is being sold or is available for purchase.\n- Year: The year or edition of the model.\n- Kilometers_Driven: The total kilometres driven in the car by the previous owner(s) in KM.\n- Fuel_Type: The type of fuel used by the car.\n- Transmission: The type of transmission used by the car.\n- Owner_Type: Whether the ownership is Firsthand, Second hand or other.\n- Mileage: The standard mileage offered by the car company in kmpl or km\/kg\n- Engine: The displacement volume of the engine in cc.\n- Power: The maximum power of the engine in bhp.\n- Seats: The number of seats in the car.\n- New_Price: The price of a new car of the same model.\n- Price: The price of the used car in INR Lakhs.\n\n\n#### For the above purpose we need to import some necessary modules and packages given as below:\n","18c36aec":"## Model 6: KNN\n### Training Data"}}