{"cell_type":{"e7a8d068":"code","cf0210e2":"code","f91af224":"code","6afe0b66":"code","8c4b12e4":"code","2d229596":"code","faea0282":"code","cae27b88":"markdown","67f4080d":"markdown","c3fd4975":"markdown","857cd526":"markdown"},"source":{"e7a8d068":"import pandas as pd\n\ntrain_data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')\nprint(train_data.head())\nprint(train_data.columns)\nprint(train_data.shape, test_data.shape)\nprint(train_data.info())","cf0210e2":"# select target\ntrain_y = train_data.SalePrice\n\ntrain_X = train_data.drop(['Id','SalePrice'], axis=1)\ntest_X = test_data.drop(['Id'], axis=1)\n\nprint(train_X.info())","f91af224":"# get_dummies for One Hot Encoding\ntrain_X_one_hot_encoded = pd.get_dummies(train_X)\ntest_X_one_hot_encoded =pd.get_dummies(test_X)\n\n# Align train and test Data Columns\n\nfinal_train_X, final_test_X = train_X_one_hot_encoded.align(test_X_one_hot_encoded, join = 'inner', axis=1)\n\n#print(final_train_X.head().T)\n#print(final_train_X.info())\n#print(final_train_X.shape)\nprint(final_test_X.info())","6afe0b66":"# select target\n##train_y = train_data.SalePrice\n\n##candidate_train_X = train_data.drop(['Id','SalePrice'], axis=1)\n##candidate_test_X = test_data.drop(['Id'], axis=1)\n\n# Refine feutures\n##low_cardinality_cols = [cname for cname in candidate_train_X.columns if \n                       #candidate_train_X[cname].nunique() < 10 and\n                       #candidate_train_X[cname].dtype == 'object']\n##numeric_cols = [cname for cname in candidate_train_X.columns if \n               #candidate_train_X[cname].dtype in ['int64','float64']]\n##my_cols = low_cardinality_cols + numeric_cols\n\n##train_X = candidate_train_X[my_cols]\n##test_X = candidate_test_X[my_cols]\n\n# get_dummies for One Hot Encoding\n##train_X_one_hot_encoded = pd.get_dummies(train_X)\n##test_X_on_hot_encoded =pd.get_dummies(test_X)\n\n##print(train_X_one_hot_encoded.head().T)\n##print(train_X_one_hot_encoded.info())","8c4b12e4":"# Define Model\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(final_train_X, train_y, train_size=0.7, test_size=0.3,\n                                                 random_state=0)\n\nfrom sklearn.preprocessing import Imputer\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import make_pipeline\n\nmy_pipeline = make_pipeline(Imputer(),\n                            RandomForestRegressor())\n\n# Fit Model\nmy_pipeline.fit(X_train,y_train)\npredictions = my_pipeline.predict(X_val)\n\n# Validate Model\nfrom sklearn.metrics import mean_absolute_error\n\nprint('MAE:' + str(int(mean_absolute_error(predictions, y_val))))","2d229596":"# Predict Test Data\npredicted_prices = my_pipeline.predict(final_test_X)\n# We will look at the predicted prices to ensure we have something sensible.\nprint(predicted_prices)","faea0282":"my_submission = pd.DataFrame({'Id': test_data.Id, 'SalePrice': predicted_prices})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission.csv', index=False)","cae27b88":"## Data","67f4080d":"## Data Cleaning","c3fd4975":"# Introduction\n\n**This is my first kaggle compitition - [House Prices: Advanced Regression Techniques](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques).**\n\nMy goal is to apply what I learned from [Machine Learning](https:\/\/www.kaggle.com\/learn\/machine-learning) course in [Kaggle Learn](https:\/\/www.kaggle.com\/learn\/overview).\n\n","857cd526":"## Model"}}