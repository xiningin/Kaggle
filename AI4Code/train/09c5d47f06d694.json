{"cell_type":{"ba8a9594":"code","6a2d882a":"code","2d99143b":"code","f9687b74":"code","dc6e8f01":"code","219cbe66":"code","d1510226":"code","ced3de06":"code","8f36fc49":"code","8946312c":"code","5c6de9c7":"code","ab263137":"code","b4607ae9":"code","a28b6612":"code","98deabd8":"code","0ad4b1a5":"code","ad1f8b83":"code","50c64904":"code","1546e05f":"code","e2482486":"code","8aff0b54":"code","2e678647":"code","86ab5bd8":"code","e17f67e4":"code","a5293366":"code","88e14274":"code","59334214":"code","c8dc1f33":"code","adfa5b7c":"code","01a2c1c7":"code","c91ab818":"code","e9de51e2":"code","aaf20fee":"code","60ab1da7":"code","0dd48c1e":"code","f6e296db":"code","c2c6c705":"code","a9041365":"code","09768c61":"code","be9ca083":"code","cbda5fa1":"code","b9f6a20e":"code","8240f1f3":"code","5e50b9dc":"code","6df9c057":"code","9f4515fd":"code","d4dabd4e":"code","835c0e74":"code","3d8b1a38":"code","f19d6bc7":"code","e88b46f9":"code","afb151f5":"code","8d20be8d":"code","59f96acf":"code","82eb6738":"code","5c5fb6ea":"code","99b98c6a":"code","20e920ea":"code","a58b2efa":"code","60d2850d":"code","992e0b7a":"code","d9d1c8e5":"code","36548c1b":"code","d9d06e0f":"code","4bd07418":"code","be7cf79d":"code","8b3f8d00":"code","c5eb055c":"code","354bd08c":"code","0f0dc07d":"code","d9b8c581":"code","f60a3b3e":"code","0469728f":"code","63248148":"code","f52f3ee1":"code","1718d29e":"code","70925973":"code","1af34179":"code","0674accf":"code","9534794e":"code","353c855e":"code","a52f4938":"code","e71c6ac9":"code","7528a293":"code","c02b1046":"markdown","47af91f5":"markdown","487f8104":"markdown","1a94bda8":"markdown","ffa5f962":"markdown","1c30306a":"markdown","c4f7cc33":"markdown","8f7fb433":"markdown","b1226924":"markdown","a3d35c0f":"markdown","0f3b2fbf":"markdown","70672b31":"markdown","23ca47db":"markdown","69b24219":"markdown","bdbcd8ad":"markdown","4602b222":"markdown","0a093a73":"markdown","e7e6bb6a":"markdown","e4497cbf":"markdown","0fddfc86":"markdown","ba0c286a":"markdown","2b9be062":"markdown","b4dd8681":"markdown","044c3b03":"markdown","60be2fc6":"markdown","6b9ee67e":"markdown","55924062":"markdown","0187ab36":"markdown","1b615fb8":"markdown","577c9eb4":"markdown","b2699de4":"markdown","d4d70699":"markdown","cd7848c4":"markdown","89bbe8b0":"markdown","9726533f":"markdown","3e0dd6b3":"markdown","5522891e":"markdown","b0b040e9":"markdown","a9b0cc37":"markdown","d97c9fb7":"markdown","6aa56980":"markdown","0034b238":"markdown","69066672":"markdown","ef6c6645":"markdown","5fad089d":"markdown","3e4a23fb":"markdown","8d4c87f9":"markdown"},"source":{"ba8a9594":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6a2d882a":"plt.style.use('fivethirtyeight')","2d99143b":"data = pd.read_csv(\"\/kaggle\/input\/hotel-booking-demand\/hotel_bookings.csv\")","f9687b74":"data.head()","dc6e8f01":"data.info()","219cbe66":"# get overview of numeric columns\n\ndata.describe().T","d1510226":"data['hotel'].value_counts()\/len(data)*100","ced3de06":"data['is_canceled'].value_counts()\/len(data)*100  ","8f36fc49":"data.isna().sum()\/len(data)*100","8946312c":"# drop columns with too many missing values\n\ndata.drop(['agent', 'company'], axis=1, inplace=True)","5c6de9c7":"# transform target variable into categorical\n\ndata['is_canceled'] = pd.Categorical(data['is_canceled'])","ab263137":"data['distribution_channel'].value_counts()\/len(data)","b4607ae9":"print(len(data[(data['distribution_channel'] == 'TA\/TO') | (data['distribution_channel'] == 'Direct') | (data['distribution_channel'] == 'Corporate')]))\nprint(len(data))","a28b6612":"data = data[(data['distribution_channel'] == 'TA\/TO') |\n            (data['distribution_channel'] == 'Direct') |\n            (data['distribution_channel'] == 'Corporate')] ","98deabd8":"data['distribution_channel'].value_counts()","0ad4b1a5":"print(len(data))\nprint(len(data.dropna()))","ad1f8b83":"data = data.dropna()","50c64904":"# Distribution of variable\n\ndata['reserved_room_type'].value_counts()","1546e05f":"data = data[(data['reserved_room_type'] != 'P') & (data['reserved_room_type'] != 'L')]\ndata = data[(data['assigned_room_type'] != 'P') & (data['assigned_room_type'] != 'L')]","e2482486":"room_cancel=data.groupby('reserved_room_type')['is_canceled'].value_counts().unstack() ","8aff0b54":"room_cancel=data.groupby('reserved_room_type')['is_canceled'].value_counts().unstack()\nroom_cancel['total']=room_cancel[0]+room_cancel[1]\nroom_cancel['percentage_canceled']=round(room_cancel[1]\/room_cancel[\"total\"],2)\nroom_cancel","2e678647":"plt.figure(figsize=(10,5))\nsns.countplot(x='reserved_room_type',hue=\"is_canceled\",data=data,palette='viridis')","86ab5bd8":"plt.figure(figsize=(4,4))\nsns.countplot(x='hotel',hue=\"is_canceled\",data=data,palette='viridis')","e17f67e4":"hotel_cancel=data.groupby('hotel')['is_canceled'].value_counts().unstack()\nhotel_cancel['total']=hotel_cancel[0]+hotel_cancel[1]\nhotel_cancel['percentage_canceled']=round(hotel_cancel[1]\/hotel_cancel[\"total\"],2)\nhotel_cancel","a5293366":"# strong positive skew\n\ndata[\"lead_time\"].plot.hist(alpha=0.5,bins=10)\ndata[\"lead_time\"].describe()","88e14274":"data['far_in_advance'] = pd.Categorical(np.where(data['lead_time'] >= 160, 1, 0))\ndata['recent_booking'] = pd.Categorical(np.where(data['lead_time'] <= 14, 1, 0))\ndata = data.drop('lead_time', axis=1) # drop initial column","59334214":"plt.figure(figsize=(15,5))\nsns.countplot(x='arrival_date_month',data=data,hue='is_canceled',palette='viridis')","c8dc1f33":"display(data[\"stays_in_weekend_nights\"].value_counts())\n\nplt.figure(figsize=(10,5))\nsns.countplot(x='stays_in_weekend_nights',data=data,hue='is_canceled',palette='viridis')","adfa5b7c":"display(data[\"stays_in_week_nights\"].value_counts())\n\nplt.figure(figsize=(10,5))\nsns.countplot(x='stays_in_week_nights',data=data,hue='is_canceled',palette='viridis')","01a2c1c7":"data = data[data.stays_in_week_nights <= 5]\ndata = data[data.stays_in_weekend_nights <= 2]","c91ab818":"plt.figure(figsize = (10,5))\nsns.countplot(x='adults',data=data,hue='is_canceled',palette='viridis')","e9de51e2":"data = data[data.adults <= 3]","aaf20fee":"plt.figure(figsize = (4,4))\nsns.countplot(x='is_repeated_guest',data=data,hue='is_canceled',palette='viridis')","60ab1da7":"data['is_repeated_guest'].value_counts()\/len(data)*100","0dd48c1e":"data = data.drop('is_repeated_guest', axis=1)","f6e296db":"data[\"booking_changes\"].describe() ","c2c6c705":"pd.Categorical(data['booking_changes']).value_counts()","a9041365":"data['changed_booking'] = pd.Series([0 if x == 0 else 1 for x in data['booking_changes']])\n\n# make it categorical\ndata['changed_booking'] = pd.Categorical(data['changed_booking'])","09768c61":"data[\"children\"].value_counts()","be9ca083":"plt.figure(figsize = (10,5))\nsns.countplot(x='children',data=data,hue='is_canceled',palette='viridis')","cbda5fa1":"data = data[data.children <= 2]","b9f6a20e":"data[\"customer_type\"].value_counts()","8240f1f3":"plt.figure(figsize = (10,4))\nsns.countplot(x='customer_type',data=data,hue='is_canceled',palette='viridis')","5e50b9dc":"data[\"deposit_type\"].value_counts()","6df9c057":"plt.figure(figsize = (6,4))\nsns.countplot(x='deposit_type',data=data,hue='is_canceled',palette='viridis')","9f4515fd":"data[data[\"deposit_type\"]==\"Non Refund\"][\"is_canceled\"].value_counts()","d4dabd4e":"data = data[data.deposit_type != 'Refundable']","835c0e74":"data[\"meal\"].value_counts()","3d8b1a38":"plt.figure(figsize=(10,4))\nsns.countplot(x='meal',data=data,hue='is_canceled',palette='viridis')","f19d6bc7":"data[\"previous_cancellations\"].value_counts()","e88b46f9":"plt.figure(figsize=(10,4))\nsns.countplot(x='previous_cancellations',\n              data=data[data[\"previous_cancellations\"]>=1],\n              hue='is_canceled',\n              palette='viridis')","afb151f5":"data['previous_cancel'] = pd.Series([0 if x == 0 else 1 for x in data['previous_cancellations']]) # binary for previous_cancelations\ndata['previous_cancel'] = pd.Categorical(data['previous_cancel'])","8d20be8d":"sum(data[\"reserved_room_type\"]==data[\"assigned_room_type\"])","59f96acf":"sum(data[\"reserved_room_type\"]!=data[\"assigned_room_type\"])","82eb6738":"data[data[\"reserved_room_type\"]!=data[\"assigned_room_type\"]][\"is_canceled\"].value_counts()","5c5fb6ea":"# same room type assigned\n\nbol = data['assigned_room_type'] == data['reserved_room_type']\ndata['right_room'] = bol.astype(int)\ndata['right_room'] = pd.Categorical(data['right_room'])","99b98c6a":"data[\"adr\"].describe()","20e920ea":"sns.distplot(data[\"adr\"], kde = False)","a58b2efa":"data = data[data.adr >=0 ]\ndata = data[data.adr <= 300]","60d2850d":"sns.distplot(data[\"adr\"], kde = False)","992e0b7a":"data[\"total_of_special_requests\"].value_counts()","d9d1c8e5":"plt.figure(figsize = (10,4))\nsns.countplot(x='total_of_special_requests',\n              data=data[data[\"total_of_special_requests\"]>=1],hue='is_canceled',palette='viridis')\n","36548c1b":"data['special_requests'] = pd.Series([0 if x == 0 else 1 for x in data['total_of_special_requests']]) \n# binary for special requests\ndata['special_requests'] = pd.Categorical(data['special_requests'])\n","d9d06e0f":"data[\"reservation_status\"].value_counts()","4bd07418":"data[\"is_canceled\"].value_counts()","be7cf79d":"data[\"required_car_parking_spaces\"].value_counts()","8b3f8d00":"plt.figure(figsize = (10,4))\nsns.countplot(x='required_car_parking_spaces',\n              data=data,hue='is_canceled',palette='viridis')","c5eb055c":"data['required_car_parking_spaces'] = pd.Series([0 if x == 0 else 1 for x in data['required_car_parking_spaces']]) \n# binary for parking spots\ndata['required_car_parking_spaces'] = pd.Categorical(data['required_car_parking_spaces'])\n","354bd08c":"data = pd.read_csv(\"\/kaggle\/input\/hotel-booking-demand\/hotel_bookings.csv\")","0f0dc07d":"# encode dependent variable for classification\ndata['is_canceled'] = pd.Categorical(data['is_canceled']) \n\n#------------------ Clean the data and transform ---------------------------#\n\n# cut under represented factor levels or split into binary\n\n## Distribution channel\n\n# TA\/TO        0.819750\n# Direct       0.122665\n# Corporate    0.055926\n# GDS          0.001617\n# Undefined    0.000042\n\ndata = data[(data['distribution_channel'] == 'TA\/TO') |\n            (data['distribution_channel'] == 'Direct') |\n            (data['distribution_channel'] == 'Corporate')] \n\n#---------------------------------#\n## Rooms\n\n# A    85446\n# D    19161\n# E     6470\n# F     2890\n# G     2083\n# B     1114\n# C      931\n# H      601\n# L        6\n# P        2\n\n# we clean room types P and L\ndata = data[(data['reserved_room_type'] != 'P') & (data['reserved_room_type'] != 'L')]\ndata = data[(data['assigned_room_type'] != 'P') & (data['assigned_room_type'] != 'L')]\n\n\n#---------------------------------#\n## Duration of stay & Kids\n\n# cleaned for now: or create binary with long \/ short stays\ndata = data[data.stays_in_weekend_nights <= 2]\ndata = data[data.stays_in_week_nights <= 5]\n\n# all very unequal distributed\ndata = data[data.children <= 2]\ndata = data[data.adults <= 3]\n\n#---------------------------------#\n## Deposit\n\n# No Deposit    104641\n# Non Refund     14587\n# Refundable       162\n\n# also cannot logical combine with other levels\ndata = data[data.deposit_type != 'Refundable']\n\n#---------------------------------#\n\n# agent                             13.686238 maybe we can keep agent -> only 13 % missing\n# company                           94.306893\n\n\ndata = data[data.adr >=0 ]\ndata = data[data.adr <= 300]\n\n#------------------------Creating new variables-----------------------------------------#\n\n\n# correct room type assigned\nbol = data['assigned_room_type'] == data['reserved_room_type']\ndata['right_room'] = bol.astype(int)\ndata['right_room'] = pd.Categorical(data['right_room'])\n\n# lead time\n# lead time severly skewed -> binary and we will drop initial variable\ndata['far_in_advance'] = pd.Categorical(np.where(data['lead_time'] >= 160, 1, 0))\ndata['recent_booking'] = pd.Categorical(np.where(data['lead_time'] <= 14, 1, 0))\n\n\ndata['changed_booking'] = pd.Series([0 if x == 0 else 1 for x in data['booking_changes']])# binary for changed booking at least once\ndata['changed_booking'] = pd.Categorical(data['changed_booking'])\n\ndata['previous_cancel'] = pd.Series([0 if x == 0 else 1 for x in data['previous_cancellations']]) # binary for previous_cancelations\ndata['previous_cancel'] = pd.Categorical(data['previous_cancel'])\n\ndata['special_requests'] = pd.Series([0 if x == 0 else 1 for x in data['total_of_special_requests']]) # binary for special requests\ndata['special_requests'] = pd.Categorical(data['special_requests'])\n\ndata['required_car_parking_spaces'] = pd.Series([0 if x == 0 else 1 for x in data['required_car_parking_spaces']]) # binary for parking spots\ndata['required_car_parking_spaces'] = pd.Categorical(data['required_car_parking_spaces'])\n\n\n","d9b8c581":"#--------- drop initial variables for those where we create binaries------------\n\ndata = data.drop(['total_of_special_requests',\n                   'reservation_status',\n                   'previous_cancellations',\n                   'booking_changes',\n                   'lead_time',\n                  'babies'\n                    ], axis=1)\n\n# --------- drop columns which we don't want to use --------------\n\ndata = data.drop(['company','agent','is_repeated_guest',\n                  'reservation_status_date', 'previous_bookings_not_canceled'\n                 ],axis=1)\n\n# ---------- drop remaining NAs from the data---------\ndata=data.dropna()","f60a3b3e":"from numpy import array\nfrom keras.preprocessing.text import one_hot\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Flatten, Dropout\nfrom keras.layers.embeddings import Embedding\nfrom keras.layers import LSTM, Bidirectional\nfrom keras import optimizers\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.callbacks import EarlyStopping\nfrom keras.layers import Layer\n\nfrom collections import Counter\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn import metrics\n\nfrom scipy.stats import zscore","0469728f":"# drop unused columns\ndata = data.drop(['arrival_date_week_number', 'arrival_date_day_of_month'], axis=1 )","63248148":"def encode_columns(column, data):\n    \n    data = pd.concat([data,pd.get_dummies(data[column],prefix=column)],axis=1)\n    data.drop(column, axis=1, inplace=True)\n    \n    return data","f52f3ee1":"### ------------- encode categorical columns ----------------\n\ncategorical_columns = [\"required_car_parking_spaces\",\n                       \"right_room\",\n                       \"far_in_advance\",\n                       \"recent_booking\",\n                       \"changed_booking\",\n                       \"previous_cancel\",\n                       \"special_requests\",\n    \n    \n                       \"hotel\", \n                       \"arrival_date_year\",\n                       \"arrival_date_month\",\n                       \"meal\",\n                       \"country\",\n                       \"market_segment\",\n                       \"distribution_channel\",\n                       \"deposit_type\",\n                       \"customer_type\",\n                       \"reserved_room_type\",\n                       \"assigned_room_type\"\n                      ]\n    \nfor col in categorical_columns:\n    data=encode_columns(col,data)","1718d29e":"data['adr'] = zscore(data['adr'])","70925973":"data = data.dropna()","1af34179":"x = data.drop('is_canceled', axis=1)\ny = data['is_canceled']","0674accf":"x = np.asarray(x)\ny = np.asarray(y)","9534794e":"# Split into train\/test\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)\n\nmodel = Sequential()\nmodel.add(Dense(100, input_dim=x.shape[1], activation='relu', kernel_initializer='random_normal'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(50,activation='relu',kernel_initializer='random_normal'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(25,activation='relu',kernel_initializer='random_normal'))\nmodel.add(Dense(1,activation='sigmoid', kernel_initializer='random_normal'))\n\n\n# compile the model\n#sgd = optimizers.SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nprint(model.summary())\n\n\nmonitor = EarlyStopping(monitor='val_loss', min_delta=1e-3, patience=12, \n                        verbose=1, mode='auto', restore_best_weights=True)\n\n\nhistory = model.fit(x_train, y_train, validation_split=0.2, callbacks=[monitor], verbose=1, epochs=100)\n\nloss, accuracy = model.evaluate(x_test, y_test, verbose=1)\nprint('Accuracy: %f' % (accuracy*100))\nprint('\\n')","353c855e":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model train vs validation loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper right')\nplt.show()","a52f4938":"from sklearn.metrics import roc_curve, auc\n\n\n# Plot an ROC. pred - the predictions, y - the expected output.\ndef plot_roc(pred,y):\n    fpr, tpr, _ = roc_curve(y, pred)\n    roc_auc = auc(fpr, tpr)\n\n    plt.figure(figsize=(7,7))\n    plt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc)\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC)')\n    plt.legend(loc=\"lower right\")\n    plt.show()","e71c6ac9":"prediction_proba = model.predict(x_test)","7528a293":"plot_roc(prediction_proba,y_test)","c02b1046":"### Customer Type","47af91f5":"### Booking changes","487f8104":"### Reserved Room Type","1a94bda8":"### Repeated Guests","ffa5f962":"### Required car parking","1c30306a":"__We drop rooms L & P because they barely have data points recorded. We need to drop the room levels from two variables__","c4f7cc33":"__Only regarding the first three distribution channels only drops about 200 data points. This is equivalent to only 0.1% of the data. Therefore,  we drop the other distribution channels.__","8f7fb433":"### Length of stay: in week and weekend nights","b1226924":"__Looks like the City Hotels have more cancellations than Resort Hotels__","a3d35c0f":"How often a guest changed his\/her booking options.","0f3b2fbf":"We see that any special requests significantly decreases the cancellation rate - this can show that the guests really made an effort to contact the hotel and their intention to stay. \n\nWe will make a new binary variable that checks if there are any special requests for a booking:","70672b31":"### Previous Cancellations","23ca47db":"We will drop this variable as it is the same as the dependent variable 'is_canceled', which groups the 'canceled' and 'no-show' categories.","69b24219":"## Exploration and Feature Engineering done","bdbcd8ad":"We clean the outliers from this column. We see a few points for which the adr (room rate) is 0 - as we don't have extra information about this, we decide to keep them as this could be special promotions or employees who can book for free.","4602b222":"### Lead Time\n\nShows the number of days that elapsed between the entering date of the booking into the PMS and the arrival date.","0a093a73":"Here we see a trend showing that almost everyone who canceled al least once is almost guaranteed to cancel. We will make this variable binary: cancelled before or not","e7e6bb6a":"## Exploratory Data Analysis","e4497cbf":"### Deposit Type","0fddfc86":"__Creating a binary variable for booking changes__","ba0c286a":"### Adults","2b9be062":"#### Checking for class imbalance: 37% - 63%","b4dd8681":"#### Checking for missing values per variable.","044c3b03":"### Hotel Types","60be2fc6":"This variable shows surprising results: __it seems that for the non-refundable bookings, virtually everyone cancelled.__ We also clean the 'Refundable' category because there is almost no data and this might influence the model just because of the sample distribution.","6b9ee67e":"### Arrival dates","55924062":"### Children and babies","0187ab36":"__Due to this extreme skewed distribution we create 2 binary variables:__\n\n- Having a big lead time -> booking far in advance -> lead time >= 160 days\n- Having a small lead time -> recent booking -> lead time <= 14 days","1b615fb8":"We see that bookings some months have higher cancellation rates: April, May, June (so just before the peak season). We also see much higher volume of bookings for the summer months compared to winter time.","577c9eb4":"__Drop outliers__","b2699de4":"### Adr","d4d70699":"We will also transform this variable to binary: parking space requested or not.","cd7848c4":"There are barely any repeated guests in the dataset (only 3%). This means, this variable will not be a good predictor to classify canellations and can be dropped.","89bbe8b0":"### Distribution Channel","9726533f":"For these variables we clean the data to look at bookings of maximum one full week. The longer bookings could come from the Resort Hotel category, but they represent only 0.027% of the data. \n\nCut outliers :","3e0dd6b3":"__Then drop the remaining NAs from the data:__","5522891e":"### Room type reserved\/assigned","b0b040e9":"### Special requests","a9b0cc37":"## Overview cleaning","d97c9fb7":"The guests who are assigned a different room type don't cancel - maybe they got a room upgrade for free. We will make a new binary variable that checks if the guest is assigned a different room type than the one booked.","6aa56980":"### Reservation status","0034b238":"It can be seen that the majority of guests rarely change booking details.","69066672":"### Meal","ef6c6645":"The number of children seem to lead to a slightly different percentage of cancellations. We tried grouping this variable but we obtained a balanced percentage, therefore we just clean the outliers.","5fad089d":"__Check the percentage of cancellations per room type__","3e4a23fb":"### 1. Exploration\n### 2. Cleaning\n### 3. Feature Engineering ","8d4c87f9":"We see that the Transient-Party category has a lower cancellation rate than Transient. "}}