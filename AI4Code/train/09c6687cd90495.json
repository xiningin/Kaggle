{"cell_type":{"1ba13dde":"code","2cd09fb5":"code","ff029722":"code","69ea73cf":"code","be8a8f7d":"code","9a8142bb":"code","75318391":"code","c49e843d":"markdown"},"source":{"1ba13dde":"import numpy as np, pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn import svm, neighbors, linear_model, neural_network\nfrom sklearn.svm import NuSVC\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom tqdm import tqdm_notebook\nfrom random import sample\n\nimport warnings\nwarnings.filterwarnings('ignore')","2cd09fb5":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\noof = np.zeros(len(train))\npreds = np.zeros(len(test))\n\ncols = [c for c in train.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]\n\n","ff029722":"for i in tqdm_notebook(range(512)):\n    train2 = train[train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n\n    data = pd.concat([pd.DataFrame(train2[cols]), pd.DataFrame(test2[cols])])\n    data2 = VarianceThreshold(2).fit_transform(data[cols])\n    train3 = data2[:train2.shape[0]]; test3 = data2[train2.shape[0]:]\n    \n    skf = StratifiedKFold(n_splits=11, random_state=42)\n    for train_index, test_index in skf.split(train2, train2['target']):\n\n        clf = QuadraticDiscriminantAnalysis(reg_param = 0.111)\n        clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        \n        oof[idx1[test_index]] = clf.predict_proba(train3[test_index,:])[:,1]\n        preds[idx2] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n        \n        \nprint(roc_auc_score(train['target'], oof))\n","69ea73cf":"oof_nusvc = np.zeros(len(train))\npreds_nusvc = np.zeros(len(test))\n\nfor i in tqdm_notebook(range(512)):\n    train2 = train[train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n\n    data = pd.concat([pd.DataFrame(train2[cols]), pd.DataFrame(test2[cols])])\n    data2 = StandardScaler().fit_transform(PCA(svd_solver='full',n_components='mle').fit_transform(data[cols]))\n    train3 = data2[:train2.shape[0]]; test3 = data2[train2.shape[0]:]\n    \n    skf = StratifiedKFold(n_splits=11, random_state=42)\n    for train_index, test_index in skf.split(train2, train2['target']):\n\n        clf = NuSVC(probability=True, kernel='poly', degree=4, gamma='auto', random_state=4, nu=0.59, coef0=0.053)\n        clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        \n        oof_nusvc[idx1[test_index]] = clf.predict_proba(train3[test_index,:])[:,1]\n        preds_nusvc[idx2] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n        \n        \nprint(roc_auc_score(train['target'], oof_nusvc))","be8a8f7d":"oof_knn = np.zeros(len(train))\npreds_knn = np.zeros(len(test))\nfor i in tqdm_notebook(range(512)):\n    train2 = train[train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n\n    data = pd.concat([pd.DataFrame(train2[cols]), pd.DataFrame(test2[cols])])\n    data2 = StandardScaler().fit_transform(PCA(n_components=40, random_state=4).fit_transform(data[cols]))\n    train3 = data2[:train2.shape[0]]; test3 = data2[train2.shape[0]:]\n    \n    skf = StratifiedKFold(n_splits=11, random_state=42)\n    for train_index, test_index in skf.split(train2, train2['target']):\n\n        k=KNeighborsClassifier(17,p=2.9)\n        k.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        \n        oof_knn[idx1[test_index]] = k.predict_proba(train3[test_index,:])[:,1]\n        preds_knn[idx2] += k.predict_proba(test3)[:,1] \/ skf.n_splits\n        \n        \nprint(roc_auc_score(train['target'], oof_knn))","9a8142bb":"data_tr=pd.DataFrame({'qda':oof,'nusvc':oof_nusvc,'knn':oof_knn})\ndata_ts=pd.DataFrame({'qda':preds,'nusvc':preds_nusvc, 'knn':preds_knn})\n\nindex_trn=sample(list(data_tr.index),round(len(data_tr)*0.8))\n\nlogi1 = LogisticRegression('l2',1,.01,.05,1,solver='liblinear',max_iter=500)\nlogi1.fit(data_tr.loc[index_trn,:].values,train.loc[index_trn,'target'])\nest_train=logi1.predict_proba(data_tr.drop(labels=index_trn,axis=0).values)[:,1]\nest_tst=logi1.predict_proba(data_ts.values)[:,1]\n\nprint(roc_auc_score(train['target'], oof))\nprint(roc_auc_score(train['target'], oof_knn))\nprint(roc_auc_score(train.drop(labels=index_trn,axis=0)['target'], est_train))\nprint(roc_auc_score(train['target'], 0.8*oof+0.2*oof_nusvc))\nprint(roc_auc_score(train['target'], 0.95*oof+0.05*oof_nusvc))","75318391":"sub = pd.read_csv('..\/input\/sample_submission.csv')\nsub['target'] = 0.8*preds+0.2*preds_knn\nsub.to_csv('submission1.csv', index=False)\n\nsub['target'] = 0.95*preds+0.05*preds_knn\nsub.to_csv('submission2.csv', index=False)\n\nsub['target'] = est_tst\nsub.to_csv('submission3.csv', index=False)","c49e843d":"# PCA+QDA+NuSVC+KNN [0.96774]\nThanks to kernels:\n\n[Another model for your blending](https:\/\/www.kaggle.com\/speedwagon\/quadratic-discriminant-analysis)\n\n[PCA+NuSVC+KNN](https:\/\/www.kaggle.com\/tunguz\/pca-nusvc-knn)"}}