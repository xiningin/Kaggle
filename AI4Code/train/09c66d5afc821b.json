{"cell_type":{"11ebd07a":"code","2b59e741":"code","b0de793f":"code","b9d55e55":"code","f275804d":"code","7ff43777":"code","6d89c16a":"code","c25ea0e8":"code","fcc7902f":"code","f10899ac":"code","943135b7":"code","85b5c9b0":"code","3c4d951a":"code","9ef30b59":"code","16dadb99":"code","afb1b852":"code","3d979e0c":"code","a438e00f":"code","de14c6d7":"code","d1ebe704":"code","9703bee0":"code","d5707335":"code","c5239192":"code","ed94f438":"code","36184746":"code","ee00fc8c":"code","deb86daf":"code","c826186e":"code","0d6936ff":"code","c84309d2":"code","4ba724db":"code","4bc08d36":"code","e498385b":"code","2241c14b":"code","06fea50b":"code","7cd0d52f":"markdown","1300c3dc":"markdown","e2014f0c":"markdown","5367aa7a":"markdown","63567eb0":"markdown","d6aaa8b8":"markdown","97747e43":"markdown","6417def7":"markdown","4662d54f":"markdown","2373a012":"markdown","7219c6c5":"markdown","0983b203":"markdown","8b65848d":"markdown","21c7c543":"markdown"},"source":{"11ebd07a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b59e741":"import matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.multioutput import MultiOutputClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.linear_model import LogisticRegression","b0de793f":"train = pd.read_csv('..\/input\/topic-modeling-for-research-articles-20\/Train.csv')\ntest = pd.read_csv('..\/input\/topic-modeling-for-research-articles-20\/Test.csv')\nss = pd.read_csv('..\/input\/topic-modeling-for-research-articles-20\/SampleSubmission.csv')\ntags = pd.read_csv('..\/input\/topic-modeling-for-research-articles-20\/Tags.csv')","b9d55e55":"train.head()","f275804d":"test.head()","7ff43777":"tags.head()","6d89c16a":"ss.head()","c25ea0e8":"train.info()","fcc7902f":"train.nunique()","f10899ac":"TARGET_COLS = ['Analysis of PDEs', 'Applications',\n               'Artificial Intelligence', 'Astrophysics of Galaxies',\n               'Computation and Language', 'Computer Vision and Pattern Recognition',\n               'Cosmology and Nongalactic Astrophysics',\n               'Data Structures and Algorithms', 'Differential Geometry',\n               'Earth and Planetary Astrophysics', 'Fluid Dynamics',\n               'Information Theory', 'Instrumentation and Methods for Astrophysics',\n               'Machine Learning', 'Materials Science', 'Methodology', 'Number Theory',\n               'Optimization and Control', 'Representation Theory', 'Robotics',\n               'Social and Information Networks', 'Statistics Theory',\n               'Strongly Correlated Electrons', 'Superconductivity',\n               'Systems and Control']","943135b7":"100 * (train[TARGET_COLS].sum()\/(train.shape[0])).sort_values(ascending=False)","85b5c9b0":"from wordcloud import WordCloud, STOPWORDS\nwc = WordCloud(stopwords = set(list(STOPWORDS) + ['inside']), random_state = 42)","3c4d951a":"#Check for top words for a given sub-topic\nfig, axes = plt.subplots(2, 2, figsize=(20, 12))\naxes = [ax for axes_row in axes for ax in axes_row]\nfor i, sub_topic_name in enumerate(['Machine Learning', 'Artificial Intelligence', 'Computer Vision and Pattern Recognition', 'Robotics']):\n  sub_topic = train[train[sub_topic_name] == 1]\n  op = wc.generate(str(sub_topic['ABSTRACT']))\n  _ = axes[i].imshow(op)\n  _ = axes[i].set_title(sub_topic_name.upper(), fontsize=20)\n  _ = axes[i].axis('off')\n_ = plt.suptitle('TOP WORDS FOR A GIVEN SUB-TOPIC', fontsize=30)","9ef30b59":"TOPIC_COLS = ['Computer Science', 'Mathematics', 'Physics', 'Statistics']","16dadb99":"#Check for top words for a given topic\nfig, axes = plt.subplots(2, 2, figsize=(20, 12))\naxes = [ax for axes_row in axes for ax in axes_row]\nfor i, topic_name in enumerate(TOPIC_COLS):\n  topic = train[train[topic_name] == 1]\n  op = wc.generate(str(topic['ABSTRACT']))\n  _ = axes[i].imshow(op)\n  _ = axes[i].set_title(topic_name.upper(), fontsize=20)\n  _ = axes[i].axis('off')\n_ = plt.suptitle('TOP WORDS FOR A GIVEN TOPIC', fontsize=30)","afb1b852":"from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.feature_extraction import text\nfrom collections import Counter","3d979e0c":"cv = CountVectorizer()\ndata_cv = cv.fit_transform(tags['Tags'])\ndata_dtm = pd.DataFrame(data_cv.toarray(), columns = cv.get_feature_names())\ndata_dtm.index = tags.index\ndata_dtm = data_dtm.transpose()\ndata_dtm.head()","a438e00f":"# Find the top 30 words on each category\n\ntop_dict = {}\nfor c in data_dtm.columns:\n    top = data_dtm[c].sort_values(ascending = False).head(30)\n    top_dict[c]= list(zip(top.index, top.values))\n\ntop_dict","de14c6d7":"for category, top_words in top_dict.items():\n    print(category, \":\")\n    print(', '.join([word for word, count in top_words[0:14]]))\n    print('-----------------------------------------------------------------------------------------------------------------------')","d1ebe704":"# Let's first pull out the top words for each category\n\nwords = []\nfor category in data_dtm.columns:\n    top = [word for (word, count) in top_dict[category]]\n    for t in top:\n        words.append(t)\n        \nwords\n","9703bee0":"add_stop_words = [word for word, count in Counter(words).most_common() if count > 2]\n\n\n# Add new stop words\n\nstop_words = text.ENGLISH_STOP_WORDS.union(add_stop_words)\n\nvectorizer = TfidfVectorizer(strip_accents = 'unicode', analyzer = 'word', ngram_range = (1, 2), norm = 'l2', max_features = 10000, use_idf = True, stop_words = stop_words)\n","d5707335":"train_data, eval_data = train_test_split(train, test_size=0.2, random_state=42,shuffle = True)","c5239192":"vectorizer.fit(train_data['ABSTRACT'])\nvectorizer.fit(eval_data['ABSTRACT'])\n\ntrn_abs = vectorizer.transform(train_data['ABSTRACT'])\nval_abs = vectorizer.transform(eval_data['ABSTRACT'])\ntst_abs = vectorizer.transform(test['ABSTRACT'])","ed94f438":"train_data[TARGET_COLS]","36184746":"from skmultilearn.problem_transform import BinaryRelevance, LabelPowerset","ee00fc8c":"lp_classifier = LabelPowerset(LogisticRegression(max_iter = 50, verbose = 10))\nlp_classifier.fit(trn_abs, train_data[TARGET_COLS])\nlp_predictions = lp_classifier.predict(val_abs)","deb86daf":"print(\"Accuracy = \", accuracy_score(eval_data[TARGET_COLS], lp_predictions))\nprint(\"F1 score = \", f1_score(eval_data[TARGET_COLS], lp_predictions, average = \"micro\"))","c826186e":"pipe = Pipeline([('TFidf', TfidfVectorizer(ngram_range = (1,2), stop_words = stop_words, smooth_idf = True)), \n                 (\"multilabel\", MultiOutputClassifier(LinearSVC( random_state = 42, class_weight = 'balanced')))])","0d6936ff":"y_train = train_data[TARGET_COLS]","c84309d2":"pipe.fit(train_data['ABSTRACT'], y_train)","4ba724db":"pipe_pred= pipe.predict(eval_data['ABSTRACT'])","4bc08d36":"print(\"Accuracy = \", accuracy_score(eval_data[TARGET_COLS], pipe_pred))\nprint(\"F1 score = \", f1_score(eval_data[TARGET_COLS], pipe_pred, average = \"micro\"))","e498385b":"preds_test = pipe.predict(test['ABSTRACT'])","2241c14b":" ## 1. Setting the target column with our obtained predictions\nss[TARGET_COLS] = preds_test\n\n  ## 2. Saving our predictions to a csv file\n\nss.to_csv('Submission.csv', index = False)\n","06fea50b":"ss.head()","7cd0d52f":"**Above information gives a brief description of datatypes and no null values in the dataset**","1300c3dc":"**Distribute the data into train, evaluation and test set**","e2014f0c":"# Importing libraries","5367aa7a":"# TARGET DISTRIBUTION","63567eb0":"# View the datasets","d6aaa8b8":"#  MODEL BUILDING","97747e43":"**Label Powerset**","6417def7":"# Load the dataset","4662d54f":"# Datatypes of Variables","2373a012":"**Count Vectorizer**","7219c6c5":"# Unique Values in each Variable","0983b203":"# PROBLEM STATEMENT\n\nTopic Modeling for Research Articles 2.0\nResearchers have access to large online archives of scientific articles. As a consequence, finding relevant articles has become more and more difficult. Tagging or topic modelling provides a way to give clear token of identification to research articles which facilitates recommendation and search process. \n\nEarlier on the Independence Day we conducted a Hackathon to predict the topics for each article included in the test set. Continuing with the same problem, In this Live Hackathon we will take one more step ahead and predict the tags associated with the articles.\n\nGiven the abstracts for a set of research articles, predict the tags for each article included in the test set. \nNote that a research article can possibly have multiple tags. The research article abstracts are sourced from the following 4 topics: \n\n1. Computer Science\n\n2. Mathematics\n\n3. Physics\n\n4. Statistics\n\nList of possible tags are as follows:\n\n[Tags, Analysis of PDEs, Applications, Artificial Intelligence,Astrophysics of Galaxies, Computation and Language, Computer Vision and Pattern Recognition, Cosmology and Nongalactic Astrophysics, Data Structures and Algorithms, Differential Geometry, Earth and Planetary Astrophysics, Fluid Dynamics,Information Theory, Instrumentation and Methods for Astrophysics, Machine Learning, Materials Science, Methodology, Number Theory, Optimization and Control, Representation Theory, Robotics, Social and Information Networks, Statistics Theory, Strongly Correlated Electrons, Superconductivity, Systems and Control]","8b65848d":"**PipeLine using Tfid Vectorizer and MultiOutput Classifier**","21c7c543":"# WORDCLOUDS"}}