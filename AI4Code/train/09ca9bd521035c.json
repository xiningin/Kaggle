{"cell_type":{"2298d4ef":"code","54583163":"code","68e4ce8a":"code","dc765879":"code","dea45aa6":"code","9f553efd":"code","49c20bb5":"markdown","545bb582":"markdown","7ab66eb7":"markdown","41d5e51a":"markdown","925ca480":"markdown","6aa72b7d":"markdown"},"source":{"2298d4ef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","54583163":"import numpy as np # linear algebra\nimport pandas as pd # for pre - processing\nimport matplotlib.pyplot as plt # for Data - Visualization\nfrom scipy.special import comb # The number of combinations of N things taken K at a time; \"N choose K\"\nfrom itertools import combinations, permutations # to form a \"iterator algebra\"","68e4ce8a":"#! pip install apyori # Apriori algorith to find the Associations of the Grocery Data","dc765879":"print(os.listdir('..\/input'))","dea45aa6":"df = pd.read_csv('\/kaggle\/input\/groceries\/groceries - groceries.csv', delimiter=',')\ndf.head(20)","9f553efd":"def apyori(df, minimum_support=0.1, confidence=0.22):\n    df_values = df.values.astype(str)\n    index, counts = np.unique(df_values,return_counts=True)\n    df_item = pd.DataFrame(zip(index, counts), columns = ['product', 'frequency'])\n    df_item.drop(df_item[(df_item['product'] == 'nan' )|(df_item['product'] == 'None' )].index, inplace=True)\n    df_item.sort_values(by='frequency', ascending=False, inplace=True)\n    df_item.reset_index(drop=True, inplace=True)\n    df_item_frequent = df_item[df_item['frequency']>= minimum_support*len(df)]\n    df_itemset_frequency = pd.DataFrame(columns=['itemset', 'frequency'])\n    for i in range(1, len(df_item_frequent)+1):\n        comb = list(combinations(df_item_frequent['product'].values, i) )\n        for w in comb:\n            count = 0 \n            for instance in df_values:\n                if all(elem in instance  for elem in w):\n                    count = count +1\n            if count >= (minimum_support*len(df)\/2):#tirar \/2\n                df_itemset_frequency = df_itemset_frequency.append({'itemset':w, 'frequency':count}, ignore_index=True)\n    df_itemset_frequency.sort_values(by='frequency', inplace=True, ascending=False)\n    reliability = pd.DataFrame(columns=['rule', 'frequency', 'reliability'])\n    for w in df_itemset_frequency['itemset'].values:\n        w_p = list(permutations(w,len(w)))\n        for j in w_p:\n            #print (len(j[0]))\n\n            p_uni = []\n            for i in range(len(j)):\n\n                count = 0 \n                for instance in df_values:\n                    if all(elem in instance  for elem in j[i:]):\n                        count = count +1\n                p_uni.append(count\/len(df))\n\n            if len(j) != 1:\n                a = p_uni[-2]\/p_uni[-1]\n\n                for i in range(len(p_uni)-2):\n                    a = p_uni[-i-3]\/a\n                j = list(j)\n                j.reverse()\n                reliability = reliability.append({'rule':j, 'frequency':p_uni[0], 'reliability':a}, ignore_index=True)\n            else:\n                reliability = reliability.append({'rule':j, 'frequency':p_uni[0], 'reliability':p_uni[0]}, ignore_index=True)\n    reliability.sort_values(by='frequency', ascending=False)\n    return reliability[reliability['reliability']>=confidence]\napyori(df.drop(columns='Item(s)'))","49c20bb5":"**1. Learning Associations : Grocery Dataset**","545bb582":"**1. Importing Libraries**","7ab66eb7":"**Observations from the Dataset**\n\n The groceries - groceries data consists of Transactions identifiers and comprises of 32 itemlist","41d5e51a":"**2. Load Grocery File**","925ca480":"**Learning Association Rule (Apriori Algorithm)**","6aa72b7d":"**1.1. Installing Libraries for Algorithms**"}}