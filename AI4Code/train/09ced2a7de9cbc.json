{"cell_type":{"828512d9":"code","c4dc9afc":"code","871f07f0":"code","af580f2f":"code","19bc7adb":"code","7b22590c":"code","f3cb308b":"code","eb068fbc":"code","190e7595":"markdown"},"source":{"828512d9":"# installation\n! pip install calmap\n! pip install requests\n! pip install geopy","c4dc9afc":"# import\n# essential libraries\nimport json\nfrom urllib.request import urlopen\n\n# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport calmap\nimport folium\n\n# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow\n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# date and time\nimport time\nfrom datetime import datetime\n\n# requests for getting data file from Google Sheet link\nimport requests\n\n# geopy + geocoder = Nominatim for searching location using OpenStreetMap data.\nfrom geopy.geocoders import Nominatim\ngeolocator = Nominatim(user_agent=\"Vietnam SARS-CoV-2 \/ COVID-19 Infographics\", timeout=3)","871f07f0":"# define function to get latitude, longitude\ndef latlongGet (addressStr):\n    #addressStr = \"Cu Chi, Ho Chi Minh, Vietnam\"\n    #addressStr = \"Cu Chi District, Ho Chi Minh, Vietnam\"\n\n    location = geolocator.geocode(addressStr)\n    if location is None:\n        print(\"Cannot find address\", addressStr)\n        #return NaN, NaN;\n    else:\n        #print(location.address)\n        print((location.latitude, location.longitude))\n        return location.latitude, location.longitude;","af580f2f":"# get latest Vietnam SARS-CoV-2 | COVID-19 data\nimport io\nfrom io import BytesIO\n\n# get data from shared Google Sheet\nresponse = requests.get('https:\/\/docs.google.com\/spreadsheet\/ccc?key=1i2ox2Ii-SCt1qiv3I3UxO37LSVWFdq7EJR1_ETaxx6M&output=csv')\nassert response.status_code == 200, 'Wrong status code'\ndata = response.content\n\n# import data to dataframe\ndf = pd.read_csv(BytesIO(data)) #unprocessed data\n\n# print few rows\nprint(df.head(5))","19bc7adb":"# process data frame\n\n# select cols of interest\ndfi = df[['Case', 'Current Location', 'Confirmed', 'Recovered']]\n\n# create an unattached column with an index\ndfState = dfi[['Current Location']]\ndfState.columns = ['State']\n#print(dfState)\n\n# extract state \/ province name from dfState\nnrow,_ = dfState.shape    \nfor i in range(nrow):\n    addr = dfState.iloc[i,0]\n    if (str(addr) == 'nan'):\n        print('index = ', i, ' addr = ', addr, ' -> no address')\n    else:\n        s = addr.split(',')    #delimiter = ','\n        state = s[len(s) - 2]  #get province \/ state\n        dfState.at[i,'State'] = state\n        #print('state = ', dfState.iloc[i,1])\nprint(dfState)\n\n# attach dfState to dfi\ndfiNew = pd.concat([dfi, dfState], axis=1)\n#print(dfiNew.tail(20))\n\n# select only confirmed cases & not recovered yet\ndfi = dfiNew[(dfiNew['Confirmed']==1) & (dfiNew['Recovered'].isnull())]\n#print(dfi)\nprint(dfi.tail(20))","7b22590c":"'''\n# test latlongGet function + searchable locations stored in data file\naddressStr = \"Cu Chi District, Ho Chi Minh, Vietnam\"\naddressStr = \"Dong Anh, Hanoi, Vietnam\"\naddressStr = \"Binh Thuan Province, Vietnam\"\naddressStr = \"Ninh Binh Province, Vietnam\"\naddressStr = \"District 10, Ho Chi Minh, Vietnam\"\naddressStr = \"Lao Cai, Vietnam\"\naddressStr = \"Hanoi, Vietnam\"\naddressStr = \"Da Nang, Vietnam\"\naddressStr = \"Hoi An, Quang Nam, Vietnam\"\naddressStr = \"Pasteur Hospital, Ho Chi Minh, Vietnam\"\naddressStr = \"Hue, Vietnam\"\n#addressStr = \"Cao Xanh, Ha Long, Quang Ninh Province, Vietnam\"\n#addressStr = \"District 1, Ho Chi Minh, Vietnam\"\n\nlat, long = latlongGet(addressStr)\nprint(lat, long)\n'''","f3cb308b":"#get no. of rows in dfi\nnrow,_ = dfi.shape\nprint(nrow)\n#print(dfi.iloc[1,1])\n\n'''\n# test getting lat, long from dataframe of interest\n\nfor i in range(nrow):\n    time.sleep(1) #delay 1s to avoid #except OSError as err: # timeout error\n    addr = dfi.iloc[i,1]\n    if (str(addr) == 'nan'):\n        print('index = ', i, ' addr = ', addr, ' -> no address')\n    else:\n        lat, long = latlongGet(addr)\n        print('index = ', i, ' addr = ', addr, ' -> ', lat, long)\n'''","eb068fbc":"# create map\n# country center - position country map in the middle\ncenterLat = 16.4637 #Hue city Lat Long\ncenterLong = 107.5909\n\n# display country map\nm = folium.Map(location=[centerLat, centerLong], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=10, zoom_start=6)\n\n# add SARS-CoV-2 | COVID-19 areas\nfor i in range(0, nrow):\n    time.sleep(1) #delay 1s to avoid #except OSError as err: # timeout error\n    addr = dfi.iloc[i,1]\n    if (str(addr) == 'nan'):\n        print('no address')\n    else:\n        lat, long = latlongGet(addr)\n        print(lat, long)\n    '''\n    #simple map without tooltip\n    folium.Circle(\n        location=[lat, long],\n        color='crimson', \n        radius=3).add_to(m)\n    '''\n    folium.Circle(\n        location=[lat, long],\n        color='crimson', \n        tooltip =   '<li><bold>Province : '+str(dfi.iloc[i]['State'])+\n                    '<li><bold>Confirmed : '+str(dfi.iloc[i]['Confirmed'])+\n                    '<li><bold>Recovered : '+str(dfi.iloc[i]['Recovered']),\n                    #'<li><bold>Deaths : '+str(dfi.iloc[i]['Deaths'])+\n        radius=int(dfi.iloc[i]['Confirmed'])**2).add_to(m)\n        #radius=3).add_to(m)\n    \n#display map\nm","190e7595":"References:\nhttps:\/\/www.kaggle.com\/imdevskp\/covid-19-analysis-viz-prediction-comparisons"}}