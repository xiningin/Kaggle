{"cell_type":{"b2f570ee":"code","eded98dd":"code","4f020329":"code","f03fc57c":"code","ca71dba5":"code","30e224a3":"code","072a1312":"code","1cb6942d":"code","4d601f55":"code","d4f03e1f":"code","dc317135":"code","53fd6c84":"code","6cdf9b43":"code","997cbd1a":"code","e6a1d56d":"code","ee437167":"code","1d5ed631":"code","b839e880":"markdown","03977e0d":"markdown"},"source":{"b2f570ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.cm import hsv\nimport matplotlib.patches as mpatches\n!pip install pmdarima\nfrom pmdarima.arima import auto_arima, ADFTest\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eded98dd":"processed_df = pd.read_csv('\/kaggle\/input\/stock-exchange-data\/indexProcessed.csv')\ndata_df = pd.read_csv('\/kaggle\/input\/stock-exchange-data\/indexProcessed.csv')\ninfo_df = pd.read_csv('\/kaggle\/input\/stock-exchange-data\/indexInfo.csv')","4f020329":"processed_df.describe()","f03fc57c":"processed_df.describe()","ca71dba5":"processed_df = processed_df.merge(info_df, on='Index')\nprocessed_df","30e224a3":"processed_df.isnull().any()","072a1312":"print(processed_df.dtypes)","1cb6942d":"processed_df['Date'] = pd.to_datetime(processed_df['Date'])\nprocessed_df['Index'] = processed_df['Index'].astype('category')\nprocessed_df['Region'] = processed_df['Region'].astype('category')\nprocessed_df['Exchange'] = processed_df['Exchange'].astype('category')\nprocessed_df['Currency'] = processed_df['Currency'].astype('category')","4d601f55":"stocks = pd.unique(processed_df['Index'])\nstock_dfs = []\nfor stock in stocks:\n    stock_dfs.append(processed_df[processed_df['Index'] == stock])\nstock_dfs[0]","d4f03e1f":"fig, ax = plt.subplots(figsize=(20, 15))\npatches = []\nfor i, stock_df in enumerate(stock_dfs):\n    color = (hsv(i\/len(stock_dfs)))\n    sns.lineplot(ax=ax, x=stock_df['Date'], y=stock_df['CloseUSD'], color=color)\n    patches.append(mpatches.Patch(color=color, label=stock_df['Index'].iloc[0]))\nax.legend(handles=patches)\n\nstock_dfs = { stock_df['Index'].iloc[0]: stock_df for stock_df in stock_dfs } # Convert list to dict\n# sns.lineplot(ax=ax, data=processed_df, x='Date', y='CloseUSD')\n# fig.show()","dc317135":"adf_test = ADFTest(alpha=0.05)\nfor stock in stocks:\n    print(stock,adf_test.should_diff(stock_dfs[stock][['CloseUSD', 'Date']].set_index('Date')))","53fd6c84":"stock_dfs['HSI'][['CloseUSD', 'Date']].set_index('Date').plot()","6cdf9b43":"NSEI = stock_dfs['NSEI']\nNSEI = NSEI.sort_values('Date').reset_index(drop=True)\ntrain_df = NSEI[NSEI['Date'] < '2018'][['CloseUSD', 'Date']].set_index('Date')\ntest_df = NSEI[NSEI['Date'] > '2018'][['CloseUSD', 'Date']].set_index('Date')\nplt.plot(train_df)\nplt.plot(test_df)\nplt.legend(['train', 'test'])","997cbd1a":"arima_model = auto_arima(train_df)","e6a1d56d":"arima_model.summary()","ee437167":"prediction = pd.DataFrame(arima_model.predict(n_periods=len(test_df)), index=test_df.index)\nprediction.columns = ['CloseUSD']\nprediction","1d5ed631":"plt.figure(figsize=(10,10))\nsns.lineplot(x=train_df.index, y=train_df['CloseUSD'])\nsns.lineplot(x=test_df.index, y=test_df['CloseUSD'])\nsns.lineplot(x=prediction.index, y=prediction['CloseUSD'])\nplt.legend(['train', 'test', 'prediction'])","b839e880":"<font size=\"5\">Let's make a plot of the closing prices of the stocks across time<\/font>","03977e0d":"Stationarity Test"}}