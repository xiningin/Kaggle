{"cell_type":{"4bf953f8":"code","33cbd660":"code","2955e6b4":"code","bf9ebd5c":"code","1c571312":"code","e9b4f0f4":"code","630d9c58":"code","cd298af4":"code","4d95c876":"code","8b1e3d3d":"code","1229fefe":"code","f2936e86":"code","6cd55029":"code","25f75215":"code","413ba1fa":"code","112f16ae":"code","3db0a848":"code","5c06c881":"code","5695737e":"code","1e6a3a9c":"code","da1152de":"code","698f6604":"code","f4ddd98b":"code","be110ba8":"code","3b7bf22a":"code","43222e7c":"code","f9f5738a":"code","045b273f":"code","cce24470":"code","4fc9c552":"code","a3ce8e30":"markdown","1aebed05":"markdown","88e92d03":"markdown","f7bce9ce":"markdown","7c4a3b64":"markdown","7ff8f729":"markdown","d3c7ccec":"markdown","ebe8aa1b":"markdown","e73024f5":"markdown","e032fcc8":"markdown","17c86900":"markdown","94336140":"markdown","645e66dc":"markdown","ef37bf83":"markdown","2ef90cbb":"markdown","268e090f":"markdown","4af009bf":"markdown","0f7e0ac5":"markdown","acd5e2d6":"markdown","55fe4dd3":"markdown","a9f4fbac":"markdown","ae0d65e8":"markdown","9dc9dac5":"markdown"},"source":{"4bf953f8":"## modelling libraries\nfrom sklearn.metrics import confusion_matrix, roc_auc_score, roc_curve, auc\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nimport xgboost as xgb\n\n## preprocessing libraries\nfrom sklearn.preprocessing import LabelEncoder\nfrom collections import Counter\nimport pandas as pd\nimport numpy as np \nimport itertools\nimport os \n\n## visualization libraries\nfrom wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nprint (\"all libraries imported successfully\")","33cbd660":"## read dataset\ntrain_path = \"..\/input\/Iris.csv\"\ntrain_df = pd.read_csv(train_path)\ntrain_copy = train_df.copy()\n\ntest_path = \"..\/input\/test.csv\"\ntest_df = pd.DataFrame()\nif os.path.exists(test_path):\n    test_df = pd.read_csv(test_path)\n\nprint (\"dataset loaded\")","2955e6b4":"## separate predictors and target variables\n_target = \"Species\"\nY = train_df[_target]\ndistinct_Y = Y.value_counts().index\n\n## separate the id column\n_id = \"Id\"\nif _id == \"\": ## if id is not present, create a dummy \n    _id = \"id\"\n    train_df[_id] = 1\n    test_df[_id] = 1\nif _id not in list(test_df.columns):\n    test_df[_id] = 1\n    \n## drop the target and id columns\ntrain_df = train_df.drop([_target, _id], axis=1)\ntest_id = test_df[_id]\ntest_df = test_df.drop([_id], axis=1)","bf9ebd5c":"## flag variables (used by bot to write the relevant code)\ntextcol = \"\"\ntag = \"num\"","1c571312":"## snapshot of train and test\ntrain_df.head()","e9b4f0f4":"## summary of train and test\ntrain_df.describe()","630d9c58":"tar_dist = dict(Counter(Y.values))\n\nxx = list(tar_dist.keys())\nyy = list(tar_dist.values())\n\nplt.figure(figsize=(5,3))\nsns.set(style=\"whitegrid\")\nax = sns.barplot(x=xx, y=yy, palette=\"rocket\")\nax.set_title('Distribution of Target')\nax.set_ylabel('count');\nax.set_xlabel(_target);","cd298af4":"if tag == \"doc\":\n    txts = []\n    for i, y in enumerate(distinct_Y):\n        txt = \" \".join(train_copy[train_copy[_target] == y][\"text\"]).lower()\n        txts.append(txt)\n\n    for j, text in enumerate(txts):\n        wc = WordCloud(background_color=\"black\", max_words=2000, stopwords=STOPWORDS)\n        wc.generate(text)\n        plt.figure(figsize=(9,8))\n        plt.axis(\"off\")\n        plt.title(\"Most frequent words - \" + distinct_Y[j], fontsize=20)\n        plt.imshow(wc.recolor(colormap= 'cool' , random_state=17), alpha=0.95)\n        plt.show()","4d95c876":"mcount = train_df.isna().sum() \nxx = mcount.index \nyy = mcount.values\n\nmissing_cols = 0\nfor each in yy:\n    if each > 0:\n        missing_cols += 1\nprint (\"there are \" + str(missing_cols) + \" columns in the dataset having missing values\")\n\nif missing_cols > 0:\n    plt.figure(figsize=(12,5))\n    sns.set(style=\"whitegrid\")\n    ax = sns.barplot(x=xx, y=yy, palette=\"gist_rainbow\")\n    ax.set_title('Number of Missing Values')\n    ax.set_ylabel('Number of Columns');","8b1e3d3d":"## find categorical columns in the dataset \nnum_cols = train_df._get_numeric_data().columns\ncat_cols = list(set(train_df.columns) - set(num_cols))\n\nprint (\"There are \" + str(len(num_cols)) + \" numerical columns in the dataset\")\nprint (\"There are \" + str(len(cat_cols)) + \" object type columns in the dataset\")","1229fefe":"get_corr = False\ncorr = train_df.corr()\nif len(corr) > 0:\n    get_corr = True\n    colormap = plt.cm.BrBG\n    plt.figure(figsize=(10,10));\n    plt.title('Pearson Correlation of Features', y=1.05, size=15);\n    sns.heatmap(corr, linewidths=0.1,vmax=1.0, square=True, cmap=colormap, linecolor='white', annot=True);\nelse:\n    print (\"No variables available for correlation\")","f2936e86":"columns = train_df.columns\nnum_cols = train_df._get_numeric_data().columns\ncat_cols = list(set(columns) - set(num_cols))\n    \nif tag == \"doc\":\n    print (\"No columns available for label encoding\")\nelif len(cat_cols) > 0:\n    for col in cat_cols: \n        le = LabelEncoder()\n        \n        if col in list(test_df.columns):\n            le.fit(list(train_df[col].values) + list(test_df[col].values))\n        else:\n            le.fit(list(train_df[col].values))\n        \n        train_df[col] = le.transform(list(train_df[col].values))\n        try:\n            test_df[col] = le.transform(list(test_df[col].values))\n        except:\n            pass\n        \n## label encode the target variable (if object type)\nif Y.dtype.name == \"object\":\n    le = LabelEncoder()\n    Y = le.fit_transform(Y.values)","6cd55029":"if tag == \"doc\":\n    train_df[textcol] = train_df[textcol].fillna(\"\")\n    if textcol in test_df:\n        test_df[textcol] = test_df[textcol].fillna(\"\")\nelse:\n    ## for numerical columns, replace the missing values by mean\n    train_df[num_cols] = train_df[num_cols].fillna(train_df[num_cols].mean())\n    try:\n        test_df[num_cols] = test_df[num_cols].fillna(test_df[num_cols].mean())\n    except:\n        pass \n    \n    ## for categorical columns, replace the missing values by mode\n    train_df[cat_cols] = train_df[cat_cols].fillna(train_df[cat_cols].mode())    \n    try:\n        test_df[cat_cols] = test_df[cat_cols].fillna(test_df[cat_cols].mode())\n    except:\n        pass\nprint (\"Treated missing values in the dataset\")","25f75215":"if tag == \"doc\":\n    tfidf = TfidfVectorizer(min_df=3,  max_features=None, analyzer='word', \n                            token_pattern=r'\\w{1,}', stop_words = 'english')\n    tfidf.fit(list(train_df[textcol].values))\n    xtrain = tfidf.transform(train_df[textcol].values) \n    if textcol in test_df.columns:\n        xtest = tfidf.transform(test_df[textcol].values)\nelse:\n    xtrain = train_df\n    xtest = test_df","413ba1fa":"if tag != \"doc\":\n    print (\"Lets plot the dataset distributions after preprocessing step ... \")\n    ## pair plots\n    sns.pairplot(train_df, palette=\"cool\")\n    \n    ## distributions\n    columns=train_df.columns\n    plt.subplots(figsize=(18,15))\n    length=len(columns)\n    for i,j in itertools.zip_longest(columns,range(length)):\n        plt.subplot((length\/2),3,j+1)\n        plt.subplots_adjust(wspace=0.2,hspace=0.5)\n        train_df[i].hist(bins=20, edgecolor='white')\n        plt.title(i)\n    plt.show()","112f16ae":"X_train, X_valid, y_train, y_valid = train_test_split(xtrain, Y, test_size=0.20, random_state=2018)","3db0a848":"X_train, X_valid, y_train, y_valid = train_test_split(xtrain, Y, test_size=0.20, random_state=2018)","5c06c881":"model1 = LogisticRegression()\nmodel1.fit(X_train, y_train)\nvalp = model1.predict(X_valid)\n\ndef generate_auc(y_valid, valp, model_name):\n    auc_scr = roc_auc_score(y_valid, valp)\n    print('The AUC for ' +model_name+ ' is :', auc_scr)\n\n    fpr, tpr, thresholds = roc_curve(y_valid, valp)\n    roc_auc = auc(fpr, tpr)\n\n    plt.figure(figsize=(6,5))\n    plt.title('Receiver Operating Characteristic')\n    plt.plot(fpr, tpr, 'purple', label = 'AUC = %0.2f' % roc_auc)\n    plt.legend(loc = 'upper left')\n    plt.plot([0, 1], [0, 1],'r--')\n    plt.xlim([0, 1])\n    plt.ylim([0, 1])\n\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')\n    plt.show()\n\nif len(distinct_Y) == 2:\n    generate_auc(y_valid, valp, model_name=\"logistic regression\")","5695737e":"def plot_confusion_matrix(cm, classes, normalize=False, title='Confusion matrix', cmap=plt.cm.Blues):\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    plt.figure(figsize=(6,5));\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    plt.grid(False)\n\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt), horizontalalignment=\"center\", \n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n        \n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\ncnf_matrix = confusion_matrix(y_valid, valp)\nnp.set_printoptions(precision=2)\n\nplt.figure(figsize=(8,8))\nplot_confusion_matrix(cnf_matrix, classes=distinct_Y, title='Confusion matrix Validation Set')\nplt.show()","1e6a3a9c":"model2 = DecisionTreeClassifier()\nmodel2.fit(X_train, y_train)\nvalp = model2.predict(X_valid)\n\nif len(distinct_Y) == 2:\n    generate_auc(y_valid,valp, model_name=\"decision tree classifier\")","da1152de":"cnf_matrix = confusion_matrix(y_valid, valp)\nnp.set_printoptions(precision=2)\n\nplt.figure(figsize=(6,5));\nplot_confusion_matrix(cnf_matrix, classes=distinct_Y, title='Confusion matrix Validation Set');\nplt.show();","698f6604":"model3 = RandomForestClassifier()\nmodel3.fit(X_train, y_train)\nvalp = model3.predict(X_valid)\n\nif len(distinct_Y) == 2:\n    generate_auc(y_valid,valp, model_name=\"random forest classifier\")","f4ddd98b":"cnf_matrix = confusion_matrix(y_valid, valp)\nnp.set_printoptions(precision=2)\n\nplt.figure(figsize=(6,5));\nplot_confusion_matrix(cnf_matrix, classes=distinct_Y, title='Confusion matrix Validation Set');\nplt.show();","be110ba8":"model4 = ExtraTreesClassifier()\nmodel4.fit(X_train, y_train)\nvalp = model4.predict(X_valid)\n\nif len(distinct_Y) == 2:\n    generate_auc(y_valid,valp, model_name=\"extratrees classifier\")","3b7bf22a":"cnf_matrix = confusion_matrix(y_valid, valp)\nnp.set_printoptions(precision=2)\n\nplt.figure(figsize=(6,5));\nplot_confusion_matrix(cnf_matrix, classes=distinct_Y, title='Confusion matrix Validation Set');\nplt.show();","43222e7c":"model5 = xgb.XGBClassifier(n_estimators=300, learning_rate=0.01)\nmodel5.fit(X_train, y_train)\nvalp = model5.predict(X_valid)\n\nif len(distinct_Y) == 2:\n    generate_auc(y_valid,valp, model_name=\"xgboost\")","f9f5738a":"cnf_matrix = confusion_matrix(y_valid, valp)\nnp.set_printoptions(precision=2)\n\nplt.figure(figsize=(6,5))\nplot_confusion_matrix(cnf_matrix, classes=distinct_Y, title='Confusion matrix Validation Set')\nplt.show()","045b273f":"plt.figure(figsize=(12,8))\nxgb.plot_importance(model5, max_num_features=10);","cce24470":"models = [model1, model2, model3, model4, model5]\npreds = np.zeros(shape=(xtest.shape[0],))\nif xtest.shape[0] == 0:\n    print (\"this is a dataset kernel, no test data for predictions\")\nelse:\n    for model in models:\n        pred = model.predict(xtest)\/ len(models)\n        preds += pred\n    print (preds[:100])","4fc9c552":"if xtest.shape[0] == 0:\n    print (\"This is a dataset kernel, no need to create a submission file :)\")\nelse:\n    pred = model5.predict(xtest)\n    sub = pd.DataFrame()\n    sub[_id] = test_id\n    sub[_target] = pred\n    sub.to_csv(\"baseline_submission.csv\", index=False)\n    print (\"Submission File Generated, here is the snapshot: \")\n    print (sub.head(10))","a3ce8e30":"### 3.4 Train and Validation sets split\n\nCreate the training and validation sets for training the model and validating it","1aebed05":"### 4.2 : Decision Tree Classifier\n\nLets train a decision tree classifier","88e92d03":"### 3.3 Feature Engineering (only for text fields)\n\nIn this section, we will create relevant features which can be used in the modelling\n\n#### 3.3.1 Tf IDF features","f7bce9ce":"### 3.2 Missing Values Treatment\n\nHandle the missing values, for continuous variables, replace by mean. For categorical variables, replace by mode","7c4a3b64":"### 2.2 Dataset snapshot and summary\n\nLets look at the dataset snapshot and the summary","7ff8f729":"## Step 7 : Create Submission File\n\nFinally, create the submission file from the extereme graident boosting model","d3c7ccec":"## Step 1: Prepare Environment\nAs the first step, lets load all the required libraries to be used in the kernel","ebe8aa1b":"## Step 3: Data Preprocessing\n\nIn the data preprocessing step, we will perform label encoding of categorical variables and handle missing values.\n\n### 3.1 Label Encoding\nIn this step, convert the categorical variables into label encoded forms","e73024f5":"## Baseline Model Pipeline   \n\nHi, This kernel is automatically generated by the [Aster](https:\/\/github.com\/shivam5992\/aster) - The kaggle bot to generate baseline kernels for a variety of datasets \/ competitions. In this kernel, I am using the given dataset for exploration, preprocessing, modelling purposes. Let me walk you through the contents of this kernel:\n\n### Contents \n\n1. Environment Preparation\n2. Quick Exploration   \n&nbsp;&nbsp;&nbsp;&nbsp; 2.1 Dataset Preparation   \n&nbsp;&nbsp;&nbsp;&nbsp; 2.2 Dataset Snapshot and Summary    \n&nbsp;&nbsp;&nbsp;&nbsp; 2.3 Target Variable Distribution    \n&nbsp;&nbsp;&nbsp;&nbsp; 2.4 Missing Values    \n&nbsp;&nbsp;&nbsp;&nbsp; 2.5 Variable Types  \n&nbsp;&nbsp;&nbsp;&nbsp; 2.6 Variable Correlations\n3. Preprocessing  \n&nbsp;&nbsp;&nbsp;&nbsp; 3.1 Label Encoding    \n&nbsp;&nbsp;&nbsp;&nbsp; 3.2 Missing Values Treatment     \n&nbsp;&nbsp;&nbsp;&nbsp; 3.3 Feature Engineering (text fields)  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.3.1 TF-IDF Vectorizor  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.3.2 Top Keywords - Wordcloud    \n&nbsp;&nbsp;&nbsp;&nbsp; 3.4 Train Test Split    \n4. Modelling   \n&nbsp;&nbsp;&nbsp;&nbsp; 4.1 Logistic Regression  \n&nbsp;&nbsp;&nbsp;&nbsp; 4.2 Decision Tree    \n&nbsp;&nbsp;&nbsp;&nbsp; 4.3 Random Forest  \n&nbsp;&nbsp;&nbsp;&nbsp; 4.4 ExtraTrees Classifier  \n&nbsp;&nbsp;&nbsp;&nbsp; 4.5 Extereme Gradient Boosting  \n5. Feature Importance   \n6. Model Ensembling  \n&nbsp;&nbsp;&nbsp;&nbsp; 6.1 A simple Blender  \n7. Creating Submission","e032fcc8":"## Step 6 : Model Ensembling\n\nLets create a simple blender. Other options to extend are stacking \/ majority voting \/ rank averaging etc.","17c86900":"### 2.5 Variable Types\n\nLets count the number of numerical and categorical columns in the dataset","94336140":"### 2.4 Missing Value Counts \n\nLets check the count of missing values in the datasets","645e66dc":"### 2.6 Variable Correlations (Only Numerical Fields)\n\nLets plot the correlations among the variables. The generated graph can give an idea about features which are highly, moderately or least correlated with one another.","ef37bf83":"### 3.4 Train and Validation sets split\n\nCreate the training and validation sets for training the model and validating it","2ef90cbb":"### 4.4 : ExtraTrees Classifier\n\nNow, lets train another tree based model : extra trees classifier","268e090f":"## Step 5: Feature Importance\n\nLets look at some of the important features from the dataset","4af009bf":"### 4.5 : xgBoost Classifier\n\nLets train the extereme gradient boosting : xgboost classifier","0f7e0ac5":"lets generate some plots related to dataset","acd5e2d6":"## Step 2: Quick Exploration\nIn the next step, lets load the dataset into my memory and perform a quick exploratory analysis \n\n### 2.1 Dataset Preparation","55fe4dd3":"### 4.3 : Random Forest Classifier\n\nNow, lets train a tree based model : random forest","a9f4fbac":"## Step 4 : Create baseline model\n\nNext step is the modelling step, lets start with the simple linear model \n\n### 4.1 : Logistic Regression\n\nTrain a binary classifier logistic regression","ae0d65e8":"### 2.3 Target variable distribution\n\nLets plot the distribution of target variable","9dc9dac5":"Thanks for viewing this kernel, hopefully you can get ideas to start your own kernel."}}