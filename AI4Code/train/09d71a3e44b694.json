{"cell_type":{"02452059":"code","daf292e5":"code","2b91992c":"code","b4914d82":"code","291c981e":"code","d0061a92":"code","4b73194b":"code","26985d6f":"code","c639d458":"code","53f2cc09":"code","20b2ba9d":"code","ac18e4be":"code","bfd43ba5":"code","3b5314fb":"code","de6b9c18":"code","ba4db7bb":"code","dd70959e":"code","866bef47":"code","d2b9d055":"markdown","06b84fc6":"markdown","dfd036b0":"markdown","12e124ff":"markdown","70f5449f":"markdown","f0db2fc2":"markdown","39fc2bbf":"markdown","70972c78":"markdown","8a703e55":"markdown","75d606a0":"markdown","ee4cad1b":"markdown","347a1c24":"markdown","d762322a":"markdown","ea3c0bcf":"markdown","5fb79290":"markdown","9174e84b":"markdown"},"source":{"02452059":"# Import Libraries\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport cv2 \nimport os\n\nimport keras.backend as k\nimport tensorflow as tf\n\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm","daf292e5":"# Getting the training images and labels\ntrain = pd.read_csv('..\/input\/train.csv')\n\ntrain_labels = train['has_cactus']\ntrain_images = []\n\nfor img in tqdm(train['id']):\n    img_path = '..\/input\/train\/train\/'+img;\n    train_images.append(cv2.resize(cv2.imread(img_path), (70, 70)))\ntrain_X = np.asarray(train_images)\ntrain_Y = pd.DataFrame(train_labels)","2b91992c":"plt.title(train_Y['has_cactus'][0])\n_ = plt.imshow(train_X[0])","b4914d82":"plt.title(train_Y['has_cactus'][1000])\n_ = plt.imshow(train_X[1000])","291c981e":"x_train, x_test, y_train, y_test = train_test_split(train_X, train_Y, test_size=0.2, random_state=42)","d0061a92":"import keras\nfrom keras import layers\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout, BatchNormalization, Activation\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator","4b73194b":"\ninput_shape = (70, 70, 3)\ndropout_dense_layer = 0.6\n\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=input_shape))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(128, (3, 3)))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\n\nmodel.add(Flatten())\nmodel.add(Dense(1024))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(dropout_dense_layer))\n\nmodel.add(Dense(256))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(dropout_dense_layer))\n\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\n","26985d6f":"opt = keras.optimizers.adam(lr=0.0001, decay=1e-6)\nmodel.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])","c639d458":"datagen = ImageDataGenerator()","53f2cc09":"datagen.fit(x_train)","20b2ba9d":"history = model.fit_generator(datagen.flow(x_train, y_train, batch_size=50), steps_per_epoch=x_train.shape[0], epochs=2, validation_data=(x_test, y_test), verbose=1)","ac18e4be":"[loss, accuracy] = model.evaluate(x_test, y_test)","bfd43ba5":"print('Test Set Accuracy: '+str(accuracy*100)+\"%\");","3b5314fb":"# Getting the test set images\ntest_path = '..\/input\/test\/test\/'\ntest_images_names = []\n\nfor filename in tqdm(os.listdir(test_path)):\n    test_images_names.append(filename)\n    \ntest_images_names.sort()\n\nimages_test = []\n\nfor image_id in tqdm(test_images_names):\n    images_test.append(np.array(cv2.resize(cv2.imread(test_path + image_id), (70, 70))))\n    \nimages_test = np.asarray(images_test)\nimages_test = images_test.astype('float32')\nimages_test \/= 255","de6b9c18":"# making predictions\nprediction = model.predict(images_test)","ba4db7bb":"predict = []\nfor i in range(len(prediction)):\n    if prediction[i][0]>0.5:\n        answer = prediction[i][0]\n    else:\n        answer = prediction[i][0]\n    predict.append(answer)","dd70959e":"submission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['has_cactus'] = predict","866bef47":"# Creating the final submission file\nsubmission.to_csv('sample_submission.csv',index = False)","d2b9d055":"# Aerial Cactus Identification","06b84fc6":"We will use the ImageDataGenerator() for processing our Images. It generates tensors of the image data with real-time data augmentation. For more details on how to use it go [here](https:\/\/machinelearningmastery.com\/image-augmentation-deep-learning-keras\/).","dfd036b0":"Finally, we have got a good accuracy and now it's time to make predictions for the test set data","12e124ff":"Here we will use [Keras](https:\/\/keras.io\/) library to create the CNN.\n\nWe will create this kernel in four main steps:\n* Get the data\n* Visualise the data\n* Implement the model\n* Make predictions","70f5449f":"## Getting Started","f0db2fc2":"In this kernel we will be using a CNN implemented with the help of Keras for required task.","39fc2bbf":"## Implementing the model","70972c78":"This is the first step in our pipeline. In this step we will import the required libraries and then we will import the training and test data.","8a703e55":"### Convolutional Neural Networks","75d606a0":"## Visualising the Data","ee4cad1b":"Here, we will split the dataset into training and test set data. We will use the training data for training purposes and test data will help us analyse how well our model works on previously unseen data elements. We have used scikit-learn's [train_test_split](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.train_test_split.html) function for this purpose.","347a1c24":"Now let's visualise images and labels in the dataset to get a little bit of intuition about the data. Here we have displayed an image for each label.","d762322a":"![](https:\/\/www.researchgate.net\/publication\/323227084\/figure\/fig3\/AS:594709642756096@1518801236681\/Structure-of-the-convolutional-neural-network.png)","ea3c0bcf":"In this kernel we will use Convolutional Neural Networks to build a model that can identify if there is a cactus in an image. **If you found this kernel useful then please consider upvoting :)**","5fb79290":"## Making Predictions","9174e84b":"CNNs are very much similar to the traditional Neural Networks. CNNs are specially designed for Image recoginition and Computer Vision purposes. They already assume that the input will be an image and hence allows us to encode them accordingly. For more details on CNNs read [this](http:\/\/cs231n.github.io\/convolutional-networks\/)"}}