{"cell_type":{"776ada0d":"code","b6b9ef9a":"code","83bb9797":"code","3c63335e":"code","0cc366ee":"code","4c0608c2":"code","626684a0":"code","47b8fd7b":"code","a8a0f496":"code","1d2cb876":"code","e7b43977":"code","78ee0f00":"code","f0d97037":"code","3d6a31fe":"code","4499e2cc":"code","8a04eb20":"code","3067ce19":"code","8f616606":"code","2201a7e5":"code","161d4709":"code","07b8cefd":"code","81b22140":"code","922eaf1f":"code","7a7d3e43":"code","6f09dcde":"code","e0d0f757":"code","c2d2fac4":"code","c736198e":"markdown","bbbbcc2e":"markdown","3a15a0f7":"markdown","dbcfc312":"markdown","ddc16015":"markdown","3e7c5878":"markdown","8de7a8fd":"markdown","729fb8fc":"markdown","90fc8ce8":"markdown","db8205a8":"markdown","448bba82":"markdown","d28041ba":"markdown","786ee31c":"markdown","9f6cfc3f":"markdown","6e66c8c7":"markdown","f3f32b3f":"markdown","a09d1fc3":"markdown","05761a54":"markdown","be3b31dc":"markdown"},"source":{"776ada0d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b6b9ef9a":"!pip install biopython\n!pip install squiggle","83bb9797":"import numpy as np\nimport pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport os","3c63335e":"from Bio import SeqIO\nfor sequence in SeqIO.parse('..\/input\/coronavirus-genome-sequence\/MN908947.fna', \"fasta\"):\n    print(sequence.seq)\n","0cc366ee":"print(len(sequence),'nucliotides')","4c0608c2":"from Bio.SeqRecord import SeqRecord\nfrom Bio import SeqIO\nDNAsequence = SeqIO.read('..\/input\/coronavirus-genome-sequence\/MN908947.fna', \"fasta\")","626684a0":"print(DNAsequence)","47b8fd7b":"DNAfile = open(\"..\/input\/coronavirus-genome-sequence\/MN908947.txt\" , 'r')\nfile_contents = DNAfile.read()\nprint(file_contents)","a8a0f496":"#reading the pdffile\n!pip install PyPDF2","1d2cb876":"import PyPDF2","e7b43977":"pdffile = open('..\/input\/coronavirus-genome-sequence\/A_new_coronavirus_associated_with_human_respirator.pdf' , 'rb')\npdfreader = PyPDF2.PdfFileReader(pdffile)\nprint(pdfreader.numPages)","78ee0f00":"pageobj = pdfreader.getPage(0)","f0d97037":"print(pageobj.extractText())\npdffile.close()","3d6a31fe":"DNA = DNAsequence.seq\n#Convert DNA into mRNA Sequence\nmRNA = DNA.transcribe() #Transcribe a DNA sequence into RNA.\nprint(mRNA)","4499e2cc":"print(len(mRNA) , 'nucleotides')","8a04eb20":"Amino_Acid = mRNA.translate(table=1, cds=False)\nprint('Amino Acid', Amino_Acid)\n","3067ce19":"print(\"Length of Protein:\",len(Amino_Acid))\nprint(\"Length of Original mRNA:\",len(mRNA))","8f616606":"import re\ndelimeter = '*'\nsplited_amino_acid = Amino_Acid.split()\nprint(splited_amino_acid)","2201a7e5":"from Bio.Data import CodonTable\nprint(CodonTable.unambiguous_rna_by_name['Standard'])","161d4709":"#Identify all the Proteins (chains of amino acids)\nProteins = Amino_Acid.split('*') # * is translated stop codon\ndf = pd.DataFrame(Proteins)\ndf.describe()\nprint('Total proteins:', len(df))\n","07b8cefd":"print(df)","81b22140":"def conv(item):\n    return len(item)\ndef to_str(item):\n    return str(item)\ndf['sequence_str'] = df[0].apply(to_str)\ndf['length'] = df[0].apply(conv)\ndf.rename(columns={0: \"sequence\"}, inplace=True)\ndf.head()\n# Take only longer than 20\nfunctional_proteins = df.loc[df['length'] >= 20]\nprint('Total functional proteins:', len(functional_proteins))\nfunctional_proteins.describe()","922eaf1f":"df","7a7d3e43":"print(df['length'].max())\nprint(df['length'].min())","6f09dcde":"print(df['sequence_str'])","e0d0f757":"from __future__ import division\npoi_list = []\nMW_list = []\nfrom Bio.SeqUtils import ProtParam\nfor record in Proteins[:]:\n    print(\"\\n\")\n    X = ProtParam.ProteinAnalysis(str(record))\n    POI = X.count_amino_acids()\n    poi_list.append(POI)\n    MW = X.molecular_weight()\n    MW_list.append(MW)\n    print(\"Protein of Interest = \", POI)\n    print(\"Amino acids percent =    \",str(X.get_amino_acids_percent()))\n    print(\"Molecular weight = \", MW_list)\n    print(\"Aromaticity = \", X.aromaticity())\n    print(\"Flexibility = \", X.flexibility())\n    print(\"Isoelectric point = \", X.isoelectric_point())\n    print(\"Secondary structure fraction = \",   X.secondary_structure_fraction())","c2d2fac4":"MoW = pd.DataFrame(data = MW_list,columns = [\"Molecular Weights\"] )\n#plot POI\npoi_list = poi_list[10]\n                    \nplt.figure(figsize=(10,6));\nplt.bar(poi_list.keys(), list(poi_list.values()), align='center')","c736198e":"#### Loading the basic libraries","bbbbcc2e":"## *So we have seen how we can interpret, analyze the COVID-19 DNA sequence data, and tried to get as many insights regarding the proteins that made it up.*","3a15a0f7":"![codon table](https:\/\/readbiology.com\/wp-content\/uploads\/2019\/05\/GENETIC-CODE-CHART.png)","dbcfc312":"### A codon is a sequence of three DNA or RNA nucleotides that corresponds with a specific amino acid or stop signal during protein synthesis. DNA and RNA molecules are written in a language of four nucleotides; meanwhile, the language of proteins includes 20 amino acids. Codons provide the key that allows these two languages to be translated into each other. Each codon corresponds to a single amino acid (or stop signal), and the full set of codons is called the genetic code. The genetic code includes 64 possible permutations, or combinations, of three-letter nucleotide sequences that can be made from the four nucleotides. Of the 64 codons, 61 represent amino acids, and three are stop signals. For example, the codon CAG represents the amino acid glutamine, and TAA is a stop codon. The genetic code is described as degenerate, or redundant, because a single amino acid may be coded for by more than one codon. When codons are read from the nucleotide sequence, they are read in succession and do not overlap with one anothe","ddc16015":"### Note that there are fewer sequences in the protein than the mRNA that is because 3 mRNA\u2019s are used to produce a single subunit of a protein, known as an amino acid, using the codon table shown below. The * is used to denote a stop codon, in these regions the protein has finished its full length. Many of these occur frequently and result in short lengths of protein, more likely.","3e7c5878":"## The basic difference between DNA and RNA is that the base THYMINE(T) is replaced with URACIL(U)","8de7a8fd":"## RNA codon table","729fb8fc":"### The coronaviruses are members of a family of enveloped viruses that replicate in the cytoplasm of animal host cells. They are identified by the presence of a single-stranded plus-sense RNA genome((+)ssRNA classification of viruses) about 30 kb in length that has a 5\u2032 cap structure and 3\u2032 polyadenylation tract. (Larget known virus).\n### Now let us play with the COVID2\u201319 DNA sequence data using python.\n### To start with, install Python packages like Biopython and squiggle will help you when dealing with biological sequence data in Python.","90fc8ce8":"### Since input sequence is FASTA (DNA), and Coronavirus is RNA type of virus, we need to:\nTranscribe DNA to RNA (ATTAAAGGTT\u2026 => AUUAAAGGUU\u2026)\n2. Translate RNA to Amino acid sequence (AUUAAAGGUU\u2026 => IKGLYLPR*Q\u2026)\nIn the current scenario, the .fna file starts with ATTAAAGGTT, then we call transcribe() so T (thymine) is replaced with U (uracil), so we get the RNA sequence which starts with AUUAAAGGUU.","db8205a8":"![Have a look on this codon sequence](https:\/\/3.bp.blogspot.com\/-LEpSIW6WYjI\/WnCuZp8gIYI\/AAAAAAAABLk\/cow12ByTSd8OQK98lAhBAQFmQX-zuXARACLcBGAs\/s1600\/mRNA%2BCodons.png)","448bba82":"### Loading Complementary DNA Sequence into an alignable file","d28041ba":"### In our scenario, the sequence looks like this: IKGLYLPR * QTNQLSISCRSVL * TNFKICVAVTRLHA, where:\n### IKGLYLPR encodes the first protein (every letter encodes single amino-acid) QTNQLSISCRSVL encodes the second protein, and so on.","786ee31c":"### We will use Bio.SeqIO from Biopython for parsing DNA sequence data(fasta). It provides a simple uniform interface to input and output assorted sequence file formats.","9f6cfc3f":"## **DNA CODON**","6e66c8c7":"![Image](https:\/\/miro.medium.com\/max\/1094\/0*HzBULafvF1cZumHA.png)","f3f32b3f":"### Next, we need to translate the mRNA sequence to amino-acid sequence using \"translate()\" method, we get something like IKGLYLPR*Q ( is so-called STOP codon, effectively is a separator for proteins).","a09d1fc3":"![Amino Acids with their short forms](https:\/\/blogs.oregonstate.edu\/psquared\/files\/2016\/04\/AminoAcidAbbreviations.gif)","05761a54":"### The *genetic code* is the set of rules by which information encoded in genetic material (DNA or RNA sequences) is translated into proteins (amino acid sequences) by living cells.\n\n#### Specifically, the code defines a mapping between tri-nucleotide sequences called codons and amino acids; every triplet of nucleotides in a nucleic acid sequence specifies a single amino acid.","be3b31dc":"## **GENETIC CODE**"}}