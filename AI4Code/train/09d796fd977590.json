{"cell_type":{"e18b9909":"code","c3d1e0d9":"code","a7cc757f":"code","d8ee6047":"code","469aa240":"code","357d3991":"code","4b5b0311":"code","ede41088":"code","3e2c0c09":"code","df53887e":"code","d53313c4":"code","9664a46e":"code","e740e78f":"code","74779114":"code","e8d73ec4":"code","62361371":"code","de7fc225":"code","a88a1e43":"code","cd36191d":"code","daefb030":"code","2094da6e":"code","03642d77":"code","fdf734cd":"code","0e138c76":"code","d0bb4265":"code","6d71b532":"code","19fe4ced":"markdown","32bc7143":"markdown","1d9b4107":"markdown","4630fdfe":"markdown","ba1725dd":"markdown","92039f4f":"markdown","ea0af3e2":"markdown","7ee36a04":"markdown","a3dff7d6":"markdown","8dc54759":"markdown","3501e561":"markdown","b3b9f7cd":"markdown","57309c47":"markdown","e1d487b5":"markdown","cb2b91b5":"markdown","9c1b8d67":"markdown","378f3648":"markdown","04bd7d3d":"markdown","3e904258":"markdown","c5533f8c":"markdown","4d33dde5":"markdown","38756b43":"markdown","4eee58d1":"markdown","7cfe6b9f":"markdown","ae81590e":"markdown","a2a9f34a":"markdown","a1f3a318":"markdown","e4d22afd":"markdown","422d5424":"markdown","9f746a8e":"markdown","ea19fd70":"markdown","f1f991c3":"markdown","5a046686":"markdown","4eb486bb":"markdown","bfd572c9":"markdown","2527927e":"markdown","631ad9c2":"markdown","d8f62739":"markdown","650c3c64":"markdown","a0fc742a":"markdown","4867b21a":"markdown","c018aa00":"markdown","bd832c21":"markdown","d9c03657":"markdown","42e8fbcf":"markdown","4e7bff91":"markdown","e347fd9f":"markdown","a79948dd":"markdown","99085134":"markdown","a1f9f80e":"markdown","9559e1c6":"markdown","db896c05":"markdown","fde288b2":"markdown","05a442e5":"markdown","532a7d9b":"markdown","3e40e1ff":"markdown","067a8b17":"markdown","317fa656":"markdown","2e37988f":"markdown","d41e3749":"markdown","7a1cd8ad":"markdown","75cb3310":"markdown","18370c6f":"markdown","0fcbffa2":"markdown","de888e33":"markdown","6a7d4c76":"markdown","bd0209fb":"markdown"},"source":{"e18b9909":"import tensorflow as tf\nfrom tensorflow import keras","c3d1e0d9":"class Linear(keras.layers.Layer):\n    def __init__(self, units=32, input_dim=32):\n        super(Linear, self).__init__()\n        w_init = tf.random_normal_initializer()\n        self.w = tf.Variable(\n            initial_value=w_init(shape=(input_dim, units), dtype=\"float32\"),\n            trainable=True,\n        )\n        b_init = tf.zeros_initializer()\n        self.b = tf.Variable(\n            initial_value=b_init(shape=(units,), dtype=\"float32\"), trainable=True\n        )\n    \n    def call(self, inputs):\n        return tf.matmul(inputs, self.w) + self.b","a7cc757f":"x = tf.ones((2, 2))\nlinear_layer = Linear(4, 2)\ny = linear_layer(x)\nprint(y)","d8ee6047":"assert linear_layer.weights == [linear_layer.w, linear_layer.b]","469aa240":"class Linear(keras.layers.Layer):\n    def __init__(self, units=32, input_dim=32):\n        super(Linear, self).__init__()\n        self.w = self.add_weight(\n            shape=(input_dim, units), initializer=\"random_normal\", trainable=True\n        )\n        self.b = self.add_weight(shape=(units,), initializer=\"zeros\", trainable=True)\n    \n    def call(self, inputs):\n        return tf.matmul(inputs, self.w) + self.b\n\n\nx = tf.ones((2, 2))\nlinear_layer = Linear(4, 2)\ny = linear_layer(x)\nprint(y)","357d3991":"class ComputeSum(keras.layers.Layer):\n    def __init__(self, input_dim):\n        super(ComputeSum, self).__init__()\n        self.total = tf.Variable(initial_value=tf.zeros((input_dim,)), trainable=False)\n    \n    def call(self, inputs):\n        self.total.assign_add(tf.reduce_sum(inputs, axis=0))\n        return self.total\n\n\nx = tf.ones((2, 2))\nmy_sum = ComputeSum(2)\ny = my_sum(x)\nprint(y.numpy())\ny = my_sum(x)\nprint(y.numpy())","4b5b0311":"print(\"weights:\", len(my_sum.weights))\nprint(\"non_trainable weights:\", len(my_sum.non_trainable_weights))\n\n# \ud559\uc2b5\uac00\ub2a5\ud55c \uac00\uc911\uce58\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4:\nprint(\"trainable_weights:\", my_sum.trainable_weights)","ede41088":"class Linear(keras.layers.Layer):\n    def __init__(self, units=32, input_dim=32):\n        super(Linear, self).__init__()\n        self.w = self.add_weight(\n            shape=(input_dim, units), initializer=\"random_normal\", trainable=True\n        )\n        self.b = self.add_weight(shape=(units,), initializer=\"zeros\", trainable=True)\n    \n    def call(self, inputs):\n        return tf.matmul(inputs, self.w) + self.b","3e2c0c09":"class Linear(keras.layers.Layer):\n    def __init__(self, units=32):\n        super(Linear, self).__init__()\n        self.units = units\n    \n    def build(self, input_shape):\n        self.w = self.add_weight(\n            shape=(input_shape[-1], self.units),\n            initializer=\"random_normal\",\n            trainable=True,\n        )\n        self.b = self.add_weight(\n            shape=(self.units,), initializer=\"random_normal\", trainable=True\n        )\n    \n    def call(self, inputs):\n        return tf.matmul(inputs, self.w) + self.b","df53887e":"# \uc0dd\uc131\ud560 \ub54c, \uc5b4\ub5a4 \uc785\ub825\uc5d0\uc11c \uc774\uac83\uc774 \ud638\ucd9c\ub420 \uc9c0 \ubaa8\ub985\ub2c8\ub2e4\nlinear_layer = Linear(32)\n\n# \uce35\uc758 \uac00\uc911\uce58\ub4e4\uc740 \uce35\uc774 \ucc98\uc74c \ud638\ucd9c\ub418\uc5c8\uc744 \ub54c \ub3d9\uc801\uc73c\ub85c \uc0dd\uc131\ub429\ub2c8\ub2e4\ny = linear_layer(x)","d53313c4":"# \uc704\uc5d0\uc11c \uc815\uc758\ud55c `build` \uba54\uc18c\ub4dc\ub97c \uac00\uc9c0\ub294\n# Linear \ud074\ub798\uc2a4\ub97c \uc7ac\uc0ac\uc6a9\ud55c\ub2e4\uace0 \uac00\uc815\ud569\uc2dc\ub2e4.\n\nclass MLPBlock(keras.layers.Layer):\n    def __init__(self):\n        super(MLPBlock, self).__init__()\n        self.linear_1 = Linear(32)\n        self.linear_2 = Linear(32)\n        self.linear_3 = Linear(1)\n    \n    def call(self, inputs):\n        x = self.linear_1(inputs)\n        x = tf.nn.relu(x)\n        x = self.linear_2(x)\n        x = tf.nn.relu(x)\n        return self.linear_3(x)\n\n\nmlp = MLPBlock()\ny = mlp(tf.ones(shape=(3, 64))) # `mlp`\uc758 \uccab \ud638\ucd9c\uc774 \uac00\uc911\uce58\ub97c \uc0dd\uc131\ud560 \uac83\uc785\ub2c8\ub2e4.\nprint(\"weights:\", len(mlp.weights))\nprint(\"trainable weights:\", len(mlp.trainable_weights))","9664a46e":"# \ud65c\ub3d9 \uc815\uaddc\ud654 \uc190\uc2e4\uc744 \uc0dd\uc131\ud558\ub294 \uce35\nclass ActivityRegularizationLayer(keras.layers.Layer):\n    def __init__(self, rate=1e-2):\n        super(ActivityRegularizationLayer, self).__init__()\n        self.rate = rate\n    \n    def call(self, inputs):\n        self.add_loss(self.rate * tf.reduce_sum(inputs))\n        return inputs","e740e78f":"class OuterLayer(keras.layers.Layer):\n    def __init__(self):\n        super(OuterLayer, self).__init__()\n        self.activity_reg = ActivityRegularizationLayer(1e-2)\n    \n    def call(self, inputs):\n        return self.activity_reg(inputs)\n\n\nlayer = OuterLayer()\nassert len(layer.losses) == 0 # \uce35\uc774 \ud638\ucd9c\ub41c \uc801\uc774 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uc544\uc9c1 \uc190\uc2e4\uc774 \uc5c6\uc2b5\ub2c8\ub2e4\n\n_ = layer(tf.zeros(1, 1))\nassert len(layer.losses) == 1 # \ud558\ub098\uc758 \uc190\uc2e4\uac12\uc744 \uc0dd\uc131\ud588\uc2b5\ub2c8\ub2e4\n\n# `layer.losses`\ub294 \uac01\uac01\uc758 __call__\uc758 \uc2dc\uc791\ub9c8\ub2e4 \ucd08\uae30\ud654\ub429\ub2c8\ub2e4\n_ = layer(tf.zeros(1, 1))\nassert len(layer.losses) == 1 # \uc774\uac83\uc740 \uc704\uc758 \ud638\ucd9c \ub3d9\uc548\uc5d0 \uc0dd\uc131\ub41c \uc190\uc2e4\uc785\ub2c8\ub2e4","74779114":"class OuterLayerWithKernelRegularizer(keras.layers.Layer):\n    def __init__(self):\n        super(OuterLayerWithKernelRegularizer, self).__init__()\n        self.dense = keras.layers.Dense(\n            32, kernel_regularizer=tf.keras.regularizers.l2(1e-3)\n        )\n    \n    def call(self, inputs):\n        return self.dense(inputs)\n\n\nlayer = OuterLayerWithKernelRegularizer()\n_ = layer(tf.zeros((1, 1)))\n\n# \uc774\uac83\uc740 \uc704\uc758 `kernel_regularizer`\uc5d0 \uc758\ud574 \ub9cc\ub4e4\uc5b4\uc9c4\n# `1e-3 * sum(layer.dense.kernel ** 2)`\uc785\ub2c8\ub2e4.\nprint(layer.losses)","e8d73ec4":"import numpy as np\n\ninputs = keras.Input(shape=(3,))\noutputs = ActivityRegularizationLayer()(inputs)\nmodel = keras.Model(inputs, outputs)\n\n# `compile` \uc548\uc5d0 \ub118\uaca8\uc9c4 \uc190\uc2e4\uc774 \uc788\ub2e4\uba74,\n# \uc815\uaddc\ud654 \uc190\uc2e4\uc740 \uadf8\uac83\uc5d0 \ucd94\uac00\ub429\ub2c8\ub2e4\nmodel.compile(optimizer=\"adam\", loss=\"mse\")\nmodel.fit(np.random.random((2, 3)), np.random.random((2, 3)))\n\n# \uc815\uc0c1\ud30c \ub3d9\uc548\uc5d0 `add_loss` \ud638\ucd9c\uc744 \ud1b5\ud574,\n# \ubaa8\ub378\uc774 \uc774\ubbf8 \ucd5c\uc18c\ud654\ud574\uc57c \ud558\ub294 \uc190\uc2e4\uc744 \uac00\uc9c0\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0,\n# `compile`\uc5d0 \uc5b4\ub5a4 \uc190\uc2e4\ub3c4 \ub118\uae30\uc9c0 \uc54a\ub294 \uac83\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4!\nmodel.compile(optimizer=\"adam\")\nmodel.fit(np.random.random((2, 3)), np.random.random((2, 3)))","62361371":"class LogisticEndpoint(keras.layers.Layer):\n    def __init__(self, name=None):\n        super(LogisticEndpoint, self).__init__(name=name)\n        self.loss_fn = keras.losses.BinaryCrossentropy(from_logits=True)\n        self.accuracy_fn = keras.metrics.BinaryAccuracy()\n    \n    def call(self, targets, logits, sample_weights=None):\n        # \ud559\uc2b5 \uc2dc\uac04 \uc190\uc2e4 \uac12\uc744 \uacc4\uc0b0\ud558\uace0\n        # `self.add_loss()`\ub97c \uc0ac\uc6a9\ud574 \uce35\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4.\n        loss = self.loss_fn(targets, logits, sample_weights)\n        self.add_loss(loss)\n        \n        # \ud3c9\uac00 \uc9c0\ud45c\ub85c\uc368 \uc815\ud655\ub3c4\ub97c \uae30\ub85d\ud558\uace0\n        # `self.add_metric()`\uc744 \uc0ac\uc6a9\ud574 \uce35\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4.\n        acc = self.accuracy_fn(targets, logits, sample_weights)\n        self.add_metric(acc, name=\"accuracy\")\n        \n        # (`.predict()`\uc744 \uc704\ud55c) \ucd94\ub860 \uc2dc\uac04 \uc608\uce21 \ud150\uc11c\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n        return tf.nn.softmax(logits)","de7fc225":"layer = LogisticEndpoint()\n\ntargets = tf.ones((2, 2))\nlogits = tf.ones((2, 2))\ny = layer(targets, logits)\n\nprint(\"layer.metrics:\", layer.metrics)\nprint(\"current accuracy value:\", float(layer.metrics[0].result()))","a88a1e43":"inputs = keras.Input(shape=(3,), name=\"inputs\")\ntargets = keras.Input(shape=(10,), name=\"targets\")\nlogits = keras.layers.Dense(10)(inputs)\npredictions = LogisticEndpoint(name=\"predictions\")(logits, targets)\n\nmodel = keras.Model(inputs=[inputs, targets], outputs=predictions)\nmodel.compile(optimizer=\"adam\")\n\ndata = {\n    \"inputs\": np.random.random((3, 3)),\n    \"targets\": np.random.random((3, 10)),\n}\nmodel.fit(data)","cd36191d":"class Linear(keras.layers.Layer):\n    def __init__(self, units=32):\n        super(Linear, self).__init__()\n        self.units = units\n    \n    def build(self, input_shape):\n        self.w = self.add_weight(\n            shape=(input_shape[-1], self.units),\n            initializer=\"random_normal\",\n            trainable=True,\n        )\n        self.b = self.add_weight(\n            shape=(self.units,), initializer=\"random_normal\", trainable=True\n        )\n    \n    def call(self, inputs):\n        return tf.matmul(inputs, self.w) + self.b\n    \n    def get_config(self):\n        return {\"units\": self.units}\n\n# \uc774\uc81c \uc774 \uc124\uc815\uc73c\ub85c\ubd80\ud130 \uce35\uc744 \uc7ac\uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:\nlayer = Linear(64)\nconfig = layer.get_config()\nprint(config)\nnew_layer = Linear.from_config(config)","daefb030":"class Linear(keras.layers.Layer):\n    def __init__(self, units=32, **kwargs):\n        super(Linear, self).__init__(**kwargs)\n        self.units = units\n    \n    def build(self, inputs_shape):\n        self.w = self.add_weight(\n            shape=(input_shape[-1], self.units),\n            initializer=\"random_normal\",\n            trainable=True,\n        )\n        self.b = self.add_weight(\n            shape=(self.units,), initializer=\"random_normal\", trainable=True\n        )\n    \n    def call(self, inputs):\n        return tf.matmul(inputs, self.w) + self.b\n    \n    def get_config(self):\n        config = super(Linear, self).get_config()\n        config.update({\"units\": self.units})\n        return config\n\n\nlayer = Linear(64)\nconfig = layer.get_config()\nprint(config)\nnew_layer = Linear.from_config(config)","2094da6e":"def from_config(cls, config):\n    return cls(**config)","03642d77":"class CustomDropout(keras.layers.Layer):\n    def __init__(self, rate, **kwargs):\n        super(CustomDropout, self).__init__(**kwargs)\n        self.rate = rate\n    \n    def call(self, inputs, training=None):\n        if training:\n            return tf.nn.dropout(inputs, rate=self.rate)\n        return inputs","fdf734cd":"from tensorflow.keras import layers\n\n\nclass Sampling(layers.Layer):\n    \"\"\"(z_mean, z_log_var)\ub97c \uc0ac\uc6a9\ud574 \uc22b\uc790\ub97c \uc778\ucf54\ub529\ud558\ub294 \ubca1\ud130 z \ud45c\ubcf8\uc744 \uad6c\ud569\ub2c8\ub2e4.\"\"\"\n    \n    def call(self, inputs):\n        z_mean, z_log_var = inputs\n        batch = tf.shape(z_mean)[0]\n        dim = tf.shape(z_mean)[1]\n        epsilon = tf.keras.backend.random_normal(shape=(batch, dim))\n        return z_mean + tf.exp(0.5 * z_log_var) * epsilon\n\n\nclass Encoder(layers.Layer):\n    \"\"\"MNIST \uc22b\uc790\ub97c \uc21c\uc11c\uc30d (z_mean, z_log_var, z)\uc5d0 \ub300\uc751\uc2dc\ud0b5\ub2c8\ub2e4.\"\"\"\n    \n    def __init__(self, latent_dim=32, intermediate_dim=64, name=\"encoder\", **kwargs):\n        super(Encoder, self).__init__(name=name, **kwargs)\n        self.dense_proj = layers.Dense(intermediate_dim, activation=\"relu\")\n        self.dense_mean = layers.Dense(latent_dim)\n        self.dense_log_var = layers.Dense(latent_dim)\n        self.sampling = Sampling()\n    \n    def call(self, inputs):\n        x = self.dense_proj(inputs)\n        z_mean = self.dense_mean(x)\n        z_log_var = self.dense_log_var(x)\n        z = self.sampling((z_mean, z_log_var))\n        return z_mean, z_log_var, z\n\n\nclass Decoder(layers.Layer):\n    \"\"\"\uc778\ucf54\ub529\ub41c \uc22b\uc790 \ubca1\ud130\uc778 z\ub97c \uc77d\uc744 \uc218 \uc788\ub294 \uc22b\uc790\ub85c \ub2e4\uc2dc \ubcc0\ud658\ud569\ub2c8\ub2e4.\"\"\"\n    \n    def __init__(self, original_dim, intermediate_dim=64, name=\"decoder\", **kwargs):\n        super(Decoder, self).__init__(name=name, **kwargs)\n        self.dense_proj = layers.Dense(intermediate_dim, activation=\"relu\")\n        self.dense_output = layers.Dense(original_dim, activation=\"sigmoid\")\n    \n    def call(self, inputs):\n        x = self.dense_proj(inputs)\n        return self.dense_output(x)\n\n\nclass VariationalAutoEncoder(keras.Model):\n    \"\"\"\ud559\uc2b5\uc744 \uc704\ud574 \uc778\ucf54\ub354\uc640 \ub514\ucf54\ub354\ub97c \uc885\ub2e8 \uac04 \ubaa8\ub378\ub85c \uacb0\ud569\ud569\ub2c8\ub2e4.\"\"\"\n    \n    def __init__(\n        self,\n        original_dim,\n        intermediate_dim=64,\n        latent_dim=32,\n        name=\"autoencoder\",\n        **kwargs\n    ):\n        super(VariationalAutoEncoder, self).__init__(name=name, **kwargs)\n        self.original_dim = original_dim\n        self.encoder = Encoder(latent_dim=latent_dim, intermediate_dim=intermediate_dim)\n        self.decoder = Decoder(original_dim, intermediate_dim=intermediate_dim)\n    \n    def call(self, inputs):\n        z_mean, z_log_var, z = self.encoder(inputs)\n        reconstructed = self.decoder(z)\n        # KL \ubc1c\uc0b0 \uc815\uaddc\ud654 \uc190\uc2e4\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4.\n        kl_loss = -0.5 * tf.reduce_mean(\n            z_log_var - tf.square(z_mean) - tf.exp(z_log_var) + 1\n        )\n        self.add_loss(kl_loss)\n        return reconstructed","0e138c76":"original_dim = 784\nvae = VariationalAutoEncoder(original_dim, 64, 32)\n\noptimizer = tf.keras.optimizers.Adam(learning_rate=1e-3)\nmse_loss_fn = tf.keras.losses.MeanSquaredError()\n\nloss_metric = tf.keras.metrics.Mean()\n\n(x_train, _), _ = tf.keras.datasets.mnist.load_data()\nx_train = x_train.reshape(60000, 784).astype(\"float32\") \/ 255\n\ntrain_dataset = tf.data.Dataset.from_tensor_slices(x_train)\ntrain_dataset = train_dataset.shuffle(buffer_size=1024).batch(64)\n\nepochs = 2\n\n# \uac01 \uc138\ub300\uc5d0 \uac78\uccd0 \ubc18\ubcf5\ud569\ub2c8\ub2e4.\nfor epoch in range(epochs):\n    print(\"Start of epoch %d\" % (epoch,))\n    \n    # \ub370\uc774\ud130 \uc138\ud2b8\uc758 \ubb36\uc74c \uc704\uc5d0\uc11c \ubc18\ubcf5\ud569\ub2c8\ub2e4.\n    for step, x_batch_train in enumerate(train_dataset):\n        with tf.GradientTape() as tape:\n            reconstructed = vae(x_batch_train)\n            # \uc7ac\uc0dd\uc131 \uc190\uc2e4\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4\n            loss = mse_loss_fn(x_batch_train, reconstructed)\n            loss += sum(vae.losses) # KLD \uc815\uaddc\ud654 \uc190\uc2e4\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4\n        \n        grads = tape.gradient(loss, vae.trainable_weights)\n        optimizer.apply_gradients(zip(grads, vae.trainable_weights))\n        \n        loss_metric(loss)\n        \n        if step % 100 == 0:\n            print(\"step %d: mean loss = %.4f\" % (step, loss_metric.result()))","d0bb4265":"vae = VariationalAutoEncoder(784, 64, 32)\n\noptimizer = tf.keras.optimizers.Adam(learning_rate=1e-3)\n\nvae.compile(optimizer, loss=tf.keras.losses.MeanSquaredError())\nvae.fit(x_train, x_train, epochs=2, batch_size=64)","6d71b532":"original_dim = 784\nintermediate_dim = 64\nlatent_dim = 32\n\n# \uc778\ucf54\ub354 \ubaa8\ub378\uc744 \uc815\uc758\ud569\ub2c8\ub2e4.\noriginal_inputs = tf.keras.Input(shape=(original_dim,), name=\"encoder_input\")\nx = layers.Dense(intermediate_dim, activation=\"relu\")(original_inputs)\nz_mean = layers.Dense(latent_dim, name=\"z_mean\")(x)\nz_log_var = layers.Dense(latent_dim, name=\"z_log_var\")(x)\nz = Sampling()((z_mean, z_log_var))\nencoder = tf.keras.Model(inputs=original_inputs, outputs=z, name=\"encoder\")\n\n# \ub514\ucf54\ub354 \ubaa8\ub378\uc744 \uc815\uc758\ud569\ub2c8\ub2e4.\nlatent_inputs = tf.keras.Input(shape=(latent_dim,), name=\"z_sampling\")\nx = layers.Dense(intermediate_dim, activation=\"relu\")(latent_inputs)\noutputs = layers.Dense(original_dim, activation=\"sigmoid\")(x)\ndecoder = tf.keras.Model(inputs=latent_inputs, outputs=outputs, name=\"decoder\")\n\n# VAE \ubaa8\ub378\uc744 \uc815\uc758\ud569\ub2c8\ub2e4.\noutputs = decoder(z)\nvae = tf.keras.Model(inputs=original_inputs, outputs=outputs, name=\"vae\")\n\n# KL \ubc1c\uc0b0 \uc815\uaddc\ud654 \uc190\uc2e4\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4.\nkl_loss = -0.5 * tf.reduce_mean(z_log_var - tf.square(z_mean) - tf.exp(z_log_var) + 1)\nvae.add_loss(kl_loss)\n\n# \ud559\uc2b5\uc2dc\ud0b5\ub2c8\ub2e4.\noptimizer = tf.keras.optimizers.Adam(learning_rate=1e-3)\nvae.compile(optimizer, loss=tf.keras.losses.MeanSquaredError())\nvae.fit(x_train, x_train, epochs=3, batch_size=64)","19fe4ced":"# \uc0c1\uc18d\uc744 \ud1b5\ud574 \uc0c8\ub85c\uc6b4 \uce35\uacfc \ubaa8\ub378 \ub9cc\ub4e4\uae30","32bc7143":"\uac00\uc911\uce58 `w`\uc640 `b`\ub294 \uce35\uc758 \uc18d\uc131\uc73c\ub85c \uc124\uc815\ub418\uba74\uc11c \uce35\uc5d0 \uc758\ud574 \uc790\ub3d9\uc801\uc73c\ub85c \ucd94\uc801\ub418\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc138\uc694:","1d9b4107":"`call()`\uc5d0\uc11c \uc774 \uc778\uc790\ub97c \ub178\ucd9c\uc2dc\ud0b4\uc73c\ub85c\uc368, \ub0b4\uc7ac\ub41c \ud559\uc2b5\uacfc \ud3c9\uac00 \ubc18\ubcf5\ubb38\ub4e4(\uc608\ub97c \ub4e4\uc5b4, `fit()`)\uc744 \ud559\uc2b5\uacfc \ucd94\ub860\uc5d0\uc11c \uc62c\ubc14\ub974\uac8c \uc774 \uce35\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4.","4630fdfe":"\uc774\uac83\ub4e4\uc744 \ubaa8\ub450 \ud568\uaed8 \uc885\ub2e8 \uc608\uc81c\uc5d0 \ub123\uc5b4\ubd05\uc2dc\ub2e4: Variational AutoEncoder(VAE)\ub97c \uad6c\ud604\ud560 \uac83\uc785\ub2c8\ub2e4. MNIST \uc22b\uc790\ub4e4 \uc704\uc5d0\uc11c \ud559\uc2b5\uc2dc\ud0ac \uac83\uc785\ub2c8\ub2e4.","ba1725dd":"\uc124\uc815\uc73c\ub85c\ubd80\ud130 \uce35\uc744 \uc5ed\uc9c1\ub82c\ud654\ud560 \ub54c \ub354 \uc720\uc5f0\uc131\uc774 \ud544\uc694\ud558\ub2e4\uba74, `from_config()` \ud074\ub798\uc2a4 \uba54\uc18c\ub4dc \ub610\ud55c \uc624\ubc84\ub77c\uc774\ub4dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc774 `from_config()`\uc758 \uae30\ubcf8 \uad6c\ud604\uc785\ub2c8\ub2e4:","92039f4f":"`add_loss()`\ucc98\ub7fc, \uc774 \ud3c9\uac00 \uc9c0\ud45c\ub4e4\uc740 `fit()`\uc5d0 \uc758\ud574 \ucd94\uc801\ub429\ub2c8\ub2e4:","ea0af3e2":"\ucd94\uac00\uc801\uc73c\ub85c, `loss` \uc18d\uc131\uc740 \ubaa8\ub4e0 \ub0b4\ubd80\uce35\uc758 \uac00\uc911\uce58\ub4e4\uc5d0\uc11c \uc0dd\uc131\ub41c \uc815\uaddc\ud654 \uc190\uc2e4\ub4e4 \ub610\ud55c \ud3ec\ud568\ud569\ub2c8\ub2e4:","7ee36a04":"`__init__()` \uba54\uc18c\ub4dc \uc548\uc5d0\uc11c \uc774\ub7ec\ud55c \ud558\uc704\uce35\ub4e4\uc744 \uc0dd\uc131\ud558\uae30\ub97c \ucd94\ucc9c\ud569\ub2c8\ub2e4(\ud558\uc704\uce35\ub4e4\uc740 \uc804\ud615\uc801\uc73c\ub85c build \uba54\uc18c\ub4dc\ub97c \uac00\uc9c0\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, \uc678\ubd80\uce35\uc774 \ube4c\ub4dc\ub418\uba74 \ube4c\ub4dc\ub420 \uac83\uc785\ub2c8\ub2e4).","a3dff7d6":"Keras\uc758 \uc911\uc2ec \ucd94\uc0c1\ud654 \uc911 \ud558\ub098\ub294 `Layer` \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uce35\uc740 \uc0c1\ud0dc(\uce35\uc758 \"\uac00\uc911\uce58\")\uc640 \uc785\ub825\uc5d0\uc11c \ucd9c\ub825\uc73c\ub85c\uc758 \ubcc0\ud658(\"\ud638\ucd9c\", \uce35\uc758 \uc815\uc0c1\ud30c)\ub97c \ubaa8\ub450 \ubb36\uc5b4\uc90d\ub2c8\ub2e4.","8dc54759":"\uc774 \uc190\uc2e4\ub4e4(\ubaa8\ub4e0 \ub0b4\ubd80\uce35\uc5d0 \uc758\ud574 \uc0dd\uc131\ub41c \uac83\uc744 \ud3ec\ud568)\uc740 `layer.losses`\ub97c \ud1b5\ud574 \ub418\ucc3e\uc544\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc18d\uc131\uc740 \uac00\uc7a5 \ub192\uc740 \uc218\uc900\uc758 \uce35\uc5d0 \ub300\ud55c \ubaa8\ub4e0 `__call__()`\uc758 \uc2dc\uc791\uc5d0\uc11c \ucd08\uae30\ud654\ub418\uae30\uc5d0, `layer.losses`\ub294 \ud56d\uc0c1 \ub9c8\uc9c0\ub9c9 \uc815\uc0c1\ud30c \ub3d9\uc548\uc5d0 \uc0dd\uc131\ub41c \uc190\uc2e4\uac12\ub4e4\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.","3501e561":"`call()`\uc5d0 \uc758\ud55c \ub2e4\ub978 \ud2b9\uad8c\uc801\uc778 \uc778\uc790\ub294 `mask` \uc778\uc790\uc785\ub2c8\ub2e4.","b3b9f7cd":"## `call()` \uba54\uc18c\ub4dc \uc548\uc5d0\uc11c \ud2b9\uad8c\uc801\uc778 `training` \uc778\uc790","57309c47":"\ud559\uc2b5 \ubc18\ubcf5\ubb38\uc744 \uc791\uc131\ud558\ub294 \uac83\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uac00\uc774\ub4dc\ub97c \uc704\ud574\uc11c\ub294, [\ubc14\ub2e5\ubd80\ud130 \ud559\uc2b5 \ubc18\ubcf5\ubb38\uc744 \uc791\uc131\ud558\ub294 \uac00\uc774\ub4dc](https:\/\/www.tensorflow.org\/guide\/keras\/writing_a_training_loop_from_scratch\/)\ub97c \ubcf4\uc138\uc694.","e1d487b5":"## \uce35 \uc704\uc5d0\uc11c \uc9c1\ub82c\ud654\ub97c \uc120\ud0dd\uc801\uc73c\ub85c \ud65c\uc131\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4","cb2b91b5":"\uc774 \uc190\uc2e4\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ud559\uc2b5 \ubc18\ubcf5\ubb38\uc744 \uc791\uc131\ud560 \ub54c \uacc4\uc0b0\uc5d0 \ub123\uc5b4\uc9c0\ub294 \uac83\uc73c\ub85c \uc5ec\uaca8\uc9d1\ub2c8\ub2e4:","9c1b8d67":"\uc77c\ubc18\uc801\uc73c\ub85c, `Layer` \ud074\ub798\uc2a4\ub97c \ub0b4\ubd80 \uacc4\uc0b0 \ube14\ub85d\uc744 \uc815\uc758\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud560 \uac83\uc774\uace0, `Model` \ud074\ub798\uc2a4\ub97c \ud559\uc2b5\uc2dc\ud0ac \uac1d\uccb4\uc778 \uc678\ubd80 \ubaa8\ub378\uc744 \uc815\uc758\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4.","378f3648":"## \ubaa8\ub450 \ud569\uce58\uae30: \uc885\ub2e8 \uc608\uc81c","04bd7d3d":"\ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc704\ud574\uc11c\ub294, [Functional API \uac00\uc774\ub4dc](https:\/\/www.tensorflow.org\/guide\/keras\/functional\/)\ub97c \uaf2d \uc77d\uc5b4\ubcf4\uc138\uc694.","3e904258":"\ub2e4\uc74c\uc758 \uce35\uc744 \uace0\ub824\ud574\ubcf4\uc138\uc694: \"\ub85c\uc9c0\uc2a4\ud2f1 \ub9d0\ub2e8\" \uce35. \uc774\uac83\uc740 \uc785\ub825\uc73c\ub85c\uc368 \ucd94\uce21\uacfc \ubaa9\ud45c\ub97c \ubc1b\uace0, `add_loss()`\ub97c \ud1b5\ud574 \ucd94\uc801\ub418\ub294 \uc190\uc2e4\uc744 \uacc4\uc0b0\ud558\uace0, `add_metric()`\uc744 \ud1b5\ud574 \ucd94\uc801\ub418\ub294 \uc815\ud655\ub3c4 \uc2a4\uce7c\ub77c\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.","c5533f8c":"\uc704\uc758 `Linear` \uce35\uc740 `__init__()`\uc5d0\uc11c \uac00\uc911\uce58 `w`\uc640 `b`\uc758 \ubaa8\uc591\uc744 \uacc4\uc0b0\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub418\ub294 `input_dim` \uc778\uc790\ub97c \uac00\uc838\uc635\ub2c8\ub2e4:","4d33dde5":"\ub9de\ucda4\ud615 \uce35\ub4e4\uc744 [Functional \ubaa8\ub378](https:\/\/www.tensorflow.org\/guide\/keras\/functional\/)\uc758 \ubd80\ubd84\uc73c\ub85c\uc11c \uc9c1\ub82c\ud654\ud574\uc57c \ud55c\ub2e4\uba74, \uc120\ud0dd\uc801\uc73c\ub85c `get_config()` \uba54\uc18c\ub4dc\ub97c \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","38756b43":"```python\nclass ResNet(tf.keras.Model):\n    \n    def __init__(self, num_classes=1000):\n        super(ResNet, self).__init__()\n        self.block_1 = ResNetBlock()\n        self.block_2 = ResNetBlock()\n        self.global_pool = layers.GlobalAveragePooling2D()\n        self.classifier = Dense(num_classes)\n    \n    def call(self, inputs):\n        x = self.block_1(inputs)\n        x = self.block_2(x)\n        x = self.global_pool(x)\n        return self.classifier(x)\n\n\nresnet = ResNet()\ndataset = ...\nresnet.fit(dataset, epochs=10)\nresnet.save(filepath)\n```","4eee58d1":"\uc5ec\uae30 \ube7d\ube7d\ud558\uac8c-\uc5f0\uacb0\ub41c \uce35\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \uc0c1\ud0dc\ub97c \uac00\uc9d1\ub2c8\ub2e4: \ubcc0\uc218 `w`\uc640 `b`.","7cfe6b9f":"## `Layer` \ud074\ub798\uc2a4: \uc0c1\ud0dc(\uac00\uc911\uce58)\uc758 \uc870\ud569\uacfc \uba87\uac00\uc9c0 \uacc4\uc0b0","ae81590e":"\ubc18\uba74\uc5d0, `Model` \ud074\ub798\uc2a4\ub294 \ubb38\ud5cc\uc5d0\uc11c \"\ubaa8\ub378\"(\"\ub525\ub7ec\ub2dd \ubaa8\ub378\"\uc5d0\uc11c \ucc98\ub7fc)\uc73c\ub85c\uc368\ub098 \"\ub9dd\"(\"\uc2ec\uce35 \uc2e0\uacbd\ub9dd\"\uc5d0\uc11c \ucc98\ub7fc)\uc73c\ub85c\uc368 \ub098\ud0c0\ub0b4\uc9c0\ub294 \uac83\ub4e4\uc5d0 \ub300\uc751\ud569\ub2c8\ub2e4.","a2a9f34a":"\uc5ec\uae30 \uc9c0\uae08\uae4c\uc9c0 \uc5b4\ub5a4 \uac83\uc744 \ubc30\uc6e0\ub294\uc9c0 \uc785\ub2c8\ub2e4:","a1f3a318":"\uc2e4\uc9c8\uc801\uc73c\ub85c, `Layer` \ud074\ub798\uc2a4\ub294 \ubb38\ud5cc\uc5d0\uc11c \"\uce35\"(\"\ud569\uc131\uacf1 \uce35\" \ub610\ub294 \"\uc21c\ud658 \uce35\"\uc5d0\uc11c \ucc98\ub7fc)\uc73c\ub85c\uc368\ub098 \"\ube14\ub85d\"(\"ResNet \ube14\ub85d\" \ub610\ub294 \"\uc2dc\uc791 \ube14\ub85d\"\uc5d0\uc11c \ucc98\ub7fc)\uc73c\ub85c\uc368 \ub098\ud0c0\ub0b4\uc9c0\ub294 \uac83\ub4e4\uc5d0 \ub300\uc751\ud569\ub2c8\ub2e4.","e4d22afd":"\ub610\ud55c \uce35\uc5d0 \uac00\uc911\uce58\ub97c \ucd94\uac00\ud558\uae30 \uc704\ud55c \ub354 \uc9e7\uc740 \uc811\uadfc\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc138\uc694: `add_weight()` \uba54\uc18c\ub4dc:","422d5424":"## `add_loss()` \uba54\uc18c\ub4dc","9f746a8e":"## `Model` \ud074\ub798\uc2a4","ea19fd70":"\ub9c8\uc2a4\ud0b9\uacfc \ub9c8\uc2a4\ud0b9 \ud65c\uc131\ud654 \uce35\ub4e4\uc744 \uc791\uc131\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574 \ub354 \uc54c\uae30 \uc704\ud574\uc11c\ub294, [\"\ud328\ub529\uacfc \ub9c8\uc2a4\ud0b9 \uc774\ud574\"](https:\/\/www.tensorflow.org\/guide\/keras\/masking_and_padding\/) \uac00\uc2dc\ub4dc\ub97c \ud655\uc778\ud574\uc8fc\uc138\uc694.","f1f991c3":"\uce35\uc758 `__call__()` \uba54\uc18c\ub4dc\ub294 \uc790\ub3d9\uc801\uc73c\ub85c \ucc98\uc74c \ud638\ucd9c\ub418\uc5c8\uc744 \ub54c build\ub97c \uc2e4\ud589\ud560 \uac83\uc785\ub2c8\ub2e4. \uc774\uc81c \ucc9c\ucc9c\ud788 \uc0dd\uc131\ub418\uba70 \uadf8\ub807\uae30\uc5d0 \uc0ac\uc6a9\ud558\uae30 \uc26c\uc6b4 \uce35\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4:","5a046686":"`Model` \ud074\ub798\uc2a4\ub294 \uc544\ub798\uc758 \ucc28\uc774\uc810\uc744 \uac00\uc9c0\ub294 `Layer`\uc640 \uac19\uc740 API\ub97c \uac00\uc9d1\ub2c8\ub2e4:","4eb486bb":"\uba87\uac00\uc9c0 \uce35\ub4e4, \ud2b9\ud788 `BatchNormalization` \uce35\uacfc `Dropout` \uce35,\uc740 \ud559\uc2b5\uacfc \ucd94\ub860 \ub3d9\uc548\uc5d0 \ub2e4\ub978 \ud589\ub3d9\ub4e4\uc744 \uac00\uc9d1\ub2c8\ub2e4. \uc774\ub7f0 \uce35\ub4e4\uc5d0 \ub300\ud574\uc11c, `call()` \uba54\uc18c\ub4dc \uc548\uc5d0\uc11c `training`(\ubd88\ub9b0) \uc778\uc790\ub97c \ub178\ucd9c\uc2dc\ud0a4\ub294 \uac83\uc774 \ud45c\uc900\uc801\uc778 \uc5f0\uc2b5\uc785\ub2c8\ub2e4.","bfd572c9":"## \uce35\ub4e4\uc740 \uc7ac\uadc0\uc801\uc73c\ub85c \uacb0\ud569\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4","2527927e":"`add_loss()`\uc640 \ube44\uc2b7\ud558\uac8c, \uce35\ub4e4\uc740 \ud559\uc2b5 \ub3d9\uc548\uc758 \uc591\uc758 \uc774\ub3d9 \ud3c9\uade0\uc744 \ucd94\uc801\ud558\ub294 `add_metric()` \uba54\uc18c\ub4dc \ub610\ud55c \uac00\uc9d1\ub2c8\ub2e4.","631ad9c2":"## `add_metric()` \uba54\uc18c\ub4dc","d8f62739":"## \uac1d\uccb4 \uc9c0\ud5a5 \uac1c\ubc1c \ub108\uba38: Functional API","650c3c64":"\uc774 \uc608\uc81c\uac00 \ub108\ubb34 \uac1d\uccb4 \uc9c0\ud5a5 \uac1c\ubc1c\uc774\uc5c8\ub098\uc694? [Functional API](https:\/\/www.tensorflow.org\/guide\/keras\/functional\/)\ub97c \uc0ac\uc6a9\ud574\uc11c\ub3c4 \ubaa8\ub378\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc911\uc694\ud558\uac8c, \uc5b4\ub5a4 \ubc29\uc2dd\uc774\ub098 \ub2e4\ub978 \ubc29\uc2dd\uc744 \uc120\ud0dd\ud558\ub294 \uac83\uc740 \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \uc791\uc131\ub41c \uc694\uc18c\uc5d0 \uc601\ud5a5\uc744 \uc8fc\ub294 \uac83\uc744 \ub9c9\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4: \ud56d\uc0c1 \uc11e\uc5b4 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","a0fc742a":"\uce35\uc758 `call()` \uba54\uc18c\ub4dc\ub97c \uc791\uc131\ud560 \ub54c, \ub098\uc911\uc5d0 \ud559\uc2b5 \ubc18\ubcf5\ubb38\uc744 \uc791\uc131\ud560 \ub54c \uc0ac\uc6a9\ud558\uace0 \uc2f6\uac8c \ub420 \uc190\uc2e4 \ud150\uc11c\ub4e4\uc744 \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 `self.add_loss(value)`\ub97c \ud638\ucd9c\ud568\uc73c\ub85c\uc368 \uac00\ub2a5\ud569\ub2c8\ub2e4:","4867b21a":"Keras API\uc5d0\uc11c\ub294, \uce35\uc758 `build(self, inputs_shape)` \uba54\uc18c\ub4dc \uc548\uc5d0\uc11c \uce35 \uac00\uc911\uce58\ub4e4\uc744 \uc0dd\uc131\ud558\uae30\ub97c \ucd94\ucc9c\ud569\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4:","c018aa00":"\uc608\ub97c \ub4e4\uc5b4, \uc544\ub798\uc758 Functional API \uc608\uc81c\ub294 \uc704\uc758 \uc608\uc81c\uc5d0\uc11c \uc815\uc758\ud588\ub358 \uac19\uc740 `Sampling` \uce35\uc744 \uc7ac\uc0ac\uc6a9\ud569\ub2c8\ub2e4:","bd832c21":"Python \ud568\uc218\ucc98\ub7fc, \uce35\uc744 \uba87\uac00\uc9c0 \ud150\uc11c \uc785\ub825(\ub4e4) \uc704\uc5d0\uc11c \ud638\ucd9c\ud568\uc73c\ub85c\uc368 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","d9c03657":"MNIST \uc704\uc5d0\uc11c \uac04\ub2e8\ud55c \ud559\uc2b5 \ubc18\ubcf5\ubb38\uc744 \uc791\uc131\ud569\uc2dc\ub2e4:","42e8fbcf":"* `Layer`\ub294 (`__init__()` \uc774\ub098 `build()`\uc5d0\uc11c \ub9cc\ub4e4\uc5b4\uc9c4) \uc0c1\ud0dc\uc640 \uba87\uac00\uc9c0 (`call()`\uc5d0\uc11c \uc815\uc758\ub41c) \uacc4\uc0b0\ub4e4\uc744 \ucea1\uc290\ud654\ud569\ub2c8\ub2e4.\n* \uce35\ub4e4\uc740 \uc0c8\ub85c\uc6b4 \ub354 \ud070 \uacc4\uc0b0 \ube14\ub85d\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c \uc7ac\uadc0\uc801\uc73c\ub85c \uc911\ucca9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uce35\ub4e4\uc740 `add_loss()`\uc640 `add_metric()`\uc744 \ud1b5\ud574 \ud3c9\uac00 \uc9c0\ud45c\ub4e4\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc190\uc2e4\ub4e4(\uc77c\ubc18\uc801\uc73c\ub85c \uc815\uaddc\ud654 \uc190\uc2e4)\uc744 \uc0dd\uc131\ud558\uace0 \ucd94\uc801\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \ud559\uc2b5\uc2dc\ud0a4\uace0\uc790 \ud558\ub294 \uac83\uc778 \uc678\ubd80 \ucee8\ud14c\uc774\ub108\ub294 `Model`\uc785\ub2c8\ub2e4. `Model`\uc740 `Layer`\uc640 \uac19\uc9c0\ub9cc, \ud559\uc2b5\uacfc \uc9c1\ub82c\ud654 \ub3c4\uad6c\ub4e4\uc774 \ucd94\uac00\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.","4e7bff91":"\uc608\ub97c \ub4e4\uc5b4, ResNet50 \ubaa8\ub378\uc5d0\uc11c\ub294, `Layer`\ub97c \uc0c1\uc18d\ubc1b\ub294 \uba87\uac00\uc9c0 ResNet \ube14\ub85d\ub4e4\uacfc \uc804\uccb4 ResNet50 \ub9dd\uc744 \ub458\ub7ec\uc2f8\ub294 \ud558\ub098\uc758 `Model`\uc744 \uac00\uc9c8 \uac83\uc785\ub2c8\ub2e4.","e347fd9f":"## \uc88b\uc740 \uc5f0\uc2b5: \uc785\ub825\uc758 \ubaa8\uc591\uc774 \uc54c\ub824\uc9c8 \ub54c\uae4c\uc9c0 \uac00\uc911\uce58 \uc0dd\uc131 \ubbf8\ub8e8\uae30","a79948dd":"\uc5ec\uae30 \ud559\uc2b5\ub418\uc9c0 \uc54a\ub294 \uac00\uc911\uce58\ub97c \ucd94\uac00\ud558\uace0 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4:","99085134":"\uc774\uac83\uc740 `layer.weights`\uc758 \ubd80\ubd84\uc774\uc9c0\ub9cc, \ud559\uc2b5\ub418\uc9c0 \uc54a\ub294 \uac00\uc911\uce58\ub85c\uc368 \ubd84\ub958\ub429\ub2c8\ub2e4:","a1f9f80e":"mask\uac00 \uc0ac\uc804 \uce35\uc5d0 \uc758\ud574 \uc0dd\uc131\ub418\uc5c8\uc744 \ub54c, Keras\ub294 \uc790\ub3d9\uc801\uc73c\ub85c \uc62c\ubc14\ub978 `mask` \uc778\uc790\ub97c \uc774\uac83\uc744 \uc9c0\uc6d0\ud558\ub294 \uce35\ub4e4\uc5d0 \ub300\ud55c `__call__()`\uc5d0 \ub118\uaca8\uc904 \uac83\uc785\ub2c8\ub2e4. Mask \uc0dd\uc131 \uce35\ub4e4\uc740 `mask_zero=True`\ub85c \uc124\uc815\ub41c `Embedding` \uce35\uacfc `Masking` \uce35\uc785\ub2c8\ub2e4.","9559e1c6":"* \ub0b4\uc81c\ub41c \ud559\uc2b5, \ud3c9\uac00, \uadf8\ub9ac\uace0 \uc608\uce21 \ubc18\ubcf5\ubb38\uc744 \ub178\ucd9c\uc2dc\ud0b5\ub2c8\ub2e4(`model.fit()`, `model.evaluate()`, `model.predict()`).\n* `model.layers` \uc18d\uc131\uc744 \ud1b5\ud574 \ub0b4\ubd80 \uce35\ub4e4\uc758 \ubaa9\ub85d\uc744 \ub178\ucd9c\uc2dc\ud0b5\ub2c8\ub2e4.\n* \uc800\uc7a5\uacfc \uc9c1\ub82c\ud654 API\ub4e4\uc744 \ub178\ucd9c\uc2dc\ud0b5\ub2c8\ub2e4(`save()`, `save_weights()` ...).","db896c05":"\uc608\ub97c \ub4e4\uc5b4, \uc704\uc758 \uc791\uc740-resnet \uc608\uc81c\ub97c \uac00\uc838\uc640\uc11c, `fit()`\uc73c\ub85c \ud559\uc2b5\uc2dc\ud0ac \uc218 \uc788\ub294 `Model`\uc744 \ub9cc\ub4dc\ub294 \ub370\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc73c\uba70, `save_weights()`\ub85c \uc800\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","fde288b2":"\uae30\ubcf8 `Layer` \ud074\ub798\uc2a4\uc758 `__init__()` \uba54\uc18c\ub4dc\ub294 \uba87\uac00\uc9c0 \ud575\uc2ec\uc5b4 \uc778\uc790\ub4e4\uc744 \ubc1b\ub294\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc138\uc694, \ud2b9\ud788 `name`\uacfc `dtype`. \uc774\ub7ec\ud55c \uc778\uc790\ub4e4\uc744 `__init__()`\uc5d0\uc11c \ubd80\ubaa8 \ud074\ub798\uc2a4\uc5d0 \ub118\uaca8\uc8fc\uace0 \uce35 \uc124\uc815\uc5d0 \ud3ec\ud568\uc2dc\ud0a4\ub294 \uac83\uc774 \uc88b\uc740 \uc5f0\uc2b5\uc785\ub2c8\ub2e4:","05a442e5":"## \uce35\uc740 \ud559\uc2b5\ub418\uc9c0 \uc54a\ub294 \uac00\uc911\uce58\ub97c \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4","532a7d9b":"\ub9ce\uc740 \uacbd\uc6b0\uc5d0, \uc785\ub825\uc758 \ud06c\uae30\ub97c \uc0ac\uc804\uc5d0 \uc54c\uc9c0 \ubabb\ud560 \uc218 \uc788\uace0, \uce35\uc744 \uc0dd\uc131\ud55c \uc774\ud6c4\uc5d0 \uc54c\uac8c \ub418\uc5c8\uc744 \ub54c \ucc9c\ucc9c\ud788 \uac00\uc911\uce58\ub97c \uc0dd\uc131\ud558\uae30 \uc6d0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","3e40e1ff":"## `call()` \uba54\uc18c\ub4dc \uc548\uc5d0\uc11c \ud2b9\uad8c\uc801\uc778 `mask` \uc778\uc790","067a8b17":"\ub2e4\ub978 Layer\uc5d0 \uc18d\uc131\uc73c\ub85c\uc368 Layer \uac1d\uccb4\ub97c \ub300\uc785\ud558\uba74, \uc678\ubd80\uc758 \uce35\uc740 \ub0b4\ubd80\uc758 \uce35\uc758 \uac00\uc911\uce58\ub97c \ucd94\uc801\ud558\uae30 \uc2dc\uc791\ud560 \uac83\uc785\ub2c8\ub2e4.","317fa656":"VAE\ub294 `Layer`\ub97c \uc0c1\uc18d\ubc1b\ub294 \uce35\ub4e4\uc758 \uc911\ucca9\ub41c \uacb0\ud569\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 `Model`\ub97c \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4\uac00 \ub420 \uac83\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \uc815\uaddc\ud654 \uc190\uc2e4(KL \ubc1c\uc0b0)\uc744 \uac00\uc9c8 \uac83\uc785\ub2c8\ub2e4.","2e37988f":"\ud559\uc2b5\uac00\ub2a5\ud55c \uac00\uc911\uce58 \ubfd0\ub9cc \uc544\ub2c8\ub77c, \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uce35\uc5d0 \ud559\uc2b5\ub418\uc9c0 \uc54a\ub294 \uac00\uc911\uce58\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uac00\uc911\uce58\ub4e4\uc740 \uce35\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 \uc5ed\uc804\ud30c \uc911\uc5d0 \uacc4\uc0b0\uc5d0 \ub123\uc5b4\uc9c0\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \ub73b\ud569\ub2c8\ub2e4.","d41e3749":"\uc774 \ubc29\ubc95\uc73c\ub85c \ucd94\uc801\ub418\ub294 \ud3c9\uac00 \uc9c0\ud45c\ub4e4\uc740 `layer.metrics`\uc744 \ud1b5\ud574 \uc811\uadfc \uac00\ub2a5\ud569\ub2c8\ub2e4:","7a1cd8ad":"\ubaa8\ub4e0 Keras RNN \uce35\ub4e4\uc5d0\uc11c \uc774\uac83\uc744 \ucc3e\uac8c\ub420 \uac83\uc785\ub2c8\ub2e4. mask\ub294 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud560 \ub54c \ud2b9\uc815 \uc785\ub825 \uc2dc\uac04 \ub2e8\uacc4\ub97c \uac74\ub108\ub6f0\uae30 \uc704\ud574 \uc0ac\uc6a9\ub418\ub294 \ubd88\ub9b0 \ud150\uc11c(\uc785\ub825 \uc548\uc5d0\uc11c \uac01 \uc2dc\uac04 \ub2e8\uacc4\ub9c8\ub2e4 \ud558\ub098\uc758 \ubd88\ub9b0 \uac12)\uc785\ub2c8\ub2e4.","75cb3310":"```python\n# \ucd5c\uc801\ud654\uae30\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\noptimizer = tf.keras.optimizers.SGD(learning_rate=1e-3)\nloss_fn = keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n\n# \ub370\uc774\ud130 \uc138\ud2b8\uc758 \ubb36\uc74c \uc704\uc5d0\uc11c \ubc18\ubcf5\ud569\ub2c8\ub2e4.\nfor x_batch_train, y_batch_train in train_dataset:\n    with tf.GradientTape() as tape:\n        logits = layer(x_batch_train) # \uc774 \uc791\uc740 \ubb36\uc74c\uc5d0 \ub300\ud55c \ub85c\uc9d3\n        # \uc774 \uc791\uc740 \ubb36\uc74c\uc5d0 \ub300\ud55c \uc190\uc2e4\uac12\n        loss_value = loss_fn(y_batch_train, logits)\n        # \uc774 \uc815\uc0c1\ud30c \ub3d9\uc548 \uc0dd\uc131\ub41c \ub2e4\ub978 \uc190\uc2e4\ub4e4\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4:\n        loss_value += sum(model.losses)\n    \n    grads = tape.gradient(loss_value, model.trainable_weights)\n    optimizer.apply_gradients(zip(grads, model.trainable_weights))\n```","18370c6f":"\uc9c1\ub82c\ud654\uc640 \uc800\uc7a5\uc5d0 \ub300\ud574 \ub354 \uc54c\uace0 \uc2f6\ub2e4\uba74, \uc804\uccb4 [\ubaa8\ub378 \uc800\uc7a5\uacfc \uc9c1\ub82c\ud654 \uac00\uc774\ub4dc](https:\/\/www.tensorflow.org\/guide\/keras\/save_and_serialize\/)\ub97c \ubcf4\uc138\uc694.","0fcbffa2":"VAE\ub294 `Model`\uc744 \uc0c1\uc18d\ubc1b\uae30 \ub54c\ubb38\uc5d0, \ub0b4\uc81c\ub41c \ud559\uc2b5 \ubc18\ubcf5\ubb38\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \uc8fc\ubaa9\ud558\uc138\uc694. \uadf8\ub798\uc11c \uc774\uac83\ucc98\ub7fc\ub3c4 \ud559\uc2b5\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4:","de888e33":"## \uc124\uc815","6a7d4c76":"\uc774 \uc190\uc2e4\ub4e4\uc740 `fit()`\uc5d0\uc11c\ub3c4 \ub2e4\ub978 \uc810 \uc5c6\uc774 \uc791\ub3d9\ud569\ub2c8\ub2e4(\uc790\ub3d9\uc801\uc73c\ub85c \ub204\uc801\ub418\uace0 \uc788\ub2e4\uba74 \uc8fc \uc190\uc2e4\uc5d0 \ucd94\uac00\ub429\ub2c8\ub2e4):","bd0209fb":"\uadf8\ub7ec\ubbc0\ub85c \"`Layer` \ud074\ub798\uc2a4\uc640 `Model` \ud074\ub798\uc2a4 \uc911\uc5d0\uc11c \uc5b4\ub5a4 \uac83\uc744 \uc368\uc57c\ud558\ub294\uc9c0?\" \ud5f7\uac08\ub9b0\ub2e4\uba74, \ub2e4\uc74c\uc744 \uc9c8\ubb38\ud574\ubcf4\uc138\uc694: \uc774\uac83\uc5d0\uc11c `fit()`\uc744 \ud638\ucd9c\ud574\uc57c \ud558\ub098? \uc774\uac83\uc5d0\uc11c `save()`\ub97c \ud638\ucd9c\ud574\uc57c \ud558\ub098? \ub9cc\uc57d \uadf8\ub807\ub2e4\uba74 `Model`\ub85c \uc9c4\ud589\ud558\uc138\uc694. \uc544\ub2c8\ub77c\uba74(\ud074\ub798\uc2a4\uac00 \ub354 \ud070 \uccb4\uacc4 \uc548\uc758 \uadf8\uc800 \ud558\ub098\uc758 \ube14\ub85d\uc774\uae30 \ub54c\ubb38\uc774\uac70\ub098, \ud559\uc2b5 & \uc800\uc7a5 \ucf54\ub4dc\ub97c \uc9c1\uc811 \uc791\uc131\ud558\uae30 \ub54c\ubb38\uc5d0), `Layer`\ub97c \uc0ac\uc6a9\ud558\uc138\uc694."}}