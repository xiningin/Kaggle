{"cell_type":{"8ed63bfc":"code","11c9ad08":"markdown"},"source":{"8ed63bfc":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential, Model\nfrom keras.optimizers import RMSprop\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras.callbacks import CSVLogger\n!pip install livelossplot\nfrom livelossplot.keras import PlotLossesCallback\n\nTRAINING_LOGS_FILE = \"training_logs.csv\"\nMODEL_SUMMARY_FILE = \"model_summary.txt\"\nMODEL_FILE = \"cats_vs_dogs.h5\"\n\n# Data\npath = \"..\/input\/cats-and-dogs\/cats_and_dogs\/\"\ntraining_data_dir = path + \"training\" # 10 000 * 2\nvalidation_data_dir = path + \"validation\" # 2 500 * 2\ntest_data_dir = path + \"test\" # 100\n\n# Hyperparams\nIMAGE_SIZE = 200\nIMAGE_WIDTH, IMAGE_HEIGHT = IMAGE_SIZE, IMAGE_SIZE\nEPOCHS = 20\nBATCH_SIZE = 32\nTEST_SIZE = 10\n\ninput_shape = (IMAGE_WIDTH, IMAGE_HEIGHT, 3)\n\n# Model \nmodel = Sequential()\n\nmodel.add(Conv2D(32, 3, 3, border_mode='same', input_shape=input_shape, activation='relu'))\nmodel.add(Conv2D(32, 3, 3, border_mode='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, 3, 3, border_mode='same', activation='relu'))\nmodel.add(Conv2D(64, 3, 3, border_mode='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(128, 3, 3, border_mode='same', activation='relu'))\nmodel.add(Conv2D(128, 3, 3, border_mode='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(256, 3, 3, border_mode='same', activation='relu'))\nmodel.add(Conv2D(256, 3, 3, border_mode='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n    \nmodel.compile(loss='binary_crossentropy',\n              optimizer=RMSprop(lr=0.0001),\n              metrics=['accuracy'])\n\nwith open(MODEL_SUMMARY_FILE,\"w\") as fh:\n    model.summary(print_fn=lambda line: fh.write(line + \"\\n\"))\n\n# Data augmentation\ntraining_data_generator = ImageDataGenerator(\n    rescale=1.\/255,\n    shear_range=0.1,\n    zoom_range=0.1,\n    horizontal_flip=True)\nvalidation_data_generator = ImageDataGenerator(rescale=1.\/255)\ntest_data_generator = ImageDataGenerator(rescale=1.\/255)\n\n# Data preparation\ntraining_generator = training_data_generator.flow_from_directory(\n    training_data_dir,\n    target_size=(IMAGE_WIDTH, IMAGE_HEIGHT),\n    batch_size=BATCH_SIZE,\n    class_mode=\"binary\")\nvalidation_generator = validation_data_generator.flow_from_directory(\n    validation_data_dir,\n    target_size=(IMAGE_WIDTH, IMAGE_HEIGHT),\n    batch_size=BATCH_SIZE,\n    class_mode=\"binary\")\ntest_generator = test_data_generator.flow_from_directory(\n    test_data_dir,\n    target_size=(IMAGE_WIDTH, IMAGE_HEIGHT),\n    batch_size=1,\n    class_mode=\"binary\", \n    shuffle=False)\n\n# Training\nmodel.fit_generator(\n    training_generator,\n    steps_per_epoch=len(training_generator.filenames) \/\/ BATCH_SIZE,\n    epochs=EPOCHS,\n    validation_data=validation_generator,\n    validation_steps=len(validation_generator.filenames) \/\/ BATCH_SIZE,\n    callbacks=[PlotLossesCallback(), CSVLogger(TRAINING_LOGS_FILE,\n                                               append=False,\n                                               separator=\";\")], \n    verbose=1)\nmodel.save(MODEL_FILE)\n\n# Testing\nprobabilities = model.predict_generator(test_generator)\nfor index, probability in enumerate(probabilities[:10]):\n    image_path = test_data_dir + \"\/\" + test_generator.filenames[index]\n    image = mpimg.imread(image_path)\n    plt.imshow(image)\n    if probability > 0.5:\n        plt.title(\"%.2f\" % (probability[0]*100) + \"% dog\")\n    else:\n        plt.title(\"%.2f\" % ((1-probability[0])*100) + \"% cat\")\n    plt.show()","11c9ad08":"Check out corresponding Medium article: [Image Classifier - Cats\ud83d\udc31 vs Dogs\ud83d\udc36](https:\/\/towardsdatascience.com\/image-classifier-cats-vs-dogs-with-convolutional-neural-networks-cnns-and-google-colabs-4e9af21ae7a8)"}}