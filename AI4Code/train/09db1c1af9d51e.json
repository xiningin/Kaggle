{"cell_type":{"eec3d091":"code","d0172d38":"code","4d64c78b":"code","6a63ee30":"code","ccc64b56":"code","2453ee28":"code","56a10606":"code","17e5955a":"code","b61c1539":"code","e7b1c946":"code","9e11bf4f":"code","1f5eda6e":"code","723883da":"code","c6a8550c":"code","778e13d7":"code","fc630108":"code","68090d2e":"code","51b2a0a5":"code","f05acc90":"code","d2e17992":"code","3562939c":"code","8abedb3d":"code","55ee5b7a":"code","2df99062":"code","b1aad90d":"code","8fa0210c":"code","5cddb25b":"code","51f635ff":"code","00b3dc61":"code","b9bde40d":"code","308ca6e4":"code","5d7ff71b":"code","d64a90bb":"code","5fdf919a":"code","d1ad0054":"code","45d6c99f":"markdown","d32d286e":"markdown","e651fbdb":"markdown","7f1890a8":"markdown","16f38a51":"markdown","b117dc99":"markdown","388b5982":"markdown","f3b9fd4a":"markdown","d270267b":"markdown","58d91585":"markdown","60fb42a4":"markdown"},"source":{"eec3d091":"import numpy as np\nimport pandas as pd\n\nimport torch\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d0172d38":"# Reload latest version of dependencies\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","4d64c78b":"# Fast AI Imports\nfrom fastai import *\nfrom fastai.vision import *","6a63ee30":"# Set batchsize\nbs = 64","ccc64b56":"path = Path('..\/input')\npath_train = path\/'train\/train'\npath_test = path\/'test\/test\/'\npath, path_train, path_test","2453ee28":"labels_df = pd.read_csv(path\/'train.csv')\ntest_df = pd.read_csv(path\/'sample_submission.csv')\nlabels_df.head()","56a10606":"np.random.seed(42)\ntest = ImageList.from_df(test_df, path=path_test)\ndata = (\n    ImageList.from_df(labels_df, path=path_train)\n                     .split_by_rand_pct(0.01)\n                     .label_from_df()\n                     .add_test(test)\n                     .transform(get_transforms(\n                         flip_vert = True,\n                     ), size = 128)\n                     .databunch(path=path, bs = bs).normalize(imagenet_stats)\n)","17e5955a":"data","b61c1539":"data.show_batch(rows = 3, figsize = (10,8))","e7b1c946":"# Print classes of our classification problem\ndata.classes","9e11bf4f":"learn = cnn_learner(data, models.resnet101, metrics = accuracy, model_dir='\/tmp\/model\/')","1f5eda6e":"learn.lr_find()","723883da":"learn.recorder.plot()","c6a8550c":"lr = 3e-02","778e13d7":"learn.fit_one_cycle(3, slice(lr))","fc630108":"learn.save('resnet-101-1')","68090d2e":"learn = cnn_learner(data, models.densenet161, metrics = accuracy, model_dir='\/tmp\/model\/')","51b2a0a5":"learn.lr_find()","f05acc90":"learn.recorder.plot()","d2e17992":"lr = 3e-02","3562939c":"learn.fit_one_cycle(3, slice(lr))","8abedb3d":"learn.save('densenet-161-1')","55ee5b7a":"learn = cnn_learner(data, models.resnet101, metrics = accuracy, model_dir='\/tmp\/model\/')","2df99062":"learn.load('resnet-101-1');","b1aad90d":"preds, _ = learn.get_preds(ds_type=DatasetType.Test)","8fa0210c":"preds[:, 0]","5cddb25b":"test_df['has_cactus'] = np.array(preds[:, 0])\ntest_df.head()","51f635ff":"test_df.to_csv('submission_resnet_101.csv', index = False)","00b3dc61":"learn = cnn_learner(data, models.densenet161, metrics = accuracy, model_dir='\/tmp\/model\/')","b9bde40d":"learn.load('densenet-161-1');","308ca6e4":"preds, _ = learn.get_preds(ds_type=DatasetType.Test)","5d7ff71b":"preds[:, 0]","d64a90bb":"test_df['has_cactus'] = np.array(preds[:, 0])\ntest_df.head()","5fdf919a":"test_df.to_csv('submission_densenet_161.csv', index = False)","d1ad0054":"from IPython.display import FileLinks\nFileLinks('.')","45d6c99f":"## Dependencies and Global variables","d32d286e":"### Densenet 161","e651fbdb":"## DataBunch Setup","7f1890a8":"An near perfect accuracy but this leads to a leaderboard score of 0.9999. Let's try and improve this with *Densenet 161*","16f38a51":"From the above plot, we will choose the learning rate as the x-axis value corresponding to the steepest descent (without bumps) of the y-axis value, *Loss*.","b117dc99":"## Generating Predictions","388b5982":"## Resnet 101: Training","f3b9fd4a":"## DenseNet 161 Training","d270267b":"The *1* or *0* indicates above the image indicates whether it has a cactus or not. Our validation set is 20% of our train data","58d91585":"We've used the Fast.ai *DataBlock* API to create a *databunch*. \n1. There are some data augmentations that Fast.ai performs by default. These have been tweaked with\n2. The images are resized to 128x128 instead of 32x32, this led to a higher accuracy on the validation set\n3. The validation set is set up to be 10% of the training data","60fb42a4":"### Resnet 101"}}