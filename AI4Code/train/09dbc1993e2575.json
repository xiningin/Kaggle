{"cell_type":{"84ac22ad":"code","24f9b0cc":"code","86bbf34f":"code","90e556eb":"code","aee63bf9":"code","055f9015":"code","fabb6126":"code","119f58b0":"code","350a3fd1":"markdown","fce5791a":"markdown","7b7dabc2":"markdown","cdc1ee2d":"markdown","dfc35eb9":"markdown"},"source":{"84ac22ad":"!pip install -q efficientnet \n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport warnings\nimport glob\nimport cv2\nimport numpy as np\n\nwarnings.simplefilter('ignore')\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', 1000)\npd.set_option('display.max_rows', 500)\n%matplotlib inline","24f9b0cc":"!ls ..\/input","86bbf34f":"#Set the images path here:\nIMAGES_PATH = '..\/input\/pictures1'\n\nfiles = glob.glob(IMAGES_PATH + '\/*.jpg')\nprint(files)","90e556eb":"import tensorflow as tf\nimport efficientnet.tfkeras as efn\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras import layers\n\ndef cse_block(inputs,filters,ratio=8):\n    x = layers.GlobalAveragePooling2D()(inputs)\n    x = layers.Dense(filters\/ratio,activation='relu')(x)\n    x = layers.Dense(filters,activation='sigmoid')(x)\n    x = layers.Reshape([1,filters])(x)\n    return layers.Multiply()([inputs,x])\n\nEFNS = [efn.EfficientNetB0, efn.EfficientNetB1, efn.EfficientNetB2, efn.EfficientNetB3, \n        efn.EfficientNetB4, efn.EfficientNetB5, efn.EfficientNetB6]\n\ndef build_model(dim=128, ef=0):\n    inp = tf.keras.layers.Input(shape=(dim,dim,3))\n    base = EFNS[ef](input_shape=(dim,dim,3),weights=None,include_top=False)\n    x = base(inp)\n    x = cse_block(x,filters=x.shape[3])\n    x = layers.GlobalAveragePooling2D()(x)\n    x = layers.Dense(1,activation='sigmoid')(x)\n    model = tf.keras.Model(inputs=inp,outputs=x)\n    opt = tf.keras.optimizers.Adam(learning_rate=0.001)\n    loss = tf.keras.losses.BinaryCrossentropy(label_smoothing=0.05) \n    model.compile(optimizer=opt,loss=loss,metrics=['AUC'])\n    return model","aee63bf9":"K.clear_session()\n\nMODELS = []\nfor n,ef in enumerate([1,2,4,5,6]):\n    model = build_model(384, ef)\n    model.load_weights('..\/input\/siimisicpretrainedmodels\/fold-'+str(n)+'.h5')\n    MODELS.append( model )\nprint( MODELS[0].summary() )","055f9015":"IMAGES = []\nfor fn in files:\n    img = cv2.imread(fn)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = cv2.resize( img, (384,384) )\n    IMAGES.append(img\/255.)\n\nIMAGES_normal = np.stack(IMAGES,axis=0)\nIMAGES_lr = np.fliplr(IMAGES_normal)\n\nprint(IMAGES_normal.shape)","fabb6126":"results = np.mean( [ (MODELS[i].predict(IMAGES_normal)+MODELS[i].predict(IMAGES_lr))\/2. for i in range(5) ] , axis=0  )\nprint( results )","119f58b0":"plt.figure(figsize=(20,10))\ncolumns = 4\nfor i in range(len(IMAGES)):\n    plt.subplot(len(IMAGES)\/columns + 1, columns, i + 1)\n    plt.title(str(results[i][0]))\n    plt.imshow(IMAGES[i])","350a3fd1":"# The idea of this notebook is to score custom moles images on top models of this competition\n# Just create a dataset with your personal images and set the path to the image loader","fce5791a":"# Load 5 pretrained models","7b7dabc2":"# Define models","cdc1ee2d":"# Load .jpg files in pictures1 path","dfc35eb9":"# Score it using flip augmentation"}}