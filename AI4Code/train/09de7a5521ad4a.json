{"cell_type":{"3ae259a9":"code","77abe788":"code","0993ff76":"code","b7c2d821":"code","71a57ec1":"code","edb6d973":"code","258531b5":"code","ea6a0a0e":"code","3d43e61c":"code","50e15c0a":"code","43eebdca":"code","7f216a24":"code","581d1da5":"code","117803e5":"code","71ad614a":"code","6e2b8857":"code","2990f624":"code","77bbc312":"code","2334b5ff":"code","f3b5a7dc":"markdown","b2cce991":"markdown","530c7107":"markdown","176c0947":"markdown","13eb75f6":"markdown","989f34b6":"markdown","5af4c8aa":"markdown","384efb40":"markdown","04cd3368":"markdown","ec2b3603":"markdown","6074a5b0":"markdown","d84ef03c":"markdown","d862a2cb":"markdown"},"source":{"3ae259a9":"# Import required libraries\nimport pandas as pd\nimport numpy as np\nimport datetime\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\nplt.style.use('seaborn')","77abe788":"!pip install pytickersymbols","0993ff76":"# Use this library to facilitate getting the IBEX 35 index stock tickers\nfrom pytickersymbols import PyTickerSymbols\nstock_data = PyTickerSymbols()\nstock_data.get_all_indices()","b7c2d821":"# Get IBEX 35 stocks\nibex35_stocks = stock_data.get_stocks_by_index('IBEX 35')\nibex35_stocks_df = pd.DataFrame(list(ibex35_stocks))\nibex35_stocks_df.head(10)","71a57ec1":"list(ibex35_stocks_df.symbols)","edb6d973":"ibex35_yahoo_tickers = pd.DataFrame(list(stock_data.get_yahoo_ticker_symbols_by_index('IBEX 35')))\nibex35_yahoo_tickers.T","258531b5":"ibex35_stocks = sorted({'BBVA', 'SAB', 'SAN', 'ENG', 'ELE', 'IBE', 'NTGY',\n                 'REP', 'TEF', 'CLNX', 'IDR', 'IAG'})\n\nibex35_dict = {'BBVA' : 'BOY.F', 'SAB' : 'BDSB.F', 'SAN' : 'DBSA.F', \n                  'ENG' : 'EG4.F', 'ELE' : 'ENA.F', 'IBE' : 'IBE1.F',\n                  'NTGY' : 'GAN.F', 'REP' : 'REP.F', 'TEF' : 'TNE5.F',\n                  'CLNX' : '472.F', 'IDR' : 'IDA.F', 'IAG' : 'INR.F'}","ea6a0a0e":"# Only needed if not already installed (in plain English, only run once in each session)\n!pip install yfinance --upgrade --no-cache-dir","3d43e61c":"%%time\nfrom pandas_datareader import data as pdr\nimport yfinance as yf  # formerly fix_yahoo_finance\n\ntoday = date.today()\n\nstart_date = datetime.datetime(2016, 1, 1)\n\ndict_stocks = {}\n\nfor stock in ibex35_stocks:\n  dict_stocks[stock] = pdr.get_data_yahoo(ibex35_dict[stock], start=start_date, end=today)","50e15c0a":"dict_stocks","43eebdca":"# Create empty dataframe for closing prices\ndf_ibex35_prices = pd.DataFrame(index=dict_stocks['IAG'].index.unique())\n\n# Populate closing prices dataframe\ni = 0\nfor x in ibex35_stocks:\n    df_ibex35_prices.insert(loc=i, column=x, value=dict_stocks[x]['Close'])\n    i = i + 1","7f216a24":"df_ibex35_prices","581d1da5":"print('Last date in the set: ' + str(df_ibex35_prices.tail(1).index.values))","117803e5":"fig, ax = plt.subplots(4,3, figsize=(30,16))\nfig.subplots_adjust(top=0.93)\ni = 0\nj = 0\nfor x in ibex35_stocks:\n  ax[i,j].set_title(x)\n  ax[i,j].plot(df_ibex35_prices.index, df_ibex35_prices[x], lw=1.5, color='navy', alpha=0.5)\n  ax[i,j].plot(df_ibex35_prices.index, df_ibex35_prices[x].rolling(window=180).mean(), lw=1, color='gold', label='MA180')\n  ax[i,j].plot(df_ibex35_prices.index, df_ibex35_prices[x].rolling(window=90).mean(), lw=1, color='limegreen', label='MA90')\n  # ax[i,j].legend(loc='upper left', fontsize='large')\n  if j<2:\n    j = j + 1\n  else:\n    j = 0\n    i = i + 1\n\nax[0,0].legend(loc='lower left', fontsize='large')\nfig.suptitle('Historical closing prices of selected IBEX35 stocks', fontsize='xx-large')  \nfig.autofmt_xdate(rotation=0, ha='center')\nplt.show()","71ad614a":"# Predictive model parameters\nNBR_PREDICTIONS = 250  # Approx. one year of trading\n# Daily seasonality\nds = False\n# Weekly seasonality\nws = True\n# Yearly seasonality\nys = True\n\nprint('FB Prophet predictive model parameters\"')\nprint('Nbr. predictions: ' + str(NBR_PREDICTIONS))\nprint('Daily seasonality: '  + str(ds))\nprint('Weekly seasonality: ' + str(ws))\nprint('Yearly seasonality: ' + str(ys))","6e2b8857":"from fbprophet import Prophet\n# Prophet test with IAG\n# Create input (training) dataframe\ndf_IAG = pd.DataFrame(data={'ds' : df_ibex35_prices.index, 'y' : df_ibex35_prices.IAG},\n                      columns = ['ds', 'y'])\n# Create instance of Prophet\nIAG_model = Prophet(weekly_seasonality=False)\n# Fit model with training data\nIAG_model.fit(df_IAG)\n# Create empty dataframe for future predictions\nIAG_future = IAG_model.make_future_dataframe(periods=NBR_PREDICTIONS)\n# Make forecasts\nIAG_predictions = IAG_model.predict(IAG_future)\n# Plot predictions\nIAG_fig = IAG_model.plot(IAG_predictions)","2990f624":"# Define function that automates Prophet training and predicting process\ndef prophetize(data, npred, ds, ws, ys):\n  m = Prophet(yearly_seasonality=ys, weekly_seasonality=ws, daily_seasonality=ds)\n  m.fit(data)\n  future = m.make_future_dataframe(periods=npred)\n  future = m.predict(future)\n  return future","77bbc312":"%%time\ndf_fbp_inputs = {}\nfor x in ibex35_stocks:\n  df_fbp_inputs[x] = pd.DataFrame(data={'ds' : df_ibex35_prices.index, 'y' : df_ibex35_prices[x]}, columns = ['ds', 'y']).reset_index().drop(columns='Date')\n\ndf_fbp_outputs = {}\nfor x in ibex35_stocks:\n  df_fbp_outputs[x] = prophetize(df_fbp_inputs[x], NBR_PREDICTIONS, ds, ws, ys)","2334b5ff":"fig, ax = plt.subplots(4,3, figsize=(30,16))\nfig.subplots_adjust(top=0.93)\ni = 0\nj = 0\nfor x in ibex35_stocks:\n  ax[i,j].set_title(x)\n  ax[i,j].plot(df_fbp_inputs[x].ds, df_fbp_inputs[x].y, color='navy', lw=1, label='Historical data')\n  ax[i,j].plot(df_fbp_outputs[x].ds, df_fbp_outputs[x].yhat, color='coral',  lw=1, label='Prediction (yhat)')\n  ax[i,j].fill_between(df_fbp_outputs[x].ds, df_fbp_outputs[x].yhat_lower, df_fbp_outputs[x].yhat_upper, alpha=0.2)\n  if j<2:\n    j = j + 1\n  else:\n    i = i + 1\n    j = 0\n\nax[0,0].legend(loc='lower left', fontsize='large')\nfig.suptitle(str(NBR_PREDICTIONS) + '-day Prophet prediction of closing prices for IBEX 35 selected stocks vs. historical data', fontsize='xx-large')  \nfig.autofmt_xdate(rotation=0, ha='center')\nplt.show()","f3b5a7dc":"## Predictive model with FB Prophet\n\nPredicting future timeseries values with Facebook Prophet is dead easy.\n\nAfter some work using the fantastic Keras LSTM neural network implementation, and after hearing some recommendations to try out Prophet, I finally got to do it. And I am not sure if they are comparable things.\n\nFrom a programmatic perspective, it just cannot get more economical. You get also a lot of additional information beyond the basic predicted values, and even a Prophet library built-in plotting method. Of course, all this comes at the price of some loss of flexibility, but still it is a very convenient tool.\n\nFrom an accuracy point of view, whilst I do not hold yet sufficient knowledge and experience with Prophet to conclude much, at first sight the results are well presented and reasonable credible, without forgetting that stock market prices are stochastic processes and cannot be precisely predicted.","b2cce991":"So we have now all the historical closing price data up to today in the **df_ibex35_prices** dataframe.","530c7107":"Finally I will plot historical data used to train the Prophet algorithm along with its predictions for each of the stocks in the group.\n\nProphet computes a lot of additional information, so I wil be also plotting the upper and lower confidence values of the predicted variables.","176c0947":"I will now use **pandas_datareader** and **yfinance** libraries to retrieve the actual trading data for the selected stocks. \n\nA dictionary will be used to store the stock price information. The key to the dictionary will be the stock symbol, whilst a full dataframe with Open, Close, Volume, etc. will be the corresponding element.\n\nhttps:\/\/pypi.org\/project\/pandas-datareader\/\n\nhttps:\/\/pypi.org\/project\/yfinance\/","13eb75f6":"## Obtaining financial data from Yahoo Finance\n\nI will be using some libraries to get financial data from Yahoo Finance.\n\nTo start with, the **Pytickersymbols** library provides ticker symbols for Yahoo and Google finance data repositories.\n\nI will install the required package, then import the library and obtain the available IBEX 35 stocks information.\n\nhttps:\/\/pypi.org\/project\/pytickersymbols\/","989f34b6":"I will use a selection of 12 stocks from the 35 available in the IBEX 35 index.","5af4c8aa":"Now, in order to predict all 12 stocks in the selection, I will encapsulate the \"Prophet process\" into a function and call it iteratively.","384efb40":"And this is it. \n\nFB Prophet is definitely another tool worth having in your toolbox. But don't put your hard-earned cash into these stocks based on these \"prophecies\".\n\n(End of notebook)","04cd3368":"## Using FB Prophet to predict IBEX 35 stock prices\n\nThis is my very first implementation with Facebook Prophet algorithm. \n\nProphet implements a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.\n\nI will use stocks closing price timeseries from the IBEX 35, Spain's main stock market trading index, composed of the 35 largest companies in the country, according to their market capitalization. I will obtain this financial data from Yahoo Finance.\n\nI have done similar predictive exercises using LSTM recurrent neural networks, and whilst the results were acceptable, the implementation and interpretation complexities were certainly quite high. \n\nNow, FB Prophet is a different thing. Let's see how.\n\nhttps:\/\/pypi.org\/project\/fbprophet\/\n\nhttps:\/\/research.fb.com\/blog\/2017\/02\/prophet-forecasting-at-scale\/","ec2b3603":"You may have noticed some of the prices are just wrong. I just have not looked into it further but it is an issue with the source data. Never mind, since I am just exercising the implementation of Prophet, I am not particularly worried about it. But it is worth knowing.\n\nThe following charts show the closing prices of the selection of IBEX 35 stocks, along with two moving averages (MA-90 and MA-180).","6074a5b0":"## Plotting stock price historical data","d84ef03c":"## Stock data processing\n\nThe dictionary of stocks is an appropriate data structure to hold multiple values for each stock. \n\nHowever for this exercise I will only be plotting and later predicting closing prices, so I can still extract and store this information in a single dataframe. This will just facilitate things later.","d862a2cb":"What follows below is the simplest Prophet implementation for a univariate future predictive model (in this case the stock of International Airlines Group or IAG). \n\nYou just need to prepare the input (training) dataframe with two columns up to today's date, and an empty dataframe with dates to predict. Seven lines of code from data preparation through to predictions visualization. \n\nBeautifully simple."}}