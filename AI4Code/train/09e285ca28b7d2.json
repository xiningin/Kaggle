{"cell_type":{"b13b29e9":"code","308ee629":"code","83469059":"code","87175457":"code","1dc78f5b":"code","fb26db51":"code","9bf8f412":"code","39c2526a":"code","18cb647b":"code","8bc67a42":"code","ab86646b":"code","43625d4c":"code","864ea4b0":"code","85e498a2":"code","1f697425":"code","c0ad9be0":"code","202a10f3":"code","11f81299":"code","1bf2c4c6":"code","90f12cf0":"code","9bce9fab":"code","b2472105":"code","55c47f1d":"code","2ce95b3e":"code","58037408":"code","77690475":"code","e2fc53cf":"code","b441920e":"code","b3fb7bdb":"code","7fc93907":"code","b38520b6":"code","2610005e":"code","c7e87d72":"code","f942a3aa":"code","db9ed15f":"code","45318f7a":"code","d8dde020":"code","89bcc8d5":"code","941902ee":"code","cfc3a3e1":"code","b3bf17ed":"code","16ba939b":"code","f32ddf93":"code","795e408c":"code","7cbd2746":"code","22dc1f23":"code","1794b54c":"code","2a2b79b4":"code","a27ea582":"code","81d289db":"code","573f8bf0":"markdown"},"source":{"b13b29e9":"#Importing all the important Libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as ncolors\nimport random\nimport math\nimport time\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator\n\nplt.style.use('seaborn')\n\n%matplotlib inline","308ee629":"#Loading all the 3 dataset\nconfirmed = pd.read_csv(\"..\/input\/covid-19-dataset\/confirmed.csv\")  \nrecovered = pd.read_csv(\"..\/input\/covid-19-dataset\/recovered.csv\")  \ndeath = pd.read_csv(\"..\/input\/covid-19-dataset\/death.csv\")  ","83469059":"#Display the head of dataset\nconfirmed.head()","87175457":"recovered.head()","1dc78f5b":"death.head()","fb26db51":"#Extracting all the columns using .key()\ncols = confirmed.keys()\ncols","9bf8f412":"confirmed1 = confirmed.loc[:, cols[4]:cols[-1]]","39c2526a":"death1 = death.loc[:, cols[4]:cols[-1]]","18cb647b":"recovered1 = recovered.loc[:, cols[4]:cols[-1]]","8bc67a42":"confirmed1.head()","ab86646b":"death1.head()","43625d4c":"recovered1.head()","864ea4b0":"dates = confirmed1.keys()\ntotal_deaths = []\nworld_cases = []\nactive_cases = []\nmortality_rate = []\ntotal_recovered = []\nfor i in dates:\n    confirmed_sum = confirmed1[i].sum()\n    recovered_sum = recovered1[i].sum()\n    world_cases.append(confirmed_sum)\n    death_sum = death1[i].sum()\n    total_deaths.append(death_sum)\n    mortality_rate.append(death_sum\/confirmed_sum)\n    total_recovered.append(recovered_sum)","85e498a2":"confirmed_sum","1f697425":"dates","c0ad9be0":"death_sum","202a10f3":"recovered_sum","11f81299":"world_cases","1bf2c4c6":"#Convert all number in date format\nday_since_1_18 = np.array([i for i in range(len(dates))]).reshape(-1,1)\nworld_cases = np.array(world_cases).reshape(-1,1)\ntotal_deaths = np.array(total_deaths).reshape(-1,1)\ntotal_recovered = np.array(total_recovered).reshape(-1,1)","90f12cf0":"day_since_1_18.shape","9bce9fab":"world_cases.shape","b2472105":"total_deaths.shape","55c47f1d":"total_recovered.shape","2ce95b3e":"days_in_future = 10\nfuture_forecast  = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1,1)\nadjusted_dates = future_forecast","58037408":"len(future_forecast) #118 days","77690475":"start = '01\/04\/2020'\nstart_date = datetime.datetime.strptime(start, '%d\/%m\/%Y')\nfuture_forecast_dates = []\nfor i in range(len(future_forecast)):\n    future_forecast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%d\/%m\/%Y'))","e2fc53cf":"future_forecast_dates","b441920e":"X_train, X_test, y_train, y_test = train_test_split(day_since_1_18,world_cases, test_size=0.15, shuffle=False)","b3fb7bdb":"#SVM\nkernel = ['poly', 'sigmoid','rbf']\nc = [0.01, 0.1, 1, 10]\ngamma = [0.01, 0.1, 1]\nepsilon = [0.01, 0.1, 1]\nshrinking = [True, False]\nsvm_grid = {'kernel': kernel, 'C': c, 'gamma': gamma, 'epsilon': epsilon, 'shrinking': shrinking}\n\nsvm = SVR()\nsvm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=20, verbose=1)\nsvm_search.fit(X_train, y_train)","7fc93907":"svm_confirmed = svm_search.best_estimator_\nsvm_pred = svm_confirmed.predict(future_forecast)","b38520b6":"svm_confirmed","2610005e":"svm_pred","c7e87d72":"svm_test_pred = svm_confirmed.predict(X_test)\nplt.plot(svm_test_pred)\nplt.plot(y_test)\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test))\nprint('MSE:', mean_squared_error(svm_test_pred, y_test))","f942a3aa":"#SVM\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.title('Number of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days since 4\/1\/2020', size=30)\nplt.ylabel('Number of Cases', size = 30)\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.show()","db9ed15f":"#Confirmed VS Prediction\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forecast, svm_pred, color='purple')\nplt.title('Number of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days since 4\/1\/2020', size=30)\nplt.ylabel('Number of Cases', size = 30)\nplt.legend(['Confirmed cases','SVM Predictions'])\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.show()","45318f7a":"#prediction\nprint('svm_pred')\nset(zip(future_forecast_dates[10:],svm_pred[10:]))","d8dde020":"#Randomforest\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestRegressor","89bcc8d5":"print({'bootstrap': True,\n 'criterion': 'mse',\n 'max_depth': None,\n 'max_features': 'auto',\n 'max_leaf_nodes': None,\n 'min_impurity_decrease': 0.0,\n 'min_impurity_split': None,\n 'min_samples_leaf': 1,\n 'min_samples_split': 2,\n 'min_weight_fraction_leaf': 0.0,\n 'n_estimators': 10,\n 'n_jobs': 1,\n 'oob_score': False,\n 'random_state': 42,\n 'verbose': 0,\n 'warm_start': False})","941902ee":"labels = y_train\nfeatures = X_train","cfc3a3e1":"from pprint import pprint","b3bf17ed":"#rf - start wait. yeah cell dekhne do ek baar-ok... ok done aage badho\nn_estimators= [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\nmax_features = ['auto','sqrt']\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\nmin_samples_split =  [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\n\nrandom_grid = {'n_estimators': n_estimators, 'max_features' : max_features, 'max_depth' : max_depth, 'min_samples_split' : min_samples_split,'min_samples_leaf' : min_samples_leaf, 'bootstrap' : bootstrap}\npprint(random_grid)","16ba939b":"rf = RandomForestRegressor()\nrf_search = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)","f32ddf93":"rf_search.fit(features, labels)\nprint(rf_search.best_params_)","795e408c":"rf_confirmed = rf_search.best_estimator_\nrf_pred = rf_confirmed.predict(future_forecast)","7cbd2746":"len(rf_pred)","22dc1f23":"rfc_test_pred = rf_confirmed.predict(X_test)\nplt.plot(rfc_test_pred)\nplt.plot(y_test)\nprint('MAE:', mean_absolute_error(rfc_test_pred, y_test))\nprint('MSE:', mean_squared_error(rfc_test_pred, y_test))","1794b54c":"#Linear Regression\nfrom sklearn.linear_model import LinearRegression\nlinear_model = LinearRegression(normalize=True, fit_intercept=True)\nlinear_model.fit(X_train, y_train)\ntest_linear_pred = linear_model.predict(X_test)\nlinear_pred = linear_model.predict(future_forecast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test))\nprint('MSE:', mean_squared_error(test_linear_pred, y_test))","2a2b79b4":"plt.plot(y_test)\nplt.plot(test_linear_pred)","a27ea582":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forecast, linear_pred,color='orange')\nplt.title('Number of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days since 4\/1\/2020', size=30)\nplt.ylabel('Number Cases', size = 30)\nplt.legend(['Confirmed Cases', 'Linear Regression Prediction'])\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.show()","81d289db":"print('linear regression future prediction')\nprint(linear_pred[-10:])","573f8bf0":"# COVID - 19 Prediction using SVM, Random Forest & Linear Regression | Predicted vs Actual\nSource - https:\/\/covid19.who.int\/?gclid=Cj0KCQjwvIT5BRCqARIsAAwwD-QRZaWKFB5C9WL1oXLWSv69IORQTpmEjFVUkSO11eipsp_C2nyJHesaAvkOEALw_wcB"}}