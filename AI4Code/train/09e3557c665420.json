{"cell_type":{"ed44c2fd":"code","57b77920":"code","dac3eef4":"code","f084fd2e":"code","5fb827d0":"code","695447e3":"code","d4433077":"code","dfa475ca":"code","0d235be5":"code","aca2f91a":"code","4ab2f68e":"code","859a52f1":"code","c74c1c11":"code","ea135d16":"code","ff312244":"code","da209c44":"code","7e54de4f":"code","493e9b7b":"code","4b278c92":"code","3175026c":"code","c04b9047":"code","c90929fe":"code","84212b91":"code","133927e9":"code","9cea2156":"code","2ca72bb4":"code","3d2125c0":"code","c0141b20":"code","68b9003b":"code","301917ca":"code","025854c2":"code","c2d9f4c8":"markdown","b3f4b25c":"markdown","c7e2506d":"markdown","ee9fe442":"markdown","9a39bbc2":"markdown","ecd558b0":"markdown","cadef17b":"markdown"},"source":{"ed44c2fd":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","57b77920":"data=pd.read_csv('\/kaggle\/input\/bit-coin\/bitcoinfinal(4).csv',header=None)\ndata.columns = ['Months','Price']\n\ndata.head()","dac3eef4":"from datetime import date\nfrom dateutil.relativedelta import relativedelta\nfor i in range(0,len(data.Months)):\n    data.Months[i] = date(2018,1,1) + relativedelta(months=+i)\n\ndata.head()","f084fd2e":"data = data.set_index('Months')\ndata.head()","5fb827d0":"data.plot(figsize=(20, 4))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Price')\nplt.show(block=False)\n","695447e3":"train_len = 29\ntrain = data[0:train_len] # first 29 months as training set\ntest = data[train_len:] # last months as out-of-time test set","d4433077":"y_hat_naive = test.copy()\ny_hat_naive['naive_forecast'] = train['Price'][train_len-1]","dfa475ca":"y_hat_naive['naive_forecast']","0d235be5":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(train['Price'], label='Train')\nplt.plot(test['Price'], label='Test')\nplt.plot(y_hat_naive['naive_forecast'], label='Naive forecast')\nplt.legend(loc='best')\nplt.title('Naive Method')\nplt.show()","aca2f91a":"from sklearn.metrics import mean_squared_error\nrmse = np.sqrt(mean_squared_error(test['Price'], y_hat_naive['naive_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Price']-y_hat_naive['naive_forecast'])\/test['Price'])*100,2)\n\nresults = pd.DataFrame({'Method':['Naive method'], 'MAPE': [mape], 'RMSE': [rmse]})\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","4ab2f68e":"y_hat_avg = test.copy()\ny_hat_avg['avg_forecast'] = train['Price'].mean()","859a52f1":"train['Price'].mean()","c74c1c11":"plt.figure(figsize=(20,4))\nplt.grid()\nplt.plot(train['Price'], label='Train')\nplt.plot(test['Price'], label='Test')\nplt.plot(y_hat_avg['avg_forecast'], label='Simple average forecast')\nplt.legend(loc='best')\nplt.title('Simple Average Method')\nplt.show()","ea135d16":"rmse = np.sqrt(mean_squared_error(test['Price'], y_hat_avg['avg_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Price']-y_hat_avg['avg_forecast'])\/test['Price'])*100,2)\n\nresults= pd.DataFrame({'Method':['Simple average method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","ff312244":"y_hat_sma = data.copy()\nma_window = 12\ny_hat_sma['sma_forecast'] = data['Price'].rolling(ma_window).mean()\ny_hat_sma['sma_forecast'][train_len:] = y_hat_sma['sma_forecast'][train_len-1]","da209c44":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(train['Price'], label='Train')\nplt.plot(test['Price'], label='Test')\nplt.plot(y_hat_sma['sma_forecast'], label='Simple moving average forecast- 12 months')\nplt.legend(loc='best')\nplt.title('Simple Moving Average Method - 12 months')\nplt.show()","7e54de4f":"rmse = np.sqrt(mean_squared_error(test['Price'], y_hat_sma['sma_forecast'][train_len:])).round(2)\nmape = np.round(np.mean(np.abs(test['Price']-y_hat_sma['sma_forecast'][train_len:])\/test['Price'])*100,2)\n\nresults  = pd.DataFrame({'Method':['Simple moving average forecast-12 months'], 'RMSE': [rmse],'MAPE': [mape] })\n\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","493e9b7b":"y_hat_sma = data.copy()\nma_window = 6\ny_hat_sma['sma_forecast'] = data['Price'].rolling(ma_window).mean()\ny_hat_sma['sma_forecast'][train_len:] = y_hat_sma['sma_forecast'][train_len-1]","4b278c92":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(train['Price'], label='Train')\nplt.plot(test['Price'], label='Test')\nplt.plot(y_hat_sma['sma_forecast'], label='Simple moving average forecast- 6 months')\nplt.legend(loc='best')\nplt.title('Simple Moving Average Method - 6 months')\nplt.show()","3175026c":"rmse = np.sqrt(mean_squared_error(test['Price'], y_hat_sma['sma_forecast'][train_len:])).round(2)\nmape = np.round(np.mean(np.abs(test['Price']-y_hat_sma['sma_forecast'][train_len:])\/test['Price'])*100,2)\n\nresults  = pd.DataFrame({'Method':['Simple moving average forecast-6 months'], 'RMSE': [rmse],'MAPE': [mape] })\n\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","c04b9047":"y_hat_sma = data.copy()\nma_window = 3\ny_hat_sma['sma_forecast'] = data['Price'].rolling(ma_window).mean()\ny_hat_sma['sma_forecast'][train_len:] = y_hat_sma['sma_forecast'][train_len-1]","c90929fe":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(train['Price'], label='Train')\nplt.plot(test['Price'], label='Test')\nplt.plot(y_hat_sma['sma_forecast'], label='Simple moving average forecast- 3 months')\nplt.legend(loc='best')\nplt.title('Simple Moving Average Method - 3 months')\nplt.show()","84212b91":"rmse = np.sqrt(mean_squared_error(test['Price'], y_hat_sma['sma_forecast'][train_len:])).round(2)\nmape = np.round(np.mean(np.abs(test['Price']-y_hat_sma['sma_forecast'][train_len:])\/test['Price'])*100,2)\n\nresults  = pd.DataFrame({'Method':['Simple moving average forecast-3 months'], 'RMSE': [rmse],'MAPE': [mape] })\n\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","133927e9":"y_hat_sma = data.copy()\nma_window12 =12\ny_hat_sma['sma_forecast12'] = data['Price'].rolling(ma_window12).mean()\ny_hat_sma['sma_forecast12'][train_len:] = y_hat_sma['sma_forecast12'][train_len-1]\nma_window6 =6\ny_hat_sma['sma_forecast6'] = data['Price'].rolling(ma_window6).mean()\ny_hat_sma['sma_forecast6'][train_len:] = y_hat_sma['sma_forecast6'][train_len-1]\nma_window3 =3\ny_hat_sma['sma_forecast3'] = data['Price'].rolling(ma_window3).mean()\ny_hat_sma['sma_forecast3'][train_len:] = y_hat_sma['sma_forecast3'][train_len-1]\nma_window1 =1\ny_hat_sma['sma_forecast1'] = data['Price'].rolling(ma_window1).mean()\ny_hat_sma['sma_forecast1'][train_len:] = y_hat_sma['sma_forecast1'][train_len-1]\nma_window9 =9\ny_hat_sma['sma_forecast9'] = data['Price'].rolling(ma_window9).mean()\ny_hat_sma['sma_forecast9'][train_len:] = y_hat_sma['sma_forecast9'][train_len-1]","9cea2156":"y_hat_sma.head(20)","2ca72bb4":"plt.figure(figsize=(20,15))\nplt.grid()\nplt.plot(train['Price'], label='Train')\nplt.plot(test['Price'], label='Test')\nplt.plot(y_hat_sma['sma_forecast12'], label='Simple moving average forecast- 12 months')\nplt.plot(y_hat_sma['sma_forecast9'], label='Simple moving average forecast- 9 months')\nplt.plot(y_hat_sma['sma_forecast6'], label='Simple moving average forecast- 6 months')\nplt.plot(y_hat_sma['sma_forecast3'], label='Simple moving average forecast- 3 months')\nplt.plot(y_hat_sma['sma_forecast1'], label='Simple moving average forecast- 1 months')\nplt.legend(loc='best')\nplt.title('Simple Moving Average Method')\nplt.show()","3d2125c0":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing\nmodel = SimpleExpSmoothing(train['Price'])\nmodel_fit = model.fit(optimized=True)\nmodel_fit.params\ny_hat_ses = test.copy()\ny_hat_ses['ses_forecast'] = model_fit.forecast(len(test))","c0141b20":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(train['Price'], label='Train')\nplt.plot(test['Price'], label='Test')\nplt.plot(y_hat_ses['ses_forecast'], label='Simple exponential smoothing forecast')\nplt.legend(loc='best')\nplt.title('Simple Exponential Smoothing Method')\nplt.show()","68b9003b":"rmse = np.sqrt(mean_squared_error(test['Price'], y_hat_ses['ses_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Price']-y_hat_ses['ses_forecast'])\/test['Price'])*100,2)\n\nresults= pd.DataFrame({'Method':['Simple exponential smoothing forecast'], 'RMSE': [rmse],'MAPE': [mape] }) \nresults","301917ca":"from statsmodels.tsa.holtwinters import ExponentialSmoothing\nmodel = ExponentialSmoothing(np.asarray(train['Price']) ,trend='additive', seasonal=None)\nmodel_fit = model.fit(optimized=True)\nprint(model_fit.params)\ny_hat_holt = test.copy()\ny_hat_holt['holt_forecast'] = model_fit.forecast(len(test))","025854c2":"rmse = np.sqrt(mean_squared_error(test['Price'], y_hat_holt['holt_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Price']-y_hat_holt['holt_forecast'])\/test['Price'])*100,2)\n\nresults = pd.DataFrame({'Method':['Holt\\'s exponential smoothing method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","c2d9f4c8":"# Simple exponential smoothing","b3f4b25c":"# Naive method","c7e2506d":"# Simple  moving average method -6\n","ee9fe442":"# Simple  moving average method -3","9a39bbc2":"Bitcoin Price Prediction is better predicted using Holt\\'s exponential smoothing method","ecd558b0":"# Simple  moving average method -12","cadef17b":"# Holt's method"}}