{"cell_type":{"93c19a7d":"code","8254370d":"code","6c950185":"code","17789d89":"code","c8cb6f2b":"code","0e1652fb":"code","55402888":"code","12494ff1":"code","3c8bd1de":"code","a293045c":"code","710cd1b9":"code","a91be55d":"code","31ddfc1f":"code","38d55517":"code","81f9a2de":"code","3a881333":"code","38ff4960":"markdown","9b206e8b":"markdown","c38e6080":"markdown"},"source":{"93c19a7d":"# Based on Tarun Kumar's notebook ","8254370d":"# Imports\n\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport cv2 as cv\n\nfrom keras.layers import Conv2D, Input, LeakyReLU, Dense, Activation, Flatten, Dropout, MaxPool2D\nfrom keras import models\nfrom keras.optimizers import Adam, RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nimport pickle\n\n%matplotlib inline","6c950185":"# Loading and Visualising Dataset\n\n## Seed to resample the same permutation every time\nnp.random.seed(1)\ndf_train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\n\n## Load dataset\ndf_train = df_train.iloc[np.random.permutation(len(df_train))]\n","17789d89":"df_train.head(5)","c8cb6f2b":"df_train.shape","0e1652fb":"# Preparing training and validation data\n\n## Set sizes\nsample_size = df_train.shape[0]\nvalidation_size = int(df_train.shape[0]*0.1)\n\n\n# train_x and train_y\ntrain_x = np.asarray(df_train.iloc[:sample_size-validation_size,1:]).reshape([sample_size-validation_size,28,28,1]) # taking all columns expect column 0\ntrain_y = np.asarray(df_train.iloc[:sample_size-validation_size,0]).reshape([sample_size-validation_size,1]) # taking column 0\n\n# val_x and val_y\nval_x = np.asarray(df_train.iloc[sample_size-validation_size:,1:]).reshape([validation_size,28,28,1])\nval_y = np.asarray(df_train.iloc[sample_size-validation_size:,0]).reshape([validation_size,1])\n","55402888":"train_x.shape, train_y.shape","12494ff1":"# Loading test.csv\n\ndf_test = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntest_x = np.asarray(df_test.iloc[:,:]).reshape([-1,28,28,1])\n","3c8bd1de":"# Normalize pixel data\n\ntrain_x = train_x\/255\nval_x = val_x\/255\ntest_x = test_x\/255\n","a293045c":"model = models.Sequential()","710cd1b9":"# Keras Sequential modelling\n\n## Block 1\nmodel.add(Conv2D(32,3, padding  =\"same\",input_shape=(28,28,1)))\nmodel.add(LeakyReLU())\nmodel.add(Conv2D(32,3, padding  =\"same\"))\nmodel.add(LeakyReLU())\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n## Block 2\nmodel.add(Conv2D(64,3, padding  =\"same\"))\nmodel.add(LeakyReLU())\nmodel.add(Conv2D(64,3, padding  =\"same\"))\nmodel.add(LeakyReLU())\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dense(32,activation='relu'))\nmodel.add(Dense(10,activation=\"sigmoid\"))","a91be55d":"# Compiling the model\n\n\ninitial_lr = 0.001\nloss = \"sparse_categorical_crossentropy\"\nmodel.compile(Adam(lr=initial_lr), loss=loss ,metrics=['accuracy'])\nmodel.summary()","31ddfc1f":"# Training\n\nepochs = 7\nbatch_size = 256\nhistory_1 = model.fit(train_x,train_y,batch_size=batch_size,epochs=epochs,validation_data=(val_x,val_y))\n","38d55517":"# Training performance\n\n## Diffining Figure\nf = plt.figure(figsize=(20,7))\n\n## Adding Subplot 1 (For Accuracy)\nf.add_subplot(121)\n\nplt.plot(history_1.epoch,history_1.history['accuracy'],label = \"accuracy\") # Accuracy curve for training set\nplt.plot(history_1.epoch,history_1.history['val_accuracy'],label = \"val_accuracy\") # Accuracy curve for validation set\n\nplt.title(\"Accuracy Curve\",fontsize=18)\nplt.xlabel(\"Epochs\",fontsize=15)\nplt.ylabel(\"Accuracy\",fontsize=15)\nplt.grid(alpha=0.3)\nplt.legend()\n\n## Adding Subplot 1 (For Loss)\nf.add_subplot(122)\n\nplt.plot(history_1.epoch,history_1.history['loss'],label=\"loss\") # Loss curve for training set\nplt.plot(history_1.epoch,history_1.history['val_loss'],label=\"val_loss\") # Loss curve for validation set\n\nplt.title(\"Loss Curve\",fontsize=18)\nplt.xlabel(\"Epochs\",fontsize=15)\nplt.ylabel(\"Loss\",fontsize=15)\nplt.grid(alpha=0.3)\nplt.legend()\n\nplt.show()","81f9a2de":"test_y = np.argmax(model.predict(test_x),axis =1)","3a881333":"# Evaluate the model on the test data using `evaluate`\nprint(\"Evaluate on test data\")\nresults = model.evaluate(test_x, test_y, batch_size=128)\nprint(\"test loss, test acc:\", results)\n\n# Generate predictions (probabilities -- the output of the last layer)\n# on new data using `predict`\nprint(\"Generate predictions for 3 samples\")\npredictions = model.predict(test_x[:3])\nprint(\"predictions shape:\", predictions.shape)","38ff4960":"**Loading and Visualizing Datasets**","9b206e8b":"**Predict on test set**","c38e6080":"Building the model"}}