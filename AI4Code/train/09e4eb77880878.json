{"cell_type":{"aa183462":"code","29493731":"code","de551b15":"code","47e9f343":"code","adec9576":"code","ef3718a8":"code","bfab9db8":"code","004bc602":"code","cd7e2db6":"code","e13f0438":"code","847437f8":"markdown","4f6feee0":"markdown","03d87f00":"markdown","43bb7c33":"markdown","b470a561":"markdown"},"source":{"aa183462":"import numpy as np\nimport sqlite3\nimport pandas as pd\npd.set_option('max_columns', None)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.ensemble import RandomForestRegressor","29493731":"connection = sqlite3.connect('..\/input\/soccer\/database.sqlite')\n\nplayers_df = pd.read_sql_query(\"SELECT * FROM Player\", connection)\nstats_df = pd.read_sql_query(\"SELECT * FROM Player_Attributes\", connection)","de551b15":"players_df","47e9f343":"stats_df","adec9576":"def onehot_encode(df, column):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column], prefix=column)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","ef3718a8":"def preprocess_inputs(players, stats):\n    players = players.copy()\n    stats = stats.copy()\n    \n    # Drop unused columns\n    players = players.drop(['id', 'player_name', 'player_fifa_api_id'], axis=1)\n    stats = stats.drop(['id', 'player_fifa_api_id', 'date'], axis=1)\n    \n    ## Players\n    \n    # Extract birthday date features\n    players['birthday'] = pd.to_datetime(players['birthday'])\n    players['birth_year'] = players['birthday'].apply(lambda x: x.year)\n    players['birth_month'] = players['birthday'].apply(lambda x: x.month)\n    players['birth_day'] = players['birthday'].apply(lambda x: x.day)\n    players = players.drop('birthday', axis=1)\n    \n    ## Stats\n    \n    # Get categorical stats\n    categoricals = stats.groupby(by='player_api_id', as_index=False)[[\n        'player_api_id',\n        'preferred_foot',\n        'attacking_work_rate',\n        'defensive_work_rate'\n    ]].head(1)\n    \n    # Clean categorical columns\n    for column in ['attacking_work_rate', 'defensive_work_rate']:\n        categoricals[column] = categoricals[column].apply(lambda x: np.NaN if x not in ['low', 'medium', 'high'] else x)\n        categoricals[column] = categoricals[column].fillna(categoricals[column].mode()[0])\n    \n    # Take the average numeric stats within groups and merge with categorical columns\n    stats = stats.groupby(by='player_api_id').mean()\n    stats = stats.merge(categoricals, on='player_api_id')\n    \n    # Fill numeric missing values with column means\n    for column in stats.loc[:, stats.isna().sum() > 0].columns:\n        stats[column] = stats[column].fillna(stats[column].mean())\n    \n    ## Merge\n    \n    # Create a single df\n    df = players.merge(stats, on='player_api_id')\n    df = df.drop('player_api_id', axis=1)\n    \n    # Binary encoding\n    df['preferred_foot'] = df['preferred_foot'].replace({'left': 0, 'right': 1})\n    \n    # One-hot encoding\n    for column in ['attacking_work_rate', 'defensive_work_rate']:\n        df = onehot_encode(df, column=column)\n    \n    # Split df into X and y\n    y = df['overall_rating']\n    X = df.drop('overall_rating', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","bfab9db8":"X_train, X_test, y_train, y_test = preprocess_inputs(players_df, stats_df)","004bc602":"X_train","cd7e2db6":"y_train","e13f0438":"model = RandomForestRegressor()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nrmse = np.sqrt(np.mean((y_test - y_pred)**2))\nr2 = model.score(X_test, y_test)\n\nprint(\"     Test RMSE: {:.5f}\".format(rmse))\nprint(\"Test R^2 Score: {:.5f}\".format(r2))","847437f8":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/gVRR8cp0l94","4f6feee0":"# Task for Today  \n\n***\n\n## Soccer Player Performance Prediction  \n\nGiven *data about soccer players*, let's try to predict the **average performance** of a given player.\n\nWe will use a random forest regression model to make our predictions.","03d87f00":"# Preprocessing","43bb7c33":"# Getting Started","b470a561":"# Training\/Results"}}