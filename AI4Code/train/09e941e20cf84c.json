{"cell_type":{"68566d28":"code","84c6b0a3":"code","af1996b5":"code","777ea49e":"code","a64422df":"code","2ffea494":"code","f3a64f33":"code","333b1089":"code","c57c2437":"code","379d0bfb":"code","7522d0d6":"code","c180fe59":"code","406be9d0":"code","d6861a72":"code","928d8447":"code","dbd604dd":"code","6aa13d6f":"code","ff257e1e":"code","fdffa749":"code","0248fd51":"code","ed1b2372":"code","006d8ea4":"code","16c2d8c6":"code","cb2a43d0":"code","a6d68f7c":"code","fe0f9922":"code","280460c0":"code","fc2bac91":"code","f755ddbb":"code","192fc9fd":"code","d1fceead":"code","d4cfe19b":"code","b22aa8ec":"code","defd6bab":"code","bec0c980":"code","82353751":"code","db250b03":"code","75b7ed10":"code","12e586ab":"code","da698c37":"code","a00d4c3c":"code","0c6d41f5":"code","35bbcafd":"code","75e5ba44":"code","acb8b651":"code","3419c911":"code","4bff287e":"code","31102f6d":"code","f1aaf20e":"code","eb0e1de8":"code","778fcb48":"code","7d79909c":"code","2ee53473":"code","fbc1addc":"code","f3749786":"code","8bc67fa0":"code","aa945ebb":"code","74455100":"code","d9efa44c":"code","b1215948":"code","515a1033":"code","61fcd789":"markdown","d6f0f841":"markdown","58016852":"markdown","e7d97fc1":"markdown","901129a5":"markdown","dbf5091b":"markdown"},"source":{"68566d28":"pip install pyspark","84c6b0a3":"pip install handyspark","af1996b5":"import os\nimport pandas as pd\nimport numpy as np\n\nfrom pyspark import SparkConf, SparkContext\nfrom pyspark.sql import SparkSession, SQLContext\n\nfrom pyspark.sql.types import *\nimport pyspark.sql.functions as F\nfrom pyspark.sql.functions import udf, col\n\nfrom pyspark.ml.regression import RandomForestRegressor, LinearRegressionModel\nfrom pyspark.mllib.evaluation import RegressionMetrics\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.tuning import ParamGridBuilder, CrossValidator, CrossValidatorModel\nfrom pyspark.ml.feature import VectorAssembler, StandardScaler\nfrom pyspark.ml.evaluation import RegressionEvaluator\nfrom pyspark.ml.feature import StringIndexer, OneHotEncoder","777ea49e":"# Visualization\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\npd.set_option('display.max_columns', 200)\npd.set_option('display.max_colwidth', 400)\n\nfrom matplotlib import rcParams\nimport seaborn as sns \nsns.set(context='notebook', style='whitegrid', rc={'figure.figsize': (18,4)})\nrcParams['figure.figsize'] = 18,4\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'","a64422df":"spark = SparkSession.builder.master(\"local[2]\").appName(\"Linear-Regression-Airbnb_House_price\").getOrCreate()\nspark","2ffea494":"sc = spark.sparkContext\nsc","f3a64f33":"PATH = '..\/input\/listingsold-datasetcsv\/listings.csv'","333b1089":"import pandas as pd\nhousing_df = pd.read_csv(PATH)\nhousing_df.head()","c57c2437":"null = []\nfor i in housing_df.columns:\n    if any(housing_df[i].isna()) == True:\n        null.append(i)\nnull","379d0bfb":"for i in null:\n    housing_df[i]=housing_df[i].ffill().bfill()","7522d0d6":"housing_df.amenities\n","c180fe59":"housing_df.amenities = housing_df.amenities.apply(lambda x :x.strip('{').strip('}'))\nhousing_df.amenities[0]        ","406be9d0":"housing_df.amenities =housing_df.amenities.apply(lambda x:x.replace('\"',''))\nhousing_df.amenities.head()","d6861a72":"housing_df.value_counts()","928d8447":"#housing_df = spark.read.csv(path=PATH,header=True)\nhousing_df = spark.createDataFrame(housing_df)","dbd604dd":"housing_df.printSchema()","6aa13d6f":"housing_df.select('price').show(10)","ff257e1e":"housing_df.show(5)","fdffa749":"lst = ['id','host_since','listing_url','host_id','square_feet']\n# these columns are irrelevant for price and squear_feet is consist of 98% missing values.","0248fd51":"housing_df = housing_df.drop(*lst)\nhousing_df.show()\n","ed1b2372":"housing_df.printSchema()","006d8ea4":"housing_df.columns","16c2d8c6":"housing_df","cb2a43d0":"housing_df = housing_df.toPandas()\nhousing_df.head()","a6d68f7c":"housing_df.isna().mean()","fe0f9922":"housing_df = spark.createDataFrame(housing_df)\nhousing_df.printSchema()","280460c0":"housing_df.select('price','property_type').show(10)","fc2bac91":"import seaborn as sns","f755ddbb":"# group by housingmedianage and see the distribution\nresult_df = housing_df.groupBy(\"property_type\").count().sort(\"property_type\", ascending=False)\nresult_df","192fc9fd":"result_df.toPandas().plot.bar(x='property_type',figsize=(14, 6))","d1fceead":"sns.distplot(housing_df.toPandas()['price'])","d4cfe19b":"(housing_df.describe().select('summary',F.round(\"price\", 4).alias(\"price\")).show())","b22aa8ec":"sns.boxplot(housing_df.toPandas()['price'])","defd6bab":"import matplotlib.pyplot as plt\n","bec0c980":"plt.figure(figsize=(12,9))\nsns.lineplot(housing_df.toPandas()['review_scores_rating'],housing_df.toPandas()['price'])","82353751":"nbc= housing_df.select('neighbourhood').distinct().show()\nnbc","db250b03":"housing_df.toPandas().neighbourhood.unique()","75b7ed10":"df = housing_df.toPandas()\ndf.head()","12e586ab":"area =['Roslindale', 'Jamaica Plain', 'Mission Hill', 'Fenway\/Kenmore',\n       'Back Bay', 'Leather District', 'Chinatown', 'Hyde Park',\n       'North End', 'Roxbury', 'South End', 'Mattapan', 'East Boston',\n       'South Boston', 'Charlestown', 'West End', 'Beacon Hill',\n       'Theater District', 'Downtown Crossing', 'Downtown',\n       'Financial District', 'Government Center', 'Allston-Brighton',\n       'West Roxbury', 'Chestnut Hill', 'Dorchester', 'Brookline',\n       'Cambridge', 'Somerville', 'Harvard Square']","da698c37":"plt.figure(figsize=(12,9))\nfor i in area:\n    k = df[df['neighbourhood']==i]\n    sns.lineplot(k[\"review_scores_accuracy\"], k.price)\n    plt.title(i)\n    plt.show()","a00d4c3c":"plt.figure(figsize=(12,9))\nsns.barplot(df[\"instant_bookable\"], df.price)","0c6d41f5":"\nplt.figure(figsize=(12,9))\nsns.barplot(df[\"cancellation_policy\"], df.price,hue=df.review_scores_accuracy)","35bbcafd":"plt.figure(figsize=(15,10))\nsns.heatmap(df.corr(),annot=True)","75e5ba44":"df[['review_scores_accuracy','review_scores_cleanliness','review_scores_checkin','review_scores_communication','review_scores_value']]","acb8b651":"#df.corr()['price'].drop('price').plot(kind='barh');\n\nsns.set_style(\"darkgrid\")\ndf.corr()[\"price\"].drop('price').sort_values().plot.barh(figsize=(10,6), color=\"red\")\nplt.title(\" Correlations With Price\", {\"color\":\"blue\", \"fontsize\":15});","3419c911":"housing_df.printSchema()","4bff287e":"housing_df.columns","31102f6d":"housing_df.columns[:-1]\n","f1aaf20e":"str_cols = [f.name for f in housing_df.schema.fields if isinstance(f.dataType, StringType)]\n# ['colc']\nstr_cols","eb0e1de8":"categories = housing_df.select(\"neighbourhood\").distinct().rdd.flatMap(lambda x: x).collect()\n\nexprs = [F.when(F.col(\"neighbourhood\") == category, 1).otherwise(0).alias(category)\n         for category in categories]\n\nnbc = housing_df.select(*exprs)\nnbc.show()","778fcb48":"categories = housing_df.select(\"property_type\").distinct().rdd.flatMap(lambda x: x).collect()\n\nexprs = [F.when(F.col(\"property_type\") == category, 1).otherwise(0).alias(category)\n         for category in categories]\n\npt = housing_df.select(*exprs)\npt.show()","7d79909c":"housing_df.columns","2ee53473":"housing_df = housing_df.na.replace('','other')","fbc1addc":"from pyspark.sql.types import IntegerType\nhousing_df = housing_df.withColumn(\"price\", housing_df[\"price\"].cast(IntegerType()))","f3749786":"string_indexer = StringIndexer(inputCols=['neighbourhood',\n 'property_type',\n 'room_type',\n 'amenities',\n 'instant_bookable',\n 'cancellation_policy'], \n                               outputCols=[\"neighbourhood_ix\", \"property_type_ix\", \"room_type_ix\",\"amenities_ix\", \n                                           \"instant_bookable_ix\", \"cancellation_policy_ix\"], handleInvalid=\"keep\")\n\nohe_indexer = OneHotEncoder(inputCols=[\"neighbourhood_ix\", \"property_type_ix\", \"room_type_ix\",\"amenities_ix\", \"instant_bookable_ix\", \n                                            \"cancellation_policy_ix\"], \n                           outputCols=[\"neighbourhood_enc\", \"property_type_enc\", \"room_type_enc\",\"amenities_enc\", \"instant_bookable_enc\", \n                                            \"cancellation_policy_enc\"], handleInvalid=\"keep\")\n\nassembler = VectorAssembler(inputCols=['latitude',\n 'longitude',\n 'neighbourhood_enc',\n 'property_type_enc',\n 'room_type_enc',\n 'accommodates',\n 'bathrooms',\n 'bedrooms',\n 'beds',\n 'amenities_enc',\n 'minimum_nights',\n 'number_of_reviews',\n 'review_scores_rating',\n 'review_scores_accuracy',\n 'review_scores_cleanliness',\n 'review_scores_checkin',\n 'review_scores_communication',\n 'review_scores_location',\n 'review_scores_value',\n 'instant_bookable_enc',\n 'cancellation_policy_enc',\n 'calculated_host_listings_count',\n 'reviews_per_month'] , outputCol=\"Attributes\")\n\nregressor = RandomForestRegressor(featuresCol=\"Attributes\", labelCol=\"price\")\n\npipeline = Pipeline(stages=[string_indexer, ohe_indexer, assembler, regressor])","8bc67fa0":"paramgrid = ParamGridBuilder() \\\n                .addGrid(regressor.numTrees, [50, 100, 500, 1000]).build()\n\ncross_validator = CrossValidator(estimator=pipeline,\n                                estimatorParamMaps=paramgrid,\n                                evaluator= RegressionEvaluator(labelCol=\"price\"),\n                                numFolds=3)","aa945ebb":"train_data, test_data = housing_df.randomSplit([0.75, 0.25])\n","74455100":"cvmodel = cross_validator.fit(train_data)","d9efa44c":"bestmodel = cvmodel.bestModel\nfor x in range(len(bestmodel.stages)):\n    print(bestmodel.stages[x])","b1215948":"pred = cvmodel.transform(test_data)\npred.select(\"price\", \"prediction\").show()","515a1033":"eval = RegressionEvaluator(labelCol=\"price\")\nrmse = eval.evaluate(pred)\nmse = eval.evaluate(pred, {eval.metricName:\"mse\"})\nmae = eval.evaluate(pred, {eval.metricName:\"mae\"})\nr2 = eval.evaluate(pred, {eval.metricName:\"r2\"})\n\nprint(\"RMSE: %.3f\" %rmse)\nprint(\"MSE : %.3f\" %mse)\nprint(\"MAE : %.3f\" %mae)\nprint(\"R2  : %.3f\" %r2)","61fcd789":"# Prepare Amenities Column","d6f0f841":"# ASSESSMENT","58016852":"# Fill Missing Values with Pandas","e7d97fc1":"# Modelling","901129a5":"# Creating Cross Validator","dbf5091b":"# Get Dummies for 'neighbourhood','property_type'"}}