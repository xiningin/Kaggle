{"cell_type":{"8cd72afa":"code","c5dfcb2b":"code","76f094d2":"code","2e4982cf":"code","4c11aaf6":"code","e66a97d7":"code","0024f431":"code","68a1150c":"code","c472afd1":"markdown","54bca0cb":"markdown","4ebb3222":"markdown"},"source":{"8cd72afa":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n#from sklearn.manifold import TSNE  \nfrom scipy.special import erfinv\nfrom bokeh.palettes import viridis\nimport cuml\n\nimport plotly.express as px\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c5dfcb2b":"train = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/train.csv\")\ntrain = train.loc[train[\"target\"] > 5]\nX = train.iloc[:,1:15]\nY = train.iloc[:,15]\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/test.csv\")\ntest = test.iloc[:,1:15]","76f094d2":"def rg(df, e, start, end):\n    for i in df.columns[start:end]:\n        r = df[i].rank()\n        Range = (r\/np.max(r)-0.5)*2\n        Range = np.clip(Range, a_max = 1-e, a_min = -1+e)\n        rg = erfinv(Range)\n        df[i] = rg * 2**0.5\n    return df","2e4982cf":"X = rg(df = X, e = 0.000001, start = 0, end = 14)","4c11aaf6":"tSNE = cuml.TSNE(n_components=2, perplexity=25, n_neighbors = 80)\ndim3 = tSNE.fit_transform(X)\nX[\"tSNE1\"] = dim3[:,0]\nX[\"tSNE2\"] = dim3[:,1]","e66a97d7":"uMAP = cuml.UMAP(n_components=2, n_neighbors=15, min_dist=0.5)\ndim3 = uMAP.fit_transform(X)\nX[\"UMAP1\"] = dim3[:,0]\nX[\"UMAP2\"] = dim3[:,1]\nX[\"target\"] = Y","0024f431":"fig = px.scatter(X, \n                 x='tSNE1', \n                 y='tSNE2', \n                 color='target',\n                 hover_data={'tSNE1': False, \n                             'tSNE2': False,\n                             'target': True\n                         },\n                 opacity=0.8,\n                 color_continuous_scale=px.colors.sequential.Magma,\n                 title=\"t-SNE\"\n                 )\n\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))\n\nfig.show()","68a1150c":"fig = px.scatter(X, \n                 x='UMAP1', \n                 y='UMAP2', \n                 color='target',\n                 hover_data={'UMAP1': False, \n                             'UMAP2': False,\n                             'target': True\n                         },\n                 opacity=0.8,\n                 color_continuous_scale=px.colors.sequential.Viridis,\n                 title=\"UMAP\"\n                 )\n\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))\n\nfig.show()","c472afd1":"Rank Gauss","54bca0cb":"# t-SNE","4ebb3222":"# UMAP"}}