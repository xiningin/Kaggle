{"cell_type":{"20e424d9":"code","2e343a01":"code","b8c7e84d":"code","72778528":"code","171331bf":"code","dd0e2055":"code","505cf47f":"code","9eb55354":"code","0c5e66b0":"code","452587b6":"code","6067ec14":"code","6c76747d":"code","dd4a2239":"code","0246e857":"code","00727a98":"code","7a0ec9c7":"code","3c6e2466":"code","8e1e3d44":"code","21acd13f":"code","1c4d6c47":"code","a5c13e6c":"code","10789d85":"code","61f7b886":"code","07b1d8d5":"code","32dd65cf":"code","79f9ae49":"code","4996ee84":"code","7715212e":"code","ba691b3c":"code","43896fe0":"code","c9953240":"code","94114a72":"code","f8102e12":"code","06509a61":"code","0ceeeef6":"code","70d4f900":"code","414b9109":"code","401e179c":"code","e611ecae":"code","53f6a757":"code","9306ba2e":"code","1c988203":"code","327ea8b1":"code","fe888587":"code","07b1a1f9":"code","c04b21d7":"code","4736d738":"code","74360979":"code","18e86e85":"code","3c00e946":"code","ab02a4dd":"code","e5dad840":"code","74a2c462":"code","32e28a8a":"code","7fb38e7a":"code","42d1d980":"code","a9f07f4c":"code","229437b2":"code","2d3299ed":"code","3f712ada":"code","f93ba533":"code","e101d660":"code","b12f0129":"code","c2b7dfbb":"code","81ce47f7":"code","67bc3793":"code","3852f23e":"code","fe5d3a55":"code","103599a0":"code","69e9e7d0":"code","d01e328c":"code","dea77314":"code","43f7b341":"code","325a6698":"code","52e4c680":"code","b4f7fdd7":"code","5b57a687":"code","a2c09ec8":"code","d78768b5":"code","8ec94684":"code","89393632":"code","58dd5d18":"code","50d1af79":"code","ff97c5ff":"code","49c505e6":"code","cfb8bc63":"code","0d6fb867":"code","ef2a1985":"code","ab53883b":"code","e6644151":"markdown","68698b23":"markdown","0d6054f3":"markdown","b7c9a27c":"markdown","b2d06e49":"markdown","3eec8658":"markdown","69fa996c":"markdown","b22ab2a5":"markdown","0671bbb1":"markdown","7c3a5fec":"markdown","1321b914":"markdown","62b8dd47":"markdown","5dc3b74e":"markdown","f47f32ff":"markdown","dc0ce6bc":"markdown","172da7b8":"markdown","857eb9a9":"markdown","9426fcce":"markdown","3d3e2ff0":"markdown","9ae0f55d":"markdown","abdc1ff3":"markdown","ebd5c137":"markdown","2c48af65":"markdown","a917c8d3":"markdown","1e9de63e":"markdown","179b602a":"markdown","cfdf9a9c":"markdown","e829dae5":"markdown","c64e611a":"markdown","6f4662bc":"markdown","fcdea9c6":"markdown","172cc366":"markdown","052139f4":"markdown","3bc89235":"markdown","291766db":"markdown","ad8524f4":"markdown","b01a7c50":"markdown","9086bb69":"markdown","24e3de87":"markdown","b5f8c952":"markdown","0383e2f5":"markdown","de036173":"markdown","5dce991a":"markdown","a5280015":"markdown","d453cf46":"markdown","e2491f6d":"markdown","6b445ed7":"markdown","d6fbf7b4":"markdown","e353f2df":"markdown","8983133f":"markdown","38b9877f":"markdown","7ce03dfa":"markdown","99dc145b":"markdown","c2f80e1e":"markdown","0ce1492c":"markdown","4e83a615":"markdown"},"source":{"20e424d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2e343a01":"import numpy as np\nimport pandas as pd\nimport random\nimport math\nfrom scipy import stats\n\nimport sklearn as skl\nfrom sklearn.model_selection import train_test_split, KFold, GridSearchCV, cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error as mse, r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\n\nfrom datetime import datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%config InlineBackend.figure_format = 'svg'\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom pylab import rcParams\n","b8c7e84d":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","72778528":"TRAIN_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/test.csv'","171331bf":"train = pd.read_csv(TRAIN_DATASET_PATH)\ntest = pd.read_csv(TEST_DATASET_PATH)","dd0e2055":"train.shape, test.shape","505cf47f":"all_data = pd.concat([train, test], ignore_index=True)\nall_data.info()","9eb55354":"all_data.head()","0c5e66b0":"all_data['Id'] = all_data['Id'].astype(str)\nall_data['DistrictId'] = all_data['DistrictId'].astype(str)","452587b6":"all_data.rename(columns = {'Helthcare_2' : 'Healthcare_2',}, inplace = True)","6067ec14":"price = train['Price']\nprice","6c76747d":"price_sort = sorted(price)\nmedian = np.quantile(price_sort, q=0.5).round(3) # \u041c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b\nmean = np.mean(price_sort).round(3) # \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b","dd4a2239":"print(f'\u041c\u0435\u0434\u0438\u0430\u043d\u0430 - {median}\\n\u0421\u0440\u0435\u0434\u043d\u0435\u0435 - {mean}\\n')\nplt.figure(figsize = (16, 10))\n\nsns.set(font_scale=1)\nsns.distplot(price_sort, color='green', bins=50, kde=False)\n\ny = np.linspace(0, 1000, 10)\nplt.plot([mean] * 10, y, label='\u0421\u0440\u0435\u0434\u043d\u0435\u0435',  linewidth=2, color='b')\nplt.plot([median] * 10, y, label='\u041c\u0435\u0434\u0438\u0430\u043d\u0430',  linewidth=2, color='r')\n\nplt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439')\nplt.xlabel('Price')\nplt.ylabel('Count')\nplt.legend()\nplt.show()","0246e857":"all_data.describe(include='all')","00727a98":"notna_df = all_data.loc[all_data['LifeSquare'].notna()] # \u0421\u0442\u0440\u043e\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430 LifeSquare\nmed_s = notna_df[\"Square\"].median()\nmed_ls = notna_df[\"LifeSquare\"].median()\n\n# \u0423\u0437\u043d\u0430\u0435\u043c \u043a\u0430\u043a \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0441\u043e\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0434\u043e\u043c\u0430 \u0441 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e\nratio_square = med_s \/ med_ls # <-- \u0421\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nprint(ratio_square)\n\n# \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0441\u0442\u0440\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 LifeSquare \u043b\u0438\u0431\u043e \u043d\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430, \u043b\u0438\u0431\u043e \u0431\u043e\u043b\u044c\u0449\u0435 Square\nproblem_index = list(all_data.loc[all_data['LifeSquare'].isna()].index)\n# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u044d\u0442\u0438 LifeSquare \u043f\u043e \u044d\u0442\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Square \/ ratio_square\nfor i in problem_index:\n    all_data.loc[i, 'LifeSquare'] = (all_data.loc[i, 'Square'] \/ ratio_square)\n    \nall_data.info()","7a0ec9c7":"# \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0441\u0442\u0440\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 LifeSquare \u043b\u0438\u0431\u043e \u043d\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430, \u043b\u0438\u0431\u043e \u0431\u043e\u043b\u044c\u0449\u0435 Square\nproblem_index = list(all_data.loc[all_data['LifeSquare'].isna()].index) + list((all_data.loc[(all_data['LifeSquare'] > all_data['Square'])].index))\n# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u044d\u0442\u0438 LifeSquare \u043f\u043e \u044d\u0442\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Square \/ ratio_square\nfor i in problem_index:\n    all_data.loc[i, 'LifeSquare'] = (all_data.loc[i, 'Square'] \/ ratio_square)","3c6e2466":"all_data.info()","8e1e3d44":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0441\u043e\u043e\u0442\u043d\u043e\u0441\u044f\u0442\u0441\u044f Healthcare_1 \u0438 Healthcare_2\nh1_h2 = all_data.pivot_table('Id', 'Healthcare_1', 'Healthcare_2', 'count')\n\nrcParams[\"figure.figsize\"] = 18, 10\n\nh1_h2.sort_values([0, 1, 2, 3, 4, 5, 6]).plot(kind='bar', stacked=True)","21acd13f":"Healthcare_2 = all_data['Healthcare_2'].unique() # <-- \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u044f Helthcare_2\n\nratio_dict = {} # <-- \u0421\u043b\u043e\u0432\u0430\u0440\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u043c \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u043a\u0430\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Healthcare_1 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 Helthcare_2\n\n# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u044d\u0442\u043e\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c\nfor i in Healthcare_2:\n    globals()['class_' + str(i)] = list(h1_h2[h1_h2[i].notnull()][i].sort_values().index)\n    ratio_dict[str(i)] = globals()['class_' + str(i)]\n","1c4d6c47":"# \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0441\u0442\u0440\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 Healthcare_1 \u043d\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430\nproblem_index = list(all_data.loc[all_data['Healthcare_1'].isna()].index)\n\n# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Healthcare_1 \u0432 \u044d\u0442\u0438\u0445 \u0441\u0442\u0440\u043e\u0447\u043a\u0430\u0445 \nfor i in problem_index:\n    insert_value = random.choice(ratio_dict[str(all_data.Healthcare_2[i])])\n    all_data.Healthcare_1[i] = insert_value","a5c13e6c":"all_data","10789d85":"h1_h2 = all_data.pivot_table('Id', 'Healthcare_1', 'Healthcare_2', 'count')\n\nrcParams[\"figure.figsize\"] = 18, 10\n\nh1_h2.sort_values([0, 1, 2, 3, 4, 5, 6]).plot(kind='bar', stacked=True)","61f7b886":"all_data.describe(include='all')","07b1d8d5":"sns.set(font_scale=1)\n\nsns.jointplot(all_data['Rooms'], price, height=8, kind='reg')\n\nplt.show()","32dd65cf":"all_data['Rooms'].value_counts()","79f9ae49":"print(all_data.groupby([\"Rooms\"])[\"Square\"].median())","4996ee84":"problem_index  = all_data.loc[(all_data['Rooms'] == 0) + (all_data['Rooms'] > 6)].index\n\nfor i in problem_index:\n    if all_data.loc[i, 'Square'] > 0 and all_data.loc[i, 'Square'] < 45:\n        all_data.loc[i, 'Rooms'] = 1\n    elif all_data.loc[i, 'Square'] >= 45 and all_data.loc[i, 'Square'] < 65:\n        all_data.loc[i, 'Rooms'] = 2\n    elif all_data.loc[i, 'Square'] >= 65 and all_data.loc[i, 'Square'] < 85:\n        all_data.loc[i, 'Rooms'] = 3\n    elif all_data.loc[i, 'Square'] >= 85 and all_data.loc[i, 'Square'] < 110:\n        all_data.loc[i, 'Rooms'] = 4\n    elif all_data.loc[i, 'Square'] >= 100 and all_data.loc[i, 'Square'] < 120:\n        all_data.loc[i, 'Rooms'] = 5\n    else:\n        all_data.loc[i, 'Rooms'] = 6","7715212e":"print(all_data.groupby([\"Rooms\"])[\"Square\"].median())","ba691b3c":"sns.jointplot(all_data['Square'], price, height=8, kind='reg')\n\nplt.show()","43896fe0":"    problem_index = all_data.loc[(all_data['Square'] < 12) + (all_data['Square'] > 250)].index\n    \n    for i in problem_index:\n        if all_data.loc[i, 'Rooms'] == 1:\n            all_data.loc[i, 'Square'] = 40.326570\n            \n        elif all_data.loc[i, 'Rooms'] == '2':\n            all_data.loc[i, 'Square'] == 55.833543\n            \n        elif all_data.loc[i, 'Rooms'] == 3:\n            all_data.loc[i, 'Square'] = 77.468118\n            \n        elif all_data.loc[i, 'Rooms'] == 4:\n            all_data.loc[i, 'Square'] = 97.241417\n            \n        elif all_data.loc[i, 'Rooms'] == 5:\n            all_data.loc[i, 'Square'] = 117.340085\n        \n        else:\n            all_data.loc[i, 'Square'] = 138.427694","c9953240":"sns.jointplot(all_data['LifeSquare'], price, height=8, kind='reg')\n\nplt.show()","94114a72":"# \u0423\u0437\u043d\u0430\u0435\u043c \u043a\u0430\u043a \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0441\u043e\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0434\u043e\u043c\u0430 \u0441 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e\nratio_square = all_data[\"Square\"].median() \/ all_data[\"LifeSquare\"].median() # <-- \u0421\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n\n# \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0441\u0442\u0440\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 LifeSquare \u043b\u0438\u0431\u043e \u043c\u0435\u043d\u044c\u0448\u0435 6, \u043b\u0438\u0431\u043e \u0431\u043e\u043b\u044c\u0448\u0435 150, \u043b\u0438\u0431\u043e \u0431\u043e\u043b\u044c\u0449\u0435 Square\nproblem_index = list(all_data.loc[all_data['LifeSquare'] < 6].index) + list(all_data.loc[all_data['LifeSquare'] > 150].index) \\\n+ list((all_data.loc[(all_data['LifeSquare'] > all_data['Square'])].index))\n# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 LifeSquare \u0432 \u044d\u0442\u0438\u0445 \u0441\u0442\u0440\u043e\u0447\u043a\u0430\u0445 \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 Square\nfor i in problem_index:\n    all_data.loc[i, 'LifeSquare'] = all_data.loc[i, 'Square'] \/ ratio_square","f8102e12":"sns.jointplot(all_data['KitchenSquare'], price, height=8, kind='reg')\n\nplt.show()","06509a61":"all_data[\"Square\"].median() \/ all_data[\"KitchenSquare\"].median()","0ceeeef6":"less_3 = list(all_data.loc[all_data['KitchenSquare'] < 3].index) \n\nfor i in less_3:\n    all_data.loc[i, 'KitchenSquare'] = all_data.loc[i, \"Square\"] \/ (all_data[\"Square\"].median() \/ all_data[\"KitchenSquare\"].median())\n    \nmore_30 = list(all_data.loc[all_data['KitchenSquare'] > 30].index)\n\nfor i in more_30:\n    all_data.loc[i, 'KitchenSquare'] = all_data['KitchenSquare'].median()  ","70d4f900":"all_data['KitchenSquare'].value_counts()","414b9109":"all_data.loc[(all_data['LifeSquare'] + all_data['KitchenSquare']) > all_data['Square']]","401e179c":"problem_index = list(all_data.loc[(all_data['LifeSquare'] + all_data['KitchenSquare']) > all_data['Square']].index)\n\nfor i in problem_index:\n    all_data.loc[i, 'LifeSquare'] = all_data.loc[i, 'Square'] - all_data.loc[i, 'KitchenSquare']","e611ecae":"all_data.loc[all_data['LifeSquare'] < all_data['KitchenSquare']]","53f6a757":"problem_index = all_data.loc[all_data['LifeSquare'] < all_data['KitchenSquare']].index\n\nfor i in problem_index:\n    all_data.loc[i, 'LifeSquare'], all_data.loc[i, 'KitchenSquare'] = all_data.loc[i, 'KitchenSquare'], all_data.loc[i, 'LifeSquare']","9306ba2e":"rcParams[\"figure.figsize\"] = 16, 12\nplt.scatter(all_data.loc[all_data['Price'].notna(), 'KitchenSquare'], price, color='yellow', label='KitchenSquare')\nplt.scatter(all_data.loc[all_data['Price'].notna(), 'LifeSquare'], price, color='orange', label='LifeSquare')\nplt.scatter(all_data.loc[all_data['Price'].notna(), 'Square'], price, color='red', label='Square')\n\nplt.legend()\nplt.show()","1c988203":"sns.jointplot(all_data['HouseFloor'], price, height=8, kind='reg')\n\nplt.show()","327ea8b1":"all_data.loc[all_data['HouseFloor'] < 1]","fe888587":"problem_index = all_data.loc[all_data['HouseFloor'] < 1].index\n\nfor i in problem_index:\n    all_data.loc[i, 'HouseFloor'] = all_data.loc[i, 'Floor']","07b1a1f9":"all_data.loc[all_data['HouseFloor'] > 90]","c04b21d7":"all_data.loc[all_data.loc[all_data['HouseYear'] == 1977].index, 'HouseFloor'].median()","4736d738":"problem_index = all_data.loc[all_data['HouseFloor'] > 90].index\n\nfor i in problem_index:\n    if all_data.loc[i, 'HouseFloor'] < 17:\n        all_data.loc[i, 'HouseFloor'] = 17\n    else:\n        all_data.loc[i, 'HouseFloor'] = all_data.loc[i, 'Floor']","74360979":"all_data.loc[all_data['Floor'] > all_data['HouseFloor']]","18e86e85":"problem_index = all_data.loc[all_data['Floor'] > all_data['HouseFloor']].index\n\nfor i in problem_index:\n    all_data.loc[i, 'HouseFloor'] = all_data.loc[i, 'Floor'] ","3c00e946":"all_data['HouseYear'].value_counts()","ab02a4dd":"current_year = datetime.now().year\nall_data.loc[all_data['HouseYear'] > current_year]","e5dad840":"problem_index = all_data.loc[all_data['HouseYear'] > current_year].index\n\nall_data.loc[all_data['HouseYear'] == 20052011, 'HouseYear'] = 2011 \n\nfor i in problem_index:\n    all_data.loc[i, 'HouseYear'] = current_year","74a2c462":"sns.jointplot(all_data['HouseYear'], price, height=8, kind='reg')\n\nplt.show()","32e28a8a":"all_data.info()","7fb38e7a":"all_data","42d1d980":"binary_to_numbers = {'A': 0, 'B': 1}\n\nall_data['Ecology_2'] = all_data['Ecology_2'].replace(binary_to_numbers)\nall_data['Ecology_3'] = all_data['Ecology_3'].replace(binary_to_numbers)\nall_data['Shops_2'] = all_data['Shops_2'].replace(binary_to_numbers)","a9f07f4c":"class DataPreprocessing:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.means = None\n        self.medians = None\n        self.lifesquare_square = None\n        self.kitchensquare_square = None\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.medians = X.median()\n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n        self.means = X.mean()\n    \n        self.lifesquare_square = self.medians['Square'] \/ self.medians['LifeSquare']\n        self.kitchensquare_square = self.medians['Square'] \/ self.medians['KitchenSquare']\n        \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n        \n        X.rename(columns = {'Helthcare_2' : 'Healthcare_2',}, inplace = True)\n        \n        # \u0417\u0410\u041f\u041e\u041b\u041d\u042f\u0415\u041c \u041f\u0420\u041e\u041f\u0423\u0421\u041a\u0418\n        # LifeSquare\n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        condition = X['LifeSquare'].isna()\n        coef = self.lifesquare_square\n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] \/ coef\n        \n        # Healthcare_1         \n        X['Healthcare_1_nan'] = X['Healthcare_1'].isna() * 1\n        h1_h2 = all_data.pivot_table('Id', 'Healthcare_1', 'Healthcare_2', 'count')\n        Hc_2_unique = X['Healthcare_2'].unique() # <-- \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u044f Helthcare_2\n        ratio_dict = {}\n        # \u0421\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 Healthcare_1 \u0438 Healthcare_2\n        for i in Hc_2_unique:\n            globals()['class_' + str(i)] = list(h1_h2[h1_h2[i].notnull()][i].sort_values().index)\n            ratio_dict[str(i)] = globals()['class_' + str(i)]\n            \n        condition = X['Healthcare_1'].isna().index\n        \n        for i in condition:\n            insert_value = random.choice(ratio_dict[str(X.Healthcare_2[i])])\n            X.Healthcare_1[i] = insert_value\n        \n        # \u0423\u0421\u0422\u0420\u0410\u041d\u042f\u0415\u041c \u0412\u042b\u0411\u0420\u041e\u0421\u042b\n\n        # Rooms\n        X['Rooms_outlier'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] > 6), 'Rooms_outlier'] = 1\n\n        X.loc[(X['Rooms_outlier'] == 1) & (X['Square'] > 0) & (X['Square'] < 45), 'Rooms'] = 1\n        X.loc[(X['Rooms_outlier'] == 1) & (X['Square'] >= 45) & (X['Square'] < 65), 'Rooms'] = 2\n        X.loc[(X['Rooms_outlier'] == 1) & (X['Square'] >= 65) & (X['Square'] < 85), 'Rooms'] = 3\n        X.loc[(X['Rooms_outlier'] == 1) & (X['Square'] >= 85) & (X['Square'] < 100), 'Rooms'] = 4\n        X.loc[(X['Rooms_outlier'] == 1) & (X['Square'] >= 100) & (X['Square'] < 120), 'Rooms'] = 5\n        X.loc[(X['Rooms_outlier'] == 1) & (X['Square'] >= 120), 'Rooms'] = 6\n        \n        # Square\n        X['Square_outlier'] = 0\n        X.loc[(X['Square'] < 25) | (X['Square'] > 250), 'Square_outlier'] = 1\n        \n        room_squ = X.groupby([\"Rooms\"])[\"Square\"].median()\n        \n        X.loc[(X['Square_outlier'] == 1) & (X['Rooms'] == 1), 'Square'] = room_squ[1]\n        X.loc[(X['Square_outlier'] == 1) & (X['Rooms'] == \"2\"), 'Square'] = room_squ[2]\n        X.loc[(X['Square_outlier'] == 1) & (X['Rooms'] == 3), 'Square'] = room_squ[3]\n        X.loc[(X['Square_outlier'] == 1) & (X['Rooms'] == 4), 'Square'] = room_squ[4]\n        X.loc[(X['Square_outlier'] == 1) & (X['Rooms'] == 5), 'Square'] = room_squ[5]\n        X.loc[(X['Square_outlier'] == 1) & (X['Rooms'] == 6), 'Square'] = room_squ[6]\n                 \n        #LifeSquare\n        X['LifeSquare_outlier'] = 0\n        X.loc[(X['LifeSquare'] < 6) | (X['LifeSquare'] > 150), 'LifeSquare_outlier'] = 1\n        X.loc[X['LifeSquare'] >= X['Square'], 'LifeSquare_outlier'] = 1\n        \n        condition = (X['LifeSquare'] < 6) & \\\n                    (X['LifeSquare'] > 150) & \\\n                    (X['LifeSquare'] > X['Square'])\n        \n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] \/ coef\n        \n        # KitchenSquare\n        condition_1 = (X['KitchenSquare'] < 3) \n        coef = self.kitchensquare_square\n        X.loc[condition_1, 'KitchenSquare'] = X.loc[condition, 'Square'] \/ coef\n        \n        condition_2 = (X['KitchenSquare'] > 30) \n        X.loc[condition_2, 'KitchenSquare'] = self.medians['KitchenSquare']\n           \n        # Square, LifeSquare & KitchenSquare\n        condition = X['Square'] < (X['LifeSquare'] + X['KitchenSquare'])\n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] \n        \n        \n        condition = X['LifeSquare'] < X['KitchenSquare']\n        \n        X.loc[condition, 'LifeSquare'], X.loc[condition, 'KitchenSquare'] = X.loc[condition, 'KitchenSquare'], X.loc[condition, 'LifeSquare'] \n\n        # HouseFloor, Floor\n        X['HouseFloor_outlier'] = 0\n        X.loc[(X['HouseFloor'] < 1) | (X['HouseFloor'] > 90) | (X['Floor'] > X['HouseFloor']), 'HouseFloor_outlier'] = 1\n        \n        X.loc[(X['HouseFloor_outlier'] == 1) & (X['HouseFloor'] < 1), 'HouseFloor'] = X['Floor']\n        X.loc[(X['HouseFloor_outlier'] == 1) & (X['HouseFloor'] > 90) & (X['Floor'] <= 17), 'HouseFloor'] = 17\n        X.loc[(X['HouseFloor_outlier'] == 1) & (X['HouseFloor'] > 90) & (X['Floor'] > 17), 'HouseFloor'] = X['Floor']\n        \n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor'] = X['Floor']\n       \n        # HouseYear\n        current_year = datetime.now().year\n        \n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        X.loc[X['HouseYear'] <= 1900, 'HouseYear_outlier'] = 1\n        \n        X.loc[X['HouseYear'] == 20052011, 'HouseYear'] == 2011\n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        X.loc[X['HouseYear'] <= 1900, 'HouseYear_outlier'] = 1900\n        \n        # Ecology_2, Ecology_3 \u0438 Shops_2 \n        binary_to_numbers = {'A': 0, 'B': 1}\n\n        X['Ecology_2'] = X['Ecology_2'].replace(binary_to_numbers)\n        X['Ecology_3'] = X['Ecology_3'].replace(binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].replace(binary_to_numbers)\n\n        X.fillna(self.medians, inplace=True)\n        \n        return X","229437b2":"#\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a DistrictId\ndistrict_size = all_data['DistrictId'].value_counts().reset_index().rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n\ndistrict_size.head(7)","2d3299ed":"#\u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043a train_df\nall_data = all_data.merge(district_size, on='DistrictId', how='left')\nall_data.head(7)","3f712ada":"#\u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u0441\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u0432 \u0440\u0430\u0439\u043e\u043d\u0430\n(all_data['DistrictSize'] > 100).value_counts()","f93ba533":"all_data['IsDistrictLarge'] = (all_data['DistrictSize'] > 100).astype(int)","e101d660":"m_price_room_dstr = all_data.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'mean'})\\\n                            .rename(columns={'Price':'M_Price_Room_dstr'})\n\nm_price_room_dstr.head(7)","b12f0129":"#\u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043a train_df\nall_data = all_data.merge(m_price_room_dstr, on=['DistrictId', 'Rooms'], how='left')\nall_data.head(7)","c2b7dfbb":"def floor_to_cat(df):\n\n    df['floor_cat'] = 0\n\n    df.loc[df['Floor'] <= 2, 'floor_cat'] = 1  \n    df.loc[(df['Floor'] > 2) & (df['Floor'] <= 5), 'floor_cat'] = 2\n    df.loc[(df['Floor'] > 5) & (df['Floor'] <= 9), 'floor_cat'] = 3\n    df.loc[(df['Floor'] > 9) & (df['Floor'] <= 15), 'floor_cat'] = 4\n    df.loc[df['Floor'] > 15, 'floor_cat'] = 5\n\n    return df\n\ndef year_to_cat(df):\n\n    df['year_cat'] = 0\n\n    df.loc[df['HouseYear'] <= 1917, 'year_cat'] = 1\n    df.loc[(df['HouseYear'] > 1917) & (df['HouseYear'] <= 1939), 'year_cat'] = 2\n    df.loc[(df['HouseYear'] > 1939) & (df['HouseYear'] <= 1946), 'year_cat'] = 3\n    df.loc[(df['HouseYear'] > 1946) & (df['HouseYear'] <= 1970), 'year_cat'] = 4\n    df.loc[(df['HouseYear'] > 1970) & (df['HouseYear'] <= 1989), 'year_cat'] = 5\n    df.loc[(df['HouseYear'] > 1989) & (df['HouseYear'] <= 2010), 'year_cat'] = 6\n    df.loc[(df['HouseYear'] > 2010), 'year_cat'] = 7\n\n    return df","81ce47f7":"bins = [0, 3, 5, 9, 15, all_data['Floor'].max()]\npd.cut(all_data['Floor'], bins=bins, labels=False)","67bc3793":"all_data = year_to_cat(all_data)\nall_data = floor_to_cat(all_data)\nall_data.head()","3852f23e":"m_price_by_floor_year = all_data.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'mean'}).\\\n                                            rename(columns={'Price':'M_PriceByFloorYear'})\nm_price_by_floor_year.head(7)","fe5d3a55":"#\u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043a train_df\nall_data = all_data.merge(m_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\nall_data.head(7)\n","103599a0":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.m_price_room_dstr = None\n        self.m_price_by_floor_year = None\n        self.house_year_max = None\n        self.floor_max = None\n        self.district_size = None\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # DistrictID\n        self.district_size = X['DistrictId'].value_counts().reset_index() \\\n                               .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n                \n        # Target encoding\n        ## District, Rooms\n        df = X.copy()\n        \n#         if y is not None:\n#             df['Price'] = y.values\n            \n#             self.m_price_room_dstr = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'mean'})\\\n#                                             .rename(columns={'Price':'M_Price_Room_dstr'})\n            \n#             self.m_price_room_dstr_mean = self.m_price_room_dstr['M_Price_Room_dstr'].mean()\n            \n        ## floor, year\n        if y is not None:\n            self.floor_max = df['Floor'].max()\n            self.house_year_max = df['HouseYear'].max()\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.m_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'mean'}).\\\n                                            rename(columns={'Price':'M_PriceByFloorYear'})\n            self.m_price_by_floor_year_mean = self.m_price_by_floor_year['M_PriceByFloorYear'].mean()\n        \n\n        \n    def transform(self, X):\n        \n        # DistrictId, IsDistrictLarge\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictSize'].isna(), 'new_district'] = 1\n        \n        X['DistrictSize'].fillna(5, inplace=True)\n        \n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        # More categorical features\n        X = self.floor_to_cat(X)  # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 floor_cat\n        X = self.year_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 year_cat\n        \n        # \u0426\u0435\u043d\u0430 \u043a\u0432\u0440\u0442\u0438\u0440\u044b \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u043d\u0442\u0430 \u0438 \u0440\u0430\u0439\u043e\u043d\u0430 (\u043d\u0430 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \u043c\u043e\u0434\u0435\u043b\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f)\n#         if self.m_price_room_dstr is not None:\n#             X = X.merge(self.m_price_room_dstr, on=['DistrictId', 'Rooms'], how='left')\n#             X['M_Price_Room_dstr'].fillna(self.m_price_room_dstr_mean, inplace=True)\n            \n        if self.m_price_by_floor_year is not None:\n            X = X.merge(self.m_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X['M_PriceByFloorYear'].fillna(self.m_price_by_floor_year_mean, inplace=True)\n        \n        return X\n    \n    def floor_to_cat(self, X):\n\n        X['floor_cat'] = 0\n\n        X.loc[X['Floor'] <= 3, 'floor_cat'] = 1  \n        X.loc[(X['Floor'] > 3) & (X['Floor'] <= 5), 'floor_cat'] = 2\n        X.loc[(X['Floor'] > 5) & (X['Floor'] <= 9), 'floor_cat'] = 3\n        X.loc[(X['Floor'] > 9) & (X['Floor'] <= 15), 'floor_cat'] = 4\n        X.loc[X['Floor'] > 15, 'floor_cat'] = 5\n\n        return X\n\n    def year_to_cat(self, X):\n\n        X['year_cat'] = 0\n\n        X.loc[X['HouseYear'] <= 1917, 'year_cat'] = 1\n        X.loc[(X['HouseYear'] > 1917) & (X['HouseYear'] <= 1939), 'year_cat'] = 2\n        X.loc[(X['HouseYear'] > 1939) & (X['HouseYear'] <= 1946), 'year_cat'] = 3\n        X.loc[(X['HouseYear'] > 1946) & (X['HouseYear'] <= 1970), 'year_cat'] = 4\n        X.loc[(X['HouseYear'] > 1970) & (X['HouseYear'] <= 1989), 'year_cat'] = 5\n        X.loc[(X['HouseYear'] > 1989) & (X['HouseYear'] <= 2010), 'year_cat'] = 6\n        X.loc[X['HouseYear'] > 2010, 'year_cat'] = 7\n\n        return X      ","69e9e7d0":"df_train = pd.read_csv(TRAIN_DATASET_PATH)\ndf_test = pd.read_csv(TEST_DATASET_PATH)\ntarget_name = 'Price'","d01e328c":"X = df_train.drop(columns=target_name)\ny = df_train[target_name]","dea77314":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=73)","43f7b341":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ndf_test = preprocessor.transform(df_test)\n\nX_train.shape, X_valid.shape, df_test.shape","325a6698":"features_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ndf_test = features_gen.transform(df_test)\n\nX_train.shape, X_valid.shape, df_test.shape","52e4c680":"X_train.columns.tolist()","b4f7fdd7":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3',\n                 'Healthcare_2', 'Shops_1', 'Shops_2']\n\nnew_feature_names = ['LifeSquare_nan', 'Healthcare_1_nan', 'Rooms_outlier', 'Square_outlier', 'LifeSquare_outlier', 'HouseFloor_outlier', 'HouseYear_outlier',\\\n                     'DistrictSize', 'new_district', 'IsDistrictLarge', 'floor_cat', 'year_cat', 'M_PriceByFloorYear']\n\ntarget_name = 'Price'","5b57a687":"X_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ndf_test = df_test[feature_names + new_feature_names]","a2c09ec8":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), df_test.isna().sum().sum()","d78768b5":"rf_model = RandomForestRegressor(random_state=21, criterion='mse')\nrf_model.fit(X_train, y_train)","8ec94684":"y_train_preds = rf_model.predict(X_train)\ny_test_preds = rf_model.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","89393632":"cv_score = cross_val_score(rf_model, X_train, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=21))\ncv_score","58dd5d18":"cv_score.mean()","50d1af79":"feature_importances = pd.DataFrame(zip(X_train.columns, rf_model.feature_importances_), \n                                   columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","ff97c5ff":"from sklearn.ensemble import StackingRegressor, VotingRegressor, BaggingRegressor, GradientBoostingRegressor\nfrom sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\ngb = GradientBoostingRegressor()\n\nstack = StackingRegressor([('lr', lr), ('rf', rf_model)], final_estimator=gb)\nstack.fit(X_train, y_train)","49c505e6":"y_train_preds = stack.predict(X_train)\ny_test_preds = stack.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","cfb8bc63":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","0d6fb867":"predictions = rf_model.predict(df_test)\npredictions","ef2a1985":"submit['Price'] = predictions\nsubmit.head()","ab53883b":"submit.to_csv('rf_submit4.csv', index=False)","e6644151":"\u0420\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u044f \u0431\u0443\u0434\u0443 \u0441 \u0446\u0435\u043b\u044b\u043c \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445 - \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044e train \u0438 test","68698b23":"#  Real Estate Price Prediction\n[Geekbrains Python for Data Science course competition](https:\/\/www.kaggle.com\/c\/real-estate-price-prediction-moscow)","0d6054f3":"## \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","b7c9a27c":"**\u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u043b\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0443\u0445\u043d\u0438**","b2d06e49":"## \u041e\u0446\u0435\u043d\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438","3eec8658":"# **\u041f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0430 \u0442\u043e\u043c \u0447\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043b\u0438** ","69fa996c":"## \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b [\u041f\u043e\u0441\u044f\u0433\u0438\u043d \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438\u043d](https:\/\/gb.ru\/users\/1024991), \u0433\u0440\u0443\u043f\u043f\u0430 1114","b22ab2a5":"# \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435","0671bbb1":"#### **HouseFloor** ","7c3a5fec":"\u041a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e \u0442\u0435\u043c\u0435 \"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Python \u0434\u043b\u044f Data Science: Numpy, Matplotlib, Scikit-learn\".\n\n**\u0417\u0430\u0434\u0430\u0447\u0430:** \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435\u0434\u0432\u0438\u0436\u0438\u043c\u043e\u0441\u0442\u0438.\n\n**\u041c\u0435\u0442\u0440\u0438\u043a\u0430:** R2 - \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0434\u0435\u0442\u0435\u0440\u043c\u0438\u043d\u0430\u0446\u0438\u0438 (sklearn.metrics.r2_score)  ","1321b914":"## \u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f","62b8dd47":"\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u0441\u0435, \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0433\u043e\u0434\u0430 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0433\u043e\u0434. *\u0422\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0442 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441 (20052011), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u043e\u0437\u043d\u0438\u043a \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0443\u043a\u0430\u0437\u0430\u043b\u0438 \u0442\u043e\u0447\u043d\u0443\u044e \u0434\u0430\u0442\u0443 (20 \u043c\u0430\u044f 2011 \u0433\u043e\u0434\u0430). \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0442\u0443\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 2011 \u0440\u0443\u0447\u043a\u0430\u043c\u0438*","5dc3b74e":"\u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0433\u0434\u0435 \u044d\u0442\u0430\u0436 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435","f47f32ff":"\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u044d\u0442\u043e \u043d\u0435\u0434\u043e\u0440\u0430\u0437\u0443\u043c\u0435\u043d\u0438\u0435","dc0ce6bc":"* **Id** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* **DistrictId** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* **Rooms** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* **Square** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* **LifeSquare** - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* **KitchenSquare** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* **Floor** - \u044d\u0442\u0430\u0436\n* **HouseFloor** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* **HouseYear** - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* **Ecology_1, Ecology_2, Ecology_3** - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* **Social_1, Social_2, Social_3** - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* **Healthcare_1, Helthcare_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* **Shops_1, Shops_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* **Price** - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n","172da7b8":"**\u041f\u043e\u043c\u0435\u043d\u044f\u0435\u043c \u0432 \u044d\u0442\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u0436\u0438\u043b\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438**","857eb9a9":"## \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 ","9426fcce":"#### **Rooms**","3d3e2ff0":"\u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u044e\u0442\u0441\u044f \u0432 \u0434\u043e\u043c\u0430\u0445 \u0441 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c\u044e 0\n\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432 \u044d\u0442\u0438\u0445 \u0441\u0442\u0440\u043e\u0447\u0430\u0445 HouseFloor \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Floor","9ae0f55d":"## \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","abdc1ff3":"### \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","ebd5c137":"\u0422\u0430\u043a\u0436\u0435 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u044e\u0442\u0441\u044f \u0432 \u0434\u043e\u043c\u0430\u0445 \u0441 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c\u044e 99 \u0438 117. \u0412\u0441\u0435 \u043e\u043d\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u044b \u0432 1977 \u0433\u043e\u0434\u0443","2c48af65":"## \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test","a917c8d3":"#### **LifeSquare**","1e9de63e":"\u0420\u0430\u0441\u0447\u0435\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u043d\u0430\u0442 \u0438 \u0440\u0430\u0439\u043e\u043d\u0430 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b - **M_Price_Room_dstr** (\u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u043c\u044b \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0443\u0431\u0435\u0440\u0435\u043c, \u0442.\u043a. \u043d\u0430 \u043d\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f)","179b602a":"### **\u0423\u0441\u0442\u0440\u0430\u043d\u044f\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b** ","cfdf9a9c":"#### **KitchenSquare**","e829dae5":"\u0412 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0437\u0430\u043c\u0435\u0447\u0443, \u0447\u0442\u043e \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 Helthcare_2 \u0434\u043e\u043f\u0443\u0449\u0435\u043d\u0430 \u043e\u043f\u0435\u0447\u0430\u0442\u043a\u0430. \u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u0435\u0435, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043c\u043e\u0437\u043e\u043b\u0438\u043b\u0430 \u0433\u043b\u0430\u0437\u0430","c64e611a":"# 1. EDA. \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","6f4662bc":"**M_PriceByFloorYear** - \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0443\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u0433\u043e\u0434\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438\n","fcdea9c6":"## \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f","172cc366":"\u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 - \u0437\u0430\u043c\u0435\u043d\u0438\u043c A, B \u0432 \u0441\u0442\u0440\u043e\u043b\u0431\u0446\u0430\u0445 Ecology_2, Ecology_3 \u0438 Shops_2 \u043d\u0430 1 \u0438 0","052139f4":"\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 Rooms, \u043d\u0430 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u043f\u043e \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","3bc89235":"\u0421 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\u0438 \u043d\u0435 \u0431\u0443\u0434\u0443 \u043d\u0438\u0447\u0435\u0433\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0442.\u043a. \u043f\u043e\u043d\u044f\u0442\u0438\u044f \u043d\u0435 \u0438\u043c\u0435\u044e \u0447\u0442\u043e \u043e\u043d\u0438 \u0437\u043d\u0430\u0447\u0430\u0442 ))","291766db":"# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","ad8524f4":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 *Healthcare_2* \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f *Healthcare_1*. \u041f\u0440\u0438\u0447\u0435\u043c \u0437\u0430\u043c\u0435\u0442\u043d\u043e, \u0447\u0442\u043e \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0430\u0445 *Healthcare_2* \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 *Healthcare_1*, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0447\u0430\u0449\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445.\n\n\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 *Healthcare_1*, \u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u044f\u0441\u044c \u043d\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 *Healthcare_2*.","b01a7c50":"\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u0435 \u043f\u043e\u043b\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 'LifeSquare' \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0439\u0442\u0438 \u043f\u043e \u043b\u0435\u0433\u043a\u043e\u043c\u0443 \u043f\u0443\u0442\u0438 \u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0445 \u0432\u0441\u0435 \u043c\u043e\u0434\u043e\u0439\/\u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439\/\u0441\u0440\u0435\u0434\u043d\u0438\u043c. \u041d\u043e \u044d\u0442\u043e \u043d\u0435 \u043b\u0443\u0447\u0448\u0435\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u0442.\u043a. \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0431\u043e\u043b\u0435\u0435 2 \u0442\u044b\u0441\u044f\u0447 \u0434\u043e\u043c\u043e\u0432 \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0439 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e, \u0447\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u043d\u043e, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f, \u0447\u0442\u043e \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0443 \u043d\u0438\u0445 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0437\u043d\u044b\u0435.\n\n\u0414\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0443\u0441\u0442\u044b\u0445 \u044f\u0447\u0435\u0435\u043a \u0441\u0442\u043e\u0431\u0446\u0430 \u0416\u0438\u043b\u0430\u044f\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 - \u041f\u043b\u043e\u0449\u0430\u0434\u044c. \u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e **\u043f\u043b\u043e\u0449\u0430\u0434\u044c** \u0434\u043e\u043c\u0430 \u0438 **\u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c** \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0430\u043d\u044b.\n","9086bb69":"#### **Healthcare_1**","24e3de87":"**\u041f\u0443\u0442\u0438 \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c \u0438 \u0444\u0430\u0439\u043b\u0430\u043c**","b5f8c952":"\u0421\u0432\u0435\u0434\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043a \u043a\u043b\u0430\u0441\u0441\u0443\n","0383e2f5":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u043d\u044e\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u043d\u0430\u0442","de036173":"###  **\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 LifeSquare \u0438 Healthcare_1**","5dce991a":"\u0421\u0443\u0434\u044f \u043f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443 - \u043d\u0430\u0448\u0430 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0432\u043f\u043e\u043b\u043d\u0435 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e. \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043b\u0430\u0432\u043d\u044b\u0435, \u0440\u0435\u0437\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043b\u043e\u043c\u043e\u0432 \u043d\u0435\u0442. \u0412\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432\u0438\u0434\u0438\u043c\u044b\u0445 \u0442\u043e\u0436\u0435 \u043d\u0435\u0442.\n\n\u0415\u0441\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u0441\u0440\u0435\u0434\u043d\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0438 \u0434\u0435\u0448\u0435\u0432\u044b\u0445. \u0410 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \"\u0440\u0430\u0437\u043c\u0430\u0437\u0430\u043d\u044b\" - \u043e\u043d\u0438 \u0435\u0441\u0442\u044c, \u043d\u043e \u0438\u0445 \u043d\u0435 \u043c\u043d\u043e\u0433\u043e. \u0427\u0435\u043c \u0434\u043e\u0440\u043e\u0436\u0435 \u0434\u043e\u043c, \u0442\u0435\u043c \u043e\u043d \u0440\u0435\u0436\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0440\u044b\u043d\u043a\u0435. \u041b\u043e\u0433\u0438\u0447\u043d\u043e.\n\n\u0422\u0430\u043a\u0436\u0435 **\u043c\u0435\u0434\u0438\u0430\u043d\u0430** \u0438 **\u0441\u0440\u0435\u0434\u043d\u0435\u0435** \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u044e\u0442\u0441\u044f \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0431\u043b\u0438\u0437\u043a\u043e \u0434\u0440\u0443\u0433 \u043a \u0434\u0440\u0443\u0433\u0443, \u0447\u0442\u043e \u0442\u0430\u043a\u0436\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0445\u043e\u0440\u043e\u0448\u0435\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.\n","a5280015":"**\u041f\u043e\u0441\u043c\u043e\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0438, \u0433\u0434\u0435 \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u043b\u044e\u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438**","d453cf46":"\u0418\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432, \u0437\u0430\u043c\u0435\u043d\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043a\u043e\u043c\u043d\u0430\u0442","e2491f6d":"\u0418\u0434\u0435\u044f \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","6b445ed7":"\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0432\u044b\u0441\u043e\u0442\u0430 \u0437\u0434\u0430\u043d\u0438\u0439, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0432 \u044d\u0442\u043e\u0442 \u0433\u043e\u0434 \u0440\u0430\u0432\u043d\u0430 17. \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432 \u044d\u0442\u0438\u0445 \u0441\u0442\u0440\u043e\u0447\u043a\u0430\u0445 HouseFloor \u043d\u0430 17, \u0435\u0441\u043b\u0438 \u044d\u0442\u0430\u0436 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043c\u0435\u043d\u044c\u0448\u043d\u0435 17 \u0438 \u043d\u0430 \u0441\u0430\u043c \u044d\u0442\u0430\u0436, \u0435\u0441\u043b\u0438 \u043e\u043d \u0431\u043e\u043b\u044c\u0448\u0435","d6fbf7b4":"**\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439**","e353f2df":"**\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 Id \u0438 DistrictId \u043a \u0442\u0438\u043f\u0443 str**","8983133f":"**\u041d\u0430\u0434\u043e \u0432 \u044d\u0442\u0438\u0445 \u0441\u0442\u0440\u043e\u0447\u043a\u0430\u0445 \u0436\u0438\u043b\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0447\u0442\u043e\u0431 \u0441\u0443\u043c\u043c\u0430 \u0441\u0445\u043e\u0434\u0438\u043b\u0430\u0441\u044c**","38b9877f":"**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**","7ce03dfa":"#### **LifeSquare**","99dc145b":"#### **Square**","c2f80e1e":"## **\u0418\u0437\u0443\u0447\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438**","0ce1492c":"#### **HouseYear**","4e83a615":"## \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n"}}