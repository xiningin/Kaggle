{"cell_type":{"362fa9c9":"code","4bb8e789":"code","e7e0acd7":"code","6f13991c":"code","835c8a7e":"code","a54e6292":"code","9da2600f":"code","dbcbf348":"code","c618137a":"code","9baf5fe6":"code","8d750ff5":"code","42b88fa2":"code","ac29a7fc":"code","7e0dc140":"code","8614300c":"code","a745a27f":"code","f9f959b5":"code","4ae623a0":"code","4750ad19":"code","88246586":"code","5c4db312":"code","b9f48f92":"code","e2010a03":"code","7fa3d032":"code","b8991b7b":"code","3d8f9d06":"code","7943925e":"code","dc5b0a66":"code","0de117ea":"code","82826cc8":"code","9250114d":"code","871d5173":"code","8456159d":"code","08cd94e5":"code","385361dd":"code","dd58dbf2":"markdown","d011bf46":"markdown","06d4fe4a":"markdown","4473bfc7":"markdown","9aab9f28":"markdown"},"source":{"362fa9c9":"print(\"Welcome to Simple or Univariate Linear Regression Model Demo | Authored by Kunal Sharma\")","4bb8e789":"# Step 1\n# Import all the important libraries like pandas, numpy, and vizualization related libraries for data preparation\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e7e0acd7":"# Step 2\n# Load the data\nraw_data = pd.read_csv(\"..\/input\/advertising-data\/advertising.csv\")","6f13991c":"# Step 3\n# First Look at Data\nraw_data.head()","835c8a7e":"raw_data.shape","a54e6292":"# Step 4\n# Describe the data\nraw_data.describe()","9da2600f":"# Step 5\n# Filter Unknown\/nulls\n# raw_data.isnull()\nraw_data.isnull().sum()\n# if case any value is null\/NaN, you may select different approaches to solve that issue - https:\/\/www.geeksforgeeks.org\/working-with-missing-data-in-pandas\/","dbcbf348":"# Step 6\n# De-dup\n# raw_data.duplicated()\nraw_data.duplicated().sum()\n# to drop duplicates, do raw_data.drop_duplicates()","c618137a":"from scipy import stats\nstats.norm","9baf5fe6":"# Step 7\n# Vizualize the data\n# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# lets look at the dependent variable to see if the variable is Normally  distributed\n# histogram and normal probability plot\nfrom scipy import stats\nsns.distplot(raw_data['Sales'], fit=stats.norm);\nfig = plt.figure()\nres = stats.probplot(raw_data['Sales'], plot=plt)","8d750ff5":"# Step 8\n# Outlier Analysis\nfig, axs = plt.subplots(3, figsize = (5,5))\nplt1 = sns.boxplot(raw_data['TV'], ax = axs[0])\nplt2 = sns.boxplot(raw_data['Newspaper'], ax = axs[1])\nplt3 = sns.boxplot(raw_data['Radio'], ax = axs[2])\nplt.tight_layout()","42b88fa2":"# There are outliers in case of Newspaper, but those cases are not significant. The max value at Newspaper 114 seems to be an outlier.","ac29a7fc":"# Let's see how Sales are related with other variables using scatter plot.\nsns.pairplot(raw_data, x_vars=['TV', 'Newspaper', 'Radio'], y_vars='Sales', kind='scatter')\nplt.show()","7e0dc140":"# A clear linear relationship can be seen between Sales and TV adveritising","8614300c":"# Let's see the correlation between different variables.\nsns.heatmap(raw_data.corr(), annot = True)\nplt.show()","a745a27f":"# The above correlation matrix confirms the relationship between Sales and TV advertising. This also means that a univariate\/simple linear regression model can be used to further predict outcomes here.","f9f959b5":"# Step 1\n# Import sklearn to split the data\nfrom sklearn.model_selection import train_test_split","4ae623a0":"# Step 2\n# Define the variables and training and test dataset\nX = np.array(raw_data[\"TV\"]).reshape(-1, 1)  # reshaping to avoid the following error https:\/\/www.geeksforgeeks.org\/python-linear-regression-using-sklearn\/\ny = np.array(raw_data[\"Sales\"]).reshape(-1, 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, test_size = 0.3, random_state = 0)","4750ad19":"# Step 3\n# Fit the model\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()  \nmodel.fit(X_train, y_train)","88246586":"# Checking model fit on data\n# More to learn from https:\/\/scikit-learn.org\/stable\/modules\/model_evaluation.html\nprint(model.score(X_test, y_test))\n# higher the score, better is the fit (think of Overfitting)","5c4db312":"# Step 4\n# Doing Predictions\nmodel_predictions = model.predict(X_test)","b9f48f92":"# lets visualize the model predictions\nplt.scatter(x = y_test, y = model_predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')","e2010a03":"# Step 5\n# Evaluate the predictions\n# Document to follow - https:\/\/scikit-learn.org\/stable\/modules\/model_evaluation.html#regression-metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, explained_variance_score, r2_score\nprint(mean_absolute_error(y_test, model_predictions))\nprint(mean_squared_error(y_test, model_predictions))\nprint(explained_variance_score(y_test, model_predictions))\nprint(r2_score(y_test, model_predictions))","7fa3d032":"# Visualizing the training data and model predictions \nplt.scatter(X_train, y_train, color= 'red')\nplt.plot(X_train, model.predict(X_train), color = 'blue')\nplt.title (\"Visuals for Training Dataset with model fit\")\nplt.xlabel(\"TV\")\nplt.ylabel(\"Sales\")\nplt.show()","b8991b7b":"# Visualizing the training data and model predictions \nplt.scatter(X_test, y_test, color= 'red')\nplt.plot(X_test, model.predict(X_test), color = 'blue')\nplt.title (\"Visuals for Test Dataset with model fit\")\nplt.xlabel(\"TV\")\nplt.ylabel(\"Sales\")\nplt.show()","3d8f9d06":"raw_data.head()","7943925e":"# Step 6\n# Evaluate single input variables on the go\nmodel.predict(np.array(151).reshape(-1,1))","dc5b0a66":"model.predict(np.array(155).reshape(-1,1))","0de117ea":"model.predict(np.array(160).reshape(-1,1))","82826cc8":"print(model.coef_)\nprint(model.intercept_)","9250114d":"# Step 7\n# Review model from statistical aspects\nfrom statsmodels.api import OLS\nOLS(y_test,X_test).fit().summary()","871d5173":"# Let's see how Sales prediction looks like\nsns.distplot((raw_data), bins = 50)","8456159d":"sns.distplot((y_test), bins = 50)","08cd94e5":"sns.distplot((model_predictions), bins = 50)","385361dd":"# Let's see how Sales are related with other variables using scatter plot.\nsns.jointplot(x = 'TV', y = 'Sales', data = raw_data)\nplt.show()","dd58dbf2":"# **Conclusion**\nThe Univariate Regression model will look as following.\n\nSales = 0.05473199 X TV + 7.14382225\n\ny = bx + a","d011bf46":"Conclusion\n\nThe output variable here is normally distributed. In case it is not, we might need to take actions to normally distribute the data.\n```\nraw_data['Sales'] = np.log(raw_data['Sales'])\n\nsns.distplot(raw_data['Sales'],fit=norm)\n\nfig = plt.figure()\n\nres = stats.probplot(raw_data['Sales'], plot=plt)\n```","06d4fe4a":"# **Section B**\nIn this section we're going to build a Linear Regression Model and Train it for making predictions.","4473bfc7":"**Takeaways from Above Summary**\n\n1) R-Squared is quite high. https:\/\/www.investopedia.com\/terms\/r\/r-squared.asp\n\n2) p-value = 1.89e-33 = 1.89*(2.71828183**-33) = 0.006676667797074559 is quite less than critical value of 0.05. Hence the result is statistically significant.\n\n3) F-statistic is quite large. Meaning that the model fit is statistically significant, and the explained variance isn't purely by chance.","9aab9f28":"# **Section A**\nIn this section we're learning about Exploratory Data Analysis and Data Preparation."}}