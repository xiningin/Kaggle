{"cell_type":{"4a01879c":"code","9ff585f9":"code","f009a242":"code","35f58bb5":"code","44dc8c1f":"code","dcf210a2":"code","c46af2a3":"code","38209569":"code","07a45cc2":"code","3a664429":"code","d557e6a7":"code","7b041501":"code","c8e79647":"code","0671c0af":"code","187017cb":"code","a4c55fb5":"code","33695256":"code","e3045907":"code","1b865ba9":"code","c7065447":"code","96a76080":"code","9932ae77":"code","e427c848":"code","4b40e376":"code","f06fc798":"code","51c3e166":"markdown","fb2bee65":"markdown","b502bfef":"markdown","2e46b497":"markdown","c22033ae":"markdown","5e4adb2f":"markdown","a82e2fc6":"markdown","08ab7419":"markdown","0b78c574":"markdown","e1b50a4c":"markdown","e36cffcf":"markdown","dc03f28c":"markdown","6b6cefe3":"markdown","e278bbc0":"markdown","6caee3b4":"markdown"},"source":{"4a01879c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9ff585f9":"!pip install tensorflow \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n","f009a242":"data=pd.read_csv('..\/input\/autompg-dataset\/auto-mpg.csv')\ndata","35f58bb5":"data=data.drop(columns=['car name'])\ndata","44dc8c1f":"origin=data.pop('origin')\ndata['uk']=(origin==1)*1.0\ndata['europe']=(origin==2)*2.0\ndata['usa']=(origin==3)*3.0\ndata","dcf210a2":"train_data=data.sample(frac=0.8, random_state=0)\ntest_data=data.drop(train_data.index)\nprint(train_data)\nprint(test_data)","c46af2a3":"train_data_state=train_data.describe()\ntrain_data_state=train_data_state.transpose()\ntrain_data_state\n#train_data['horsepower'].describe()\n","38209569":"a=train_data['horsepower']\na","07a45cc2":"a.unique()","3a664429":"a=a.replace('?',0)\na.unique()","d557e6a7":"def norm(x):\n    return(x-train_data_state['mean'])\/train_data_state['std']\nnormed_train_data=norm(train_data)\nnormed_train_data","7b041501":"normed_train_data=normed_train_data.drop(columns=['horsepower'])\nnormed_train_data","c8e79647":"normed_train_data['horsepower']=a\nnormed_train_data","0671c0af":"labels_of_train_data=normed_train_data['mpg']\nfeatures_of_train_data=normed_train_data.drop(columns=['mpg'])\nprint(labels_of_train_data)\nprint(features_of_train_data)","187017cb":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(features_of_train_data,labels_of_train_data, test_size=0.3)","a4c55fb5":"def build_model():\n    model=keras.Sequential([layers.Dense(16, activation='relu'),layers.Dense(16, activation='relu'),\n                                                 layers.Dense(1)])\n    optimizer=tf.keras.optimizers.RMSprop(0.001)\n    model.compile(loss='mse', optimizer=optimizer, metrics=['mae','mse'])\n    return model","33695256":"model=build_model()","e3045907":"#def baseline_model():\n\t# create model\n#\tmodel = Sequential()\n#\tmodel.add(Dense(13, input_dim=13, kernel_initializer='normal', activation='relu'))\n#\tmodel.add(Dense(1, kernel_initializer='normal'))\n\t# Compile model\n#\tmodel.compile(loss='mean_squared_error', optimizer='adam')\n#\treturn model","1b865ba9":" #evaluate model\n#estimator = KerasRegressor(build_fn=baseline_model, epochs=100, batch_size=5, verbose=0)","c7065447":"#kfold = KFold(n_splits=10)\n#results = cross_val_score(estimator, x_train, y_train, cv=kfold)\n#print(\"Baseline: %.2f (%.2f) MSE\" % (results.mean(), results.std()))","96a76080":"X=x_train.to_numpy(dtype=np.float)\nY=y_train.to_numpy(dtype=np.float)","9932ae77":"model.fit(X,Y, epochs=1000)","e427c848":"X1=x_test.to_numpy(dtype=np.float)\nY1=y_test.to_numpy(dtype=np.float)","4b40e376":"test_predictions=model.predict(X1)\ntest_predictions","f06fc798":"loss,mae,mse=model.evaluate(X1,Y1,verbose=0)\nprint('Testing mean squared error:MPG', format(mse))","51c3e166":"BUILD THE MODEL-\nBuilding of a feed forward neural network with Two hidden layers and one output layer with 16 units in the hidden layers and using relu activation function as the non-linear activation function. Optimizer used in this model is RMSprop which is used in general for the model of regression.","fb2bee65":"**IF YOU FOUND THIS NOTEBOOK USEFULL THEN PLEASE UPVOTE\u270c**","b502bfef":"Train the model","2e46b497":"Converting the Features and labels of the dataset to numpy array to feed into the network.","c22033ae":"Basic Statistics of the train dataset","5e4adb2f":"Here we convert the origin country which is a categorical column to numerical taking UK=1, EUROPE=2 and USA=3. ","a82e2fc6":"EVALUATE THE MODEL USING MEAN SQUARED ERROR","08ab7419":"Replacing '?' in horsepower with 0","0b78c574":"**IMPORTING LIBRARIES**\n","e1b50a4c":"Train test split","e36cffcf":"**As we can see the mean squared error of train set and test set is 0.10 and 0.16, this shows that the model is perfroming well. However it can do better with further optimizations.**","dc03f28c":"**LOAD DATASET**","6b6cefe3":"MAKE PREDICTIONS","e278bbc0":"Splitted the complete dataset into train and test data in the fraction of 80:20","6caee3b4":"As we see in the basic statistics of dataset, all the columns in different scales, here we normalize data using z-score normalization."}}