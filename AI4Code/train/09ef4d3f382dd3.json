{"cell_type":{"ac592104":"code","11d73f07":"code","07232887":"code","d5813cfa":"code","8e581b36":"code","eb588d1b":"code","89e0c416":"code","5194ac90":"code","ccc155d2":"code","33a85435":"code","fe5850e8":"code","50fee40d":"code","dbcb82f3":"code","6c239fea":"code","bb5104a9":"code","1e9aaa1b":"code","c1a683db":"code","17b33500":"code","1b203ebc":"code","89853c61":"code","04b16e35":"code","c125d194":"code","01b3b93b":"code","99758c49":"code","70cea92a":"code","2a1e090a":"code","75e00ff0":"code","9f24b609":"code","f942e88a":"code","690d17d4":"code","d618bf10":"code","e3253998":"code","69d51fd3":"code","97ea8275":"code","1c40f9b8":"code","cb9c47bf":"code","6091ca15":"code","495a0df5":"code","7c4cec8b":"code","300f11d7":"code","8bb95a98":"code","fd1f19cb":"code","71134b43":"code","cf8f316c":"code","92db70a9":"code","b7e84bf4":"code","b7f43be2":"code","057223ef":"code","42762a0f":"code","9884e85a":"code","8a7e3d34":"code","35255cd8":"code","019f62f6":"code","251837db":"markdown","c258bac1":"markdown","2ce01a84":"markdown","b01ee56a":"markdown","33418ca5":"markdown","0234d6c3":"markdown","39e93d84":"markdown","3130fa53":"markdown","d0336029":"markdown","a421c67b":"markdown","8baafc35":"markdown","d09fecd5":"markdown","086cbdbb":"markdown","459e9a1d":"markdown","8efb0890":"markdown","75af14d9":"markdown","d0276a60":"markdown","288cbe9c":"markdown","8811af5c":"markdown","76008de7":"markdown","f9d80a74":"markdown"},"source":{"ac592104":"!pip install plotly","11d73f07":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px","07232887":"## Setting color palette\nnf_color2 = sns.color_palette(['#db0000', '#000000'])\nnf_color2_r = sns.color_palette(['#000000','#db0000'])\nnf_color9 = sns.blend_palette(['#db0000', '#000000'],9)\nnf_color12 = sns.blend_palette(['#db0000', '#000000'],12)\nnf_color25 = sns.blend_palette(['#db0000','#000000'],25)\nsns.color_palette(nf_color25)","d5813cfa":"df= pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\ndf","8e581b36":"df.nunique(dropna=True)","eb588d1b":"## Why there are 748 country in this df where as there are 195 countries in world recognized by Unite Nation\n\n## unique returns an array thus we can slice the array in this way\ndf.country.unique()[:10]    ","89e0c416":"## how to read complete text from description?\ndf.description[1]","5194ac90":"## Lets c the data type of each column of dataframe\n# df.info()","ccc155d2":"## Since there is only 1 int type column describe will show only 1\n### However this column is stored incorrectly as this column should have stored data in datetime format\ndf.describe()","33a85435":"### Lets check for missing values\ndf.isnull().sum()","fe5850e8":"\ndf.isnull().mean().sort_values(ascending=False)[:7]*100","50fee40d":"sns.heatmap(df.isnull(), cmap=nf_color2_r);","dbcb82f3":"### Just for fun\n\nsns.heatmap(df.notna(), cmap=nf_color2_r);  ### notna() is exact opp of isnull()","6c239fea":"!pip install wordcloud","bb5104a9":"from wordcloud import WordCloud,STOPWORDS\nstopwords = STOPWORDS","1e9aaa1b":"wc= WordCloud(background_color='white',stopwords=stopwords, height=1080, width =1080)","c1a683db":"df.head(1)","17b33500":"####### Removing NaN and Converting data frame to string #########\nwc1= df.title.dropna().to_string(index=False)\nwc2= df.director.dropna().to_string(index=False)\nwc3= df.cast.dropna().to_string(index=False)\n\nwc4= df.country.dropna().to_string(index=False)\nwc5= df.rating.dropna().to_string(index=False)\nwc6= df.listed_in.dropna().to_string(index=False)\n\nwc7=df.description.dropna().to_string(index=False)\n\n# Ex wc3= df.body.to_string(index=False)","1b203ebc":"plt.figure(figsize=(21,14))\nplt.subplot(1,3,1)\nwc.generate(wc1)\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.title(\"Word Cloud for Title\", fontsize=20)\nwc.to_file('body1.png')\n\nplt.subplot(1,3,2)\nwc.generate(wc2)\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.title(\"Word Cloud for Director\", fontsize=20)\nwc.to_file('body2.png')\n\nplt.subplot(1,3,3)\nwc.generate(wc3)\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.title(\"Word Cloud for Cast\", fontsize=20)\nwc.to_file('body3.png')\n\nplt.tight_layout()","89853c61":"wc= WordCloud(background_color='Black',stopwords=stopwords, height=1080, width =1080)","04b16e35":"plt.figure(figsize=(21,14))\nplt.subplot(1,3,1)\nwc.generate(wc4)\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.title(\"Word Cloud for country\", fontsize=20)\nwc.to_file('body1.png')\n\nplt.subplot(1,3,2)\nwc.generate(wc5)\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.title(\"Word Cloud for rating\", fontsize=20)\nwc.to_file('body2.png')\n\nplt.subplot(1,3,3)\nwc.generate(wc6)\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.title(\"Word Cloud for listed_in\", fontsize=20)\nwc.to_file('body3.png')\n\nplt.tight_layout()","c125d194":"from PIL import Image\n## To read color from image, Import \nfrom wordcloud import ImageColorGenerator","01b3b93b":"### Masking Image to project word cloud on it\nmask = np.array(Image.open(r'..\/input\/ayushi-dataset-for-wordcloud-and-sentiment\/netflix_logo_1_0.png'))","99758c49":"#Grab the mask colors\ncolors = ImageColorGenerator(mask)","70cea92a":"wc = WordCloud(stopwords = STOPWORDS,\n               mask = mask, \n               background_color = \"Black\",\n               max_words = 2000,\n               max_font_size = 500,\n               random_state = 42, \n               width = mask.shape[1],\n               height = mask.shape[0],\n               color_func=colors).generate_from_text(wc7)\n\n#wc.generate(wc7)  \n## word cloud can be created both ways\nplt.figure(figsize=(22,8))\nplt.imshow(wc, interpolation = \"None\")\n  \n# Off the x and y axis\nplt.axis('off')\n  \n# Now show the output cloud\nplt.show()","2a1e090a":"wc = WordCloud(stopwords = STOPWORDS,\n               mask = mask, \n               background_color = \"Black\",\n               max_words = 2000,\n               max_font_size = 500,\n               random_state = 42, \n               width = mask.shape[1],\n               height = mask.shape[0],\n               color_func=colors).generate_from_text(wc7)\n\n#wc.generate(wc7)  \n## word cloud can be created both ways\nplt.figure(figsize=(22,8))\nplt.imshow(wc, interpolation = \"bilinear\")\n  \n# Off the x and y axis\nplt.axis('off')\n  \n# Now show the output cloud\nplt.show()","75e00ff0":"df.loc[5:20]","9f24b609":"df['date_added']= pd.to_datetime(df['date_added'].str.strip(),format='%B %d, %Y')\n## str.strip() : Strips\/Remove spaces at the beginning and at the end of the string:","f942e88a":"df['month']=df.date_added.dt.month.fillna(0) ## Extracting Month from the dataset\ndf['day']=df.date_added.dt.day.fillna(0) ## Extracting Day from the dataset","690d17d4":"df.info()","d618bf10":"df.describe(include='object')","e3253998":"print('Mean Year: ',df.release_year.mean())\npx.histogram(df, x='release_year',title='Movie Release Year',color_discrete_sequence=['#db0000', 'black'] ,marginal=\"rug\", template='plotly_dark')","69d51fd3":"px.histogram(df, x='date_added',title='Movie Added on Netflix',color_discrete_sequence=['#db0000', 'white'] ,marginal=\"rug\", template='plotly_dark')","97ea8275":"px.histogram(df, x='month', color= 'type' ,color_discrete_sequence=['#db0000', 'grey'],  template='plotly_dark',\n             title='Month wise distribution of Movies Added on Netflix with genre' )","1c40f9b8":"plt.style.use('dark_background')\ndf.month.value_counts().plot(kind='bar', color='#db0000' );\nplt.grid(True, linestyle='-', linewidth=0.5)","cb9c47bf":"px.histogram(df, x='day', color= 'type' ,color_discrete_sequence=['#db0000', 'grey'],  template='plotly_dark',\n             title='Day wise distribution of Movies Added on Netflix with genre' )","6091ca15":"px.histogram(df, x='release_year',color_discrete_sequence=['#db0000', 'grey'] ,marginal=\"rug\", template='plotly_dark', color= 'type'\n            ,title='Movies vs TV Show Released Year wise ')","495a0df5":"labels = df.type.value_counts().index\nvalues =df.type.value_counts()\n\nfig = px.pie(df, values=values, names=labels,color_discrete_sequence=['#db0000', 'black'], hole=.3)\nfig.show()","7c4cec8b":"### Lets use str.split() to seperate countries\n\ndf_country= df.country.str.split(',', expand=True)  ### as we saw multiple countries are seperated with the help of comma thus used ','\n \n### print df and all\nprint('Total no of unique entry in each column after splitting country column','\\n')\ndisplay(df_country.nunique())\nprint('This how our dataframe look after splitting','\\n')\ndf_country","300f11d7":"df_country.columns","8bb95a98":"### I just want to check that we don't have any duplicates in this feature manually\ndf_country[0].unique()","fd1f19cb":"print('Top 15 countries from where movies are listed on Netflix')\ndf_country[0].value_counts().head(15)","71134b43":"temp= pd.concat([df,df_country[0]], axis=1)\ntemp = temp.dropna(axis=0, subset=[0])  ### Drop row which have NaN in column 0\ntemp.isnull().sum()","cf8f316c":"px.histogram(temp, 0,color_discrete_sequence=['#db0000', 'grey'] ,marginal=\"rug\", template='plotly_dark', color= 'type'\n            ,title='Country wise show added on Netflix' )","92db70a9":"df.head(1)","b7e84bf4":"df['cast_count']= df['cast'].str.split(',')\n","b7f43be2":"df.head(3)","057223ef":"### df['cast'].str.split(',') >>> This returned a list thus we need to improvise.\ndf.cast_count","42762a0f":"## Creating a copy for convinience \ndata= df.copy()\ndata = data[data['cast_count'].notna()]\ndata['cast_count'] = data['cast_count'].apply(lambda x: len(x))\ndata.head(3)","9884e85a":"data.cast_count","8a7e3d34":"px.histogram(data, 'cast_count',color_discrete_sequence=['#db0000', 'grey'] ,marginal=\"rug\", template='plotly_dark', color= 'type'\n            ,title='Cast Count, Movies and TV Show wise' )","35255cd8":"\ndata = data[data['listed_in'].notna()]\ndata['listed_in_count'] = data['listed_in'].apply(lambda x: len(x))\ndata.head(3)","019f62f6":"px.histogram(data, 'listed_in_count',color_discrete_sequence=['#db0000', 'grey'] ,marginal=\"rug\", template='plotly_dark', color= 'type'\n            ,title='Each show listed in no of genre' )","251837db":"![info netflix.PNG](attachment:6c52e4dc-1cd7-4a96-90bb-50abaa234f94.PNG)\n\n**date_added**, **release_year** must be in datatime but are stored as int and object","c258bac1":"## Q. Why netflix upload more TV Shows compared to movies","2ce01a84":"argument **interpolation=\"bilinear\"** in the plt.imshow(). This is to make the `displayed image appear more smoothly.`   \nIn below fig I have used the argument interpolation=\"bilinear\" and in above set it as None","b01ee56a":"## Import Data and Libraries","33418ca5":"This is left skewed distribution with mean at 2014","0234d6c3":"### Observation\n* TV show dominante netflix atleast they are add more in quantity compared to movies \n> But why?\n* On `1st Day of month` most of the content is uploaded on netflix","39e93d84":"### Countries\nAS we have already seen previously country have 784 unique values. SO **how can we reduce it to 195 or less as there are 195 countries in world?**  \nI think we can create a new data frame for countries which might be our temporary dataframe for analysing countries","3130fa53":"* Most movies are added on netflix in the July, Dec and Sept\n* Where as least movies are add in the month of Feb, May and Nov","d0336029":"## What is Word Cloud?\n\nWord clouds (also known as text clouds or tag clouds) work in a simple way: the more a specific word appears in a source of textual data (such as a speech, blog post, or database), the bigger and bolder it appears in the word cloud.  \nA `word cloud is a collection, or cluster, of words depicted in different sizes. The bigger and bolder the word appears, the more often it\u2019s mentioned within a given text and the more important it is.`\n\nAlso known as tag clouds or text clouds, these are ideal ways to pull out the most pertinent parts of textual data, from blog posts to databases. They can also help business users compare and contrast two different pieces of text to find the wording similarities between the two.\n\nPerhaps you\u2019re already leveraging advanced data visualization techniques to turn your important analytics into charts, graphs, and infographics. This is an excellent first step, as our brains prefer visual information over any other format.\n\nYet, what do you do if your raw data is text-based in nature?\n\nMuch of the research your organization conducts will include at least some form of an open-ended inquiry that prompts respondents to give a textual answer.\n\nFor instance, you might ask current customers what they like or don\u2019t like about your new product line. Or, you could ask them to give suggestions on how your organization could improve. They could also have the chance to elaborate on any pain points they\u2019re experiencing.\n\nThere are industry tools that allow you to code such open-ended data so users can understand it quantitatively. Yet, these don\u2019t come cheap. Word clouds offer a cost-effective, yet powerful, alternative.\n\nWith these, you can still quantify your text-based insights into measurable analytics. The only difference? You won\u2019t create a chart or graph as you would with a set of numbers.","a421c67b":"## Cast","8baafc35":"1st thing which comes to my mind is to change `data_added` from object to datatime","d09fecd5":"### Observation\n* Recently more TV Shows released have out numbered movies **thats why netflix upload more TV Shows compared to movies**\n* However netflix has more movies compared to TV shows because **Movies were dominating entertainment industry pre 2000**","086cbdbb":"# Statistics Analysis of Data","459e9a1d":"### CastCount","8efb0890":"### This is an incomplete Notebook \n## Open for ur suggestion to improve this notebook\n# Thank You !","75af14d9":"## Q. Netflix seem to dump movies in year mid, is there any fav month or season?","d0276a60":"* **Show_id**      : is unique number for every single one these shows\n* **type**         : 2 types [Movies and TV Show]\n* **title**        : again unique\n- **Director**     : name of director seems there are multiple of movies with sam director\n* **Cast**         : Group of actors who make up a film or stage play.\n* **Country**      : shooting location \n* **date_added**   : When movie was added to netflix\n* **release_year** : When movie was release\n* **rating**       : Motion Picture Association film rating system\n* **duration**     : Either it is in min for movies or is mentioned in seasons in case it is series\n* **listed_in**    : Genre of movies\n* **description**  : Short summary","288cbe9c":"# Create Word Cloud for\n- Title\n- Director\n- Country\n- Listed in \n- Description","8811af5c":"## What is EDA\nExploratory Data Analysis refers to the critical process of performing initial investigations on data so as to discover patterns,to spot anomalies,to test hypothesis and to check assumptions with the help of summary statistics and graphical representations.  \nAKA : EDA is the process of investigating the dataset to discover patterns, and anomalies (outliers), and form hypotheses based on our understanding of the dataset. EDA involves generating summary statistics for numerical data in the dataset and creating various graphical representations to understand the data better.","76008de7":"There 784 unique entries in the data frame in counties column because there are few combination of countries.  \nlike > 'United States, Ghana, Burkina Faso, United Kingdom, Germany, Ethiopia'","f9d80a74":"**TV Show can be listed in more than 70 Genre**"}}