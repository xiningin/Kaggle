{"cell_type":{"daa463ba":"code","13f033ce":"code","4bf53ad3":"code","fcaa4008":"code","6ee21c58":"code","20afb169":"code","2acc35ca":"code","0bcbaec8":"code","3330041a":"code","d69b974a":"code","8eaccd4c":"code","05bfd6a8":"code","096888df":"code","eee47608":"code","3e1bcf62":"code","ad8087c9":"code","80672b9c":"code","a99d9d1d":"code","828e86cb":"code","a2c34ef6":"code","6452c5ea":"code","32cadac6":"code","31d2e8a1":"code","7e639b3a":"code","0f80abdc":"code","b7296854":"code","c14071e7":"code","33b29abc":"code","24824d3b":"code","9ad38b3e":"code","da7f473d":"code","f1b3dad9":"code","ff079d5a":"code","8cc7d369":"code","9e3c1789":"code","b75fb77a":"code","7e1cc2fc":"code","138e660d":"code","ac554baa":"code","d44c0e37":"code","02907a3c":"markdown","10a3846a":"markdown","89ff6cb2":"markdown","4954fe0c":"markdown","c4494a59":"markdown","9f7cdfb6":"markdown","88c12cbd":"markdown","3ca5e6c6":"markdown"},"source":{"daa463ba":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport cv2\nfrom PIL import Image\n\n'''import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))'''\n\n# Any results you write to the current directory are saved as output.","13f033ce":"img_green = cv2.imread(\"\/kaggle\/input\/open-images-2019-object-detection\/test\/34ff94b34c6851bf.jpg\")\nprint(img_green.shape)\nplt.imshow(img_green)\nplt.show()","4bf53ad3":"img = cv2.imread(\"\/kaggle\/input\/open-images-2019-object-detection\/test\/149d7a017153bc72.jpg\")\nplt.imshow(img)\nplt.show()","fcaa4008":"print(img.shape)","6ee21c58":"# Convert the image into RGB\nimg_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nprint(img_rgb.shape)\nplt.imshow(img_rgb)\nplt.show()","20afb169":"bicycle1 = np.copy(img_rgb)\nbicycle1[:,:,0] = 5*bicycle1[:,:,0]\nbicycle1[:,:,1] = bicycle1[:,:,1]\/2 ","2acc35ca":"plt.imshow(bicycle1)\nplt.show()","0bcbaec8":"bicycle2 = np.copy(img_rgb)\ncv2.rectangle(bicycle2, pt1=(100,400), pt2=(200, 600), color=(0, 255,0), thickness=5)\nplt.imshow(bicycle2)\nplt.show()","3330041a":"bicycle3 = np.copy(img_rgb)\ncv2.circle(bicycle3, center=(200, 200), radius=50, thickness=5, color=(0, 0, 255))\nplt.imshow(bicycle3)\nplt.show()","d69b974a":"bicycle4 = img_rgb.copy()\ncv2.putText(bicycle4, text=\"Sense Tech\", org=(250, 260), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=2, color=(255, 10, 100), thickness=2, lineType=cv2.LINE_AA )\nplt.imshow(bicycle4)\nplt.show()","8eaccd4c":"fig,(ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(16, 6))\nax1.hist(bicycle4[:,:,0].ravel(), bins=20)\nax2.hist(bicycle4[:,:,1].ravel(), bins=20)\nax3.hist(bicycle4[:,:,2].ravel(), bins=20)","05bfd6a8":"'''bicycle5 = np.copy(img_rgb)\ndef draw_circle(event, x, y, flags, param):\n    if event == cv2.EVENT_LBUTTONDOWN:\n        cv2.circle(bicycle5, center = (x,y), radius=5, color=(87, 184, 237), thinkness=-1)\n    elif event == cv2.EVENT_RBUTTONDOWN:\n        cv2.circle(bicycle5, center=(x,y), radius=10, color=(85, 185, 234), thinkness=1)\n\ncv2.namedWindow(winname='my_drawing')\ncv2.setMouseCallback('my_drawing', draw_circle)\n\nwhile True:\n    cv2.imshow('my_drawing', bicycle5)\n    if cv2.waitKey(10) & 0xFF == 27:\n        break\n    cv2.destroyAllWindows()'''","096888df":"#Average blurring\nbicycle5 = np.copy(img_rgb)\n#\nkernels = [5, 11, 17]\n\nplt.imshow(bicycle5)\nplt.show()\nfig, axs = plt.subplots(nrows= 1, ncols=3, figsize=(20,20))\nfor ind, s in enumerate(kernels):\n    img_blurred = cv2.blur(bicycle5, ksize=(s,s))\n    ax = axs[ind]\n    ax.imshow(img_blurred)\n    ax.axis('off')\nplt.show()","eee47608":"img_0 = cv2.blur(img_rgb, ksize=(7,7))\nimg_1 = cv2.GaussianBlur(img_rgb, ksize=(7,7), sigmaX=0)\nimg_2 = cv2.medianBlur(img_rgb, 7)\nimg_3 = cv2.bilateralFilter(img_rgb, 7, sigmaSpace=75, sigmaColor=75)\n\nimages = [img_0, img_1, img_2, img_3]\nfig, axs = plt.subplots(nrows =1, ncols =4, figsize=(20,20))\n\nfor ind, p in enumerate(images):\n    ax = axs[ind]\n    ax.imshow(p)\n    ax.axis('off')\n    \nplt.show()","3e1bcf62":"_, thresh_0 = cv2.threshold(img_rgb, 127, 255, cv2.THRESH_BINARY)\n_, thresh_1 = cv2.threshold(img_rgb, 127, 255, cv2.THRESH_BINARY_INV)\n_, thresh_2 = cv2.threshold(img_rgb, 127, 255, cv2.THRESH_TOZERO)\n_, thresh_3 = cv2.threshold(img_rgb, 127, 255, cv2.THRESH_TOZERO_INV)\n_, thresh_4 = cv2.threshold(img_rgb, 127, 255, cv2.THRESH_TRUNC)\n\nimages = [img, thresh_0, thresh_1, thresh_2, thresh_3, thresh_4]\n\nfig, axs = plt.subplots(nrows= 2, ncols=3, figsize=(13,13))\n\nfor ind, p in enumerate(images):\n    ax = axs[ind\/\/3, ind%3]\n    ax.imshow(p)\n    \nplt.show()","ad8087c9":"sobel_x = cv2.Sobel(img_rgb, cv2.CV_64F, dx=1, dy=0, ksize=5)\nsobel_y = cv2.Sobel(img_rgb, cv2.CV_64F, dx=0, dy=1, ksize=5)\n\nblended = cv2.addWeighted(src1=sobel_x, alpha=0.5, src2 = sobel_y, beta=0.5, gamma=0)\nlaplacian = cv2.Laplacian(img_rgb, cv2.CV_64F)","80672b9c":"images = [sobel_x, sobel_y, blended, laplacian]\n\nplt.figure(figsize=(20,20))\nfor i in range(4):\n    plt.subplot(1, 4, i+1)\n    plt.imshow(images[i], cmap='gray')\n    plt.axis('off')\n    \nplt.show()","a99d9d1d":"index_210 = img_rgb > 110\nbicycle6 = np.copy(img_rgb)","828e86cb":"bicycle6[index_210] = 250","a2c34ef6":"plt.figure(figsize=(16,6))\nplt.imshow(bicycle6)\nplt.show()","6452c5ea":"small_img = np.copy(img_rgb)\nsmall_img = small_img[350:-200:]\nprint(small_img.shape)\nplt.figure(figsize=(20,20))\nplt.imshow(small_img)\nplt.axis('off')\nplt.show()\n","32cadac6":"edges = cv2.Canny(image= small_img, threshold1=250, threshold2=250)\nedges[100:,:,]\nplt.figure(figsize=(20,20))\nplt.imshow(edges)\nplt.axis('off')\nplt.show()\n","31d2e8a1":"#Set the lower and upper threshold\nmed_val = np.median(small_img)\nlower = int(max(0, .7*med_val))\nupper = int(min(255, 1.3*med_val))\n","7e639b3a":"# Blurring with ksize= 5\nimg_k5 = cv2.blur(small_img, ksize=(5,5))\n\n#Canny detection with different thresholds\nedges_k5 = cv2.Canny(img_k5, threshold1=lower, threshold2 = upper)\n\nedges_k5_2 = cv2.Canny(img_k5, lower, upper+100)\n\n#blurring with ksize=9\nimg_k9 = cv2.blur(small_img, ksize=(9,9))\n\n#Canny detection with different thresholds\nedges_k9 = cv2.Canny(img_k9, lower, upper)\nedges_k5_2 = cv2.Canny(img_k9, lower, upper)\n\n#plot the images\nimages = [edges_k5, edges_k5, edges_k9, edges_k5_2]\nplt.figure(figsize=(20, 5))\n\nfor i in range(4):\n    plt.subplot(2,2, i+1)\n    plt.imshow(images[i])\n    plt.axis('off')\nplt.show()\n\n\n","0f80abdc":"arr = np.array([[[3, 4], [8, 2], [1, 9]],\n               [[3, 0], [8, 2], [1, 10]],\n               [[3, 4], [8, 2], [1, 9]]])\narr.shape","b7296854":"plt.imshow(arr[:,:,1],  cmap='gray')\nplt.show()","c14071e7":"arr[:,:,1]","33b29abc":"arr = np.array([[[3, 4, 5], [8, 2, 5], [1, 9, 5]],\n               [[3, 0, 1], [8, 2, 7], [1, 10, 3]],\n               [[3, 44, 6], [8, 2, 7], [1, 9, 8]],\n               [[3, 4, 0], [8, 2, 1], [1, 9,1 ]],\n               [[3, 0, 1], [98, 26, 88], [1, 10,1]],\n               [[250, 250,250], [120, 110, 250], [1, 9, 250]],\n               [[3, 4, 4], [8, 2,6], [1, 9, 4]],\n               [[3, 0, 2], [8, 2, 5], [1, 10,2]],\n               [[3, 4, 0], [8, 2,1], [1, 9, 3]]])\narr.shape","24824d3b":"arr2 = np.copy(arr)","9ad38b3e":"plt.imshow(arr)\nplt.show()","da7f473d":"arr_condition = arr < 250\narr2[arr_condition] += 100 ","f1b3dad9":"plt.imshow(arr2)\nplt.show()","ff079d5a":"# Convert the image into gray scale\nimg_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nprint(img_gray.shape)\nplt.figure(figsize=(16, 8))\nplt.imshow(img_gray, cmap = 'gray')\nplt.show()","8cc7d369":"np_img = np.array(img_gray)","9e3c1789":"print(np_img[10:-5, 10:-5])","b75fb77a":"img2 = np.copy(img_gray)\nimg2[100:200, 10:100] = 0","7e1cc2fc":"plt.imshow(img2, cmap = 'gray')\nplt.show()","138e660d":"img_green = cv2.cvtColor(img_green, cv2.COLOR_BGR2RGB)\nplt.figure(figsize=(16, 8))\nplt.imshow(img_green)\nplt.show()","ac554baa":"img_green = cv2.cvtColor(img_green, cv2.COLOR_BGR2GRAY)","d44c0e37":"img3 = np.copy(img2)\nimg3[100:200, 10:100] = img_green[100:200, 10:100] \nplt.figure(figsize=(16, 8))\nplt.imshow(img3, cmap = 'gray')\nplt.show()","02907a3c":"### Blurring","10a3846a":"### Draw a circle","89ff6cb2":"### Color channel value ","4954fe0c":"### Gradient","c4494a59":"### Draw a rectange","9f7cdfb6":"### Types of thresholding\n<ol>\n    <li> Binary <\/li>\n    <li> The inverse of Binary <\/li>\n    <li> Threshold to zero <\/li>\n    <li> The inverse of Threshold to zero <\/li>\n    <li> Threshold trunction <\/li>\n<\/ol>","88c12cbd":"### Add text","3ca5e6c6":"### Total image chanal "}}