{"cell_type":{"5d8e30e1":"code","cb81e2b4":"code","cebf90e7":"code","8270b48c":"code","bfd97d71":"code","dedf819d":"code","f308ba9b":"code","e0c79161":"code","e44fc973":"code","61729d17":"code","923a62e8":"code","60155819":"code","618d8bc7":"markdown","c42591f6":"markdown","816e517c":"markdown","c4a28ab4":"markdown","d7be8fe7":"markdown","b044525f":"markdown","389a46ca":"markdown","1c2f4d67":"markdown","955bcd2f":"markdown","dc04900f":"markdown"},"source":{"5d8e30e1":"!pip install plotly","cb81e2b4":"import numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style(\"darkgrid\")\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\nimport plotly.express as px\n%matplotlib inline\n\nfrom plotly.offline import iplot\n\nimport plotly.graph_objs as go\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cebf90e7":"df = pd.read_csv('\/kaggle\/input\/mobile-price-classification\/train.csv')\ndf.head(5)","8270b48c":"df_pr_0 = df[df.price_range == 0]\ndf_pr_1 = df[df.price_range == 1]\ndf_pr_2 = df[df.price_range == 2]\ndf_pr_3 = df[df.price_range == 3]\n\ntrace1 =go.Scatter(\n                    y = df_pr_0.battery_power,\n                    x = df_pr_0.ram,\n                    mode = \"markers\",\n                    name = \"Price Range: R\u1ebb\",\n                    marker = dict(color = 'rgba(240, 136, 200, 0.8)'),\n                    text= df_pr_0.price_range)\n\ntrace2 =go.Scatter(\n                    y = df_pr_1.battery_power,\n                    x = df_pr_1.ram,\n                    mode = \"markers\",\n                    name = \"Price Range: Trung\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df_pr_1.price_range)\n\ntrace3 =go.Scatter(\n                    y = df_pr_2.battery_power,\n                    x = df_pr_2.ram,\n                    mode = \"markers\",\n                    name = \"Price Range: Cao\",\n                    marker = dict(color = 'rgba(0, 240, 170, 0.8)'),\n                    text= df_pr_2.price_range)\n\ntrace4 =go.Scatter(\n                    y = df_pr_3.battery_power,\n                    x = df_pr_3.ram,\n                    mode = \"markers\",\n                    name = \"Price Range: Xa X\u1ec9\",\n                    marker = dict(color = 'rgba(50, 70, 190, 0.8)'),\n                    text= df_pr_3.price_range) \n\n\ndata = [trace1, trace2, trace3, trace4]\n\nlayout = dict(title = 'Ram - Battery Power - Price Range',\n              xaxis= dict(title= 'Ram',\n                          ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Battery Power',\n                          ticklen= 5,zeroline= False),\n             autosize=False,\n             width=700,\n             height=450,)\nfig = dict(data = data, layout = layout)\n    \niplot(fig)","bfd97d71":"df_pr_0 = df[df.price_range == 0]\ndf_pr_1 = df[df.price_range == 1]\ndf_pr_2 = df[df.price_range == 2]\ndf_pr_3 = df[df.price_range == 3]\n\ntrace0 = go.Box(\n    y=df_pr_0.ram,\n    name = 'Price Range: R\u1ebb',\n    marker = dict(\n        color = 'rgb(223, 240, 0)',\n    )\n)\ntrace1 = go.Box(\n    y=df_pr_1.ram,\n    name = 'Price Range: Trung',\n    marker = dict(\n        color = 'rgb(10, 110, 220)',\n    )\n)\ntrace2 = go.Box(\n    y=df_pr_2.ram,\n    name = 'Price Range: Cao',\n    marker = dict(\n        color = 'rgb(242, 54, 14)',\n    )\n)\ntrace3 = go.Box(\n    y=df_pr_3.ram,\n    name = 'Price Range: Xa X\u1ec9',\n    marker = dict(\n        color = 'rgb(60, 200, 135)',\n    )\n)\n\ndata = [trace0, trace1, trace2, trace3]\n\nlayout = dict(title = 'Ram - Price Range',\n              xaxis= dict(title= 'Price Range',\n                          ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Ram',\n                          ticklen= 5,zeroline= False),\n             autosize=False,\n             width=700,\n             height=450)\n\nfig = dict(data = data, layout = layout)\n\niplot(fig)","dedf819d":"df_pr_0 = df[df.price_range == 0]\ndf_pr_1 = df[df.price_range == 1]\ndf_pr_2 = df[df.price_range == 2]\ndf_pr_3 = df[df.price_range == 3]\n\ntrace0 = go.Box(\n    y=df_pr_0.battery_power,\n    name = 'Price Range: R\u1ebb',\n    marker = dict(\n        color = 'rgb(223, 240, 0)',\n    )\n)\ntrace1 = go.Box(\n    y=df_pr_1.battery_power,\n    name = 'Price Range: Trung',\n    marker = dict(\n        color = 'rgb(10, 110, 220)',\n    )\n)\ntrace2 = go.Box(\n    y=df_pr_2.battery_power,\n    name = 'Price Range: Cao C\u1ea5p',\n    marker = dict(\n        color = 'rgb(242, 54, 14)',\n    )\n)\ntrace3 = go.Box(\n    y=df_pr_3.battery_power,\n    name = 'Price Range: Xa X\u1ec9',\n    marker = dict(\n        color = 'rgb(60, 200, 135)',\n    )\n)\n\ndata = [trace0, trace1, trace2, trace3]\n\nlayout = dict(title = 'Battery Power - Price Range',\n              xaxis= dict(title= 'Price Range',\n                          ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Battery Power',\n                          ticklen= 5,zeroline= False),\n             autosize=False,\n             width=700,\n             height=450)\n\nfig = dict(data = data, layout = layout)\n\niplot(fig)","f308ba9b":"fig = px.histogram(df, x = 'px_height',\n                   color = 'price_range',\n                   title = \"Phone Height - Price Range\")\nfig.update_layout(\nxaxis_title_text = 'px_height',\nyaxis_title_text = 'Frequency',autosize=False,\n    width=700,\n    height=450)\nfig","e0c79161":"fig = px.histogram(df, x = 'px_width', \n                   color = 'price_range', \n                   title = \"Phone Width - Price Range\")\nfig.update_layout(\nxaxis_title_text = 'px_width',\nyaxis_title_text = 'Frequency',autosize=False,\n    width=700,\n    height=450)\nfig","e44fc973":"random_state = 42\n\nX = df.iloc[:,0:20].values\ny = df.iloc[:, 20].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = random_state)","61729d17":"sc = StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","923a62e8":"classifier = LogisticRegression(random_state = random_state)\n\nclassifier.fit(X_train,y_train)\n\ny_pred = classifier.predict(X_test)\n\nprint(classification_report(y_test, y_pred))","60155819":"cm = confusion_matrix(y_test, y_pred)\n\ndf1 = pd.DataFrame(columns=[\"0\",\"1\",\"2\",\"3\"], index= [\"0\",\"1\",\"2\",\"3\"], data= cm )\n\nf,ax = plt.subplots(figsize=(6,6))\n\nsns.heatmap(df1, annot=True,cmap=\"Greens\", fmt= '.0f',\n            ax=ax,linewidths = 5, cbar = False,annot_kws={\"size\": 16})\nplt.xlabel(\"Predicted Label\")\nplt.xticks(size = 12)\nplt.yticks(size = 12, rotation = 0)\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\", size = 12)\nplt.show()","618d8bc7":"# **Ti\u1ec1n X\u1eed L\u00fd**\n\n**Ph\u00e2n chia d\u1eef li\u1ec7u train - test**","c42591f6":"**M\u1ed1i quan h\u1ec7 gi\u1eefa:** Phone Width - Price Range","816e517c":"**M\u1ed1i quan h\u1ec7 gi\u1eefa:** Phone Height - Price Range","c4a28ab4":"**M\u1ed1i quan h\u1ec7 gi\u1eefa:** Ram - Price Range","d7be8fe7":"# **Ph\u00e2n T\u00edch D\u1eef Li\u1ec7u**\n\n**M\u1ed1i quan h\u1ec7 gi\u1eefa:** Ram - Battery Power - Price Range","b044525f":"**Ma Tr\u1eadn L\u1ed7i:** D\u1ef1 \u0111o\u00e1n v\u00e0 th\u1ef1c t\u1ebf","389a46ca":"# **Models**\n\n**H\u1ed3i quy Logistic**","1c2f4d67":"**M\u1ed1i quan h\u1ec7 gi\u1eefa:** Battery Power - Price Range","955bcd2f":"**\u0110\u1ecdc d\u1eef li\u1ec7u t\u1eeb file**","dc04900f":"**Chu\u1ea9n ho\u00e1 d\u1eef li\u1ec7u**"}}