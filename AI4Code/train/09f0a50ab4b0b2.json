{"cell_type":{"e8f354f8":"code","12881ce9":"code","2c6b6377":"code","a0b12df7":"code","ade9e42e":"code","a360700e":"code","de7d545b":"code","9dd03a20":"code","250aeb1c":"code","fc5775ef":"code","345c6655":"code","a6e3d4d7":"code","3f9c87ae":"code","f0a498d9":"code","b19c3fea":"code","6c352360":"code","4489b23d":"code","522ca104":"code","ac835ec6":"code","97bf4292":"code","f579902b":"code","3ecae103":"code","1d432917":"code","934f938e":"markdown","a90cef42":"markdown","797c5a47":"markdown","9d8d2e56":"markdown","b7e7d00d":"markdown","e9ddc929":"markdown","9bd1c558":"markdown","c823c5db":"markdown","57657e79":"markdown","bbbc5305":"markdown","9fd76cba":"markdown","5041f879":"markdown"},"source":{"e8f354f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom plotly.offline import init_notebook_mode, plot, iplot\nimport plotly as py\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport seaborn as sns\nimport pycountry\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","12881ce9":"df=pd.read_csv(\"\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv\")\ndf.columns=['country', 'year', 'gender', 'age', 'suicides_no', 'population',\n       'suicides_100k_pop', 'country-year', 'HDI_for_year',\n       'gdp_for_year ', 'gdp_per_capita', 'generation']\ndf.columns","2c6b6377":"df.corr()","a0b12df7":"f,ax = plt.subplots(figsize=(16, 16))\nsns.heatmap(df.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()\n","ade9e42e":"df.head(10)","a360700e":"df[\"year\"].unique()","de7d545b":"f,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x=df.groupby('year')['suicides_100k_pop'].mean().index,y=df.groupby('year')['suicides_100k_pop'].mean().values,data=df,color='lime',alpha=0.8)\nplt.xlabel('Years',fontsize = 15,color='blue')\nplt.ylabel('Suicides per 100K',fontsize = 15,color='blue')\nplt.title('Global Suicides(per 100K)-trend over time 1985-2016',fontsize = 20,color='blue')\nplt.grid()\n\n","9dd03a20":"ASIA = ['Afghanistan',\n'Bangladesh',\n'Bhutan',\n'Brunei',\n'Burma',\n'Cambodia',\n'China',\n'East Timor',\n'Hong Kong',\n'India',\n'Indonesia',\n'Iran',\n'Japan',\n'Republic of Korea',\n'Laos',\n'Macau',\n'Malaysia',\n'Maldives',\n'Mongolia',\n'Nepal',\n'Pakistan',\n'Philippines',\n'Singapore',\n'Sri Lanka',\n'Taiwan',\n'Thailand',\n'Vietnam']\n\nC_W_OF_IND_STATES=['Armenia',\n'Azerbaijan',\n'Belarus',\n'Georgia',\n'Kazakhstan',\n'Kyrgyzstan',\n'Moldova',\n'Russian Federation',\n'Tajikistan',\n'Turkmenistan',\n'Ukraine',\n'Uzbekistan']\nEASTERN_EUROPE=['Albania','Bosnia and Herzegovina','Bulgaria','Croatia','Czech Republic','Hungary','Macedonia','Poland','Romania']\nEASTERN_EUROPE+=['Serbia','Slovakia','Slovenia']\nLATIN_AMER_CARIB=['Anguilla',\n'Antigua and Barbuda',\n'Argentina',\n'Aruba',\n'Bahamas',\n'Barbados',\n'Belize',\n'Bolivia',\n'Brazil',\n'British Virgin Is.',\n'Cayman Islands',\n'Chile',\n'Colombia',\n'Costa Rica',\n'Cuba',\n'Dominica',\n'Dominican Republic',\n'Ecuador',\n'El Salvador',\n'French Guiana',\n'Grenada',\n'Guadeloupe',\n'Guatemala',\n'Guyana',\n'Haiti',\n'Honduras',\n'Jamaica',\n'Martinique',\n'Mexico',\n'Montserrat',\n'Netherlands Antilles',\n'Nicaragua',\n'Panama',\n'Paraguay',\n'Peru',\n'Puerto Rico',\n'Saint Kitts and Nevis',\n'Saint Lucia',\n'Saint Vincent and Grenadines',\n'Suriname',\n'Trinidad and Tobago',\n'Turks and Caicos Is',\n'Uruguay',\n'Venezuela',\n'Virgin Islands']\n\nNEAR_EAST=['Bahrain',\n'Cyprus',\n'Gaza Strip',\n'Iraq',\n'Israel',\n'Jordan',\n'Kuwait',\n'Lebanon',\n'Oman',\n'Qatar',\n'Saudi Arabia',\n'Syria',\n'Turkey',\n'United Arab Emirates',\n'West Bank',\n'Yemen']\n\nNORTHERN_AFRICA=['Algeria',\n'Egypt',\n'Libya',\n'Morocco',\n'Tunisia',\n'Western Sahara']\nNORTHERN_AMERICA=['Bermuda',\n'Canada',\n'Greenland',\n'St Pierre and Miquelon',\n'United States']\n\nOCEANIA=['American Samoa',\n'Australia',\n'Cook Islands',\n'Fiji',\n'French Polynesia',\n'Guam',\n'Kiribati',\n'Marshall Islands',\n'Micronesia, Fed. St.',\n'Nauru',\n'New Caledonia',\n'New Zealand',\n'N. Mariana Islands',\n'Palau',\n'Papua New Guinea',\n'Samoa',\n'Solomon Islands',\n'Tonga',\n'Tuvalu',\n'Vanuatu',\n'Wallis and Futuna']\n\nSUB_SAHARAN_AFRICA=['Angola',\n'Benin',\n'Botswana',\n'Burkina Faso',\n'Burundi',\n'Cameroon',\n'Cape Verde',\n'Central African Rep.',\n'Chad',\n'Comoros',\n'Congo, Dem. Rep.',\n'Congo, Repub. of the',\n'Cote dIvoire',\n'Djibouti',\n'Equatorial Guinea',\n'Eritrea',\n'Ethiopia',\n'Gabon',\n'Gambia, The',\n'Ghana',\n'Guinea',\n'Guinea-Bissau',\n'Kenya',\n'Lesotho',\n'Liberia',\n'Madagascar',\n'Malawi',\n'Mali',\n'Mauritania',\n'Mauritius',\n'Mayotte',\n'Mozambique',\n'Namibia',\n'Niger',\n'Nigeria',\n'Reunion',\n'Rwanda',\n'Saint Helena',\n'Sao Tome & Principe',\n'Senegal',\n'Seychelles',\n'Sierra Leone',\n'Somalia',\n'South Africa',\n'Sudan',\n'Swaziland',\n'Tanzania',\n'Togo',\n'Uganda',\n'Zambia',\n'Zimbabwe']\nWESTERN_EUROPE=['Andorra',\n'Austria',\n'Belgium',\n'Denmark',\n'Faroe Islands',\n'Finland',\n'France',\n'Germany',\n'Gibraltar',\n'Greece',\n'Guernsey',\n'Iceland',\n'Ireland',\n'Isle of Man',\n'Italy',\n'Jersey',\n'Liechtenstein',\n'Luxembourg',\n'Malta',\n'Monaco',\n'Netherlands',\n'Norway',\n'Portugal',\n'San Marino',\n'Spain',\n'Sweden',\n'Switzerland',\n'United Kingdom']\ndef GetConti(counry):\n    if counry in ASIA:\n        return \"ASIA\"\n    elif counry in C_W_OF_IND_STATES:\n        return \"C_W_OF_IND_STATES\"\n    elif counry in EASTERN_EUROPE:\n        return \"EASTERN_EUROPE\"\n    elif counry in LATIN_AMER_CARIB:\n        return \"LATIN_AMER_CARIB\"\n    elif counry in NEAR_EAST:\n        return \"NEAR_EAST\"\n    elif counry in NORTHERN_AFRICA:\n        return \"NORTHERN_AFRICA\"\n    elif counry in NORTHERN_AMERICA:\n        return \"NORTHERN_AMERICA\"\n    elif counry in OCEANIA:\n        return \"OCEANIA\"\n    elif counry in SUB_SAHARAN_AFRICA:\n        return \"SUB_SAHARAN_AFRICA\"\n    elif counry in WESTERN_EUROPE:\n        return \"WESTERN_EUROPE\"\n    else:\n        return \"other\"\ncountry=df[\"country\"]\ncountry=pd.DataFrame(country)\n# list(country[\"country\"])\ndf1 = pd.DataFrame({\"Country\": list(country[\"country\"])})\ndf1['Continent'] = df1['Country'].apply(lambda x: GetConti(x))\ndf[\"continent\"]=df1[\"Continent\"]\ndf[df[\"continent\"]==\"other\"][\"country\"]","250aeb1c":"continent_list=list(df['continent'].unique())\nsuicides_100k_pop = []\nfor i in continent_list:\n    x = df[df['continent']==i]\n    rate = sum(x.suicides_100k_pop)\/len(x)\n    suicides_100k_pop.append(rate)\ndata1 = pd.DataFrame({'Continent_list': continent_list,'suicides_100k_pop':suicides_100k_pop})\n\nplt.figure(figsize = (15,15))\nplt.subplot(2,2,1)\nsns.barplot(x=df.groupby('continent')['suicides_100k_pop'].mean().index,y=df.groupby('continent')['suicides_100k_pop'].mean().values)\nplt.title(\"Global Suicides(per 100K) by Continent\")\nplt.ylabel(\"Suicide per 100K\")\nplt.xlabel(\"Continents\")\nplt.xticks(rotation=90)\n\nplt.subplot(2,2,2)\nlabels =data1.Continent_list\ncolors = ['grey','blue','red','yellow','green',\"orange\", \"darkblue\",\"purple\",\"maroon\",\"gold\"]\nexplode = [0,0,0,0,0,0,0,0,0,0]\nsizes = data1.suicides_100k_pop\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Global Suicides(per 100K) rate of Continents',color = 'blue',fontsize = 15)\nplt.show()","fc5775ef":"data=pd.DataFrame()\ndata[\"gender\"]=df.groupby('gender')['suicides_100k_pop'].mean().index\ndata[\"suicides_100k_pop_means\"]=df.groupby('gender')['suicides_100k_pop'].mean().values\n\nplt.figure(figsize = (20,20))\nplt.subplot(3,3,1)\nsns.barplot(x=data[\"gender\"],y=data['suicides_100k_pop_means'])\nplt.title(\"Global Suicides(per 100K) by Continent\")\nplt.ylabel(\"Suicide per 100K\")\nplt.xlabel(\"Gender\")\n\ndata_male=pd.DataFrame()\ndata_male[\"year\"]=df[df[\"gender\"]==\"male\"].groupby('year')['suicides_100k_pop'].mean().index\ndata_male[\"suicides_100k_pop_means\"]=df[df[\"gender\"]==\"male\"].groupby('year')['suicides_100k_pop'].mean().values\ndata_female=pd.DataFrame()\ndata_female[\"year\"]=df[df[\"gender\"]==\"female\"].groupby('year')['suicides_100k_pop'].mean().index\ndata_female[\"suicides_100k_pop_means\"]=df[df[\"gender\"]==\"female\"].groupby('year')['suicides_100k_pop'].mean().values\n\nplt.subplot(3,3,2)\nsns.pointplot(x=data_male[\"year\"],y=data_male['suicides_100k_pop_means'],data=data_male,color='lime',alpha=0.8)\nplt.title('Trend over time 1985-2016 of Male Suicide')\n\nplt.xticks(rotation=90)\n\nplt.subplot(3,3,3)\n\nsns.pointplot(x=data_female[\"year\"],y=data_female['suicides_100k_pop_means'],data=data_female,color='orange',alpha=0.8)\nplt.title('Trend over time 1985-2016 of Female Suicide')\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()\n","345c6655":"df.plot(kind='scatter', x='population', y='gdp_per_capita',alpha = 0.5,color = 'red')\nplt.xlabel('population')              # label = name of label\nplt.ylabel('gdp_per_capita')\nplt.title('Population-gdp_per_capita Plot')            # title = title of plot\nplt.show()\n","a6e3d4d7":"df_country_per_capita=pd.DataFrame()\ndf_country_per_capita[\"country\"]=df.groupby('country')['suicides_100k_pop'].mean().index\n\nsns.jointplot(df.groupby('country')['suicides_100k_pop'].mean().values,df.groupby('country')['gdp_per_capita'].mean().values, kind=\"scatter\", size=7)\nplt.xlabel(\"Suicides per 100k\")\nplt.ylabel(\"GDP per Capita($)\")\nplt.title(\"Correlation between GDP(per Capita) and suicides per 100k\\n\\n\\n\\n\")\nplt.show()","3f9c87ae":"\nsns.kdeplot(df.groupby('country')['suicides_100k_pop'].mean().values, df.groupby('country')['gdp_per_capita'].mean().values, shade=False, cut=3)\nplt.xlabel(\"Suicides per 100k\")\nplt.ylabel(\"GDP per Capita($)\")\nplt.show()","f0a498d9":"sns.countplot(df.generation,hue=df.gender)\nplt.title('Generation hue Gender Counter')\nplt.xticks(rotation=45)\n\nplt.show()","b19c3fea":"plt.figure(figsize=(16,7))\nbar_age = sns.barplot(x = 'gender', y = 'suicides_no', hue = 'age',data = df)","6c352360":"g = sns.lmplot(x=\"year\", y=\"suicides_no\", hue=\"generation\",\n               truncate=True, height=5, data=df)\ng.set_axis_labels(\"Year\", \"Suicides No\")\nplt.show()","4489b23d":"df_city=pd.read_csv(\"..\/input\/world-cities\/worldcities.csv\")\ndf_city=df_city[df_city['capital'] == \"primary\"]\n\nlatitude=[]\nlongitude=[]\nname=list(df_city['country'].unique())\n\nfor j in range(len(name)):\n    for i in list(df[\"country\"]):  \n        if name[j]==i:\n            latitude.append([i,df_city.iloc[j][\"lat\"]])\n            longitude.append([i,df_city.iloc[j][\"lng\"]])","522ca104":"df_city.head()","ac835ec6":"#read country info data ['country', 'latitude', 'longitude', 'name'\ndef Getlatitude(a):\n    for i in range(len(latitude)):\n        if a == latitude[i][0]:\n            return latitude[i][1]\ndef Getlongitude(b):\n    for i in range(len(longitude)):\n        if b == longitude[i][0]:\n            return longitude[i][1]\n\ndf1 = pd.DataFrame({\"Country\": list(df[\"country\"])})\ndf1['latitude'] = df1['Country'].apply(lambda x: Getlatitude(x))\ndf1['longitude'] = df1['Country'].apply(lambda x: Getlongitude(x))\ndf[\"latitude\"]=df1['latitude']\ndf[\"longitude\"]=df1['longitude']\ndf.head(10)\n","97bf4292":"# df.info()\ndf[\"generation\"].unique()","f579902b":"dataset = df.loc[:,[\"year\",\"latitude\",\"longitude\",\"generation\",\"continent\",\"suicides_100k_pop\"]]\nyears = [str(each) for each in list(df.year.unique())] \ndataset.info()","3ecae103":"dataset[dataset['year'] == 1987]","1d432917":"\n# make list of types\ntypes = ['Generation X', 'Silent', 'G.I. Generation', 'Boomers','Millenials', 'Generation Z']\ncustom_colors = {\n    'Generation X': 'red',\n    'Silent':\"yellow\",\n    'G.I. Generation': 'blue',\n    'Boomers': 'green',\n    'Millenials': 'orange',\n    'Generation Z': 'black'\n}\n# make figure\nfigure = {\n    'data': [],\n    'layout': {},\n    'frames': []\n}\n\nfigure['layout']['geo'] = dict(showframe=False, showland=True, showcoastlines=True, showcountries=True,\n               countrywidth=1, \n              landcolor = 'rgb(217, 217, 217)',\n              subunitwidth=1,\n              showlakes = True,\n              lakecolor = 'rgb(255, 255, 255)',\n              countrycolor=\"rgb(5, 5, 5)\")\nfigure['layout']['hovermode'] = 'closest'\nfigure['layout']['sliders'] = {\n    'args': [\n        'transition', {\n            'duration': 300,\n            'easing': 'cubic-in-out'\n        }\n    ],\n    'initialValue': '1987',\n    'plotlycommand': 'animate',\n    'values': years,\n    'visible': True\n}\nfigure['layout']['updatemenus'] = [\n    {\n        'buttons': [\n            {\n                'args': [None, {'frame': {'duration': 400, 'redraw': False},\n                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],\n                'label': 'Play',\n                'method': 'animate'\n            },\n            {\n                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',\n                'transition': {'duration': 0}}],\n                'label': 'Pause',\n                'method': 'animate'\n            }\n        ],\n        'direction': 'left',\n        'pad': {'r': 10, 't': 87},\n        'showactive': False,\n        'type': 'buttons',\n        'x': 0.1,\n        'xanchor': 'right',\n        'y': 0,\n        'yanchor': 'top'\n    }\n]\n\nsliders_dict = {\n    'active': 0,\n    'yanchor': 'top',\n    'xanchor': 'left',\n    'currentvalue': {\n        'font': {'size': 20},\n        'prefix': 'Year:',\n        'visible': True,\n        'xanchor': 'right'\n    },\n    'transition': {'duration': 900, 'easing': 'cubic-in-out'},\n    'pad': {'b': 10, 't': 50},\n    'len': 0.9,\n    'x': 0.1,\n    'y': 0,\n    'steps': []\n}\n\n# make data\nyear = 1695\nfor ty in types:\n    dataset_by_year = dataset[dataset['year'] == year]\n    dataset_by_year_and_cont = dataset_by_year[dataset_by_year['generation'] == ty]\n\n    data_dict = dict(\n    type='scattergeo',\n    lon = dataset['longitude'],\n    lat = dataset['latitude'],\n    hoverinfo = 'text',\n    text = ty,\n    mode = 'markers',\n    marker=dict(\n        sizemode = 'area',\n        sizeref = 1,\n        size= 10 ,\n        line = dict(width=1,color = \"white\"),\n        color = custom_colors[ty],\n        opacity = 0.7),\n)\n    figure['data'].append(data_dict)\n    \n# make frames ##\nfor year in years:\n    frame = {'data': [], 'name': str(year)}\n    for ty in types:\n        dataset_by_year = dataset[dataset['year'] == int(year)]\n        dataset_by_year_and_cont = dataset_by_year[dataset_by_year['generation'] == ty]\n\n        data_dict = dict(\n                type='scattergeo',\n                lon = dataset_by_year_and_cont['longitude'],\n                lat = dataset_by_year_and_cont['latitude'],\n                hoverinfo = 'text',\n                text = ty,\n                mode = 'markers',\n                marker=dict(\n                    sizemode = 'area',\n                    sizeref = 1,\n                    size= 10 ,\n                    line = dict(width=1,color = \"white\"),\n                    color = custom_colors[ty],\n                    opacity = 0.7),\n                name = ty\n            )\n        frame['data'].append(data_dict)\n\n    figure['frames'].append(frame)\n    slider_step = {'args': [\n        [year],\n        {'frame': {'duration': 300, 'redraw': False},\n         'mode': 'immediate',\n       'transition': {'duration': 300}}\n     ],\n     'label': year,\n     'method': 'animate'}\n    sliders_dict['steps'].append(slider_step)\n\n\nfigure[\"layout\"][\"autosize\"]= True\nfigure[\"layout\"][\"title\"] = \"Suicides of Generations\"       \n\nfigure['layout']['sliders'] = [sliders_dict]\n\niplot(figure)","934f938e":"## Population-gdp_per_capita Plot\n(it is calculated to means of suicides_100k_pop and gdp_per_capita for every country.)","a90cef42":"## We try to answer this questions\n\n* Global Suicides(per 100K)-trend over time 1985-2016\n* Global Suicides(per 100K) by Continent\n* Global Suicides(per 100k) by Gender and trend over time 1985-2016\n* Population-gdp_per_capita Plot\n* Correlation between GDP(per Capita) and suicides per 100k\n* Generation hue Gender Counter\n* Which age of people suicide a most\n* Which generation of people suicide a most","797c5a47":"## Visualization of suicides_100k_pop rate vs gdp_per_capita rate of each Country","9d8d2e56":"## Global Suicides(per 100K) by Continent","b7e7d00d":"## which generation of people suicide a most","e9ddc929":"## Global Suicides(per 100k) by Gender and trend over time 1985-2016","9bd1c558":"## Global Suicides(per 100K)-trend over time 1985-2016","c823c5db":"## Generation hue Gender Counter","57657e79":"## Extra world map using","bbbc5305":"## which age of people suicide a most","9fd76cba":"## Correlation between GDP(per Capita) and suicides per 100k","5041f879":"## get region"}}