{"cell_type":{"3af993c5":"code","9fa1b007":"code","b779b614":"code","e9870a36":"code","7c76de43":"code","db009cf9":"code","8c5a5d9d":"code","baa634d0":"code","1633e171":"code","3de0bd24":"code","da41919c":"code","e8b1347d":"code","1fa23515":"code","9708153f":"code","16a5959f":"code","c667b208":"code","67a9d013":"code","43e38ec9":"code","9b015acc":"code","8a656524":"code","8385cc5e":"code","b389cfa6":"code","faf04940":"code","b29416c6":"code","43f7c5ce":"code","8d54b960":"code","f73ef93c":"code","e0b58099":"code","f7670961":"code","3241b6dd":"code","fa235d2b":"code","24c283c0":"code","f26af92c":"code","57461722":"code","6d7be650":"code","bfa98af9":"code","4b6f6058":"markdown","a1bb72e3":"markdown","92084972":"markdown"},"source":{"3af993c5":"import pandas as pd\nimport numpy as np","9fa1b007":"# 02569","b779b614":"# time_data = pd.read_parquet('timestamp_data.parquet')\n# network_data = pd.read_parquet('network_data.parquet')\nnetwork_data = pd.read_parquet('..\/input\/dc-verizon\/network_data.parquet')","e9870a36":"network_data = network_data[network_data.UNIQUE_ID == '02569']","7c76de43":"network_data = network_data.sort_values(['TIMESTAMP'])\n# network_data['year'] = network_data.TIMESTAMP.apply(lambda x: x.year)\n# network_data['month'] = network_data.TIMESTAMP.apply(lambda x: x.month)\n# network_data['day'] = network_data.TIMESTAMP.apply(lambda x: x.day)\n# network_data['hour'] = network_data.TIMESTAMP.apply(lambda x: x.hour)\n# network_data['min'] = network_data.TIMESTAMP.apply(lambda x: x.minute)\n\nnetwork_data['year'] = network_data['TIMESTAMP'].dt.year\nnetwork_data['month'] = network_data['TIMESTAMP'].dt.month\nnetwork_data['day'] = network_data['TIMESTAMP'].dt.day\nnetwork_data['hour'] = network_data['TIMESTAMP'].dt.hour\nnetwork_data['min'] = network_data['TIMESTAMP'].dt.minute\n","db009cf9":"# network_data.TIMESTAMP.iloc[3829].minute","8c5a5d9d":"network_data = network_data.sort_values(by = ['TIMESTAMP','index'])\nnetwork_data['TIMESTAMP'] = pd.to_datetime(network_data['TIMESTAMP'])\nnetwork_data\n","baa634d0":"#each day should have 24*4 = 96 observations so there must be missing values\ntemp = pd.DataFrame(network_data.groupby(['month','day']).size(), columns=['count'])\ntemp[temp['count'] != 96]","1633e171":"start = pd.to_datetime('2021-06-01 00:00:00')\nend = pd.to_datetime('2021-09-30 23:45:00')\ndates = pd.date_range(start=start, end=end, freq='15Min')\ndates_df = pd.DataFrame(dates, columns=['TIMESTAMP'])\ndates_df['TIMESTAMP'] = pd.to_datetime(dates_df['TIMESTAMP'])","3de0bd24":"# network_data.columns ","da41919c":"all_times = dates_df.merge(network_data[['TIMESTAMP', 'ATTRIBUTE_B_IN', 'ATTRIBUTE_B_OUT',\n       'ATTRIBUTE_D_IN', 'ATTRIBUTE_D_OUT', 'ATTRIBUTE_E_IN',\n       'ATTRIBUTE_E_OUT', 'ATTRIBUTE_U_IN', 'ATTRIBUTE_U_OUT']], on = 'TIMESTAMP', how = 'left').drop_duplicates(subset=['TIMESTAMP']) \nfor i in all_times.columns:\n    all_times[i] = all_times[i].bfill()","e8b1347d":"#preprocess the data so we can predict 24-hour forward\nX = all_times[:-96]\nY = all_times[96:]\n#split the data into train and test\nsplit_index1 = int(len(X)*0.7)\nsplit_index2 = int(len(X)*0.9)\nX_train24 = X[:split_index1]\nY_train24 = Y[:split_index1]\n#use these to test the performance of the model\nX_val24 = X[split_index1:split_index2]\nY_val24 = Y[split_index1:split_index2]\n\n#do not touch yet\nX_test24 = X[split_index2:]\nY_test24 = Y[split_index2:]\n#48-hour forward\nX = all_times[:-192]\nY = all_times[192:]\n#split the data into train and test\nsplit_index3 = int(len(X)*0.7)\nsplit_index4 = int(len(X)*0.9)\nX_train48 = X[:split_index3]\nY_train48 = Y[:split_index3]\n#use these to test the performance of the model\nX_val48 = X[split_index3:split_index4]\nY_val48 = Y[split_index3:split_index4]\n\n#do not touch yet\nX_test48 = X[split_index4:]\nY_test48 = Y[split_index4:]","1fa23515":"Y_test48","9708153f":"!pip install xgboost","16a5959f":"Y","c667b208":"X.columns","67a9d013":"# feature = ['ATTRIBUTE_B_IN', 'ATTRIBUTE_B_OUT', 'ATTRIBUTE_D_IN',\n#        'ATTRIBUTE_D_OUT', 'ATTRIBUTE_E_IN', 'ATTRIBUTE_E_OUT',\n#        'ATTRIBUTE_U_IN', 'ATTRIBUTE_U_OUT']\nfeature = ['ATTRIBUTE_B_IN']\ntarget = ['ATTRIBUTE_B_IN']\n\nX_train_feature24 = pd.DataFrame(X_train24[feature])\nY_train_feature24 = Y_train24[target]\nX_val_feature24 = pd.DataFrame(X_test24[feature])\nY_val_feature24 = Y_test24[target]\nX_train_feature48 = pd.DataFrame(X_train48[feature])\nY_train_feature48 = Y_train48[target]\nX_val_feature48 = pd.DataFrame(X_test48[feature])\nY_val_feature48 = Y_test48[target]\n\ndisplay(X_train_feature48)\n\ndisplay(X_val_feature48)\n\n\n# feature = ['ATTRIBUTE_B_IN']\n\n# X_train_feature24 = pd.DataFrame(X_train24[feature])\n# Y_train_feature24 = Y_train24[feature]\n# X_val_feature24 = pd.DataFrame(X_test24[feature])\n# Y_val_feature24 = Y_test24[feature]\n# X_train_feature48 = pd.DataFrame(X_train48[feature])\n# Y_train_feature48 = Y_train48[feature]\n# X_val_feature48 = pd.DataFrame(X_test48[feature])\n# Y_val_feature48 = Y_test48[feature]","43e38ec9":"#use seseriessplit to do\nfrom sklearn.model_selection import TimeSeriesSplit\n# from sklearn.metrics import mean_absolute_percentage_error\nfrom sklearn.model_selection import GridSearchCV\nimport xgboost as xgb\nxgbmodel = xgb.XGBRegressor(seed = 20)\n","9b015acc":"# !pip install optuna","8a656524":"import optuna\n\ndef mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","8385cc5e":"def objective(trial):\n    \n#     {'lambda': 0.0019501710521922328,\n#  'alpha': 7.709568123756457,\n#  'colsample_bytree': 0.5,\n#  'subsample': 1.0,\n#  'learning_rate': 0.008,\n#  'n_estimators': 150,\n#  'max_depth': 5,\n#  'min_child_weight': 270}\n    \n#  {'lambda': 0.12979130496807778,\n#  'alpha': 9.086417789374376,\n#  'colsample_bytree': 0.5,\n#  'subsample': 0.7,\n#  'learning_rate': 0.008,\n#  'n_estimators': 150,\n#  'max_depth': 5,\n#  'min_child_weight': 84}   \n    \n    \n#     param = {\n#         'tree_method':'gpu_hist',  # Use GPU acceleration\n#         'lambda': trial.suggest_uniform(\n#             'lambda', 0.05, 0.2\n#         ),\n#         'alpha': trial.suggest_uniform(\n#             'alpha', 10,15\n#         ),\n#         'colsample_bytree': trial.suggest_categorical(\n#             'colsample_bytree', [0.2,0.3,0.4,0.5,0.6]\n#         ),\n#         'subsample': trial.suggest_categorical(\n#             'subsample', [0.6,0.7,0.8,0.9,1.0]\n#         ),\n#         'learning_rate': trial.suggest_categorical(\n#             'learning_rate', [0.006,0.007,0.008, 0.009,0.01,0.011,0.012]\n#         ),\n#         'n_estimators': trial.suggest_categorical(\n#             \"n_estimators\", [100, 125, 150, 175,200]\n#         ),\n#         'max_depth': trial.suggest_categorical(\n#             'max_depth', [3,4,5,6,7,9]\n#         ),\n#         'random_state': 42,\n#         'min_child_weight': trial.suggest_int(\n#             'min_child_weight', 1, 300\n#         ),\n#     }\n    \n    \n    \n    \n    param = {\n        'tree_method':'gpu_hist',  # Use GPU acceleration\n        'lambda': trial.suggest_loguniform(\n            'lambda', 1e-3, 10.0\n        ),\n        'alpha': trial.suggest_loguniform(\n            'alpha', 1e-3, 10.0\n        ),\n        'colsample_bytree': trial.suggest_categorical(\n            'colsample_bytree', [0.5,0.6,0.7,0.8,0.9,1.0]\n        ),\n        'subsample': trial.suggest_categorical(\n            'subsample', [0.6,0.7,0.8,1.0]\n        ),\n        'learning_rate': trial.suggest_categorical(\n            'learning_rate', [0.008,0.009,0.01,0.012,0.014,0.016,0.018, 0.02]\n        ),\n        'n_estimators': trial.suggest_categorical(\n            \"n_estimators\", [150, 200, 300, 3000]\n        ),\n        'max_depth': trial.suggest_categorical(\n            'max_depth', [4,5,7,9,11,13,15,17]\n        ),\n        'random_state': 42,\n        'min_child_weight': trial.suggest_int(\n            'min_child_weight', 1, 300\n        ),\n    }\n\n\n\n    model = xgb.XGBRegressor(**param)  \n    \n    model.fit(X_train_feature24[:-1500],Y_train_feature24[:-1500],eval_set=[(X_train_feature24[-1500:],Y_train_feature24[-1500:])],early_stopping_rounds=100,verbose=False)\n    \n    preds = model.predict(X_val_feature24)\n    \n    mae = mean_absolute_percentage_error(Y_val_feature24, preds)\n    \n    return mae","b389cfa6":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=100)","faf04940":"study.best_trial","b29416c6":"best_params = study.best_params","43f7c5ce":"best_params = {'lambda': 2.2967867291878163,\n 'alpha': 1.9474727056304415,\n 'colsample_bytree': 0.8,\n 'subsample': 0.7,\n 'learning_rate': 0.014,\n 'n_estimators': 300,\n 'max_depth': 4,\n 'min_child_weight': 11}","8d54b960":"clf = xgb.XGBRegressor(**(best_params))","f73ef93c":"clf.fit(X_train_feature24,Y_train_feature24)","e0b58099":"pred_24 = clf.predict(X_val_feature24)","f7670961":"len(pred_24)","3241b6dd":"import matplotlib.pyplot as plt","fa235d2b":"plt.plot(range(len(pred_24)),pred_24)\nplt.plot(range(len(pred_24)),Y_val_feature24)\nplt.xlabel('Time(15-minute interval)')\nplt.ylabel('ATTRIBUTE_B_IN')\nplt.title('24 hour prediction')\nplt.savefig('24hour_xgboost.jpeg')","24c283c0":"def objective(trial):\n    param = {\n        'tree_method':'gpu_hist',  # Use GPU acceleration\n        'lambda': trial.suggest_loguniform(\n            'lambda', 1e-3, 10.0\n        ),\n        'alpha': trial.suggest_loguniform(\n            'alpha', 1e-3, 10.0\n        ),\n        'colsample_bytree': trial.suggest_categorical(\n            'colsample_bytree', [0.5,0.6,0.7,0.8,0.9,1.0]\n        ),\n        'subsample': trial.suggest_categorical(\n            'subsample', [0.6,0.7,0.8,1.0]\n        ),\n        'learning_rate': trial.suggest_categorical(\n            'learning_rate', [0.008,0.009,0.01,0.012,0.014,0.016,0.018, 0.02]\n        ),\n        'n_estimators': trial.suggest_categorical(\n            \"n_estimators\", [150, 200, 300, 3000]\n        ),\n        'max_depth': trial.suggest_categorical(\n            'max_depth', [4,5,7,9,11,13,15,17]\n        ),\n        'random_state': 42,\n        'min_child_weight': trial.suggest_int(\n            'min_child_weight', 1, 300\n        ),\n    }\n\n\n\n    model = xgb.XGBRegressor(**param)  \n    \n    model.fit(X_train_feature48[:-1500],Y_train_feature48[:-1500],eval_set=[(X_train_feature48[-1500:],Y_train_feature48[-1500:])],early_stopping_rounds=100,verbose=False)\n    \n    preds = model.predict(X_val_feature48)\n    \n    mae = mean_absolute_percentage_error(Y_val_feature48, preds)\n    \n    return mae","f26af92c":"study2 = optuna.create_study(direction='minimize')\nstudy2.optimize(objective, n_trials=100)","57461722":"best_params2 = study2.best_params","6d7be650":"clf = xgb.XGBRegressor(**(best_params2))\nclf.fit(X_train_feature48,Y_train_feature48)\npred_48 = clf.predict(X_val_feature48)","bfa98af9":"plt.plot(range(len(pred_48)),pred_48)\nplt.plot(range(len(pred_48)),Y_val_feature48)\nplt.xlabel('Time(15-minute interval)')\nplt.ylabel('ATTRIBUTE_B_IN')\nplt.title('48 hour prediction')\nplt.savefig('48hour_xgboost.jpeg')","4b6f6058":"# 48 hour prediction","a1bb72e3":"<a style='text-decoration:none;line-height:16px;display:flex;color:#5B5B62;padding:10px;justify-content:end;' href='https:\/\/deepnote.com?utm_source=created-in-deepnote-cell&projectId=a2610171-8585-424f-8353-cb2055f67e09' target=\"_blank\">\n<img alt='Created in deepnote.com' style='display:inline;max-height:16px;margin:0px;margin-right:7.5px;' src='data:image\/svg+xml;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB3aWR0aD0iODBweCIgaGVpZ2h0PSI4MHB4IiB2aWV3Qm94PSIwIDAgODAgODAiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI+CiAgICA8IS0tIEdlbmVyYXRvcjogU2tldGNoIDU0LjEgKDc2NDkwKSAtIGh0dHBzOi8vc2tldGNoYXBwLmNvbSAtLT4KICAgIDx0aXRsZT5Hcm91cCAzPC90aXRsZT4KICAgIDxkZXNjPkNyZWF0ZWQgd2l0aCBTa2V0Y2guPC9kZXNjPgogICAgPGcgaWQ9IkxhbmRpbmciIHN0cm9rZT0ibm9uZSIgc3Ryb2tlLXdpZHRoPSIxIiBmaWxsPSJub25lIiBmaWxsLXJ1bGU9ImV2ZW5vZGQiPgogICAgICAgIDxnIGlkPSJBcnRib2FyZCIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTEyMzUuMDAwMDAwLCAtNzkuMDAwMDAwKSI+CiAgICAgICAgICAgIDxnIGlkPSJHcm91cC0zIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgxMjM1LjAwMDAwMCwgNzkuMDAwMDAwKSI+CiAgICAgICAgICAgICAgICA8cG9seWdvbiBpZD0iUGF0aC0yMCIgZmlsbD0iIzAyNjVCNCIgcG9pbnRzPSIyLjM3NjIzNzYyIDgwIDM4LjA0NzY2NjcgODAgNTcuODIxNzgyMiA3My44MDU3NTkyIDU3LjgyMTc4MjIgMzIuNzU5MjczOSAzOS4xNDAyMjc4IDMxLjY4MzE2ODMiPjwvcG9seWdvbj4KICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik0zNS4wMDc3MTgsODAgQzQyLjkwNjIwMDcsNzYuNDU0OTM1OCA0Ny41NjQ5MTY3LDcxLjU0MjI2NzEgNDguOTgzODY2LDY1LjI2MTk5MzkgQzUxLjExMjI4OTksNTUuODQxNTg0MiA0MS42NzcxNzk1LDQ5LjIxMjIyODQgMjUuNjIzOTg0Niw0OS4yMTIyMjg0IEMyNS40ODQ5Mjg5LDQ5LjEyNjg0NDggMjkuODI2MTI5Niw0My4yODM4MjQ4IDM4LjY0NzU4NjksMzEuNjgzMTY4MyBMNzIuODcxMjg3MSwzMi41NTQ0MjUgTDY1LjI4MDk3Myw2Ny42NzYzNDIxIEw1MS4xMTIyODk5LDc3LjM3NjE0NCBMMzUuMDA3NzE4LDgwIFoiIGlkPSJQYXRoLTIyIiBmaWxsPSIjMDAyODY4Ij48L3BhdGg+CiAgICAgICAgICAgICAgICA8cGF0aCBkPSJNMCwzNy43MzA0NDA1IEwyNy4xMTQ1MzcsMC4yNTcxMTE0MzYgQzYyLjM3MTUxMjMsLTEuOTkwNzE3MDEgODAsMTAuNTAwMzkyNyA4MCwzNy43MzA0NDA1IEM4MCw2NC45NjA0ODgyIDY0Ljc3NjUwMzgsNzkuMDUwMzQxNCAzNC4zMjk1MTEzLDgwIEM0Ny4wNTUzNDg5LDc3LjU2NzA4MDggNTMuNDE4MjY3Nyw3MC4zMTM2MTAzIDUzLjQxODI2NzcsNTguMjM5NTg4NSBDNTMuNDE4MjY3Nyw0MC4xMjg1NTU3IDM2LjMwMzk1NDQsMzcuNzMwNDQwNSAyNS4yMjc0MTcsMzcuNzMwNDQwNSBDMTcuODQzMDU4NiwzNy43MzA0NDA1IDkuNDMzOTE5NjYsMzcuNzMwNDQwNSAwLDM3LjczMDQ0MDUgWiIgaWQ9IlBhdGgtMTkiIGZpbGw9IiMzNzkzRUYiPjwvcGF0aD4KICAgICAgICAgICAgPC9nPgogICAgICAgIDwvZz4KICAgIDwvZz4KPC9zdmc+' > <\/img>\nCreated in <span style='font-weight:600;margin-left:4px;'>Deepnote<\/span><\/a>","92084972":"# 24 hour prediction"}}