{"cell_type":{"bf784dda":"code","555b0a93":"code","1914354c":"code","4982bb0e":"code","721bc7f2":"code","089b28bc":"code","3d0c7965":"code","47a6a934":"code","d80941f0":"code","0ed65b3a":"code","9c845f72":"code","fd365053":"code","b48490e6":"code","d16596ce":"code","9d4f1893":"code","a64315d5":"code","10051056":"code","875a3fce":"code","9ebbf4d9":"code","03ea488e":"code","cefc0557":"code","4435ffa3":"code","0d2ca964":"code","05be4618":"code","56dbdb29":"code","74052003":"code","03340b1b":"code","d54c7ff6":"code","65081e9f":"code","76228451":"code","8c241145":"code","b4c8dc28":"code","b72ff9b7":"code","e8c4d48c":"code","547968d2":"code","c8a05a2e":"code","3318074c":"code","c4d22887":"code","d40dc4a9":"code","b4f6181c":"code","9cee99de":"code","3d1ba409":"code","e03a1507":"code","0e3223e7":"code","11042ea4":"code","8ad23069":"code","b53ab411":"code","b23f985c":"code","a7451b59":"code","82332766":"code","c53dadeb":"code","1e7d691a":"code","38d51f15":"code","2a7b60e4":"code","9bab2836":"code","7125f5c7":"code","ebc11837":"code","10b5208f":"code","11f450bc":"code","3d1b7d55":"code","fb98b064":"markdown","b2477a4b":"markdown","b60830af":"markdown","d8ff918a":"markdown","c75f3d8b":"markdown","0456db02":"markdown","5504b325":"markdown","34c7dd8c":"markdown","aaeced67":"markdown","a872c634":"markdown","4b976c92":"markdown"},"source":{"bf784dda":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.dates as md\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\nimport datetime as dt\nimport time\nimport os\nprint(os.listdir(\"..\/input\"))","555b0a93":"def parseTimeStamp (timestamp):    \n    return dt.datetime.fromtimestamp(np.int64(timestamp))","1914354c":"data = pd.read_csv('..\/input\/bitstampUSD_1-min_data_2012-01-01_to_2018-06-27.csv', parse_dates=[0], date_parser=parseTimeStamp)","4982bb0e":"data = data.rename(columns = {'Volume_(BTC)':'VolumeBTC', 'Volume_(Currency)' : 'VolumeCurrency', 'Weighted_Price' : 'WeightedPrice' })","721bc7f2":"data['Year'] = years = [x.year for x in data.Timestamp]\ndata['Month'] = years = [x.month for x in data.Timestamp]","089b28bc":"# adjusting VolumeBTC threshold\nthreshold = sum(data.VolumeBTC)\/len(data.VolumeBTC)\nprint('BTC Volume Threshold is : ', threshold)\ndata[\"VolumeLevel\"] = [\"high\" if i > threshold else \"low\" for i in data.VolumeBTC]\ndata.loc[:10,[\"VolumeLevel\",\"VolumeBTC\"]]","3d0c7965":"# rows and column counts\ndata.shape","47a6a934":"# all data columns\ndata.columns","d80941f0":"# info\ndata.info()","0ed65b3a":"data[\"VolumeLevel\"].value_counts(dropna = False)\n# There are no NaN values\n# Returns nothing because we drop nan values\nassert  data['VolumeLevel'].notnull().all() \nassert data.Month.dtypes == np.int","9c845f72":"data.head(10)","fd365053":"data.tail(10)","b48490e6":"# VolumeLevel frequency\nprint(data['VolumeLevel'].value_counts(dropna = False))","d16596ce":"# tidy data\nnew_data = data.tail(10)\nnew_data","9d4f1893":"# melted data\nmelted = pd.melt(frame = new_data, id_vars = 'Timestamp', value_vars= ['WeightedPrice','VolumeLevel'])\nmelted","a64315d5":"# pivot example\nmelted.pivot(index = 'Timestamp', columns = 'variable',values='value')","10051056":"# concatenating example\n# axis = 0 : adds dataframes in row - concat row\ndata1 = data.head()\ndata2 = data.tail()\nconc_data_row = pd.concat([data1, data2], axis = 0, ignore_index = True) \nconc_data_row","875a3fce":"# axis = 1 : adds dataframes in column - concat column\ndata1 = data['WeightedPrice'].head(10)\ndata2 = data['VolumeBTC'].head(10)\nconc_data_col = pd.concat([data1, data2], axis = 1) \nconc_data_col","9ebbf4d9":"data.dtypes","03ea488e":"data['Year'] = data['Year'].astype('float')\ndata.dtypes","cefc0557":"data.describe()","4435ffa3":"data.boxplot(column='VolumeBTC',by = 'Year', figsize=(10,10))","0d2ca964":"data.corr()","05be4618":"# correlation map for bitcoin data\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","56dbdb29":"# subplots\ndata_new = data.loc[:,[\"Open\",\"Close\",\"High\", \"Low\"]]\ndata_new.plot(subplots = True, figsize=(10,10))\nplt.show()","74052003":"# scatter plot  \ndata.plot(kind = \"scatter\",x = \"WeightedPrice\", y = \"VolumeBTC\", figsize=(10,10))\nplt.show()","03340b1b":"# histogram\ndata_new.plot(kind = \"hist\", y = \"High\",bins = 50, range= (0, 250), normed = True, figsize=(10,10))","d54c7ff6":"# histogram cumulative and non cumulative sample\nfig, axes = plt.subplots(nrows = 2 ,ncols = 1)\ndata_new.plot(kind = \"hist\", y = \"High\", bins = 50, range = (0, 250), normed = True, ax = axes[0], figsize=(10,10))\ndata_new.plot(kind = \"hist\", y = \"High\", bins = 50, range = (0, 250), normed = True, ax = axes[1], cumulative = True, figsize=(10,10))\nplt.savefig('graph.png')\nplt","65081e9f":"data_head = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata_head[\"date\"] = datetime_object\n# make date as index\ndata_head = data_head.set_index(\"date\")\ndata_head ","76228451":"# select according to date index\nprint(data_head.loc[\"1993-03-16\"])\nprint(data_head.loc[\"1992-03-10\":\"1993-03-16\"])","8c241145":"# data2 year resample\ndata_head.resample(\"A\").mean()","b4c8dc28":"# data2 month resample\ndata_head.resample(\"M\").mean()","b72ff9b7":"# interpolete from first value\ndata_head.resample(\"M\").first().interpolate(\"linear\")","e8c4d48c":"# interpolate with mean()\ndata_head.resample(\"M\").mean().interpolate(\"linear\")","547968d2":"# indexing examples\ndata_head = data.head(20)\ndata_head[[\"Open\",\"Close\"]]\n#data_head.Open\n#data_head[\"Open\"][1]\n#data_head.loc[1,[\"Open\"]]\n#data_head.Open[2]","c8a05a2e":"# slicing examples\nprint(type(data[\"Open\"]))     # series\nprint(type(data[[\"Open\"]]))   # data frames","3318074c":"data.loc[1:10,\"Open\":\"Close\"] # from column to column\n#data.loc[10:1:-1, \"Open\" : \"Close\"] # reverse slice\n#data.loc[1:10,\"Open\":] #a column to end","c4d22887":"# filter examples\nfirst_filter = data.Open > 10000\nsecond_filter = data.VolumeBTC > 400\ndata[first_filter & second_filter]\n#data.Open[data.VolumeBTC > 400]","d40dc4a9":"# function example\ndata_multiplier = data.head()\ndef multiplier(x):\n    return x*2\ndata_multiplier.Open.apply(multiplier)\n#data_multiplier.Open.apply(lambda n : n\/2) same results as above","b4f6181c":"# Defining column using other columns\ndata[\"openminusclose\"] = data.Open - data.Close\ndata.head()","9cee99de":"# indexing\nprint(data.index.name)\ndata.index.name = \"new_index_name\"\ndata.head()","3d1ba409":"data.head()\ncopied_data = data.head()\n# changing index order\ncopied_data.index = range(100,600,100)\ncopied_data.head()\n\n# could be\n# data= data.set_index(\"#\")\n# also you can use \n# data.index = data[\"#\"]","e03a1507":"# hierarchical indexing\ndata_reload = pd.read_csv('..\/input\/bitstampUSD_1-min_data_2012-01-01_to_2018-06-27.csv')\ndata_reload.tail()","0e3223e7":"# setting index\ndata_reload = data_reload.set_index([\"Open\",\"Close\"]) \ndata_reload.tail(100)\n# data1.loc[\"Fire\",\"Flying\"] # howw to use indexes","11042ea4":"# pivoting\ndata_reload_head = data_reload.tail()\ndata_reload_head.pivot(index = \"Timestamp\", columns = \"Volume_(BTC)\", values=\"Weighted_Price\")","8ad23069":"data_reload_head2 = data_reload_head.set_index([\"Timestamp\",\"Weighted_Price\"])\ndata_reload_head2","b53ab411":"# level determines indexes\ndata_reload_head2.unstack(level = 0)","b23f985c":"data_reload_head2.unstack(level = 1)","a7451b59":"# change inner and outer level index position\ndata_reload_head3 = data_reload_head2.swaplevel(0,1)\ndata_reload_head3","82332766":"data_reload_head","c53dadeb":"#data_reload_head.pivot(index = \"Timestamp\", columns = \"Volume_(BTC)\", values=\"Weighted_Price\")\npd.melt(data_reload_head,id_vars=\"Timestamp\",value_vars=[\"Volume_(BTC)\",\"Weighted_Price\"])","1e7d691a":"# grouping\ndata_reload_head.groupby(\"Timestamp\").mean()   # mean is aggregation \/ reduction method","38d51f15":"data_reload_head.groupby(\"High\").High.max()","2a7b60e4":"data_reload_head.groupby(\"Open\")[[\"High\",\"Low\"]].min() ","9bab2836":"data_reload_head.info()\n# convert objects to categorical, because categorical data uses less memory, speed up operations like groupby","7125f5c7":"data.WeightedPrice.plot(kind = 'line', color = 'g',label = 'WeightedBTCPrice',linewidth=1,alpha = 1,grid = True,linestyle = '-', figsize=(10,10))\nplt.legend(loc='upper right')\nplt.xlabel('Time')\nplt.ylabel('Value')\nplt.title('WeightedBTCPrice')\nplt.show()","ebc11837":"plt.figure(figsize=(10,10))\nplt.plot(data.Year, data.VolumeBTC)\nplt.legend(loc='upper right')\nplt.xlabel('Year')\nplt.ylabel('VolumeBTC')\nplt.title('VolumeBTC during years')\nplt.show()","10b5208f":"# filtering the 2018 data\ncurrentYear = dt.datetime(2018, 1, 1, 0, 0, 0, 0)\ncurrentYearData = data[(data['Timestamp'] >= currentYear)]\ncurrentYearData.tail(10)","11f450bc":"currentYearData.VolumeBTC.plot(kind = 'line', color = 'b',label = 'VolumeBTC',linewidth=1,alpha = 0.5,grid = True,linestyle = ':', figsize=(15,10))\nplt.legend(loc='upper right')\nplt.xlabel('x axis')             \nplt.ylabel('y axis')\nplt.title('Line Plot')      \nplt.show()","3d1b7d55":"currentYearData.plot(kind='scatter', x='Month', y='High',alpha = 0.5,color = 'red', figsize=(15,10))\nplt.xlabel('Month')              \nplt.ylabel('Highest Price')\nplt.title('Month - Highest Price Scatter Plot') ","fb98b064":"**Histogram Cumulative Non-Cumulative**","b2477a4b":"# SUMMARY\nI will use bitcoin historical data for my first data science experience. Besides basic scatter and line plot examples, this work contains correlation analysis, simple functions of matplotlib, pandas, numpy etc. ","b60830af":"**Scatter sample for bitcoin highest values by months for 2018**","d8ff918a":" **Timestamp Conversion**","c75f3d8b":"**BTC Volume - line chart of 2018**","0456db02":" **WeightedBTCPrice Line Chart**","5504b325":" **Read the file**","34c7dd8c":" **Months and Years Seperation**","aaeced67":" **Rename columns**","a872c634":"**Subplots Example**","4b976c92":" **Year - VolumeBTC plot**"}}