{"cell_type":{"48d0befb":"code","bf352ad8":"code","5efc9b05":"code","35b1ea1f":"code","727a0f12":"code","9f96930f":"code","5e34c3a2":"code","32760995":"code","23986799":"code","af2ac6ae":"code","70499606":"code","52d37947":"code","7bde809b":"code","63253741":"code","e63f3e1c":"code","51f07933":"code","c72f6e0b":"code","1d931838":"code","c0f40fb0":"code","64158b1b":"code","f82d3d0f":"code","a1eb372e":"code","d2783be9":"code","6f2cca65":"code","3a386385":"code","9d78ec70":"code","fe54045d":"code","5786b2a3":"code","b43ae354":"code","4ed708e5":"code","e411e117":"code","c2226bac":"code","0f19e547":"code","3fc21f12":"code","74c855ee":"code","fcbfdbcf":"code","33a223a7":"code","5368ff51":"code","a4948972":"code","4e9fd0e0":"code","335a32cd":"code","0b45d5a4":"code","9ad84106":"code","7bdf9ff1":"code","a6ffb8bf":"code","6e299dcf":"code","a468afae":"code","03deaf37":"code","3a3d39f6":"code","5108412f":"code","7973582c":"markdown","467a093d":"markdown","22177c61":"markdown","c9caffd8":"markdown","066489f3":"markdown","a80f967c":"markdown","ae462de1":"markdown","5a56ed86":"markdown","4dab03f7":"markdown","9522dd33":"markdown","73832af3":"markdown","cfdb3846":"markdown","10d375a2":"markdown","0643778e":"markdown","2e084868":"markdown","286ecbdc":"markdown","445e1e13":"markdown"},"source":{"48d0befb":"#Import all required libraries for reading data, analysing and visualizing data\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder","bf352ad8":"#Read the training & test data\nliver_df = pd.read_csv('..\/input\/indian_liver_patient.csv')","5efc9b05":"liver_df.head()","35b1ea1f":"liver_df.info()","727a0f12":"#Describe gives statistical information about NUMERICAL columns in the dataset\nliver_df.describe(include='all')\n#We can see that there are missing values for Albumin_and_Globulin_Ratio as only 579 entries have valid values indicating 4 missing values.\n#Gender has only 2 values - Male\/Female","9f96930f":"#Which features are available in the dataset?\nliver_df.columns","5e34c3a2":"#Check for any null values\nliver_df.isnull().sum()","32760995":"sns.countplot(data=liver_df, x = 'Dataset', label='Count')\n\nLD, NLD = liver_df['Dataset'].value_counts()\nprint('Number of patients diagnosed with liver disease: ',LD)\nprint('Number of patients not diagnosed with liver disease: ',NLD)","23986799":"sns.countplot(data=liver_df, x = 'Gender', label='Count')\n\nM, F = liver_df['Gender'].value_counts()\nprint('Number of patients that are male: ',M)\nprint('Number of patients that are female: ',F)","af2ac6ae":"sns.factorplot(x=\"Age\", y=\"Gender\", hue=\"Dataset\", data=liver_df);","70499606":"liver_df[['Gender', 'Dataset','Age']].groupby(['Dataset','Gender'], as_index=False).count().sort_values(by='Dataset', ascending=False)","52d37947":"liver_df[['Gender', 'Dataset','Age']].groupby(['Dataset','Gender'], as_index=False).mean().sort_values(by='Dataset', ascending=False)","7bde809b":"g = sns.FacetGrid(liver_df, col=\"Dataset\", row=\"Gender\", margin_titles=True)\ng.map(plt.hist, \"Age\", color=\"red\")\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Disease by Gender and Age');","63253741":"g = sns.FacetGrid(liver_df, col=\"Gender\", row=\"Dataset\", margin_titles=True)\ng.map(plt.scatter,\"Direct_Bilirubin\", \"Total_Bilirubin\", edgecolor=\"w\")\nplt.subplots_adjust(top=0.9)","e63f3e1c":"sns.jointplot(\"Total_Bilirubin\", \"Direct_Bilirubin\", data=liver_df, kind=\"reg\")","51f07933":"g = sns.FacetGrid(liver_df, col=\"Gender\", row=\"Dataset\", margin_titles=True)\ng.map(plt.scatter,\"Aspartate_Aminotransferase\", \"Alamine_Aminotransferase\",  edgecolor=\"w\")\nplt.subplots_adjust(top=0.9)","c72f6e0b":"sns.jointplot(\"Aspartate_Aminotransferase\", \"Alamine_Aminotransferase\", data=liver_df, kind=\"reg\")","1d931838":"g = sns.FacetGrid(liver_df, col=\"Gender\", row=\"Dataset\", margin_titles=True)\ng.map(plt.scatter,\"Alkaline_Phosphotase\", \"Alamine_Aminotransferase\",  edgecolor=\"w\")\nplt.subplots_adjust(top=0.9)","c0f40fb0":"sns.jointplot(\"Alkaline_Phosphotase\", \"Alamine_Aminotransferase\", data=liver_df, kind=\"reg\")","64158b1b":"g = sns.FacetGrid(liver_df, col=\"Gender\", row=\"Dataset\", margin_titles=True)\ng.map(plt.scatter,\"Total_Protiens\", \"Albumin\",  edgecolor=\"w\")\nplt.subplots_adjust(top=0.9)","f82d3d0f":"sns.jointplot(\"Total_Protiens\", \"Albumin\", data=liver_df, kind=\"reg\")","a1eb372e":"g = sns.FacetGrid(liver_df, col=\"Gender\", row=\"Dataset\", margin_titles=True)\ng.map(plt.scatter,\"Albumin\", \"Albumin_and_Globulin_Ratio\",  edgecolor=\"w\")\nplt.subplots_adjust(top=0.9)","d2783be9":"sns.jointplot(\"Albumin_and_Globulin_Ratio\", \"Albumin\", data=liver_df, kind=\"reg\")","6f2cca65":"g = sns.FacetGrid(liver_df, col=\"Gender\", row=\"Dataset\", margin_titles=True)\ng.map(plt.scatter,\"Albumin_and_Globulin_Ratio\", \"Total_Protiens\",  edgecolor=\"w\")\nplt.subplots_adjust(top=0.9)","3a386385":"liver_df.head(3)","9d78ec70":"pd.get_dummies(liver_df['Gender'], prefix = 'Gender').head()","fe54045d":"liver_df = pd.concat([liver_df,pd.get_dummies(liver_df['Gender'], prefix = 'Gender')], axis=1)","5786b2a3":"liver_df.head()","b43ae354":"liver_df.describe()","4ed708e5":"liver_df[liver_df['Albumin_and_Globulin_Ratio'].isnull()]","e411e117":"liver_df[\"Albumin_and_Globulin_Ratio\"] = liver_df.Albumin_and_Globulin_Ratio.fillna(liver_df['Albumin_and_Globulin_Ratio'].mean())","c2226bac":"#liver_df[liver_df['Albumin_and_Globulin_Ratio'] == 0.9470639032815201]","0f19e547":"# The input variables\/features are all the inputs except Dataset. The prediction or label is 'Dataset' that determines whether the patient has liver disease or not. \nX = liver_df.drop(['Gender','Dataset'], axis=1)\nX.head(3)","3fc21f12":"y = liver_df['Dataset'] # 1 for liver disease; 2 for no liver disease","74c855ee":"# Correlation\nliver_corr = X.corr()","fcbfdbcf":"liver_corr","33a223a7":"plt.figure(figsize=(30, 30))\nsns.heatmap(liver_corr, cbar = True,  square = True, annot=True, fmt= '.2f',annot_kws={'size': 15},\n           cmap= 'coolwarm')\nplt.title('Correlation between features');","5368ff51":"#The above correlation also indicates the following correlation\n# Total_Protiens & Albumin\n# Alamine_Aminotransferase & Aspartate_Aminotransferase\n# Direct_Bilirubin & Total_Bilirubin\n# There is some correlation between Albumin_and_Globulin_Ratio and Albumin. But its not as high as Total_Protiens & Albumin","a4948972":"# Importing modules\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, BaggingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier","4e9fd0e0":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)\nprint (X_train.shape)\nprint (y_train.shape)\nprint (X_test.shape)\nprint (y_test.shape)","335a32cd":"#2) Logistic Regression\n# Create logistic regression object\nlogreg = LogisticRegression()\n# Train the model using the training sets and check score\nlogreg.fit(X_train, y_train)\n#Predict Output\nlog_predicted= logreg.predict(X_test)\n\nlogreg_score = round(logreg.score(X_train, y_train) * 100, 2)\nlogreg_score_test = round(logreg.score(X_test, y_test) * 100, 2)\n#Equation coefficient and Intercept\nprint('Logistic Regression Training Score: \\n', logreg_score)\nprint('Logistic Regression Test Score: \\n', logreg_score_test)\nprint('Coefficient: \\n', logreg.coef_)\nprint('Intercept: \\n', logreg.intercept_)\nprint('Accuracy: \\n', accuracy_score(y_test,log_predicted))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test,log_predicted))\nprint('Classification Report: \\n', classification_report(y_test,log_predicted))\n\nsns.heatmap(confusion_matrix(y_test,log_predicted),annot=True,fmt=\"d\")\n","0b45d5a4":"coeff_df = pd.DataFrame(X.columns)\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\npd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","9ad84106":"# Gaussian Naive Bayes\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\n#Predict Output\ngauss_predicted = gaussian.predict(X_test)\n\ngauss_score = round(gaussian.score(X_train, y_train) * 100, 2)\ngauss_score_test = round(gaussian.score(X_test, y_test) * 100, 2)\nprint('Gaussian Score: \\n', gauss_score)\nprint('Gaussian Test Score: \\n', gauss_score_test)\nprint('Accuracy: \\n', accuracy_score(y_test, gauss_predicted))\nprint(confusion_matrix(y_test,gauss_predicted))\nprint(classification_report(y_test,gauss_predicted))\n\nsns.heatmap(confusion_matrix(y_test,gauss_predicted),annot=True,fmt=\"d\")","7bdf9ff1":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\n#Predict Output\nrf_predicted = random_forest.predict(X_test)\n\nrandom_forest_score = round(random_forest.score(X_train, y_train) * 100, 2)\nrandom_forest_score_test = round(random_forest.score(X_test, y_test) * 100, 2)\nprint('Random Forest Score: \\n', random_forest_score)\nprint('Random Forest Test Score: \\n', random_forest_score_test)\nprint('Accuracy: \\n', accuracy_score(y_test,rf_predicted))\nprint(confusion_matrix(y_test,rf_predicted))\nprint(classification_report(y_test,rf_predicted))","a6ffb8bf":"###Model evaluation\n#We can now rank our evaluation of all the models to choose the best one for our problem. \nmodels = pd.DataFrame({\n    'Model': [ 'Logistic Regression', 'Gaussian Naive Bayes','Random Forest'],\n    'Score': [ logreg_score, gauss_score, random_forest_score],\n    'Test Score': [ logreg_score_test, gauss_score_test, random_forest_score_test]})\nmodels.sort_values(by='Test Score', ascending=False)","6e299dcf":"linear = linear_model.LinearRegression()\n# Train the model using the training sets and check score\nlinear.fit(X_train, y_train)\n#Predict Output\nlin_predicted = linear.predict(X_test)\n\nlinear_score = round(linear.score(X_train, y_train) * 100, 2)\nlinear_score_test = round(linear.score(X_test, y_test) * 100, 2)\n#Equation coefficient and Intercept\nprint('Linear Regression Score: \\n', linear_score)\nprint('Linear Regression Test Score: \\n', linear_score_test)\nprint('Coefficient: \\n', linear.coef_)\nprint('Intercept: \\n', linear.intercept_)\n\nfrom sklearn.feature_selection import RFE\nrfe =RFE(linear, n_features_to_select=3)\nrfe.fit(X,y)","a468afae":"for i in range(len(rfe.ranking_)):\n    if rfe.ranking_[i] == 1:\n        print(X.columns.values[i])","03deaf37":"#I'm considering seven important features based on recursive feature elimination\n#finX = liver_df[['Age','Direct_Bilirubin','Total_Protiens','Albumin', 'Gender_Female', 'Gender_Male']]\nfinX = liver_df[['Total_Protiens','Albumin', 'Gender_Male']]\nfinX.head(4)","3a3d39f6":"X_train, X_test, y_train, y_test = train_test_split(finX, y, test_size=0.30, random_state=101)","5108412f":"#Logistic Regression\nlogreg = LogisticRegression()\n# Train the model using the training sets and check score\nlogreg.fit(X_train, y_train)\n#Predict Output\nlog_predicted= logreg.predict(X_test)\n\nlogreg_score = round(logreg.score(X_train, y_train) * 100, 2)\nlogreg_score_test = round(logreg.score(X_test, y_test) * 100, 2)\n#Equation coefficient and Intercept\nprint('Logistic Regression Training Score: \\n', logreg_score)\nprint('Logistic Regression Test Score: \\n', logreg_score_test)\nprint('Coefficient: \\n', logreg.coef_)\nprint('Intercept: \\n', logreg.intercept_)\nprint('Accuracy: \\n', accuracy_score(y_test,log_predicted))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test,log_predicted))\nprint('Classification Report: \\n', classification_report(y_test,log_predicted))\n\nsns.heatmap(confusion_matrix(y_test,log_predicted),annot=True,fmt=\"d\")\n","7973582c":"# Data Analysis","467a093d":"# Data Visualization","22177c61":"There is linear relationship between Total_Protiens and Albumin and the gender. We have the possibility of removing one of this feature.","c9caffd8":"# Analysis and Prediction-Indian Liver Patients.","066489f3":"Age seems to be a factor for liver disease for both male and female genders","a80f967c":"The dataset was downloaded from the UCI ML Repository.\n\nHere are the steps I'm going to perform:  \n1) Data Analysis: This is in general looking at the data to figure out whats going on. Inspect the data: Check whether there is any missing data, irrelevant data and do a cleanup.  \n2) Data Visualization:   \n3) Feature selection.  \n4) Search for any trends, relations & correlations.  \n5) Draw an inference and predict whether the patient can be identified to be having liver disease or not  ","ae462de1":"The only data that is null is the Albumin_and_Globulin_Ratio - Only 4 rows are null. Lets see whether this is an important feature    ","5a56ed86":"Convert categorical variable \"Gender\" to indicator variables","4dab03f7":"No linear correlation between Alkaline_Phosphotase and Alamine_Aminotransferase","9522dd33":"From the above jointplots and scatterplots, we find direct relationship between the following features:  \nDirect_Bilirubin & Total_Bilirubin  \nAspartate_Aminotransferase & Alamine_Aminotransferase  \nTotal_Protiens & Albumin  \nAlbumin_and_Globulin_Ratio & Albumin  \n\nHence, we can very well find that we can omit one of the features. I'm going to keep the follwing features:  \nTotal_Bilirubin  \nAlamine_Aminotransferase  \nTotal_Protiens  \nAlbumin_and_Globulin_Ratio  \nAlbumin  ","73832af3":"# Machine Learning","cfdb3846":"There is linear relationship between Aspartate_Aminotransferase and Alamine_Aminotransferase and the gender. We have the possibility of removing one of this feature.","10d375a2":"Here is the observation from the dataset:   \n1) Only gender is non-numeric veriable. All others are numeric.   \n2) There are 10 features and 1 output - dataset. Value 1 indicates that the patient has liver disease and 0 indicates the patient does not have liver disease.  ","0643778e":"# Observation:","2e084868":"This data set contains 416 liver patient records and 167 non liver patient records collected from North East of Andhra Pradesh, India. The \"Dataset\" column is a class label used to divide groups into liver patient (liver disease) or not (no disease). ","286ecbdc":"There seems to be direct relationship between Total_Bilirubin and Direct_Bilirubin. We have the possibility of removing one of this feature.","445e1e13":"There is linear relationship between Albumin_and_Globulin_Ratio and Albumin. We have the possibility of removing one of this feature."}}