{"cell_type":{"40a68c0c":"code","b834af00":"code","2eeabc4f":"code","02ee66b8":"code","cee5b7de":"code","57a94348":"code","14be1363":"code","f68fa073":"code","2b359c3e":"code","c11fa2ff":"code","5b79ea04":"code","8d104c8d":"code","37069fd6":"code","03825f14":"code","dec1d469":"code","bca3197e":"code","9ec52e4a":"code","59f4ee39":"code","fc13f791":"code","93c2788e":"code","a95c9f88":"code","8d783169":"code","f4e6a229":"code","2916980f":"code","cbd79dbe":"code","d1c26607":"code","765c6cf1":"code","939aa2e8":"code","9064d36d":"code","188e1611":"code","240bf2b5":"code","709bd019":"code","f68de310":"code","d1bcb036":"code","7a0cadb8":"code","0975e54d":"code","c601b5f5":"code","0b5465fd":"code","3db832d3":"code","b7096616":"code","8dafcc59":"code","bf665b17":"code","5df33323":"code","3b31c89a":"code","4f413532":"code","80535ac6":"code","4dca22ce":"code","a07be4e4":"code","8e35d57c":"code","314f48b4":"code","3b4dce4b":"code","843da303":"code","e99e8bc1":"code","0f0c9e2b":"code","ccbd32e0":"markdown","067d8aa5":"markdown","c469958b":"markdown","7d84403c":"markdown","137f2e27":"markdown","fb056da5":"markdown","3a8f6490":"markdown","ec5f287e":"markdown","5fb69914":"markdown","e4cacb60":"markdown","2f14c641":"markdown","db0ace79":"markdown","8a6716d7":"markdown","747a357d":"markdown","d5a6bb90":"markdown","f3ad486b":"markdown","5b7275b6":"markdown","36d592d9":"markdown","f2e72157":"markdown","1c050b84":"markdown","e5c49934":"markdown","9fed4bf7":"markdown","97dced93":"markdown","d5b4fa47":"markdown","fab6986a":"markdown","3796472f":"markdown","ed847d18":"markdown","19a25506":"markdown","e95400d3":"markdown","05e7c31c":"markdown","bdd46f03":"markdown","03e46515":"markdown","939a9ab2":"markdown","5cf829e0":"markdown","d83f120d":"markdown","77baf2dd":"markdown","6db9565b":"markdown","2352d1b2":"markdown","38d9ba97":"markdown","7751402e":"markdown","18d50d21":"markdown","51231821":"markdown","2c1ce47d":"markdown","57a697f3":"markdown","9e1e4748":"markdown","fc9ddbaf":"markdown","506aa127":"markdown","ec098714":"markdown","ace4ef70":"markdown","afae78ed":"markdown","8c9c518a":"markdown","459af0b8":"markdown","0f7b3f76":"markdown","4b3399a7":"markdown","c646574e":"markdown","d2a9c930":"markdown","5a89e899":"markdown","c72a973f":"markdown","fc1affc5":"markdown","c6bb4af1":"markdown","4370e174":"markdown","fdf44014":"markdown","53c3948d":"markdown","137386ba":"markdown","76ce49b5":"markdown"},"source":{"40a68c0c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', None)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b834af00":"train=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","2eeabc4f":"print(train.shape,test.shape)","02ee66b8":"train.describe()","cee5b7de":"train.info()","57a94348":"test.isnull().sum()","14be1363":"for col in ('PoolQC', 'MiscFeature', 'Alley', 'Fence','FireplaceQu','GarageType', \n            'GarageFinish', 'GarageQual', 'GarageCond','BsmtQual', 'BsmtCond', \n            'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\"MasVnrType\"):\n    train[col] = train[col].fillna('None')\n    test[col] = test[col].fillna('None')","f68fa073":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars','BsmtFinSF1', 'BsmtFinSF2', \n            'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath',\"MasVnrArea\"):\n    train[col] = train[col].fillna(0)\n    test[col] = test[col].fillna(0)\ntrain[\"LotFrontage\"] = train.groupby(\"Neighborhood\")[\"LotFrontage\"].apply(lambda x: x.fillna(x.median()))\ntest[\"LotFrontage\"] = test.groupby(\"Neighborhood\")[\"LotFrontage\"].apply(lambda x: x.fillna(x.median()))\ntrain['Electrical'] =train['Electrical'].fillna(train['Electrical'].mode()[0])","2b359c3e":"test['MSZoning'].fillna(test['MSZoning'].mode()[0],inplace=True)\ntest['SaleType'].fillna(test['SaleType'].mode()[0],inplace=True)\ntest['Utilities'].fillna(test['Utilities'].mode()[0],inplace=True)\ntest['Exterior1st'].fillna(test['Exterior1st'].mode()[0],inplace=True)\ntest['Exterior2nd'].fillna(test['Exterior2nd'].mode()[0],inplace=True)\ntest['KitchenQual'].fillna(test['KitchenQual'].mode()[0],inplace=True)\ntest['Functional'].fillna(test['Functional'].mode()[0],inplace=True)","c11fa2ff":"train['MSSubClass'] = train['MSSubClass'].astype(str)\ntrain['OverallCond'] = train['OverallCond'].astype(str)\ntrain['YrSold'] =train['YrSold'].astype(str)\ntrain['MoSold'] = train['MoSold'].astype(str)","5b79ea04":"train.isnull().sum().sum()","8d104c8d":"test.isnull().sum().sum()","37069fd6":"train['YrBltAndRemod']=train['YearBuilt']+train['YearRemodAdd']\ntrain['TotalSF']=train['TotalBsmtSF'] +train['1stFlrSF'] +train['2ndFlrSF']\n\ntrain['Total_sqr_footage'] = (train['BsmtFinSF1'] +train['BsmtFinSF2'] +train['1stFlrSF'] +train['2ndFlrSF'])\n\ntrain['Total_Bathrooms'] = (train['FullBath'] + (0.5 * train['HalfBath']) + train['BsmtFullBath'] + (0.5 * train['BsmtHalfBath']))\n\ntrain['Total_porch_sf'] = (train['OpenPorchSF'] + train['3SsnPorch'] +train['EnclosedPorch'] + train['ScreenPorch'] +train['WoodDeckSF'])\n\n\ntrain['haspool'] = train['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\ntrain['has2ndfloor'] = train['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\ntrain['hasgarage'] = train['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\ntrain['hasbsmt'] = train['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\ntrain['hasfireplace'] = train['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)","03825f14":"train['SalePrice'].hist()","dec1d469":"print(train['SalePrice'].skew())","bca3197e":"train['SalePrice']=np.log1p(train['SalePrice'])\ntrain['SalePrice'].hist()","9ec52e4a":"train['SalePrice'].skew()","59f4ee39":"import matplotlib.pyplot as plt\nimport seaborn as sns\ncorr=train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corr);","fc13f791":"cor=train.corr()['SalePrice']\ncor[cor>0.5].sort_values(ascending=False)","93c2788e":"def scatterplot(df,feature):\n    sns.scatterplot(x=feature,y='SalePrice',data=df)\n\nscatterplot(train,'GrLivArea')","a95c9f88":"train=train[train['GrLivArea']<4000]\ntrain.reset_index(drop = True, inplace = True)\nsns.scatterplot(x='GrLivArea',y='SalePrice',data=train)","8d783169":"scatterplot(train,'GarageArea')","f4e6a229":"train=train[train['GarageArea']<1220]\ntrain.reset_index(drop = True, inplace = True)\nscatterplot(train,'GarageArea')","2916980f":"scatterplot(train,'TotalBsmtSF')","cbd79dbe":"train=train[train['TotalBsmtSF']<2800]\ntrain.reset_index(drop = True, inplace = True)\nscatterplot(train,'TotalBsmtSF')","d1c26607":"scatterplot(train,'1stFlrSF')","765c6cf1":"fea=['OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF','FullBath','TotRmsAbvGrd','YearBuilt','YearRemodAdd']\nsns.heatmap(train[fea].corr(),annot=True)","939aa2e8":"num_features=train.select_dtypes(include='int64' or 'float64')\nnum_features\ndiscrete_features=[feature for feature in num_features if len(train[feature].unique())<25 and feature not in ['Id']]\ncontinuous_features=[i for i in num_features if i not in discrete_features+['Id']+['SalePrice']]\n#train[continuous_features]","9064d36d":"discrete_features","188e1611":"train.groupby('OverallQual')['SalePrice'].median().plot.bar()\n","240bf2b5":"for i in continuous_features:\n    train[i].hist(bins=25)\n    plt.xlabel(i)\n    plt.ylabel('SalePrice')\n    plt.show()","709bd019":"for i in num_features:\n    if i not in('Id'):\n        print(i,\"-->\",train[i].skew())\n","f68de310":"high_skew=[]\nfor i in num_features:\n    if i not in('Id') and train[i].skew()>0.5:\n        print(i,\"-->\",train[i].skew())\n        high_skew.append(i)\n","d1bcb036":"from sklearn.preprocessing import PowerTransformer\npt=PowerTransformer()\ntrain[high_skew] =pt.fit_transform(train[high_skew])","7a0cadb8":"from scipy import stats\nimport statsmodels.api as sm \nstats.probplot(train['GrLivArea'], plot=plt)\n","0975e54d":"stats.probplot(train['SalePrice'], plot=plt)","c601b5f5":"cat_features=train.select_dtypes(include='object')\ncat_features","0b5465fd":"chart=sns.countplot(train['Neighborhood'])\nchart.set_xticklabels(chart.get_xticklabels(),rotation=90)","3db832d3":"sns.countplot(train['MSZoning'])","b7096616":"sns.boxplot(x='OverallQual',y='SalePrice',data=train)","8dafcc59":"sns.swarmplot(x='LotShape',y='SalePrice',data=train)","bf665b17":"sns.stripplot(x='LotShape',y='SalePrice',data=train)","5df33323":"sns.stripplot(x='LotShape',y='SalePrice',data=train,jitter=False)","3b31c89a":"sns.violinplot(x='LotShape',y='SalePrice',data=train)","4f413532":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n\nfor i in cols:\n    lc= LabelEncoder() \n    train[i]=lc.fit_transform(train[i])","80535ac6":"cat_features","4dca22ce":"from sklearn.preprocessing import OneHotEncoder\none=OneHotEncoder()\ncol=[i for i in cat_features if i not in('MSSubClass','OverallCond','MoSold','YrSold')]\ndummy_data=pd.get_dummies(train[col],drop_first=True)","a07be4e4":"dummy_data","8e35d57c":"train=pd.concat([train,dummy_data],axis=1)\ntrain.drop(col,axis=1,inplace=True)","314f48b4":"train","3b4dce4b":"Y=train['SalePrice']\nX=train.drop(['Id','SalePrice'],axis=1)","843da303":"from sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel\nfeature_selection= SelectFromModel(Lasso(alpha=0.005, random_state=0)) \nfeature_selection.fit(X,Y)","e99e8bc1":"selected_feat = X.columns[(feature_selection.get_support())]\nprint('total features: {}'.format((X.shape[1])))\nprint('selected features: {}'.format(len(selected_feat)))\n","0f0c9e2b":"selected_feat","ccbd32e0":"The probability plot  is a graphical technique for assessing whether or not a data set follows a given distribution such as the normal or Weibull. The data are plotted against a theoretical distribution in such a way that the points should form approximately a straight line.","067d8aa5":"Generally lasso is used for feature selection because it shrinks some of the feature slopes to zero.So we will not consider those features.","c469958b":"We can fing correlation using corr() and visualise it using seaborn heatmap.","7d84403c":"Now for 1stflrsf we are doing same thing as above,plotting scatterplot against saleprice and removing outliers.","137f2e27":"Again checking if there are any missing values exist.","fb056da5":"Replacing numerical values with 0.LotFrontage features depends on Neighborhood,so replacing missing values in lotfrontage based on median of groupby of lotfrontage and neighborhood.","3a8f6490":"Now considering only features which are having morethan 0.5 correlation with our target variable.","ec5f287e":"First select categorical features using select_dtypes().\nThere are several plots to visualise categorical plots.They are:\n     \n     \n# Categorical scatterplots:\n\n    stripplot() (with kind=\"strip\"; the default)\n\n    swarmplot() (with kind=\"swarm\")\n\n# Categorical distribution plots:\n\n    boxplot() (with kind=\"box\")\n\n    violinplot() (with kind=\"violin\")\n\n    boxenplot() (with kind=\"boxen\")\n\n# Categorical estimate plots:\n\n    pointplot() (with kind=\"point\")\n\n    barplot() (with kind=\"bar\")\n\n    countplot() (with kind=\"count\")\n","5fb69914":"Info() is used to know datatypes of all features along with count of null values.","e4cacb60":"Checking the descrete features.","2f14c641":"First i am dividing the numerical features into discrete and continuous features.","db0ace79":"# Finding correlation","8a6716d7":"Replacing the mising values with 'None' for some columns and 0 in remaining columns.Read the description file properly.","747a357d":"Finding skewness of all features using skew(). ","d5a6bb90":"Here i am using selectfrommodel with lasso by taking alpha value as 0.005","f3ad486b":"As above both train and test does not have any missing values.Next step if feature enginnering.","5b7275b6":"Replacing some of the numerical columns that are actually categorical","36d592d9":"# Countplot","f2e72157":"# Feature Encoding","1c050b84":"As shown above some independent features have more correlation amoung themselves.\nOne of the assumption of regression is that is no or less multicollinearity.If you are using linear regression you have remove one of the highly correlated features amoung the following pairs:\n                           1.GrlivArea and TotRmsAbvGrd.\n                           2.1stFlrSF and TotalBsmtSF.\n                           3.GarageArea and GarageCars.\n                           ","e5c49934":"Transforming high skewness features.We can use boxcox or power transformation.Here i used power transformation.","9fed4bf7":"# Please upvote if you like,Any valuable suggestions and corrections put it in comments,Thank you.","97dced93":"As you see the feature of not normally distributed,it is righted skewed and wecan check skewness using skew() function.","d5b4fa47":"A stripplot is basically a scatter plot where the x axis represents a categorical variable. Typical uses of a strip plot involves applying a small random jitter value to each data point such that the separation between points becomes clearer.","fab6986a":"# Advanced plots--Probplot","3796472f":"In the above probability plot,SalePrice most of the points are on the line or near to the line because it is normally distributed.","ed847d18":"# Visualising categorical features","19a25506":"First i am labelencoding some of the features and then apply onehotencoding to remaining features.","e95400d3":"As shown above the number of required features reduced from 187 to 27.","05e7c31c":"In this created some features like totalsf,totalsqrfootage by adding corresponding features and created some features like haspool,has2ndfloor by apply some function if value exist then it is 1 othervise 0.","bdd46f03":"A violin plot is a method of plotting numeric data. It is similar to a box plot, with the addition of a rotated kernel density plot on each side. Violin plots are similar to box plots, except that they also show the probability density of the data at different values, usually smoothed by a kernel density estimator.\n#          violenplot=boxplot+kdeplot","03e46515":"As shown above RL of MSZoning is having highest count followed by RM and soon.","939a9ab2":"In the above probability plot,GrivLivArea most of the points are on the line or near to the line because it is normally distributed.","5cf829e0":"Replacing some columns with their most repeated values using mode()","d83f120d":"# Feature Selection using Lasso","77baf2dd":"# Stripplot","6db9565b":"Now selecting features having more than 0.5 skewness.","2352d1b2":"# Feature Engineering","38d9ba97":"Now we are finding correlation amoung the features whose correlation is morethan 0.5 with saleprice and visualising them using seaborn heatmap.","7751402e":"# Descriptive Statistics using describe() and Info()","18d50d21":"As shown above Names of neighborhood is having highest count followed by CollgCr and soon.","51231821":"Swarmplot is like scatterplot for categorical features,as shown above most of the points of Reg are scattered between 11.4 and 12.7 saleprice.","2c1ce47d":"# Target feature","57a697f3":"# Missing values","9e1e4748":"# Swarmplot","fc9ddbaf":"Visualising those features having morethan 0.5 correlation with target feature using scatterplot against saleprice and removing outliers.","506aa127":"Transforming into normal distribution.Here we used lop1p.\nlog1p:This mathematical function helps user to calculate natural logarithmic value of x+1 where x       belongs to all the input array elements.\n      \" log1p is reverse of exp(x) \u2013 1. \"","ec098714":"# Boxplot","ace4ef70":"As show above,the target feature is now normally distributed.","afae78ed":"Now visualising descrete features using bar chart.Another types of descrete variable plots are:\n                                               1.column plot.\n                                               2.stacked column plot.\n                                               3.stacked bar plot.\n                                               4.spider plot","8c9c518a":"Now for garagearea we are doing same thing as above,plotting scatterplot against saleprice and removing outliers.","459af0b8":"The above are 27 features selected .Now you can use these 27 features for training and testing with the help of several regresssion models.","0f7b3f76":"As shown above most of the features are having high skewness,so we will remove it in nextstep.","4b3399a7":"Regression assumes that the target feature must be normally distributed.we can check this by potting histogram.","c646574e":"The below is stripplot without jitter,means there is no magnitude of the distribution. ","d2a9c930":"Now visualising continuous features and the best way is to use matplotlib histogram or seaborn distplot.","5a89e899":"# Visualising numerical Variables","c72a973f":"First diving target feature and independent features.","fc1affc5":"# Violenplot","c6bb4af1":"# Loading the data","4370e174":"# Skewness","fdf44014":"Describe method is used to get five number summary along with mean and count of features.","53c3948d":"Now for totalbsmtsf we are doing same thing as above,plotting scatterplot against saleprice and removing outliers.","137386ba":"As shown above there are some outliers where grlivarea is greaterthan 4000,removing them as shown below.","76ce49b5":"As shown above train data has 189 columns."}}