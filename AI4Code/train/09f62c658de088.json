{"cell_type":{"e611dc25":"code","02d8c3bb":"code","b217765d":"code","9976cdfb":"code","57955043":"code","5627aefa":"code","95959e0f":"code","f3d31cbc":"code","04f3bb03":"code","4af652f8":"code","6607db40":"code","f42b5c37":"code","e086254d":"code","5dee2230":"code","1b8f2a7d":"code","24114074":"code","c9a9ddb4":"code","028a4de7":"code","c7483fae":"code","0b9b7513":"code","25fbd738":"code","5922f20b":"code","0599a962":"code","49b61044":"code","62b96161":"code","b1109f44":"code","b996a106":"code","6acf82e3":"code","6da55c16":"markdown","7c35b4ff":"markdown","6a02c307":"markdown","eea8ddd7":"markdown","38186c94":"markdown"},"source":{"e611dc25":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","02d8c3bb":"import pandas as pd\nfrom random import shuffle\nimport nltk\nfrom nltk.corpus import stopwords\nimport string\nimport re","b217765d":"df = pd.read_csv(\"\/kaggle\/input\/60k-stack-overflow-questions-with-quality-rate\/data.csv\")\ndf.head()","9976cdfb":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ndf['label_enc'] = labelencoder.fit_transform(df['Y'])\ndf = df.rename(columns={\"Y\":\"label\"})\ndf = df[['Title','Body','label','label_enc']]\n\ndf.rename(columns={'label':'label_desc'},inplace=True)\ndf.rename(columns={'label_enc':'label'},inplace=True)\n# df.rename(columns={\"text\":\"sentence\"},inplace=True)\n\nstop = set(stopwords.words('english'))\npunctuation = list(string.punctuation)\nstop.update(punctuation)\n\ndef clean_text(text):\n    text = text.lower()\n    text = re.sub(r'[^(a-zA-Z)]',' ', text) # (a-zA-Z)\\s]\n    return text\n\ndf['Title'] = df['Title'].apply(clean_text)\ndf['Body'] = df['Body'].apply(clean_text)\ndf.head()","57955043":"# shuffling the dataframe\ndf = df.sample(frac = 1)\ndf.head()","5627aefa":"# lets split 5000 for test data ummm !!!\ntrain = df.iloc[:55000,:]\ntest = df.iloc[55000:,:]","95959e0f":"traintext = train[['Title','Body']].values.tolist()\ntesttext = test[['Title','Body']].values.tolist()","f3d31cbc":"import tensorflow as tf\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","04f3bb03":"import os\nimport numpy as np\nimport pandas as pd\nfrom kaggle_datasets import KaggleDatasets\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport transformers\nfrom transformers import TFAutoModel, AutoTokenizer\nfrom tqdm.notebook import tqdm\nimport plotly.express as px","4af652f8":"model = 'distilbert-base-uncased'\ntokenizer = AutoTokenizer.from_pretrained(model)","6607db40":"max_len = 300\nbatch_size = 32 * strategy.num_replicas_in_sync\n\ntrainencoded = tokenizer.batch_encode_plus(traintext,pad_to_max_length=True,max_length=max_len)\ntestencoded = tokenizer.batch_encode_plus(testtext,pad_to_max_length=True,max_length=max_len)\n\nfrom sklearn.model_selection import train_test_split","f42b5c37":"X_train,X_val,y_train,y_val = train_test_split(trainencoded['input_ids'],train['label'].values,test_size=0.2,random_state=42)\nX_test = testencoded['input_ids']","e086254d":"auto = tf.data.experimental.AUTOTUNE\ntraindataset = tf.data.Dataset.from_tensor_slices((X_train,y_train)).repeat().shuffle(2048).batch(batch_size).prefetch(auto)\nvaliddataset = (tf.data.Dataset.from_tensor_slices((X_val, y_val)).batch(batch_size).cache().prefetch(auto))\ntestdataset = (tf.data.Dataset.from_tensor_slices(X_test).batch(batch_size))","5dee2230":"with strategy.scope():\n    transformer_encoder = TFAutoModel.from_pretrained(model)\n    inputids = Input(shape=(max_len,),dtype=tf.int32, name=\"inputids\")\n    seqout = transformer_encoder(inputids)[0]\n    # Only extract the token used for classification, which is <s>\n    cls_token = seqout[:, 0, :]\n    out = Dense(3,activation='softmax')(cls_token)\n    model = Model(inputs=inputids, outputs=out)\n    model.compile(Adam(lr=1e-5), loss='sparse_categorical_crossentropy', metrics=['accuracy'])","1b8f2a7d":"from tensorflow.keras.callbacks import EarlyStopping\n\nes = EarlyStopping(\n    monitor='val_loss', min_delta=0, patience=5, verbose=0, mode='auto',\n    baseline=None, restore_best_weights=True\n)\n\ncallbacks = [es]\n\nnsteps = len(X_train)\/\/batch_size\nn_epochs = 40\n\nhistory = model.fit(traindataset,steps_per_epoch=nsteps,validation_data=validdataset,epochs=n_epochs,callbacks=callbacks)","24114074":"import plotly.express as px\n\nhist = history.history\npx.line(\n    hist, x=range(1, len(hist['loss'])+1), y=['accuracy', 'val_accuracy'], \n    title='Model Accuracy', labels={'x': 'Epoch', 'value': 'Accuracy'}\n)","c9a9ddb4":"px.line(\n    hist, x=range(1, len(hist['loss'])+1), y=['loss', 'val_loss'], \n    title='Model Loss', labels={'x': 'Epoch', 'value': 'Loss'}\n)","028a4de7":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score","c7483fae":"# PREDICTIONS ON UNSEEN TEST DATA \n\npredictions = model.predict(testdataset)\npreds = np.argmax(predictions,axis=1)\n\nytest = test['label']\nytest = np.array(ytest)\n\nprint(classification_report(ytest,preds))\nprint(\"\\n\")\nprint(confusion_matrix(ytest,preds))\nprint(\"\\n\")\nprint(accuracy_score(ytest,preds))\n\n","0b9b7513":"model = 'xlnet-base-cased'\ntokenizer = AutoTokenizer.from_pretrained(model)\n\nmax_len = 300\nbatch_size = 32 * strategy.num_replicas_in_sync\n\ntrainencoded = tokenizer.batch_encode_plus(traintext,pad_to_max_length=True,max_length=max_len)\ntestencoded = tokenizer.batch_encode_plus(testtext,pad_to_max_length=True,max_length=max_len)\n\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_val,y_train,y_val = train_test_split(trainencoded['input_ids'],train['label'].values,test_size=0.2,random_state=42)\nX_test = testencoded['input_ids']\n\n\nauto = tf.data.experimental.AUTOTUNE\ntraindataset = tf.data.Dataset.from_tensor_slices((X_train,y_train)).repeat().shuffle(2048).batch(batch_size).prefetch(auto)\nvaliddataset = (tf.data.Dataset.from_tensor_slices((X_val, y_val)).batch(batch_size).cache().prefetch(auto))\ntestdataset = (tf.data.Dataset.from_tensor_slices(X_test).batch(batch_size))\n\nwith strategy.scope():\n    transformer_encoder = TFAutoModel.from_pretrained(model)\n    inputids = Input(shape=(max_len,),dtype=tf.int32, name=\"inputids\")\n    seqout = transformer_encoder(inputids)[0]\n    # Only extract the token used for classification, which is <s>\n    cls_token = seqout[:, 0, :]\n    out = Dense(3,activation='softmax')(cls_token)\n    model = Model(inputs=inputids, outputs=out)\n    model.compile(Adam(lr=1e-5), loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n    \n    \n    \nfrom tensorflow.keras.callbacks import EarlyStopping\n\nes = EarlyStopping(\n    monitor='val_loss', min_delta=0, patience=5, verbose=0, mode='auto',\n    baseline=None, restore_best_weights=True\n)\n\ncallbacks = [es]\n\nnsteps = len(X_train)\/\/batch_size\nn_epochs = 40\n\nhistory = model.fit(traindataset,steps_per_epoch=nsteps,validation_data=validdataset,epochs=n_epochs,callbacks=callbacks)\n\nimport plotly.express as px\n\nhist = history.history\npx.line(\n    hist, x=range(1, len(hist['loss'])+1), y=['accuracy', 'val_accuracy'], \n    title='Model Accuracy', labels={'x': 'Epoch', 'value': 'Accuracy'}\n)\n","25fbd738":"px.line(\n    hist, x=range(1, len(hist['loss'])+1), y=['loss', 'val_loss'], \n    title='Model Loss', labels={'x': 'Epoch', 'value': 'Loss'}\n)","5922f20b":"predictions = model.predict(testdataset)\npreds = np.argmax(predictions,axis=1)\n\nytest = test['label']\nytest = np.array(ytest)\n\nprint(classification_report(ytest,preds))\nprint(\"\\n\")\nprint(confusion_matrix(ytest,preds))\nprint(\"\\n\")\nprint(accuracy_score(ytest,preds))","0599a962":"model = 'bert-base-uncased'\ntokenizer = AutoTokenizer.from_pretrained(model)\n\nmax_len = 300\nbatch_size = 32 * strategy.num_replicas_in_sync\n\ntrainencoded = tokenizer.batch_encode_plus(traintext,pad_to_max_length=True,max_length=max_len)\ntestencoded = tokenizer.batch_encode_plus(testtext,pad_to_max_length=True,max_length=max_len)\n\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_val,y_train,y_val = train_test_split(trainencoded['input_ids'],train['label'].values,test_size=0.2,random_state=42)\nX_test = testencoded['input_ids']\n\n\nauto = tf.data.experimental.AUTOTUNE\ntraindataset = tf.data.Dataset.from_tensor_slices((X_train,y_train)).repeat().shuffle(2048).batch(batch_size).prefetch(auto)\nvaliddataset = (tf.data.Dataset.from_tensor_slices((X_val, y_val)).batch(batch_size).cache().prefetch(auto))\ntestdataset = (tf.data.Dataset.from_tensor_slices(X_test).batch(batch_size))\n\nwith strategy.scope():\n    transformer_encoder = TFAutoModel.from_pretrained(model)\n    inputids = Input(shape=(max_len,),dtype=tf.int32, name=\"inputids\")\n    seqout = transformer_encoder(inputids)[0]\n    # Only extract the token used for classification, which is <s>\n    cls_token = seqout[:, 0, :]\n    out = Dense(3,activation='softmax')(cls_token)\n    model = Model(inputs=inputids, outputs=out)\n    model.compile(Adam(lr=1e-5), loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n    \n    \n    \nfrom tensorflow.keras.callbacks import EarlyStopping\n\nes = EarlyStopping(\n    monitor='val_loss', min_delta=0, patience=5, verbose=0, mode='auto',\n    baseline=None, restore_best_weights=True\n)\n\ncallbacks = [es]\n\nnsteps = len(X_train)\/\/batch_size\nn_epochs = 40\n\nhistory = model.fit(traindataset,steps_per_epoch=nsteps,validation_data=validdataset,epochs=n_epochs,callbacks=callbacks)\n\nimport plotly.express as px\n\nhist = history.history\npx.line(\n    hist, x=range(1, len(hist['loss'])+1), y=['accuracy', 'val_accuracy'], \n    title='Model Accuracy', labels={'x': 'Epoch', 'value': 'Accuracy'}\n)","49b61044":"px.line(\n    hist, x=range(1, len(hist['loss'])+1), y=['loss', 'val_loss'], \n    title='Model Loss', labels={'x': 'Epoch', 'value': 'Loss'}\n)","62b96161":"predictions = model.predict(testdataset)\npreds = np.argmax(predictions,axis=1)\n\nytest = test['label']\nytest = np.array(ytest)\n\nprint(classification_report(ytest,preds))\nprint(\"\\n\")\nprint(confusion_matrix(ytest,preds))\nprint(\"\\n\")\nprint(accuracy_score(ytest,preds))","b1109f44":"model = 'albert-base-v1'\ntokenizer = AutoTokenizer.from_pretrained(model)\n\nmax_len = 300\nbatch_size = 32 * strategy.num_replicas_in_sync\n\ntrainencoded = tokenizer.batch_encode_plus(traintext,pad_to_max_length=True,max_length=max_len)\ntestencoded = tokenizer.batch_encode_plus(testtext,pad_to_max_length=True,max_length=max_len)\n\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_val,y_train,y_val = train_test_split(trainencoded['input_ids'],train['label'].values,test_size=0.2,random_state=42)\nX_test = testencoded['input_ids']\n\n\nauto = tf.data.experimental.AUTOTUNE\ntraindataset = tf.data.Dataset.from_tensor_slices((X_train,y_train)).repeat().shuffle(2048).batch(batch_size).prefetch(auto)\nvaliddataset = (tf.data.Dataset.from_tensor_slices((X_val, y_val)).batch(batch_size).cache().prefetch(auto))\ntestdataset = (tf.data.Dataset.from_tensor_slices(X_test).batch(batch_size))\n\nwith strategy.scope():\n    transformer_encoder = TFAutoModel.from_pretrained(model)\n    inputids = Input(shape=(max_len,),dtype=tf.int32, name=\"inputids\")\n    seqout = transformer_encoder(inputids)[0]\n    # Only extract the token used for classification, which is <s>\n    cls_token = seqout[:, 0, :]\n    out = Dense(3,activation='softmax')(cls_token)\n    model = Model(inputs=inputids, outputs=out)\n    model.compile(Adam(lr=1e-5), loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n    \n    \n    \nfrom tensorflow.keras.callbacks import EarlyStopping\n\nes = EarlyStopping(\n    monitor='val_loss', min_delta=0, patience=5, verbose=0, mode='auto',\n    baseline=None, restore_best_weights=True\n)\n\ncallbacks = [es]\n\nnsteps = len(X_train)\/\/batch_size\nn_epochs = 40\n\nhistory = model.fit(traindataset,steps_per_epoch=nsteps,validation_data=validdataset,epochs=n_epochs,callbacks=callbacks)\n\nimport plotly.express as px\n\nhist = history.history\npx.line(\n    hist, x=range(1, len(hist['loss'])+1), y=['accuracy', 'val_accuracy'], \n    title='Model Accuracy', labels={'x': 'Epoch', 'value': 'Accuracy'}\n)","b996a106":"px.line(\n    hist, x=range(1, len(hist['loss'])+1), y=['loss', 'val_loss'], \n    title='Model Loss', labels={'x': 'Epoch', 'value': 'Loss'}\n)","6acf82e3":"predictions = model.predict(testdataset)\npreds = np.argmax(predictions,axis=1)\n\nytest = test['label']\nytest = np.array(ytest)\n\nprint(classification_report(ytest,preds))\nprint(\"\\n\")\nprint(confusion_matrix(ytest,preds))\nprint(\"\\n\")\nprint(accuracy_score(ytest,preds))","6da55c16":"# albert-base-v1","7c35b4ff":"# XLNET ","6a02c307":"# BERT UNCASED ","eea8ddd7":"# YOU CAN TRY BELOW MENTIONED MODELS AS WELL\n\nIF YOU LIKED IT THEN DON'T FORGET TO UPVOTE :)","38186c94":"# DistilBERT Model"}}