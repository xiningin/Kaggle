{"cell_type":{"617b3ac0":"code","dc0e69f4":"code","44240825":"code","e69b705b":"code","9802c018":"code","de9a9235":"code","ceccb94a":"code","8729b0dd":"code","5569b5de":"code","2a158ebb":"code","4ccbed56":"code","b27299e1":"code","819c4ed5":"code","81605189":"code","477c7338":"code","50965005":"code","baa2a372":"code","b0de0848":"code","1f492dc1":"code","c497a66b":"code","25ed6037":"code","441059ea":"code","5b137f71":"code","b8373172":"code","1e0213b4":"code","8bd53146":"code","6ed3cd25":"code","d8c75363":"code","952d5658":"code","e5254e32":"code","876cb12d":"code","17f51198":"code","6935c078":"code","39344a7d":"code","1d7b025e":"code","1a3fea95":"code","b21034ba":"code","7900ead1":"code","f0502657":"code","82786a88":"code","b40d0660":"code","3e46ebb9":"code","812ab3f6":"code","5d50c773":"code","a3cccaf2":"code","d0ed52bc":"code","2d4422c9":"code","6acb468f":"code","aab80b77":"code","0b030b38":"code","0058d41c":"code","551424e6":"code","16c8b103":"code","c36e9388":"code","e9ad78df":"code","13ab8942":"code","0a08f3de":"code","0c2dc164":"code","c2f01fbf":"code","54c07567":"code","df9ac394":"code","06287e43":"code","b358a3b5":"code","f4172b27":"code","cfa46c47":"code","82207580":"code","ff5b2b11":"code","dbcdeb3e":"code","902e5777":"code","872f56b9":"code","c7f3c5f4":"code","f1fd5fdf":"code","df9c63a5":"code","85117c3e":"code","ffc98c1f":"code","59d4d5a9":"code","7a5df7bd":"code","ad3a20c3":"code","6d39f9a7":"code","129304f3":"code","c065dd9d":"markdown","5bdd8d1b":"markdown","a41c8b40":"markdown","a0446021":"markdown","3fd86682":"markdown","8aeb9518":"markdown","cfb86c17":"markdown","55bb8743":"markdown","b598a4ae":"markdown","17e3719b":"markdown","131063dd":"markdown","59fc4a03":"markdown","51d8dccf":"markdown","40b1b431":"markdown","ab5d8cab":"markdown","06bdd389":"markdown","a2574696":"markdown","1a764549":"markdown","e78a940d":"markdown","7d8e150f":"markdown","29dd778c":"markdown"},"source":{"617b3ac0":"import pandas as pd\nimport numpy as np\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport seaborn as sns\n\nmatplotlib.rcParams['axes.unicode_minus'] = False # \uadf8\ub798\ud504\uc5d0\uc11c \ub9c8\uc774\ub108\uc2a4 \ud3f0\ud2b8 \uae68\uc9c0\ub294 \ubb38\uc81c\uc5d0 \ub300\ud55c \ub300\ucc98\nmatplotlib.rcParams[\"font.family\"] = \"Malgun Gothic\" \n\nimport warnings\nwarnings.filterwarnings('ignore')","dc0e69f4":"def week(x):\n    if x <= 7:\n        return 1\n    elif x <= 14:\n        return 2\n    elif x <= 21:\n        return 3\n    elif x <= 28:\n        return 4\n    elif x <= 35:\n        return 5\n    elif x <= 42:\n        return 6\n    elif x <= 49:\n        return 7\n    elif x <= 56:\n        return 8\n    elif x <= 63:\n        return 9\n    else:\n        return 10\n    \ndef make_variable_about_week(df, col, new_df):\n    change = df[['acc_id','server','char_id',col,'week']].drop_duplicates().groupby(['acc_id','week'])[col].sum().unstack()\n    change = change.fillna(0)\n    change.columns = ['{}_week{}'.format(col,i+1) for i in range(4)]\n    new_df = pd.merge(df, change, on = 'acc_id', how = 'left')\n    \n    return new_df\n\ndef is_survival(x):\n    if x == 64:\n        return 1\n    else :\n        0","44240825":"train_activity = pd.read_csv('..\/input\/bigcontest2019\/train_activity.csv')\ntrain_combat = pd.read_csv('..\/input\/bigcontest2019\/train_combat.csv')\ntrain_pledge = pd.read_csv('..\/input\/bigcontest2019\/train_pledge.csv')\ntrain_trade = pd.read_csv('..\/input\/bigcontest2019\/train_trade.csv')\ntrain_payment = pd.read_csv('..\/input\/bigcontest2019\/train_payment.csv')\n\nlabel = pd.read_csv('..\/input\/bigcontest2019\/train_label.csv')","e69b705b":"test1_activity = pd.read_csv('..\/input\/bigcontest2019\/test1_activity.csv')\ntest1_combat = pd.read_csv('..\/input\/bigcontest2019\/test1_combat.csv')\ntest1_pledge = pd.read_csv('..\/input\/bigcontest2019\/test1_pledge.csv')\ntest1_trade = pd.read_csv('..\/input\/bigcontest2019\/test1_trade.csv')\ntest1_payment = pd.read_csv('..\/input\/bigcontest2019\/test1_payment.csv')","9802c018":"test2_activity = pd.read_csv('..\/input\/bigcontest2019\/test2_activity.csv')\ntest2_combat = pd.read_csv('..\/input\/bigcontest2019\/test2_combat.csv')\ntest2_pledge = pd.read_csv('..\/input\/bigcontest2019\/test2_pledge.csv')\ntest2_trade = pd.read_csv('..\/input\/bigcontest2019\/test2_trade.csv')\ntest2_payment = pd.read_csv('..\/input\/bigcontest2019\/test2_payment.csv')","de9a9235":"train_activity['data'] = 'train'\ntest1_activity['data'] = 'test1'\ntest2_activity['data'] = 'test2'\n\nactivity = pd.concat([train_activity, test1_activity, test2_activity], axis = 0)\n\nactivity = pd.merge(activity, label, on = 'acc_id', how = 'left')","ceccb94a":"train_combat['data'] = 'train'\ntest1_combat['data'] = 'test1'\ntest2_combat['data'] = 'test2'\n\ncombat = pd.concat([train_combat, test1_combat, test2_combat], axis = 0)\n\ncombat = pd.merge(combat, label, on = 'acc_id', how = 'left')","8729b0dd":"train_pledge['data'] = 'train'\ntest1_pledge['data'] = 'test1'\ntest2_pledge['data'] = 'test2'\n\npledge = pd.concat([train_pledge, test1_pledge, test2_pledge], axis = 0)\n\npledge = pd.merge(pledge, label,  on = 'acc_id', how = 'left')","5569b5de":"train_payment['data'] = 'train'\ntest1_payment['data'] = 'test1'\ntest2_payment['data'] = 'test2'\n\npayment = pd.concat([train_payment, test1_payment, test2_payment], axis = 0)\n\npayment = pd.merge(payment, label,  on = 'acc_id', how = 'left')","2a158ebb":"train_trade['data'] = 'train'\ntest1_trade['data'] = 'test1'\ntest2_trade['data'] = 'test2'\n\ntrade = pd.concat([train_trade, test1_trade, test2_trade], axis = 0)\ntrade['hour'] = trade['time'].str.split(':', expand = True)[0]\n\ntrade_buy = trade.copy()\ntrade_sell = trade.copy()\n\ntrade_buy['trade_type'] = 'buy'\ntrade_sell['trade_type'] = 'sell'\n\ntrade_buy.drop(['source_acc_id', 'source_char_id'], axis = 1, inplace = True)\ntrade_sell.drop(['target_acc_id', 'target_char_id'], axis = 1, inplace = True)\n\ntrade_buy = trade_buy.rename(columns = {'target_acc_id' : 'acc_id' , 'target_char_id' : 'char_id'})\ntrade_sell = trade_sell.rename(columns = {'source_acc_id' : 'acc_id', 'source_char_id' : 'char_id'})\n\ntotal_trade = pd.concat([trade_buy, trade_sell], axis = 0)\n\ntrade = pd.merge(total_trade, label,on = 'acc_id', how = 'left')","4ccbed56":"activity['week'] = activity['day'].apply(week)","b27299e1":"activity.head()","819c4ed5":"# game_money_change\ub294 \uc808\ub313\uac12\uc73c\ub85c \ubcc0\ud658\n\nactivity['game_money_change'] = np.abs(activity['game_money_change'])","81605189":"# \uc5b4\ub5a4 \uc720\ud615\uc73c\ub85c \uacbd\ud5d8\uce58\ub97c \uc5bb\ub294\uc9c0\uc5d0 \ub300\ud55c \ube44\uc728\nactivity['total_exp'] = activity['solo_exp'] + activity['party_exp'] + activity['quest_exp']\n\nactivity['solo_exp_ratio'] = activity['solo_exp'] \/ activity['total_exp']\nactivity['party_exp_ratio'] = activity['party_exp'] \/ activity['total_exp']\nactivity['quest_exp_ratio'] = activity['quest_exp'] \/ activity['total_exp']\n\nactivity[['solo_exp_ratio', 'party_exp_ratio', 'quest_exp_ratio']] = activity[['solo_exp_ratio', 'party_exp_ratio', 'quest_exp_ratio']].fillna(0)","477c7338":"activity.loc[(activity['survival_time'].notnull())].groupby(['acc_id', 'week'])['playtime', 'npc_kill', 'solo_exp', 'party_exp', 'quest_exp', 'rich_monster',\n                                     'death', 'revive', 'fishing', 'private_shop', 'game_money_change',\n                                     'solo_exp_ratio', 'party_exp_ratio', 'quest_exp_ratio', 'survival_time'].mean().round(4)","50965005":"activity_mean = pd.DataFrame(activity.groupby(['acc_id'])['playtime', 'npc_kill', 'solo_exp', 'party_exp', 'quest_exp', 'rich_monster',\n                                                          'death', 'revive', 'fishing', 'private_shop', 'game_money_change',\n                                                          'solo_exp_ratio', 'party_exp_ratio', 'quest_exp_ratio'].mean()).reset_index()","baa2a372":"activity_mean.head()","b0de0848":"df_activity = activity.groupby(['acc_id'])['fishing', 'private_shop', 'game_money_change'].mean()","1f492dc1":"combat['week'] = combat['day'].apply(week)","c497a66b":"combat.head()","25ed6037":"combat.columns","441059ea":"# \uacf5\uaca9\uc801 \uc131\ud5a5\uc778\uc9c0, \ub9c9\ud53c\ub85c \ud53c\ud574\ub97c \ubc1b\uc558\ub294\uc9c0\uc5d0 \ub300\ud55c \ube44\uc728\ncombat[['acc_id', 'random_attacker_cnt', 'random_defender_cnt']]\n\ncombat['random_attacker_ratio'] = combat['random_attacker_cnt'] \/ (combat['random_attacker_cnt'] + combat['random_defender_cnt'])\ncombat['random_defender_ratio'] = combat['random_defender_cnt'] \/ (combat['random_attacker_cnt'] + combat['random_defender_cnt'])\n\ncombat[['random_attacker_ratio', 'random_defender_ratio']] = combat[['random_attacker_ratio', 'random_defender_ratio']].fillna(0)","5b137f71":"# \uc5b4\ub5a4\uc804\ud22c\uc758 \uc720\ud615\uc758 \uc804\ud22c\ub97c \ud588\ub294\uc9c0 \ncombat['total_combat'] = combat['pledge_cnt'] + combat['temp_cnt'] + combat['same_pledge_cnt'] + combat['etc_cnt']\n\ncombat['pledge_cnt_ratio'] = combat['pledge_cnt'] \/ combat['total_combat']\ncombat['temp_cnt_ratio'] = combat['temp_cnt'] \/ combat['total_combat']\ncombat['same_pledge_cnt_ratio']  = combat['same_pledge_cnt'] \/ combat['total_combat']\ncombat['etc_cnt_ratio'] = combat['etc_cnt'] \/ combat['total_combat']\n\ncombat[['pledge_cnt_ratio','temp_cnt_ratio', 'same_pledge_cnt_ratio', 'etc_cnt_ratio']] = combat[['pledge_cnt_ratio','temp_cnt_ratio', 'same_pledge_cnt_ratio', 'etc_cnt_ratio']].fillna(0)","b8373172":"combat.columns","1e0213b4":"combat_mean = combat.groupby(['acc_id'])['pledge_cnt', 'random_attacker_cnt', 'random_defender_cnt',\n                                         'temp_cnt','same_pledge_cnt', 'etc_cnt', 'num_opponent', 'level_max', \n                                         'random_attacker_ratio', 'random_defender_ratio',\n                                         'pledge_cnt_ratio', 'temp_cnt_ratio','same_pledge_cnt_ratio', 'etc_cnt_ratio'].mean().reset_index()","8bd53146":"df_combat = combat_mean.copy()","6ed3cd25":"pledge['week'] = pledge['day'].apply(week)","d8c75363":"pledge.columns","952d5658":"# \ud608\ub9f9 \uc911 \uc811\uc18d\ud608\ub9f9 \uce90\ub9ad\ud130\uc218\uc5d0 \ube44\ud574 \uc804\ud22c \ucc38\uc5ec \ud608\ub9f9 \uce90\ub9ad\ud130 \uc218\uc5d0 \ube44\uc728\uc774 \uc5bc\ub9c8\uc778\uc9c0?\n# \ud608\ub9f9\uc774 \ud65c\ubc1c\ud55c\uc9c0 \uc544\ub2cc\uc9c0\uc758 \uc720\ubb34\ub97c \ud30c\uc545\npledge['play_combat_char_ratio'] = pledge['combat_char_cnt'] \/ pledge['play_char_cnt']","e5254e32":"# \uacf5\uaca9\uc801 \uc131\ud5a5\uc778\uc9c0, \ub9c9\ud53c\ub85c \ud53c\ud574\ub97c \ubc1b\uc558\ub294\uc9c0\uc5d0 \ub300\ud55c \ube44\uc728\npledge[['acc_id','pledge_id','random_attacker_cnt', 'random_defender_cnt']]\n\npledge['random_attacker_ratio'] = pledge['random_attacker_cnt'] \/ (pledge['random_attacker_cnt'] + pledge['random_defender_cnt'])\npledge['random_defender_ratio'] = pledge['random_defender_cnt'] \/ (pledge['random_attacker_cnt'] + pledge['random_defender_cnt'])\n\npledge[['random_attacker_ratio', 'random_defender_ratio']] = pledge[['random_attacker_ratio', 'random_defender_ratio']].fillna(0)","876cb12d":"# \uc5b4\ub5a4\uc804\ud22c\uc758 \uc720\ud615\uc758 \uc804\ud22c\ub97c \ud588\ub294\uc9c0 \npledge['total_combat'] =  pledge['pledge_combat_cnt'] + pledge['temp_cnt'] + pledge['same_pledge_cnt'] + pledge['etc_cnt']\n\npledge['pledge_combat_cnt_ratio'] = pledge['pledge_combat_cnt'] \/ pledge['total_combat']\npledge['temp_cnt_ratio'] = pledge['temp_cnt'] \/ pledge['total_combat']\npledge['same_pledge_cnt_ratio']  = pledge['same_pledge_cnt'] \/ pledge['total_combat']\npledge['etc_cnt_ratio'] = pledge['etc_cnt'] \/ pledge['total_combat']\n\npledge[['pledge_combat_cnt_ratio', 'temp_cnt_ratio', 'same_pledge_cnt_ratio', 'etc_cnt_ratio']] =pledge[['pledge_combat_cnt_ratio', 'temp_cnt_ratio', 'same_pledge_cnt_ratio', 'etc_cnt_ratio']].fillna(0)","17f51198":"# \ud608\ub9f9\uc5d0\uc11c \uc804\ud22c \uce90\ub9ad\ud130\uc778\uc9c0 \ube44\uc804\ud22c \uce90\ub9ad\ud130\uc778\uc9c0 \npledge['combat_play_time_ratio'] = pledge['combat_play_time'] \/ (pledge['combat_play_time'] + pledge['non_combat_play_time'])\npledge['non_combat_play_time_ratio'] = pledge['non_combat_play_time'] \/ (pledge['combat_play_time'] + pledge['non_combat_play_time'])","6935c078":"pledge.head()","39344a7d":"pledge.columns","1d7b025e":"pledge_mean = pledge.groupby(['acc_id'])['play_char_cnt', 'combat_char_cnt', 'pledge_combat_cnt',\n                                         'random_attacker_cnt','random_defender_cnt', 'etc_cnt',\n                                         'combat_play_time', 'non_combat_play_time',\n                                         'random_attacker_ratio', 'random_defender_ratio',\n                                         'pledge_combat_cnt_ratio','etc_cnt_ratio',\n                                         'combat_play_time_ratio', 'non_combat_play_time_ratio'].mean().reset_index()","1a3fea95":"df_pledge = pledge_mean.copy()","b21034ba":"trade['week'] = trade['day'].apply(week)","7900ead1":"trade.columns","f0502657":"item_type = pd.crosstab(trade['acc_id'], trade['item_type'], margins = True)\nitem_type.rename(columns = {'All': 'item_type_all'}, inplace = True)\ntrade_type = pd.crosstab(trade['acc_id'], trade['trade_type'], margins = True)\ntrade_type.rename(columns = {'All': 'trade_type_all'}, inplace = True)\n\ntp = pd.merge(item_type, trade_type, on = 'acc_id', how = 'left')\n\ntrade = pd.merge(trade, tp, on = 'acc_id', how = 'left')","82786a88":"trade_server = trade[['acc_id','server']].drop_duplicates().groupby('acc_id').server.count().reset_index(name='server_cnt')\ntrade_char = trade[['acc_id','char_id','server']].drop_duplicates().groupby('acc_id').char_id.count().reset_index(name='char_cnt')\n\ndf_train = pd.merge(df_train, trade_server, on='acc_id', how='left')\ndf_train = pd.merge(df_train, trade_char, on='acc_id', how='left')","b40d0660":"trade.head()","3e46ebb9":"df_trade = trade.groupby(['acc_id'])['item_amount', 'server_cnt', 'char_id_cnt',\n                                     'accessory', 'adena', 'armor','enchant_scroll', 'etc', 'spell', 'weapon', 'item_type_all',\n                                     'buy', 'sell', 'trade_type_all'].mean()","812ab3f6":"payment.head()","5d50c773":"payment['week'] = payment['day'].apply(week)\n\npayment.rename(columns = {'amount_spent_x' : 'payment_amount_spent', 'amount_spent_y' : 'amount_spent'}, inplace = True)","a3cccaf2":"df_payment = payment.groupby(['acc_id'])['payment_amount_spent'].mean()","d0ed52bc":"data1 = pd.merge(df_activity, df_combat, on = 'acc_id', how = 'left')\ndata2 = pd.merge(df_pledge, df_trade, on = 'acc_id', how = 'left')\ndata = pd.merge(data1, data2, on = 'acc_id', how = 'left')\ndata = pd.merge(data, df_payment, on = 'acc_id', how = 'left')","2d4422c9":"data = pd.merge(df_activity, label, on = 'acc_id', how = 'left')","6acb468f":"data.head()","aab80b77":"data.shape","0b030b38":"# model\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nimport lightgbm as lgb\nimport xgboost as xgb\n\n# evaluation\nfrom sklearn.metrics import mean_squared_error","0058d41c":"seed = 223","551424e6":"validation_acc = pd.read_csv('..\/input\/bigcontest2019\/train_valid_user_id.csv')\nprint('validation_acc shape: ',validation_acc.shape)","16c8b103":"train_idx = validation_acc[validation_acc.set=='Train'].acc_id\nvalid_idx = validation_acc[validation_acc.set=='Validation'].acc_id\n\ntrain_set = data[data.acc_id.isin(train_idx)]\nvalid_set = data[data.acc_id.isin(valid_idx)]\n\nprint('train set: ',train_set.shape)\nprint('valid set: ',valid_set.shape)","c36e9388":"train_set.fillna(0, inplace = True)\nvalid_set.fillna(0, inplace = True)","e9ad78df":"def survival64(y_pred, dataset):\n    y_true = dataset.get_label()\n    y_pred = np.array([64 if x > 64 else x for x in y_pred])\n    y_pred = np.array([0 if x < 0 else x for x in y_pred])\n    y_pred = np.round(y_pred)\n    error = np.sqrt(mean_squared_error(y_true, y_pred))\n    return 'error', error, False","13ab8942":"lr_amount = RandomForestRegressor()\nlr_amount.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1), train_set.amount_spent)\nlr_amount_pred = lr_amount.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlr_amount_pred = pd.Series(lr_amount_pred).apply(lambda x: 0 if x < 0 else x)","0a08f3de":"lr_survival = RandomForestRegressor()\nlr_survival.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n          train_set.survival_time)\nlr_survival_pred = lr_survival.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlr_survival_pred = pd.Series(lr_survival_pred).apply(lambda x: 64 if x > 64 else x)\nlr_survival_pred = lr_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","0c2dc164":"lr_pred_df = pd.DataFrame({'acc_id':valid_set.acc_id.values,\n                           'survival_time':lr_survival_pred,\n                           'amount_spent':lr_amount_pred})\nprint('lr_pred_df shape: ',lr_pred_df.shape)","c2f01fbf":"rf_params = {\n    'n_estimators':1000,\n    'max_depth':10,\n    'n_jobs':-1\n}","54c07567":"rf_amount = RandomForestRegressor(**rf_params)\nrf_amount.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n              train_set.amount_spent)\nrf_amount_pred = rf_amount.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nrf_amount_pred = pd.Series(rf_amount_pred).apply(lambda x: 0 if x < 0 else x)","df9ac394":"rf_survival = RandomForestRegressor(**rf_params)\nrf_survival.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                train_set.survival_time)\nrf_survival_pred = rf_survival.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nrf_survival_pred = pd.Series(rf_survival_pred).apply(lambda x: 64 if x > 64 else x)\nrf_survival_pred = rf_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","06287e43":"rf_pred_df = pd.DataFrame({'acc_id':valid_set.acc_id.values,\n                           'survival_time':rf_survival_pred,\n                           'amount_spent':rf_amount_pred})\nprint('rf_pred_df shape: ',rf_pred_df.shape)","b358a3b5":"lgb_params = {\n    'n_estimators':800,\n    'seed':seed\n}","f4172b27":"lgb_train_amount = lgb.Dataset(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                               train_set.amount_spent)\nlgb_train_survival = lgb.Dataset(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                                 train_set.survival_time)","cfa46c47":"lgb_amount = lgb.train(lgb_params, \n                       lgb_train_amount,\n                       feval=survival64,\n                       valid_sets=[lgb_train_amount],\n                       verbose_eval=100)\n\nlgb_amount_pred = lgb_amount.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlgb_amount_pred = pd.Series(lgb_amount_pred).apply(lambda x: 0 if x < 0 else x)","82207580":"lgb_survival = lgb.train(lgb_params, \n                         lgb_train_survival,\n                         feval=survival64,\n                         valid_sets=[lgb_train_survival],\n                         verbose_eval=100)\n\nlgb_survival_pred = lgb_survival.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlgb_survival_pred = pd.Series(lgb_survival_pred).apply(lambda x: 64 if x > 64 else x)\nlgb_survival_pred = lgb_survival_pred.apply(lambda x: 0 if x < 0 else x).round()\n","ff5b2b11":"lgb_pred_df = pd.DataFrame({'acc_id':valid_set.acc_id.values,\n                           'survival_time':lgb_survival_pred,\n                           'amount_spent':lgb_amount_pred})\nprint('lgb_pred_df shape: ',lgb_pred_df.shape)","dbcdeb3e":"def score_function(predict, actual):\n    \n    # predict = pd.read_csv(predict_label, engine='python') # \uc608\uce21 \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n    # actual = pd.read_csv(actual_label,engine='python') # \uc2e4\uc81c \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n\n\n    predict.acc_id = predict.acc_id.astype('int')\n    predict = predict.sort_values(by =['acc_id'], axis = 0) # \uc608\uce21 \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c \n    predict = predict.reset_index(drop = True)\n    actual.acc_id = actual.acc_id.astype('int')\n    actual = actual.sort_values(by =['acc_id'], axis = 0) # \uc2e4\uc81c \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c\n    actual =actual.reset_index(drop=True)\n    \n    if predict.acc_id.equals(actual.acc_id) == False:\n        print('acc_id of predicted and actual label does not match')\n        sys.exit() # \uc608\uce21 \ub2f5\uc548\uc758 acc_id\uc640 \uc2e4\uc81c \ub2f5\uc548\uc758 acc_id\uac00 \ub2e4\ub978 \uacbd\uc6b0 \uc5d0\ub7ec\ucc98\ub9ac \n    else:\n            \n        S, alpha, L, sigma = 30, 0.01, 0.1, 15  \n        cost, gamma, add_rev = 0,0,0 \n        profit_result = []\n        survival_time_pred = list(predict.survival_time)\n        amount_spent_pred = list(predict.amount_spent)\n        survival_time_actual = list(actual.survival_time)\n        amount_spent_actual = list(actual.amount_spent)    \n        for i in range(len(survival_time_pred)):\n            if survival_time_pred[i] == 64 :                 \n                cost = 0\n                optimal_cost = 0\n            else:\n                cost = alpha * S * amount_spent_pred[i]                    #\ube44\uc6a9 \uacc4\uc0b0\n                optimal_cost = alpha * S * amount_spent_actual[i]          #\uc801\uc815\ube44\uc6a9 \uacc4\uc0b0 \n            \n            if optimal_cost == 0:\n                gamma = 0\n            elif cost \/ optimal_cost < L:\n                gamma = 0\n            elif cost \/ optimal_cost >= 1:\n                gamma = 1\n            else:\n                gamma = (cost)\/((1-L)*optimal_cost) - L\/(1-L)              #\ubc18\uc751\ub960 \uacc4\uc0b0\n            \n            if survival_time_pred[i] == 64 or survival_time_actual[i] == 64:\n                T_k = 0\n            else:\n                T_k = S * np.exp(-((survival_time_pred[i] - survival_time_actual[i])**2)\/(2*(sigma)**2))    #\ucd94\uac00 \uc0dd\uc874\uae30\uac04 \uacc4\uc0b0\n                \n            add_rev = T_k * amount_spent_actual[i]                         #\uc794\uc874\uac00\uce58 \uacc4\uc0b0\n    \n           \n            profit = gamma * add_rev - cost                                #\uc720\uc800\ubcc4 \uae30\ub300\uc774\uc775 \uacc4\uc0b0\n            profit_result.append(profit)\n            \n        score = sum(profit_result) \n    return score","902e5777":"lr_valid_score = score_function(lr_pred_df, valid_set[['acc_id','survival_time','amount_spent']])\nrf_valid_score = score_function(rf_pred_df, valid_set[['acc_id','survival_time','amount_spent']])\nlgb_valid_score = score_function(lgb_pred_df, valid_set[['acc_id','survival_time','amount_spent']])\ntrue_score = score_function(valid_set[['acc_id','survival_time','amount_spent']],\n                            valid_set[['acc_id','survival_time','amount_spent']])\n\nprint('Linear Regression score: ',lr_valid_score)\nprint('Random Forest score: ',rf_valid_score)\nprint('Light GBM score: ',lgb_valid_score)\nprint('true score: ',true_score)","872f56b9":"train_idx = activity[activity['data'] == 'train'].acc_id\ntest1_idx = activity[activity['data'] == 'test1'].acc_id\ntest2_idx = activity[activity['data'] == 'test2'].acc_id\n\ntrain_set = data[data.acc_id.isin(train_idx)]\ntest1_set = data[data.acc_id.isin(test1_idx)]\ntest2_set = data[data.acc_id.isin(test2_idx)]\n\nprint('train set: ',train_set.shape)\nprint('test1 set: ',test1_set.shape)\nprint('test2 set: ',test2_set.shape)","c7f3c5f4":"train_set.fillna(0, inplace = True)\ntest1_set.fillna(0, inplace = True)\ntest2_set.fillna(0, inplace = True)","f1fd5fdf":"rf_params = {\n    'n_estimators':1000,\n    'max_depth':10,\n    'n_jobs':-1\n}","df9c63a5":"rf_amount = RandomForestRegressor(**rf_params)\nrf_amount.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n              train_set.amount_spent)\nrf_amount_pred = rf_amount.predict(test1_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nrf_amount_pred = pd.Series(rf_amount_pred).apply(lambda x: 0 if x < 0 else x)","85117c3e":"rf_survival = RandomForestRegressor(**rf_params)\nrf_survival.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                train_set.survival_time)\nrf_survival_pred = rf_survival.predict(test1_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nrf_survival_pred = pd.Series(rf_survival_pred).apply(lambda x: 64 if x > 64 else x)\nrf_survival_pred = rf_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","ffc98c1f":"rf_pred_df = pd.DataFrame({'acc_id':test1_set.acc_id.values,\n                           'survival_time':rf_survival_pred,\n                           'amount_spent':rf_amount_pred})\nprint('rf_pred_df shape: ',rf_pred_df.shape)","59d4d5a9":"rf_pred_df.to_csv('test1_predict.csv', index = False) ","7a5df7bd":"rf_amount = RandomForestRegressor(**rf_params)\nrf_amount.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n              train_set.amount_spent)\nrf_amount_pred = rf_amount.predict(test2_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nrf_amount_pred = pd.Series(rf_amount_pred).apply(lambda x: 0 if x < 0 else x)","ad3a20c3":"rf_survival = RandomForestRegressor(**rf_params)\nrf_survival.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                train_set.survival_time)\nrf_survival_pred = rf_survival.predict(test2_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nrf_survival_pred = pd.Series(rf_survival_pred).apply(lambda x: 64 if x > 64 else x)\nrf_survival_pred = rf_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","6d39f9a7":"rf_pred_df = pd.DataFrame({'acc_id':test2_set.acc_id.values,\n                           'survival_time':rf_survival_pred,\n                           'amount_spent':rf_amount_pred})\nprint('rf_pred_df shape: ',rf_pred_df.shape)","129304f3":"rf_pred_df.to_csv('test2_predict.csv', index = False) ","c065dd9d":"## Model3: Light GBM\u00b6","5bdd8d1b":"# Test Score","a41c8b40":"## Model 1: Linear Regression","a0446021":"# Module","3fd86682":"# Data join","8aeb9518":"## Evaluation","cfb86c17":"## combat","55bb8743":"# Data Load","b598a4ae":"# importance","17e3719b":"## activity","131063dd":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Module\" data-toc-modified-id=\"Module-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Module<\/a><\/span><\/li><li><span><a href=\"#Data-Load\" data-toc-modified-id=\"Data-Load-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Data Load<\/a><\/span><\/li><li><span><a href=\"#Data-join\" data-toc-modified-id=\"Data-join-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Data join<\/a><\/span><\/li><li><span><a href=\"#Preprocessing\" data-toc-modified-id=\"Preprocessing-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Preprocessing<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#activity\" data-toc-modified-id=\"activity-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;<\/span>activity<\/a><\/span><\/li><li><span><a href=\"#combat\" data-toc-modified-id=\"combat-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;<\/span>combat<\/a><\/span><\/li><li><span><a href=\"#Pledge\" data-toc-modified-id=\"Pledge-4.3\"><span class=\"toc-item-num\">4.3&nbsp;&nbsp;<\/span>Pledge<\/a><\/span><\/li><li><span><a href=\"#Trade\" data-toc-modified-id=\"Trade-4.4\"><span class=\"toc-item-num\">4.4&nbsp;&nbsp;<\/span>Trade<\/a><\/span><\/li><li><span><a href=\"#Payment\" data-toc-modified-id=\"Payment-4.5\"><span class=\"toc-item-num\">4.5&nbsp;&nbsp;<\/span>Payment<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Dataset-merge\" data-toc-modified-id=\"Dataset-merge-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Dataset merge<\/a><\/span><\/li><li><span><a href=\"#Valid-Score\" data-toc-modified-id=\"Valid-Score-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;<\/span>Valid Score<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Split-Data\" data-toc-modified-id=\"Split-Data-6.1\"><span class=\"toc-item-num\">6.1&nbsp;&nbsp;<\/span>Split Data<\/a><\/span><\/li><li><span><a href=\"#Model-1:-Linear-Regression\" data-toc-modified-id=\"Model-1:-Linear-Regression-6.2\"><span class=\"toc-item-num\">6.2&nbsp;&nbsp;<\/span>Model 1: Linear Regression<\/a><\/span><\/li><li><span><a href=\"#Model-2:-Random-Forest\" data-toc-modified-id=\"Model-2:-Random-Forest-6.3\"><span class=\"toc-item-num\">6.3&nbsp;&nbsp;<\/span>Model 2: Random Forest<\/a><\/span><\/li><li><span><a href=\"#Model3:-Light-GBM\u00b6\" data-toc-modified-id=\"Model3:-Light-GBM\u00b6-6.4\"><span class=\"toc-item-num\">6.4&nbsp;&nbsp;<\/span>Model3: Light GBM\u00b6<\/a><\/span><\/li><li><span><a href=\"#Evaluation\" data-toc-modified-id=\"Evaluation-6.5\"><span class=\"toc-item-num\">6.5&nbsp;&nbsp;<\/span>Evaluation<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Test-Score\" data-toc-modified-id=\"Test-Score-7\"><span class=\"toc-item-num\">7&nbsp;&nbsp;<\/span>Test Score<\/a><\/span><ul class=\"toc-item\"><li><ul class=\"toc-item\"><li><span><a href=\"#test1\" data-toc-modified-id=\"test1-7.0.1\"><span class=\"toc-item-num\">7.0.1&nbsp;&nbsp;<\/span>test1<\/a><\/span><\/li><li><span><a href=\"#test2\" data-toc-modified-id=\"test2-7.0.2\"><span class=\"toc-item-num\">7.0.2&nbsp;&nbsp;<\/span>test2<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/div>","59fc4a03":"## Model 2: Random Forest","51d8dccf":"# Preprocessing","40b1b431":"### test1","ab5d8cab":"# Valid Score","06bdd389":"## Trade","a2574696":"## Pledge","1a764549":"## Split Data","e78a940d":"# Dataset merge","7d8e150f":"### test2","29dd778c":"## Payment"}}