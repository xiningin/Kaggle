{"cell_type":{"403dfe44":"code","d7c839c7":"code","db6db2f4":"code","dbe03ead":"code","c5ee6bfe":"code","fb8869da":"code","4f347bf6":"code","c542dd97":"code","e9b14239":"code","58f946f8":"code","f0063cc0":"code","8e6c59a2":"code","b57ceba1":"code","26b3bc93":"code","e6fe2bea":"code","13ad75b1":"code","a061e5e2":"code","8a08efb0":"code","df968fbf":"code","95b9188a":"code","a61bee8b":"code","6a13a534":"code","ecbfecdb":"code","0ee038f3":"code","f90db584":"code","d04c1909":"code","4c44134b":"code","5600862d":"markdown","6af18f04":"markdown","76269734":"markdown","8db25f58":"markdown","a309679e":"markdown","4115b78d":"markdown","1fa1c2a9":"markdown","073e2360":"markdown","758edfec":"markdown","31a8291d":"markdown"},"source":{"403dfe44":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7c839c7":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = (10.0,5.0)","db6db2f4":"data = pd.read_csv('\/kaggle\/input\/headbrain\/headbrain.csv')","dbe03ead":"data.shape","c5ee6bfe":"data.head(5)","fb8869da":"X = data['Head Size(cm^3)']\nY = data['Brain Weight(grams)']","4f347bf6":"X = X.values\nY = Y.values","c542dd97":"mean_X = X.mean()\nmean_Y = Y.mean()","e9b14239":"n = len(X)","58f946f8":"num = 0\nden = 0\nfor i in range(n):\n    num = num + (X[i] - mean_X)*(Y[i] - mean_Y)\n    den = den + (X[i] - mean_X)**2\nb1 = num\/den    ","f0063cc0":"b0 = mean_Y - mean_X*b1","8e6c59a2":"print('y =' + str(b1) + 'x + ' + str(b0))","b57ceba1":"pred_Y = b1*X+b0","26b3bc93":"num = 0\nden = 0\nfor i in range(n):\n    num = num + (pred_Y[i] - mean_Y)**2\n    den = den + (Y[i] - mean_Y)**2\nR_squared = num\/den   ","e6fe2bea":"R_squared","13ad75b1":"max_X = X.max() + 100\nmin_X = X.min() - 100\n\n\nx = np.linspace(min_X, max_X, 1000)\ny = b1*x + b0\n\nplt.plot(x, y, label = \"Regression Line\", color = \"Red\")\nplt.scatter(X, Y, color = \"Blue\", label = \"Data Points\")\nplt.xlabel('Head Size in cm^3')\nplt.ylabel('Brain Weight in grams')\nplt.legend()","a061e5e2":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error","8a08efb0":"reg = LinearRegression()","df968fbf":"X = X.reshape((237,1))\nreg = reg.fit(X, Y)\nmodel_pred_Y = reg.predict(X)\nmodel_r_squared = reg.score(X, Y)","95b9188a":"model_r_squared","a61bee8b":"import seaborn as sns","6a13a534":"plt.figure(figsize=(6,4))\nx = data\nfor i in x.columns:\n    sns.histplot(x[i],kde = True)\n    plt.show()","ecbfecdb":"plt.figure(figsize=(16,9))\nax = sns.heatmap(data.corr(),annot = True, cmap = 'viridis')\nplt.show()","0ee038f3":"x = data.drop([\"Gender\", \"Age Range\"], axis = 1)\nfor i in x.columns:\n    sns.boxplot(x = i, data = x,color = 'yellowgreen')\n    plt.xlabel(i)\n    plt.show()","f90db584":"plt.figure(figsize=(6,4))\nx = data[\"Brain Weight(grams)\"]\nfor i in data.columns[2:-1]:\n    sns.scatterplot(x,i,data = data)\n    plt.show()","d04c1909":"plt.figure(figsize=(6,4))\nx = data[\"Head Size(cm^3)\"]\nfor i in data.columns[3:]:\n    sns.scatterplot(x,i,data = data)\n    plt.show()","4c44134b":"sns.pairplot(data.drop([\"Gender\", \"Age Range\"], axis = 1))\nplt.show()","5600862d":"***Plotting the Linear Model***","6af18f04":"***The equation of the linear model is***","76269734":"***Lets find the values of m and c or b1 and b0***","8db25f58":"***R squared value***","a309679e":"***This is the same R Squared Value***","4115b78d":"***Reading the data***","1fa1c2a9":"***Collecting X and Y***","073e2360":"***Implementing Linear Regression using basics***","758edfec":"***Implementing Linear Regression using Scikit learn***","31a8291d":"***Displaying top 5 rows of the data***"}}