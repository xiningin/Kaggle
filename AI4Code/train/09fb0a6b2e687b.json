{"cell_type":{"b115d612":"code","4c6e1555":"code","61c2987b":"code","c0a9dbac":"code","8c078bd9":"code","d667061c":"code","0b3ac862":"code","7c6cb740":"code","25b8a736":"code","a4becb09":"code","2ada6f30":"code","1b2740b9":"code","e8263d18":"code","d5b3799e":"code","874b87bd":"code","5989b2e4":"code","d94b4478":"code","1b3476fc":"code","1cf1f78b":"code","240a9285":"code","ced266af":"code","094c6ae9":"markdown","70550b95":"markdown","3134e28a":"markdown","67655430":"markdown","3eb9da99":"markdown","bea078a1":"markdown","cfbf1dcb":"markdown","01e6d5a7":"markdown","aea67038":"markdown","9ed8126f":"markdown","8314bc95":"markdown","0b4de505":"markdown","c7cd0fb7":"markdown","1ce9aaae":"markdown","1593ab83":"markdown","fc2c8674":"markdown","ab782a95":"markdown","11774e77":"markdown","0176d0ac":"markdown","76dd4857":"markdown","4115b2f7":"markdown","34e2f4d6":"markdown"},"source":{"b115d612":"import numpy as np\nfrom glob import glob\n\n# load filenames for human and dog images\nhuman_files = np.array(glob(\"..\/input\/humans-dataset\/lfw\/*\/*\"))\ndog_files = np.array(glob(\"..\/input\/dog-breeds\/dogImages\/*\/*\/*\"))\n\n# print number of images in each dataset\nprint('There are %d total human images.' % len(human_files))\nprint('There are %d total dog images.' % len(dog_files))","4c6e1555":"import cv2                \nimport matplotlib.pyplot as plt                        \n%matplotlib inline                               \n\n# extract pre-trained face detector\nface_cascade = cv2.CascadeClassifier('..\/input\/haarcascade-frontalface-alt\/haarcascade_frontalface_alt.xml')\n\n# load color (BGR) image\nimg = cv2.imread(human_files[0])\n# convert BGR image to grayscale\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n# find faces in image\nfaces = face_cascade.detectMultiScale(gray)\n\n# print number of faces detected in the image\nprint('Number of faces detected:', len(faces))\n\n# get bounding box for each detected face\nfor (x,y,w,h) in faces:\n    # add bounding box to color image\n    cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)\n    \n# convert BGR image to RGB for plotting\ncv_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n# display the image, along with bounding box\nplt.imshow(cv_rgb)\nplt.show()","61c2987b":"# returns \"True\" if face is detected in image stored at img_path\ndef face_detector(img_path):\n    img = cv2.imread(img_path)\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    faces = face_cascade.detectMultiScale(gray)\n    return len(faces) > 0","c0a9dbac":"from tqdm import tqdm\n\nhuman_files_short = human_files[:100]\ndog_files_short = dog_files[:100]\n\n## Test the performance of the face_detector algorithm \n## on the images in human_files_short and dog_files_short.\nfaces_vfunc = np.vectorize(face_detector)\n\n# Detect faces in both sets\nhuman_faces = faces_vfunc(human_files_short)\ndog_faces = faces_vfunc(dog_files_short)\n\n# Calculate and print percentage of faces in each set\nprint('Faces detected in {:.2f}% of the sample human dataset.'.format((sum(human_faces)\/len(human_faces))*100))\nprint('Faces detected in {:.2f}% of the sample dog dataset.'.format((sum(dog_faces)\/len(dog_faces))*100))","8c078bd9":"import torch\nimport torchvision.models as models\n\n# define VGG16 model\nVGG16 = models.vgg16(pretrained=True)\n\n# check if CUDA is available\nuse_cuda = torch.cuda.is_available()\n\n# move model to GPU if CUDA is available\nif use_cuda:\n    VGG16 = VGG16.cuda()","d667061c":"from PIL import Image\nfrom PIL import ImageFile\nImageFile.LOAD_TRUNCATED_IMAGES = True\nimport requests\nimport io\nimport torchvision.transforms as transforms\n\n\ntrain_on_gpu = torch.cuda.is_available()\n\nif not train_on_gpu:\n    print('CUDA is not available.  Training on CPU ...')\nelse:\n    print('CUDA is available!  Training on GPU ...')\n    \n    \n    \nVGG16.eval() # eval mode\nprint(VGG16)\n\n\n\n\n\ndef VGG16_predict(img_path):\n    '''\n    Use pre-trained VGG-16 model to obtain index corresponding to \n    predicted ImageNet class for image at specified path\n    \n    Args:\n        img_path: path to an image\n        \n    Returns:\n        Index corresponding to VGG-16 model's prediction\n    '''\n    \n    ## Complete the function.\n    ## Load and pre-process an image from the given img_path\n    ## Return the *index* of the predicted class for that image\n    img_pil = Image.open(img_path)\n\n    #img = Image.open(test_img)\n\n    data_transform = transforms.Compose([transforms.RandomResizedCrop(224), \n                                          transforms.ToTensor()])\n    img_tensor = data_transform(img_pil)\n    img_tensor.unsqueeze_(0)\n    #print(img_tensor.shape)\n    output = VGG16(img_tensor.cuda())\n    # convert output probabilities to predicted class\n    _, preds_tensor = torch.max(output, 1)\n    preds = np.squeeze(preds_tensor.numpy()) if not train_on_gpu else np.squeeze(preds_tensor.cpu().numpy())\n\n    #print(preds)\n    \n    return preds # predicted class index\n","0b3ac862":"### returns \"True\" if a dog is detected in the image stored at img_path\ndef dog_detector(img_path):\n    index_n = VGG16_predict(img_path)\n    if(index_n>151 and index_n<268):\n        return True\n    else:\n        return False\n     # true\/false\n        \nprint(dog_detector(human_files_short[0]))\nprint(dog_detector(dog_files_short[0]))","7c6cb740":"### Test the performance of the dog_detector function\n### on the images in human_files_short and dog_files_short.\ntotal_human_files_s = len(human_files_short)\ntotal_dog_files_s = len(dog_files_short)\n#print(dog_detector(dog_files[0]))\n\n\ncorrect_human = 0;\nfor i in range(0, total_human_files_s-1):\n    if(dog_detector(human_files_short[i])==False):\n        correct_human +=1\n        \ncorrect_dogs = 0;\nfor j in range(0, total_dog_files_s-1):\n    if(dog_detector(dog_files_short[j])==True):\n        correct_dogs +=1\n        \n#print(correct_dogs)\n#print(total_dog_files_s)\nprint('Detected dog in human files {:.2f}% '.format(100-(correct_human\/total_human_files_s)*100))\nprint('Detected dog in dog files {:.2f}% '.format((correct_dogs\/total_dog_files_s)*100))","25b8a736":"import os\nfrom torchvision import datasets\n\nnum_workers = 0\nbatch_size = 10\n\ndata_dir = '\/data\/dog_images'\n\n### TODO: Write data loaders for training, validation, and test sets\n## Specify appropriate transforms, and batch_sizes\ndata_transforms = {\n    'train' : transforms.Compose([\n    transforms.Resize(256),\n    transforms.RandomResizedCrop(224),\n    transforms.RandomHorizontalFlip(), # randomly flip and rotate\n    transforms.RandomRotation(10),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    ]),\n\n    'valid' : transforms.Compose([\n    transforms.Resize(256),\n    transforms.CenterCrop(224),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    ]),\n\n    'test' : transforms.Compose([\n    transforms.Resize(256),\n    transforms.CenterCrop(224),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    ]),\n}\n\n\ntrain_dir = data_dir + '\/train'\nvalid_dir = data_dir + '\/valid'\ntest_dir = data_dir + '\/test'\n\nimage_datasets = {\n    'train' : datasets.ImageFolder(root=train_dir,transform=data_transforms['train']),\n    'valid' : datasets.ImageFolder(root=valid_dir,transform=data_transforms['valid']),\n    'test' : datasets.ImageFolder(root=test_dir,transform=data_transforms['test'])\n}\n\n# Loading Dataset\nloaders_scratch = {\n    'train' : torch.utils.data.DataLoader(image_datasets['train'],batch_size = batch_size,shuffle=True),\n    'valid' : torch.utils.data.DataLoader(image_datasets['valid'],batch_size = batch_size),\n    'test' : torch.utils.data.DataLoader(image_datasets['test'],batch_size = batch_size)    \n}\n\n\n\n#loaders_scratch = {\"train\" : train_loader, \"test\" : test_loader}\n\n\n\nprint(loaders_scratch['train'])\n#print(len(train_data))\n","a4becb09":"import torch.nn as nn\nimport torch.nn.functional as F\n\n# define the CNN architecture\nclass Net(nn.Module):\n    ### choose an architecture, and complete the class\n    def __init__(self):\n        super(Net, self).__init__()\n        ## Define layers of a CNN\n        self.conv1 = nn.Conv2d(3, 16, 3)\n        self.conv2 = nn.Conv2d(16, 32, 3)\n        self.conv3 = nn.Conv2d(32, 64, 3)\n        self.conv4 = nn.Conv2d(64, 128, 3)\n        self.conv5 = nn.Conv2d(128, 256, 3)\n        \n        self.fc1 = nn.Linear(256 * 6 * 6, 133)\n        self.max_pool = nn.MaxPool2d(2, 2,ceil_mode=True)\n        \n        self.dropout = nn.Dropout(0.20)\n        \n        self.conv_bn1 = nn.BatchNorm2d(224,3)\n        self.conv_bn2 = nn.BatchNorm2d(16)\n        self.conv_bn3 = nn.BatchNorm2d(32)\n        self.conv_bn4 = nn.BatchNorm2d(64)\n        self.conv_bn5 = nn.BatchNorm2d(128)\n        self.conv_bn6 = nn.BatchNorm2d(256)\n        \n    def forward(self, x):\n        ## Define forward behavior\n        x = F.relu(self.conv1(x))\n        x = self.max_pool(x)\n        x = self.conv_bn2(x)\n\n        x = F.relu(self.conv2(x))\n        x = self.max_pool(x)\n        x = self.conv_bn3(x)\n\n        x = F.relu(self.conv3(x))\n        x = self.max_pool(x)\n        x = self.conv_bn4(x)\n\n        x = F.relu(self.conv4(x))\n        x = self.max_pool(x)\n        x = self.conv_bn5(x)\n\n        x = F.relu(self.conv5(x))\n        x = self.max_pool(x)\n        x = self.conv_bn6(x)\n\n        x = x.view(-1, 256 * 6 * 6)\n\n        x = self.dropout(x)\n        x = self.fc1(x)\n        return x\n\n\n# instantiate the CNN\nmodel_scratch = Net()\nprint(model_scratch)\n# move tensors to GPU if CUDA is available\nif use_cuda:\n    model_scratch.cuda()","2ada6f30":"import torch.optim as optim\n\n## select loss function\ncriterion_scratch = nn.CrossEntropyLoss()\n\n### select optimizer\noptimizer_scratch = optim.SGD(model_scratch.parameters(), lr=0.001)","1b2740b9":"def train(n_epochs, loaders, model, optimizer, criterion, use_cuda, save_path):\n    \"\"\"returns trained model\"\"\"\n    # initialize tracker for minimum validation loss\n    valid_loss_min = np.Inf \n    \n    for epoch in range(1, n_epochs+1):\n        # initialize variables to monitor training and validation loss\n        train_loss = 0.0\n        valid_loss = 0.0\n        \n        ###################\n        # train the model #\n        ###################\n        model.train()\n        for batch_idx, (data, target) in enumerate(loaders['train']):\n            # move to GPU\n            if use_cuda:\n                data, target = data.cuda(), target.cuda()\n            ## find the loss and update the model parameters accordingly\n            ## record the average training loss, using something like\n            ## train_loss = train_loss + ((1 \/ (batch_idx + 1)) * (loss.data - train_loss))\n            # clear the gradients of all optimized variables\n            optimizer.zero_grad()\n            # forward pass: compute predicted outputs by passing inputs to the model\n            output = model(data)\n            # calculate the batch loss\n            loss = criterion(output, target)\n            # backward pass: compute gradient of the loss with respect to model parameters\n            loss.backward()\n            # perform a single optimization step (parameter update)\n            optimizer.step()\n            # update training loss\n            # train_loss += loss.item()*data.size(0)\n            train_loss = train_loss + ((1 \/ (batch_idx + 1)) * (loss.data - train_loss))\n            \n        ######################    \n        # validate the model #\n        ######################\n        model.eval()\n        \n        for batch_idx, (data, target) in enumerate(loaders['valid']):\n            # move to GPU\n            if use_cuda:\n                data, target = data.cuda(), target.cuda()\n            ## update the average validation loss\n            # forward pass: compute predicted outputs by passing inputs to the model\n            output = model(data)\n            # calculate the batch loss\n            loss = criterion(output, target)\n            # update average validation loss \n            valid_loss = valid_loss + ((1 \/ (batch_idx + 1)) * (loss.data - valid_loss))\n            \n            \n        # calculate average losses\n        train_loss = train_loss\/len(loaders['train'].dataset)\n        valid_loss = valid_loss\/len(loaders['valid'].dataset)\n            \n        # print training\/validation statistics \n        print('Epoch: {} \\tTraining Loss: {:.6f} \\tValidation Loss: {:.6f}'.format(\n            epoch, \n            train_loss,\n            valid_loss\n            ))\n        \n        ## TODO: save the model if validation loss has decreased\n        ## save the model if validation loss has decreased\n        if valid_loss <= valid_loss_min:\n            print('Validation loss decreased ({:.6f} --> {:.6f}).  Saving model ...'.format(\n            valid_loss_min,\n            valid_loss))\n            torch.save(model.state_dict(), save_path)\n            valid_loss_min = valid_loss    \n    # return trained model\n    return model\n\n\n# train the model\nmodel_scratch = train(10, loaders_scratch, model_scratch, optimizer_scratch, criterion_scratch, use_cuda, 'model_scratch.pt')\n\n# load the model that got the best validation accuracy\nmodel_scratch.load_state_dict(torch.load('model_scratch.pt'))","e8263d18":"def test(loaders, model, criterion, use_cuda):\n\n    # monitor test loss and accuracy\n    test_loss = 0.\n    correct = 0.\n    total = 0.\n\n    model.eval()\n    for batch_idx, (data, target) in enumerate(loaders['test']):\n        # move to GPU\n        if use_cuda:\n            data, target = data.cuda(), target.cuda()\n        # forward pass: compute predicted outputs by passing inputs to the model\n        output = model(data)\n        # calculate the loss\n        loss = criterion(output, target)\n        # update average test loss \n        test_loss = test_loss + ((1 \/ (batch_idx + 1)) * (loss.data - test_loss))\n        # convert output probabilities to predicted class\n        pred = output.data.max(1, keepdim=True)[1]\n        # compare predictions to true label\n        correct += np.sum(np.squeeze(pred.eq(target.data.view_as(pred))).cpu().numpy())\n        total += data.size(0)\n            \n    print('Test Loss: {:.6f}\\n'.format(test_loss))\n\n    print('\\nTest Accuracy: %2d%% (%2d\/%2d)' % (\n        100. * correct \/ total, correct, total))\n\n# call test function    \ntest(loaders_scratch, model_scratch, criterion_scratch, use_cuda)","d5b3799e":"## Specify data loaders\ndata_dir = '\/data\/dog_images'\n\ntrain_dir = os.path.join(data_dir, 'train')\ntest_dir = os.path.join(data_dir, 'test')\nvalid_dir = os.path.join(data_dir, 'valid')\n\nfrom torchvision import utils\n\n#data_transform = transforms.Compose([transforms.RandomResizedCrop(224),transforms.ToTensor()])\n\ndata_transforms = {\n    'train' : transforms.Compose([\n    transforms.Resize(256),\n    transforms.RandomResizedCrop(224),\n    transforms.RandomHorizontalFlip(), # randomly flip and rotate\n    transforms.RandomRotation(10),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    ]),\n\n    'valid' : transforms.Compose([\n    transforms.Resize(256),\n    transforms.CenterCrop(224),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    ]),\n\n    'test' : transforms.Compose([\n    transforms.Resize(256),\n    transforms.CenterCrop(224),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    ]),\n}\n\ntrain_data = datasets.ImageFolder(train_dir, transform=data_transforms['train'])\ntest_data = datasets.ImageFolder(test_dir, transform=data_transforms['test'])\nvalid_data = datasets.ImageFolder(valid_dir, transform=data_transforms['valid'])\n\nprint('Num training images: ',len(train_data))\nprint('Num test images: ',len(test_data))\nprint('Num validaion images: ',len(valid_data))\n\nbatch_size = 20\nnum_workers = 0\ntrain_loader = torch.utils.data.DataLoader(train_data, batch_size=batch_size, num_workers=num_workers, shuffle=True)\ntest_loader = torch.utils.data.DataLoader(test_data, batch_size=batch_size, num_workers=num_workers, shuffle=True)\nvalid_loader = torch.utils.data.DataLoader(valid_data, batch_size=batch_size, num_workers=num_workers, shuffle=True)\n\nloaders = {'train':train_loader,'test':test_loader,'valid':valid_loader}\n\n#Displaying Trainign data\n############\ndef display_img(inp):\n    inp = inp.numpy().transpose((1, 2, 0))\n    inp = np.clip(inp, 0, 1)\n    \n    fig = plt.figure(figsize=(50, 25))\n    plt.axis('off')\n    plt.imshow(inp)\n    plt.pause(0.001)\n# Display!\ndataiter = iter(test_loader)\nimages, labels = dataiter.next()\n# Convert the batch to a grid.\ngrid = utils.make_grid(images[:5])\ndisplay_img(grid)","874b87bd":"import torchvision.models as models\nimport torch.nn as nn\n\n## Specify model architecture \nmodel_transfer = models.resnet50(pretrained=True)\n\n\nfor param in model_transfer.parameters():\n    param.requires_grad = False\n    \nmodel_transfer.fc = nn.Linear(2048, 133, bias=True)    \nfc_parameters = model_transfer.fc.parameters()\n\nfor param in fc_parameters:\n    param.requires_grad = True\n    \nif use_cuda:\n    model_transfer = model_transfer.cuda()\n    print(model_transfer)","5989b2e4":"criterion_transfer = nn.CrossEntropyLoss()\noptimizer_transfer = optim.SGD(model_transfer.fc.parameters(), lr=0.001)","d94b4478":"print(use_cuda)\nn_epochs = 15\n\n#model_transfer.train()\n\ndef train(n_epochs, loader, model, optimizer, criterion, use_cuda, save_path):\n    valid_loss_min = np.Inf\n    for epoch in range(1, n_epochs+1):\n        # initialize variables to monitor training and validation loss\n        train_loss = 0.0\n        valid_loss = 0.0\n        #train_loss = 0.0\n        model.train()\n        for batch_i, (data, target) in enumerate(loader['train']):\n            if use_cuda:\n                data, target = data.cuda(), target.cuda()\n            optimizer.zero_grad()\n            output = model(data)\n            loss = criterion(output, target)\n            loss.backward()\n            optimizer.step()\n            train_loss = train_loss + ((1 \/ (batch_i + 1)) * (loss.data - train_loss))\n            \n            if batch_i % 100 == 0:\n                print('Epoch %d, Batch %d loss: %.6f' %\n                  (epoch, batch_i + 1, train_loss))\n                \n        model.eval()\n        for batch_i, (data, target) in enumerate(loaders['valid']):\n            # move to GPU\n            if use_cuda:\n                data, target = data.cuda(), target.cuda()\n            ## update the average validation loss\n            output = model(data)\n            loss = criterion(output, target)\n            valid_loss = valid_loss + ((1 \/ (batch_i + 1)) * (loss.data - valid_loss))\n\n            \n        # print training\/validation statistics \n        print('Epoch: {} \\tTraining Loss: {:.6f} \\tValidation Loss: {:.6f}'.format(\n            epoch, \n            train_loss,\n            valid_loss\n            ))\n        \n        ## TODO: save the model if validation loss has decreased\n        if valid_loss < valid_loss_min:\n            torch.save(model.state_dict(), save_path)\n            print('Validation loss decreased ({:.6f} --> {:.6f}).  Saving model'.format(\n            valid_loss_min,\n            valid_loss))\n            valid_loss_min = valid_loss\n            \n    return model\n\n# train the model\nmodel_transfer = train(n_epochs, loaders, model_transfer, optimizer_transfer, criterion_transfer, use_cuda, 'model_transfer.pt')\n\n# load the model that got the best validation accuracy (uncomment the line below)\nmodel_transfer.load_state_dict(torch.load('model_transfer.pt'))","1b3476fc":"test(loaders, model_transfer, criterion_transfer, use_cuda)","1cf1f78b":"### Write a function that takes a path to an image as input\n### and returns the dog breed that is predicted by the model.\n\n# list of class names by index, i.e. a name can be accessed like class_names[0]\nclass_names = [item[4:].replace(\"_\", \" \") for item in loaders['train'].dataset.classes]\n\ndef predict_breed_transfer(img_path):\n    # load the image and return the predicted breed\n    image = Image.open(img_path).convert('RGB')\n    prediction_transform = transforms.Compose([transforms.Resize(size=(224, 224)),\n                                     transforms.ToTensor(), \n                                     transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])])\n\n    # discard the transparent, alpha channel (that's the :3) and add the batch dimension\n    image = prediction_transform(image)[:3,:,:].unsqueeze(0)\n    image = image.cuda()\n    \n    \n    \n    model_transfer.eval()\n    idx = torch.argmax(model_transfer(image))\n    return class_names[idx]","240a9285":"### Write your algorithm.\n### Feel free to use as many code cells as needed.\n\ndef run_app(img_path):\n    ## handle cases for a human face, dog, and neither\n    img = Image.open(img_path)\n    plt.imshow(img)\n    plt.show()\n    if(face_detector(img_path)):\n        print(\"Human Detected\")\n    elif(dog_detector(img_path)):\n        print(\"Dog detected\")\n        prediction = predict_breed_transfer(img_path)\n        print(\"Dog Breed: {0}\".format(prediction))  \n    else:\n        print(\"Neither dog not human detected\")","ced266af":"## Execute your algorithm from Step 6 on\n## at least 6 images on your computer.\n## Feel free to use as many code cells as needed.\n\n## suggested code, below\ncount = 0;\nfor file in np.hstack((human_files[:3], dog_files[:8])):\n    print(\"Input:\",count+1)\n    run_app(file)\n    count=count+1;","094c6ae9":"---\n<a id='step5'><\/a>\n## Step 5: Write your Algorithm\n\nWrite an algorithm that accepts a file path to an image and first determines whether the image contains a human, dog, or neither.  Then,\n- if a __dog__ is detected in the image, return the predicted breed.\n- if a __human__ is detected in the image, return the resembling dog breed.\n- if __neither__ is detected in the image, provide output that indicates an error.\n\nYou are welcome to write your own functions for detecting humans and dogs in images, but feel free to use the `face_detector` and `human_detector` functions developed above.  You are __required__ to use your CNN from Step 4 to predict dog breed.  \n\nSome sample output for our algorithm is provided below, but feel free to design your own user experience!\n\n![Sample Human Output](images\/sample_human_output.png)\n\n\n### (IMPLEMENTATION) Write your Algorithm","70550b95":"Given an image, this pre-trained VGG-16 model returns a prediction (derived from the 1000 possible categories in ImageNet) for the object that is contained in the image.","3134e28a":"We suggest the face detector from OpenCV as a potential way to detect human images in your algorithm, but you are free to explore other approaches, especially approaches that make use of deep learning :).  Please use the code cell below to design and test your own face detection algorithm.  If you decide to pursue this _optional_ task, report performance on `human_files_short` and `dog_files_short`.","67655430":"---\n<a id='step2'><\/a>\n## Step 2: Detect Dogs\n\nIn this section, I use a [pre-trained model](http:\/\/pytorch.org\/docs\/master\/torchvision\/models.html) to detect dogs in images.  \n\n### Obtain Pre-trained VGG-16 Model\n\nThe code cell below downloads the VGG-16 model, along with weights that have been trained on [ImageNet](http:\/\/www.image-net.org\/), a very large, very popular dataset used for image classification and other vision tasks.  ImageNet contains over 10 million URLs, each linking to an image containing an object from one of [1000 categories](https:\/\/gist.github.com\/yrevar\/942d3a0ac09ec9e5eb3a).  ","3eb9da99":"### (IMPLEMENTATION) Train and Validate the Model\n\nTrain and validate your model in the code cell below.  [Save the final model parameters](http:\/\/pytorch.org\/docs\/master\/notes\/serialization.html) at filepath `'model_scratch.pt'`.","bea078a1":"### (IMPLEMENTATION) Specify Loss Function and Optimizer\n\nI use the next code cell to specify a [loss function](http:\/\/pytorch.org\/docs\/stable\/nn.html#loss-functions) and [optimizer](http:\/\/pytorch.org\/docs\/stable\/optim.html).  Save the chosen loss function as `criterion_scratch`, and the optimizer as `optimizer_scratch` below.","cfbf1dcb":"### (IMPLEMENTATION) Specify Loss Function and Optimizer\n\nUsed the next code cell to specify a [loss function](http:\/\/pytorch.org\/docs\/master\/nn.html#loss-functions) and [optimizer](http:\/\/pytorch.org\/docs\/master\/optim.html).  Saved the chosen loss function as `criterion_transfer`, and the optimizer as `optimizer_transfer` below.","01e6d5a7":"---\n<a id='step6'><\/a>\n## Step 6: Test Your Algorithm\n\nIn this section, you will take your new algorithm for a spin!  What kind of dog does the algorithm think that _you_ look like?  If you have a dog, does it predict your dog's breed accurately?  If you have a cat, does it mistakenly think that your cat is a dog?\n\n### (IMPLEMENTATION) Test Your Algorithm on Sample Images!\n\nTest your algorithm at least six images on your computer.  Feel free to use any images you like.  Use at least two human and two dog images.  \n","aea67038":"### (IMPLEMENTATION) Assess the Human Face Detector\n","9ed8126f":"### (IMPLEMENTATION) Model Architecture\n\nCreate a CNN to classify dog breed.  Use the template in the code cell below.","8314bc95":"### (IMPLEMENTATION) Making Predictions with a Pre-trained Model","0b4de505":"<a id='step1'><\/a>\n## Step 1: Detect Humans\n\nIn this section, I will use OpenCV's implementation of [Haar feature-based cascade classifiers](http:\/\/docs.opencv.org\/trunk\/d7\/d8b\/tutorial_py_face_detection.html) to detect human faces in images.  \n\nOpenCV provides many pre-trained face detectors, stored as XML files on [github](https:\/\/github.com\/opencv\/opencv\/tree\/master\/data\/haarcascades).  I have downloaded one of these detectors and stored it in the `haarcascades` directory.  In the next code cell, I will demonstrate how to use this detector to find human faces in a sample image.","c7cd0fb7":"### (IMPLEMENTATION) Write a Dog Detector\n\nWhile looking at the [dictionary](https:\/\/gist.github.com\/yrevar\/942d3a0ac09ec9e5eb3a), you will notice that the categories corresponding to dogs appear in an uninterrupted sequence and correspond to dictionary keys 151-268, inclusive, to include all categories from `'Chihuahua'` to `'Mexican hairless'`.  Thus, in order to check to see if an image is predicted to contain a dog by the pre-trained VGG-16 model, I need only check if the pre-trained model predicts an index between 151 and 268 (inclusive).","1ce9aaae":"### (IMPLEMENTATION) Test the Model\n","1593ab83":"---\n<a id='step3'><\/a>\n## Step 3: Create a CNN to Classify Dog Breeds (from Scratch)\n\nNow that I have functions for detecting humans and dogs in images, I need a way to predict breed from images.  In this step, I will create a CNN that classifies dog breeds.  \n- | - \n<img src=\"images\/Brittany_02625.jpg\" width=\"100\"> | <img src=\"images\/Welsh_springer_spaniel_08203.jpg\" width=\"200\">\n\nIt is not difficult to find other dog breed pairs with minimal inter-class variation (for instance, Curly-Coated Retrievers and American Water Spaniels).  \n\nCurly-Coated Retriever | American Water Spaniel\n- | -\n<img src=\"images\/Curly-coated_retriever_03896.jpg\" width=\"200\"> | <img src=\"images\/American_water_spaniel_00648.jpg\" width=\"200\">\n\n\nLikewise, recall that labradors come in yellow, chocolate, and black.  Your vision-based algorithm will have to conquer this high intra-class variation to determine how to classify all of these different shades as the same breed.  \n\nYellow Labrador | Chocolate Labrador | Black Labrador\n\n<img src=\"images\/Labrador_retriever_06457.jpg\" width=\"150\"> | <img src=\"images\/Labrador_retriever_06455.jpg\" width=\"240\"> | <img src=\"images\/Labrador_retriever_06449.jpg\" width=\"220\">\n\n\n### (IMPLEMENTATION) Specify Data Loaders for the Dog Dataset\n\nUse the code cell below to write three separate [data loaders](http:\/\/pytorch.org\/docs\/stable\/data.html#torch.utils.data.DataLoader) for the training, validation, and test datasets of dog images (located at `dog_images\/train`, `dog_images\/valid`, and `dog_images\/test`, respectively). ","fc2c8674":"Before using any of the face detectors, it is standard procedure to convert the images to grayscale.  The `detectMultiScale` function executes the classifier stored in `face_cascade` and takes the grayscale image as a parameter.  \n\nIn the above code, `faces` is a numpy array of detected faces, where each row corresponds to a detected face.  Each detected face is a 1D array with four entries that specifies the bounding box of the detected face.  The first two entries in the array (extracted in the above code as `x` and `y`) specify the horizontal and vertical positions of the top left corner of the bounding box.  The last two entries in the array (extracted here as `w` and `h`) specify the width and height of the box.\n\n### Write a Human Face Detector","ab782a95":"### (IMPLEMENTATION) Predict Dog Breed with the Model\n\nI wrote a function that takes an image path as input and returns the dog breed (`Affenpinscher`, `Afghan hound`, etc) that is predicted by your model.  ","11774e77":"### (IMPLEMENTATION) Train and Validate the Model\n\nTrain and validate the model in the code cell below.  [Save the final model parameters](http:\/\/pytorch.org\/docs\/master\/notes\/serialization.html) at filepath `'model_transfer.pt'`.","0176d0ac":"### (IMPLEMENTATION) Model Architecture\n\nI used the transfer learning to create a CNN to classify dog breed.  Use the code cell below, and saved my initialized model as the variable `model_transfer`.","76dd4857":"### (IMPLEMENTATION) Test the Model\n\nI tried out my model on the test dataset of dog images.  I used the code cell below to calculate and print the test loss and accuracy.  ","4115b2f7":"---\n<a id='step4'><\/a>\n## Step 4: Create a CNN to Classify Dog Breeds (using Transfer Learning)\n\n### (IMPLEMENTATION) Specify Data Loaders for the Dog Dataset\n\ni used the code cell below to write three separate [data loaders](http:\/\/pytorch.org\/docs\/master\/data.html#torch.utils.data.DataLoader) for the training, validation, and test datasets of dog images (located at `dogImages\/train`, `dogImages\/valid`, and `dogImages\/test`, respectively). ","34e2f4d6":"# Convolutional Neural Networks\n\n## Project: Write an Algorithm for a Dog Identification App \n\n---\n\n* [Step 0](#step0): Import Datasets\n* [Step 1](#step1): Detect Humans\n* [Step 2](#step2): Detect Dogs\n* [Step 3](#step3): Create a CNN to Classify Dog Breeds (from Scratch)\n* [Step 4](#step4): Create a CNN to Classify Dog Breeds (using Transfer Learning)\n* [Step 5](#step5): Write your Algorithm\n* [Step 6](#step6): Test Your Algorithm\n\n---\n<a id='step0'><\/a>\n## Step 0: Import Datasets\n\n"}}