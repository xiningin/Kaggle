{"cell_type":{"d96e1459":"code","a0fb5a2b":"code","3078b5e1":"code","d6801a0d":"code","0e6da5cf":"code","a5e0978a":"code","3bc23a03":"code","ff75ec72":"code","933c5b78":"code","3fe9e9e5":"markdown"},"source":{"d96e1459":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport lightgbm as lgb\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a0fb5a2b":"ds = pd.read_csv(\"..\/input\/create-folds\/train_folds.csv\")\ntest_ds = pd.read_csv(\"..\/input\/turkiye-is-bankasi-machine-learning-challenge-4\/MLChallenge4\/test.csv\")\nsample_sub = pd.read_csv(\"..\/input\/turkiye-is-bankasi-machine-learning-challenge-4\/MLChallenge4\/sample_submission.csv\")","3078b5e1":"# Might be disabled but the AUC score has increased\nds.drop([\"MC_NAME\",\"MC_ID\",\"MCC_CODE\"],axis=1,inplace=True)\ntest_ds.drop([\"MC_NAME\",\"MC_ID\",\"MCC_CODE\"],axis=1,inplace=True)","d6801a0d":"count_class_0, count_class_1 = ds.TARGET.value_counts()\nds_class_0 = ds[ds['TARGET'] == 0]\nds_class_1 = ds[ds['TARGET'] == 1]\n\nds_class_0_under = ds_class_0.sample(count_class_1)\nds = pd.concat([ds_class_0_under, ds_class_1], axis=0)\n\nprint('Random under-sampling:')\nprint(ds.TARGET.value_counts())\n\nds.TARGET.value_counts().plot(kind='bar', title='Count (target)');","0e6da5cf":"useful_features = [c for c in ds.columns if c not in (\"TARGET\", \"kfold\", \"TXN_TRM\")]\nobject_cols = [\"CST_NR\",\"CC_NR\",\"TXN_SOURCE\",\"TXN_ENTRY\",\"CITY\",\"COUNTRY\"]\ntest_ds = test_ds[useful_features]","a5e0978a":"final_predictions = []\nscores = []\nfor fold in range(5):\n    xtrain =  ds[ds.kfold != fold].reset_index(drop=True)\n    xvalid = ds[ds.kfold == fold].reset_index(drop=True)\n    xtest = test_ds.copy()\n\n    ytrain = xtrain.TARGET\n    yvalid = xvalid.TARGET\n    \n    xtrain = xtrain[useful_features]\n    xvalid = xvalid[useful_features]\n    \n    ordinal_encoder = OrdinalEncoder()\n    xtrain[object_cols] = ordinal_encoder.fit_transform(xtrain[object_cols])\n    xvalid[object_cols] = ordinal_encoder.fit_transform(xvalid[object_cols])\n    xtest[object_cols] = ordinal_encoder.fit_transform(xtest[object_cols])\n    \n    scalar = StandardScaler()\n    xtrain = scalar.fit_transform(xtrain)\n    xvalid = scalar.transform(xvalid)\n    xtest = scalar.transform(xtest)\n    \n    model = lgb.LGBMClassifier(device=\"gpu\",learning_rate= 0.02596321368138901,min_data_in_leaf = 32,\n                                 max_depth = 6,lambda_l1 = 7.630191913240836e-07,lambda_l2 = 0.0027853769228804565,\n                                 num_leaves = 209,feature_fraction = 0.4625970511289835,bagging_fraction = 0.6179691085842236,\n                                 bagging_freq = 3,min_child_samples = 72,subsample = 0.42702244438760295)\n    model.fit(xtrain, ytrain)\n    preds_valid = model.predict_proba(xvalid)[:,1]\n    test_preds = model.predict_proba(xtest)[:,1]\n    final_predictions.append(test_preds)\n    print(fold, roc_auc_score(yvalid, preds_valid))\n    scores.append(roc_auc_score(yvalid, preds_valid))\nprint(\"The average AUC score is: \", np.mean(scores))","3bc23a03":"preds = np.mean(np.column_stack(final_predictions), axis=1)\npreds","ff75ec72":"sample_sub.Predicted = preds\nsample_sub.to_csv(\"submission.csv\",index=False)","933c5b78":"cols = list(test_ds.columns)\nfeature_imp = pd.DataFrame(sorted(zip(model.feature_importances_,cols)), columns=['Value','Feature'])\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).iloc[:50])\nplt.title('LGBM Most Important Features')\nplt.tight_layout()\nplt.show()","3fe9e9e5":"SVC average AUC score is: 0.737 without any improvement"}}