{"cell_type":{"2c7cfc8e":"code","7029a360":"code","d6ec2f77":"code","2ab8588a":"code","c2ee1749":"code","a67fd53d":"code","0f37192d":"code","bf12617f":"code","d3d2f5e2":"code","d220bb6b":"code","94497664":"code","0cabd097":"code","3c5eb59a":"code","f717c30c":"code","b8c7d712":"code","afcf133e":"code","d55f0690":"code","918164bb":"code","0a9dfcf4":"code","6b40f3d0":"code","adb863a5":"code","d416e92a":"code","4b713481":"code","01053bc2":"code","8175684f":"code","ed6f9e2c":"code","40330ad9":"code","f6be0bb7":"code","1dd9c738":"code","adeb489b":"code","a5c1a762":"code","d8592aa6":"code","6673065c":"code","c2edb75a":"code","f1b73f2d":"code","70c91c57":"code","b5a6d6a1":"code","62724c95":"markdown","4787980a":"markdown","3eb50562":"markdown","f4b7d747":"markdown","2d0ecfad":"markdown","b808183d":"markdown","869dcf80":"markdown","b8ab9b98":"markdown","56e33cea":"markdown","f81afd7c":"markdown","ec877012":"markdown","4f3759d7":"markdown"},"source":{"2c7cfc8e":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X, \uc2dc\ud5d8\ud658\uacbd\uacfc \uc720\uc0ac\ud558\uac8c \ud30c\uc77c\uc77d\uae30 \uad6c\ud604)\nimport pandas as pd\ndf = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\ny_train = X_train['Outcome']\nX_train = X_train.drop(columns=['Outcome'])\ny_test = X_test['Outcome']\nX_test = X_test.drop(columns=['Outcome'])\n\nX_train.shape, y_train.shape, X_test.shape, y_test.shape","7029a360":"df.head()","d6ec2f77":"# \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport pandas as pd","2ab8588a":"# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 (\uc0dd\ub7b5)\nX_train.shape, y_train.shape, X_test.shape","c2ee1749":"X_train.head()","a67fd53d":"y_train.head()","0f37192d":"y_train.value_counts()","bf12617f":"X_train.info()","d3d2f5e2":"X_train.isnull().sum()","d220bb6b":"X_test.isnull().sum()","94497664":"X_train.describe()","0cabd097":"#\uc774\uc0c1\uce58 \ucc98\ub9ac\n#Train\nprint('Glucose:',len(X_train[X_train['Glucose']==0]))\nprint('BloodPressure:',len(X_train[X_train['BloodPressure']==0]))\nprint('SkinThickness:',len(X_train[X_train['SkinThickness']==0]))\nprint('Insulin:',len(X_train[X_train['Insulin']==0]))\nprint('BMI:',len(X_train[X_train['BMI']==0]))","3c5eb59a":"#Test\nprint('Glucose:',len(X_test[X_test['Glucose']==0]))\nprint('BloodPressure:',len(X_test[X_test['BloodPressure']==0]))\nprint('SkinThickness:',len(X_test[X_test['SkinThickness']==0]))\nprint('Insulin:',len(X_test[X_test['Insulin']==0]))\nprint('BMI:',len(X_test[X_test['BMI']==0]))","f717c30c":"# \ud3ec\ub3c4\ub2f9 \uc774\uc0c1\uce58 \uc0ad\uc81c\ndel_idx = X_train[(X_train['Glucose']==0)].index\ndel_idx","b8c7d712":"print('Glucose \uc774\uc0c1\uce58 \uc0ad\uc81c \uc804 :', X_train.shape, y_train.shape)\nX_train = X_train.drop(index=del_idx, axis=0)\ny_train = y_train.drop(index=del_idx, axis=0)\nprint('Glucose \uc774\uc0c1\uce58 \uc0ad\uc81c \ud6c4 :', X_train.shape, y_train.shape)","afcf133e":"# \ud3ec\ub3c4\ub2f9\uc744 \uc81c\uc678\ud55c \uc774\uc0c1\uce58, \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uccb4\ncols = ['BloodPressure', 'SkinThickness', 'Insulin', 'BMI']\ncols_mean = X_train[cols].mean()\nX_train[cols].replace(0, cols_mean)","d55f0690":"# \uc2a4\ucf00\uc77c\ub9c1\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.fit_transform(X_test)","918164bb":"# \uc2a4\ucf00\uc77c \ud6c4 \ub370\uc774\ud130 \ud655\uc778\npd.DataFrame(X_train_scaled, columns=X_train.columns).head()","0a9dfcf4":"# library import\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\nfrom sklearn.preprocessing import (OneHotEncoder, LabelEncoder, StandardScaler, \n                                   MinMaxScaler, PowerTransformer, QuantileTransformer)\nfrom sklearn.model_selection import KFold, StratifiedKFold, train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nfrom sklearn.linear_model import LinearRegression, ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n%matplotlib inline\n\nwarnings.filterwarnings(action='ignore')","6b40f3d0":"#\ud68c\uadc0\ubb38\uc81c\nfrom sklearn.linear_model import LinearRegression, ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor\n\nlr = LinearRegression()\nenet = ElasticNet(random_state=42)\ndt = DecisionTreeRegressor(random_state=42)\nrf = RandomForestRegressor(random_state=42)\nada = AdaBoostRegressor(random_state=42)\ngbr = GradientBoostingRegressor(random_state=42)\n\n# cat = CatBoostRegressor(silent=True, random_state=42)\n\nmodels_r = [lr, enet, dt, rf, ada, gbr]","adb863a5":"#\ubd84\ub958\ubb38\uc81c\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nlr_c = LogisticRegression()\nknn_c = KNeighborsClassifier()\ndt_c =DecisionTreeClassifier()\nsvm_c = SVC()\nrf_c = RandomForestClassifier()\n\nmodels_c = [lr_c,knn_c, dt_c, svm_c, rf_c]","d416e92a":"for model in models_c:\n    name = model.__class__.__name__\n    scores = cross_val_score(model, X=X_train_scaled, y=y_train, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)\n    mse = (-1) * np.mean(scores) # negative mean squared error\ub85c \uc124\uc815\ud588\uc73c\ubbc0\ub85c -1\uc744 \uacf1\ud574 \ubd80\ud638\ub97c \ub9de\ucdb0\uc90d\ub2c8\ub2e4.\n    print(f'Model : {name} & RMSE: {np.sqrt(mse):.4f}')","4b713481":"#\ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\nfrom scipy.stats import randint\nparam_distribs = {'n_estimators' : randint(low=100, high = 500), 'max_features':['auto','sqrt','log2']}\nfrom sklearn.model_selection import RandomizedSearchCV\nrandom_search_rf = RandomizedSearchCV(RandomForestClassifier(),param_distributions = param_distribs, n_iter=20, cv=5)\nrandom_search_rf.fit(X_train_scaled, y_train)","01053bc2":"print(f\"best parmeter : {random_search_rf.best_params_}\")\nprint(f\"best score : {random_search_rf.best_score_}\")","8175684f":"model_final = RandomForestClassifier(**random_search_rf.best_params_)\nmodel_final.fit(X_train_scaled, y_train)\npredictions_final = model_final.predict(X_test_scaled)","ed6f9e2c":"round(model_final.score(X_train_scaled, y_train) * 100, 2) ","40330ad9":"output = pd.DataFrame({'idx': y_test.index, 'Outcome': predictions_final})\noutput.head()","f6be0bb7":"# \uc218\ud5d8\ubc88\ud638.csv\ub85c \ucd9c\ub825\noutput.to_csv('1234567.csv', index=False)","1dd9c738":"#\ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8 \uc608\uce21( \ucc44\uc810 \uacb0\uacfc \uc6b0\ub9ac\ub294 \ubaa8\ub984)\nmodel_final.fit(X_train_scaled, y_train)\npredictions = model_final.predict(X_test)","adeb489b":"round(model_final.score(X_test_scaled, y_test) * 100, 2) ","a5c1a762":"from scipy.stats import randint\nparam_distribs = {'kernel' : ['rbf'],'C': randint(low=0.001, high = 100), 'gamma':randint(low=0.001, high = 100)}\nfrom sklearn.model_selection import RandomizedSearchCV\nrandom_search_svm = RandomizedSearchCV(svm_c,param_distributions = param_distribs, n_iter=50, cv=5)\nrandom_search_svm.fit(X_train_scaled, y_train)","d8592aa6":"print(f\"best parmeter : {random_search_svm.best_params_}\")\nprint(f\"best score : {random_search_svm.best_score_}\")\nprint(f\"testset score : {random_search_svm.score(X_test_scaled, y_test)}\")","6673065c":"#svc\nsvm_c.fit(X_train_scaled, y_train)\npredictions = svm_c.predict(X_test)","c2edb75a":"#lr\nlr_c.fit(X_train_scaled, y_train)\npredictions = lr_c.predict(X_test)","f1b73f2d":"from scipy.stats import randint\nparam_distribs = {'C' : randint(low=0.001, high = 100)}\nfrom sklearn.model_selection import RandomizedSearchCV\nrandom_search_lr = RandomizedSearchCV(lr_c,param_distributions = param_distribs, n_iter=20, cv=5)\nrandom_search_lr.fit(X_train_scaled, y_train)","70c91c57":"print(f\"best parmeter : {random_search_lr.best_params_}\")\nprint(f\"best score : {random_search_lr.best_score_}\")\nprint(f\"testset score : {random_search_lr.score(X_test_scaled, y_test)}\")","b5a6d6a1":"round(model.score(X_test, y_test) * 100, 2) # 60\uc810\ub300\ub85c \ub0ae\uc740 \uc815\ud655\ub3c4\ub97c \ubcf4\uc5ec\uc90c","62724c95":"# svm","4787980a":"## EDA","3eb50562":"# \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8","f4b7d747":"## Start","2d0ecfad":"# logistic_Regression","b808183d":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","869dcf80":"# **#\uc5b4\ub5a4 \ubaa8\ub378\uc774 \uac00\uc7a5 \uc88b\uc744\uae4c?**","b8ab9b98":"## \uacb0\uacfc \uccb4\uc810 (\uc218\ud5d8\uc790\ub294 \uc54c \uc218 \uc5c6\ub294 \ubd80\ubd84\uc784)","56e33cea":"\ud2b8\ub808\uc778\uc5d0\ub9cc 0\uc774 \uc788\ub294 \ud3ec\ub3c4\ub2f9(Glucose)\ub294 \uc0ad\uc81c\n\ub098\uba38\uc9c0\ub294 \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uccb4 \ud558\uc5ec \uc774\uc0c1\uce58\ub97c \ucc98\ub9ac\ud568","f81afd7c":"## \ub2f9\ub1e8\ubcd1 \uc5ec\ubd80 \ud310\ub2e8\n- \uc774\uc0c1\uce58 \ucc98\ub9ac (Glucose, BloodPressure, SkinThickness, Insulin, BMI\uac00 0\uc778 \uac12)","ec877012":"## [\ucc38\uace0]\uc791\uc5c5\ud6152 \ubb38\uad6c\n- \ucd9c\ub825\uc744 \uc6d0\ud558\uc2e4 \uacbd\uc6b0 print() \ud568\uc218 \ud65c\uc6a9\n- \uc608\uc2dc) print(df.head())\n- getcwd(), chdir() \ub4f1 \uc791\uc5c5 \ud3f4\ub354 \uc124\uc815 \ubd88\ud544\uc694\n- \ud30c\uc77c \uacbd\ub85c \uc0c1 \ub0b4\ubd80 \ub4dc\ub77c\uc774\ube0c \uacbd\ub85c(C: \ub4f1) \uc811\uadfc \ubd88\uac00\n\n### \ub370\uc774\ud130 \ud30c\uc77c \uc77d\uae30 \uc608\uc81c\n- import pandas as pd\n- X_test = pd.read_csv(\"data\/X_test.csv\")\n- X_train = pd.read_csv(\"data\/X_train.csv\")\n- y_train = pd.read_csv(\"data\/y_train.csv\")\n\n### \uc0ac\uc6a9\uc790 \ucf54\ub529\n\n### \ub2f5\uc548 \uc81c\ucd9c \ucc38\uace0\n- \uc544\ub798 \ucf54\ub4dc \uc608\uce21\ubcc0\uc218\uc640 \uc218\ud5d8\ubc88\ud638\ub97c \uac1c\uc778\ubcc4\ub85c \ubcc0\uacbd\ud558\uc5ec \ud65c\uc6a9\n- pd.DataFrame({'cust_id': X_test.cust_id, 'gender': pred}).to_csv('003000000.csv', index=False)","4f3759d7":"## \ub370\uc774\ud130 \uc804\ucc98\ub9ac"}}