{"cell_type":{"c21460cb":"code","dc02a99b":"code","bd14060a":"code","992db7f7":"code","e2081469":"code","53d446ef":"code","e9cf75ee":"code","820fe29d":"code","7bfabe66":"code","5d7943c6":"code","1a8aaa5d":"code","dd2533cb":"markdown","8823d56e":"markdown"},"source":{"c21460cb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom subprocess import check_output\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.layers.recurrent import LSTM\nfrom keras.models import Sequential\nfrom sklearn.model_selection import  train_test_split\nimport time #helper libraries\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\nfrom numpy import newaxis","dc02a99b":"prices_dataset =  pd.read_csv('..\/input\/prices.csv', header=0)\nprices_dataset","bd14060a":"yahoo = prices_dataset[prices_dataset['symbol']=='YHOO']\nyahoo_stock_prices = yahoo.close.values.astype('float32')\nyahoo_stock_prices = yahoo_stock_prices.reshape(1762, 1)\nyahoo_stock_prices.shape","992db7f7":"plt.plot(yahoo_stock_prices)\nplt.show()\n\nscaler = MinMaxScaler(feature_range=(0, 1))\nyahoo_stock_prices = scaler.fit_transform(yahoo_stock_prices)","e2081469":"train_size = int(len(yahoo_stock_prices) * 0.80)\ntest_size = len(yahoo_stock_prices) - train_size\ntrain, test = yahoo_stock_prices[0:train_size,:], yahoo_stock_prices[train_size:len(yahoo_stock_prices),:]\nprint(len(train), len(test))","53d446ef":"# convert an array of values into a dataset matrix\ndef create_dataset(dataset, look_back=1):\n\tdataX, dataY = [], []\n\tfor i in range(len(dataset)-look_back-1):\n\t\ta = dataset[i:(i+look_back), 0]\n\t\tdataX.append(a)\n\t\tdataY.append(dataset[i + look_back, 0])\n\treturn np.array(dataX), np.array(dataY)","e9cf75ee":"# reshape into X=t and Y=t+1\nlook_back = 1\ntrainX, trainY = create_dataset(train, look_back)\ntestX, testY = create_dataset(test, look_back)","820fe29d":"trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))","7bfabe66":"#Step 2 Build Model\nmodel = Sequential()\n\nmodel.add(LSTM(\n    input_dim=1,\n    output_dim=50,\n    return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(\n    100,\n    return_sequences=False))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(\n    output_dim=1))\nmodel.add(Activation('linear'))\n\nstart = time.time()\nmodel.compile(loss='mse', optimizer='rmsprop')\nprint ('compilation time : ', time.time() - start)","5d7943c6":"model.fit(\n    trainX,\n    trainY,\n    batch_size=128,\n    nb_epoch=10,\n    validation_split=0.05)","1a8aaa5d":"def plot_results_multiple(predicted_data, true_data,length):\n    plt.plot(scaler.inverse_transform(true_data.reshape(-1, 1))[length:])\n    plt.plot(scaler.inverse_transform(np.array(predicted_data).reshape(-1, 1))[length:])\n    plt.show()\n    \n#predict lenght consecutive values from a real one\ndef predict_sequences_multiple(model, firstValue,length):\n    prediction_seqs = []\n    curr_frame = firstValue\n    \n    for i in range(length): \n        predicted = []        \n        \n        print(model.predict(curr_frame[newaxis,:,:]))\n        predicted.append(model.predict(curr_frame[newaxis,:,:])[0,0])\n        \n        curr_frame = curr_frame[0:]\n        curr_frame = np.insert(curr_frame[0:], i+1, predicted[-1], axis=0)\n        \n        prediction_seqs.append(predicted[-1])\n        \n    return prediction_seqs\n\npredict_length=5\npredictions = predict_sequences_multiple(model, testX[0], predict_length)\nprint(scaler.inverse_transform(np.array(predictions).reshape(-1, 1)))\nplot_results_multiple(predictions, testY, predict_length)","dd2533cb":"based on \nhttps:\/\/github.com\/llSourcell\/How-to-Predict-Stock-Prices-Easily-Demo\nand\nhttp:\/\/machinelearningmastery.com\/time-series-prediction-lstm-recurrent-neural-networks-python-keras\/\n\nI just want to predict if a stock will rise based on previous information","8823d56e":"## work in progress"}}