{"cell_type":{"ed17f8c2":"code","6d5c43fc":"code","312dbaf5":"code","dc244b47":"code","60d4918e":"code","7c165ee7":"code","e03b9f94":"code","da5eff13":"code","46266d8b":"code","18e55851":"code","db95a191":"code","4e023502":"code","373afbaa":"code","dfecc20e":"code","126ebc90":"code","7b0e2500":"code","ac7ea47a":"code","b1daecc6":"code","1aa81a60":"code","6a693246":"code","1140e4b2":"code","13d2ab82":"code","62a8b13e":"code","1c8c1b3c":"code","1859cb70":"code","4f65b554":"code","9c80d780":"code","d5580de6":"markdown","712a6600":"markdown","a451584e":"markdown","105be715":"markdown"},"source":{"ed17f8c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d5c43fc":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\nplt.style.use(\"fivethirtyeight\")\n%matplotlib inline\n\nfrom pandas_datareader.data import DataReader\n\nfrom datetime import datetime","312dbaf5":"tech_list = ['AAPL', 'GOOG', 'MSFT', 'AMZN']\nend = datetime.now()\n\nstart = datetime(end.year - 1, end.month, end.day)\nfor stock in tech_list:\n    globals()[stock] = DataReader(stock, 'yahoo', start, end)","dc244b47":"company_list = [AAPL, GOOG, MSFT, AMZN]\ncompany_name = [\"APPLE\", \"GOOGLE\", \"MICROSOFT\", \"AMAZON\"]\n\nfor company, com_name in zip(company_list, company_name):\n    company[\"company_name\"] = com_name\n    \ndf = pd.concat(company_list, axis = 0)\ndf.tail(10)","60d4918e":"AAPL.describe()","7c165ee7":"AAPL.info()","e03b9f94":"\nplt.figure(figsize=(12, 8))\nplt.subplots_adjust(top=1.25, bottom=1.2)\n\nfor i, company in enumerate(company_list, 1):\n    plt.subplot(2, 2, i)\n    company['Adj Close'].plot()\n    plt.ylabel('Adj Close')\n    plt.xlabel(None)\n    plt.title(f\"{tech_list[i - 1]}\")","da5eff13":"\nplt.figure(figsize=(12, 8))\nplt.subplots_adjust(top=1.25, bottom=1.2)\n\nfor i, company in enumerate(company_list, 1):\n    plt.subplot(2, 2, i)\n    company['Volume'].plot()\n    plt.ylabel('Volume')\n    plt.xlabel(None)\n    plt.title(f\"{tech_list[i - 1]}\")","46266d8b":"ma_day = [10, 20, 50]\n\nfor ma in ma_day:\n    for company in company_list:\n        column_name = f\"MA for {ma} days\"\n        company[column_name] = company['Adj Close'].rolling(ma).mean()","18e55851":"print(GOOG.columns)","db95a191":"df.groupby(\"company_name\").hist(figsize=(12, 12))","4e023502":"fig, axes = plt.subplots(nrows=2, ncols=2)\nfig.set_figheight(8)\nfig.set_figwidth(15)\n\nAAPL[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[0,0])\naxes[0,0].set_title('APPLE')\n\n\nGOOG[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[0,1])\naxes[0,1].set_title('GOOGLE')\n\nMSFT[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[1,0])\naxes[1,0].set_title('MICROSOFT')\n\nAMZN[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[1,1])\naxes[1,1].set_title('AMAZON')\n\nfig.tight_layout()","373afbaa":"# We'll use pct_change to find the percent change for each day\nfor company in company_list:\n    company['Daily Return'] = company['Adj Close'].pct_change()\n\n# Then we'll plot the daily return percentage\nfig, axes = plt.subplots(nrows=2, ncols=2)\nfig.set_figheight(8)\nfig.set_figwidth(15)\n\nAAPL['Daily Return'].plot(ax=axes[0,0], legend=True, linestyle='--', marker='o')\naxes[0,0].set_title('APPLE')\n\nGOOG['Daily Return'].plot(ax=axes[0,1], legend=True, linestyle='--', marker='o')\naxes[0,1].set_title('GOOGLE')\n\nMSFT['Daily Return'].plot(ax=axes[1,0], legend=True, linestyle='--', marker='o')\naxes[1,0].set_title('MICROSOFT')\n\nAMZN['Daily Return'].plot(ax=axes[1,1], legend=True, linestyle='--', marker='o')\naxes[1,1].set_title('AMAZON')\n\nfig.tight_layout()","dfecc20e":"plt.figure(figsize=(12, 12))\n\nfor i, company in enumerate(company_list, 1):\n    plt.subplot(2, 2, i)\n    sns.distplot(company['Daily Return'].dropna(), bins=100, color='purple')\n    plt.ylabel('Daily Return')\n    plt.title(f'{company_name[i - 1]}')","126ebc90":"# Grab all the closing prices for the tech stock list into one DataFrame\nclosing_df = DataReader(tech_list, 'yahoo', start, end)['Adj Close']\n\n# Let's take a quick look\nclosing_df.head()","7b0e2500":"# Make a new tech returns DataFrame\ntech_rets = closing_df.pct_change()\ntech_rets.head()","ac7ea47a":"rets = tech_rets.dropna()\n\narea = np.pi*20\n\nplt.figure(figsize=(12, 10))\nplt.scatter(rets.mean(), rets.std(), s=area)\nplt.xlabel('Expected return')\nplt.ylabel('Risk')\n\nfor label, x, y in zip(rets.columns, rets.mean(), rets.std()):\n    plt.annotate(label, xy=(x, y), xytext=(50, 50), textcoords='offset points', ha='right', va='bottom', arrowprops=dict(arrowstyle='-', color='blue', connectionstyle='arc3, rad=-0.3'))","b1daecc6":"df = DataReader('AAPL', data_source='yahoo', start='2012-01-01', end=datetime.now())","1aa81a60":"df","6a693246":"plt.figure(figsize=(16,8))\nplt.title('Close Price History')\nplt.plot(df['Close'])\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.show()","1140e4b2":"data = df.filter(['Close'])\ndataset = data.values\ntraining_data_len = int(np.ceil( len(dataset) * .8 ))\n\ntraining_data_len","13d2ab82":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset)\n\nscaled_data","62a8b13e":"#Create the scaled training data set\ntrain_data = scaled_data[0:int(training_data_len), :]\n#Split the data into x_train and y_train data sets\nx_train = []\ny_train = []\n\nfor i in range(60, len(train_data)):\n    x_train.append(train_data[i-60:i, 0])\n    y_train.append(train_data[i, 0])\n    if i<= 61:\n        print(x_train)\n        print(y_train)\n        print()\n        \n# Convert the x_train and y_train to numpy arrays \nx_train, y_train = np.array(x_train), np.array(y_train)\n\n#Reshape the data\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n# x_train.shape","1c8c1b3c":"from keras.models import Sequential\nfrom keras.layers import Dense, LSTM\n\nmodel = Sequential()\nmodel.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))\nmodel.add(LSTM(50, return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.fit(x_train, y_train, batch_size=1, epochs=1)","1859cb70":"test_data = scaled_data[training_data_len - 60: , ]\n\nx_test = []\ny_test = dataset[training_data_len: , ]\n\nfor i in range(60, len(test_data)):\n    x_test.append(test_data[i-60:i, 0])\n    \nx_test = np.array(x_test) \n\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1],1))\n\npredictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)\n\nrmse = np.sqrt(np.mean((predictions - y_test) ** 2))\n\nrmse","4f65b554":"# Plot the data\ntrain = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions\n# Visualize the data\nplt.figure(figsize=(16,8))\nplt.title('Model')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.plot(train['Close'])\nplt.plot(valid[['Close', 'Predictions']])\nplt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\nplt.show()","9c80d780":"valid","d5580de6":"**How much value do we put at risk by investing in a particular stock?**","712a6600":"**moving average of various stocks**","a451584e":"**daily return of the stock on average**","105be715":"**Change in price of the stock market overtime**"}}