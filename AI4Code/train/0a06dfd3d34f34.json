{"cell_type":{"f18fe90f":"code","7b146807":"code","7fc42e3d":"code","e4187045":"code","f3f1f1ca":"code","64963778":"code","64fe4e2b":"code","707dcebc":"code","98f64a54":"code","b5d0e650":"code","a332db8d":"code","214b3983":"code","b24b25fc":"code","5b3482ba":"code","948395b6":"code","61b20a7e":"code","45258e3a":"code","4f0c6a57":"code","1ac84d33":"code","53238e89":"code","632ba6b6":"code","81238c6e":"code","c8f8caee":"code","5ed60d72":"code","a44a736b":"code","e0fa466d":"code","fb7c7020":"code","a5b26c3f":"code","280ac2bc":"code","826a3eb5":"code","6fa0283e":"code","8ca1a048":"code","8ca9d124":"code","69220509":"code","fd1cac48":"code","57db3379":"code","fb23cc8a":"code","43c994f4":"code","31203890":"code","0b730456":"code","0950a6f1":"code","e2ebae3a":"code","3f658999":"code","208b4af1":"code","dc293fd5":"code","3ab72d73":"code","dc4c3dda":"code","a48b5ead":"code","f942541a":"code","33bc1f76":"code","69556613":"code","22ca3e04":"markdown","41b07cec":"markdown","aeadecf5":"markdown","bded11a2":"markdown","9673ab13":"markdown","3b249172":"markdown","b95dfce2":"markdown","e9cc8f46":"markdown","ac401605":"markdown","37f975f7":"markdown"},"source":{"f18fe90f":"# Loading libraries\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\nimport pandas_profiling as pp\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\n\n\n# Import datasets\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","7b146807":"train = pd.read_csv('..\/input\/learn-together\/train.csv')\ntest = pd.read_csv('..\/input\/learn-together\/test.csv')\n","7fc42e3d":"# Shape of the data:\nprint(\"Train shape is: \", train.shape)\nprint(\"Test shape is: \", test.shape)","e4187045":"train.head()","f3f1f1ca":"print(train.isna().sum())","64963778":"# check for missing values\nprint(train.isna().any().sum())\n","64fe4e2b":"test.head()","707dcebc":"test.isna().sum()","98f64a54":"print(test.isna().any().sum())","b5d0e650":"train.columns","a332db8d":"features = ['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology',\n       'Vertical_Distance_To_Hydrology', 'Horizontal_Distance_To_Roadways',\n       'Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm',\n       'Horizontal_Distance_To_Fire_Points', 'Wilderness_Area1',\n       'Wilderness_Area2', 'Wilderness_Area3', 'Wilderness_Area4',\n       'Soil_Type1', 'Soil_Type2', 'Soil_Type3', 'Soil_Type4', 'Soil_Type5',\n       'Soil_Type6', 'Soil_Type7', 'Soil_Type8', 'Soil_Type9', 'Soil_Type10',\n       'Soil_Type11', 'Soil_Type12', 'Soil_Type13', 'Soil_Type14',\n       'Soil_Type15', 'Soil_Type16', 'Soil_Type17', 'Soil_Type18',\n       'Soil_Type19', 'Soil_Type20', 'Soil_Type21', 'Soil_Type22',\n       'Soil_Type23', 'Soil_Type24', 'Soil_Type25', 'Soil_Type26',\n       'Soil_Type27', 'Soil_Type28', 'Soil_Type29', 'Soil_Type30',\n       'Soil_Type31', 'Soil_Type32', 'Soil_Type33', 'Soil_Type34',\n       'Soil_Type35', 'Soil_Type36', 'Soil_Type37', 'Soil_Type38',\n       'Soil_Type39', 'Soil_Type40']","214b3983":"target = ['Cover_Type']","b24b25fc":"X_train = train[features]","5b3482ba":"y_train = train[target]","948395b6":"#Look at a usual row from our features:\n\nX_train.iloc[:20].head(10)","61b20a7e":"y_train.head(10)","45258e3a":"# Train data has 56 columns and Test shape is 55. They must be equal ( in ML). Too the rows in X_train y_train and \n# tests data: X_test, y_test should be equal. \n#This will show us important later.\n\nX_train = train.drop(['Cover_Type'], axis=1)\ny_train = train['Cover_Type']\nX_test = test.drop(['Id'], axis=1)","4f0c6a57":"from sklearn.ensemble import RandomForestClassifier","1ac84d33":"#Split the Dataset into Training and Test Data \n\n\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, train_size=0.33, random_state=324)","53238e89":"print(X_train.shape)\nprint(y_train.shape)","632ba6b6":"print(X_test.shape)\nprint(y_test.shape)","81238c6e":"m = RandomForestClassifier(n_estimators=500)\nm.fit(X_train, y_train)","c8f8caee":"predict = m.predict(X_test)\nprint(accuracy_score(y_test, predict))","5ed60d72":"pred = m.predict(X_test)\npred","a44a736b":"X_test.describe().T","e0fa466d":"y_test.describe().T","fb7c7020":"train.Wilderness_Area1.value_counts()","a5b26c3f":"sns.set(font_scale=1.4)\ntrain.Wilderness_Area1.value_counts().plot(kind='bar', figsize=(7, 6), rot=0)\nplt.xlabel(\"Wilderness Area1\", labelpad=14)\nplt.ylabel(\"Count of Wilderness Area1\", labelpad=14)\nplt.title(\"Count of Wilderness Area1 by Value\", y=1.02);","280ac2bc":"train.Wilderness_Area2.value_counts()","826a3eb5":"sns.set(font_scale=1.4)\ntrain.Wilderness_Area2.value_counts().plot(kind='bar', figsize=(7, 6), rot=0)\nplt.xlabel(\"Wilderness Area2\", labelpad=14)\nplt.ylabel(\"Count of Wilderness Area2\", labelpad=14)\nplt.title(\"Count of Wilderness Area2 by Value\", y=1.02);","6fa0283e":"train.Wilderness_Area3.value_counts()","8ca1a048":"sns.set(font_scale=1.4)\ntrain.Wilderness_Area3.value_counts().plot(kind='bar', figsize=(7, 6), rot=0)\nplt.xlabel(\"Wilderness Area3\", labelpad=14)\nplt.ylabel(\"Count of Wilderness Area3\", labelpad=14)\nplt.title(\"Count of Wilderness Area3 by Value\", y=1.02);","8ca9d124":"train.Wilderness_Area4.value_counts()","69220509":"sns.set(font_scale=1.4)\ntrain.Wilderness_Area4.value_counts().plot(kind='bar', figsize=(7, 6), rot=0)\nplt.xlabel(\"Wilderness Area4\", labelpad=14)\nplt.ylabel(\"Count of Wilderness Area4\", labelpad=14)\nplt.title(\"Count of Wilderness Area4 by Value\", y=1.02);","fd1cac48":"# sales by outlet size\nCover_To_Wilderness1 = train.groupby('Cover_Type').Wilderness_Area1.mean()\n\n# sort by sales\nCover_To_Wilderness1.sort_values(inplace=True)\nCover_To_Wilderness1","57db3379":"x = Cover_To_Wilderness1.index.tolist()\ny = Cover_To_Wilderness1.values.tolist()\n\n# set axis labels\nplt.xlabel('Cover_Type')\nplt.ylabel('Wilderness_Area1')\n\n# set title\nplt.title('Mean Wilderness Area1 for Cover Type ')\n\n# set xticks \nplt.xticks(labels=x, ticks=np.arange(len(x)))\n\nplt.bar(x, y, color=['red', 'orange', 'magenta', 'green'])","fb23cc8a":"fig, ax =plt.subplots(2,2, figsize=(11,10))\nsns.countplot(\"Wilderness_Area1\", data=train, ax=ax[0][0])\nsns.countplot(\"Wilderness_Area2\", data=train, ax=ax[0][1])\nsns.countplot(\"Wilderness_Area3\", data=train, ax=ax[1][0])\nsns.countplot(\"Wilderness_Area4\", data=train, ax=ax[1][1])\n\nplt.show()","43c994f4":"fig, ax =plt.subplots(2,2, figsize=(20,10))\nsns.countplot(x=\"Cover_Type\", hue=\"Wilderness_Area1\", data=train, ax=ax[0][0])\nsns.countplot(x=\"Cover_Type\", hue=\"Wilderness_Area2\", data=train, ax=ax[0][1])\nsns.countplot(x=\"Cover_Type\", hue=\"Wilderness_Area3\", data=train, ax=ax[1][0])\nsns.countplot(x=\"Cover_Type\", hue=\"Wilderness_Area4\", data=train, ax=ax[1][1])\n\nplt.show()","31203890":"fig, ax =plt.subplots(4,3, figsize=(22,20))\nsns.boxplot(\"Soil_Type1\", \"Elevation\", data=train, ax=ax[0][0])\nsns.boxplot(\"Soil_Type2\", \"Aspect\", data=train, ax=ax[0][1])\nsns.boxplot(\"Soil_Type3\", \"Slope\", data=train, ax=ax[0][2])\nsns.boxplot(\"Soil_Type4\", \"Horizontal_Distance_To_Hydrology\", data=train, ax=ax[1][0])\nsns.boxplot(\"Soil_Type5\", \"Vertical_Distance_To_Hydrology\", data=train, ax=ax[1][1])\nsns.boxplot(\"Soil_Type6\", \"Horizontal_Distance_To_Roadways\", data=train, ax=ax[1][2])\nsns.boxplot(\"Soil_Type7\", \"Horizontal_Distance_To_Fire_Points\", data=train, ax=ax[2][0])\nsns.boxplot(\"Soil_Type8\", \"Hillshade_9am\", data=train, ax=ax[2][1])\nsns.boxplot(\"Soil_Type9\", \"Hillshade_Noon\", data=train, ax=ax[2][2])\nsns.boxplot(\"Soil_Type10\", \"Hillshade_3pm\", data=train, ax=ax[3][0])\nsns.boxplot(\"Soil_Type11\", \"Hillshade_9am\", data=train, ax=ax[3][1])\nsns.boxplot(\"Soil_Type12\", \"Hillshade_Noon\", data=train, ax=ax[3][2])\n\nfig.show()","0b730456":"train.plot(kind='box', y='Vertical_Distance_To_Hydrology', color='darkblue', figsize = (20,12)[:20])\nplt.title('Vertical Distance To Hydrology', size=20)\n#plt.xlabel(\"'Cover_Type\")\nplt.ylabel(\"Count\")\nplt.show()","0950a6f1":"train.plot(kind='box', y='Horizontal_Distance_To_Hydrology', color='darkblue', figsize = (20,12))\nplt.title('Horizontal Distance To Hydrology', size=20)\n#plt.xlabel(\"'Cover_Type\")\nplt.ylabel(\"Count\")\nplt.show()","e2ebae3a":"var = train.groupby('Cover_Type').Elevation.sum()\nfig = plt.figure()\nax1 = fig.add_subplot(1,1,1)\nax1.set_xlabel('Cover Type')\nax1.set_ylabel('Sum of Elevation')\nax1.set_title(\"Cover Type by Sum of Elevations\")\nvar.plot(kind='line')","3f658999":"#Stacked Column Chart\nvar = train.groupby(['Cover_Type','Wilderness_Area1']).Elevation.mean()[:10]#.transpose()\nvar.unstack().plot(kind='bar',stacked=True,  color=['red','blue'], grid=False)","208b4af1":"# Now we can try another approach\n\nimport pandas as pd \nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier","dc293fd5":"X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.33, random_state=5)","3ab72d73":"m_classifier = DecisionTreeClassifier(max_leaf_nodes=10, random_state=0)\nm_classifier.fit(X_train, y_train)","dc4c3dda":"predictions = m_classifier.predict(X_test)","a48b5ead":"predictions[:10]","f942541a":"y_test[:10]","33bc1f76":"# Measure Accuracy of the Classifier \naccuracy_score(y_true = y_test, y_pred = predictions)","69556613":"# Helpful would be to find why is the predicted accuracy almost 84% in RandomForests and only 63% in DecisionTreeClassifier.\n# But now it is enough. We will see this later.","22ca3e04":"###[](http:\/\/) <a id='4'>4. The predicted accuracy is almost 84%.<\/a>","41b07cec":"## Importing libraries","aeadecf5":"# <a id='5'>5. Data Visualization\na quick overview for some variables, counts, plots, etc.<\/a>","bded11a2":"## Loading the Data","9673ab13":"## Missing Data","3b249172":"## Fit on Train Set","b95dfce2":"## The Goal\n\nThe Source for this competition is: \n\nhttps:\/\/www.kaggle.com\/c\/learn-together\/data\n\nThe study area includes four wilderness areas located in the Roosevelt National Forest of northern Colorado. Each observation is a 30m x 30m patch. Our goal is to predict an integer classification for the forest cover type. The seven types are:\n\n1 - Spruce\/Fir\n\n2 - Lodgepole Pine\n\n3 - Ponderosa Pine\n\n4 - Cottonwood\/Willow\n\n5 - Aspen\n\n6 - Douglas-fir\n\n7 - Krummholz\n\nThe training set (15120 observations) contains both features and the Cover_Type. The test set contains only the features. You must predict the Cover_Type for every row in the test set (565892 observations).","e9cc8f46":"### Random Forest Classifier","ac401605":"### Predict on Test Set","37f975f7":"# DecisionTreeClassifier"}}