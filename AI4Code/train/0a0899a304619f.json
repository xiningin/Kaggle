{"cell_type":{"be9541e0":"code","ac8a51c7":"code","9125bc7b":"code","f3d4e620":"code","f9322a15":"code","9fbb993f":"code","41475872":"code","b21f8227":"code","4408b565":"code","797bd382":"code","60c3f68c":"code","390dfc6d":"code","71e85c5d":"code","9a1aa360":"code","c02368b1":"code","60384e06":"code","a5e56d89":"code","088ae8a2":"markdown","efd2e210":"markdown","3f3dd56d":"markdown","f800e580":"markdown","a9c92a18":"markdown","6d372106":"markdown","c938fbcb":"markdown","18d49020":"markdown","b317ebe0":"markdown","279227b9":"markdown"},"source":{"be9541e0":"import os\nsubs_filepaths = []\n\nfor dirname, _, filenames in os.walk('..\/input\/iron-man-13-movies-subtitles'):\n    for filename in filenames:\n        if filename.endswith(\"srt\"):\n            subs_filepaths.append(os.path.join(dirname, filename))\n            print(os.path.join(dirname, filename))\n","ac8a51c7":"subs_filepaths","9125bc7b":"import re\n\ndef convert_srt_to_txt(filename):\n    file = open( filename, \"r\")\n    lines = file.readlines()\n    file.close()\n\n    text = ''\n    for line in lines:\n        if re.search('^[0-9]+$', line) is None and re.search('^[0-9]{2}:[0-9]{2}:[0-9]{2}', line) is None and re.search('^$', line) is None:\n            text += ' ' + line.rstrip('\\n')\n        text = text.lstrip()\n    return text","f3d4e620":"final_str = \"\"\nfor srt_file in subs_filepaths:\n    final_str += convert_srt_to_txt(srt_file)","f9322a15":"# Imports \nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom wordcloud import WordCloud","9fbb993f":"wc = WordCloud(collocations = False, background_color = 'white',\n                        width = 2048, height = 1080).generate(final_str)","41475872":"wc","b21f8227":"plt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","4408b565":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom PIL import Image\nfrom wordcloud import WordCloud, ImageColorGenerator, STOPWORDS","797bd382":"images = []\nfor dirname, _, filenames in os.walk('..\/input\/iron-man-13-movies-subtitles'):\n    for filename in filenames:\n        if filename.endswith(\"jpg\") or filename.endswith(\"png\"):\n            images.append(os.path.join(dirname, filename))\n            print(os.path.join(dirname, filename))\n","60c3f68c":"# Conversion of Colored to Invert Binary images \nimport cv2\nfor index, source_image in enumerate(images):\n    im_gray = cv2.imread(source_image, cv2.IMREAD_GRAYSCALE)\n    (thresh, im_bw) = cv2.threshold(im_gray, 128, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)\n    thresh = 127\n    im_bw = cv2.threshold(im_gray, thresh, 255, cv2.THRESH_BINARY_INV)[1]\n    cv2.imwrite(f\"{index}.png\", im_bw)\n    \n","390dfc6d":"tony_clr = np.array(Image.open('..\/input\/iron-man-13-movies-subtitles\/iron-man-6480952_1920.jpg'))\nplt.imshow(tony_clr)","71e85c5d":"tony_bw = np.array(Image.open('.\/0.png'))\nplt.imshow(tony_bw)","9a1aa360":"mask_bw = np.array(Image.open('.\/1.png'))\nplt.imshow(mask_bw)","c02368b1":"def plot_wordcloud(text, mask=None, max_words=400, max_font_size=120, figure_size=(24.0,16.0), \n                   title = None, title_size=40, image_color=False):\n    stopwords = set(STOPWORDS)\n    wordcloud = WordCloud(background_color='white',\n                    stopwords = stopwords,\n                    max_words = max_words,\n                    max_font_size = max_font_size, \n                    random_state = 42,\n                    mask = mask,\n                    contour_color='firebrick',\n                    contour_width=3 )\n    wordcloud.generate(text)\n    plt.figure(figsize=figure_size)\n    if image_color:\n        image_colors = ImageColorGenerator(mask);\n        plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation=\"bilinear\");\n        plt.title(title, fontdict={'size': title_size,  \n                                  'verticalalignment': 'bottom'})\n    else:\n        plt.imshow(wordcloud);\n        plt.title(title, fontdict={'size': title_size, 'color': 'green', \n                                  'verticalalignment': 'bottom'})\n    plt.axis('off');\n    plt.tight_layout()  \n    \n","60384e06":"plot_wordcloud(final_str, tony_bw, max_words=1000, max_font_size=120, \n               title = 'Tony Stark', title_size=50, image_color=False)","a5e56d89":"plot_wordcloud(final_str, mask_bw, max_words=1000, max_font_size=120, \n               title = 'Tony Stark', title_size=50, image_color=False)","088ae8a2":"# Word Cloud","efd2e210":"# Simple Rectangular Plot","3f3dd56d":"# Listing all the files","f800e580":"# Conversion of RGB to B&W","a9c92a18":"# Masked Plot","6d372106":"# Conversion of SRT file to text val\nsince srt is having time details, currently we can drop them and form a string with only chars","c938fbcb":"The core of the wordcloud library is the WordCloud class, and all functions are encapsulated in the WordCloud class. When using, you need to instantiate a WordCloud object, and call its generate(text) method to convert the text into a word cloud.","18d49020":"Please <b>Upvote<\/b> if you liked it ","b317ebe0":"A word cloud is a visually prominent presentation of \u201ckeywords\u201d that appear frequently in text data. The rendering of keywords forms a cloud-like color picture, so that you can appreciate the main text data at a glance.\n\nIn Python, word cloud can be made with help of wordcloud library.\n\n","279227b9":"## Common parameters\n\n- <b>width<\/b>: word cloud image width, default 400 pixels\n- <b>height<\/b>: word cloud image height default 200 pixels\n- <b>background_color<\/b>: the background color of the word cloud image, the default is black\n- <b>font_step<\/b>: the step interval to increase the font size, the default is 1\n- <b>font_path<\/b>: specifies the font path, default None\n- <b>mini_font_size<\/b>: minimum font size, default size 4\n- <b>max_font_size<\/b>: maximum font size automatically adjusted according to height\n- <b>max_words<\/b>: maximum number of words, default 200\n- <b>stop_words<\/b>: words not displayed such as stop_words={\u201cpython\u201d,\u201cjava\u201d}\n- <b>scale<\/b>: The default value of Scale is 1, the larger the value, the higher the image density, the clearer the image\n- <b>prefer_horizontal<\/b>: the default value is 0.90, floating-point type. Indicates that if it is not suitable horizontally, rotate to vertical\n- <b>relative_scaling<\/b>: the default value is 0.5, floating point type. Set the reverse order of word frequency, the size multiple of the previous word relative to the next word.\n- <b>mask<\/b>: specifies the word cloud shape picture, the default is rectangular\n\n\n"}}