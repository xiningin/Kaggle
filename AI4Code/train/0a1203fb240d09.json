{"cell_type":{"0d562e3f":"code","14c7903e":"code","dd2c2b7e":"code","048594a3":"code","9c873e5f":"code","6c857cc6":"code","e8d13e5a":"code","27cfd9b4":"code","7dcc4c3f":"code","b8edc039":"markdown","87469837":"markdown"},"source":{"0d562e3f":"import torch\nimport torchvision\nfrom torchvision import transforms, datasets","14c7903e":"train = datasets.MNIST(\"\", train = True, download = True,\n                      transform = transforms.Compose([transforms.ToTensor()]))\n#I can do this with any dataset\n\ntest = datasets.MNIST(\"\", train = False, download = True,\n                     transform = transforms.Compose([transforms.ToTensor()]))","dd2c2b7e":"trainset = torch.utils.data.DataLoader(train, batch_size = 10, shuffle = True)\ntestset = torch.utils.data.DataLoader(test, batch_size = 10, shuffle = True)","048594a3":"for data in trainset:\n    print(data)\n    break;","9c873e5f":"x, y = data[0][0], data[1][0]\n\nprint(y)","6c857cc6":"import matplotlib.pyplot as plt\n\nplt.imshow(data[0][0].view(28, 28))","e8d13e5a":"#data balance - putting weight does not work\n#count the datasets\ntotal = 0\ncounter_dict = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0}\n\nfor data in trainset:\n    Xs, ys = data\n    for y in ys:\n        counter_dict[int(y)] += 1\n        total +=1\n\nprint(counter_dict)\n","27cfd9b4":"print(total)","7dcc4c3f":"for i in counter_dict:\n    print(f\"{i}: {counter_dict[i]\/total*100}\")","b8edc039":"Using package name torchvision","87469837":"Ref: https:\/\/www.youtube.com\/watch?v=i2yPxY2rOzs&list=PLQVvvaa0QuDdeMyHEYc0gxFpYwHY2Qfdh&index=2"}}