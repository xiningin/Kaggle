{"cell_type":{"1fa35098":"code","f97f3109":"code","688e3d4e":"code","9b5fcc65":"code","8b8a6a59":"code","bff80b7e":"code","8bb0c3a8":"code","0e6e84b4":"code","410bd6cc":"code","dd69503a":"code","1adde912":"code","70b91fcb":"code","c2bde296":"code","cadab8d1":"code","d8d63d17":"code","ecbc324b":"code","3f5f3145":"code","24ae493f":"code","9f74b20f":"code","70097a9f":"code","55abded9":"code","c292aa8c":"code","8c02a952":"code","f0030f36":"code","c48a7b83":"code","7d6f8c61":"code","ae06d28f":"code","20b8ca43":"code","94d1e9a3":"code","c2298519":"code","6187eec5":"code","91c3be7a":"code","83c5520a":"code","6a1d1096":"code","6e1d6721":"code","9dea4b9e":"code","b2a7dec6":"code","76897aab":"code","86ebb97f":"code","da6dbb2f":"code","9ec07b5a":"code","25be3f19":"code","b2271571":"code","55dd112c":"code","a418c190":"code","a5606b87":"code","056f08f1":"code","bf0572a3":"code","d1cb505f":"code","6d6d3b3a":"code","1b86a09d":"code","01559283":"code","1e4e82eb":"code","b7438225":"code","fe7a08b0":"code","9cb3975f":"code","3c91e53e":"code","de14405d":"code","9b78da6b":"code","e2819d1c":"code","a44f517d":"code","6e16c169":"markdown","25f56a88":"markdown","c13f5842":"markdown","91be02f1":"markdown","3d623a62":"markdown","7ca7e057":"markdown","4cebeaf0":"markdown","6a7ede8a":"markdown","36390293":"markdown","09dd3f9f":"markdown","956941d7":"markdown","e43c44cf":"markdown","e660beaa":"markdown","9173c67c":"markdown","0b388fd0":"markdown","7c8021f7":"markdown","cd8ab5bd":"markdown","3e6ff596":"markdown","7178fbe8":"markdown","c7398439":"markdown","5f8a07de":"markdown","fd8707e2":"markdown","9bb18a45":"markdown","96b505e4":"markdown","b82d63af":"markdown"},"source":{"1fa35098":"# Import packages\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nimport sklearn.metrics as metrics\nimport math\nimport mpl_toolkits\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\npd.set_option('display.max_rows', None)\npd.set_option('display.width', None)\npd.set_option('display.max_colwidth', None)\n%matplotlib inline ","f97f3109":"sample_submission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\n#Creating a copy of the train and test datasets\ntest1  = test.copy()\ntrain1  = train.copy()","688e3d4e":"test1.head()","9b5fcc65":"train1= train1[pd.notnull(train1['SalePrice'])]\ntrain1.tail()","8b8a6a59":"train1.head()","bff80b7e":"train1['train']  = 1\ntest1['train']  = 0\nhouse = pd.concat([train1,test1], axis=0,sort=False)\nhouse.tail()","8bb0c3a8":"plt.scatter(house.MSSubClass,house.SalePrice)\nplt.title('Price vs Mssubclass')","0e6e84b4":"plt.scatter(house.LotFrontage,house.SalePrice)\nplt.title('Price vs LotFrontage')","410bd6cc":"plt.scatter(house.LotArea,house.SalePrice)\nplt.title('Price vs LotArea')","dd69503a":"plt.scatter(house.Street,house.SalePrice)\nplt.title('Price vs Street')","1adde912":"plt.scatter(house.LotShape,house.SalePrice)\nplt.title('Price vs LotShape')","70b91fcb":"plt.scatter(house.LandContour,house.SalePrice)\nplt.title('Price vs LandContour')","c2bde296":"#Percentage of NAN Values \nNAN = [(c, house[c].isna().mean()*100) for c in house]\nNAN = pd.DataFrame(NAN, columns=[\"column_name\", \"percentage\"])\nNAN = NAN[NAN.percentage > 50]\nNAN.sort_values(\"percentage\", ascending=False)","cadab8d1":"house = house.drop(['Alley','PoolQC','Fence','MiscFeature'],axis=1)","d8d63d17":"object_columns_df = house.select_dtypes(include=['object'])\nnumerical_columns_df =house.select_dtypes(exclude=['object'])","ecbc324b":"object_columns_df.dtypes","3f5f3145":"numerical_columns_df.dtypes","24ae493f":"#Number of null values in each feature\nnull_counts = object_columns_df.isnull().sum()\nprint(\"Number of null values in each column:\\n{}\".format(null_counts))","9f74b20f":"columns_None = ['FireplaceQu']\nobject_columns_df[columns_None]= object_columns_df[columns_None].fillna('None')","70097a9f":"#'BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','GarageType','GarageFinish','GarageQual',,'GarageCond'","55abded9":"columns_with_lowNA = ['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','GarageType','GarageFinish','GarageQual','GarageCond','MSZoning','Utilities','Exterior1st','Exterior2nd','MasVnrType','Electrical','KitchenQual','Functional','SaleType']\n#fill missing values for each column (using its own most frequent value)\nobject_columns_df[columns_with_lowNA] = object_columns_df[columns_with_lowNA].fillna(object_columns_df.mode().iloc[0])","c292aa8c":"#Number of null values in each feature\nnull_counts = numerical_columns_df.isnull().sum()\nprint(\"Number of null values in each column:\\n{}\".format(null_counts))","8c02a952":"print(len(numerical_columns_df['LotFrontage']))","f0030f36":"print((numerical_columns_df['YrSold']-numerical_columns_df['YearBuilt']).median())\nprint(numerical_columns_df[\"LotFrontage\"].median())\nprint(numerical_columns_df[\"MasVnrArea\"].median())\nprint(numerical_columns_df[\"BsmtFinSF1\"].median())\nprint(numerical_columns_df[\"BsmtFinSF2\"].median())\nprint(numerical_columns_df[\"BsmtUnfSF\"].median())\nprint(numerical_columns_df[\"TotalBsmtSF\"].median())\nprint(numerical_columns_df[\"BsmtFullBath\"].median())\nprint(numerical_columns_df[\"BsmtHalfBath\"].median())\nprint(numerical_columns_df[\"GarageCars\"].median())\nprint(numerical_columns_df[\"GarageArea\"].median())\n","c48a7b83":"numerical_columns_df['GarageYrBlt'] = numerical_columns_df['GarageYrBlt'].fillna(numerical_columns_df['YrSold']-35)\nnumerical_columns_df['LotFrontage'] = numerical_columns_df['LotFrontage'].fillna(0)\nnumerical_columns_df['MasVnrArea'] = numerical_columns_df['MasVnrArea'].fillna(0)\nnumerical_columns_df['BsmtFinSF1'] = numerical_columns_df['BsmtFinSF1'].fillna(368.5)\nnumerical_columns_df['BsmtFinSF2'] = numerical_columns_df['BsmtFinSF2'].fillna(0)\nnumerical_columns_df['BsmtUnfSF'] = numerical_columns_df['BsmtUnfSF'].fillna(467)\nnumerical_columns_df['TotalBsmtSF'] = numerical_columns_df['TotalBsmtSF'].fillna(989.5)\nnumerical_columns_df['BsmtFullBath'] = numerical_columns_df['BsmtFullBath'].fillna(0)\nnumerical_columns_df['BsmtHalfBath'] = numerical_columns_df['BsmtHalfBath'].fillna(0)\nnumerical_columns_df['GarageCars'] = numerical_columns_df['GarageCars'].fillna(2)\nnumerical_columns_df['GarageArea'] = numerical_columns_df['GarageArea'].fillna(480)","7d6f8c61":"#Number of null values in each feature\nnull_counts = numerical_columns_df.isnull().sum()\nprint(\"Number of null values in each column:\\n{}\".format(null_counts))","ae06d28f":"numerical_columns_df.head()","20b8ca43":"numerical_columns_df.columns","94d1e9a3":"numerical_columns_df.head()","c2298519":"object_columns_df['Utilities'].value_counts().plot(kind='bar',figsize=[10,3])\nobject_columns_df['Utilities'].value_counts() ","6187eec5":"object_columns_df['Street'].value_counts().plot(kind='bar',figsize=[10,3])\nobject_columns_df['Street'].value_counts() ","91c3be7a":"object_columns_df['Condition2'].value_counts().plot(kind='bar',figsize=[10,3])\nobject_columns_df['Condition2'].value_counts() ","83c5520a":"object_columns_df['RoofMatl'].value_counts().plot(kind='bar',figsize=[10,3])\nobject_columns_df['RoofMatl'].value_counts() ","6a1d1096":"object_columns_df['Heating'].value_counts().plot(kind='bar',figsize=[10,3])\nobject_columns_df['Heating'].value_counts() #======> Drop feature one Type","6e1d6721":"object_columns_df = object_columns_df.drop(['Heating','RoofMatl','Condition2','Street','Utilities'],axis=1)","9dea4b9e":"numerical_columns_df['Age_House']= (numerical_columns_df['YrSold']-numerical_columns_df['YearBuilt'])\nnumerical_columns_df['Age_House'].describe()","b2a7dec6":"Negatif = numerical_columns_df[numerical_columns_df['Age_House'] < 0]\nNegatif","76897aab":"numerical_columns_df.loc[numerical_columns_df['YrSold'] < numerical_columns_df['YearBuilt'],'YrSold' ] = 2009\nnumerical_columns_df['Age_House']= (numerical_columns_df['YrSold']-numerical_columns_df['YearBuilt'])\nnumerical_columns_df['Age_House'].describe()","86ebb97f":"numerical_columns_df['TotalBsmtBath'] = numerical_columns_df['BsmtFullBath'] + numerical_columns_df['BsmtFullBath']*0.5\nnumerical_columns_df['TotalBath'] = numerical_columns_df['FullBath'] + numerical_columns_df['HalfBath']*0.5 \nnumerical_columns_df['TotalSA']=numerical_columns_df['TotalBsmtSF'] + numerical_columns_df['1stFlrSF'] + numerical_columns_df['2ndFlrSF']","da6dbb2f":"numerical_columns_df.head()","9ec07b5a":"numerical_columns_df.columns","25be3f19":"plt.scatter(numerical_columns_df.SalePrice,numerical_columns_df.Age_House)\nplt.title('Price vs Age_House')","b2271571":"scaler = MinMaxScaler()\n\nnumerical_columns_df[['MSSubClass', 'LotFrontage', 'LotArea', \n       'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1',\n       'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd',\n       'Fireplaces', 'GarageYrBlt', 'GarageCars', 'TotalSA','OverallQual','GarageArea', 'WoodDeckSF',\n       'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n       'MiscVal', 'MoSold', 'YrSold', 'Age_House', 'TotalBsmtBath',\n       'TotalBath' ]] = scaler.fit_transform(numerical_columns_df[['MSSubClass', 'LotFrontage', 'LotArea', \n       'OverallCond', 'YearBuilt', 'YearRemodAdd','TotalSA','OverallQual', 'MasVnrArea', 'BsmtFinSF1',\n       'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd',\n       'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF',\n       'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n       'MiscVal', 'MoSold', 'YrSold', 'Age_House', 'TotalBsmtBath',\n       'TotalBath']])\n\n","55dd112c":"numerical_columns_df.head()","a418c190":"object_columns_df.head()","a5606b87":"#Using One hot encoder\nobject_columns_df = pd.get_dummies(object_columns_df, columns=object_columns_df.columns) ","056f08f1":"object_columns_df.head()","bf0572a3":"df_final = pd.concat([object_columns_df, numerical_columns_df], axis=1,sort=False)#\ndf_final.head()","d1cb505f":"df_final = df_final.drop(['Id',],axis=1)\n\ndf_train = df_final[df_final['train'] == 1]\ndf_train = df_train.drop(['train',],axis=1)\n\n\ndf_test = df_final[df_final['train'] == 0]\n#df_test = df_test.drop(['SalePrice'],axis=1)\ndf_test = df_test.drop(['train','SalePrice'],axis=1)\ndf_test.head()\n","6d6d3b3a":"len(df_test)","1b86a09d":"target= df_train['SalePrice']\ndf_train = df_train.drop(['SalePrice'],axis=1)","01559283":"\nprint(len(df_train),len(target))","1e4e82eb":"x_train,x_test,y_train,y_test = train_test_split(df_train,target,test_size=0.33,random_state=0)","b7438225":"xgb =XGBRegressor( booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.6, gamma=0,num_parallel_tree=1,\n             importance_type='gain', learning_rate=0.01, max_delta_step=0,\n             max_depth=4, min_child_weight=2, n_estimators=2550,tree_method='exact',\n             n_jobs=1, nthread=None, objective='reg:squarederror',\n             reg_alpha=0.6, reg_lambda=0.6, scale_pos_weight=1, \n             silent=None, subsample=0.6, verbosity=1)\n\n\nlgbm = LGBMRegressor(objective='regression', \n                                       num_leaves=4,\n                                       learning_rate=0.01, \n                                       n_estimators=11000, \n                                       max_bin=200, \n                                       bagging_fraction=0.75,\n                                       bagging_freq=5, \n                                       bagging_seed=7,\n                                       feature_fraction=0.38,\n                                       )","fe7a08b0":"y = target \nfeature_names = df_train.columns\nX = df_train[feature_names]\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\n","9cb3975f":"lgbm.fit(train_X, train_y)","3c91e53e":"xgb.fit(train_X, train_y)","de14405d":"predict1 = xgb.predict(x_test)\npredict = lgbm.predict(x_test)\n","9b78da6b":"print('Root Mean Square Error test = ' + str(math.sqrt(metrics.mean_squared_error(y_test, predict1))))\nprint('Root Mean Square Error test = ' + str(math.sqrt(metrics.mean_squared_error(y_test, predict))))\n","e2819d1c":"predict4 = lgbm.predict(df_test)\npredict3 = xgb.predict(df_test)\npredict_y =(predict3*.55+predict4*.45)","a44f517d":"submission = pd.DataFrame({\n        \"Id\": test[\"Id\"],\n        \"SalePrice\": predict_y    })\nsubmission.to_csv('submission.csv', index=False)","6e16c169":"### Will we use One hot encoder to encode the rest of categorical features ","25f56a88":"### Analyze data type","c13f5842":"### We finally end up with a clean dataset\n\nAfter making some plots we found that we have some colums with low variance so we decide to delete them ","91be02f1":"### find null value in categorical data","3d623a62":"### Removing if there any saleprice equals to 0","7ca7e057":"### Scaling","4cebeaf0":"Concat Categorical (after encoding) and numerical features ","6a7ede8a":"TotalBsmtBath : Sum of : BsmtFullBath and 1\/2 BsmtHalfBath\n\nTotalBath : Sum of : FullBath and 1\/2 HalfBath\n\nTotalSA : Sum of : 1stFlrSF and 2ndFlrSF and basement area <\/font>","36390293":"### Data Cleaning\nAssemble and train data","09dd3f9f":"\n*     Fill GarageYrBlt and LotFrontage\n*     Fill the rest of columns with 0\n \n","956941d7":"****\n\n*     Now we have a clean categorical features\n*     In the next step we will deal with the **numerical** features black\n\n","e43c44cf":" Like we see here tha the minimun is -1 ???\n\nIt is strange to find that the house was sold in 2007 before the YearRemodAdd 2009.\n\nSo we decide to change the year of sold to 2009\n","e660beaa":"### Fill the rest of columns with 0 ","9173c67c":"So we will fill the year with 1979 and the Lot frontage with 68","0b388fd0":"### Calculating the percentage of missing values of each feature Features with more than 50% of missing values. ","7c8021f7":"Type Markdown and LaTeX: \ud835\udefc2","cd8ab5bd":"### building the model","3e6ff596":"### submit file","7178fbe8":"### separate train and test","c7398439":"### numerical columns","5f8a07de":"### Upload files","fd8707e2":"### drop columns with high missing vlaues","9bb18a45":"### Now we will create some new features","96b505e4":"\n    We will fill -- BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, GarageType, GarageFinish, GarageQual, FireplaceQu, GarageCond -- with \"None\" (Take a look in the data description).\n    We will fill the rest of features with th most frequent value (using its own most frequent value).\n\n","b82d63af":"Now the next step is to encode categorical features\n\nOrdinal categories features - Mapping from 0 to N "}}