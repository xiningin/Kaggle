{"cell_type":{"a1e89aaf":"code","2a52b8c2":"code","eea8ffea":"code","1b20f621":"code","53b08fe0":"code","76d4f767":"code","242d019d":"code","94800e87":"code","24c870e4":"code","8c32fcd3":"code","32e0bad4":"code","e583db33":"code","575ca08c":"markdown","c0f08066":"markdown","ff5d16a8":"markdown","42285ea1":"markdown","d9dd9442":"markdown","a1a9310a":"markdown","cfae62a7":"markdown","8e7693cf":"markdown","bd663d81":"markdown","8971924a":"markdown","62897baf":"markdown","45cd270f":"markdown","c974dc0b":"markdown","6734750c":"markdown","9b1a9623":"markdown","977a7589":"markdown"},"source":{"a1e89aaf":"\nfrom google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"openaq\" dataset\ndataset_ref = client.dataset(\"openaq\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)\n\n# List all the tables in the \"openaq\" dataset\ntables = list(client.list_tables(dataset))\n\n# Print names of all tables in the dataset (there's only one!)\nfor table in tables:  \n    print(table.table_id)","2a52b8c2":"\n# Construct a reference to the \"global_air_quality\" table\ntable_ref = dataset_ref.table(\"global_air_quality\")\n\n# API request - fetch the table\ntable = client.get_table(table_ref)\n\n# Preview the first five lines of the \"global_air_quality\" table\nclient.list_rows(table, max_results=5).to_dataframe()","eea8ffea":"# Query to select all the items from the \"city\" column where the \"country\" column is 'US'\nquery = \"\"\"\n        SELECT city\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        WHERE country = 'US'\n        \"\"\"","1b20f621":"# Create a \"Client\" object\nclient = bigquery.Client()","53b08fe0":"# Set up the query\nquery_job = client.query(query)","76d4f767":"# API request - run the query, and return a pandas DataFrame\nus_cities = query_job.to_dataframe()","242d019d":"# What five cities have the most measurements?\nus_cities.city.value_counts().head()","94800e87":"query = \"\"\"\n        SELECT city, country\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        WHERE country = 'US'\n        \"\"\"","24c870e4":"query = \"\"\"\n        SELECT *\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        WHERE country = 'US'\n        \"\"\"","8c32fcd3":"# Query to get the score column from every row where the type column has value \"job\"\nquery = \"\"\"\n        SELECT score, title\n        FROM `bigquery-public-data.hacker_news.full`\n        WHERE type = \"job\" \n        \"\"\"\n\n# Create a QueryJobConfig object to estimate size of query without running it\ndry_run_config = bigquery.QueryJobConfig(dry_run=True)\n\n# API request - dry run query to estimate costs\ndry_run_query_job = client.query(query, job_config=dry_run_config)\n\nprint(\"This query will process {} bytes.\".format(dry_run_query_job.total_bytes_processed))","32e0bad4":"# Only run the query if it's less than 1 MB\nONE_MB = 1000*1000\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=ONE_MB)\n\n# Set up the query (will only run if it's less than 1 MB)\nsafe_query_job = client.query(query, job_config=safe_config)\n\n# API request - try to run the query, and return a pandas DataFrame\nsafe_query_job.to_dataframe()","e583db33":"# Only run the query if it's less than 1 GB\nONE_GB = 1000*1000*1000\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=ONE_GB)\n\n# Set up the query (will only run if it's less than 1 GB)\nsafe_query_job = client.query(query, job_config=safe_config)\n\n# API request - try to run the query, and return a pandas DataFrame\njob_post_scores = safe_query_job.to_dataframe()\n\n# Print average score for job posts\njob_post_scores.score.mean()","575ca08c":"Take the time now to ensure that this query lines up with what you learned above.  \n\n# Submitting the query to the dataset\n\nWe're ready to use this query to get information from the OpenAQ dataset.  As in the previous tutorial, the first step is to create a [`Client`](https:\/\/google-cloud.readthedocs.io\/en\/latest\/bigquery\/generated\/google.cloud.bigquery.client.Client.html#google.cloud.bigquery.client.Client) object.","c0f08066":"Now we've got a pandas DataFrame called `us_cities`, which we can use like any other DataFrame.","ff5d16a8":"---\n\n\n\n\n*Have questions or comments? Visit the [course discussion forum](https:\/\/www.kaggle.com\/learn\/intro-to-sql\/discussion) to chat with other learners.*","42285ea1":"Everything looks good! So, let's put together a query. Say we want to select all the values from the `city` column that are in rows where the `country` column is `'US'` (for \"United States\").","d9dd9442":"You can select all columns with a `*` like this:","a1a9310a":"# Q&A: Notes on formatting\n\nThe formatting of the SQL query might feel unfamiliar. If you have any questions, you can ask in the comments section at the bottom of this page.  Here are answers to two common questions:\n\n### **Question: What's up with the triple quotation marks (\"\"\")?**\n\n_Answer_: These tell Python that everything inside them is a single string, even though we have line breaks in it. The line breaks aren't necessary, but they make it easier to read your query.\n\n### **Question: Do you need to capitalize SELECT and FROM?**\n\n_Answer_: No, SQL doesn't care about capitalization. However, it's customary to capitalize your SQL commands, and it makes your queries a bit easier to read.","cfae62a7":"In this case, the query was cancelled, because the limit of 1 MB was exceeded.  However, we can increase the limit to run the query successfully!","8e7693cf":"# More queries\n\nIf you want multiple columns, you can select them with a comma between the names:","bd663d81":"# Example: What are all the U.S. cities in the OpenAQ dataset?\n\nNow that you've got the basics down, let's work through an example with a real dataset. We'll use an [OpenAQ](https:\/\/openaq.org) dataset about air quality.\n\nFirst, we'll set up everything we need to run queries and take a quick peek at what tables are in our database.  (_Since you learned how to do this in the previous tutorial, we have hidden the code.  But if you'd like to take a peek, you need only click on the \"Code\" button below._)","8971924a":"Next, we run the query and convert the results to a pandas DataFrame.","62897baf":"# Introduction\n\nNow that you know how to access and examine a dataset, you're ready to write your first SQL query!  As you'll soon see, SQL queries will help you sort through a massive dataset, to retrieve only the information that you need.  \n\nWe'll begin by using the keywords **SELECT**, **FROM**, and **WHERE** to get data from specific columns based on conditions you specify. \n\nFor clarity, we'll work with a small imaginary dataset `pet_records` which contains just one table, called `pets`. \n\n![](https:\/\/i.imgur.com\/fI5Pvvp.png)\n\n# SELECT ... FROM\n\nThe most basic SQL query selects a single column from a single table.  To do this, \n- specify the column you want after the word **SELECT**, and then \n- specify the table after the word **FROM**.  \n\nFor instance, to select the `Name` column (from the `pets` table in the `pet_records` database in the `bigquery-public-data` project), our query would appear as follows:  \n\n![](https:\/\/i.imgur.com\/c3GxYRt.png)\n\nNote that when writing an SQL query, the argument we pass to **FROM** is *not* in single or double quotation marks (' or \"). It is in backticks (\\`).\n\n# WHERE ...\n\nBigQuery datasets are large, so you'll usually want to return only the rows meeting specific conditions. You can do this using the **WHERE** clause.\n\nThe query below returns the entries from the `Name` column that are in rows where the `Animal` column has the text `'Cat'`. \n\n![](https:\/\/i.imgur.com\/HJOT8Kb.png)","45cd270f":"You can also specify a parameter when running the query to limit how much data you are willing to scan. Here's an example with a low limit.","c974dc0b":"The dataset contains only one table, called `global_air_quality`.  We'll fetch the table and take a peek at the first few rows to see what sort of data it contains.  (_Again, we have hidden the code.  To take a peek, click on the \"Code\" button below._)","6734750c":"# Working with big datasets\n\nBigQuery datasets can be huge. We allow you to do a lot of computation for free, but everyone has some limit.\n\n**Each Kaggle user can scan 5TB every 30 days for free. Once you hit that limit, you'll have to wait for it to reset.**\n\nThe [biggest dataset currently on Kaggle](https:\/\/www.kaggle.com\/github\/github-repos) is 3TB, so you can go through your 30-day limit in a couple queries if you aren't careful.\n\nDon't worry though: we'll teach you how to avoid scanning too much data at once, so that you don't run over your limit.\n\nTo begin,you can estimate the size of any query before running it. Here is an example using the (*very large!*) Hacker News dataset. To see how much data a query will scan, we create a `QueryJobConfig` object and set the `dry_run` parameter to `True`.","9b1a9623":"We begin by setting up the query with the [`query()`](https:\/\/google-cloud.readthedocs.io\/en\/latest\/bigquery\/generated\/google.cloud.bigquery.client.Client.query.html#google.cloud.bigquery.client.Client.query) method.  We run the method with the default parameters, but this method also allows us to specify more complicated settings that you can read about in [the documentation](https:\/\/google-cloud.readthedocs.io\/en\/latest\/bigquery\/generated\/google.cloud.bigquery.client.Client.query.html#google.cloud.bigquery.client.Client.query).  We'll revisit this later.","977a7589":"# Your turn\n\nWriting **SELECT** statements is the key to using SQL. So **[try your new skills](https:\/\/www.kaggle.com\/kernels\/fork\/681989)**!\n"}}