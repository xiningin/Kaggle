{"cell_type":{"89bd4456":"code","d373f2b3":"code","168fa296":"code","355342d8":"code","8e1e364b":"code","c4db89bc":"code","4fd7cd18":"code","73ba795c":"code","4a34ad83":"code","2a5093ed":"code","f2b28415":"code","fdf2bba2":"markdown","586bfc97":"markdown","97476037":"markdown","956cd2ed":"markdown","76cb19ff":"markdown","8aabd5b5":"markdown","4cbeaec0":"markdown","3ba70c3b":"markdown","689277af":"markdown","c5804855":"markdown","f289eadb":"markdown","2499a862":"markdown","ad1a9d6e":"markdown","be47de10":"markdown","15069744":"markdown","e4d97536":"markdown","0b6f66da":"markdown","00240d9d":"markdown","0717757c":"markdown"},"source":{"89bd4456":"#importing certain libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","d373f2b3":"data = pd.read_csv('..\/input\/coursera-ml\/ex1data1.txt',header = None) #Read from dataset\n\nX = data.iloc[:,0]; #Read first column\ny = data.iloc[:,1]; #Read second column\n\nm = len(y) #number of training examples\n\ndata.head()  # view first five rows of data\n","168fa296":"plt.scatter(X,y)\nplt.xlabel('Population of city in 10,000s')\nplt.ylabel('Profit in $10,000s')\nplt.show()","355342d8":"\nX = X[:,np.newaxis] #convert rank 1 array to rank 2 array\ny = y[:,np.newaxis]\n\ntheta = np.zeros([2,1]) #initialize the initial parameter theta to 0\n\niterations = 1500\n\nalpha = 0.01 #initialize learning rate to 0.01\n\nones = np.ones((m,1)) #this ii use as X0 term because X0 = 1\n\nX = np.hstack((ones,X)) #adding intercept term","8e1e364b":"def ComputeCost(X,y,theta):\n    temp = np.dot(X,theta) - y\n    return np.sum(np.power(temp , 2)) \/ (2*m)\n\nJ = ComputeCost(X,y,theta)\nprint(J)","c4db89bc":"def GradientDescent(X,y,theta, alpha , iterations):\n    for _ in range(iterations):\n        temp = np.dot(X,theta) - y\n        temp = np.dot(X.T , temp)\n        theta = theta - (alpha\/m) *temp\n    return theta\n\ntheta = GradientDescent(X,y,theta,alpha,iterations)\n\nprint(theta)","4fd7cd18":"J = ComputeCost(X,y,theta)\n\nprint(J)","73ba795c":"plt.scatter(X[:,1],y)\nplt.xlabel('Polpulation of city in 10,000s')\nplt.ylabel('Profit in $10,000s')\nplt.plot(X[:,1],np.dot(X,theta)) #ploting a line\nplt.show()","4a34ad83":"def Predict(X_test):\n    profit = np.dot(X_test,theta)\n    return profit","2a5093ed":"predict_data = pd.read_csv('..\/input\/food-truck-profit\/predict_profit.txt') #loading prediction data\n\npredict_data = predict_data.iloc[:,0] \n\npredict_data = predict_data[:,np.newaxis]  #convert rank 1 array to rank 2 array\n\nm_predict = len(predict_data)\nones = np.ones((m_predict , 1))\n\npredict_data = np.hstack((ones,predict_data)) #adding intercept term","f2b28415":"predicted_profit = Predict(predict_data)\n\nprint(predicted_profit)","fdf2bba2":"### Predicting Profit","586bfc97":"### Computing the cost","97476037":"I hope you like it..","956cd2ed":"Expected theta values [-3.6303, 1.1664]","76cb19ff":"You should expect to see a cost of 32.07","8aabd5b5":"### Finding the optimal parameters using Gradient Descent","4cbeaec0":"Before starting on any task, it is often useful to understand the data by visualizing it. For this dataset, you can use a scatter plot to visualize the data, since it has only two properties to plot (profit and population).","3ba70c3b":"### Reading data","689277af":"This is based on ML course by Andrew NG on Coursera.","c5804855":"### Plot showing the best fit line","f289eadb":"### Adding the intercept term","2499a862":"The file ex1data1.txt contains the dataset for our linear regression exercise. The first column is the population of a city and the second column is the profit of a food truck in that city. A negative value for profit indicates a loss.","ad1a9d6e":"It should give you a value of 4.483 which is much better than 32.07","be47de10":"Here we will implement linear regression with one variable to predict profits for a food truck. Suppose you are the CEO of a restaurant franchise and are considering different cities for opening a new outlet. The chain already has trucks in various cities and you have data for profits and populations from the cities.","15069744":"Note on np.newaxis: When you read data into X, y you will observe that X, y are rank 1 arrays. rank 1 array will have a shape of (m, ) where as rank 2 arrays will have a shape of (m,1). When operating on arrays its good to convert rank 1 arrays to rank 2 arrays because rank 1 arrays often give unexpected results.\n\nTo convert rank 1 to rank 2 array we use someArray[:,np.newaxis].","e4d97536":"### Using optimized theta values in cost function","0b6f66da":"# Linear Regression with one variable","00240d9d":"we add another dimension to our data to accommodate the intercept term . We also initialize the initial parameters theta to 0 and the learning rate alpha to 0.01","0717757c":"### Plotting data"}}