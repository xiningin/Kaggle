{"cell_type":{"38d709f0":"code","da3e8cdd":"code","acec6a77":"code","c5338afd":"code","9bd1cba6":"code","5f3717d8":"code","3105f627":"code","c996efca":"code","718e6a02":"code","f24abb7b":"code","c8658755":"code","b496b4bf":"code","cda90d74":"code","ec7d32ba":"code","13b4e01d":"code","a9f7deb3":"code","f1337e22":"code","b200258a":"code","6128d1df":"code","fca83495":"code","d1849521":"code","4df7bc92":"code","d108588e":"code","1b5e984b":"code","f082dd7f":"code","f29ecec1":"code","7bfb1731":"code","1a41bf47":"code","07e546b7":"code","e91ae1ba":"code","df823581":"code","0babfb3d":"code","35c5bea1":"code","492a7b1f":"code","2b58b957":"code","00ee8999":"code","ac42120d":"code","74fea55a":"code","e2363f71":"code","a9b84188":"code","abec6a61":"code","ead2a3e9":"code","9000ba10":"code","a97611a2":"code","1bea7025":"code","cb14a61a":"code","ef07e617":"code","3aaf590d":"code","832c57cd":"code","63c3af2e":"code","a548611f":"code","90a819b3":"code","e11cd3ea":"code","c1944a92":"code","1f3fd3a6":"code","58e5f38c":"code","ba1d9f9f":"code","8b8fac04":"code","0de6215f":"code","48b08ec5":"code","fcb0be44":"code","c8b09335":"code","0fb6398e":"code","c09c4048":"code","6332b026":"code","05f33e09":"code","b9ecf4a4":"code","17605642":"code","66abc481":"code","903d91be":"code","c11872b0":"code","781693e5":"code","b49bca41":"code","c32b0be0":"code","e8138a62":"code","3f8d5c1f":"code","4e7b9011":"code","abd04750":"code","fae13897":"code","e39ef029":"code","78b2b4f7":"code","ada7a4b5":"code","b33660dd":"code","ca32bb1c":"code","45a0ae48":"code","391b4e3e":"code","5e59d315":"code","35b39b6d":"code","e35fda2d":"code","23c459eb":"code","b8236fdc":"code","90f42a06":"code","1627f6bb":"code","1c0c0cfd":"code","243cbfe3":"code","a3c70653":"code","8924dc56":"code","64268e6f":"code","55d1e854":"code","74b28e9b":"code","78d24245":"code","3581de01":"code","a309525d":"code","22475d06":"code","027d9349":"code","80e39926":"code","a64635a9":"code","2d631a7d":"code","4a2a4a72":"code","c0699baf":"code","3d23b2f8":"code","21fefcb2":"code","6461ac22":"code","dd48c619":"code","1e1d48f1":"code","48794336":"code","ae9c5ef0":"code","8c728f7b":"code","aebbce00":"code","f8bf8e03":"code","72ed5db4":"code","18e4ffc9":"code","6beb509f":"code","a81247d2":"code","3e83be90":"code","4c7e7132":"code","f49601fc":"code","b94a822e":"code","64615e2a":"code","d2fa3d25":"code","484bc626":"code","c0eff19f":"code","3db96e70":"code","807f4ab1":"code","42686455":"code","1bcfc938":"code","1b250de6":"code","906ae136":"code","075d0540":"code","03d11111":"code","ead97cbc":"code","62751271":"code","3ccc41e7":"code","5f5059e7":"code","ae136276":"code","724df984":"code","89b15d6f":"code","69309fa6":"code","cfffa38a":"code","f05cde5b":"code","1586e732":"code","8ec5c99f":"code","a8c07a59":"code","5ef090af":"code","73ec2b5c":"code","62a38d6a":"code","378bf32d":"code","5032aedb":"code","0dc718d7":"code","45901113":"code","1d7bb3d3":"code","d30fd1ea":"code","a528b3e6":"code","93cab6d1":"code","78a27229":"code","80199c49":"code","e6475452":"code","8bdb0faf":"code","67c467a2":"code","7540b737":"code","7aea5537":"code","487896f2":"code","bda4cebf":"code","c4955827":"code","649ae5a5":"code","b8114f39":"code","63658bd8":"code","d662cc5e":"code","83e0d22d":"code","b1ef5ab6":"code","70d29404":"code","1a3472ad":"code","6423226b":"code","837207f2":"code","e766025b":"code","df44749b":"code","c9cb154e":"code","d65845a0":"code","bff47c63":"code","6bcb6287":"code","1193af81":"code","f2bc9f3d":"code","62e2794a":"code","95fcef91":"code","07878567":"code","383ccfc7":"code","66fbc783":"code","41664d08":"code","c02a2e4c":"code","8b5098da":"code","391ca877":"code","fb88ffa6":"code","e6fee444":"code","58d91454":"code","0c2ddd1f":"code","2abc8ac6":"code","bd5e9df8":"code","0885845d":"code","01ca67f0":"code","0337c6d7":"code","f5e24e23":"code","340d34b1":"code","f63a1dec":"code","5c82149a":"code","b5bacd45":"code","dbabaede":"code","ebafea3e":"code","d989f6b4":"code","524afe81":"code","30dc9d5c":"code","50462f7f":"code","26fa404d":"code","e1dfeb2e":"code","e8cd078c":"code","c2aefdf8":"code","e61e573c":"code","fbe51641":"code","f68648bf":"code","9c92746f":"code","470f5b96":"code","864a2332":"code","1f949c99":"code","d3c2c272":"code","bcf9dcd1":"code","700e711e":"code","6c28e635":"code","10020bd2":"code","b3414a7b":"code","37786db9":"code","8cdeeb97":"code","c9ff32e8":"code","9c4de120":"code","0ae7bcea":"code","fc406c9a":"code","8f290c69":"code","0f446dba":"code","de21ee3f":"code","bce19b48":"code","9a6661c2":"code","c4d87200":"code","78c5346d":"code","287eca0e":"code","82c68acb":"code","fc8159b6":"code","e03c71e3":"code","28912ff5":"code","75b7d2a7":"code","2f0772e9":"code","98279a2f":"code","5f9135c2":"code","77930e18":"code","86db7f42":"code","5008c9f9":"code","7c5a0041":"code","5477e390":"code","b491083f":"code","19005e50":"code","eef5bfba":"code","0ff30739":"code","2462367c":"code","1db14482":"code","7d865bbd":"code","3d621271":"code","8b85df3c":"code","32310d8d":"code","054067f3":"code","e1d17699":"code","754b6889":"code","404c8f40":"code","fe0e1aac":"code","5da2ba5e":"code","b18d22de":"code","a91d4de7":"code","6ee595d5":"code","c019edea":"code","d15520e5":"code","86776616":"code","d6419b54":"code","a701dd09":"code","60ff4683":"code","47b15301":"code","29a97c87":"code","db9a4ee1":"code","b3408efa":"code","024d17ef":"code","726c9619":"code","dca378fd":"code","4e2dc95b":"code","3c62e720":"code","8b9b12e6":"code","b758a0eb":"code","f8de7c90":"code","9476ab14":"code","a2eee02c":"code","ff87fb3c":"code","10bc2f40":"code","e587bbc8":"code","6c479525":"code","0cf96852":"code","b77bf031":"code","710a694b":"code","bdc07669":"code","72714fbc":"code","d6383778":"code","9322d50b":"code","4e091583":"code","a19ac041":"code","7a5361ff":"code","56d5b998":"code","9c7a7130":"code","f62e3747":"code","fa125f19":"code","dc1667ca":"code","68cf4cfa":"code","c3d14fa9":"code","48dcb54e":"code","627353aa":"code","16c934dc":"code","1c0c0329":"code","7bbdf4fd":"code","483eab30":"code","6384aaf0":"code","758e6d9c":"code","4dcdcf9d":"code","ccc36515":"code","efe89a2e":"code","63da0ad9":"code","f83c41f9":"code","d1d3e911":"code","dc976169":"code","89ffe5c4":"code","ac3d4c65":"code","f04b430f":"code","61fb0ee0":"code","37ca297e":"code","fc5724c3":"code","e1509bd7":"code","a3cced96":"code","71426a9a":"code","f025173b":"code","8b7000ca":"code","f7c09005":"code","cabb1158":"code","dd437e9f":"code","849d2e84":"code","3b23ca95":"markdown","2d02f617":"markdown","e9fd4f4f":"markdown","2fb025c4":"markdown","d795f930":"markdown","36b0b5bb":"markdown","7f42ba41":"markdown","b316c27e":"markdown","111ee3f0":"markdown","37e688f2":"markdown","51887a48":"markdown","f256c7db":"markdown","4827d4cb":"markdown","e8281228":"markdown","8f0834c2":"markdown","82c6308d":"markdown","8fe79186":"markdown","0f448bdc":"markdown","a39e2388":"markdown","50626417":"markdown","0d22bc4f":"markdown","0d252f21":"markdown","d52a2db7":"markdown","b3caf052":"markdown","e8a6173b":"markdown","3d4ea05f":"markdown","e87e303d":"markdown","15e23790":"markdown","6df3648a":"markdown","78e98166":"markdown","5647c185":"markdown","5f569c71":"markdown","bd6dca7d":"markdown","b0b36ab6":"markdown","61597c17":"markdown","cd9d4f8d":"markdown","62a2142f":"markdown","67dacccc":"markdown","94a7718e":"markdown","d6ca1101":"markdown"},"source":{"38d709f0":"#pip install lux-api","da3e8cdd":"#pip install pandasgui","acec6a77":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#import lux","c5338afd":"import warnings\nwarnings.filterwarnings('ignore')","9bd1cba6":"pd.pandas.set_option('display.max_columns', 100)","5f3717d8":"train_data = pd.read_csv('..\/input\/churn-risk-rate-hackerearth-ml\/train.csv')\ntrain_data","3105f627":"test_data = pd.read_csv('..\/input\/churn-risk-rate-hackerearth-ml\/test.csv')\ntest_data","c996efca":"test_customer_id = test_data['customer_id']","718e6a02":"#Try\ntrain_data['churn_risk_score'].isnull().count()","f24abb7b":"#Concatinating train and test data\n# Train = 1 i.e Belongs to training data and 0 belongs to test data\ntrain_data['Train'] = 1\ntest_data['Train'] = 0","c8658755":"new_data = pd.concat([train_data, test_data]).reset_index(drop=True)","b496b4bf":"new_data","cda90d74":"new_data['customer_id'].value_counts() # total unique values","ec7d32ba":"#Dropping 'customer_id' colummn as it has all unique values\nnew_data.drop('customer_id', axis = 1, inplace = True)","13b4e01d":"new_data.columns","a9f7deb3":"new_data.head()","f1337e22":"new_data['security_no'].value_counts() # total unique values","b200258a":"#Dropping 'security_no' colummn as it has all unique values\nnew_data.drop('security_no', axis = 1, inplace = True)","6128d1df":"new_data.head(2)","fca83495":"new_data['Name'].value_counts() # total unique values","d1849521":"#Dropping 'Name' colummn as it has all unique values\nnew_data.drop('Name', axis = 1, inplace = True)","4df7bc92":"new_data.info()","d108588e":"new_data['age'].value_counts() # total unique values","1b5e984b":"plt.figure(figsize = (20,5))\nsns.countplot(new_data['age'])","f082dd7f":"plt.figure(figsize = (20,5))\nsns.countplot(new_data['age'], hue = new_data['Train'], )\n#In training data, the count of different age groups are almost same i.e between 600-700\n#  whereas, in testing data the count is between  300-400","f29ecec1":"new_data['churn_risk_score'].value_counts()","7bfb1731":"new_data['churn_risk_score'] = new_data['churn_risk_score'].replace(-1,1)","1a41bf47":"new_data['churn_risk_score'].value_counts()","07e546b7":"plt.figure(figsize = (20,5))\nsns.countplot(new_data['churn_risk_score'], hue = new_data['Train'])\n# for the training data, majority customers has churn_risk_score 3 or greater than 3, which is bad\n# Training data also has an outlier of churn_risk_score = -1","e91ae1ba":"sns.countplot('gender', data = new_data)\n# The count for no of males and females is almost same. There are very few whose gender is unknown","df823581":"sns.countplot('gender',hue = 'churn_risk_score', data = new_data)\n# For Training Data as Test Data has no churn_risk_score column","0babfb3d":"new_data['churn_risk_score'].value_counts()\n# From this, we can make an assumption that, churn_rate_score > 3 means that there are very high chances of that customer\n# unsubscribing from there services","35c5bea1":"sns.countplot(train_data['region_category'], hue = train_data['churn_risk_score']>3)\n# In village region - around 2K out of 4700 people have churn rate > 3 i.e is around 43%\n# In City region - around 7K out of 12700 have churn rate > 3 i.e is around 55%\n# In Town Region - around 7500 out of 14128 have churn rate > 3 i.e is around 53%","492a7b1f":"train_data['region_category'].value_counts() # In training Data","2b58b957":"new_data['membership_category'].value_counts()","00ee8999":"sns.countplot(train_data['membership_category'])\nplt.xticks(rotation = 90)\nplt.show()","ac42120d":"plt.figure(figsize = (8,8))\ntrain_data['membership_category'].value_counts().plot.pie(autopct='%1.1f%%')\n# Around 23.7% People come in the category having Platinum Memebership and Premiuim Membership\n# Around 41.7% people come in the category having basic or No Memebership\n# Around 34.6% people come ine the category having Gold or Silver Memebership","74fea55a":"plt.figure(figsize = (10,5))\nsns.countplot(new_data['membership_category'], hue = new_data['churn_risk_score'])\nplt.xticks(rotation = 90)\nplt.show()","e2363f71":"new_data.head()","a9b84188":"new_data['joined_through_referral'].value_counts()","abec6a61":"train_data['referral_id'].value_counts()","ead2a3e9":"# replacing xxxxxxxx by np.nan values\n#new_data['referral_id'] = new_data['referral_id'].replace('xxxxxxxx', np.nan)","9000ba10":"new_data.head()","a97611a2":"new_data","1bea7025":"new_data['joined_through_referral'].value_counts()","cb14a61a":"new_data['referral_id'].value_counts()","ef07e617":"for i, j in zip(new_data.joined_through_referral, new_data.referral_id):\n  #print(i, j)\n  if (i == '?') and (j != 'xxxxxxxx'):\n           new_data['joined_through_referral'] = new_data['joined_through_referral'].replace('?', 'Yes')\n  else:\n        pass","3aaf590d":" new_data.head()","832c57cd":"new_data['joined_through_referral'].value_counts()\n# now, we don't have any outlier in 'joined_through_referral' column.","63c3af2e":"new_data['joined_through_referral'].value_counts().plot.pie(autopct='%1.1f%%')\n# About 57.6% people have joined through a referral.","a548611f":"new_data.head()","90a819b3":"new_data['referral_id'].value_counts()","e11cd3ea":"new_data.drop('referral_id', axis = 1, inplace = True)\n# dropping 'referral_id' column has it had a lot of missing values and we anyway have 'joined_through_referral' column to\n# give details, like whether the cutomer joined through a referral or not.","c1944a92":"new_data['preferred_offer_types'].value_counts()","1f3fd3a6":"new_data['preferred_offer_types'].value_counts().plot.pie(autopct='%1.1f%%')\n# There is equal percentages of customers enjoying different offers.","58e5f38c":"plt.figure(figsize = (15, 5))\nsns.countplot(train_data['preferred_offer_types'], hue = train_data['churn_risk_score'])\n# Customers without offers have a slightly higher chances of having 'churn_risk_score' >=3","ba1d9f9f":"new_data['region_category'].value_counts().plot.pie(autopct='%1.1f%%')\n# Around 45% subscribers are from Town, 40% from City, and, 15% fom Village","8b8fac04":"plt.figure(figsize = (15,5))\nsns.countplot(new_data['membership_category'], hue = new_data['region_category'])\n# In every 'membership_category', majority subscribers are from Town and City.","0de6215f":"print(new_data['medium_of_operation'].value_counts())\nprint('\\n internet_option: \\n',new_data['internet_option'].value_counts())","48b08ec5":"new_data['medium_of_operation'].value_counts().keys()","fcb0be44":"medium_of_operation_list = new_data['medium_of_operation'].value_counts().keys()\nmedium_of_operation_list","c8b09335":"new_data.head(30)","0fb6398e":"new_data['internet_option'].value_counts().keys()","c09c4048":"\nwifi = []\nfibrop = []\nmobiledt = []\n\nfor i,j in zip(new_data.medium_of_operation, new_data.internet_option):\n        #print(i,j)\n        if j == 'Wi-Fi':\n            wifi.append(i)\n        elif j == 'Fiber_Optic':\n            fibrop.append(i)\n        elif j == 'Mobile_Data':\n            mobiledt.append(i)\n        else:\n            pass","6332b026":"def count_fun(lst, name):\n    return lst.count(name)","05f33e09":"# ['Desktop', 'Smartphone', '?', 'Both']\nlst = wifi\nprint('wifi Users : \\n')\nname = 'Desktop'\nprint('{} has occurred {} times'.format(name, count_fun(lst, name))) \n\nname = 'Smartphone'\nprint('{} has occurred {} times'.format(name, count_fun(lst, name))) \n\nname = '?'\nprint('{} has occurred {} times'.format(name, count_fun(lst, name))) \n\nname = 'Both'\nprint('{} has occurred {} times'.format(name, count_fun(lst, name))) \n\n# Mobile Data\nlst = mobiledt\nprint('\\nMobile Data Users : \\n')\nname = 'Desktop'\nprint('{} has occurred {} times'.format(name, count_fun(lst, name))) \n\nname = 'Smartphone'\nprint('{} has occurred {} times'.format(name, count_fun(lst, name))) \n\nname = '?'\nprint('{} has occurred {} times'.format(name, count_fun(lst, name))) \n\nname = 'Both'\nprint('{} has occurred {} times'.format(name, count_fun(lst, name))) \n\n# Fibre Optics\nlst = fibrop\nprint('\\nFibre Optics Users : \\n')\nname = 'Desktop'\nprint('{} has occurred {} times'.format(name, count_fun(lst, name))) \n\nname = 'Smartphone'\nprint('{} has occurred {} times'.format(name, count_fun(lst, name))) \n\nname = '?'\nprint('{} has occurred {} times'.format(name, count_fun(lst, name))) \n\nname = 'Both'\nprint('{} has occurred {} times'.format(name, count_fun(lst, name))) ","b9ecf4a4":"# medium_of_operation -  ['Desktop', 'Smartphone', '?', 'Both']\n# internet_option - ['Wi-Fi', 'Fiber_Optic', 'Mobile_Data']\n\n#DataFrame['column_name'] = numpy.where(condition, new_value, DataFrame.column_name)","17605642":"sns.countplot(new_data['internet_option'], hue = new_data['medium_of_operation'])","66abc481":"new_data[(new_data['medium_of_operation'] == '?') & (new_data['internet_option'] == 'Wi-Fi')].shape","903d91be":"condt = (new_data['medium_of_operation'] == '?') & (new_data['internet_option'] == 'Wi-Fi')\nnew_data['medium_of_operation'] = np.where((condt), 'Desktop', new_data['medium_of_operation'])\n\ncondt = (new_data['medium_of_operation'] == '?') & (new_data['internet_option'] == 'Fiber_Optic')\nnew_data['medium_of_operation'] = np.where((condt), 'Smartphone', new_data['medium_of_operation'])\n\ncondt = (new_data['medium_of_operation'] == '?') & (new_data['internet_option'] == 'Mobile_Data')\nnew_data['medium_of_operation'] = np.where((condt), 'Smartphone', new_data['medium_of_operation'])","c11872b0":"new_data['medium_of_operation'].value_counts()","781693e5":"new_data.head(20)","b49bca41":"new_data['medium_of_operation'].value_counts().plot.pie(autopct='%1.1f%%')","c32b0be0":"new_data['churn_risk_score'].value_counts().plot.pie(autopct='%1.1f%%')","e8138a62":"sns.countplot(new_data['medium_of_operation'], hue = new_data['churn_risk_score'])","3f8d5c1f":"new_data['internet_option'].value_counts().plot.pie(autopct='%1.1f%%')","4e7b9011":"sns.countplot(new_data['membership_category'], hue = new_data['medium_of_operation'])\nplt.xticks(rotation = 90)\nplt.show()","abd04750":"new_data.head(30)","fae13897":"new_data['avg_time_spent'].isnull().any()","e39ef029":"plt.figure(figsize = (15,5))\nsns.distplot(new_data['avg_time_spent'])\nplt.xlim(-1000,1000)","78b2b4f7":"new_data.loc[new_data['avg_time_spent'] < 0].shape","ada7a4b5":"new_data.loc[new_data['avg_time_spent'] < 0]","b33660dd":"new_data['avg_time_spent'].dtype","ca32bb1c":"for val in new_data['avg_time_spent']:\n    time = str (val)\n    if '-' in  time:\n        splt = time.split('-')\n        #print(splt[1])\n        res = splt[1]\n        print( float (res))\n        #print(new_data['avg_time_spent'][val])\n    ","45a0ae48":"def change_sign(val):\n    time = str (val)\n    if '-' in  time:\n        splt = time.split('-')\n        res = splt[1]\n        #print(res)\n        #print(new_data['avg_time_spent'][val])\n        return float(res)\n    else:\n        return val","391b4e3e":"new_data['avg_time_spent'] = new_data['avg_time_spent'].apply(change_sign)","5e59d315":"new_data['avg_time_spent'].dtype","35b39b6d":"new_data.loc[new_data['avg_time_spent'] < 0].shape\n# all the negative values are handled","e35fda2d":"plt.figure(figsize = (15,5))\nsns.distplot(new_data['avg_time_spent'])\nplt.xlim(-1000,1000)","23c459eb":"new_data.head(30)","b8236fdc":"new_data['days_since_last_login'].isnull().any()","90f42a06":"plt.figure(figsize = (15,5))\nsns.distplot(new_data['days_since_last_login'])\nplt.xlim(-20,30)","1627f6bb":"new_data.loc[new_data['days_since_last_login'] < 0].shape","1c0c0cfd":"test_data.loc[new_data['days_since_last_login'] < 0].shape","243cbfe3":"#new_data['days_since_last_login'].mean()\n#condt = (new_data['medium_of_operation'] == '?') & (new_data['internet_option'] == 'Mobile_Data')\n#new_data['medium_of_operation'] = np.where((condt), 'Smartphone', new_data['medium_of_operation'])","a3c70653":"condt = new_data['days_since_last_login'] < 0\ncondt","8924dc56":"new_data['days_since_last_login'] = np.where((condt), np.nan, new_data['days_since_last_login'])","64268e6f":"new_data.loc[new_data['days_since_last_login'] < 0].shape","55d1e854":"test_data.loc[new_data['days_since_last_login'] < 0].shape","74b28e9b":"loc = new_data.loc[new_data['days_since_last_login'] < 0]","78d24245":"# df.drop(df[df['Age'] < 25].index, inplace = True)\n#new_data = new_data.drop(new_data.loc[new_data['days_since_last_login'] < 0].index)","3581de01":"new_data.shape","a309525d":"new_data.info()","22475d06":"plt.figure(figsize = (10,5))\nsns.distplot(new_data['days_since_last_login'])\nplt.xlim(-10,30)","027d9349":"new_data.head()","80e39926":"plt.figure(figsize = (15,5))\nsns.distplot(new_data['avg_transaction_value'])","a64635a9":"new_data['avg_transaction_value'].isna().any()","2d631a7d":"new_data.head()","4a2a4a72":"dt = new_data.copy()","c0699baf":"dt.shape","3d23b2f8":"dt = dt.drop(new_data.loc[new_data['avg_frequency_login_days'] == 'Error'].index)","21fefcb2":"dt.shape","6461ac22":"#plt.figure(figsize = (15,5))\n#sns.distplot(new_data['avg_frequency_login_days'])","dd48c619":"dt['avg_frequency_login_days'].mode()","1e1d48f1":"dt['avg_frequency_login_days'].value_counts()","48794336":"new_data['avg_frequency_login_days']","ae9c5ef0":"new_data.loc[new_data['avg_frequency_login_days'] == 'Error'].shape","8c728f7b":"new_data.loc[new_data['avg_frequency_login_days'] == 'Error']","aebbce00":"#new_data['avg_frequency_login_days'] = new_data['avg_frequency_login_days'].replace('Error', 17)","f8bf8e03":"new_data['avg_frequency_login_days'] = new_data['avg_frequency_login_days'].replace('Error', np.nan)","72ed5db4":"new_data.loc[new_data['avg_frequency_login_days'] == 'Error'].shape","18e4ffc9":"plt.figure(figsize = (15,5))\nsns.distplot(new_data['avg_frequency_login_days'])","6beb509f":"new_data['avg_frequency_login_days'] = new_data['avg_frequency_login_days'].astype(float)","a81247d2":"new_data.loc[new_data['avg_frequency_login_days'] < 0 ].shape","3e83be90":"condt = new_data['avg_frequency_login_days'] < 0 \nnew_data['avg_frequency_login_days'] = np.where((condt), np.nan, new_data['avg_frequency_login_days'])","4c7e7132":"new_data.loc[new_data['avg_frequency_login_days']<0].shape","f49601fc":"new_data['avg_frequency_login_days'].dtype","b94a822e":"new_data['avg_frequency_login_days'].isnull().sum()","64615e2a":"new_data['avg_frequency_login_days'] = new_data['avg_frequency_login_days'].astype(float)","d2fa3d25":"new_data['avg_frequency_login_days'].dtype","484bc626":"new_data.head()","c0eff19f":"plt.figure(figsize = (15,5))\nsns.distplot(new_data['points_in_wallet'])","3db96e70":"new_data[new_data['points_in_wallet'] < 0].shape","807f4ab1":"condt = new_data['points_in_wallet'] < 0\ncondt","42686455":"new_data['points_in_wallet'] = np.where((condt), np.nan, new_data['points_in_wallet'])","1bcfc938":"new_data[new_data['points_in_wallet'] < 0].shape","1b250de6":"new_data.info()","906ae136":"#new_data = new_data.drop(new_data.loc[new_data['points_in_wallet'] < 0].index)\n#new_data[new_data['points_in_wallet'] < 0].shape","075d0540":"plt.figure(figsize = (15,5))\nsns.distplot(new_data['points_in_wallet'])","03d11111":"new_data['points_in_wallet'].isnull().sum()","ead97cbc":"from sklearn.impute import KNNImputer","62751271":"new_data.columns","3ccc41e7":"#imputer = KNNImputer(n_neighbors=3, missing_values=np.nan)","5f5059e7":"new_data['points_in_wallet'].dtype","ae136276":"new_data['used_special_discount'].value_counts().plot.pie(autopct='%1.1f%%')","724df984":"sns.countplot(train_data['used_special_discount'], hue = train_data['churn_risk_score'])","89b15d6f":"new_data['used_special_discount'].value_counts()","69309fa6":"new_data.info()","cfffa38a":"new_data['past_complaint'].value_counts()","f05cde5b":"new_data['past_complaint'].value_counts().plot.pie(autopct='%1.1f%%')","1586e732":"new_data['past_complaint'].unique()","8ec5c99f":"new_data['past_complaint'].isnull().sum()","a8c07a59":"plt.figure(figsize = (15,5))\nsns.countplot(new_data['past_complaint'], hue = new_data['churn_risk_score'])","5ef090af":"new_data","73ec2b5c":"new_data['complaint_status'].unique()","62a38d6a":"new_data['complaint_status'].value_counts()","378bf32d":"plt.figure(figsize = (7, 7)) \nnew_data['complaint_status'].value_counts().plot.pie(autopct = '%1.1f%%')","5032aedb":"plt.figure(figsize = (15, 5)) \nsns.countplot(new_data['complaint_status'], hue = new_data['churn_risk_score'])","0dc718d7":"new_data['feedback'].value_counts()","45901113":"new_data['feedback'].unique()","1d7bb3d3":"plt.figure(figsize = (8,8))\nnew_data['feedback'].value_counts().plot.pie(autopct = '%1.1f%%')","d30fd1ea":"plt.figure(figsize = (15,5))\nsns.countplot(new_data['feedback'], hue = new_data['churn_risk_score'])\nplt.xticks(rotation = 90)\nplt.show()","a528b3e6":"new_data","93cab6d1":"new_data['gender'].value_counts()","78a27229":"new_data['gender'] = new_data['gender'].map({'F' : 0, 'M' : 1, 'Unknown' : 2})","80199c49":"new_data['gender'].value_counts()","e6475452":"new_data['region_category'].value_counts()","8bdb0faf":"new_data['region_category'] = new_data['region_category'].map({'Town' : 0, 'City' : 1, 'Village' : 2})","67c467a2":"new_data['region_category'].value_counts()","7540b737":"new_data['membership_category'].value_counts()","7aea5537":"new_data['membership_category'] = new_data['membership_category'].map({'Basic Membership' : 0, \n                                                                       'No Membership' : 1, \n                                                                       'Gold Membership' : 2,\n                                                                       'Silver Membership' : 3,\n                                                                       'Premium Membership' : 4,\n                                                                       'Platinum Membership' : 5})","487896f2":"new_data['membership_category'].value_counts()","bda4cebf":"new_data['joined_through_referral'].value_counts()","c4955827":"new_data['joined_through_referral'] = new_data['joined_through_referral'].map({'Yes' : 0, 'No' : 1})","649ae5a5":"new_data['joined_through_referral'].value_counts()","b8114f39":"new_data['preferred_offer_types'].value_counts()","63658bd8":"new_data['preferred_offer_types'] = new_data['preferred_offer_types'].map({'Credit\/Debit Card Offers' : 0, \n                                                                           'Gift Vouchers\/Coupons' : 1, \n                                                                           'Without Offers' : 2})","d662cc5e":"new_data['preferred_offer_types'].value_counts()","83e0d22d":"new_data['medium_of_operation'].value_counts()","b1ef5ab6":"new_data['medium_of_operation'] = new_data['medium_of_operation'].map({'Smartphone' : 0, \n                                                                           'Desktop' : 1, \n                                                                           'Both' : 2})","70d29404":"new_data['medium_of_operation'].value_counts()","1a3472ad":"new_data['internet_option'].value_counts()","6423226b":"new_data['internet_option'] = new_data['internet_option'].map({'Fiber_Optic' : 0,'Wi-Fi' : 1,'Mobile_Data' : 2})","837207f2":"new_data['internet_option'].value_counts()","e766025b":"print(new_data['used_special_discount'].value_counts())\nprint(new_data['offer_application_preference'].value_counts())\nprint(new_data['past_complaint'].value_counts())","df44749b":"new_data['used_special_discount'] = new_data['used_special_discount'].map({'Yes' : 0,'No' : 1})\nnew_data['offer_application_preference'] = new_data['offer_application_preference'].map({'Yes' : 0,'No' : 1})\nnew_data['past_complaint'] = new_data['past_complaint'].map({'Yes' : 0,'No' : 1})","c9cb154e":"print(new_data['used_special_discount'].value_counts())\nprint(new_data['offer_application_preference'].value_counts())\nprint(new_data['past_complaint'].value_counts())","d65845a0":"new_data['complaint_status'].value_counts()","bff47c63":"new_data['complaint_status'] = new_data['complaint_status'].map({'Not Applicable' : 0,'Solved in Follow-up' : 1, \n                                                              'No Information Available' : 2,'Unsolved' : 3, 'Solved' : 4})","6bcb6287":"new_data['complaint_status'].value_counts()","1193af81":"new_data['feedback'].value_counts()","f2bc9f3d":"from sklearn.preprocessing import LabelEncoder","62e2794a":"le = LabelEncoder()","95fcef91":"new_data['feedback'] = le.fit_transform(new_data['feedback'])","07878567":"new_data['feedback'].value_counts()","383ccfc7":"new_data.info()","66fbc783":"new_data.head()","41664d08":"def splt_fun_year(val):\n    x = val.split('-')\n    return x[0]\n\ndef splt_fun_month(val):\n    x = val.split('-')\n    return x[1]\n\ndef splt_fun_day(val):\n    x = val.split('-')\n    return x[2]","c02a2e4c":"new_data['joining_date_year'] = new_data['joining_date'].apply(splt_fun_year)\nnew_data['joining_date_month'] = new_data['joining_date'].apply(splt_fun_month)\nnew_data['joining_date_day'] = new_data['joining_date'].apply(splt_fun_day)","8b5098da":"new_data.drop('joining_date', axis = 1, inplace = True)","391ca877":"new_data.head()","fb88ffa6":"new_data['joining_date_year'] = new_data['joining_date_year'].astype(int)\nnew_data['joining_date_month'] = new_data['joining_date_month'].astype(int)\nnew_data['joining_date_day'] = new_data['joining_date_day'].astype(int)","e6fee444":"new_data.info()","58d91454":"new_data['last_visit_time']","0c2ddd1f":"def splt_fun_hr(val):\n    x = val.split(':')\n    return x[0]\n\ndef splt_fun_min(val):\n    x = val.split(':')\n    return x[1]","2abc8ac6":"new_data['last_visit_hour'] = new_data['last_visit_time'].apply(splt_fun_hr)\nnew_data['last_visit_min'] = new_data['last_visit_time'].apply(splt_fun_min)","bd5e9df8":"new_data.drop('last_visit_time',axis = 1, inplace = True)","0885845d":"new_data['last_visit_hour'] = new_data['last_visit_hour'].astype(int)\nnew_data['last_visit_min'] = new_data['last_visit_min'].astype(int)","01ca67f0":"new_data.head()","0337c6d7":"new_data.info()","f5e24e23":"from sklearn.impute import KNNImputer","340d34b1":"imputer = KNNImputer(n_neighbors=3, missing_values=np.nan)","f63a1dec":"saved_data = new_data\n#saved_data","5c82149a":"#new_data = saved_data","b5bacd45":"new_data.loc[new_data['churn_risk_score'].notnull()]","dbabaede":"train_data = new_data.loc[new_data['churn_risk_score'].notnull()]","ebafea3e":"train_data.shape","d989f6b4":"train_data.isna().sum()","524afe81":"#encode_data = pd.DataFrame(np.round(imputer.fit_transform(new_data)),\n#                           columns = new_data.columns.drop(['churn_risk_score', 'Train']))\n\n#encode_data = pd.DataFrame(np.round(imputer.fit_transform(new_data[['region_category', 'preferred_offer_types', 'points_in_wallet']])),\n#                           columns = lst)\n\nencode_data_train = pd.DataFrame(np.round(imputer.fit_transform(train_data)),\n                           columns = train_data.columns)","30dc9d5c":"encode_data_train.isnull().sum()","50462f7f":"train_data = encode_data_train\ntrain_data.shape","26fa404d":"train_data.drop('Train', axis = 1, inplace = True)","e1dfeb2e":"train_data","e8cd078c":"#new_data = saved_data","c2aefdf8":"new_data.loc[new_data['churn_risk_score'].isnull()]","e61e573c":"test_data = new_data.loc[new_data['churn_risk_score'].isnull()]","fbe51641":"print(train_data.shape, test_data.shape)","f68648bf":"test_data.isna().sum()","9c92746f":"test_data.drop('churn_risk_score', axis=1, inplace = True)","470f5b96":"test_data.drop('Train', axis=1, inplace = True)","864a2332":"test_data.info()","1f949c99":"encode_data_test = pd.DataFrame(np.round(imputer.fit_transform(test_data)),\n                           columns = test_data.columns)","d3c2c272":"encode_data_test.isnull().sum()","bcf9dcd1":"test_data = encode_data_test\ntest_data.shape","700e711e":"print(train_data.shape, test_data.shape)","6c28e635":"plt.figure(figsize = (25,10))\nsns.heatmap(train_data.corr(), annot = True)","10020bd2":"new_data.corr()['churn_risk_score']","b3414a7b":"plt.figure(figsize = (25,10))\nsns.heatmap(test_data.corr(), annot = True)","37786db9":"#test_data.drop(['offer_application_preference', 'complaint_status'], axis = 1, inplace = True)\n#test_data.drop(['used_special_discount', 'complaint_status'], axis = 1, inplace = True)","8cdeeb97":"plt.figure(figsize = (25,10))\nsns.heatmap(train_data.corr(), annot = True)","c9ff32e8":"train_data","9c4de120":"train_data.corr()['churn_risk_score']","0ae7bcea":"saved_train_data = train_data\nsaved_test_data = test_data","fc406c9a":"#train_data = saved_train_data\n#test_data = saved_test_data","8f290c69":"train_data","0f446dba":"train_data.drop(['last_visit_hour','last_visit_min'], axis = 1, inplace = True)\ntest_data.drop(['last_visit_hour','last_visit_min'], axis = 1, inplace = True)","de21ee3f":"train_data.drop(['used_special_discount','complaint_status'], axis = 1, inplace = True)\ntest_data.drop(['used_special_discount','complaint_status'], axis = 1, inplace = True)","bce19b48":"print(train_data.shape, test_data.shape)","9a6661c2":"from sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix, roc_auc_score\nfrom xgboost import XGBClassifier","c4d87200":"x = train_data.drop('churn_risk_score', axis = 1)\nx","78c5346d":"y = train_data['churn_risk_score']\ny","287eca0e":"xtrain, xtest, ytrain, ytest = train_test_split(x, y, random_state = 101, test_size = .2)","82c68acb":"print(xtrain.shape, xtest.shape, ytrain.shape, ytest.shape)","fc8159b6":"new_data.corr()['churn_risk_score']","e03c71e3":"xgb_classifier = XGBClassifier(random_state = 100)\nxgb_classifier.fit(xtrain, ytrain)","28912ff5":"#xgb_classifier.get_params() #default paramters","75b7d2a7":"xgb_ypred = xgb_classifier.predict(xtest)","2f0772e9":"from sklearn.metrics import f1_score","98279a2f":"score = 100 * f1_score(ytest, xgb_ypred, average=\"macro\")\nscore","5f9135c2":"rf_classifier = RandomForestClassifier(criterion= 'entropy',\n                                       n_estimators = 90,random_state=100)\nrf_classifier.fit(xtrain, ytrain)","77930e18":"#rf_classifier.get_params()","86db7f42":"rf_ypred = rf_classifier.predict(xtest)","5008c9f9":"score = 100 * f1_score(ytest, rf_ypred, average=\"macro\")\nscore","7c5a0041":"from sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier","5477e390":"sc = StandardScaler()","b491083f":"xtrain_sc = sc.fit_transform(xtrain)\nxtrain_sc","19005e50":"xtest_sc = sc.transform(xtest)","eef5bfba":"knn_classifier = KNeighborsClassifier()\nknn_classifier.fit(xtrain_sc,ytrain)","0ff30739":"knn_classifier.get_params()","2462367c":"knn_ypred = knn_classifier.predict(xtest_sc)","1db14482":"score = 100 * f1_score(ytest, knn_ypred, average=\"macro\")\nscore","7d865bbd":"pip install statsmodels","3d621271":"from statsmodels.stats.outliers_influence import variance_inflation_factor","8b85df3c":" \n\nvif = pd.DataFrame()\nvif[\"vif\"] = [variance_inflation_factor(xtrain_sc,i) for i in range(xtrain_sc.shape[1])]\nvif[\"Features\"] = x.columns\n\n#let's check the values\nvif","32310d8d":"svm_classifier = SVC(kernel='rbf', random_state = 10)\nsvm_classifier.fit(xtrain_sc, ytrain)","054067f3":"svm_ypred = svm_classifier.predict(xtest_sc)","e1d17699":"score = 100 * f1_score(ytest, svm_ypred, average=\"macro\")\nscore","754b6889":"pip install lightgbm","404c8f40":"import lightgbm as lgb","fe0e1aac":"lgb_classifier = lgb.LGBMClassifier(objective='multi', random_state=1, n_jobs=-1, \n                               learning_rate=0.15, \n                               n_estimators=100)","5da2ba5e":"#lgb_classifier.get_params()","b18d22de":"lgb_classifier.fit(xtrain, ytrain)","a91d4de7":"lgb_ypred = lgb_classifier.predict(xtest)","6ee595d5":"score = 100 * f1_score(ytest, lgb_ypred, average=\"macro\")\nscore","c019edea":"pip install catboost","d15520e5":"import catboost as cb","86776616":"cb_classifier = cb.CatBoostClassifier(verbose=0, iterations=100)","d6419b54":"cb_classifier.get_params()","a701dd09":"cb_classifier.fit(xtrain, ytrain)","60ff4683":"cb_ypred = cb_classifier.predict(xtest)","47b15301":"score = 100 * f1_score(ytest, cb_ypred, average=\"macro\")\nscore","29a97c87":"trial","db9a4ee1":"from scipy.stats import randint as sp_randint\n\"\"\"param_grid={\n   \n    'learning_rate':[0.5,0.1,0.01,0.001,1],\n    'max_depth': sp_randint(5,200),\n    'n_estimators':sp_randint(10,300), #[100,200,250,300,350],\n    'min_child_weight' : sp_randint(1,20),\n    'gamma' : [0.1, 0.2, 0.3], \n    'subsample': np.arange(0.5, 1, 0.1)\n}\"\"\"\n\nparam_grid={ \n    'learning_rate':[0.5,0.1,0.01,0.001,1],\n    'max_depth': sp_randint(5,100),\n    'n_estimators':sp_randint(10,100), #[100,200,250,300,350],\n    'min_child_weight' : sp_randint(1,20),\n    'gamma' : [0.1, 0.2, 0.3], \n    'subsample': np.arange(0.5, 1, 0.1)\n    }","b3408efa":"grid_xgb = RandomizedSearchCV(estimator=xgb_classifier , param_distributions = param_grid, n_jobs=-1, verbose = 3, cv = 10\n                              , n_iter = 10, scoring='f1_macro')","024d17ef":"grid_xgb.fit(xtrain, ytrain)","726c9619":"best_parameters = grid_xgb.best_params_\nprint(best_parameters)","dca378fd":"#{'gamma': 0.1, 'learning_rate': 0.01, 'max_depth': 149, 'min_child_weight': 10, 'n_estimators': 103, 'subsample': 0.7}\nnew_xgb_classifier = XGBClassifier(n_estimators = 103,\n                                          min_child_weight = 10,\n                                          gamma =  0.1,\n                                          learning_rate = 0.01,\n                                          max_depth = 149,\n                                          subsample = 0.7,)\n                                          #objective ='multi:softprob')","4e2dc95b":"new_xgb_classifier.fit(xtrain, ytrain)","3c62e720":"new_xgb_ypred = new_xgb_classifier.predict(xtest)","8b9b12e6":"score = 100 * f1_score(ytest, new_xgb_ypred, average=\"macro\")\nscore","b758a0eb":"import random\nfrom scipy.stats import randint as sp_randint\n#random.randint(3, 9)\nparam_grid = {\n    \"n_estimators\" : sp_randint(50,500),#[90,100,115,130],\n    'criterion': ['gini', 'entropy'],\n    'max_depth' : sp_randint(2,20),\n    'min_samples_leaf' : sp_randint(1,10),\n    'min_samples_split': sp_randint(2,10),\n    'max_features' : ['auto','log2']\n}","f8de7c90":"grid_rf = RandomizedSearchCV(estimator=rf_classifier , param_distributions = param_grid, n_jobs=-1, verbose = 3, cv = 10, \n                             random_state = 100, n_iter = 12, scoring='f1_macro')#'neg_mean_absolute_error')","9476ab14":"grid_rf.fit(xtrain, ytrain)","a2eee02c":"best_parameters = grid_rf.best_params_\nprint(best_parameters)","ff87fb3c":"new_rf_classifier = RandomForestClassifier(n_estimators = 217,\n                                          min_samples_split = 9,\n                                          min_samples_leaf =  1,\n                                          max_features = 'log2',\n                                          max_depth = 16,\n                                          criterion = 'entropy',\n                                           class_weight='balanced_subsample',)","10bc2f40":"new_rf_classifier.fit(xtrain, ytrain)","e587bbc8":"new_rg_ypred = new_rf_classifier.predict(xtest)","6c479525":"score = 100 * f1_score(ytest, new_rg_ypred, average=\"macro\")\nscore","0cf96852":"lgb_classifier.get_params()","b77bf031":"from scipy.stats import randint as sp_randint\nfrom scipy.stats import uniform as sp_uniform\nparam_grid = {\n             'num_leaves': sp_randint(6, 50), \n             'min_child_samples': sp_randint(10, 300), \n             'min_child_weight': [1e-5, 1e-3, 1e-2, 1e-1, 1, 1e1, 1e2, 1e3, 1e4],\n             'subsample': sp_uniform(loc=0.2, scale=0.8), \n             'colsample_bytree': sp_uniform(loc=0.4, scale=0.6),\n             'reg_alpha': [0, 1e-1, 1, 2, 5, 7, 10, 50, 100],\n             'reg_lambda': [0, 1e-1, 1, 5, 10, 20, 50, 100, 150, 200],\n    \n             #'max_depth': sp_randint(5,100), #add\n             #'n_estimators':sp_randint(10,300,50),  #add           \n}","710a694b":"grid_lgb = RandomizedSearchCV(estimator=lgb_classifier , param_distributions = param_grid, n_jobs=-1, verbose = 3, cv = 10, \n                              n_iter = 10, scoring='f1_macro')#'neg_mean_absolute_error')","bdc07669":"grid_lgb.fit(xtrain, ytrain)","72714fbc":"best_parameters = grid_lgb.best_params_\nprint(best_parameters)","d6383778":"# best\n\"\"\"new_lgb_classifier = lgb.LGBMClassifier(colsample_bytree=0.9640178917734248,\n                                           min_child_samples=149,\n                                           min_child_weight=0.001,\n                                           num_leaves = 20,\n                                           reg_alpha = 50,\n                                           reg_lambda = 100,\n                                           subsample = 0.34289945963435475)\"\"\" # best\n\nnew_lgb_classifier = lgb.LGBMClassifier(colsample_bytree=0.6891239292918483,\n                                           min_child_samples=295,\n                                           min_child_weight=10,\n                                           num_leaves = 6,\n                                           reg_alpha = 10,\n                                           reg_lambda = 150,\n                                           subsample = 0.8721158617161302,\n                                            #max_depth = 53\n                                        )\n\nnew_lgb_classifier.fit(xtrain, ytrain)\nnew_lgb_ypred = new_lgb_classifier.predict(xtest)\nscore = 100 * f1_score(ytest, new_lgb_ypred, average=\"macro\")\nscore","9322d50b":"#new_lgb_classifier.fit(xtrain, ytrain)","4e091583":"#new_lgb_ypred = new_lgb_classifier.predict(xtest)","a19ac041":"#score = 100 * f1_score(ytest, new_lgb_ypred, average=\"macro\")\n#score","7a5361ff":"cb_classifier.get_params()","56d5b998":"param_grid = {#'depth': [4, 7, 10],\n          #'learning_rate' : [0.03, 0.1, 0.15],\n         'l2_leaf_reg': [1,4,9],\n         'iterations': range(50,300,50),\n            #added\n         'learning_rate': np.arange(0.03, 0.1, 0.05),\n         'max_depth': np.arange(3, 15, 1),\n         'colsample_bylevel':  np.arange(0.3, 0.8, 0.1),\n    #'n_estimators': range(50,300,50),\n             }\n#iterations, n_estimators, num_boost_round, num_trees","9c7a7130":"grid_cb = RandomizedSearchCV(estimator=cb_classifier , param_distributions = param_grid, n_jobs=-1, verbose = 3, cv = 10, \n                             random_state = 100, n_iter = 12, scoring='f1_macro')#'neg_mean_absolute_error')","f62e3747":"grid_cb.fit(xtrain, ytrain)","fa125f19":"best_parameters = grid_cb.best_params_\nprint(best_parameters)","dc1667ca":"\"\"\"new_cb_classifier = cb.CatBoostClassifier(depth = 4,\n                                         learning_rate = 0.1,\n                                         l2_leaf_reg = 4,\n                                         iterations = 300)\"\"\" # best\n\nnew_cb_classifier = cb.CatBoostClassifier(max_depth = 5,\n                                         learning_rate = 0.08,\n                                         l2_leaf_reg = 4,\n                                         iterations = 100,\n                                         colsample_bylevel = 0.7000000000000002)","68cf4cfa":"new_cb_classifier.fit(xtrain, ytrain)","c3d14fa9":"new_cb_ypred = new_cb_classifier.predict(xtest)","48dcb54e":"score = 100 * f1_score(ytest, new_cb_ypred, average=\"macro\")\nscore","627353aa":"pip install kneed","16c934dc":"from sklearn.cluster import KMeans\nfrom kneed import KneeLocator","1c0c0329":"# Finding Optimal K Value\nwcss = []\nfor i in range(1,15):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)\n    kmeans.fit(train_data)\n    wcss.append(kmeans.inertia_)\n    \nplt.plot(range(1,15),wcss) # creating the graph between WCSS and the number of clusters\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')","7bbdf4fd":"kn = KneeLocator(range(1, 15), wcss, curve='convex', direction='decreasing')","483eab30":"no_of_clusters = kn.knee\nno_of_clusters","6384aaf0":"kmeans = KMeans(n_clusters = no_of_clusters, init = 'k-means++', random_state = 1)\ny_kmeans = kmeans.fit_predict(train_data)","758e6d9c":"y_kmeans","4dcdcf9d":"train_data['Clusters'] = y_kmeans","ccc36515":"list_of_clusters = train_data['Clusters'].unique()\nlist_of_clusters","efe89a2e":"train_data","63da0ad9":"import numpy as np","f83c41f9":"def xgb_function(xtrain, ytrain):\n    #xgb_classifier = XGBClassifier()\n    xgbclf = XGBClassifier(n_estimators = 50,\n                                          min_child_weight = 7,\n                                          gamma =  0.1,\n                                          learning_rate = 0.5,\n                                          max_depth = 5,\n                                          subsample = 0.8999999999999999,\n                                          objective ='multi:softprob')\n    xgbclf.fit(xtrain, ytrain)\n    return xgbclf\n\ndef lgb_function(xtrain, ytrain):\n    lgbclf = lgb.LGBMClassifier(colsample_bytree=0.9640178917734248,\n                                           min_child_samples=149,\n                                           min_child_weight=0.001,\n                                           num_leaves = 20,\n                                           reg_alpha = 50,\n                                           reg_lambda = 100,\n                                           subsample = 0.34289945963435475)\n    lgbclf.fit(xtrain, ytrain)\n    return lgbclf\n\ndef cb_function(xtrain, ytrain):\n    cbclf = cb.CatBoostClassifier(depth = 4,\n                                         learning_rate = 0.1,\n                                         l2_leaf_reg = 4,\n                                         iterations = 300)\n    cbclf.fit(xtrain, ytrain)\n    return cbclf\n\nfor i in list_of_clusters:\n    cluster_data = train_data[train_data['Clusters']==i]\n    \n    cluster_features = cluster_data.drop(['Clusters', 'churn_risk_score'], axis = 1)  # X\n    cluster_label = cluster_data['churn_risk_score']  # Y\n    \n    xtrain, xtest, ytrain, ytest = train_test_split(cluster_features, cluster_label, test_size = 1\/3, random_state = 355)\n    \n    xgb_fun = xgb_function(xtrain, ytrain)\n    xgb_pred = xgb_fun.predict(xtest)\n    xgb_score = 100 * f1_score(ytest, xgb_pred, average=\"macro\")\n    \n    lgb_fun = lgb_function(xtrain, ytrain)\n    lgb_pred = lgb_fun.predict(xtest)\n    lgb_score = 100 * f1_score(ytest, lgb_pred, average=\"macro\")\n    \n    cb_fun = cb_function(xtrain, ytrain)\n    cb_pred = cb_fun.predict(xtest)\n    cb_score = 100 * f1_score(ytest, cb_pred, average=\"macro\")\n    \n    if ((xgb_score > lgb_score) & (xgb_score > cb_score)):\n        print('CLUSTER ',i, ' XGB SCORE: ', xgb_score)\n    elif ((lgb_score > xgb_score) & (lgb_score > cb_score)):\n        print('CLUSTER ',i, ' LGB SCORE: ', lgb_score)\n    else:\n        print('CLUSTER ',i, ' CB SCORE: ', cb_score)\n","d1d3e911":"#for test data\ntest_kmeans = KMeans(n_clusters = no_of_clusters, init = 'k-means++', random_state = 1)\ntest_y_kmeans = kmeans.fit_predict(test_data)","dc976169":"test_y_kmeans","89ffe5c4":"test_data['Clusters'] = test_y_kmeans","ac3d4c65":"test_data['Clusters'] .unique()","f04b430f":"test_list_of_clusters = test_data['Clusters'].unique()\ntest_list_of_clusters","61fb0ee0":"test_data","37ca297e":"sub_csv = new_lgb_classifier.predict(test_data)","fc5724c3":"sub_csv","e1509bd7":"#sub_csv = sub_csv.reshape(-1) #for catboost only\nsub_csv","a3cced96":"submission_df = pd.DataFrame(columns=['customer_id', 'churn_risk_score'])","71426a9a":"submission_df","f025173b":"submission_df['churn_risk_score'] = sub_csv\nsubmission_df.shape","8b7000ca":"submission_df['customer_id'] = test_customer_id","f7c09005":"submission_df","cabb1158":"submission_df.to_csv('HE_HackathonSubmission_3-04_lgb_classifier.csv')","dd437e9f":"test_data","849d2e84":"# best model - HE_HackathonSubmission_lgb_hypertuned_classifier.csv - 76.30572","3b23ca95":"#### Customers having No Membership or Basic Membership have HIGH churn_risk_score of 5\n\n#### Customers having Platinum or Premium Membership have churn_risk_score 3 or less than 3\n\n#### Customers having Gold or Silver Membership have churn_risk_score 3 or 4\n\n#### From these observation, we can conclude that customers having No Membership or Basic Membership have very high chances of unsubscribing the services. Whereas, Customers having Platinum or Premium Membership have very low chances of unsubscribing the services. ","2d02f617":"### Cat Boost","e9fd4f4f":"#### we can see that few independent variables shows strong negative correlations(>0.7), so we will drop either one of the features ","2fb025c4":"#### As we can see that, there are negative values , which cannot be possible as days cannot be in negative - OUTLIERS\n#### Maximum people have 'days_since_last_login' between 5-25 days","d795f930":"### XGBoost Classifier","36b0b5bb":"## Model Training","7f42ba41":"#### Equal % of people have internet options as Wi-Fi, Fiber Optics and Mobile Data","b316c27e":"### Before handling missing values, we will handle the categorical columns \n##### Use Label Encoder to deal with the Categorical Data","111ee3f0":"#### 'points_in_wallet' has negative values which are very less, so we replace the it by np.nan","37e688f2":"Churn - it is most commonly expressed as the percentage of service subscribers who discontinue their subscriptions within a given time period\n\ncustomer_id\t- Represents the unique identification number of a customer\n\nName - Represents the name of a customer\n\nage - Represents the age of a customer\n\nsecurity_no\t- Represents a unique security number that is used to identify a person\n\nregion_category\t- Represents the region that a customer belongs to \n\nmembership_category -\tRepresents the category of the membership that a customer is using\n\njoining_date -\tRepresents the date when a customer became a member \n\njoined_through_referral\t- Represents whether a customer joined using any referral code or ID\n\nreferral_id -\tRepresents a referral ID\n\npreferred_offer_types -\tRepresents the type of offer that a customer prefers\n\nmedium_of_operation -\tRepresents the medium of operation that a customer uses for transactions\n\ninternet_option -\tRepresents the type of internet service a customer uses\n\nlast_visit_time -\tRepresents the last time a customer visited the website\n\ndays_since_last_login -\tRepresents the no. of days since a customer last logged into the website\n\navg_time_spent -\tRepresents the average time spent by a customer on the website\n\navg_transaction_value -\tRepresents the average transaction value of a customer\n\navg_frequency_login_days -\tRepresents the no. of times a customer has logged in to the website\n\npoints_in_wallet -\tRepresents the points awarded to a customer on each transaction \n\nused_special_discount -\tRepresents whether a customer uses special discounts offered\n\noffer_application_preference - \tRepresents whether a customer prefers offers \n\npast_complaint - Represents whether a customer has raised any complaints \n\ncomplaint_status - \tRepresents whether the complaints raised by a customer was resolved \n\nfeedback - \tRepresents the feedback provided by a customer\n\nchurn_risk_score -\tRepresents the churn risk score that ranges from 1 to 5","51887a48":"### KNN","f256c7db":"### XGB","4827d4cb":"XGB Parameters:-\n\n{'objective': 'multi:softprob',\n 'use_label_encoder': True,\n 'base_score': 0.5,\n 'booster': 'gbtree',\n 'colsample_bylevel': 1,\n 'colsample_bynode': 1,\n 'colsample_bytree': 1,\n 'gamma': 0,\n 'gpu_id': -1,\n 'importance_type': 'gain',\n 'interaction_constraints': '',\n 'learning_rate': 0.300000012,\n 'max_delta_step': 0,\n 'max_depth': 6,\n 'min_child_weight': 1,\n 'missing': nan,\n 'monotone_constraints': '()',\n 'n_estimators': 100,\n 'n_jobs': 8,\n 'num_parallel_tree': 1,\n 'random_state': 100,\n 'reg_alpha': 0,\n 'reg_lambda': 1,\n 'scale_pos_weight': None,\n 'subsample': 1,\n 'tree_method': 'exact',\n 'validate_parameters': 1,\n 'verbosity': None}","e8281228":"### CatBoost","8f0834c2":"#### Approx 47.2% of the subscribers have 'medium_of_operation' == Smartphones\n#### Approx 42.5% of the subscribers have 'medium_of_operation' == Desktop\n#### Approx 10.4% of the subscribers have 'medium_of_operation' == Both","82c6308d":"### Now, handling missing values using KNN Imputer","8fe79186":"#### Customers with feedback -  [ 'Products always in Stock', 'Quality Customer Care', 'User Friendly Website', 'Reasonable Price' ] sums to 15.1%. That means only 15.1% of the customers with this feedback has 'churn_risk_score' value < 3.\n#### Customers with feedback - ['Poor Website', 'No reason specified', 'Poor Product Quality','Poor Customer Service', 'Too many ads',] sums to 84.9%. That means 84.9% of the customers with this feedback has 'churn_risk_score' value >= 3.\n#### We can make an observation from this, that only 15% of the customers has given +ve feedback, and the other 85% has given negative feedback","0f448bdc":"### Hyperparameter Tuning","a39e2388":"### LGBM Classifier","50626417":"#### For all the customers whose 'past_complaint' value is 'No', their 'complaint_status' value is 'Not Applicable'\n#### For all the customers whose 'past_complaint' value is 'Yes', their 'complaint_status' value is either of [Solved in Follow-up, No Information Available, Unsolved, Solved]","0d22bc4f":"### Light Gradient Boosting","0d252f21":"### Random Forest Classifier","d52a2db7":"#### Majority 'avg_transaction_value' is between 1k - 50k","b3caf052":"#### There are 3021 rows, having 'days_since_last_login' < 0","e8a6173b":"### Submission","3d4ea05f":"#### Majority people have 500-900 'points_in_wallet'","e87e303d":"### SVM","15e23790":"#### There are 2650 rows, having 'avg_time_spent' < 0","6df3648a":"####  We can replace the 'Error' term in the 'avg_frequency_login_days' column by mode of 'avg_frequency_login_days' i.e 17","78e98166":"##### Performing Standard Scaling for distance Based Algorithms","5647c185":"### Random Forest Classifier","5f569c71":"#### Majority People having 'internet_option'  = 'Wi-Fi' has 'medium_of_operation' = 'Desktop', so replacing '?' by 'Desktop' in the Table\n#### Majority People having 'internet_option'  = Fiber_Optic' has 'medium_of_operation' = 'Smartphone', so replacing '?' by 'Smartphone' in the Table\n#### Majority People having 'internet_option'  = 'Mobile_Data' has 'medium_of_operation' = 'Smartphone', so replacing '?' by 'Smartphone' in the Table","bd6dca7d":"#### 55% of the customer uses special discounts offered","b0b36ab6":"#### For each 'internet_option' we checked which type of 'medium_of_operation' is mostly used.\n#### For customers, whose 'medium_of_operation' = '?', we will replace '?' with the type of internet option mostly used.","61597c17":"#### Now, Our data is ready for training. So, we will split the training and testing data from the new_data","cd9d4f8d":"### Clustering Approach","62a2142f":"#### As we can see that, there are negative values , which cannot be possible as time spent cannot be in negative - OUTLIERS\n#### Either we can drop the columns having negative values or Remove the '-' sign","67dacccc":"#### 'avg_frequency_login_days' has negative values.","94a7718e":"#### Replacing the '?' in 'joined_through_referral' by checking if it has a 'referral_id' or not.\n#### If a customer had a 'referral_id' then we replace '?' in 'joined_through_referral' by a 'Yes'","d6ca1101":"#### 'joined_through_referral' has some missing values('?'), so we will fill it with yes or no depending on whether they have a 'referral_id ' or not"}}