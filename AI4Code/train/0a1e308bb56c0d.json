{"cell_type":{"694e418e":"code","423ce479":"code","6643dd41":"code","83277198":"code","464d9ede":"code","17e5d36a":"code","6ce7946a":"code","1ac3fa33":"code","a1e6f549":"code","fb2aa7cc":"code","eb56cc1c":"code","11287e11":"code","9d655293":"code","0d400e86":"code","f17496b9":"code","63104ab6":"code","a318c6e6":"code","4bae2c24":"code","c06508a3":"code","9fb85688":"code","bc9f4e6c":"code","923fc569":"code","8dfc31ff":"code","6631b74d":"code","8a8f9e10":"code","0b3ba25d":"code","95acd1ac":"code","285a39cc":"code","d731d02c":"code","eb4d3eeb":"code","529cf6e7":"code","509fdbdf":"code","120df27c":"code","321c786e":"code","00dcb907":"markdown","43d70ea5":"markdown","a0cbf0b6":"markdown","cd5c68fd":"markdown","a6c6daa1":"markdown","f6b5d830":"markdown"},"source":{"694e418e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nstyle.use(\"fivethirtyeight\")\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom sklearn.datasets import make_swiss_roll\nfrom sklearn.cluster import AgglomerativeClustering\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom mpl_toolkits.mplot3d import Axes3D","423ce479":"data,z=make_swiss_roll(n_samples=5000,noise=0.05)\n#data[:,1] *=2\nswissrolldata=pd.DataFrame(data,columns=['x1','x2','x3'])","6643dd41":"ward=AgglomerativeClustering(n_clusters=6,linkage='ward').fit(swissrolldata)\nlabels=ward.labels_\nswissrolldata['labels']=labels","83277198":"swissrolldata.head()","464d9ede":"swissrolldata.corr()","17e5d36a":"\n#%matplotlib qt\n%matplotlib inline\nxdim=swissrolldata['x1']\nydim=swissrolldata['x2']\nzdim=swissrolldata['x3']\nfig=plt.figure(figsize=(10,6))\nax=fig.add_subplot(111,projection='3d')\nax.scatter(xdim,ydim,zdim,c=swissrolldata['labels'],cmap=\"rainbow\",s=70)\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\nplt.title(\"Swiss roll\")\nplt.show()","6ce7946a":"fig=px.scatter_3d(swissrolldata,x='x1',y='x2',z='x3',color='labels')\nfig.update_traces(marker=dict(size=5,\n                              line=dict(width=1,\n                                        color='DarkSlateGrey')),\n                  selector=dict(mode='markers'))\nfig.show()","1ac3fa33":"from sklearn.decomposition import KernelPCA","a1e6f549":"kernel=KernelPCA(n_components=2,kernel='linear')\ndata=swissrolldata.drop('labels',axis=1)\nnewdata=kernel.fit_transform(data)\nnewdata=pd.DataFrame(newdata,columns=['z1','z2'])\nnewdata['labels']=labels","fb2aa7cc":"newdata.head()","eb56cc1c":"fig=px.scatter(newdata,x='z1',y='z2',color='labels')\nfig.update_traces(marker=dict(size=5,\n                              line=dict(width=1,\n                                        color='DarkSlateGrey')),\n                  selector=dict(mode='markers'))\nfig.show()","11287e11":"kernel=KernelPCA(n_components=2,kernel='rbf',gamma=0.04)\ndata=swissrolldata.drop('labels',axis=1)\nnewdata=kernel.fit_transform(data)\nnewdata=pd.DataFrame(newdata,columns=['z1','z2'])\nnewdata['labels']=labels","9d655293":"newdata.head()","0d400e86":"\nfig=px.scatter(newdata,x='z2',y='z1',color='labels')\nfig.update_traces(marker=dict(size=5,\n                              line=dict(width=1,\n                                        color='DarkSlateGrey')),\n                  selector=dict(mode='markers'))\nfig.show()","f17496b9":"kernel=KernelPCA(n_components=2,kernel='sigmoid')\ndata=swissrolldata.drop('labels',axis=1)\nnewdata=kernel.fit_transform(data)\nnewdata=pd.DataFrame(newdata,columns=['z1','z2'])\nnewdata['labels']=labels","63104ab6":"newdata.head()","a318c6e6":"fig=px.scatter(newdata,x='z1',y='z2',color='labels')\nfig.update_traces(marker=dict(size=5,\n                              line=dict(width=1,\n                                        color='DarkSlateGrey')),\n                  selector=dict(mode='markers'))\nfig.show()","4bae2c24":"kernel=KernelPCA(n_components=2,kernel='poly')\ndata=swissrolldata.drop('labels',axis=1)\nnewdata=kernel.fit_transform(data)\nnewdata=pd.DataFrame(newdata,columns=['z1','z2'])\nnewdata['labels']=labels","c06508a3":"newdata.head()","9fb85688":"fig=px.scatter(newdata,x='z1',y='z2',color='labels')\nfig.update_traces(marker=dict(size=5,\n                              line=dict(width=1,\n                                        color='DarkSlateGrey')),\n                  selector=dict(mode='markers'))\nfig.show()","bc9f4e6c":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline","923fc569":"clf=Pipeline([\n    (\"kcpa\",KernelPCA(n_components=2)),\n    (\"logistic_regression\",LogisticRegression())\n            ])\nparam_grid=[{\"kcpa__gamma\":[0.02,0.04,0.05,1,10],\n             \"kcpa__kernel\":[\"rbf\",\"sigmoid\",\"linear\",\"poly\"]\n            }]\ngrid_search=GridSearchCV(clf,param_grid,verbose=3)\nx=swissrolldata.drop('labels',axis=1)\ny=swissrolldata['labels']\ngrid_search.fit(x,y)\nprint(grid_search.best_params_)","8dfc31ff":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom xgboost import XGBClassifier\nimport time\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report","6631b74d":"knn=KNeighborsClassifier(n_neighbors=5)\nlg=LogisticRegression()\ndc=DecisionTreeClassifier()\nrnf=RandomForestClassifier(n_estimators=500)\nsv=SVC()\nada=AdaBoostClassifier(DecisionTreeClassifier(max_depth=1),n_estimators=500,\n                           algorithm=\"SAMME.R\",learning_rate=0.5)\ngbc=GradientBoostingClassifier()\nxg=XGBClassifier()","8a8f9e10":"\ndict_classifiers = {\n    \"Logistic Regression\": LogisticRegression(),\n    \"Nearest Neighbors\": KNeighborsClassifier(),\n    \"Linear SVM\": SVC(),\n    \"Gradient Boosting Classifier\": GradientBoostingClassifier(),\n    \"Decision Tree\": DecisionTreeClassifier(),\n    \"Random Forest\": RandomForestClassifier(n_estimators=500),\n    \"adaboost\":AdaBoostClassifier(DecisionTreeClassifier(max_depth=1),n_estimators=500,\n                           algorithm=\"SAMME.R\",learning_rate=0.5),\n    \"xgboost\":XGBClassifier(),\n    \"voting classifier\":VotingClassifier(estimators=[('lr',lg),\n                                        ('rf',rnf),('dt',dc),('kn',knn),\n                                        ('svm',sv),('adaboost',ada),\n                                        ('gbcb',gbc),('xgb',xg)],voting=\"hard\")\n}","0b3ba25d":"no=len(dict_classifiers.keys())\ndef classifiers(kernel,data,labels):\n    results = pd.DataFrame(data=np.zeros(shape=(no,4)),\n                columns =['classifier','train_score','validation score','training_time'])\n    count=0  \n    for key,classifier in dict_classifiers.items():\n        start = time.clock()\n        ker=KernelPCA(n_components=2,kernel=kernel)\n        x=ker.fit_transform(data)\n        y=labels\n        X_train,X_test,Y_train,Y_test=train_test_split(x,y,random_state=32)\n        classifier.fit(X_train, Y_train)\n        y_pred=classifier.predict(X_test)\n        acc=accuracy_score(y_pred,Y_test)\n        train_score =classifier.score(X_train, Y_train)\n        end = time.clock()\n        diff = end-start\n        results.loc[count,'classifier']=key\n        results.loc[count,'train_score']=train_score\n        results.loc[count,'validation score']=acc\n        results.loc[count,'training_time']=diff\n        count=count+1\n    return results","95acd1ac":"d=swissrolldata.drop('labels',axis=1)\nl=swissrolldata['labels']\nkernels=['linear','rbf','sigmoid','poly']\nfor i in kernels:\n    res=classifiers(i,d,l)\n    print(f\"kernel is {i}\")\n    print(res.sort_values(by='validation score',ascending=False))","285a39cc":"d=swissrolldata.drop('labels',axis=1)\nl=swissrolldata['labels']\nknn=KNeighborsClassifier(n_neighbors=5)\nker=KernelPCA(kernel=\"sigmoid\",gamma=10,n_components=2)\nx=ker.fit_transform(d)\ny=labels\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=32)\nknn.fit(x_train,y_train)\ny_pred=knn.predict(x_test)\nprint(accuracy_score(y_pred,y_test))\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","d731d02c":"\nimport seaborn as sns\nplt.figure(figsize=(10,6))\nsns.heatmap(confusion_matrix(y_test,y_pred),annot=True,yticklabels=False,fmt=\"d\")\nplt.title(\"Confusion matrix\")","eb4d3eeb":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom sklearn.preprocessing import OneHotEncoder","529cf6e7":"d=np.array(swissrolldata.drop('labels',axis=1))\nl=np.array(swissrolldata['labels'])\nencoding=OneHotEncoder()\ny=encoding.fit_transform(l.reshape(-1,1))\nker=KernelPCA(kernel=\"sigmoid\",gamma=10,n_components=2)\nx=ker.fit_transform(d)\ny=labels\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=32)","509fdbdf":"def modelcreating(optimizer=\"adam\",loss=\"sparse_categorical_crossentropy\"):\n    model=Sequential()\n    model.add(Dense(128,input_dim=2,activation=\"relu\"))\n    model.add(Dense(64,activation=\"relu\"))\n    model.add(Dense(32,activation=\"relu\"))\n    model.add(Dense(16,activation=\"relu\"))\n    model.add(Dense(6,activation=\"softmax\"))\n    model.compile(loss=loss,optimizer=optimizer,metrics=[\"accuracy\"])\n    return model\nmodel=modelcreating()","120df27c":"model.summary()","321c786e":"earlystopping=EarlyStopping(monitor=\"val_loss\",mode=\"min\",patience=100)","00dcb907":"# Nonlinear dimensionality reduction","43d70ea5":"# Polynomial Kernel","a0cbf0b6":"# Gaussian radial basis function (RBF) Kernel PCA","cd5c68fd":"# Sigmoid kernel","a6c6daa1":"# Linear Kernel","f6b5d830":"# Kernel functions and the kernel trick"}}