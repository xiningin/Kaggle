{"cell_type":{"5babcae4":"code","c626c720":"code","27bba660":"code","16218e09":"code","fbe7eefc":"code","674b76ad":"code","4d08fef8":"code","2907debe":"code","d5bdd78a":"code","20b31076":"code","58f9e647":"code","e95cf988":"code","fc5c6fc4":"code","7ef2ecb7":"code","fe2e5077":"code","3ed5f583":"code","6bb15ab7":"code","388146e7":"code","7379e382":"code","5107d6a2":"code","55256c3d":"code","873911f9":"code","fbafea51":"code","e07e6f38":"code","9b0efdfe":"code","b6993e2a":"code","d2295426":"code","599ea8df":"code","7f6c38eb":"code","d238277a":"code","875c313e":"code","e5ffd7ba":"code","3b9b25c4":"code","f0a7a7b7":"markdown","08859f1c":"markdown","b96816ec":"markdown","e7dfd06b":"markdown","3bc64411":"markdown","b3b862ea":"markdown","5d0d83e9":"markdown","b249d9df":"markdown","28d4b918":"markdown","72fa25a4":"markdown","dadc6994":"markdown","445021cf":"markdown","550ace4d":"markdown"},"source":{"5babcae4":"import numpy as np \nimport pandas as pd \nimport scipy\nfrom scipy.stats import pearsonr\nfrom scipy.stats import spearmanr\nfrom sklearn.model_selection import train_test_split \nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nfrom math import sqrt\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn import datasets\nfrom sklearn import svm\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import Ridge\nfrom yellowbrick.regressor import ResidualsPlot\n%matplotlib inline","c626c720":"np.random.seed(1)\nX1 = np.random.randint(500, 2000, 50)\nX1","27bba660":"np.random.seed(1)\nX2 = np.random.randint(100, 500, 50)\nX2","16218e09":"X3 = [i * 3 + np.random.randint(500) for i in X1]\nX3","fbe7eefc":"Y = [6 * X1[i] + X2[i] for i in range(0,50)]\nY","674b76ad":"data = {'X1':X1, 'X2':X2, 'X3': X3, 'Y': Y} \ndf = pd.DataFrame(data) \ndf","4d08fef8":"#using pandas\ncorr = df['X1'].corr(df['Y'])\ncorr","2907debe":"#Spearmans's 's correlation coefficient\ncorr, _ = spearmanr(X1, Y)\ncorr","d5bdd78a":"# Pearson's correlation coefficient\ncorr, _ = pearsonr(X1, Y)\ncorr","20b31076":"#using pandas\ncorr = df['X2'].corr(df['Y'])\ncorr","58f9e647":"#Spearmans's correlation coefficient\ncorr, _ = spearmanr(X2, Y)\ncorr\n","e95cf988":"#Spearmans's 's correlation coefficient\ncorr, _ = spearmanr(X2, Y)\ncorr","fc5c6fc4":"#using pandas\ncorr = df['X3'].corr(df['Y'])\ncorr","7ef2ecb7":"# Pearson's correlation coefficient\ncorr, _ = pearsonr(X3, Y)\ncorr","fe2e5077":"#Spearmans's 's correlation coefficient\ncorr, _ = spearmanr(X3, Y)\ncorr","3ed5f583":"plt.scatter(X1, Y, alpha=0.5)\nplt.title('Scatter plot illustrating the relationship between X1 and Y')\nplt.xlabel('X1')\nplt.ylabel('Y')\nplt.ylim(bottom=0)\nplt.xlim(left=0)\nplt.show()","6bb15ab7":"plt.scatter(X2, Y, alpha=0.5)\nplt.title('Scatter plot illustrating the relationship between X2 and Y')\nplt.xlabel('X2')\nplt.ylabel('Y')\nplt.ylim(bottom=0)\nplt.xlim(left=0)\nplt.show()","388146e7":"# Separate our data into independent(X) variables.\nX_data = df[['X1','X2']]\nX_data","7379e382":"# Separate our data into dependent(Y) variables.\nY_data = df['Y']\nY_data","5107d6a2":"# 70\/30 Train Test Split.\n# We will split the data using a 70\/30 split. i.e. 70% of the data will be randomly \n# chosen to train the model and 30% will be used to evaluate the model\nX_train, X_test, y_train, y_test = train_test_split(X_data, Y_data, test_size=0.30)","55256c3d":"# Create an instance of linear regression\nreg = linear_model.LinearRegression()","873911f9":"# Fitting the X_train onto y_train.\nreg.fit(X_train,y_train)","fbafea51":"print(\"Regression Coefficients\")\npd.DataFrame(reg.coef_,index=X_train.columns,columns=[\"Coefficient\"])","e07e6f38":"# Intercept\nreg.intercept_","9b0efdfe":"# Make predictions using the testing set\ntest_predicted = reg.predict(X_test)\ntest_predicted","b6993e2a":"# Explained variance score: 1 is perfect prediction\n# R squared\nprint('Variance score: %.2f' % r2_score(y_test, test_predicted))","d2295426":"reg.score(X_test,y_test)","599ea8df":"scores = cross_val_score(reg,X_data, Y_data, cv=5)\nscores     ","7f6c38eb":"#Residual Plot\nplt.scatter(reg.predict(X_train), reg.predict(X_train)-y_train,c='b',s=40,alpha=0.5)\nplt.scatter(reg.predict(X_test),reg.predict(X_test)-y_test,c='g',s=40)\nplt.hlines(y=0,xmin=np.min(reg.predict(X_test)),xmax=np.max(reg.predict(X_test)),color='red',linewidth=3)\nplt.title('Residual Plot using Training (blue) and test (green) data ')\nplt.ylabel('Residuals')","d238277a":"model = Ridge()\nvisualizer = ResidualsPlot(model)\n\nvisualizer = ResidualsPlot(model)\nvisualizer.fit(X_train, y_train)\nvisualizer.score(X_test, y_test)\n\nvisualizer.show()","875c313e":"x=342\ny=21\ndata = {'x':[x],'y':[y]}\ndf=pd.DataFrame(data)\nreg.predict(df)","e5ffd7ba":"#MAE\nmean_squared_error(y_test, test_predicted)","3b9b25c4":"# The mean squared error\nprint(\"Mean squared error: %.2f\" % mean_squared_error(y_test, test_predicted))\nprint(\"Mean Absolute error: %.2f\" % mean_absolute_error(y_test, test_predicted))\nprint(\"Root Mean squared error: %.2f\" % sqrt(mean_squared_error(y_test, test_predicted)))","f0a7a7b7":"Predicting the associated outcome","08859f1c":"#### The correlation between X2 and Y","b96816ec":"### Illustrating the relationship between X2 and Y","e7dfd06b":"### Creating the data set for X1\nValues in X1 are random numbers between 500-2000","3bc64411":"### Creation of the Dataframe using X1, X2, X3, and Y.","b3b862ea":"#### The correlation between X3 and Y","5d0d83e9":"### Creating the data set for Y\n**Formula:** *Y = (6 xX1) + X2*","b249d9df":"### Illustrating the relationship between X1 and Y","28d4b918":"### Creating the data set for X3\nValues in X3 is 3 times the values in X1 + a random vector; where The random vector is a random value between 0 and 500 for each data. ","72fa25a4":"### Regression Analysis","dadc6994":"#### The correlation between X1 and Y\n","445021cf":"### Find the Correlation.","550ace4d":"### Creating the data set for X2\nValues in X1 are random numbers between 100-500"}}