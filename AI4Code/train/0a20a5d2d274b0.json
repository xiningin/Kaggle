{"cell_type":{"7c044ee4":"code","e5406fe4":"code","7149caa5":"code","d367c554":"code","a424514b":"code","5d3841bc":"code","73092114":"code","dbf4dfd9":"code","4324dc9e":"code","daacd46f":"code","77c68dc3":"code","11164e52":"code","13f26cca":"code","fd08dde0":"code","4a8d96d4":"code","4f5156c6":"markdown","15766f8f":"markdown","fd5ef829":"markdown","9c6cf9cf":"markdown","416c99ea":"markdown","8998f00e":"markdown","3685a1af":"markdown","d635bfda":"markdown","9b3cafd9":"markdown","41ab35a6":"markdown","407097c0":"markdown","57105b27":"markdown","8536a688":"markdown","75ed6457":"markdown"},"source":{"7c044ee4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\nplt.style.use(\"seaborn-darkgrid\")\npd.set_option(\"display.max_columns\", None)\n\ntrain_df = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\")\nsub_df = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv\")\n\ntrain_df.head()","e5406fe4":"# Dropping columns - Id, Soil_Type7 and Soil_Type15\ncols = [\"Id\", \"Soil_Type7\", \"Soil_Type15\"]\n\ntrain_df.drop(cols, axis=1, inplace=True)\ntest_df.drop(cols, axis=1, inplace=True)\n\n# Dropping the row with Cover_Type=5\nidx = train_df[train_df[\"Cover_Type\"] == 5].index\ntrain_df.drop(idx, axis=0, inplace=True)","7149caa5":"new_names = {\n    \"Horizontal_Distance_To_Hydrology\": \"x_dist_hydrlgy\",\n    \"Vertical_Distance_To_Hydrology\": \"y_dist_hydrlgy\",\n    \"Horizontal_Distance_To_Roadways\": \"x_dist_rdwys\",\n    \"Horizontal_Distance_To_Fire_Points\": \"x_dist_firepts\"\n}\n\ntrain_df.rename(new_names, axis=1, inplace=True)\ntest_df.rename(new_names, axis=1, inplace=True)","d367c554":"from sklearn.preprocessing import LabelEncoder\n\n\nencoder = LabelEncoder()\ntrain_df[\"Cover_Type\"] = encoder.fit_transform(train_df[\"Cover_Type\"])","a424514b":"def fix_ranges(df):\n    df.loc[df[\"Aspect\"] < 0, \"Aspect\"] += 360\n    df.loc[df[\"Aspect\"] > 359, \"Aspect\"] -= 360\n\n    df.loc[df[\"Hillshade_9am\"] < 0, \"Hillshade_9am\"] = 0\n    df.loc[df[\"Hillshade_Noon\"] < 0, \"Hillshade_Noon\"] = 0\n    df.loc[df[\"Hillshade_3pm\"] < 0, \"Hillshade_3pm\"] = 0\n\n    df.loc[df[\"Hillshade_9am\"] > 255, \"Hillshade_9am\"] = 255\n    df.loc[df[\"Hillshade_Noon\"] > 255, \"Hillshade_Noon\"] = 255\n    df.loc[df[\"Hillshade_3pm\"] > 255, \"Hillshade_3pm\"] = 255\n\n    return df\n\n\ntrain_df = fix_ranges(train_df)\ntest_df = fix_ranges(test_df)","5d3841bc":"def dist_feats(df):\n    df[\"mnhttn_dist_hydrlgy\"] = np.abs(df[\"x_dist_hydrlgy\"]) + np.abs(df[\"y_dist_hydrlgy\"])\n    df[\"ecldn_dist_hydrlgy\"] = (df[\"x_dist_hydrlgy\"]**2 + df[\"y_dist_hydrlgy\"]**2)**0.5\n\n    return df\n\n\ntrain_df = dist_feats(train_df)\ntest_df = dist_feats(test_df)","73092114":"soil_features = [x for x in train_df.columns if x.startswith(\"Soil_Type\")]\nwilderness_features = [x for x in train_df.columns if x.startswith(\"Wilderness_Area\")]\n\ndef sum_feats(df):\n    df[\"soil_type_count\"] = df[soil_features].sum(axis=1)\n    df[\"wilderness_area_count\"] = df[wilderness_features].sum(axis=1)\n\n    return df\n\n\ntrain_df = sum_feats(train_df)\ntest_df = sum_feats(test_df)","dbf4dfd9":"def r(x):\n    if (x + 180) > 360:\n        return x - 180\n    else:\n        return x + 180\n\ndef extra_feats(df):\n    df['Aspect2'] = df[\"Aspect\"].map(r)\n\n    df[\"EHiElv\"] = df[\"x_dist_rdwys\"] * df[\"Elevation\"]\n    df['EViElv'] = df['y_dist_hydrlgy'] * df['Elevation']\n\n    df['Highwater'] = (df[\"y_dist_hydrlgy\"] < 0).astype(int)\n    df['EVDtH'] = df[\"Elevation\"] - df[\"y_dist_hydrlgy\"]\n\n    df['Hydro_Fire_1'] = df[\"x_dist_hydrlgy\"] + df[\"x_dist_firepts\"]\n    df['Hydro_Fire_2'] = abs(df[\"x_dist_hydrlgy\"] - df[\"x_dist_firepts\"])\n\n    df['Hydro_Road_1'] = abs(df[\"x_dist_hydrlgy\"] + df[\"x_dist_rdwys\"])\n    df['Hydro_Road_2'] = abs(df[\"x_dist_hydrlgy\"] - df[\"x_dist_rdwys\"])\n\n    df['Fire_Road_1'] = abs(df[\"x_dist_firepts\"] + df[\"x_dist_rdwys\"])\n    df['Fire_Road_2'] = abs(df[\"x_dist_firepts\"] - df[\"x_dist_rdwys\"])\n\n    df['Hillshade_3pm_is_zero'] = (df[\"Hillshade_3pm\"] == 0).astype(int)\n\n    return df\n\n\ntrain_df = extra_feats(train_df)\ntest_df = extra_feats(test_df)","4324dc9e":"from sklearn.preprocessing import RobustScaler\n\n\nnumerical_cols = [col for col in test_df.columns if test_df[col].nunique() > 2]\ncategorical_cols = list(set(test_df.columns) - set(numerical_cols))\n\nscaler = RobustScaler()\ntrain_df[numerical_cols] = scaler.fit_transform(train_df[numerical_cols])\ntest_df[numerical_cols] = scaler.transform(test_df[numerical_cols])","daacd46f":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2\n\n    for col in df.columns:\n        col_type = df[col].dtypes\n\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n\n    if verbose:\n        print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n \n    return df\n\n\ntrain_df = reduce_mem_usage(train_df)\ntest_df = reduce_mem_usage(test_df)","77c68dc3":"best_params = {\n    \"n_estimators\": 1700,\n    \"max_depth\": 12,\n    \"learning_rate\": 0.01146513635635539,\n    \"gamma\": 0.2594531967123816,\n    \"min_child_weight\": 3.4942992853505186,\n    \"subsample\": 0.6257232748066737,\n    \"colsample_bytree\": 0.626827539397344,\n    \"reg_alpha\": 6,\n    \"reg_lambda\": 87\n}","11164e52":"from xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import StratifiedKFold\n\n\nX = train_df.drop(\"Cover_Type\", axis=1)\ny = train_df[[\"Cover_Type\"]]\n\ndel train_df\n\nfeat_imp = pd.Series(0, index=test_df.columns)\ntest_preds = np.zeros((1, 1))\nscores = []\n\nFOLDS = 10\ncv = StratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=42)\n\nfor fold, (train_idx, val_idx) in enumerate(cv.split(X, y)):\n    X_train, X_val = X.iloc[train_idx, :], X.iloc[val_idx, :]\n    y_train, y_val = y.iloc[train_idx, :], y.iloc[val_idx, :]\n\n    clf = XGBClassifier(**best_params, tree_method=\"gpu_hist\", use_label_encoder=False)\n    clf.fit(\n        X_train,\n        y_train,\n        eval_set=[(X_val, y_val)],\n        verbose=False,\n        eval_metric=\"mlogloss\"\n    )\n\n    y_pred = clf.predict(X_val)\n    score = accuracy_score(y_val, y_pred)\n    scores.append(score)\n\n    feat_imp = feat_imp + pd.Series(clf.get_booster().get_score(importance_type=\"gain\"))\n    test_preds = test_preds + clf.predict_proba(test_df)\n\n    print(f\"Fold {fold} Accuracy: {score}\")\n\nprint()\nprint(f\"Mean Accuracy: {np.mean(scores)}\")","13f26cca":"feat_imp = feat_imp\/FOLDS\nfeat_imp.nsmallest(len(feat_imp)).plot(kind=\"barh\", figsize=(20, 20))","fd08dde0":"test_preds = np.argmax(test_preds\/FOLDS, axis=1)\ntest_preds = encoder.inverse_transform(test_preds)\n\nsub_df['Cover_Type'] = test_preds\nsub_df.head()","4a8d96d4":"sub_df.to_csv(\"submission.csv\", index=False)","4f5156c6":"# Part 2: Feature Engineering","15766f8f":"# Part 3: XGBoost Modelling","fd5ef829":"Scaling continuous features with RobustScaler.","9c6cf9cf":"Some new features taken from this discussions post: [Feature engineering update thread](https:\/\/www.kaggle.com\/c\/tabular-playground-series-dec-2021\/discussion\/293612).","416c99ea":"Encoding labels.","8998f00e":"Using soft voting strategy to ensemble test predictions.","3685a1af":"Creating distance based features from **Horizontal_Distance_To_Hydrology** and **Vertical_Distance_To_Hydrology**.","d635bfda":"# Part 1: Reading data and preprocessing","9b3cafd9":"Feature Importances.","41ab35a6":"Renaming some columns.","407097c0":"Dropping columns - **Id**, **Soil_Type7**, **Soil_Type15**. Also dropping the row for which **Cover_Type=5**.","57105b27":"Fixing ranges of **Aspect** and **Hillshade_*** features.","8536a688":"Reducing the size of train and test dataframes","75ed6457":"Creating features - [Sum of Soil_Types and Wilderness_Area](https:\/\/www.kaggle.com\/c\/tabular-playground-series-dec-2021\/discussion\/292823) - taken from discussions."}}