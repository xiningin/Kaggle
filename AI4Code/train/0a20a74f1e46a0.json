{"cell_type":{"8dc0ca1a":"code","634fbb79":"code","aca4e6c7":"code","2e2c196e":"code","70bdd290":"code","b6e14fd0":"code","07cb702b":"code","98ce529b":"code","34023faa":"code","1cff5292":"code","7fe65921":"code","05875aab":"code","94b8648d":"markdown","b28201cf":"markdown","41230c4d":"markdown","ccf995c2":"markdown","878b9108":"markdown","59bc106d":"markdown","e0477fe3":"markdown","04d9f7b9":"markdown","a71084f8":"markdown","f4c57dd3":"markdown","c83ef7c4":"markdown","5aa53bde":"markdown","89949db0":"markdown"},"source":{"8dc0ca1a":"import numpy\nimport pandas\nimport matplotlib.pyplot as plt\n\nfrom keras.utils import to_categorical\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import EarlyStopping","634fbb79":"train_data = pandas.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest_data = pandas.read_csv('..\/input\/digit-recognizer\/test.csv')","aca4e6c7":"train_y = to_categorical(train_data[\"label\"])\ntrain_x = train_data.loc[:, train_data.columns != \"label\"]\ntrain_x \/= 256","2e2c196e":"train_x = train_x.values.reshape(-1, 28, 28, 1)","70bdd290":"callback = EarlyStopping(monitor='loss', patience=8, restore_best_weights=True)","b6e14fd0":"model = Sequential()\nmodel.add(Conv2D(64, (3,3), activation='relu', input_shape=(28,28, 1)))\nmodel.add(MaxPooling2D((2,2)))\nmodel.add(Conv2D(64, (3,3), activation='relu'))\nmodel.add(MaxPooling2D((2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(10, activation='sigmoid'))","07cb702b":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","98ce529b":"model.summary()","34023faa":"datagen = ImageDataGenerator(\n    rotation_range=10,\n    zoom_range=0.1,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ndatagen.fit(train_x)","1cff5292":"history = model.fit(datagen.flow(train_x, train_y, batch_size=32), epochs=80, callbacks=[callback])","7fe65921":"test_data \/= 256\ntest_x = test_data.values.reshape(-1, 28, 28, 1)\ny_pred = model.predict(test_x)\ny_pred = numpy.argmax(y_pred, axis=1)\ny_pred = pandas.Series(y_pred,name='Label')\nsubmission = pandas.concat([pandas.Series(range(1, 28001), name='ImageId'), y_pred], axis=1)","05875aab":"submission.to_csv('my_submission.csv', index=False)","94b8648d":"# **Train the model**","b28201cf":"# **Create the model**","41230c4d":"# **Compile**","ccf995c2":"# **Read the csv files**","878b9108":"I had plit into validatio set to see training going correctly. Removed afterwards","59bc106d":"# **Avoid Overfitting**","e0477fe3":"# **CNN Model to predict digits**","04d9f7b9":"# **Import the packages**","a71084f8":"I have seen models in the notebook section that are overkill for the problem at hand. Like Inception to predict a measly digit of 28 by 28. Listed below is my model with less no of layers.","f4c57dd3":"# **Split into labels and data**","c83ef7c4":"# **Add EarlyStopping**","5aa53bde":"# **Create submission**","89949db0":"# **Reshape**"}}