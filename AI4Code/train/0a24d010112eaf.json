{"cell_type":{"b21ce2c8":"code","f396696f":"code","265d8c4d":"code","a2d565f7":"code","b53cbc25":"code","30d0e12c":"code","63c8b26d":"code","6f786c32":"code","73035c11":"code","f07e8e54":"code","becc5dea":"code","f673330f":"code","013a9051":"code","b9cb46f9":"code","bd4d5eec":"code","6d378321":"code","97e532d8":"code","f88a358c":"code","dd4f39ea":"code","3597a07b":"code","7b5e908c":"code","c43e74b5":"code","147ef7d1":"code","13c60d1c":"code","a5a6fd71":"code","40dfd4d2":"code","6b44fb4a":"code","24def9cb":"code","5af008e7":"code","ebc24797":"code","887a35e7":"code","8d7ca29a":"code","0e225747":"code","4f83f849":"code","4b0c2e82":"code","734ff7e2":"code","1ebc4f94":"code","21b770d4":"code","86a9f239":"code","aee98b46":"code","17dc4f78":"code","9a2c0742":"code","9a8d1f5c":"code","bbdadb9a":"code","194b642b":"code","584c4045":"code","7eb2fbf8":"markdown","c0d86086":"markdown","6a8a32ed":"markdown","90b8930f":"markdown","6ef9adb2":"markdown","b21ed04c":"markdown","dc2af94d":"markdown","fced0ce7":"markdown","60897482":"markdown","295a446f":"markdown","3f80241b":"markdown","ab588173":"markdown","dc662e9d":"markdown","5952a99a":"markdown","20ffecc9":"markdown","061fe40e":"markdown","751c7c8f":"markdown","e813a28d":"markdown","5197eca1":"markdown","6038950a":"markdown","15c1d162":"markdown","574874e6":"markdown","7cef5d63":"markdown","62d24d76":"markdown","a8a0b817":"markdown"},"source":{"b21ce2c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport keras\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f396696f":"pd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)","265d8c4d":"df = pd.read_csv('\/kaggle\/input\/compressive-strength-of-concrete\/compresive_strength_concrete.csv')","a2d565f7":"df.head()","b53cbc25":"df.info()","30d0e12c":"df.shape","63c8b26d":"df.isnull().sum() # no missing values","6f786c32":"for i in range(len(df.columns)):\n    print(df.iloc[:, i].value_counts())\n    print('#'*25)","73035c11":"df.columns","f07e8e54":"missing_cols = ['Superplasticizer (component 5)(kg in a m^3 mixture)', 'Fly Ash (component 3)(kg in a m^3 mixture)', 'Blast Furnace Slag (component 2)(kg in a m^3 mixture)']\n\nfor col in missing_cols:\n    df.loc[:, col] = df.loc[:, col].replace(0.0, df.loc[:, col].mean())","becc5dea":"for i in range(len(df.columns)):\n    print(df.iloc[:, i].value_counts())\n    print('#'*25)","f673330f":"fig = plt.figure(figsize=(20,25))\n\nsns.set_style('whitegrid')\n\nfor i in range(len(df.columns) - 1): # - 1 because I dont want to plot Concrete compressive strength\n    fig.add_subplot(3, 3, i+1)\n    sns.distplot(df.iloc[:, i].dropna(), rug=True, kde_kws = {'bw':0.1}, color = 'b', kde=False)\n    plt.xlabel(df.columns[i])\n\nplt.tight_layout()","013a9051":"fig = plt.figure(figsize = (20,25))\n\nsns.set(style = 'darkgrid')\n\nfor i in range(len(df.columns)-1):\n    fig.add_subplot(3, 3, i+1)\n    sns.boxplot(y = df.iloc[:,i].dropna())\nplt.tight_layout()","b9cb46f9":"fig = plt.figure(figsize = (20,25))\n\nsns.set(style = 'whitegrid')\n\nfor i in range(len(df.columns)-1):\n    fig.add_subplot(3, 3, i+1)\n    sns.scatterplot(df.iloc[:,i].dropna(), df.loc[:, 'Concrete compressive strength(MPa, megapascals) '])\nplt.tight_layout()\nplt.show()\n","bd4d5eec":"fig = plt.figure(figsize = (20,30))\n\nfor i in range(len(df.columns)-1):\n    fig.add_subplot(3, 3, i+1)\n    sns.regplot(df.iloc[:,i], df.loc[:, 'Concrete compressive strength(MPa, megapascals) '])\nplt.tight_layout()","6d378321":"# shuffling data\ndf = df.sample(frac=1).reset_index(drop=True)\n\n# total data = 1030\n\ndata = df.drop('Concrete compressive strength(MPa, megapascals) ', 1)\ntargets = df.loc[:, 'Concrete compressive strength(MPa, megapascals) ']","97e532d8":"data.shape","f88a358c":"targets.shape","dd4f39ea":"train_data = data.iloc[0:515]\ntrain_targets = targets.iloc[0:515]\n\nval_data = data.iloc[515:721]\nval_targets = targets.iloc[515:721]\n\ntest_data = data.iloc[721:]\ntest_targets =targets.iloc[721:]","3597a07b":"print(train_data.shape)\nprint(train_targets.shape)\nprint('#'*25)\nprint(val_data.shape)\nprint(val_targets.shape)\nprint('#'*25)\nprint(test_data.shape)\nprint(test_targets.shape)","7b5e908c":"mean = train_data.mean()\nstd = train_data.std()\n\ntrain_data -= mean\ntrain_data \/= std\n\nval_data -= mean\nval_data \/= std\n\ntest_data -= mean\ntest_data \/= std","c43e74b5":"train_data.head(2) # TODO : PLOT TO SEE IF DISTRIBUTIONS ARE NOW NORMAL\/ GAUSSIAN OR NOT ?!?!?!?!","147ef7d1":"from keras import models\nfrom keras import layers\n\ndef build_model():\n    \n    model = models.Sequential()\n    \n    model.add(layers.Dense(10, activation='relu', input_shape=(train_data.shape[1],)))\n    \n    model.add(layers.Dense(8, activation='relu'))\n        \n    model.add(layers.Dense(6, activation='relu'))\n    \n    model.add(layers.Dense(1))\n    \n    model.compile(optimizer='Adam', loss='mse', metrics=['mae'])\n    \n    \n    return model\n    ","13c60d1c":"model = build_model()\n\nhistory = model.fit(train_data, train_targets, validation_data = (val_data, val_targets), epochs=100, verbose=1)","a5a6fd71":"plt.figure(figsize=(20,15))\n\nmae = history.history['mae']\nval_mae = history.history['val_mae']\nepochs = range(1, len(mae) + 1)\n\nplt.plot(epochs, mae, 'b--', label='Training mae', linewidth=12)\nplt.plot(epochs, val_mae, 'r', label='Validation mae', linewidth=5)\n\nplt.xlabel('Epochs')\nplt.ylabel('MAE')\nplt.title('Mean Absolute Error')\nplt.legend()\nplt.show()","40dfd4d2":"from keras import layers, models, regularizers\n\ndef build_model():\n    \n    model = models.Sequential()\n    \n    model.add(layers.Dense(10, activation='relu', input_shape=(train_data.shape[1],), kernel_regularizer=regularizers.L2(0.001)))\n    \n    model.add(layers.Dense(8, activation='relu', kernel_regularizer=regularizers.L2(0.001)))\n        \n    model.add(layers.Dense(6, activation='relu', kernel_regularizer=regularizers.L2(0.001)))\n    \n    model.add(layers.Dense(1))\n    \n    model.compile(optimizer='Adam', loss='mse', metrics=['mae'])\n    \n    \n    return model","6b44fb4a":"model_1 = build_model()\n\nhistory_1 = model_1.fit(train_data, train_targets, validation_data = (val_data, val_targets), epochs=100, verbose=1)","24def9cb":"plt.figure(figsize=(20,15))\n\nmae = history_1.history['mae']\nval_mae = history_1.history['val_mae']\nepochs = range(1, len(mae) + 1)\n\nplt.plot(epochs, mae, 'b--', label='Training mae', linewidth=12)\nplt.plot(epochs, val_mae, 'r', label='Validation mae', linewidth=5)\n\nplt.xlabel('Epochs')\nplt.ylabel('MAE')\nplt.title('Mean Absolute Error')\nplt.legend()\nplt.show()","5af008e7":"from keras import layers, models, regularizers\n\ndef build_model():\n    \n    model = models.Sequential()\n    \n    model.add(layers.Dense(10, activation='relu', input_shape=(train_data.shape[1],), kernel_regularizer=regularizers.L2(0.001)))\n    \n    model.add(layers.Dense(8, activation='relu', kernel_regularizer=regularizers.L2(0.001)))\n        \n    model.add(layers.Dense(6, activation='relu', kernel_regularizer=regularizers.L2(0.001)))\n    \n    model.add(layers.Dense(1))\n    \n    model.compile(optimizer='Adam', loss='mse', metrics=['mae'])\n    \n    \n    return model","ebc24797":"model_2 = build_model()\n\nhistory_2 = model_2.fit(train_data, train_targets, validation_data = (val_data, val_targets), epochs=500, verbose=1)","887a35e7":"plt.figure(figsize=(20,15))\n\nmae = history_2.history['mae']\nval_mae = history_2.history['val_mae']\nepochs = range(1, len(mae) + 1)\n\nplt.plot(epochs, mae, 'b--', label='Training mae', linewidth=12)\nplt.plot(epochs, val_mae, 'r', label='Validation mae', linewidth=5)\n\nplt.xlabel('Epochs')\nplt.ylabel('MAE')\nplt.title('Mean Absolute Error')\nplt.legend()\nplt.show()","8d7ca29a":"from keras import layers, models, regularizers\n\ndef build_model():\n    \n    model = models.Sequential()\n    \n    model.add(layers.Dense(10, activation='relu', input_shape=(train_data.shape[1],), ))\n    \n    model.add(layers.Dropout(0.3))\n    \n    model.add(layers.Dense(8, activation='relu', ))\n        \n    model.add(layers.Dropout(0.3))  \n        \n    model.add(layers.Dense(6, activation='relu', ))\n    \n    model.add(layers.Dropout(0.3))\n    \n    model.add(layers.Dense(1))\n    \n    model.compile(optimizer='Adam', loss='mse', metrics=['mae'])\n    \n    \n    return model","0e225747":"model_3 = build_model()\n\nhistory_3 = model_3.fit(train_data, train_targets, validation_data = (val_data, val_targets), epochs=100, verbose=1)","4f83f849":"plt.figure(figsize=(20,15))\n\nmae = history_3.history['mae']\nval_mae = history_3.history['val_mae']\nepochs = range(1, len(mae) + 1)\n\nplt.plot(epochs, mae, 'b--', label='Training mae', linewidth=12)\nplt.plot(epochs, val_mae, 'r', label='Validation mae', linewidth=5)\n\nplt.xlabel('Epochs')\nplt.ylabel('MAE')\nplt.title('Mean Absolute Error')\nplt.legend()\nplt.show()","4b0c2e82":"from keras import layers, models, regularizers\n\ndef build_model():\n    \n    model = models.Sequential()\n    \n    model.add(layers.Dense(16, activation='relu', input_shape=(train_data.shape[1],), ))\n    \n   \n    \n    model.add(layers.Dense(8, activation='relu', ))\n        \n \n        \n    model.add(layers.Dense(3, activation='relu', ))\n    \n   \n    \n    model.add(layers.Dense(1))\n    \n    model.compile(optimizer='Adam', loss='mse', metrics=['mae'])\n    \n    \n    return model","734ff7e2":"model_4 = build_model()\n\nhistory_4 = model_4.fit(train_data, train_targets, validation_data = (val_data, val_targets), epochs=100, verbose=1)","1ebc4f94":"plt.figure(figsize=(20,15))\n\nmae = history_4.history['mae']\nval_mae = history_4.history['val_mae']\nepochs = range(1, len(mae) + 1)\n\nplt.plot(epochs, mae, 'b--', label='Training mae', linewidth=12)\nplt.plot(epochs, val_mae, 'r', label='Validation mae', linewidth=5)\n\nplt.xlabel('Epochs')\nplt.ylabel('MAE')\nplt.title('Mean Absolute Error')\nplt.legend()\nplt.show()","21b770d4":"predictions = model_2.predict(test_data)","86a9f239":"predictions.shape","aee98b46":"predictions = predictions.reshape(309)","17dc4f78":"output = pd.DataFrame({'Actual': test_targets})","9a2c0742":"output['Predicted'] = predictions","9a8d1f5c":"output.reset_index(inplace=True)","bbdadb9a":"output['Absolute Error'] = np.abs(output['Predicted'] - output['Actual'])","194b642b":"output","584c4045":"output.loc[:, 'Absolute Error'].describe()","7eb2fbf8":"# Checking Missing Values","c0d86086":"# Adding Dropout\n","6a8a32ed":"# Training the model","90b8930f":"- After around 80 epochs, overfitting starts ","6ef9adb2":"# Bivariate Analysis\n\n- Bivariate Analaysis (Plot of each feature with prediction target) will give a better understanding of how each feature is related to the target (Concrete Compressive Strength)","b21ed04c":"# Standardizing input variables","dc2af94d":"###  Description:\n| Features Name | Data Type | Measurement | Description |\n| -- | -- | -- | -- |\nCement (component 1) | quantitative | kg in a m3 mixture | Input Variable\nBlast Furnace Slag (component 2) | quantitative | kg in a m3 mixture | Input Variable\nFly Ash (component 3) | quantitative | kg in a m3 mixture | Input Variable\nWater (component 4) | quantitative | kg in a m3 mixture | Input Variable\nSuperplasticizer (component 5) | quantitative | kg in a m3 mixture | Input Variable\nCoarse Aggregate (component 6) | quantitative | kg in a m3 mixture | Input Variable\nFine Aggregate (component 7) | quantitative | kg in a m3 mixture | Input Variable\nAge | quantitative | Day (1~365) | Input Variable\nConcrete compressive strength | quantitative | MPa | Output Variable\n\n### WORKFLOW :\n- Load Data\n- Check Missing Values ( If Exist ; Fill each record with mean of its feature )\n- Standardized the Input Variables. **Hint**: Centeralized the data\n- Split into 50% Training(Samples,Labels) , 30% Test(Samples,Labels) and 20% Validation Data(Samples,Labels).\n- Model : input Layer (No. of features ), 3 hidden layers including 10,8,6 unit & Output Layer with activation function relu\/tanh (check by experiment).\n- Compilation Step (Note : Its a Regression problem , select loss , metrics according to it)\n- Train the Model with Epochs (100) and validate it\n- If the model gets overfit tune your model by changing the units , No. of layers , activation function , epochs , add dropout layer or add Regularizer according to the need .\n- Evaluation Step\n- Prediction\n","fced0ce7":"# Changing Layer Architecture","60897482":"- Superplasticizer\n- Fly Ash\n- Blast Furnace\n\nThese 3 columns have zeros, which should be replaced by mean","295a446f":"- 1030 records\n- 8 features\n- 1 output","3f80241b":"- There are no missing values \n- There are no categorical variables","ab588173":"### mean, max error values\n\n-> mean error 5.6\n-> median error 4.5\n-> min error 0.02\n-> max error 26.3","dc662e9d":"# Learning Curves","5952a99a":"# Compressive Strength Concrete Problem\n\n\n### Abstract: \n\nConcrete is the most important material in civil engineering. The concrete compressive strength (concrete strength to bear the load) is a highly nonlinear function of age and ingredients.  <br><br>\n\n<table border=\"1\"  cellpadding=\"6\" bordercolor=\"red\">\n\t<tbody>\n        <tr>\n\t\t<td bgcolor=\"#DDEEFF\"><p class=\"normal\"><b>Data Set Characteristics:&nbsp;&nbsp;<\/b><\/p><\/td>\n\t\t<td><p class=\"normal\">Multivariate<\/p><\/td>\n\t\t<td bgcolor=\"#DDEEFF\"><p class=\"normal\"><b>Number of Instances:<\/b><\/p><\/td>\n\t\t<td><p class=\"normal\">1030<\/p><\/td>\n\t\t<td bgcolor=\"#DDEEFF\"><p class=\"normal\"><b>Area:<\/b><\/p><\/td>\n\t\t<td><p class=\"normal\">Physical<\/p><\/td>\n        <\/tr>\n     <\/tbody>\n    <\/table>\n<table border=\"1\" cellpadding=\"6\">\n    <tbody>\n        <tr>\n            <td bgcolor=\"#DDEEFF\"><p class=\"normal\"><b>Attribute Characteristics:<\/b><\/p><\/td>\n            <td><p class=\"normal\">Real<\/p><\/td>\n            <td bgcolor=\"#DDEEFF\"><p class=\"normal\"><b>Number of Attributes:<\/b><\/p><\/td>\n            <td><p class=\"normal\">9<\/p><\/td>\n            <td bgcolor=\"#DDEEFF\"><p class=\"normal\"><b>Date Donated<\/b><\/p><\/td>\n            <td><p class=\"normal\">2007-08-03<\/p><\/td>\n        <\/tr>\n     <\/tbody>\n    <\/table>\n<table border=\"1\" cellpadding=\"6\">\t\n    <tbody>\n    <tr>\n\t\t<td bgcolor=\"#DDEEFF\"><p class=\"normal\"><b>Associated Tasks:<\/b><\/p><\/td>\n\t\t<td><p class=\"normal\">Regression<\/p><\/td>\n\t\t<td bgcolor=\"#DDEEFF\"><p class=\"normal\"><b>Missing Values?<\/b><\/p><\/td>\n\t\t<td><p class=\"normal\">N\/A<\/p><\/td>\n\t\t<td bgcolor=\"#DDEEFF\"><p class=\"normal\"><b>Number of Web Hits:<\/b><\/p><\/td>\n\t\t<td><p class=\"normal\">231464<\/p><\/td>\n\t<\/tr>\n    <\/tbody>\n    <\/table>","20ffecc9":"# Adding Regularizer","061fe40e":"# Load Data\n[Click Here to Download DataSet](https:\/\/github.com\/ramsha275\/ML_Datasets\/blob\/main\/compresive_strength_concrete.csv)","751c7c8f":"# Prediction\n\n## Im choosing model_2 (500 epochs, regularizer) for predictions","e813a28d":"# Building and Compiling model","5197eca1":"# Taking one final look on outliers - Regression Plots","6038950a":"# Univariate Distribution Plots\n\n- These plots will give an idea about\n1. Skewness of data\n2. Outliers","15c1d162":"- It is not mentioned in the assignment to take care of outliers, so I will leave them here for now","574874e6":"- There are some outliers in Age\n- Few outliers are in Superplasticizer, Water","7cef5d63":"# Increasing Epochs (with Regularizer)","62d24d76":"# Splitting Data\n\n- Split into 50% Training(Samples,Labels) , 30% Test(Samples,Labels) and 20% Validation Data(Samples,Labels)","a8a0b817":"- Box plots will give more information about outliers"}}