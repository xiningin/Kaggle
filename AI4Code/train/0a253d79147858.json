{"cell_type":{"880cc444":"code","aef039ca":"code","bf9d59fa":"code","9154415b":"code","5f2a40bf":"code","d077c2ff":"code","32199a09":"code","f4602680":"code","9bb7d7a8":"markdown","e75c2ee4":"markdown"},"source":{"880cc444":"import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport PIL\nimport tensorflow as tf\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential","aef039ca":"train_dir = os.path.dirname('..\/input\/intel-image-classification\/seg_train\/seg_train\/')\ntest_dir = os.path.dirname('..\/input\/intel-image-classification\/seg_test\/seg_test\/')\npred_dir = os.path.dirname('..\/input\/intel-image-classification\/seg_pred\/seg_pred')","bf9d59fa":"train_ds = keras.preprocessing.image_dataset_from_directory(\n    train_dir,\n    batch_size = 32,\n    seed = 123,\n    image_size = (160, 160)\n)\n\ntest_ds = keras.preprocessing.image_dataset_from_directory(\n    test_dir,\n    batch_size = 32,\n    seed = 123,\n    image_size = (160, 160)\n)\n\npred_ds = keras.preprocessing.image_dataset_from_directory(\n    pred_dir,\n    batch_size = 32,\n    seed = 123,\n    image_size = (160, 160)\n)","9154415b":"class_names = train_ds.class_names\nprint(class_names)","5f2a40bf":"plt.figure(figsize=(10, 10))\nfor images, labels in train_ds.take(1):\n    for i in range(9):\n        ax = plt.subplot(3, 3, i + 1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(class_names[labels[i]])\n        plt.axis(\"off\")","d077c2ff":"import tensorflow as tf\nfrom tensorflow.keras import layers, models\nimport tensorflow.keras.optimizers as Optimizer\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(200,kernel_size=(3,3),activation='relu',input_shape=(160,160,3)))\nmodel.add(layers.Conv2D(180,kernel_size=(3,3),activation='relu'))\nmodel.add(layers.Conv2D(180,kernel_size=(3,3),activation='relu'))\nmodel.add(layers.Conv2D(140,kernel_size=(3,3),activation='relu'))\nmodel.add(layers.MaxPool2D(5,5))\nmodel.add(layers.Conv2D(100,kernel_size=(3,3),activation='relu'))\nmodel.add(layers.Conv2D(50,kernel_size=(3,3),activation='relu'))\nmodel.add(layers.MaxPool2D(5,5))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(180,activation='relu'))\nmodel.add(layers.Dense(100,activation='relu'))\nmodel.add(layers.Dense(50,activation='relu'))\nmodel.add(layers.Dropout(rate=0.5))\nmodel.add(layers.Dense(6,activation='softmax'))\n\nmodel.compile(optimizer=Optimizer.Adam(lr=0.0001),loss='sparse_categorical_crossentropy',metrics=['accuracy'])\n\nmodel.summary()","32199a09":"Classifier = model.fit(train_ds, validation_data = test_ds, epochs = 20)","f4602680":"plt.plot(Classifier.history['accuracy'])\nplt.plot(Classifier.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(Classifier.history['loss'])\nplt.plot(Classifier.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","9bb7d7a8":"# Model","e75c2ee4":"# Image Visualization"}}