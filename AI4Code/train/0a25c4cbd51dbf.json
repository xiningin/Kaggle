{"cell_type":{"abb68582":"code","15787b08":"code","69663149":"code","075091a2":"code","57142f2c":"code","e2c5677a":"code","bbbb524b":"code","f5f3f7e4":"code","49b9f0ff":"code","ded3a8f9":"code","ff39b24a":"code","7f6c877b":"code","d7d9e9fe":"code","43b62aa6":"code","ad9a9bd9":"code","ef45f1ee":"code","bd456d55":"markdown","22104712":"markdown","8aa33740":"markdown","d091fae5":"markdown"},"source":{"abb68582":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","15787b08":"import matplotlib.pyplot as plt\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk import FreqDist\nfrom nltk.corpus import stopwords\nimport seaborn as sns\nimport re\nfrom nltk.stem import SnowballStemmer,WordNetLemmatizer\nstemmer=SnowballStemmer('english')\nlemma=WordNetLemmatizer()","69663149":"train_data = pd.read_csv('..\/input\/train.csv')","075091a2":"print(\"Size of training data:\",train_data.size)\nprint(\"Columns in the traing data\",train_data.columns)","57142f2c":"print(\"question_text ->\",train_data.iloc[1]['question_text'],\"Target:->\",train_data.iloc[1]['target'])","e2c5677a":"target_count = train_data[['qid','target']].groupby(['target']).agg('count').reset_index()\ntarget_count.columns = [\"target\",\"Count\"]","bbbb524b":"labels = ['Sincere Questions','Insincere Questions']  \nfig1, ax1 = plt.subplots()\ncolors = ['#66b3ff','#ff9999']\nax1.pie(target_count[\"Count\"],labels=labels,colors=colors, autopct='%1.1f%%',shadow=True, startangle=90)\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal')  \nplt.tight_layout()\nplt.show()\nprint(\"total sincere questions\",target_count.iloc[0][\"Count\"])\nprint(\"total insincere questions\",target_count.iloc[1][\"Count\"])","f5f3f7e4":"insincere_question_df = train_data[['question_text']][train_data['target'] == 1]\nsincere_question_df = train_data[['question_text']][train_data['target'] == 0]","49b9f0ff":"insincere_question_df.size","ded3a8f9":"def text_clean(review_col):\n    stops = set(stopwords.words(\"english\"))\n    stops.update(['would','many','u','much','more'])\n    text_corpus=[]\n    for i in range(0,len(review_col)):\n        review=str(review_col[i])\n        review=re.sub('[^a-zA-Z]',' ',review)\n        word_token = word_tokenize(str(review).lower())\n        #review = [word for word in word_token if word not in stops]\n        #review=' '.join(review)\n        review=[lemma.lemmatize(w) for w in word_token if w not in stops]\n        review=' '.join(review)\n        text_corpus.append(review) \n    return text_corpus","ff39b24a":"insincere_question_df['question_word']=text_clean(insincere_question_df['question_text'].values)","7f6c877b":"insincere_question_clean_word = insincere_question_df.question_word.str.split(expand=True).stack().value_counts().to_frame()\ninsincere_question_clean_word.reset_index(inplace=True)\ninsincere_question_clean_word.columns = ['word','count']","d7d9e9fe":"sns.set(style=\"white\")\n# Plot word and it's count for top 50 words\nsns.relplot(x=\"count\", y=\"word\", size=\"count\",\n            sizes=(40, 400), alpha=.5, palette=\"muted\",\n            height=8, data=insincere_question_clean_word[0:20])","43b62aa6":"sincere_question_df['question_word']=text_clean(sincere_question_df['question_text'].values)","ad9a9bd9":"sincere_question_clean_word = sincere_question_df.question_word.str.split(expand=True).stack().value_counts().to_frame()\nsincere_question_clean_word.reset_index(inplace=True)\nsincere_question_clean_word.columns = ['word','count']","ef45f1ee":"sns.set(style=\"white\")\n# Plot word and it's count for top 50 words\nsns.relplot(x=\"count\", y=\"word\", size=\"count\",\n            sizes=(40, 400), alpha=.5, palette=\"muted\",\n            height=8, data=sincere_question_clean_word[0:20])","bd456d55":"## most frequent occured word in insincere question","22104712":"## most frequent occured word in Sincere question","8aa33740":"## sample of the question","d091fae5":"## analazing insincere questions"}}