{"cell_type":{"a6a9417f":"code","50cce685":"code","f4825ea4":"code","ea1e5eed":"markdown","0e69b58d":"markdown","da528ecd":"markdown"},"source":{"a6a9417f":"# Install:\n# Kaggle environments.\n!git clone https:\/\/github.com\/Kaggle\/kaggle-environments.git\n!cd kaggle-environments && pip install .\n\n# GFootball environment.\n!apt-get update -y\n!apt-get install -y libsdl2-gfx-dev libsdl2-ttf-dev\n\n# Make sure that the Branch in git clone and in wget call matches !!\n!git clone -b v2.3 https:\/\/github.com\/google-research\/football.git\n!mkdir -p football\/third_party\/gfootball_engine\/lib\n\n!wget https:\/\/storage.googleapis.com\/gfootball\/prebuilt_gameplayfootball_v2.3.so -O football\/third_party\/gfootball_engine\/lib\/prebuilt_gameplayfootball.so\n!cd football && GFOOTBALL_USE_PREBUILT_SO=1 pip3 install .","50cce685":"%%writefile submission.py\nfrom kaggle_environments.envs.football.helpers import *\n\n@human_readable_agent\ndef agent(obs):\n    import numpy as np\n    import pandas as pd\n    from pandas import Series, DataFrame\n    \n    ###### 0. CONSTANTS ######\n    \n    ENEMY_TARGET = [ 1, 0]\n    OWN_TARGET   = [-1, 0]\n\n    STEP_HARD_DIST = 0.1\n    STEP_EASY_DIST = 0.5 * STEP_HARD_DIST\n    SAFE_DIST = 0.1\n\n    ###### 1. SMART CONTROL: FUNCTIONS ######\n\n    def get_action_steps(step_dist):\n        import numpy as np\n\n        return {\n            Action.Idle:          [                                0,                                 0],\n            Action.Left:          [step_dist * np.cos(        np.pi), step_dist * np.sin(        np.pi)],\n            Action.TopLeft:       [step_dist * np.cos( 0.75 * np.pi), step_dist * np.sin( 0.75 * np.pi)],\n            Action.Top:           [step_dist * np.cos( 0.5  * np.pi), step_dist * np.sin( 0.5  * np.pi)],\n            Action.TopRight:      [step_dist * np.cos( 0.25 * np.pi), step_dist * np.sin( 0.25 * np.pi)],\n            Action.Right:         [step_dist * np.cos(            0), step_dist * np.sin(            0)],\n            Action.BottomRight:   [step_dist * np.cos(-0.25 * np.pi), step_dist * np.sin(-0.25 * np.pi)],\n            Action.Bottom:        [step_dist * np.cos(-0.5  * np.pi), step_dist * np.sin(-0.5  * np.pi)],\n            Action.BottomLeft:    [step_dist * np.cos(-0.75 * np.pi), step_dist * np.sin(-0.75 * np.pi)]\n        }\n\n\n    def get_point_point_dist(point0, point):\n        import numpy as np\n\n        x0, y0 = point0[0], point0[1]\n        x, y = point[0], point[1]\n        return np.sqrt((x0 - x) ** 2 + (y0 - y) ** 2)\n\n\n    def correct_point(point0):\n        x, y = point0[0], point0[1]\n        return (-1 <= x <= 1) and (-1 <= y <= 1)\n\n\n    def get_move_action_info(point0, enemy_points, step_dist=STEP_EASY_DIST):\n        import numpy as np\n\n        target_dists = {}\n        for action, step in get_action_steps(step_dist).items():\n            step_point = [point0[0] + step[0], point0[1] + step[1]]\n            if correct_point(step_point):\n                ## 1. Enemy min distance\n                enemy_distances = [\n                    get_point_point_dist(step_point, enemy_point)\n                    for enemy_point in enemy_points\n                ]\n                enemy_dist = np.array(enemy_distances).min()\n\n                ## 2. Target distance\n                target_dist = get_point_point_dist(step_point, ENEMY_TARGET)\n\n                target_dists[action] = {\n                    \"target_dist\" : round(target_dist, 3),\n                    \"enemy_dist\" : round(enemy_dist, 3)\n                }\n\n        return target_dists\n\n\n    def get_best_move_action(get_move_action_info, safe_dist=SAFE_DIST):\n        from pandas import Series\n\n        safe_actions = {}\n        for action, info in get_move_action_info.items():\n            target_dist, enemy_dist = info[\"target_dist\"], info[\"enemy_dist\"]\n            if enemy_dist >= SAFE_DIST:\n                safe_actions[action] = target_dist\n\n        if len(safe_actions) == 0:\n            return Action.Right ### fix in the future\n\n        target_action = Series(safe_actions).idxmin()\n\n        return target_action\n\n\n    def make_decision(point0, move_action_info):\n        x0, y0 = point0[0], point0[1]\n\n        ## Shot decision\n        if x0 >= 0.5:\n            return Action.Shot\n\n        ## Move decision\n        best_move_action = get_best_move_action(move_action_info)\n        return best_move_action\n    \n    \n    ###### 2. GAME START ######\n    \n    own_points = obs['left_team']\n    enemy_points = obs['right_team']\n    point0 = obs['left_team'][obs['active']]\n    \n    if Action.Sprint not in obs['sticky_actions']:\n        return Action.Sprint\n\n    if obs['ball_owned_player'] == obs['active'] and obs['ball_owned_team'] == 0:\n        ###### OFFENSE: SMART CONTROL ######\n        move_action_info = get_move_action_info(point0, enemy_points)\n        return make_decision(point0, move_action_info)\n    else:\n        ###### DEFENCE: OLD STRATEGY ######\n        if obs['ball'][0] > point0[0] + 0.05:\n            return Action.Right\n        if obs['ball'][0] < point0[0] - 0.05:\n            return Action.Left\n        if obs['ball'][1] > point0[1] + 0.05:\n            return Action.Bottom\n        if obs['ball'][1] < point0[1] - 0.05:\n            return Action.Top\n        return Action.Slide","f4825ea4":"# Set up the Environment.\nfrom kaggle_environments import make\n\nenv = make(\n    \"football\",\n    configuration={\n        \"save_video\": True,\n        \"scenario_name\": \"11_vs_11_kaggle\",\n        \"running_in_notebook\": True\n    }\n)\n\noutput = env.run([\"\/kaggle\/working\/submission.py\", \"\/kaggle\/working\/submission.py\"])[-1]\n\nprint('Left player: reward = %s, status = %s, info = %s' % (output[0]['reward'], output[0]['status'], output[0]['info']))\nprint('Right player: reward = %s, status = %s, info = %s' % (output[1]['reward'], output[1]['status'], output[1]['info']))\nenv.render(mode=\"human\", width=800, height=600)","ea1e5eed":"# Smart Control Strategy\n\n## Theory\n\nI'm glad to introduce some basic strategy that you may use as basis for your future super-strategy! The aim of this strategy is to move only to regions without enemy football players. That's what I call **smart controll strategy**. More details:\n\n1. Suggestion about distance of football step. You may use my [topic](https:\/\/www.kaggle.com\/c\/google-football\/discussion\/187794) about it, but I've used a suggestion that it takes 0.1 ($STEP\\_HARD\\_DIST$) and 0.05 ($STEP\\_EASY\\_DIST$) for running step and for usual step correspondingly. I do it, cause I've decided to count ball touches by players instead of game steps. It seems like we need about ten running step to achieve target from the middle of the football field (simple suggestion from the leaderboard).\n\n2. After first stage we can estimate, where we would be after each movement action. I call this points as $step\\_point$ (so, one $step\\_point$ for left action, one $step\\_point$ for right action, etc.)\n\n3. For each $step\\_point$ we can count distances for each of enemy football player. If the mininmum of this distances is less, than $SAFE\\_DIST$, we consider $step\\_point$ as safe point.\n\n4. From each $step\\_point$ we choose the nearest to the enemy target. Corresponding actions is a choosen action.\n\n5. Shoot in the last quarter of the football field.","0e69b58d":"# Installation","da528ecd":"## Implementation"}}