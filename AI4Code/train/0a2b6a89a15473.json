{"cell_type":{"ee34b3c0":"code","551f4727":"code","1dabab53":"code","68001b56":"code","0848a345":"code","5890734a":"code","f814b8e9":"code","9822cee5":"code","6df8654b":"code","7396f010":"code","0fa49b50":"code","33837708":"code","3067edde":"code","fb8a8d9e":"code","47a11e8e":"code","93ccc86a":"code","6304cd4c":"code","b263efb7":"markdown","5684ec4b":"markdown","cc3db97d":"markdown","c85192d6":"markdown","920eff3c":"markdown","4fa38e4a":"markdown","762e1aa5":"markdown","7e1033a7":"markdown","db55e825":"markdown","8a20013c":"markdown"},"source":{"ee34b3c0":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport optuna\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score","551f4727":"train = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\")","1dabab53":"train.head()","68001b56":"test.head()","0848a345":"train.drop(\"Id\", axis=1, inplace=True)\ntest.drop(\"Id\", axis=1, inplace=True)","5890734a":"cols = [\"Soil_Type7\", \"Soil_Type15\"]\n\ntrain.drop(cols, axis=1, inplace=True)\ntest.drop(cols, axis=1, inplace=True)","f814b8e9":"ign = train[train[\"Cover_Type\"] == 5].index\ntrain.drop(ign, axis=0, inplace=True)","9822cee5":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int8','int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2\n\n    for col in df.columns:\n        col_type = df[col].dtypes\n\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n\n    if verbose:\n        print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n \n    return df","6df8654b":"train = reduce_mem_usage(train)\ntest = reduce_mem_usage(test)","7396f010":"train_X = train.drop('Cover_Type', axis=1)\ntrain_y = train['Cover_Type']","0fa49b50":"X_train, X_test, y_train, y_test = train_test_split(train_X, train_y, test_size=0.22, random_state=2021 )","33837708":"xgb = XGBClassifier(objective = 'multi:softmax', tree_method = 'gpu_hist', eval_metric = 'mlogloss', \n                    subsample = 0.6,gamma = 0.5,max_depth = 7,alpha = 4,learning_rate = .03,\n                    n_estimators = 2400,predictor = 'gpu_predictor')\nxgb.fit(X_train, y_train,\n          early_stopping_rounds=200,\n          eval_set=[(X_test,y_test)],\n          verbose=True)","3067edde":"preds_valid = xgb.predict(X_test).astype('int')\nacc = accuracy_score(y_test,  preds_valid)\nprint(\"accuracy score:\", acc)","fb8a8d9e":"model = CatBoostClassifier(task_type = 'GPU', devices = '0')\nmodel.fit(X_train, y_train)","47a11e8e":"preds_valid = model.predict(X_test).astype('int')\nacc = accuracy_score(y_test,  preds_valid)\nprint(\"accuracy score:\", acc)","93ccc86a":"sub = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')\nsub['Cover_Type'] =xgb.predict(test).astype('int')\nsub.to_csv(\"xgb_submission.csv\",index=False)\nsub.head()","6304cd4c":"sub['Cover_Type'] =model.predict(test).astype('int')\nsub.to_csv(\"cat_submission.csv\",index=False)\nsub.head()","b263efb7":"Importing packages","5684ec4b":"Loading the data","cc3db97d":"Splitting train and test. \n\nUsing XGB and CatBoost algos.","c85192d6":"Before jumping straight into the problem lets try to understand what are all the features.\n\n* Elevation - Elevation in meters\n* Aspect - Aspect is the compass direction or azimuth that a terrain surface faces.\n* Slope - Slope in degrees\n* Horizontal_Distance_To_Hydrology - Horizotal distance to nearest surface water body\n* Vertical_Distance_To_Hydrology - Vertical distance to nearest surface water body\n* Horizontal_Distance_To_Roadways - Horizontal distance to nearest roadways\n* Hillshade_9am (0 to 255 index) - Hillshade index at 9am, summer solstice\n* Hillshade_Noon (0 to 255 index) - Hillshade index at noon, summer solstice\n* Hillshade_3pm (0 to 255 index) - Hillshade index at 3pm, summer solstice\n* Horizontal_Distance_To_Fire_Points - Horizontal distance to nearest wildfire ignition points\n* Wilderness_Area (4 Binary columns, 0 -> absence or 1 -> presence) - Type of wilderness area \n* Soil_Type (40 Binary columns, 0 -> absence or 1 -> presence) - Soil Type designation\n* Cover_Type (Categorical, 7 types, integers 1 to 7) - Forest Cover Type designation","920eff3c":"With no feature engineering done and without any hyperparameter tuning we are still able to reach an accuracy of nearly 96%. If you find this notebook useful, please do upvote. Thanks for your time Kaggler!","4fa38e4a":"This notebook is continuation from my previous notebook, [Part-1](https:\/\/www.kaggle.com\/vishnukarthiklu\/tps-12-part-1-data-visualization-and-eda). If you haven't visited the previous notebook yet, do have a look at that too! ","762e1aa5":"Now","7e1033a7":"So, from [Part-1](https:\/\/www.kaggle.com\/vishnukarthiklu\/tps-12-part-1-data-visualization-and-eda), we can clearly get the following insights:\n* There are no null values in both the test and training set.\n* Among the target variables, most of them are classified as Cover_Type (2) and also Cover_Type (4) and (5) has least.\n* We discussed about the training and testing data descriptions.\n* Then we saw about the percentage of zeros in the features among which we came to know that Soil_Type7 and Soil_Type15 are fully of zeros.\n* Through the correlation map, most of the features have correlation between 0 to 0.2","db55e825":"Dropping columns that are not important","8a20013c":"Reducing the memory usage\n\nReffered from this [link](https:\/\/www.kaggle.com\/gulshanmishra\/tps-dec-21-tensorflow-nn-feature-engineering) "}}