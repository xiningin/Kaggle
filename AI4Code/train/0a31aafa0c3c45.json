{"cell_type":{"7f452a7a":"code","5a43b4dc":"code","5122727f":"code","0af9c599":"code","cd7aed84":"code","ebdc8d17":"code","a7f0b751":"code","0df3ecc6":"code","3ed1ef19":"code","2fa7c3ef":"code","931eba84":"code","435cd7dc":"code","a49ee67c":"code","27d598d6":"markdown","51be6e9c":"markdown","fc05b5ee":"markdown","e75c4c1a":"markdown"},"source":{"7f452a7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data Visualization\nimport seaborn as sns # data Visualization\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5a43b4dc":"#Importing Datasets\ndf_train = pd.read_csv('\/kaggle\/input\/cat-in-the-dat-ii\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/cat-in-the-dat-ii\/test.csv')\ndf_sub = pd.read_csv('\/kaggle\/input\/cat-in-the-dat-ii\/sample_submission.csv')","5122727f":"sns.countplot(x=df_train['target'], data=df_train, palette='seismic')\nplt.title(\"TARGET DISTRIBUTION\", fontsize = 20)\nplt.xlabel(\"Target Values\", fontsize = 15)\nplt.ylabel(\"Count\", fontsize = 15)\nplt.show()","0af9c599":"df_train.sort_index(inplace=True)","cd7aed84":"df_train.head()","ebdc8d17":"y_train = df_train['target']\ntest_id = df_test['id']\ndf_train.drop(['target', 'id'], axis=1, inplace=True)\ndf_test.drop('id', axis=1, inplace=True)","a7f0b751":"cat_feat_to_encode = df_train.columns.tolist()\nsmoothing=0.20\nimport category_encoders as ce\noof = pd.DataFrame([])\nfrom sklearn.model_selection import StratifiedKFold\nfor tr_idx, oof_idx in StratifiedKFold(n_splits=5, random_state= 1024, shuffle=True).split(df_train, y_train):\n    ce_target_encoder = ce.TargetEncoder(cols = cat_feat_to_encode, smoothing=smoothing)\n    ce_target_encoder.fit(df_train.iloc[tr_idx, :], y_train.iloc[tr_idx])\n    oof = oof.append(ce_target_encoder.transform(df_train.iloc[oof_idx, :]), ignore_index=False)\nce_target_encoder = ce.TargetEncoder(cols = cat_feat_to_encode, smoothing=smoothing)\nce_target_encoder.fit(df_train, y_train)\ndf_train = oof.sort_index()\ndf_test = ce_target_encoder.transform(df_test)","0df3ecc6":"x_train = df_train.iloc[:,:].values\nx_test = df_test.iloc[:,:].values","3ed1ef19":"import lightgbm as lgb\nclassifier = lgb.LGBMClassifier(**{\n                    'learning_rate': 0.05,\n                    'feature_fraction': 0.1,\n                    'min_data_in_leaf' : 12,\n                    'max_depth': 3,\n                    'reg_alpha': 1,\n                    'reg_lambda': 1,\n                    'objective': 'binary',\n                    'metric': 'auc',\n                    'n_jobs': -1,\n                    'n_estimators' : 5000,\n                    'feature_fraction_seed': 42,\n                    'bagging_seed': 42,\n                    'boosting_type': 'gbdt',\n                    'verbose': 1,\n                    'is_unbalance': True,\n                    'boost_from_average': False})","2fa7c3ef":"classifier.fit(x_train, y_train)","931eba84":"y_pred = classifier.predict_proba(x_test)[:,1]","435cd7dc":"#Sumbmission the result\ndf_sub = pd.DataFrame()\ndf_sub['id'] = test_id\ndf_sub['target'] = y_pred\ndf_sub.to_csv('submission.csv', index=False)","a49ee67c":"df_sub.head(20)","27d598d6":"Data Preprossing and Features Engeneering","51be6e9c":"Form above graph we can see Target values are not balanced","fc05b5ee":"Lets take our matrix of features of ml model","e75c4c1a":"Lets check the target variable first"}}