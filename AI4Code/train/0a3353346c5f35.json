{"cell_type":{"43cb859f":"code","c75c2ca3":"code","feaac202":"code","d3965312":"code","ff2bbe43":"code","9e91b170":"code","dd5636e0":"code","8412911e":"code","df42bec3":"code","6aedce46":"code","5bcf1500":"code","a1001a2d":"code","b1bcb29f":"code","074dcb11":"code","68fd310e":"code","ba419949":"code","55687e52":"markdown","320aa770":"markdown","85b7a8a7":"markdown","fa3e9ed8":"markdown","da8412dc":"markdown","5289fab0":"markdown","8ed15a0b":"markdown","abe69a9d":"markdown","6f043872":"markdown","5b47b78b":"markdown","4776b61c":"markdown","e361e83a":"markdown","98b1a1c4":"markdown","c1e556f5":"markdown"},"source":{"43cb859f":"import numpy as np \nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c75c2ca3":"df_bottle = pd.read_csv(\"..\/input\/calcofi\/bottle.csv\")\ndf_cast = pd.read_csv(\"..\/input\/calcofi\/cast.csv\")","feaac202":"import missingno as msno\n\nmsno.heatmap(df_bottle.loc[:, 'Cst_Cnt':'S_qual'])\n","d3965312":"X = df_bottle[df_bottle['T_degC'].notna()][df_bottle['Salnty'].notna()]['T_degC']\ny = df_bottle[df_bottle['T_degC'].notna()][df_bottle['Salnty'].notna()]['Salnty']","ff2bbe43":"from scipy.stats import pearsonr\n# outputs the Pearson correlation coefficient and the p-value that\n# is reasonable for datasets larger than 500.\n# p-value being the probability of an uncorrelated system producing a system \n# with a Pearson correlation that is at least this extreme. \ncc, pv = pearsonr(X, y) \nprint(\"The correlation between {} and {} is {} with a p-value of {}\".format('temperature', 'salinity', cc, pv))","9e91b170":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","dd5636e0":"from sklearn.metrics import mean_absolute_error as mae","8412911e":"from xgboost import XGBRegressor\n\nmy_model = XGBRegressor()\n# Add silent=True to avoid printing out updates with each cycle\nmy_model.fit(X_train, y_train, verbose=False)","df42bec3":"predictions = my_model.predict(X_test)\n\nprint(\"Mean Absolute Error : \" + str(mae(predictions, y_test)))","6aedce46":"import seaborn as sns","5bcf1500":"sns.set(rc = {'figure.figsize':(8,8)})","a1001a2d":"import matplotlib.pyplot as plt\nsns.set_theme(style=\"whitegrid\")\n","b1bcb29f":"cmap = sns.cubehelix_palette(as_cmap=True)","074dcb11":"pal = sns.cubehelix_palette(10, rot=-.25, light=.7)\nax = sns.regplot(x=X_test, y=y_test, marker = '.', color=\".15\", line_kws = {'color': 'crimson'})\nsns.histplot(x=X_test, y=y_test, bins=500, pthresh=.1, cmap= cmap)\n# ax = sns.regplot(x=X_test, y=predictions, marker = '+', scatter_kws = {'color' : 'crimson'}, line_kws = {'color' : 'black'})\nsns.kdeplot(x=X_test, y=y_test, levels=5, color=\"w\", linewidths=1)","68fd310e":"x_line = np.linspace(X_test.min(),X_test.max(),1000)\nline_pred = my_model.predict(x_line)","ba419949":"plt.plot(x_line, line_pred)","55687e52":"Next, before building a model, lets check that there is a meaningful correlation between the two features.","320aa770":"## Split Data, Build Model, and Test Model","85b7a8a7":"# Can we determine the oceans salinity by its temperature?\n\nSpoiler: We can. Below I use XGBRegressor to model the salinity of the ocean as a measure of temperature. \n\nData being used is [CalCOFI](https:\/\/calcofi.org\/ccdata\/database.html).","fa3e9ed8":"## Plot Test Results","da8412dc":"## Library","5289fab0":"## Conclusion\n\nThere is a strong correlation between the temperature and the salinity of the water in the ocean and we can build strong predictive models to tell us what to expect. \n\nBelow I plotted a line for the model. The regression for both the model and the data is roughly the same, it does appear that after 15 degrees the trend becomes positive. From the last plot, we see that the higher temperature data, is less abundant, and so the upward trend may be overwhelmed but the lower temp data. \n","8ed15a0b":"Take care.","abe69a9d":"Quick check of the data. I limited the range of columns to 11 or so. I could have set the data to only be for the columns we are going to focus on:\n\n`msno.heatmap(df_bottle.loc[['T_degC', 'Salnty'])`\n\nWe can see right away that when there is a temperature value given, there is a salinity value. This is good news for us. ","6f043872":"Below is a histplot of the data in front of a scatter plot of the data. The darker area of the histplot is where there are more data values given. The line is the regression. If the 4 line of the code cell below is uncommented, a red set of marks will lay above the rest of the data and a black regression line will cover the red. ","5b47b78b":"## Load Data","4776b61c":"The mean absolute error of our predictions are very low. ","e361e83a":"Model I am using is the XGBRegressor.","98b1a1c4":"Looks like we have a negative correlation with a p-value that suggest its virtually impossible for this correlation to be coincidental. \n\nFor a linear regression, we will see a negative slope. ","c1e556f5":"## Clean\n\nWe are trying to determine salinity by temperature. We need the data from each where both are no null. \n"}}