{"cell_type":{"1a5bcb10":"code","289fdb7c":"code","e46d4ac9":"code","9c398910":"code","a0bd63d3":"code","9cea228f":"code","1d52d08f":"code","323c1bfa":"code","4720d97b":"code","9dd1b78c":"code","b9995b91":"code","b664adfd":"code","22dfc783":"code","96cff93c":"code","4e6e066e":"code","84dd25af":"code","5165e046":"code","897a1fb3":"code","9159ac28":"code","8f1b3512":"code","e0767be9":"code","be77704e":"markdown"},"source":{"1a5bcb10":"import pandas as pd \nimport seaborn as sns","289fdb7c":"df_sample_sub = pd.read_csv('\/kaggle\/input\/quora-insincere-questions-classification\/sample_submission.csv')\ndf_train = pd.read_csv('\/kaggle\/input\/quora-insincere-questions-classification\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/quora-insincere-questions-classification\/test.csv')","e46d4ac9":"df_sample_sub.head(5)","9c398910":"df_train.head(5)","a0bd63d3":"df_test.head(5)","9cea228f":"# Checking for null values\ndf_train.info()","1d52d08f":"# Checking if the problem is balanced or unbalanced --> unbalanced\ndf_train.target.value_counts()","323c1bfa":"sns.countplot(data=df_train, x='target')","4720d97b":"import nltk\nimport string\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\n\nnltk.download('stopwords')\nnltk_stopwords = stopwords.words('english')\n\nwordnet_lemmatizer = WordNetLemmatizer()\n\ndef lemSentence(sentence):\n    token_words = word_tokenize(sentence)\n    lem_sentence = []\n    for word in token_words:\n        lem_sentence.append(wordnet_lemmatizer.lemmatize(word, pos=\"v\"))\n        lem_sentence.append(\" \")\n    return \"\".join(lem_sentence)\n\ndef clean(message, lem=True):\n    # Remove ponctuation\n    message = message.translate(str.maketrans('', '', string.punctuation))\n    \n    # Remove numbers\n    message = message.translate(str.maketrans('', '', string.digits))\n    \n    # Remove stop words\n    message = [word for word in word_tokenize(message) if not word.lower() in nltk_stopwords]\n    message = ' '.join(message)\n    \n    # Lemmatization (root of the word)\n    if lem:\n        message = lemSentence(message)\n    \n    return message","9dd1b78c":"# Cleaning the questions (Really slow process, to be changed !)\ndf_train['question_text_cleaned'] = df_train.question_text.apply(lambda x: clean(x, True))","b9995b91":"df_train.head(5)","b664adfd":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncount_vectorizer = CountVectorizer()\nmodel = LogisticRegression(C=1, random_state=0)\n\nvectorize_model_pipeline = Pipeline([\n    ('count_vectorizer', count_vectorizer),\n    ('model', model)\n])","22dfc783":"X_train, X_test, y_train, y_test = train_test_split(df_train['question_text_cleaned'], df_train['target'], test_size=0.3)\nvectorize_model_pipeline.fit(X_train, y_train)","96cff93c":"predictions = vectorize_model_pipeline.predict(X_test)","4e6e066e":"print('Accuracy :', accuracy_score(y_test, predictions))\nprint('F1 score :', accuracy_score(y_test, predictions))","84dd25af":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, predictions))","5165e046":"# Cleaning the questions (Really slow process, to be changed !)\ndf_test['question_text_cleaned'] = df_test.question_text.apply(lambda x: clean(x, True))","897a1fb3":"df_test['prediction'] = vectorize_model_pipeline.predict(df_test['question_text_cleaned'])","9159ac28":"df_final = df_test[['qid','prediction']]\ndf_final.set_index('qid', inplace=True)","8f1b3512":"df_final.head(5)","e0767be9":"df_final.to_csv('submission.csv')","be77704e":"# Goal\n\nOur goal here is to create a baseline model."}}