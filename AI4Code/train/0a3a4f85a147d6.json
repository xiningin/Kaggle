{"cell_type":{"0ea886bd":"code","d833d72a":"code","fb4f0ea5":"code","e71f3b34":"code","676a65cb":"code","d4285deb":"code","dc9b793e":"code","1ea6b214":"code","b2c03657":"code","b894e64c":"code","147f6f70":"code","e4453cf6":"code","cf3ae085":"code","953a0ec6":"code","feb5a5b1":"code","06604ac4":"code","70f84cdb":"code","6d4286ce":"code","8108939e":"code","29724ba5":"code","87ac60ee":"markdown","30e7c3ba":"markdown","7ac340c5":"markdown","06f27297":"markdown","829c1920":"markdown","2dbc2723":"markdown","f4922942":"markdown","7a377c0e":"markdown","71693b40":"markdown","754bcb51":"markdown","3e45d8ad":"markdown","6a7ef629":"markdown","4f1c9837":"markdown","c4bbea45":"markdown","be31cc11":"markdown","ee428619":"markdown","d053248c":"markdown","fa45e6f2":"markdown","da5b3f60":"markdown","b47d5ec9":"markdown","4844509d":"markdown","d21b9305":"markdown","02382bb1":"markdown","1ea52cc1":"markdown","b2e5601d":"markdown","8cca33c2":"markdown","d437dd6d":"markdown","8eb79d66":"markdown","d499c8cd":"markdown","6b09b173":"markdown","a721b399":"markdown","9d774323":"markdown","6964dde9":"markdown"},"source":{"0ea886bd":"import os\n\nraw_path = \".\/dataset\"\nif not os.path.exists(raw_path):\n    os.mkdir(raw_path)","d833d72a":"import requests\nimport pandas as pd\nimport json\n\n# \u7528\u4e8e\u722c\u53d6\u7684\u4e0d\u540c\u6307\u6807\u7684\u4ee3\u53f7\nindicators = {'ST.INT.RCPT.XP.ZS':'\u56fd\u9645\u65c5\u6e38\u6536\u5165\uff08\u5360\u603b\u51fa\u53e3\u7684\u767e\u5206\u6bd4\uff09',\n              'ST.INT.TVLR.CD':'\u56fd\u9645\u65c5\u6e38\u6536\u5165\uff08\u73b0\u4ef7\u7f8e\u5143\uff09', \n              'ST.INT.DPRT':'\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570',\n              'ST.INT.ARVL':'\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570',\n              'ST.INT.XPND.CD':'\u56fd\u9645\u65c5\u6e38\u652f\u51fa\uff08\u73b0\u4ef7\u7f8e\u5143\uff09',\n              'ST.INT.XPND.MP.ZS':'\u56fd\u9645\u65c5\u6e38\u652f\u51fa\uff08\u5360\u603b\u8fdb\u53e3\u7684\u767e\u5206\u6bd4\uff09'}\n\nfor i in indicators.keys():\n  # max_page\u521d\u59cb\u8bbe\u7f6e\u62103\uff0c\u722c\u53d6\u5230\u9875\u9762\u540e\u66f4\u65b0max_page\n  page, max_page = 1, 3\n  # \u4e3a\u6bcf\u4e2a\u6307\u6807\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684dataframe\n  df_country = pd.DataFrame()\n\n  while page <= max_page:\n    try:\n      url = f'https:\/\/api.worldbank.org\/v2\/country\/indicator\/{i}?format=json&page={page}'\n      s = requests.Session()\n      r = s.get(url)\n      \n      if r.status_code==200:\n        # \u4ecexml\u9875\u9762\u4e0a\u7684\u53c2\u6570\u5f97\u5230\u66f4\u65b0\u540e\u7684max_page\u548c\u6570\u636e\n        max_page = r.json()[0]['pages']\n        data = r.json()[1]\n#         print(f'Fetching {indicators[i]} page {page}....')\n        \n        # \u628ajson\u7684\u5c42\u7ea7\u5316\u7ed3\u6784\u6253\u5e73\n        df = pd.io.json.json_normalize(data, max_level=1)\n        df_country = pd.concat([df_country, df])\n        page += 1\n    except requests.exceptions.Timeout:\n      print('Time out: ', url)\n      break\n\n  filename = f'.\/dataset\/{indicators[i]}.csv'\n  df_country.to_csv(filename, index=None, encoding='utf-8')","fb4f0ea5":"import pandas as pd\nimport os\n\npath = \".\/clean_dateset\"\nif not os.path.exists(path):\n    os.mkdir(path)","e71f3b34":"import numpy as np\n\nraw_path = \".\/dataset\"\ndf_income_group = pd.read_csv('..\/input\/dateset\/country_en.csv', index_col='Country Name')\n# \u521b\u5efa\u56fd\u5bb6\u4ee3\u7801dataframe\u5217\u8868\ncountry_code = df_income_group[['Country Code']]\n# \u521b\u5efa\u975e\u56fd\u5bb6\u7ec4\u7ec7\u7684dataframe\u5217\u8868\norga = df_income_group.loc[df_income_group.IncomeGroup.isnull()]\norga.index","676a65cb":"# \u539f\u59cbcsv\u6570\u636e\u5c55\u793a\ndf_country.head()","d4285deb":"import pandas as pd\ndf_in_m = pd.read_csv(f'{raw_path}\/\u56fd\u9645\u65c5\u6e38\u6536\u5165\uff08\u73b0\u4ef7\u7f8e\u5143\uff09.csv', index_col='country.value')\ndf_out_m = pd.read_csv(f'{raw_path}\/\u56fd\u9645\u65c5\u6e38\u652f\u51fa\uff08\u73b0\u4ef7\u7f8e\u5143\uff09.csv', index_col='country.value')\n\ndf_in_ppl = pd.read_csv(f'{raw_path}\/\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570.csv', index_col='country.value')\ndf_out_ppl = pd.read_csv(f'{raw_path}\/\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570.csv', index_col='country.value')\n\ndf_in_percent = pd.read_csv(f'{raw_path}\/\u56fd\u9645\u65c5\u6e38\u6536\u5165\uff08\u5360\u603b\u51fa\u53e3\u7684\u767e\u5206\u6bd4\uff09.csv', index_col='country.value')\ndf_out_percent = pd.read_csv(f'{raw_path}\/\u56fd\u9645\u65c5\u6e38\u652f\u51fa\uff08\u5360\u603b\u8fdb\u53e3\u7684\u767e\u5206\u6bd4\uff09.csv', index_col='country.value')\n\ndf_dict = {'\u56fd\u9645\u65c5\u6e38\u6536\u5165': df_in_m, '\u56fd\u9645\u65c5\u6e38\u652f\u51fa': df_out_m, \n           '\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570':df_in_ppl, '\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570':df_out_ppl,\n           '\u56fd\u9645\u65c5\u6e38\u6536\u5165(\u767e\u5206\u6bd4)': df_in_percent, '\u56fd\u9645\u65c5\u6e38\u652f\u51fa(\u767e\u5206\u6bd4)': df_out_percent}\n\nfor key in list(df_dict.keys()):\n  df = pd.DataFrame(df_dict[key][['date', 'value']])\n  df_final = pd.DataFrame()\n  # \u6bcf\u4e00\u7ec4\u662f\u4e00\u4e2a\u56fd\u5bb6\uff0ck\u662f\u56fd\u5bb6\u540d\uff0cv\u4e3a\u6570\u636e\n  for k, v in df.groupby('country.value', as_index=False, sort=False):\n    v.set_index('date', inplace=True)\n    v.columns = [k]\n    df_final = pd.concat([df_final, v], axis=1)\n  #\u8f6c\u7f6e\u4f7f\u539f\u672c\u4e3a\u5217\u7684\u65f6\u95f4\u8f74\u53d8\u4e3a\u884c\n  df_dict[key] = df_final.transpose()\n  # \u79fb\u96641960\u52301994\u5e74\u548c2018\u52302019\u5e74\u7684\u7a7a\u6570\u636e\n  df_dict[key] = df_dict[key].drop(columns=[int(col) for col in range(1960, 1995)])\n  df_dict[key] = df_dict[key].drop(columns=[int(col) for col in range(2018, 2020)])\n\n  #\u6e05\u6d17\u540e\u7684\u6570\u636e\u5b58\u5165\u6587\u4ef6\u5939clean_dataset\u5907\u7528\n  filename = f'{path}\/{key}.csv'\n  df_dict[key].to_csv(filename, encoding='utf-8')","dc9b793e":"# \u5904\u7406\u540e\u7684dataframe\ndf_dict[key].head()","1ea6b214":"year = 2017\n# \u8ba1\u7b97\u51c0\u6536\u5165\ndf_net = df_dict['\u56fd\u9645\u65c5\u6e38\u6536\u5165'][year] - df_dict['\u56fd\u9645\u65c5\u6e38\u652f\u51fa'][year]\n# \u6392\u9664\u5176\u4e2d\u7684\u975e\u56fd\u5bb6\ndf_net = df_net.loc[[i for i in df_net.index if i not in orga.index]]\ndf_net = df_net.sort_values(ascending=False)\n\n# \u52a0\u5165\u56fd\u5bb6\u6216\u5730\u533a\u4ee3\u7801\u65b9\u4fbf\u753b\u56fe\ndf_net = pd.DataFrame(df_net).join(country_code, how='left')\ndf_net.head()","b2c03657":"import plotly.graph_objects as go\nimport pandas as pd\n\ndf = df_net\n\n# \u4ee5\u4e0b\u4e3a2017\u5e74\u5404\u56fd\u7684\u56fd\u9645\u65c5\u6e38\u4e1a\u7684\u51c0\u6536\u5165\u53ef\u89c6\u5316\u5bf9\u6bd4\u56fe\nfig = go.Figure(data=go.Choropleth(\n    locations = df['Country Code'],\n    z = df[year],\n    text = df.index,\n    colorscale = 'mint',\n    autocolorscale=False,\n    reversescale=True,\n    marker_line_color='darkgray',\n    marker_line_width=0.1,\n    colorbar_tickprefix = '$',\n    colorbar_title = 'Tourism Net Value<br>Billion US$',\n    colorbar_x = -0.05\n))\n\nfig.update_layout(\n    title_text='2017 International tourism net receipts',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    ),\n    annotations = [dict(\n        x=0.8,\n        y=0.1,\n        text='Source: World Bank',\n        showarrow = False\n    )]\n)\n\nfig.show()","b894e64c":"import matplotlib.pyplot as plt\n\n# \u8ba1\u7b97\u8be5\u56fd\u5e73\u5747\u6bcf\u4f4d\u5165\u5883\u6e38\u5ba2\u7684\u6d88\u8d39\uff08\u7f8e\u5143\uff09\ndf_income_ppl = df_dict['\u56fd\u9645\u65c5\u6e38\u6536\u5165'] \/ df_dict['\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570']\n# \u8ba1\u7b97\u8be5\u56fd\u5e73\u5747\u6bcf\u4f4d\u79bb\u5883\u6e38\u5ba2\u7684\u6d88\u8d39\uff08\u7f8e\u5143\uff09\ndf_xpen_ppl = df_dict['\u56fd\u9645\u65c5\u6e38\u652f\u51fa'] \/ df_dict['\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570']\n\nfig = plt.figure(figsize = (8,12))\nplt.subplot(2,1,1)\ndf_income_ppl_top10 = df_income_ppl[2017].sort_values(ascending=False).iloc[:10]\nplt.barh(df_income_ppl_top10.index, df_income_ppl_top10)\nplt.xlim(0, 6000)\nplt.title('Average Tourism Income from per arrival')\nplt.xlabel('US$')\nfor i, v in enumerate(df_income_ppl_top10):\n    plt.text(v + 3, i + 0.0, str(round(v,2)), color='black')\n\nplt.subplot(2,1,2)\ndf_xpen_ppl_top10 = df_xpen_ppl[2017].sort_values(ascending=False).iloc[:10]\nplt.barh(df_xpen_ppl_top10.index, df_xpen_ppl_top10, color='#CBA6C3')\nplt.xlim(0, 5000)\nplt.title('Average Tourism Expenditure from per departure')\nplt.xlabel('US$')\nfor i, v in enumerate(df_xpen_ppl_top10):\n    plt.text(v + 3, i + 0.0, str(round(v,2)), color='black')\ndf_xpen_ppl_top10.head()","147f6f70":"# \u6392\u9664\u975e\u56fd\u5bb6 & \u964d\u5e8f\u6392\u5e8f\ndf_income_percent = df_dict['\u56fd\u9645\u65c5\u6e38\u6536\u5165(\u767e\u5206\u6bd4)'][2017].loc[[i for i in df_net.index if i not in orga.index]].sort_values(ascending=False)[:10]\ndf_expend_percent = df_dict['\u56fd\u9645\u65c5\u6e38\u652f\u51fa(\u767e\u5206\u6bd4)'][2017].loc[[i for i in df_net.index if i not in orga.index]].sort_values(ascending=False)[:10]","e4453cf6":"import matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom math import log10\n\nto_draw = [df_income_percent, df_expend_percent]\n\nfig,ax = plt.subplots(1,2,figsize = (18,4))\nfor a, df in enumerate(to_draw):\n\n  labels = to_draw[a].index\n  data = to_draw[a]\n  \n  # \u73af\u6570\u4e3atop\u56fd\u5bb6\u6570\n  n = len(data)\n  # \u5b8c\u6574\u4e00\u5708\u7684\u503c\u4e3a100%\n  m = 100\n  # \u6700\u5927\u534a\u5f84\u4e3a2\n  r = 2\n  # \u6bcf\u4e00\u73af\u7684\u5bbd\u5ea6\u4e3a\u534a\u5f84\/\u73af\u6570\n  w = r \/ n \n  #\u8bbe\u7f6e\u6bcf\u4e00\u73af\u7684\u4e0d\u540c\u989c\u8272\n  colors = [cm.coolwarm(i \/ n) for i in range(n)]\n  \n  for i in range(n):\n      # \u6bcf\u4e00\u73af\u7684\u5de6\u534a\u5708\u8bbe\u7f6elabel\u4e3a\u7a7a\n      innerring, _ = ax[a].pie([m - data[i], data[i]], radius = r - i * w, \n                             startangle = 90, labels = [\"\", labels[i]], \n                             labeldistance = 1 - 1 \/ (1.5 * (n - i)),\n                            # \u6bcf\u4e00\u73af\u7684\u5de6\u534a\u5708\u8bbe\u7f6e\u4e3a\u900f\u660e\n                             textprops = {\"alpha\": 0}, colors = [\"None\", colors[i]])\n      plt.setp(innerring, width = w, edgecolor = \"white\")\n\nax[0].text(-1.9,2.2,'International tourism expenditures (% of total imports)',fontsize=12) \nax[1].text(-1.8,2.2,'International tourism receipts (% of total exports)', fontsize=12) \nax[0].legend( loc='upper right', bbox_to_anchor=(2.21, 1.4))\nax[1].legend( loc='upper right', bbox_to_anchor=(1.75, 1.4))","cf3ae085":"import matplotlib.pyplot as plt\nfrom matplotlib import cm\n%matplotlib inline\n\nfig = plt.figure(figsize = (16,15))\nplt.subplot(3,2,1)\nplt.fill_between(df_dict['\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570'].columns, df_dict['\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570'].loc['China'], color='#85C1E9',\n                 alpha=0.5, label='Number of arrivals')\nplt.fill_between(df_dict['\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570'].columns, df_dict['\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570'].loc['China'], color='#F7DC6F',\n                 alpha=0.5, label='Number of departures')\nplt.xlim(1995,2017)\nplt.title('International tourism \\nnumber of arrivals and departures (China)')\nplt.ylabel('Billion')\nplt.xticks(range(2017,1994,-2))\nplt.legend(loc='upper left')\n\nplt.subplot(3,2,3)\nplt.fill_between(df_dict['\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570'].columns, df_dict['\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570'].loc['United States'], color='#85C1E9',\n                 alpha=0.5, label='Number of arrivals')\nplt.fill_between(df_dict['\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570'].columns, df_dict['\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570'].loc['United States'], color='#F7DC6F',\n                 alpha=0.5, label='Number of departures')\nplt.xlim(1995,2017)\nplt.title('International tourism \\nnumber of arrivals and departures (North America)')\nplt.ylabel('Billion')\nplt.xticks(range(2017,1994,-2))\nplt.legend(loc='upper left')\n\nplt.subplot(3,2,2)\nplt.fill_between(df_dict['\u56fd\u9645\u65c5\u6e38\u6536\u5165'].columns, df_dict['\u56fd\u9645\u65c5\u6e38\u6536\u5165'].loc['China'], color='#fdc4b6',\n                 alpha=0.5, label='Income')\nplt.fill_between(df_dict['\u56fd\u9645\u65c5\u6e38\u652f\u51fa'].columns, df_dict['\u56fd\u9645\u65c5\u6e38\u652f\u51fa'].loc['China'], color='#C5C6B6',\n                 alpha=0.5, label='Expenditure')\nplt.xlim(1995,2017)\nplt.title('International tourism income and receipts (China)')\nplt.ylabel('Billion US$')\nplt.xticks(range(2017,1994,-2))\nplt.legend(loc='upper left')\n\nplt.subplot(3,2,4)\nplt.fill_between(df_dict['\u56fd\u9645\u65c5\u6e38\u6536\u5165'].columns, df_dict['\u56fd\u9645\u65c5\u6e38\u6536\u5165'].loc['United States'], color='#fdc4b6',\n                 alpha=0.5, label='Income')\nplt.fill_between(df_dict['\u56fd\u9645\u65c5\u6e38\u652f\u51fa'].columns, df_dict['\u56fd\u9645\u65c5\u6e38\u652f\u51fa'].loc['United States'], color='#C5C6B6',\n                 alpha=0.5, label='Expenditure')\nplt.xlim(1995,2017)\nplt.title('International tourism income and receipts (North America)')\nplt.ylabel('Billion US$')\nplt.xticks(range(2017,1994,-2))\nplt.legend(loc='upper left')\n\nplt.subplot(3,2,5)\nplt.fill_between(df_dict['\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570'].columns, df_dict['\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570'].loc['Spain'], color='#85C1E9',\n                 alpha=0.5, label='Number of arrivals')\nplt.fill_between(df_dict['\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570'].columns, df_dict['\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570'].loc['Spain'], color='#F7DC6F',\n                 alpha=0.5, label='Number of departures')\nplt.xlim(1995,2017)\nplt.title('International tourism \\nnumber of arrivals and departures (Spain)')\nplt.ylabel('Billion')\nplt.xticks(range(2017,1994,-2))\nplt.legend(loc='upper left')\n\nplt.subplot(3,2,6)\nplt.fill_between(df_dict['\u56fd\u9645\u65c5\u6e38\u6536\u5165'].columns, df_dict['\u56fd\u9645\u65c5\u6e38\u6536\u5165'].loc['Spain'], color='#fdc4b6',\n                 alpha=0.5, label='Income')\nplt.fill_between(df_dict['\u56fd\u9645\u65c5\u6e38\u652f\u51fa'].columns, df_dict['\u56fd\u9645\u65c5\u6e38\u652f\u51fa'].loc['Spain'], color='#C5C6B6',\n                 alpha=0.5, label='Expenditure')\nplt.xlim(1995,2017)\nplt.title('International tourism income and receipts (Spain)')\nplt.ylabel('Billion US$')\nplt.xticks(range(2017,1994,-2))\nplt.legend(loc='upper left')","953a0ec6":"# \u8ba1\u7b97\u56fd\u9645\u65c5\u6e38\u6536\u5165\u7684\u5386\u5e74\u589e\u957f\u7387\ndf_dollar_rate_in = (df_dict['\u56fd\u9645\u65c5\u6e38\u6536\u5165'].shift(periods=1, axis='columns') - df_dict['\u56fd\u9645\u65c5\u6e38\u6536\u5165']) \/ df_dict['\u56fd\u9645\u65c5\u6e38\u6536\u5165'] * 100\ndf_dollar_rate_in.columns = range(2018,1995,-1)\n# \u8ba1\u7b97\u56fd\u9645\u65c5\u6e38\u652f\u51fa\u7684\u5386\u5e74\u589e\u957f\u7387\ndf_dollar_rate_out = (df_dict['\u56fd\u9645\u65c5\u6e38\u652f\u51fa'].shift(periods=1, axis='columns') - df_dict['\u56fd\u9645\u65c5\u6e38\u652f\u51fa']) \/ df_dict['\u56fd\u9645\u65c5\u6e38\u652f\u51fa'] * 100\ndf_dollar_rate_out.columns = range(2018,1995,-1)\n# \u8ba1\u7b97\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570\u7684\u5386\u5e74\u589e\u957f\u7387\ndf_ppl_rate_in = (df_dict['\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570'].shift(periods=1, axis='columns') - df_dict['\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570']) \/ df_dict['\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570']* 100\ndf_ppl_rate_in.columns = range(2018,1995,-1)\n# \u8ba1\u7b97\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570\u7684\u5386\u5e74\u589e\u957f\u7387\ndf_ppl_rate_out = (df_dict['\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570'].shift(periods=1, axis='columns') - df_dict['\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570']) \/ df_dict['\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570'] * 100\ndf_ppl_rate_out.columns = range(2018,1995,-1)\n# \u8ba1\u7b97\u5e73\u5747\u6bcf\u4f4d\u5165\u5883\u6e38\u5ba2\u6d88\u8d39\u7684\u5386\u5e74\u589e\u957f\u7387\ndf_income_ppl_rate =  (df_income_ppl.shift(periods=1, axis='columns') - df_income_ppl) \/ df_income_ppl * 100\ndf_income_ppl_rate.columns = range(2018,1995,-1)\n# \u8ba1\u7b97\u5e73\u5747\u6bcf\u4f4d\u79bb\u5883\u6e38\u5ba2\u6d88\u8d39\u7684\u5386\u5e74\u589e\u957f\u7387\ndf_xpen_ppl_rate =  (df_xpen_ppl.shift(periods=1, axis='columns') - df_xpen_ppl) \/ df_xpen_ppl * 100\ndf_xpen_ppl_rate.columns = range(2018,1995,-1)\n\n#\u753b\u51fa\u6298\u7ebf\u56fe\nfig = plt.figure(figsize=(27,5))\nplt.style.use('seaborn-whitegrid')\nplt.subplot(1,3,1)\ndf_dollar_rate_in.loc['China'].plot(label='Growth rate of receipts (China)')\ndf_dollar_rate_out.loc['China'].plot(label='Growth rate of expenditures (China)')\nplt.ylabel('Growth rate (%)')\nplt.ylim(top=100, bottom=-30)\nplt.xticks(range(2018,1995,-2))\nplt.legend()\n\nplt.subplot(1,3,2)\ndf_ppl_rate_in.loc['China'].plot(colormap='Spectral',label='Growth rate of arrivals (China)')\ndf_ppl_rate_out.loc['China'].plot(colormap='seismic',label='Growth rate of departures (China)')\nplt.legend()\nplt.xticks(range(2018,1995,-2))\nplt.ylabel('Growth rate (%)')\nplt.ylim(top=100, bottom=-30)\n\nplt.subplot(1,3,3)\ndf_income_ppl_rate.loc['China'].plot(colormap='gray', label='Growth rate of Tourism Income from per billion arrivals (China)')\ndf_xpen_ppl_rate.loc['China'].plot(color='#4f953b', label='Growth rate of Tourism Expenditure from per billion departures (China)')\nplt.ylim(top=100, bottom=-30)\nplt.ylabel('Growth rate (%)')\nplt.legend()\nplt.xticks(range(2018,1995,-2))\n","feb5a5b1":"from statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.sandbox.stats.diagnostic import acorr_ljungbox\nfrom pandas.plotting import autocorrelation_plot\nfig, axes = plt.subplots(ncols=3, nrows=1, figsize=(15, 3))\ndf = df_dict['\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570']\n\n# \u5c06dataframe\u7684index\u987a\u5e8f\u8c03\u8f6c\u4e3a\u4ece1995\u5e74\u6392\u52302017\u5e74\ndf = df.loc['China'].sort_index()\n\n#\u7ed8\u5236acf\u81ea\u76f8\u5173\u56fe\nplot_acf(df, ax=axes[0])\nautocorrelation_plot(df, ax=axes[1])\nLB2, P2 = acorr_ljungbox(df)\nplt.plot(P2)","06604ac4":"from statsmodels.tsa.stattools import arma_order_select_ic\nimport warnings\n\n\nwarnings.filterwarnings('ignore')\n\n# \u7531\u4e8e\u6570\u636e\u91cf\u8f83\u5c11\u53ea\u53d6\u51fa3\u4e2a\u8fdb\u884c\u9884\u6d4b\ntrain_data = df[:-3]  \ntest_data = df[-3:]\n# \u8bad\u7ec3\u6570\u636e\narma_order_select_ic(train_data.diff().dropna(), ic=['aic', 'bic'], trend='nc')['aic_min_order']  #AIC","70f84cdb":"arma_order_select_ic(train_data, ic='bic')['bic_min_order']  # BIC","6d4286ce":"arma_order_select_ic(train_data, ic='hqic')['hqic_min_order']  # HQIC","8108939e":"from statsmodels.tsa.arima_model import ARIMA\n\n# \u8bad\u7ec3\u6a21\u578b\narima = ARIMA(train_data, order=(2, 1, 1)).fit() ","29724ba5":"import pandas as pd\n\n# \u8f93\u51fa\u540e\u7eed3\u4e2a\u9884\u6d4b\u7ed3\u679c\nplt.plot(arima.forecast(steps=3)[0], '.-', label=\"predict\")  \nplt.plot(test_data.values, '.-', label=\"real\")\nplt.legend()","87ac60ee":"# \u6570\u636e\u9884\u6d4b","30e7c3ba":"# \u6570\u636e\u83b7\u53d6","7ac340c5":"###\u4e2d\u3001\u7f8e\u3001\u897f\u73ed\u7259\u5386\u5e74\u6307\u6570\u53d8\u5316","06f27297":"# \u4e16\u754c\u94f6\u884c\u56fd\u9645\u65c5\u6e38\u4e1a\u6307\u6807\u5206\u6790","829c1920":"\u4ece\u722c\u53d6\u7684\u539f\u59cb\u6570\u636e\u6587\u4ef6\u5939dataset\u91cc\u9762\u53d6\u51facsv\u8fdb\u884c\u6570\u636e\u6e05\u6d17\uff0c\u539f\u59cb\u6570\u636e\u5982\u4e0b\u9762\u4e00\u884c\u4ee3\u7801\u6240\u793a\uff0c\u7528group_by\u6839\u636e\u56fd\u5bb6\u540d\u79f0\u8fdb\u884c\u5206\u7ec4\uff0c\u901a\u8fc7\u8f6c\u7f6e\u5c06\u6570\u636e\u53d8\u6210\u56fd\u5bb6\u540d\u79f0\u4e3a\u884c\u6570\uff0c\u65f6\u95f4\u4e3a\u5217\u6570\u3002\u5904\u7406\u540e\u7684dataframe\u4e3a\u6700\u540e\u4e00\u884c\u4ee3\u7801\u6240\u793a\u3002","2dbc2723":"\u53ef\u4ee5\u770b\u51fa\u9884\u6d4b\u503c\u548c\u771f\u5b9e\u503c\u7684\u8d8b\u52bf\u5927\u81f4\u4e00\u81f4\uff0c\u4f46\u8fd9\u53ef\u80fd\u5e26\u6709\u5076\u7136\u6027\u3002\u7531\u4e8e\u6570\u636e\u91cf\u8f83\u5c11\uff0ctest_data\u53ea\u53d6\u51fa3\u4e2a\u8fdb\u884c\u9884\u6d4b\uff0c\u6570\u636e\u91cf\u66f4\u5927\u7684\u8bdd\u53ef\u4ee5\u66f4\u597d\u7684\u8fdb\u884c\u8bad\u7ec3\u548c\u5bf9\u6bd4\uff0c\u4e5f\u53ef\u4ee5\u5212\u5206\u51fa\u66f4\u591a\u6570\u636e\u6765\u4f5c\u4e3atest_date\u8fdb\u884c\u53c2\u8003\u3002","f4922942":"### \u5404\u56fd\u65c5\u6e38\u4e1a\u5e74\u51c0\u6536\u5165\u5bf9\u6bd4 (Net Income)","7a377c0e":"## \u957f\u671f\u8d8b\u52bf","71693b40":"\u63a5\u4e0b\u6765\u5c1d\u8bd5\u7528ARIMA\u6a21\u578b\u5bf9\u4e2d\u56fd\u7684\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570\u8fdb\u884c\u521d\u6b65\u9884\u6d4b\u3002\u56e0\u4e3a\u6570\u636e\u91cf\u6bd4\u8f83\u5c11\uff0c\u53ea\u80fd\u53d6\u5f971995\u5e74\u52302017\u5e74\u7684\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570\u65f6\u95f4\u5e8f\u5217\uff0c\u6240\u4ee5\u51c6\u786e\u7387\u5e76\u4e0d\u9ad8\u3002\u9996\u5148\u901a\u8fc7\u7ed8\u5236\u4e2d\u56fd\u7684\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570\u65f6\u95f4\u5e8f\u5217\u7684\u81ea\u76f8\u5173\u56fe\u5224\u65ad\u5e8f\u5217\u7684\u5e73\u7a33\u6027\uff0c \u7136\u540e\u8fdb\u884c\u7eaf\u968f\u673a\u6027\u68c0\u9a8c\uff0c\u5e76\u7ed8\u5236 P \u503c\u53d8\u5316\u56fe\u50cf\u3002\u5176\u4e2d\uff0cACF \u81ea\u76f8\u5173\u56fe\u7eb5\u8f74\u6570\u503c\u8868\u793a\u76f8\u5173\u6027\uff0c\u53ef\u4ee5\u770b\u51fa\u6570\u503c\u77ed\u671f\u5185\u6ca1\u6709\u6536\u655b\u5230\u96f6\uff0c\u6240\u4ee5\u8be5\u5e8f\u5217\u4e3a\u975e\u5e73\u7a33\u65f6\u95f4\u5e8f\u5217\u3002\u65e2\u7136\u662f\u975e\u5e73\u7a33\u5e8f\u5217\uff0c\u81ea\u7136\u7eaf\u968f\u673a\u6027\u68c0\u9a8c\u4e5f\u80fd\u901a\u8fc7\uff0c\u6700\u53f3\u56fe\u663e\u793aP \u503c\u8fdc\u5c0f\u4e8e 0.05\uff0c\u8bf4\u660e\u5e8f\u5217\u4e3a\u975e\u7eaf\u968f\u673a\u5e8f\u5217\u3002","754bcb51":"\u8bf4\u52301995\u5e74\u52302017\u5e74\u7684\u65f6\u95f4\u5e8f\u5217\uff0c\u9996\u5148\u6700\u5148\u60f3\u5230\u7684\u4e00\u5b9a\u662f\u5404\u56fd\u6307\u6807\u968f\u65f6\u95f4\u53d8\u5316\u7684\u6298\u7ebf\u56fe\u3002\u4e0b\u56fe\u901a\u8fc7\u6298\u7ebf\u56fe\u5bf9\u6bd4\u4e86\u4e2d\uff0c\u7f8e\uff0c\u897f\u73ed\u72591995\u5e74\u52302017\u5e74\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570\uff0c\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570\uff0c\u56fd\u9645\u65c5\u6e38\u6536\u5165\u548c\u56fd\u9645\u65c5\u6e38\u652f\u51fa\u7684\u53d8\u5316\u56fe\u3002","3e45d8ad":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5404\u56fd\u67d0\u5e74\u7684\u56fd\u9645\u65c5\u6e38\u6536\u5165\u548c\u56fd\u9645\u65c5\u6e38\u652f\u51fa\u8ba1\u7b97\u51fa\u4e16\u754c\u5404\u56fd\u5f53\u5e74\u7684\u51c0\u6536\u5165\u3002\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a\n>\u5f53\u5e74\u51c0\u6536\u5165 = \u672c\u56fd\u5f53\u5e74\u56fd\u9645\u65c5\u6e38\u6536\u5165-\u672c\u56fd\u5f53\u5e74\u56fd\u9645\u65c5\u6e38\u652f\u51fa\n","6a7ef629":"\u540c\u65f6\u6211\u4eec\u8fd8\u53ef\u4ee5\u67e5\u770b\u4e2d\u56fd\u5386\u5e74\u7684\u65c5\u6e38\u6536\u5165\uff0c\u652f\u51fa\u548c\u6e38\u5ba2\u7684\u4eba\u6570\u548c\u6d88\u8d39\u80fd\u529b\u589e\u957f\u7387\u7684\u5386\u5e74\u53d8\u5316\u8d8b\u52bf\u3002\u589e\u957f\u7387\u7684\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a\n> \u589e\u957f\u7387\uff08%\uff09 = \uff08\u73b0\u5e74\u7684\u67d0\u4e2a\u6307\u6807\u7684\u503c-\u4e0a\u5e74\u8fd9\u4e2a\u6307\u6807\u7684\u503c\uff09\/\u4e0a\u5e74\u8fd9\u4e2a\u6307\u6807\u7684\u503c * 100","4f1c9837":"\u8fd9\u6b21\u9879\u76ee\u662f\u81ea\u5df1\u9996\u6b21\u5c1d\u8bd5\u5b8c\u6210\u6570\u636e\u6316\u6398\u5305\u62ec\u722c\u866b\u548c\u53ef\u89c6\u5316\u5728\u5185\u7684\u5168\u90e8\u6d41\u7a0b\u3002\u6570\u636e\u83b7\u53d6\u76f8\u6bd4\u4e4b\u540e\u7684\u6b65\u9aa4\u8981\u66f4\u4e3a\u7e41\u7410\u4e00\u4e9b\uff0c\u6570\u636e\u5206\u6790\u90a3\u4e00\u5757\u5c1d\u8bd5\u4f7f\u7528\u4e86\u5404\u79cd\u4ee5\u524d\u4ece\u6ca1\u7528\u8fc7\u7684\u53ef\u89c6\u5316\u56fe\u8868\u6765\u6316\u6398\u66f4\u6df1\u4e00\u6b65\u7684\u6570\u636e\u4fe1\u606f\uff0c\u6bd4\u5982\u6e38\u5ba2\u6d88\u8d39\u6c34\u5e73\u548c\u5404\u9879\u6307\u6807\u7684\u589e\u957f\u7387\u3002\u6700\u540e\u6570\u636e\u9884\u6d4b\u7684\u90e8\u5206\u7531\u4e8e\u6570\u503c\u8f83\u5c11\uff0c\u53ea\u662f\u521d\u6b65\u7684\u5c1d\u8bd5\u4f7f\u7528ARIMA\u6a21\u578b\uff0c\u4e0b\u4e00\u5e74\u7684\u6e38\u5ba2\u6570\u91cf\u53ef\u80fd\u548c\u5f53\u5e74\u7684\u7ecf\u6d4e\u5f62\u52bf\u548c\u5168\u7403\u653f\u6cbb\u5c40\u52bf\u76f8\u6bd4\u4e8e\u65f6\u95f4\u6709\u66f4\u5927\u5173\u8054\uff0c\u56e0\u6b64\u9884\u6d4b\u7684\u51c6\u786e\u6027\u4e0d\u9ad8\u3002\u603b\u4e4b\uff0c\u8fd9\u6b21\u9879\u76ee\u6311\u6218\u4f7f\u6211\u80fd\u591f\u66f4\u4e86\u89e3\u6570\u636e\u5206\u6790\u9879\u76ee\u7684\u6bcf\u4e00\u6b65\uff0c\u5e0c\u671b\u4e4b\u540e\u80fd\u5206\u6790\u6570\u636e\u91cf\u66f4\u5927\u7684\u9879\u76ee\uff0c\u8fdb\u4e00\u6b65\u52a0\u6df1\u5bf9\u8bfe\u7a0b\u7684\u7406\u89e3\u3002","c4bbea45":"# \u6570\u636e\u5206\u6790\n","be31cc11":"\u6211\u4eec\u4e0d\u4ec5\u53ef\u4ee5\u901a\u8fc7\u51c0\u6536\u5165\u5f97\u5230\u5173\u4e8e\u5404\u56fd\u65c5\u6e38\u4e1a\u5916\u6c47\u7684\u503c\uff0c\u8fd8\u80fd\u901a\u8fc7\u672c\u56fd\u65c5\u6e38\u6536\u5165\uff08\u5360\u603b\u51fa\u53e3\u7684\u767e\u5206\u6bd4\uff09\u548c\u65c5\u6e38\u652f\u51fa\uff08\u5360\u603b\u8fdb\u53e3\u7684\u767e\u5206\u6bd4\uff09\u4e0e\u672c\u56fd\u5176\u4ed6\u884c\u4e1a\u7684\u6536\u5165\u548c\u652f\u51fa\u8fdb\u884c\u5bf9\u6bd4\u3002\u4e0b\u56fe\u7ed9\u51fa2017\u5e74\u5404\u56fd\u65c5\u6e38\u6536\u5165\uff08\u5360\u8be5\u56fd\u603b\u51fa\u53e3\u7684\u767e\u5206\u6bd4\uff09\u548c\u65c5\u6e38\u652f\u51fa\uff08\u5360\u8be5\u56fd\u603b\u8fdb\u53e3\u7684\u767e\u5206\u6bd4\uff09\u6392\u884c\u524d\u5341\u7684\u56fd\u5bb6\u3002","ee428619":"# \u6570\u636e\u6e05\u6d17","d053248c":"\u901a\u8fc7\u8ba1\u7b97\u548c\u964d\u5e8f\u6392\u5e8f\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u897f\u73ed\u7259\u662f2017\u5e74\u5168\u7403\u65c5\u6e38\u4e1a\u51c0\u6536\u5165\u6700\u9ad8\u7684\u56fd\u5bb6\uff0c\u6cf0\u56fd\u548c\u7f8e\u56fd\u5206\u522b\u4e3a\u7b2c\u4e8c\u548c\u7b2c\u4e09\u540d\uff0c\u4e4b\u540e\u7d27\u63a5\u7684\u662f\u6fb3\u95e8\u548c\u571f\u8033\u5176\u3002","fa45e6f2":"### \u65c5\u6e38\u6536\u5165\uff08\u5360\u603b\u51fa\u53e3\u7684\u767e\u5206\u6bd4\uff09\u548c\u65c5\u6e38\u652f\u51fa\uff08\u5360\u603b\u8fdb\u53e3\u7684\u767e\u5206\u6bd4\uff09\u56fd\u5bb6\u6392\u884c","da5b3f60":"\u5229\u7528\u4e0b\u8f7d\u597d\u7684\u56fd\u5bb6\u4ee3\u7801\u5bf9\u7167\u8868\uff0c\u63d0\u53d6\u5404\u56fd\u7684\u56fd\u5bb6\u4ee3\u7801\u548c\u8fc7\u6ee4\u51fa\u6240\u6709\u539f\u59cb\u6570\u636e\u56fd\u5bb6\u5217\u8868\u91cc\u9762\u7684\u975e\u56fd\u5bb6\u7684\u540d\u79f0\u5907\u7528\uff0c\u8fd9\u4e9b\u975e\u56fd\u5bb6\u7684income_group\u7684\u503c\u4e3a\u7a7a\u3002","b47d5ec9":"# \u9879\u76ee\u603b\u7ed3","4844509d":"### \u4e2d\u56fd\u7684\u4eba\u6570\uff0c\u6536\u5165\uff0c\u8d2d\u4e70\u529b\u7684\u589e\u957f\u7387 \u968f\u65f6\u95f4\u53d8\u5316\u7684\u6298\u7ebf\u56fe","d21b9305":"\u5de6\u4fa7\u7684\u56fe\u4e3a\u4e09\u4e2a\u56fd\u5bb6\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570\uff0c\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570\u7684\u8d8b\u52bf\u53d8\u5316\u56fe\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e24\u6761\u6298\u7ebf\u7684\u9762\u79ef\u4e4b\u5dee\u5bf9\u6bd4\u5f53\u5e74\u8be5\u56fd\u65c5\u6e38\u79bb\u5883\u4eba\u6570\u548c\u5165\u5883\u4eba\u6570\u3002\u4e2d\u56fd\u57282017\u5e74\u7684\u79bb\u5883\u65c5\u6e38\u4eba\u6570\u662f\u8fdc\u8fdc\u8d85\u8fc7\u5165\u5883\u4eba\u6570\u7684\uff0c\u897f\u73ed\u7259\u548c\u4e2d\u56fd\u6b63\u597d\u76f8\u53cd\u3002\u53f3\u4fa7\u7684\u56fe\u4e3a\u4e09\u4e2a\u56fd\u5bb6\u56fd\u9645\u65c5\u6e38\u6536\u5165\u548c\u56fd\u9645\u65c5\u6e38\u652f\u51fa\u7684\u8d8b\u52bf\u53d8\u5316\u56fe\uff0c\u540c\u7406\u4e24\u6761\u6298\u7ebf\u7684\u9762\u79ef\u4e4b\u5dee\u5c31\u662f\u524d\u9762\u8ba1\u7b97\u7684\u51c0\u6536\u5165\uff0c\u7531\u56fe\u53ef\u4ee5\u770b\u51fa\u8be5\u56fd\u5386\u5e74\u7684\u51c0\u6536\u5165\u53d8\u5316\u8d8b\u52bf\u3002\n\n\u6311\u9009\u7684\u8fd9\u4e09\u4e2a\u56fd\u5bb6\u5404\u6709\u5dee\u5f02\uff1a\u4e2d\u56fd\u8fd1\u5e74\u7684\u79bb\u5883\u65c5\u5ba2\u6570\u548c\u652f\u51fa\u90fd\u5206\u522b\u8fdc\u8d85\u5165\u5883\u65c5\u5ba2\u6570\u548c\u6536\u5165\uff1b\u800c\u7f8e\u56fd\u867d\u7136\u79bb\u5883\u65c5\u5ba2\u4eba\u6570\u66f4\u591a\uff0c\u4f46\u8fd1\u5e74\u6536\u5165\u5374\u5927\u4e8e\u652f\u51fa\uff1b\u897f\u73ed\u7259\u5219\u8ddf\u4e2d\u56fd\u7684\u60c5\u51b5\u5b8c\u5168\u76f8\u53cd\uff0c\u5165\u5883\u65c5\u5ba2\u6570\u548c\u6536\u5165\u90fd\u5206\u522b\u5927\u4e8e\u79bb\u5883\u65c5\u5ba2\u6570\u548c\u652f\u51fa\u3002","02382bb1":"[\u4e16\u754c\u94f6\u884c](https:\/\/www.worldbank.org\/)\u662f\u4e00\u4e2a\u81f4\u529b\u4e8e\u5168\u7403\u53ef\u6301\u7eed\u6027\u53d1\u5c55\u548c\u51cf\u5c11\u6781\u7aef\u8d2b\u56f0\u7684\u5168\u7403\u6027\u5408\u4f5c\u7ec4\u7ec7\uff0c\u63d0\u4f9b\u5404\u79cd\u91d1\u878d\u4ea7\u54c1\uff0c\u516c\u5f00\u6570\u636e\u548c\u5b66\u672f\u63f4\u52a9\u3002\u8fd9\u6b21\u9879\u76ee\u9996\u5148\u4ece\u4e16\u754c\u94f6\u884c\u7684\u9875\u9762\u901a\u8fc7\u7ed9\u5b9a\u7684api\u722c\u53d6\u4e86\u5404\u4e2a\u56fd\u5bb6\u56fd\u9645\u65c5\u6e38\u6536\u5165\uff08\u73b0\u4ef7\u7f8e\u5143\uff09\uff0c\u56fd\u9645\u65c5\u6e38\u652f\u51fa\uff08\u73b0\u4ef7\u7f8e\u5143\uff09\uff0c\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570\uff0c\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570\uff0c\u56fd\u9645\u65c5\u6e38\u6536\u5165\uff08\u5360\u603b\u51fa\u53e3\u7684\u767e\u5206\u6bd4\uff09\uff0c\u56fd\u9645\u65c5\u6e38\u652f\u51fa\uff08\u5360\u603b\u8fdb\u53e3\u7684\u767e\u5206\u6bd4\uff09\u8fd96\u9879\u6307\u6807\u4ece1995\u5e74\u52302017\u5e74\u7684\u6570\u636e\uff0c\u4e4b\u540e\u8fdb\u884c\u4e86\u6570\u636e\u7684\u9884\u5904\u7406\uff0c\u5206\u6790\uff0c\u6700\u540e\u5c1d\u8bd5\u5229\u7528ARIMA\u6a21\u578b\u5bf9\u4e2d\u56fd\u7684\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570\u505a\u4e86\u521d\u6b65\u9884\u6d4b\u3002\u9879\u76ee\u5927\u81f4\u4e0a\u5206\u4e3a\u6570\u636e\u83b7\u53d6\uff0c\u6570\u636e\u6e05\u6d17\uff0c\u6570\u636e\u5206\u6790\u548c\u6570\u636e\u9884\u6d4b\u56db\u4e2a\u90e8\u5206\uff0c\u9879\u76ee\u7ed3\u6784\u5982\u4e0b\uff1a\n\n\n*   \u6570\u636e\u83b7\u53d6\n*   \u6570\u636e\u6e05\u6d17\n*   \u6570\u636e\u5206\u6790\n  - \u8fd1\u671f\u6570\u636e\u5206\u6790 (2017\uff09\n      1.   \u5404\u56fd\u65c5\u6e38\u4e1a\u5e74\u51c0\u6536\u5165\u5bf9\u6bd4 (Net Income)\n      2.   \u79bb\u5883\u4eba\u53e3\u6d88\u8d39\u529b\u548c\u5165\u5883\u4eba\u53e3\u6d88\u8d39\u529b\u56fd\u5bb6\u6392\u884c\n      3.   \u65c5\u6e38\u6536\u5165\uff08\u5360\u603b\u51fa\u53e3\u7684\u767e\u5206\u6bd4\uff09\u548c\u65c5\u6e38\u652f\u51fa\uff08\u5360\u603b\u8fdb\u53e3\u7684\u767e\u5206\u6bd4\uff09\u56fd\u5bb6\u6392\u884c\n  - \u957f\u671f\u6570\u636e\u5206\u6790 (1995-2017)\n      1.   \u4e2d\u3001\u7f8e\u3001\u897f\u73ed\u7259\u5386\u5e74\u6307\u6570\u53d8\u5316\n      2.   \u4e2d\u56fd\u5386\u5e74\u6307\u6570\u7684\u5386\u5e74\u589e\u957f\u7387\u53d8\u5316\n*   \u6570\u636e\u9884\u6d4b\n  - Arima\n* \u5b9e\u9a8c\u603b\u7ed3\n\n","1ea52cc1":"\u7531\u4e8e\u4e16\u754c\u94f6\u884c\u7684\u6570\u636e\u53ea\u63d0\u4f9b\u52302017\u5e74\u4e3a\u6b62\uff0c2018\u5e74\u7684\u6570\u636e\u4e3a\u7a7a\uff0c\u540c\u65f61995\u5e74\u4e4b\u524d\u7684\u6570\u636e\u4e5f\u7f3a\u5931\uff0c\u6240\u4ee5\u91c7\u7528\u76f4\u63a5\u5220\u9664\u7f3a\u5931\u503c\u7684\u529e\u6cd5\u5220\u9664\u6389\u7f3a\u5931\u7684\u5e74\u4efd\uff0c\u5728\u4e4b\u540e\u7684\u6570\u636e\u5206\u6790\u4e2d\u4e5f\u5c06\u53ea\u7814\u7a76\u6700\u8fd1\u76842017\u5e74\u7684\u6570\u636e\u3002","b2e5601d":"## \u77ed\u671f","8cca33c2":"\u6570\u636e\u5206\u6790\u7684\u90e8\u5206\u6211\u4eec\u5c1d\u8bd5\u901a\u8fc7\u8ba1\u7b97\u53d1\u6398\u66f4\u6df1\u4e00\u6b65\u7684\u4fe1\u606f\uff0c\u800c\u4e0d\u4ec5\u4ec5\u53ea\u662f\u7b80\u5355\u7684\u5bf9\u5404\u9879\u6307\u6807\u503c\u8fdb\u884c\u56fd\u5bb6\u6392\u884c\u3002","d437dd6d":"\u7136\u540e\u5229\u7528 statsmodels \u7edf\u8ba1\u8ba1\u7b97\u5e93\u4e2d\u7684 tsa.ARIMA \u7c7b\u5b8c\u6210 ARIMA \u5efa\u6a21\u548c\u9884\u6d4b\u3002","8eb79d66":"\u5206\u522b\u5229\u7528AIC, BIC\u548cHQIC\u5c1d\u8bd5\u786e\u5b9ap\uff0cq\u7684\u503c\u3002","d499c8cd":"\u63a5\u4e0b\u6765\u753b\u51fa\u5404\u56fd2017\u5e74\u65c5\u6e38\u4e1a\u5e26\u6765\u7684\u5916\u6c47\u6536\u5165\u5bf9\u6bd4\u56fe\uff0c\u989c\u8272\u8d8a\u6df1\u7684\u56fd\u5bb6\u51c0\u6536\u5165\u8d8a\u5c11\u3002\u5f88\u660e\u663e\u4e2d\u56fd2017\u5e74\u5411\u5916\u901a\u8fc7\u65c5\u6e38\u4e1a\u8f93\u9001\u5916\u6c47\u8d85\u8fc7\u4e24\u5343\u4ebf\u7f8e\u5143\u3002\u540c\u65f62017\u5e74\u7f3a\u5931\u6536\u5165\u503c\u6216\u652f\u51fa\u503c\u7684\u56fd\u5bb6\u5728\u5730\u56fe\u4e0a\u663e\u793a\u4e3a\u7070\u8272\u3002\u5730\u56fe\u53ef\u4ee5\u62d6\u52a8\uff0c\u653e\u5927\u540e\u53ef\u4ee5\u627e\u5230\u989c\u8272\u6700\u6d45\u7684\u897f\u73ed\u7259\u3002\u4e5f\u53ef\u4ee5\u770b\u5230\u7f8e\u56fd\u7684\u6d45\u8272\u3002","6b09b173":"\u6839\u636e\u5dee\u5206\u7ed3\u679c\u6765\u786e\u5b9ap, q\u53c2\u6570\u3002\u7531\u4e8eBIC\u548cHQIC\u7684\u503c\u4e00\u6837\uff0c\u6211\u4eec\u5c31\u6839\u636eBIC\u548cHQIC\u7684\u503c\uff0c\u786e\u5b9a  p=2\uff0cq=1\u3002","a721b399":"\u4eceWorld Bank\u7684Api\u4e0a\u6293\u53d6\u4e0d\u540c\u6307\u6807\u7684\u591a\u9875\u6570\u636e\u5e76\u6309\u7167\u6307\u6807\u540d\u79f0\u6574\u5408\u6210\u591a\u4e2acsv\u8868\u3002\u83b7\u53d6\u7684\u6307\u6807\u548c\u5b98\u65b9\u89e3\u91ca\u5982\u4e0b\uff1a\n> \u56fd\u9645\u51fa\u5883\u6e38\u5ba2\uff1a\u6307\u4ece\u60ef\u5e38\u5c45\u4f4f\u56fd\u53bb\u5f80\u4efb\u4f55\u5176\u4ed6\u56fd\u5bb6\u3001\u5176\u76ee\u7684\u4e0d\u662f\u5728\u6240\u8bbf\u95ee\u7684\u56fd\u5bb6\u4ece\u4e8b\u83b7\u53d6\u62a5\u916c\u7684\u6d3b\u52a8\u7684\u6e38\u5ba2\u6570\u91cf\u3002\n\n> \u56fd\u9645\u5165\u5883\u6e38\u5ba2\uff1a\u6307\u5230\u4e00\u4e2a\u975e\u60ef\u5e38\u5c45\u4f4f\u56fd\u65c5\u884c\u3001\u8131\u79bb\u5176\u60ef\u5e38\u73af\u5883\u3001\u65c5\u884c\u65f6\u95f4\u4e0d\u8d85\u8fc7 12 \u4e2a\u6708\u3001\u65c5\u884c\u7684\u4e3b\u8981\u76ee\u7684\u4e0d\u662f\u5728\u6240\u8bbf\u95ee\u7684\u56fd\u5bb6\u4ece\u4e8b\u83b7\u53d6\u62a5\u916c\u7684\u6d3b\u52a8\u7684\u6e38\u5ba2\u6570\u91cf\u3002\n\n> \u56fd\u9645\u65c5\u6e38\u6536\u5165\uff1a \u6307\u56fd\u9645\u5165\u5883\u6e38\u5ba2\u7684\u652f\u51fa\uff0c\u5305\u62ec\u652f\u4ed8\u7ed9\u672c\u56fd\u627f\u8fd0\u4eba\u7684\u56fd\u9645\u8fd0\u8f93\u8d39\u7528\u3002\n\n>\u56fd\u9645\u65c5\u6e38\u652f\u51fa\uff1a\u6307\u56fd\u9645\u51fa\u5883\u6e38\u5ba2\u5728\u5176\u4ed6\u56fd\u5bb6\u7684\u652f\u51fa\uff0c\u5305\u62ec\u652f\u4ed8\u7ed9\u5916\u56fd\u8fd0\u8f93\u516c\u53f8\u7684\u56fd\u9645\u8fd0\u8f93\u8d39\u7528\u3002\n\n\u53ef\u4ee5\u770b\u51fa\u5165\u5883\u548c\u51fa\u5883\u6e38\u5ba2\u662f\u4e0d\u5305\u62ec\u672c\u56fd\u5e38\u4f4f\u5c45\u6c11\u7684\u6765\u81ea\u5176\u4ed6\u56fd\u5bb6\u7684\u6e38\u5ba2\uff0c\u6392\u9664\u4e86\u81ea\u5df1\u56fd\u5bb6\u65c5\u5ba2\u51fa\u5165\u5883\u4eba\u6570\u7684\u5e72\u6270\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5411\u7ed9\u5b9a\u7684api\u4f20\u5165\u6307\u6807\u4ee3\u53f7\u548c\u9875\u7801\u83b7\u53d6\u9875\u9762\u6570\u636e\u3002","9d774323":"### \u79bb\u5883\u4eba\u53e3\u6d88\u8d39\u529b\u548c\u5165\u5883\u4eba\u53e3\u6d88\u8d39\u529b\u56fd\u5bb6\u6392\u884c","6964dde9":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u56fd\u9645\u65c5\u6e38\u79bb\u5883\u4eba\u6570\uff0c\u56fd\u9645\u65c5\u6e38\u5165\u5883\u4eba\u6570\uff0c\u56fd\u9645\u65c5\u6e38\u6536\u5165\u548c\u56fd\u9645\u65c5\u6e38\u652f\u51fa\u8ba1\u7b97\u51fa\u5404\u4e2a\u56fd\u5bb6\u5165\u5883\u548c\u51fa\u5883\u6e38\u5ba2\u7684\u5e73\u5747\u6d88\u8d39\u80fd\u529b\u3002\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a\n>\u8be5\u56fd\u5e73\u5747\u6bcf\u4f4d\u5165\u5883\u6e38\u5ba2\u7684\u6d88\u8d39\uff08\u7f8e\u5143\uff09 = \u8be5\u56fd\u65c5\u6e38\u6536\u5165 \/ \u8be5\u56fd\u65c5\u6e38\u5165\u5883\u4eba\u6570\n\n>\u8be5\u56fd\u5e73\u5747\u6bcf\u4f4d\u79bb\u5883\u6e38\u5ba2\u7684\u6d88\u8d39\uff08\u7f8e\u5143\uff09 = \u8be5\u56fd\u65c5\u6e38\u652f\u51fa \/ \u8be5\u56fd\u65c5\u6e38\u79bb\u5883\u4eba\u6570\n\n\u4e0b\u56fe\u5206\u522b\u7ed9\u51fa\u5165\u5883\u6e38\u5ba2\u548c\u51fa\u5883\u6e38\u5ba2\u5e73\u5747\u6d88\u8d39\u80fd\u529b\u4e16\u754c\u524d\u5341\u7684\u56fd\u5bb6\u7684\u6761\u5f62\u56fe\u6392\u884c\u3002"}}