{"cell_type":{"c58e2258":"code","97832789":"code","10c97d36":"code","c23233c2":"code","d3aae900":"code","713f8660":"code","12274ed4":"code","f86ca6ae":"code","e8107be9":"code","6c6972a0":"code","3c64ef95":"code","92f1c14b":"code","be62712e":"code","cba7dc77":"code","21baf01e":"code","fbbe3901":"markdown","cb64d97b":"markdown","5124a661":"markdown","1590bdce":"markdown","8b21e0cd":"markdown","74bc6b2e":"markdown","793e6273":"markdown"},"source":{"c58e2258":"import os\n\ndef list_files(startpath):\n    for root, dirs, files in os.walk(startpath):\n        level = root.replace(startpath, '').count(os.sep)\n        indent = ' ' * 4 * (level)\n        print('{}{}\/'.format(indent, os.path.basename(root)))\n        subindent = ' ' * 4 * (level + 1)\n        for f in files[:3]:\n            print('{}{}'.format(subindent, f))","97832789":"list_files(\"..\/input\")","10c97d36":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nimage_width, image_height = 150,150\n\ntrain_datagen = ImageDataGenerator(\n      rescale=1.\/255,\n      rotation_range=40,\n      width_shift_range=0.2,\n      height_shift_range=0.2,\n      shear_range=0.2,\n      zoom_range=0.2,\n      horizontal_flip=True,\n      fill_mode='nearest'\n)\n\ntest_datagen = ImageDataGenerator( rescale = 1.\/255. )\n\ntrain_generator = train_datagen.flow_from_directory(\n                    \"..\/input\/seg_train\/seg_train\/\",\n                    batch_size=32,\n                    class_mode='categorical',\n                    target_size=(image_width, image_height)\n)     \n\ntest_generator =  test_datagen.flow_from_directory(\n                    \"..\/input\/seg_test\/seg_test\/\",\n                    batch_size=32, \n                    class_mode='categorical',\n                    target_size=(image_width, image_height)\n)","c23233c2":"from tensorflow.keras.applications.vgg16 import VGG16\n\npre_trained_model = VGG16(\n    input_shape=(image_width,image_height,3),\n    include_top=False,\n    weights=\"imagenet\"\n)\n\nfor layer in pre_trained_model.layers:\n    layer.trainable=False\n    \npre_trained_model.summary()","d3aae900":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dropout, Flatten, Dense, BatchNormalization\n\nmodel = tf.keras.models.Sequential([\n    pre_trained_model,\n    \n    Flatten(),    \n    Dense(256,activation=\"relu\"),\n    BatchNormalization(),\n    Dropout(0.5),\n    Dense(6, activation='softmax')\n])\n\nmodel.summary()","713f8660":"model.compile(\n            optimizer=\"adam\",\n            loss='categorical_crossentropy',\n            metrics = ['acc']\n)","12274ed4":"history = model.fit_generator(\n            train_generator,\n            validation_data=test_generator,\n            epochs=10\n)","f86ca6ae":"import matplotlib.pyplot as plt\n\nacc      = history.history['acc']\nval_acc  = history.history['val_acc']\nloss     = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs   = range(len(acc))\n\n\n# Plot training and validation accuracy per epoch\nplt.plot(epochs,acc)\nplt.plot(epochs,val_acc)\nplt.title('Training and validation accuracy')\nplt.figure()\n\n# Plot training and validation loss per epoch\nplt.plot(epochs,loss)\nplt.plot(epochs,val_loss)\nplt.title('Training and validation loss')","e8107be9":"model.save(\"model_using_vgg16.h5\")","6c6972a0":"predict_datagen = ImageDataGenerator( rescale = 1.\/255. )\n\npredict_generator =  predict_datagen.flow_from_directory(\n                    \"..\/input\/seg_pred\/\",\n                    batch_size=128, \n                    class_mode=None,\n                    shuffle=False,\n                    target_size=(image_width, image_height)\n)","3c64ef95":"pred = model.predict_generator(predict_generator,verbose=1)","92f1c14b":"import numpy as np\npredicted_class_indices=np.argmax(pred,axis=1)","be62712e":"labels = (train_generator.class_indices)\nprint(labels)","cba7dc77":"labels = dict((v,k) for k,v in labels.items())\nprint(labels)","21baf01e":"predictions = [labels[k] for k in predicted_class_indices]\nprint(predictions[:10])","fbbe3901":"## add fully connected layer and some layers","cb64d97b":"## ImageDataGenerator","5124a661":"## plot the learning progress","1590bdce":"## compile and fit\nfit_generator() may take around 20 minutes to complete","8b21e0cd":"## display tree structure of my directory\ncode from [here](https:\/\/stackoverflow.com\/questions\/9727673\/list-directory-tree-structure-in-python) (slightly modified)","74bc6b2e":"## make predictions\ncode from [here](https:\/\/mc.ai\/tutorial-image-classification-with-keras-flow_from_directory-and-generators\/)","793e6273":"## import VGG16 and display the summary of it"}}