{"cell_type":{"874f5d15":"code","5040923d":"code","5681df3e":"code","e33972c5":"markdown","6709c0aa":"markdown","9a346361":"markdown","438a753d":"markdown","8fa379f5":"markdown"},"source":{"874f5d15":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport pandas as pd\nimport random\nimport numpy as np\nimport plotly.express as px\nfrom sklearn import datasets\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objects as go\nimport math\nimport ipywidgets as widgets\nfrom IPython.display import display\nfrom ipywidgets import Layout, interact, IntSlider\nfrom sklearn import datasets, linear_model, metrics\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nfrom sklearn.linear_model import LinearRegression\nimport plotly.io as pio\nfrom sklearn.model_selection import train_test_split\npd.set_option(\"display.max_colwidth\", -1)\npio.templates.default = \"plotly_white\"\nimport warnings\nwarnings.filterwarnings('ignore')","5040923d":"# initialize data of lists.\n\n# Create DataFrame\ndf = pd.DataFrame({'Input':np.random.uniform(0,20, 200)})\ndf[\"Target\"]=np.sin((df[\"Input\"]))\ndf=df.sort_values(by=\"Input\").reset_index(drop=True)\n\nX_train=df.head(150)[[\"Input\"]].reset_index(drop=True)\ny_train=df.head(150)[\"Target\"]\nX_test=df.tail(50)[[\"Input\"]].reset_index(drop=True)\ny_test=df.tail(50)[\"Target\"]","5681df3e":"def f(Degree):\n    poly_reg = PolynomialFeatures(degree=Degree)\n    poly_reg2 = PolynomialFeatures(degree=Degree)\n\n    \n    X_poly_train = poly_reg.fit_transform(X_train)\n    pol_reg = linear_model.LinearRegression()\n    pol_reg.fit(X_poly_train, y_train)\n    predictions_train=pol_reg.predict(X_poly_train)\n\n    X_poly_test = poly_reg2.fit_transform(X_test)\n    predictions_test=pol_reg.predict(X_poly_test)\n\n    df_act_train=pd.DataFrame({'Input':X_train[\"Input\"],\n                                        \"Target\":y_train})\n    df_act_train[\"Line_Type\"]=\"Train Actuals\"\n\n    df_pred_train=df.head(150).reset_index(drop=True)\n\n    df_pred_train[\"Target\"]=predictions_train\n    df_pred_train[\"Line_Type\"]=\"Train Predictions\"\n\n    df_act_test=df.tail(50).reset_index(drop=True)\n    df_act_test[\"Line_Type\"]=\"Test Actuals\"\n\n    df_pred_test=df.tail(50).reset_index(drop=True)\n    df_pred_test[\"Target\"]=predictions_test\n    df_pred_test[\"Line_Type\"]=\"Test Predictions\"\n\n    df_final=df_act_train.append(df_pred_train).reset_index(drop=True)\n    df_final=df_final.append(df_act_test).reset_index(drop=True)\n    df_final=df_final.append(df_pred_test).reset_index(drop=True)\n    df_final['Line_Type'].value_counts()\n    fig = px.line(df_final, x=\"Input\", y=\"Target\",color=\"Line_Type\", width=1500, height=600)\n    fig.update_layout(\n    title={\n            'text': \"Predictions Vs Actuals across degree of Polynomial\",\n            'x':0.5,\n            'xanchor': 'center',\n            'yanchor': 'top'})\n    fig.show()\ninteract(f, Degree=widgets.IntSlider(min=1, max=10, value=1,layout=Layout(width='800px')));","e33972c5":"### Importing libraries","6709c0aa":"### Polynomial Regression","9a346361":"<h1><center>Polynomial Regression Play<\/center><\/h1>\n\n![image.png](attachment:d2f98d3d-48eb-47a7-905a-7ea8b93b5d5f.png)\n<img align=left src = \"\" width=\"500\">","438a753d":"![](http:\/\/)","8fa379f5":"### Creating input dataframe and train test split"}}