{"cell_type":{"2ae998c0":"code","9d6cf42d":"code","1cefd131":"code","2ad77ad1":"code","768336b7":"code","38a285bf":"code","67240c36":"code","f8481f7c":"code","b523b0fc":"markdown","aab55d81":"markdown","96f285dc":"markdown","383ce825":"markdown","9694fc85":"markdown"},"source":{"2ae998c0":"import pandas as pd\nimport numpy as np\nimport warnings\nimport time\nwarnings.filterwarnings(\"ignore\")\nimport lightgbm as lgb\nfrom bayes_opt import BayesianOptimization\nfrom sklearn.metrics import roc_auc_score","9d6cf42d":"application_train = pd.read_csv('..\/input\/application_train.csv')\nfrom sklearn.preprocessing import LabelEncoder\ndef label_encoder(input_df, encoder_dict=None):\n    \"\"\" Process a dataframe into a form useable by LightGBM \"\"\"\n    # Label encode categoricals\n    categorical_feats = input_df.columns[input_df.dtypes == 'object']\n    for feat in categorical_feats:\n        encoder = LabelEncoder()\n        input_df[feat] = encoder.fit_transform(input_df[feat].fillna('NULL'))\n    return input_df, categorical_feats.tolist(), encoder_dict\napplication_train, categorical_feats, encoder_dict = label_encoder(application_train)\nX = application_train.drop('TARGET', axis=1)\ny = application_train.TARGET","1cefd131":"def lgb_eval(num_leaves, feature_fraction, bagging_fraction, max_depth, lambda_l1, lambda_l2, min_split_gain, min_child_weight):\n    params = {'application':'binary','num_iterations':4000, 'learning_rate':0.05, 'early_stopping_round':100, 'metric':'auc'}\n    params[\"num_leaves\"] = round(num_leaves)\n    params['feature_fraction'] = max(min(feature_fraction, 1), 0)\n    params['bagging_fraction'] = max(min(bagging_fraction, 1), 0)\n    params['max_depth'] = round(max_depth)\n    params['lambda_l1'] = max(lambda_l1, 0)\n    params['lambda_l2'] = max(lambda_l2, 0)\n    params['min_split_gain'] = min_split_gain\n    params['min_child_weight'] = min_child_weight\n    cv_result = lgb.cv(params, train_data, nfold=n_folds, seed=random_seed, stratified=True, verbose_eval =200, metrics=['auc'])\n    return max(cv_result['auc-mean'])","2ad77ad1":"lgbBO = BayesianOptimization(lgb_eval, {'num_leaves': (24, 45),\n                                        'feature_fraction': (0.1, 0.9),\n                                        'bagging_fraction': (0.8, 1),\n                                        'max_depth': (5, 8.99),\n                                        'lambda_l1': (0, 5),\n                                        'lambda_l2': (0, 3),\n                                        'min_split_gain': (0.001, 0.1),\n                                        'min_child_weight': (5, 50)}, random_state=0)","768336b7":"# lgbBO.maximize(init_points=init_round, n_iter=opt_round)","38a285bf":"# lgbBO.res['max']['max_params']","67240c36":"X = application_train.drop('TARGET', axis=1)\ny = application_train.TARGET\ndef bayes_parameter_opt_lgb(X, y, init_round=15, opt_round=25, n_folds=5, random_seed=6, n_estimators=10000, learning_rate=0.05, output_process=False):\n    # prepare data\n    train_data = lgb.Dataset(data=X, label=y, categorical_feature = categorical_feats, free_raw_data=False)\n    # parameters\n    def lgb_eval(num_leaves, feature_fraction, bagging_fraction, max_depth, lambda_l1, lambda_l2, min_split_gain, min_child_weight):\n        params = {'application':'binary','num_iterations': n_estimators, 'learning_rate':learning_rate, 'early_stopping_round':100, 'metric':'auc'}\n        params[\"num_leaves\"] = int(round(num_leaves))\n        params['feature_fraction'] = max(min(feature_fraction, 1), 0)\n        params['bagging_fraction'] = max(min(bagging_fraction, 1), 0)\n        params['max_depth'] = int(round(max_depth))\n        params['lambda_l1'] = max(lambda_l1, 0)\n        params['lambda_l2'] = max(lambda_l2, 0)\n        params['min_split_gain'] = min_split_gain\n        params['min_child_weight'] = min_child_weight\n        cv_result = lgb.cv(params, train_data, nfold=n_folds, seed=random_seed, stratified=True, verbose_eval =200, metrics=['auc'])\n        return max(cv_result['auc-mean'])\n    # range \n    lgbBO = BayesianOptimization(lgb_eval, {'num_leaves': (24, 45),\n                                            'feature_fraction': (0.1, 0.9),\n                                            'bagging_fraction': (0.8, 1),\n                                            'max_depth': (5, 8.99),\n                                            'lambda_l1': (0, 5),\n                                            'lambda_l2': (0, 3),\n                                            'min_split_gain': (0.001, 0.1),\n                                            'min_child_weight': (5, 50)}, random_state=0)\n    # optimize\n    lgbBO.maximize(init_points=init_round, n_iter=opt_round)\n    \n    # output optimization process\n    if output_process==True: lgbBO.points_to_csv(\"bayes_opt_result.csv\")\n    \n    # return best parameters\n    return lgbBO.res['max']['max_params']\n\nopt_params = bayes_parameter_opt_lgb(X, y, init_round=5, opt_round=10, n_folds=3, random_seed=6, n_estimators=100, learning_rate=0.05)","f8481f7c":"print(opt_params)","b523b0fc":"### Put all together\n**Note**: It is just a demo. To get a better result, you should increase initial rounds, optimization rounds and n_estimators","aab55d81":"### Step 3: Bayesian Optimization: Maximize","96f285dc":"### Step 1: parameters to be tuned\n**Note**: values for parameters should make sense, e.g.: 'num_leaves' needs to be a integer and 'feature_fraction' should between 0 and 1","383ce825":"### Step 4: Get the parameters","9694fc85":"### Step 2: Set the range for each parameter\n**Gentle reminder**: try to make the range as narrow as possible"}}