{"cell_type":{"714931f7":"code","e25315e8":"code","c66ee45d":"code","dd80d032":"code","ae4897a6":"code","b73a4083":"code","48efb1db":"code","30ab487c":"code","8f663a24":"code","c8ed67bd":"code","09be37f5":"code","99df0551":"code","e6111f99":"code","29edd9fd":"code","cb9c92d1":"code","675105e6":"code","b83ba552":"code","bcb17a09":"code","469d059b":"code","67161c68":"code","659228ad":"code","1e72ee41":"code","1fa8614b":"code","ebf3bd26":"code","1f5e9929":"code","1465cb57":"code","c8e17dc7":"code","d3148313":"code","078037cc":"code","47e2f1d8":"code","4812ddbc":"code","ec9b0318":"code","6e87de36":"code","04fd44cf":"code","36dce623":"code","0f4f7d00":"code","48091b41":"code","bff94e0d":"code","8370b5cd":"code","96d16e16":"code","1b199735":"code","dbfd14cb":"code","f464e25e":"code","a389bd7f":"code","29326aa8":"code","6a6be8fc":"code","3ac4cdb0":"code","a0ff6154":"code","3fa93368":"code","7b32cf03":"code","7581272c":"code","05fd43d4":"code","a59bb68b":"markdown","9f28e2db":"markdown","e5c8a1ff":"markdown","ada37cdd":"markdown","9e169314":"markdown","4fca9fa6":"markdown","7d3617ae":"markdown","ba9f9bee":"markdown","bbbd7e08":"markdown","968ebc13":"markdown","853613f5":"markdown","7ce49f53":"markdown","cbc3c232":"markdown","2052dfa3":"markdown"},"source":{"714931f7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","e25315e8":"df= pd.read_csv('..\/input\/gene-expressioncsv\/gene_expression.csv')","c66ee45d":"df.head()","dd80d032":"df.shape","ae4897a6":"df.info()","b73a4083":"sns.scatterplot(data=df, x='Gene One', y='Gene Two', hue='Cancer Present')","48efb1db":"sns.scatterplot(data=df, x='Gene One', y='Gene Two', hue='Cancer Present')\nplt.xlim(2, 6)\nplt.ylim(3, 10)\nplt.legend(loc=(1.1, 0.5))","30ab487c":"sns.countplot(data=df, x='Cancer Present')","8f663a24":"df['Cancer Present'].value_counts()","c8ed67bd":"X= df.drop('Cancer Present', axis=1)\ny= df['Cancer Present']","09be37f5":"from sklearn.model_selection import train_test_split","99df0551":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","e6111f99":"from sklearn.preprocessing import StandardScaler","29edd9fd":"scaler= StandardScaler()","cb9c92d1":"scaler.fit(X_train)","675105e6":"scaled_X_train= scaler.transform(X_train)\nscaled_X_test= scaler.transform(X_test)","b83ba552":"from sklearn.neighbors import KNeighborsClassifier","bcb17a09":"knn_model= KNeighborsClassifier(n_neighbors=1)","469d059b":"knn_model.fit(scaled_X_train, y_train)","67161c68":"y_pred= knn_model.predict(scaled_X_test)","659228ad":"#The prediction Value VS Actual Value of Test Data\npd.DataFrame({'Y_Test':y_test, 'Y_Pred': y_pred})","1e72ee41":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score","1fa8614b":"accuracy_score(y_test, y_pred)","ebf3bd26":"confusion_matrix(y_test, y_pred)","1f5e9929":"print(classification_report(y_test, y_pred))","1465cb57":"test_error_rate= []\n\n\nfor k in range (1, 30):\n    knn_model = KNeighborsClassifier(n_neighbors=k)\n    knn_model.fit(scaled_X_train, y_train)\n    \n    y_pred_test = knn_model.predict(scaled_X_test)\n    \n    test_error=1- accuracy_score(y_test, y_pred_test)\n    test_error_rate.append(test_error)","c8e17dc7":"test_error_rate","d3148313":"plt.figure(figsize=(10, 6))\nplt.plot(range(1, 30), test_error_rate, label='Test Error')\nplt.legend()\nplt.ylabel('Error Rate')\nplt.xlabel('K Value')","078037cc":"scaler= StandardScaler()\n","47e2f1d8":"knn= KNeighborsClassifier()","4812ddbc":"knn.get_params().keys()","ec9b0318":"operations= [('scaler', scaler), ('knn', knn)]","6e87de36":"from sklearn.pipeline import Pipeline","04fd44cf":"pipe= Pipeline(operations)","36dce623":"from sklearn.model_selection import GridSearchCV","0f4f7d00":"k_values= list(range(1, 20))","48091b41":"param_grid= {'knn__n_neighbors': k_values}","bff94e0d":"full_cv_classifier= GridSearchCV(pipe, param_grid, cv=5, scoring='accuracy')","8370b5cd":"full_cv_classifier.fit(X_train, y_train)","96d16e16":"full_cv_classifier.best_estimator_.get_params()","1b199735":"full_cv_classifier.cv_results_.keys()","dbfd14cb":"scaler= StandardScaler()\nknn14= KNeighborsClassifier(n_neighbors=14)\noperations= [('scaler', scaler), ('knn14', knn14)]","f464e25e":"pipe= Pipeline(operations)","a389bd7f":"pipe.fit(X_train, y_train)","29326aa8":"pipe_pred= pipe.predict(X_test)","6a6be8fc":"print(classification_report(y_test, pipe_pred))","3ac4cdb0":"sample= X_test.iloc[35]","a0ff6154":"sample","3fa93368":"sample.values","7b32cf03":"sample.values.reshape(1, -1)","7581272c":"pipe.predict(sample.values.reshape(1, -1))","05fd43d4":"pipe.predict_proba(sample.values.reshape(1, -1))","a59bb68b":"### Step10: Evaluating the Model","9f28e2db":"### Step6: Split the Data to Train & Test","e5c8a1ff":"### Step3: Data Overview","ada37cdd":"### Step1: Import all Necessary Libraries","9e169314":"### Step8: Train the Model","4fca9fa6":"# Final Model","7d3617ae":"### Step7: Scaling the Features","ba9f9bee":"## K Nearest Neighbors (KNN)\n\nMore info about the dataset: \nhttps:\/\/www.sciencedirect.com\/topics\/biochemistry-genetics-and-molecular-biology\/gene-expression-level\n","bbbd7e08":"### Creating a Pipeline to find K value","968ebc13":"### Elbow Method for Choosing Reasonable K Values","853613f5":"### Step2: Import the Dataset","7ce49f53":"### Step4: EDA","cbc3c232":"### Step5: Determine the Features & Target Variable","2052dfa3":"### Step9: Predicting Test Data"}}