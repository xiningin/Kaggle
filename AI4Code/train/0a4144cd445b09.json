{"cell_type":{"9426979d":"code","cd3dea48":"code","ccaf75f2":"code","70c95b7d":"code","bd552d33":"code","d9755b3c":"code","54f3952e":"code","dd645e5d":"code","f72e60f9":"code","aa25282d":"code","2fbfcba6":"code","5e8f81ef":"code","992e91fc":"code","bea63584":"code","6e346aac":"code","aa7216b6":"code","c2f4bf13":"code","343fd0ee":"code","3ca284c2":"code","8109d8c0":"code","6705fb8a":"code","bc66c1dc":"code","ed303635":"code","f84cd6cd":"code","af435be5":"code","4c6fa298":"code","14a9a45f":"code","c3c47cb2":"code","bed29c23":"code","919ae18e":"markdown"},"source":{"9426979d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cd3dea48":"#read data\ntrain= pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest= pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsample= pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","ccaf75f2":"#looking at data\nprint(train.shape)\ntrain.head()","70c95b7d":"print(test.shape)\ntest.head()","bd552d33":"print(sample.shape)\nsample.head()","d9755b3c":"#descriptive analysis\nprint(train.describe(include='all'))\nprint('-------------------')\nprint(test.describe())","54f3952e":"#data prep: appending both train and test to preprocess together\ndf= train.append(test)\ndf.shape","dd645e5d":"#null check and impute if any\ndf.isnull().sum()","f72e60f9":"print('df shape= ',df.shape)\nprint('df passenger id unique= ',df.PassengerId.nunique())\nprint('df cabin total null val= ',df.Cabin.isnull().sum())\nprint(train.Cabin.isnull().sum())\nprint(test.Cabin.isnull().sum())","aa25282d":"print(df.Ticket.value_counts())\nprint(df.Ticket.nunique())","2fbfcba6":"print(df[df.Ticket=='1601'])","5e8f81ef":"#dropping cols\ndf.drop(['Cabin'], axis=1, inplace = True)\nprint(df.shape)","992e91fc":"#check dtypes\ndf.dtypes","bea63584":"# Imputing missing val for age, embarked and fare\ndf['Age'].fillna(df['Age'].median(), inplace = True)\ndf['Embarked'].fillna(df['Embarked'].mode()[0], inplace = True)\ndf['Fare'].fillna(df['Fare'].median(), inplace = True)","6e346aac":"df.isnull().sum()","aa7216b6":"df.head()","c2f4bf13":"df.Embarked.value_counts()","343fd0ee":"# encoding\ncal_cols= ['Embarked','Sex']\ndf= pd.get_dummies(df, columns= cal_cols)","3ca284c2":"df.head()","8109d8c0":"#splitting train and test from df\ntrain= df[df['Survived'].isnull()!= True]\ntest= df[df['Survived'].isnull()== True].drop(['Survived'], axis=1)\nprint(train.shape)\nprint(test.shape)","6705fb8a":"test.isnull().sum()","bc66c1dc":"train.columns","ed303635":"# local validation split\nfeatures=['Age', 'Fare', 'Parch', 'Pclass', 'SibSp', 'Embarked_C', 'Embarked_Q', 'Embarked_S',\n       'Sex_female', 'Sex_male']\nprint(len(features))\n\nfrom sklearn.model_selection import train_test_split\ntrain_x, val_x, train_y, val_y= train_test_split(train[features], train.Survived, test_size=0.2, random_state=123)\nprint(train_x.shape)\nprint(train_y.shape)\nprint('---------------')\nprint(val_x.shape)\nprint(val_y.shape)","f84cd6cd":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nmodels = [\n    #ensemble\n    AdaBoostClassifier(),\n    ExtraTreesClassifier(),\n    GradientBoostingClassifier(),\n    RandomForestClassifier(),\n    DecisionTreeClassifier(),\n    \n    #linear models\n    LogisticRegression(),\n          \n    XGBClassifier(),\n    LGBMClassifier(),\n    CatBoostClassifier()\n         ]","af435be5":"#modelling\ndf_models = pd.DataFrame(columns=['Model_name','Accuracy'])\n\ni=0\nfor model in models:\n    model.fit(train_x,train_y)\n    pred_y = model.predict(val_x)\n    acc_score = accuracy_score(val_y, pred_y)\n    name = str(model)\n    print(name[0:name.find(\"(\")])\n    df_models.loc[i,'Model_name']= name[0:name.find(\"(\")]\n \n    df_models.loc[i,'Accuracy']= acc_score\n    print(confusion_matrix(val_y,pred_y))\n    print(\"------------------------------------------------------------\")\n    i=i+1","4c6fa298":"#models comparison\ndf_models.sort_values('Accuracy', ascending=False)","14a9a45f":"#for submission- training on whole trainset and prediction on test set using our best model\nmodel = LGBMClassifier()\nmodel.fit(train[features], train.Survived)\npred_y = model.predict(test[features])","c3c47cb2":"submission = pd.DataFrame()\nsubmission['PassengerId'] = test['PassengerId']\nsubmission['Survived'] = pred_y.astype(int)\nsubmission.to_csv('lgbm.csv', index=False)\nsubmission.shape","bed29c23":"submission","919ae18e":"* Ticket col does not make any sense, Its a ticket number so each entry should be unique. ???\n* Will drop Cabin coz more than 77 % null val.\n* Will Drop PassengerID, coz its unique for all passengers, won't help in distinguishing."}}