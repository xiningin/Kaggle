{"cell_type":{"2ece0491":"code","b1a4aa42":"code","67b5493f":"code","4395d292":"code","cbd0990b":"code","4adf9cd9":"code","74c60216":"code","d7350b5a":"code","f949bb7d":"code","aa02c380":"code","270a6e58":"code","1ac6d70f":"code","e6ea15c7":"code","4b679ece":"code","5595fdb3":"code","aa0e8e0d":"code","8b509bf2":"code","72311ba4":"code","44b850c9":"code","79a150f9":"code","c9797bdd":"code","36323b21":"code","4218f94f":"code","d28d0ad7":"code","d6b679b0":"code","f8b1561f":"code","b1b2379e":"code","fa587f95":"code","2020c16d":"code","07a1f566":"code","a1b255ac":"markdown","65a574f7":"markdown","a14a0344":"markdown","87f1e72c":"markdown","763f214e":"markdown","33c88ba9":"markdown","bf8697c0":"markdown","ae143d64":"markdown","44a00a52":"markdown","c434f54c":"markdown"},"source":{"2ece0491":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1a4aa42":"# data wrangling\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling as pdp\nfrom collections import Counter\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom IPython.core.display import display\n\n# modeling\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold, cross_validate\n\n# evaluation\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix","67b5493f":"#1.5.1 \u30bf\u30b9\u30af\u3068\u8a55\u4fa1\u6307\u6a19\n# Load\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\n# fundamental statistics\n#display(train.describe(include='all'))\n\n# generate detailed report(train)\n#pdp.ProfileReport(train)\n\n#\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u7279\u5fb4\u91cf\u3068\u76ee\u7684\u5909\u6570\u306b\u5206\u3051\u308b\ntrain_x = train.drop([\"Survived\"],axis=1)\ntrain_y = train[\"Survived\"]","4395d292":"#1.5.2 \u7279\u5fb4\u91cf\u306e\u4f5c\u6210\nfrom sklearn.preprocessing import LabelEncoder\n\n#\u5909\u6570PassengerID\u3092\u524a\u9664\u3059\u308b\ntrain_x = train_x.drop([\"PassengerId\"],axis=1)\ntest_x = test.drop([\"PassengerId\"],axis=1)\n\n#\u5909\u6570Name, Ticket, Cabin\u3092\u9664\u5916\u3059\u308b\ntrain_x = train_x.drop([\"Name\",\"Ticket\",\"Cabin\"],axis=1)\ntest_x = test_x.drop([\"Name\",\"Ticket\",\"Cabin\"],axis=1)\n\n#\u305d\u308c\u305e\u308c\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306blabel encoding\u3092\u9069\u7528\u3059\u308b\n#LabelEncoder\u3092\u4f7f\u3063\u3066\u3001\u540d\u79f0\u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\nfor c in [\"Sex\", \"Embarked\"]:\n    #\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u57fa\u3065\u3044\u3066\u3001\u3069\u3046\u5909\u63db\u3059\u308b\u304b\u5b9a\u3081\u308b\n    le = LabelEncoder()\n    le.fit(train_x[c].fillna(\"NA\"))\n    \n    #\u5b66\u7fd2\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5909\u63db\u3059\u308b\n    train_x[c]=le.transform(train_x[c].fillna(\"NA\"))\n    test_x[c]=le.transform(test_x[c].fillna(\"NA\"))\n\n#display(train_x)","cbd0990b":"#1.5.3 \u30e2\u30c7\u30eb\u306e\u4f5c\u6210\nfrom xgboost import XGBClassifier\n\n#\u30e2\u30c7\u30eb\u3092\u4e0e\u3048\u3066\u306e\u4f5c\u6210\u304a\u3088\u3073\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u3066\u306e\u5b66\u7fd2\nmodel = XGBClassifier(n_estimators=20,random_state=71)\nmodel.fit(train_x,train_y)\n\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u78ba\u7387\u3067\u51fa\u529b\u3059\u308b\npred = model.predict_proba(test_x)[:,1]\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u4e8c\u5024\u306b\u5909\u63db\u3059\u308b\npred_label = np.where(pred>0.5,1,0)\n\n#\u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\nsubmission = pd.DataFrame({\"PassengerId\":test[\"PassengerId\"],\"Survived\":pred_label})\nsubmission.to_csv(\"submission_first.csv\", index=False)","4adf9cd9":"#1.5.4\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\nfrom sklearn.metrics import log_loss, accuracy_score\nfrom sklearn.model_selection import KFold\n\n#\u5404fold\u306e\u30b9\u30b3\u30a2\u3092\u4fdd\u5b58\u3059\u308b\u30ea\u30b9\u30c8\nscores_accuracy = []\nscores_logloss = []\n\n#\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\n#\u5b66\u7fd2\u30c7\u30fc\u30bf\u30924\u3064\u306b\u5206\u5272\u3057\u3001\u3046\u30611\u3064\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3068\u3059\u308b\u3053\u3068\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3092\u5909\u3048\u3066\u7e70\u308a\u8fd4\u3059\nkf = KFold(n_splits=4, shuffle =True, random_state=71)\nfor tr_idx, va_idx in kf.split(train_x):\n    #\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\n    tr_x, va_x = train_x.iloc[tr_idx], train_x.iloc[va_idx]\n    tr_y, va_y = train_y.iloc[tr_idx], train_y.iloc[va_idx]\n    \n    #\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3092\u884c\u3046\n    model = XGBClassifier(n_estimators=20, random_state=71)\n    model.fit(tr_x,tr_y)\n    \n    #\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u78ba\u7387\u3067\u51fa\u529b\u3059\u308b\n    va_pred = model.predict_proba(va_x)[:,1]\n    \n    #\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3067\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\n    logloss = log_loss(va_y, va_pred)\n    accuracy = accuracy_score(va_y, va_pred>0.5)\n    \n    #\u305d\u306efold\u30b9\u30b3\u30a2\u3092\u4fdd\u6301\u3059\u308b\n    scores_logloss.append(logloss)\n    scores_accuracy.append(accuracy)","74c60216":"print(np.mean(scores_accuracy),np.mean(scores_logloss))","d7350b5a":"#1.5.5\u30e2\u30c7\u30eb\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n#\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306b\u3088\u308a\u3001\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\n\nimport itertools\n#\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u5019\u88dc\u3068\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e96\u5099\u3059\u308b\nparam_space = {\n    \"max_depth\":[3,5,7],\n    \"min_child_weight\":[1.0,2.0,4.0]\n}\n\n#\u63a2\u7d22\u3059\u308b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\nparam_combinations = itertools.product(param_space[\"max_depth\"],param_space[\"min_child_weight\"])\n#\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u3068\u305d\u308c\u306b\u5bfe\u3059\u308b\u30b9\u30b3\u30a2\u3092\u4fdd\u5b58\u3059\u308b\u30ea\u30b9\u30c8\nparams = []\nscores = []\n\n#\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u3054\u3068\u306b\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u8a55\u4fa1\u3092\u884c\u3046\nfor max_depth, min_child_weight in param_combinations:\n    score_folds = []\n    #\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\n    #\u5b66\u7fd2\u30c7\u30fc\u30bf\u30924\u3064\u306b\u5206\u5272\u3057\u3001\u3046\u30611\u3064\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3068\u3059\u308b\u3053\u3068\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3092\u5909\u3048\u3066\u7e70\u308a\u8fd4\u3059\n    kf = KFold(n_splits=4, shuffle =True, random_state=71)\n    \n    for tr_idx, va_idx in kf.split(train_x):\n        #\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\n        tr_x, va_x = train_x.iloc[tr_idx], train_x.iloc[va_idx]\n        tr_y, va_y = train_y.iloc[tr_idx], train_y.iloc[va_idx]\n        \n        #\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3092\u884c\u3046\n        model = XGBClassifier(n_estimators=20, random_state=71, max_depth=max_depth, min_child_weight=min_child_weight)\n        model.fit(tr_x,tr_y) \n        #\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u78ba\u7387\u3067\u51fa\u529b\u3059\u308b\n        va_pred = model.predict_proba(va_x)[:,1]\n    \n        #\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3067\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\n        logloss = log_loss(va_y, va_pred)\n    \n        #\u305d\u306efold\u30b9\u30b3\u30a2\u3092\u4fdd\u6301\u3059\u308b\n        score_folds.append(logloss)\n            \n    score_mean = np.mean(score_folds)\n    \n    #\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u3068\u5bfe\u5fdc\u3059\u308b\u30b9\u30b3\u30a2\u3092\u4fdd\u5b58\u3059\u308b\n    params.append((max_depth,min_child_weight))\n    scores.append(score_mean)\n\n#\u6700\u3082\u30b9\u30b3\u30a2\u304c\u3088\u3044\u3082\u306e\u3092\u30d9\u30b9\u30c8\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3059\u308b\nbest_idx = np.argsort(scores)[0]\nbest_param = params[best_idx]\nprint(f'max_depth:{best_param[0]},min_child_weight:{best_param[1]}')","f949bb7d":"# xgboost\u30e2\u30c7\u30eb #1.5.5 \u3067\u898b\u3064\u3051\u305f\u6700\u9069\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4ee3\u5165\u3057\u305f\nmodel_xgb = XGBClassifier(n_estimators=20, random_state=71,max_depth=3, min_child_weight=2)\nmodel_xgb.fit(train_x,train_y)\npred_xgb = model_xgb.predict_proba(test_x)[:,1]\n\npred_label2 = np.where(pred_xgb>0.5,1,0)\n\n#\u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\nsubmission3 = pd.DataFrame({\"PassengerId\":test[\"PassengerId\"],\"Survived\":pred_label2})\nsubmission3.to_csv(\"submission_second_2.csv\", index=False)","aa02c380":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest  = pd.read_csv('..\/input\/titanic\/test.csv')\n\nprint(pd.crosstab([train['Survived']],[train['Sex'],train['Pclass']]))","270a6e58":"y_train = train['Survived'].copy()\ntrain.drop('Survived', axis=1, inplace=True)\n\n# \u51e6\u7406\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u307e\u3068\u3081\u3066\u304a\u304f\ntrain_test = (train, test)","1ac6d70f":"# \u4e0d\u8981\u5217\u306e\u524a\u9664\n# test \u30c7\u30fc\u30bf\u306e PassengerId \u306f Submit \u306b\u5fc5\u8981\u306b\u306a\u308b\u305f\u3081\u53d6\u3063\u3066\u304a\u304f\npassengerid = train_test[1]['PassengerId']\nfor df in train_test:\n    df.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)","e6ea15c7":"#\u6b20\u640d\u5024\u306e\u88dc\u5b8c\u3000\u2192\u3000\u4ee3\u8868\u5024\uff08\u5e73\u5747\u5024\uff09\u3067\u88dc\u5b8c\u3059\u308b\nfor df in train_test:\n    df['Age'].fillna(df['Age'].mean(), inplace=True)\n    df['Fare'].fillna(df['Fare'].mean(), inplace=True)\n\n#\u6b20\u640d\u5024\u306e\u88dc\u5b8c\u3000\u2192\u3000\u4ee3\u8868\u5024\uff08\u6700\u983b\u5024\uff09\u3067\u88dc\u5b8c\u3059\u308b\nfor df in train_test:\n    df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)\n\n#\u6b20\u640d\u5024\u304b\u3089\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3092\u751f\u6210\u3059\u308bcabin\u306e\u30c7\u30fc\u30bf\u3092\u524a\u9664\u305b\u305a\u306b0\u304b1\u304b\u3067\u6b8b\u3059\u3001\u300c\u6b20\u640d\u3057\u3066\u3044\u308b\u3053\u3068\u300d\u81ea\u4f53\u304c\u60c5\u5831\u304b\u3082\u77e5\u308c\u306a\u3044\u306e\u3067\nfor df in train_test:\n    df['Cabin'] = df['Cabin'].isnull().astype(int)","4b679ece":"#\u30e2\u30c7\u30eb\u304c\u53d7\u3051\u4ed8\u3051\u308b\u30c7\u30fc\u30bf\u578b\u306b\u5909\u63db\u3059\u308b\n#\u6570\u5024\u5316(Sex)\nfor df in train_test:\n    df['Sex'] = (df['Sex']=='female').astype(int) # female -> 1, male -> 0\n    \n#\u6570\u5024\u5316\uff08Embarked\uff09\u51fa\u73fe\u983b\u5ea6\u9806\u306b 0, 1, 2 \u3068\u3059\u308b\nfor df in train_test:\n    df['Embarked'] = df['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})","5595fdb3":"from sklearn.svm import SVC","aa0e8e0d":"#\u6a19\u6e96\u5316\uff08\u6a19\u6e96\u5316\u3057\u3066\u3044\u306a\u3044\u30c7\u30fc\u30bf\u3082\u88cf\u3067submit\u3057\u305f\uff09\u3057\u305f\u3046\u3048\u3067\u3001SVM\u3092\u7528\u3044\u3066\u4e88\u6e2c\u3092\u884c\u3046\u3002\nX_train = train_test[0].copy()\nX_test  = train_test[1].copy()\n\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train_std = scaler.transform(X_train)\nX_test_std = scaler.transform(X_test)\n\nmodel = SVC(kernel='linear', random_state=123, gamma=0.05, C=1.0)\nmodel.fit(X_train_std, y_train)\ny_pred = model.predict(X_test_std)\n\nsubmission_scaled = pd.DataFrame({\n        \"PassengerId\": passengerid,\n        \"Survived\": y_pred\n    })\ndisplay(submission_scaled.head())\nsubmission_scaled.to_csv('.\/submission_scaled.csv', index=False)","8b509bf2":"#\u4e3b\u306a\u79f0\u53f7\u306f\u6b21\u306e4\u3064[\"Mr.\",\"Miss.\",\"Mrs.\",\"Master.\"]\u3002\u203b[\"Rev.\",\"Dr.\"]\u306f\u7701\u7565\n#\u3053\u308c\u3089\u306e\u79f0\u53f7\u306b\u305d\u308c\u305e\u308c1,2,3,4\u3092\u5272\u308a\u632f\u308b\u3002\u305d\u306e\u4ed6\u306f0\u3068\u3059\u308b\u3002\n#import re \u2190\u4f7f\u308f\u306a\u304b\u3063\u305f\n\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain[\"Title\"] = 0\ntest  = pd.read_csv('..\/input\/titanic\/test.csv')\ntest[\"Title\"] = 0\n\ny_train = train['Survived'].copy()\ntrain.drop('Survived', axis=1, inplace=True)\n\n# \u51e6\u7406\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u307e\u3068\u3081\u3066\u304a\u304f\ntrain_test = (train, test)\n\n# \u4e0d\u8981\u5217\u306e\u524a\u9664\n# test \u30c7\u30fc\u30bf\u306e PassengerId \u306f Submit \u306b\u5fc5\u8981\u306b\u306a\u308b\u305f\u3081\u53d6\u3063\u3066\u304a\u304f\npassengerid = train_test[1]['PassengerId']\nfor df in train_test:\n    df.drop(['PassengerId', 'Ticket'], axis=1, inplace=True)","72311ba4":"title =[\"Mr.\",\"Miss.\",\"Mrs.\",\"Master.\"]\n#n = len(train_test[1][\"Name\"])\n\nfor df in train_test:\n    for i in range(len(df[\"Age\"])):\n        for j in title:\n            if j in df[\"Name\"][i]:\n                df[\"Title\"][i] = j","44b850c9":"pd.crosstab(index=train_test[0]['Title'],columns=train_test[0]['Sex'])","79a150f9":"#\u6570\u5024\u5316\uff08Title\uff09\u51fa\u73fe\u983b\u5ea6\u9806\u306b[\"Mr.\",\"Miss.\",\"Mrs.\",\"Master.\"]= 4, 3, 2, 1 \u3068\u3059\u308b\nfor df in train_test:\n    df['Title'] = df['Title'].map({\"Mr.\": 4, 'Miss.': 3, 'Mrs.': 2, 'Master.': 1,0:0})\n\n# \u4e0d\u8981\u5217(Name)\u306e\u524a\u9664\nfor df in train_test:\n    df.drop(['Name'], axis=1, inplace=True)","c9797bdd":"pd.crosstab(index=train_test[0]['Title'],columns=train_test[0]['Sex'])","36323b21":"#\u6b20\u640d\u5024\u306e\u88dc\u5b8c\u3000\u2192\u3000\u4ee3\u8868\u5024\uff08\u5e73\u5747\u5024\uff09\u3067\u88dc\u5b8c\u3059\u308b\nfor df in train_test:\n    df['Age'].fillna(df['Age'].mean(), inplace=True)\n    df['Fare'].fillna(df['Fare'].mean(), inplace=True)\n\n#\u6b20\u640d\u5024\u306e\u88dc\u5b8c\u3000\u2192\u3000\u4ee3\u8868\u5024\uff08\u6700\u983b\u5024\uff09\u3067\u88dc\u5b8c\u3059\u308b\nfor df in train_test:\n    df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)\n\n#\u6b20\u640d\u5024\u304b\u3089\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3092\u751f\u6210\u3059\u308bcabin\u306e\u30c7\u30fc\u30bf\u3092\u524a\u9664\u305b\u305a\u306b0\u304b1\u304b\u3067\u6b8b\u3059\u3001\u300c\u6b20\u640d\u3057\u3066\u3044\u308b\u3053\u3068\u300d\u81ea\u4f53\u304c\u60c5\u5831\u304b\u3082\u77e5\u308c\u306a\u3044\u306e\u3067\nfor df in train_test:\n    df['Cabin'] = df['Cabin'].isnull().astype(int)\n    \n#\u30e2\u30c7\u30eb\u304c\u53d7\u3051\u4ed8\u3051\u308b\u30c7\u30fc\u30bf\u578b\u306b\u5909\u63db\u3059\u308b\n#\u6570\u5024\u5316(Sex)\nfor df in train_test:\n    df['Sex'] = (df['Sex']=='female').astype(int) # female -> 1, male -> 0\n    \n#\u6570\u5024\u5316\uff08Embarked\uff09\u51fa\u73fe\u983b\u5ea6\u9806\u306b 0, 1, 2 \u3068\u3059\u308b\nfor df in train_test:\n    df['Embarked'] = df['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})","4218f94f":"#\u6a19\u6e96\u5316\u3057\u305f\u3046\u3048\u3067\u3001SVM\u3092\u7528\u3044\u3066\u4e88\u6e2c\u3092\u884c\u3046\u3002\nX_train = train_test[0].copy()\nX_test  = train_test[1].copy()\n\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train_std = scaler.transform(X_train)\nX_test_std = scaler.transform(X_test)\n\nmodel = SVC(kernel='linear', random_state=123, gamma=0.05, C=1.0)\nmodel.fit(X_train_std, y_train)\ny_pred = model.predict(X_test_std)\n\nsubmission_scaled = pd.DataFrame({\n        \"PassengerId\": passengerid,\n        \"Survived\": y_pred\n    })\ndisplay(submission_scaled.head())\nsubmission_scaled.to_csv('.\/submission_title_scaled.csv', index=False)","d28d0ad7":"#print(plt.hist(train_test[0][\"Age\"],bins = 16,range=(0, 80)))\n\nbin_edges = [0,15,50,float(\"inf\")]\nbinned_age = pd.cut(train_test[0][\"Age\"],bin_edges,labels=False)\n\n#Age\u306e\u30c7\u30fc\u30bf\u3092\u300c\u5b50\u4f9b\u3001\u8001\u4eba\u3001\u305d\u306e\u4ed6\u300d\u306e3\u5024\u306b\u5206\u985e\u3059\u308b\nfor df in train_test:\n    df['Age'] = pd.cut(df[\"Age\"],bin_edges,labels=False)","d6b679b0":"#Age\u306e\u30c7\u30fc\u30bf\u304c3\u5024\u306bbinning\u3055\u308c\u305f\u72b6\u614b\u3067\u3001SVM\uff08\u6a19\u6e96\u5316\uff09\u3092\u7528\u3044\u3066\u4e88\u6e2c\u3092\u884c\u3046\u3002\nX_train = train_test[0].copy()\nX_test  = train_test[1].copy()\n\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train_std = scaler.transform(X_train)\nX_test_std = scaler.transform(X_test)\n\nmodel = SVC(kernel='linear', random_state=123, gamma=0.05, C=1.0)\nmodel.fit(X_train_std, y_train)\ny_pred = model.predict(X_test_std)\n\nsubmission_scaled = pd.DataFrame({\n        \"PassengerId\": passengerid,\n        \"Survived\": y_pred\n    })\ndisplay(submission_scaled.head())\nsubmission_scaled.to_csv('.\/submission_title_Agebin_scaled.csv', index=False)","f8b1561f":"#\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092target encording\u7528\u306efold\u306b\u5206\u5272\u3057\u3066target encording\u3092\u9069\u7528\u3059\u308b\u3002\nfrom sklearn.model_selection import KFold\n\n\ncat_cols = [\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Cabin\",\"Embarked\",\"Title\"]\n\n# \u5909\u6570\u3092\u30eb\u30fc\u30d7\u3057\u3066target encoding\nfor df in train_test:\n    for c in cat_cols:\n        # \u5b66\u7fd2\u30c7\u30fc\u30bf\u5168\u4f53\u3067\u5404\u30ab\u30c6\u30b4\u30ea\u306b\u304a\u3051\u308btarget\u306e\u5e73\u5747\u3092\u8a08\u7b97\n        data_tmp = pd.DataFrame({c: df[c], 'target': train_y})\n        target_mean = data_tmp.groupby(c)['target'].mean()\n        # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30ab\u30c6\u30b4\u30ea\u3092\u7f6e\u63db\n        df[c] = df[c].map(target_mean)\n        # \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5909\u63db\u5f8c\u306e\u5024\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u6e96\u5099\n        tmp = np.repeat(np.nan, df.shape[0])\n        \n        # \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5206\u5272\n        kf = KFold(n_splits=4, shuffle=True, random_state=72)\n        for idx_1, idx_2 in kf.split(df):\n            # out-of-fold\u3067\u5404\u30ab\u30c6\u30b4\u30ea\u306b\u304a\u3051\u308b\u76ee\u7684\u5909\u6570\u306e\u5e73\u5747\u3092\u8a08\u7b97\n            target_mean = data_tmp.iloc[idx_1].groupby(c)['target'].mean()\n            # \u5909\u63db\u5f8c\u306e\u5024\u3092\u4e00\u6642\u914d\u5217\u306b\u683c\u7d0d\n            tmp[idx_2] = df[c].iloc[idx_2].map(target_mean)\n\n        # \u5909\u63db\u5f8c\u306e\u30c7\u30fc\u30bf\u3067\u5143\u306e\u5909\u6570\u3092\u7f6e\u63db\n        df[c] = tmp\n","b1b2379e":"train_x.head()","fa587f95":"train_x = train_test[0].drop([\"Parch\"],axis = 1)\nmodel = SVC(kernel='linear', random_state=123, gamma=0.05, C=1.0)\nmodel.fit(train_x, y_train)\n\ntest_x = train_test[1].drop([\"Parch\"],axis = 1)\ny_pred = model.predict(test_x)\n\nsubmission_scaled = pd.DataFrame({\n        \"PassengerId\": passengerid,\n        \"Survived\": y_pred\n    })\ndisplay(submission_scaled.head())\nsubmission_scaled.to_csv('.\/submission_title_Agebin_target_scaled.csv', index=False)","2020c16d":"train_test[0].isnull().sum()","07a1f566":"train_test[0].head()","a1b255ac":"\u5bbf\u984c\uff11\uff0e\n\u79f0\u53f7\u3092\u7279\u5fb4\u91cf\u306b\u52a0\u3048\u305f\u3068\u3053\u308d\u4e88\u6e2c\uff08submission_title_scaled.csv\uff09\u306e\u7cbe\u5ea6\u306f0.77511\u3068\u306a\u3063\u305f\u3002\n\n\u3053\u3053\u307e\u3067\u306e\u7cbe\u5ea6\u7d50\u679c\u306f\u6b21\u306e\u3068\u304a\u308a\n\n* \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\uff1a0.76555\n* \u30c6\u30ad\u30b9\u30c8\u306e\u624b\u6cd5\n* \u3000\u3000xgboost\uff1a0.73684\n* \u3000\u3000xgboost\uff08\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\uff09\u3068\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\uff1a0.77511\n* \u8b1b\u7fa9(20200618)\u306e\u624b\u6cd5\n* \u3000\u3000SVM\uff1a\u6a19\u6e96\u5316\u306a\u30570.76555\u3001\u6a19\u6e96\u5316\u3042\u308a\uff1a0.76555\n* \u8ab2\u984c\u3068\u3057\u3066\u65b0\u305f\u306b\u3084\u3063\u305f\u3053\u3068\n* \u3000\u3000SVM\u6a19\u6e96\u5316\u3042\u308a\uff08\u7279\u5fb4\u91cf\uff1a\u79f0\u53f7\u3092\u8ffd\u52a0\uff09\uff1a0.77511","65a574f7":"# \u3000\uff12\uff0e\uff11\u3000\u7279\u5fb4\u91cf\u306e\u4f5c\u6210\n* \u4e0d\u8981\u5217\u3092\u524a\u9664\n* \u6b20\u640d\u5024\u306e\u88dc\u5b8c\n* \u3000\u4ee3\u8868\u5024\uff08\u5e73\u5747\u5024\uff09\u3067\u88dc\u5b8c\u3059\u308b\n* \u3000\u4ee3\u8868\u5024\uff08\u6700\u983b\u5024\uff09\u3067\u88dc\u5b8c\u3059\u308b\n* \u3000\u6b20\u640d\u5024\u304b\u3089\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b\n* \u30e2\u30c7\u30eb\u304c\u53d7\u3051\u4ed8\u3051\u308b\u30c7\u30fc\u30bf\u578b\u306b\u5909\u63db\u3059\u308b\n* \u3000\u6570\u5024\u5316\n* \u6027\u80fd\u304c\u5411\u4e0a\u3059\u308b\u3088\u3046\u5909\u63db\u3059\u308b\n* \u3000\u6a19\u6e96\u5316","a14a0344":"\u76f4\u4e0b\u306e\u30bb\u30eb\u306f20200619\u306e\u8b1b\u7fa9\u5185\u5bb9\u3068\u540c\u3058","87f1e72c":"# **\u3053\u306e\u30ce\u30fc\u30c8\u306b\u3064\u3044\u3066**\n\uff11\uff0e\u30c6\u30ad\u30b9\u30c8\uff08kaggle\u3067\u52dd\u3064\u30c7\u30fc\u30bf\u5206\u6790\uff09p40~51\u306e\u5185\u5bb9\u3092\u30d5\u30a9\u30ed\u30fc\u3059\u308b\u3002\n\n\uff12\uff0e\u7279\u5fb4\u91cf\u3092\u5de5\u592b\u3057\u3066\u7cbe\u5ea6\u3092\u5411\u4e0a\u3055\u305b\u308b\u3002\n\u3000SVM\u306e\u67a0\u306e\u4e2d\u3067\u7279\u5fb4\u91cf\u3092\u5de5\u592b\u3057\u3066\u7cbe\u5ea6\u3092\u5411\u4e0a\u3055\u305b\u308b\u3053\u3068\u3092\u8003\u3048\u308b\n\u3000\uff12\uff0e\uff11\u3000Name\u304b\u3089\u8981\u7d20\u3092\u62bd\u51fa\u3059\u308b\n\u3000\uff12\uff0e\uff12\u3000\u305d\u306e\u4ed6","763f214e":"# \uff11\uff0e\u30c6\u30ad\u30b9\u30c8\uff08kaggle\u3067\u52dd\u3064\u30c7\u30fc\u30bf\u5206\u6790\uff09p40~51\u306e\u5185\u5bb9\u3092\u30d5\u30a9\u30ed\u30fc\u3059\u308b\n\n* \u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b\u3002\n* GBDT\uff08Gradient Boosting Decision Trees\uff09\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e1\u3064\u3067\u3042\u308bxgboost\u3092\u7528\u3044\u3066\u3001\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002\n* \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308a\u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u3059\u308b\u3002\n* \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3046\u3002\n* xgboost\u306b\u3088\u308b\u4e88\u6e2c\u5024\u3092\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306b\u3088\u308b\u4e88\u6e2c\u5024\u3068\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u3057\u3001\u7cbe\u5ea6\u5411\u4e0a\u3092\u8a66\u307f\u308b\u3002\n","33c88ba9":"# \uff12\uff0e\u7279\u5fb4\u91cf\u3092\u5de5\u592b\u3057\u3066\u7cbe\u5ea6\u3092\u5411\u4e0a\u3055\u305b\u308b\u3002\n* \u500b\u5225\u306e\u5de5\u592b\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u4e88\u6e2c\u7cbe\u5ea6\u3092\u5411\u4e0a\u3055\u305b\u308b\u3002\uff08\u4eca\u56de\u306fSVM\u306e\u67a0\u306e\u7bc4\u56f2\u5185\u3068\u3059\u308b\uff09","bf8697c0":"\u3053\u3053\u307e\u3067\u3067\u306e\u7cbe\u5ea6\u7d50\u679c\u306f\u6b21\u306e\u3068\u304a\u308a\n* \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\uff1a0.76555\n* xgboost\uff1a0.73684\n* xgboost\uff08\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\uff09\u3068\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\uff1a0.77511\n* SVM\uff1a\u6a19\u6e96\u5316\u306a\u30570.76555\u3001\u6a19\u6e96\u5316\u3042\u308a\uff1a0.76555\u3000\u2190\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3068\u540c\u3058\u3060\u304c\u3001\u3001\u3001\n\n\u5bbf\u984c1.Name\u304b\u3089\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b\u3002\u2190\u65b0\u3057\u304f\u3084\u3063\u305f\u3053\u3068\n* Name\u304b\u3089\u79f0\u53f7\u3092\u62bd\u51fa\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\n","ae143d64":"* xgboost\u3068\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306b\u57fa\u3065\u304f\u4e88\u6e2c\u5024\"submission_second.csv\"\u306e\u3053\u306e\u6642\u70b9\u3067\u306e\u7cbe\u5ea6\u306f0.77511\u3060\u3063\u305f\u3002\n* \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u5024\uff08gender_submission.csv\uff09 \u306f test.csv \u306e Sex \u5217\u306b\u3064\u3044\u3066 'male' -> 0 (dead), 'female' = 1 (alive) \u3068\u3057\u305f\u3082\u306e\uff0e\n  \u3053\u308c\u3092\u30b5\u30d6\u30df\u30c3\u30c8\u3059\u308b\u3068 Accuracy = 0.76555 \u3068\u306a\u308b\uff0e","44a00a52":"# \u307b\u304b\u306e\u7279\u5fb4\u91cf\u4f5c\u6210\u624b\u6cd5\u3092\u8a66\u3057\u3066\uff0cAccuracy \u3092\u5411\u4e0a\u3055\u305b\u308b\u3002\n# \u305d\u306e1\n* Age\u306e\u30c7\u30fc\u30bf\u3092\u300c\u5b50\u4f9b\u3001\u8001\u4eba\u3001\u305d\u306e\u4ed6\u300d\u306e3\u5024\u306b\u5206\u985e\u3059\u308b\u3002\n* \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304b\u3089\u3001\u5b50\u4f9b\uff1a15\u6b73\u4ee5\u4e0b\u3001\u8001\u4eba\uff1a50\u6b73\u8d85\u3001\u305d\u306e\u4ed6\uff1a15\u6b73\u8d8550\u6b73\u4ee5\u4e0b\u3068\u3057\u305f\u3002\n* \u7d50\u8ad6\u3001Age\u306e\u30c7\u30fc\u30bf\u3092\u4e0a\u8a18\u306e\u3068\u304a\u308abinning\u3057\u305f\u5834\u5408\u306e\u7cbe\u5ea6\u3082 0.77511\u3067\u3042\u308a\u3001binning\u524d\u3068\u5909\u308f\u3089\u306a\u304b\u3063\u305f\u3002\n","c434f54c":"# \u305d\u306e2\n* \u6027\u5225\u3084\u79f0\u53f7\u3001P-Class\u7b49\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u304c\u5f71\u97ff\u304c\u5927\u304d\u3044\u3068\u601d\u308f\u308c\u308b\u3002\u305d\u3053\u3067Target encording\u3092\u7528\u3044\u3066\u3001\u3088\u308a\u52b9\u679c\u7684\u306a\u7279\u5fb4\u91cf\u306b\u5909\u63db\u3067\u304d\u306a\u3044\u304b\u8a66\u307f\u308b\u3002\n \u3000\u2192\u7d50\u679c\u306f0.76555\u3068\u5fae\u5999\u3060\u3063\u305f\n* Target encording\u3067test\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3057\u306a\u304b\u3063\u305f\u305b\u3044\uff1f\u3000SVM\u306f\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u3044\u306a\u3044"}}