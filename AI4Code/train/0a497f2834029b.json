{"cell_type":{"3a590edf":"code","5b7b94a9":"code","a08f0175":"code","489bfc7e":"code","15df44f7":"code","017ff8a4":"code","8ca9f788":"code","aa400900":"code","91478131":"code","732c86bd":"code","f53f52d5":"code","e5e2933c":"code","394351d3":"markdown"},"source":{"3a590edf":"from numpy.linalg import norm\nimport numpy as np\nimport math\ndef dot_norm(a, b):\n    return a.dot(b)\/(norm(a)*norm(b))","5b7b94a9":"import gensim.models.keyedvectors as word2vec\nword2vecDict = word2vec.KeyedVectors.load_word2vec_format(\"..\/input\/googlenewsvectorsnegative300\/GoogleNews-vectors-negative300.bin\", binary=True)","a08f0175":"print(dot_norm(word2vecDict['king'] - word2vecDict['man'], word2vecDict['queen'] - word2vecDict['woman']))\nprint(dot_norm(word2vecDict['king'] - word2vecDict['queen'], word2vecDict['man'] - word2vecDict['woman']))","489bfc7e":"\nAe_1=  word2vecDict['king'] - word2vecDict['boy'] \nAe_2 =  word2vecDict['queen'] - word2vecDict['girl'] \n\nBe_1 =  word2vecDict['king'] - word2vecDict['queen'] \nBe_2 =  word2vecDict['boy'] - word2vecDict['girl'] \n ","15df44f7":"X1  = word2vecDict['queen'] - word2vecDict['girl'] + word2vecDict['boy']\nX2  = word2vecDict['boy'] - word2vecDict['girl'] +  word2vecDict['queen']","017ff8a4":"print(dot_norm(word2vecDict['king'], X1))\nprint(dot_norm(word2vecDict['king'], X2))","8ca9f788":"def dot_norm(a, b):\n    return a.dot(b)\/(norm(a)*norm(b))","aa400900":"print(dot_norm(Ae_1,Ae_2))\nprint(dot_norm(Be_1,Be_2))","91478131":"def dic_top_collection(analogy_dict, top_selection, score, search_b, search_c, search_d):\n    \n        for val in analogy_dict.keys():\n            val = val.replace('+','').replace('-','').split()\n            if (val[0] == search_b and val[2] == search_d) or (val[0] == search_d and val[2] == search_b):\n                return 's'           \n            \n        g_key = \"{search_c} - {search_d} + {search_b}\".format(search_c = search_c, search_d = search_d, search_b =search_b)\n\n        if len(analogy_dict) < top_selection:\n            analogy_dict[g_key] = score\n            return analogy_dict\n\n        key_min = min(analogy_dict.keys(), key=(lambda k: analogy_dict[k]))\n\n        if g_key in analogy_dict:\n            if score > analogy_dict[g_key]:\n                analogy_dict[g_key] = score\n                return analogy_dict\n            return analogy_dict\n        elif score > analogy_dict[key_min]:\n            analogy_dict.pop(key_min)\n            analogy_dict[g_key] = score\n        return analogy_dict","732c86bd":"analogy_dict = {'woman - teenager + boy': 0.41144073, 'woman - man + boy': 0.6668557, 'boy - man + woman': 0.78236943}","f53f52d5":"dot_norm(word2vecDict['girl'] , word2vecDict['woman'] - word2vecDict['man'] + word2vecDict['boy'] )","e5e2933c":"dot_norm(word2vecDict['girl'] , word2vecDict['boy'] - word2vecDict['man'] + word2vecDict['woman'] )","394351d3":"https:\/\/math.stackexchange.com\/questions\/2581097\/taking-the-dot-product-of-two-normalized-vectors-unit-vectors-vs-the-dot-produ\/2581181\n\nhttps:\/\/towardsdatascience.com\/linear-algebra-essentials-with-numpy-part-1-af4a867ac5ca\n\n"}}