{"cell_type":{"26d943db":"code","84baa723":"code","cf6f1317":"code","e0465bca":"code","7274d423":"code","ef50a8d7":"code","44434fdc":"code","2d8b1f6a":"code","60033fab":"code","be21f3cc":"markdown","3ea2e974":"markdown","e66ba0c2":"markdown","e4d71571":"markdown"},"source":{"26d943db":"import numpy as np \nimport pandas as pd \nimport os\nprint(os.listdir(\"..\/input\"))","84baa723":"from __future__ import print_function\nimport keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras import backend as K","cf6f1317":"batch_size = 128\nnum_classes = 10\nepochs = 12","e0465bca":"img_rows, img_cols = 28, 28","7274d423":"(x_train, y_train), (x_test, y_test) = mnist.load_data()","ef50a8d7":"if K.image_data_format() == 'channels_first':\n    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)\n    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)\n    input_shape = (1, img_rows, img_cols)\nelse:\n    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\n    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\n    input_shape = (img_rows, img_cols, 1)\n\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train \/= 255\nx_test \/= 255\nprint('x_train shape:', x_train.shape)\nprint(x_train.shape[0], 'train samples')\nprint(x_test.shape[0], 'test samples')","44434fdc":"y_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)","2d8b1f6a":"model = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=input_shape))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(x_test, y_test))","60033fab":"score = model.evaluate(x_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","be21f3cc":"# Train a simple convnet on the MNIST dataset\n\nreference: https:\/\/github.com\/keras-team\/keras\/blob\/master\/examples\/mnist_cnn.py","3ea2e974":"# input image dimensions","e66ba0c2":"# convert class vectors to binary class matrices","e4d71571":"# the data, split between train and test sets"}}