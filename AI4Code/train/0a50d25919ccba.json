{"cell_type":{"76616632":"code","8735cfef":"code","b0dd8842":"code","0c03af2a":"code","ca69a06a":"code","386068cc":"code","2c2b7ebf":"code","542a7a16":"code","050b747b":"code","b99cb3fc":"code","e945e6e9":"code","7044b9eb":"code","4e31797e":"code","f73162c1":"code","c7f3010d":"code","a3d00802":"code","732e1a80":"code","4d54b5ff":"code","c080c305":"code","065ec121":"code","8bd1d780":"code","66f54d55":"code","f17e3770":"code","da00126f":"code","3cf0bf53":"code","d2030611":"code","523074cd":"code","17e1919d":"code","c130a72e":"markdown","1e1da34d":"markdown","cc641864":"markdown","8e497b40":"markdown","c3d962ca":"markdown","cb5e02a3":"markdown","bce93f8f":"markdown","29f43e64":"markdown","4f320756":"markdown","59e3d46a":"markdown","c4a6205d":"markdown","cc809e90":"markdown","28043e6d":"markdown"},"source":{"76616632":"#from google.colab import files\nfrom IPython.display import clear_output\nimport os\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport tensorflow.keras.layers as layers\nimport tensorflow.keras.callbacks as callbacks\nimport itertools\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.utils import shuffle\n\nRANDOM_STATE = 56\nEPOCHS = 16\nBATCH_SIZE = 512\nCLIP = 16.","8735cfef":"#files.upload()\n#!pip install -q kaggle\n#!mkdir -p ~\/.kaggle\n#!cp kaggle.json ~\/.kaggle\/\n#!ls ~\/.kaggle\n#!chmod 600 \/root\/.kaggle\/kaggle.json\n#!kaggle kernels list \u2014 user `franckepeixoto` \u2014 sort-by dateRun\n#!kaggle competitions download -c porto-seguro-safe-driver-prediction\n#!unzip -q  train.csv.zip -d .\n#!unzip -q  test.csv.zip -d .\n#!rm -d sample_data\n#!rm *.zip\n#!rm .\/kaggle*\nclear_output()\n!ls ..\/input\/porto-seguro-safe-driver-prediction\/","b0dd8842":"train = pd.read_csv(\"..\/input\/porto-seguro-safe-driver-prediction\/train.csv\",header=0)#,index_col=0)\ntest  = pd.read_csv(\"..\/input\/porto-seguro-safe-driver-prediction\/test.csv\",header=0)#,index_col=0)","0c03af2a":"train.describe()","ca69a06a":"train.info()","386068cc":"for c in train.columns:\n  train[c].replace(-1,train[c].median(),inplace=True)\nfor c in test.columns:\n  test[c].replace(-1,test[c].median(),inplace=True)","2c2b7ebf":"def heat_map(data):\n  data_corr = data.copy()\n  data_corr.pop(\"id\")\n  data_corr = data_corr.reset_index(drop=True)\n  corr =data_corr.corr(method='pearson')\n  corr = corr[corr>=.01]\n  plt.figure(figsize=(20,25))\n  sns.heatmap(corr,annot=True,cmap=\"PuBuGn\",fmt='.1f',linewidths=1)\nheat_map(train)","542a7a16":"columns = list(train.columns)\ncolumns = [c  for c in  columns   if c.find('calc_')>-1]\ntrain = train.drop(columns, axis=1)\ntest = test.drop(columns, axis=1)\nprint(columns)","050b747b":"heat_map(train)","b99cb3fc":"columns = [c for c in train.columns if c.find(\"cat\")>-1]\nfor col in columns:\n    g = sns.catplot(x=col, hue=\"target\", col=\"target\", data=train, kind=\"count\")\n    g.add_legend()","e945e6e9":"for col in columns:\n    train = pd.concat([train, pd.get_dummies(pd.Series(train[col]))], axis=1)\n    train = train.drop([col], axis=1)\n    test = pd.concat([test, pd.get_dummies(pd.Series(test[col]))], axis=1)\n    test = test.drop([col], axis=1)\n\nclear_output()","7044b9eb":"xtrain = train.copy()\nclaim = xtrain[xtrain.target==1]\nnot_claim = xtrain[xtrain.target==0]\n\nprint(\"Total claims:\\t\\t{0}\".format(claim.shape[0]))\nprint(\"Total no claims:\\t{0}\".format(not_claim.shape[0]))","4e31797e":"claim_sample = claim.sample(random_state=RANDOM_STATE, frac=.05)\nclaim_sample.head(2) ","f73162c1":"data_shuffle = pd.concat([not_claim,claim]) \ndata_shuffle = shuffle(data_shuffle,random_state=RANDOM_STATE)\ndata_shuffle = data_shuffle.drop(columns=['id'])\ndata_shuffle.head(2)","c7f3010d":"split_data = int(len(data_shuffle) * .8)\n\ntrain_set = data_shuffle[:split_data]\ntrain_labels = train_set.pop(\"target\")\n\ntest_set = data_shuffle[split_data:]\ntest_labels = test_set.pop(\"target\")\n\nprint(\"test\",test_set.shape)\nprint(\"test_labels\",test_labels.shape)\nprint(\"train_set\",train_set.shape)\nprint(\"train_labels\",train_labels.shape)","a3d00802":"scaler = StandardScaler()\ntrain_set = scaler.fit_transform(train_set) #normalizar somente os dados de treinamento.\ntest_set = scaler.transform(test_set)","732e1a80":"train_set = np.clip(train_set, CLIP*-1,CLIP)\ntest_set = np.clip(test_set, CLIP*-1, CLIP)\ntrain_set.shape,test_set.shape","4d54b5ff":"weight_not_claim = 1.0 \/ data_shuffle.target.value_counts()[0]\nweight_claim = 1.0 \/ data_shuffle.target.value_counts()[1]\nweights ={ 0:weight_not_claim, 1:weight_claim}","c080c305":"metrics=[]\nmetrics.append(keras.metrics.TruePositives(name=\"truePositive\"))\nmetrics.append(keras.metrics.TrueNegatives(name=\"trueNegative\"))\nmetrics.append(keras.metrics.FalsePositives(name=\"falsePositive\"))\nmetrics.append(keras.metrics.FalseNegatives(name=\"falseNegative\"))\nmetrics.append(keras.metrics.Precision(name=\"precision\"))\nmetrics.append(keras.metrics.Recall(name=\"recall\"))\nmetrics.append(keras.metrics.AUC(name=\"auc\"))","065ec121":"model = keras.Sequential(name=\"porto_seguro\")\nunits = int(train_set.shape[1])\ninput_shape = (train_set.shape[-1],)\n\nmodel.add(layers.Dense(units, activation=keras.activations.relu, input_shape=input_shape))\nmodel.add(layers.Dropout(0.4))\nmodel.add(layers.Dense(int(units), activation=keras.activations.relu))\nmodel.add(layers.Dropout(0.4))\nmodel.add(layers.Dense(1,activation=keras.activations.sigmoid))\n\nmodel.compile(optimizer=keras.optimizers.Adam(learning_rate=1e-3),\n              loss=keras.losses.BinaryCrossentropy(),\n              metrics=metrics)\n\nmodel.summary()","8bd1d780":"early_stopping = callbacks.EarlyStopping(monitor='val_auc',\n                                         verbose=1,\n                                         patience=5,\n                                         mode='max',\n                                         restore_best_weights=True)\n","66f54d55":"fit_results = model.fit(train_set,\n                        train_labels,\n                        callbacks=[early_stopping],\n                        validation_data=(test_set,test_labels),\n                        class_weight=weights,\n                        epochs=EPOCHS,\n                        batch_size=BATCH_SIZE)\n","f17e3770":"\nmpl.rcParams['figure.figsize'] = (12, 6)\nnames = ['loss', 'auc', 'precision', 'recall']\nhistory = fit_results.history\nepoch = fit_results.epoch\n\nfor n, _ in enumerate(names):\n  name = str(_).capitalize()\n  plt.subplot(2, 2, n+1)\n  plt.plot(epoch,history[_],label='Train')\n  plt.plot(epoch,history['val_'+_],linestyle=\"--\",label=\"Val\")\n  plt.xlabel(\"Epoch\")\n  plt.ylabel(name)\n  \n  plt.legend()\n\n\n\n","da00126f":"test_set.shape,test_labels.shape","3cf0bf53":"submit = test.pop(\"id\")\ntest_set = scaler.fit_transform(test)\ntest_set = np.clip(test_set, CLIP*-1, CLIP)\npredict = model.predict(test_set)","d2030611":"predictions = []\nfor i in predict.tolist():\n    predictions.append(round(i[0]))\n\ntest.shape,len(predictions)","523074cd":"submission = pd.DataFrame({\"id\" : submit, \"target\" : predictions})\nsubmission.to_csv(\"submission.csv\", index=False)\n\n#!kaggle competitions submit -c porto-seguro-safe-driver-prediction -f submission.csv -m \" tentativa \"\n#files.download('submission.csv') \n#!rm  submission.csv\nsubmission.info()","17e1919d":"submission.head()","c130a72e":"### Dependencies","1e1da34d":"### Train and Evaluate\n\nAs metricas adicionadas abaixo, ser\u00e1 crucial para endentermos o desempenho de nosso modelo.","cc641864":"### Downsampling\nVamos preparar o terreno para o tensorflow atual.\n\nA v\u00e1riavel **weights** permite especificar o peso, levando em conta sua frequencia.","8e497b40":"### Porto Seguro\u2019s Safe Driver Prediction | Action\n*Objetivo:*  prever pedido de indeniza\u00e7\u00e3o de ap\u00f3lice.\n*prefixo* \n* **bin**  Bin\u00e1rio.\n* **cat**  Categ\u00f3rico.\n\n**Colunas com valores -1** = Indicam falta  de observa\u00e7\u00e3o.\n\n**target** Informa se  teve pedido ou n\u00e3o.  (1 ou 0)\n\n*   https:\/\/www.kaggle.com\/c\/porto-seguro-safe-driver-prediction\/data\n\n\n\n\n","c3d962ca":"### Visualize \/ Metrics \nVerifica\u00e7\u00e3o de desempenho de nosso modelo.","cb5e02a3":"### Amostra aleat\u00f3ria de pedido de indeniza\u00e7\u00e3o\nPercentual da amostra: **0,05%**   ","bce93f8f":"### Split \/ Normalize\nAo treinar um modelo com colunas n\u00famericas, o processo de normaliza\u00e7\u00e3o \u00e9 indispensavel. \n\nEsse procedimento ajuda na preven\u00e7\u00e3o de exploding durante o trainamento.","29f43e64":"#### Usando clip()\nGarantir que todos os valores fiquem dentro de um range especifico.\n\nIsso \u00e9 usual caso tenhamos algum outliers ap\u00f3s nossa normaliza\u00e7\u00e3o.","4f320756":"### Data","59e3d46a":"#### Cat vs Target","c4a6205d":"##### Kaggle setup.","cc809e90":"### Correlation Matrix (heatmap)","28043e6d":"### Normalize data"}}