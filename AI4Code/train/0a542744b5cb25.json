{"cell_type":{"411286d6":"code","64ce7e8d":"code","5e422f63":"code","85b6da4d":"code","c5e77b02":"code","bc4439ea":"code","1987ebb2":"code","9322659b":"code","e3f99176":"code","e34fc9c0":"code","80edd4d4":"code","b1be691a":"code","d1709a60":"code","a456ea27":"code","1ae3915b":"code","67b9a0c6":"code","2369a3a4":"code","24fe7b56":"code","acc35fbf":"code","21ce1957":"code","72de588c":"code","4a407a10":"code","c6cc64dc":"code","897239f7":"code","7e278016":"code","12d2d47c":"code","e6ef73cc":"code","7107692a":"code","74722d86":"code","990f6314":"code","f63cd44b":"code","2947641f":"code","61cc61c1":"code","90f4cf2b":"code","370ad092":"code","6e3e1976":"code","629b8ea8":"code","c10ea092":"code","64fb9866":"code","b70861f1":"code","da77de38":"code","169111ed":"code","2c152627":"code","fb9effd1":"code","fc6704d1":"code","92ec6029":"code","583aed98":"code","4d102cb7":"code","a3df6d52":"code","975c34c5":"code","faa19e78":"code","034c4fd5":"code","ccfa434b":"code","fd626d56":"code","7d5123e6":"code","7fef1544":"code","fa195b20":"code","79689ff4":"code","7e5acd66":"code","1ffbbc8e":"code","a7ff5738":"code","7733457a":"code","a3549ebc":"code","a67bf6f6":"code","b675d660":"code","526088f4":"code","644b8184":"code","7201d654":"code","9d84df02":"code","1bcfe6d1":"code","09bc2034":"code","279150b1":"code","5c9c19eb":"code","b92c31f9":"code","551eb15c":"code","7cdb5023":"code","a6dc23ed":"code","402dea52":"code","ce2a6161":"code","2ae2f7e8":"code","6095d3f6":"code","de1bcb17":"code","c9a3a440":"code","70a2cbb8":"code","a9f7421c":"code","969d8480":"code","93ec6fdf":"code","d8e0014d":"code","df0f5392":"code","8cad0c7a":"code","f7c1648f":"code","7a54c874":"code","5fd80090":"code","0d290f23":"code","418df798":"code","c0b85178":"code","0af7963f":"code","3aef95a4":"code","1bc3a02d":"code","8a1dcc11":"code","0e76d35b":"code","a8c5b831":"code","2a1f2020":"code","2f19d80c":"markdown","70660e52":"markdown","f52d2a74":"markdown","a16c35c9":"markdown","f6f2c9f1":"markdown","3d1b29a2":"markdown","c6f1ffb0":"markdown","379e34cf":"markdown","aa3ac4c8":"markdown","d54dda79":"markdown","f7b1888b":"markdown","41d0c9fe":"markdown","8987135a":"markdown","8f11ca26":"markdown","9931c21e":"markdown","fdea9fac":"markdown","86ebd465":"markdown","a40c59b1":"markdown","6d05d577":"markdown","cf7d2f67":"markdown","20ab16ef":"markdown","8602ff3b":"markdown","de194458":"markdown","cccc003b":"markdown","3ba4a19e":"markdown","64fe7e88":"markdown","40c4f118":"markdown","801e2f6a":"markdown","5a075f9f":"markdown","30c68089":"markdown","053ef0fb":"markdown","2a552f8a":"markdown"},"source":{"411286d6":"# from IPython.core.display import HTML","64ce7e8d":"# HTML('''<div class=\"flourish-embed flourish-cards\" data-src=\"visualisation\/1810417\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1810417\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","5e422f63":"# HTML('''<div class=\"flourish-embed flourish-cards\" data-src=\"visualisation\/1816605\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1816605\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","85b6da4d":"# get latest version of pip\n# !pip install --upgrade pip\n\n# for calender map\n# ! pip install calmap\n\n# to convert us statenames to state codes\n# ! pip install us\n\n# to get continent name from country name\n# ! pip install pycountry_convert","c5e77b02":"# math opeations\n# import math\n# produce random numbers\n# import random\n# to load json files\nimport json\n# datetime oprations\nfrom datetime import timedelta\n# to get web contents\nfrom urllib.request import urlopen\n\n# for numerical analyiss\nimport numpy as np\n# to store and process data in dataframe\nimport pandas as pd","bc4439ea":"# basic visualization package\nimport matplotlib.pyplot as plt\n# advanced ploting\nimport seaborn as sns\n\n# interactive visualization\nimport plotly.express as px\nimport plotly.graph_objs as go\n# import plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots","1987ebb2":"# for offline ploting\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","9322659b":"# converter\n# from pandas.plotting import register_matplotlib_converters\n# register_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# to USA states details\n# import us","e3f99176":"# color pallette\ncnf, dth, rec, act = '#393e46', '#ff2e63', '#21bf73', '#fe9801' \n\n# seaborn plot style\n# sns.set_style('darkgrid')","e34fc9c0":"# list files\n# ==========\n\n# !ls ..\/input\/corona-virus-report","80edd4d4":"# Full data\n# =========\n\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv')\n# full_table.head()","b1be691a":"# Grouped by day, country\n# =======================\n\nfull_grouped = pd.read_csv('..\/input\/corona-virus-report\/full_grouped.csv')\nfull_grouped['Date'] = pd.to_datetime(full_grouped['Date'])\n# full_grouped.head()","d1709a60":"# Day wise\n# ========\n\nday_wise = pd.read_csv('..\/input\/corona-virus-report\/day_wise.csv')\nday_wise['Date'] = pd.to_datetime(day_wise['Date'])\n# day_wise.head()","a456ea27":"# Country wise\n# ============\n\ncountry_wise = pd.read_csv('..\/input\/corona-virus-report\/country_wise_latest.csv')\ncountry_wise = country_wise.replace('', np.nan).fillna(0)\n# country_wise.head()","1ae3915b":"# Worldometer data\n# ================\n\nworldometer_data = pd.read_csv('..\/input\/corona-virus-report\/worldometer_data.csv')\nworldometer_data = worldometer_data.replace('', np.nan).fillna(0)\n# worldometer_data.head()","67b9a0c6":"temp = day_wise[['Date','Deaths', 'Recovered', 'Active']].tail(1)\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(temp, path=[\"variable\"], values=\"value\", height=225, \n                 color_discrete_sequence=[act, rec, dth])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","2369a3a4":"def plot_map(df, col, pal):\n    df = df[df[col]>0]\n    fig = px.choropleth(df, locations=\"Country\/Region\", locationmode='country names', \n                  color=col, hover_name=\"Country\/Region\", \n                  title=col, hover_data=[col], color_continuous_scale=pal)\n#     fig.update_layout(coloraxis_showscale=False)\n    fig.show()","24fe7b56":"plot_map(country_wise, 'Confirmed', 'matter')","acc35fbf":"plot_map(country_wise, 'Deaths', 'matter')","21ce1957":"plot_map(country_wise, 'Deaths \/ 100 Cases', 'matter')","72de588c":"# Over the time\n\nfig = px.choropleth(full_grouped, locations=\"Country\/Region\", \n                    color=np.log(full_grouped[\"Confirmed\"]),\n                    locationmode='country names', hover_name=\"Country\/Region\", \n                    animation_frame=full_grouped[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    title='Cases over time', color_continuous_scale=px.colors.sequential.matter)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","4a407a10":"def plot_daywise(col, hue):\n    fig = px.bar(day_wise, x=\"Date\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","c6cc64dc":"def plot_daywise_line(col, hue):\n    fig = px.line(day_wise, x=\"Date\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","897239f7":"temp = full_grouped.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case', height=600, width=700,\n             title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","7e278016":"plot_daywise('Confirmed', '#333333')","12d2d47c":"plot_daywise('Active', '#333333')","e6ef73cc":"plot_daywise('New cases', '#333333')","7107692a":"plot_daywise('Deaths', dth)","74722d86":"plot_daywise('New deaths', dth)","990f6314":"plot_daywise('Recovered', rec)","f63cd44b":"plot_daywise('New recovered', rec)","2947641f":"plot_daywise_line('Deaths \/ 100 Cases', dth)","61cc61c1":"plot_daywise_line('Deaths \/ 100 Recovered', dth)","90f4cf2b":"plot_daywise_line('Recovered \/ 100 Cases', rec)","370ad092":"plot_daywise('No. of countries', '#035aa6')","6e3e1976":"temp = day_wise[['Date', 'Recovered', 'Active']]\ntemp = temp.melt(id_vars='Date', value_vars=['Recovered', 'Active'], \n                 var_name='Variable', value_name='Count')\npx.line(temp, x='Date', y='Count', color='Variable')","629b8ea8":"def plot_hbar(df, col, n, hover_data=[]):\n    fig = px.bar(df.sort_values(col).tail(n), \n                 x=col, y=\"Country\/Region\", color='WHO Region',  \n                 text=col, orientation='h', width=700, hover_data=hover_data,\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","c10ea092":"def plot_hbar_wm(col, n, min_pop=1000000, sort='descending'):\n    df = worldometer_data[worldometer_data['Population']>min_pop]\n    df = df.sort_values(col, ascending=True).tail(n)\n    fig = px.bar(df,\n                 x=col, y=\"Country\/Region\", color='WHO Region',  \n                 text=col, orientation='h', width=700, \n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col+' (Only countries with > 1M Pop)', \n                      xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","64fb9866":"plot_hbar(country_wise, 'Confirmed', 15)","b70861f1":"plot_hbar(country_wise, 'Active', 15)","da77de38":"plot_hbar(country_wise, 'New cases', 15)","169111ed":"plot_hbar(country_wise, 'Deaths', 15)","2c152627":"plot_hbar(country_wise, 'New deaths', 15)","fb9effd1":"plot_hbar(country_wise, 'Deaths \/ 100 Cases', 15)","fc6704d1":"plot_hbar(country_wise, 'Recovered', 15)","92ec6029":"plot_hbar(country_wise, 'New recovered', 15)","583aed98":"plot_hbar(country_wise, 'Recovered \/ 100 Cases', 15)","4d102cb7":"plot_hbar(country_wise, '1 week change', 15)","a3df6d52":"plot_hbar(country_wise, '1 week % increase', 15)","975c34c5":"plot_hbar_wm('Tot Cases\/1M pop', 15, 1000000)","faa19e78":"plot_hbar_wm('Deaths\/1M pop', 15, 1000000)","034c4fd5":"plot_hbar_wm('TotalTests', 15, 1000000)","ccfa434b":"plot_hbar_wm('Tests\/1M pop', 15)","fd626d56":"def plot_stacked(col):\n    fig = px.bar(full_grouped, x=\"Date\", y=col, color='Country\/Region', \n                 height=600, title=col, \n                 color_discrete_sequence = px.colors.cyclical.mygbm)\n    fig.update_layout(showlegend=True)\n    fig.show()","7d5123e6":"def plot_line(col):\n    fig = px.line(full_grouped, x=\"Date\", y=col, color='Country\/Region', \n                  height=600, title=col, \n                  color_discrete_sequence = px.colors.cyclical.mygbm)\n    fig.update_layout(showlegend=True)\n    fig.show()","7fef1544":"plot_stacked('Confirmed')","fa195b20":"plot_stacked('Deaths')","79689ff4":"plot_stacked('New cases')","7e5acd66":"plot_stacked('Active')","1ffbbc8e":"plot_line('Confirmed')","a7ff5738":"plot_line('Deaths')","7733457a":"plot_line('New cases')","a3549ebc":"plot_line('Active')","a67bf6f6":"temp = pd.merge(full_grouped[['Date', 'Country\/Region', 'Confirmed', 'Deaths']], \n                day_wise[['Date', 'Confirmed', 'Deaths']], on='Date')\ntemp['% Confirmed'] = round(temp['Confirmed_x']\/temp['Confirmed_y'], 3)*100\ntemp['% Deaths'] = round(temp['Deaths_x']\/temp['Deaths_y'], 3)*100\ntemp.head()","b675d660":"fig = px.bar(temp, x='Date', y='% Confirmed', color='Country\/Region', \n             range_y=(0, 100), title='% of Cases from each country', \n             color_discrete_sequence=px.colors.qualitative.Prism)\nfig.show()","526088f4":"fig = px.bar(temp, x='Date', y='% Deaths', color='Country\/Region', \n             range_y=(0, 100), title='% of Cases from each country', \n             color_discrete_sequence=px.colors.qualitative.Prism)\nfig.show()","644b8184":"def gt_n(n):\n    countries = full_grouped[full_grouped['Confirmed']>n]['Country\/Region'].unique()\n    temp = full_table[full_table['Country\/Region'].isin(countries)]\n    temp = temp.groupby(['Country\/Region', 'Date'])['Confirmed'].sum().reset_index()\n    temp = temp[temp['Confirmed']>n]\n    # print(temp.head())\n\n    min_date = temp.groupby('Country\/Region')['Date'].min().reset_index()\n    min_date.columns = ['Country\/Region', 'Min Date']\n    # print(min_date.head())\n\n    from_nth_case = pd.merge(temp, min_date, on='Country\/Region')\n    from_nth_case['Date'] = pd.to_datetime(from_nth_case['Date'])\n    from_nth_case['Min Date'] = pd.to_datetime(from_nth_case['Min Date'])\n    from_nth_case['N days'] = (from_nth_case['Date'] - from_nth_case['Min Date']).dt.days\n    # print(from_nth_case.head())\n\n    fig = px.line(from_nth_case, x='N days', y='Confirmed', color='Country\/Region', \n                  title='N days from '+str(n)+' case', height=600)\n    fig.show()","7201d654":"gt_n(100000)","9d84df02":"fig = px.scatter(country_wise.sort_values('Deaths', ascending=False).iloc[:20, :], \n                 x='Confirmed', y='Deaths', color='Country\/Region', size='Confirmed', \n                 height=700, text='Country\/Region', log_x=True, log_y=True, \n                 title='Deaths vs Confirmed (Scale is in log10)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","1bcfe6d1":"def plot_treemap(col):\n    fig = px.treemap(country_wise, path=[\"Country\/Region\"], values=col, height=700,\n                 title=col, color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.data[0].textinfo = 'label+text+value'\n    fig.show()","09bc2034":"plot_treemap('Confirmed')","279150b1":"plot_treemap('Deaths')","5c9c19eb":"def plot_bubble(col, pal):\n    temp = full_grouped[full_grouped[col]>0].sort_values('Country\/Region', ascending=False)\n    fig = px.scatter(temp, x='Date', y='Country\/Region', size=col, color=col, height=3000,\n                    color_continuous_scale=pal)\n    fig.update_layout(yaxis = dict(dtick = 1))\n    fig.update(layout_coloraxis_showscale=False)\n    fig.show()","b92c31f9":"plot_bubble('New cases', 'Viridis')","551eb15c":"plot_bubble('Active', 'Viridis')","7cdb5023":"temp = full_grouped[['Date', 'Country\/Region', 'New cases']]\ntemp['New cases reported ?'] = temp['New cases']!=0\ntemp['New cases reported ?'] = temp['New cases reported ?'].astype(int)\n# temp.head()","a6dc23ed":"fig = go.Figure(data=go.Heatmap(\n        z=temp['New cases reported ?'],\n        x=temp['Date'],\n        y=temp['Country\/Region'],\n        colorscale='Emrld',\n        showlegend=False,\n        text=temp['New cases reported ?']))\n\nfig.update_layout(yaxis = dict(dtick = 1))\nfig.update_layout(height=3000)\nfig.show()","402dea52":"# HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","ce2a6161":"# temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths']\n# temp = temp.sum().diff().reset_index()\n\n# mask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\n# temp.loc[mask, 'Confirmed'] = np.nan\n# temp.loc[mask, 'Deaths'] = np.nan\n\n# countries = full_table[full_table['Confirmed']>100000]['Country\/Region'].unique()\n\n# temp = temp[temp['Country\/Region'].isin(countries)]\n\n\n# n_cols = 3\n# n_rows = math.ceil(len(countries)\/n_cols)\n\n# fig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=countries)\n\n# for ind, country in enumerate(countries):\n#     row = int((ind\/n_cols)+1)\n#     col = int((ind%n_cols)+1)\n#     fig.add_trace(go.Bar(x=temp['Date'], y=temp.loc[temp['Country\/Region']==country, 'Confirmed'], name=country), row=row, col=col)\n    \n# fig.update_layout(height=4000, title_text=\"No. of new cases in each Country\")\n# fig.update_layout(showlegend=False)\n# fig.show()","2ae2f7e8":"usa_df = pd.read_csv('..\/input\/corona-virus-report\/usa_county_wise.csv')\nusa_latest = usa_df[usa_df['Date'] == max(usa_df['Date'])]\nusa_grouped = usa_latest.groupby('Province_State')['Confirmed', 'Deaths'].sum().reset_index()","6095d3f6":"us_code = {'Alabama': 'AL', 'Alaska': 'AK', 'American Samoa': 'AS', 'Arizona': 'AZ', 'Arkansas': 'AR', \n    'California': 'CA','Colorado': 'CO','Connecticut': 'CT','Delaware': 'DE', 'District of Columbia': 'DC', \n    'Florida': 'FL', 'Georgia': 'GA', 'Guam': 'GU', 'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL',\n    'Indiana': 'IN','Iowa': 'IA','Kansas': 'KS','Kentucky': 'KY','Louisiana': 'LA','Maine': 'ME',\n    'Maryland': 'MD','Massachusetts': 'MA','Michigan': 'MI','Minnesota': 'MN','Mississippi': 'MS',\n    'Missouri': 'MO','Montana': 'MT','Nebraska': 'NE','Nevada': 'NV','New Hampshire': 'NH', 'New Jersey': 'NJ',\n    'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Northern Mariana Islands':'MP',\n    'Ohio': 'OH', 'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA', 'Puerto Rico': 'PR',\n    'Rhode Island': 'RI', 'South Carolina': 'SC', 'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX',\n    'Utah': 'UT', 'Vermont': 'VT', 'Virgin Islands': 'VI', 'Virginia': 'VA', 'Washington': 'WA',\n    'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY'}\n\nusa_grouped['Code'] = usa_grouped['Province_State'].map(us_code)","de1bcb17":"fig = px.choropleth(usa_grouped, color='Confirmed', locations='Code', locationmode=\"USA-states\", \n                    scope=\"usa\", color_continuous_scale=\"RdGy\", title='No. of cases in USA')\nfig","c9a3a440":"# with urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n#     counties = json.load(response)\n\n# fig = px.choropleth(usa_latest, geojson=counties, locations='FIPS', color='Confirmed',\n#                            color_continuous_scale=\"Peach\",\n#                            scope=\"usa\",\n#                            labels={'Confirmed':'Confirmed'})\n# fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n# fig.show()","70a2cbb8":"who = country_wise.groupby('WHO Region')['Confirmed', 'Deaths', 'Recovered', 'Active',\n                                         'New cases', 'Confirmed last week'].sum().reset_index()\nwho['Fatality Rate'] = round((who['Deaths'] \/ who['Confirmed']) * 100, 2)\nwho['Recovery Rate'] = (who['Recovered'] \/ who['Confirmed']) * 100\n\nwho_g = full_grouped.groupby(['WHO Region', 'Date'])['Confirmed', 'Deaths', 'Recovered', \n                                                     'Active','New cases', 'New deaths'].sum().reset_index()","a9f7421c":"def plot_hbar(col, hover_data=[]):\n    fig = px.bar(who.sort_values(col), \n                 x=col, y=\"WHO Region\", color='WHO Region',  \n                 text=col, orientation='h', width=700, hover_data=hover_data,\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","969d8480":"plot_hbar('Confirmed')","93ec6fdf":"plot_hbar('Deaths')","d8e0014d":"plot_hbar('Fatality Rate')","df0f5392":"fig = px.scatter(country_wise, x='Confirmed', y='Deaths', color='WHO Region', \n                 height=700, hover_name='Country\/Region', log_x=True, log_y=True, \n                 title='WHO Region wise',\n                 color_discrete_sequence=px.colors.qualitative.Vivid)\nfig.update_traces(textposition='top center')\n# fig.update_layout(showlegend=False)\n# fig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","8cad0c7a":"px.bar(who_g, x=\"Date\", y=\"Confirmed\", color='WHO Region', \n       height=600, title='Confirmed', \n       color_discrete_sequence=px.colors.qualitative.Vivid)","f7c1648f":"px.bar(who_g, x=\"Date\", y=\"New cases\", color='WHO Region', \n       height=600, title='New cases', \n       color_discrete_sequence=px.colors.qualitative.Vivid)","7a54c874":"full_grouped['Week No.'] = full_grouped['Date'].dt.strftime('%U')\nweek_wise = full_grouped.groupby('Week No.')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases', 'New deaths', 'New recovered'].sum().reset_index()","5fd80090":"def plot_weekwise(col, hue):\n    fig = px.bar(week_wise, x=\"Week No.\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","0d290f23":"plot_weekwise('Confirmed', '#000000')","418df798":"plot_weekwise('Deaths', dth)","c0b85178":"plot_weekwise('New cases', '#cd6684')","0af7963f":"full_grouped['Month'] = pd.DatetimeIndex(full_grouped['Date']).month\nmonth_wise = full_grouped.groupby('Month')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases', 'New deaths', 'New recovered'].sum().reset_index()","3aef95a4":"def plot_monthwise(col, hue):\n    fig = px.bar(month_wise, x=\"Month\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","1bc3a02d":"plot_monthwise('Confirmed', '#000000')","8a1dcc11":"plot_monthwise('Deaths', dth)","0e76d35b":"plot_monthwise('New cases', '#cd6684')","a8c5b831":"temp = country_wise[country_wise['Active']==0]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp.reset_index(drop=True)","2a1f2020":"happiness_report = pd.read_csv('..\/input\/world-happiness\/2019.csv')\nhappiness_report = happiness_report[['Country or region', 'Healthy life expectancy']]\n\ntemp = country_wise.merge(happiness_report, left_on='Country\/Region', right_on='Country or region')\npx.scatter(temp, y='Deaths \/ 100 Cases', x='Healthy life expectancy', color='WHO Region', hover_data=['Country\/Region'])","2f19d80c":"# Maps","70660e52":"# Top 20 Countries","f52d2a74":"# Composition of Cases","a16c35c9":"### Install libraries","f6f2c9f1":"# Libraries","3d1b29a2":"### Timeline","c6f1ffb0":"# USA","379e34cf":"### Ships that had passengers with COVID-19","aa3ac4c8":"# Cases over the time","d54dda79":"# Date vs","f7b1888b":"# Country Wise","41d0c9fe":"### Load libraries","8987135a":"# Graph after 1M cases","8f11ca26":"# Running Bar Chart","9931c21e":"# Countries with no more active cases","fdea9fac":"# WHO Region Wise","86ebd465":"> *https:\/\/en.wikipedia.org\/wiki\/WHO_regions*","a40c59b1":"# Comparison with similar epidemics","6d05d577":"https:\/\/www.kaggle.com\/imdevskp\/covid19-vs-sars-vs-mers-vs-ebola-vs-h1n1\n\n","cf7d2f67":"https:\/\/www.kaggle.com\/imdevskp\/mers-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/sars-2003-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/western-africa-ebola-outbreak-analysis\n","20ab16ef":"## Weekly Statistics","8602ff3b":"# Healthy life expectancy vs Deaths \/ 100 Cases","de194458":"# Analysis on similar pandemic\/epidemic\/outbreak","cccc003b":"### Color, theme, color palettes","3ba4a19e":"# Confirmed vs Deaths","64fe7e88":"https:\/\/app.flourish.studio\/visualisation\/1571387\/edit\n\n","40c4f118":"# Bubble Plot","801e2f6a":"### Acknowledgements\n\n> https:\/\/github.com\/CSSEGISandData\/COVID-19\n\n### Collection methodology\n\n> https:\/\/github.com\/imdevskp\/covid_19_jhu_data_web_scrap_and_cleaning\n\n### Disclaimer\n\n> * Data is from scrapped from JHU github repository. Any variation in the data there will also reflect in this notebook","5a075f9f":"# Latest","30c68089":"## Monthly statistics","053ef0fb":"# Dataset","2a552f8a":"# Epidemic Span"}}