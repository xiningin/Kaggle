{"cell_type":{"502644a1":"code","d470eb6c":"code","e5d77196":"code","e567d541":"code","79cf3b1b":"code","cd0b4b9e":"code","b053681f":"code","828bd490":"code","052fd604":"code","e6554dd8":"code","6fdc6aab":"markdown","698727a3":"markdown","1aedfafd":"markdown","7e003619":"markdown","bff3f74a":"markdown","8f2c3b96":"markdown","76162cee":"markdown","bc383a62":"markdown"},"source":{"502644a1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nfrom sklearn import metrics\n\nfrom scipy.stats import rankdata\nfrom bayes_opt import BayesianOptimization\n\n\n\ntrain = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/sample_submission.csv')\n","d470eb6c":"models = [ \"getting-started-with-tfrecords\", \"melanoma-efficientnetb6-with-attention-mechanism\", \"triple-stratified-kfold-with-tfrecords\"]\nmodels = [\"384-E6-with-2018\",\"512-E6\",\"768-E2\",\"512-E5\",\"effb3-fulldata-upsample\",\"effb2-fulldata-upsample\"]\nmodels = [\"effb0-fulldata-upsample\",\"effb1-fulldata-upsample\",\"effb2-512-fulldata-upsample\",\"effb3-fulldata-upsample\",\"effb4-fulldata-upsample\",\"effb5-fulldata-upsample\"]\n\nmodels = [\"effb1-fulldata-upsample\",\n          \"melanoma-efficientnetb6-with-attention-mechanism\",\n          \"effb2-fulldata-upsample\",\n          \"effb4-fulldata-upsample\",\n          \"384-E6-with-2018\",\n          \"effb0-fulldata-upsample\"]\n\nmodels = [\"384-E6-with-2018\",\"512-E6\",\"768-E2\",\"512-E5\",\"effb2-fulldata-upsample\",\n         \"effb1-fulldata-upsample\"]\n\n\nfor model in models:\n    dirname = \"\/kaggle\/input\/siim3reorg\/\" + model\n    _oof = pd.read_csv(os.path.join(dirname, \"oof.csv\"))\n    score = metrics.roc_auc_score(_oof['target'], _oof['pred'])\n    print(f\"{model}: OOF auc:{score:.4}\")\n\n    _oof = _oof.rename(columns={\"pred\":model}).drop([\"target\"],axis=1)\n    if \"fold\" in _oof.columns:\n        _oof = _oof.drop([\"fold\"],axis=1)\n\n    train = train.merge(_oof, on=\"image_name\")   \n\n\n    _sub = pd.read_csv(os.path.join(dirname, \"submission.csv\"))\n    _sub.columns = [\"image_name\",model]    \n    test = test.merge(_sub, on=\"image_name\")   \n","e5d77196":"train.head()","e567d541":"train[\"pred_rank\"] = 0\ntrain[\"pred_power\"] = 0\ntrain[\"pred_avg\"] = 0\n\nfor c in models:\n    train[\"pred_rank\"] += train[c].rank() \/ train[c].rank().max()\n    train[\"pred_power\"] += np.power(train[c],2)\/np.power(train[c],2).max()\n    train[\"pred_avg\"] += train [c]\/train [c].max()\n    \ntrain[\"pred_rank\"] = train[\"pred_rank\"]\/len(models)\ntrain[\"pred_power\"] = train[\"pred_power\"]\/len(models)\ntrain[\"pred_avg\"] = train[\"pred_avg\"]\/len(models)\n\n\nscore = metrics.roc_auc_score(train['target'], train[\"pred_avg\"])\nprint(f'OOF avg_auc:{score}')\n   \n    \nscore = metrics.roc_auc_score(train['target'], train[\"pred_rank\"])\nprint(f'OOF rank_auc:{score}')\n\nscore = metrics.roc_auc_score(train['target'], train[\"pred_power\"])\nprint(f'OOF pow_auc:{score}')","79cf3b1b":"test[\"target\"] = 0.0\nfor c in models:\n    test[\"target\"] += test[c].rank() \/ test[c].rank().max()\ntest[\"target\"] = test[\"target\"]\/len(models) \n    \nsub = test[[\"image_name\",\"target\"]]\nsub.to_csv(\"submission_rank.csv\",index=False)\nsub.head()","cd0b4b9e":"test[\"target\"] = 0.0\nfor c in models:\n    test[\"target\"] += np.power(test[c],2)\/np.power(test[c],2).max()\ntest[\"target\"] = test[\"target\"]\/len(models) \n    \nsub = test[[\"image_name\",\"target\"]]\nsub.to_csv(\"submission_pow.csv\",index=False)\nsub.head()","b053681f":"test[\"target\"] = 0.0\nfor c in models:\n    test[\"target\"] += test[c]\/test[c].max()\ntest[\"target\"] = test[\"target\"]\/len(models) \n    \nsub = test[[\"image_name\",\"target\"]]\nsub.to_csv(\"submission_avg.csv\",index=False)\nsub.head()","828bd490":"def dim_optimizer (df_oof, features, init_points = 20, n_iter = 30  ):\n    pbounds = {'c0': (0.0, 1.0), 'c1': (0.0, 1.0), 'c2': (0.0, 1.0),'c3': (0.0, 1.0),'c4': (0.0, 1.0),'c5': (0.0, 1.0)}\n   \n    features = features\n\n    def dim_opt (df_oof, c0,c1,c2,c3,c4,c5):\n\n        x = c0*df_oof[  features[0] ] + c1*df_oof[ features[1]] + c2*df_oof[ features[2]] + c3*df_oof[ features[3]] + c4*df_oof[ features[4]] + c5*df_oof[ features[5]]\n        return metrics.roc_auc_score(df_oof['target'], x)\n\n\n\n    def q (c0, c1,c2,c3,c4,c5):\n        return dim_opt  ( df_oof,  c0, c1,c2,c3,c4,c5)\n\n    optimizer = BayesianOptimization(\n        f=q,\n        pbounds=pbounds,\n        random_state=42,\n    )\n\n\n    optimizer.maximize(\n        init_points=init_points,\n        n_iter=n_iter,\n    )\n\n    c0 = optimizer.max[\"params\"][\"c0\"]\n    c1 = optimizer.max[\"params\"][\"c1\"]\n    c2= optimizer.max[\"params\"][\"c2\"]\n    c3= optimizer.max[\"params\"][\"c3\"]\n    c4= optimizer.max[\"params\"][\"c4\"]\n    c5= optimizer.max[\"params\"][\"c5\"]\n    \n    t = optimizer.max[\"target\"]\n    print ( f'bo auc:{t}, c0:{c0}, c1:{c1}, c2:{c2},c3:{c3},c4:{c4},c5:{c5}' )\n    \n    \n    return c0, c1, c2,c3,c4,c5\n\n\nc0, c1, c2,c3,c4,c5 = dim_optimizer (train, models, init_points = 40, n_iter = 40  )\n\nprint (models[0],c0)\nprint (models[1],c1)\nprint (models[2],c2)\nprint (models[3],c3)\nprint (models[4],c4)\nprint (models[5],c5)\n","052fd604":"def bo_pred (df):\n    x = c0*df[  models[0] ] + c1*df[ models[1]] + c2*df[ models[2]] + c3*df[ models[3]] + c4*df[ models[4]] + c5*df[ models[5]]\n    return x\n\ntrain[\"pred\"] = bo_pred (train)\nscore = metrics.roc_auc_score(train['target'], train['pred'])\nprint(f\"auc bo:{score}\")\n\n","e6554dd8":"test[\"target\"] = bo_pred (test)\n    \nsub = test[[\"image_name\",\"target\"]]\nsub.to_csv(\"submission_bo.csv\",index=False)\nsub.head()","6fdc6aab":"\nThe overall approach of is described in this discussion post: \nhttps:\/\/www.kaggle.com\/c\/siim-isic-melanoma-classification\/discussion\/175330\n\nFrom original kernel:\n\n\"it is important that models use the same fold cv strategy to not overfit the ensemble model\"","698727a3":"## Load OOF and Test predictions","1aedfafd":"## Avg, Rank, Pow Avg","7e003619":"### Submissions","bff3f74a":"Credits: This kernel is a modification of the excellent starter kernel https:\/\/www.kaggle.com\/steubk\/simple-oof-ensembling-methods-for-classification. Original kernel is for 3 models. this is the version for 6 models.","8f2c3b96":"# OOF Ensembling","76162cee":"### Submission","bc383a62":"## Weighted Avg (Bayesian Optimization)\n"}}