{"cell_type":{"a33786d9":"code","9fb31d2f":"code","9be2bad7":"code","baabb0da":"code","a043a990":"code","38a06a42":"code","a90ec6bb":"code","e41e7db3":"code","e96673a7":"code","03e67259":"code","792dd64c":"code","49961460":"code","503bc496":"code","f0cdcd2b":"code","966c3c50":"code","062a0929":"code","a88bf3a1":"code","ecb61e0b":"code","8f2775be":"code","6ec4b004":"code","b9a8af27":"code","57cc452a":"code","318fc3a6":"code","778eac13":"code","62f57960":"code","44cb46f8":"code","1dbc8cf9":"code","a75f70a8":"code","f095f07f":"code","6eca11a3":"code","f5004e9c":"code","b58e6397":"code","4fda19d3":"code","9ae34bb5":"code","9f67feb9":"code","78fdd053":"code","02164851":"code","842faf34":"code","0a603d3c":"code","8bd982ca":"code","eb58cb01":"code","cff98927":"code","41721191":"code","f773e8c7":"code","0a9f3ea5":"code","dfc83294":"code","fbe135a1":"code","d415b136":"code","566fd2a4":"code","25f3fb78":"code","3f027856":"code","eff3d642":"code","c9f733d5":"code","84b385b6":"code","4eca1db4":"markdown","b51c2e5c":"markdown","b7a4ef51":"markdown","21cea790":"markdown","77f59fe9":"markdown","c6a65007":"markdown","7a2b7b4e":"markdown","57cc3436":"markdown","4446c6de":"markdown","cdd06316":"markdown","9499c35c":"markdown","ae3b9705":"markdown","802b17b1":"markdown","38c789b1":"markdown","bd867496":"markdown","60de6249":"markdown","1d0d421b":"markdown","dc57cf9d":"markdown","caed68fa":"markdown"},"source":{"a33786d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9fb31d2f":"submission = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\ntrain = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","9be2bad7":"# description = pd.read_fwf(r'\/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt', header=None)\n# description","baabb0da":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import cross_val_score, GridSearchCV, KFold, RandomizedSearchCV\nfrom sklearn.metrics import mean_squared_error\n\n# Stats\nfrom scipy import stats\nfrom scipy.stats import skew","a043a990":"train.head()","38a06a42":"test.head()","a90ec6bb":"train.info()","e41e7db3":"test.info()","e96673a7":"train.shape, test.shape","03e67259":"#skewness and kurtosis\nprint(\"Skewness: %f\" % train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % train['SalePrice'].kurt())","792dd64c":"#histogram\nsns.displot(train['SalePrice']);","49961460":"#histogram\ny_Log1p = np.log1p(train['SalePrice'])\nsns.displot(y_Log1p);","503bc496":"# scatter plot LotArea\/saleprice\nvar = 'LotArea'\ntrain_data = pd.concat([train['SalePrice'], train[var]], axis=1)\ntrain_data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","f0cdcd2b":"# scatter plot OverallQual\/saleprice\nvar = 'OverallQual'\ntrain_data = pd.concat([train['SalePrice'], train[var]], axis=1)\ntrain_data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","966c3c50":"# scatter plot OverallCond\/saleprice\nvar = 'OverallCond'\ntrain_data = pd.concat([train['SalePrice'], train[var]], axis=1)\ntrain_data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","062a0929":"# scatter plot YearBuilt\/saleprice\nvar = 'YearBuilt'\ntrain_data = pd.concat([train['SalePrice'], train[var]], axis=1)\ntrain_data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","a88bf3a1":"# scatter plot YearRemodAdd\/saleprice\nvar = 'YearRemodAdd'\ntrain_data = pd.concat([train['SalePrice'], train[var]], axis=1)\ntrain_data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","ecb61e0b":"# scatter plot LowQualFinSF\/saleprice\nvar = 'LowQualFinSF'\ntrain_data = pd.concat([train['SalePrice'], train[var]], axis=1)\ntrain_data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","8f2775be":"# scatter plot GrLivArea\/saleprice\nvar = 'GrLivArea'\ntrain_data = pd.concat([train['SalePrice'], train[var]], axis=1)\ntrain_data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","6ec4b004":"# scatter plot OverallQual\/saleprice\nvar = 'TotalBsmtSF'\ntrain_data = pd.concat([train['SalePrice'], train[var]], axis=1)\ntrain_data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","b9a8af27":"# scatter plot OverallQual\/saleprice\nvar = 'OverallQual'\ntrain_data = pd.concat([train['SalePrice'], train[var]], axis=1)\ntrain_data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","57cc452a":"# scatter plot YrSold\/saleprice\nvar = 'YrSold'\ntrain_data = pd.concat([train['SalePrice'], train[var]], axis=1)\ntrain_data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","318fc3a6":"# scatter plot LotFrontage\/saleprice\nvar = 'LotFrontage' # the distance between the road and the property\ntrain_data = pd.concat([train['SalePrice'], train[var]], axis=1)\ntrain_data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","778eac13":"# correlation matrix\ncorrmat = train.corr()\nf, ax = plt.subplots(figsize=(18, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","62f57960":"training_null = pd.isnull(train).sum()\ntesting_null = pd.isnull(test).sum()\n\nnull = pd.concat([training_null, testing_null], axis=1, keys=[\"Training\", \"Testing\"])\nnull","44cb46f8":"train.drop('SalePrice', axis=1, inplace=True)","1dbc8cf9":"data = train.append(test)#","a75f70a8":"data.reset_index(inplace=True, drop=True)","f095f07f":"data.drop('Id',axis=1,inplace=True)","6eca11a3":"data.shape","f5004e9c":"numeric_feats = data.dtypes[data.dtypes != \"object\"].index # 36\n\n# Check the skew of all numerical features\nskewed_feats = data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness","b58e6397":"numerical_features=['MiscVal', 'PoolArea', 'LotArea', 'LowQualFinSF', '3SsnPorch',\n                    'KitchenAbvGr', 'BsmtFinSF2', 'EnclosedPorch', 'ScreenPorch', \n                    'MasVnrArea', 'OpenPorchSF', 'WoodDeckSF', 'LotFrontage',\n                    'BsmtFinSF1', 'MSSubClass', 'GrLivArea', 'BsmtUnfSF',\n                    'TotRmsAbvGrd', 'Fireplaces']\n\nfor feature in numerical_features:\n    data[feature] = np.log1p(data[feature])","4fda19d3":"data['TotalBsmtSF'].unique()","9ae34bb5":"data['TotalBsmtSF'] = data['TotalBsmtSF'].fillna(0) \ndata['MSZoning'] = data['MSZoning'].fillna(method='ffill')\ndata['LotArea'] = data['LotArea'].fillna(data['LotArea'].median())\ndata['YearBuilt'].fillna(method='ffill')\ndata['Exterior1st'] = data['Exterior1st'].fillna(method='ffill')\ndata['Exterior2nd'] = data['Exterior2nd'].fillna(method='ffill')\ndata['MasVnrType'] = data['MasVnrType'].fillna(method='ffill')\ndata['MasVnrArea'] = data['MasVnrArea'].fillna(method='ffill')\ndata['LotFrontage'] = data['LotFrontage'].fillna(0)\ndata['BsmtQual'] = data['BsmtQual'].fillna(0)\ndata['BsmtFinType2'] = data['BsmtFinType2'].fillna(0)\ndata['BsmtUnfSF'] = data['BsmtUnfSF'].fillna(0)\ndata['Electrical'] = data['Electrical'].fillna(0)\ndata['BsmtHalfBath'] = data['BsmtHalfBath'].fillna(0)\ndata['KitchenQual'] = data['KitchenQual'].fillna(0)\ndata['Functional'] = data['Functional'].fillna(0)\ndata['FireplaceQu'] = data['FireplaceQu'].fillna(0)\ndata['GarageType'] = data['GarageType'].fillna(0)\ndata['GarageCars'] = data['GarageCars'].fillna(data['GarageCars'].median())\ndata['GarageQual'] = data['GarageQual'].fillna(0)\ndata['GarageCond'] = data['GarageCond'].fillna(0)\ndata['KitchenQual'] = data['KitchenQual'].fillna(0)\ndata['FireplaceQu'] = data['FireplaceQu'].fillna(0)\ndata['Fence'] = data['Fence'].fillna(0)\ndata['SaleType'] = data['SaleType'].fillna(method='ffill')","9f67feb9":"data['MSSubClass'].unique()","78fdd053":"data['MSSubClass'] = data['MSSubClass'].astype('category').cat.codes","02164851":"data['MSSubClass'].head()","842faf34":"data['MSSubClass'] = data['MSSubClass'].astype('category').cat.codes\ndata['MSZoning'] = data['MSZoning'].astype('category').cat.codes\ndata['LotConfig'] = pd.get_dummies(data['LotConfig'])\ndata['Neighborhood'] = pd.get_dummies(data['Neighborhood'])\ndata['Condition1'] = pd.get_dummies(data['Condition1'])\ndata['Condition2'] = pd.get_dummies(data['Condition2'])\ndata['BldgType'] = pd.get_dummies(data['BldgType'])\ndata['HouseStyle'] = pd.get_dummies(data['HouseStyle'])\ndata['RoofStyle'] = pd.get_dummies(data['RoofStyle'])\ndata['RoofMatl'] = pd.get_dummies(data['RoofMatl'])\ndata['Exterior1st'] = pd.get_dummies(data['Exterior1st'])\ndata['Exterior2nd'] = pd.get_dummies(data['Exterior2nd'])\ndata['MasVnrType'] = pd.get_dummies(data['MasVnrType'])\ndata['Foundation'] = pd.get_dummies(data['Foundation'])\ndata['Heating'] = pd.get_dummies(data['Heating'])\ndata['Electrical'] = pd.get_dummies(data['Electrical'])\ndata['GarageType'] = pd.get_dummies(data['GarageType'])\ndata['SaleType'] = pd.get_dummies(data['SaleType'])\ndata['SaleCondition'] = pd.get_dummies(data['SaleCondition'])","0a603d3c":"data['OverallCond'].unique()","8bd982ca":"Street_mapping = {\n    'Pave':2,\n    'Grvl':1,\n}\ndata['Street'] = data['Street'].map(Street_mapping)\n\nLandContour_mapping = {\n    'Bnk':3,\n    'HLS':2,\n    'Low':1,\n    'Lvl':0\n}\ndata['LandContour'] = data['LandContour'].map(LandContour_mapping)\n\nUtilities_mapping = {\n    'AllPub':2,\n    'NoSeWa':1,\n     0 : 0\n}\ndata['Utilities'] = data['Utilities'].map(Utilities_mapping)\n\nLandSlope_mapping = {\n    'Gtl':2,\n    'Mod':1,\n    'Sev': 0\n}\ndata['LandSlope'] = data['LandSlope'].map(LandSlope_mapping)\n\nExterQual_mapping = {\n    'Ex':4,\n    'Gd':3,\n    'TA':2,\n    'Fa':1,\n}\ndata['ExterQual'] = data['ExterQual'].map(ExterQual_mapping)\n\nExterCond_mapping = {\n    'Ex':5,\n    'Gd':4,\n    'TA':3,\n    'Fa':2,\n    'Po':1,\n}\ndata['ExterCond'] = data['ExterCond'].map(ExterCond_mapping)\n\nBsmtQual_mapping = {\n    'Ex':10,\n    'Gd':9,\n    'TA':8,\n    'Fa':7,\n    'Po':6,\n     0  :0\n}\ndata['BsmtQual'] = data['BsmtQual'].map(BsmtQual_mapping)\n\nBsmtCond_mapping = {\n    'Ex':5,\n    'Gd':4,\n    'TA':3,\n    'Fa':2,\n    'Po':1,\n     0  :0\n}\ndata['BsmtCond'] = data['BsmtCond'].map(BsmtCond_mapping)\n\nBsmtExposure_mapping = {\n    'Gd':4,\n    'Av':3,\n    'Mn':2,\n    'No':1,\n     0  :0\n}\ndata['BsmtExposure'] = data['BsmtExposure'].map(BsmtExposure_mapping)\n\nBsmtFinType1_mapping = {\n    'GLQ':6,\n    'ALQ':5,\n    'BLQ':4,\n    'Rec':3,\n    'LwQ':2,\n    'Unf':1,\n     0   :0\n}\ndata['BsmtFinType1'] = data['BsmtFinType1'].map(BsmtFinType1_mapping)\n\n\nBsmtFinType2_mapping = {\n    'GLQ':6,\n    'ALQ':5,\n    'BLQ':4,\n    'Rec':3,\n    'LwQ':2,\n    'Unf':1,\n     0   :0\n}\ndata['BsmtFinType2'] = data['BsmtFinType2'].map(BsmtFinType2_mapping)\n\nHeatingQC_mapping = {\n    'Ex':5,\n    'Gd':4,\n    'TA':3,\n    'Fa':2,\n    'Po':1,\n     0   :0\n}\ndata['HeatingQC'] = data['HeatingQC'].map(HeatingQC_mapping)\n\nCentralAir_mapping = {\n    'Y':2,\n    'N':1\n}\ndata['CentralAir'] = data['CentralAir'].map(CentralAir_mapping)\n\nKitchenQual_mapping = {\n    'Ex':5,\n    'Gd':4,\n    'TA':3,\n    'Fa':2,\n    'Po':1,\n     0   :0\n}\ndata['KitchenQual'] = data['KitchenQual'].map(KitchenQual_mapping)\n\nFunctional_mapping = {\n    'Typ' :8,\n    'Min1':7,\n    'Min2':6,\n    'Mod' :5,\n    'Maj1':4,\n    'Maj2':3,\n    'Sev' :2,\n    'Sal' :1,\n      0   :0\n}\ndata['Functional'] = data['Functional'].map(Functional_mapping)\n       \t\nFireplaceQu_mapping = {\n    'Ex':5,\n    'Gd':4,\n    'TA':3,\n    'Fa':2,\n    'Po':1,\n     0  :0\n}    \ndata['FireplaceQu'] = data['FireplaceQu'].map(FireplaceQu_mapping)       \t\n   \t\n        \nGarageFinish_mapping = {\n    'Fin':3,\n    'RFn':2,\n    'Unf':1,\n     0   :0\n}\ndata['GarageFinish'] = data['GarageFinish'].map(GarageFinish_mapping)\n\nGarageQual_mapping = {\n    'Ex':5,\n    'Gd':4,\n    'TA':3,\n    'Fa':2,\n    'Po':1,\n     0  :0\n}    \ndata['GarageQual'] = data['GarageQual'].map(GarageQual_mapping)       \t\n   \t\nGarageCond_mapping = {\n    'Ex':5,\n    'Gd':4,\n    'TA':3,\n    'Fa':2,\n    'Po':1,\n     0  :0\n}    \ndata['GarageCond'] = data['GarageCond'].map(GarageCond_mapping)\n\nPavedDrive_mapping = {\n    'Y':2,\n    'P':1,\n    'N':0,\n}\ndata['PavedDrive'] = data['PavedDrive'].map(PavedDrive_mapping)\n\n       \nPoolQC_mapping = {\n    'Ex':3,\n    'Gd':2,\n    'Fa':1,\n     0   :0\n}\ndata['PoolQC'] = data['PoolQC'].map(PoolQC_mapping)\n\nFence_mapping = {\n    'GdPrv':4,\n    'MnPrv':3,\n    'GdWo' :2,\n    'MnWw' :1,\n     0     :0\n}\ndata['Fence'] = data['Fence'].map(Fence_mapping)","eb58cb01":"# feture engineering a new feature \"TotalSF\"\ndata['TotalSF'] = data['TotalBsmtSF'] + data['1stFlrSF'] + data['2ndFlrSF']\n\ndata['Total_Bathrooms'] = (data['FullBath'] + (0.5 * data['HalfBath']) + data['BsmtFullBath'] + (0.5 * data['BsmtHalfBath']))","cff98927":"data.drop('Alley', axis=1, inplace=True) \ndata.drop('LotShape', axis=1, inplace=True) \ndata.drop('PoolQC', axis=1, inplace=True) \ndata.drop('MiscFeature', axis=1, inplace=True) \ndata.drop('TotalBsmtSF', axis=1, inplace=True) \ndata.drop('1stFlrSF', axis=1, inplace=True) \ndata.drop('2ndFlrSF', axis=1, inplace=True) \ndata.drop('FullBath', axis=1, inplace=True) \ndata.drop('HalfBath', axis=1, inplace=True) \ndata.drop('BsmtFullBath', axis=1, inplace=True) \ndata.drop('BsmtHalfBath', axis=1, inplace=True) ","41721191":"data","f773e8c7":"train = data.iloc[0:1460, :]\ntest = data.iloc[1460:, :]","0a9f3ea5":"train.shape","dfc83294":"test.shape","fbe135a1":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(train, y_Log1p, test_size = .2, random_state=1)","d415b136":"x_train","566fd2a4":"from xgboost import XGBRegressor\nimport xgboost as xgb\n\nxgbr = xgb.XGBRegressor()","25f3fb78":"params = {'learning_rate': [0.02], 'n_estimators' : [2000], 'max_depth':[3], \n          'colsample_bytree' : [0.4], 'subsample' : [0.7]}","3f027856":"xgbr_reg = GridSearchCV(xgbr, params, cv = 5, n_jobs =1)\nxgbr_reg.fit(x_train,y_train)","eff3d642":"print(\"Best params:{}\".format(xgbr_reg.best_params_))\n\nbest_x = xgbr_reg.best_estimator_\ny_train_pred_x = best_x.predict(x_train)\ny_val_pred_x = best_x.predict(x_test)\n\nprint('Root Mean Square Error train = ' + str(np.sqrt(mean_squared_error(y_train, y_train_pred_x))))\nprint('Root Mean Square Error test = ' + str(np.sqrt(mean_squared_error(y_test, y_val_pred_x)))) ","c9f733d5":"y_test=best_x.predict(test)\nfinal_y_test=np.expm1(y_test)\n\n\nsubmission=pd.DataFrame({\"Id\":submission['Id'],\n                         \"SalePrice\":final_y_test})\nsubmission.to_csv('submission.csv',index=False)","84b385b6":"submission","4eca1db4":"Because submissions are evaluated on Root-Mean-Squared-Error (RMSE) between the logarithm of the predicted value and the logarithm of the observed sales price. (Taking logs means that errors in predicting expensive houses and cheap houses will affect the result equally.) Let's look at it.\nhttps:\/\/en.wikipedia.org\/wiki\/Root-mean-square_deviation","b51c2e5c":"### Relationship with numerical variables","b7a4ef51":"### 7. Conclusion : take lop1p on some numeric features is the key point\n### 8. Result : Top 8% on the leaderboard of kaggle","21cea790":"'GrLivArea', 'TotalBsmtSF' and 'OverallQual' seem to be linearly related with 'SalePrice'. Both relationships are positive, which means that as one variable increases, the other also increases. ","77f59fe9":"Skewness is a measure of the asymmetry of the probability distribution of a real-valued random variable about its mean Skewness > 0, for a unimodal distribution, positive skew commonly indicates that the tail is on the right side of the distribution.\n     \n\nKurtosis is a statistic that describes the steepness of the distribution of all values of a variable. It is compared with the normal distribution. Kurtosis > 0 is steeper than the peak of the normal distribution-sharp peak.","c6a65007":"### 5. Modeling ","7a2b7b4e":"At first sight, there are two white colored squares that get my attention. The first one refers to the 'TotalBsmtSF' and '1stFlrSF' variables, and the second one refers to the 'GarageCars' and 'GarageArea' variables. Both cases show how significant the correlation is between these variables. Actually, this correlation is so strong that it can indicate a situation of multicollinearity. If we think about these variables, we can conclude that they give almost the same information so multicollinearity really occurs. Heatmaps are great to detect this kind of situations and in problems dominated by feature selection, like ours, they are an essential tool.","57cc3436":"'GarageCars' and 'GarageArea' are like twin brothers. You'll never be able to distinguish them. Therefore, we just need one of these variables in our analysis (we can keep 'GarageCars' since its correlation with 'SalePrice' is higher).","4446c6de":"There are probably others outliers in the training data. However, removing all them may affect badly our models if ever there were also outliers in the test data. ","cdd06316":"skewness only considers > 0.7","9499c35c":"### 1.EDA on data(train + test):\n        I'll look at each variable and do a analysis about their meaning and importance for this problem.","ae3b9705":"'TotalBsmtSF' and '1stFloor' also seem to be twin brothers. We can keep 'TotalBsmtSF'.","802b17b1":"### 4. Transform","38c789b1":"### 3. Imputation","bd867496":"Because some features(the title of the columns) which ratio of lossing is big.\nI will delete the 3 features include 'Alley', 'PoolQC' and 'MiscFeature'.","60de6249":"### 2. The distribution of SalePrice is skew\n       Solution : take lop1p on some numeric features","1d0d421b":"### 1. EDA on data(train + test): \n### 2. The distribution of SalePrice is skew\n### 3. Imputation\n### 4. Transform\n### 5. Modeling  \n### 6. Prediction\n### 7. Conclusion : take lop1p on some numeric features is the key point\n### 8. Result : Top 8% on the leaderboard of kaggle","dc57cf9d":"It seems that 'SalePrice' and 'GrLivArea' are really old friends, with a linear relationship.","caed68fa":"### 6. Prediction"}}