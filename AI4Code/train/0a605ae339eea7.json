{"cell_type":{"880d6dec":"code","2dea57e9":"code","c205b804":"code","4efb86e9":"code","f910d246":"code","1caa20f9":"code","5f0f4439":"code","d3b632ff":"code","76204e54":"code","1b1a2272":"code","72d1ef18":"code","51bb0413":"markdown","2b23ed1e":"markdown","8f64a612":"markdown"},"source":{"880d6dec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2dea57e9":"import numpy as np  \nimport matplotlib.pyplot as plt  \nimport pandas as pd  \n\n# we need to install mlxtend on anaconda prompt by typing 'pip install mlxtend'\nfrom mlxtend.frequent_patterns import apriori  \nfrom mlxtend.frequent_patterns import association_rules\n","c205b804":"store_data = pd.read_csv('..\/input\/BreadBasket_DMS.csv') ","4efb86e9":"# lets visualize which items are more popular.\n\nItems={}\nfor item in store_data['Item']:\n    if item in Items:\n        Items[item]= Items[item] + 1\n    else:\n        Items[item]=1\n        \nkeys=[]\nvals=[]\nfor i,k in Items.items():\n    if k>30:\n        keys.append(i)\n        vals.append(k)\n","f910d246":"plt.bar(keys, vals, label=\"Items sold in 2017\")\nplt.rcParams[\"figure.figsize\"] = [20,10]\nplt.ylabel ('Number of Transactions in Percentage')\nplt.xlabel ('Items Sold')\nplt.xticks(list(keys), rotation=90)\nplt.legend (bbox_to_anchor=(1, 1), loc=\"best\", borderaxespad=0.)\n\nplt.show()","1caa20f9":"store_data['Quantity']= 1","5f0f4439":"store_data.head(7)","d3b632ff":"basket = store_data.groupby(['Transaction', 'Item'])['Quantity'].sum().unstack().fillna(0)\nprint(basket.head())","76204e54":"# There are a lot of zeros in the data but we also need to make sure any positive values are converted to a 1 \n# and anything less the 0 is set to 0. This step will complete the one hot encoding of the data\n\ndef encode_units(x):\n    if x <= 0:\n        return 0\n    if x >= 1:\n        return 1\n\nbasket_sets = basket.applymap(encode_units)","1b1a2272":"# we can change the min_support value from 0 to 1, default value if 0.5 but since our\n# support values are less than 0.5 so to include more datasets i am keeping its value \n# 0.03 to include more sets. but the result will depend on teh lift value after applying\n# association rules.\n\nfrequent_itemsets = apriori(basket_sets,min_support=0.03,  use_colnames=True)\nprint(frequent_itemsets)\n","72d1ef18":"rules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1)\nrules.head()","51bb0413":"There are three major components of Apriori algorithm:\n\nSupport Confidence Lift\n\nSupport Support refers to the default popularity of an item and can be calculated by finding number of transactions containing a particular item divided by total number of transactions. Suppose we want to find support for item B. Support(B) = (Transactions containing (B))\/(Total Transactions)\n\nConfidence Confidence refers to the likelihood that an item B is also bought if item A is bought. It can be calculated by finding the number of transactions where A and B are bought together, divided by total number of transactions where A is bought. Confidence(A\u2192B) = (Transactions containing both (A and B))\/(Transactions containing A)\n\nLift Lift(A -> B) refers to the increase in the ratio of sale of B when A is sold. Lift(A \u2013> B) can be calculated by dividing Confidence(A -> B) divided by Support(B). Mathematically it can be represented as: Lift(A\u2192B) = (Confidence (A\u2192B))\/(Support (B))\n\nA Lift of 1 means there is no association between products A and B. Lift of greater than 1 means products A and B are more likely to be bought together. Finally, Lift of less than 1 refers to the case where two products are unlikely to be bought together.\n\n","2b23ed1e":"As i have mentioned earlier that\n\nA Lift of 1 means there is no association between products A and B. Lift of greater than 1 means products A and B are more likely to be bought together. Finally, Lift of less than 1 refers to the case where two products are unlikely to be bought together.\n\nso with the value of lift 1.1 we can say that items are not associated with each other.","8f64a612":"This analysis requires that all the data for a transaction be included in 1 row and the items should be 1-hot encoded."}}