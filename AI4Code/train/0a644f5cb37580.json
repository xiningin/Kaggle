{"cell_type":{"bfa3b56c":"code","96e0536e":"code","d27fb4e0":"code","d73b9580":"code","7312a9e2":"code","6b0b8ad1":"code","a01932a0":"code","059b9fff":"code","71716c58":"code","2a9c6fbc":"code","546c6c59":"code","08ae5ce7":"code","3a49ab98":"code","75f82549":"code","77e351a1":"code","5b72de62":"code","83d9a34f":"code","06255603":"code","532d4f5a":"code","f58f9690":"code","9372b2a8":"code","e6b54f6b":"code","e828ec1d":"code","235b17f3":"code","6ac1459e":"markdown","fe62a061":"markdown","b61e1731":"markdown","1df9751e":"markdown"},"source":{"bfa3b56c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96e0536e":"#most imortants\nimport sklearn\nimport math\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom numpy import unique\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\n\n#classifiers\nfrom xgboost import XGBRegressor\nimport xgboost as xgb\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler,OrdinalEncoder, FunctionTransformer, RobustScaler, Normalizer\nfrom keras.models import Model\nfrom keras.layers import Input, Embedding, Dense, Dropout, Activation\nfrom keras.optimizers import Adam\nfrom sklearn.preprocessing import LabelEncoder, binarize\nfrom keras.layers.merge import concatenate\nfrom keras.utils import plot_model\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n#for calculate the error\nfrom sklearn.metrics import mean_absolute_error\n\nfrom sklearn.metrics import mean_squared_error","d27fb4e0":"input_train_data='..\/input\/30-days-of-ml\/train.csv'\ninput_test_data='..\/input\/30-days-of-ml\/test.csv'\ntrain_data=pd.read_csv(input_train_data,index_col=0)\ntest_data=pd.read_csv(input_test_data,index_col=0)\npd.DataFrame(train_data.head())","d73b9580":"#model1 linear regression \n#define the input and the output\ny = train_data.target\nX = train_data.drop(['target'], axis=1)\npd.DataFrame(X.head())","7312a9e2":"train_data.describe(include='all')","6b0b8ad1":"#catagorical colums\ncat_columns=[cname for cname in train_data.columns\n             if   train_data[cname].nunique() <= 15 and train_data[cname].dtype == \"object\"]\nprint(cat_columns)\n\nnum_columns = [nname for nname in train_data.columns if train_data[nname].dtype in ['int64', 'float64']]\n\nmy_features=cat_columns+num_columns\n\n\nnum_columns.remove('target')\nprint(num_columns)\n","a01932a0":"## Correlations\ncorrelations = train_data[my_features].corr()\nf, ax = plt.subplots(figsize=(20, 15))\nsns.heatmap(correlations, square=True, cbar=True, annot=True, vmax=.9);","059b9fff":"## Data Distribution of numeric features \ntrain_data[num_columns].hist(figsize=(24,12))","71716c58":"le=train_data[my_features].drop_duplicates()\nlen(le)","2a9c6fbc":"cols_with_missing = [col for col in train_data.columns\n                     if train_data[col].isnull().any()]\n                     \ncols_with_missing2 = [col for col in test_data.columns\n                     if test_data[col].isnull().any()]\n\nprint(cols_with_missing, cols_with_missing2)\n# no nulls in the data ","546c6c59":"## Box Plot for Outliers\nfig = plt.figure(figsize=(18,6))\nsns.boxplot(data=train_data[num_columns], orient=\"h\", palette=\"Set2\");\nplt.xticks(fontsize= 14)\nplt.title('Box plot of numerical columns', fontsize=16);","08ae5ce7":"sns.boxplot(data=train_data[['target']], orient=\"h\", palette=\"Set2\" );\nplt.xticks(fontsize= 14)\nplt.title('Box plot of target column', fontsize=16);","3a49ab98":"# Deal with Outliers\n\nfrom scipy import stats\ndef treatoutliers(df=None, columns=None, factor=1.5, method='IQR', treatment='cap'):\n\n    for column in columns:\n        if method == 'STD':\n            permissable_std = factor * df[column].std()\n            col_mean = df[column].mean()\n            floor, ceil = col_mean - permissable_std, col_mean + permissable_std\n        elif method == 'IQR':\n            Q1 = df[column].quantile(0.25)\n            Q3 = df[column].quantile(0.75)\n            IQR = Q3 - Q1\n            floor, ceil = Q1 - factor * IQR, Q3 + factor * IQR\n#         print(floor, ceil)\n        if treatment == 'remove':\n            print(treatment, column)\n            df = df[(df[column] >= floor) & (df[column] <= ceil)]\n            # link for   https:\/\/www.geeksforgeeks.org\/numpy-clip-in-python\/\n            # clip to make all the data between the q1 and q3 and not make the data in outliers \n        elif treatment == 'cap':\n            print(treatment, column)\n            df[column] = df[column].clip(floor, ceil)\n\n    return df\n    \n# #remove outliers from target column \n# for colName in [['target']]:\n#     train_data = treatoutliers(df=train_data,columns=colName, treatment='remove')         \n    \n#Quantile-based Flooring and Capping\nfor colName in [['target','cont0','cont6','cont8']]:\n    train_data = treatoutliers(df=train_data,columns=colName, treatment='cap')      \n    \ntrain_data.info()","75f82549":"## Box Plot for Outliers\nfig = plt.figure(figsize=(18,6))\nsns.boxplot(data=train_data[num_columns], orient=\"h\", palette=\"Set2\");\nplt.xticks(fontsize= 14)\nplt.title('Box plot of numerical columns', fontsize=16);","77e351a1":"sns.boxplot(data=train_data[['target']], orient=\"h\", palette=\"Set2\" );\nplt.xticks(fontsize= 14)\nplt.title('Box plot of target column after handling Outliers', fontsize=16);","5b72de62":"# Remove rows with missing target, separate target from predictors\ntrain_data.dropna(axis=0, subset=['target'], inplace=True)\ny = train_data['target']\ntrain_data.drop(['target'], axis=1, inplace=True)\n\n# Preview features\ntrain_data.head()\n# dublicates in data \n# missing values\n#outliers \n#missing target","83d9a34f":"# train test split\nx_train,x_valid,y_train,y_valid=train_test_split(X, y, train_size=0.8, test_size=0.2, random_state=0)","06255603":"cat_coumns_train  = [cname for cname in x_train.columns if\n                    x_train[cname].nunique() <= 15 and \n                    x_train[cname].dtype == \"object\"]\n\n# Select numerical columns\nnum_columns_train  = [cname for cname in x_train.columns if \n               x_train[cname].dtype in ['int64', 'float64']\n                 ]\n\n# Keep selected columns only\nmy_features_train = cat_coumns_train + num_columns_train\n\n#\nprint('categorical_features', cat_coumns_train )\nprint('numeric_features',num_columns_train)\nprint('my_features',my_features_train)\n\nx_train = x_train[my_features_train]\nx_valid =x_valid[my_features_train]\ntest_data = test_data[my_features_train]\nx_train.describe(include='all')","532d4f5a":"# random seed\nrans = 42\nxgb_params = {'n_estimators': 10000, 'max_depth': 3, 'learning_rate': 0.03628302216953097,\n              'gamma': 0, 'min_child_weight': 1, 'subsample': 0.7875490025178415, \n              'colsample_bytree': 0.11807135201147481, 'reg_alpha': 23.13181079976304, \n              'reg_lambda': 0.0008746338866473539, 'random_state':rans}\nmodel = XGBRegressor(**xgb_params) ","f58f9690":"# Preprocessing for numerical data\nnumerical_transformer = Pipeline(steps=[\n       ('imputer', SimpleImputer(strategy='mean'))\n       #,('transformer', transformer)\n       ,('RobustScaler', RobustScaler(with_centering=True, with_scaling=True, quantile_range=(25.0, 75.0), copy=True))  \n       ,('scaler', StandardScaler())\n   \n])\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')) \n    ,('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, num_columns),\n        ('cat', categorical_transformer, cat_columns)\n    ],\n    remainder=\"passthrough\"\n  )\n","9372b2a8":"clf = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model', model)\n                     ])\n\nfinal_model = clf.fit(x_train, y_train)    \npreds_valid = final_model.predict(x_valid)\n\n\nprint('RMSE:',mean_squared_error(y_valid, preds_valid, squared=False))","e6b54f6b":"# model_reg= xgb.XGBRegressor(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n#                 max_depth = 5, alpha = 10, n_estimators = 750)\n# my_pipeline_reg = Pipeline(steps=[('preprocessor', preprocessor),\n#                               ('model', model_reg)\n#                              ])\n# my_pipeline_reg.fit(x_train, y_train)\n# preds_reg = my_pipeline_reg.predict(x_valid)\n# rmse = np.sqrt(mean_squared_error(y_valid, preds_reg))\n# print(\"RMSE: %f\" % (rmse))\n\n# # xgb.XGBRegressor(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n# #                 max_depth = 5, alpha = 10, n_estimators = 900 output 0.719931\n\n# # xgb.XGBRegressor(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n# #                 max_depth = 5, alpha = 10, n_estimators = 750 output 0.719896\n# from sklearn.model_selection import cross_val_score\n# scores = -1 * cross_val_score(my_pipeline_reg, X, y,\n#                               cv=5,\n#                               scoring='neg_root_mean_squared_error')\n# print(scores.mean())\n","e828ec1d":"# # split into input (X) and output (y) variables\n# output_trainnn = train_data['target']#train_data.target\n# input_trainnn = train_data.drop(['target'], axis=1)#train_data.drop(['target'], axis=1)\n\n# output_trainnn = pd.Series(output_trainnn)\n# # format all fields as string\n# input_trainnn= input_trainnn.astype(str)\n# # reshape target to be a 2d array\n# output_trainnn = output_trainnn.values.reshape((len(output_trainnn), 1))\n\n\n# # prepare input data\n# def prepare_inputs(data,X_train, X_valid):\n#     oe = OrdinalEncoder()\n#     oe.fit(X_train)\n#     oe.fit(data)\n#     X_train_enc = oe.transform(X_train)\n#     X_test_enc = oe.transform(X_valid)\n#     return X_train_enc,X_valid_enc\n \n# # prepare target\n# def prepare_targets(y_train, y_valid):\n#     le = LabelEncoder()\n#     le.fit(y_train)\n#     y_train_enc = le.transform(y_train)\n#     y_test_enc = le.transform(y_valid)\n#     return y_train_enc, y_valid_enc\n\n# data=train_data.iloc[:,1:len(cat_columns)+1]\n# X_train_enc, X_valid_enc = prepare_inputs(data,num_columns, x_valid)\n# # prepare output data\n# y_train_enc, y_valid_enc = prepare_targets(y_train, y_valid)\n# X_train_enc=X_train_enc+train_data.iloc[:,len(cat_columns)+1:]\n\n\n# # define the  model\n# model = Sequential()\n# model.add(Dense(10, input_dim=X_train_enc.shape[1], activation='relu', kernel_initializer='he_normal'))\n# model.add(Dense(1, activation='sigmoid'))\n# # compile the keras model\n# model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# # fit the keras model on the dataset\n# model.fit(X_train_enc, y_train_enc, epochs=100, batch_size=16, verbose=2)\n","235b17f3":"\npredictions = final_model.predict(test_data)\nprint(test_data)\nmy_submission = pd.DataFrame({'Id': test_data.index, 'target':predictions})\nmy_submission.to_csv('submission.csv', index=False)\n\n","6ac1459e":"# 4. proccessing in the data","fe62a061":"# 3. analysis the data ","b61e1731":"# 2. load data ","1df9751e":"# 1. imports "}}