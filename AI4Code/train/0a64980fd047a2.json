{"cell_type":{"3c10f3ea":"code","99181341":"code","217ec658":"code","a8f92a6a":"code","a5243758":"code","728f4d0a":"code","b076a48c":"code","fc345a9d":"code","b9b9a41d":"code","604c7934":"code","ea2c0023":"code","89467f94":"code","dd2cd02f":"code","4011346a":"code","09850fd8":"code","5297443b":"code","d2130a81":"code","d46303c5":"code","04e5f93e":"code","8be3609a":"code","d3e439d3":"code","820ed0a8":"code","a76c5039":"code","baefccf8":"code","6d08fffd":"code","b1262bd5":"code","834b77f3":"code","ee9e5bb7":"code","5d3eb10f":"code","e9b9ad71":"code","9c1f3cc6":"code","1a68a713":"code","2820880d":"code","bcf57654":"code","164e9a07":"code","6cf3d885":"code","8196a519":"code","07c2ac46":"code","e1533d8b":"code","2b80c76e":"code","abb85ed9":"code","ecd61035":"code","a9dbed9f":"code","e0f20f6a":"code","60617472":"code","810fba11":"code","ee460aba":"code","ed483928":"code","6bea9d4e":"markdown","597655f5":"markdown","921e59c7":"markdown","d9e0263e":"markdown","9509f393":"markdown","3b0608f9":"markdown","6fba3263":"markdown","a4e4222d":"markdown","e311990d":"markdown","70862e62":"markdown","e42436ac":"markdown","10d13f87":"markdown","53b3bf0f":"markdown","27a964c9":"markdown","4273f1f5":"markdown","e72abea8":"markdown","032e67e6":"markdown","6a7bd0b7":"markdown","c7527c2f":"markdown"},"source":{"3c10f3ea":"!pip install pycountry_convert\n!pip install folium\n!pip install plotly","99181341":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker \nimport pycountry_convert as pc\nimport folium\nimport branca\nfrom datetime import datetime, timedelta,date\nfrom scipy.interpolate import make_interp_spline, BSpline\nimport plotly.express as px\nimport json, requests\n\n\n%matplotlib inline","217ec658":"import pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup\n\nreq = requests.get('https:\/\/www.worldometers.info\/coronavirus\/')\nsoup = BeautifulSoup(req.text, \"lxml\")\n\ndf_country = soup.find('div',attrs={\"id\" : \"nav-tabContent\"}).find('table',attrs={\"id\" : \"main_table_countries_today\"}).find_all('tr')\narrCountry = []\nfor i in range(8,len(df_country)-1):\n    tmp = df_country[i].find_all('td')\n    if (tmp[0].string.find('<a') == -1):\n        country = [tmp[0].string]\n    else:\n        country = [tmp[0].a.string] # Country\n    for j in range(1,12):\n        if (str(tmp[j].string) == 'None' or str(tmp[j].string) == ' '):\n            country = country + [0]\n        else:\n            country = country + [float(tmp[j].string.replace(',','').replace('+',''))]\n    arrCountry.append(country)\ndf_worlddata = pd.DataFrame(arrCountry)\ndf_worlddata.columns = ['Country','Total Cases','Cases','Total Deaths','Deaths','Total Recovers','Active','Serious Critical',\n                         'Total Cases\/1M pop','Deaths\/1M pop','Total Test','Tests\/1M pop']\nfor i in range(0,len(df_worlddata)):\n    df_worlddata['Country'].iloc[i] = df_worlddata['Country'].iloc[i].strip()","a8f92a6a":"df_worlddata.head()","a5243758":"df_worlddata.style.background_gradient(cmap='Wistia')","728f4d0a":"df_worlddata = df_worlddata[df_worlddata.Country != 'World']\ndf_worlddata.index = df_worlddata[\"Country\"]\ndf_worlddata = df_worlddata.drop(['Country'],axis=1)\ndf_worlddata.head()","b076a48c":"df_test=df_worlddata.drop(['Total Cases','Cases','Total Deaths','Deaths','Total Recovers','Active','Serious Critical',\n                           'Total Cases\/1M pop','Deaths\/1M pop'],axis=1)","fc345a9d":"df_test.head()","b9b9a41d":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_test.sort_values('Tests\/1M pop')[\"Tests\/1M pop\"].index[-50:],df_test.sort_values('Tests\/1M pop')[\"Tests\/1M pop\"].values[-50:],color=\"red\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Tests\/1M pop \",fontsize=18)\nplt.title(\"Top Countries (Tests\/1M pop )\",fontsize=20)\nplt.grid(alpha=0.3)","604c7934":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_test.sort_values('Total Test')[\"Total Test\"].index[-50:],df_test.sort_values('Total Test')[\"Total Test\"].values[-50:],color=\"crimson\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Total Test\",fontsize=18)\nplt.title(\"Top Countries (Total Test )\",fontsize=20)\nplt.grid(alpha=0.3)","ea2c0023":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_worlddata.sort_values('Total Cases')[\"Total Cases\"].index[-20:],df_worlddata.sort_values('Total Cases')[\"Total Cases\"].values[-20:],color=\"red\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Total Cases\",fontsize=18)\nplt.title(\"Top Countries (Total #)\",fontsize=20)\nplt.grid(alpha=0.3)\n","89467f94":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_worlddata.sort_values('Active')[\"Active\"].index[-20:],df_worlddata.sort_values('Active')[\"Active\"].values[-20:],color=\"darkcyan\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Active\",fontsize=18)\nplt.title(\"Top Countries (Active #)\",fontsize=20)\nplt.grid(alpha=0.3)\n","dd2cd02f":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_worlddata.sort_values('Serious Critical')[\"Serious Critical\"].index[-20:],df_worlddata.sort_values('Serious Critical')[\"Serious Critical\"].values[-20:],color=\"crimson\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Serious Critical\",fontsize=18)\nplt.title(\"Top Countries (Critical #)\",fontsize=20)\nplt.grid(alpha=0.3)\n","4011346a":"df_worlddata.head()","09850fd8":"# Retriving Dataset\nconfirmed = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\n\n# Depricated\n# df_recovered = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Recovered.csv')\nrecovered = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\")","5297443b":"covid_country = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\")","d2130a81":"confirmed = confirmed.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndeaths = deaths.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\nrecovered = recovered.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ncovid_country = covid_country.rename(columns={\"Country_Region\": \"country\"})\ncovid_country[\"Active\"] = covid_country[\"Confirmed\"]-covid_country[\"Recovered\"]-covid_country[\"Deaths\"]\n","d46303c5":"confirmed.head(),deaths.head(),covid_country.head(),recovered.head()","04e5f93e":"def plot_params(ax,axis_label= None, plt_title = None,label_size=15, axis_fsize = 15, title_fsize = 20, scale = 'linear' ):\n    # Tick-Parameters\n    ax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.tick_params(which='both', width=1,labelsize=label_size)\n    ax.tick_params(which='major', length=6)\n    ax.tick_params(which='minor', length=3, color='0.8')\n    \n    # Grid\n    plt.grid(lw = 1, ls = '-', c = \"0.7\", which = 'major')\n    plt.grid(lw = 1, ls = '-', c = \"0.9\", which = 'minor')\n\n    # Plot Title\n    plt.title( plt_title,{'fontsize':title_fsize})\n    \n    # Yaxis sacle\n    plt.yscale(scale)\n    plt.minorticks_on()\n    # Plot Axes Labels\n    xl = plt.xlabel(axis_label[0],fontsize = axis_fsize)\n    yl = plt.ylabel(axis_label[1],fontsize = axis_fsize)\n    \ndef visualize_covid_cases(confirmed, deaths, continent=None , country = None , state = None, period = None, figure = None, scale = \"linear\"):\n    x = 0\n    if figure == None:\n        f = plt.figure(figsize=(10,10))\n        # Sub plot\n        ax = f.add_subplot(111)\n    else :\n        f = figure[0]\n        # Sub plot\n        ax = f.add_subplot(figure[1],figure[2],figure[3])\n    \n    plt.tight_layout(pad=10, w_pad=5, h_pad=5)\n    \n    stats = [confirmed, deaths]\n    label = [\"Confirmed\", \"Deaths\"]\n    \n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else: \n        params = [\"All\", \"All\"]\n    color = [\"darkcyan\",\"crimson\"]\n    marker_style = dict(linewidth=3, linestyle='-', marker='o',markersize=4, markerfacecolor='#ffffff')\n    for i,stat in enumerate(stats):\n        if params[1] == \"All\" :\n            cases = np.sum(np.asarray(stat.iloc[:,5:]),axis = 0)[x:]\n        else :\n            cases = np.sum(np.asarray(stat[stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        date = np.arange(1,cases.shape[0]+1)[x:]\n        plt.plot(date,cases,label = label[i]+\" (Total : \"+str(cases[-1])+\")\",color=color[i],**marker_style)\n\n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(stats[0].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1].iloc[:,5:]),axis = 0)[x:]\n    else :\n        Total_confirmed =  np.sum(np.asarray(stats[0][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        \n    text = \"From \"+stats[0].columns[5]+\" to \"+stats[0].columns[-1]+\"\\n\"\n    text += \"Mortality rate : \"+ str(int(Total_deaths[-1]\/(Total_confirmed[-1])*10000)\/100)+\"\\n\"\n    text += \"Last 5 Days:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-6])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-6])+\"\\n\"\n    text += \"Last 24 Hours:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-2])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-2])+\"\\n\"\n    \n    plt.text(0.02, 0.78, text, fontsize=15, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes,bbox=dict(facecolor='white', alpha=0.4))\n    \n    # Plot Axes Labels\n    axis_label = [\"Days (\"+confirmed.columns[5]+\" - \"+confirmed.columns[-1]+\")\",\"No of Cases\"]\n    \n    # Plot Parameters\n    plot_params(ax,axis_label,scale = scale)\n    \n    # Plot Title\n    if params[1] == \"All\" :\n        plt.title(\"COVID-19 Cases World\",{'fontsize':25})\n    else:   \n        plt.title(\"COVID-19 Cases for \"+params[1] ,{'fontsize':25})\n        \n    # Legend Location\n    l = plt.legend(loc= \"best\",fontsize = 15)\n    \n    if figure == None:\n        plt.show()\n        \ndef get_total_cases(cases, country = \"All\"):\n    if(country == \"All\") :\n        return np.sum(np.asarray(cases.iloc[:,5:]),axis = 0)[-1]\n    else :\n        return np.sum(np.asarray(cases[cases[\"country\"] == country].iloc[:,5:]),axis = 0)[-1]\n    \ndef get_mortality_rate(confirmed,deaths, continent = None, country = None):\n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else :\n        params = [\"All\", \"All\"]\n    \n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(confirmed.iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths.iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/Total_confirmed)*100,2)\n    else :\n        Total_confirmed =  np.sum(np.asarray(confirmed[confirmed[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths[deaths[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/Total_confirmed)*100,2)\n    \n    return np.nan_to_num(mortality_rate)\ndef dd(date1,date2):\n    return (datetime.strptime(date1,'%m\/%d\/%y') - datetime.strptime(date2,'%m\/%d\/%y')).days\n\n\n#out = \"output\/\"","8be3609a":"country_df = covid_country.copy().drop(['Lat','Long_','Last_Update'],axis =1)\ncountry_df.index = country_df[\"country\"]\ncountry_df = country_df.drop(['country'],axis=1)\n","d3e439d3":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(country_df.sort_values('Confirmed')[\"Confirmed\"].index[-20:],country_df.sort_values('Confirmed')[\"Confirmed\"].values[-20:],color=\"red\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top Countries (Confirmed Cases)\",fontsize=20)\nplt.grid(alpha=0.3)\n#plt.savefig(out+'Top Countries (Confirmed Cases).png')","820ed0a8":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(country_df.sort_values('Deaths')[\"Deaths\"].index[-20:],country_df.sort_values('Deaths')[\"Deaths\"].values[-20:],color=\"crimson\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top Countries (Death #)\",fontsize=20)\nplt.grid(alpha=0.3)\n#plt.savefig(out+'Top Countries (Death #).png')","a76c5039":"pd.DataFrame(country_df.sum()).transpose().style.background_gradient(cmap='Wistia',axis=1)","baefccf8":"country_df.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='PuBu')\n","6d08fffd":"world_map = folium.Map(location=[10,0], tiles=\"cartodbpositron\", zoom_start=2,max_zoom=6,min_zoom=2)\nfor i in range(0,len(confirmed)):\n    folium.Circle(\n        location=[confirmed.iloc[i]['Lat'], confirmed.iloc[i]['Long']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+confirmed.iloc[i]['country']+\"<\/h5>\"+\n                    \"<div style='text-align:center;'>\"+str(np.nan_to_num(confirmed.iloc[i]['state']))+\"<\/div>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(confirmed.iloc[i,-1])+\"<\/li>\"+\n        \"<li>Deaths:   \"+str(deaths.iloc[i,-1])+\"<\/li>\"+\n        \"<li>Mortality Rate:   \"+str(np.round(deaths.iloc[i,-1]\/(confirmed.iloc[i,-1]+1.00001)*100,2))+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=(int((np.log(confirmed.iloc[i,-1]+1.00001)))+0.2)*50000,\n        color='#ff6600',\n        fill_color='#ff8533',\n        fill=True).add_to(world_map)\n\nworld_map\n","b1262bd5":"temp_df = pd.DataFrame(country_df['Confirmed'])\ntemp_df = temp_df.reset_index()\nfig = px.choropleth(temp_df, locations=\"country\",\n                    color=np.log10(temp_df.iloc[:,-1]), # lifeExp is a column of gapminder\n                    hover_name=\"country\", # column to add to hover information\n                    hover_data=[\"Confirmed\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,locationmode=\"country names\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title_text=\"Confirmed Cases Heat Map (Log Scale)\")\nfig.update_coloraxes(colorbar_title=\"Confirmed Cases(Log Scale)\",colorscale=\"Reds\")\n# fig.to_image(\"Global Heat Map confirmed.png\")\nfig.show()","834b77f3":"temp_df = pd.DataFrame(country_df['Deaths'])\ntemp_df = temp_df.reset_index()\nfig = px.choropleth(temp_df, locations=\"country\",\n                    color=np.log10(temp_df.iloc[:,-1]+1), # lifeExp is a column of gapminder\n                    hover_name=\"country\", # column to add to hover information\n                    hover_data=[\"Deaths\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,locationmode=\"country names\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title_text=\"Deaths Heat Map (Log Scale)\")\nfig.update_coloraxes(colorbar_title=\"Deaths (Log Scale)\",colorscale=\"Reds\")\n# fig.to_image(\"Global Heat Map deaths.png\")\nfig.show()","ee9e5bb7":"confirmed = confirmed.replace(np.nan, '', regex=True)\ndeaths = deaths.replace(np.nan, '', regex=True)","5d3eb10f":"df_countries = confirmed.groupby([\"country\"]).sum()\ndf_countries = df_countries.sort_values(df_countries.columns[-1],ascending = False)\ncountries = df_countries[df_countries[df_countries.columns[-1]] >= 3500].index\n\ncols =2\nrows = int(np.ceil(countries.shape[0]\/cols))\nf = plt.figure(figsize=(20,8*rows))\nfor i,country in enumerate(countries):\n    visualize_covid_cases(confirmed, deaths,country = country,figure = [f,rows,cols, i+1])\n\nplt.show()","e9b9ad71":"temp = confirmed.groupby('country').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(confirmed.columns[-1], ascending= False)\n\nthreshold = 50\nf = plt.figure(figsize=(10,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i >= 9:\n        if country != \"India\" and country != \"Japan\" :\n            continue\n    x = 91\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:x]\n     \n    date = np.arange(0,len(t[:x]))\n    xnew = np.linspace(date.min(), date.max(), 91)\n    spl = make_interp_spline(date, t, k=1)  # type: BSpline\n    power_smooth = spl(xnew)\n    if country != \"India\":\n        plt.plot(xnew,power_smooth,'-o',label = country,linewidth =3, markevery=[-1])\n    else:\n        marker_style = dict(linewidth=4, linestyle='-', marker='o',markersize=10, markerfacecolor='#ffffff')\n        plt.plot(date,t,\"-.\",label = country,**marker_style)\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,91,7),[ \"D \"+str(i) for i in range(91)][::7])     \n\n# Reference lines \nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every socend day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n\n# India is following trend similar to doulbe the cases in 4 days but it may increase the rate \nx = np.arange(0,26)\ny = 2**(x\/4+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"Red\")\nplt.annotate(\".. every 4 days\",(x[-3],y[-1]),color=\"Red\",xycoords=\"data\",fontsize=14,alpha = 0.8)\n\n# plot Params\nplt.xlabel(\"Day\",fontsize=17)\nplt.ylabel(\"Number of Confirmed Cases\",fontsize=17)\nplt.title(\"Trend Comparison of Different Countries\\n and India (confirmed) \",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\n#plt.savefig(out+'Trend Comparison with India (confirmed).png')\nplt.show()","9c1f3cc6":"temp = deaths.groupby('country').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(deaths.columns[-1], ascending= False)\n\nthreshold = 10\nf = plt.figure(figsize=(10,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i > 10:\n        break\n    x = 91\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:x]\n     \n    date = np.arange(0,len(t[:x]))\n    xnew = np.linspace(date.min(), date.max(), 91)\n    spl = make_interp_spline(date, t, k=1)  # type: BSpline\n    power_smooth = spl(xnew)\n    plt.plot(xnew,power_smooth,'-o',label = country,linewidth =3, markevery=[-1])\n\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,91,7),[ \"D \"+str(i) for i in range(91)][::7])     \n\n# Reference lines \nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every socend day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n# plot Params\nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Deaths\",fontsize=17)\nplt.title(\"Trend Comparison of Different Countries \\n(Deaths)\",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\n#plt.savefig(out+'Trend Comparison countries deaths.png')\nplt.show()","1a68a713":"india_data = requests.get('https:\/\/api.rootnet.in\/covid19-in\/unofficial\/covid19india.org\/statewise').json()\nindia_covid = pd.io.json.json_normalize(india_data['data']['statewise'])\nindia_covid = india_covid.set_index(\"state\")","2820880d":"total = india_covid.sum()\ntotal.name = \"Total\"\npd.DataFrame(total).transpose().style.background_gradient(cmap='Wistia',axis=1)","bcf57654":"india_covid.style.background_gradient(cmap='Wistia')","164e9a07":"india_covid[india_covid['deaths'] > 5].style.background_gradient(cmap='PuBu')","6cf3d885":"\nlocations = {\n    \"Kerala\" : [10.8505,76.2711],\n    \"Maharashtra\" : [19.7515,75.7139],\n    \"Karnataka\": [15.3173,75.7139],\n    \"Telangana\": [18.1124,79.0193],\n    \"Uttar Pradesh\": [26.8467,80.9462],\n    \"Rajasthan\": [27.0238,74.2179],\n    \"Gujarat\":[22.2587,71.1924],\n    \"Delhi\" : [28.7041,77.1025],\n    \"Punjab\":[31.1471,75.3412],\n    \"Tamil Nadu\": [11.1271,78.6569],\n    \"Haryana\": [29.0588,76.0856],\n    \"Madhya Pradesh\":[22.9734,78.6569],\n    \"Jammu and Kashmir\":[33.7782,76.5762],\n    \"Ladakh\": [34.1526,77.5770],\n    \"Andhra Pradesh\":[15.9129,79.7400],\n    \"West Bengal\": [22.9868,87.8550],\n    \"Bihar\": [25.0961,85.3131],\n    \"Chhattisgarh\":[21.2787,81.8661],\n    \"Chandigarh\":[30.7333,76.7794],\n    \"Uttarakhand\":[30.0668,79.0193],\n    \"Himachal Pradesh\":[31.1048,77.1734],\n    \"Goa\": [15.2993,74.1240],\n    \"Odisha\":[20.9517,85.0985],\n    \"Andaman and Nicobar Islands\": [11.7401,92.6586],\n    \"Puducherry\":[11.9416,79.8083],\n    \"Manipur\":[24.6637,93.9063],\n    \"Mizoram\":[23.1645,92.9376],\n    \"Assam\":[26.2006,92.9376],\n    \"Meghalaya\":[25.4670,91.3662],\n    \"Tripura\":[23.9408,91.9882],\n    \"Arunachal Pradesh\":[28.2180,94.7278],\n    \"Jharkhand\" : [23.6102,85.2799],\n    \"Nagaland\": [26.1584,94.5624],\n    \"Sikkim\": [27.5330,88.5122],\n    \"Dadra and Nagar Haveli\":[20.1809,73.0169],\n    \"Lakshadweep\":[10.5667,72.6417],\n    \"Daman and Diu\":[20.4283,72.8397]    \n}\nindia_covid[\"Lat\"] = \"\"\nindia_covid[\"Long\"] = \"\"\nfor index in india_covid.index :\n    india_covid.loc[india_covid.index == index,\"Lat\"] = locations[index][0]\n    india_covid.loc[india_covid.index == index,\"Long\"] = locations[index][1]","8196a519":"# url = \"https:\/\/raw.githubusercontent.com\/Subhash9325\/GeoJson-Data-of-Indian-States\/master\/Indian_States\"\n# state_json = requests.get(url).json()\nindia = folium.Map(location=[23,80], zoom_start=4,max_zoom=6,min_zoom=4,height=500,width=\"80%\")\nfor i in range(0,len(india_covid[india_covid['confirmed']>0].index)):\n    folium.Circle(\n        location=[india_covid.iloc[i]['Lat'], india_covid.iloc[i]['Long']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+india_covid.iloc[i].name+\"<\/h5>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(india_covid.iloc[i]['confirmed'])+\"<\/li>\"+\n        \"<li>Active:   \"+str(india_covid.iloc[i]['active'])+\"<\/li>\"+\n        \"<li>Recovered:   \"+str(india_covid.iloc[i]['recovered'])+\"<\/li>\"+\n        \"<li>Deaths:   \"+str(india_covid.iloc[i]['deaths'])+\"<\/li>\"+\n        \n        \"<li>Mortality Rate:   \"+str(np.round(india_covid.iloc[i]['deaths']\/(india_covid.iloc[i]['confirmed']+1)*100,2))+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=(int(np.log2(india_covid.iloc[i]['confirmed']+1)))*15000,\n        color='#ff6600',\n        fill_color='#ff8533',\n        fill=True).add_to(india)\n\nindia","07c2ac46":"data= pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/test.csv\")  ","e1533d8b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom random import random\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom tqdm import tqdm\n\ndef RMSLE(pred,actual):\n    return np.sqrt(np.mean(np.power((np.log(pred+1)-np.log(actual+1)),2)))","2b80c76e":"pd.set_option('mode.chained_assignment', None)\ntest = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/test.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/train.csv\")\ntrain['Province_State'].fillna('', inplace=True)\ntest['Province_State'].fillna('', inplace=True)\ntrain['Date'] =  pd.to_datetime(train['Date'])\ntest['Date'] =  pd.to_datetime(test['Date'])\ntrain = train.sort_values(['Country_Region','Province_State','Date'])\ntest = test.sort_values(['Country_Region','Province_State','Date'])","abb85ed9":"train.shape,train.head(),train.info()","ecd61035":"train[['ConfirmedCases', 'Fatalities']] = train.groupby(['Country_Region', 'Province_State'])[['ConfirmedCases', 'Fatalities']].transform('cummax') ","a9dbed9f":"from sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\n\nfeature_day = [1,20,50,100,200,500,1000]\ndef CreateInput(data):\n    feature = []\n    for day in feature_day:\n        #Get information in train data\n        data.loc[:,'Number day from ' + str(day) + ' case'] = 0\n        if (train[(train['Country_Region'] == country) & (train['Province_State'] == province) & (train['ConfirmedCases'] < day)]['Date'].count() > 0):\n            fromday = train[(train['Country_Region'] == country) & (train['Province_State'] == province) & (train['ConfirmedCases'] < day)]['Date'].max()        \n        else:\n            fromday = train[(train['Country_Region'] == country) & (train['Province_State'] == province)]['Date'].min()       \n        for i in range(0, len(data)):\n            if (data['Date'].iloc[i] > fromday):\n                day_denta = data['Date'].iloc[i] - fromday\n                data['Number day from ' + str(day) + ' case'].iloc[i] = day_denta.days \n        feature = feature + ['Number day from ' + str(day) + ' case']\n    \n    return data[feature]\npred_data_all = pd.DataFrame()\nwith tqdm(total=len(train['Country_Region'].unique())) as pbar:\n    for country in train['Country_Region'].unique():\n        for province in train[(train['Country_Region'] == country)]['Province_State'].unique():\n            df_train = train[(train['Country_Region'] == country) & (train['Province_State'] == province)]\n            df_test = test[(test['Country_Region'] == country) & (test['Province_State'] == province)]\n            X_train = CreateInput(df_train)\n            y_train_confirmed = df_train['ConfirmedCases'].ravel()\n            y_train_fatalities = df_train['Fatalities'].ravel()\n            X_pred = CreateInput(df_test)\n\n            # Define feature to use by X_pred\n            feature_use = X_pred.columns[0]\n            for i in range(X_pred.shape[1] - 1,0,-1):\n                if (X_pred.iloc[0,i] > 0):\n                    feature_use = X_pred.columns[i]\n                    break\n            idx = X_train[X_train[feature_use] == 0].shape[0]          \n            adjusted_X_train = X_train[idx:][feature_use].values.reshape(-1, 1)\n            adjusted_y_train_confirmed = y_train_confirmed[idx:]\n            adjusted_y_train_fatalities = y_train_fatalities[idx:] #.values.reshape(-1, 1)\n              \n            adjusted_X_pred = X_pred[feature_use].values.reshape(-1, 1)\n\n            model = make_pipeline(PolynomialFeatures(2), BayesianRidge())\n            model.fit(adjusted_X_train,adjusted_y_train_confirmed)                \n            y_hat_confirmed = model.predict(adjusted_X_pred)\n\n            model.fit(adjusted_X_train,adjusted_y_train_fatalities)                \n            y_hat_fatalities = model.predict(adjusted_X_pred)\n\n            pred_data = test[(test['Country_Region'] == country) & (test['Province_State'] == province)]\n            pred_data['ConfirmedCases_hat'] = y_hat_confirmed\n            pred_data['Fatalities_hat'] = y_hat_fatalities\n            pred_data_all = pred_data_all.append(pred_data)\n        pbar.update(1)\n    \ndf_val = pd.merge(pred_data_all,train[['Date','Country_Region','Province_State','ConfirmedCases','Fatalities']],on=['Date','Country_Region','Province_State'], how='left')\ndf_val.loc[df_val['Fatalities_hat'] < 0,'Fatalities_hat'] = 0\ndf_val.loc[df_val['ConfirmedCases_hat'] < 0,'ConfirmedCases_hat'] = 0\n\ndf_val_1 = df_val.copy()","e0f20f6a":"RMSLE(df_val[(df_val['ConfirmedCases'].isnull() == False)]['ConfirmedCases'].values,df_val[(df_val['ConfirmedCases'].isnull() == False)]['ConfirmedCases_hat'].values)","60617472":"RMSLE(df_val[(df_val['Fatalities'].isnull() == False)]['Fatalities'].values,df_val[(df_val['Fatalities'].isnull() == False)]['Fatalities_hat'].values)","810fba11":"val_score = []\nfor country in df_val['Country_Region'].unique():\n    df_val_country = df_val[(df_val['Country_Region'] == country) & (df_val['Fatalities'].isnull() == False)]\n    val_score.append([country, RMSLE(df_val_country['ConfirmedCases'].values,df_val_country['ConfirmedCases_hat'].values),RMSLE(df_val_country['Fatalities'].values,df_val_country['Fatalities_hat'].values)])\n    \ndf_val_score = pd.DataFrame(val_score) \ndf_val_score.columns = ['Country','ConfirmedCases_Scored','Fatalities_Scored']\ndf_val_score.sort_values('ConfirmedCases_Scored', ascending = False)","ee460aba":"country = \"India\"\ndf_val = df_val_1\ndf_country = df_val[df_val['Country_Region'] == country].groupby(['Date','Country_Region']).sum().reset_index()\ndf_train = train[(train['Country_Region'].isin(df_country['Country_Region'].unique())) & (train['ConfirmedCases'] > 0)].groupby(['Date']).sum().reset_index()\n\nidx = df_country[((df_country['ConfirmedCases'].isnull() == False) & (df_country['ConfirmedCases'] > 0))].shape[0]\nfig = px.line(df_country, x=\"Date\", y=\"ConfirmedCases_hat\", title='Forecast Total Cases of ' + df_country['Country_Region'].values[0])\nfig.add_scatter(x=df_train['Date'], y=df_train['ConfirmedCases'], mode='lines', name=\"Actual train\", showlegend=True)\nfig.add_scatter(x=df_country['Date'][0:idx], y=df_country['ConfirmedCases'][0:idx], mode='lines', name=\"Actual test\", showlegend=True)\nfig.show()\n\nfig = px.line(df_country, x=\"Date\", y=\"Fatalities_hat\", title='Forecast Total Fatalities of ' + df_country['Country_Region'].values[0])\nfig.add_scatter(x=df_train['Date'], y=df_train['Fatalities'], mode='lines', name=\"Actual train\", showlegend=True)\nfig.add_scatter(x=df_country['Date'][0:idx], y=df_country['Fatalities'][0:idx], mode='lines', name=\"Actual test\", showlegend=True)\n\nfig.show()","ed483928":"df_val = df_val_1\nsubmission = df_val[['ForecastId','ConfirmedCases_hat','Fatalities_hat']]\nsubmission.columns = ['ForecastId','ConfirmedCases','Fatalities']\nsubmission.to_csv('submission.csv', index=False)\nsubmission","6bea9d4e":"![](https:\/\/media.giphy.com\/media\/kcUYFhoCZwWF3fivnI\/giphy.gif)","597655f5":"### Forecasting Model","921e59c7":"**Let us explore data for India**","d9e0263e":"**Forecast with BayesianRidge**","9509f393":"<hr>\n1. Validating Testing Data around the world\n2. How different counties are performing test wise around the world\n3. Let us visulize as per total number of test and test among Million people\n<hr>","3b0608f9":"**Fixing Errors**","6fba3263":"### Top Countries as per Active cases ###","a4e4222d":"**USA**","e311990d":"###  <font color='red' size='3'>Applying Scrapping<\/font>\n","70862e62":"* <font size=\"5\" color=\"blue\">Contents<\/font>\n\n* [Loading Libraries & EDA](#1)\n    \n\n\n    ","e42436ac":"**State Wise Comparison**","10d13f87":"<hr>\n** As per figure above you can notice following points **\n1. USA is doing maximum number of test nowdays and that is the reason they are having so much count nowdays\n2. India have also increase number of test at daily basis now\n3. South Korea, despite being less number of cases have done more number of test, and that is the reason they are able to make the curve flat after their count of 9 k cases\n","53b3bf0f":"<hr>\n### Let us now analyze top 20 countries with number of Total cases\n**Will analyze Top counties as per confirmed, Most number of deaths, recovered and Critical case(Requiring ICU)**\n\n","27a964c9":"**Forecasting Model**","4273f1f5":"<hr>\n**Identifying Top 20 Countries**\n1. No of total test done\n2. Number of test as per total  1 million of population","e72abea8":"**Please upvote in case you find Notebook helpful**","032e67e6":"**State with more then 5 deaths**","6a7bd0b7":"\n## [Loading Libraries & EDA]() <a id=\"1\" ><\/a>","c7527c2f":"<hr>\n**Let us now identify critical cases**\n1. This will be most important as this will identify the number of deaths in coming days\n2. USA will have more number of death in coming day as they are having more number of serious cases\n3. France and Spain followed by USA"}}