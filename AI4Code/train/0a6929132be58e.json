{"cell_type":{"86fda422":"code","25cab20a":"code","267a2437":"code","528097ac":"code","e1bebbe8":"code","c9283b45":"code","3f2f8521":"code","cac4a6fa":"code","7c95b5fe":"code","cf3eb79d":"code","ae18a7ac":"code","179d897d":"code","974f1236":"code","76763259":"code","eba6aad9":"code","6874d480":"code","90963d2c":"code","be3d6238":"code","d85f9578":"markdown"},"source":{"86fda422":"# IMPORTS\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\nimport matplotlib.pyplot as plt\n%matplotlib inline","25cab20a":"%%time\n# LOAD TRAIN DATA\ntrain_new = pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/train.csv')","267a2437":"#New train data correction\ndf = train_new[train_new['Country_Region']=='Pakistan']\nPakistan_data_new = df.copy()\nPakistan_data_new= Pakistan_data_new[Pakistan_data_new.ConfirmedCases > 0.0]\nPakistan_data_new.reset_index(inplace=True)\nPakistan_data_new.drop(columns= ['index','Id','Province_State'],inplace=True)\nPakistan_data_new['ConfirmedCases'] = Pakistan_data_new['ConfirmedCases'].astype(int) \nPakistan_data_new['Fatalities'] = Pakistan_data_new['Fatalities'].astype(int) \nPakistan_data_new.head()","528097ac":"#new data month adjust\nmonth_day_list = []\nfor date in Pakistan_data_new['Date']:\n    month_day_list.append(date.split('2020-0')[1])\n\nPakistan_data_new['Month_Day'] = month_day_list\nPakistan_data_new.head()","e1bebbe8":"def Calculate_Table ( X_train ):\n    # CALCULATE EXPANSION TABLE\n    diff_conf, conf_old = [], 0 \n    diff_fat, fat_old = [], 0\n    dd_conf, dc_old = [], 0\n    dd_fat, df_old = [], 0\n    ratios = []\n    for row in X_train.values:\n        diff_conf.append(row[2]-conf_old)\n        conf_old = row[2]\n        diff_fat.append(row[3]-fat_old)\n        fat_old = row[3]\n        dd_conf.append(diff_conf[-1]-dc_old)\n        dc_old = diff_conf[-1]\n        dd_fat.append(diff_fat[-1]-df_old)\n        df_old = diff_fat[-1]\n        ratios.append(fat_old \/ conf_old)\n        ratio = fat_old \/ conf_old\n        \n    return diff_conf, conf_old, diff_fat, fat_old, dd_conf, dc_old, dd_fat, df_old, ratios, ratio","c9283b45":"def populate_df_features(X_train,diff_conf, diff_fat, dd_conf, dd_fat, ratios):    \n    # POPULATE DATAFRAME FEATURES\n    pd.options.mode.chained_assignment = None  # default='warn'\n    X_train['diff_confirmed'] = diff_conf\n    X_train['diff_fatalities'] = diff_fat\n    X_train['dd_confirmed'] = dd_conf\n    X_train['dd_fatalities'] = dd_fat\n    X_train['ratios'] = ratios\n    return X_train","3f2f8521":"def fill_nan ( variable):\n    if math.isnan(variable):\n        return 0\n    else:\n        return variable","cac4a6fa":"def Cal_Series_Avg(X_train,ratio):\n    # CALCULATE SERIES AVERAGES\n    d_c = fill_nan( X_train.diff_confirmed[X_train.diff_confirmed != 0].mean() )\n    dd_c = fill_nan( X_train.dd_confirmed[X_train.dd_confirmed != 0].mean() )\n    d_f = fill_nan( X_train.diff_fatalities[X_train.diff_fatalities != 0].mean() )\n    dd_f = fill_nan( X_train.dd_fatalities[X_train.dd_fatalities != 0].mean() )\n    rate = fill_nan( X_train.ratios[X_train.ratios != 0].mean() )\n    rate = max(rate,ratio)\n    return d_c, dd_c, d_f, dd_f, rate","7c95b5fe":"def apply_taylor(train, d_c, dd_c, d_f, dd_f, rate):\n    # ITERATE TAYLOR SERIES\n    pred_c, pred_f = [],[]\n    for i in range(1, 34):\n        pred_c.append(int( ( train.ConfirmedCases[len(train)-1] + d_c*i + 0.5*dd_c*(i**2)) ) )\n        pred_f.append(pred_c[-1]*rate )\n    return pred_c, pred_f","cf3eb79d":"def Prediction(Pakistan_data_new):\n    diff_conf, conf_old, diff_fat, fat_old, dd_conf, dc_old, dd_fat, df_old, ratios, ratio\\\n                                                = Calculate_Table(Pakistan_data_new)\n\n    Pakistan_data_new = populate_df_features(Pakistan_data_new,diff_conf, diff_fat, dd_conf, dd_fat, ratios)\n\n    d_c, dd_c, d_f, dd_f, rate = Cal_Series_Avg(Pakistan_data_new, ratio)\n    \n    pc_new, pf_new = apply_taylor(Pakistan_data_new, d_c, dd_c, d_f, dd_f, rate)\n    \n    return pc_new, pf_new","ae18a7ac":"pc_03, pf_03 = Prediction(Pakistan_data_new.iloc[:-3,:])\npc_04, pf_04 = Prediction(Pakistan_data_new.iloc[:-2,:])\npc_05, pf_05 = Prediction(Pakistan_data_new.iloc[:-1,:])\npc_06, pf_06 = Prediction(Pakistan_data_new)","179d897d":"print(list(map(len,[pc_03, pf_03,pc_04, pf_04,pc_05, pf_05,pc_06, pf_06])))","974f1236":"Pakistan_data_new","76763259":"Pakistan_data_new.shape","eba6aad9":"def date_format(dls):\n    for i,d in enumerate(dls):\n        dls[i] = d.replace(\"3-\",\"Mar-\")\n        dls[i] = dls[i].replace(\"4-\",\"Apr-\")\n        dls[i] = dls[i].replace(\"5-\",\"May-\")\n    return dls","6874d480":"dates = pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/test.csv')\ndates.drop(columns= ['ForecastId','Province_State','Country_Region'],inplace=True)\ndates = dates.iloc[10:43,:]\nstart_cut= 12\npd_list = []\nfor date in dates.Date:\n    pd_list.append(date.split('2020-0')[1])\n\nDate_list = list(Pakistan_data_new.Month_Day[start_cut:-2].copy())\nDate_list.extend(pd_list)","90963d2c":"plt.figure(figsize=(23,6))\nplt.xticks(rotation = 45)\n\nDate_list = date_format(Date_list)\n\ncc_03 = list(Pakistan_data_new.ConfirmedCases[start_cut:-3].copy())\ncc_03.extend(pc_03[:-2])\ncc_04 = list(Pakistan_data_new.ConfirmedCases[start_cut:-2].copy())\ncc_04.extend(pc_04[:-2])\ncc_05 = list(Pakistan_data_new.ConfirmedCases[start_cut:-1].copy())\ncc_05.extend(pc_05[:-2])\ncc_06 = list(Pakistan_data_new.ConfirmedCases[start_cut:].copy())\ncc_06.extend(pc_06[:-2])\ncc = Pakistan_data_new.ConfirmedCases[start_cut:].reset_index().drop('index',axis=1)\n\nplt.plot(Date_list,cc_06,'r',linestyle='-.',label='Prediction 06-APR')\nplt.plot(Date_list[:-1],cc_05,'g',linestyle=':',label='Prediction 05-APR')\nplt.plot(Date_list[:-2],cc_04,'y',linestyle='dashed',label='Prediction 04-APR')\nplt.plot(Date_list[:-3],cc_03,'m',linestyle='-.',label='Prediction 03-APR')\nplt.plot(cc,'b',label='Confirmed')\n\nplt.xlabel(\"Date\",fontdict={'fontsize': 18})\nplt.ylabel(\"Total Confirmed Cases\",fontdict={'fontsize': 18})\nplt.legend(fontsize= 18)\nplt.title('Pakistan COVID19 Confirmed Cases',fontdict={'fontsize': 28})\n\nplt.grid()\nplt.show()","be3d6238":"plt.figure(figsize=(23,6))\nplt.xticks(rotation = 45)\n\ncf_03 = list(Pakistan_data_new.Fatalities[start_cut:-3].copy())\ncf_03.extend(pf_03[:-2])\ncf_04 = list(Pakistan_data_new.Fatalities[start_cut:-2].copy())\ncf_04.extend(pf_04[:-2])\ncf_05 = list(Pakistan_data_new.Fatalities[start_cut:-1].copy())\ncf_05.extend(pf_05[:-2])\ncf_06 = list(Pakistan_data_new.Fatalities[start_cut:].copy())\ncf_06.extend(pf_06[:-2])\ncf = Pakistan_data_new.Fatalities[start_cut:].reset_index().drop('index',axis=1)\n\nplt.plot(Date_list,cf_06,'r',linestyle='-.',label='Prediction 06-APR')\nplt.plot(Date_list[:-1],cf_05,'g',linestyle=':',label='Prediction 05-APR')\nplt.plot(Date_list[:-2],cf_04,'y',linestyle='dashed',label='Prediction 04-APR')\nplt.plot(Date_list[:-3],cf_03,'m',linestyle='-.',label='Prediction 03-APR')\nplt.plot(cf,'b',label='Fatalities')\n\nplt.xlabel(\"Date\",fontdict={'fontsize': 18})\nplt.ylabel(\"Total Fatalities Cases\",fontdict={'fontsize': 18})\nplt.legend(fontsize= 18)\nplt.title('Pakistan COVID19 Fatalities',fontdict={'fontsize': 28})\n\nplt.grid()\nplt.show()","d85f9578":"# Pakistan COVID19 Prediction\n## Data From [Kaggle covid19 global forcasting week3](https:\/\/www.kaggle.com\/c\/covid19-global-forecasting-week-3)"}}