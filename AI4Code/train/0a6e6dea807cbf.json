{"cell_type":{"3372f791":"code","9ee5be14":"code","e7814f45":"code","1e4bf157":"code","8de4beab":"code","30c0818a":"code","d1a59264":"code","10b60b56":"code","418314d7":"code","8f23e590":"code","45c12031":"code","d6c2dcdf":"code","3a3920d8":"code","4ca46a6f":"code","a3245926":"code","60133eff":"code","9a3b859e":"code","43e880ef":"code","69368e7a":"code","71673a4a":"code","040b1fcd":"code","4d144979":"markdown","d81a299a":"markdown","daaf1ed3":"markdown","ccd9a550":"markdown","ce97f83b":"markdown","f4284d3f":"markdown","518f5bbe":"markdown","ebb561d4":"markdown","2a8e091e":"markdown","de0eeecc":"markdown","80134310":"markdown","97d614f0":"markdown","75498033":"markdown","166cbdb8":"markdown","79b3ca52":"markdown","086fbc41":"markdown","dbcf9a68":"markdown","1401ef9d":"markdown","504493b0":"markdown","eadd613c":"markdown","45165e46":"markdown","15fa7654":"markdown","8c1e9dd0":"markdown","3150e7b7":"markdown","b66f2da6":"markdown","b3e5d6f3":"markdown","080d9bee":"markdown"},"source":{"3372f791":"#Libraries\nimport pandas as pd\nimport numpy as np\n\n#Datasets\norders = pd.read_csv('..\/input\/orders.csv' )\norder_products = pd.read_csv('..\/input\/order_products__train.csv' )\norder_products_prior = pd.read_csv('..\/input\/order_products__prior.csv')","9ee5be14":"orders.head()","e7814f45":"order_products_prior.head()","1e4bf157":"prd = pd.merge(orders, order_products_prior, on='order_id', how='inner')\nprd.head(10)","8de4beab":"prd['user_max_onb'] = prd.groupby('user_id').order_number.transform(np.max)\nprd.head(20)","30c0818a":"from collections import defaultdict\nitem_cnt    = defaultdict(int)\nitem_chance = defaultdict(int)","d1a59264":"prd[['user_id', 'product_id', 'order_number', 'user_max_onb']].head(5)","10b60b56":"pid_back = uid_back = onb_back = None\n\nfor user_id, product_id, order_number, max_onb in prd[['user_id', 'product_id', 'order_number', 'user_max_onb']].values:\n        \n    if user_id==uid_back and product_id==pid_back and (order_number-onb_back==1):\n        item_cnt[product_id] +=1\n    if order_number!=max_onb:\n        item_chance[product_id] +=1\n    \n    uid_back = user_id\n    pid_back = product_id\n    onb_back = order_number","418314d7":"item_cnt[24852]","8f23e590":"item_chance[24852]","45c12031":"item_cnt = pd.DataFrame.from_dict(item_cnt, orient='index').reset_index()\nitem_cnt.columns = ['product_id', 'item_first_cnt']\nitem_chance = pd.DataFrame.from_dict(item_chance, orient='index').reset_index()\nitem_chance.columns = ['product_id', 'item_first_chance']\n\ndf = pd.merge(item_cnt, item_chance, on='product_id', how='outer').fillna(0)","d6c2dcdf":"df['item_first_ratio'] = df.item_first_cnt\/df.item_first_chance\nprd = prd.merge(df[['product_id', 'item_first_ratio']], on='product_id', how='left')\nprd.head()","3a3920d8":"prd['user_max_onb'] = prd.groupby('user_id').order_number.transform(np.max)   \nitem_N2_cnt    = defaultdict(int)\nitem_N2_chance = defaultdict(int)\nitem_N3_cnt    = defaultdict(int)\nitem_N3_chance = defaultdict(int)\nitem_N4_cnt    = defaultdict(int)\nitem_N4_chance = defaultdict(int)\nitem_N5_cnt    = defaultdict(int)\nitem_N5_chance = defaultdict(int)","4ca46a6f":"pid_back = uid_back = onb_back = None\n\nfor product_id, user_id, order_number, max_order_number in prd[['product_id', 'user_id', 'order_number','user_max_onb']].values:\n        \n    if product_id==pid_back and user_id==uid_back and (order_number-onb_back)<=2 and (max_order_number-order_number) >=2:\n        item_N2_cnt[product_id] +=1\n    if product_id==pid_back and user_id==uid_back and (max_order_number-order_number) >=2:\n        item_N2_chance[product_id] +=1\n\n    if product_id==pid_back and user_id==uid_back and (order_number-onb_back)<=3 and (max_order_number-order_number) >=3:\n        item_N3_cnt[product_id] +=1\n    if product_id==pid_back and user_id==uid_back and (max_order_number-order_number) >=3:\n        item_N3_chance[product_id] +=1\n\n    if product_id==pid_back and user_id==uid_back and (order_number-onb_back)<=4 and (max_order_number-order_number) >=4:\n        item_N4_cnt[product_id] +=1\n    if product_id==pid_back and user_id==uid_back and (max_order_number-order_number) >=4:\n        item_N4_chance[product_id] +=1\n\n    if product_id==pid_back and user_id==uid_back and (order_number-onb_back)<=5 and (max_order_number-order_number) >=5:\n        item_N5_cnt[product_id] +=1\n    if product_id==pid_back and user_id==uid_back and (max_order_number-order_number) >=5:\n        item_N5_chance[product_id] +=1\n\n    pid_back = product_id\n    uid_back = user_id\n    onb_back = order_number","a3245926":"item_N2_cnt = pd.DataFrame.from_dict(item_N2_cnt, orient='index').reset_index()\nitem_N2_cnt.columns = ['product_id', 'item_N2_cnt']\nitem_N2_chance = pd.DataFrame.from_dict(item_N2_chance, orient='index').reset_index()\nitem_N2_chance.columns = ['product_id', 'item_N2_chance']\n\nitem_N3_cnt = pd.DataFrame.from_dict(item_N3_cnt, orient='index').reset_index()\nitem_N3_cnt.columns = ['product_id', 'item_N3_cnt']\nitem_N3_chance = pd.DataFrame.from_dict(item_N3_chance, orient='index').reset_index()\nitem_N3_chance.columns = ['product_id', 'item_N3_chance']\n\nitem_N4_cnt = pd.DataFrame.from_dict(item_N4_cnt, orient='index').reset_index()\nitem_N4_cnt.columns = ['product_id', 'item_N4_cnt']\nitem_N4_chance = pd.DataFrame.from_dict(item_N4_chance, orient='index').reset_index()\nitem_N4_chance.columns = ['product_id', 'item_N4_chance']\n\nitem_N5_cnt = pd.DataFrame.from_dict(item_N5_cnt, orient='index').reset_index()\nitem_N5_cnt.columns = ['product_id', 'item_N5_cnt']\nitem_N5_chance = pd.DataFrame.from_dict(item_N5_chance, orient='index').reset_index()\nitem_N5_chance.columns = ['product_id', 'item_N5_chance']","60133eff":"df2 = pd.merge(item_N2_cnt, item_N2_chance, on='product_id', how='outer')\ndf3 = pd.merge(item_N3_cnt, item_N3_chance, on='product_id', how='outer')\ndf4 = pd.merge(item_N4_cnt, item_N4_chance, on='product_id', how='outer')\ndf5 = pd.merge(item_N5_cnt, item_N5_chance, on='product_id', how='outer')","9a3b859e":"df = pd.merge(pd.merge(df2, df3, on='product_id', how='outer'),\n              pd.merge(df4, df5, on='product_id', how='outer'), \n              on='product_id', how='outer').fillna(0)","43e880ef":"df['item_N2_ratio'] = df['item_N2_cnt']\/df['item_N2_chance']\ndf['item_N3_ratio'] = df['item_N3_cnt']\/df['item_N3_chance']\ndf['item_N4_ratio'] = df['item_N4_cnt']\/df['item_N4_chance']\ndf['item_N5_ratio'] = df['item_N5_cnt']\/df['item_N5_chance']","69368e7a":"prd = prd.merge([['product_id', 'item_N2_ratio', 'item_N3_ratio', 'item_N4_ratio', 'item_N5_ratio']], on='product_id', how='left')","71673a4a":"df.reset_index(drop=True, inplace=True)\ndf.head(20)","040b1fcd":"df.fillna(0, inplace=True)","4d144979":"The next step is to merge each pair of DataFrame. We use the outer join in order to group the dictionaries by the N number. Hence, we create 4 new data frames with 2 columns: item_N_cnt and item_N_chance.","d81a299a":"## 1.4 Explore that data that we are going to work with\nBefore creating our loop have a look on the prd DataFrame with the variables that we are going to use:","daaf1ed3":"We merge these two DataFrames by their matching column, order_id. The method of merge, how='inner' keeps only these rows where each order_id can be found on both DataFrames.","ccd9a550":"## 1.3 Creating dictionaries to store the results of our loops.\nTo store the results during our iterations we import the package \"defaultdict\". \nThe \"defaultdict\" method is creating an empty dictionary that can store variables of our desired type (in our case integers).\n> A dictionary is a collection which is unordered, changeable and indexed. In Python dictionaries are written with curly brackets, and they have keys and values. \n> \n\nIn our case, we create two dictionaries: item_cnt (item count) and item_chance. \nThe reason we use the defaultdict(int) is to prevent from the KeyError, which is appeared when there are not keys in the dictionary. With this function, we fill the dictionary with the integer 0 as key wherever there is no key.\n\nThe keys of the dictionaries will be the product id's and the values will be the values of our variables.\nIn this way, we can easily turn the dictionaries into DataFrames in which the rows will be the keys, the columns will be the variables and the field will be the values of dictionaries. ","ce97f83b":"## 1.5 Transforming the dictionaries into DataFrame\nSince we found the variables that we want, we will organize them in DataFrames.\n\nAs far as the item_cnt is concerned, we organize its numbers in a table with 2 columns, \"product_id\" and \"item_first_cnt\". We do the same for the item_chance as well, but the second column is called \"item_first_chance\". \n\nAfter that, we merge the two DataFrames in one called df, using as a key the \"product_id\" and applying left join.","f4284d3f":"At this point, we fill any null values with zero and we are ready to see the table.","518f5bbe":"## 1.1 Creating a data frame that contains data from multiple sources\nThe first step is to set up the data frame we are going to use.\n\nWe create a data frame that contains the orders made from the customers and the products purchased in each order. \nActually we use the data frames:\n\norders (all the orders made from all customers) ...","ebb561d4":"# Python Skills\n* Create and use dictionaries to update index-based information for each product\n* Perform a loop\n* Convert a dictionary to a DataFrame.","2a8e091e":"## 1.6 Creating the final feature\n\nFinally, we create the final feature (ratio) of item_first_cnt to item_first_chance. <br>\nWe store the results on our prd DataFrame.","de0eeecc":"Have a look on the results for a specific product 24852 (bananas):","80134310":"## 2.2 Using a loop for the calculation of the main indices\nAfter that, we create the loop. The only differences are on the conditions. Specifically, if the user and product id are the same as in the previous <= N orders and the user has made at least N orders, the variable item_N_cnt is increased by 1 at the value of the respective index\/product_id. \n\nThe second condition is true and does the same for the dictionary item_N_chance when just an item has already been purchased once and the orders are at least N.","97d614f0":"![](https:\/\/www.w3schools.com\/Sql\/img_innerjoin.gif)","75498033":"## 1.5 Using a loop for the calculation of the main indices.\nWhat we do here is to create a loop which calculates two variables: item_cnt and item_chance. <br>\nSpecifically:\n* item_cnt : this variable counts how many consecutive orders contained a specific product for all users\n* item_chance : it counts how many orders have been made by all users and contained this specific product at least one time.\n\nHow does this loop work?\n1. We assign the value \"None\" to our three new variables: pid_back (product id), uid_back (user id), and onb_back (order number). These variables are initialized so we can use them in our loop.\n2. The first row of the code declares that the code inside the loop runs for every row of the table \"prd\". \n3. The variables we previously gave the value \"None\" (pid_bk, uid_bk, onb_bk) change their value in every loop. They receive the information of the previous order and they are used in two conditions \"if\".\n4. The first condition checks if a user bought a product for consecutive time. Specifically, if the user_id and the product_id are the same as those of the previous order, which is checked with the condition current order number minus previous order number equals with one, then count plus 1 in the dictionary item_cnt to the respective index which is the product id in our case. \n5. The second condition checks if the current order number equals the total orders of the user. If this is true, then it adds one as previously but this time in dictionary item_chance.<br>\n\nThis operation is occurred for every row of the table \"prd\"\n\n","166cbdb8":"# Loading the required packages and .csv files\nWe load the pandas and numpy package <br>\nRegarding our datasets we use all the .csv we need to create a DataFrame with the prior orders and the products that have been purchased (prd DataFrame).","79b3ca52":"## Important Notice\nAt this point, we should underline the business meaning of these ratios. Actually, they are probabilities which show the possibility that the user will purchase the product on the next order he will make on the basis of the pattern of his purchases.","086fbc41":"Now that we have a DataFrames that combines both all the prior orders and the products purchased on each order, we will get insights for each product.","dbcf9a68":"... and the order_products_prior (the products purchased in each order).","1401ef9d":"## 2.1 Creating dictionaries for the new metrics\nAs we previously did, we are going to create dictionaries. We create 8 dictionaries and 3 variables with the value \"None\" which are gonna be used in our conditions.","504493b0":"What does the above metrics mean?","eadd613c":"# Business Insights\n\n* Probability that a product will be repurchased consecutive times, based on variables:\n    - In how many consecutive orders a product has been bought\n    - How many orders have been made by a user who has bought a product at least one time\n* Probability that a product will be repurchased within \"N\" orders\n\n","45165e46":"# 2. Probability that a product will be repurchased within \"N\" orders\nThe procedure for the creation of this feature is almost the same as the procedure that we implemented in previous.\n\nPreviously, we calculated for each product the ratio of how many consecutive times a user bought it to the total number of orders the user made. Now, we are going to calculate 4 ratios that look like this one. The general ratio is how many times a product has been purchased within ''N'' orders to the total number of orders occurred by each user and it is at least ''N''. This is going to be calculated for N=2,3,4,5.\n\nThe big difference here is that we don't care about the consecutive times that an item is included in the user's order but we care about the range between the order that the item was purchased and the order that the item was repurchased after. This range is symbolized by \"N\".","15fa7654":"We continue the grouping of the data frames until we reach to the final data frame. Now, with the same use of join, we merge the last 4 data frame into one and we fill any null value with 0.","8c1e9dd0":"# Introduction\nThis kernel has been created by the [Information Systems Lab](http:\/\/islab.uom.gr) at the University of Macedonia, Greece for the needs of the elective course Special Topics of Information Systems I at the [Business Administration](http:\/\/www.uom.gr\/index.php?tmima=2&categorymenu=2) department of the University of Macedonia, Greece.\n\nThe main creator of this kernel is [Anastasios Papadopoulos](https:\/\/www.kaggle.com\/ba15104) and we would like to thank him for his contribution to our course.","3150e7b7":"## 2.3 Transforming the dictionaries into DataFrame\nThen, we turn each dictionary into data frame which contains 2 columns: product id and the variable we have already calculated.","b66f2da6":"# 1. Probability that a product will be repurchased consecutive times\nFor our first feature we are going to create a fraction of two other variables. \n\nThe first variable (nominator) refers to how many consecutive orders a product has been bought. Consecutive orders are these that the product has been bought at least two times in n and n+1 orders. <br>\nThe second variable (denominator)  refers to how many orders have been made by a user who has bought this product at least one time. So, it computes how many times a user had the chance to buy this item either he did it or not.\n\nIn order to make more clear our feature, we give an example: \n\nIf a user bought an item at least one time, the second variable (denominator) will store the total number of orders that he or she has made. So, if the user has made 10 orders in which there is at least one time this item, the second variable is the number 10.\n\nFor the first variable there are many cases that should be examined.\n* If a user bought it exactly one time, the first variable would be the number 0.\n* If a user bought it more times,** it depends on how many of them were consecutive** \n\nFor instance, if there was this pattern:\n\n1st Order: Bought <br>\n2nd Order: Not Bought <br>\n**3rd, 4th, 5th Order**: Bought <br>\n6th Order: Not Bought <br>\n**7th, 8th Order**: Bought<br>\n9th Order: Not Bought<br>\n10th Order: Bought<br>\n\n, the first variable would get the number 5.\n\nSo, the final variable would be the ratio 5\/10 = 0.5. But this calculation will refer to each product and will contain all the patterns such as the above made by all users.\n\nTo make this happen we are going to use elements of Python such as:\n* Joins\n* Dictionaries\n* Loops","b3e5d6f3":"Finally, in our final data frame we create four new columns which are the ratios of item_N_cnt to item_N_chance for every value of N.","080d9bee":"## 1.2 Finding how many orders have been made by each user\nIn this step we add a column that will demonstrate the maximum number of orders that have been made by each user."}}