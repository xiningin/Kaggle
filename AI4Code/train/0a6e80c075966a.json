{"cell_type":{"87d8d7ce":"code","18582781":"code","140bcecb":"code","0ccc0a4b":"code","b02c21ae":"code","159caa02":"code","3eba86df":"code","5356bd9b":"code","30306fa9":"code","1f6fdaee":"code","814e1238":"code","b8653928":"code","32c2c17b":"code","0c0dd98a":"code","83869995":"code","4fa9206f":"code","573d5569":"markdown","409ff195":"markdown","024c11e5":"markdown","2e0afdba":"markdown","a7dd8204":"markdown","20577da4":"markdown","4d0ca074":"markdown","148da9aa":"markdown","ba2aba78":"markdown","83b77ce8":"markdown","c1d59c93":"markdown","b0de9ef8":"markdown","57fbfccd":"markdown"},"source":{"87d8d7ce":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport squarify\nimport seaborn as sns\n\n\nfrom plotly.offline import init_notebook_mode, iplot,plot\ninit_notebook_mode(connected=True)\nimport plotly.offline as offline\noffline.init_notebook_mode()\nimport plotly.graph_objs as go\n\nfrom wordcloud import WordCloud,STOPWORDS\nfrom os import path\nfrom PIL import Image\nimport plotly.plotly as py\n","18582781":"app=pd.read_csv(\"..\/input\/app-store-apple-data-set-10k-apps\/AppleStore.csv\")\nappdis=pd.read_csv(\"..\/input\/app-store-apple-data-set-10k-apps\/appleStore_description.csv\")\n\n","140bcecb":"\n\napp.describe()","0ccc0a4b":"app.info()","b02c21ae":"pd.DataFrame(app.isnull().sum()\/app.isnull().count(),columns=[\"percent of null\"])","159caa02":"app.head()","3eba86df":"\ntypes=app.groupby(\"prime_genre\")[\"id\"].count().sort_values(ascending=False).reset_index()\nplt.figure(figsize=(14,7))\nsns.barplot(y=types[\"prime_genre\"],x=types[\"id\"],data=types)\nplt.gca().set_xlabel(\"count\")\nplt.show()","5356bd9b":"free=app[(app[\"price\"]==0)][\"id\"].count()\npaid=app[(app[\"price\"]!=0)][\"id\"].count()\ntypes=pd.DataFrame({\"count\":[free,paid],\"type\":[\"free\",\"paid\"]})\nplt.figure()\nsns.barplot(x=types[\"type\"],y=types['count'])\nplt.gca().set_xlabel(\"Types\")\nplt.show()","30306fa9":"labels=[\"free\",\"paid\"]\nvalues=[free,paid]\ntrace=go.Pie(labels=labels,values=values)\niplot([trace],filename='pie.html',validate=False)","1f6fdaee":"app[(app['price']!=0)][[\"track_name\",\"price\"]].sort_values(by=\"price\",ascending=False).reset_index()[:10]","814e1238":"price=app.groupby('price')['rating_count_tot'].agg(\"mean\").reset_index()\ntrace=go.Scatter(x=price['price'],y=price[\"rating_count_tot\"],mode='markers',)\nlayout = dict(title = ' price of apps vs Average user ratings count ',\n              xaxis = dict(title = 'price in USD'),\n              yaxis = dict(title = 'Average user ratings count'),\n              )\ndata=[trace]\nfig=dict(data=data,layout=layout)\niplot(fig,validate=False)","b8653928":"\nplt.figure(figsize=(9,5))\ndf=app.iloc[:,[3,5,6,7,8,9]]\nsns.heatmap(df.corr(),linewidths=.5,cmap=\"YlGnBu\")\nplt.show()","32c2c17b":"size=app.groupby('size_bytes')['rating_count_tot'].agg(\"mean\").reset_index()\ntrace=go.Scatter(x=size['size_bytes'],y=size[\"rating_count_tot\"],mode='lines',)\nlayout = dict(title = 'Size of apps vs average user ratings count',\n              xaxis = dict(title = 'size of app in bytes'),\n              yaxis = dict(title = 'Average user ratings count'),\n              )\ndata=[trace]\nfig=dict(data=data,layout=layout)\niplot(fig,validate=False)","0c0dd98a":"plt.figure(figsize=(9,7))\nprime_genre=app.groupby(['prime_genre'])[\"id\"].agg('count')\nsquarify.plot(sizes=prime_genre,label=prime_genre.index)\nplt.show()","83869995":"stopwords=set(STOPWORDS).union(\"going\",\"want\")\nalice_mask = np.array(Image.open(\"..\/input\/ios-logo\/apple-logo.jpg\"))\nnames = appdis[\"app_desc\"]\n#print(names)\nwordcloud = WordCloud(max_words=150,stopwords=stopwords,max_font_size=70, width=500, height=300,mask=alice_mask,background_color =\"white\").generate(' '.join(names))\nplt.figure(figsize=(15,8))\nplt.imshow(wordcloud,interpolation=\"bilinear\")\nplt.title(\"App Store\", fontsize=45)\nplt.axis(\"off\")\nplt.show()\nplt.savefig(\"app_store.png\")","4fa9206f":"apps=app.groupby(['prime_genre'])[['price','rating_count_tot','size_bytes','user_rating']].agg(\"mean\")\n\ndata= [\n    {\n        \"x\":apps['size_bytes']\/1000000,\n        'y':apps[\"rating_count_tot\"],\n        'text':apps.index,\n        'mode':'markers',\n        'marker':{\n            'size':apps['price']*10,\n            'color':apps[\"user_rating\"],\n            'showscale':True,\n            'colorscale':'portland'\n            \n        }\n        \n    }\n]\n\nlayout= go.Layout(\n    title= 'App store category wise visualization',\n    xaxis= dict(\n        title= 'size of app in gb'\n    ),\n    yaxis=dict(\n        title='mean total ratings '\n    )\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='scatter_hover_labels',validate=False)\npy.image.save_as(fig,'plot.png')","573d5569":"## Free vs paid apps","409ff195":"## Correlation matrix","024c11e5":"\n## square plot ","2e0afdba":"## percentage of missing values\n","a7dd8204":"## Loading datasets","20577da4":"## basic description about data","4d0ca074":"## App store category wise visualization","148da9aa":"## App Store wordcloud","ba2aba78":"## List of most expensive apps","83b77ce8":"## price of apps vs Average user ratings count ","c1d59c93":"## Loading libraries","b0de9ef8":"## Types of Apps","57fbfccd":"## Size of apps vs average user ratings count"}}