{"cell_type":{"e162a929":"code","becff300":"code","55abdf4a":"code","70dec99f":"code","b378d2dd":"code","b6deba9a":"code","9f607487":"code","0605da49":"code","d9e74abd":"code","31a3ab8a":"code","c8508454":"code","be760d90":"code","9bc9d84f":"code","93015cb3":"code","5ad4f1d8":"code","8fd8724c":"code","c5a4446f":"code","a8d1e2ed":"code","01ff51c9":"code","bfe775df":"code","a400aa2e":"code","e939b08d":"code","3801e9d7":"code","2017c6fc":"code","4a289c12":"code","e6695342":"code","4019a3b3":"code","1f33c8c4":"code","917781ac":"code","d56162fd":"markdown","865fdbbf":"markdown","a836dd27":"markdown","956abce1":"markdown","ba6a5c53":"markdown","4615fa44":"markdown","707f6400":"markdown","ffd0bffc":"markdown","06e1c70d":"markdown","b78a81ac":"markdown","31a87884":"markdown","9b53d1cd":"markdown","5f86aa8a":"markdown","e8e9250b":"markdown","16026452":"markdown"},"source":{"e162a929":"import os\nimport pandas as pd\nimport numpy as np","becff300":"train = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')","55abdf4a":"len(train['stock_id'].unique())","70dec99f":"book_train_stock_id = pd.read_parquet(f'..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0\/')\n\n# len(train['time_id'].unique())\nbook_train_stock_id.head()","b378d2dd":"book_train_stock_id['bid_ask_spread'] = book_train_stock_id[['ask_price1', 'ask_price2']].min(axis=1)\/book_train_stock_id[['bid_price1', 'bid_price2']].max(axis=1) - 1\nbook_train_stock_id.head()","b6deba9a":"book_train_stock_id['wap'] = (book_train_stock_id['bid_price1'] * book_train_stock_id['ask_size1'] +\n                            book_train_stock_id['ask_price1'] * book_train_stock_id['bid_size1']) \/ (\n                            book_train_stock_id['bid_size1']+ book_train_stock_id['ask_size1'])","9f607487":"book_train_stock_id.groupby(by = ['time_id']).mean().head()","0605da49":"# This is the function for calculating the log of return.\n# This metric is useful to get the difference of the stock value compared between 2 time steps.\n# diff function in pandas returns the difference between consecutive values in a pandas dataframe.\ndef log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff() #The value present in each cell is \n                                            #the difference of current cell value with \n                                            #the previous row corresponding cell\n\n#The function is for computing the value of realised volatility given a series of log returns.\n# Volatility is a metric that depends on how much the stock price has changed in a short period of time.\n# So if the log return has changed a lot on consecutive time steps, it is more volatile and vise-versa.\ndef realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))","d9e74abd":"book_train_stock_id['log_return'] = (book_train_stock_id.groupby(by = ['time_id'])['wap'].apply(log_return).\n                                       reset_index(drop = True).\n                                       fillna(0))","31a3ab8a":"book_train_stock_id.head()","c8508454":"df_realized_vol = book_train_stock_id.groupby(by = ['time_id'])['log_return'].agg(realized_volatility)","be760d90":"pd_ba_spread = book_train_stock_id.groupby(by = ['time_id'], as_index = False)['bid_ask_spread'].mean()","9bc9d84f":"merged_dataframe = pd.merge(df_realized_vol, pd_ba_spread, on=['time_id'], how='left')","93015cb3":"merged_dataframe.head()","5ad4f1d8":"merged_dataframe['stock_id'] = 0","8fd8724c":"merged_dataframe.head()","c5a4446f":"train_dataSet = pd.merge(train, merged_dataframe, on = ['stock_id', 'time_id'], how = 'left')","a8d1e2ed":"train_dataSet.head()","01ff51c9":"y_train = train_dataSet['target']\nX_train = train_dataSet.drop(['stock_id', 'time_id', 'target'], axis = 1)","bfe775df":"# Each step in this function is executed as a single cell for everyone to run and check the intermediate outputs.\n# This is helpful in looking at the dataframes and understanding exactly what is happening at each level of code.\n\ndef get_stock_data(stock_id, train='train'):\n    parquet_file_path = f'..\/input\/optiver-realized-volatility-prediction\/book_'+train+'.parquet\/stock_id='+str(stock_id)+'\/'\n    book_train_stock_id = pd.read_parquet(parquet_file_path)\n    \n    book_train_stock_id['bid_ask_spread'] = book_train_stock_id[['ask_price1', 'ask_price2']].min(axis=1)\/book_train_stock_id[['bid_price1', 'bid_price2']].max(axis=1) - 1\n    book_train_stock_id['wap'] = (book_train_stock_id['bid_price1'] * book_train_stock_id['ask_size1'] +\n                            book_train_stock_id['ask_price1'] * book_train_stock_id['bid_size1']) \/ (\n                            book_train_stock_id['bid_size1']+ book_train_stock_id['ask_size1'])\n    book_train_stock_id['log_return'] = (book_train_stock_id.groupby(by = ['time_id'])['wap'].apply(log_return).\n                                       reset_index(drop = True).\n                                       fillna(0))\n    df_realized_vol = book_train_stock_id.groupby(by = ['time_id'])['log_return'].agg(realized_volatility)\n    pd_ba_spread = book_train_stock_id.groupby(by = ['time_id'], as_index = False)['bid_ask_spread'].mean()\n    \n    merged_dataframe = pd.merge(df_realized_vol, pd_ba_spread, on=['time_id'], how='left')\n    merged_dataframe['stock_id'] = stock_id\n    \n    return merged_dataframe","a400aa2e":"# The list of stock ids can be fetched from the train df.\n\nstock_ids = train['stock_id'].unique()\n\n# Calling the get_stock_data function for each stock_id to create a list of dataframes.\n# These dataframes are then concatenated to form a single dataframe.\ndf_list = [get_stock_data(i) for i in stock_ids]\nfinal_concat_list = pd.concat(df_list, ignore_index = True)","e939b08d":"# Joining the train df with the above df on stock_id and time_id\ntrain_dataSet = pd.merge(train, final_concat_list, on = ['stock_id', 'time_id'], how = 'left')","3801e9d7":"y_train = train_dataSet['target']\nX_train = train_dataSet.drop(['stock_id', 'time_id', 'target'], axis = 1)","2017c6fc":"# Importing the required packages for training the ML model\nimport xgboost as xgb\nfrom xgboost.sklearn import XGBRegressor\nfrom xgboost import cv\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedKFold","4a289c12":"model = XGBRegressor(random_state = 0\n                   #,n_estimators = 200\n                   #,learning_rate = 0.1\n                   #,subsample = 0.8\n                   #,colsample_bytree = 0.8\n                   ,n_jobs= - 1)\n\ncv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\n# evaluate model\nscores = cross_val_score(model, X_train, y_train, scoring='neg_mean_absolute_error', cv=cv, n_jobs=-1)\nprint('Mean MAE: %.3f (%.3f)' % (scores.mean(), scores.std()))","e6695342":"test = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/test.csv')\n\n# test_stock_stat_df = get_dataSet(stock_ids = test['stock_id'].unique(), dataType = 'test')\ntest_stock_ids = test['stock_id'].unique()\ntest_df_list = [get_stock_data(i) for i in test_stock_ids]\ntest_final_concat_list = pd.concat(test_df_list, ignore_index = True)\n\ntest_dataSet = pd.merge(test, test_final_concat_list, on = ['stock_id', 'time_id'], how = 'left')\ntest_dataSet = test_dataSet.drop(['stock_id', 'time_id'], axis = 1)\n\ny_pred = test_dataSet[['row_id']]\nX_test = test_dataSet.drop(['row_id'], axis = 1).fillna(0)","4019a3b3":"model.fit(X_train, y_train)","1f33c8c4":"y_pred = y_pred.assign(target = model.predict(X_test))\ny_pred.to_csv('submission.csv',index = False)","917781ac":"y_pred.head()","d56162fd":"After getting the 'log_return' column for 'wap' of each 'time_id', we need to get the realized volatility using the formula provided in the link.\n<br>\nhttps:\/\/www.kaggle.com\/jiashenliu\/introduction-to-financial-concepts-and-data","865fdbbf":" # **Importing the required libraries**","a836dd27":"# Utility Functions","956abce1":"# Loading Parquete Files","ba6a5c53":"This csv contains the stock-id(total 112 in number) and the time-id along with the target, i.e. the volatility score at that point of time for that particular stock.","4615fa44":"Assigning the stock_id value to the new column. We need to repeat the above process for all the stock_ids and create the final dataframe.","707f6400":"As different stocks trade on different level on the market we take the ratio of best offer price and best bid price to calculate the bid-ask spread.\n\nThe formula of bid\/ask spread can be written in below form:\nBidAskSpread=BestOffer\/BestBid\u22121\n\nSource: https:\/\/www.kaggle.com\/jiashenliu\/introduction-to-financial-concepts-and-data","ffd0bffc":"# Loading data and understanding the data.","06e1c70d":"As an example, loading just a single file for now to check the data and draw some insights and understand the format.","b78a81ac":"This notebook is intended for starters who are just trying to understand the competition and understand what needs to be done for a basic submission.\n<br>\n<b>I myself am a beginner and hope to learn from this exercise.<\/b>","31a87884":"Merging the above 2 dataframes for getting the feature columns","9b53d1cd":"The below cell gets the mean of 'bid_ask_spread' for each group of 'time_id'","5f86aa8a":"After getting the train features and targets, we need to train the model on the this data and run the prediction.\n\nTo do the training we need to put all the above steps in a function and loop over the available stock-ids and create the training dataset.","e8e9250b":"<b>The code below is used to run the 'log_return' function on each group of time_id.<\/b>\n<br>\ni.e. All the list of 'wap' values for every time_id are taken and the difference of consecutive 'wap' is given as a list in return. \n<br>\nAlso filling the na values with 0 in the process.","16026452":"The definition and formula for weighted average can be found from the link below.\nhttps:\/\/www.kaggle.com\/jiashenliu\/introduction-to-financial-concepts-and-data?scriptVersionId=67183666&cellId=18\n\nThe weighted average price is the metric that is used to calculate the actual value of the stock in consideration.\n\nThe WAP is calculated from the top level price and volume information."}}