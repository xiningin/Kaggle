{"cell_type":{"5e7b91b6":"code","089f9950":"code","d54d60d5":"code","6bc973e4":"code","ae1f94bf":"code","c303e47e":"code","8f2a2dcd":"code","90d13290":"code","6b569da4":"code","5e701adc":"code","624f45ae":"code","a5347626":"code","3b3ae40e":"code","35d39a06":"code","8352c836":"code","67aaadaa":"code","600e1374":"code","e3409118":"code","f9dd2331":"code","d1b58677":"code","123cc7e8":"code","89218fd1":"code","defe91dd":"markdown","7182d718":"markdown","b96cabe1":"markdown"},"source":{"5e7b91b6":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport warnings\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nfrom colorama import Fore, Back, Style \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\nimport xgboost\nfrom plotly.offline import plot, iplot, init_notebook_mode\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nfrom statsmodels.formula.api import ols\nimport plotly.graph_objs as gobj\ninit_notebook_mode(connected=True)\nwarnings.filterwarnings(\"ignore\")\nimport plotly.figure_factory as ff\n\n%matplotlib inline\n\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","089f9950":"input_data = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ninput_data.head()","d54d60d5":"hist_data =[input_data[\"age\"].values]\ngroup_labels = ['age'] \n\nfig = ff.create_distplot(hist_data, group_labels)\nfig.update_layout(title_text='Plot of Age distribution')\n\nfig.show()","6bc973e4":"fig = px.box(input_data, x='sex', y='age', points=\"all\")\nfig.update_layout(\n    title_text=\"Spread(age v\/s gender) - Male -> 1 Female -> 0\")\nfig.show()","ae1f94bf":"male = input_data[input_data[\"sex\"]==1]\nfemale = input_data[input_data[\"sex\"]==0]\nmale_survi = male[input_data[\"DEATH_EVENT\"]==0]\nmale_not = male[input_data[\"DEATH_EVENT\"]==1]\nfemale_survi = female[input_data[\"DEATH_EVENT\"]==0]\nfemale_not = female[input_data[\"DEATH_EVENT\"]==1]\nlabels = ['Male - Survived','Male - Not Survived', \"Female -  Survived\", \"Female - Not Survived\"]\nvalues = [len(male[input_data[\"DEATH_EVENT\"]==0]),len(male[input_data[\"DEATH_EVENT\"]==1]),\n         len(female[input_data[\"DEATH_EVENT\"]==0]),len(female[input_data[\"DEATH_EVENT\"]==1])]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(\n    title_text=\"Survival analysis using gender\")\nfig.show()","c303e47e":"surv = input_data[input_data[\"DEATH_EVENT\"]==0][\"age\"]\nnot_surv = input_data[input_data[\"DEATH_EVENT\"]==1][\"age\"]\nhist_data = [surv,not_surv]\ngroup_labels = ['Survived', 'Not Survived']\nfig = ff.create_distplot(hist_data, group_labels, bin_size=0.5)\nfig.update_layout(\n    title_text=\"Analysis in Age on Survival Status\")\nfig.show()","8f2a2dcd":"fig = px.violin(input_data, y=\"age\", x=\"sex\", color=\"DEATH_EVENT\", box=True, points=\"all\", hover_data=input_data.columns)\nfig.update_layout(title_text=\"Analysis in Age and Gender on Survival Status\")\nfig.show()","90d13290":"fig = px.violin(input_data, y=\"age\", x=\"smoking\", color=\"DEATH_EVENT\", box=True, points=\"all\", hover_data=input_data.columns)\nfig.update_layout(title_text=\"Analysis in Age and Smoking on Survival Status\")\nfig.show()","6b569da4":"fig = px.violin(input_data, y=\"age\", x=\"diabetes\", color=\"DEATH_EVENT\", box=True, points=\"all\", hover_data=input_data.columns)\nfig.update_layout(title_text=\"Analysis in Age and Diabetes on Survival Status\")\nfig.show()","5e701adc":"fig = px.histogram(input_data, x=\"creatinine_phosphokinase\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=input_data.columns)\nfig.show()","624f45ae":"fig = px.histogram(input_data, x=\"ejection_fraction\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=input_data.columns)\nfig.show()","a5347626":"fig = px.histogram(input_data, x=\"platelets\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=input_data.columns)\nfig.show()","3b3ae40e":"fig = px.histogram(input_data, x=\"serum_creatinine\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=input_data.columns)\nfig.show()","35d39a06":"fig = px.histogram(input_data, x=\"serum_sodium\", color=\"DEATH_EVENT\", marginal=\"violin\",hover_data=input_data.columns)\nfig.show()","8352c836":"fig = px.pie(input_data, values='diabetes',names='DEATH_EVENT', title='Diabetes Death Event Ratio')\nfig.show()","67aaadaa":"fig = px.pie(input_data, values='anaemia',names='DEATH_EVENT', title='Anaemia Death Event Ration')\nfig.show()","600e1374":"fig = px.pie(input_data, values='anaemia',names='DEATH_EVENT', title='Anaemia Death Event Ration')\nfig.show()","e3409118":"fig = px.pie(input_data, values='high_blood_pressure',names='DEATH_EVENT', title='High Blood Pressure Death Event Ratio')\nfig.show()","f9dd2331":"plt.figure(figsize=(10,10))\nsns.heatmap(input_data.corr(), vmin=-1, cmap='coolwarm', annot=True);","d1b58677":"Features = ['time','ejection_fraction','serum_creatinine','age']\nx = input_data[Features]\ny = input_data[\"DEATH_EVENT\"]\nx_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.2, random_state=2698)","123cc7e8":"clf = RandomForestClassifier(max_features=0.5, max_depth=15, random_state=1)\nclf.fit(x_train, y_train)\npred=clf.predict(x_test)\nprint(Fore.GREEN + \"Accuracy of RandomForestClassifier is : \",clf.score(x_test,y_test))\ncm = confusion_matrix(y_test, pred)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(12,8), hide_ticks=True, cmap=plt.cm.Blues)\nplt.title(\"Random Forest Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.yticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.show()","89218fd1":"gradientboost_clf = GradientBoostingClassifier(max_depth=2, random_state=4)\ngradientboost_clf.fit(x_train,y_train)\ngradientboost_pred = gradientboost_clf.predict(x_test)\nprint(Fore.GREEN + \"Accuracy of Gradient Boosting is : \",gradientboost_clf.score(x_test,y_test))\ncm = confusion_matrix(y_test, gradientboost_pred)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(12,8), hide_ticks=True, cmap=plt.cm.Blues)\nplt.title(\"Gredient Boosting Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.yticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.show()","defe91dd":"**data of clinical records from dataset**","7182d718":"Gradient boosting classifier","b96cabe1":"Random classifier"}}