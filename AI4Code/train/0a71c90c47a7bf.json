{"cell_type":{"41e5c0a4":"code","5cd9ae69":"code","c49afdb5":"code","15889ccd":"code","aeea9c00":"code","b4f7f39e":"code","9aeb8375":"code","4d7eb29c":"code","70761591":"code","b4fa4363":"code","7f4162fa":"code","60db7616":"code","0ff5440f":"code","602914ca":"code","cec28fa1":"code","cbce8481":"code","f7d74de2":"code","f2a8eb3b":"code","a88d732b":"code","a2967fd2":"code","a736cac3":"code","3d1fe031":"code","c9049e0a":"code","1a55cf42":"code","83759451":"code","4a2dd03d":"code","f23a441e":"code","7a81e656":"code","05ea59d6":"code","93540a21":"code","f0da1eed":"code","d0252974":"code","5f2f4c61":"code","0274b9eb":"code","41b07ae1":"code","c1049b37":"code","c8d6d8a0":"code","6cf9718b":"code","c0415b1d":"code","64d80e95":"code","aaca48d0":"code","84b4a1a5":"code","04e8eaae":"code","172d2c25":"code","2373bb3f":"code","0ae65c23":"code","9f6aefa0":"code","c7e26d1c":"code","3bd934aa":"code","95b37fdb":"code","0e27eb79":"code","9d9feb2d":"code","90fbf9f7":"code","397289fd":"code","33527509":"code","a83cbeaa":"code","b2b5ef45":"code","26c33a29":"code","f8e66d83":"code","66672ed1":"code","2ed3866c":"code","b9ec36c3":"code","c4adf861":"code","1f26be36":"code","44089ab7":"code","ee7fa3e6":"code","d374033f":"code","1301496c":"code","e02362d1":"code","eaef76f3":"code","e22304f1":"code","4a2e1a61":"code","dd9181f1":"code","c16817a7":"code","ad8b22d5":"code","9e799432":"code","5031f872":"code","4dd80a92":"code","027ee0b8":"code","bffdb7bf":"code","34ba8487":"code","482eaf26":"code","992c90e8":"code","618655dd":"code","a32dce86":"code","c99e2f02":"code","5929f0ba":"code","ebf87d4d":"code","5a17056e":"code","c1b70de2":"code","75b0cf4f":"code","521d9d4d":"code","271f606e":"code","1f51468b":"code","6b6b16a4":"code","f81b0e77":"code","3cf8d9ac":"code","8663866c":"code","6a216092":"code","aca4eeef":"code","4b7aae9e":"code","ca02de32":"code","b2ef0cdd":"code","76882342":"code","2e9315e9":"code","8bbfb065":"markdown","301ee6f8":"markdown","704ab98c":"markdown","8eec197f":"markdown","3d10e10a":"markdown","523b6a0a":"markdown","8a878efc":"markdown","65f9afe9":"markdown","313b8b0e":"markdown","59bee631":"markdown","5953f984":"markdown","bcf0fc90":"markdown","26fcbfe6":"markdown","5d6066c6":"markdown","32d12080":"markdown","39eb5970":"markdown","9dd92543":"markdown","46b90b6c":"markdown","0b82ce30":"markdown","8af3433a":"markdown","0d2f040d":"markdown","376010a2":"markdown","ad4227f4":"markdown","840b5b73":"markdown","cf93901a":"markdown","ba1ac5ca":"markdown","c8eeceb3":"markdown","50b5099d":"markdown","4e552c71":"markdown","28c91922":"markdown","c18129fe":"markdown","6c7a31ae":"markdown","a08cc575":"markdown","80dcd0e0":"markdown","5de899e2":"markdown","94a8afb6":"markdown","7c2d9856":"markdown","6d0800f5":"markdown","6cab36b0":"markdown","f74adb59":"markdown","f24bfc4c":"markdown","cc82ecc0":"markdown","a84b1cdf":"markdown","08e049db":"markdown","9337a01f":"markdown","621643bf":"markdown","0b0f8f41":"markdown","4fde674d":"markdown","57ee15be":"markdown","137f0461":"markdown","b1b3e438":"markdown","b3e1d4ae":"markdown","47ed47f4":"markdown","a931daf9":"markdown","ddfb807d":"markdown","fd05d96d":"markdown","2b71a262":"markdown","f2500871":"markdown","2b6979f4":"markdown","ee80fcc5":"markdown","bd499657":"markdown","a89d5e2c":"markdown","9bed4d8c":"markdown","211be4c1":"markdown","f04649cf":"markdown","25fddd02":"markdown","a67d6ad8":"markdown"},"source":{"41e5c0a4":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt ","5cd9ae69":"pd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\n%matplotlib inline ","c49afdb5":"# import os\n# os.chdir('\/kaggle\/working')\n# os.getcwd()\n# print(os.listdir(\"..\/input\"))","15889ccd":"# Importing  Confirmed Cases Dataset\n# url_confirmed = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv'\n# df_confirmed = pd.read_csv(url_confirmed, index_col=\"Country\/Region\")\ndf_confirmed = pd.read_csv(\"..\/input\/time-series-data-covid19\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\",\n                          header = 0, index_col=\"Country\/Region\")\ndf_confirmed.drop(['Lat', 'Long' ], axis=1, inplace=True)\ndf_confirmed.head(3)","aeea9c00":"# Country grouping on original dataframe        \ngr_confirmed = df_confirmed.groupby(\"Country\/Region\").sum()\ngr_confirmed.head(3)","b4f7f39e":"# Checking for the missing values in the Confirmed Cases dataset\n\ngr_confirmed.isnull().sum().sum()\ngr_confirmed.isna().sum().sum()\n\n# Hence, there are no missing values in our Confirmed Cases data. ","9aeb8375":"# Adding data for China (1-Jan to 21-Jan from a China CDC publication)\nlab=[]\nfor i in range(1,22):\n    lab.append(\"1\/\" + str(i) + \"\/20\")\n    gr_confirmed.insert(loc=i-1,column=lab[i-1], value=0)\ngr_confirmed.loc[\"China\"][0:10] = 20\ngr_confirmed.loc[\"China\"][10:21] = 310\n\n# Remove Diamond princess and MS Zaandam\ngr_confirmed = gr_confirmed.drop([\"Diamond Princess\", \"MS Zaandam\"])\n\ngr_confirmed1= gr_confirmed.copy() # To have a copy of Confirmed Cases dataset in date format because ahead we are going to transform the data to days format\ngr_confirmed1 = gr_confirmed1.reset_index()\n# gr_confirmed.head(3)\n\n# Dates are converted into no of days since 1\/1\/20 so that 1\/1\/20 corresponds to day 1\ngr_confirmed_melt = gr_confirmed\ndates = gr_confirmed_melt.keys()\nFMT = '%m\/%d\/%y'\n\ndays = dates.map(lambda x: (datetime.strptime(x, FMT) - datetime.strptime(\"1\/1\/20\", FMT)).days)\n\ndays = days + 1 # +1 is to start the days from 1 instead of 0\n\ngr_confirmed_melt.columns = days # = dates will convert the columns to date formats again\n\nx_lag = gr_confirmed_melt.ge(10).idxmax(axis=1) # x_lag gives position of first value in each row which is greater than or equal to 10\n\nfor i in range(gr_confirmed_melt.shape[0]): # gr_confirmed_melt.shape[0] = 187 (no. of rows) and gr_confirmed_melt.shape[1] = 138 (no. of columns)\n    gr_confirmed_melt.iloc[i] = gr_confirmed_melt.iloc[i].shift(periods=-x_lag[i]+1) # all data shift to one starting point \n# gr_confirmed_melt.head(3)\n\n# Melting our Confirmed Cases dataset\n\ngr_confirmed_melt = gr_confirmed_melt.reset_index()\ngr_confirmed_melt = pd.melt(gr_confirmed_melt,id_vars= \"Country\/Region\", \n                       value_vars=days, var_name=\"Days\", \n                       value_name=\"Cumulative Confirmed Count\").sort_values([\"Country\/Region\",\"Days\"], ignore_index=True)\n\n# gr_confirmed_melt.set_index(\"Country\/Region\", inplace = True)\n# gr_confirmed_melt.shape\ngr_confirmed_melt.head(5)","4d7eb29c":"# Importing Deaths Dataset\n# url_death = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv'\n# df_death = pd.read_csv(url_death, index_col=\"Country\/Region\")\ndf_death = pd.read_csv('..\/input\/time-series-data-covid19\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv', \n                       header = 0, index_col=\"Country\/Region\")\ndf_death.drop(['Lat', 'Long'], axis=1, inplace=True)\ndf_death.head(3)","70761591":"# Country grouping on original dataframe        \ngr_death = df_death.groupby(\"Country\/Region\").sum()\ngr_death.head(3)\n\n# # Now adding Australian dataframe\n# gr_death = pd.concat([gr_death, Aust_death])\n\n# Adding data for China (1-Jan to 20-Jan) \nlab=[]\nfor i in range(1,22):\n    lab.append(\"1\/\" + str(i) + \"\/20\")\n    gr_death.insert(i-1,lab[i-1],0)\ngr_death.loc[\"China\"][0:10] = 1\ngr_death.loc[\"China\"][10:21] = 1\n\n# Remove Diamond princess\ngr_death = gr_death.drop([\"Diamond Princess\", \"MS Zaandam\"])\n# gr_death.to_csv(\"C:\/Users\/user\/Downloads\/COVID-19 Related Info\/Deaths.csv\")\n\ngr_death1 = gr_death.copy() # To have a copy of death dataset in date format because ahead we are going to transform the data to days format\ngr_death1 = gr_death1.reset_index()\n# gr_death1.to_csv(\"C:\/Users\/user\/Downloads\/COVID-19 Related Info\/Created Files\/Deaths_datewise.csv\")\n\ngr_death.head(3)","b4fa4363":"# Checking for the missing values in the death Cases dataset\n\ngr_death.isnull().sum().sum()\ngr_death.isna().sum().sum()\n\n# Hence, there are no missing values in our death Cases data. ","7f4162fa":"# Dates are converted into no of days since 1\/1\/20 so that 1\/1\/20 corresponds to day 1\ngr_death_melt = gr_death\ndates = gr_death_melt.keys()\nFMT = '%m\/%d\/%y'\n\ndays = dates.map(lambda x: (datetime.strptime(x, FMT) - datetime.strptime(\"1\/1\/20\", FMT)).days)\ndays = days + 1\n# +1 is to start the days from 1 instead of 0\n\ngr_death_melt.columns = days # = dates will convert the columns to date formats again\n\nx_lag  # x_lag gives position of first value in each row which is greater than or equal to 5 in confirmed cases dataset\n\nfor i in range(gr_death_melt.shape[0]): # gr_death_melt.shape[0] = 187 (no. of rows) and gr_death_melt.shape[1] = 138 (no. of columns)\n    gr_death_melt.iloc[i] = gr_death_melt.iloc[i].shift(periods=-x_lag[i]+1) # all data shift to one starting point \n# gr_death_melt.head(3)\n\n# Melting our Confirmed Cases dataset\n\ngr_death_melt = gr_death_melt.reset_index()\ngr_death_melt = pd.melt(gr_death_melt,id_vars= \"Country\/Region\", \n                       value_vars=days, var_name=\"Days\", \n                       value_name=\"Cumulative Death Count\").sort_values([\"Country\/Region\",\"Days\"], ignore_index=True)\n\n# gr_death_melt.set_index(\"Country\/Region\", inplace = True)\n# gr_death_melt.to_csv(\"C:\/Users\/user\/Downloads\/COVID-19 Related Info\/Created Files\/Deaths_daywise_melted.csv\")\n# gr_death_melt.shape\ngr_death_melt.head(5)","60db7616":"# Importing dataset for Recovered Cases\n# url_recovered = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\"\n# df_recovered = pd.read_csv(url_recovered, index_col=\"Country\/Region\")\ndf_recovered = pd.read_csv(\"..\/input\/time-series-data-covid19\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\",\n                           header = 0, index_col=\"Country\/Region\")\n\ndf_recovered.drop(['Lat', 'Long'], axis=1, inplace=True)\ndf_recovered.head(3)\n","0ff5440f":"# Country grouping on original dataframe        \ngr_recovered = df_recovered.groupby(\"Country\/Region\").sum()\n\n# Now adding Australian dataframe\n# gr_death = pd.concat([gr_death, Aust_death])\n\n# Adding data for China (1-Jan to 20-Jan) \nlab=[]\nfor i in range(1,22):\n    lab.append(\"1\/\" + str(i) + \"\/20\")\n    gr_recovered.insert(i-1,lab[i-1],0)\ngr_recovered.loc[\"China\"][0:10] = 0\ngr_recovered.loc[\"China\"][10:21] = 0\n\n# Remove Diamond princess\ngr_recovered = gr_recovered.drop([\"Diamond Princess\", \"MS Zaandam\"])\n\n# Adding the prefix to  all columns of Deaths dataset columns, which are dates to distingish them \n# from dates under Confirmed Cases dataset columns which are also same dates.\n# gr_recovered = gr_recovered.add_prefix(\"Recovered Cases on \")\n\ngr_recovered1 = gr_recovered.copy()  # To have a copy of Recovered Cases dataset in date format because ahead we are going to transform the data to days format\ngr_recovered1 = gr_recovered1.reset_index()\n# gr_recovered1.to_csv(\"C:\/Users\/user\/Downloads\/COVID-19 Related Info\/Created Files\/Recovered_datewise.csv\")\n\n# gr_recovered.shape\ngr_recovered.head(3)","602914ca":"# Checking for the missing values in the Recovered Cases dataset\n\ngr_recovered.isnull().sum().sum()\ngr_recovered.isna().sum().sum()\n\n# Hence, there are no missing values in our Recovered Cases data. ","cec28fa1":"# Dates are converted into no of days since 1\/1\/20 so that 1\/1\/20 corresponds to day 1\ngr_recovered_melt = gr_recovered\ndates = gr_recovered_melt.keys()\nFMT = '%m\/%d\/%y'\n\ndays = dates.map(lambda x: (datetime.strptime(x, FMT) - datetime.strptime(\"1\/1\/20\", FMT)).days)\n\ndays = days + 1\n# +1 is to start the days from 1 instead of 0\n\ngr_recovered_melt.columns = days # = dates will convert the columns to date formats again\n\nx_lag # x_lag gives position of first value in each row which is greater than or equal to 5 in confirmed cases data\n\nfor i in range(gr_recovered_melt.shape[0]): # gr_recovered_melt.shape[0] = 187 (no. of rows) and gr_recovered_melt.shape[1] = 138 (no. of columns)\n    gr_recovered_melt.iloc[i] = gr_recovered_melt.iloc[i].shift(periods=-x_lag[i]+1) # all data shift to one starting point \ngr_recovered_melt.head(3)\n\n#### Melting our Confirmed Cases dataset\n\ngr_recovered_melt = gr_recovered_melt.reset_index()\ngr_recovered_melt = pd.melt(gr_recovered_melt,id_vars= \"Country\/Region\", \n                       value_vars=days, var_name=\"Days\", \n                       value_name=\"Cumulative Recovered Count\").sort_values([\"Country\/Region\",\"Days\"], ignore_index=True)\n\n# gr_recovered_melt.set_index(\"Country\/Region\", inplace = True)\n# gr_recovered_melt.to_csv(\"C:\/Users\/user\/Downloads\/COVID-19 Related Info\/Created Files\/Recovered_daywise_melted.csv\")\n# gr_recovered_melt.shape\ngr_recovered_melt.head(5)","cbce8481":"# url_test= 'https:\/\/raw.githubusercontent.com\/owid\/covid-19-data\/master\/public\/data\/testing\/covid-testing-all-observations.csv'\n# df_test = pd.read_csv(url_test)\ndf_test = pd.read_csv(\"..\/input\/testing-data-covid19\/public\/data\/testing\/covid-testing-all-observations.csv\", header = 0)\ndf_test.head(2)","f7d74de2":"df_test.shape","f2a8eb3b":"df_test.columns","a88d732b":"# Changing the \"Date\" column from object type to type datetime\ndf_test['Date'] = df_test['Date'].astype('datetime64[ns]')    \n\n# Changing the format of the \"Date\" column to the one matching the dates in Confirmed Cases\/Deaths and Recovered Cases datasets.\ndf_test['Date'] = df_test['Date'].dt.strftime('%m\/%d\/%y')\ndf_test.dtypes","a2967fd2":"df_test.drop(['ISO code','Source URL', 'Source label', 'Notes',\n#               'Cumulative total',\n#               'Daily change in cumulative total',\n              'Cumulative total per thousand',\n              'Daily change in cumulative total per thousand'], axis=1, inplace=True)\n#               '7-day smoothed daily change',\n#               7-day smoothed daily change per thousand,], ","a736cac3":"df_test = df_test.drop(df_test[df_test[\"Entity\"].isin(['India - people tested',\n#               'France - tests performed',\n              'France - people tested',\n              'Italy - people tested',\n              'Japan - tests performed',\n              'Poland - people tested',\n              'Singapore - people tested',\n#               'Sweden - people tested',\n              'Sweden - samples tested',                           \n              'United States - tests performed (CDC) (incl. non-PCR)'\n              ])].index)","3d1fe031":"df_test.head(5)","c9049e0a":"# Modifying the name of the \"Entity\" column to \"Country\/Region\" as in confirmed and deaths datasets to join them using same \n# column with same name\n# And renaming other columns to be more informative\ndf_test= df_test.rename(columns={\"Entity\":\"Country\/Region\",\"Cumulative total\": \"Cumulative Testing Count\",\n                                \"Daily change in cumulative total\": \"Daily Testing Count\",\n                                \"7-day smoothed daily change\": \"7-day smoothed daily change in testing\",\n                                \"7-day smoothed daily change per thousand\":\"7-day smoothed daily change per thousand in testing\"\n                                }) \ndf_test.head(3)","1a55cf42":"# b) To get the country name from the value under Entity column like: \"Argentina\" from \"Argentina - tests performed\"\ndf_test[\"Country\/Region\"]= df_test[\"Country\/Region\"].str.split(\" -\", n=1, expand=True)\ndf_test.head(3)","83759451":"df_test1 = df_test[[\"Country\/Region\", \"Date\", \"Cumulative Testing Count\"]]\ndf_test2 = df_test[[\"Country\/Region\", \"Date\", \"Daily Testing Count\"]]\ndf_test3 = df_test[[\"Country\/Region\", \"Date\", \"7-day smoothed daily change in testing\"]]\ndf_test4 = df_test[[\"Country\/Region\", \"Date\", \"7-day smoothed daily change per thousand in testing\"]]\ndata = [df_test1, df_test2, df_test3, df_test4]","4a2dd03d":"index = [\"Cumulative Testing Count\", \"Daily Testing Count\", \"7-day smoothed daily change in testing\", \"7-day smoothed daily change per thousand in testing\"]\ndf_unmelted = []\nfor i, df in enumerate(data):\n    df_test_unmelted = []\n    df_test_unmelted = df.pivot_table(index=\"Country\/Region\", columns='Date')\n    df_test_unmelted = df_test_unmelted[index[i]].reset_index()\n    df_test_unmelted.columns.name = None\n    df_unmelted.append(df_test_unmelted)","f23a441e":"df_unmelted[0].head()","7a81e656":"for index in range(2,4):\n    lab=[]\n    for i in range(1,8):\n        df_unmelted[index] = df_unmelted[index].set_index(\"Country\/Region\")\n        lab.append(\"01\/0\" + str(i) + \"\/20\")\n        df_unmelted[index].insert(loc=i-1,column=lab[i-1], value=np.nan)\n        df_unmelted[index] = df_unmelted[index].reset_index()\n        \ndf_unmelted[3].head()    ","05ea59d6":"# Comparing the Confirmed Cases (or\/Deaths\/ Recovered Cases) dataset with Testing data for different country names for the same\n# country or different countries in the two datasets using the gr_confirmed1 file - the datewise dataset copy of confirmed cases\n# and the unmelted testing dataset (df_test_unmelted)\n\ncountries_in_either_datasets = pd.merge(gr_confirmed1[\"Country\/Region\"], df_unmelted[0],  how='outer',on= \"Country\/Region\", indicator = True)\n# countries_in_either_datasets\n\ncountries_only_in_df_ConfirmedData =countries_in_either_datasets[countries_in_either_datasets['_merge'] == 'left_only']\ncountries_only_in_df_TestData = countries_in_either_datasets[countries_in_either_datasets['_merge'] == 'right_only']\n\ncountries_only_in_df_TestData\n# countries_only_in_df_ConfirmedData","93540a21":"# Doing this check we get to know that in gr_death and gr_confirmed and gr_recovered has 186 rows each and all values are common\n# but in test_df there are just 82 rows out of which following rows are just in test_df and some values out of these are different \n# names for the same country presnt in the other 3 dataframes. So we rename those values and keep other which are not present\n# in other 3 dataframes just like that, with NAs for their columns for those countries.\n\n# gr_confirmed1 = gr_confirmed1.rename(index={'Taiwan*': 'Taiwan'})\n# df_test_unmelted = df_test_unmelted.rename(index={'United States': 'US', \"Czech Republic\":\"Czechia\", \"South Korea\": \"Korea, South\"})\n\ngr_confirmed1[\"Country\/Region\"].replace({'Taiwan*': 'Taiwan'}, inplace = True)\nfor df in df_unmelted:\n    df[\"Country\/Region\"].replace({'United States': 'US', \"Czech Republic\":\"Czechia\", \"South Korea\": \"Korea, South\"}, inplace = True)\n","f0da1eed":"# Making the Changes in original datasets of Confirmed Cases\/ Deaths\/ Recovered  datasets and their melted forms\n\ngr_confirmed = gr_confirmed.rename(index={'Taiwan*': 'Taiwan'})\ngr_death = gr_death.rename(index={'Taiwan*': 'Taiwan'})\ngr_recovered = gr_recovered.rename(index={'Taiwan*': 'Taiwan'})\n\ngr_confirmed_melt = gr_confirmed_melt.replace({'Taiwan*': 'Taiwan'})\ngr_death_melt = gr_death_melt.replace({'Taiwan*': 'Taiwan'})\ngr_recovered_melt = gr_recovered_melt.replace({'Taiwan*': 'Taiwan'})","d0252974":"# To include all the countries which are there in Confirmed Cases\/ Deaths\/ Recovered Cases Datasets \n# By joining the \"Country\/Region\"  column in Confirmed Cases dataset with the whole testing (unmelted) data by joining on\n# common column \"Country\/Region\"\n\n# df_test_unmelted = pd.merge(gr_confirmed1['Country\/Region'], df_test_unmelted, on='Country\/Region', how='outer', indicator=True)\n# df_test_unmelted = df_test_unmelted_1[df_test_unmelted_1['_merge'] == 'left_only']\n# for df in df_unmelted:\nfor i in range(0,(len(df_unmelted))):\n    df_unmelted[i] = pd.merge(gr_confirmed1['Country\/Region'], df_unmelted[i], on='Country\/Region', how='left')\n","5f2f4c61":"# df_unmelted[2][\"Country\/Region\"].unique()\ndf_unmelted[2].head()","0274b9eb":"# for df in df_unmelted:\n#     df.fillna(0, inplace=True)\n# #     df.set_index(\"Country\/Region\", inplace=True)\n# df_unmelted[2].head(3)","41b07ae1":"for df in df_unmelted:\n    df.set_index(\"Country\/Region\", inplace=True)","c1049b37":"name = [\"Cumulative Testing Count\", \"Daily Testing Count\", \"7-day smoothed daily change in testing\", \"7-day smoothed daily change per thousand in testing\"]\ndf_melt=[]\nfor index, df in enumerate(df_unmelted):\n    # Dates are converted into no of days since 1\/1\/20 so that 1\/1\/20 corresponds to day 1\n    df_test_melt = df\n    dates = df_test_melt.keys()\n    FMT = '%m\/%d\/%y'\n\n    days = dates.map(lambda x: (datetime.strptime(x, FMT) - datetime.strptime(\"01\/01\/20\", FMT)).days)\n    days = days + 1\n    # +1 is to start the days from 1 instead of 0\n\n    df_test_melt.columns = days # = dates will convert the columns to date formats again\n\n    x_lag  # x_lag gives position of first value in each row which is greater than or equal to 5 in confirmed cases data\n\n    for i in range(df_test_melt.shape[0]): # gr_recovered_melt.shape[0] = 187 (no. of rows) and gr_recovered_melt.shape[1] = 138 (no. of columns)\n        df_test_melt.iloc[i] = df_test_melt.iloc[i].shift(periods=-x_lag[i]+1) # all data shift to one starting point \n    df_test_melt.head(3)\n\n    #### Melting our Confirmed Cases dataset\n\n    df_test_melt = df_test_melt.reset_index()\n    df_test_melt = pd.melt(df_test_melt,id_vars= \"Country\/Region\", \n                           value_vars=days, var_name=\"Days\", \n                           value_name=name[index]).sort_values([\"Country\/Region\",\"Days\"], ignore_index=True)\n\n#     df_test_melt.to_csv(\"C:\/Users\/user\/Downloads\/COVID-19 Related info\/Created Files\/Testing_daywise_melted.csv\")\n    df_melt.append(df_test_melt)\n    ","c8d6d8a0":"for i in range(1,(len(df_melt))): # loop is for len(data)-1 time, because upper bound is not included\n    df_melt[0] = pd.merge(df_melt[0], df_melt[i], how=\"outer\", on=[\"Country\/Region\", \"Days\"])\n\ndf_test_melt= df_melt[0]","6cf9718b":"# df_test_melt = df_test_melt.set_index(\"Country\/Region\")\ndf_test_melt.loc[df_test_melt[\"Country\/Region\"] ==\"Austria\"].head(5)","c0415b1d":"df_test_melt[\"smoothed_cumulative_testing_count\"] = df_test_melt[\"Cumulative Testing Count\"].copy()\nfor country in df_test_melt[\"Country\/Region\"].unique():\n    index_max = df_test_melt.loc[df_test_melt[\"Country\/Region\"]==country, \"smoothed_cumulative_testing_count\"].argmax()\n    df_test_melt.loc[df_test_melt[\"Country\/Region\"]==country, \"smoothed_cumulative_testing_count\"] = df_test_melt.loc[df_test_melt[\"Country\/Region\"]==country, \"smoothed_cumulative_testing_count\"].iloc[:index_max+1].interpolate()","64d80e95":"# Rounding of the values in the created new column \"smoothed_cumulative_testing_count\"\ndf_test_melt[\"smoothed_cumulative_testing_count\"] = round(df_test_melt[\"smoothed_cumulative_testing_count\"])\n\n# Rearranging the columns such that \"smoothed_cumulative_testing_count\" is adjacent to \"Cumulative conformed Count\" column for validation.\ndf_test_melt = df_test_melt[[\"Country\/Region\", \"Days\", \"Cumulative Testing Count\", \"smoothed_cumulative_testing_count\",\n                             \"Daily Testing Count\",\n                            \"7-day smoothed daily change in testing\", \"7-day smoothed daily change per thousand in testing\"]]\n# df_test_melt = df_test_melt.set_index(\"Country\/Region\")","aaca48d0":"# df_test_melt.loc[df_test_melt[\"Country\/Region\"] ==\"Germany\"]","84b4a1a5":"# gr_confirmed_melt.shape\n# gr_death_melt.shape\n# gr_recovered_melt.shape\n# gr_recovered_melt.shape\n# df_test_melt.shape","04e8eaae":"df1 = gr_confirmed_melt \ndf2 = gr_death_melt \ndf3 = gr_recovered_melt \ndf4 = df_test_melt","172d2c25":"# df1.to_csv(\"C:\/Users\/user\/Downloads\/COVID-19 Related info\/Created Files\/df1.csv\")\n# df2.to_csv(\"C:\/Users\/user\/Downloads\/COVID-19 Related info\/Created Files\/df2.csv\")\n# df3.to_csv(\"C:\/Users\/user\/Downloads\/COVID-19 Related info\/Created Files\/df3.csv\")\n# df4.to_csv(\"C:\/Users\/user\/Downloads\/COVID-19 Related info\/Created Files\/df4.csv\")","2373bb3f":"data = [df1, df2, df3, df4]\nlen(data)\nfor i in range(1,(len(data))): # Actually the loop runs for len(data)-1 time, because upper bound is not included\n    data[0] = pd.merge(data[0], data[i], how=\"inner\", on=[\"Country\/Region\", \"Days\"])\nMergedData = data[0]\n# MergedData.set_index(\"Country\/Region\", inplace = True)","0ae65c23":"# MergedData.to_csv(\"C:\/Users\/user\/Downloads\/COVID-19 Related info\/Created Files\/Merged_Data.csv\")","9f6aefa0":"MergedData.head()","c7e26d1c":"# df_pop = pd.read_csv(\"C:\/Users\/user\/Downloads\/COVID-19 Related info\/Population Data.csv\", encoding  = 'latin-1')\ndf_pop = pd.read_csv(\"..\/input\/population-data\/Population Data.csv\", encoding = \"latin-1\", header = 0)\ndf_pop.head(3)\n# df_pop.shape","3bd934aa":"# temp = pd.merge(MergedData, df_pop, how=\"outer\", on=[\"Country\/Region\"], indicator = True)","95b37fdb":"# Check which countries are only in df_pop and which are only in MergedData and see if there are different names \n# for the same countries in the two dataframes and naming them identically\n\n# temp[temp['_merge'] == 'right_only']\n# temp[temp['_merge'] == 'left_only']","0e27eb79":"df_pop['Country\/Region'] = df_pop['Country\/Region'].replace({ 'Myanmar': 'Burma',\n                                                               'Congo': 'Congo (Brazzaville)',\n                                                               'DR Congo': 'Congo (Kinshasa)',\n                                                               'C\u00f4te d\\'Ivoire': 'Cote d\\'Ivoire',\n                                                               'Czech Republic (Czechia)': 'Czechia',\n                                                              'South Korea': 'Korea, South',\n                                                              'Saint Kitts & Nevis':'Saint Kitts and Nevis',\n                                                              'St. Vincent & Grenadines':'Saint Vincent and the Grenadines',\n                                                              'Sao Tome & Principe':'Sao Tome and Principe',\n                                                              'United States': 'US',\n                                                              'State of Palestine' : 'West Bank and Gaza',\n                                                              })\n","9d9feb2d":"MergedData = pd.merge(MergedData, df_pop, how=\"left\", on=[\"Country\/Region\"])\nMergedData.head(3)","90fbf9f7":"# MergedData.loc[MergedData['Population'].isna()]","397289fd":"MergedData.loc[MergedData[\"Country\/Region\"] == 'Kosovo', 'Population'] = 1810936\nMergedData.loc[MergedData[\"Country\/Region\"] == 'Kosovo', 'Land_Area_Kmsq'] = 10887\nMergedData.loc[MergedData[\"Country\/Region\"] == 'Kosovo', 'Pop_Density'] = 166","33527509":"# df_hcs = pd.read_csv(\"C:\/Users\/user\/Downloads\/COVID-19 Related info\/Health Capacity Score.csv\", encoding  = 'latin-1')\ndf_hcs = pd.read_csv(\"..\/input\/health-capacity-score\/Health Capacity Score.csv\", header = 0, encoding = \"latin-1\")\ndf_hcs.head(3)","a83cbeaa":"# df_hcs.sort_values(by = \"Score\/100\", ascending = False).head(10)","b2b5ef45":"temp1 = pd.merge(MergedData, df_hcs, how=\"outer\", on=[\"Country\/Region\"], indicator = True)","26c33a29":"# Check which countries are only in df_hi and which are only in MergedData and see if there are different names \n# for the same countries in the two dataframes and naming them identically\n\n# temp1[temp1['_merge'] == 'right_only']\n# temp1[temp1['_merge'] == 'left_only']","f8e66d83":"df_hcs['Country\/Region'] = df_hcs['Country\/Region'].replace({ 'Myanmar': 'Burma',\n                                                               'Congo (Democratic Republic)': 'Congo (Kinshasa)',\n                                                               'C\u00f4te d\\'Ivoire': 'Cote d\\'Ivoire',\n                                                               'Czech Republic': 'Czechia',\n                                                               'eSwatini (Swaziland)' : 'Eswatini',\n                                                               'Kyrgyz Republic': 'Kyrgyzstan',\n                                                              'South Korea': 'Korea, South',\n                                                              'St Kitts and Nevis':'Saint Kitts and Nevis',\n                                                              'St Lucia' : 'Saint Lucia',\n                                                              'St Vincent and The Grenadines':'Saint Vincent and the Grenadines',\n                                                              'S\u00e3o Tom\u00e9 and Pr\u00edncipe':'Sao Tome and Principe',\n                                                              'United States': 'US',\n                                                              'State of Palestine' : 'West Bank and Gaza'\n                                                              })","66672ed1":"MergedData = pd.merge(MergedData, df_hcs, how=\"left\", on=[\"Country\/Region\"])\nMergedData.head(3)","2ed3866c":"MergedData.loc[MergedData[\"Country\/Region\"] == \"Australia\"].head(3)","b9ec36c3":"\nMergedData['Daily Confirmed Count'] = MergedData['Cumulative Confirmed Count'].diff()#.fillna(MergedData['Cumulative Confirmed Count'])\nMergedData['Daily_Confirmed_7day_rolling_average'] = MergedData[\"Daily Confirmed Count\"].rolling(window=7).mean()\nMergedData['Daily_Confirmed_7day_rolling_average_per_million'] = (MergedData['Daily_Confirmed_7day_rolling_average']\/MergedData[\"Population\"])*1000000\nMergedData['Daily Death Count'] = MergedData['Cumulative Death Count'].diff()#.fillna(MergedData[\"Cumulative Death Count\"])\nMergedData['Daily Recovered Count'] = MergedData['Cumulative Recovered Count']#.diff().fillna(MergedData[\"Cumulative Recovered Count\"])\n\nMergedData[\"RecoveryRate\"] = round((MergedData[\"Cumulative Recovered Count\"]\/MergedData[\"Cumulative Confirmed Count\"])*100,4)\nMergedData[\"FatalityRate\"] = round((MergedData[\"Cumulative Death Count\"]\/MergedData[\"Cumulative Confirmed Count\"])*100,2)\nMergedData[\"ActiveCases\"] = MergedData[\"Cumulative Confirmed Count\"]-MergedData[\"Cumulative Recovered Count\"]-MergedData[\"Cumulative Death Count\"]\n# MergedData[\"CumConfirmed_per_Population\"] = round((MergedData[\"Cumulative Confirmed Count\"]\/MergedData[\"Population\"])*100,6)\n# MergedData[\"CumTesting_per_Population\"] = round(MergedData[\"Cumulative Testing Count\"]\/MergedData[\"Population\"],4)\n# MergedData[\"CumTesting_per_CumConfirmed\"] = round(MergedData[\"Cumulative Testing Count\"]\/MergedData[\"Cumulative Confirmed Count\"],4)\nMergedData[\"CumConfirmed_per_million\"] = round((MergedData[\"Cumulative Confirmed Count\"]\/MergedData[\"Population\"])*1000000,6)\nMergedData[\"SmoothedCumTesting_per_thousand\"] = round((MergedData[\"smoothed_cumulative_testing_count\"]\/MergedData[\"Population\"])*1000,6)\nMergedData[\"SmoothedCumTesting_per_CumConfirmed\"] = round(MergedData[\"smoothed_cumulative_testing_count\"]\/MergedData[\"Cumulative Confirmed Count\"],4)\nMergedData[\"CumConfirmed_per_SmoothedCumTesting_percent\"] = round((MergedData[\"Cumulative Confirmed Count\"]\/MergedData[\"smoothed_cumulative_testing_count\"])*100,4)\n\n\n\nMergedData = MergedData[['Country\/Region', 'Days', 'Cumulative Confirmed Count', 'Daily Confirmed Count', \n                         'Daily_Confirmed_7day_rolling_average', 'Daily_Confirmed_7day_rolling_average_per_million',\n                         'Cumulative Death Count', 'Daily Death Count', \n                         'Cumulative Recovered Count', 'Daily Recovered Count', \n                         'Cumulative Testing Count','smoothed_cumulative_testing_count', 'Daily Testing Count',\n                         '7-day smoothed daily change in testing', '7-day smoothed daily change per thousand in testing', \n                         'Population', 'Pop_Density','Land_Area_Kmsq', \n                         'Score\/100',\n                         'RecoveryRate','FatalityRate', 'ActiveCases',\n                         'CumConfirmed_per_million', 'SmoothedCumTesting_per_thousand',\n                         'SmoothedCumTesting_per_CumConfirmed', \"CumConfirmed_per_SmoothedCumTesting_percent\"\n                        ]] \nMergedData.head(5)","c4adf861":"#### Interpolating \"Cumulative Testing Count \" and storing the values in a new column named \"smoothed_cumulative_testing_count\"","1f26be36":"# MergedData[\"smoothed_cumulative_testing_count\"] = MergedData[\"Cumulative Testing Count\"].copy()\n# for country in MergedData[\"Country\/Region\"].unique():\n#     index_max = MergedData.loc[df_test_melt[\"Country\/Region\"]==country, \"Cumulative Confirmed Count\"].argmax()\n#     MergedData.loc[MergedData[\"Country\/Region\"]==country, \"smoothed_cumulative_testing_count\"] = MergedData.loc[MergedData[\"Country\/Region\"]==country, \"smoothed_cumulative_testing_count\"].iloc[:index_max+1].interpolate()\n\n# # Rounding of the values in the created new column \"smoothed_cumulative_testing_count\"\n# MergedData[\"smoothed_cumulative_testing_count\"] = round(MergedData[\"smoothed_cumulative_testing_count\"])","44089ab7":"MergedData.columns","ee7fa3e6":"# MergedData.loc[MergedData[\"Country\/Region\"]==\"Fiji\"][[\"Country\/Region\", \"Days\",\"Daily Confirmed Count\", \"Cumulative Confirmed Count\",\n#                                                        \"Cumulative Testing Count\",\"smoothed_cumulative_testing_count\", \"SmoothedCumTesting_per_CumConfirmed\",\n#                                                          \"Cumulative Testing Count\", \"CumTesting_per_CumConfirmed\"]]","d374033f":"#output_file-to save the layout in file, show-display the layout , output_notebook-to configure the default output state  to generate the output in jupytor notebook.\nfrom bokeh.io import curdoc, output_file, show , output_notebook \n#ColumnDataSource makes selection of the column easier and Select is used to create drop down \nfrom bokeh.models import ColumnDataSource, DataRange1d, Legend, Div, Select, RadioGroup, MultiSelect, Title, Label, Span\nfrom bokeh.models import ZoomInTool,ZoomOutTool, ResetTool, HoverTool, BoxZoomTool\nfrom bokeh.models import CustomJS, Panel, Tabs, BoxAnnotation\nfrom bokeh.plotting import figure \nfrom bokeh.layouts import column, row, gridplot, layout\nfrom bokeh.palettes import YlOrRd, RdYlGn, Inferno, Viridis, Magma\noutput_notebook() #create default state to generate the output\n","1301496c":"# Creating a copy of MergedData to be used for converting it to ColumnDataSources for bokeh \n# plots\ndata = MergedData.copy()","e02362d1":"# Spaced column names do not returend values while hovering over bokeh plot, so creating one word \n# names for columns\n\ndata.rename(columns={'Country\/Region': 'Country',\n                     'Cumulative Confirmed Count':'CumConfirmed',\n                     'Cumulative Death Count':'CumDeaths',\n                     'Cumulative Recovered Count':'CumRecovered',\n                     'Cumulative Testing Count':'CumTesting',\n                     'Daily Confirmed Count':'DailyConfirmed',\n                     'Daily Death Count':'DailyDeaths',\n                     'Daily Recovered Count':'DailyRecovered',\n                     'Daily Testing Count':'DailyTesting', \n                     '7-day smoothed daily change in testing': 'Daily_testing_7day_rolling_average',\n                     '7-day smoothed daily change per thousand in testing': 'Daily_testing_7day_rolling_average_per_thousand',\n                     'ActiveCases': 'Active',\n                     'Score\/100': 'HealthCapacityScore'}, \n                      inplace=True)","eaef76f3":"# Step 1: Creating ColumnDataSources \n\ndata_all=data.loc[:, ['Country','Days', 'CumConfirmed', 'CumDeaths', 'CumRecovered', 'CumTesting', 'smoothed_cumulative_testing_count']]\ndata_curr = data_all[data_all['Country'] == 'Australia' ]\n\nOverall = ColumnDataSource(data=data_all)\nCurr=ColumnDataSource(data=data_curr)\n\n#------------------------------------------------------------------------------------------\n\n# Step 2:\n# Defining callback function which links plots and the select menu\n\ncallback = CustomJS(args=dict(source=Overall, current=Curr), code=\"\"\"\nvar selected_country = cb_obj.value\ncurrent.data['Days']=[]\ncurrent.data['CumConfirmed']=[]\ncurrent.data['CumDeaths'] = []\ncurrent.data['CumRecovered'] = []\ncurrent.data['CumTesting'] = []\ncurrent.data[\"smoothed_cumulative_testing_count\"] = []\nfor(var i = 0; i <= source.get_length(); i++){\n\tif (source.data['Country'][i] == selected_country){\n\t\tcurrent.data['Days'].push(source.data['Days'][i])\n\t\tcurrent.data['CumConfirmed'].push(source.data['CumConfirmed'][i])\n\t\tcurrent.data['CumDeaths'].push(source.data['CumDeaths'][i])\n\t\tcurrent.data['CumRecovered'].push(source.data['CumRecovered'][i])\n\t\tcurrent.data['CumTesting'].push(source.data['CumTesting'][i]) \n        current.data[\"smoothed_cumulative_testing_count\"].push(source.data[\"smoothed_cumulative_testing_count\"][i])\n\t }          \n} \ncurrent.change.emit();\n\"\"\")\n\n#-------------------------------------------------------------------------------------------\n# Step 3: Creating menu\nmenu = Select(options=list(data['Country'].unique()),value='Australia', title=\"Select Country:\")  # drop down menu\n\n#------------------------------------------------------------------------------------------\n# Step 4: Creating plot\n\n# 1.\n# Creating empty list for storing two figures :1 with LogScale for y-axis and other with LinearScale\n# These two plots are shown in separate tabs in he same plot\nP = [] \naxis_type =[\"log\", \"linear\"]\n\n# 2.\n# Creating figure for the plot\nfor i in range(2):\n    p1 = figure(x_axis_label ='Days', y_axis_label = 'Number of Cases', y_axis_type = axis_type[i])#creating figure object \n\n# 3.\n# Plotting line graph on the figure\n       \n    line1 = p1.line(x='Days', y=\"CumConfirmed\", source=Curr, color = \"red\", line_width = 2) # plotting the data using glyph circle\n    circle1 = p1.circle(x='Days', y=\"CumConfirmed\", source=Curr, color = \"red\", size = 1)\n    line2 = p1.line(x='Days', y=\"CumDeaths\", source=Curr, color = \"black\", line_width = 2)\n    circle2 = p1.circle(x='Days', y=\"CumDeaths\", source=Curr, color = \"black\", size = 2)\n    line3 = p1.line(x='Days', y=\"CumRecovered\", source=Curr, color = \"darkgreen\", line_width = 2)\n    circle3 = p1.circle(x='Days', y=\"CumRecovered\", source=Curr, color = \"darkgreen\", size = 2)\n    line4 = p1.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=Curr, color = \"navy\", line_width = 2)\n    circle4 = p1.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=Curr, color = \"navy\", size = 2)  \n\n# 4.\n# Stylizing\n\n    # Stylize the plot area\n    p1.plot_width = 650               \n    p1.plot_height = 350                 \n    p1.background_fill_color = \"#1f77b4\"   \n    p1.background_fill_alpha = 0.12\n    \n    # Stylize the grid\n    p1.xgrid.grid_line_color = \"white\"\n    p1.ygrid.grid_line_color = \"white\"\n    p1.ygrid.grid_line_alpha = 0.7\n    p1.grid.grid_line_dash = [5,3]\n    \n    # Axes Geometry\n    p1.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\n    p1.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n    \n    # Stylize the axes\n#     p1.y_range.renderers = [line1]\n    if axis_type[i] == \"log\":\n        p1.y_range = DataRange1d(start=1, end = 300000000)\n    if axis_type[i] == \"linear\":\n        p1.yaxis.formatter.use_scientific = False\n    p1.axis.axis_label_text_font_style = \"bold\" #\"normal\", \"italic\"\n    p1.axis.axis_label_text_color = \"black\"\n    p1.yaxis.minor_tick_in = 0\n    p1.yaxis.minor_tick_out = 0\n    p1.xaxis.minor_tick_in = 0\n    p1.xaxis.minor_tick_out = 0\n\n    # Stylize the figure title\n    p1.title.text_color = \"black\"\n    p1.title.text_font = \"times\"\n    p1.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\n    p1.title.align = \"center\"\n\n    # Stylize the tools\n    # Adding customization to HoverTool\n#     p1.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\n    hover = HoverTool(tooltips = [((\"Day\", \"@Days\")),(\"Cumulative Confirmed Count\", \"@CumConfirmed\"), (\"Cumulative Death Count\", \"@CumDeaths\"), (\"Cumulative Recovered Count\", \"@CumRecovered\"), (\"Cumulative Testing Count\", \"@smoothed_cumulative_testing_count\")])\n    p1.add_tools(hover) # Customized HoverTool\n    \n    # Stylize the legends\n    legend = Legend(items=[\n    (\"Cum Confirmed Count\",   [line1, circle1]),\n    (\"Cum Death Count\", [line2, circle2]),\n    (\"Cum Recovered Count\", [line3, circle3]),\n    (\"Cum Testing Count \",[line4, circle4]),    \n     ]) #, location=(10,80))\n    legend.background_fill_color = \"#1f77b4\"\n    legend.background_fill_alpha = 0.01\n    legend.label_text_font = \"times\"\n    legend.label_text_font_size = '12px'\n    legend.title = \"Select\/Unselect:\"\n    legend.click_policy=\"hide\"  # To disable\/hide the legend on click\n    # Adding the legends as a layout to the figure\n    p1.add_layout(legend, 'right')\n    \n    # Appending the two figures created under for loop (one with y_axis_type=\"log\" and other\n    # with y_axis_type = \"linear\") into the list P\n    P.append(p1)\n\n# 5. \n# Creating separate tabs for the two figures created above\ntab1 = Panel(child=P[0], title=\"Log scale\")\ntab2 = Panel(child=P[1], title=\"Linear scale\")\n\n#------------------------------------------------------------------------------------------\n# Step 5: Creating list of Tabs\ntabs = Tabs(tabs=[ tab1, tab2 ])\n\n#------------------------------------------------------------------------------------------\n# Step 6: Calling the function on change of selection\n\nmenu.js_on_change('value', callback) \n\n#------------------------------------------------------------------------------------------\n# Step 7: Adding title and footer as a <div> tag (a division or a section in an HTML document)\n\ntitle = Div(text = \"<b> Cumulative Confirmed , Deaths, Recovered and Testing counts for individual countries <\/b>\", \n            width=600, style={'font-size': '125%', 'color': 'black'}, align = \"center\")\nfooter = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q> <\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\") \n\n#------------------------------------------------------------------------------------------\n# Step 8: Creating the layout\n\nlayout=column(title,menu,tabs, footer) \n\n#------------------------------------------------------------------------------------------\n# Step 9: Displaying the layout\nshow(layout) \n","e22304f1":"# Creating plots\n\n# A)\n#------------------------------------------------------------------------------------------\n# Daily Confirmed Count plot for top 5 Health Capacity score countries\n#------------------------------------------------------------------------------------------\n\n# 1. \n# Creating empty list for storing two figures :1 with LogScale for y-axis and other with LinearScale\n# These two plots are shown in separate tabs in he same plot\n\nP = [] \naxis_type =[\"log\", \"linear\"]\n\n# 2.\n# Creating figure for the plot\nfor i in range(2):\n    p3 = figure(x_axis_label ='Days', y_axis_label = \"Cumulative Confirmed Count\", y_axis_type =axis_type[i])\n    # creating figure object \n    #, plot_width=850, plot_height=400\n\n# 3.\n# Creating the graph on figure\n\n    circle1 = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Germany\"]), color = \"darkgreen\", size = 2) # plotting the data using glyph circle\n    line1 = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Germany\"]), color = \"darkgreen\", line_width = 2.5) # plotting the data using glyph circle\n    \n    circle2 = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Korea, South\"]), color = \"dodgerblue\", size = 2) # plotting the data using glyph circle\n    line2 = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Korea, South\"]), color = \"dodgerblue\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle3 = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Finland\"]), color = \"purple\", size = 2) # plotting the data using glyph circle\n    line3 = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Finland\"]), color = \"purple\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle4 = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Denmark\"]), color = \"maroon\", size = 2) # plotting the data using glyph circle\n    line4 = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Denmark\"]), color = \"maroon\", line_width = 2.5) # plotting the data using glyph circle\n    \n    circle5 = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Netherlands\"]), color = \"crimson\", size = 2) # plotting the data using glyph circle\n    line5 = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Netherlands\"]), color = \"crimson\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle6 = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", size = 2.5) # plotting the data using glyph circle\n    line6 = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", line_width = 3) # plotting the data using glyph circle\n\n    circle7 = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Croatia\"]), color = \"slateblue\", size = 2) # plotting the data using glyph circle\n    line7 = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Croatia\"]), color = \"slateblue\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle8 = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Japan\"]), color = \"orangered\", size = 2) # plotting the data using glyph circle\n    line8 = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Japan\"]), color = \"orangered\", line_width = 2.5) # plotting the data using glyph circle\n\n# 4. \n# Stylizing\n    \n    # Stylize the plot area\n    p3.plot_width = 600                \n    p3.plot_height = 350                \n    p3.background_fill_color = \"#1f77b4\"   \n    p3.background_fill_alpha = 0.12\n\n    # Stylize the grid\n    p3.xgrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_alpha = 0.7\n    p3.grid.grid_line_dash = [5,3]\n\n    # Axes Geometry\n    p3.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\n    p3.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n    if axis_type[i] == \"log\":\n        p3.y_range = DataRange1d(start=10, end = 1000000)\n    if axis_type[i] == \"linear\":\n        p3.yaxis.formatter.use_scientific = False\n    \n    \n    # Stylize the axes\n    p3.axis.axis_label_text_font_style = \"bold\" #\"normal\", \"italic\"\n    p3.axis.axis_label_text_color = \"black\"\n    p3.yaxis.minor_tick_in = 0\n    p3.yaxis.minor_tick_out = 0\n    p3.xaxis.minor_tick_in = 0\n    p3.xaxis.minor_tick_out = 0\n\n    # Stylize the figure title\n#     p3.y_range.start = 0\n    p3.title.text_color = \"black\"\n    p3.title.text_font = \"times\"\n    p3.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\n    p3.title.align = \"center\"\n\n    # Stylize the tools\n    # Adding customizayion to HoverTool\n    p3.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\n    hover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Day\", \"@Days\"),\n                                  (\"Cumulative Confirmed Count\", \"@CumConfirmed\"),\n                                  (\"Cumulative Testing Count\", \"@CumTesting\"),\n                                  (\"Health Capacity Score\", \"@HealthCapacityScore{0.00}\"),\n                                  (\"Population\", \"@Population{0.00}\")\n                                   ])\n\n    p3.add_tools(hover) # Customization of HoverTool\n    \n    # Adding Annotations\n    mytext1 = Label(x=187, y=25000, text='Australia', text_color = \"navy\", text_font_size='8pt', text_font_style = \"bold\")\n    p3.add_layout(mytext1)\n\n    # Stylize Legends\n    legend = (Legend(items=[(\"Germany\", [circle1, line1]),\n                            (\"Korea, South\", [circle2, line2]),\n                            (\"Finland\", [circle3, line3]),\n                            (\"Denmark\", [circle4, line4]),\n                            (\"Netherlands\", [circle5, line5]),\n                            (\"Australia\", [circle6, line6]),\n                            (\"Croatia\", [circle7, line7]),\n                            (\"Japan\", [circle8, line8])\n                            ]))\n    \n    legend.background_fill_color = \"#1f77b4\"\n    legend.background_fill_alpha = 0\n    legend.border_line_color = None\n    legend.click_policy=\"hide\"  # To disable\/hide the legend on click\n    p3.add_layout(legend, \"right\")\n    P.append(p3)\n    \n# 5. \n# Creating separate tabs for the two figures created above\ntab11 = Panel(child=P[0], title=\"Log scale\")\ntab12 = Panel(child=P[1], title=\"Linear scale\")\n\n# 6.\n# Creating list of Tabs\ntabs1 = Tabs(tabs=[tab11, tab12])\n\n# 7.\n# Adding title as a <div> tag (a division or a section in an HTML document)\n\ntitle1 = Div(text = \"<b> Trajectories for <i> Cumulative Confirmed Counts<\/i> for Top 8 countries with highest Health Capacity Scores <\/b>\", \n           style={'font-size': '125%', 'color': 'black'}, align = \"start\")\nfooter1 = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q><\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\")\n\n\n# B) \n#------------------------------------------------------------------------------------------\n# Daily Testing Count plot for top 5 Health Capcity score countries\n#------------------------------------------------------------------------------------------\n\n# 1.\n# Creating empty list for storing two figures :1 with LogScale for y-axis and other with LinearScale\n# These two plots are shown in separate tabs in he same plot\n\nP = [] \naxis_type =[\"log\", \"linear\"]\n\n# 2.\n# Creating figure for the plot\nfor i in range(2):\n    p3 = figure(x_axis_label ='Days', y_axis_label = \"Cumulative Testing Count\", y_axis_type =axis_type[i])\n#                 , plot_width=850, plot_height=400)#creating figure object \n\n\n# 3.\n# Creating the graph on figure \n\n    circle1 = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Germany\"]), color = \"darkgreen\", size = 2) # plotting the data using glyph circle\n    line1 = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Germany\"]), color = \"darkgreen\", line_width = 2.5) # plotting the data using glyph circle\n    \n    circle2 = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Korea, South\"]), color = \"dodgerblue\", size = 2) # plotting the data using glyph circle\n    line2 = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Korea, South\"]), color = \"dodgerblue\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle3 = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Finland\"]), color = \"purple\", size = 2) # plotting the data using glyph circle\n    line3 = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Finland\"]), color = \"purple\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle4 = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Denmark\"]), color = \"maroon\", size = 2) # plotting the data using glyph circle\n    line4 = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Denmark\"]), color = \"maroon\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle5 = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Netherlands\"]), color = \"crimson\", size = 2) # plotting the data using glyph circle\n    line5 = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Netherlands\"]), color = \"crimson\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle6 = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", size = 2.5) # plotting the data using glyph circle\n    line6 = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", line_width = 3) # plotting the data using glyph circle\n\n    circle7 = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Croatia\"]), color = \"slateblue\", size = 2) # plotting the data using glyph circle\n    line7 = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Croatia\"]), color = \"slateblue\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle8 = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Japan\"]), color = \"orangered\", size = 2) # plotting the data using glyph circle\n    line8 = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Japan\"]), color = \"orangered\", line_width = 2.5) # plotting the data using glyph circle\n\n    \n# 4. \n# Stylizing\n   \n    # Stylize the plot area\n    p3.plot_width = 600                # To change the width of the plot\n    p3.plot_height = 400                 # To change the height of plot\n    p3.background_fill_color = \"#1f77b4\"   # To add background colorto the figure\n    p3.background_fill_alpha = 0.12\n\n    # Stylize the grid\n    p3.xgrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_alpha = 0.7\n    p3.grid.grid_line_dash = [5,3]\n\n    # Axes Geometry\n    p3.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\n    p3.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n    if axis_type[i] == \"log\":\n        p3.y_range = DataRange1d(start=100, end = 50000000)\n    if axis_type[i] == \"linear\":\n        p3.yaxis.formatter.use_scientific = False\n    \n    \n    # Stylize the axes\n    p3.axis.axis_label_text_font_style = \"bold\" #\"normal\", \"italic\"\n    p3.axis.axis_label_text_color = \"black\"\n    p3.yaxis.minor_tick_in = 0\n    p3.yaxis.minor_tick_out = 0\n    p3.xaxis.minor_tick_in = 0\n    p3.xaxis.minor_tick_out = 0\n\n    # Stylize the figure title\n#     p3.y_range.start = 0\n    p3.title.text_color = \"black\"\n    p3.title.text_font = \"times\"\n    p3.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\n    p3.title.align = \"center\"\n\n    # Stylize the tools\n    # Adding customization to HoverTool\n    p3.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\n    hover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Day\", \"@Days\"),\n                                  (\"Cumulative Confirmed Count\", \"@CumConfirmed\"),\n                                  (\"Cumulative Testing Count\", \"@CumTesting\"),\n                                  (\"Health Capacity Score\", \"@HealthCapacityScore{0.00}\"),\n                                  (\"Population\", \"@Population{0.00}\")\n                                   ])\n\n    p3.add_tools(hover) # Customized HoverTool\n    \n    # Adding Annotations\n    mytext1 = Label(x=187, y=5500000, text='Australia', text_color = \"navy\", text_font_size='8pt', text_font_style = \"bold\")\n    p3.add_layout(mytext1)\n\n    # Stylize Legends\n    legend = (Legend(items=[(\"Germany\", [circle1, line1]),\n                            (\"Korea, South\", [circle2, line2]),\n                            (\"Finland\", [circle3, line3]),\n                            (\"Denmark\", [circle4, line4]),\n                            (\"Netherlands\", [circle5, line5]),\n                            (\"Australia\", [circle6, line6]),\n                            (\"Croatia\", [circle7, line7]),\n                            (\"Japan\", [circle8, line8])\n                        ]))\n    legend.background_fill_color = \"#1f77b4\"\n    legend.background_fill_alpha = 0\n    legend.border_line_color = None\n    legend.click_policy=\"hide\"  # To disable\/hide the legend on click\n    p3.add_layout(legend, \"right\")\n\n# 5. \n# Appending the figures for log and linear scale for y-axis\n    P.append(p3)\n    \n# 6.\n# Creating separate tabs for the two figures created above\ntab21 = Panel(child=P[0], title=\"Log scale\")\ntab22 = Panel(child=P[1], title=\"Linear scale\")\n\n# 7.\n# Creating list of Tabs\ntabs2 = Tabs(tabs=[tab21, tab22])\n\n# 8.\n# Adding title as a <div> tag (a division or a section in an HTML document)\n\ntitle2 = Div(text = \"<b> Trajectories for <i> Cumulative Testing Counts<\/i> for Top 8 countries with highest Health Capacity Scores <\/b>\", \n            style={'font-size': '125%', 'color': 'black'}, align = \"start\")\n\n#------------------------------------------------------------------------------------------\n# Adding common footers as <div> tags (a division or a section in an HTML document)\nfooter2 = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q><\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\")\nfooter3 = Div(text = \"Health Capacity Score is a highly relevant attribute of the comprehensive Global Health Security Index relating to country's <br> preparedness for COVID-19 <i>(https:\/\/www.ghsindex.org)<\/i>\", \n            style={'font-size': '100%', 'color': 'black'}, align = \"center\") \n\n#------------------------------------------------------------------------------------------\n# Creating and showing the layout \nlayout = column(title1, tabs1, footer1, title2, tabs2, footer2, footer3)\nshow(layout)","4a2e1a61":"# Creating Plots\n\n# A)\n#------------------------------------------------------------------------------------------\n# Daily Confirmed Count plot for top 7 highly populated countries and Australia\n#------------------------------------------------------------------------------------------\n\n# 1. \n# Creating empty list for storing two figures :1 with LogScale for y-axis and other with LinearScale\n# These two plots are shown in separate tabs in he same plot\nP = [] \naxis_type =[\"log\", \"linear\"]\n\n# 2.\n# Creating figure for the plot\nfor i in range(2):\n    p3 = figure(x_axis_label ='Days', y_axis_label = \"Cumulative Confirmed Count\", y_axis_type =axis_type[i])\n#                 , plot_width=850, plot_height=400)#creating figure object \n\n# 3. \n#  Creating the graphs on figure\n\n    circle1 = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"China\"]), color = \"darkgreen\", size = 2) # plotting the data using glyph circle\n    line1 = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"China\"]), color = \"darkgreen\", line_width =2.5 ) # plotting the data using glyph circle\n\n    circle2 = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"India\"]), color = \"orange\", size = 2) # plotting the data using glyph circle\n    line2 = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"India\"]), color = \"orange\", line_width = 2.5) # plotting the data using glyph circle\n    \n    circle3 = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"US\"]), color = \"red\", size = 2) # plotting the data using glyph circle\n    line3 = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"US\"]), color = \"red\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle4 = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Indonesia\"]), color = \"purple\", size = 2) # plotting the data using glyph circle\n    line4 = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Indonesia\"]), color = \"purple\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle5 = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Pakistan\"]), color = \"maroon\", size = 2) # plotting the data using glyph circle\n    line5 = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Pakistan\"]), color = \"maroon\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle6 = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Brazil\"]), color = \"dodgerblue\", size = 2) # plotting the data using glyph circle\n    line6 = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Brazil\"]), color = \"dodgerblue\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle7 = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Nigeria\"]), color = \"slateblue\", size = 2) # plotting the data using glyph circle\n    line7 = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Nigeria\"]), color = \"slateblue\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle = p3.circle(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", size = 2.5) # plotting the data using glyph circle\n    line = p3.line(x='Days', y=\"CumConfirmed\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", line_width = 3) # plotting the data using glyph circle\n\n# 4.\n# Stylizing\n\n    # Stylize the plot area\n    p3.plot_width = 600                # To change the width of the plot\n    p3.plot_height = 350                 # To change the height of plot\n    p3.background_fill_color = \"#1f77b4\"   # To add background colorto the figure\n    p3.background_fill_alpha = 0.12\n\n    # Stylize the grid\n    p3.xgrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_alpha = 0.7\n    p3.grid.grid_line_dash = [5,3]\n\n    # Axes Geometry\n    p3.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\n    p3.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n#     p3.y_range.start = 0\n    if axis_type[i] == \"log\":\n        p3.y_range = DataRange1d(start=10, end = 10000000)\n    if axis_type[i] == \"linear\":\n        p3.yaxis.formatter.use_scientific = False\n        \n    # Stylize the axes\n    p3.axis.axis_label_text_font_style = \"bold\" #\"normal\", \"italic\"\n    p3.axis.axis_label_text_color = \"black\"\n    p3.yaxis.minor_tick_in = 0\n    p3.yaxis.minor_tick_out = 0\n    p3.xaxis.minor_tick_in = 0\n    p3.xaxis.minor_tick_out = 0\n\n    # Stylize the figure title\n    p3.title.text_color = \"black\"\n    p3.title.text_font = \"times\"\n    p3.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\n    p3.title.align = \"center\"\n\n    # Stylize the tools\n    # Adding customizayion to HoverTool\n    p3.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\n    hover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Day\", \"@Days\"),\n                                  (\"Cumulative Confirmed Count\", \"@CumConfirmed\"),\n                                  (\"Cumulative Testing Count\", \"@CumTesting{int}\"),\n                                  (\"Health Capacity Score\", \"@HealthCapacityScore{0.00}\"),\n                                  (\"Population\", \"@Population{0.00}\"),\n                                  (\"Confirmed this day\", \"@DailyConfirmed\"),\n                                  (\"Tested this day\", \"@DailyTesting{int}\"), \n                                   ])\n\n    p3.add_tools(hover) # Customization of HoverTool\n\n     # Adding Annotations\n    mytext1 = Label(x=187, y=25000, text='Australia', text_color = \"navy\", text_font_size='8pt', text_font_style = \"bold\")\n    p3.add_layout(mytext1)\n   \n\n    # Stylize Legends\n    legend = (Legend(items=[(\"China\", [circle1, line1]),\n                            (\"India\", [circle2, line2]),\n                            (\"US\", [circle3, line3]),\n                            (\"Indonesia\", [circle4, line4]),\n                            (\"Pakistan\", [circle5, line5]),\n                            (\"Brazil\", [circle6, line6]),\n                            (\"Nigeria\", [circle7, line7]),\n                            (\"Australia\", [circle, line])\n                            ]))\n    \n    legend.background_fill_color = \"#1f77b4\"\n    legend.background_fill_alpha = 0\n    legend.border_line_color = None\n    legend.click_policy=\"hide\"  # To disable\/hide the legend on click\n    p3.add_layout(legend, \"right\")\n\n# 5. \n# Appending the figures with log and linear scale for y-axis\n    P.append(p3)\n    \n# 6. \n# Creating separate tabs for the two figures created above\ntab1 = Panel(child=P[0], title=\"Log scale\")\ntab2 = Panel(child=P[1], title=\"Linear scale\")\n\n# 7.\n# Creating list of Tabs\ntabs_confirmed = Tabs(tabs=[ tab1, tab2 ])\n\n# 8.\n# Adding title and footer as a <div> tag (a division or a section in an HTML document)\ntitle1 = Div(text = \"<b> Comparison for <i>Cumulative Confirmed Counts'<\/i> trajectories for<br>Top 7 highly populated countries and Australia<\/b>\", \n            style={'font-size': '125%', 'color': 'black'}, align = \"start\")#width=600, \n\nfooter1 = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q><\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\")\n# 9.\n# Creating the layout\nlayout1=column(title1, tabs_confirmed, footer1)\n\n# B)\n#------------------------------------------------------------------------------------------\n# Cumulative testing Count plot for top 7 highly populated countries and Australia\n#------------------------------------------------------------------------------------------\n\n# 1.\n# Creating empty list for storing two figures :1 with LogScale for y-axis and other with LinearScale\n# These two plots are shown in separate tabs in he same plot\n\nP = [] \naxis_type =[\"log\", \"linear\"]\n\n# 2.\n# Creating figure for the plot\nfor i in range(2):\n    p3 = figure(x_axis_label ='Days', y_axis_label = \"Testing Count\", y_axis_type =axis_type[i])\n#     , plot_width=850, plot_height=400)#creating figure object \n\n\n# 3.\n# Creating the graph on figure\n\n\n    circle1 = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"China\"]), color = \"darkgreen\", size = 2) # plotting the data using glyph circle\n    line1 = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"China\"]), color = \"darkgreen\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle2 = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"India\"]), color = \"orange\", size = 2) # plotting the data using glyph circle\n    line2 = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"India\"]), color = \"orange\", line_width = 2.5) # plotting the data using glyph circle\n    \n    circle3 = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"US\"]), color = \"red\", size = 2) # plotting the data using glyph circle\n    line3 = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"US\"]), color = \"red\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle4 = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Indonesia\"]), color = \"purple\", size = 2) # plotting the data using glyph circle\n    line4 = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Indonesia\"]), color = \"purple\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle5 = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Pakistan\"]), color = \"maroon\", size = 2) # plotting the data using glyph circle\n    line5 = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Pakistan\"]), color = \"maroon\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle6 = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Brazil\"]), color = \"dodgerblue\", size = 2) # plotting the data using glyph circle\n    line6 = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Brazil\"]), color = \"dodgerblue\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle7 = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Nigeria\"]), color = \"slateblue\", size = 2) # plotting the data using glyph circle\n    line7 = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Nigeria\"]), color = \"slateblue\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle = p3.circle(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", size = 2.5) # plotting the data using glyph circle\n    line = p3.line(x='Days', y=\"smoothed_cumulative_testing_count\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", line_width = 3) # plotting the data using glyph circle\n\n# 4.\n# Stylizing\n\n    # Stylize the plot area\n    p3.plot_width = 600                # To change the width of the plot\n    p3.plot_height = 350                 # To change the height of plot\n    p3.background_fill_color = \"#1f77b4\"   # To add background colorto the figure\n    p3.background_fill_alpha = 0.12\n\n    # Stylize the grid\n    p3.xgrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_alpha = 0.7\n    p3.grid.grid_line_dash = [5,3]\n\n    # Axes Geometry\n    p3.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\n    p3.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n#     p3.y_range.start = 0\n    if axis_type[i] == \"log\":\n        p3.y_range = DataRange1d(start=100, end = 300000000)\n    if axis_type[i] == \"linear\":\n        p3.yaxis.formatter.use_scientific = False\n      \n    # Stylize the axes\n    # p3.yaxis.formatter.use_scientific = False\n    # p3.xaxis.formatter.use_scientific = False\n    p3.axis.axis_label_text_font_style = \"bold\" #\"normal\", \"italic\"\n    p3.axis.axis_label_text_color = \"black\"\n    p3.yaxis.minor_tick_in = 0\n    p3.yaxis.minor_tick_out = 0\n    p3.xaxis.minor_tick_in = 0\n    p3.xaxis.minor_tick_out = 0\n\n    # Stylize the figure title\n    p3.title.text_color = \"black\"\n    p3.title.text_font = \"times\"\n    p3.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\n    p3.title.align = \"center\"\n\n    # Stylize the tools\n    # Adding customizayion to HoverTool\n    p3.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\n    hover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Day\", \"@Days\"),\n                                  (\"Cumulative Confirmed Count\", \"@CumConfirmed\"),\n                                  (\"Cumulative Testing Count\", \"@CumTesting{int}\"),\n                                  (\"Health Capacity Score\", \"@HealthCapacityScore{0.00}\"),\n                                  (\"Population\", \"@Population{0.00}\"),\n                                  (\"Confirmed this day\", \"@DailyTesting\"),\n                                  (\"Tested this day\", \"@DailyTesting{int}\")\n                                   ])\n\n    p3.add_tools(hover) # Customization of HoverTool\n    \n    # Adding Annotations\n    mytext1 = Label(x=187, y=5500000, text='Australia', text_color = \"navy\", text_font_size='8pt', text_font_style = \"bold\")\n    p3.add_layout(mytext1)\n\n\n    #Stylize Legends\n    legend = (Legend(items=[(\"China\", [circle1, line1]),\n                            (\"India\", [circle2, line2]),\n                            (\"US\", [circle3, line3]),\n                            (\"Indonesia\", [circle4, line4]),\n                            (\"Pakistan\", [circle5, line5]),\n                            (\"Brazil\", [circle6, line6]),\n                            (\"Nigeria\", [circle7, line7]),\n                            (\"Australia\", [circle, line])\n                            ]))\n        \n    legend.background_fill_color = \"#1f77b4\"\n    legend.background_fill_alpha = 0\n    legend.border_line_color = None\n    legend.click_policy=\"hide\"  # To disable\/hide the legend on click\n    p3.add_layout(legend, \"right\")\n\n# 5. \n# Appending the figures for log and linear scale for y-axis\n    P.append(p3)\n    \n# 6. \n# Creating separate tabs for the two figures created above\ntab1 = Panel(child=P[0], title=\"Log scale\")\ntab2 = Panel(child=P[1], title=\"Linear scale\")\n\n# 7.\n# Creating list of Tabs\ntabs_testing = Tabs(tabs=[ tab1, tab2 ])\n\n# 8.\n# Adding title and footer as a <div> tag (a division or a section in an HTML document)\ntitle2 = Div(text = \"<b> Comparison of <i>Cumulative Testing Counts'<\/i> trajectories for <br>Top 7 highly Populated countries and Australia<\/b>\", \n           style={'font-size': '125%', 'color': 'black'}, align = \"start\") # width=600, \n\nfooter2 = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q><\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\")\n# 9.\n# Creating the layout\nlayout2=column(title2, tabs_testing, footer2)\n\n#------------------------------------------------------------------------------------------\n# Creating the final layout and displaying\nlayout = column(layout1, layout2)\n\n# Displaying the layout\nshow(layout) \n","dd9181f1":"# Step 1: Creating ColumnDataSources \n\ndata_all=data.loc[:, ['Country','Days', 'CumConfirmed', 'CumRecovered', 'CumDeaths', 'Active', 'CumTesting', 'RecoveryRate', \"Population\", \"Pop_Density\"]]\n\nOverall = ColumnDataSource(data=data_all)\nCurr = ColumnDataSource(dict(Country = [], Days = [], CumConfirmed = [], CumRecovered = [], CumDeaths = [], Active = [], CumTesting = [], RecoveryRate = [], Population = [], Pop_Density = []))\n\n#------------------------------------------------------------------------------------------\n\n# Step 2:\n# Defining callback function which links plots and the select menu\n\nmulti_countries_callback = CustomJS(args=dict(source=Overall, current=Curr), code=\"\"\"\nvar Selected_Country = cb_obj.value\n\ncurrent.data['Country'] = []\ncurrent.data['Days']=[]\ncurrent.data['CumConfirmed'] = []\ncurrent.data['CumRecovered'] = []\ncurrent.data['CumDeaths'] = []\ncurrent.data['Active'] = []\ncurrent.data['CumTesting'] = []\ncurrent.data['RecoveryRate'] = []\ncurrent.data['Population'] = []\ncurrent.data['Pop_Density'] = []\n\n\nfor(var i = 0; i <= source.get_length(); i++){\n\tif (Selected_Country.indexOf(source.data['Country'][i]) >= 0){\n        current.data['Country'].push(source.data['Country'][i])\n\t\tcurrent.data['Days'].push(source.data['Days'][i])\n        current.data['CumConfirmed'].push(source.data['CumConfirmed'][i])\n        current.data['CumRecovered'].push(source.data['CumRecovered'][i])\n        current.data['CumDeaths'].push(source.data['CumDeaths'][i])\n        current.data['Active'].push(source.data['Active'][i])\n        current.data['CumTesting'].push(source.data['CumTesting'][i])\n\t\tcurrent.data['RecoveryRate'].push(source.data['RecoveryRate'][i])\n        current.data['Population'].push(source.data['Population'][i])\n        current.data['Pop_Density'].push(source.data['Pop_Density'][i])\n        \n\t }          \n} \ncurrent.change.emit();\n\"\"\")\n\n#-------------------------------------------------------------------------------------------\n# Step 3: Creating menu\n\nmenu = MultiSelect(options=list(data['Country'].unique()),value=[], title= \"Select one or more Country\/Region:\") # drop down menu\n\n#------------------------------------------------------------------------------------------\n# Step 4: Creating plot\n\n# 1.\n# Creating figure for the plot\n\np2 = figure(x_axis_label ='Days', y_axis_label = 'Recovery Rate', y_axis_type =\"linear\")#creating figure object \n\n# 2.\n# Creating the graph on figure\nline = p2.line(x='Days', y= \"RecoveryRate\", source=Curr, color = \"black\", line_width = 2) # plotting the data using glyph circle\n\n\n# 3. Stylizing\n\n# Stylize the plot area\np2.plot_width = 600                # To change the width of the plot\np2.plot_height = 350                 # To change the height of plot\np2.ygrid.grid_line_alpha = 0.7\n\n# Axes Geometry\n# p2.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\n# p2.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\np2.y_range.start = 0\np2.x_range.start = 0\n\n# Stylize the axes\np2.axis.axis_label_text_font_style = \"bold\" \np2.axis.axis_label_text_color = \"black\"\np2.yaxis.minor_tick_in = 0\np2.yaxis.minor_tick_out = 0\np2.xaxis.minor_tick_in = 0\np2.xaxis.minor_tick_out = 0\n\n\n# Box Annotations\nverylow_box = BoxAnnotation(bottom = 0, top= 25, fill_color=RdYlGn[11][7])\nlow_box = BoxAnnotation(bottom=25, top=50, fill_color=RdYlGn[11][4])\nmedium_box = BoxAnnotation(bottom=50, top=75, fill_color=RdYlGn[11][4])\nhigh_box = BoxAnnotation(bottom=75,top = 100, fill_color=RdYlGn[11][3]) # fill_alpha=0.18,\n\np2.add_layout(verylow_box)\np2.add_layout(low_box)\np2.add_layout(medium_box)\np2.add_layout(high_box)\n\n# Adding spans to the figure\nspan_25 = Span(location=25, dimension='width', line_color='tomato', line_dash=[3,3])\nspan_75 = Span(location=75, dimension='width', line_color='green', line_dash=[3,3])\n# Adding annotations to the spans\nmytext_span25 = Label(x=0, y=25, text='25%', text_color = \"black\", text_font_size='8pt')\nmytext_span75 = Label(x=0, y=75, text='75%', text_color = \"black\", text_font_size='8pt')\np2.add_layout(span_25)\np2.add_layout(span_75)\np2.add_layout(mytext_span25)\np2.add_layout(mytext_span75)\n\n# Stylize the figure title\np2.title.text_color = \"black\"\np2.title.text_font = \"times\"\np2.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\np2.title.align = \"center\"\n\n# Stylize the tools\n# Adding customization to HoverTool\np2.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\nhover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Day\", \"@Days\"),(\"Total Confirmed\", \"@CumConfirmed\"),(\"Total Recovered\", \"@CumRecovered\"),(\"Recovery Rate\", \"@RecoveryRate{0.00}\")])\n\np2.add_tools(hover) # Customization of HoverTool\n\n#------------------------------------------------------------------------------------------\n# Step 5: Calling the function on change of selection\nmenu.js_on_change('value', multi_countries_callback) \n\n#------------------------------------------------------------------------------------------\n# Step 6: Adding title, subtitle and footer as <div> tags (a division or a section in an HTML document)\n\ntitle = Div(text = \"<b> Recovery Rate trajectory for individual countries <\/b>\", \n            width=600, style={'font-size': '125%', 'color': 'black'}, align = \"center\")\nsubtitle = Div(text = \"<i> Recovery Rate = (Cumulative Recovered \/ Cumulative Confirmed)*100 <\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\") \nfooter = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q> <\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\") \n\n#------------------------------------------------------------------------------------------\n# Step 7: Creating the layout\nlayout=column(title, subtitle, menu, p2, footer)\n\n#------------------------------------------------------------------------------------------\n# Step 8: Displaying the layout\nshow(layout) \n","c16817a7":"\n# 1.\n# Creating figure for the plot\n\np2 = figure(x_axis_label ='Days', y_axis_label = 'Recovery Rate (%)', y_axis_type =\"linear\")\n# , plot_width=850, plot_height = 400)#creating figure object \n\n# 2.\n# Creating the graph on figure\nline1 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Germany\"]), color = \"limegreen\", line_width = 2) # plotting the data using glyph circle\nline2 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Korea, South\"]), color = \"dodgerblue\", line_width = 2) # plotting the data using glyph circle\nline3 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Finland\"]), color = \"purple\", line_width = 2) # plotting the data using glyph circle\nline4 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Denmark\"]), color = \"maroon\", line_width = 2) # plotting the data using glyph circle\nline5 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Netherlands\"]), color = \"crimson\", line_width = 2) # plotting the data using glyph circle\nline6 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", line_width = 3) # plotting the data using glyph circle\ncircle6 = p2.circle(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", size = 3) # plotting the data using glyph circle\nline7 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Croatia\"]), color = \"slateblue\", line_width = 2) # plotting the data using glyph circle\nline8 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Japan\"]), color = \"orangered\", line_width = 2) # plotting the data using glyph circle\nline9 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Ireland\"]), color = \"mediumvioletred\", line_width = 2) # plotting the data using glyph circle\nline10 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Belarus\"]), color = \"gold\", line_width = 2) # plotting the data using glyph circle\n\n# 3.\n# Stylizing\n\n# Stylize the plot area\np2.ygrid.grid_line_alpha = 0.7\np2.plot_width=600\np2.plot_height = 350\n\n# Axes Geometry\np2.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\np2.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n# p2.y_range.start = 0\n# p2.x_range.start = 0\n\n# Stylize the axes\np2.axis.axis_label_text_font_style = \"bold\" \np2.axis.axis_label_text_color = \"black\"\np2.yaxis.formatter.use_scientific = False\np2.yaxis.minor_tick_in = 0\np2.yaxis.minor_tick_out = 0\np2.xaxis.minor_tick_in = 0\np2.xaxis.minor_tick_out = 0\n\n\n# Box Annotations\nverylow_box = BoxAnnotation(bottom = 0, top= 25, fill_color=RdYlGn[11][7])\nlow_box = BoxAnnotation(bottom=25, top=50, fill_color=RdYlGn[11][4])\nmedium_box = BoxAnnotation(bottom=50, top=75, fill_color=RdYlGn[11][4])\nhigh_box = BoxAnnotation(bottom=75,top = 100, fill_color=RdYlGn[11][3]) # fill_alpha=0.18,\n\np2.add_layout(verylow_box)\np2.add_layout(low_box)\np2.add_layout(medium_box)\np2.add_layout(high_box)\n\n# Adding spans to the figure\nspan_25 = Span(location=25, dimension='width', line_color='tomato', line_dash=[3,3])\nspan_75 = Span(location=75, dimension='width', line_color='green', line_dash=[3,3])\n# Adding annotations to the spans\nmytext_span25 = Label(x=0, y=25, text='25%', text_color = \"black\", text_font_size='8pt')\nmytext_span75 = Label(x=0, y=75, text='75%', text_color = \"black\", text_font_size='8pt')\np2.add_layout(span_25)\np2.add_layout(span_75)\np2.add_layout(mytext_span25)\np2.add_layout(mytext_span75)\n\n# Stylize the figure title\np2.title.text_color = \"black\"\np2.title.text_font = \"times\"\np2.title.text_font_size = \"20px\" # px stands for pixel\np2.title.align = \"center\"\n\n# Stylize the tools\n# Adding customization to HoverTool\np2.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\nhover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Day\", \"@Days\"),(\"Total Confirmed\", \"@CumConfirmed\"),(\"Total Recovered\", \"@CumRecovered\"),(\"Recovery Rate\", \"@RecoveryRate{0.00}%\")])\n\np2.add_tools(hover) # Customized HoverTool\n\n# Stylize Legends\nlegend = (Legend(items=[(\"Germany\", [line1]),\n                        (\"Korea, South\", [line2]),\n                        (\"Finland\", [line3]),\n                        (\"Denmark\", [line4]),\n                        (\"Netherlands\", [line5]),\n                        (\"Australia\", [line6, circle6]),\n                        (\"Croatia\", [line7]),\n                        (\"Japan\", [line8]),\n                        (\"Ireland\", [line9]),\n                        (\"Belarus\", [line10])\n                       ]))\nlegend.background_fill_color = \"#1f77b4\"\nlegend.background_fill_alpha = 0\nlegend.border_line_color = None\nlegend.click_policy=\"hide\"  # To disable\/hide the legend on click\np2.add_layout(legend, \"right\")\n\n# 4. \n# Adding Annotations to the plot\nmytext1 = Label(x=192, y=50, text='Australia', text_color = \"navy\", text_font_size='8pt', text_font_style = \"bold\")\np2.add_layout(mytext1)\n\n# 5. \n# Adding title subtitle and footer as a <div> tag (a division or a section in an HTML document)\n\ntitle = Div(text = \"<b> Recovery Rate trajectories for Top 10 countries with the highest Health Capacity Scores <\/b>\", \n            width=700, style={'font-size': '125%', 'color': 'black'}, align = \"start\")\n# subtitle1 = Div(text = \"Health Capacity Score is a highly relevant attribute of the comprehensive Global Health Security Index relating to country's preparedness for COVID-19 <i>(https:\/\/www.ghsindex.org)<\/i>\", \n#             width=620, style={'font-size': '100%', 'color': 'black'}, align = \"start\") \nsubtitle2 = Div(text = \"<i> Recovery Rate = (Cumulative Recovered \/ Cumulative Confirmed)*100 <\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"start\") \nfooter = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q> <\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\") \n\n\n# 6. \n# Creating the layout\nlayout=column(title, subtitle2, p2, footer) #subtitle1,\n\n# 7. \n# Displaying the layout\nshow(layout) \n","ad8b22d5":"# 1.\n# Creating figure for the plot\n\np2 = figure(x_axis_label ='Days', y_axis_label = 'Recovery Rate (%)', y_axis_type =\"linear\")\n#             , plot_width=850, plot_height = 400)#creating figure object \n\n# 2.\n# Creating the graph on figure\nline1 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"China\"]), color = \"darkgreen\", line_width = 2) # plotting the data using glyph circle\nline2 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"India\"]), color = \"orange\", line_width = 2) # plotting the data using glyph circle\nline3 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"US\"]), color = \"red\", line_width = 2) # plotting the data using glyph circle\nline4 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Indonesia\"]), color = \"purple\", line_width = 2) # plotting the data using glyph circle\nline5 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Pakistan\"]), color = \"maroon\", line_width = 2) # plotting the data using glyph circle\nline6 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Brazil\"]), color = \"dodgerblue\", line_width = 2) # plotting the data using glyph circle\nline7 = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Nigeria\"]), color = \"slateblue\", line_width = 2) # plotting the data using glyph circle\nline = p2.line(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", line_width = 3) # plotting the data using glyph circle\ncircle = p2.circle(x='Days', y=\"RecoveryRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", size = 3) # plotting the data using glyph circle\n\n# 3.\n# Stylizing\n\n# Stylize the plot area\np2.ygrid.grid_line_alpha = 0.7\np2.plot_width = 600\np2.plot_height = 350\n\n# Axes Geometry\np2.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\np2.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n# p2.y_range.start = 0\n# p2.x_range.start = 0\n\n# Stylize the axes\np2.axis.axis_label_text_font_style = \"bold\" \np2.axis.axis_label_text_color = \"black\"\np2.yaxis.minor_tick_in = 0\np2.yaxis.minor_tick_out = 0\np2.xaxis.minor_tick_in = 0\np2.xaxis.minor_tick_out = 0\n\n# Box Annotations\nverylow_box = BoxAnnotation(bottom = 0, top= 25, fill_color=RdYlGn[11][7])\nlow_box = BoxAnnotation(bottom=25, top=50, fill_color=RdYlGn[11][4])\nmedium_box = BoxAnnotation(bottom=50, top=75, fill_color=RdYlGn[11][4])\nhigh_box = BoxAnnotation(bottom=75,top = 100, fill_color=RdYlGn[11][3]) # fill_alpha=0.18,\n\np2.add_layout(verylow_box)\np2.add_layout(low_box)\np2.add_layout(medium_box)\np2.add_layout(high_box)\n\n# Adding spans to the figure\nspan_25 = Span(location=25, dimension='width', line_color='tomato', line_dash=[3,3])\nspan_75 = Span(location=75, dimension='width', line_color='green', line_dash=[3,3])\n# Adding Annotations to spans\nmytext_span25 = Label(x=0, y=25, text='25%', text_color = \"black\", text_font_size='8pt')\nmytext_span75 = Label(x=0, y=75, text='100%', text_color = \"black\", text_font_size='8pt')\np2.add_layout(span_25)\np2.add_layout(span_75)\np2.add_layout(mytext_span25)\np2.add_layout(mytext_span75)\n\n# Adding Annotations to the plot\nmytext1 = Label(x=195, y=82, text='Australia', text_color = \"navy\", text_font_size='8pt', text_font_style = \"bold\")\np2.add_layout(mytext1)\n\n# Stylize the figure title\np2.title.text_color = \"black\"\np2.title.text_font = \"times\"\np2.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\np2.title.align = \"center\"\n\n# Stylize the tools\n# Adding customization to HoverTool\np2.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\nhover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Day\", \"@Days\"),(\"Total Confirmed\", \"@CumConfirmed\"),(\"Total Recovered\", \"@CumRecovered\"),(\"Recovery Rate\", \"@RecoveryRate{0.00}\")])\n\np2.add_tools(hover) # Customization of HoverTool\n\n# Stylize Legends\nlegend = (Legend(items=[(\"China\", [line1]),\n                        (\"India\", [line2]),\n                        (\"US\", [line3]),\n                        (\"Indonesia\", [line4]),\n                        (\"Pakistan\", [line5]),\n                        (\"Brazil\", [line6]),\n                        (\"Nigeria\", [line7]),\n                        (\"Australia\", [line, circle])\n                        ]))\nlegend.background_fill_color = \"#1f77b4\"\nlegend.background_fill_alpha = 0\nlegend.border_line_color = None\nlegend.click_policy=\"hide\"  # To disable\/hide the legend on click\np2.add_layout(legend, \"right\")\n\n# 4.\n# Adding title subtitle and footer as a <div> tag (a division or a section in an HTML document)\n\ntitle = Div(text = \"<b> Comparison of Recovery Rate trajectories for <br>Top 7 highly populated countries and moderately populated Australia <\/b>\", \n            width=600, style={'font-size': '125%', 'color': 'black'}, align = \"start\")\nsubtitle = Div(text = \"<i> Recovery Rate = Cumulative Recovered \/ Cumulative Confirmed <\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"start\") \nfooter = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q> <\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\") \n\n# 5.\n# Creating the layout\nlayout1=column(title, subtitle, p2, footer)\n\n# 6.\n# Displaying the layout\nshow(layout1) \n","9e799432":"\n# 1.\n# Creating figure for the plot\n\np2 = figure(x_axis_label ='Days', y_axis_label = 'Fatality Rate (%)', y_axis_type =\"linear\")\n# , plot_width=850, plot_height = 400)#creating figure object \n\n# 2.\n# Creating the graph on figure\nline1 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Germany\"]), color = \"limegreen\", line_width = 2) # plotting the data using glyph circle\nline2 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Korea, South\"]), color = \"dodgerblue\", line_width = 2) # plotting the data using glyph circle\nline3 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Finland\"]), color = \"purple\", line_width = 2) # plotting the data using glyph circle\nline4 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Denmark\"]), color = \"maroon\", line_width = 2) # plotting the data using glyph circle\nline5 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Netherlands\"]), color = \"crimson\", line_width = 2) # plotting the data using glyph circle\nline6 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", line_width = 3) # plotting the data using glyph circle\ncircle6 = p2.circle(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", size = 3) # plotting the data using glyph circle\nline7 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Croatia\"]), color = \"slateblue\", line_width = 2) # plotting the data using glyph circle\nline8 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Japan\"]), color = \"orangered\", line_width = 2) # plotting the data using glyph circle\nline9 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Ireland\"]), color = \"mediumvioletred\", line_width = 2) # plotting the data using glyph circle\nline10 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Belarus\"]), color = \"gold\", line_width = 2) # plotting the data using glyph circle\n\n# 3.\n# Stylizing\n\n# Stylize the plot area\np2.ygrid.grid_line_alpha = 0.7\np2.plot_width=600\np2.plot_height = 350\n\n# Axes Geometry\np2.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\np2.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n# p2.y_range.start = 0\n# p2.x_range.start = 0\n\n# Stylize the axes\np2.axis.axis_label_text_font_style = \"bold\" \np2.axis.axis_label_text_color = \"black\"\np2.yaxis.formatter.use_scientific = False\np2.yaxis.minor_tick_in = 0\np2.yaxis.minor_tick_out = 0\np2.xaxis.minor_tick_in = 0\np2.xaxis.minor_tick_out = 0\n\n\n# Box Annotations\n# verylow_box = BoxAnnotation(bottom = 0, top= 1, fill_color=RdYlGn[11][3])\nlow_box = BoxAnnotation(bottom=0, top=10, fill_color=RdYlGn[11][4])\n# medium_box = BoxAnnotation(bottom=5, top=10, fill_color=RdYlGn[11][4])\nhigh_box = BoxAnnotation(bottom=10, fill_color=RdYlGn[11][7]) # fill_alpha=0.18,\n\n# p2.add_layout(verylow_box)\np2.add_layout(low_box)\n# p2.add_layout(medium_box)\np2.add_layout(high_box)\n\n# Adding spans to the figure\nspan_2 = Span(location=2, dimension='width', line_color='green', line_dash=[3,3])\n# span_5 = Span(location=5, dimension='width', line_color='green', line_dash=[3,3])\nspan_10 = Span(location=10, dimension='width', line_color='tomato', line_dash=[3,3])\n# Adding annotations to the spans\nmytext_span2 = Label(x=0, y=2, text='2%', text_color = \"black\", text_font_size='8pt')\n# mytext_span5 = Label(x=0, y=5, text='5%', text_color = \"black\", text_font_size='8pt')\nmytext_span10 = Label(x=0, y=10, text='10%', text_color = \"black\", text_font_size='8pt')\np2.add_layout(span_2)\n# p2.add_layout(span_5)\np2.add_layout(span_10)\np2.add_layout(mytext_span2)\n# p2.add_layout(mytext_span5)\np2.add_layout(mytext_span10)\n\n# Stylize the figure title\np2.title.text_color = \"black\"\np2.title.text_font = \"times\"\np2.title.text_font_size = \"20px\" # px stands for pixel\np2.title.align = \"center\"\n\n# Stylize the tools\n# Adding customization to HoverTool\np2.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\nhover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Day\", \"@Days\"),(\"Total Confirmed\", \"@CumConfirmed\"),(\"Total Deaths\", \"@CumDeaths\"),(\"Fatality Rate\", \"@FatalityRate{0.00}%\")])\n\np2.add_tools(hover) # Customized HoverTool\n\n# Stylize Legends\nlegend = (Legend(items=[(\"Germany\", [line1]),\n                        (\"Korea, South\", [line2]),\n                        (\"Finland\", [line3]),\n                        (\"Denmark\", [line4]),\n                        (\"Netherlands\", [line5]),\n                        (\"Australia\", [line6, circle6]),\n                        (\"Croatia\", [line7]),\n                        (\"Japan\", [line8]),\n                        (\"Ireland\", [line9]),\n                        (\"Belarus\", [line10])\n                       ]))\nlegend.background_fill_color = \"#1f77b4\"\nlegend.background_fill_alpha = 0\nlegend.border_line_color = None\nlegend.click_policy=\"hide\"  # To disable\/hide the legend on click\np2.add_layout(legend, \"right\")\n\n# 4. \n# Adding Annotations to the plot\nmytext1 = Label(x=195, y=2.5, text='Australia', text_color = \"navy\", text_font_size='8pt', text_font_style = \"bold\")\np2.add_layout(mytext1)\n\n# 5. \n# Adding title subtitle and footer as a <div> tag (a division or a section in an HTML document)\n\ntitle = Div(text = \"<b> Fatality Rate trajectories for Top 10 countries with the highest Health Capacity Scores <\/b>\", \n            width=700, style={'font-size': '125%', 'color': 'black'}, align = \"start\")\n# subtitle1 = Div(text = \"Health Capacity Score is a highly relevant attribute of the comprehensive Global Health Security Index relating to country's preparedness for COVID-19 <i>(https:\/\/www.ghsindex.org)<\/i>\", \n#             width=620, style={'font-size': '100%', 'color': 'black'}, align = \"start\") \nsubtitle2 = Div(text = \"<i> Fatality Rate = (Cumulative Deaths \/ Cumulative Confirmed)*100 <\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"start\") \nfooter = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q> <\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\") \n\n\n# 6. \n# Creating the layout\nlayout=column(title, subtitle2, p2, footer)#subtitle1,\n\n# 7. \n# Displaying the layout\nshow(layout) \n","5031f872":"# 1.\n# Creating figure for the plot\n\np2 = figure(x_axis_label ='Days', y_axis_label = 'Fatality Rate (%)', y_axis_type =\"linear\")\n#             , plot_width=850, plot_height = 400)#creating figure object \n\n# 2.\n# Creating the graph on figure\nline1 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"China\"]), color = \"darkgreen\", line_width = 2) # plotting the data using glyph circle\nline2 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"India\"]), color = \"orange\", line_width = 2) # plotting the data using glyph circle\nline3 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"US\"]), color = \"red\", line_width = 2) # plotting the data using glyph circle\nline4 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Indonesia\"]), color = \"purple\", line_width = 2) # plotting the data using glyph circle\nline5 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Pakistan\"]), color = \"maroon\", line_width = 2) # plotting the data using glyph circle\nline6 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Brazil\"]), color = \"dodgerblue\", line_width = 2) # plotting the data using glyph circle\nline7 = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Nigeria\"]), color = \"slateblue\", line_width = 2) # plotting the data using glyph circle\nline = p2.line(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", line_width = 3) # plotting the data using glyph circle\ncircle = p2.circle(x='Days', y=\"FatalityRate\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", size = 3) # plotting the data using glyph circle\n\n# 3.\n# Stylizing\n\n# Stylize the plot area\np2.ygrid.grid_line_alpha = 0.7\np2.plot_width=600\np2.plot_height = 350\n\n# Axes Geometry\np2.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\np2.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n# p2.y_range.start = 0\n# p2.x_range.start = 0\n\n# Stylize the axes\np2.axis.axis_label_text_font_style = \"bold\" \np2.axis.axis_label_text_color = \"black\"\np2.yaxis.minor_tick_in = 0\np2.yaxis.minor_tick_out = 0\np2.xaxis.minor_tick_in = 0\np2.xaxis.minor_tick_out = 0\n\n# Box Annotations\nlow_box = BoxAnnotation(bottom=0, top=10, fill_color=RdYlGn[11][4])\n# medium_box = BoxAnnotation(bottom=5, top=10, fill_color=RdYlGn[11][4])\nhigh_box = BoxAnnotation(bottom=10, fill_color=RdYlGn[11][7]) # fill_alpha=0.18,\n\np2.add_layout(low_box)\n# p2.add_layout(medium_box)\np2.add_layout(high_box)\n\n\nspan_2 = Span(location=2, dimension='width', line_color='green', line_dash=[3,3])\n# span_5 = Span(location=5, dimension='width', line_color='green', line_dash=[3,3])\nspan_10 = Span(location=10, dimension='width', line_color='tomato', line_dash=[3,3])\n# Adding annotations to the spans\nmytext_span2 = Label(x=0, y=2, text='2%', text_color = \"black\", text_font_size='8pt')\n# mytext_span5 = Label(x=0, y=5, text='5%', text_color = \"black\", text_font_size='8pt')\nmytext_span10 = Label(x=0, y=10, text='10%', text_color = \"black\", text_font_size='8pt')\np2.add_layout(span_2)\n# p2.add_layout(span_5)\np2.add_layout(span_10)\np2.add_layout(mytext_span2)\n# p2.add_layout(mytext_span5)\np2.add_layout(mytext_span10)\n\n\n# Adding Annotations to the plot\nmytext1 = Label(x=200, y=2.5, text='Australia', text_color = \"navy\", text_font_size='10pt', text_font_style = \"bold\")\np2.add_layout(mytext1)\n\n# Stylize the figure title\np2.title.text_color = \"black\"\np2.title.text_font = \"times\"\np2.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\np2.title.align = \"center\"\n\n# Stylize the tools\n# Adding customization to HoverTool\np2.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\nhover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Day\", \"@Days\"),(\"Total Confirmed\", \"@CumConfirmed\"),(\"Total Recovered\", \"@CumRecovered\"),(\"Recovery Rate\", \"@RecoveryRate{0.00}\")])\n\np2.add_tools(hover) # Customization of HoverTool\n\n# Stylize Legends\nlegend = (Legend(items=[(\"China\", [line1]),\n                        (\"India\", [line2]),\n                        (\"US\", [line3]),\n                        (\"Indonesia\", [line4]),\n                        (\"Pakistan\", [line5]),\n                        (\"Brazil\", [line6]),\n                        (\"Nigeria\", [line7]),\n                        (\"Australia\", [line, circle])\n                        ]))\nlegend.background_fill_color = \"#1f77b4\"\nlegend.background_fill_alpha = 0\nlegend.border_line_color = None\nlegend.click_policy=\"hide\"  # To disable\/hide the legend on click\np2.add_layout(legend, \"right\")\n\n# 4.\n# Adding title subtitle and footer as a <div> tag (a division or a section in an HTML document)\n\ntitle = Div(text = \"<b> Comparison of Fatality Rate trajectories for <br>Top 7 highly populated countries and moderately populated Australia <\/b>\", \n            width=600, style={'font-size': '125%', 'color': 'black'}, align = \"start\")\nsubtitle = Div(text = \"<i> Fatality Rate = Cumulative Deaths \/ Cumulative Confirmed <\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"start\") \nfooter = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q> <\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\") \n\n# 5.\n# Creating the layout\nlayout1=column(title, subtitle, p2, footer)\n\n# 6.\n# Displaying the layout\nshow(layout1) \n","4dd80a92":"# Step 1:\n# Creating ColumnDataSources \n\ndata_all=data.loc[:, ['Country','Days', \n                      'Daily_Confirmed_7day_rolling_average_per_million', \"CumConfirmed\", \n                      'Daily_testing_7day_rolling_average_per_thousand', \"CumTesting\",\n                      \"HealthCapacityScore\", \"Population\"]]\n\nOverall = ColumnDataSource(data=data_all)\nCurr = ColumnDataSource(dict(Country = [], Days = [], \n                             Daily_Confirmed_7day_rolling_average_per_million = [], CumConfirmed = [],\n                             Daily_testing_7day_rolling_average_per_thousand = [], CumTesting = [],\n                             HealthCapacityScore = [], Population = []))\n\n#------------------------------------------------------------------------------------------\n# Step 2:\n# Defining callback function which links plots and the select menu\n\nmulti_countries_callback = CustomJS(args=dict(source=Overall, current=Curr), code=\"\"\"\nvar Selected_Country = cb_obj.value\n\ncurrent.data['Country'] = []\ncurrent.data['Days']=[]\ncurrent.data['Daily_Confirmed_7day_rolling_average_per_million'] = []\ncurrent.data['CumConfirmed'] = []\ncurrent.data['CumTesting'] = []\ncurrent.data['Daily_testing_7day_rolling_average_per_thousand'] = []\ncurrent.data['HealthCapacityScore'] = []\ncurrent.data['Population'] = []\n\nfor(var i = 0; i <= source.get_length(); i++){\n\tif (Selected_Country.indexOf(source.data['Country'][i]) >= 0){\n        current.data['Country'].push(source.data['Country'][i])\n\t\tcurrent.data['Days'].push(source.data['Days'][i])\n        current.data['Daily_Confirmed_7day_rolling_average_per_million'].push(source.data['Daily_Confirmed_7day_rolling_average_per_million'][i])\n        current.data['CumConfirmed'].push(source.data['CumConfirmed'][i])\n        current.data['CumTesting'].push(source.data['CumTesting'][i])\n        current.data['Daily_testing_7day_rolling_average_per_thousand'].push(source.data['Daily_testing_7day_rolling_average_per_thousand'][i])\n        current.data['HealthCapacityScore'].push(source.data['HealthCapacityScore'][i])\n        current.data['Population'].push(source.data['Population'][i])\n    }          \n} \ncurrent.change.emit();\n\"\"\")\n\n#-------------------------------------------------------------------------------------------\n# Step 3: Creating menu\nmenu = MultiSelect(options=list(data['Country'].unique()),value=[], title= \"Select one or more Country\/Region:\" ) # drop down menu\n\n#------------------------------------------------------------------------------------------\n# Step 4: Creating plots\n\n# A. \n#------------------------------------------------------------------------------------------\n# Plot for 7-day rolling average of Count of Confirmed Cases (per million) \n#------------------------------------------------------------------------------------------\n\n# 1.\n# Creating empty list for storing two figures :1 with LogScale for y-axis and other with LinearScale\n# These two plots are shown in separate tabs in he same plot\n\nP = [] \naxis_type =[\"linear\", \"log\"]\n\n# 2.\n# Creating figure for the plot\nfor i in range(2):\n    p3 = figure(x_axis_label ='Days', y_axis_label = \"Count\", y_axis_type =axis_type[i])#creating figure object \n    p3.add_layout(Title(text=\"Trajectories for 7 day average of count of confirmed cases (per million)\", text_font_size=\"10pt\"), 'above')\n\n# 3.\n# Creating the graph on figure\n    line1 = p3.line(x='Days', y= 'Daily_Confirmed_7day_rolling_average_per_million', source=Curr, color = \"tomato\", line_width = 2) \n    circle1 = p3.circle(x='Days', y= 'Daily_Confirmed_7day_rolling_average_per_million', source=Curr, color = \"tomato\", size = 2) \n\n# 4.\n# Stylizing\n\n    # Stylize the plot area\n    p3.plot_width = 550                # To change the width of the plot\n    p3.plot_height = 350                 # To change the height of plot\n    p3.background_fill_color = \"#1f77b4\"   # To add background colorto the figure\n    p3.background_fill_alpha = 0.12\n\n    # Stylize the grid\n    p3.xgrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_alpha = 0.7\n    p3.grid.grid_line_dash = [5,3]\n\n    # Axes Geometry\n    p3.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\n    p3.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n    p3.y_range.start = 0\n    if axis_type[i] == \"log\":\n        p3.y_range = DataRange1d(end = 450)\n\n    # Stylize the axes\n    # p3.yaxis.formatter.use_scientific = False\n    # p3.xaxis.formatter.use_scientific = False\n    p3.axis.axis_label_text_font_style = \"bold\" \n    p3.axis.axis_label_text_color = \"black\"\n    p3.yaxis.minor_tick_in = 0\n    p3.yaxis.minor_tick_out = 0\n    p3.xaxis.minor_tick_in = 0\n    p3.xaxis.minor_tick_out = 0\n\n    # Stylize the figure title\n    p3.title.text_color = \"black\"\n    p3.title.text_font = \"times\"\n    p3.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\n    p3.title.align = \"center\"\n\n    # Stylize the tools\n    # Adding customization to HoverTool\n    p3.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\n    hover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Day\", \"@Days\"),\n                                  (\"7 day average for confirmed cases per million\", \"@Daily_Confirmed_7day_rolling_average_per_million\"),\n                                  (\"7 day average for testing per thousand\", \"@Daily_testing_7day_rolling_average_per_thousand{int}\"), \n                                  (\"Cumulative Confirmed\", \"@CumConfirmed\"),\n                                  (\"Cumulative Testing Count\", \"@CumTesting\"),\n                                  (\"Population\", \"@Population{0.00}\")\n                                  ])\n\n    p3.add_tools(hover) # Customized HoverTool\n\n    \n# 5.\n# Appending the figures for log and linear scale in list P\n    P.append(p3)\n    \n# 6.\n# Creating separate tabs for the two figures created above\ntab1 = Panel(child=P[0], title=\"Linear scale\")\ntab2 = Panel(child=P[1], title=\"Log scale\")\n\n# 7.\n# Creating list of Tabs\ntabs_confirmed = Tabs(tabs=[ tab1, tab2 ])\n\n\n# B. \n#------------------------------------------------------------------------------------------\n# Plot for 7-day average of Testing Count (per thousand) for all countries individually\n#------------------------------------------------------------------------------------------\n\n# 1.\n# Creating empty list for storing two figures :1 with LogScale for y-axis and other with LinearScale\n# These two plots are shown in separate tabs in he same plot\n\nP = [] \naxis_type =[\"linear\", \"log\"]\n\n# 2.\n# Creating figure for the plot\nfor i in range(2):\n    p3 = figure(x_axis_label ='Days', y_axis_label = \"Count\", y_axis_type =axis_type[i])#creating figure object \n    p3.add_layout(Title(text=\"Trajectories for 7 day average of testing count (per thousand)\", text_font_size=\"10pt\"), 'above')\n\n# 3.\n# Creating the graph on figure\n    line2 = p3.line(x='Days', y= 'Daily_testing_7day_rolling_average_per_thousand', source=Curr, color = \"navy\", line_width = 2) # plotting the data using glyph circle\n    circle2 = p3.circle(x='Days', y= 'Daily_testing_7day_rolling_average_per_thousand', source=Curr, color = \"navy\", size = 2)\n\n# 4.\n# Stylizing\n\n    # Stylize the plot area\n    p3.plot_width = 550                \n    p3.plot_height = 350                 \n    p3.background_fill_color = \"#1f77b4\"   \n    p3.background_fill_alpha = 0.12\n\n    # Stylize the grid\n    p3.xgrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_alpha = 0.7\n    p3.grid.grid_line_dash = [5,3]\n\n    # Axes Geometry\n    p3.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\n    p3.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n    p3.y_range.start = 0\n    if axis_type[i] == \"log\":\n        p3.y_range = DataRange1d(end = 10)\n#     if axis_type[i] == \"linear\":\n#         p3.yaxis.formatter.use_scientific = False\n\n    # Stylize the axes\n    # p3.yaxis.formatter.use_scientific = False\n    # p3.xaxis.formatter.use_scientific = False\n    p3.axis.axis_label_text_font_style = \"bold\" \n    p3.axis.axis_label_text_color = \"black\"\n    p3.yaxis.minor_tick_in = 0\n    p3.yaxis.minor_tick_out = 0\n    p3.xaxis.minor_tick_in = 0\n    p3.xaxis.minor_tick_out = 0\n\n    # Stylize the figure title\n    p3.title.text_color = \"black\"\n    p3.title.text_font = \"times\"\n    p3.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\n    p3.title.align = \"center\"\n\n    # Stylize the tools\n    # Adding customization to HoverTool\n    p3.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\n    hover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Day\", \"@Days\"),\n                                  (\"7 day average for testing per thousand\", \"@Daily_testing_7day_rolling_average_per_thousand{int}\"),\n                                  (\"7 day average for confirmed cases per million\", \"@Daily_Confirmed_7day_rolling_average_per_million\"),\n                                  (\"Cumulative Confirmed\", \"@CumConfirmed\"),\n                                  (\"Cumulative Testing Count\", \"@CumTesting\"),\n                                  (\"Population\", \"@Population{0.00}\")\n                                ])\n\n    p3.add_tools(hover) # Customized HoverTool\n\n    \n# 5.\n# Appending the figures for log and linear y-axis scale\n    P.append(p3)\n    \n# 6.\n# Creating separate tabs for the two figures created above\ntab1 = Panel(child=P[0], title=\"Linear scale\")\ntab2 = Panel(child=P[1], title=\"Log scale\")\n\n# 7.\n# Creating list of Tabs\ntabs_testing = Tabs(tabs=[ tab1, tab2 ])\n\n#------------------------------------------------------------------------------------------\n# Step 5: Calling the function on change of selection\n\nmenu.js_on_change('value', multi_countries_callback) \n\n#------------------------------------------------------------------------------------------\n# Step 6: Adding common footers to both plots as <div> tags (a division or a section in an HTML document)\n\nfooter1 = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q><\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\")\nfooter2 = Div(text = \"<i> Testing Rate this day = Confirmed this day \/ Tested this day <\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\") \nfooter3 = Div(text = \"<i> Cumulative Testing Rate = Cumulative Testing \/ Cumulative Confirmed <\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\") \n\n#------------------------------------------------------------------------------------------\n# Step 7: Creating the layout\n\nlayout3=column(menu, tabs_confirmed, tabs_testing , footer1, footer2, footer3)\n\n#------------------------------------------------------------------------------------------\n# Step 8: Displaying the layout\nshow(layout3) ","027ee0b8":"# df_hcs.sort_values('Score\/100',ascending = False).head(8)","bffdb7bf":"# Creating plots\n\n# A. \n#------------------------------------------------------------------------------------------\n# 7-day rolling average of Count of Confirmed Cases (per million)\n#------------------------------------------------------------------------------------------\n\n# 1. \n# Creating empty list for storing two figures :1 with LogScale for y-axis and other with LinearScale\n# These two plots are shown in separate tabs in he same plot\n\nP1 = [] \naxis_type =[\"linear\", \"log\"]\n\n# 2.\n# Creating figure for the plot\nfor i in range(2):\n    p3 = figure(x_axis_label ='Days', y_axis_label = \"Count\", y_axis_type =axis_type[i])\n#     , plot_width=850, plot_height=400)#creating figure object \n\n\n# 3.\n# Creating the graph on figure\n\n    circle1 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Germany\"]), color = \"darkgreen\", size = 2) # plotting the data using glyph circle\n    line1 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Germany\"]), color = \"darkgreen\", line_width = 2) # plotting the data using glyph circle\n    \n    circle2 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Korea, South\"]), color = \"dodgerblue\", size = 2) # plotting the data using glyph circle\n    line2 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Korea, South\"]), color = \"dodgerblue\", line_width = 2) # plotting the data using glyph circle\n\n    circle3 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Finland\"]), color = \"purple\", size = 2) # plotting the data using glyph circle\n    line3 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Finland\"]), color = \"purple\", line_width = 2) # plotting the data using glyph circle\n\n    circle4 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Denmark\"]), color = \"maroon\", size = 2) # plotting the data using glyph circle\n    line4 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Denmark\"]), color = \"maroon\", line_width = 2) # plotting the data using glyph circle\n    \n    circle5 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Netherlands\"]), color = \"crimson\", size =2) # plotting the data using glyph circle\n    line5 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Netherlands\"]), color = \"crimson\", line_width = 2) # plotting the data using glyph circle\n\n    circle6 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", size = 2.5) # plotting the data using glyph circle\n    line6 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", line_width = 3) # plotting the data using glyph circle\n\n    circle7 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Croatia\"]), color = \"slateblue\", size = 2) # plotting the data using glyph circle\n    line7 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Croatia\"]), color = \"slateblue\", line_width = 2) # plotting the data using glyph circle\n\n    circle8 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Japan\"]), color = \"orangered\", size = 2) # plotting the data using glyph circle\n    line8 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Japan\"]), color = \"orangered\", line_width = 2) # plotting the data using glyph circle\n\n    circle9 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Ireland\"]), color = \"mediumvioletred\", size = 2) # plotting the data using glyph circle\n    line9 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Ireland\"]), color = \"mediumvioletred\", line_width = 2) # plotting the data using glyph circle\n    \n    circle10 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Belarus\"]), color = \"gold\", size = 2) # plotting the data using glyph circle\n    line10 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Belarus\"]), color = \"gold\", line_width = 2) # plotting the data using glyph circle\n\n# 4.\n# Stylizing\n\n    # Stylize the plot area\n    p3.plot_width = 600                # To change the width of the plot\n    p3.plot_height = 350                 # To change the height of plot\n    p3.background_fill_color = \"#1f77b4\"   # To add background colorto the figure\n    p3.background_fill_alpha = 0.12\n\n    # Stylize the grid\n    p3.xgrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_alpha = 0.7\n    p3.grid.grid_line_dash = [5,3]\n\n    # Axes Geometry\n    p3.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\n    p3.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n#     p3.y_range.start = 0\n    if axis_type[i] == \"log\":\n        p3.y_range = DataRange1d(end = 250)\n    if axis_type[i] == \"linear\":\n        p3.yaxis.formatter.use_scientific = False\n    \n    # Stylize the axes  \n    p3.axis.axis_label_text_font_style = \"bold\" #\"normal\", \"italic\"\n    p3.axis.axis_label_text_color = \"black\"\n    p3.yaxis.minor_tick_in = 0\n    p3.yaxis.minor_tick_out = 0\n    p3.xaxis.minor_tick_in = 0\n    p3.xaxis.minor_tick_out = 0\n\n    # Stylize the figure title\n    p3.title.text_color = \"black\"\n    p3.title.text_font = \"times\"\n    p3.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\n    p3.title.align = \"center\"\n\n    # Stylize the tools\n    # Adding customizayion to HoverTool\n    p3.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\n    hover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Day\", \"@Days\"),\n                                  (\"7 day average for confirmed cases per million\", \"@Daily_Confirmed_7day_rolling_average_per_million{int}\"),\n                                  (\"Cumulative Confirmed Count\", \"@CumConfirmed\"),\n                                  (\"7 day average for testing per thousand\", \"@Daily_testing_7day_rolling_average_per_thousand{int}\"),\n                                  (\"Cumulative Testing Count\", \"@CumTesting\"),\n                                  (\"Health Capacity Score\", \"@HealthCapacityScore{0.00}\"),\n                                  (\"Population\", \"@Population{0.00}\"),\n                                 ])\n\n    p3.add_tools(hover) # Customization of HoverTool\n    \n    # Adding Annotations\n    mytext1 = Label(x=179, y=22, text='Australia', text_color = \"navy\", text_font_size='8pt', text_font_style = \"bold\")\n    p3.add_layout(mytext1)\n\n    # Stylize Legends\n    legend = (Legend(items=[(\"Germany\", [circle1, line1]),\n                            (\"Korea, South\", [circle2, line2]),\n                            (\"Finland\", [circle3, line3]),\n                            (\"Denmark\", [circle4, line4]),\n                            (\"Netherlands\", [circle5, line5]),\n                            (\"Australia\", [circle6, line6]),\n                            (\"Croatia\", [circle7, line7]),\n                            (\"Japan\", [circle8, line8]),\n                            (\"Ireland\", [circle9, line9]),\n                            (\"Belarus\", [circle10, line10])\n                            ]))\n    \n    legend.background_fill_color = \"#1f77b4\"\n    legend.background_fill_alpha = 0\n    legend.border_line_color = None\n    legend.click_policy=\"hide\"  # To disable\/hide the legend on click\n    p3.add_layout(legend, \"right\")\n# 5.\n# Appending the figures for log and linear scale of y-axis\n    P1.append(p3)\n    \n# 6.\n# Creating separate tabs for the two figures created above\ntab11 = Panel(child=P1[0], title=\"Linear scale\")\ntab12 = Panel(child=P1[1], title=\"Log scale\")\n\n# 7.\n# Creating list of Tabs\ntabs1 = Tabs(tabs=[tab11, tab12])\n\n# 8.\n# Adding title and footer as a <div> tag (a division or a section in an HTML document)\ntitle1 = Div(text = \"<b> Trajectories for <i> 7 day average count for Confirmed Cases (per million)<\/i> <br> for Top 10 countries with highest Health Capacity Scores <\/b>\", \n           style={'font-size': '125%', 'color': 'black'}, align = \"start\")\nfooter1 = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q><\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\")\n# 9. \n# Creating layout\nlayout1 = column(title1, tabs1, footer1)\n\n\n\n# B) \n#------------------------------------------------------------------------------------------\n# 7-day average of Testing Count (per thousand) \n#------------------------------------------------------------------------------------------\n\n# 1. \n\n# Creating empty list for storing two figures :1 with LogScale for y-axis and other with LinearScale\n# These two plots are shown in separate tabs in he same plot\n\nP2 = [] \naxis_type =[\"linear\", \"log\"]\n\n# 2. Creating figure for the plot\nfor i in range(2):\n    p3 = figure(x_axis_label ='Days', y_axis_label = \"Count\", y_axis_type =axis_type[i])\n#     , plot_width=850, plot_height=400)#creating figure object \n\n\n# 3. Creating the graph on figure \n\n    circle1 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Germany\"]), color = \"darkgreen\", size = 2) # plotting the data using glyph circle\n    line1 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Germany\"]), color = \"darkgreen\", line_width = 2) # plotting the data using glyph circle\n    \n    circle2 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Korea, South\"]), color = \"dodgerblue\", size = 2) # plotting the data using glyph circle\n    line2 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Korea, South\"]), color = \"dodgerblue\", line_width = 2) # plotting the data using glyph circle\n\n    circle3 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Finland\"]), color = \"purple\", size = 2) # plotting the data using glyph circle\n    line3 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Finland\"]), color = \"purple\", line_width = 2) # plotting the data using glyph circle\n\n    circle4 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Denmark\"]), color = \"maroon\", size = 2) # plotting the data using glyph circle\n    line4 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Denmark\"]), color = \"maroon\", line_width = 2) # plotting the data using glyph circle\n\n    circle5 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Netherlands\"]), color = \"crimson\", size = 2) # plotting the data using glyph circle\n    line5 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Netherlands\"]), color = \"crimson\", line_width = 2) # plotting the data using glyph circle\n\n    circle6 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", size = 2) # plotting the data using glyph circle\n    line6 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", line_width = 2.5) # plotting the data using glyph circle\n\n    circle7 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Croatia\"]), color = \"slateblue\", size = 2) # plotting the data using glyph circle\n    line7 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Croatia\"]), color = \"slateblue\", line_width = 2) # plotting the data using glyph circle\n\n    circle8 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Japan\"]), color = \"orangered\", size = 2) # plotting the data using glyph circle\n    line8 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Japan\"]), color = \"orangered\", line_width = 2) # plotting the data using glyph circle\n\n    circle9 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Ireland\"]), color = \"mediumvioletred\", size = 2) # plotting the data using glyph circle\n    line9 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Ireland\"]), color = \"mediumvioletred\", line_width = 2) # plotting the data using glyph circle\n    \n    circle10 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Belarus\"]), color = \"gold\", size = 2) # plotting the data using glyph circle\n    line10 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Belarus\"]), color = \"gold\", line_width = 2) # plotting the data using glyph circle\n\n# 4.\n# Stylizing\n\n    # Stylize the plot area\n    p3.plot_width = 600                # To change the width of the plot\n    p3.plot_height = 350                 # To change the height of plot\n    p3.background_fill_color = \"#1f77b4\"   # To add background colorto the figure\n    p3.background_fill_alpha = 0.12\n\n    # Stylize the grid\n    p3.xgrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_alpha = 0.7\n    p3.grid.grid_line_dash = [5,3]\n\n    # Axes Geometry\n    p3.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\n    p3.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n#     p3.y_range.start = 0\n    if axis_type[i] == \"log\":\n        p3.y_range = DataRange1d(end = 10)\n    if axis_type[i] == \"linear\":\n        p3.yaxis.formatter.use_scientific = False\n    \n    # Stylize the axes  \n    p3.axis.axis_label_text_font_style = \"bold\" #\"normal\", \"italic\"\n    p3.axis.axis_label_text_color = \"black\"\n    p3.yaxis.minor_tick_in = 0\n    p3.yaxis.minor_tick_out = 0\n    p3.xaxis.minor_tick_in = 0\n    p3.xaxis.minor_tick_out = 0\n\n    # Stylize the figure title\n    p3.title.text_color = \"black\"\n    p3.title.text_font = \"times\"\n    p3.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\n    p3.title.align = \"center\"\n\n    # Stylize the tools\n    # Adding customizayion to HoverTool\n#     p3.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\n    hover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Day\", \"@Days\"),\n                                  (\"7 day average for testing per thousand\", \"@Daily_testing_7day_rolling_average_per_thousand{int}\"),\n                                  (\"Cumulative Testing Count\", \"@CumTesting\"),\n                                  (\"7 day average for confirmed cases per million\", \"@Daily_Confirmed_7day_rolling_average_per_million{int}\"),\n                                  (\"Cumulative Confirmed Count\", \"@CumConfirmed\"),\n                                  (\"Health Capacity Score\", \"@HealthCapacityScore{0.00}\"),\n                                  (\"Population\", \"@Population{0.00}\"),\n                                 ])\n\n    p3.add_tools(hover) # Customization of HoverTool\n    \n    # Adding Annotations\n    mytext1 = Label(x=182, y=3, text='Australia', text_color = \"navy\", text_font_size='8pt', text_font_style = \"bold\")\n    p3.add_layout(mytext1)\n\n    #Stylize Legends\n    legend = (Legend(items=[(\"Germany\", [circle1, line1]),\n                            (\"Korea, South\", [circle2, line2]),\n                            (\"Finland\", [circle3, line3]),\n                            (\"Denmark\", [circle4, line4]),\n                            (\"Netherlands\", [circle5, line5]),\n                            (\"Australia\", [circle6, line6]),\n                            (\"Croatia\", [circle7, line7]),\n                            (\"Japan\", [circle8, line8]),\n                            (\"Ireland\", [circle9, line9]),\n                            (\"Belarus\", [circle10, line10])\n                        ]))\n    legend.background_fill_color = \"#1f77b4\"\n    legend.background_fill_alpha = 0\n    legend.border_line_color = None\n    legend.click_policy=\"hide\"  # To disable\/hide the legend on click\n    p3.add_layout(legend, \"right\")\n\n# 5. \n# Appending the figures for log and linear scale for y-axis \n    P2.append(p3)\n    \n# 6.\n# Creating separate tabs for the two figures created above\ntab21 = Panel(child=P2[0], title=\"Linear scale\")\ntab22 = Panel(child=P2[1], title=\"Log scale\")\n\n# 7. \n# Creating list of Tabs\ntabs2 = Tabs(tabs=[tab21, tab22])\n\n# 8.\n# Adding title and footer as a <div> tag (a division or a section in an HTML document)\n\ntitle2 = Div(text = \"<b> Trajectories for <i>7 day average for Testing Count (per thousand)<\/i> <br> for Top 10 countries with highest Health Capacity Scores <\/b>\", \n            style={'font-size': '125%', 'color': 'black'}, align = \"start\")\n\nfooter2 = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q><\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\")\n# 9. \n# Creating layout\n\nlayout2 = column(title2, tabs2, footer2)\n#------------------------------------------------------------------------------------------\n# Adding common footers for both plots as <div> tags (a division or a section in an HTML document)\n\nfooter = Div(text = \"Health Capacity Score is a highly relevant attribute of the comprehensive Global Health Security Index relating to country's <br> preparedness for COVID-19 <i>(https:\/\/www.ghsindex.org)<\/i>\", \n            style={'font-size': '100%', 'color': 'black'}, align = \"center\") \n#------------------------------------------------------------------------------------------\n# Creating and showing the layout\nlayout = column(layout1, layout2, footer)\nshow(layout)","34ba8487":"# Creating plots\n\n# A)\n#------------------------------------------------------------------------------------------\n# Daily Confirmed Count plot for top 5 populated countries and Australia\n#------------------------------------------------------------------------------------------\n\n# 1.\n# Creating empty list for storing two figures :1 with LogScale for y-axis and other with LinearScale\n# These two plots are shown in separate tabs in he same plot\nP = [] \naxis_type =[\"linear\", \"log\"]\n\n# 2.\n# Creating figure for the plot\nfor i in range(2):\n \n    p3 = figure(x_axis_label ='Days', y_axis_label = \"Count\", y_axis_type =axis_type[i])\n#     , plot_width=850, plot_height=400)#creating figure object \n\n# 3.\n# Creating the graph on figure\n\n    circle1 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"China\"]), color = \"darkgreen\", size = 2) # plotting the data using glyph circle\n    line1 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"China\"]), color = \"darkgreen\", line_width = 2) # plotting the data using glyph circle\n    \n    circle2 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"India\"]), color = \"orange\", size = 2) # plotting the data using glyph circle\n    line2 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"India\"]), color = \"orange\", line_width = 2) # plotting the data using glyph circle\n\n    circle3 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"US\"]), color = \"red\", size = 2) # plotting the data using glyph circle\n    line3 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"US\"]), color = \"red\", line_width = 2) # plotting the data using glyph circle\n\n    circle4 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Indonesia\"]), color = \"purple\", size = 2) # plotting the data using glyph circle\n    line4 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Indonesia\"]), color = \"purple\", line_width = 2) # plotting the data using glyph circle\n\n    \n    circle5 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Pakistan\"]), color = \"maroon\", size =2) # plotting the data using glyph circle\n    line5 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Pakistan\"]), color = \"maroon\", line_width = 2) # plotting the data using glyph circle\n\n    circle6 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Brazil\"]), color = \"dodgerblue\", size =2) # plotting the data using glyph circle\n    line6 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Brazil\"]), color = \"dodgerblue\", line_width = 2) # plotting the data using glyph circle\n\n    circle7 = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Nigeria\"]), color = \"slateblue\", size = 2) # plotting the data using glyph circle\n    line7 = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Nigeria\"]), color = \"slateblue\", line_width = 2) # plotting the data using glyph circle\n\n    circle = p3.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", size = 3) # plotting the data using glyph circle\n    line = p3.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", line_width = 2) # plotting the data using glyph circle\n\n\n# 4.\n# Stylizing\n\n    # Stylize the plot area\n    p3.plot_width = 600                # To change the width of the plot\n    p3.plot_height = 350                 # To change the height of plot\n    p3.background_fill_color = \"#1f77b4\"   # To add background colorto the figure\n    p3.background_fill_alpha = 0.12\n\n    # Stylize the grid\n    p3.xgrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_alpha = 0.7\n    p3.grid.grid_line_dash = [5,3]\n\n    # Axes Geometry\n    p3.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\n    p3.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n#     p3.y_range.start = 0\n    if axis_type[i] == \"log\":\n        p3.y_range = DataRange1d(end = 250)\n    if axis_type[i] == \"linear\":\n        p3.yaxis.formatter.use_scientific = False\n\n    # Stylize the axes\n    p3.axis.axis_label_text_font_style = \"bold\" #\"normal\", \"italic\"\n    p3.axis.axis_label_text_color = \"black\"\n    p3.yaxis.minor_tick_in = 0\n    p3.yaxis.minor_tick_out = 0\n    p3.xaxis.minor_tick_in = 0\n    p3.xaxis.minor_tick_out = 0\n\n    # Stylize the figure title\n    p3.title.text_color = \"black\"\n    p3.title.text_font = \"times\"\n    p3.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\n    p3.title.align = \"center\"\n\n    # Stylize the tools\n    # Adding customization to HoverTool\n    p3.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\n    hover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Day\", \"@Days\"),\n                                  (\"7 day average for confirmed cases per million\", \"@Daily_Confirmed_7day_rolling_average_per_million{int}\"),\n                                  (\"Cumulative Confirmed Count\", \"@CumConfirmed\"),\n                                  (\"7 day average for testing per thousand\", \"@Daily_testing_7day_rolling_average_per_thousand{int}\"),\n                                  (\"Cumulative Testing Count\", \"@CumTesting\"),\n                                  (\"Health Capacity Score\", \"@HealthCapacityScore{0.00}\"),\n                                  (\"Population\", \"@Population{0.00}\"),\n                                 ])\n\n    p3.add_tools(hover) # Customized HoverTool\n\n     # Adding Annotations\n    mytext1 = Label(x=175, y=19.8, text='Australia', text_color = \"navy\", text_font_size='8pt', text_font_style = \"bold\")\n    p3.add_layout(mytext1)\n    \n    # Stylize Legends\n    legend = (Legend(items=[(\"China\", [circle1, line1]),\n                            (\"India\", [circle2, line2]),\n                            (\"US\", [circle3, line3]),\n                            (\"Indonesia\", [circle4, line4]),\n                            (\"Pakistan\", [circle5, line5]),\n                            (\"Brazil\", [circle6, line6]),\n                            (\"Nigeria\", [circle7, line7]),\n                            (\"Australia\", [circle, line])\n                            ]))\n    \n    legend.background_fill_color = \"#1f77b4\"\n    legend.background_fill_alpha = 0\n    legend.border_line_color = None\n    legend.click_policy=\"hide\"  # To disable\/hide the legend on click\n    p3.add_layout(legend, \"right\")\n\n# 5.\n# Appending the figures with log and linear scale for y-axis\n    P.append(p3)\n    \n# 6.\n# Creating separate tabs for the two figures created above\ntab1 = Panel(child=P[0], title=\"Linear scale\")\ntab2 = Panel(child=P[1], title=\"Log scale\")\n\n# 7. \n# Creating list of Tabs\ntabs_confirmed = Tabs(tabs=[ tab1, tab2 ])\n\n# 8. \n# Adding title and a footer as a <div> tag (a division or a section in an HTML document)\n\ntitle1 = Div(text = \"<b>Comparison of trajectories of <i>7-day average Count of Confirmed Cases (per million)<\/i> of <br>Top 7 Populated countries and Australia<\/b>\", \n            style={'font-size': '125%', 'color': 'black'}, align = \"start\") # width=600, \n\nfooter1 = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q><\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\")\n\n\n# 9.\n# Creating the layout\nlayout1=column(title1, tabs_confirmed, footer1)\n\n#------------------------------------------------------------------------------------------\n\n\n# B)\n#------------------------------------------------------------------------------------------\n# Daily testing Count plot for top 7 populated countries and Australia\n#------------------------------------------------------------------------------------------\n\n# 1. \n# Creating empty list for storing two figures :1 with LogScale for y-axis and other with LinearScale\n# These two plots are shown in separate tabs in he same plot\n\nP = [] \naxis_type =[\"linear\", \"log\"]\n\n# 2.\n# Creating figure for the plot\nfor i in range(2):\n    \n    p3 = figure(x_axis_label ='Days', y_axis_label = \"Count\", y_axis_type =axis_type[i])\n#     , plot_width=850, plot_height=400)#creating figure object \n\n\n# 3.\n# Creating the graph on figure\n\n    circle1 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"China\"]), color = \"darkgreen\", size = 2) # plotting the data using glyph circle\n    line1 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"China\"]), color = \"darkgreen\", line_width = 2) # plotting the data using glyph circle\n    \n    circle2 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"India\"]), color = \"orange\", size = 2) # plotting the data using glyph circle\n    line2 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"India\"]), color = \"orange\", line_width = 2) # plotting the data using glyph circle\n\n    circle3 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"US\"]), color = \"red\", size = 2) # plotting the data using glyph circle\n    line3 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"US\"]), color = \"red\", line_width = 2) # plotting the data using glyph circle\n\n    circle4 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Indonesia\"]), color = \"purple\", size = 2) # plotting the data using glyph circle\n    line4 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Indonesia\"]), color = \"purple\", line_width = 2) # plotting the data using glyph circle\n\n    \n    circle5 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Pakistan\"]), color = \"maroon\", size =2) # plotting the data using glyph circle\n    line5 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Pakistan\"]), color = \"maroon\", line_width = 2) # plotting the data using glyph circle\n\n    circle6 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Brazil\"]), color = \"dodgerblue\", size =2) # plotting the data using glyph circle\n    line6 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Brazil\"]), color = \"dodgerblue\", line_width = 2) # plotting the data using glyph circle\n\n    circle7 = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Nigeria\"]), color = \"slateblue\", size = 2) # plotting the data using glyph circle\n    line7 = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Nigeria\"]), color = \"slateblue\", line_width = 2) # plotting the data using glyph circle\n\n    circle = p3.circle(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", size = 3) # plotting the data using glyph circle\n    line = p3.line(x='Days', y=\"Daily_testing_7day_rolling_average_per_thousand\", source=ColumnDataSource(data[data[\"Country\"]==\"Australia\"]), color = \"navy\", line_width = 2) # plotting the data using glyph circle\n\n# 4.\n# Stylizing\n\n    # Stylize the plot area\n    p3.plot_width = 600                # To change the width of the plot\n    p3.plot_height = 350                 # To change the height of plot\n    p3.background_fill_color = \"#1f77b4\"   # To add background colorto the figure\n    p3.background_fill_alpha = 0.12\n\n    # Stylize the grid\n    p3.xgrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_color = \"white\"\n    p3.ygrid.grid_line_alpha = 0.7\n    p3.grid.grid_line_dash = [5,3]\n\n    # Axes Geometry\n    p3.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\n    p3.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n#     p3.y_range.start = 0\n    if axis_type[i] == \"log\":\n        p3.y_range = DataRange1d(end = 4)\n    if axis_type[i] == \"linear\":\n        p3.yaxis.formatter.use_scientific = False\n    \n    # Stylize the axes\n    p3.axis.axis_label_text_font_style = \"bold\" #\"normal\", \"italic\"\n    p3.axis.axis_label_text_color = \"black\"\n    # p3.axis.major_label_text_font_style = \"bold\" # for axis' major tick marks' labels value color\n    p3.yaxis.minor_tick_in = 0\n    p3.yaxis.minor_tick_out = 0\n    p3.xaxis.minor_tick_in = 0\n    p3.xaxis.minor_tick_out = 0\n\n    # Stylize the figure title\n    p3.title.text_color = \"black\"\n    p3.title.text_font = \"times\"\n    p3.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\n    p3.title.align = \"center\"\n\n    # Stylize the tools\n    # Adding customizayion to HoverTool\n    p3.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\n    hover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Day\", \"@Days\"),\n                                  (\"7 day average for testing per thousand\", \"@Daily_testing_7day_rolling_average_per_thousand{int}\"),\n                                  (\"Cumulative Testing Count\", \"@CumTesting\"),\n                                  (\"7 day average for confirmed cases per million\", \"@Daily_Confirmed_7day_rolling_average_per_million{int}\"),\n                                  (\"Cumulative Confirmed Count\", \"@CumConfirmed\"),\n                                  (\"Health Capacity Score\", \"@HealthCapacityScore{0.00}\"),\n                                  (\"Population\", \"@Population{0.00}\"),\n                                 ])\n    p3.add_tools(hover) # Customization of HoverTool\n    \n    # Adding Annotations\n    mytext1 = Label(x=175, y=3, text='Australia', text_color = \"navy\", text_font_size='8pt', text_font_style = \"bold\")\n    p3.add_layout(mytext1)\n\n    # Stylize Legends\n    legend = (Legend(items=[(\"China\", [circle1, line1]),\n                            (\"India\", [circle2, line2]),\n                            (\"US\", [circle3, line3]),\n                            (\"Indonesia\", [circle4, line4]),\n                            (\"Pakistan\", [circle5, line5]),\n                            (\"Brazil\", [circle6, line6]),\n                            (\"Nigeria\", [circle7, line7]),\n                            (\"Australia\", [circle, line])\n                            ]))\n        \n    legend.background_fill_color = \"#1f77b4\"\n    legend.background_fill_alpha = 0\n    legend.border_line_color = None\n    legend.click_policy=\"hide\"  # To disable\/hide the legend on click\n    p3.add_layout(legend, \"right\")\n\n# 5.\n# Appending the figures with log and linear scale for y-axis\n    P.append(p3)\n    \n# 6.\n# Creating separate tabs for the two figures created above\ntab1 = Panel(child=P[0], title=\"Linear scale\")\ntab2 = Panel(child=P[1], title=\"Log scale\")\n\n# 7. \n# Creating list of Tabs\ntabs_testing = Tabs(tabs=[ tab1, tab2 ])\n\n\n# 8.\n# Adding title and footer as a <div> tag (a division or a section in an HTML document)\n\ntitle2 = Div(text = \"<b> Comparison of trajectories for <i>7-day average Testing Count (per thousand)<\/i> of <br>Top 7 Populated countries and moderately populated Australia<\/b>\", \n           style={'font-size': '125%', 'color': 'black'}, align = \"start\") # width=600, \n\nfooter2 = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q><\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\")\n# 9. \n# Creating the layout\nlayout2=column(title2, tabs_testing, footer2)\n\n#------------------------------------------------------------------------------------------\n# Creating the final layout and displaying\nlayout = column(layout1, layout2)\nshow(layout) \n","482eaf26":"countries = [\"Afghanistan\", \"Australia\", \"Austria\", \"Belarus\", \"Belgium\", \"Canada\", \"Chad\", \"China\", \"Croatia\", \"Cuba\", \n             \"Cyprus\", \"Denmark\", \"Djibouti\", \"Estonia\", \"Finland\", \"France\", \"Germany\", \"Hungary\", \"Iceland\", \"Ireland\", \n             \"Italy\",\"Japan\", \"Korea, South\", \"Latvia\", \"Luxembourg\", \"Netherlands\", \"New Zealand\", \"Norway\", \"Qatar\",\n             \"Singapore\",\"Slovakia\", \"Slovenia\", \"Switzerland\", \"Taiwan\", \"Tajikistan\",\"Thailand\", \"Tunisia\", \"Turkey\",\n             \"United Arab Emirates\", \"United Kingdom\"]\n#-------------------------------------------------------------------------------------------\n\n# Creating plot\n# Creating an empty list for figures for plots created  for above set of countries\n\nP = []\n\nfor country in countries:\n    \n# Step 1 Creating figure for the plot    \n    p7 = figure( y_axis_label = 'Count', x_axis_label ='Days', y_axis_type = \"linear\")#creating figure object \n    p7.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=ColumnDataSource(data[data[\"Country\"]==country]), color = \"black\", line_width = 2, legend_label = country) # plotting the data using glyph circle\n\n    # Stylize the plot area\n    p7.plot_width = 200                # To change the width of the plot\n    p7.plot_height = 250                 # To change the height of plot\n    p7.background_fill_color = \"#1f77b4\"   # To add background colorto the figure\n    p7.background_fill_alpha = 0.12\n\n    # Stylize the grid\n    p7.xgrid.grid_line_color = \"white\"\n    p7.ygrid.grid_line_color = \"white\"\n    p7.ygrid.grid_line_alpha = 0.7\n    p7.grid.grid_line_dash = [5,3]\n\n    # Axes Geometry\n    p7.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\n    p7.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n\n    # Stylize the axes\n    p7.axis.axis_label_text_font_style = \"bold\" #\"normal\", \"italic\"\n    p7.axis.axis_label_text_color = \"black\"\n    # p.axis.major_label_text_font_style = \"bold\" # for axis' major tick marks' labels value color\n    p7.yaxis.minor_tick_in = 0\n    p7.yaxis.minor_tick_out = 0\n    p7.xaxis.minor_tick_in = 0\n    p7.xaxis.minor_tick_out = 0\n    p7.xaxis.ticker.desired_num_ticks = 4\n\n    # Stylize the tools\n    # Adding customizayion to HoverTool\n    p7.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\n    hover = HoverTool(tooltips = [((\"Day\", \"@Days\")), (\"7-day avg count of Confirmed Cases(per million)\", \"@Daily_Confirmed_7day_rolling_average_per_million\"),\n                                  (\"Cumulative Confirmed Count\", \"@CumConfirmed\")])\n    p7.add_tools(hover) # Customization of HoverTool\n   \n    # Stylize the legends\n    p7.legend.background_fill_alpha = 0\n    p7.legend.border_line_color = None\n    p7.legend.location =\"top_right\"\n    p7.legend.label_text_font_size = '12px'\n    p7.legend.label_text_font = \"times\"\n    P.append(p7)\n   \n    #------------------------------------------------------------------------------------------\n\n# Creating the layout\n\nf = gridplot([ [P[0], P[1], P[2]],\n               [P[3], P[4], P[5]],\n               [P[6], P[7], P[8]],\n               [P[9], P[10], P[11]],\n               [P[12], P[13], P[14]],\n               [P[15], P[16], P[17]],\n               [P[18], P[19], P[20]],\n               [P[21], P[22], P[23]],\n               [P[24], P[25], P[26]],\n               [P[27], P[28], P[29]],\n               [P[30], P[31], P[32]],\n               [P[33], P[34], P[35]],\n               [P[36], P[37], P[38]],\n               [P[39]]\n               ])\n\n# f = gridplot([ [P[0], P[1], P[2],\n#                 P[3], P[4], P[5]],\n#                [P[6], P[7], P[8],\n#                P[9], P[10], P[11]],\n#                [P[12], P[13], P[14],\n#                P[15], P[16], P[17]],\n#                [P[18], P[19], P[20],\n#                P[21], P[22], P[23]],\n#                [P[24], P[25], P[26],\n#                P[27], P[28], P[29] ],\n#                [P[30], P[31],P[32],\n#                 P[33], P[34], P[35]],\n#                [P[36], P[37],P[38],\n#                 P[39]]\n#                ])\n\n# Defining the title and subtitles for complete gridplot as <div> tags (a division or a section in an HTML document)\ntitle = Div(text = \"<b> Trajectory of 7-day avg count of Confirmed Cases(per million) <br> for the countries which have flattened the curve <\/b>\", \n            width=900, style={'font-size': '150%', 'color': 'black'}, align = \"center\") # height = 50,\nsubtitle = Div(text = \"<b><i> (Day 1 is the day on which the country encountered its first 10 total confirmed cases) <\/i><\/b>\", \n            width=900, style={'font-size': '100%', 'color': 'black'}, align = \"center\") # height = 50,\n#------------------------------------------------------------------------------------------\n# Displaying the layout\nshow(column(title,subtitle, f))\n","992c90e8":"# Step 1: Creating ColumnDataSources \n\ndata_all=data.loc[:, ['Country','Days', 'CumConfirmed','DailyConfirmed', 'Daily_Confirmed_7day_rolling_average_per_million',\n                      'CumDeaths', 'CumRecovered',\n                      'CumTesting', 'smoothed_cumulative_testing_count']]\ndata_curr = data_all[data_all['Country'] == 'Australia' ]\n\nOverall = ColumnDataSource(data=data_all)\nCurr=ColumnDataSource(data=data_curr)\n\n#------------------------------------------------------------------------------------------\n\n# Step 2:\n# Defining callback function which links plots and the select menu\n\ncallback = CustomJS(args=dict(source=Overall, current=Curr), code=\"\"\"\nvar selected_country = cb_obj.value\ncurrent.data['Days']=[]\ncurrent.data['CumConfirmed']=[]\ncurrent.data['DailyConfirmed']=[]\ncurrent.data['Daily_Confirmed_7day_rolling_average_per_million'] = []\ncurrent.data['CumDeaths'] = []\ncurrent.data['CumRecovered'] = []\ncurrent.data['CumTesting'] = []\ncurrent.data[\"smoothed_cumulative_testing_count\"] = []\nfor(var i = 0; i <= source.get_length(); i++){\n\tif (source.data['Country'][i] == selected_country){\n\t\tcurrent.data['Days'].push(source.data['Days'][i])\n\t\tcurrent.data['CumConfirmed'].push(source.data['CumConfirmed'][i])\n        current.data['DailyConfirmed'].push(source.data['DailyConfirmed'][i])\n\t\tcurrent.data['CumDeaths'].push(source.data['CumDeaths'][i])\n\t\tcurrent.data['CumRecovered'].push(source.data['CumRecovered'][i])\n\t\tcurrent.data['CumTesting'].push(source.data['CumTesting'][i]) \n        current.data[\"smoothed_cumulative_testing_count\"].push(source.data[\"smoothed_cumulative_testing_count\"][i])\n        current.data['Daily_Confirmed_7day_rolling_average_per_million'].push(source.data['Daily_Confirmed_7day_rolling_average_per_million'][i])\n     }          \n} \ncurrent.change.emit();\n\"\"\")\n\n#-------------------------------------------------------------------------------------------\n# Step 3: Creating menu\nmenu = Select(options=list(data['Country'].unique()),value='Australia', title=\"Select Country:\")  # drop down menu\n\n#------------------------------------------------------------------------------------------\n# Step 4: Creating plot\n\n# 1.\n# Creating empty list for storing two figures :1 with LogScale for y-axis and other with LinearScale\n# These two plots are shown in separate tabs in he same plot\nP = [] \naxis_type =[\"linear\", \"log\"]\n\n# 2.\n# Creating figure for the plot\nfor i in range(2):\n    p1 = figure(x_axis_label ='Days', y_axis_label = 'Count', y_axis_type = axis_type[i])#creating figure object \n\n# 3.\n# Plotting line graph on the figure\n       \n    line1 = p1.line(x='Days', y=\"DailyConfirmed\", source=Curr, color = \"black\", line_width = 2) # plotting the data using glyph circle\n    circle1 = p1.circle(x='Days', y=\"DailyConfirmed\", source=Curr, color = \"black\", size = 1)\n    \n#     line1 = p1.line(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=Curr, color = \"black\", line_width = 2) # plotting the data using glyph circle\n#     circle1 = p1.circle(x='Days', y=\"Daily_Confirmed_7day_rolling_average_per_million\", source=Curr, color = \"black\", size = 1)\n    \n# 4.\n# Stylizing\n\n    # Stylize the plot area\n    p1.plot_width = 600               \n    p1.plot_height = 350                 \n    p1.background_fill_color = \"#1f77b4\"   \n    p1.background_fill_alpha = 0.12\n    \n    # Stylize the grid\n    p1.xgrid.grid_line_color = \"white\"\n    p1.ygrid.grid_line_color = \"white\"\n    p1.ygrid.grid_line_alpha = 0.7\n    p1.grid.grid_line_dash = [5,3]\n    \n    # Axes Geometry\n    p1.x_range = DataRange1d(only_visible=True) # x_range changes according to the active legends\n    p1.y_range = DataRange1d(only_visible=True) # y_range changes according to the active legends\n    \n    # Stylize the axes\n    p1.axis.axis_label_text_font_style = \"bold\" #\"normal\", \"italic\"\n    p1.axis.axis_label_text_color = \"black\"\n    p1.yaxis.minor_tick_in = 0\n    p1.yaxis.minor_tick_out = 0\n    p1.xaxis.minor_tick_in = 0\n    p1.xaxis.minor_tick_out = 0\n\n    # Stylize the figure title\n    p1.title.text_color = \"black\"\n    p1.title.text_font = \"times\"\n    p1.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\n    p1.title.align = \"center\"\n\n    # Stylize the tools\n    # Adding customization to HoverTool\n    p1.tools = [ZoomInTool(),ZoomOutTool(), ResetTool()]\n    hover = HoverTool(tooltips = [((\"Day\", \"@Days\")), (\"Daily Confirmed\", \"@DailyConfirmed\"), (\"Cumulative Confirmed Count\", \"@CumConfirmed\"), (\"Cumulative Death Count\", \"@CumDeaths\"), (\"Cumulative Recovered Count\", \"@CumRecovered\"), (\"Cumulative Testing Count\", \"@smoothed_cumulative_testing_count\")])\n#     (\"7-day average count for confirmed cases (per million)\", \"@Daily_Confirmed_7day_rolling_average_per_million\")\n    p1.add_tools(hover) # Customized HoverTool\n           \n    # Appending the two figures created under for loop (one with y_axis_type=\"log\" and other\n    # with y_axis_type = \"linear\") into the list P\n    P.append(p1)\n\n# 5. \n# Creating separate tabs for the two figures created above\ntab1 = Panel(child=P[0], title=\"Linear scale\")\ntab2 = Panel(child=P[1], title=\"Log scale\")\n\n#------------------------------------------------------------------------------------------\n# Step 5: Creating list of Tabs\ntabs = Tabs(tabs=[ tab1, tab2 ])\n\n#------------------------------------------------------------------------------------------\n# Step 6: Calling the function on change of selection\n\nmenu.js_on_change('value', callback) \n\n#------------------------------------------------------------------------------------------\n# Step 7: Adding title and footer as a <div> tag (a division or a section in an HTML document)\n\ntitle = Div(text = \"<b> Daily Confirmed count of Confirmed Cases for individual countries <\/b>\", \n            width=600, style={'font-size': '125%', 'color': 'black'}, align = \"center\")\n# title = Div(text = \"<b> 7-day average count of Confirmed Cases(per million) for individual countries <\/b>\", \n#             width=600, style={'font-size': '125%', 'color': 'black'}, align = \"center\")\nfooter = Div(text = \"<i> Day 1 is the day on which the country reached 10 <q>Total Confirmed Cases<\/q> <\/i>\", \n            width=600, style={'font-size': '100%', 'color': 'black'}, align = \"center\") \n\n#------------------------------------------------------------------------------------------\n# Step 8: Creating the layout\n\nlayout=column(title,menu,tabs, footer) \n\n#------------------------------------------------------------------------------------------\n# Step 9: Displaying the layout\nshow(layout) \n","618655dd":"# Filtering only cumulative count columns from data and leaving daily or 7-day avaerage columns\ndata1 = data[[\"Country\", \"Days\", \n              \"CumConfirmed\", \"CumConfirmed_per_million\", \n              \"CumDeaths\",\n              \"CumRecovered\", \n              \"CumTesting\",\"smoothed_cumulative_testing_count\",\n              \"Population\", \"Pop_Density\", \"Land_Area_Kmsq\", \"HealthCapacityScore\", \"RecoveryRate\", \"FatalityRate\",\"Active\", \n              \"SmoothedCumTesting_per_thousand\",\"SmoothedCumTesting_per_CumConfirmed\",\n              \"CumConfirmed_per_SmoothedCumTesting_percent\"\n              ]]\n","a32dce86":"# data1[\"Country\"].unique()","c99e2f02":"# data2","5929f0ba":"data2 = data1.loc[data1[\"Country\"].isin([\"Germany\",\"Korea, South\",\"Finland\",\"Denmark\",\"Netherlands\",\"Australia\", \"Croatia\",\n                                         \"Japan\",\"Ireland\",\"Belarus\"])]\n# Creating empty dataframe to include only latest data\ndata2_tails = pd.DataFrame(columns=[\"Country\", \"Days\", \n              \"CumConfirmed\", \"CumConfirmed_per_million\", \n              \"CumDeaths\",\n              \"CumRecovered\", \n              \"CumTesting\",\"smoothed_cumulative_testing_count\",\n              \"Population\", \"Pop_Density\", \"Land_Area_Kmsq\", \"HealthCapacityScore\", \"RecoveryRate\", \"FatalityRate\",\"Active\", \n              \"SmoothedCumTesting_per_thousand\",\n              \"CumConfirmed_per_SmoothedCumTesting_percent\"])\n# Feeding values to empty dataframe\nfor country in data2[\"Country\"].unique():\n#     df_tails = pd.concat([df_tails, (data1.loc[data[\"Country\"]==country].sort_values(by=['CumTesting', 'CumConfirmed'], ascending=[False, False]).head(1))], ignore_index = True)\n    data2_tails = pd.concat([data2_tails, (data2.loc[data[\"Country\"]==country].sort_values(by=['smoothed_cumulative_testing_count', 'CumConfirmed'], ascending=[False, False]).iloc[[1]])], ignore_index = True)  ","ebf87d4d":"# data1.loc[data1[\"Country\"].isin([\"Germany\",\"Korea, South\",\"Finland\",\"Denmark\",\"Netherlands\",\"Australia\", \"Croatia\",\n#                                          \"Japan\",\"Ireland\",\"Belarus\"])]","5a17056e":"# data2_tails","c1b70de2":"\n# Creating the figure\np4 = figure(x_axis_label = \"Cumulative Confirmed Count (per million)\" , y_axis_label = 'Positive Tests Rate (%)', y_axis_type =\"linear\",x_axis_type =\"linear\") #creating figure object \n#     p4.add_layout(Title(text=\"Confirmed Cases Vs. ' + x + ' for the Countries', text_font_size=\"11pt\", above, 'center'))\n\n# Plotting the graph\n# p4.circle(x=\"CumConfirmed\", y = \"CumConfirmed_per_SmoothedCumTesting_percent\", size =10, fill_alpha = 0.65,line_dash = [3,3], \n#                source = ColumnDataSource(data2_tails_tails), color=\"navy\")\n\n\ncircle1 = p4.circle(x=\"CumConfirmed_per_million\", y=\"CumConfirmed_per_SmoothedCumTesting_percent\", source=ColumnDataSource(data2_tails[data2_tails[\"Country\"]==\"Germany\"]), color = \"darkgreen\", size = 10, line_dash = [3,3]) # plotting the data using glyph circle\ncircle2 = p4.circle(x=\"CumConfirmed_per_million\", y=\"CumConfirmed_per_SmoothedCumTesting_percent\", source=ColumnDataSource(data2_tails[data2_tails[\"Country\"]==\"Korea, South\"]), color = \"dodgerblue\", size = 10, line_dash = [3,3]) # plotting the data using glyph circle\ncircle3 = p4.circle(x=\"CumConfirmed_per_million\", y=\"CumConfirmed_per_SmoothedCumTesting_percent\", source=ColumnDataSource(data2_tails[data2_tails[\"Country\"]==\"Finland\"]), color = \"purple\", size = 10, line_dash = [3,3]) # plotting the data using glyph circle\ncircle4 = p4.circle(x=\"CumConfirmed_per_million\", y=\"CumConfirmed_per_SmoothedCumTesting_percent\", source=ColumnDataSource(data2_tails[data2_tails[\"Country\"]==\"Denmark\"]), color = \"maroon\", size = 10, line_dash = [3,3]) # plotting the data using glyph circle\ncircle5 = p4.circle(x=\"CumConfirmed_per_million\", y=\"CumConfirmed_per_SmoothedCumTesting_percent\", source=ColumnDataSource(data2_tails[data2_tails[\"Country\"]==\"Netherlands\"]), color = \"crimson\", size = 10, line_dash = [3,3]) # plotting the data using glyph circle\ncircle6 = p4.circle(x=\"CumConfirmed_per_million\", y=\"CumConfirmed_per_SmoothedCumTesting_percent\", source=ColumnDataSource(data2_tails[data2_tails[\"Country\"]==\"Australia\"]), color = \"navy\", size = 10, line_dash = [3,3]) # plotting the data using glyph circle\ncircle7 = p4.circle(x=\"CumConfirmed_per_million\", y=\"CumConfirmed_per_SmoothedCumTesting_percent\", source=ColumnDataSource(data2_tails[data2_tails[\"Country\"]==\"Croatia\"]), color = \"slateblue\", size = 10, line_dash = [3,3]) # plotting the data using glyph circle\ncircle8 = p4.circle(x=\"CumConfirmed_per_million\", y=\"CumConfirmed_per_SmoothedCumTesting_percent\", source=ColumnDataSource(data2_tails[data2_tails[\"Country\"]==\"Japan\"]), color = \"orangered\", size = 10, line_dash = [3,3]) # plotting the data using glyph circle\ncircle9 = p4.circle(x=\"CumConfirmed_per_million\", y=\"CumConfirmed_per_SmoothedCumTesting_percent\", source=ColumnDataSource(data2_tails[data2_tails[\"Country\"]==\"Ireland\"]), color = \"mediumvioletred\", size = 10, line_dash = [3,3]) # plotting the data using glyph circle\ncircle10 = p4.circle(x=\"CumConfirmed_per_million\", y=\"CumConfirmed_per_SmoothedCumTesting_percent\", source=ColumnDataSource(data2_tails[data2_tails[\"Country\"]==\"Belarus\"]), color = \"gold\", size = 10, line_dash = [3,3]) # plotting the data using glyph circle\n\np4.plot_width = 650                     # To change the width of the plot\np4.plot_height = 400                    # To change the height of plot\np4.background_fill_color = \"ghostwhite\"   # To add background colorto the figure\n# p.background_fill_alpha = 0.12\n\n# Stylize the title\n#     p4.title.text = \"Title With Options\"\np4.title.align = \"left\"\np4.title.text_color = \"red\"\np4.title.text_font_size = \"10px\"\n#     p4.title.background_fill_color = \"#aaaaee\"\n\n\n# Stylize the grid\np4.xgrid.grid_line_color = \"white\"\np4.ygrid.grid_line_color = \"white\"\np4.ygrid.grid_line_alpha = 0.7\np4.xgrid.grid_line_dash = [5,3]\np4.xgrid.grid_line_width = 2\np4.grid.grid_line_dash = [5,3]\np4.grid.grid_line_width = 2\n\n\n# Axes Geometry\n# p4.x_range = DataRange1d(start = 0, end = 1000 ) # x_range changes according to the active legends\np4.y_range = DataRange1d(start = 0, only_visible=True) # y_range changes according to the active legends\np4.x_range = DataRange1d(start = 0, only_visible=True)\np4.yaxis.formatter.use_scientific = False\np4.xaxis.formatter.use_scientific = False\n\n# Stylize the axes\n#     p4.xaxis.major_label_orientation = \"vertical\"\np4.yaxis.ticker.desired_num_ticks = 8 \np4.axis.axis_label_text_font_style = \"bold\" #\"normal\", \"italic\"\np4.axis.axis_label_text_color = \"black\"\n# p4.xaxis.major_label_orientation = \"vertical\"\n# p.axis.major_label_text_font_style = \"bold\" # for axis' major tick marks' labels value color\np4.yaxis.minor_tick_in = 0\np4.yaxis.minor_tick_out = 0\np4.xaxis.minor_tick_in = 0\np4.xaxis.minor_tick_out = 0\n\n\n# Stylize the figure title\np4.title.text_color = \"black\"\np4.title.text_font = \"times\"\np4.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\np4.title.align = \"center\"\n\n\n\n#     # Stylize the tools\n# Adding customization to HoverTool\np4.tools = [ZoomInTool(),ZoomOutTool(), ResetTool(), BoxZoomTool()]\nhover1 = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Total Confirmed\", \"@CumConfirmed\"),\n                               (\"Cumulative Confirmed per million\", \"@CumConfirmed_per_million{0.00}\"),\n                               (\"Positive Testing Ratio\", \"@CumConfirmed_per_SmoothedCumTesting_percent{0.00} %\"),\n                               (\"Population\", \"@Population\"),(\"Population Density\", \"@Pop_Density\")])\np4.add_tools(hover1) # Customization of HoverTool\n\n #Stylize Legends\nlegend = (Legend(items=[(\"Germany\", [circle1]),\n                        (\"Korea, South\", [circle2]),\n                        (\"Finland\", [circle3]),\n                        (\"Denmark\", [circle4]),\n                        (\"Netherlands\", [circle5]),\n                        (\"Australia\", [circle6]),\n                        (\"Croatia\", [circle7]),\n                        (\"Japan\", [circle8]),\n                        (\"Ireland\", [circle9]),\n                        (\"Belarus\", [circle10])\n                    ]))\nlegend.background_fill_color = \"#1f77b4\"\nlegend.background_fill_alpha = 0\nlegend.border_line_color = None\nlegend.click_policy=\"hide\"  # To disable\/hide the legend on click\np4.add_layout(legend, \"right\")\n\n# # Adding Annotations\nmytext_Aus1 = Label(x=1075, y=0.37, text='Australia (0.43%)', text_color = \"black\", text_font_size='8pt', text_font_style = \"bold\")\n# mytext_Aus2 = Label(x=28000, y=0.25, text='(Rate: 0.45%)', text_color = \"black\", text_font_size='7pt', text_font_style = \"italic\")\n\np4.add_layout(mytext_Aus1)\n# p4.add_layout(mytext_Aus2)\n\n# Adding footers as <div> tags (a division or a section in an HTML document)\n\nheader = Div(text = \"<b>Positive Tests Rate Vs. Cumulative Confirmed Count (per million) for the Top 10 Countries with the highest Health Capaciy Scores<\/b>\", \n            width=600, style={'font-size': '120%', 'color': 'black'}, align = \"start\") # height = 50,\nsubheader = Div(text = \"<i>Positive Tests Rate (%) = (Total Confirmed\/ Total Tested)*100<\/i>\", \n            width=600, style={'font-size': '90%', 'color': 'black'}, align = \"start\") # height = 50,\n\nfooter1 = Div(text = \"<b>Note! <i>Positive Tests Rate is calculated based on the last updated <q>Cumulative Testing Count<\/q> value of the country by the source and the corresponding number of <q>Cumulative Confirmed Counts<\/q> that day.<\/i><\/b>\", \n            width=600, style={'font-size': '80%', 'color': 'black'}, align = \"start\") # height = 50,\n\nlayout=column(header,subheader, p4, footer1)\n\n# Displaying the layout\nshow(layout) ","75b0cf4f":"# data1.loc[data1[\"Country\"]==\"Vietnam\"][[\"Country\", \"Days\", \"CumConfirmed\", \"CumTesting\",\"smoothed_cumulative_testing_count\",\"SmoothedCumTesting_per_CumConfirmed\"]]","521d9d4d":"# Creating empty dataframe to include only latest data\ndf_tails = pd.DataFrame(columns=[\"Country\", \"Days\", \n              \"CumConfirmed\", \"CumConfirmed_per_million\", \n              \"CumDeaths\",\n              \"CumRecovered\", \n              \"CumTesting\",\"smoothed_cumulative_testing_count\",\n              \"Population\", \"Pop_Density\", \"Land_Area_Kmsq\", \"HealthCapacityScore\", \"RecoveryRate\", \"FatalityRate\",\"Active\", \n              \"SmoothedCumTesting_per_thousand\",\"SmoothedCumTesting_per_CumConfirmed\",\n              \"CumConfirmed_per_SmoothedCumTesting_percent\"])\n# Feeding values to empty dataframe\nfor country in data[\"Country\"].unique():\n#     df_tails = pd.concat([df_tails, (data1.loc[data[\"Country\"]==country].sort_values(by=['CumTesting', 'CumConfirmed'], ascending=[False, False]).head(1))], ignore_index = True)\n    df_tails = pd.concat([df_tails, (data.loc[data[\"Country\"]==country].sort_values(by=['smoothed_cumulative_testing_count', 'CumConfirmed'], ascending=[False, False]).iloc[[1]])], ignore_index = True)  ","271f606e":"# MergedData.loc[MergedData[\"Country\/Region\"]==\"Fiji\"][[\"Country\/Region\", \"Days\", \"Cumulative Confirmed Count\",\"Cumulative Testing Count\",\n#                                                      \"smoothed_cumulative_testing_count\", \"SmoothedCumTesting_per_CumConfirmed\"]]","1f51468b":"# MergedData.loc[MergedData[\"Country\/Region\"]==\"Taiwan\"]","6b6b16a4":"# df_tails[\"CumTesting\"] = df_tails[\"CumTesting\"].fillna(0)\ndf_tails[\"smoothed_cumulative_testing_count\"] = df_tails[\"smoothed_cumulative_testing_count\"].fillna(0)\ndf_tails[\"SmoothedCumTesting_per_thousand\"] = df_tails[\"SmoothedCumTesting_per_thousand\"].fillna(0)\ndf_tails[\"SmoothedCumTesting_per_CumConfirmed\"] = df_tails[\"SmoothedCumTesting_per_CumConfirmed\"].fillna(0)\n# df_tails[\"CumConfirmed_per_SmoothedCumTesting\"] = df_tails[\"CumConfirmed_per_SmoothedCumTesting\"].fillna(0)\n# df_tails","f81b0e77":"# print(df_tails['SmoothedCumTesting_per_CumConfirmed'].min(), df_tails['SmoothedCumTesting_per_CumConfirmed'].max())\nprint(df_tails['CumConfirmed_per_SmoothedCumTesting_percent'].min(), '-',df_tails['CumConfirmed_per_SmoothedCumTesting_percent'].max())","3cf8d9ac":"df_tails['CumConfirmed_per_SmoothedCumTesting_percent'].isna().sum()\n# df_tails['SmoothedCumTesting_per_CumConfirmed'].isna().sum()","8663866c":"# df_tails[df_tails['CumConfirmed_per_SmoothedCumTesting_percent']<10]","6a216092":"df_tails.isna().sum()","aca4eeef":"from bokeh.transform import factor_cmap, factor_mark\nfrom bokeh.models import LinearColorMapper, BasicTicker, ColorBar\n\n# Replacing null values in \"CumConfirmed_per_SmoothedCumTesting_percent\"(positive tests rate) with blanks.\n# Also replacing null values in Health Capacity Score column with blanks.\ndf_tails[\"CumConfirmed_per_SmoothedCumTesting_percent\"] = df_tails[\"CumConfirmed_per_SmoothedCumTesting_percent\"].fillna(\"\")\ndf_tails[\"HealthCapacityScore\"] = df_tails[\"HealthCapacityScore\"].fillna(\"\")\n\n\n# 1. Creating column containing Intervals for Population: \n\ndef func(x):\n    if x < 1000000:\n        return '< 1m'\n    if 1000000 < x <= 10000000:\n        return '1-10m'\n    if 10000000 < x <= 50000000 :\n        return '10-50m'\n    if 50000000 < x <= 100000000:\n        return '50-100m'\n    if x > 100000000:\n        return '>100m'\n\ndf_tails['PopulationInterval'] = df_tails['Population'].apply(func)\n# Creating colormap for different levels of Population Intervals\ncolormap1 = {'< 1m':\"silver\",'1-10m':\"burlywood\", '10-50m':\"yellow\",'50-100m':\"orange\",'>100m':\"red\"} # Giving names to colors\n# Creating color column for PopulationInterval using list comprehension\ndf_tails[\"PopulationColor\"] = [colormap1[x] for x in df_tails[\"PopulationInterval\"]]\n\n# 2. Creating column containing Intervals for Health Capacity Score (Score\/100): \ndef func(x):\n    if x == \"\":\n        return 'Data Unavailable'\n    if x < 20:\n        return '< 20'\n    if 20 <= x <= 40:\n        return '20-40'\n    if 40 <= x <= 60 :\n        return '40-60'\n    if 60 <= x <= 80:\n        return '60-80'\n    if 80 <= x <= 100:\n        return '80-100'\n    \ndf_tails['ScoreInterval'] = df_tails['HealthCapacityScore'].apply(func)  \n# Creating colormap for different levels of Health Capacity Score\ncolormap2 = {'Data Unavailable':\"silver\",'< 20':\"burlywood\",'20-40':\"yellow\", '40-60':\"orange\",'60-80':\"green\",'80-100':\"blue\"} # Giving names to colors\n# Creating color column for ScoreInterval using list comprehension\ndf_tails[\"ScoreColor\"] = [colormap2[x] for x in df_tails[\"ScoreInterval\"]]\n\n# 3. Creating column containing Intervals for Testing Ratio: \ndef func(x):\n    if x == 0:\n        return 'Zero Testing'\n    if 0 < x <= 50:\n        return '(0 - 50]'\n    if 50 < x <= 100 :\n        return '(50 - 100]'\n    if 100 < x <= 200:\n        return '(100 - 200]'\n    if 200 < x <= 400:\n        return '(200 - 400]'\n    if x > 400:\n        return '(400 and more)'\n    \ndf_tails['TestingRateInterval'] = df_tails['SmoothedCumTesting_per_CumConfirmed'].apply(func)\ncolormap3 = {'Zero Testing':\"silver\",'(0 - 50]':\"burlywood\", '(50 - 100]':\"yellow\",'(100 - 200]':\"orange\",'(200 - 400]':\"red\", '(400 and more)': \"green\" } # Giving names to colors\n# Creating color column using list comprehension\ndf_tails[\"TestingColor\"] = [colormap3[x] for x in df_tails[\"TestingRateInterval\"]]\n\n# 4. Creating column containing Intervals for Positive Testing: \ndef func(x):\n    if x == \"\":\n        return 'Zero Testing'\n    if 0 < x <= 1:\n        return '< 1%'\n    if 1 < x <= 10:\n        return '(1% - 10%]'\n    if 10 < x <= 25 :\n        return '(10% - 25%]'\n    if 25 < x <= 50:\n        return '(25% - 50%]'\n    if 50 < x <= 75:\n        return '(50% - 75%]'\n    if 75 < x <= 100:\n        return '(75% - 100%]'\n    if x > 100:\n        return '> 100%'\n    \ndf_tails['TestingPositiveRate'] = df_tails['CumConfirmed_per_SmoothedCumTesting_percent'].apply(func)\ncolormap4 = {'Zero Testing':\"silver\",'< 1%':\"indigo\", '(1% - 10%]':\"green\",'(10% - 25%]':\"yellowgreen\",'(25% - 50%]':\"yellow\", '(50% - 75%]': \"orange\",'(75% - 100%]':\"red\",'> 100%':\"darkred\"  } # Giving names to colors\n# Creating color column using list comprehension\ndf_tails[\"TestingPositiveRateColor\"] = [colormap4[x] for x in df_tails[\"TestingPositiveRate\"]]\n\n\n# Rearranging the columns in df_tails\ndf_tails = df_tails[[\"Country\", \"Days\", \n                     \"CumConfirmed\", \"CumConfirmed_per_million\",\n                     \"CumDeaths\", \n                     \"CumRecovered\", \n                     \"CumTesting\", \"smoothed_cumulative_testing_count\",\n                     \"Population\", \"Pop_Density\", \"Land_Area_Kmsq\", \"HealthCapacityScore\",\n                     \"Active\", \"RecoveryRate\",\"FatalityRate\",\n                     \"SmoothedCumTesting_per_CumConfirmed\", \"SmoothedCumTesting_per_thousand\",\n                     'CumConfirmed_per_SmoothedCumTesting_percent',\n                     'TestingPositiveRate', 'TestingPositiveRateColor',\n                     \"PopulationInterval\", \"PopulationColor\", \"ScoreInterval\", \"ScoreColor\", \"TestingRateInterval\", \"TestingColor\"\n                    ]]","4b7aae9e":"# df_test[\"Country\/Region\"].unique()","ca02de32":"# df_tails","b2ef0cdd":"# data1.loc[data1[\"Country\"]==\"Vietnam\"]\n# df_tails.loc[df_tails[\"Country\"]==\"Vietnam\"]","76882342":"plots = [] \nx_list = [\"Population\", \"Pop_Density\"]\n\nfor x in x_list:\n    # Creating the figure\n    p4 = figure(x_axis_label = x , y_axis_label = 'Confirmed Cases', y_axis_type =\"log\",x_axis_type =\"log\",\n                title =('Cumulative Confirmed Counts Vs. ' + x + ' for the Countries')) #creating figure object \n#     p4.add_layout(Title(text=\"Confirmed Cases Vs. ' + x + ' for the Countries', text_font_size=\"11pt\", above, 'center'))\n    p4.add_layout(Title(text=\"Rate of Positive Tests (PT%) = (Total Confirmed\/ Total Tested)*100\", text_font_size=\"9pt\", align=\"left\"), 'above')\n    p4.add_layout(Title(text=\"Grouping of countries is by Intervals of Positive Tests Rates\", text_font_size=\"10pt\", text_font_style=\"italic\", align=\"left\"), 'above')\n\n    # Plotting the graph\n    c0 = p4.circle(x=x, y = \"CumConfirmed\", size =10, fill_alpha = 0.65, color =\"TestingPositiveRateColor\",line_dash = [3,3], \n                   source = ColumnDataSource(df_tails[df_tails[\"TestingPositiveRate\"]==\"Zero Testing\"]))\n    c1 = p4.circle(x=x, y = \"CumConfirmed\", size =10, fill_alpha = 0.65, color =\"TestingPositiveRateColor\",line_dash = [3,3], \n                   source = ColumnDataSource(df_tails[df_tails[\"TestingPositiveRate\"]=='< 1%']))\n    c2 = p4.circle(x=x, y = \"CumConfirmed\", size =10, fill_alpha = 0.65, color =\"TestingPositiveRateColor\",line_dash = [3,3], \n                   source = ColumnDataSource(df_tails[df_tails[\"TestingPositiveRate\"]=='(1% - 10%]']))\n    c3 = p4.circle(x=x, y = \"CumConfirmed\", size =10, fill_alpha = 0.65, color =\"TestingPositiveRateColor\",line_dash = [3,3], \n                   source = ColumnDataSource(df_tails[df_tails[\"TestingPositiveRate\"]=='(10% - 25%]']))\n    c4 = p4.circle(x=x, y = \"CumConfirmed\", size =10, fill_alpha = 0.65, color =\"TestingPositiveRateColor\",line_dash = [3,3], \n                   source = ColumnDataSource(df_tails[df_tails[\"TestingPositiveRate\"]=='(25% - 50%]']))\n    c5 = p4.circle(x=x, y = \"CumConfirmed\", size =10, fill_alpha = 0.65, color =\"TestingPositiveRateColor\",line_dash = [3,3], \n                   source = ColumnDataSource(df_tails[df_tails[\"TestingPositiveRate\"]=='(50% - 75%]']))\n    c6 = p4.circle(x=x, y = \"CumConfirmed\", size =10, fill_alpha = 0.65, color =\"TestingPositiveRateColor\",line_dash = [3,3], \n                   source = ColumnDataSource(df_tails[df_tails[\"TestingPositiveRate\"]=='(75% - 100%]']))\n    c7 = p4.circle(x=x, y = \"CumConfirmed\", size =10, fill_alpha = 0.65, color =\"TestingPositiveRateColor\",line_dash = [3,3], \n                   source = ColumnDataSource(df_tails[df_tails[\"TestingPositiveRate\"]=='> 100%']))\n    \n    # Stylize the plot area\n    p4.plot_width = 650                     # To change the width of the plot\n    p4.plot_height = 400                    # To change the height of plot\n    p4.background_fill_color = \"ghostwhite\"   # To add background colorto the figure\n    # p.background_fill_alpha = 0.12\n    \n    # Stylize the title\n#     p4.title.text = \"Title With Options\"\n    p4.title.align = \"left\"\n    p4.title.text_color = \"red\"\n    p4.title.text_font_size = \"10px\"\n#     p4.title.background_fill_color = \"#aaaaee\"\n\n\n    # Stylize the grid\n    p4.xgrid.grid_line_color = \"white\"\n    p4.ygrid.grid_line_color = \"white\"\n    p4.ygrid.grid_line_alpha = 0.7\n    p4.xgrid.grid_line_dash = [5,3]\n    p4.xgrid.grid_line_width = 2\n    p4.grid.grid_line_dash = [5,3]\n    p4.grid.grid_line_width = 2\n\n\n    # Axes Geometry\n    # p4.x_range = DataRange1d(start = 0, end = 1000 ) # x_range changes according to the active legends\n    p4.y_range = DataRange1d(start = 1, only_visible=True) # y_range changes according to the active legends\n    p4.x_range = DataRange1d(start = 1, only_visible=True)\n#     p4.yaxis.formatter.use_scientific = False\n#     p4.xaxis.formatter.use_scientific = False\n\n    # Stylize the axes\n#     p4.xaxis.major_label_orientation = \"vertical\"\n    p4.yaxis.ticker.desired_num_ticks = 8 \n    p4.axis.axis_label_text_font_style = \"bold\" #\"normal\", \"italic\"\n    p4.axis.axis_label_text_color = \"black\"\n    # p4.xaxis.major_label_orientation = \"vertical\"\n    # p.axis.major_label_text_font_style = \"bold\" # for axis' major tick marks' labels value color\n    p4.yaxis.minor_tick_in = 0\n    p4.yaxis.minor_tick_out = 0\n    p4.xaxis.minor_tick_in = 0\n    p4.xaxis.minor_tick_out = 0\n\n\n    # Stylize the figure title\n    p4.title.text_color = \"black\"\n    p4.title.text_font = \"times\"\n    p4.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\n    p4.title.align = \"center\"\n\n    legend = Legend(items=[('< 1%', [c1]),(\"(1% - 10%]\", [c2]), \n                           (\"(10% - 25%]\", [c3]), (\"(25% - 50%]\" , [c4]),\n                           (\"(50% - 75%]\" , [c5]), (\"(75% - 100%]\" , [c6]),\n                           (\"> 100%\" , [c7]), ('Zero Testing', [c0])\n                  ])\n#     legend.title = \"Select Testing Ratio Interval:\"\n    legend.border_line_color = None\n    legend.click_policy=\"hide\"  # To disable\/hide the legend on click\n    p4.add_layout(legend, 'right')\n\n    # Adding arrow to locate marker for Australia in the large number of points\n    from bokeh.models import Arrow, OpenHead, NormalHead, VeeHead\n    # Arrow for Australia\n    p4.add_layout(Arrow(end=VeeHead(line_color=\"darkgray\", line_dash = [1,3], size = 6),\n                   x_start=24000000, y_start=27000, x_end=24000000, y_end=750000, line_dash = [3,1]))\n    # Arrow for New Zealand\n    p4.add_layout(Arrow(end=VeeHead(line_color=\"darkgray\", line_dash = [1,3], size = 6),\n                   x_start=4800000, y_start=1500, x_end=4800000, y_end=200000, line_dash = [3,1]))\n#     # Arrow for Korea, South\n    p4.add_layout(Arrow(end=VeeHead(line_color=\"darkgray\",line_dash = [1,3], size = 6),\n                   x_start=53000000, y_start=18562, x_end=200000000, y_end=18562, line_dash = [3,1]))\n#     # Arrow for Taiwan\n    p4.add_layout(Arrow(end=VeeHead(line_color=\"darkgray\",line_dash = [1,3], size = 6),\n                   x_start=23000000, y_start=470, x_end=23000000, y_end=10, line_dash = [3,1]))\n    # Arrow for Vietnam\n    p4.add_layout(Arrow(end=VeeHead(line_color=\"darkgray\", line_dash = [1,3], size = 6),\n                   x_start=100000000, y_start=220, x_end=100000000, y_end=50, line_dash = [3,1]))\n    # Arrow for US\n    p4.add_layout(Arrow(end=VeeHead(line_color=\"gray\", line_dash = [1,3], size = 6),\n                   x_start=300000000, y_start=5200000, x_end=50000000, y_end=5200000, line_dash = [3,1])) #,line_width=2\n#     # Arrow for Brazil\n    p4.add_layout(Arrow(end=VeeHead(line_color=\"darkgray\", line_dash = [1,3], size = 6),\n                   x_start=220000000, y_start=3000000, x_end=335000000, y_end=3000000, line_dash = [3,1])) # , line_width=2\n    \n     # Adding Annotations\n    mytext_Aus1 = Label(x=8700000, y=1180000, text='Australia', text_color = \"black\", text_font_size='8pt', text_font_style = \"bold\")\n    mytext_Aus2 = Label(x=8700000, y=730000, text='(PT%: 0.43%)', text_color = \"black\", text_font_size='7pt', text_font_style = \"italic\")\n\n    mytext_NZ1 = Label(x=950000, y=315000, text='New Zealand', text_color = \"black\", text_font_size='8pt', text_font_style = \"bold\")\n    mytext_NZ2 = Label(x=950000, y=190000, text='(PT%: 0.24%)', text_color = \"black\", text_font_size='7pt', text_font_style = \"italic\")\n    \n    mytext_KSouth1 = Label(x=215700000, y=11562, text='South Korea', text_color = \"black\", text_font_size='8pt', text_font_style = \"bold\")\n    mytext_KSouth2 = Label(x=215000000, y=6562, text='(PT%: 1.05%)', text_color = \"black\", text_font_size='7pt', text_font_style = \"italic\")\n\n    mytext_Taiwan1 = Label(x=10000000, y=5, text='Taiwan', text_color = \"black\", text_font_size='8pt', text_font_style = \"bold\")\n    mytext_Taiwan2 = Label(x=10000000, y=2.5, text='(PT%:0.56%)', text_color = \"black\", text_font_size='7pt', text_font_style = \"italic\")\n\n    mytext_Vietnam1 = Label(x=41000000, y=25, text='Vietnam', text_color = \"black\", text_font_size='8pt', text_font_style = \"bold\")\n    mytext_Vietnam2 = Label(x=40900000, y=14, text='(PT%: 0.11%)', text_color = \"black\", text_font_size='7pt', text_font_style = \"italic\")\n\n    mytext_US1 = Label(x=22000000, y=4000000, text='US', text_color = \"black\", text_font_size='8pt', text_font_style = \"bold\")\n    mytext_US2 = Label(x=16000000, y=2400000, text='(PT%: 7.47%)', text_color = \"black\", text_font_size='7pt', text_font_style = \"italic\")\n\n    mytext_Brazil1 = Label(x=345000000, y=1800000, text='Brazil', text_color = \"black\", text_font_size='8pt', text_font_style = \"bold\")\n    mytext_Brazil2 = Label(x=235000000, y=1000000, text='(PT%: 75.06%)', text_color = \"black\", text_font_size='7pt', text_font_style = \"italic\")\n\n    p4.add_layout(mytext_Aus1)\n    p4.add_layout(mytext_Aus2)\n    p4.add_layout(mytext_NZ1)\n    p4.add_layout(mytext_NZ2)\n    p4.add_layout(mytext_KSouth1)\n    p4.add_layout(mytext_KSouth2)\n    p4.add_layout(mytext_Taiwan1)\n    p4.add_layout(mytext_Taiwan2)\n    p4.add_layout(mytext_Vietnam1)\n    p4.add_layout(mytext_Vietnam2)\n    p4.add_layout(mytext_US1)\n    p4.add_layout(mytext_US2)\n    p4.add_layout(mytext_Brazil1)\n    p4.add_layout(mytext_Brazil2)\n#     # Stylize the tools\n    # Adding customization to HoverTool\n    p4.tools = [ZoomInTool(),ZoomOutTool(), ResetTool(), BoxZoomTool()]\n    hover1 = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Total Confirmed\", \"@CumConfirmed\"),\n                                  (\"Total Tested\", \"@smoothed_cumulative_testing_count\"), \n                                  (\"Positive Testing Ratio\", \"@CumConfirmed_per_SmoothedCumTesting_percent{0.00} %\"),\n                                  (\"Population\", \"@Population\"),(\"Population Density\", \"@Pop_Density\")])\n    p4.add_tools(hover1) # Customization of HoverTool\n    plots.append(p4)\n    \n\n# Creating separate tabs for the two figures created above\ntab1 = Panel(child=plots[0], title=\"Population\")\ntab2 = Panel(child=plots[1], title=\"Population Density\")\n\n# Creating list of Tabs\ntabs = Tabs(tabs=[ tab1, tab2 ])  \n\n# Adding footers as <div> tags (a division or a section in an HTML document)\n\nfooter1 = Div(text = \"<b>Note! Positive Tests Rate is calculated based on the last updated <q>Cumulative Testing Count<\/q> value of the country and the corresponding number of <q>Cumulative Confirmed Counts<\/q> that day.<\/b>\", \n            width=600, style={'font-size': '65%', 'color': 'black'}, align = \"start\") # height = 50,\nfooter2 = Div(text = \"<b>For example, for Vietnam the <q>Cumulative Testing Count<\/q> was last updated on day 84 <i> (since first 10 confirmed cases)<\/i> but currently (at the time of plotting the graph) country is at day 186 but no testing data has been updated after day 84.<\/b>\", \n            width=600, style={'font-size': '65%', 'color': 'black'}, align = \"start\") # height = 50,\nfooter3 = Div(text = \"<b>As mentioned in the testing dataset source website <i>(https:\/\/ourworldindata.org\/coronavirus-testing)<\/i>: Until 29th April (day 84-(since first 10 confirmed cases)), the Vietnamese Ministry of Health were updating a figure for tests on its disease situation statistics page daily. More recently the website stopped updating its testing data, and finally stopped reporting the figures altogether. The last date we were able to collect testing data was on the 29th April.<b>\", \n            width=600, style={'font-size': '65%', 'color': 'black'}, align = \"start\") # height = 50,\n\nlayout=column(tabs, footer1, footer2, footer3)\n\n# Displaying the layout\nshow(layout) ","2e9315e9":"plots = [] \nx_list = [\"Population\", \"Pop_Density\"]\n\nfor x in x_list:\n    # Creating the figure\n    p4 = figure(x_axis_label = x , y_axis_label = 'Confirmed Cases', y_axis_type =\"log\",x_axis_type =\"log\",\n                title =('Cumulative Confirmed Counts Vs. ' + x + ' for the Countries')) #creating figure object \n#     p4.add_layout(Title(text=\"Confirmed Cases Vs. ' + x + ' for the Countries', text_font_size=\"11pt\", above, 'center'))\n    p4.add_layout(Title(text=\"Testing Ratio (TR) = Total Tested \/ Total Confirmed\", text_font_size=\"9pt\", align=\"left\"), 'above')\n    p4.add_layout(Title(text=\"Grouping of countries is by Testing Ratio Interval\", text_font_size=\"10pt\", text_font_style=\"italic\", align=\"left\"), 'above')\n\n    # Plotting the graph\n    c0 = p4.circle(x=x, y = \"CumConfirmed\", size =10, fill_alpha = 0.7, color =\"TestingColor\",line_dash = [3,3], \n                   source = ColumnDataSource(df_tails[df_tails[\"TestingRateInterval\"]==\"Zero Testing\"]))\n    c1 = p4.circle(x=x, y = \"CumConfirmed\", size =10, fill_alpha = 0.7, color =\"TestingColor\",line_dash = [3,3], \n                   source = ColumnDataSource(df_tails[df_tails[\"TestingRateInterval\"]=='(0 - 50]']))\n    c2 = p4.circle(x=x, y = \"CumConfirmed\", size =10, fill_alpha = 0.7, color =\"TestingColor\",line_dash = [3,3], \n                   source = ColumnDataSource(df_tails[df_tails[\"TestingRateInterval\"]=='(50 - 100]']))\n    c3 = p4.circle(x=x, y = \"CumConfirmed\", size =10, fill_alpha = 0.7, color =\"TestingColor\",line_dash = [3,3], \n                   source = ColumnDataSource(df_tails[df_tails[\"TestingRateInterval\"]=='(100 - 200]']))\n    c4 = p4.circle(x=x, y = \"CumConfirmed\", size =10, fill_alpha = 0.7, color =\"TestingColor\",line_dash = [3,3], \n                   source = ColumnDataSource(df_tails[df_tails[\"TestingRateInterval\"]=='(200 - 400]']))\n    c5 = p4.circle(x=x, y = \"CumConfirmed\", size =10, fill_alpha = 0.7, color =\"TestingColor\",line_dash = [3,3], \n                   source = ColumnDataSource(df_tails[df_tails[\"TestingRateInterval\"]=='(400 and more)']))\n    \n    # Stylize the plot area\n    p4.plot_width = 650                     # To change the width of the plot\n    p4.plot_height = 400                    # To change the height of plot\n    p4.background_fill_color = \"ghostwhite\"   # To add background colorto the figure\n    # p.background_fill_alpha = 0.12\n    \n    # Stylize the title\n#     p4.title.text = \"Title With Options\"\n    p4.title.align = \"left\"\n    p4.title.text_color = \"red\"\n    p4.title.text_font_size = \"10px\"\n#     p4.title.background_fill_color = \"#aaaaee\"\n\n\n    # Stylize the grid\n    p4.xgrid.grid_line_color = \"white\"\n    p4.ygrid.grid_line_color = \"white\"\n    p4.ygrid.grid_line_alpha = 0.7\n    p4.xgrid.grid_line_dash = [5,3]\n    p4.xgrid.grid_line_width = 2\n    p4.grid.grid_line_dash = [5,3]\n    p4.grid.grid_line_width = 2\n\n\n    # Axes Geometry\n    # p4.x_range = DataRange1d(start = 0, end = 1000 ) # x_range changes according to the active legends\n    p4.y_range = DataRange1d(start = 1, only_visible=True) # y_range changes according to the active legends\n    p4.x_range = DataRange1d(start = 1, only_visible=True)\n#     p4.yaxis.formatter.use_scientific = False\n#     p4.xaxis.formatter.use_scientific = False\n\n    # Stylize the axes\n#     p4.xaxis.major_label_orientation = \"vertical\"\n    p4.yaxis.ticker.desired_num_ticks = 8 \n    p4.axis.axis_label_text_font_style = \"bold\" #\"normal\", \"italic\"\n    p4.axis.axis_label_text_color = \"black\"\n    # p4.xaxis.major_label_orientation = \"vertical\"\n    # p.axis.major_label_text_font_style = \"bold\" # for axis' major tick marks' labels value color\n    p4.yaxis.minor_tick_in = 0\n    p4.yaxis.minor_tick_out = 0\n    p4.xaxis.minor_tick_in = 0\n    p4.xaxis.minor_tick_out = 0\n\n\n    # Stylize the figure title\n    p4.title.text_color = \"black\"\n    p4.title.text_font = \"times\"\n    p4.title.text_font_size = \"20px\" # px stands for pixel. Have to mention.\n    p4.title.align = \"center\"\n\n    legend = Legend(items=[('Zero Testing', [c0]),('(0 - 50]', [c1]),(\"(50 - 100]\", [c2]), \n                           (\"(100 - 200]\", [c3]), (\"(200 - 400]\" , [c4]), \n                           (\"(400 and more)\" , [c5])\n                  ])\n#     legend.title = \"Select Testing Ratio Interval:\"\n    legend.border_line_color = None\n    legend.click_policy=\"hide\"  # To disable\/hide the legend on click\n    p4.add_layout(legend, 'right')\n\n    # Adding arrow to locate marker for Australia in the large number of points\n    from bokeh.models import Arrow, OpenHead, NormalHead, VeeHead\n    # Arrow for Australia\n    p4.add_layout(Arrow(end=VeeHead(line_color=\"darkgray\", line_dash = [1,3], size = 6),\n                   x_start=24000000, y_start=27000, x_end=24000000, y_end=750000))\n    # Arrow for New Zealand\n    p4.add_layout(Arrow(end=VeeHead(line_color=\"darkgray\", line_dash = [1,3], size = 6),\n                   x_start=4800000, y_start=1500, x_end=4800000, y_end=200000))\n#     # Arrow for Lithania\n    p4.add_layout(Arrow(end=VeeHead(line_color=\"black\", line_width=2, size = 6),\n                   x_start=2700000, y_start=2080, x_end=2700000, y_end=10))\n#     # Arrow for Fiji\n    p4.add_layout(Arrow(end=VeeHead(line_color=\"black\", line_width=2, size = 6),\n                   x_start=800000, y_start=25, x_end=200000, y_end=5))\n    # Arrow for Vietnam\n    p4.add_layout(Arrow(end=VeeHead(line_color=\"black\", line_width=2, size = 6),\n                   x_start=100000000, y_start=220, x_end=100000000, y_end=50))\n    \n     # Adding Annotations\n    # Adding Annotations\n    mytext_Aus1 = Label(x=8700000, y=1180000, text='Australia', text_color = \"black\", text_font_size='8pt', text_font_style = \"bold\")\n    mytext_Aus2 = Label(x=8700000, y=730000, text='(TR: 232.46)', text_color = \"black\", text_font_size='7pt', text_font_style = \"bold\")\n\n    mytext_NZ1 = Label(x=950000, y=315000, text='New Zealand', text_color = \"black\", text_font_size='8pt', text_font_style = \"bold\")\n    mytext_NZ2 = Label(x=950000, y=190000, text='(TR: 422.63)', text_color = \"black\", text_font_size='7pt', text_font_style = \"bold\")\n    \n    mytext_Lithuania = Label(x=1000000, y=5, text='Lithuania (TR: 225.87)', text_color = \"black\", text_font_size='8pt', text_font_style = \"bold\")\n    mytext_Fiji = Label(x=90000, y=2.5, text='Fiji (TR: 284.32)', text_color = \"black\", text_font_size='8pt', text_font_style = \"bold\")\n    mytext_Vietnam = Label(x=41000000, y=25, text='Vietnam (TR: 879.16)', text_color = \"black\", text_font_size='8pt', text_font_style = \"bold\")\n    \n    p4.add_layout(mytext_Aus1)\n    p4.add_layout(mytext_Aus2)\n    p4.add_layout(mytext_NZ1)\n    p4.add_layout(mytext_NZ2)\n    p4.add_layout(mytext_Lithuania)\n    p4.add_layout(mytext_Fiji)\n    p4.add_layout(mytext_Vietnam)\n    # Stylize the tools\n    # Adding customization to HoverTool\n    p4.tools = [ZoomInTool(),ZoomOutTool(), ResetTool(), BoxZoomTool()]\n    hover = HoverTool(tooltips = [(\"Country\", \"@Country\"),(\"Total Confirmed\", \"@CumConfirmed\"),\n                                  (\"Total Tested\", \"@smoothed_cumulative_testing_count\"), \n                                  (\"Testing Ratio\", \"@SmoothedCumTesting_per_CumConfirmed{0.000}\"),\n                                  (\"Population\", \"@Population\"),(\"Population Density\", \"@Pop_Density\")])\n    p4.add_tools(hover) # Customization of HoverTool\n    plots.append(p4)\n    \n\n# Creating separate tabs for the two figures created above\ntab1 = Panel(child=plots[0], title=\"Population\")\ntab2 = Panel(child=plots[1], title=\"Population Density\")\n\n# Creating list of Tabs\ntabs = Tabs(tabs=[ tab1, tab2 ])  \n\n# Adding footers as <div> tags (a division or a section in an HTML document)\n\nfooter1 = Div(text = \"<b>Note! Testing Ratio is calculated based on the last updated <q>Cumulative Testing Count<\/q>by the country and the corresponding number of <q>Cumulative Confirmed Counts<\/q> that day.<\/b>\", \n            width=600, style={'font-size': '65%', 'color': 'black'}, align = \"start\") # height = 50,\nfooter2 = Div(text = \"<b>For example, for Vietnam the <q>Cumulative Testing Count<\/q> was last updated on day 84 <i> (since first 10 confirmed cases)<\/i> but currently (at the time of plotting the graph) country is at day 176 but no testing data has been updated after day 84.<\/b>\", \n            width=600, style={'font-size': '65%', 'color': 'black'}, align = \"start\") # height = 50,\nfooter3 = Div(text = \"<b>As mentioned in the testing dataset source website <i>(https:\/\/ourworldindata.org\/coronavirus-testing)<\/i>: Until 29th April (day 84-(since first 10 confirmed cases)), the Vietnamese Ministry of Health were updating a figure for tests on its disease situation statistics page daily. More recently the website stopped updating its testing data, and finally stopped reporting the figures altogether. The last date we were able to collect testing data was on the 29th April.<b>\", \n            width=600, style={'font-size': '65%', 'color': 'black'}, align = \"start\") # height = 50,\n\nlayout=column(tabs, footer1, footer2, footer3)\n\n# Displaying the layout\nshow(layout) ","8bbfb065":"##### 2.2 Trajectories of Cumulative Confirmed and Testing Count plot for top 7 highly populated countries and Australia","301ee6f8":"##### 3.3 Recovery Rate trajectories for top 7 highly populated countries and Australia","704ab98c":"<b><i> Filtering latest data for the top 10 countries with highest health capacity scores\" <\/i><\/b>","8eec197f":"##### Merging the cleaned population data (df_pop) with the MergedData: Keeping only the countries which are in MergedData (Covid Data)","3d10e10a":"#### Interpolating \"Cumulative Testing Count \" and storing the values in a new column named \"smoothed_cumulative_testing_count\"","523b6a0a":"<b> Importing related libraries <\/b>","8a878efc":"###### Changing the \"Date\" column from object type to type datetime and then changing it to the format present in Confirmed Cases\/ Deaths\/Recovered Cases datasets for \"Dates\"","65f9afe9":"#### Recovered Cases of COVID-19","313b8b0e":"##### Data Preprocessing for the dataset IV","59bee631":"##### 7.3 Cumulative Confirmed Vs. Population graph while grouping countries based on Cumulative Testing to Cumulative Confirmed ratio for all countries  ","5953f984":"##### Shifting all data to one starting point & converting the Dates format to Days\n\nConverting the Dates format to Days to bring all countries data to start from 1 starting point \"Day1: 1\"\nDay1: 1,  is the day on which the confirmed cases for the country got greater than or equal to 10 ","bcf0fc90":"###### Changing the name columns for better understanding and convenience","26fcbfe6":"### Importing Libraries","5d6066c6":"#### 1. Trajectories of Cumulative Confirmed , Recovered, Deaths, Testing Counts Vs. Days for all Countries","32d12080":"#### 5.  Trajectories of 7-day rolling average of Count of Confirmed Cases (per million) and 7-day average of Testing Count (per thousand) \n\n##### 5.1  Trajectories of 7-day rolling average of Count of Confirmed Cases (per million) and 7-day average of Testing Count (per thousand) for all countries individually","39eb5970":"##### 7.2 Cumulative Confirmed Vs. Population graph while grouping countries based on Positive Tests Rate for all countries  ","9dd92543":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Importing-Libraries\" data-toc-modified-id=\"Importing-Libraries-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Importing Libraries<\/a><\/span><\/li><li><span><a href=\"#Datasets-to-be-studied\" data-toc-modified-id=\"Datasets-to-be-studied-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Datasets to be studied<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Confirmed-Cases-of-COVID-19\" data-toc-modified-id=\"Confirmed-Cases-of-COVID-19-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;<\/span>Confirmed Cases of COVID-19<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Reading-data-from-the-Source-and-dropping-not-required-columns\" data-toc-modified-id=\"Reading-data-from-the-Source-and-dropping-not-required-columns-2.1.1\"><span class=\"toc-item-num\">2.1.1&nbsp;&nbsp;<\/span>Reading data from the Source and dropping not required columns<\/a><\/span><\/li><li><span><a href=\"#Data-Preprocessing-for-the-dataset-I\" data-toc-modified-id=\"Data-Preprocessing-for-the-dataset-I-2.1.2\"><span class=\"toc-item-num\">2.1.2&nbsp;&nbsp;<\/span>Data Preprocessing for the dataset I<\/a><\/span><\/li><li><span><a href=\"#Shifting-all-data-to-one-starting-point-&amp;-converting-the-Dates-format-to-Days\" data-toc-modified-id=\"Shifting-all-data-to-one-starting-point-&amp;-converting-the-Dates-format-to-Days-2.1.3\"><span class=\"toc-item-num\">2.1.3&nbsp;&nbsp;<\/span>Shifting all data to one starting point &amp; converting the Dates format to Days<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Deaths-due-to-COVID-19\" data-toc-modified-id=\"Deaths-due-to-COVID-19-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;<\/span>Deaths due to COVID-19<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Reading-data-from-the-source-and-removing-not-required-columns\" data-toc-modified-id=\"Reading-data-from-the-source-and-removing-not-required-columns-2.2.1\"><span class=\"toc-item-num\">2.2.1&nbsp;&nbsp;<\/span>Reading data from the source and removing not required columns<\/a><\/span><\/li><li><span><a href=\"#Data-Preprocessing\" data-toc-modified-id=\"Data-Preprocessing-2.2.2\"><span class=\"toc-item-num\">2.2.2&nbsp;&nbsp;<\/span>Data Preprocessing<\/a><\/span><\/li><li><span><a href=\"#Shifting-all-data-to-one-starting-point-&amp;-converting-the-Dates-format-to-Days\" data-toc-modified-id=\"Shifting-all-data-to-one-starting-point-&amp;-converting-the-Dates-format-to-Days-2.2.3\"><span class=\"toc-item-num\">2.2.3&nbsp;&nbsp;<\/span>Shifting all data to one starting point &amp; converting the Dates format to Days<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Recovered-Cases-of-COVID-19\" data-toc-modified-id=\"Recovered-Cases-of-COVID-19-2.3\"><span class=\"toc-item-num\">2.3&nbsp;&nbsp;<\/span>Recovered Cases of COVID-19<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Reading-data-from-the-source-and-dropping-not-required-columns\" data-toc-modified-id=\"Reading-data-from-the-source-and-dropping-not-required-columns-2.3.1\"><span class=\"toc-item-num\">2.3.1&nbsp;&nbsp;<\/span>Reading data from the source and dropping not required columns<\/a><\/span><\/li><li><span><a href=\"#Data-Prepocessing\" data-toc-modified-id=\"Data-Prepocessing-2.3.2\"><span class=\"toc-item-num\">2.3.2&nbsp;&nbsp;<\/span>Data Prepocessing<\/a><\/span><\/li><li><span><a href=\"#Shifting-all-data-to-one-starting-point-&amp;-converting-the-Dates-format-to-Days\" data-toc-modified-id=\"Shifting-all-data-to-one-starting-point-&amp;-converting-the-Dates-format-to-Days-2.3.3\"><span class=\"toc-item-num\">2.3.3&nbsp;&nbsp;<\/span>Shifting all data to one starting point &amp; converting the Dates format to Days<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Importing-Dataset-for-Testing-of-COVID-19\" data-toc-modified-id=\"Importing-Dataset-for-Testing-of-COVID-19-2.4\"><span class=\"toc-item-num\">2.4&nbsp;&nbsp;<\/span>Importing Dataset for Testing of COVID-19<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Reading-data-from-the-source\" data-toc-modified-id=\"Reading-data-from-the-source-2.4.1\"><span class=\"toc-item-num\">2.4.1&nbsp;&nbsp;<\/span>Reading data from the source<\/a><\/span><\/li><li><span><a href=\"#Data-Preprocessing-for-the-dataset-IV\" data-toc-modified-id=\"Data-Preprocessing-for-the-dataset-IV-2.4.2\"><span class=\"toc-item-num\">2.4.2&nbsp;&nbsp;<\/span>Data Preprocessing for the dataset IV<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Changing-the-&quot;Date&quot;-column-from-object-type-to-type-datetime-and-then-changing-it-to-the-format-present-in-Confirmed-Cases\/-Deaths\/Recovered-Cases-datasets-for-&quot;Dates&quot;\" data-toc-modified-id=\"Changing-the-&quot;Date&quot;-column-from-object-type-to-type-datetime-and-then-changing-it-to-the-format-present-in-Confirmed-Cases\/-Deaths\/Recovered-Cases-datasets-for-&quot;Dates&quot;-2.4.2.1\"><span class=\"toc-item-num\">2.4.2.1&nbsp;&nbsp;<\/span>Changing the \"Date\" column from object type to type datetime and then changing it to the format present in Confirmed Cases\/ Deaths\/Recovered Cases datasets for \"Dates\"<\/a><\/span><\/li><li><span><a href=\"#Removing-the-not-required-columns-for-the-analysis-from-the-testing-data\" data-toc-modified-id=\"Removing-the-not-required-columns-for-the-analysis-from-the-testing-data-2.4.2.2\"><span class=\"toc-item-num\">2.4.2.2&nbsp;&nbsp;<\/span>Removing the not required columns for the analysis from the testing data<\/a><\/span><\/li><li><span><a href=\"#Selecting-the-sources\/-type-of-testing-data-for-the-countries-which-have-more-than-1-source-of-information\" data-toc-modified-id=\"Selecting-the-sources\/-type-of-testing-data-for-the-countries-which-have-more-than-1-source-of-information-2.4.2.3\"><span class=\"toc-item-num\">2.4.2.3&nbsp;&nbsp;<\/span>Selecting the sources\/ type of testing data for the countries which have more than 1 source of information<\/a><\/span><\/li><li><span><a href=\"#Changing-the-name-columns-for-better-understanding-and-convenience\" data-toc-modified-id=\"Changing-the-name-columns-for-better-understanding-and-convenience-2.4.2.4\"><span class=\"toc-item-num\">2.4.2.4&nbsp;&nbsp;<\/span>Changing the name columns for better understanding and convenience<\/a><\/span><\/li><li><span><a href=\"#Creating-separate-datasets-for-Cumulative-total,-Daily-change-in-cumulative-total,-7-day-smoothed-daily-change,-7-day-smoothed-daily-change-per-thousand\" data-toc-modified-id=\"Creating-separate-datasets-for-Cumulative-total,-Daily-change-in-cumulative-total,-7-day-smoothed-daily-change,-7-day-smoothed-daily-change-per-thousand-2.4.2.5\"><span class=\"toc-item-num\">2.4.2.5&nbsp;&nbsp;<\/span>Creating separate datasets for Cumulative total, Daily change in cumulative total, 7-day smoothed daily change, 7-day smoothed daily change per thousand<\/a><\/span><\/li><li><span><a href=\"#Unmelting-the-Testing-data-such-that-the-individual-dates-form-the-separate-columns\" data-toc-modified-id=\"Unmelting-the-Testing-data-such-that-the-individual-dates-form-the-separate-columns-2.4.2.6\"><span class=\"toc-item-num\">2.4.2.6&nbsp;&nbsp;<\/span>Unmelting the Testing data such that the individual dates form the separate columns<\/a><\/span><\/li><li><span><a href=\"#&quot;7-day-smoothed-daily-change&quot;-and-----&quot;7-day-smoothed-daily-change-per-thousand&quot;-start-from-08\/01\/20-instead-of-01\/01\/20-(because-week-starting-on-01\/01\/20-ends-on-07\/01\/20.-But-to-have-same-number-of-dates-in-all-testing-dataframes-(which-is-equal-to-dates-in-confirmed\/deaths-and-recovered-datasets)-we-insert-the-dates-from-01\/01\/20-to-07\/01\/20-in-these-dataframes.\" data-toc-modified-id=\"&quot;7-day-smoothed-daily-change&quot;-and-----&quot;7-day-smoothed-daily-change-per-thousand&quot;-start-from-08\/01\/20-instead-of-01\/01\/20-(because-week-starting-on-01\/01\/20-ends-on-07\/01\/20.-But-to-have-same-number-of-dates-in-all-testing-dataframes-(which-is-equal-to-dates-in-confirmed\/deaths-and-recovered-datasets)-we-insert-the-dates-from-01\/01\/20-to-07\/01\/20-in-these-dataframes.-2.4.2.7\"><span class=\"toc-item-num\">2.4.2.7&nbsp;&nbsp;<\/span>\"7-day smoothed daily change\" and     \"7-day smoothed daily change per thousand\" start from 08\/01\/20 instead of 01\/01\/20 (because week starting on 01\/01\/20 ends on 07\/01\/20. But to have same number of dates in all testing dataframes (which is equal to dates in confirmed\/deaths and recovered datasets) we insert the dates from 01\/01\/20 to 07\/01\/20 in these dataframes.<\/a><\/span><\/li><li><span><a href=\"#Preparing-the-testing-data-to-be-merged-with-the-&quot;Confirmed-Cases&quot;\/&quot;Deaths&quot;\/&quot;Recovered&quot;-Cases-datasets-by-aligning-the-&quot;Country\/Region&quot;-column-with-other-datasets\" data-toc-modified-id=\"Preparing-the-testing-data-to-be-merged-with-the-&quot;Confirmed-Cases&quot;\/&quot;Deaths&quot;\/&quot;Recovered&quot;-Cases-datasets-by-aligning-the-&quot;Country\/Region&quot;-column-with-other-datasets-2.4.2.8\"><span class=\"toc-item-num\">2.4.2.8&nbsp;&nbsp;<\/span>Preparing the testing data to be merged with the \"Confirmed Cases\"\/\"Deaths\"\/\"Recovered\" Cases datasets by aligning the \"Country\/Region\" column with other datasets<\/a><\/span><\/li><li><span><a href=\"#Filling-the-NANs-with-0-for-the-countries-which-were-earlier-not-in-testing-data-but-now-are-after-we-merged-the-&quot;Country\/Region&quot;-column-in-Confirmed-Cases-dataset-with-our-testing-dataframes.\" data-toc-modified-id=\"Filling-the-NANs-with-0-for-the-countries-which-were-earlier-not-in-testing-data-but-now-are-after-we-merged-the-&quot;Country\/Region&quot;-column-in-Confirmed-Cases-dataset-with-our-testing-dataframes.-2.4.2.9\"><span class=\"toc-item-num\">2.4.2.9&nbsp;&nbsp;<\/span>Filling the NANs with 0 for the countries which were earlier not in testing data but now are after we merged the \"Country\/Region\" column in Confirmed Cases dataset with our testing dataframes.<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><li><span><a href=\"#Shifting-all-data-to-one-starting-point\" data-toc-modified-id=\"Shifting-all-data-to-one-starting-point-2.5\"><span class=\"toc-item-num\">2.5&nbsp;&nbsp;<\/span>Shifting all data to one starting point<\/a><\/span><\/li><li><span><a href=\"#Converting-the-Dates-format-to-Days-to-bring-all-countries-data-to-start-from-1-starting-point-&quot;Day1:-1&quot;\" data-toc-modified-id=\"Converting-the-Dates-format-to-Days-to-bring-all-countries-data-to-start-from-1-starting-point-&quot;Day1:-1&quot;-2.6\"><span class=\"toc-item-num\">2.6&nbsp;&nbsp;<\/span>Converting the Dates format to Days to bring all countries data to start from 1 starting point \"Day1: 1\"<\/a><\/span><\/li><li><span><a href=\"#Interpolating-&quot;Cumulative-Testing-Count-&quot;-and-storing-the-values-in-a-new-column-named-&quot;smoothed_cumulative_testing_count&quot;\" data-toc-modified-id=\"Interpolating-&quot;Cumulative-Testing-Count-&quot;-and-storing-the-values-in-a-new-column-named-&quot;smoothed_cumulative_testing_count&quot;-2.7\"><span class=\"toc-item-num\">2.7&nbsp;&nbsp;<\/span>Interpolating \"Cumulative Testing Count \" and storing the values in a new column named \"smoothed_cumulative_testing_count\"<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Merging-the-4-datasets:\" data-toc-modified-id=\"Merging-the-4-datasets:-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Merging the 4 datasets:<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Cumulative-Confirmed,-Deaths,-Recovered,-and-Testing\" data-toc-modified-id=\"Cumulative-Confirmed,-Deaths,-Recovered,-and-Testing-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;<\/span>Cumulative Confirmed, Deaths, Recovered, and Testing<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Adding-more-information-to-Merged-data\" data-toc-modified-id=\"Adding-more-information-to-Merged-data-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Adding more information to Merged data<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Adding-Population-and-Population-density-information-for-each-country-:-https:\/\/www.worldometers.info\/world-population\/population-by-country\/\" data-toc-modified-id=\"Adding-Population-and-Population-density-information-for-each-country-:-https:\/\/www.worldometers.info\/world-population\/population-by-country\/-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;<\/span>Adding Population and Population density information for each country : <a href=\"https:\/\/www.worldometers.info\/world-population\/population-by-country\/\" target=\"_blank\">https:\/\/www.worldometers.info\/world-population\/population-by-country\/<\/a><\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Reading-population-data\" data-toc-modified-id=\"Reading-population-data-4.1.1\"><span class=\"toc-item-num\">4.1.1&nbsp;&nbsp;<\/span>Reading population data<\/a><\/span><\/li><li><span><a href=\"#Data-Cleaning\" data-toc-modified-id=\"Data-Cleaning-4.1.2\"><span class=\"toc-item-num\">4.1.2&nbsp;&nbsp;<\/span>Data Cleaning<\/a><\/span><\/li><li><span><a href=\"#Merging-the-cleaned-population-data-(df_pop)-with-the-MergedData:-Keeping-only-the-countries-which-are-in-MergedData-(Covid-Data)\" data-toc-modified-id=\"Merging-the-cleaned-population-data-(df_pop)-with-the-MergedData:-Keeping-only-the-countries-which-are-in-MergedData-(Covid-Data)-4.1.3\"><span class=\"toc-item-num\">4.1.3&nbsp;&nbsp;<\/span>Merging the cleaned population data (df_pop) with the MergedData: Keeping only the countries which are in MergedData (Covid Data)<\/a><\/span><\/li><li><span><a href=\"#Filling-missing-values\" data-toc-modified-id=\"Filling-missing-values-4.1.4\"><span class=\"toc-item-num\">4.1.4&nbsp;&nbsp;<\/span>Filling missing values<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Index-for-health-Capacity-in-clinics,-hospitals-and-community-care-centres\" data-toc-modified-id=\"Index-for-health-Capacity-in-clinics,-hospitals-and-community-care-centres-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;<\/span>Index for health Capacity in clinics, hospitals and community care centres<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Data-Cleaning\" data-toc-modified-id=\"Data-Cleaning-4.2.1\"><span class=\"toc-item-num\">4.2.1&nbsp;&nbsp;<\/span>Data Cleaning<\/a><\/span><\/li><li><span><a href=\"#Merging-the-cleaned-Health-capacity-Index-data-(df_hcs)-with-the-MergedData:-Keeping-only-the-countries-which-are-in-MergedData-(Covid-Data)\" data-toc-modified-id=\"Merging-the-cleaned-Health-capacity-Index-data-(df_hcs)-with-the-MergedData:-Keeping-only-the-countries-which-are-in-MergedData-(Covid-Data)-4.2.2\"><span class=\"toc-item-num\">4.2.2&nbsp;&nbsp;<\/span>Merging the cleaned Health capacity Index data (df_hcs) with the MergedData: Keeping only the countries which are in MergedData (Covid Data)<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Extracting\/Deriving-more-information-from-the-existing-variables\" data-toc-modified-id=\"Extracting\/Deriving-more-information-from-the-existing-variables-4.3\"><span class=\"toc-item-num\">4.3&nbsp;&nbsp;<\/span>Extracting\/Deriving more information from the existing variables<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Visualizations\" data-toc-modified-id=\"Visualizations-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Visualizations<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#1.-Trajectories-of-Cumulative-Confirmed-,-Recovered,-Deaths,-Testing-Counts-Vs.-Days-for-all-Countries\" data-toc-modified-id=\"1.-Trajectories-of-Cumulative-Confirmed-,-Recovered,-Deaths,-Testing-Counts-Vs.-Days-for-all-Countries-5.1\"><span class=\"toc-item-num\">5.1&nbsp;&nbsp;<\/span>1. Trajectories of Cumulative Confirmed , Recovered, Deaths, Testing Counts Vs. Days for all Countries<\/a><\/span><\/li><li><span><a href=\"#2.-Trajectories-of-Cumulative-Confirmed-and-Testing-Counts\" data-toc-modified-id=\"2.-Trajectories-of-Cumulative-Confirmed-and-Testing-Counts-5.2\"><span class=\"toc-item-num\">5.2&nbsp;&nbsp;<\/span>2. Trajectories of Cumulative Confirmed and Testing Counts<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#2.1-Trajectories-of-Cumulative-Confirmed-and-Testing-Count--plot-for-top-8-countries-with-highest-Health-Capacity-scores\" data-toc-modified-id=\"2.1-Trajectories-of-Cumulative-Confirmed-and-Testing-Count--plot-for-top-8-countries-with-highest-Health-Capacity-scores-5.2.1\"><span class=\"toc-item-num\">5.2.1&nbsp;&nbsp;<\/span>2.1 Trajectories of Cumulative Confirmed and Testing Count  plot for top 8 countries with highest Health Capacity scores<\/a><\/span><\/li><li><span><a href=\"#2.2-Trajectories-of-Cumulative-Confirmed-and-Testing-Count-plot-for-top-7-highly-populated-countries-and-Australia\" data-toc-modified-id=\"2.2-Trajectories-of-Cumulative-Confirmed-and-Testing-Count-plot-for-top-7-highly-populated-countries-and-Australia-5.2.2\"><span class=\"toc-item-num\">5.2.2&nbsp;&nbsp;<\/span>2.2 Trajectories of Cumulative Confirmed and Testing Count plot for top 7 highly populated countries and Australia<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#3.-Trajectories-of-Recovery-Rate\" data-toc-modified-id=\"3.-Trajectories-of-Recovery-Rate-5.3\"><span class=\"toc-item-num\">5.3&nbsp;&nbsp;<\/span>3. Trajectories of Recovery Rate<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#3.1-Trajectories-of-Recovery-Rate-for-the-individual-countries-since-first-10-confirmed-cases\" data-toc-modified-id=\"3.1-Trajectories-of-Recovery-Rate-for-the-individual-countries-since-first-10-confirmed-cases-5.3.1\"><span class=\"toc-item-num\">5.3.1&nbsp;&nbsp;<\/span>3.1 Trajectories of Recovery Rate for the individual countries since first 10 confirmed cases<\/a><\/span><\/li><li><span><a href=\"#3.2-Recovery-Rate-trajectories-for-top-10-countries-with-highest-health-capacity-score\" data-toc-modified-id=\"3.2-Recovery-Rate-trajectories-for-top-10-countries-with-highest-health-capacity-score-5.3.2\"><span class=\"toc-item-num\">5.3.2&nbsp;&nbsp;<\/span>3.2 Recovery Rate trajectories for top 10 countries with highest health capacity score<\/a><\/span><\/li><li><span><a href=\"#3.3.-Recovery-Rate-trajectories-for-top-7-highly-populated-countries-and-Australia\" data-toc-modified-id=\"3.3.-Recovery-Rate-trajectories-for-top-7-highly-populated-countries-and-Australia-5.3.3\"><span class=\"toc-item-num\">5.3.3&nbsp;&nbsp;<\/span>3.3. Recovery Rate trajectories for top 7 highly populated countries and Australia<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#4.-Trajectories-of-Fatality-Rate\" data-toc-modified-id=\"4.-Trajectories-of-Fatality-Rate-5.4\"><span class=\"toc-item-num\">5.4&nbsp;&nbsp;<\/span>4. Trajectories of Fatality Rate<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#4.1-Fatality-Rate-trajectories-for-top-10-countries-with-highest-health-capacity-scores\" data-toc-modified-id=\"4.1-Fatality-Rate-trajectories-for-top-10-countries-with-highest-health-capacity-scores-5.4.1\"><span class=\"toc-item-num\">5.4.1&nbsp;&nbsp;<\/span>4.1 Fatality Rate trajectories for top 10 countries with highest health capacity scores<\/a><\/span><\/li><li><span><a href=\"#4.2-Fatality-Rate-trajectories-for-top-7-highly-populated-countries-and-Australia\" data-toc-modified-id=\"4.2-Fatality-Rate-trajectories-for-top-7-highly-populated-countries-and-Australia-5.4.2\"><span class=\"toc-item-num\">5.4.2&nbsp;&nbsp;<\/span>4.2 Fatality Rate trajectories for top 7 highly populated countries and Australia<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#5.--Trajectories-of-7-day-rolling-average-of-Count-of-Confirmed-Cases-(per-million)-and-7-day-average-of-Testing-Count-(per-thousand)\" data-toc-modified-id=\"5.--Trajectories-of-7-day-rolling-average-of-Count-of-Confirmed-Cases-(per-million)-and-7-day-average-of-Testing-Count-(per-thousand)-5.5\"><span class=\"toc-item-num\">5.5&nbsp;&nbsp;<\/span>5.  Trajectories of 7-day rolling average of Count of Confirmed Cases (per million) and 7-day average of Testing Count (per thousand)<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#5.1--Trajectories-of-7-day-rolling-average-of-Count-of-Confirmed-Cases-(per-million)-and-7-day-average-of-Testing-Count-(per-thousand)-for-all-countries-individually\" data-toc-modified-id=\"5.1--Trajectories-of-7-day-rolling-average-of-Count-of-Confirmed-Cases-(per-million)-and-7-day-average-of-Testing-Count-(per-thousand)-for-all-countries-individually-5.5.1\"><span class=\"toc-item-num\">5.5.1&nbsp;&nbsp;<\/span>5.1  Trajectories of 7-day rolling average of Count of Confirmed Cases (per million) and 7-day average of Testing Count (per thousand) for all countries individually<\/a><\/span><\/li><li><span><a href=\"#5.2-Trajectories-of-7-day-rolling-average-of-Count-of-Confirmed-Cases-(per-million)-and-7-day-average-of-Testing-Count-(per-thousand)-for-top-8-countries-with-highest-Health-Capacity-Scores\" data-toc-modified-id=\"5.2-Trajectories-of-7-day-rolling-average-of-Count-of-Confirmed-Cases-(per-million)-and-7-day-average-of-Testing-Count-(per-thousand)-for-top-8-countries-with-highest-Health-Capacity-Scores-5.5.2\"><span class=\"toc-item-num\">5.5.2&nbsp;&nbsp;<\/span>5.2 Trajectories of 7-day rolling average of Count of Confirmed Cases (per million) and 7-day average of Testing Count (per thousand) for top 8 countries with highest Health Capacity Scores<\/a><\/span><\/li><li><span><a href=\"#5.3-Trajectories-of-7-day-rolling-average-of-Count-of-Confirmed-Cases-(per-million)-and-7-day-rolling-average-of-Testing-Count-(per-thousand)--for-top-7-highly-populated-countries-and-Australia\" data-toc-modified-id=\"5.3-Trajectories-of-7-day-rolling-average-of-Count-of-Confirmed-Cases-(per-million)-and-7-day-rolling-average-of-Testing-Count-(per-thousand)--for-top-7-highly-populated-countries-and-Australia-5.5.3\"><span class=\"toc-item-num\">5.5.3&nbsp;&nbsp;<\/span>5.3 Trajectories of 7-day rolling average of Count of Confirmed Cases (per million) and 7-day rolling average of Testing Count (per thousand)  for top 7 highly populated countries and Australia<\/a><\/span><\/li><li><span><a href=\"#5.4-Gridplot-for-comparing-the-trajectories-of-some-Countries-which-have-flattened-the-curve\" data-toc-modified-id=\"5.4-Gridplot-for-comparing-the-trajectories-of-some-Countries-which-have-flattened-the-curve-5.5.4\"><span class=\"toc-item-num\">5.5.4&nbsp;&nbsp;<\/span>5.4 Gridplot for comparing the trajectories of some Countries which have flattened the curve<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#6.-Trajectories-of-Daily-Confirmed-Cases-for-individual-countries\" data-toc-modified-id=\"6.-Trajectories-of-Daily-Confirmed-Cases-for-individual-countries-5.6\"><span class=\"toc-item-num\">5.6&nbsp;&nbsp;<\/span>6. Trajectories of Daily Confirmed Cases for individual countries<\/a><\/span><\/li><li><span><a href=\"#7.-Visualizations-based-on-the-latest-data-of-Cumulative-Confirmed-&amp;-Cumulative-Testing-and-Population-&amp;-Populaion-Density-of-countries\" data-toc-modified-id=\"7.-Visualizations-based-on-the-latest-data-of-Cumulative-Confirmed-&amp;-Cumulative-Testing-and-Population-&amp;-Populaion-Density-of-countries-5.7\"><span class=\"toc-item-num\">5.7&nbsp;&nbsp;<\/span>7. Visualizations based on the latest data of Cumulative Confirmed &amp; Cumulative Testing and Population &amp; Populaion Density of countries<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#7.1-Cumulative-Confirmed-(per-million)-Vs.-Positive-Tests-Rate-for-the-top-10-countries-with-the-highest-health-capacity-scores\" data-toc-modified-id=\"7.1-Cumulative-Confirmed-(per-million)-Vs.-Positive-Tests-Rate-for-the-top-10-countries-with-the-highest-health-capacity-scores-5.7.1\"><span class=\"toc-item-num\">5.7.1&nbsp;&nbsp;<\/span>7.1 Cumulative Confirmed (per million) Vs. Positive Tests Rate for the top 10 countries with the highest health capacity scores<\/a><\/span><\/li><li><span><a href=\"#7.2-Cumulative-Confirmed-Vs.-Population-graph-while-grouping-countries-based-on-Positive-Tests-Rate-for-all-countries\" data-toc-modified-id=\"7.2-Cumulative-Confirmed-Vs.-Population-graph-while-grouping-countries-based-on-Positive-Tests-Rate-for-all-countries-5.7.2\"><span class=\"toc-item-num\">5.7.2&nbsp;&nbsp;<\/span>7.2 Cumulative Confirmed Vs. Population graph while grouping countries based on Positive Tests Rate for all countries<\/a><\/span><\/li><li><span><a href=\"#7.3-Cumulative-Confirmed-Vs.-Population-graph-while-grouping-countries-based-on-Cumulative-Testing-to-Cumulative-Confirmed-ratio-for-all-countries\" data-toc-modified-id=\"7.3-Cumulative-Confirmed-Vs.-Population-graph-while-grouping-countries-based-on-Cumulative-Testing-to-Cumulative-Confirmed-ratio-for-all-countries-5.7.3\"><span class=\"toc-item-num\">5.7.3&nbsp;&nbsp;<\/span>7.3 Cumulative Confirmed Vs. Population graph while grouping countries based on Cumulative Testing to Cumulative Confirmed ratio for all countries<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/div>","46b90b6c":"##### 5.3 Trajectories of 7-day rolling average of Count of Confirmed Cases (per million) and 7-day rolling average of Testing Count (per thousand)  for top 7 highly populated countries and Australia","0b82ce30":"#### Extracting\/Deriving more information from the existing variables","8af3433a":"###### Filling the NANs with 0 for the countries which were earlier not in testing data but now are after we merged the \"Country\/Region\" column in Confirmed Cases dataset with our testing dataframes.","0d2f040d":"##### 4.2 Fatality Rate trajectories for top 7 highly populated countries and Australia","376010a2":"###### Unmelting the Testing data such that the individual dates form the separate columns","ad4227f4":"##### 3.2 Recovery Rate trajectories for top 10 countries with highest health capacity score","840b5b73":"##### Data Preprocessing ","cf93901a":"##### 5.2 Trajectories of 7-day rolling average of Count of Confirmed Cases (per million) and 7-day average of Testing Count (per thousand) for top 8 countries with highest Health Capacity Scores","ba1ac5ca":"##### Reading data from the source and dropping not required columns","c8eeceb3":"#### 2. Trajectories of Cumulative Confirmed and Testing Counts \n\n##### 2.1 Trajectories of Cumulative Confirmed and Testing Count  plot for top 8 countries with highest Health Capacity scores","50b5099d":"##### Data Preprocessing for the dataset I","4e552c71":"##### Merging the cleaned Health capacity Index data (df_hcs) with the MergedData: Keeping only the countries which are in MergedData (Covid Data)","28c91922":"#### Index for health Capacity in clinics, hospitals and community care centres\n<b> The indicator score is the weighted sum of the following sub-indicator scores: <\/b>\n1. Available human resources for the broader healthcare system (50%)\n2. Facilities capacity (50%)\n\n<i> Source: <\/i> https:\/\/www.ghsindex.org\/","c18129fe":"##### Data Cleaning\n<b>To match country names  in population data with the country names in our created MergedData above so that we can join them properly<\/b>","6c7a31ae":"##### Reading population data","a08cc575":"#### Adding Population and Population density information for each country : https:\/\/www.worldometers.info\/world-population\/population-by-country\/","80dcd0e0":"### Adding more information to Merged data","5de899e2":"#### Importing Dataset for Testing of COVID-19 ","94a8afb6":"##### 5.4 Gridplot for comparing the trajectories of some Countries which have flattened the curve","7c2d9856":"##### Shifting all data to one starting point & converting the Dates format to Days\nConverting the Dates format to Days to bring all countries data to start from 1 starting point \"Day1: 1\"\nDay1: 1,  is the day on which the confirmed cases for the country got greater than or equal to 10 ","6d0800f5":"###### Selecting the sources\/ type of testing data for the countries which have more than 1 source of information\n\nTests may refer to the number of tests performed, samples tested or the number of people tested \u2013 depending on which is reported by the particular country. For some countries the source have tests performed and people tested counts mixed too and thereby provide figures under the name \n\"units unclear\". Also some of the countries have more than 1 source of reporting testing data and it is seen that different sources can provide data under different categories. For example, for India <i>Source 1<\/i>provides figures for people tested and <i>Source 2<\/i> provides data for samples tested. \n\nHence, comparisons of testing data across countries are affected by differences in the way the data are reported. For our analysis, the source for the countries for which there is more than one source is chosen based on better consistency of data reporting and\/or the type of comparison we are making during the analysis.\n\nAlso,since not all countries report testing data on a daily basis. So to generate daily series it is assumed that testing changed equally on a daily basis over any periods in which no data was reported. This produces a complete series of daily figures, which is then averaged over a rolling 7-day window.","6cab36b0":"#### 3.  Trajectories of Recovery Rate\n##### 3.1 Trajectories of Recovery Rate for the individual countries since first 10 confirmed cases","f74adb59":"##### Reading data from the source and removing not required columns","f24bfc4c":"<b> Preparing Data <\/b>","cc82ecc0":"##### Shifting all data to one starting point & converting the Dates format to Days\nConverting the Dates format to Days to bring all countries data to start from 1 starting point \"Day1: 1\"\nDay1: 1,  is the day on which the confirmed cases for the country got greater than or equal to 5 ","a84b1cdf":"####  Confirmed Cases of COVID-19 ","08e049db":"<b> Creating Population intervals, Testing Ratio intervals, and health Capacity Score intervals and associating colors with them and putting this information in new columns to be used in our visualization.<\/b>\n\n<b> Note! <\/b> <i> We use only \"TestingRateInterval\" and \"TestingColor\" columns rest of the new created columns namely  \"PopulationInterval\", \"PopulationColor\", \"ScoreInterval\", and \"ScoreColor\" columns are just for in case needed <\/i>","9337a01f":"The countries have \"Testing\" data available from different dates but on pivoting dates start from 01\/01\/20 or all countries in the testing data, because one of the countries \"Mexico\" has the testing data available from this date (the earliest date amongst all countries). So as a result of pivoting, the date columns start from this date. And we will have null values for every other country from 01\/01\/20 till the date on which the country had testing data reported for the first time. For example for \"Argentina\" the testing data is available from 04\/08\/20, so we see \"NaN\" values from 01\/01\/20 to 04\/07\/20. Same is true for other countries. ","621643bf":"#### Shifting all data to one starting point\n#### Converting the Dates format to Days to bring all countries data to start from 1 starting point \"Day1: 1\"\nDay1: 1,  is the day on which the confirmed cases for the country got greater than or equal to 5 ","0b0f8f41":"<b><i> Preparing Data <\/i><\/b>","4fde674d":"##### Reading data from the source","57ee15be":"###  Datasets to be studied\n I) Confirmed Cases Dataset of COVID-19\n \n II) Death Cases Dataset of COVID-19\n \n III) Recovered Cases Dataset of COVID-19\n \n IV)Testing Dataset of COVID-19\n \n V) INFORM Risk Index dataset","137f0461":"#### 4. Trajectories of Fatality Rate  \n##### 4.1 Fatality Rate trajectories for top 10 countries with highest health capacity scores","b1b3e438":"###### \"7-day smoothed daily change\" and \t\"7-day smoothed daily change per thousand\" start from 08\/01\/20 instead of 01\/01\/20 (because week starting on 01\/01\/20 ends on 07\/01\/20. But to have same number of dates in all testing dataframes (which is equal to dates in confirmed\/deaths and recovered datasets) we insert the dates from 01\/01\/20 to 07\/01\/20 in these dataframes.","b3e1d4ae":"### Visualizations","47ed47f4":"#### 6. Trajectories of Daily Confirmed Cases for individual countries","a931daf9":"#### 7. Visualizations based on the latest data of Cumulative Confirmed & Cumulative Testing and Population & Populaion Density of countries","ddfb807d":"#### Deaths due to COVID-19 ","fd05d96d":"<b> Replacing the NaN values with appropriate values <\/b><br>\n<i> Null values in testing data are for countries with no testing data available, so replacing null values in \"smoothed_cumullative_testing_count\",\"SmoothedCumTesting_per_thousand\", \"SmoothedCumTesting_per_CumConfirmed\" with zeros.<\/i>","2b71a262":"###### Removing the not required columns for the analysis from the testing data","f2500871":"###### Creating separate datasets for Cumulative total, Daily change in cumulative total, 7-day smoothed daily change, 7-day smoothed daily change per thousand","2b6979f4":"<b><i> Filtering latest data for all countries <\/i><\/b>","ee80fcc5":"##### Reading data from the Source and dropping not required columns","bd499657":"###### Preparing the testing data to be merged with the \"Confirmed Cases\"\/\"Deaths\"\/\"Recovered\" Cases datasets by aligning the \"Country\/Region\" column with other datasets ","a89d5e2c":"##### Data Prepocessing ","9bed4d8c":"For our visualization we filter our data for latest values of \"Cumulative Testing\" and \"Cumulative Confirmed\"  counts from the time series data for all countries. \n\nWe sort our data on \"Cumulative Testing\" counts and \"Cumulative Confirmed\" counts and filter the first row. This gives us the recent data for all the countries. The countries which have testing data will be sorted on both \"Cumulative Testing Counts\" and \"Cumulative Confirmed Counts\" while the countries which have no testing data (all NaNs in \"Cumulative Testing Column\") will be sorted on \"Cumulative Confirmed Counts\"\n\n<i> (If we simply want the latest day data i.e. based only on latest values of \"Cumulative Confirmed\" counts, we only sort on the basis of \"Cumulative Confirmed\" and not consider \"Cumulative Testing\", because when we sort based on \"Cumulative Testing\" and (then on) \"Cumulative Confirmed\" counts, in that case the countries for which testing data is available but not updated yet on present day (for which there can be higher value of \"Cumulaive Confirmed\" counts) will give the previous row in which \"Cumulative Testing\" and \"Cumulative Confirmed\" counts both were available. <\/i> <\/b>\n","211be4c1":"##### 7.1 Cumulative Confirmed (per million) Vs. Positive Tests Rate for the top 10 countries with the highest health capacity scores ","f04649cf":"##### Data Cleaning\n<b>To match country names  in health capacity index data with the country names in our created MergedData above so that we can join them properly<\/b>","25fddd02":"##### Filling missing values \nThere is one country \"Kosovo\" in COVID-19 data which is not in population data and hence doesn't have population, pop_density and Land_Area_Kmsq information information. Using other source to get the values for \"Kosova\"","a67d6ad8":"### Merging the 4 datasets: \n#### Cumulative Confirmed, Deaths, Recovered, and Testing"}}