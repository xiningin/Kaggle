{"cell_type":{"74489aa1":"code","dfff4b1c":"code","b0bd9585":"code","ed72eb5a":"code","d9b23c66":"code","c61ba85c":"code","04607376":"code","39bd1b6f":"code","24cd0449":"code","3513127f":"code","ebef5cca":"code","3ee4be77":"code","7578e64d":"code","4beca550":"code","58da9c29":"code","185ba36e":"code","09c80241":"code","8ee19ae1":"code","2e5f261b":"code","fafc9a1d":"code","84a30ce3":"code","3c8bc95b":"code","2d4371cc":"code","963ff44d":"markdown","3587f608":"markdown","4153db27":"markdown","1fd5c1ae":"markdown","2781d804":"markdown","85816944":"markdown"},"source":{"74489aa1":"import os\nimport shutil\nimport tensorflow as tf\nfrom tensorflow.keras.applications.densenet import preprocess_input\nimport matplotlib.pyplot as plt \nimport tensorflow\nfrom keras.metrics import Recall,Precision\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import InputLayer, BatchNormalization, Dropout, Flatten, Dense, Activation, MaxPool2D, Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array","dfff4b1c":"\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n","b0bd9585":"train_dataset = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest_dataset = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","ed72eb5a":"train_dataset.head()","d9b23c66":"train_dataset.shape","c61ba85c":"from keras.utils import to_categorical\n\ntrain_labels = np.asarray(train_dataset['label'])\ntrain_labels = to_categorical(train_labels)\n\ntrain_data = train_dataset.drop('label', axis=1)\ntrain_data = np.asarray(train_data).reshape(train_data.shape[0], 28, 28, 1)","04607376":"\nfrom sklearn.model_selection import train_test_split\n\ntrain_images, validation_images, train_labels, validation_labels = train_test_split(train_data, train_labels, test_size=0.3, random_state=40)","39bd1b6f":"\nfrom keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(\n    rescale=1.\/255, \n    rotation_range=30, \n    width_shift_range=0.2, \n    height_shift_range=0.2, \n    shear_range=0.2, \n    zoom_range=0.2, \n    horizontal_flip=False, \n    fill_mode='constant')\n\nvalidation_datagen = ImageDataGenerator(rescale=1.\/255)","24cd0449":"train_generator = train_datagen.flow(train_images, train_labels, batch_size=256)\nvalidation_generator = validation_datagen.flow(validation_images, validation_labels, batch_size=128)","3513127f":"model=Sequential()\n\n# first CNN layer of a kernel size 100\nmodel.add(Conv2D(100,(3,3),input_shape=(28,28,1)))\n#Relu layer\nmodel.add(Activation('relu'))\n#MaxPooling layer\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n# second convolution layer of a kernel size 50\n\nmodel.add(Conv2D(50,(3,3)))\n#Relu layer\nmodel.add(Activation('relu'))\n#MaxPooling layer\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n#Flatten layer \nmodel.add(Flatten())\n\n# Dropout \nmodel.add(Dropout(0.3))\n\n#FC layer of 64 neurons\nmodel.add(Dense(64,activation='relu'))\n\n#Softmax layer for two categories\nmodel.add(Dense(10,activation='softmax'))\n","ebef5cca":"# Summary\n\nmodel.summary()","3ee4be77":"from tensorflow.keras.utils import plot_model\nfrom IPython.display import SVG, Image\nplot_model(model, to_file='model.png', show_shapes=True, show_layer_names=True)\nImage('model.png',width=400, height=200)","7578e64d":"# Model Compile \n\nOPT    = tensorflow.keras.optimizers.Adam(lr=0.001)\n\nmodel.compile(loss='categorical_crossentropy',\n              metrics=['accuracy',Precision(),Recall()],\n              optimizer=OPT)","4beca550":"# Defining Callbacks\n\nfilepath = '.\/best_weights.hdf5'\n\nearlystopping = EarlyStopping(monitor = 'val_accuracy', \n                              mode = 'max' , \n                              patience = 25,\n                              verbose = 1)\n\ncheckpoint    = ModelCheckpoint(filepath, \n                                monitor = 'val_accuracy', \n                                mode='max', \n                                save_best_only=True, \n                                verbose = 1)\n\n\ncallback_list = [earlystopping, checkpoint]","58da9c29":"model_history=model.fit(\n                        train_generator, \n                        steps_per_epoch=100, \n                        epochs=50, \n                        validation_data=validation_generator, \n                        validation_steps=50, \n                        callbacks = callback_list,\n                        verbose=1)","185ba36e":"import keras\nmodel.save('.\/best_weights.hdf5')\n#model = keras.models.load_model('..\/input\/densenet\/best_weights.hdf5')","09c80241":"plt.plot(model_history.history['accuracy'])\nplt.plot(model_history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='lower right')\nplt.show()\n\nplt.plot(model_history.history['loss'])\nplt.plot(model_history.history['val_loss'])\nplt.title('train set loss')\n\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper right')\nplt.show()\n\nplt.plot(model_history.history['precision'])\nplt.plot(model_history.history['val_precision'])\nplt.title(' precision')\nplt.ylabel('precision')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper right')\nplt.show()\n\n\nplt.plot(model_history.history['recall'])\nplt.plot(model_history.history['val_recall'])\nplt.title(' recall')\nplt.ylabel('recall')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper right')\nplt.show()\n","8ee19ae1":"loss, acc , precision,recall=model.evaluate(validation_generator)\nprint('validation Accuracy: %.3f' % acc)\nprint('validation Precision: %.3f' % precision)\nprint('validation Recall: %.3f' % recall)\nprint('validation loss: %.3f' % loss)\n","2e5f261b":"test_images = np.asarray(test_dataset)\ntest_images = test_images.reshape(test_images.shape[0], 28, 28, 1)\ntest_images = test_images.astype('float32')\/255","fafc9a1d":"predictions = model.predict(test_images, batch_size=128)\nimage_id = range(1, predictions.shape[0] + 1)","84a30ce3":"pred = [np.argmax(i) for i in predictions]","3c8bc95b":"sample = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nsample.head()","2d4371cc":"submission = pd.DataFrame({'ImageId': image_id, 'Label': pred})\nsubmission.to_csv('digit_recognizer_submission', index=False)\nprint('file saved!')","963ff44d":"# data","3587f608":"# **evaluate**","4153db27":"# model","1fd5c1ae":"# output","2781d804":"# plot","85816944":"# test"}}