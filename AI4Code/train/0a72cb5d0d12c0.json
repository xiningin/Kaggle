{"cell_type":{"59166d6e":"code","1a7fe645":"code","937d2673":"code","6c1037b2":"code","b13370ef":"code","cb5ca822":"code","0edd28f5":"code","8b0974ec":"code","f488d9c5":"code","e122a36c":"code","934d772b":"code","bcb4c08b":"code","7051309a":"code","52405d0a":"code","e5f28058":"code","6d00ccc7":"code","cc2fa5c8":"code","f0b324f7":"code","cb2c8c69":"code","339a0459":"code","13c4be97":"code","c437854b":"code","e2d32e92":"code","a6223d21":"code","c32b0f53":"code","68a7bea2":"code","8953a374":"code","7bdfbb28":"code","77c2de3a":"code","b0175573":"code","37c31d7d":"code","604f69f4":"code","b6ec58ae":"code","35ce4a80":"code","4987cdc9":"code","40896254":"code","c9ebde20":"code","aaa902d0":"code","89091e8f":"code","045389f1":"code","fcce5f94":"code","598a0d22":"code","90a2d34d":"code","d946b920":"code","5d30e8ae":"code","1284cb7b":"code","db3f0ba1":"code","17a00116":"code","f7a2b5e7":"code","1657e4b5":"code","926ce18a":"code","c685415e":"code","e91eab2e":"code","7afcde35":"code","7ade3b89":"code","766030b7":"code","3198cdcc":"code","f03f574d":"code","fe462ab7":"code","9653a762":"code","865c7269":"code","88cf2f4f":"code","b7523f01":"code","95caeed9":"code","4bbbbb40":"code","135b9e56":"code","ac22b4d0":"code","aa34a7c3":"code","ead6b46c":"code","86bf7b16":"code","7a8e07e8":"markdown","5c4346f5":"markdown","00118fae":"markdown","8568aadb":"markdown","d558ff36":"markdown","9ba8f278":"markdown","eb6dae64":"markdown","fd5c7c48":"markdown","62aaaf07":"markdown","421af368":"markdown","2f53b689":"markdown","406cf335":"markdown","93007975":"markdown","f592769b":"markdown","524c4d84":"markdown","bd7fb541":"markdown","eccb452e":"markdown","df0ad574":"markdown"},"source":{"59166d6e":"import gc\nimport sys\nimport optuna\nimport datetime\nimport warnings\nimport matplotlib\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport lightgbm as lgb\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom pandas.api.types import is_datetime64_any_dtype as is_datetime\nfrom pandas.api.types import is_categorical_dtype","1a7fe645":"train = pd.read_csv('..\/input\/ashrae-energy-prediction\/train.csv')\n\nprint(train.shape)\ntrain.head()","937d2673":"test = pd.read_csv('..\/input\/ashrae-energy-prediction\/test.csv')\n\nprint(test.shape)\ntest.head()","6c1037b2":"usecols = {'site_id', 'timestamp', 'air_temperature', 'dew_temperature'}","b13370ef":"weather_train = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_train.csv', usecols=usecols)\n\nprint(weather_train.shape)\nweather_train.head()","cb5ca822":"weather_test = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_test.csv', usecols=usecols)\n\nprint(weather_test.shape)\nweather_test.head()","0edd28f5":"usecols = {'site_id', 'building_id', 'primary_use', 'square_feet', 'year_built'}","8b0974ec":"building = pd.read_csv('..\/input\/ashrae-energy-prediction\/building_metadata.csv', usecols=usecols)\n\nprint(building.shape)\nbuilding.head()","f488d9c5":"'''\nlag_cols = ['air_temperature', 'dew_temperature']\n\nfor i in lag_cols:\n    weather_train['DIFF_' + i] = weather_train.groupby(by = ['site_id'])[i].shift(-1)\n    weather_train['PREVIOUS_DIFF_' + i] = np.abs(weather_train[i] - weather_train['DIFF_' + i])\n    weather_train = weather_train.drop(['DIFF_' + i], axis=1)\n    \nweather_train.head()\n'''","e122a36c":"'''\nlag_cols = ['air_temperature', 'dew_temperature']\n\nfor i in lag_cols:\n    weather_test['DIFF_' + i] = weather_test.groupby(by = ['site_id'])[i].shift(-1)\n    weather_test['PREVIOUS_DIFF_' + i] = np.abs(weather_test[i] - weather_test['DIFF_' + i])\n    weather_test = weather_test.drop(['DIFF_' + i], axis=1)\n    \nweather_test.head()\n'''","934d772b":"def reduce_mem_usage(df, use_float16=False):\n    \n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        if is_datetime(df[col]) or is_categorical_dtype(df[col]):\n            continue\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if use_float16 and c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","bcb4c08b":"# train = reduce_mem_usage(train)\n# test = reduce_mem_usage(test)\n\nweather_train = reduce_mem_usage(weather_train)\nweather_test = reduce_mem_usage(weather_test)\n\nbuilding = reduce_mem_usage(building)","7051309a":"train = train.merge(building, on='building_id', how='left')\ntest = test.merge(building, on='building_id', how='left')\n\nprint(train.shape)\ntrain.head()","52405d0a":"del building\ngc.collect()","e5f28058":"train = train.merge(weather_train, on=['site_id', 'timestamp'], how='left')\ntest = test.merge(weather_test, on=['site_id', 'timestamp'], how='left')\n\nprint(train.shape)\ntrain.head()","6d00ccc7":"del weather_train, weather_test\ngc.collect()","cc2fa5c8":"# train = reduce_mem_usage(train)\n# test = reduce_mem_usage(test)","f0b324f7":"train = train.reset_index(drop=True)\ntest = test.reset_index(drop=True)","cb2c8c69":"print(sys.getsizeof(train))\nprint(sys.getsizeof(test))","339a0459":"train.memory_usage()","13c4be97":"test.memory_usage()","c437854b":"print(train.shape)\ntrain.head()","e2d32e92":"train.info()","a6223d21":"train.nunique()","c32b0f53":"train.isnull().sum()","68a7bea2":"train.corr()","8953a374":"sns.set()","7bdfbb28":"train['timestamp'] = pd.to_datetime(train['timestamp'])\ntest['timestamp'] = pd.to_datetime(test['timestamp'])","77c2de3a":"fig, axes = plt.subplots(figsize=(8, 4))\ntrain[['timestamp', 'meter_reading']].set_index('timestamp').resample('H').mean()['meter_reading'].plot(ax=axes, label='hour', alpha=0.8).set_ylabel('Meter reading', fontsize=14)\ntrain[['timestamp', 'meter_reading']].set_index('timestamp').resample('D').mean()['meter_reading'].plot(ax=axes, label='day', alpha=0.8).set_ylabel('Meter reading', fontsize=14)\naxes.legend()","b0175573":"fig, axes = plt.subplots(figsize=(8, 4))\ntrain[['timestamp', 'meter_reading']].set_index('timestamp').resample('W').mean()['meter_reading'].plot(ax=axes, label='week', alpha=1).set_ylabel('Meter reading', fontsize=14)\ntrain[['timestamp', 'meter_reading']].set_index('timestamp').resample('M').mean()['meter_reading'].plot(ax=axes, label='month', alpha=1).set_ylabel('Meter reading', fontsize=14)\naxes.legend()","37c31d7d":"def to_season(month_num):\n    season = 'winter'\n    if 3 <= month_num <= 5:\n        season = 'spring'\n    elif 6 <= month_num <= 8:\n        season = 'summer'\n    elif 9 <= month_num <= 11:\n        season = 'autumn'\n    return season","604f69f4":"train['month'] = train['timestamp'].dt.month\ntrain['season'] = train['month'].apply(lambda x: to_season(x))","b6ec58ae":"train = train.drop(train[(train['meter'] == 0) & (train['meter_reading'] == 0)].index, axis=0)","35ce4a80":"train = train.drop(train[(train['meter'] == 1) & (train['meter_reading'] == 0) & (train['season'] == 'spring')].index, axis=0)\ntrain = train.drop(train[(train['meter'] == 1) & (train['meter_reading'] == 0) & (train['season'] == 'summer')].index, axis=0)\ntrain = train.drop(train[(train['meter'] == 1) & (train['meter_reading'] == 0) & (train['season'] == 'autumn')].index, axis=0)","4987cdc9":"train = train.drop(train[(train['meter'] == 2) & (train['meter_reading'] == 0) & (train['season'] == 'spring')].index, axis=0)\ntrain = train.drop(train[(train['meter'] == 2) & (train['meter_reading'] == 0) & (train['season'] == 'autumn')].index, axis=0)\ntrain = train.drop(train[(train['meter'] == 2) & (train['meter_reading'] == 0) & (train['season'] == 'winter')].index, axis=0)","40896254":"train = train.drop(train[(train['meter'] == 3) & (train['meter_reading'] == 0) & (train['season'] == 'spring')].index, axis=0)\ntrain = train.drop(train[(train['meter'] == 3) & (train['meter_reading'] == 0) & (train['season'] == 'autumn')].index, axis=0)\ntrain = train.drop(train[(train['meter'] == 3) & (train['meter_reading'] == 0) & (train['season'] == 'winter')].index, axis=0)","c9ebde20":"train = train.drop('season', axis=1).reset_index(drop=True)\ngc.collect()\n\ntrain = reduce_mem_usage(train)","aaa902d0":"print(train.shape)\ntrain.head()","89091e8f":"train['hour'] = train['timestamp'].dt.hour\n#train['day'] = train['timestamp'].dt.day\n#train['weekend'] = train['timestamp'].dt.weekday","045389f1":"train = train.drop(['timestamp', 'site_id'], axis=1)\ngc.collect()\n\ntrain = reduce_mem_usage(train)","fcce5f94":"df_group = train.groupby('building_id')['meter_reading']\n\nbuilding_mean = df_group.mean()\nbuilding_median = df_group.median()\nbuilding_std = df_group.std()\n\nbuilding_min = df_group.min()\nbuilding_max = df_group.max()","598a0d22":"train['building_mean'] = train['building_id'].map(building_mean)\ntrain['building_median'] = train['building_id'].map(building_median)\ntrain['building_std'] = train['building_id'].map(building_std)\n\ntrain['building_min'] = train['building_id'].map(building_min)\ntrain['building_max'] = train['building_id'].map(building_max)","90a2d34d":"del df_group\ngc.collect()\n\ntrain = reduce_mem_usage(train)","d946b920":"print(train.shape)\ntrain.head()","5d30e8ae":"# drop_col = ['precip_depth_1_hr', 'sea_level_pressure', 'wind_direction', 'wind_speed', 'floor_count']      ","1284cb7b":"# train = train.drop(drop_col, axis = 1)\n# gc.collect()","db3f0ba1":"train['square_feet'] = np.log(train['square_feet'])\ntest['square_feet'] = np.log(test['square_feet'])","17a00116":"le = LabelEncoder()\n\ntrain['primary_use'] = le.fit_transform(train['primary_use'])\ntest['primary_use'] = le.fit_transform(test['primary_use'])","f7a2b5e7":"target = np.log1p(train['meter_reading'])\ntrain = train.drop(['meter_reading'], axis=1)","1657e4b5":"del le\ngc.collect()","926ce18a":"train = reduce_mem_usage(train)\ntest = reduce_mem_usage(test)","c685415e":"train = train.reset_index(drop=True)\ntest = test.reset_index(drop=True)","e91eab2e":"print(sys.getsizeof(train))\nprint(sys.getsizeof(test))","7afcde35":"print(train.shape)\ntrain.head()","7ade3b89":"'''\nX_tr, X_val, y_tr, y_val = train_test_split(train, target, test_size=0.2, random_state=666)\n\ndef create_model(trial):\n    num_leaves = trial.suggest_int('num_leaves', 2, 30)\n    n_estimators = trial.suggest_int('n_estimators', 50, 300)\n    learning_rate = trial.suggest_uniform('learning_rate', 0.0001, 0.99)\n    max_depth = trial.suggest_int('max_depth', 2, 10)\n    min_child_samples = trial.suggest_int('min_child_samples', 100, 1200)\n    min_data_in_leaf = trial.suggest_int('min_data_in_leaf', 5, 90)\n    bagging_freq = trial.suggest_int('bagging_freq', 1, 7)\n    bagging_fraction = trial.suggest_uniform('bagging_fraction', 0.0001, 1.0)\n    feature_fraction = trial.suggest_uniform('feature_fraction', 0.0001, 1.0)\n    subsample = trial.suggest_uniform('subsample', 0.1, 1.0)\n    colsample_bytree = trial.suggest_uniform('colsample_bytree', 0.1, 1.0)\n    \n    model = lgb.LGBMRegressor(\n        num_leaves=num_leaves,\n        n_estimators=n_estimators,\n        learning_rate=learning_rate,\n        max_depth=max_depth, \n        min_child_samples=min_child_samples, \n        min_data_in_leaf=min_data_in_leaf,\n        bagging_freq=bagging_freq,\n        bagging_fraction=bagging_fraction,\n        feature_fraction=feature_fraction,\n        subsample=subsample,\n        colsample_bytree=colsample_bytree,\n        metric='rsme',\n        random_state=666)\n    return model\n\ndef objective(trial):\n    model = create_model(trial)\n    model.fit(X_tr, y_tr)\n    y_pred = model.predict(X_val)\n    rsme = np.sqrt(mean_squared_error(y_pred, y_val))\n    return rsme\n\nstudy = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=40)\nparams = study.best_params\nprint(params)\n'''","766030b7":"params = {'num_leaves': 30,\n          'n_estimators': 279,\n          'learning_rate': 0.41293292317272395,\n          'max_depth': 9,\n          'min_child_samples': 118,\n          'min_data_in_leaf': 74,\n          'bagging_freq': 1,\n          'bagging_fraction': 0.34909235383110854,\n          'feature_fraction': 0.7673641507626504,\n          'subsample': 0.7826605676058075,\n          'colsample_bytree': 0.31499443536061944,\n          'random_state': 666}","3198cdcc":"cls = lgb.LGBMRegressor(**params)\ncls.fit(train, target)","f03f574d":"del train, target, params\ngc.collect()","fe462ab7":"lgb.plot_importance(cls)\nplt.show()","9653a762":"row_id = test['row_id']\n\ntest = test.drop(['row_id'], axis = 1)\ngc.collect()","865c7269":"test['hour'] = test['timestamp'].dt.hour\n# test['day'] = test['timestamp'].dt.day\n# test['weekend'] = test['timestamp'].dt.weekday\ntest['month'] = test['timestamp'].dt.month","88cf2f4f":"test = test.drop(['timestamp', 'site_id'], axis=1)\ngc.collect()","b7523f01":"test['building_mean'] = test['building_id'].map(building_mean)\ntest['building_median'] = test['building_id'].map(building_median)\ntest['building_std'] = test['building_id'].map(building_std)\n\ntest['building_min'] = test['building_id'].map(building_min)\ntest['building_max'] = test['building_id'].map(building_max)","95caeed9":"del building_mean, building_median, building_std\ngc.collect()","4bbbbb40":"row_id = row_id.reset_index(drop=True)\ntest = test.reset_index(drop=True)\n\ntest = reduce_mem_usage(test)","135b9e56":"print(pd.DataFrame([[i for i in dir()], [sys.getsizeof(eval(i)) for i in dir()]],\n                   index=['name','size']).T.sort_values('size', ascending=False).reset_index(drop=True).head(10))","ac22b4d0":"print(test.shape)\ntest.head()","aa34a7c3":"target = np.expm1(cls.predict(test))\n\nsubmission = pd.DataFrame(target, index=row_id, columns=['meter_reading'])\nsubmission.head(10)","ead6b46c":"del row_id\ngc.collect()\n\nsubmission = reduce_mem_usage(submission)","86bf7b16":"submission.to_csv('ASHRAE_submit.csv')","7a8e07e8":"\u6c17\u8c61\u60c5\u5831\u3092\u4fdd\u6301\u3059\u308b\u30c6\u30fc\u30d6\u30eb\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u5fdc\uff09<br>\n\u30fbsite_id\uff1a\u30d3\u30eb\u306e\u7269\u7406\u7684\u306a\u4f4d\u7f6e<br>\n\u30fbtimestamp\uff1a\u65e5\u4ed8\u3068\u6642\u523b<br>\n\u30fbair_temperature\uff1a\u6c17\u6e29<br>\n\u30fbdew_temperature\uff1a\u6e7f\u5ea6<br>\n\u30fbprecip_depth\uff1a\u964d\u6c34\u91cf<br>\n\u30fbsea_level_pressure\uff1a\u6d77\u5727<br>\n\u30fbwind_direction\uff1a\u98a8\u5411<br>\n\u30fbwind_speed\uff1a\u98a8\u901f<br>","5c4346f5":"# Analytics","00118fae":"# Outliers","8568aadb":"1\u6642\u9593\u3054\u3068\u306e\u30e1\u30fc\u30bf\u5024\u3092\u4fdd\u6301\u3059\u308b\u30c6\u30fc\u30d6\u30eb\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\uff09<br>\n\u30fbrow_id\uff1a\u884c\u306eID<br>\n\u30fbbuilding_id\uff1a\u30d3\u30eb\u306eID<br>\n\u30fbmeter\uff1a0\u306f\u96fb\u529b\u30011\u306f\u51b7\u6c34\u30012\u306f\u30b9\u30c1\u30fc\u30e0\u30013\u306f\u6e29\u6c34<br>\n\u30fbtimestamp\uff1a\u65e5\u4ed8\u3068\u6642\u523b<br>","d558ff36":"# Datasets","9ba8f278":"1\u6642\u9593\u3054\u3068\u306e\u30e1\u30fc\u30bf\u5024\u3092\u4fdd\u6301\u3059\u308b\u30c6\u30fc\u30d6\u30eb\uff08\u5b66\u7fd2\u30c7\u30fc\u30bf\uff09<br>\n\u30fbbuilding_id\uff1a\u30d3\u30eb\u306eID<br>\n\u30fbmeter\uff1a0\u306f\u96fb\u529b\u30011\u306f\u51b7\u6c34\u30012\u306f\u30b9\u30c1\u30fc\u30e0\u30013\u306f\u6e29\u6c34<br>\n\u30fbtimestamp\uff1a\u65e5\u4ed8\u3068\u6642\u523b<br>\n\u30fbmeter_reading\uff1a\u30e1\u30fc\u30bf\u30fc\u306e\u4f7f\u7528\u91cf\uff08\u76ee\u7684\u5909\u6570\uff09<br>","eb6dae64":"# Preprocess","fd5c7c48":"# Module","62aaaf07":"# Lags","421af368":"# Feature Engineering","2f53b689":"\u30d3\u30eb\u306e\u60c5\u5831\u3092\u4fdd\u6301\u3059\u308b\u30c6\u30fc\u30d6\u30eb<br>\n\u30fbsite_id\uff1a\u30d3\u30eb\u306e\u7269\u7406\u7684\u306a\u4f4d\u7f6e<br>\n\u30fbbuilding_id\uff1a\u30d3\u30eb\u306eID<br>\n\u30fbprimary_use\uff1a\u4f7f\u7528\u76ee\u7684<br>\n\u30fbsquare_feet\uff1a\u9762\u7a4d<br>\n\u30fbyear_built\uff1a\u65bd\u5de5\u3057\u305f\u5e74<br>\n\u30fbfloor_count\uff1a\u968e\u6570<br>","406cf335":"1448\u68df\u306e\u30d3\u30eb\u306e4\u7a2e\u985e\u306e\u30e1\u30fc\u30bf\u30fc\uff08\u96fb\u529b\u3001\u51b7\u6c34\u3001\u30b9\u30c1\u30fc\u30e0\u3001\u6e29\u6c34\uff09\u306e\u5024\u3092\u4e88\u6e2c\u3059\u308b\u30b3\u30f3\u30da\u3067\u3042\u308b\u3002\n\n\u80cc\u666f\u3068\u3057\u3066\u306f\u3001\u30a8\u30cd\u30eb\u30ae\u30fc\u4f7f\u7528\u91cf\uff084\u7a2e\u985e\u306e\u30e1\u30fc\u30bf\u30fc\u306e\u5024\uff09\u304c\u6b63\u78ba\u306b\u4e88\u6e2c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3053\u3068\u3067<br>\n\u7701\u30a8\u30cd\u6295\u8cc7\u3092\u6d3b\u767a\u5316\u3055\u305b\u3066\u3001\u74b0\u5883\u554f\u984c\u306b\u8ca2\u732e\u3057\u305f\u3044\u3068\u3044\u3046\u72d9\u3044\u304c\u3042\u308b\u3002\n\n\u30d3\u30eb\u306e\u6240\u6709\u8005\u306f\u3001\u30d3\u30eb\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u52b9\u7387\u3092\u6539\u5584\u3059\u308b\u3088\u3046\u306a\u6295\u8cc7\u3092\u884c\u3046\u3053\u3068\u3067<br>\n\u30a8\u30cd\u30eb\u30ae\u30fc\u52b9\u7387\u304c\u6539\u5584\u3055\u308c\u305f\u5206\u3001\u30b3\u30b9\u30c8\u3092\u6291\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002","93007975":"# Visualization","f592769b":"\u6c17\u8c61\u60c5\u5831\u3092\u4fdd\u6301\u3059\u308b\u30c6\u30fc\u30d6\u30eb\uff08\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u5fdc\uff09<br>\n\u30fbsite_id\uff1a\u30d3\u30eb\u306e\u7269\u7406\u7684\u306a\u4f4d\u7f6e<br>\n\u30fbtimestamp\uff1a\u65e5\u4ed8\u3068\u6642\u523b<br>\n\u30fbair_temperature\uff1a\u6c17\u6e29<br>\n\u30fbdew_temperature\uff1a\u6e7f\u5ea6<br>\n\u30fbprecip_depth\uff1a\u964d\u6c34\u91cf<br>\n\u30fbsea_level_pressure\uff1a\u6d77\u5727<br>\n\u30fbwind_direction\uff1a\u98a8\u5411<br>\n\u30fbwind_speed\uff1a\u98a8\u901f<br>","524c4d84":"# Submit","bd7fb541":"# Join","eccb452e":"# Modeling","df0ad574":"# Overview"}}