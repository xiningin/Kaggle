{"cell_type":{"f643dc8d":"code","8d0fb61d":"code","86005a9b":"code","d9d53ff3":"markdown","9f1648b7":"markdown"},"source":{"f643dc8d":"from IPython.display import clear_output\n!pip3 install rx\nclear_output()","8d0fb61d":"import rx \nfrom rx.subject import Subject","86005a9b":"DATA1 = \"A\"\nDATA2 = \"B\"\n\n# make Subject \nsubject_test = Subject()\n\nprint(\"1 round start\")\n# Subject subscribe  (2 Receiver is waiting for data )\nsubject_test.subscribe(\n   lambda x: print(\"[Receiver1] received {0}\".format(x))\n)\nsubject_test.subscribe(\n   lambda x: print(\"[Receiver2] received {0}\".format(x))\n)\n\nsubject_test.subscribe(\n   lambda x: print(\"[Receiver3] received {0}\".format(x))\n)\n\n# subject make stream (2 Sender send data )\nsubject_test.on_next(DATA1)\nsubject_test.on_next(DATA2)\n\nprint(\"1 round end\")\nprint(\"\")\nprint(\"2 round start\")\n\nsubject_test.subscribe(\n   lambda x: print(\"[Receiver4] received {0}\".format(x))\n)\n\nsubject_test.subscribe(\n   lambda x: print(\"[Receiver5] received {0}\".format(x))\n)\n\n# subject make stream (2 Sender send data )\nsubject_test.on_next(DATA1)\nsubject_test.on_next(DATA2)\n\nprint(\"2 round end\")","d9d53ff3":"A subject is \n\n### an observable sequence, \n\nas well as, \n\n### an observer that can multicast, \n\ni.e. talk to many observers that have subscribed.","9f1648b7":"# Subject (Observable + Observer)"}}