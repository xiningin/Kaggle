{"cell_type":{"321ad5d3":"code","56ddf30f":"code","0c179ced":"code","90071928":"code","097a8026":"code","70796196":"code","f9f7e23b":"code","849cb2ec":"code","0fd1da3d":"code","76e624fe":"code","22a6a01d":"code","1c531385":"code","21617e5d":"code","9d8d8de2":"code","7882562e":"code","bfd5b5f5":"code","7dd8c2e8":"code","585c9d06":"code","b1c22cf8":"code","7120956e":"code","a00735f9":"code","eb3beb01":"code","ea71d699":"code","606b6c53":"code","b48d95ee":"code","b7569d79":"code","ab0ac81e":"code","505418cf":"code","727eaeb3":"code","b7f0b8b9":"code","afd3979a":"code","8b6af4e6":"code","e3f41e3a":"code","58931371":"code","f1f28e3b":"code","c715b1da":"code","057365c7":"code","befbb86e":"code","26d3ca44":"code","364d3872":"code","04b933b7":"code","fbdbd226":"code","91ea7189":"code","ebe57f51":"code","dd3ee0ed":"code","6dc98ba2":"code","f5a78007":"code","1927134d":"code","ed3c4b0e":"code","c39f6c4d":"code","f72008b2":"code","30254d48":"code","8eb0bcc4":"code","a225e148":"code","e2cd77d5":"code","94417459":"code","988a4e12":"code","436e9a02":"code","1bc2889b":"code","dc5186b9":"code","fbca07fe":"code","19c77ab5":"markdown","8427e328":"markdown","9456a717":"markdown","7bf7d471":"markdown","15e5629e":"markdown","673bc7cc":"markdown","c22d0117":"markdown","303a7f7e":"markdown"},"source":{"321ad5d3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","56ddf30f":"url = '\/kaggle\/input\/malaysia-population\/population.csv'\npopulation = pd.read_csv(url)","0c179ced":"# The head() function is used to get the first n rows. \n# By default value of n is 5\n# It is useful for quickly testing the dataset.\npopulation.head()","90071928":"# The tail() function is used to get the last n rows. \n# By default value of n is 5\n# It is useful for quickly testing the dataset.\npopulation.tail()","097a8026":"# The info() function is used to print a concise summary of a DataFrame. \n# This method prints information about a DataFrame including\n# 1. total number of rows (start index, end index)\n# 2. total number of columns\n# 3. data type of each column \n# 4. how many non-null count for each column\n# 5. in this case the total entry is 17 and non-null count of each field is also 17\n# 6. the dataset do not have null values\n# 7. summary of data type => you have 4 integer columns and 1 non-number column\n# 8. how much memory is being used in bytes\npopulation.info()","70796196":"# The memory_usage() function return the memory usage of each column in bytes.\npopulation.memory_usage()","f9f7e23b":"# The sum() function is used to return the sum of the values for the requested column by the user.\n# Here it will give us the total memory usage by every single column\n# Which is equavalent to memory usage of the info() function\npopulation.memory_usage().sum()","849cb2ec":"# To find the data type of a specific column we can use dtype attribute\npopulation['pop_18'].dtype","0fd1da3d":"# The type function returns DataFrame\ntype(population)","76e624fe":"# The describe() method is used for calculating some statistical data like count, \n# mean, std, min, mean and percentile of the numerical values. \n# It analyzes both numeric and object column sets of mixed data types.\npopulation.describe()","22a6a01d":"# By default the pandas output are normally with 5 decimal places\n# It can be changed using the key display.float_format of pandas set_option function\npd.set_option('display.float_format', lambda x: '%.2f' % x)\npopulation.describe()","1c531385":"# The describe() method can be used for calculating statistical data on a specific column\npopulation['pop'].describe()","21617e5d":"# How to retrieve a specific column\n# Pass the column names as index\npopulation['state']","9d8d8de2":"# How to retrieve more than one column\n# Pass multiple column names as index list \npopulation[['state', 'pop']]","7882562e":"# Since rows do not have index we can pull out the row using position number only\n# How to retrieve a specific row using row index (based on position)\n# Row index start with 0\npopulation.iloc[0]","bfd5b5f5":"# How to retrieve more than one row using row index (based on position)\n# Row index start with 1, 3, 5, 7\npopulation.iloc[[1, 3, 5, 7, 9]]","7dd8c2e8":"# Let us drop the idxs column\n# By default value of axis is 0 which refers to drop row\n# Since we want to drop the column let us use the named parameter axis = 1\n# By default the columns is not dropped permanently\n# in order to drop the column permanently let us use the named parameter inplace = True\npopulation.drop('idxs', axis=1, inplace=True)\npopulation","585c9d06":"# There is a row Malaysia and it has the total population \n# By default value of axis is 0 which refers to drop row\n# Since we want to drop the row let us use the named parameter axis = 0\n# By default the rows is not dropped permanently\n# in order to drop the row permanently let us use the named parameter inplace = True\npopulation.drop([0], axis=0, inplace=True)\npopulation\n\n# Delete the first row using iloc selector\n# data = population.iloc[1:,].copy()","b1c22cf8":"# let us find the population less than 18 years old and add that as a new column\npopulation['under_18'] = population['pop'] - (population['pop_18'] + population['pop_60'])\npopulation","7120956e":"# Let us learn how to add a new total row\npopulation.drop('Total', axis=0, inplace=True, errors='ignore')\npopulation.loc['Total'] = population.sum(numeric_only=True)\npopulation.loc['Total', 'state'] = 'Total'\npopulation","a00735f9":"# let us rearrange the column in the data frame as state, under_18, pop_18, pop_60 and pop\npopulation = population[['state', 'under_18', 'pop_18', 'pop_60', 'pop']]\npopulation","eb3beb01":"# Let us verify the total is correct ie. under_18 + pop_18 + pop_60 == pop\npopulation['under_18'] + population['pop_18'] + population['pop_60'] == population['pop']","ea71d699":"# Let us rename the column names as state, minor, adult, elderly and total\npopulation.columns = ['state', 'minor', 'adult', 'elderly', 'total']\npopulation","606b6c53":"# Only the last row is having Total as indx let us reset that \npopulation.reset_index()","b48d95ee":"# Let us convert the state column into an index column\npopulation.set_index('state', inplace=True)\npopulation","b7569d79":"# Since every row is attached with state as index \n# Let us learn how to pull out row using specific state name\npopulation.loc['Selangor']","ab0ac81e":"# Let us learn how to pull out multiple rows using multiple state names\npopulation.loc[['Selangor', 'Perak', 'Melaka']]","505418cf":"# First let us recreate the population DataFrame from original dataset\npopulation = pd.read_csv(url)\npopulation.drop('idxs', axis=1, inplace=True)\npopulation['under_18'] = population['pop'] - (population['pop_18'] + population['pop_60'])\npopulation = population[['state', 'under_18', 'pop_18', 'pop_60', 'pop']]\npopulation.columns = ['state', 'minor', 'adult', 'elderly', 'total']\npopulation","727eaeb3":"# Retrive rows that do not have Malaysia in the state column using conditional selection\npopulation.loc[population['state'] != 'Malaysia']","b7f0b8b9":"# Retrive the columns states, minor and elderly from population DataFrame\n# Based on a condition where 60 years poulation is less than 18 years population \n# and state is not Malaysia\npopulation[(population['minor'] > population['elderly']) & (population['state'] != 'Malaysia')][['state', 'minor', 'elderly']]","afd3979a":"# Retrive the rows based on a condition where state name starts with 'S'\npopulation.loc[population['state'].str.startswith('S')]","8b6af4e6":"# Retrive the rows based on a condition where state name starts with 'W'\npopulation.loc[population['state'].str.startswith('W')]","e3f41e3a":"# Retrive the rows based on a condition where state name starts with 'P' and ends with 'g'\n# DataFrame string columns has an attribute str and which provides various methods such as contains\n# The contains method can take regular expressions\n# ^W => starts with W\n# n$ => ends with n\n# .+ => any number of characters\npopulation.loc[population['state'].str.contains('^P.+g$')]","58931371":"# Retrive the rows based on a condition where state name starts with 'P', \n# ends with 'g' and must have h in between\npopulation.loc[population['state'].str.contains('^P.+h.+g$')]","f1f28e3b":"# The describe method returns Series\n# which means we can use max, min as key\ntype(population['total'].describe())","c715b1da":"# Which means we can use the keys count, mean, std, min, 25%, 50%, 75%, max to retrive value\npopulation_describe = population['total'].describe()\npopulation_describe['max']","057365c7":"# Retrieve the state that has highest population and lowest population\n# Using the describe method we can get the maxinum population value (6538000)\n# and the describe method also can give us the minimum population value (99600)\n# To know which state has the highest population \npopulation.loc[population['total'] == population_describe['max']]","befbb86e":"# Unfortunately Malaysia is not a stat it is the contry total\n# Let is delete the first row using iloc selector\npopulation = population.iloc[1:,].copy()\npopulation","26d3ca44":"# Which means we can use the keys count, mean, std, min, 25%, 50%, 75%, max to retrive value\npopulation_describe = population['total'].describe()\npopulation.loc[population['total'] == population_describe['max']]","364d3872":"# To know which state has the highest population \npopulation.loc[population['total'] == population_describe['min']]","04b933b7":"# The .sort_values() method in Pandas DataFrame helps to sort values in a DataFrame \n# along either axis (columns or rows). \n# Typically, to sort the rows in a DataFrame by the values of one or more columns:    \npopulation.sort_values(by=\"total\")","fbdbd226":"# Change the sort order\npopulation.sort_values(by=\"total\", ascending=False)","91ea7189":"# Sort by multiple columns\npopulation.sort_values(by=[\"elderly\", \"adult\", \"minor\"], ascending=False)","ebe57f51":"# Sort by multiple columns With Different Sort Orders\npopulation.sort_values(by=[\"elderly\", \"adult\", \"minor\"], ascending=[False, True, False])","dd3ee0ed":"# Pandas allows to choose different sorting algorithms. \n# The available algorithms are quicksort, mergesort, and heapsort. \n# The algorithm used by default when sorting on a single column is quicksort. \n# To change this to a stable sorting algorithm, use mergesort. \npopulation.sort_values(by=\"total\", ascending=False, kind=\"mergesort\")","6dc98ba2":"# Let us convert the state column into an index column\npopulation.set_index('state', inplace=True)\npopulation","f5a78007":"# Sort by index (state) in ascending order\npopulation.sort_index()","1927134d":"# Sort by index (state) in descending order\npopulation.sort_index(ascending=False)","ed3c4b0e":"# First let us recreate the population DataFrame from original dataset\npopulation = pd.read_csv(url)\npopulation.drop('idxs', axis=1, inplace=True)\npopulation['under_18'] = population['pop'] - (population['pop_18'] + population['pop_60'])\npopulation = population[['state', 'under_18', 'pop_18', 'pop_60', 'pop']]\npopulation.columns = ['state', 'minor', 'adult', 'elderly', 'total']\npopulation","c39f6c4d":"# let us remove the Malaysia row before we start using methods such as sum, mean\npopulation = population.iloc[1:].copy()\npopulation","f72008b2":"# The sum() method returns sum of values in the total column\npopulation['total'].sum()","30254d48":"# The mean() method returns mean values in the total column\npopulation['total'].mean()","8eb0bcc4":"# The std() method returns standard deviation values in the total column\npopulation['total'].std()","a225e148":"# Retrieve the unique values from the state column\npopulation['state'].unique()","e2cd77d5":"# How many unique values we have in the state column\npopulation['state'].nunique()","94417459":"# How frequently the unique values appear in the state column\npopulation['state'].value_counts()","988a4e12":"# Let us plot the graph using Dataframe\nax = population.set_index('state').plot(kind=\"bar\", figsize=(16, 6))\nfor label in (ax.get_xticklabels() + ax.get_yticklabels()):\n    label.set_fontsize(16)\nplt.title(\"Malaysia Population By State\", fontsize=22)\nplt.xlabel(\"State\", fontsize=20)\nplt.ylabel(\"Population in Millions\", fontsize=20)","436e9a02":"# Let us plot the graph using Matplotlib\nfig = plt.figure()\nax = fig.add_axes([0,0,2,2])\nax.barh(population['state'], population['total'])\nfor label in (ax.get_xticklabels() + ax.get_yticklabels()):\n    label.set_fontsize(16)\nplt.title(\"Malaysia Population By State\", fontsize=22)\nplt.xlabel(\"Population in Millions\", fontsize=20)\nplt.ylabel(\"State\", fontsize=20)\nplt.grid()","1bc2889b":"# Let us plot the graph using Dataframe\nsorted_population = population.copy()\nsorted_population.loc[14, 'state'] = 'Kuala Lumpur'\nsorted_population.loc[16, 'state'] = 'Putrajaya'\nsorted_population.sort_values('state', inplace=True)\nsorted_population","dc5186b9":"# Let us plot the graph using Matplotlib\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_axes([0,0,1,1])\nax.axis('equal')\nvalue = sorted_population['total']\nlabels = sorted_population['state']\nwedges, labels, autopct = ax.pie(value, labels=labels, autopct='%1.2f%%')\nplt.setp(labels, fontsize=12)\nplt.title(\"Malaysia Population By State\", fontsize=22)\nplt.show()","fbca07fe":"# Let us plot the graph using Seaborn\nplt.figure(figsize=(12, 8))\nplt.title(\"Malaysia Population By State\", fontsize=22)\nax = sns.barplot(x='total', y='state', data=population)\nfor label in (ax.get_xticklabels() + ax.get_yticklabels()):\n    label.set_fontsize(14)\nplt.xlabel(\"Population in Millions\", fontsize=20)\nplt.ylabel(\"State\", fontsize=20)\nplt.grid()","19c77ab5":"<h2>Methods, Attributes and Universal Functions<\/h2>\n<p>Let's learn how to use the methods, attributes and universal functions that already exists in Pandas DataFrame<\/p>\n<hr\/>","8427e328":"<h2>Selection rows and columns<\/h2>\n<p>Let's learn the various methods to grab data from a DataFrame<\/p><hr\/>","9456a717":"<h2>Analyze Population Dataframe<\/h2>\n<p>Let's learn the various methods to analyze the given DataFrame<\/p><hr\/>","7bf7d471":"<h2>Sorting<\/h2>\n<p>Let's learn how to use various methods to sort the given Pandas DataFrame<\/p>\n<hr\/>","15e5629e":"<h2>Add, Drop, Rearrange Columns and Rows<\/h2>\n<p>\nLet's learn how to do the following items\n    <ol>\n        <li>Drop a column from a DataFrame<\/li>\n        <li>Drop a row from a DataFrame<\/li>\n        <li>Add a column to the DataFrame<\/li>\n        <li>Add a row to the DataFrame<\/li>\n        <li>Rearrange the columns in the DataFrame<\/li>\n    <\/ol>\n<\/p>\n<hr\/>","673bc7cc":"<h2>Visualization<\/h2>\n<p>Data Visualization using Matplotlib and Seaborn Library<\/p>\n<hr\/>","c22d0117":"<h2>Conditional Selection<\/h2>\n<p>Let's learn how to select rows in Pandas DataFrame conditionally<\/p>\n<hr\/>","303a7f7e":"<h2>Column Name and Index<\/h2>\n<p>Let's learn how to change the column names and also row index. Then we shall try retrive rows, columns using column names and indexes <\/p>\n<hr\/>"}}