{"cell_type":{"db22f5eb":"code","8545eaeb":"code","cc528832":"code","b8d9175e":"code","df707ef8":"code","b29ca0cf":"code","82844582":"code","f87c1149":"code","3ef0aa27":"code","7dfc8e6d":"code","e7a726f1":"code","19bff258":"code","b486df5c":"code","9369c92c":"code","e5ce3a13":"code","c1a1c717":"code","2983540b":"code","32b778b2":"code","79662b43":"code","16358c44":"code","74cd92df":"code","cb290b8d":"code","6c50954c":"code","57e4e660":"code","eaf2607b":"code","60da9c1a":"code","01acaf9f":"code","434d7d6f":"code","27b4f87a":"code","79ec68c0":"code","c9395e42":"code","d0040960":"code","3badeea7":"code","ca4471c6":"code","d51d9326":"code","02b4d988":"code","7225cbad":"code","f949310c":"code","83ebc870":"markdown","ac5b45dd":"markdown","78083e68":"markdown","aa4b6581":"markdown","75d82bc9":"markdown","e6f4000d":"markdown","107c9d07":"markdown","0580e355":"markdown","ea479b79":"markdown","55c45bed":"markdown","fcc3ccb7":"markdown","dd4d6dd4":"markdown","e54763ec":"markdown","9cfe7388":"markdown","fc733c4e":"markdown","728fcc7b":"markdown","a695c402":"markdown","2ac34ff1":"markdown","034bf9ce":"markdown","82240bf5":"markdown","4d85a629":"markdown","2a7179b7":"markdown","61ebf196":"markdown"},"source":{"db22f5eb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#Step1: Necessery imports\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport scipy as scipy\nimport seaborn as sns\nimport folium\nimport math\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nfrom folium import Marker, Circle, Choropleth\nfrom folium.plugins import MarkerCluster\nfrom pandas import DataFrame\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n#Step2: Loading the data \n#Change the csv file for another brand\n#Added Data types for memory optimization and faster loading\ndata = pd.read_csv('\/kaggle\/input\/property-prices-in-germany-june-2021\/Property Prices in Germany June 2021.csv')\n            \nprint(data.info()) ","8545eaeb":"#Step3:Describing the data\ndata.describe()","cc528832":"#Add Geocoding\n!pip install geopy==1.22.0\nimport math\nimport pandas as pd\nimport geopandas as gpd\nimport numpy as np\nimport folium\nfrom folium import Marker\nfrom folium.plugins import MarkerCluster\nfrom geopandas.tools import geocode\nresult = geocode(\"The Great Pyramid of Giza\", provider=\"nominatim\")\nresult","b8d9175e":"point = result.geometry.iloc[0]\nprint(\"Latitude:\", point.y)\nprint(\"Longitude:\", point.x)","df707ef8":"def my_geocoder(row):\n    try:\n        point = geocode(row, provider='nominatim').geometry.iloc[0]\n        return pd.Series({'Latitude': point.y, 'Longitude': point.x, 'geometry': point})\n    except:\n        return None\n\ndata[['Latitude', 'Longitude', 'geometry']] = data.apply(lambda x: my_geocoder(x['City']), axis=1)\n\nprint(\"{}% of addresses were geocoded!\".format(\n    (1 - sum(np.isnan(data[\"Latitude\"])) \/ len(data)) * 100))\n\n# Drop data that were not successfully geocoded\ndata = data.loc[~np.isnan(data[\"Latitude\"])]\ndata = gpd.GeoDataFrame(data, geometry=data.geometry)\ndata.crs = {'init': 'epsg:4326'}\ndata.head()","b29ca0cf":"# Create the map\nv_map = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2) \n\n# Add points to the map\nmc = MarkerCluster()\nfor idx, row in data.iterrows(): \n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        mc.add_child(Marker(location=[row['Latitude'], row['Longitude']],\n                            tooltip=str(row['Rank'])+\" Position by Rank\"))\nv_map.add_child(mc)\n\n# Display the map\nv_map","82844582":"# Create the map\nv_map = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2) \n\n# Add points to the map\nmc = MarkerCluster()\nfor idx, row in data.iterrows(): \n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        mc.add_child(Marker(location=[row['Latitude'], row['Longitude']],\n                            tooltip=str(row['Rank'])+\" Position by Rank\"))\nv_map.add_child(mc)\n\n#Style map\nfolium.TileLayer('stamentoner').add_to(v_map)\n\n# Display the map\nv_map","f87c1149":"# Create the map\nv_map = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2) \n\n# Add points to the map\nmc = MarkerCluster()\nfor idx, row in data.iterrows(): \n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        mc.add_child(Marker(location=[row['Latitude'], row['Longitude']],\n                            tooltip=str(row['Rank'])+\" Position by Rank\"))\nv_map.add_child(mc)\n\n#Style map\nfolium.TileLayer('stamenwatercolor').add_to(v_map)\n\n# Display the map\nv_map","3ef0aa27":"# Create the map\nv_map = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2) \n\n# Add points to the map\nmc = MarkerCluster()\nfor idx, row in data.iterrows(): \n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        mc.add_child(Marker(location=[row['Latitude'], row['Longitude']],\n                            tooltip=str(row['Rank'])+\" Position by Rank\"))\nv_map.add_child(mc)\n\n#Style map\nfolium.TileLayer('openstreetmap').add_to(v_map)\n\n# Display the map\nv_map","7dfc8e6d":"# Create the map\nv_map_heat = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2) \n\n\n# Add a heatmap to the base map\n\nfolium.plugins.HeatMap(data=data[['Latitude', 'Longitude']], radius=13).add_to(v_map_heat)\n\n\n# Display the map\nv_map_heat","e7a726f1":"# Create a Bubble base map\nm_bubble_focus = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2)\n\ndef color_producer(val):\n    if val <= 8:\n        return 'blue'\n    if val >= 8 and val<= 16:\n        return 'yellow'\n    else:\n        return 'red'\n\n# Add a bubble map to the base map\nfor i in range(0,len(data)):\n    Circle(\n        location=[data.iloc[i]['Latitude'], data.iloc[i]['Longitude']],\n        radius=20,\n        color=color_producer(data.iloc[i]['Rank'])).add_to(m_bubble_focus)\n\n# Display the map\nm_bubble_focus","19bff258":"# Create a Bubble base map\nm_bubble_detail = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2)\n\ndef color_producer(val):\n    if val <= 5:\n        return 'blue'\n    if val >= 1 and val<= 5:\n        return 'yellow'\n    if val >= 6 and val<= 11:\n        return 'orange'\n    if val >= 16 and val<= 21:\n        return 'red'\n    else:\n        return 'black'\n\n# Add a bubble map to the base map\nfor i in range(0,len(data)):\n    Circle(\n        location=[data.iloc[i]['Latitude'], data.iloc[i]['Longitude']],\n        radius=20,\n        color=color_producer(data.iloc[i]['Rank'])).add_to(m_bubble_detail)\n\n# Display the map\nm_bubble_detail","b486df5c":"# Create the map\nv_map_mortgage = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2) \n\n# Add points to the map\nmc = MarkerCluster()\nfor idx, row in data.iterrows(): \n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        mc.add_child(Marker(location=[row['Latitude'], row['Longitude']],\n                            tooltip= str(row['MortgageAsAPercentageOfIncome'])+\"%\"))\n                      \nv_map_mortgage.add_child(mc)\n\n# Display the map\nv_map_mortgage","9369c92c":"data.sort_values(by='Rank', ascending=True).head(10)","e5ce3a13":"\n# Create the map\nv_map_mortgage = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2) \n\n# Add points to the map\nmc = MarkerCluster()\nfor idx, row in data.iterrows(): \n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        mc.add_child(Marker(location=[row['Latitude'], row['Longitude']],\n                            tooltip= str(row['GrossRentalYieldCityCentre'])+\"%\"))\n                      \nv_map_mortgage.add_child(mc)\n\n# Display the map\nv_map_mortgage","c1a1c717":"# Create a Bubble base map\nm_bubble_detail = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2)\n\ndef color_producer(val):\n    if val >= 9:\n        return 'blue'\n    if val <= 8 and val>= 7:\n        return 'yellow'\n    if val <= 6 and val>= 5:\n        return 'orange'\n    if val <= 4 and val>= 3:\n        return 'red'\n    else:\n        return 'black'\n\n# Add a bubble map to the base map\nfor i in range(0,len(data)):\n    Circle(\n        location=[data.iloc[i]['Latitude'], data.iloc[i]['Longitude']],\n        radius=20,\n        color=color_producer(data.iloc[i]['GrossRentalYieldCityCentre'])).add_to(m_bubble_detail)\n\n# Display the map\nm_bubble_detail","2983540b":"data.sort_values(by='GrossRentalYieldCityCentre', ascending=False).head(10)","32b778b2":"# Create the map\nv_map_mortgage = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2) \n\n# Add points to the map\nmc = MarkerCluster()\nfor idx, row in data.iterrows(): \n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        mc.add_child(Marker(location=[row['Latitude'], row['Longitude']],\n                            tooltip= str(row['GrossRentalYieldOutsideOfCentre'])+\"%\"))\n                      \nv_map_mortgage.add_child(mc)\n\n# Display the map\nv_map_mortgage","79662b43":"# Create a Bubble base map\nm_bubble_detail = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2)\n\ndef color_producer(val):\n    if val >= 9:\n        return 'blue'\n    if val <= 8 and val>= 7:\n        return 'yellow'\n    if val <= 6 and val>= 5:\n        return 'orange'\n    if val <= 4 and val>= 3:\n        return 'red'\n    else:\n        return 'black'\n\n# Add a bubble map to the base map\nfor i in range(0,len(data)):\n    Circle(\n        location=[data.iloc[i]['Latitude'], data.iloc[i]['Longitude']],\n        radius=20,\n        color=color_producer(data.iloc[i]['GrossRentalYieldOutsideOfCentre'])).add_to(m_bubble_detail)\n\n# Display the map\nm_bubble_detail","16358c44":"data.sort_values(by='GrossRentalYieldOutsideOfCentre', ascending=False).head(10)","74cd92df":"#controls the numer of rows to be read in the dataframe\nstart, end = 0, 529","cb290b8d":"\n\nfig = go.Figure(data=go.Scatter3d(\n    x=data['GrossRentalYieldCityCentre'][start:end],\n    y=data['GrossRentalYieldOutsideOfCentre'][start:end],\n    z=data['PriceToRentRatioCityCentre'][start:end],\n    text=data['City'][start:end],\n    mode='markers',\n    marker=dict(\n        sizemode='diameter',\n        sizeref=2,\n        size=data['MortgageAsAPercentageOfIncome'][start:end],\n        color = data['MortgageAsAPercentageOfIncome'][start:end],\n        colorscale = 'Viridis',\n        colorbar_title = 'MortgageAsAPercentageOfIncome<br>',\n        line_color='rgb(140, 140, 170)'\n    )\n))\n\n\n\n\n\n\n\n\nfig.update_layout(height=800, width=800,\n                  title='3-D Graph - X-GrossRentalYieldCityCentre,Y-GrossRentalYieldOutsideofCentre,Z-PriceToRentRatioCityCentre,Size-MortgageAsAPercentageOfIncome,Color-MortgageAsAPercentageOfIncome')\n\n\n\n\n\n\nfig.show()","6c50954c":"#Finding correlations\n\ncorr = data.corr()\n\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\ncorr = corr.mask(mask)\nfig = ff.create_annotated_heatmap(\n    z=corr.to_numpy().round(2),\n    x=list(corr.index.values),\n    y=list(corr.columns.values),       \n    xgap=3, ygap=3,\n    zmin=-1, zmax=1,\ncolorscale='icefire',\n    colorbar_thickness=30,\n    colorbar_ticklen=3,\n)\nfig.update_layout(title_text='Correlation Matrix (impact relationship with numbers)',\n                  title_x=0.5,\n                  titlefont={'size': 20},\n                  width=800, height=800,\n                  xaxis_showgrid=False,\n                  xaxis={'side': 'bottom'},\n                  yaxis_showgrid=False,\n                  yaxis_autorange='reversed',                   \n                  paper_bgcolor=None,\n                  template=\"simple_white\"\n                  )\nfig.show()","57e4e660":"sns.pairplot(data,palette='bright')\n%time","eaf2607b":"sns.set(style=\"ticks\", color_codes=True)\ng = sns.pairplot(data, kind=\"reg\", plot_kws={'line_kws':{'color':'red'}})\nplt.show()\n%time","60da9c1a":"sns.jointplot(x=\"MortgageAsAPercentageOfIncome\", y=\"GrossRentalYieldCityCentre\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","01acaf9f":"sns.jointplot(x=\"MortgageAsAPercentageOfIncome\", y=\"GrossRentalYieldOutsideOfCentre\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","434d7d6f":"sns.jointplot(x=\"MortgageAsAPercentageOfIncome\", y=\"PriceToRentRatioCityCentre\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","27b4f87a":"sns.jointplot(x=\"MortgageAsAPercentageOfIncome\", y=\"PriceToRentRatioOutsideOfCityCentre\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","79ec68c0":"sns.jointplot(x=\"MortgageAsAPercentageOfIncome\", y=\"AffordabilityIndex\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","c9395e42":"sns.jointplot(x=\"MortgageAsAPercentageOfIncome\", y=\"Longitude\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","d0040960":"sns.jointplot(x=\"MortgageAsAPercentageOfIncome\", y=\"GrossRentalYieldOutsideOfCentre\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","3badeea7":"sns.jointplot(x=\"MortgageAsAPercentageOfIncome\", y=\"Latitude\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","ca4471c6":"import pandas_profiling\nreport = pandas_profiling.ProfileReport(data)\nfrom IPython.display import display\ndisplay(report)","d51d9326":"pip install quickda","02b4d988":"# Importing libraries\nfrom quickda.explore_data import *\nfrom quickda.clean_data import *\nfrom quickda.explore_numeric import *\nfrom quickda.explore_categoric import *\nfrom quickda.explore_numeric_categoric import *\nfrom quickda.explore_time_series import *","7225cbad":"eda_num(data)","f949310c":"eda_num(data, method=\"correlation\")","83ebc870":"# Top 10 cities to invest in City Centre - Gross rental yield as % :","ac5b45dd":"# 3-D Graph","78083e68":"# POSITION BY RANK - Stamentoner ","aa4b6581":"# Position by Rank - Focused Color Bubble Map \n* Blue color shows the top 25%\n* Yellow color shows average 50%\n* Red color shows the bottom 25%","75d82bc9":"# Position by Rank Map\n* Shows the number of entries by Continent,Country e.t.c.\n* Shows the Rank on the tooltip\n* Rank is influenced by the affordability for the working class, because it takes to account how much property can you buy on average wage ","e6f4000d":"# Best cities to invest in City Centre - Gross rental yield as % Map\n* Where buy-to-let property earns the most\n* Buy it to rent it\n* Shows the Gross rental yield as % on Map tooltip. \n* The higher number is the better one","107c9d07":"# Position by Rank - Detailed Color Bubble Map \n* Blue color shows the Top  - Where you should to be focused and the top 20%\n* Yellow - Shows the Top  - Where you should be focused and the top 20-40%\n* Orange - Shows the Top  - This is the average and the top 40-60%\n* Red - Shows the Top  - Where you should avoid and the bottom 20-40%\n* Black - Shows the Top  - Where you should avoid and the bottom 20%","0580e355":"# Finding Influences - Correlation Matrix (impact relationship with numbers)","ea479b79":"# Best cities to invest in Outside of City Centre - Gross rental yield as % Map\n* Where buy-to-let property earns the most\n* Shows the Gross rental yield as % on Map tooltip. \n* The higher number is the better one","55c45bed":"# Real Estate 3-D Top German Cities \n* The application helps people find the best real estate deals in the World.\n* The application helps people make informed decisions.\n* The application visualizes data on maps.\n* Examines the average and makes predictions on various factors.\n* Examines factors like affordability, price to income e.t.c.\n* Draws Maps and Heatmaps.\n* Creates 3-D Visualizations.\n* Shows the Top 10.\n* Shows the correlation between factors with heatmaps.\n* Make Predictions\n* Is optimized to work with large datasets.","fcc3ccb7":"***'3-D Graph - X-GrossRentalYieldCityCentre,Y-GrossRentalYieldOutsideofCentre,Z-PriceToRentRatioCityCentre,Size-MortgageAsAPercentageOfIncome,Color-MortgageAsAPercentageOfIncome*****","dd4d6dd4":"# Quickda Analysis","e54763ec":"# Best cities to invest in City Centre - Gross rental yield as % Map\n* Blue color shows the Top  Where you should to be focused and the top 10%\n* Yellow - Shows the Top - Where you should be focused and the top 10% to 20%\n* Orange - Shows the Top average and the top 20% to 40%\n* Red - Shows  the Average and the bottom 20%\n* Black - Shows the bottom aveage and the bottom 10%","9cfe7388":"# Describing the data","fc733c4e":"# Maps","728fcc7b":"# POSITION BY RANK - Stamenwatercolor","a695c402":"# Heatmap by Rank Map\n* Shows the distribution of entries by Continent,Country coloring them\n","2ac34ff1":"# Pairplots and Linear Predictions","034bf9ce":"# Top 10 cities to Live and Mortgage ","82240bf5":"# Mortgage as % of average income Map\n* Shows the number of entries by Continent,Country e.t.c.\n* Shows the  % of average income as mortgage on tooltip - the smaller % is the better\n\n","4d85a629":"# POSITION BY RANK - OPENSTREETMAP","2a7179b7":"# Pandas Profiling","61ebf196":"# Top 10 cities to invest in Outside of City Centre - Gross rental yield as % :"}}