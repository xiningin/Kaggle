{"cell_type":{"e1455439":"code","8bceba34":"code","02394a1d":"code","cd876a81":"code","e6dcb75a":"code","7b202f8c":"code","b3b74a9a":"code","eb5c2450":"code","52e86efb":"code","8e8e3d4b":"code","b3e962fe":"code","07bab1fd":"code","8932cbf0":"code","7ed5b714":"code","8c8e6e73":"code","1cde1b0d":"code","7e52bc03":"code","800f76aa":"code","dc93e741":"code","a64d2b36":"code","ada2768d":"code","b5f558b0":"code","2c1a68ec":"code","c90d5c60":"code","714aafae":"code","99fbba3d":"code","bd54a21a":"code","58966bf2":"code","e85362ed":"code","9596d3f2":"code","8cb8fc00":"code","aff5b87f":"code","ff1331e1":"code","18e186d9":"code","6f156409":"code","113b7c04":"code","71bccb4d":"code","8b005dc3":"code","a2965ad0":"code","3940a9c3":"code","c15848d2":"code","78b261fd":"code","20768c4d":"code","edb81ea4":"code","97e2ab96":"code","8cc47056":"code","496a5592":"code","60aee6bf":"code","e198207b":"code","fcf8d702":"code","87a8244a":"code","fe4c3c83":"code","7dfe04ab":"code","f35271c3":"code","e034ada1":"code","5cc40f18":"code","8350ad39":"code","fed508bf":"code","73c79346":"code","915f9055":"code","6e9943dc":"code","699bea20":"code","a81ec8db":"code","1d377018":"code","339464e1":"code","841b12b8":"code","8ed3a6f5":"code","effbf653":"code","94650f73":"code","966e97e4":"code","647e9292":"code","f00c448e":"code","1b5710db":"code","695d7627":"code","584d8076":"code","0b6c0536":"code","d87527b6":"code","9ba35f06":"code","4710b165":"code","0aa4d758":"code","4b07d1f0":"code","e3950491":"code","9692f90a":"code","503e74db":"code","80cb3e70":"code","08aef678":"code","99c2e93c":"code","5736ca99":"code","d8d85103":"code","393da4d9":"code","76136646":"code","60a19d4f":"code","587c0b1b":"code","55f9f014":"code","0c869d29":"code","19ebb8cd":"markdown","e01ea5e1":"markdown","37513ad2":"markdown","866e22af":"markdown","2158d7f5":"markdown","6ca3708f":"markdown","767c1cb4":"markdown","717fd6e5":"markdown","b03390ad":"markdown","c3e77323":"markdown","e4a1651c":"markdown","3c92841e":"markdown","426f4a83":"markdown","6f3e2444":"markdown","1a23c155":"markdown","a57a3a15":"markdown","1e009551":"markdown","25eb7d5e":"markdown","e7992578":"markdown","af953ef8":"markdown","6298f786":"markdown","7868d0bf":"markdown","d3dfc496":"markdown","80a3231d":"markdown","ca1be730":"markdown","a1f6dc84":"markdown","7e49cf17":"markdown","daafae71":"markdown","7dcca2f4":"markdown","ac790ae1":"markdown","0ecccf46":"markdown","2669d583":"markdown","f86b07df":"markdown","d55221ce":"markdown","edf39037":"markdown","aef639af":"markdown","735fbe56":"markdown","f0daacbf":"markdown","d29b1888":"markdown","14174a00":"markdown","d3cfbf7b":"markdown","bf356f47":"markdown","1b112d2f":"markdown","1e51b179":"markdown","79d6c046":"markdown","408d3e45":"markdown","f7eb8c1c":"markdown","6f0b05b5":"markdown","933943eb":"markdown","46744c14":"markdown","00f71ac5":"markdown","45f50d70":"markdown","9b9fd140":"markdown","cd956401":"markdown","3b2c9775":"markdown","636574f1":"markdown","29409135":"markdown","d707a55c":"markdown","993909e9":"markdown"},"source":{"e1455439":"import numpy as np\nimport scipy as sp\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport cufflinks as cf\nimport warnings\nwarnings.filterwarnings('ignore')","8bceba34":"init_notebook_mode(connected=True)\ncf.go_offline()","02394a1d":"data = pd.read_csv('..\/input\/data.csv')","cd876a81":"data.head()","e6dcb75a":"data.info()","7b202f8c":"print('Number of Categorical Columns: ', len(data.select_dtypes(include=object).columns))\nprint('Number of Numerical Columns: ', len(data.select_dtypes(exclude=object).columns))","b3b74a9a":"#Dropping columns which are of very less significance.\ndata.drop(columns=['Unnamed: 0', 'ID', 'Photo', 'Flag', 'Club Logo', 'Special', 'Real Face', 'Release Clause',\n                   'Joined', 'Contract Valid Until'], inplace=True)","eb5c2450":"#Check for missing values in columns where missing values is more than half of the total number of values.\ndata.isnull().sum()[data.isnull().sum() >= 9000]","52e86efb":"#Dropping column based on above condition\ndata.drop(columns=['Loaned From'], inplace=True)","8e8e3d4b":"data.isnull().sum()","b3e962fe":"#Players who are not part of any club.\ndata['Club'].fillna(value='No Club', inplace=True)","07bab1fd":"data[data['Preferred Foot'].isna()].head()","8932cbf0":"#Full of NaN values for many features, so drop.\ndata.drop(index=data[data['Preferred Foot'].isna()].index, inplace=True)","7ed5b714":"data[data['Position'].isna()][['Name', 'Nationality', 'LS', 'ST','RS', 'LW', 'LF', 'CF', 'RF', 'RW',\n                              'LAM', 'CAM', 'RAM', 'LM', 'LCM','CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', \n                              'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']].head()","8c8e6e73":"#Can fill in position manually but LS, RS, CF, etc. features have no values, so drop them.\ndata.drop(index=data[data['Position'].isna()].index, inplace=True)","1cde1b0d":"#Checking the number of missing values in the remaining columns.\ndata.isnull().sum()[data.isnull().sum() > 0]","7e52bc03":"len(data[data['Position'] == 'GK'])","800f76aa":"data.fillna(value=0, inplace=True)","dc93e741":"data.isnull().sum().sum()","a64d2b36":"data.select_dtypes(include=object).columns","ada2768d":"#Function to convert value and wage of the player.\ndef currencyConverter(val):\n    if val[-1] == 'M':\n        val = val[1:-1]\n        val = float(val) * 1000000\n        return val\n        \n    elif val[-1] == 'K':\n        val = val[1:-1]\n        val = float(val) * 1000\n        return val\n    \n    else:\n        return 0","b5f558b0":"data['Value in Pounds'] = data['Value'].apply(currencyConverter)\ndata['Wage in Pounds'] = data['Wage'].apply(currencyConverter)\n\ndata.drop(columns=['Value', 'Wage'], inplace=True)\n\ndata.head()","2c1a68ec":"data[['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM',\n       'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM',\n       'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']].head()","c90d5c60":"#Function to convert skill rating at each position.\ndef skillConverter(val):\n    if type(val) == str:\n        s1 = val[0:2]\n        s2 = val[-1]\n        val = int(s1) + int(s2)\n        return val\n    \n    else:\n        return val","714aafae":"skill_columns = ['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM',\n       'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM',\n       'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']\n                      \nfor col in skill_columns:\n    data[col] = data[col].apply(skillConverter)","99fbba3d":"data[['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM',\n       'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM',\n       'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']].head()","bd54a21a":"data[['Height', 'Weight']].head()","58966bf2":"def height_converter(val):\n    f = val.split(\"'\")[0]\n    i = val.split(\"'\")[1]\n    h = (int(f) * 30.48) + (int(i)*2.54)\n    return h\n\ndef weight_converter(val):\n    w = int(val.split('lbs')[0])\n    return w","e85362ed":"data['Height in Cms'] = data['Height'].apply(height_converter)\ndata['Weight in Pounds'] = data['Weight'].apply(weight_converter)\n\ndata.drop(columns=['Height', 'Weight'], inplace=True)\ndata[['Height in Cms', 'Weight in Pounds']].head()","9596d3f2":"data['Work Rate'].unique()","8cb8fc00":"data['Body Type'].unique()","aff5b87f":"data['Body Type'][data['Body Type'] == 'Messi'] = 'Lean'\ndata['Body Type'][data['Body Type'] == 'C. Ronaldo'] = 'Normal'\ndata['Body Type'][data['Body Type'] == 'Neymar'] = 'Lean'\ndata['Body Type'][data['Body Type'] == 'Courtois'] = 'Lean'\n#PLAYER_BODY_TYPE_25 is the body type of Mohammed Salah who has a Normal body type.\ndata['Body Type'][data['Body Type'] == 'PLAYER_BODY_TYPE_25'] = 'Normal'\ndata['Body Type'][data['Body Type'] == 'Shaqiri'] = 'Stocky'\ndata['Body Type'][data['Body Type'] == 'Akinfenwa'] = 'Stocky'","ff1331e1":"print(data['Position'].unique())\nprint(data['Position'].nunique())","18e186d9":"def position_simplifier(val):\n    \n    if val == 'RF' or val == 'ST' or val == 'LF' or val == 'RS' or val == 'LS' or val == 'CF':\n        val = 'F'\n        return val\n        \n    elif val == 'LW' or val == 'RCM' or val == 'LCM' or val == 'LDM' or val == 'CAM' or val == 'CDM' or val == 'RM' \\\n         or val == 'LAM' or val == 'LM' or val == 'RDM' or val == 'RW' or val == 'CM' or val == 'RAM':\n        val = 'M'\n        return val\n\n    \n    elif val == 'RCB' or val == 'CB' or val == 'LCB' or val == 'LB' or val == 'RB' or val == 'RWB' or val == 'LWB':\n        val = 'D'\n        return val\n    \n    else:\n        return val\n        ","6f156409":"data['Position'] = data['Position'].apply(position_simplifier)\ndata['Position'].value_counts()","113b7c04":"df_nations = data.groupby(by='Nationality').size().reset_index()\ndf_nations.columns = ['Nation', 'Count']","71bccb4d":"df_nations[(df_nations['Nation'] == 'England') | (df_nations['Nation'] == 'Wales') \n           | (df_nations['Nation'] == 'Scotland') | (df_nations['Nation'] == 'Northern Ireland') ]","8b005dc3":"df_temp = pd.DataFrame(data= [['United Kingdom', 2148]], columns=['Nation', 'Count'])\ndf_nations = df_nations.append(df_temp, ignore_index=True)\ndf_nations.tail()","a2965ad0":"trace2 = dict(type='choropleth',\n              locations=df_nations['Nation'],\n              z=df_nations['Count'],\n              locationmode='country names',\n              colorscale='Portland'\n             )\n\nlayout = go.Layout(title='<b>Number of Players in each Country<\/b>',\n                   geo=dict(showocean=True,\n                            oceancolor='#AEDFDF',\n                            projection=dict(type='natural earth'),\n                        )\n                  )\n\nfig = go.Figure(data=[trace2], layout=layout)\npy.iplot(fig)","3940a9c3":"trace1 = go.Histogram(x=data['Age'], nbinsx=55, opacity=0.7)\n\nlayout = go.Layout(title='<b>Players Age Distribution<b>',\n                   xaxis=dict(title='<b><i>Age<\/b><\/i>'),\n                   yaxis=dict(title='<b><i>Count<\/b><\/i>'),\n                  )\n\nfig = go.Figure(data=[trace1], layout=layout)\npy.iplot(fig)","c15848d2":"fig = tools.make_subplots(rows=1, cols=2)\n\ntrace7a = go.Histogram(x=data['Height in Cms'], nbinsx=25, opacity=0.7, name='Height in cms')\ntrace7b = go.Histogram(x=data['Weight in Pounds'], nbinsx=30, opacity=0.7, name='Weight in Pounds')\n\nfig.append_trace(trace7a, 1,1)\nfig.append_trace(trace7b, 1,2)\n\nfig['layout'].update(title='<b>Height & Weight Distribution<\/b>', \\\n                     xaxis=dict(automargin=True),\n                     yaxis=dict(title='<b><i>Count<\/b><\/i>')\n                    )\npy.iplot(fig)","78b261fd":"trace6 = go.Pie(values=data['Position'].value_counts().values,\n                labels=data['Position'].value_counts().index.values,\n                hole=0.3\n               )\n \n\nlayout = go.Layout(title='<b>Distribution of Players Position-Wise<\/b>')\n\nfig = go.Figure(data=[trace6], layout=layout)\npy.iplot(fig)","20768c4d":"trace3 = go.Pie(values=data['Preferred Foot'].value_counts().values,\n                 labels=data['Preferred Foot'].value_counts().index.values,\n                 hole=0.3\n                )\n \n\nlayout = go.Layout(title='<b>Preferred Foot<\/b>')\n\nfig = go.Figure(data=[trace3], layout=layout)\npy.iplot(fig)","edb81ea4":"trace4 = go.Violin(x=data['Work Rate'],\n                y=data['Overall']\n               )\n\nlayout = go.Layout(title='<b>Work Rate vs Overall<\/b>',\n                   xaxis=dict(title='<b><i>Work Rate<\/b><\/i>'),\n                   yaxis=dict(title='<b><i>Overall<\/b><\/i>')\n                  )\n\nfig = go.Figure(data=[trace4], layout=layout)\npy.iplot(fig)","97e2ab96":"#We are choosing 6 attributes here. We are grouping the data by Position and finding the average of our 6 attributes.\ndf_skills = data.groupby(by='Position')['Crossing', 'Finishing', 'FKAccuracy', \n                            'StandingTackle', 'Marking', 'Interceptions'].mean().reset_index()","8cc47056":"trace5a = go.Scatterpolar(theta=['Crossing', 'Finishing', 'FKAccuracy', \n                                 'StandingTackle', 'Marking', 'Interceptions',\n                                 'Crossing'\n                                ],\n                          r=df_skills[df_skills['Position'] == 'F'][['Crossing', 'Finishing', 'FKAccuracy', \n                                                                     'StandingTackle', 'Marking', 'Interceptions',\n                                                                     'Crossing'\n                                                                    ]].values[0],\n                          fill='toself',\n                          name='Forwards'\n                         )\n\ntrace5b = go.Scatterpolar(theta=['Crossing', 'Finishing', 'FKAccuracy', \n                                 'StandingTackle', 'Marking', 'Interceptions',\n                                 'Crossing'\n                                ],\n                          r=df_skills[df_skills['Position'] == 'M'][['Crossing', 'Finishing', 'FKAccuracy', \n                                                                     'StandingTackle', 'Marking', 'Interceptions',\n                                                                     'Crossing'\n                                                                    ]].values[0],\n                          fill='toself',\n                          name='Midfielders'\n                         )\n\ntrace5c = go.Scatterpolar(theta=['Crossing', 'Finishing', 'FKAccuracy', \n                                 'StandingTackle', 'Marking', 'Interceptions',\n                                 'Crossing'\n                                ],\n                          r=df_skills[df_skills['Position'] == 'D'][['Crossing', 'Finishing', 'FKAccuracy', \n                                                                     'StandingTackle', 'Marking', 'Interceptions',\n                                                                     'Crossing'\n                                                                    ]].values[0],\n                          fill='toself',\n                          name='Defenders'\n                         )\n\n\ntrace5d = go.Scatterpolar(theta=['Crossing', 'Finishing', 'FKAccuracy', \n                                 'StandingTackle', 'Marking', 'Interceptions',\n                                 'Crossing'\n                                ],\n                          r=df_skills[df_skills['Position'] == 'GK'][['Crossing', 'Finishing', 'FKAccuracy', \n                                                                     'StandingTackle', 'Marking', 'Interceptions',\n                                                                     'Crossing'\n                                                                    ]].values[0],\n                          fill='toself',\n                          name='Goal Keepers'\n                         )\n\nlayout = go.Layout(polar=dict(radialaxis=dict(visible=True,\n                                              range=[0, 100]\n                                             )\n                             \n                             ),\n                   showlegend=True,\n                   title='<b>Attributes by Position<\/b>'\n                  )\n\nfig = go.Figure(data=[trace5a, trace5b, trace5c, trace5d], layout=layout)\npy.iplot(fig)","496a5592":"from sklearn.linear_model import LogisticRegression, LinearRegression\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, mean_squared_error, r2_score","60aee6bf":"#Transforming categorical feature into numeric.\n#Goal Keeper = 0\n#Defender = 1\n#Midfielder = 2\n#Forward = 3\ndef pos_numeric(val):\n    if val == 'GK':\n        return 0\n    elif val == 'D':\n        return 1\n    elif val == 'M':\n        return 2\n    else:\n        return 3\n    \ndata['Position'] = data['Position'].apply(pos_numeric)","e198207b":"df_pos = data.copy()\n\n#Dropping unnecessary columns\ndf_pos.drop(columns=['Name', 'Nationality', 'Club'], inplace=True)","fcf8d702":"X = df_pos.drop(columns=['Position'])\nX = pd.get_dummies(X)\ny = df_pos['Position']","87a8244a":"#Splitting dataset into train and test sets.\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","fe4c3c83":"logmodel = LogisticRegression()","7dfe04ab":"logmodel.fit(X_train, y_train)","f35271c3":"prediction = logmodel.predict(X_test)","e034ada1":"print(classification_report(y_test, prediction))\nprint('\\n')\nprint(confusion_matrix(y_test, prediction))\nprint('\\n')\nprint('Accuracy Score: ', accuracy_score(y_test, prediction))","5cc40f18":"df_pos.corr().abs()['Position'].sort_values(ascending=False)","8350ad39":"df_pos['Frw'] = (df_pos['RF'] + df_pos['ST'] + df_pos['LF'] + df_pos['RS'] + df_pos['LS'] + df_pos['CF']) \/ 6\n\ndf_pos['Mid'] = (df_pos['LW'] + df_pos['RCM'] + df_pos['LCM'] + df_pos['LDM'] + df_pos['CAM'] + df_pos['CDM'] + \\\n                df_pos['RM'] + df_pos['LAM'] + df_pos['LM'] + df_pos['RDM'] + df_pos['RW'] + df_pos['CM'] + df_pos['RAM'])\\\n                \/13\n\ndf_pos['Def'] = (df_pos['RCB'] + df_pos['CB'] + df_pos['LCB'] + df_pos['LB'] + df_pos['RB'] + df_pos['RWB']\\\n                 + df_pos['LWB']) \/ 7\n\ndf_pos['Gk'] = (df_pos['GKDiving'] + df_pos['GKHandling'] + df_pos['GKKicking'] + df_pos['GKPositioning']\\\n               + df_pos['GKReflexes']) \/ 5\n\ndf_pos.drop(columns=['RF', 'ST', 'LW', 'RCM', 'LF', 'RS', 'RCB', 'LCM', 'CB', 'LDM', 'CAM', 'CDM',\n                     'LS', 'LCB', 'RM', 'LAM', 'LM', 'LB', 'RDM', 'RW', 'CM', 'RB', 'RAM', 'CF', 'RWB', 'LWB',\n                     'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes'\n                    ], inplace=True)","fed508bf":"print('Correlation with Position: ', df_pos.corr().abs()['Position'].sort_values(ascending=False).index, '\\n')\nprint('Categorical columns in dataset: ', df_pos.select_dtypes(include=object).columns, '\\n')\nprint('Number of features in dataset: ', len(df_pos.columns))","73c79346":"#df_pos = data.copy()\n#Dropping Preferred Foot column too as it does not play a significant role in classifying the position of the player. \ndf_pos.drop(columns=['StandingTackle', 'Potential', 'Age', 'Value in Pounds', \n                     'Jumping', 'Jersey Number', 'Wage in Pounds', 'Overall', 'Marking',\n                     'International Reputation', 'Strength', 'Preferred Foot'], inplace=True)","915f9055":"X = df_pos.drop(columns=['Position'])\nX = pd.get_dummies(X)\ny = df_pos['Position']","6e9943dc":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","699bea20":"logmodel.fit(X_train, y_train)","a81ec8db":"prediction = logmodel.predict(X_test)","1d377018":"print(classification_report(y_test, prediction))\nprint('\\n')\nprint(confusion_matrix(y_test, prediction))\nprint('\\n')\nprint('Accuracy Score: ', accuracy_score(y_test, prediction))","339464e1":"sns.set_style(style='darkgrid')\nplt.rcParams['figure.figsize'] = 12, 8","841b12b8":"sns.scatterplot(data=df_pos, x='Finishing', y='Positioning', hue='Position', palette='viridis')\nplt.show()","8ed3a6f5":"df_pos = df_pos[~((df_pos['Position'] == 1) & (df_pos['Finishing'] > 30) & (df_pos['Positioning'] < 60))]\ndf_pos = df_pos[~((df_pos['Position'] == 2) & (df_pos['Finishing'] > 60) & (df_pos['Positioning'] < 80))]\ndf_pos = df_pos[~((df_pos['Position'] == 3) & (df_pos['Finishing'] < 45))]\ndf_pos = df_pos[~((df_pos['Position'] == 3) & (df_pos['Finishing'] < 60) & (df_pos['Positioning'] > 70))]\ndf_pos = df_pos[~((df_pos['Position'] == 2) & (df_pos['Finishing'] > 65) & (df_pos['Positioning'] > 70))]","effbf653":"sns.scatterplot(data=df_pos, x='Finishing', y='Positioning', hue='Position', palette='viridis')\nplt.show()","94650f73":"X = df_pos.drop(columns=['Position'])\nX = pd.get_dummies(X)\ny = df_pos['Position']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\nlogmodel.fit(X_train, y_train)","966e97e4":"prediction = logmodel.predict(X_test)","647e9292":"print(classification_report(y_test, prediction))\nprint('\\n')\nprint(confusion_matrix(y_test, prediction))\nprint('\\n')\nprint('Accuracy Score: ', accuracy_score(y_test, prediction))","f00c448e":"gbclassifier = GradientBoostingClassifier()","1b5710db":"gbclassifier.fit(X_train, y_train)","695d7627":"prediction = gbclassifier.predict(X_test)","584d8076":"print(classification_report(y_test, prediction))\nprint('\\n')\nprint(confusion_matrix(y_test, prediction))\nprint('\\n')\nprint('Accuracy Score: ', accuracy_score(y_test, prediction))","0b6c0536":"df_ovr = data.copy()\ndf_ovr.drop(columns=['Name', 'Nationality', 'Club'], inplace=True)","d87527b6":"X = df_ovr.drop(columns=['Overall'])\nX = pd.get_dummies(X)\ny = df_ovr['Overall']","9ba35f06":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","4710b165":"linmodel = LinearRegression()","0aa4d758":"linmodel.fit(X_train, y_train)","4b07d1f0":"pred = linmodel.predict(X_test)","e3950491":"print('RMSE:', np.sqrt(mean_squared_error(y_test, pred)))\nprint('r^2 score: ', r2_score(y_test, pred))","9692f90a":"df_ovr.corr().abs()['Overall'].sort_values(ascending=False)","503e74db":"#Dropping Height in Cms because of a very low correlation with Overall.\n#Not dropping GK because it would be one of the features to predict Overall for goalkeepers.\ndf_ovr.drop(columns=['Height in Cms'], inplace=True)","80cb3e70":"sns.scatterplot(data=df_ovr, x='Reactions', y='Overall')\nplt.show()","08aef678":"df_ovr = df_ovr[~((df_ovr['Reactions'] < 25))]\ndf_ovr = df_ovr[~((df_ovr['Reactions'] < 35) & (df_ovr['Overall'] > 55))]\ndf_ovr = df_ovr[~((df_ovr['Reactions'] < 35) & (df_ovr['Overall'] > 55))]\ndf_ovr = df_ovr[~((df_ovr['Reactions'] > 62) & (df_ovr['Overall'] < 55) & (df_ovr['Reactions'] < 70))]\n\ndf_ovr.drop(df_ovr[(df_ovr['Reactions'] == 73) & (df_ovr['Overall'] == 55)].index, inplace=True)\ndf_ovr.drop(df_ovr[(df_ovr['Reactions'] == 74) & (df_ovr['Overall'] == 59)].index, inplace=True)\ndf_ovr.drop(df_ovr[(df_ovr['Reactions'] == 79) & (df_ovr['Overall'] == 64)].index, inplace=True)\ndf_ovr.drop(df_ovr[(df_ovr['Reactions'] == 82) & (df_ovr['Overall'] == 68)].index, inplace=True)\ndf_ovr.drop(df_ovr[(df_ovr['Reactions'] == 83) & (df_ovr['Overall'] == 70)].index, inplace=True)\ndf_ovr.drop(df_ovr[(df_ovr['Reactions'] == 84) & (df_ovr['Overall'] == 69)].index, inplace=True)","99c2e93c":"sns.scatterplot(data=df_ovr, x='Reactions', y='Overall')\nplt.show()","5736ca99":"X = df_ovr.drop(columns=['Overall'])\nX = pd.get_dummies(X)\ny = df_ovr['Overall']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","d8d85103":"linmodel.fit(X_train, y_train)","393da4d9":"pred = linmodel.predict(X_test)\nprint('RMSE:', np.sqrt(mean_squared_error(y_test, pred)))\nprint('r^2 score: ', r2_score(y_test, pred))","76136646":"X = df_ovr.drop(columns=['Overall'])\nX = pd.get_dummies(X)\ny = df_ovr['Overall']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","60a19d4f":"gbregressor = GradientBoostingRegressor()","587c0b1b":"gbregressor.fit(X_train, y_train)","55f9f014":"pred = gbregressor.predict(X_test)","0c869d29":"pred = gbregressor.predict(X_test)\nprint('RMSE:', np.sqrt(mean_squared_error(y_test, pred)))\nprint('r^2 score: ', r2_score(y_test, pred))","19ebb8cd":"After removing outliers.<br><br><br>","e01ea5e1":"Notice how similar features such as LS, RS and CAM, LAM, RAM and so on have similar correlation. Let us combine such features into individual single features.","37513ad2":"<br><br><br>","866e22af":"Adding values of England, Northern Ireland, Scotland and Wales under United Kingdom as our choropleth map considers the following countries as a whole which is included in the United Kingdom.<br>\n\nHover over the map to confirm the same.","2158d7f5":"----","6ca3708f":"FIFA 19 is a football simulation video game developed by EA Vancouver as part of Electronic Arts' FIFA series. <br><br>\n\nIt was announced on 6th June 2018 in a press conference and was released on 28th September 2018 for PlayStation 3, PlayStation 4, Xbox 360, Xbox One, Nintendo Switch, and Microsoft Windows. <br><br>\n\nIt is the 26th installment in the FIFA series. The game features the UEFA club competitions for the first time, including the UEFA Champions League. <br><br>\n\nThis notebook was created to provide information about various aspects of players using interactive plotly visualizations. It also contains machine learning models which is used to classify players based on their position and predict the Overall rating of a player based on the features present in the dataset.<br><br>\n\nThe FIFA 19 dataset contains over 18,000 rows with 89 columns. Dataset can be found here - https:\/\/www.kaggle.com\/karangadiya\/fifa19\n<br><br><br>\n\n---","767c1cb4":"<br><br>\n**Age Distribution of Players**","717fd6e5":"### Classification based on Position","b03390ad":"### Visualizations\nPlotting a few visualizations which give us more information about the dataset.","c3e77323":"No surprise with Defenders scoring the highest in defending attributes such as StandingTackle, Marking and Interceptions.<br><br>\nMidfielders seem like all rounders. They are good at everything but excel in Crossing and FKAccuracy.<br><br>\nForwards' main job is to score goals. Hence, it is expected they score the highest in Finishing.<br><br><br><br>\n","e4a1651c":"Converted to numeric.\n<br><br>","3c92841e":"<br><br>\n### Read the data","426f4a83":"**Linear Regression Model**","6f3e2444":"**Logisitic Regression model**","1a23c155":"Looks like the above features are not set for Goalkeepers. We cannot drop them as it would remove all the goal keepers from our dataset. Instead we will fill these values with 0.","a57a3a15":"A huge improvement using the Gradient Boosting Regressor.<br>\n\nRMSE Score comes down to 0.6868, while r2_score is very close to 1.","1e009551":"**Does Overall depend on Work Rate?**","25eb7d5e":"### Converting categorical features to appropriate numerical features","e7992578":"**Logistic Regression model after dropping lower correlated features**","af953ef8":"Just by dropping a few columns and without any fine tuning, the Logisitic Regression model gets a pretty good accuracy score.<br><br>\nNotice the 100% accuracy while classifying Goal Keepers. This is expected as the features such as LS, RS, CF, etc. is equal to 0 for all the goal keepers in our dataset.<br><br>\nLet us try to increase the accuracy in classifying other positions.\n<br><br><br><br>","6298f786":"**Gradient Boosting Regressor**","7868d0bf":"<br>","d3dfc496":"Let us simplify the above positions into 4 simple categories of - **F**orwards, **M**idfielders, **D**efenders and **G**oal**K**eepers","80a3231d":"Value and Wage have been converted.\n<br><br><br>","ca1be730":"There are still several outliers present but if we try and remove them, it might lead to overfitting.<br><br>\nLet us now test our model after removing outliers.","a1f6dc84":"Still a lot of missing values to deal with. Let us fill in these missing values appropriately and\/or drop columns which are not required. <br><br>","7e49cf17":"<br><br>\n### Dealing with unnecessary features and missing values","daafae71":"From the above visualization, you can notice several outliers. Let us remove them.","7dcca2f4":"**Player distribution across Countries**","ac790ae1":"Majority of the players height lie in the range of 175cms to 190cms.<br>\nMajority of the players weight lie in the range of 150lbs to 174lbs.<br><br><br><br>","0ecccf46":"**Gradient Boosting Classifier**","2669d583":"The Linear Regression model does slightly better than the previous model. <br><br>\nRMSE Score comes down while there is asmall increase in r2_score. <br><br><br>","f86b07df":"Majority of the players prefer their Right foot.<br><br>\nRight Foot = 13,938<br>\nLeft Foot = 4,209\n\n<br><br><br><br>","d55221ce":"From the above visualization, it is clear that players have almost similar Overall ratings across different Work Rates.\n<br><br><br><br>","edf39037":"**Correlation and Outliers**","aef639af":"Most players age lie in the range of 19 to 29.<br><br><br>","735fbe56":"**Linear Regression Model**","f0daacbf":"We have a dataset with 18,207 rows which includes 45 categorical features and 44 numerical features.","d29b1888":"**Removing outliers**","14174a00":"**Dropping columns with lower correlation**","d3cfbf7b":"**Player Attributes based on Position**","bf356f47":"### Import required libraries","1b112d2f":"<img src='https:\/\/i0.wp.com\/glitched.africa\/wp-content\/uploads\/2019\/02\/blog-fifa-19-cover-new-big.jpg?fit=1920%2C1080&ssl=1' \/>","1e51b179":"**Logistic Regression Model**","79d6c046":"**Are the players Right Footed  or Left Footed?**","408d3e45":"Number of players in each position -\n1. Midfielders = 7589\n2. Defenders = 5866\n3. Forwards = 2667\n4. Goal Keepers = 2025\n<br><br><br>","f7eb8c1c":"**Import required libraries**","6f0b05b5":"An r2_score of 0.9364 is good where 1.0 is the best possible r2_score.<br><br>\nLet us see if we can better this.<br><br><br>","933943eb":"**Correlation between Position and other features**","46744c14":"<br><br><br>\nFor the remaining columns - **Work Rate, Body Type, Position**, we will not be converting them to numerical features right now. Here, we ensure these features have appropriate values and they will be converted to numerical features when feeding this data to our machine learning models.","00f71ac5":"The Gradient Boosting Classifier performs much better than the Logistic Regression model as expected and gets a very high accuracy score.\n<br><br><br>\n","45f50d70":"The overall accuracy of the model increases. Our model is now able to better classify Midfielders and Forwards.<br><br>\nLet us feed the above data into a different classification model and see how it performs.<br><br><br><br>","9b9fd140":"**Player Height and Weight distibution**","cd956401":"Our dataset does not contain any missing values.<br><br><br>","3b2c9775":"**Number of players in each Position**","636574f1":"<br>\n### Predicting *Overall* from the dataset.","29409135":"By combining certain features, we have brought down the nubmber of features from 75 to 48.<br><br><br>","d707a55c":"The new Logisitic Regression model does a better job than the previous model. <br><br>\nIt is able to better classify Defenders and Midfielders. However, accuracy of classifying Forwards goes down.\n<br><br><br><br><br>","993909e9":"Most players are from European and South American countries.<br><br>\nTop 5 countries -\n1. Engalnd - 1657\n2. Germany - 1195\n3. Spain - 1071\n4. Argentina - 936\n5. France - 911\n<br><br>\nHover over the red spot on the map to get the value of United Kingdom which includes England, Scotland, Northern Ireland and Wales.\n<br><br><br>"}}