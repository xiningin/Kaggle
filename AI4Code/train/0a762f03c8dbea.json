{"cell_type":{"3a8d1430":"code","e83bafd7":"code","0ab9dc2e":"code","ce3cc8a2":"code","92e5b1c3":"code","791b5272":"code","26b0c524":"code","6d2e7b0b":"code","4a58b05a":"code","ca18e5b7":"code","bb248788":"markdown","d1dffdc3":"markdown","a31991f7":"markdown","8f9e3c71":"markdown","5223d284":"markdown","25d63f96":"markdown","31686b79":"markdown","7e37be22":"markdown","fd552135":"markdown","1a315cf8":"markdown","3408388e":"markdown","25876ab8":"markdown","4603c22f":"markdown","4cbb0277":"markdown"},"source":{"3a8d1430":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error","e83bafd7":"# Function for training\ndef fit(x, y, space_val = 5):\n    try:\n        # To get the column names\n        x_col_name = X_train.name\n        y_col_name = y_train.name\n        # To create data frame on given training data with column names\n        df = pd.DataFrame({x_col_name:x, y_col_name:y})\n        # To get minimum and maximum value of training data\n        x_min = float(x.min())\n        x_max = float(x.max())\n        # Calculate number of spaces based on number of data\n        space = (len(x)\/\/space_val) + 1\n        # Variable to have list of evenly spaced numbers between X_min and X_max with space (Total number of spaces we want)\n        x_spaces = list(np.linspace(x_min, x_max, space))\n        # X_mean_vals list will contain average of X_train data which will lie between each space.\n        x_mean_vals = []\n        # y_mean_vals list will contain average of y_train data related to X_train for each space.\n        y_mean_vals = []\n        # Percentage_vals will contain average of percentage of X to y for data (X_train to y_train) which lied between each space.\n        percentage_vals = []\n        # Overall percentage will contain mean of percentage of X to y for all data (X_train to y_train) which will be used further\n        # A1 B1 (overall_percentage)\n        overall_percentage = []\n        \n        # For loop to get particular data frame each time where X_train lie between each space.\n        # B2 (for loop)\n        for i in range(1, len(x_spaces)):\n            if i == 1:\n                # B3 (.0000000001)\n                dd = df[df[x_col_name] < x_spaces[i]+.0000000001]\n                \n            elif i == len(x_spaces) - 1:\n                dd = df[df[x_col_name] > x_spaces[i - 1]]\n                \n            else:\n                dd = df[(df[x_col_name] < x_spaces[i]+.0000000001) & (df[x_col_name] > x_spaces[i-1])]\n\n            # List to get X_train values lie in taken dataframe(dd).\n            x_1 = []\n            # List to get y_train values lie in taken dataframe(dd).\n            y_1 = []\n            # List to get percentage difference for each X_train value to y_train value lie in taken dataframe(dd).\n            percent_list = []\n            \n            # For loop to get X_train value, y_train value, percentage difference for each data (X_train to y_train) in taken dataframe(dd).\n            for k in list(dd.index):\n                x_value = dd.loc[k, x_col_name]\n                y_value = dd.loc[k, y_col_name]\n                x_1.append(x_value)\n                y_1.append(y_value)\n                # Calculate percentage difference for each data (X_train to y_train) in taken dataframe(dd).\n                # B4 (perc calculation)\n                perc = (y_value * 100)\/x_value\n                percent_list.append(perc)\n                # A1 (overall_percentage)\n                overall_percentage.append(perc)\n            \n            # If condition to append mean values of X_train, y_train, percentage difference from the taken dataframe(dd) only if the data present.\n            if len(x_1) > 0:\n                percentage_vals.append(np.mean(percent_list))\n                x_mean_vals.append(np.mean(x_1))\n                y_mean_vals.append(np.mean(y_1))\n                \n            # Else condition to append string value \u2018nan\u2019 if there is no data present in taken dataframe(dd).\n            # It will replace further.\n            # A5 B5 ('nan')\n            else:\n                percentage_vals.append('nan')\n                x_mean_vals.append('nan')\n                y_mean_vals.append('nan')\n\n                \n        # List to get indexes of starting \u2018nan\u2019 values for consecutive \u2018nan\u2019 or a single \u2018nan\u2019.\n        start = []\n        # List to get indexes of ending \u2018nan\u2019 +1 values for consecutive \u2018nan\u2019 or a single \u2018nan\u2019.\n        end = []\n        \n        # For loop to get start index and end index +1 of \u2018nan\u2019.\n        # It will be useful to replace null values (\u2018nan\u2019) further.\n        # --A5 (getting index using 'nan')\n        # A6 (start, end)\n        for i in range(len(x_mean_vals)):\n            if x_mean_vals[i] == 'nan':\n                \n                if x_mean_vals[i - 1] == 'nan':\n                    pass\n                \n                else:\n                    start.append(i)\n                    \n            else:\n                if x_mean_vals[i - 1] == 'nan':\n                    end.append(i)\n                    \n                    \n        # For loop to replace \u2018nan\u2019 with related value.\n        # --A5 ('nan' replaced)\n        # --A6 ('nan' replaced with the use of start and end)\n        # B7 (for loop)\n        if len(start) > 0:\n            for i in range(len(start)):\n                for j in range(start[i], end[i]):\n                    x_mean_vals[j] = (x_mean_vals[start[i] - 1] + x_mean_vals[end[i]])\/2\n                    y_mean_vals[j] = (y_mean_vals[start[i] - 1] + y_mean_vals[end[i]])\/2\n                    percentage_vals[j] = (percentage_vals[start[i] - 1] + percentage_vals[end[i]])\/2\n\n        # Return \n        # To plot: x_mean_vals, y_mean_vals\n        # To predict: percentage vals\n        # X_spaces: used to find X_test data lie in which space\n        # 1.average(Overall percentage): used to predict \n        # 2.if X_test data is less than minimum of X_train data (X_test < X_min (train)) or \n        # 3.X_test data is greater than maximum of X_train data (X_test > X_max (train)).  \n        # 4.ie if the test data does not lie in spaces it uses overall percentage to predict output.\n        # A8 B8 (return)\n        return x_mean_vals, y_mean_vals, percentage_vals, x_spaces, np.mean(overall_percentage)\n    \n    except Exception:\n        print('Kindly pass pandas core series which taken from the pandas dataframe')","0ab9dc2e":"# Pass data through defined function (fit) and get the output. \nX_mean_values, y_mean_values, percentage_values, x_spaces, total_mean_percentage = fit(X_train, y_train)","ce3cc8a2":"# Function for testing\ndef predict(x, x_spaces, percentage_vals, tot_mean_perc):\n    # To store predicted values.\n    predicted = []\n    \n    try:\n        # --A8 (x_spaces used)\n        for i in x:\n            # --A1, --A8 (overall_percentage used)\n            # B9 (if)\n            if (i < x_spaces[0]) or (i == x_spaces[0]) or (i > x_spaces[-1]):\n                predicted.append((tot_mean_perc * i)\/100)\n            \n            # --A8 (percentage_vals used)\n            # B10\n            else:\n                for j in range(len(x_spaces)-1):\n                    if (i > x_spaces[j]) & (i < x_spaces[j+1]) or(i == x_spaces[j+1]):\n                        predicted.append((i * percentage_vals[j])\/100)\n                        \n        # return predicted output list\n        return predicted\n    \n    except TypeError:\n        print('Kindly pass pandas core series which taken from the pandas dataframe to fit')","92e5b1c3":"# Pass data through defined function (predict) and get the output. \npredict_output = predict(X_test, x_spaces, percentage_values, total_mean_percentage)","791b5272":"# Print statement to print root mean squared error.\nprint(np.sqrt(mean_squared_error(y_test, predict_output)))","26b0c524":"# It may look like this if we try to plot regression line.\n# Assumption\n# --A8 (X_mean_vals, y_mean_vals used to plot)\ndef train_plot(x_mean_vals, y_mean_vals, x_data, y_data):\n    plt.figure(figsize=(12, 8))\n    plt.scatter(x_data, y_data, color = 'green', label = 'Training data')\n    plt.plot(x_mean_vals, y_mean_vals, color = 'blue', label = 'Regression line')\n    plt.title('Regression Plot', size = 15)\n    plt.legend()\n    plt.show()","6d2e7b0b":"# Pass data through defined function (train_plot).\ntrain_plot(X_mean_values, y_mean_values, X_train, y_train)","4a58b05a":"# To see the difference between actual and predicted output visually.\n# B11\ndef plot_difference(x_test, y_test, x_test_1, y_predict):\n    plt.figure(figsize = (12, 8))\n    plt.scatter(x_test, y_test, color = 'blue', alpha=.5, label = 'Original')\n    plt.scatter(x_test_1, y_predict, color = 'red', alpha=.5, label = 'Predicted')\n    plt.title('Difference between Actual and Predicted')\n    plt.legend()\n    plt.show()","ca18e5b7":"# Pass data through defined function (plot_difference).\nplot_difference(X_test, y_test, X_test, predict_output)","bb248788":"It won't follow a linear line as Linear regression, Because Mean of X and y values used to plot the line based on that particular linspace.","d1dffdc3":"<b>Alphanumeric used in comment!!<\/b>","a31991f7":"### Introduction","8f9e3c71":"\u2018A\u2019 series alphanumeric (example: A1, --A1, A2, --A2, A3, --A3\u2026) denotes the values, variables, list, function, etc., to easily identify where we derive and where we pass or use the same.\n\n1.If it started with \u2018A\u2019 (example: A1, A2, A3\u2026) then keep in mind we are going to use the same in upcoming using \u2018--\u2019 before the same\n<br>2.If it started with \u2018--\u2019 (example: --A1, --A2, --A3\u2026) then keep in mind we already derived or did something and pass or use the same here (vice versa of 1).","5223d284":"'B' series alphanumeric (example: B1, B2, B3\u2026) denotes they are shown visually in [regression_algorithm.pdf](https:\/\/github.com\/jacobjoe\/Own_ideas\/blob\/main\/model\/regression\/regression_algorithm.pdf) with the same alphanumeric values.","25d63f96":"### Plotting","31686b79":"### Packages need or used:","7e37be22":"# Regression Algorithm","fd552135":"### Training","1a315cf8":"### Testing","3408388e":"Hey! Thank you for viewing my algorithm. I built this algorithm based on percentage difference from Independent (X) to dependent (y). Here I created a [regression_algorithm.pdf](https:\/\/github.com\/jacobjoe\/Own_ideas\/blob\/main\/model\/regression\/regression_algorithm.pdf), which will help you to understand the step by step procedure numerically as well as visually.","25876ab8":"Thank you so much for viewed my algorithm. I used my algorithm, fit, and predict output for some data and compared with Linear regression. Here is the [output](https:\/\/github.com\/jacobjoe\/Own_ideas\/tree\/main\/model\/regression\/comparison)","4603c22f":"Alphanumeric used to denote the existing values used or the value which will be used further with same alphanumeric values (for easy understanding) example: A1, B1, A2, B2\u2026","4cbb0277":"---"}}