{"cell_type":{"eb0c6cd5":"code","44edeb41":"code","145afc40":"code","187aa0cf":"code","34ddd8d7":"code","a692e708":"code","2224c7d2":"code","028aa696":"code","372d696b":"code","a1d45894":"code","b156fd9f":"code","0b1c904c":"code","65478f9b":"code","9909cecf":"code","9dbf2c08":"code","d5610b73":"code","0065e773":"code","f2c0a378":"code","1f754fb1":"code","689993cb":"code","634d10e3":"markdown","10fdd924":"markdown","5db35d3c":"markdown","99e4ee4a":"markdown","b92aa381":"markdown","201ffa9c":"markdown","e0bd6e57":"markdown","402f8e97":"markdown","fa3de8f1":"markdown"},"source":{"eb0c6cd5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","44edeb41":"import matplotlib.pyplot as plt\nimport seaborn as sns","145afc40":"dataset = pd.read_csv('..\/input\/nutrition-facts\/menu.csv')\ndataset.head()","187aa0cf":"calories_data = dataset.iloc[:,0:5]\ncalories_data['Total Calories'] = calories_data['Calories']+calories_data['Calories from Fat']\ncalories_by_category = calories_data.groupby('Category').mean().sort_values(by='Total Calories')\ncalories_by_category","34ddd8d7":"calories_by_category.iloc[:,:2].plot(kind='bar', stacked=True)\nplt.title('Total Calories Average by Category')\nplt.ylabel('Total Calories')\nplt.show()","a692e708":"sandwich_data = dataset[dataset['Item'].str.contains('Sandwich')]\nsandwich_data = sandwich_data.iloc[:,[1,6,8,11,13,15,17,20,21,22,23]]\nsandwich_data['Total Daily Value'] = sandwich_data.sum(axis=1)\nsandwich_data['Chicken Type'] = sandwich_data['Item'].str.extract(\"(Crispy|Grilled)\")\nsandwich_data['Item Type'] = sandwich_data['Item'].str.extract(\"(Classic|Club|Ranch|Bacon|Southern)\")\nsandwich_data","2224c7d2":"plt.figure(figsize=(10,7))\nsns.barplot(sandwich_data['Item Type'], sandwich_data['Total Daily Value'], hue=sandwich_data['Chicken Type'])\nplt.show()","028aa696":"plt.figure(figsize=(10,7))\nsns.heatmap(sandwich_data.iloc[:,1:11], cmap='Blues', annot=True, \n            yticklabels=sandwich_data['Item Type']+sandwich_data['Chicken Type'])\nplt.show()","372d696b":"egg_data = dataset[dataset['Item'].str.contains(\"with Egg\")]\negg_data = egg_data[egg_data['Item'].str.contains(\"Sausage McMuffin|Sausage Biscuit\")]\negg_data = egg_data.iloc[:,[1,6,8,11,13,15,17,20,21,22,23]]\negg_data['Total Daily Value'] = egg_data.sum(axis=1)\negg_data['Egg Type'] = egg_data['Item'].str.extract(\"(Egg Whites)\")\negg_data['Egg Type'].fillna('Whole Egg', axis=0, inplace=True)\negg_data['Item Type'] = egg_data['Item'].str.extract(\"(Sausage McMuffin|Regular Biscuit|Large Biscuit)\")\negg_data","a1d45894":"plt.figure(figsize=(10,7))\nsns.barplot(egg_data['Item Type'], egg_data['Total Daily Value'], hue=egg_data['Egg Type'])\nplt.show()","b156fd9f":"plt.figure(figsize=(10,7))\nsns.heatmap(egg_data.iloc[:,1:11], cmap='Blues', annot=True, \n            yticklabels=egg_data['Item'])\nplt.show()","0b1c904c":"least_number_data = dataset.iloc[:,[1,6,8,11,13,15,17,20,21,22,23]]\nleast_number_data.head()","65478f9b":"least_number_data.describe()","9909cecf":"max_index=[]\nfor i in least_number_data.describe().columns:\n    max_index.extend(least_number_data[least_number_data[i]==least_number_data.describe().loc['max',i]].index.tolist())","9dbf2c08":"index_set = set(max_index)\nindex_list = list(index_set)","d5610b73":"index_list","0065e773":"max_data = least_number_data.iloc[index_list,:]\nmax_data","f2c0a378":"from itertools import combinations\n\nfor i in combinations(max_data.index,6):\n    table = least_number_data.iloc[list(i),:]\n    l = []\n    for n in max_data.columns[1:]:\n        m = table[n].sum()\n        l.append(m)\n    if all(l>=100*np.ones(10)):\n        print(i)\n        break","1f754fb1":"minimum_menu_data = least_number_data.iloc[list(i),:]\nminimum_menu_data","689993cb":"for s in least_number_data.describe().columns:\n    print(s,': ', minimum_menu_data[s].sum())","634d10e3":"However, meeting one day\u2019s nutritional requirements from those items doesn\u2019t imply that the combination is healthy.\nWe must be aware of overnutrition in some nutrition like Fat, Cholesterol, etc. Here is the %Daily Value if we eat that 6 items in one day:","10fdd924":"How does the crispy type have a higher Total Daily Value?\nAs shown at the heatmap, the crispy type has a great difference at the **Total Fat** %Daily Value. \nWe can also make a judgement based on other daily values.","5db35d3c":"## Average Calories by Category","99e4ee4a":"If we order that six items, we can meet one day\u2019s nutritional requirements.","b92aa381":"## Grilled Chicken vs Crispy Chicken in Sandwich Menu","201ffa9c":"As shown at the heatmap, the great difference between whole egg and egg whites is in the **Cholesterol** %Daily Value. \nWe can conclude that egg yolks have a high cholesterol value.","e0bd6e57":"## Whole Egg vs Egg Whites","402f8e97":"We assume that \u201cmeet on day\u2019s nutritional requirement\u201d means all %Daily Value columns have a minimum of 100 for each Daily Value.","fa3de8f1":"## Possible Combination of Items to meet one day's nutritional requirements"}}