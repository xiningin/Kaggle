{"cell_type":{"02b5ff1c":"code","7bbab8b5":"code","eefdf7f4":"code","ce53f13f":"code","8108b8be":"markdown","520bcf6e":"markdown","1f6d011c":"markdown","daee0cee":"markdown","95edd726":"markdown"},"source":{"02b5ff1c":"import pandas as pd\nfrom pathlib import Path\n\ndata_dir = Path('..\/input\/tabular-playground-series-nov-2021\/')\n\ndf_train = pd.read_csv(\n    data_dir \/ \"train.csv\",\n    index_col='id'\n)\n\nFEATURES = df_train.columns[:-1]\nTARGET = df_train.columns[-1]\n\ndf_train.head()","7bbab8b5":"from xgboost import XGBClassifier\n\nX = df_train.loc[:, FEATURES]\ny = df_train.loc[:, TARGET]\n\nmodel = XGBClassifier(\n    max_depth=3,\n    subsample=0.5,\n    colsample_bytree=0.5,\n    n_jobs=-1,\n    # Uncomment if you want to use GPU. Recommended for whole training set.\n    #tree_method='gpu_hist',\n    random_state=0,\n)","eefdf7f4":"from sklearn.model_selection import cross_validate\nimport warnings \nwarnings.filterwarnings('ignore')\n\ndef score(X, y, model, cv):\n    scoring = [\"roc_auc\"]\n    scores = cross_validate(\n        model, X, y, scoring=scoring, cv=cv, return_train_score=True\n    )\n    scores = pd.DataFrame(scores).T\n    return scores.assign(\n        mean = lambda x: x.mean(axis=1),\n        std = lambda x: x.std(axis=1),\n    )\n\nscores = score(X, y, model, cv=2)\n\ndisplay(scores)","ce53f13f":"# Fit on full training set\nmodel.fit(X, y)\n\nX_test = pd.read_csv(data_dir \/ \"test.csv\", index_col='id')\n\n# Make predictions\ny_pred = pd.Series(\n    model.predict(X_test),\n    index=X_test.index,\n    name=TARGET,\n)\n\n# Create submission file\ny_pred.to_csv(\"submission.csv\")","8108b8be":"A \"neutral\" AUC is 0.5, so anything better than that means our model learned something useful.\n\n# Submission\n\nOur predictions are binary 0 and 1, but we're allowed to submit probabilities instead. In scikit-learn, we would use the predict_proba method instead of predict.","520bcf6e":"# Evaluation\n\nThe evaluation metric is AUC, which stands for \"area under curve\".","1f6d011c":"# References\n\nThank you to Ryan Holbrook, Alexis Cook and inversion for demonstrating how to use XGBoost in their [notebook](https:\/\/www.kaggle.com\/ryanholbrook\/getting-started-september-2021-tabular-playground\/notebook).","daee0cee":"The 'target' has binary outcomes: 0 for not spam and 1 for spam.\n\n# Model: XGBoost\n\nLet's try out a simple XGBoost model. This algorithm can handle missing values. We use XGBClassifier (instead of XGBRegressor, for instance), since this is a classification problem.","95edd726":"# Problem Statement\n\nIn this competition, we predict whether or not an email is spam.\n\nWe are going to cover the following steps:\n1. Import Libraries\n2. Model: XGBoost\n3. Evaluation\n4. Submission\n5. References\n\n# Import Libraries"}}