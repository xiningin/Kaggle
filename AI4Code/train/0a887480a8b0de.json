{"cell_type":{"63346c3e":"code","16803f97":"code","c494047d":"code","f163a914":"code","3d8bfc94":"code","8b3179de":"code","abb43b18":"code","5beb2385":"code","1f619e32":"code","aced8be0":"code","5f8716b5":"code","5d4bb53b":"code","a11fb290":"code","74ddc868":"code","9d4abdc4":"code","b40bfab0":"code","0ac6dcf6":"code","478201e2":"code","7bd9b238":"code","e5658438":"code","3654cb32":"code","bfd79146":"code","b813ce3b":"code","154e3350":"code","a3cc219d":"code","b497c7c2":"code","27796b3b":"code","746373a5":"code","561b7cdb":"code","490fe3fd":"code","cf736f12":"code","87bb4399":"code","b4261124":"code","656481bf":"code","a8e63d9b":"code","6865c19c":"code","c21a149d":"code","499e5e4b":"code","e4580d7b":"code","0ebd4e39":"code","fe107c70":"code","21f892d2":"code","25496c70":"code","bc4115a3":"code","4d9bd20e":"code","805c94d2":"markdown","cf37e978":"markdown","aca2078b":"markdown","3fce789f":"markdown","afa875bf":"markdown","df5894df":"markdown","20a3b6e1":"markdown","eb0349c0":"markdown","f871cfbb":"markdown","dea0fc05":"markdown","8c1b5499":"markdown","842ca058":"markdown"},"source":{"63346c3e":"# https:\/\/scikit-learn.org\/stable\/modules\/linear_model.html#logistic-regression\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport sklearn.metrics as metrics\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.preprocessing import PolynomialFeatures\n%matplotlib inline\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.datasets import make_regression\nfrom xgboost.sklearn import XGBRegressor\nfrom numpy import asarray\nfrom numpy import mean\nfrom numpy import std\nfrom sklearn.datasets import make_classification\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom matplotlib import pyplot\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.linear_model import ElasticNet","16803f97":"def regressionMetrics(y, yhat):\n    res = {'MSE': metrics.mean_squared_error(y,yhat),\n           'RMSE': np.sqrt(metrics.mean_squared_error(y,yhat)),\n           'MAE': metrics.mean_absolute_error(y,yhat),\n           'MSLE': metrics.mean_squared_log_error(y,yhat),\n           'RMSLE': np.sqrt(metrics.mean_squared_log_error(y,yhat))\n          }\n    return res","c494047d":"## example = test the model\ny = [2,4,6,8,10]\ny_hat = [2,3,4,5,30]","f163a914":"regressionMetrics(y, y_hat)","3d8bfc94":"df = pd.read_csv('..\/input\/test-dev-train\/dev_data.csv')\ndf.describe()","8b3179de":"X = df.drop(['sum_visitors'],axis=1).values # independant features\ny = df['sum_visitors']                     # dependant variable","abb43b18":"models_list = pd.DataFrame()","5beb2385":"mod1 = LinearRegression()\nmod1.fit(X,y)\n\npred1 = mod1.predict(X)","1f619e32":"regressionMetrics(y, pred1)","aced8be0":"model_dict = {'model': \"LinearRegression\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred1)}, ignore_index=True)\nmodels_list","5f8716b5":"sns.scatterplot(y, pred1)","5d4bb53b":"mod2 = DecisionTreeRegressor(random_state=1)\nmod2.fit(X,y)","a11fb290":"pred2 = mod2.predict(X)\nmodel_dict = {'model': \"Decision Tree\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred2)}, ignore_index=True)\nmodels_list","74ddc868":"sns.scatterplot(y, pred2)","9d4abdc4":"mod3 = RandomForestRegressor(random_state=1)\nmod3.fit(X,y)","b40bfab0":"pred3 = mod3.predict(X)\nmodel_dict = {'model': \"RandomForest\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred3)}, ignore_index=True)\nmodels_list","0ac6dcf6":"sns.scatterplot(y, pred3)","478201e2":"mod4 = AdaBoostRegressor(random_state=1)\nmod4.fit(X,y)","7bd9b238":"pred4 = mod4.predict(X)\nmodel_dict = {'model': \"ADABoost\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred4)}, ignore_index=True)\nmodels_list","e5658438":"sns.scatterplot(y, pred4)","3654cb32":"mod5 = GradientBoostingRegressor(random_state=1)\nmod5.fit(X,y)","bfd79146":"pred5 = mod5.predict(X)\nmodel_dict = {'model': \"GBM\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred5)}, ignore_index=True)\nmodels_list","b813ce3b":"sns.scatterplot(y, pred5)","154e3350":"mod6 = SVR()\nmod6.fit(X,y)","a3cc219d":"pred6 = mod6.predict(X)\nmodel_dict = {'model': \"SVR\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred6)}, ignore_index=True)\nmodels_list","b497c7c2":"sns.scatterplot(y, pred6)","27796b3b":"mod7 = RidgeClassifier()\nmod7.fit(X,y)","746373a5":"pred7 = mod7.predict(X)\nmodel_dict = {'model': \"Ridge\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred7)}, ignore_index=True)\nmodels_list","561b7cdb":"sns.scatterplot(y, pred7)","490fe3fd":"mod8 = SGDClassifier()\nmod8.fit(X,y)","cf736f12":"pred8 = mod8.predict(X)\nmodel_dict = {'model': \"SGD\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred8)}, ignore_index=True)\nmodels_list","87bb4399":"sns.scatterplot(y, pred8)","b4261124":"mod9 = ElasticNet(alpha=1.0, l1_ratio=0.5)\nmod9.fit(X,y)","656481bf":"pred9 = mod9.predict(X)\nmodel_dict = {'model': \"Elastic-Net\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred9)}, ignore_index=True)\nmodels_list","a8e63d9b":"sns.scatterplot(y, pred9)","6865c19c":"mod10 = linear_model.BayesianRidge()\nmod10.fit(X,y)","c21a149d":"pred10 = mod10.predict(X)\nmodel_dict = {'model': \"BayesianRidge\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y, pred10)}, ignore_index=True)\nmodels_list","499e5e4b":"#Mean Absolute Error - we will follow this metric\nmodels_list.sort_values('MAE')","e4580d7b":"#Root Mean Squared Error \nmodels_list.sort_values('RMSE')","0ebd4e39":"df_test = pd.read_csv('..\/input\/test-dev-train\/test_data.csv')\ndf_test.describe()","fe107c70":"X_test = df.drop(['sum_visitors'],axis=1).values # independant features\ny_test = df['sum_visitors']   ","21f892d2":"mod_winner = GradientBoostingRegressor(random_state=1)\nmod_winner.fit(X_test,y_test)","25496c70":"pred_winner = mod_winner.predict(X_test)\nmodel_dict = {'model': \"GBM_test\"}\nmodels_list = models_list.append({**model_dict, **regressionMetrics(y_test, pred_winner)}, ignore_index=True)\nmodels_list","bc4115a3":"sns.scatterplot(y_test, pred_winner)","4d9bd20e":"# model selection #Root Mean Squared Error \nmodels_list.sort_values('RMSE')","805c94d2":"# Elastic Net ","cf37e978":"## Model Selection","aca2078b":"### Gradient Boosting Machine (GBM)","3fce789f":"### Gradient Boosting Machine (GBM) - Winning model","afa875bf":"# Ridge","df5894df":"### Linear Regression","20a3b6e1":"### Support Vector Machine (SVM)","eb0349c0":"### Decision Tree","f871cfbb":"### BayesianRidge","dea0fc05":"### Adaptive Boosting (ADABoost)","8c1b5499":"### Random Forest","842ca058":"# Stochastic Gradient Descent Regression = SGD"}}