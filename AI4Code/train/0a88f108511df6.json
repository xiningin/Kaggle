{"cell_type":{"249184e4":"code","ac73852d":"code","60e8151b":"code","a1dbd0e5":"code","dd036d98":"code","86558ff7":"code","f1294f60":"code","84ca8f16":"code","008deff1":"code","1e2ca6c2":"code","530e5e0b":"code","78d85943":"code","3bced457":"code","eeecc8a1":"code","d28bd3ff":"code","de99a7c8":"code","a1bbed29":"code","68c8ca78":"code","d3e53f33":"code","38b540d9":"code","5c2964ec":"code","06936c79":"code","20d1a3a5":"code","dfe85657":"code","376e3c65":"code","eb91ed63":"code","c08562a8":"code","95fcf72d":"code","a5d339da":"code","7042fd31":"code","9faf1bb4":"code","c26ebf5f":"code","997e5e7c":"code","a235e555":"code","ef300f40":"code","afc483e1":"code","294de30b":"code","ae132e97":"code","35acbf1a":"code","96ea22f9":"code","5b3c9a41":"code","8092c2e4":"code","493b64ae":"code","7831347d":"code","533d2ac2":"code","1d18752f":"code","cdb19307":"code","15d21e0d":"code","be278301":"code","0bbac4f1":"code","9f80e204":"code","8ce0d9e8":"code","61cb65cd":"code","9dcdb874":"code","cdfab77d":"code","33cb12a8":"code","2942ccbd":"code","4201113c":"code","8b590252":"code","dc72046e":"code","222af171":"markdown","9db2685c":"markdown","72c12997":"markdown","06dc20e7":"markdown","7af51b16":"markdown","981055e6":"markdown","d74271cc":"markdown","60976acd":"markdown","c70cf65c":"markdown","c6d22d63":"markdown","0e6c19c3":"markdown","3cbf2db2":"markdown","b123fdc4":"markdown","438d8a9d":"markdown","df2bab11":"markdown","3abe3255":"markdown","92061116":"markdown","9668d330":"markdown","d475f919":"markdown","8d047fe9":"markdown","ea51c2e4":"markdown","903146dc":"markdown","2f1aebfa":"markdown","b9ff0aec":"markdown","4cd86bc7":"markdown","f327086a":"markdown","02e6e0a3":"markdown","4830503d":"markdown","9ad8cb2f":"markdown","60c03bf8":"markdown","9679d215":"markdown","7cfe540b":"markdown","c37615c5":"markdown","7ed581b1":"markdown","200ccb1d":"markdown","3d3c80f7":"markdown","9108b501":"markdown","28d0e397":"markdown","85255f82":"markdown","5f051f27":"markdown","6d6e96b1":"markdown","e75cfe9a":"markdown","223f1b7d":"markdown","477b9e6d":"markdown","57c0aa5c":"markdown","5b7906ac":"markdown","8de976ae":"markdown","93e690f1":"markdown","6c3f58c2":"markdown","416ff06d":"markdown","271a9c5f":"markdown","23e1f765":"markdown","ad8840ff":"markdown","4082720a":"markdown","a73a860e":"markdown","50715ebc":"markdown","bc922aa0":"markdown","c83d0efe":"markdown"},"source":{"249184e4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os as os\nimport re\nimport json\nimport datetime as dt\n%matplotlib inline\n","ac73852d":"# Load your data and print out a few lines. Perform operations to inspect data\n#   types and look for instances of missing or possibly errant data.\ncredits_df = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\nmovies_df = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\n","60e8151b":"credits_df.head()","a1dbd0e5":"movies_df.head()","dd036d98":"# changing the movies_df column name 'id' to 'movie_id'\nmovies_df_changed = movies_df.rename(columns = {'id':'movie_id'})\nmovies_df_changed.head()","86558ff7":"# merging the two csv data file into one file dataset\nmovies_credit = pd.merge(credits_df, movies_df_changed, on=['title', 'movie_id'], how='outer')\nmovies_credit.head()","f1294f60":"# 1.Saving the merged two file to a one csv file\nmovies_credit.to_csv('movies_credit.csv')","84ca8f16":"# 2.Taking a copy of the file for cleaning the data \nmovies_clean = movies_credit.copy()","008deff1":"movies_clean.shape","1e2ca6c2":"movies_clean.info()","530e5e0b":"movies_clean.describe()","78d85943":"movies_clean.duplicated().sum()","3bced457":"movies_clean.hist(figsize = (8,8))","eeecc8a1":"# fill Nan cells in columns with numerical values with the mean value.\nmovies_clean.budget = movies_clean.budget.replace(0,movies_clean.budget.mean())\nmovies_clean.popularity = movies_clean.popularity.replace('0', movies_clean.popularity.mean())\nmovies_clean.revenue = movies_clean.revenue.replace(0, movies_clean.revenue.mean())\nmovies_clean.runtime = movies_clean.runtime.replace('0', movies_clean.runtime.mean())\nmovies_clean.vote_average = movies_clean.vote_average.replace('0', movies_clean.vote_average.mean())\nmovies_clean.vote_count = movies_clean.vote_count.replace(0, movies_clean.vote_count.mean())","d28bd3ff":"# We need to remove the unused and unimportnat column like ('homepage')\nmovies_clean = movies_clean.drop('homepage', axis = 1)","de99a7c8":"# We need to remove the NaN cells from dataset\nmovies_clean.dropna(inplace=True)","a1bbed29":"# convert the dtype of column ('runtime') values to integer dtype\nmovies_clean.runtime = movies_clean.runtime.astype(int)","68c8ca78":"movies_clean.info()","d3e53f33":"movies_clean.shape","38b540d9":"# collect columns needed to be converted to json into one array\n# use a for loop to iterate over the array of columns to convert them\njson_columns = ['genres', 'cast', 'crew', 'keywords', 'production_companies', 'production_countries', 'spoken_languages'] \nfor column in json_columns:\n    movies_clean[column] = movies_clean[column].apply(json.loads)","5c2964ec":"# code a function to iterate over the contents of the crew column to capture the director name\n# use apply method to apply the function to the wanted column\ndef get_director(column):\n    for i in column:\n        if i['job'] == 'Director':\n            return i['name']\n    return np.nan\nmovies_clean['director'] = movies_clean['crew'].apply(get_director)\nmovies_clean.head()","06936c79":"# iterate over the columns and clean them from the unwanted charcters and spaces \nfor column in json_columns:\n    for index, i in zip(movies_clean.index, movies_clean[column]):\n        list_names = []\n        for j in range(len(i)):\n            list_names.append(i[j]['name'])\n            if len(list_names) >= 4:\n                break;\n        movies_clean.loc[index, column] = str(list_names)\n    movies_clean[column] = movies_clean[column].str.strip('[]').str.replace('\\'', \"\").str.replace(',', ' |')   ","20d1a3a5":"movies_clean.head()","dfe85657":"# save to csv file\nmovies_clean.to_csv('movies.csv')","376e3c65":"# Extract the year from column( release_date) using str.extract method and regular expression\nmovies_clean['year'] = movies_clean.release_date.str.extract('(\\d{4})')","eb91ed63":"movies_clean.to_csv('movies.csv')","c08562a8":"sns.set_style('darkgrid')","95fcf72d":"# Drama Movies\ndrama = movies_clean.query('genres == \"Drama\"')['year'].value_counts(ascending=True)\ndrama.plot(kind = 'bar',figsize=(16,16))\nplt.xlabel('Year', fontsize = 14)\nplt.ylabel('Movie_count', fontsize= 14)\nplt.title('Drama Over Years', fontsize=16)","a5d339da":"# Comedy Movies\ncomedy = movies_clean.query('genres == \"Comedy\"')['year'].value_counts(ascending=True)\ncomedy.plot(kind = 'bar',figsize=(16,16))\nplt.xlabel('Year', fontsize = 14)\nplt.ylabel('Movie_count', fontsize= 14)\nplt.title('Comedy Over Years', fontsize=16)","7042fd31":"# Romance Movies\nromance = movies_clean.query('genres == \"Romance\"')['year'].value_counts()\nromance.plot(kind = 'bar',figsize=(6,6))\nplt.xlabel('Year', fontsize = 14)\nplt.ylabel('Movie_count', fontsize= 14)\nplt.title('Romance Over Years', fontsize=16)","9faf1bb4":"# Adventure Movies\nadventure = movies_clean.query('genres == \"Adventure\"')['year'].value_counts()\nadventure.plot(kind = 'bar',figsize=(8,8))\nplt.xlabel('Year', fontsize = 14)\nplt.ylabel('Movie_count', fontsize= 14)\nplt.title('Adventure Over Years', fontsize=16)","c26ebf5f":"# Horror Movies\nhorror = movies_clean.query('genres == \"Horror\"')['year'].value_counts(ascending=True)\nhorror.plot(kind = 'bar',figsize=(10,10))\nplt.xlabel('Year', fontsize = 14)\nplt.ylabel('Movie_count', fontsize= 14)\nplt.title('Horror Over Years', fontsize=16)","997e5e7c":"# Crime Movies\ncrime = movies_clean.query('genres == \"Crime\"')['year'].value_counts()\ncrime.plot(kind = 'bar',figsize=(6,6))\nplt.xlabel('Year', fontsize = 14)\nplt.ylabel('Movie_count', fontsize= 14)\nplt.title('Crime Over Years', fontsize=16)","a235e555":"# Thriller Movies\nthriller = movies_clean.query('genres == \"Thriller\"')['year'].value_counts(ascending=True)\nthriller.plot(kind = 'bar',figsize=(8,8))\nplt.xlabel('Year', fontsize = 14)\nplt.ylabel('Movie_count', fontsize= 14)\nplt.title('Thriller Over Years', fontsize=16)","ef300f40":"#Family Movies\nfamily = movies_clean.query('genres == \"Family\"')['year'].value_counts()\nfamily.plot(kind = 'bar',figsize=(6,6))\nplt.xlabel('Year', fontsize = 14)\nplt.ylabel('Movie_count', fontsize= 14)\nplt.title('Family Over Years', fontsize=16)","afc483e1":"# Music Movies\nmusic = movies_clean.query('genres == \"Music\"')['year'].value_counts()\nmusic.plot(kind = 'bar',figsize=(6,6))\nplt.xlabel('Year', fontsize = 14)\nplt.ylabel('Music Over Years', fontsize=16)\nplt.title('Music Movies Over Years', fontsize=16)","294de30b":"# Animation Movies\nanimation = movies_clean.query('genres == \"Animation\"')['year'].value_counts()\nanimation.plot(kind = 'bar',figsize=(6,6))\nplt.xlabel('Year', fontsize = 14)\nplt.ylabel('Movie_count', fontsize= 14)\nplt.title('Animation Over Years', fontsize=16)","ae132e97":"# Action Movies\naction = movies_clean.query('genres == \"Action\"')['year'].value_counts(ascending=True)\naction.plot(kind = 'bar',figsize=(10,10))\nplt.xlabel('Year', fontsize = 14)\nplt.ylabel('Movie_count', fontsize= 14)\nplt.title('Action Over Years', fontsize=16)","35acbf1a":"# Fantasy Movies\nfantasy = movies_clean.query('genres == \"Fantasy\"')['year'].value_counts(ascending=True)\nfantasy.plot(kind = 'bar',figsize=(8,8))\nplt.xlabel('Year', fontsize = 14)\nplt.ylabel('Movie_count', fontsize= 14)\nplt.title('Fantasy Over Years', fontsize=16)","96ea22f9":"# Western Movies\nwestern = movies_clean.query('genres == \"Western\"')['year'].value_counts(ascending=True)\nwestern.plot(kind = 'bar',figsize=(8,8))\nplt.xlabel('Year', fontsize = 14)\nplt.ylabel('Movie_count', fontsize= 14)\nplt.title('Western Over Years', fontsize=16)","5b3c9a41":"# Science Fiction Movies\nscinece_fiction = movies_clean.query('genres == \"Science Fiction\"')['year'].value_counts(ascending=True)\nscinece_fiction.plot(kind = 'bar',figsize=(8,8))\nplt.xlabel('Year', fontsize = 14)\nplt.ylabel('Movie_count', fontsize= 14)\nplt.title('Science Fiction Over Years', fontsize=16)","8092c2e4":"# getting the profit and appending it into profit column\nmovies_clean['profit'] = movies_clean.revenue - movies_clean.budget\nmovies_clean.head()\nmovies_clean.to_csv('movies.csv')","493b64ae":"# function to get data and concatenating it to one of the dataset properties classification\n# Here we need to split movie genres and connecting each genre with its related data\ndef get_data(data, column):\n    data = data[column].str.cat(sep = '|')\n    data = pd.Series(data.split('|')).str.strip()\n    data_counts = data.value_counts(ascending=True)\n    return data_counts","7831347d":"# getting the highest profit data and connecting them to its related movie genre\nhighest_profit = movies_clean[movies_clean.profit > movies_clean.profit.mean()]\nmovie_genre = get_data(highest_profit,'genres')\nmovie_genre.plot(kind='bar', figsize=(14,14), color='yellowgreen')\nplt.xlabel('Movie Genres', fontsize=14)\nplt.ylabel('Movies Number', fontsize=14)\nplt.title('Most Profitable Movie Genres', fontsize=16)","533d2ac2":"# getting the highest vote_average data and connecting them to its related movie genre\nhighest_vote_average = movies_clean[movies_clean.vote_average > movies_clean.vote_average.mean()]\nmovie_genre = get_data(highest_vote_average,'genres')\nmovie_genre.plot(kind='bar', figsize=(14,14), color='purple')\nplt.xlabel('Movie Genre', fontsize=16)\nplt.ylabel('No. of Movies', fontsize=16)\nplt.title('Movies with Highest Vote Average', fontsize=18)","1d18752f":"# getting the highest vote_count data and connecting them to its related movie genre\nhighest_vote_count = movies_clean[movies_clean.vote_count > movies_clean.vote_count.mean()]\nmovie_genre = get_data(highest_vote_count,'genres')\nmovie_genre.plot(kind='bar', figsize=(14,14), color='violet')\nplt.xlabel('Movie Genre', fontsize=16)\nplt.ylabel('No. of Movies', fontsize=16)\nplt.title('Movies with Highest Vote Count', fontsize=18)","cdb19307":"# getting the highest popularity data and connecting them to its related movie genre\nhighest_popularity = movies_clean[movies_clean.popularity > movies_clean.popularity.mean()]\nmovie_genre = get_data(highest_popularity,'genres')\nmovie_genre.plot(kind='bar', figsize=(14,14), color='#00BFFF')\nplt.xlabel('Movie Genre', fontsize=16)\nplt.ylabel('No. of Movies', fontsize=16)\nplt.title('Movies with Highest Popularity', fontsize=18)","15d21e0d":"# getting the Top 10 highest revenue movies and their properties\ntop_10 = movies_clean['revenue'].nlargest(10).index\nmovies_clean.loc[top_10]","be278301":"# getting the Top 10 highest revenue movies and their properties\ntop_10 = movies_clean['popularity'].nlargest(10).index\nmovies_clean.loc[top_10]","0bbac4f1":"# getting the Top 10 highest rated movies and their properties\ntop_10 = movies_clean['vote_average'].nlargest(10).index\nmovies_clean.loc[top_10]","9f80e204":"# getting the companies that get the highest revenue each year and which movie targeted that highest revenue\nmax_revenue_per_year = movies_clean.groupby('year')['revenue'].idxmax()\nlist_max_revenue = list(max_revenue_per_year)\nmax_companies = movies_clean.production_companies.loc[list_max_revenue]\nmax_year = movies_clean.year.loc[list_max_revenue]\nmax_companies_year = pd.merge(max_companies, max_year,left_index=True, right_index=True\n,how = 'outer')\nmax_companies_year_revenue = movies_clean['revenue'].loc[list_max_revenue]\nmax_companies_year_revenue\ncompanies_year_revenue = max_companies_year.join(max_companies_year_revenue)\nmax_movies = movies_clean.title.loc[list_max_revenue]\ncompanies_year_revenue_title = companies_year_revenue.join(max_movies)\ncompanies_year_revenue_title.dropna()\ncompanies_year_revenue_title","8ce0d9e8":"# visualizing the realtionship between popularity and vote_count by scatter plot\nplt.scatter(movies_clean.vote_count, movies_clean.popularity)\nplt.xlabel('Vote_Count', fontsize=14)\nplt.ylabel('Popularity', fontsize=14)\nplt.title('Popularity Vote_Count Relationship', fontsize= 16)\nplt.figure(figsize=(20, 20))","61cb65cd":"# visualizing the realtionship between vote rate and vote_count by scatter plot\nplt.scatter(movies_clean.vote_count, movies_clean.vote_average)\nplt.xlabel('Vote_Count', fontsize=14)\nplt.ylabel('Vote_Rate', fontsize=14) \nplt.title('Vote_Count & Rate Relationship', fontsize= 16)\nplt.figure(figsize=(20, 20))","9dcdb874":"# visualizing the realtionship between budget and runtime by scatter plot\nplt.scatter(movies_clean.runtime, movies_clean.budget)\nplt.xlabel('RunTime', fontsize=14)\nplt.ylabel('Budget', fontsize=14)\nplt.title('RunTime & Budget Relatioship', fontsize= 16)\nplt.figure(figsize=(20, 20))","cdfab77d":"# visualizing the realtionship between budget and revenue by scatter plot\nplt.scatter(movies_clean.revenue, movies_clean.budget)\nplt.xlabel('Revenue', fontsize=14)\nplt.ylabel('Budget', fontsize=14)\nplt.title('Revnue & Budget Relatioship', fontsize= 16)\nplt.figure(figsize=(20, 20))","33cb12a8":"movies_clean.director.value_counts().nlargest(10)","2942ccbd":"# visualzing the runtime average by scatter plot\n# in this visulaization we are trying to represent the average runtime of the movies and how much movies have the average runtime over time\nplt.scatter(movies_clean.runtime, movies_clean.movie_id)\nplt.xlabel('RunTime', fontsize=14)\nplt.ylabel('No of Movies', fontsize=14)\nf=plt.figure()\nf.set_figwidth(20)\nf.set_figheight(20)\nplt.show()","4201113c":"plt.show()","8b590252":"movies_clean.to_csv('movies.csv')","dc72046e":"from subprocess import call\ncall(['python', '-m', 'nbconvert', 'Project: Investigate a Dataset (TMDb)'])","222af171":"<a id='eda'><\/a>\n## Exploratory Data Analysis","9db2685c":"_**get the Top 10 Directors over the time and their movie number they directed**_","72c12997":"<a id='wrangling'><\/a>\n## Data Wrangling\n\n\n### General Properties","06dc20e7":"### Q6: What is the relation between the vote_count and vote rate?","7af51b16":"_**getting the companies that get the highest revenue each year and which movie targeted that highest revenue**_","981055e6":"**We need to remove the NaN cells from dataset**","d74271cc":"_**getting the highest profit data and connecting them to its related movie genre**_","60976acd":"_**function to get data and concatenating it to one of the dataset properties classification**_<br\/>\n_**Here we need to split movie genres and connecting each genre with its related data**_","c70cf65c":"## TOP 10 Movies\n### Q3A: What kinds of properties are associated with movies that have high revenues?","c6d22d63":"_**visualizing the realtionship between popularity and vote_count by scatter plot to clarify the effect of popularity on the vote count**_","0e6c19c3":"<a id='conclusions'><\/a>\n## Conclusions\n\n#### Rate of movie production over years for each movie genre:\n> Drama Movies: The highest year of Drama is 2006 <br\/>\n> Comedy Movies: The highest year of Comedy is 2012 <br\/>\n> Horror Movies: The highest year of Horror is 2009 <br\/>\n> Thriller Movies: The highest year of Thriller is 2015 <br\/>\n> Action Movies: The highest year of Action is 2015 <br\/>\n> Fantasy Movies: The highest year of Fantasy is 2016 <br\/>\n> Western Movies: The highest year of Western is 1968, the rate is descending <br\/>\n> Science Fiction Movies: The highest year of Science Fiction is 2000 <br\/>\n> Drama Movies: The highest year of Drama is 2006 <br\/>\n#### The highest profitable, rated, vote_count, popular movie genre:\n> The most Profitable movie genres are First: Comedy, Second: Drama, Third: Action <br\/>\n> The highest rated movie genres are First: Drama, Second: Comedy, Third: Thriller <br\/>\n> The most vote_count movie genres are First: Action, Second: Drama, Third: Adventure <br\/>\n> The most Popular movie genres are First: Drama, Second: Action, Third: Thriller <br\/>\n#### Top 10 Movies?:\n>>**TOP 10 highest revenue:** <br\/>                   \n>>Avatar<br\/>\n>>Titanic<br\/>\n>>The Avengers<br\/>\n>>Jurassic World<br\/>\n>>Furious 7<br\/>\n>>Avengers: Age of Ultron<br\/>\n>>Frozen<br\/>\n>>Iron Man 3<br\/>\n>>Minions<br\/>\n>>Captain America: Civil War <br\/><br\/>\n>> **TOP 10 popular:** <br\/>\n>>Minions<br\/>\n>>Interstellar<br\/>\n>>Deadpool<br\/>\n>>Guardians of the Galaxy<br\/>\n>>Mad Max: Fury Road<br\/>\n>>Jurassic World<br\/>\n>>Pirates of the Caribbean: The Curse of the Black Pearl<br\/>\n>>Dawn of the Planet of the Apes<br\/>\n>>The Hunger Games: Mockingjay - Part 1<br\/>\n>>Big Hero 6<br\/><br\/>\n>>**TOP 10 rated:** <br\/>\n>>Dancer, Texas Pop. 81<br\/>\n>>Me You and Five Bucks<br\/>\n>>One Man's Hero<br\/>\n>>The Shawshank Redemption<br\/>\n>>The Prisoner of Zenda<br\/>\n>>The Godfather<br\/>\n>>Fight Club<br\/>\n>>Schindler's List<br\/>\n>>Spirited Away<br\/>\n>>The Godfather: Part II<br\/>\n#### Companies made the overall highest revenue per year:\n<a href=\"#companies\">Companies<\/a>\n#### Relation between popularity and vote_count:\n> The Distribution is skewed to left , positive relationship\n#### Relation between the vote_count and vote rate:\n> No effect of the vote count on the vote rate\n#### Relation between the budget and the runtime:\n> No effect of the long runtime on increasing the budget\n#### Relation between the budget and the revenue:\n> The Distribution is skewed to the left , positive relationship\n#### Most Popular Directors and Number of their movies in our dataset:\n>Steven Spielberg:      27<br\/>\n>Clint Eastwood:        18<br\/>\n>Robert Rodriguez:      15<br\/>\n>Ridley Scott:          15<br\/>\n>Renny Harlin:          15<br\/>\n>Martin Scorsese:       15<br\/>\n>Steven Soderbergh:     14<br\/>\n>Tim Burton:            14<br\/>\n>Oliver Stone:          14<br\/>\n>Woody Allen:           13<br\/>\n#### Average Runtime:\n> between 100:110 mins , meanly about 106 mins\n\n### *Limitations:*\n1. We have used TMBD Movies dataset for our analysis and worked with popularity, revenue and runtime. Our analysis is limited to only the provided dataset. For example, the dataset does not confirm that every release of every director is listed.<br\/>\n2. There is no normalization or exchange rate or currency conversion is considered during this analysis and our analysis is limited to the numerical values of revenue.<br\/>\n3. Dropping missing or Null values from variables of our interest might skew our analysis and could show unintentional bias towards the relationship being analyzed. etc.<br\/>\n\n## Resources:\n\n<a href='https:\/\/pandas.pydata.org\/docs\/'>Pandas Documentation<\/a><br\/>\n<a href='https:\/\/matplotlib.org\/3.3.3\/contents.html#'>Matplotlib Documentation<\/a><br\/>\n<a href='https:\/\/numpy.org\/doc\/1.20\/'>Numpy Documentation<\/a><br\/>\n<a href='https:\/\/docs.python.org\/3\/'>Python Documentation<\/a><br\/>\n<a href='https:\/\/seaborn.pydata.org\/'>Seaborn Documentation<\/a><br\/>\n<a href='https:\/\/www.kaggle.com\/tmdb\/tmdb-movie-metadata'>Kaggle TMDb dataset<\/a><br\/>\n<a href='http:\/\/ipython.readthedocs.io\/en\/stable\/interactive\/magics.html'>Notebook Inline magics<\/a><br\/>","3cbf2db2":"_**Get the Rate of Horror Movies**_","b123fdc4":"**Extract the year from column( release_date) using str.extract method**","438d8a9d":"_**getting the Top 10 highest revenue movies and their properties**_","df2bab11":"### Q7: Is there a relation between the budget and the runtime ?","3abe3255":"_**getting the Top 10 highest revenue movies and their properties**_","92061116":"_**Get the Rate of Music Movies**_","9668d330":"\n\n#                  Project: Investigate a Dataset (TMDb)\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","d475f919":"### Q9: Most Popular Directors?","8d047fe9":"### Q3B: What kinds of properties are associated with the most popular movies?","ea51c2e4":"**We need to remove the unused and unimportnat column like ('homepage')**","903146dc":"### Q3C: What kinds of properties are associated with the highest rated movies?","2f1aebfa":"_**Get the Rate of Family Movies**_","b9ff0aec":"_**Get the Rate of Western Movies**_","4cd86bc7":"### Q2: Which genres are most popular, profitable, high rated, high vote count from year to year?","f327086a":"_**visualizing the realtionship between budget and revenue by scatter plot to clarify if there a relation between budget and revenue**_","02e6e0a3":"_**Get the Rate of Fantasy Movies**_","4830503d":"_**visualizing the realtionship between budget and runtime by scatter plot and if the long runtime increasing the budget or not**_","9ad8cb2f":"<a id='companies'><\/a>\n### Q4: Which companies made the overall highest revenue per year?","60c03bf8":"### Q1:What rate of movie production over years for each movie genre?","9679d215":"### Data Cleaning (TMDb dataset cleaning):\n\n> 1. We need to fill Nan cells in columns with numerical values with the mean value.\n> 2. We need to remove the unused and unimportnat column like ('homepage')\n> 3. We need to remove the NaN cells from dataset.\n> 4. We need to convert the dtype of column ('runtime') values to integer dtype.\n> 5. Capture the name of crew, cast, genres, keywords, spoken_languages, production_countries, production_companies.\n> 6. We need to remove the unnecessary characters and strip spaces from these names.\n> 7. Save all these changes to a new csv file.\n\n","7cfe540b":"**1. We need to save these changes into a csv file.**\n**2. We need to take a copy.**","c37615c5":"_**visualizing the realtionship between vote rate and vote_count by scatter plot and clarify their effect on each other**_\n","7ed581b1":"_**Get the Rate of Crime Movies**_","200ccb1d":"_**getting the Top 10 highest rated movies and their properties**_","3d3c80f7":"_**Get the Rate of Romance Movies**_","9108b501":"### Q8: Is there a relation between the budget and the revenue ?","28d0e397":"_**Get the Rate of Drama Movies**_","85255f82":"**Convert strings in columns to JSON structure to iterate over them and capture name value.<br\/>\nCapture the name of crew, cast, genres, keywords, spoken_languages, production_countries, production_companies.<br\/>\nRemove the unnecessary characters and strip spaces from these names.**","5f051f27":"### Q5: What is the relation between popularity and vote_count?","6d6e96b1":"**code a function to iterate over the contents of the crew column to capture the director name**","e75cfe9a":"_**Getting the Profit Values and appending them into a column \"Profit\"**_<br\/>\n_**Save the column into the CSV file**_","223f1b7d":"_**Get the Rate of Thriller Movies**_","477b9e6d":"_**Get the Rate of Comedy Movies**_","57c0aa5c":"_**in this visulaization we are trying to represent the average runtime of the movies and how much movies have the average runtime over time**_","5b7906ac":"_**Get the Rate of Adventure Movies**_","8de976ae":"_**Get the Rate of Animation Movies**_","93e690f1":"**Save Changes to the CSV file we saved to it before**","6c3f58c2":"_**Get the Rate of Science Fiction Movies**_","416ff06d":"<a id='intro'><\/a>\n## Introduction\n\n> What can we say about the importance of Cinema's Industry? and its effect on the economy of the producing countries ? What can we say about the social effect on people and the fun we have while watching a movie.\n> I am interested in watching movies , it's one of my pleasuring fun and I've watched more than 500 movies , so I consider myself familial with this industry.\n> Here we have a dataset to investigate \"TMDb Movie Database\" a dataset of about 5000 movies, here we can answer questions as;<br \/>\n<br \/>\n> **1. What rate of movie production over years for each movie genre?<br\/>\n> 2. which are the highest profitable, rated, vote_count, popular movie genre?<br\/>\n> 3. Top 10 Movies?:<br\/>\n>..3A. What kinds of properties are associated with movies that have high revenues?<br \/>\n>..3B. What kinds of properties are associated with the most popular movies?<br\/>\n>..3C. What kinds of properties are associated with the highest rated movies?<br\/> \n> 4. Which companies made the overall highest revenue per year?<br \/>\n> 5. What is the relation between popularity and vote_count?<br \/>\n> 6. What is the relation between the vote_count and vote rate?<br \/>\n> 7. Is there  a relation between the budget and the runtime ?<br\/>\n> 8. Is there  a relation between the budget and the revenue ?<br\/>\n> 9. Most Popular Directors?<br\/>\n> 10. Average Runtime?\n**\n\n","271a9c5f":"**We need to fill Nan or zero values\\' cells with the mean value of each column** ","23e1f765":"_**Get the Rate of Action Movies**_","ad8840ff":"**We need to change the column id to movie_id to prevent duplication while merging**","4082720a":"**iterate over the columns and clean them from the unwanted charcters and spaces**","a73a860e":"_**getting the highest vote_average data and connecting them to its related movie genre**_","50715ebc":"_**getting the highest popularity data and connecting them to its related movie genre**_","bc922aa0":"_**getting the highest vote_count data and connecting them to its related movie genre**_","c83d0efe":"### Q10: Average Runtime?"}}