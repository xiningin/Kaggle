{"cell_type":{"a8c0b269":"code","9b13f6dc":"code","af48b82f":"code","2ae3477e":"code","883ed325":"code","07537a93":"code","0b1532e6":"code","8d0e26dd":"code","4db34892":"code","b2db0096":"code","5c3dfd98":"code","86492e70":"code","d975c935":"code","5421a338":"code","13ef98ef":"code","5a4ca886":"code","7db8ea73":"code","310a02b1":"code","815bfe66":"markdown","3184a6bd":"markdown","6ed689ab":"markdown","eb0abbbc":"markdown","17a18854":"markdown","96d1cfa3":"markdown","e5c1201b":"markdown","1c518065":"markdown","73e27a9d":"markdown","4ed1dbc8":"markdown","99da1363":"markdown","309c1ba8":"markdown","bc798728":"markdown"},"source":{"a8c0b269":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #data visualization\nimport seaborn as sns #data visualization\n\n#plotly library\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9b13f6dc":"#Load data from csv file\ndata=pd.read_csv('..\/input\/athlete_events.csv')\n#data includes how many rows and columns\ndata.shape","af48b82f":"#column(feature) names in data\ndata.columns","2ae3477e":"#getting an overview of our data\ndata.info()","883ed325":"# checking for missing values\nprint(\"Are there missing values? {}\".format(data.isnull().any().any()))\n#missing value control in features\ndata.isnull().sum()","07537a93":"#Let's learn about the int values in our dataset.\ndata.describe() #include ID feature\n#we don't need istaticsal summary for ID feature\ndata.iloc[:,1:].describe()","0b1532e6":"data.head()","8d0e26dd":"#we found out how many teams in our data\nprint(\"Team Names in Dataset:\")\nprint(data.Team.unique())\n\nprint(\"\\nYears in Dataset:\")\n#we sorted the years  for a better look view.\nprint(np.sort(data.Year.unique()))\n\nprint(\"\\nSport Types:\")\nprint(data.Sport.unique())\n","4db34892":"#grouping by sex\ndata_gender=data['Sex'].value_counts()\ndata_gender.head()","b2db0096":"average_height=data.Height.mean()\nprint(\"average height:\",average_height)\n#List Comprehension\ndata[\"Height_Level\"]=[\"Short\" if average_height>item else \"Tall\" for item in data.Height]\n\n#pivot table grouping data by Height\npd.pivot_table(data,index=\"Height_Level\",values=\"Height\")\n","5c3dfd98":"#List comprehension\naverage_age=data.Age.mean()\nprint(\"Average Age:\",average_age)\ndata[\"Age_Level\"]=[\"Old\" if item>average_age else \"Young\" for item in data.Age]\ndata.loc[:10,[\"Age_Level\",\"Name\",\"Age\"]]","86492e70":"data_gold=data[np.logical_and(data['Age']<18,data['Medal']==\"Gold\")]\ndata_gold.head(15)\n#filtering pandas\n#data[(data['Age']<18) & (data['Medal']==\"Gold\")]","d975c935":"#filtering pandas dataframe\ndata_team=data['Team']==\"Turkey\"\ndata[data_team].head(15)","5421a338":"data_first=data[np.logical_and(data['Team']==\"Turkey\",data['Medal']==\"Gold\")]\nfor index,value in data_first[0:1].iterrows():\n    print(index,\":\",value)","13ef98ef":"#default function\ndef find(year,sport,Medal=\"Gold\"):\n    \"\"\"\n    parameter: Year,Sport type\n    return: Athletes who receive a gold medal according to the sport type and the year.\n    \"\"\"\n    data_find=data[(data['Year']==year) & (data['Sport']==sport) & (data['Medal']==Medal)]\n    return data_find\nfind(2000,\"Wrestling\")","5a4ca886":"data_team=data[data.Team==\"Turkey\"]\ndata_turkey=data_team.loc[:,[\"ID\",\"Year\"]]\n\nplt.figure(figsize=(12,16))\nplt.subplot(211)\n\nturkey = data_turkey.groupby(\"Year\")[\"ID\"].nunique().plot(kind = \"bar\",\n                                                 color = sns.color_palette(\"husl\"),\n                                                 linewidth = 1)\nplt.xticks(rotation = 60)\nplt.grid(True,alpha=.3)\nplt.show()","7db8ea73":"data_team=data[data.Team==\"Turkey\"]\ndata_turkey=data_team.loc[:,[\"ID\",\"Year\"]]\ndata_gold=data[np.logical_and(data['Team']==\"Turkey\",data['Medal']==\"Gold\")]\n\ndata1=data_turkey[\"Year\"].value_counts(dropna=False).to_frame()\ndata2=data_gold[\"Year\"].value_counts(dropna=False).to_frame()\n\ndata_percent=pd.concat([data1,data2],axis=1)\ndata_percent[\"year\"]=data_percent.index\nnames=[\"participating\",\"winner\",\"year\"]\ndata_percent.columns=names\n\ndata_percent.dropna(inplace=True)\ndata_percent.index=range(0,15)\n\ndef percent(x,y):\n    result=round(x\/y*2,2)\n    return result\nfor item in data_percent:\n    data_percent[\"percent\"]=percent(data_percent[\"winner\"],data_percent[\"participating\"])\n\nplt.figure(figsize=(12,16))\nplt.subplot(211)    \n\nax = sns.barplot(x=\"year\", y=\"percent\", data=data_percent)\nax.set(ylabel=\"Percent\")\n\nplt.xticks(rotation = 60)\nplt.grid(True,alpha=.3)\nplt.show()\n","310a02b1":"df = pd.DataFrame(data['Team'].value_counts())\ndf['country'] = df.index\ndf.columns = ['number', 'country']\ndf = df.reset_index().drop('index', axis=1)\ndata = [ dict(\n        type = 'choropleth',\n        locations = df['country'],\n        locationmode = 'country names',\n        z = df['number'],\n        text = df['country'],\n        colorscale = [[0,\"rgb(5, 10, 172)\"],[0.35,\"rgb(40, 60, 190)\"],[0.5,\"rgb(70, 100, 245)\"],\n            [0.6,\"rgb(90, 120, 245)\"],[0.7,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"]],\n        autocolorscale = False,\n        reversescale = True,\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) ),\n        colorbar = dict(\n            autotick = False,\n            tickprefix = '$',\n            title = 'Olimpiyata Participants'),\n      ) ]\nlayout = dict(\n    title = 'Country of Participants',\n    geo = dict(\n        showframe = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'Mercator'\n        )\n    )\n)\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False, filename='world-map')","815bfe66":"* Does the number of participants for a given year relate to Turkey's chances of winning a gold? \n<br>According to Turkey's Olympic participation rate percentage of gold medal winners can answer the question.<\/br>","3184a6bd":"<h1>INTRODUCTION<\/h1>\n<li type=\"square\">In this kernel,we will learn how to do data analysis. <\/li>\n\n<br>Content<\/br>\n1. [Loading Data and Explanation of Features](#1)\n2. [General Information About Data](#2)\n3. [Statistical Summary](#3)\n4. [Peek at the Data](#4)\n5. [Data Visualization](#5)","6ed689ab":"<h3>Filtering<\/h3>\n<li type=\"square\">gold medal winners who are less than 18 years of age<\/li>\n","eb0abbbc":"<a id=\"4\"><\/a>\n<h1>Peek at the Data<\/h1>\n<li type=\"square\">It is also always a good idea to actually take a look our data.<\/li>\n You should see the first 5 rows of the data:","17a18854":"\n<li type=\"square\">A new feature was established that determines the tallest or the shortness according to the average length <\/li>","96d1cfa3":"* The participation of the countries in the Olympics with the map plot belonging to the Plotly library.","e5c1201b":"     Our data has 271116 rows and 15 columns","1c518065":"<a id=\"5\"><\/a>\n<h1>Data Visualization<\/h1>\n<li type=\"square\">Turkey's rate of participation in the Olympic<\/li>","73e27a9d":"<a id=\"2\"><\/a>\n<h1>General Information About Data<\/h1>\n<br>\n<li type=\"square\"> We can see here 15 features of our data and their types. <\/li>\n<li type=\"square\">Also, when we look at the general information of our data, we see missing values in our dataset.<\/li>","4ed1dbc8":"<a id=\"1\"><\/a>\n<h1>Loading Data and Explanation of Features<\/h1>\nathlete_events(data) includes 15 features that are:\n<ul type=\"square\">\n    <li>ID<\/li>\n    <li>Name<\/li>\n    <li>Sex<\/li>\n    <li>Age<\/li>\n    <li>Height<\/li>\n    <li>Weight<\/li>\n    <li>Team<\/li>\n    <li>NOC <br> (National Olympic Committee 3 letter code)<\/br><\/li>\n    <li>Games<\/li>\n    <li>Year<\/li>\n    <li>Season<\/li>\n    <li>City<\/li>\n    <li>Sport<\/li>\n    <li>Event<\/li>\n    <li>Medal<\/li>","99da1363":"      We see that data is missing value in the Age, Height, Weight, and Medal columns(features).\n   <a id=\"3\"><\/a>\n   <h1>Statistical Summary<\/h1>\n   <li type=\"square\">Now we can take a look at a summary of each attribute.<\/li>\n\n     This includes the count, mean, the min and max values as well as some percentiles.","309c1ba8":"<li type=\"square\">Young and old athletes detected according to the average age. <\/li>\n","bc798728":"<h3>Grouping Data and List Comprehension<\/h3>\n"}}