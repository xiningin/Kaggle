{"cell_type":{"adf935b8":"code","ba2908e2":"code","9bff1dff":"code","dc8a4bde":"code","f9a0ec5f":"code","3ba2b6f7":"code","f4ed79f8":"code","be92b21f":"code","ff7bcc99":"code","eae29efb":"code","53477277":"code","40aec97f":"code","65699406":"code","d228bc7a":"markdown","ba22c052":"markdown"},"source":{"adf935b8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import rcParams\n%matplotlib inline\n\nimport os\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\n\nfrom numpy.random import seed\nimport tensorflow as tf","ba2908e2":"def convertToAgeGroup(age):\n    if(math.isnan(age)):\n        return 0\n    if(age < 13):\n        return 1\n    elif(age < 45):\n        return 2\n    else:\n        return 3","9bff1dff":"#Adding both to normalize both at the same time\n#We will separate it using the survival column\ndf_orig_train = pd.read_csv('dataset\/train.csv')\ndf_orig_test = pd.read_csv('dataset\/test.csv')\ndf_orig =pd.concat([df_orig_train, df_orig_test], axis=0, sort=True)","dc8a4bde":"df = pd.DataFrame()\ndf['Survived'] = df_orig['Survived']\ndf['Class'] = df_orig['Pclass']\ndf['Simblings'] = df_orig['SibSp']\ndf['Sex'] = pd.factorize(df_orig['Sex'])[0]\ndf['AgeGroup'] = df_orig['Age'].apply(lambda age: convertToAgeGroup(age))\ndf['Cabingroup'] = pd.factorize(df_orig['Cabin'].str[0])[0]\ndf['Embarked'] = pd.factorize(df_orig['Embarked'])[0]\n\ndf","f9a0ec5f":"X_train = df[pd.notnull(df['Survived'])].drop(['Survived'], axis=1)\ny_train = df[pd.notnull(df['Survived'])]['Survived']\nX_test = df[pd.isnull(df['Survived'])].drop(['Survived'], axis=1)","3ba2b6f7":"def create_model(lyrs=[8], act='linear', opt='Adam', dr=0.0):\n    \n    # set random seed for reproducibility\n    seed(42)\n    tf.random.set_seed(42)\n    \n    model = Sequential()\n    \n    # create first hidden layer\n    model.add(Dense(lyrs[0], input_dim=X_train.shape[1], activation=act))\n    \n    # create additional hidden layers\n    for i in range(1,len(lyrs)):\n        model.add(Dense(lyrs[i], activation=act))\n    \n    # add dropout, default is none\n    model.add(Dropout(dr))\n    \n    # create output layer\n    model.add(Dense(1, activation='sigmoid'))  # output layer\n    \n    model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])\n    \n    return model","f4ed79f8":"model = create_model()\nprint(model.summary())","be92b21f":"training = model.fit(X_train, y_train, epochs=300, batch_size=32, validation_split=0.33, verbose=0)\nval_acc = np.mean(training.history['val_accuracy'])\nprint(\"\\n%s: %.2f%%\" % ('val_accuracy', val_acc*100))","ff7bcc99":"history_dict = training.history\nprint(history_dict.keys())","eae29efb":"plt.plot(training.history['accuracy'])\nplt.plot(training.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","53477277":"# calculate predictions\ndf_orig_test['Survived'] = model.predict(X_test)\ndf_orig_test['Survived'] = df_orig_test['Survived'].apply(lambda x: round(x,0)).astype('int')\nsolution = df_orig_test[['PassengerId', 'Survived']]","40aec97f":"solution.to_csv(\"final_solution.csv\", index=False)","65699406":"#To send to kaggle, after installed the kaggle command tool:\n#kaggle competitions submit -f final_solution.csv -m \"testing sending\" titanic","d228bc7a":"# Neural Network","ba22c052":"# Normalizing and separating the data"}}