{"cell_type":{"968d4ede":"code","b8bb1bae":"code","f53cfd34":"code","f6fb50f4":"code","0b620ce7":"code","33d9cf6e":"code","ee396b96":"code","9b0b9759":"code","ff5a3956":"code","7bb23068":"code","7b09fe50":"code","a5bcc266":"code","969d8be4":"code","0a7b3392":"code","fd4a8610":"code","b4111dea":"code","d456c32b":"code","ae327d82":"code","27971f14":"code","11734b82":"code","0d54af95":"code","2be21241":"code","522ba402":"code","26bc65c4":"code","44b6086d":"code","6f131d8d":"code","f238b1eb":"code","9860e8eb":"code","5859a799":"code","f331dbad":"code","40e0b36f":"code","6d379c48":"code","9a9a55f0":"code","b626bcb8":"code","527b6d33":"code","6680ae10":"code","75769e57":"code","4184eb81":"markdown","db2bd9b0":"markdown","8ef8bb8c":"markdown","f3ec7f9b":"markdown","07658914":"markdown","746126f5":"markdown","858c6fc6":"markdown","a944f91e":"markdown","1bc430ed":"markdown","62713416":"markdown","36425120":"markdown","41819f8c":"markdown","160135b6":"markdown","022148f7":"markdown","ec555c4b":"markdown"},"source":{"968d4ede":"# Let's get started!\n\n# import libraries\n# Essentials\nimport numpy as np\nimport pandas as pd\nimport datetime\nimport random\n\n# Plots\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Models\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor, BaggingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.linear_model import Ridge, RidgeCV\nfrom sklearn.linear_model import ElasticNet, ElasticNetCV\nfrom sklearn.svm import SVR\nfrom mlxtend.regressor import StackingCVRegressor\nimport lightgbm as lgb\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import VotingRegressor\n\n# Misc\nfrom sklearn import model_selection\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport sklearn.metrics as metrics\nfrom scipy.stats import norm\n\n","b8bb1bae":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\n\ndf_train.info()","f53cfd34":"df_train.head(5)","f6fb50f4":"train_ID = df_train['Id']\ntest_ID = df_test['Id']\ndf_train.drop(['Id'], axis=1, inplace=True)\ndf_test.drop(['Id'], axis=1, inplace=True)\ndf_train.shape, df_test.shape","0b620ce7":"\ndf_train.describe()","33d9cf6e":"#correlation matrix\ncorrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True)","ee396b96":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","9b0b9759":"#scatterplot\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(df_train[cols], size = 2.5)\nplt.show();\n","ff5a3956":"#Outlier analysis saleprice\/grlivarea\nvar = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000))","7bb23068":"#Outlier analysis saleprice\/TotalBsmtSF\nvar = 'TotalBsmtSF'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","7b09fe50":"#analysing 'SalePrice'\n\n#descriptive statistics summary\ndf_train['SalePrice'].describe()\n#histogram\nsns.distplot(df_train['SalePrice']);\nprint(\"Skewness: %f\" % df_train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % df_train['SalePrice'].kurt())","a5bcc266":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column SalePrice\ndf_train[\"SalePrice\"] = np.log1p(df_train[\"SalePrice\"])","969d8be4":"#Check the new distribution \nsns.distplot(df_train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(df_train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))","0a7b3392":"# Split features and labels\ntrain_labels = df_train['SalePrice'].reset_index(drop=True)\ntrain_features = df_train.drop(['SalePrice'], axis=1)\ntest_features = df_test","fd4a8610":"# Combine train and test features in order to apply the feature transformation pipeline to the entire dataset\nall_features = pd.concat([train_features, test_features]).reset_index(drop=True)\nall_features.shape\n","b4111dea":"# determine the percentage of missing values\ndef percent_missing(df):\n    data = pd.DataFrame(df)\n    df_cols = list(pd.DataFrame(data))\n    dict_x = {}\n    for i in range(0, len(df_cols)):\n        dict_x.update({df_cols[i]: round(data[df_cols[i]].isnull().mean()*100,2)})\n    \n    return dict_x\n\nmissing = percent_missing(all_features)\ndf_miss = sorted(missing.items(), key=lambda x: x[1], reverse=True)\nprint('Percent of missing data')\ndf_miss[0:10]","d456c32b":"# Visualize missing values\nsns.set_style(\"white\")\nf, ax = plt.subplots(figsize=(8, 7))\nsns.set_color_codes(palette='deep')\nmissing = round(df_train.isnull().mean()*100,2)\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar(color=\"b\")\n# Tweak the visual presentation\nax.xaxis.grid(False)\nax.set(ylabel=\"Percent of missing values\")\nax.set(xlabel=\"Features\")\nax.set(title=\"Percent missing data by feature\")\nsns.despine(trim=True, left=True)","ae327d82":"# Some of the non-numeric predictors are stored as numbers; convert them into strings \nall_features['MSSubClass'] = all_features['MSSubClass'].apply(str)\nall_features['YrSold'] = all_features['YrSold'].astype(str)\nall_features['MoSold'] = all_features['MoSold'].astype(str)\n","27971f14":"def handle_missing(features):\n    # the data description states that NA refers to typical ('Typ') values\n    print(features['Functional'].value_counts())\n    features['Functional'] = features['Functional'].fillna('Typ')\n    # Replace the missing values in each of the columns below with their mode\n    #print(features['Electrical'].value_counts())\n    features['Electrical'] = features['Electrical'].fillna(features['Electrical'].mode()[0])    \n    #print(features['KitchenQual'].value_counts())\n    features['KitchenQual'] = features['KitchenQual'].fillna(features['KitchenQual'].mode()[0])    \n    features['Exterior1st'] = features['Exterior1st'].fillna(features['Exterior1st'].mode()[0])\n    features['Exterior2nd'] = features['Exterior2nd'].fillna(features['Exterior2nd'].mode()[0])\n    features['SaleType'] = features['SaleType'].fillna(features['SaleType'].mode()[0])\n    features['MSZoning'] = features.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))\n    \n    # the data description stats that NA refers to \"No Pool\"\n    features[\"PoolQC\"] = features[\"PoolQC\"].fillna(\"None\")\n    # Replacing the missing values with 0, since no garage = no cars in garage\n    for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n        features[col] = features[col].fillna(0)\n    # Replacing the missing values with None\n    for col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n        features[col] = features[col].fillna('None')\n    # NaN values for these categorical basement features, means there's no basement\n    for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n        features[col] = features[col].fillna('None')\n        \n    # Group the by neighborhoods, and fill in missing value by the median LotFrontage of the neighborhood\n    features['LotFrontage'] = features.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\n\n    # We have no particular intuition around how to fill in the rest of the categorical features\n    # So we replace their missing values with None\n    objects = []\n    for i in features.columns:\n        if features[i].dtype == object:\n            objects.append(i)\n    features.update(features[objects].fillna('None'))\n        \n    # And we do the same thing for numerical features, but this time with 0s\n    numeric_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    numeric = []\n    for i in features.columns:\n        if features[i].dtype in numeric_dtypes:\n            numeric.append(i)\n    features.update(features[numeric].fillna(0))    \n    return features\n\n\nall_features = handle_missing(all_features)","11734b82":"# Let's make sure we handled all the missing values\nmissing = percent_missing(all_features)\ndf_miss = sorted(missing.items(), key=lambda x: x[1], reverse=True)\nprint('Percent of missing data')\ndf_miss[0:10]\n","0d54af95":"all_features.head()","2be21241":"# Encode categorical features\n# one hot encoding with dummies\n\nall_features = pd.get_dummies(all_features).reset_index(drop=True)\nall_features.shape","522ba402":"#Recreate training and test sets\n\nX = all_features.iloc[:len(train_labels), :]\nX_test = all_features.iloc[len(train_labels):, :]\nX.shape, train_labels.shape, X_test.shape\n\n","26bc65c4":"#scale data before regression\nscaler = MinMaxScaler()\nscaler.fit(X)\nX = scaler.transform(X)\nX_test = scaler.transform(X_test)\n\nkf = KFold(n_splits=12, random_state=42, shuffle=True)","44b6086d":"# model training\nlightgbm = LGBMRegressor(objective='regression', \n                       num_leaves=6,\n                       learning_rate=0.01, \n                       n_estimators=7000,\n                       max_bin=200, \n                       bagging_fraction=0.8,\n                       bagging_freq=4, \n                       bagging_seed=8,\n                       feature_fraction=0.2,\n                       feature_fraction_seed=8,\n                       min_sum_hessian_in_leaf = 11,\n                       verbose=-1,\n                       random_state=42)\n\n# XGBoost Regressor\nxgboost = XGBRegressor(learning_rate=0.01,\n                       n_estimators=6000,\n                       max_depth=4,\n                       min_child_weight=0,\n                       gamma=0.6,\n                       subsample=0.7,\n                       colsample_bytree=0.7,\n                       objective='reg:linear',\n                       nthread=-1,\n                       scale_pos_weight=1,\n                       seed=27,\n                       reg_alpha=0.00006,\n                       random_state=42)\n\n# Ridge Regressor\nridge_alphas = [1e-15, 1e-10, 1e-8, 9e-4, 7e-4, 5e-4, 3e-4, 1e-4, 1e-3, 5e-2, 1e-2, 0.1, 0.3, 1, 3, 5, 10, 15, 18, 20, 30, 50, 75, 100]\nridge = make_pipeline(RobustScaler(), RidgeCV(alphas=ridge_alphas, cv=kf))\n\n# Support Vector Regressor\nsvr = make_pipeline(RobustScaler(), SVR(C= 20, epsilon= 0.008, gamma=0.0003))\n\n# Gradient Boosting Regressor\ngbr = GradientBoostingRegressor(n_estimators=6000,\n                                learning_rate=0.01,\n                                max_depth=4,\n                                max_features='sqrt',\n                                min_samples_leaf=15,\n                                min_samples_split=10,\n                                loss='huber',\n                                random_state=42)  \n\n# Random Forest Regressor\nrf = RandomForestRegressor(n_estimators=1200,\n                          max_depth=15,\n                          min_samples_split=5,\n                          min_samples_leaf=5,\n                          max_features=None,\n                          oob_score=True,\n                          random_state=42)\n\n","6f131d8d":"#x_train, x_test, y_train, y_test = model_selection.train_test_split(X, train_labels, train_size = 0.8)\n","f238b1eb":"'''\nxgboost.fit(x_train, y_train)\nxgboost_test_pred = xgboost.predict(x_test)\nxgboost_pred = np.expm1(xgboost.predict(X_test))\nprint('xgboost RMSE:', np.sqrt(metrics.mean_squared_error(y_test, xgboost_test_pred)))\n'''\n\nxgboost.fit(X, train_labels)\nxgboost_train_pred = xgboost.predict(X)\nxgboost_pred = np.expm1(xgboost.predict(X_test))\nprint('xgboost RMSE:', np.sqrt(metrics.mean_squared_error(train_labels, xgboost_train_pred)))","9860e8eb":"'''\nlightgbm.fit(x_train, y_train)\nlightgbm_test_pred = lightgbm.predict(x_test)\nlightgbm_pred = np.expm1(lightgbm.predict(X_test))\nprint('lightgbm RMSE:', np.sqrt(metrics.mean_squared_error(y_test, lightgbm_test_pred)))\n'''\nlightgbm.fit(X, train_labels)\nlightgbm_train_pred = lightgbm.predict(X)\nlightgbm_pred = np.expm1(lightgbm.predict(X_test))\nprint('lightgbm RMSE:', np.sqrt(metrics.mean_squared_error(train_labels, lightgbm_train_pred)))","5859a799":"'''\nridge.fit(x_train, y_train)\nridge_test_pred = ridge.predict(x_test)\nridge_pred = np.expm1(ridge.predict(X_test))\nprint('ridge RMSE:', np.sqrt(metrics.mean_squared_error(y_test, ridge_test_pred)))\n'''\n\nridge.fit(X, train_labels)\nridge_train_pred = ridge.predict(X)\nridge_pred = np.expm1(ridge.predict(X_test))\nprint('ridge RMSE:', np.sqrt(metrics.mean_squared_error(train_labels, ridge_train_pred)))","f331dbad":"'''svr.fit(x_train, y_train)\nsvr_test_pred = svr.predict(x_test)\nsvr_pred = np.expm1(svr.predict(X_test))\nprint('svr RMSE:', np.sqrt(metrics.mean_squared_error(y_test, svr_test_pred)))\n'''\nsvr.fit(X, train_labels)\nsvr_train_pred = ridge.predict(X)\nsvr_pred = np.expm1(svr.predict(X_test))\nprint('svr RMSE:', np.sqrt(metrics.mean_squared_error(train_labels, svr_train_pred)))","40e0b36f":"'''gbr.fit(x_train, y_train)\ngbr_test_pred = gbr.predict(x_test)\ngbr_pred = np.expm1(gbr.predict(X_test))\nprint('gbr RMSE:', np.sqrt(metrics.mean_squared_error(y_test, gbr_test_pred)))\n'''\ngbr.fit(X, train_labels)\ngbr_train_pred = ridge.predict(X)\ngbr_pred = np.expm1(gbr.predict(X_test))\nprint('gbr RMSE:', np.sqrt(metrics.mean_squared_error(train_labels, gbr_train_pred)))","6d379c48":"'''rf.fit(x_train, y_train)\nrf_test_pred = rf.predict(x_test)\nrf_pred = np.expm1(rf.predict(X_test))\nprint('rf RMSE:', np.sqrt(metrics.mean_squared_error(y_test, rf_test_pred)))\n'''\nrf.fit(X, train_labels)\nrf_train_pred = ridge.predict(X)\nrf_pred = np.expm1(gbr.predict(X_test))\nprint('rf RMSE:', np.sqrt(metrics.mean_squared_error(train_labels, rf_train_pred)))","9a9a55f0":"votingreg = VotingRegressor([('lightgbm', lightgbm), ('xgboost', xgboost),('ridge',ridge),('svr',svr),('gbr',gbr),('rf',rf)])\n#votingreg = VotingRegressor([('lightgbm', lightgbm), ('xgboost', xgboost)])","b626bcb8":"\nvotingreg.fit(X, train_labels)\nvotingreg_train_pred = votingreg.predict(X)\nvotingreg_pred = np.expm1(votingreg.predict(X_test))\nprint('VotingRegressor RMSE:', np.sqrt(metrics.mean_squared_error(train_labels, votingreg_train_pred)))","527b6d33":"#Ensemble prediction:\nensemble = votingreg_pred*0.35 + xgboost_pred*0.10 + lightgbm_pred*0.15+ ridge_pred*0.10+ gbr_pred*0.10+ rf_pred*0.10+ svr_pred*0.10","6680ae10":"sub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = ensemble\nsub.head()","75769e57":"sub.to_csv('submission_ensemble.csv',index=False)\n","4184eb81":"Though few features are having more than 80% missing data; I am not going to remove them right now.. since I want to build model with all data.","db2bd9b0":"salesprize is deviated from the normal distribution.Have positive skewness.\nShow peakedness","8ef8bb8c":"### Feature Engineering","f3ec7f9b":"### Model building","07658914":"### Encode Categorical features","746126f5":"#### Scatter plots between 'SalePrice' and correlated variables \n","858c6fc6":"In the feature engineering, we can remove outliers or any coloum. However right now I wish to go with all predictors, so not removing anything.","a944f91e":"The major objective is to predict house prizes with regression models.\n\nThe overall flow is data understanding, data engineering, handling missing data, encoding categorical data,\nfeature engineering and model building. This notebook aims to predict sales prizes using voting \nregressor model.\n\nI encourage you to fork this kernel, play with the code. Good luck!\n\nIf you like this kernel, please give it an upvote. Thank you!\n","1bc430ed":"#### Correlation","62713416":"#### Data understanding","36425120":"We can feel tempted to eliminate some observations (e.g. TotalBsmtSF > 3000). Since I don't want to remove any pattern so not removing outlier.","41819f8c":"### Creating submission file","160135b6":"### Exploratory Data Analysis (EDA)","022148f7":"#### Outliers analysis using scatter plots","ec555c4b":"### Handling Missing data"}}