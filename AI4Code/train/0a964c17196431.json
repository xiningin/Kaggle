{"cell_type":{"85a5cfab":"code","0df591f5":"code","9309453f":"code","62c9b3e7":"code","ab218c66":"code","7c5291d9":"code","2008e95e":"code","a60cf881":"code","b14b3a7d":"code","97c23e6e":"code","b0a563ff":"code","fbb2b5fe":"code","68ae6541":"code","f741d7a7":"code","a340b7dc":"code","ce72d1b1":"code","295461ba":"code","58473ff9":"code","19ee711a":"code","27fc7780":"code","c640b6d1":"code","05f00413":"code","3a1ca161":"code","25af1de7":"code","1d84e1a7":"code","ff780451":"code","9865fc79":"code","048d0b2f":"code","9b1e171e":"code","5508bb6d":"code","57710391":"code","4dce78ce":"code","91bb94d1":"code","5a98e365":"code","14263647":"code","93b2b555":"code","a0916a35":"code","1ae2acc7":"code","43fe0c29":"code","952bf926":"code","79e54e01":"code","2b6c9f9d":"code","69dda6aa":"code","2b6b48fe":"code","78af5bfc":"code","feae5a57":"code","bdd9f381":"code","e9811110":"code","291b58f1":"code","6906a430":"code","02c112f5":"code","ec418b94":"code","1ede1766":"code","5b039d4d":"code","ebde1af9":"code","0a8b3198":"code","5850374f":"markdown","22480965":"markdown","7d26456a":"markdown","a87ecff1":"markdown","2ba0a610":"markdown","6f92ffa4":"markdown","a80ba031":"markdown","5ca60e62":"markdown","41f58452":"markdown","6271169b":"markdown","4fc3b087":"markdown","45a4476a":"markdown","79185407":"markdown","d31108f7":"markdown","9406d18f":"markdown","8c0a5e3e":"markdown","5bcedeb8":"markdown","55ed65a9":"markdown","5c70bf0e":"markdown","044ca5ed":"markdown","4e2a1e20":"markdown","3b5920ad":"markdown","bb34cbe0":"markdown","38711857":"markdown","5d2ac50a":"markdown","7ec30ec4":"markdown","36b2a02c":"markdown","bbd0880f":"markdown","46e2b38a":"markdown","a480d283":"markdown","04679e13":"markdown","42655523":"markdown","a4548d3d":"markdown","87b54f71":"markdown"},"source":{"85a5cfab":"# For DataFrame\nimport numpy as np # for linear algebra\nimport pandas as pd # for data processing, CSV file I\/O (e.g. pd.read_csv)\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999\n\n# For Analysis\nfrom sklearn import neighbors\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\n\n\n# For Visualization\nimport plotly # visualization\nfrom plotly.graph_objs import Scatter, Figure, Layout # visualization\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot,iplot # visualization\nimport plotly.figure_factory as ff # visualization\nimport plotly.graph_objs as go # visualization\ninit_notebook_mode(connected=True) # visualization\nimport matplotlib.pyplot as plt # for data visualization\nimport seaborn as sns # for data visualization\ncolor = sns.color_palette()\n%matplotlib inline\n","0df591f5":"from subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","9309453f":"train_2016_df = pd.read_csv(\"..\/input\/train_2016_v2.csv\", parse_dates=[\"transactiondate\"])\ntrain_2016_df.shape","62c9b3e7":"train_2016_df.head()","ab218c66":"train_2017_df = pd.read_csv(\"..\/input\/train_2017.csv\", parse_dates=[\"transactiondate\"])\ntrain_2017_df.shape","7c5291d9":"train_2017_df.head()","2008e95e":"prop_2016_df = pd.read_csv(\"..\/input\/properties_2016.csv\")\nprop_2016_df.shape","a60cf881":"prop_2016_df.head()","b14b3a7d":"prop_2017_df = pd.read_csv(\"..\/input\/properties_2017.csv\")\nprop_2017_df.shape","97c23e6e":"prop_2017_df.head()","b0a563ff":"merge_2016_df = pd.merge(train_2016_df,prop_2016_df,on=\"parcelid\",how=\"left\")\nmerge_2016_df.shape","fbb2b5fe":"merge_2016_df.head()","68ae6541":"merge_2017_df = pd.merge(train_2017_df,prop_2017_df,on=\"parcelid\",how=\"left\")\nmerge_2017_df.shape","f741d7a7":"missingvalues_prop = (merge_2017_df.isnull().sum()\/len(merge_2017_df)).reset_index()\nmissingvalues_prop.columns = ['field','proportion']\nmissingvalues_prop = missingvalues_prop.sort_values(by = 'proportion', ascending = False)\nprint(missingvalues_prop)","a340b7dc":"merge_2016_df.head()","ce72d1b1":"merge_2016_df.dtypes","295461ba":"# Rename columns\nmerge_2016_df = merge_2016_df.rename(columns = {\n  \"parcelid\" : \"id_parcel\",\n  \"yearbuilt\":\"build_year\",\n  \"basementsqft\":\"area_basement\",\n  \"yardbuildingsqft17\":\"area_patio\",\n  \"yardbuildingsqft26\":\"area_shed\",\n  \"poolsizesum\":\"area_pool\",\n  \"lotsizesquarefeet\":\"area_lot\",\n  \"garagetotalsqft\":\"area_garage\",\n  \"finishedfloor1squarefeet\":\"area_firstfloor_finished\",\n  \"calculatedfinishedsquarefeet\":\"area_total_calc\",\n  \"finishedsquarefeet6\":\"area_base\",\n  \"finishedsquarefeet12\":\"area_live_finished\",\n  \"finishedsquarefeet13\":\"area_liveperi_finished\",\n  \"finishedsquarefeet15\":\"area_total_finished\",\n  \"finishedsquarefeet50\":\"area_unknown\",\n  \"unitcnt\":\"num_unit\",\n  \"numberofstories\":\"num_story\",\n  \"roomcnt\":\"num_room\",\n  \"bathroomcnt\":\"num_bathroom\",\n  \"bedroomcnt\":\"num_bedroom\",\n  \"calculatedbathnbr\":\"num_bathroom_calc\",\n  \"fullbathcnt\":\"num_bath\",\n  \"threequarterbathnbr\":\"num_75_bath\",\n  \"fireplacecnt\":\"num_fireplace\",\n  \"poolcnt\":\"num_pool\",\n  \"garagecarcnt\":\"num_garage\",\n  \"regionidcounty\":\"region_county\",\n  \"regionidcity\":\"region_city\",\n  \"regionidzip\":\"region_zip\",\n  \"regionidneighborhood\":\"region_neighbor\",\n  \"taxvaluedollarcnt\":\"tax_total\",\n  \"structuretaxvaluedollarcnt\":\"tax_building\",\n  \"landtaxvaluedollarcnt\":\"tax_land\",\n  \"taxamount\":\"tax_property\",\n  \"assessmentyear\":\"tax_year\",\n  \"taxdelinquencyflag\":\"tax_delinquency\",\n  \"taxdelinquencyyear\":\"tax_delinquency_year\",\n  \"propertyzoningdesc\":\"zoning_property\",\n  \"propertylandusetypeid\":\"zoning_landuse\",\n  \"propertycountylandusecode\":\"zoning_landuse_county\",\n  \"fireplaceflag\":\"flag_fireplace\",\n  \"hashottuborspa\":\"flag_tub\",\n  \"buildingqualitytypeid\":\"quality\",\n  \"buildingclasstypeid\":\"framing\",\n  \"typeconstructiontypeid\":\"material\",\n  \"decktypeid\":\"deck\",\n  \"storytypeid\":\"story\",\n  \"heatingorsystemtypeid\":\"heating\",\n  \"airconditioningtypeid\":\"aircon\",\n  \"architecturalstyletypeid\":\"architectural_style\"\n})","58473ff9":"merge_2016_df.head()","19ee711a":"# Rename columns\nmerge_2017_df = merge_2017_df.rename(columns = {\n  \"parcelid\" : \"id_parcel\",\n  \"yearbuilt\":\"build_year\",\n  \"basementsqft\":\"area_basement\",\n  \"yardbuildingsqft17\":\"area_patio\",\n  \"yardbuildingsqft26\":\"area_shed\",\n  \"poolsizesum\":\"area_pool\",\n  \"lotsizesquarefeet\":\"area_lot\",\n  \"garagetotalsqft\":\"area_garage\",\n  \"finishedfloor1squarefeet\":\"area_firstfloor_finished\",\n  \"calculatedfinishedsquarefeet\":\"area_total_calc\",\n  \"finishedsquarefeet6\":\"area_base\",\n  \"finishedsquarefeet12\":\"area_live_finished\",\n  \"finishedsquarefeet13\":\"area_liveperi_finished\",\n  \"finishedsquarefeet15\":\"area_total_finished\",\n  \"finishedsquarefeet50\":\"area_unknown\",\n  \"unitcnt\":\"num_unit\",\n  \"numberofstories\":\"num_story\",\n  \"roomcnt\":\"num_room\",\n  \"bathroomcnt\":\"num_bathroom\",\n  \"bedroomcnt\":\"num_bedroom\",\n  \"calculatedbathnbr\":\"num_bathroom_calc\",\n  \"fullbathcnt\":\"num_bath\",\n  \"threequarterbathnbr\":\"num_75_bath\",\n  \"fireplacecnt\":\"num_fireplace\",\n  \"poolcnt\":\"num_pool\",\n  \"garagecarcnt\":\"num_garage\",\n  \"regionidcounty\":\"region_county\",\n  \"regionidcity\":\"region_city\",\n  \"regionidzip\":\"region_zip\",\n  \"regionidneighborhood\":\"region_neighbor\",\n  \"taxvaluedollarcnt\":\"tax_total\",\n  \"structuretaxvaluedollarcnt\":\"tax_building\",\n  \"landtaxvaluedollarcnt\":\"tax_land\",\n  \"taxamount\":\"tax_property\",\n  \"assessmentyear\":\"tax_year\",\n  \"taxdelinquencyflag\":\"tax_delinquency\",\n  \"taxdelinquencyyear\":\"tax_delinquency_year\",\n  \"propertyzoningdesc\":\"zoning_property\",\n  \"propertylandusetypeid\":\"zoning_landuse\",\n  \"propertycountylandusecode\":\"zoning_landuse_county\",\n  \"fireplaceflag\":\"flag_fireplace\",\n  \"hashottuborspa\":\"flag_tub\",\n  \"buildingqualitytypeid\":\"quality\",\n  \"buildingclasstypeid\":\"framing\",\n  \"typeconstructiontypeid\":\"material\",\n  \"decktypeid\":\"deck\",\n  \"storytypeid\":\"story\",\n  \"heatingorsystemtypeid\":\"heating\",\n  \"airconditioningtypeid\":\"aircon\",\n  \"architecturalstyletypeid\":\"architectural_style\"\n})","27fc7780":"merge_2017_df.head()","c640b6d1":"merge_df_raw = merge_2016_df.append(merge_2017_df, ignore_index=True)\nmerge_df_raw.shape","05f00413":"merge_df_raw.head()","3a1ca161":"merge_df_raw[['aircon', 'architectural_style', 'num_bathroom', 'num_bedroom', 'framing', 'quality', 'num_bathroom_calc', 'deck', 'num_fireplace', 'num_bath','num_garage','flag_tub','heating','num_pool','pooltypeid10','pooltypeid2','pooltypeid7','zoning_landuse_county','zoning_landuse','zoning_property','region_city','region_county','region_neighbor','region_zip','num_room','story','num_75_bath','material','num_unit','build_year','num_story','flag_fireplace','tax_year','tax_delinquency_year']] = merge_df_raw[['aircon', 'architectural_style', 'num_bathroom', 'num_bedroom', 'framing', 'quality', 'num_bathroom_calc', 'deck', 'num_fireplace', 'num_bath','num_garage','flag_tub','heating','num_pool','pooltypeid10','pooltypeid2','pooltypeid7','zoning_landuse_county','zoning_landuse','zoning_property','region_city','region_county','region_neighbor','region_zip','num_room','story','num_75_bath','material','num_unit','build_year','num_story','flag_fireplace','tax_year','tax_delinquency_year']].astype(str)","25af1de7":"merge_df_raw.dtypes","1d84e1a7":"corrMatt = merge_df_raw.corr()\nmask = np.array(corrMatt)\nmask[np.tril_indices_from(mask)] = False\nfig,ax= plt.subplots()\nfig.set_size_inches(20,10)\nsns.heatmap(corrMatt, mask=mask,vmax=.8, square=True)","ff780451":"# LogErorr\ndf_train = merge_df_raw.copy()\ndf_train.loc[:,'abs_logerror'] = df_train['logerror'].abs()\nworst_prediction = df_train['abs_logerror'].quantile(q=.95)\n\n\ntrace0 = go.Scatter(\n    y = df_train[(df_train['fips']==6037)&(df_train['abs_logerror']>worst_prediction)].\\\n                groupby('build_year')['abs_logerror'].mean(),\n    x = df_train[(df_train['fips']==6037)&(df_train['abs_logerror']>worst_prediction)].\\\n                groupby('build_year')['abs_logerror'].mean().index,\n    mode = 'lines+markers',\n    name = \"Los Angeles\", \n)\ntrace1 = go.Scatter(\n    y = df_train[(df_train['fips']==6059)&(df_train['abs_logerror']>worst_prediction)].\\\n                groupby('build_year')['abs_logerror'].mean(),\n    x = df_train[(df_train['fips']==6059)&(df_train['abs_logerror']>worst_prediction)].\\\n                groupby('build_year')['abs_logerror'].mean().index,\n    mode = 'lines+markers',\n    name = \"Orange County\"\n)\ntrace2 = go.Scatter(\n    y = df_train[(df_train['fips']==6111)&(df_train['abs_logerror']>worst_prediction)].\\\n                groupby('build_year')['abs_logerror'].mean(),\n    x = df_train[(df_train['fips']==6111)&(df_train['abs_logerror']>worst_prediction)].\\\n                groupby('build_year')['abs_logerror'].mean().index,\n    mode = 'lines+markers',\n    name = \"Ventura County\"\n)\ndata = [trace0, trace1, trace2]\n\nplotly.offline.iplot(data, filename='line-mode')","9865fc79":"merge_df_raw['zoning_landuse'].unique()","048d0b2f":"cnt_srs = merge_df_raw['zoning_landuse'].value_counts()\nplt.figure(figsize=(12,6))\nsns.barplot(cnt_srs.index, cnt_srs.values, alpha=0.8, color=color[3])\nplt.xticks(rotation='vertical')\nplt.xlabel('zoning_landuse', fontsize=12)\nplt.ylabel('Number of Occurrences', fontsize=12)\nplt.show()","9b1e171e":"# \uc544\ud30c\ud2b8 corr\ndf = merge_df_raw.loc[merge_df_raw['zoning_landuse']=='266.0']\ncorrMatt = df.corr()\nmask = np.array(corrMatt)\nmask[np.tril_indices_from(mask)] = False\nfig,ax= plt.subplots()\nfig.set_size_inches(20,10)\nsns.heatmap(corrMatt, mask=mask,vmax=.8, square=True)","5508bb6d":"# \ube44 \uc544\ud30c\ud2b8 corr\ndf = merge_df_raw.loc[merge_df_raw['zoning_landuse']!='266.0']\ncorrMatt = df.corr()\nmask = np.array(corrMatt)\nmask[np.tril_indices_from(mask)] = False\nfig,ax= plt.subplots()\nfig.set_size_inches(20,10)\nsns.heatmap(corrMatt, mask=mask,vmax=.8, square=True)","57710391":"continuous = ['area_basement','area_firstfloor_finished','area_total_calc','area_live_finished','area_liveperi_finished','area_total_finished','area_unknown','area_base','area_garage','area_lot','area_pool','area_patio','area_shed']\ndiscrete = ['num_bathroom','num_bedroom','num_bathroom_calc','num_bath','num_garage','num_pool','num_room','num_75_bath','num_unit','num_story']\ncategories = ['aircon','architectural_style','framing','quality','deck','heating','pooltypeid2','pooltypeid7','story','material','build_year']\n","4dce78ce":"### Continuous variable plots\nfor col in continuous:\n    values = merge_df_raw[col].dropna()\n    lower = np.percentile(values, 1)\n    upper = np.percentile(values, 99)\n    fig = plt.figure(figsize=(18,9));\n    sns.distplot(values[(values>lower) & (values<upper)], color='Sienna', ax = plt.subplot(121));\n    sns.boxplot(y=values, color='Sienna', ax = plt.subplot(122));\n    plt.suptitle(col, fontsize=16)","91bb94d1":"merge_df_raw['aircon'].dropna().head(10)","5a98e365":"merge_df_raw[discrete] = merge_df_raw[discrete].astype(float)","14263647":"### Discrete variable plots\nNanAsZero = ['num_pool', 'num_75_bath']\nfor col in discrete:\n    if col in NanAsZero:\n        merge_df_raw[col].fillna(0, inplace=True)\n    values = merge_df_raw[col].dropna()  \n    fig = plt.figure(figsize=(18,9));\n    sns.countplot(x=values, color='Sienna', ax = plt.subplot(121));\n    sns.boxplot(y=values, color='Sienna', ax = plt.subplot(122));\n    plt.suptitle(col, fontsize=16)","93b2b555":"### Categorical variable plots\nfor col in categories:\n    values = merge_df_raw[col].astype('str').value_counts(dropna=False).to_frame().reset_index()\n    if len(values) > 30:\n        continue\n    values.columns = [col, 'counts']\n    fig = plt.figure(figsize=(18,9))\n    ax = sns.barplot(x=col, y='counts', color='Sienna', data=values, order=values[col]);\n    plt.xlabel(col);\n    plt.ylabel('Number of occurrences')\n    plt.suptitle(col, fontsize=16)\n\n    ### Adding percents over bars\n    height = [p.get_height() for p in ax.patches]    \n    total = sum(height)\n    for i, p in enumerate(ax.patches):    \n        ax.text(p.get_x()+p.get_width()\/2,\n                height[i]+total*0.01,\n                '{:1.0%}'.format(height[i]\/total),\n                ha=\"center\")    ","a0916a35":"### Continuous variable vs logerror plots\nfor col in continuous:     \n    fig = plt.figure(figsize=(18,9));\n    sns.barplot(x='logerror', y=col, data=merge_df_raw, ax = plt.subplot(121),\n                order=['Large Negative Error', 'Medium Negative Error','Small Error',\n                       'Medium Positive Error', 'Large Positive Error']);\n    plt.xlabel('LogError Bin');\n    plt.ylabel('Average {}'.format(col));\n    sns.regplot(x='logerror', y=col, data=merge_df_raw, color='Sienna', ax = plt.subplot(122));\n    plt.suptitle('LogError vs {}'.format(col), fontsize=16)   ","1ae2acc7":"df = merge_df_raw.loc[(merge_df_raw['zoning_landuse']!='266.0')]\nfig = plt.figure(figsize=(18,9));\nsns.barplot(x='logerror', y='area_total_calc', data=df, ax = plt.subplot(121),\n            order=['Large Negative Error', 'Medium Negative Error','Small Error',\n                   'Medium Positive Error', 'Large Positive Error']);\nplt.xlabel('LogError Bin');\nplt.ylabel('Average {}'.format(col));\nsns.regplot(x='logerror', y='area_total_calc', data=df, color='Sienna', ax = plt.subplot(122));\nplt.suptitle('LogError vs {}'.format(col), fontsize=16)   ","43fe0c29":"continuous = ['area_basement','area_firstfloor_finished','area_total_calc','area_live_finished','area_liveperi_finished','area_total_finished','area_unknown','area_base','area_garage','area_lot','area_pool','area_patio','area_shed']\ndiscrete = ['num_bathroom','num_bedroom','num_bathroom_calc','num_bath','num_garage','num_pool','num_room','num_75_bath','num_unit','num_story']\ncategories = ['aircon','architectural_style','framing','quality','deck','heating','pooltypeid2','pooltypeid7','story','material','build_year']\n","952bf926":"plt.figure(figsize=(12,12))\nsns.jointplot(x=merge_df_raw.latitude.values, y=merge_df_raw.longitude.values, size=10)\nplt.ylabel('Longitude', fontsize=12)\nplt.xlabel('Latitude', fontsize=12)\nplt.show()","79e54e01":"discrete = ['num_fireplace']\ncategories = ['flag_tub','zoning_landuse_county','zoning_landuse','zoning_property','region_city','region_county','region_neighbor','region_zip','flag_fireplace']","2b6c9f9d":"### Categorical variable plots\nfor col in categories:\n    values = merge_df_raw[col].astype('str').value_counts(dropna=False).to_frame().reset_index()\n    if len(values) > 30:\n        continue\n    values.columns = [col, 'counts']\n    fig = plt.figure(figsize=(18,9))\n    ax = sns.barplot(x=col, y='counts', color='Sienna', data=values, order=values[col]);\n    plt.xlabel(col);\n    plt.ylabel('Number of occurrences')\n    plt.suptitle(col, fontsize=16)\n\n    ### Adding percents over bars\n    height = [p.get_height() for p in ax.patches]    \n    total = sum(height)\n    for i, p in enumerate(ax.patches):    \n        ax.text(p.get_x()+p.get_width()\/2,\n                height[i]+total*0.01,\n                '{:1.0%}'.format(height[i]\/total),\n                ha=\"center\")    ","69dda6aa":"### Continuous variable vs logerror plots\nfor col in continuous:     \n    fig = plt.figure(figsize=(18,9));\n    sns.barplot(x='logerror', y=col, data=merge_df_raw, ax = plt.subplot(121),\n                order=['Large Negative Error', 'Medium Negative Error','Small Error',\n                       'Medium Positive Error', 'Large Positive Error']);\n    plt.xlabel('LogError Bin');\n    plt.ylabel('Average {}'.format(col));\n    sns.regplot(x='logerror', y=col, data=merge_df_raw, color='Sienna', ax = plt.subplot(122));\n    plt.suptitle('LogError vs {}'.format(col), fontsize=16)   ","2b6b48fe":"merge_df =  merge_df_raw.copy()","78af5bfc":"merge_df = merge_df[np.isfinite(merge_df['latitude'])]\nmerge_df = merge_df[np.isfinite(merge_df['longitude'])]","feae5a57":"# NULL Check\nmissing_df = merge_df.isnull().sum(axis=0).reset_index()\nmissing_df.columns = ['column_name', 'missing_count']\nmissing_df = missing_df.ix[missing_df['missing_count']>0]\nmissing_df = missing_df.sort_values(by='missing_count')\n\nind = np.arange(missing_df.shape[0])\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(12,18))\nrects = ax.barh(ind, missing_df.missing_count.values, color='blue')\nax.set_yticks(ind)\nax.set_yticklabels(missing_df.column_name.values, rotation='horizontal')\nax.set_xlabel(\"Count of missing values\")\nax.set_title(\"Number of missing values in each column\")\nplt.show()","bdd9f381":"merge_df = merge_df.drop(['framing', 'area_liveperi_finished', 'area_basement','pooltypeid10','story','area_shed','material','area_base','area_total_finished','area_unknown','area_firstfloor_finished'], axis=1)\nmerge_df = merge_df.drop(['num_bathroom_calc','num_bath'], axis=1)","e9811110":"merge_df = merge_2016_df.append(merge_2017_df, ignore_index=True)\nmerge_df.shape","291b58f1":"index = merge_df.flag_tub.isnull()\nmerge_df.loc[index,'flag_tub'] = \"None\"\n# pooltypeid10(does home have a Spa or hot tub) seems to be inconcistent with the 'hashottuborspa' field - these two fields should have the same information I assume?\nprint(merge_df.flag_tub.value_counts())\n\n#Assume if the pooltype id is null then pool\/hottub doesnt exist \nindex = merge_df.pooltypeid2.isnull()\nmerge_df.loc[index,'pooltypeid2'] = 0\nprint(merge_df.pooltypeid2.value_counts())\n\nindex = merge_df.pooltypeid7.isnull()\nmerge_df.loc[index,'pooltypeid7'] = 0\nprint(merge_df.pooltypeid7.value_counts())\n\nindex = merge_df.num_pool.isnull()\nmerge_df.loc[index,'num_pool'] = 0\nprint(merge_df.num_pool.value_counts())\n\nindex = merge_df.num_fireplace.isnull()\nmerge_df.loc[index,'num_fireplace'] = 0\nprint(merge_df.num_fireplace.value_counts())\n\n#Tax deliquency flag - assume if it is null then doesn't exist\nindex = merge_df.tax_delinquency.isnull()\nmerge_df.loc[index,'tax_delinquency'] = \"None\"\nprint(merge_df.tax_delinquency.value_counts())\n\n\n#Assume if Null in garage count it means there are no garages\nindex = merge_df.num_garage.isnull()\nmerge_df.loc[index,'num_garage'] = 0\nprint(merge_df.num_garage.value_counts())\n\n#Likewise no garage means the size is 0 by default\nindex = merge_df.area_garage.isnull()\nmerge_df.loc[index,'area_garage'] = 0\nprint(merge_df.area_garage.value_counts())\n","6906a430":"#There seems to be inconsistency between the fireplaceflag and fireplace cnt - my guess is that these should be the same\nprint(merge_df.flag_fireplace.isnull().sum())\n\n#There seems to be 80668 properties without fireplace according to the 'fireplacecnt' but the 'fireplace flag' says they are 90053 missing values\n#Lets instead create the fireplaceflag from scratch using 'fireplacecnt' as there are less missing values here\nmerge_df['flag_fireplace']= \"No\"\nmerge_df.loc[merge_df['num_fireplace']>0,'flag_fireplace']= \"Yes\"\nprint(merge_df.flag_fireplace.isnull().sum())","02c112f5":"#Let's fill in some missing values using the most common value for those variables where this might be a sensible approach\n#AC Type - Mostly 1's, which corresponds to central AC. Reasonable to assume most other properties are similar.\nmerge_df['aircon'].value_counts()\nindex = merge_df.aircon.isnull()\nmerge_df.loc[index,'aircon'] = 1\nprint(merge_df.aircon.value_counts())\n\n#heating or system - Mostly 2, which corresponds to central heating so seems reasonable to assume most other properties have central heating  \nprint(merge_df['heating'].value_counts())\nindex = merge_df.heating.isnull()\nmerge_df.loc[index,'heating'] = 2\n\n# 'threequarterbathnbr' - not an important variable according to https:\/\/www.kaggle.com\/nikunjm88\/creating-additional-features, so fill with most common value\nprint(merge_df['num_75_bath'].value_counts())\nindex = merge_df.num_75_bath.isnull()\nmerge_df.loc[index,'num_75_bath'] = 1","ec418b94":"merge_df.shape","1ede1766":"missingvalues_prop = (merge_df.isnull().sum()\/len(merge_df)).reset_index()\nmissingvalues_prop.columns = ['field','proportion']\nmissingvalues_prop = missingvalues_prop.sort_values(by = 'proportion', ascending = False)\nprint(missingvalues_prop)\nmissingvaluescols = missingvalues_prop[missingvalues_prop['proportion'] > 0.97].field.tolist()\nmerge_df = merge_df.drop(missingvaluescols, axis=1)","5b039d4d":"def fillna_knn2( df, base, target, fraction = 1, threshold = 10, n_neighbors = 5 ):\n    assert isinstance( base , list ) or isinstance( base , np.ndarray ) and isinstance( target, str ) \n    whole = [ target ] + base\n    \n    miss = df[target].isnull()\n    notmiss = ~miss \n    nummiss = miss.sum()\n    \n    enc = OneHotEncoder()\n    X_target = df.loc[ notmiss, whole ].sample( frac = fraction )\n    \n    enc.fit( X_target[ target ].unique().reshape( (-1,1) ) )\n    \n    Y = enc.transform( X_target[ target ].values.reshape((-1,1)) ).toarray()\n    X = X_target[ base  ]\n    \n    print( 'fitting' )\n    n_neighbors = n_neighbors\n    clf = neighbors.KNeighborsClassifier( n_neighbors, weights = 'uniform' )\n    clf.fit( X, Y )\n    \n    print( 'the shape of active features: ' ,enc.active_features_.shape )\n    \n    print( 'predicting' )\n    Z = clf.predict(df.loc[miss, base])\n    \n    numunperdicted = Z[:,0].sum()\n    if numunperdicted \/ nummiss *100 < threshold :\n        print( 'writing result to df' )    \n        df.loc[ miss, target ]  = np.dot( Z , enc.active_features_ )\n        print( 'num of unperdictable data: ', numunperdicted )\n        return enc\n    else:\n        print( 'out of threshold: {}% > {}%'.format( numunperdicted \/ nummiss *100 , threshold ) )\n\n#function to deal with variables that are actually string\/categories\ndef zoningcode2int( df, target ):\n    storenull = df[ target ].isnull()\n    enc = LabelEncoder( )\n    df[ target ] = df[ target ].astype( str )\n\n    print('fit and transform')\n    df[ target ]= enc.fit_transform( df[ target ].values )\n    print( 'num of categories: ', enc.classes_.shape  )\n    df.loc[ storenull, target ] = np.nan\n    print('recover the nan value')\n    return enc","ebde1af9":"#buildingqualitytypeid - assume it is the similar to the nearest property. Probably makes senses if its a property in a block of flats, i.e if block was built all at the same time and therefore all flats will have similar quality \n#Use the same logic for propertycountylandusecode (assume it is same as nearest property i.e two properties right next to each other are likely to have the same code) & propertyzoningdesc. \n#These assumptions are only reasonable if you actually have nearby properties to the one with the missing value\n'''\nfillna_knn( df = merge_df,\n                  base = [ 'latitude', 'longitude' ] ,\n                  target = 'quality', fraction = 0.15, n_neighbors = 1 )\n\n\nzoningcode2int( df = merge_df,\n                            target = 'zoning_landuse_county' )\nfillna_knn( df = merge_df,\n                  base = [ 'latitude', 'longitude' ] ,\n                  target = 'zoning_landuse_county', fraction = 0.15, n_neighbors = 1 )\n\nzoningcode2int( df = merge_df,\n                            target = 'zoning_property' )\n\nfillna_knn( df = merge_df,\n                  base = [ 'latitude', 'longitude' ] ,\n                  target = 'zoning_property', fraction = 0.15, n_neighbors = 1 )\n\n#regionidcity, regionidneighborhood & regionidzip - assume it is the same as the nereast property. \n#As mentioned above, this is ok if there's a property very nearby to the one with missing values (I leave it up to the reader to check if this is the case!)\nfillna_knn( df = merge_df,\n                  base = [ 'latitude', 'longitude' ] ,\n                  target = 'region_city', fraction = 0.15, n_neighbors = 1 )\n\nfillna_knn( df = merge_df,\n                  base = [ 'latitude', 'longitude' ] ,\n                  target = 'region_neighbor', fraction = 0.15, n_neighbors = 1 )\n\nfillna_knn( df = merge_df,\n                  base = [ 'latitude', 'longitude' ] ,\n                  target = 'region_zip', fraction = 0.15, n_neighbors = 1 )\n\n#unitcnt - the number of structures the unit is built into. Assume it is the same as the nearest properties. If the property with missing values is in a block of flats or in a terrace street then this is probably ok - but again I leave it up to the reader to check if this is the case!\nfillna_knn( df = merge_df,\n                  base = [ 'latitude', 'longitude' ] ,\n                  target = 'num_unit', fraction = 0.15, n_neighbors = 1 )\n\n#yearbuilt - assume it is the same as the nearest property. This assumes properties all near to each other were built around the same time\nfillna_knn( df = merge_df,\n                  base = [ 'latitude', 'longitude' ] ,\n                  target = 'build_year', fraction = 0.15, n_neighbors = 1 )\n\n#lot size square feet - not sure what to do about this one. Lets use nearest neighbours. Assume it has same lot size as property closest to it\nfillna_knn( df = merge_df,\n                  base = [ 'latitude', 'longitude' ] ,\n                  target = 'area_lot', fraction = 0.15, n_neighbors = 1 )\n'''","0a8b3198":"merge_df.to_csv('merge_df.csv',index=False)","5850374f":"<a id=\"10\"><\/a> <br>\n# 3.2 House \ub370\uc774\ud130","22480965":"<a id=\"3\"><\/a> <br>\n# 1.2 \uc0ac\uc6a9 Library ","7d26456a":"<a id=\"11\"><\/a> <br>\n# 3.3 Location \ub370\uc774\ud130","a87ecff1":"<a id=\"5\"><\/a> <br>\n# 2.1 \ub370\uc774\ud130 \uc14b \ud655\uc778","2ba0a610":"\ub2e4\ub978 \ubcc0\uc218\ub97c \uc774\uc6a9\ud574\uc11c Null \uac12 \ucc98\ub9ac","6f92ffa4":"Merge","a80ba031":"<a id=\"2\"><\/a> <br>\n# 1.1 \ub300\ud68c \uac1c\uc694","5ca60e62":"<a id=\"6\"><\/a> <br>\n# 2.2 \ub370\uc774\ud130 \ubcc0\uc218 \uc815\uc758","41f58452":"Properties Data Set","6271169b":"References\n\nhttps:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-notebook-zillow-prize\nhttps:\/\/www.kaggle.com\/neviadomski\/zillow-s-home-value-exploratory-data-analysis\nhttps:\/\/www.kaggle.com\/kueipo\/simple-eda-geo-data-time-series\n","4fc3b087":"\uc704\uce58 \uae30\ubc18 Null \ucc98\ub9ac\n\n- Null \uac12\uc744 \uac00\uc9c4 \ubd80\ub3d9\uc0b0\uc758 \uacbd\uc6b0 \uc8fc\ubcc0 \ubd80\ub3d9\uc0b0\uacfc \ube44\uc2b7\ud55c \ud2b9\uc131\uc744 \uac16\uace0 \uc788\uc744 \uac83\uc774\ub2e4. \n>Target \ubd80\ub3d9\uc0b0\uc758 \uc8fc\ubcc0 \ubd80\ub3d9\uc0b0\uc744 KNN\uc73c\ub85c \ubd84\uc11d\ud574\uc11c null \ucc98\ub9ac \ud55c\ub2e4.","45a4476a":"\ube48\ub3c4\uc218\uc5d0 \ub530\ub978 Null \uac12 \ucc98\ub9ac","79185407":"1. [Introduction:](#1)\n    1. [\ub300\ud68c \uac1c\uc694 \ubc0f \ubbf8\uad6d \ubd80\ub3d9\uc0b0 \ud2b9\uc9d5](#2)\n    1. [\uc0ac\uc6a9 Library](#3)\n1. [\ub370\uc774\ud130 \ud655\uc778](#4)\n    1. [\ub370\uc774\ud130 \uc14b \ud655\uc778](#5)\n    1. [\ub370\uc774\ud130 \ubcc0\uc218 \uc815\uc758](#6)\n    1. [\ub370\uc774\ud130 \ubcc0\uc218\uba85 \ubcc0\uacbd](#7)\n1. [EDA](#8)\n    1. [\uc804\uccb4 \ub370\uc774\ud130 \uac1c\uc694](#9)\n    1. [House \ub370\uc774\ud130](#10)\n    1. [Location \ub370\uc774\ud130](#11)\n    1. [Finance \ub370\uc774\ud130](#12)\n1. [\ub370\uc774\ud130 \ubcc0\ud658](#13)\n    1. [Null Data \ucc98\ub9ac](#14)\n    1. [\ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131](#15)\n    1. [One-hot Encoding](#16)\n1. [\ubaa8\ub378\ub9c1 \ubc0f \ud3c9\uac00](#35)\n    1. [GLM](#36)\n    1. [Light Gradient Boosting](#37)\n1. [\uacb0\ub860](#38)\n    1. [\ubaa8\ub378 \uc120\uc815](#39)\n    1. [\ucd94\uac00\uc801\uc778 \uc811\uadfc\ubc95](#40)","d31108f7":"<a id=\"13\"><\/a> <br>\n# 4. \ub370\uc774\ud130 \ubcc0\ud658","9406d18f":"\uac74\ucd95\ub144\ub3c4\ubcc4 LogError","8c0a5e3e":"<a id=\"4\"><\/a> <br>\n# 2. \ub370\uc774\ud130 \ud655\uc778","5bcedeb8":"1. Hypothesis : \uc88b\uc740 \uc804\uc6d0 \uc8fc\ud0dd\uc77c\uc218\ub85d \ub370\uc774\ud130\uac00 \ubd80\uc871\ud574\uc11c error\uac00 \ub192\uc744 \uac83\uc774\ub2e4.\n> Result : False, \uba74\uc801\uc774 \uc791\uc744 \uc218\ub85d logerror\uac00 \ub354 \ucef8\ub2e4.\n\n\n\n","55ed65a9":"31 Commercial\/Office\/Residential Mixed Used : \uc0c1\uc5c5\uc6a9\/\uc0ac\ubb34\uc2e4\/\uc8fc\uac70 \ubcf5\ud569\uc6a9\ub3c4\uac1c\ubc1c \n\n47 Store\/Office (Mixed Use) : \uc0c1\uc810\/\uc0ac\ubb34\uc2e4 \ubcf5\ud569\uc6a9\ub3c4\uac1c\ubc1c\n\n246 Duplex (2 Units, Any Combination): \ub4c0\ud50c\ub809\uc2a4 \ud558\uc6b0\uc2a4(duplex house)\ub294 \ud55c \uac1c\uc758 \ud544\uc9c0\uc5d0 \ub450 \uac00\uad6c\uac00 \ub098\ub780\ud788 \uc9c0\uc5b4\uc9c4 \ud615\ud0dc\uc758 \uc9d1\uc744 \ub9d0\ud55c\ub2e4.\n\n247 Triplex (3 Units, Any Combination) : \ud55c \uac1c\uc758 \ud544\uc9c0\uc5d0 \uc138 \uac00\uad6c\uac00 \ub098\ub780\ud788 \uc9c0\uc5b4\uc9c4 \ud615\ud0dc\uc758 \uc9d1\uc744 \ub9d0\ud55c\ub2e4.\n\n248 Quadruplex (4 Units, Any Combination) : \ud55c \uac1c\uc758 \ud544\uc9c0\uc5d0 \ub124 \uac00\uad6c\uac00 \ub098\ub780\ud788 \uc9c0\uc5b4\uc9c4 \ud615\ud0dc\uc758 \uc9d1\uc744 \ub9d0\ud55c\ub2e4.\n\n260 Residential General : \uc77c\ubc18\uc8fc\uac70\uc9c0\uc5ed\uc740 \uc131\uc7a5\uacfc \uc8fc\ud0dd\uc758 \ub2e4\uc591\uc131\uc774 \uc608\uc0c1\ub418\ub294 \uc9c0\uc5ed\uc758 \ud1a0\uc9c0\uc5d0 \uc801\uc6a9\ub41c\ub2e4. \uc5ec\uae30\uc5d0\ub294 \ub2e8\ub3c5\uc8fc\ud0dd, \ub2e4\uc138\ub300\uc8fc\ud0dd, \uc774\ub3d9\uc8fc\ud0dd \ub4f1\uc774 \ud3ec\ud568\ub41c\ub2e4.\n\n261 Single Family Residential : \ub2e8\ub3c5\uc8fc\ud0dd\n\n263 Mobile Home : \uc774\ub3d9\uc2dd \uc8fc\ud0dd (\ub300\ucd9cX)\n\n264 Town House : \ud0c0\uc6b4\ud648\uc740 \ubcf4\ud1b5 2\uce35\uc774\ub098 3\uce35\uc73c\ub85c \ub418\uc5b4 \uc788\uc5b4 \ud55c\uac00\uc871\uc774 \uc804\uce35\uc744 \ub2e4 \uc0ac\uc6a9\ud558\uc9c0\ub9cc \uc591 \uc606\uc73c\ub85c\ub294 \uc606\uc9d1\uacfc \ubd99\uc5b4\uc788\ub2e4. \ubcf4\ud1b5 \ud0c0\uc6b4\ud648\uc740 \uac8c\uc774\ud2b8\uac00 \uc788\ub294 \ub2e8\uc9c0\ub0b4\uc5d0 \uc788\uc5b4 PUD\uc640 \uac19\uc774 \uc5ec\ub7ec \uacf5\uc6a9\uc2dc\uc124\ub3c4 \uc990\uae38 \uc218 \uc788\uace0 \uc9d1\uc55e\uc5d0\ub294 \uc794\ub514\ubc2d\uc774 \uc788\uace0 \ubc14\ube44\ud050\ub97c \ud560 \uc218 \uc788\ub294 \uc791\uc740 \ub9c8\ub2f9\uc774 \uc788\uc73c\ub098 \uc790\uae30 \uc18c\uc720\uc758 \ub300\uc9c0\uac00 \ub530\ub85c \uc788\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. \ub2e8\uc9c0 \uac74\ubb3c\uc5d0 \ub300\ud55c \uc18c\uc720\uad8c\uc774 \uc788\ub294 \uac83\uc774 PUD\uc640 \ub2e4\ub978 \uc810\uc774\ub2e4.\n\n265 Cluster Home : \uc8fc\uac70\uc9c0\ub4e4\uc774 \ub808\ud06c\ub9ac\uc5d0\uc774\uc158\uc6a9\uc73c\ub85c \ub0a8\uaca8\uc9c4 \uacf5\ub3d9 \uad6c\uc5ed\uacfc \ubc00\uc811\ud558\uac8c \uadf8\ub8f9\ud654. \uc0ac\uc2e4\uc0c1 \uc8fc\ubbfc\ub4e4\uc740 \ub9e4\uc6b0 \uc791\uc740 \uc57c\ub4dc\ub97c \uac00\uc9c0\uace0 \uc788\uc9c0\ub9cc \ub113\uc740 \uacf5\ud1b5\uc758 \uacf5\uac04\uc744 \uc990\uae38 \uc218 \uc788\ub2e4.\n\n266 Condominium : \ucf58\ub3c4\ubbf8\ub2c8\uc5c4(Condominium)\uc740 \ub300\ud615 \ubd80\ub3d9\uc0b0 \ub2e8\uc9c0\ub97c \uac1c\ubcc4 \ub2e8\uc704\ub85c \ub098\ub204\uc5b4 \ub9e4\uac01\ud558\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4. \uc18c\uc720\uad8c\uc740 \ubcf4\ud1b5 \ucf58\ub3c4 \uad00\ub9ac\uc5d0 \uc758\ud574 \ud1b5\uc81c\ub418\ub294 \ud2b9\uc815 \"\uacf5\ud1b5 \uc18d\uc131\"\uc5d0 \ub300\ud55c \ub3c5\uc810\uc801 \uc9c0\ubd84\uc744 \ud3ec\ud568\ud55c\ub2e4. \ucf58\ub3c4\ubbf8\ub2c8\uc5c4 \uad00\ub9ac\ub294 \ubcf4\ud1b5 \uc794\ub514 \uc815\ube44\ub098 \uc81c\uc124 \ub4f1 \ub2e8\uc9c0\uc758 \uc77c\uc0c1\uc801\uc778 \uc6b4\uc601\uc744 \ubcf4\ub294 \ub2e8\uc704\uc8fc\ub4e4\ub85c \uad6c\uc131\ub41c\ub2e4.\n\n267 Cooperative : \ud611\ub3d9\uc8fc\ud0dd, \uacf5\uc720\uc9d1\ud569 \uc8fc\ud0dd \ub4f1\uc73c\ub85c\ub3c4 \ubd88\ub9b0\ub2e4. \ucf54\ud558\uc6b0\uc9d5\uc740 \ud504\ub77c\uc774\ubc84\uc2dc\uc640 \uc790\uc2e0\uc758 \uc695\uad6c\ub97c \ucda9\uc871\uc2dc\ud0a4\uba74\uc11c \uc774\uc6c3\uacfc \ud611\ub3d9\uc0dd\ud65c\uc744 \ud558\ub294 \uacf5\ub3d9\uccb4 \uc8fc\uac70\ub2e8\uc9c0\uc774\ub2e4. \uacf5\ub3d9\uc73c\ub85c \uc774\uc6a9\ud558\ub294 \uacf5\ub3d9\uc0dd\ud65c\uc2dc\uc124, \uc625\uc678\uacf5\uac04 \ub4f1\uc758 \uacf5\uc720\uc2dc\uc124\uc774 \uac16\ucd94\uc5b4\uc838 \uc788\uc5b4 \uc2dd\uc0ac\uc900\ube44, \uac00\uc815\uad00\ub9ac, \uc721\uc544 \ub4f1\uacfc \uac19\uc740 \uc77c\uc0c1\uc801\uc778 \ud65c\ub3d9\uc744 \uacf5\ub3d9\uc73c\ub85c \ud55c\ub2e4.\n\n269 Planned Unit Development :  \uac8c\uc774\ud2b8\uac00 \uc788\ub294 \ub2e8\uc9c0\ub97c \uc870\uc131\ud558\uace0 \ub2e8\uc9c0 \ub0b4\uc5d0 \uc218\uc601\uc7a5\uc774\ub098 \ud14c\ub2c8\uc2a4\ucf54\ud2b8, \ub610\ub294 \ubc14\ubca0\ud050\ub97c \ud560 \uc218 \uc788\ub294 \ub113\uc9c1\ud55c \ud30c\ud2f0\uc7a5\uc18c \uac19\uc740 \uacf5\uc6a9\uc2dc\uc124\uc744 \ub9cc\ub4e4\uc5b4 \ud568\uaed8 \uc0ac\uc6a9\ud558\uace0 \uad00\ub9ac\ube44\ub97c \ubaa8\uc544 \uacf5\ub3d9\uc73c\ub85c \uad00\ub9ac\ud558\ub294 PUD(planned unit development)\uac00 \uc810\uc810 \ub298\uc5b4\ub098\ub294 \ucd94\uc138\uc774\ub2e4. \ub2e8\uc9c0\uc5d0 \uac8c\uc774\ud2b8\uac00 \uc788\uc5b4 \ubc29\ubc94\uc774 \ud2b9\ud788 \uc798\ub418\uc5b4 \uc788\ub294 \uacf3\ub3c4 \uc788\uace0 \uac8c\uc774\ud2b8\uac00 \uc5c6\ub294 \uacbd\uc6b0\ub3c4 \uc788\ub294\ub370, PUD\ub294 \uac01 \uc720\ub2db\ub9c8\ub2e4 \uc790\uae30\uc758 \ub300\uc9c0\ub97c \uc18c\uc720\ud558\uace0 \uc788\ub294 \uac83\uc774 \ud2b9\uc9d5\uc774\uace0 \ub545\uc758 \ud06c\uae30\ub294 \uc77c\ubc18 \ub2e8\ub3c5\uc8fc\ud0dd\ubcf4\ub2e4\ub294 \uc791\ub2e4.\n\n275 Manufactured, Modular, Prefabricated Homes : \uc870\ub9bd\uc2dd \uc8fc\ud0dd(\ub300\ucd9c O)","5c70bf0e":"* 0 parcelid\n* logerror\n* transactiondate : \uac70\ub798 \uc77c \n* transaction_month : \uac70\ub798 \uc6d4 \n* airconditioningtypeid : \ub0c9\ubc29 \uc2dc\uc2a4\ud15c \uc885\ub958\n    \n    [Category] \n    1 Centra \n    2 Chilled Water \n    3 Evaporative Cooler \n    4 Geo Thermal \n    5 None \n    6 Other \n    7 Packaged AC Unit \n    8 Partial \n    9 Refrigeration \n    10 Ventilation \n    11 Wall Unit \n    12 Window Unit \n    13 Yes \n* architecturalstyletypeid : \uac74\ubb3c \uac74\ucd95 \uc591\uc2dd \n\n    [Category] \n    1 A-Frame \n    2 Bungalow \n    3 Cape Cod \n    4 Cottage \n    5 Colonial \n    6 Custom \n    7 Contemporary \n    8 Conventional \n    9 Dome \n    10 French Provincial \n    11 Georgian \n    12 High Rise \n    13 Historical \n    14 Log Cabin\/Rustic \n    15 Mediterranean \n    16 Modern \n    17 Mansion \n    18 English \n    19 Other \n    20 Prefab \n    21 Ranch\/Rambler \n    22 Raised Ranch \n    23 Spanish \n    24 Traditional \n    25 Tudor \n    26 Unfinished\/Under Construction \n    27 Victorian \n* basementsqft : \uc9c0\ud558\uc2e4 \n* bathroomcnt : \ud654\uc7a5\uc2e4 \uac2f\uc218 \n* bedroomcnt : \uce68\uc2e4 \uac2f\uc218\n* buildingclasstypeid : \uac74\ubb3c\uc758 \ubf08\ub300 \uad6c\uc870 \n\n    [Category] \n    1 Buildings having fireproofed structural steel frames carrying all wall, floor and roof loads. Wall, floor and roof structures are built of non-combustible materials. \n    2 Buildings having fireproofed reinforced concrete frames carrying all wall floor and roof loads which are all non-combustible. \n    3 Buildings having exterior walls built of a non-combustible material such as brick, concrete, block or poured concrete. Interior partitions and roof structures are built of combustible materials. Floor may be concrete or wood frame. \n    4 Buildings having wood or wood and steel frames \n    5 Specialized buildings that do not fit in any of the above categories \n* buildingqualitytypeid : \uac74\ubb3c\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc \ud3c9\uac00 \uc810\uc218\n* calculatedbathnbr : \ud654\uc7a5\uc2e4 \uac2f\uc218 \n* decktypeid : \ub370\ud06c \ud0c0\uc785 \n* finishedfloor1squarefeet : 1\uce35 \uc804\uc6a9\uba74\uc801 \n* calculatedfinishedsquarefeet : \uc804\uccb4 \uc804\uc6a9\uba74\uc801 \n* finishedsquarefeet12 : Finished living area\n* finishedsquarefeet13 : Perimeter living area\n* finishedsquarefeet15 : Total area\n* finishedsquarefeet50 :  Size of the finished living area on the first (entry) floor of the home\n* finishedsquarefeet6 : Base unfinished and finished area\n* fips : \uc5f0\ubc29\uc815\ubcf4\ucc98\ub9ac\ud45c\uc900\ucf54\ub4dc\n* fireplacecnt : \uac00\uc815 \ub0b4 \ubcbd\ub09c\ub85c \uc218(\uc788\ub294 \uacbd\uc6b0)\n* fullbathcnt : \uac00\uc815 \ub0b4 full \uc695\uc2e4 \uc218(\uc2f1\ud06c, \uc0e4\uc6cc\uae30 + \uc695\uc870, \ud654\uc7a5\uc2e4)\n* garagecarcnt : \ubd80\ucc29\ub41c \ucc28\uace0\uc9c0\ub97c \ud3ec\ud568\ud55c \ucd1d \ucc28\uace0 \uc218\n* garagetotalsqft : \ubd80\ucc29\ub41c \ucc28\uace0\uc9c0\ub97c \ud3ec\ud568\ud558\uc5ec \ubaa8\ub4e0 \ucc28\uace0 \ucd1d \uc81c\uacf1 \ud53c\ud2b8 \uc218\n* hashottuborspa : \uc9d1\uc5d0 \ub728\uac70\uc6b4 \uc695\uc870\ub098 \uc628\ucc9c\uc774 \uc720\ubb34\n* heatingorsystemtypeid : \uac00\uc815\uc6a9 \ub09c\ubc29 \uc2dc\uc2a4\ud15c \uc720\ud615\n* latitude\n* longitude\n* lotsizesquarefeet : \ub300\uc9c0\uc758 \uba74\uc801\n* poolcnt : lot(\ub300\uc9c0) \ub0b4\uc758 \uc218\uc601\uc7a5 \uc218\n* poolsizesum : \ubd80\ub3d9\uc0b0\uc5d0 \uc788\ub294 \ubaa8\ub4e0 \uc218\uc601\uc7a5\uc758 \ucd1d \uc81c\uacf1 \ud06c\uae30.\n* pooltypeid10 :  Spa or Hot Tub\n* pooltypeid2 :  Pool with Spa\/Hot Tub\n* pooltypeid7 :  Pool without hot tub\n* propertycountylandusecode : \uce74\uc6b4\ud2f0 \ud1a0\uc9c0 \uc774\uc6a9 \ucf54\ub4dc, \uc989 \uce74\uc6b4\ud2f0 \uc218\uc900\uc5d0\uc11c \uad6c\uc5ed \uc9c0\uc815\uc774\ub2e4.\n* propertylandusetypeid : \ud1a0\uc9c0 \uc720\ud615\n* propertyzoningdesc : \ud574\ub2f9 \uc7ac\uc0b0\uc5d0 \ub300\ud574 \ud5c8\uc6a9\ub41c \ud1a0\uc9c0 \uc774\uc6a9(\uad6c\uc5ed \uc124\uc815)\uc5d0 \ub300\ud55c \uc124\uba85.\n* rawcensustractandblock : \uc13c\uc11c\uc2a4\uc640 \ube14\ub85d ID \uacb0\ud569 - \ud655\uc7a5\ubcc4 \ube14\ub85d \uadf8\ub8f9 \ud560\ub2f9\ub3c4 \ud3ec\ud568\n* regionidcity : \ubd80\ub3d9\uc0b0\uc774 \uc788\ub294 \ub3c4\uc2dc\n* regionidcounty : \ubd80\ub3d9\uc0b0\uc774 \uc704\uce58\ud55c \uce74\uc6b4\ud2f0\n* regionidneighborhood : \ubd80\ub3d9\uc0b0\uc774 \uc788\ub294 \uc774\uc6c3\n* regionidzip : \ubd80\ub3d9\uc0b0\uc774 \uc788\ub294 \uc6b0\ud3b8\ubc88\ud638\n* roomcnt : \ubd80\ub3d9\uc0b0\uc5d0 \uc788\ub294 \ucd1d \ubc29 \uc218\n* storytypeid : \ub2e4\uce35 \uc8fc\ud0dd\uc758 \uce35 \uc720\ud615(\uc989, \uc9c0\ud558 \ubc0f \uc8fc\uce35, \ubd84\ud560\uce35, \ub2e4\ub77d\uc6d0 \ub4f1)\n* threequarterbathnbr : 3\/4 \ud654\uc7a5\uc2e4(\uc0e4\uc6cc\uae30 + \uc138\uba74\ub300 + \ubcc0\uae30) \uac2f\uc218\n* typeconstructiontypeid : \uc5b4\ub5a4 \uc885\ub958\uc758 \uac74\ucd95\uc790\uc7ac\uac00 \uadf8 \uc9d1\uc744 \uc9d3\ub294\ub370 \uc0ac\uc6a9\ub418\uc5c8\ub294\uac000\n* unitcnt : \uad6c\uc870\ubb3c\uc774 \uac74\ucd95 \ub41c \ub2e8\uc704 \uc218(\uc989, 2 = \uc774\uc911, 3 = \uc0bc\uc911 \ub4f1)\n* yardbuildingsqft17 : \ub9c8\ub2f9\uc758 \ud30c\ud2f0\uc624 \uba74\uc801\n* yardbuildingsqft26 : \ub9c8\ub2f9\uc5d0 \ubcf4\uad00 \ucc3d\uace0\/\uac74\ubb3c \uba74\uc801\n* yearbuilt : \uc8fc\uc694 \uac70\uc8fc\uc9c0\uac00 \uac74\uc124\ub41c \ud574\n* numberofstories : \uc9d1\uc5d0 \uc788\ub294 story\ub098 \uce35\uc218\uc785\ub2c8\ub2e4.\n* fireplaceflag : \uc774 \uc9d1\uc5d0 \ubcbd\ub09c\ub85c \uc720\ubb34\n* structuretaxvaluedollarcnt : \uc18c\ud3ec \uc704\uc5d0 \uc138\uc6cc\uc9c4 \uad6c\uc870\ubb3c\uc758 \ud3c9\uac00 \uac12\n* taxvaluedollarcnt : \uad6c\ud68d\uc758 \ucd1d \uc138\uc561 \ud3c9\uac00\uc561\n* assessmentyear : \uc7ac\uc0b0\uc138 \uacfc\uc138 \uc5f0\ub3c4\n* landtaxvaluedollarcnt : \uad6c\ud68d\uc758 \ud1a0\uc9c0 \uba74\uc801 \ud3c9\uac00 \uac12\n* taxamount : \uadf8 \ud3c9\uac00 \ub144\ub3c4\uc5d0 \ub300\ud574 \ud3c9\uac00\ub41c \ucd1d \uc7ac\uc0b0\uc138\n* taxdelinquencyflag : \uc774 \uc18c\ud3ec\uc758 \uc7ac\uc0b0\uc138\ub294 2015 \ub144\uae4c\uc9c0 \ub9cc\uae30 \uc778\uac00?.\n* taxdelinquencyyear : \ubbf8\ub0a9 \uc7ac\uc0b0\uc138\uac00 \ub0a9\ubd80\ub418\uc5b4\uc57c \ud560 \ud574 \n* censustractandblock : \uc13c\uc11c\uc2a4\uc640 \ube14\ub85d ID \uacb0\ud569 - \ud655\uc7a5\ubcc4 \ube14\ub85d \uadf8\ub8f9 \ud560\ub2f9\ub3c4 \ud3ec\ud568\n","044ca5ed":"\uc5f0\uc18d\ud615 \ubcc0\uc218","4e2a1e20":"<a id=\"7\"><\/a> <br>\n# 2.3 \ub370\uc774\ud130 \ubcc0\uc218\uba85 \ubc0f type \ubcc0\uacbd","3b5920ad":"\uc544\ud30c\ud2b8 =  266\n\n\ube44 \uc544\ud30c\ud2b8 = 246, 247, 248, 261, 264, 265, 267, 269, 31, 47, 260, 263, 275","bb34cbe0":"<a id=\"14\"><\/a> <br>\n## 4.1 Null Data \ucc98\ub9ac","38711857":"Train Data Set","5d2ac50a":"**NULL \ub2e4\uc218 \uac12 \uc81c\uac70**\n\n'framing', 'area_liveperi_finished', 'area_basement', 'story','area_shed','material','area_base','area_total_finished','area_unknown','num_bathroom_calc','num_bath','area_firstfloor_finished'\n\n\n**\uc911\ubcf5 \uac12 \uc81c\uac70**\n\n'num_bathroom' : 'num_bathroom_calc','num_bath'\n","7ec30ec4":"### \ubd80\ub3d9\uc0b0\uc758 \ud1a0\uc9c0 \uc0ac\uc6a9 \uc720\ud615","36b2a02c":"<a id=\"9\"><\/a> <br>\n# 3.1 \uc804\uccb4 \ub370\uc774\ud130 \uac1c\uc694","bbd0880f":"<a id=\"8\"><\/a> <br>\n# 3. EDA","46e2b38a":"\uc88c\ud45c\uac12 \uc5c6\ub294 \ub370\uc774\ud130 \uc81c\uac70","a480d283":"\n**Zestimate**\ub294 \uac01 \uc7ac\uc0b0\uc5d0 \ub300\ud55c \uc218\ubc31 \uac1c\uc758 \ub370\uc774\ud130 \ud3ec\uc778\ud2b8\ub97c \ubd84\uc11d\ud558\ub294 750\ub9cc \uac1c\uc758 \ud1b5\uacc4 \ubc0f \uae30\uacc4 \ud559\uc2b5 \ubaa8\ub378\uc744 \uae30\ubc18\uc73c\ub85c \uac00\uc815 \uac12\uc744 \ucd94\uc815\ud55c\ub2e4. \uadf8\ub9ac\uace0, \uc624\ub958\uc758 \uc911\uac04 \ub9c8\uc9c4\uc744 \uc9c0\uc18d\uc801\uc73c\ub85c \uac1c\uc120\ud568\uc73c\ub85c\uc368(\ucd08\uae30\uc758 14%\uc5d0\uc11c \uc624\ub298 \ub0a0\uc758 5%\ub85c), zillow\ub294 \uadf8 \ud6c4 \ubbf8\uad6d\uc5d0\uc11c \uac00\uc7a5 \ud06c\uace0 \uac00\uc7a5 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \ubd80\ub3d9\uc0b0 \uc815\ubcf4 \uc2dc\uc7a5 \uc911 \ud558\ub098\uc774\uc790 \uc601\ud5a5\ub825 \uc788\ub294 \uae30\uacc4 \ud559\uc2b5\uc758 \uc120\ub3c4\uc801\uc778 \uc608\ub85c \uc790\ub9ac\ub9e4\uae40\ud558\uac8c \ub418\uc5c8\ub2e4. \uc608\uc120\uc5d0\uc11c\ub294 \uc794\ucc28 \uc624\ub958\ub97c \uac1c\uc120\ud558\uae30 \uc704\ud55c \ubaa8\ub378\uc744 \uc791\uc131\ud560 \uac83\uc774\ub2e4. \ucd5c\uc885 \ub77c\uc6b4\ub4dc\uc5d0\uc11c\ub294 \uc678\ubd80 \ub370\uc774\ud130 \uc18c\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub378\uc5d0 \uacbd\uc7c1 \uc6b0\uc704\ub97c \ubd80\uc5ec\ud558\ub294 \uc0c8\ub85c\uc6b4 \uae30\ub2a5\uc744 \uc124\uacc4\ud558\ub294 \ub370 \ub3c4\uc6c0\uc774 \ub418\ub294 \ud648 \ud3c9\uac00 \uc54c\uace0\ub9ac\uc998\uc744 \ucc98\uc74c\ubd80\ud130 \uad6c\ucd95\ud560 \uac83\uc774\ub2e4.\n\n**Objective:**\n\uc794\ucc28 \ucd94\uc815 \uc624\ub958\ub97c \uac1c\uc120\ud558\uae30 \uc704\ud55c \ubaa8\ub378 \uc791\uc131.\n\n**Zillow:**\nZillow \ub294 2006\ub144\uc5d0 \uc124\ub9bd\ub41c \uc628\ub77c\uc778 \ubd80\ub3d9\uc0b0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud68c\uc0ac - \uc704\ud0a4\ubc31\uacfc\n\n**Zestimate:**\n\"Zestimate\"\ub294 \uac01 \uc7ac\uc0b0\uc5d0 \ub300\ud55c \uc218\ubc31 \uac1c\uc758 \ub370\uc774\ud130 \ud3ec\uc778\ud2b8\ub97c \ubd84\uc11d\ud558\ub294 750\ub9cc \uac1c\uc758 \ud1b5\uacc4 \ubc0f \uae30\uacc4 \ud559\uc2b5 \ubaa8\ub378\uc744 \uae30\ubc18\uc73c\ub85c \uac00\uc815 \uac12\uc744 \ucd94\uc815\ud55c\ub2e4. Zestimate\ub294 \uc811\uadfc\ud560 \uc218 \uc788\ub294 \uc8fc\ud0dd\uc5d0 \ub300\ud55c \ubaa8\ub4e0 \uc815\ubcf4\ub97c \uc885\ud569\ud558\uc5ec \ub370\uc774\ud130\ub97c \ud68d\ub4dd\ud55c\ub2e4. \ub2e4\uc591\ud55c \uc18c\uc2a4\uc758 \ub370\uc774\ud130\ub97c \ud558\ub098\ub85c \ud63c\ud569\ud558\uace0 \ubcd1\ud569\ud55c\ub2e4. \uc628\ub9c8\ucf13 \ub370\uc774\ud130 - \uc0ac\uac01\ud615 \ud654\uba74, \uc704\uce58 \ub610\ub294 \uc695\uc2e4 \uc218\ub97c \ud3ec\ud568\ud55c \uc8fc\ud0dd \ud2b9\uc131, \ub2e8\ub2e8\ud55c \ubaa9\uc7ac \ubc14\ub2e5, \ud654\uac15\uc554 \uce74\uc6b4\ud130\ud1b1 \ub610\ub294 \uc870\uacbd\ub41c \ub4b7\ub9c8\ub2f9 \uac19\uc740 \ub3c5\ud2b9\ud55c \ud2b9\uc9d5, \ud574\ub2f9 \uc9c0\uc5ed\uc758 \uac00\uaca9, \uc124\uba85, \ube44\uad50 \uac00\ub2a5\ud55c \uc8fc\ud0dd \ubc0f \uc2dc\ud310 \uc77c\uc218, \uc624\ud504\ub9c8\ucf13 \ub370\uc774\ud130 - \uc138\uae08 \ud3c9\uac00, \uc774\uc804 \ud310\ub9e4 \ubc0f \uae30\ud0c0 \uacf5\uac1c\uc801\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uae30\ub85d","04679e13":"**Null \ubcc0\uc218 \ubcc0\uacbd**\n\nNull = 0\n\n'flag_tub','pooltypeid2','pooltypeid7','num_pool'","42655523":"<a id=\"1\"><\/a> <br>\n# 1. INTRODUCTION","a4548d3d":"\ubbf8\uad6d \ubd80\ub3d9\uc0b0 \ud2b9\uc9d5\n\n\n\ubbf8\uad6d \ubd80\ub3d9\uc0b0\uc758 \uac00\uaca9\uc744 \uacb0\uc815\ud558\ub294 \uc694\uc778\uc73c\ub85c 6\uac00\uc9c0\ub97c \ub300\ud45c\uc801\uc73c\ub85c \uaf3d\uc744 \uc218 \uc788\ub2e4.\n- \uacfc\uac70 \ud310\ub9e4 \uac00\uaca9\n- \uc774\uc6c3\n- \uc0c1\uc810\n- \ud06c\uae30 \ubc0f \uc678\ud615\n- \uc5f0\uc2dd \ubc0f \uc0c1\ud0dc\n- \uc8fc\ubcc0 \ud2b9\uc9d5","87b54f71":"\uc774\uc0b0\ud615 \ubcc0\uc218"}}