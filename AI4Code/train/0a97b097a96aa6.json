{"cell_type":{"63cdef13":"code","37baf780":"code","84864287":"code","fbeff75a":"code","36bf9f64":"code","e6ed1e22":"code","7557e891":"code","f29a0367":"code","b9c99bc1":"code","586d72fc":"code","9e348262":"code","397f026b":"code","f14ee9f2":"code","34ec052c":"code","31e8c3ae":"code","9f1bc7d2":"code","c56bf834":"code","480cdc1a":"code","7326cf0e":"code","78bfe7cf":"code","10758c0e":"code","71c5826c":"code","631a33b0":"code","bfa9cb64":"code","598728fd":"code","de7e81ad":"code","eaf9a1a7":"code","cc5d8121":"code","7dcbc461":"code","f37d27a5":"markdown","659fbac2":"markdown","48f0b943":"markdown","7982da32":"markdown","bff760a2":"markdown","22c74150":"markdown","456c765b":"markdown","345e88be":"markdown","152a7bde":"markdown","d3d6d36c":"markdown","5f287b64":"markdown","1e84283c":"markdown","f6de3791":"markdown"},"source":{"63cdef13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","37baf780":"df = pd.read_csv('..\/input\/chocolate-bar-2020\/chocolate.csv')","84864287":"dfn = df.drop(['ref', 'Unnamed: 0','company'], axis = 1) \ndfn","fbeff75a":"dfn.info()","36bf9f64":"hot_chocolate = pd.get_dummies(dfn,columns=['country_of_bean_origin','company_location','country_of_bean_origin','specific_bean_origin_or_bar_name','beans','cocoa_butter','vanilla','lecithin','salt','sugar','sweetener_without_sugar','first_taste','second_taste','third_taste','fourth_taste'])\nhot_chocolate.shape","e6ed1e22":"df_choc = pd.concat([dfn, hot_chocolate], axis=1)\ndf_choc.shape","7557e891":"df_finale = df_choc.drop(columns=['country_of_bean_origin','company_location','country_of_bean_origin','specific_bean_origin_or_bar_name','beans','cocoa_butter','vanilla','lecithin','salt','sugar','sweetener_without_sugar','first_taste','second_taste','third_taste','fourth_taste'],axis = 1)","f29a0367":"df_finale.shape","b9c99bc1":"a = df_finale.loc[:,~df_finale.columns.duplicated()]\na","586d72fc":"a.to_csv('Finale Preprocess')","9e348262":"b = a.drop('review_date', axis = 1)","397f026b":"\nX = b.iloc[:,0:2800]  \ny = a.iloc[:,-1]    \n\n\nfrom sklearn.model_selection import train_test_split\n\nX_train,y_train, X_test,y_test = train_test_split(X, y, test_size=0.3)","f14ee9f2":"y","34ec052c":"from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()\n","31e8c3ae":"!pip install xverse","9f1bc7d2":"\nfrom xverse.ensemble import VotingSelector\nclf = VotingSelector()\nclf.fit(X, y)\n","c56bf834":"clf.feature_importances_\n","480cdc1a":"clf.feature_importances_['Variable_Name'][0],clf.feature_importances_['Variable_Name'][12],clf.feature_importances_['Variable_Name'][11],clf.feature_importances_['Variable_Name'][2]","7326cf0e":"clf.feature_votes_\n","78bfe7cf":"Xver= clf.transform(X)\nXver.head()","10758c0e":"\nX_best = b.iloc[:,0:2800]  \ny = a.iloc[:,-1]    \n\n\nfrom sklearn.model_selection import train_test_split\n\nX_train,y_train, X_test,y_test = train_test_split(Xver, y, test_size=0.3)","71c5826c":"!pip install pycaret\nfrom pycaret.classification import *\nexp1 = setup(Xver, target = y)\n","631a33b0":"compare_models()","bfa9cb64":"adaboost = create_model('ada')\n","598728fd":"tuned_adaboost = tune_model('ada')","de7e81ad":"# creating a decision tree model\ndt = create_model('dt')\n# ensembling a trained dt model\ndt_bagged = ensemble_model(dt)\n","eaf9a1a7":"from tpot import TPOTClassifier\ntpot = TPOTClassifier(verbosity=2, max_time_mins=10)\ntpot.fit(X_train, y_train)","cc5d8121":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import PolynomialFeatures, RobustScaler\n\n\nss = StandardScaler() \nX_train_scaled = ss.fit_transform(X_train) \nX_test_scaled = ss.transform(X_test)\n\nfrom tpot import TPOTClassifier \ntpot = TPOTClassifier(verbosity=2, max_time_mins=10)\ntpot.fit(X_train_scaled, y_train)\n","7dcbc461":"tpot.fitted_pipeline_\n\ntpot.score(X_test_scaled, y_test)\n","f37d27a5":"# **Delete non encoded categorical columns**","659fbac2":"# **Define the best features in X_best, y_best**","48f0b943":"# **3.Tpot**","7982da32":"# **What is the best autoML methods ?**","bff760a2":"# **Delete Duplicate columns**","22c74150":"# **Delete non essentials columns**","456c765b":"# **2.Libra**","345e88be":"# **Define X,y**","152a7bde":"# 1.Pycaret ","d3d6d36c":"# 1.  **Extraclassifier**","5f287b64":"# **Features Selection Methods**","1e84283c":"# **Read the chocolate bar 2020 dataset**","f6de3791":"# **2.Xuniverse**"}}