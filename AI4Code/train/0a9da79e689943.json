{"cell_type":{"cb76696e":"code","0695b167":"code","940876ab":"code","1fc3f2f9":"code","71a6f6db":"code","d377898c":"markdown"},"source":{"cb76696e":"import os\nfrom PIL import Image\nfrom torch.utils import data","0695b167":"class TGSDataset(data.Dataset):\n    def __init__(self, img_path, mask_path, transform=None):\n        self.img_path = img_path\n        self.mask_path = mask_path\n        self.transform = transform\n        self.all_images = os.listdir(img_path)\n\n    def __len__(self):\n        return len(self.all_images)\n\n    def __getitem__(self, index):\n        file_name = self.all_images[index]\n        input_img = Image.open(os.path.join(self.img_path, file_name)).convert('L')\n        mask_img = Image.open(os.path.join(self.mask_path, file_name)).convert('L')\n        if self.transform is not None:\n            input_img = self.transform(input_img)\n            mask_img = self.transform(mask_img)\n        return input_img, mask_img","940876ab":"import torch\nimport matplotlib.pyplot as plt\nimport torchvision\nfrom torchvision import transforms\nfrom torch.utils.data import DataLoader","1fc3f2f9":"def show_sample(tensor):\n    '''\n    :param data: [c,w,h]\n    :return:\n    '''\n    img = tensor.data.numpy().transpose((1, 2, 0))\n    plt.imshow(img)\n    plt.show()","71a6f6db":"img_path = '..\/input\/train\/images'\nmask_path = '..\/input\/train\/masks'\ntransform = transforms.Compose([transforms.ToTensor()])\ntgs_dataset = TGSDataset(img_path, mask_path, transform)\ntgs_dataloader = DataLoader(tgs_dataset, batch_size=8, shuffle=True, num_workers=0)\n_iter = iter(tgs_dataloader)\n\nexample_imgs, example_masks = next(_iter)\nexample_imgs = torchvision.utils.make_grid(example_imgs, padding=0)\nexample_masks = torchvision.utils.make_grid(example_masks, padding=0)\nexample = torch.cat((example_imgs, example_masks), 1)\n\nshow_sample(example)","d377898c":"# Visualize"}}