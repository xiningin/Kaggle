{"cell_type":{"aee8d032":"code","0c32c808":"code","60526b9d":"code","746b43c1":"code","b5410cf9":"code","4c51780f":"code","21fafb7f":"code","e7b9951a":"code","319d1d59":"code","af64e523":"code","a5cf7b89":"code","59fb9c07":"code","6222297d":"code","0facf10c":"code","c7255268":"code","adcf9add":"code","d2ee7896":"code","cb6b0d2e":"code","63ad840b":"code","e4c74d64":"code","97a55d01":"code","992166d7":"code","f0691ae7":"code","0a75fe06":"code","726194f8":"code","c40874b4":"code","9272e673":"code","0fe95c67":"code","2e551ca2":"code","f1201018":"markdown","047026f4":"markdown","57d16cd2":"markdown","c9b9d6ab":"markdown","37f8f623":"markdown","0d9f7e20":"markdown","8114c4ce":"markdown","fb89612d":"markdown","8403f037":"markdown","7a7dd44a":"markdown","84eb1e39":"markdown","4c881ce9":"markdown","229d8b34":"markdown","382cadff":"markdown","7636d29d":"markdown","6cf0c8c1":"markdown"},"source":{"aee8d032":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport math\n\n#taking input files\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n#libraries to plot\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly\nplotly.offline.init_notebook_mode (connected = True)\n\n#Calendar Heatmap\n!pip install calmap\nimport calmap\n\n#GEOSPATIAL LIBRARIES\nimport geopandas as gpd\nimport folium\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster\nfrom geopy.geocoders import Nominatim\nfrom geopy.extra.rate_limiter import RateLimiter\n\n%matplotlib inline","0c32c808":"#load dataset into pandas dataframe\ndf = pd.read_csv('\/kaggle\/input\/data-police-shootings\/fatal-police-shootings-data.csv', parse_dates=[\"date\"])\ndf.head()","60526b9d":"#check the information luke count and datatype of each column\ndf.info()","746b43c1":"#null values in each columns\ndf.isnull().sum()","b5410cf9":"#removing null values i.e. drop rows that has atleast one NaN value\ndf=df.dropna(axis=0)\ndf.isnull().sum()","4c51780f":"#number of unique values in each column\ndf.nunique()","21fafb7f":"df.head()","e7b9951a":"df_tmp = df[\"body_camera\"].value_counts()\nfig = px.bar(df_tmp,title=\"Body Camera Available\",color=df_tmp.index)\nfig.show()","319d1d59":"df_tmp = df[\"armed\"].value_counts()[:10]\nfig = px.bar(df_tmp,color=df_tmp.index,\n             title=\"Top 10 Cases with Armed Types\", color_discrete_sequence= px.colors.sequential.Plasma_r)\nfig.show()","af64e523":"df_tmp = df[df['armed']=='unarmed']['race']\nfig = px.histogram(df_tmp,x='race',title=\"Unarmed People Shoot vs Race\",color='race',color_discrete_sequence=px.colors.qualitative.T10)\nfig.show()\n","a5cf7b89":"df[\"manner_of_death\"].value_counts()","59fb9c07":"df_tmp=df[df['manner_of_death']=='shot']\nfig = px.histogram(df_tmp,x='race',title=\"Ethinicity vs Races\",color='race',color_discrete_sequence=px.colors.qualitative.T10)\nfig.show()","6222297d":"df_tmp=df[\"age\"]\nfig = px.histogram(df_tmp,histnorm='probability density', title=\"Probability Density of Age\")\nfig.show()","0facf10c":"df_date_group = df.groupby(df[\"date\"])\nincidents = df_date_group[\"id\"].count()\nprint(incidents.max(), \" is the maximum no. of incidents  happened in a day\")\nprint(incidents.min(), \" is the minimum no. of incident\/s happened in a day\")","c7255268":"#each day heatmap showing the number of cases\nfig,ax = calmap.calendarplot(incidents, monthticks=1, daylabels='MTWTFSS',\n                    fillcolor='grey', linewidth=1,\n                    fig_kws=dict(figsize=(15,15)))\n\n#fig.colorbar(ax[0].get_children()[1],ax=ax, cmap=plt.cm.get_cmap('Reds', 9), orientation='horizontal',label='Number of incidents')","adcf9add":"#due to 2116 unique values of cities, the geocoder takes too much time and shows timeout error, \n#so i used google sheets Add-ons i.e. geocode by Awesome Table to geocode the values.\n\"\"\"geolocator = Nominatim(user_agent=\"my_application\")\ngeocode = RateLimiter(geolocator.geocode, min_delay_seconds=1)\ndf1['location'] = df1['city'].apply(geocode)\ndf1['latitude'] = df1['location'].apply(lambda loc: loc.latitude if loc else None)\ndf1['longitude'] = df1['location'].apply(lambda loc: loc.longitude if loc else None)\ndf1.head()\n\"\"\"\nprint(\"city geocoded file is updated in datasets i.e. cities.csv\")","d2ee7896":"#dataframe containing lat long values for the centroid of all counties in US\ncity_df = pd.read_csv(\"\/kaggle\/input\/cities-geocoded-for-data-police-shootings\/cities.csv\")\ncity_df.drop([\"Unnamed: 0\",\"geom\",\"address\"], axis=1, inplace=True)\ncity_df","cb6b0d2e":"#add lat long values of cities to the data of shoots\ndf_with_cities = pd.merge(df, city_df, on=[\"city\",\"state\"])\ndf_with_cities.head()","63ad840b":"#count the cases in each county \nlocations = df_with_cities.groupby(df[\"city\"])\ncases = locations[\"id\"].count()\nprint(cases.max(),\" is maximum number of cases in a city and \\n\",cases.min(),\" is minimum number of cases of shooting\")\ncases","e4c74d64":"#map total number of cases with city\ndata = pd.merge(cases, city_df, on=[\"city\"])\ndata = data.rename(columns = {\"id\":\"count\"})\ndata.head()","97a55d01":"m = folium.Map(location=[32, -100], tiles='openstreetmap', zoom_start=3)\n\nfor idx, row in data.iterrows():\n    Marker([row['latitude'], row['longitude']], popup=[row['city'],row[\"count\"]]).add_to(m)\nm","992166d7":"df_cluster = df_with_cities[[\"name\",\"city\",\"longitude\",\"latitude\"]]\n\nm = folium.Map(location=[32, -100], tiles='openstreetmap', zoom_start=3)\n\nmc = MarkerCluster()\n\nfor idx, row in df_cluster.iterrows():\n    if not math.isnan(row['longitude']) and not math.isnan(row['latitude']):\n        mc.add_child(folium.Marker([row['latitude'], row['longitude']], popup=[row['city'],row[\"name\"]]))\n\nm.add_child(mc)\nm","f0691ae7":"m = folium.Map(location=[39, -119], tiles='cartodbpositron', zoom_start=4)\n\nHeatMap(data=df_with_cities[['latitude', 'longitude']], radius=15).add_to(m)\n\nm","0a75fe06":"states_full = gpd.read_file('\/kaggle\/input\/us-administrative-boundaries\/USA_adm1.shp')\nstates_geom = states_full[[\"NAME_1\",\"geometry\"]]\nstates_geom = states_geom.rename(columns={\"NAME_1\":\"name\"})\nstates_geom.head()","726194f8":"states = pd.read_csv(\"..\/input\/states-geocoded-for-data-police-shootings\/states.csv\")\nstates.head()","c40874b4":"state_count = df.groupby(\"state\")\nstate_count = state_count[\"id\"].count()\nstate_count = state_count.reset_index().rename(columns={\"id\":\"count\"})\nprint(state_count.max()[\"count\"],\" is the maximum number of incidents in a state and\",state_count.min()[\"count\"], \" is the minimum.\")\nstate_count.head()","9272e673":"#mapping state code with count of cases\ndf_with_states = pd.merge(states, state_count, on=[\"state\"])\ndf_with_states = df_with_states.rename(columns={\"id\":\"count\"})\ndf_with_states.head()","0fe95c67":"#url to get data of the state boundaries of USA\nurl = 'https:\/\/raw.githubusercontent.com\/python-visualization\/folium\/master\/examples\/data'\nstate_geo = f'{url}\/us-states.json'","2e551ca2":"m = folium.Map(location=[48, -102], zoom_start=3)\n\nfolium.Choropleth(\n    geo_data=state_geo,\n    name='choropleth',\n    data=state_count,\n    columns=['state', 'count'],\n    key_on='feature.id',\n    fill_color='BuPu',\n    fill_opacity=0.8,\n    line_opacity=0.2,\n    legend_name='Incidents '\n).add_to(m)\n\nfolium.LayerControl().add_to(m)\n\nm","f1201018":"<img src=\"https:\/\/www.chinadaily.com.cn\/world\/images\/attachement\/jpg\/site1\/20160708\/b083fe9fe78518e95a6503.jpg\">\n","047026f4":"### 2. CLUSTER MAP: Clustering the data on the basis of cases\n> zoom in to see the cluster and bread down in smaller cluster and hence end up with the markers indicating the location and cases occurred in particular location.","57d16cd2":"# Statewise Analysis of Incidents\n1. Getting total number of cases happening in a particular state.\n2. Representation in choropleth map as per the cases.\n","c9b9d6ab":"# Calendar Describing the incidents as HeatMap","37f8f623":"# Geospatial Analysis on Police Shooting in USA\nSadly, the trend of fatal police shootings in the United States seems to only be increasing, with a total 506 civilians having been shot, 105 of whom were Black, as of June 30, 2020. In 2018, there were 996 fatal police shootings, and in 2019 this figure increased to 1,004. Additionally, the rate of fatal police shootings among Black Americans was much higher than that for any other ethnicity, standing at 31 fatal shootings per million of the population as of June 2020.","0d9f7e20":" > *Now the dataset is free from null values, next task is to check the unique values in each column*","8114c4ce":"# Geospatial Analysis","fb89612d":"### 4. CHOROPLETH MAP: represents number of cases in respective State in US","8403f037":"##### the city in which incident has occured is given, so first task will be to extract the location of city i.e. lat-long values so that we can locate the city on map","7a7dd44a":"### Loading Dataset and Basic characteristics  of dataset","84eb1e39":"### Importing Libraries","4c881ce9":"### Information of Data in each column\n\n1. \"id\": unique id for the incident\n2. \"name\": name of the person being shoot\n3. \"date\": date on which incident happened\n4. \"manner_of_death\": Type: shot, shot and Tasered\n5. \"armed\": Type: gun, knife etc.\n6. \"age\": age of the person\n7. \"gender\": male\/female\n8. \"race\": W: White, B: Black, A: Asian, N: Native American, H: Hispanic, O: Other\n9. \"city\": city of incident\n10. \"state\": state of incident\n11. \"signs_of_mental_illness\": True\/ False \n12. \"threat_level\": attack, other or undetermined\n13. \"flee\": car, foot, not-fleeing, other\n14. \"body_camera\": does the officer had body camera on?","229d8b34":"### Thanks for Having a look :)\nPlease upvote if u liked this notebook, as this is my first notebook i have published on kaggle.","382cadff":"# Relation Between Various Attributes","7636d29d":"### 1. PIN MAP: Markers representing each county and Number of cases.\n> each popup on click shows the number of total cases and the city name.","6cf0c8c1":"### 3. HEATMAP: representing Hot-spots of crime occurances.\n"}}