{"cell_type":{"6f7c1814":"code","404bd7d3":"code","dbc1d739":"code","eedaca0a":"code","3ef07498":"code","061888f0":"code","18a0e9d2":"code","08afe4e7":"code","84145264":"code","3a8ecf4c":"markdown","cb5e9656":"markdown"},"source":{"6f7c1814":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport cv2","404bd7d3":"train = os.listdir('..\/input\/sartorius-cell-instance-segmentation\/train')\nprint(len(train))","dbc1d739":"# ref: https:\/\/www.kaggle.com\/paulorzp\/run-length-encode-and-decode\ndef rle_decode(mask_rle, shape=(520,704)):   # (height,width) \n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (height,width) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    \n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape) ","eedaca0a":"masks = pd.read_csv('..\/input\/sartorius-cell-instance-segmentation\/train.csv')\nmasks","3ef07498":"ImageId = '0030fd0e6378'\nimg = cv2.imread('..\/input\/sartorius-cell-instance-segmentation\/train\/' + ImageId+'.png')\nprint(img.shape)","061888f0":"fig, axarr = plt.subplots(figsize=(5,5))\naxarr.axis('off')\naxarr.imshow(img)\nplt.tight_layout(h_pad=0.1, w_pad=0.1)\nplt.show()","18a0e9d2":"img_masks = masks[masks['id']==ImageId]['annotation'].tolist()\nprint(len(img_masks))\nprint(img_masks[0])","08afe4e7":"all_masks = np.zeros((520,704))    #(height,width) \nfor mask in img_masks:\n    all_masks += rle_decode(mask)\n\nprint(all_masks.shape)","84145264":"fig, axarr = plt.subplots(1,3, figsize=(15,40))\n\naxarr[0].axis('off')\naxarr[1].axis('off')\naxarr[2].axis('off')\n\naxarr[0].imshow(img)\naxarr[1].imshow(all_masks)\naxarr[2].imshow(img)\naxarr[2].imshow(all_masks, alpha=0.2)\n\nplt.tight_layout(h_pad=0.1, w_pad=0.1)\nplt.show()","3a8ecf4c":"# Run Length Encoding: Annotation Data to Mask Image\nThis notebook refferred to INVERSION's notebook'Run Length Decoding - Quick Start'.<br\/>\nhttps:\/\/www.kaggle.com\/inversion\/run-length-decoding-quick-start","cb5e9656":"### What is Run-length encoding (RLE)?\n```\nRun-length encoding (RLE) is a form of lossless data compression in which runs of data (sequences in which the same data value occurs in many consecutive data elements) are stored as a single data value and count, rather than as the original run. This is most efficient on data that contains many such runs, for example, simple graphic images such as icons, line drawings, Conway's Game of Life, and animations. For files that do not have many runs, RLE could increase the file size. (from Wikipedia)\n```"}}