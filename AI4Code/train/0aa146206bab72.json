{"cell_type":{"43b45d06":"code","e50fb22c":"code","91f040f9":"code","8e45e812":"code","2dc1dcbd":"code","e1d61675":"code","a532a63b":"code","7e17735c":"code","9e399b6e":"code","98305493":"code","399b2ac4":"code","05dbf90a":"code","455ac061":"code","b0879e21":"code","ad393878":"code","f2185cdd":"markdown","2c2aee59":"markdown","59629bda":"markdown","a62541bd":"markdown","3baaa9bc":"markdown","980ac3ca":"markdown","b27b6ed8":"markdown","4545c013":"markdown","9fc948d7":"markdown","ae6cb4e1":"markdown","2090c5df":"markdown","d489bec6":"markdown","dd601e94":"markdown"},"source":{"43b45d06":"# numpy for Math Calculations \nimport numpy as np\n# random for make some random numbers that we are going to use next\nimport random\n# mathplotlib for making some visualisations\nimport matplotlib.pyplot as plt\n\n# and linear_model from sklearn \nfrom sklearn import linear_model","e50fb22c":"x = np.linspace(0,100,500)\nx = np.array([i+random.randint(-1,1) for i in x])","91f040f9":"y = np.array([i+random.randint(-10,10) for i in x])","8e45e812":"## the next line is not important it's just to change the default size of our plot and make it 10*10\nplt.rcParams['figure.figsize'] = 10, 10\n\n###plot x and y\nplt.plot(x,y,'x')","2dc1dcbd":"from sklearn.model_selection import train_test_split","e1d61675":"# this is how we use the function, the random state is just a random number, you can pass any number,we will take \n# a 40% of data as a test data, (in the realy life problems the test data is only 20% to 25% , but it's not a rule \n# it depends on the size of the dataset)\nX_train, X_test, y_train, y_test = train_test_split(x, y,random_state=42,test_size=0.4)","a532a63b":"# let's plot the data \n# we will show the train data in the X shape with the red color \nplt.plot(X_train,y_train,'rx',label = 'train data')\n# we will use the blue color to display the test data\nplt.plot(X_test,y_test,'bo',label = 'test data')\n# the next data is just to show the labels so any one can read and understand the plot\nplt.legend()","7e17735c":"# to use the linear regression algorithm we only need to import it like this\nfrom sklearn.linear_model import LinearRegression\n# so now all what we need to do is to train the algo, but before that we have to be sure that our X_train\n# is a 2d array\nX_train.ndim","9e399b6e":"X_train = X_train.reshape(-1,1)\nX_train.ndim","98305493":"linear = LinearRegression().fit(X_train, y_train)","399b2ac4":"# reshape X_test\nX_test = X_test.reshape(-1,1)\n# calculate the score\nlinear.score(X_test.reshape(-1,1),y_test)","05dbf90a":"linear.coef_","455ac061":"# so there is no b and that's good because like you know the start of our data was 0 so no b \na = linear.coef_[0]","b0879e21":"# to draw the line we will take the fitst and the last points \nx_line = np.array([[0],[100]])\ny_line = np.array([[0],[a*100]])","ad393878":"plt.plot(x,y,'x')\nplt.plot(x_line,y_line,'-')","f2185cdd":"in this case we need  function to map the x points to y, so we will take a simple point, just y = x , but as i think you already guessed we add some random number to it and it will be in the same range (-1,0 or 1)","2c2aee59":"in this Notebook we will try to ulistrate the Linear Regression, by a simple exaple and Random data \"So we will not use any real data here \", we will use numpy to work with data and mathplotlib to make some plots, and we will use Scikit-learn \n\n# Scikit-learn \nScikit-learn (formerly scikits.learn) is a free software machine learning library for the Python programming language. It features various classification, regression and clustering algorithms including support vector machines, random forests, gradient boosting, k-means and DBSCAN, and is designed to interoperate with the Python numerical and scientific libraries NumPy and SciPy.  _wiki [see here](https:\/\/en.wikipedia.org\/wiki\/Scikit-learn)\n<br>the officiel Website [here](https:\/\/scikit-learn.org\/stable\/)","59629bda":"now the training step","a62541bd":"### WOW \ni find it a very great accuracy, in fact 96% is great, but don't forget our data was so small and so easy to find the relation or the line between the points even if we added some random numbers but they didn't make a big changes <br>\nnow it's the time to see the line that our algorithm draw after the training <br>\nwe all now that the equation of a line is ` y = ax + b `, in ` linear ` variable we can get the a and the b by `linear.coef_` the first number wll be a and the 2nd will be b ","3baaa9bc":"## time to make some visualisation\nvisualisation of data is a very important step to solve any problem that use a data as it's input, so we need to understand the data first, in our case i made it simple, i think you know how the data looks like, with some random numbers, but you have to get used to this step :)","980ac3ca":"it's time now to create our data, our data will be the points between 0 and 100 divided by 1000, that will be x, but we don't want it to be a line, so we will try to add some random numbers to it (-1,0 or 1)","b27b6ed8":"so this is the end and i hope it was helpful :)\n## thanks ","4545c013":"#  Linear Regression with skeat-learn","9fc948d7":"so now let's train our algorithm we only","ae6cb4e1":"##  time to some ML >*_*< \nlike we know the data in Machine learning should be in 2 main part the data set and the training set (there is another data set which is the validation set but we won't talk about it here )<br>\nso we have only 1 data set how we create a 2nd dataset, don't worry i have a solution for you, in the scikit learn they provid you a method that can divide your data into 2 data set it's the `train_test_split  ` function you can call it by using the import key word ` from sklearn.model_selection import train_test_split `","2090c5df":"as you see it's 1d array, so we need to make some changes, but don't worry ;) we are using numpy it should be very easy what we have to do is to reshape the array by calling the ` reshape(-1,1) `","d489bec6":"!! it was so fast !!!!, yeah if you are thinking about it, you are right it was fast because we don't have a lot of data just 60% of 600 it means 360 points and it's not much <br>\n**but how we can tell how much our algorithm did well ?** it's so simple in the we can calculate the accuracy or the score of the `X_test`like this","dd601e94":"## Import the libs that we are going to use \nin this Note book , we need a numpy lib and scikit-learn and matplotlib, we can import any lib in python by using the key word ` import ` ,  but if we get some errors telling us that the model doesn't exist we need to install it by excuting this ` pip install <model_name>`"}}