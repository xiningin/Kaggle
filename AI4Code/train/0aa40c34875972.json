{"cell_type":{"018f6959":"code","8914bec6":"code","3cd026a3":"code","a54a0dff":"code","36085d2b":"code","bcd9ab41":"code","f95231da":"code","b7a0ea19":"code","4802956d":"code","572f516a":"code","d6af6c07":"code","872b635b":"code","05affcdc":"code","8a7d2d9d":"code","de953c1c":"code","5ffc057f":"code","b8ca0872":"code","8ee2deaa":"code","9ba6a6f7":"code","9aaa6370":"code","c5ce105f":"code","c3a2e615":"code","6099d00c":"code","0442f937":"code","644c7808":"code","32167ad2":"code","5e30064a":"code","83d50b98":"code","b1f7be77":"code","89b84fae":"code","794df72a":"code","417cfa49":"code","7536832a":"code","ab596595":"code","dc3758ad":"code","a7264e5c":"code","4bc2e5da":"code","677d8816":"code","ccb5f528":"code","b8bfb9c9":"code","bace4abd":"code","d037af3c":"code","5c10d39d":"code","878c3b00":"code","4cb5f820":"code","2568178b":"code","1214381c":"code","ebcf6e8a":"code","d87386f6":"code","11a46164":"code","85018480":"code","7c56e5b8":"code","6eb44334":"code","effd9bc4":"code","a21de65c":"code","e37fa952":"code","638baee1":"code","e9ab498a":"code","b34aa52a":"code","3642ab8d":"code","45c6472c":"code","067b591a":"code","be63d853":"code","6691ff9f":"code","625bc170":"code","6c1543ad":"code","65752930":"code","d458b18b":"code","a3a6f2e8":"code","4de9ee39":"code","71f54d7a":"code","84cf14e6":"code","f4a21c26":"code","c1599bf4":"code","ad103392":"code","fe876074":"code","8e38eb3d":"code","501d42f6":"code","7d5653d1":"code","ab786b9f":"code","dab995e8":"code","0ba05175":"code","a81c6fa6":"code","e29b13b1":"code","7a247f9f":"code","e68e3db4":"code","f97ad297":"code","05fc6859":"code","669dac50":"code","37b53420":"code","fb12a5de":"code","85c66923":"code","9a1910b7":"code","2ac58c90":"code","ac3d3541":"code","80c00186":"code","4e6fc3b1":"code","5684d3c6":"code","d5d0362d":"code","790e5a82":"code","066132c5":"code","14cbf11d":"code","dc70991d":"code","fb1b3906":"code","2eb14773":"code","32b68410":"code","62faabdb":"code","1bddc5c2":"code","4d7c40c3":"code","7a1612b0":"code","8e88a08b":"markdown","faf0829b":"markdown","2def9f98":"markdown","59f0e130":"markdown","91de54e0":"markdown","e3126f9c":"markdown","900a82a5":"markdown","44271652":"markdown","cc6fe775":"markdown","5e891659":"markdown","12f8acfe":"markdown","5917eca7":"markdown","d76e653f":"markdown","b075e055":"markdown","96e6f97d":"markdown","2b79afef":"markdown","dda1e76c":"markdown","61a2407a":"markdown","1129ebfa":"markdown","68edc621":"markdown","322d0d53":"markdown","dda16fbf":"markdown","ca3c4a48":"markdown","99a2e049":"markdown","0b8fd479":"markdown","c925c8c2":"markdown","95b560d7":"markdown","7fbb3baf":"markdown","5e160b34":"markdown","b9867055":"markdown","e582ad7b":"markdown","0d26dab9":"markdown","3a984244":"markdown","c84cfc7c":"markdown","794e95a0":"markdown","2016481f":"markdown","f3eb78f4":"markdown","a397fce1":"markdown","3db8afa9":"markdown","e61046a9":"markdown","e21199fb":"markdown","f1cfc434":"markdown","775b9c7b":"markdown","17f5e46b":"markdown","d0185b78":"markdown","7064d1e1":"markdown","d1b50c7c":"markdown","18253b44":"markdown","37fc6b0e":"markdown","18132c8c":"markdown","dd3c3197":"markdown","fc6428d8":"markdown","59f19bad":"markdown","cbbf6cf5":"markdown","3f912224":"markdown","b24a674e":"markdown","e7aeda14":"markdown","5d1957b9":"markdown","94e23b4c":"markdown","88a8b114":"markdown","7d3d3339":"markdown","2dc1c198":"markdown","565643f1":"markdown","6a208b26":"markdown","e8e080c0":"markdown","b8eb70df":"markdown","3af23767":"markdown","78340162":"markdown","b03b4c91":"markdown","a29a4161":"markdown","1a0286a2":"markdown","113c3fd8":"markdown","30f1dd17":"markdown","a81dba24":"markdown","1856ff6e":"markdown","d43020ab":"markdown","5541f230":"markdown","a318b5bd":"markdown","49f64df4":"markdown","b2cb61da":"markdown","53a86c61":"markdown","4d2b1a43":"markdown","029377c3":"markdown","ec6e114a":"markdown","bb93d13d":"markdown","90e055a4":"markdown","95d5a697":"markdown","a4aa3ece":"markdown","efa990ab":"markdown","a344e33e":"markdown","4166045f":"markdown","fc959781":"markdown","77edbebb":"markdown","6e7106f7":"markdown","fc87dc2f":"markdown","924dcd57":"markdown","20459d6d":"markdown","0129ffb4":"markdown","71b66441":"markdown","c6a7fe77":"markdown","7201dcb4":"markdown","73c02cff":"markdown","c1ed7e92":"markdown","6fa82486":"markdown","a92b0290":"markdown","6e33fcc8":"markdown","1f619222":"markdown","43e957c8":"markdown","adba5726":"markdown","c8e922ac":"markdown","c1e7b139":"markdown","c25a7893":"markdown","bd7ba0ab":"markdown","a4a4abbe":"markdown","6ec3c3d3":"markdown","5bf55547":"markdown","ce6ae186":"markdown","26e8e14e":"markdown","d5627cf5":"markdown","628ea56e":"markdown","1efa4af5":"markdown","4cf92ddb":"markdown","9cfa573a":"markdown","175e119e":"markdown","5057fc5e":"markdown","3f3b413f":"markdown","2771f5c3":"markdown","c8bc310a":"markdown","94955f9f":"markdown","1a0d02fc":"markdown","9c27b34a":"markdown","3fb7ecea":"markdown","aa94c777":"markdown","991b241a":"markdown","91d209ee":"markdown","2a9dffbb":"markdown","2b23f9f8":"markdown","fb5a1f18":"markdown","9561c92f":"markdown","e892c5a1":"markdown","14857cb3":"markdown","9e19ef3d":"markdown","c7e6b91a":"markdown","29ee2c2d":"markdown","5ed587c4":"markdown","265725a2":"markdown","e7355cb4":"markdown","0b0fe6a2":"markdown","4bfcf595":"markdown","c1d0eaec":"markdown","d00a214a":"markdown","c56f62cf":"markdown","2ad67bc1":"markdown","02a01d83":"markdown","5a08f53e":"markdown","cc0f627e":"markdown","aca3f1b2":"markdown","693b3660":"markdown","595cccce":"markdown","a6f9b2e5":"markdown"},"source":{"018f6959":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8914bec6":"import missingno as msno\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nfrom matplotlib.patches import ConnectionPatch\nimport seaborn as sns\nfrom scipy import stats\nprint(\"Required libraries and modules imported successfully!\")\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nprint(\"Warnings will be ignored\")","3cd026a3":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\nprint(\"Training set imported Successfully!\")","a54a0dff":"df_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nprint(\"Testing set imported successfully!\")","36085d2b":"print(\"Number of rows in the training set is : \", df_train.shape[0])\nprint(\"Number of columns in the training set is : \", df_train.shape[1])","bcd9ab41":"print(\"Number of rows in the testing set is : \", df_test.shape[0])\nprint(\"Number of columns in the testing set is : \", df_test.shape[1])","f95231da":"pd.DataFrame(\n    df_train.columns, \n    columns = ['Column Names'],\n    index = range(1, len(df_train.columns)+1, 1)\n)","b7a0ea19":"pd.DataFrame(\n    df_test.columns, \n    columns = ['Column Names'],\n    index = range(1, len(df_test.columns)+1, 1)\n)","4802956d":"df_train.dtypes.value_counts()","572f516a":"intList = list ()         # Initialize an empty list to store the columns with int type data\nfloatList = list ()       # Initialize an empty list to store the columns with float type data\nobjectList = list ()      # Initialize an empty list to store the columns with object type data\n\nfor i in df_train.columns :\n    if df_train.dtypes[i] == int :\n        intList.append(i)        \n    elif df_train.dtypes[i] == float :\n        floatList.append(i)\n    else :\n        objectList.append(i)\n\nprint(\"========== Columns with Integer values ==========\")\nicount = 0\nfor i in intList :\n    icount += 1\n    print(icount, \"\\t\", i)\n\nprint(\"\\n\")\n\nprint(\"=========== Columns with Float values ===========\")\nfcount = 0\nfor i in floatList :\n    fcount += 1\n    print(fcount, \"\\t\", i)\n\nprint(\"\\n\")\n\nprint(\"=========== Columns with Object values ===========\")\nocount = 0\nfor i in objectList :\n    ocount += 1\n    print(ocount, \"\\t\", i)","d6af6c07":"df_test.dtypes.value_counts()","872b635b":"intList = list ()         # Initialize an empty list to store the columns with int type data\nfloatList = list ()       # Initialize an empty list to store the columns with float type data\nobjectList = list ()      # Initialize an empty list to store the columns with object type data\n\nfor i in df_test.columns :\n    if df_test.dtypes[i] == int :\n        intList.append(i)        \n    elif df_test.dtypes[i] == float :\n        floatList.append(i)\n    else :\n        objectList.append(i)\n\nprint(\"========== Columns with Integer values ==========\")\nicount = 0\nfor i in intList :\n    icount += 1\n    print(icount, \"\\t\", i)\n\nprint(\"\\n\")\n\nprint(\"=========== Columns with Float values ===========\")\nfcount = 0\nfor i in floatList :\n    fcount += 1\n    print(fcount, \"\\t\", i)\n\nprint(\"\\n\")\n\nprint(\"=========== Columns with Object values ===========\")\nocount = 0\nfor i in objectList :\n    ocount += 1\n    print(ocount, \"\\t\", i)","05affcdc":"df_train[\"Name\"].sample(5)","8a7d2d9d":"last_titleFirst = df_train[\"Name\"].str.split(\",\", expand = True)\nlast_titleFirst","de953c1c":"# Column with first names with the titles\ndf_train.insert(\n    loc = 1,\n    column = \"Title_First\",\n    value = last_titleFirst[1]\n)\n\n# Column with last names\ndf_train.insert(\n    loc = 2,\n    column = \"LastName\",\n    value  = last_titleFirst[0]\n)","5ffc057f":"title_first = df_train[\"Title_First\"].str.split(n = 1, expand = True)\ntitle_first","b8ca0872":"# Column with titles\ndf_train.insert(\n    loc = 1,\n    column = \"Title\",\n    value = title_first[0]\n)\n\n# Column with first names\ndf_train.insert(\n    loc = 2,\n    column = \"FirstName\",\n    value = title_first[1]\n)","8ee2deaa":"df_train[\"Title\"] = df_train[\"Title\"].str.rstrip(\".\")","9ba6a6f7":"df_train = df_train.drop(columns = [\"Title_First\",\"Name\"])","9aaa6370":"df_train.sample(10)","c5ce105f":"# Divide the Name column\nlast_titleFirst = df_test[\"Name\"].str.split(\",\", expand = True)\n# Insert column with first names with the titles\ndf_test.insert(\n    loc = 1,\n    column = \"Title_First\",\n    value = last_titleFirst[1]\n)\n# Insert column with last names\ndf_test.insert(\n    loc = 2,\n    column = \"LastName\",\n    value  = last_titleFirst[0]\n)\n\n# Divide the Title_First column\ntitle_first = df_test[\"Title_First\"].str.split(n = 1, expand = True)\n# Insert column with titles\ndf_test.insert(\n    loc = 1,\n    column = \"Title\",\n    value = title_first[0]\n)\n\n# Insert column with first names\ndf_test.insert(\n    loc = 2,\n    column = \"FirstName\",\n    value = title_first[1]\n)\n\n# Remove \".\" at end of each Title\ndf_test[\"Title\"] = df_test[\"Title\"].str.rstrip(\".\")\n\n# Remove the Title_First and Name columns\ndf_test = df_test.drop(columns = [\"Title_First\",\"Name\"])\n\n# Sample of 10 rows\ndf_test.sample(10)","c3a2e615":"msno.bar(df_train)","6099d00c":"msno.matrix(df_train)","0442f937":"missingCount = list()\n\nfor i in df_train.columns :\n    missingCount.append(891-df_train[i].count())\n\npd.DataFrame(\n    (df_train.columns, missingCount),\n    columns = range(1,len(df_train.columns)+1,1),\n    index = [\"Column Names\", \"Number of Missing Values\"]\n)","644c7808":"print(\"Percentage of missing values in 'Age' is : \", \"%.2f\" % ((df_train[\"Age\"].isnull().sum()\/891) * 100), \"%\")\nprint(\"Percentage of missing values in 'Cabin' is : \", \"%.2f\" % ((df_train[\"Cabin\"].isnull().sum()\/891) * 100), \"%\")\nprint(\"Percentage of missing values in 'Embarked' is : \", \"%.2f\" % ((df_train[\"Embarked\"].isnull().sum()\/891) * 100), \"%\")","32167ad2":"msno.bar(df_test)","5e30064a":"msno.matrix(df_test)","83d50b98":"missingCount = list()\n\nfor i in df_test.columns :\n    missingCount.append(418-df_test[i].count())\n\npd.DataFrame(\n    (df_test.columns, missingCount),\n    columns = range(1,len(df_test.columns)+1,1),\n    index = [\"Column Names\", \"Number of Missing Values\"]\n)","b1f7be77":"print(\"Percentage of missing values in 'Age' is : \", \"%.2f\" % ((df_test[\"Age\"].isnull().sum()\/891) * 100), \"%\")\nprint(\"Percentage of missing values in 'Cabin' is : \", \"%.2f\" % ((df_test[\"Cabin\"].isnull().sum()\/891) * 100), \"%\")\nprint(\"Percentage of missing values in 'Fare' is : \", \"%.2f\" % ((df_test[\"Fare\"].isnull().sum()\/891) * 100), \"%\")","89b84fae":"df_train[ df_train[\"Embarked\"].isnull() ]","794df72a":"df_train[\"Embarked\"].describe()","417cfa49":"df_train[\"Embarked\"][61] = \"S\"\ndf_train[\"Embarked\"][829] = \"S\"","7536832a":"if df_train[\"Embarked\"].isnull().sum() == 0 :\n    print(\"Missing Values Imputed!\")\nelse :\n    print(\"Missing Values remaining still in the column!\")","ab596595":"# Operate on data to remove \"Cabin\"\ndf_train = df_train.drop(\n                \"Cabin\", \n                axis = 1, \n                inplace = False\n            )\n\n# Confirm the removal of \"Cabin\"\nfor i in df_train.columns :\n    if i == \"Cabin\" :\n        print(\"Column was not removed!\")\nelse :\n    print(\"Cabin removed successfully!\")","dc3758ad":"# Operate on data to remove \"Cabin\"\ndf_test = df_test.drop(\n                \"Cabin\", \n                axis = 1, \n                inplace = False\n            )\n\n# Confirm the removal of \"Cabin\"\nfor i in df_test.columns :\n    if i == \"Cabin\" :\n        print(\"Column was not removed!\")\nelse :\n    print(\"Cabin removed successfully!\")","a7264e5c":"plt.figure( figsize = [10, 10] )\nsns.set_context(\"talk\")\nsns.distplot(\n    df_train[\"Age\"].dropna().values,\n    bins = 50,\n    hist = True,\n    kde = True,\n    color = \"purple\"\n)","4bc2e5da":"# Set figure size\nplt.figure( figsize = [10, 10] )\n\n# Set Mean\nplt.axvline(\n    x = np.mean(\n            df_train[\"Age\"].dropna().values\n        ),\n    color = \"red\"\n)\n\n# Set Q1\nplt.axvline(\n    x = np.quantile(\n            a = df_train[\"Age\"].dropna().values,\n            q = 0.25, \n            interpolation = 'linear'\n        ), \n    color = \"green\"\n    )\n\n# Set Q2 or Median\nplt.axvline(\n    x = np.median(\n            df_train[\"Age\"].dropna().values\n        ), \n    color = \"blue\"\n)\n\n# Set Q3\nplt.axvline(\n    x = np.quantile(\n            a = df_train[\"Age\"].dropna().values,\n            q = 0.75,\n            interpolation = 'linear'\n        ),\n    color = \"yellow\"\n)\n\n# Plot\nsns.set_context(\"talk\")\nsns.distplot(\n    df_train[\"Age\"].dropna().values,\n    bins = 50,\n    hist = True,\n    kde = True,\n    color = \"purple\"\n)","677d8816":"ageListMale_wo_Nan = df_train[\"Age\"][-df_train[\"Age\"].isnull()][df_train[\"Sex\"]==\"male\"]\nageListFemale_wo_Nan = df_train[\"Age\"][-df_train[\"Age\"].isnull()][df_train[\"Sex\"]==\"female\"]\n\n# Set figure size\nplt.figure(figsize = [25, 25] )\n\n# Plot with Male age\n# Position\nplt.subplot(2, 1, 1)\n# Mean line\nplt.axvline(\n    x = np.mean(ageListMale_wo_Nan),\n    color = \"red\"\n)\n# Q1 line\nplt.axvline(\n    x = np.quantile(\n            a = ageListMale_wo_Nan,\n            q = 0.25,\n            interpolation = 'linear'\n        ),\n    color = \"green\"\n)\n# Q2 or Median line\nplt.axvline(\n    x = np.median(ageListMale_wo_Nan), \n    color = \"blue\"\n)\n# Q3 line\nplt.axvline(\n    x = np.quantile(\n            a = ageListMale_wo_Nan,\n            q = 0.75,\n            interpolation = 'linear'\n        ), \n    color = \"yellow\"\n)\n# Title\nplt.title( \"Male\" )\n# Plot\nsns.set_context(\"poster\")\nsns.distplot(\n    ageListMale_wo_Nan,\n    bins = 50,\n    hist = True,\n    kde = True,\n    color = \"purple\"\n)\n\n# Plot with Male age\n# Position\nplt.subplot(2, 1, 2)\n# Mean line\nplt.axvline(\n    x = np.mean(ageListFemale_wo_Nan), \n    color = \"red\"\n)\n# Q1 line\nplt.axvline(\n    x = np.quantile(\n            a = ageListFemale_wo_Nan,\n            q = 0.25,\n            interpolation = 'linear'\n        ), \n    color = \"green\"\n)\n# Q2 or Median line\nplt.axvline(\n    x = np.median(ageListFemale_wo_Nan),\n    color = \"blue\"\n)\n# Q3 line\nplt.axvline(\n    x = np.quantile(\n            a = ageListFemale_wo_Nan,\n            q = 0.75,\n            interpolation = 'linear'\n        ), \n    color = \"yellow\"\n)\n# Title\nplt.title( \"Female\" )\n# Plot\nsns.set_context(\"notebook\")\nsns.distplot(\n    ageListFemale_wo_Nan,\n    bins = 50,\n    hist = True,\n    kde = True,\n    color = \"purple\"\n)","ccb5f528":"df_train[\"Title\"].nunique()","b8bfb9c9":"for title in df_train[\"Title\"].unique() :\n    print(\"\\n==========\", title, \"==========\")\n    print(df_train[\"Age\"][ (-df_train[\"Age\"].isna()) & (df_train[\"Title\"] == title) ].describe())","bace4abd":"for title in df_train[\"Title\"] :\n    medianAge = df_train[\"Age\"][\n                   ( -df_train[\"Age\"].isnull() ) &\n                   ( df_train[\"Title\"] == title )\n                ].median()\n    meanAge = df_train[\"Age\"][\n                   ( -df_train[\"Age\"].isnull() ) &\n                   ( df_train[\"Title\"] == title )\n                ].mean()\n    j = 0\n    for age in df_train[\"Age\"] :\n        if (str(age) == \"nan\") & (str(df_train[\"Title\"][j]) == title):\n            df_train[\"Age\"][j] = (medianAge + meanAge)\/2\n        else :\n            pass\n        j = j + 1\n\n# Check\nif df_train[\"Age\"].isnull().sum() == 0 :\n    print(\"Missing Values Imputed!\")\nelse :\n    print(\"Missing Values remaining still in the column!\")","d037af3c":"for title in df_train[\"Title\"].unique() :\n    if df_train[\"Title\"][df_train[\"Title\"] == title].count() > 10 :\n        i = 1\n        plt.figure( figsize = [200,200] )\n        plt.subplot(df_train[\"Title\"].nunique(), df_train[\"Title\"].nunique(), i)\n        # Mean line\n        plt.axvline(\n            x = df_train[\"Age\"][ (-df_train[\"Age\"].isna()) & (df_train[\"Title\"] == title) ].mean(), \n            color = \"red\"\n        )\n        # Q1 line\n        plt.axvline(\n            x = df_train[\"Age\"][ (-df_train[\"Age\"].isna()) & (df_train[\"Title\"] == title) ].quantile(0.25, \"linear\"),\n            color = \"green\"\n        )\n        # Q2 or Median line\n        plt.axvline(\n            x = df_train[\"Age\"][ (-df_train[\"Age\"].isna()) & (df_train[\"Title\"] == title) ].median(),\n            color = \"blue\"\n        )\n        # Q3 line\n        plt.axvline(\n            x = df_train[\"Age\"][ (-df_train[\"Age\"].isna()) & (df_train[\"Title\"] == title) ].quantile(0.25, \"linear\"), \n            color = \"yellow\"\n        )\n        # Title\n        plt.title( title )\n        # Plot\n        sns.distplot(\n            df_train[\"Age\"][ (-df_train[\"Age\"].isna()) & (df_train[\"Title\"] == title) ],\n            hist = True,\n            kde = True,\n            color = \"purple\"\n        )\n        i += 1","5c10d39d":"for title in df_test[\"Title\"] :\n    medianAge = df_test[\"Age\"][\n                   ( -df_test[\"Age\"].isnull() ) &\n                   ( df_test[\"Title\"] == title )\n                ].median()\n    meanAge = df_test[\"Age\"][\n                   ( -df_test[\"Age\"].isnull() ) &\n                   ( df_test[\"Title\"] == title )\n                ].mean()\n    j = 0\n    for age in df_test[\"Age\"] :\n        if (str(age) == \"nan\") & (str(df_test[\"Title\"][j]) == title):\n            df_test[\"Age\"][j] = (medianAge + meanAge)\/2\n        else :\n            pass\n        j = j + 1\n\n# Check\nif df_test[\"Age\"].isnull().sum() == 0 :\n    print(\"Missing Values Imputed!\")\nelse :\n    print(\"Missing Values remaining still in the column!\")","878c3b00":"df_test[df_test[\"Age\"].isnull()]","4cb5f820":"df_test[\"Title\"][df_test[\"Title\"] == \"Ms\"].count()","2568178b":"df_train[\"Title\"][df_train[\"Title\"] == \"Ms\"].count()","1214381c":"df_train[df_train[\"Title\"] == \"Ms\"]","ebcf6e8a":"df_test[\"Age\"][df_test[\"Title\"] == \"Ms\"] = 28","d87386f6":"if df_test[\"Age\"].isnull().sum() == 0 :\n    print(\"Missing Values Imputed!\")\nelse :\n    print(\"Missing Values remaining still in the column!\")","11a46164":"df_test[df_test[\"Fare\"].isnull()]","85018480":"df_test[\n    df_test[\"Pclass\"] == 3\n][\n    df_test[\"Title\"] == \"Mr\"\n][\n    df_test[\"Embarked\"] == \"S\"\n][\n    df_test[\"Age\"] >= 55\n][\n    df_test[\"Age\"] <= 65\n].sort_values(\n    by = [\"Age\"]\n)","7c56e5b8":"df_train[\n    df_train[\"Pclass\"] == 3\n][\n    df_train[\"Title\"] == \"Mr\"\n][\n    df_train[\"Embarked\"] == \"S\"\n][\n    df_train[\"Age\"] >= 55\n][\n    df_train[\"Age\"] <= 65\n].sort_values(\n    by = [\"Age\"]\n)","6eb44334":"df_test[\"Fare\"][\n    df_test[\"Fare\"].isnull()\n] = (7.2500 + 6.2375)\/2","effd9bc4":"df_test[\"Fare\"].isnull().sum()","a21de65c":"df = df_train\ndf2 = df_test","e37fa952":"df = df.rename(\n        columns = {\n            \"Pclass\" : \"PassengerClass\",\n            \"SibSp\" : \"SiblingSpouse\",\n \t        \"Parch\" : \"ParentChild\"\n        }\n    )\ndf2 = df2.rename(\n        columns = {\n            \"Pclass\" : \"PassengerClass\",\n            \"SibSp\" : \"SiblingSpouse\",\n \t        \"Parch\" : \"ParentChild\"\n        }\n    )","638baee1":"df[\"Survived\"].replace(\n    {\n        0 : \"No\",\n        1 : \"Yes\"\n    },\n    inplace = True\n)","e9ab498a":"df[\"PassengerClass\"].replace(\n    {\n        1 : \"1st\",\n        2 : \"2nd\",\n        3 : \"3rd\"\n    },\n    inplace = True\n)\ndf2[\"PassengerClass\"].replace(\n    {\n        1 : \"1st\",\n        2 : \"2nd\",\n        3 : \"3rd\"\n    },\n    inplace = True\n)","b34aa52a":"df[\"Sex\"].replace(\n    {\n        \"male\" : \"Male\",\n        \"female\" : \"Female\"\n    },\n    inplace = True\n)\ndf2[\"Sex\"].replace(\n    {\n        \"male\" : \"Male\",\n        \"female\" : \"Female\"\n    },\n    inplace = True\n)","3642ab8d":"df[\"Embarked\"].replace(\n    {\n        \"C\" : \"Cherbourg\",\n        \"Q\" : \"Queenstown\",\n        \"S\" : \"Southampton\"\n    },\n    inplace = True\n)\ndf2[\"Embarked\"].replace(\n    {\n        \"C\" : \"Cherbourg\",\n        \"Q\" : \"Queenstown\",\n        \"S\" : \"Southampton\"\n    },\n    inplace = True\n)","45c6472c":"print(\"Minimum Age : \", min(df[\"Age\"]))\nprint(\"Maximum Age : \", max(df[\"Age\"]))","067b591a":"print(\"Minimum Age : \", min(df2[\"Age\"]))\nprint(\"Maximum Age : \", max(df2[\"Age\"]))","be63d853":"df[\"Age Group\"] = pd.cut(\n                    df[\"Age\"],\n                    bins = [0, 5, 12, 19, 35, 55, 65, 87],\n                    right = True,\n                    labels = [\"Infant\", \"Child\", \"Teenager\", \"Young Adult\", \"Middle Aged\", \"Adult\", \"Senior\"]\n                  )\n\ndf2[\"Age Group\"] = pd.cut(\n                    df2[\"Age\"],\n                    bins = [0, 5, 12, 19, 35, 55, 65, 87],\n                    right = True,\n                    labels = [\"Infant\", \"Child\", \"Teenager\", \"Young Adult\", \"Middle Aged\", \"Adult\", \"Senior\"]\n                  )","6691ff9f":"plt.figure( figsize = [15, 7.5] )\nsns.set_context(\"poster\")\nplt.subplot(1,2,1)\nsns.countplot(\n    \"Survived\",\n    data = df\n)\nplt.title(\n    \"Survival Plot\", \n    fontsize = 30\n)\nplt.ylabel(\n    \"Number of Passengers\",\n    fontsize = 25\n)","625bc170":"countSurvived = 0\ncountDied = 0\nfor i in df[\"Survived\"] :\n    if i == \"Yes\" :\n        countSurvived = countSurvived + 1\n    else :\n        countDied = countDied + 1\nprint(\"Number of Passengers Survived : \", countSurvived)\nprint(\"Number of Passengers Died : \", countDied)","6c1543ad":"plt.subplots( figsize = [8, 8] )\nplt.pie( \n    [countSurvived, countDied],\n    explode = [0.1, 0],\n    labels = [\"Survived\\n($n_s$)\", \"Died\\n($n_d$)\"],\n    colors = [\"green\", \"cyan\"],\n    autopct = '%2.2f%%',\n    shadow = True,\n    startangle = 90,\n    radius = 1.5,\n    wedgeprops = {\"linewidth\" : 10},\n    textprops = {\"fontsize\" : \"large\",\n                 \"weight\" : \"bold\"}\n)\nplt.show()","65752930":"plt.figure( figsize = [10, 10] )\nsns.countplot(\n    \"Sex\",\n    data = df\n)\nplt.title(\n    \"Male - Female\",\n    fontsize = 30\n)\nplt.ylabel(\n    \"Number of Passengers\",\n    fontsize = 25\n)","d458b18b":"countMale = 0\ncountFemale = 0\nfor i in df[\"Sex\"] :\n    if i == \"Male\" :\n        countMale = countMale + 1\n    else :\n        countFemale = countFemale + 1\nprint(\"Number of Male Passengers : \", countMale)\nprint(\"Number of Female Passengers : \", countFemale)","a3a6f2e8":"plt.subplots( figsize = [8, 8] )\nplt.pie( \n    [countMale, countFemale],\n    explode = [0, 0.1],\n    labels = [\"Male\\n($n_m$)\", \"Female\\n($n_f$)\"],\n    colors = [\"blue\", \"purple\"],\n    autopct = '%2.2f%%',\n    shadow = True,\n    startangle = 90,\n    radius = 1.5,\n    wedgeprops = {\"linewidth\" : 10},\n    textprops = {\"fontsize\" : \"large\",\n                 \"weight\" : \"bold\"}\n)\nplt.show()","4de9ee39":"# Calculate the number of Passesngers\ncount_sm = df[\"Survived\"][df[\"Survived\"] == \"Yes\"][df[\"Sex\"] == \"Male\"].count()\ncount_dm = df[\"Survived\"][df[\"Survived\"] == \"No\"][df[\"Sex\"] == \"Male\"].count()\ncount_sf = df[\"Survived\"][df[\"Survived\"] == \"Yes\"][df[\"Sex\"] == \"Female\"].count()\ncount_df = df[\"Survived\"][df[\"Survived\"] == \"No\"][df[\"Sex\"] == \"Female\"].count()\n\n# Plot the result of the six cases\nlabels = [\"Male\", \"Female\"]\nsurvived = [count_sm, count_sf]\ndied = [count_dm, count_df]\n\nx = np.arange(len(labels))\nwidth = 0.35\n\nfig, ax = plt.subplots(figsize = [10, 10])\nplot1 = ax.bar(\n            x - width\/2,\n            survived,\n            width,\n            label = \"Survived\"\n        )\nplot2 = ax.bar(\n            x + width\/2,\n            died,\n            width,\n            label = \"Died\"\n        )\n\nax.set_title(\n    \"Survived-Sex\", \n    size = \"xx-large\"\n)\n\nax.set_ylabel(\n    \"Number of Passengers\", \n    size = \"x-large\"\n)\n\nax.set_xlabel(\n    \"Sex\", \n    size = \"x-large\"\n)\n\nax.set_xticks(x)\n\nax.set_xticklabels(\n    labels, \n    size = \"large\"\n)\n\nax.legend(fontsize = \"large\")\nfig.tight_layout()\nplt.show()","71f54d7a":"fig, (survivedBar, totalPie, diedBar) = plt.subplots(1, 3, figsize = (35,10))\nfig.subplots_adjust(wspace = 0)\n\n\n# 1. Creating Pie chart with total Survived and total Died\ntotalPie.pie( \n    [sum(survived), sum(died)],\n    explode = [0, 0.1],\n    labels = [\"Survived\", \"Died\"],\n    colors = [\"green\", \"cyan\"],\n    autopct = '%2.2f%%',\n    shadow = True,\n    startangle = 108,\n    radius = 1.5,\n    wedgeprops = {\"linewidth\" : 8},\n    textprops = {\"fontsize\" : \"large\",\n                 \"weight\" : \"bold\"}\n)\n\n\n# 2. Creating Bar chart based on the Survived Data\n\n# 2.1. Creating Bar chart on Survived Male\nsurvivedBar.bar(\n    x = \"Survived\",\n    height = survived[0],\n    width = 0.2,\n    bottom = 0,\n    label = \"Male\",\n    align = \"center\",\n    edgecolor  =\"black\",\n    color = \"#4CFF0A\"\n)\nsurvivedBar.text(\n    x = 0,\n    y = survived[0]\/2,\n    s = str(np.round(survived[0] * 100\/sum(survived), 2))+\"%\",\n    ha = \"center\",\n    weight = \"bold\"\n)\n\n# 2.2. Creating Bar chart on Survived Female\nsurvivedBar.bar(\n    x = \"Survived\",\n    height = survived[1],\n    width = 0.2,\n    bottom = survived[0],\n    label = \"Female\",\n    align = \"center\",\n    edgecolor = \"black\",\n    color = \"#99FF33\"\n)\nsurvivedBar.text(x = 0,\n    y = survived[0] + survived[1]\/2,\n    s = str(np.round(survived[1] * 100\/sum(survived), 2))+\"%\",\n    ha = \"center\",\n    weight = \"bold\"\n)\n\n# 2.3. Fix the axis of the bars\nsurvivedBar.axis(\n    xmin = -2.5 * 0.1,\n    xmax = 2.5 * 0.1\n)\nsurvivedBar.axis(\"off\")\n\n# 2.4. Customise the legend\nsurvivedBar.legend(\n    labels = (\"Male\", \"Female\"),\n    loc = \"upper left\",\n    fontsize = \"medium\"\n)\n\n# 3. Line from Pie to Survived Bar\n# Here, ConnectionPatch is used to draw lines between two plots\n\n# 3.1. Get the wedge data\ntheta1 = totalPie.patches[0].theta1\ntheta2 = totalPie.patches[0].theta2\ncenter = totalPie.patches[0].center\nradius = totalPie.patches[0].r\nbar_height = sum(item.get_height() for item in survivedBar.patches)\n\n# 3.2. Top Connecting Line\nx = radius * np.cos(np.pi \/ 180 * theta1) + center[0]\ny = radius * np.sin(np.pi \/ 180 * theta1) + center[1]\ncon = ConnectionPatch(\n        xyA = (0.1\/2, bar_height),\n        coordsA = survivedBar.transData,\n        xyB = (x , y),\n        coordsB = totalPie.transData\n    )\ncon.set_color([0, 0, 0])\nsurvivedBar.add_artist(con)\ncon.set_linewidth(2)\ncon.set_linestyle(\"-.\")\n\n# 3.3. Bottom Connecting Line\nx = radius * np.cos(np.pi \/ 180 * theta2) - center[0]\ny = radius * np.sin(np.pi \/ 180 * theta2) - center[1]\ncon = ConnectionPatch(\n        xyA = (0.1\/2, 0),\n        coordsA = survivedBar.transData,\n        xyB = (x, y),\n        coordsB = totalPie.transData\n    )\ncon.set_color([0, 0, 0])\nsurvivedBar.add_artist(con)\ncon.set_linewidth(2)\ncon.set_linestyle(\"-.\")\n\n\n# 4. Creating Bar chart based on the Died Data\n\n# 4.1. Creating Bar chart on Died Male\ndiedBar.bar(\n    x = \"Died\",\n    height = died[0],\n    width = 0.2,\n    bottom = 0,\n    label = \"Male\",\n    align = \"center\",\n    edgecolor = \"black\",\n    color = \"#0091D0\"\n)\ndiedBar.text(\n    x = 0,\n    y = died[0]\/2,\n    s = str(np.round(died[0] * 100\/sum(died), 2))+\"%\",\n    ha = \"center\",\n    weight = \"bold\"\n)\n\n# 4.2. Creating Bar chart on Died Female\ndiedBar.bar(\n    x = \"Died\",\n    height = died[1],\n    width = 0.2,\n    bottom = died[0],\n    label = \"Female\",\n    align = \"center\",\n    edgecolor = \"black\",\n    color = \"#004CD0\"\n)\ndiedBar.text(\n    x = 0,\n    y = died[0] + died[1]\/2,\n    s = str(np.round(died[1] * 100\/sum(died), 2))+\"%\",\n    ha = \"center\",\n    weight = \"bold\"\n)\n\n# 4.3. Fix the axis of the bars\ndiedBar.axis(\n    xmin = -2.5 * 0.1,\n    xmax = 2.5 * 0.1\n)\ndiedBar.axis(\"off\")\n\n# 4.4. Customise the legend\ndiedBar.legend(\n    labels = (\"Male\", \"Female\"),\n    loc = \"upper right\",\n    fontsize = \"medium\"\n)\n\n# 5. Line from Pie to Died Bar\n# ConnectionPatch is used to draw lines between two plots\n\n# 5.1. Get the wedge data\ntheta1 = totalPie.patches[0].theta1\ntheta2 = totalPie.patches[0].theta2\ncenter = totalPie.patches[0].center\nradius = totalPie.patches[0].r\nbar_height = sum(item.get_height() for item in diedBar.patches)\n\n# 5.2. Top Connecting Line\nx = radius * np.cos(np.pi \/ 180 * theta1) + center[0]\ny = radius * np.sin(np.pi \/ 180 * theta1) + center[1]\ncon = ConnectionPatch(\n        xyA = (-0.1\/2, bar_height),\n        coordsA = diedBar.transData,\n        xyB = (x + 1, y + 0.06),\n        coordsB = totalPie.transData\n    )\ncon.set_color([0, 0, 0])\ndiedBar.add_artist(con)\ncon.set_linewidth(2)\ncon.set_linestyle(\"-.\")\n\n# 5.3. Bottom Connecting Line\nx = radius * np.cos(np.pi \/ 180 * theta2) + center[0]\ny = radius * np.sin(np.pi \/ 180 * theta2) + center[1]\ncon = ConnectionPatch(\n        xyA = (-0.1\/2, 0),\n        coordsA = diedBar.transData,\n        xyB = (x + 1, y - 0.16),\n        coordsB = totalPie.transData\n    )\ncon.set_color([0, 0, 0])\ndiedBar.add_artist(con)\ncon.set_linewidth(2)\ncon.set_linestyle(\"-.\")\n\n# 6. Final Output\nplt.show()","84cf14e6":"surv_sex = pd.crosstab(\n                [df[\"Survived\"]],\n                [df[\"Sex\"]]\n            )\nchi2, p, dof, ex = stats.chi2_contingency(surv_sex)\npd.DataFrame(\n    data = [round(chi2, 3),round(p, 4)],\n    columns = [\"Value\"],\n    index = [\"Chi Square\", \"p-value\"]\n)","f4a21c26":"surv_sex.style.background_gradient(\n    cmap = \"cividis\"\n)","c1599bf4":"plt.figure( figsize = [10, 10] )\nsns.set_context(\"poster\")\nplt.title(\n    \"Passenger Class\", \n    fontsize = 30\n)\nsns.countplot(\n    \"PassengerClass\",\n    data = df,\n    order = [\"1st\", \"2nd\", \"3rd\"]\n)\nplt.ylabel(\n    \"Number of Passengers\",\n    fontsize = 25\n)","ad103392":"count1 = 0\ncount2 = 0\ncount3 = 0\nfor i in df[\"PassengerClass\"] :\n    if i == \"1st\" :\n        count1 += 1\n    elif i == \"2nd\" :\n        count2 += 1\n    else :\n        count3 += 1\nprint(\"Number of Passengers travelling in 1st class : \", count1)\nprint(\"Number of Passengers travelling in 2nd class : \", count2)\nprint(\"Number of Passengers travelling in 3rd class : \", count3)","fe876074":"plt.subplots( figsize = [8, 8] )\nplt.pie( \n    [count1, count2, count3],\n    explode = [0, 0.1, 0.2],\n    labels = [\"1st Class\\n($c_1$)\", \"2nd Class\\n($c_2$)\", \"3rd Class\\n($c_3$)\"],\n    colors = [\"blue\", \"green\", \"yellow\"],\n    autopct = '%2.2f%%',\n    shadow = True,\n    startangle = 90,\n    radius = 1.5,\n    wedgeprops = {\"linewidth\" : 8},\n    textprops = {\"fontsize\" : \"large\",\n                 \"weight\" : \"bold\"}\n)\nplt.show()","8e38eb3d":"# Calculate the number of Passesngers\ncount_1m = 0 # Case 1\ncount_1f = 0 # Case 2\ncount_2m = 0 # Case 3\ncount_2f = 0 # Case 3\ncount_3m = 0 # Case 5\ncount_3f = 0 # Case 6\n\nj = 0\nfor i in df[\"Sex\"] :\n    if i == \"Male\" :\n        if df[\"PassengerClass\"][j] == \"1st\" :\n            count_1m += 1\n        elif df[\"PassengerClass\"][j] == \"2nd\" :\n            count_2m += 1\n        else :\n            count_3m += 1\n    else : # i == \"female\"\n        if df[\"PassengerClass\"][j] == \"1st\" :\n            count_1f += 1\n        elif df[\"PassengerClass\"][j] == \"2nd\" :\n            count_2f += 1\n        else :\n            count_3f += 1\n    j += 1\n\n\npd.DataFrame(\n    data = {\"Male\" : [count_1m, count_2m, count_3m, (count_1m+count_2m+count_3m)],\n            \"Female\" : [count_1f, count_2f, count_3f, (count_1f+count_2f+count_3f)],\n            \"Sex Ratio\" : [count_1m\/count_1f,\n                           count_2m\/count_2f,\n                           count_3m\/count_3f,\n                           (count_1m+count_2m+count_3m)\/(count_1f+count_2f+count_3f)]},\n    index = [\"1st Class\", \"2nd Class\", \"3rd Class\", \"Total\"]\n).style.background_gradient(\n    cmap = \"PuOr\",\n    axis = 0\n)","501d42f6":"labels = [\"1st\", \"2nd\", \"3rd\"]\nmale = [count_1m, count_2m, count_3m]\nfemale = [count_1f, count_2f, count_3f]\n\nx = np.arange(len(labels))\nwidth = 0.35\n\nfig, ax = plt.subplots(figsize = [12, 12])\nplot1 = ax.bar(x - width\/2,\n               male,\n               width,\n               label = \"Male\")\nplot2 = ax.bar(x + width\/2,\n               female,\n               width,\n               label = \"Female\")\n\nax.set_title(\"PassengerClass-Sex\", \n             size = \"xx-large\")\n\nax.set_ylabel(\"Number of Passengers\", \n              size = \"x-large\")\n\nax.set_xlabel(\"Class\", \n              size = \"x-large\")\n\nax.set_xticks(x)\n\nax.set_xticklabels(labels, \n                   size = \"large\")\n\nax.legend(fontsize = \"large\")\nfig.tight_layout()\nplt.show()","7d5653d1":"fig, (femaleBar, totalPie, maleBar) = plt.subplots(1, 3, figsize = (40,12))\nfig.subplots_adjust(wspace = 0)\n\n\n# 1. Creating Pie chart with total Female and total Male\ntotalPie.pie( \n    [sum(female), sum(male)],\n    explode = [0, 0.1],\n    labels = [\"Female\", \"Male\"],\n    colors = [\"green\", \"cyan\"],\n    autopct = \"%2.2f%%\",\n    shadow = True,\n    startangle = 120,\n    radius = 1.5,\n    wedgeprops = {\"linewidth\" : 5},\n    textprops = {\"fontsize\" : \"x-large\",\n                 \"weight\" : \"bold\"}\n)\n\n\n# 2. Creating Bar chart based on the Female Data\n\n# 2.1. Creating Bar chart on Female - 1st Class\nfemaleBar.bar(\n    x = \"Female\",\n    height = female[0],\n    width = 0.1,\n    bottom = 0,\n    label = \"1st Class\",\n    align = \"center\",\n    edgecolor  =\"black\",\n    color = \"#99FF33\"\n)\nfemaleBar.text(x = 0,\n               y = female[0]\/2,\n               s = str(np.round(female[0] * 100\/sum(female), 2))+\"%\",\n               ha = \"center\",\n               weight = \"bold\")\n\n# 2.2. Creating Bar chart on Female - 2nd Class\nfemaleBar.bar(\n    x = \"Female\",\n    height = female[1],\n    width = 0.1,\n    bottom = female[0],\n    label = \"2nd Class\",\n    align = \"center\",\n    edgecolor = \"black\",\n    color = \"#00994C\"\n)\nfemaleBar.text(x = 0,\n                 y = female[0] + female[1]\/2,\n                 s = str(np.round(female[1] * 100\/sum(female), 2))+\"%\",\n                 ha = \"center\",\n                 weight = \"bold\")\n\n# 2.3. Creating Bar chart on female - 3rd Class\nfemaleBar.bar(\n    x = \"Female\",\n    height = female[2],\n    width = 0.1,\n    bottom = female[0] + female[1],\n    label = \"3nd Class\",\n    align = \"center\",\n    edgecolor = \"black\",\n    color = \"#B2FF66\"\n)\nfemaleBar.text(x = 0,\n               y = female[0] + female[1] + female[2]\/2,\n               s = str(np.round(female[2] * 100\/sum(female), 2))+\"%\",\n               ha = \"center\",\n               weight = \"bold\")\n\n# 2.4. Fix the axis of the bars\nfemaleBar.axis(xmin = -2.5 * 0.1,\n                 xmax = 2.5 * 0.1)\nfemaleBar.axis(\"off\")\n\n# 2.5. Customise the legend\nfemaleBar.legend(labels = (\"1st Class\", \"2nd Class\", \"3rd Class\"),\n                 loc = \"upper left\",\n                 fontsize = \"large\")\n\n# 3. Line from Pie to female Bar\n# Here, ConnectionPatch is used to draw lines between two plots\n\n# 3.1. Get the wedge data\ntheta1 = totalPie.patches[0].theta1\ntheta2 = totalPie.patches[0].theta2\ncenter = totalPie.patches[0].center\nradius = totalPie.patches[0].r\nbar_height = sum(item.get_height() for item in femaleBar.patches)\n\n# 3.2. Top Connecting Line\nx = radius * np.cos(np.pi \/ 180 * theta1) + center[0]\ny = radius * np.sin(np.pi \/ 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA = (0.1\/2, bar_height),\n                      coordsA = femaleBar.transData,\n                      xyB = (x , y),\n                      coordsB = totalPie.transData)\ncon.set_color([0, 0, 0])\nfemaleBar.add_artist(con)\ncon.set_linewidth(2)\ncon.set_linestyle(\"-.\")\n\n# 3.3. Bottom Connecting Line\nx = radius * np.cos(np.pi \/ 180 * theta2) - center[0]\ny = radius * np.sin(np.pi \/ 180 * theta2) - center[1]\ncon = ConnectionPatch(xyA = (0.1\/2, 0),\n                      coordsA = femaleBar.transData,\n                      xyB = (x, y),\n                      coordsB = totalPie.transData)\ncon.set_color([0, 0, 0])\nfemaleBar.add_artist(con)\ncon.set_linewidth(2)\ncon.set_linestyle(\"-.\")\n\n\n# 4. Creating Bar chart based on the Male Data\n\n# 4.1. Creating Bar chart on Male - 1st Class\nmaleBar.bar(\n    x = \"male\",\n    height = male[0],\n    width = 0.1,\n    bottom = 0,\n    label = \"1st Class\",\n    align = \"center\",\n    edgecolor = \"black\",\n    color = \"#0066CC\"\n)\nmaleBar.text(x = 0,\n             y = male[0]\/2,\n             s = str(np.round(male[0] * 100\/sum(male), 2))+\"%\",\n             ha = \"center\",\n             weight = \"bold\")\n\n# 4.2. Creating Bar chart on Male - 2nd Class\nmaleBar.bar(\n    x = \"male\",\n    height = male[1],\n    width = 0.1,\n    bottom = male[0],\n    label = \"Female\",\n    align = \"center\",\n    edgecolor = \"black\",\n    color = \"#003366\"\n)\nmaleBar.text(x = 0,\n             y = male[0] + male[1]\/2,\n             s = str(np.round(male[1] * 100\/sum(male), 2))+\"%\",\n             ha = \"center\",\n             weight = \"bold\")\n\n# 4.3. Creating Bar chart on Male - 3rd Class\nmaleBar.bar(\n    x = \"male\",\n    height = male[2],\n    width = 0.1,\n    bottom = male[0] + male[1],\n    label = \"3rd Class\",\n    align = \"center\",\n    edgecolor = \"black\",\n    color = \"#33FFFF\"\n)\nmaleBar.text(x = 0,\n             y = male[0] + male[1] + male[2]\/2,\n             s = str(np.round(male[2] * 100\/sum(male), 2))+\"%\",\n             ha = \"center\",\n             weight = \"bold\")\n\n# 4.4. Fix the axis of the bars\nmaleBar.axis(xmin = -2.5 * 0.1,\n             xmax = 2.5 * 0.1)\nmaleBar.axis(\"off\")\n\n# 4.5. Customise the legend\nmaleBar.legend(labels = (\"1st Class\", \"2nd Class\", \"3rd Class\"),\n               loc = \"upper right\",\n               fontsize = \"large\")\n\n# 5. Line from Pie to male Bar\n# ConnectionPatch is used to draw lines between two plots\n\n# 5.1. Get the wedge data\ntheta1 = totalPie.patches[0].theta1\ntheta2 = totalPie.patches[0].theta2\ncenter = totalPie.patches[0].center\nradius = totalPie.patches[0].r\nbar_height = sum(item.get_height() for item in maleBar.patches)\n\n# 5.2. Top Connecting Line\nx = radius * np.cos(np.pi \/ 180 * theta1) + center[0]\ny = radius * np.sin(np.pi \/ 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA = (-0.1\/2, bar_height),\n                      coordsA = maleBar.transData,\n                      xyB = (x + 1.5, y + 0.1),\n                      coordsB = totalPie.transData)\ncon.set_color([0, 0, 0])\nmaleBar.add_artist(con)\ncon.set_linewidth(2)\ncon.set_linestyle(\"-.\")\n\n# 5.3. Bottom Connecting Line\nx = radius * np.cos(np.pi \/ 180 * theta2) + center[0]\ny = radius * np.sin(np.pi \/ 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA = (-0.1\/2, 0),\n                      coordsA = maleBar.transData,\n                      xyB = (x + 1, y - 0.12),\n                      coordsB = totalPie.transData)\ncon.set_color([0, 0, 0])\nmaleBar.add_artist(con)\ncon.set_linewidth(2)\ncon.set_linestyle(\"-.\")\n\n# 6. Final Output\nplt.show()","ab786b9f":"# Count number of Passengers\ncount_1s = df[\"Survived\"][df[\"Survived\"] == \"Yes\"][df[\"PassengerClass\"] == \"1st\"].count()\ncount_2s = df[\"Survived\"][df[\"Survived\"] == \"Yes\"][df[\"PassengerClass\"] == \"2nd\"].count()\ncount_3s = df[\"Survived\"][df[\"Survived\"] == \"Yes\"][df[\"PassengerClass\"] == \"3rd\"].count()\n\ncount_1d = df[\"Survived\"][df[\"Survived\"] == \"No\"][df[\"PassengerClass\"] == \"1st\"].count()\ncount_2d = df[\"Survived\"][df[\"Survived\"] == \"No\"][df[\"PassengerClass\"] == \"2nd\"].count()\ncount_3d = df[\"Survived\"][df[\"Survived\"] == \"No\"][df[\"PassengerClass\"] == \"3rd\"].count()\n\n# Plot the result of the six cases\nlabels = [\"1st\", \"2nd\", \"3rd\"]\nsurvived = [count_1s, count_2s, count_3s]\ndied = [count_1d, count_2d, count_3d]\n\nx = np.arange(len(labels))\nwidth = 0.35\n\nfig, ax = plt.subplots(figsize = [10, 10])\nplot1 = ax.bar(\n    x - width\/2,\n    survived,\n    width,\n    label = \"Survived\"\n)\nplot2 = ax.bar(x + width\/2,\n    died,\n    width,\n    label = \"Died\"\n)\n\nax.set_title(\n    \"Survived-PassengerClass\", \n    size = \"xx-large\"\n)\n\nax.set_ylabel(\n    \"Number of Passengers\", \n    size = \"x-large\"\n)\n\nax.set_xlabel(\n    \"Passeger Class\", \n    size = \"x-large\"\n)\n\nax.set_xticks(x)\n\nax.set_xticklabels(\n    labels, \n    size = \"large\"\n)\n\nax.legend(fontsize = \"medium\")\nfig.tight_layout()\nplt.show()","dab995e8":"pc_surv = pd.crosstab(\n                [df[\"Survived\"]],\n                [df[\"PassengerClass\"]]\n            )\nchi2, p, dof, ex = stats.chi2_contingency(pc_surv)\npd.DataFrame(\n    data = [round(chi2, 3), round(p, 3)],\n    columns = [\"Value\"],\n    index = [\"Chi Sq\", \"p\"]\n)","0ba05175":"pc_surv.style.background_gradient(cmap = \"tab20c_r\" )","a81c6fa6":"fig, (survivedBar, totalPie, diedBar) = plt.subplots(1, 3, figsize = (40,15))\nfig.subplots_adjust(wspace = 0)\n\n\n# 1. Creating Pie chart with total Survived and total Died\ntotalPie.pie( \n    [sum(survived), sum(died)],\n    explode = [0, 0.1],\n    labels = [\"Survived\", \"Died\"],\n    colors = [\"#CC0000\", \"#CC0066\"],\n    autopct = '%2.2f%%',\n    shadow = True,\n    startangle = 108,\n    radius = 1.5,\n    wedgeprops = {\"linewidth\" : 5},\n    textprops = {\"fontsize\" : 30,\n                 \"weight\" : \"bold\"}\n)\n\n\n# 2. Creating Bar chart based on the Survived Data\n\n# 2.1. Creating Bar chart on Survived - 1st Class\nsurvivedBar.bar(\n    x = \"Survived\",\n    height = survived[0],\n    width = 0.1,\n    bottom = 0,\n    label = \"1st Class\",\n    align = \"center\",\n    edgecolor  =\"black\",\n    color = \"#FF3333\"\n)\nsurvivedBar.text(\n    x = 0,\n    y = survived[0]\/2,\n    s = str(np.round(survived[0] * 100\/sum(survived), 2))+\"%\",\n    ha = \"center\",\n    weight = \"bold\"\n)\n\n# 2.2. Creating Bar chart on Survived - 2nd Class\nsurvivedBar.bar(\n    x = \"Survived\",\n    height = survived[1],\n    width = 0.1,\n    bottom = survived[0],\n    label = \"2nd Class\",\n    align = \"center\",\n    edgecolor = \"black\",\n    color = \"#660000\"\n)\nsurvivedBar.text(\n    x = 0,\n    y = survived[0] + survived[1]\/2,\n    s = str(np.round(survived[1] * 100\/sum(survived), 2))+\"%\",\n    ha = \"center\",\n    weight = \"bold\"\n)\n\n# 2.3. Creating Bar chart on Survived - 3rd Class\nsurvivedBar.bar(\n    x = \"Survived\",\n    height = survived[2],\n    width = 0.1,\n    bottom = survived[0] + survived[1],\n    label = \"3nd Class\",\n    align = \"center\",\n    edgecolor = \"black\",\n    color = \"#990000\"\n)\nsurvivedBar.text(\n    x = 0,\n    y = survived[0] + survived[1] + survived[2]\/2,\n    s = str(np.round(survived[2] * 100\/sum(survived), 2))+\"%\",\n    ha = \"center\",\n    weight = \"bold\"\n)\n\n# 2.4. Fix the axis of the bars\nsurvivedBar.axis(\n    xmin = -2.5 * 0.1,\n    xmax = 2.5 * 0.1\n)\nsurvivedBar.axis(\"off\")\n\n# 2.5. Customise the legend\nsurvivedBar.legend(\n    labels = (\"1st Class\", \"2nd Class\", \"3rd Class\"),\n    loc = \"upper left\",\n    fontsize = \"large\"\n)\n\n# 3. Line from Pie to Survived Bar\n# Here, ConnectionPatch is used to draw lines between two plots\n\n# 3.1. Get the wedge data\ntheta1 = totalPie.patches[0].theta1\ntheta2 = totalPie.patches[0].theta2\ncenter = totalPie.patches[0].center\nradius = totalPie.patches[0].r\nbar_height = sum(item.get_height() for item in survivedBar.patches)\n\n# 3.2. Top Connecting Line\nx = radius * np.cos(np.pi \/ 180 * theta1) + center[0]\ny = radius * np.sin(np.pi \/ 180 * theta1) + center[1]\ncon = ConnectionPatch(\n            xyA = (0.1\/2, bar_height),\n            coordsA = survivedBar.transData,\n            xyB = (x , y),\n            coordsB = totalPie.transData\n        )\ncon.set_color([0, 0, 0])\nsurvivedBar.add_artist(con)\ncon.set_linewidth(2)\ncon.set_linestyle(\"-.\")\n\n# 3.3. Bottom Connecting Line\nx = radius * np.cos(np.pi \/ 180 * theta2) - center[0]\ny = radius * np.sin(np.pi \/ 180 * theta2) - center[1]\ncon = ConnectionPatch(\n            xyA = (0.1\/2, 0),\n            coordsA = survivedBar.transData,\n            xyB = (x, y),\n            coordsB = totalPie.transData\n        )\ncon.set_color([0, 0, 0])\nsurvivedBar.add_artist(con)\ncon.set_linewidth(2)\ncon.set_linestyle(\"-.\")\n\n\n# 4. Creating Bar chart based on the Died Data\n\n# 4.1. Creating Bar chart on Died - 1st Class\ndiedBar.bar(\n    x = \"Died\",\n    height = died[0],\n    width = 0.1,\n    bottom = 0,\n    label = \"1st Class\",\n    align = \"center\",\n    edgecolor = \"black\",\n    color = \"#FF3399\"\n)\ndiedBar.text(\n    x = 0,\n    y = died[0]\/2,\n    s = str(np.round(died[0] * 100\/sum(died), 2))+\"%\",\n    ha = \"center\",\n    weight = \"bold\"\n)\n\n# 4.2. Creating Bar chart on Died - 2nd Class\ndiedBar.bar(\n    x = \"Died\",\n    height = died[1],\n    width = 0.1,\n    bottom = died[0],\n    label = \"Female\",\n    align = \"center\",\n    edgecolor = \"black\",\n    color = \"#FF66B2\"\n)\ndiedBar.text(\n    x = 0,\n    y = died[0] + died[1]\/2,\n    s = str(np.round(died[1] * 100\/sum(died), 2))+\"%\",\n    ha = \"center\",\n    weight = \"bold\"\n)\n\n# 4.3. Creating Bar chart on Died - 3rd Class\ndiedBar.bar(\n    x = \"Died\",\n    height = died[2],\n    width = 0.1,\n    bottom = died[0] + died[1],\n    label = \"3rd Class\",\n    align = \"center\",\n    edgecolor = \"black\",\n    color = \"#660033\"\n)\ndiedBar.text(\n    x = 0,\n    y = died[0] + died[1] + died[2]\/2,\n    s = str(np.round(died[2] * 100\/sum(died), 2))+\"%\",\n    ha = \"center\",\n    weight = \"bold\"\n)\n\n# 4.4. Fix the axis of the bars\ndiedBar.axis(\n    xmin = -2.5 * 0.1,\n    xmax = 2.5 * 0.1\n)\ndiedBar.axis(\"off\")\n\n# 4.5. Customise the legend\ndiedBar.legend(\n    labels = (\"1st Class\", \"2nd Class\", \"3rd Class\"),\n    loc = \"upper right\",\n    fontsize = \"large\"\n)\n\n# 5. Line from Pie to Died Bar\n# ConnectionPatch is used to draw lines between two plots\n\n# 5.1. Get the wedge data\ntheta1 = totalPie.patches[0].theta1\ntheta2 = totalPie.patches[0].theta2\ncenter = totalPie.patches[0].center\nradius = totalPie.patches[0].r\nbar_height = sum(item.get_height() for item in diedBar.patches)\n\n# 5.2. Top Connecting Line\nx = radius * np.cos(np.pi \/ 180 * theta1) + center[0]\ny = radius * np.sin(np.pi \/ 180 * theta1) + center[1]\ncon = ConnectionPatch(\n            xyA = (-0.1\/2, bar_height),\n            coordsA = diedBar.transData,\n            xyB = (x + 1, y + 0.06),\n            coordsB = totalPie.transData\n        )\ncon.set_color([0, 0, 0])\ndiedBar.add_artist(con)\ncon.set_linewidth(2)\ncon.set_linestyle(\"-.\")\n\n# 5.3. Bottom Connecting Line\nx = radius * np.cos(np.pi \/ 180 * theta2) + center[0]\ny = radius * np.sin(np.pi \/ 180 * theta2) + center[1]\ncon = ConnectionPatch(\n            xyA = (-0.1\/2, 0),\n            coordsA = diedBar.transData,\n            xyB = (x + 1, y - 0.16),\n            coordsB = totalPie.transData\n        )\ncon.set_color([0, 0, 0])\ndiedBar.add_artist(con)\ncon.set_linewidth(2)\ncon.set_linestyle(\"-.\")\n\n# 6. Final Output\nplt.show()","e29b13b1":"# Calculate the number of passengers\ncount_dm1 = df[\"Survived\"][df[\"Survived\"] == \"No\"][df[\"Sex\"] == \"Male\"][df[\"PassengerClass\"] == \"1st\"].count()\ncount_dm2 = df[\"Survived\"][df[\"Survived\"] == \"No\"][df[\"Sex\"] == \"Male\"][df[\"PassengerClass\"] == \"2nd\"].count()\ncount_dm3 = df[\"Survived\"][df[\"Survived\"] == \"No\"][df[\"Sex\"] == \"Male\"][df[\"PassengerClass\"] == \"3rd\"].count()\n\ncount_df1 = df[\"Survived\"][df[\"Survived\"] == \"No\"][df[\"Sex\"] == \"Female\"][df[\"PassengerClass\"] == \"1st\"].count()\ncount_df2 = df[\"Survived\"][df[\"Survived\"] == \"No\"][df[\"Sex\"] == \"Female\"][df[\"PassengerClass\"] == \"2nd\"].count()\ncount_df3 = df[\"Survived\"][df[\"Survived\"] == \"No\"][df[\"Sex\"] == \"Female\"][df[\"PassengerClass\"] == \"3rd\"].count()\n\ncount_sm1 = df[\"Survived\"][df[\"Survived\"] == \"Yes\"][df[\"Sex\"] == \"Male\"][df[\"PassengerClass\"] == \"1st\"].count()\ncount_sm2 = df[\"Survived\"][df[\"Survived\"] == \"Yes\"][df[\"Sex\"] == \"Male\"][df[\"PassengerClass\"] == \"2nd\"].count()\ncount_sm3 = df[\"Survived\"][df[\"Survived\"] == \"Yes\"][df[\"Sex\"] == \"Male\"][df[\"PassengerClass\"] == \"3rd\"].count()\n\ncount_sf1 = df[\"Survived\"][df[\"Survived\"] == \"Yes\"][df[\"Sex\"] == \"Female\"][df[\"PassengerClass\"] == \"1st\"].count()\ncount_sf2 = df[\"Survived\"][df[\"Survived\"] == \"Yes\"][df[\"Sex\"] == \"Female\"][df[\"PassengerClass\"] == \"2nd\"].count()\ncount_sf3 = df[\"Survived\"][df[\"Survived\"] == \"Yes\"][df[\"Sex\"] == \"Female\"][df[\"PassengerClass\"] == \"3rd\"].count()\n\n# Plot the result of the six cases\nlabels = [\"1st\", \"2nd\", \"3rd\"]\nsurvivedMale = [count_sm1, count_sm2, count_sm3]\nsurvivedFemale = [count_sf1, count_sf2, count_sf3]\ndiedMale = [count_dm1, count_dm2, count_dm3]\ndiedFemale = [count_df1, count_df2, count_df3]\n\nx = np.arange(len(labels))\nwidth = 0.4\n\nfig, ax = plt.subplots(figsize = [15, 15])\nplotSurvivedMale = ax.bar(\n                        x - 3*width\/4,\n                        survivedMale,\n                        width\/2,\n                        label = \"Male - Survived\"\n                    )\nplotSurvivedFemale = ax.bar(\n                        x - width\/4,\n                        survivedFemale,\n                        width\/2,\n                        label = \"Female - Survived\"\n                    )\nplotDiedMale = ax.bar(\n                    x + width\/4,\n                    diedMale,\n                    width\/2,\n                    label = \"Male - Died\"\n                )\nplotDiedFemale = ax.bar(\n                    x + 3*width\/4,\n                    diedFemale,\n                    width\/2,\n                    label = \"Female - Died\"\n                )\n\nax.set_title(\n    \"Survived-Sex-Pclass\", \n    size = \"xx-large\")\n\nax.set_ylabel(\n    \"Number of Passengers\", \n    size = \"x-large\"\n)\n\nax.set_xlabel(\n    \"Passenger Class\", \n    size = \"x-large\"\n)\n\nax.set_xticks(x)\n\nax.set_xticklabels(\n    labels, \n    size = \"large\"\n)\n\nax.legend(fontsize = \"medium\")\nfig.tight_layout()\nplt.show()","7a247f9f":"survivedMale.append(sum(survivedMale))\nsurvivedFemale.append(sum(survivedFemale))\nsurvivedTotal = [sum(x) for x in zip(survivedMale, survivedFemale)]\n\ndiedMale.append(sum(diedMale))\ndiedFemale.append(sum(diedFemale))\ndiedTotal = [sum(x) for x in zip(diedMale, diedFemale)]\n\ntotalMale = [sum(x) for x in zip(survivedMale, diedMale)]\ntotalFemale = [sum(x) for x in zip(survivedFemale, diedFemale)]\ntotalGrand = [sum(x) for x in zip(totalMale, totalFemale)]\n\npd.DataFrame(\n    index=[[\"Survived\", \"Survived\", \"Survived\", \n            \"Died\", \"Died\", \"Died\",\n            \"Total\", \"Total\", \"Total\"], \n            [\"Male\", \"Female\", \"Total\", \n             \"Male\", \"Female\", \"Total\",\n             \"Male\", \"Female\", \"Total\",]],\n    columns=[\"1st Class\", \"2nd Class\", \"3rd Class\", \"Total\"],\n    data = [survivedMale, survivedFemale, survivedTotal, \n            diedMale, diedFemale, diedTotal,\n            totalMale, totalFemale, totalGrand]).style.background_gradient(cmap = \"inferno\")","e68e3db4":"plt.figure( figsize = [10, 10] )\nsns.set_theme(style = \"darkgrid\")\nplt.title(\n    \"Embarked\",\n    fontsize = 30\n)\nsns.countplot(\n    \"Embarked\",\n    data = df\n)\nplt.xlabel(\n    \"Ports\",\n    fontsize = 25\n)\nplt.ylabel(\n    \"Number of Passengers\",\n    fontsize = 25\n)","f97ad297":"count_s = 0\ncount_c = 0\ncount_q = 0\n\nfor i in df[\"Embarked\"] :\n    if i == \"Southampton\" :\n        count_s += 1\n    elif i == \"Cherbourg\" :\n        count_c += 1\n    else :\n        count_q += 1\n\nprint(\"Number of passengers from Cherbourg : \", count_c)\nprint(\"Number of passengers from Queenstown : \", count_q)\nprint(\"Number of passengers from Southampton : \", count_s)","05fc6859":"plt.figure( figsize = [8, 8] )\nplt.pie( \n    [count_s, count_c, count_q],\n    explode = [0, 0.1, 0.2],\n    labels = [\"Southampton\\n($p_s$)\", \"Cherbourg\\n($p_c$)\", \"Queenstown\\n($p_q$)\"],\n    colors = [\"blue\", \"green\", \"yellow\"],\n    autopct = '%2.2f%%',\n    shadow = True,\n    startangle = 90,\n    radius = 1.95,\n    wedgeprops = {\"linewidth\" : 8},\n    textprops = {\"fontsize\" : 30,\n                 \"weight\" : \"bold\"}\n)\nplt.show()","669dac50":"count_sc = (df[\"Survived\"][df[\"Survived\"] == \"Yes\"][df[\"Embarked\"] == \"Cherbourg\"].count())\ncount_ss = (df[\"Survived\"][df[\"Survived\"] == \"Yes\"][df[\"Embarked\"] == \"Southampton\"].count())\ncount_sq = (df[\"Survived\"][df[\"Survived\"] == \"Yes\"][df[\"Embarked\"] == \"Queenstown\"].count())\n\ncount_dc = (df[\"Survived\"][df[\"Survived\"] == \"No\"][df[\"Embarked\"] == \"Cherbourg\"].count())\ncount_ds = (df[\"Survived\"][df[\"Survived\"] == \"No\"][df[\"Embarked\"] == \"Southampton\"].count())\ncount_dq = (df[\"Survived\"][df[\"Survived\"] == \"No\"][df[\"Embarked\"] == \"Queenstown\"].count())\n\nsurvived = [count_sc, count_ss, count_sq]\ndied = [count_dc, count_ds, count_dq]\n\npd.DataFrame(\n    index = [\"Cherbourg\", \"Southampton\", \"Queenstown\"],\n    data = {\"Survived\" : survived, \n            \"Died\" : died,\n            \"Survival Ratio\" : [(i\/j) for (i,j) in zip(survived, died)] } \n).style.background_gradient(cmap = \"inferno\") ","37b53420":"sns.set_context(\"poster\",\n                font_scale = 2)\nsns.catplot(\n    x = \"Embarked\",\n    hue = \"Survived\",\n    data = df,\n    kind = \"count\",\n    height = 15,\n    aspect = 8\/5\n)\nplt.xlabel(\n    \"Embarked\", \n    fontsize = \"x-large\"\n)\nplt.ylabel(\n    \"Number of Passengers\", \n    fontsize = \"x-large\"\n)\nplt.title(\n    \"Embarked - Survived\", \n    fontsize = \"xx-large\"\n)\nplt.show()","fb12a5de":"count_mc = (df[\"Sex\"][df[\"Sex\"] == \"Male\"][df[\"Embarked\"] == \"Cherbourg\"].count())\ncount_ms = (df[\"Sex\"][df[\"Sex\"] == \"Male\"][df[\"Embarked\"] == \"Southampton\"].count())\ncount_mq = (df[\"Sex\"][df[\"Sex\"] == \"Male\"][df[\"Embarked\"] == \"Queenstown\"].count())\n\ncount_fc = (df[\"Sex\"][df[\"Sex\"] == \"Female\"][df[\"Embarked\"] == \"Cherbourg\"].count())\ncount_fs = (df[\"Sex\"][df[\"Sex\"] == \"Female\"][df[\"Embarked\"] == \"Southampton\"].count())\ncount_fq = (df[\"Sex\"][df[\"Sex\"] == \"Female\"][df[\"Embarked\"] == \"Queenstown\"].count())\n\nmale = [count_mc, count_ms, count_mq]\nfemale = [count_fc, count_fs, count_fq]\n\npd.DataFrame(\n    index = [\"Cherbourg\", \"Southampton\", \"Queenstown\"],\n    data = {\"Male\" : male, \n            \"Female\" : female,\n            \"Sex Ratio\" : [(i\/j) for (i,j) in zip(male, female)] } \n).style.background_gradient(cmap = \"viridis\") ","85c66923":"labels = [\"Cherbourg\", \"Southampton\", \"Queenstown\"]\nmale = [count_mc, count_ms, count_mq]\nfemale = [count_fc, count_fs, count_fq]\n\nx = np.arange(len(labels))\nwidth = 0.35\n\nfig, ax = plt.subplots(figsize = [20, 20])\nplot1 = ax.bar(x - width\/2,\n               male,\n               width,\n               label = \"Male\")\nplot2 = ax.bar(x + width\/2,\n               female,\n               width,\n               label = \"Female\")\n\nax.set_title(\"Embarked-Sex\", \n             size = \"xx-large\")\n\nax.set_ylabel(\"Number of Passengers\", \n              size = \"x-large\")\n\nax.set_xlabel(\"Embarked\", \n              size = \"x-large\")\n\nax.set_xticks(x)\n\nax.set_xticklabels(labels, \n                   size = \"medium\")\n\nax.legend(fontsize = \"medium\")\nfig.tight_layout()\nplt.show()","9a1910b7":"pd.crosstab(\n    [df[\"Survived\"]],\n    [df[\"Embarked\"], df[\"Sex\"]]\n).style.background_gradient(cmap = \"brg\")","2ac58c90":"pd.crosstab(\n    [df[\"Survived\"], df[\"Sex\"]],\n    [df[\"PassengerClass\"], df[\"Embarked\"]]\n).style.background_gradient(cmap = \"gist_heat\")","ac3d3541":"plt.figure( figsize = [10, 10] )\nsns.set_context(\"talk\")\nsns.set(font_scale = 2)\nsns.countplot(\n    y = \"Age Group\",\n    data = df\n).set(\n    xlabel = \"Number of Passengers\",\n    title = \"Age Group\"\n)\nplt.show()","80c00186":"age_surv = pd.crosstab(\n                [df[\"Age Group\"]],\n                [df[\"Survived\"]]\n            )\nchi2, p, dof, ex = stats.chi2_contingency(age_surv)\npd.DataFrame(\n    data = [chi2, p],\n    columns = [\"Value\"],\n    index = [\"Chi Square\", \"p\"]\n)","4e6fc3b1":"survived = list()\ndied = list()\nfor group in df[\"Age Group\"].unique() :\n    survived.append(df[\"Age Group\"][df[\"Age Group\"] == group][df[\"Survived\"] == \"Yes\"].count())\n    died.append(df[\"Age Group\"][df[\"Age Group\"] == group][df[\"Survived\"] == \"No\"].count())\n\npd.DataFrame(\n    data = {\"Survived\" : survived,\n            \"Died\" : died,\n            \"Survival Ratio\" : [(i\/j) for (i,j) in zip(survived, died)]},\n    index = [i for i in df[\"Age Group\"].unique()]\n).sort_values(\n    \"Survival Ratio\", \n    ascending = False\n).style.background_gradient(\n    cmap = \"flag\",\n    axis = 0\n)","5684d3c6":"plt.figure(figsize = [10,10])\nsns.set_context(\"poster\")\nsns.distplot(\n    a = df[\"Age\"][df[\"Survived\"] == \"Yes\"],\n    hist = False,\n    kde = True\n)\nsns.distplot(\n    a = df[\"Age\"][df[\"Survived\"] == \"No\"],\n    hist = False,\n    kde = True\n)\nplt.legend(\n    title = \"Survived\",\n    labels = [\"Yes\", \"No\"]\n)","d5d0362d":"plt.figure( figsize = [10, 10] )\nsns.set_theme(style = \"darkgrid\")\nsns.set(font_scale = 2)\nsns.countplot(\n    y = \"Age Group\",\n    hue = \"Survived\",\n    data = df\n).set(\n    xlabel = \"Number of Passengers\",\n    title = \"Age Group\"\n)\nsns.set_context(\"talk\")\nplt.legend(labels = [\"Died\", \"Survived\"])\nplt.show()","790e5a82":"sns.set_context(\"poster\")\nsns.catplot(\n    x = \"Survived\", \n    y = \"Age\",\n    hue = \"Sex\",\n    data = df, \n    kind = \"swarm\",\n    height = 10, \n    aspect = 8\/7\n)\nplt.title(\n    \"Survived - Sex - Age\",\n    fontsize = \"x-large\"\n)\nplt.xlabel(\n    \"Survival Status\",\n    fontsize = \"large\"\n)\nplt.ylabel(\n    \"Age\",\n    fontsize = \"large\"\n)","066132c5":"df[df[\"Age\"] == max(df[\"Age\"])]","14cbf11d":"alone = df[\"PassengerId\"][df[\"SiblingSpouse\"] == 0][df[\"ParentChild\"] == 0].count()\nnot_alone = df[\"PassengerId\"][df[\"SiblingSpouse\"] != 0][df[\"ParentChild\"] != 0].count()\n\nplt.figure(figsize = [10,10])\nplt.bar(\n    x = [\"Alone\", \"Not Alone\"], \n    height = [alone, not_alone],\n    width = [0.5, 0.5],\n    color = [\"orange\", \"purple\"],\n    edgecolor = \"red\",\n    linewidth = 2\n)\nplt.title(\n    \"Passengers travelling Alone\",\n    fontsize = \"xx-large\"\n)\nplt.ylabel(\n    \"Number of Passengers\",\n    fontsize = \"x-large\"\n)","dc70991d":"pd.DataFrame(\n    data = {\"Number of Passengers\" : [alone, not_alone],\n             \"Proportion\" : [(alone\/(alone+not_alone)) , (not_alone\/(alone+not_alone))] },\n    index = [\"Alone\", \"With Family\"]\n).style.background_gradient(cmap = \"gist_yarg\")","fb1b3906":"alone_surv = df[\"Ticket\"][df[\"Survived\"] == \"Yes\"][df[\"SiblingSpouse\"] == 0][df[\"ParentChild\"] == 0].count()\nalone_died = df[\"Ticket\"][df[\"Survived\"] == \"No\"][df[\"SiblingSpouse\"] == 0][df[\"ParentChild\"] == 0].count()\nnot_alone_surv = df[\"Ticket\"][df[\"Survived\"] == \"Yes\"][df[\"SiblingSpouse\"] != 0][df[\"ParentChild\"] != 0].count()\nnot_alone_died = df[\"Ticket\"][df[\"Survived\"] == \"No\"][df[\"SiblingSpouse\"] != 0][df[\"ParentChild\"] != 0].count()\n\nplt.figure(figsize = [34,21])\nalone_fam = pd.DataFrame(\n                data = {\n                    \"Condition\" : [\"Alone\", \"With Family\"],\n                    \"Survived\" : [alone_surv, not_alone_surv],\n                    \"Died\" : [alone_died, not_alone_died]\n                }\n            )\nalone_fam.plot(\n    x = \"Condition\",\n    kind = 'barh',\n    stacked = True,\n    mark_right = True\n)\nplt.title(\n    \"Stacked Bar Graph\",\n    fontsize = \"x-large\"\n)\nplt.xlabel(\n    \"Number of Passengers\",\n    fontsize = \"large\"\n)\nplt.legend(\n    fontsize = \"medium\"\n)","2eb14773":"pd.DataFrame(\n    data = {\n        \"Survived\" : [alone_surv, not_alone_surv],\n        \"Died\" : [alone_died, not_alone_died],\n        \"Survial Ratio\" : [alone_surv\/alone_died, not_alone_surv\/not_alone_died]\n    },\n    index = [\"Alone\", \"With Family\"]\n).style.background_gradient(cmap = \"gist_yarg\",axis = 1)","32b68410":"family = pd.DataFrame(\n    columns = df2.columns\n)\nfor last in df[\"LastName\"][df[\"SiblingSpouse\"] != 0][df[\"ParentChild\"] != 0].unique() :\n    dfFam = df[df[\"LastName\"] == last]\n    df2Fam = df2[df2[\"LastName\"] == last]    \n    family = pd.concat([family, dfFam, df2Fam])","62faabdb":"pd.set_option(\"display.max_rows\", family.shape[0])\nfamily.reset_index(inplace=True)\nfamily = family[-((family[\"ParentChild\"] == 0) & (family[\"SiblingSpouse\"] == 0))]\nfamily.drop(columns = [\"index\"])","1bddc5c2":"print(\"Number of families obtained : \", family[\"LastName\"].nunique())","4d7c40c3":"plt.figure(figsize = [10,10])\nsns.kdeplot(\n    y = \"Pclass\",\n    x = \"Fare\",\n    data = df_train,\n    alpha = 0.6,\n    linewidth = 1,\n    levels = 20,\n    cmap = \"gnuplot\"\n)","7a1612b0":"plt.figure(figsize = [10,10])\nsns.kdeplot(\n    x = \"Pclass\",\n    y = \"Fare\",\n    data = df_test,\n    alpha = 0.6,\n    linewidth = 1,\n    levels = 20,\n    cmap = \"gnuplot\"\n)","8e88a08b":"#### Passenger Class","faf0829b":"Sample of 10 rows are checked, if the columns \"Title\", \"FirstName\" and \"LastName\" are added or not.","2def9f98":"The names here are joined together in the format :\n\n[Last Name], [Title][First Name]\n\nSo, here we will split the Name column in three seperate columns which will be :\n1. Title\n2. First Name\n3. Last Name\n\nThe columns will be in order as written above.","59f0e130":"## Statistical Test","91de54e0":"Now, the \"Title_First\" and \"Name\" columns can be removed.","e3126f9c":"Here also, we will impute the missing values with the same process done in the training set.","900a82a5":"## Age Group\n\n<u>Question<\/u> : \n1. Which age group had the maximum population?\n2. Which age group had the minimum population?","44271652":"The members of a family will have the same Last Name. So, here the families with the same last names will be searched from both the datasets and will be combined together in a new dataframe.","cc6fe775":"## Change name of the datasets","5e891659":"**Most Passengers were travelling alone**.","12f8acfe":"## Data Type of Columns","5917eca7":"Mr. Thomas Storey (Passenger ID : 1044) was trevelling alone in the 3rd Class, who boarded the Titanic from Southampton. He was 60.5 years old.\n\nNow, let us find out if there are other passengers in the testing set with Title \"Mr\", travelled in 3rd Class, boarded the Titanic from Southampton and whose age is within 55 to 65 years.","d76e653f":"## Introduction","b075e055":"## Embarked - Sex\n\n<u>Question<\/u> : What were the sex ratio of the passenger population of each port?","96e6f97d":"We have seen earlier that, the Fare column of the testing set has only one missing value. \n\nLet us first find the details of the passenger with the missing value in the Fare column.","2b79afef":"#### Testing Set","dda1e76c":"As p-value < 0.05, so we can reject $H_0$.\n\nHowever for the Survival ratio, the number of passengers from each age group, who survived and died are calculated first. Then the survival ratios for each age groups are calculated and shown in the following output.","61a2407a":"Here, the number of passengers who survived and died for each of the three Passenger classes will be calculated. Clearly, we will have to calculate the number of Passesngers for the following six cases :\n\nCase | Survival Status | Class\n---- | --------------- | ---------\n1    | Survived        | 1st Class\n2    | Died            | 1st Class\n3    | Survived        | 2nd Class\n4    | Died            | 2nd Class\n5    | Survived        | 3rd Class\n6    | Died            | 3rd Class\n\n\n\nThe calculated values will then be shown with a graph.","1129ebfa":"## SiblingSpouse - PassengerClass\n\n<u>Question<\/u> : Were most of passenger travelling alone?","68edc621":"From the above plot it can be said that :\n\n<center>\n$n_d$ $\\approx$ 550\n<center>\n$n_s$ $\\approx$ 350\n<\/center>\n\nThat is $n_d$ > $n_s$.\n\nSo, $H_0$ cannot be accepted.\n\nTo be more precise,the values of $n_d$ and $n_s$ are calculated in the following output.","322d0d53":"The number of missing values present in the columns of the testing set are shown below.","dda16fbf":"According to the age of the passengers obtained in the above output, the age of Mr. Thomas Storey will lie within the ages of Mr Daniel Coxon and Mr Johan Hansen Nysveen.\n\nSo, we will impute the Fare of Mr. Thomas Storey with the average of the fares of Mr Daniel Coxon and Mr Johan Hansen Nysveen.","ca3c4a48":"Based on the above plot, it can be said that :\n<center>\n$p_s$ $\\approx$ 640\n<center>\n$p_c$ $\\approx$ 170\n<center>\n$p_q$ $\\approx$ 80\n<\/center>\n\nNow we will obtain the exact values of $p_c$, $p_q$ and $p_s$.","99a2e049":"## Passenger Class - Sex\n\n<u>Questions<\/u> : \n1. What are the sex ratios of each Passenger Class?\n2. What percentages of each Passenger Class is present in each of the Male ppopulation and Female population?","0b8fd479":"### Categorizing Age Column","c925c8c2":"#### Survived ","95b560d7":"## Survived - Sex - Passenger Class","7fbb3baf":"## Testing Set","5e160b34":"It will be neccessary to change some informations in the daatset. But, no one will want to let it affect the preprocessed data. So, here we will change the names of the training and testing sets, to keep the pre-processed data unaffected.","b9867055":"The number of missing values present in the columns of the training set are shown below.","e582ad7b":"## Sex\n\n<u>Questions<\/u> :\n1. What was number of Male passengers on board?\n2. What was number of Female passengers on board?\n3. What was the percentage of Male passengers?\n4. What was the percentage of Female passengers?","0d26dab9":"# Idea of Progress\n\nThe RMS Titanic started the transatlantic journey from Southampton, UK to New York, USA on 10th April 1992. But on the night of 14 April 1992 the ship hit an iceberg and finally at 2:20 AM, 15 April 1912, the ship foundered with well over one thousand people still aboard. This dataset contains the details of the passengers who boarded Titanic. This work mainly aims on Exploratory Data Analysis along with Feature Engineering and Data Cleaning. With Feature Engineering the names of the passengers are divided into Title, First Name and Last Name. The Ages of the passengers are also grouped using bins. The Fares of each person has also been calculated. In Data Cleaning part, Title and Last Name of the passengers have been used for Missing value treatment on Age, Embarked and Fare columns. Now, Exploratory Data Analysis (EDA) refers to the step-by-step process of constantly investigating the data on some assumptions by the help of graphical representations, tabular representations and statistical hypothesis testing to uncover anomaly and discover patterns and trends. Here, EDA has been performed to find the conditions on which the passengers survived. Four conditions were seen to affect the survival of a passenger \u2013 Sex, Age, Social Status and Family. Along with these, 63 families were also found to board the Titanic.","3a984244":"Values are changed according to their keys as described in the section Data Dictionary.","c84cfc7c":"### Missing Value Treatment on **Embarked** in Training Set","794e95a0":"<a name=\"sources\"><\/a>\n# Resources\n\n1. http:\/\/ghunt03.github.io\/DAProjects\/DAP02\/TitanicDatasetInvestigation.html\n2. https:\/\/www.kaggle.com\/abhisheksisodiya\/titanic-eda-prediction-using-knn#Feature-Engineering\n3. https:\/\/www.kaggle.com\/dejavu23\/titanic-eda-to-ml-beginner#Part-1:-Exploratory-Data-Analysis\n4. https:\/\/jkarakas.github.io\/Exploratory-Analysis-of-the-Titanic-Dataset\/Titanic_Dataset_Exploratory_Analysis_No_Code.html\n5. https:\/\/www.kaggle.com\/masumrumi\/a-statistical-analysis-ml-workflow-of-titanic","2016481f":"Based on the above outcomes, the following can be said :\n- Arranging in an non-increasing order we get, $c_3$, $c_1$, $c_2$.\n- Maximum number of Passengers were travelling with a 3rd class ticket, i.e, 55.11%.\n- Minimum number of Passengers were travelling with a 2nd class ticket, i.e, 20.65%.","f3eb78f4":"<a name=\"limit\"><\/a>\n## Limitations of the dataset","a397fce1":"<a name=\"eda\"><\/a>\n# EDA","3db8afa9":"The output in the previous section showed that, there are **12 columns in training set** and **11 columns in testing set**.","e61046a9":"Testing Set has Mr. Thomas Storey only.\n\nLet us search in Training set for passengers with similar conditions mentioned before.","e21199fb":"Sex Ratio is the ratio of males to females in a population. \n\nFirst, the number of male passengers and female passengers in each of the three Passenger classes will be calculated. \nClearly we will have to calculate the number of passesngers for the following six cases :\n\nCase  |   Sex  | Class\n:----:|:------:|:---------:\n1     | Male   | 1st Class\n2     | Female | 1st Class\n3     | Male   | 2nd Class\n4     | Female | 2nd Class\n5     | Male   | 3rd Class\n6     | Female | 3rd Class\n\nThen the sex ratio for each of the Passenger Class will be calculated and shown in the following output.","f1cfc434":"As p-value < 0.05, so the probability that sex played role in survival is high.\nThus, we can reject the null hypothesis.\n\nThe exact values of each of the four cases considered are shown in the following output.","775b9c7b":"Some modifications are done in the dataset for this section.","17f5e46b":"We can also visualize the same with the plot below.","d0185b78":"So, training set also has only one passenger with the title Ms.\n\nLet us now find out her form the training set.","7064d1e1":"#### Testing Set","d1b50c7c":"# Columns","18253b44":"For the above question, the number of passengers who were travelling with no Sibling\/Spouse and no Parent\/Child can be visualized with a graph.","37fc6b0e":"To answer the questions, we can just visualize the number of passengers in each group with the following plot.","18132c8c":"Survival Ratio can be defined as the ratio of the size of the survived population to the died population.\n\nHere, the number of passengers, who survived or died, boarding from each of the three Embarked ports, will be calculated. \n\nSo here, we will have to consider six cases.\n\nCase |  Survival Status  | Embarked\n---- | ----------------- | ---------\n1    |      Survived     | Cherbourg\n2    |        Died       | Cherbourg\n3    |      Survived     | Southampton\n4    |        Died       | Southampton\n5    |      Survived     | Queenstown\n6    |        Died       | Queenstown\n\nThe Survival Ratio of each port is shown in the following table","dd3c3197":"Clearly, the maximum number of points might be somewhere near 19, as the 1st quantile is approximately 20. \n\nNow, let us plot the curves seperately for male and female.","fc6428d8":"There are 3 unique values in the \"Passenger Class\" column.\n\nLet,\n- $c_1$ : Number of passengers with 1st Class ticket\n- $c_2$ : Number of passengers with 2nd Class ticket\n- $c_3$ : Number of passengers with 3rd Class ticket\n\n$c_1$, $c_2$ and $c_3$ can be visualized with the following plot.","59f19bad":"So, the missing value in the Fare column of the Testing set has been imputed successfully.","cbbf6cf5":"For missing value imputation in this column, let us first plot the values of this column and try to find a suitable value for missing value imputation.","3f912224":"Hence, the number of passengers in each passenger classes obtained are shown below :\n\nPassenger Class | Number of Passengers\n:--------------:|:--------------------:\n1st Class       | 216\n2nd Class       | 184\n3rd Class       | 491\n\nThe percentage of passengers in each passenger class is shown in the following plot.","b24a674e":"Though the Survival Ratio is not decreasing monotonically with the Age Groups, but \n- Infant had highest Survival Ratio\n- Senior had lowest Survival Ratio\n\nWe  might also get the same idea from the following plots.","e7aeda14":"Here, the number of Passengers who boarded from each port, wll be calculated.\n\nSuppose,\n- $p_c$ **denotes** the number of passengers from Cherbourg\n- $p_q$ **denotes** the number of passengers from Queenstown\n- $p_s$ **denotes** the number of passengers from Southampton\n\nThe values will then be shown in a plot.","5d1957b9":"All over sex ratio was 1.837580.\n\nThe above insight can also be gained from the following plot.","94e23b4c":"Hence, all the missing values of the age column in the testing set have been imputed.","88a8b114":"Finally,\n\n<center>\n<mark>$n_m$ = 577\n<center>\n<mark>$n_f$ = 314\n<\/center>\n\nHence, $H_0$ failed to be accepted, that is, there were more \"male\" passengers than \"female\" passengers.","7d3d3339":"From the above plot, it can be seen that the senior-most passenger, who was a male, survived. The details of that passenger is shown in the following output.","2dc1c198":"Old | New\n----|-----\nS   | Southampton\nC   | Cherbourg\nQ   | Queenston","565643f1":"### Testing Set","6a208b26":"The above output shows that there are 17 unique titles present in the training data set.\n\nWe can now print the statistical summary of ages for different titles, excluding the missing values.","e8e080c0":"So, from the Survived column we can summarise the following table -\n\nSurvival Status   | Actual Number   | Percentage\n:----------------:|:---------------:|:------------:\nSurvived          |342              |38.38%\nDied              |549              |61.62%","b8eb70df":"Clearly, **3rd Clss has the maximum Sex Ratio**.\nSo it can be said that, *maximum of the male passengers travelling in 3rd class, were alone*.\n\nNow, the percentages of each Passenger Class in each of the Male ppopulation and Female population, are shown in the following output.","3af23767":"So, **Money and Social Status saved many lives that day**.\n\nThe combination of percentage of population of each Passenger Class in each of the Survived population and the Died population is shown in the following output.","78340162":"It is not easy to determine the perfect value to impute in the missing places in the \"Age\" column. \n\nBut in case of \"male\" passengers, most of them are around 28.25 years and in case of \"female\" passengers, most of them are around 17.5 years.\n\nBut, if age is imputed with 28.25 in case of male passengers and with 17.5 in case of the female passengers, then a problem may occur. \n\nIt might happen that, a male with title Master, who might be a teenager, will get have age of 28.25 years, which is not acceptable at all.\n\nSo, we will find the mean age and median age of the passengers with different titles and then we will impute the mean of the these calculated values to the persons with the respective titles.","b03b4c91":"So, **Survival ratio is greater in case of the group of the passengers who were travelling with family**.","a29a4161":"## Training Set","1a0286a2":"So most of the children(combining the age groups - Infant and Child) were saved. **Age did play an important role in survival of a person**.","113c3fd8":"## Passenger Class - Survived\n\nThe Class in which a passenger was travelling can also be viwed as the Social Status of that passenger.\n\n<u>Questions<\/u> : \n1. Did Social Status played any role in survival of the passengers?\n2. What is the percentage of combination of each Passenger Class in each of the Survived population and the Died population?","30f1dd17":"Let us apply Chi-Square test on :\n\n<center>\n$H_0$ : Age had no role in survival of a passenger\n<center>\nvs\n<center>\n$H_1$ : Age had a significant role in survival of a passenger\n<\/center>","a81dba24":"# Import of required modules and libraries","1856ff6e":"On the basis of the \"Survived\" column let us define the following -\n\n$n_d$ = Number of Passengers who died\n\n$n_s$ = Number of Passengers who survived\n\nBased on $n_d$ and $n_s$, we can test\n\n<center>\n$H_0$ : $n_d$ < $n_s$\n<center>\nagainst\n<center>               \n$H_1$ : $n_d$ > $n_s$\n<\/center>\n\nThe above test can be proceeded with a basic with the help of a simple bar plot.","d43020ab":"So, from the Sex column we can summarise the following table -\n\nSex           | Actual Number   | Percentage\n:------------:|:---------------:|:------------:\nMale          |577              |64.76%\nFemale        |314              |35.24%","5541f230":"# Dimension","a318b5bd":"As most of the anlysis will be done on the columns with categorical type of data, so Chi Square Test of Independence will be used.\n\n#### <u>Chi Square Test of Independence<\/u>\nThe Chi-square test of independence is a statistical hypothesis test used to determine whether two categorical variables are liiely to be related or not. In a more general sense, it tests to see whether distributions of categorical variables differ from each another.\n\nThe formula for the chi-square statistic used in the chi square test is:\n\n$$\\LARGE \\color{blue}  {\\chi^{2}_d = \\sum_{i=1}^{n} \\frac{(O_i - E_i)^2}{E_i}}$$\n\nwhere -\n\n- d - degrees of freedom\n- $O_i$ - Observed Values\n- $E_i$ - Expected Values","49f64df4":"## Missing Value","b2cb61da":"Now, we will impute the missing values in the Age column as planned above.","53a86c61":"The Age is a continuous type of data. So we will categorize the column.\n\nBut before that, we need to look at the minimum and maximum values attained in the Age column.","4d2b1a43":"# Read Dataset","029377c3":"Clearly, **Age**, **Cabin** and **Embarked** are the columns with missing values.\n\nThe percentage of missing values present in **Age**, **Cabin** and **Embarked**, is shown in the following output.","ec6e114a":"Let us now add mean and the quantiles of the values present in the above plot.","bb93d13d":"## Embarked\n\n<u>Questions<\/u> :\n1. From which port did maximum number of passengers boarded?\n2. What are the percentages of populations that boarded from various ports?","90e055a4":"## Survived - Embarked\n\n<u>Question<\/u> : What are the survival ratio of each port?","95d5a697":"## SiblingSpouse - ParentChild - Ticket - Survived\n\n<u>Question<\/u> : Did travelling alone affect the survival of a person?","a4aa3ece":"Here, the number of male passengers and female passengers who boarded from each of the three ports, will be calculated. \n\nSo here, we will have to consider six cases.\n\nCase |  Sex     | Embarked\n:---:|:--------:| :---------:\n1    |  Male    | Cherbourg\n2    |  Female  | Cherbourg\n3    |  Male    | Southampton\n4    |  Female  | Southampton\n5    |  Male    | Queenstown\n6    |  Female  | Queenstown\n\nThe Sex Ratio of each port is shown in the following table","efa990ab":"So, most of the passengers who died were from 3rd Class.\n\nTo be more confident on the our inference, Chi-Square Test will be used on the following hypothese.\n\n<center>\n$H_0$ : Social Status had no role in Survival of a passenger.\n<center>\nagainst\n<center>\n$H_1$ : Social Status had a significant role in Survival of a passenger.\n<\/center>","a344e33e":"The above output shows that, the first column contains the last names, while the second column contains the first name along the titles.\n\nSo, we will insert the second column after \"PassengerId\", i.e, at index 1 and then the last names will be inserted.","4166045f":"We will now remove \".\" at end of each Title.","fc959781":"## Survived - Sex - Embarked","77edbebb":"The above output shows that, the first column contains the titles, while the second column contains the first names.\n\nSo, we will insert the first column after \"PassengerId\", i.e, at index 1 and then the first names will be inserted.","6e7106f7":"Old | New\n----|-----\n0   | No\n1   | Yes","fc87dc2f":"## Feature Engineering on **Name**","924dcd57":"From the above plot and table, we can say that :\n\n- Number of female passengers of first class, who survived is equal to the number of male passengers travelling in the second class, who did not survive.\n\n- The survival ratio is equal in case of the female passengers who travelled in third class.\n\n- The number of male passengers from the third class, who did not survive, is maximum among the \"Dead\" cases.\n\n- The number of female passengers from the first class, who survived, is maximum among the \"Survived\" cases.\n\n- The number of female passengers of the first class, who did not survive, is minimum among the \"Died\" cases.\n\n- The number of male passengers from the second class, who survived, is minimum among the \"Survived\" cases.\n","20459d6d":"On the basis of the \"Sex\" column let,\n\n$n_m$ = Number of \"male\" passengers\n\n$n_f$ = Number of \"female\" passengers\n\nBased on $n_m$ and $n_f$ it can be tested that,\n\n<center>\n$H_0$ : $n_m$ < $n_f$\n<center>\nagainst\n<center>\n$H_1$ : $n_m$ > $n_f$\n<\/center>\n\nThis test can be proceeded by viusalizing with a simple bar plot and hence it can be determined whether $H_0$ can be accepted or not.","0129ffb4":"### Rename categories in Categorical Attributes","71b66441":"So, most of the passengers were travelling alone.\n\nNumber of passengers and the proportions for each of the two cases are shown in the following table.","c6a7fe77":"Clearly, the missing value places of the Embarked column will be filled with \"S\", at row indices 61 and 829.","7201dcb4":"# Contents\n1. [Data Cleaning and Feature Engineering](#pre)\n2. [EDA](#eda)\n3. [Limitation](#limit)\n4. [Conclusion](#conclusion)\n5. [Sources](#sources)","73c02cff":"#### Embarked","c1ed7e92":"Number of values present in \n- Age : 714\n- Cabin : 204\n- Embarked : 889\n- Others : 891","6fa82486":"As maximum of the values of the column **Cabin** are missing, so it will be better to drop that column.","a92b0290":"Old | New\n----|-----\n1   | 1st\n2   | 2nd\n3   | 3rd","6e33fcc8":"Here, we will find out the details of the two passengers for whom the value of the Embarked are missing. If they have other family member(s) aboard, then we can assume that they boarded the Titanic from the same port with their family member(s). Then the port of the family member(s) can be imputed in case of the two passengers with the missing \"Embarked\".","1f619222":"But, the above output shows that, Missing Value(s) is\/are still present in the Age column of the training set.\n\nNow, we will find out the passengers whose missing ages were not imputed.","43e957c8":"#### Training Set","adba5726":"## Passenger Class\n\n<u>Question<\/u> : Which passeger class had maximum number of passengers?","c8e922ac":"#### Testing Set","c1e7b139":"So, the missing values have been imputed and also the mean and median of the ages with respect to different titles with more than 10 passengers, have become almost equal.","c25a7893":"Observing both the datasets, we can categorize the age column as follows :\n\nRange of Age | Categories\n-------------|------------\n0 - 5        | Infant\n5 - 12       | Child\n12 - 19      | Teenager\n19 - 35      | Young Adult\n35 - 55      | Middle Aged\n55 - 65      | Adult\n65         | Senior\n","bd7ba0ab":"<a name=\"pre\"><\/a>\n# Data Cleaning and Feature Engineering","a4a4abbe":"### Training Set","6ec3c3d3":"#### Training Set","5bf55547":"So, the two passengers, whose Embarked value is missingare :\n1. Miss. Amelie Icard (PassengerId : 62)\n2. Mrs. George Nelson (Martha Evelyn) Stone (PassengerId : 829)\n\nBut as both of the passengers were travelling alone, the Embarked values cannot be guessed as planned above.\n\nSo, the missing values will be imputed with that port, which has the hightest frequency in the Embarked column of the training set.","ce6ae186":"### Missing Value Identification","26e8e14e":"Now, let us plot the ages with respect to the titles with more than 10 passengers.","d5627cf5":"**Maximum number of passengers were in the age group Young Adult**.\n\n**Minimum number of passengers were in the age group Senior**.","628ea56e":"Old    | New\n-------|-----\nmale   | Male\nfemale | Female","1efa4af5":"**Most of the passengers, who died, boarded from Southampton**.","4cf92ddb":"### Training Set","9cfa573a":"## Age - Survived\n\n<u>Questions<\/u> : Did age play any role in survival of a passenger?","175e119e":"So, the \"result\" dataframe contains the families with their members. But, it might happen that, a passenger, who is not a part of a family, might have the same Last Name. So again, those passengers with no Sibling\/Spouse and no Parent\/Child have to be removed.\n\nThe following output will show the families with the members, whose records are present in the dataset.","5057fc5e":"As the p-value is less than 0.05, the probability of Social Status having a role in Survival of a passenger will be high.\nHence, we can reject the null hypothesis.\n\nThe actual numbers in the considered 6 cases are shown in the following table.","3f3b413f":"## Age - Survived - Sex","2771f5c3":"Here, the number and percentages of the passengers who Survived and Died for each of the two categories of Sex will be calculated. \n\nClearly the number of Passesngers for the following four cases will have to be calculated :\n\nCase  | Survival Status | Sex\n:----:|:---------------:|:---------:\n1     | Survived        | Male\n2     | Died            | Male\n3     | Survived        | Female\n4     | Died            | Female\n\nThen the values obtained in each of the above four cases wll be plotted.","c8bc310a":"### Missing Value Treatment on **Fare** in Testing Set","94955f9f":"We can get a visual idea of the distribution of the fares among the three classes from the following plots.","1a0d02fc":"## Survived\n\n<u>Questions<\/u> :\n1. How many passengers survived?\n2. What percentage of the passengers survived?\n\n","9c27b34a":"Finally, we get \n\n<center>\n<mark>$n_d$ = 549\n<center>\n<mark>$n_s$ = 342\n<\/center>\n\nSo, $H_1$ is true. That is, most of the passengers did not survive.","3fb7ecea":"From the above plot, it can be said that :\n- $c_1$ $\\approx$ 210\n- $c_2$ $\\approx$ 190\n- $c_3$ $\\approx$ 490\n\nNow, we will obtain the exact values of $c_1$, $c_2$ and $c_3$.","aa94c777":"The above two plots show that, most of the female passengers survived, or in the other words, most of the male passengers died.\n\nBut, to answer the question statistically, let us consider the following hypothese :\n\n<center>\n$H_0$ : Sex played no roll in Survival of the passengers\n<center>\nvs\n<center>\n$H_1$ : Sex played a significant roll in Survival of the passengers\n<\/center>\n\nFor this, we will use the Chi Square Test.","991b241a":"### Rename Columns","91d209ee":"After the EDA and the visualizations, we can conclude the following (considering the training set mainly) :\n1. If we consider both the training set and testing set provided by Kaggle, then it can be seen that there were **63 families aboard** and considering the members of the families, *236 passengers were travelling with families*. But, if we consider the training set only, **142 passengers (approximately 21%) were found to travel with their families**, out of which *80 passengers survived (77.5%)* and **537 passengers (approximately 79%) were travelling alone** out of which, *163 passengers survived (approximately, 43.58%)*. So, **Survival Ratio is greater for the passenger population who were travelling with family**. In other words, most of the passengers, who were travelling alone, did not survive that night.\n2. Out of the total passenger population, **577 (64.76%) were male passengers** and **314 (35.24%) were female passegers**.\n3. **342 (only 38.38%) passengers survived**. In other words, **549 (61.62%) passengers did'nt survive that night**.\n4. Among the survived population 68.13% were female passengers. So, **Sex played a vital role in the survival of a passenger**.\n5. Maximum number of passengers were in the age group of 19-35 years.\n6. Most of the children survived and also, the eldest person, Mr. Algernon Henry Wilson Barkworth (Passenger ID : 631), 80 years old, who boarded from Southampton, also survived. So, **Age played a vital role in survival of a passenger**.\n7. **419 (55.11%) passengers** were travelling in **3rd Class**, which is maximum. **184 (20.65%) passengers** were travelling in **2nd Class**, which is minimum.\n8. **Sex Ratio was maximum in 3rd Class**. In other words, *maximum male passengers in 3rd Class were travelling alone*.\n9. Out of 38.38% survived population, *39.77% passengers were from 1st Class, which is maximum*. So, **many passengers got their life back for their money and social status**.\n10. Among the **233 survived-female passengers**, *91 passengers* were from 1st Class, which is maximum.\n11. Among the **468 died-male passengers**, *300* were from 3rd Class, which is maximum.\n12. The survival ratio is 1 in case of the female passengers of 3rd Class.\n13. **72.50% of the passenger population (646 passengers)** boarded Titanic from Southampton, which is highest among the ports.\n14. Sex ratio is also highest among the passegers, who boarded from Southampton.","2a9dffbb":"Clearly, **Age**, **Cabin** and **Fare** are the columns with missing values.\n\nThe percentage of missing values present in **Age**, **Cabin** and **Fare**, is shown in the following output.","2b23f9f8":"## Last Name\n\n<u>Question<\/u> : Can the families be displayed with the members?","fb5a1f18":"### Testing Set","9561c92f":"So, Ms. Encarnacion\tReynaldo (Passenger Id - 444) was 28 years old.\n\nWe will impute the age of Ms. Bridget O'Donoghue (Passenger Id - 980) as 28.","e892c5a1":"## Column Modifications","14857cb3":"So, the actual values obtained are :\n<center>\n$p_s$ = 646\n<center>\n$p_c$ = 168\n<center>\n$p_q$ = 77\n<\/center>\n\nThe percentages of passenger populations that boarded from various ports are shown in the following plot.","9e19ef3d":"So, our plan failed to impute the missing value in the age column incase of this passenger only, as there are no more passengers in the testing set with the same title.\n\nLet us now find out, the number of passengers in the training set with the title \"Ms\".","c7e6b91a":"Number of values present in \n- Age : 332\n- Cabin : 91\n- Fare : 417\n- Others : 418","29ee2c2d":"So, missing value was not imputed in case of one passenger only.\n\nNow, let us find out that the number of passengers with the title \"Ms\".","5ed587c4":"<a name=\"conclusion\"><\/a>\n# Conclusion","265725a2":"As it is clear from the Dimension section, that training set contains 891 rows. So, a column in the training set will contain 891 values, if there are no missing values in that column and this is true for all the columns present in the training set.\n\nSimillarly, it is clear from the Dimension section, that testing set contains 418 rows. So, a column in the testing set will contain 418 values, if there are no missing values in that column and this is true for all the columns present in the testing set.\n\nIn this section, the columns with missing values will be identified and will be pre-processed accordingly.","e7355cb4":"We can also visualize the survival ratio of each port with the following plot.","0b0fe6a2":"## Survived - Sex - Embarked - Passenger Class","4bfcf595":"### Missing Value Treatment on **Age**","c1d0eaec":"### Missing Value Treatment on **Cabin**","d00a214a":"## Survived - Sex\n\n<u>Question<\/u> : Did Sex played a roll in Survival of the passengers?","c56f62cf":"So, it can be said that :\n- Maximum number of passengers were from Southampton Port.\n- Minimum Number of Passengers were from Queenstown Port.","2ad67bc1":"Hence, **Sex played an important role in Survival of a passenger**.","02a01d83":"Clearly, from the above plot it canbe said that, $H_0$ cannot be accepted. Moreover, from the above plot it can be seen that, $n_f$ < $n_m$, where \n\n<center>\n $n_m$ $\\approx$ 580\n<center>\n $n_f$ $\\approx$ 320\n<\/center>\n\nThe actual values of $n_m$ and $n_f$ are calculated in the following output.","5a08f53e":"#### Sex","cc0f627e":"#### Training Set","aca3f1b2":"### Limitation in Fare column","693b3660":"The Fares in each of the three classes should have been different. But, from the above two plots it can be seen that, there are several overlapping regions amongs the fares of three classes. \n\nAgain, though we have found the fares of the family members separately for each family, but the fares calculated will be same for each of them. Like, an infant will have the same fare as his parents, which is not acceptable at all.\n\nSo, Fare column is one of the limitation of this dataset.","595cccce":"Now, we will split the \"Title_First\" column to \"Title\" and \"FirstName\".","a6f9b2e5":"In this section, we are going to visualize the data in hand and also explore the features thoroughly. We will use various hypotheses, wherever and whenever needed. But, most of the part will be based upon plots, graphs and tables.\n\nThe EDA part will help to answer some questions about the incident as far as recorded in the given dataset, like -\n1. What was the number and percentage of passengers who survived?\n2. What percentage of the passengers were male and female?\n3. Did the male passenger survived more or the female passengers?\n4. Which port saw maximum boarding?\n5. How much of the passenger population were children?\n\nand many more.\n\nEach of the features will be analyzed thoroughly and answers to the questions like mentioned above will be discovered."}}