{"cell_type":{"91aeeb1a":"code","7299284e":"code","81500a79":"code","fa551e22":"code","66652a96":"code","0e46864f":"code","0fe6b86c":"code","4d92dffa":"code","fc2f4564":"code","0caa8fcf":"code","5774559d":"code","71bcd7fb":"code","5d0d598c":"code","3a47d3bd":"code","c98335b9":"code","d232f59b":"code","1bd8bda3":"code","9c12bf51":"code","1ce1daaa":"code","0e46f268":"code","68927a46":"code","8289014a":"code","d7a69215":"code","df0f9858":"code","58b2c875":"code","6fb4b32d":"code","d4875cdd":"code","88f36e55":"code","0e11e8f9":"code","612ede0f":"code","df4de451":"code","bf505a8b":"code","239c864a":"code","efd355fc":"code","aea70844":"code","bcd96cb6":"code","ede310dd":"code","e749716c":"code","5f73494e":"code","78f25823":"code","dca8334c":"code","68dca48a":"code","c3d2eb46":"code","11ec9675":"code","aa143345":"markdown","64d1410c":"markdown","79bf166d":"markdown","410eeace":"markdown","57ab84a7":"markdown","394d0faf":"markdown","4a7f9fb7":"markdown","d35ad881":"markdown","189a865f":"markdown","302a911b":"markdown","896e2e23":"markdown","d67bc240":"markdown","80db190c":"markdown","f5d6034b":"markdown","64c945b3":"markdown","6a051547":"markdown","cd4076e2":"markdown","1d379271":"markdown","e1ac2e1e":"markdown","8f2c2c7b":"markdown","85b015ab":"markdown","70835c8c":"markdown","5e4e7af2":"markdown","398fd971":"markdown","d9e3ad6f":"markdown","361dc320":"markdown"},"source":{"91aeeb1a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","7299284e":"train = pd.read_csv('..\/input\/train.csv')\ntest= pd.read_csv('..\/input\/test.csv')\ngender_submission = pd.read_csv('..\/input\/gender_submission.csv')\ny_train = train['Survived']\ntrain_df = train.drop(['Survived'],axis=1)\nn_train = len(train_df.index)\nn_test = len(test.index)\nall_data =pd.concat([train_df,test],axis=0)\nall_data = all_data.reset_index(drop = True)\ny_train = y_train.to_frame()","81500a79":"all_data.isnull().sum()","fa551e22":"all_data['Pclass'].value_counts()","66652a96":"all_data['Initial']=0\nfor i in all_data:\n    all_data['Initial']=all_data.Name.str.extract('([A-Za-z]+)\\.') \nall_data.head()\n","0e46864f":"all_data['Initial'].unique()","0fe6b86c":"all_data['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don','Dona'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr','Mr'],inplace=True)","4d92dffa":"all_data.head()","fc2f4564":"all_data.groupby('Initial')['Age'].mean()","0caa8fcf":"all_data.loc[(all_data.Age.isnull())&(all_data.Initial=='Master'),'Age'] = 5\nall_data.loc[(all_data.Age.isnull())&(all_data.Initial=='Miss'),'Age'] = 22\nall_data.loc[(all_data.Age.isnull())&(all_data.Initial=='Mr'),'Age'] = 33\nall_data.loc[(all_data.Age.isnull())&(all_data.Initial=='Mrs'),'Age'] = 37\nall_data.loc[(all_data.Age.isnull())&(all_data.Initial=='Other'),'Age'] = 45","5774559d":"all_data.isnull().sum()","71bcd7fb":"all_data['Embarked'].fillna(all_data['Embarked'].mode()[0],inplace = True)\nall_data.isnull().sum()\nall_data","5d0d598c":"all_data['Age_Band']=0\nall_data.loc[all_data['Age']<=16,'Age_Band'] = 0\nall_data.loc[(all_data['Age']>16)&(all_data['Age']<=32),'Age_Band'] =1\nall_data.loc[(all_data['Age']>32)&(all_data['Age']<=48),'Age_Band'] =2\nall_data.loc[(all_data['Age']>48)&(all_data['Age']<=64),'Age_Band'] =3\nall_data.loc[all_data['Age']>46,'Age_Band'] =4\nall_data\n","3a47d3bd":"all_data['Family_Size'] = 0\nall_data['Family_Size'] = all_data['SibSp'] + all_data['Parch']\nall_data.head()","c98335b9":"all_data['Alone']=0\nall_data.loc[all_data['Family_Size']==0,'Alone']=1\nall_data","d232f59b":"all_data['Fare'].fillna(all_data[all_data['Pclass']==1]['Fare'].mean(),inplace = True)","1bd8bda3":"all_data.isnull().sum()","9c12bf51":"all_data['Fare_Range'] = pd.qcut(all_data['Fare'],4)\nall_data['Fare_Range'].unique()","1ce1daaa":"all_data['Fare_Cat'] = 0\nall_data.loc[(all_data['Fare']>-0.001)&(all_data['Fare']<=7.896),'Fare_Cat']=0\nall_data.loc[(all_data['Fare']>7.896)&(all_data['Fare']<=14.454),'Fare_Cat']=1\nall_data.loc[(all_data['Fare']>14.454)&(all_data['Fare']<=31.275),'Fare_Cat']=2\nall_data.loc[(all_data['Fare']>31.275)&(all_data['Fare']<=512.329),'Fare_Cat']=3","0e46f268":"all_data['Has_Cabin'] = all_data[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\nall_data","68927a46":"all_data= all_data.drop(['PassengerId','Name','Ticket','Fare','Fare_Range','Age'],axis=1)\nall_data.head()","8289014a":"all_data= pd.get_dummies(all_data)\nall_data.head()","d7a69215":"X_train = all_data[:n_train]\nX_test = all_data[n_train:]\nX=X_train\ny=y_train\ntest=X_test","df0f9858":"#importing all the required ML packages\nfrom sklearn.linear_model import LogisticRegression #logistic regression\nfrom sklearn import svm #support vector Machine\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier #Random Forest\nfrom sklearn.neighbors import KNeighborsClassifier #KNN\nfrom sklearn.naive_bayes import GaussianNB #Naive bayes\nfrom sklearn.tree import DecisionTreeClassifier #Decision Tree\nfrom sklearn.model_selection import train_test_split,cross_val_score, StratifiedKFold#training and testing data split\nfrom sklearn.metrics import accuracy_score,roc_auc_score #accuracy measure\nfrom xgboost import XGBClassifier ,plot_importance\nimport xgboost as xgb\nfrom sklearn.svm import SVC\n","58b2c875":"def train_model(classifier):\n    '''This function is used to train and print the accuracy of our models'''\n    folds = StratifiedKFold(n_splits=5, random_state=42)\n    accuracy = np.mean(cross_val_score(classifier, X, y, scoring=\"accuracy\", cv=folds, n_jobs=-1))\n    print('CV Accuracy:', accuracy)\n    return accuracy","6fb4b32d":"# Lists that keep track cross val means and algorithm names\ncv_means = []\nalg_list = []","d4875cdd":"model_svm=SVC(kernel='rbf',C=1,gamma=0.1,random_state=42,probability=True)\nmodel_svm_acc =train_model(model_svm)\ncv_means.append(model_svm_acc)\nalg_list.append(\"SVM\")\nmodel_svm.fit(X,y)","88f36e55":"model_rbf=SVC(kernel='rbf',C=1,gamma=0.1,probability=True)\nmodel_rbf_acc =train_model(model_rbf)\ncv_means.append(model_rbf_acc)\nalg_list.append(\"RBF\")\nmodel_rbf.fit(X,y)","0e11e8f9":"model_lr=LogisticRegression(penalty='l2',C=0.4,max_iter=100,random_state=42)\nmodel_lr_acc =train_model(model_lr)\ncv_means.append(model_lr_acc)\nalg_list.append(\"LR\")\nmodel_lr.fit(X,y)","612ede0f":"model_dt=DecisionTreeClassifier(max_depth=8,min_samples_split =9,\n                                           min_samples_leaf =3,random_state=42)\nmodel_dt_acc =train_model(model_lr)\ncv_means.append(model_dt_acc)\nalg_list.append(\"Decision Tree\")\nmodel_dt.fit(X,y)","df4de451":"model_knn=KNeighborsClassifier(weights='uniform',n_neighbors=9,p=1,leaf_size=90)\nmodel_knn_acc =train_model(model_knn)\ncv_means.append(model_knn_acc)\nalg_list.append(\"KNN\")\nmodel_knn.fit(X,y)","bf505a8b":"model_rfc=RandomForestClassifier(n_estimators=300, max_depth=25, \n                                min_samples_split=2, min_samples_leaf=2,\n                                max_features=\"log2\", random_state=42) \nmodel_rfc_acc =train_model(model_rfc)\ncv_means.append(model_rfc_acc)\nalg_list.append(\"RandomForestClassifier\")\nmodel_rfc.fit(X,y)","239c864a":"model_nb=GaussianNB() \nmodel_nb_acc =train_model(model_nb)\ncv_means.append(model_nb_acc)\nalg_list.append(\"GaussianNB\")\nmodel_nb.fit(X,y)","efd355fc":"model_grad=GradientBoostingClassifier(n_estimators=600,random_state=42,learning_rate=0.1)\nmodel_grad_acc =train_model(model_grad)\ncv_means.append(model_grad_acc)\nalg_list.append(\"GradientBoostingClassifier\")\nmodel_grad.fit(X,y)","aea70844":"model_ada=AdaBoostClassifier(n_estimators=200,random_state=42,learning_rate=0.1)\nmodel_ada_acc =train_model(model_ada)\ncv_means.append(model_ada_acc)\nalg_list.append(\"AdaBoost\")\nmodel_ada.fit(X,y)","bcd96cb6":"from lightgbm import LGBMClassifier\n# Initialize the model\nmodel_lgbm = LGBMClassifier(num_leaves=31, learning_rate=0.1, \n                      n_estimators=64, random_state=42, n_jobs=-1)\n# Validate the model\nmodel_lgbm_acc = train_model(model_lgbm)\ncv_means.append(model_lgbm_acc)\nalg_list.append(\"LGBM\")\nmodel_lgbm.fit(X, y)","ede310dd":"model_xgb_1 = XGBClassifier(learning_rate =0.1, n_estimators=80, max_depth=5,\n                                                  min_child_weight=3, gamma=0, subsample=1.0, \n                                                  colsample_bytree=0.9,reg_alpha = 0.011,\n                                                  objective= 'binary:logistic', \n                                                  scale_pos_weight=1,seed=27, nthread = -1)\nmodel_xgb_acc_1 =train_model(model_xgb_1)\ncv_means.append(model_xgb_acc_1)\nalg_list.append(\"XGboost\")\nmodel_xgb_1.fit(X,y)","e749716c":"# Create a performance DF with score and Algorithm name\nperformance_df = pd.DataFrame({\"Algorithms\": alg_list, \"CrossValMeans\":cv_means})\n\n# Plot the performace of all models\ng = sns.barplot(\"CrossValMeans\",\"Algorithms\", data = performance_df.sort_values(by=\"CrossValMeans\",ascending=False),\n                palette=\"Set3\",orient = \"h\")\ng.set_xlabel(\"Mean Accuracy\")\ng = g.set_title(\"Cross validation scores\")","5f73494e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\nmodels = [model_svm, model_rbf,model_ada,model_grad,model_lgbm]","78f25823":"from vecstack import stacking\nS_train, S_test = stacking(models,\n                           X_train, y_train, X_test,\n                           regression=False,\n                           mode='oof_pred_bag',\n                           n_folds=5,\n                           save_dir=None,\n                           needs_proba=False,\n                           random_state=42,\n                           stratified=True,\n                           shuffle=True,\n                           verbose=2\n                          )","dca8334c":"model_xgb_2 = XGBClassifier(learning_rate =0.1, n_estimators=80, max_depth=5,\n                                                  min_child_weight=3, gamma=0, subsample=1.0, \n                                                  colsample_bytree=0.9,reg_alpha = 0.011,\n                                                  objective= 'binary:logistic', \n                                                  scale_pos_weight=1,seed=27, nthread = -1)\nmodel_xgb_2.fit(S_train, y_train)\nstacked_pred = model_xgb_2.predict(S_test)\nprint('Final prediction score: ', accuracy_score(y_test, stacked_pred))","68dca48a":"y1_pred_L1 = models[0].predict(test)\ny2_pred_L1 = models[1].predict(test)\ny3_pred_L1 = models[2].predict(test)\ny4_pred_L1 = models[3].predict(test)\ny5_pred_L1 = models[4].predict(test)\nS_test_L1 = np.c_[y1_pred_L1, y2_pred_L1, y3_pred_L1,y4_pred_L1,y5_pred_L1]\ntest_stacked_pred = model_xgb_2.predict(S_test_L1)","c3d2eb46":"from sklearn.ensemble import VotingClassifier\nfolds = StratifiedKFold(n_splits=5, random_state=42)\nensemble_lin_rbf=VotingClassifier(estimators=[('KNN',model_knn),\n                                               ('XGBoost',model_xgb_1),\n                                              ('RBF',model_rbf),\n                                              ('svm',model_svm),\n                                              ('grad',model_grad),\n                                             \n                                        ], voting='soft')\nensemble_lin_rbf.fit(X,y)\ncv_result_ensemble_lin_rbf = np.mean(cross_val_score(ensemble_lin_rbf,X,y,\n                                                     cv = folds,scoring = \"accuracy\",n_jobs=-1))\nprint('The cv score of ensemble_lin_rbf is ' ,cv_result_ensemble_lin_rbf)","11ec9675":"#model_xgb.fit(X_train.values,y_train.values)\n#y_pre = model_xgb.predict(X_test.values)\ngender_submission['Survived'] = test_stacked_pred\ngender_submission.to_csv('submission.csv',index=False)","aa143345":"**RBF**","64d1410c":"**NULL**","79bf166d":"**GradientBoostingClassifier**","410eeace":"**Logistic Regression**","57ab84a7":"**Age_nan**","394d0faf":"**Family**","4a7f9fb7":"**Xgboost**","d35ad881":"**Esemble**","189a865f":"The cv score of ensemble_lin_rbf is  0.833913235290467","302a911b":"**Model Stacking**","896e2e23":"**Alone**","d67bc240":"**SVM**","80db190c":"**Cabin**","f5d6034b":"**Decision Tree**","64c945b3":"**KNN**","6a051547":"**RandomForestClassifier**","cd4076e2":"**NB**","1d379271":"**Performance**","e1ac2e1e":"**Initial**","8f2c2c7b":"**Embarked_nan**","85b015ab":"**Save CSV**","70835c8c":"**ONE_HOT**","5e4e7af2":"**Fare_nan**","398fd971":"**AdaBoost**","d9e3ad6f":"**Age**","361dc320":"**Models**"}}