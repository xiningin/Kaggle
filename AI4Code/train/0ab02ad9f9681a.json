{"cell_type":{"8cfc2e06":"code","27b8d931":"code","dc6b98a4":"code","57ea55a2":"code","4b42b68b":"code","b9b4b2d9":"code","ea265f8c":"code","cad7e358":"code","951bd1ca":"code","f8501d88":"code","316aceb1":"code","b91a15ff":"code","0f314959":"code","9198eb1a":"code","e59d7923":"code","ab6ae1db":"code","cf347d2a":"code","0c6b984f":"code","aa31d758":"code","129622b9":"code","8b023ed4":"code","70061d57":"code","8fd73066":"code","a112b293":"code","224d9577":"code","3fae190b":"code","b5f14c98":"code","26af137a":"code","3d8c9366":"code","bb340490":"code","ca04ad77":"code","e2930355":"code","2cfa9911":"code","52dafa17":"code","b88e7a82":"code","e300c4d0":"code","186e9489":"code","ef305588":"code","ac1e1d8c":"code","c24b16a9":"code","4563350c":"markdown","37de430d":"markdown","36a43404":"markdown"},"source":{"8cfc2e06":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom pandas.plotting import scatter_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import mutual_info_regression\n\nfrom sklearn.ensemble import RandomForestRegressor\n\n\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import KFold, cross_val_score\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import cross_val_score\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","27b8d931":"train_df= pd.read_csv(os.path.join(dirname, 'train.csv'), parse_dates = ['Date'])\ntest_df= pd.read_csv(os.path.join(dirname, 'test.csv'), parse_dates = ['Date'])\n# info about df like type ..\ntrain_df.head()","dc6b98a4":"test_df.count()","57ea55a2":"# numerice columns in our df \nnumerics = ['int64', 'float64']\ntrain_df.select_dtypes(include=numerics).columns","4b42b68b":"#drop duplicates in our df \nprint(f\"Before Drop Duplicates : {train_df.shape}\")\ntrain_df= train_df.drop_duplicates()\ntest_df= test_df.drop_duplicates()\nprint(f\"After Drop Duplicates : {train_df.shape}\")\nprint(\"We noticed that df don't have any duplicates :)\")","b9b4b2d9":"# Extract day, month and year from date column in train_df\ntrain_df['dayofweek']=train_df['Date'].dt.dayofweek\n#train_df['month']=train_df['Date'].dt.month\n# train_df['dayofyear']=train_df['Date'].dt.dayofyear\n\n# Extract day, month and year from date column in test_df\ntest_df['dayofweek']=test_df['Date'].dt.dayofweek\n# test_df['dayofyear']=test_df['Date'].dt.dayofyear","ea265f8c":"train_df = train_df[train_df['Functioning Day'] != 'No']","cad7e358":"train_df.count()","951bd1ca":"train_df['working_day'] = (train_df['Date'].dt.dayofweek < 5).astype(np.int)\ntest_df['working_day'] = (test_df['Date'].dt.dayofweek < 5).astype(np.int)","f8501d88":"train_df['work_st_en'] = ((train_df['Date'].dt.dayofweek < 5) & \n                         (((train_df['Hour'] >= 7) &  (train_df['Hour'] <= 9) )|\n                         ((train_df['Hour'] >= 17) &  (train_df['Hour'] <= 19)))).astype(np.int)\n\ntest_df['work_st_en'] = ((test_df['Date'].dt.dayofweek < 5) & \n                         (test_df['Hour'] >= 7) &  (test_df['Hour'] <= 9) &\n                         (test_df['Hour'] >= 17) &  (test_df['Hour'] <= 19)).astype(np.int)","316aceb1":"# use this encoder to encode\n\nfrom sklearn.preprocessing import OneHotEncoder\n\nenc = OneHotEncoder()\nle = LabelEncoder()\n\ndef encode_columns(dataframe, lst_of_col):\n    for col in lst_of_col:\n        dataframe[col] = le.fit_transform(dataframe[col].values)\n        \nlst_of_col = ['Seasons',\n              'Holiday']\n\nencode_columns(train_df, lst_of_col)\nencode_columns(test_df, lst_of_col)","b91a15ff":"train_df['Wind speed (m\/s)'] = np.log1p(train_df['Wind speed (m\/s)'])\ntest_df['Wind speed (m\/s)'] = np.log1p(test_df['Wind speed (m\/s)'])","0f314959":"train_df['Solar Radiation (MJ\/m2)'] = np.sqrt(train_df['Solar Radiation (MJ\/m2)'])\ntest_df['Solar Radiation (MJ\/m2)'] = np.sqrt(test_df['Solar Radiation (MJ\/m2)'])","9198eb1a":"train_df['Rainfall(mm)'] = train_df.rolling(2, min_periods=1)['Rainfall(mm)'].mean()\ntest_df['Rainfall(mm)'] = test_df.rolling(2, min_periods=1)['Rainfall(mm)'].mean()\n\ntrain_df['dryness'] = 1 \/ (train_df['Rainfall(mm)'] + 1)\ntest_df['dryness'] = 1 \/ (test_df['Rainfall(mm)'] + 1)","e59d7923":"train_df['Snowfall (cm)'] = train_df.rolling(8, min_periods=1)['Snowfall (cm)'].mean()\ntest_df['Snowfall (cm)'] = test_df.rolling(8, min_periods=1)['Snowfall (cm)'].mean()\n\ntrain_df['snowing'] = (train_df['Snowfall (cm)'] > 0).astype(np.int)\ntest_df['snowing'] = (test_df['Snowfall (cm)'] > 0).astype(np.int)","ab6ae1db":"train_df['invis'] = 2000 - train_df['Visibility (10m)']\ntest_df['invis'] = 2000 - test_df['Visibility (10m)']\n","cf347d2a":"train_df['y'] = np.log1p(train_df['y'])\n#test_df['y'] = np.log1p(test_df['y'])","0c6b984f":"train_df.skew()","aa31d758":"# dispaly correlation between features or columns in data \nnp.random.seed(0)\nsns.set_theme()\nfig, ax = plt.subplots(figsize = (21, 8))\nsns.heatmap(train_df.corr(), cmap ='RdYlGn', linewidths = 0.3, annot = True)","129622b9":"# display Scatter of some columns in df \nattributes = ['y', 'Rainfall(mm)', 'Snowfall (cm)','Solar Radiation (MJ\/m2)','Hour']\n#category = ['y','Seasons','Holiday', 'Functioning Day','Temperature(\ufffdC)','month']\nscatter_matrix(train_df[attributes], figsize=(16, 12))\n#train_df.hist(figsize=(16, 12))","8b023ed4":"# display corr in descending order between y and remaining columns\ncorr_matrix = train_df.corr()\ncorr_matrix[\"y\"].sort_values(ascending=False)[1:]","70061d57":"discrete_features = train_df.drop(['ID', 'Date', 'y'], axis = 1).dtypes == int","8fd73066":"train_df.isna().sum()","a112b293":"from sklearn.feature_selection import mutual_info_regression\n\ndef make_mi_scores(X, y, discrete_features):\n    mi_scores = mutual_info_regression(X, y, discrete_features=discrete_features)\n    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores\n\n#mi_scores = make_mi_scores(train_df.drop(['ID', 'Date', 'y'], axis = 1), train_df[\"y\"], discrete_features)\n#mi_scores  # show a few features with their MI scores","224d9577":"train_df.columns","3fae190b":"train_df2 = train_df.copy()\nX_train2 = train_df.copy().drop(['ID', 'Date', 'y'], axis = 1)\ny_train2 = train_df.copy()[\"y\"]","b5f14c98":"train_df3, valid_df3 = train_test_split(train_df, test_size=0.2, random_state=51,stratify = train_df.Hour)\n\n\nX_train = train_df3.copy().drop(['ID', 'Date', 'y'], axis = 1)\ny_train = train_df3.copy()[\"y\"]\nX_valid = valid_df3.copy().drop(['ID', 'Date', 'y'], axis = 1)\ny_valid = valid_df3.copy()[\"y\"]\n\n\n\nprint(f\"The len of train df {len(X_train)}\")\nprint(f\"The len of train df {len(X_valid)}\")","26af137a":"X_valid.columns","3d8c9366":"# select the training features\nfeatures = ['Hour', 'Temperature(\ufffdC)', 'Humidity(%)',\n       'Wind speed (m\/s)','Dew point temperature(\ufffdC)',\n       'Solar Radiation (MJ\/m2)', 'Seasons',\n        'dayofweek', 'working_day', \n       'dryness', 'snowing', 'invis','work_st_en']\n\nX_train = X_train[features]\nX_valid = X_valid[features]","bb340490":"# import numpy as np\n# from sklearn.model_selection import StratifiedKFold\n\n# from sklearn.metrics import mean_squared_log_error\nfrom xgboost import XGBRegressor \n\n# #clf2 = RandomForestRegressor(n_estimators = 100 , max_depth=None, random_state=51)\n# from sklearn.experimental import enable_hist_gradient_boosting\n# from sklearn.ensemble import HistGradientBoostingRegressor\n\n# hist = HistGradientBoostingRegressor(loss=\"poisson\",max_leaf_nodes=50,max_iter=100,learning_rate=0.08\n#                                      ,warm_start=True,l2_regularization=20)\n# #hist.fit(X_train2[features], y_train2)\n\n\n\n# xgb_model = XGBRegressor(n_estimators=220,objective='count:poisson', max_depth=5, eta=0.22,random_state=51,\n#                         colsample_bylevel=0.98,colsample_bytree=0.99, gamma=0.1)\n# #xgb_model.fit(X_train2[features], y_train2)\n\n# skf = StratifiedKFold(n_splits=5)\n# skf.get_n_splits(X_train2[features], y_train2)\n\n\n# for train_index, test_index in skf.split(X_train2[features], y_train2):\n#    # print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n#     X_train4, X_test4 = X_train2.iloc[train_index], X_train2.iloc[test_index]\n#     y_train4, y_test4 = y_train2.iloc[train_index], y_train2.iloc[test_index]\n#     xgb_model.fit(X_train4[features], y_train4)\n#     print(\"valid:\",mean_squared_log_error(y_test4, xgb_model.predict(X_test4[features])))\n#     print(\"train:\",mean_squared_log_error(y_train4, xgb_model.predict(X_train4[features])))\n#     print(\"\")","ca04ad77":"X_train2.info()","e2930355":"def display_scores(predictions):\n    mse = mean_squared_error(y_valid, predictions)\n    print(\"MSE:\", mse)\n    rmse = np.sqrt(mse)\n    print(\"RMSE:\", rmse)\n    r2 = r2_score(y_valid, predictions)\n    print(\"R2:\", r2)\n# Function for comparing different approaches\n\ndef score_dataset(X_train, X_valid, y_train, y_valid):\n    xgb_model = XGBRegressor(n_estimators=220,objective='count:poisson', max_depth=6, eta=0.22,random_state=51,\n                        colsample_bylevel=0.99,colsample_bytree=0.99, gamma=0.1)\n    xgb_model.fit(X_train[features], y_train)\n    preds = xgb_model.predict(X_valid[features])\n    pred_t = xgb_model.predict(X_train[features])\n    return mean_absolute_error(y_valid, preds), xgb_model,preds,pred_t\n","2cfa9911":"#score,model,predictions,pred_t  = score_dataset(X_train, X_valid, y_train, y_valid)","52dafa17":"# display_scores(predictions)\n# mse = mean_squared_error(y_train, pred_t)\n# print(\"MSE:\", mse)\n# rmse = np.sqrt(mse)\n# print(\"RMSE:\", rmse)\n# r2 = r2_score(y_train, pred_t)\n# print(\"R2:\", r2)\n# from sklearn.metrics import mean_squared_log_error\n\n# print(\"valid error:\",np.sqrt(mean_squared_log_error(y_valid, predictions)))\n# print(\"train error:\",np.sqrt(mean_squared_log_error(y_train, pred_t)))","b88e7a82":"from sklearn.metrics import mean_squared_log_error\n#training on all data \nxgb_model_all = XGBRegressor(n_estimators=200,objective='count:poisson', max_depth=6, eta=0.2,random_state=42,\n                        colsample_bylevel=0.999,colsample_bytree=0.999)\nxgb_model_all.fit(X_train2[features], y_train2)\nnp.sqrt(mean_squared_log_error(y_train2, xgb_model_all.predict(X_train2[features])))","e300c4d0":"test_df.head()","186e9489":"# predict the number of bikes\n\n# Choose the features used for training\nX_test = test_df[features]\n\ny_test_predicted = xgb_model_all.predict(X_test)\ny_test_predicted[test_df['Functioning Day'] == 'No'] = 0\n\nprint(y_test_predicted)\ntest_df['y'] = np.round(np.exp(y_test_predicted))\n\ntest_df[['ID','y']].head(10)","ef305588":"y_test_predicted","ac1e1d8c":"test_df[['ID', 'y']].to_csv('\/kaggle\/working\/submission.csv', index=False)","c24b16a9":"test_df.head()","4563350c":"### Model","37de430d":"We are provided hourly rental data along with weather data. We have to predict the total count of bikes rented during each hour covered by the test set, using only information available prior to the rental period.\n\n### Data fields:\n- ID - an ID for this instance\n- Date - year-month-day\n- Hour - Hour of he day\n- Temperature - Temperature in Celsius\n- Humidity - %\n- Windspeed - m\/s\n- Visibility - 10m\n- Dew point temperature - Celsius\n- Solar radiation - MJ\/m2\n- Rainfall - mm\n- Snowfall - cm\n- Seasons - Winter, Spring, Summer, Autumn\n- Holiday - Holiday\/No holiday\n- Functional Day - NoFunc(Non Functional Hours), Fun(Functional hours)\n- y - Rented Bike count (Target), Count of bikes rented at each hour","36a43404":"## Another way to Convert our date columns to datetime\ntrain_df['Date'] = pd.to_datetime(train_df['Date'], format=\"%d\/%m\/%Y\")\ntrain_df['Date'].head()"}}