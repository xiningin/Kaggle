{"cell_type":{"ea31d308":"code","ed80f347":"code","d82d55b4":"code","eec96485":"code","ed29c67d":"code","ebc44af5":"code","2f420a84":"code","3eb8f59e":"code","8988ef78":"code","9f95ba21":"code","90b1190b":"code","11d6dcd4":"markdown","5b751725":"markdown"},"source":{"ea31d308":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split, TimeSeriesSplit\nfrom sklearn import preprocessing\n\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.linear_model import LogisticRegression\n\nfrom collections import Counter\nfrom random import choice","ed80f347":"df = pd.read_csv(\"\/kaggle\/input\/aflcsv\/afl.csv\")\n\n# Seperate datetime\ndf[\"year\"] = pd.to_datetime(df[\"Date\"]).dt.year\ndf[\"month\"] = pd.to_datetime(df[\"Date\"]).dt.month\ndf[\"day\"] = pd.to_datetime(df[\"Date\"]).dt.day\n\n# Remove draws\ndf.drop(df[df[\"Home Score\"] == df[\"Away Score\"]].index, inplace=True)\n\n# Combine venues that have less than 70 plays into Misc\nto_replace = [k for k, v in df[\"Venue\"].value_counts().to_dict().items() if v < 70 ]\ndf[\"Venue\"].replace(to_replace=to_replace, value=\"Misc\", inplace=True)\n\n# Drop all games before 2018, improves accuracy\ndf.drop(df[df[\"year\"] < 2018].index, inplace=True)\n\n# Fill NaN's in \"Play Off Game?\"\"\ndf.fillna(\"N\", inplace=True)\n\ndf.head(20)","d82d55b4":"# Encode team names\nteam_encoder = preprocessing.LabelEncoder()\ndf[\"Home Team\"] = team_encoder.fit_transform(df[\"Home Team\"])\ndf[\"Away Team\"] = team_encoder.fit_transform(df[\"Away Team\"])\n\n# Encode venue names\nvenue_encoder = preprocessing.LabelEncoder()\ndf[\"Venue\"] = venue_encoder.fit_transform(df[\"Venue\"])\n\n# Encode final identifier\nplayoff_encoder = preprocessing.LabelEncoder()\ndf[\"Play Off Game?\"] = playoff_encoder.fit_transform(df[\"Play Off Game?\"])\n\nX = df[[\"Home Team\", \"Away Team\", \"Venue\", \"Home Odds\", \"Away Odds\", \"Play Off Game?\"]].to_numpy()\n\nscores = df[[\"Home Score\", \"Away Score\"]].to_numpy()\n\ny = np.zeros(shape=(scores.shape[0], 1)).ravel()\nfor i, score in enumerate(scores):\n    # 0 means home team won (home team score bigger than away team)\n    # 1 means away team won (away team score bigger than home team)\n    if score[0] > score[1]:\n        y[i] = 0\n    else:\n        y[i] = 1\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","eec96485":"svc = SVC()\nsvc.fit(X_train, y_train).score(X_test, y_test)","ed29c67d":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train, y_train).score(X_test, y_test)","ebc44af5":"regression = LogisticRegression()\nregression.fit(X_train, y_train).score(X_test, y_test)","2f420a84":"# Splits by 9 rounds for test and rest for train, last 9 rounds of 2021 were finals\nX_train, X_test, y_train, y_test = X[9:], X[:9], y[9:], y[:9]","3eb8f59e":"finals = LogisticRegression()\nfinals.fit(X_train, y_train)\n\nfor i, final in enumerate(X_test):\n    prediction = finals.predict([final])\n    print(team_encoder.inverse_transform([int(final[0]), int(final[1])]), \\\n          team_encoder.inverse_transform([int(final[int(prediction[0])])]), \\\n          team_encoder.inverse_transform([int(final[int(y_test[i])])]))","8988ef78":"finals.predict(X_test)","9f95ba21":"finals.fit(X_train, y_train).score(X_test, y_test)","90b1190b":"from sklearn.utils import all_estimators\n\nclfs = all_estimators(type_filter=\"classifier\")\n\nfor clf in clfs:\n    try:\n        print(clf[0], clf[1]().fit(X_train, y_train).score(X_test, y_test))\n    except:\n        continue","11d6dcd4":"# Used for predicting 2021 finals","5b751725":"# Test all Estimator (useful later)"}}