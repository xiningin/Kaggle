{"cell_type":{"88b4cc0b":"code","bda1f54a":"code","fe1d9ef9":"code","28ea4762":"code","5613fed2":"code","98f01f46":"code","8fc5ea55":"code","e134c780":"code","24bebde2":"code","512903d5":"markdown"},"source":{"88b4cc0b":"import numpy as np\nimport pandas as pd\nimport spacy\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","bda1f54a":"# Load the large model to get the vectors\nnlp = spacy.load('en_core_web_lg')\nreview_movies = pd.read_csv(\"..\/input\/wikipedia-movie-plots\/wiki_movie_plots_deduped.csv\")","fe1d9ef9":"review_movies.head()","28ea4762":"review_movies_1 = review_movies.copy()","5613fed2":"# we convert all the rows where the genre has an 'unknown' to nan value\nfor idx, text in enumerate (review_movies_1.Genre): \n    if text == 'unknown': \n        review_movies_1.loc[:idx] = review_movies_1.drop([idx])\n        ","98f01f46":"review_movies_2 = review_movies_1.loc[:,{'Genre', 'Plot'}]\nreview_movies_2","8fc5ea55":"reviews = review_movies_2.dropna() # contain only the genre and plot features \n\nreview_data = review_movies_1.dropna() # contrain the entire dataset \n\nprint(reviews.isna().sum())\nprint('-'*40)\nprint(review_data.isna().sum())","e134c780":"reviews = review_data[:100]\nwith nlp.disable_pipes():\n    vectors = np.array([nlp(review.Plot).vector for idx, review in reviews.iterrows()])\n    \nvectors.shape","24bebde2":"from sklearn.svm import LinearSVC\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(vectors, reviews['Genre'], \n                                                    test_size=0.1, random_state=1)\n\n\nmodel = LinearSVC(random_state=1, dual=False)\n\nmodel.fit(X_train,y_train)\n\n\nprint(f'Model test accuracy: {model.score(X_test, y_test)*100:.3f}%')\n","512903d5":"![Alt Text](https:\/\/media.giphy.com\/media\/l2SqfufCKFYdArZIs\/giphy.gif)"}}