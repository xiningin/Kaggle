{"cell_type":{"f67a601a":"code","3b8352b1":"code","ca67208d":"code","90f73c91":"code","9e2c1504":"code","f971bec2":"code","69394f82":"code","98caa90c":"code","ae80139f":"code","99868cba":"code","88ce3a78":"code","e52f7760":"code","13c0b4f5":"code","c1ff9015":"code","396d441c":"code","d2963292":"code","d090cc19":"markdown","bb1fe028":"markdown","d64696c5":"markdown","4f7cd509":"markdown","a2ccf470":"markdown","cf077d58":"markdown","ee48ebab":"markdown","b41c040c":"markdown","bd5a0734":"markdown","21a8357e":"markdown","9b4ddaff":"markdown","4b253d8e":"markdown"},"source":{"f67a601a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \nfrom pylab import rcParams\n\nrcParams['figure.figsize'] = 30, 8\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3b8352b1":"List = pd.read_csv(\"\/kaggle\/input\/bicycle-store-dataset\/Customer List.csv\")\nAdress = pd.read_csv(\"\/kaggle\/input\/bicycle-store-dataset\/Customer Address.csv\")\nDemographic = pd.read_csv(\"\/kaggle\/input\/bicycle-store-dataset\/Customer Demographic.csv\", encoding_errors=\"ignore\", encoding=\"ascii\")\nTransactions = pd.read_csv(\"\/kaggle\/input\/bicycle-store-dataset\/Transactions.csv\")\nprint(len(Demographic), len(Transactions), len(Adress), len(List))\nTransactions.columns[:13]","ca67208d":"Demographic_mod = Demographic[Demographic.columns[:13]]\nList_mod = List[['first_name', 'last_name', 'gender',\n       'past_3_years_bike_related_purchases', 'DOB', 'job_title',\n       'job_industry_category', 'wealth_segment', 'deceased_indicator',\n       'owns_car', 'tenure', 'address', 'postcode', 'state', 'country',\n       'property_valuation', 'Rank', 'Value']]\nTransactions_mod = Transactions[Transactions.columns[:13]]\n","90f73c91":"Transactions_mod[Transactions_mod[\"customer_id\"].isnull()]","9e2c1504":"\ndata_merged = pd.merge(Demographic_mod, Transactions_mod, on=\"customer_id\", how=\"inner\")\nprint(len(data_merged.columns))\nprint(len(data_merged))\ndata_merged.head()\nprint(data_merged.columns)\ndata_merged[\"brand\"].value_counts()","f971bec2":"data_merged[\"full_name\"] = data_merged[\"first_name\"] + \" \"+ data_merged[\"last_name\"]\nlen(data_merged[\"past_3_years_bike_related_purchases\"])\ndata_merged[\"brand\"].unique()\n","69394f82":"# repl = dict(zip(data_merged[\"brand\"].unique(), [\"OHM\", \"Solex\", \"Trek\", \"Norco\", \"Giant\", \"WeareA2B\", np.nan]))\n#data_merged_c = data_merged\n#dat_merged_c = data_merged_c.replace(repl)\n#data_merged_c.head()\ndata_merged_c = data_merged\ndata_merged_c.loc[data_merged_c[\"brand\"] == \"OHM Cycles\", \"brand\"] = \"OHM\"\ndata_merged_c.loc[data_merged_c[\"brand\"] == \"Norco Bicycles\", \"brand\"] = \"Norco\"\ndata_merged_c.loc[data_merged_c[\"brand\"] == \"Giant Bicycles\", \"brand\"] = \"Giant\"\ndata_merged_c.loc[data_merged_c[\"brand\"] == \"Trek Bicycles\", \"brand\"] = \"Trek\"\ndata_merged_c[\"brand\"].unique()\n","98caa90c":"pd.to_datetime(data_merged_c[\"DOB\"])\nyear = (pd.to_datetime(\"2021-10-12\") - pd.to_datetime(Demographic_mod[\"DOB\"]))\/np.timedelta64(1, \"Y\")\nDemographic[\"age\"] = round(year)\nround(year)\nDemographic_mod[\"age\"] = round(year)","ae80139f":"#sns.displot(Demographic_mod, x=\"past_3_years_bike_related_purchases\")\n#cus10 = data_merged.loc[data_merged[\"customer_id\"] == 10]\n#date = cus10[\"transaction_date\"]\n#date.sort()","99868cba":"frequency = pd.DataFrame(data=data_merged[\"customer_id\"].value_counts())\nfrequency[\"customer_id\"]","88ce3a78":"Demographic_mod[\"revenue\"] = data_merged.groupby(\"customer_id\")[\"list_price\"].sum()\nDemographic_mod\nDemographic_mod[\"avg_spent\"] = data_merged.groupby(\"customer_id\")[\"list_price\"].mean()\nsns.displot(Demographic_mod[\"avg_spent\"])\nbins = [20, 40, 55, 80]\nbin_indices = np.digitize(Demographic_mod[\"age\"], bins)\nDemographic_mod[\"age_grp\"] = bin_indices\nDemographic_mod[[\"age_grp\", \"age\", \"avg_spent\"]]\ndem_avg = Demographic_mod.groupby(\"age_grp\").mean()\n# sns.catplot(Demographic_mod, x=\"age_grp\", y=\"avg_spent\")\nplt.title(\"Avg amount spent per customer\")\ndem_avg\nDemographic_mod[\"gender\"].value_counts()","e52f7760":"freq_giant = data_merged.loc[data_merged[\"brand\"] == \"Giant\"][\"customer_id\"].value_counts()\ndata_giant = data_merged.loc[data_merged[\"brand\"] == \"Giant\"]\nfreq_trek = data_merged.loc[data_merged[\"brand\"] == \"Trek\"][\"customer_id\"].value_counts()\nsns.displot(freq_giant)\nplt.xlabel(\"frequency\")\nplt.title(\"Buying frequency of Giant customers\")\nind = freq_giant.index + 1\nind","13c0b4f5":"sns.displot(frequency, x=frequency[\"customer_id\"])","c1ff9015":"# plt.rcParams['figure.figsize'] = [1, 5]\n%matplotlib inline\nsns.catplot(y=\"list_price\", x=\"brand\", kind=\"point\", data=data_merged)\nplt.title(\"Average list prices and confidence intervall for different brands\")\n","396d441c":"\n# l = Demographic.loc[Demographic[\"age\"] < 100]\ndemo_giant = Demographic_mod.loc[ind]\ndemo_giant = demo_giant.loc[demo_giant[\"age\"] < 70]\nsns.displot(demo_giant[\"age\"])\nplt.title(\"Age distribution of Giant customers\")\ndemo_giant[\"age\"]","d2963292":"data_merged_c.to_csv('mycsvfile.csv',index=False)\nDemographic_mod.to_csv(\"demographic_add.csv\", index=False)","d090cc19":"## Compare frequency for different companies","bb1fe028":"## Create an \"age\" column","d64696c5":"# Analysis of Bike Data and predictive modeling with CLV models\n\n## explorative data analysis","4f7cd509":"### Reading the data\nReading in the data from csv files as panda dataframe, Demographic seems to have encoding problems, when encoding errors is set to \"strict\", setting it to \"ignore\" fixes the problem","a2ccf470":"## Compare list_price depending on the company","cf077d58":"## Plotting","ee48ebab":"Plotting the distribution of the number of bike purchases per person. And checking for normal distribution as this property is a prerequisite for the subsequent statistical tests. (Assumption checks)","b41c040c":"## Distribution of age for people under 100","bd5a0734":"### feature engineering and merging of the data\nExtracting only the columns we need from the data, more than 200 columns have been imported from the csv that don't have any values","21a8357e":"## Compare different in total","9b4ddaff":"Merging the data. Because we are performing an \"inner join\" all the rows that don't have a (matching) customer_id value get dropped. We will first focus on the Transactions and the Demographic dataset as these contain all of the data we need.","4b253d8e":"The goal of this report is to analyze the customers bases of the different bike companies. Besides explorative data analysis and hypothesis testing (e.g. ANOVA) we will focus on predicting the value of the customer base (CLV)"}}