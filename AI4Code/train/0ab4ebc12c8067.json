{"cell_type":{"ceab8674":"code","4ef6e498":"code","32c028b4":"code","073cf8ae":"code","9e99900d":"code","b8ce75bf":"code","67f41fde":"code","a53b9374":"code","ad2e6314":"code","37b58f19":"code","4c55c2fb":"code","0529f15a":"code","145278d9":"code","b8bf42d7":"code","8e6f8ae6":"code","4df1c3e0":"code","8a23ee13":"code","4d6556df":"code","a5eee894":"code","ae2ea25d":"code","9078e011":"code","33938332":"code","293ed908":"code","ad9cddab":"code","84729349":"code","c2bd2baa":"code","c958f59d":"code","296f45d3":"code","bebbab74":"code","cb94e0f2":"code","6d8ede62":"code","857bfa84":"code","b0d70c4d":"code","d396ada7":"code","f3f34d83":"code","ee67d5b7":"code","06b7b6aa":"code","437e336b":"code","bcffefe3":"code","44136ace":"code","5bcc8502":"code","eeb06992":"markdown","f77ad7d8":"markdown","f4adf41d":"markdown","0d414806":"markdown","3a5e72dd":"markdown","3286a8ad":"markdown","32c3b260":"markdown","36328c0f":"markdown","a1cc4baf":"markdown","c1d7fad2":"markdown","a6aba8b5":"markdown","23c6f597":"markdown","bf351ca3":"markdown","ae6ef063":"markdown","22d556d0":"markdown","f88859b3":"markdown","1c50ec83":"markdown","c510be8a":"markdown","bcbe3ff7":"markdown","0a088f20":"markdown","25ddf8e0":"markdown","7b7eea8f":"markdown","c2e2739f":"markdown","c6f276be":"markdown","41bc2666":"markdown","d4cd30f6":"markdown","17498d79":"markdown","5c951cc6":"markdown","b7bae2bc":"markdown","9df39f74":"markdown","98942072":"markdown","79b5e90d":"markdown","c68a6b97":"markdown","11ef9b78":"markdown","5d202e9f":"markdown"},"source":{"ceab8674":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4ef6e498":"import numpy as np\nimport pandas as pd\nfrom pandas import DataFrame\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom pandas import Series,DataFrame\nimport scipy\nfrom pylab import rcParams\nimport urllib\nimport sklearn\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings('ignore')\nprint ('Setup Complete')","32c028b4":"ds=pd.read_csv(\"..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")","073cf8ae":"ds.head()","9e99900d":"ds.describe()","b8ce75bf":"ds.info()","67f41fde":"ds_quality=ds['quality'].value_counts()\nprint(ds_quality)\n","a53b9374":"fig = px.histogram(ds['quality'],x=\"quality\",nbins=20)\nfig.show()\n","ad2e6314":"import plotly.express as px\ndf = px.data.tips()\nfig = px.violin(ds, x=\"quality\",y='fixed acidity',color=\"quality\", box=True, points=\"all\")\nfig.show()","37b58f19":"import plotly.express as px\ndf = px.data.tips()\nfig = px.violin(ds, x=\"quality\",y='volatile acidity',color=\"quality\", box=True, points=\"all\")\nfig.show()","4c55c2fb":"import plotly.express as px\ndf = px.data.tips()\nfig = px.violin(ds, x=\"quality\",y='citric acid',color=\"quality\", box=True, points=\"all\")\nfig.show()","0529f15a":"import plotly.express as px\ndf = px.data.tips()\nfig = px.violin(ds, x=\"quality\",y='residual sugar',color=\"quality\", box=True, points=\"all\")\nfig.show()","145278d9":"import plotly.express as px\ndf = px.data.tips()\nfig = px.violin(ds, x=\"quality\",y='chlorides',color=\"quality\", box=True, points=\"all\")\nfig.show()","b8bf42d7":"import plotly.express as px\ndf = px.data.tips()\nfig = px.violin(ds, x=\"quality\",y='free sulfur dioxide',color=\"quality\", box=True, points=\"all\")\nfig.show() ","8e6f8ae6":"import plotly.express as px\ndf = px.data.tips()\nfig = px.violin(ds, x=\"quality\",y='total sulfur dioxide',color=\"quality\", box=True, points=\"all\")\nfig.show() ","4df1c3e0":"import plotly.express as px\ndf = px.data.tips()\nfig = px.violin(ds, x=\"quality\",y='density',color=\"quality\", box=True, points=\"all\")\nfig.show() ","8a23ee13":"import plotly.express as px\ndf = px.data.tips()\nfig = px.violin(ds, x=\"quality\",y='pH',color=\"quality\", box=True, points=\"all\")\nfig.show() ","4d6556df":"import plotly.express as px\ndf = px.data.tips()\nfig = px.violin(ds, x=\"quality\",y='sulphates',color=\"quality\", box=True, points=\"all\")\nfig.show() ","a5eee894":"import plotly.express as px\ndf = px.data.tips()\nfig = px.violin(ds, x=\"quality\",y='alcohol',color=\"quality\", box=True, points=\"all\")\nfig.show() ","ae2ea25d":"corr = ds.corr()\nfig, ax = plt.subplots(figsize=(10, 8))\nsns.heatmap(corr, cmap='coolwarm', annot=True, fmt=\".2f\")\nplt.xticks(range(len(corr.columns)), corr.columns);\nplt.yticks(range(len(corr.columns)), corr.columns)\nplt.show()","9078e011":"bins = (2, 6.5, 8)\nlabels = ['bad', 'good']\nds['quality'] = pd.cut(x = ds['quality'], bins = bins, labels = labels)","33938332":"ds['quality'].value_counts()","293ed908":"labelencoder_y = LabelEncoder()\nds['quality'] = labelencoder_y.fit_transform(ds['quality'])","ad9cddab":"ds.head()","84729349":"x = ds.drop(['quality'], axis=1)\ny=ds.loc[:,['quality']]","c2bd2baa":"x.head()","c958f59d":"y.head()","296f45d3":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 50)","bebbab74":"print(\"Shape of X_train: \",x_train.shape)\nprint(\"Shape of X_test: \", x_test.shape)\nprint(\"Shape of y_train: \",y_train.shape)\nprint(\"Shape of y_test\",y_test.shape)","cb94e0f2":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train_scaled = sc.fit_transform(x_train)\nx_test_scaled = sc.transform(x_test)","6d8ede62":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nlr = LogisticRegression()\nlr.fit(x_train_scaled, y_train)\nlr_predict = lr.predict(x_test_scaled)","857bfa84":"lr_conf_matrix = confusion_matrix(y_test, lr_predict)\nlr_acc_score = accuracy_score(y_test, lr_predict)\nprint(lr_conf_matrix)\nprint(lr_acc_score*100)","b0d70c4d":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(x_train_scaled,y_train)\ndt_predict = dt.predict(x_test_scaled)","d396ada7":"dt_conf_matrix = confusion_matrix(y_test, dt_predict)\ndt_acc_score = accuracy_score(y_test, dt_predict)\nprint(dt_conf_matrix)\nprint(dt_acc_score*100)","f3f34d83":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train_scaled,y_train)\nnb_predict=nb.predict(x_test_scaled)","ee67d5b7":"nb_conf_matrix = confusion_matrix(y_test, nb_predict)\nnb_acc_score = accuracy_score(y_test, nb_predict)\nprint(nb_conf_matrix)\nprint(nb_acc_score*100)","06b7b6aa":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\nrf.fit(x_train_scaled, y_train)\nrf_predict=rf.predict(x_test_scaled)","437e336b":"rf_conf_matrix = confusion_matrix(y_test, rf_predict)\nrf_acc_score = accuracy_score(y_test, rf_predict)\nprint(rf_conf_matrix)\nprint(rf_acc_score*100)","bcffefe3":"from sklearn.svm import SVC","44136ace":"lin_svc = SVC()\nlin_svc.fit(x_train_scaled, y_train)\nlin_svc=rf.predict(x_test_scaled)","5bcc8502":"lin_svc_conf_matrix = confusion_matrix(y_test, rf_predict)\nlin_svc_acc_score = accuracy_score(y_test, rf_predict)\nprint(lin_svc_conf_matrix)\nprint(lin_svc_acc_score*100)","eeb06992":"# **About Dataset**","f77ad7d8":"# **Data Visualization**","f4adf41d":"By using Logistic Regression, accuracy is 91.25%.","0d414806":"* **fixed acidity**: most acids involved with wine or fixed or nonvolatile\n* **volatile acidity**: the amount of acetic acid in wine\n* **citric acid**: found in small quantities, citric acid can add 'freshness' and flavor to wines\n* **residual sugar**: the amount of sugar remaining after fermentation stops\n* **chlorides**: the amount of salt in the wine\n* **free sulfur dioxide**: the free form of SO2 exists in equilibrium between molecular SO2 (as a dissolved gas) and bisulfite ion\n* **total sulfur dioxide**: amount of free and bound forms of S02\n* **density**: the density of water is close to that of water depending on the percent alcohol and sugar content\n* **pH**: describes how acidic or basic a wine is on a scale from 0 (very acidic) to 14 (very basic)\n* **sulphates**: a wine additive which can contribute to sulfur dioxide gas (S02) levels\n* **alcohol**: the percent alcohol content of the wine\n* **quality**: output variable (based on sensory data, score between 0 and 10)","3a5e72dd":"**Alcohol vs Quality**","3286a8ad":"**Random Forests**","32c3b260":"# **Loading Libraries**","36328c0f":"**Density vs Quality**","a1cc4baf":"By using Decision Tree Classifier, accuracy is 91.5625%.","c1d7fad2":"By using Random Forests, accuracy is 96.5625%","a6aba8b5":"# **Loading Dataset**","23c6f597":"**Logistic Regression**","bf351ca3":"**Sulphates vs Quality**","ae6ef063":"By using SVM, accuracy is 96.5625%","22d556d0":"**Decision Trees**","f88859b3":"**Free Sulfur Dioxide vs Quality**","1c50ec83":"Lets change the quality column of dataset to:\n* 0 - bad\n* 1 - good ","c510be8a":"**Splitting dataset for training and testing.**","bcbe3ff7":"**Naive Bayes**","0a088f20":"# **Predictions**","25ddf8e0":"We will use different algorithms and check which algorithm is giving best accuracy.\n* Logistic Regression\n* Decision Trees\n* Naive Bayes\n* Random Forests\n* SVM","7b7eea8f":"**Total Sulfur Dioxide vs Quality**","c2e2739f":"**THANK YOU**","c6f276be":"**pH vs Quality**","41bc2666":"**Heatmap**","d4cd30f6":"**Citric Acid vs Quality**","17498d79":"**Chlorides vs Quality**","5c951cc6":"**Fixed Acidity vs Quality**","b7bae2bc":"So Random Forests and SVM are giving good accuracy.","9df39f74":"Let see counts for different qualities of wines.","98942072":"By using Naive Bayes, accuracy is 90%.","79b5e90d":"**Volatile Acidity vs Quality**","c68a6b97":"Now our dataset is ready for predictions. Further we will break the datasets into 2 parts:\n* x - containing all input columns of original dataset.\n* y - containing output column of original dataset.","11ef9b78":"**Support Vector Machine (SVM)**","5d202e9f":"Residual Sugar vs Quality"}}