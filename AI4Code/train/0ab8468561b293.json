{"cell_type":{"d7e4a254":"code","87ee8e6f":"code","2f5cd5db":"code","52d843da":"code","3fdf21ec":"code","9b4cf826":"code","11e0fe6a":"code","88031793":"code","db89caff":"code","908959e6":"code","ab77f76b":"code","e7a25f75":"code","5126d9b3":"code","bbc2d420":"code","6f77c760":"code","4346ebb1":"code","9d1efbe8":"markdown","6822dd73":"markdown","3832ea14":"markdown","4fc1ff90":"markdown","6a9a1c69":"markdown","e928e0d2":"markdown","09d9ee22":"markdown","bdebbff8":"markdown","25455265":"markdown","1f7710d3":"markdown","f901a759":"markdown","f4130029":"markdown","0e85f7bc":"markdown","288451c7":"markdown","2922aacb":"markdown","f8e9dfc2":"markdown","f3b62d18":"markdown","4adf6f0d":"markdown"},"source":{"d7e4a254":"from math import sqrt\nfrom numpy import concatenate\nfrom matplotlib import pyplot\nimport pandas as pd\nfrom datetime import datetime\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_squared_error\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport numpy as np\nimport seaborn as sns\npy.init_notebook_mode(connected=True)\n%matplotlib inline","87ee8e6f":"data = pd.read_csv(filepath_or_buffer=\"..\/input\/btcusdkraken\/BTCUSDKRAKEN\", index_col=\"Date\")","2f5cd5db":"data.info()","52d843da":"data.head()","3fdf21ec":"data.tail()","9b4cf826":"btc_trace = go.Scatter(x=data.index, y=data['Weighted Price'], name= 'Price')\npy.iplot([btc_trace])","11e0fe6a":"data['Weighted Price'].replace(0, np.nan, inplace=True)\ndata['Weighted Price'].fillna(method='ffill', inplace=True)","88031793":"btc_trace = go.Scatter(x=data.index, y=data['Weighted Price'], name= 'Price')\npy.iplot([btc_trace])","db89caff":"from sklearn.preprocessing import MinMaxScaler\nvalues = data['Weighted Price'].values.reshape(-1,1)\nvalues = values.astype('float32')\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaled = scaler.fit_transform(values)","908959e6":"train_size = int(len(scaled) * 0.7)\ntest_size = len(scaled) - train_size\ntrain, test = scaled[0:train_size,:], scaled[train_size:len(scaled),:]\nprint(len(train), len(test))","ab77f76b":"def create_dataset(dataset, look_back=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset) - look_back):\n        a = dataset[i:(i + look_back), 0]\n        dataX.append(a)\n        dataY.append(dataset[i + look_back, 0])\n    print(len(dataY))\n    return np.array(dataX), np.array(dataY)","e7a25f75":"look_back = 1\ntrainX, trainY = create_dataset(train, look_back)\ntestX, testY = create_dataset(test, look_back)","5126d9b3":"trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))","bbc2d420":"model = Sequential()\nmodel.add(LSTM(100, input_shape=(trainX.shape[1], trainX.shape[2])))\nmodel.add(Dense(1))\nmodel.compile(loss='mae', optimizer='adam')\nhistory = model.fit(trainX, trainY, epochs=300, batch_size=100, validation_data=(testX, testY), verbose=0, shuffle=False)","6f77c760":"pyplot.plot(history.history['loss'], label='train')\npyplot.plot(history.history['val_loss'], label='test')\npyplot.legend()\npyplot.show()","4346ebb1":"yhat = model.predict(testX)\npyplot.plot(yhat, label='predict')\npyplot.plot(testY, label='true')\npyplot.legend()\npyplot.show()","9d1efbe8":"#### Running the LSTM model with 300 epochs","6822dd73":"#### Make prediction using textX and plotting line graph against testY","3832ea14":"#### Read data set","4fc1ff90":"### Using `Weighted Price` as a feature to train the LSTM model ","6a9a1c69":"#### View data info","e928e0d2":"#### Plot new line graph again on `Weighted Price` with newly filled values","09d9ee22":"#### Import necessary library needed for the model training","bdebbff8":"#### Plot line graph to show amount loss according the the epoch","25455265":"#### View data rows","1f7710d3":"#### Fill value 0 data points on `Weighted Price` with NAN and then use ffill method to fill values","f901a759":"#### Plot line graph base on `Weighted Price`","f4130029":"#### Create function for creating dataset with look back","0e85f7bc":"#### Check latest date of data","288451c7":"# Bitcoin Time Series Prediction with LSTM","2922aacb":"#### Generate dataset for trainX, trainY, testX, testY","f8e9dfc2":"#### Reshape X for model training","f3b62d18":"#### Split 70% of data for training and 30% for testing","4adf6f0d":"#### Use MinMaxScaler to normalize `Weighted Price` to range from 0 to 1"}}