{"cell_type":{"d091cb00":"code","fdd855c0":"code","736c5071":"code","7a127815":"code","a4422376":"code","517b1d0f":"code","10425e2b":"code","7ec25f7c":"code","4b292369":"code","13a9922e":"code","8f0a9e89":"code","8e4b4411":"code","59576d2f":"code","4f702f36":"code","b2fceea0":"code","f011d67e":"code","d18eaf91":"markdown","2b709d61":"markdown","31bd5f25":"markdown","a9362af1":"markdown","df84c9f1":"markdown","de79ed8c":"markdown","6fc36f33":"markdown"},"source":{"d091cb00":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdd855c0":"import pandas as pd\nweather = pd.read_csv('..\/input\/weather-dataset-in-antwerp-belgium\/weather_in_Antwerp.csv', ';')\npower_info = pd.read_csv('..\/input\/solarpanelspower\/PV_Elec_Gas2.csv')\ndisplay(weather.head())\npower_info.head()","736c5071":"power_info = power_info[['Unnamed: 0','cum_power']]\npower_info = power_info.rename(columns= {'Unnamed: 0': 'date'})\npower_info.info()","7a127815":"power_info.date = pd.to_datetime(power_info.date)\npower_info.set_index(['date'], inplace=True)       #change the index\npower_info.head()","a4422376":"power_info = power_info.shift(periods=-1, freq='D', axis=0)   #Correcting the measure error\n                                                        # (mentioned in Frank's data description)\n    \n#Calculating daily power, because we have the cumulative one\ntemp = power_info.shift(periods=1, freq='D', axis=0)\npower_info['day_power'] = power_info.loc[:, 'cum_power'] - temp.loc[:, 'cum_power']\npower_info.drop(['cum_power'], axis=1, inplace=True)\npower_info.day_power.iloc[0] = 5\npower_info.head()","517b1d0f":"import seaborn as sns\nfrom matplotlib import pyplot as plt\n\nsns.set()\npower_index= power_info.reset_index()\npower_index.plot(kind='line', x='date', y='day_power', figsize=(15,5))\n\nplt.title('Daily Power Produced By Solar Panels')\nplt.ylabel('Daily Power')\nplt.show()","10425e2b":"def clear_wind(obj):\n    if isinstance(obj, str):\n        if obj == 'No wind':\n            obj = 0\n        else:\n            obj = obj.replace(' km\/h', '')\n    return obj\ndef trans_from_objects(weather):\n    weather.drop(['Unnamed: 0', 'visibility'], axis =1, inplace=True)\n    weather.barometer = weather.barometer.apply(lambda x: x.replace(' mbar', '') \n                                    if isinstance(x, str) else x).astype(float)\n    \n    weather.humidity = weather.humidity.apply(lambda x: x.replace('%', '') \n                                    if isinstance(x, str) else x).astype(float)\n    weather.temp = weather.temp.apply(lambda x: x.replace('\u00b0C', '') \n                                    if isinstance(x, str) else x).astype(float)\n    weather.wind = weather.wind.apply(clear_wind).astype(float)\n    \n    return weather\n\n#transfer dataframe from objects dtype to numbers\nweather_tran = trans_from_objects(weather)\nweather_tran.head()","7ec25f7c":"weather_tran.info()","4b292369":"#Form the date column \ndef create_date(weather):    \n    weather['date'] = weather.apply(lambda row:\n                                    f'{row.year}-{row.month}-{row.day} {row.clock}', axis=1)\n    weather.date = pd.to_datetime(weather.date)\n    return weather.drop(['clock', 'year', 'month', 'day'], axis = 1)\n\nweather_pretty = create_date(weather_tran)\nweather_pretty.head()","13a9922e":"#to take the average of each day, so we have daily weather. Because we have the daily cum_power not hourly\nimport datetime \ndef take_average_weather(weather):\n    average_weather = pd.DataFrame(columns = ['temp', 'weather', 'wind', 'humidity', 'barometer',\n                                              'date'])\n\n    temp, wind, humidity, barometer, counter= [0]*5\n    for i in range(len(weather)):\n        if (weather.loc[i, 'date'].time() ==datetime.time(0, 20)) and (i!=0):\n            average_weather = average_weather.append({\n                'temp':temp\/counter,\n                'wind':wind\/counter,\n                'humidity':humidity\/counter,\n                'barometer':barometer\/counter,\n                'date':pd.to_datetime(weather.loc[i-1, 'date'].date()),\n                'weather':weath\n            }, ignore_index=True)\n            temp, wind, humidity, barometer, counter= [0]*5\n            \n        #Here we'll take the weather status in the most powerful hour (15:20), because you can't take averge \n                                                                                                    #here.\n        if (weather.loc[i, 'date'].time()==datetime.time(15,20)):\n            weath = weather.loc[i, 'weather']\n        counter += 1\n        temp += weather.loc[i, 'temp']\n        wind += weather.loc[i, 'wind']\n        humidity += weather.loc[i, 'humidity']\n        barometer += weather.loc[i, 'barometer']\n        \n    return average_weather\naverage_weather = take_average_weather(weather_pretty)","8f0a9e89":"def merge_weatherANDpower():\n    dataset = average_weather.merge(power_info, on=['date'])\n    return dataset.set_index('date')\nfinal_dataset = merge_weatherANDpower()\nfinal_dataset.head()","8e4b4411":"import seaborn as sns\nweather_counts = final_dataset.weather.value_counts()\nplt.figure(figsize=(16,5))\nsns.barplot(weather_counts.index, weather_counts.values, alpha=0.8)\nplt.xticks(rotation=90)\nplt.title('Weather Status')\nplt.xlabel('Status')\nplt.ylabel('Number Of Repetition')\nplt.show() # WHAT THE HECK! Let's reduce this amount of redundant information","59576d2f":"#I need this, so I can deal with \"loc\"\nfinal_dataset = final_dataset.reset_index()\n\n#Delete all first parts of two-part status, and highligh only the necessary categories. \n#why the first part? Because we don't care about the raining or snowing weather, we care more about \n#status of clouds\nfor i in range(len(final_dataset)):\n    weather_list = final_dataset.loc[i, 'weather'].split('.')\n    if len(weather_list) > 2:\n        final_dataset.loc[i,'weather'] = weather_list[1].strip()\n    elif len(weather_list) ==2:\n        final_dataset.loc[i, 'weather'] = weather_list[0].strip()\nfinal_dataset.head()\n\n#get the index back to \"date\"\nfinal_dataset.set_index('date', inplace=True)","4f702f36":"from matplotlib import pyplot as plt\nfinal_dataset.weather.value_counts()\nweather_counts = final_dataset.weather.value_counts()\n\nplt.figure(figsize=(12,6))\nsns.barplot(weather_counts.index, weather_counts.values, alpha=0.8)\nplt.xticks(rotation=33)\nplt.title('Weather Status')\nplt.xlabel('Status')\nplt.ylabel('Number Of Repetition')\nplt.show()","b2fceea0":"final_dataset.info()","f011d67e":"final_dataset.hist(figsize=(16,12))\nplt.show()","d18eaf91":"# Now, Go and build you ML model","2b709d61":"# **Let's clean solar power table first:**","31bd5f25":"Use final_dataset dataframe, remove the nan value, and that's it! Build your model","a9362af1":"The last version was deleted by mistake. Sorry for that. However, this one contains all what that contained and much more :)","df84c9f1":"# **To clean weather table now:**","de79ed8c":"We have date column as \"object\" dtype, to transform it to pandas' datetime dtype we do: ","6fc36f33":"# *By forking this notebook you will be able to start building your machine learning model, without need to merge tables or clean*"}}