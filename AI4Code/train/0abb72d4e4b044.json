{"cell_type":{"d149350d":"code","9d9b1b4e":"code","382c1ec9":"code","9582e0f2":"code","3773b58c":"code","cd5b4600":"code","352419e2":"code","bb84399c":"code","d9495903":"code","16e6fcdf":"code","490b7e9a":"code","1aba22cf":"code","b4e68e52":"code","de58eaf9":"code","addd4539":"code","8cf4bbc0":"code","5ae1f0aa":"code","41f0dbdc":"code","f4c49d3e":"code","36a097a4":"markdown","70267cc0":"markdown","0f04099b":"markdown","1564f629":"markdown","3f11f906":"markdown","7212481a":"markdown","46403e9b":"markdown","41918d57":"markdown","7ccf84b8":"markdown","e9c5bd7d":"markdown"},"source":{"d149350d":"import warnings  \nwarnings.filterwarnings('ignore')\nimport os\nimport numpy as np\nimport pandas as pd\nimport math \nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import export_graphviz \nfrom sklearn.metrics import roc_curve, auc \nfrom sklearn.metrics import classification_report \nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9d9b1b4e":"dataset = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","382c1ec9":"dataset.describe()","9582e0f2":"dataset.drop(['PassengerId','Name','Ticket','Cabin'],axis=1,inplace=True) \n","3773b58c":"dataset.isnull().sum()","cd5b4600":"dataset['Age'].fillna(dataset['Age'].median(), inplace = True)\n\ndataset[\"Embarked\"] = dataset[\"Embarked\"].fillna(\"S\")\n\ndataset.isnull().sum()","352419e2":"sns.countplot(x='Survived', hue='Sex', data=dataset)","bb84399c":"sns.countplot(x='SibSp', hue='Survived', data=dataset)","d9495903":"sns.countplot('Parch' , hue = 'Survived' , data = dataset)","16e6fcdf":"sns.countplot(x='Embarked', hue='Survived', data=dataset)","490b7e9a":"sns.countplot(x='Pclass', hue='Survived', data=dataset)","1aba22cf":"dataset = pd.get_dummies(dataset)","b4e68e52":"y = dataset['Survived'].values \n\nX = dataset.drop(['Survived'],axis=1)                 \n","de58eaf9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n\n\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n","addd4539":"\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\n\n\n\nclassifiers =  [\n       ['Logistic Regression Classifier :', LogisticRegression()] ,\n       ['Decision Tree Classifier :', DecisionTreeClassifier()] ,\n       ['Random Forest Classifier :', RandomForestClassifier()] ,\n       ['Gradient Boosting Classifier :', GradientBoostingClassifier()] ,\n       ['AdaBoost Classifier :', AdaBoostClassifier()] ,\n       ['XGB Classifier :', XGBClassifier()] ,\n       ['Extra Tree Classifier :', ExtraTreesClassifier()] ,\n       ['K-Neighbors Classifier :', KNeighborsClassifier()] ,  \n       ['Naive Bayes :' , GaussianNB()] ,\n       ]\n\n\nconfusion_tab = []\n\nfor name,model in classifiers:    \n\n    model = model\n    \n    model.fit(X_train,y_train)\n    \n    y_pred = model.predict(X_test)\n        \n\n    print('-----------------------------------')\n    print(name)\n    print('Accuracy Score ', accuracy_score( y_test, y_pred))\n    print(\"f1_score: \",f1_score( y_test, y_pred))\n    print(\"precision_score: \", precision_score( y_test, y_pred))\n    print(\"recall_score: \", recall_score( y_test, y_pred))\n    print(\"ROC AUC: \", roc_auc_score( y_test, y_pred))\n    print('---------------------------------')\n    confusion = confusion_matrix( y_test, y_pred)\n    confusion_tab.append(confusion)    \n    plt.subplot(2,2,1)\n    plt.title(name)\n    sns.heatmap(confusion, annot=True , cmap=\"Blues\" , fmt=\"d\" , cbar=False , annot_kws = {\"size\": 24})\n    plt.show()\n\n","8cf4bbc0":"n_estimators = [int(x) for x in np.linspace(start = 1, stop = 100, num = 10 )]  \nmax_depth = [int(x) for x in np.linspace(1, 100, num = 10)] \nmax_depth.append(None)\n\nmin_samples_split = [2, 5, 10]     \nmin_samples_leaf = [1, 2, 4]       \nmax_features = ['auto', 'sqrt' , 'log2']    \nbootstrap = [True, False]         \nrandom_state = [42]                \n\n\n\n\n\nparam_distributions = dict(n_estimators = n_estimators,\n                   max_depth = max_depth, \n                   min_samples_split = min_samples_split,\n                   min_samples_leaf = min_samples_leaf,\n                   max_features = max_features, \n                   bootstrap = bootstrap,\n                   random_state = random_state ,\n                   )\n\n\n\n\nestimator = ExtraTreesClassifier()     \n\n                         \nfrom sklearn.model_selection import RandomizedSearchCV\n\n\n\n\nRandomCV = RandomizedSearchCV(estimator=estimator,          \n                            param_distributions=param_distributions,\n                            n_iter = 50,\n                            cv = 10,\n                            scoring = 'precision',\n                            verbose=1, \n                            n_jobs=-1,\n                            )\n\n\n\nhyper_model = RandomCV.fit(X_train, y_train)\n\nprint('Best Score: ', hyper_model.best_score_)  \nprint('Best Params: ', hyper_model.best_params_)","5ae1f0aa":"hyper_model.best_estimator_.fit(X_train,y_train) \n\ny_pred_hyper = hyper_model.best_estimator_.predict(X_test) \n\n\nprint('Accuracy Score ', accuracy_score( y_test, y_pred_hyper))\nprint(\"f1_score: \",f1_score( y_test, y_pred_hyper))\nprint(\"precision_score: \", precision_score( y_test, y_pred_hyper))\nprint(\"recall_score: \", recall_score( y_test, y_pred_hyper))\nprint(\"ROC AUC: \", roc_auc_score( y_test, y_pred_hyper))\n\nconfusion_hyper = confusion_matrix(y_test ,y_pred_hyper )\n\nplt.subplot(2,3,1)\nplt.title(\"Hyper Model Confusion Matrix\")\nsns.heatmap(confusion_hyper,annot=True,fmt=\"d\",cbar=False, annot_kws={\"size\": 24})","41f0dbdc":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nclassifier = Sequential()\n\nclassifier.add(Dense(units = 20, kernel_initializer = 'uniform', activation = 'relu', input_dim = 10))\n\nclassifier.add(Dense(units = 10, kernel_initializer = 'uniform', activation = 'relu'))\n\nclassifier.add(Dense(units = 10, kernel_initializer = 'uniform', activation = 'relu'))\n\nclassifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n\n\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\n\nclassifier.fit(X_train, y_train, batch_size = 1, epochs = 200)  ","f4c49d3e":"y_pred_ANN = classifier.predict(X_test)\n\ny_pred_ANN = [1 if each > 0.5 else 0 for each in y_pred_ANN]\ny_pred_ANN = np.array(y_pred_ANN)\n\n  \nprint('Accuracy Score ', accuracy_score( y_test, y_pred_ANN))\nprint(\"f1_score: \",f1_score( y_test, y_pred_ANN))\nprint(\"precision_score: \", precision_score( y_test, y_pred_ANN))\nprint(\"recall_score: \", recall_score( y_test, y_pred_ANN))\nprint(\"ROC AUC: \", roc_auc_score( y_test, y_pred_ANN))\n\nconfusion_ANN = confusion_matrix(y_test, y_pred_ANN)   \n\nplt.subplot(2,3,1)\nplt.title(\"ANN Confusion Matrix\")\nsns.heatmap(confusion_ANN,annot=True,fmt=\"d\",cbar=False, annot_kws={\"size\": 24})","36a097a4":"<img style=\"float: left;\" src=\"http:\/\/3.bp.blogspot.com\/-cRW46iETTJw\/VPIc1vbEWWI\/AAAAAAAAAUU\/3Hdq70uDl6U\/s1600\/il%2Bmare%2Bdi%2Bghiaccio%2B(1).jpg\" width=\"700px\"\/>","70267cc0":"***Survived***","0f04099b":"***Parch***","1564f629":"***Embarked***","3f11f906":"# ***ANN***","7212481a":"***Pclass***","46403e9b":"***The Sea of Ice - Caspar David Friedrich - 1824***","41918d57":"## ***Titanic***\n\n- EDA\n- Classification Pipeline\n- RandomGridCV\n- ANN","7ccf84b8":"***SibSp***","e9c5bd7d":"Best Model  --> ExtraTreeClassifier"}}