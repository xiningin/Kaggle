{"cell_type":{"b4387e9c":"code","3bbf52fe":"code","fecfac16":"code","99542401":"code","22ba2c4f":"code","a4e3a7b5":"code","ae7e2650":"code","69739785":"code","841b409a":"code","fcb6675e":"code","3aef6725":"code","9f2f74d2":"code","c4c81874":"code","4375b977":"code","670a2d7c":"code","127f112a":"code","5ccff444":"code","7b6f1b7e":"code","8ef305ab":"code","1be6433a":"code","f9f3e6e0":"code","0c8295f1":"code","3f4761b1":"code","62c58071":"code","251b2776":"code","61f66906":"code","74eb6a09":"code","e898011b":"code","11bfbfff":"code","b03fe2b9":"code","bb55f1ea":"code","28f7eb7c":"code","a173e3ca":"code","4fa4a8e6":"code","eb081a87":"code","26e69413":"code","370e50e5":"code","171bdf91":"code","f9e34a1a":"code","59bca18a":"code","1e583fa3":"code","e70f0a4f":"code","f66be4c1":"code","8f9f961f":"code","7f96aa99":"code","eabb9ad9":"code","234d0672":"code","824061a7":"code","f9602704":"code","68dd67a7":"code","b5f58a8c":"code","673c41c7":"code","0c2915b6":"code","ea79b846":"code","b4bd1033":"code","3adb14ac":"code","ea407b41":"code","c858d42a":"code","ed09ad84":"code","a1519ca3":"code","e45137bc":"code","10a581ae":"code","4761b877":"code","16e99630":"code","06eec3d8":"code","a8a4b592":"code","fabfe05b":"code","cde29519":"code","9e8ba8c1":"code","1bae918c":"code","edd18c11":"code","10500b2d":"code","1d28e0d9":"code","652f32cf":"code","833e6487":"code","94a8c2a0":"code","b32699aa":"code","caa65ca3":"code","97610741":"code","0b1d8b66":"code","1bf7962b":"code","b7b49665":"code","5f70f80c":"code","50a0981c":"code","5cb36ab4":"code","d1e2700c":"code","e53e6714":"code","53826267":"code","0dc51bee":"code","b027810c":"code","2ecdc520":"code","dd32152b":"code","6bcb62ec":"code","aba98697":"code","7ab1adbc":"code","db211e30":"code","27699980":"code","7fbaee3d":"code","f895b619":"code","35d52cfc":"code","3afcc5da":"code","240bb504":"code","2ce2d3c6":"code","651283df":"code","76e7bb20":"code","a77f84d6":"code","9cc5acd2":"code","0ddbceec":"code","288e44b1":"code","094dfb9b":"code","bf3fae3b":"code","0d80b2a9":"code","65abf52b":"code","e8484897":"code","253feac9":"code","984863fb":"code","5d25e338":"code","0d0cec1c":"code","b6d6fb6d":"code","54387bdb":"code","434265bb":"code","d9ead70a":"code","a7313e2a":"code","26bbfc43":"code","3bd787d1":"code","607ececc":"code","bd02ad13":"code","9b25b560":"code","afc20f69":"code","0a597bb9":"code","7737d45c":"code","424d07ba":"code","72be2ba4":"code","c2d3d189":"code","46490bc8":"code","9157802c":"code","309b4b62":"code","0123a433":"code","fe28ca07":"code","dec407fa":"code","0b89c261":"code","293fd5fe":"code","f8594ecd":"code","c65f184c":"code","31374627":"code","fd0ec530":"code","17eae131":"code","b0cb7f6c":"code","e47f0bf6":"markdown","9b94b0d1":"markdown","7ce6e940":"markdown","88cef95c":"markdown","6938ce5d":"markdown","8d433468":"markdown","5f0a5f44":"markdown","99373272":"markdown","47200a64":"markdown","86797df8":"markdown","b6ddb441":"markdown","b9050cb7":"markdown","246377d1":"markdown","b181ba2f":"markdown","87f2dd33":"markdown","e7297ee4":"markdown","cc562dfd":"markdown","233b0c5e":"markdown","49687b9a":"markdown","c348da68":"markdown","8540f92e":"markdown","ed9fdbfd":"markdown","94543db5":"markdown","cee43ffd":"markdown","596180fb":"markdown","46521825":"markdown","6a6d0251":"markdown","25efaa77":"markdown","de56a565":"markdown","88b6dbc5":"markdown","b17344f4":"markdown","8697c6a8":"markdown","155982d0":"markdown","c6316de5":"markdown","9c3d4a9b":"markdown","2aae51ac":"markdown","b3422929":"markdown","8b4e22d6":"markdown","8d77a74e":"markdown","ad486fd5":"markdown","694311d6":"markdown","7e2f7860":"markdown","94ba8333":"markdown","d1feb27c":"markdown","9e43c2aa":"markdown","ee591c34":"markdown","3e84f4f4":"markdown","36341078":"markdown","bdce2afb":"markdown","c178ab38":"markdown","66a55dd2":"markdown","092bee15":"markdown"},"source":{"b4387e9c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\n\nimport re\nimport datetime\nfrom datetime import datetime, timedelta\nfrom itertools import combinations #\u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430 \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430\nfrom scipy.stats import ttest_ind #\u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430 \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430\nfrom sklearn.preprocessing import StandardScaler #\u0434\u043b\u044f std \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\nfrom sklearn.preprocessing import MinMaxScaler #\u0434\u043b\u044f minmax \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\nfrom textblob import TextBlob\nimport warnings; warnings.simplefilter('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n        # Any results you write to the current directory are saved as output.","3bbf52fe":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","fecfac16":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","99542401":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\n# \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 (train, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438)\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\n# \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 (test, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438)\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","22ba2c4f":"df_train.info()","a4e3a7b5":"df_train.info()","ae7e2650":"df_test.info()","69739785":"df_test.head(5)","841b409a":"sample_submission.head(5)","fcb6675e":"sample_submission.info()","3aef6725":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","9f2f74d2":"data.info()","c4c81874":"data.sample(5)","4375b977":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\ndef func_(df, col, with_bins):\n    \n    #\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 NaN \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u0447\u043a\u0430     \n    df[col] = df[col].apply(lambda x: None if str(x).strip()=='' else x)\n    \n    display(pd.DataFrame(df[col].value_counts()))\n    print(\"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435\", col, \"\u0431\u043e\u043b\u0435\u0435 10 \u0440\u0430\u0437:\", (df[col].value_counts()>10).sum())\n    print(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439:\", df[col].nunique())\n    df.loc[:, [col]].info()\n    \n    if with_bins == 1:\n    \n        fig = plt.figure()\n        axes = fig.add_axes([0, 0, 1, 1])\n        axes.hist(df[col], bins = int(df[col].median()),color = 'green') \n        #axes.set_title('\u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0441\u0447\u0435\u0442\u0430')\n        axes.set_ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e')\n        axes.set_xlabel(col)  \n        \n    else: # \u0431\u0435\u0437 bins \u0440\u0430\u0432\u043d\u043e\u043c\u0443 \u043c\u0435\u0434\u0438\u0430\u043d\u0435\n        fig = plt.figure()\n        axes = fig.add_axes([0, 0, 1, 1])\n        axes.hist(df[col], color = 'green')        \n        axes.set_ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e')\n        axes.set_xlabel(col)  ","670a2d7c":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u0439 \u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\ndef func_quantile(df, col):   \n    \n    IQR = df[col].quantile(q=0.75) - df[col].quantile(0.25)\n    perc25 = df[col].quantile(0.25)\n    perc75 = df[col].quantile(0.75)\n    print('25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc25), '75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc75), \"IQR: {}, \".format(IQR), \"\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{f}, {l}].\".format(f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR))\n    \n    # \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n    print(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435\",col,\":\",df[df[col]<perc25 - 1.5*IQR][col].count() + df[df[col]>perc75 + 1.5*IQR][col].count())\n    df[col].loc[df[col].between(perc25 - 1.5*IQR, perc75 + 1.5*IQR)].hist(bins = 20, label = 'IQR')\n    plt.legend()  ","127f112a":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u043c \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u043c\ndef filling_quantile(df, col, change_quant): #quant=0.25 \u0438\u043b\u0438 0.75\n    IQR = df[col].quantile(q=0.75) - df[col].quantile(0.25)\n    perc25 = df[col].quantile(0.25)\n    perc75 = df[col].quantile(0.75)\n    high_border = perc75 + 1.5*IQR\n    low_border = perc25 - 1.5*IQR\n    if change_quant == 0.75:\n        df[col] = df[col].apply(lambda x: high_border if x>high_border else x)\n    elif change_quant == 0.25:\n        df[col] = df[col].apply(lambda x: low_border if x<low_border else x)\n    else:\n        print('\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c 0.25 \u0438\u043b\u0438 0.75 :)')","5ccff444":"#\u0421\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043e\u043a, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ndef get_boxplot(column):\n    fig, ax = plt.subplots(figsize = (8, 4))\n    sns.boxplot(x=column, y='Rating', \n                data=data.loc[data.loc[:, column].isin(data.loc[:, column].value_counts().index[:20])],\n               ax=ax)\n    plt.xticks(rotation=45)\n    ax.set_title('Boxplot for ' + column)\n    plt.show()","7b6f1b7e":"def get_stat_dif_2(column):\n    \n    cols = data[data['sample'] == 1].loc[:, column].value_counts().index[:]\n    combinations_all = list(combinations(cols, 2))\n    # \u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0435\u0437 NA \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430, \n    # \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c, \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0432 0 \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043e\u043a\n    stud_stat = data[data['sample'] == 1]\n    for comb in combinations_all:\n        if ttest_ind(stud_stat.loc[data[data['sample'] == 1].loc[:, column] == comb[0], 'Rating'],\n                     stud_stat.loc[data[data['sample'] == 1].loc[:, column] == comb[1], 'Rating']).pvalue <= 0.05\/len(combinations_all):  # \u0443\u0447\u043b\u0438 \u043f\u043e\u043f\u0440\u0430\u0432\u043a\u0443 \u0411\u043e\u043d\u0444\u0435\u0440\u043e\u043d\u0438\n            # print('\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438', column)\n            pass\n        else:\n            return column \n            break","8ef305ab":"def get_stat_dif(column):\n    cols = data.loc[:, column].value_counts().index[:10]\n    combinations_all = list(combinations(cols, 2))\n    for comb in combinations_all:\n        if ttest_ind(data.loc[data.loc[:, column] == comb[0], 'Rating'], \n                        data.loc[data.loc[:, column] == comb[1], 'Rating']).pvalue \\\n            <= 0.05\/len(combinations_all): # \u0423\u0447\u043b\u0438 \u043f\u043e\u043f\u0440\u0430\u0432\u043a\u0443 \u0411\u043e\u043d\u0444\u0435\u0440\u043e\u043d\u0438\n            print('\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438', column)\n        #    break\n        else:\n            return column\n            break","1be6433a":"#\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0435\u0434\u0438\u043d\u0438\u0447\u043a\u043e\u0439, \u0442\u0430\u043c \u0433\u0434\u0435 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 Number of Reviews \u043d\u0435\u0442 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\ndata['isNAN'] = pd.isna(data['Number of Reviews']).astype('uint8')\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\nmedian = data.groupby('City')['Number of Reviews'].median()\ndata['Number_of_Reviews'] = data[data['isNAN'] > 0].City.apply(\n    lambda x: round(median.loc[x]))\n","f9f3e6e0":"data['Number of Reviews'].value_counts().min()","0c8295f1":"data['Number_of_Reviews'].value_counts().min()","3f4761b1":"data['Number of Reviews'].fillna(0, inplace=True)\ndata['Number_of_Reviews'].fillna(0, inplace=True)\ndata['Number of Reviews'] = data['Number of Reviews'] + data['Number_of_Reviews']\n\n#\u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u0437\u044f\u043b\u0438, \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c\ndata.drop(['Number_of_Reviews'], axis = 1, inplace = True)","62c58071":"data[data['isNAN'] ==0]","251b2776":"data.nunique(dropna=False)","61f66906":"#Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435","74eb6a09":"func_(data,'Ranking',10)","e898011b":"func_quantile(data,'Ranking')","11bfbfff":"sns.boxplot(x= 'Ranking', data = data)","b03fe2b9":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e\ndata.loc[:,'Rating'].astype('float64').corr(data.loc[:,'Ranking']).astype('float64')","bb55f1ea":"sns.pairplot(data, vars = [\"Ranking\",\"Rating\"], kind = 'reg',diag_kind=\"kde\")","28f7eb7c":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0430 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0439 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c Q3\n#filling_quantile(data, 'Ranking',0.75)\n\n#\u041f\u0440\u0438 \u0437\u0430\u043c\u0435\u043d\u0435 - MAE \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442\u0441\u044f \u043d\u0430 0,2. \u0412\u0441\u0435 \u0442\u0430\u043a\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0433\u0440\u0443\u043f\u043f\u0430 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435. \u041d\u0435\u043b\u044c\u0437\u044f \u0435\u0435 \u0443\u0431\u0438\u0440\u0430\u0442\u044c. \n#\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0433\u0440\u0443\u043f\u043f\u044b.","a173e3ca":"def func(x):\n    if x > 972 and x < 5241:\n        return 1\n    elif x < 972:\n        return 2\n    else: return 3     ","4fa4a8e6":"data['Ranking_group'] = data['Ranking'].apply(func)","eb081a87":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e\ndata.loc[:,'Rating'].astype('float64').corr(data.loc[:,'Ranking_group']).astype('float64')","26e69413":"#\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0430\u043c\u043c\u0438-\u043f\u0435\u0440\u0435\u043c\u043d\u043d\u044b\u0435\ndata = pd.get_dummies(data, columns=['Ranking_group'], dummy_na=False)\n#\u041d\u0435\u043c\u043d\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0441\u044f MAE","370e50e5":"rest_count_in_city = data.groupby('City')['Restaurant_id'].count().reset_index()\nrest_count_in_city.sort_values(by = 'Restaurant_id',ascending=False)\nrest_count_in_city.rename(columns = {'Restaurant_id':'count_in_city'}, inplace = True)\nrest_count_in_city","171bdf91":"plt.rcParams['figure.figsize'] = (10,7)\ndf_train['Ranking'].hist(bins=100)","f9e34a1a":"df_train['City'].value_counts(ascending=True).plot(kind='barh')","59bca18a":"df_train['Ranking'][df_train['City'] =='London'].hist(bins=100)","1e583fa3":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\nfor x in (df_train['City'].value_counts())[0:10].index:\n    df_train['Ranking'][df_train['City'] == x].hist(bins=100)\nplt.show()","e70f0a4f":"data = data.merge(rest_count_in_city, on='City', how='left',sort=False)","f66be4c1":"data.head(5)","8f9f961f":"data.loc[:,['Restaurant_id','count_in_city','Ranking']]","7f96aa99":"data['Ranking_norm'] = data['Ranking']\/data['count_in_city']\n#C \u043d\u0438\u043c \u0445\u0443\u0436\u0435 MAE, \u0443\u0434\u0430\u043b\u044e \u043f\u043e\u0442\u043e\u043c \u043a\u0430\u043a \u043d\u0435\u043d\u0443\u0436\u043d\u0443\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0443","eabb9ad9":"# \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\nfor x in (data['City'].value_counts())[0:10].index:\n    data['Ranking_norm'][data['City'] == x].hist(bins=100)\nplt.show()","234d0672":"#\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0438\u043f \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438(\u0434\u043b\u044f \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430):\n\n#\u041f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e, \u043d\u043e \u043c\u0438\u043d \u043c\u0430\u043a\u0441 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c MAE\nscaler = MinMaxScaler()#StandardScaler()\nRanking_norm = scaler.fit_transform(data.loc[:,['count_in_city','Ranking']]) \n#Ranking_norm = scaler.fit_transform(data.loc[:,['Ranking']]) \nRanking_norm","824061a7":"df_norm_Ranking = pd.DataFrame(Ranking_norm,\n                  columns = ['Ranking_norm_1', 'Ranking_norm_2'])\n\ndf_norm_Ranking['City']=data ['City']\ndf_norm_Ranking","f9602704":"data['Ranking_norm_1'] = df_norm_Ranking['Ranking_norm_1']\ndata['Ranking_norm_2'] = df_norm_Ranking['Ranking_norm_2']","68dd67a7":"data.groupby('Restaurant_id')['Rating'].mean().hist()","b5f58a8c":"# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f, \u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e \u043d\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430, \u0430 \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430, \u043c\u043e\u0436\u0435\u0442 \u0441\u0435\u0442\u0435\u0432\u044b\u0435.\nlen(data['Restaurant_id'].value_counts())","673c41c7":"data.sample(5)","0c2915b6":"#\u041d\u0430\u0439\u0434\u0435\u043c \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b\nnetwork = (data['Restaurant_id'].value_counts()>2).reset_index()","ea79b846":"network_list = list(network[network.Restaurant_id == True]['index'])\n","b4bd1033":"df_network = network[network.Restaurant_id == True]","3adb14ac":"df_network['chain'] = '1'","ea407b41":"df_network.rename(columns = {\n                        'index':'Restaurant_id', \n                        'Restaurant_id':'True\/Not', \n                         }, inplace = True)","c858d42a":"df_network","ed09ad84":"df_network = df_network.drop(['True\/Not'], axis=1)\ndf_network","a1519ca3":"data.head()","e45137bc":"data = data.merge(df_network, on='Restaurant_id', how='left')\ndata['chain'].fillna(0, inplace=True) #\u0433\u0434\u0435 \u043d\u0435 \u0441\u0435\u0442\u044c, \u0441\u0442\u0430\u0432\u0438\u043c 0","10a581ae":"data.head()","4761b877":"data['chain'].value_counts()","16e99630":"get_boxplot('chain')","06eec3d8":"display(data['Price Range'].unique())\ndata['Price Range'].value_counts()","a8a4b592":"# \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"Price Range\"\ndata['isNAN'] = pd.isna(data['Price Range']).astype('uint8')\nprice_dict = {\"$$$$\": 3, \"$$ - $$$\": 2, \"$\": 1} \ndata['Price Range'] = data['Price Range'].replace(to_replace=price_dict)\n# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\nmedian = data.groupby('City')['Price Range'].median()\ndata['Price_Range'] = data[data['isNAN'] > 0].City.apply(\n    lambda x: median.loc[x])\ndata['Price Range'].fillna(0, inplace=True)\ndata['Price_Range'].fillna(0, inplace=True)\ndata['Price Range'] = data['Price Range'] + data['Price_Range']\ndata.drop(['Price_Range'], axis = 1, inplace = True)","fabfe05b":"display(data['Price Range'].unique())\ndata['Price Range'].value_counts()","cde29519":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0445\u0443\u0436\u0435 \u0435\u0441\u043b\u0438 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 One-Hot Encoding\n#data = pd.get_dummies(data, columns=['Price Range'], dummy_na=False)","9e8ba8c1":"get_boxplot('Price Range')","1bae918c":"#Number of Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432","edd18c11":"data['Number of Reviews'].value_counts()","10500b2d":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0433\u043e\u0440\u043e\u0434 \nNumber_of_Reviews_Sum = data.groupby(['City'])['Number of Reviews'].sum().sort_values(ascending=False)\nNumber_of_Reviews_Sum","1d28e0d9":"Number_of_Reviews_Count = data.groupby(['City'])['Number of Reviews'].count().sort_values(ascending=False)\nNumber_of_Reviews_Count\n","652f32cf":"#\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0430 \u043e\u0434\u0438\u043d \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0432 \u0433\u043e\u0440\u043e\u0434\u0435: \nmed_number_of_reviews_dict = {}\nfor city in list(data.City.unique()):\n    med_number_of_reviews_dict[city] = round(Number_of_Reviews_Sum[city]\/Number_of_Reviews_Count[city])\n\nmed_number_of_reviews_dict ","833e6487":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0434\u0440\u0443\u0433\u0438\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\ntable = Number_of_Reviews_Sum.reset_index().merge(Number_of_Reviews_Count.reset_index(), on='City', how='right')\ntable['city_reviews_mean'] = table['Number of Reviews_x']\/table['Number of Reviews_y']\ntable","94a8c2a0":"#\u0422\u043e\u0436\u0435 \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c (\u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043b\u044f \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438)\ncity_reviews = table.groupby('City')['city_reviews_mean'].apply(list).to_dict()\ncity_reviews","b32699aa":"# \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0432\u0441\u0435 \u043d\u0443\u043b\u0438 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 (\u043f\u043e \u0438\u0442\u043e\u0433\u0443 \u044d\u0442\u043e \u043d\u0435 \u043e\u0441\u043e\u0431\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u043b\u043e MAE):\ndef number_of_reviews_med(row):\n    if row['Number of Reviews'] == 0:\n        result = med_number_of_reviews_dict[row['City']]\n    else:\n        result = row['Number of Reviews']\n    return result\n\ndata['Number of Reviews'] = data.apply(lambda row: number_of_reviews_med(row),axis = 1)\n","caa65ca3":"# Cuisine Style: \u041a\u0443\u0445\u043d\u044f\ndata.loc[0, 'Cuisine Style']\n# \u0412 \u043e\u0434\u043d\u043e\u0439 \u044f\u0447\u0435\u0439\u043a\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0438\u043f\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435","97610741":"data['Cuisine Style'] = data['Cuisine Style'].apply(lambda x: str(x).replace('[',''))\ndata['Cuisine Style'] = data['Cuisine Style'].apply(lambda x: str(x).replace(']',''))\ndata['Cuisine Style'] = data['Cuisine Style'].apply(lambda x: str(x).replace(' ',''))","0b1d8b66":"def parse_values(x):\n    if 'VegetarianFriendly' in x:\n           return 1\n    elif 'European' in x:\n           return 2\n#    elif 'Mediterranean' in x:    \n#           return 3\n#    elif 'Italian' in x:    \n#           return 4        \n#    elif 'VeganOptions' in x:    \n#           return 5        \n#    elif 'GlutenFreeOptions' in x:    \n#           return 6          \n    else:\n         return 3\ndata['Cuisine'] = data['Cuisine Style'].apply(parse_values)","1bf7962b":"#\u0425\u0443\u0436\u0435 MAE \u0441 \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u043e\u0439 \n#data = pd.get_dummies(data, columns=[ 'Cuisine',], dummy_na=True)","b7b49665":" #\u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c, \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u043e\u0435, \u0442\u043e \u043a\u0443\u0445\u043d\u044f \u043e\u0434\u043d\u0430\ndef modify_cuisine_style(value):\n    if pd.isnull(value):\n        return []\n    else:\n        result = value.replace('[', '') \n        result = result.replace(']', '') \n        result = result.replace(', ', ',')\n        return result.split(\",\")\n\ndata['Cuisine Style'] = data['Cuisine Style'].apply(modify_cuisine_style)\ndata['Cuisine_Style'] = data['Cuisine Style'].apply(lambda x: 1 if len(x)==0 else len(x))","5f70f80c":"#data['Cuisine Style'].to_list()","50a0981c":"#data_exploded = data.explode('Cuisine Style')\n#data_exploded['Cuisine Style'].value_counts().head(10)","5cb36ab4":"#data_exploded.type_of_cuisine.value_counts().head(7)","d1e2700c":"#data['Cuisine'].value_counts()","e53e6714":"#\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0442\u0438\u043f\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c \u043f\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u0433\u043e\u0440\u043e\u0434\u0443 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c\n#City_Cuisine_dict = data.groupby('City')['Cuisine'].mean().to_dict()","53826267":"#\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a (\u041c\u0410\u0415 \u043b\u0443\u0447\u0448\u0435, \u043d\u043e \u043f\u0440\u0438 submit \u043d\u0430 Kagle \u0445\u0443\u0436\u0435 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0431\u0443\u0434\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c)\n#data['mean_city_cuisine'] = data['City'].replace(to_replace=City_Cuisine_dict)","0dc51bee":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e\n#data.loc[:,'Rating'].astype('float64').corr(data.loc[:,'mean_city_cuisine']).astype('float64')","b027810c":"data.City.value_counts()","2ecdc520":"get_boxplot('City')","dd32152b":"#\u0412\u0432\u0435\u0434\u0451\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0433\u043e\u0440\u043e\u0434 \u0441\u0442\u043e\u043b\u0438\u0446\u0435\u0439\ncapital = ['Amsterdam', 'Athens', 'Berlin', 'Bratislava', 'Brussels', 'Budapest', 'Copenhagen', 'Dublin', 'Edinburgh', 'Helsinki',\n           'Lisbon', 'Ljubljana', 'London', 'Luxembourg', 'Madrid', 'Oslo', 'Paris', 'Prague', 'Rome', 'Stockholm', 'Vienna', 'Warsaw']\ndata['Capital'] = data['City'].apply(lambda x: 1 if x in (capital) else 0)","6bcb62ec":"get_boxplot('Capital')","aba98697":"data = pd.get_dummies(data, columns=['Capital'], dummy_na=False)","7ab1adbc":"# \u0434\u043b\u044f One-Hot Encoding \u0432 pandas \u0435\u0441\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f - get_dummies. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0440\u0430\u0434\u0443\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 dummy_na\ndata = pd.get_dummies(data, columns=[ 'City',], dummy_na=True)","db211e30":"#Reviews: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432","27699980":"data['Reviews'] = data['Reviews'].apply(lambda x: str(x).replace('[',''))\ndata['Reviews'] = data['Reviews'].apply(lambda x: str(x).replace(']',''))\ndata['Reviews'] = data['Reviews'].apply(lambda x: str(x).replace(' ',''))","7fbaee3d":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 Review_Dates \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u0430\u0442 \u043e\u0442\u0437\u044b\u0432\u043e\u0432:\npattern = re.compile('\\d+\\\/\\d+\\\/\\d+')\ndata['Review_Date'] = data.Reviews.apply(pattern.findall)","f895b619":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0431\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442:\ndata['Number_of_Date'] = data.Review_Date.apply(lambda x: len(list(x)))\ndata.Number_of_Date.value_counts()","35d52cfc":"#\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043f\u0435\u0440\u0432\u0430\u044f \u0434\u0430\u0442\u0430 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0430 \u0432 \u043e\u0442\u0437\u044b\u0432\u0435 ","3afcc5da":"# \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0430\u0442\u044b \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c\u044b\u0435 \u0438\u0437 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432:\ndata.Review_Date = data.Review_Date.apply(lambda x: [x[-2], x[-1]] if len(x) > 2 else x)\n\n# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c:\ndata['Number_of_Date'] = data.Review_Date.apply(lambda x: len(list(x))) \ndata.Number_of_Date.value_counts() ","240bb504":"# \u0420\u0430\u0437\u043d\u043e\u0441\u0438\u043c \u0434\u0430\u0442\u044b \u043f\u043e 2-\u043c \u043d\u043e\u0432\u044b\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c, \u0442\u0430\u043a \u0447\u0442\u043e\u0431\u044b \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 Date_Rev_1 \u0431\u044b\u043b\u0430 \u0431\u041e\u043b\u044c\u0448\u0430\u044f \u0434\u0430\u0442\u0430\n# \u0438 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0438\u0445 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 datetime:\n\ndef date_rev_1_func(x):\n    if len(x) == 0:\n        result = None\n    elif len(x) == 1:\n        result = x[0]\n    else: \n        result = max(x)\n    return result","2ce2d3c6":"def date_rev_2_func(x):\n    if len(x) == 0:\n        result = None\n    elif len(x) == 1:\n        result = x[0]\n    else:\n        result = min(x)\n    return result","651283df":"data['Date_Rev_1'] = pd.to_datetime(data.Review_Date.apply(lambda x: date_rev_1_func(x)))\ndata['Date_Rev_2'] = pd.to_datetime(data.Review_Date.apply(lambda x: date_rev_2_func(x)))","76e7bb20":"# C\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u0434\u0430\u0442\u0430\u043c\u0438 2-\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u0435\u0435 \u043c\u0430\u043ac\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435:\ndata['Date_Rev_delta'] = (data.Date_Rev_1 - data.Date_Rev_2)\/ np.timedelta64(1, \"D\")\n\nx = list(data['Date_Rev_delta'].unique()) \nx.sort()\nprint(x[-1])","a77f84d6":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0434\u043d\u0435\u0439, \u043e\u0442\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043e\u0442\u0437\u044b\u0432 \u043e\u0442 date_max:\n\n# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u0430\u0442\u0443 \u043e\u0442\u0437\u044b\u0432\u0430 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435:\ndate_max = data['Date_Rev_1'].max()\ndisplay(date_max)\n\n# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443:\ndata['Date_Rev_From_Max'] = data.apply(lambda row: None if len(row.Review_Date) == 0  \n                                       else ((date_max-row.Date_Rev_1)), axis=1) \/ np.timedelta64(1, \"D\")  \n\n# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435:\nbad_date = data['Date_Rev_From_Max'].max()\n\n# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435:\ndata.Date_Rev_From_Max.fillna(bad_date, inplace = True)","9cc5acd2":"data['Review_1'] = data['Reviews'].apply(lambda x: TextBlob(x).polarity)","0ddbceec":"data['Review_1'].value_counts().head(10)","288e44b1":"#ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor","094dfb9b":"df_ID_TA = data.ID_TA.value_counts()[:].reset_index()\ndf_ID_TA[df_ID_TA.ID_TA ==2]","bf3fae3b":"data['ID_TA_type'] = data['ID_TA'].apply(lambda x: len(x))","0d80b2a9":"data['ID_TA_type'].hist()","65abf52b":"Rating_median_ID_TA_type = data.groupby('ID_TA_type')['Rating'].mean()\nRating_median_ID_TA_type","e8484897":"for i in ['ID_TA_type']:\n    get_boxplot(i)","253feac9":"#\u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u043d\u043e\u043c\u0435\u0440\u0430 \u0441 \u0434\u043b\u0438\u043d\u043e\u0439 8 \u0438 9 \u0432 \u043e\u0434\u043d\u0443 \u0433\u0440\u0443\u043f\u043f\u0443, \u0430 \u0441 \u0434\u043b\u0438\u043d\u043e\u0439 7 - \u0432 \u0434\u0440\u0443\u0433\u0443\u044e.\ndef len_ID_TA(x):\n    if x == 8 or x == 9:\n        return 1\n    else: return 0  ","984863fb":"data['type_ID_TA2'] = data['ID_TA_type'].apply(len_ID_TA)","5d25e338":"#data = pd.get_dummies(data, columns=['type_ID_TA2'], dummy_na=False)\n#\u0442\u0430\u043a \u0445\u0443\u0436\u0435 MAE \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f","0d0cec1c":"df_train['Rating'].value_counts(ascending=True).plot(kind='barh')","b6d6fb6d":"df_train['Ranking'][df_train['Rating'] == 5].hist(bins=100)","54387bdb":"df_train['Ranking'][df_train['Rating'] < 4].hist(bins=100)","434265bb":"from sklearn.preprocessing import PolynomialFeatures","d9ead70a":"#\u041e\u043f\u044b\u0442\u043d\u044b\u043c \u043f\u0443\u0442\u0435\u043c \u043d\u0430\u0448\u043b\u0430, \u0447\u0442\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f MAE \u0438\u0434\u0435\u0442 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0434\u0432\u0443\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:'Ranking', 'Number of Reviews'\npf = PolynomialFeatures(2)\npoly_features = pf.fit_transform(data[['Ranking', 'Number of Reviews']])#Price Range\npoly_features","a7313e2a":"df = pd.DataFrame(poly_features,\n                  columns = ['poly1', 'poly2', 'poly3','poly4','poly5','poly6']                  )\ndisplay(df)","26bbfc43":"#data['1'] =df['1']+df['2']+df['3']+df['4']+df['5']+df['6']\ndata['poly1'] =df['poly1']\ndata['poly2'] =df['poly2']\ndata['poly3'] =df['poly3']\ndata['poly4'] =df['poly4']\ndata['poly5'] =df['poly5']\n#data['poly6'] =df['poly6'] \u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u043a\u0430\u043a \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439, \u0443\u0431\u0440\u0430\u043b\u0430","3bd787d1":"plt.rcParams['figure.figsize'] = (15,10)\nsns.heatmap(data.drop(['sample'], axis=1).corr(),)","607ececc":"for col in ['Restaurant_id', 'Reviews', 'URL_TA', 'ID_TA', 'City_Amsterdam',  'City_Athens',  'City_Barcelona', 'City_Berlin',  \n                'City_Bratislava',  'City_Brussels',  'City_Budapest',  'City_Copenhagen',  \n                'City_Dublin',  'City_Edinburgh',  'City_Geneva',  'City_Hamburg',  \n                'City_Helsinki', 'City_Krakow',  'City_Lisbon',  'City_Ljubljana',  \n                'City_London',  'City_Luxembourg',  'City_Lyon',  'City_Madrid',  'City_Milan',  \n                'City_Munich',  'City_Oporto',  'City_Oslo',  'City_Paris', 'City_Prague',  \n                'City_Rome',  'City_Stockholm',  'City_Vienna',  'City_Warsaw',  'City_Zurich',  \n                'City_nan','poly1','poly2','poly3','poly4','poly5','Ranking_norm_1','Ranking_norm_2','Ranking_norm',\n                'Ranking','Capital_0','Capital_1']:\n    get_stat_dif(col)","bd02ad13":"# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u044e \u043f\u043e\u0440\u044f\u0434\u043e\u043a Restaurant_id\ndata.head()","9b25b560":"#\u041f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0430 \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u043d\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c MAE \u0440\u0435\u0437\u043a\u043e \u0443\u0445\u0443\u0434\u0448\u0430\u043b\u0441\u044f.\n#df_preproc = pd.DataFrame()","afc20f69":"df_preproc = data.copy()\ndf_preproc = df_preproc.drop(['Restaurant_id', 'Cuisine Style', 'Reviews', 'Review_Date', \n                              'Number_of_Date', 'Date_Rev_1', 'Date_Rev_2', 'Date_Rev_delta', \n                              'isNAN','URL_TA','ID_TA','Cuisine','Review_1','Ranking','Ranking_norm'], axis=1)\n\n#df_preproc['City_Athens'] = data['City_Athens']\n#df_preproc['City_Berlin'] = data['City_Berlin']\n#df_preproc['City_Madrid'] = data['City_Madrid']\n#df_preproc['City_Milan'] = data['City_Milan']\n#df_preproc['City_Oporto'] = data['City_Oporto']\n#df_preproc['City_Rome'] = data['City_Rome']\n#df_preproc['City_Stockholm'] = data['City_Stockholm']\n#df_preproc['City_Vienna'] = data['City_Vienna']\n#df_preproc['Price Range'] = data['Price Range']\n#df_preproc['poly2'] = data['poly2']\n#df_preproc['poly3'] = data['poly3']\n#df_preproc['poly4'] = data['poly4']\n#df_preproc['poly5'] = data['poly5']\n#df_preproc['mean_city_cuisine'] = data['mean_city_cuisine']\n#df_preproc['Cuisine_Style'] = data['Cuisine_Style']\n#df_preproc['Number of Reviews'] = data['Number of Reviews']\n#df_preproc['Ranking'] = data['Ranking']\n#df_preproc['Ranking_norm_1'] = data['Ranking_norm_1']\n#df_preproc['Ranking_norm_2'] = data['Ranking_norm_2']\n#df_preproc['count_in_city'] = data['count_in_city']\n#df_preproc['Date_Rev_From_Max'] = data['Date_Rev_From_Max']\n#df_preproc['sample'] = data['sample']\n#df_preproc['ID_TA_type'] = data['ID_TA_type']\n#df_preproc['Rating'] = data['Rating']\n\n\n#'URL_TA', 'ID_TA'\n#'City_Helsinki', 'City_Hamburg', 'City_Bratislava', 'City_Geneva', 'City_Zurich', 'City_Copenhagen', 'City_Luxembourg'\n#df_preproc = df_preproc.drop(['City'], axis=1)\n\n# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","0a597bb9":"df_preproc.head()","7737d45c":"df_preproc.info()","424d07ba":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","72be2ba4":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","c2d3d189":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","46490bc8":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","9157802c":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","309b4b62":"# \u0422\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0438\u043c\u0435\u0435\u0442 \u0448\u0430\u0433 0.5, \u043e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435.\ny_pred = np.round(y_pred * 2) \/ 2","0123a433":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","fe28ca07":"#MAE: 0.18075\n#MAE: 0.1769375\n#MAE: 0.176625\n#MAE: 0.1755\n#MAE: 0.1750625\n#MAE: 0.174625\n#MAE: 0.172875\n#MAE: 0.176875\n#MAE: 0.176125\n#MAE: 0.1750625\n#MAE: 0.174875","dec407fa":"#Kaggle \u043f\u043e\u0441\u043b\u0435 Submit 0.18625 \u043c\u0435\u0441\u0442\u043e 223 (MAE \u043f\u0435\u0440\u0435\u0434 submit: 0.1805)\n#Kaggle \u043f\u043e\u0441\u043b\u0435 Submit 0.18620 \u043c\u0435\u0441\u0442\u043e 222 (MAE \u043f\u0435\u0440\u0435\u0434 submit: 0.1769375)\n#Kaggle \u043f\u043e\u0441\u043b\u0435 Submit 0.18250 \u043c\u0435\u0441\u0442\u043e 198 (MAE \u043f\u0435\u0440\u0435\u0434 submit:)\n#Kaggle \u043f\u043e\u0441\u043b\u0435 Submit 0.18410 (MAE \u043f\u0435\u0440\u0435\u0434 submit: 0.172875)","0b89c261":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","293fd5fe":"feat_importances.nlargest(15)","f8594ecd":"test_data.sample(10)","c65f184c":"test_data = test_data.drop(['Rating'], axis=1)","31374627":"sample_submission","fd0ec530":"predict_submission = model.predict(test_data)","17eae131":"predict_submission","b0cb7f6c":"sample_submission['Rating'] = np.round(predict_submission * 2) \/ 2\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","e47f0bf6":"## \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","9b94b0d1":"<b>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0441\u043e\u0437\u0434\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0441\u0442\u043e\u043b\u0438\u0446\u0430 Capital.<\/b>","7ce6e940":"### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 City","88cef95c":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043d\u043e\u043c\u0435\u0440\u0430 \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u043c\u0438 \u043e\u043d\u0438 \u0431\u044b\u0432\u0430\u044e\u0442.","6938ce5d":"\u0418\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0432 \u0434\u0435\u0439\u0442\u0430\u0441\u0435\u0442\u0435 \u0443 \u043d\u0430\u0441 10 \u043a\u043e\u043b\u043e\u043d\u043e\u043a, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0442\u043e\u043b\u044c\u043a\u043e <b>Ranking<\/b> \u0438 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f <b>Rating<\/b> \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435.","8d433468":" ### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \"Reviews\"","5f0a5f44":"\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441\u0442\u0430\u043b\u0430 \u0435\u0449\u0435 \u043d\u0438\u0436\u0435. ","99373272":"\u041d\u0430\u0439\u0434\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435","47200a64":"# Cleaning and Prepping Data\n\u041e\u0431\u044b\u0447\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043a\u0443\u0447\u0443 \u043c\u0443\u0441\u043e\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0447\u0438\u0441\u0442\u0438\u0442\u044c, \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0438\u0445 \u0432 \u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442. \u0427\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u2014 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 \u044d\u0442\u0430\u043f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0447\u0442\u0438 \u043b\u044e\u0431\u043e\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.   \n![](https:\/\/analyticsindiamag.com\/wp-content\/uploads\/2018\/01\/data-cleaning.png)","86797df8":" ### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \"Price Range\"","b6ddb441":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","b9050cb7":"### \u0417\u0430\u0434\u0430\u0447\u0430: \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 TripAdvisor","246377d1":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0434\u0430\u043c\u043c\u0438-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e.","b181ba2f":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a Capital \u0432 \u0432\u0438\u0434\u0435 \u0434\u0430\u043c\u043c\u0438-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0432\u043b\u0438\u044f\u043b \u043d\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c MAE.","87f2dd33":"### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \"Number of Reviews\"","e7297ee4":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 TextBlob \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432","cc562dfd":"<b>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u044f \u0441\u043e\u0437\u0434\u0430\u043b\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 - Ranking_norm, Ranking_norm_1, Ranking_norm_2<\/b>","233b0c5e":"\u041d\u0430 \u044d\u0442\u043e\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0432\u0438\u0434\u0438\u043c, \u043a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.","49687b9a":"\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.","c348da68":"# DATA","8540f92e":"\u041c\u044b \u0432\u0438\u0434\u0438\u043c,\u0447\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043e\u0442 2 \u0434\u043e 4 ","ed9fdbfd":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\n* City: \u0413\u043e\u0440\u043e\u0434 \n* Cuisine Style: \u041a\u0443\u0445\u043d\u044f\n* Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* Price Range: \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n* Number of Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* Reviews: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* URL_TA: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 'www.tripadvisor.com' \n* ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor\n* Rating: \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","94543db5":"\u0423 \u043d\u0430\u0441 \u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u0442\u044f\u0433\u0438\u0432\u0430\u044e\u0442 \u0438 \u0434\u043e 2500 \u043c\u0435\u0441\u0442\u0430 \u0432 \u0441\u0432\u043e\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0435, \u0430 \u0447\u0442\u043e \u0442\u0430\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c?","cee43ffd":" ### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 Restaurant_id","596180fb":" ### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 Ranking","46521825":"<b>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0441\u043e\u0437\u0434\u0430\u043b\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u043d\u0430 \u0434\u043b\u0438\u043d\u0435 ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor - ID_TA_type \u0438 type_ID_TA2<\/b> ","6a6d0251":"**\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.**","25efaa77":"# Data Preprocessing","de56a565":"\u0410 \u043a\u0442\u043e-\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u043b, \u0447\u0442\u043e \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u044b \u043b\u044e\u0431\u044f\u0442 \u043f\u043e\u0435\u0441\u0442\u044c=) \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435:","88b6dbc5":"\u041f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0431\u043e\u043b\u0435\u0435 \u0434\u043e\u0440\u043e\u0433\u043e\u0439 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0435\u0439 \u0438\u043c\u0435\u044e\u0442 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043d\u0435 \u043d\u0438\u0436\u0435 \u0433\u0434\u0435-\u0442\u043e 3.5. \u0410 \u0432\u043e\u0442 \u043f\u0435\u0440\u0432\u0443\u044e \u0438 \u0432\u0442\u043e\u0440\u0443\u044e \u0433\u0440\u0443\u043f\u043f\u0443 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c. P.S. \u042d\u0442\u043e \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e MAE, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0435\u0440\u043d\u0443\u043b\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 1 \u0438 2","b17344f4":"\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u043d\u0435\u0439\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439 0 - 46 \u0442\u044b\u0441\u044f\u0447. \u0421\u043c\u044b\u0441\u043b\u0430 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c.","8697c6a8":"<b>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0441\u043e\u0437\u0434\u0430\u043b\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a Date_Rev_From_Max<\/b>","155982d0":"\u041a \u043c\u043e\u0435\u043c\u0443 \u0443\u0434\u0438\u0432\u043b\u0435\u043d\u0438\u044e, \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u0442\u043e\u043b\u0438\u0446\u044b \u043d\u0435 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.","c6316de5":"<b>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u044f \u0441\u043e\u0437\u0434\u0430\u043b\u0430 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0442\u0440\u0438 \u0442\u0438\u043f\u0430 \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435<\/b>","9c3d4a9b":"<b>\u041e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u043e\u0431\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 MAE \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442\u0441\u044f<\/b>","2aae51ac":"### 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","b3422929":"<b>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0441\u043e\u0437\u0434\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0430 \u043e\u0434\u0438\u043d \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 Number of Reviews<\/b>","8b4e22d6":"MAE: 0.174875","8d77a74e":"<b>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u044f \u0441\u043e\u0437\u0434\u0430\u043b\u0430 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u0435\u0442\u0435\u0432\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 - chain<\/b>","ad486fd5":"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u043b\u0430\u0431\u0430\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f (\u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0432\u0441\u0435\u0433\u043e -0,1)","694311d6":"\u041f\u0440\u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0438 boxplot \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0443 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 (chain=1) Rating \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0448\u0435.","7e2f7860":"\u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0443 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0434\u043b\u0438\u043d\u043e\u0439 8 \u0438 9, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0448\u0435.","94ba8333":"\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043c\u044b \u0438\u0437\u0431\u0430\u0432\u0438\u043b\u0438\u0441\u044c \u043e\u0442 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u044f","d1feb27c":"## \u041f\u0440\u043e\u0435\u043a\u0442 \u21163. Predict TripAdvisor Rating (\u041f\u0440\u043e\u0435\u043a\u0442 3. \u041e \u0432\u043a\u0443\u0441\u043d\u043e\u0439 \u0438 \u0437\u0434\u043e\u0440\u043e\u0432\u043e\u0439 \u043f\u0438\u0449\u0435 )","9e43c2aa":" ### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \"ID_TA\"","ee591c34":"# Model \n\u0421\u0430\u043c ML","3e84f4f4":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e Ranking \u0438\u043c\u0435\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u043f\u0440\u043e\u0441\u0442\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0438\u0437-\u0437\u0430 \u043c\u044b \u044d\u0442\u043e\u0433\u043e \u0438\u043c\u0435\u0435\u043c \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435.\n\n>\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u0438\u043c\u0438\u043d\u0438\u0442\u044c \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e\n","36341078":"# \u0412\u044b\u0432\u043e\u0434\n\u042f \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c MAE (\u043f\u043e\u0432\u044b\u0441\u0438\u043b\u0430 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c) \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u043e\u043b\u0435\u0435 \u0442\u0449\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0438\u0437\u0431\u0430\u0432\u0438\u043b\u0430\u0441\u044c \u043e\u0442 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u043d\u0435\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0430 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0443\u0436\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0439\u0441\u044f \u0432 \u0434\u0430\u043d\u043d\u044b\u0445.","bdce2afb":"## 1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NAN \n\u0423 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u043b\u0438\u0431\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e. \u041d\u043e \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, **\u0434\u0430\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c!**   \n\u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 NAN \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a ","c178ab38":"# Submission","66a55dd2":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","092bee15":" ### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \"Cuisine Style\""}}