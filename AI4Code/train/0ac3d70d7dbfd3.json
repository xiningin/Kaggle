{"cell_type":{"4b3abffb":"code","f66a8a84":"code","6ce682f3":"code","e4eed5f6":"code","bf9f4a99":"code","6d54a7d7":"code","4311dcf6":"code","d57afa25":"code","66f64322":"code","578f4591":"code","08535b37":"code","f4d41870":"code","82998ad1":"code","32661d73":"code","605e7fcc":"code","e9f053f6":"code","94860e5a":"code","3fe3355c":"code","1d274325":"code","55db58d4":"code","5c5752e2":"code","a1ebc96b":"code","c8638669":"code","48802366":"code","9edf35c4":"markdown","a22321ec":"markdown","2da1c92e":"markdown","06cffcd9":"markdown","5e156bd3":"markdown","6a022412":"markdown","2efff9d7":"markdown","ed172747":"markdown","39913c18":"markdown","441e2054":"markdown","5f96140b":"markdown","7095d739":"markdown","86de5503":"markdown","a7d60fa9":"markdown"},"source":{"4b3abffb":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f66a8a84":"# import libraries\nimport pandas as pd\npd.set_option('display.max_columns', None)\nimport numpy as np\n\n# import data\ndf_b = pd.read_csv('\/kaggle\/input\/Batting.csv')\ndf_f = pd.read_csv('\/kaggle\/input\/Fielding.csv')\ndf_p = pd.read_csv('\/kaggle\/input\/Pitching.csv')\ndf_t = pd.read_csv('\/kaggle\/input\/Teams.csv')\ndf_n = pd.read_csv('\/kaggle\/input\/People.csv')","6ce682f3":"df_b.columns","e4eed5f6":"df_f.columns","bf9f4a99":"df_p.columns","6d54a7d7":"df_t.columns","4311dcf6":"df_n.columns","d57afa25":"### filtering out conflicting\/unnecessary features\ndf_b = df_b.drop(['stint', 'lgID'], axis = 1)\ndf_f = df_f.drop(['stint', 'lgID', 'PB', 'WP', 'SB', 'CS', 'ZR'], axis = 1)\ndf_p = df_p.drop(['stint', 'lgID'], axis = 1)\ndf_n = df_n[['playerID', 'birthYear', 'nameFirst', 'nameLast', 'weight', 'height', 'bats', 'throws']]\ndf_t = df_t[['yearID', 'lgID', 'teamID', 'franchID', 'divID', 'Rank', 'W', 'L','DivWin', 'WCWin', 'LgWin', 'WSWin']]\n\n# rename columns to avoid conflicting with pitcher W\/L columns when merging\ndf_t.rename(columns = {'W':'team_wins'}, inplace = True)\ndf_t.rename(columns = {'L':'team_loses'}, inplace = True)","66f64322":"df_merge_b_n = pd.merge(df_b, df_n, on = 'playerID')\ndf_merge_f_n = pd.merge(df_f, df_n, on = 'playerID')\ndf_merge_p_n = pd.merge(df_p, df_n, on = 'playerID')","578f4591":"df_bat = pd.merge(df_merge_b_n, df_t, on = ['teamID', 'yearID'])\ndf_field = pd.merge(df_merge_f_n, df_t, on = ['teamID', 'yearID'])\ndf_pitch = pd.merge(df_merge_p_n, df_t, on = ['teamID', 'yearID'])","08535b37":"# filtering by year\ndf_bat = df_bat[(df_bat.yearID >= 1980) & (df_bat.yearID != 1994)]\ndf_field = df_field[(df_field.yearID >= 1980) & (df_field.yearID != 1994)]\ndf_pitch = df_pitch[(df_pitch.yearID >= 1980) & (df_pitch.yearID != 1994)]","f4d41870":"df_bat_STL_2018 = df_bat[(df_bat.teamID == 'SLN') & (df_bat.yearID == 2018)]\ndf_bat_STL_2018.head(20)\n   \ndf_field_STL_2018 = df_field[(df_field.teamID == 'SLN') & (df_field.yearID == 2018)]\ndf_field_STL_2018.head(20)\n\ndf_pitch_STL_2018 = df_pitch[(df_pitch.teamID == 'SLN') & (df_pitch.yearID == 2018)]\ndf_pitch_STL_2018.head(20)","82998ad1":"# filtering by at bats - we don't want to account for those who barely contributed to a team, also a reasonable sample size\ndf_bat['AB'].describe()\ndf_bat['AB'].hist(bins = 50)\ndf_bat = df_bat[df_bat['AB'] >= 250]","32661d73":"#filtering by innings fielded - for the same reason, also getting rid of pitchers from this table\ndf_field['InnOuts'].describe()\ndf_field['InnOuts'].hist(bins = 50)\ndf_field = df_field[df_field['POS'] != 'P']\ndf_field = df_field[df_field['InnOuts'] >= 1000]","605e7fcc":"# filtering by innings pitched - for the same reason\ndf_pitch['IPouts'].describe()\ndf_pitch['IPouts'].hist(bins = 50)\ndf_pitch = df_pitch[df_pitch['IPouts'] >= 200]","e9f053f6":"### forming a universal batting statistic - wOBA ###\n# data set does not account for singles, let's create that... it's necessary for calculating wOBA\ndf_bat['1B'] = df_bat['H'] - (df_bat['2B'] + df_bat['3B'] + df_bat['HR'])                                  \n\n#creating wOBA\ndf_bat['wOBA'] = ((0.69 * df_bat['BB']) + (0.72 * df_bat['HBP']) + (0.89 * df_bat['1B'])\\\n               + (1.27 * df_bat['2B']) + (1.62 * df_bat['3B']) + (2.10 * df_bat['HR']))\\\n    \/ (df_bat['AB'] + df_bat['BB'] - df_bat['IBB'] + df_bat['SF'] + df_bat['HBP'])","94860e5a":"### creating team averages - using groupby function ###\n# Team_wOBA\ndf_bat['Team_wOBA'] = df_bat.groupby(['teamID', 'yearID']).wOBA.transform('mean')\n\n# Team_E\ndf_field['Team_E'] = df_field.groupby(['teamID', 'yearID']).E.transform('mean')\n\n# Team_ERA\ndf_pitch['Team_ERA'] = df_pitch.groupby(['teamID', 'yearID']).ERA.transform('mean')","3fe3355c":"# import libaries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport scipy\nfrom scipy import stats","1d274325":"# wOBA and Rank\nax = sns.jointplot(\n    x = \"Rank\",\n    y = \"wOBA\",\n    data = df_bat,\n    kind = \"kde\",\n    height = 11)\nax.ax_joint.set_xlabel('Team Rank', fontsize = 16, fontweight = 'bold')\nax.ax_joint.set_ylabel('wOBA', fontsize = 16, fontweight = 'bold')\n\nplt.show()\n\npc1 = scipy.stats.pearsonr(df_bat['wOBA'], df_bat['Rank']) \nprint('wOBA and Team Rank: correlation coefficient = ', round(pc1[0],2), ', p-value = ', round(pc1[1],4))","55db58d4":"# Errors and Rank\nax = sns.jointplot(\n    x = \"Rank\",\n    y = \"E\",\n    data = df_field,\n    kind = \"kde\",\n    height = 11)\nax.ax_joint.set_xlabel('Team Rank', fontsize = 16, fontweight = 'bold')\nax.ax_joint.set_ylabel('Errors', fontsize = 16, fontweight = 'bold')\n\nplt.show()\n\npc2 = scipy.stats.pearsonr(df_field['E'], df_field['Rank'])\nprint('Errors and Team Rank: correlation coefficient = ', round(pc2[0],2), ', p-value = ', round(pc2[1],4))","5c5752e2":"# ERA and Rank\nax = sns.jointplot(\n    x = \"Rank\",\n    y = \"ERA\",\n    data = df_pitch,\n    kind = \"kde\",\n    height = 11)\nax.ax_joint.set_xlabel('Team Rank', fontsize = 16, fontweight = 'bold')\nax.ax_joint.set_ylabel('ERA', fontsize = 16, fontweight = 'bold')\n\nplt.show()\n\npc3 = scipy.stats.pearsonr(df_pitch['ERA'], df_pitch['Rank'])\nprint('ERA and Team Rank: correlation coefficient = ', round(pc3[0],2), ', p-value = ', round(pc3[1],4))","a1ebc96b":"# team_wOBA and Rank\nax = sns.jointplot(\n    x = \"Rank\",\n    y = \"Team_wOBA\",\n    data = df_bat,\n    kind = \"kde\",\n    height = 11)\nax.ax_joint.set_xlabel('Team Rank', fontsize = 16, fontweight = 'bold')\nax.ax_joint.set_ylabel('Team wOBA', fontsize = 16, fontweight = 'bold')\n\nplt.show()\n\npc4 = scipy.stats.pearsonr(df_bat['Team_wOBA'], df_bat['Rank'])\nprint('Team wOBA and Team Rank: correlation coefficient = ', round(pc4[0],2), ', p-value = ', round(pc4[1],4))","c8638669":"# team_E and Rank\nax = sns.jointplot(\n    x = \"Rank\",\n    y = \"Team_E\",\n    data = df_field,\n    kind = \"kde\",\n    height = 11)\nax.ax_joint.set_xlabel('Team Rank', fontsize = 16, fontweight = 'bold')\nax.ax_joint.set_ylabel('Team Errors', fontsize = 16, fontweight = 'bold')\n\nplt.show()\n\npc5 = scipy.stats.pearsonr(df_field['Team_E'], df_field['Rank'])\nprint('Team Errors and Team Rank: correlation coefficient = ', round(pc5[0],2), ', p-value = ', round(pc5[1],4))","48802366":"# team_ERA and Rank\nax = sns.jointplot(\n    x = \"Rank\",\n    y = \"Team_ERA\",\n    data = df_pitch,\n    kind = \"kde\",\n    height = 11)\nax.ax_joint.set_xlabel('Team Rank', fontsize = 16, fontweight = 'bold')\nax.ax_joint.set_ylabel('Team ERA', fontsize = 16, fontweight = 'bold')\n\nplt.show()\n\npc6 = scipy.stats.pearsonr(df_pitch['Team_ERA'], df_pitch['Rank'])\nprint('Team ERA and Team Rank: correlation coefficient = ', round(pc6[0],2), ', p-value = ', round(pc6[1],4))","9edf35c4":"Overall, there is unfortunately not much to conclude here. It's clear that wOBA and ERA play a role in predicting the team's success in a given year but it is likely not statistically significant. Hm.","a22321ec":"Let's check the merge to ensure everything worked properly. Will be identifying the St. Louis Cardinals 2018 roster (something I am familiar with) to ensure accuracy. ","2da1c92e":"# MLB Baseball - Predicting Team Success","06cffcd9":"# Correlation Coefficients and Visualization","5e156bd3":"# Data Overview","6a022412":"As we can see, there is not much correlation going on when considering each player individually. I was a bit surprised by these results, perhaps the lack of correlation can be explained by the vast number of great players who are members of teams that rank low. Let's try and identify the team averages for these statistics and see if those correlate more.","2efff9d7":"# Data Cleaning","ed172747":"# Environment Set Up","39913c18":"In this notebook I used Sean Lahmann's baseball databank to identify the features that contribute most strongly to a team's rank at the end of a season. \n\nThe primary goal of this project was the data wrangling portion where I practiced skills in merging, concatating and joining dataframes using Python primarily pandas library. In the end, I found the correlation coefficients for Offensive and Defensive features, namely wOBA and ERA.","441e2054":"Further filtering","5f96140b":"# Feature Engineering ","7095d739":"Filtering out unnecessary rows","86de5503":"Following some basic cleaning, I began to merge the dataframes together.","a7d60fa9":"Looks perfect!"}}