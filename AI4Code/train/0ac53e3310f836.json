{"cell_type":{"d70a56d8":"code","1d81cd6c":"code","ae31026d":"code","129e1826":"code","061d1f14":"code","8bc8df8a":"code","07769d2f":"code","4d2cf86a":"code","1c97b619":"code","d4b03c85":"code","77988b1c":"code","f3f29792":"code","b60bc689":"code","4e63e111":"code","840fe7c5":"code","b93062a8":"code","43774730":"code","30605bc3":"code","a56bc0f6":"code","86278246":"code","51e61a73":"code","686f317a":"code","3ff94ef3":"code","c8d57947":"code","24b6e521":"code","4eb7fef0":"code","7a4673a5":"markdown","ba853c8f":"markdown","9335c2ec":"markdown","669b9f16":"markdown","856f2ba8":"markdown"},"source":{"d70a56d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d81cd6c":"import matplotlib.pyplot as plt\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\nimport matplotlib.image as mpimg\n\nfrom PIL import Image\n\nimport os\nfrom pathlib import Path\n\nimport re\n\nfrom collections import OrderedDict\n\nimport base64\nfrom io import BytesIO\nfrom skimage import io\n\nfrom tqdm import tqdm\n\nfrom math import pi\n\nfrom bokeh.models import Legend, LegendItem, LabelSet, ColumnDataSource\nfrom bokeh.io import output_file, output_notebook, curdoc\nfrom bokeh.plotting import figure, show\noutput_notebook()\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go","ae31026d":"pokemon = pd.read_csv(\"\/kaggle\/input\/pokemon\/Pokemon.csv\")","129e1826":"pokemon.head()","061d1f14":"pokemon.columns","8bc8df8a":"pokemon.columns = ['id', 'Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', \n                   'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary']\npokemon.columns","07769d2f":"pokemon.tail()","4d2cf86a":"pokemon['Dual-Type'] = pokemon['Type 1'].fillna('') + ' ' + pokemon['Type 2'].fillna('')\npokemon['Dual-Type'] = pokemon['Dual-Type'].str.strip()\n\nprint(f\"Number of types in Type 1: {len(pokemon['Type 1'].dropna().unique())}\")\nprint(f\"Number of types in Type 2: {len(pokemon['Type 2'].dropna().unique())}\")\nprint(f\"Number of types in Dual-Type: {len(pokemon['Dual-Type'].dropna().unique())}\")","1c97b619":"pokemon['Dual-Type']","d4b03c85":"count_type_1 = pokemon.groupby(by = ['Generation', 'Type 1'], dropna = True).count()[['id']]\n\ncount_type_1.reset_index(inplace = True)\n\ncount_type_1.rename(columns = {'Type 1' : 'Type'}, inplace = True)\n\ncount_type_1.set_index(['Generation', 'Type'], inplace = True)\n\ncount_type_1","77988b1c":"count_type_2 = pokemon.groupby(by = ['Generation', 'Type 2'], dropna = True).count()[['id']]\n\ncount_type_2.reset_index(inplace = True)\n\ncount_type_2.rename(columns = {'Type 2' : 'Type'}, inplace = True)\n\ncount_type_2.set_index(['Generation', 'Type'], inplace = True)\n\ncount_type_2","f3f29792":"count_single_type = count_type_1.add(count_type_2, axis = 'columns', fill_value = 0)\n\ndel count_type_1, count_type_2\n\ncount_single_type['id'] = count_single_type['id'].astype('int')\n\ncount_single_type.reset_index(level = [0, 1], inplace = True)\n\ncount_single_type","b60bc689":"sum_single_type = pd.pivot_table(count_single_type, index = ['Type'], values = ['id'], aggfunc=np.sum)\n\nsum_single_type['id'] = sum_single_type['id'].astype('int')\n\nsum_single_type.reset_index(inplace = True)\n\nsum_single_type['Generation'] = 'all'\n\nsingle_type = pd.concat([count_single_type, sum_single_type])  \n\ndel sum_single_type\n\nsingle_type.reset_index(drop = True, inplace = True)\n\nsingle_type","4e63e111":"fig, ax = plt.subplots(figsize = (10, 10))\n\ndef creat_pokeball(size, generation):\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    \n    Pokeball_Crimson = '#EE1515'\n    Pokeball_Shark = '#222224'\n    Pokebll_Gallery = '#F0F0F0'\n    \n    palette_generation_1 = ['#FF7327', '#00DD00']\n    palette_generation_2 = ['#B69E00', '#C0C0E1']\n    palette_generation_3 = ['#AB2813', '#26649C']\n    palette_generation_4 = ['#44BAE5', '#DA7D99']\n    palette_generation_5 = ['#444444', '#E1E1E1']\n    palette_generation_6 = ['#025DA6', '#EA1A3E']\n    palette_generation_all = [Pokeball_Crimson, Pokebll_Gallery]\n    palettes = [palette_generation_1, palette_generation_2, palette_generation_3,\n                palette_generation_4, palette_generation_5, palette_generation_6,\n                palette_generation_all]\n    if generation in [1, 2, 3, 4, 5, 6]:\n        pokeball_colors = palettes[generation - 1]\n    elif generation == 'all':\n        pokeball_colors = palettes[6]\n    else:\n        raise ValueError(\"The entered generation information is incorrect.\")\n        \n    wedges_0, texts_0 = ax.pie(\n        x = [100],\n        labels = ['GEN\\n' + str(generation).upper()],\n        colors = [Pokebll_Gallery],\n        startangle = 0,\n        explode = [0] * len([100]),\n        wedgeprops = {'width' : 1.15 * size},\n        radius = 1.15 * size,\n    )\n    \n    for i, wedge in enumerate(wedges_0):\n        texts_0[i].set_color(Pokeball_Crimson)\n        texts_0[i].set_fontsize(24 * size)\n        texts_0[i].set_fontstyle('normal')\n        texts_0[i].set_fontweight('roman')\n        texts_0[i].set_horizontalalignment('center')\n        texts_0[i].set_position((0, 0))\n        texts_0[i].set_alpha(0.75)\n        \n    wedges_1 = ax.pie(\n        x = [100],\n        colors = [Pokeball_Shark],\n        startangle = 0,\n        explode = [0] * len([100]),\n        wedgeprops = {'width': 0.8 * size},\n        radius = 1.15 * size,\n    )\n    \n    wedges_2 = ax.pie(\n        x = [50, 50],\n        colors = pokeball_colors,\n        startangle = 0,\n        explode = [0.05 * size] * len([50, 50]),\n        wedgeprops = {'width': 0.85 * size, 'linewidth': 8 * size, 'edgecolor': Pokeball_Shark},\n        radius = 1.2 * size,\n    )\n    \n    wedges_3 = ax.pie(\n        x = [100],\n        colors = [Pokebll_Gallery],\n        explode = [0] * len([100]),\n        startangle = 0,\n        wedgeprops = dict(width = 0.05 * size, linewidth = 16 * size, edgecolor = Pokeball_Shark),\n        radius = 0.4 * size,\n    )\n    \n    wedges_4 = ax.pie(\n        x = [100],\n        colors = [Pokebll_Gallery],\n        explode = [0] * len([100]),\n        startangle = 0,\n        wedgeprops = dict(width = 0.25 * size, linewidth = 4 * size, edgecolor = Pokeball_Shark),\n        radius = 0.25 * size,\n    )\n\ncreat_pokeball(1, 'all')\n\nplt.show()","840fe7c5":"def starter_classifier():\n    n_generation_1 = ['001', '004', '007']\n    n_generation_2 = ['152', '155', '158']\n    n_generation_3 = ['252', '255', '258']\n    n_generation_4 = ['387', '390', '393']\n    n_generation_5 = ['495', '498', '501']\n    n_generation_6 = ['650', '653', '656']\n    n_generation_All = ['025', '133']\n    \n    image_generation_1 = {}\n    image_generation_2 = {}\n    image_generation_3 = {}\n    image_generation_4 = {}\n    image_generation_5 = {}\n    image_generation_6 = {}\n    image_generation_All = {}\n    \n    for dirname, _, filenames in os.walk('..\/input\/pokemon-starters-by-generation\/'):\n        for filename in filenames:\n            n_pokedex = re.split('\\.|_', filename)[1]\n            if n_pokedex in n_generation_1:\n                image_generation_1.update({n_pokedex: os.path.join(dirname, filename)})\n            elif n_pokedex in n_generation_2:\n                image_generation_2.update({n_pokedex: os.path.join(dirname, filename)})\n            elif n_pokedex in n_generation_3:\n                image_generation_3.update({n_pokedex: os.path.join(dirname, filename)})\n            elif n_pokedex in n_generation_4:\n                image_generation_4.update({n_pokedex: os.path.join(dirname, filename)})\n            elif n_pokedex in n_generation_5:\n                image_generation_5.update({n_pokedex: os.path.join(dirname, filename)})\n            elif n_pokedex in n_generation_6:\n                image_generation_6.update({n_pokedex: os.path.join(dirname, filename)})\n            else:\n                image_generation_All.update({n_pokedex: os.path.join(dirname, filename)})\n                \n    return image_generation_1, image_generation_2, image_generation_3, image_generation_4, image_generation_5, image_generation_6, image_generation_All","b93062a8":"fig, ax = plt.subplots(figsize = (10, 10))\n\ndef add_starters(size, generation):\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    \n    creat_pokeball(size, generation)\n    ns_pokedex = []\n    image_paths = []\n    if generation in [1, 2, 3, 4, 5, 6]:\n        dict_starters = starter_classifier()[generation - 1]\n        for key in sorted(dict_starters):\n            ns_pokedex.append(key)\n            image_paths.append(dict_starters[key])\n        image_1 = mpimg.imread(image_paths[0])\n        image_2 = mpimg.imread(image_paths[1])\n        image_3 = mpimg.imread(image_paths[2])\n        imagebox_1 = OffsetImage(image_1, zoom = .45 * size)\n        imagebox_2 = OffsetImage(image_2, zoom = .45 * size)\n        imagebox_3 = OffsetImage(image_3, zoom = .45 * size)\n        annotationbox_1 = AnnotationBbox(imagebox_1, (-.52 * size, -.3 * size), frameon = False)\n        annotationbox_2 = AnnotationBbox(imagebox_2, (0 * size, .6 * size), frameon = False)\n        annotationbox_3 = AnnotationBbox(imagebox_3, (.52 * size, -.3 * size), frameon = False)\n        ax.add_artist(annotationbox_1)\n        ax.add_artist(annotationbox_2)\n        ax.add_artist(annotationbox_3)\n    elif generation == 'all':\n        dict_starters = starter_classifier()[6]\n        for key in sorted(dict_starters):\n            ns_pokedex.append(key)\n            image_paths.append(dict_starters[key])\n        image_1 = mpimg.imread(image_paths[0])\n        image_2 = mpimg.imread(image_paths[1])\n        imagebox_1 = OffsetImage(image_1, zoom = .4 * size)\n        imagebox_2 = OffsetImage(image_2, zoom = .4 * size)\n        annotationbox_1 = AnnotationBbox(imagebox_1, (-.52 * size, -.3 * size), frameon = False)\n        annotationbox_2 = AnnotationBbox(imagebox_2, (.52 * size, -.3 * size), frameon = False)\n        ax.add_artist(annotationbox_1)\n        ax.add_artist(annotationbox_2)\n    else:\n        raise ValueError(\"The entered generation information is incorrect.\")\n\nadd_starters(1, 'all')\n\nplt.show()","43774730":"fig, ax = plt.subplots(figsize = (10, 10))\n\ndef save_to_image(size, generation):\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    \n    parent_dir = '\/kaggle\/working'\n    directory = 'pokeballs'\n    joint_path = os.path.join(parent_dir, directory)\n    abs_path = os.path.abspath(joint_path)\n    Path(abs_path).mkdir(parents = True, exist_ok = True)\n    \n    add_starters(size, generation)\n    save_path = abs_path + '\/pokeball_' + str(generation) + '.png'\n    plt.savefig(fname = save_path, transparent = True)\n    plt.cla()\n\nfor generation in tqdm([1, 2, 3, 4, 5, 6, 'all']):\n    save_to_image(1, generation)\n\nplt.clf()\nplt.close()","30605bc3":"fig, ax = plt.subplots(figsize = (10, 10))\n\nPokeball_Crimson = '#EE1515'\nPokeball_Shark = '#222224'\nPokebll_Gallery = '#F0F0F0'\n\ncolors = {\n        'Bug': '#A8B820',\n        'Dark': '#705848',\n        'Dragon': '#7038F8',\n        'Electric': '#F8D030',\n        'Fairy': '#F0B6BC',\n        'Fighting': '#C03028',\n        'Fire': '#F08030',\n        'Flying': '#A890F0',\n        'Ghost': '#705898',\n        'Grass': '#78C850',\n        'Ground': '#E0C068',\n        'Ice': '#98D8D8',\n        'Normal': '#A8A878',\n        'Poison': '#A040A0',\n        'Psychic': '#F85888',\n        'Rock': '#B8A038',\n        'Steel': '#B8B8D0',\n        'Water': '#6890F0'\n    }\n\ndef pie_chart(size, generation, df, pctdistance, font_size_weight):\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    \n    Pokebll_Gallery = '#F0F0F0'\n    \n    df_generation = df.loc[df['Generation'] == generation].copy()\n    sorted_types = df_generation.sort_values(by = 'id')['Type']\n    \n    proportion_all = zip(df.loc[df['Generation'] == 'all'].sort_values(by = 'id')['id'] \/\n                         df.loc[df['Generation'] == 'all'].sort_values(by = 'id')['id'].sum(),\n                     df.loc[df['Generation'] == 'all'].sort_values(by = 'id')['Type'])\n    sorted_types_all = {}\n    for i , j in proportion_all:\n        sorted_types_all.update({j : i})\n    sorted_types_all = OrderedDict([(i, sorted_types_all[i]) for i in sorted_types])\n    \n    colors = {\n        'Bug': '#A8B820',\n        'Dark': '#705848',\n        'Dragon': '#7038F8',\n        'Electric': '#F8D030',\n        'Fairy': '#F0B6BC',\n        'Fighting': '#C03028',\n        'Fire': '#F08030',\n        'Flying': '#A890F0',\n        'Ghost': '#705898',\n        'Grass': '#78C850',\n        'Ground': '#E0C068',\n        'Ice': '#98D8D8',\n        'Normal': '#A8A878',\n        'Poison': '#A040A0',\n        'Psychic': '#F85888',\n        'Rock': '#B8A038',\n        'Steel': '#B8B8D0',\n        'Water': '#6890F0'\n    }\n    \n    df_generation['colors'] = df_generation['Type'].apply(lambda x: colors[x])\n    \n    edgecolors = {\n        'Bug': '#D8E030',\n        'Dark': '#A8A878',\n        'Dragon': '#B8A0F8',\n        'Electric': '#F8F878',\n        'Fairy': '#F5CAD1',\n        'Fighting': '#F08030',\n        'Fire': '#F8D030',\n        'Flying': '#C8C0F8',\n        'Ghost': '#A890F0',\n        'Grass': '#C0F860',\n        'Ground': '#F8F878',\n        'Ice': '#D0F8E8',\n        'Normal': '#D8D8D0',\n        'Poison': '#D880B8',\n        'Psychic': '#F8C0B0',\n        'Rock': '#E0C068',\n        'Steel': '#D8D8C0',\n        'Water': '#98D8D8'\n    }\n    \n    wedges_1, texts_1, autotexts_1 = ax.pie(\n        x = df_generation.sort_values(by = 'id')['id'],\n        labels = df_generation.sort_values(by = 'id')['Type'],\n        colors = df_generation.sort_values(by = 'id')['colors'],\n        autopct = '%.2f%%',\n        startangle = 0,\n        labeldistance = 0,\n        pctdistance = pctdistance,\n        wedgeprops = dict(linewidth = 2 * size, edgecolor = Pokebll_Gallery, alpha = 0.75),\n        radius = 2.5 * size,\n    )\n    \n    for i, wedge in enumerate(wedges_1):\n        wedges_1[i].set_edgecolor(edgecolors.get(wedge.get_label()))\n    \n    for i in texts_1:\n        i.set(visible = False)\n    \n    for wedge, i in zip(wedges_1, sorted_types_all):\n        wedge.set_radius((1.2 + 10 * sorted_types_all.get(i)) * size)\n    \n    count = 0\n    for autotext, i in zip(autotexts_1, sorted_types_all):\n        autotext.set_fontsize((sorted_types_all.get(i) + count) * size * font_size_weight)\n        count += 0.0001\n    \n    [t.set_color(Pokebll_Gallery) for t in autotexts_1]\n    \n    abs_path = '\/kaggle\/working\/pokeballs'\n    img_path = abs_path + '\/pokeball_' + str(generation) + '.png'\n\n    fig = mpimg.imread(img_path, format = 'png')\n    imagebox = OffsetImage(fig, zoom = .8 * size)\n    annotationbox = AnnotationBbox(imagebox, (0, 0), frameon = False)\n    ax.add_artist(annotationbox)\n\npie_chart(1, 'all', single_type, .56, 300)\n\ndf_generation = single_type.loc[single_type['Generation'] == 'all'].copy()\n\nlegend = ax.legend(title = 'Pokemon Types',\n                   title_fontsize = 24,\n                   bbox_to_anchor = (0, 0, 2, 1.12),\n                   labels = \"Type \" + df_generation.sort_values(by = 'id')['Type'].astype('str'),\n                   labelcolor = df_generation.sort_values(by = 'id')['Type'].apply(lambda x: colors[x]),\n                   fontsize = 20,\n                   borderpad = 1,\n                   facecolor = Pokebll_Gallery,\n                   edgecolor = Pokeball_Shark)\n\nplt.setp(legend.get_title(),\n         color = Pokeball_Crimson,\n         fontstyle = 'normal',\n         fontfamily = 'monospace')\n\nplt.show()","a56bc0f6":"fig = plt.figure(figsize = (30, 30))\n\nax = fig.add_gridspec(3, 3)\naxes = []\naxes.append(fig.add_subplot(ax[0, 0]))\naxes.append(fig.add_subplot(ax[0, 1]))\naxes.append(fig.add_subplot(ax[0, 2]))\naxes.append(fig.add_subplot(ax[2, 0]))\naxes.append(fig.add_subplot(ax[2, 1]))\naxes.append(fig.add_subplot(ax[2, 2]))\naxes.append(fig.add_subplot(ax[1, 0: ]))\n\nPokeball_Crimson = '#EE1515'\nPokeball_Shark = '#222224'\nPokebll_Gallery = '#F0F0F0'\n    \ncolors = {\n        'Bug': '#A8B820',\n        'Dark': '#705848',\n        'Dragon': '#7038F8',\n        'Electric': '#F8D030',\n        'Fairy': '#F0B6BC',\n        'Fighting': '#C03028',\n        'Fire': '#F08030',\n        'Flying': '#A890F0',\n        'Ghost': '#705898',\n        'Grass': '#78C850',\n        'Ground': '#E0C068',\n        'Ice': '#98D8D8',\n        'Normal': '#A8A878',\n        'Poison': '#A040A0',\n        'Psychic': '#F85888',\n        'Rock': '#B8A038',\n        'Steel': '#B8B8D0',\n        'Water': '#6890F0'\n    }\n\nfor ax in tqdm(axes):\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.spines['left'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n\nfor i in tqdm([1, 2, 3, 4, 5, 6, 'all']):\n    if i == 'all':\n        ax = axes[6]\n        sub = pie_chart(.85, i, single_type, .575, 275)\n        df_generation = single_type.loc[single_type['Generation'] == i]\n        legend = ax.legend(title = 'Pokemon Types',\n                    title_fontsize = 24,\n                    bbox_to_anchor = (0, 0, 2.2, 1.12),\n                    labels = \"Type \" + df_generation.sort_values(by = 'id')['Type'].astype('str'),\n                    labelcolor = df_generation.sort_values(by = 'id')['Type'].apply(lambda x: colors[x]),\n                    fontsize = 20,\n                    borderpad = 1,\n                    facecolor = Pokebll_Gallery,\n                    edgecolor = Pokeball_Shark)\n        plt.setp(legend.get_title(),\n                 color = Pokeball_Crimson,\n                 fontstyle = 'normal',\n                 fontfamily = 'monospace')\n    else:\n        ax = axes[i - 1]\n        sub = pie_chart(.7, i, single_type, .585, 250)\n\ntitle = fig.suptitle(\"Distribution of Pokemon Types in Different Generations\",\n                     fontweight = 'black',\n                     fontstretch = 'expanded',\n                     fontstyle = 'normal',\n                     fontfamily = 'monospace',\n                     fontsize = 30,\n                     y = .9,\n                     color = Pokeball_Crimson)\n\nfig.savefig('pokemon_type_analysis_matplotlib.png', transparent = True)\n\nplt.show()","86278246":"def to_png(array):\n    out = BytesIO()\n    image = Image.fromarray(array)\n    image.save(out, format = 'png')\n    return out.getvalue()\n\ndef image_b64encode(image):\n    image_url = []\n    for layer in tqdm(image):\n        png = to_png(layer)\n        layer_url = 'data:image\/png;base64,' + base64.b64encode(png).decode('utf-8')\n        image_url.append(layer_url)\n    return image_url\n\nimage_urls = []\nfor i in tqdm(['1', '2', '3', '4', '5', '6', 'all']):\n    images = [io.imread('.\/pokeballs\/pokeball_' + i + '.png')]\n    image_urls.append(image_b64encode(np.array(images)))","51e61a73":"output_file(\"pokemon_type_analysis_of_one_generation_bokeh.html\", title = \"Pokemon Type Analysis of One Generation\")\n\nTOOLTIPS = [\n    ('GENERATION', '@Generation'),\n    ('TYPE', '@Type'),\n    ('NUM', '@id'),\n    ('PERCENTAGE', '@percentage')\n]\n\nplot = figure(width = 900, height = 900,\n              title = \"Pokemon Type Analysis of One Generation\",\n              tools = 'pan, hover, wheel_zoom, box_zoom, reset, save',\n              tooltips = TOOLTIPS,\n              x_range = (-1.0, 1.0),\n              y_range = (-1.0, 1.0))\n\ndef single_generation_bokeh(generation, x = 0, y = 0, legend = True):\n    Pokeball_Crimson = '#EE1515'\n    Pokeball_Shark = '#222224'\n    \n    colors = {\n        'Bug': '#A8B820',\n        'Dark': '#705848',\n        'Dragon': '#7038F8',\n        'Electric': '#F8D030',\n        'Fairy': '#F0B6BC',\n        'Fighting': '#C03028',\n        'Fire': '#F08030',\n        'Flying': '#A890F0',\n        'Ghost': '#705898',\n        'Grass': '#78C850',\n        'Ground': '#E0C068',\n        'Ice': '#98D8D8',\n        'Normal': '#A8A878',\n        'Poison': '#A040A0',\n        'Psychic': '#F85888',\n        'Rock': '#B8A038',\n        'Steel': '#B8B8D0',\n        'Water': '#6890F0'\n    }\n    \n    edgecolors = {\n        'Bug': '#D8E030',\n        'Dark': '#A8A878',\n        'Dragon': '#B8A0F8',\n        'Electric': '#F8F878',\n        'Fairy': '#F5CAD1',\n        'Fighting': '#F08030',\n        'Fire': '#F8D030',\n        'Flying': '#C8C0F8',\n        'Ghost': '#A890F0',\n        'Grass': '#C0F860',\n        'Ground': '#F8F878',\n        'Ice': '#D0F8E8',\n        'Normal': '#D8D8D0',\n        'Poison': '#D880B8',\n        'Psychic': '#F8C0B0',\n        'Rock': '#E0C068',\n        'Steel': '#D8D8C0',\n        'Water': '#98D8D8'\n    }\n    \n    df_generation = single_type.loc[single_type['Generation'] == generation].copy()\n    \n    sorted_types = df_generation.sort_values(by = 'id')['Type']\n    proportion_all = zip(single_type.loc[single_type['Generation'] == 'all'].sort_values(by = 'id')['id'] \/\n                             single_type.loc[single_type['Generation'] == 'all'].sort_values(by = 'id')['id'].sum(),\n                         single_type.loc[single_type['Generation'] == 'all'].sort_values(by = 'id')['Type'])\n    sorted_types_all = {}\n    for i , j in proportion_all:\n        sorted_types_all.update({j : i})\n    sorted_types_all = OrderedDict([(i, sorted_types_all[i]) for i in sorted_types])\n    \n    df_generation = df_generation.sort_values(by = 'id').reset_index()\n    df_generation['angle'] = df_generation['id'] \/ df_generation['id'].sum() * 2 * pi\n    df_generation['color'] = df_generation['Type'].apply(lambda x: colors[x])\n    df_generation['edgecolors'] = df_generation['Type'].apply(lambda x: edgecolors[x])\n    df_generation['percentage'] = df_generation['id'] \/ df_generation['id'].sum() * 100\n    \n    float_format = lambda df: '{:,.2f}%'.format(df['percentage'])\n    df_generation['percentage'] = df_generation.apply(float_format, axis = 1)\n\n    start_angle = pi \/ 2\n    end_angle = pi \/ 2\n    legend_items = []\n    for i in sorted_types_all:\n        start_angle = start_angle\n        end_angle += df_generation.loc[df_generation['Type'] == i]['angle'].values[0]\n        renderer = plot.annular_wedge(x = x, y = y, inner_radius = 100,\n                                      outer_radius = (1 + sorted_types_all.get(i) * 20) * 100,\n                                      outer_radius_units = 'screen', inner_radius_units = 'screen',\n                                      start_angle = start_angle, end_angle = end_angle,\n                                      line_color = 'edgecolors', fill_color = 'color',\n                                      source = df_generation.loc[df_generation['Type'] == i], alpha = .6)\n        legend_items.append(LegendItem(label = 'Type ' + i, renderers = [renderer]))\n        df_generation['percentage'] = df_generation['percentage'].astype(str)\n        df_generation['percentage'] = df_generation['percentage'].str.pad(38, side = 'left')\n        source = ColumnDataSource(df_generation.loc[df_generation['Type'] == i])\n        label = LabelSet(x = x, y = y, text = 'percentage',\n                         angle = start_angle,\n                         text_font_size = str(10 + round(sorted_types_all.get(i) * 100)) + 'px',\n                         text_color = 'edgecolors',\n                         source = source, render_mode = 'canvas')\n        plot.add_layout(label)\n        \n        start_angle = end_angle\n    \n    if legend == False:\n        pass\n    else:\n        legend = Legend(items = legend_items, click_policy = 'mute',\n                        location = 'top_left',\n                        title = 'Pokemon Types',\n                        title_text_color = Pokeball_Crimson,\n                        title_text_alpha = .9,\n                        title_text_font = 'Belgium',\n                        title_text_font_style = 'bold',\n                        title_text_font_size = '14px',\n                        label_text_color = Pokeball_Shark,\n                        label_text_alpha = .8,\n                        label_text_font = 'Belgium',\n                        label_text_font_style = 'normal',\n                        label_text_font_size = '12px')\n        plot.add_layout(legend, 'right')\n\n    if generation == 'all':\n        plot.image_url(\n            url = [image_urls[-1]],\n            x = x, y = y,\n            h = 300, h_units = 'screen',\n            w = 300, w_units = 'screen',\n            anchor = 'center'\n        )\n    else:\n        plot.image_url(\n            url = [image_urls[generation - 1]],\n            x = x, y = y,\n            h = 300, h_units = 'screen',\n            w = 300, w_units = 'screen',\n            anchor = 'center'\n        )\n    \n    doc = curdoc()\n    doc.add_root(plot)\n\nsingle_generation_bokeh('all')\n\nplot.axis.axis_label = None\nplot.axis.visible = False\nplot.grid.grid_line_color = None\n\nshow(plot)","686f317a":"output_file(\"pokemon_type_analysis_of_all_generations_bokeh.html\",\n            title = \"Pokemon Type Analysis of All Generations\")\n\nTOOLTIPS = [\n    ('GENERATION', '@Generation'),\n    ('TYPE', '@Type'),\n    ('NUM', '@id'),\n    ('PERCENTAGE', '@percentage')\n]\n\nplot = figure(width = 2000, height = 1600,\n              title = \"Pokemon Type Analysis of All Generations\",\n              tools = 'pan, hover, wheel_zoom, box_zoom, reset, save',\n              tooltips = TOOLTIPS,\n              x_range = (-5.0, 5.0),\n              y_range = (-4.0, 4.0))\n\ncoordinate = [(.866, -.5), (.866, .5), (0, 1), (-.866, .5), (-.866, -.5), (0, -1)]\nfor generation in tqdm([1, 2, 3, 4, 5, 6, 'all']):\n    if generation == 'all':\n        single_generation_bokeh(generation)\n    else:\n        single_generation_bokeh(generation,\n                                x = coordinate[generation - 1][1] * 3,\n                                y = coordinate[generation - 1][0] * 3,\n                                legend = False)\n\nplot.axis.axis_label = None\nplot.axis.visible = False\nplot.grid.grid_line_color = None\n\nshow(plot)","3ff94ef3":"pokeballs = [Image.open(f'.\/pokeballs\/pokeball_all.png')]\n\nPokeball_Crimson = '#EE1515'\nPokeball_Shark = '#222224'\nPokebll_Gallery = '#F0F0F0'\n\ndef pie_chart_plotly(generation):\n    colors = {\n        'Bug': '#A8B820',\n        'Dark': '#705848',\n        'Dragon': '#7038F8',\n        'Electric': '#F8D030',\n        'Fairy': '#F0B6BC',\n        'Fighting': '#C03028',\n        'Fire': '#F08030',\n        'Flying': '#A890F0',\n        'Ghost': '#705898',\n        'Grass': '#78C850',\n        'Ground': '#E0C068',\n        'Ice': '#98D8D8',\n        'Normal': '#A8A878',\n        'Poison': '#A040A0',\n        'Psychic': '#F85888',\n        'Rock': '#B8A038',\n        'Steel': '#B8B8D0',\n        'Water': '#6890F0'\n    }\n\n    edgecolors = {\n            'Bug': '#D8E030',\n            'Dark': '#A8A878',\n            'Dragon': '#B8A0F8',\n            'Electric': '#F8F878',\n            'Fairy': '#F5CAD1',\n            'Fighting': '#F08030',\n            'Fire': '#F8D030',\n            'Flying': '#C8C0F8',\n            'Ghost': '#A890F0',\n            'Grass': '#C0F860',\n            'Ground': '#F8F878',\n            'Ice': '#D0F8E8',\n            'Normal': '#D8D8D0',\n            'Poison': '#D880B8',\n            'Psychic': '#F8C0B0',\n            'Rock': '#E0C068',\n            'Steel': '#D8D8C0',\n            'Water': '#98D8D8'\n        }\n\n    colors = df_generation['Type'].apply(lambda x: colors[x]).to_list()\n    edgecolors = df_generation['Type'].apply(lambda x: edgecolors[x]).to_list()\n\n    pie_chart = go.Pie(\n        values = df_generation['id'],\n        labels = df_generation['Type'],\n        name = generation,\n        hole = 0.4,\n        opacity = .85,\n        hovertext = df_generation['Generation'],\n        hoverlabel = dict(\n            #bgcolor = 'white',\n            font_size = 10,\n            font_family = 'Verdana'\n        ),\n        hovertemplate = (\n            'GENERATION: <b>%{text}<\/b><br>' + \n            'TYPE: <b>%{label}<\/b><br><br>' + \n            'PERCENTAGE: <b>%{percent}<\/b><br>' + \n            'NUM: <b>%{value}<\/b><br>'\n        ),\n        marker = dict(\n            colors = colors,\n            line = dict(\n                color = edgecolors, width = 2\n            )\n        ),\n        textposition = 'inside', textinfo = 'percent + label', textfont_size = 16,\n        insidetextorientation = 'radial',\n        title = 'Generation All',\n        titleposition = 'top center',\n        title_font = dict(\n            size = 25, family = 'Verdana', color = Pokeball_Shark\n        ),\n        showlegend = True,\n        #direction = 'clockwise'\n    )\n    return pie_chart\n\nfig = go.Figure(data = (pie_chart_plotly('all')))\n\nimages = []\n\ndef images_dict(pokeball, x, y):\n    return dict(\n            source = pokeball,\n            xref = 'x', yref = 'y',\n            x = x, y = y,\n            sizex = .585, sizey = .585,\n            xanchor = 'center', yanchor = 'middle',\n            opacity = 1, layer = \"above\",\n    )\n\ncoordinate = [\n    (.492, .475),\n]\n\nfor i, xy in enumerate(coordinate):\n    images.append(images_dict(pokeballs[i], xy[0], xy[1]))\n\nfig.update_layout(images = images)\n\nfig.update_layout(\n    width = 800, height = 800,\n    title = {\n            'text': 'Pokemon Type Analysis of One Generation',\n            'y': .85,\n            'x': .38,\n        },\n    xaxis = dict(\n        showgrid = False, showline = False, zeroline = False,\n        showticklabels = False, ticks = '',\n        range = [0, 1]\n    ),\n    yaxis = dict(\n        showgrid = False, showline = False, zeroline = False,\n        showticklabels = False, ticks = '',\n        range = [0, 1]\n    ),\n    paper_bgcolor = '#fff',\n    plot_bgcolor = '#fff',\n    legend = dict(\n        traceorder = 'reversed',\n        title = 'Pokemon Types',\n        title_font_family = 'Belgium',\n        title_font_size = 14,\n        title_font_color = Pokeball_Crimson,\n        font = dict(\n            family = 'Belgium',\n            size = 12,\n            color = Pokeball_Shark\n        ),\n        bgcolor = Pokebll_Gallery,\n        bordercolor = Pokeball_Crimson,\n        borderwidth = 2,\n        itemwidth = 45,\n        orientation = 'v',\n        yanchor = 'middle',\n        y = .5,\n        xanchor = 'center',\n        x = 1.5,\n    )\n)\n\nfig.show()","c8d57947":"pokeballs = []\nfor i in [1, 2, 3, 4, 5, 6, 'all']:\n    pokeballs.append(Image.open(f'.\/pokeballs\/pokeball_{i}.png'))\n\nPokeball_Crimson = '#EE1515'\nPokeball_Shark = '#222224'\nPokebll_Gallery = '#F0F0F0'\n\nfig = make_subplots(rows = 3, cols = 3,\n                    specs = [\n                        [{'type': 'pie'}, {'type': 'pie'}, {'type': 'pie'}],\n                        [{'type': 'pie'}, {'type': 'pie'}, {'type': 'pie'}],\n                        [{'type': 'pie'}, {'type': 'pie'}, {'type': 'pie'}]\n                    ],\n                    subplot_titles = [\n                        'Generation 1', 'Generation 2', 'Generation 3',\n                        '', 'Generation All', '',\n                        'Generation 4', 'Generation 5', 'Generation 6'\n                    ],\n                   )\n\ndef pie_chart_plotly(generation):\n    colors = {\n        'Bug': '#A8B820',\n        'Dark': '#705848',\n        'Dragon': '#7038F8',\n        'Electric': '#F8D030',\n        'Fairy': '#F0B6BC',\n        'Fighting': '#C03028',\n        'Fire': '#F08030',\n        'Flying': '#A890F0',\n        'Ghost': '#705898',\n        'Grass': '#78C850',\n        'Ground': '#E0C068',\n        'Ice': '#98D8D8',\n        'Normal': '#A8A878',\n        'Poison': '#A040A0',\n        'Psychic': '#F85888',\n        'Rock': '#B8A038',\n        'Steel': '#B8B8D0',\n        'Water': '#6890F0'\n    }\n\n    edgecolors = {\n            'Bug': '#D8E030',\n            'Dark': '#A8A878',\n            'Dragon': '#B8A0F8',\n            'Electric': '#F8F878',\n            'Fairy': '#F5CAD1',\n            'Fighting': '#F08030',\n            'Fire': '#F8D030',\n            'Flying': '#C8C0F8',\n            'Ghost': '#A890F0',\n            'Grass': '#C0F860',\n            'Ground': '#F8F878',\n            'Ice': '#D0F8E8',\n            'Normal': '#D8D8D0',\n            'Poison': '#D880B8',\n            'Psychic': '#F8C0B0',\n            'Rock': '#E0C068',\n            'Steel': '#D8D8C0',\n            'Water': '#98D8D8'\n        }\n    \n    df_generation = single_type.loc[single_type['Generation'] == generation]\n\n    colors = df_generation['Type'].apply(lambda x: colors[x]).to_list()\n    edgecolors = df_generation['Type'].apply(lambda x: edgecolors[x]).to_list()\n    \n    if generation in [1, 2, 3]:\n        row = 1\n        col = generation\n        showlegend = False\n    elif generation in [4, 5, 6]:\n        row = 3\n        col = generation - 3\n        showlegend = False\n    else:\n        row = 2\n        col = 2\n        showlegend = True\n\n    pie_chart = go.Pie(\n        values = df_generation['id'],\n        labels = df_generation['Type'],\n        name = generation,\n        hole = 0.4,\n        opacity = .85,\n        hovertext = df_generation['Generation'],\n        hoverlabel = dict(\n            #bgcolor = 'white',\n            font_size = 10,\n            font_family = 'Verdana'\n        ),\n        hovertemplate = (\n            'GENERATION: <b>%{text}<\/b><br>' + \n            'TYPE: <b>%{label}<\/b><br><br>' + \n            'PERCENTAGE: <b>%{percent}<\/b><br>' + \n            'NUM: <b>%{value}<\/b><br>'\n        ),\n        marker = dict(\n            colors = colors,\n            line = dict(\n                color = edgecolors, width = 2\n            )\n        ),\n        textposition = 'inside', textinfo = 'percent + label', textfont_size = 16,\n        insidetextorientation = 'radial',\n        titleposition = 'top center',\n        title_font = dict(\n            size = 25, family = 'Verdana', color = Pokeball_Shark\n        ),\n        showlegend = showlegend,\n        #direction = 'clockwise'\n    )\n        \n    fig.add_trace(pie_chart, row = row, col = col)\n\nfor generation in tqdm([1, 2, 3, 4, 5, 6, 'all']):\n    pie_chart_plotly(generation)\n\nimages = []\n\ndef images_dict(pokeball, x, y):\n    return dict(\n            source = pokeball,\n            xref = 'x', yref = 'y',\n            x = x, y = y,\n            sizex = .95, sizey = .95,\n            xanchor = 'center', yanchor = 'middle',\n            opacity = 1, layer = \"above\",\n    )\n\ncoordinate = [\n    (1, 6.22),\n    (3.485, 6.22),\n    (5.975, 6.22),\n    (1, .775),\n    (3.485, .775),\n    (5.975, .775),\n    (3.485, 3.5)\n]\n\nfor i, xy in tqdm(enumerate(coordinate)):\n    images.append(images_dict(pokeballs[i], xy[0], xy[1]))\n\nfig.update_layout(images = images)\n\nfig.update_layout(\n    width = 1800, height = 1800,\n    title = {\n            'text': 'Pokemon Type Analysis of All Generations',\n            'y': .98,\n            'x': .5,\n        },\n    xaxis = dict(\n        showgrid = False, showline = False, zeroline = False,\n        showticklabels = False, ticks = '',\n        range = [0, 7]\n    ),\n    yaxis = dict(\n        showgrid = False, showline = False, zeroline = False,\n        showticklabels = False, ticks = '',\n        range = [0, 7]\n    ),\n    paper_bgcolor = '#fff',\n    plot_bgcolor = '#fff',\n    legend = dict(\n        traceorder = 'reversed',\n        title = 'Pokemon Types',\n        title_font_family = 'Belgium',\n        title_font_size = 14,\n        title_font_color = Pokeball_Crimson,\n        font = dict(\n            family = 'Belgium',\n            size = 12,\n            color = Pokeball_Shark\n        ),\n        bgcolor = Pokebll_Gallery,\n        bordercolor = Pokeball_Crimson,\n        borderwidth = 2,\n        itemwidth = 45,\n        orientation = 'v',\n        yanchor = 'middle',\n        y = .5,\n        xanchor = 'center',\n        x = .7,\n    )\n)\n\nfig.show()","24b6e521":"pokeballs = [Image.open(f'.\/pokeballs\/pokeball_all.png')]\n\nPokeball_Crimson = '#EE1515'\nPokeball_Shark = '#222224'\nPokebll_Gallery = '#F0F0F0'\n\ndef bar_polar_plotly(generation):\n    colors = {\n        'Bug': '#A8B820',\n        'Dark': '#705848',\n        'Dragon': '#7038F8',\n        'Electric': '#F8D030',\n        'Fairy': '#F0B6BC',\n        'Fighting': '#C03028',\n        'Fire': '#F08030',\n        'Flying': '#A890F0',\n        'Ghost': '#705898',\n        'Grass': '#78C850',\n        'Ground': '#E0C068',\n        'Ice': '#98D8D8',\n        'Normal': '#A8A878',\n        'Poison': '#A040A0',\n        'Psychic': '#F85888',\n        'Rock': '#B8A038',\n        'Steel': '#B8B8D0',\n        'Water': '#6890F0'\n    }\n\n    edgecolors = {\n            'Bug': '#D8E030',\n            'Dark': '#A8A878',\n            'Dragon': '#B8A0F8',\n            'Electric': '#F8F878',\n            'Fairy': '#F5CAD1',\n            'Fighting': '#F08030',\n            'Fire': '#F8D030',\n            'Flying': '#C8C0F8',\n            'Ghost': '#A890F0',\n            'Grass': '#C0F860',\n            'Ground': '#F8F878',\n            'Ice': '#D0F8E8',\n            'Normal': '#D8D8D0',\n            'Poison': '#D880B8',\n            'Psychic': '#F8C0B0',\n            'Rock': '#E0C068',\n            'Steel': '#D8D8C0',\n            'Water': '#98D8D8'\n        }\n    \n    df_generation_all = single_type.loc[single_type['Generation'] == 'all'].copy()\n    df_generation = single_type.loc[single_type['Generation'] == generation].copy()\n    df_generation = df_generation.sort_values(by = 'id').reset_index()\n \n    df_generation_all.loc[: , 'R'] = df_generation_all['id'] \/ df_generation_all['id'].sum()\n    dict_type_R = df_generation_all.set_index('Type').loc[: , 'R'].to_dict()\n    df_generation.loc[: , 'R'] = df_generation.loc[: , 'Type'].apply(lambda x: dict_type_R[x])\n    \n    colors = df_generation.loc[: , 'Type'].apply(lambda x: colors[x]).to_list()\n    edgecolors = df_generation.loc[: , 'Type'].apply(lambda x: edgecolors[x]).to_list()\n    \n    r = (df_generation['id'] \/ df_generation['id'].sum()).to_list()\n    num_slices = len(r)\n    labels = df_generation['Type']\n    theta = np.cumsum([360 * r[i] for i in range(num_slices)])\n    width = [360 * r[i] for i in range(num_slices)]\n    theta = np.subtract(theta, np.divide(width, 2))\n\n    bar_polar = go.Barpolar(\n        r = df_generation['R'].to_list(),\n        theta = theta,\n        width = width,\n        name = generation,\n        meta = [generation],\n        customdata = df_generation['id'].to_list(),\n        opacity = .85,\n        hovertext = labels,\n        hoverlabel = dict(\n            #bgcolor = 'white',\n            align = 'left',\n            font_size = 10,\n            font_family = 'Verdana'\n        ),\n        #text = generation,\n        hovertemplate = (\n            'GENERATION: <b>%{meta[0]}<\/b><br>' + \n            'TYPE: <b>%{hovertext}<\/b><br><br>' + \n            'PERCENTAGE: <b>%{r:.2f}<\/b><br>' + \n            'NUM: <b>%{customdata}<\/b><br>'\n        ),\n        marker = dict(\n            color = colors,\n            line = dict(\n                color = edgecolors, width = 2\n            )\n        ),\n        showlegend = False,\n        #direction = 'clockwise'\n    )\n    return bar_polar\n\nfig = go.Figure(data = (bar_polar_plotly('all')))\n\nimages = []\n\ndef images_dict(pokeball, x, y):\n    return dict(\n            source = pokeball,\n            xref = 'x', yref = 'y',\n            x = x, y = y,\n            sizex = .35, sizey = .35,\n            xanchor = 'center', yanchor = 'middle',\n            opacity = 1, layer = \"above\",\n    )\n\ncoordinate = [\n    (.5, .5),\n]\n\nfor i, xy in enumerate(coordinate):\n    images.append(images_dict(pokeballs[i], xy[0], xy[1]))\n\nfig.update_layout(images = images)\n\nfig.update_layout(\n    width = 800, height = 800,\n    title = {\n            'text': 'Pokemon Type Analysis of One Generation',\n            'y': .75,\n            'x': .5,\n        },\n    xaxis = dict(\n        showgrid = False, showline = False, zeroline = False,\n        showticklabels = False, ticks = '',\n        range = [0, 1]\n    ),\n    yaxis = dict(\n        showgrid = False, showline = False, zeroline = False,\n        showticklabels = False, ticks = '',\n        range = [0, 1]\n    ),\n    template = None,\n    polar = dict(\n        radialaxis = dict(\n            showgrid = False, showline = False, range = [0, .1], showticklabels = False, ticks = ''\n        ),\n        angularaxis = dict(\n            showgrid = False, showline = False, showticklabels = False, ticks = ''\n        )\n    ),\n    paper_bgcolor = '#fff',\n    plot_bgcolor = '#fff',\n    legend = dict(\n        traceorder = 'reversed',\n        title = 'Pokemon Types',\n        title_font_family = 'Belgium',\n        title_font_size = 14,\n        title_font_color = Pokeball_Crimson,\n        font = dict(\n            family = 'Belgium',\n            size = 12,\n            color = Pokeball_Shark\n        ),\n        bgcolor = Pokebll_Gallery,\n        bordercolor = Pokeball_Crimson,\n        borderwidth = 2,\n        itemwidth = 45,\n        orientation = 'v',\n        yanchor = 'middle',\n        y = .5,\n        xanchor = 'center',\n        x = 1.5,\n    )\n)\n\nfig.show()","4eb7fef0":"pokeballs = []\nfor i in [1, 2, 3, 4, 5, 6, 'all']:\n    pokeballs.append(Image.open(f'.\/pokeballs\/pokeball_{i}.png'))\n\nPokeball_Crimson = '#EE1515'\nPokeball_Shark = '#222224'\nPokebll_Gallery = '#F0F0F0'\n\nfig = make_subplots(rows = 3, cols = 3,\n                    specs = [\n                        [{'type': 'barpolar'}, {'type': 'barpolar'}, {'type': 'barpolar'}],\n                        [{'type': 'barpolar'}, {'type': 'barpolar'}, {'type': 'barpolar'}],\n                        [{'type': 'barpolar'}, {'type': 'barpolar'}, {'type': 'barpolar'}]\n                    ],\n                    subplot_titles = [\n                        'Generation 1', 'Generation 2', 'Generation 3',\n                        '', 'Generation All', '',\n                        'Generation 4', 'Generation 5', 'Generation 6'\n                    ],\n                   )\n\n\ndef bar_polar_plotly(generation):\n    colors = {\n        'Bug': '#A8B820',\n        'Dark': '#705848',\n        'Dragon': '#7038F8',\n        'Electric': '#F8D030',\n        'Fairy': '#F0B6BC',\n        'Fighting': '#C03028',\n        'Fire': '#F08030',\n        'Flying': '#A890F0',\n        'Ghost': '#705898',\n        'Grass': '#78C850',\n        'Ground': '#E0C068',\n        'Ice': '#98D8D8',\n        'Normal': '#A8A878',\n        'Poison': '#A040A0',\n        'Psychic': '#F85888',\n        'Rock': '#B8A038',\n        'Steel': '#B8B8D0',\n        'Water': '#6890F0'\n    }\n\n    edgecolors = {\n            'Bug': '#D8E030',\n            'Dark': '#A8A878',\n            'Dragon': '#B8A0F8',\n            'Electric': '#F8F878',\n            'Fairy': '#F5CAD1',\n            'Fighting': '#F08030',\n            'Fire': '#F8D030',\n            'Flying': '#C8C0F8',\n            'Ghost': '#A890F0',\n            'Grass': '#C0F860',\n            'Ground': '#F8F878',\n            'Ice': '#D0F8E8',\n            'Normal': '#D8D8D0',\n            'Poison': '#D880B8',\n            'Psychic': '#F8C0B0',\n            'Rock': '#E0C068',\n            'Steel': '#D8D8C0',\n            'Water': '#98D8D8'\n        }\n    \n    df_generation_all = single_type.loc[single_type['Generation'] == 'all'].copy()\n    df_generation = single_type.loc[single_type['Generation'] == generation].copy()\n    df_generation = df_generation.sort_values(by = 'id').reset_index()\n \n    df_generation_all.loc[: , 'R'] = df_generation_all['id'] \/ df_generation_all['id'].sum()\n    dict_type_R = df_generation_all.set_index('Type').loc[: , 'R'].to_dict()\n    df_generation.loc[: , 'R'] = df_generation.loc[: , 'Type'].apply(lambda x: dict_type_R[x])\n    \n    colors = df_generation.loc[: , 'Type'].apply(lambda x: colors[x]).to_list()\n    edgecolors = df_generation.loc[: , 'Type'].apply(lambda x: edgecolors[x]).to_list()\n    \n    r = (df_generation['id'] \/ df_generation['id'].sum()).to_list()\n    num_slices = len(r)\n    labels = df_generation['Type']\n    theta = np.cumsum([360 * r[i] for i in range(num_slices)])\n    width = [360 * r[i] for i in range(num_slices)]\n    theta = np.subtract(theta, np.divide(width, 2))\n    \n    if generation in [1, 2, 3]:\n        row = 1\n        col = generation\n        showlegend = False\n    elif generation in [4, 5, 6]:\n        row = 3\n        col = generation - 3\n        showlegend = False\n    else:\n        row = 2\n        col = 2\n        showlegend = False\n\n    bar_polar = go.Barpolar(\n        r = df_generation['R'].to_list(),\n        theta = theta,\n        width = width,\n        name = generation,\n        meta = [generation],\n        customdata = df_generation['id'].to_list(),\n        opacity = .85,\n        hovertext = labels,\n        hoverlabel = dict(\n            #bgcolor = 'white',\n            align = 'left',\n            font_size = 10,\n            font_family = 'Verdana'\n        ),\n        text = generation,\n        hovertemplate = (\n            'GENERATION: <b>%{meta[0]}<\/b><br>' + \n            'TYPE: <b>%{hovertext}<\/b><br><br>' + \n            'PERCENTAGE: <b>%{r:.2f}<\/b><br>' + \n            'NUM: <b>%{customdata}<\/b><br>'\n        ),\n        marker = dict(\n            color = colors,\n            line = dict(\n                color = edgecolors, width = 2\n            )\n        ),\n        showlegend = showlegend,\n        #direction = 'clockwise'\n    )\n    fig.add_trace(bar_polar, row = row, col = col)\n\nfor generation in tqdm([1, 2, 3, 4, 5, 6, 'all']): \n    bar_polar_plotly(generation)\n\nimages = []\n\ndef images_dict(pokeball, x, y):\n    return dict(\n            source = pokeball,\n            xref = 'x', yref = 'y',\n            x = x, y = y,\n            sizex = .6, sizey = .6,\n            xanchor = 'center', yanchor = 'middle',\n            opacity = 1, layer = \"above\",\n    )\n\ncoordinate = [\n    (1, 6.22),\n    (3.485, 6.22),\n    (5.975, 6.22),\n    (1, .775),\n    (3.485, .775),\n    (5.975, .775),\n    (3.485, 3.5)\n]\n\nfor i, xy in tqdm(enumerate(coordinate)):\n    images.append(images_dict(pokeballs[i], xy[0], xy[1]))\n\nfig.update_layout(images = images)\n\nfig.update_layout(\n    width = 1800, height = 1800,\n    title = {\n            'text': 'Pokemon Type Analysis of All Generations',\n            'y': .98,\n            'x': .5,\n        },\n    xaxis = dict(\n        showgrid = False, showline = False, zeroline = False,\n        showticklabels = False, ticks = '',\n        range = [0, 7]\n    ),\n    yaxis = dict(\n        showgrid = False, showline = False, zeroline = False,\n        showticklabels = False, ticks = '',\n        range = [0, 7]\n    ),\n    template = None,\n    polar = dict(\n        radialaxis = dict(\n            showgrid = False, showline = False, range = [0, .1], showticklabels = False, ticks = ''\n        ),\n        angularaxis = dict(\n            showgrid = False, showline = False, showticklabels = False, ticks = ''\n        )\n    ),\n    polar2 = dict(\n        radialaxis = dict(\n            showgrid = False, showline = False, range = [0, .1], showticklabels = False, ticks = ''\n        ),\n        angularaxis = dict(\n            showgrid = False, showline = False, showticklabels = False, ticks = ''\n        )\n    ),\n    polar3 = dict(\n        radialaxis = dict(\n            showgrid = False, showline = False, range = [0, .1], showticklabels = False, ticks = ''\n        ),\n        angularaxis = dict(\n            showgrid = False, showline = False, showticklabels = False, ticks = ''\n        )\n    ),\n    polar5 = dict(\n        radialaxis = dict(\n            showgrid = False, showline = False, range = [0, .1], showticklabels = False, ticks = ''\n        ),\n        angularaxis = dict(\n            showgrid = False, showline = False, showticklabels = False, ticks = ''\n        )\n    ),\n    polar7 = dict(\n        radialaxis = dict(\n            showgrid = False, showline = False, range = [0, .1], showticklabels = False, ticks = ''\n        ),\n        angularaxis = dict(\n            showgrid = False, showline = False, showticklabels = False, ticks = ''\n        )\n    ),\n    polar8 = dict(\n        radialaxis = dict(\n            showgrid = False, showline = False, range = [0, .1], showticklabels = False, ticks = ''\n        ),\n        angularaxis = dict(\n            showgrid = False, showline = False, showticklabels = False, ticks = ''\n        )\n    ),\n    polar9 = dict(\n        radialaxis = dict(\n            showgrid = False, showline = False, range = [0, .1], showticklabels = False, ticks = ''\n        ),\n        angularaxis = dict(\n            showgrid = False, showline = False, showticklabels = False, ticks = ''\n        )\n    ),\n    paper_bgcolor = '#fff',\n    plot_bgcolor = '#fff',\n    legend = dict(\n        traceorder = 'reversed',\n        title = 'Pokemon Types',\n        title_font_family = 'Belgium',\n        title_font_size = 14,\n        title_font_color = Pokeball_Crimson,\n        font = dict(\n            family = 'Belgium',\n            size = 12,\n            color = Pokeball_Shark\n        ),\n        bgcolor = Pokebll_Gallery,\n        bordercolor = Pokeball_Crimson,\n        borderwidth = 2,\n        itemwidth = 45,\n        orientation = 'v',\n        yanchor = 'middle',\n        y = .5,\n        xanchor = 'center',\n        x = .75,\n    )\n)\n\nfig.show()","7a4673a5":"# Data Visualization","ba853c8f":"# Simple EDA","9335c2ec":"## plotly","669b9f16":"## matplotlib","856f2ba8":"## bokeh"}}