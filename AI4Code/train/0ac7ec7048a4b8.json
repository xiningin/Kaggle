{"cell_type":{"785463e7":"code","eacc54f5":"code","65260ba5":"code","d514e36d":"code","d3598b6e":"code","a2b6944a":"code","d7d58ec4":"code","97049957":"code","49f48b0d":"code","7ed6117b":"code","a333d029":"code","37f635cf":"code","05201b78":"code","bca35cb9":"code","39a3e39c":"code","f507581c":"code","97979131":"code","7530b8f7":"code","c4b21865":"code","b1ac583f":"code","4fafadd1":"code","e12ea928":"code","f0afac04":"code","f7e2badc":"code","be390bc5":"code","ba862721":"code","0fa78a49":"code","860a3c8a":"code","add6ba2d":"code","6011996d":"code","77d7dfda":"code","48dd195b":"code","a5d248d5":"code","be06f1d6":"code","4d5bb954":"code","30076ce6":"code","4da4663d":"code","15d04268":"code","bedd7e4c":"code","ff074770":"code","95fe735d":"code","269c4321":"code","40da3a97":"code","99f568e3":"code","835c06f4":"code","f1f5c4d9":"code","3820737f":"code","75c302dd":"code","a63ce146":"code","f2e844f9":"code","62da7333":"code","1026c773":"code","cb69874f":"code","e044a86f":"code","71fba4ce":"code","501abe3f":"markdown","a925eaf4":"markdown","dac1a6fa":"markdown","9bdb7569":"markdown","b34d13d8":"markdown","9c669636":"markdown","f244a943":"markdown","c2c72b53":"markdown","9454bed5":"markdown","55502931":"markdown","de19e6fa":"markdown","9f685350":"markdown","004f0dca":"markdown"},"source":{"785463e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eacc54f5":"PATH = \"\/kaggle\/input\/dataset\/\"\nPATH_WEATHER = os.path.join(PATH, \"weather_data_2014_wash_U.csv\")\nPATH_FLIGHT = os.path.join(PATH, \"weather_flights_washU.csv\")","65260ba5":"import datetime, warnings, scipy \nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom matplotlib.patches import ConnectionPatch\nfrom collections import OrderedDict\nfrom matplotlib.gridspec import GridSpec\nfrom sklearn import metrics, linear_model\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nfrom scipy.optimize import curve_fit\nimport string\nimport re\nimport os\nfrom scipy.stats import zscore\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation, Dropout\nimport io\nimport requests\nfrom sklearn import metrics\nfrom sklearn.model_selection import KFold\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import scale, MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier","d514e36d":"import tensorflow.keras\nimport pandas as pd\nimport sklearn as sk\nimport tensorflow as tf\nimport sys\n\nprint(f\"Tensor Flow Version: {tf.__version__}\")\nprint(f\"Keras Version: {tensorflow.keras.__version__}\")\nprint()\nprint(f\"Python {sys.version}\")\nprint(f\"Pandas {pd.__version__}\")\nprint(f\"Scikit-Learn {sk.__version__}\")\nprint(\"GPU is\", \"available\" if tf.test.is_gpu_available() \\\n      else \"NOT AVAILABLE\")","d3598b6e":"df_weather = pd.read_csv(PATH_WEATHER)\ndisplay(df_weather)","a2b6944a":"df_flight = pd.read_csv(PATH_FLIGHT)\ndisplay(df_flight)","d7d58ec4":"df_flight = df_flight.drop(['Unnamed: 0'], axis=1)\ndf_flight.columns.values","97049957":"df_flight.isnull().sum()","49f48b0d":"df_flight.fillna(df_flight.median(),inplace=True)\ndf_flight['date'] = pd.to_datetime(df_flight[['year','month', 'day']])","7ed6117b":"def format_heure(chaine):\n    if pd.isnull(chaine):\n        return np.nan\n    else:\n        if chaine == 2400: chaine = 0\n        chaine = \"{0:04d}\".format(int(chaine))\n        heure = datetime.time(int(chaine[0:2]), int(chaine[2:4]))\n        return heure\n#_____________________________________________________________________\n# Function that combines a date and time to produce a datetime.datetime\ndef combine_date_heure(x):\n    if pd.isnull(x[0]) or pd.isnull(x[1]):\n        return np.nan\n    else:\n        return datetime.datetime.combine(x[0],x[1])\n#_______________________________________________________________________________\n# Function that combine two columns of the dataframe to create a datetime format\ndef create_flight_time(df_flight, col):    \n    liste = []\n    for index, cols in df_flight[['date', col]].iterrows():    \n        if pd.isnull(cols[1]):\n            liste.append(np.nan)\n        elif float(cols[1]) == 2400:\n            cols[0] += datetime.timedelta(days=1)\n            cols[1] = datetime.time(0,0)\n            liste.append(combine_date_heure(cols))\n        else:\n            cols[1] = format_heure(cols[1])\n            liste.append(combine_date_heure(cols))\n    return pd.Series(liste)","a333d029":"df_flight['dep_time'] = create_flight_time(df_flight, 'dep_time')\ndf_flight['arr_time'] = create_flight_time(df_flight, 'arr_time')","37f635cf":"display(df_flight)","05201b78":"variables_to_remove = ['year', 'month', 'day', 'hour', 'time_hour', 'dayofweek', 'carrier', 'tailnum', 'flight', \n       'cancelled', 'air_time', 'carrierdelay',\n       'weatherdelay', 'nasdelay', 'securitydelay', 'lateaircraftdelay',\n       'minute']\ndf_flight.drop(variables_to_remove, axis = 1, inplace = True)\ndisplay(df_flight)","bca35cb9":"df_flight.to_csv(\"flight_data_yuqihan1.csv\", index=False)","39a3e39c":"df_pre1 = df_flight[df_flight['origin'].isin(['ATL'])]\ndisplay(df_pre1)","f507581c":"df_pre1 = df_pre1.drop(columns = ['IATA', 'dep_time', 'arr_time', 'origin', 'distance', 'date', 'arr_delay'])\nx = df_pre1.drop(columns = ['dep_delay'])\ndisplay(x)","97979131":"y = df_pre1['dep_delay'].values\ndisplay(y)","7530b8f7":"x_train, x_test, y_train, y_test = train_test_split(    \n    x, y, test_size=0.25, random_state=42)\nmodel = Sequential()\nmodel.add(Dense(1024, input_dim=x.shape[1], activation='relu')) # Hidden 1\nmodel.add(Dropout(0.2)) \nmodel.add(Dense(1024, activation='relu')) # Hidden 2\nmodel.add(Dropout(0.2)) \nmodel.add(Dense(1, activation='sigmoid')) # Output\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel_new = model.fit(x_train,y_train,validation_data=(x_test,y_test),\n          verbose=2,epochs=5)","c4b21865":"def plot_chart (model):\n  loss = model.history['loss']\n  val_loss = model.history['val_loss']\n  x = range(1, len(loss) + 1)\n  plt.figure(figsize=(15, 8))\n  plt.subplot(1, 2, 2)\n  plt.plot(x, loss, 'b', label='Training mse')\n  plt.plot(x, val_loss, 'r', label='Testing mse')\n  plt.title('Training & Testing mse')\n  plt.legend()","b1ac583f":"plot_chart(model_new)","4fafadd1":"y_predict_1 = model.predict(x_test)\ndisplay(y_predict_1)","e12ea928":"np.unique(y_predict_1)","f0afac04":"# x_train, x_test, y_train, y_test = train_test_split(    \n#    x, y, test_size=0.25, random_state=42)\n# rlf = RandomForestClassifier(n_estimators=30 , oob_score = True, n_jobs = -1,\n#                                  random_state =42, max_features = \"auto\",\n#                                  max_leaf_nodes = 15)\n# rlf.fit(x_train,y_train)\n# y_predict_2 = rlf.predict(x_test)\n# display(y_predict_2)","f7e2badc":"# metrics.mean_squared_error(y_test,y_predict_2)","be390bc5":"x_train, x_test, y_train, y_test = train_test_split(    \n    x, y, test_size=0.25, random_state=42)\nclf = DecisionTreeClassifier()\nclf.fit(x_train,y_train)\ny_predict_3 = clf.predict(x_test)\ndisplay(y_predict_3)","ba862721":"metrics.mean_squared_error(y_test,y_predict_3)","0fa78a49":"# adamodel = AdaBoostClassifier()\n# n_estimators = 50 (default value) \n# base_estimator = DecisionTreeClassifier (default value)\n# adamodel.fit(x_train,y_train)\n# y_predict_4 = adamodel.predict(x_test)\n# display(y_predict_4)","860a3c8a":"# metrics.mean_squared_error(y_test, y_predict_4)","add6ba2d":"# model.svm = SVC(kernel='linear') \n# model.svm.fit(x_train,y_train)\n# y_predict_5 = model.svm.predict(x_test)\n# display(y_predict_5)","6011996d":"# metrics.mean_squared_error(y_test, y_predict_5)","77d7dfda":"delay_type = lambda x:((0,1)[x > 10],2)[x > 60]\ndf_flight['delay_level'] = df_flight['dep_delay'].apply(delay_type)\n#____________________________________________________\nfig = plt.figure(1, figsize=(15,10))\nax = sns.countplot(y=\"origin\", hue='delay_level', data=df_flight)\n#____________________________________________________________________________________\n# We replace the abbreviations by the full names of the companies and set the labels\nplt.setp(ax.get_xticklabels(), fontsize=15, weight = 'normal', rotation = 0);\nplt.setp(ax.get_yticklabels(), fontsize=15, weight = 'bold', rotation = 0);\nax.yaxis.label.set_visible(False)\nplt.xlabel('Flight count', fontsize=20, weight = 'bold', labelpad=10)\n#________________\n# Set the legend\nL = plt.legend()\nL.get_texts()[0].set_text('on time (t < 10 min)')\nL.get_texts()[1].set_text('small delay (10 < t < 60 min)')\nL.get_texts()[2].set_text('large delay (t > 60 min)')\nplt.show()","48dd195b":"display(df_flight)","a5d248d5":"df_flight.to_csv(\"flight_data_yuqihan2.csv\", index=False)","be06f1d6":"df_pre2 = df_flight[df_flight['origin'].isin(['ATL'])]\ndisplay(df_pre2)","4d5bb954":"df_pre2 = df_pre2.drop(columns = ['IATA', 'dep_time', 'arr_time', 'origin', 'distance', 'date', 'arr_delay','dep_delay'])\nx = df_pre2.drop(columns = ['delay_level'])\ndisplay(x)","30076ce6":"y = df_pre2['delay_level'].values\ndisplay(y)","4da4663d":"x_train, x_test, y_train, y_test = train_test_split(    \n    x, y, test_size=0.25, random_state=42)\nmodel = Sequential()\nmodel.add(Dense(1024, input_dim=x.shape[1], activation='relu')) # Hidden 1\nmodel.add(Dropout(0.2)) \nmodel.add(Dense(1024, activation='relu')) # Hidden 2\nmodel.add(Dropout(0.2)) \nmodel.add(Dense(1, activation='sigmoid')) # Output\nmodel.compile(loss = 'binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel_new = model.fit(x_train,y_train,validation_data=(x_test,y_test),\n          verbose=2,epochs=20)","15d04268":"def plot_chart (model):\n  acc = model.history['accuracy']\n  val_acc = model.history['val_accuracy']\n  loss = model.history['loss']\n  val_loss = model.history['val_loss']\n  x = range(1, len(acc) + 1)\n  plt.figure(figsize=(15, 8))\n  plt.subplot(1, 2, 1)\n  plt.plot(x, acc, 'b', label='Training accuracy')\n  plt.plot(x, val_acc, 'r', label='Testing accuracy')\n  plt.title('Training & Testing accuracy')\n  plt.legend()\n  plt.subplot(1, 2, 2)\n  plt.plot(x, loss, 'b', label='Training loss')\n  plt.plot(x, val_loss, 'r', label='Testing loss')\n  plt.title('Training & Testing loss')\n  plt.legend()","bedd7e4c":"plot_chart(model_new)","ff074770":"y_predict_1 = model.predict(x_test)\ndisplay(y_predict_1)","95fe735d":"# x_train, x_test, y_train, y_test = train_test_split(    \n#    x, y, test_size=0.25, random_state=42)\n# rlf = RandomForestClassifier(n_estimators=30 , oob_score = True, n_jobs = -1,\n#                                  random_state =42, max_features = \"auto\",\n#                                  max_leaf_nodes = 15)\n# rlf.fit(x_train,y_train)\n# y_predict_2 = rlf.predict(x_test)\n# display(y_predict_2)","269c4321":"# metrics.log_loss(y_test,y_predict_2)","40da3a97":"# metrics.accuracy_score(y_test,y_predict_2)","99f568e3":"x_train, x_test, y_train, y_test = train_test_split(    \n    x, y, test_size=0.25, random_state=42)\nclf = DecisionTreeClassifier()\nclf.fit(x_train,y_train)\ny_predict_3 = clf.predict(x_test)\ndisplay(y_predict_3)","835c06f4":"metrics.accuracy_score(y_test,y_predict_3)","f1f5c4d9":"# adamodel = AdaBoostClassifier()\n# n_estimators = 50 (default value) \n# base_estimator = DecisionTreeClassifier (default value)\n# adamodel.fit(x_train,y_train)\n# y_predict_4 = adamodel.predict(x_test)\n# display(y_predict_4)","3820737f":"# metrics.metrics.log_loss(y_test, y_predict_4)","75c302dd":"# metrics.accuracy_score(y_test,y_predict_4)","a63ce146":"# model.svm = SVC(kernel='linear') \n# model.svm.fit(x_train,y_train)\n# y_predict_5 = model.svm.predict(x_test)\n# display(y_predict_5)","f2e844f9":"#metrics.metrics.log_loss(y_test, y_predict_5)","62da7333":"# metrics.accuracy_score(y_test,y_predict_5)","1026c773":"df_pre3 = df_flight[df_flight['origin'].isin(['ATL'])]\ndf_pre3 = df_pre3.drop(columns = ['IATA', 'dep_time', 'arr_time', 'origin', 'distance', 'date', 'arr_delay','dep_delay'])\nx = df_pre3.drop(columns = ['delay_level'])\nx = zscore(x)\ndisplay(x)","cb69874f":"y = df_pre3['delay_level'].values\ndisplay(y)","e044a86f":"x_train, x_test, y_train, y_test = train_test_split(    \n    x, y, test_size=0.25, random_state=42)\nmodel = Sequential()\nmodel.add(Dense(1024, input_dim=x.shape[1], activation='relu')) # Hidden 1\nmodel.add(Dropout(0.2)) \nmodel.add(Dense(1024, activation='relu')) # Hidden 2\nmodel.add(Dropout(0.2)) \nmodel.add(Dense(1, activation='sigmoid')) # Output\nmodel.compile(loss = 'binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel_3 = model.fit(x_train,y_train,validation_data=(x_test,y_test),\n          verbose=2,epochs=10)","71fba4ce":"plot_chart(model_3)","501abe3f":"**Prediciton model 1: Neural Networks**","a925eaf4":"**Prediciton model 5: SVM**","dac1a6fa":"**Prediciton model 4: adaboost**","9bdb7569":"**Prediciton model 3: Decision Tree**","b34d13d8":"**Prediciton model 3: Decision Tree**","9c669636":"**Data Cleaning and joint**","f244a943":"**Prediciton model 1: Neural Networks**","c2c72b53":"**Prediciton model 5: SVM**","9454bed5":"**Predicition and classicfication**","55502931":"**Enhance Accuracy**","de19e6fa":"**Prediciton model 2: Random Forest**","9f685350":"**Prediciton model 2: Random Forest**","004f0dca":"**Prediciton model 4: adaboost**"}}