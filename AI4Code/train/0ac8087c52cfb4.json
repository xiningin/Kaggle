{"cell_type":{"87ad4c55":"code","0f63521f":"code","3ac549e9":"code","0c8bd821":"code","2424d476":"code","784cefc4":"code","5578a80e":"code","7966ccee":"code","b851a2bc":"code","e60e901e":"code","398dae22":"code","70fad228":"code","cb60113a":"code","c45acf1a":"code","37eaa9a2":"code","3409b98b":"code","6f6fd546":"code","a5aa1d72":"code","cb5c6fcc":"code","34a4d9ea":"code","c38cf617":"code","a486bc4e":"code","742c29f5":"code","8ff2bc65":"code","0cec344d":"markdown","3186463b":"markdown","4b071506":"markdown","e9222520":"markdown","e63c8fb9":"markdown","89ded928":"markdown","0eead0ad":"markdown","124a5808":"markdown","77395512":"markdown","513deb02":"markdown","5565c92c":"markdown","4498e18e":"markdown"},"source":{"87ad4c55":"# Libraries\nimport matplotlib.pyplot as plt # Visualization\nimport seaborn as sns # Visualization\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split # Train and Test Split\nfrom sklearn.linear_model import LogisticRegression # Logistic Regression Classification\nfrom sklearn.neighbors import KNeighborsClassifier # Knn Classification\nfrom sklearn.svm import SVC # Support Vector Machine Classification\nfrom sklearn.naive_bayes import GaussianNB # Naive Bayes\nfrom sklearn.tree import DecisionTreeClassifier # Decision Tree\nfrom sklearn.ensemble import RandomForestClassifier # Random Forest Classifier\nfrom sklearn.metrics import confusion_matrix # Confusion Matrix\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0f63521f":"data = pd.read_csv(r\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")\ndata.info()","3ac549e9":"data.head()","0c8bd821":"data.describe()","2424d476":"data.isnull().sum()","784cefc4":"data.target.value_counts()","5578a80e":"sns.countplot(x=\"target\", data=data, palette=\"bwr\")\nplt.show()","7966ccee":"countNoDisease = len(data[data.target == 0])\ncountHaveDisease = len(data[data.target == 1])\nprint(\"Percentage of Patients Haven't Heart Disease: {:.2f}%\".format((countNoDisease \/ (len(data.target))*100)))\nprint(\"Percentage of Patients Have Heart Disease: {:.2f}%\".format((countHaveDisease \/ (len(data.target))*100)))","b851a2bc":"sns.countplot(x='sex', data=data, palette=\"mako_r\")\nplt.xlabel(\"Sex (0 = female, 1= male)\")\nplt.show()","e60e901e":"countFemale = len(data[data.sex == 0])\ncountMale = len(data[data.sex == 1])\nprint(\"Percentage of Female Patients: {:.2f}%\".format((countFemale \/ (len(data.sex))*100)))\nprint(\"Percentage of Male Patients: {:.2f}%\".format((countMale \/ (len(data.sex))*100)))","398dae22":"y = data.target.values\nx_data = data.drop([\"target\"],axis=1)\nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)) # normalization ","70fad228":"# train test split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state=1)","cb60113a":"lr = LogisticRegression()\nlr.fit(x_train,y_train)\nprint(\"Score is {}\".format(lr.score(x_test,y_test)))","c45acf1a":"# Confusion Martix\ny_pred = lr.predict(x_test)\ny_true = y_test\ncm = confusion_matrix(y_true,y_pred)\nprint(\"Confusion Martix:\")\nprint(cm)","37eaa9a2":"knn = KNeighborsClassifier(n_neighbors = 3) # n_neighbors = k\nknn.fit(x_train,y_train)\nprint(\" {} k Score: {} \".format(3,knn.score(x_test,y_test)))","3409b98b":"# Confusion Martix\ny_pred = knn.predict(x_test)\ny_true = y_test\ncm = confusion_matrix(y_true,y_pred)\nprint(\"Confusion Martix:\")\nprint(cm)","6f6fd546":"svm = SVC(random_state = 1)\nsvm.fit(x_train,y_train)\nprint(\"Score: \",svm.score(x_test,y_test))","a5aa1d72":"# Confusion Martix\ny_pred = svm.predict(x_test)\ny_true = y_test\ncm = confusion_matrix(y_true,y_pred)\nprint(\"Confusion Martix:\")\nprint(cm)","cb5c6fcc":"nb = GaussianNB()\nnb.fit(x_train,y_train)\nprint(\"Score: \",nb.score(x_test,y_test))","34a4d9ea":"# Confusion Martix\ny_pred = nb.predict(x_test)\ny_true = y_test\ncm = confusion_matrix(y_true,y_pred)\nprint(\"Confusion Martix:\")\nprint(cm)","c38cf617":"dt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\nprint(\"Score: \", dt.score(x_test,y_test))","a486bc4e":"# Confusion Martix\ny_pred = dt.predict(x_test)\ny_true = y_test\ncm = confusion_matrix(y_true,y_pred)\nprint(\"Confusion Martix:\")\nprint(cm)","742c29f5":"rf = RandomForestClassifier(n_estimators = 100,random_state = 1)\nrf.fit(x_train,y_train)\nprint(\"Score: \",rf.score(x_test,y_test))","8ff2bc65":"# Confusion Martix\ny_pred = rf.predict(x_test)\ny_true = y_test\ncm = confusion_matrix(y_true,y_pred)\nprint(\"Confusion Martix:\")\nprint(cm)","0cec344d":"<a id = \"9\"><\/a>\n# Decision Tree Classification","3186463b":"<a id = \"4\"><\/a>\n# Classification","4b071506":"<a id = \"5\"><\/a>\n# Logistic Regression Classification","e9222520":"We have a data which classified if patients have heart disease or not according to features in it. We will try to use this data to create a model which tries predict if a patient has this disease or not. We will use following algorithms:\n\n1. [Logistic Regression Classification](#5)\n    \n2. [K - Nearest Neighbor Classification](#6)     \n    \n3. [Support Vector Machine Classification](#7)    \n    \n4. [Naive Bayes Classification](#8)\n\n5. [Decision Tree Classification](#9)    \n    \n6. [Random Forest Classification](#10)\n","e63c8fb9":"<a id = \"10\"><\/a>\n# Random Forest Classification","89ded928":"<a id = \"2\"><\/a>\n# Load Data","0eead0ad":"<font color ='red'>\nContent :\n    \n1. [Import Libraries](#1)\n    \n2. [Load Data](#2)     \n    \n3. [Visualization](#3)    \n    \n4. [Classification](#4)","124a5808":"<a id = \"3\"><\/a>\n# Visualization","77395512":"<a id = \"8\"><\/a>\n# Naive Bayes Classification","513deb02":"<a id = \"7\"><\/a>\n# Support Vector Machine Classification","5565c92c":"<a id = \"1\"><\/a>\n# Import Libraries\n","4498e18e":"<a id = \"6\"><\/a>\n# K - Nearest Neighbor Classification"}}