{"cell_type":{"c49883f8":"code","5423ea7a":"code","65a6be2a":"code","0e55471b":"code","86987fc6":"code","1216af74":"code","3a48c768":"code","584da924":"code","91f92fc1":"code","a48cb70b":"code","ffd57a25":"code","37030e0e":"code","c4fce098":"code","dcb6e8c3":"markdown","53b00f88":"markdown","70f2439a":"markdown","1384ee3a":"markdown","f5ad922a":"markdown","9ae09a8d":"markdown","38b2383e":"markdown","1a137107":"markdown","68b8d8cb":"markdown","5d61c71c":"markdown","8c232bd6":"markdown","eb0cf0e1":"markdown","32404342":"markdown"},"source":{"c49883f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5423ea7a":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()\nfrom textwrap import wrap","65a6be2a":"filename='..\/input\/impact-factor-of-top-1000-journals\/Impact-Factor-Ratings.xlsx'\n\ndata_df = pd.DataFrame()\n\nfor y in range(2013, 2020):\n    tmp_df = pd.read_excel(open(filename,'rb'),sheet_name=str(y))\n    start_y, end_y = y-3, y%100\n    prefix = str(start_y)+'-'+str(end_y)+' '\n    orig_citations, orig_documents = prefix+'Citations', prefix+'Documents'\n    tmp_df.rename(columns={orig_citations:'Citations', orig_documents:'Documents'}, inplace=True)\n    tmp_df['year'] = y\n    data_df = pd.concat([data_df, tmp_df])\n    \ndata_df.reset_index(drop=True, inplace=True)\ndata_df['HP'] = data_df['Highest percentile'].str.split('\\n')\ndata_df['percentile'] = data_df['HP'].apply(lambda x:x[0])\ndata_df['rank'] = data_df['HP'].apply(lambda x:x[1])\ndata_df['genre'] = data_df['HP'].apply(lambda x:x[2])\ndata_df.drop(['HP', 'Highest percentile'], axis=1, inplace=True)","0e55471b":"data_df.head(3)","86987fc6":"top_journal = data_df.groupby('Source title').mean()['Citations'].sort_values(\n    ascending=False)[:10].index.to_list()\nlabels = ['\\n'.join(wrap(j,25)) for j in top_journal]\nfeatures = ['Citations', 'CiteScore', 'Documents', 'SNIP']\n\nfig, ax = plt.subplots(1, 4, sharey=True, figsize=(16,12))\nplt.tight_layout()\nfor i, f in enumerate(features):\n    sns.barplot(x=f, y='Source title', data=data_df, order=top_journal, ax=ax[i])\n    ax[i].set_yticklabels(labels, fontsize=16)\n    ax[i].vlines([data_df[f].mean()], -0.5, 9.5, linestyles='dashed')","1216af74":"frequent_publisher= data_df['Publisher'].value_counts().sort_values(\n    ascending=False)[:10].index.to_list()\nlabels = ['\\n'.join(wrap(p,25)) for p in frequent_publisher]\n\nfig, ax = plt.subplots(1, 4, sharey=True, figsize=(16,12))\nplt.tight_layout()\nfor i, f in enumerate(features):\n    sns.barplot(x=f, y='Publisher', data=data_df, order=frequent_publisher, ax=ax[i])\n    ax[i].set_yticklabels(labels, fontsize=16)\n    ax[i].vlines([data_df[f].mean()], -0.5, 9.5, linestyles='dashed')","3a48c768":"frequent_genre= data_df['genre'].value_counts().sort_values(ascending=False)[:10].index.to_list()\nlabels = ['\\n'.join(wrap(g,25)) for g in frequent_genre]\n\nfig, ax = plt.subplots(1, 4, sharey=True, figsize=(16,12))\nplt.tight_layout()\nfor i, f in enumerate(features):\n    sns.barplot(x=f, y='genre', data=data_df, order=frequent_genre, ax=ax[i])\n    ax[i].set_yticklabels(labels, fontsize=16)\n    ax[i].vlines([data_df[f].mean()], -0.5, 9.5, linestyles='dashed')","584da924":"fig, ax = plt.subplots(1, 2, figsize=(14,4))\nsns.distplot(data_df['Citations'], ax=ax[0])\nax[0].set_title('Citations original value')\nsns.distplot(np.log(data_df['Citations']), ax=ax[1])\nax[1].set_title('Log of Citations');","91f92fc1":"feature_list = ['CiteScore','Documents', '% Cited', 'SNIP', 'SJR']\n\nfig, ax = plt.subplots(2, 3, figsize=(16,7))\nplt.tight_layout()\nfor i, f in enumerate(feature_list):\n    axy, axx = divmod(i,3)\n    sns.distplot(data_df[f], kde=False, ax=ax[axy, axx])\nplt.delaxes(ax=ax[1,2])","a48cb70b":"data_df[feature_list].min()","ffd57a25":"data_df['CiteScore_log'] = np.log(data_df['CiteScore'])\ndata_df['Citations_log'] = np.log(data_df['Citations'])\ndata_df['Documents_log'] = np.log(data_df['Documents'])\ndata_df['SNIP_log1p'] = np.log1p(data_df['SNIP'])\ndata_df['SJR_log'] = np.log(data_df['SJR'])\n\nnew_feature_list = ['CiteScore_log', 'Documents_log', '% Cited', 'SNIP_log1p', 'SJR_log']\n\nfig, ax = plt.subplots(2, 3, sharey=True, figsize=(16, 7))\nplt.tight_layout()\nfor i, f in enumerate(new_feature_list):\n    axy, axx = divmod(i, 3)\n    sns.scatterplot(x=f, y='Citations_log', data=data_df, ax=ax[axy, axx])\nplt.delaxes(ax=ax[1,2])","37030e0e":"def plot_scatters(y):\n    axy = y-2013\n    sns.scatterplot(x='CiteScore', y='Citations', data=data_df[data_df['year']==y], ax=ax[axy, 0])\n    sns.scatterplot(x='Documents', y='Citations', data=data_df[data_df['year']==y], ax=ax[axy, 1])\n    sns.scatterplot(x='SNIP', y='Citations', data=data_df[data_df['year']==y], ax=ax[axy, 2])\n    sns.scatterplot(x='SJR', y='Citations', data=data_df[data_df['year']==y], ax=ax[axy, 3])\n    for axx in range(4):\n        ax[axy, axx].set_title(y)\n        ax[axy, axx].set_xscale('log')\n        ax[axy, axx].set_yscale('log')","c4fce098":"fig, ax = plt.subplots(7, 4, sharex=True, sharey=True, figsize=(16,18))\nplt.subplots_adjust(hspace=0.3)\nfor year in range(2013, 2020):\n    plot_scatters(year)","dcb6e8c3":"## Contents  \n### * Load dataset and Cleaning  \n### * EDA","53b00f88":"Scatterplots by year","70f2439a":"### EDA","1384ee3a":"Distribution of Citations","f5ad922a":"Most frequent Genres  \n> Genre means the third component of 'Highest percentile' here","9ae09a8d":"Most cited journals and their features  \n> vertical line is mean value of each feature","38b2383e":"> Citations is strongly correlated to Documents","1a137107":"### Load dataset and Cleaning","68b8d8cb":"> Scatterplots of Log-transformed Citations and other features","5d61c71c":"> Some Journals have a below-average CiteScore or SNIP, but Documents is well above average","8c232bd6":"Distribution of features  \n> Distribution of most of features is also skewed","eb0cf0e1":"> Distribution of Citations is highly skewed","32404342":"Most frequent Publishers and their features"}}