{"cell_type":{"592edc69":"code","ec2a2ace":"code","696903c9":"code","38d3ed85":"code","6507f909":"code","af00c759":"code","e09e7464":"code","def57846":"code","e2fb0629":"code","c2d6f432":"code","49facc64":"code","429231d2":"code","06d3ffb3":"code","7c31da4b":"code","dfd3c7aa":"code","6bd67a2e":"code","95053743":"code","4785be49":"code","67cf4d81":"code","9592cf96":"code","776226f8":"code","bfd96a92":"code","1426d49e":"code","e0006929":"code","a906a9e1":"code","81282b72":"markdown","53bc81e6":"markdown","1aae2897":"markdown","b4cdcce7":"markdown","3a9112b1":"markdown","3ca0dab7":"markdown","d73de547":"markdown","807cb7d0":"markdown"},"source":{"592edc69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec2a2ace":"import pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n%matplotlib inline\nwarnings.filterwarnings('ignore')","696903c9":"df=pd.read_csv('\/kaggle\/input\/wine-quality\/winequalityN.csv')\ndf.head()","38d3ed85":"#stastical info\n\ndf.describe()","6507f909":"# datatype info\n\ndf.info()","af00c759":"#check for null values\n\ndf.isnull().sum()","e09e7464":"feature_with_na=[feature for feature in df.columns if df[feature].isnull().sum()>0]","def57846":"df[feature_with_na].head(10)","e2fb0629":"for feature in feature_with_na:\n    df[feature].fillna(df[feature].mean(), inplace=True)\ndf.isnull().sum()","c2d6f432":"#create box plots\nfig,ax = plt.subplots(ncols=6,nrows=2,figsize=(20,10))\nindex=0\nax=ax.flatten()\n\nfor col, value in df.items():\n    if col!='type':\n        sns.boxplot(y=col,data=df,ax=ax[index])\n        index+=1\n    ","49facc64":"# create distplot\nfig,ax = plt.subplots(ncols=6,nrows=2,figsize=(20,10))\nindex=0\nax=ax.flatten()\n\nfor col, value in df.items():\n    if col!='type':\n        sns.distplot(value,ax=ax[index])\n        index+=1\n","429231d2":"# log transformation\ndf['free sulfur dioxide']=np.log(1+df['free sulfur dioxide'])","06d3ffb3":"sns.distplot(df['free sulfur dioxide'])","7c31da4b":"sns.countplot(df['type'])","dfd3c7aa":"sns.countplot(df['quality'])","6bd67a2e":"corr=df.corr()\nplt.figure(figsize=(20,10))\nsns.heatmap(corr,annot=True, cmap='coolwarm')","95053743":"X=df.drop(columns=['type','quality'])\ny=df['quality']","4785be49":"y.value_counts()","67cf4d81":"from imblearn.over_sampling import SMOTE\noversample=SMOTE(k_neighbors=4)\n#transform the dataset\nX,y=oversample.fit_resample(X,y)","9592cf96":"y.value_counts()","776226f8":"#classify function\nfrom sklearn.model_selection import cross_val_score, train_test_split\ndef classify(model,X,y):\n    X_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.25, random_state=43)\n    #train the model\n    model.fit(X_train,y_train)\n    print(\"Accuracy\", model.score(x_test,y_test)*100)\n    \n    #cross-validation\n    score=cross_val_score(model,X,y,cv=5)\n    print(\"CV Score\", np.mean(score)*100)","bfd96a92":"from sklearn.linear_model import LogisticRegression\nmodel= LogisticRegression()\nclassify(model,X,y)","1426d49e":"from sklearn.tree import DecisionTreeClassifier\nmodel=DecisionTreeClassifier()\nclassify(model,X,y)","e0006929":"from sklearn.ensemble import RandomForestClassifier\nmodel=RandomForestClassifier()\nclassify(model,X,y)","a906a9e1":"from sklearn.ensemble import ExtraTreesClassifier\nmodel=ExtraTreesClassifier()\nclassify(model,X,y)","81282b72":"### Exploratory Data Analysis","53bc81e6":"### Loading the dataset","1aae2897":"### Preprocessing the dataset","b4cdcce7":"### Model Training","3a9112b1":"### Class Imbalancement","3ca0dab7":"### Importing Modules","d73de547":"### Correlation Matrix","807cb7d0":"### Input Split"}}