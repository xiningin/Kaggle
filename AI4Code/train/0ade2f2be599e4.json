{"cell_type":{"8fc07eb1":"code","f2e96034":"code","74256818":"code","d4106af4":"code","8e22df5e":"code","8a92d9fb":"code","fa117a36":"code","bbd18d24":"code","3bb0a78b":"code","8c94e1f2":"code","85a41eb2":"code","8774f481":"code","f2649a1d":"markdown","750f1db1":"markdown"},"source":{"8fc07eb1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2e96034":"# import additional libraries for use\nimport folium\nfrom folium.plugins import MarkerCluster","74256818":"# Read CSV into Pandas Dataframe\ncovid=pd.read_csv(\"\/kaggle\/input\/enforcing-covid-restriction-york-region-on-canada\/COVID19-Charges-Clean.csv\")\n\n# Convert Datatypes into Float64 for later processing\ncovid.LAT=covid.LAT.astype(\"float64\")\ncovid.LON=covid.LON.astype(\"float64\")","d4106af4":"covid.head()","8e22df5e":"# Identify number of violations by Municipality\ncovid.groupby(by='Municipality').count()","8a92d9fb":"# Identify list of Municipalities\ncovid.Municipality.unique()","fa117a36":"# Identify mean of Latitude and Longitude - This will become useful as we later on try to plot the results on a Choropleth map\nprint(covid.LAT.mean(), covid.LON.mean())","bbd18d24":"# We first create a blank map centred over our violations\nGTA = folium.Map(location=[covid.LAT.mean(), covid.LON.mean()], zoom_start=10)","3bb0a78b":"# We create a Marker Cluster for each Municipality and add them to the map\nVaughan = MarkerCluster(name=\"City of Vaughan\", locations=[[-79.566373099976275, 43.834984875331209]]).add_to(GTA)\nMarkham = MarkerCluster(name=\"City of Markham\", locations=[[-79.294985214488122, 43.885028037206304]]).add_to(GTA)\nAurora = MarkerCluster(name=\"Town of Aurora\", locations=[[-79.456871977249122, 43.995928547946129]]).add_to(GTA)\nRichmondHill = MarkerCluster(name=\"City of Richmond Hill\", locations=[[-79.423940417178017, 43.878785760503462]]).add_to(GTA)\nGwillimbury = MarkerCluster(name=\"Town of East Gwillimbury\", locations=[[-79.387213112272789, 44.145983089800367]]).add_to(GTA)\nNewmarket = MarkerCluster(name=\"Town of Newmarket\", locations=[[-79.460835347223721, 44.049758541257198]]).add_to(GTA)\nKing = MarkerCluster(name=\"Township of King\", locations=[[-79.528168283758447, 43.928964221225392]]).add_to(GTA)\nStouffville = MarkerCluster(name=\"Town of Whitchurch - Stouffville\", locations=[[-79.334540396317792, 44.000214968797522]]).add_to(GTA)\nGeorgina = MarkerCluster(name=\"Town of Georgina\", locations=[[-79.397540430378584, 44.263693059245121]]).add_to(GTA)","8c94e1f2":"# We then create a Dictionary that maps the Municipality to the corresponding Marker Cluster. This will act as a mapping between our dataset to Marker cluster\nMunicipality = {\n    \"City of Vaughan\":Vaughan,\n    \"City of Markham\":Markham,\n    \"Town of Aurora\":Aurora,\n    \"City of Richmond Hill\":RichmondHill,\n    \"Town of East Gwillimbury\":Gwillimbury,\n    \"Town of Newmarket\":Newmarket,\n    \"Township of King\":King,\n    \"Town of Whitchurch - Stouffville\":Stouffville,\n    \"Town of Georgina\":Georgina\n}","85a41eb2":"# We are not ready to simply loop through our dataframe and add entries based on Municipality to our Marker Cluster\nfor i in range(0,covid.shape[0],1):\n    if covid.Shop[i] != \"Residence\":     \n        folium.Marker([covid.LAT[i], covid.LON[i]], popup=covid.Shop[i]).add_to(Municipality[covid.Municipality[i]])","8774f481":"# We can now display our map by calling our map object \"GTA\"\nGTA","f2649a1d":"### Plot of COVID19 Restriction Violations on Folium Map","750f1db1":"### Data Exploration and Cleansing\n\nAfter we read in our dataset, we want to first explore and clean up the data"}}