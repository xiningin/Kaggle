{"cell_type":{"2108968f":"code","bd6d02a8":"code","5fe04bb2":"code","4c3b6840":"code","dba312ef":"code","a91ad55b":"code","f0b69e09":"code","2baf1b0c":"code","14915f75":"code","39597b32":"code","9ea84e71":"code","48b42631":"code","b4db31b4":"code","4c4e8792":"code","2e83cbf3":"code","1c1ce423":"code","85b24047":"code","28b95855":"code","63acb67f":"code","8ef62985":"code","fe0e0d32":"code","1d81c883":"code","da541ebd":"code","046451d5":"code","e6a7e5c7":"code","221975bc":"code","38820ff0":"code","8f7f6d24":"code","3817ff1b":"code","f068109f":"code","1c27466f":"code","4bd6966e":"code","03bf2833":"code","c6f22967":"code","9d8d3e93":"code","5c6d30f3":"code","34dcc57a":"code","9a7a4dec":"code","44630ccd":"code","ff6ee810":"code","d296d5bd":"code","c23a274b":"code","d6ab449f":"code","7284209b":"code","5197d983":"code","0c097c2f":"code","f7499a0f":"code","01d5d531":"code","2415e01e":"code","c64a1a4b":"code","2f50d71a":"code","5f708fc9":"code","481a339e":"code","15e83441":"code","86209b5b":"code","25b0784b":"code","53646d00":"markdown","ec683bff":"markdown","e1c63ac3":"markdown","2867023a":"markdown","711e2b3c":"markdown","5abf37a5":"markdown","022e8081":"markdown","a9bd9bac":"markdown","694bc2a3":"markdown","bf26ff73":"markdown","4f5fe279":"markdown","e4720303":"markdown","7fdea490":"markdown","d8a98a8f":"markdown","c3b2ba9d":"markdown","52bf58d5":"markdown","822b09aa":"markdown","e46309ef":"markdown","05866465":"markdown","ab30175b":"markdown","60ef2b91":"markdown","03fb50cf":"markdown","eb2b7088":"markdown","e0daa056":"markdown"},"source":{"2108968f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bd6d02a8":"# Import the pandas package, then use the \"read_csv\" function to read\n# the labeled training data\n      \ntrain = pd.read_csv(\"\/kaggle\/input\/word2vec-nlp-tutorial\/labeledTrainData.tsv.zip\", header=0, \\\n                    delimiter=\"\\t\", quoting=3)","5fe04bb2":"test = pd.read_csv(\"\/kaggle\/input\/word2vec-nlp-tutorial\/testData.tsv.zip\", header=0, \\\n                    delimiter=\"\\t\", quoting=3 )","4c3b6840":"# Here, \"header=0\" indicates that the first line of the file contains column names, \n# \"delimiter=\\t\" indicates that the fields are separated by tabs, and quoting=3 tells Python to ignore doubled quotes, \n# otherwise you may encounter errors trying to read the file.","dba312ef":"train.shape","a91ad55b":"train.columns.values","f0b69e09":"print(train[\"review\"][0])","2baf1b0c":"import re\nimport nltk\n\nfrom bs4 import BeautifulSoup\nfrom nltk.corpus import stopwords\n\n\nclass KaggleWord2VecUtility(object):\n    \"\"\"KaggleWord2VecUtility is a utility class for processing raw HTML text into segments for further learning\"\"\"\n\n    @staticmethod\n    def review_to_wordlist( review, remove_stopwords=False ):\n        # Function to convert a document to a sequence of words,\n        # optionally removing stop words.  Returns a list of words.\n        #\n        # 1. Remove HTML\n        review_text = BeautifulSoup(review).get_text()\n        #\n        # 2. Remove non-letters\n        review_text = re.sub(\"[^a-zA-Z]\",\" \", review_text)\n        #\n        # 3. Convert words to lower case and split them\n        words = review_text.lower().split()\n        #\n        # 4. Optionally remove stop words (false by default)\n        if remove_stopwords:\n            stops = set(stopwords.words(\"english\"))\n            words = [w for w in words if not w in stops]\n        #\n        # 5. Return a list of words\n        return(words)\n\n    # Define a function to split a review into parsed sentences\n    @staticmethod\n    def review_to_sentences( review, tokenizer, remove_stopwords=False ):\n        # Function to split a review into parsed sentences. Returns a\n        # list of sentences, where each sentence is a list of words\n        #\n        # 1. Use the NLTK tokenizer to split the paragraph into sentences\n        raw_sentences = tokenizer.tokenize(review.strip())\n        #\n        # 2. Loop over each sentence\n        sentences = []\n        for raw_sentence in raw_sentences:\n            # If a sentence is empty, skip it\n            if len(raw_sentence) > 0:\n                # Otherwise, call review_to_wordlist to get a list of words\n                sentences.append( KaggleWord2VecUtility.review_to_wordlist( raw_sentence, \\\n                  remove_stopwords ))\n        #\n        # Return the list of sentences (each sentence is a list of words,\n        # so this returns a list of lists\n        return sentences","14915f75":"# Initialize an empty list to hold the clean reviews\nclean_train_reviews = []\n\n# Loop over each review; create an index i that goes from 0 to the length\n# of the movie review list\n\nprint (\"Cleaning and parsing the training set movie reviews...\\n\")\nfor i in range( 0, len(train[\"review\"])):\n    clean_train_reviews.append(\" \".join(KaggleWord2VecUtility.review_to_wordlist(train[\"review\"][i], True)))","39597b32":"clean_train_reviews[0]","9ea84e71":"len(clean_train_reviews)","48b42631":"# Initialize the \"CountVectorizer\" object, which is scikit-learn's\n# bag of words tool.\ncountVectorizer = CountVectorizer(analyzer = \"word\",   \\\n                         tokenizer = None,    \\\n                         preprocessor = None, \\\n                         stop_words = None,   \\\n                         max_features = 5000)\n\n# fit_transform() does two functions: First, it fits the model\n# and learns the vocabulary; second, it transforms our training data\n# into feature vectors. The input to fit_transform should be a list of\n# strings.\ntrain_data_features = countVectorizer.fit_transform(clean_train_reviews)\n","b4db31b4":"type(train_data_features)","4c4e8792":"# Numpy arrays are easy to work with, so convert the result to an\n# array\nnp.asarray(train_data_features)","2e83cbf3":"print (\"Training the random forest (this may take a while)...\")\n\n\n# Initialize a Random Forest classifier with 100 trees\nforest = RandomForestClassifier(n_estimators = 100)\n\n# Fit the forest to the training set, using the bag of words as\n# features and the sentiment labels as the response variable\n#\n# This may take a few minutes to run\nforest = forest.fit( train_data_features, train[\"sentiment\"] )","1c1ce423":"\n# Testing - we pick only the first 2 test reviews alone to save time\n\n\n# Create an empty list and append the clean reviews one by one\nclean_test_reviews = []\n\nprint(\"Cleaning and parsing the test set movie reviews...\\n\")\nfor i in range(0,2):\n    clean_test_reviews.append(\" \".join(KaggleWord2VecUtility.review_to_wordlist(test[\"review\"][i], True)))\n\n# Get a bag of words for the test set, and convert to a numpy array\ntest_data_features = countVectorizer.transform(clean_test_reviews)\nnp.asarray(test_data_features)\n\n# Use the random forest to make sentiment label predictions\nprint (\"Predicting test labels...\\n\")\nresult = forest.predict(test_data_features)\n\n# Write the test results \nprint(\"*****manual verification*******\")\nprint(test[\"review\"][0])\nprint(result[0])\nprint(test[\"review\"][1])\nprint(result[1])\n\n# Copy the results to a pandas dataframe with an \"id\" column and\n# a \"sentiment\" column\n# output = pd.DataFrame( data={\"id\":test[\"id\"], \"sentiment\":result} )\n\n# Use pandas to write the comma-separated output file\n# output.to_csv(os.path.join(os.path.dirname(__file__), 'data', 'Bag_of_Words_model.csv'), index=False, quoting=3)#\n# print (\"Wrote results to Bag_of_Words_model.csv\")","85b24047":"type(output)","28b95855":"output.head(1)","63acb67f":"from sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.pipeline import Pipeline\npipe = Pipeline([('count', countVectorizer),('tfid', TfidfTransformer())]).fit(clean_train_reviews)\ntrain_data_features = pipe.transform(clean_train_reviews)","8ef62985":"type(train_data_features)","fe0e0d32":"train_data_features.shape","1d81c883":"np.asarray(train_data_features)","da541ebd":"print (\"Training the random forest (this may take a while)...\")\n\n\n# Initialize a Random Forest classifier with 100 trees\nforest = RandomForestClassifier(n_estimators = 100)\n\n# Fit the forest to the training set, using the bag of words as\n# features and the sentiment labels as the response variable\n#\n# This may take a few minutes to run\nforest = forest.fit( train_data_features, train[\"sentiment\"] )","046451d5":"# Testing - we pick only the first 2 test reviews alone to save time\n\n\n# Create an empty list and append the clean reviews one by one\nclean_test_reviews = []\n\nprint(\"Cleaning and parsing the test set movie reviews...\\n\")\nfor i in range(0,2):\n    clean_test_reviews.append(\" \".join(KaggleWord2VecUtility.review_to_wordlist(test[\"review\"][i], True)))\n\n# Get a bag of words for the test set, and convert to a numpy array\ntest_data_features = countVectorizer.transform(clean_test_reviews)\nnp.asarray(test_data_features)\n\n# Use the random forest to make sentiment label predictions\nprint (\"Predicting test labels...\\n\")\nresult = forest.predict(test_data_features)\n\n# Write the test results \nprint(\"*****manual verification*******\")\nprint(test[\"review\"][0])\nprint(result[0])\nprint(test[\"review\"][1])\nprint(result[1])\n","e6a7e5c7":"import os\nfrom nltk.corpus import stopwords\nimport nltk.data\nimport logging\nfrom gensim.models import Word2Vec\nfrom sklearn.ensemble import RandomForestClassifier","221975bc":"unlabeled_train = pd.read_csv(\"\/kaggle\/input\/word2vec-nlp-tutorial\/unlabeledTrainData.tsv.zip\", header=0, \\\n                    delimiter=\"\\t\", quoting=3)","38820ff0":"# Verify the number of reviews that were read (100,000 in total)\nprint (\"Read %d labeled train reviews, %d labeled test reviews, \" \\\n \"and %d unlabeled reviews\\n\" % (train[\"review\"].size,\n test[\"review\"].size, unlabeled_train[\"review\"].size ))","8f7f6d24":"# Load the punkt tokenizer\ntokenizer = nltk.data.load('tokenizers\/punkt\/english.pickle')","3817ff1b":"unlabeled_train[\"review\"].size","f068109f":"%%capture --no-stderr --no-stdout\n\n# ****** Split the labeled and unlabeled training sets into clean sentences\n#\nsentences = []  # Initialize an empty list of sentences\n\n#I prefer not adding the sentenses from labeled training set because then it takes a vary long time to run\n#print (\"Parsing sentences from training set\")\n#for review in train[\"review\"]:\n#    sentences += KaggleWord2VecUtility.review_to_sentences(review, tokenizer)\n\nprint (\"Parsing sentences from unlabeled set\")\nfor review in unlabeled_train[\"review\"]:\n    sentences += KaggleWord2VecUtility.review_to_sentences(review, tokenizer)","1c27466f":"# Check how many sentences we have in total - should be around 50,000+\nprint (len(sentences))","4bd6966e":"sentences[0]","03bf2833":"# ****** Set parameters and train the word2vec model\n#\n# Import the built-in logging module and configure it so that Word2Vec\n# creates nice output messages\nlogging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s',\\\n    level=logging.INFO)\n\n# Set values for various parameters\nnum_features = 300    # Word vector dimensionality\nmin_word_count = 40   # Minimum word count\nnum_workers = 4       # Number of threads to run in parallel\ncontext = 10          # Context window size\ndownsampling = 1e-3   # Downsample setting for frequent words\n\n# Initialize and train the model (this will take some time)\nprint (\"Training Word2Vec model...\")\nmodel = Word2Vec(sentences, workers=num_workers, \\\n            size=num_features, min_count = min_word_count, \\\n            window = context, sample = downsampling, seed=1)","c6f22967":"# If you don't plan to train the model any further, calling\n# init_sims will make the model much more memory-efficient.\nmodel.init_sims(replace=True)\n\n# It can be helpful to create a meaningful model name and\n# save the model for later use. You can load it later using Word2Vec.load()\nmodel_name = \"300features_40minwords_10context\"\nmodel.save(model_name)","9d8d3e93":"model.wv.doesnt_match(\"man woman child kitchen\".split())","5c6d30f3":"model.wv.doesnt_match(\"france england germany berlin\".split())","34dcc57a":"model.wv.most_similar(\"man\")","9a7a4dec":"# Load the model that we created in Part 2\nfrom gensim.models import Word2Vec\nmodel = Word2Vec.load(\"300features_40minwords_10context\")","44630ccd":"type(model.wv.vectors)","ff6ee810":"model.wv.vectors.shape","d296d5bd":"model.wv.__getitem__(\"flower\") #1x300 numpy array","c23a274b":"def makeFeatureVec(words, model, num_features):\n    # Function to average all of the word vectors in a given\n    # paragraph\n    #\n    # Pre-initialize an empty numpy array (for speed)\n    featureVec = np.zeros((num_features,),dtype=\"float32\")\n    #\n    nwords = 0.\n    # \n    # Index2word is a list that contains the names of the words in \n    # the model's vocabulary. Convert it to a set, for speed \n    index2word_set = set(model.wv.index2word)\n\n    #\n    # Loop over each word in the review and, if it is in the model's\n    # vocaublary, add its feature vector to the total\n    for word in words:\n        if word in index2word_set: \n            nwords = nwords + 1.\n            featureVec = np.add(featureVec,model.wv.__getitem__([word]))\n\n    print(featureVec.shape)\n    print(nwords)\n    # Divide the result by the number of words to get the average\n    featureVec = np.divide(featureVec,nwords)\n    return featureVec\n\n\ndef getAvgFeatureVecs(reviews, model, num_features):\n    # Given a set of reviews (each one a list of words), calculate \n    # the average feature vector for each one and return a 2D numpy array \n    # \n    # Initialize a counter\n    counter = 0\n    # \n    # Preallocate a 2D numpy array, for speed\n    reviewFeatureVecs = np.zeros((len(reviews),num_features),dtype=\"float32\")\n    print(reviewFeatureVecs.shape)\n    \n    # \n    # Loop through the reviews\n    for review in reviews:\n        #\n        # Print a status message every 1000th review\n        print (\"Review %d of %d\" % (counter, len(reviews)))\n        # \n        # Call the function (defined above) that makes average feature vectors\n        print(\"Fetching avg vector for review {0}\".format(review))\n        reviewFeatureVecs[counter] = makeFeatureVec(review, model, num_features)\n\n        print(\"**********reviewFeatureVec for review %d ***************\" %(counter))\n        print(reviewFeatureVecs[counter])\n        print(\"*************************\")\n        #\n        # Increment the counter\n        counter = counter + 1\n    return reviewFeatureVecs","d6ab449f":"train['review'][10]","7284209b":"train['review'][23]","5197d983":"# this is a very toy example, to test the above functions\nreview_docs=[train['review'][10], train['review'][23]]\n\nclean_docs = []\nfor review in review_docs:\n    clean_docs.append(KaggleWord2VecUtility.review_to_wordlist(review, remove_stopwords=True ))\n\ntrainDataVecs = getAvgFeatureVecs( clean_docs, model, num_features )","0c097c2f":"def makeFeatureVec(words, model, num_features):\n    # Function to average all of the word vectors in a given\n    # paragraph\n    #\n    # Pre-initialize an empty numpy array (for speed)\n    featureVec = np.zeros((num_features,),dtype=\"float32\")\n    #\n    nwords = 0.\n    # \n    # Index2word is a list that contains the names of the words in \n    # the model's vocabulary. Convert it to a set, for speed \n    index2word_set = set(model.wv.index2word)\n\n    #\n    # Loop over each word in the review and, if it is in the model's\n    # vocaublary, add its feature vector to the total\n    for word in words:\n        if word in index2word_set: \n            nwords = nwords + 1.\n            featureVec = np.add(featureVec,model.wv.__getitem__([word]))\n\n    # Divide the result by the number of words to get the average\n    featureVec = np.divide(featureVec,nwords)\n    return featureVec\n\n\ndef getAvgFeatureVecs(reviews, model, num_features):\n    # Given a set of reviews (each one a list of words), calculate \n    # the average feature vector for each one and return a 2D numpy array \n    # \n    # Initialize a counter\n    counter = 0\n    # \n    # Preallocate a 2D numpy array, for speed\n    reviewFeatureVecs = np.zeros((len(reviews),num_features),dtype=\"float32\")\n    \n    # \n    # Loop through the reviews\n    for review in reviews:\n        #\n        # Print a status message every 1000th review\n        if counter%1000. == 0.:\n            print (\"Review %d of %d\" % (counter, len(reviews)))\n        # \n        # Call the function (defined above) that makes average feature vectors\n        reviewFeatureVecs[counter] = makeFeatureVec(review, model, num_features)\n        #\n        # Increment the counter\n        counter = counter + 1\n    return reviewFeatureVecs","f7499a0f":"# ****************************************************************\n# Calculate average feature vectors for training and testing sets,\n# using the functions we defined above. Notice that we now use stop word\n# removal.\n\nclean_train_reviews = []\nfor review in train[\"review\"]:\n    clean_train_reviews.append( KaggleWord2VecUtility.review_to_wordlist( review, remove_stopwords=True ))\n\ntrainDataVecs = getAvgFeatureVecs( clean_train_reviews, model, num_features )\n","01d5d531":"# Fit a random forest to the training data, using 100 trees\nfrom sklearn.ensemble import RandomForestClassifier\nforest = RandomForestClassifier( n_estimators = 100 )\n\nprint (\"Fitting a random forest to labeled training data...\")\nforest = forest.fit( trainDataVecs, train[\"sentiment\"] )","2415e01e":"# Testing - we pick only the first 2 test reviews alone to save time\n\n# First we need to construct avg feature vecs\nprint (\"Creating average feature vecs for test reviews\")\nclean_test_reviews = []\nfor review in (test[\"review\"][0], test[\"review\"][1]):\n    clean_test_reviews.append( KaggleWord2VecUtility.review_to_wordlist( review, remove_stopwords=True ))\n\ntestDataVecs = getAvgFeatureVecs( clean_test_reviews, model, num_features )\n\n# Test & extract results \nresult = forest.predict( testDataVecs )\n\n# Write the test results \nprint(\"*****manual verification*******\")\nprint(test[\"review\"][0])\nprint(result[0])\nprint(test[\"review\"][1])\nprint(result[1])","c64a1a4b":"from sklearn.cluster import KMeans\nimport time\n\nstart = time.time() # Start time\n\n# Set \"k\" (num_clusters) to be 1\/5th of the vocabulary size, or an\n# average of 5 words per cluster\n# But I set it to 1\/100th to make it run fast\nword_vectors = model.wv.vectors\nnum_clusters = int(word_vectors.shape[0] \/ 100)\n\n# Initalize a k-means object and use it to extract centroids\nkmeans_clustering = KMeans( n_clusters = num_clusters )\nidx = kmeans_clustering.fit_predict( word_vectors )\n\n# Get the end time and print how long the process took\nend = time.time()\nelapsed = end - start\nprint (\"Time taken for K Means clustering: %10.2f seconds.\" %(elapsed))","2f50d71a":"# Create a Word \/ Index dictionary, mapping each vocabulary word to\n# a cluster number                                                                                            \nword_centroid_map = dict(zip( model.wv.index2word, idx ))","5f708fc9":"# For the first 5 clusters\nfor cluster in range(0, 5):\n    #\n    # Print the cluster number  \n    print (\"\\nCluster %d\" % cluster)\n    #\n    # Find all of the words for that cluster number, and print them out\n    words = []\n    for i in range(0,len(word_centroid_map.values())):\n        if( list(word_centroid_map.values())[i] == cluster ):\n            words.append(list(word_centroid_map.keys())[i])\n    print (words)","481a339e":"def create_bag_of_centroids( wordlist, word_centroid_map ):\n    #\n    # The number of clusters is equal to the highest cluster index\n    # in the word \/ centroid map\n    num_centroids = max( word_centroid_map.values() ) + 1\n    #\n    # Pre-allocate the bag of centroids vector (for speed)\n    bag_of_centroids = np.zeros( num_centroids, dtype=\"float32\" )\n    #\n    # Loop over the words in the review. If the word is in the vocabulary,\n    # find which cluster it belongs to, and increment that cluster count \n    # by one\n    for word in wordlist:\n        if word in word_centroid_map:\n            index = word_centroid_map[word]\n            bag_of_centroids[index] += 1\n    #\n    # Return the \"bag of centroids\"\n    return bag_of_centroids","15e83441":"# Pre-allocate an array for the training set bags of centroids (for speed)\ntrain_centroids = np.zeros( (train[\"review\"].size, num_clusters), \\\n    dtype=\"float32\" )\n\n# Transform the training set reviews into bags of centroids\ncounter = 0\nfor review in clean_train_reviews:\n    train_centroids[counter] = create_bag_of_centroids( review, \\\n        word_centroid_map )\n    counter += 1\n","86209b5b":"# Fit a random forest and extract predictions \nforest = RandomForestClassifier(n_estimators = 100)\n\n# Fitting the forest may take a few minutes\nprint (\"Fitting a random forest to labeled training data...\")\nforest = forest.fit(train_centroids,train[\"sentiment\"])","25b0784b":"# Testing - we pick only the first 2 test reviews alone to save time\n\n#hard coding 2 - should use test[\"review\"].size\ntest_centroids = np.zeros(( 2, num_clusters), \\\n    dtype=\"float32\" )\n\n# First we need to construct avg feature vecs\nprint (\"Creating average feature vecs for test reviews\")\nclean_test_reviews = []\nfor review in (test[\"review\"][0], test[\"review\"][1]):\n    clean_test_reviews.append( KaggleWord2VecUtility.review_to_wordlist( review, remove_stopwords=True ))\n\ncounter = 0\nfor review in clean_test_reviews:\n    test_centroids[counter] = create_bag_of_centroids( review, \\\n        word_centroid_map )\n    counter += 1\n\n# Test & extract results \nresult = forest.predict( test_centroids )\n\n# Write the test results \nprint(\"*****manual verification*******\")\nprint(test[\"review\"][0])\nprint(result[0])\nprint(test[\"review\"][1])\nprint(result[1])","53646d00":"## Part 1","ec683bff":"The number of rows in `vectors` is the number of words in the model's vocabulary, and the number of columns corresponds to the size of the feature vector, which we set in Part 2.  Setting the minimum word count to 40 gave us a total vocabulary of 13,056 words with 300 features a piece. Individual word vectors can be accessed in the following way:","e1c63ac3":"![](https:\/\/miro.medium.com\/max\/428\/1*VJoVz80UUvU2m_ln70JxeQ.png)\n","2867023a":"If we are working with movie reviews, the word \u201cmovie\u201d will be frequent but not useful. If we were working with email data, on the other hand, the word \u201cmovie\u201d may not be frequent and would be useful.\n\nThe simplest way to account for these overrepresented words is to divide word count by the proportion of text documents each word appeared in. For example, the document:\n> \u201cI loved this movie! It was great, great, great.\u201d\n\ncontains the word \u201cloved\u201d and \u201cmovie\u201d once each. Now, let\u2019s suppose that we look at all the other documents and find that, in total, \u201cloved\u201d appears in 1% of text documents and \u201cmovie\u201d appears in 33%. We could now weight our scores as\n\n`\u201cloved\u201d = times it appears in text \/ proportion of texts it appears in = 1 \/ 1%`\n`\u201cmovie\u201d = times it appears in text \/ proportion of texts it appears in = 1 \/ 33%`\n\nBefore applying weights, both \u201cloved\u201d and \u201cmovie\u201d had a score of 1 (since each word appeared in the sentence once). After we apply weights, \u201cloved\u201d has a score of 100 and \u201cmovie\u201d has a score of 3. The score for \u201cloved\u201d is much higher relative to \u201cmovie\u201d, indicating that we care about the word \u201cloved\u201d much more than \u201cmovie\u201d.\n\nIn fact, our score for \u201cloved\u201d is now 33 times larger than our score for \u201cmovie\u201d. While we suspect that \u201cmovie\u201d should be less important than \u201cloved\u201d for predicting whether a review is positive or negative, this relative difference might be too big. Very rare words \u2014 perhaps, misspelled words \u2014 will receive too much relative weight in our current weighting scheme.\n\nWe need to strike a balance between downweighting very frequent words without overweighting rare words. This is what term frequency\u2013inverse document frequency (tf-idf) weighting does for us. In the simple weighting scheme, we used the formula:\n\n`times a word appears in text * (1 \/ proportion of texts it appears in)`\n\ntf-idf weighting alters this formula slightly by taking the log of the second term:\n\n`times a word appears in text * log(1 \/ proportion of texts it appears in)`\n\nBy taking the log, we ensure that our weight changes slowly in relation to how frequently a word appears in all our documents. \nThis means that while common words are downweighted, they aren\u2019t downweighted too much.","711e2b3c":"## Part 3","5abf37a5":"## Part 2","022e8081":"### CountVectorization","a9bd9bac":"The Bag of Words model learns a vocabulary from all of the documents, then models each document by counting the number of times each word appears. For example, consider the following two sentences:\n\nSentence 1: \"The cat sat on the hat\"\n\nSentence 2: \"The dog ate the cat and the hat\"\n\nFrom these two sentences, our vocabulary is as follows:\n\n{ the, cat, sat, on, hat, dog, ate, and }\n\nTo get our bags of words, we count the number of times each word occurs in each sentence. In Sentence 1, \"the\" appears twice, and \"cat\", \"sat\", \"on\", and \"hat\" each appear once, so the feature vector for Sentence 1 is:\n\n{ the, cat, sat, on, hat, dog, ate, and }\n\nSentence 1: { 2, 1, 1, 1, 1, 0, 0, 0 }\n\nSimilarly, the features for Sentence 2 are: { 3, 1, 0, 0, 1, 1, 1, 1}\n\nIn the IMDB data, we have a very large number of reviews, which will give us a large vocabulary. To limit the size of the feature vectors, we should choose some maximum vocabulary size. Below, we use the 5000 most frequent words (remembering that stop words have already been removed).","694bc2a3":"The same functions as above but after removing print statements","bf26ff73":"### TF-IDF Vectorization","4f5fe279":"### Distributed Word Vectors\n\nWord2vec, published by Google in 2013, is a neural network implementation that learns distributed representations for words. Word2Vec does not need labels in order to create meaningful representations. This is useful, since most data in the real world is unlabeled. If the network is given enough training data (tens of billions of words), it produces word vectors with intriguing characteristics. Words with similar meanings appear in clusters, and clusters are spaced such that some word relationships, such as analogies, can be reproduced using vector math.","e4720303":"If you see a number > 50,000, it means some sentenses were split into 2 or more based on the understanding of NLTK tokenizer","7fdea490":"If you look beneath the hood, the Word2Vec model trained in Part 2 consists of a feature vector for each word in the vocabulary, stored in a numpy array called \"syn0\" (this is deprecated) now it's vectors.","d8a98a8f":"### Words to Paragraphs: Vector Averaging\n\nOne challenge with the IMDB dataset is the variable-length reviews. We need to find a way to take individual word vectors and transform them into a feature set that is the same length for every review.\n\nSince each word is a vector in 300-dimensional space, we can use vector operations to combine the words in each review. One method we tried was to simply average the word vectors in a given review (for this purpose, we removed stop words, which would just add noise).","c3b2ba9d":"The quality is bad as I allowed 100 words per cluster. \n\nAt any rate, now we have a cluster (or \"centroid\") assignment for each word, and we can define a function to convert reviews into bags-of-centroids. This works just like Bag of Words but uses semantically related clusters instead of individual words:","52bf58d5":"The functions we write to clean the data are also similar to Part 1, although now there are a couple of differences. \nFirst, to train Word2Vec it is better not to remove stop words because the algorithm relies on the broader context of \nthe sentence in order to produce high-quality word vectors.\nNext, we want a specific input format. Word2Vec expects single sentences, each one as a list of words. In other words, the input format is a list of lists.\n\nIt is not at all straightforward how to split a paragraph into sentences. There are all kinds of gotchas in natural language. English sentences can end with \"?\", \"!\", \"\"\", or \".\", among other things, and spacing and capitalization are not reliable guides either. For this reason, we'll use NLTK's punkt tokenizer for sentence splitting. In order to use this, you will need to install NLTK and use nltk.download() to download the relevant training file for punkt.","822b09aa":"A minor detail to note is the difference between the \"+=\" and \"append\" when it comes to Python lists. In many applications the two are interchangeable, but here they are not. If you are appending a list of lists to another list of lists, \"append\" will only append the first list; you need to use \"+=\" in order to join all of the lists at once.\n\nYou may get a few warnings from BeautifulSoup about URLs in the sentences. These are nothing to worry about (although you may want to consider removing URLs when cleaning the text). \n\nWe can take a look at the output to see how this differs from Part 1","e46309ef":"### Words to Paragraphs: Clustering \nWord2Vec creates clusters of semantically related words, so another possible approach is to exploit the similarity of words within a cluster. Grouping vectors in this way is known as \"vector quantization.\" To accomplish this, we first need to find the centers of the word clusters, which we can do by using a clustering algorithm such as K-Means.","05866465":"The function above will give us a numpy array for each review, each with a number of features equal to the number of clusters. Finally, we create bags of centroids for our training and test set, then train a random forest and extract results:","ab30175b":"## Part 3","60ef2b91":"With the list of nicely parsed sentences, we're ready to train the model. There are a number of parameter choices that affect the run time and the quality of the final model that is produced. For details on the algorithms below, see the word2vec API documentation as well as the Google documentation. \n\n1. Architecture: Architecture options are skip-gram (default) or continuous bag of words. We found that skip-gram was very slightly slower but produced better results.\n1. Training algorithm: Hierarchical softmax (default) or negative sampling. For us, the default worked well.\n1. Downsampling of frequent words: The Google documentation recommends values between .00001 and .001. For us, values closer 0.001 seemed to improve the accuracy of the final model.\nReferences: https:\/\/cs.stackexchange.com\/questions\/95266\/subsampling-of-frequent-words-in-word2vec\n1. Word vector dimensionality: More features result in longer runtimes, and often, but not always, result in better models. Reasonable values can be in the tens to hundreds; we used 300.\n1. Context \/ window size: How many words of context should the training algorithm take into account? 10 seems to work well for hierarchical softmax (more is better, up to a point).\n1. Worker threads: Number of parallel processes to run. This is computer-specific, but between 4 and 6 should work on most systems.\n1. Minimum word count: This helps limit the size of the vocabulary to meaningful words. Any word that does not occur at least this many times across all documents is ignored. Reasonable values could be between 10 and 100. In this case, since each movie occurs 30 times, we set the minimum word count to 40, to avoid attaching too much importance to individual movie titles. This resulted in an overall vocabulary size of around 15,000 words. Higher values also help limit run time.","03fb50cf":"The following code follows along the very old tutorial in kaggle but updated to latest versions of libraries and python 3\n\nhttps:\/\/www.kaggle.com\/c\/word2vec-nlp-tutorial\/overview","eb2b7088":"**Using word vectors**\n\nFirst, we read in the data with pandas, as we did above. But, we now use unlabeledTrain.tsv, which contains 50,000 additional reviews with no labels. When we built the Bag of Words model as above, extra unlabeled training reviews were not useful. However, since Word2Vec can learn from unlabeled data, these extra 50,000 reviews can now be used.","e0daa056":"To read more about tf-idf see this medium post: \nhttps:\/\/medium.com\/civis-analytics\/an-intro-to-natural-language-processing-in-python-framing-text-classification-in-familiar-terms-33778d1aa3ca"}}