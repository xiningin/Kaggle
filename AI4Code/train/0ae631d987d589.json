{"cell_type":{"0575c9b8":"code","c2bce370":"code","6a1d7d33":"code","4acddef9":"code","fa4af5e6":"code","a08ea2ef":"code","4cbacc05":"code","038dc494":"markdown"},"source":{"0575c9b8":"from ipywidgets import Dropdown, Layout, GridspecLayout, Output, Button\n\nimport pandas as pd\nimport requests\nfrom io import StringIO\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfrom datetime import datetime, timedelta\nfrom scipy.optimize import curve_fit\nfrom numpy import asarray, exp, linspace","c2bce370":"def countryFig(country, province, fig, row, col, annotations, showlegend=False, linestyle='solid',\n              pcase=(10,10,5.), pactive=(10,10,5.)):\n    \n    countryData = data.loc[data['Country\/Region']==country].loc[data['Province\/State'].astype(str)==province]\n    label = '{} \/ {}'.format(province, country)\n    \n    # take data\n    dates     = countryData['Date']\n    confirmed = countryData['Confirmed']\n    recovered = countryData['Recovered']\n    deaths    = countryData['Deaths']\n    actives   = confirmed - recovered - deaths \n    \n    # fit the data\n    days_date = [datetime.strptime(di, '%Y-%m-%d') for di in dates]\n    days = asarray([(di-days_date[0]).days for di in days_date])\n    \n    days_extended_date = days_date + [days_date[-1] + di*timedelta(days=1) for di in days + 1]\n    days_extended_date = days_extended_date + [days_extended_date[-1] + di*timedelta(days=1) for di in days + 1]\n    days_extended = asarray([(di-days_extended_date[0]).days for di in days_extended_date])\n\n    \n    try:\n        popt_case,   pcov_case   = curve_fit(f_case,   days, confirmed, p0 = pcase)\n        popt_active, pcov_active = curve_fit(f_active, days, actives,   p0 = pactive)\n\n        fit_case   = f_case(days_extended, *popt_case)\n        fit_active = f_active(days_extended, *popt_active)\n        \n        fig.add_trace(\n        go.Scatter(x=days_extended_date, y=fit_case,\n                   marker = go.scatter.Marker(color= 'rgb(255, 0, 0)'),\n                   line={'dash':'solid', 'width':4},\n                   name = \"Total - fit\",\n                   showlegend=showlegend),\n        row=row, col=col)\n        \n        fig.add_trace(\n        go.Scatter(x=days_extended_date, y=fit_active,\n                   marker = go.scatter.Marker(color= 'rgb(0, 0, 255)'),\n                   line={'dash':'solid', 'width':4},\n                   name = \"Active - fit\",\n                   showlegend=showlegend),\n        row=row, col=col)\n        \n        fig.add_trace(\n        go.Scatter(x=dates, y=recovered,\n                   marker = go.scatter.Marker(color= 'rgb(255, 255, 0)'),\n                   name = \"Recovered\",\n                   line={'dash':'solid', 'width':4},\n                   showlegend=showlegend),        \n        row=row, col=col)\n    except:\n        pass\n          \n\n    \n    fig.add_trace(\n    go.Bar(x=dates, y=confirmed,\n               marker = go.bar.Marker(color= 'rgb(255, 0, 0)'),\n               name = \"Total\",\n               showlegend=showlegend),        \n    row=row, col=col)\n    \n    fig.add_trace(\n    go.Bar(x=dates, y=actives,\n               marker = go.bar.Marker(color= 'rgb(0, 0, 255)'),\n               name = \"Active\",\n               showlegend=showlegend),\n    row=row, col=col)\n \n    fig.add_trace(\n    go.Scatter(x=dates, y=deaths,\n               marker = go.scatter.Marker(color= 'rgb(0, 0, 0)'),\n               name = \"Deaths\",\n               line={'dash':'solid', 'width':4},\n               showlegend=showlegend),        \n    row=row, col=col)\n    \n    annotations += [\n        dict(\n            text=r'<b>{}<\/b>'.format(label),\n            showarrow=False,\n            xref=\"paper\",\n            yref=\"paper\",\n            x=col-1,\n            y=2-row)\n    ]\n    \n\ndef draw_figures(grid):\n    fig = go.FigureWidget(make_subplots(\n        rows=2, cols=2,\n        shared_xaxes=False,\n        horizontal_spacing = 0.05,\n        vertical_spacing   = 0.05,\n        specs=[[{'type': 'scatter'}, {'type': 'scatter'}],\n               [{'type': 'scatter'}, {'type': 'scatter'}]]))\n    \n    # adding surfaces to subplots.\n    annotations = []\n    countryFig(grid[0, 0].value, grid[1, 0].value, fig, 1, 1, annotations, showlegend=True, linestyle='dot')  #0,1\n    countryFig(grid[0, 1].value, grid[1, 1].value, fig, 1, 2, annotations, linestyle='dot')                     #1,1   \n    countryFig(grid[0, 2].value, grid[1, 2].value, fig, 2, 1, annotations, linestyle='dot')                  #0,0\n    countryFig(grid[0, 3].value, grid[1, 3].value, fig, 2, 2, annotations, linestyle='dot')  #1,0\n    \n    fig.update_layout(\n        title_text=r'COVID-19: Confirmed Total Cases vs Active Cases',\n        autosize=False,\n        height=900,\n        width=900,\n        #margin=dict(l=65, r=50, b=65, t=90),\n        annotations = annotations\n        )\n    fig.update_xaxes(range=['2020-01-22','2021-01-01'])\n    #fig.update_xaxes(rangeslider_visible=True)\n    fig.show()","6a1d7d33":"def provinces(country):\n    province_list  = list(set(data.loc[data['Country\/Region']==country]['Province\/State']))\n    return sorted([str(pi) for pi in province_list])\n\ndef Dropdowns(list_items, first, description='', disabled=False):\n    return Dropdown(\n        options=list_items,\n        value=first,\n        description=description,\n        disabled=disabled,\n        layout=Layout(width=\"50%\"))\n\ndef province_observe(country, i, j):\n    grid[i, j] = Dropdowns(provinces(country.new), provinces(country.new)[0])\n    \ndef btn_eventhandler(obj):\n    output.clear_output()\n    with output:\n        draw_figures(grid)","4acddef9":"url = 'https:\/\/datahub.io\/core\/covid-19\/r\/time-series-19-covid-combined.csv'\n\nheaders = {\"User-Agent\": \"Mozilla\/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko\/20100101 Firefox\/66.0\"}\nreq = requests.get(url, headers=headers)\ndata_text = StringIO(req.text)\n\ndata = pd.read_csv(data_text)\n\ncountries = sorted(list(set(data['Country\/Region'])))","fa4af5e6":"def f(day, day_turn, slope):\n    return exp((day_turn-day)\/slope)\n\ndef f_case(day, case, day_turn, slope, n=5):\n    # total case function\n    fval = f(day, day_turn, slope)\n    return case\/(1 + fval)**n\n\ndef df_case(day, case, day_turn, slope, n):\n    # derivative of the total case function\n    fval = f(day, day_turn, slope)\n    return n * case\/slope * fval \/ (1 + fval)**(n+1)\n\ndef f_active(day, case, day_turn, slope, n=5):\n    return slope * df_case(day, case, day_turn, slope, n)","a08ea2ef":"grid = GridspecLayout(3, 4)\n\ncountries0 = ['Turkey', 'Iran', 'Germany', 'China']\nprovince0 = ['nan', 'nan', 'nan', 'Hubei']\n\nfor j, cj in enumerate(countries0):\n    grid[0, j] = Dropdowns(countries, cj)\n    provinces_list =  provinces(grid[0, j].value)\n    grid[1, j] = Dropdowns(provinces_list, province0[j])\n\ngrid[0, 0].observe(lambda country: province_observe(country, 1, 0), names='value')\ngrid[0, 1].observe(lambda country: province_observe(country, 1, 1), names='value')\ngrid[0, 2].observe(lambda country: province_observe(country, 1, 2), names='value')\ngrid[0, 3].observe(lambda country: province_observe(country, 1, 3), names='value')\n\ngrid[2, 0] = Button(description='Redraw')\ngrid[2, 0].on_click(btn_eventhandler)","4cbacc05":"display(grid)\n\noutput = Output()\ndisplay(output)\n\nwith output:\n    draw_figures(grid)","038dc494":"# COVID-19: Confirmed Total Cases vs Active Cases\n**Data Sources:** \n1. https:\/\/datahub.io\/core\/covid-19#data\n2. https:\/\/github.com\/CSSEGISandData\/COVID-19"}}