{"cell_type":{"308580cd":"code","aec0290d":"code","9396bd8f":"code","250bcf61":"code","8ce9e8cd":"code","59358546":"code","08d19e01":"code","9a90df16":"code","530c4d52":"code","41a99907":"code","bed1d5f9":"code","43b33fbf":"code","027ad59c":"code","c80bc682":"code","428d1872":"code","8246efd9":"code","7e29d8af":"code","d41e1e9e":"code","4d265a54":"code","7bfc25d9":"code","db48219d":"code","253c664f":"code","0566c0e0":"code","054b27ad":"code","446014fa":"code","8550fd03":"code","b1c52948":"code","f1e652b8":"code","d0cc285e":"code","87249581":"code","02cc5f3b":"code","dcfffd47":"code","6e9920aa":"code","48e3144f":"code","f7872fc6":"code","fe611f30":"code","66820ad0":"code","2877a022":"code","244119d4":"code","2fc6c693":"code","d08800d0":"code","bbb4f29c":"code","922de3db":"code","c0105cd4":"code","c543299b":"code","3f1ca325":"code","4f91913e":"code","6e6feeb3":"code","77ab0455":"code","dc7298d8":"code","3d9761ce":"code","d5751aab":"code","1959b3c0":"code","fb2d7580":"code","b38c5a5b":"code","b41f0878":"code","9d99a052":"code","03121609":"code","3f538706":"code","346007e6":"code","e7fb5ad6":"code","628c26c4":"code","272e95e5":"code","3a879e4a":"code","a943ccc6":"code","47b22859":"code","b80be5eb":"code","21c6c481":"code","27dbee8d":"code","023d2f04":"code","dbd36323":"markdown","f56ddbc1":"markdown","4c95187c":"markdown","3a927e2a":"markdown","20dabd25":"markdown","24f886e5":"markdown","c4920a38":"markdown","ab5228d6":"markdown","390ad023":"markdown","58b7d5d1":"markdown"},"source":{"308580cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aec0290d":"dfa = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')\ndfu = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv')","9396bd8f":"def sepColumns(dataset):\n    num = []\n    cat = []\n    for i in dataset.columns:\n        if dataset[i].dtype == 'object':\n            cat.append(i)\n        else:\n            num.append(i)\n    return num, cat","250bcf61":"num, cat = sepColumns(dfa)\nnum","8ce9e8cd":"cat","59358546":"def edaFromData(dfA, allEDA=False, desc='Exploratory Data Analysis'):\n    print(desc)\n    print(f'\\nShape:\\n{dfA.shape}')\n    print(f'\\nIs Null:\\n{dfA.isnull().mean().sort_values(ascending=False)}')\n    dup = dfA.duplicated()\n    print(f'\\nDuplicated: \\n{dfA[dup].shape}\\n')\n    try:\n        print(dfA[dfA.duplicated(keep=False)].sample(4))\n    except:\n        pass\n    if allEDA:  # here you put yours prefered analysis that detail more your dataset\n        \n        print(f'\\nDTypes - Numerics')\n        print(dfA.describe(include=[np.number]))\n        print(f'\\nDTypes - Categoricals')\n        print(dfA.describe(include=['object']))\n        \n        #print(df.loc[:, df.dtypes=='object'].columns)\n        print(f'\\nHead:\\n{dfA.head()}')\n        print(f'\\nSamples:\\n{dfA.sample(2)}')\n        print(f'\\nTail:\\n{dfA.tail()}')","08d19e01":"edaFromData(dfa[num])","9a90df16":"dfa[num] = dfa[num].fillna(0)\nedaFromData(dfa[num])","530c4d52":"edaFromData(dfa[cat])","41a99907":"dfa['Android Ver'].sample(3)\n","bed1d5f9":"dfa['Current Ver'].sample(3)","43b33fbf":"dfa['Content Rating'].sample(3)","027ad59c":"dfa['Type'].sample(3)","c80bc682":"dfa[cat] = dfa[cat].fillna('unknow')","428d1872":"edaFromData(dfa[cat])","8246efd9":"dfa.sample(2)","7e29d8af":"dfa['App'] = dfa['App'].str.lower()","d41e1e9e":"dfa.sample(2)","4d265a54":"dfa.sample(2)","7bfc25d9":"app = dfa.App.unique().tolist()\ndfa['AppN'] = dfa['App'].apply(lambda x: app.index(x))\ndfa.sample(2)","db48219d":"category = dfa.Category.unique().tolist()\ncategory","253c664f":"dfa[dfa.Category == '1.9']\ndfa","0566c0e0":"# row with wrong data\ndfa = dfa.drop(index=10472)","054b27ad":"dfa['CategoryN'] = dfa['Category'].apply(lambda x: category.index(x))\ndfa.sample(2)","446014fa":"dfa['Size'].unique()","8550fd03":"dfa['SizeN'] = dfa.Size\ndfa['SizeN'] = dfa['SizeN'].apply(lambda x: x.replace('Varies with device', '0') )\ndfa['SizeN'] = dfa['SizeN'].apply(lambda x: x.replace('M', '000000') )\ndfa['SizeN'] = dfa['SizeN'].apply(lambda x: x.replace('k', '000') )\ndfa['SizeN'] = dfa['SizeN'].apply(lambda x: x.replace('+', '') )\ndfa['SizeN'] = dfa['SizeN'].apply(lambda x: x.replace(',', '') )\n","b1c52948":"dfa['SizeN'] = dfa['SizeN'].apply(pd.to_numeric)","f1e652b8":"dfa.SizeN.sample(5)","d0cc285e":"dfa['InstallsN'] = dfa['Installs'].apply(lambda x: x.replace('+', '') )\ndfa['InstallsN'] = dfa['InstallsN'].apply(lambda x: x.replace(',', '') )","87249581":"dfa[['Installs', 'InstallsN']]","02cc5f3b":"dfa['InstallsN'] = dfa['InstallsN'].astype(str).astype(int)","dcfffd47":"types = dfa.Type.unique().tolist()\ntypes","6e9920aa":"dfa.Type = dfa['Type'].apply(lambda x: 'unknow' if x == '0' else x)","48e3144f":"types = dfa.Type.unique().tolist()\ntypes","f7872fc6":"dfa['TypeN'] = dfa['Type'].apply(lambda x: types.index(x))\ndfa.sample(2)","fe611f30":"dfa['Content Rating'].unique()","66820ad0":"content = dfa['Content Rating'].unique().tolist()\ndfa['ContentN'] = dfa['Content Rating'].apply(lambda x: content.index(x))\ndfa.sample(2)","2877a022":"genres = dfa['Genres'].unique().tolist()\ndfa['GenresN'] = dfa['Genres'].apply(lambda x: genres.index(x))\ndfa.sample(2)","244119d4":"from datetime import datetime\n# s = \"November 19 2019, 12:00 AM\"\n# d = datetime.strptime(s, \"%B %d %Y, %I:%M %p\")\n# print(d.isoformat())\n\ndef convertDate(s):\n    try:\n        d = datetime.strptime(s, \"%B %d, %Y\")\n        d = d.isoformat()[:10]\n    except:\n        d = '2000-01-01'\n    return d","2fc6c693":"convertDate('July 4, 2018')","d08800d0":"dfa['Date'] = dfa['Last Updated'].apply(lambda x: convertDate(x))","bbb4f29c":"dfa[['Date', 'Last Updated']].sample(2)","922de3db":"dfa[dfa.Date == '2000-01-01'][['Date', 'Last Updated']]","c0105cd4":"def splitDate(d, s='year'):\n    try:\n        if s == 'year':\n            r = d.split('-')[0]\n        elif s == 'month':\n            r = d.split('-')[1]\n        elif s == 'weekday':\n            r = pd.Timestamp(d).weekday()\n    except:\n        r=''\n    return r","c543299b":"# date = splitDate(dfa.Date.sample().values[0], 'month')\n# date\ndfa.Date.apply(lambda x: splitDate(x, 'month'))","3f1ca325":"dfa['Year'] = dfa['Date'].apply(lambda x: splitDate(x, 'year'))\ndfa['Month'] = dfa['Date'].apply(lambda x: splitDate(x, 'month'))\ndfa['WeekDay'] = dfa['Date'].apply(lambda x: splitDate(x, 'weekday'))","4f91913e":"dfa['Year'] = dfa['Year'].apply(pd.to_numeric)\ndfa['Month'] = dfa['Month'].apply(pd.to_numeric)\ndfa['WeekDay'] = dfa['WeekDay'].apply(pd.to_numeric)","6e6feeb3":"dfa.sample(2)","77ab0455":"cat","dc7298d8":"dfa['Current Ver'].unique()","3d9761ce":"currentVer = dfa['Current Ver'].unique().tolist()\ndfa['Current VerN'] = dfa['Current Ver'].apply(lambda x: currentVer.index(x))\ndfa.sample(2)","d5751aab":"androidVer = dfa['Android Ver'].unique().tolist()\ndfa['Android VerN'] = dfa['Android Ver'].apply(lambda x: androidVer.index(x))\ndfa.sample(2)","1959b3c0":"num, cat = sepColumns(dfa)\nnum","fb2d7580":"import seaborn as sns\nimport matplotlib.pyplot as plt\ndef snsBar(df,x,y,title='Comparing',figsize=(7,4), rotation=0):\n    plt.figure(figsize=figsize)\n    g=sns.barplot(x=x, y=y, data=df)\n    ax=g\n    ax.set_title(title)\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=rotation)\n    for p in ax.patches:\n                 ax.annotate(\"%.2f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                     ha='center', va='center', fontsize=11, color='gray', xytext=(0, 20),\n                     textcoords='offset points')","b38c5a5b":"cat3 = dfa[['InstallsN', 'Category']].groupby('Category').sum()\n# cat3.CategoryN = cat3.CategoryN.apply(lambda x: round(x \/ 1000000, 2))\ncat3 = cat3.sort_values(by='InstallsN', ascending=False).head(3)\ncat3","b41f0878":"snsBar(df=cat3, x=cat3.index, y='InstallsN', \n       title='Top 3 Categories - (bi installs)')","9d99a052":"maxSize = dfa.SizeN.max()\nf'maxSize is {maxSize}'","03121609":"app3 = dfa[dfa.SizeN == dfa.SizeN.max()][['App', 'Size', 'SizeN']].sort_values(by='SizeN', ascending=False)\napp3.SizeN = app3.SizeN.apply(lambda x: round(x \/ 1000000, 2))\napp3","3f538706":"snsBar(df=app3, x='App', y='SizeN', \n       title='Apps Size- (MBytes)', figsize=(15,5), rotation=90)","346007e6":"appsOld = dfa[['App', 'Date']].sort_values(by='Date').head()","e7fb5ad6":"from datetime import date\ndef diffDates(y):\n    y = y.split('-')\n    x = date.today() - date(int(y[0]), int(y[1]), int(y[2]))\n    return x","628c26c4":"appsOld['days'] = appsOld.Date.apply(lambda x: diffDates(x).days)\nappsOld","272e95e5":"snsBar(df=appsOld, x='App', y='days', \n       title='Apps Olders', figsize=(7,5), rotation=75)","3a879e4a":"inst3 = dfa[['InstallsN','App']].groupby('App').sum().sort_values(\n    by='InstallsN', ascending=False).head(3)\ninst3","a943ccc6":"snsBar(df=inst3, x=inst3.index, y='InstallsN', \n       title='Top 3 Apps - (bi installs)')","47b22859":"years = dfa[(dfa.Year >=2016) & (dfa.Year <= 2018)][['InstallsN', 'Category']]\nyears = years.groupby('Category').sum()\nyears = years.sort_values(by='InstallsN', ascending=False).head(3)\nyears","b80be5eb":"snsBar(df=years, x=years.index, y='InstallsN', \n       title='Top 3 Apps - (16 to 18)')","21c6c481":"best = dfa[dfa.Rating == dfa.Rating.max()][['App', 'Rating', 'InstallsN']].sort_values(by='Rating', ascending=False)\n# bestr.SizeN = bestr.Rating.apply(lambda x: round(x \/ 1000000, 2))\nbest","27dbee8d":"besti = best[['App', 'InstallsN']].groupby('App').sum().sort_values(\n    by='InstallsN', ascending=False).head(10)\nbesti","023d2f04":"snsBar(df=besti, x=besti.index, y='InstallsN', \n       title='Best Rating', figsize=(15, 5), rotation=90)","dbd36323":"See the list","f56ddbc1":"# For the years 2016, 2017, 2018 what are the category of apps that have got the most downloads.","4c95187c":"**Is Null - categoricals:**\n\n* Current Ver       0.000738\n* Android Ver       0.000277\n* Content Rating    0.000092\n* Type              0.000092","3a927e2a":"# App with the largest num of installs","20dabd25":"# App which hasn't been updated","24f886e5":"errors in category, rating, installs, etc","c4920a38":"# Category most popular","ab5228d6":"# App with the largest size","390ad023":"The variable 'Last Updated' has this format 'November 15, 2017'","58b7d5d1":"# Best Rating"}}