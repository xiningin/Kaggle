{"cell_type":{"edbaff51":"code","a856dc9e":"code","5c373ea7":"code","db0a549c":"code","3f96314f":"code","a919aa96":"code","0e6b2d6a":"code","41968054":"code","97e1710d":"code","7a7677f9":"code","f3967cfc":"code","f062a7d0":"code","ebd29e70":"code","30b897e9":"code","289f6080":"code","35f6fd1c":"code","1ce673b1":"code","95696678":"code","fa8b0243":"code","79edc5de":"markdown","a6eb413a":"markdown"},"source":{"edbaff51":"import pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","a856dc9e":"db = \"\/kaggle\/input\/iris-flower-dataset\/IRIS.csv\"\ndados = pd.read_csv(db, header=None)\ndados.head()","5c373ea7":"dados = dados.drop(0)\ndados.head()","db0a549c":"col_names = ['ComprimentoSepala', 'LarguraSepala', 'ComprimentoPetala', 'LarguraPetala', 'Especies']\n\ndados.columns = col_names\ndados.columns\n","3f96314f":"a_trocar = {\n    'Iris-setosa' : 0,\n    'Iris-versicolor' : 1,\n    'Iris-virginica' : 2\n}\n\ndados.Especies = dados.Especies.map(a_trocar)\ndados.head()","a919aa96":"dados['ComprimentoSepala'] = pd.to_numeric(dados['ComprimentoSepala'], errors='coerce')\ndados['LarguraSepala'] = pd.to_numeric(dados['LarguraSepala'], errors='coerce')\ndados['ComprimentoPetala'] = pd.to_numeric(dados['ComprimentoPetala'], errors='coerce')\ndados['LarguraPetala'] = pd.to_numeric(dados['LarguraPetala'], errors='coerce')\ndados['Especies'] = pd.to_numeric(dados['Especies'], errors='coerce')","0e6b2d6a":"dados.info()","41968054":"x = dados [[\"ComprimentoSepala\", \"LarguraSepala\", \"ComprimentoPetala\", \"LarguraPetala\"]]\ny = dados [\"Especies\"]","97e1710d":"import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import accuracy_score\n\nSEED = 50\nnp.random.seed(SEED)\ntreino_x, teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.2,\n                                                         stratify = y)\nprint(\"Treinaremos com %d elementos e testaremos com %d elementos\" % (len(treino_x), len(teste_x)))","7a7677f9":"from sklearn.dummy import DummyClassifier\n\ndummy_stratified = DummyClassifier()\ndummy_stratified.fit(treino_x, treino_y)\nacuracia = dummy_stratified.score(teste_x, teste_y) * 100\n\nprint(\"A acur\u00e1cia do dummy stratified foi de %.2f%%\" % acuracia)","f3967cfc":"from sklearn.tree import DecisionTreeClassifier\n\nSEED = 50\nnp.random.seed(SEED)\nmodelo = DecisionTreeClassifier(max_depth=2)\nmodelo.fit(treino_x, treino_y)\nprevisoes = modelo.predict(teste_x)\n\nacuracia = accuracy_score(teste_y, previsoes) * 100\nprint (\"A acur\u00e1cia foi %.2f%%\" % acuracia)","f062a7d0":"from sklearn.model_selection import cross_validate\n\nmodelo = DecisionTreeClassifier(max_depth=2)\nresults = cross_validate(modelo, x, y, cv = 3, return_train_score=False)\nmedia = results['test_score'].mean()\ndesvio_padrao = results['test_score'].std()\n\nprint(\"Accuracy com cross validation, 3 = [%.2f, %.2f]\" %((media - 2 * desvio_padrao) * 100, (media + 2 * desvio_padrao) * 100))","ebd29e70":"def imprime_resultados(results):\n  media = results['test_score'].mean()\n  desvio_padrao = results['test_score'].std()\n  print(\"Accuracy %.2f\" % (media*100))\n  print(\"Accuracy intervalo = [%.2f, %.2f]\" %((media - 2 * desvio_padrao) * 100, (media + 2 * desvio_padrao) * 100)) ","30b897e9":"from sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import KFold\n\nSEED = 100\nnp.random.seed(SEED)\n\ncv = KFold(n_splits = 10)\nmodelo = DecisionTreeClassifier(max_depth=2)\nresults = cross_validate(modelo, x, y, cv = cv, return_train_score=False)\nimprime_resultados(results)","289f6080":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\n\nSEED = 100\nnp.random.seed(SEED)\n\nscaler = StandardScaler()\nscaler.fit(treino_x)\ntreino_x_escalado = scaler.transform(treino_x)\nteste_x_escalado = scaler.transform(teste_x)\n\nmodelo = SVC()\nmodelo.fit(treino_x_escalado, treino_y)\nprevisoes = modelo.predict(teste_x_escalado)\n\nacuracia = accuracy_score(teste_y, previsoes) * 100\nprint(\"A acur\u00e1cia foi %.2f%%\" % acuracia)","35f6fd1c":"from sklearn.model_selection import GroupKFold\nfrom sklearn.pipeline import Pipeline\n\nSEED = 100\nnp.random.seed(SEED)\n\nscaler = StandardScaler()\nmodelo = SVC()\n\npipeline = Pipeline([('transformacao', scaler), ('estimador', modelo)])\n\ncv = GroupKFold(n_splits = 10)\nresults = cross_validate(pipeline, x, y, cv = cv, groups=dados.ComprimentoSepala, return_train_score=False)\nimprime_resultados(results)","1ce673b1":"from sklearn.model_selection import GroupKFold\nfrom sklearn.pipeline import Pipeline\n\nSEED = 100\nnp.random.seed(SEED)\n\nscaler = StandardScaler()\nmodelo = SVC()\n\npipeline = Pipeline([('transformacao', scaler), ('estimador', modelo)])\n\ncv = GroupKFold(n_splits = 10)\nresults = cross_validate(pipeline, x, y, cv = cv, groups=dados.LarguraSepala, return_train_score=False)\nimprime_resultados(results)","95696678":"from sklearn.model_selection import GroupKFold\nfrom sklearn.pipeline import Pipeline\n\nSEED = 100\nnp.random.seed(SEED)\n\nscaler = StandardScaler()\nmodelo = SVC()\n\npipeline = Pipeline([('transformacao', scaler), ('estimador', modelo)])\n\ncv = GroupKFold(n_splits = 10)\nresults = cross_validate(pipeline, x, y, cv = cv, groups=dados.ComprimentoPetala, return_train_score=False)\nimprime_resultados(results)","fa8b0243":"from sklearn.model_selection import GroupKFold\nfrom sklearn.pipeline import Pipeline\n\nSEED = 100\nnp.random.seed(SEED)\n\nscaler = StandardScaler()\nmodelo = SVC()\n\npipeline = Pipeline([('transformacao', scaler), ('estimador', modelo)])\n\ncv = GroupKFold(n_splits = 10)\nresults = cross_validate(pipeline, x, y, cv = cv, groups=dados.LarguraPetala, return_train_score=False)\nimprime_resultados(results)","79edc5de":"Adicionando aleatoriedade ao cross validate","a6eb413a":"Cross validation com StandardScaler"}}