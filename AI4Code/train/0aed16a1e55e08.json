{"cell_type":{"15277ef9":"code","33c77a42":"code","2cd484e7":"code","5be505cf":"code","3ec595e4":"code","2a2bcea8":"code","f609da9e":"code","14a01bc9":"code","928665f1":"code","fc77d002":"code","781e4e70":"code","24ab4756":"code","fbf03038":"code","b261f371":"code","cd28dcd7":"markdown","d382a121":"markdown","635ac5e7":"markdown","5e31a076":"markdown","9c08b920":"markdown","a164eba2":"markdown","d9a3659d":"markdown","d2ed6360":"markdown","07cde0ef":"markdown","bcba3589":"markdown","a083bd04":"markdown"},"source":{"15277ef9":"%matplotlib notebook\n\nimport numpy as np\nimport pandas as pd\nimport pylab as plt\nimport seaborn as sns\nimport matplotlib\n\nfrom matplotlib.patches import Polygon\nfrom sklearn.linear_model import LinearRegression\nimport datetime\nimport statsmodels.api as sm","33c77a42":"df = pd.read_csv('..\/input\/excess-mortality-across-countries-during-covid19\/world_mortality.csv')\n\ndf_official_jhu = pd.read_csv('https:\/\/github.com\/owid\/covid-19-data\/blob\/master\/public\/data\/owid-covid-data.csv?raw=true')\n\ndf_official_who = pd.read_csv('https:\/\/covid19.who.int\/WHO-COVID-19-global-data.csv')\n\ndf_population_wb = pd.read_csv('https:\/\/github.com\/datasets\/population\/blob\/master\/data\/population.csv?raw=true')\n\ndf_population_wpp = pd.read_csv('https:\/\/population.un.org\/wpp\/Download\/Files\/1_Indicators%20(Standard)\/CSV_FILES\/WPP2019_TotalPopulationBySex.csv')\ndf_population_wpp = df_population_wpp[(df_population_wpp['Variant']=='Medium')&(df_population_wpp['Time']==2020)]\ndf_population = df_population_wpp.rename(columns={'Location':'Country Name', 'PopTotal':'Value'})\ndf_population['Value'] = df_population['Value'] * 1000","2cd484e7":"df_official_who.tail()","5be505cf":"renames = {'The United Kingdom': 'United Kingdom',\n           'United States of America': 'United States',\n           'Bosnia and Herzegovina': 'Bosnia',\n           'Republic of Korea': 'South Korea',\n           'Bolivia (Plurinational State of)': 'Bolivia',\n           'Iran (Islamic Republic of)': 'Iran',\n           'Kosovo[1]': 'Kosovo',\n           'Republic of Moldova': 'Moldova',\n           'Russian Federation': 'Russia',\n          \n           'Korea, Rep.': 'South Korea',\n           'Slovak Republic': 'Slovakia',\n           'Iran, Islamic Rep.': 'Iran',\n           'Czech Republic': 'Czechia',\n           'Egypt, Arab Rep.': 'Egypt',\n           'Hong Kong SAR, China': 'Hong Kong',\n           'Kyrgyz Republic': 'Kyrgyzstan',\n           'Macao SAR, China': 'Macao',\n          \n           'China, Hong Kong SAR':'Hong Kong',\n           'China, Macao SAR': 'Macao',\n           'China, Taiwan Province of China': 'Taiwan'}\n\nfor c in renames:\n    df_official_who.loc[df_official_who['Country'] == c, 'Country'] = renames[c]\n    df_population.loc[df_population['Country Name'] == c, 'Country Name'] = renames[c]\n","3ec595e4":"\n# Excess mortality calculation starts from here (year 2020)\n\ndef get_excess_begin(country, datapoints_per_year = 53):    \n    if datapoints_per_year > 12:\n        beg = 9  # week 10\n    \n    elif datapoints_per_year > 4 and datapoints_per_year <= 12:\n        beg = 2  # March\n        \n    elif datapoints_per_year == 4:\n        beg = 0 \n        \n    return beg","2a2bcea8":"def predict(X, country, verbose=False):    \n    # Fit regression model on pre-2020 data \n    ind = (X[:,0] < 2020) & (X[:,1]<53)\n    m = np.max(X[ind,1])\n    onehot = np.zeros((np.sum(ind), m))\n    for i,k in enumerate(X[ind,1]):\n        onehot[i,k-1] = 1\n    predictors = np.concatenate((X[ind,:1], onehot), axis=1)\n    reg = LinearRegression(fit_intercept=False).fit(predictors, X[ind,2])\n        \n    if verbose:\n        est = sm.OLS(X[ind,2], predictors).fit()\n        print(est.summary())\n    \n    # Compute 2020 baseline\n    ind2 = X[:,0] == 2020\n    predictors2020 = np.concatenate((np.ones((m,1))*2020, np.eye(m)), axis=1)\n    baseline = reg.predict(predictors2020)\n            \n    # Week 53 usually does not have enough data, so we'll use \n    # the same baseline value as for week 52\n    if np.max(X[:,1])==53:\n        baseline = np.concatenate((baseline, [baseline[-1]]))\n    \n    # Excess mortality\n    ind2 = X[:,0] == 2020\n    diff2020 = X[ind2,2] - baseline[X[ind2,1]-1]\n    ind3 = X[:,0] == 2021\n    diff2021 = X[ind3,2] - baseline[X[ind3,1]-1]\n    excess_begin = get_excess_begin(country, baseline.size)\n    total_excess = np.sum(diff2020[excess_begin:]) + np.sum(diff2021)\n        \n    # Manual fit for uncertainty computation\n    if np.unique(X[ind,0]).size > 1:\n        y = X[ind,2][:,np.newaxis]\n        beta = np.linalg.pinv(predictors.T @ predictors) @ predictors.T @ y\n        yhat = predictors @ beta\n        sigma2 = np.sum((y-yhat)**2) \/ (y.size-predictors.shape[1])\n        \n        S = np.linalg.pinv(predictors.T @ predictors)\n        w = np.zeros((m, 1))\n        w[X[(X[:,0] == 2020) & (X[:,1] < 53),1]-1] = 1\n#         if np.max(X[:,1])==53:\n        if np.sum((X[:,0] == 2020) & (X[:,1] == 53)) > 0:\n            w[52-1] += 1\n        w[:excess_begin] = 0\n        w[X[ind3,1]-1] += 1\n        \n        p = 0\n        for i,ww in enumerate(w):\n            p += predictors2020[i] * ww\n        p = p[:,np.newaxis]\n                        \n        predictive_var = sigma2 * np.sum(w) + sigma2 * p.T @ S @ p\n        total_excess_std = np.sqrt(predictive_var)[0][0]\n    else:\n        total_excess_std = np.nan\n       \n    return baseline, total_excess, excess_begin, total_excess_std","f609da9e":"countries = np.unique(df['country_name'])\nprint(f'Total countries: {countries.size}')\n\nallcountries = {}\n\nheatwave_excess = np.zeros(countries.size)\n\nfor i, country in enumerate(countries):    \n    print('.', end='')\n        \n    assert(np.unique(df[(df['country_name']==country)]['time_unit']).size == 1)\n    \n    X = df[(df['country_name']==country)][['year','time','deaths']].values\n    X = X[~np.isnan(X[:,2]),:]\n    X = X.astype(int)\n      \n    baseline, total_excess, excess_begin, total_excess_std = predict(X, country)\n        \n    # https:\/\/en.wikipedia.org\/wiki\/Casualties_of_the_2020_Nagorno-Karabakh_war\n    if country=='Armenia':\n        total_excess -= 4000 # 3360\n    if country=='Azerbaijan':\n        total_excess -= 4000 # (2854+50)\n        \n    # August 2020 heatwave, weeks 32-34\n    if country in ['Belgium','France','Luxembourg','Netherlands','Germany']:\n        heatwave = np.sum(X[(X[:,0]==2020)&(X[:,1]>=32)&(X[:,1]<=34), 2])\n        heatwave -= np.sum(baseline[32-1:34+1-1])\n        total_excess -= heatwave\n        heatwave_excess[i] = heatwave\n        \n    allcountries[country] = [X, baseline, total_excess, excess_begin, total_excess_std]","14a01bc9":"# Daily reported numbers during the same time period\n\nofficial = np.zeros(len(allcountries.keys()))\nofficialnow = np.zeros(len(allcountries.keys()))\n\nfor i,m in enumerate(allcountries.keys()):\n    howmany = np.max(allcountries[m][0][:,1])\n    last = allcountries[m][0][-1][1]\n    lastyear = allcountries[m][0][-1][0]\n    \n    if howmany > 12:\n        d = f'{lastyear}-W{last:02}'\n        r = datetime.datetime.strptime(d + '-0', \"%G-W%V-%w\")\n        r = str(r)[:10]\n    elif howmany > 4:\n        if last < 12:\n            r = f'{lastyear}-{last+1:02}-01'\n        else:\n            r = f'{lastyear+1}-01-01'\n    elif howmany == 4:\n#         if m == 'Iran':\n#             https:\/\/twitter.com\/Mahan_Ghafari\/status\/1336338070249951236\n#             r = '2021-06-21'\n#         else:\n        if last < 4:\n            r = f'{lastyear}-{last*3+1:02}-01'\n        else:\n            r = f'{lastyear+1}-01-01'\n    else:\n        r = ''\n\n    # temporary fix\n    if m == 'Russia':\n        r = '2021-10-31'\n        \n    if m == 'Transnistria':\n        # From the Telegram channel https:\/\/t.me\/novostipmrcom\n        # End of April: 1112, March: 907, February: 689, January: 626, end of 2020: 473\n        # End of September: 1345, August: 1273, July: 1246, June: 1219, May: 1195\n        official[i] = 1345 \n        continue\n        \n    if m in ['Taiwan', 'Macao', 'Hong Kong']:\n        official[i] = df_official_jhu[(df_official_jhu['location']==m)\n                                      &(df_official_jhu['date']==r)]['total_deaths'].values[0]\n        officialnow[i] = df_official_jhu[(df_official_jhu['location']==m)]['total_deaths'].values[-1]\n        if np.isnan(official[i]):\n            official[i] = 0\n        if np.isnan(officialnow[i]):\n            officialnow[i] = 0\n    else:\n        official[i] = df_official_who[(df_official_who['Country']==m)\n                                  &(df_official_who['Date_reported']==r)]['Cumulative_deaths'].values[0]\n        officialnow[i] = df_official_who[(df_official_who['Country']==m)]['Cumulative_deaths'].values[-1]","928665f1":"# Sum over the entire dataset\n\ntotalexcess = 0\nfor c in allcountries:\n    totalexcess += allcountries[c][2]\n    \nprint(f'Total excess: {totalexcess:,.0f}')\nprint(f'Official Covid deats: {np.nansum(official):,.0f}')\nprint(f'Ratio: {totalexcess \/ np.nansum(official) :.2f}')","fc77d002":"\nundercounts = np.zeros(countries.size)\nfor i,country in enumerate(countries):\n    if allcountries[country][2]\/np.sum(allcountries[country][1])*100 < 2:\n        undercounts[i] = np.nan\n    else:\n        undercounts[i] = allcountries[country][2] \/ official[i]\n\nundercounts[np.isin(countries, ['Hong Kong', 'Cuba', 'Bermuda', 'Antigua and Barbuda',\n                                'Finland', 'Cyprus', 'Iceland', 'Japan', 'Singapore',\n                                'Denmark'])] = np.nan","781e4e70":"import math\n\ndef round_to_n(x, n, one_digit_below_100=True):\n    if x==0:\n        return 0\n    if np.isnan(x):\n        return np.nan\n    if one_digit_below_100 and np.abs(x) < 100:\n        return np.round(x\/10) * 10\n    else:\n        return round(x, -int(math.floor(math.log10(abs(x)))) + (n - 1))","24ab4756":"# Population\n\npops = np.zeros(len(allcountries.keys()))\nfor i,m in enumerate(allcountries.keys()):\n    # Russia's population should include Crimea because mortality figures do \n    # Ukraine's population should *not* include Crimea\n    if m=='Russia':\n        pops[i] = 146748590 # Rosstat, estimate for 1 Jan 2020    \n    elif m=='Ukraine':\n        pops[i] = 41762138  # Ukrstat 2020, according to Wikipedia\n    elif m=='Transnistria':\n        pops[i] = 465200    # NSO\n    elif m=='Kosovo':\n        pops[i] = df_population_wb[df_population_wb['Country Name']==m]['Value'].values[-1]\n    else:\n        pops[i] = df_population[df_population['Country Name']==m]['Value'].values[-1]\n        \npops[countries=='Serbia'] = pops[countries=='Serbia'] - pops[countries=='Kosovo']","fbf03038":"def percent_increase(country, zero_not_signif=False):\n    X, baseline, total_excess, excess_begin, total_excess_std = allcountries[country] \n    d = total_excess\/np.sum(baseline)*100\n    \n    if zero_not_signif and np.abs(total_excess)\/total_excess_std < 2:\n        d = 0 - ord(country[0])\/100 - ord(country[1])\/1000 # for alphabetical sorting\n    return d","b261f371":"def until_date(country):\n    howmany = np.max(allcountries[country][0][:,1])\n    last = allcountries[country][0][-1][1]\n    lastyear = allcountries[country][0][-1][0]\n\n    if howmany>12:\n        date = datetime.datetime.strptime(f'{lastyear}-W{last:02}-0', \"%G-W%V-%w\")\n    elif howmany>4:\n        if last<12:\n            date = datetime.datetime.strptime(f'{lastyear}-{last+1:02}-01', \"%Y-%m-%d\")\n        else:\n            date = datetime.datetime.strptime(f'{lastyear+1}-01-01', \"%Y-%m-%d\")\n        date -= datetime.timedelta(days=1)\n    else:\n        if last<4:\n            date = datetime.datetime.strptime(f'{lastyear}-{last*3+1:02}-01', \"%Y-%m-%d\")\n        else:\n            date = datetime.datetime.strptime(f'{lastyear+1}-01-01', \"%Y-%m-%d\")\n        date -= datetime.timedelta(days=1)\n        \n        if country=='Iran':\n            if last>1:\n                date = datetime.datetime.strptime(f'{lastyear}-{last*3:02}-21', \"%Y-%m-%d\")\n            else:\n                date = datetime.datetime.strptime(f'{lastyear-1}-12-21', \"%Y-%m-%d\")\n\n    date = date.strftime('%b %d, %Y')\n    \n    if howmany>12:\n        time_format = 'w'\n    elif howmany>4:\n        time_format = 'm'\n    else:\n        time_format = 'q'\n    \n    return date, time_format\n    \n\nprint('Country                     Until  Type   Confirmed      Excess      std      z  Undercount  Per 100k   Increase')\nprint('----------------------------------------------------------------------------------------------------------------')\n\nfor i,c in enumerate(allcountries):\n    until, time_format = until_date(c)\n    thresh = 0\n    \n    z = np.abs(allcountries[c][2])\/allcountries[c][4]\n    if np.isnan(z) or z > thresh:\n        if ~np.isnan(undercounts[i]) and allcountries[c][2] > 0:\n            undercount = f'       {undercounts[i]:5.1f}' \n        else:\n            undercount = '         ---'\n        per100k    = f'      {round_to_n(allcountries[c][2]\/pops[i]*1e+5,2):4.0f}'\n        increase   = f'       {percent_increase(c):3.0f}%'\n\n    else:\n        undercount = ''\n        per100k    = ''\n        increase   = ''\n    \n    print(f'{c:20} {until:15}  {time_format}     {round_to_n(official[i],2):7,.0f}'\n          f'     {round_to_n(allcountries[c][2],2):7,.0f} \u00b1 {round_to_n(allcountries[c][4],2):6,.0f}' \n          f'  {z:5.1f}' + undercount + per100k + increase)","cd28dcd7":"# Import Libraries","d382a121":"# Calculation of excess mortality in 2020 with linear regression","635ac5e7":"To calculate the excess mortality, the researchers built a model that estimates according to a linear regression of the mortality data between 2015-2019 what the excess mortality will be in 2020\nHere is their explanation for the calculation from the article:","5e31a076":"# Load our Data","9c08b920":"# Deduction from the calculation of mortality from wars or natural disasters during the year 2020","a164eba2":"# Calculation of excess mortality by countries","d9a3659d":"We subtracted 4,000 from the excess mortality estimates for Armenia and Azerbaijan to account for the 2020\nNagorno-Karabakh war. By official counts, it cost \u223c3,400 lives in Armenia and \u223c2,800 in Azerbaijan (Welt and\nBowen, 2021), but we took 4000 deaths in each country to obtain a conservative estimate of COVID-related\nexcess mortality. To the best of our knowledge, no other armed conflict in 2020\u20132021 resulted in more than 100\ncasualties in countries included in our dataset.\nAnother correction was done for Belgium, Netherlands, France, Luxembourg, and Germany, where our data\nshow a peak of excess deaths in August 2020, not associated with COVID-19 (see below and figure 4) and likely\ncorresponding to a heat wave (Fouillet et al., 2006, 2008; Flynn et al., 2005). We excluded weeks 32\u201334 from\nthe excess mortality calculation in these five countries. This decreased the excess mortality estimates for these\ncountries by 1,500, 660, 1,600, 35, and 3,700, respectively","d2ed6360":"![](https:\/\/github.com\/yvtsanlevy\/GitCourse\/blob\/main\/model2.JPG?raw=true)","07cde0ef":"![](https:\/\/github.com\/yvtsanlevy\/GitCourse\/blob\/main\/model1.JPG?raw=true)","bcba3589":"This notebook is based on the study of Ariel Karlinsky, and Dmitry Koba\nI encourage you to read their article at the link https:\/\/www.medrxiv.org\/content\/10.1101\/2021.01.27.21250604v1?fbclid=IwAR044P2g1TPvKeebdOhR4J16TigjJqYQ-84H52DvhdcMPlZh71tQOnC_1WE\nAnd for a deeper look at their work can be seen here \nhttps:\/\/github.com\/dkobak\/excess-mortality\n**I learned a lot from their job, and I thank them for that.**","a083bd04":"# Calculation of excess mortality from the entire dataset"}}