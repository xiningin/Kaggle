{"cell_type":{"b0d0a433":"code","e5ccd62d":"code","de56e9d8":"code","18c55ab6":"code","d16eb26b":"code","d1687626":"code","912f1a2c":"code","e2009b4e":"code","4151874d":"code","6eca5901":"code","3c17983b":"code","976af0e1":"code","f86c3fd8":"code","b60c0cb4":"code","dcfa9c9f":"code","67e591c9":"markdown","9f3297a9":"markdown","6d794c10":"markdown","56a0f52b":"markdown","0a85122c":"markdown","07d1fd45":"markdown","9df2e982":"markdown","f104bd43":"markdown"},"source":{"b0d0a433":"%matplotlib inline\nimport os\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom keras import optimizers\nfrom keras.models import Sequential\nfrom keras.layers import (\n    Dense,\n    Dropout,\n    Flatten,\n    ZeroPadding2D,\n    Conv2D,\n    MaxPool2D,\n    Activation,\n)\nfrom keras.preprocessing.image import ImageDataGenerator\n\nprint(\"import is ready\")","e5ccd62d":"# set consistent random seed\nrandom_seed = 2018\nnp.random.seed(random_seed)  \ntf.set_random_seed(random_seed)","de56e9d8":"print(os.listdir(\"..\"))\nprint(os.listdir(\".\"))","18c55ab6":"print(os.listdir(\"..\/input\"))","d16eb26b":"# flow_from_dataframe\n# https:\/\/medium.com\/@vijayabhaskar96\/tutorial-on-keras-flow-from-dataframe-1fd4493d237c\ntraindf=pd.read_csv(\"..\/input\/train.csv\",dtype=str)\n# remove new whales from input\ntraindf = traindf[traindf.Id != \"new_whale\"]\n# remove single whales values\ntraindf = traindf.groupby('Id').filter(lambda x: len(x) > 1)\n# plot Id frequencies\ntraindf['Id'].value_counts()[1:16].plot(kind='bar')\n\ntestdf=pd.read_csv(\"..\/input\/sample_submission.csv\",dtype=str)\n\n# datagen=ImageDataGenerator(rescale=1.\/255.,validation_split=0.25)\ndatagen = ImageDataGenerator(\n        rotation_range=20,\n        width_shift_range=0.1,\n        height_shift_range=0.1,\n        shear_range=0.5,\n        zoom_range=(0.9, 1.1),\n        horizontal_flip=False,\n        vertical_flip=False,\n        fill_mode='constant',\n        cval=0,\n        rescale=1.\/255.,\n        validation_split=0.25    \n)","d1687626":"traindf.shape\n# Calculate number of unique classes (whales)\nnumber_of_classes = traindf['Id'].nunique()","912f1a2c":"testdf.head(1)","e2009b4e":"# Pass the dataframes to 2 different flow_from_dataframe functions\n# https:\/\/medium.com\/@vijayabhaskar96\/tutorial-on-keras-flow-from-dataframe-1fd4493d237c\ntrain_generator=datagen.flow_from_dataframe(\ndataframe=traindf,\ndirectory=\"..\/input\/train\/\",\nx_col=\"Image\",\ny_col=\"Id\",\nsubset=\"training\",\nbatch_size=32,\nseed=42,\nshuffle=True,\nclass_mode=\"categorical\",\ntarget_size=(80,80))\n\nvalid_generator=datagen.flow_from_dataframe(\ndataframe=traindf,\ndirectory=\"..\/input\/train\/\",\nx_col=\"Image\",\ny_col=\"Id\",\nsubset=\"validation\",\nbatch_size=32,\nseed=42,\nshuffle=True,\nclass_mode=\"categorical\",\ntarget_size=(80,80))\n\ntest_datagen=ImageDataGenerator(rescale=1.\/255.)\n\ntest_generator=test_datagen.flow_from_dataframe(\ndataframe=testdf,\ndirectory=\"..\/input\/test\/\",\nx_col=\"Image\",\ny_col=None,\nbatch_size=32,\nseed=42,\nshuffle=False,\nclass_mode=None,\ntarget_size=(80,80))\n","4151874d":"# Model @frommedium\n# https:\/\/medium.com\/@vijayabhaskar96\/tutorial-on-keras-flow-from-dataframe-1fd4493d237c\nmodel = Sequential()\nmodel.add(Conv2D(64, (3, 3), padding='same',\n                 input_shape=(80,80,3)))\nmodel.add(Activation('relu'))\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (3, 3), padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(Conv2D(128, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\n# VGG 19 start\n# https:\/\/gist.github.com\/baraldilorenzo\/8d096f48a1be4a2d660d\n# part 2\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Conv2D(128, (3, 3)))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Conv2D(128, (3, 3)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\n# part1\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Conv2D(256, (3, 3)))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Conv2D(256, (3, 3)))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Conv2D(256, (3, 3)))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Conv2D(256, (3, 3)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n# VGG 19 end\n\nmodel.add(Flatten())\n# model.add(Dense(512))\nmodel.add(Dense(8192))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(number_of_classes, activation=\"softmax\"))\nmodel.compile(\n    optimizers.rmsprop(lr=0.0001, decay=1e-6),\n    loss=\"categorical_crossentropy\",\n    metrics=[\"accuracy\"],\n)\n\nprint(\"The model is ready\")","6eca5901":"# Fit the model @frommedium\n# https:\/\/medium.com\/@vijayabhaskar96\/tutorial-on-keras-flow-from-dataframe-1fd4493d237c\nSTEP_SIZE_TRAIN=train_generator.n\/\/train_generator.batch_size\nSTEP_SIZE_VALID=valid_generator.n\/\/valid_generator.batch_size\nSTEP_SIZE_TEST=test_generator.n\/\/test_generator.batch_size\n# Class weights balancing\nhistory = model.fit_generator(\n    generator=train_generator,\n    steps_per_epoch=STEP_SIZE_TRAIN,\n    validation_data=valid_generator,\n    validation_steps=STEP_SIZE_VALID,\n    class_weight=\"auto\",\n    epochs=61,\n)\n","3c17983b":"# history plots\nplt.plot(history.history['acc'])\nplt.title('Model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('Epoch')\nplt.show()\n\n# Plot the loss curve for training\nplt.plot(history.history['loss'], color='r', label=\"Train Loss\")\nplt.title(\"Train Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()\n","976af0e1":"# Evaluate model\n# https:\/\/medium.com\/@vijayabhaskar96\/tutorial-on-keras-flow-from-dataframe-1fd4493d237c\nmodel.evaluate_generator(generator=valid_generator, steps=1)","f86c3fd8":"print(os.listdir(\".\"))","b60c0cb4":"# Predict the output\n# https:\/\/medium.com\/@vijayabhaskar96\/tutorial-on-keras-flow-from-dataframe-1fd4493d237c\n\ntest_generator.reset()\npred = model.predict_generator(test_generator, steps=STEP_SIZE_TEST + 1, verbose=1)\n\npredicted_class_indices = np.argmax(pred, axis=1)\n\nlabels = train_generator.class_indices\nlabels = dict((v, k) for k, v in labels.items())\npredictions = [labels[k] for k in predicted_class_indices]\n\nfilenames = test_generator.filenames\n\nprint(\"filenames were prepared\")","dcfa9c9f":"# multiple classes output\n# https:\/\/www.kaggle.com\/hexadd5\/simple-resnet50-with-keras\nkth = 5\nclasses = np.array([c for c, v in train_generator.class_indices.items()])\n\nif True:\n    classify_index = np.argpartition(-pred, kth)[:, :kth]\n    classify_value = pred[np.arange(pred.shape[0])[:, None], classify_index]\n    best_5_pred = np.zeros((len(classify_index), 5))\n    best_5_class = np.zeros((len(classify_index), 5), dtype='int32')\n    for i, p in enumerate(classify_value):\n        sort_index = np.argsort(p)[::-1]\n        best_5_pred[i] = (p[sort_index])\n        best_5_class[i] = (classify_index[i][sort_index])\n        \n    # create output\n    submit = pd.DataFrame(columns=['Image', 'Id'])\n    for i, p in enumerate(best_5_pred):\n        submit_classes = []\n        if p[0] < 0.55:\n            submit_classes.append('new_whale')\n            submit_classes.extend(classes[best_5_class[i]][0:4])\n        elif p[1] < 0.4 :\n            submit_classes.extend(classes[best_5_class[i]][0:1])\n            submit_classes.append('new_whale')\n            submit_classes.extend(classes[best_5_class[i]][1:4])\n        elif p[2] < 0.1 :\n            submit_classes.extend(classes[best_5_class[i]][0:2])\n            submit_classes.append('new_whale')\n            submit_classes.extend(classes[best_5_class[i]][2:4])\n        elif p[3] < 0.05 :\n            submit_classes.extend(classes[best_5_class[i]][0:3])\n            submit_classes.append('new_whale')\n            submit_classes.extend(classes[best_5_class[i]][3:4])\n        else:\n            submit_classes.extend(classes[best_5_class[i]])\n        classes_text = ' '.join(submit_classes)\n        submit = submit.append(pd.Series(np.array([test_generator.filenames[i], classes_text]), index=submit.columns), ignore_index=True)\n        # print(submit)\n    submit.to_csv('submit.csv', index=False)\n    print(\"submit results were written to the output\")","67e591c9":"# Image classification with Keras","9f3297a9":"Print obtained dataframes for checking","6d794c10":"### Show the content of the current and parent folder","56a0f52b":"## Dataset\nWhales dataset","0a85122c":"### Show the content of the input folder","07d1fd45":"### Importing, normalizing, visualizing","9df2e982":"Let's upload whales dataset.","f104bd43":"![](http:\/\/)## Install dependencies"}}