{"cell_type":{"8d8da7fa":"code","5d3d96de":"code","a9c86f67":"code","09c894fb":"code","51a102bc":"code","991273a3":"code","0425ad97":"code","c007bdd1":"code","169dfd12":"code","e5931d5b":"code","fb4266a2":"code","df4d1aa4":"code","09a72f7e":"code","68d2133e":"code","7d857628":"code","a933d344":"code","96cf8b87":"code","df036ef3":"code","034b6c81":"code","00a377a4":"markdown","bd353b1a":"markdown","31c18d0b":"markdown","41a0ac84":"markdown","6a6775c5":"markdown","219d8e21":"markdown","94f5429d":"markdown","913b78a2":"markdown","eff93939":"markdown","da87a2e5":"markdown","32c03524":"markdown","e00fd353":"markdown","39e87bd4":"markdown","a3bf5d48":"markdown"},"source":{"8d8da7fa":"# Data Processing\nimport numpy as np \nimport pandas as pd \n\n# Data Visualization\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set(style='whitegrid')\n\n# Modeling\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom keras.utils.np_utils import to_categorical","5d3d96de":"df_train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","a9c86f67":"df_train.head()","09c894fb":"df_test.head()","51a102bc":"df_train.shape","991273a3":"df_test.shape","0425ad97":"df_train.isna().values.any()","c007bdd1":"b = sns.countplot(x='label', data=df_train)\nb.set_title(\"label distribution\", fontsize=15)\nb.set_xlabel(\"label\", fontsize=15)\nb.set_ylabel(\"Count\", fontsize=15);","169dfd12":"X = df_train.drop(['label'], 1).values\ny = df_train['label'].values\n\ntest_x = df_test.values","e5931d5b":"# Greyscale normalization\nX = X \/ 255.0\ntest_x = test_x \/ 255.0","fb4266a2":"# Reshape the data\nX = X.reshape(-1,28,28,1)\ntest_x = test_x.reshape(-1,28,28,1)\n\ny = to_categorical(y)","df4d1aa4":"np.random.seed(42)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)","09a72f7e":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","68d2133e":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Conv2D, Flatten, BatchNormalization\n#create model\nmodel = Sequential()\n#add model layers\n'''\nmodel.add(Conv2D(64, kernel_size= (3,3), activation='relu', input_shape=(28,28,1)))\nmodel.add(Conv2D(32, kernel_size= (3,3), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(10, activation='softmax'))\n'''\n\nmodel.add(Conv2D(32, kernel_size = 3, activation='relu', input_shape = (28, 28, 1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, kernel_size = 3, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, kernel_size = 5, strides=2, padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\n\nmodel.add(Conv2D(32, kernel_size = 3, activation='relu', input_shape = (28, 28, 1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, kernel_size = 3, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, kernel_size = 5, strides=2, padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\n\nmodel.add(Conv2D(128, kernel_size = 4, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Flatten())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))","7d857628":"#compile model using accuracy to measure model performance\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","a933d344":"#train the model\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=14)","96cf8b87":"y_pred = model.predict_classes(test_x, verbose=1)","df036ef3":"y_pred","034b6c81":"sub = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\n\nsub['Label'] = y_pred\nsub.to_csv(\"results_mnist_2.csv\", index=False)\nsub.head()","00a377a4":"### Target Value: label","bd353b1a":"# Basic Data Analysis","31c18d0b":"<div style=\"text-align:center;\"><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/2\/27\/MnistExamples.png\" \/><\/div>","41a0ac84":"**If you liked this notebook or found it helpful in any way, feel free to leave an upvote - That will keep me motivated :)**","6a6775c5":"There are no NaN values. That's Great!","219d8e21":"Let's check if we have NaN values in our dataframe.","94f5429d":"# Work in Progress","913b78a2":"Let's take a look at the distribution of the target value.","eff93939":"<h1 style=\"text-align:center\">MNIST Digit Recognition<\/h1>","da87a2e5":"As we can see, the labels are distributed relatively even.","32c03524":"### NaN values","e00fd353":"# Imports","39e87bd4":"**Context:** \n> In this competition, your goal is to correctly identify digits from a dataset of tens of thousands of handwritten images.\n\n**About the Data:**\n> Each image is 28 pixels in height and 28 pixels in width, for a total of 784 pixels in total. Each pixel has a single pixel-value associated with it, indicating the lightness or darkness of that pixel, with higher numbers meaning darker. This pixel-value is an integer between 0 and 255, inclusive.","a3bf5d48":"# Modeling"}}