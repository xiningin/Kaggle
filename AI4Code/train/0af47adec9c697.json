{"cell_type":{"2b00bc1c":"code","d6f475e6":"code","d44c5c9d":"code","c1b2d418":"code","3293f0bf":"code","941c8db5":"code","34f02e44":"code","7dc9a3cf":"code","b279ebcf":"code","77453260":"code","d3754cfc":"code","d9d3caac":"code","b8db828d":"code","198f7236":"code","95acd1a9":"code","f06de18b":"code","c2075282":"code","bd7fbd74":"code","925a3046":"code","ccbe6fc4":"code","c740ccf9":"code","2f2047bd":"code","e165d16c":"code","c57d2351":"code","569a738e":"code","5677ffc2":"code","e51206dd":"code","60f8813f":"code","12de0fc6":"code","ae671b81":"code","ca9b359b":"code","6691d0d3":"code","850c5e45":"code","2a737f5b":"code","66a910b0":"code","6731a61a":"code","9d29f2b2":"code","ba956736":"code","93dceedc":"code","9ebf8cab":"code","4b02538d":"code","bd999c80":"code","d0ad9e00":"code","2ae5be4e":"code","5ac37f44":"code","b3ad9fa6":"code","4b1ef19a":"code","4ecb2965":"code","eb72b94b":"code","356367b5":"code","aa4a1e17":"code","817b6b06":"code","057ba4c4":"code","290d96c5":"code","529cf69e":"code","c48e8bfd":"code","2d51c3b1":"code","beceac09":"code","7af6a894":"code","9ffb9ea0":"code","1da6d705":"code","aec4020e":"code","1f4f7d03":"code","24682f34":"code","ea0141c3":"code","7c648f3d":"code","a23fc8ee":"code","cfa07d02":"code","c57a331f":"code","e1e8e88b":"code","09c291f1":"code","0857fd54":"code","01c5c73c":"code","3f67a84b":"code","0912e715":"code","c1b5da05":"code","0902b854":"code","9fa4162e":"code","40733eba":"code","4ee0d6ab":"code","b6ad0b91":"code","13c6feec":"code","719824b7":"code","cecce31c":"code","6100361a":"code","b7b9868b":"markdown"},"source":{"2b00bc1c":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np; np.random.seed(0)\nimport seaborn as sns; sns.set()\nimport matplotlib.pyplot as plt\n%matplotlib inline","d6f475e6":"from sklearn.datasets import load_boston\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error","d44c5c9d":"boston=load_boston()\ntype(boston)","c1b2d418":"boston.keys()","3293f0bf":"boston.DESCR","941c8db5":"boston.feature_names","34f02e44":"boston.target","7dc9a3cf":"data=boston.data\ntype(data)","b279ebcf":"data.shape","77453260":"data=pd.DataFrame(data=data, columns=boston.feature_names)\ndata.head()","d3754cfc":"data[\"price\"]=boston.target\ndata.head()","d9d3caac":"data.describe()","b8db828d":"data.info()","198f7236":"data.isnull()","95acd1a9":"data.isnull().sum()","f06de18b":"sns.pairplot(data)","c2075282":"rows=2\ncols=7\nfig, ax= plt.subplots(nrows= rows, ncols=cols, figsize=(16,4))\ncol=data.columns\nindex=0\nfor i in range (rows):\n    for j in range(cols):\n        sns.distplot(data[col[index]], ax=ax[i][j])\n        index=index+1\nplt.tight_layout()","bd7fbd74":"corrmat=data.corr()\ncorrmat","925a3046":"uniform_data = np.random.rand(10, 12)\nax = sns.heatmap(corrmat)","ccbe6fc4":"corrmat.index.values","c740ccf9":"def getCorrelatedFeature(corrdata,thershold):\n    feature=[]\n    value=[]\n    for i,index in enumerate(corrdata.index):\n        if abs(corrdata[index])>thershold:\n            feature.append(index)\n            value.append(corrdata[index])\n    df=pd.DataFrame(data=value, index=feature, columns=['Corr Value'])\n    return df","2f2047bd":"thershold=0.50\ncorr_value=getCorrelatedFeature(corrmat['price'],thershold)\ncorr_value","e165d16c":"corr_value.index.values","c57d2351":"correlated_data=data[corr_value.index]\ncorrelated_data.head()","569a738e":"sns.pairplot(correlated_data)\nplt.tight_laayout()","5677ffc2":"x = sns.heatmap(correlated_data.corr())","e51206dd":"X=correlated_data.drop(labels=['price'],axis=1)\ny=correlated_data['price']\nX.head()","60f8813f":"y.head()","12de0fc6":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","ae671b81":"X_train.shape,X_test.shape","ca9b359b":"model=LinearRegression()\nmodel.fit(X_train,y_train)","6691d0d3":"y_predict=model.predict(X_test)\n","850c5e45":"y_predict,y_test","2a737f5b":"df=pd.DataFrame(data=[y_predict,y_test])\ndf.T","66a910b0":"from sklearn.metrics import r2_score","6731a61a":"score=r2_score(y_test,y_predict)\nmae=mean_absolute_error(y_test,y_predict)\nmse=mean_squared_error(y_test,y_predict)\nprint('r2_ score:',score)\nprint('mae:',mae)\nprint('mse:',mse)","9d29f2b2":"total_features=[]\ntotal_features_name=[]\nselected_correlation_value=[]\nr2_scores=[]\nmae_value=[]\nmse_value=[]\n","ba956736":"def perfomance_metrices(features,th,y_true,y_pred):\n    score=r2_score(y_true,y_pred)\n    mae=mean_absolute_error(y_true,y_pred)\n    mse=mean_squared_error(y_true,y_pred)\n    total_features.append(len(features)-1)\n    total_features_name.append(str(features))\n    selected_correlation_value.append(th)\n    r2_scores.append(score)\n    mae_value.append(mae)\n    mse_value.append(mse)\n    metrics_datatframe=pd.DataFrame(data=[total_features_name,total_features,selected_correlation_value,r2_scores,mae_value,mse_value],index=['features name','#feature','corr_value','MAE','MSE','as'])\n    return metrics_datatframe.T","93dceedc":" perfomance_metrices(correlated_data.columns.values,thershold,y_test,y_predict)","9ebf8cab":"rows=2\ncols=2\nfig,ax=plt.subplots(nrows=rows,ncols=cols,figsize=(16,4))\ncol=correlated_data.columns\nindex=0\nfor i in range(rows):\n    for j in range(cols):\n        sns.regplot(x=correlated_data[col[index]],y=correlated_data['price'],ax=ax[i][j])\n        index= index+1\nfig.tight_layout()","4b02538d":"from numpy import std\nfrom numpy import absolute\nfrom pandas import read_csv\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.linear_model import Ridge\nmodel = Ridge()\nmodel.fit(X_train,y_train)","bd999c80":"y_predict=model.predict(X_test)\nr2_score(y_test,y_predict)","d0ad9e00":"corrmat['price']","2ae5be4e":"thershold=0.60\ncorr_value=getCorrelatedFeature(corrmat['price'],thershold)\ncorr_value","5ac37f44":"correlated_data=data[corr_value.index]\ncorrelated_data.head()\n\n\n\n\n","b3ad9fa6":"def get_y_predict(corr_data):\n    x=corr_data.drop(labels=['price'],axis=1)\n    y=corr_data['price']\n    X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2, random_state=0)\n    model=LinearRegression()\n    model.fit(X_train,y_train)\n    return y_predict","4b1ef19a":"y_predict=get_y_predict(correlated_data)","4ecb2965":"perfomance_metrices(correlated_data.columns.values,thershold,y_test,y_predict)","eb72b94b":"corrmat['price']","356367b5":"thershold=0.70\ncorr_value=getCorrelatedFeature(corrmat['price'],thershold)\ncorr_value","aa4a1e17":"correlated_data=data[corr_value.index]\ncorrelated_data.head()","817b6b06":"y_predicts=get_y_predict(correlated_data)\nperfomance_metrices(correlated_data.columns.values,thershold,y_test,y_predict)","057ba4c4":"correlated_data=data[['RM','price']]\ncorrelated_data.head()","290d96c5":"y_predicts=get_y_predict(correlated_data)\nperfomance_metrices(correlated_data.columns.values,thershold,y_test,y_predict)","529cf69e":"model=LinearRegression(normalize=True)\nmodel.fit(X_train,y_train)","c48e8bfd":"y_predict=model.predict(X_test)\ns1=r2_score(y_test,y_predict)\nprint(s1)","2d51c3b1":"from sklearn import datasets, linear_model\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold","beceac09":"model = linear_model.Ridge()\nmodel.fit(X_train,y_train)","7af6a894":"y_predict=model.predict(X_test)\ns2=r2_score(y_test,y_predict)\nprint(s2)\n","9ffb9ea0":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import PolynomialFeatures","1da6d705":"model = make_pipeline(PolynomialFeatures(degree=3), linear_model.Ridge())\nmodel.fit(X_train,y_train)\n","aec4020e":"y_predict=model.predict(X_test)\ns3=r2_score(y_test,y_predict)\nprint(s3)","1f4f7d03":"from sklearn.svm import SVR\nfrom sklearn.model_selection import GridSearchCV\nmodel = SVR(kernel='rbf', C=1e3, gamma=0.1)\nmodel.fit(X_train,y_train)","24682f34":"y_predict=model.predict(X_test)\ns4=r2_score(y_test,y_predict)\nprint(s4)","ea0141c3":"from sklearn.tree import DecisionTreeRegressor\nmodel = DecisionTreeRegressor(max_depth=5)\nmodel.fit(X_train,y_train)\n","7c648f3d":"y_predict=model.predict(X_test)\ns5=r2_score(y_test,y_predict)\nprint(s5)","a23fc8ee":"from sklearn.neighbors import KNeighborsRegressor\nmodel= KNeighborsRegressor(n_neighbors=7)\nmodel.fit(X_train,y_train)","cfa07d02":"y_predict=model.predict(X_test)\ns6=r2_score(y_test,y_predict)\nprint(s6)","c57a331f":"from sklearn.ensemble import GradientBoostingRegressor\n\nmodel = GradientBoostingRegressor(alpha=0.9,learning_rate=0.05, max_depth=2, min_samples_leaf=5, min_samples_split=2, n_estimators=100, random_state=30)\nmodel.fit(X_train,y_train)\n","e1e8e88b":"y_predict=model.predict(X_test)\ns7=r2_score(y_test,y_predict)\nprint(s7)","09c291f1":"import matplotlib.pyplot as plt\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nmodels = ['linear_reg.','Ridg_reg.','poly_reg','SVM','Decission_tree','k_nearest','gradient']\nscore = [s1,s2,s3,s4,s5,s6,s7]\nax.bar(models,score)\nplt.show()","0857fd54":"y_predict=model.predict(X_test)","01c5c73c":"df=pd.DataFrame(data=[y_predict,y_test])\ndf.T","3f67a84b":"from sklearn.model_selection import learning_curve","0912e715":"train_sizes = [1, 30,40,80,120,180,200,250]\ntrain_sizes, train_scores, validation_scores = learning_curve(\nestimator = LinearRegression(),\nX = X_train,\ny = y_train, train_sizes = train_sizes, cv = 5,\nscoring = 'neg_mean_squared_error')","c1b5da05":"print('Training scores:\\n\\n', train_scores)\nprint('\\n', '-' * 70) # separator to make the output easy to read\nprint('\\nValidation scores:\\n\\n', validation_scores)","0902b854":"train_scores_mean = -train_scores.mean(axis = 1)\nvalidation_scores_mean = -validation_scores.mean(axis = 1)\nprint('Mean training scores\\n\\n', pd.Series(train_scores_mean, index = train_sizes))\nprint('\\n', '-' * 20) # separator\nprint('\\nMean validation scores\\n\\n',pd.Series(validation_scores_mean, index = train_sizes))","9fa4162e":"import matplotlib.pyplot as plt\n\nplt.style.use('seaborn')\nplt.plot(train_sizes, train_scores_mean, label = 'Training error')\nplt.plot(train_sizes, validation_scores_mean, label = 'Validation error')\nplt.ylabel('MSE', fontsize = 14)\nplt.xlabel('Training set size', fontsize = 14)\nplt.title('Learning curves for a linear regression model', fontsize = 18, y = 1.03)\nplt.legend()\nplt.ylim(0,40)","40733eba":"train_sizes = [1, 30,40,80,120,180,200,250]\ntrain_sizes, train_scores, validation_scores = learning_curve(\nestimator = GradientBoostingRegressor(alpha=0.9,learning_rate=0.05, max_depth=2, min_samples_leaf=5, min_samples_split=2, n_estimators=100, random_state=30),\nX = X_train,\ny = y_train, train_sizes = train_sizes, cv = 5,\nscoring = 'neg_mean_squared_error')","4ee0d6ab":"print('Training scores:\\n\\n', train_scores)\nprint('\\n', '-' * 70) # separator to make the output easy to read\nprint('\\nValidation scores:\\n\\n', validation_scores)","b6ad0b91":"train_scores_mean = -train_scores.mean(axis = 1)\nvalidation_scores_mean = -validation_scores.mean(axis = 1 )\nprint('Mean training scores\\n\\n', pd.Series(train_scores_mean, index = train_sizes))\nprint('\\n', '-' * 20) # separator\nprint('\\nMean validation scores\\n\\n',pd.Series(validation_scores_mean, index = train_sizes))","13c6feec":"import matplotlib.pyplot as plt\n\nplt.style.use('seaborn')\nplt.plot(train_sizes, train_scores_mean, label = 'Training error')\nplt.plot(train_sizes, validation_scores_mean, label = 'Validation error')\nplt.ylabel('MSE', fontsize = 14)\nplt.xlabel('Training set size', fontsize = 14)\nplt.title('Learning curves for Gradient Decent', fontsize = 18, y = 1.03)\nplt.legend()\nplt.ylim(0,40)","719824b7":"from xgboost import XGBRegressor\nreg = XGBRegressor()\nreg.fit(X_train, y_train)","cecce31c":"y_pred = reg.predict(X_train)","6100361a":"s7=r2_score(y_test,y_predict)\nprint(s6)","b7b9868b":"corr_value.index.values"}}