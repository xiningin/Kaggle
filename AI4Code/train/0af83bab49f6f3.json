{"cell_type":{"2ec9cb7c":"code","a55681ff":"code","a2c01818":"code","c6c214f8":"code","26540a5b":"code","d652ffe4":"code","548cb876":"code","6ab83788":"code","ab2efcd5":"code","eed3e5f3":"code","b0b33bde":"code","45829011":"code","a5e22150":"code","ffb26edf":"code","9fc6cc45":"code","d99e3e03":"code","333cdf31":"code","8e7c7ab5":"code","571706b2":"code","f94de5f4":"code","d922f6fb":"code","1f33cb45":"code","b88c9a5d":"code","38f4004d":"code","8e3d8aa4":"code","80a65243":"markdown","c6274aaf":"markdown","64cd6718":"markdown","527ff7d4":"markdown","6ae41639":"markdown","fc1a6a05":"markdown","0272bc7a":"markdown","0e6cb970":"markdown","6dd35963":"markdown","9e13d4a4":"markdown","460e0cb5":"markdown","74da6e54":"markdown","57b4d1fd":"markdown","7aa3756d":"markdown","c62d7957":"markdown","52bb49a0":"markdown","740df492":"markdown","6c256be1":"markdown","3d2c10cb":"markdown","203d75ad":"markdown","f2517000":"markdown","c9962d48":"markdown","78b6f9a7":"markdown","d19a2a8e":"markdown","8a5e1174":"markdown","39c832ac":"markdown","d11604c5":"markdown","95c4b7bb":"markdown","fee59e3e":"markdown"},"source":{"2ec9cb7c":"import pandas as pd\nimport numpy as np\n\nurl = '..\/input\/habermans-survival-data-set\/haberman.csv'\nlist_cols = ['Age', \"Patient's Years\", \"N_positive_ax\", \"survival_status\"]\ndf = pd.read_csv(url, names=list_cols)","a55681ff":"df.head()","a2c01818":"df['survival_status'].value_counts()","c6c214f8":"X = df.drop(['survival_status'], axis=1)\ny = df['survival_status']\n\n# spliting daa\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=21, stratify=y)","26540a5b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score,cross_validate\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix, classification_report\nmodel_lr = LogisticRegression()\ncv_score = cross_val_score(model_lr, X,y, scoring='roc_auc', cv=5)\ncv_score.mean()","d652ffe4":"model_lr.fit(X_train, y_train)\ny_pred = model_lr.predict(X_test)","548cb876":"confusion_matrix(y_test, y_pred, labels=[1,2])","6ab83788":"print(classification_report(y_test, y_pred))","ab2efcd5":"TP = 52\nTN = 3\nFP = 17\nFN = 5","eed3e5f3":"precision = TP\/(TP+FP)\nprecision","b0b33bde":"recall = TP\/(TP+FN)\nrecall","45829011":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\nmodel_knn =  KNeighborsClassifier()\nparam_grid = {'n_neighbors':np.arange(5,50), 'weights':['distance','uniform']}\ngscv= GridSearchCV(model_knn,param_grid=param_grid, scoring='roc_auc', cv=5)\n#latih model\ngscv.fit(X,y)","a5e22150":"gscv.best_params_","ffb26edf":"gscv.best_score_","9fc6cc45":"gscv.predict_proba(X_test)","d99e3e03":"gscv.classes_\ngscv.predict_proba(X_test)[:,1]","333cdf31":"cv_score_1 = cross_validate(model_knn, X,y, scoring='roc_auc', cv=5, return_train_score=True)\ncv_score_2 = cross_val_score(model_knn, X,y, scoring='roc_auc')\ncv_score_1","8e7c7ab5":"def knn_pred(k):\n  model = KNeighborsClassifier(n_neighbors=k)\n  score = cross_validate(model, X,y, cv=10, return_train_score=True)\n  train_score = score['train_score'].mean()\n  test_score = score['test_score'].mean()\n  return train_score, test_score","571706b2":"train_scores = []\ntest_scores = []\n\nfor k in range(2,100):\n  train_score, test_score = knn_pred(k)\n  train_scores.append(train_score)\n  test_scores.append(test_score)","f94de5f4":"import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12,8))\n\nax.plot(range(2,100), train_scores, marker='x', label='Train Score', color='g')\nax.plot(range(2,100), test_scores, marker='o', label='Test Score', c='b')\n\nax.set_xlabel('K')\nax.set_ylabel('score')\n\nplt.legend()\nplt.show()","d922f6fb":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nmodel_dt = DecisionTreeClassifier()\nparam_grid = {'splitter':['best','random'], 'criterion':['gini','entropy']}\nrscv= RandomizedSearchCV(model_dt,param_distributions=param_grid,n_iter=100,scoring='roc_auc')\n#latih model\nrscv.fit(X,y)","1f33cb45":"rscv.best_params_","b88c9a5d":"rscv.predict_proba(X_test)","38f4004d":"rscv.classes_\nrscv.predict_proba(X_test)[:,1]","8e3d8aa4":"cv_score_1_ = cross_validate(model_dt, X,y, scoring='roc_auc', cv=5, return_train_score=True)\ncv_score_2_ = cross_val_score(model_dt, X,y, scoring='roc_auc')\ncv_score_1_","80a65243":"**Decision Tree**","c6274aaf":"# Evaluasi Matriks","64cd6718":"Menggunakan GridSearchCV untuk hyperparameter tuning dan model selection dan model algoritma KNN sebagai model classifier.","527ff7d4":"Menampilkan hasil prediksi dimana masing2 adalah nilai probabilitas untuk setiap class label dan urutan label dari hasil prediksi probabilitas.","6ae41639":"Pada tugas ini menggunakan data untuk memprediksi kelangsungan hidup pasien yang telah mengalami operasi payudara. Dengan informasi yang dimiliki terkait pasien, kita akan membuat model untuk memprediksi apakah pasien akan bertahan hidup dalam waktu lebih dari 5 tahun atau tidak.","fc1a6a05":"Membuat report hasil akurasi,precisio, recall dan f1-score dari hasil prediksi","0272bc7a":"Menampilkan data teratas","0e6cb970":"Menggunakan gscv untuk tuning hyperparameter model algoritma KNN dengan n array 5-50 dan weights 'distance' dan 'uniform'","6dd35963":"Precision menunjukkan hasil yang lebih menunjukkan keefektifan pada matriks True Negatif dan dangat menghidari adanya data yang False Positif ","9e13d4a4":"Confussion matriks yang menunjukkan data TP, TN, FP, dan FN","460e0cb5":"Mendapatkan hyperparameter terbaik untuk kombinasi hyperparameterMendapatkan ","74da6e54":"# Model Selection","57b4d1fd":"> dari visualisasi diatas didapatkan model ini memberikan performa\/skor baik dengan k = 40","7aa3756d":"Kita coba secara manual menghitung recall dan precision","c62d7957":"Menghitung value dari kolom 'survival_status'","52bb49a0":"Menentukan label dan fitur serta membagi data menjadi data train dan data test","740df492":"**Visualisasi score dari K data train dan data test**","6c256be1":"Prediksi probabilitasi output","3d2c10cb":"Prediksi probabilitasi output","203d75ad":"**Import dataset**","f2517000":"Menampilkan hasil prediksi dimana masing2 adalah nilai probabilitas untuk setiap class label dan urutan label dari hasil prediksi probabilitas.","c9962d48":"**Recall**","78b6f9a7":"Melakukan fitting model dan predicting untuk data test","d19a2a8e":"Hyperparameter terbaik untuk kombinasi hyperparameter","8a5e1174":"> Menggunakan dataset yang sama dengan dataset untuk evaluasi matriks","39c832ac":"Import model ML, cross val score, gscv dan matriks untuk evalusai ML serta menentukan cv score rata-rata","d11604c5":"**Precision**","95c4b7bb":"Score validasi terbaik","fee59e3e":"**KNN**"}}