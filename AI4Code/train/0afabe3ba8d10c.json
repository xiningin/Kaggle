{"cell_type":{"63e94662":"code","de41b350":"code","f3b717d5":"code","c31d77a7":"code","3cfd16a9":"code","a5c8de76":"code","785104e3":"code","adf376b6":"code","768a0c6a":"code","5b9d8a3a":"code","03047603":"code","9e58d0f7":"code","14631f86":"code","ea2835b6":"markdown","5a6d0843":"markdown","4378a60f":"markdown","2c8426d4":"markdown","cc445ec7":"markdown","6a235efb":"markdown","ea0f1949":"markdown","47a2eaac":"markdown","d0d1bf7f":"markdown","963beb44":"markdown","bdd7ee88":"markdown"},"source":{"63e94662":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","de41b350":"data = pd.read_csv(\"..\/input\/severstal-steel-defect-detection\/train.csv\")\ndata.info()","f3b717d5":"defects = data[pd.notna(data.EncodedPixels)]\ndefects.EncodedPixels = 1\ndefects.info()\nprint(defects)","c31d77a7":"print((data.EncodedPixels).isnull())\nNoDefects = data[(data.EncodedPixels).isnull()]\nNoDefects.EncodedPixels = 0\nNoDefects.info()\nprint(NoDefects)","3cfd16a9":"dataset= NoDefects.sample(defects.shape[0])\ndataset = dataset.append(defects,ignore_index=True)\ndataset = dataset.sample(frac=1, replace=True, random_state=1)\ndataset","a5c8de76":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfilename = str(dataset.sample(1).ImageId_ClassId.values)[2:]\nfilename = filename[:-4]\nfilename = \"..\/input\/severstal-steel-defect-detection\/train_images\/\"+filename\nprint(filename)\n\nimg=mpimg.imread(filename)\nimgplot = plt.imshow(img)\nplt.show()","785104e3":"val = dataset[0:1000]\ntest = dataset[1000:2000]\ntrain = dataset[2000:]\ntrain.info","adf376b6":"from skimage.feature import hog\nimport cv2\n\ndef my_extractHOG(filename):\n    filename = str(filename)\n    filename = filename[:-2]\n    filename = \"..\/input\/severstal-steel-defect-detection\/train_images\/\" + filename\n    img = mpimg.imread(filename)\n    img = cv2.resize(img, dsize=(600, 70), interpolation=cv2.INTER_CUBIC)\n    print(str(i)+\"\/\"+str(train.ImageId_ClassId.shape[0]))\n    img = img \/ 256\n    fd,hog_image = hog(img, orientations=8, pixels_per_cell=(ppc,ppc),cells_per_block=(4, 4),block_norm= 'L2',visualize=True)\n    return fd,hog_image\n\nppc = 16\nhog_images = []\nhog_features = []\n\nfor i, filename in enumerate(train.ImageId_ClassId):\n    fd,hog_image = my_extractHOG(filename)\n    if i<6 : hog_images.append(hog_image) # save some of images for example purpose only\n    hog_features.append(fd)","768a0c6a":"plt.imshow(hog_images[3])\nprint(hog_features[3].shape)","5b9d8a3a":"from sklearn.svm import SVC\nclf = SVC(gamma='auto')\nprint(train.EncodedPixels.values.shape)\ny = train.EncodedPixels.values\nX = np.array(hog_features)\nprint(X.shape)\nclf.fit(X,y)","03047603":"from sklearn.metrics import roc_auc_score\ny_scores = [] # init array\nhog_features2 = []\nfor i, filename in enumerate(test.ImageId_ClassId):\n    fd,hog_image = my_extractHOG(filename)\n    out = clf.predict([np.array(fd)])\n    y_scores.append(out)\n    print(len(y_scores))\n    hog_features2.append(fd)\ny_true = test.EncodedPixels.values\ny_scores = np.array(y_scores)\nroc_auc_score(y_true, y_scores)","9e58d0f7":"from catboost import CatBoostClassifier, Pool\ncat_features = [0]\nX = 10000 * X\nX = X.astype(int)\nprint(X)\ny.astype(int)\nprint(y)\nXval = 10000*np.array(hog_features2)\nprint(Xval)\n","14631f86":"train_dataset = Pool(data=X,\n                     label=y,\n                     cat_features=cat_features)\n\neval_dataset = Pool(data=Xval.astype(int),\n                    label=y_true,\n                    cat_features=cat_features)\n\n# Initialize CatBoostClassifier\nmodel = CatBoostClassifier(iterations=300,\n                           learning_rate=1,\n                           depth=2,\n                           custom_metric='AUC')\n# Fit model\nmodel.fit(train_dataset, eval_set=eval_dataset, use_best_model=True)\n# Get predicted classes\npreds_class = model.predict(eval_dataset)\nprint(preds_class)\n# Get predicted probabilities for each class\npreds_proba = model.predict_proba(eval_dataset)\n# Get predicted RawFormulaVal\npreds_raw = model.predict(eval_dataset,\n                          prediction_type='RawFormulaVal')\nprint(model.get_best_score())\nmodel.save_model('1layer_catboost')","ea2835b6":"split train, val, test","5a6d0843":"convert images to HOG vector","4378a60f":"catboost","2c8426d4":"Here we get rows without data in the EncodedPixels column and set class to 0","cc445ec7":"Here we combine same number of images from both classes, and shuffle them","6a235efb":"#Here we prepare the dataset for a training ","ea0f1949":"train","47a2eaac":"# Here we get set of rows with notnull masks in the EncodedPixels column an set to 1","d0d1bf7f":"svm","963beb44":"show image example","bdd7ee88":"test SVM predictions"}}