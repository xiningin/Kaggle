{"cell_type":{"f6c1ee36":"code","f0ea6fd5":"code","29aed1f3":"code","de5df980":"code","7e2ee6ef":"code","0f652710":"code","24584b6d":"code","72c3d4f5":"code","5af6249a":"code","0654a046":"code","4f50a7fb":"code","d96e6fdc":"code","407ff3d5":"code","e21bcf1f":"markdown","044c4686":"markdown","9704393c":"markdown","d10e006e":"markdown","22a1cf5b":"markdown","77f3b5c0":"markdown","6df74d81":"markdown","8c7ab3bd":"markdown"},"source":{"f6c1ee36":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndata = pd.read_csv(\"..\/input\/heart-disease-prediction-using-logistic-regression\/framingham.csv\")\n\n","f0ea6fd5":"data.info()\ndata.head()\ndata.describe()","29aed1f3":"data = data.fillna(0)\ny = data.TenYearCHD.values\nx_data = data.drop([\"TenYearCHD\"],axis = 1)\n","de5df980":"x_data","7e2ee6ef":"x = (x_data - np.min(x_data)) \/ (np.max(x_data)-np.min(x_data)).values","0f652710":"x","24584b6d":"from sklearn.model_selection import train_test_split\n\nx_train , x_test , y_train , y_test = train_test_split(x,y, test_size = 0.2, random_state = 42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\nprint(\"x_train: \",x_train.shape)   \nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)","72c3d4f5":"def initialize_weights_and_bias(dimension):\n     \n    weight = np.full((dimension,1),0.01) \n    bias = 0.0\n    return weight,bias\n\n\ndef sigmoid(z):\n    \n    y_head = 1\/(1+ np.exp(-z))\n    return y_head       \n","5af6249a":"print(sigmoid(0))","0654a046":"def forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b  # Logistic regression equation = z = b + px1w1 + px2w2 + ... + px4096*w4096 \n    y_head = sigmoid(z) \n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)  #loss function\n    cost = (np.sum(loss))\/x_train.shape[1]      # x_train.shape[1]  is for scaling\n    \n    \n    \n    # backward propagation We need to take the derivative of our cost and loss function according to weight and bias and update it.\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 # x_train.shape[1]  is for scaling\n    gradients = {\"derivative_weight\": derivative_weight,\"derivative_bias\": derivative_bias} \n    return cost,gradients","4f50a7fb":"def update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []  #to save all costs\n    cost_list2 = []\n    index = []\n    # updating(learning) parameters is number_of_iterarion times\n    \n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0: #to show every 10 elements\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","d96e6fdc":"def predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","407ff3d5":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 15\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # Print train\/test Errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 3, num_iterations = 100)","e21bcf1f":"# Train and Test Splitting","044c4686":"# Parameter initializing and creating sigmoid function","9704393c":"# Prediction","d10e006e":"Dividing data into two parts, one for testing(20%) and one for training(80%) ","22a1cf5b":"# Logistic Regression","77f3b5c0":"# Forward Backward Propagation","6df74d81":"# Update","8c7ab3bd":"# Normalization approach to provide data consistency"}}