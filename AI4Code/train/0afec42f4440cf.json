{"cell_type":{"f739617e":"code","d12fe5f5":"code","d6e44b52":"code","76016261":"code","4e906e3a":"code","3d8a45a8":"code","032f97a1":"code","c11b1ac5":"code","7cc313f6":"code","49081e0e":"code","910124d2":"code","1ba1d24a":"code","9f38a060":"code","0e99655d":"code","01b23b0a":"code","cb9496dd":"code","6013878c":"code","bab2c4bf":"code","1e8feeca":"markdown","4a94dc80":"markdown","6d1e36cd":"markdown","58c8e063":"markdown","2bcf724e":"markdown","5ca6789a":"markdown","654e5c2f":"markdown","7486675a":"markdown","cd5ef48b":"markdown","175c840a":"markdown","a476c0e9":"markdown","484f8387":"markdown","f55d8481":"markdown","7956ffad":"markdown","e687c7f3":"markdown","9efb1a93":"markdown"},"source":{"f739617e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d12fe5f5":"import matplotlib.pyplot as plt\nimport seaborn as sns","d6e44b52":"data='..\/input\/videogamesales\/vgsales.csv'\nvg_sales= pd.read_csv(data, header=0, sep=',')\nprint(vg_sales.head())","76016261":"print(vg_sales.describe())","4e906e3a":"print(vg_sales.info())","3d8a45a8":"print(vg_sales.isnull().sum())","032f97a1":"mean = vg_sales['Year'].mean()\nvg_sales['Year'].fillna(mean, inplace=True)\nplt.xticks(rotation = 75)\nx_axis = vg_sales['Year'].astype(int)\nsns.countplot(x= x_axis, data = vg_sales)\nplt.title('Total Game Sales Each Year')\nplt.show()","c11b1ac5":"plt.xticks(rotation = 75)\nx_axis = vg_sales['Genre']\nsns.countplot(x= x_axis, data = vg_sales)\nplt.title('Total Game Sales of Each Genre')\nplt.show()","7cc313f6":"game_sales = vg_sales[['Genre','Name']].groupby(['Genre']).agg(lambda x:x.value_counts().index[0])\ngenre_games = game_sales.rename(columns = {'Name' : 'Game'}, inplace = False)\ngenre_games","49081e0e":"plt.xticks(rotation = 75)\nx_axis = vg_sales['Platform']\nsns.countplot(x= x_axis, data = vg_sales)\nplt.title('Total Game Sales on Each Platform')\nplt.show()","910124d2":"correlation_vg_sales = vg_sales.corr()\n\naxis_corr = sns.heatmap(\ncorrelation_vg_sales,\nvmin=-1, vmax=1, center=0,\ncmap=sns.diverging_palette(50, 500, n=500),\nsquare=True\n)\n\nplt.show()","1ba1d24a":"vg_sales['Publisher'] = vg_sales['Publisher'].fillna('Unknown')\nnumber_df = vg_sales.groupby('Publisher')[['Name']].count().sort_values('Name', ascending = False).head(50)\nnumber_clean = number_df.rename(columns = {'Name' : 'Number'}, inplace = False)\nnumber_clean","9f38a060":"number_df.plot(kind = 'bar', figsize = (25, 10));\nplt.xlabel('Publisher', fontsize = 20);\nplt.ylabel('Number of video games released', fontsize = 20);\nplt.title('Top Publishers of Games', fontsize = 40)","0e99655d":"top_games_NA = vg_sales.sort_values('NA_Sales',ascending = False).head(5)\nexplode = [0.1, 0, 0, 0, 0]\nplt.pie(top_games_NA['NA_Sales'], labels = top_games_NA['Name'], explode = explode)\nplt.show()","01b23b0a":"top_games_EU = vg_sales.sort_values('EU_Sales',ascending = False).head(5)\nexplode = [0.1, 0, 0, 0, 0]\nplt.pie(top_games_EU['EU_Sales'], labels = top_games_EU['Name'], explode = explode)\nplt.show()\n","cb9496dd":"top_games_JP = vg_sales.sort_values('JP_Sales',ascending = False).head(5)\nexplode = [0.1, 0, 0, 0, 0]\nplt.pie(top_games_JP['JP_Sales'], labels = top_games_JP['Name'], explode = explode)\nplt.show()\n","6013878c":"top_games_Other = vg_sales.sort_values('Other_Sales',ascending = False).head(5)\nexplode = [0.1, 0, 0, 0, 0]\nplt.pie(top_games_Other['Other_Sales'], labels = top_games_Other['Name'], explode = explode)\nplt.show()\n","bab2c4bf":"top_games_Global = vg_sales.sort_values('Global_Sales',ascending = False).head(5)\nexplode = [0.1, 0, 0, 0, 0]\nplt.pie(top_games_Global['Global_Sales'], labels = top_games_Global['Name'], explode = explode)\nplt.show()\n","1e8feeca":"**Thus, *Action* is the most sold genre**","4a94dc80":"For the most video game sales on platforms:","6d1e36cd":"**Thus, most common Pulisher of video games is *Electronic arts followed by Activision***","58c8e063":"To find the correlation between the numerical values in the dataset:","2bcf724e":"For analysing sales with respect to the year, we must fill the null cells.","5ca6789a":"For most common games by region,","654e5c2f":"**Thus, the *PS2 and the DS* are the most used platforms**","7486675a":"Reading the dataset:","cd5ef48b":"Finding the total null values in each column:","175c840a":"Importing the essential modules,","a476c0e9":"For, the most sold games in each genre:","484f8387":"**Thus, both *NA sales and EU* sales are closely related to *Global sales***","f55d8481":"**Thus, most video games were sold in *2009 and 2008***","7956ffad":"# **Video Game Sales Analysis**","e687c7f3":"***Wii Sports* is the most sold game in North America and European Union.**  \n***Pokemon Red\/Pokemon Blue* is the most sold same in Japan.**  \n***GTA San Andreas* is the most sold game in other regions.**  \n***Wii Sports* is the most sold game globally.**","9efb1a93":"For analysing the most common publisher, we must fill the null cells with a common value 'Unknown'"}}