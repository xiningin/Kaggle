{"cell_type":{"5f889728":"code","8336c436":"code","28cbcd10":"code","b5fa9eb9":"code","12b292b1":"code","4e31e777":"code","ef01fbd3":"code","2160c876":"code","e1244342":"code","b03ed6ce":"code","0eea300f":"code","39c4c6ed":"code","8cc32498":"code","8c87b77b":"code","e2232770":"code","b7b85e1e":"code","5d1d3c8b":"code","1dbba60e":"code","9b532ba9":"code","6f22ddaf":"code","b95840fc":"code","aa661e3a":"code","ee872fac":"code","46cb4ab6":"code","d808cb0c":"code","ef3aded2":"code","c552aed2":"markdown","ef0a1047":"markdown","b6d9cd3e":"markdown","59536eb4":"markdown","8ee3c44d":"markdown","ae5ea05f":"markdown","341eebfd":"markdown","8bee73c5":"markdown","5b40d41e":"markdown","a95cae2e":"markdown","c502a86c":"markdown","df7902f8":"markdown","910c622c":"markdown","cd883b7a":"markdown","90d175c8":"markdown","d26755fc":"markdown","9a280c51":"markdown"},"source":{"5f889728":"!pip install imutils","8336c436":"import os\nimport cv2\nimport numpy as np\nimport random\nimport keras\n\nfrom imutils import paths\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelBinarizer\n\nfrom tensorflow.keras.applications import MobileNetV2\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import AveragePooling2D\nfrom tensorflow.keras.layers import Dropout,BatchNormalization,MaxPooling2D\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\n\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom sklearn.metrics import classification_report","28cbcd10":"images_withMask = os.listdir(\"..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Train\/Mask\")\nsample_img_withMask = random.choice(images_withMask)\nimage = load_img(\"..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Train\/Mask\/\"+sample_img_withMask)\nplt.imshow(image)","b5fa9eb9":"images_withoutMask = os.listdir(\"..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Train\/Non Mask\")\nsample_img_withoutMask = random.choice(images_withoutMask)\nimage = load_img(\"..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Train\/Non Mask\/\"+sample_img_withoutMask)\nplt.imshow(image)","12b292b1":"# define constant\nimg_width=224\nimg_height=224\n\n# initialize the initial learning rate, number of epochs to train for, and batch size\nINIT_LR = 1e-4\nEPOCHS = 50\nBS = 32\ntrain_data_dir=\"..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Train\"\ntest_data_dir=\"..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Validation\"","4e31e777":"all_train_imagePaths = list(paths.list_images(train_data_dir))\nall_test_imagePaths = list(paths.list_images(test_data_dir))\ntrain_data = []\ntrain_labels = []\ntest_data = []\ntest_labels = []","ef01fbd3":"# loop over the image paths\nfor imagePath in all_train_imagePaths:\n\t# extract the class label from the filename\n\tlabel = imagePath.split(os.path.sep)[-2]\n\n\t# load the input image (224x224) and preprocess it\n\timage = load_img(imagePath, target_size=(224, 224))\n\timage = img_to_array(image)\n\timage = preprocess_input(image)\n\n\t# update the data and labels lists, respectively\n\ttrain_data.append(image)\n\ttrain_labels.append(label)","2160c876":"# loop over the image paths\nfor imagePath in all_test_imagePaths:\n\t# extract the class label from the filename\n\tlabel = imagePath.split(os.path.sep)[-2]\n\n\t# load the input image (224x224) and preprocess it\n\timage = load_img(imagePath, target_size=(224, 224))\n\n\timage = img_to_array(image)\n\timage = preprocess_input(image)\n\n\t# update the data and labels lists, respectively\n\ttest_data.append(image)\n\ttest_labels.append(label)","e1244342":"def convert_data_labels(data,labels):\n  # convert the data and labels to NumPy arrays\n  data = np.array(data, dtype=\"float32\")\n  labels = np.array(labels)\n\n  # perform one-hot encoding on the labels\n  lb = LabelBinarizer()\n  labels = lb.fit_transform(labels)\n  labels = to_categorical(labels)\n  return  data,labels","b03ed6ce":"train_data,train_labels = convert_data_labels(train_data,train_labels)\ntest_data,test_labels = convert_data_labels(test_data,test_labels)","0eea300f":"print(\"==================================\")\nprint(\"Size of train dataset : \",train_data.shape[0])\nprint(\"==================================\")\nprint(\"Size of test dataset : \",test_data.shape[0])\nprint(\"==================================\")","39c4c6ed":"# train datagen\ntrain_datagen = ImageDataGenerator(\n                  rotation_range=20,\n                  zoom_range=0.15,\n                  width_shift_range=0.2,\n                  height_shift_range=0.2,\n                  shear_range=0.15,\n                  horizontal_flip=True,\n                  fill_mode=\"nearest\")\n\ntrain_generator = train_datagen.flow(train_data, train_labels, batch_size=BS)","8cc32498":"# load the MobileNetV2 network, ensuring the head FC layer sets are left off\nmobilenet = MobileNetV2(weights=\"imagenet\", include_top=False, input_tensor=Input(shape=(224, 224, 3)))","8c87b77b":"# construct the head of the model that will be placed on top of the the base model\nheadModel = mobilenet.output\nheadModel = AveragePooling2D(pool_size=(7, 7))(headModel)\nheadModel = Flatten(name=\"flatten\")(headModel)\nheadModel = Dense(128, activation=\"relu\")(headModel)\nheadModel = Dropout(0.5)(headModel)\nheadModel = Dense(2, activation=\"softmax\")(headModel)","e2232770":"# place the head FC model on top of the base model (this will become the actual model we will train)\nmodel = Model(inputs=mobilenet.input, outputs=headModel)","b7b85e1e":"# compile our model\nprint(\"[INFO] compiling model...\")\nopt = Adam(learning_rate=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,metrics=[\"accuracy\"])\nprint(\"Done !!\")\n","5d1d3c8b":"# loop over all layers in the base model and freeze them so they will *not* be updated during the first training process\nfor layer in mobilenet.layers:\n\tlayer.trainable = False","1dbba60e":"# this code is to show how much time required to train the model using different algorithms\nfrom datetime import datetime\ndef timer(start_time= None):\n  if not start_time:\n    start_time=datetime.now()\n    return start_time\n  elif start_time:\n    thour,temp_sec=divmod((datetime.now()-start_time).total_seconds(),3600)\n    tmin,tsec=divmod(temp_sec,60)\n    print('\\n Time taken: %i hours %i minutes and %s seconds. '% (thour,tmin,round(tsec,2)))","9b532ba9":"# checkpoint = ModelCheckpoint('model-{epoch:03d}.model',monitor='val_loss',verbose=0,save_best_only=True,mode='auto')\n# # history=model.fit(train_data,train_target,epochs=100,callbacks=[checkpoint],validation_split=0.2)\n# EarlyStopping\nearlystop = EarlyStopping(monitor = 'val_loss',\n                          min_delta = 0,\n                          patience = 7,\n                          verbose = 1,\n                          restore_best_weights = True)\n\n# ModelCheckPoint\ncheckPoint = keras.callbacks.ModelCheckpoint(filepath=\"\/content\/sample_data\/fmd_model.h5\",\n                             monitor='val_loss',\n                             mode='auto',\n                             save_best_only=True,\n                             verbose=1)\n\n# ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\n\n# TBoard = tf.keras.callbacks.TensorBoard(log_dir='.\/logs')","6f22ddaf":"callbacks = [earlystop , checkPoint, learning_rate_reduction]","b95840fc":"start_time=timer(None)\nclassifier = model.fit(\n    train_datagen.flow(train_data, train_labels, batch_size=BS), \n    epochs=EPOCHS,\n    validation_data=(test_data,test_labels),\n    validation_steps=len(test_data)\/\/BS,\n    steps_per_epoch=len(train_data)\/\/BS,\n    callbacks=callbacks\n)\ntimer(start_time)","aa661e3a":"# plot the training loss and accuracy\nplt.style.use(\"ggplot\")\nN = 10 # epochs number\nplt.figure()\nplt.plot( classifier.history[\"loss\"], label=\"train_loss\")\nplt.plot( classifier.history[\"val_loss\"], label=\"val_loss\")\nplt.plot( classifier.history[\"accuracy\"], label=\"train_acc\")\nplt.plot( classifier.history[\"val_accuracy\"], label=\"val_acc\")\nplt.title(\"Training Loss and Accuracy\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\/Accuracy\")\nplt.legend(loc=\"center right\")\nplt.savefig(\"CNN_Model\")","ee872fac":"# make predictions on the testing set\nprint(\"[INFO] evaluating network...\")\npredIdxs = model.predict(test_data, batch_size=BS)","46cb4ab6":"# for each image in the testing set we need to find the index of the\n# label with corresponding largest predicted probability\npredIdxs = np.argmax(predIdxs, axis=1)","d808cb0c":"# check accuracy\nval_loss,val_acc = model.evaluate(test_data,test_labels)\nprint(\"=======================================================\")\nprint(\"Accuracy is : \",val_acc)\nprint(\"=======================================================\")\nprint(\"Loss is : \",val_loss)\nprint(\"=======================================================\")","ef3aded2":"# show a nicely formatted classification report\nprint(classification_report(test_labels.argmax(axis=1), predIdxs))","c552aed2":"# **8. Training Loss and Accuracy Visualization**","ef0a1047":"# **6. Model Building**","b6d9cd3e":"### **6.1. Load MobileNetV2**","59536eb4":"# **5. Data Augmentation**","8ee3c44d":"<h1 align =\"center\"><b>=========== Face Mask Detection & Alert System ===========<\/h1>","ae5ea05f":"# **Introduction**\n### **Objective**\nThe objective of this project is to detect the presence of a face mask on human faces on live streaming video as well as on images and alert the authority to take action on those who'r not wearing mask.\n### **Dataset**\nClick [here](https:\/\/www.kaggle.com\/prithwirajmitra\/covid-face-mask-detection-dataset) to download the dataset.\n\nThe use of several datasets was necessary to collect different scenarios:\n- People of different racial and ethnicities\n- Masks of different types\n- Masks in different positions\n- Different Angles\n\n<img align=\"center\" src=\"https:\/\/miro.medium.com\/max\/875\/1*MthYaQRvLAFJQqk65NcIsw.jpeg\" width=\"30%\" align=\"center\"\/>\n","341eebfd":"### **6.2. Callback Function**","8bee73c5":"# **Import Libraries**","5b40d41e":"### **8.1. Find Prediction**","a95cae2e":"# **Table of Contents**\n\n1. Introduction\n1. Fetch datasets from kaggle\n1. Load Dataset\n1. Import library\n1. Data Augmentation\n1. Model Building\n1. Model Fitting\n1. Training Loss & Accuracy Visualization\n1. Find prediction\n\n","c502a86c":"## Give a **upvote**,if you find this notebook useful.","df7902f8":"### **8.2. Find Accuracy**","910c622c":"# **7. Model Fitting**","cd883b7a":"### **Without Mask**","90d175c8":"### **The complete code of \"FACE MASK DETECTION & ALERT SYSTEM\" available on my github profile.**\n\n### **Click [here](https:\/\/github.com\/sidharth178\/Face-Mask-Detection-and-Alert-System) to access the code.**\n\n### **Follow me on [github](https:\/\/github.com\/sidharth178). I used to upload good data science projects**\n\n### Happy Learning!!!","d26755fc":"### **8.3. Classification Report**","9a280c51":"# **4. Sample Image**\n### **With Mask**"}}