{"cell_type":{"cfdf1954":"code","5ee6207d":"code","6305c901":"code","5ff4c40e":"code","7c30b65d":"code","d4160f61":"code","3371d476":"code","4c25d642":"code","524108f2":"code","b39d30cc":"code","310c9c82":"code","59698311":"code","14fd5006":"code","706fcf3d":"code","adb646f2":"code","649f9fc0":"code","db0779f4":"code","21908619":"code","240a7414":"code","80efaec7":"code","e5304061":"code","00b5b078":"code","40e6364f":"code","45cee3dd":"code","581b76d0":"code","84437959":"code","6a9f8552":"code","2bbbc5fb":"code","86f17df4":"code","ab48f085":"code","29a90c9d":"code","13eb9e2e":"code","238195f8":"code","4141b974":"code","d8ac2e8e":"markdown","8bdce130":"markdown","e606a0c9":"markdown","faa0a603":"markdown","a96c21b6":"markdown","88d2c1d2":"markdown","3f0df6eb":"markdown","825e9388":"markdown","ea4ce254":"markdown","e7557f77":"markdown","181b6a7a":"markdown","b18abc58":"markdown","62ee595b":"markdown","38f99fb3":"markdown","665ce80e":"markdown","f8e843f8":"markdown"},"source":{"cfdf1954":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport datetime as dt\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nfrom os import listdir, makedirs\nfrom os.path import join, exists, expanduser\nfrom tqdm import tqdm\nfrom sklearn.metrics import log_loss, accuracy_score\nfrom keras.preprocessing import image\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.applications import xception\nfrom keras.applications import inception_v3\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom sklearn.linear_model import LogisticRegression\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense , Dropout , Lambda, Flatten\nfrom keras.optimizers import Adam ,RMSprop\nfrom sklearn.model_selection import train_test_split\nfrom keras import  backend as K\nfrom keras.preprocessing.image import ImageDataGenerator,load_img","5ee6207d":"start = dt.datetime.now()","6305c901":"label=pd.read_csv(\"\/kaggle\/input\/dog-breed-identification\/labels.csv\")\nlabel","5ff4c40e":"label_df=pd.DataFrame(label['breed'].value_counts()).reset_index()\nlabel_df.columns=['breed_name','count']\nlabel_df=label_df.head(16)\nlabel_df","7c30b65d":"label_df.sort_values(by=\"count\",ascending=False)","d4160f61":"label = label[label['breed'].isin(label_df['breed_name'])]","3371d476":"    \nlabel['id_ext']=label['id'].apply(lambda x:x+'.jpg')\nlabel=label.reset_index()\nlabel=label.drop(['index','id'],axis=1)","4c25d642":"label.head()","524108f2":"label_onehot=pd.get_dummies(label,columns=['breed'],prefix=None)","b39d30cc":"label_onehot","310c9c82":"label_onehot.columns","59698311":"label_onehot.columns = label_onehot.columns.str.replace(r'breed_', '')","14fd5006":"#label_onehot\nlabel_onehot=label_onehot.rename(columns={'id_ext':'id'})","706fcf3d":"label_onehot","adb646f2":"import random\nsample=random.choice(label_onehot['id'])\nsample","649f9fc0":"image=load_img(\"\/kaggle\/input\/dog-breed-identification\/train\/\"+sample)\nimage","db0779f4":"train_df, validate_df = train_test_split(label_onehot, test_size=0.1)\ntrain_df = train_df.reset_index()\nvalidate_df = validate_df.reset_index()\n\n# validate_df = validate_df.sample(n=100).reset_index() # use for fast testing code purpose\n# train_df = train_df.sample(n=1800).reset_index() # use for fast testing code purpose\n\ntotal_train = train_df.shape[0]\ntotal_validate = validate_df.shape[0]","21908619":"train_df.shape,validate_df.shape","240a7414":"train_df","80efaec7":"from keras.models import Sequential\nfrom keras import layers\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation,GlobalMaxPooling2D\nfrom keras import applications\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers\nfrom keras.applications import VGG16\nfrom keras.models import Model\n\nimage_size = 224\ninput_shape = (image_size, image_size, 3)\n\nepochs = 4\nbatch_size = 16\n\npre_trained_model = VGG16(input_shape=input_shape, include_top=False, weights=\"imagenet\")\n    \nfor layer in pre_trained_model.layers[:15]:\n    layer.trainable = False\n\nfor layer in pre_trained_model.layers[15:]:\n    layer.trainable = True\n    \nlast_layer = pre_trained_model.get_layer('block5_pool')\nlast_output = last_layer.output\n    \n# Flatten the output layer to 1 dimension\nx = GlobalMaxPooling2D()(last_output)\n# Add a fully connected layer with 512 hidden units and ReLU activation\nx = Dense(512, activation='relu')(x)\n# Add a dropout rate of 0.5\nx = Dropout(0.5)(x)\n# Add a final sigmoid layer for classification\nx = layers.Dense(16, activation='softmax')(x)\n\nmodel = Model(pre_trained_model.input, x)\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=optimizers.SGD(lr=1e-4, momentum=0.9),\n              metrics=['accuracy'])\n\nmodel.summary()","e5304061":"train_df","00b5b078":"train_df.columns","40e6364f":"train_datagen = ImageDataGenerator(\n    rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest',\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \"\/kaggle\/input\/dog-breed-identification\/train\", \n    x_col='id',\n    y_col=['afghan_hound', 'airedale', 'basenji', 'beagle',\n       'bernese_mountain_dog', 'cairn', 'entlebucher', 'great_pyrenees',\n       'japanese_spaniel', 'leonberg', 'maltese_dog', 'pomeranian', 'samoyed',\n       'scottish_deerhound', 'shih-tzu', 'tibetan_terrier'],\n    class_mode='raw',\n    target_size=(image_size, image_size),\n    batch_size=batch_size\n)","45cee3dd":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    \"\/kaggle\/input\/dog-breed-identification\/train\", \n    x_col='id',\n    y_col=['afghan_hound', 'airedale', 'basenji', 'beagle',\n       'bernese_mountain_dog', 'cairn', 'entlebucher', 'great_pyrenees',\n       'japanese_spaniel', 'leonberg', 'maltese_dog', 'pomeranian', 'samoyed',\n       'scottish_deerhound', 'shih-tzu', 'tibetan_terrier'],\n    class_mode='raw',\n    target_size=(image_size, image_size),\n    batch_size=batch_size\n)","581b76d0":"example_df = train_df.sample(n=1).reset_index(drop=True)\nexample_generator = train_datagen.flow_from_dataframe(\n    example_df, \n    \"\/kaggle\/input\/dog-breed-identification\/train\/\", \n    x_col='id',\n    y_col=['afghan_hound', 'airedale', 'basenji', 'beagle',\n       'bernese_mountain_dog', 'cairn', 'entlebucher', 'great_pyrenees',\n       'japanese_spaniel', 'leonberg', 'maltese_dog', 'pomeranian', 'samoyed',\n       'scottish_deerhound', 'shih-tzu', 'tibetan_terrier'],\n    class_mode='raw',\n)\nplt.figure(figsize=(12, 12))\nfor i in range(0, 9):\n    plt.subplot(3, 3, i+1)\n    for X_batch, Y_batch in example_generator:\n        image = X_batch[0]\n        plt.imshow(image)\n        break\nplt.tight_layout()\nplt.show()","84437959":"# fine-tune the model\nhistory = model.fit_generator(\n    train_generator,\n    epochs=epochs,\n    validation_data=validation_generator,\n    validation_steps=total_validate\/\/batch_size,\n    steps_per_epoch=total_train\/\/batch_size)","6a9f8552":"loss, accuracy = model.evaluate_generator(validation_generator, total_validate\/\/batch_size, workers=12)\nprint(\"Test: accuracy = %f  ;  loss = %f \" % (accuracy, loss))","2bbbc5fb":"validate_df","86f17df4":"def get_dog(row):\n    for i in validate_df.columns[2:]:\n        if row[i]==1:\n            return i        \nvalidate_df['breed']=validate_df.apply(get_dog,axis=1)","ab48f085":"validate_df","29a90c9d":"validate_df=validate_df[['id','breed']]","13eb9e2e":"validate_df.shape","238195f8":"sample_test = validate_df.sample(n=9).reset_index()\n#print(sample_test)\nplt.figure(figsize=(12, 12))\nfor index, row in sample_test.iterrows():\n    filename = row['id']\n    print(filename)\n    category = row['breed']\n    img = load_img(\"\/kaggle\/input\/dog-breed-identification\/train\/\"+filename, target_size=(256, 256))\n    \n    plt.subplot(3, 3,index+1)\n    plt.imshow(img)\n    plt.xlabel('(' + \"{}\".format(category) + ')')\nplt.tight_layout()\nplt.show()\n","4141b974":"end = dt.datetime.now()\nprint('Total time {} s.'.format((end - start).seconds))\n","d8ac2e8e":"Training Data","8bdce130":"# Train and Test split","e606a0c9":"# Checking output from validata data to check accuracy","faa0a603":"In this kernel I have applied transfer learning , I have used VGG16 pretrained model and designed the last FC layer manually which I have further connected to a softmax layer.\n\nUsing this I have acheived an acuracy of 94% with 4 epoch. Increasing the epochs might increase the efficiency further(you can try if you want!!)\n\nIn this kernal I have tried keeping a standard apporach so that the same code can be reused in other problems(ofcourse with minor tweeeks!!).\n","a96c21b6":"# VGG 16 pretrained model","88d2c1d2":"# Selecting TOP 16","3f0df6eb":"# Import all required libraries","825e9388":"# One hot coding of breeds","ea4ce254":"Validation Data","e7557f77":"# Loading required data","181b6a7a":"# Checking a random sample","b18abc58":"Adding .jpg extension","62ee595b":"# Renaming the columns","38f99fb3":"# Data Augmentation","665ce80e":"# Example of Data AUgmentation","f8e843f8":"# Fit the model, accuracy 94%"}}