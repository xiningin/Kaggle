{"cell_type":{"beba2fde":"code","ef7273da":"code","8dfb8587":"code","90ab0459":"code","288d22cc":"code","7465315c":"code","3ebfb071":"code","2a4b6639":"code","53cd1168":"code","45b597aa":"code","11dce28d":"code","7d420704":"code","08449578":"code","04b87fd0":"code","809a0eba":"code","4b4eabbd":"code","45006a7f":"code","9100e18b":"code","43d43d21":"code","2db60f79":"code","064620a0":"code","6d84e20b":"code","b4b89342":"code","a2107e01":"code","85e0d76f":"code","8ba3cc63":"code","1914d418":"code","29a1ba66":"code","84501924":"code","82af8a57":"code","5c43d05d":"code","a1690710":"code","2fe80551":"code","fb965609":"code","df322a85":"code","458123b6":"code","d924afed":"code","1c6c872c":"code","8ec7b85f":"code","59ea6d0b":"code","d526cb5d":"code","347b5b44":"code","950abc7f":"code","4c69b311":"code","257c6ec3":"code","7cffa1ec":"code","7f0a0346":"code","bab3698f":"code","dbd84963":"code","c8c2155a":"code","8dce3067":"code","fa712b11":"markdown","beb23259":"markdown","06b683cc":"markdown","fd86c878":"markdown","bbb1d86c":"markdown","17cdb510":"markdown","642121a6":"markdown","d2f0f74c":"markdown","ff4a947a":"markdown","378d641f":"markdown","45a3145f":"markdown","af7b0410":"markdown"},"source":{"beba2fde":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ef7273da":"#Draw a line in a diagram from position (0,0) to position (5,50)\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nxpoints = np.array([0, 5])\nypoints = np.array([0, 50])\n\nplt.plot(xpoints, ypoints)","8dfb8587":"#To plot only the markers and not the line\nplt.plot(xpoints, ypoints, 'o')","90ab0459":"#Multiple points\nxpoints = np.array([1, 2, 6, 8])\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(xpoints, ypoints)","288d22cc":"#If we do not specify the points in the x-axis, they will get the default values 0, 1, 2, 3, (etc. depending on the length of the y-points.\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, marker = 'o')\nplt.show()","7465315c":"#different set of marker \"*\"\nplt.plot(ypoints, marker = '*')","3ebfb071":"#Format Strings --> marker|line|color\nplt.plot(ypoints, 'o:r')\n# Here 'o' denotes the marker rings, ':' denotes the dotted line, and 'r' denotes the red colour.\n","2a4b6639":"#for marker size, use --> ms\n#for marker edge colour, use --> mec\n#for marker face colour, use --> mfc\nplt.plot(ypoints, marker = 'o', ms = 20, mec = 'r', mfc='y')","53cd1168":"#using Hexadecimal color values\n\nplt.plot(ypoints, marker = 'o', ms = 20, mec = '#4CAF50', mfc = '#4CAF50')","45b597aa":"#simply may write the colour name from the 140 colours supported by all the browsers.\n\nplt.plot(ypoints, marker = 'o', ms = 20, mec = 'aqua', mfc = 'aqua')","11dce28d":"#to change the linestyle, use  linestyle, or shorter ls\n\nplt.plot(ypoints, ls = 'dotted')\n#or may simply write---> plt.plot(ypoints, ls = ':')","7d420704":"plt.plot(ypoints, linestyle = 'dashed')","08449578":"#to set the line colour, use color or the shorter c\n\nplt.plot(ypoints, color = 'y')","04b87fd0":"#setting colour of the line by the name\n\nplt.plot(ypoints, c = 'hotpink')","809a0eba":"# linewidth or the shorter lw to change the width of the line.\n\nplt.plot(ypoints, linewidth = '20.5')","4b4eabbd":"#Multiple lines. \n\ny1 = np.array([3, 8, 1, 10])\ny2 = np.array([6, 2, 7, 11])\n\nplt.plot(y1)\nplt.plot(y2)\n#Here we only specified the points on the y-axis, meaning that the points on the x-axis got the the default values (0, 1, 2, 3).","45006a7f":"x1 = np.array([0, 1, 2, 3])\ny1 = np.array([3, 8, 1, 10])\nx2 = np.array([0, 1, 2, 3])\ny2 = np.array([6, 2, 7, 11])\n\nplt.plot(x1, y1, x2, y2)","9100e18b":"#Add labels to the x- and y-axis and a Title to the Plot\n\nx = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\ny = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])\n\nplt.plot(x, y)\n\nplt.title(\"Sports Watch Data\")\nplt.xlabel(\"Average Pulse\")\nplt.ylabel(\"Calorie Burnage\")","43d43d21":"x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\ny = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])\n\nplt.plot(x, y)\n\nfont1 = {'family':'serif','color':'blue','size':20}\nfont2 = {'family':'serif','color':'darkred','size':15}\n\nplt.title(\"Sports Watch Data\", fontdict = font1)\nplt.xlabel(\"Average Pulse\", fontdict = font2)\nplt.ylabel(\"Calorie Burnage\", fontdict = font2)","2db60f79":"#Position of the Title. We can use the loc parameter in title() to position the title. Legal values are: 'left', 'right', and 'center'. Default value is 'center'.\n\nx = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\ny = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])\n\nplt.title(\"Sports Watch Data\", loc = 'left')\nplt.xlabel(\"Average Pulse\")\nplt.ylabel(\"Calorie Burnage\")\n\nplt.plot(x, y)","064620a0":"# to add grid lines to the plot.\nplt.plot(x, y)\n\nplt.grid()","6d84e20b":"#We can use the axis parameter in the grid() function to specify which grid lines to display. Legal values are: 'x', 'y', and 'both'. Default value is 'both'.\n\nplt.plot(x, y)\n\nplt.grid(axis = 'x')","b4b89342":"plt.plot(x, y)\n\nplt.grid(axis = 'y')","a2107e01":"# We can also set the line properties of the grid, like this: grid(color = 'color', linestyle = 'linestyle', linewidth = number).\n\nplt.plot(x, y)\nplt.grid(color = 'hotpink', linestyle = '--', linewidth = 0.5)","85e0d76f":"#plot 1:\nx = np.array([0, 1, 2, 3])\ny = np.array([3, 8, 1, 10])\n\nplt.subplot(1, 2, 1)\nplt.plot(x,y)\n\n#plot 2:\nx = np.array([0, 1, 2, 3])\ny = np.array([10, 20, 30, 40])\n\nplt.subplot(1, 2, 2)\nplt.plot(x,y)\n","8ba3cc63":"#if we want a figure with 2 rows an 1 column (meaning that the two plots will be displayed on top of each other instead of side-by-side), we can write the syntax like this.\n# we may also add Title to each plot.\n# we may also add Title to entire figure\n\n#plot 1:\nx = np.array([0, 1, 2, 3])\ny = np.array([3, 8, 1, 10])\n\nplt.subplot(2, 1, 1)\nplt.plot(x,y)\nplt.title(\"SALES\")\n\n\n#plot 2:\nx = np.array([0, 1, 2, 3])\ny = np.array([10, 20, 30, 40])\n\nplt.subplot(2, 1, 2)\nplt.plot(x,y)\nplt.title(\"INCOME\")\n\nplt.suptitle(\"MY SHOP\")","1914d418":"#Drawing 6 Plots in one Figure \n\nx = np.array([0, 1, 2, 3])\ny = np.array([3, 8, 1, 10])\n\nplt.subplot(2, 3, 1)\nplt.plot(x,y)\n\nx = np.array([0, 1, 2, 3])\ny = np.array([10, 20, 30, 40])\n\nplt.subplot(2, 3, 2)\nplt.plot(x,y)\n\nx = np.array([0, 1, 2, 3])\ny = np.array([3, 8, 1, 10])\n\nplt.subplot(2, 3, 3)\nplt.plot(x,y)\n\nx = np.array([0, 1, 2, 3])\ny = np.array([10, 20, 30, 40])\n\nplt.subplot(2, 3, 4)\nplt.plot(x,y)\n\nx = np.array([0, 1, 2, 3])\ny = np.array([3, 8, 1, 10])\n\nplt.subplot(2, 3, 5)\nplt.plot(x,y)\n\nx = np.array([0, 1, 2, 3])\ny = np.array([10, 20, 30, 40])\n\nplt.subplot(2, 3, 6)\nplt.plot(x,y)","29a1ba66":"x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\n\nplt.scatter(x, y)","84501924":"#Draw two plots on the same figure for comparison\n#day one, the age and speed of 13 cars\n\nx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\nplt.scatter(x, y)\n\n#day two, the age and speed of 15 cars:\nx = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])\ny = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])\nplt.scatter(x, y)\n#On comparing the two plots---> the newer the car, the faster it drives.","82af8a57":"#set your own color for each scatter plot with the color or the c argument\n\nx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\nplt.scatter(x, y, color = 'hotpink')\n\nx = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])\ny = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])\nplt.scatter(x, y, color = '#88c999')\n","5c43d05d":"#You can even set a specific color for each dot by using an array of colors as value for the c argument. \n#Note: You cannot use the color argument for this, only the c argument.\n\nx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\ncolors = np.array([\"red\",\"green\",\"blue\",\"yellow\",\"pink\",\"black\",\"orange\",\"purple\",\"beige\",\"brown\",\"gray\",\"cyan\",\"magenta\"])\n\nplt.scatter(x, y, c=colors)","a1690710":"#coloring using a Colormap\n\nplt.scatter(x, y, c=colors, cmap='viridis')","2fe80551":"# to include the colormap in the drawing by including the plt.colorbar() statement.\n\nplt.scatter(x, y, c=colors, cmap='viridis')\nplt.colorbar()\n","fb965609":"#change the size of the dots with the s argument.\n\nsizes = np.array([20,50,100,200,500,1000,60,90,10,300,600,800,75])\n\nplt.scatter(x, y, s=sizes)","df322a85":"#adjust the transparency of the dots with the alpha argument.\n\nsizes = np.array([20,50,100,200,500,1000,60,90,10,300,600,800,75])\n\nplt.scatter(x, y, s=sizes, alpha=0.5)","458123b6":"#Random arrays with 100 values for x-points, y-points, colors and sizes\n\nx = np.random.randint(100, size=(100))\ny = np.random.randint(100, size=(100))\ncolors = np.random.randint(100, size=(100))\nsizes = 10 * np.random.randint(100, size=(100))\n\nplt.scatter(x, y, c=colors, s=sizes, alpha=0.5, cmap='nipy_spectral')\n\nplt.colorbar()","d924afed":"# To draw 5 Bars \n\nx = np.array([\"A\", \"B\", \"C\", \"D\", \"E\"])\ny = np.array([3, 8, 1, 10,12])\n\nplt.bar(x,y)","1c6c872c":"#for horizontal display\n\nplt.barh(x, y)","8ec7b85f":"#to set bar colour\n\nplt.bar(x, y, color = \"gray\")\n","59ea6d0b":"#one may also use Hexaecimal colour values.\n\nplt.bar(x, y, color = \"#4CAF50\")","d526cb5d":"# Bar Width\n\nplt.bar(x, y, width = 0.2)","347b5b44":"# For Horizontal we use Height instead of width\n\nplt.barh(x, y, height = 0.3)","950abc7f":"# We create a histogram here from the array of randomly generated 250 numbers, with mean 170 and standard deviation 10.\n\nx = np.random.normal(170, 10, 250)\n\nplt.hist(x)","4c69b311":"y = np.array([35, 25, 25, 15])\n\nplt.pie(y)\n\n#Here, pie chart draws one piece (called a wedge) for each value in the array (in this case [35, 25, 25, 15]). By default the plotting of the first wedge starts from the x-axis and move counterclockwise.","257c6ec3":"#Adding Labels to the Pie Chart\n\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\n\nplt.pie(y, labels = mylabels)","7cffa1ec":" #The default start angle is at the x-axis, but you can change the start angle by specifying a startangle parameter. \n#Previously the start angle was 0, represented by the x-axis. Here we keep the start angle to be 90 degrees, starting from the 0 degree in the anti-clockwise direction. \n\nplt.pie(y, labels = mylabels, startangle = 90)","7f0a0346":"#If want one of the wedges to stand out, we use explode parameter. The explode parameter must be an array with one value for each wedge.\n\nmyexplode = [0.2, 0, 0, 0]\n\nplt.pie(y, labels = mylabels, explode = myexplode)","bab3698f":"#add a shadow to the pie chart by setting the shadows parameter to True\n\n\nplt.pie(y, labels = mylabels, explode = myexplode, shadow = True)","dbd84963":"# Set the color of each wedge with the colors parameter. The colors parameter, if specified, must be an array with one value for each wedge.\n\nmycolors = [\"black\", \"hotpink\", \"b\", \"#4CAF50\"]\n\nplt.pie(y, labels = mylabels, colors = mycolors)\n\n","c8c2155a":"# to add a list of explanation for each wedge, use the legend() function.\n\nplt.pie(y, labels = mylabels)\nplt.legend()","8dce3067":"# to add the title parameter to the legend function.\n\nplt.pie(y, labels = mylabels)\nplt.legend(title = \"Four Fruits:\")","fa712b11":"# Drawing a Line","beb23259":"## Adding Grid","06b683cc":"# Bars\n\nUse the bar() function to draw bar graphs","fd86c878":"### Display Multiple Plots\n\nWith the subplots() function you can draw multiple plots in one figure.The subplots() function takes three arguments that describes the layout of the figure.The layout is organized in rows and columns, which are represented by the first and second argument.The third argument represents the index of the current plot.\n\nplt.subplot(1, 2, 1)\n--> the figure has 1 row, 2 columns, and this plot is the first plot.\n\nplt.subplot(1, 2, 2)\n--> the figure has 1 row, 2 columns, and this plot is the second plot.\n\n","bbb1d86c":"## Adding Labels and Titles","17cdb510":"# Histogram\n\nWe use the hist() function to create histograms.","642121a6":"### Marker Reference\n\n\nMarker\tDescription\n'o'\tCircle\t\n'*'\tStar\t\n'.'\tPoint\t\n','\tPixel\t\n'x'\tX\t\n'X'\tX (filled)\t\n'+'\tPlus\t\n'P'\tPlus (filled)\t\n's'\tSquare\t\n'D'\tDiamond\t\n'd'\tDiamond (thin)\t\n'p'\tPentagon\t\n'H'\tHexagon\t\n'h'\tHexagon\t\n'v'\tTriangle Down\t\n'^'\tTriangle Up\t\n'<'\tTriangle Left\t\n'>'\tTriangle Right\t\n'1'\tTri Down\t\n'2'\tTri Up\t\n'3'\tTri Left\t\n'4'\tTri Right\t\n'|'\tVline\t\n'_'\tHline\n","d2f0f74c":"# Pie Charts\n\nWe use the pie() function to draw pie charts.","ff4a947a":"# Scatter Plots\n\nUse the scatter() function to draw a scatter plot. The scatter() function plots one dot for each observation. It needs two arrays of the same length, one for the values of the x-axis, and one for values on the y-axis:","378d641f":"### Line Reference\n\nLine Syntax\t\tDescription\n\n'-'\t\tSolid line\t\n':'\t\tDotted line\t\n'--'\t\tDashed line\t\n'-.'\t\tDashed\/dotted line\n\n### Color Reference\n\nColor Syntax\tDescription\n\n'r'\tRed\t\n'g'\tGreen\t\n'b'\tBlue\t\n'c'\tCyan\t\n'm'\tMagenta\t\n'y'\tYellow\t\n'k'\tBlack\t\n'w'\tWhite\n\n**Hexadecimal Colors**\n\nA hexadecimal color is specified with: #RRGGBB. RR (red), GG (green) and BB (blue) are hexadecimal integers between 00 and FF specifying the intensity of the color. For example, #0000FF is displayed as blue, because the blue component is set to its highest value (FF) and the others are set to 00.All modern browsers support the following 140 color names:\n\n\n000000  Black\n000080  Navy\n00008B  DarkBlue\n0000CD  MediumBlue\n0000FF  Blue\n006400  DarkGreen\n008000  Green\n008080  Teal\n008B8B  DarkCyan\n00BFFF  DeepSkyBlue\n00CED1  DarkTurquoise\n00FA9A  MediumSpringGreen\n00FF00  Lime\n00FF7F  SpringGreen\n00FFFF  Aqua\n00FFFF  Cyan\n191970  MidnightBlue\n1E90FF  DodgerBlue\n20B2AA  LightSeaGreen\n228B22  ForestGreen\n2E8B57  SeaGreen\n2F4F4F  DarkSlateGray\n2F4F4F  DarkSlateGrey\n32CD32  LimeGreen\n3CB371  MediumSeaGreen\n40E0D0  Turquoise\n4169E1  RoyalBlue\n4682B4  SteelBlue\n483D8B  DarkSlateBlue\n48D1CC  MediumTurquoise\n4B0082  Indigo\n556B2F  DarkOliveGreen\n5F9EA0  CadetBlue\n6495ED  CornflowerBlue\n663399  RebeccaPurple\n66CDAA  MediumAquaMarine\n696969  DimGray\n696969  DimGrey\n6A5ACD  SlateBlue\n6B8E23  OliveDrab\n708090  SlateGray\n708090  SlateGrey\n778899  LightSlateGray\n778899  LightSlateGrey\n7B68EE  MediumSlateBlue\n7CFC00  LawnGreen\n7FFF00  Chartreuse\n7FFFD4  Aquamarine\n800000  Maroon\n800080  Purple\n808000  Olive\n808080  Gray\n808080  Grey\n87CEEB  SkyBlue\n87CEFA  LightSkyBlue\n8A2BE2  BlueViolet\n8B0000  DarkRed\n8B008B  DarkMagenta\n8B4513  SaddleBrown\n8FBC8F  DarkSeaGreen\n90EE90  LightGreen\n9370DB  MediumPurple\n9400D3  DarkViolet\n98FB98  PaleGreen\n9932CC  DarkOrchid\n9ACD32  YellowGreen\nA0522D  Sienna\nA52A2A  Brown\nA9A9A9  DarkGray\nA9A9A9  DarkGrey\nADD8E6  LightBlue\nADFF2F  GreenYellow\nAFEEEE  PaleTurquoise\nB0C4DE  LightSteelBlue\nB0E0E6  PowderBlue\nB22222  FireBrick\nB8860B  DarkGoldenRod\nBA55D3  MediumOrchid\nBC8F8F  RosyBrown\nBDB76B  DarkKhaki\nC0C0C0  Silver\nC71585  MediumVioletRed\nCD5C5C  IndianRed\nCD853F  Peru\nD2691E  Chocolate\nD2B48C  Tan\nD3D3D3  LightGray\nD3D3D3  LightGrey\nD8BFD8  Thistle\nDA70D6  Orchid\nDAA520  GoldenRod\nDB7093  PaleVioletRed\nDC143C  Crimson\nDCDCDC  Gainsboro\nDDA0DD  Plum\nDEB887  BurlyWood\nE0FFFF  LightCyan\nE6E6FA  Lavender\nE9967A  DarkSalmon\nEE82EE  Violet\nEEE8AA  PaleGoldenRod\nF08080  LightCoral\nF0E68C  Khaki\nF0F8FF  AliceBlue\nF0FFF0  HoneyDew\nF0FFFF  Azure\nF4A460  SandyBrown\nF5DEB3  Wheat\nF5F5DC  Beige\nF5F5F5  WhiteSmoke\nF5FFFA  MintCream\nF8F8FF  GhostWhite\nFA8072  Salmon\nFAEBD7  AntiqueWhite\nFAF0E6  Linen\nFAFAD2  LightGoldenRodYellow\nFDF5E6  OldLace\nFF0000  Red\nFF00FF  Fuchsia\nFF00FF  Magenta\nFF1493  DeepPink\nFF4500  OrangeRed\nFF6347  Tomato\nFF69B4  HotPink\nFF7F50  Coral\nFF8C00  DarkOrange\nFFA07A  LightSalmon\nFFA500  Orange\nFFB6C1  LightPink\nFFC0CB  Pink\nFFD700  Gold\nFFDAB9  PeachPuff\nFFDEAD  NavajoWhite\nFFE4B5  Moccasin\nFFE4C4  Bisque\nFFE4E1  MistyRose\nFFEBCD  BlanchedAlmond\nFFEFD5  PapayaWhip\nFFF0F5  LavenderBlush\nFFF5EE  SeaShell\nFFF8DC  Cornsilk\nFFFACD  LemonChiffon\nFFFAF0  FloralWhite\nFFFAFA  Snow\nFFFF00  Yellow\nFFFFE0  LightYellow\nFFFFF0  Ivory\nFFFFFF  White","45a3145f":"# Drawing Multiple Lines","af7b0410":"### ColorMap\n\nThe Matplotlib module has a number of available colormaps. A colormap is like a list of colors, where each color has a value that ranges from 0 to 100.You can specify the colormap with the keyword argument cmap with the value of the colormap, example 'viridis' which is one of the built-in colormaps available in Matplotlib.In addition you have to create an array with values (from 0 to 100), one value for each of the point in the scatter plot.\n\nAvailable ColorMaps\nYou can choose any of the built-in colormaps:\n\nName | Reverse\n---|---\nAccent | Accent_r\nBlues | Blues_r\nBrBG | BrBG_r\nBuGn | BuGn_r\nBuPu | BuPu_r\nCMRmap | CMRmap_r\nDark2 | Dark2_r\nGnBu | GnBu_r\nGreens | Greens_r\nGreys | Greys_r\nOrRd | OrRd_r\nOranges | Oranges_r\nPRGn | PRGn_r\nPaired | Paired_r\nPastel1 | Pastel1_r\nPastel2 | Pastel2_r\nPiYG | PiYG_r\nPuBu | PuBu_r\nPuBuGn | PuBuGn_r\nPuOr | PuOr_r\nPuRd | PuRd_r\nPurples | Purples_r\nRdBu | RdBu_r\nRdGy | RdGy_r\nRdPu | RdPu_r\nRdYlBu | RdYlBu_r\nRdYlGn | RdYlGn_r\nReds | Reds_r\nSet1 | Set1_r\nSet2 | Set2_r\nSet3 | Set3_r\nSpectral | Spectral_r\nWistia | Wistia_r\nYlGn | YlGn_r\nYlGnBu | YlGnBu_r\nYlOrBr | YlOrBr_r\nYlOrRd | YlOrRd_r\nafmhot | afmhot_r\nautumn | autumn_r\nbinary | binary_r\nbone | bone_r\nbrg | brg_r\nbwr | bwr_r\ncividis | cividis_r\ncool | cool_r\ncoolwarm | coolwarm_r\ncopper | copper_r\ncubehelix | cubehelix_r\nflag | flag_r\ngist_earth | gist_earth_r\ngist_gray | gist_gray_r\ngist_heat | gist_heat_r\ngist_ncar | gist_ncar_r\ngist_rainbow | gist_rainbow_r\ngist_stern | gist_stern_r\ngist_yarg | gist_yarg_r\ngnuplot | gnuplot_r\ngnuplot2 | gnuplot2_r\ngray | gray_r\nhot | hot_r\nhsv | hsv_r\ninferno | inferno_r\njet | jet_r\nmagma | magma_r\nnipy_spectral | nipy_spectral_r\nocean | ocean_r\npink | pink_r\nplasma | plasma_r\nprism | prism_r\nrainbow | rainbow_r\nseismic | seismic_r\nspring | spring_r\nsummer | summer_r\ntab10 | tab10_r\ntab20 | tab20_r\ntab20b | tab20b_r\ntab20c | tab20c_r\nterrain | terrain_r\ntwilight | twilight_r\ntwilight_shifted | twilight_shifted_r\nviridis | viridis_r\nwinter | winter_r\n\n\n"}}