{"cell_type":{"5a02d535":"code","b7d7d164":"code","5a220a07":"code","b33fd94c":"code","74e0cf0b":"code","2ba5d11d":"code","0e77089d":"code","ad1b6316":"code","b8f20097":"code","c8159bb0":"code","93dc5cfa":"code","0afd70bd":"code","56ccf9ff":"code","59557738":"code","018d091b":"code","ed579336":"code","e8f1733c":"code","6d4a96cc":"code","cd4dd41c":"code","d67cda19":"code","f19a1a40":"code","559e9b48":"code","55fcae0c":"code","0407a48a":"code","b20937a7":"code","8f582cc6":"code","e445a5ec":"code","3c6aaeb3":"code","e99b4791":"code","fcad9d49":"code","b45f3b87":"code","f1fecb68":"code","543f7009":"markdown","30a29b05":"markdown","b332d369":"markdown","03a9c896":"markdown","38531ce2":"markdown","15d4601b":"markdown"},"source":{"5a02d535":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b7d7d164":"data = pd.read_csv('..\/input\/churn-modelling\/Churn_Modelling.csv')","5a220a07":"data.head()","b33fd94c":"# independent feature:\nX = data.iloc[:, 3:13]","74e0cf0b":"# dependent feature :\ny = data.iloc[:, 13]","2ba5d11d":"X.head()","0e77089d":"y.head()","ad1b6316":"# Create dummy variables :\ngeography=pd.get_dummies(X[\"Geography\"],drop_first=True)","b8f20097":"gender=pd.get_dummies(X['Gender'],drop_first=True)","c8159bb0":"# Concatenate the Data Frames : \nX=pd.concat([X,geography,gender],axis=1)","93dc5cfa":"X.head()","0afd70bd":"# Drop Unnecessary columns :\nX=X.drop(['Geography','Gender'],axis=1)","56ccf9ff":"X.head()","59557738":"from sklearn.model_selection import train_test_split","018d091b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","ed579336":"from sklearn.preprocessing import StandardScaler","e8f1733c":"sc = StandardScaler()","6d4a96cc":"X_train = sc.fit_transform(X_train)","cd4dd41c":"X_test = sc.transform(X_test)","d67cda19":"from keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Embedding, Flatten, LeakyReLU, BatchNormalization, Dropout\nfrom keras.activations import relu, sigmoid","f19a1a40":"def create_model(layers, activation):\n    model = Sequential()\n    for i, nodes in enumerate(layers):\n        if i==0: \n            model.add(Dense(nodes,input_dim=X_train.shape[1]))\n            model.add(Activation(activation))\n            model.add(Dropout(0.3))\n        else:\n            model.add(Dense(nodes))\n            model.add(Activation(activation))\n            model.add(Dropout(0.3))\n            \n    model.add(Dense(units = 1, kernel_initializer= 'glorot_uniform', activation = 'sigmoid')) \n    \n    model.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy'])\n    return model\nmodel = KerasClassifier(build_fn=create_model, verbose=0)","559e9b48":"layers = [(20), (40, 20), (45, 30, 15)]\nactivations = ['sigmoid', 'relu']\nparam_grid = dict(layers=layers, activation=activations, batch_size = [128, 256], epochs=[30])\ngrid = GridSearchCV(estimator=model, param_grid=param_grid,cv=5)","55fcae0c":"grid_result = grid.fit(X_train, y_train)","0407a48a":"grid_result.best_score_","b20937a7":"grid_result.best_params_","8f582cc6":"pred_y = grid.predict(X_test)","e445a5ec":"y_pred = (pred_y > 0.5)","3c6aaeb3":"from sklearn.metrics import confusion_matrix , accuracy_score","e99b4791":"cm = confusion_matrix(y_pred , y_test)","fcad9d49":"cm","b45f3b87":"score=accuracy_score(y_pred,y_test)","f1fecb68":"score","543f7009":"# FEATURE SCALING","30a29b05":"# TRAIN TEST SPLIT","b332d369":"# IMPORTING THE LIBRARIES","03a9c896":"# MODEL BEST RESULT","38531ce2":"# PERFORMING HYPERPARAMETER OPTIMIZATION","15d4601b":"# IMPORTING THE DATASET"}}