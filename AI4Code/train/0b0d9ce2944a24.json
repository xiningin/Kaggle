{"cell_type":{"c7e33bb5":"code","7c71fad7":"code","856022d0":"code","dfad52a0":"code","99fad302":"code","8e053428":"code","87013848":"code","11a9aed2":"code","f065f363":"code","ab50051d":"code","3d1bb18c":"code","c38dcb65":"code","e342fbeb":"code","bbdfc6bc":"code","c82a54ec":"code","3827716d":"code","c3d605b8":"code","ad081637":"code","312a23fc":"code","372bf68b":"code","e691a08d":"code","ca2cabad":"code","f260bbef":"code","8a0e042c":"markdown","244ffe8a":"markdown","7b48aa9d":"markdown"},"source":{"c7e33bb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7c71fad7":"train_df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","856022d0":"train_df.columns","dfad52a0":"train_df.head()","99fad302":"train_df.describe()","8e053428":"train_df.info()","87013848":"train_SalePrice = train_df[\"SalePrice\"]\ntrain_data = train_df.iloc[:, 0:27]\ntrain_data.head()\ntrain_data.drop(labels = [\"Id\"], axis = 1, inplace = True)\n","11a9aed2":"train_data.info()","f065f363":"train_data.select_dtypes(include=['object'])","ab50051d":"\n\nlist1 = [\"MSSubClass\",\"LotFrontage\",\"LotArea\",\"OverallQual\",\"OverallCond\",\"YearBuilt\",\"YearRemodAdd\",\"MasVnrArea\",\"SalePrice\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()\n","3d1bb18c":"g = sns.factorplot(x = \"MSSubClass\", y = \"SalePrice\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Sales Price\")\nplt.show()","c38dcb65":"g = sns.factorplot(x = \"MSZoning\", y = \"SalePrice\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Sales Price\")\nplt.show()","e342fbeb":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","bbdfc6bc":"category1 = [\"MSZoning\",\"Street\",\"Alley\",\"LotShape\",\"LandContour\",\"Utilities\",\"LotConfig\",\"LandSlope\",\"Neighborhood\",\"Condition1\",\"Condition2\",\"BldgType\",\"HouseStyle\",\"RoofStyle\",\"RoofMatl\",\"Exterior1st\",\"Exterior2nd\",\"MasVnrType\"]\nfor c in category1:\n    bar_plot(c)","c82a54ec":"train_data.select_dtypes(include=['integer'])\n","3827716d":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","c3d605b8":"numericVar = [\"MSSubClass\",\"LotFrontage\",\"LotArea\",\"OverallQual\",\"OverallCond\",\"YearBuilt\",\"YearRemodAdd\",\"MasVnrArea\"]\nfor n in numericVar:\n    plot_hist(n)","ad081637":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","312a23fc":"train_df.loc[detect_outliers(train_df,[\"MSSubClass\",\"LotFrontage\",\"LotArea\",\"OverallQual\",\"OverallCond\",\"YearBuilt\",\"YearRemodAdd\",\"MasVnrArea\",\"SalePrice\"])]","372bf68b":"# MSZoning vs SalePrice\ntrain_df[[\"MSZoning\",\"SalePrice\"]].groupby([\"MSZoning\"], as_index = False).mean().sort_values(by=\"SalePrice\",ascending = False)","e691a08d":"category1 = [\"MSZoning\",\"Street\",\"Alley\",\"LotShape\",\"LandContour\",\"Utilities\",\"LotConfig\",\"LandSlope\",\"Neighborhood\",\"Condition1\",\"Condition2\",\"BldgType\",\"HouseStyle\",\"RoofStyle\",\"RoofMatl\",\"Exterior1st\",\"Exterior2nd\",\"MasVnrType\"]\nfor c in category1:\n    print(c,\" vs SalePrice\")\n    print(\"---------------------------------------\")\n    print(train_df[[c,\"SalePrice\"]].groupby([c], as_index = False).mean().sort_values(by=\"SalePrice\",ascending = False))\n    print(\"---------------------------------------\")\n    print(\"---------------------------------------\")","ca2cabad":"train_data.columns[train_data.isnull().any()]","f260bbef":"train_data.isnull().sum()","8a0e042c":"* ## MSSubClass -- SalePrice <br>\nMSSubClass: Identifies the type of dwelling involved in the sale.\t\n\n        20\t1-STORY 1946 & NEWER ALL STYLES\n        30\t1-STORY 1945 & OLDER\n        40\t1-STORY W\/FINISHED ATTIC ALL AGES\n        45\t1-1\/2 STORY - UNFINISHED ALL AGES\n        50\t1-1\/2 STORY FINISHED ALL AGES\n        60\t2-STORY 1946 & NEWER\n        70\t2-STORY 1945 & OLDER\n        75\t2-1\/2 STORY ALL AGES\n        80\tSPLIT OR MULTI-LEVEL\n        85\tSPLIT FOYER\n        90\tDUPLEX - ALL STYLES AND AGES\n       120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n       150\t1-1\/2 STORY PUD - ALL AGES\n       160\t2-STORY PUD - 1946 & NEWER\n       180\tPUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\n       190\t2 FAMILY CONVERSION - ALL STYLES AND AGES","244ffe8a":"* ## MSZoning -- SalePrice <br>\nMSZoning: Identifies the general zoning classification of the sale.\n\t\t\n       A\tAgriculture\n       C\tCommercial\n       FV\tFloating Village Residential\n       I\tIndustrial\n       RH\tResidential High Density\n       RL\tResidential Low Density\n       RP\tResidential Low Density Park \n       RM\tResidential Medium Density","7b48aa9d":"Outlier Detection\u00b6"}}