{"cell_type":{"42160b84":"code","6b1b576f":"code","9e93ddee":"code","e3113b2b":"code","0dd514f9":"code","d588392e":"code","002df479":"code","dbf16096":"code","d35e2863":"code","38b21940":"code","281accdc":"code","a123dcf4":"code","c41ded29":"code","cb17d585":"code","b2dae1a4":"code","efebff45":"code","10577d09":"code","f8cc4d83":"code","cfd68eaf":"code","3c0b8020":"code","04aa571d":"code","04a45085":"code","ed64f6cc":"code","4bc0bf4a":"code","4b9dc222":"code","70ac68bf":"code","289d9445":"code","67447bed":"code","7adb7224":"code","e3156051":"code","c4218ad0":"code","76ddc950":"code","5b4cf9fc":"code","9ae18ffe":"code","4a7d73aa":"code","68bd0395":"code","5306c224":"code","f08738a0":"code","7cf075d8":"code","52f6c8dc":"code","9de39f27":"code","361a6c0d":"code","2c8a562a":"code","57a29c75":"code","1461b137":"code","9154d470":"code","88fb2128":"code","c466230a":"code","431fff08":"code","ce2b59a2":"code","02bca7f1":"code","7f7fcd89":"code","e31974ce":"code","32524003":"code","e6ae8a93":"code","71d1cd79":"code","b4ce7a28":"code","9782c388":"code","bd81bb7a":"code","b3df0775":"code","42f37e7c":"code","9a11364a":"code","03dcf277":"code","283e5b44":"code","ab94ccbc":"code","6a29c2b6":"code","9512ca71":"code","9d398fa8":"code","9cc7ec57":"code","dbf8799c":"code","6414b2c2":"code","dc5c64bb":"code","b3356549":"code","e624da87":"code","c71449ce":"code","738db1cd":"code","554599e3":"code","8723bca2":"code","d531b514":"code","17889653":"code","e277a320":"code","524cede1":"code","746d0169":"code","b19c5d26":"code","3cf043ef":"code","85bae7e9":"code","3628a9cd":"code","0f77abf2":"code","fbe2071e":"markdown","4c80c72c":"markdown","a46afd5b":"markdown","a920c631":"markdown","135efab2":"markdown","739673e1":"markdown","6e62a6ff":"markdown","3f3dc4e0":"markdown","fc1617ee":"markdown","3093d5d9":"markdown"},"source":{"42160b84":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6b1b576f":"dtypes = {\n        'is_canceled':'float64',\n        'lead_time':'float64',\n        'stays_in_weekend_nights':'float64',\n        'stays_in_week_nights':'float64',\n        'adults':'float64',\n        'children':'float64',\n        'babies':'float64',\n        'meal':'category',\n        'country':'category',\n        'market_segment':'category',\n        'distribution_channel':'category',\n        'is_repeated_guest':'float64',\n        'previous_cancellations':'float64',\n        'previous_bookings_not_canceled':'float64',\n        'reserved_room_type':'category',\n        'assigned_room_type':'category',\n        'booking_changes':'float64',\n        'deposit_type':'category',\n        'agent':'category',\n        'company':'category',\n        'days_in_waiting_list':'float64',\n        'customer_type':'category',\n        'adr':'float64',\n        'required_car_parking_spaces':'float64',\n        'total_of_special_requests':'float64',\n        'reservation_status':'category'\n        }","9e93ddee":"import pandas as pd\nimport numpy as np\nfrom pandas import DataFrame\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom statsmodels.tsa.stattools import adfuller\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.layers import LSTM\n\ntrain_df = pd.read_csv(\"\/kaggle\/input\/hotel-booking-demand\/hotel_bookings.csv\", dtype=dtypes, converters={'arrival_date_week_number': '{:0>2}'.format})\ntrain_df","e3113b2b":"train_df.shape","0dd514f9":"train_df.isna().sum()","d588392e":"train_df.info()","002df479":"a=train_df.head()\nb=train_df\nb","dbf16096":"c=b.sort_values(['arrival_date_year','arrival_date_week_number'], ascending=True)\nc=pd.DataFrame(c)\nc\ntype(c)","d35e2863":"df = DataFrame(c, columns= ['arrival_date_year', 'arrival_date_week_number']) \ndf","38b21940":"# https:\/\/datatofish.com\/concatenate-values-python\/\n\ndf1 = df['arrival_date_year'].map(str) + df['arrival_date_week_number'].map(str)\nprint (df1)\ndf1=pd.DataFrame(df1)","281accdc":"df2= c['is_canceled']\ndf2","a123dcf4":"type(df1)","c41ded29":"df3=pd.concat([df1, df2], axis = 1)\ndf3.columns = ['FullDate', 'IsCanceled']\ndf3","cb17d585":"df3.sort_values(['FullDate','IsCanceled'], ascending=True)","b2dae1a4":"df4 = df3.groupby('FullDate').agg(sum)\ndf4.sort_values(['FullDate'], ascending=True)\ndf4","efebff45":"tseries=df4['IsCanceled']\ntseries","10577d09":"plt.plot(tseries)\nplt.tick_params(\n    axis='x',          # changes apply to the x-axis\n    which='both',      # both major and minor ticks are affected\n    bottom=False,      # ticks along the bottom edge are off\n    top=False,         # ticks along the top edge are off\n    labelbottom=False) # labels along the bottom edge are off\nplt.ylabel('Cancellations')\nplt.title(\"Cancellations Per Week\")\nplt.show()","f8cc4d83":"import statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom statsmodels.tsa.stattools import adfuller","cfd68eaf":"# Run the ADF test on the series and print out the results\nresults = adfuller(tseries)\nprint(results)","3c0b8020":"print('ADF Statistic: %f' % results[0])\nprint('p-value: %f' % results[1])\nprint('Critical Values:')\nfor key, value in results[4].items():\n    print('\\t%s: %.3f' % (key, value))","04aa571d":"df=pd.DataFrame(tseries)\ndf","04a45085":"df=np.array(df)","ed64f6cc":"train_size = int(len(df) * 0.8)\nval_size = len(df) - train_size\ntrain, val = df[0:train_size,:], df[train_size:len(df),:]","4bc0bf4a":"def create_dataset(df, previous=1):\n    dataX, dataY = [], []\n    for i in range(len(df)-previous-1):\n        a = df[i:(i+previous), 0]\n        dataX.append(a)\n        dataY.append(df[i + previous, 0])\n    return np.array(dataX), np.array(dataY)","4b9dc222":"df","70ac68bf":"scaler = MinMaxScaler(feature_range=(0, 1))\ntrain = scaler.fit_transform(train)\ntrain","289d9445":"val = scaler.fit_transform(val)\nval","67447bed":"# Lookback period\nlookback = 5\nX_train, y_train = create_dataset(train, lookback)\nX_val, y_val = create_dataset(val, lookback)","7adb7224":"X_train","e3156051":"y_train","c4218ad0":"# reshape input to be [samples, time steps, features]\nX_train = np.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1]))\nX_val = np.reshape(X_val, (X_val.shape[0], 1, X_val.shape[1]))\n\nX_train","76ddc950":"X_val","5b4cf9fc":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dense, LSTM\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.metrics import categorical_crossentropy, mean_squared_error","9ae18ffe":"# Generate LSTM network\nmodel= Sequential([\n    LSTM(4, input_shape=(1, lookback)),\n    Dense(1),\n])","4a7d73aa":"model.summary()","68bd0395":"model.compile(optimizer='adam', loss='mean_squared_error')","5306c224":"history=model.fit(X_train, y_train, validation_split=0.2, epochs=20, batch_size=1, verbose=2)","f08738a0":"def plot_loss(loss, val_loss):\n  plt.figure(figsize=(12,8))\n  plt.plot(loss)\n  plt.plot(val_loss)\n  plt.title('Model loss')\n  plt.ylabel('Loss')\n  plt.xlabel('Epoch')\n  plt.legend(['Train', 'Test'], loc='upper right')\n  plt.show()\n\n\n# Plot train vs test loss during training\nplot_loss(history.history['loss'], history.history['val_loss'])","7cf075d8":"# Generate predictions\ntrainpred = model.predict(X_train)\nvalpred = model.predict(X_val)","52f6c8dc":"trainpred","9de39f27":"valpred","361a6c0d":"# Convert predictions back to normal values\ntrainpred = scaler.inverse_transform(trainpred)\ny_train = scaler.inverse_transform([y_train])\nvalpred = scaler.inverse_transform(valpred)\ny_val = scaler.inverse_transform([y_val])\npredictions = valpred","2c8a562a":"type(predictions)","57a29c75":"X_train.shape, X_val.shape, y_train.shape, y_val.shape","1461b137":"np.mean(y_val)","9154d470":"X_train[:10]","88fb2128":"X_val[:10]","c466230a":"import math\nfrom math import sqrt\n\n# calculate RMSE\ntrainScore = math.sqrt(mean_squared_error(y_train[0], trainpred[:,0]))\nprint('Train Score: %.2f RMSE' % (trainScore))\nvalScore = math.sqrt(mean_squared_error(y_val[0], valpred[:,0]))\nprint('Validation Score: %.2f RMSE' % (valScore))","431fff08":"# Train predictions\ntrainpredPlot = np.empty_like(df)\ntrainpredPlot[:, :] = np.nan\ntrainpredPlot[lookback:len(trainpred)+lookback, :] = trainpred","ce2b59a2":"# Validation predictions\nvalpredPlot = np.empty_like(df)\nvalpredPlot[:, :] = np.nan\nvalpredPlot[len(trainpred)+(lookback*2)+1:len(df)-1, :] = valpred","02bca7f1":"# Plot all predictions\ninversetransform, =plt.plot(scaler.inverse_transform(df))\ntrainpred, =plt.plot(scaler.inverse_transform(trainpredPlot))\nvalpred, =plt.plot(scaler.inverse_transform(valpredPlot))\nplt.xlabel('Number of weeks')\nplt.ylabel('Cancellations')\nplt.title(\"Predicted vs. Actual Cancellations Per Week\")\nplt.show()","7f7fcd89":"y_val=y_val.reshape(-1)\ny_val.shape\ny_val=pd.Series(y_val)\ny_val[:10]","e31974ce":"np.mean(y_val)","32524003":"predictions=predictions.reshape(-1)","e6ae8a93":"predictions.shape","71d1cd79":"predictions=pd.Series(predictions)\npredictions","b4ce7a28":"def mda(actual: np.ndarray, predicted: np.ndarray):\n    \"\"\" Mean Directional Accuracy \"\"\"\n    return np.mean((np.sign(actual[1:] - actual[:-1]) == np.sign(predicted[1:] - predicted[:-1])).astype(int))","9782c388":"mda(y_val, predictions)","bd81bb7a":"# https:\/\/machinelearningmastery.com\/time-series-forecasting-performance-measures-with-python\/\n\nmse = mean_squared_error(y_val, predictions)\nrmse = sqrt(mse)\nprint('RMSE: %f' % rmse)","b3df0775":"forecast_error = (predictions-y_val)\nforecast_error","42f37e7c":"mean_forecast_error = np.mean(forecast_error)\nmean_forecast_error","9a11364a":"X_train[:10]","03dcf277":"X_train.shape","283e5b44":"# Test (unseen) predictions\n# (t) and (t-5)\nXnew = np.array([tseries.iloc[95:100],tseries.iloc[96:101],tseries.iloc[97:102],tseries.iloc[98:103],tseries.iloc[99:104],tseries.iloc[100:105],tseries.iloc[101:106],tseries.iloc[102:107],tseries.iloc[103:108],tseries.iloc[104:109],tseries.iloc[105:110],tseries.iloc[106:111],tseries.iloc[107:112],tseries.iloc[108:113],tseries.iloc[109:114]])","ab94ccbc":"Xnew[:10]","6a29c2b6":"Xnew = scaler.fit_transform(Xnew)\nXnew\nXnewformat = np.reshape(Xnew, (Xnew.shape[0], 1, Xnew.shape[1]))\nynew=model.predict(Xnewformat)","9512ca71":"Xnew.shape","9d398fa8":"ynew","9cc7ec57":"type(ynew)","dbf8799c":"print(ynew.shape)","6414b2c2":"actual = tseries.iloc[100:115]\nactual","dc5c64bb":"actual = np.array(actual)\nactual","b3356549":"actual=actual.reshape(15,-1)\nactual.shape","e624da87":"actual","c71449ce":"ynew=ynew.reshape(-1)\nactual=actual.reshape(-1)\nactualpd=pd.Series(actual)","738db1cd":"np.min(df)","554599e3":"ynew","8723bca2":"maxcancel=np.max(tseries)","d531b514":"mincancel=np.min(tseries)","17889653":"ynew = ynew * np.abs(maxcancel-mincancel) + np.min(tseries)\nynewpd=pd.Series(ynew)","e277a320":"actualpd","524cede1":"ynewpd","746d0169":"mda(actualpd, ynewpd)","b19c5d26":"mse = mean_squared_error(actualpd, ynewpd)\nrmse = sqrt(mse)\nprint('RMSE: %f' % rmse)","3cf043ef":"forecast_error = (ynewpd-actualpd)\nforecast_error","85bae7e9":"mean_forecast_error = np.mean(forecast_error)\nmean_forecast_error","3628a9cd":"predictons, =plt.plot(ynewpd, label='Predictions')\nactual, =plt.plot(actualpd, label='Actual')\nplt.xlabel('Number of weeks')\nplt.ylabel('Cancellations')\nplt.title(\"Predicted vs. Actual Cancellations Per Week\")\nplt.legend(loc = 'upper center')\nplt.show()","0f77abf2":"np.mean(ynewpd)","fbe2071e":"**There is a seasonality present in Cancellations**","4c80c72c":"### Configure LSTM model","a46afd5b":"**Form dataset matrix**","a920c631":"#### Loss History Graph","135efab2":"##### Run Augmented Dickey Fuller Test to confirm if the timeseries are Stationary or not","739673e1":"**Training and Validation data partition**","6e62a6ff":"p-value < 0.05, so we can accept the Null Hypothesis that the timeseries is Stationary. Hence, the Dicky Fuller test says Time series is stationary","3f3dc4e0":"### Visualize the Timeseries and understand TimeSeries Pattern","fc1617ee":"##### Normalize dataset with MinMaxScaler","3093d5d9":"**Validate Predictions on Test Data**"}}