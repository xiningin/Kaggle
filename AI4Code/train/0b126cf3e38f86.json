{"cell_type":{"9c33e29e":"code","66e2bb39":"code","5ab31044":"code","f590023f":"code","438b918c":"code","f3b19c12":"code","994346c4":"code","9297c3f6":"code","10657099":"code","7a5ce770":"code","d5050302":"code","a88166dc":"code","4b8de6dd":"code","dc3b1ff6":"code","12fa9bb4":"code","b826bd26":"code","47831eac":"code","5601f7c7":"code","8bdf2adf":"code","5920c3ce":"code","f3573def":"code","00ba4b7b":"code","f2cea174":"code","def14069":"code","01fafd3f":"code","60e1fd84":"code","09f2f600":"code","835679fa":"markdown","1f80d419":"markdown","631b6d6b":"markdown","2df7c18c":"markdown","ac20546d":"markdown","1dfedba0":"markdown","621cb825":"markdown","9c784577":"markdown","0edaf077":"markdown","06bdd212":"markdown","2ceec627":"markdown","e3f593db":"markdown","a6fd8156":"markdown","0e099b6d":"markdown","e3d8a6de":"markdown","92251157":"markdown","c47a0309":"markdown","be8c33c8":"markdown","4698292a":"markdown","addf6f4c":"markdown","d8da7baf":"markdown","c8716c47":"markdown","29465139":"markdown"},"source":{"9c33e29e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport altair as alt\nfrom altair import datum\nimport folium\nfrom folium.plugins import FastMarkerCluster\nimport geopandas as gpd\nimport json\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nalt.renderers.enable('notebook')\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","66e2bb39":"from IPython.display import HTML\n# from altair.vega import v3\nimport json\n##-----------------------------------------------------------\n# in altair-2.2.0, v3.SCHEMA_VERSION is no longer available hence\nv3_SCHEMA_VERSION = 'v3.3.1'\n# This whole section \nvega_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega@' + v3_SCHEMA_VERSION\nvega_lib_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega-lib'\nvega_lite_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega-lite@' + alt.SCHEMA_VERSION\nvega_embed_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega-embed@3'\nnoext = \"?noext\"\n\npaths = {\n    'vega': vega_url + noext,\n    'vega-lib': vega_lib_url + noext,\n    'vega-lite': vega_lite_url + noext,\n    'vega-embed': vega_embed_url + noext\n}\n\nworkaround = \"\"\"\nrequirejs.config({{\n    baseUrl: 'https:\/\/cdn.jsdelivr.net\/npm\/',\n    paths: {}\n}});\n\"\"\"\n\n#------------------------------------------------ Defs for future rendering\ndef add_autoincrement(render_func):\n    # Keep track of unique <div\/> IDs\n    cache = {}\n    def wrapped(chart, id=\"vega-chart\", autoincrement=True):\n        if autoincrement:\n            if id in cache:\n                counter = 1 + cache[id]\n                cache[id] = counter\n            else:\n                cache[id] = 0\n            actual_id = id if cache[id] == 0 else id + '-' + str(cache[id])\n        else:\n            if id not in cache:\n                cache[id] = 0\n            actual_id = id\n        return render_func(chart, id=actual_id)\n    # Cache will stay outside and \n    return wrapped\n            \n@add_autoincrement\ndef render(chart, id=\"vega-chart\"):\n    chart_str = \"\"\"\n    <div id=\"{id}\"><\/div><script>\n    require([\"vega-embed\"], function(vg_embed) {{\n        const spec = {chart};     \n        vg_embed(\"#{id}\", spec, {{defaultStyle: true}}).catch(console.warn);\n        console.log(\"anything?\");\n    }});\n    console.log(\"really...anything?\");\n    <\/script>\n    \"\"\"\n    return HTML(\n        chart_str.format(\n            id=id,\n            chart=json.dumps(chart) if isinstance(chart, dict) else chart.to_json(indent=None)\n        )\n    )\n\nHTML(\"\".join((\n    \"<script>\",\n    workaround.format(json.dumps(paths)),\n    \"<\/script>\",\n    \"Due to Altair rendering issues in Kaggle, we use some rendering functions from \"\n    \"<a href=https:\/\/www.kaggle.com\/notslush\/altair-visualization-2018-stackoverflow-survey>notsluh's notebook<\/a> to fix this \"\n)))","5ab31044":"# load datasets and convert all column names to lower case\n\nhfacilities = pd.read_csv(\"..\/input\/ghana-health-facilities\/health-facilities-gh.csv\")\nhfacilities.columns = hfacilities.columns.str.lower()\nhfacilities = hfacilities.rename(columns={'facilityname': 'facility_name'})\n\nregions = pd.read_csv('..\/input\/additional\/region_stats.csv')\nregions.columns = regions.columns.str.lower()\n\nmap_regions = gpd.GeoDataFrame.from_file('..\/input\/additional\/gadm36_GHA_1.shp')\nmap_regions = map_regions[['NAME_1', 'geometry']]\nmap_regions = map_regions.replace('', np.NaN, regex=True)\n\nmap_df = map_regions.rename(columns={'NAME_1': 'region', 'NAME_2': 'district', 'TYPE_2': 'type'})\nmap_df = map_df.merge(regions, on='region')\n\ndel regions","f590023f":"c = alt.Chart(hfacilities).mark_bar().encode(\n    y='type',\n    x='count()',\n    tooltip='count()',\n).properties(\n    title=\"Distribution of facility type\"\n)\n\n# you can do without the render function outside kaggle. This was the only way to display the chart\nrender(c)","438b918c":"hfacilities[hfacilities.type == 'Centre']","f3b19c12":"hfacilities.loc[hfacilities['type'] == 'Centre', 'type'] = \"Health Centre\"\nhfacilities.loc[hfacilities['type'] == 'CPHS', 'type'] = 'CHPS'\nhfacilities.loc[hfacilities['type'] == 'clinic', 'type'] = 'Clinic'\nhfacilities.loc[hfacilities['type'] == 'DHD', 'type'] = 'District Health Directorate'\nhfacilities.loc[hfacilities['type'] == 'Municipal  Health Directorate', 'type'] = 'Municipal Health Directorate'","994346c4":"base = alt.Chart(hfacilities).mark_bar().encode(\n    x='type',\n    tooltip='count()',\n)\n\na = base.encode(\n    alt.Y('count()')\n).properties(\n    title=\"Distribution of facility type\"\n)\n\nb = base.encode(\n    y=alt.Y('count()', scale=alt.Scale(type='log'))\n).properties(\n    title=\"Distribution of facility type on a log scale\"\n)\n\n# you can do without the render function outside kaggle. This was the only way to display the chart\nrender(a | b)","9297c3f6":"c = alt.Chart(hfacilities).mark_bar().encode(\n    y='district',\n    x='count()'\n).transform_filter(\n    datum.type == 'Others'\n)\n\nrender(c)","10657099":"# hfacilities.iloc[2617]\nhfacilities.loc[hfacilities.district == 'Kassena-Nankana West']","7a5ce770":"base = alt.Chart(hfacilities).mark_bar().transform_filter(datum.type == 'Others').properties(width=300, height=100)\n\na = base.encode(\n    alt.Y('region'),\n    alt.X('count()'),\n    alt.Tooltip('count()')\n)\n\nb = base.encode(\n    alt.X('district'),\n    alt.Y('ownership'),\n    alt.Color('count(ownership)', legend=alt.Legend(title='Number of facility ownership')),\n    alt.Tooltip('count(ownership)')\n)\n\nrender(a | b)","d5050302":"hfacilities.loc[hfacilities.district.isin(['Bongo', 'Kassena-Nankana']) & (hfacilities.type == 'Others')]","a88166dc":"from sklearn.feature_extraction.text import CountVectorizer\n\n# this will get the frequency of words or consecutive words(n-grams)\n# bigrams because it's easier to understand a facility type when consecutive words are taken \ncvec = CountVectorizer(ngram_range=(2,3), stop_words='english')\n\nother_facilities = hfacilities[hfacilities.type == 'Others'].facility_name.tolist()\ncvec.fit(other_facilities)\n\njoined = [\" \".join(other_facilities)]\ncounts = cvec.transform(joined)\n\n# flipped n-grams: index to index: n-grams\nindex_feature = {v:k for k,v in cvec.vocabulary_.items()}\n\nn = len(cvec.vocabulary_)\nc = counts.toarray()[0]\n\nngram_counts = [(index_feature[i], c[i]) for i in range(n)]\nngrams = filter(lambda x: x[1] > 1, ngram_counts)\nngrams = list(ngrams)\n\ndf_ngram_freq = pd.DataFrame(ngrams, columns=['ngrams', 'frequency'])\n\nc = alt.Chart(df_ngram_freq).mark_bar().encode(\n    x='frequency',\n    y='ngrams',\n    tooltip='frequency'\n).properties(height=300)\n\nrender(c)","4b8de6dd":"def check_nutrition_centre(row):\n    s = row['facility_name'].lower()\n    type = row['type']\n    \n    if ('nutrition centre' in s) or ('feeding centre' in s) or ('rehabilitation centre' in s) or ('nutrition' in s):\n        return 'Feeding Centre'\n    else:\n        return type\n\nhfacilities['type'] = hfacilities.apply(check_nutrition_centre, axis=1)","dc3b1ff6":"hfacilities.loc[hfacilities.type == 'Others']","12fa9bb4":"c = alt.Chart(hfacilities).mark_bar().encode(\n    y='ownership',\n    x=alt.X('count()', scale=alt.Scale(type='log')),\n    tooltip='count()',\n).properties(\n    width=500,\n    height=300\n)\n\nrender(c)","b826bd26":"hfacilities.loc[hfacilities['ownership'] == 'Muslim', 'ownership'] = 'Islamic'\nhfacilities.loc[hfacilities['ownership'] == 'private', 'ownership'] = 'Private'\nhfacilities.loc[hfacilities['ownership'] == 'government', 'ownership'] = 'Government'","47831eac":"hfacilities[hfacilities.ownership == 'Mission']","5601f7c7":"hfacilities.loc[3398, 'ownership'] = 'Islamic'","8bdf2adf":"hfacilities[hfacilities.ownership == 'Clinic']","5920c3ce":"c = alt.Chart(hfacilities).mark_bar().encode(\n    x=alt.X('count()', scale=alt.Scale(type='log')),\n    y='ownership',\n    tooltip='count()',\n)\n\nrender(c)","f3573def":"map_regions.head(1)","00ba4b7b":"map_regions.plot();","f2cea174":"map_df = map_df.assign(facility_number=hfacilities.groupby('region').count()['facility_name'].values)\nmap_df = map_df.assign(area_to_facility=map_df['area_km2'] \/ map_df['facility_number'])\nmap_df = map_df.assign(population_to_area= map_df['population_2016'] \/ map_df['area_km2'])\nmap_df = map_df.assign(population_to_hfacility= map_df['population_2016'] \/ map_df['facility_number'])","def14069":"map_data = alt.InlineData(values=map_df.to_json(), #geopandas to geojson string\n                          # root object type is \"FeatureCollection\" but we need its features\n                          format=alt.DataFormat(property='features',type='json')) \n\nbrush = alt.selection_interval()\nclick = alt.selection_multi(encodings=['color'])\n\nbar = alt.Chart(hfacilities).mark_bar().encode(\n    x=alt.X('count()', title='Number of Facilities'),\n    y=alt.Y('region:N', sort=alt.EncodingSortField(op='count', order='descending')),\n    tooltip='count()',\n    color=alt.condition(click, 'region:N', alt.value('lightgray')),\n).add_selection(\n    click\n).properties(\n    width=300, \n    height=300\n)\n\nghana = alt.Chart(map_data).mark_geoshape(\n    fill='lightgray',\n    stroke='white',\n).encode(\n    tooltip=['properties.region:N', 'properties.area_km2:Q', 'properties.population_2016:Q', 'properties.females:Q', 'properties.males:Q']\n).properties(\n    projection={\"type\":'mercator'},\n    width=500,\n    height=500,\n    title='Distribution of Health Facilities in Ghana'\n)\n\n# Dropping facilities which have a null longitude\/latitude. Fortunately, those with missing lng have missing lat.\n\nhfacilities2 = hfacilities.dropna(subset=['longitude'])\n\nfacilities = alt.Chart(hfacilities2).mark_circle(opacity=0.5).encode( \n    longitude='longitude:Q',\n    latitude='latitude:Q',\n    tooltip=['facility_name', 'region', 'district', 'longitude', 'latitude'],\n    color=alt.condition(click, 'region:O', alt.value('lightgray'))\n).properties(\n    width=500,\n    height=500,\n)\n\nhf_region = hfacilities2.groupby(\"region\").count().reset_index()\nhf_new = pd.DataFrame({'percentage_of_total': (hf_region['facility_name'] \/ hf_region['facility_name'].sum())})\nhf_region = hf_region.join(hf_new)\ndel hf_new\n\npercentageFacilities = alt.Chart(hf_region).mark_bar().encode(\n    y=alt.Y('region:N',  sort=alt.EncodingSortField(op='sum', field='percentage_of_total', order='descending')),\n    x=alt.X('percentage_of_total:Q', title='Percentage Of Total', axis=alt.Axis(format='.0%'))\n)\n\n\nc = bar & percentageFacilities | ghana + facilities \nrender(c)","01fafd3f":"map_df.head(2)","60e1fd84":"mapp = folium.Map(location=[8, 1], zoom_start=6.5, tiles=\"cartodbpositron\")\nmapp.choropleth(geo_data=map_df,\n              data = map_df, \n              columns = ['region', 'population_to_hfacility'],\n              key_on = 'feature.properties.region',\n              fill_color = 'YlOrRd', \n              fill_opacity = 0.7, \n              line_opacity = 0.2,\n              legend_name = 'Population per Health Facility')\n\n# can't render map with NaNs present in lat\/long rows. Rows with latitude missing also have longitude missing, so dropping\n# either is enough \nhf = hfacilities.dropna(subset=['latitude'])\nFastMarkerCluster(data=hf[['latitude', 'longitude']].values.tolist()).add_to(mapp)\n\nmapp","09f2f600":"selection = alt.selection_multi(fields=['region'])\n\nregion_bars = alt.Chart().mark_bar().encode(\n    y='region',\n    x=alt.Y('count(district)', title='Number of districts'),\n    color=alt.condition(selection, alt.value('steelblue'), alt.value('lightgray')),\n    tooltip='count(district)',\n).properties(\n    selection=selection,\n    width=120,\n    height=200\n)\n\nheat = alt.Chart().mark_bar().encode(\n    alt.X('type'),\n    alt.Y('district'),\n    color='count()',\n    tooltip='count(type)',\n).transform_filter(\n    filter=selection\n).properties(\n    width=400,\n#     height=500\n)\n\nc = alt.hconcat(region_bars, heat, data=hfacilities)\nrender(c)\n","835679fa":"First set of corrections made. Let's view the chart again, together with a log scaled version.","1f80d419":"Datasets used in this notebook are the \n* Ghana health facilities dataset\n* map data of Ghana from <a href=\"https:\/\/gadm.org\/\">Database of Global Administrative Areas<\/a>. This contains regional and district level shape files of the country\n* some regional stats I pulled of wikipedia","631b6d6b":"From the bar chart, we notice very similar categories in the dataset, eg; 'CPHS'' which should be 'CHPS'. \n\nThings we need to correct:\n* capitalizations\n* typos\n* synonyms\n* spacing","2df7c18c":"Fixes:\n\n* type 'Centre' to  'Health Centre', since the facility names suggest they're a health centre\n* typo of 'CPHS' to 'CHPS'.  \n* 'clinic' to 'Clinic'. \n* 'Municipal Health Dirctorate' with 2 spaces between the first 2 words","ac20546d":"Why are there loads of 'Others' facility type in the Upper East region'?\n\nBongo and Kassena-Nankana are the hotest zones for these 'weird' facilities. Is there something we least expect happening there? We need to carefully look at the data starting with these two districts.","1dfedba0":"## Time for some maps","621cb825":" ## Click the bars on the left chart or hold shift and select multiple bars","9c784577":"## 1. Facility Type","0edaf077":"This is clearly an Islamic owned clinic, although labelled mission. We'll change the ownership to Islamic","06bdd212":"We look for 'nutrition centre' , 'feeding centre', 'rehabilitation centre' or 'nutrition' in facility names and change them to 'Feeding Centre'","2ceec627":"* CHPS - Community-Based Health Planning and Services\n\n* RCH -  Reproductive and Child Health\n\n* DHD - District Health Directorate","e3f593db":"The region level map was loaded. The district level map can be loaded using 'gadm36_GHA_2.shp' from the Additional data folder","a6fd8156":"The quality of the coordinates isn't so good. We'll retrieve a new set with Google Maps API","0e099b6d":"What is left?","e3d8a6de":"## 2. Facility Ownership","92251157":"Why would a clinic own a facility?","c47a0309":"Investigate what the 'others' facilities are. ","be8c33c8":"This is what the geometry column with the polygon data gets you. They are just shapes with some dimensions. In this case, shapes of regions.","4698292a":"Some basic stats are computed","addf6f4c":"Before we proceed, let's have a wholistic idea of the 'Others' facility type.\n\nAs we can see, most 'Others' facility type are called 'feeding centre'. We can safely relabel all 'Others' facility type wich contain such words in its name as 'Feeding Centre', even though 'nutrition centre' sounds better :)","d8da7baf":"  Kassena-Nankana West isn't an anomaly","c8716c47":"Let's merge Muslim and Islamic, Government and government, Private and private.","29465139":"Looking at the facility_name column of facilities in Bongo and Kassena-Nankana, it's evident most of these are feeding\/nutrition centres. \n\nAfter reading <a href=\"https:\/\/www.unicef.org\/ghana\/media_9399.html\">In Ghana, Community mobilises against malnutrition in Northern Ghana<\/a>, the prescence of food nutrition centres in the north of the country(although just 1 from the northern region) makes sense, since there's a lot of malnutrition cases there. Most are located in the Upper East region. We need to create a new type category for these facilities', since it'll be very informative."}}