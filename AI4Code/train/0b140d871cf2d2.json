{"cell_type":{"f58ee7f3":"code","e3c0dc44":"code","c203955a":"code","ff114962":"code","1ab0c0af":"code","c5cfad8f":"code","497fc97f":"code","6c26d32e":"code","b2897d61":"code","767e443d":"code","6a53de13":"code","11194d3a":"code","1075c820":"code","83cc4143":"code","c3d4fd78":"code","aa6ce830":"code","7719fa2f":"code","4843eb1e":"code","99af39a3":"code","aeae7bb9":"code","323cecfb":"code","f6389fa9":"code","6d682916":"code","2a0cffa8":"code","785049f1":"code","ed1939e7":"code","d66fa113":"markdown","ac9fc9f1":"markdown","27bfb9ca":"markdown","8f9996c3":"markdown","d3769c34":"markdown","f747f320":"markdown","5c90f252":"markdown","2f23accd":"markdown","a32065a6":"markdown","444624be":"markdown","75e6ec6a":"markdown","855b33c0":"markdown","967b5925":"markdown","9c861597":"markdown","8f9f7c44":"markdown","9a9970ab":"markdown","b09e583a":"markdown","2ba1aa37":"markdown","db62c589":"markdown","f323b524":"markdown","dab10175":"markdown","b3972920":"markdown"},"source":{"f58ee7f3":"'''import my libraries '''\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nimport warnings \nwarnings.filterwarnings('ignore')","e3c0dc44":"'''load training dataset'''\ntrain_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv') \ntest_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nSub = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","c203955a":"Sub = Sub.drop(['Id'],axis =1)\ntest_df =pd.concat([test_df,Sub],axis = 1)\ndf = pd.concat([train_df,test_df],axis =0)\ndf.head()","ff114962":"df.describe()","1ab0c0af":"df.isnull().sum()","c5cfad8f":"lis=['MiscFeature','Fence','PoolQC','Alley','BsmtFinSF2','3SsnPorch','MiscVal','LowQualFinSF','BsmtHalfBath']\ndf= df.drop(lis ,axis=1)\ndf.head()","497fc97f":"df.hist(sharex=False, sharey=False, xlabelsize=1, ylabelsize=1, figsize=(12,12))","6c26d32e":"df['SalePrice'].describe()","b2897d61":"sns.distplot(df['SalePrice'])","767e443d":"corr_matrix = df.corr()\ncorr_mat = df.drop('Id',axis=1).corr()\nf, ax = plt.subplots(figsize=(12, 10)) \ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr_matrix, annot=None ,cmap=cmap)","6a53de13":"df.corr()['SalePrice'].abs()","11194d3a":"C = corr_matrix.nlargest(5, 'SalePrice')['SalePrice'].index\nfor i in C : \n    var = i\n    data = pd.concat([df['SalePrice'], df[var]], axis=1)\n    data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000))","1075c820":"N = corr_mat.nsmallest((15),'SalePrice')['SalePrice'].index\nfor n in N :\n    df = df.drop(n ,axis=1)","83cc4143":"cleaning = df.drop(['SalePrice'],axis = 1)\nSalePrice = df['SalePrice']","c3d4fd78":"numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumeric_cols = cleaning.select_dtypes(include=numerics)\nnumeric_cols = numeric_cols.fillna(numeric_cols.mean())\nnumeric_cols.head()","aa6ce830":"categorical = ['object']\ncategorical_cols = cleaning.select_dtypes(include=categorical)\ncategorical_cols = categorical_cols.fillna('none')\ncategorical_cols = pd.get_dummies(categorical_cols )\ncategorical_cols.head()","7719fa2f":"cleaned = pd.concat([numeric_cols,categorical_cols],axis= 1)\ndf = pd.concat([cleaned,SalePrice],axis = 1)","4843eb1e":"tst_df = df.iloc[ 1460 : ,:-1]\nX = df.iloc[:1460,:-1]\ny = df.iloc[:1460,-1]\n\n\nscl = Normalizer()\nX = scl.fit_transform(X) \ntst_df = scl.fit_transform(tst_df)","99af39a3":"X_train ,X_test ,y_train ,y_test = train_test_split(X, y , test_size = 0.3, random_state = 4)","aeae7bb9":"# LN = LinearRegression()\n# LN.fit(X_train,y_train)\n# y_pred = LN.predict(X_test)\n# LN.score(X_train, y_train)","323cecfb":"# SGD =SGDRegressor()\n# SGD.fit(X_train,y_train)\n# y_pred = SGD.predict(X_test)\n# SGD.score(X_train, y_train)","f6389fa9":"# svr = SVR(gamma='scale', C=0.00000001, epsilon=0.2)\n# svr.fit(X_train,y_train)\n# y_pred = svr.predict(X_test)\n# svr.score(X_train, y_train)","6d682916":"g = GradientBoostingRegressor(n_estimators = 170, learning_rate = 0.4,max_depth = 2)\ntrain = g.fit(X_train,y_train)\nscore = g.score(X_train,y_train)\npercentage = \"{:.0%}\".format(score)\ny_pred = g.predict(X_test)\n#print('MAE:', metrics.mean_absolute_error(y_test, y_pred))  \n#print('MSE:', metrics.mean_squared_error(y_test, y_pred))  \n#print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nprint('VarScore:',metrics.explained_variance_score(y_test,y_pred))\nprint('Acc_Score:',percentage)","2a0cffa8":"fig, ax = plt.subplots(figsize=(30,10))\nax.plot(range(len(y_test)), y_test, '-b',label='Actual')\nax.plot(range(len(y_pred)), y_pred, 'r', label='Predicted')\nfig = plt.figure(figsize=(10,5))\nplt.scatter(y_test,y_pred) \nplt.plot(y_test,y_test,'r')\nplt.show()","785049f1":"y_predw = train.predict(tst_df)\nSubmission = pd.DataFrame({ 'Id': test_df['Id'],\n                            'SalePrice': y_predw })\nSubmission.to_csv(\"Submission.csv\", index=False)","ed1939e7":"Submission.shape","d66fa113":"# **EDA**","ac9fc9f1":"# **Submission**","27bfb9ca":"# **visualization score**","8f9996c3":"**split X ,y into train and test**","d3769c34":"**split X ,y for Scaling**","f747f320":"**The 5 highest correlation rates with y**","5c90f252":"**drop the smallest correlation coefficients**","2f23accd":"**SGDRegressor model**","a32065a6":"# **Clean Data**","444624be":"# **Load Libraries And Data**","75e6ec6a":"**select categorical object values for handling with missing data on it**","855b33c0":"**Gradient Boosting Regressor ensemble model**","967b5925":"**missing data**","9c861597":"# **Feature ENG**","8f9f7c44":"**concatenate them again**","9a9970ab":"**drop some useless data**","b09e583a":"**select numeric values for handling with missing data on it**","2ba1aa37":"**Linear Regression model**","db62c589":"**Support Victor Regression model**","f323b524":"**matrix of correlation coefficients between the features**","dab10175":"# **Machine Learning Model**","b3972920":"**Aggregate data into a single file\nfor easy handling in analysis and cleaning**"}}