{"cell_type":{"1a3d943d":"code","0ab6c9ca":"code","e523cfaf":"code","081e7ef1":"code","b43d4266":"code","69e15bf1":"code","6a3b4df5":"code","f8ac4a01":"code","317e551a":"code","3b10d5f0":"code","74276e70":"code","70729896":"code","91b2082c":"markdown","90fb0099":"markdown","1ae74642":"markdown"},"source":{"1a3d943d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ab6c9ca":"import numpy as np \nimport pandas as pd \nfrom sklearn.tree import DecisionTreeClassifier#\u6c7a\u7b56\u6578\u5957\u4ef6\nfrom sklearn.model_selection import KFold,StratifiedKFold\nfrom sklearn.metrics import accuracy_score#sklearn\u8a55\u4f30\u6b63\u78ba\u7387\u5957\u4ef6\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\n\ntrain=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngender_submission=pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","e523cfaf":"train","081e7ef1":"test","b43d4266":"gender_submission","69e15bf1":"col=['Pclass','Embarked','SibSp','Parch']#\u4f7f\u75284\u500b\u5c6c\u6027\ndata=pd.concat([train[col],test[col]],axis=0,ignore_index=True)\ndata","6a3b4df5":"OH_data=pd.get_dummies(data,dummy_na=True, drop_first=False)#dummy_na\u5c07\u7f3a\u5931\u503c\u8996\u70ba\u4e00\u500b\u6b04\u4f4d\nOH_data","f8ac4a01":"X = OH_data[:891].values#\u524d891\u7b46 \u70ba\u8a13\u7df4\u8cc7\u6599 \uff0c\u4e26\u8f49\u63db\u70banp.array\u578b\u614b\ny = train['Survived'].values#target\uff0c\u8f49\u63db\u70banp.array\u578b\u614b\nn_folds=30#\u4f7f\u752830fold\nkf = StratifiedKFold(n_splits=n_folds, shuffle=False)# StratifiedKFold\u70ba\u5206\u5c64\u96a8\u6a5f\u5206\u5272\ni=0\nacc_mean=0\nfor train_index, val_index in kf.split(X,y):#\u5be6\u969b\u5206\u5272\u8cc7\u6599\uff0c\u4f9d\u7167fold\u62c6\u5206\uff0c\u4e26\u4f7f\u7528\u8ff4\u5708\u7e5e\u6bcf\u4e00\u500bfold \n    i+=1\n    print(i,'-fold====>TRAIN:', len(train_index), \"VAL:\", len(val_index))\n    X_train, X_val = X[train_index], X[val_index]\n    y_train, y_val = y[train_index], y[val_index]\n    clf = RandomForestClassifier(random_state=1,n_jobs=-1)#\u5c0d\u6bcf\u500bfold \u5efa\u6a21\n    clf.fit(X_train, y_train)#\u8a13\u7df4\n    print('acc',accuracy_score(y_val,clf.predict(X_val)))#\u8a55\u4f30\u6bcf\u500bfold\u6210\u7e3e\n    acc_mean+=accuracy_score(y_val,clf.predict(X_val))#\u5c07\u6bcf\u500bfold\u6210\u7e3e\u52a0\u7e3d\uff0c\u4e26\u5728\u4e4b\u5f8c\u8a08\u7b97\u5e73\u5747    \nprint('----------------------')\nprint('acc\u5e73\u5747:',acc_mean\/n_folds)# acc_mean\u9664\u4ee5fold\u6578\uff0c\u8a08\u7b97\u5e73\u5747 ","317e551a":"m_range=range(2,13,2)#\u6700\u5927\u6df1\u5ea6\u7bc4\u570d2-13\nm_scores = []#\u5efa\u7acb\u5b58\u53d6\u6bcf\u500b\u6700\u5927\u6df1\u5ea6\u6210\u7e3e\u7684\u4e32\u5217\nn_folds=20\nkf = StratifiedKFold(n_splits=n_folds, shuffle=False)\nfor m in m_range:\n    acc_mean=0\n    #i=0\n    for train_index, val_index in kf.split(X,y):\n        #i+=1\n        #print(i,'-fold====>TRAIN:', len(train_index), \"VAL:\", len(val_index))\n        X_train, X_val = X[train_index], X[val_index]\n        y_train, y_val = y[train_index], y[val_index]\n        clf = DecisionTreeClassifier(random_state=1,max_depth=m)\n        clf.fit(X_train, y_train)\n        #print('acc',accuracy_score(y_val,clf.predict(X_val)))\n        acc_mean+=accuracy_score(y_val,clf.predict(X_val))    \n    print('acc\u5e73\u5747:',acc_mean\/n_folds)\n    m_scores.append(acc_mean\/n_folds)#\u5b58\u53d6\u6b64\u6700\u5927\u6df1\u5ea6\u6210\u7e3e","3b10d5f0":"plt.plot(m_range,m_scores)\nplt.xlabel('Value of m for DT')\nplt.ylabel('Cross-Validated Accuracy')\nplt.show()","74276e70":"X = OH_data[:891].values#\u524d891\u7b46 \u70ba\u8a13\u7df4\u8cc7\u6599\ny = train['Survived'].values#target\nn_folds=20\nskf = StratifiedKFold(n_splits=n_folds, shuffle=False)\ni=0\nacc_mean=0\nfor train_index, val_index in skf.split(X,y):\n    i+=1\n    print('fold-',i,'====>TRAIN:', len(train_index), \"VAL:\", len(val_index))\n    X_train, X_val = X[train_index], X[val_index]\n    y_train, y_val = y[train_index], y[val_index]\n    clf = RandomForestClassifier(random_state=1,n_jobs=-1)\n    clf.fit(X_train, y_train)\n    print('acc',accuracy_score(y_val,clf.predict(X_val)))\n    acc_mean+=accuracy_score(y_val,clf.predict(X_val))    \n    gender_submission[str(i)+'-fold']=clf.predict_proba(OH_data[891:])[:,1]#\u5c07\u70ba\u751f\u5b58\u6a5f\u7387\u5b58\u5165\u63d0\u4ea4\u8868\u55ae\u4e2d\nprint('----------------------')\nprint('acc\u5e73\u5747:',acc_mean\/n_folds)   ","70729896":"col=[str(i)+'-fold' for i in range(1,n_folds)]\ngender_submission['fold_mean']=gender_submission[col].mean(axis=1)#\u6e2c\u8a66\u96c6\u8a08\u7b97\u5e73\u5747\n#\u6e2c\u8a66\u96c6\u5e73\u5747\u5927\u65bc0.5\u70ba1\uff0c\u4e26\u5beb\u5165Survived\ngender_submission['Survived']=gender_submission['fold_mean'].map(lambda x : 1 if x>=0.5 else 0)\nsumit_col=['PassengerId','Survived']#\u6293\u53d6\u5efa\u7acb\u7e73\u4ea4\u8cc7\u6599\u6b04\u4f4d\u4e32\u5217\ngender_submission[sumit_col].to_csv('submission.csv',index=False)#\u5beb\u5165CSV","91b2082c":"# \u5c07\u6e2c\u8a66\u96c6\u5e36\u5165\u4ea4\u53c9\u9a57\u8b49(\u5806\u758a\u53ef\u7528\u6b64\u4f5c\u6cd5)","90fb0099":"#  overfitting\u904e\u5ea6\u64ec\u548c","1ae74642":"# \u95ee\u9898\u5b9a\u4e49\n## \u80cc\u666f\n\n* \u6cf0\u5766\u5c3c\u514b\u53f7\uff1a\u82f1\u56fd\u767d\u661f\u822a\u8fd0\u516c\u53f8\u4e0b\u8f96\u7684\u4e00\u8258\u5965\u6797\u5339\u514b\u7ea7\u90ae\u8f6e\uff0c\u4e8e1909\u5e743\u670831\u65e5\u5728\u7231\u5c14\u5170\u8d1d\u5c14\u6cd5\u65af\u7279\u6e2f\u7684\u54c8\u5170\u5fb7\u4e0e\u6c83\u5c14\u592b\u9020\u8239\u5382\u52a8\u5de5\u5efa\u9020\uff0c1911\u5e745\u670831\u65e5\u4e0b\u6c34\uff0c1912\u5e744\u67082\u65e5\u5b8c\u5de5\u8bd5\u822a\u3002\n* \u9996\u822a\u65f6\u95f4\uff1a1912\u5e744\u670810\u65e5\n* \u822a\u7ebf\uff1a\u4ece\u82f1\u56fd\u5357\u5b89\u666e\u6566\u51fa\u53d1\uff0c\u9014\u7ecf\u6cd5\u56fd\u745f\u5821-\u5965\u514b\u7279\u7ef4\u5c14\u4ee5\u53ca\u7231\u5c14\u5170\u6606\u58eb\u6566\uff0c\u9a76\u5411\u7f8e\u56fd\u7ebd\u7ea6\u3002\n* \u6c89\u8239\uff1a1912\u5e744\u670815\u65e5\uff081912\u5e744\u670814\u65e523\u65f640\u5206\u5de6\u53f3\u649e\u51fb\u51b0\u5c71\uff09\n* \u8239\u5458+\u4e58\u5ba2\u4eba\u6570\uff1a2224\n* \u9047\u96be\u4eba\u6570\uff1a1502\uff0867.5%\uff09\n\n## \u76ee\u6807\n\u6839\u636e\u8bad\u7ec3\u96c6\u4e2d\u5404\u4f4d\u4e58\u5ba2\u7684\u7279\u5f81\u53ca\u662f\u5426\u83b7\u6551\u6807\u5fd7\u7684\u5bf9\u5e94\u5173\u7cfb\u8bad\u7ec3\u6a21\u578b\uff0c\u9884\u6d4b\u6d4b\u8bd5\u96c6\u4e2d\u7684\u4e58\u5ba2\u662f\u5426\u83b7\u6551\u3002\uff08\u4e8c\u5143\u5206\u7c7b\u95ee\u9898\uff09\n\n## \u6570\u636e\u5b57\u5178\n### \u57fa\u7840\u5b57\u6bb5\n* PassengerId \u4e58\u5ba2id\n    * \u8bad\u7ec3\u96c6891\uff081- 891\uff09\uff0c\u6d4b\u8bd5\u96c6418\uff08892 - 1309\uff09\n* Survived \u662f\u5426\u83b7\u6551\n    * 1=\u662f\uff0c0=\u4e0d\u662f\n    * \u83b7\u6551\uff1a38%\n    * \u9047\u96be\uff1a62%\uff08\u5b9e\u9645\u9047\u96be\u6bd4\u4f8b\uff1a67.5%\uff09\n* Pclass \u8239\u7968\u7ea7\u522b\n    * \u4ee3\u8868\u793e\u4f1a\u7ecf\u6d4e\u5730\u4f4d\u3002 1=\u9ad8\u7ea7\uff0c2=\u4e2d\u7ea7\uff0c3=\u4f4e\u7ea7\n    * 1 : 2 : 3 = 0.24 : 0.21 : 0.55\n* Name \u59d3\u540d\n    * \u793a\u4f8b\uff1aFutrelle, Mrs. Jacques Heath (Lily May Peel)\n    * \u793a\u4f8b\uff1aHeikkinen, Miss. Laina\n* Sex \u6027\u522b\n    * male \u7537 577\uff0cfemale \u5973 314\n    * \u7537 : \u5973 = 0.65 : 0.35\n* Age \u5e74\u9f84\uff08\u7f3a\u5c1120%\u6570\u636e\uff09\n    * \u8bad\u7ec3\u96c6\uff1a714\/891 = 80%\n    * \u6d4b\u8bd5\u96c6\uff1a332\/418 = 79%\n* SibSp \u540c\u884c\u7684\u5144\u5f1f\u59d0\u59b9\u6216\u914d\u5076\u603b\u6570\n    * 68%\u65e0\uff0c23%\u67091\u4e2a \u2026 \u6700\u591a8\u4e2a\n* Parch \u540c\u884c\u7684\u7236\u6bcd\u6216\u5b69\u5b50\u603b\u6570\n    * 76%\u65e0\uff0c13%\u67091\u4e2a\uff0c9%\u67092\u4e2a \u2026 \u6700\u591a6\u4e2a\n    * Some children travelled only with a nanny, therefore parch=0 for them.\n* Ticket \u7968\u53f7\uff08\u683c\u5f0f\u4e0d\u7edf\u4e00\uff09\n    * \u793a\u4f8b\uff1aA\/5 21171\n    * \u793a\u4f8b\uff1aSTON\/O2. 3101282**\n* Fare \u7968\u4ef7\n    * \u6d4b\u8bd5\u96c6\u7f3a\u4e00\u4e2a\u6570\u636e\n* Cabin \u8239\u8231\u53f7\n    * \u8bad\u7ec3\u96c6\u53ea\u6709204\u6761\u6570\u636e\uff0c\u6d4b\u8bd5\u96c6\u670991\u6761\u6570\u636e\n    * \u793a\u4f8b\uff1aC85\n* Embarked \u767b\u8239\u6e2f\u53e3\n    * C = Cherbourg\uff08\u745f\u5821\uff0919%, Q = Queenstown\uff08\u7687\u540e\u9547\uff099%, S = Southampton\uff08\u5357\u5b89\u666e\u6566\uff0972%\n    * \u8bad\u7ec3\u96c6\u5c11\u4e24\u4e2a\u6570\u636e\n\n### \u884d\u751f\u5b57\u6bb5\uff08\u90e8\u5206\uff0c\u5728\u540e\u7eed\u4ee3\u7801\u4e2d\u8865\u5145\uff09\n* Title \u79f0\u8c13\n    * dataset.Name.str.extract( \u201c ([A-Za-z]+)\\.\u201d, expand = False)\n    * \u4ece\u59d3\u540d\u4e2d\u63d0\u53d6\uff0c\u4e0e\u59d3\u540d\u548c\u793e\u4f1a\u5730\u4f4d\u76f8\u5173\n* FamilySize \u5bb6\u5ead\u89c4\u6a21\n    * Parch + SibSp + 1\n    * \u7528\u4e8e\u8ba1\u7b97\u662f\u5426\u72ec\u81ea\u51fa\u884cIsAlone\u7279\u5f81\u7684\u4e2d\u95f4\u7279\u5f81\uff0c\u6682\u4e14\u4fdd\u7559\n* IsAlone \u72ec\u81ea\u4e00\u4eba\n    * FamilySize == 1\n    * \u662f\u5426\u72ec\u81ea\u51fa\u884c\n* HasCabin \u6709\u72ec\u7acb\u8231\u5ba4\n    * \u4e0d\u786e\u5b9a\u6ca1CabinId\u7684\u6837\u672c\u662f\u6ca1\u6709\u8231\u5ba4\u8fd8\u662f\u6570\u636e\u786e\u5b9e"}}