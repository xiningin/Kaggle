{"cell_type":{"2ed8e9cc":"code","4597c08c":"code","1d8da035":"code","bf9ddcd8":"code","32412f42":"code","95d55f63":"code","4fac22f6":"code","0abb0fcf":"code","650931d0":"code","bd8e3253":"code","89ef96d7":"code","1592ec0f":"code","ba610069":"code","341afc3e":"code","e81d1b4f":"code","d9140731":"code","48f5cd64":"code","9320a2bd":"code","8546682b":"code","bc032c04":"code","e0c128c9":"code","44684c80":"code","355a5d6b":"code","48f39b12":"code","037af4b6":"code","96d15545":"code","facbb6ee":"code","d62e2d26":"code","77b066ff":"code","5181ab9d":"code","ef6201bf":"code","ac96df50":"code","2b91df26":"code","ce0e1178":"code","43db15b3":"code","884f5e77":"code","25de4245":"code","6f5cdf81":"code","fa7aa62f":"code","95b09129":"code","9e5ecfba":"code","ed982cf2":"code","b83d49c1":"code","72fc7719":"code","50a7333c":"code","c892c624":"code","06016c39":"code","da9dd9b1":"code","13cebb62":"code","d95edc3d":"markdown","ed859564":"markdown","9b837b65":"markdown","1b6ade49":"markdown","d1349cf3":"markdown","d16bae9a":"markdown","a5b6ea52":"markdown","eba3cabc":"markdown","73ceee4e":"markdown"},"source":{"2ed8e9cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re # regular expression libary.\nimport nltk # Natural Language toolkit\nnltk.download(\"stopwords\")  #downloading stopwords\nnltk.download('punkt')\nfrom nltk import word_tokenize,sent_tokenize\nnltk.download('wordnet')\nimport nltk as nlp\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences \n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4597c08c":"fake_df=pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/Fake.csv')\ntrue_df=pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/True.csv')","1d8da035":"fake_df.head()   ","bf9ddcd8":"true_df.head()","32412f42":"fake_df[\"Label\"]=1  # I labeled fake news with 1\ntrue_df[\"Label\"]=0  # I labeled true news with 0\n","95d55f63":"fake_df.head()","4fac22f6":"true_df.head()","0abb0fcf":"df=pd.concat([fake_df,true_df],ignore_index=True)","650931d0":"df.head()","bd8e3253":"df.tail()","89ef96d7":"df.info()","1592ec0f":"df.isnull().sum()","ba610069":"import seaborn as sns\n\nsns.countplot(\"Label\",data=df) # 0= True 1=Fake","341afc3e":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,5))\nsns.countplot(\"subject\",hue=\"Label\" , data=df)\nplt.xticks(rotation=90)","e81d1b4f":"year=[]\n\nfor i in df.date:\n    if '2017' in i:\n        year.append(\"2017\")\n    elif '2016' in i:\n        year.append(\"2016\")\n    elif '2015' in i:\n        year.append(\"2015\")\n    else:\n        year.append(\"2015\")\n\n     ","d9140731":"len(year)","48f5cd64":"len(df)","9320a2bd":"df[\"Year\"]=year","8546682b":"plt.figure(figsize=(10,5))\nsns.countplot(\"Year\",hue=\"Label\" , data=df)\nplt.xticks(rotation=90)","bc032c04":"plt.figure(figsize=(10,5))\nsns.countplot(\"subject\",hue=\"Year\" , data=df)\nplt.xticks(rotation=90)   ","e0c128c9":"fig,ax=plt.subplots(1,2,figsize=(20,5))\nsns.countplot(\"subject\" ,data=fake_df,ax=ax[0])\nax[0].set_title('Subjects for Fake News')\n\nsns.countplot(\"subject\",data=true_df,ax=ax[1])\nax[1].set_title('Subjects for True News')\nfig.show()","44684c80":"X=df.title.copy()\ny=df.Label.copy()","355a5d6b":"X.head()","48f39b12":"len(X)","037af4b6":"y.head()","96d15545":"len(y)","facbb6ee":"from nltk.corpus import stopwords\nstop_words = stopwords.words('english')","d62e2d26":"X_list=[]\n\nfor i in X:\n    i=re.sub(\"[^a-zA-z]\",\" \",i) # removing expressions that are not word\n    i=i.lower()\n    i = i.split()\n    i=\" \".join([word for word in i if not word in stop_words]) #removing unused words\n    X_list.append(i)\n    \n    \n    \n    \n    ","77b066ff":"X_list[:5]","5181ab9d":"df[\"Cleaned\"]=X_list","ef6201bf":"df.head()","ac96df50":"from wordcloud import WordCloud \nimport matplotlib.pyplot as plt\nplt.subplots(figsize=(12,12))\nwordcloud=WordCloud(background_color=\"white\",width=1024,height=768).generate(\" \".join(df.Cleaned))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()\n","2b91df26":"df.title[0]","ce0e1178":"df.Cleaned[0]","43db15b3":"X=df.Cleaned","884f5e77":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42,shuffle=True)\n","25de4245":"print(len(X_train)) # 31428 sentences\nprint(len(y_train)) #31428 Labels\nprint(len(X_test))  # 13470 sentences\nprint(len(y_test)) #13470 Labels","6f5cdf81":"max_lenght=100\n\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\ntokenizer = Tokenizer() \ntokenizer.fit_on_texts(X_train)\n\nword_index = tokenizer.word_index # creating word dict for words in training\nsequences = tokenizer.texts_to_sequences(X_train)  # replacing words with the number corresponding to them in the dictionary(word_index)\nX_train_padded = pad_sequences(sequences, padding='post',maxlen=max_lenght) # padding words\n\nprint(len(word_index))\nprint(word_index)\n\n\n\n# There are 18276 words in word_index","fa7aa62f":"print(\"Original Version:\",X_train[13970])\nprint(\"---------------------------------\")\nprint(\"Padded version\",X_train_padded[0]) \nprint(\"---------------------------------\")\nprint(\"Tokenized version:\",sequences[0])\nprint(\"---------------------------------\")\nprint(\"Shape after the padding:\",X_train_padded.shape)  ","95b09129":"X_test_sequences = tokenizer.texts_to_sequences(X_test)\nX_test_padded = pad_sequences(X_test_sequences,padding=\"post\",maxlen=max_lenght)","9e5ecfba":"print(\"Original Version:\",X_test[22216])\nprint(\"---------------------------------\")\nprint(\"Padded version\",X_test_padded[0]) \nprint(\"---------------------------------\")\nprint(\"Tokenized version:\",X_test_sequences[0])\nprint(\"---------------------------------\")\nprint(\"Shape after the padding:\",X_test_padded.shape)  ","ed982cf2":"import tensorflow as tf\n\nvocab_size = len(tokenizer.word_index)+1\nembedding_dim=16\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=100),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dropout(0.50),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()\n","b83d49c1":"num_epochs = 4\nhistory=model.fit(X_train_padded,y_train, epochs=num_epochs, validation_data=(X_test_padded,y_test))","72fc7719":"import matplotlib.pyplot as plt\n\n\nplt.plot(history.history[\"accuracy\"],color=\"green\")\nplt.plot(history.history[\"loss\"],color=\"red\")\nplt.title(\"Train accuracy and Train loss\")\nplt.grid()","50a7333c":"plt.plot(history.history[\"val_accuracy\"],color=\"blue\")\nplt.plot(history.history[\"val_loss\"],color=\"orange\")\nplt.title(\"Test accuracy and Test loss\")\nplt.grid()\n","c892c624":"print(\"Accuracy of the model on Training Data is - \" , model.evaluate(X_train_padded,y_train)[1]*100 , \"%\")\nprint(\"Accuracy of the model on Testing Data is - \" , model.evaluate(X_test_padded,y_test)[1]*100 , \"%\")","06016c39":"pred = model.predict_classes(X_test_padded)","da9dd9b1":"pred[:5]","13cebb62":"from sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test,pred)\nsns.heatmap(cm,annot=True,linecolor=\"white\",fmt='' , xticklabels = ['Fake','True'] , yticklabels = ['Fake','True'])","d95edc3d":"As you see graph above, This data set contains  politics, Gov. news and Left-news for  year 2015 but there arent news about other subjects for 2015","ed859564":"True news just consist of politicsNews and Worldnews","9b837b65":"## NLP","1b6ade49":"588 False Predictions ","d1349cf3":"for 2015,All news are fake ","d16bae9a":"## Model","a5b6ea52":"we made all sentences same lenght.As you see padded sahpe is (31428,100).it means All sentences in my X_train consist of lenght of 100 words","eba3cabc":"real news consist of only politicsNews and worldnews others are all fake","73ceee4e":"# I will create model with using News Title "}}