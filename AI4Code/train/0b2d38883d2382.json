{"cell_type":{"47351243":"code","3d24c837":"code","da843b6c":"code","1694ccc2":"code","2e6ee826":"code","6e4b4ea7":"code","7d552efe":"code","531f6bc8":"code","fecf3fb9":"code","240865dc":"code","e9e5100e":"code","28d98b5b":"code","0f2e77f6":"code","ead4cf67":"code","c9a8a10b":"code","fcf7e30d":"code","b2136f7a":"code","7a1fe2a8":"code","74ec3daf":"code","e0ca42e1":"code","18c8a7de":"code","54a70def":"code","f7bbcf60":"code","d0f1721b":"code","0a5e7713":"code","4b701866":"code","92f401c3":"code","1f7cec1f":"code","289c1a27":"code","abea54c9":"code","55339c03":"code","2ac1997c":"code","9d899b9d":"code","e18acddc":"code","0e4b7599":"code","b8278109":"code","0f07d232":"code","9be67230":"code","1921d727":"code","c125f6fb":"code","58e5d656":"code","b9d169a6":"code","c6516884":"code","c14bf65a":"code","310ed1ff":"code","0295440b":"code","a1cd5db3":"code","ad009efa":"markdown","8ab01984":"markdown","11d1edd3":"markdown","523b4c73":"markdown","abdf5f29":"markdown","d8bff093":"markdown","cafc158f":"markdown","ca2884ff":"markdown","48c038f8":"markdown","afac45c7":"markdown","6a0de0a7":"markdown","92f19bab":"markdown","002b5247":"markdown","8debb34d":"markdown","6ecce062":"markdown","de5fc2c8":"markdown","62d4697f":"markdown","f6bbf1b3":"markdown","8224b132":"markdown","7a2412e9":"markdown","42ce3563":"markdown","abbd7134":"markdown","403d5fed":"markdown","98a87230":"markdown","de733f0e":"markdown","9a848b0a":"markdown","00f99fda":"markdown","76787f11":"markdown","c1666f01":"markdown","f93fef6c":"markdown","4433f1cb":"markdown"},"source":{"47351243":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n%matplotlib inline\n%pylab inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport xgboost\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n# print(os.listdir(\"..\/input\"))\nimport warnings\nwarnings.filterwarnings(action='ignore')\n# Any results you write to the current directory are saved as output.","3d24c837":"plt.figure(figsize = (20, 20))","da843b6c":"df = pd.read_csv('..\/input\/train_V2.csv')","1694ccc2":"df.columns","2e6ee826":"df.info()","6e4b4ea7":"def plot_counts(p):\n    plt.figure(figsize = (20, 15))\n    sns.countplot(df[p]).set_title(p)\n    plt.show()","7d552efe":"def plot_dists(p, b = 50, kde_flag = True, rug_flag = False):\n    plt.figure(figsize = (20, 15))\n    sns.distplot(df[p], kde= kde_flag, rug = rug_flag, bins = b).set_title(p)\n    plt.show()","531f6bc8":"def plot_scatters(x, y, title):\n    plt.figure(figsize = (20, 15))\n    sns.scatterplot(df[x], df[y]).set_title(title)\n    plt.show()","fecf3fb9":"plot_counts(\"DBNOs\")","240865dc":"plot_counts(\"boosts\")","e9e5100e":"plot_counts(\"headshotKills\")","28d98b5b":"plot_counts(\"heals\")","0f2e77f6":"plot_counts(\"killStreaks\")","ead4cf67":"plot_counts(\"kills\")","c9a8a10b":"plot_counts(\"revives\")","fcf7e30d":"plot_counts(\"roadKills\")","b2136f7a":"plot_counts(\"teamKills\")","7a1fe2a8":"plot_counts(\"vehicleDestroys\")","74ec3daf":"plot_counts(\"weaponsAcquired\")","e0ca42e1":"plot_dists('walkDistance')","18c8a7de":"plot_counts(\"matchType\")","54a70def":"df[\"headshot_rate\"] = df[\"headshotKills\"] \/ df[\"kills\"]\ndf[\"headshot_rate\"].fillna(0, inplace = True)\nplot_dists(\"headshot_rate\")","f7bbcf60":"df[\"roadkills_rate\"] = df[\"roadKills\"] \/ df[\"kills\"]\ndf[\"roadkills_rate\"].fillna(0, inplace = True)\nplot_dists(\"roadkills_rate\")","d0f1721b":"plot_dists(\"killPlace\")","0a5e7713":"plot_dists(\"swimDistance\")","4b701866":"plot_dists(\"longestKill\")","92f401c3":"plot_scatters(\"rideDistance\", \"roadKills\", \"RoadKills by RideDistance\")","1f7cec1f":"plot_dists(\"killPlace\")","289c1a27":"plot_scatters(\"killPlace\", \"kills\", \"Kills by Killplace\")","abea54c9":"plot_scatters(\"winPlacePerc\", \"kills\", \"No of kills by winper\")","55339c03":"df[\"matchDurationMinute\"] = df[\"matchDuration\"].apply(lambda x: x\/60)\nplot_scatters(\"winPlacePerc\", \"matchDurationMinute\", \"Wins by match duration\")","2ac1997c":"plot_scatters(\"winPlacePerc\",\"killPlace\",\"\")","9d899b9d":"plt.figure(figsize = (20, 15))\nsns.pointplot(df[\"heals\"], df[\"winPlacePerc\"], linestyles=\"-\")\nsns.pointplot(df[\"boosts\"], df[\"winPlacePerc\"], color = \"green\", linestyles=\"--\")\nplt.xlabel(\"heals\/boost\")\nplt.legend([\"heals\",\"boosts\"]) \nplt.show()","e18acddc":"plt.figure(figsize = (20, 15))\nsns.pointplot(df[\"DBNOs\"], df[\"assists\"])\nplt.grid()\nplt.show()","0e4b7599":"plt.figure(figsize = (20, 15))\nsns.pointplot(df[\"heals\"], df[\"walkDistance\"], linestyles=\"-\")\nsns.pointplot(df[\"boosts\"], df[\"walkDistance\"], color = \"green\", linestyles=\"--\")\nplt.xlabel(\"heals\/boost\")\nplt.legend([\"heals\",\"boosts\"]) \nplt.grid()\nplt.show()","b8278109":"plt.figure(figsize = (20, 15))\nsns.heatmap(df.corr(), annot = True, fmt='.1f')\nplt.show()","0f07d232":"del df","9be67230":"train_df = pd.read_csv(\"..\/input\/train_V2.csv\")\ntest_df = pd.read_csv(\"..\/input\/test_V2.csv\")","1921d727":"matchTyp = ['squad-fpp', 'duo', 'solo-fpp', 'squad', 'duo-fpp', 'solo',\n       'normal-squad-fpp', 'crashfpp', 'flaretpp', 'normal-solo-fpp',\n       'flarefpp', 'normal-duo-fpp', 'normal-duo', 'normal-squad',\n       'crashtpp', 'normal-solo']\nmapping = {}\nfor i, j in enumerate(matchTyp):\n    mapping[i] = j\ntrain_df[\"matchTypeMap\"] = train_df[\"matchType\"].apply(lambda x: ''.join(str(i) for i, j in mapping.items() if x == j)).map(int64)\ntest_df[\"matchTypeMap\"] = test_df[\"matchType\"].apply(lambda x: ''.join(str(i) for i, j in mapping.items() if x == j)).map(int64)","c125f6fb":"train_df.drop([\"matchType\"], axis =1, inplace=True)\ntest_df.drop([\"matchType\"], axis =1, inplace=True)","58e5d656":"train_df.dropna(inplace = True)\ntrain_df.isnull().any().any()","b9d169a6":"X = train_df.drop([\"Id\", \"groupId\", \"matchId\", \"winPlacePerc\"], axis = 1)\ny = train_df[\"winPlacePerc\"]\ntest = test_df.drop([\"Id\", \"groupId\", \"matchId\"], axis = 1)","c6516884":"del train_df","c14bf65a":"model = xgboost.XGBRegressor(max_depth=17, gamma=0.3, learning_rate= 0.1)\nmodel.fit(X,y)\ndel X\ndel y","310ed1ff":"xgboost.plot_importance(model)","0295440b":"pred = model.predict(test)","a1cd5db3":"test_id = test_df[\"Id\"]\nsubmit_xg = pd.DataFrame({'Id': test_id, \"winPlacePerc\": pred} , columns=['Id', 'winPlacePerc'])\nprint(submit_xg.head())\nsubmit_xg.to_csv(\"submission.csv\", index = False)","ad009efa":"** Number of enemy players knocked by  Number of enemy players this player damaged that were killed by teammates.**","8ab01984":"**Distance travelled and road kills**","11d1edd3":"**Kills and Killplace**","523b4c73":"**Longestkill**","abdf5f29":"**Teamkills**","d8bff093":"**Swin Distance**","cafc158f":"Plotting feature importance","ca2884ff":"\n    DBNOs - Number of enemy players knocked.\n    assists - Number of enemy players this player damaged that were killed by teammates.\n    boosts - Number of boost items used.\n    damageDealt - Total damage dealt. Note: Self inflicted damage is subtracted.\n    headshotKills - Number of enemy players killed with headshots.\n    heals - Number of healing items used.\n    killPlace - Ranking in match of number of enemy players killed.\n    killPoints - Kills-based external ranking of player. (Think of this as an Elo ranking where only kills matter.)\n    killStreaks - Max number of enemy players killed in a short amount of time.\n    kills - Number of enemy players killed.\n    longestKill - Longest distance between player and player killed at time of death. This may be misleading, as downing a player and driving away may lead to a large longestKill stat.\n    matchDuration - Duration of match in seconds\n    matchId - Integer ID to identify match. There are no matches that are in both the training and testing set.\n    matchType - String identifying the game mode that the data comes from. The standard modes are \u201csolo\u201d, \u201cduo\u201d, \u201csquad\u201d, \u201csolo-fpp\u201d, \u201cduo-fpp\u201d, and \u201csquad-fpp\u201d; other modes are from events or custom matches. \n    revives - Number of times this player revived teammates.\n    rideDistance - Total distance traveled in vehicles measured in meters.\n    roadKills - Number of kills while in a vehicle.\n    swimDistance - Total distance traveled by swimming measured in meters.\n    teamKills - Number of times this player killed a teammate.\n    vehicleDestroys - Number of vehicles destroyed.\n    walkDistance - Total distance traveled on foot measured in meters.\n    weaponsAcquired - Number of weapons picked up.\n    winPoints - Win-based external ranking of player. (Think of this as an Elo ranking where only winning matters.)\n    groupId - Integer ID to identify a group within a match. If the same group of players plays in different matches, they will have a different groupId each time.\n    numGroups - Number of groups we have data for in the match.\n    maxPlace - Worst placement we have data for in the match. This may not match with numGroups, as sometimes the data skips over placements.\n    winPlacePerc - The target of prediction. This is a percentile winning placement, where 1 corresponds to 1st place, and 0 corresponds to last place in the match. It is calculated off of maxPlace, not numGroups, so it is possible to have missing chunks in a match.\n","48c038f8":"**Roadkills**","afac45c7":"**Vehicledestroys**","6a0de0a7":"**Headshotskill**","92f19bab":"**KillPlace**","002b5247":"**Heals\/Boost and walk distance**","8debb34d":"**WeaponsAcquired**","6ecce062":"**Match type**","de5fc2c8":"No of kills increase the chances of wins","62d4697f":"**To be continued [Progress]**","f6bbf1b3":"**Boosts**","8224b132":"**DBNOs**","7a2412e9":"**Revives**","42ce3563":"**Headshots Rate**","abbd7134":"**WinPlacePerc and Match duration**","403d5fed":"**Roadkills Rate**","98a87230":"**Kill place **","de733f0e":"**Killstreaks**","9a848b0a":"**WinPlacePerc and Kills**","00f99fda":"**WalkDistance**","76787f11":"No. of Boosts increases the chances of win than no. of heals","c1666f01":"**Kills**","f93fef6c":"**Heals**","4433f1cb":"**Heals\/Boost and WinPer**"}}