{"cell_type":{"5c6fff86":"code","88f56d67":"code","1e7e7bfc":"code","9a49d495":"code","41c2b21d":"code","6ab94a23":"code","ae58c127":"code","986c728c":"code","45884d4b":"code","aa81db0a":"code","6921ca68":"code","a782d6e5":"code","62b55777":"code","d0938df9":"code","4f783a02":"code","e08de667":"markdown","777219ea":"markdown","0fb913a9":"markdown","6c018bc7":"markdown","97e932cf":"markdown"},"source":{"5c6fff86":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","88f56d67":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","1e7e7bfc":"train_df.isnull().sum()","9a49d495":"train_df = train_df.drop(['Ticket', 'Cabin', 'Embarked', 'PassengerId', 'Name'], axis=1)\ntest_df = test_df.drop(['Ticket', 'Cabin', 'Embarked', 'Name'], axis=1)\n\ntrain_df['Sex'] = train_df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\ntest_df['Sex'] = test_df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\ntrain_df.isnull().sum()","41c2b21d":"from sklearn.impute import SimpleImputer","6ab94a23":"imp = SimpleImputer(missing_values=np.nan, strategy='mean')\ntrain_df['Age'] = imp.fit_transform(train_df['Age'].values.reshape(-1,1))\ntrain_df.isnull().sum()","ae58c127":"imp = SimpleImputer(missing_values=np.nan, strategy='mean')\ntest_df['Age'] = imp.fit_transform(test_df['Age'].values.reshape(-1,1))\ntest_df['Fare'] = imp.fit_transform(test_df['Fare'].values.reshape(-1,1))\ntrain_df.isnull().sum()","986c728c":"train_df['FamilySize'] = train_df['SibSp'] +  train_df['Parch'] + 1\ntest_df['FamilySize'] = test_df['SibSp'] +  test_df['Parch'] + 1\ntrain_df = train_df.drop(['SibSp', 'Parch'], axis=1)\ntest_df = test_df.drop(['SibSp', 'Parch'], axis=1)","45884d4b":"plt.figure(figsize=(15,6))\nsns.heatmap(train_df.corr(), vmax=1, square=True, annot=True)","aa81db0a":"# Importing Classifier Modules\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier","6921ca68":"X_train = train_df.drop('Survived', axis=1)\ny_train = train_df['Survived']\nX_test = test_df.drop('PassengerId', axis=1).copy()\n\nX_test.isnull().sum()","a782d6e5":"clf = SVC()\nclf.fit(X_train, y_train)\ny_pred_svc = clf.predict(X_test)\nacc_svc = round(clf.score(X_train, y_train) * 100, 2)\nprint (acc_svc)","62b55777":"clf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\ny_pred_decision_tree = clf.predict(X_test)\nacc_decision_tree = round(clf.score(X_train, y_train) * 100, 2)\nprint (acc_decision_tree)","d0938df9":"clf = RandomForestClassifier(n_estimators=1000)\nclf.fit(X_train, y_train)\ny_pred_random_forest = clf.predict(X_test)\nacc_random_forest = round(clf.score(X_train, y_train) * 100, 2)\nprint (acc_random_forest)","4f783a02":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": y_pred_random_forest\n    })\n\nsubmission.to_csv('submission.csv', index=False)","e08de667":"Submit","777219ea":"Decision Tree","0fb913a9":"\n\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\ncombine = [train_df, test_df]\n\n","6c018bc7":"Random Forest","97e932cf":"Support Vector Machine (SVM)"}}