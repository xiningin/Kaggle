{"cell_type":{"387d1e75":"code","37e2f61f":"code","0c50e128":"code","fbe5ecfd":"code","168ee376":"code","9a96f158":"code","ec58afe8":"code","2af6f5f6":"code","6ff7d2c5":"code","271342a6":"code","46e895e8":"code","20cf5d7f":"code","2bed3f9b":"code","1ee63939":"code","0e449df2":"code","f49b964c":"code","f92cfae3":"code","8b8e77fb":"markdown","29804621":"markdown","7aec6d31":"markdown","7ebfdee3":"markdown"},"source":{"387d1e75":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","37e2f61f":"import pandas as pd\nimport numpy as np\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport librosa\nimport librosa.display\nfrom IPython.display import Audio\nimport warnings\nwarnings.filterwarnings('ignore')","0c50e128":"paths = [] #cr\u00e9er un tableau pour les paths\nlabels = [] #cr\u00e9er un tableau pour les nom de fichiers .wav\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames: #parcourir le Data\n        paths.append(os.path.join(dirname, filename)) #ajouter les diff\u00e9rents path aux tableaux paths\n        label = filename.split('_')[-1] #d\u00e9couper le nom de fichier  par _ et extraire le nom d'emotions qui est le dernier element de la chaine -1 \n        label = label.split('.')[0] #extraire le nom d'\u00e9motio\n        labels.append(label.lower())\n    if len(paths) == 2800:\n        break\nprint('Dataset is Loaded')","fbe5ecfd":"len(paths)#nombre des fichiers","168ee376":"paths[:5]#extraire le 5 premiers paths","9a96f158":"labels[:5]#extraire le 5 premiers labels","ec58afe8":"df = pd.DataFrame()\ndf['speech'] = paths #ajouter les paths dans les colones\ndf['label'] = labels #ajouter les labels dans les lignes\ndf.head()","2af6f5f6":"df['label'].value_counts()# nombre des fichiers pour chaque \u00e9motions","6ff7d2c5":"sns.countplot(df['label'])# afficher les diff\u00e9rents \u00e9motions dans le Data","271342a6":"#fonction pour dessiner l'histogramme du notre son \ndef waveplot(data, sr, emotion):\n    plt.figure(figsize=(10,4))\n    plt.title(emotion, size=20)\n    librosa.display.waveplot(data, sr=sr)\n    plt.show()\n#fonction pour dessiner le Spectograme du notre son  \ndef spectogram(data, sr, emotion):\n    x = librosa.stft(data)\n    xdb = librosa.amplitude_to_db(abs(x))\n    plt.figure(figsize=(11,4))\n    plt.title(emotion, size=20)\n    librosa.display.specshow(xdb, sr=sr, x_axis='time', y_axis='hz')\n    plt.colorbar()","46e895e8":"emotion = 'fear'#donner le nom de \u00e9motions\npath = np.array(df['speech'][df['label']==emotion])[10]#donner l'indice i d'\u00e9motions pour extraire leur paths\ndata, sampling_rate = librosa.load(path)#convertire le path en sampling rate\nwaveplot(data, sampling_rate, emotion) # dessiner l'histogramme\nspectogram(data, sampling_rate, emotion)# dessiner le spectogramme\nAudio(path) # \u00e9couter l'audio","20cf5d7f":"emotion = 'angry'\npath = np.array(df['speech'][df['label']==emotion])[20]\ndata, sampling_rate = librosa.load(path)\nwaveplot(data, sampling_rate, emotion)\nspectogram(data, sampling_rate, emotion)\nAudio(path)","2bed3f9b":"emotion = 'disgust'\npath = np.array(df['speech'][df['label']==emotion])[0]\ndata, sampling_rate = librosa.load(path)\nwaveplot(data, sampling_rate, emotion)\nspectogram(data, sampling_rate, emotion)\nAudio(path)","1ee63939":"emotion = 'neutral'\npath = np.array(df['speech'][df['label']==emotion])[0]\ndata, sampling_rate = librosa.load(path)\nwaveplot(data, sampling_rate, emotion)\nspectogram(data, sampling_rate, emotion)\nAudio(path)","0e449df2":"emotion = 'sad'\npath = np.array(df['speech'][df['label']==emotion])[0]\ndata, sampling_rate = librosa.load(path)\nwaveplot(data, sampling_rate, emotion)\nspectogram(data, sampling_rate, emotion)\nAudio(path)","f49b964c":"emotion = 'ps'\npath = np.array(df['speech'][df['label']==emotion])[0]\ndata, sampling_rate = librosa.load(path)\nwaveplot(data, sampling_rate, emotion)\nspectogram(data, sampling_rate, emotion)\nAudio(path)","f92cfae3":"emotion = 'happy'\npath = np.array(df['speech'][df['label']==emotion])[0]\ndata, sampling_rate = librosa.load(path)\nwaveplot(data, sampling_rate, emotion)\nspectogram(data, sampling_rate, emotion)\nAudio(path)","8b8e77fb":"## Load the Data","29804621":"## Create DataFrame","7aec6d31":"## Importation des Biblioth\u00e9ques","7ebfdee3":"## Historgrame & Spectograme Pour Chaque \u00e9motions"}}