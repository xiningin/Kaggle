{"cell_type":{"a23d6914":"code","86f48d25":"code","85f59a0e":"code","36dbd1dd":"code","1d63ebde":"code","b28ffe3b":"code","4a5bda28":"code","30423a06":"code","7b4efcee":"code","1b08749a":"code","850c4186":"code","3c6ac678":"code","1f6ce994":"code","18ad63cd":"code","d639d90e":"code","5b2a5474":"code","82c5115f":"code","71584855":"code","59f077a0":"code","332f741f":"code","a77598a2":"code","86530540":"code","93404a6f":"code","2a18b96a":"code","c4368832":"markdown","d2026a22":"markdown","e4fac028":"markdown","6caa66ec":"markdown","50fca997":"markdown","05e0bdb7":"markdown","53c88da4":"markdown","a6d2cd8b":"markdown","0be8cf12":"markdown","da3e007a":"markdown","6f1a3c17":"markdown","c288b878":"markdown"},"source":{"a23d6914":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86f48d25":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%notebook inline\n\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.model_selection import train_test_split","85f59a0e":"df = pd.read_csv(\"\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv\")\n\nprint(df.shape)\ndf.head()","36dbd1dd":"for col in df.select_dtypes(\"object\"):\n    print(df[col].value_counts())\n    print(\"\\n\")","1d63ebde":"df1 = df.copy()\n\nenc = LabelEncoder()\ndict_ls = [] # list for referencing class\n\nfor col in df1.select_dtypes(\"object\"):\n    df1[col] = enc.fit_transform(df1[col])\n    col_dict = {index: val for index,val in enumerate(enc.classes_)}\n    dict_ls.append(col_dict)\n\ndf1.head()","b28ffe3b":"for i in dict_ls:\n    print(i)\n    print(\"\\n\")","4a5bda28":"import seaborn as sns\ncorr = df1.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(corr, annot=True)","30423a06":"df2 = df1.copy()\n\ndf2.drop([\"gender\", \"parental level of education\", \"test preparation course\"], axis=1, inplace=True) # race and lunch cols with scores\n\n# only scores\n#df2.drop(df2.iloc[:,:5], axis=1, inplace=True) # before commenting out this comment the above line\n\ndf2.head()","7b4efcee":"models = {\n    \"                     Linear Regression\": LinearRegression(),\n    \" Linear Regression (L2 Regularization)\": Ridge(),\n    \" Linear Regression (L1 Regularization)\": Lasso(),\n}","1b08749a":"def splitData(df, col):\n    X = df.drop(col, axis =1)\n    y = df[col]\n    return X,y\n\nX1, y1 = splitData(df2, \"math score\")\nX2, y2 = splitData(df2, \"reading score\")\nX3, y3 = splitData(df2, \"writing score\")","850c4186":"def tr_ts_split(X,y):\n    \n    sc = StandardScaler()\n\n    X = pd.DataFrame(sc.fit_transform(X), columns=X1.columns)\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 101)\n    \n    return X_train, X_test, y_train, y_test","3c6ac678":"def trainModels(X_train, y_train):\n    for name, model in models.items():\n        model.fit(X_train, y_train)\n        print(name + \" trained.\")","1f6ce994":"def testModels(X_test, y_test):\n    for name, model in models.items():\n        print(name + \" Accuracy: {:.5f}\".format(model.score(X_test, y_test)))\n                     ","18ad63cd":"X_train, X_test, y_train, y_test = tr_ts_split(X1, y1)\ntrainModels(X_train, y_train)\nprint(\"\\n\")\ntestModels(X_test, y_test)","d639d90e":"X_train, X_test, y_train, y_test = tr_ts_split(X2, y2)\ntrainModels(X_train, y_train)\nprint(\"\\n\")\ntestModels(X_test, y_test)","5b2a5474":"X_train, X_test, y_train, y_test = tr_ts_split(X3, y3)\ntrainModels(X_train, y_train)\nprint(\"\\n\")\ntestModels(X_test, y_test)","82c5115f":"df3 = df.copy()\ndf3.drop([\"gender\", \"parental level of education\", \"test preparation course\"], axis=1, inplace=True)\ndf3.head()","71584855":"def oneHotEncode(df, col):\n    df = df.copy()\n    dummies = pd.get_dummies(df[col])\n    df = pd.concat([df, dummies], axis =1)\n    df.drop(col, axis=1, inplace=True)\n    return df","59f077a0":"df3 = oneHotEncode(df3, \"race\/ethnicity\")\ndf3 = oneHotEncode(df3, \"lunch\")","332f741f":"df3.head()","a77598a2":"X1, y1 = splitData(df3, \"math score\")\nX2, y2 = splitData(df3, \"reading score\")\nX3, y3 = splitData(df3, \"writing score\")","86530540":"X_train, X_test, y_train, y_test = tr_ts_split(X1, y1)\ntrainModels(X_train, y_train)\nprint(\"\\n\")\ntestModels(X_test, y_test)","93404a6f":"X_train, X_test, y_train, y_test = tr_ts_split(X2, y2)\ntrainModels(X_train, y_train)\nprint(\"\\n\")\ntestModels(X_test, y_test)","2a18b96a":"X_train, X_test, y_train, y_test = tr_ts_split(X3, y3)\ntrainModels(X_train, y_train)\nprint(\"\\n\")\ntestModels(X_test, y_test)","c4368832":"# math model","d2026a22":"# models for writing score","e4fac028":"# Reading and writing scores can predict each other very well but are not so good for predicting math score","6caa66ec":"# models for math score","50fca997":"# Now we have to train our models 3 times as there are 3 cols whose value we wish to predict","05e0bdb7":"# From the above heatmap we can see the scores are positively correlated to each other.\n\n# So, we can use 2 score cols to find the value of another. We can also use race and lunch cols","53c88da4":"# writing model","a6d2cd8b":"# models for reading score","0be8cf12":"# We can also one hot encode race and lunch cols to see if it gives better results","da3e007a":"# The dataset contains multiple score columns so lets first encode the values using the label encoder and find the correlation ","6f1a3c17":"# Reading file and checking head","c288b878":"# reading model"}}