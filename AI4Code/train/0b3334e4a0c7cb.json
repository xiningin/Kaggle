{"cell_type":{"85f3e00b":"code","9d8bdf7b":"code","c45e63c6":"code","b32c919e":"code","775ea156":"code","bd68c942":"code","766221d6":"code","d4e59084":"code","896c4997":"code","eac4c8b8":"code","0143a387":"code","0d384760":"code","703f6c50":"code","982808a4":"code","6108fb0e":"code","9b0265de":"code","5b306a3d":"code","790b0713":"code","5fc51d35":"code","878398b6":"code","0cc3e945":"code","03108799":"code","aa77e5cd":"code","64148852":"code","fe4332de":"code","8fea9427":"code","66fea5cb":"code","ce1a830b":"code","9b1b3148":"code","b58807b7":"code","3f1c9036":"code","e024635b":"markdown","d562f403":"markdown","88be2997":"markdown","8bbaaba3":"markdown","b65b93b7":"markdown","4d33b440":"markdown","17864eef":"markdown","0268b285":"markdown","a74a6b05":"markdown","8a48fbf6":"markdown"},"source":{"85f3e00b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import rcParams\nimport statsmodels.api as sm\n\n%matplotlib inline","9d8bdf7b":"# Importing the dataframe\ndf = pd.read_csv('\/\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv', parse_dates = [\"date_time\"])\ndf.head()","c45e63c6":"# Viewing the information\ndf.info()","b32c919e":"# Describing the dataframe\ndf.describe().T","775ea156":"# Creating list of target and features\ntarget = [\"target_carbon_monoxide\", \"target_benzene\", \"target_nitrogen_oxides\"]\nsensor = ['sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']\nvalue = [\"target_carbon_monoxide\", \"target_benzene\", \"target_nitrogen_oxides\", 'sensor_1', 'sensor_2', \n         'sensor_3', 'sensor_4', 'sensor_5']\nhumid = [\"relative_humidity\",\"absolute_humidity\"]\ntemp_value = [\"target_carbon_monoxide\", \"target_benzene\", \"target_nitrogen_oxides\", \"deg_C\"]\nfeatures = [\"date_time\", 'deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_3',\n            'sensor_4', 'sensor_5']","bd68c942":"# Plotting the variation of gases with time\nfor t in target:\n    plt.figure(figsize = (20, 4))\n    plt.title(\"Variation of gases with time\")\n    sns.lineplot(data = df, x = \"date_time\", y = df[t])","766221d6":"# Pairplot\nsns.pairplot(df[target])\nplt.show()","d4e59084":"# Sensor 1 data for the gases and thier value over time\nfor t in target:\n    plt.figure(figsize = (20, 4))\n    plt.title(\"Variation gases according to sensor 1\")\n    sns.scatterplot(data = df, x = \"date_time\", hue = df[t], y = \"sensor_1\")","896c4997":"# Sensor value over time\n\nfor s in sensor:\n    plt.figure(figsize = (20, 4))\n    plt.title(\"Sensors value over time\")\n    sns.lineplot(data = df, x = \"date_time\", y = df[s])","eac4c8b8":"# Pair plot showing relationship between different sensors\nsns.pairplot(df[sensor],  diag_kind = \"hist\")\nplt.show()","0143a387":"# Correlation matrix shows how the sensor value relates with target \nseasonality_corr = df[value].corr()\n\nsns.clustermap(seasonality_corr, annot=True)\nplt.show();","0d384760":"# Humidity plot\nfor h in humid:\n    plt.figure(figsize = (20, 4))\n    plt.title(\"Humidity over time\")\n    sns.lineplot(data = df, x = \"date_time\", y = df[h])","703f6c50":"g = sns.pairplot(df[[\"relative_humidity\",\"absolute_humidity\"]], diag_kind = \"kde\")\ng.map_lower(sns.kdeplot, levels=3, color=\".2\")\ng.map_upper(sns.kdeplot, levels=3, color=\".2\")\n\nplt.show();","982808a4":"# Temperature variation with relative humidity\nplt.figure(figsize = (16, 4))\nsns.scatterplot(data = df, x = \"date_time\", y = \"deg_C\",  hue = \"relative_humidity\", \n                size = \"relative_humidity\")\nplt.title(\"Temperature variation over time\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Deg_C\");","6108fb0e":"# Temperature variation with target gases \n\ntemp_corr = df[temp_value].corr(method='pearson')\n\nsns.clustermap(temp_corr, annot=True)\nplt.show();","9b0265de":"df.set_index(\"date_time\", inplace = True)\ndf.head()","5b306a3d":"# Sesonality trend of different gases\nfor t in target:\n    plt.figure(figsize = (20, 4))\n    plt.title(t)\n    decomposition = sm.tsa.seasonal_decompose(df[t])\n    decomposition.seasonal.plot(color = \"#FFA07A\");","790b0713":"for t in target:\n    plt.figure(figsize = (20, 4))\n    plt.title(t)\n    decomposition = sm.tsa.seasonal_decompose(df[t])\n    decomposition.seasonal[\"2010-03-10\":\"2010-04-10\"].plot(color = \"LightCoral\");","5fc51d35":"seasonality_dict = {}\nfor t in df[target]:\n    decompositions = sm.tsa.seasonal_decompose(df[t])\n    seasonality_dict[t] = decompositions.seasonal\n\nrcParams[\"figure.figsize\"] = 16, 4\n    \npd.DataFrame(seasonality_dict)[\"2010-03-10\":\"2010-03-20\"].plot(subplots = True, layout = (3, 1));\n","878398b6":"trend_dict = {}\n\nfor ts in df[[\"target_carbon_monoxide\",\"target_benzene\", \"target_nitrogen_oxides\"]]:\n    decomposition = sm.tsa.seasonal_decompose(df[ts].dropna())\n    # Store back the results\n    trend_dict[ts] = decomposition.trend\n\nrcParams[\"figure.figsize\"] = 16, 4\npd.DataFrame(trend_dict).plot(subplots=True, layout=(3, 1));","0cc3e945":"residual_dict = {}\n\nfor ts in df[[\"target_carbon_monoxide\",\"target_benzene\", \"target_nitrogen_oxides\"]]:\n    decomposition = sm.tsa.seasonal_decompose(df[ts].dropna())\n    residual_dict[ts] = decomposition.resid\n\nrcParams[\"figure.figsize\"] = 16, 7\n\npd.DataFrame(residual_dict).plot(subplots=True, layout=(3, 1));","03108799":"X = df[['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1',\n       'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']]\ny = df[['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]","aa77e5cd":"y_CO = np.array(y.loc[:, list(y.columns)[0] ] )# first column for prediction\ny_benzene = np.array(y.loc[:, list(y.columns)[1] ] )\ny_NO2 = np.array(y.loc[:, list(y.columns)[2] ] )\n\ny = [y_CO, y_benzene, y_NO2]","64148852":"from lightgbm import LGBMRegressor\nfrom sklearn.model_selection import train_test_split\nimport math\nfrom sklearn.metrics import mean_squared_log_error as msle\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import r2_score\n\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y_CO , test_size=0.2, random_state=1)\nlgbm = LGBMRegressor()\nparams = {\n'num_leaves': [7, 14, 21, 28, 31, 50],\n'learning_rate': [0.1, 0.03, 0.003],\n'max_depth': [-1, 3, 5],\n'n_estimators': [50, 100, 200, 500],\n}\ngrid= GridSearchCV(estimator=lgbm, param_grid = params, cv = 2, n_jobs=-1)\ngrid.fit(X_train, y_train)\ny_pred = grid.predict(X_valid)\nscore = r2_score(y_valid, y_pred)\nprint(\" Results from Grid Search: \" )\nprint(\"-\" * 20)\nprint(\"\\n The best estimator across all searched parameters:\\n\", grid.best_estimator_)\nprint(\"\\n The best score across all searched parameters:\\n\", grid.best_score_)\nprint(\"\\n The best parameters across all searched parameters:\\n\", grid.best_params_)\nprint(\"\/n The r2 score is: \\n\", score)","fe4332de":"dict_compare = {\"y_pred\": y_pred, \"y_valid\": y_valid}\ndict_compare","8fea9427":"df_compare = pd.DataFrame({\"y_pred\": y_pred, \"y_valid\": y_valid})\ndf_compare","66fea5cb":"df_test = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv\", parse_dates = [\"date_time\"], index_col=\"date_time\")","ce1a830b":"columns = df_test.columns[1:]\nX = df[columns].values\nX_test = df_test[columns].values\n\n#Since we are to predict 3 targets so we are setting target 1,2,3\n#Reshaping otherwise it will throw an error\ntarget_CO = df['target_carbon_monoxide'].values.reshape(-1,1)\ntarget_benzene = df['target_benzene'].values.reshape(-1,1)\ntarget_NO2 = df['target_nitrogen_oxides'].values.reshape(-1,1)\n\nsub = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")\nsub.head()","9b1b3148":"lgbm = LGBMRegressor(learning_rate= 0.1, max_depth= 5, n_estimators= 500, num_leaves= 7)\n\nlgbm.fit(X, target_CO)\nsub['target_carbon_monoxide'] = lgbm.predict(X_test)\n\nlgbm.fit(X, target_benzene)\nsub['target_benzene'] = lgbm.predict(X_test)\n\nlgbm.fit(X, target_NO2)\nsub['target_nitrogen_oxides'] = lgbm.predict(X_test)\n\nsub.head()","b58807b7":"sub.to_csv('Final Submission LGBMBoost.csv', index=False)","3f1c9036":"sub.shape","e024635b":"Comparing humidity and temperature graph we can say that when humidity is more the corresponding value of temperature is less.","d562f403":"Value for benzene is in high correlation with the values of sensor 2.","88be2997":"The months of April and May have less value of humidity while those of rainy season ranging from June to September have high value of humidity.","8bbaaba3":"Please provide me with the suggestion to improve the above notebook. Also please upvote if you like the notebook.","b65b93b7":"From above we can say that there is no correlation between the temperature and target gases","4d33b440":"Levels show the distribution of the density","17864eef":"The y limits of all gases are different with nitogen oxide maximum. There is also the repetative pattern for all the gases.  ","0268b285":"The above graph is too much dense and we cannot see any seasonality trend. Thus in next graph we have taken only one month value","a74a6b05":"The histogram on the diagonal allows us to see the distribution of a single variable while the scatter plots on the upper and lower triangles show the relationship (or lack thereof) between two variables.","8a48fbf6":"From above graphs we can see that the concentration of nitrogen oxide has increased between November and December 2010. "}}