{"cell_type":{"a813b151":"code","719bbe97":"code","b08db150":"code","ca85e810":"code","6a04a23a":"code","0c1db97e":"code","3fa1d7bc":"code","f7f473fe":"code","c8822606":"code","e1077d50":"code","4afc41fb":"code","f4a2d91d":"code","89020e19":"markdown","d61fb2e2":"markdown","6954cf1e":"markdown","fd749c10":"markdown","d6ab7032":"markdown","9e0b34a7":"markdown","c2d3ccc7":"markdown","785eff3c":"markdown","f5188005":"markdown","7b5e70b4":"markdown","11a68279":"markdown","d6db1856":"markdown","784b5b37":"markdown"},"source":{"a813b151":"import tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.regularizers import l2","719bbe97":"import os\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\ndef auto_select_accelerator():\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"Running on TPU:\", tpu.master())\n    except ValueError:\n        strategy = tf.distribute.get_strategy()\n    print(f\"Running on {strategy.num_replicas_in_sync} replicas\")\n\n    return strategy","b08db150":"#checking the GPU we got from the Kaggle Kernal\n!nvidia-smi\n\n\n\n#checking the Tensorflow Version\ntf.__version__","ca85e810":"# Preprocessing the Training set\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)","6a04a23a":"training_set = train_datagen.flow_from_directory('..\/input\/tomatoleaf\/tomato\/train',\n                                                 target_size = (224, 224),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')\n\n# Preprocessing the Test set\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_set = test_datagen.flow_from_directory('..\/input\/tomatoleaf\/tomato\/val',\n                                            target_size = (224, 224),\n                                            batch_size = 32,\n                                            class_mode = 'categorical')","0c1db97e":"svm = tf.keras.models.Sequential()\n\n# Step 1 - Convolution\nsvm.add(tf.keras.layers.Conv2D(filters=32,padding=\"same\",kernel_size=3, activation='relu', strides=2, input_shape=[224, 224, 3]))\n\n# Step 2 - Pooling\nsvm.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))\n\n# Adding a second convolutional layer\nsvm.add(tf.keras.layers.Conv2D(filters=32,padding='same',kernel_size=3, activation='relu'))\nsvm.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))\n\n# Step 3 - Flattening\nsvm.add(tf.keras.layers.Flatten())\n\n# Step 4 - Full Connection\nsvm.add(tf.keras.layers.Dense(units=128, activation='relu'))\n\nsvm.add(Dense(10, kernel_regularizer=tf.keras.regularizers.l2(0.01),activation\n             ='softmax'))\nsvm.compile(optimizer = 'adam', loss = 'squared_hinge', metrics = ['accuracy'])\n\n\nsvm.summary()","3fa1d7bc":"svm.compile(optimizer = 'adam', loss = 'squared_hinge', metrics = ['accuracy'])\nr=svm.fit(x = training_set, validation_data = test_set, epochs = 10)","f7f473fe":"import matplotlib.pyplot as plt\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","c8822606":"from tensorflow.keras.models import load_model\n\nsvm.save('SVM_Tomatoleaf.h5')","e1077d50":"from tensorflow.keras.models import load_model\nmodel = load_model('SVM_Tomatoleaf.h5')","4afc41fb":"model.summary()","f4a2d91d":"\nimport numpy as np\nfrom tensorflow.keras.preprocessing import image\ntest_image = image.load_img('..\/input\/tomatoleaf\/tomato\/train\/Tomato___Early_blight\/0114f7b3-7f56-4bef-aa47-7a82da142d4b___RS_Erly.B 7437.JPG', target_size = (224,224))\ntest_image = image.img_to_array(test_image)\ntest_image=test_image\/255\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = svm.predict(test_image)\nresult","89020e19":"**Creating the Support Vector Machine Network**","d61fb2e2":"**Hyper Paramters**","6954cf1e":"**Support Vector Machine Math Concept**\n\nIn this Algorithm will divided the bounderies from the Realted Class Folders and it automatically created an Best fit Line Boundary with the 10 circle bounderies\n\n![Math_Concept](https:\/\/miro.medium.com\/max\/1838\/1*6mcff3dEDuTFT21IvlL1_Q.jpeg)","fd749c10":"In Generally Support Vector Machine is an **complex Algorithm** to spliting the margin amaong the Best Fit Line among from the both class side it make the Bounder Line which classiifer the Boundary of an classes it can spaced from the various distance from the Best Fit Line ","d6ab7032":"**Pre-Processing the Data**","9e0b34a7":"**Auto Selection of Accelerator (CPU \/ GPU \/ TPU)**","c2d3ccc7":"**Import the Requirement Lib**","785eff3c":"**Testing the Model**","f5188005":"**Loading the model**","7b5e70b4":"**Accuracy Graphs**","11a68279":"**Optimizer and Loss Function**","d6db1856":"Let I explain Clearly with an Example:\n\n\nWe are know countiers are divided by the border and convert the boundies areas are called as Country from each side of the Line. That the boundary line is called **Line of Control(LOC)** in Army.At the Same way in AI Support Vector Machine Algorithm can divided the classes from the Center of an boundary line in Dataset \n\n\n![Border](https:\/\/i.insider.com\/5d3b140e100a2446f022ca82?width=700)","784b5b37":"**Support Vector Machine in Neural Network for Image Classification**\n\n![SVM](https:\/\/www.analyticssteps.com\/backend\/media\/thumbnail\/338466\/8680904_1588569086_SVM.jpg)\n\n\n\nMore formally, a support-vector machine constructs a hyperplane or set of hyperplanes in a high- or infinite-dimensional space, which can be used for classification, regression, or other tasks like outliers detection.Intuitively, a good separation is achieved by the hyperplane that has the largest distance to the nearest training-data point of any class (so-called functional margin), since in general the larger the margin, the lower the generalization error of the classifier"}}