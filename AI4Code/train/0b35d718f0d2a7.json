{"cell_type":{"170ee26c":"code","739fe3a0":"code","c4fb2463":"code","f5b1df21":"code","bfc5697f":"code","a0d5dc04":"code","71f2f76a":"code","04142bad":"code","bc4a05dc":"code","94412c0c":"code","185488c3":"code","8dfd3e99":"code","2c568882":"code","b62f3f49":"code","225f2c92":"code","0cfb671d":"code","6a650220":"code","096c8a02":"code","373adfe1":"code","269cbf91":"code","a6588831":"code","1b6ad7cb":"code","a33293fc":"code","7a279c89":"code","534aa624":"code","43ad3dd9":"code","712fb167":"code","0d9a80ce":"code","9a936de0":"code","e6adbcfb":"code","2549a5ad":"code","44056a1d":"code","ac2b3088":"code","2447fd4a":"code","e52ac867":"code","184bdd93":"code","dca96e55":"code","c45c54d7":"code","e9522f83":"code","6a0cafed":"markdown","8331d623":"markdown","60cc958c":"markdown","39f662c6":"markdown","b4c30c99":"markdown","5f78d264":"markdown","6e325463":"markdown","528658ea":"markdown","7b291951":"markdown","e63067e8":"markdown","74dd6a0c":"markdown","b75d6d5f":"markdown","8748876e":"markdown","a2943f3f":"markdown","97c6d10d":"markdown"},"source":{"170ee26c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_log_error, mean_absolute_error\nfrom sklearn.model_selection import RandomizedSearchCV","739fe3a0":"df = pd.read_csv('..\/input\/bluebook-for-bulldozers\/TrainAndValid.csv')\ndf.head()","c4fb2463":"df.info()","f5b1df21":"df = pd.read_csv('..\/input\/bluebook-for-bulldozers\/TrainAndValid.csv',low_memory = False,parse_dates = ['saledate'])","bfc5697f":"df.head().T","a0d5dc04":"df.sort_values(by = ['saledate'],inplace = True,ascending = True)\ndf.saledate","71f2f76a":"df['SaleYear'] = df.saledate.dt.year\ndf['SaleMonth'] = df.saledate.dt.month\ndf['SaleDay'] = df.saledate.dt.day\ndf['SaleDayOfWeek'] = df.saledate.dt.dayofweek\ndf['SaleDayOfyear'] = df.saledate.dt.dayofyear","04142bad":"df.head().T","bc4a05dc":"df = df.drop('saledate',axis = 1)","94412c0c":"sns.distplot(df.SalePrice)","185488c3":"df.info()","8dfd3e99":"max_cardinality = 100\nhigh_cardinality = [col for col in df.select_dtypes(exclude=np.number)\n                   if df[col].nunique() > max_cardinality]\ndf = df.drop(columns=high_cardinality)\ndf.info()","2c568882":"corr = df.corr()\ncorr","b62f3f49":"for label,content in df.items():\n    if pd.api.types.is_string_dtype(content):\n        print(label)","225f2c92":"for label, content in df.items():\n    if pd.api.types.is_string_dtype(content):\n        df[label] = content.astype('category').cat.as_ordered()\n        df[label] = pd.Categorical(content).codes+1","0cfb671d":"df.info()","6a650220":"for label,content in df.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isna(content).sum():\n            print(label)","096c8a02":"for label,content in df.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isna(content).sum():\n            df[label] = content.fillna(content.median())","373adfe1":"df.info()","269cbf91":"df.isna().sum()","a6588831":"val_df = df[df.SaleYear == 2012]\ntrain_df = df[df.SaleYear != 2012]","1b6ad7cb":"x_train = train_df.drop('SalePrice',axis = 1)\ny_train = train_df['SalePrice']\nx_valid = val_df.drop('SalePrice',axis = 1)\ny_valid = val_df['SalePrice']","a33293fc":"x_train.shape, y_train.shape, x_valid.shape, y_valid.shape","7a279c89":"def rmsle(y_test,y_preds):\n    return np.sqrt(mean_squared_log_error(y_test,y_preds))\n\ndef scores(model):\n    train_preds = model.predict(x_train)\n    val_preds = model.predict(x_valid)\n    scores = {\"Training MAE\": mean_absolute_error(y_train, train_preds),\n              \"Valid MAE\": mean_absolute_error(y_valid, val_preds),\n              \"Training RMSLE\": rmsle(y_train, train_preds),\n              \"Valid RMSLE\": rmsle(y_valid, val_preds),\n              \"Training R^2\": model.score(x_train, y_train),\n              \"Valid R^2\": model.score(x_valid, y_valid)}\n    return scores","534aa624":"%%time\nmodel = RandomForestRegressor(n_jobs = -1,\n                              random_state = 42)\nmodel.fit(x_train,y_train)","43ad3dd9":"scores(model)","712fb167":"%%time\n\ngrid = {\"n_estimators\": np.arange(10, 100, 10),\n           \"max_depth\": [None, 3, 5, 10,15,20],\n           \"min_samples_split\": np.arange(2, 20, 2),\n           \"min_samples_leaf\": np.arange(1, 20, 2),\n           \"max_features\": [0.5, 1, \"sqrt\", \"auto\"],\n           \"max_samples\": [20000]}\n\nmodel1 = RandomizedSearchCV(RandomForestRegressor(),\n                              param_distributions= grid,\n                              n_iter=40,\n                              cv=5,\n                              verbose=True)\n\nmodel1.fit(x_train, y_train)","0d9a80ce":"scores(model1)","9a936de0":"model1.best_params_","e6adbcfb":"%%time\n\ntuned_model = RandomForestRegressor(n_estimators=60,\n                                    min_samples_leaf=1,\n                                    min_samples_split=12,\n                                    max_features=0.5,\n                                    n_jobs=-1)\ntuned_model.fit(x_train, y_train)","2549a5ad":"scores(tuned_model)","44056a1d":"Test_data = pd.read_csv('..\/input\/bluebook-for-bulldozers\/Test.csv',parse_dates = ['saledate'])\nTest_data.head()","ac2b3088":"def processed_data(df):\n    df['SaleYear'] = df.saledate.dt.year\n    df['SaleMonth'] = df.saledate.dt.month\n    df[\"SaleDay\"] = df.saledate.dt.day\n    df[\"SaleDayOfWeek\"] = df.saledate.dt.dayofweek\n    df[\"SaleDayOfyear\"] = df.saledate.dt.dayofyear\n    \n    df.drop(\"saledate\", axis=1, inplace=True)\n    \n    for label,content in df.items():\n        if pd.api.types.is_numeric_dtype(content):\n            if pd.isna(content).sum():\n                df[label] = content.fillna(content.median())\n                \n        if not pd.api.types.is_numeric_dtype(content):\n            df[label] = content.astype('category').cat.as_ordered()\n            df[label] = pd.Categorical(content).codes+1\n            \n    return df     \n","2447fd4a":"processed_data(Test_data)","e52ac867":"max_cardinality = 100\nhigh_cardinality = [col for col in Test_DF.select_dtypes(exclude=np.number)\n                   if Test_DF[col].nunique() > max_cardinality]\nTest_DF = Test_DF.drop(columns=high_cardinality)\nTest_DF.info()","184bdd93":"set(Test_data.columns)-set(x_train.columns)","dca96e55":"Test_data = Test_data.drop(['fiBaseModel','fiModelDesc','fiModelDescriptor','fiModelSeries','fiSecondaryDesc'],axis = 1)","c45c54d7":"test_preds = tuned_model.predict(Test_data)","e9522f83":"sub = pd.DataFrame()\nsub[\"SalesID\"] = Test_data[\"SalesID\"]\nsub[\"SalePrice\"] = test_preds\nsub","6a0cafed":"# Splitting the data as required ","8331d623":"# plz Upvote!!! If You Like This Kernal.","60cc958c":"# Predicting on test data","39f662c6":"# Loading the Data","b4c30c99":"# Model","5f78d264":"# Changing the date Format","6e325463":"# Basic Preprocessing\n* Changing the data format to numeric type\n* Dealing with missing values","528658ea":"# making in same format as required","7b291951":"# Preprocessing\nIn the same format as training data","e63067e8":"# Training model with best Parameters","74dd6a0c":"# Loading The test data set","b75d6d5f":"# Hyperparameter tuning with RandomizedSearchCV","8748876e":"# Building an scoring Fuction","a2943f3f":"# Adding few date related columns ","97c6d10d":"## Dropping the columns with many unique categories"}}