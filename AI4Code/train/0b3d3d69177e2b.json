{"cell_type":{"a7c8b48f":"code","936bc957":"code","e06cb0c4":"code","72afd4f6":"code","7b51ef64":"markdown","275f639a":"markdown","ee22b1d9":"markdown"},"source":{"a7c8b48f":"!pip install git+https:\/\/github.com\/EasyArray\/phosphorus#egg=phosphorus\n\n%load_ext phosphorus","936bc957":"map(len, \u27e8\u27e8\u27e9, \u27e81\u27e9, \u27e81,2\u27e9, \u27e81,2,3\u27e9\u27e9)\nfilter(len, \u27e8\u27e8\u27e9, \u27e81\u27e9, \u27e81,2\u27e9, \u27e81,2,3\u27e9\u27e9)","e06cb0c4":"[\u03bbn . n+1](2)\n[\u03bbn . n+1](3)\n[\u03bbn . n>5](4)\n[\u03bbn . n>5](5)\n\nmap([\u03bbn . n+1], {1..10})\nfilter([\u03bbn.n>5], {1..10})","72afd4f6":"x = 1\nx\nx = \u27e8\u27e81\u27e9, \u27e81,2\u27e9, \u27e81,2,3\u27e9\u27e9\nx\n\"-------------------------------------\"\nset1 = {{1}, {1,2}, {1,2,3}}\nset1\nset2 = {{1..n} | n\u2208{1..3}}\nset2\nset1==set2\n\"-------------------------------------\"\nmap(len, \u27e8\u27e81..n\u27e9 | n\u2208\u27e81..20\u27e9\u27e9)\nmap([\u03bbt . t[2:5]], \u27e8\u27e81..n\u27e9 | n\u2208\u27e81..20\u27e9\u27e9)\n","7b51ef64":"### Variables & Comprehensions\n\nPhosphorus allows any constant to act as a variable. You may set (and reset) a constant to any value, or use one in *\u03bb expressions* as shown above, and also  *set* and *list comprehensions*, described below.\n\nSet and list comprehensions use a variable to create a bunch of values at once. The values come from a *generator* consisting of the variable, `\u2208`, and a list or set. These values are fed into the value expression like `{1..n}` in set2 below.\n\n\ud83e\udd14 How would you describe the comprehension `{{1..n} | n\u2208{1..3}}` in words?","275f639a":"# Higher Order Functions\n\nSometimes you want a function to take another function as its argument. Two simple examples are the `map` and `filter` functions. Notes:\n* `map` applies the same function to each item in a list or set and collects the answers in a new list or set.\n* `filter` returns only those items of a list or set that return true for the given function.\n* Since `0` counts as false (and anything else is true), `len` effectively means \"has a nonzero length\" in this situation.","ee22b1d9":"### Functions on the Fly\n\nYou can create your own functions on the fly using *lambda notation*. In brackets (or parentheses) write a lambda by entering `\\lambda` plus tab. Next give a name to your input, like `n`, followed by a period `.`. Finally, write an expression for the output of the function like `n+1`, which adds one to the input."}}