{"cell_type":{"f7b0dd18":"code","64e0f034":"code","c0ed8c7a":"code","a253d2b9":"code","6f50f196":"code","34641d5c":"code","bc78996f":"code","340328e1":"code","93f4cd00":"code","99929c4d":"code","3795b1c7":"code","f97280b7":"code","1c1ab435":"code","8fbde6fa":"code","28bfe382":"code","b4a2a916":"code","2fe879f6":"code","24f31124":"code","218b6af3":"code","ad7e5369":"code","767eb2ae":"code","d87e0c53":"code","4c9f3569":"code","ac8c237c":"code","8aacde81":"code","35830201":"code","d7f61806":"code","642acd38":"markdown","e0397b33":"markdown","afa0b715":"markdown","fae4383f":"markdown","25a2ad85":"markdown","bcfed0ab":"markdown","f072a852":"markdown","9b46055d":"markdown","96d79acb":"markdown","0433643b":"markdown","f5b61165":"markdown","131d083c":"markdown","0b9565be":"markdown","7861d480":"markdown","11aebc54":"markdown","706baff8":"markdown","89ca0bad":"markdown","cc648aaa":"markdown","60e6b812":"markdown","7f269e77":"markdown","5dc0ce50":"markdown","40165c8c":"markdown","8b56bcd9":"markdown"},"source":{"f7b0dd18":"# TensorFlow and tf.keras\nimport tensorflow as tf\n\n# Helper libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nprint(tf.__version__)","64e0f034":"fashion_mnist = tf.keras.datasets.fashion_mnist\n\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()","c0ed8c7a":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","a253d2b9":"train_images.shape","6f50f196":"len(train_labels)","34641d5c":"train_labels","bc78996f":"test_images.shape","340328e1":"len(test_labels)","93f4cd00":"plt.figure()\nplt.imshow(train_images[0])\nplt.colorbar()\nplt.grid(False)\nplt.show()","99929c4d":"train_images = train_images \/ 255.0\n\ntest_images = test_images \/ 255.0","3795b1c7":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i], cmap=plt.cm.binary)\n    plt.xlabel(class_names[train_labels[i]])\nplt.show()","f97280b7":"model = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10)\n])","1c1ab435":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","8fbde6fa":"model.fit(train_images, train_labels, epochs=10)","28bfe382":"test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)\n\nprint('\\nTest accuracy:', test_acc)","b4a2a916":"probability_model = tf.keras.Sequential([model, \n                                         tf.keras.layers.Softmax()])","2fe879f6":"predictions = probability_model.predict(test_images)","24f31124":"predictions[0]","218b6af3":"test_labels[0]","ad7e5369":"def plot_image(i, predictions_array, true_label, img):\n  true_label, img = true_label[i], img[i]\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n\n  plt.imshow(img, cmap=plt.cm.binary)\n\n  predicted_label = np.argmax(predictions_array)\n  if predicted_label == true_label:\n    color = 'blue'\n  else:\n    color = 'red'\n\n  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                100*np.max(predictions_array),\n                                class_names[true_label]),\n                                color=color)\n\ndef plot_value_array(i, predictions_array, true_label):\n  true_label = true_label[i]\n  plt.grid(False)\n  plt.xticks(range(10))\n  plt.yticks([])\n  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n  plt.ylim([0, 1])\n  predicted_label = np.argmax(predictions_array)\n\n  thisplot[predicted_label].set_color('red')\n  thisplot[true_label].set_color('blue')","767eb2ae":"i = 0\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions[i], test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions[i],  test_labels)\nplt.show()","d87e0c53":"i = 12\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions[i], test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions[i],  test_labels)\nplt.show()","4c9f3569":"# Plot the first X test images, their predicted labels, and the true labels.\n# Color correct predictions in blue and incorrect predictions in red.\nnum_rows = 5\nnum_cols = 3\nnum_images = num_rows*num_cols\nplt.figure(figsize=(2*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n  plot_image(i, predictions[i], test_labels, test_images)\n  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n  plot_value_array(i, predictions[i], test_labels)\nplt.tight_layout()\nplt.show()","ac8c237c":"# Grab an image from the test dataset.\nimg = test_images[1]\n\nprint(img.shape)","8aacde81":"# Add the image to a batch where it's the only member.\nimg = (np.expand_dims(img,0))\n\nprint(img.shape)","35830201":"predictions_single = probability_model.predict(img)\n\nprint(predictions_single)","d7f61806":"plot_value_array(1, predictions_single[0], test_labels)\n_ = plt.xticks(range(10), class_names, rotation=45)","642acd38":"# Was this page helpful? so please upvote this work :) ","e0397b33":"Likewise, there are 60,000 labels in the training set:","afa0b715":"## Verify predictions\nWith the model trained, you can use it to make predictions about some images.\n\nLet's look at the 0th image, predictions, and prediction array. Correct prediction labels are blue and incorrect prediction labels are red. The number gives the percentage (out of 100) for the predicted label.","fae4383f":"A prediction is an array of 10 numbers. They represent the model's \"confidence\" that the image corresponds to each of the 10 different articles of clothing. You can see which label has the highest confidence value:","25a2ad85":"## Evaluate accuracy\nNext, compare how the model performs on the test dataset:","bcfed0ab":"There are 10,000 images in the test set. Again, each image is represented as 28 x 28 pixels:","f072a852":"## Use the trained model\nFinally, use the trained model to make a prediction about a single image.","9b46055d":"Each label is an integer between 0 and 9:","96d79acb":"Here, the model has predicted the label for each image in the testing set. Let's take a look at the first prediction:","0433643b":"And the test set contains 10,000 images labels:","f5b61165":"Graph this to look at the full set of 10 class predictions.","131d083c":"## Build the model\n\nBuilding the neural network requires configuring the layers of the model, then compiling the model.\n\n### Set up the layers\nThe basic building block of a neural network is the layer. Layers extract representations from the data fed into them. Hopefully, these representations are meaningful for the problem at hand.\n\nMost of deep learning consists of chaining together simple layers. Most layers, such as tf.keras.layers.Dense, have parameters that are learned during training.","0b9565be":"## Import the Fashion MNIST dataset\n#### This guide uses the Fashion MNIST dataset which contains 70,000 grayscale images in 10 categories. The images show individual articles of clothing at low resolution (28 by 28 pixels)\n\n#### Fashion MNIST is intended as a drop-in replacement for the classic MNIST dataset\u2014often used as the \"Hello, World\" of machine learning programs for computer vision. The MNIST dataset contains images of handwritten digits (0, 1, 2, etc.) in a format identical to that of the articles of clothing you'll use here.\n\n#### This guide uses Fashion MNIST for variety, and because it's a slightly more challenging problem than regular MNIST. Both datasets are relatively small and are used to verify that an algorithm works as expected. They're good starting points to test and debug code.\n\n#### Here, 60,000 images are used to train the network and 10,000 images to evaluate how accurately the network learned to classify images. You can access the Fashion MNIST directly from TensorFlow. Import and load the Fashion MNIST data directly from TensorFlow:","7861d480":"The first layer in this network, tf.keras.layers.Flatten, transforms the format of the images from a two-dimensional array (of 28 by 28 pixels) to a one-dimensional array (of 28 * 28 = 784 pixels). Think of this layer as unstacking rows of pixels in the image and lining them up. This layer has no parameters to learn; it only reformats the data.\n\nAfter the pixels are flattened, the network consists of a sequence of two tf.keras.layers.Dense layers. These are densely connected, or fully connected, neural layers. The first Dense layer has 128 nodes (or neurons). The second (and last) layer returns a logits array with length of 10. Each node contains a score that indicates the current image belongs to one of the 10 classes.\n\nCompile the model\nBefore the model is ready for training, it needs a few more settings. These are added during the model's compile step:\n\nLoss function \u2014This measures how accurate the model is during training. You want to minimize this function to \"steer\" the model in the right direction.\nOptimizer \u2014This is how the model is updated based on the data it sees and its loss function.\nMetrics \u2014Used to monitor the training and testing steps. The following example uses accuracy, the fraction of the images that are correctly classified.","11aebc54":"Each image is mapped to a single label. Since the class names are not included with the dataset, store them here to use later when plotting the images:","706baff8":"## Explore the data\n#### Let's explore the format of the dataset before training the model. The following shows there are 60,000 images in the training set, with each image represented as 28 x 28 pixels:","89ca0bad":"## Make predictions\nWith the model trained, you can use it to make predictions about some images. The model's linear outputs, logits. Attach a softmax layer to convert the logits to probabilities, which are easier to interpret.","cc648aaa":"## Train the model\nTraining the neural network model requires the following steps:\n\n* Feed the training data to the model. In this example, the training data is in the train_images and train_labels arrays.\n* The model learns to associate images and labels.\n* You ask the model to make predictions about a test set\u2014in this example, the test_images array.\n* Verify that the predictions match the labels from the test_labels array.\n\n### Feed the model\n\nTo start training, call the model.fit method\u2014so called because it \"fits\" the model to the training data:","60e6b812":"### Loading the dataset returns four NumPy arrays:\n\n#### The train_images and train_labels arrays are the training set\u2014the data the model uses to learn.\n#### The model is tested against the test set, the test_images, and test_labels arrays.\n#### The images are 28x28 NumPy arrays, with pixel values ranging from 0 to 255. The labels are an array of integers, ranging from 0 to 9. These correspond to the class of clothing the image represents:\n","7f269e77":"Let's plot several images with their predictions. Note that the model can be wrong even when very confident.","5dc0ce50":"# Basic classification: Classify images of clothing\n### This guide trains a neural network model to classify images of clothing, like sneakers and shirts. It's okay if you don't understand all the details; this is a fast-paced overview of a complete TensorFlow program with the details explained as you go.\n![](https:\/\/www.tensorflow.org\/images\/fashion-mnist-sprite.png)","40165c8c":"Scale these values to a range of 0 to 1 before feeding them to the neural network model. To do so, divide the values by 255. It's important that the training set and the testing set be preprocessed in the same way:\n\nTo verify that the data is in the correct format and that you're ready to build and train the network, let's display the first 25 images from the training set and display the class name below each image.","8b56bcd9":"## Preprocess the data\n#### The data must be preprocessed before training the network. If you inspect the first image in the training set, you will see that the pixel values fall in the range of 0 to 255:"}}