{"cell_type":{"a3f732ab":"code","0e99e313":"code","a05339f9":"code","4015a512":"code","902a60ba":"code","4216e810":"code","993e7cc9":"code","fc4726ec":"code","741f9fe5":"code","39f3d055":"code","0a169355":"code","1550568e":"code","0f3d1573":"code","64ca99a9":"code","a915264d":"code","5c34852f":"code","b11770fd":"code","b5867408":"code","b6b99b9a":"code","981d06ed":"code","0a38b738":"code","fa84762e":"code","77fdea3c":"code","631cdeda":"code","99271604":"code","2d434746":"code","5f4a2cc0":"code","52b594eb":"code","2def8ea3":"code","460b80c2":"code","60a476a6":"code","d8d082be":"code","a41eba15":"code","de48d042":"code","3f9bdfad":"code","a596d96b":"code","58a58d13":"code","8b0dd1e0":"markdown","5528b22c":"markdown","40e0607d":"markdown","03b86103":"markdown","29364275":"markdown","c660de93":"markdown","de9d98c8":"markdown","fcc7b417":"markdown","31f68939":"markdown"},"source":{"a3f732ab":"import requests, pandas as pd, numpy as np\nfrom bs4 import BeautifulSoup","0e99e313":"train=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv')\ncountry_state = train[['Province_State', 'Country_Region']].drop_duplicates().reset_index(drop = True)\ndel train\ncountry_state.head()","a05339f9":"country_state[~country_state.Province_State.isna()].Country_Region.drop_duplicates()","4015a512":"countries = list(country_state.Country_Region.drop_duplicates())","902a60ba":"url = 'https:\/\/en.wikipedia.org\/wiki\/List_of_countries_and_dependencies_by_population_density'\nhtml_text = requests.get(url).text\nsoup = BeautifulSoup(html_text, 'html.parser').findAll('td')","4216e810":"cols = ['country', 'state', 'density'] # people \/ km2\ndf_WD = pd.DataFrame(columns = cols)","993e7cc9":"ix = 0\nfor ii in range(len(soup)):\n    try:\n        country = soup[ii].findAll('a')[0].text\n    except:\n        country = 'none'\n    \n    if country in countries:\n        df_WD.loc[ix, 'country'] = country\n        df_WD.loc[ix, 'density'] = soup[ii + 4].text[:-1]\n        ix += 1\n\ndel soup\ndf_WD = df_WD.reset_index(drop = True)","fc4726ec":"df_WD.density = df_WD.density.str.replace(\",\",\"\").astype(float)\ndf_WD.head()","741f9fe5":"states = list(country_state[country_state.Country_Region=='US'].Province_State)","39f3d055":"url = 'https:\/\/en.wikipedia.org\/wiki\/List_of_states_and_territories_of_the_United_States_by_population_density'\nhtml_text = requests.get(url).text\nsoup = BeautifulSoup(html_text, 'html.parser').findAll('td')","0a169355":"cols = ['country', 'state', 'density'] # people \/ km2\ndf_US = pd.DataFrame(columns = cols)","1550568e":"ix = 0\nfor ii in range(len(soup)):\n    try:\n        state = soup[ii].findAll('a')[0].text\n    except:\n        state = 'none'\n    \n    if state in states:\n        df_US.loc[ix, 'state'] = state\n        df_US.loc[ix, 'density'] = soup[ii + 4].text[:-1]\n        ix += 1\n\ndel soup\ndf_US.country = 'US'\ndf_US = df_US.reset_index(drop = True)\n","0f3d1573":"df_US = df_US.iloc[0:53]\ndf_US.density = df_US.density.astype(float)\ndf_US.head()","64ca99a9":"states = list(country_state[country_state.Country_Region=='Australia'].Province_State)","a915264d":"url = 'https:\/\/en.wikipedia.org\/wiki\/States_and_territories_of_Australia'\nhtml_text = requests.get(url).text\nsoup = BeautifulSoup(html_text, 'html.parser').findAll('td')","5c34852f":"cols = ['country', 'state', 'population', 'area']\ndf_AU = pd.DataFrame(columns = cols)","b11770fd":"ix = 0\nfor ii in range(len(soup)):\n    try:\n        state = soup[ii].text\n    except:\n        state = 'none'\n    \n    if state in states:\n        shift = (state in ['Australian Capital Territory', 'Northern Territory'])\n        df_AU.loc[ix, 'state'] = state\n        df_AU.loc[ix, 'population'] = soup[ii + 4 + shift].text\n        df_AU.loc[ix, 'area'] = soup[ii + 5 + shift].text[:-1]\n        ix += 1\n\ndel soup\ndf_AU.country = 'Australia'\ndf_AU = df_AU.reset_index(drop = True)","b5867408":"df_AU.population = df_AU.population.str.replace(\",\",\"\").astype(float)\ndf_AU.area = df_AU.area.str.replace(\",\",\"\").astype(float)\ndf_AU['density'] = df_AU.population \/ df_AU.area\ndf_AU = df_AU.drop(columns = ['population', 'area'])","b6b99b9a":"df_AU.head()","981d06ed":"states = list(country_state[country_state.Country_Region=='Canada'].Province_State)","0a38b738":"url = 'https:\/\/en.wikipedia.org\/wiki\/Population_of_Canada_by_province_and_territory'\nhtml_text = requests.get(url).text\nsoup = BeautifulSoup(html_text, 'html.parser').findAll('td')","fa84762e":"cols = ['country', 'state', 'density']\ndf_CA = pd.DataFrame(columns = cols)","77fdea3c":"ix = 0\nfor ii in range(len(soup)):\n    try:\n        state = soup[ii].findAll('a')[0].text\n    except:\n        state = 'none'\n    \n    if state in states:\n        df_CA.loc[ix, 'state'] = state\n        df_CA.loc[ix, 'density'] = soup[ii + 5].text[:-1]\n        ix += 1\n\ndel soup\ndf_CA.country = 'Canada'\ndf_CA = df_CA.reset_index(drop = True)","631cdeda":"df_CA = df_CA.iloc[0:10]\ndf_CA.density = df_CA.density.str.replace(\",\",\"\").astype(float)\ndf_CA.head()","99271604":"states = list(country_state[country_state.Country_Region=='China'].Province_State)","2d434746":"url = 'https:\/\/en.wikipedia.org\/wiki\/Provinces_of_China'\nhtml_text = requests.get(url).text\nsoup = BeautifulSoup(html_text, 'html.parser').findAll('td')","5f4a2cc0":"cols = ['country', 'state', 'density']\ndf_CH = pd.DataFrame(columns = cols)","52b594eb":"suffix = ['Province', 'Municipality', 'Autonomous Region', 'Administrative Region']\n\nix = 0\n\nfor ii in range(len(soup)):\n    try:\n        state = soup[ii].findAll('a')[0].text\n        if any(x in state for x in suffix):\n            if 'Hong Kong' in state:\n                state = 'Hong Kong'\n            elif 'Inner Mongolia' in state:\n                state = 'Inner Mongolia'\n            else:\n                state = state[0:state.index(' ')]\n    except:\n        state = 'none'\n    \n    if state in states:\n        df_CH.loc[ix, 'state'] = state\n        df_CH.loc[ix, 'density'] = soup[ii + 4].text[:-1]\n        ix += 1\n\ndel soup\ndf_CH.country = 'China'\ndf_CH = df_CH.reset_index(drop = True)","2def8ea3":"df_CH = df_CH.iloc[2:35]\ndf_CH.density = df_CH.density.str.replace(\",\",\"\").astype(float)\ndf_CH.head()","460b80c2":"states = list(country_state[country_state.Country_Region=='France'].Province_State)","60a476a6":"url = 'https:\/\/en.wikipedia.org\/wiki\/Overseas_France'\nhtml_text = requests.get(url).text\nsoup = BeautifulSoup(html_text, 'html.parser').findAll('td')","d8d082be":"cols = ['country', 'state', 'density']\ndf_FR = pd.DataFrame(columns = cols)","a41eba15":"ix = 0\nfor ii in range(len(soup)):\n    try:\n        state = soup[ii].findAll('a')[0].text\n    except:\n        state = 'none'\n    \n    if state in states:\n        df_FR.loc[ix, 'state'] = state\n        df_FR.loc[ix, 'density'] = soup[ii + 4].text[:-1]\n        ix += 1\n\ndel soup\ndf_FR.country = 'France'\ndf_FR = df_FR.reset_index(drop = True)","de48d042":"df_FR = df_FR.iloc[0:6]\ndf_FR.density = df_FR.density.str.replace(\",\",\"\").astype(float)\ndf_FR","3f9bdfad":"df = df_WD.append(df_US).append(df_AU).append(df_CA).append(df_CH).append(df_FR)","a596d96b":"df = df.reset_index(drop = True)\ndf","58a58d13":"df.to_csv('population_densities.csv')","8b0dd1e0":"## Combine","5528b22c":"## Scrape Australia","40e0607d":"## Scrape USA","03b86103":"## Countries with states\/ provinces","29364275":"## Scrape Canada","c660de93":"## Scrape countries without states\/ provinces first","de9d98c8":"## Scrape France","fcc7b417":"# Population Densities\n\nHere we scrape some population densities for the countries\/ states in the train set\n\n### Sources\n\nWorld (countries with no states)\nhttps:\/\/en.wikipedia.org\/wiki\/List_of_countries_and_dependencies_by_population_density\n\nUSA\nhttps:\/\/en.wikipedia.org\/wiki\/List_of_states_and_territories_of_the_United_States_by_population_density\n\nAustralia\nhttps:\/\/en.wikipedia.org\/wiki\/States_and_territories_of_Australia\n\nCanada\nhttps:\/\/en.wikipedia.org\/wiki\/Population_of_Canada_by_province_and_territory\n\nChina\nhttps:\/\/en.wikipedia.org\/wiki\/Provinces_of_China\n\nFrance\nhttps:\/\/en.wikipedia.org\/wiki\/Overseas_France","31f68939":"## Scrape China"}}