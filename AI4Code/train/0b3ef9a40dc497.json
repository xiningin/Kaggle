{"cell_type":{"575af3b7":"code","f9bdf956":"code","163edb65":"code","df05bb2b":"code","87e2e6d8":"code","ece9e8e4":"code","cabc2002":"code","2ee1673c":"code","d7338bf0":"code","220f45ce":"code","51539e04":"code","b999b72e":"code","06851653":"code","34de4198":"code","5acc6248":"code","be16b685":"code","42da3059":"code","2b3308b3":"code","5ef81a03":"code","195f767c":"code","67e33161":"code","c28e33a2":"code","bac3d3b6":"code","17a9a3e7":"code","016cd94e":"code","5ff45004":"code","b513190f":"code","db126215":"code","d70f0fb3":"code","a895ee95":"code","49e6bdb9":"code","3ac6dbf4":"code","bf54e6ae":"code","fe4a0393":"code","588791af":"code","97f2c7c7":"code","473f3df2":"code","ee4cf576":"code","e37a7dcc":"code","83416696":"code","5a5461b4":"code","88d37bfc":"code","c56d2c65":"code","b3e42604":"code","f526988f":"code","3cf9d6cb":"code","bf0fbb1c":"code","ca00d4aa":"code","a85c00ba":"code","6951054c":"code","f33bfe7b":"code","ff037dd8":"code","67c3326c":"code","6fd372a3":"code","132d979c":"code","16903805":"code","abbe12b7":"code","21e6d9c8":"code","71f0f742":"code","33205ce9":"code","00b30faa":"code","8d3e13b8":"code","2f1a720b":"code","1ede0c95":"code","345d2add":"code","24a52a0b":"code","1ced768c":"code","dc809b01":"code","4366ea95":"code","6c8a0da6":"code","b936f86b":"code","dabb9340":"code","96403e3d":"code","6a3c91ee":"markdown","8291041c":"markdown","940a13af":"markdown","6a73aa58":"markdown","2eb3cfd4":"markdown","e4401704":"markdown","4cd89275":"markdown","b886525f":"markdown","10ce2602":"markdown","f9df7ddd":"markdown","53bd8d22":"markdown","3e329dbb":"markdown","f9a056a6":"markdown","7d381433":"markdown","3fb3c80a":"markdown","24711985":"markdown","046d1da0":"markdown","d3cd3cf9":"markdown","050457f2":"markdown","d6af58ec":"markdown","c2e0e79a":"markdown","0a6e9de8":"markdown","2746ca52":"markdown","739991bc":"markdown","7d4a79b8":"markdown","4be2ee38":"markdown","1e5e3d06":"markdown","66642700":"markdown","cb3c34e4":"markdown"},"source":{"575af3b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9bdf956":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","163edb65":"data = pd.read_csv(\"..\/input\/world-happiness\/2015.csv\")","df05bb2b":"data.columns","87e2e6d8":"data.info()","ece9e8e4":"data.describe().T","cabc2002":"data.head()\n# The first 5 samples of the data set","2ee1673c":"data.head(10)","d7338bf0":"data.tail()\n# The last 5 samples of the data set","220f45ce":"data.dtypes","51539e04":"data.corr()\n#Correlation","b999b72e":"### Data Max Correlation\n### It's a bit like an advanced command.\n\ndata.corr().unstack().sort_values().drop_duplicates()","06851653":"#Correlation Map\nf,ax = plt.subplots(figsize= (19,19))\nsns.heatmap(data.corr(), annot = True, linewidths = .5, fmt =\".1f\", ax=ax)\nplt.show()","34de4198":"# Histogram\n#bins = number of bar in figure\ndata.Generosity.plot(kind = \"hist\", bins = 50, figsize =(14,14))\nplt.xlabel(\"Generosity\")\nplt.ylabel(\"Histogram\")\nplt.show()","5acc6248":"#Scatter Plot\ndata.plot(kind = \"scatter\", x= \"Happiness Score\",\ny =\"Economy (GDP per Capita)\", alpha= 0.5, color = \"blue\")\nplt.xlabel(\"Happiness Score\")\nplt.ylabel(\"Economy (GDP per Capita)\")\nplt.title(\"Scatter Plot\")\nplt.show()","be16b685":"#Comparison operator\nprint(5>3)\nprint(10!=9)\n#Boolean perators\nprint(True or False)\nprint(False and True)\nprint(True or False)\nprint(False or False)","42da3059":"#Series\ndata=pd.read_csv(\"..\/input\/world-happiness\/2015.csv\")\nseries = data[\"Happiness Rank\"]\nprint(type(series))","2b3308b3":"#Data Frame\ndataframe =data [[\"Happiness Rank\"]]\nprint(type(dataframe))","5ef81a03":"x= data[\"Happiness Score\"]> 7\ndata[x]","195f767c":"x= data[\"Happiness Score\"] > 7\ndata[x]\ndata.head()","67e33161":"pd.set_option('display.max_rows', 50)\npd.set_option('display.max_columns', 50)\n#a bit regulation for viewing ","c28e33a2":"data[ (data[\"Happiness Score\"]> 5) & (data[\"Freedom\"] > 0.35)]","bac3d3b6":" #logical_and() function\ndata[np.logical_and(data[\"Health (Life Expectancy)\"] > 0.94, \ndata[\"Happiness Score\"]> 7 )]","17a9a3e7":"#select columns by name\ndata.filter(items=[\"Country\", \"Happiness Score\"])\ndata.head(10)","016cd94e":"data.head(10)","5ff45004":"c = 0\nwhile c < 8:\n    print(\"What's up bro\", c)\n    c +=1","b513190f":"# Stay in loop if condition(i is not equal 5 ) is true\nlis = [15,25,35,45,55]\nfor i in lis:\n    print(\"i is:\",i)","db126215":"#Enumerate index and value of list\n#index : value = 0:1 , 1:2, 2:3 , 3:4 , 4:5\nfor index, value in enumerate(lis):\n    print(index, \":\", value)","d70f0fb3":"#For dictionaries\n#We can use for loop to achieve key and value of dictionary.\n#We learnt key and value at dictionary part\ndictionary = {\" Turkey\": \" Ankara\",\" Germany\": \"Berlin\"}\nfor key, value in dictionary.items():\n    print(key,\":\", value)","a895ee95":"# For pandas we can achieve index and value\nfor index, value in data[[\"Country\"]][0:1].iterrows():\n    print(index, \":\", value)","49e6bdb9":"# Countries bring all the lines of the column\ndata[\"Country\"]","3ac6dbf4":"#Countries bring all the lines of the column\ndata.loc[: , \"Country\"]","bf54e6ae":"print(data.Region)","fe4a0393":"print(data.loc[ :3, \"Happiness Rank\"])","588791af":"print(data.loc[ :15, [\"Country\", \"Happiness Score\"] ])","97f2c7c7":"print(data.loc[ :15, \"Country\" : \"Happiness Score\" ])","473f3df2":"# Example of list comprehension\nnum1 = [4,5,6]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","ee4cf576":"#lets return World Happiness Report Csv file and add one more list comprehension example\nthreshold = sum(data[\"Happiness Score\"])\/len(data[\"Happiness Score\"])\ndata[\"score_level\"] = [\"high\" if i > threshold else \"low\" for i in data[\"Happiness Score\"]]\ndata.loc[:10,[\"score_level\",\"Happiness Score\"]]","e37a7dcc":"threshold = sum(data[\"Happiness Score\"])\/len(data[\"Happiness Score\"])\nprint(threshold)","83416696":"# Example of a user-defined function\ndef subtract_numbers(a,b):\n    output = a-b\n    return output\n\nnum1 = 25\nnum2 = 15\n\nprint(\"The answer is\", subtract_numbers(num1,num2))","5a5461b4":"def tuble_ex():\n    \"\"\"return defined t tuble\"\"\"\n    t = (10,20,30)\n    return t\na,b,c = tuble_ex()\nprint(a,b,c)","88d37bfc":"x = 5\ndef f():\n    x = 7\n    return x\nprint(x)      # x = 5 global scope\nprint(f())    # x = 7 local scope","c56d2c65":"# What if there is no local scope\nx = 5\ndef f():\n    y = 10+x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x\n# First local scope searched, then global scope searched, if two of them cannot be found lastly built in scope searched.","b3e42604":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)","f526988f":"def square():\n    \"\"\"return square of value\"\"\"\n    def add():\n        \"\"\"add two local variable\"\"\"\n        x=2\n        y=3\n        z=x*y\n        return z\n    return add()**2\nprint(square())","3cf9d6cb":"#Default Arguments\ndef x (a, b = 10):\n    y = a*b \n    return y\nprint(x(5))","bf0fbb1c":"#Flexible Arguments\n# *args\ndef f(*args):\n    z = 1\n    for i in args:\n        z *= i\n    print(z)\n\nf(4, 5)\nf(2, 3, 4)\n# We used *args to send a variable-length argument list to our function, we were able to pass in as many arguments as we wished into the function calls.","ca00d4aa":"def calculate(x):\n    output=x*x\n    return output\nprint(calculate(8))","a85c00ba":"calculate = lambda x: x * x\nprint(calculate(8))","6951054c":"number_list = [15,25,50]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","f33bfe7b":"# iteration example\nname = \"Liverpool\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","ff037dd8":"data.head()","67c3326c":"data.columns","6fd372a3":"data.shape","132d979c":"data.info()","16903805":"data[\"Country\"].value_counts(dropna= False)","abbe12b7":"data.describe().T","21e6d9c8":"data.boxplot(column='Happiness Score', by='Family')\nplt.suptitle('')\nplt.ylabel(\"Family\")\nplt.show()\n","71f0f742":"data_new =data.head()\ndata_new","33205ce9":"#melting\n#id_vars is the base column.\n# value_vars are the variable columns.\n\nmelted = pd.melt(frame=data_new, id_vars = 'Country', value_vars = ['Happiness Score', 'Freedom'])\nmelted","00b30faa":"melted.pivot(index = 'Country', columns = 'variable', values = 'value')\n","8d3e13b8":"data1 = data.head()\ndata2 = data.tail()\nconc_data_row = pd.concat([data1, data2], axis=0, ignore_index=True)\nconc_data_row","2f1a720b":"data.info()","1ede0c95":"data3 = data['Economy (GDP per Capita)'].head()\ndata4 = data['Generosity'].head()\ndata5 = data['Freedom'].head()\nconc_data_col = pd.concat([data3, data4, data5], axis=1)\nconc_data_col","345d2add":"data.dtypes","24a52a0b":"data[\"Happiness Rank\"] = data[\"Happiness Rank\"].astype(\"float\")","1ced768c":"data.dtypes","dc809b01":"data.info()","4366ea95":"data[\"Country\"].value_counts(dropna = False)","6c8a0da6":"assert data[\"Freedom\"].notnull().all()\n# It returns nothing which mean is Freedom notnull for all rows.\n","b936f86b":"# df['Freedom'].fillna('empty', inplace = True)\n# We could fill any blank rows with 'empty' if there were any.b","dabb9340":"data.columns","96403e3d":"assert data.columns[1] == 'Region'","6a3c91ee":"* [i+1 for i in num1]: list of comprehension\n* i +1: list comprehension syntax\n* for i in num1: for loop syntax\n* i: iterator\n* num1: iterable object**","8291041c":"## **Introduction to Data Science**\n\nIn this tutorial, it is aimed to give a knowledge about data science to new beginners or people who does not know anything about it . Step by step, you will be introduced to the world of data science and each section will be gain different abilities.\n\n**Data scientist** : Person who is better at statistics than any software engineer and better at software engineering than any statistician.**\n    \n","940a13af":"### 4) FILTERING\n* Filtering rows of a DataFrame is an almost mandatory task for Data Analysis with Python. Given a Data Frame, we may not be interested in the entire dataset but only in specific rows.","6a73aa58":"## Exploratary Data Analysis(EDA)\nvalue_counts(): Counts the frequency of the condition outliers: the value that is extremely higher or lower than the rest of the data\n\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile Q1\n* 50%: median or second quantile Q2\n* 75%: third quantile Q3\n* max: maximum entry\n* Q1 - Q3 = IQR\n* Q1 - 1.5 * IQR = outlier\n* Q3 + 1.5 * IQR = outlier\n","2eb3cfd4":"### **8) Python Data Science Toolbox**\n* User defined function\n* Scope\n* Nested function\n* Default and flexible arguments\n* Lambda function\n* Anonymous function\n* Iterators\n","e4401704":"### **2)MATPLOTL\u0130B**\n\nThe Matplotlib graphical drawing package is one of the most important tools for programming with Python. \nWe will apply the following chart types in this data set.\n\n1. **Scatter Plot** : Scatter is better when there is correlation between two variables\n2. **Histogram** : Histogram is better when we need to see distribution of numerical data.","4cd89275":"# 3.CLEANING DATA\n\nWe need to clean the data before we start exploring\n\nExamples of unclean data\n\n* Columns names might have upper-lower case letter or space between words\n* Missing data on rows\n* Different language\n* Column names might have \".\" which can cause problems","b886525f":"**A. User defined function :** Functions that we define ourselves to do certain specific task are referred as user-defined functions.","10ce2602":"### 3) PANDAS","f9df7ddd":"What we need to know about functions:\n\n* docstrings: documentation for functions. Example: for f(): \"\"\"This is docstring for documentation of function f\"\"\"\n* tuble: sequence of immutable python objects. cant modify values tuble uses paranthesis like tuble = (1,2,3) unpack tuble into several variables like a,b,c = tuble","53bd8d22":"**F. ANONYMOUS FUNCTION**\n\n* Like lambda function but it can take more than one arguments.\n* map(func,seq) : applies a function to all the items in a list","3e329dbb":"### 7) List Comprehension\n*  **One of the most important topic of this kernel .**\n* We use list comprehension for data analysis often.\n* list comprehension: collapse for loops for building lists into a single line\n* Ex: num1 = [4,5,6] and we want to make it num2 = [5,6,7]. This can be done with for loop. However it is unnecessarily long. We can make it one line code that is list comprehension.","f9a056a6":"### F. CONCATENATING DATA\nWe can concatenate 2 dataframes into 1","7d381433":"### **H. MISSING DATA AND TESTING WITH ASSERT**\nThere are couple of things we can do:\n\n* leave the row as it is\n* fill the missing values with fillna()\n* fill the missing values with test statistics (with mean)\n* 'assert' checks if the statement after is true.","3fb3c80a":"### G. DATA TYPE\n* There are different data types: object(string), boolean ,integer, float and categorical\n* Conversions from one to another possible.\n\nWhy category is important? **make dataframe use less memory** can be utilized for analysis (for example: for sklearn )","24711985":"**C. Nested Function**\n\nA function defined inside another function is called a nested function.","046d1da0":"**B. Scope:** The scope of a variable refers to \nthe places that you can see or access a variable.\n\n* global: defined main body in script\n* local: defined in a function\n* built in scope: names in predefined built in scope module such as print, len","d3cd3cf9":"### D.TIDY DATA\nWe tidy the data using melt() function","050457f2":"Instead of writing the above code, we can write faster using the lambda function.","d6af58ec":"# ** C. VISUAL EXPLORATORY DATA ANALYSIS**\n* Box plots : visualize basic statistics like outliers, min\/max or quantiles","c2e0e79a":"### 5) Loop Data Structures (While and For)\n* Python provides support for two kinds of loop- \"for\" and \"while\"","0a6e9de8":"### Indexing and Slicing Data Frames","2746ca52":"### PANDAS FOUNDATION","739991bc":"### E. PIVOTING DATA\nReverse of melting\n","7d4a79b8":"**E. LAMBDA FUNCTION**\n\n* Faster way of writing function","4be2ee38":"**1) Import and First Look Data**\n* In this section, we will write some functions for knowing our data and how to import this data","1e5e3d06":"D. Default and flexible arguments\n\nDefault Arguments: Function arguments can have default values in Python. We can provide a default value to an argument by using the assignment operator (=). Default argument example: def f(a, b=1):\n\n> \"\"\" b = 1 is default argument\"\"\"\n\nFlexible arguments: The special syntax, args in function definition is used to pass a variable number of arguments to a function. def f(args):\n\n> \"\"\" *args can be one or more\"\"\"","66642700":"**G. ITERATORS**\n\n* iterable is an object that can return an iterator\n* iterable: an object with an associated iter() method example: list, strings and dictionaries\n* iterator: produces next value with next() method","cb3c34e4":"* **Comparison operator** : A comparison operator in python, also called python relational operator, compares the values of two operands, and returns True or False based on whether the condition is met.\n* **Boolean Operator** : A boolean expression (or logical expression) evaluates to one of two states true or false. Python provides the boolean type that can be either set to False or True. Many functions and operations returns boolean objects.\n* **Series** : A Series is a one-dimensional object that can hold any data type such as integers, floats and strings.\n* **DataFrame** : A DataFrame is a two dimensional object that can have columns with potential different types. Different kind of inputs include dictionaries, lists, series, and even another DataFrame.It is the most commonly used pandas object."}}