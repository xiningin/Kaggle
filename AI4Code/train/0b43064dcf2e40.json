{"cell_type":{"da3c5451":"code","058bcb0e":"code","3f07ae14":"code","6de70787":"code","735b59ed":"code","2d739b9d":"code","6f5d9023":"code","95f13c7e":"code","7779be02":"code","33865f7d":"code","6d17a8ac":"code","f9b138cb":"code","5104e809":"code","19da458c":"code","e9056136":"code","e6df01c5":"code","962b0444":"code","ff23400c":"code","c152e951":"code","4b40c801":"code","2515a55a":"code","fa000bbe":"code","151ac8b4":"code","a0e1789d":"code","2da1a2bf":"code","b7335cea":"code","a0a42a7c":"code","955b8e04":"code","75cb96ee":"code","7e945c1a":"code","50926117":"code","3590b0d5":"code","f6afd95c":"code","0bf83b0b":"code","73418db6":"code","0fba3f3a":"code","311c99e8":"code","d8af9008":"code","b2977cc4":"code","b592f4ef":"code","35b4db26":"code","c4cac622":"code","4c03dfaa":"code","72d79144":"code","e64f030b":"code","9501eb3e":"code","58162a3b":"code","47be50a5":"markdown","aeb3193c":"markdown","95f05343":"markdown","1b5a1246":"markdown","2bbeb8fa":"markdown","f456a300":"markdown"},"source":{"da3c5451":"import numpy as np\nimport pandas as pd\nimport warnings\nimport re\nimport nltk\nfrom tabulate import tabulate\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\nfrom nltk.corpus import stopwords\nfrom sklearn.metrics.pairwise import linear_kernel\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom geopy.geocoders import Nominatim\nfrom geopy.distance import great_circle ","058bcb0e":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3f07ae14":"#reading the dataset\nzomato_real=pd.read_csv(\"\/kaggle\/input\/zomato-bangalore-restaurants\/zomato.csv\")\nzomato_real.head()","6de70787":"zomato_real.info()","735b59ed":"#Deleting Unnnecessary Columns\n#Dropping the column \"phone\", \"url\" and saving the new dataset as \"zomato\"\nzomato=zomato_real.drop(['url','dish_liked','phone'],axis=1) ","2d739b9d":"#Removing the Duplicates\nzomato.duplicated().sum()\nzomato.drop_duplicates(inplace=True)","6f5d9023":"#Remove the NaN values from the dataset\nzomato.isnull().sum()\nzomato.dropna(how='any',inplace=True)\nzomato.info()","95f13c7e":"#Reading Column Names\nzomato.columns","7779be02":"#Changing the column names\nzomato = zomato.rename(columns={'approx_cost(for two people)':'cost','listed_in(type)':'type','listed_in(city)':'city'})\nzomato.columns","33865f7d":"# Some Transformations\nzomato['cost'] = zomato['cost'].astype(str) #Changing the cost to string\nzomato['cost'] = zomato['cost'].apply(lambda x: x.replace(',','')) #Using lambda function to replace ',' from cost\nzomato['cost'] = zomato['cost'].astype(float) # Changing the cost to Float\nzomato.info()","6d17a8ac":"# Removing '\/5' from Rates\nzomato = zomato.loc[zomato.rate !='NEW']\nzomato = zomato.loc[zomato.rate !='-'].reset_index(drop=True)\nremove_slash = lambda x: x.replace('\/5', '') if type(x) == np.str else x\nzomato.rate = zomato.rate.apply(remove_slash).str.strip().astype('float')\nzomato['rate'].head()","f9b138cb":"# Adjust the column values for online order and book table\nzomato.name = zomato.name.apply(lambda x:x.title())\nzomato.online_order.replace(('Yes','No'),(True, False),inplace=True)\nzomato.book_table.replace(('Yes','No'),(True, False),inplace=True)","5104e809":"# Checking for Null values\nzomato.isnull().sum()","19da458c":"# Computing Mean Rating\nrestaurants = list(zomato['name'].unique())\nzomato['Mean Rating'] = 0\n\nfor i in range(len(restaurants)):\n    zomato['Mean Rating'][zomato['name'] == restaurants[i]] = zomato['rate'][zomato['name'] == restaurants[i]].mean()","e9056136":"zomato.head()","e6df01c5":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range = (1,5))\nzomato[['Mean Rating']] = scaler.fit_transform(zomato[['Mean Rating']]).round(2)","962b0444":"# 5 examples of these columns before text processing:\nzomato[['reviews_list', 'cuisines']].sample(5)","ff23400c":"# Lower Casing\nzomato[\"reviews_list\"] = zomato[\"reviews_list\"].str.lower()","c152e951":"# Removal of Puctuations\nimport string\nPUNCT_TO_REMOVE = string.punctuation\ndef remove_punctuation(text):\n    \"\"\"custom function to remove the punctuation\"\"\"\n    return text.translate(str.maketrans('', '', PUNCT_TO_REMOVE))\n\nzomato[\"reviews_list\"] = zomato[\"reviews_list\"].apply(lambda text: remove_punctuation(text))","4b40c801":"# Removal of Stopwords\nfrom nltk.corpus import stopwords\nSTOPWORDS = set(stopwords.words('english'))\ndef remove_stopwords(text):\n    return \" \".join([word for word in str(text).split() if word not in STOPWORDS])\n\nzomato[\"reviews_list\"] = zomato[\"reviews_list\"].apply(lambda text: remove_stopwords(text))","2515a55a":"# Removal of URLS\nimport re\ndef remove_urls(text):\n    url_pattern = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url_pattern.sub(r'', text)\n\nzomato[\"reviews_list\"] = zomato[\"reviews_list\"].apply(lambda text: remove_urls(text))","fa000bbe":"# zomato[['reviews_list', 'cuisines']].sample(5)","151ac8b4":"# RESTAURANT NAMES:\nrestaurant_names = list(zomato['name'].unique())\n# restaurant_names","a0e1789d":"def get_top_words(column, top_nu_of_words, nu_of_word):\n    vec = CountVectorizer(ngram_range= nu_of_word, stop_words='english')\n    bag_of_words = vec.fit_transform(column)\n    sum_words = bag_of_words.sum(axis=0)\n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    \n    return words_freq[:top_nu_of_words]","2da1a2bf":"zomato.columns","b7335cea":"zomato=zomato.drop(['address', 'type', 'menu_item', 'votes'],axis=1)","a0a42a7c":"zomato.columns","955b8e04":"zomato.head()","75cb96ee":"# Sampling 60% of the dataframe\ndf_percent = zomato.sample(frac=0.6, random_state=1)","7e945c1a":"df_percent.shape","50926117":"df_percent.set_index('name', inplace=True)","3590b0d5":"indices = pd.Series(df_percent.index)","f6afd95c":"# Creating tf-idf matrix\ntfidf = TfidfVectorizer(analyzer='word', ngram_range=(1, 2), min_df=0, stop_words='english')\ntfidf_matrix = tfidf.fit_transform(df_percent['reviews_list'])","0bf83b0b":"cosine_similarities = linear_kernel(tfidf_matrix, tfidf_matrix)\ncosine_similarities.shape","73418db6":"#Function to find distance between 2 locations\ndef Get_distance(r_loc,u_loc):\n    geolocator=Nominatim(user_agent=\"app\")\n    u_loc = \"Bangalore \" + u_loc\n    r_loc = \"Bangalore \" + r_loc\n    \n    r_location = geolocator.geocode(r_loc)\n    if r_location is None:\n        return 0\n    else:\n        R = (r_location.latitude,r_location.longitude)\n    \n    u_location = geolocator.geocode(u_loc)\n    \n    if u_location is None:\n        return 0\n    else:\n        U = (u_location.latitude,u_location.longitude)\n    return round(great_circle(R, U).km,1) \n    \n# Get_distance('Shivajinagar','Banaskankari')","0fba3f3a":"def recommend(name, cosine_similarities, df_percent,user_location):\n    # List to put top 10 restaurants\n    recommend_restaurant = []\n\n    # Find the index of the hotel entered\n    idx = indices[indices == name].index[0]\n    \n    # Find the restaurants with a similar cosine-sim value and order them from bigges number\n    score_series = pd.Series(cosine_similarities[idx]).sort_values(ascending=False)\n    \n    # Extract top 30 restaurant indexes with a similar cosine-sim value\n    top30_indexes = list(score_series.iloc[0:31].index)\n    \n    # Names of the top 30 restaurants\n    for each in top30_indexes:\n        recommend_restaurant.append(list(df_percent.index)[each])\n    \n    # Creating the new data set to show similar restaurants\n    df_new = pd.DataFrame(columns=['cuisines', 'Mean Rating', 'cost'])\n    \n    # Create the top 30 similar restaurants with some of their columns\n    for each in recommend_restaurant:\n        df_new = df_new.append(pd.DataFrame(df_percent[['cuisines','rest_type','Mean Rating', 'cost','location']][df_percent.index == each].sample()))\n    \n    df_new.index.name = 'name'\n    df_new.reset_index(inplace = True)\n\n    df_new = df_new.drop_duplicates(subset = ['name','Mean Rating','location','cost'])\n    # Please uncomment the following 5 lines to get distance from customer location\n#     l_l = []    \n#     for l in df_new.location:\n#         l_l.append(Get_distance(l,user_location))\n#     df_new.insert(2, \"Distance(km)\",l_l, True) \n#     df_new = df_new[df_new['Distance(km)'] < 20]\n\n    df_new = df_new.sort_values(by='Mean Rating', ascending=False).head(10)\n    \n\n    df_new.reset_index(drop=True, inplace=True)\n    \n    return df_new","311c99e8":"recommend('Jalsa', cosine_similarities, df_percent,'Banashankari')","d8af9008":"# One Hot Encoding of cuisines\n# For every row in the dataframe, iterate through the list of cuisines and place a 1 into the corresponding column\n\ndf_percent_copy_sample = df_percent.copy()\ndf_percent_copy_sample['cuisines'] = df_percent_copy_sample.cuisines.str.split(',')\n# df_percent_copy_sample.set_index('name',inplace=True)\nfor index, row in df_percent_copy_sample.iterrows():\n    try:\n        for x in row['cuisines']:\n            df_percent_copy_sample.at[index, x.strip()] = 1\n    except Exception:\n        pass\n    \n#Filling in the NaN values with 0 to show that a restaurant doesn't have that column\ndf_percent_copy_sample.fillna(0,inplace=True)","b2977cc4":"mat = df_percent_copy_sample.drop(['cuisines','rest_type', 'online_order', 'book_table', 'rate', 'location', 'cuisines', 'cost', 'reviews_list', 'city', 'Mean Rating'],1)\n# df_percent_copy_sample.head()","b592f4ef":"# using cosine_similarity function from sklearn.metrics.pairwise to compute the similarities \ncosine_sim = cosine_similarity(mat)\ncosine_sim.shape","35b4db26":"recommend('Jalsa', cosine_sim, df_percent_copy_sample,'BTM Layout')","c4cac622":"# mat.head()","4c03dfaa":"cuisine_list = list(mat.columns)","72d79144":"def get_cosine_sim_with_all_restaurant(user_cuisine_list,cuisine_list,df):\n    test_list = [0 for i in range(len(cuisine_list))]\n    for i in user_cuisine_list:\n        test_list[cuisine_list.index(i)] = 1\n    \n    cosine_sim = cosine_similarity(np.array(df),np.array([test_list]))\n    sim_list = []\n    for j in range(len(cosine_sim)):\n        sim_list.append(float(cosine_sim[j][0]))\n    sim_list = list(enumerate(sim_list)) \n    sim_list.sort(key = lambda x:x[1],reverse = True)\n    return sim_list\n","e64f030b":"def recommend_based_on_cuisine_cosine_sim(user_cuisine_list,cuisine_list,mat,df_percent,user_location):\n    sim_list = get_cosine_sim_with_all_restaurant(user_cuisine_list,cuisine_list,mat)\n    \n    recommender_res = []\n    for x in sim_list[0:31]:\n        recommender_res.append(x[0])\n\n    df_n = df_percent.iloc[recommender_res,:]\n    df_n.drop(['online_order', 'book_table', 'rate','reviews_list', 'city'], axis = 1, inplace = True)\n    df_n.index.name = 'name'\n    df_n.reset_index(inplace = True)\n    df_n = df_n.loc[df_n.astype(str).drop_duplicates(subset = ['name','Mean Rating','cost'], keep=False).index]\n    \n    # Please uncomment the following 5 lines to get distance from customer location\n#     l_l = []\n#     for l in df_n.location:\n#         l_l.append(Get_distance(l,user_location))\n#     df_n.insert(2, \"Distance(km)\",l_l, True)\n#     df_n = df_n[df_n['Distance(km)'] < 20]\n    \n    df_n = df_n.sort_values(by='Mean Rating', ascending=False).head(10)\n    df_n.reset_index(drop=True,inplace = True)\n    return df_n","9501eb3e":"recommend_based_on_cuisine_cosine_sim(['North Indian'],cuisine_list,mat,df_percent,'Banashankari')","58162a3b":"print('Welcome to Yottabytes Restaurant Recommender!\\n')\nprint('Please enter your location')\nt_location = input()\nprint('\\nWould you like to search by restaurant or cuisine? press 1 for Restaurant 2 for cuisine')\nt_option = int(input())\nif(t_option ==1):\n    print('Enter Restaurant Name')\n    t_rest = input()\n    print('\\nRestaurants with similar reviews and cuisines to this are:')\n    t_rest_review_recommendation = recommend(t_rest, cosine_similarities, df_percent,t_location)\n    t_rest_cui_recommendation = recommend(t_rest, cosine_sim, df_percent_copy_sample,t_location)\n    \n    t_combined = pd.concat([t_rest_review_recommendation.iloc[0:int(0.6*len(t_rest_review_recommendation)),:], t_rest_cui_recommendation.iloc[0:int(0.4*len(t_rest_cui_recommendation)),:]],ignore_index=True)\n    t_combined = t_combined.sort_values(by='Mean Rating', ascending=False)\n    t_combined = t_combined.drop_duplicates(subset = ['name','Mean Rating','location','cost'])\n    print('TOP %s RESTAURANTS LIKE %s: ' % (str(len(t_combined)), t_rest))\n    print(tabulate(t_combined, headers = 'keys', tablefmt = 'github')) \n\n\nelse:\n    print('\\nThe available cuisines across all the restaurants are \\n:')\n    for i in range(len(cuisine_list)):\n        print(i,' ',cuisine_list[i])\n    print('Enter number of cuisines')\n    t_n = int(input())\n    t_cuisine_list  =[]\n    print('Enter cuisines of your choice:')\n    for j in range(t_n):\n        t_c = input()\n        t_cuisine_list.append(t_c)\n    t_cuisine_recommendation = recommend_based_on_cuisine_cosine_sim(t_cuisine_list,cuisine_list,mat,df_percent,t_location)\n    print('Restaurants with similar cuisines are:')\n    print(tabulate(t_cuisine_recommendation, headers = 'keys', tablefmt = 'github'))\n","47be50a5":"### Term Frequency-Inverse Document Frequency\n","aeb3193c":"### Computing the cosine similarities","95f05343":"### Text Preprocessing","1b5a1246":"### Loading the dataset","2bbeb8fa":"### Data Cleaning and Feature Engineering","f456a300":"### List of cuisines"}}