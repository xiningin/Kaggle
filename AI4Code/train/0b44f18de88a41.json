{"cell_type":{"2d47e975":"code","4a59c5cd":"code","af00a266":"code","84294a3c":"code","0f2cebbe":"code","3b2f5dae":"code","a80dd355":"markdown","959a1dd5":"markdown","dd524ccc":"markdown","fdb58bff":"markdown"},"source":{"2d47e975":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt","4a59c5cd":"data = pd.read_csv('..\/input\/vaccine-record-in-germany\/germany_vaccinations_timeseries_v2_updated_13_Juli_2021.tsv',delimiter='\\t') ","af00a266":"import seaborn as sns\nsns.set_theme(style=\"darkgrid\")\n\n# Load an example dataset with long-form data\ndata_df = pd.DataFrame(data)\n\n# Conver string to date format\ndata_df['date']= pd.to_datetime(data_df['date'])\n\n","84294a3c":"# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nlabels = ['BioNtech' , 'Moderna', 'Astrazeneca', 'Johnson']\nexplode = (0.05, 0, 0, 0)  \n\nsizes = [data_df['dosen_biontech_kumulativ'].sum(), data_df['dosen_moderna_kumulativ'].sum(), data_df['dosen_astrazeneca_kumulativ'].sum(), data_df['dosen_johnson_kumulativ'].sum()]\n\nfig1, ax1 = plt.subplots(figsize=(10, 10))\nwedges, texts, autotexts = ax1.pie(sizes,labels=labels, autopct='%1.3f%%', shadow=True, startangle=90, textprops=dict(color=\"#000\"),explode=explode)\nax1.axis('equal')                                                    # Equal aspect ratio ensures that pie is drawn as a circle.\n#ax1.set_title(\"Overall distribution\")\n\nplt.setp(autotexts, size=13, weight=\"bold\")","0f2cebbe":"print ('Monthy distribution of each kind of vaccine')\n#---------------------------------------------------------- Per month distribution --------------------------------------------------------------------------#\n# Filtering dataset for individual month\nfig1, ((ax2,ax3, ax4,ax5)) = plt.subplots(1,4,figsize=(22, 8))\n#Dec 2020\ndec_mask = data_df['date'].map(lambda x: x.month) == 12\ndata_df_dec=data_df[dec_mask]\n\nsizes = [(data_df_dec['dosen_biontech_kumulativ']).sum(), data_df_dec['dosen_moderna_kumulativ'].sum(), data_df_dec['dosen_astrazeneca_kumulativ'].sum(), data_df_dec['dosen_johnson_kumulativ'].sum()]\nax2.pie(sizes,labels=labels, autopct='%1.1f%%',shadow=True, startangle=90,textprops=dict(color=\"w\"), explode=explode, wedgeprops=dict(width=0.5))\nax2.axis('equal')                                                    # Equal aspect ratio ensures that pie is drawn as a circle.\n#ax2.set_title(\"December 2020 distribution\")\n\n\n\n# Jan 2021\njan_mask = data_df['date'].map(lambda x: x.month) == 1\ndata_df_jan=data_df[jan_mask]\n\nsizes = [(data_df_jan['dosen_biontech_kumulativ']).sum(), data_df_jan['dosen_moderna_kumulativ'].sum(), data_df_jan['dosen_astrazeneca_kumulativ'].sum(), data_df_jan['dosen_johnson_kumulativ'].sum()]\nax3.pie(sizes,labels=labels, autopct='%1.1f%%',shadow=True, startangle=90, explode=explode, wedgeprops=dict(width=0.5))\nax3.axis('equal')                                                    # Equal aspect ratio ensures that pie is drawn as a circle.\n#ax3.set_title(\"January 2021 distribution\")\n\n\n\n# Feb 2021\nfeb_mask = data_df['date'].map(lambda x: x.month) == 2\ndata_df_feb=data_df[feb_mask]\n\nsizes = [(data_df_feb['dosen_biontech_kumulativ']).sum(), data_df_feb['dosen_moderna_kumulativ'].sum(), data_df_feb['dosen_astrazeneca_kumulativ'].sum(), data_df_feb['dosen_johnson_kumulativ'].sum()]\nax4.pie(sizes,labels=labels, autopct='%1.1f%%',shadow=True, startangle=90, explode=explode, wedgeprops=dict(width=0.5))\nax4.axis('equal')                                                    # Equal aspect ratio ensures that pie is drawn as a circle.\n#ax4.set_title(\"Feburary 2021 distribution\")\n\n\n\n# March 2021\nmar_mask = data_df['date'].map(lambda x: x.month) == 3\nmar_df_mar=data_df[mar_mask]\n\nsizes = [(mar_df_mar['dosen_biontech_kumulativ']).sum(), mar_df_mar['dosen_moderna_kumulativ'].sum(), mar_df_mar['dosen_astrazeneca_kumulativ'].sum(), mar_df_mar['dosen_johnson_kumulativ'].sum()]\nax5.pie(sizes,labels=labels, autopct='%1.1f%%',shadow=True, startangle=90, explode=explode, wedgeprops=dict(width=0.5))\nax5.axis('equal')                                                    # Equal aspect ratio ensures that pie is drawn as a circle.\n\n\nfig1, ((ax6, ax7,ax8,ax9)) = plt.subplots(1,4,figsize=(22, 8))\n\n\n# April - \napr_mask = data_df['date'].map(lambda x: x.month) == 4\ndata_df_apr=data_df[apr_mask]\n\nsizes = [(data_df_apr['dosen_biontech_kumulativ']).sum(), data_df_apr['dosen_moderna_kumulativ'].sum(), data_df_apr['dosen_astrazeneca_kumulativ'].sum(), data_df_apr['dosen_johnson_kumulativ'].sum()]\nax6.pie(sizes,labels=labels, autopct='%1.1f%%',shadow=True, startangle=90, explode=explode, wedgeprops=dict(width=0.5))\nax6.axis('equal')                                                    # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.setp(autotexts, size=13, weight=\"bold\")\n\n# May\nmai_mask = data_df['date'].map(lambda x: x.month) == 5\ndata_df_mai=data_df[mai_mask]\n\nsizes = [(data_df_mai['dosen_biontech_kumulativ']).sum(), data_df_mai['dosen_moderna_kumulativ'].sum(), data_df_mai['dosen_astrazeneca_kumulativ'].sum(), data_df_mai['dosen_johnson_kumulativ'].sum()]\nax7.pie(sizes,labels=labels, autopct='%1.1f%%',shadow=True, startangle=90, explode=explode, wedgeprops=dict(width=0.5))\nax7.axis('equal')                                                    # Equal aspect ratio ensures that pie is drawn as a circle.\n#ax6.set_title(\"April 2021 - till 23 April 2021\")\n\n# June\njune_mask = data_df['date'].map(lambda x: x.month) == 6\ndata_df_june=data_df[june_mask]\n\nsizes = [(data_df_june['dosen_biontech_kumulativ']).sum(), data_df_june['dosen_moderna_kumulativ'].sum(), data_df_june['dosen_astrazeneca_kumulativ'].sum(), data_df_june['dosen_johnson_kumulativ'].sum()]\nax8.pie(sizes,labels=labels, autopct='%1.1f%%',shadow=True, startangle=90, explode=explode, wedgeprops=dict(width=0.5))\nax8.axis('equal')                                                    # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# July - till 13th July 2021\njuly_mask = data_df['date'].map(lambda x: x.month) == 7\ndata_df_july=data_df[july_mask]\n\nsizes = [(data_df_july['dosen_biontech_kumulativ']).sum(), data_df_july['dosen_moderna_kumulativ'].sum(), data_df_july['dosen_astrazeneca_kumulativ'].sum(), data_df_july['dosen_johnson_kumulativ'].sum()]\nax9.pie(sizes,labels=labels, autopct='%1.1f%%',shadow=True, startangle=90, explode=explode, wedgeprops=dict(width=0.5))\nax9.axis('equal')                                                    # Equal aspect ratio ensures that pie is drawn as a circle.\n\n\nkwargs = dict(size=20, fontweight='bold', va='center')\nax2.text(0, 0, \"Dec 20\", ha='center',**kwargs)\nax3.text(0, 0, \"Jan 21\", ha='center',**kwargs)\nax4.text(0, 0, \"Feb 21\", ha='center',**kwargs)\nax5.text(0, 0, \"Mar 21\", ha='center',**kwargs)\nax6.text(0, 0, \"Apr 21\", ha='center',**kwargs)\nax7.text(0, 0, \"Mai 21\", ha='center',**kwargs)\nax8.text(0, 0, \"June 21\", ha='center',**kwargs)\nax9.text(0, 0, \"July 21\", ha='center',**kwargs)\n\nax9.legend(labels,\n          title=\"Labels\",\n          loc=\"center right\",\n          bbox_to_anchor=(2, 0, 0.5, 1))\n\nplt.show()","3b2f5dae":"import matplotlib.ticker as ticker\n\nfig, ch = plt.subplots(figsize=(20, 5))\nch.set_yscale('linear')\n\nch.plot( 'date', 'personen_voll_kumulativ', data=data_df, marker='', color='olive', linewidth=2, linestyle='dashed', label=\"Total Vaccines given\")\n\nch.plot( 'date', 'indikation_alter_voll', data=data_df, marker='', markerfacecolor='blue', markersize=1, color='skyblue', linewidth=1,label=\"Age required\")\nch.plot( 'date', 'indikation_beruf_voll', data=data_df, marker='', color='green', linewidth=1,label=\"Occupation required\")\nch.plot( 'date', 'indikation_medizinisch_voll', data=data_df, marker='', color='yellow', linewidth=1, label=\"Medical condition\")\nch.plot( 'date', 'indikation_pflegeheim_voll', data=data_df, marker='', color='pink', linewidth=1, label=\"Nursing home\")\n\nch.legend()                                                       # Show legend\nplt.title('Fully vaccinated population breakdown')                # Add title to chart\n                                             \nplt.xlabel('Date')                                                # Add label to x axis","a80dd355":"# **Graph showing Priority groups and general public vaccinated between Dec 2020 to June 2021**","959a1dd5":"# **Monthy breakdown of vaccine share in Germany - Dec 2020 till June 2021**","dd524ccc":"# **Pie chart showing total vaccine share in Germany as of June 2021**","fdb58bff":"# **Reference**\n[1] https:\/\/impfdashboard.de\/static\/data\/germany_vaccinations_timeseries_v2.tsv   \n    \n\n## **Note:- Data updated on 10 June 2021**"}}