{"cell_type":{"bd754fa2":"code","bd9a4af1":"code","5a493f76":"code","eae044bf":"code","ab6f3881":"code","9c5dd59e":"code","a4a3f055":"code","f26bcfab":"code","ff31c9db":"code","1a14ab94":"code","adf55aa5":"code","3e41e28b":"code","22b75353":"code","383c9cec":"code","b5e55264":"code","5803e1d5":"code","dfa7688d":"code","fde731e1":"code","028fc91b":"code","495f1ed6":"code","81c91987":"code","60ee3a0d":"code","406ec0a8":"code","7fd9572c":"code","e2c50e0d":"code","fd5371eb":"code","ef62c10e":"code","f9ece1b4":"code","61dff564":"code","b39422db":"code","21f69a70":"code","cb2a2c4c":"code","f915c18a":"code","69522b41":"code","9a6157cf":"code","b4d21a3d":"code","4f7cce85":"code","14f80ba6":"code","fd30e27d":"code","e8dc313b":"code","74f71559":"code","6fe0b4f4":"code","a3a3ff84":"code","026adf1b":"code","19572399":"code","75018308":"markdown","7bc17e74":"markdown","66e86263":"markdown","df901f7d":"markdown","50a6c8bb":"markdown","f8b84dfb":"markdown","4b5a045d":"markdown","a8bf0935":"markdown","3a2ae8f9":"markdown","2cab2016":"markdown"},"source":{"bd754fa2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport time\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bd9a4af1":"# add progress bar\n# !pip install tqdm --upgrade\nfrom tqdm._tqdm_notebook import tqdm_notebook as tqdm\ntqdm.pandas()","5a493f76":"# Global Constants\nemb_size = 300\nmax_features = 200000\nmaxlen = 100","eae044bf":"def clean_memory(*args):\n    for arg in args:\n        del arg\n    import gc\n    gc.collect()\n    time.sleep(10)","ab6f3881":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\ndef plot_it(x, y, data):\n    sns.boxplot(x=x, y=y, data=data)\n#     plt.show()","9c5dd59e":"from sklearn.model_selection import train_test_split\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\n\npath = '\/kaggle\/input\/quora-insincere-questions-classification'\n# path = '\/content'\ntrain_df = pd.read_csv(path + \"\/train.csv\")\ntest_df = pd.read_csv(path + \"\/test.csv\")\n\ntrain_df[\"question_text\"].fillna(\"_na_\", inplace=True)\ntest_df[\"question_text\"].fillna(\"_na_\", inplace=True)","a4a3f055":"train_df[\"num_words\"] = train_df[\"question_text\"].progress_apply(lambda x: len(str(x).split()))\ntrain_df[\"num_unique_words\"] = train_df[\"question_text\"].progress_apply(lambda x: len(set(str(x).split())))\ntrain_df[\"num_chars\"] = train_df[\"question_text\"].progress_apply(lambda x: len(str(x)))\n# stat_data[\"num_words_upper\"] = train_df[\"question_text\"].progress_apply(lambda x: len([w for w in str(x).split() if w.isupper()]))\n# stat_data[\"num_words_title\"] = train_df[\"question_text\"].progress_apply(lambda x: len([w for w in str(x).split() if w.istitle()]))\n# stat_data[\"mean_word_len\"] = train_df[\"question_text\"].progress_apply(lambda x: np.mean([len(w) for w in str(x).split()]))","f26bcfab":"test_df[\"num_words\"] = test_df[\"question_text\"].progress_apply(lambda x: len(str(x).split()))\ntest_df[\"num_unique_words\"] = test_df[\"question_text\"].progress_apply(lambda x: len(set(str(x).split())))\ntest_df[\"num_chars\"] = test_df[\"question_text\"].progress_apply(lambda x: len(str(x)))","ff31c9db":"# plot_it('target', 'num_words', stat_data)","1a14ab94":"# plot_it('target', 'num_unique_words', stat_data)","adf55aa5":"# plot_it('target', 'num_chars', stat_data)","3e41e28b":"# plot_it('target', 'num_words_upper', stat_data)","22b75353":"# plot_it('target', 'num_words_title', stat_data)","383c9cec":"# plot_it('target', 'mean_word_len', stat_data)","b5e55264":"# Vocabulary build with count\ndef build_vocab(sentences, verbose =  True):\n    vocab = {}\n    for sentence in tqdm(sentences, disable = (not verbose)):\n        for word in sentence:\n            try:\n                vocab[word] += 1\n            except KeyError:\n                vocab[word] = 1\n    return vocab","5803e1d5":"emb_path = '\/kaggle\/input\/quora-insincere-questions-classification\/embeddings'\n\ndef load_all():\n    word2vec_format = {}\n    glove = [o.split(\" \")[0] for o in tqdm(open(emb_path + '\/glove.840B.300d\/glove.840B.300d.txt'))]\n    for word in tqdm(glove):\n        word2vec_format[word] = 1\n    clean_memory(glove)\n\n#     paragram = [o.split(\" \")[0] for o in open(emb_path + '\/paragram_300_sl999\/paragram_300_sl999.txt', encoding=\"utf8\", errors='ignore') if len(o)>100]\n#     para = 0\n#     for word in tqdm(paragram):\n#         word2vec_format[word] = 1\n#     clean_memory(paragram)\n    \n    return word2vec_format\n\nemb_all = load_all()","dfa7688d":"# Coverage check for current embedding\nimport operator \n\ndef check_coverage(vocab, embeddings_index):\n    a = {}\n    oov = {}\n    k = 0\n    i = 0\n    for word in tqdm(vocab):\n        try:\n            a[word] = embeddings_index[word]\n            k += vocab[word]\n        except:\n            oov[word] = vocab[word]\n            i += vocab[word]\n            pass\n\n    print('Found embeddings for {:.2%} of vocab'.format(len(a) \/ len(vocab)))\n    print('Found embeddings for  {:.2%} of all text'.format(k \/ (k + i)))\n    sorted_x = sorted(oov.items(), key=operator.itemgetter(1))[::-1]\n\n    return sorted_x","fde731e1":"sentences = train_df[\"question_text\"].progress_apply(lambda x: x.split())\nvocab = build_vocab(sentences)\noov = check_coverage(vocab, emb_all)\noov[:10]","028fc91b":"punct = \"\/-'?!.,#$%\\'()*+-\/:;<=>@[\\\\]^_`{|}~\" + '\"\"\u201c\u201d\u2019' + '\u221e\u03b8\u00f7\u03b1\u2022\u00e0\u2212\u03b2\u2205\u00b3\u03c0\u2018\u20b9\u00b4\u00b0\u00a3\u20ac\\\u00d7\u2122\u221a\u00b2\u2014\u2013&'\npunct_mapping = {\"\u2018\": \"'\", \"\u20b9\": \"e\", \"\u00b4\": \"'\", \"\u00b0\": \"\", \"\u20ac\": \"e\", \"\u2122\": \"tm\", \"\u221a\": \" sqrt \", \"\u00d7\": \"x\", \"\u00b2\": \"2\", \"\u2014\": \"-\", \"\u2013\": \"-\", \"\u2019\": \"'\", \"_\": \"-\", \"`\": \"'\", '\u201c': '\"', '\u201d': '\"', '\u201c': '\"', \"\u00a3\": \"e\", '\u221e': 'infinity', '\u03b8': 'theta', '\u00f7': '\/', '\u03b1': 'alpha', '\u2022': '.', '\u00e0': 'a', '\u2212': '-', '\u03b2': 'beta', '\u2205': '', '\u00b3': '3', '\u03c0': 'pi', }\n\ndef clean_special_chars(text, punct=punct, mapping=punct_mapping):\n    for p in mapping:\n        if p in text:\n            text = text.replace(p, mapping[p])\n    \n    for p in punct:\n        if p in text:\n            text = text.replace(p, f' {p} ')\n    \n    specials = {'\\u200b': ' ', '\u2026': ' ... ', '\\ufeff': '', '\u0915\u0930\u0928\u093e': '', '\u0939\u0948': ''}  # Other special characters that I have to deal with in last\n    for s in specials:\n        if s in text:\n            text = text.replace(s, specials[s])\n    \n    return text","495f1ed6":"train_df[\"question_text\"] = train_df[\"question_text\"].progress_apply(lambda x: clean_special_chars(x))\ntest_df[\"question_text\"] = test_df[\"question_text\"].progress_apply(lambda x: clean_special_chars(x))\nsentences = train_df[\"question_text\"].progress_apply(lambda x: x.split())\nvocab = build_vocab(sentences)\noov = check_coverage(vocab,emb_all)\noov[:10]","81c91987":"# contraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\" }\n\n# def clean_contractions(text, mapping):\n#     specials = [\"\u2019\", \"\u2018\", \"\u00b4\", \"`\"]\n#     for s in specials:\n#         text = text.replace(s, \"'\")\n#     text = ' '.join([mapping[t] if t in mapping else t for t in text.split(\" \")])\n#     return text","60ee3a0d":"# train[\"question_text\"] = train[\"question_text\"].progress_apply(lambda x: clean_contractions(x, contraction_mapping))\n# sentences = train[\"question_text\"].apply(lambda x: x.split())\n# vocab = build_vocab(sentences)\n# oov = check_coverage(vocab,glove_emb)\n# oov[:10]","406ec0a8":"mispell_dict = {'colour': 'color', 'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater', 'cancelled': 'canceled', 'labour': 'labor', 'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ', 'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What', 'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can', 'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I', 'theBest': 'the best', 'howdoes': 'how does', 'mastrubation': 'masturbation', 'mastrubate': 'masturbate', \"mastrubating\": 'masturbating', 'pennis': 'penis', 'Etherium': 'Ethereum', 'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', 'airhostess': 'air hostess', \"whst\": 'what', 'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization', 'demonetisation': 'demonetization', 'pok\u00e9mon': 'pokemon'}\n\ndef correct_spelling(x, dic):\n    for word in dic.keys():\n        if word in x:\n            x = x.replace(word, dic[word])\n    return x","7fd9572c":"train_df[\"question_text\"] = train_df[\"question_text\"].progress_apply(lambda x: correct_spelling(x, mispell_dict))\ntest_df[\"question_text\"] = test_df[\"question_text\"].progress_apply(lambda x: correct_spelling(x, mispell_dict))\nsentences = train_df[\"question_text\"].apply(lambda x: x.split())\nvocab = build_vocab(sentences)\noov = check_coverage(vocab, emb_all)\noov[:10]","e2c50e0d":"go_to_more_common_words = {\n    'Redmi': 'Mobile',\n    'OnePlus': 'Mobile',\n    'Quorans': 'Quoran',\n    'cryptocurrencies': 'technology',\n    'Cryptocurrency': 'Technology',\n    'Blockchain': 'Technology',\n    'Upwork': 'Technology',\n    'HackerRank': 'Programming',\n}\n\ntrain_df[\"question_text\"] = train_df[\"question_text\"].progress_apply(lambda x: correct_spelling(x, go_to_more_common_words))\ntest_df[\"question_text\"] = test_df[\"question_text\"].progress_apply(lambda x: correct_spelling(x, go_to_more_common_words))\nsentences = train_df[\"question_text\"].apply(lambda x: x.split())\nvocab = build_vocab(sentences)\noov = check_coverage(vocab, emb_all)\noov[:10]","fd5371eb":"clean_memory(oov, vocab, sentences, mispell_dict, go_to_more_common_words, punct, punct_mapping, emb_all)","ef62c10e":"def load_all_emb(word_index):\n    def get_coefs(word,*arr): return word, np.asarray(arr, dtype='float32')\n    glove = dict(get_coefs(*o.split(\" \")) for o in tqdm(open(emb_path + '\/glove.840B.300d\/glove.840B.300d.txt')) if o.split(\" \")[0] in word_index)\n#     paragram = dict(get_coefs(*o.split(\" \")) for o in open(emb_path + '\/paragram_300_sl999\/paragram_300_sl999.txt', encoding=\"utf8\", errors='ignore') if len(o)>100 and o.split(\" \")[0] in word_index)\n    \n    global max_features\n    all_embs = np.stack(glove.values())\n    emb_mean, emb_std = all_embs.mean(), all_embs.std()\n#     emb_mean, emb_std = -0.005838499, 0.48782197\n    clean_memory(all_embs)\n\n    nb_words = min(max_features, len(word_index))\n    print(nb_words)\n    max_features = nb_words\n    embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, emb_size))\n    for word, i in tqdm(word_index.items()):\n        if i >= nb_words: continue\n        glove_vector = glove.get(word)\n#         paragram_vector = paragram.get(word)\n        paragram_vector = None\n        if glove_vector is not None and paragram_vector is not None:\n            embedding_matrix[i] = 0.7 * glove_vector + 0.3 * paragram_vector\n        elif glove_vector is not None:\n            embedding_matrix[i] = glove_vector\n        elif paragram_vector is not None:\n            embedding_matrix[i] = paragram_vector\n    clean_memory(glove_vector, paragram_vector, glove)\n            \n    return embedding_matrix","f9ece1b4":"emb_path = '\/kaggle\/input\/quora-insincere-questions-classification\/embeddings'\n# emb_path = '\/content'\ntokenizer = Tokenizer(num_words=max_features, filters=\"\")\ntokenizer.fit_on_texts(np.concatenate((train_df[\"question_text\"].values, test_df[\"question_text\"].values)))\nembeddings = load_all_emb(tokenizer.word_index)\n\nprint(max_features)","61dff564":"## split to train and val\ntrain_df, val_df = train_test_split(train_df, test_size=0.1, random_state=47)\n\n## fill up the missing values\ntrain_X = train_df[\"question_text\"].values\nval_X = val_df[\"question_text\"].values\ntest_X = test_df[\"question_text\"].values\n\n## 2nd type input\ntrain_X2 = train_df[['num_words', 'num_unique_words', 'num_chars']]\nval_X2 = val_df[['num_words', 'num_unique_words', 'num_chars']]\ntest_X2 = test_df[['num_words', 'num_unique_words', 'num_chars']]\n\n## Tokenize the sentences\ntrain_X = tokenizer.texts_to_sequences(train_X)\nval_X = tokenizer.texts_to_sequences(val_X)\ntest_X = tokenizer.texts_to_sequences(test_X)\n\n## Pad the sentences \ntrain_X = pad_sequences(train_X, maxlen=maxlen)\nval_X = pad_sequences(val_X, maxlen=maxlen)\ntest_X = pad_sequences(test_X, maxlen=maxlen)\n\n## Get the target values\ntrain_y = train_df['target'].values\nval_y = val_df['target'].values\n\nprint('Train shape: {}'.format(train_X.shape))\nprint('Validation shape: {}'.format(val_X.shape))\nprint('Test shape: {}'.format(test_X.shape))\n\nclean_memory(train_df, val_df, test_df)","b39422db":"print(\"Train shape: {}\".format(train_X.shape))\nprint(\"Validation shape: {}\".format(val_X.shape))","21f69a70":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau\nearly_stopping = EarlyStopping(monitor=\"val_f1\", patience=2, restore_best_weights=True, mode=\"max\")\nreduce_lr = ReduceLROnPlateau(monitor=\"val_f1\", mode=\"max\")\ncallbacks = [early_stopping, reduce_lr]","cb2a2c4c":"from keras import backend as K\n\ndef f1(y_true, y_pred):\n    '''\n    metric from here \n    https:\/\/stackoverflow.com\/questions\/43547402\/how-to-calculate-f1-macro-in-keras\n    '''\n    def recall(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\n    def precision(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n    precision = precision(y_true, y_pred)\n    recall = recall(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))","f915c18a":"train_X2.shape, train_X.shape, train_y.shape\n# train_X2.head()","69522b41":"from tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Input, Embedding, LSTM, Reshape, Flatten, BatchNormalization, GlobalAveragePooling1D, SpatialDropout1D, CuDNNGRU, CuDNNLSTM, Dense, Bidirectional, GlobalMaxPooling1D, Dropout, Conv1D, concatenate\nfrom tensorflow.python.keras.models import Model\n\n# 1st Input\ninp1 = Input(shape=(maxlen, ))\nx = Embedding(max_features, emb_size, weights=[embeddings], trainable=False)(inp1)\nx = SpatialDropout1D(0.4)(x)\nx = Bidirectional(CuDNNLSTM(128, return_sequences=True))(x)\n# x = Bidirectional(CuDNNGRU(40, return_sequences=True))(x)\nx = Conv1D(64, 1)(x)\n\n# avg_pool = GlobalAveragePooling1D()(x)\nmax_pool = GlobalMaxPooling1D()(x)\n\n# 2nd Input\ninp2 = Input(shape=(3, ))\ny = Dense(64)(inp2)\n\nxy = concatenate([max_pool, y], axis=1)\n# xy = Flatten()(xy)\nxy = Dense(128, activation=\"relu\")(xy)\nxy = Dropout(0.1)(xy)\nxy = BatchNormalization()(xy)\noutp = Dense(1, activation=\"sigmoid\")(xy)\n\nmodel = Model(inputs=[inp1, inp2], outputs=outp)\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=[f1])","9a6157cf":"model.summary()","b4d21a3d":"model.fit([train_X, train_X2], train_y, batch_size=512, epochs=20, validation_data=([val_X, val_X2], val_y), callbacks=callbacks, verbose=True)","4f7cce85":"clean_memory(train_X, train_y)","14f80ba6":"# from sklearn.metrics import f1_score\n# optimal = -100\n# optimal_point = 0\n# pred_val_y = model.predict(test_val_x)\n# for thresh in np.arange(0.1, 0.501, 0.01):\n#     thresh = np.round(thresh, 2)\n#     now_f1 = f1_score(test_val_y, (pred_val_y > thresh).astype(int))\n#     if now_f1 > optimal:\n#       optimal_point = thresh\n#       optimal = now_f1\n#     print(\"F1 score at threshold {0} is {1}\".format(thresh, now_f1))","fd30e27d":"# print(\"Optimal F1 {} on threshhold {}\".format(optimal, optimal_point))","e8dc313b":"pred_val_y = model.predict([val_X, val_X2], batch_size=512, verbose=1)\n\ndef scoring(y_true, y_proba, verbose=True):\n    from sklearn.metrics import roc_curve, precision_recall_curve, f1_score\n    from sklearn.model_selection import RepeatedStratifiedKFold\n\n    def threshold_search(y_true, y_proba):\n        precision , recall, thresholds = precision_recall_curve(y_true, y_proba)\n        thresholds = np.append(thresholds, 1.001) \n        F = 2 \/ (1\/precision + 1\/recall)\n        best_score = np.max(F)\n        best_th = thresholds[np.argmax(F)]\n        return best_th \n\n\n    rkf = RepeatedStratifiedKFold(n_splits=5, n_repeats=10)\n\n    scores = []\n    ths = []\n    for train_index, test_index in rkf.split(y_true, y_true):\n        y_prob_train, y_prob_test = y_proba[train_index], y_proba[test_index]\n        y_true_train, y_true_test = y_true[train_index], y_true[test_index]\n\n        # determine best threshold on 'train' part \n        best_threshold = threshold_search(y_true_train, y_prob_train)\n\n        # use this threshold on 'test' part for score \n        sc = f1_score(y_true_test, (y_prob_test >= best_threshold).astype(int))\n        scores.append(sc)\n        ths.append(best_threshold)\n\n    best_th = np.mean(ths)\n    score = np.mean(scores)\n\n    if verbose: print(f'Best threshold: {np.round(best_th, 4)}, Score: {np.round(score,5)}')\n\n    return best_th, score\n\noptimal_point1, optimal1 = scoring(val_y, pred_val_y)\nprint(\"Optimal F1 {} on threshhold {}\".format(optimal1, optimal_point1))","74f71559":"clean_memory(val_X, val_y, pred_val_y)","6fe0b4f4":"test_df.head()","a3a3ff84":"all_preds = model.predict([test_X, test_X2], batch_size=512, verbose=1)\npred_test_y = (np.array(all_preds) > optimal_point1).astype(np.int)","026adf1b":"pred_test_y1 = np.asarray([y[0] for y in pred_test_y])\npred_test_y1.shape\npred_test_y1[:10]","19572399":"submit_df = pd.DataFrame({\"qid\": test_df[\"qid\"], \"prediction\": pred_test_y1})\nsubmit_df.to_csv(\"submission.csv\", index=False)","75018308":"## Contaction Remove (don't need for glove)","7bc17e74":"# Increase Coverage","66e86263":"# Get embeddings","df901f7d":"## Text clean from punctuation","50a6c8bb":"# Simple Threshhold finding","f8b84dfb":"## Mis-spell clean","4b5a045d":"# Dataset Preparation","a8bf0935":"## Common words replace","3a2ae8f9":"# More complex threshold finding","2cab2016":"# Preprocessing"}}