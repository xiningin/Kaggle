{"cell_type":{"f99cc4ca":"code","f874672c":"code","22bae994":"code","4708091b":"code","a9a6e729":"code","bb4e2a69":"code","1575c683":"code","de092167":"code","d395661d":"code","704e7ed3":"code","4377f008":"code","97e90dfc":"code","59e61749":"code","ed3a3dbc":"code","b55fc003":"code","7a3b1314":"code","77b0d148":"code","43f13230":"code","908da4f4":"code","5ea5f471":"code","7a78fb7f":"code","2d4628c1":"code","ac6e0540":"code","20eb9865":"code","f6e62d07":"code","0b2633d8":"code","7f4d5764":"code","bdc40072":"code","945e3647":"code","3b648a97":"code","1e3c0eb4":"code","6312ea8c":"code","ebf84280":"code","cb985c93":"code","3b581193":"markdown","eb2b75c8":"markdown","2ad0b0d4":"markdown","b43d6895":"markdown","0e45da2c":"markdown","c7d8342c":"markdown"},"source":{"f99cc4ca":"import pandas as pd\nimport numpy as np \nfrom scipy.stats import norm\nfrom scipy.stats import skew\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import LinearRegression,Ridge, RidgeCV, ElasticNet, LassoCV, LassoLarsCV\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score","f874672c":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nprint(\"Train set size:\", train.shape)\nprint(\"Test set size:\", test.shape)","22bae994":"test_ID = test['Id']","4708091b":"train.head()","a9a6e729":"train.columns[train.isnull().any()]\n","bb4e2a69":"test.columns[test.isnull().any()]","1575c683":"all_data = pd.concat((train.loc[:,'MSSubClass':'SaleCondition'],\n                      test.loc[:,'MSSubClass':'SaleCondition']))","de092167":"#log transform the target:\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#log transform skewed numeric features:\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\nskewed_feats = train[numeric_feats].apply(lambda x: skew(x.dropna())) #compute skewness\nskewed_feats = skewed_feats[skewed_feats > 0.75]\nskewed_feats = skewed_feats.index\n\nall_data[skewed_feats] = np.log1p(all_data[skewed_feats])","d395661d":"all_data = pd.get_dummies(all_data)","704e7ed3":"all_data = all_data.fillna(all_data.mean())","4377f008":"all_data.columns[all_data.isnull().any()]","97e90dfc":"Ntrain = all_data[:train.shape[0]]\ntest = all_data[train.shape[0]:]\ny = train.SalePrice","59e61749":"lin_reg=LinearRegression()\n","ed3a3dbc":"def rmse_cv(model,cv=5):\n    rmse= np.sqrt(-cross_val_score(model, Ntrain, y, scoring=\"neg_mean_squared_error\", cv = 5))\n    return(rmse)","b55fc003":"print(rmse_cv(lin_reg).mean())","7a3b1314":"tree_reg = DecisionTreeRegressor()\n","77b0d148":"\nprint(rmse_cv(tree_reg).mean())","43f13230":"forest_reg = RandomForestRegressor()\n","908da4f4":"print(rmse_cv(forest_reg).mean())","5ea5f471":"from sklearn.linear_model import Ridge, RidgeCV","7a78fb7f":"ridge = Ridge()\nalphas = [0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 30, 50, 75]\ncv_ridge = [rmse_cv(Ridge(alpha = alpha)).mean() for alpha in alphas]","2d4628c1":"cv_ridge = pd.Series(cv_ridge, index = alphas)\ncv_ridge.plot(title = \"Validation - Just Do It\")\nplt.xlabel(\"alpha\")\nplt.ylabel(\"rmse\")","ac6e0540":"rmse_cv(Ridge(alpha = 10)).mean()","20eb9865":"ridge=Ridge(alpha=10)","f6e62d07":"cv_ridge.min()","0b2633d8":"model_lasso = LassoCV(alphas = [1, 0.1, 0.001, 0.0005]).fit(Ntrain, y)","7f4d5764":"rmse_cv(model_lasso).mean()","bdc40072":"# from sklearn.model_selection import GridSearchCV\n# # Various hyper-parameters to tune\n# xgb1 = xgb.XGBRFRegressor()\n# parameters = {'nthread':[4], #when use hyperthread, xgboost may become slower\n#               'subsample': [0.6,0.5,0.8,0.45,0.57],\n#               'max_depth': [3,4,5,6,7],\n#               'num_parallel_tree': [50,100],\n#               'colsample_bynode': [0.55,0.57,0.56,0.54]\n#               }\n\n# xgb_grid = GridSearchCV(xgb1,\n#                         parameters,\n#                         cv = 2,\n#                         n_jobs = 4,\n#                         verbose=True)\n\n# xgb_grid.fit(Ntrain, y)\n\n# print(xgb_grid.best_score_)\n# print(xgb_grid.best_params_)","945e3647":"xgb_rf= xgb.XGBRFRegressor(colsample_bynode=0.55, nthread= 4, subsample= 0.5,max_depth=7,num_parallel_tree= 50)\nrmse_cv(xgb_rf).mean()","3b648a97":"# from sklearn.model_selection import GridSearchCV\n# # Various hyper-parameters to tune\n# xgb1 = xgb.XGBRegressor()\n# parameters = {\n#         'learning_rate': [0.03, 0.04,0.02],\n#         'max_depth': [5],\n#         'min_child_weight': [4],\n#         'subsample': [0.69, 0.7,0.71],\n#         'colsample_bytree': [0.69,0.7,0.71],\n#         'n_estimators' : [480, 520, 500],\n#         'objective': ['reg:squarederror']\n#     }\n\n# xgb_grid = GridSearchCV(xgb1,\n#                         parameters,\n#                         cv = 2,\n#                         n_jobs = 2,\n#                         verbose=True)\n\n# xgb_grid.fit(Ntrain, y)\n\n# print(xgb_grid.best_score_)\n# print(xgb_grid.best_params_)","1e3c0eb4":"alphas=[x for x in range(800,1000,10)]\nalphas","6312ea8c":"alphas=[x for x in range(1000,1061,10)]\ncv_xgb = [rmse_cv(xgb.XGBRegressor(colsample_bytree= 0.70,learning_rate=0.03, max_depth= 5, \n                      min_child_weight= 4\n                      , nthread= 4,  subsample= 0.7,n_estimators = alpha)).mean() for alpha in alphas]\ncv_xgb = pd.Series(cv_xgb, index = alphas)\ncv_xgb.plot(title = \"Validation\")\nplt.xlabel(\"alpha\")\nplt.ylabel(\"rmse\")","ebf84280":"xgb_reg = xgb.XGBRegressor(colsample_bytree= 0.70,learning_rate=0.03, max_depth= 5, \n                      min_child_weight= 4\n                      , nthread= 4,  subsample= 0.7,n_estimators = 1020)\nrmse_cv(xgb_reg).mean()","cb985c93":"sub = pd.DataFrame()\nxgb_reg.fit(Ntrain,y)\nridge.fit(Ntrain,y)\nsub['Id'] = test_ID\nsub['SalePrice'] = np.expm1(0.5*xgb_reg.predict(test)+0.3*model_lasso.predict(test)+0.1*ridge.predict(test))\nsub.to_csv('enso.csv',index=False)","3b581193":"# XGBOOST:","eb2b75c8":"# Random Forests:","2ad0b0d4":"# Lasso Regression:","b43d6895":"# Ridge regularisation:","0e45da2c":"# Decision Trees:","c7d8342c":"# **Linear regression**:"}}