{"cell_type":{"bee8b93f":"code","61d65c91":"code","37642b4b":"code","fb1e0795":"code","2c47772c":"code","87c4fcfc":"code","1d0dd3c3":"code","b52951c8":"code","2ca141ec":"code","3dbb8c0a":"markdown","64276bec":"markdown","3f099126":"markdown"},"source":{"bee8b93f":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_regression\nfrom sklearn import metrics\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","61d65c91":"X,y,coef = make_regression(\n    n_samples=100,\n    n_features=1,\n    n_targets=1,\n    noise=15,\n    coef=True,\n    random_state=100\n)\nx = X.reshape((1,100))[0]\n\nx_train = x[:70]\nx_test = x[70:]\ny_train = y[:70]\ny_test = y[70:]","37642b4b":"plt.scatter(x,y)\nplt.show()","fb1e0795":"# mean x, y\nmx = sum(x_train)\/len(x_train)\nmy = sum(y_train)\/len(y_train)\n\n# SDx, SDy\nSDx = SDy = 0\nfor i in x_train:\n    SDx +=(i-mx)**2\nSDx = (SDx\/(len(x_train)-1))**(1\/2)\nfor i in y_train:\n    SDy +=(i-my)**2\nSDy = (SDy\/(len(y_train)-1))**(1\/2)\n\n# changing units of x, y\nux = []\nfor i in x_train:\n    ux.append((i-mx)\/SDx)\nuy = []\nfor i in y_train:\n    uy.append((i-my)\/SDy)\n    \n# correlation coefficient\nr = 0\nfor i in range(len(x_train)):\n    r +=ux[i]*uy[i]\nr = r\/len(x_train)   # if -1<r<1 than data have linear correlation","2c47772c":"# y = mx+b\nm = r*(SDy\/SDx)\nb = my - m*mx\npredict = []\nfor i in x_test:\n    predict.append(m*i+b)\n\nplt.scatter(x_test,y_test)\nplt.plot(x_test,predict,color=\"orange\")\nplt.show()\nprint(\"m={:.2f} | b={:.2f} | r2={:.2f}%\".format(m,b,metrics.r2_score(y_test,predict)*100))","87c4fcfc":"# ((mean(x)*mean(y))-mean(xy))\/(mean(x)^2-mean(x^2))\nmxy = 0\nfor i in range(len(x_train)):\n    mxy += x_train[i]*y_train[i]\nmxy = mxy\/len(x_train)\n\nmxs = 0\nfor i in x_train:\n    mxs += i**2\nmxs = mxs\/len(x_train)\n\nm2 = (((mx*my)-mxy)\/((mx**2)-mxs))\nb2 = my - m2*mx","1d0dd3c3":"predict2 = []\nfor i in x_test:\n    predict2.append(m2*i+b2)\n\nplt.scatter(x_test,y_test)\nplt.plot(x_test,predict2,color=\"lightgreen\")\nplt.show()\nprint(\"m={:.2f} | b={:.2f} | r2={:.2f}%\".format(m2,b2,metrics.r2_score(y_test,predict2)*100))","b52951c8":"X = np.vstack((np.ones(len(x)),x)).T\nY = np.array(y)\n\nX_train = X[:70]\nX_test = X[70:]\n\nY_train = Y[:70]\nY_test = Y[70:]","2ca141ec":"bhat = np.linalg.inv(X_train.T.dot(X_train)).dot(X_train.T).dot(Y_train) # minimize MSE function\npredict3 = X_test.dot(bhat)\n\nplt.scatter(x_test,y_test)\nplt.plot(x_test,predict3,color=\"red\")\nplt.show()\nprint(\"bhat={} -- r2={:.2f}% \".format(bhat,metrics.r2_score(Y_test,predict3)*100))","3dbb8c0a":"# 3. Matrix","64276bec":"# 1. Standard Deviation","3f099126":"# 2. Equivalent Formula"}}