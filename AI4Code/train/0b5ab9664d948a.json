{"cell_type":{"b8a62d78":"code","8fa44434":"code","16432565":"code","d13e17fe":"code","8020ee16":"code","12ad53b1":"code","c935a57c":"code","45965e81":"code","577970e6":"code","34c7a7c7":"code","0594fff9":"code","2fe9641e":"code","a525112f":"code","329dab20":"code","ad1accfb":"code","54af08e7":"code","cf3c1f9a":"code","95e0bd47":"code","de5c674b":"code","e2de3216":"code","055eef82":"code","7487544e":"code","3433b063":"code","ecbc6342":"code","97ffd67c":"code","2c610395":"code","b2c7e20c":"code","209f63f1":"code","026d2cfe":"code","cf96c2c6":"code","2df977dd":"code","c05c7fdc":"code","c1533226":"code","d190a906":"markdown","6875ad42":"markdown","c3723534":"markdown","539bb9d5":"markdown","1820db8c":"markdown","d8cee04a":"markdown","86282e10":"markdown","8449ee7e":"markdown","67679c19":"markdown","7618f3e7":"markdown","a3084279":"markdown","618ea74f":"markdown","476168d4":"markdown","be9069b1":"markdown","b546f0eb":"markdown","15e3c3e1":"markdown","5a4bd714":"markdown","e8b52d23":"markdown","c8d9e043":"markdown","dc3068c4":"markdown","2c6ebcfc":"markdown","88804aac":"markdown","894f054c":"markdown"},"source":{"b8a62d78":"#import libraries\nimport pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","8fa44434":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\ntrain.describe(include=\"all\")","16432565":"# get list of the features in dataset\ntrain.columns","d13e17fe":"train.sample(5)","8020ee16":"# check for null values\npd.isnull(train).sum()","12ad53b1":"#correlation between values\nfig, ax = plt.subplots(figsize=(7,7)) \nsns.heatmap(train.corr(), annot = True, fmt = \".2f\")\nplt.show()","c935a57c":"features = ['Sex', 'Pclass', 'SibSp', 'Parch', 'Embarked']\nfig, saxis = plt.subplots(1, len(features),figsize=(len(features) * 7,7))\nfor ind, x in enumerate(features):\n    print('Survival Correlation by:', x)\n    print(train[[x, \"Survived\"]].groupby(x, as_index=False).mean()) \n    print('-'*10, '\\n')\n    sns.barplot(x, y=\"Survived\", data=train, ax = saxis[ind])","45965e81":"#sort the ages into logical categories\nbins = [0, 3, 13, 17, 60, np.inf]\nlabels = ['baby', 'child', 'teenager', 'adult', 'elderly']\nage_groups = pd.cut(train.Age, bins, labels = labels)\ntrain['AgeGroup'] = age_groups\n\n#draw a bar plot of Age vs. survival\nsns.barplot(x=\"AgeGroup\", y=\"Survived\", data=train)\nplt.show()","577970e6":"train[\"CabinBool\"] = (train[\"Cabin\"].notnull().astype('int'))\ntest[\"CabinBool\"] = (test[\"Cabin\"].notnull().astype('int'))\n\n#calculate percentages of CabinBool vs. survived\n\nprint('Survival Correlation by: Cabin')\nprint(train[[\"CabinBool\", \"Survived\"]].groupby(\"CabinBool\", as_index=False).mean()) \n\n#draw a bar plot of CabinBool vs. survival\nsns.barplot(x=\"CabinBool\", y=\"Survived\", data=train)\nplt.show()","34c7a7c7":"test.describe(include=\"all\")","0594fff9":"#Combining Training and Test data for cleaning and transforming\nall_data = pd.concat([train, test], ignore_index=True)\nprint(all_data.shape)","2fe9641e":"#complete embarked with mode\nall_data['Embarked'].fillna(all_data['Embarked'].mode()[0], inplace = True)\n\n#complete missing fare with median\nall_data['Fare'].fillna(all_data['Fare'].median(), inplace = True)\n","a525112f":"#extract a title for each Name \nall_data['Title'] = all_data.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\nall_data['Title'].value_counts()","329dab20":"frequent_titles = all_data['Title'].value_counts()[:5].index.tolist()\nfrequent_titles","ad1accfb":"# keep only the most frequent titles\nall_data['Title'] = all_data['Title'].apply(lambda x: x if x in frequent_titles else 'Other')","54af08e7":"# fill missing age with median age group for each title\nmedian_ages = {}\n# calculate median age for different titles\nfor title in frequent_titles:\n    median_ages[title] = all_data.loc[all_data['Title'] == title]['Age'].median()\nmedian_ages['Other'] =  all_data['Age'].median()\nall_data.loc[all_data['Age'].isnull(), 'Age'] = all_data[all_data['Age'].isnull()]['Title'].map(median_ages)","cf3c1f9a":"all_data.head()","95e0bd47":"from sklearn.preprocessing import LabelEncoder\n\nCat_Features = ['Sex', 'Embarked', 'Title']\nfor feature in Cat_Features:\n    label = LabelEncoder()\n    all_data[feature] = label.fit_transform(all_data[feature])","de5c674b":"#Creating frequency bins for continuous variables and encoding\nCont_Features = ['Age', 'Fare']\nnum_bins = 5\nfor feature in Cont_Features:\n    bin_feature = feature + 'Bin'\n    all_data[bin_feature] = pd.qcut(all_data[feature], num_bins)\n    label = LabelEncoder()\n    all_data[bin_feature] = label.fit_transform(all_data[bin_feature])","e2de3216":"all_data.head()","055eef82":"all_data['Surname'] = all_data.Name.str.extract(r'([A-Za-z]+),', expand=False)\nall_data['TicketPrefix'] = all_data.Ticket.str.extract(r'(.*\\d)', expand=False)\nall_data['Surname_Ticket'] = all_data['Surname'] + all_data['TicketPrefix']\nall_data['IsFamily'] = all_data.Surname_Ticket.duplicated(keep=False).astype(int)","7487544e":"all_data['Child'] = all_data.Age.map(lambda x: 1 if x <=16 else 0)\nFamilyWithChild = all_data[(all_data.IsFamily==1)&(all_data.Child==1)]['Surname_Ticket'].unique()\nlen(FamilyWithChild)","3433b063":"all_data['FamilyId'] = 0\nfor ind, identifier in enumerate(FamilyWithChild):\n all_data.loc[all_data.Surname_Ticket==identifier, ['FamilyId']] = ind + 1","ecbc6342":"all_data['FamilySurvival'] = 1 \nSurvived_by_FamilyId = all_data.groupby('FamilyId').Survived.sum()\nfor i in range(1, len(FamilyWithChild)+1):\n   if Survived_by_FamilyId[i] >= 1:\n      all_data.loc[all_data.FamilyId==i, ['FamilySurvival']] = 2\n   elif Survived_by_FamilyId[i] == 0:\n      all_data.loc[all_data.FamilyId==i, ['FamilySurvival']] = 0\nsns.barplot(x='FamilySurvival', y='Survived', data=all_data)\nplt.show()","97ffd67c":"train = all_data[: len(train)]\ntest = all_data[len(train):]\ntrain.shape","2c610395":"train.columns","b2c7e20c":"X_train = train[['Pclass', 'Sex', 'Parch', 'Embarked', 'CabinBool', 'Title', 'AgeBin', 'FareBin', 'FamilySurvival']]\ny_train = train['Survived']","209f63f1":"from catboost import CatBoostClassifier\n\nmodel = CatBoostClassifier(verbose=False)","026d2cfe":"#Identifying the most important features\nmodel.fit(X_train,y_train)\nimportance = pd.DataFrame({'feature':X_train.columns, 'importance': model.feature_importances_})\nimportance.sort_values('importance', ascending=False).set_index('feature').plot(kind='barh', color =\"maroon\") \nplt.show()","cf96c2c6":"main_features = ['Sex', 'FamilySurvival', 'FareBin', 'Pclass', 'Title']\n\n\nX_test = test[main_features]\nX_train = train[main_features]","2df977dd":"from sklearn.model_selection import cross_val_score\n\ncross_val_score(estimator=model, X=X_train, y=y_train, cv=5).mean()","c05c7fdc":"from sklearn.model_selection import cross_val_score, cross_validate\nfrom sklearn.ensemble import VotingClassifier, RandomForestClassifier, AdaBoostClassifier, ExtraTreesClassifier\nfrom sklearn import svm, neighbors\nfrom xgboost import XGBClassifier\n\nensemble = [CatBoostClassifier(verbose=False), RandomForestClassifier(), svm.NuSVC(probability=True), neighbors.KNeighborsClassifier()]\n\nclassifiers_with_names = []\n_ = [classifiers_with_names.append((clf.__class__.__name__, clf)) for clf in ensemble]\nvoting = VotingClassifier(classifiers_with_names, voting='hard')\n\ncv_results = cross_validate(voting, X_train, y_train, cv=5)\nprint(cv_results['test_score'].mean())\n\nvoting.fit(X_train, y_train)\npredictions = voting.predict(X_test)","c1533226":"#Creating Submission File\noutput = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictions.astype(int)})\noutput.to_csv('submission.csv', index=False)","d190a906":"Encode each family with children and assign 0 for others.","6875ad42":"<a id=\"ch4\"><\/a>\n## 4. Feature Creation","c3723534":"* We have a total of 418 passengers.\n* 1 value from the Fare feature is missing.\n* Around 20.5% of the Age feature is missing, we will need to fill that in.","539bb9d5":"<a id=\"ch2\"><\/a>\n## 2. Data Analysis and Visualization","1820db8c":"**CONTENT OF TITANIC EDA**\n  \n[1. Load and Explore Data](#ch1)\n\n[2. Data Analysis and Visualization](#ch2)\n\n[3. Cleaning and Transforming the Data](#ch3)\n\n[4. Feature Creation](#ch4)\n\n[5. Model and Feature Selection](#ch5)","d8cee04a":"<a id=\"ch1\"><\/a>\n## Load and Explore Data","86282e10":"### Filling the age feature\nIt wouldn't give good result to fill in all the same if there are too many missing values. Let's try to find a way to estimate the missing ages.","8449ee7e":"The survival probability decreases with age.","67679c19":"Some observations: \n\n* Females have a much higher chance of survival than males. \n* People with higher socioeconomic class have a higher rate of survival.\n* People with no siblings or partners are less likely to survive than those with one or two.\n* People with less than four parents or children aboard are more likely to survive than those with four or more. ","7618f3e7":"Now , we splitting back Train and Test data","a3084279":"<a id=\"ch3\"><\/a>\n## 3.Cleaning and Transforming the Data","618ea74f":"For each family of above, if there is at least one survived, we assume the others can survive too.","476168d4":"Let's use `sample()` to get an idea of the variables","be9069b1":"Use `LabelEncoder` for categorical features","b546f0eb":"Choose the most important features based on their importance and the cross validation score","15e3c3e1":"Let's read our training and testing data using `pd.read_csv` and and take a first look at the training data using the `describe()` function.","5a4bd714":"## Encoding categorical features with non-numerical values","e8b52d23":"I think people with registered cabin numbers are more likely to survive because they are in a higher socioeconomic class.","c8d9e043":"* There are 891 passengers in total.\n* The age feature is missing about 20% of their values. I think the age factor is important for survival. So we will prefer to fill gaps in rather than subtract.\n* I think cabin values are important too.But  approximately 77% of values are missing.Therefore, trying to fill in these values may not give accurate results. We will probably exclude these values from our dataset.\n","dc3068c4":"Let's see how our test data looks!","2c6ebcfc":"<a id=ch5><\/a>\n## 5. Model and Feature Selection","88804aac":"We will create an additional feature that can improve the model. We discovered that members of families with children were more likely to survive. So, we will look at the passengers' surnames to find people who could be family.","894f054c":"Now we can extract features that we no longer need."}}