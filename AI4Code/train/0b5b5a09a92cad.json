{"cell_type":{"1ada302d":"code","6cb9814f":"code","f3a5dcf3":"code","9b37c45b":"code","f0ca629a":"code","9638d3e1":"code","ce997521":"code","401564ac":"code","16ce0162":"code","1d8f7687":"code","cee5501d":"code","1732cc7b":"code","47f7aa37":"code","564cfddf":"code","fb8e3e39":"code","3fcbd1c7":"code","43ba1e70":"code","abfd8faf":"code","44645e5e":"code","2c5b0df6":"code","39f1903f":"code","7eb59fb5":"code","52583285":"code","c06ebeb2":"markdown","1d4be166":"markdown","41c464c8":"markdown","f5c6a61b":"markdown","1d4aadc9":"markdown","a8c9fbe6":"markdown","69f33486":"markdown","ec30576d":"markdown","ef2502d1":"markdown","c390e9ba":"markdown","5c71ac2b":"markdown","dc792228":"markdown","8f47f387":"markdown","e3439c03":"markdown","3ec1b506":"markdown","018f9313":"markdown","c46d0c68":"markdown","14724df3":"markdown","a71bac39":"markdown","e13f3e9a":"markdown","5ed98a74":"markdown"},"source":{"1ada302d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split #Spliting\nfrom sklearn.neighbors import KNeighborsClassifier #KNN\nfrom sklearn.linear_model import LogisticRegression #Logistic Regression\n\nimport warnings as wrn\nwrn.filterwarnings('ignore')\n\nimport plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6cb9814f":"data = pd.read_csv('\/kaggle\/input\/pokemon-challenge\/pokemon.csv')","f3a5dcf3":"data.head()","9b37c45b":"data.info()","f0ca629a":"data.isnull().sum()","9638d3e1":"fig,ax = plt.subplots(figsize=(12,8))\nsns.countplot(data.Legendary,ax=ax)\nplt.show()","ce997521":"fig,ax = plt.subplots(figsize=(12,8))\nsns.countplot(data.Legendary,hue=data[\"Type 1\"],ax=ax)\nplt.show()","401564ac":"fig,ax = plt.subplots(figsize=(10,10))\nsns.heatmap(data.corr(),annot=True,linewidth=1.5)\nplt.show()\n","16ce0162":"data.drop([\"Name\",\"#\"],axis=1,inplace=True)\n","1d8f7687":"data.head()","cee5501d":"data.Legendary = data.Legendary.astype(int)","1732cc7b":"data.head()","47f7aa37":"type1 = list(data[\"Type 1\"].unique())\ntype2 = list(data[\"Type 2\"].unique())\ntype2.remove(np.nan)\n\n\nprint(type1,\"\\n\")\nprint(type2)\n","564cfddf":"type1 = list(zip(type1,[i for i in range(1,len(type1)+1)]))\ntype2 = list(zip(type2,[i for i  in range(1,len(type2)+1)]))\n\nprint(type1,\"\\n\")\nprint(type2)","fb8e3e39":"data2 = data.copy()\ntype1_list = [i for i in range(0,len(data))]\nfor type_,value in type1:\n    \n    index = data[data[\"Type 1\"] == type_].index.values\n    for ind in index:\n        type1_list[ind] = value\n\n        \ntype2_list = [0 if type(each)==type(np.nan) else each for each in data[\"Type 2\"]]\n\nfor type_,value in type2:\n    \n    index = data[data[\"Type 2\"] == type_].index.values\n    for ind in index:\n        type2_list[ind] = value","3fcbd1c7":"print(type1_list[0:10])\n\nprint(type2_list[0:10])","43ba1e70":"data[\"Type 1\"] = type1_list\ndata[\"Type 2\"] = type2_list\ndata.head()","abfd8faf":"data.dtypes","44645e5e":"data = (data-np.min(data)) \/ (np.max(data)-np.min(data))\ndata.head()","2c5b0df6":"x = data.drop(\"Legendary\",axis=1)\ny = data[\"Legendary\"]\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=1)","39f1903f":"knn = KNeighborsClassifier(n_neighbors=10)\n\nknn.fit(x_train,y_train)\n\nprint(knn.score(x_test,y_test))","7eb59fb5":"data2.head() # It is a copy of dataset\nx2 = data2.drop([\"Type 1\",\"Type 2\",\"Legendary\"],axis=1) # I am going to drop them\ny2 = data2.Legendary\nx_train2,x_test2,y_train2,y_test2 = train_test_split(x2,y2,test_size=0.2,random_state=1)\n\nknn2 = KNeighborsClassifier(n_neighbors=10)\nknn2.fit(x_train2,y_train2)\nprint(knn2.score(x_test2,y_test2))\n","52583285":"lr = LogisticRegression() #I've created my model using SKLearn\n\nlr.fit(x_train,y_train) # I've trained my model with my arrays\n\nprint(lr.score(x_test,y_test)) #I've tested my model ","c06ebeb2":"* As we can see there is not strong correlation from 0.51","1d4be166":"And now I want to see the correlation between features. In order to do this I am going to use seaborn library's heatmap.","41c464c8":"* As we can see legendary pokemons are very rare. ","f5c6a61b":"## Converting Legendary Feature to Int64 \n\nIn this sub-section I am going to convert legendary feature to int64. ","1d4aadc9":"# Conclusion\n\nThanks for your attention, if you leave a comment and upvote I will be happy.\n\n*Please contact me if there is a problem in this kernel (like language problems)*","a8c9fbe6":"## Converting Type Features to Int64\n\nIn this sub-section I am going to convert type1 and type2 feature to int64, In order to do this I am going to give a number of each type. Like; Grass => 1 Fire => 2 ","69f33486":"As we can see, score is same with KNN, it is interesting, I am a beginner in machine learning and I was expecting a different score than others. \n\n*You can write a comment about this, I was surprised.*","ec30576d":"# Legendary Prediction using Logistic Regression with SKLearn\n\nWe've tried KNN and now time to try logistic regression. In this section I am going to create a logistic regression model. I am going to use my first train-test split's arrays.","ef2502d1":"# Legendary Prediction using KNN Algorithm with SKLearn\n\nIn this section I am going to create a KNN Algorithm using our x_train and y_train arrays.","c390e9ba":"# Importing Libraries and Data\nIn this section I am going to import libraries and data that I will need I am going to import these libraries\n\n**Data Manipulating** : Pandas\n\n**Math and Machine Learning** : Numpy, SKLearn\n\n**Data Visualization**: matplotlib,seaborn,plotly\n\n**Filtering Unnecesary Warnings** : warnings","5c71ac2b":"In this kernel I am going to use pokemon.csv file","dc792228":"Our KNN score is %93. And now I am going to create a new model. In this new model, I am going to drop Type features. I am going to do this because  I want to see how much converted types affect our model.","8f47f387":"# Having An Idea About The Data\n\nBefore the preparing, we need to take a look at the data because we cannot prepare the data without any idea :)\n\nTherefore, I am going to use head(), info(), and isnull() functions.","e3439c03":"## Train Test Split\n\nIn this sub-section I am going to split dataframe two pieces, train and test","3ec1b506":"# Introduction\nHello people, welcome to my kernel! In this kernel I am going to predict whether pokemons are legendary. In order to predict, I am going to use KNN and Logistic Regression, after predictions I am going to compare scores of them.\n\nLet's take a look at our schedule\n\n# Schedule\n1. General Knowledge about Pokemon\n1. Importing Libraries and Data\n1. Having An Idea About The Data\n    * Explanation of Features\n1. Simple Exploratory Data Analysis\n1. Preparing Dataset For Machine Learning\n    * Dropping Unnecesary Features\n    * Converting Legendary Feature to Int64\n    * Converting Type Features to Int64\n    * Value Normalizing\n    * Train - Test Splitting\n1. Legendary Prediction using KNN Algorithm with SKLearn\n1. Legendary Prediction using Logistic Regression with SKLearn\n1. Conclusion","018f9313":"# Preparing Dataset for Machine Learning\n\nIn this section I am going to prepare data for machine learning.\n\n## Dropping Unnecesary Features\n\nYou know, there are unnecesary features in our dataset like index. In this sub-section I am going to drop them\n","c46d0c68":"## Value Normalizing\n\nIn this sub section I am going to normalize the values, because if we do not normalize values, there will be problems in our model","14724df3":"# General Knowledge About Pokemon\n\nPok\u00e9mon are creatures of all shapes and sizes who live in the wild or alongside humans. For the most part, Pok\u00e9mon do not speak except to utter their names. There are currently more than 700 creatures that inhabit the Pok\u00e9mon universe.\n\n*from nintendo.com*\n\n![pika.png](attachment:pika.png)\n\n*an instance for pokemons (pikachu)*","a71bac39":"And now I want to see how many legendary pokemons are in this dataset by type1 feature\n","e13f3e9a":"## Explanation of Features\n\n**#** : Index of pokemon\n\n**Name** : Name of pokemon\n\n**Type1** : First type of pokemon\n\n**Type2** : Second type of pokemon (if that exist)\n\n**HP** : health of pokemon\n\n**Attack** : attack power of pokemon\n\n**Defense** : defense power of pokemon\n\n**Sp. Atk** : Special attack power of pokemon\n\n**Sp. Def** : Special defence power of pokemon\n\n**Speed** :  speed of pokemon\n\n**Generation** : generation of pokemon ( 1 to 6)\n\n**Legendary** : is the pokemon legendary?\n","5ed98a74":"# Simple Exploratory Data Analyses\n\nIn this section I am going to do some EDA. I am going to start with a count plot. I want to see how many legendary pokemons are in this dataset. I am going to use seaborn for this."}}