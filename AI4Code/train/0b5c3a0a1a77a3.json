{"cell_type":{"1771d155":"code","37705cf5":"code","8107b4f1":"code","1ed2ecfb":"code","20a8b06f":"code","99c3a2fa":"code","6a21ee12":"code","c63332fc":"code","9a655c26":"code","45f5ce6b":"code","47a43ba0":"markdown"},"source":{"1771d155":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.datasets import make_regression\n\nfrom sklearn.metrics import r2_score","37705cf5":"class LinearRegression:\n    def __init__(self, learning_rate, iteration):\n        \"\"\"\n        :param learning_rate: A samll value needed for gradient decent, default value id 0.1.\n        :param iteration: Number of training iteration, default value is 10,000.\n        \"\"\"\n        self.m = None\n        self.n = None\n        self.w = None\n        self.lr = learning_rate\n        self.it = iteration\n\n    def cost_function(self, y, y_pred):\n        \"\"\"\n        :param y: Original target value.\n        :param y_pred: predicted target value.\n        \"\"\"\n        return (1 \/ (2*self.m)) * np.sum(np.square(y_pred - y))\n    \n    def hypothesis(self, weights, X):\n        \"\"\"\n        :param weights: parameter value weight.\n        :param X: Training samples.\n        \"\"\"\n        return np.dot(X, weights)\n\n    def train(self, X, y):\n        \"\"\"\n        :param X: training data feature values ---> N Dimentional vector.\n        :param y: training data target value -----> 1 Dimentional array.\n        \"\"\"\n        # Insert constant ones for bias weights.\n        X = np.insert(X, 0, 1, axis=1)\n        # Target value should be in the shape of (n, 1) not (n, ).\n        # So, this will check that and change the shape to (n, 1), if not.\n        try:\n            y.shape[1]\n        except IndexError as e:\n            # we need to change it to the 1 D array, not a list.\n            print(\"ERROR: Target array should be a one dimentional array not a list\"\n                  \"----> here the target value not in the shape of (n,1). \\nShape ({shape_y_0},1) and {shape_y} not match\"\n                  .format(shape_y_0 = y.shape[0] , shape_y = y.shape))\n            return \n        \n        # m is the number of training samples.\n        self.m = X.shape[0]\n        # n is the number of features.\n        self.n = X.shape[1]\n\n        # Set the initial weight.\n        self.w = np.zeros((self.n , 1))\n\n        for it in range(1, self.it+1):\n            # 1. Find the predicted value through the hypothesis.\n            # 2. Find the Cost function value.\n            # 3. Find the derivation of weights.\n            # 4. Apply Gradient Decent.\n            y_pred = self.hypothesis(self.w, X)\n\n            cost = self.cost_function(y, y_pred)\n            # fin the derivative.\n            dw = (1\/self.m) * np.dot(X.T, (y_pred - y))\n\n            # change the weight parameter.\n            self.w = self.w - self.lr * dw\n\n            if it % 1000 == 0:\n                print(\"The Cost function for the iteration {}----->{} :)\".format(it, cost))\n    def predict(self, test_X):\n        \"\"\"\n        :param test_X: feature values to predict.\n        \"\"\"\n        # Insert constant ones for bias weights\n        test_X = np.insert(test_X, 0, 1, axis=1)\n        y_pred = self.hypothesis(self.w, test_X)\n        return y_pred\n    \n","8107b4f1":"# Define the traning data.\nX, y = make_regression(n_samples=50000, n_features=8)\n\n# Chnage the shape of the target to 1 dimentional array.\ny = y[:, np.newaxis]\n\nprint(\"=\"*100)\nprint(\"Number of training data samples-----> {}\".format(X.shape[0]))\nprint(\"Number of training features --------> {}\".format(X.shape[1]))\nprint(\"Shape of the target value ----------> {}\".format(y.shape))","1ed2ecfb":"# display the data.\ndata = pd.DataFrame(X)\ndata.head()","20a8b06f":"# display the data.\ndata_y = pd.DataFrame(y)\ndata_y.head()","99c3a2fa":"#define the parameters\nparam = {\n    \"learning_rate\" : 0.1,\n    \"iteration\" : 10000\n}\nprint(\"=\"*100)\nlinear_reg = LinearRegression(**param)\n\n# Train the model.\nlinear_reg.train(X, y) \n\n# Predict the values.\ny_pred = linear_reg.predict(X)\n\n#Root mean square error.\nscore = r2_score(y, y_pred)\nprint(\"The r2_score of the trained model\", score)","6a21ee12":"from sklearn.linear_model import LinearRegression as LinearRegression_sklearn\nfrom sklearn.metrics import r2_score","c63332fc":"# data is already defined, going to use the same data for comparision.\nprint(\"=\"*100)\nprint(\"Number of training data samples-----> {}\".format(X.shape[0]))\nprint(\"Number of training features --------> {}\".format(X.shape[1]))","9a655c26":"linear_reg_sklearn = LinearRegression_sklearn()\nlinear_reg_sklearn.fit(X, y)\n\n# predict the value\ny_pred_sklearn = linear_reg_sklearn.predict(X)\nscore = r2_score(y, y_pred_sklearn)\nprint(\"=\"*100)\nprint(\"R2 score of the model is {}\".format(score))","45f5ce6b":"# Conclution:\n# Our model works well as the scikit learn on speed and accuracy.","47a43ba0":"# Lienar Regression using Skicit-Learn"}}