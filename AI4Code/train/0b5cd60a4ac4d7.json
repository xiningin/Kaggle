{"cell_type":{"fc33b6f4":"code","2a117715":"code","39139898":"code","e87caa84":"code","594cb42b":"code","f488ef8c":"code","5daf77c0":"code","62251ce2":"code","22771ab3":"code","3fb88c8c":"code","b4963b51":"code","ecc838d8":"code","c27a56b7":"code","4a8a4f98":"code","935bb8d2":"code","ffc32974":"code","e3774c30":"code","4362c5e2":"code","ec72287f":"code","48209bdf":"code","de0c023c":"code","400303d7":"code","5a977d31":"code","91dad43b":"code","b4232e1c":"code","562a2c7b":"code","23e8ac9c":"markdown","8dd4456d":"markdown","5c071029":"markdown","4301afa0":"markdown","7a043f56":"markdown"},"source":{"fc33b6f4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D , MaxPooling2D , Flatten , Dropout , BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom keras.callbacks import ReduceLROnPlateau\nimport cv2\nimport os","2a117715":"labels = ['PNEUMONIA', 'NORMAL']\nimg_size = 184\ndef datafunc(data_dir):\n    data = [] \n    for label in labels: \n        path = os.path.join(data_dir, label)\n        class_num = labels.index(label)\n        for img in os.listdir(path):\n            try:\n                img_arr = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n                img_arr = cv2.cvtColor(img_arr,cv2.COLOR_GRAY2RGB)               \n                resized_arr = cv2.resize(img_arr, (img_size, img_size)) \n                data.append([resized_arr, class_num])\n            except Exception as e:\n                print(e)\n    return np.array(data)","39139898":"train = datafunc('..\/input\/pneumonia\/data\/train')\ntest = datafunc('..\/input\/pneumonia\/data\/test')\nval = datafunc('..\/input\/pneumonia\/data\/val')","e87caa84":"trainlabel = []\nfor img in train:\n    if(img[1] == 0):\n        trainlabel.append(\"Pneumonia\")\n    else:\n        trainlabel.append(\"Normal\")\nsns.countplot(trainlabel)        ","594cb42b":"plt.figure(figsize = (5,5))\nplt.imshow(train[0][0], cmap='gray')\nplt.title(labels[train[0][1]])\n\nplt.figure(figsize = (5,5))\nplt.imshow(train[-1][0], cmap='gray')\nplt.title(labels[train[-1][1]])","f488ef8c":"x_train = []\ny_train = []\n\nx_val = []\ny_val = []\n\nx_test = []\ny_test = []\n\nfor feature, label in train:\n    x_train.append(feature)\n    y_train.append(label)\n\nfor feature, label in test:\n    x_test.append(feature)\n    y_test.append(label)\n    \nfor feature, label in val:\n    x_val.append(feature)\n    y_val.append(label)","5daf77c0":"x_train = np.array(x_train)\/255.0\nx_test = np.array(x_test)\/255.0\nx_val = np.array(x_val)\/255.0","62251ce2":"x_train = (x_train.reshape(-1,img_size,img_size,3))\nx_test = (x_test.reshape(-1,img_size,img_size,3))\nx_val = (x_val.reshape(-1,img_size,img_size,3))\nx_train.shape","22771ab3":"y_train=np.array(y_train)\ny_test=np.array(y_test)\ny_val=np.array(y_val)","3fb88c8c":"from keras.models import Sequential\nfrom keras.models import Model\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler, EarlyStopping, ReduceLROnPlateau, TensorBoard\nfrom keras import optimizers, losses, activations, models\nfrom keras.layers import Convolution2D, Dense, Input, Flatten, Dropout, MaxPooling2D, BatchNormalization, GlobalAveragePooling2D, Concatenate\nfrom keras import applications\ninput_shape = (184,184,3)\n\nbase_model = keras.applications.VGG19(weights='imagenet', \n                                include_top=False, \n                                input_shape=(184,184,3))\nbase_model.trainable = False\n\nx = base_model.output\nx= Flatten()(x)\nx = Dense(4096, activation='relu')(x)\nx= BatchNormalization()(x)\nx=Dropout(0.5)(x)\nx= Dense(4096,activation='relu')(x)\nx= BatchNormalization()(x)\nx=Dropout(0.5)(x)\npredictions = Dense(2, activation='softmax')(x)\nfor layer in base_model.layers:\n    layer.trainable = False\nmodel=Sequential()\nmodel = Model(inputs=base_model.input, outputs=predictions)\nmodel.compile(loss='sparse_categorical_crossentropy', \n              optimizer=optimizers.SGD(lr=1e-4, momentum=0.9),\n              metrics=['accuracy'])","b4963b51":"model.summary()","ecc838d8":"datagen= ImageDataGenerator(zoom_range=0.2)","c27a56b7":"datagen.fit(x_train)","4a8a4f98":"from keras.callbacks import ModelCheckpoint, EarlyStopping\nhistory = model.fit(datagen.flow(x_train,y_train, batch_size = 32) ,epochs = 5 , validation_data = datagen.flow(x_val, y_val))","935bb8d2":"for i, layer in enumerate(base_model.layers):\n    print(i, layer.name)","ffc32974":"for layer in model.layers[:12]:\n    layer.trainable = False\nfor layer in model.layers[12:]:\n    layer.trainable = True","e3774c30":"model.compile(loss='sparse_categorical_crossentropy',optimizer=optimizers.SGD(lr=1e-4, momentum=0.9),metrics=['accuracy'])\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\ncheckpoint = ModelCheckpoint(\"vgg19.h5\", monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\nearly = EarlyStopping(monitor='val_acc', min_delta=0, patience=3, verbose=1, mode='auto')\nhistory = model.fit(datagen.flow(x_train,y_train, batch_size = 32) ,epochs = 9 , validation_data = datagen.flow(x_val, y_val),callbacks=[checkpoint,early])","4362c5e2":"print(\"Loss of the model is - \" , model.evaluate(x_test,y_test)[0])\nprint(\"Accuracy of the model is - \" , model.evaluate(x_test,y_test)[1]*100 , \"%\")","ec72287f":"print(history.history.keys())\n#  \"Accuracy\"\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()\n# \"Loss\"\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","48209bdf":"\npredictions = model.predict(x_test)\npredictions = predictions[:,0]\ni=0\nfor i in range(len(predictions)):\n    if predictions[i]>0.65:\n        predictions[i]=0\n    else:\n        predictions[i]=1\n","de0c023c":"cm = confusion_matrix(y_test,predictions)\nsns.heatmap(cm, annot=True)","400303d7":"cm","5a977d31":"(cm[0][0]+cm[1][1])\/624","91dad43b":"from sklearn.metrics import precision_score , recall_score\nprint(precision_score(y_test,predictions,average=None))\nprint(recall_score(y_test,predictions,average=None))","b4232e1c":"from sklearn.metrics import roc_curve,roc_auc_score\nfpr , tpr , thresholds = roc_curve ( y_test , predictions)\ndef plot_roc_curve(fpr,tpr): \n  plt.plot(fpr,tpr) \n  plt.axis([0,1,0,1]) \n  plt.xlabel('False Positive Rate') \n  plt.ylabel('True Positive Rate') \n  plt.show()    \n  \nplot_roc_curve (fpr,tpr) \nauc_score=roc_auc_score(y_test , predictions)  \nprint(auc_score)\n","562a2c7b":"model.save(\"vgg19.h5\")","23e8ac9c":"# Building the model","8dd4456d":"# Importing libraries","5c071029":"# Data processing","4301afa0":"# **Data segregation**","7a043f56":"# Training and visualizing the results"}}