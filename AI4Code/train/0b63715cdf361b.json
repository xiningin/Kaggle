{"cell_type":{"a4d55782":"code","493d2f1e":"code","0c00ecc0":"code","696b5845":"code","99befe6b":"code","15efa664":"code","319d5aad":"code","63079b73":"code","63dca865":"code","1c381dcb":"code","7b11f254":"code","664529f7":"code","ba6c67b0":"code","9a04a118":"code","e80280ca":"code","29626292":"code","bba0aec0":"code","dae5561e":"code","8b01b2e9":"code","24455394":"code","5ae68db8":"code","6923658a":"code","849b4328":"markdown","9cb4b2dc":"markdown","4fbc95c3":"markdown","1a289dc6":"markdown","dcd629da":"markdown","d1d38b0c":"markdown"},"source":{"a4d55782":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","493d2f1e":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pandas.api.types import is_string_dtype, is_numeric_dtype\n\ndf = pd.read_csv(\"..\/input\/weather-dataset-rattle-package\/weatherAUS.csv\")\ndf.head()","0c00ecc0":"df.describe()\ndf.shape","696b5845":"df.isnull().sum()\nmissing_count = df.isnull().sum() # the count of missing values\nvalue_count = df.isnull().count() # the count of all values \nmissing_percentage = round(missing_count \/ value_count * 100, 1) #the percentage of missing values\nmissing_df = pd.DataFrame({'count': missing_count, 'percentage': missing_percentage}) #create a dataframe\nprint(missing_df)","99befe6b":"# drop columns with a large of amount missing values\ndf = df.drop(['Evaporation', 'Sunshine', 'Cloud3pm', 'Cloud9am'], axis=1)\n\n# drop rows with missing labels - RainTomorrow\ndf = df.dropna(subset = [\"RainTomorrow\"])","15efa664":"df.shape","319d5aad":"num_list = []\ncat_list = []\n\nfor column in df:\n    if column != 'RainTomorrow': # separate lable\n        if is_numeric_dtype(df[column]):\n            num_list.append(column)\n        elif is_string_dtype(df[column]):\n            cat_list.append(column)\n\n\nprint(num_list)\nprint(cat_list)","63079b73":"# Numerical Variables: impute missing values with mean\ndf.fillna(df.mean(), inplace=True)","63dca865":"# Categorical Variables: replace missing values with \"Unknown\"\nfor i in (cat_list):\n    if df[i].isnull().any():\n        df[i].fillna(\"Unknown\", inplace=True)","1c381dcb":"df.describe(include = 'all')","7b11f254":"for column in df:\n    plt.figure(column, figsize = (5,5))\n    plt.title(column)\n    if is_numeric_dtype(df[column]):\n        df[column].plot(kind = 'hist')\n    elif is_string_dtype(df[column]):\n        # show only the TOP 10 value count in each categorical data\n        df[column].value_counts()[:10].plot(kind = 'bar')","664529f7":"# address outliers in \"Rainfall\"\nmaximum = df['Rainfall'].quantile(0.9)\ndf = df[df[\"Rainfall\"] < maximum]\ndf[\"Rainfall\"].plot(kind = 'hist')\ndf.shape","ba6c67b0":"# date manipulation\ndf['Month'] = pd.to_datetime(df['Date']).dt.month.apply(str)\ndf['Month'].value_counts().plot(kind = 'bar')","9a04a118":"# encoding categorical data using dummies\nfrom sklearn.preprocessing import LabelEncoder\n\ncategorical_features = ['Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm', 'RainToday', 'Month', 'RainTomorrow']\n\nfor i in categorical_features:\n    df[i] = LabelEncoder().fit_transform(df[i])","e80280ca":"# multivariate analysis\nplt.figure(1, figsize = (15,15))\ncorrelation = df.corr()\nsns.heatmap(correlation, cmap = \"GnBu\", annot = True)","29626292":"# select and rearrange columns\ndf = df[['Month','Location', 'MinTemp','MaxTemp', 'WindGustDir', 'WindGustSpeed', 'WindDir9am', 'WindDir3pm', \n         'WindSpeed9am', 'WindSpeed3pm', 'Humidity9am', 'Humidity3pm', 'Pressure3pm', 'RainToday', 'RainTomorrow']]","bba0aec0":"# X - input features matrix: select all rows using \":\" and select all columns before the last one using\":-1\"\nX = df.iloc[:,:-1]\n\n# y - output target vector: select all rows using \":\" and select the last column using \"-1\"\ny = df[\"RainTomorrow\"]","dae5561e":"# split into train and test set\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","8b01b2e9":"from sklearn.linear_model import LogisticRegression\nreg = LogisticRegression(max_iter = 300)\nreg.fit(X_train, y_train)\ny_pred = reg.predict(X_test)","24455394":"from sklearn import metrics\n\n# confusion matrix\nconfusion_matrix = metrics.plot_confusion_matrix(reg, X_test, y_test, cmap = \"GnBu\")\nprint(confusion_matrix)","5ae68db8":"# accuracy\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","6923658a":"# ROC curve and AUC\ny_pred_proba = reg.predict_proba(X_test)[:,1]\nfpr, tpr, threshold = metrics.roc_curve(y_test,  y_pred_proba)\nplt.plot(fpr,tpr)\n\nauc = metrics.roc_auc_score(y_test, y_pred_proba)\nprint(\"AUC:\", round(auc,2))","849b4328":"# Simple Logistic Regression using scikit-learn\nfor detailed walkthrough, please feel free to read the full articles \"https:\/\/medium.com\/p\/86bf984f61f1\"","9cb4b2dc":"# Handle Missing Values","4fbc95c3":"# Split Data","1a289dc6":"# Model Evaluation","dcd629da":"# Feature Engineering & EDA\n* exploratory data analysis\n* handle outliers\n* date manipulation\n* encoding categorical data","d1d38b0c":"# Model Building"}}