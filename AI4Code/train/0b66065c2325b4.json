{"cell_type":{"d966f873":"code","17c2a078":"code","b50630a8":"code","0473c356":"code","6b913dc0":"code","3bfebbc3":"code","757b80fd":"code","c88c7212":"code","c2d49dac":"code","fc84f64c":"code","dc6fdf67":"code","1e086c91":"code","27412ab0":"code","90881eac":"code","f7bb2217":"code","a965c878":"code","1938fcf2":"code","27593f3b":"code","bd7b05c2":"code","26323203":"code","421d9772":"code","ea058f33":"code","82ae18e9":"code","bc6c5711":"markdown","4d7631b0":"markdown","a78bdd92":"markdown","c8f161c6":"markdown","e10c0013":"markdown","6e4e28e3":"markdown","4ae2b885":"markdown","5a8df758":"markdown","a2533460":"markdown","59d6d4de":"markdown","e2fd1ed1":"markdown","3cac2694":"markdown","07cdaaf4":"markdown","9a51570a":"markdown"},"source":{"d966f873":"import pandas as pd\nimport numpy as np\nimport sklearn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler, Normalizer\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LassoCV, RidgeCV\nfrom yellowbrick.regressor import AlphaSelection\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.linear_model import ElasticNetCV\nfrom sklearn.ensemble import GradientBoostingRegressor, AdaBoostRegressor, StackingRegressor","17c2a078":"df = pd.read_csv(\"..\/input\/house-price-prediction-challenge\/train.csv\")\ndf.head()","b50630a8":"df.info()","0473c356":"df.isna().sum()","6b913dc0":"df.POSTED_BY.value_counts().plot(kind='barh')","3bfebbc3":"ax = df.groupby('UNDER_CONSTRUCTION').sum().iloc[:,-1].plot(kind='bar')","757b80fd":"ax = df.groupby('UNDER_CONSTRUCTION').sum().iloc[:, 2].plot(kind='bar')","c88c7212":"plt.figure(figsize=(20 ,5))\ndf.ADDRESS = df.ADDRESS.apply(lambda x: x.split(',')[-1])\ndf.ADDRESS.value_counts()[:20].plot(kind='bar')\nplt.show()","c2d49dac":"plt.figure(figsize=(20 ,20))\ndf.groupby(['ADDRESS']).sum().SQUARE_FT.nlargest(10).plot(kind='pie')\nplt.show()","fc84f64c":"plt.figure(figsize=(20 ,8))\ndf.groupby(['ADDRESS']).sum().UNDER_CONSTRUCTION.nlargest(10).plot(kind='bar')\nplt.show()","dc6fdf67":"# Convert BHK>=5 to 5\n\ndf['BHK_NO.'] = df['BHK_NO.'].apply(lambda x: x if x < 5 else 5)\ndf['BHK_NO.'].value_counts()","1e086c91":"# Converts not so common cities to others\n# Keeps only top 15 cities \n\ntop_cities = df.ADDRESS.value_counts().nlargest(15).index\ndf.ADDRESS = df.ADDRESS.apply(lambda x: x if x in top_cities else 'Other')\ndf.ADDRESS.value_counts()","27412ab0":"df.head()","90881eac":"def label_encoder(df, column_name):\n    label_encoder = preprocessing.LabelEncoder()\n\n    df[column_name]= label_encoder.fit_transform(df[column_name])\n    print(column_name)\n    for i in range(len(df[column_name].unique())):\n        print(\"For {} : {}\".format(i, label_encoder.inverse_transform([i])))\n    print('-'*10)\n    print(df[column_name].value_counts())\n    print('-'*10)\n    \n    return df[column_name], label_encoder","f7bb2217":"df['POSTED_BY'], label_encoder_posted_by = label_encoder(df, 'POSTED_BY')\ndf['BHK_OR_RK'], label_encoder_posted_by = label_encoder(df, 'BHK_OR_RK')\ndf['ADDRESS'], label_encoder_posted_by = label_encoder(df, 'ADDRESS')","a965c878":"df.head()","1938fcf2":"X = df.iloc[:, :-1]\ny = df.iloc[:, -1]","27593f3b":"scaler = StandardScaler()\nnorm = Normalizer()\n\nX_stand = scaler.fit_transform(X)\nX_norm = norm.fit_transform(X)","bd7b05c2":"X_stand_train, X_stand_test, y_stand_train, y_stand_test = train_test_split(X_stand, y, test_size=0.33, random_state=42)\nX_norm_train, X_norm_test, y_norm_train, y_norm_test = train_test_split(X_norm, y, test_size=0.33, random_state=42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","26323203":"def make_model(name, model):\n    clf = model.fit(X_train, y_train)\n    clf_stand = model.fit(X_stand_train, y_stand_train)\n    clf_norm = model.fit(X_norm_train, y_norm_train)\n    y_pred = clf.predict(X_test)\n    y_stand_pred = clf_stand.predict(X_stand_test)\n    y_norm_pred = clf_norm.predict(X_norm_test)\n    print(name)\n    print(\"For orignal:\")\n    print(\"R2 : \",r2_score(y_test, y_pred))\n    print(\"MSE : \",mean_squared_error(y_test, y_pred))\n    print(\"-\"*10)\n    print(\"For stand:\")\n    print(\"R2 : \",r2_score(y_stand_test, y_stand_pred))\n    print(\"MSE : \",mean_squared_error(y_stand_test, y_stand_pred))\n    print(\"-\"*10)\n    print(\"For normalized:\")\n    print(\"R2 : \",r2_score(y_norm_test,y_norm_pred))\n    print(\"MSE : \",mean_squared_error(y_norm_test, y_norm_pred))\n    print(\"=\"*10)\n    return clf, clf_stand, clf_norm","421d9772":"_,_, Linear = make_model(\"Linear Regression\", LinearRegression())\n_,_, Lasso = make_model(\"Lasso Regression\", LassoCV(cv=10))\n_,_, Ridge = make_model(\"Ridge Regression\", RidgeCV((0.1, 1.0, 5.0, 10)))\n_,_, ElasticNet = make_model(\"Elastic Net\", ElasticNetCV(l1_ratio=0.5))\n_,_, ElasticNet = make_model(\"Elastic Net\", ElasticNetCV())\n_,_, Gradient = make_model(\"Gradient\", GradientBoostingRegressor())\n_,_, AdaBoost = make_model(\"Ada\", AdaBoostRegressor())\n","ea058f33":"estimators = [('Gradient', Gradient),('svr', AdaBoost)]\nreg = StackingRegressor(estimators=estimators, final_estimator=LinearRegression())\nreg.fit(X_norm_train, y_norm_train)\ny_norm_pred = reg.predict(X_norm_test)","82ae18e9":"print(\"For normalized:\")\nprint(\"R2 : \",r2_score(y_norm_test,y_norm_pred))\nprint(\"MSE : \",mean_squared_error(y_norm_test, y_norm_pred))\nprint(\"=\"*10)","bc6c5711":"# EDA","4d7631b0":"**Infrences**: In most of the cases there is a Middle man","a78bdd92":"**Infrence**: Furnished Houses are more costlier than NON-Furnished","c8f161c6":"---","e10c0013":"---","6e4e28e3":"I will be using Gradient Model, has it has Max and Positive R2 Value","4ae2b885":"**Infrence**: Houses are more likely to be on sale after fully furnished","5a8df758":"**Infrences**: Top 10 cities, based on sum of area of house. **Banglore** TOPS","a2533460":"--- \n# Model","59d6d4de":"**Infrences**: Top 20 cities, based on count of houses","e2fd1ed1":"**Infrences**: Lalitpur has most unfurnished Houses followed by mumbai and banglore","3cac2694":"---","07cdaaf4":"There are no Missing Values","9a51570a":"# Imports"}}