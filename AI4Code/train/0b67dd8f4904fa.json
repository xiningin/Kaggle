{"cell_type":{"0163a043":"code","7f2c8874":"code","b678c247":"code","cb394b74":"code","c33b744b":"code","7f52fd59":"code","c0e29f59":"code","ba2aaa7d":"code","17ac9a90":"code","356ae4bd":"code","535b67fe":"code","9cc774af":"code","7c7db809":"code","6d73271b":"code","a2dce257":"code","00aaa0e1":"code","271f8886":"code","4c3abeb3":"code","5e8b1c25":"code","0ae4ee84":"code","67974bfb":"code","49024081":"code","37353f83":"code","97051cd9":"code","a16b4c62":"code","ca583842":"code","1ec8916b":"code","9577e44d":"code","2e8b0fea":"code","afefce7b":"code","e490c547":"code","1d5ebc20":"code","e6af58da":"code","edda6787":"code","e8a08c17":"code","1162927a":"code","61227df2":"code","d7027da9":"code","fa12ed7a":"code","fc7dcf38":"code","804186d9":"code","df913d91":"code","b35f6fcb":"code","090311b5":"code","22778b19":"code","12f8ba15":"code","ad073623":"code","e6169d1d":"code","2f38f1be":"code","d5554b11":"code","8298fae6":"code","226add11":"code","fde6b811":"code","5856fd31":"code","47f827f8":"code","9f43f7ef":"code","c611b82e":"code","076e1be2":"code","d14e4e1e":"code","3e67145d":"code","270a0a59":"code","25f8c6e1":"code","210b1fb3":"code","328ea068":"code","65181703":"code","d08fcdfb":"code","0812d4c4":"markdown","8c61670c":"markdown","0083b2a3":"markdown","8a73d7dd":"markdown","b98a0265":"markdown","09887ba7":"markdown","9fc6238c":"markdown","a7b9da5d":"markdown","21a69d2a":"markdown","a46096af":"markdown","f16f496f":"markdown","b3dbb6fb":"markdown","b3895ca6":"markdown","e19cef28":"markdown"},"source":{"0163a043":"import numpy as np # Multi-dimensional array object\nimport pandas as pd # Data Manipulation\nimport matplotlib.pyplot as plt # Data Visualization\nimport seaborn as sns # Data Visualization\nimport plotly.express as px # Interactive Data Visualization\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot # Offline version of the Plotly modules.\nimport cufflinks as cf # Works as a connector between the pandas library and plotly\ncf.go_offline() \n\n","7f2c8874":"#load data on dataframe\ncancer_df = pd.read_csv(\"\/kaggle\/input\/cervical-cancer-risk-classification\/kag_risk_factors_cervical_cancer.csv\")\n#display dataframe\ncancer_df.head()\n","b678c247":"#count of rows and columns\ncancer_df.shape","cb394b74":"# Get data frame info\ncancer_df.info()","c33b744b":"# Get the statistics of the data frame\ncancer_df.describe()","7f52fd59":"# Replace '?' with NaN\ncancer_df = cancer_df.replace('?', np.nan)\ncancer_df","c0e29f59":"cancer_df.isnull()","ba2aaa7d":"# Plot hearmap\nplt.figure(figsize =(15, 10))\nsns.heatmap(cancer_df.isnull(), yticklabels=False)","17ac9a90":"# Get data frame info\ncancer_df.info()","356ae4bd":"# Since STDs: Time since first diagnosis  and STDs: Time since last diagnosis have more than 80% missing values \n# we can drop them\ncancer_df = cancer_df.drop(columns = ['STDs: Time since first diagnosis','STDs: Time since last diagnosis'])\ncancer_df","535b67fe":"# Since most of the column types are object, we are not able to get the statistics of the dataframe.\n# Convert them to numeric type\n\ncancer_df = cancer_df.apply(pd.to_numeric)\ncancer_df.info()\n\n","9cc774af":"# Get the statistics of the dataframe\ncancer_df.describe()","7c7db809":"# Get the average for all the columns \ncancer_df.mean()","6d73271b":"# Replace null values with mean\ncancer_df = cancer_df.fillna(cancer_df.mean())\ncancer_df","a2dce257":"# Nan heatmap\nplt.figure(figsize =(15, 10))\nsns.heatmap(cancer_df.isnull(),yticklabels=False)","00aaa0e1":"# Get the correlation matrix\ncorr_matrix = cancer_df.corr()\ncorr_matrix","271f8886":"# Plot the correlation matrix\nplt.figure(figsize =(30,30))\nsns.heatmap(corr_matrix, annot = True)\nplt.show()","4c3abeb3":"# Positivity by Schiller\nax = sns.kdeplot(cancer_df.Schiller[(cancer_df[\"Biopsy\"] == 0)],\n               color = \"Red\", shade = True)\nax = sns.kdeplot(cancer_df.Schiller[(cancer_df[\"Biopsy\"] == 1)],\n               color = \"Blue\", shade = True)\n\nax.legend([\"Negative\", \"Positive\"], loc = \"upper right\")\nax.set_ylabel(\"Density\")\nax.set_xlabel(\"Schiller\")\nax.set_title(\"Distribution of Schiller by positivity\")","5e8b1c25":"# Positivity by Age\nax = sns.kdeplot(cancer_df.Age[(cancer_df[\"Biopsy\"] == 0)],\n               color = \"Red\", shade = True)\nax = sns.kdeplot(cancer_df.Age[(cancer_df[\"Biopsy\"] == 1)],\n               color = \"Blue\", shade = True)\n\nax.legend([\"Negative\", \"Positive\"], loc = \"upper right\")\nax.set_ylabel(\"Density\")\nax.set_xlabel(\"Age\")\nax.set_title(\"Distribution of Age by positivity\")","0ae4ee84":"# Check STDs:AIDS values\ncancer_df['STDs:AIDS']","67974bfb":"# Value count\ncancer_df['STDs:AIDS'].value_counts()","49024081":"cancer_df.hist(bins = 10, figsize = (30, 30), color= 'b') ","37353f83":"cancer_df['Biopsy'].value_counts()","97051cd9":"# Plot pie Chart to get the information about the percentage of positivity of Biopsy using Plotly histogram\n\nimport plotly.graph_objects as go\nfig=go.Figure(data=[go.Pie(labels=['Negative (0)', 'Positive (1)'], values=cancer_df['Biopsy'].value_counts())])\nfig.show()","a16b4c62":"# Plot histogram graph for the Schiller variable contribute to biopsy positivity\nfig=px.histogram(cancer_df, x='Schiller', color='Biopsy')\nfig.show()\n","ca583842":"# Assigning input_df as input and output_df as output\ny = cancer_df['Biopsy']\nX = cancer_df.drop(columns = ['Biopsy'])","1ec8916b":"y.shape","9577e44d":"X.shape","2e8b0fea":"cancer_df.info()","afefce7b":"# spliting the data in to test and train sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)\nprint(X_test.shape)\nprint(X_train.shape)\n","e490c547":"X_train","1d5ebc20":"X_test","e6af58da":"y_train","edda6787":"y_test","e8a08c17":"from sklearn.ensemble import RandomForestClassifier\n\nrf=RandomForestClassifier()\nrf.fit(X_train,y_train.values.ravel())","1162927a":"# Plot the feature importance\n\nfeat_scores= pd.DataFrame({\"Fraction of variables affected\" : rf.feature_importances_},index = X.columns)\nfeat_scores= feat_scores.sort_values(by = \"Fraction of variables affected\")\nfeat_scores.plot(kind = \"barh\", figsize = (10, 5))\nsns.despine()","61227df2":"cancer_df.info()","d7027da9":"cancer_df['Age'] = cancer_df['Age'].astype(float)\ncancer_df['STDs: Number of diagnosis'] = cancer_df['STDs: Number of diagnosis'].astype(float)\n\ncancer_df['Dx:Cancer'] = cancer_df['Dx:Cancer'].astype(float)\ncancer_df['Dx:CIN'] = cancer_df['Dx:CIN'].astype(float)\ncancer_df['Dx:HPV'] = cancer_df['Dx:HPV'].astype(float)\ncancer_df['Dx'] = cancer_df['Dx'].astype(float)\ncancer_df['Hinselmann'] = cancer_df['Hinselmann'].astype(float)\ncancer_df['Schiller'] = cancer_df['Schiller'].astype(float)\ncancer_df['Citology'] = cancer_df['Citology'].astype(float)\ncancer_df['Biopsy'] = cancer_df['Biopsy'].astype(float)\n","fa12ed7a":"cancer_df.info()","fc7dcf38":"from sklearn.calibration import CalibratedClassifierCV # For probability score output\nfrom sklearn.svm import LinearSVC\n\nmodel_svm=LinearSVC(max_iter=10000)\nmodel_svm=CalibratedClassifierCV(model_svm)\nmodel_svm.fit(X_train,y_train)\n","804186d9":"y_predict=model_svm.predict(X_test)","df913d91":"from sklearn.metrics import classification_report, confusion_matrix\nprint(classification_report(y_test,y_predict))","b35f6fcb":"cm=confusion_matrix(y_test,y_predict)\nsns.heatmap(cm, annot=True)","090311b5":"from sklearn.ensemble import RandomForestClassifier\n\nmodel_rf=RandomForestClassifier()\nmodel_rf.fit(X_train,y_train)\n","22778b19":"y_predict=model_rf.predict(X_test)","12f8ba15":"print(classification_report(y_test,y_predict))","ad073623":"cm=confusion_matrix(y_test,y_predict)\nsns.heatmap(cm,annot=True)","e6169d1d":"from sklearn.neighbors import KNeighborsClassifier\n\nmodel_knn=KNeighborsClassifier()\nmodel_knn.fit(X_train,y_train)","2f38f1be":"y_predict=model_knn.predict(X_test)","d5554b11":"print(classification_report(y_test,y_predict))","8298fae6":"cm=confusion_matrix(y_test,y_predict)\nsns.heatmap(cm,annot=True)","226add11":"from sklearn.naive_bayes import GaussianNB","fde6b811":"model_gnb=GaussianNB()\nmodel_gnb.fit(X_train, y_train)","5856fd31":"y_predict=model_gnb.predict(X_test)","47f827f8":"print(classification_report(y_test, y_predict))","9f43f7ef":"cm = confusion_matrix(y_test, y_predict)\nsns.heatmap(cm, annot = True)","c611b82e":"# TRAIN AND EVALUATE A NAIVE BAYES CLASSIFIER","076e1be2":"model_svm.predict_proba(X_test)","d14e4e1e":"model_svm.predict_proba(X_test)[:, 1]","3e67145d":"y_test","270a0a59":"# ROC curve\nfrom sklearn.metrics import roc_curve\n\nfpr1, tpr1, thresh1 = roc_curve(y_test, model_svm.predict_proba(X_test)[:, 1], pos_label = 1)\nfpr2, tpr2, thresh2 = roc_curve(y_test, model_rf.predict_proba(X_test)[:, 1], pos_label = 1)\nfpr3, tpr3, thresh3 = roc_curve(y_test, model_knn.predict_proba(X_test)[:, 1], pos_label = 1)\nfpr4, tpr4, thresh4 = roc_curve(y_test, model_gnb.predict_proba(X_test)[:, 1], pos_label = 1)\n\n","25f8c6e1":"# AUC score\n\nfrom sklearn.metrics import roc_auc_score\nauc_score1 = roc_auc_score(y_test, model_svm.predict_proba(X_test)[:, 1])\nauc_score2 = roc_auc_score(y_test, model_rf.predict_proba(X_test)[:, 1])\nauc_score3 = roc_auc_score(y_test, model_knn.predict_proba(X_test)[:, 1])\nauc_score4 = roc_auc_score(y_test, model_gnb.predict_proba(X_test)[:, 1])\n\n\n\nprint(\"Support Vector Machine: \", auc_score1) # Support Vector Machine\nprint(\"Random Forest: \", auc_score2) # Random Forest\nprint(\"K-Nearest Neighbors: \", auc_score3) # K-Nearest Neighbors\nprint(\"Naive Bayes: \", auc_score4) # Naive Bayes\n","210b1fb3":"plt.plot(fpr1, tpr1, linestyle = \"--\", color = \"red\", label = \"SVM\")\nplt.plot(fpr2, tpr2, linestyle = \"--\", color = \"green\", label = \"Random Forest\")\nplt.plot(fpr3, tpr3, linestyle = \"--\", color = \"purple\", label = \"KNN\")\nplt.plot(fpr4, tpr4, linestyle = \"--\", color = \"orange\", label = \"Naive bayes\")\n\n\nplt.title('Receiver Operator Characteristics (ROC)')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive rate')\n\nplt.legend(loc = 'best')\nplt.savefig('ROC', dpi = 300)\nplt.show()","328ea068":"fig,ax=plt.subplots(figsize=(30,20))\nax=sns.boxplot(y='Age', x='First sexual intercourse', hue='Biopsy',data=cancer_df)","65181703":"\ng=sns.catplot(y='Age',x='First sexual intercourse',hue='Biopsy', data=cancer_df,  height=25, palette=\"Set3\",\n                kind=\"violin\", dodge=True, cut=0, bw=.2)","d08fcdfb":"fig,ax=plt.subplots(figsize=(20,15))\nax=sns.barplot(y='Age',x='First sexual intercourse', hue='Biopsy', data=cancer_df)\nax.set(xlabel='First sexual intercourse', ylabel='Age')\nplt.show()","0812d4c4":"## PERFORM EXPLORATORY DATA ANALYSIS","8c61670c":"The graph represents that Random Forest algorithm produced the best AUC. Therefore, it is clear that Random Forest model did a better job of classifying the positivity and negativity of patients.","0083b2a3":"# TRAIN AND EVALUATE A SUPPORT VECTOR MACHINE CLASSIFIER\u00b6","8a73d7dd":"# Box Plot Analysis","b98a0265":"# Machine Learning in cervical cancer\n\nThe purpose of this work is to use various machine learning methods for training and evaluating cervical cancer.\n* Support Vector Machine Classifier\n* Random Forest Classifier\n* K-Nearest Neighbour (KNN)\n* Naive Bayes Classifier\n\nThe dataset is cleaned (to ensure no missing values, or missing values are replaced with mean values, data types are accurate etc) before performing exploratory analysis.\n\nThe ROC Curves for the 5 models is plotted, and AUC scores are determined.\n\nBox Plot, Catplot (Violin type) and Bar Plot are performed as well.","09887ba7":"# Dataset Overview\nThe dataset(kag_risk_factors_cervical_cancer.csv) was collected at 'Hospital Universitario de Caracas' in Caracas, Venezuela. The dataset comprises demographic information, habits, and historic medical records of 858 patients. Several patients decided not to answer some of the questions because of privacy concerns (missing values). This dataset focuses on the prediction of indicators\/diagnosis of cervical cancer. The features cover demographic information, habits, and historic medical records\n\n* Age\n* Number of sexual partners\n* First sexual intercourse (age)\n* Num of pregnancies\n* Smokes\n* Smokes (years)\n* Smokes (packs\/year)\n* Hormonal Contraceptives\n* Hormonal Contraceptives (years)\n* IUD (\"IUD\" stands for \"intrauterine device\" and used for birth control\n* IUD (years)\n* STDs (Sexually transmitted disease)\n* STDs (number)\n* STDs:condylomatosis\n* STDs:cervical condylomatosis\n* STDs:vaginal condylomatosis\n* STDs:vulvo-perineal condylomatosis\n* STDs:syphilis\n* STDs:pelvic inflammatory disease\n* STDs:genital herpes\n* STDs:molluscum contagiosum\n* STDs:AIDS\n* STDs:HIV\n* STDs:Hepatitis B\n* STDs:HPV\n* STDs: Number of diagnosis\n* STDs: Time since first diagnosis\n* STDs: Time since last diagnosis\n* Dx:Cancer\n* Dx:CIN\n* Dx:HPV\n* Dx\n* Hinselmann: - A colposcopy is a procedure in which doctors examine the cervix. \n* Schiller:  - Schiller's Iodine test is used for cervical cancer diagnosis\n* Cytology:  - Cytology is the exam of a single cell type used for cancer screening.\n* Biopsy: target variable - Biopsy is performed by removing a piece of tissue and examine it under microscope, \n* Biopsy is the main way doctors diagnose most types of cancer. ","9fc6238c":"# Bar Plot","a7b9da5d":"# Catplot (Violin type)","21a69d2a":"# TRAIN AND EVALUATE A K-NEAREST NEIGHBOUR (KNN)","a46096af":"# TRAIN AND EVALUATE A RANDOM FOREST CLASSIFIER","f16f496f":"# TRAIN AND EVALUATE A NAIVE BAYES CLASSIFIER","b3dbb6fb":"## IDENTIFY FEATURE IMPORTANCE & PREPARE THE DATA BEFORE TRAINING","b3895ca6":"# Conclusion\nThose who had their first sexual intercourse in between 15 and 18 years of their life are more prone to be tested positive with Biopsy test and those people are predominantly in the age group of 20 to 35.","e19cef28":"# PLOT ROC CURVES FOR THE 4 MODELS AND FIND AUC SCORES\u00b6"}}