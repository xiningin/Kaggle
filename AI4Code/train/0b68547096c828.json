{"cell_type":{"fb5d44bc":"code","b2bcf376":"code","fad97525":"code","4c43be30":"code","d0fd0e4b":"code","a18762ac":"code","e6323336":"code","53d65a85":"code","b2f6e31c":"code","0f839d51":"code","9285c19f":"code","0ce285ec":"code","d0956888":"code","95586e28":"code","9af3dd41":"code","00bb6490":"code","b27ae394":"code","4783fae5":"code","e2bbdb8d":"code","ea2c49ed":"code","19fbcb59":"code","58c16c6b":"code","fdf22e11":"code","c8bd941e":"code","e1ca18e2":"code","570e675f":"code","997ed821":"code","dc7afd32":"code","95d24949":"code","44ffb117":"code","a6953b3e":"code","9b9d90f6":"code","e904683d":"code","a090d265":"code","9019fada":"code","531afe9e":"code","6d009378":"code","f0736b8f":"code","350eb829":"code","b3ee6c7e":"code","d3c2457a":"code","64d9e4b6":"code","707dd485":"code","9f88ddb7":"code","1bde52e3":"code","25781c66":"code","f4fa2481":"code","3984a8cd":"code","5a30ccc5":"code","17d5ee23":"code","3c7516bb":"code","f8f29667":"code","bfb7c563":"code","9b862982":"code","2b523ffe":"code","29cbdcd4":"code","2be998a4":"code","b5608ee0":"code","9a71dc68":"code","fcd2e713":"markdown","ea72d0f9":"markdown","9e6b5240":"markdown","e7c1d780":"markdown","075efe7a":"markdown","1865362d":"markdown","380695ff":"markdown","7572b513":"markdown","82c8032f":"markdown","48926ec0":"markdown","9619c115":"markdown","8af282aa":"markdown","be5043ff":"markdown","31ff5824":"markdown","dd69be3d":"markdown","f0f056a4":"markdown","d6ea1a73":"markdown","39cfe479":"markdown","ae7e51e5":"markdown","784f9be4":"markdown","3516c1ab":"markdown","b154e0cf":"markdown","e70e3ee6":"markdown","c4cf28f1":"markdown","9fb95e70":"markdown","cfb82b2f":"markdown","605c085d":"markdown","3876c508":"markdown","7f75e1fd":"markdown","cfa9dc90":"markdown","95a77285":"markdown","02e6ad42":"markdown","d5107a7d":"markdown","1fdad7cf":"markdown","c072d8b3":"markdown","6375780c":"markdown","087f5a7e":"markdown","bcde277e":"markdown","08425c50":"markdown","4f0cafd9":"markdown","ba9eff11":"markdown","fe59113d":"markdown","1de9545c":"markdown","2594be91":"markdown","98e3e4e1":"markdown","2d28ba2f":"markdown","35e1608c":"markdown","966a0825":"markdown","b3202c8b":"markdown","74367018":"markdown"},"source":{"fb5d44bc":"import numpy as np\nnp.random.seed(101)\nimport requests\nimport time\nimport os\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport os\nimport re\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport sklearn.model_selection\nimport sklearn.linear_model\nimport sklearn.feature_selection\nimport sklearn.preprocessing\nimport sklearn.metrics\nimport keras.models\nimport keras.layers","b2bcf376":"properties = pd.read_csv(\"..\/input\/data_kaggle.csv\")","fad97525":"properties.head()","4c43be30":"properties = properties.loc[~properties[\"Price\"].isna()]","d0fd0e4b":"incorrect_entries = np.sum(~properties[\"Price\"].str.match(r\"RM [0-9,]*$\"))\nprint(\"There are {} entries in the wrong format.\".format(incorrect_entries))","a18762ac":"# Strip the price of the \"RM\" as well as commas\ndef strip_price(text):\n    text = text.replace(\"RM\", \"\")\n    text = text.replace(\",\", \"\")\n    text = text.strip()\n    return int(text)\n    \nproperties[\"Price\"] = properties[\"Price\"].apply(strip_price)","e6323336":"properties[\"Location\"] = properties[\"Location\"].str.lower()\nproperties[\"Location\"] = properties[\"Location\"].str.replace(r\", kuala lumpur$\", \"\")","53d65a85":"sorted(properties[\"Location\"].unique())","b2f6e31c":"properties[\"Location\"].value_counts().plot(logy=True);","0f839d51":"significant_locations = properties[\"Location\"].value_counts()[\n    properties[\"Location\"].value_counts() >= 100].index\n\nproperties = properties.loc[np.isin(properties[\"Location\"], significant_locations)]","9285c19f":"sorted(properties[\"Location\"].unique())","0ce285ec":"sorted(properties[\"Rooms\"].unique().astype(str))","d0956888":"def convert_room_num(rooms):\n    try:\n        if rooms.endswith(\"+\"):\n            return int(rooms[:-1])\n        if re.search(\"[0-9]+\\+[0-9]+\", rooms) is not None:\n            tmp = rooms.split(\"+\")\n            return int(tmp[0]) + int(tmp[1])\n        if rooms == \"20 Above\":\n            return 20\n        if rooms == \"Studio\":\n            return 1\n        return int(rooms)\n    except AttributeError:\n        return rooms\n\nproperties[\"Rooms Num\"] = properties[\"Rooms\"].apply(convert_room_num)","95586e28":"properties[\"Rooms Num\"].value_counts(dropna=False)","9af3dd41":"properties[\"Property Type\"].value_counts()","00bb6490":"def simplify_property_type(prop_type):\n    super_types = [\n        \"Terrace\/Link House\", \"Serviced Residence\", \"Condominium\", \n        \"Semi-detached House\", \"Bungalow\", \"Apartment\", \"Townhouse\", \n        \"Flat\", \"Residential Land\", \"Cluster House\"]\n    for super_type in super_types:\n        if re.search(super_type, prop_type, flags=re.IGNORECASE) is not None:\n            return super_type\n    \n    return prop_type\n\nproperties[\"Property Type Supergroup\"] = properties[\"Property Type\"].apply(simplify_property_type)","b27ae394":"properties[\"Property Type Supergroup\"].value_counts(dropna=False)","4783fae5":"properties[\"Furnishing\"].value_counts(dropna=False)","e2bbdb8d":"properties[[\"Size\"]].sample(25)","ea2c49ed":"def split_size(val, index=0):\n    try:\n        return val.split(\":\")[index].strip()\n    except AttributeError:\n        return val\n    \nproperties[\"Size Type\"] = properties[\"Size\"].apply(split_size, index=0)\nproperties[\"Size Num\"] = properties[\"Size\"].apply(split_size, index=1)","19fbcb59":"properties[\"Size Type\"].value_counts(dropna=False)","58c16c6b":"def convert_size_num(size):\n    # Attempt to trim the numbers down. Most of this is done explicitly without\n    # regex to avoid incorrect trimming, which would lead to the concatenation\n    # of numbers. I would rather have missing values than incorrectly cleaned\n    # numbers.\n    try:\n        # If it's not in square feet then I don't want to deal with all\n        # possible conversions for now.\n        if re.search(r\"sq\\.*\\s*ft\\.*\", size) is None:\n            return None\n    \n        size = size.replace(\",\", \"\")\n        size = size.replace(\"'\", \"\")\n        size = size.replace(\"sq. ft.\", \"\")\n        size = size.replace(\"sf\", \"\")\n        size = size.strip()\n        size = size.lower()\n        \n        add_mult_match = re.search(r\"(\\d+)\\s*\\+\\s*(\\d+)\\s*(?:x|\\*)\\s*(\\d+)\", size)\n        if add_mult_match is not None:\n            return int(add_mult_match.groups()[0]) + (\n                int(add_mult_match.groups()[1]) * \n                int(add_mult_match.groups()[2]))\n        \n        mult_match = re.search(r\"(\\d+)\\s*(?:x|\\*)\\s*(\\d+)\", size)\n        if mult_match is not None:\n            return int(mult_match.groups()[0]) * int(mult_match.groups()[1])\n        \n        return int(size)\n    # If any of the above doesn't work, just turn it into None\/NaN\n    # We want to guarantee this column is numeric\n    except:\n        return None\n        \nproperties[\"Size Num\"] = properties[\"Size Num\"].apply(convert_size_num)","fdf22e11":"print(\"Properties with missing raw size data: {}\".format(properties[\"Size\"].isna().sum()))\nprint(\"Properties with missing size type data: {}\".format(properties[\"Size Type\"].isna().sum()))\nprint(\"Properties with missing size num data: {}\".format(properties[\"Size Num\"].isna().sum()))","c8bd941e":"properties.loc[properties[\"Size Num\"].isna(), \"Size Type\"] = None","e1ca18e2":"properties.loc[:, \"Size Type\"].value_counts(dropna=False)","570e675f":"properties[\"Bathrooms\"].value_counts(dropna=False)","997ed821":"properties[\"Car Parks\"].value_counts(dropna=False)","dc7afd32":"properties[\"Price per Area\"] = properties[\"Price\"] \/ properties[\"Size Num\"]\nproperties[\"Price per Room\"] = properties[\"Price\"] \/ properties[\"Rooms Num\"]","95d24949":"properties.to_csv(\"Properties_preprocessed.csv\")","44ffb117":"def plot_by_neighborhood(feature, formatting, factor=1):\n    df = properties.groupby(\"Location\")[feature].median().sort_values(ascending=False).reset_index()\n    shift = 0.1 * (df[feature].max() - df[feature].min())\n    df_sizes = properties.groupby(\"Location\").size()[df[\"Location\"]]\n\n    fig = sns.catplot(\n        data=df, x=feature, y=\"Location\", kind=\"bar\", \n        color=\"darkgrey\", height=10, aspect=0.8)\n\n    for index, row in df.iterrows():\n        fig.ax.text(\n            row[feature] + shift, row.name, formatting.format(row[feature] \/ factor), \n            color='black', ha=\"center\", va=\"center\")\n\n    fig.ax.get_xaxis().set_visible(False);\n    fig.despine(left=True, bottom=True)\n    fig.ax.tick_params(left=False, bottom=False);\n    fig.set_ylabels(\"\");","a6953b3e":"plot_by_neighborhood(feature=\"Price\", formatting=\"RM {:.2f}m\", factor = 1e6)","9b9d90f6":"plot_by_neighborhood(feature=\"Price per Area\", formatting=\"RM {:.2f}k\", factor = 1e3)","e904683d":"plot_by_neighborhood(feature=\"Price per Room\", formatting=\"RM {:.2f}k\", factor = 1e3)","a090d265":"plot_by_neighborhood(feature=\"Size Num\", formatting=\"{:.2f}k sq. ft.\", factor = 1e3)","9019fada":"plot_by_neighborhood(feature=\"Rooms Num\", formatting=\"{:.2f}\", factor = 1)","531afe9e":"df = properties.groupby(\"Location\").size().sort_values(ascending=False).reset_index()\nshift = 0.05 * (df[0].max() - df[0].min())\ndf_sizes = properties.groupby(\"Location\").size()[df[\"Location\"]]\n\nfig = sns.catplot(\n    data=df, x=0, y=\"Location\", kind=\"bar\", \n    color=\"darkgrey\", height=10, aspect=0.8)\n\nfor index, row in df.iterrows():\n    fig.ax.text(\n        row[0] + shift, row.name, row[0], \n        color='black', ha=\"center\", va=\"center\")\n\nfig.ax.get_xaxis().set_visible(False);\nfig.despine(left=True, bottom=True)\nfig.ax.tick_params(left=False, bottom=False);\nfig.set_ylabels(\"\");","6d009378":"# Extract property type and turn it into a two-column data frame\ndf = properties.loc[~properties[\"Property Type Supergroup\"].isna()].groupby(\n    \"Location\")[\"Property Type Supergroup\"].value_counts()\ndf.name = \"Value\"\ndf = df.reset_index().pivot(index=\"Location\", columns=\"Property Type Supergroup\")\ndf.columns = df.columns.droplevel(0)\ndf = df.fillna(0)\n\n# normalize rows to see relative amount of properties in each neighborhood \ndf_norm = df.apply(lambda x: x \/ x.sum(), axis=1)\n\nfix, ax = plt.subplots(figsize=(12, 12))\nhmap = sns.heatmap(\n    df_norm, square=True, vmin=0, cmap=\"Reds\", ax=ax, cbar=False)\nhmap.set_ylabel(None);\nhmap.set_xlabel(None);","f0736b8f":"df = properties[[\"Location\", \"Size Type\", \"Size Num\"]].groupby(\n    [\"Location\", \"Size Type\"]).median().reset_index()\nfig = sns.catplot(\n    data=df, x=\"Size Num\", y=\"Location\", kind=\"bar\", \n    hue=\"Size Type\", height=20, aspect=0.4);\n\nfig.despine(left=True)\nfig.ax.tick_params(left=False);\nfig.set_ylabels(\"\");","350eb829":"# Remove entries with \"land area\" in the \"Size Type\" column\nXy = properties.loc[properties[\"Size Type\"] == \"Built-up\"]\n\n# Keep only the relevant features\nXy = Xy.loc[:, [\n    \"Location\", \"Bathrooms\", \"Car Parks\", \"Furnishing\", \n    \"Rooms Num\", \"Property Type Supergroup\", \"Size Num\", \n    \"Price\", \"Price per Area\", \"Price per Room\"]]\n\n# Fill missing Car Parks feature values\nXy.loc[:, \"Car Parks\"] = Xy[\"Car Parks\"].fillna(0)\n\n# Remove entries with missing values\nXy = Xy.loc[Xy.isna().sum(axis=1) == 0]\n\n# Specifically remove entries with \"Unknown\" furnishing status\nXy = Xy.loc[Xy[\"Furnishing\"] != \"Unknown\"]\n\n# Convert to dummy features\nXy = pd.get_dummies(Xy)","b3ee6c7e":"print(\"Shape of data frame: {}\".format(Xy.shape))","d3c2457a":"print(\"Data frame DTYPES:\")\nfor dtype in Xy.dtypes.unique():\n    print(\" - {}\".format(dtype))","64d9e4b6":"Xy[\"Size Num\"].sort_values().head(10)","707dd485":"Xy[\"Size Num\"].sort_values(ascending=False).head(20)","9f88ddb7":"Xy = Xy.loc[Xy[\"Size Num\"].between(250, 20000)]","1bde52e3":"selectors = []\nfor feature in [\"Bathrooms\", \"Car Parks\", \"Rooms Num\"]:\n    selectors.append(Xy[feature].between(\n        Xy[feature].quantile(0.001), \n        Xy[feature].quantile(0.999)))\n\nXy = Xy.loc[(~pd.DataFrame(selectors).T).sum(axis=1) == 0]","25781c66":"Xy, Xy_feature_selection = sklearn.model_selection.train_test_split(\n    Xy, test_size=0.25, random_state=101)","f4fa2481":"Xy.shape","3984a8cd":"Xy_feature_selection.shape","5a30ccc5":"fig, ax = plt.subplots(2, 2, figsize=(10, 10));\nsns.countplot(data=Xy_feature_selection, x=\"Bathrooms\", ax=ax[0, 0], color=\"darkgrey\");\nax[0, 0].set_title(\"Bathrooms\");\nsns.countplot(data=Xy_feature_selection, x=\"Car Parks\", ax=ax[0, 1], color=\"darkgrey\");\nax[0, 1].set_title(\"Car Parks\");\nsns.countplot(data=Xy_feature_selection, x=\"Rooms Num\", ax=ax[1, 0], color=\"darkgrey\");\nax[1, 0].set_title(\"Rooms Num\");\nsns.distplot(a=Xy_feature_selection[\"Size Num\"], bins=50, ax=ax[1, 1], color=\"darkgrey\");\nax[1, 1].set_title(\"Size Num\");","17d5ee23":"cols = [\"Bathrooms\", \"Car Parks\", \"Rooms Num\", \"Size Num\"]\nXy_feature_selection[cols] = sklearn.preprocessing.MinMaxScaler().fit_transform(\n    Xy_feature_selection[cols])\nXy[cols] = sklearn.preprocessing.MinMaxScaler().fit_transform(Xy[cols])","3c7516bb":"hm_cmap = sns.diverging_palette(240, 0, s=99, l=50, as_cmap=True)\ndf = Xy_feature_selection[[\"Bathrooms\", \"Car Parks\", \"Rooms Num\", \"Size Num\"]].corr()\nsns.heatmap(data=df, vmin=-1, vmax=1, cmap=hm_cmap, annot=df, annot_kws={\"size\": 20});","f8f29667":"Xy = Xy.drop([\"Bathrooms\", \"Rooms Num\"], axis=1)\nXy_feature_selection = Xy_feature_selection.drop([\"Bathrooms\", \"Rooms Num\"], axis=1)","bfb7c563":"df = Xy_feature_selection[[\"Price\", \"Price per Area\", \"Price per Room\"]].corr()\nsns.heatmap(\n    df, vmin=-1, vmax=1, cmap=hm_cmap, \n    annot=np.round(df, 2), annot_kws={\"size\": 20})","9b862982":"Xy = Xy.drop(\"Price per Room\", axis=1)\nXy_feature_selection = Xy_feature_selection.drop(\"Price per Room\", axis=1)","2b523ffe":"Xy_train, Xy_test = sklearn.model_selection.train_test_split(Xy, test_size=0.2, random_state=101)\nX_train = Xy_train.drop([\"Price\", \"Price per Area\"], axis=1)\ny_train = Xy_train[[\"Price\", \"Price per Area\"]]\nX_test = Xy_test.drop([\"Price\", \"Price per Area\"], axis=1)\ny_test = Xy_test[[\"Price\", \"Price per Area\"]]","29cbdcd4":"def train_and_test_model(\n        model, X_train=X_train, y_train=y_train, \n        X_test=X_test, y_test=y_test, **kwargs):\n    model.fit(X_train, y_train, **kwargs)\n    y_pred = model.predict(X_test)\n    r2 = sklearn.metrics.r2_score(y_true=y_test, y_pred=y_pred)\n    return model, r2","2be998a4":"model, r2 = train_and_test_model(\n    model = sklearn.linear_model.LinearRegression(), \n    X_train=X_train, y_train=y_train[\"Price\"], \n    X_test=X_test, y_test=y_test[\"Price\"])\nprint(\"R^2 for prediction of 'Price': {:.2f}\".format(r2))\n\nmodel, r2 = train_and_test_model(\n    model = sklearn.linear_model.LinearRegression(), \n    X_train=X_train, y_train=y_train[\"Price per Area\"], \n    X_test=X_test, y_test=y_test[\"Price per Area\"])\nprint(\"R^2 for prediction of 'Price per Area': {:.2f}\".format(r2))","b5608ee0":"def make_fcn_model():\n    model = keras.models.Sequential()\n    model.add(keras.layers.Dense(units=32, activation=\"relu\", input_shape=(X_train.shape[1],)))\n    model.add(keras.layers.Dense(units=32, activation=\"relu\"))\n    model.add(keras.layers.Dense(units=32, activation=\"relu\"))\n    model.add(keras.layers.Dense(units=1, activation=\"relu\"))\n    model.compile(loss=\"mse\", optimizer=\"Adam\")\n    return model","9a71dc68":"model, r2 = train_and_test_model(\n    model = make_fcn_model(), \n    X_train=X_train, y_train=y_train[\"Price\"], \n    X_test=X_test, y_test=y_test[\"Price\"], \n    batch_size=8, epochs=10, verbose=0)\nprint(\"R^2 for prediction of 'Price': {:.2f}\".format(r2))\n\nmodel, r2 = train_and_test_model(\n    model = make_fcn_model(), \n    X_train=X_train, y_train=y_train[\"Price per Area\"], \n    X_test=X_test, y_test=y_test[\"Price per Area\"], \n    batch_size=8, epochs=10, verbose=0)\nprint(\"R^2 for prediction of 'Price per Area': {:.2f}\".format(r2))","fcd2e713":"As none of the features seem to be normally distributed, I will simply scale them to lie between 0 and 1. Note that the data sets for training and feature selection are scaled separately!","ea72d0f9":"## Preparing the Data\nAs a short exercise in predictive modelling, I want to try to predict the price of a property based on the characteristics listed here. Due to the heterogeneity of the data, I will only look at a subset of the property listings to reduce the number of potentially confounding factors. In particular, I will:\n\n- Look only at entries with \"built-up\" area listed. This is because built-up size and land area are, strictly speaking, two different features.\n- Look only at entries without missing values for features (see below for a detailed description of which features I use).\n\nI will also be selective about the features I include in the model. As categorical features would have to be converted to dummy features, e.g. the `Rooms` feature would be converted to boolean \"has_3_rooms\", \"has_3+1_rooms\", etc., I will try to use numerical versions of the features where possible. Specifically, the following features will _not_ be used:\n\n- `Rooms`, which will be replaced with `Rooms Num`\n- `Size`, which will be replaced with `Size Num`\n- `Size Type`, as this will always be \"built-up\" in the reduced data frame)\n- `Property Type`, as there are simply too many variants. I instead use `Property Type Supergroup`.\n\nThis means our model will consider the following features:\n\n- `Location` (converted to binary dummy features)\n- `Bathrooms`\n- `Car Parks`\n- `Furnishing`\n- `Rooms Num`\n- `Property Type Supergroup`\n- `Size Num`\n\nAnd the model will be trained to predict any of the three price columns, `Price`, `Price per Area`, and `Price per Room`.\n\nLastly, I will make the assumption that a missing entries for `Car Parks` is 0. While not necessarily true, it is likely to be the case for many entries. However, I will not make the same assumption for `Bathrooms`, as a (built up) property will have at least one bathroom.","9e6b5240":"`Price per Area` and `Price per Room` correlate very strongly so that it makes little sense to retain both. I consequently remove `Price per Room`.","e7c1d780":"### Feature Correlation\nI look at the correlation between the initial numerical features to determine if they can be pruned.","075efe7a":"## Most common Property Type per Neighborhood","1865362d":"## Rooms per Neighborhood","380695ff":"## Total Prices per Neighborhood","7572b513":"## Number of Properties per Neighborhood","82c8032f":"## Land vs. Built-Up Area per Neighborhood","48926ec0":"## Number of Rooms\nThe number of rooms contains some irregularities. For example, it is common for rooms to be listed as N+M instead of the total number of rooms. I want to clean the `Rooms` column and introduce a numerical equivalent.","9619c115":"## Size\nThe size apparently always has the same structure:\n\n    [Built-up\/Land area] : [Value] sq. ft.","8af282aa":"A new look at the locations shows that there are no more ambiguous names.","be5043ff":"A look at the unique location values shows that they are reasonably standardized. ","31ff5824":"Split data into training and test set","dd69be3d":"I can greatly simplify the property types, however, by trimming information. For example, there are many different variations of the Terrace\/Link houses that can be grouped together. I create a new category of only the property type \"super groups\".","f0f056a4":"# Data Exploration\n\nThe most immediate question will be how properties differ between neighborhoods in their characteristics.","d6ea1a73":"All further feature selection will be performed on a subset of the data that will _not_ be used for training the model itself to avoid overfitting.","39cfe479":"Neither of the targets can be predicted with a satisfying accuracy. This is most likely due to the overwhelming number of sparse binary features. A neural network, unfortunately, also does not perform satisfactorily.","ae7e51e5":"### Outlier removal\nThe first step is to remove outliers from the original numerical features. Until now, I've used a robust aggregator (the median) and outliers have been irrelevant, but they can become a thorn in our side for predictive modelling.\n\nI remove `Size Num` outliers heuristically. The smallest reasonable value, as can be seen from the data, corresponds to $250$ square feet. This corresponds to a small studio apartment. Ergo I use this as the lower threshold for potential values.","784f9be4":"# Imports","3516c1ab":"Next, I want to make sure that every remaining entries matches the same format of \"RM\" followed by commas and digits.","b154e0cf":"# Predictive Modelling","e70e3ee6":"I will synchronize the missing values between the `Size Type` and `Size Num` columns.","c4cf28f1":"In addition to the features, I also want to look at the potential target variables and how they correlate.","9fb95e70":"A bigger issue are regions with very few properties posted. The frequency distribution, plotted logarithmically, looks as follows. A significant number of regions have very few properties listed, making them difficult to work with. I would need to have relative geographical locations of each neighborhood to properly clean the location data. As an initial step, I simply remove entries in locations with fewer than $100$ properties listed.","cfb82b2f":"## Modelling","605c085d":"The goal of this project is to scrape and analyze property listing information from the web. I am interested in residential property prices in Kuala Lumpur, Malaysia, as listed on [iProperty](https:\/\/www.iProperty.com.my). The focus is on identifying how properties vary between neighborhoods, i.e. descriptive statistics. I will also attempt to build a predictive model for prices, but this will most likely fail due to the limited number of features I scrape.","3876c508":"## Location\n\nA common issue is capitalization, so let's make everything lower case. Additionally, let's remove the city name as I explicitly only scraped entries from Kuala Lumpur.","7f75e1fd":"Based on the above correlation matrix, the features `Bathrooms` and `Rooms Num` both correlate very strongly with `Size Num` and can be safely removed.","cfa9dc90":"## Feature Selection\nBeyond the intial preprocessing, I obviously want to perform feature selection as well. Some features may be heavily correlated.","95a77285":"## Price per Square Foot per Neighborhood","02e6ad42":"Cleaning the property sizes introduced only a small number of additional missing values.","d5107a7d":"So I will create two new column that indicate whether this is built-up or land area and store the actual square footage.","1fdad7cf":"From the remaining three originally numerical columns, `Bathrooms`, `Car Parks`, and `Rooms Num`, I trim the top and bottom $0.1\\%$ of all entries.","c072d8b3":"# Conclusion\nNeither a linear model nor a neural network perform sufficiently well in predicting property prices. This is unsurprising, of course, as properties are much more complex than the features captured here indicate. In particular, the summary statistics seen in the EDA show that the neighborhood alone accounts for massive differences in property prices. The remaining features used here, e.g. the property size or the number of rooms, cannot account for all variance within. A proper price prediction model for new properties would therefore require more detailed features as scraped from the property listing itself rather than just the overview page as I've done here.","6375780c":"# Data Preprocessing\nThe raw data that I collected needs to be preprocessed and the columns cleaned.","087f5a7e":"## Price per Room per Neighborhood","bcde277e":"Remove the actual features from the dataset(s)","08425c50":"## Furnishing\nThe furnishing column thankfully doesn't require any cleaning.","4f0cafd9":"## Property Size per Neighborhood","ba9eff11":"Now I need to strip the new `Size_num` column and convert it to a numerical value.","fe59113d":"# Property Type\nThere are several different property types that are typical for Malaysia. A brief glance at the full list  of property types seems overwhelming at first.","1de9545c":"The data frame now consists of only numerical features:","2594be91":"## Price\nAs a first step, I'll remove all entries with missing prices as the price will be one of the target features to predict down the road.","98e3e4e1":"## Price per Area \/ Room\nAs a last step, I want to introduce the price per area and price per rooms as features","2d28ba2f":"## Save Preprocessed Data","35e1608c":"## Other columns\nThe number of bathrooms and car parks are standardized and do not require any further cleaning.","966a0825":"On the opposite end of the spectrum, there appear to be several unreasonably large properties ($820000$ square feet corresponds to the approximate size of the Louvre museum in Paris, France). I heuristically set the cutoff at $20000$ square feet for the maximum size of a property.","b3202c8b":"### Feature Scaling\nFirst, the original numerical features must be scaled (the binary dummy features don't need to be scaled).","74367018":"Define convenience function to train and test a `scikit-learn` model."}}