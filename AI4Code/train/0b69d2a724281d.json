{"cell_type":{"34ca651b":"code","406af063":"code","3ed22cc1":"code","ce5b76c5":"code","3c5e92a1":"code","2827d289":"code","cb68a500":"code","bdd728c0":"code","4b791a27":"code","878d8ce5":"code","98974dd9":"code","ebdf3d9a":"code","4585a343":"code","d939b499":"code","f41955dc":"code","6ac15aa8":"code","4dc21edf":"markdown","d8d8de10":"markdown","d1ed3a95":"markdown","67ef0ffb":"markdown","783e1d73":"markdown","fb5b487b":"markdown","e4c817e5":"markdown","92171683":"markdown","474a5e72":"markdown"},"source":{"34ca651b":"import plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode()\nfrom subprocess import check_output\nimport bq_helper\nfrom bq_helper import BigQueryHelper\n\n# https:\/\/www.kaggle.com\/sohier\/introduction-to-the-bq-helper-package\nghnp = bq_helper.BigQueryHelper(active_project=\"bigquery-public-data\",\n                                   dataset_name=\"world_bank_health_population\")","406af063":"bq_assistant = BigQueryHelper(\"bigquery-public-data\", \"world_bank_health_population\")\nbq_assistant.list_tables()","3ed22cc1":"bq_assistant.head(\"health_nutrition_population\", num_rows=5)","ce5b76c5":"queryGetIndicators = \"\"\"\nSELECT \n    indicator_name, indicator_code\nFROM\n    `bigquery-public-data.world_bank_health_population.health_nutrition_population`\nWHERE \n    year = 1960\n    AND\n    country_code = \"USA\"\n            \"\"\"\nqueryGetIndicators = ghnp.query_to_pandas_safe(queryGetIndicators)","3c5e92a1":"queryGetIndicators.tail()","2827d289":"queryAverageAgeFirstMarriage = \"\"\"\nSELECT\n  country_name, country_code,\n  ROUND(AVG(value),2) AS average\nFROM\n  `bigquery-public-data.world_bank_health_population.health_nutrition_population`\nWHERE\n  indicator_code = \"SP.DYN.SMAM.FE\"\n  AND year > 2000\nGROUP BY\n  country_name, country_code\nORDER BY\n  average\n;\n        \"\"\"\naverageAgeFirstMarriage = ghnp.query_to_pandas_safe(queryAverageAgeFirstMarriage)\naverageAgeFirstMarriage.head()","cb68a500":"gdata = [ {\n        'type': 'choropleth',\n        'locations': averageAgeFirstMarriage.country_code,\n        'z': averageAgeFirstMarriage.average,\n        'text': averageAgeFirstMarriage.country_name,\n        'autocolorscale': True,\n        'reversescale': True,\n        'marker':  {\n            'line': {\n                'color': 'rgb(180,180,180)',\n                'width': 0.5\n                    } \n                   },\n            } ]\n\nlayout = {\n    'title': 'Average Age of First Marriage of Females Since 2000',\n    'geo':{'showframe': False,\n        'showcoastlines': False,\n        'projection': {'type': 'orthographic'}\n          }\n}\n\nfigure = {'data': gdata, 'layout': layout}\niplot(figure)","bdd728c0":"def plotIndicatorMapOverTime(df,title):\n    gDataList = []\n    frames = []\n    years = df.year.unique().tolist()\n\n    #Create template Figure\n    figure = {\n        'data': [],\n        'layout': {},\n        'frames': []\n    }\n\n    figure['layout']['title'] = title\n    \n    #Define Sliders\n    figure['layout']['sliders'] = {\n        'args': [\n            'transition', {\n                'duration': 400,\n                'easing': 'cubic-in-out'\n            }\n        ],\n        'initialValue': str(years[0]),\n        'plotlycommand': 'animate',\n        'values': years,\n        'visible': True\n    }\n\n    #Update buttons: Play and Pause\n    figure['layout']['updatemenus'] = [\n        {\n            'buttons': [\n                {\n                    'args': [None, {'frame': {'duration':0, 'redraw': False},\n                             'fromcurrent': True, 'transition': {'duration': 0, 'easing': 'quadratic-in-out'}}],\n                    'label': 'Play',\n                    'method': 'animate'\n                },\n                {\n                    'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',\n                    'transition': {'duration': 0}}],\n                    'label': 'Pause',\n                    'method': 'animate'\n                }\n            ],\n            'direction': 'left',\n            'pad': {'r': 10, 't': 87},\n            'showactive': False,\n            'type': 'buttons',\n            'x': 0.1,\n            'xanchor': 'right',\n            'y': 0,\n            'yanchor': 'top'\n        }\n    ]\n    \n    sliders_dict = {\n    'active': 0,\n    'yanchor': 'top',\n    'xanchor': 'left',\n    'currentvalue': {\n        'font': {'size': 20},\n        'prefix': 'Year:',\n        'visible': True,\n        'xanchor': 'right'\n    },\n    'transition': {'duration': 300, 'easing': 'cubic-in-out'},\n    'pad': {'b': 10, 't': 50},\n    'len': 0.9,\n    'x': 0.1,\n    'y': 0,\n    'steps': []\n    }\n    \n    minZValue = df.indicator.min()\n    maxZValue = df.indicator.max()\n    \n    for year in years:\n        dfYear = df[df.year == year]\n        gDataTemp = [ {\n            'type': 'choropleth',\n            'locations': dfYear.country_code,\n            'z': dfYear.indicator,\n            'text': dfYear.country_name,\n            'autocolorscale': True,\n            'marker': {\n                'line': {\n                    'color':'rgb(180,180,180)',\n                    'width':0.5\n                        } \n                      },\n            'zauto': False,\n            'zmin': minZValue,\n            'zmax': maxZValue,\n        } ]\n    \n        if year == years[0]:     \n            figure['data'] = gDataTemp\n\n    \n        frame = {'data': gDataTemp,'name': str(year)}\n        figure['frames'].append(frame)\n    \n        slider_step = {'args': [\n            [year],\n            {'frame': {'duration': 300, 'redraw': False},\n             'mode': 'immediate',\n             'transition': {'duration': 300}}\n         ],\n         'label': year,\n         'method': 'animate'}\n        \n        sliders_dict['steps'].append(slider_step)\n    \n    figure['layout']['sliders'] = [sliders_dict]\n\n    iplot(figure)\n    ","4b791a27":"queryLifeExpectancy = \"\"\"\nSELECT\n  country_name, country_code, year, ROUND(value,2) as indicator\nFROM\n  `bigquery-public-data.world_bank_health_population.health_nutrition_population`\nWHERE\n  indicator_code = \"SP.DYN.LE00.IN\"\nORDER BY\n  year\n;\n        \"\"\"\nlifeExpectancy = ghnp.query_to_pandas_safe(queryLifeExpectancy)","878d8ce5":"plotIndicatorMapOverTime(lifeExpectancy, title = 'Life Expectancy')","98974dd9":"queryMortalityRateUnder5 = \"\"\"\nSELECT\n  country_name, country_code, year, ROUND(value,2) as indicator\nFROM\n  `bigquery-public-data.world_bank_health_population.health_nutrition_population`\nWHERE\n  indicator_code = \"SH.DYN.MORT\"\nORDER BY\n  year\n;\n        \"\"\"\nmortalityRateUnder5 = ghnp.query_to_pandas_safe(queryMortalityRateUnder5)","ebdf3d9a":"plotIndicatorMapOverTime(mortalityRateUnder5, title = 'Mortality Rate under 5 (per 1000)')","4585a343":"queryBirthsPerWoman = \"\"\"\nSELECT\n  country_name, country_code, year, ROUND(value,2) as indicator\nFROM\n  `bigquery-public-data.world_bank_health_population.health_nutrition_population`\nWHERE\n  indicator_code = \"SP.DYN.TFRT.IN\"\nORDER BY\n  year\n;\n        \"\"\"\nbirthsPerWoman = ghnp.query_to_pandas_safe(queryBirthsPerWoman)","d939b499":"plotIndicatorMapOverTime(birthsPerWoman, title = 'Births Per Woman')","f41955dc":"queryBirthRateMinusDeathRate = \"\"\"\n            WITH birthRateTable AS\n            (SELECT \n                country_name, country_code, year, ROUND(value,2) AS birthRate \n             FROM \n                 `bigquery-public-data.world_bank_health_population.health_nutrition_population`\n             WHERE\n                 indicator_code = \"SP.DYN.CBRT.IN\"\n            ),\n                deathRateTable AS \n            (SELECT \n                country_name, country_code, year, ROUND(value,2) AS deathRate \n             FROM \n                 `bigquery-public-data.world_bank_health_population.health_nutrition_population`\n             WHERE\n                 indicator_code = \"SP.DYN.CDRT.IN\"\n            )\n            \n            SELECT \n                 birthRateTable.country_name, birthRateTable.country_code, birthRateTable.year,\n                 birthRateTable.birthRate, deathRateTable.deathRate\n            FROM\n                 birthRateTable\n            INNER JOIN deathRateTable\n                 ON birthRateTable.country_code = deathRateTable.country_code\n                 AND birthRateTable.year = deathRateTable.year\n            ORDER BY\n                  birthRateTable.year\n \"\"\"    \n\nbirthRateAndDeathRate = ghnp.query_to_pandas_safe(queryBirthRateMinusDeathRate)\nbirthRateAndDeathRate['indicator'] = birthRateAndDeathRate['birthRate'] - birthRateAndDeathRate['deathRate']","6ac15aa8":"plotIndicatorMapOverTime(birthRateAndDeathRate, title = 'Birth Rate Minus Death Rate (per 1000 people)')","4dc21edf":"# Births Per Woman","d8d8de10":"# Global Health and Nutrition\n**Query the World Bank: Global Health, Nutrition, and Population Data (BigQuery Dataset) and do some plotly interactive visualizations. This was adapted from the following kernel https:\/\/www.kaggle.com\/paultimothymooney\/how-to-query-the-world-bank-ghnp-data**","d1ed3a95":"Things to look out for:\n- The effect of the Cambodian genocide 1975-1979\n- Russia is just breaking-even following a prolonged period of population shrinkage","67ef0ffb":"# Birth Rate Minus Death Rate","783e1d73":"# Mortality rate under-5 (per 1000 population)","fb5b487b":" Plotting on a map: Code adapted from https:\/\/www.kaggle.com\/asindico\/maps-maps-maps","e4c817e5":"# Life Expectancy","92171683":"# What\u2019s the average age of first marriages for females around the world since 2000?\n","474a5e72":"Define a Function that takes in a dataframe as above and plots a country map (like above) but you can scroll through time. Code adapted from Plotly Tutorial at https:\/\/plot.ly\/python\/animations\/ "}}