{"cell_type":{"d93fd43d":"code","552d257d":"code","891a7179":"code","86708da7":"code","cd26c257":"code","4637e1c7":"code","b8dc7b2a":"code","be85fb8f":"code","3856e713":"code","c7018dac":"code","8ff0ed23":"code","e9cd1e7f":"code","71f105fd":"code","5c6fd5cc":"code","12a05b1f":"code","1679d3f1":"code","6ceaeb45":"code","d6919b01":"code","cefc2bbe":"code","39d0e824":"markdown","e8aa86ff":"markdown","5070a87a":"markdown","8374de19":"markdown","67bb9775":"markdown","01674c2e":"markdown","dfdfc30f":"markdown","4a676c86":"markdown","b795fb74":"markdown","340e0943":"markdown","1d855a53":"markdown"},"source":{"d93fd43d":"import numpy as np\nimport pandas as pd \nimport numpy as np \nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport re\n\n%matplotlib inline\npd.options.display.max_colwidth = 1000 #to print complet verses","552d257d":"index=pd.read_csv('..\/input\/bible_version_key.csv')\n#Drop the columns where at least one element is missing.\nindex=index.dropna(axis='columns')\nindex","891a7179":"#American Standard-ASV1901\nasv = pd.read_csv('..\/input\/t_asv.csv')\n\n#Bible in Basic English\nbbe = pd.read_csv('..\/input\/t_bbe.csv')\n\n#Darby English Bible\ndby = pd.read_csv('..\/input\/t_dby.csv',encoding='latin-1')\n\n#King James Version\nkjv = pd.read_csv('..\/input\/t_kjv.csv')\n\n#Webster's Bible\nwbt = pd.read_csv('..\/input\/t_wbt.csv')\n\n#World English Bible\nweb = pd.read_csv('..\/input\/t_web.csv')\n\n#Young's Literal Translation\nylt = pd.read_csv('..\/input\/t_ylt.csv')","86708da7":"#Find verses containing \"LOVE\". \nlove=asv[asv['t'].str.contains('love',case=False)]\nsel=np.random.randint(1,love.shape[0])\nprint(\"Verse Number:\",love['b'].iloc[sel],love['c'].iloc[sel])\nprint(love['t'].iloc[sel])","cd26c257":"#Find verses containing \"christ\"\nchri=asv[asv['t'].str.contains('christ',case=False)]\nsel=np.random.randint(1,chri.shape[0])\nprint(\"Verse Number:\",chri['b'].iloc[sel],chri['c'].iloc[sel])\nprint(chri['t'].iloc[sel])","4637e1c7":"ct=asv.groupby(['b'])['t'].count()\nplt.bar(range(1,67),ct)","b8dc7b2a":"counts = dict()\nfor text in asv['t']:\n    tokens=text.lower().split()\n    tokens=[re.sub(r'[^\\w\\s]','',i) for i in tokens]\n    for i in tokens: \n        if i in counts:\n            counts[i]+=1\n        else:\n            counts[i]=1\nsorted_counts = sorted(counts.items(), key=lambda pair: pair[1], reverse=True)\nprint(\"10 most common words:\\nWord\\tCount\")\nfor word, count in sorted_counts[:10]:\n    print(\"{}\\t{}\".format(word, count))\n\nprint(\"\\n10 least common words:\\nWord\\tCount\")\nfor word, count in sorted_counts[-10:]:\n    print(\"{}\\t{}\".format(word, count))","be85fb8f":"for text in asv['t']:\n    sentence=list(map(str.strip, re.split(r\"[.?](?!$.)\", text)))[:-1]\n    for sent in sentence:\n        list(map(str.strip, \n                       re.split(\"(?:(?:[^a-zA-Z]+')|(?:'[^a-zA-Z]+))|(?:[^a-zA-Z']+)\",sent)))","3856e713":"#Book index for Corinthians, Chapter and verse number\nb,c,vn=46,13,4\n\ndiff=pd.DataFrame(index['version'])\nver=[asv,bbe,dby,kjv,wbt,web,ylt]\nfor i,v in enumerate(ver):\n    diff.loc[[i],'verse'] =v[(v['b']==b) & (v['c']==c) &(v['v']==vn)]['t'].values\n    \ndiff","c7018dac":"def get_jaccard_sim(str1, str2): \n    a = set(str1.split()) \n    b = set(str2.split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","8ff0ed23":"#Example: get certain verse without index \nasv.loc[[0],'t'].to_string(index=False)","e9cd1e7f":"#Compare two verses\na=diff.loc[[0],'verse'].to_string(index=False)\nb=diff.loc[[4],'verse'].to_string(index=False)\nget_jaccard_sim(a,b)","71f105fd":"#Metric Matrix\njac=pd.DataFrame(index=range(7))\nfor it in range(7):\n    jac[it]=[get_jaccard_sim(diff.loc[[it],'verse'].to_string(index=False),\n                          diff.loc[[i],'verse'].to_string(index=False)) for i in range(7)]\n\nsns.heatmap(jac, annot=True)\n","5c6fd5cc":"#Compare two books!\ndef com_book(b1,b2):\n    if b1.shape[0]==b2.shape[0]:\n        sim=[]\n        for i in range(b1.shape[0]):\n            a=b1.loc[[i],'t'].to_string(index=False)\n            b=b2.loc[[i],'t'].to_string(index=False)    \n            sim.append(get_jaccard_sim(a,b))\n        return np.mean(sim)\n    else:\n        #print(\"Lengths differ. Something is wrong in the dataset :(\")\n        return np.nan","12a05b1f":"com_book(asv,bbe)","1679d3f1":"com_book(asv,dby)","6ceaeb45":"#DataFrame Setup\nver=[\"asv\",\"bbe\",\"dby\",\"kjv\",\"wbt\",\"web\",\"ylt\"]\njacsim=pd.DataFrame(index=ver)\nfor i in ver:\n    jacsim[i]=np.nan","d6919b01":"#Calculate Jaccard Similarity of any of the two versions.\n#Could be optimized by calculating (i,j) and (j,i) once.\nver=[asv,bbe,dby,kjv,wbt,web,ylt]\nfor i in range(7):\n    for j in range(7):\n        jacsim.iloc[i,j]=com_book(ver[i],ver[j])","cefc2bbe":"#sns.heatmap(jacsim, annot=True)","39d0e824":"#### Randomly select a verse containing keywords","e8aa86ff":"#### Visualize number of verses in each book","5070a87a":"#### Jaccard Similarity\nMetric=size of intersection of the set divided by total size of set","8374de19":"### Text Similarity Metrics ","67bb9775":"### Mining the Bible \n\nAuthor: liu431","01674c2e":"#### Counting Words","dfdfc30f":"Corinthians 13:4","4a676c86":"#### Splitting text\n\nRegular Expression package `re` to split the text into sentences, and each sentence into words (tokens)\n\n`str.strip`: Remove leading and trailing spaces from each sentence\n`re.split(r\"<your regexp>\", text)`:regular expression that matches sentence delimiters\n\n`r`: preceding the regexp string - this denotes a raw string and tells Python not to interpret the characters in any special way (e.g. escape sequences like '\\n' do not get converted to newlines, etc.).\n \nlink: https:\/\/docs.python.org\/3.5\/library\/re.html","b795fb74":"#### Compare a verse across difference versions","340e0943":"1. Randomly select a verse containing keywords\n\n2. Visualize number of verses in each book\n\n3. Counting words and splitting text\n\n4. Compare a verse across difference versions\n\n5. Text Similarity Metrics: Jaccard Similarity\n\n...More work in progress(NLP, CNN)...","1d855a53":"#### Future work: discover patterns in the text using unsupervised learning and NLP"}}