{"cell_type":{"c50f2a3b":"code","183e48f3":"code","21e54d15":"code","35b7b607":"code","980a241e":"code","fc85c934":"code","3a535e98":"code","00921f8e":"code","54943e7d":"code","bdf51e7a":"code","97e7cd02":"code","46a7116d":"code","b6778ec4":"code","d8edc21d":"code","acdd4b72":"markdown","b71877d0":"markdown","7f5c057d":"markdown","2663aaf2":"markdown","c163dc40":"markdown","9c8ae098":"markdown","a33869d2":"markdown","61275868":"markdown","36a9d02e":"markdown","552f36e4":"markdown"},"source":{"c50f2a3b":"import operator as op\nimport random\nrandom.seed(123)\n\nimport numpy as np\nimport pandas as pd\n\n\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score\nfrom sklearn.cluster import KMeans\nimport sklearn.metrics as skm\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.impute import SimpleImputer\n\nimport matplotlib.pyplot as plt \n%matplotlib inline\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(12, 8)})\n\nfrom sklearn.exceptions import ConvergenceWarning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.filterwarnings(\"ignore\", category=ConvergenceWarning,\n                        module=\"sklearn\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","183e48f3":"df = pd.read_csv('\/kaggle\/input\/german-credit\/german_credit_data.csv')\ndf.head()","21e54d15":"df.info()","35b7b607":"df.isnull().sum()","980a241e":"# Dropping unnecessary column\ndf.drop('Unnamed: 0', axis=1, inplace=True)","fc85c934":"# Imputing missing values\ndf.replace(['?', 'NaN', np.nan], -1, inplace=True) \nnum_vars= ['Saving accounts', 'Checking account']\nfor i in num_vars:\n    df[i] =  df[i].astype('category')\nimp = SimpleImputer(missing_values=-1, strategy='most_frequent')\ndf[num_vars] = imp.fit_transform(df[num_vars])","3a535e98":"# Encoding \ncat_vars = ['Sex', 'Job', 'Housing','Purpose', 'Saving accounts', 'Checking account']\nfor i in cat_vars:\n    df[i+\"_cat\"] = df[i].astype('category').cat.codes\ndf.head()","00921f8e":"# Masking to show only one side of the matrix\ncorr = np.corrcoef(df.corr())                        \nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\n\n# Axtual Correlation matrix as a heatmap\nsns.heatmap(df.corr(), annot=True, mask=mask)\nplt.show()","54943e7d":"# Scatterplot based on the strongest relationship\nsns.scatterplot(data=df, x='Duration', y='Credit amount')\nplt.show()","bdf51e7a":"sns.lineplot(data=df, x='Age', y='Credit amount')\nplt.show()","97e7cd02":"fig = plt.figure()\ngs = fig.add_gridspec(1, 2, hspace=0.2, wspace=0.2)\n(ax1), (ax2) = gs.subplots(sharex=False, sharey=False)\n\nsns.histplot(ax=ax1, data=df, x='Sex')\nsns.histplot(ax=ax2, data=df, x='Age', bins=10, kde=True)\nplt.show()","46a7116d":"fig = plt.figure()\ngs = fig.add_gridspec(1, 2, hspace=0.2, wspace=0.2)\n(ax1), (ax2) = gs.subplots(sharex='all', sharey=False)\n\nsns.violinplot(ax=ax1, data=df, x='Job', y='Credit amount', \n               hue='Sex', split=True)\n\nsns.violinplot(ax=ax2, data=df, x='Job', y='Duration',\n              hue='Sex', split=True)\n\nplt.show()","b6778ec4":"# Dictionary with models performance metrics\nmodels = {}","d8edc21d":"class kmeans():\n    def __init__(self, df):\n        self.df = df\n        \n    def pre_processing(self):\n        \n        X = self.df.drop(cat_vars, axis=1).values\n        scaler = StandardScaler()\n        self.X_scaled = scaler.fit_transform(X)\n        return self\n        \n    def fit_pred(self):\n        kmeans_kwargs = {\"init\": \"random\",\n                        \"n_init\": 10,\n                        \"max_iter\": 100,\n                        \"random_state\": 2,}\n#         clf = KMeans(init=\"random\", n_clusters=2, n_init=10, max_iter=300)\n#         clf.fit(self.X_scaled)\n#         print(clf.inertia_)\n#         print(clf.cluster_centers_)\n#         print(clf.n_iter_)\n        sse = []\n        for k in range(1, 21):\n            kmeans = KMeans(n_clusters=k, **kmeans_kwargs)\n            kmeans.fit(self.X_scaled)\n            sse.append(kmeans.inertia_)\n        sns.lineplot(x=range(1, 21), y=sse, markers=True)\n        plt.xticks(range(1, 21))\n        plt.xlabel(\"Number of Clusters\")\n        plt.ylabel(\"SSE\")\n        plt.show()\n\n#         pred = clf.predict(self.X_test)\n#         print(pred)\n\nmodel = kmeans(df).pre_processing()\nmodel.fit_pred()","acdd4b72":"# 3. Exploratory Data Analysis","b71877d0":"## Does Age imply greater purchasing power and thus higher credit amount?","7f5c057d":"## How do different Job types fair in terms of Credit Amount and Duration?","2663aaf2":"## K-Means","c163dc40":"# Clustering","9c8ae098":"## Based on the 0.62 coefficient, how does Credit amount and duration relate on a scatterplot?","a33869d2":"# 1. Data Import","61275868":"## What is the demographics of our creditors?","36a9d02e":"# 2. Feature Engineering\n### From the snapshot of the data frame and its info, we would need to:\n* Dropping a repeated column ('Unnamed: 0')\n* Categorical encoding.\n* Missing Values Imputation ","552f36e4":"## What does the relationship between variables looks like?"}}