{"cell_type":{"b653c81c":"code","7c8e1416":"code","76af4eae":"code","44573b4c":"code","92727791":"code","2ca8d8dd":"code","b0588cf9":"code","cd0139fe":"code","82559608":"code","dc6a3f72":"code","0c0b6d7a":"code","32265ee0":"code","ecd5925f":"code","7f995fbd":"code","717dea16":"code","c893ff3c":"code","7ef2ba6a":"code","1f4e46e2":"code","f1bfbfb3":"code","753c665f":"code","b812821c":"code","f52ca8e3":"code","c107f752":"code","1aa75db7":"code","abc4d8e3":"code","0f2a0c87":"code","8d9140e7":"code","06174e86":"code","c2110517":"code","f3c99326":"markdown","b92a2dc9":"markdown","7f203551":"markdown","46b8ef62":"markdown","873a0abf":"markdown","c5ed21f0":"markdown","f7f7e3a7":"markdown","19dd062d":"markdown","892405fd":"markdown","3f9733ee":"markdown"},"source":{"b653c81c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7c8e1416":"data= pd.read_csv('..\/input\/pokemon.csv')\n","76af4eae":"data.head()  # head shows first 5 rows","44573b4c":"# tail shows last 5 rows\ndata.tail()","92727791":"# columns gives column names of features\ndata.columns","2ca8d8dd":"# shape gives number of rows and columns in a tuble\ndata.shape","b0588cf9":"# info gives data type like dataframe, number of sample or row, number of feature or column, feature types and memory usage\ndata.info()","cd0139fe":"# For example lets look frequency of pokemom types\nprint(data['Type 1'].value_counts(dropna =False))  # if there are nan values that also be counted\n# As it can be seen below there are 112 water pokemon or 70 grass pokemon","82559608":"#We will use describe() method.\n#%50 = median() (T\u00fcrk\u00e7e :ortadaki de\u011fer)\ndata.describe()","dc6a3f72":"# For example: compare attack of pokemons that are legendary  or not\n# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\nimport matplotlib.pyplot as plt\ndata.boxplot(column='Attack',by = 'Legendary')\nplt.show()","0c0b6d7a":"# Firstly I create new data from pokemons data to explain melt nore easily.\ndata_new = data.head()    # I only take 5 rows into new data\ndata_new","32265ee0":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'Name', value_vars= ['Attack','Defense'])\nmelted","ecd5925f":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'Name', columns = 'variable',values='value')","7f995fbd":"# Firstly lets create 2 data frame\ndata1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","717dea16":"data1 = data['Attack'].head()\ndata2= data['Defense'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) # axis = 0 : adds dataframes in column\nconc_data_col","c893ff3c":"data.dtypes","7ef2ba6a":"# lets convert object(str) to categorical and int to float.\ndata['Type 1'] = data['Type 1'].astype('category')\ndata['Speed'] = data['Speed'].astype('float')","1f4e46e2":"data.dtypes","f1bfbfb3":"data.head(10)\n#As you can see Type 2 contains NaN values","753c665f":"# Lets look at does pokemon data have nan value\n# As you can see there are 800 entries. However Type 2 has 414 non-null object so it has 386 null object.\ndata.info()\n#Type 2 contains 386 NaN values","b812821c":"# Lets chech Type 2\ndata[\"Type 2\"].value_counts(dropna =False)\n# As you can see, there are 386 NAN value","f52ca8e3":"# Lets drop nan values\ndata1=data   # also we will use data to fill missing value so I assign it to data1 variable\ndata1[\"Type 2\"].dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n# So does it work ?","c107f752":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true","1aa75db7":"# In order to run all code, we need to make this line comment\n# assert 1==2 # return error because it is false","abc4d8e3":"data.info()\n","0f2a0c87":"assert  data['Type 2'].notnull().all() # returns nothing because we drop nan values","8d9140e7":"data[\"Type 2\"].fillna('empty',inplace = True)","06174e86":"assert  data['Type 2'].notnull().all() # returns nothing because we do not have nan values","c2110517":"# # With assert statement we can check a lot of thing. For example\n# assert data.columns[1] == 'Name'\n# assert data.Speed.dtypes == np.int","f3c99326":"In this part, you learn:\n\nDiagnose data for cleaning\nExploratory data analysis\nVisual exploratory data analysis\nTidy data(Melting)\nPivoting data\nConcatenating data\nData types\nMissing data and testing with assert","b92a2dc9":"VISUAL EXPLORATORY DATA ANALYSIS\u00b6\nBox plots: visualize basic statistics like outliers, min\/max or quantiles","7f203551":"\nDATA TYPES\nThere are 5 basic data types: object(string),boolean, integer, float and categorical. \nWe can make conversion data types like from str to categorical or from int to float \nWhy is category important:\n\nmake dataframe smaller in memory\ncan be utilized for analysis especially for sklearn(we will learn later)","46b8ef62":"MISSING DATA and TESTING WITH ASSERT\u00b6\nIf we encounter with missing data, what we can do:\n\nleave as is (T\u00fcrk\u00e7e: onu \u00f6ylece b\u0131rakabiliriz.)\ndrop them with dropna() (T\u00fcrk\u00e7e: onu datasetten \u00e7\u0131karabiliriz.)\nfill missing value with fillna()(T\u00fcrk\u00e7e NaN ile doldurabiliriz.)\nfill missing values with test statistics like mean ( T\u00fcrk\u00e7e ortalama ile doldurabiliriz.)\nAssert statement: check that you can turn on or turn off when you are done with your testing of the program","873a0abf":"\nTIDY DATA\u00b6\nWe tidy data with melt(). Describing melt is confusing. Therefore lets make example to understand it.","c5ed21f0":"**CLEANING DATA**\n\nDIAGNOSE DATA for CLEANING\u00b6\n\nWe need to diagnose and clean data before exploring. \nUnclean data:\n\n* Column name inconsistency like upper-lower case letter or space between words\n* missing data\n* different language\n\nWe will use head, tail, columns, shape and info methods to diagnose data","f7f7e3a7":"EXPLORATORY DATA ANALYSIS\n\nvalue_counts(): Frequency counts \noutliers: the value that is considerably higher or lower from rest of the data (T\u00fcrk\u00e7e:Ayk\u0131r\u0131 data)\n\nLets say value at 75% is Q3 and value at 25% is Q1.\nOutlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR \n(T\u00fcrk\u00e7e: Q3-Q1=IQR                 Outlier< Q1-1.5IQR ve Outlier>Q3+IQR=\n\n*We will use describe() method. Describe method includes:\ncount: number of entries\nmean: average of entries\nstd: standart deviation\nmin: minimum entry\n25%: first quantile\n50%: median or second quantile\n75%: third quantile\nmax: maximum entry\n\nWhat is quantile?\n\n1,4,5,6,8,9,11,12,13,14,15,16,17\nThe median is the number that is in middle of the sequence. In this case it would be 11.( T\u00fcrk\u00e7e:Ortadaki say\u0131)\n\nThe lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.(T\u00fcrk\u00e7e: \u0130lk say\u0131 ile ortadaki say\u0131n\u0131n ortas\u0131nda olan say\u0131)(Burada s\u0131ralama var ortalama yok)(Q1 de denir 25%: first quantile da denir.)\n\nThe upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above. (Q3 veya 75%: third quantile da denir)\n\n(T\u00fcrk\u00e7e : Bir \u015firkette be\u015f \u00e7al\u0131\u015fan olsun maa\u015flar\u0131 1,1,1,1,100 olsun ortalamaya g\u00f6re i\u015flem yap\u0131lsa ortalama yakla\u015f\u0131k 20 iken yan\u0131lt\u0131yor ama median ortadaki de\u011fere bak\u0131lsa 1 daha ger\u00e7ek\u00e7i oluyor.)","19dd062d":"PIVOTING DATA\u00b6\nReverse of melting.","892405fd":"Read csv file","3f9733ee":"\nCONCATENATING DATA\n\nWe can concatenate two dataframe"}}