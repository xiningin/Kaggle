{"cell_type":{"5acb5689":"code","66c5b468":"code","69af1822":"code","4e2ed987":"code","cae7e162":"code","cc17c97a":"code","b66ec5f6":"code","3850bbaa":"code","ce066a08":"code","5413c1be":"code","1fd8a82b":"code","6b95d2dc":"code","eabb536e":"code","74552580":"code","ea2b100f":"code","ffb1111a":"code","6a9aee0c":"code","88bac3bc":"code","60c7646d":"code","27be113e":"code","2b7d820f":"code","0b9c839d":"code","50643d30":"code","6dfcba25":"code","508e106c":"code","d80a8db7":"code","708dc159":"code","57e0bf7e":"markdown","fd4e9a21":"markdown","3d9816d0":"markdown","9cf606e0":"markdown","ec70548d":"markdown"},"source":{"5acb5689":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.","66c5b468":"# No. of Records , Attributes\ndata = pd.read_csv(\"..\/input\/athlete_events.csv\")\ndata.shape","69af1822":"# Glimpse of Dataset\ndata.head()","4e2ed987":"# checking for null objects\nprint(\"Missing values attributewise:\".format(data.isnull().any()))\ndata.isnull().sum()","cae7e162":"# data1: rows with all attribute details (No NaN values) (excluding Medal)\ndata1 = data[np.isfinite(data['Age'])]\ndata1 = data1[np.isfinite(data1['Weight'])]\ndata1 = data1[np.isfinite(data1['Height'])]\ndata1.describe()","cc17c97a":"meanAge = data1[\"Age\"].mean()\nmeanHeight = data1[\"Height\"].mean()\nmeanWeight = data1[\"Weight\"].mean()\nprint(\" Average Age of Athletes: \",meanAge)\nprint(\" Average Height of Athletes: \",meanHeight)\nprint(\" Average Weight of Athletes: \",meanWeight)","b66ec5f6":"# Sorting data by year from 1896 to 2016\ndataByYear= data.sort_values(\"Year\")\ndataByYear.head()","3850bbaa":"# Summer Olympic Data\ndata_summer = dataByYear[dataByYear.Season == \"Summer\"]\ndata_summer.head()","ce066a08":"# Winter Olympic Data\ndata_winter = dataByYear[dataByYear.Season == \"Winter\"]\ndata_winter.head()","5413c1be":"print(\"Total Editions:\")\nprint(\"Summer:\")\nprint(data_summer[\"Year\"].unique())\nprint(\"Winter:\")\nprint(data_winter[\"Year\"].unique())","1fd8a82b":"print(\"\\nTotal Sports:\\n\", data[\"Sport\"].unique())","6b95d2dc":"print(\"Total Male & Female Participants:\\n\",data[\"Sex\"].value_counts())","eabb536e":"# Gold Medal Winners since 1896\ngold_winners= data[data[\"Medal\"]==\"Gold\"]\ngold_winners.head()","74552580":"# Silver Medal Winners since 1896\nsilver_winners= data[data[\"Medal\"]==\"Silver\"]\nsilver_winners.head()","ea2b100f":"# Bronze Medal Winners since 1896\nbronze_winners= data[data[\"Medal\"]==\"Bronze\"]\nbronze_winners.head()","ffb1111a":"import seaborn as sns\nimport matplotlib.pyplot as mlt\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.tools as tls","6a9aee0c":"# Function to plot Medal Winners using Plotly\ndef medal_winners(med1, med2, med3):\n    #mlt.subplots(figsize=(30,10))\n    toppers1 = med1.groupby(['NOC']).size().reset_index(name='Count')\n    toppers2 = med2.groupby(['NOC']).size().reset_index(name='Count')\n    toppers3 = med3.groupby(['NOC']).size().reset_index(name='Count')\n    cntr1 = toppers1.sort_values(by='Count', ascending=False)[:10]\n    cntr2 = toppers2.sort_values(by='Count', ascending=False)[:10]\n    cntr3 = toppers3.sort_values(by='Count', ascending=False)[:10]\n      \n    trace1 = go.Bar(x=cntr1.NOC, y=cntr1.Count)\n    trace2 = go.Bar(x=cntr2.NOC, y=cntr2.Count, xaxis='x2', yaxis='y2')\n    trace3 = go.Bar(x=cntr3.NOC, y=cntr3.Count, xaxis='x3', yaxis='y3')\n\n    #fig = tls.make_subplots(rows=3, cols=1, subplot_titles=('Gold', 'Silver', 'Bronze'))\n    dt = [trace1, trace2, trace3]\n    layout = go.Layout(\n        xaxis=dict(domain=[0, 0.3]),\n        xaxis2=dict(domain=[0.33, 0.63]),\n        xaxis3=dict(domain=[0.67, 1]),\n        #yaxis1=dict(anchor='x1'),\n        yaxis2=dict(anchor='x2'),\n        yaxis3=dict(anchor='x3'),\n        )\n    fig = go.Figure(data=dt, layout=layout)\n    #fig.append_trace(trace1, 1, 1)\n    #fig.append_trace(trace2, 2, 1)\n    #fig.append_trace(trace3, 3, 1)\n\n    fig['layout'].update(title='Top Medal Winning Countries')\n    fig['layout']['xaxis'].update(title='Top 10 Gold')\n    fig['layout']['xaxis2'].update(title='Top 10 Silver')\n    fig['layout']['xaxis3'].update(title='Top 10 Bronze')\n    fig['layout']['yaxis'].update(title='Medal Count')\n\n    py.plot(fig, filename='Top Medal Winning Countries')","88bac3bc":"# Plz Check output on Local machine\nmedal_winners(gold_winners, silver_winners, bronze_winners)","60c7646d":"# Drop NaN values from Medal Column\ndata2 = data.dropna(subset=['Medal'])\ndata2.head()","27be113e":"# Save top 5 medal winners\ngwa = gold_winners['Name'].value_counts().sort_values(ascending=True)[-5:]\nswa = silver_winners['Name'].value_counts().sort_values(ascending=True)[-5:]\nbwa = bronze_winners['Name'].value_counts().sort_values(ascending=True)[-5:]","2b7d820f":"# Plotting with Horizontal View\nmlt.subplots(figsize=(18,24))\nax1 = mlt.subplot(311)\ngwa.plot.barh(width=.7)\nax2 = mlt.subplot(312, sharex=ax1)\nswa.plot.barh(width=.7)\nax3 = mlt.subplot(313, sharex=ax1)\nbwa.plot.barh(width=.7)\n\nax3.set_xlabel('Medal Count')\nax1.set_ylabel('Athletes')\nmlt.show()","0b9c839d":"# Function to Plot Country Performance in Summer or Winter Olympic \ndef country_performance(cntr, edition):\n    if edition=='Summer':\n        data_cs = data_summer.groupby(['Year','NOC','Medal'])['NOC','Year','Medal'].size().reset_index(name='Count')\n        data_cntr = data_cs[data_cs['NOC']==cntr]\n        table = data_cntr.pivot_table(values='Count', index=['Year', 'NOC'], columns=['Medal'], aggfunc=np.sum)\n        tab = table.reset_index()\n        tab.plot.bar(x='Year', y=['Gold','Silver', 'Bronze'], color=[\"gold\", \"silver\", \"g\"])\n        mlt.xlabel('Editions')\n        mlt.ylabel('Medals')\n        fig=mlt.gcf()\n        fig.set_size_inches(20,10)\n        mlt.show()\n    else:\n        data_cw = data_winter.groupby(['Year','NOC','Medal'])['NOC','Year','Medal'].size().reset_index(name='Count')\n        data_cntr = data_cw[data_cw['NOC']==cntr]\n        table = data_cntr.pivot_table(values='Count', index=['Year', 'NOC'], columns=['Medal'], aggfunc=np.sum)\n        tab = table.reset_index()\n        tab.plot.bar(x='Year', y=['Gold','Silver', 'Bronze'], color=[\"gold\", \"silver\", \"g\"])\n        mlt.xlabel('Editions')\n        mlt.ylabel('Medals')\n        fig=mlt.gcf()\n        fig.set_size_inches(20,10)\n        mlt.show()","50643d30":"country_performance('USA','Summer')","6dfcba25":"# Get Gender Count\nsex_cnt= data_summer.groupby(['Year','Sex']).size().reset_index(name='Count')\nsex_cnt.head()","508e106c":"# Plot Time Series using Seaborn\nmlt.rcParams[\"axes.labelsize\"] = 20\nf, ax_s= mlt.subplots(figsize=(25,15))\n#sns.set_context(\"notebook\", font_scale=0.5, rc={\"font.size\":8,\"axes.labelsize\":5})\n\nax_s.set_title(\"Gender Participation in Summer Olympics\",fontsize=20)\n\nsns.pointplot(x=\"Year\", y=\"Count\", hue=\"Sex\", data=sex_cnt, ax= ax_s)\nmlt.show()","d80a8db7":"# Gender count in Winter Olympic\nsex_cntw= data_winter.groupby(['Year','Sex']).size().reset_index(name='Count')\nsex_cntw.head()","708dc159":"mlt.rcParams[\"axes.labelsize\"] = 20\nf, ax_s= mlt.subplots(figsize=(25,15))\n#sns.set_context(\"notebook\", font_scale=0.5, rc={\"font.size\":8,\"axes.labelsize\":5})\n\nax_s.set_title(\"Gender Participation in Winter Olympics\",fontsize=20)\n\nsns.pointplot(x=\"Year\", y=\"Count\", hue=\"Sex\", data=sex_cntw, ax= ax_s)\nmlt.show()","57e0bf7e":"# Basic Visualization","fd4e9a21":"# Top Countries with Gold, Silver, Bronze","3d9816d0":"# Country Performance","9cf606e0":"# Top Athletes with Gold, Silver, Bronze","ec70548d":"# Gender Participation"}}