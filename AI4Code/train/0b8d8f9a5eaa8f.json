{"cell_type":{"70c3bbc8":"code","7e1f210f":"code","0a77beb0":"code","8ead6a1d":"code","89adde00":"code","174eedd5":"code","3baef57f":"code","c00357fa":"code","fcff5828":"code","2647ed3d":"code","6632000c":"code","74fe5e3c":"code","fdae6866":"code","92362777":"code","cfb03e51":"code","f9afcb6c":"code","4873b6b3":"code","c8b7bd89":"code","1af473d9":"code","e70e9a9c":"code","73f8961b":"code","4aab743c":"code","d48a9395":"code","7d5dd3e2":"code","8e64e020":"code","d59defae":"code","93277e4a":"code","cf8641a7":"code","6d9a3dd8":"code","77623815":"code","2b37f6c3":"code","548a9d73":"code","b07cd525":"code","7c8d42f6":"code","b4e7bd2c":"code","2b5fbfac":"code","f21467bf":"code","8dbecd32":"code","7087ee48":"code","6aa4a5e8":"code","a3aae2f2":"code","3c1e3c51":"code","5d537d56":"code","d86d640c":"code","a2645278":"markdown","0b7a29b1":"markdown","ee8eedfb":"markdown","3b5ccfe9":"markdown","73eff27d":"markdown","3b240fb0":"markdown","0ade6826":"markdown","239878f5":"markdown","ff3074b7":"markdown","445236cc":"markdown","4400193c":"markdown","f7c9a8ab":"markdown","30787127":"markdown","1bb56264":"markdown","71f3c7b4":"markdown","f9a6628d":"markdown","0255246f":"markdown","1d97ad5c":"markdown","7bcdae61":"markdown","4578169b":"markdown","3256d690":"markdown","32b8abce":"markdown","09b974a8":"markdown","310a7ff9":"markdown","2b41373e":"markdown","b08fd185":"markdown","5314977e":"markdown","d42ddf0e":"markdown","7955d157":"markdown","4b5b92db":"markdown","7a7dd318":"markdown","e469a1dd":"markdown","e3c13da1":"markdown","e67a1370":"markdown","2f33bbbc":"markdown","99d04114":"markdown","e52496e0":"markdown","f905e77a":"markdown","66e487f8":"markdown","d08ae322":"markdown","efe167d1":"markdown","9fa3c669":"markdown","ab052e93":"markdown","86501871":"markdown","aa1ff799":"markdown","661f3177":"markdown","e9b4f233":"markdown"},"source":{"70c3bbc8":"!pip install fastai2 --q","7e1f210f":"!pip install ..\/input\/fastai017-whl\/fastprogress-0.2.3-py3-none-any.whl\n!pip install ..\/input\/fastai017-whl\/fastcore-0.1.18-py3-none-any.whl\n!pip install ..\/input\/fastai017-whl\/fastai2-0.0.17-py3-none-any.whl","0a77beb0":"#Load the dependancies\nfrom fastai2.basics import *\nfrom fastai2.callback.all import *\nfrom fastai2.vision.all import *\n\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport openslide\n\nfrom sklearn.model_selection import StratifiedShuffleSplit\n\nsns.set(style=\"whitegrid\")\nsns.set_context(\"paper\")","8ead6a1d":"Path('\/root\/.cache\/torch\/checkpoints\/').mkdir(exist_ok=True, parents=True)\n!cp '..\/input\/resnet18\/resnet18.pth' '\/root\/.cache\/torch\/checkpoints\/resnet18-5c106cde.pth'","89adde00":"source = Path(\"..\/input\/prostate-cancer-grade-assessment\")\nfiles = os.listdir(source)\nprint(files)","174eedd5":"train = source\/'train_images'\nmask = source\/'train_label_masks'\ntrain_labels = pd.read_csv(source\/'train.csv')","3baef57f":"train_labels.head()","c00357fa":"def plot_count(df, feature, title='', size=2):\n    f, ax = plt.subplots(1,1, figsize=(3*size,2*size))\n    total = float(len(df))\n    sns.countplot(df[feature],order = df[feature].value_counts().index, palette='Set1')\n    plt.title(title)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()","fcff5828":"plot_count(train_labels, 'isup_grade','ISUP grade - data count and percent', size=3)","2647ed3d":"isup_0 = train_labels[train_labels.isup_grade == 0]\nisup_1 = train_labels[train_labels.isup_grade == 1]\nisup_2 = train_labels[train_labels.isup_grade == 2]\nisup_3 = train_labels[train_labels.isup_grade == 3]\nisup_4 = train_labels[train_labels.isup_grade == 4]\nisup_5 = train_labels[train_labels.isup_grade == 5]\n\nprint(f'isup_0: {len(isup_0)}, isup_1: {len(isup_1)}, isup_2: {len(isup_2)}, isup_3: {len(isup_3)}, isup_4: {len(isup_4)}, isup_5: {len(isup_5)}')","6632000c":"isup_sam0 = isup_0.sample(n=1224)\nisup_sam1 = isup_1.sample(n=1224)\nisup_sam2 = isup_2.sample(n=1224)\nisup_sam3 = isup_3.sample(n=1224)\nisup_sam4 = isup_4.sample(n=1224)\n\nframes = [isup_sam0, isup_sam1, isup_sam2, isup_sam3, isup_sam4, isup_5]\nbalanced_df = pd. concat(frames)\nbalanced_df","74fe5e3c":"plot_count(balanced_df, 'isup_grade','ISUP grade - data count and percent', size=3)","fdae6866":"df_copy = balanced_df.copy()\n\n# 80\/20 split or whatever you choose\ntrain_set = df_copy.sample(frac=0.80, random_state=7)\ntest_set = df_copy.drop(train_set.index)\nprint(len(train_set), len(test_set))","92362777":"#Save train_set to csv for strattification\ntrain_set.to_csv('split.csv', index=False)","cfb03e51":"df = pd.read_csv('split.csv')\ndf.shape[0]","f9afcb6c":"sss = StratifiedShuffleSplit(n_splits=6, test_size=0.2, random_state=7)\nstrat_df = pd.DataFrame()\ncols=['isup_grade']\n\nfor i, (train_index, test_index) in enumerate(sss.split(df, df.isup_grade)):\n    df_split = df.copy()\n    df_split['fold'] = i\n    df_split.loc[train_index, 'which'] = 'train'\n    df_split.loc[test_index, 'which'] = 'valid'\n    X_train = df_split.loc[train_index]\n    X_valid = df_split.loc[test_index]\n    X_train.loc[:, 'which'] = 'train'\n    X_valid.loc[:, 'which'] = 'valid'\n    \n    mult_dis = X_train.loc[X_train.image_id=='isup_grade']\n    for _ in range(3): X_train = X_train.append(mult_dis)\n    \n    strat_df = strat_df.append(X_train).append(X_valid)\n    print(i, strat_df.shape, [(X_train[c].sum()\/len(X_train), X_train[c].sum()) for c in cols])\nstrat_df = strat_df.reset_index()","4873b6b3":"strat_df.head()","c8b7bd89":"def view_image(folder, fn):\n    filename = f'{folder}\/{fn}.tiff'\n    file = openslide.OpenSlide(str(filename))\n    t = tensor(file.get_thumbnail(size=(255, 255)))\n    pil = PILImage.create(t) \n    return pil","1af473d9":"glee_35 = train_labels[train_labels.gleason_score == '3+5']\nglee_35[:5]","e70e9a9c":"view_image(train, '05819281002c55258bb3086cc55e3b48')","73f8961b":"def get_i(fn):\n    filename = f'{train}\/{fn.image_id}.tiff'\n    example2 = openslide.OpenSlide(str(filename))\n    ee = example2.get_thumbnail(size=(255, 255))\n    return tensor(ee)","4aab743c":"blocks = (\n          ImageBlock,\n          CategoryBlock\n          )    \ngetters = [\n           get_i,\n           ColReader('isup_grade')\n          ]\ntrends = DataBlock(blocks=blocks,\n              splitter=RandomSplitter(),\n              getters=getters,\n              item_tfms=Resize(256),\n              batch_tfms=aug_transforms()\n              )","d48a9395":"def train_on_folds(bs, size, base_lr, folds):\n    learners = []\n    all_val_preds = []\n    all_val_labels = []\n    all_test_preds = []\n    \n    for fold in range(folds):\n        print(f'Processing fold: {fold}....')\n        dls = get_dls(bs=bs, size=size, fold=fold, df=strat_df)\n        \n        learn = get_learner(dls, arch, loss_func, cbs)\n        learn = train_learner(learn, base_lr)\n        learn.save(f'model_fold_{fold}')\n        learners.append(learn)\n        learn.recorder.plot_loss()\n        \n        test_dl = dls.test_dl(train_df)\n        test_preds, _, _ = learn.get_preds(dl=test_dl, with_decoded=True)\n        val_preds, val_labels = learn.get_preds()\n    \n        all_val_preds.append(val_preds)\n        all_val_labels.append(val_labels)\n        all_test_preds.append(test_preds)\n    \n    plt.show()\n    return learners, all_val_preds, all_val_labels, all_test_preds","7d5dd3e2":"set_seed(7)\ndef get_dls(bs, size, fold, df):\n    df_fold = df.copy()\n    df_fold = df_fold.loc[df_fold.fold==fold].reset_index()\n    \n    trends = DataBlock(blocks=blocks,\n                       splitter=IndexSplitter(df_fold.loc[df_fold.which=='valid'].index),\n                       getters=getters,\n                       item_tfms=Resize(256),\n                       batch_tfms=aug_transforms(size=size)\n                       )\n    dls = trends.dataloaders(df_fold, bs=bs)\n    assert (len(dls.train_ds) + len(dls.valid_ds)) == len(df_fold)\n    return dls","8e64e020":"def get_learner(dls,arch,loss_func, cbs):\n    return Learner(dls,arch,loss_func=loss_func,metrics=metrics, cbs=cbs).to_fp16()","d59defae":"def train_learner(learn, base_lr):\n    learn.unfreeze()\n    learn.fit_one_cycle(2, base_lr)\n    \n    learn.freeze_to(-2)\n    learn.fit_one_cycle(2, base_lr)\n    return learn","93277e4a":"dls = get_dls(bs=32, size=128, fold=2, df=strat_df)","cf8641a7":"dls.show_batch()","6d9a3dd8":"dls.c","77623815":"arch = resnet18(pretrained=True)\nloss_func = LabelSmoothingCrossEntropy(eps=0.3, reduction='mean')\ncbs = [ShowGraphCallback()]\nmetrics=[accuracy,CohenKappa(weights='quadratic')]\ntrain_df = pd.read_csv('split.csv')\nbs = 32\nsize = 196","2b37f6c3":"dls = get_dls(bs=bs, size=size, fold=1, df=strat_df)","548a9d73":"learn = Learner(dls,\n                model=arch,\n                loss_func=loss_func,\n                metrics=metrics,\n                cbs=cbs)","b07cd525":"learn.lr_find()","7c8d42f6":"base_lr = 1e-2\nlearners, all_val_preds, all_val_labels, all_test_preds = train_on_folds(bs, size, base_lr, folds=1)","b4e7bd2c":"test_set","2b5fbfac":"learn.load('model_fold_0')","f21467bf":"tst_dl = dls.test_dl(test_set)\ntst_dl.show_batch(max_n=9)","8dbecd32":"_, _, pred_classes = learn.get_preds(dl=tst_dl, with_decoded=True)","7087ee48":"pred_classes","6aa4a5e8":"test_df = test_set.copy()\ntest_df['isup_grade_pred'] = pred_classes\ntest_df","a3aae2f2":"confusion_matrix = pd.crosstab(test_df['isup_grade'], test_df['isup_grade_pred'], rownames=['Actual'], colnames=['Predicted'])\nsns.heatmap(confusion_matrix, annot=True)\nplt.show()","3c1e3c51":"from sklearn.metrics import classification_report \nprint(classification_report(test_df['isup_grade'], test_df['isup_grade_pred']))","5d537d56":"submission_test_path = \"..\/input\/prostate-cancer-grade-assessment\/test_images\/\"\nsample = '..\/input\/prostate-cancer-grade-assessment\/sample_submission.csv'","d86d640c":"sub_df = pd.read_csv(sample)\ntest_df = pd.read_csv(source\/f'test.csv')\nif os.path.exists(submission_test_path):\n    learn.load('prostate')\n    def get_inf(df=test_df):\n        filename = f'{submission_test_path}\/{df.image_id}.tiff' \n        example2 = openslide.OpenSlide(str(filename))\n        ee = example2.get_thumbnail(size=(255, 255))\n        return tensor(ee)\n    \n    blocks = (\n          ImageBlock,\n          CategoryBlock\n          )\n    getters = [\n           get_inf,\n           ColReader('isup_grade')\n          ]\n\n    trends = DataBlock(blocks=blocks,\n              getters=getters,\n              item_tfms=Resize(128)\n              )\n    \n    dls = trends.dataloaders(test_df, bs=32)\n    learn = cnn_learner(dls, resnet18)\n    \n    test_dl = dls.test_dl(test_df)\n    _,_,pred_classes = learn.get_preds(dl=test_dl, with_decoded=True)\n    \n    test_df[\"isup_grade\"] = pred_classes\n    sub = test_df[[\"image_id\",\"isup_grade\"]]\n    sub.to_csv('submission.csv', index=False)\n","a2645278":"# Inference on the Test set","0b7a29b1":"With the internet `on` during the testing phase you would use the standard `pip` methods of loading the `fastai2` dependancies","ee8eedfb":"So we will have `5875` images in the train set and `1469` images in the test set.","3b5ccfe9":"We have 6 different classes in the dataset","73eff27d":"# Load the dependancies","3b240fb0":"# Viewing the Images","0ade6826":"# Submission","239878f5":"We will use the `test_set` that was created","ff3074b7":"You can quickly balance the data using `sample` so that each class has `1224` images each and then create a balanced dataset","445236cc":"Create a `confusion matrix` of the results","4400193c":"This will load all the required dependacies","f7c9a8ab":"The `train_learner` function is fully customiable so you can experiement with any number of `learner` parameters","30787127":"# Creating the DataBlock","1bb56264":"Let's look at some of the images in our created `test` set","71f3c7b4":"With internet off you will also have to load your trained model, for this example I am using `resnet18`.  Once you have add the model to your kernel you have to make a `checkpoints` directory and copy the model to that directory","f9a6628d":"However with internet `off` as per the competition requirements we need to load the dependancies with the internet `off`.  In this case you will have to load the dependancies like this (by adding [fast017-whl](https:\/\/www.kaggle.com\/avirdee\/fastai017-whl) to your kernel):","0255246f":"Lets view an image with `gleason_score` 3+5 to check it works","1d97ad5c":"The competition requirement is that you have to predict the `isup_grade` for each image in the test set","7bcdae61":"Check that `dls.show_batch` works","4578169b":"# Balance the Data","3256d690":"# Create Train\/Test set","32b8abce":"This can further help us tweak the model to get better results","09b974a8":"# Stratify the Train Set","310a7ff9":"Find the best `learning rate`","2b41373e":"In this competition the `test` set is hidden but to get a better idea of how you are doing I am creating another seperate `test` set that we can test on prior to submitting to the competition\n\nCreate a copy of the `balanced_df` that we created and split it into a `80\/20` split","b08fd185":"Looking at the distribution of the balanced dataset we can see that each class is equally represented","5314977e":"In this competition the test set if hidden but we do know that there is a `test_images` folder","d42ddf0e":"This shows us that the distribution of images based on `isup_grade` is unbalanced with the highest number of images being grade `0` and the lowest number of images being grade `5`","7955d157":"Save `train_set` to `csv` so that we can strattify the training set","4b5b92db":"Specify a function for the `learner` and we will use `half precision` hence the `.to_fp16()` to reduce memory and increase training time ","7a7dd318":"#### Specify the training parameters\n\nSubmissions are scored based on the `quadratic weighted kappa`, which measures the agreement between two outcomes.  To get a good understanding of this metric see this excellent [notebook](https:\/\/www.kaggle.com\/reighns\/understanding-the-quadratic-weighted-kappa) as well as this excellent [notebook](https:\/\/www.kaggle.com\/aroraaman\/quadratic-kappa-metric-explained-in-5-simple-steps)\n\nCohen's kappa measures the agreement between two raters who each classify N items into C mutually exclusive categories.  A perfect score of 1.0 is granted when both the predictions and actuals are the same.\n\n![kappa.PNG](attachment:kappa.PNG)","e469a1dd":"Create a stratified dataframe `strat_df` with `6` splits.  `test_size` here is the % of `strat_df` that will be used for validation.","e3c13da1":"Let's check out the test results.  For this we create a dataframe of actual and predicted classes","e67a1370":"# Balanced Starter | Stratified | Submission Example\n\n**This notebook shows you how to:**\n\n- Easily view the images using `OpenSlide`\n- The dataset is pretty imbalanced, using a simple method of balancing the data prior to training\n- Create a seperate train\/test to check how the model is doing prior to submitting as the actual `test` set is hidden\n- Create a stratified `DataLoader` and use `half-precision` to improve training time\n- Test on the created `test` set and view the results via Confusion Matrix and calculate the Quadratic Weighted Kappa\n- How to submit example\n\nChange the current distribution of `isup_grade` from this:\n\n\n![isup.PNG](attachment:isup.PNG)\n\nTo this:\n![isup2.PNG](attachment:isup2.PNG)","2f33bbbc":"Plotting the distribution of `isup_grade`","99d04114":"specify the `blocks`, the `getters` and the `DataBlock`","e52496e0":"**How to submit**\n\n- This competition requires the internet to be `off` before you can submit to the competition.  For this you will have to create an internet free version of loading fastai to your kernel.  \n\nTo make it easier I have provided a convenient `kaggle dataset` with all the files you need to make a successful submission.\n\n- **1** Go to [fastai017_whl](https:\/\/www.kaggle.com\/avirdee\/fastai017-whl) to view the dataset. This dataset provides the 3 files you need to load `fastai2` version 0.0.17, `fastcore` version 0.1.18 and `fastprogress` version 0.2.3 (please upvote if you find this helpful)\n\n- **2** In your kernel click on the `Add data` tab on the right top of the notebook and under the `Search Datasets` bar, enter `fastai017.whl`\n\n- **3** Once the dataset has loaded you will find `fastai017.whl` under the `input` section.\n\n- **5** You can now load all `fastai2` dependencies with the internet off.","f905e77a":"## Internet OFF","66e487f8":"Load the `split.csv` file","d08ae322":"## Internet ON","efe167d1":"We have to create a function that can get the images from the folder, open it and change it into a `tensor` as `Fastai2` needs batches to be in the form of tensors or arrays","9fa3c669":"Create a function so that you can easily view the image.  `Fastai2` does not have an in-built method of viewing `.tiff` files.  For viewing the images we use `OpenSlide`","ab052e93":"For this we use `StratifiedShuffleSplit` from `sklearn` so that we can split the train set into 6 distinct splits and then train on each split","86501871":"Looking at the created `strat_df`, the `dataframe` now includes the `fold` number and whether it is being used for training or validation","aa1ff799":"For training with folds we need to specify funtions for training with folds, the dataloader and the learner","661f3177":"Get the predicted classes","e9b4f233":"Checking to see how many images are within each `isup_grade`"}}