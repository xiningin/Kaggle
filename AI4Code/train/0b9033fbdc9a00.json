{"cell_type":{"061563b8":"code","2fdd9dfb":"code","977cee03":"code","a484e711":"code","7732a0f8":"code","16590c8d":"code","dc7ea35d":"code","0661f5a4":"code","b1ea1951":"code","9320b53a":"code","bdd9697e":"code","0cefc7ec":"code","002593a3":"markdown","1b6e918e":"markdown","b23b183c":"markdown"},"source":{"061563b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import timedelta\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n%matplotlib inline  \n\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nfrom time import time\n\nimport math\n\n\n\nimport seaborn as sns\nimport warnings \n# warnings.simplefilter(\"default\")\nwarnings.filterwarnings('ignore')\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2fdd9dfb":"# For interactive plot in Kaggle notebook, I found a helpful guide here: https:\/\/www.kaggle.com\/harisyammnv\/interactive-eda-with-plotly-ipywidget\nimport plotly.offline as py\nimport plotly.tools as tls\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\n%matplotlib inline\n\nimport cufflinks as cf\ncf.set_config_file(offline=True, world_readable=True,  theme='pearl')\nimport folium\nimport altair as alt\nimport missingno as msg\nimport sys\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")\n\nfrom ipywidgets import interact, interactive, fixed\nimport pandas as pd\nimport ipywidgets as widgets\nfrom IPython.display import display","977cee03":"submission=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv\")\ntrain=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\")\n\n\n\ntrain['Province_State'].fillna('',inplace=True)\ntrain['Date'] = pd.to_datetime(train['Date'])\ntrain['day'] = train.Date.dt.dayofyear\ntrain['geo'] = ['_'.join(x) for x in zip(train['Country_Region'], train['Province_State'])]\n\ntest['Province_State'].fillna('', inplace=True)\ntest['Date'] = pd.to_datetime(test['Date'])\ntest['day'] = test.Date.dt.dayofyear\ntest['geo'] = ['_'.join(x) for x in zip(test['Country_Region'], test['Province_State'])]\n\ntrain.sort_values(by=\"Date\",inplace=True)\ntest.sort_values(by=\"Date\",inplace=True)\n\nday_min = train['day'].min()\ntrain['day'] -= day_min\ntest['day'] -= day_min\n\ntest['ConfirmedCases']=np.nan\ntest['Fatalities']=np.nan\n\ntrain[\"ForecastId\"]=np.nan\ntest[\"Id\"]=np.nan\n\nmin_date_train=train['Date'].min()\nmin_date_test=test['Date'].min() \nmax_date_train=train['Date'].max()\nmax_date_test=test['Date'].max()\n\nnum_of_days_train=(max_date_train-min_date_train)\/np.timedelta64(1, 'D')+1\nnum_of_days=int((max_date_test-min_date_train)\/np.timedelta64(1, 'D'))+1\n\n#two formats for the x-axis, for plotting purpose\ntime_span0=pd.date_range(min_date_train, max_date_test)\ntime_span=[str(s.month)+\"\/\"+str(s.day) for s in time_span0]\n\nforcast_days=int((max_date_test-max_date_train)\/np.timedelta64(1, 'D'))","a484e711":"from collections import OrderedDict \n\ncountries_dict = OrderedDict() \ncountries_dict[\"Afghanistan\"]=[\"\"];\ncountries_dict[\"Italy\"]=[\"\"]\ncountries_dict[\"India\"]=[\"\"]\ncountries_dict[\"Germany\"]=[\"\"]\ncountries_dict[\"Spain\"]=[\"\"]\ncountries_dict[\"Taiwan*\"]=[\"\"]\ncountries_dict[\"Japan\"]=[\"\"]\ncountries_dict[\"Spain\"]=[\"\"]\ncountries_dict[\"Germany\"]=[\"\"]\ncountries_dict[\"Singapore\"]=[\"\"]\ncountries_dict[\"Korea, South\"]=[\"\"]\ncountries_dict[\"United Kingdom\"]=[\"\"]\ncountries_dict[\"US\"]=[\"\",\"Louisiana\",\"New York\",\"California\",\"Minnesota\"]","7732a0f8":"from copy import deepcopy\nn=50\n# countries_dict[\"US\"]=[\"\"]\n\nN_places=sum([ len(value) for key, value in countries_dict.items()])\nFalse_mask_0=[False]*(N_places*2+1)\n\n\nlabels=time_span[-n-30:-30]\nx=time_span0[-n-30:-30]\n\ndata=[];   manu_list=[];\n\ndata.append(go.Bar(x=x,y=[0]*len(x),name='cases'))\n\nFalse_mask=deepcopy(False_mask_0)\nFalse_mask[0]=True         \nmanu_list.append(dict(label = \"Select\",\n                 method = 'update',      \n                 args = [{'visible': False_mask},{'title': \"Select country\/state\"}]))\n\n\n\n\nn_place=-1\n\n\n\nfor country in countries_dict:\n    for state in countries_dict[country]:\n            sp=\" \"\n            if state!=\"\": sp=', '\n            n_place+=1   \n            data_i=train[(train['Province_State']==state)&(train['Country_Region']==country)]\\\n                   .sort_values(by=\"Date\").loc[:,[\"day\",'ConfirmedCases','Fatalities']]\n            \n            \n            if country in [\"United Kingdom\",\"Canada\"]:\n                data_i=train[train['Country_Region']==country].groupby(\"Date\").sum().reset_index()\\\n                       .sort_values(by=\"Date\").loc[:,[\"day\",'ConfirmedCases','Fatalities']]\n        \n            if country==\"US\" and state==\"\":\n                data_i=train[train['Country_Region']==country].groupby(\"Date\").sum().reset_index()\\\n                          .sort_values(by=\"Date\").loc[:,[\"day\",'ConfirmedCases','Fatalities']]    \n\n            cases=country+state+\" Cases_daily\";\n            deaths=country+state+\" deaths_daily\";\n\n            data_i[cases]=data_i[\"ConfirmedCases\"].diff()\n            data_i[deaths]=data_i[\"Fatalities\"].diff()\n            \n            trace1=go.Bar(x=x,y=data_i[cases][-n:],name='cases')\n            trace2=go.Bar(x=x,y=data_i[deaths][-n:],name='deaths')\n            \n            data+=[trace1,trace2]\n             \n            False_mask=deepcopy(False_mask_0)\n            False_mask[(2*n_place+1):(2*n_place+2+1)]=[True,True]\n            \n            manu_list.append(dict(label = country+sp+state,\n                 method = 'update',      \n                 args = [{'visible': False_mask},{'title': country+sp+state}]))\n\n            \n\nupdatemenus = [\n    dict(active=0,\n        buttons=manu_list,\n         direction = 'down'\n#          ,\n#          showactive = True, \n    )\n]\n\nlayout = dict(title = 'Select Countries and states',\n              yaxis=dict(title='daily count',linecolor='rgba(255,255,255, 0.8)',showgrid=True,gridcolor='rgba(255,255,255,0.2)'),\n              xaxis= dict(title= 'Date',linecolor='rgba(255,255,255, 0.8)',showgrid=True,gridcolor='rgba(255,255,255,0.2)'),\n              margin=go.Margin(l=50,r=20),paper_bgcolor='rgb(105,105,105)',\n              plot_bgcolor='RGB(228, 235, 234)',barmode='group',font= {'color': 'RGB(179, 217, 82)'},updatemenus=updatemenus,showlegend=True)\n\n\nfig = dict(data=data, layout=layout)\n\npy.iplot(fig, filename='relayout_option_dropdown')\n\n\n\n\n","16590c8d":"countries=dict()\nfor cnt in train['Country_Region'].unique():\n    countries[cnt]=train.loc[train['Country_Region']==cnt,'Province_State'].unique()\n\ncountries_test=dict()\nfor cnt in test['Country_Region'].unique():\n    countries_test[cnt]=test.loc[test['Country_Region']==cnt,'Province_State'].unique()","dc7ea35d":"res=[]\nfor country in countries:\n    for state in countries[country]:\n        if country!=\"China\":\n            country_state_filter_train=(train['Province_State']==state)&(train['Country_Region']==country)\n            sliced_data=train.loc[country_state_filter_train,:]\n            history=sliced_data.loc[sliced_data['ConfirmedCases']>0,'ConfirmedCases'].to_list() \n            res.append(num_of_days_train-len(history))\naa=plt.figure()        \naa=plt.hist(res,color=\"blue\",bins=10 ,range=(0,80))\naa=plt.title(\"first Confirmed Case histogram: # of countries\/provinces(except China) .VS. days from Wuhan Lockdown(1\/22\/2020)\")\n\n\nres=[]\nfor country in countries:\n    for state in countries[country]:\n#         country_state_filter_test=(test['Province_State']==state)&(test['Country_Region']==country)\n        if country!=\"China\":\n            country_state_filter_train=(train['Province_State']==state)&(train['Country_Region']==country)\n            sliced_data=train.loc[country_state_filter_train,:]\n            history=sliced_data.loc[sliced_data['Fatalities']>0,'Fatalities'].to_list() \n            res.append(num_of_days_train-len(history))\naa=plt.figure()          \naa=plt.hist(res,color=\"red\",bins=10 ,range=(0,80))\naa=plt.title(\"first death histogram: # of countries\/provinces(except China) .VS. days from Wuhan Lockdown(1\/22\/2020)\")\n\n","0661f5a4":"def daily_plot(Country,Province_State,n1):\n    # labels = ['G1', 'G2', 'G3', 'G4', 'G5']*2\n    labels=time_span[-n1-30:-30]*2\n    data=train[(train['Province_State']==Province_State)&(train['Country_Region']==Country)]\\\n       .sort_values(by=\"Date\").loc[:,[\"day\",'ConfirmedCases','Fatalities']]\n    \n    data[\"Cases_daily\"]=data[\"ConfirmedCases\"].diff()\n    data[\"deaths_daily\"]=data[\"Fatalities\"].diff()\n    \n    cases= data[\"Cases_daily\"].tail(n1).astype(int) \n    deaths = data[\"deaths_daily\"].tail(n1).astype(int)\n\n    x = np.arange(2*len(cases))  # the label locations\n    width = 0.7  # the width of the bars\n\n\n\n    fig = plt.figure(figsize=(36,11));fig.tight_layout(pad=3.0)\n    fig.set_figheight(6)\n    fig.set_figwidth(10)\n\n    ax=fig.add_subplot()\n    rects1 = ax.bar(x[:len(cases)] - width\/2, cases, width, label='Daily cases')\n\n    ax2 = ax.twinx(); color=\"red\"\n    rects2 = ax2.bar(x[len(cases):] - width\/2, deaths, width, label='Daily deaths',color=color)\n\n    # Add some text for labels, title and custom x-axis tick labels, etc.\n    ax.set_ylabel('Cases')\n    ax2.set_ylabel('deaths')\n    ax.set_title('{} , {}'.format(Country, Province_State))\n    ax.set_xticks(x-0.5*width)\n    ax.set_ylim(0, max(cases)*1.2)\n    ax.set_xticklabels(labels)\n    ax2.legend((rects1,rects2), (\"ConfirmedCases\",\"Fatalities\"),loc=\"upper left\")\n    ax2.set_ylim(0, max(deaths)*1.2)\n    # ax.set_xticks(x+len(cases))\n    # ax.set_xticklabels(labels)\n\n\n    def autolabel_1(rects):\n        \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n        for rect in rects:\n            height = rect.get_height()\n            ax.annotate('{}'.format(height),\n                        xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                        xytext=(0, 3),  # 3 points vertical offset\n                        textcoords=\"offset points\",\n                        ha='center', va='bottom')\n    def autolabel_2(rects):\n        \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n        for rect in rects:\n            height = rect.get_height()\n            ax2.annotate('{}'.format(height),\n                        xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                        xytext=(0, 3),  # 3 points vertical offset\n                        textcoords=\"offset points\",\n                        ha='center', va='bottom')\n\n\n\n    autolabel_1(rects1)\n    autolabel_2(rects2)\n\n    fig.tight_layout()\n\n    plt.show()\n\n","b1ea1951":"Country='US';     Province_State=\"\";\ndaily_plot(Country,Province_State,50)\nCountry='US';     Province_State=\"New York\";\ndaily_plot(Country,Province_State,50)","9320b53a":"def rmsle(y, y_pred):\n    assert len(y) == len(y_pred)\n    terms_to_sum = [(np.log(np.abs(y_pred[i] + 1)) - np.log(np.abs(y[i] + 1))) ** 2.0 for i,pred in enumerate(y_pred)]\n    return (sum(terms_to_sum) * (1.0\/len(y))) ** 0.5\n\n# evaluate an ARIMA model for a given order (p,d,q)   \ndef evaluate_arima_model(X,forecast_days, arima_order):\n    # prepare training dataset\n    X=[x for x in X]\n    train_size = int(len(X) * 0.9)\n    train, test1 = X[0:train_size], X[train_size:]\n    # make predictions\n    history=train\n    model = ARIMA(history, order=arima_order)\n    model_fit = model.fit(disp=0)\n    predictions = list()\n    predictions =model_fit.forecast(steps=len(test1))[0]\n\n    model = ARIMA(X, order=arima_order)\n    model_fit = model.fit(disp=0)\n    if np.isnan(model_fit.forecast(steps=forecast_days)[0]).sum()>0:\n        return float('inf')\n#     print(\"herehere3333333333333333\")\n#     print(\"error=\",rmsle(test1, predictions))\n    error = rmsle(test1, predictions) \n    \n    return error\n    \ndef evaluate_models(dataset,forcast_days, p_values, d_values, q_values):\n    best_score, best_cfg = float(\"inf\"), (0,0,0)\n  \n    for p in p_values:\n        for d in d_values:\n            for q in q_values:\n                order = (p,d,q)\n                try:\n                    mse = evaluate_arima_model(dataset,forcast_days, order)\n                    if mse < best_score:\n                        best_score, best_cfg = mse, order\n                except:\n                    continue \n        \n\n    print('Best ARIMA%s MSE=%.3f' % (best_cfg, best_score))\n    try: \n        model=ARIMA(dataset, order=best_cfg)\n        model_fit=model.fit(disp=0)\n        new_data=model_fit.forecast(steps=forcast_days)[0]\n    except:\n        new_data=np.array([np.float(\"inf\")])\n    \n    return best_cfg, best_score, new_data","bdd9697e":"done=pd.DataFrame({\"A\":[1]})\ndone.to_csv('done.csv',index=False)\ndef predict_country_state(country,state):\n    country_state_filter_train=(train['Province_State']==state)&(train['Country_Region']==country)\n    country_state_filter_test=(test['Province_State']==state)&(test['Country_Region']==country)\n\n    sliced_data=train.loc[country_state_filter_train,:]\n\n    Targets=['ConfirmedCases', \"Fatalities\"]; Subs=[\"_Cases\",\"_Deaths\"]; Preds=dict(); history_Preds=dict()\n    for i,target in enumerate(Targets):\n        history=sliced_data.loc[sliced_data[target]>0,target].to_list()  \n    #     display(history[:5])\n        start_time=time()\n        best_cfg,best_score,pred=evaluate_models(history,forcast_days,range(10),range(7),range(7)) \n        if (pred!=np.float(\"inf\")).all():\n            Preds[\"Pred\"+Subs[i]]=[round(p) if p>0 else 0 for p in pred] \n            history_Preds[\"Pred\"+Subs[i]]=history+Preds[\"Pred\"+Subs[i]]\n\n            print(\"CPU time for \"+target+ \" costed: \",time()-start_time)\n            print(\"Country=\",country,\", Province\/State=\", state)\n            print(\"________________________\")\n\n            test.loc[country_state_filter_test&(test[\"Date\"]<=max_date_train),target]\\\n                 =train.loc[country_state_filter_train&(train[\"Date\"]>=min_date_test)&(train[\"Date\"]<=max_date_train),target].values\n            test.loc[country_state_filter_test&(test[\"Date\"]>max_date_train),target]=Preds[\"Pred\"+Subs[i]]\n        else:\n            return None\n\n    fig=plt.figure()\n\n    ss=history_Preds[\"Pred_Cases\"]; hl=len(ss);\n    ss_plot=np.zeros(num_of_days);ss_plot[-hl:]=ss\n\n    ax=fig.add_subplot();  color='tab:blue'; \n    line1,=ax.plot(time_span0,ss_plot,label='ComfirmedCases',color=color )\n    ax.plot(time_span0[-len(Preds[\"Pred_Cases\"]):],Preds[\"Pred_Cases\"],'*',color=color)\n    ax.set_title(country+\",\"+state)\n    ax.set_ylabel(\"Comfirmed Cases\")\n    ax.set_xlabel(\"Date\")\n    ax.tick_params(axis='y', labelcolor=color)\n    # ax.tick_params(axis='x',labelrotation=45, labelcolor=color)\n    s=[time_span[i]  for i in range(len(time_span)) if  i%10==0];\n    # plt.xticks(ticks=s,labels=s)\n\n    ax.set_xticklabels([])\n\n\n    scale=50\n    ss=history_Preds[\"Pred_Deaths\"]; hl=len(ss);\n    ss_plot=np.zeros(num_of_days);ss_plot[-hl:]=np.array(ss)*scale\n\n    ax2 = ax.twinx();       color='tab:red';   \n    line2,=ax2.plot(time_span0,ss_plot,label='Fatalities',color=color); \n    ax2.plot(time_span0[-len(Preds[\"Pred_Deaths\"]):],np.array(Preds[\"Pred_Deaths\"])*scale,'+',color=color)\n\n    ax2.set_title(country+\",\"+state)\n    ax2.set_ylabel(\"Fitalities (x 50)\")\n    ax2.tick_params(axis='y', labelcolor=color)\n    ax2.legend((line1,line2), (\"ConfirmedCases\",\"Fatalities\"),loc=\"upper left\")\n    s0=[time_span0[i]  for i in range(len(time_span)) if  i%16==15];\n    s=[time_span[i]  for i in range(len(time_span)) if  i%16==15];\n    # ax2.set_xticklabels(labels=s,minor=False)\n    ax2.set_xticklabels([])\n    aa=plt.xticks(ticks=s0, labels=s)\n    aa=plt.axvline(x=pd.to_datetime(pd.Series(datetime.today()))[0], ymin=0, ymax = ss_plot.max(), linewidth=2, color='g')\n    \n    plt.show()\n\n    sumb=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv')\n    output=pd.DataFrame()\n    output['ForecastId']=test['ForecastId'].astype(int)\n    output['ConfirmedCases']=test[test['ConfirmedCases'].notnull()]['ConfirmedCases'].astype(int)\n    output['Fatalities']=test[test['Fatalities'].notnull()]['Fatalities'].astype(int)\n    output.to_csv('submission.csv',index=False)\n    \n    done=pd.read_csv('done.csv')\n    done=done.append([{\"A\":country+\" \"+state}],ignore_index=True)\n    done.to_csv('done.csv',index=False)\n    return None\n","0cefc7ec":"for country in countries_dict:\n#     if country in [\"India\",\"Italy\",]\n    for state in countries_dict[country]:\n        predict_country_state(country,state)\n        ","002593a3":"## Some Observations:\n- There were about 20 days between Feb 8 to Feb 25 that very small number of places where new cases were reported.\n- For most countries\/provinces, first death is after 40 days of Wuhan Lockdown.","1b6e918e":"## Side by side view:\n - This is a 50 days of plot, with number for daily cases and deaths plotted side by side. The daily cases# has shown obvious decreasing tendency. At the same time, the daily death# has shown some flattening behivior. ","b23b183c":"## Comments on ARIMA prediction so far:\n- This is a plain implementation of ARIMA model to predict numbers. The calculation is not stable(warnings not shown explicitly). I don't undertand the theoretical details of this method yet. I do these modelling just for fun and for learning purposes.  From the shape of the calculated curves, here are some comments.\n\n- The red lines represents daily fitalities and the numbers on the right y-axis is 50 times the real-life number. This rescale is not nessary. I wouldn't use it in the future.  \n\n- The most important features that can be extracted from the predictions is the curvatures of the curves. Only the short-term predictions are expected to bear some value based on our simple model. \n\n- The predictions of both curves for Germany, as well as daily cases for South Korea and Louisiana, are qualitatively wrong. For example, the total confirmed cases should be a monotonously increasing function bu the see some maximum points for all these countries. By closely looking at the curves, however, such results may reflect some sharp changes during the past days and they exaggerated recent data behavior and did unreasonable extrapolation.\n\n- I believe the predictions made for NewYork,Califonia, United Kindom, do gives a reasonable trend in the short-term future.\n\n- The total number in South Korea has a Plateau behavior now, as can be checked by the first figure in this notebook(choose \"South Korea\"  in the dropdown list). \n\n- The fitality curve for Taiwan is especially interesting. The numbers are very low. This model even predicted some jumping behavior of the future, which is a long term behavior it learnt from past data! "}}