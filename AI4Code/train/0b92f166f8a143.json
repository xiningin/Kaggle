{"cell_type":{"3aa28881":"code","a55aa89a":"code","3e651c9c":"code","136f1fb9":"code","1a6b831f":"code","377ff676":"code","96dccbda":"code","ed1edf65":"code","b937933e":"code","af2052d4":"code","b798cc24":"code","4b84328e":"code","bc7c3eef":"code","c942d49a":"code","4b93e51e":"code","79a7ebd6":"code","1b094194":"code","69d0fbd9":"code","185b85e2":"code","cff3b6cb":"code","7dbcc0d5":"code","3f9469fa":"code","e761ab40":"code","f5efe2f8":"code","77f12f44":"code","e61a0f48":"code","f80fedf5":"code","f2abe3fc":"markdown","d908ddb5":"markdown","130394b9":"markdown","f1fdf718":"markdown","f6f39b25":"markdown","56d1f9df":"markdown","b4e45a25":"markdown","5a27fdb6":"markdown","2e01198d":"markdown","5f19771b":"markdown","b7e5f59e":"markdown","ee4d8dcd":"markdown","e4cf90cc":"markdown","7e3d0831":"markdown","9235a218":"markdown","df4c9acc":"markdown"},"source":{"3aa28881":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a55aa89a":"train_df=pd.read_csv(\"\/kaggle\/input\/bigquery-geotab-intersection-congestion\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/bigquery-geotab-intersection-congestion\/test.csv\")","3e651c9c":"train_df.head()","136f1fb9":"train_df.info()","1a6b831f":"train_df.isna().sum()","377ff676":"train_df[train_df.isnull().any(axis=1)].head(10)","96dccbda":"test_df.info()","ed1edf65":"test_df.isna().sum()","b937933e":"test_df[test_df.isnull().any(axis=1)].head(10)","af2052d4":"train_df.groupby(\"City\").count()","b798cc24":"import plotly.express as px","4b84328e":"train_intersections_count=train_df.groupby(['City','Latitude','Longitude']).IntersectionId.count().reset_index()\ntrain_intersections_count.columns=['City','Latitude','Longitude','Count_Obs']","bc7c3eef":"fig = px.scatter_mapbox(train_intersections_count[train_intersections_count.City=='Atlanta'], lat=\"Latitude\", lon=\"Longitude\",size=\"Count_Obs\",color=\"Count_Obs\",  \n                        color_continuous_scale=px.colors.sequential.Viridis, size_max=15, zoom=10)\nfig.update_layout(mapbox_style=\"open-street-map\")\nfig.show()","c942d49a":"fig = px.scatter_mapbox(train_intersections_count[train_intersections_count.City=='Boston'], lat=\"Latitude\", lon=\"Longitude\",size=\"Count_Obs\",color=\"Count_Obs\",  \n                        color_continuous_scale=px.colors.sequential.Viridis, size_max=15, zoom=10)\nfig.update_layout(mapbox_style=\"open-street-map\")\nfig.show()","4b93e51e":"fig = px.scatter_mapbox(train_intersections_count[train_intersections_count.City=='Chicago'], lat=\"Latitude\", lon=\"Longitude\",size=\"Count_Obs\",color=\"Count_Obs\",  \n                        color_continuous_scale=px.colors.sequential.Viridis, size_max=15, zoom=10)\nfig.update_layout(mapbox_style=\"open-street-map\")\nfig.show()","79a7ebd6":"fig = px.scatter_mapbox(train_intersections_count[train_intersections_count.City=='Philadelphia'], lat=\"Latitude\", lon=\"Longitude\",size=\"Count_Obs\",color=\"Count_Obs\",  \n                        color_continuous_scale=px.colors.sequential.Viridis, size_max=15, zoom=10)\nfig.update_layout(mapbox_style=\"open-street-map\")\nfig.show()","1b094194":"#Creating Dummies for train Data\ndfen = pd.get_dummies(train_df[\"EntryHeading\"],prefix = 'en')\ndfex = pd.get_dummies(train_df[\"ExitHeading\"],prefix = 'ex')\n#hours = pd.get_dummies(train_df[\"Hour\"],prefix = 'hour')\ncity=pd.get_dummies(train_df[\"City\"])\ntrain_df = pd.concat([train_df,dfen],axis=1)\ntrain_df = pd.concat([train_df,dfex],axis=1)\ntrain_df = pd.concat([train_df,city],axis=1)\n#train_df = pd.concat([train_df,hours],axis=1)\n\n#Creating Dummies for test Data\ndfent = pd.get_dummies(test_df[\"EntryHeading\"],prefix = 'en')\ndfext = pd.get_dummies(test_df[\"ExitHeading\"],prefix = 'ex')\n#hours = pd.get_dummies(test_df[\"Hour\"],prefix = 'hour')\ncity=pd.get_dummies(test_df[\"City\"])\ntest_df = pd.concat([test_df,dfent],axis=1)\ntest_df = pd.concat([test_df,dfext],axis=1)\ntest_df = pd.concat([test_df,city],axis=1)\n#test_df = pd.concat([test_df,hours],axis=1)","69d0fbd9":"train_df.head()","185b85e2":"#Training Data\nX = train_df[[\"IntersectionId\",\"Latitude\",\"Longitude\",\"Hour\",\"Weekend\",\"Month\",\n              'Atlanta','Boston','Chicago','Philadelphia',\n               'en_E','en_N', 'en_NE', 'en_NW', 'en_S', 'en_SE', 'en_SW', 'en_W', 'ex_E',\n               'ex_N', 'ex_NE', 'ex_NW', 'ex_S', 'ex_SE', 'ex_SW', 'ex_W']]\ny1 = train_df[\"TotalTimeStopped_p20\"]\ny2 = train_df[\"TotalTimeStopped_p50\"]\ny3 = train_df[\"TotalTimeStopped_p80\"]\ny4 = train_df[\"DistanceToFirstStop_p20\"]\ny5 = train_df[\"DistanceToFirstStop_p50\"]\ny6 = train_df[\"DistanceToFirstStop_p80\"]","cff3b6cb":"X.head()","7dbcc0d5":"testX = test_df[[\"IntersectionId\",\"Latitude\",\"Longitude\",\"Hour\",\"Weekend\",\"Month\",\n              'Atlanta','Boston','Chicago','Philadelphia',\n               'en_E','en_N', 'en_NE', 'en_NW', 'en_S', 'en_SE', 'en_SW', 'en_W', 'ex_E',\n               'ex_N', 'ex_NE', 'ex_NW', 'ex_S', 'ex_SE', 'ex_SW', 'ex_W']]","3f9469fa":"import matplotlib.pyplot as plt","e761ab40":"#Correlation for engireed dataset\nf = plt.figure(figsize=(19, 15))\nplt.matshow(train_df.corr(), fignum=f.number)\nplt.xticks(range(train_df.shape[1]), train_df.columns, fontsize=14, rotation=45)\nplt.yticks(range(train_df.shape[1]), train_df.columns, fontsize=14)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14)\nplt.title('Correlation Matrix', fontsize=16);","f5efe2f8":"#Correlation for engireed dataset\nf = plt.figure(figsize=(19, 15))\nplt.matshow(X.corr(), fignum=f.number)\nplt.xticks(range(X.shape[1]), X.columns, fontsize=14, rotation=45)\nplt.yticks(range(X.shape[1]), X.columns, fontsize=14)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14)\nplt.title('Correlation Matrix', fontsize=16);","77f12f44":"from sklearn import linear_model\n#lasso_reg = linear_model.Lasso(alpha=0.00001, random_state=1)\nlasso_reg = linear_model.BayesianRidge()\nlasso_reg.fit(X,y1)\npredict_l1= lasso_reg.predict(testX)\nlasso_reg.fit(X,y2)\npredict_l2= lasso_reg.predict(testX)\nlasso_reg.fit(X,y3)\npredict_l3= lasso_reg.predict(testX)\nlasso_reg.fit(X,y4)\npredict_l4= lasso_reg.predict(testX)\nlasso_reg.fit(X,y5)\npredict_l5= lasso_reg.predict(testX)\nlasso_reg.fit(X,y6)\npredict_l6= lasso_reg.predict(testX)","e61a0f48":"# Appending all predictions\nprediction_l = []\nfor i in range(len(predict_l1)):\n    for j in [predict_l1,predict_l2,predict_l3,predict_l4,predict_l5,predict_l6]:\n        prediction_l.append(j[i])\nsubmission_l = pd.read_csv(\"..\/input\/bigquery-geotab-intersection-congestion\/sample_submission.csv\")\nsubmission_l[\"Target\"] = prediction_l\nsubmission_l.to_csv(\"Submission_l.csv\",index = False)     ","f80fedf5":"submission_l","f2abe3fc":"**Cities**","d908ddb5":"The same for test dataset","130394b9":"**Chicago**","f1fdf718":"**Atlanta**","f6f39b25":"Correlation matrix","56d1f9df":"Create the new traing and test set","b4e45a25":"TODO: Could be interesting to know what are those streets?","5a27fdb6":"**Lasso**","2e01198d":"**Philadelphia**","5f19771b":"### Visualize data on the map","b7e5f59e":"## Model evaluation","ee4d8dcd":"Some intersections don't have the Entry or Exit street name. \nOther dimensions in the train set dont' have NaN.","e4cf90cc":"## Dataset analysis","7e3d0831":"Reading the files","9235a218":"## Feature engineering\n\nThe entry and exit street name and the path are not inportant for modeling because we have lat lon and entry and exit heading. ","df4c9acc":"**Boston**"}}