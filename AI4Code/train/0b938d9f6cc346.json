{"cell_type":{"6e424f86":"code","74c14531":"code","e898b10e":"code","8cf0a682":"code","ec684dd8":"code","2756825a":"code","b5475a38":"code","77c2c972":"code","3bd61a0e":"code","560e318f":"code","35577385":"markdown","0fdd03cd":"markdown"},"source":{"6e424f86":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n# ideas are taken from \n# https:\/\/www.kaggle.com\/brendan45774\/titanic-top-solution, for the first gender graph\n# https:\/\/www.kaggle.com\/gunesevitan\/titanic-advanced-feature-engineering-tutorial\n# https:\/\/www.kaggle.com\/kenjee\/titanic-project-example\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-notebook')\nfrom matplotlib.ticker import StrMethodFormatter\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","74c14531":"# set up font properties variables\nfont_title = {'family': 'serif',\n        'color':  'black',\n        'weight': 'normal',\n        'size': 20,\n        }\n\nfont_axis_lable = {'family': 'serif',\n        'color':  'black',\n        'weight': 'normal',\n        'size': 18,\n        }","e898b10e":"#load test data set\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","8cf0a682":"#load train data set\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","ec684dd8":"#check what was the probability to survive if a passenger is a woman\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","2756825a":"#check what was the probability to survive if a passenger is a man\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","b5475a38":"y = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_Titanic_tutorial_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","77c2c972":"survived = 'survived'\nnot_survived = 'not survived'\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(16, 8), sharey=True)\n\nwomen = train_data[train_data['Sex']=='female']\nmen = train_data[train_data['Sex']=='male']\n\nbins_in_figs = 30\n\n#plt.xlabel('Age', fontdict=font_axis_lable)\nax = sns.histplot(women[women['Survived']==1].Age.dropna(), bins=bins_in_figs, label = survived, ax = axes[0], kde =False, color=\"green\")\nsurvived_female_counts, survived_female_intervals =  np.histogram(women[women['Survived']==1].Age.dropna(), bins=bins_in_figs)\n\nax = sns.histplot(women[women['Survived']==0].Age.dropna(), bins=bins_in_figs, label = not_survived, ax = axes[0], kde =False, color=\"red\")\nvictims_female_counts, victims_female_intervals =  np.histogram(women[women['Survived']==0].Age.dropna(), bins=bins_in_figs)\n\nax.legend()\nax.set_xlim([-5, 85])\nax.set_title('Female', fontdict=font_title)\n\n\n\nax = sns.histplot(men[men['Survived']==1].Age.dropna(), bins=bins_in_figs, label = survived, ax = axes[1], kde = False, color=\"green\")\nsurvived_male_counts, survived_male_intervals =  np.histogram(men[men['Survived']==1].Age.dropna(), bins=bins_in_figs)\nax = sns.histplot(men[men['Survived']==0].Age.dropna(), bins=bins_in_figs, label = not_survived, ax = axes[1], kde = False, color=\"red\")\nvictims_male_counts, victims_male_intervals =  np.histogram(men[men['Survived']==0].Age.dropna(), bins=bins_in_figs)\nax.legend()\nax.set_xlim([-5, 85])\n_ = ax.set_title('Male', fontdict=font_title);\nfig.suptitle('Count of survived and victims', fontsize=20)","3bd61a0e":"women = train_data[train_data['Sex']=='female']\ncount_women = len(women)\nmen = train_data[train_data['Sex']=='male']\ncount_men = len(men)\n\n#calculate percentage of survived females, based on the train set\ndata_female = []\nfor i in range(len(survived_female_counts)):\n    if survived_female_counts[i] == 0:        \n        data_female.append(0)        \n    else:\n        #print(survived_female_counts[i])\n        data_female.append(survived_female_counts[i]\/(survived_female_counts[i] + victims_female_counts[i]))\nlabels = len(data_female)\n\n#calculate percentage of survived males, based on the train set\ndata_male = []\nfor i in range(len(survived_male_counts)):\n    if survived_male_counts[i] == 0:        \n        data_male.append(0)        \n    else:\n        #print(survived_female_counts[i])\n        data_male.append(survived_male_counts[i]\/(survived_male_counts[i] + victims_male_counts[i]))\nlabels = len(data_male)","560e318f":"#draw the figure\n\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(16, 8), sharey=True)\n\n#draw females\naxes[0].bar(range(len(data_female)), data_female)\naxes[0].set_xlabel('Wrong Ages (~x3)')\naxes[0].set_ylabel('Portion of survived individuals')\n#plt.title('Probability to survive, females')\n\n\n\n#draw males\naxes[1].bar(range(len(data_male)), data_male)\naxes[1].set_xlabel('Wrong Ages (~x3)')\n\nfig.suptitle('Portion of survived passengers, females and males')","35577385":"1) here is a question of relative probability, too. Like if there are less people of some age, there will be smaller bar even if they all survived\n\n2) There were less femeles, than men?","0fdd03cd":"Image sourse - Wikipedia\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/6\/69\/Titanic_casualties.svg\/800px-Titanic_casualties.svg.png\" width=600 height=600 \/>"}}