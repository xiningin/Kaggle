{"cell_type":{"be445513":"code","3a29fed4":"code","a3ee37b8":"code","408fb045":"code","173edcd7":"code","dcfd8c2a":"code","686e962a":"code","2ad12e5a":"code","9e31a4dc":"code","392975f5":"code","1013918f":"code","b99bed1b":"code","a4ed7088":"code","e67ffac8":"code","1beee747":"code","e3213847":"code","d2faca39":"code","ac902993":"code","0cf9b04c":"code","f3f494d2":"code","0589ed5d":"code","cc80a969":"markdown","39eb8c19":"markdown","2ff9d8bb":"markdown","e8b3d7cc":"markdown","6253f557":"markdown","23a599e2":"markdown","1afa71fb":"markdown","b2d7330d":"markdown","c027a1d1":"markdown","df1bf294":"markdown","ac7d14f5":"markdown","1cc44ed5":"markdown","2abf6320":"markdown","f6695fac":"markdown","98b7d986":"markdown","99c57e8d":"markdown","507458f9":"markdown","d51322dd":"markdown","b4583977":"markdown","2a6d8a15":"markdown","09ba241a":"markdown","b4d0dfc8":"markdown","97795481":"markdown","206aa90c":"markdown","4c08b87d":"markdown","f90f1cd4":"markdown","57dff741":"markdown","731ba938":"markdown","f2149b49":"markdown","bc9632b2":"markdown","5e188e68":"markdown","53dc6096":"markdown","1e877cac":"markdown","3310330e":"markdown","e3fd99cd":"markdown"},"source":{"be445513":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n# _______________________________________\n\n# Kernels Data (Public Score & File Path)\n\ndfk = pd.DataFrame({ \n    'Kernel ID': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'],  \n    'Score':     [ 0.69864 , 0.69846 , 0.69836 , 0.69824 , 0.69813, 0.69795, 0.69751, 0.69749, 0.69747, 0.69735, 0.69731, 0.69701],   \n    'File Path': ['..\/input\/aa69864\/AA69864.csv', '..\/input\/bb69846\/BB69846.csv', '..\/input\/cc69836\/CC69836.csv', '..\/input\/a69824\/A69824.csv', '..\/input\/c69813\/C69813.csv', '..\/input\/ff69795\/FF69795.csv', '..\/input\/gg69751\/GG69751.csv' , '..\/input\/g69749\/G69749.csv', '..\/input\/h69747\/H69747.csv', '..\/input\/i69735\/I69735.csv', '..\/input\/j69731\/J69731.csv', '..\/input\/l69701\/L69701.csv']     \n})    \n    \ndfk         ","3a29fed4":"def generate(main, support, coeff):\n    \n    g = main.copy()    \n    for i in main.columns[1:]:\n        \n        res = []\n        lm, Is = [], []        \n        lm = main[i].tolist()\n        ls = support[i].tolist()  \n        \n        for j in range(len(main)):\n            res.append((lm[j] * coeff) + (ls[j] * (1.- coeff)))            \n        g[i] = res\n        \n    return g\n","a3ee37b8":"def drawing(main, support, generated):\n    \n    X  = main.iloc[:, 1]\n    Y1 = support.iloc[:, 1]\n    Y2 = generated.iloc[:, 1]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nOn the X axis >>> main\\nOn the Y axis >>> support\\n')           \n    plt.scatter(X, Y1, s=0.1)\n    plt.show() \n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nOn the X axis >>> main\\nOn the Y axis >>> generated\\n')           \n    plt.scatter(X, Y2, s=0.1)\n    plt.show()     \n    ","408fb045":"def drawing1(main, support, generated):\n    \n    X  = main.iloc[:, 1]\n    Y1 = support.iloc[:, 1]\n    Y2 = generated.iloc[:, 1]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nBlue | X axis >> main | Y axis >> support\\n\\nOrange | X axis >> main | Y axis >> generated\\n') \n    \n    plt.scatter(X, Y1, s=0.1)    \n    plt.scatter(X, Y2, s=0.1)\n    \n    plt.show() \n    ","173edcd7":"def drawing2(pxy, mxy):\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nComparative Method\\n\\nBlue | X(main) | Y(average - smaller result)\\n\\nOrange | X(main) | Y(generated)\\n') \n    plt.scatter(pxy[0], pxy[1], s=0.1)\n    plt.scatter(pxy[0], pxy[2], s=0.1)\n    plt.show() \n\n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nComparative Method\\n\\nBlue | X(main) | Y(average - bigger results)\\n\\nOrange | X(main) | Y(generated)\\n') \n    plt.scatter(mxy[0], mxy[1], s=0.1)\n    plt.scatter(mxy[0], mxy[2], s=0.1)\n    plt.show()\n    ","dcfd8c2a":"def comparison(main, majority, pcoeff, mcoeff):\n    '''\n    majority: Must be greater than half the total number of kernels. \n              In this example it must be greater than six.(Hyper parameter)\n    \n    pcoeff:   More than one (Hyper parameter)\n    mcoeff:   Less than one (Hyper parameter)\n    \n              First you can assume: (mcoeff = 2 - pcoeff)\n              Then update the numbers based on the results.    \n    '''    \n    comp = main.copy()\n    for i in main.columns[1:]:\n        res = []\n        pxy = [[],[],[]]\n        mxy = [[],[],[]]        \n        lm  = main[i].tolist() \n        ls  = [[],[],[],[],[],[],[],[],[],[],[],[]]\n        for n in range (12):       \n            csv   = pd.read_csv(dfk.iloc[n, 2])  \n            ls[n] = csv[i].tolist() \n            \n        for j in range(len(main)):\n            pcount = 0\n            pvalue = 0.0        \n            mcount = 0\n            mvalue = 0.0 \n    \n            for k in range (12):            \n                if lm[j] > ls[k][j]:\n                    pcount += 1\n                    pvalue += ls[k][j]                 \n                else: \n                    mcount += 1\n                    mvalue += ls[k][j] \n                    \n            if (pcount > majority): \n                res.append(lm[j] * pcoeff)\n                pxy[2].append(lm[j] * pcoeff)                \n                pxy[1].append(pvalue \/ pcount)\n                pxy[0].append(lm[j])\n                        \n            elif (mcount > majority): \n                res.append(lm[j] * mcoeff)\n                mxy[2].append(lm[j] * mcoeff)                \n                mxy[1].append(mvalue \/ mcount)\n                mxy[0].append(lm[j])\n                        \n            else: \n                res.append(lm[j])       \n    \n        comp[i] = res    \n\n    drawing2(pxy, mxy)    \n    return comp\n    \n    ","686e962a":"support = pd.read_csv(dfk.iloc[0, 2])\n    \nfor k in range (1, 7):\n    main = pd.read_csv(dfk.iloc[k, 2])\n    support = generate(main, support, 0.99)\n    \nsub1 = support ","2ad12e5a":"print('sub1(Last Support)    | Score: 0.69751')\nsub1.describe()","9e31a4dc":"main = pd.read_csv(dfk.iloc[7, 2])\n\nsub2 = generate(main, sub1, 0.65)\n\n#drawing(main, sub1, sub2)\n\ndrawing1(main, sub1, sub2)","392975f5":"print('sub2    | Score: 0.69744')\nsub2.describe()","1013918f":"main = pd.read_csv(dfk.iloc[8, 2])\n\nsub3 = generate(main, sub2, 0.50)\n\n#drawing(main, sub2, sub3)\n\ndrawing1(main, sub2, sub3)","b99bed1b":"print('sub3    | Score: 0.69737')\nsub3.describe()","a4ed7088":"main = pd.read_csv(dfk.iloc[9, 2])\n\nsub4 = generate(main, sub3, 0.55)\n\n#drawing(main, sub3, sub4)\n\ndrawing1(main, sub3, sub4)","e67ffac8":"print('sub4    | Score: 0.69725')\nsub4.describe()","1beee747":"main = pd.read_csv(dfk.iloc[10, 2])\n\nsub5 = generate(main, sub3, 0.43)\n\n#drawing(main, sub3, sub5)\n\ndrawing1(main, sub3, sub5)","e3213847":"print('sub5    | Score: 0.69698')\nsub5.describe()","d2faca39":"main = pd.read_csv(dfk.iloc[11, 2])\n\nsub6 = generate(main, sub5, 0.40)\n\n#drawing(main, sub5, sub6)\n\ndrawing1(main, sub5, sub6)","ac902993":"print('sub6    | Score: 0.69684')\nsub6.describe()","0cf9b04c":"sub7 = comparison(sub6, 7, 1.0036, 0.9972)\n","f3f494d2":"print('sub7    | Score: 0.69652')\nsub7.describe()","0589ed5d":"sub = sub7\nsub.to_csv(\"submission.csv\", index=False)\n\nsub1.to_csv(\"submission1.csv\", index=False)\nsub2.to_csv(\"submission2.csv\", index=False)\nsub3.to_csv(\"submission3.csv\", index=False)\nsub4.to_csv(\"submission4.csv\", index=False)\nsub5.to_csv(\"submission5.csv\", index=False)\nsub6.to_csv(\"submission6.csv\", index=False)\n\n!ls","cc80a969":"<div class=\"alert alert-success\">  \n<\/div>","39eb8c19":"## Conclusion:\n### In this notebook, only the results of a number of kernels were used. The best score was \"0.69701\". But as you can see, we were able to score much better. >>> \"Score: 0.69652\"\n","2ff9d8bb":"## Step #1\nIn this step, we use the results of kernels \"A, B, C, D, E, F, G\".","e8b3d7cc":"## Result: \n[ A: (Score: 0.69864), B: (Score: 0.69846), ... , G: (Score: 0.69795), H: (Score: 0.69751) ] >>> sub1: (Score: **0.69751**)\n\nThe results of these kernels are used in the \"Comparative Method\" and can not have a direct effect on improving the score.\n","6253f557":"<div class=\"alert alert-success\">  \n<\/div>","23a599e2":"## Result:\n\n[ J: (Score: 0.69735) , sub3: (Score: 0.69737) ] >>> sub4: (Score: **0.69725**)\n\nMy research showed that it is better to ignore this step. Deleting the \"J kernel\" at this stage will make the \"Comparative Method\" work better later. The variety of notebooks solutions is even more important than their score.\n","1afa71fb":"<div class=\"alert alert-success\">  \n<\/div>","b2d7330d":"<div class=\"alert alert-success\">  \n<\/div>","c027a1d1":"<div class=\"alert alert-success\">  \n<\/div>","df1bf294":"<div class=\"alert alert-success\">  \n<\/div>","ac7d14f5":"## Step #7\n## Comparative Method\nIn this step, we so-called recover some of the results of the previous step. That is, we compensate for the bad effects of the previous stages.","1cc44ed5":"## Result:\n\n[ K: (Score: 0.69731) , sub3: (Score: 0.69737) ] >>> sub5: (Score: **0.69698**)\n\nThe difference in notebook solutions is the reason for the good progress at this step. When solutions are different, they reinforce each other's weaknesses.","2abf6320":"<div>\n    <h1 align=\"center\">\"Optimizing Results\"<\/h1><\/h1>\n    <h3 align=\"center\">Tabular Playground Series - Jan 2021<\/h3>\n<\/div>","f6695fac":"<div class=\"alert alert-success\">  \n<\/div>","98b7d986":"# Description:\n\n### - In this notebook, we use the results of other notebooks. But in the end, the score of this notebook will be better than the score of each notebook used. Of course this type of method only works for some challenges and is not a general method.\n\n### - In steps one through six, I used \"ensembling\" and in step seven, I used the \"Comparative Method\". The \"Comparative Method\" is new to you because it's my own idea. Of course, outside of Kaggle, I have used the \"Comparative Method\" many times, and this method has always worked very well. That's why I decided to share this method with you in this challenge. As you will see in this notebook, the positive effect of the \"Comparative Method\" is even greater than the effect of all the \"ensembling\" steps.\n\n### - For example, suppose you have a real project (not a Kaggle challenge). You got seven mediocre results with seven simple methods and three good results with three advanced methods. You usually miss out on seven mediocre results, but my suggestion is that even mediocre results are important. You can improve good results by \"ensembling\" and use mediocre results for the \"Comparative Method\".\n\n### - To date, I have used the results of twelve kernels. Of course, better scores have a greater impact on the score of this notebook. However, each kernel has helped me with the voting (Comparative Method). Thanks to everyone and again I will mention the addresses of some of these kernels below. Certainly the credit of this notebook belongs to all of us.\n\n### https:\/\/www.kaggle.com\/shogosuzuki\/0-69701-folds-10-lightgbm\n\n### https:\/\/www.kaggle.com\/ryanzhang\/tabular-playground-some-slightly-useful-features\n\n### https:\/\/www.kaggle.com\/hamzaghanmi\/xgboost-hyperparameter-tuning-using-optuna\n\n### https:\/\/www.kaggle.com\/hamditarek\/tabular-playground-series-xgboost-lightgbm\n\n### https:\/\/www.kaggle.com\/kailex\/tabular-playground\n\n### - You can also find more information about this notebook at the following address:\n\n### [[results-driven] How to convert a score of <0.69701> to a score of <0.69652>](http:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2021\/discussion\/213093).\n\n","99c57e8d":"## Result:\n\n[ \u0141: (Score: 0.69701) , sub5: (Score: 0.69698) ] >>> sub6: (Score: **0.69684**)","507458f9":"## Functions:","d51322dd":"## Step #2\nUse the results of the \"H\" kernel as well as the results of step #1.","b4583977":"<div class=\"alert alert-success\">  \n<\/div>","2a6d8a15":"# If you find this work useful, please don't forget upvoting :)\n","09ba241a":"<div class=\"alert alert-success\">  \n<\/div>","b4d0dfc8":"<div class=\"alert alert-success\">  \n<\/div>","97795481":"## Result:\n\nsub6: (Score: 0.69684)  >>>  sub7: (Score: **0.69652**)\n\nWe first compared the result of our previous step with the results of each kernel used. We looked for rows where the results of all kernels (or the majority of kernels) differed from the results of our previous step (more or less). On the other hand, we know that the results of the previous step are better than the results of all the kernels used. So we can guess that these rows have been oppressed !!! That is, in the previous steps, they were mistakenly increased or decreased. We compensate for these possible errors to some extent by applying the coefficients \"pcoeff\" and \"mcoeff\" (of course, only in these rows). Fortunately, the pictures illustrate the method well.\n\nThat is, first we hold a vote and then, exactly contrary to the result of the vote, we make the corrections:)","206aa90c":"## Step #4\nUse the results of the \"J\" kernel as well as the results of step #3.","4c08b87d":"<div class=\"alert alert-success\">  \n<\/div>","f90f1cd4":"<div class=\"alert alert-success\">  \n<\/div>","57dff741":"## Step #3\nUse the results of the \"I\" kernel as well as the results of step #2.","731ba938":"## Submission","f2149b49":"<div class=\"alert alert-success\">  \n<\/div>","bc9632b2":"## Result:\n\n[ H: (Score: 0.69749) , sub1: (Score: 0.69751) ] >>> sub2: (Score: **0.69744**)","5e188e68":"## Import & Data Set","53dc6096":"## Result:\n\n[ I: (Score: 0.69747) , sub2: (Score: 0.69744) ] >>> sub3: (Score: **0.69737**)\n","1e877cac":"## Step #6\nUse the results of the \"L\" kernel as well as the results of step #5.","3310330e":"<div class=\"alert alert-success\">  \n<\/div>","e3fd99cd":"## Step #5\nUse the results of the \"K\" kernel as well as the results of step #4."}}