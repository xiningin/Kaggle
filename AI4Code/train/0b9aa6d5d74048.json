{"cell_type":{"fc8db793":"code","6c9915ca":"code","03fb199a":"code","609bdaa9":"code","e35f2d23":"code","4c7fb380":"code","f0865f5c":"code","ca8e4327":"code","743245b2":"code","87e7097b":"code","01b843d2":"code","86bd0b16":"code","b55de3d8":"code","5491dc8a":"code","d50bda49":"code","7997486c":"code","f11363f7":"code","cafdd6fd":"code","5a61bb5c":"markdown","eb5d0c82":"markdown","c0d50b11":"markdown","fac73c65":"markdown","3721379f":"markdown","465df2a5":"markdown","a054f70f":"markdown","7e662d90":"markdown"},"source":{"fc8db793":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6c9915ca":"fpath = '\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv'\ndata = pd.read_csv(fpath)","03fb199a":"fpath = '\/kaggle\/input\/santa-workshop-tour-2019\/sample_submission.csv'\nsubmission = pd.read_csv(fpath)","609bdaa9":"def get_choice_cost(choice, n):\n    if choice == 0:\n        return 0\n    elif choice == 1:\n        return 50\n    elif choice == 2:\n        return 50+9*n\n    elif choice == 3:\n        return 100+9*n\n    elif choice == 4:\n        return 200+9*n\n    elif choice == 5:\n        return 200+18*n\n    elif choice == 6:\n        return 300+18*n\n    elif choice == 7:\n        return 300+36*n\n    elif choice == 8:\n        return 400+36*n\n    elif choice == 9:\n        return 500+(36+199)*n\n    else:\n        return 500+434*n","e35f2d23":"def get_weights():\n    #dff = CSV.read(\"family_data.csv\")\n    \n\n    # preference cost matrix\n    preference_mat = np.zeros((5000,100))\n   # preference_mat = preference_mat.astype(int)\n    # first fill every column with the maximum cost for that family\n    for ind,row in data.iterrows():\n        preference_mat[ind] = get_choice_cost(10, row['n_people'])\n    for ind,row in data.iterrows():\n        for i in range(10):\n            \n            \n            choice =  row[f'choice_{i}']\n            choice_cost = get_choice_cost(i, row['n_people'])\n            preference_mat[ind,(choice-1)] = choice_cost\n#             for k in range(((choice-1)*50),(choice)*50):\n#                 preference_mat[ind,k] = choice_cost\n    #preference_mat = preference_mat.astype(int)\n    return preference_mat\n                \n                    \n                    \n\n\n","4c7fb380":"weights = get_weights()\nweights.shape","f0865f5c":"weights = weights.reshape(5000,100,1)\nweights = np.tile(weights,(1,1,50))\nweights = weights.reshape(5000,5000)","ca8e4327":"!pip install lap","743245b2":"from lap import lapjv\nleast_cost, col, row = lapjv(weights)","87e7097b":"least_cost","01b843d2":"submission['assigned_day'] = col\/\/50 +1","86bd0b16":"# family_size_dict = data[['n_people']].to_dict()['n_people']\n# cols = [f'choice_{i}' for i in range(10)]\n# choice = np.array(data[cols])\n# choice_dict = data[cols].to_dict()\n# # print(choice_dict)\n\n# N_DAYS = 100\n# MAX_OCCUPANCY = 300\n# MIN_OCCUPANCY = 125\n\n# # from 100 to 1\n# days = list(range(N_DAYS,0,-1))\n\n# family_size_ls = list(family_size_dict.values())\n# choice_dict_num = [{vv:i for i, vv in enumerate(di.values())} for di in choice_dict.values()]\n\n# def cost_function(prediction):\n#     penalty = 0\n\n#     # We'll use this to count the number of people scheduled each day\n#     daily_occupancy = {k: 0 for k in days}\n#     for f, d in enumerate(prediction):\n#         n = family_size_dict[f]\n#         choice_0 = choice_dict['choice_0'][f]\n#         choice_1 = choice_dict['choice_1'][f]\n#         choice_2 = choice_dict['choice_2'][f]\n#         choice_3 = choice_dict['choice_3'][f]\n#         choice_4 = choice_dict['choice_4'][f]\n#         choice_5 = choice_dict['choice_5'][f]\n#         choice_6 = choice_dict['choice_6'][f]\n#         choice_7 = choice_dict['choice_7'][f]\n#         choice_8 = choice_dict['choice_8'][f]\n#         choice_9 = choice_dict['choice_9'][f]\n\n#         # add the family member count to the daily occupancy\n#         daily_occupancy[d] += n\n\n#         # Calculate the penalty for not getting top preference\n#         if d == choice_0:\n#             penalty += 0\n#         elif d == choice_1:\n#             penalty += 50\n#         elif d == choice_2:\n#             penalty += 50 + 9 * n\n#         elif d == choice_3:\n#             penalty += 100 + 9 * n\n#         elif d == choice_4:\n#             penalty += 200 + 9 * n\n#         elif d == choice_5:\n#             penalty += 200 + 18 * n\n#         elif d == choice_6:\n#             penalty += 300 + 18 * n\n#         elif d == choice_7:\n#             penalty += 300 + 36 * n\n#         elif d == choice_8:\n#             penalty += 400 + 36 * n\n#         elif d == choice_9:\n#             penalty += 500 + 36 * n + 199 * n\n#         else:\n#             penalty += 500 + 36 * n + 398 * n\n\n#     # for each date, check total occupancy\n#     #  (using soft constraints instead of hard constraints)\n#     for v in daily_occupancy.values():\n#         if (v > MAX_OCCUPANCY) or (v < MIN_OCCUPANCY):\n#             penalty += 100000000\n#             return penalty\n#     # Calculate the accounting cost\n#     # The first day (day 100) is treated special\n#     accounting_cost = (daily_occupancy[days[0]] - 125.0) \/ 400.0 * daily_occupancy[days[0]] ** (0.5)\n#     # using the max function because the soft constraints might allow occupancy to dip below 125\n#     accounting_cost = max(0, accounting_cost)\n\n#     # Loop over the rest of the days, keeping track of previous count\n#     yesterday_count = daily_occupancy[days[0]]\n#     for day in days[1:]:\n#         today_count = daily_occupancy[day]\n#         diff = abs(today_count - yesterday_count)\n#         accounting_cost += max(0, (daily_occupancy[day] - 125.0) \/ 400.0 * daily_occupancy[day] ** (0.5 + diff \/ 50.0))\n#         yesterday_count = today_count\n\n#     penalty += accounting_cost\n\n#     return penalty\n","b55de3d8":"# awesome kernel -https:\/\/www.kaggle.com\/xhlulu\/santa-s-2019-300x-faster-cost-function-37-s\nimport os\n\nfrom numba import njit\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm_notebook as tqdm\nN_DAYS = 100\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\nfamily_size = data.n_people.values\ndays_array = np.arange(N_DAYS, 0, -1)\nchoice_dict = data.loc[:, 'choice_0': 'choice_9'].T.to_dict()","5491dc8a":"choice_array_num = np.full((data.shape[0], N_DAYS + 1), -1)\n\nfor i, choice in enumerate(data.loc[:, 'choice_0': 'choice_9'].values):\n    for d, day in enumerate(choice):\n        choice_array_num[i, day] = d\n        \npenalties_array = np.array([\n    [\n        0,\n        50,\n        50 + 9 * n,\n        100 + 9 * n,\n        200 + 9 * n,\n        200 + 18 * n,\n        300 + 18 * n,\n        300 + 36 * n,\n        400 + 36 * n,\n        500 + 36 * n + 199 * n,\n        500 + 36 * n + 398 * n\n    ]\n    for n in range(family_size.max() + 1)\n])\n\n@njit\ndef cost_function(prediction, penalties_array, family_size, days):\n    penalty = 0\n\n    # We'll use this to count the number of people scheduled each day\n    daily_occupancy = np.zeros((len(days)+1))\n    N = family_size.shape[0]\n    \n    # Looping over each family; d is the day, n is size of that family, \n    # and choice is their top choices\n    for i in range(N):\n        # add the family member count to the daily occupancy\n        n = family_size[i]\n        d = prediction[i]\n        choice = choice_array_num[i]\n        \n        daily_occupancy[d] += n\n\n        # Calculate the penalty for not getting top preference\n        penalty += penalties_array[n, choice[d]]\n\n    # for each date, check total occupancy\n    #  (using soft constraints instead of hard constraints)\n    relevant_occupancy = daily_occupancy[1:]\n    incorrect_occupancy = np.any(\n        (relevant_occupancy > MAX_OCCUPANCY) | \n        (relevant_occupancy < MIN_OCCUPANCY)\n    )\n    \n    if incorrect_occupancy:\n        penalty += 100000000\n\n    # Calculate the accounting cost\n    # The first day (day 100) is treated special\n    init_occupancy = daily_occupancy[days[0]]\n    accounting_cost = (init_occupancy - 125.0) \/ 400.0 * init_occupancy**(0.5)\n    # using the max function because the soft constraints might allow occupancy to dip below 125\n    accounting_cost = max(0, accounting_cost)\n    \n    # Loop over the rest of the days, keeping track of previous count\n    yesterday_count = init_occupancy\n    for day in days[1:]:\n        today_count = daily_occupancy[day]\n        diff = np.abs(today_count - yesterday_count)\n        accounting_cost += max(0, (today_count - 125.0) \/ 400.0 * today_count**(0.5 + diff \/ 50.0))\n        yesterday_count = today_count\n\n    penalty += accounting_cost\n\n    return penalty","d50bda49":"best = submission['assigned_day'].values\nstart_score = cost_function(best, penalties_array, family_size, days_array)","7997486c":"print(start_score)","f11363f7":"i = 0\nwhile i <=20:\n    new = best.copy()\n    # loop over each family\n    for fam_id in tqdm(range(len(best))):\n        # loop over each family choice\n        for pick in range(10):\n            day = choice_dict[fam_id][f'choice_{pick}']\n            temp = new.copy()\n            temp[fam_id] = day # add in the new pick\n            if cost_function(temp, penalties_array, family_size, days_array) < start_score:\n                new = temp.copy()\n                start_score = cost_function(new, penalties_array, family_size, days_array)\n\n    score = cost_function(new, penalties_array, family_size, days_array)\n    print(f'Score: {score}')\n    submission['assigned_day'] = new\n    i +=1\n#submission.to_csv(f'submission_{score}.csv')","cafdd6fd":"submission.to_csv(\"jonker_improved.csv\",index = False)","5a61bb5c":"We have not taken into account accounting cost.So , submission score will be little high.","eb5d0c82":"Applying algorithm to get least costly arrangement.","c0d50b11":"    credit goes to  @hengck23 to suggest better solution for my earlier kernel - \n    https:\/\/www.kaggle.com\/pulkitmehtawork1985\/hungarian-algorithm-to-be-continued\/edit\/run\/24219202\n    \n    It is based on same idea as above kernel but using different algorithm and using it correctly\n    \n    Please check blog of https:\/\/opensourc.es\/blog\/kaggle-santa-2019 who is author of these ideas.\n    \n    edit 1: used 300x cost function to further optimize the cost\n    \n","fac73c65":"Bringing cost matrix in format required by algorithm (square matrix)\n","3721379f":"Function to get cost for each choice.","465df2a5":"Below code is used to get total cost including accounting cost.","a054f70f":"In below function , we will prepare cost matrix with 5000 rows for all families and 100 columns for cost associated for each day.","7e662d90":"we see that after 14-15 iterations , score does not improve . Time to think something else."}}