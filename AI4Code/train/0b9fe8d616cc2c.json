{"cell_type":{"89ae5ba4":"code","acca5bc3":"code","3d68ea5b":"code","ed3aedda":"code","beb172ba":"code","e70f29b4":"code","5270bd0e":"code","248ea86a":"code","428dea89":"code","35342604":"code","751192ab":"code","f29ffeba":"code","6924642a":"code","bf990a33":"code","f02e3e67":"code","ff6648a3":"code","a3220952":"code","4de2826a":"code","31289403":"code","c3a2b8fd":"code","f20b682a":"code","c24e574b":"code","3e50030c":"code","87859f70":"code","e5f0ca8c":"code","9d9f9406":"code","04062097":"code","d7fe7872":"code","9fa78c2b":"code","eae618c7":"code","8c4a4f55":"code","0e6e3f24":"code","2d4679cb":"code","d7aad114":"code","0c4b1b4c":"code","4d96b408":"code","5ca32b78":"code","464d4e4f":"code","5233eebc":"code","76a09f33":"code","a9e22dff":"code","53d48af9":"code","0009900c":"code","19fabab3":"code","f4d6011e":"code","3da263ac":"code","1e931520":"code","c9d7fd2a":"code","dc86c261":"code","3789c8ec":"code","a21af2dd":"markdown","dc3c5389":"markdown","56d9cda1":"markdown","28f58c00":"markdown","e99026f2":"markdown","5c6c216c":"markdown","10d88663":"markdown","24be0c83":"markdown","6ad04b4d":"markdown","393f2e53":"markdown","d8881878":"markdown","2675e176":"markdown","8e57b14a":"markdown","34c05b6c":"markdown","e4ff5e9c":"markdown","fe0f3d8b":"markdown","ba9548f7":"markdown","5fd68418":"markdown","4fef0276":"markdown","32cf3f95":"markdown","19218016":"markdown","48c8b951":"markdown","e3aba9c7":"markdown","b7e07b15":"markdown","b3381d32":"markdown","4f0ea930":"markdown","cd838665":"markdown","03ed0aa8":"markdown","d425252e":"markdown","b1e3e128":"markdown","38602622":"markdown","0a5aba48":"markdown","e412282c":"markdown","8bd628ca":"markdown"},"source":{"89ae5ba4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nsns.set(style='darkgrid')\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","acca5bc3":"file_path = \"\/kaggle\/input\/data-science-youtube-channel-collection-to-learn\/YouTube_Data_Science_Channels.csv\"","3d68ea5b":"data = pd.read_csv(file_path)","ed3aedda":"data.head(10)","beb172ba":"print(f\"Shape of dataframe is: {data.shape}\")","e70f29b4":"data.describe()   # statistical information of data","5270bd0e":"data.info()","248ea86a":"data.isnull().sum()","428dea89":"data.sort_values(\"Appx_Actual_Subscribers\", ascending=False, inplace=True)","35342604":"data[['YouTube Channel Name',\n      'Appx_Actual_Subscribers',\n      'YouTube_Channel_Link']].head(10)","751192ab":"data.reset_index(inplace = True)","f29ffeba":"data.head()","6924642a":"data.drop(['index', \"ID\"], axis=1, inplace=True)","bf990a33":"data.columns","f02e3e67":"pd.DataFrame(data['Appx_Actual_Subscribers'].describe())","ff6648a3":"plt.figure(figsize = (7,6))\nplt.title(\"Top 20 Best Data Science Youtube Channels\\n\", size = 15);\nsns.barplot(y = \"YouTube Channel Name\", x = \"Appx_Actual_Subscribers\",\n            data = data.head(20), palette=\"dark\");","a3220952":"plt.figure(figsize = (7,6))\n\nplt.title(\"Top 20 Best Data Science Youtube Channels\\n\\n\", size = 15);\n\nsns.barplot(y = \"YouTube Channel Name\", x = \"Appx_Actual_Subscribers\",\n            data = data.head(20), palette=\"bright\")\n\nplt.axvline(data['Appx_Actual_Subscribers'].mean(),\n            linestyle = '--',\n            color = 'k',\n            linewidth = 2)\n\nplt.text(13,-1, \"Average Subscribers\", fontsize = 13);","4de2826a":"def clickable(path):    \n    # returns the final component of a url\n    final_url = os.path.basename(path)\n      \n    # convert the url into link\n    return f'<a href=\"{path}\">{final_url}<\/a>'","31289403":"above_1M = data[data['Above_1m'] == 1]","c3a2b8fd":"plt.figure(figsize=(9,5))\n\nplt.title(\"YT channels whose subscribers is above 1M\\n\", size = 15)\nplots = sns.barplot(x = 'YouTube Channel Name',\n                 y = 'Appx_Actual_Subscribers',\n                 data = above_1M)\n\nfor bar in plots.patches:\n    _ = plots.annotate(format(bar.get_height(), '.2f'), \n                       (bar.get_x() + bar.get_width() \/ 2, \n                        bar.get_height() - (bar.get_height()-3.1) \/ 2),\n                        ha='center',\n                        va='center',\n                        size=15, xytext=(0, 0),\n                        bbox=dict(boxstyle=\"round4, pad=0.6\", fc=\"w\", ec=\"k\", lw=2),\n                        textcoords='offset points')\n\n\nplt.ylabel(\"Subscriber (in Million)\")\nplots.set_xticklabels(plots.get_xticklabels(),rotation = 30);\n","f20b682a":"above_1M[['YouTube Channel Name','YouTube_Channel_Link']].style.format({'YouTube_Channel_Link' : clickable})","c24e574b":"bw_200k_and_1m = data[data['Between_200k_1m'] == 1]","3e50030c":"plt.figure(figsize=(10,6))\n\nplt.title(\"YT channels whose subscribers is b\/w 200k and 1M\\n\", size = 15)\nplots = sns.barplot(y = 'YouTube Channel Name',\n                 x = 'Appx_Actual_Subscribers',\n                 data = bw_200k_and_1m)\n\nfor bar in plots.patches:\n        _ = plots.annotate(format(bar.get_width(), '.0f'), \n               (bar.get_width() \/ 2, \n                bar.get_y() + bar.get_height() \/ 2), ha='center', va='center',\n               size=10, xytext=(0, 0),bbox=dict(fc=\"w\", ec=\"k\", lw=2),\n               textcoords='offset points')\n\nplt.ylabel(\"Channel Name\")\nplt.xlabel(\"\\nSubscribers\");","87859f70":"bw_200k_and_1m[['YouTube Channel Name','YouTube_Channel_Link']].style.format({'YouTube_Channel_Link' : clickable})","e5f0ca8c":"bw_150k_and_200k = data[data['Between_150k_200k'] == 1]","9d9f9406":"bw_150k_and_200k","04062097":"bw_150k_and_200k[['YouTube Channel Name','YouTube_Channel_Link']].style.format({'YouTube_Channel_Link' : clickable})","d7fe7872":"bw_100k_and_150k = data[data['Between_100k_150k'] == 1]","9fa78c2b":"plt.figure(figsize=(10,5))\n\nplt.title(\"YT channels whose subscribers is b\/w 100k and 150k\\n\", size = 15)\nplots = sns.barplot(x = 'YouTube Channel Name',\n                 y = 'Appx_Actual_Subscribers',\n                 data = bw_100k_and_150k)\n\nfor bar in plots.patches:\n    _ = plots.annotate(format(bar.get_height(), '.2f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height() - (bar.get_height()-3.1)\/2), ha='center', va='center',\n                   size=15, xytext=(0, 0),bbox=dict(boxstyle=\"round4,pad=0.6\", fc=\"w\", ec=\"black\", lw=2),\n                   textcoords='offset points')\n\nplt.ylabel(\"Subscribers\")\nplots.set_xticklabels(plots.get_xticklabels(),rotation = 30);","eae618c7":"bw_100k_and_150k[['YouTube Channel Name','YouTube_Channel_Link']].style.format({'YouTube_Channel_Link' : clickable})","8c4a4f55":"bw_50k_and_100k = data[data['Between_50k_100k'] == 1]","0e6e3f24":"plt.figure(figsize=(10,6))\n\nplt.title(\"YT channels whose subscribers is b\/w 50k and 100k\\n\", size = 15)\nplots = sns.barplot(y = 'YouTube Channel Name',\n                 x = 'Appx_Actual_Subscribers',\n                 data = bw_50k_and_100k,\n                palette = 'gnuplot')\n\nfor bar in plots.patches:\n        _ = plots.annotate(format(bar.get_width(), '.0f'), \n               (bar.get_width() \/ 2, \n                bar.get_y() + bar.get_height() \/ 2), ha='center', va='center',\n               size=10, xytext=(0, 0),bbox=dict(fc=\"w\", ec=\"k\", lw=2),\n               textcoords='offset points')\n\nplt.ylabel(\"Channel Name\")\nplt.xlabel(\"\\nSubscribers\");","2d4679cb":"bw_50k_and_100k[['YouTube Channel Name','YouTube_Channel_Link']].style.format({'YouTube_Channel_Link' : clickable})","d7aad114":"bw_25k_and_50k = data[data['Between_25k_50k'] == 1]","0c4b1b4c":"plt.figure(figsize=(10,5))\n\nplt.title(\"YT channels whose subscribers is b\/w 25k and 50k\\n\", size = 15)\nplots = sns.barplot(x = 'YouTube Channel Name',\n                 y = 'Appx_Actual_Subscribers',\n                 data = bw_25k_and_50k)\n\nfor bar in plots.patches:\n    _ = plots.annotate(format(bar.get_height(), '.2f'), \n                   (bar.get_x() + bar.get_width() \/ 2,                    \n                    bar.get_height() - (bar.get_height()-3.1)\/2),\n                    ha='center',\n                    va='center',\n                    size=15,\n                    xytext=(0, 0),\n                    bbox=dict(boxstyle=\"round4,pad=0.6\", fc=\"w\", ec=\"k\", lw=2),\n                    textcoords='offset points')\n\nplt.ylabel(\"Subscribers\")\nplots.set_xticklabels(plots.get_xticklabels(),rotation = 30);","4d96b408":"bw_25k_and_50k[['YouTube Channel Name','YouTube_Channel_Link']].style.format({'YouTube_Channel_Link' : clickable})","5ca32b78":"bw_10k_and_25k = data[data['Between_10k_25k'] == 1]","464d4e4f":"plt.figure(figsize=(10,5))\n\nplt.title(\"YT channels whose subscribers is b\/w 10k and 25k\\n\", size = 15)\nplots = sns.barplot(y = 'YouTube Channel Name',\n                 x = 'Appx_Actual_Subscribers',\n                 data = bw_10k_and_25k)\n\nfor bar in plots.patches:\n        _ = plots.annotate(format(bar.get_width(), '.0f'), \n               (bar.get_width() \/ 2, \n                bar.get_y() + bar.get_height() \/ 2),\n                ha='center',\n                va='center',\n               size=10,\n               xytext=(0, 0),\n               bbox=dict(fc=\"w\", ec=\"k\", lw=2),\n               textcoords='offset points')\n\n\nplt.xlabel(\"Subscribers\")\nplots.set_xticklabels(plots.get_xticklabels(),rotation = 30);","5233eebc":"bw_10k_and_25k[['YouTube Channel Name','YouTube_Channel_Link']].style.format({'YouTube_Channel_Link' : clickable})","76a09f33":"bw_5k_and_10k = data[data['Between_5k_10k'] == 1]","a9e22dff":"plt.figure(figsize=(7,5))\n\nplt.title(\"YT channels whose subscribers is b\/w 5k and 10k\\n\", size = 15)\nplots = sns.barplot(x = 'YouTube Channel Name',\n                 y = 'Appx_Actual_Subscribers',\n                 data = bw_5k_and_10k)\n\nfor bar in plots.patches:\n    _ = plots.annotate(format(bar.get_height(), '.2f'), \n                   (bar.get_x() + bar.get_width() \/ 2,                    \n                    bar.get_height() - (bar.get_height()-3.1)\/2),\n                    ha='center',\n                    va='center',\n                    size=15,\n                    xytext=(0, 0),\n                    bbox=dict(boxstyle=\"round4,pad=0.6\", fc=\"w\", ec=\"k\", lw=2),\n                    textcoords='offset points')\n\n\nplt.ylabel(\"Subscribers\")\nplots.set_xticklabels(plots.get_xticklabels(),rotation = 30);","53d48af9":"bw_5k_and_10k[['YouTube Channel Name','YouTube_Channel_Link']].style.format({'YouTube_Channel_Link' : clickable})","0009900c":"bw_1k_and_5k = data[data['Between_1k_5k'] == 1]","19fabab3":"plt.figure(figsize=(12,5))\n\nplt.title(\"YT channels whose subscribers is b\/w 1k and 5k\\n\", size = 15)\nplots = sns.barplot(x = 'YouTube Channel Name',\n                 y = 'Appx_Actual_Subscribers',\n                 data = bw_1k_and_5k)\n\nfor bar in plots.patches:\n    _ = plots.annotate(format(bar.get_height(), '.0f'), \n                   (bar.get_x() + bar.get_width() \/ 2,                    \n                    bar.get_height() - (bar.get_height()-3.1)\/2),\n                    ha='center',\n                    va='center',\n                    size=15,\n                    xytext=(0, 0),\n                    bbox=dict(boxstyle=\"round4,pad=0.6\", fc=\"w\", ec=\"k\", lw=2),\n                    textcoords='offset points')\n\n\n\n\nplt.ylabel(\"Subscribers\")\nplots.set_xticklabels(plots.get_xticklabels(),rotation = 30);","f4d6011e":"bw_1k_and_5k[['YouTube Channel Name','YouTube_Channel_Link']].style.format({'YouTube_Channel_Link' : clickable})","3da263ac":"below_1k = data[data['Below_1k'] == 1]","1e931520":"below_1k","c9d7fd2a":"below_1k[['YouTube Channel Name','YouTube_Channel_Link']].style.format({'YouTube_Channel_Link' : clickable})","dc86c261":"data[\"log_Appx_Actual_Subscribers\"] = np.log(data['Appx_Actual_Subscribers'])","3789c8ec":"plt.rcParams[\"figure.figsize\"] = [15, 20]\n\n\nplt.title(\"Average subscribers of Data Science Channels on Youtube \\n\", size = 25);\n\nsns.barplot(y = \"YouTube Channel Name\", x = \"log_Appx_Actual_Subscribers\",\n            data = data, palette=\"cool_r\")\n\nplt.axvline(data['log_Appx_Actual_Subscribers'].mean(),\n            linestyle = '--',\n            color = 'k',\n            linewidth = 2);\n","a21af2dd":"### **Importing required libraries**","dc3c5389":"---\n### **YouTube channels which has subscribers between 50k and 100k**","56d9cda1":"**It seems like top 4 channels has great content, Therefore they has very large numbers of subscribers**\n\n**Also top 14 channels has subscribers above average**\n","28f58c00":"If you decided to learn data science by you own, you can learn through many resources which are available on the internet. Many online courses, articles and YouTube channels which provides you datascience training. Videos are one of the great learning tool. There is lot of content related to datascience is available on YouTube. So it is difficult for a beginners to discover quality content. Before start learning data science on YouTube, you must choose best youtube channels because there are a lot of low quality or simply wrong data science tutorials out there. And even if they are free, you\u2019ll still have to pay for them with your time.\n\nSo in this Notebook I am going to share with you some best datascience YouTube channels, which will be helpful for you to start learning datascience easily without struggling in looking for quality content.\n\n\n**Tip:**\n ><i>Remember only watching tutorials is not enough, you have to practice the concept for atleast 2 to 3 hours after watching tutorial.<\/i>\n","e99026f2":"### **Declaring a function that convert links to clickable**","5c6c216c":"### **Checking meta information about dataframe**","10d88663":"---\n### **YouTube channels which has subscribers below 1k**","24be0c83":"---\n### **YouTube channels which has subscribers between 1k and 5k**","6ad04b4d":"#### **Click on above link to visit channel**","393f2e53":"---\n### **YouTube channels which has subscribers between 150k and 200k**","d8881878":"**From this dataset, most of the datascience Youtube channels has subscribers between 200k and 1M, which can also be shown below graph**","2675e176":"---\n### **YouTube channels which has subscribers between 25k and 50k**","8e57b14a":"### **Checking statistical information of `Appx_Actual_Subscribers`**","34c05b6c":"---\n### **YouTube channels which has subscribers between 5k and 10k**","e4ff5e9c":"### **Checking for NaN values**","fe0f3d8b":"#### **Click on above links to visit channel**","ba9548f7":"#### **Click on above links to visit channel**","5fd68418":"### **Reseting index of dataframe**","4fef0276":"### **Top Data Science YouTube channels**","32cf3f95":"#### **Click on links to visit channel**","19218016":"---\n### **YouTube channels which has subscribers between 10k and 25k**\n","48c8b951":"#### **Click on links to visit channel**","e3aba9c7":"<div class=\"alert alert-info\">\n    <h1 align=\"center\"> Best Data Science YouTube Channels<\/h1>\n<\/div>","b7e07b15":"### **Sorting a data from highest Subscribers channel to lowest**","b3381d32":"### **Dropping some unnecessary columns**","4f0ea930":"**No NaN value found**","cd838665":"---\n### **YouTube channels which has subscribers between 100k and 150k**","03ed0aa8":"**Only 4 channels has subscribers above 1M**","d425252e":"##### **Adding column in dataframe by taking log of `Appx_Actual_Subscribers` because some large numbers are present in`Appx_Actual_Subscribers` which squeezes the lowest on.**","b1e3e128":"### **YouTube channels which has subscribers above 1M**","38602622":"**Only 1 YT channel in the list has subscriber below 1k, and now at the time of writting this notebook, this channel has 1.87k subscribers**","0a5aba48":"---\n### **YouTube channels which has subscribers between 200k and 1M**","e412282c":"**Only 1 channel has subscribers between 150k and 200k**","8bd628ca":"#### **Click on above links to visit channel**"}}