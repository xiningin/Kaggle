{"cell_type":{"d56956c5":"code","1844ad73":"code","b0789fef":"code","d179a8af":"code","1fe8c795":"code","95fe09bc":"code","ac30f815":"code","adff7514":"code","2386b5e4":"code","645c1255":"code","d3986eee":"code","9f58a159":"code","dcba96a4":"code","adcdf570":"code","5830a5d0":"code","853a3024":"code","d9746e0e":"code","8a78da63":"code","b149d991":"code","e644d939":"code","9ed3a775":"code","0968c83f":"code","2d45971d":"code","cfaf16a3":"code","55c3ab1c":"code","d5d900b7":"markdown","50bcde96":"markdown","0b881b0b":"markdown","169210d0":"markdown","d6a71845":"markdown","def01c31":"markdown","46d7d252":"markdown","f9fc7d3f":"markdown","e6c32a06":"markdown","3a362879":"markdown","7ec9b090":"markdown","64bf1817":"markdown","d008d6d7":"markdown","d541867c":"markdown","a0058c35":"markdown","bcfd769f":"markdown","b8e20497":"markdown","875826b5":"markdown","4b26c349":"markdown"},"source":{"d56956c5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.linear_model import LinearRegression, Lasso\n%matplotlib inline\nsns.set()","1844ad73":"full_data_labeled = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nfull_data_submission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nfull_data_combined = pd.concat([full_data_labeled.drop(\"SalePrice\", axis=1), full_data_submission], keys=[\"labeled\", \"submission\"], axis=0)\nfeature_cols = full_data_combined.columns[1:]\nfeature_types = pd.Series(index=feature_cols, data=[\"Nominal\",\"Nominal\",\"Continuous\",\"Continuous\",\"Nominal\",\"Nominal\",\"Ordinal\",\"Nominal\",\"Nominal\",\"Nominal\",\"Nominal\",\"Nominal\",\"Nominal\",\"Nominal\",\"Nominal\",\"Nominal\",\"Ordinal\",\"Ordinal\",\"Discrete\",\"Discrete\",\"Nominal\",\"Nominal\",\"Nominal\",\"Nominal\",\"Nominal\",\"Continuous\",\"Ordinal\",\"Ordinal\",\"Nominal\",\"Ordinal\",\"Ordinal\",\"Ordinal\",\"Ordinal\",\"Continuous\",\"Ordinal\",\"Continuous\",\"Continuous\",\"Continuous\",\"Nominal\",\"Ordinal\",\"Binary\",\"Nominal\",\"Continuous\",\"Continuous\",\"Continuous\",\"Continuous\",\"Discrete\",\"Discrete\",\"Discrete\",\"Discrete\",\"Discrete\",\"Discrete\",\"Ordinal\",\"Discrete\",\"Ordinal\",\"Discrete\",\"Ordinal\",\"Nominal\",\"Discrete\",\"Ordinal\",\"Discrete\",\"Continuous\",\"Ordinal\",\"Ordinal\",\"Nominal\",\"Continuous\",\"Continuous\",\"Continuous\",\"Continuous\",\"Continuous\",\"Continuous\",\"Ordinal\",\"Nominal\",\"Nominal\",\"Continuous\",\"Discrete\",\"Discrete\",\"Nominal\",\"Nominal\"])","b0789fef":"correlation_matrix = full_data_labeled.corr()\nfigures, axes = plt.subplots(1,1, figsize=(18,18))\nsns.heatmap(correlation_matrix, vmax=0.8, square=True)","d179a8af":"def plot_feature(feature):\n    if isinstance(feature, int):\n        feature = feature_cols[feature]\n    print(\"Feature: \" + feature)\n    if feature_types[feature] == \"Continuous\":\n        figure, axes = plt.subplots(nrows=1, ncols=2, figsize=(24, 12))\n        sns.distplot(a=full_data_labeled[feature].dropna(), ax=axes[0])\n        sns.regplot(x=feature, y=\"SalePrice\", data=full_data_labeled, ax=axes[1])\n    if feature_types[feature] == \"Discrete\" or feature_types[feature] == \"Nominal\" or feature_types[feature] == \"Binary\" or feature_types[feature] == \"Ordinal\":\n        figure, axes = plt.subplots(nrows=1, ncols=2, figsize=(24, 12))\n        sns.countplot(x=full_data_labeled[feature].dropna(), ax=axes[0])\n        sns.boxplot(x=feature, y=\"SalePrice\", data=full_data_labeled, ax=axes[1])","1fe8c795":"plot_feature(0)","95fe09bc":"most_correlated_features = correlation_matrix.nlargest(9, \"SalePrice\")[\"SalePrice\"].index[1:] # 8 most correlated values with SalePrice\nmost_correlated_features","ac30f815":"plot_feature(\"OverallQual\")","adff7514":"plot_feature(\"GrLivArea\")","2386b5e4":"plot_feature(\"GarageCars\")","645c1255":"plot_feature(\"GarageArea\")","d3986eee":"plot_feature(\"TotalBsmtSF\")","9f58a159":"plot_feature(\"1stFlrSF\")","dcba96a4":"plot_feature(\"FullBath\")","adcdf570":"plot_feature(\"TotRmsAbvGrd\")","5830a5d0":"num_missing_data = full_data_combined.isnull().sum()\nnum_missing_data = num_missing_data[num_missing_data > 0].sort_values(ascending=False)\nwith pd.option_context('display.max_rows', None):\n    print(num_missing_data)","853a3024":"full_data_combined_categorical_filled = full_data_combined.copy()\nNA_cols = [\"Alley\", \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinType2\", \"FireplaceQu\", \"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\", \"PoolQC\", \"Fence\", \"MiscFeature\", \"MasVnrType\", \"MSZoning\", \"Functional\", \"Utilities\", \"Exterior1st\", \"Exterior2nd\", \"SaleType\", \"Electrical\", \"KitchenQual\"]\nfor col in NA_cols:\n    full_data_combined_categorical_filled[col] = full_data_combined_categorical_filled[col].replace(np.nan, \"LA\") # LA for \"lacking\"\n    \nnum_missing_data = full_data_combined_categorical_filled.isnull().sum()\nnum_missing_data = num_missing_data[num_missing_data > 0].sort_values(ascending=False)\nwith pd.option_context('display.max_rows', None):\n    print(num_missing_data)","d9746e0e":"full_data_combined.loc[full_data_combined[\"LotFrontage\"].isnull(), [\"LotArea\", \"LotShape\", \"LotConfig\"]]","8a78da63":"figrues, axes = plt.subplots(1,3,figsize=(36,12))\nsns.regplot(x=\"LotArea\", y=\"LotFrontage\", data=full_data_combined, ax=axes[0])\nsns.boxplot(x=\"LotConfig\", y=\"LotFrontage\", data=full_data_combined, ax=axes[1])\nsns.boxplot(x=\"LotShape\", y=\"LotFrontage\", data=full_data_combined, ax=axes[2])\nsns.relplot(x=\"LotArea\", y=\"LotFrontage\", hue=\"LotConfig\", size=\"LotShape\", data=full_data_combined)","b149d991":"lot_dummies = pd.get_dummies(full_data_combined_categorical_filled[[\"LotFrontage\", \"LotArea\", \"LotShape\", \"LotConfig\"]])\nlot_features = lot_dummies.dropna()\nlot_missing = lot_dummies[:][lot_dummies[\"LotFrontage\"].isnull()]\n\n# manually remove an outlier\noutlier_index = lot_features[lot_features[\"LotArea\"] > 200000].index\nlot_features = lot_features.drop(outlier_index, axis=0)\n\nimputer = LinearRegression()\nimputer.fit(lot_features.drop(\"LotFrontage\", axis=1), lot_features[\"LotFrontage\"])\nlot_missing[\"LotFrontage\"] = imputer.predict(lot_missing.drop(\"LotFrontage\", axis=1))\nfull_data_combined_categorical_lot_filled = full_data_combined_categorical_filled.copy()\nfull_data_combined_categorical_lot_filled[\"LotFrontage\"] = full_data_combined_categorical_filled[\"LotFrontage\"].combine_first(lot_missing[\"LotFrontage\"])","e644d939":"full_data_combined_categorical_lot_filled.loc[full_data_combined_categorical_lot_filled[\"GarageYrBlt\"].isnull(), \"GarageArea\"]","9ed3a775":"full_data_combined_filled = full_data_combined_categorical_lot_filled.fillna(full_data_combined_categorical_lot_filled.mean())\nfull_data_combined_filled.isnull().sum().sum()","0968c83f":"numeric_features_discrete = full_data_combined_filled.drop(\"Id\", axis=1).loc[:, feature_types == \"Discrete\"]\nnumeric_features_continuous = full_data_combined_filled.drop(\"Id\", axis=1).loc[:, feature_types == \"Continuous\"]\nnumeric_features = pd.concat([numeric_features_discrete, numeric_features_continuous], axis=1)\n\nfigures, axes = plt.subplots(9, 4, figsize=(18, 70))\nfor i in range(9):\n    for j in range(4):\n        if i*4+j >= numeric_features.shape[1]:\n            continue\n        sns.distplot(a=numeric_features.iloc[:, i*4+j], ax=axes[i, j])","2d45971d":"scaler = MinMaxScaler()\nnumeric_features_transformed = pd.DataFrame(scaler.fit_transform(numeric_features))\n\nfigures, axes = plt.subplots(9, 4, figsize=(18, 70))\nfor i in range(9):\n    for j in range(4):\n        if i*4+j >= numeric_features_transformed.shape[1]:\n            continue\n        sns.distplot(a=numeric_features_transformed.iloc[:, i*4+j], ax=axes[i, j])\n\nnumeric_features_labeled = numeric_features_transformed.iloc[:1460]\nnumeric_features_submission = numeric_features_transformed.iloc[1460:]","cfaf16a3":"categorical_features_nominal = full_data_combined_filled.drop(\"Id\", axis=1).loc[:, feature_types == \"Nominal\"]\ncategorical_features_ordinal = full_data_combined_filled.drop(\"Id\", axis=1).loc[:, feature_types == \"Ordinal\"]\ncategorical_features_binary = full_data_combined_filled.drop(\"Id\", axis=1).loc[:, feature_types == \"Binary\"]\ncategorical_features = pd.concat([categorical_features_nominal, categorical_features_ordinal, categorical_features_binary], axis=1)\ncategorical_features = pd.get_dummies(categorical_features)\ncategorical_features_labeled = categorical_features.xs(\"labeled\")\ncategorical_features_submission = categorical_features.xs(\"submission\")\ncategorical_features_submission[\"index\"] = range(1460, 2919)\ncategorical_features_submission.set_index(\"index\", inplace=True)","55c3ab1c":"data_labeled = pd.concat([numeric_features_labeled, categorical_features_labeled], axis=1)\ndata_submission = pd.concat([numeric_features_submission, categorical_features_submission], axis=1)\nprint(data_labeled.shape)\nprint(data_submission.shape)","d5d900b7":"Notice that some columns have nearly all missing values. Looking at the data description shows that some of these NA values actually represent the lack of a type of room etc., and don't actually represent a missing value. I decided to treat NA values for these columns as just another category for now.","50bcde96":"# Correlation Heatmap","0b881b0b":"Interesting, I don't see a good reason why it would be missing, so they probably are really missing data. Let's see if the values for LotArea are correlated at all with the other lot variables.","169210d0":"It looks like GarageYrBlt is missing for those without garages (area is 0). This is perfectly reasonable. There might be a better way but for now I'm going to impute them with means.","d6a71845":"# Basic Univarate and Bivariate Analysis","def01c31":"# Get Final DF for Labeled and Submission Data","46d7d252":"Now let's look at GarageYrBlt","f9fc7d3f":"Again highly correlated","e6c32a06":"plot_feature takes numerical iloc values or feature names for easier viewing, so feel free to play around with it and graph different features! Here's an example:","3a362879":"Notice I hand wrote a series for feature type based on how I want to encode and graph the features. For example, a feature might look discrete but is actually nominal or ordinal (examples: MSSubClass, OverallQual, etc.). In such cases they need to be treated accordingly. Here are the five categories I used: discrete (numerical), continuous (numerical), ordinal (categorical), nominal (categorical), binary (categorical). The main difference between discrete and ordinal is that the difference between adjacent values for discrete features are constant while for ordinal they might not be.","7ec9b090":"Note that these correlation values only take into account two columns, so that most correlated ones are not necessarily going to be the most important features. Nevertheless in the following bivariate analysis I will only plot the top 8 most correlated columsn with SalePrice.","64bf1817":"A lot of these highly correlated variables are area-based, which is very reasonable","d008d6d7":"# Process Categorical Features","d541867c":"The previous two are very correlated. The bigger the area, the more cars it can fit.","a0058c35":"# Process Numeric Features","bcfd769f":"Looks like we might be able to use regression imputation for these values!","b8e20497":"# Missing Values","875826b5":"A short EDA + preliminary data processing kernel. I'm a beginner so if there's anything I can do to improve it please comment! Thanks!","4b26c349":"LotFrontage and GarageYrBlt has a lot of missing values. There might be underlying reasons. Let's take a look at these columns."}}