{"cell_type":{"d766ebd1":"code","33bc3a06":"code","f49c294e":"code","e8347471":"code","a43a878a":"code","14dd33e3":"code","f8a70b7d":"code","4c911d66":"code","ad0a1e56":"code","e1903de4":"code","7ee50e62":"code","e8fbf161":"code","dd0be31d":"code","e2ebc6c5":"code","f92e052b":"markdown","198a45c3":"markdown","e3b37b82":"markdown","afac41b9":"markdown","de3ff2bd":"markdown","ef473cb2":"markdown"},"source":{"d766ebd1":"import tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Conv2D,MaxPool2D,Dropout,Flatten,Dense,BatchNormalization\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping","33bc3a06":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","f49c294e":"import cv2\n\nupic='..\/input\/cell-images-for-detecting-malaria\/cell_images\/Uninfected\/C100P61ThinF_IMG_20150918_144104_cell_131.png'\napic='..\/input\/cell-images-for-detecting-malaria\/cell_images\/Parasitized\/C100P61ThinF_IMG_20150918_144104_cell_164.png'\nplt.figure(1, figsize = (15 , 7))\nplt.subplot(1 , 2 , 1)\nplt.imshow(cv2.imread(upic))\nplt.title('Uninfected Cell')\nplt.xticks([]) , plt.yticks([])\n\nplt.subplot(1 , 2 , 2)\nplt.imshow(cv2.imread(apic))\nplt.title('Infected Cell')\nplt.xticks([]) , plt.yticks([])\n\nplt.show()","e8347471":"width = 128\nheight = 128","a43a878a":"datagen = ImageDataGenerator(rescale=1\/255.0, validation_split=0.2)","14dd33e3":"trainDatagen = datagen.flow_from_directory(directory='..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/',\n                                           target_size=(width,height),\n                                           class_mode = 'binary',\n                                           batch_size = 16,\n                                           subset='training')","f8a70b7d":"valDatagen = datagen.flow_from_directory(directory='..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/',\n                                           target_size=(width,height),\n                                           class_mode = 'binary',\n                                           batch_size = 16,\n                                           subset='validation')","4c911d66":"model = Sequential()\nmodel.add(Conv2D(16,(3,3),activation='relu',input_shape=(128,128,3)))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(32,(3,3),activation='relu'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(64,(3,3),activation='relu'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Dropout(0.3))\n\nmodel.add(Flatten())\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(1,activation='sigmoid'))","ad0a1e56":"model.summary()","e1903de4":"model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","7ee50e62":"early_stop = EarlyStopping(monitor='val_loss',patience=2)","e8fbf161":"history = model.fit_generator(generator = trainDatagen,\n                             steps_per_epoch = len(trainDatagen),\n                              epochs =20,\n                              validation_data = valDatagen,\n                              validation_steps=len(valDatagen),\n                             callbacks=[early_stop])","dd0be31d":"def plotLearningCurve(history,epochs):\n  epochRange = range(1,epochs+1)\n  plt.plot(epochRange,history.history['accuracy'])\n  plt.plot(epochRange,history.history['val_accuracy'])\n  plt.title('Model Accuracy')\n  plt.xlabel('Epoch')\n  plt.ylabel('Accuracy')\n  plt.legend(['Train','Validation'],loc='upper left')\n  plt.show()\n\n  plt.plot(epochRange,history.history['loss'])\n  plt.plot(epochRange,history.history['val_loss'])\n  plt.title('Model Loss')\n  plt.xlabel('Epoch')\n  plt.ylabel('Loss')\n  plt.legend(['Train','Validation'],loc='upper left')\n  plt.show()","e2ebc6c5":"plotLearningCurve(history,7)","f92e052b":"# Dividing Dataset into two folders train and test","198a45c3":"# Plots","e3b37b82":"# Preparing the model","afac41b9":"# Importing neccessary libraries","de3ff2bd":"# Preparing train and test Image Generator","ef473cb2":"# Displaying Uninfected and Infected Cell tissues"}}