{"cell_type":{"0b9d0224":"code","d9e04cb1":"code","f19af33a":"code","b3b59dee":"code","9b4c8daa":"code","936927fd":"code","33dba96d":"code","61156031":"code","518267f9":"code","e6a68fab":"code","e99da931":"code","2705cdc7":"code","9f98886b":"code","770b6526":"code","631378d5":"code","3f2c2bf3":"markdown","7790a45a":"markdown","1bd17e7e":"markdown","f9929531":"markdown","a93a66c3":"markdown","23580980":"markdown","aa002134":"markdown","451aa762":"markdown"},"source":{"0b9d0224":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9e04cb1":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential,load_model\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom keras.preprocessing.image import ImageDataGenerator","f19af33a":"trainData = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntestData = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","b3b59dee":"# get shape\n\nprint(trainData.shape) \nprint(testData.shape)","9b4c8daa":"y = trainData['label'] # get target\nx = trainData.drop(['label'],axis = 1) # get input \ny.unique() ","936927fd":"# Perform train-test-split with test_size = 0.2\nx_train,x_validation,y_train,y_validation = train_test_split(x,y,test_size = 0.2,random_state = 42)","33dba96d":"# reshaping and normalizing data\n\nx_train = x_train.values.reshape(-1,28,28,1)\nx_train = x_train \/ 255\nprint(x_train.shape)\n\nx_validation = x_validation.values.reshape(-1,28,28,1)\nx_validation = x_validation \/ 255\nprint(x_validation.shape)","61156031":"model = Sequential()\n\nmodel.add(Conv2D(32,(3,3),activation = 'relu',input_shape = (28,28,1)))\nmodel.add(Conv2D(64,(3,3),activation = 'relu'))\nmodel.add(MaxPooling2D(2,2))\n\nmodel.add(Conv2D(128,(3,3),activation = 'relu'))\nmodel.add(Conv2D(256,(3,3),activation = 'relu'))\nmodel.add(MaxPooling2D(2,2))\n\n\nmodel.add(Flatten())\n\nmodel.add(Dense(512,activation = 'relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(10,activation = 'softmax'))\n\nmodel.summary()","518267f9":"model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics = ['accuracy'])","e6a68fab":"h = model.fit(x_train,y_train,epochs = 20,batch_size = 64,verbose = 1,validation_data=(x_validation,y_validation))\nmodel.save('DigitRecognition.h5') # save model","e99da931":"epochs = range(1,len(h.history['accuracy'])+1)\n\nplt.figure(figsize = (15,6))\nloss = h.history['loss']\nval_loss = h.history['val_loss']\nplt.style.use('ggplot')\nplt.subplot(121)\nplt.plot(epochs,loss,'bo',label='Training Loss')\nplt.plot(epochs,val_loss,'b',label='Validation Loss')\nplt.xlabel('Epoch Number')\nplt.ylabel('Loss Magnitude')\nplt.title('Model Loss')\nplt.legend()\n\nAcc = h.history['accuracy']\nval_Acc= h.history['val_accuracy']\nplt.style.use('ggplot')\nplt.subplot(122)\nplt.plot(epochs,Acc,'bo',label='Training Accuracy')\nplt.plot(epochs,val_Acc,'b',label='Validation Accyracy')\nplt.xlabel('Epoch Number')\nplt.ylabel('Accuracy Magnitude')\nplt.title('Model Accuracy')\nplt.legend()\n","2705cdc7":"x_test = testData.values.reshape(-1,28,28,1) # reshaping\nx_test = x_test \/ 255                        # normalization","9f98886b":"testModel = load_model('DigitRecognition.h5') # load model\ny_pred = testModel.predict_classes(x_test,verbose = 0) # get predicted value","770b6526":"y_pred.shape # check y_pred shape","631378d5":"d = {'ImageId':[i for i in range(1,len(y_pred)+1)],'Label':y_pred}\nresult = pd.DataFrame(d)\nresult.to_csv('DigitRecognition.csv',index = False)","3f2c2bf3":"# **Model Performance Visualization**","7790a45a":"# **Load data**","1bd17e7e":"# **Compile Model**","f9929531":"# **Get CSV file**","a93a66c3":"# **Train Model**","23580980":"# **Build Model**","aa002134":"# **Import all required packages**","451aa762":"# **Test data**"}}