{"cell_type":{"aa650831":"code","65c0f472":"code","6dc2c947":"code","7e5e8dfa":"code","15b49c28":"code","ebb5afeb":"code","f19365e6":"code","db6ece1e":"code","7e637364":"code","efe5ee6f":"code","d99f5991":"code","edb2d39d":"code","73a259b1":"code","8373aab2":"code","fa085fe3":"code","1c121286":"code","0d962943":"code","67280a02":"code","c83da0dd":"code","5624ebc8":"code","beb62b17":"code","b22e9d9e":"code","bcb94a7a":"markdown","56e18e6d":"markdown","04bf9622":"markdown","05b0e8cc":"markdown","c520d546":"markdown","b1c8e777":"markdown","c120c3bd":"markdown","be3b65a6":"markdown","eae790a2":"markdown","4f4c4b12":"markdown","83a5d5a0":"markdown","10809254":"markdown","0be89b7a":"markdown","eba11150":"markdown","dc8892e9":"markdown","ee371dea":"markdown","8914b2fe":"markdown","93c2e970":"markdown","fd1afc22":"markdown","b433165c":"markdown","17c0726c":"markdown","6e4904de":"markdown","caf35354":"markdown","463591f8":"markdown","8f474d15":"markdown","4d071765":"markdown"},"source":{"aa650831":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom scipy import stats\nimport missingno as msno\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65c0f472":"warnings.filterwarnings(\"ignore\")","6dc2c947":"df =  pd.read_csv('..\/input\/seoul-bike-rental-ai-pro-iti\/train.csv', index_col='ID')","7e5e8dfa":"df.shape","15b49c28":"df.head(3)","ebb5afeb":"df.dtypes","f19365e6":"df.columns = [i.split(\"(\")[0].strip().title().replace(\" \",\"_\") for i in [*df.columns]]\ndf.columns","db6ece1e":"df.Date = pd.to_datetime(df.Date, format=\"%d\/%m\/%Y\")","7e637364":"df.insert(1,\"Day\", df.Date.dt.day)\ndf.insert(2, \"Month\", df.Date.dt.month)\ndf.insert(3, \"Year\", df.Date.dt.year)\ndf.insert(4, 'WeekDay',df[\"Date\"].dt.day_name())","efe5ee6f":"categoryVariableList = [\"WeekDay\",\"Seasons\",\"Holiday\",\"Functioning_Day\"]\nfor var in categoryVariableList:\n    df[var] = df[var].astype(\"category\")","d99f5991":"msno.matrix(df,figsize=(12,5),color=(0.3, 0.0, 0.4),fontsize=8)\nplt.show()","edb2d39d":"# set style of plot backgroud.\nplt.style.use('seaborn')\n\n# create subplot contain 6 plots (2 plot for 3 rows)\nfig, ax = plt.subplots(3,2, figsize=(12,12))\n\n# set title for figure\nfig.suptitle('Feature Distribution and Target', fontsize=16, y=0.92)\n\n# draw histogram for feature and  best fit line.\nsns.distplot(df.Temperature, ax=ax[0][0])\nsns.distplot(df.Humidity, ax=ax[0][1])\nsns.distplot(df.Wind_Speed, ax=ax[1][0])\nsns.distplot(df.Visibility, ax=ax[1][1])\nsns.distplot(df.Solar_Radiation, ax=ax[2][0])\nsns.distplot(df.Y, ax=ax[2][1])\nplt.show()","73a259b1":"fig, axes = plt.subplots(nrows=3,ncols=2)\nfig.set_size_inches(16, 20)\n\nfig.suptitle('Feature Boxplot VS Target', fontsize=16, y=0.9)\n# draw boxplot for selected feature with target (Y).\nsns.boxplot(data=df,y=\"Y\",x=\"Month\", orient=\"v\",ax=axes[0][0])\nsns.boxplot(data=df,y=\"Y\",x=\"Year\",orient=\"v\",ax=axes[0][1])\nsns.boxplot(data=df,y=\"Y\",x=\"WeekDay\",orient=\"v\",ax=axes[1][0])\nsns.boxplot(data=df,y=\"Y\",x=\"Hour\",orient=\"v\",ax=axes[1][1])\nsns.boxplot(data=df,y=\"Y\",x=\"Seasons\",orient=\"v\",ax=axes[2][0])\nsns.boxplot(data=df,y=\"Y\",x=\"Functioning_Day\",orient=\"v\",ax=axes[2][1])\nplt.show()","8373aab2":"# list of continuous feature\ncolumns = [\"Temperature\",\"Dew_Point_Temperature\",\"Visibility\",\"Solar_Radiation\",\n           \"Rainfall\",\"Snowfall\",\"Humidity\",\"Wind_Speed\",\"Y\"]\n# calculate correlation matrix.\ncorrMatt = df[columns].corr()\nmask = np.array(corrMatt)\nmask[np.tril_indices_from(mask)] = False\nfig,ax= plt.subplots()\nfig.set_size_inches(10,10)\ng = sns.heatmap(corrMatt, mask=mask,vmax=.8, square=True,annot=True, )\ng.set_title(\"Correlation between Continuous Feature with Target\", fontsize=16, y=1.05)\nplt.show()","fa085fe3":"fig,(ax1,ax2) = plt.subplots(ncols=2)\nfig.set_size_inches(14, 7)\ng1 = sns.regplot(x='Wind_Speed', y=\"Y\", \n                 data=df,ax=ax1,\n                 line_kws={'color': 'red'})\n\ng1.set_title('Wind_Speed VS Y')\ng2 = sns.regplot(x='Humidity', y=\"Y\",\n                 data=df,ax=ax2,\n                 color=\"#2b9999\",\n                 line_kws={'color': 'red'})\n\ng2.set_title('Humidity VS Y')\nplt.show()","1c121286":"g = sns.jointplot(x=\"Temperature\", y=\"Y\", data=df, kind='reg',color=\"#7c2394\",height=8)\nregline = g.ax_joint.get_lines()[0]\nregline.set_color('red')\nregline.set_zorder(5)\ng.fig.suptitle(\"Temperature VS Y Scatter plot with best Fit line\", y=1.05, fontsize=16)\nplt.show()","0d962943":"df_without_Outliers = df[np.abs(df[\"Y\"]-df[\"Y\"].mean())<=(1*df[\"Y\"].std())] ","67280a02":"print (\"Shape Of The Before Ouliers: \",df.shape)\nprint (\"Shape Of The After Ouliers: \",df_without_Outliers.shape)","c83da0dd":"fig,axes = plt.subplots(ncols=2,nrows=2)\nfig.set_size_inches(12, 12)\nfig.suptitle('Target Distribution With and Without Outliers', fontsize=16, y=0.95)\nsns.distplot(df[\"Y\"],ax=axes[0][0])\nstats.probplot(df[\"Y\"], dist='norm', fit=True, plot=axes[0][1])\nsns.distplot(np.log1p(df_without_Outliers[\"Y\"]),ax=axes[1][0])\nstats.probplot(np.log1p(df_without_Outliers[\"Y\"]), dist='norm', fit=True, plot=axes[1][1])\nplt.show()","5624ebc8":"# create subplot contain 3 cell in one column.\nfig,(ax1,ax2,ax3)= plt.subplots(nrows=3)\n\n# set figure size in inches\nfig.set_size_inches(12,20)\n\n# create list of month number.\nsortOrder = [*range(1,13)]\n\n# list of week days.\nhueOrder = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n\n# group data py month get the mean of target every month. \nmonthAggregated = pd.DataFrame(df.groupby(\"Month\")[\"Y\"].mean()).reset_index()\n\n# sort month based on mean of target Y.\nmonthSorted = monthAggregated.sort_values(by=\"Y\",ascending=False)\n\n# plot all month with mean of value Y as bars.\nsns.barplot(data=monthSorted,x=\"Month\",y=\"Y\",ax=ax1,\n            order=sortOrder,\n            color=\"#255db8\")\n\n# set x label, y label and title\nax1.set(xlabel='Month', ylabel='Avearage Y',title=\"Average Y By Month\")\n\n# group data based on Hour and seasons get mean target Y for every Hour on every season.\nhourAggregated = pd.DataFrame(df.groupby([\"Hour\",\"Seasons\"],sort=True)[\"Y\"].mean()).reset_index()\n\n\n# plot mean values for every hour for every season as poin plot.\nsns.pointplot(x=hourAggregated[\"Hour\"],\n              y=hourAggregated[\"Y\"],\n              hue=hourAggregated[\"Seasons\"],\n              data=hourAggregated, \n              join=True,\n              ax=ax2)\n\n# set x label, y label , title and label\nax2.set(xlabel='Hour Of The Day', ylabel='Y',\n        title=\"Average Y By Hour Of The Day Across Season\",\n        label='big')\n\n# set a list of colors\ncmap = [\"#239641\", \"#dbd33d\", \"#c2332f\", \"#2f6ac2\", \"#8318ad\", \"#ad188a\", \"#302e30\"]\n\n# group data by Hour related with WeekDay by mean of Y target for every Hour for every WeekDay\nhourAggregated = pd.DataFrame(df.groupby([\"Hour\",\"WeekDay\"],sort=True)[\"Y\"].mean()).reset_index()\n\nsns.pointplot(x=hourAggregated[\"Hour\"], \n              y=hourAggregated[\"Y\"],\n              hue=hourAggregated[\"WeekDay\"],\n              hue_order=hueOrder, \n              data=hourAggregated,\n              join=True,ax=ax3, \n              palette=cmap)\n\n\nax3.set(xlabel='Hour Of The Day', ylabel='Y',\n        title=\"Average Y By Hour Of The Day Across Weekdays\",\n        label='big')\n# display plot\nplt.show()","beb62b17":"plt.pie(df.Holiday.value_counts(),\n        labels=df.Holiday.unique(),\n        explode=[0.3,0],\n        autopct='%1.2f%%',\n        colors=[\"#ea157a\",\"#0089af\"])\n\nplt.title(\"Holiday values pie chart\", y=1.02, fontsize=14)\nplt.legend()\nplt.show()","b22e9d9e":"plt.figure(figsize=(10,8))\nplt.title('Count Chart for Functioning Day with Holiday')\nplt.xlabel('Functioning Day values')\nplt.ylabel('count (Y)')\n\nax = sns.countplot(x= \"Functioning_Day\",\n              data=df,\n              order=[\"Yes\", \"No\"],\n              hue=\"Holiday\",\n              palette=[\"#298fc2\",\"#c22987\"])\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.15, p.get_height()+50))\n\nplt.show()","bcb94a7a":"**Set datetime type for Date column**","56e18e6d":"**Best Fitting Line Between Feature And Target**","04bf9622":"## Seoul Bike Rental | Data Visualization \ud83d\udeb4\ud83c\udfff\u200d\u2640\ufe0f","05b0e8cc":"**Rename Columns to can call columns by dot**","c520d546":"**Data Feature**\n\n- **Date** : datetime(day\/month\/year).\n- **y** : target feature.\n- **Hour** : hour of datetime.\n- **Temperature(\u00b0C)** : temperature in Celsius.\n- **Humidity(%)** : relative humidity.\n- **Wind speed (m\/s)** : wind speed.\n- **Visibility (10m)** : visibility range.\n- **Dew point temperature(\ufffdC)** : temperature of the air (at constant pressure).\n- **Solar Radiation (MJ\/m2)** : the total solar energy for a day.\n- **Rainfall(mm)** : represents the total depth of rainwater (mm), during 24 hours.\n- **Snowfall (cm)** : the amount of snow that falls in a given area or period of time.\n- **Seasons** : (Winter,Spring, Autumn, Summer).\n- **Holiday** : that day is holiday or not.\n- **Functioning Day** : working day or close.","b1c8e777":"**Import Needed Libraries**","c120c3bd":"**Outliers Detection**","be3b65a6":"# Visualization","eae790a2":"**Feature Distribution**","4f4c4b12":"# Data Summary\n\n- Size of the dataset.\n- Printing few rows of it.\n- What type of feature in our dataset.","83a5d5a0":"**Feature Date Type**","10809254":"***there is no missing values on data, but there is a lot of zeros data, it can be nan?***","0be89b7a":"**This notebook explains how we can go about explore and prepare data for model building.**\n\n*The notebook is structured in the following way:*\n\n- About Dataset.\n- Data Summary.\n- Feature Engineering.\n- Missing Value Analysis.\n- Visualization:\n    - Visualizing Distribution Of Data.\n    - Outlier Detection.\n    - Correlation Analysis.\n    - Visualizing target Vs Feature.\n    - Holiday and Functioning_Day analysis","eba11150":"# Missing Value Analysis","dc8892e9":"**Target Mean Over Month, Hour By Seasons and Hour By WeekDay**","ee371dea":"![](http:\/\/res.heraldm.com\/content\/image\/2018\/07\/25\/20180725000750_0.jpg)","8914b2fe":"**Holiday and Functioning_Day analysis**","93c2e970":"**Read The Dataset**","fd1afc22":"# Feature Engineering","b433165c":"**Split Date column to (Day, Month, Year, WeekDay) columns**","17c0726c":"# About Dataset","6e4904de":"**Sample of head dataset**","caf35354":"**Target Without Outliers Distribution**","463591f8":"**Dataset Shape**\n","8f474d15":"**Correlation Analysis**\n","4d071765":"### Thanks For Read My NoteBook :)"}}