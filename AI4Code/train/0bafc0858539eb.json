{"cell_type":{"5509b17b":"code","18d0b7bd":"code","382f99c5":"code","323808d7":"code","8575c6e8":"code","7f6a086d":"code","1baea2b7":"code","b91142cc":"code","6242ecad":"code","04041540":"code","9a5bea12":"code","9b92417a":"code","740e8cf7":"code","581aa5d1":"code","c8ceb614":"code","f2579a68":"markdown","a188ed71":"markdown","8dde5872":"markdown","58fe1b07":"markdown","0a025a7e":"markdown","3b5c1ccd":"markdown","bb0c38f3":"markdown","915b7a2d":"markdown","3d324dad":"markdown","07a415d0":"markdown","85f0de0d":"markdown","32198601":"markdown","be56b102":"markdown","a1f8da31":"markdown"},"source":{"5509b17b":"get_ipython().run_line_magic('matplotlib', 'inline')  \nimport pandas as pd # for reading\/editing dataframes\nimport numpy as np # for editing numerical variables\nimport matplotlib.pyplot as plt # for showing plots\nimport seaborn as sns # for showing plots(especially correlation)\n\nimport os # for executing system commands\n\nfrom glob import glob # for checking, listing files\n\nglob(\"\/kaggle\/input\/**\",recursive=True)","18d0b7bd":"dirname=\"\/kaggle\/input\/aia-dnn-classification-pokemongo-tpe-9\"\n%cd {dirname}","382f99c5":"# Load files\ndf_train=pd.read_csv(\"train.csv\")\ndf_test=pd.read_csv(\"test.csv\")\n# Merge files\ndf_mix=df_test.merge(df_train,how=\"outer\")\ndf_tmp=df_mix.iloc[:2].drop(columns=[\"class\",'id'])","323808d7":"print(df_train.__len__(),df_test.__len__(),df_mix.__len__())","8575c6e8":"len(df_mix.columns)","7f6a086d":"all_cols=df_tmp.columns.values\nnum_cols=list(df_tmp[all_cols]._get_numeric_data().columns.values)\ndf_tmp[num_cols]","1baea2b7":"num_cols=[col for col in num_cols if col!=\"terrainType\"]","b91142cc":"num_cols","6242ecad":"# Exclude numerical columns from all columns\ntmp_cols=np.setdiff1d(all_cols,num_cols)","04041540":"# Using vectorized funciton for parallel execution to examine if the column is Boolin value\n@np.vectorize\ndef is_bool(x):\n    return x in [True,False]\n\nbinary_cols=tmp_cols[np.logical_and(is_bool(df_tmp[tmp_cols].values[0]),is_bool(df_tmp[tmp_cols].values[1]))]\n\ncat_cols=tmp_cols[np.logical_or(~is_bool(df_tmp[tmp_cols].values[0]),~is_bool(df_tmp[tmp_cols].values[1]))]","9a5bea12":"# check those binary columns\ndf_tmp[binary_cols]","9b92417a":"# Check those categorical columns\ndf_tmp[cat_cols]","740e8cf7":"cooc_cols=np.array([cont for cont in binary_cols if \"cooc\" in cont ])\ndf_tmp[cooc_cols]","581aa5d1":"# Use distribution plot form SNS \n# Show the distribution of \"number of species nearby\" for each record\nsns.distplot(df_mix[cooc_cols].values.sum(1))\nprint(\"max\",df_mix[cooc_cols].values.sum(1).max(),\"min\",df_mix[cooc_cols].values.sum(1).min())","c8ceb614":"# Binary columns other than co-occurence \nbinary_cols=np.setdiff1d(binary_cols,cooc_cols)\ndf_tmp[binary_cols]","f2579a68":"### 3. co-occurrence columes","a188ed71":"max 19 species near by\n\n**maybe we can set a new column for num of species near by**","8dde5872":"### 2. Categorica columns and binary columns","58fe1b07":"Oh, No ~, too many columns","0a025a7e":"No intersection","3b5c1ccd":"There are special feature which represents the co-occurence of pokemons nearby","bb0c38f3":"Maybe no action needed, there's nothing special","915b7a2d":"Check if those files can be found","3d324dad":"## Merging train& test files for one-hot encoding those labels","07a415d0":"But some of them are already binary features\n\n**Separate binaray and categorical featues**","85f0de0d":"Check if there is any intersections between train&test","32198601":"terrainType is not numerical, drop it","be56b102":"# Import and Observe","a1f8da31":"## Categorizing columns\n### 1. Numerical Columns"}}