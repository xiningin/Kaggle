{"cell_type":{"136e1f33":"code","d1bd8ff7":"code","6c1c74c8":"code","52009c7a":"code","95625d61":"code","db98d075":"markdown","488bc6fb":"markdown"},"source":{"136e1f33":"# imports\nimport pandas as pd\nimport plotly.graph_objects as go\n\n# to make notebook work offline\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","d1bd8ff7":"df = pd.read_csv('..\/input\/dummy-merchant-transactions\/merchant_txns_dummy.csv')\ndf.head()","6c1c74c8":"# Helper function to transform regular data to sankey format\n# Returns data and layout as dictionary\ndef genSankey(df,cat_cols=[],value_cols='',title='Sankey Diagram'):\n    # maximum of 6 value cols -> 6 colors\n    colorPalette = ['#4B8BBE','#306998','#FFE873','#FFD43B','#646464']\n    labelList = []\n    colorNumList = []\n    for catCol in cat_cols:\n        labelListTemp =  list(set(df[catCol].values))\n        colorNumList.append(len(labelListTemp))\n        labelList = labelList + labelListTemp\n        \n    # remove duplicates from labelList\n    labelList = list(dict.fromkeys(labelList))\n    \n    # define colors based on number of levels\n    colorList = []\n    for idx, colorNum in enumerate(colorNumList):\n        colorList = colorList + [colorPalette[idx]]*colorNum\n        \n    # transform df into a source-target pair\n    for i in range(len(cat_cols)-1):\n        if i==0:\n            sourceTargetDf = df[[cat_cols[i],cat_cols[i+1],value_cols]]\n            sourceTargetDf.columns = ['source','target','count']\n        else:\n            tempDf = df[[cat_cols[i],cat_cols[i+1],value_cols]]\n            tempDf.columns = ['source','target','count']\n            sourceTargetDf = pd.concat([sourceTargetDf,tempDf])\n        sourceTargetDf = sourceTargetDf.groupby(['source','target']).agg({'count':'sum'}).reset_index()\n        \n    # add index for source-target pair\n    sourceTargetDf['sourceID'] = sourceTargetDf['source'].apply(lambda x: labelList.index(x))\n    sourceTargetDf['targetID'] = sourceTargetDf['target'].apply(lambda x: labelList.index(x))\n    \n    # creating the sankey diagram\n    data = dict(\n        type='sankey',\n        node = dict(\n          pad = 15,\n          thickness = 20,\n          line = dict(\n            color = \"black\",\n            width = 0.5\n          ),\n          label = labelList,\n          color = colorList\n        ),\n        link = dict(\n          source = sourceTargetDf['sourceID'],\n          target = sourceTargetDf['targetID'],\n          value = sourceTargetDf['count']\n        )\n      )\n    \n    layout =  dict(\n        title = title,\n        font = dict(\n          size = 10\n        )\n    )\n       \n    fig = dict(data=[data], layout=layout)\n    return fig","52009c7a":"# Generating regular sankey diagram\nsank = genSankey(df,cat_cols=['Country','Channel','Security'],value_cols='Declines',title='Merchant Transactions')\nfig = go.Figure(sank)\niplot(fig)","95625d61":"# Generating DFs for different filter options\nitaly = genSankey(df[df['Country']=='Italy'],cat_cols=['Country','Channel','Security'],value_cols='Declines',title='Merchant Transactions')\nspain = genSankey(df[df['Country']=='Spain'],cat_cols=['Country','Channel','Security'],value_cols='Declines',title='Merchant Transactions')\nall = genSankey(df,cat_cols=['Country','Channel','Security'],value_cols='Declines',title='Merchant Transactions')\n\n# Constructing menus\nupdatemenus = [{'buttons': [{'method': 'animate',\n                             'label': 'All',\n                             'args': [all]\n                              },\n                            {'method': 'animate',\n                             'label': 'Italy',\n                             'args': [italy]\n                             },\n                            {'method': 'animate',\n                             'label': 'Spain',\n                             'args': [spain]\n                             }\n                            ] } ]\n\n# update layout with buttons, and show the figure\nsank = genSankey(df,cat_cols=['Country','Channel','Security'],value_cols='Declines',title='Merchant Transactions')\nfig = go.Figure(sank)\nfig.update_layout(updatemenus=updatemenus)\niplot(fig)\n\n# Use dropdown below to interact with the plot","db98d075":"## Summary\n\nWe can see here that we created sankey diagram using plotly package, it also has dropdown at the top to filter the data and update the chart accordingly.\n\n**Next Steps:**\n- We should extend this using dash by Plotly to make it production ready and scalable.\n\nThank you!","488bc6fb":"## Interactive Sakey Diagram using Plotly\n\nIn this notebook, we are making a sankey diagram that is interactive. we can use filters for the chart to change data used for plotting.\n\nThe data is dummy merchant transactions done using various parameters.\n\nWe can see in the diagram the flow of transactions via different channels, security, currency and country.\n\nWe can then interact using filters to restric the data and see subset we are interested in."}}