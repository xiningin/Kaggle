{"cell_type":{"602efcc5":"code","98b663b2":"code","49c30952":"code","5229f1e5":"code","1437eaa1":"code","ae2d229b":"code","86c3b15d":"code","e2fa8149":"code","1fcfc8f7":"code","fe4a714b":"code","26ea5043":"code","b357ce17":"code","e87fe961":"code","2efa9fc5":"code","c84e759c":"code","ceba4d83":"code","b5e4b594":"code","ff8acb5a":"code","d7f9a2d1":"code","984c2f71":"code","de323c5a":"code","8f380a31":"code","21fc8b2f":"code","17ea61d4":"code","b968e827":"code","8886edec":"markdown","2f4f2821":"markdown","bd896e4e":"markdown","f17d22d3":"markdown","0a1f973d":"markdown"},"source":{"602efcc5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","98b663b2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport random\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import*\nimport keras\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score","49c30952":"from sklearn.preprocessing import LabelEncoder","5229f1e5":"import re\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.pipeline import Pipeline","1437eaa1":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import accuracy_score","ae2d229b":"df=pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')\ndf","86c3b15d":"df.info()","e2fa8149":"df.shape","1fcfc8f7":"df.isnull().sum()","fe4a714b":"df","26ea5043":"df['Label'] = df['class'].map({'e':0, 'p':1})\ndf","b357ce17":"y_train = df['Label']","e87fe961":"def Label_encode(feat):\n    LabelE = LabelEncoder()\n    LabelE.fit(feat)\n    print(feat.name,LabelE.classes_)\n    return LabelE.transform(feat)","2efa9fc5":"for col in df.columns:\n    df[str(col)] = Label_encode(df[str(col)])","c84e759c":"df","ceba4d83":"x_df=df.drop('class',1)\nx_df= df.drop('Label',1)\nx_train = x_df\nx_train","b5e4b594":"x_train.shape","ff8acb5a":"y_train.shape","d7f9a2d1":"X_train, X_test, y_train, y_test = train_test_split(x_train, y_train, test_size=0.20, random_state = 42)","984c2f71":"rfc = RandomForestClassifier()","de323c5a":"rfc.fit(X_train, y_train)","8f380a31":"def evaluate(model, test_features, test_labels):\n    predictions = model.predict(test_features)\n    errors = abs(predictions - test_labels)\n    mape = 100 * abs(np.mean(errors \/ test_labels))\n    accuracy = metrics.accuracy_score(test_labels, predictions)\n    print('Model Performance')\n    print('Average Error: {:0.4f} degrees.'.format(np.mean(errors)))\n    print('Accuracy = {:0.2f}%.'.format(accuracy))\n\n    print('Exact Accuracy Value: ')\n    \n    return accuracy","21fc8b2f":"evaluate(rfc, X_test, y_test)","17ea61d4":"y_predict = rfc.predict(X_test)","b968e827":"print(\"accuracy: {}%\".format(round(accuracy_score(y_test, y_predict)*100,4)))","8886edec":"No Missing Values","2f4f2821":"**Importing Libraries**","bd896e4e":"We need Numerical data for training the Random Forest Classifier Model. \nTo do the necessary conversion, we can use Label Encoding.\n\n**What is Label Encoding?**\nLabel Encoding refers to converting the labels into numeric form so as to convert it into the machine-readable form. Machine learning algorithms can then decide in a better way on how those labels must be operated. It is an important pre-processing step for the structured dataset in supervised learning.","f17d22d3":"**Function to evaluate the performance of the model -**","0a1f973d":"**Check for the Missing Values in the Dataset**"}}