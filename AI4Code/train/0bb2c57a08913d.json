{"cell_type":{"94878cd3":"code","c4af6d94":"code","bd5b2d1b":"code","1ef500cb":"code","ff745f73":"code","1baf29b5":"code","7834d60f":"code","8ea3983f":"code","84f97766":"code","3f5b0a2e":"code","9fbfccb5":"code","0520b8b4":"code","e15d83df":"code","d4a3b328":"code","22653640":"code","057c624a":"code","a078bc0b":"markdown","d4e89c07":"markdown","dbc1a12a":"markdown","02a8606d":"markdown","c9e449d5":"markdown","0705a4b6":"markdown","b8e768d2":"markdown","2332d978":"markdown"},"source":{"94878cd3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4af6d94":"import numpy as np\nimport pandas as pd\nimport seaborn as sns","bd5b2d1b":"authors = pd.read_csv(\"..\/input\/nips-papers-1987-2019-updated\/authors.csv\")\n\nauthors.head()","1ef500cb":"# A quick look on the data structure and missing values\n\nauthors.info()\n\nauthors.isna().sum()","ff745f73":"# Load the papers dataset\n\npapers = pd.read_csv(\"..\/input\/nips-papers-1987-2019-updated\/papers.csv\")\n\npapers.head()","1baf29b5":"# A quick look on the papers data structure and missing values by columns\n\npapers.info()\n\npapers.isna().sum()","7834d60f":"# perform the missing imputations on both full_text and abstract\n\npapers['full_text'] = np.where(papers['full_text'].isna(), papers['title'], papers['full_text'])\npapers['abstract'] = np.where(papers['abstract'].isna(), papers['title'], papers['abstract'])","8ea3983f":"# Verify the imputations\npapers.isna().sum()","84f97766":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ntfidf = TfidfVectorizer(max_df=0.9, min_df=2, stop_words='english', token_pattern=r'(?u)\\b[A-Za-z]+\\b')\ndtm = tfidf.fit_transform(papers['title'])\n\ndtm","3f5b0a2e":"from sklearn.decomposition import LatentDirichletAllocation\n\nLDA = LatentDirichletAllocation(n_components=7, random_state=101)\n\n# This can take a while, we are dealing with large number of documents here\nLDA.fit(dtm)","9fbfccb5":"# Check the shape of the numpy array - This matches with 10 components which we wanted and columns equal to the sparse matrix\nLDA.components_.shape","0520b8b4":"# Now we will attach the topic numbers to the original articles\n\n# In order to do this, we would need to apply the transform method on our LDA model and DTM to associate the topic to each\n# article\ntopic_results = LDA.transform(dtm)\n\n# Now we will check the shape\ntopic_results.shape","e15d83df":"# If we check the first element, we will get the probabilities of each of the articles belonging to one of the 7 topics\ntopic_results[0]","d4a3b328":"# Associating topic to each of the documents\n\npapers['Topic'] = topic_results.argmax(axis=1)\n\npapers.head(10)","22653640":"for index, topic in enumerate(LDA.components_):\n    print(f\"THE TOP 15 WORDS FOR TOPIC #{index}\")\n    list_keywords = [tfidf.get_feature_names()[index] for index in topic.argsort()[-10:]]\n    print(list_keywords)\n    print(\"\\n\")","057c624a":"\nsns.countplot(x = 'Topic',\n              data = papers,\n              order = papers['Topic'].value_counts().index)\n\npapers['Topic'].value_counts().sort_values(ascending=False)","a078bc0b":"There is a 69% probability, that it should belong to the 5th topic","d4e89c07":"### Library Imports","dbc1a12a":"> #### A basic visualization on number of documents by topics","02a8606d":"we would perform the missing value imputations, by putting in the correspoinding title text for the missing values in both abstract and full_text columns","c9e449d5":"#### Now we will setup a loop which will print out the top 10 words with highest probabilities for all the ten topics","0705a4b6":"### Load the datasets and verify the data load","b8e768d2":"### Preprocessing\n\n#### Task: Use TF-IDF Vectorization to create a vectorized document term matrix. We may want to explore the max_df and min_df parameters.","2332d978":"### Latent Drichilet Allocation"}}