{"cell_type":{"9024b897":"code","95fd197a":"code","cfc1e99b":"code","2a66bc13":"code","2cc7ac00":"code","a5827eb5":"code","6ce65446":"code","a1bd416c":"code","d5e688bb":"code","64aa73b5":"code","1cd5275a":"code","d983e82d":"code","6505c7da":"code","410d0ec1":"code","87a46598":"code","ac6c4d13":"code","b5759be3":"code","fca26b82":"code","e9db35c1":"code","a61e3188":"code","2e1a6694":"code","af18ae04":"code","163d59b8":"code","3c77ee84":"code","a6e3ba48":"code","db60fbe9":"code","fa47aac7":"code","977f4a33":"code","502e97e1":"code","b0ae30da":"code","ac7eb87d":"code","8caaeb93":"code","24a3c2b0":"code","fccca0c4":"code","48d87f67":"code","41cd0447":"markdown","63b2883b":"markdown","33ba19d1":"markdown","97dfa878":"markdown","9b37195f":"markdown","ea89ce12":"markdown","1610aa9d":"markdown","f2228e83":"markdown","76f6f64f":"markdown"},"source":{"9024b897":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.simplefilter(action='ignore', category = FutureWarning)","95fd197a":"titanic = pd.read_csv(\"..\/input\/titanic\/train.csv\") #Classification\nhouse_prices = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\") #Regression\ncreditcard = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\") #classification\nheart = pd.read_csv(\"..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\") #classification\nkc_house = pd.read_csv(\"..\/input\/housesalesprediction\/kc_house_data.csv\") #regression\ncustomers = pd.read_csv(\"..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv\") #clustering\ndiabetes = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\") #classification\nvideogames_sales = pd.read_csv(\"..\/input\/videogamesales\/vgsales.csv\")\nmushroom = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\") #classification\nmobile = pd.read_csv(\"..\/input\/mobile-price-classification\/train.csv\") #classification","cfc1e99b":"def target_classification(df, target):\n    fig, ax = plt.subplots(figsize = (6, 6))\n    \n    labels = df[target].value_counts().index.tolist()\n    palette = [\"#0EB8F1\", \"#F1480F\", \"#971194\", \"#FEE715\", \"#101820\"]\n\n    ax.pie(df[target].value_counts(), labels = labels, autopct = '%1.2f%%', \n           startangle = 180, colors = palette[: len(labels)])\n\n    ax.set_title(target)\n    plt.show()","2a66bc13":"target_classification(titanic, \"Survived\")","2cc7ac00":"target_classification(mobile, \"price_range\")","a5827eb5":"target_classification(creditcard, \"Class\")","6ce65446":"def two_feature_classification(df, target, f1, f2):\n    \n    fig, ax = plt.subplots(figsize=(15, 8))\n    ax.set_facecolor(\"#393838\")\n\n    X = df.drop(target, axis = 1)\n    y = df[target].values\n    \n    labels = df[target].value_counts().index.tolist()\n\n    ax.scatter(X.loc[y == 0, f1], X.loc[y == 0, f2], label = labels[0], alpha = 1, linewidth = 0, c = \"#0EB8F1\")\n    ax.scatter(X.loc[y == 1, f1], X.loc[y == 1, f2], label = labels[1], alpha = 1, linewidth = 0, c = '#F1480F', marker = \"X\")\n\n    ax.set_title(\"Distribution of \" + target + \" w.r.t \" + f1 + \" and \" + f2)\n    ax.set_xlabel(f1); ax.set_ylabel(f2)\n    ax.legend()\n    sns.despine(top = True, right = True, left = True, bottom = True)\n    plt.show()","a1bd416c":"two_feature_classification(creditcard, \"Class\", \"V8\", \"V11\")","d5e688bb":"two_feature_classification(heart, \"output\", \"thalachh\", \"oldpeak\")","64aa73b5":"two_feature_classification(diabetes, \"Outcome\", \"BMI\", \"Glucose\")","1cd5275a":"def feature_distribution(df, col):\n    \n    from scipy import stats\n    \n    skewness = np.round(df[col].skew(), 3)\n    kurtosis = np.round(df[col].kurtosis(), 3)\n\n    fig, axes = plt.subplots(1, 3, figsize = (21, 7))\n    \n    sns.kdeplot(data = df, x = col, fill = True, ax = axes[0], color = \"#603F83\", linewidth = 2)\n    sns.boxplot(data = df, y = col, ax = axes[1], color = \"#603F83\",\n                linewidth = 2, flierprops = dict(marker = \"x\", markersize = 3.5))\n    stats.probplot(df[col], plot = axes[2])\n\n    axes[0].set_title(\"Distribution \\nSkewness: \" + str(skewness) + \"\\nKurtosis: \" + str(kurtosis))\n    axes[1].set_title(\"Boxplot\")\n    axes[2].set_title(\"Probability Plot\")\n    fig.suptitle(\"For Feature:  \" + col)\n    \n    for ax in axes:\n        ax.set_facecolor(\"#C7D3D4FF\")\n        ax.grid(linewidth = 0.1)\n    \n    axes[2].get_lines()[0].set_markerfacecolor('#8157AE')\n    axes[2].get_lines()[0].set_markeredgecolor('#603F83')\n    axes[2].get_lines()[0].set_markeredgewidth(0.1)\n    axes[2].get_lines()[1].set_color('#F1480F')\n    axes[2].get_lines()[1].set_linewidth(3)\n    \n    sns.despine(top = True, right = True, left = True, bottom = True)\n    plt.show()","d983e82d":"feature_distribution(house_prices, \"SalePrice\")","6505c7da":"feature_distribution(videogames_sales, \"Global_Sales\")","410d0ec1":"feature_distribution(kc_house, \"price\")","87a46598":"def count_percentage(df, col, hue):\n\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(22, 6))\n    order = sorted(df[col].unique())\n    palette = [\"#0EB8F1\", \"#F1480F\", \"#971194\", \"#FEE715\", \"#101820\"]\n    \n    sns.countplot(col, data = df, hue = hue, ax = ax1, order = order, palette = palette[: df[hue].nunique()])\n    ax1.set_title(\"Counts For Feature:\\n\" + col)\n\n    df_temp = df.groupby(col)[hue].value_counts(normalize = True).\\\n    rename(\"percentage\").\\\n    reset_index()\n    \n    fig = sns.barplot(x = col, y = \"percentage\", hue = hue, data = df_temp, ax = ax2, \n                      order = order, palette = palette[: df[hue].nunique()])\n    fig.set_ylim(0,1)\n    \n    fontsize = 14 if len(order) <= 10 else 8\n    for p in fig.patches:\n        \n        txt = \"{:.1f}\".format(p.get_height() * 100) + \"%\"\n        txt_x = p.get_x() \n        txt_y = p.get_height()\n        fig.text(txt_x + 0.125, txt_y + 0.02,txt, fontsize = fontsize)\n\n    ax2.set_title(\"Percentages For Feature: \\n\" + col)\n    plt.setp(ax1.get_xticklabels(), rotation=70, horizontalalignment='right')\n    plt.setp(ax2.get_xticklabels(), rotation=70, horizontalalignment='right')\n    \n    for ax in [ax1, ax2]:\n        ax.set_facecolor(\"#C7D3D4FF\")\n        ax.grid(linewidth = 0.1)","ac6c4d13":"count_percentage(titanic, \"Sex\", \"Survived\")","b5759be3":"count_percentage(mobile, \"touch_screen\", \"price_range\")","fca26b82":"count_percentage(mushroom, \"gill-color\", \"class\")","e9db35c1":"def feature_dist_clas(df, col, hue):\n    \n    fig, axes = plt.subplots(1, 4, figsize = (25, 5))\n    order = sorted(df[hue].unique())\n    palette = [\"#0EB8F1\", \"#F1480F\", \"#971194\", \"#FEE715\", \"#101820\"]\n    \n    sns.histplot(x = col, hue = hue, data = df, ax = axes[0], palette = palette[: df[hue].nunique()], edgecolor=\"black\", linewidth=0.5)\n    sns.kdeplot(x = col, hue = hue, data = df, fill = True, ax = axes[1], palette = palette[: df[hue].nunique()], linewidth = 2)\n    sns.boxplot(y = col, hue = hue, data = df, x = [\"\"] * len(df), ax = axes[2], \n                palette = palette[:len(order)], linewidth = 2, flierprops = dict(marker = \"x\", markersize = 3.5))\n    \n    sns.violinplot(y = col, hue = hue, data = df, x = [\"\"] * len(df), ax = axes[3], palette = palette[: df[hue].nunique()])\n    \n    fig.suptitle(\"For Feature:  \" + col)\n    axes[0].set_title(\"Histogram For Feature \" + col)\n    axes[1].set_title(\"KDE Plot For Feature \" + col)   \n    axes[2].set_title(\"Boxplot For Feature \" + col)   \n    axes[3].set_title(\"Violinplot For Feature \" + col)   \n    \n    for ax in axes:\n        ax.set_facecolor(\"#C7D3D4FF\")\n        ax.grid(linewidth = 0.1)","a61e3188":"feature_dist_clas(diabetes, \"BloodPressure\", \"Outcome\")","2e1a6694":"feature_dist_clas(heart, \"chol\", \"output\")","af18ae04":"feature_dist_clas(titanic, \"Fare\", \"Survived\")","163d59b8":"feature_dist_clas(mobile, \"battery_power\", \"price_range\")","3c77ee84":"def bar_box(df, col, target):\n    \n    fig, axes = plt.subplots(1, 2, figsize=(15, 5), sharex = True)\n    \n    order = sorted(df[col].unique())\n    palette = [\"#0EB8F1\", \"#F1480F\", \"#971194\", \"#FEE715\", \"#101820\", \"#008B97\", \"#F1480F\",\n               \"#9D9301\",  \"#4C00FF\", \"#FF007B\", \"#00EAFF\", \"#9736FF\", \"#FFEE00\", \"#8992F3\",\n               \"#282828\", \"#FFEF63\", \"#80004C\", \"#CFF839\"]\n\n    sns.countplot(data = df, x = col, ax = axes[0], order = order, palette = palette[: len(order)])   \n    sns.boxplot(data = df, x = col, ax = axes[1], y = target, order = order, palette = palette[: len(order)],\n                flierprops = dict(marker = \"x\", markersize = 3.5))\n    \n    fig.suptitle(\"For Feature:  \" + col)\n    axes[0].set_title(\"Countplot For \" + col)\n    axes[1].set_title(col + \" --- \" + target)\n    \n    for ax in axes:\n        ax.set_facecolor(\"#C7D3D4FF\")\n        ax.grid(linewidth = 0.1)\n        plt.sca(ax)\n        plt.xticks(rotation = 90)","a6e3ba48":"bar_box(house_prices, \"MSSubClass\", \"SalePrice\")","db60fbe9":"bar_box(kc_house, \"grade\", \"price\")","fa47aac7":"def plot_scatter(df, col, target):\n    \n    corr = df[[col, target]].corr()[col][1]    \n    c = [\"#EB0000\"] if corr >= 0.7 else ([\"#800000\"] if corr >= 0.3 else\\\n                                    ([\"#FF6363\"] if corr >= 0 else\\\n                                    ([\"#000EAA\"] if corr <= -0.7 else\\\n                                    ([\"#3845D3\"] if corr <= -0.3 else [\"#6CAAFA\"]))))    \n\n    fig, ax = plt.subplots(figsize = (10, 6))\n    ax.set_facecolor(\"#C7D3D4FF\")\n    ax.grid(linewidth = 0.1)\n    \n    sns.scatterplot(x = col, y = target, data = df, c = c, ax = ax, edgecolor = \"black\")        \n    ax.set_title(\"Correlation between \" + col + \" and \" + target + \" is: \" + str(corr.round(4)))","977f4a33":"plot_scatter(house_prices, \"EnclosedPorch\", \"SalePrice\")","502e97e1":"plot_scatter(house_prices, \"LotArea\", \"SalePrice\")","b0ae30da":"plot_scatter(kc_house, \"sqft_above\", \"price\")","ac7eb87d":"plot_scatter(kc_house, \"sqft_living\", \"price\")","8caaeb93":"feature_distribution(house_prices, \"GrLivArea\")","24a3c2b0":"feature_distribution(kc_house, \"sqft_above\")","fccca0c4":"def heatmap(df):\n    \n    fig, ax = plt.subplots(figsize = (15, 15))\n    \n    sns.heatmap(df.corr(), cmap = \"coolwarm\", annot = True, fmt = \".2f\", annot_kws = {\"fontsize\": 9},\n                vmin = -1, vmax = 1, square = True, linewidths = 0.01, linecolor = \"black\", cbar = False)\n    \n    sns.despine(top = True, right = True, left = True, bottom = True)","48d87f67":"heatmap(kc_house)","41cd0447":"# 6) Categorical Variable - Numerical Target","63b2883b":"# 4) Categorical Variable - Categorical Target","33ba19d1":"# 2) Plotting Target with Two Features","97dfa878":"In this notebook, I will share some functions that I generally use for EDA step. Data analysis is an iterative process, you need to visualize features on every step. If you more features, you should define some functions for easy use. \n\n\nThis notebook is just a template for me.","9b37195f":"# 1) Target Distribution For Classification","ea89ce12":"# 3) Target Distribution For Regression","1610aa9d":"# 7) Numerical Variable - Numerical Target","f2228e83":"# 8) Heatmap","76f6f64f":"# 5) Numerical Variable - Categorical Target"}}