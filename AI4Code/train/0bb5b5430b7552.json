{"cell_type":{"380661d1":"code","a7aaf065":"code","771ea760":"code","1ca2aa82":"code","8f14d341":"code","c8418100":"code","d72590ee":"code","6f198d5c":"code","54cd261a":"code","2d2733c1":"code","9c7d00d0":"code","8413d756":"code","db860e6c":"code","a018404e":"code","3b48c11c":"code","a2259ec3":"code","91853ecc":"code","13c4ca2c":"code","377a7d61":"code","a9e4ca47":"code","a87a3926":"code","8d7865d2":"code","f5fd4669":"code","55a19d18":"code","1b707ca3":"code","bc2bd969":"code","87e9b634":"code","1cbf81e9":"code","1c23bf9a":"code","69cbfcb7":"code","baed2157":"markdown","c7b5f322":"markdown","a8eef5fe":"markdown","950018bb":"markdown","80f506f1":"markdown","b8c66928":"markdown","b0a98297":"markdown","990b6804":"markdown"},"source":{"380661d1":"import pandas as pd\nimport numpy as np\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pickle","a7aaf065":"# Load module from another directory\nimport shutil\nshutil.copyfile(src=\"..\/input\/redcarpet.py\", dst=\"..\/working\/redcarpet.py\")\nfrom redcarpet import mat_to_sets","771ea760":"item_file = \"..\/input\/talent.pkl\"\nitem_records, COLUMN_LABELS, READABLE_LABELS, ATTRIBUTES = pickle.load(open(item_file, \"rb\"))\nitem_df = pd.DataFrame(item_records)[ATTRIBUTES + COLUMN_LABELS].fillna(value=0)\nITEM_NAMES = item_df[\"name\"].values\nITEM_IDS = item_df[\"id\"].values\nitem_df.head()","1ca2aa82":"s_items = mat_to_sets(item_df[COLUMN_LABELS].values)\nprint(\"Items\", len(s_items))\ncsr_train, csr_test, csr_input, csr_hidden = pickle.load(open(\"..\/input\/train_test_mat.pkl\", \"rb\"))\nm_split = [np.array(csr.todense()) for csr in [csr_train, csr_test, csr_input, csr_hidden]]\nm_train, m_test, m_input, m_hidden = m_split\nprint(\"Matrices\", len(m_train), len(m_test), len(m_input), len(m_hidden))\ns_train, s_test, s_input, s_hidden = pickle.load(open(\"..\/input\/train_test_set.pkl\", \"rb\"))\nprint(\"Sets\", len(s_train), len(s_test), len(s_input), len(s_hidden))","8f14d341":"like_df = pd.DataFrame(m_train, columns=ITEM_NAMES)\nlike_df.head()","c8418100":"from redcarpet import mapk_score, uhr_score","d72590ee":"help(mapk_score)","6f198d5c":"help(uhr_score)","54cd261a":"from redcarpet import jaccard_sim, cosine_sim","2d2733c1":"help(jaccard_sim)","9c7d00d0":"help(cosine_sim)","8413d756":"from redcarpet import collaborative_filter, content_filter, weighted_hybrid","db860e6c":"help(collaborative_filter)","a018404e":"help(content_filter)","3b48c11c":"help(weighted_hybrid)","a2259ec3":"from redcarpet import get_recs","91853ecc":"help(get_recs)","13c4ca2c":"n_pred = 100 # len(s_input)\nk_top = 10\nj_neighbors = 30\ns_input_sample = s_input[0:n_pred]\ns_hidden_sample = s_hidden[0:n_pred]","377a7d61":"print(\"Strategy: Collaborative\")\nprint(\"Similarity: Jaccard\")\ncollab_jac = collaborative_filter(s_train, s_input_sample, sim_fn=jaccard_sim, j=j_neighbors)\nprint(\"MAP = {0:.3f}\".format(mapk_score(s_hidden_sample, get_recs(collab_jac), k=k_top)))\nprint(\"UHR = {0:.3f}\".format(uhr_score(s_hidden_sample, get_recs(collab_jac), k=k_top)))","a9e4ca47":"print(\"Strategy: Collaborative\")\nprint(\"Similarity: Cosine\")\ncollab_cos = collaborative_filter(s_train, s_input_sample, sim_fn=cosine_sim, j=j_neighbors)\nprint(\"MAP = {0:.3f}\".format(mapk_score(s_hidden_sample, get_recs(collab_cos), k=k_top)))\nprint(\"UHR = {0:.3f}\".format(uhr_score(s_hidden_sample, get_recs(collab_cos), k=k_top)))","a87a3926":"print(\"Strategy: Collaborative\")\nprint(\"Similarity: Hybrid (0.8 * Jaccard + 0.2 * Cosine)\")\ncollab_hybrid = weighted_hybrid([\n    (collab_jac, 0.8),\n    (collab_cos, 0.2)\n])\nprint(\"MAP = {0:.3f}\".format(mapk_score(s_hidden_sample, get_recs(collab_hybrid), k=k_top)))\nprint(\"UHR = {0:.3f}\".format(uhr_score(s_hidden_sample, get_recs(collab_hybrid), k=k_top)))","8d7865d2":"print(\"Strategy: Content-Based\")\nprint(\"Similarity: Jaccard\")\ncont_jac = content_filter(s_items, s_input_sample, sim_fn=jaccard_sim)\nprint(\"MAP = {0:.3f}\".format(mapk_score(s_hidden_sample, get_recs(cont_jac), k=k_top)))\nprint(\"UHR = {0:.3f}\".format(uhr_score(s_hidden_sample, get_recs(cont_jac), k=k_top)))","f5fd4669":"print(\"Strategy: Content-Based\")\nprint(\"Similarity: Cosine\")\ncont_cos = content_filter(s_items, s_input_sample, sim_fn=cosine_sim)\nprint(\"MAP = {0:.3f}\".format(mapk_score(s_hidden_sample, get_recs(cont_cos), k=k_top)))\nprint(\"UHR = {0:.3f}\".format(uhr_score(s_hidden_sample, get_recs(cont_cos), k=k_top)))","55a19d18":"print(\"Strategy: Content-Based\")\nprint(\"Similarity: Hybrid (0.8 * Jaccard + 0.2 * Cosine)\")\ncont_hybrid = weighted_hybrid([\n    (cont_jac, 0.8),\n    (cont_cos, 0.2)\n])\nprint(\"MAP = {0:.3f}\".format(mapk_score(s_hidden_sample, get_recs(cont_hybrid), k=k_top)))\nprint(\"UHR = {0:.3f}\".format(uhr_score(s_hidden_sample, get_recs(cont_hybrid), k=k_top)))","1b707ca3":"uid = 3\nall_recs = collab_jac\ns_pred = get_recs(all_recs)\nprint(\"Model: Collaborative Filtering with Jaccard Similarity (j=30)\")\nprint(\"User: {}\".format(uid))\nprint()\nprint(\"Given:       {}\".format(sorted(s_input[uid])))\nprint(\"Recommended: {}\".format(sorted(s_pred[uid])))\nprint(\"Actual:      {}\".format(sorted(s_hidden[uid])))\nset_intersect = set(s_pred[uid]).intersection(set(s_hidden[uid]))\nn_intersect = len(set_intersect)\nn_union = len(set(s_pred[uid]).union(set(s_hidden[uid])))\napk = mapk_score([s_hidden[uid]], [s_pred[uid]], k_top)\njacc = jaccard_sim(set(s_pred[uid]), set(s_hidden[uid]))\nprint()\nprint(\"Recommendation Hits = {}\".format(n_intersect))\nprint(\"Average Precision   = {0:.3f}\".format(apk))\nprint(\"Jaccard Similarity  = {0:.3f}\".format(jacc))\nprint()\nprint(\"Successful Recommendations:\")\nfor item_id in set_intersect:\n    print(\"- {} ({})\".format(ITEM_NAMES[item_id], \"cameo.com\/\" + ITEM_IDS[item_id]))\nprint()\nprint(\"All Recommendation Scores:\")\nfor i, (item_id, score) in enumerate(all_recs[uid]):\n    hit = \"Y\" if item_id in s_hidden[uid] else \" \"\n    print(\"{0}. [{3}] ({2:.3f}) {1}\".format(str(i + 1).zfill(2), ITEM_NAMES[item_id], score, hit))","bc2bd969":"from redcarpet import write_kaggle_recs","87e9b634":"help(write_kaggle_recs)","1cbf81e9":"# Load hold out set\ns_hold_input = pickle.load(open(\"..\/input\/hold_set.pkl\", \"rb\"))\nprint(\"Hold Out Set: N = {}\".format(len(s_hold_input)))\ns_all_input = s_input + s_hold_input\nprint(\"All Input:    N = {}\".format(len(s_all_input)))","1c23bf9a":"print(\"Final Model\")\nprint(\"Strategy: Collaborative\")\nprint(\"Similarity: Jaccard\")\n# Be sure to use the entire s_input\nfinal_scores = collaborative_filter(s_train, s_all_input, sim_fn=jaccard_sim, j=30)\nfinal_recs = get_recs(final_scores)","69cbfcb7":"outfile = \"kaggle_submission_collab_jaccard_j30.csv\"\nn_lines = write_kaggle_recs(final_recs, outfile)\nprint(\"Wrote predictions for {} users to {}.\".format(n_lines, outfile))","baed2157":"## Inspect Individual User","c7b5f322":"## Submit to Kaggle","a8eef5fe":"## Similarity Measures","950018bb":"## Model Selection","80f506f1":"## Recommendation Algorithms","b8c66928":"## Load Data","b0a98297":"# Playing with Recommenders","990b6804":"## Evaluation Metrics"}}