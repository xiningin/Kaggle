{"cell_type":{"c4ac45b8":"code","a7004cd1":"code","65dcf414":"code","514beb8e":"code","27c0b428":"code","d640d21c":"code","3092ed01":"code","f4e9992d":"code","17b40b23":"code","5b82615b":"code","eec3c1b9":"code","3c19974a":"code","023a4978":"code","d7b144dd":"code","dff32970":"code","c2b676b3":"code","23e22ff0":"markdown"},"source":{"c4ac45b8":"import os\nloc = '..\/input\/animal-image-dataset-90-different-animals\/animals\/animals'\n\nfor dir in os.listdir(loc):\n    print(dir)","a7004cd1":"for dir in os.listdir(loc):\n    print(dir)\n    for img in os.listdir((os.path.join(loc,dir))):\n        print(os.path.join(loc,dir,img))","65dcf414":"features = []\nimport cv2\nfrom tqdm import tqdm\n\nfor dir in tqdm(os.listdir(loc)):\n    print(dir)\n    for img in tqdm(os.listdir((os.path.join(loc,dir)))):\n        f = cv2.imread(os.path.join(loc,dir,img))\n        f = cv2.resize(f,(80,80))\n        features.append(f)","514beb8e":"import numpy as np\nX = np.array(features)\nX.shape","27c0b428":"labels = []\ni = 0\nfor dir in tqdm(os.listdir(loc)):\n    print(dir)\n    for img in tqdm(os.listdir((os.path.join(loc,dir)))):\n        labels.append(i)\n    i += 1","d640d21c":"Y = np.array(labels)\nY","3092ed01":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(X,Y,train_size=0.8)","f4e9992d":"ytrainC = utils.to_categorical(ytrain)\nytestC = utils.to_categorical(ytest)","17b40b23":"print(ytrain[90])\nimport matplotlib.pyplot as plt\nplt.imshow(cv2.cvtColor(xtrain[90],cv2.COLOR_BGR2RGB))\nplt.show()","5b82615b":"xtrain.shape","eec3c1b9":"xtrain.shape[1:]","3c19974a":"import tensorflow\nfrom tensorflow import keras\nfrom tensorflow.keras import models\nfrom tensorflow.keras.layers import Dense,Activation,Dropout,Flatten,Conv2D,MaxPooling2D\nfrom tensorflow.keras import utils","023a4978":"model = models.Sequential()\n\nmodel.add(Conv2D(32, (3,3) , padding='same' , input_shape = xtrain.shape[1:]))\nmodel.add(Activation('relu'))\n\nmodel.add(Conv2D(32, (3,3) , padding='same' , input_shape = xtrain.shape[1:]))\nmodel.add(Activation('relu'))\n\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(64, (3,3) , padding='same' , input_shape = xtrain.shape[1:]))\nmodel.add(Activation('relu'))\n\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(128, (3,3) , padding='same' , input_shape = xtrain.shape[1:]))\nmodel.add(Activation('relu'))\n\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(256, (3,3) , padding='same' , input_shape = xtrain.shape[1:]))\nmodel.add(Activation('relu'))\n\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(512, (3,3) , padding='same' , input_shape = xtrain.shape[1:]))\nmodel.add(Activation('relu'))\n\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(1024, (3,3) , padding='same' , input_shape = xtrain.shape[1:]))\nmodel.add(Activation('relu'))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(90 , activation='sigmoid'))","d7b144dd":"model.summary()","dff32970":"model.compile(loss='categorical_crossentropy',\n             optimizer='sgd',\n             metrics=['Accuracy'])","c2b676b3":"model.fit(xtrain,ytrain)","23e22ff0":"**CNN**"}}