{"cell_type":{"9e802101":"code","c717a088":"code","229b54e3":"code","5ed415ba":"code","ab00628b":"code","16f99f85":"code","0de4f36b":"code","e08a476d":"code","3180cbe6":"code","510e338b":"code","03720084":"code","4679992d":"code","32942472":"code","9ebd44d2":"code","80958565":"code","73bd1c6a":"code","ab5f2969":"code","bccd2ab7":"markdown","0526e0f1":"markdown","41e5da3a":"markdown","afc1c3b4":"markdown"},"source":{"9e802101":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c717a088":"# Carga de Bibliotecas\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","229b54e3":"# Carga y Exploraci\u00f3n de Datos\n\nzoo = pd.read_csv(\"..\/input\/zoo-data\/zoo.csv\")\nclassData = pd.read_csv(\"..\/input\/zoo-data\/class.csv\")\n\n# vamos a restarle uno a toda la columna Class Type para normalizar el valor\n\nzoo['class_type'] = zoo['class_type'] - 1 \n\n# Exploramos la data por primera vez\n\nzoo","5ed415ba":"# exploracion de data 2\n\nzoo.describe()","ab00628b":"# exploracion de data 3\n\nzoo.info()","16f99f85":"# Con este comando podemos explorar cuantos hay de cada tipo\n\nzoo['class_type'].value_counts()","0de4f36b":"# Armamos los features para los modelos, notar que el target se utilzar\u00e1 para analisis y gr\u00e1ficos ya que vamos a clusterizar \n# con kmeans y al ser \"no supervisado\" no utiliza y (target)\n\nX = zoo.drop(['animal_name', 'class_type'], axis=1)\ny = zoo['class_type']\nX.head()","e08a476d":"# Declaramos el modelo y ajustamos con k = 7\n\nkmeans = KMeans(n_clusters=7)\nkmeans.fit(X)\n\n# Hacemos predicci\u00f3n y podemos ver los centroides\n\npredictions = kmeans.predict(X)\ncentroids = kmeans.cluster_centers_\n\nprint(centroids)","3180cbe6":"# Graficamos y utilizamos dos (predator y legs) de los features para vizualizar mejor la data predicha\n\nfig = px.scatter(\n    X,\n    x='predator', \n    y='legs',\n    color=predictions\n)\nfig.show()","510e338b":"# Explorando la predicci\u00f3n\n\npredictions","03720084":"# Explorando ClassData\n\nclassData","4679992d":"# Ahora vamos a revisar si las predicciones calzan con los nombres y clases de la predicci\u00f3n\n\nzoo['predictions'] = predictions # Agregamos columna de predicci\u00f3n al dataframe set para visualizar la clusterizaci\u00f3n con respecto a los animales\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\npd.set_option('display.width', None)\n\nzoo.loc[:30, ['animal_name', 'predictions']]","32942472":"# Declaramos y ajustamos PCA\n\npca = PCA(n_components=3) # Se decide utilizar 3 para poder gr\u00e1ficar en 3d los clusters m\u00e1s adelante\npca.fit(X)\nX_pca = pca.transform(X) # aca van los features ya modificados con pca","9ebd44d2":"# Dando formato al dataframe de PCA\n\nzoo_pca = pd.DataFrame(\n    data    = pca.components_,\n    columns = X.columns,\n    index   = ['PC1', 'PC2', 'PC3']\n)\nzoo_pca","80958565":"# Graficando pesos seg\u00fan los pca\n\nfig = px.imshow(zoo_pca)\nfig.show()","73bd1c6a":"fig = make_subplots(rows=1, cols=2, subplot_titles=(\"(Class Type - y)\", \"Predictions\"))\n\nfig.add_trace(\n    go.Scatter(\n        x=X_pca[:, 0],\n        y=X_pca[:, 1],\n        mode='markers',\n        marker=dict(\n            color=y\n        )\n    ),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=X_pca[:, 0],\n        y=X_pca[:, 1],\n        mode='markers',\n        marker=dict(\n            color=predictions\n        )\n    ),\n    row=1, col=2\n)\n\nfig.update_layout(title_text=\"Predictions vrs Class Type\")\nfig.show()\n","ab5f2969":"# Graficando en 3 dimensiones\n\nfig = px.scatter_3d(x=X_pca[:, 0], y=X_pca[:, 1], z=X_pca[:, 2], color=predictions)\nfig.show()","bccd2ab7":"Seg\u00fan lo anterior la clasificaci\u00f3n que hizo Kmeans tiene diferencias y no fue igual al dataframe de class dado.","0526e0f1":"De los graficos anteriores se puede confirmar que aunque la cllusterizaci\u00f3n esta relativamente \"bien\" hecha los numeros de clases no van a hacer forzozamente iguales a la data del dataframe class.","41e5da3a":"# PCA","afc1c3b4":"Se utiliza para reducir la cantidad de columnas y hacer graficos mas significativos y faciles de entender."}}