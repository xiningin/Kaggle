{"cell_type":{"b99a1fb0":"code","e540bd44":"code","b0338468":"code","017d9379":"code","68f355a8":"code","40a6f344":"code","4530419c":"code","fb07680c":"code","6ef31661":"code","f7e5c19e":"code","b195682b":"code","1db82ac9":"code","7c754ca9":"code","2ec95828":"code","39ca4010":"code","fee6050c":"code","4086de6b":"code","4ce14c00":"markdown","880d5ff4":"markdown","a00e8a8f":"markdown","218fadc2":"markdown","2b7c370b":"markdown"},"source":{"b99a1fb0":"#import libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns","e540bd44":"# reduce memory usage function\n# credits : Guillaume Martin (https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\/notebook)\n\ndef reduce_memory_usage(df):\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != 'object':\n            c_min = df[col].min()\n            c_max = df[col].max()\n            \n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    pass\n        else:\n            df[col] = df[col].astype('category')\n    \n    return df;","b0338468":"#read csv\ndf=pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\")\ndf_test=pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\")","017d9379":"reduce_memory_usage(df)\nreduce_memory_usage(df_test);","68f355a8":"#first 5 rows\ndf.head()","40a6f344":"#concise summary\ndf.info()","4530419c":"#descriptive summary\ndf.describe().T.sort_values(by='std',ascending=False)","fb07680c":"#missing values\ndf.isnull().any()","6ef31661":"#target distribution\nsns.countplot(x=\"Cover_Type\",data=df,palette='Blues_r');\n","f7e5c19e":"df[\"Cover_Type\"].value_counts()","b195682b":"# predicators\nX=df.drop(['Id','Cover_Type','Soil_Type7','Soil_Type15'],axis=1)\n\n# target\ny=df['Cover_Type']\n\n# test data\ntest=df_test.drop(['Id','Soil_Type7','Soil_Type15'],axis=1)","1db82ac9":"from sklearn.model_selection import train_test_split\nX_train,X_val,y_train,y_val=train_test_split(X,y,test_size=0.15,random_state=15)\n","7c754ca9":"from xgboost import XGBClassifier\nclf=XGBClassifier(learning_rate=0.3, tree_method='gpu_hist', random_state=6)\nclf.fit(X_train,y_train)","2ec95828":"#validation prediction\ny_pred=clf.predict(X_val)","39ca4010":"from sklearn.metrics import accuracy_score\naccuracy_score(y_val,y_pred)","fee6050c":"#test prediction\npred=clf.predict(test)","4086de6b":"prediction=pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')\nprediction['Cover_Type']=pred\nprediction.to_csv('submission.csv',index=False)\nprediction.head()","4ce14c00":"### Thank You","880d5ff4":"### XGBClassifier","a00e8a8f":"# Tabular Playground Series - Dec 2021","218fadc2":"### Preprocessing","2b7c370b":"### EDA"}}