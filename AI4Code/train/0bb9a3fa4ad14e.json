{"cell_type":{"5eee5761":"code","91df124b":"code","f7a32bb9":"code","cf198501":"code","59d5d471":"code","ea8a2932":"code","c7c23b68":"code","6ae7211e":"code","3e4e2724":"code","ae9f453b":"code","b41f275e":"code","d2294789":"code","cb27aa9d":"code","2e8a8050":"code","cc928ef9":"code","97460051":"code","6d0692bc":"code","b3a63862":"code","14faf0c1":"code","0fda2fcb":"code","98a8b212":"code","49801703":"code","15ff39c2":"code","1e547e1f":"code","d08e6692":"code","c5bf78a0":"code","fad86e5f":"code","0844be21":"code","16a3a813":"code","668f6556":"code","2913b51e":"code","c145ccfc":"code","4efe35ea":"code","e055acc1":"code","576e4722":"code","3d38ff0b":"code","2449c74c":"code","601c4ba3":"code","8f57e0f1":"code","8531f170":"code","b0822ab5":"code","7d16105c":"code","5b31005e":"code","a18b5950":"code","1be2dfe2":"code","fd1bb665":"code","b7cb8fb6":"code","03a80f92":"code","0d592d63":"code","d77e6621":"code","8ed6f2a9":"code","25fca30e":"code","b0782668":"code","fb81e5ac":"code","8c788475":"code","cee7a056":"code","3a244e65":"code","0aa10c28":"code","e2997b8b":"code","617593c3":"code","ea3584af":"code","a1e9bada":"code","c1e51071":"code","3efb9e7b":"code","5c7b6402":"code","b3904743":"code","17c03a06":"code","45a55512":"code","a66e5c66":"code","3d551ae3":"code","fb44f03b":"code","2342ce1d":"code","4093ea64":"markdown","3bdc858a":"markdown","c421cb60":"markdown","55c4f765":"markdown","6fef6e47":"markdown","4b93443e":"markdown","e6e2a3ed":"markdown","3fb826e5":"markdown","c537063c":"markdown"},"source":{"5eee5761":"import pandas as pd\n#data = pd.read_csv('heart.csv')\ndata = pd.read_excel('..\/input\/heart-xlsx-file\/heart.xlsx')\n","91df124b":"data","f7a32bb9":"data.head(3)","cf198501":"data.tail(3)\n","59d5d471":"data.columns","ea8a2932":"data.dtypes","c7c23b68":"data.axes","6ae7211e":"data.ndim","3e4e2724":"data.shape","ae9f453b":"data.size","b41f275e":"data.info()","d2294789":"data.cp.value_counts()","cb27aa9d":"data['cp'].value_counts()","2e8a8050":"data.values[1:5]","cc928ef9":"data[ (data.cp==0) & (data.chol<200) ]","97460051":"data['age']","6d0692bc":"data.age","b3a63862":"data [ ['age', 'cp','sex' ] ]","14faf0c1":"data[19:25] # 25 execluded ","0fda2fcb":"data.loc[1]  # negative index not working ","98a8b212":"data.loc[1:2] #3 end range is inclusive ","49801703":"data.loc[:,'age']","15ff39c2":"data.loc[19:25,  'age']","1e547e1f":"data.loc[2:4, 'age']","d08e6692":"data.loc[2:4, ['age', 'sex','chol' ] ]","c5bf78a0":"data.iloc[-2] # specific row and can use negative idex","fad86e5f":"data.iloc[2, 3] # can get specifc cell ","0844be21":"#one columns for all rows \ndata.iloc[:,0] ","16a3a813":"data.iloc[2:5, 1:4] # end range exclusive same as using data[2:5]","668f6556":"data.head()","2913b51e":"# rows 3-7 and column 5 to end\ndata.iloc[3:8,5:]","c145ccfc":"#data.iloc[start:end:step]","4efe35ea":"# rows 5,7,9 and columns 2,4\ndata.iloc[5:10:2,2:5:2]","e055acc1":"# rows 5,8,9 and columns 2,4,8\ndata.iloc[ [5,8,9]  , [2,4,8]  ]","576e4722":"data.sort_values(by='age',   ascending=False)","3d38ff0b":"# arrange using two columns\ndata.sort_values(by=['age','chol'],ascending=False)","2449c74c":"# arrange using two columns\ndata.sort_values(by=['age','chol'],ascending=[True, False])","601c4ba3":"#apply sort & filter by sex\ndata[data.sex==1].sort_values(by=['age'] )","8f57e0f1":"data.sort_values(by=['sex','age'], ascending=[False, True] )","8531f170":"data['target'].value_counts()","b0822ab5":"sorted_data = data[data.sex==1].sort_values(by=['sex','age'] )\nsorted_data","7d16105c":"data_with_missing = pd.read_excel('..\/input\/heart-missing\/heart_missing.xlsx')\ndata_with_missing.head()","5b31005e":"data_with_missing.info()","a18b5950":"data_with_missing.chol.isnull()","1be2dfe2":"data_with_missing.isnull()","fd1bb665":"data_with_missing.age.sum()","b7cb8fb6":"data_with_missing.sum()","03a80f92":"##count Nulls in each columns  \ndata_with_missing.isnull().sum()","0d592d63":"#detect columns with Null \ndata_with_missing.isnull().sum()>0","d77e6621":"# solution 1 for missing: Fill by 0","8ed6f2a9":"data_with_missing.head()","25fca30e":"data_with_missing.fillna(0)","b0782668":"data_with_missing.head()","fb81e5ac":"#2- remove rows or colulns with Null \n# remove rows in case number of rows with Null is small\ndata_with_missing.dropna() # remove all rows contains Null\n# data_with_missing.dropna() default of axis=0 - rows","8c788475":"data_with_missing","cee7a056":"# remove columns in case number of Nulls in column is large e.g. 80% of columns is null\ndata_with_missing.dropna(axis=1) # axis=1 mean column","3a244e65":"data_with_missing.head()","0aa10c28":"#solution 3: in case null in rows or columns about 30% \n#filling : by 0, or pecific value \ndata_with_missing.chol.fillna(150)","e2997b8b":"#fill by mean value\npatient_mean= data_with_missing.chol.mean()\n\ndata_filled = data_with_missing.copy()\n\ndata_filled.chol.fillna(patient_mean, inplace=True) # change in same place of memory of data_filled \ndata_filled","617593c3":"data_filled","ea3584af":"# generate new feature from existing features\ndata_filled['risk'] = data_filled['chol']\/data_filled['trestbps']\ndata_filled","a1e9bada":"data.groupby('sex').mean()","c1e51071":"data.groupby('sex').max()","3efb9e7b":"data.groupby('cp').mean()","5c7b6402":"data.groupby(['sex', 'cp']).mean()","b3904743":"#grouping using more than one folumns\ndata.groupby(['sex', 'target']).mean()","17c03a06":"#grouping using more than one folumns\ndata.groupby(['sex','cp' ,'target']).mean()","45a55512":"data.groupby(['sex','cp' ,'target']).mean()['chol']","a66e5c66":"data.groupby(['sex','cp' ,'target']).mean().to_csv('group_data.csv')","3d551ae3":"import bs4 as bs\nimport urllib.request as req\nurl = req.urlopen('https:\/\/pythonprogramming.net\/parsememcparseface\/')\nsource = url.read()\nsoup = bs.BeautifulSoup(source,'lxml')\n\n# title of the page\nprint(soup.title)\n\n# get attributes:\nprint(soup.title.text)\n","fb44f03b":"# get attributes:\nfor paragraph in soup.find_all('p'):\n    print(paragraph.string)\n    print(str(paragraph.text))\n","2342ce1d":"\n# get attributes:\nfor paragraph in soup.find_all('tr'):\n    #print(paragraph.string)\n    row = str(paragraph.text)\n    print(row.split('\\n'))\n    #print(str(paragraph.text))\n    \n#data = pd.DataFrame(columns= )","4093ea64":"# iloc","3bdc858a":"### extract rows & columns ","c421cb60":"# Data Frames: Sorting","55c4f765":"# Read from HTML page (URL)","6fef6e47":"## Loc usges ","4b93443e":"#### specfic row ","e6e2a3ed":"# Handling Missing Values","3fb826e5":"# Feature extraction","c537063c":"## Filtering "}}