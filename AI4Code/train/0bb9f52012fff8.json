{"cell_type":{"00b947de":"code","10739655":"code","c0a72933":"code","d6607a87":"code","3b645a71":"code","e4ab0ec1":"code","43c105ff":"code","123500f2":"code","c3a92b47":"code","111ae3f5":"code","e4cbf4d0":"code","7c2a4e91":"code","32ec7697":"code","7f790571":"code","174dedbe":"code","19748018":"code","951979e3":"code","d34b8d4a":"code","5f02c7c4":"code","4341e861":"code","ef1f4c83":"code","8de3bf3f":"code","46721a32":"markdown","25ccbf54":"markdown","7965f169":"markdown","8fd95375":"markdown","e5a46e2f":"markdown"},"source":{"00b947de":"import networkx as nx\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","10739655":"def compute_properties(graph):\n    print(nx.info(graph))\n    print('Density: ', nx.density(graph))\n    \n    if(graph.is_directed()):\n        components = sorted(nx.weakly_connected_components(graph), key=len, reverse=True)\n        giant_component = graph.subgraph(components[0])\n    else:\n        components = sorted(nx.connected_components(graph), key=len, reverse=True)\n        giant_component = graph.subgraph(components[0])\n    print('Number of (weakly) components:', len(components))\n    print('Diameter of the largest (undirected) component:', nx.diameter(nx.Graph(giant_component)))\n    \n    clustering_coefficients = pd.Series(nx.clustering(graph).values()).sort_values()\n    print('Lowest clustering coefficient:', clustering_coefficients.iloc[0])\n    print('Lowest clustering coefficient (non-zero):', \n              clustering_coefficients[clustering_coefficients.ne(0.0)].iloc[0])\n    print('Highest clustering coefficient:', clustering_coefficients.iloc[-1])\n    print('Mean clustering coefficient:', clustering_coefficients.mean())","c0a72933":"favor = nx.Graph(nx.read_pajek('..\/input\/toy-network-datasets\/26KeroNetwork.net'))","d6607a87":"compute_properties(favor)","3b645a71":"ring = nx.Graph(nx.read_pajek('..\/input\/toy-network-datasets\/Ring25.net'))","e4ab0ec1":"compute_properties(ring)","43c105ff":"ring.add_edges_from([('1','13'), ('3','15'), ('5','17'), ('7','19'), ('9','21'), ('11','23'), ('13','25')])\nring.remove_edges_from([('3','1'), ('5','3'), ('7','6'), ('10','9'), ('13','12'), ('19','17'), ('24','22')])","123500f2":"compute_properties(ring)","c3a92b47":"imports = nx.DiGraph(nx.read_pajek('..\/input\/toy-network-datasets\/imports_manufactures.net'))","111ae3f5":"compute_properties(imports)","e4cbf4d0":"sorted(list(nx.closeness_centrality(imports.reverse()).items()), key=lambda x: x[1], reverse=True)","7c2a4e91":"sorted(list(nx.betweenness_centrality(imports).items()), key=lambda x: x[1], reverse=True)","32ec7697":"NUMBER_NODES = 400\nSAMPLE_SIZE = 10\nfor avg_degree in [1, 5, 10, 20]:\n    number_components = []\n    print('Average Degree:', avg_degree)\n    print('p =', avg_degree\/NUMBER_NODES)\n    for idx in range(SAMPLE_SIZE):\n        graph = nx.gnp_random_graph(NUMBER_NODES, avg_degree\/NUMBER_NODES)\n        number_components.append(nx.number_connected_components(graph))\n    print('Number of components:', number_components)","7f790571":"np.log(400)\/400","174dedbe":"coauthorship = nx.Graph(nx.read_pajek('..\/input\/toy-network-datasets\/NetScience.net'))","19748018":"compute_properties(coauthorship)","951979e3":"components = sorted(nx.connected_components(coauthorship), key=len, reverse=True)\nprint('Ration between largest and second largest components:', len(components[0])\/len(components[1]))","d34b8d4a":"sns.distplot(list(map(len, components)), kde=False)\nplt.title('Distribution of connected components\\' size', fontsize=16)\nplt.show()","5f02c7c4":"yeast = nx.Graph(nx.read_pajek('..\/input\/toy-network-datasets\/YeastS.net'))","4341e861":"compute_properties(yeast)","ef1f4c83":"components = sorted(nx.connected_components(yeast), key=len, reverse=True)\nprint('Ration between largest and second largest components:', len(components[0])\/len(components[1]))","8de3bf3f":"sns.distplot(list(map(len, components)), kde=False)\nplt.title('Distribution of connected components\\' size', fontsize=16)\nplt.show()","46721a32":"# Exercises from Social and Economic Networks Course","25ccbf54":"# Week 4","7965f169":"# Week 1","8fd95375":"# Week 3","e5a46e2f":"# Week 2"}}