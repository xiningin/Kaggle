{"cell_type":{"08f2b8f5":"code","7c918cc6":"code","a8d8ddea":"code","255a7bc0":"code","4da48249":"markdown","4f69f9d1":"markdown","e7e78fdd":"markdown","76aa238c":"markdown"},"source":{"08f2b8f5":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n \n# Importing the dataset\ndataset = pd.read_csv('..\/input\/churn-modellingcsv\/Churn_Modelling.csv')\nX = dataset.iloc[:, 3:13]\ny = dataset.iloc[:, 13]\n\nprint(X.columns)\nprint(X)\nprint(y)\n \n#Create dummy variables\ngeography=pd.get_dummies(X[\"Geography\"],drop_first=True)\ngender=pd.get_dummies(X['Gender'],drop_first=True)\n\nprint(geography)\nprint(gender)\n \n## Concatenate the Data Frames\nX=pd.concat([X,geography,gender],axis=1)\n\n## Drop Unnecessary columns\nX=X.drop(['Geography','Gender'],axis=1)\n \n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n \n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\nprint(X_train)\nprint(X_test)","7c918cc6":"# Part 2 - Now let's make the ANN!\n \n# Importing the Keras libraries and packages\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LeakyReLU,PReLU,ELU\nfrom keras.layers import Dropout\n \n \n# Initialising the ANN\nclassifier = Sequential()\n \n# Adding the input layer and the first hidden layer\nclassifier.add(Dense(activation=LeakyReLU(alpha=0.1), input_dim=11, units=6, kernel_initializer=\"he_uniform\"))\n \n# Adding the second hidden layer\nclassifier.add(Dense(6, kernel_initializer='he_uniform',activation=LeakyReLU(alpha=0.1)))\n\n# Adding the output layer\nclassifier.add(Dense(activation=\"sigmoid\", units=1, kernel_initializer=\"glorot_uniform\"))\n \n# Compiling the ANN\nclassifier.compile(optimizer = 'Adamax', loss = 'binary_crossentropy', metrics = ['accuracy'])\n \n# Fitting the ANN to the Training set\nmodel_history=classifier.fit(X_train, y_train,validation_split=0.33, batch_size = 10, epochs = 100)","a8d8ddea":"# list all data in history\n \nprint(model_history.history.keys())\n# summarize history for accuracy\nprint(model_history.history['accuracy'])\nprint(model_history.history['val_accuracy'])\n \n# summarize history for loss\nprint(model_history.history['loss'])\nprint(model_history.history['val_loss'])","255a7bc0":"# Part 4 - Making the predictions and evaluating the model\n \n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\ny_pred = (y_pred > 0.5)\n \n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n \n# Calculate the Accuracy\nfrom sklearn.metrics import accuracy_score\nscore=accuracy_score(y_pred,y_test)\n \nprint(cm)\nprint(score)\nprint(classifier.summary())","4da48249":"First Part: Importing and manipulating the dataset","4f69f9d1":"Second Part: Making the ANN","e7e78fdd":"Fourth Part: Predicting on Test Data","76aa238c":"Third Part: Listing data"}}