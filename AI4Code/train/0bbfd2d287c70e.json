{"cell_type":{"abd986a1":"code","b5b5abea":"code","3d97c44e":"code","952830cb":"code","d450925d":"code","802f74f9":"code","acd8da52":"code","39b51fa6":"code","f1239e5d":"markdown","4230f326":"markdown","86c8ca15":"markdown","64b2c533":"markdown","e6134a94":"markdown","c760c93d":"markdown","df93ff76":"markdown","41b96364":"markdown","e5302266":"markdown"},"source":{"abd986a1":"import tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.layers import GaussianNoise, Flatten, Dense, Reshape\nfrom tensorflow.keras.models import Sequential\n\nimport numpy as np\nimport matplotlib.pyplot as plt","b5b5abea":"(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# SCALING \/255 pixel\nX_train = X_train\/255\nX_test = X_test\/255\n\n# Show 1 img\nplt.imshow(X_train[0])","3d97c44e":"sample = GaussianNoise(0.2)\nnoisey = sample(X_test[0:1],training=True)\nplt.imshow(noisey[0])","952830cb":"# To create a particular random  \ntf.random.set_seed(101)\nnp.random.seed(101)\n\n\nencoder = Sequential()\nencoder.add(Flatten(input_shape=[28,28]))\n# Add noise to images before going through autoencoder\n# So double noise when predict on test data\nencoder.add(GaussianNoise(0.2))\nencoder.add(Dense(400,activation=\"relu\"))\nencoder.add(Dense(200,activation=\"relu\"))\nencoder.add(Dense(100,activation=\"relu\"))\nencoder.add(Dense(50,activation=\"relu\"))\nencoder.add(Dense(25,activation=\"relu\"))","d450925d":"decoder = Sequential()\ndecoder.add(Dense(50,input_shape=[25],activation='relu'))\ndecoder.add(Dense(100,activation='relu'))\ndecoder.add(Dense(200,activation='relu'))\ndecoder.add(Dense(400,activation='relu'))\ndecoder.add(Dense(28 * 28, activation=\"sigmoid\"))\ndecoder.add(Reshape([28, 28]))","802f74f9":"noise_remover = Sequential([encoder, decoder])\nnoise_remover.compile(loss=\"binary_crossentropy\", optimizer='adam',metrics=['accuracy'])\nnoise_remover.fit(X_train, X_train, epochs=8, validation_data=(X_test, X_test))","acd8da52":"# Add noises on images from X_test\nnoisey_images = sample(X_test, training=True)\n# Apply Autoencoder\ndenoised = noise_remover(noisey_images)","39b51fa6":"plt.figure(figsize=(10, 10))\npos = 1\n\nfor n in range(4):\n    plt.subplot(4, 3 ,pos)\n    plt.imshow(X_test[n])\n    plt.axis('off')\n    plt.title('The Original')\n    pos += 1\n\n    plt.subplot(4, 3, pos)\n    plt.imshow(noisey_images[n])\n    plt.axis('off')\n    plt.title('The Noisey Version')\n    pos += 1\n\n    plt.subplot(4, 3, pos)\n    plt.imshow(denoised[n])\n    plt.axis('off')\n    plt.title('After going through denoiser')\n    pos += 1\n \nplt.show()","f1239e5d":"## LOAD DATA","4230f326":"# DATA","86c8ca15":"# IMPORT","64b2c533":"## ADD SOME NOISE","e6134a94":"# MODEL","c760c93d":"## DECODER","df93ff76":"## ENCODER","41b96364":"## TEST THE MODEL","e5302266":"## COMBINE BOTH MODELS"}}