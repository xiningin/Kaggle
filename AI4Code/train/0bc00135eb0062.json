{"cell_type":{"1672b4ce":"code","799d80b7":"code","04b6954a":"code","c17da928":"code","2af4f2ca":"code","80b87064":"code","61a0b6cd":"code","5ad8dc65":"code","27d82a6a":"code","7a75221c":"code","745b587e":"code","3b142fc3":"code","1b4417c8":"code","a8c24ce6":"code","0acd4ae8":"code","bc26f567":"code","da576ec9":"code","f9176c70":"code","c7284cdc":"code","ea2bf951":"code","5865af91":"code","51ff977b":"code","9d917c25":"code","b19bdb00":"code","7df20d27":"code","8f19e5f0":"code","67aa21cb":"code","774ad082":"code","b88820e1":"code","7a58f5f0":"code","097810b0":"code","d9b10de0":"code","7388e629":"code","38d3a085":"code","54a1a506":"code","99b82ea8":"code","bb4bab93":"code","d9d1bf82":"code","30f4048d":"code","3db8320e":"code","de3770fd":"code","34c0c355":"code","1a0bc5b4":"code","9e6c6ce3":"code","9ed101a7":"code","acef6b40":"code","fc5517e4":"code","769c8d5b":"code","4275fa04":"code","f6a3791b":"code","bcdc8365":"code","d68111fc":"code","211a61e0":"markdown","e5bf032c":"markdown","ce5588a7":"markdown","e309a1d5":"markdown","c5b4a2c2":"markdown","f1108f89":"markdown","8068b9d0":"markdown","16f2a54f":"markdown","be2bb442":"markdown","5cd978c0":"markdown","24155677":"markdown","2f4bdeab":"markdown","c5a9b8b4":"markdown","ff55e1c3":"markdown"},"source":{"1672b4ce":"# \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","799d80b7":"import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('..\/input\/customer-analytics\/Train.csv', engine='python')\ndf.head()","04b6954a":"# check missing values","c17da928":"df.isnull().sum()","2af4f2ca":"# target variable: Reached.on.time","80b87064":"y_train = df['Reached.on.Time_Y.N']\nX_train = df.drop(['Reached.on.Time_Y.N'], axis=1)","61a0b6cd":"print(type(y_train))\nprint(y_train.value_counts())\n\n# y \ud615\ubcc0\ud658\ny_train = y_train.map(lambda x: int(x))","5ad8dc65":"X_train.info()","27d82a6a":"# Categorical Features: Warehouse_block, Mode_of_Shipment, Product_importance, Gender\n# \ubc94\uc8fc\ud615 \ubcc0\uc218\uc5d0 \uc5b4\ub5a4 \uac12\ub4e4\uc774 \uc788\ub294\uc9c0 \ud655\uc778","7a75221c":"cat_features = ['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender']\nfor cat in cat_features:\n    print(cat, ':', set(X_train[cat]))","745b587e":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 \uc22b\uc790\ub85c mapping","3b142fc3":"def wb_map(x):\n    if x == 'A' : return 1\n    elif x == 'B' : return 2\n    elif x == 'C' : return 3\n    elif x == 'D' : return 4\n    else: return 5\n\ndef sp_map(x):\n    if x == 'Ship' : return 1\n    elif x == 'Flight' : return 2\n    elif x == 'Road' : return 3\n\ndef imp_map(x):\n    if x == 'low' : return 1\n    elif x == 'medium': return 2\n    elif x == 'high' : return 3\n\ndef sex_map(x):\n    if x == 'F' : return 1\n    else: return 0","1b4417c8":"X_train['Warehouse_block'] = X_train['Warehouse_block'].map(wb_map)\nX_train['Mode_of_Shipment'] = X_train['Mode_of_Shipment'].map(sp_map)\nX_train['Product_importance'] = X_train['Product_importance'].map(imp_map)\nX_train['Gender'] = X_train['Gender'].map(sex_map)\n\nX_train.head()","a8c24ce6":"# # label encoder \uc0ac\uc6a9\ud558\uae30\n# from sklearn.preprocessing import LabelEncoder\n# label = LabelEncoder()\n# for cat in cat_features:\n#     catcol = X_train[cat]\n#     labeled = label.fit_transform(catcol) # requires 1D array, returns 1D array as well\n#     X_train[cat] = labeled","0acd4ae8":"X_train.describe()","bc26f567":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# ID \uc81c\uc678\ud55c feature\ub294 \ucd1d 10\uac1c\nfig, ax = plt.subplots(2, 5, figsize=(20, 8))\n\nimg_idx = 0\ncolumns = list(X_train.columns)[1:] # ID \uc81c\uc678\ud55c feature\nfor i in range(2):\n    for j in range(5):\n        colname = columns[img_idx]\n        col = X_train[colname]\n        ax[i][j].hist(col, bins=30)\n        ax[i][j].set_xlabel(colname)\n        if j == 0:\n            ax[i][j].set_ylabel('Frequency')\n        \n        img_idx += 1","da576ec9":"# \uc5f0\uc18d\ud615 \ubcc0\uc218\ub4e4 \uc815\uaddc\ud654 \uc704\ud574\uc11c box-cox \ubcc0\ud658\uc2dc\ud0a4\uace0 \ubd84\ud3ec \ubcf4\uae30 - \ubaa8\ub450 0\ubcf4\ub2e4 \ud070 \uc815\uc218\uac12\uc774\ubbc0\ub85c box-cox \uac00\ub2a5\n# \uc5f0\uc18d\ud615 \ubcc0\uc218\ub4e4: customer_care_calls, prior_purchases, discount_offered, cost of the product, weight in gms\nfrom sklearn.preprocessing import power_transform\n\ncon_features = ['Customer_care_calls', 'Cost_of_the_Product', \n                'Prior_purchases', 'Discount_offered', 'Weight_in_gms']\n\ncon_df = pd.DataFrame()\nfor con in con_features:\n    boxcox = power_transform(X_train[[con]], method='box-cox')\n    con_df[con] = boxcox.flatten()\n\nfig, ax = plt.subplots(1, 5, figsize=(20, 4))\nfor i in range(5):\n    con = con_features[i]\n    ax[i].hist(con_df[con], bins=30)\n    ax[i].set_xlabel(con)\n    if i == 0:\n        ax[i].set_ylabel('box-cox frequency')","f9176c70":"# \uc5f0\uc18d\ud615 \ubcc0\uc218\ub4e4: customer_care_calls, prior_purchases, discount_offered, cost of the product, weight in gms\nlog_df = pd.DataFrame()\nfor con in con_features:\n    col = X_train[con]\n    if 0 in col:\n        logged = np.log1p(col)\n    else:\n        logged = np.log(col)\n    \n    log_df[con] = logged\n\nfig, ax = plt.subplots(1, 5, figsize=(20, 4))\nfor i in range(5):\n    con = con_features[i]\n    ax[i].hist(log_df[con], bins=30)\n    ax[i].set_xlabel(con)\n    if i == 0:\n        ax[i].set_ylabel('logged frequency')","c7284cdc":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nfeats = ['Cost_of_the_Product', 'Discount_offered', 'Weight_in_gms']\nfor ft in feats:\n    scaled = scaler.fit_transform(X_train[[ft]])\n    X_train[ft] = scaled.flatten()\n\nX_train.head()","ea2bf951":"from sklearn.model_selection import train_test_split, KFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb\nfrom sklearn.metrics import roc_curve, roc_auc_score, auc\nfrom datetime import datetime","5865af91":"# print(help(LogisticRegression))","51ff977b":"# print(help(DecisionTreeClassifier))","9d917c25":"# print(help(RandomForestClassifier))","b19bdb00":"# print(help(xgb.XGBClassifier))","7df20d27":"# logistic regression\nlr = LogisticRegression(n_jobs=-1, random_state=42, max_iter=3000)\n# Decision Tree\ndtree = DecisionTreeClassifier(max_depth=9, min_samples_split=5, min_samples_leaf=3, \n                              max_features='auto', random_state=42)\n# Random Forest\nrf = RandomForestClassifier(n_estimators=1000, max_depth=9, min_samples_split=5, min_samples_leaf=3,\n                          max_features='auto', random_state=42, n_jobs=-1)\n# XGBoost\nxgb_model = xgb.XGBClassifier(n_estimators=1000, max_depth=9, learning_rate=0.05, n_jobs=-1,\n                              gamma=0.7, random_state=42, eval_metric='logloss',\n                              use_label_encoder=False)","8f19e5f0":"# print(help(train_test_split))","67aa21cb":"# help(roc_curve)","774ad082":"# train test split\ntrain_x, val_x, train_y, val_y = train_test_split(X_train, y_train, \n                                                  test_size=0.2, shuffle=True, random_state=42)\n\nmodels = [lr, dtree, rf, xgb_model]\nfor m in models:\n    start = datetime.now()\n    m.fit(train_x, train_y)\n    end = datetime.now()\n    # in order to get roc_auc_score, predict_proba is needed\n    pred_y = m.predict_proba(val_x)[:, 1] # for binary case, [:, 1] is necessary; the probability to be classified as '1'\n    name = m.__class__.__name__\n    auc = roc_auc_score(val_y, pred_y)\n    time = end - start\n    print('Model {0} - AUC score: {1}, Training time: {2}'.format(name, auc, time))","b88820e1":"# # random Forest\uac00 \uac00\uc7a5 \uc88b\uc740 \uc131\ub2a5\n# final_model = rf\n# final_model.fit(X_train, y_train)\n# final_predict = final_model.predict(X_test)\n# final_predict_proba = final_model.predict_proba(X_test)[:, 1]\n# auc_score = roc_auc_score(y_test, final_predict_proba)\n# fpr, tpr, _ = roc_curve(y_test, final_predict_proba)\n# auc_score = auc(fpr, tpr)\n# f1_score = (2 * fpr * tpr) \/ (fpr + tpr) # f1 score","7a58f5f0":"# # \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\n# import pandas as pd\n# df = pd.read_csv(\"..\/input\/customer-analytics\/Train.csv\")","097810b0":"# # [\uc2dc\ud5d8\uc6a9 \ub370\uc774\ud130\uc14b \ub9cc\ub4e4\uae30]\n# # (\ub2e8, y_test \ub370\uc774\ud130\ub294 \ud65c\uc6a9\ud574\uc11c\ub294 \uc548\ub428)\n\n# from sklearn.model_selection import train_test_split\n# X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n# y_train = X_train[['ID', 'Reached.on.Time_Y.N']]\n# X_train = X_train.drop(columns=['ID', 'Reached.on.Time_Y.N'])\n# y_test = X_test[['ID', 'Reached.on.Time_Y.N']]\n# X_test = X_test.drop(columns=['ID', 'Reached.on.Time_Y.N'])\n\n# X_train.shape, y_train.shape, X_test.shape, y_test.shape","d9b10de0":"# # \ub370\uc774\ud130 \ud655\uc778\n# print(X_train.shape)\n# X_train.head()","7388e629":"# y_train","38d3a085":"# # \ub808\uc774\ube14(\ud0c0\uac9f) \ud655\uc778\n# y_train['Reached.on.Time_Y.N'].value_counts()","54a1a506":"# # X_train \uacb0\uce21\uce58 \ud655\uc778\n# X_train.isnull().sum()","99b82ea8":"# # X_test \uacb0\uce21\uce58 \ud655\uc778\n# X_test.isnull().sum()","bb4bab93":"# # \ub370\uc774\ud130 \ud0c0\uc785 \ud655\uc778\n# X_train.info()","d9d1bf82":"# # object \ud0c0\uc785 \uceec\ub7fc, \uace0\uc720\uac12 \uac1c\uc218 \ud655\uc778\n# X_train[['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender']].nunique()","30f4048d":"# # object \uceec\ub7fc \uc0ad\uc81c (\ub610\ub294 \ub77c\ubca8\uc778\ucf54\ub529, \uc6d0\ud56b\uc778\ucf54\ub529)\n# X_train = X_train.drop(['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender'], axis=1)\n# X_test = X_test.drop(['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender'], axis=1)\n# X_train","3db8320e":"# from sklearn.linear_model import LogisticRegression\n# from sklearn.neighbors import KNeighborsClassifier\n# from sklearn.svm import SVC\n# from sklearn.tree import DecisionTreeClassifier\n# from sklearn.ensemble import RandomForestClassifier\n# from xgboost import XGBClassifier","de3770fd":"# from sklearn.model_selection import train_test_split\n# X_tr,X_val,y_tr,y_val = train_test_split(X_train,y_train['Reached.on.Time_Y.N'],test_size=0.2,random_state=2021)","34c0c355":"# model = LogisticRegression()\n# model.fit(X_tr, y_tr)\n# round(model.score(X_val, y_val) * 100, 2)","1a0bc5b4":"# model = KNeighborsClassifier()\n# model.fit(X_tr, y_tr)\n# round(model.score(X_val, y_val) * 100, 2)","9e6c6ce3":"# model = SVC()\n# model.fit(X_tr, y_tr)\n# round(model.score(X_val, y_val) * 100, 2)","9ed101a7":"# model = DecisionTreeClassifier()\n# model.fit(X_tr, y_tr)\n# round(model.score(X_val, y_val) * 100, 2)","acef6b40":"# model = RandomForestClassifier(n_estimators=100)\n# model.fit(X_tr, y_tr)\n# round(model.score(X_val, y_val) * 100, 2)","fc5517e4":"# model = XGBClassifier(eval_metric='mlogloss', use_label_encoder=False)\n# model.fit(X_tr, y_tr)\n# round(model.score(X_val, y_val) * 100, 2)","769c8d5b":"# model = KNeighborsClassifier()\n# model.fit(X_train, y_train['Reached.on.Time_Y.N'])\n# pred = model.predict(X_test)\n# pred","4275fa04":"# submission = pd.DataFrame({\n#         \"ID\": y_test[\"ID\"],\n#         \"Reached.on.Time_Y.N\": pred\n#     })","f6a3791b":"# submission.head()","bcdc8365":"# submission.to_csv('submission.csv', index=False)  ## \uc218\ud5d8\ubc88\ud638.csv","d68111fc":"# \uc870\uae08 \ub5a8\uc5b4\uc9c4 \uc131\ub2a5\uc744 \ubcf4\uc5ec\uc8fc\uace0 \uc788\uc74c\n# round(model.score(X_test, y_test['Reached.on.Time_Y.N']) * 100, 2)","211a61e0":"## Box-cox Histogram\n\n\uc5f0\uc18d\ud615 \ubcc0\uc218\ub4e4 \uc815\uaddc\ud654 \uc704\ud574\uc11c box-cox \ubcc0\ud658\uc2dc\ud0a4\uace0 \ubd84\ud3ec \ubcf4\uae30 - \ubaa8\ub450 0\ubcf4\ub2e4 \ud070 \uc815\uc218\uac12\uc774\ubbc0\ub85c box-cox \uac00\ub2a5\n","e5bf032c":"## \ud480\uc774 (Baseline)\n- \uc544\ub798\ucf54\ub4dc\ub294 \uc815\ub2f5\uc774 \uc544\ub2cc \ud480\uc774 \uc608\uc2dc\uc785\ub2c8\ub2e4.","ce5588a7":"# Model Selection\n\n* \uc0ac\uc6a9\ud560 \ud6c4\ubcf4\uad70\n    - Logistic Regression\n    - Decision Tree\n    - Random Forest","e309a1d5":"## \uacb0\uacfc \uccb4\uc810 (\uc218\ud5d8\uc790\ub294 \uc54c \uc218 \uc5c6\ub294 \ubd80\ubd84\uc784)","c5b4a2c2":"## \ubaa8\ub378 \uc120\ud0dd \ubc0f \uacb0\uacfc \ucd9c\ub825","f1108f89":"## Log Histogram\n\n\uc5f0\uc18d\ud615 \ubcc0\uc218\ub4e4 \uc815\uaddc\ud654 \uc704\ud574\uc11c \ub85c\uadf8\ubcc0\ud658\uc2dc\ud0a4\uace0 \ubd84\ud3ec \ubcf4\uae30","8068b9d0":"## \ub370\uc774\ud130 \uc804\ucc98\ub9ac","16f2a54f":"## \uc804\uc790\uc0c1\uac70\ub798 \ubc30\uc1a1 \ub370\uc774\ud130\n### \uc81c\ud488 \ubc30\uc1a1 \uc2dc\uac04\uc5d0 \ub9de\ucdb0 \ubc30\uc1a1\ub418\uc5c8\ub294\uc9c0 \uc608\uce21\ubaa8\ub378 \ub9cc\ub4e4\uae30\n\ud559\uc2b5\uc6a9 \ub370\uc774\ud130 (X_train, y_train)\uc744 \uc774\uc6a9\ud558\uc5ec \ubc30\uc1a1 \uc608\uce21 \ubaa8\ud615\uc744 \ub9cc\ub4e0 \ud6c4, \uc774\ub97c \ud3c9\uac00\uc6a9 \ub370\uc774\ud130(X_test)\uc5d0 \uc801\uc6a9\ud558\uc5ec \uc5bb\uc740 \uc608\uce21\uac12\uc744 \ub2e4\uc74c\uacfc \uac19\uc740 \ud615\uc2dd\uc758 CSV\ud30c\uc77c\ub85c \uc0dd\uc131\ud558\uc2dc\uc624(\uc81c\ucd9c\ud55c \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 ROC-AUC \ud3c9\uac00\uc9c0\ud45c\uc5d0 \ub530\ub77c \ucc44\uc810)\n\n![image.png](attachment:f70c3a4b-9984-4656-af95-dac047a900cb.png)\n\n[\uc2dc\ud5d8\uc6a9 \ub370\uc774\ud130\uc14b \ub9cc\ub4e4\uae30] \ucf54\ub4dc\ub294 \uc608\uc2dc\ubb38\uc81c\uc640 \ub3d9\uc77c\ud55c \ud615\ud0dc\uc758 X_train, y_train, X_test \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uae30 \uc704\ud568\uc784\n\n(\uc720\uc758\uc0ac\ud56d)\n- \uc131\ub2a5\uc774 \uc6b0\uc218\ud55c \uc608\uce21\ubaa8\ud615\uc744 \uad6c\ucd95\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc801\uc808\ud55c \ub370\uc774\ud130 \uc804\ucc98\ub9ac, \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1, \ubd84\ub958\uc54c\uace0\ub9ac\uc998, \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd, \ubaa8\ud615 \uc559\uc0c1\ube14 \ub4f1\uc774 \uc218\ubc18\ub418\uc5b4\uc57c \ud55c\ub2e4.\n- \uc218\ud5d8\ubc88\ud638.csv\ud30c\uc77c\uc774 \ub9cc\ub4e4\uc5b4\uc9c0\ub3c4\ub85d \ucf54\ub4dc\ub97c \uc81c\ucd9c\ud55c\ub2e4.\n- \uc81c\ucd9c\ud55c \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 ROC-AUC\ud615\ud0dc\ub85c \uc77d\uc5b4\ub4dc\ub9b0\ub2e4.","be2bb442":"# EDA","5cd978c0":"## \ubaa8\ub378 \ubc0f \ud3c9\uac00","24155677":"## Histogram\n\n\uc2dc\ud5d8\ub54c\ub294 \uc548 \ub418\uc9c0\ub9cc, \uc6b0\uc120 \uadf8\ub824\ubcf8\ub2e4","2f4bdeab":"# \ubcc0\uc218 Scaling\n\n* \uc815\uaddc\ud654\ub97c \uc704\ud55c box-cox \ubcc0\ud658\uc774\ub098 \ub85c\uadf8\ubcc0\ud658\uc740 \ud544\uc694\ud558\uc9c0 \uc54a\uc544 \ubcf4\uc784\n\n* \ub2e8, \ub2e8\uc704\ub97c \ub9de\ucdb0\uc8fc\uae30 \uc704\ud574 cost, discount offered, weight\uc740 standard scaling","c5a9b8b4":"## EDA","ff55e1c3":"# Library and Data Import"}}