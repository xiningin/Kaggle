{"cell_type":{"52ce2977":"code","f04f5a4d":"code","859372e7":"code","829021ca":"code","dda86399":"code","13937b33":"code","5156cee2":"code","eeebe820":"code","baa2b2a9":"code","9587d162":"code","30f51dc3":"code","14aa8648":"code","f2e38ba8":"code","93f3eece":"code","84f7c381":"code","3c612241":"code","46c52436":"code","cbf26fe5":"code","43c2a898":"code","62075128":"code","b4dd09d5":"markdown","95c9f748":"markdown","e21432a2":"markdown","b5fcb921":"markdown","b94b185b":"markdown","4fa59a77":"markdown"},"source":{"52ce2977":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport random\nimport scipy.stats as stt\nimport warnings\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_curve,roc_auc_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import cross_val_score\nwarnings.filterwarnings('ignore')\n%pylab inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f04f5a4d":"data = pd.read_csv('..\/input\/creditcard.csv')\ndata.head()","859372e7":"first_class = '{:.4}% - class 0'.format(pd.value_counts(data.Class)[0]\/data.shape[0])\nsecond_class = '{:.2}% - class 1'.format(pd.value_counts(data.Class)[1]\/data.shape[0])\nimport plotly.graph_objects as go\nfig = go.Figure(\n    data=[go.Bar(\n        y=data['Class'].value_counts().to_dense().keys(),\n        x=data['Class'].value_counts(),\n        orientation='h',\n        text=[second_class,first_class]\n    )],\n    layout_title_text=\"Countplot for classifications\"\n)\nfig.show()","829021ca":"data[data.Class==0].sample(n=492)\nresult = pd.concat([data[data.Class==0].sample(n=492), data[data.Class==1]], axis=0)","dda86399":"plt.figure(figsize=(15,15))\nresult = data\n# sns.heatmap(result.corr(), fmt='.1f');\nfig = go.Figure(\n    data = [go.Heatmap( z=result.corr(), colorscale='Viridis',\n                      x=list(result.columns),\n                      y=list(result.columns)\n                      )],\n    layout_title_text=\"Correlation plot\",\n    )\nfig.show()","13937b33":"df = result[['V1','V3','V4','V5','V6','V7','V9','V10','V11','V12','V14','V16','V17','V18','Class']]\nfig = go.Figure(\n    data = [go.Heatmap( z=df.corr(), colorscale='Viridis',\n                      x=list(df.columns),\n                      y=list(df.columns)\n                      )],\n    layout_title_text=\"Countplot for classifications\",\n    )\nfig.show()","5156cee2":"# sns.boxplot(y=data.Amount, x=data.Class);\n# 1,3,5,6,7, 9, 10, 12, 14, 16,17,18\nsns.heatmap(result[['V1','V3','V5','V6','V7','V9','V10','V12','V14','V16','V17','V18']].corr(), fmt='.1f');","eeebe820":"import plotly.express as px\ntips = px.data.tips()\nfig = px.histogram(tips, x=\"total_bill\", y=\"tip\", color=\"sex\", marginal=\"rug\",\n                   hover_data=tips.columns)\nfig.show()","baa2b2a9":"data.Amount.hist(bins=100)","9587d162":"data[data.Class==0].shape","30f51dc3":"import plotly.figure_factory as ff\nimport numpy as np\n\n# Group data together\nhist_data = [data.Amount]\n\ngroup_labels = ['Amount']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.2)\nfig.show()","14aa8648":"import plotly.express as px\ndata = \nfig = px.histogram(data, x=\"Amount\", y=\"Time\", color=\"Class\",\n                   marginal=\"box\", # or violin, rug\n                   hover_data=data.columns)\nfig.show()","f2e38ba8":"data.head()","93f3eece":"f, axes = plt.subplots(1, 3,figsize=(17,5))\nsns.set(font_scale=1)\nsns.boxplot(y=data['V4'],x=data.Class,ax=axes[0]);\nsns.boxplot(y=data['V10'], x=data.Class,ax=axes[1]);\nsns.boxplot(y=data['V11'], x=data.Class,ax=axes[2]);\n\nf, axes = plt.subplots(1, 3,figsize=(17,5))\nsns.set(font_scale=1)\nsns.boxplot(y=data['V12'],x=data.Class,ax=axes[0]);\nsns.boxplot(y=data['V14'], x=data.Class,ax=axes[1]);\nsns.boxplot(y=data['V16'], x=data.Class,ax=axes[2]);","84f7c381":"from sklearn.manifold import TSNE\nres_ = pd.concat([data[data.Class==0].sample(n=492), data[data.Class==1]], axis=0)\ntsn = TSNE()\nres_tsne = tsn.fit_transform(res_)\nsns.scatterplot(x=res_tsne[:,0],y=res_tsne[:,1],s=100, hue=res_.Class, palette='viridis');\nplt.show()","3c612241":"data[data.Class==0].sample(n=492)\nres = pd.concat([data[data.Class==0].sample(n=492), data[data.Class==1]], axis=0)\nres = res[['V4','V10','V11','V12','V14','V16','Class']]","46c52436":"from sklearn.manifold import TSNE\ntsn = TSNE()\nres_tsne = tsn.fit_transform(res)\nplt.figure(figsize=(7,7))\nsns.scatterplot(x=res_tsne[:,0],y=res_tsne[:,1],s=100, hue=res.Class, palette='copper');","cbf26fe5":"from sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_samples\ndistortions = []\nfor i in range(1,11):\n    km = KMeans(n_clusters=i, init='k-means++',\n               n_init=20,max_iter=300, random_state=0)\n    km.fit(res)\n    distortions.append(km.inertia_)\nplt.plot(range(1,11),distortions,marker='o')\nplt.xlabel('Number of clusters')\nplt.ylabel('Distortion')\nplt.show()","43c2a898":"import plotly.express as px\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=[i for i in range(1,11)], y=distortions,\n                    mode='lines',\n                    name='lines'))\nfig.update_layout(title='Distorsion plot',\n                   xaxis_title='Number of clusters',\n                   yaxis_title='Distortion')\nfig.show()","62075128":"[i for i in range(1,11)]","b4dd09d5":"This result seems very sapid. Here doubt creeps in that the data are specially selected, because real projects rarely have so well separable data.","95c9f748":"In this kernel I want to demonstrate the power of feature selection. Here I try to apply interactive graphics with plotly library. I recommend switching to it, as static graphics become outdated. Necessary imports:","e21432a2":"Now apply cluster analysis. First interesting method - T-SNE","b5fcb921":"This method doesn't show any interesting. Picture has cluster structure, but not with feature - Class. Try this with our selected features: V4, 10, 11, 12, 14, 16.","b94b185b":"Here we can see, that our dataset is very imbalanced. It's mean, that our model can always predict first class and it will be right in 99,8% cases.","4fa59a77":"Only with visual analysis we can identify 6 features, which can easy separate 2 main classes."}}