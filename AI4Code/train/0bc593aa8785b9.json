{"cell_type":{"d73958ca":"code","dcb70dfc":"code","4cb6aff8":"code","59e7180a":"code","86b87bd0":"code","432ac2e8":"code","4e660f15":"code","a759f91d":"code","6e46e348":"code","7bc7d8cb":"code","4e8dccb3":"code","6bfe9387":"code","3ecbac4c":"code","04cd8e4a":"code","a0d52e45":"code","ec71c64e":"code","e9125c1b":"code","1686b48d":"code","1249fef6":"code","767cfa13":"code","099cf6ca":"code","5398d0b7":"code","cca2dc1e":"code","7f9bb3c6":"code","80072995":"code","a3ee4ff6":"code","f8f8366a":"code","0e0a2fc3":"code","357ecc5d":"code","0ecb9ad6":"code","1e53de7e":"code","a0c7eb61":"code","0c8ec822":"code","dd06895f":"code","ccb58bf9":"code","d10f4628":"code","f1c7523e":"code","821cd837":"code","9958e27f":"code","52975af8":"code","e78de186":"code","0f7da7a7":"code","c225a17e":"code","61285761":"code","7f0e1272":"code","b9643bed":"code","4db67220":"code","c2b538fb":"code","e354b2ff":"code","b6e039d5":"code","72b80810":"code","ac0a5312":"code","4d033bfd":"code","46af5054":"code","e2efccd0":"code","138b7582":"code","38055130":"code","47d6b2ea":"code","b06d5ad0":"code","5babfe4c":"code","b59fd463":"code","422e874a":"code","dec0c30c":"code","664b987b":"code","df6542ca":"code","43e6474b":"code","bfd7a78b":"code","54770d5c":"markdown","fcf282da":"markdown","c065b2ce":"markdown","92338259":"markdown","d5dfd99e":"markdown","1f8bdc29":"markdown","e72793e2":"markdown","1ab5dbe7":"markdown","3bd2956b":"markdown","de9c3aea":"markdown","207fdf7e":"markdown","2d1c54a5":"markdown","b15aa5b6":"markdown","9b7723e5":"markdown","98972874":"markdown","54277e01":"markdown","239d6081":"markdown","d409534f":"markdown","fa7a22a6":"markdown","c669465d":"markdown","f4c6f221":"markdown","e5e935a5":"markdown","3f5f0631":"markdown","415b98c8":"markdown","9d35f43c":"markdown","5b4296ed":"markdown","2fa995b7":"markdown","621e25c8":"markdown","791202f6":"markdown","0f475371":"markdown","a1ebe503":"markdown","0e80ca03":"markdown","40468aa5":"markdown","96fe1a65":"markdown","26abf1ed":"markdown","94a52f99":"markdown","b621e388":"markdown","b661868f":"markdown","903640d4":"markdown","df82a3b9":"markdown","b567bf16":"markdown","c1a3b5a9":"markdown","997c91be":"markdown","d3fa0e6e":"markdown","52615f32":"markdown","d336011b":"markdown","1032f6aa":"markdown","98c503ef":"markdown","9461a505":"markdown"},"source":{"d73958ca":"# Librairies import\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom math import radians, cos, sin, asin, sqrt","dcb70dfc":"# root path for all dataset\nroot_path = '..\/input\/brazilian-ecommerce\/'\n\n# olist_customers_dataset\ncustomers = pd.read_csv(root_path + \"olist_customers_dataset.csv\")\ncustomers.head(3)","4cb6aff8":"customers.info()","59e7180a":"# olist_geolocation_dataset\ngeolocation = pd.read_csv(root_path + \"olist_geolocation_dataset.csv\")\ngeolocation.head(3)","86b87bd0":"geolocation.info()","432ac2e8":"geolocation.describe()","4e660f15":"# olist_orders_dataset\norders = pd.read_csv(root_path + \"olist_orders_dataset.csv\")\norders.head(3)","a759f91d":"orders.info()","6e46e348":"# olist_order_items_dataset\norder_items = pd.read_csv(root_path + \"olist_order_items_dataset.csv\")\norder_items.head(3)","7bc7d8cb":"order_items.info()","4e8dccb3":"# olist_order_payments_dataset\norder_payments = pd.read_csv(root_path + \"olist_order_payments_dataset.csv\")\norder_payments.head(3)","6bfe9387":"order_payments.info()","3ecbac4c":"# olist_order_reviews_dataset\norder_reviews = pd.read_csv(root_path + \"olist_order_reviews_dataset.csv\")\norder_reviews.head(3)","04cd8e4a":"order_reviews.info()","a0d52e45":"# olist_products_dataset\nproducts = pd.read_csv(root_path + \"olist_products_dataset.csv\")\nproducts.head(3)","ec71c64e":"products.info()","e9125c1b":"# olist_products_dataset\ncategories_en = pd.read_csv(root_path + \"product_category_name_translation.csv\")\ncategories_en.head(3)","1686b48d":"products = pd.merge(products, categories_en,\n                    how=\"left\",\n                    on=\"product_category_name\")\n\ndel_features_list = [\"product_category_name\", \"product_weight_g\",\n                     \"product_length_cm\", \"product_height_cm\",\n                     \"product_width_cm\"]\nproducts.drop(del_features_list, axis=1, inplace=True)\nproducts = products.rename(columns={\"product_category_name_english\":\n                                    \"product_category_name\"})\nproducts.head(3)","1249fef6":"# Plot categories count in dataset\nsns.set_style(\"whitegrid\")\nfont_title = {\"family\": \"serif\",\n              \"color\":  \"#476bff\",\n              \"weight\": \"bold\",\n              \"size\": 18}\n\nfig = plt.figure(figsize=(18, 8))\nsns.countplot(data=products, x=\"product_category_name\",\n              edgecolor=\"black\",\n              color=\"#00d994\", alpha=0.7)\nplt.xticks(range(0, products[\"product_category_name\"].nunique()+1),\n           products[\"product_category_name\"].unique(),\n           rotation=90)\nplt.title(f\"Les cat\u00e9gories produits les plus repr\u00e9sent\u00e9es\\n\",\n          fontdict=font_title)\nplt.show()","767cfa13":"order_items = pd.merge(order_items, orders,\n                       how=\"left\",\n                       on=\"order_id\")\n\ndel_features_list = [\"seller_id\", \"shipping_limit_date\",\n                     \"order_approved_at\",\n                     \"order_delivered_carrier_date\",\n                     \"order_estimated_delivery_date\"]\norder_items.drop(del_features_list,\n                 axis=1,\n                 inplace=True)\norder_items.head(3)","099cf6ca":"order_items.groupby(by=\"order_status\").sum()[\"order_item_id\"]","5398d0b7":"order_items = order_items[order_items[\"order_status\"] == \"delivered\"]","cca2dc1e":"orders_per_days = order_items.groupby(order_items[\"order_purchase_timestamp\"]\\\n                                      .astype('datetime64[ns]').dt.date)\\\n                                    .count()[\"order_id\"]\nfig = plt.figure(figsize=(20, 8))\nax = orders_per_days.plot(color=\"#00d994\")\nax.set_ylabel(\"count\")\nplt.title(f\"Evolution du nombre de commandes journali\u00e8res\\n\",\n          fontdict=font_title)\nplt.show()","7f9bb3c6":"# Modify object cols in timestamp format\ndatetime_cols = [\"order_purchase_timestamp\", \"order_delivered_customer_date\"]\nfor col in datetime_cols:\n    order_items[col] = order_items[col].astype('datetime64[ns]')\norder_items.info()","80072995":"order_items.groupby(order_items['order_purchase_timestamp'].dt.month)\\\n    .agg({\"order_id\": \"nunique\"})\\\n    .plot(figsize=(12,8), kind=\"bar\",\n          title=\"R\u00e9partition des commandes par mois\",\n          ylabel=\"Nb orders\",\n          xlabel=\"Month\",\n          legend=False)\nplt.xticks(np.arange(0,12), ['Jan','Feb','Mar','Apr','May','Jun',\n                             'Jul','Aug','Sept','Oct','Nov','Dec'], \n           rotation='horizontal')\nplt.show()","a3ee4ff6":"order_items.groupby(order_items['order_purchase_timestamp'].dt.dayofweek)\\\n    .agg({\"order_id\": \"nunique\"})\\\n    .plot(figsize=(12,8), kind=\"bar\",\n          title=\"R\u00e9partition des commandes par jour de la semaine\",\n          ylabel=\"Nb orders\",\n          xlabel=\"Day of week\",\n          legend=False)\nplt.xticks(np.arange(0,7), ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'], rotation='horizontal')\nplt.show()","f8f8366a":"order_items.groupby(order_items['order_purchase_timestamp'].dt.hour)\\\n    .agg({\"order_id\": \"nunique\"})\\\n    .plot(figsize=(12,8), kind=\"bar\",\n          title=\"R\u00e9partition des commandes par heure de la journ\u00e9e\",\n          ylabel=\"Nb orders\",\n          xlabel=\"Hour\",\n          legend=False)\nplt.show()","0e0a2fc3":"order_items[\"sale_month\"] = order_items['order_purchase_timestamp'].dt.month\nfig = plt.figure(figsize=(12,8))\nsns.boxplot(data=order_items[order_items.price < 500], x=\"sale_month\", y=\"price\")\nplt.title(\"Distribution du C.A. sur les mois de l'ann\u00e9e\", fontsize=18, color=\"b\")\nplt.show()","357ecc5d":"group_payments = order_payments.groupby(by=\"order_id\").agg(\n    {\"payment_sequential\": 'count',\n     \"payment_installments\": 'sum'})\n\norder_items = pd.merge(order_items, group_payments,\n                       how=\"left\",\n                       on=\"order_id\")\norder_items = order_items.rename(columns={\n    \"payment_sequential\": \"nb_payment_sequential\",\n    \"payment_installments\": \"sum_payment_installments\"})\norder_items.head(3)","0ecb9ad6":"fig = plt.figure(figsize=(12, 8))\nsns.countplot(data=order_payments, x=\"payment_type\",\n              edgecolor=\"black\",\n              color=\"#00d994\", alpha=0.7)\nplt.title(f\"Les moyens de paiement utilis\u00e9s sur le site\\n\",\n          fontdict=font_title)\nplt.show()","1e53de7e":"group_reviews = order_reviews.groupby(\"order_id\").agg({\n    \"review_id\": \"count\",\n    \"review_score\": \"mean\"})\n\norder_items = pd.merge(order_items, group_reviews,\n                       how=\"left\",\n                       on=\"order_id\")\norder_items = order_items.rename(columns={\n    \"review_id\": \"is_reviewed\"})\norder_items.head(3)","a0c7eb61":"order_items[\"is_reviewed\"] = np.where(order_items[\"is_reviewed\"] == 1,\n                                      True, False)","0c8ec822":"fig = plt.figure(figsize=(12, 8))\nsns.histplot(data=order_items, x=\"review_score\", \n             discrete=True,\n             edgecolor=\"black\",\n             color=\"#00d994\", alpha=0.7)\nplt.title(f\"R\u00e9partition des notes attribu\u00e9es aux commandes\\n\",\n          fontdict=font_title)\nplt.show()\n","dd06895f":"order_items = pd.merge(order_items, customers,\n                       how=\"left\",\n                       on=\"customer_id\")\norder_items.head(3)","ccb58bf9":"data = pd.merge(order_items, products,\n               how=\"left\",\n               on=\"product_id\")\ndata.head(3)","d10f4628":"data.info()","f1c7523e":"data[\"delivery_delta_days\"] = (data.order_delivered_customer_date\n                               - data.order_purchase_timestamp)\\\n                              .dt.round('1d').dt.days\ndata.drop(\"order_delivered_customer_date\", axis=1, inplace=True)","821cd837":"fig = plt.figure(figsize=(12, 8))\nsns.histplot(data=data, x=\"delivery_delta_days\",\n             stat=\"density\",\n             edgecolor=\"black\",\n             color=\"#00d994\", alpha=0.7)\nplt.xlabel(\"D\u00e9lais de livraison moyen (jours)\")\nplt.title(f\"R\u00e9partition des d\u00e9lais de livraison moyens\\n\",\n          fontdict=font_title)\nplt.show()","9958e27f":"data['product_category'] = np.where((data['product_category_name'].str.contains(\"fashio|luggage\")==True),\n                                    'fashion_clothing_accessories',\n                           np.where((data['product_category_name'].str.contains(\"health|beauty|perfum\")==True),\n                                    'health_beauty',\n                           np.where((data['product_category_name'].str.contains(\"toy|baby|diaper\")==True),\n                                     'toys_baby',\n                           np.where((data['product_category_name'].str.contains(\"book|cd|dvd|media\")==True),\n                                     'books_cds_media',\n                           np.where((data['product_category_name'].str.contains(\"grocer|food|drink\")==True), \n                                     'groceries_food_drink',\n                           np.where((data['product_category_name'].str.contains(\"phon|compu|tablet|electro|consol\")==True), \n                                     'technology',\n                           np.where((data['product_category_name'].str.contains(\"home|furnitur|garden|bath|house|applianc\")==True), \n                                                                                          'home_furniture',\n                           np.where((data['product_category_name'].str.contains(\"flow|gift|stuff\")==True),\n                                     'flowers_gifts',\n                           np.where((data['product_category_name'].str.contains(\"sport\")==True),\n                                     'sport',\n                                     'other')))))))))","52975af8":"# drop product_category_name column\ndata.drop(\"product_category_name\", axis=1, inplace=True)","e78de186":"# Plot categories count in dataset\nfig = plt.figure(figsize=(18, 8))\nsns.countplot(data=data, x=\"product_category\",\n              edgecolor=\"black\",\n              color=\"#00d994\", alpha=0.7)\nplt.xticks(range(0, data[\"product_category\"].nunique()),\n           data[\"product_category\"].unique(),\n           rotation=90)\nplt.title(f\"Les nouvelles cat\u00e9gories produits les plus repr\u00e9sent\u00e9es\\n\",\n          fontdict=font_title)\nplt.show()","0f7da7a7":"fig = plt.figure(figsize=(12, 8))\nsns.histplot(data.groupby(\"customer_unique_id\").agg({\"order_id\": \"nunique\"}),\n             x=\"order_id\",\n             discrete=True,\n             edgecolor=\"black\",\n             color=\"#00d994\", alpha=0.7)\nplt.xlabel(\"Number of orders\")\nplt.title(f\"Nombre de commandes par client\\n\",\n          fontdict=font_title)\nplt.show()\n","c225a17e":"categories_customers = data.groupby([\"customer_unique_id\", \"product_category\"])\\\n                        .agg({\"order_item_id\": \"count\"}).unstack()\ncategories_customers.columns = categories_customers.columns.droplevel(0)\ncategories_customers.fillna(0, inplace=True)\ncategories_customers[\"total_items\"] = categories_customers.sum(axis=1)\n\n# ratio of total items\nfor col in categories_customers.columns:\n    if (col != \"total_items\"):\n        categories_customers[col] = (categories_customers[col]\/categories_customers[\"total_items\"])\n\ncategories_customers.reset_index(inplace=True)\ncategories_customers.head(3)","61285761":"products_per_order = data.groupby([\"customer_unique_id\", \"order_id\"])\\\n                        .agg({\"order_item_id\": \"count\"})\nproducts_per_order = products_per_order.groupby(\"customer_unique_id\")\\\n                        .agg({\"order_item_id\": \"mean\"})\n\n# Plot density of number items in order\nfig = plt.figure(figsize=(12, 8))\nsns.histplot(data = products_per_order,\n             x=\"order_item_id\",\n             discrete=True,\n             edgecolor=\"black\",\n             color=\"#00d994\", alpha=0.7)\nplt.xlabel(\"Number of items in order\")\nplt.title(f\"Nombre moyen d'articles par commande\\n\",\n          fontdict=font_title)\nplt.show()","7f0e1272":"recurencies = data.groupby(\"customer_unique_id\")\\\n                .agg({\"order_purchase_timestamp\": [\"min\",\"max\"]})\nrecurencies.columns = recurencies.columns.droplevel(0)\n\n# Max date in dataset\nmax_date = data[\"order_purchase_timestamp\"].max()\n\n# Delay from the last order\nrecurencies[\"order_total_delay\"] = [(y[1] - y[0]).round('1d').days if y[1] != y[0] \n                                    else (max_date - y[0]).round('1d').days \n                                    for x,y in recurencies.iterrows()]\nrecurencies.drop([\"min\", \"max\"], axis=1, inplace=True)\nrecurencies.head(3)","b9643bed":"# Group by customers with sum or mean\ndata = data.groupby(\"customer_unique_id\")\\\n            .agg({\"order_id\": \"nunique\",\n                  \"price\": \"sum\",\n                  \"freight_value\": \"sum\",\n                  \"nb_payment_sequential\": \"mean\", \n                  \"sum_payment_installments\": \"mean\", \n                  \"review_score\": \"mean\",\n                  \"delivery_delta_days\": \"mean\",\n                  \"sale_month\": lambda x:x.value_counts().index[0]})\n\n# Rename columns\ndata = data.rename(columns={\"order_id\": \"nb_orders\",\n                            \"price\": \"total_spend\",\n                            \"freight_value\": \"total_freight\",\n                            \"nb_payment_sequential\": \"mean_payment_sequential\",\n                            \"sum_payment_installments\": \"mean_payment_installments\",\n                            \"review_score\": \"mean_review_score\",\n                            \"delivery_delta_days\": \"mean_delivery_days\",\n                            \"sale_month\": \"favorite_sale_month\"})\n\n# Merge with other calculated features\ndata = pd.merge(data, categories_customers,\n                how=\"left\",\n                on=\"customer_unique_id\")\n\ndata = pd.merge(data, products_per_order,\n                how=\"left\",\n                on=\"customer_unique_id\")\\\n        .rename(columns={\"order_item_id\": \"mean_nb_items\"})\n\ndata = pd.merge(data, recurencies,\n                how=\"left\",\n                on=\"customer_unique_id\")\n\ndata.head(3)","4db67220":"data[\"order_total_delay\"] = data[\"order_total_delay\"] \/ data[\"nb_orders\"]\ndata = data.rename(columns={\"order_total_delay\": \"order_mean_delay\"})","c2b538fb":"data[\"freight_ratio\"] = round(data[\"total_freight\"] \/ (data[\"total_spend\"] + data[\"total_freight\"]),2)\ndata[\"mean_price_order\"] = round(data[\"total_spend\"] \/ data[\"nb_orders\"],2)\ndata[\"total_spend\"] = (data[\"total_spend\"] + data[\"total_freight\"])\ndata.drop(\"total_freight\", axis=1, inplace=True)","e354b2ff":"customers.drop(\"customer_id\", axis=1, inplace=True)\n# Select the most frequents values for each customer\ncustomers_info = customers.groupby(\"customer_unique_id\").agg(lambda x:x.value_counts().index[0])\ndata = pd.merge(data, customers_info,\n                how=\"left\",\n                on=\"customer_unique_id\")","b6e039d5":"data.head(3)","72b80810":"data.info()","ac0a5312":"# Find features to fill and fillna with mode\nfeatures_to_fill = data.isnull().sum()\nfeatures_to_fill = list(features_to_fill[features_to_fill.values > 0].index)\n\nfor f in features_to_fill:\n    data[f] = data[f].fillna(data[f].mode()[0])\n    print(f, data[f].mode()[0])","4d033bfd":"data.describe()","46af5054":"data[data[\"mean_price_order\"] == data[\"mean_price_order\"].max()]","e2efccd0":"fig = plt.figure(figsize=(12, 8))\nsns.scatterplot(data=data, y=\"mean_price_order\", x=\"mean_nb_items\",\n                color=\"#00d994\", alpha=0.7)\nplt.title(f\"R\u00e9partition des prix moyen de commandes en fonction du nombre d'articles\\n\",\n          fontdict=font_title, fontsize=16)\nplt.show()","138b7582":"data[data[\"mean_nb_items\"] > 20]","38055130":"data[\"customer_state\"].unique()","47d6b2ea":"wiki_url = \"https:\/\/en.wikipedia.org\/wiki\/Federative_units_of_Brazil\"\nstates_table = pd.read_html(wiki_url)[1].set_index(\"Code\")\nstates_table.head(3)","b06d5ad0":"data = pd.merge(data.reset_index(), states_table[[\"Flag and name\"]],\n                how=\"left\",\n                left_on=\"customer_state\",\n                right_on=\"Code\")\ndata.drop(\"customer_state\", axis=1, inplace=True)\ndata = data.rename(columns={\"Flag and name\": \"customer_state\"})","5babfe4c":"# Countplot of states repartition\nfig = plt.figure(figsize=(18, 8))\nsns.countplot(data=data, x=\"customer_state\",\n              edgecolor=\"black\",\n              color=\"#00d994\", alpha=0.7)\nplt.xticks(range(0, data[\"customer_state\"].nunique()),\n           data[\"customer_state\"].unique(),\n           rotation=90)\nplt.title(f\"Les \u00e9tats Br\u00e9siliens les plus repr\u00e9sent\u00e9es\\n\",\n          fontdict=font_title)\nplt.show()","b59fd463":"# Boxplots of total spend by state\nfig = plt.figure(figsize=(18,12))\nsns.boxplot(x=\"customer_state\", y=\"total_spend\", \n            data=data[data[\"total_spend\"]<500])\nplt.xticks(rotation=90)\nplt.show()","422e874a":"state_location = geolocation.groupby(\"geolocation_state\").mean()\nstate_location = pd.merge(states_table[[\"Flag and name\"]].reset_index(), \n                          state_location, \n                          right_on=\"geolocation_state\", \n                          left_on=\"Code\", \n                          how=\"left\")\nstate_location = state_location[[\"Flag and name\", \"geolocation_lat\", \"geolocation_lng\"]]\n\n# Olist location\nolist_lat = -25.43045\nolist_lon = -49.29207","dec0c30c":"def haversine_distance(lat1, lng1, lat2, lng2, degrees=True):\n    r = 3956 # rayon de la Terre en miles\n    \n    if degrees:\n        lat1, lng1, lat2, lng2 = map(radians, [lat1, lng1, lat2, lng2])\n    \n    # Formule Haversine\n    dlng = lng2 - lng1 \n    dlat = lat2 - lat1 \n    a = sin(dlat\/2)**2 + cos(lat1) * cos(lat2) * sin(dlng\/2)**2\n    d = 2 * r * asin(sqrt(a))  \n\n    return d","664b987b":"# Haversine distance between centre state and Olist office\nstate_location['harvesine_distance'] = [haversine_distance(olist_lat, olist_lon, x, y) \n                              for x, y in zip(state_location.geolocation_lat, \n                                              state_location.geolocation_lng)]","df6542ca":"data = pd.merge(data, state_location[[\"Flag and name\", \"harvesine_distance\"]],\n         how=\"left\",\n         left_on=\"customer_state\",\n         right_on=\"Flag and name\")\ndata.drop(\"index\", axis=1, inplace=True)\ndata.set_index(\"customer_unique_id\", inplace=True)\ndata.head(3)","43e6474b":"corr = data.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nfig, ax = plt.subplots(figsize=(15,15))\nax = sns.heatmap(corr, annot=True,\n                 vmin=-1, vmax=1,\n                 fmt=\".2f\", annot_kws={'size':8}, \n                 mask=mask, \n                 center=0, \n                 cmap=\"coolwarm\")\nplt.title(f\"Heatmap des corr\u00e9lations lin\u00e9aires\\n\", \n          fontdict=font_title)\nplt.show()","bfd7a78b":"data.to_csv(\"olist-customers-segmentation.csv\")","54770d5c":"Autre variable \u00e0 cr\u00e9er, la cat\u00e9gorie de produit de niveau 1. En effet, le jeu de donn\u00e9es compte plus de 70 cat\u00e9gories diff\u00e9rentes *(ce qui peut poser probl\u00e8me pour un encodage lors des preprocessing)*. Nous allons donc devoir regrouper plusieurs de ces cat\u00e9gorie dans une cat\u00e9gorie de niveau sup\u00e9rieur. \n\nPour cela, nous allons nous baser sur les cat\u00e9gories principales des sites de vente en ligne en 2017, disponibles sur le site [http:\/\/statista.com](http:\/\/statista.com\/statistics\/311406\/us-online-shopping-categories-gender\/) :\n- Fashion, clothing and accessories\n- Health and Beauty\n- Toys and baby equipment\n- Books, CDs and other physical media\n- Groceries, food and drink\n- Technology (including phones and computers)\n- Home and furniture\n- Flowers and gifts\n- Other\n- et nous ajoutons la cat\u00e9gorie sport\n\nNous allons devoir les attribuer manuellement :","fcf282da":"On remarque un pic anormal autour de Novembre \/ D\u00e9cembre 2017 *(ce qui peut \u00eatre un pic correspondant aux cadeaux de fin d'ann\u00e9e)* ainsi qu'un plateau sans commandes entre Octobre 2016 et Janvier 2017.\n\nNous allons **modifier les types de donn\u00e9es** en datetime pour les colonnes temporelles.","c065b2ce":"Nous conserverons les lignes typ\u00e9es **\"delivered\"**.","92338259":"<div style=\"font-size:32px; text-align:center; color:#2941ec;\"><b>Segmentation des clients du site E-Commerce Olist<\/b><\/div>\n    \n<hr style=\"text-align:center; width:50%;\" \/>\nOlist souhaite obtenir une segmentation de ses clients utilisable au quotidien par leur \u00e9quipe marketing dans leurs campagnes de communication.\n\nL'objectif est de comprendre les diff\u00e9rents types d'utilisateurs gr\u00e2ce \u00e0 leur comportement et \u00e0 leurs **donn\u00e9es personnelles anonymis\u00e9es**.\n\nNous allons donc fournir ici une description actionable de la segmentation et de sa logique sous-jacente pour une utilisation optimale. Nous devrons \u00e9galement fournir une analyse de la stabilit\u00e9 des segments au cours du temps *(dans le but d'\u00e9tablir un contrat de maintenance)*.\n\nNous utilisererons donc des **m\u00e9thodes non supervis\u00e9es** pour regrouper ensemble des clients de profils similaires.\n<hr style=\"text-align:center; width:50%\"\/>\n\n# <font color=\"#476bff\" id=\"section_1\">Sommaire<\/font>\n1. [Description des donn\u00e9es](#section_1)     \n    1.1. [Chargement des datasets](#section_1_1)     \n    1.2. [Cr\u00e9ation des datasets \u00e9tendus](#section_1_2)          \n2. [Feature engineering en fonction du client](#section_2)     \n3. [Exploration du dataset client](#section_3)","d5dfd99e":"A pr\u00e9sent, nous allons calculer le **nombre de jours \u00e9coul\u00e9s entre la premi\u00e8re et la derni\u00e8re commande**. Nous ram\u00e8nerons ensuite ce d\u00e9lai au nombre de commande du client. ","1f8bdc29":"On remarque que 80% des paiements environ sont r\u00e9alis\u00e9s en carte bancaire. Nous ne prendrons donc pas en consid\u00e9ration cette variable dans nos explorations.\n\nPour les **avis clients**, nous allons \u00e9galement cr\u00e9er une nouvelle variable qui indiquera seulement si **oui ou non la commande a \u00e9t\u00e9 not\u00e9e *(True or False)*** et une seconde variable qui reprendra la **note attribu\u00e9e**.","e72793e2":"et enfin **cr\u00e9er le dataset global en r\u00e9alisant la jointure avec les produits \/ cat\u00e9gories** :","1ab5dbe7":"### Cr\u00e9ation du dataset clients :","3bd2956b":"![banniere](http:\/\/mf-data-science.fr\/images\/projects\/banniere.jpg)","de9c3aea":"### Commandes et clients\nNous allons regrouper les donn\u00e9es de lignes de commandes, d'ent\u00eates de commandes et de donn\u00e9es clients dans un unique dataframe.","207fdf7e":"# <font color=\"#476bff\" id=\"section_1\">Description des donn\u00e9es<\/font>\n\n## <font color=\"#1ade9e\" id=\"section_1_1\">Chargement des datasets<\/font>\nNous allons charger tous les datasets pour en visualiser les informations principales :\n\n### Les clients","2d1c54a5":"### Les diff\u00e9rents \u00e9tats du fichier client :\nIci, nous allons regader d'o\u00f9 viennent les clients et si cette localisation a un impact sur les ventes.","b15aa5b6":"# <font color=\"#476bff\" id=\"section_2\">Feature engineering en fonction du client<\/font>\n\nMaintenant que nous avons notre dataset \u00e9tendu, nous allons **centrer les donn\u00e9es obtenues sur le client** et non sur les commandes en cr\u00e9ant de nouvelles variables. Comme nous l'avons vu pr\u00e9c\u00e9dement, l'identifiant unique du client est contenu dans la variable `customer_unique_id`.\n\nCommen\u00e7ons par cr\u00e9er une variable contenant le **d\u00e9lai le livraison de chaque commande** (et suppression de la variable `order_delivered_customer_date`) :","9b7723e5":"Le fichier compte plus d'un million de lignes et pas de valeurs nulles. Ce fichier est **li\u00e9 au fichier clients** gr\u00e2ce \u00e0 la cl\u00e9 `geolocation_zip_code_prefix`. Regardons la description du fichier pour avoir un aper\u00e7u des \u00e9tendues de Latitudes et Longitudes :","98972874":"Enfin, nous allons ajouter les donn\u00e9es de localisation des clients :","54277e01":"La majeure partie des clients n'ont pass\u00e9 qu'une seule commande. Il sera donc compliqu\u00e9 d'\u00e9tablir un classement de leur cat\u00e9gorie produit pr\u00e9f\u00e9r\u00e9e. Nous allons donc **cr\u00e9er une variable par cat\u00e9gorie produit pour y dispatcher le nombre de produits achet\u00e9s sur les commandes pass\u00e9es**.      \nEnsuite, nous calculerons le **ratio du nombre de produits par cat\u00e9gorie sur le nombre de produits total** achet\u00e9 par le client.","239d6081":"Ce fichier regroupe les **ent\u00eates de commandes**, identifi\u00e9es par un `order_id` unique et rattach\u00e9 \u00e0 un client par le `customer_id`.","d409534f":"On remarque les plus gros \u00e9cart sur les donn\u00e9es mensuelles. V\u00e9rifions les variances de chiffre d'affaire sur les mois de l'ann\u00e9es","fa7a22a6":"Les variables importantes du dataset :\n- ***customer_id*** : Cl\u00e9 dans le dataset des commandes\n- ***customer_unique_id*** : Identifiant unique du client\n- ***customer_state*** : Etat du client","c669465d":"### Corr\u00e9lations :\nNous allons \u00e0 pr\u00e9sent regarder s'il existe des **corr\u00e9lations lin\u00e9aires** fortes dans le jeu de donn\u00e9es :","f4c6f221":"Les cat\u00e9gories traduites et les produits sont li\u00e9s par la variable `product_category_name`.\nLes vendeurs n'\u00e9tant pas l'objet de cette analyse, le dataset correspondant sera ici ignor\u00e9.\n\n## <font color=\"#1ade9e\" id=\"section_1_2\">Cr\u00e9ation des datasets \u00e9tendus<\/font>\n\n\n### Produits et cat\u00e9gories\nNous allons \u00e0 pr\u00e9sent cr\u00e9er des dataset plus complets en r\u00e9alisant des **jointures sur les produits et cat\u00e9gories** dans un premier temps, tout en **supprimant les variables qui seront inutiles dans notre RFM** :","e5e935a5":"Pour le dataset des **paiements, vous allons cr\u00e9er de nouvelles variables** \u00e0 savoir :\n- Le nombre de moyens de paiement diff\u00e9rents utilis\u00e9s sur la commande.\n- Le nombre d'\u00e9ch\u00e9ances totales de la commande.","3f5f0631":"On peut voir \u00e9galement dans cette description qu'une commande est chiffr\u00e9e \u00e0 plus de 13 000 dollars. Nous allons v\u00e9rifier cette commande atypique :","415b98c8":"Seulement 3 variables contiennent des valeurs nulles. Nous allons donc les compl\u00e9ter par les valeurs les plus fr\u00e9quentes :","9d35f43c":"Ce dataset porte sur les **avis clients li\u00e9s \u00e0 une commande**. Il comporte une note et un commentaire.\n\n### Les produits","5b4296ed":"Les m\u00e9dianes et variances restent tr\u00e8s proche sur les diff\u00e9rents mois de l'ann\u00e9e. Nous int\u00e9grerons tout de m\u00eame cette donn\u00e9e pour le moment mais il sera judicieux de regarder l'\u00e9volution de cette distribution pour l'int\u00e9grer dans le cadre du contrat de maintenance.","2fa995b7":"- ***payment_sequential*** : Si plusieurs m\u00e9thodes de paiement appliqu\u00e9es, une ligne est cr\u00e9e par moyen utulis\u00e9.\n- ***payment_installments*** : Nombre de versements choisis","621e25c8":"Ce dataset regroupe les cat\u00e9gories de produits ainsi que diverses caract\u00e9ristiques de dimensions et poids.","791202f6":"Comme \u00e9nnonc\u00e9 pr\u00e9c\u00e9dement, nous allons ramener le d\u00e9lais des commandes client en fonction du nombre de commandes pour obtenir le **d\u00e9lai moyen entre plusieurs achats** :","0f475371":"Nous pouvons \u00e0 pr\u00e9sent projeter la r\u00e9partion des notes attribu\u00e9es aux commandes du site :","a1ebe503":"Regardons les diff\u00e9rents statuts de commande pour **ne conserver que les commandes qui ne sont pas \"en cours\"**.","0e80ca03":"Cette commande contient 8 articles technologiques pour un montant de 13 000 dollars. C'est atypique certes, mais ce n'est pas pour autant une donn\u00e9e ab\u00e9rrante. Nous la conservons donc.\n\nRegardons la dispersion des montants moyen de commandes en fonction du nombre d'articles pour tenter de rep\u00e9rer d'autres anomalies :","40468aa5":"On remarque que le prix total est tr\u00e8s fortement corr\u00e9l\u00e9 au prix moyen par commande (idem pour le nombre d'articles moyen et le nombre d'articles total). Cela est d\u00fb au fait que la majorit\u00e9 des clients n'ont command\u00e9 qu'une seule fois. Cette variable sera donc moins corr\u00e9l\u00e9e au fil du temps.\n\n### Export du dataset final pour classification non-supervis\u00e9e\nA partir de toutes ces features, nous allons mod\u00e9liser les donn\u00e9es pour une classification non-supervis\u00e9e avec plusieurs mod\u00e8les. Ces \u00e9tapes seront r\u00e9alis\u00e9es dans un Notebook Kaggle s\u00e9par\u00e9 : [E-Commerce Customers Segmentation](https:\/\/www.kaggle.com\/michaelfumery\/e-commerce-customers-segmentation)","96fe1a65":"Une commande de plus de 20 articles est affich\u00e9e pour une somme de pr\u00eat de 0 :","26abf1ed":"# <font color=\"#476bff\" id=\"section_3\">Exploration du dataset client<\/font>\n\nNous avons \u00e0 pr\u00e9sent notre dataset compl\u00e9t\u00e9 pour la segmentation de la client\u00e8le. Nous allons faire une rapide exploration de ces donn\u00e9es :","94a52f99":"Nous pouvons \u00e9galement v\u00e9rifier l'\u00e9volution du nombre de commandes pass\u00e9es par jour sur le site E-Commerce :","b621e388":"Variables importantes du dataset regroupant les **lignes de commande** :\n- ***order_id*** : Identifiant unique de la commande\n- ***order_item_id*** : Identifiant s\u00e9quentiel des items d'une m\u00eame commande *(lignes de commande)*\n- ***product_id*** : Identifiant unique du produit\n- ***seller_id*** : Identifiant unique du vendeur\n- ***price*** : Prix de la ligne de commande\n- ***freight_value*** : Co\u00fbt de fret de la ligne (Si plusieurs lignes, le co\u00fbt de fret est r\u00e9parti entre toutes les lignes) ","b661868f":"Nous pouvons \u00e9galement regarder la **r\u00e9partition du nombre de commandes par mois, jour de la semaine ou heure de la journ\u00e9e** :","903640d4":"Les codes \u00e9tats ne sont pas tr\u00e8s parlant. Nous allons donc utiliser Wikipedia pour **modifier les codes \u00e9tats par leur nom** :","df82a3b9":"Nous allons ensuite calculer le **nombre moyen d'articles par commande** pour chaque client :","b567bf16":"Le dataset ne comporte pas de valeurs nulles.\n\n### Les donn\u00e9es de g\u00e9olocalisation","c1a3b5a9":"On voit dans ces boxplots que l'\u00e9tat du client a un impact faible sur les variances et m\u00e9dianes des d\u00e9penses sur le site.\n\nAfin d'utiliser une variable de localisation encodable sans impact n\u00e9gatif sur nos mod\u00e9lisation, nous allons **calculer la distance Haversine entre l'\u00e9tat du client *(moyenne des latitudes et longitudes de l'\u00e9tat)* et le si\u00e8ge de Olist** :","997c91be":"### Les commandes clients","d3fa0e6e":"Nous allons \u00e9galement **v\u00e9rifier la r\u00e9partition des moyens de paiement utilis\u00e9s** pour d\u00e9cider si cette information est importante ou non dans les analyses :","52615f32":"Il nous reste \u00e0 pr\u00e9sent \u00e0 calculer quelques derni\u00e8res variables plus repr\u00e9sentatives :\n- **Le ratio fret \/ total commande**\n- **le prix moyen par commande**","d336011b":"Nous pouvons visualiser la **r\u00e9partition des diverses cat\u00e9gories de produits** :","1032f6aa":"Cette fois encore, c'est une valeur atypique mais pas ab\u00e9rrante.","98c503ef":"Il nous reste \u00e0 r\u00e9aliser la **jointure sur le fichier clients** :","9461a505":"A pr\u00e9sent, nous pouvons regarder la r\u00e9partition du **nombre de commandes moyen par client** :"}}