{"cell_type":{"8258b94e":"code","9670bff0":"code","f301aa55":"code","46988f95":"code","6ba188c4":"code","066883f8":"code","58f7cc41":"code","39a81a4d":"code","19a44abc":"code","f75b2427":"code","d7e569aa":"code","f8628b01":"code","caf7fed8":"code","dd0b029d":"code","286de618":"code","60507065":"code","00349f07":"code","f8fe2f9c":"code","a1d70410":"code","c6ac52d9":"code","1c5c3881":"code","e67607f8":"code","a68f1b0d":"code","a7c9d6b5":"code","6664f8a2":"code","eadaef0a":"code","55d27b91":"code","7fdf55b4":"code","db559a94":"code","36b433a9":"code","71100dfd":"code","02fc4108":"code","5c25bbb6":"markdown","1e5a90f7":"markdown","fb392a6d":"markdown","b1a9d1b6":"markdown","a3b67069":"markdown","a5d621e5":"markdown","175e3e43":"markdown","78dc441f":"markdown","00eded27":"markdown","c5564ffb":"markdown","b57b232d":"markdown","7c5253a8":"markdown","ea1b4ad2":"markdown","e69e7fc8":"markdown","e63b8348":"markdown","93106370":"markdown","2d0728b8":"markdown","0f6ee3cb":"markdown","d18f5482":"markdown","f585f196":"markdown","1ff6457a":"markdown","99653aa8":"markdown","98dbda77":"markdown","2a2ad817":"markdown","5b4a8a33":"markdown","41cf581c":"markdown","15387d94":"markdown","4130e97b":"markdown","13dc6ce3":"markdown"},"source":{"8258b94e":"import numpy as np\nimport pandas as pd \nimport os\n\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\nimport warnings\nwarnings.filterwarnings('ignore')","9670bff0":"df_episodes = pd.read_csv('\/kaggle\/input\/chai-time-data-science\/Episodes.csv')   #  Episodes ","f301aa55":"df_users = pd.read_csv('\/kaggle\/input\/meta-kaggle\/Users.csv')   # User meta data \ndf_ach = pd.read_csv('\/kaggle\/input\/meta-kaggle\/UserAchievements.csv') # User Achievements \/ levels  dataframe","46988f95":"df_users.head()","6ba188c4":"df_episodes  = pd.DataFrame(df_episodes[~df_episodes['heroes_kaggle_username'].isna()])","066883f8":"df_episodes =  df_episodes[df_episodes['heroes_kaggle_username'] != 'dott1718 | philippsinger' ]","58f7cc41":"df_episodes[['heroes']].head(10)","39a81a4d":"print(\"We have {} heroes who have a kaggle account\".format(len(df_episodes)))","19a44abc":"df_episodes['kaggle_join_date'] = df_episodes.heroes_kaggle_username.apply(lambda x : df_users[df_users['UserName'] == x].iloc[0,3])","f75b2427":"df_episodes[['heroes' ,'kaggle_join_date']].head()","d7e569aa":"df_episodes['kaggle_userid'] = df_episodes.heroes_kaggle_username.apply(lambda x : df_users[df_users['UserName'] == x].iloc[0,0])","f8628b01":"df_episodes[['heroes' ,'kaggle_join_date' , 'kaggle_userid']].head(10)","caf7fed8":"df_ach.head()","dd0b029d":"trunc = df_ach[df_ach.UserId.isin(df_episodes['kaggle_userid'])]\ntrunc.head()","286de618":"df_episodes['high_comp'] = df_episodes.kaggle_userid.apply(lambda x : trunc[(trunc['UserId'] == x) & (trunc['AchievementType']=='Competitions')].iloc[0,7])\ndf_episodes['high_disc'] = df_episodes.kaggle_userid.apply(lambda x : trunc[(trunc['UserId'] == x) & (trunc['AchievementType']=='Scripts')].iloc[0,7])\ndf_episodes['high_scripts'] = df_episodes.kaggle_userid.apply(lambda x : trunc[(trunc['UserId'] == x) & (trunc['AchievementType']=='Discussion')].iloc[0,7])","60507065":"df_episodes[['heroes' ,'kaggle_join_date' , 'kaggle_userid' , 'high_comp', 'high_disc', 'high_scripts']].head()","00349f07":"from datetime import date\nfrom datetime import datetime\n\n#function to return date from the date of joining kaggle\ndef get_months(str_d1):\n    str_d2 = '07\/12\/2020'  # hardcode some date around  last month ( later take this as the date of interview)\n    f_date = datetime.strptime(str_d1, '%m\/%d\/%Y')\n    l_date = datetime.strptime(str_d2, '%m\/%d\/%Y')\n    delta = l_date - f_date\n    return  delta.days\/30\n\n#get_months(df_episodes['kaggle_join_date'].iloc[1])\n\ndf_episodes['df_months_in_kaggle'] = df_episodes['kaggle_join_date'].apply(lambda x :get_months(x))","f8fe2f9c":"df_episodes[['heroes' ,'kaggle_join_date' , 'kaggle_userid' , 'high_comp', 'high_disc', 'high_scripts','df_months_in_kaggle']].head()","a1d70410":"#Building the final df\n\ndf_got = df_episodes[['heroes' ,'kaggle_join_date' , 'kaggle_userid' , 'high_comp', 'high_disc', 'high_scripts','df_months_in_kaggle']]\ndf_got[['youtube_views','youtube_watch_hours']] = df_episodes[['youtube_views','youtube_watch_hours']]","c6ac52d9":"df_got.head()","1c5c3881":"#make a copy as back up \ndf_got2 = df_got.copy()","e67607f8":"from sklearn import preprocessing\nscaler = preprocessing.MinMaxScaler()\n\ndf_got[['df_months_in_kaggle', 'youtube_views','high_comp','high_scripts','high_disc']] = \\\nscaler.fit_transform(df_got[['df_months_in_kaggle', 'youtube_views','high_comp','high_scripts','high_disc']])","a68f1b0d":"df_got.isna().sum()","a7c9d6b5":"\n# If the value is NaN , convert it into the highest number\ndf_got['high_comp'][df_got.high_comp.isna()] = df_got.high_comp.max()\ndf_got['high_disc'][df_got.high_disc.isna()] = df_got.high_disc.max()\ndf_got['high_scripts'][df_got.high_scripts.isna()] =df_got.high_scripts.max()","6664f8a2":"df_got.head()","eadaef0a":"import seaborn as sns\nsns.set(style=\"white\")\n\nsns.relplot(data=df_got , x=\"df_months_in_kaggle\", y=\"high_comp\", #hue=\"strength\" ,\n            #size=\"youtube_watch_hours\",\n            size=\"youtube_watch_hours\",\n            sizes=(0, 1000), alpha=.4, palette=\"muted\",\n            height=6)","55d27b91":"# Remove Jeremy's show - its an outlier outlier record \ndf_got = df_got[~(df_got.youtube_watch_hours >700)]\n\nfrom matplotlib import pyplot as plt \nx= df_got.df_months_in_kaggle\ny= df_got.high_comp\nz = df_got.youtube_watch_hours\n\ncmap = sns.cubehelix_palette(rot=-1,as_cmap=True)\n#cmap = sns.cubehelix_palette(rot=0.5,as_cmap=True)\nf, ax = plt.subplots()\npoints = ax.scatter( x , y, c=z, s=80, cmap=cmap)\nf.colorbar(points)\nplt.xlabel(\"months_in_kaggle\")\nplt.ylabel(\"comp_highestrank\")\nplt.show();","7fdf55b4":"df_got['best_3'] = df_got.apply(lambda x:min(x['high_comp'],x['high_scripts'],x['high_disc']),axis = 1)\ndf_got.head()","db559a94":"df_got[(df_got['high_disc'] < 0.06)].sort_values(by='high_disc',ascending = False).head(1)","36b433a9":"df_got[(df_got['df_months_in_kaggle'] > 0.5)].sort_values(by='df_months_in_kaggle',ascending = True).head()","71100dfd":"df_ach[(df_ach['UserId'] ==113389) & (df_ach['AchievementType'] =='Discussion') ] #Get the user id from the above output ( todo:make it automated )","02fc4108":"import seaborn as sns\nsns.set(style=\"white\")\n\nsns.relplot(data=df_got , x=\"df_months_in_kaggle\", y=\"high_scripts\", #hue=\"strength\" ,\n            #size=\"youtube_watch_hours\",\n            size=\"youtube_watch_hours\",\n            sizes=(0, 1000), alpha=.4, palette=\"muted\",\n            height=6)\nplt.axvspan(.3, .9, color='blue', alpha=0.05)\nplt.axhspan(0, .08, color='red', alpha=0.05)\nplt.show();","5c25bbb6":"### 3.Get the date when the users joined kaggle\n( you can make a sub-set dataset from the df_users ( to make searchin faster - Iam just lazy and its just 2 operations we are doing )","1e5a90f7":"#### 5.a )  Create a sub-dataset of the achievement dataset for only the users  we really need ( in this case, the heroes)","fb392a6d":"### First level Conclusions on how to use the next Kaggler for interview - \nThe intersection of the red and the blue bands ( in the above graph - currently visually detemined ) should be a good sweet-spot to filter potential kagglers to chose for interviews\nThis translates to 2 filters - Age in Kaggle and best ranking ( either in scripts \/ discussions \/ kernels )\n( Codes to determine these numbers are hidden in the notebook - unhide them to see )\n### Duration in kaggle - \nPotential high-youtube-view heroes could be those kagglers who have joined kaggle before <font color= 'red'>  2016 January <\/font>!\n### Ranking - \n( Codes to determine these numbers are hidden in the notebook - unhide them to see )\n* His \/ Her Best Best Competition ranking is atleast or better than <font color= 'red'>288 <\/font> (or around)\n* His \/ Her Best Script ranking is atleast or better than<font color= 'red'> 36 <\/font> ( or around )\n* His \/ Her Best Discusssion ranking is  atleast <font color= 'red'>18 <\/font> or better ( or around )\n\nSome good candidates for the next round of interviews  ( [based on least-cosine distance between top heroes and pool of kaggle users - link here ](https:\/\/www.kaggle.com\/tomtillo\/cosine-distance-between-top-heroes) )\n\n*     cdeotte ( https:\/\/www.kaggle.com\/cdeotte )\n*     triskelion ( https:\/\/www.kaggle.com\/triskelion )\n*     python10pm ( https:\/\/www.kaggle.com\/python10pm )\n*     roshansharma ( https:\/\/www.kaggle.com\/roshansharma )\n*     caesarlupum ( https:\/\/www.kaggle.com\/caesarlupum )\n*     mpwolke ( https:\/\/www.kaggle.com\/mpwolke )\n*     upadorprofzs ( https:\/\/www.kaggle.com\/upadorprofzs )\n*     tpthegreat ( https:\/\/www.kaggle.com\/tpthegreat )\n","b1a9d1b6":"### 2. Filter the names where the heroes have their kaggle- usernames populated\n( We ignore the others heroes for now )","a3b67069":"Dataset looks like this now ...","a5d621e5":"This is how the final dataset looks like ","175e3e43":"## How does your ranking on Kaggle or just being on kaggle for a long time affect the popularity for the CTDS show on youtube ? \n\n\n* Assumption : the high count of youtube-views \/ youtube-watchhours can be a proxy for popularity on the show\n* You can extend this analysis to other podcast media as well\n\n\nDataset - Episodes.csv <br>\nExternal Sources : Meta Kaggle Dataset\n\nBackground for this kernel : https:\/\/www.kaggle.com\/rohanrao\/chai-time-data-science\/discussion\/166575","78dc441f":"See what is populated so far ","00eded27":"Our dataframe looks like this now ... ","c5564ffb":"### Further improvements\n**This is a POC, this should be extended .**\n1. Add more attributes ( other than just  3 kaggle rank \/ age in kaggle ) \n2. Give weightages to ranks ( eg : rank_competition > rank_kernels  > rank_discussion )\n2. Try expanding the list from top-3 matches to top-10 matches \n3. Change the filter criteria \n4. Hypothesis - Age in kaggle does not even have an effect ( Bet: it is highly correlated to the competition rank )","b57b232d":"### Hypothesis, approach & Steps \n* We look at the heroes who have a kaggle account \n* Get their ranks for Competitions , Scripts and Discussions \n* We also gather how long they have been on kaggle ( oldies and new-comers ? )\n* See if any of these are factors determine their popularity on youtube . \n* Scale the features \n* Build a pool of potential candidates from kaggle ( based on the above factors )\n* Pick a few top heroes ( from CTDS ) who had a good youtube viewership \n* Draw a cosine distance matrix ( comparing the feature-vectors of the heroes and the entire kaggle-pool ) \n( For calculation on least cosine distance  - \nhttps:\/\/www.kaggle.com\/tomtillo\/cosine-distance-between-top-heroes )\n* sort and get the least distance measure\n","7c5253a8":"### Alternate analysis -\nGet the best ranking of the three categories - Competitions, Scripts , Kernels","ea1b4ad2":"### Higest Competition Ranking v\/s Months on Kaggle v\/s Youtube watch hours \n\nYou can do combinations of these ( script \/ discussion \/ youtube \/ other podcasts ) to get more analysis done ( Currently not done here )","e69e7fc8":"Temp cleaning -  For now, remove the row containing 'dott1718 | philippsinger' ( purely for the ease of execution - and iam lazy ) ( Add later, maybe ?? ) <br>\n( Or just put **dott1718** as a representative )","e63b8348":"## Lets get started. ","93106370":"### outlier removed ( darker colors represent more youtube views )","2d0728b8":"See what is populated so far .","0f6ee3cb":"This is what we have populated so far ","d18f5482":"### 6. Scale the data using Min-Max Scaler","f585f196":"### 4. Get the kaggle user-id ( kaggle user-id is a numeric number like - 1571785 )","1ff6457a":"### 6. Create the truncated df with only the columns you need","99653aa8":"Note: There are some NaN values , because some heroes are Unranked in either competitions , scripts or Discussions <br>\nIf they are NaN , assign them a relative high rank. ","98dbda77":"### Observations \nNote :  Bigger circles means more youtube viewership\n* The heroes who have been on kaggle for a long time - scaled here ( between 0 - 1 ) ( 0 ~ 2020 , 0.5 ~ 2014 , 1 ~ 2010 onwards ) and who have a lower ranking , are more popular on CTDS shows ( here - youtube )\n* beware of causality - the variables - ranking and time on kaggle are related but not the cause. It mostly looks like a residual effect.\n\n","2a2ad817":"### Summary of results \n### Here are some users you should consider interviewing next -  (these are algorithm generated ) \n( Based on least cosine-distance between the top-heroes who had most youtube views ) \n\n\n*     cdeotte ( https:\/\/www.kaggle.com\/cdeotte )\n*     triskelion ( https:\/\/www.kaggle.com\/triskelion )\n*     python10pm ( https:\/\/www.kaggle.com\/python10pm )\n*     roshansharma ( https:\/\/www.kaggle.com\/roshansharma )\n*     caesarlupum ( https:\/\/www.kaggle.com\/caesarlupum )\n*     mpwolke ( https:\/\/www.kaggle.com\/mpwolke )\n*     upadorprofzs ( https:\/\/www.kaggle.com\/upadorprofzs )\n*     tpthegreat ( https:\/\/www.kaggle.com\/tpthegreat )\n","5b4a8a33":"### 6. Create the time line ( from the time they joined kaggle ) - into Months [](http:\/\/)","41cf581c":"### 1. Add the datafiles\n\n* meta-kaggle\/Users.csv\n* meta-kaggle\/UserAchievements.csv \n\nThese files are publically available datasets ( MetaKaggle ) and maintained by Kaggle - <br>\nSearch for them in the datasets. We will explore these files below.","15387d94":"### The scaled dataframe looks like this ","4130e97b":"### 5.Pull details from  The Achievements dataset\n![](http:\/\/)The achievements dataset contains the list of all the kagglers and their points \/rankings <br>\nIt looks like this","13dc6ce3":"#### 5.b ) Add  additional columns ( highest rank on Competitions, scripts and discussions )"}}