{"cell_type":{"a82fbae8":"code","e1042ecf":"code","1b02e65c":"code","c428db1c":"code","b2dcb785":"code","cd9ae7ba":"code","22749b1e":"code","461bbd65":"code","02358977":"code","220a739a":"code","dcc3e40b":"code","4956888f":"code","9b761b29":"code","56e17482":"code","58f1b1a6":"code","3d282879":"code","60d90f21":"code","b1b88851":"code","be9cc7f8":"code","d142aa62":"code","17a21e31":"code","6ae03335":"code","bd23f815":"code","5c0c12e9":"code","db7acf4d":"code","6a21d498":"code","aee621c9":"code","c904aee0":"code","c7ad5235":"code","969472a6":"code","81b7710d":"code","63e9aa73":"code","99ad84c8":"code","a5fe97b9":"code","6d8370c6":"code","db0b5940":"code","16be7ee4":"code","8ddf9034":"code","ee6057b7":"code","b0ab0f5e":"code","1f98c117":"code","702b0ac1":"code","61232639":"code","d62b351a":"code","0687a728":"code","2850d084":"code","a4f82ff0":"code","86b40859":"code","19b82c42":"code","2da81e2d":"code","40781241":"code","917fa432":"code","e2a453e1":"code","7c034365":"code","0dca892c":"code","a9b3a657":"code","d84ca3df":"code","124578fa":"code","8ceafcb1":"code","cb500323":"code","816b2427":"code","156b99f7":"code","ad4cc461":"code","dff1f699":"code","98f39ed5":"code","8a4dd2d6":"code","5341b6e1":"code","0559a84c":"code","f0810485":"code","0d5d9fa9":"code","c045f89f":"code","bde5a4c9":"code","08076c70":"code","caea6c92":"code","f9d768a1":"code","c173a9e5":"code","cfc31aa6":"code","438c8598":"code","646a50d9":"code","232117c4":"code","c77dab85":"code","74176262":"code","dfb28ce4":"code","5ab528d5":"code","bffd2c4c":"code","957987ba":"code","9cc63107":"code","a8545fb7":"code","d1c004c5":"code","1adaf8f5":"code","007e8318":"code","86a3f85e":"code","6e4311ce":"code","263a9cb9":"code","3e98d956":"code","e4eee45c":"code","56559942":"code","ca043c32":"code","6727dd2a":"code","3593a459":"code","e80ae550":"markdown","7093c1cc":"markdown","bb5927bd":"markdown","aca16966":"markdown","3166c816":"markdown","f16721f1":"markdown","38252ed1":"markdown","846c1dfe":"markdown","c3d70449":"markdown","6f95f9ef":"markdown","67e3fee5":"markdown","a6d06201":"markdown","c8d113e7":"markdown","11cbc60f":"markdown","6e7d6320":"markdown","8c6357b4":"markdown","956a4dce":"markdown","00dc3bf8":"markdown","c1ef590e":"markdown","cb6d777c":"markdown","33cc3d42":"markdown","5bf2d9b1":"markdown","23ff66fb":"markdown","7172967e":"markdown","4e62bc06":"markdown","5070cd3f":"markdown","8e606cfd":"markdown","ec8ab84b":"markdown","988e9a18":"markdown","3dda7dec":"markdown","42ecd7a9":"markdown","763a7990":"markdown","82b59bca":"markdown","86a29879":"markdown","17cbdec6":"markdown","ce025aa0":"markdown","4667867a":"markdown","af791ae9":"markdown","2c396c69":"markdown","eb02c6c5":"markdown","ff4c9b02":"markdown","3f1b2f30":"markdown","d9692127":"markdown","ad0babeb":"markdown","28a3bc89":"markdown","38547756":"markdown","88b4b105":"markdown","8eff9fa1":"markdown","f9e51f9e":"markdown","2e07ebd1":"markdown","2200f734":"markdown","038eb625":"markdown","6a9388f1":"markdown","fae02fac":"markdown","6bc271cf":"markdown","288fe423":"markdown","353cffb9":"markdown","edaec944":"markdown","89044630":"markdown","a9a0ce44":"markdown","e3f6b7e1":"markdown","aaedd571":"markdown","24e2e3cc":"markdown","5f5dce50":"markdown","0b3011ed":"markdown","04824d73":"markdown","c799c23a":"markdown","592699d8":"markdown","3d9f5782":"markdown","77afead1":"markdown","0f7dfa4a":"markdown","e1d61954":"markdown","c8d710b8":"markdown","f044263d":"markdown","a68848bc":"markdown","be4efc46":"markdown","68154814":"markdown","06d09f16":"markdown","244c0f22":"markdown","c44aab65":"markdown","9252da89":"markdown","b9a7969d":"markdown","944e4dc9":"markdown","0f8e022f":"markdown","ef7f68dc":"markdown","ce90c67f":"markdown","f9eda92f":"markdown","91b4d844":"markdown","82fa0204":"markdown","23704510":"markdown","5fb9a482":"markdown","9bd60b19":"markdown","44981fb6":"markdown","c7277c7f":"markdown","d7e4caab":"markdown","47699a1c":"markdown","f8489f33":"markdown","4e681d67":"markdown","61e2d70d":"markdown","fd328efe":"markdown","f7057a5a":"markdown","dd7da340":"markdown","bef7b98f":"markdown","052a7aeb":"markdown","d100fe59":"markdown","59487360":"markdown","c07f4bf7":"markdown","531e6975":"markdown","506a9b6c":"markdown","e6b6b513":"markdown","d56066af":"markdown","5c373a77":"markdown","1caa55fc":"markdown","6ee4bb38":"markdown","9739b6b7":"markdown","9a005d76":"markdown","0bf660f6":"markdown","014b8ba6":"markdown","aa153841":"markdown","3f07b335":"markdown","34f632a6":"markdown","75fcbc96":"markdown","acd004df":"markdown","9db8dfd2":"markdown","155d0a41":"markdown"},"source":{"a82fbae8":"!pip install -q efficientnet\nimport os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport cv2\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot\n%matplotlib inline\nimport sklearn\nimport sklearn.cluster\nimport plotly.graph_objects as go\nimport keras\nfrom sklearn.preprocessing import MultiLabelBinarizer\nimport tensorflow as tf\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras.preprocessing import image\nimport imblearn.over_sampling\nimport warnings\nfrom tqdm.notebook import tqdm\ntqdm.pandas()\n\n\nfrom glob import glob\nimport itertools\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e1042ecf":"IMAGE_PATH = '..\/input\/plant-pathology-2021-fgvc8\/train_images\/'\nTRAIN_PATH = '..\/input\/plant-pathology-2021-fgvc8\/train.csv'\nvalid_path = '..\/input\/plant-pathology-2021-fgvc8\/test_images'\nseed=1994\n\ntrain_data = pd.read_csv(TRAIN_PATH)","1b02e65c":"# useful for getting number of files\nimage_files = glob(IMAGE_PATH + '\/*.jp*g')\nvalid_image_files = glob(valid_path + '\/*\/*.jp*g')","c428db1c":"# useful for getting number of classes\nfolders = glob(TRAIN_PATH + '\/*')","b2dcb785":"# look at an image for fun\nplt.imshow(image.load_img(np.random.choice(image_files)));","cd9ae7ba":"#lets count the instances of each class we have :\n\nfig,ax=plt.subplots(figsize=(16,8))\nsns.countplot(train_data['labels'])\n#rotate labels\nplt.setp(ax.get_xticklabels(),rotation=45)\n\nplt.title('Label counts')","22749b1e":"#converting the labels as multiple labels:\ntrain_data['labels']=train_data['labels'].str.split(' ')\n\nmlb = MultiLabelBinarizer()\n\n# one hot encode labels\nlab=mlb.fit_transform(train_data['labels'])\nlab[:10]","461bbd65":"train_data[:10]","02358977":"#classes for OHE encoded var.\nclasses=mlb.classes_\nclasses","220a739a":"train_data['image']","dcc3e40b":"DF = pd.DataFrame(\n    data=lab,\n    columns=classes\n)\n\nprint(DF.head(),DF.shape)","4956888f":"DF['image'] =  train_data['image']\nprint(DF.head(),DF.shape)","9b761b29":"train_data = DF","56e17482":"#prints a image\n# gets an image to prints\n# returns nothing\ndef show_image(img):\n  fig = plt.imshow(img)\n\n#loads an image and returns it \n# gets the image id of the image we wants to load from the raw images and the shape of the output image\n# returns an image with the shape of image_size\ndef load_image(image_id,image_size=(100,100)):\n    file_path = image_id\n    image = cv2.imread(IMAGE_PATH + file_path,1)\n    image = cv2.resize(image, image_size)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    return image\n\n#loads an image from returns it \n# gets the image id of the image we wants to load, the path to the dictunary and the shape of the output image\n# returns an image with the shape of image_size\ndef load_dif_image(image_id,path,image_size=(100,100)):\n    file_path = image_id \n    image = cv2.imread(path + file_path,1)\n    image = cv2.resize(image, image_size)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    return image\n\n#creat from image objects list a reshaped 4-dimentional array(image_number,row,column,color_channel)\n# get a list of image objects\n# returns a 4-dimentional np array of the same images\ndef images_4d_array(files_list):\n  images_list = [img[np.newaxis, :, :, :3] for img in files_list]\n  images_array = np.vstack(images_list)\n  return (images_array)\n\n# retrive a list of images that fullfil the cond and show up to 9 pics of them. cond is a health situation name name. \n# gets health situation name:'scab','rust','multiple_diseases','healthy'\n# returns a list of images that fullfil the condition, and prints up to 9 images that fullfil them\ndef show_cond(cond):\n  cond_list=train_images[train_data[cond]==1]\n  cols, rows = 3,3  \n  fig, ax = plt.subplots(nrows=rows, ncols=cols, figsize=(15, rows*10\/3))\n  for i in range(cols*rows):\n    if(i>=cond_list.size):\n      break\n    ax[int(i\/cols), int(i%rows)].imshow(cond_list.iloc[i])\n  plt.show()\n  return (cond_list)\n\n# retrive a list of images that fullfil the cond. cond is a health situation name name. \n# gets health situation name:'scab','rust','multiple_diseases','healthy'\n# returns a list of images that fullfil the condition\ndef get_cond(cond):\n  cond_list=train_images[train_data[cond]==1] \n  return (cond_list)\n\n# calculate the avarge per color channel\n# gets a 4-dimensional  array and an int  \n# returns the avarage value of the cells by the 4th dimension channel position \ndef get_average_channel(x, channel):\n    return x[:,:,:,channel].mean(axis = (1, 2)).reshape(-1, 1)\n\n# claculate the avarge per color channel for x\n# gets image 4-dimentional array \n# returns array of \ndef get_channels(x):\n    return np.hstack([get_average_channel(x, i) for i in range(3)])\n\n# reshapes the 4-dimentional array into 2-dimentional array\n# gets a 4-dimentional array\n# returns a 2-dimentional array\ndef get_all_pixels(x):\n    return x.reshape(-1, np.prod(x.shape[1:]))\n\n# merges images to one image\n# gets an 4-dimentional array and the numbers of images to print as number per rows and number of images per row\n# returns an image that is a marge of the other ones\ndef merge_images(image_batch, size = [20, 20]):\n    h,w = image_batch.shape[1], image_batch.shape[2]\n    c = image_batch.shape[3]\n    img = np.zeros((int(h*size[0]), w*size[1], c))\n    for idx, im in enumerate(image_batch):\n        i = idx % size[1]\n        j = idx \/\/ size[1]\n        img[j*h:j*h+h, i*w:i*w+w,:] = im\/255\n    return img\n\n# get the data and creates a numerated classes array\n# gets the images data\n# returns an array of numerated classes\ndef get_target_array(data):\n  targets=[]\n  for index, row in data.drop('image',axis=1).iterrows():\n    if (row[0]==1):\n      targets.append(0)\n    elif (row[1]==1):\n      targets.append(1)\n    elif (row[2]==1):\n      targets.append(2)\n    elif (row[3]==1):\n      targets.append(3)\n    elif (row[4]==1):\n      targets.append(4)\n    elif (row[5]==1):\n      targets.append(5)\n  return (np.array(targets))\n\n\n# get the data and creates a numerated classes array\n# gets the images data\n# returns an array of numerated classes\ndef get_target_array_no_im_id(data):\n  targets=[]\n  for index, row in data.iterrows():\n    if (row[0]==1):\n      targets.append(0)\n    elif (row[1]==1):\n      targets.append(1)\n    elif (row[2]==1):\n      targets.append(2)\n    elif (row[3]==1):\n      targets.append(3)\n    elif (row[4]==1):\n      targets.append(4)\n    elif (row[5]==1):\n      targets.append(5)\n  return (np.array(targets))","58f1b1a6":"n_sample = 1500","3d282879":"#loads all of the images\n# train_images = train_data[\"image\"].progress_apply(load_image, args=((100,100),))\n\n#load a random sample\ntrain_images = train_data[\"image\"].sample(n = n_sample, random_state = seed).progress_apply(load_image)\n\n#Build the dataset of current images\ncurrent_train_data=train_data.loc[train_images.index]\ntargets=get_target_array(current_train_data)","60d90f21":"current_train_data=train_data.loc[train_images.index]\ntargets=lab","b1b88851":"print(train_data.head(),train_data.shape)","be9cc7f8":"scab_list=show_cond('scab') ","d142aa62":"rust_list=show_cond('rust')","17a21e31":"multi_list=show_cond('complex')","6ae03335":"healthy_list=show_cond('healthy')","bd23f815":"frog_eye_list=show_cond('frog_eye_leaf_spot')","5c0c12e9":"powdery_mildew_list=show_cond('powdery_mildew')","db7acf4d":"healthy_array=images_4d_array(healthy_list)\nscab_array=images_4d_array(scab_list)\nmulti_array=images_4d_array(multi_list)\nrust_array=images_4d_array(rust_list)\nfrog_eye_array=images_4d_array(frog_eye_list)\npowdery_mildew_array=images_4d_array(powdery_mildew_list)\n\nprint(healthy_array.shape,scab_array.shape,multi_array.shape,rust_array.shape,frog_eye_array.shape,powdery_mildew_array.shape)","6a21d498":"#print histograms of colors\ndef plot_hist_normed(images, channel, col):\n    vals = images[:,:,:,channel].flatten()\n    matplotlib.pyplot.ylabel(col)\n    matplotlib.pyplot.hist(vals)\n    matplotlib.pyplot.yticks([])\n\n\n#red  \nmatplotlib.pyplot.figure(figsize =(30, 15))\nmatplotlib.pyplot.subplot(3, 6, 1)\nplot_hist_normed(healthy_array, 0, 'red')\nmatplotlib.pyplot.title('healthy leaves')\nmatplotlib.pyplot.subplot(3, 6, 2)\nplot_hist_normed(scab_array, 0, 'red')\nmatplotlib.pyplot.title('scab leaves')\nmatplotlib.pyplot.subplot(3, 6, 3)\nplot_hist_normed(rust_array, 0, 'red')\nmatplotlib.pyplot.title('rust leaves')\nmatplotlib.pyplot.subplot(3, 6, 4)\nplot_hist_normed(multi_array, 0, 'red')\nmatplotlib.pyplot.title('multiple diseases leaves')\nmatplotlib.pyplot.subplot(3, 6, 5)\nplot_hist_normed(powdery_mildew_array, 0, 'red')\nmatplotlib.pyplot.title('powdery_mildew leaves')\nmatplotlib.pyplot.subplot(3, 6, 6)\nplot_hist_normed(frog_eye_array, 0, 'red')\nmatplotlib.pyplot.title('frog_eye_array leaves')\n\n#green\nmatplotlib.pyplot.subplot(3, 6, 7)\nplot_hist_normed(healthy_array, 1, 'green')\nmatplotlib.pyplot.title('healthy leaves')\nmatplotlib.pyplot.subplot(3, 6, 8)\nplot_hist_normed(scab_array, 1, 'green')\nmatplotlib.pyplot.title('scab leaves')\nmatplotlib.pyplot.subplot(3, 6, 9)\nplot_hist_normed(rust_array, 1, 'green')\nmatplotlib.pyplot.title('rust leaves')\nmatplotlib.pyplot.subplot(3, 6, 10)\nplot_hist_normed(multi_array, 1, 'green')\nmatplotlib.pyplot.title('multiple diseases leaves')\nmatplotlib.pyplot.subplot(3, 6, 11)\nplot_hist_normed(powdery_mildew_array, 1, 'green')\nmatplotlib.pyplot.title('powdery_mildew_array leaves')\nmatplotlib.pyplot.subplot(3, 6, 12)\nplot_hist_normed(frog_eye_array, 1, 'green')\nmatplotlib.pyplot.title('frog_eye_ leaves')\n\n#blue\nmatplotlib.pyplot.subplot(3, 6, 13)\nplot_hist_normed(healthy_array, 2, 'blue')\nmatplotlib.pyplot.title('healthy leaves')\nmatplotlib.pyplot.subplot(3, 6, 14)\nplot_hist_normed(scab_array, 2, 'blue')\nmatplotlib.pyplot.title('scab leaves')\nmatplotlib.pyplot.subplot(3, 6, 15)\nplot_hist_normed(rust_array, 2, 'blue')\nmatplotlib.pyplot.title('rust leaves')\nmatplotlib.pyplot.subplot(3, 6, 16)\nplot_hist_normed(multi_array, 2, 'blue')\nmatplotlib.pyplot.title('multiple diseases leaves')\nmatplotlib.pyplot.subplot(3, 6, 17)\nplot_hist_normed(powdery_mildew_array, 2, 'blue')\nmatplotlib.pyplot.title('powdery_mildew_array leaves')\nmatplotlib.pyplot.subplot(3, 6, 18)\nplot_hist_normed(frog_eye_array, 2, 'blue')\nmatplotlib.pyplot.title('frog_eye leaves')\n\n\nmatplotlib.pyplot.show()","aee621c9":"def summary(images, channel, col):\n    vals = images[:,:,:,channel].flatten()\n    chan_mean = np.mean(vals)\n    chan_median = np.median(vals)\n    print('{} mean: {}, median: {}'.format(col, str(chan_mean), str(chan_median)))\n\nprint('healthy leaves:')\nsummary(healthy_array, 0, 'red')\nsummary(healthy_array, 1, 'green')\nsummary(healthy_array, 2, 'blue')\nprint('scab leaves:')\nsummary(scab_array, 0, 'red')\nsummary(scab_array, 1, 'green')\nsummary(scab_array, 2, 'blue')\nprint('rust leaves:')\nsummary(rust_array, 0, 'red')\nsummary(rust_array, 1, 'green')\nsummary(rust_array, 2, 'blue')\nprint('multiple diseases leaves:')\nsummary(multi_array, 0, 'red')\nsummary(multi_array, 1, 'green')\nsummary(multi_array, 2, 'blue')\nprint('powdery_mildew leaves:')\nsummary(powdery_mildew_array, 0, 'red')\nsummary(powdery_mildew_array, 1, 'green')\nsummary(powdery_mildew_array, 2, 'blue')\nprint('frog_eye leaves:')\nsummary(frog_eye_array, 0, 'red')\nsummary(frog_eye_array, 1, 'green')\nsummary(frog_eye_array, 2, 'blue')\n","c904aee0":"diseased_leaves_array=np.concatenate((rust_array,multi_array,scab_array,frog_eye_array,powdery_mildew_array))\ndiseased_leaves_array.shape","c7ad5235":"#red  \nmatplotlib.pyplot.figure(figsize =(30, 15))\nmatplotlib.pyplot.subplot(3, 2, 1)\nplot_hist_normed(healthy_array, 0, 'red')\nmatplotlib.pyplot.title('healthy leaves')\nmatplotlib.pyplot.subplot(3, 2, 2)\nplot_hist_normed(diseased_leaves_array, 0, 'red')\nmatplotlib.pyplot.title('diseased leaves')\n\n#green\nmatplotlib.pyplot.subplot(3, 2, 3)\nplot_hist_normed(healthy_array, 1, 'green')\nmatplotlib.pyplot.title('healthy leaves')\nmatplotlib.pyplot.subplot(3, 2, 4)\nplot_hist_normed(diseased_leaves_array, 1, 'green')\nmatplotlib.pyplot.title('diseased leaves')\n\n#blue\nmatplotlib.pyplot.subplot(3, 2, 5)\nplot_hist_normed(healthy_array, 2, 'blue')\nmatplotlib.pyplot.title('healthy leaves')\nmatplotlib.pyplot.subplot(3, 2, 6)\nplot_hist_normed(diseased_leaves_array, 2, 'blue')\nmatplotlib.pyplot.title('diseased leaves')\n\nmatplotlib.pyplot.show()\n\n\nprint('healthy leaves:')\nsummary(healthy_array, 0, 'red')\nsummary(healthy_array, 1, 'green')\nsummary(healthy_array, 2, 'blue')\nprint('diseased leaves:')\nsummary(diseased_leaves_array, 0, 'red')\nsummary(diseased_leaves_array, 1, 'green')\nsummary(diseased_leaves_array, 2, 'blue')","969472a6":"LR_reduce=keras.callbacks.ReduceLROnPlateau(monitor='val_accuracy',\n                            factor=.5,\n                            patience=10,\n                            min_lr=.000001,\n                            verbose=0)\n\nES_monitor=keras.callbacks.EarlyStopping(monitor='val_loss',\n                          patience=20)\n\n\nreg = .0005","81b7710d":"def plot_history(history):\n\n  h = history.history\n\n  offset = 5\n  epochs = range(offset, len(h['loss']))\n\n  matplotlib.pyplot.figure(1, figsize=(20, 6))\n\n  matplotlib.pyplot.subplot(121)\n  matplotlib.pyplot.xlabel('epochs')\n  matplotlib.pyplot.ylabel('loss')\n  matplotlib.pyplot.plot(epochs, h['loss'][offset:], label='train')\n  matplotlib.pyplot.plot(epochs, h['val_loss'][offset:], label='val')\n  matplotlib.pyplot.legend()\n\n  matplotlib.pyplot.subplot(122)\n  matplotlib.pyplot.xlabel('epochs')\n  matplotlib.pyplot.ylabel('accuracy')\n  matplotlib.pyplot.plot(h[f'accuracy'], label='train')\n  matplotlib.pyplot.plot(h[f'val_accuracy'], label='val')\n  matplotlib.pyplot.legend()\n\n  matplotlib.pyplot.show()\n\n  pred_test = model.predict(x_val)\n  roc_sum = 0\n  classes=['healthy',\t'complex',\t'rust',\t'scab' , 'frog_eye_leaf_spot' , 'powdery_mildew']\n  for i in range(6):\n      score = sklearn.metrics.roc_auc_score(y_val.iloc[:,i].values.astype('int32'), pred_test[:,i])\n      roc_sum += score\n      print(f'AUC-ROC {classes[i]}  {score:.3f}')\n\n  roc_sum \/= 6\n  print(f'totally roc score:{roc_sum:.3f}')","63e9aa73":"def creat_model(img_size):\n  model = keras.models.Sequential()\n\n  model.add(keras.layers.Conv2D(32, kernel_size=(5,5),activation='relu', input_shape=(img_size, img_size, 3), kernel_regularizer=keras.regularizers.l2(reg)))\n  model.add(keras.layers.BatchNormalization(axis=-1,center=True,scale=False))\n  model.add(keras.layers.Conv2D(128, kernel_size=(5,5),activation='relu', kernel_regularizer=keras.regularizers.l2(reg)))\n  model.add(keras.layers.BatchNormalization(axis=-1,center=True,scale=False))\n  model.add(keras.layers.MaxPooling2D(pool_size=(2,2), padding='SAME'))\n  model.add(keras.layers.Dropout(.25))\n\n  model.add(keras.layers.Conv2D(32, kernel_size=(3,3),activation='relu', kernel_regularizer=keras.regularizers.l2(reg)))\n  model.add(keras.layers.BatchNormalization(axis=-1,center=True,scale=False))\n  model.add(keras.layers.Conv2D(128, kernel_size=(3,3),activation='relu',kernel_regularizer=keras.regularizers.l2(reg)))\n  model.add(keras.layers.BatchNormalization(axis=-1,center=True,scale=False))\n  model.add(keras.layers.MaxPooling2D(pool_size=(2,2), padding='SAME'))\n  model.add(keras.layers.Dropout(.25))\n\n\n  model.add(keras.layers.Conv2D(128, kernel_size=(5,5),activation='relu', kernel_regularizer=keras.regularizers.l2(reg)))\n  model.add(keras.layers.BatchNormalization(axis=-1,center=True,scale=False))\n  model.add(keras.layers.Conv2D(512, kernel_size=(5,5),activation='relu',kernel_regularizer=keras.regularizers.l2(reg)))\n  model.add(keras.layers.BatchNormalization(axis=-1,center=True,scale=False))\n  model.add(keras.layers.MaxPooling2D(pool_size=(2,2), padding='SAME'))\n  model.add(keras.layers.Dropout(.25))\n\n  model.add(keras.layers.Conv2D(128, kernel_size=(3,3),activation='relu',kernel_regularizer=keras.regularizers.l2(reg)))\n  model.add(keras.layers.BatchNormalization(axis=-1,center=True,scale=False))\n  model.add(keras.layers.Conv2D(512, kernel_size=(3,3),activation='relu',kernel_regularizer=keras.regularizers.l2(reg)))\n  model.add(keras.layers.BatchNormalization(axis=-1,center=True,scale=False))\n  model.add(keras.layers.MaxPooling2D(pool_size=(2,2), padding='SAME'))\n  model.add(keras.layers.Dropout(.25))\n\n  model.add(keras.layers.Flatten())\n  model.add(keras.layers.Dense(300,activation='relu'))\n  model.add(keras.layers.BatchNormalization(axis=-1,center=True,scale=False))\n  model.add(keras.layers.Dropout(.25))\n  model.add(keras.layers.Dense(200,activation='relu'))\n  model.add(keras.layers.BatchNormalization(axis=-1,center=True,scale=False))\n  model.add(keras.layers.Dropout(.25))\n  model.add(keras.layers.Dense(100,activation='relu'))\n  model.add(keras.layers.BatchNormalization(axis=-1,center=True,scale=False))\n  model.add(keras.layers.Dropout(.25))\n  model.add(keras.layers.Dense(6,activation='softmax'))\n\n  model.summary()\n \n  \n  return model","99ad84c8":"# y_val","a5fe97b9":"# train_100X100_images = train_data[\"image\"].progress_apply(load_image, args=((100,100),))\n","6d8370c6":"# targets=train_data.drop('image',axis=1)","db0b5940":"# train_data","16be7ee4":"# current_train_data=train_data.loc[train_100X100_images.index]\n# images_array=images_4d_array(train_100X100_images)\n# targets=current_train_data.drop('image',axis=1)\n# x_train, x_val, y_train, y_val = sklearn.model_selection.train_test_split(images_array, targets, test_size=0.2, random_state=seed)\n# x_train = x_train.astype('float32')\n# x_val = x_val.astype('float32')\n# x_train \/= 255\n# x_val \/= 255\n# x_train.shape, x_val.shape, y_train.shape, y_val.shape","8ddf9034":"# model = creat_model(100)\n# model.compile(optimizer='rmsprop',\n#               loss='categorical_crossentropy',\n#               metrics=['accuracy']\n#               )","ee6057b7":"# history = model.fit(x_train,\n#                     y_train,\n#                     batch_size=24,\n#                     epochs=100,\n#                     steps_per_epoch=x_train.shape[0] \/\/ 24,\n#                     verbose=0,\n#                     callbacks=[ES_monitor,LR_reduce],\n#                     validation_data=(x_val, y_val),\n#                     validation_steps=x_val.shape[0]\/\/24\n#                     )","b0ab0f5e":"# score = model.evaluate(x_val, y_val, verbose=0)\n\n# print('Test loss:', score[0])\n# print('Test accuracy:', score[1])\n# plot_history(history)","1f98c117":"# y_val_pred = model.predict_classes(x_val)\n# mat = sklearn.metrics.confusion_matrix(get_target_array_no_im_id(y_val),y_val_pred)\n# sns.heatmap(mat.T, square=True, annot=True, cbar=False)\n# matplotlib.pyplot.xlabel('true label')\n# matplotlib.pyplot.ylabel('predict label');","702b0ac1":"# model.save(\"..output\/kaggle\/working\/model_100X100.h5\")","61232639":"#In order to save memory in kaggle I resized it to 100 by 100\n# img_size = 224\nimg_size = 100","d62b351a":"train_224X224_images = train_data[\"image\"].progress_apply(load_image, args=((img_size,img_size),))","0687a728":"current_train_data=train_data.loc[train_224X224_images.index]\nimages_array=images_4d_array(train_224X224_images)\ntargets=current_train_data.drop('image',axis=1)\nx_train2, x_val, y_train2, y_val = sklearn.model_selection.train_test_split(images_array, targets, test_size=0.2, random_state=seed)\nx_train2 = x_train2.astype('float32')\nx_val = x_val.astype('float32')\nx_train2 \/= 255\nx_val \/= 255\nx_train2.shape, x_val.shape, y_train2.shape, y_val.shape","2850d084":"model = creat_model(img_size)\nmodel.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy']\n              )","a4f82ff0":"x_train2.shape","86b40859":"history = model.fit(x_train2,\n                    y_train2,\n                    batch_size=24,\n                    epochs=100,\n                    steps_per_epoch=x_train2.shape[0] \/\/ 24,\n                    verbose=0,\n                    callbacks=[ES_monitor,LR_reduce],\n                    validation_data=(x_val, y_val),\n                    validation_steps=x_val.shape[0]\/\/24\n                    )","19b82c42":"score = model.evaluate(x_val, y_val, verbose=0)\n\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","2da81e2d":"plot_history(history)","40781241":"y_val_pred = model.predict_classes(x_val)\nmat = sklearn.metrics.confusion_matrix(get_target_array_no_im_id(y_val),y_val_pred)\nsns.heatmap(mat.T, square=True, annot=True, cbar=False)\nmatplotlib.pyplot.xlabel('true label')\nmatplotlib.pyplot.ylabel('predict label');","917fa432":"model.save(\"..output\/kaggle\/working\/model_224X224.h5\")","e2a453e1":"datagen = keras.preprocessing.image.ImageDataGenerator(rotation_range=45,\n                             shear_range=.25,\n                              zoom_range=.25,\n                              width_shift_range=.25,\n                              height_shift_range=.25,\n                              rescale=1\/255,\n                              brightness_range=[.5,1.5],\n                              horizontal_flip=True,\n                              vertical_flip=True,\n                              fill_mode='nearest'\n#                              featurewise_center=True,\n#                              samplewise_center=True,\n#                              featurewise_std_normalization=True,\n#                              samplewise_std_normalization=True,\n#                              zca_whitening=True\n                              )","7c034365":"model = creat_model(img_size)\nmodel.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy']\n              )","0dca892c":"history = model.fit_generator(datagen.flow(x_train2, y_train2, batch_size=24),\n                              epochs=100,\n                              steps_per_epoch=x_train2.shape[0] \/\/ 24,\n                              verbose=0,\n                              callbacks=[ES_monitor,LR_reduce],\n                              validation_data=datagen.flow(x_val, y_val,batch_size=24),\n                              validation_steps=x_val.shape[0]\/\/24\n                              )","a9b3a657":"score = model.evaluate(x_val, y_val, verbose=0)\n\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","d84ca3df":"plot_history(history)","124578fa":"y_val_pred = model.predict_classes(x_val)\nmat = sklearn.metrics.confusion_matrix(get_target_array_no_im_id(y_val),y_val_pred)\nsns.heatmap(mat.T, square=True, annot=True, cbar=False)\nmatplotlib.pyplot.xlabel('true label')\nmatplotlib.pyplot.ylabel('predict label');","8ceafcb1":"model.save(\"..output\/kaggle\/working\/model_224X224_image_generate.h5\")","cb500323":"print(x_train2.shape,y_train2.shape)","816b2427":" sm = imblearn.over_sampling.SMOTE(random_state = 115) \n \nx_train2, y_train2 = sm.fit_resample(get_all_pixels(x_train2),y_train2.to_numpy())\nx_train2 = x_train2.reshape((-1, img_size, img_size, 3))\nx_train2.shape, y_train2.sum(axis=0)","156b99f7":"model = creat_model(img_size)\nmodel.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy']\n              )","ad4cc461":"history = model.fit_generator(datagen.flow(x_train2, y_train2, batch_size=24),\n                              epochs=250,\n                              steps_per_epoch=x_train2.shape[0] \/\/ 24,\n                              verbose=0,\n                              callbacks=[ES_monitor,LR_reduce],\n                              validation_data=datagen.flow(x_val, y_val,batch_size=24),\n                              validation_steps=x_val.shape[0]\/\/24\n                              )","dff1f699":"score = model.evaluate(x_val, y_val, verbose=0)\n\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","98f39ed5":"plot_history(history)","8a4dd2d6":"y_val_pred = model.predict_classes(x_val)\nmat = sklearn.metrics.confusion_matrix(get_target_array_no_im_id(y_val),y_val_pred)\nsns.heatmap(mat.T, square=True, annot=True, cbar=False)\nmatplotlib.pyplot.xlabel('true label')\nmatplotlib.pyplot.ylabel('predict label');","5341b6e1":"model.save(\"..output\/kaggle\/working\/model_224X224_smoth.h5\")","0559a84c":"AUTO = tf.data.experimental.AUTOTUNE\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\nstrategy = tf.distribute.experimental.TPUStrategy(tpu)\nwarnings.filterwarnings(\"ignore\")","f0810485":"img_size = 224","0d5d9fa9":"train_224X224_images = train_data[\"image\"].progress_apply(load_image, args=((img_size,img_size),))","c045f89f":"current_train_data=train_data.loc[train_224X224_images.index]\nimages_array=images_4d_array(train_224X224_images)\ntargets=current_train_data.drop('image',axis=1)\nx_train2, x_val, y_train2, y_val = sklearn.model_selection.train_test_split(images_array, targets, test_size=0.2, random_state=seed)\nx_train2 = x_train2.astype('float32')\nx_val = x_val.astype('float32')\nx_train2 \/= 255\nx_val \/= 255\nx_train2.shape, x_val.shape, y_train2.shape, y_val.shape","bde5a4c9":"with strategy.scope():\n    model = tf.keras.Sequential([tf.keras.applications.DenseNet121(input_shape=(224, 224, 3),\n                                             weights='imagenet',\n                                             include_top=False),\n                                 L.GlobalAveragePooling2D(),\n                                 L.Dense(y_train2.shape[1],\n                                         activation='softmax')])\n        \n    model.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy']\n              )\n    model.summary()","08076c70":"history = model.fit(x_train2,y_train2,\n                    epochs=250,\n                    callbacks=[ES_monitor,LR_reduce],\n                    steps_per_epoch=15,\n                    verbose=0,\n                    validation_data=(x_val, y_val))","caea6c92":"score = model.evaluate(x_val, y_val, verbose=0)\n\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","f9d768a1":"plot_history(history)","c173a9e5":"y_val_pred = model.predict_classes(x_val)\nmat = sklearn.metrics.confusion_matrix(get_target_array_no_im_id(y_val),y_val_pred)\nsns.heatmap(mat.T, square=True, annot=True, cbar=False)\nmatplotlib.pyplot.xlabel('true label')\nmatplotlib.pyplot.ylabel('predict label');","cfc31aa6":"model.save(\"..output\/kaggle\/working\/model_densnet121.h5\")\n","438c8598":"sm = imblearn.over_sampling.SMOTE(random_state = 115) \n \nx_train2, y_train2 = sm.fit_resample(get_all_pixels(x_train2),y_train2.to_numpy())\nx_train2 = x_train2.reshape((-1, img_size, img_size, 3))\nx_train2.shape, y_train2.sum(axis=0)","646a50d9":"with strategy.scope():\n    model = tf.keras.Sequential([tf.keras.applications.DenseNet121(input_shape=(224, 224, 3),\n                                             weights='imagenet',\n                                             include_top=False),\n                                 L.GlobalAveragePooling2D(),\n                                 L.Dense(y_train2.shape[1],\n                                         activation='softmax')])\n        \n    model.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy']\n              )\n    model.summary()","232117c4":"history = model.fit(x_train2,y_train2,\n                    epochs=250,\n                    callbacks=[ES_monitor,LR_reduce],\n                    steps_per_epoch=15,\n                    verbose=0,\n                    validation_data=(x_val, y_val))","c77dab85":"score = model.evaluate(x_val, y_val, verbose=0)\n\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","74176262":"plot_history(history)","dfb28ce4":"y_val_pred = model.predict_classes(x_val)\nmat = sklearn.metrics.confusion_matrix(get_target_array_no_im_id(y_val),y_val_pred)\nsns.heatmap(mat.T, square=True, annot=True, cbar=False)\nmatplotlib.pyplot.xlabel('true label')\nmatplotlib.pyplot.ylabel('predict label');","5ab528d5":"model.save(\"..output\/kaggle\/working\/model_densnet121_SMOTE.h5\")","bffd2c4c":"img_size = 224","957987ba":"train_224X224_images = train_data[\"image_id\"].progress_apply(load_image, args=((img_size,img_size),))","9cc63107":"current_train_data=train_data.loc[train_224X224_images.index]\nimages_array=images_4d_array(train_224X224_images)\ntargets=current_train_data.drop('image_id',axis=1)\nx_train2, x_val, y_train2, y_val = sklearn.model_selection.train_test_split(images_array, targets, test_size=0.2, random_state=seed)\nx_train2 = x_train2.astype('float32')\nx_val = x_val.astype('float32')\nx_train2 \/= 255\nx_val \/= 255\nx_train2.shape, x_val.shape, y_train2.shape, y_val.shape","a8545fb7":"\nmodel = tf.keras.Sequential([tf.keras.applications.DenseNet121(input_shape=(224, 224, 3),\n                                          weights='imagenet',\n                                          include_top=False),\n                              L.GlobalAveragePooling2D(),\n                              L.Dense(y_train2.shape[1],\n                                      activation='softmax')])\n    \nmodel.compile(optimizer='rmsprop',\n          loss='categorical_crossentropy',\n          metrics=['accuracy']\n          )\nmodel.summary()","d1c004c5":"history = model.fit(datagen.flow(x_train2,y_train2,batch_size=24),\n                    epochs=250,\n                    callbacks=[ES_monitor,LR_reduce],\n                    steps_per_epoch=15,\n                    verbose=0,\n                    validation_data=(x_val, y_val))","1adaf8f5":"score = model.evaluate(x_val, y_val, verbose=0)\n\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","007e8318":"plot_history(history)","86a3f85e":"y_val_pred = model.predict_classes(x_val)\nmat = sklearn.metrics.confusion_matrix(get_target_array_no_im_id(y_val),y_val_pred)\nsns.heatmap(mat.T, square=True, annot=True, cbar=False)\nmatplotlib.pyplot.xlabel('true label')\nmatplotlib.pyplot.ylabel('predict label');","6e4311ce":"model.save(\"..output\/kaggle\/working\/model_densnet121_DG.h5\")\n","263a9cb9":"sm = imblearn.over_sampling.SMOTE(random_state = 115) \n \nx_train2, y_train2 = sm.fit_resample(get_all_pixels(x_train2),y_train2.to_numpy())\nx_train2 = x_train2.reshape((-1, img_size, img_size, 3))\nx_train2.shape, y_train2.sum(axis=0)","3e98d956":"\nmodel = tf.keras.Sequential([tf.keras.applications.DenseNet121(input_shape=(224, 224, 3),\n                                          weights='imagenet',\n                                          include_top=False),\n                              L.GlobalAveragePooling2D(),\n                              L.Dense(y_train2.shape[1],\n                                      activation='softmax')])\n    \nmodel.compile(optimizer='rmsprop',\n          loss='categorical_crossentropy',\n          metrics=['accuracy']\n          )\nmodel.summary()","e4eee45c":"history = model.fit(datagen.flow(x_train2,y_train2,batch_size=24),\n                    epochs=250,\n                    callbacks=[ES_monitor,LR_reduce],\n                    steps_per_epoch=15,\n                    verbose=0,\n                    validation_data=(x_val, y_val))","56559942":"score = model.evaluate(x_val, y_val, verbose=0)\n\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","ca043c32":"plot_history(history)","6727dd2a":"y_val_pred = model.predict_classes(x_val)\nmat = sklearn.metrics.confusion_matrix(get_target_array_no_im_id(y_val),y_val_pred)\nsns.heatmap(mat.T, square=True, annot=True, cbar=False)\nmatplotlib.pyplot.xlabel('true label')\nmatplotlib.pyplot.ylabel('predict label');","3593a459":"model.save(\"..output\/kaggle\/working\/model_densnet121_SMOTE_DG.h5\")\n","e80ae550":"# **Install and Import Necessary Libraries**","7093c1cc":"First, lest see some leaves with scab","bb5927bd":"As can be seen, 3 of the 4 classes have similar representation in our sata set. The multiple_diseases class is highly underrepresented, we have less then 100 images of this class, out of 18632 images. Our data is imbalanced, and we have to remember it as we draw conclusions","aca16966":"Applying SMOTE on our dataset","3166c816":"### **CNN Model**","f16721f1":"Lets see some powdery_mildew leaves","38252ed1":"Lets print our results","846c1dfe":"Our accuracy has improved to 92%, a great accomplishment. we can see that the vlidation and test graph have no gap which can show that the model didn't overpitted to the test. We can see that the model is having a better time classifing the \"multiple_diseases\" class from the better AUC-ROC score. ","c3d70449":"Our accuracy has stayed 92%, and the fitting was much faster, but there are still some problems, we can see at the end that there i a gap between the validation and the train matrices, which can indicate that there is some kind of overfittin, the accuracy of the train data is almos perferct, which can show again over fitting, but we can see that this is the case from almot the beggining which indicate that it could have been because of the pre trained model and it's proficiency  ","6f95f9ef":"Thus far, we talk about how our images fit in our classes, but we haven't has a look at them, so we shall do it now.","67e3fee5":"Again we will use the same procider as before but we will use SMOTE as well","a6d06201":"We will use utility functions several times in our project, so we will define them here. Most of them are used to process images and reshape them or the data-sets that contins them","c8d113e7":"Convolution neural network is the fittest and most robust model that we know of to this task. It will serve as our main tool in this classification task, thus we will prepare the ground before applying it. A convolutional neural network consists of an input and an output layer, as well as multiple hidden layers. The hidden layers of a CNN typically consist of a series of convolutional layers that convolve with a multiplication or other dot product. The activation function is commonly a ReLU layer, and is subsequently followed by additional convolutions such as pooling layers, fully connected layers and normalization layers, referred to as hidden layers because their inputs and outputs are masked by the activation function and final convolution.","11cbc60f":"Lets print our data of the images","6e7d6320":"As using DenseNet with SMOTE didn't produced a better model, we will use Data Transformations and Augmentation as well. Maybe that could produce a better model. We Didn't use it in at first place because using TPU and ImageDataGenerator is no possible, and using a GPU take considerebly longer.","8c6357b4":"As can be seen the blue channels mean and median of the diseased leaves are lower, and the red channels mean and median are higher then the healthy ones. We should explore the difference further by comparing the healty and diseased leaves pictures","956a4dce":"# **Project's Target**","00dc3bf8":"Our accuracy has improved to 94%, the best accuracy thus far we can see that the vlidation and test graph have no gap which can show that the model didn't overpitted to the test. We can see that the model is having a better time classifing the \"multiple_diseases\" class then ever before from the better AUC-ROC score.","c1ef590e":"As a first step with our data, should explore our data and check what classes and data we have, the number of classes and the amount of images can tell us what dificulties can occur further in the project","cb6d777c":"As can be seen, we have a list of images and their class out of 4, healthy, multiple_diseases, rust and scab. Every entry is an image and have the value 1 for bieng in the class and 0 for not.\n","33cc3d42":"### **First Attempt- 100x100 Image Size**\n","5bf2d9b1":"Our last model did great, but still can have difficulties in classifing the \"multiple_diseases\". Even though SMOTE has faild us one, and had no effect the other time, e will try to use SMOTE to better our model, we don't have great hopes for it to work but maybe it wiil prove us wrong ","23ff66fb":"Lets print our results","7172967e":"We will try to use better resolution so the model could maybe classify some of the classes (\"scab\") better ","4e62bc06":"Running the model on 224x224 images","5070cd3f":"Misdiagnosis of the many diseases impacting agricultural crops can lead to misuse of chemicals leading to the emergence of resistant pathogen strains, increased input costs, and more outbreaks with significant economic loss and environmental impacts. Current disease diagnosis based on human scouting is time-consuming and expensive, and although computer-vision based models have the promise to increase efficiency, the great variance in symptoms due to age of infected tissues, genetic variations, and light conditions within trees decreases the accuracy of detection.\n\nThe purpose of the project is to diagnose apple tree diseases solely based on leaf images. The data is a set of images that is sapareted to those categories: \"healthy\", \"scab\", \"rust\", and \"multiple diseases\". Solving this problem is important because diagnosing plant diseases early can save tonnes of agricultural produce every year. This will benefit not only the general population by reducing hunger, but also the farmers by ensuring they get the harvest they deserve.\n\nThe project is based on the data set \"[Plant Pathology 2020 - FGVC7](https:\/\/www.kaggle.com\/c\/plant-pathology-2020-fgvc7\/overview\/description)\" Contains 3642 images of apple leaves divided into training data and test data.","8e606cfd":"### **Second Attempt- 224x224 Image Size**\n","ec8ab84b":"Running the model on 100x100 images","988e9a18":"# **Introduction**","3dda7dec":"In this section we will try to fit models to our data so we could predict on new data, which of the 4 classes they are part of.","42ecd7a9":"Lets print our results","763a7990":"Lets print our results","82b59bca":"\nOur goal is to produce a model that classify correcly the health of a leaf and can say in great confidence what disease does it have. We will use images of apple leaves that are divided into 4 classes: healty leaves,leaves with scab,leaves with rust, and leaves with scab and rust. Our data-base contains 3642 images of apple leaves, 1821 classified images and 1821 images with no classification. We will try to train a model that can classify correcly images of apple leaves to those classes.","86a29879":"Lest see some leaves with rust","17cbdec6":"Lets load the images","ce025aa0":"We have 18632 images, lets find the distribution of the data in the classes.","4667867a":"Applying SMOTE on our dataset","af791ae9":"# **Domain knowledge**","2c396c69":"# **Data Exploration and Analysis**","eb02c6c5":"### **DenseNet With Data Transformations and Augmentation and With  SMOTE**","ff4c9b02":"Lets print our results","3f1b2f30":"The classes are ordered in this manner: \"healthy\" \"multiple_diseases\" \"rust\" \"scab\". We can see that our model is pretty accurate at idintifing the \"healthy\" \"rust\" \"scab\" classes, as it classified corretly almost all of the images of those classes. Again the \"multiple_diseases\" class images' classification is not better then random. It could be that the underrepresentation of that class is a big factor of that and we haven't found a model that whould help us with that.","d9692127":"## **First Look at Our Images**","ad0babeb":"We chose DenseNet because it have some advantages over CNN when they are deep. This is because the path for information from the input layer until the output layer (and for the gradient in the opposite direction) becomes so big, that they can get vanished before reaching the other side.\nDenseNets simplify the connectivity pattern between layers introduced in other architectures:\nHighway Networks [2]\nResidual Networks [3]\nFractal Networks [4]\nThis solve the problem ensuring maximum information (and gradient) flow. To do it, the model is simply connected from every layer directly to the other ones. Instead of drawing representational power from extremely deep or wide architectures, DenseNets exploit the potential of the network through feature reuse. Counter-intuitively, by connecting this way DenseNets require fewer parameters than an equivalent traditional CNN, as there is no need to learn redundant feature maps","28a3bc89":" Lets check its affect on our dataset. The size of our dataset before running the function","38547756":"Image transformations and augmentation is an efficient way to diversify data and to generalize a model, we will try to use it to improve our model predictions and to maybe aid it to classify the \"multiple_diseases\" class better, as generating more images could give it a greater number of relevant images ","88b4b105":"# **Conclusion**","8eff9fa1":"Now we will define the model and try to fit it","f9e51f9e":"SMOTE didn't fail us and didn't help us. our accuracy has decreased to 88%, not the worst but a downgarde from our privious model. lets take a look at the confusin matrix for more insight about what went wrong","2e07ebd1":"Lets take a look at the confusin matrix for more insight","2200f734":"## **CNN-Convolution Neural Network**","038eb625":"Colors in pictures are the basic features, thus analyising them is our first step. We already saw that the dieases has characteristics that are connected to color, so it is naturally a good direction.","6a9388f1":"The classes are ordered in this manner: \"healthy\"  \"multiple_diseases\"  \"rust\"  \"scab\". We can see that our  new model is pretty good at identifing the \"rust\" class and that it is over all can identify the classes we a decent accuracy as did the last one, but here we can see that using a better rsoluton made the model to identify the \"scab\" leaves better, as it can easily differ the leaf veins from the disease symptoms. We can see that the main issue of our new model has retied it poor prediction of the \"multiple_diseases\" class, it classifies those images as having one of the diseases and not both. It could be that the underrepresentation of that class is a big factor of that. ","fae02fac":"The classes are ordered in this manner: \"healthy\"  \"multiple_diseases\"  \"rust\"  \"scab\". We can see that our model is pretty good at identifing the \"rust\" class and that it is over all can identify the classes we a decent accuracy. We can see that the main issue of our model is it poor prediction of the \"multiple_diseases\" class, it could be that the under representation of that class is a big factor of that. We can that our model predicts some leaves with \"scab\" as \"healthy\", we think that it can mistake the rust to be the leaves veins. We think that maybe using better resolution of the images can help that problems.","6bc271cf":"Let's try to fit the CNN to the new dataset","288fe423":"We'll be applying Synthetic Minority Oversampling Technique (SMOTE). SMOTE works by selecting examples that are close in the feature space, drawing a line between the examples in the feature space and drawing a new sample at a point along that line, and by that balance a minority class. [SMOTE](https:\/\/machinelearningmastery.com\/smote-oversampling-for-imbalanced-classification\/)\n","353cffb9":"Lets take a look at the confusin matrix for more insight","edaec944":"It is not very informative, it is hard to notice the differences as the images are mostly similar. maybe we sould check the median and the mean of each channel","89044630":"The classes are ordered in this manner: \"healthy\" \"multiple_diseases\" \"rust\" \"scab\". We can see that our new model is better at idintifing the \"multiple_diseases\" class while classifing the other classes, then any other model we produced. It main problem is still this class but it does much better job at classifing it.","a9a0ce44":"# **Load Images**","e3f6b7e1":"Importing the libraries that we will use","aaedd571":"Lets see some healthy leaves","24e2e3cc":"Our accuracy has improved to 87%, but there are still some problems, we can see at the end that there is still a gap between the validation and the train matrices, which can indicate that there is some kind of overfitting. We can also see that the model is still having hard time classifing the multi-diseased class, due to it lower AUC-ROC score.\nSo where did the improvment came from?\n\n\n\n","5f5dce50":"Loading the images and spliting them to train and test","0b3011ed":"AS we expected the leaves has no features of the diseases","04824d73":"### **DenseNet With SMOTE**","c799c23a":"This project was a great challenge but a great fun to work on. We've learned a lot and were able to dive into the world of data science. We learned that some task that look trivial like identifing a leaf and differentiating it from the background can be convoluted if the background has certain features. We also learnd that in the case that we have two classes with shared features using sample genaration would probebly wont work. We saw first-handed how promenent of a  solution neural networks for classifing images, especially over classic methods. We found out that managing resources is a big part of a data science project and can have big impect on our time and effort.","592699d8":"## **Color Analysis**","3d9f5782":"The classes are ordered in this manner: \"healthy\" \"multiple_diseases\" \"rust\" \"scab\". We can see that our new model is better at idintifing the \"healthy\" \"rust\" \"scab\" classes, as it classified corretly almost all of the images of those classes, but still even though is classified more images of that class correctly, the classification seems random.  Again it could be that the underrepresentation of that class is a big factor of that.","77afead1":"Our goal in this project was to produce a model that can classify leaves images to 4 classes of health condition. The data set we had wes imbalance, one of the classes had drastically less images. Throughout the project that fact had great influence on our models and success. At first we explored our data and noticed that there is color difference between classes, and thought that it could heip us, but as the PCA showed us, the color of the image is greatly infuenced by the background and it has a greater effect then the symptoms of the diseases on the leaves. We tried to negate this  effect with 2 methods, cropping the leaves out ot the image and by blacking out the background, non of those methods were successful. Per image we can use the methods to great extent, but automatin those methods prove too sofisticated for us, because of the color of the background compare to the leaves, because of the curved shape of the leave which made their edges lose focus in some instances, which meant that their veins were more prominent as an edge.\n\nAs of next we tried some classic prediction models, which didn't go good at all, and gave prediction that are good as guessing.\n\nNext we tried the the most common method for classifing images, neural network. At first we tried a basic model that didn't performd well at all, next we continued to convolutional neural network, a great method for image classifing, that wes the first model that gave us good results. We tried at first to use it on images with the size of 100X100 pixels, it had good results but it misclassified some diseased infected leave as healthy, but more noticeably it didn't classified the \"multiple_diseases\" class well at all, due to it being underrepresented and having features of other classes. Using bigger images, 224X244 pixels to be specific, we managed to reduce it's misclassification of the diseased leaves as healthy, but didn't change the \"multiple_diseases\" problem, we saw as well some signs of overfiting to the train set. \n\nAs we saw the problems in our previous model, we use data augmentatinons, we changed images rotation, orientation, brightness and scale, and fed them to the CNN. This method improved our model and msde his be more presice when classifing diseased leaves, but once again we colud not classify the \"multiple_diseases\" class well.\n\nWe tried next a method that could maybe help us with this problem, we used SMOTE, it's a method that balances our data by generating samples to the minor class, but as it turn out this method just made the model worse. The problem was that our \"multiple_diseases\" class has similar featurs as the other two diseases calsses, and by generating the samples it made those features ones that assosiate greatly with the \"multiple_diseases\" class, and not the other diseased classes.\n\nThus far our best attempt ,data augmentation, was pretty good but had some difficulties and could not tackle the main issue of the data set, it's imbalance. \n\nNext we tried to incorporate transfer learning to our attempts. This methos is using an allready traind model on general case as our base model, and in addition we used a different neural network, denstenet which has different kind of architecture the our CNN. We tried using it with or without SMOTE and with or without data augmentation. The best model was produced as a result of the the one with data augmentation and without SMOTE. It can tackle the \"multiple_diseases\" class much better but still has a bit of dificult with this class, at the rest it does great work.\n\n\nOur data main challenges were it's imbalance and the fact that the leaves were filmed on a dinamic background. Further more, another challenge is the resemblance of some of its classes features. All of the above made our work interesting and challenging. We could not find an efficient way to reduce the impact that the back ground has, and could not find a way that could heip us with the imbalances without reducing model accurecy. The first problem could be solved by creating a model that can by himself black out the background, but that problem is another big one that would required a project by itself. The secound problem could be tackled by gathering more samples of this class, a mission for plant disease expert that can identify the correct disease. \n\nOverall we produced a competant model that can in great success predict the disease an apple leaf has.\n\n","0f7dfa4a":"Now we will define the model and try to fit it","e1d61954":"Now we will load the images and split them to train and validation","c8d710b8":"Now we will define the model and try to fit it","f044263d":"We will use a built in function to do so, and we will change images rotation, orientation, brightness and scale\n\n ","a68848bc":"We see that we have added about 500 examples,most of them to the minority class, and our data is now balanced","be4efc46":"The classes are ordered in this manner: \"healthy\" \"multiple_diseases\" \"rust\" \"scab\". We can see that our new model classified most of the \"multiple_diseases\" class, but by doing it, it also classified leaves that are in the \"rust\" class as \"multiple_diseases\", and that has made it worse. It seems that the fact that the \"multiple_diseases\" has similar features of the other classes made the \"synthetic\" samlpes have similar atribute to this classes which made the model to get worse. ","68154814":"Now we will splits the data into train and test data","06d09f16":"Applying SMOTE on our dataset","244c0f22":"The general idea of transfer learning is to use knowledge learned from tasks for which a lot of labelled data is available in settings where only little labelled data is available. We will use the pretrained model DenseNet121 inorder to classify","c44aab65":" Lets plot the color histograms for each class","9252da89":"As we expected the blue values are lower and the red values are higher. We can see that the diseased leaves have brown or yellow spots on them. That might be the reason for the discrepancy as in those colors the blue channel has a lower value and the red color has a higher value, and if that is the reason, those differences might help us to identify the healthy leaves. This hypothesis is bold and in order to try and see if it has any truth in it more exploration is needed\n","b9a7969d":"Lest plot the mean and median values for the classes","944e4dc9":"### **Handling Imbalanced in Our Dataset -SMOTE**\n","0f8e022f":"Firstly we will load our data and define constants","ef7f68dc":"Lets take a look at the confusin matrix for more insight","ce90c67f":"#**Functions**","f9eda92f":"Our accuracy has stayed 92%, but there are the same problems, we can see at the end that there is a gap between the validation and the train matrices, which can indicate that there is some kind of overfittin, the accuracy of the train data is almos perferct, which can show again over fitting, but we can see that this is the case from almot the beggining which indicate that it could have been because of the pre trained model and it's proficiency","91b4d844":"Lets see some frog_eye_leaf_spot leaves","82fa0204":"Now we will create a CNN model to our use, it is based on several standards CNN we found and combined","23704510":"Our accuracy has improved drastically to 84%, but there are still some problems, we can see at the end that there is a gap between the validation and the train matrices, which can indicate that there is some kind of overfitting. We can also see that the model is having hard time classifing the \"multiple_diseases\" class, due to it lower AUC-ROC score.\n\n\n\n\n","5fb9a482":"Now we will define the model and try to fit it","9bd60b19":"Lets take a look at the confusin matrix for more insight","44981fb6":"We have limited resources, and we want to make the most out of them. In order to do so, we set stopping parameters which determands that as the model reaching a plateau, the run will stop","c7277c7f":"Our last attempt with SMOTE left us with mixed feeling about it, but it did had an impact on the \"multiple_diseases\" class, was the wannted one. So we will try it once more but with DenseNet this time ","d7e4caab":"We want to further explore the main difference between the classes, and to try and check our hypothesis. Principal component analysis (PCA) is an effective way to do so. PCA is a method to reduce the dimension of our features, and find the most dominant ones ","47699a1c":"We will start by setting a TPU","f8489f33":"Lets print our results","4e681d67":"The classes are ordered in this manner: \"healthy\" \"multiple_diseases\" \"rust\" \"scab\". We can see that our new model is worse then the one before at any classification. We can see that the SMOTE didnt had the effect that we wanted and it had all the negative effects from the first time we used it","61e2d70d":"Running the model on 224x224 images with the transformations and augmentation","fd328efe":"As can be seen from the images, rust manifest itself as yellow-brownish spots on the leaves. The spots are much more identifiable and noticeable.","f7057a5a":"Now we will splits the data into train and test data","dd7da340":"Lets take a look at the confusin matrix for more insight","bef7b98f":"## **Transfer Learning**","052a7aeb":"As can be seen from the images, scabs manifest itself as dark brown spots on the leaves. one can easily think that those are just dirty leaves, but a professional will know that they have scab.","d100fe59":"Lets take a look at the confusin matrix for more insight","59487360":"First we will try our model on images that have 100 pixels as their heigth and 100 pixels are their lenght","c07f4bf7":"### **DenseNet With Data Transformations and Augmentation**","531e6975":"Lets print our results","506a9b6c":"# **Modeling**","e6b6b513":"### **Densenet Model**","d56066af":"Thus far, we talk about how our images fit in our classes, but we haven't has a look at them, so we shall do it now.","5c373a77":"The classes are ordered in this manner: \"healthy\" \"multiple_diseases\" \"rust\" \"scab\". We can see that there were minimal change to the classification and that SMOTE did't help us classify the \"multiple_diseases\" better","1caa55fc":"As can be seen from the images, those leaves have features of both diseases.","6ee4bb38":"Lest see some leaves with complex","9739b6b7":"Lets print our results","9a005d76":"We will use this function to plot our model progression","0bf660f6":"Global human population growth amounts to around 83 million annually, and as the population  grows, so does the global demand for food is rising. In order to meet the demand, agricultural productivity must increase. One of the factors for decrease in crop yield are plants diseases, and identifing them is one of the bottle necks in the process of treating them. Current disease diagnosis based on human scouting is time-consuming and expensive. Diagnosing plants diseases using computer-vision based models can improve the efficeincy of those processes and increace crop yield.\n\nApple tree are one of the most common fruit trees, and worldwide production of apples in 2018 was 86 million tonnes. 2 of the most common diseases of apple trees are apple scab and rust. Apple scab is a common disease of plants in the rose family (Rosaceae) that is caused by the ascomycete fungus Venturia inaequalis. Although apple scab rarely kills its host, infection typically leads to fruit deformation and premature leaf and fruit drop. The reduction of fruit quality and yield may result in crop losses of up to 70%. Rusts are plant diseases caused by pathogenic fungi of the order Pucciniales. Rusts are considered among the most harmful pathogens to agriculture, horticulture and forestry. Rust fungi are major concerns and limiting factors for successful cultivation of agricultural and forest crops.\n\nadd image of rust and scabs***\n","014b8ba6":"### **Data Transformations and Augmentation**","aa153841":"Changing the images array to 4 dimentional (image number, row, column, color channel) array so we could analyze them ","3f07b335":"Our accuracy has decreased to 74%, Worst then our first CNN. It hard to understand what went wrong; so lets take a look at the confusin matrix for more insight","34f632a6":"### **Set Early Stopping Parameters**","75fcbc96":"#**Data Loading and Constant Defining** ","acd004df":"By Yvtsan Levy ","9db8dfd2":"### **Plot History Function**","155d0a41":"# **Discussion**"}}