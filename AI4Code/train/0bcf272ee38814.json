{"cell_type":{"f76f6d93":"code","67ff23c5":"code","33c71740":"code","7e613c9f":"code","163b0bd9":"code","be257b35":"code","429d7e2b":"code","6d640320":"code","dc9e5b07":"code","e92c6687":"code","e8d22359":"code","11ffe4c6":"code","a84e4541":"code","a5b3e7d4":"code","d7fe403c":"code","ac2432fc":"code","cf9a60e3":"code","57d28a37":"code","d2fe59d5":"code","48968722":"code","79e7ba26":"code","0dd1acd7":"code","1f83a3b7":"code","f9dd3938":"markdown","7729ff8f":"markdown","fecd819e":"markdown","472512dd":"markdown","dc409a35":"markdown","513a4b2e":"markdown","fca78a40":"markdown","39f2f745":"markdown","c7141df6":"markdown","c2c34572":"markdown"},"source":{"f76f6d93":"import pandas as pd\nimport numpy as np\nimport os\nimport sys\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom typing import List, Union\nfrom IPython.display import display","67ff23c5":"def print_version(lib):\n    assert lib.__name__\n    \n    if lib.__name__ == \"sys\":\n        print(f\"Python: {lib.version.split()[0]}\")\n    else:\n        try:\n            print(f\"{lib.__name__}: {lib.__version__}\")\n        except:\n            print(f\"Error module: {lib.__name__}\")","33c71740":"libraries = [np, pd, sys, plt, sns]\nfor lib in libraries:\n    print_version(lib)","7e613c9f":"!apt install -y tree","163b0bd9":"!tree -f ..","be257b35":"_INPUT_PATH = os.path.join(\"..\", \"input\", \"1056lab-diabetes-readmission-prediction\")\n[_INPUT_PATH + str(p) for p in os.listdir(_INPUT_PATH)]","429d7e2b":"df_train = pd.read_csv(os.path.join(_INPUT_PATH, \"train.csv\")).set_index(\"id\")\ndf_test = pd.read_csv(os.path.join(_INPUT_PATH, \"test.csv\")).set_index(\"id\")\n\ntarget_col = \"readmitted\"\ntarget = df_train[\"readmitted\"]\ndf_train.drop(target_col, axis=1, inplace=True)","6d640320":"df_train.head()","dc9e5b07":"df_test.head()","e92c6687":"sns.countplot(target)","e8d22359":"df_train.info()","11ffe4c6":"df_test.info()","a84e4541":"def extract_object(df: pd.DataFrame) -> list:\n    return [col for col, typ in zip(df.columns, df.dtypes) if typ == object]","a5b3e7d4":"objs = extract_object(df_train)\nprint(f\"Num cols: {len(df_train.columns) - len(objs)}\/{len(df_train.columns)}\")\nprint(f\"Obj cols: {len(objs)}\/{len(df_train.columns)}\")","d7fe403c":"nums = list(set(df_train.columns) - set(objs))\nprint(\"Num col: \", nums)","ac2432fc":"df_train[nums].describe().T","cf9a60e3":"df_test[nums].describe().T","57d28a37":"def plot_describe(train, test, col: str=None) -> None:\n    tr_desc: pd.Series = train.describe() if isinstance(train, pd.Series) else train[col].describe()\n    te_desc: pd.Series = test.describe() if isinstance(test, pd.Series) else test[col].describe()\n    name: str = tr_desc.name if col is None else col\n    full_desc: pd.DataFrame = pd.concat([tr_desc.rename(\"Train\"), te_desc.rename(\"Test\")], axis=1)\n    full_desc.drop(\"count\").plot.bar(title=name)\n    \nfor col in nums:\n    plot_describe(df_train, df_test, col=col)","d2fe59d5":"for col in nums:\n    _, ax = plt.subplots(1, 2, figsize=(20, 5))\n    sns.boxplot(y=col, data=df_train, ax=ax[0])\n    sns.boxplot(y=col, data=df_test, ax=ax[1])","48968722":"for col in nums:\n    fig, ax = plt.subplots(1, 1, figsize=(20, 5))\n    sns.histplot(x=col, data=df_train, stat=\"density\", label=\"Train\")\n    sns.histplot(x=col, data=df_test, stat=\"density\", color=\"red\", label=\"Test\")\n    plt.legend()\n    plt.show()","79e7ba26":"objs","0dd1acd7":"def catplot(x: List[Union[pd.Series, pd.DataFrame]], col: str=None, max_unique: int=10) -> None:\n    if isinstance(x, pd.Series):\n        x_ = x.copy()\n    else:\n        x_ = x[col].copy()\n    \n    print(\"Num Unique:\", x_.nunique())\n    print(\"Unique val:\", x_.unique())\n    print(f\"\\n{x_.value_counts()}\")\n    \n    if x_.nunique() < max_unique:\n        plt.figure()\n        sns.countplot(x=x_.index, data=x_)\n        plt.xticks(rotation=90)\n        plt.show()","1f83a3b7":"sep = \"-\" * 30\nfor col in objs:\n    print(\"\\n{} {} {}\\n\".format(sep, col, sep))\n    catplot(df_train, col=col)","f9dd3938":"46\u500b\u3082\u5217\u304c\u3042\u3063\u3066\u9762\u5012\u304f\u3055\u3044\u611f\u3058  \n\u3057\u304b\u3082\u30017\u4e07\u884c\u3082\u3042\u308b...  \n\u610f\u5916\u3068*object*\u3082\u3042\u3063\u3066\u9762\u5012\u304f\u3055\u3044  ","7729ff8f":"## Numeric column","fecd819e":"\u6b20\u640d\u5024\u306f **?** \u3063\u307d\u3044  \n**Yes**\u304b**No**\u306e2\u5024\u304c\u591a\u3044  \n(*insulin*\u306e**Down**\u3068\u304b**Steady**\u3063\u3066\u4f55\u305e\u3084...)","472512dd":"# EDA","dc409a35":"\u9762\u5012\u3060\u304b\u3089subplot\u3057\u3066\u308b  \n\u540c\u4e00\u30b0\u30e9\u30d5\u306b\u51fa\u529b\u3059\u308b\u306e\u9762\u5012\u304f\u3055\u3044","513a4b2e":"# Load Libraries","fca78a40":"\u5206\u5e03\u304c\u9055\u3046\u3068\u304b\u306f\u306a\u3055\u305d\u3046","39f2f745":"## Category Column","c7141df6":"\u30de\u30eb\u30c1\u30af\u30e9\u30b9\u554f\u984c\u307f\u305f\u3044  ","c2c34572":"# Load Datasets"}}