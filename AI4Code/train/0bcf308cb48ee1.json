{"cell_type":{"d81307da":"code","90929c77":"code","4fc05705":"code","f0c3d59d":"code","82a082de":"code","b85d2ef5":"code","bf3e1ac8":"code","53259285":"code","db55bbb1":"code","bfed2b89":"code","bffdfcab":"code","b6b9bca4":"code","2c1519dc":"code","5dc1fc2c":"code","53122b12":"code","b4776fdf":"code","cf7a6e57":"code","86a90a54":"code","d431d193":"code","6d638337":"code","ece4db1a":"code","5f61a1bb":"code","c50fb077":"code","ff593b9e":"code","54f68d71":"code","7757b52e":"code","fea51c7e":"code","57b6861a":"markdown","415a6013":"markdown","ffb66bcb":"markdown","e45ff47c":"markdown","075be40a":"markdown","ecd7eff9":"markdown","7bbbd963":"markdown","aab41fa6":"markdown","5a171d54":"markdown","0ba78fbb":"markdown","8e865c1e":"markdown","de4ad6e1":"markdown","e6312abc":"markdown","63b46e40":"markdown","baff97e0":"markdown","66ab41fb":"markdown","adb02738":"markdown","e6a75bc4":"markdown","214a3526":"markdown","9dab8a75":"markdown","98e0b302":"markdown","b95d6f0d":"markdown","5904ab43":"markdown"},"source":{"d81307da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90929c77":"df = pd.read_csv('\/kaggle\/input\/cars-dataset-with-battery-pack-capacity\/ElectricCarData_Clean_Me.csv')","4fc05705":"df","f0c3d59d":"df.isnull().sum()","82a082de":"df.columns","b85d2ef5":"df['FullName'] = df['Brand'] + '-' + df['Model']\ndf_1 = df.loc[df['PriceEuro'] <= 50000]\ndf_2 = df.loc[df['PriceEuro'] > 50000]\nt1 = 'Less than 50,000 Euros' \nt2 = 'More than 50,000 Euros'","bf3e1ac8":"def power_train(dataframe): \n    sns.countplot(x= dataframe['PowerTrain'])\n    plt.title('Count Plot of Powertrain', fontsize = 20)\n    plt.xlabel('Power Train', fontsize = 15)\n    plt.ylabel('Count', fontsize = 15)\n\n","53259285":"def bodystyle(dataframe):\n    plt.figure(figsize=(10, 5))\n    sns.countplot(x= 'BodyStyle', data= dataframe, hue='PowerTrain')\n    plt.title('Count plot of Body Style', fontsize= 20)\n    plt.xlabel('Body Style', fontsize= 15)\n    plt.ylabel('Count', fontsize= 15)\n    plt.show()","db55bbb1":"def range(dataframe, price):\n  plt.figure(figsize=(20,5))\n  sns.set_theme(style=\"whitegrid\")\n  sns.barplot('FullName', 'Range_Km' , data = dataframe, hue = dataframe['PowerTrain'])\n  plt.title('''Range(Km) of EV's costing {} '''.format(price), fontsize = 20)\n  plt.ylabel('Range (Km)', fontsize= 15)\n  plt.xlabel('Model', fontsize= 15)\n  plt.xticks(rotation = 90)\n  plt.show()","bfed2b89":"def range_batterypack(dataframe, text):\n  fig = plt.figure(figsize=(20,5))\n  ax1 = plt.subplot()\n  ax1.bar(dataframe['FullName'], dataframe['Range_Km'],label= 'Range (Km)', color= 'steelblue')\n  plt.legend(loc= 'upper left', bbox_to_anchor = (0, 1.105))\n  ax2 = ax1.twinx()\n  ax2.scatter(dataframe['FullName'], dataframe['Battery_Pack Kwh'], label= 'Battery Pack', color = 'black')\n  plt.title('''RANGE (Km) vs BATTERY PACK CAPACITY (KwH) of EV's costing {}'''.format(text), fontsize= 20)\n  ax1.set_xlabel('Models', size = 20)\n  ax1.set_ylabel('Range (Km)', color = 'steelblue', size = 20)\n  ax2.set_ylabel('Battery Pack Capacity (Kwh)', color= 'black', size= 20)\n  plt.legend(loc= 'upper left', bbox_to_anchor = (0, 1))\n  ax1.set_xticklabels(df_1['FullName'], rotation = 'vertical')\n  plt.show()","bffdfcab":"def acc(dataframe, text):\n  plt.figure(figsize=(20,5))\n  sns.set_theme(style=\"whitegrid\")\n  sns.barplot('FullName', 'AccelSec', data = dataframe, hue = dataframe['PowerTrain'])\n  plt.title('''Acceleration 0-100 Km  of EV's costing {}'''.format(text), fontsize= 20)\n  plt.ylabel('Acceleration (seconds)')\n  plt.xlabel('Model')\n  plt.xticks(rotation = 90)\n  plt.show()","b6b9bca4":"def range_price(dataframe, text):\n  fig = plt.figure(figsize=(20,5))\n  ax1 = plt.subplot()\n  ax1.bar(dataframe['FullName'], dataframe['Range_Km'],label= 'Range (Km)', color= 'steelblue')\n  plt.legend(loc= 'upper left', bbox_to_anchor = (0, 1.1))\n  ax2 = ax1.twinx()\n  ax2.scatter(dataframe['FullName'], dataframe['PriceEuro'], label= 'Price', color = 'black')\n  plt.title('''RANGE (Km) vs PRICE (Euros)of EV's costing {}'''.format(text), fontsize= 20)\n  ax1.set_xlabel('Models', size = 20)\n  ax1.set_ylabel('Range (Km)', color = 'steelblue', size = 20)\n  ax2.set_ylabel('Price (Euros)', color= 'black', size= 20)\n  plt.legend(loc= 'upper left', bbox_to_anchor = (0, 1))\n  ax1.set_xticklabels(df_1['FullName'], rotation = 'vertical')\n  plt.show()","2c1519dc":"def range_efficiency(dataframe, text):\n  fig = plt.figure(figsize=(20,5))\n  ax1 = plt.subplot()\n  ax1.bar(dataframe['FullName'], dataframe['Range_Km'],label= 'Range (Km)', color= 'darkseagreen')\n  plt.legend(loc= 'upper left', bbox_to_anchor = (0, 1.1))\n  ax2 = ax1.twinx()\n  ax2.scatter(dataframe['FullName'], dataframe['Efficiency_WhKm'], label= 'Price', color = 'black')\n  plt.title('''RANGE (Km) vs Efficiency (Wh\/km)of EV's costing {}'''.format(text), fontsize= 20)\n  ax1.set_xlabel('Models', size = 20)\n  ax1.set_ylabel('Range (Km)', color = 'darkseagreen', size = 20)\n  ax2.set_ylabel('Efficiency (Wh\/Km)', color= 'black', size= 20)\n  plt.legend(loc= 'upper left', bbox_to_anchor = (0, 1))\n  ax1.set_xticklabels(df_1['FullName'], rotation = 'vertical')\n  plt.show()","5dc1fc2c":"def fastcharge(dataframe, price):\n  plt.figure(figsize=(20,5))\n  sns.set_theme(style=\"whitegrid\")\n  sns.barplot('FullName', 'FastCharge_KmH' , data = dataframe, color = 'lightslategrey')\n  plt.title('''Fast Charging of EV's costing {} '''.format(price), fontsize = 20)\n  plt.ylabel('Charging Capacity (kmH)', fontsize= 15)\n  plt.xlabel('Model', fontsize= 15)\n  plt.xticks(rotation = 90)\n  plt.show()","53122b12":"# Count Plots\npower_train(df)\nbodystyle(df)","b4776fdf":"# Bar Graphs\nrange(df_1, t1)\nrange(df_2, t2)\n","cf7a6e57":"range_batterypack(df_1, t1)\nrange_batterypack(df_2, t2)","86a90a54":"# Acceleration\nacc(df_1, t1)\nacc(df_2, t2)","d431d193":"# price vs acceleration\nrange_price(df_1, t1)\nrange_price(df_2, t2)","6d638337":"# range vs efficiency\nrange_efficiency(df_1, t1)\nrange_efficiency(df_2, t2)","ece4db1a":"# Fast charge Data\nfastcharge(df_1, t1)\nfastcharge(df_2, t2)","5f61a1bb":"pd.set_option('display.max_columns', None)\ntop_range_1 = df_1.sort_values(by= 'Range_Km', ascending= False)\nprint(top_range_1[['FullName', 'Range_Km', 'Battery_Pack Kwh' ,'PriceEuro', 'RapidCharge']])","c50fb077":"pd.set_option('display.max_columns', None)\ntop_range_2 = df_2.sort_values(by= 'Range_Km', ascending= False)\nprint(top_range_2[['FullName', 'Range_Km', 'Battery_Pack Kwh' ,'PriceEuro', 'RapidCharge']])","ff593b9e":"pd.set_option('display.max_columns', None)\nacceleration_1 = df_1.sort_values(by= 'AccelSec')\nprint(acceleration_1[['FullName','AccelSec', 'Range_Km', 'PowerTrain','Battery_Pack Kwh' ,'PriceEuro']])","54f68d71":"pd.set_option('display.max_columns', None)\nacceleration_2 = df_2.sort_values(by= 'AccelSec')\nprint(acceleration_2[['FullName','AccelSec', 'Range_Km', 'PowerTrain','Battery_Pack Kwh' ,'PriceEuro']])","7757b52e":"companies = df.groupby('Brand').count()\nprint(companies['Model'].sort_values(ascending = False))","fea51c7e":"pd.set_option('display.max_columns', None)\neff = df.sort_values(by= 'Efficiency_WhKm')\nprint(eff[['FullName','Efficiency_WhKm', 'Range_Km', 'PowerTrain','Battery_Pack Kwh' ,'PriceEuro']])","57b6861a":"### Function to plot range of vehicles","415a6013":"### count plot for powertrain","ffb66bcb":"## Number of vehicles produced by each brand","e45ff47c":"# Conclusions\n* Range of vehicle is proportional to Battery Pack Capacity\n* Price of vehicle is proportional battery pack capacity\n* EV's which cost less have higher acceleration(0-100 Km\/Hr) time in order to maximize range\n* High performance EV's have lower efficiency\n* Most of the vehicles costing less than 50,000 Euros are Front Wheel Drive\n* Most of the vehicles costing over 50,000 Euros are either All wheel drive or Rear wheel drive and have better acceleration","075be40a":"* All suggestions are welcomed","ecd7eff9":"### Range vs Battery Pack","7bbbd963":"## Which vehicle has max range(Km) costing more than 50,000 Euros","aab41fa6":"## Which vehicle has max range (km) under 50,000 Euros?","5a171d54":"### Range vs Efficiency","0ba78fbb":"# Data Visualization","8e865c1e":"## Bar Graphs ","de4ad6e1":"### Fast charging data","e6312abc":"Vehicles with maximum efficiency","63b46e40":"* I have added one column in this dataset which contains battery Pack Capacity (KwH), because Electic Vehicle Analysis is incomplete without battery pack capacity","baff97e0":"# Function for Data Visualization ","66ab41fb":"### Range vs Price","adb02738":"### Acceleration (0 - 100Km\/Hr) ","e6a75bc4":"* Adding one more column for futher analysis\n* Dividing dataframe based on price for easier analysis","214a3526":"### Count plot for body style","9dab8a75":"## Count Plots","98e0b302":"## Vehicles with best acceleration under 50,000 Euros","b95d6f0d":"# Answering some basic questions","5904ab43":"## Vehicles with best acceleration costing over 50,000 Euros"}}