{"cell_type":{"e165eb65":"code","9fb8ab12":"code","76441a98":"code","16a5f73b":"code","1d7babaa":"code","7b14a367":"code","1fb334e3":"code","779509b4":"code","ebe1a055":"code","a32d2f57":"code","f618e620":"code","a4fc104f":"code","1c123a3d":"code","c19332f7":"code","c174851a":"markdown","cf113708":"markdown","d3e7479f":"markdown","bed71bcd":"markdown","74412e86":"markdown","79423f7c":"markdown","6a98b2c7":"markdown","a13092ad":"markdown","d714542f":"markdown","a3b88a92":"markdown","09c8a51e":"markdown","945b9d2c":"markdown","3eec6b1d":"markdown"},"source":{"e165eb65":"# System\nimport sys\nimport os\nfrom os import path\nimport argparse\n\n# Time\nimport time\nimport datetime\n\n# Numerical Data\nimport random\nfrom random import shuffle\nimport numpy as np \nimport pandas as pd\n\n# Tools\nimport itertools\nfrom glob import glob\n\n# NLP\nimport re\nimport nltk\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import SnowballStemmer, WordNetLemmatizer\nfrom bs4 import BeautifulSoup\n\n# Preprocessing\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.utils import class_weight as cw\n\n# Model Selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n\n# Machine Learning Models\nfrom sklearn import svm\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.multiclass import OneVsRestClassifier\n\n# Evaluation Matrics\nfrom sklearn import metrics \nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\n# Graph\/ Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Image\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS\n\nimport json\n\nnp.random.seed(7)\n\nlemmatizer = WordNetLemmatizer()\nstemmer=SnowballStemmer('english')\n\n%matplotlib inline\n\n# Input data\nprint(os.listdir(\"..\/input\"))","9fb8ab12":"def read_data(path):\n    return json.load(open(path)) \n\ndef generate_text(data):\n    text_data = [\" \".join(x['ingredients']).lower() for x in data]\n    return text_data \n\ndef prep(t):\n    for i in range(len(t)):\n        text = t[i].lower().split(\" \")\n        text = [re.sub(\"[^a-zA-Z\\s+]\", \"\", t) for t in text]\n        text = [re.sub(\"\\s+\", \"-\", t) for t in text]\n        text = [t.strip() for t in text if t.strip()!=\"\"]\n        t[i] = \" \".join(text)\n    return t\n\n\ndef get_tok(text):\n    t = []\n    for i in text:\n        t.extend(i.split(\" \"))\n    t = list(set(t))\n    return t","76441a98":"train = read_data('..\/input\/train.json')\ntest = read_data('..\/input\/test.json')","16a5f73b":"test_id = [doc['id'] for doc in test]\ntrain_text = generate_text(train)\ntest_text = generate_text(test)\ntarget = [doc['cuisine'] for doc in train]","1d7babaa":"train_text = prep(train_text)\ntest_text = prep(test_text)","7b14a367":"def get_params():\n    params = {'legend.fontsize' : 'Large',\n              'figure.figsize'  : (16,8),\n              'axes.labelsize'  : 'x-large',\n              'axes.titlesize'  : 'xx-large',\n              'xtick.labelsize' : 'Large',\n              'ytick.labelsize' : 'Large'}\n    return params","1fb334e3":"# sns.set(style=\"ticks\")\nsns.set(style=\"whitegrid\")\nplt.figure(figsize=(16,8))\nparams = get_params()\nplt.rcParams.update(params)\nplt.tick_params(labelsize=12)\nsns.countplot(y=target)\nplt.yticks(fontsize=18)\nplt.tight_layout()\nplt.show()","779509b4":"X_train, X_test, y_train, y_test = train_test_split(train_text, target, test_size=.2)","ebe1a055":"vect = TfidfVectorizer()\n\nvect.fit(X_train)\n\nX_train_df = vect.transform(X_train)\nX_test_df = vect.transform(X_test)\n\ntest_text_df = vect.transform(test_text)","a32d2f57":"lbl_enc = LabelEncoder()\ny_train_label = lbl_enc.fit_transform(y_train)\n\nlbl_enc_test = LabelEncoder()\ny_test_label = lbl_enc_test.fit_transform(y_test)","f618e620":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n# parameters = {'C': np.arange(1, 100, 5)}\nmodel = LinearSVC()\n# model = LogisticRegression(multi_class='multinomial')\n# model = RandomForestClassifier(n_estimators=100, max_depth=2, random_state=0)\n# model = SVC()\n\nmodel = OneVsRestClassifier(model)\n# model = BaggingRegressor(model, n_estimators=100)\n# model = GridSearchCV(model, parameters, n_jobs=-1, verbose=2, cv=3)\n\nprint(cross_val_score(model, X_train_df, y_train_label, scoring='accuracy', n_jobs=-1, cv=3)) \n\nmodel.fit(X_train_df, y_train_label)\nmodel.score(X_test_df, y_test_label)","a4fc104f":"y_pred = model.predict(test_text_df)\ny_pred = lbl_enc_test.inverse_transform(y_pred)","1c123a3d":"df = pd.DataFrame({'cuisine' : y_pred , 'id' : test_id }, columns=['id', 'cuisine'])\ndf.to_csv('submission.csv', index = False)\ndf.head()","c19332f7":"# from sklearn.linear_model import LogisticRegression\n# from sklearn.ensemble import VotingClassifier, RandomForestClassifier, AdaBoostClassifier\n\n# clf1 = LogisticRegression()\n# clf1 = OneVsRestClassifier(clf1, n_jobs=-1)\n\n# clf2 = model = LinearSVC()\n# clf2 = OneVsRestClassifier(clf2, n_jobs=-1)\n\n\n# model = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2)])\n\n\n# # model = AdaBoostClassifier(n_estimators=100)\n# r = np.arange(0.1, 1, 0.1)\n\n# parameters = {'C': r}\n\n# # model = GridSearchCV(model, parameters, n_jobs=-1, verbose=2, cv=3)\n\n# model.fit(X_train_df, y_train_label)\n# # print(cross_val_score(model, X_train_df, y_train_label, scoring='accuracy', n_jobs=-1, cv=3)) ","c174851a":"## 2. Preprocess Data","cf113708":"# Reference\n1. [Shivam Bansal's TF-IDF with OvR SVM : What's Cooking](https:\/\/www.kaggle.com\/shivamb\/tf-idf-with-ovr-svm-what-s-cooking)","d3e7479f":"## 2. Read Data","bed71bcd":"## 1. Import ","74412e86":"### 3.1. Showing Recipe Count per Cuisine","79423f7c":"## 3. Visualization","6a98b2c7":"## 5. Training ","a13092ad":"![](https:\/\/timesofoman.com\/uploads\/images\/2017\/10\/04\/746773.jpg)","d714542f":"# Exploratry Data Analysis and Prediction Model for Cuisine Prediction","a3b88a92":"## 6. Prediction ","09c8a51e":"### 1.1. Import Library","945b9d2c":"# Image Credit\n1. https:\/\/timesofoman.com\/uploads\/images\/2017\/10\/04\/746773.jpg","3eec6b1d":"## 4. Preprocessing "}}