{"cell_type":{"ea2523ed":"code","73c1f256":"code","5a60d690":"code","334f5900":"code","4f8bbaf2":"code","a4b1c367":"code","4755a0d6":"code","7c3d226d":"code","29f94644":"code","c2849dfb":"code","52644232":"code","b682be61":"code","2a23d5d2":"code","01ea1206":"code","e7b8115a":"code","e7fe6b04":"code","d074d60e":"code","5e7c4523":"code","1660678d":"code","b329924d":"code","aab4faa0":"code","e34238a7":"code","98e1abf3":"code","4f64d97c":"code","562c8e25":"code","f195bfcb":"code","d6fc0a16":"code","bef93b8a":"code","e2ccf9c4":"code","e1f16b1d":"code","e9d698ce":"code","bd918fd3":"code","6a9ede2c":"code","825b58e7":"code","005cda5d":"code","0d2afc62":"code","999f19cb":"code","6b8d259d":"code","34b00725":"code","689566b2":"markdown","29f551d4":"markdown","8056d124":"markdown","b6ae3e4c":"markdown","15aaa262":"markdown","37d0da1f":"markdown","1f4b5ac6":"markdown","80504c11":"markdown","3686441e":"markdown","fe72a238":"markdown"},"source":{"ea2523ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","73c1f256":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")","5a60d690":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_train.head()","334f5900":"df_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf_test.head()","4f8bbaf2":"df_train.shape, df_test.shape","a4b1c367":"print(df_train.isnull().sum())\nprint('**********************************************************')\nprint(df_test.isnull().sum())","4755a0d6":"df_train.drop(['Cabin'], axis = 1, inplace = True)\ndf_test.drop(['Cabin'], axis = 1, inplace = True)","7c3d226d":"df_train['Fam_size'] = df_train['SibSp'] + df_train['Parch'] + 1\ndf_test['Fam_size'] = df_test['SibSp'] + df_test['Parch'] + 1","29f94644":"df_train['Fam_type'] = pd.cut(df_train.Fam_size, [0,1,4,7,11], labels=['Solo', 'Small', 'Big', 'Very big'])\ndf_test['Fam_type'] = pd.cut(df_test.Fam_size, [0,1,4,7,11], labels=['Solo', 'Small', 'Big', 'Very big'])","c2849dfb":"df_train['Title'] = df_train['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\ndf_test['Title'] = df_test['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())","52644232":"df_train.head()","b682be61":"df_train['Title'].replace(['Mme', 'Ms', 'Lady', 'Mlle', 'the Countess', 'Dona'], 'Miss', inplace=True)\ndf_test['Title'].replace(['Mme', 'Ms', 'Lady', 'Mlle', 'the Countess', 'Dona'], 'Miss', inplace=True)\n\ndf_train['Title'].replace(['Major', 'Col', 'Capt', 'Don', 'Sir', 'Jonkheer'], 'Mr', inplace=True)\ndf_test['Title'].replace(['Major', 'Col', 'Capt', 'Don', 'Sir', 'Jonkheer'], 'Mr', inplace=True)","2a23d5d2":"df_train_copy = df_train.copy()\ndf_test_copy = df_test.copy()","01ea1206":"df_train_copy.drop(['PassengerId', 'Name', 'Ticket'], axis = 1, inplace = True)\ndf_test_copy.drop(['PassengerId', 'Name', 'Ticket'], axis = 1, inplace =True)","e7b8115a":"df_train_copy.head()","e7fe6b04":"y = df_train['Survived']\nfeatures = ['Pclass', 'Sex', 'Fare', 'Title', 'Embarked', 'Fam_type']\nX = df_train[features]\nX.head()","d074d60e":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\nnumerical_cols = ['Fare']\ncategorical_cols = ['Pclass', 'Sex', 'Title', 'Embarked', 'Fam_type']\n\nnumerical_transformer = SimpleImputer(strategy='median')\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder())\n])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","5e7c4523":"from sklearn.ensemble import RandomForestClassifier\n\ntitanic_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', RandomForestClassifier(random_state=0, n_estimators=500, max_depth=5))])\n\ntitanic_pipeline.fit(X,y)\n\nprint('Cross validation score: {:.3f}'.format(cross_val_score(titanic_pipeline, X, y, cv=10).mean()))","1660678d":"X_test = df_test[features]\nX_test.head()","b329924d":"y_pred_random_forest = titanic_pipeline.predict(X_test)","aab4faa0":"from sklearn.linear_model import LogisticRegression\ntitanic_pipeline1 = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', LogisticRegression(random_state=0))])\n\ntitanic_pipeline1.fit(X,y)\n\nprint('Cross validation score: {:.3f}'.format(cross_val_score(titanic_pipeline1, X, y, cv=10).mean()))","e34238a7":"y_pred_lr = titanic_pipeline1.predict(X_test)","98e1abf3":"from sklearn.svm import SVC\ntitanic_pipeline2 = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', SVC(kernel = 'linear', random_state=0))])\n\ntitanic_pipeline2.fit(X,y)\n\nprint('Cross validation score: {:.3f}'.format(cross_val_score(titanic_pipeline2, X, y, cv=10).mean()))","4f64d97c":"y_pred_svm = titanic_pipeline2.predict(X_test)","562c8e25":"from sklearn.neighbors import KNeighborsClassifier\ntitanic_pipeline3 = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', KNeighborsClassifier(n_neighbors = 3, metric = 'minkowski', p = 2))])\n\ntitanic_pipeline3.fit(X,y)\n\nprint('Cross validation score: {:.3f}'.format(cross_val_score(titanic_pipeline3, X, y, cv=10).mean()))","f195bfcb":"y_pred_knn = titanic_pipeline3.predict(X_test)","d6fc0a16":"from sklearn.naive_bayes import GaussianNB\ntitanic_pipeline4 = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', GaussianNB())])\n\ntitanic_pipeline4.fit(X,y)\n\nprint('Cross validation score: {:.3f}'.format(cross_val_score(titanic_pipeline4, X, y, cv=10).mean()))","bef93b8a":"y_pred_gaussian = titanic_pipeline4.predict(X_test)","e2ccf9c4":"from sklearn.tree import DecisionTreeClassifier\ntitanic_pipeline5 = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', DecisionTreeClassifier(criterion = 'entropy'))])\n\ntitanic_pipeline5.fit(X,y)\n\nprint('Cross validation score: {:.3f}'.format(cross_val_score(titanic_pipeline5, X, y, cv=10).mean()))","e1f16b1d":"y_pred_decision_tree = titanic_pipeline5.predict(X_test)","e9d698ce":"from sklearn.linear_model import SGDClassifier\ntitanic_pipeline6 = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', SGDClassifier())])\n\ntitanic_pipeline6.fit(X,y)\n\nprint('Cross validation score: {:.3f}'.format(cross_val_score(titanic_pipeline6, X, y, cv=10).mean()))","bd918fd3":"y_pred_sgd = titanic_pipeline6.predict(X_test)","6a9ede2c":"from sklearn.svm import LinearSVC\ntitanic_pipeline7 = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', LinearSVC())])\n\ntitanic_pipeline7.fit(X,y)\n\nprint('Cross validation score: {:.3f}'.format(cross_val_score(titanic_pipeline7, X, y, cv=10).mean()))","825b58e7":"y_pred_svc = titanic_pipeline7.predict(X_test)","005cda5d":"from sklearn.linear_model import Perceptron\ntitanic_pipeline8 = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', Perceptron(tol = 1e-3, random_state = 0))])\n\ntitanic_pipeline8.fit(X,y)\n\nprint('Cross validation score: {:.3f}'.format(cross_val_score(titanic_pipeline8, X, y, cv=10).mean()))","0d2afc62":"y_pred_perceptron = titanic_pipeline8.predict(X_test)","999f19cb":"from xgboost import XGBClassifier\ntitanic_pipeline9 = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', XGBClassifier())])\n\ntitanic_pipeline9.fit(X,y)\n\nprint('Cross validation score: {:.3f}'.format(cross_val_score(titanic_pipeline9, X, y, cv=10).mean()))","6b8d259d":"y_pred_xgb = titanic_pipeline9.predict(X_test)","34b00725":"submission = pd.DataFrame({\n        \"PassengerId\": df_test[\"PassengerId\"],\n        \"Survived\": y_pred_random_forest\n    })","689566b2":"## Stochastic Gradient Descent","29f551d4":"## Random Forest","8056d124":"## SVC","b6ae3e4c":"## Linear SVC","15aaa262":"## Perceptron","37d0da1f":"## Decision Tree","1f4b5ac6":"## KNN","80504c11":"## XGBoost","3686441e":"## GaussianNB","fe72a238":"## Logistic Regression"}}