{"cell_type":{"204f8b0a":"code","82c324d5":"code","a63ef343":"code","681aa8d9":"code","882eeee6":"code","c4f02fe5":"code","016b7d2f":"code","2e896ab8":"code","b207d12a":"code","e23d3908":"code","d203f9fb":"code","de632faa":"code","d4129e05":"code","65eb9662":"code","befa675a":"markdown"},"source":{"204f8b0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","82c324d5":"import tensorflow as tf \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow.keras as keras \nimport tensorflow.keras.layers as layers\nprint(tf.__version__) ##\u67e5\u770b\u7248\u672c","a63ef343":"##\u5bfc\u5165\u6570\u636e\nfrom sklearn.datasets import load_boston\ndata = load_boston()\nx = data.data\ny = data.target\n#print(x.shape,y.shape)\n\nx_train = x[0:404]\nx_test = x[404:]\nx_train.shape,x_test.shape\n\ny_train = y[0:404]\ny_test = y[404:]\n#(x_train,y_train),(x_test,y_test) = load_boston()\n\n##\u67e5\u770b\u6570\u636e\u7ef4\u5ea6\nprint(x_train.shape,y_train.shape)\nprint(y_test.shape,x_test.shape)","681aa8d9":"##\u7528 tensorflow.keras \u642d\u5efa\u7f51\u7edc\n\nmodel = keras.Sequential( [ \n     layers.Dense(32,activation = 'sigmoid',input_shape =(13,))\n    ,layers.Dense(32,activation = 'sigmoid')\n    ,layers.Dense(32,activation = 'sigmoid')\n    ,layers.Dense(1)\n     ])\n\n##\u5168\u8fde\u63a5\u5c42","882eeee6":"# \u5b9a\u4e49\u8bad\u7ec3\u6a21\u578b\nmodel.compile(optimizer=keras.optimizers.Adam(),\n             loss='mean_squared_error',  # keras.losses.mean_squared_error\n             metrics=['mse'])\nmodel.summary()\n","c4f02fe5":"##\u8bad\u7ec3\u6a21\u578b\nhistory = model.fit(x_train,y_train,batch_size=50,epochs=50,validation_split=0.2,verbose = 1)","016b7d2f":"##\u8bc4\u4f30\u6a21\u578b\n\nscores = model.evaluate(x_test,y_test)\nprint(model.metrics_names)   ##\u67e5\u770bmetrics \nscores","2e896ab8":"##\u5b66\u4e60\u66f2\u7ebf\ndef plot_learning_curves(history):\n    pd.DataFrame(history.history).plot(figsize=(8, 5))\n    plt.grid(True)\n    plt.gca().set_ylim(0, 100)\n    plt.show()\n\nplot_learning_curves(history)\n\n##\u8fd9\u91cc\u6211\u753b\u66f2\u7ebf\uff0c\u4e0d\u77e5\u9053\u4e3a\u5565\u4f1a\u8fd9\u6837..","b207d12a":"from sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow.keras as keras \nimport tensorflow.keras.layers as layers\nprint(tf.__version__) ##\u67e5\u770b\u7248\u672c\n\n\n\ndata = load_breast_cancer()\nx = data.data\ny = data.target\n\n##\u5206\u8bad\u7ec3\u96c6\u4e0e\u6d4b\u8bd5\u96c6\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 7)\n\nprint(x_train.shape,y_train.shape)\nprint(x_test.shape,y_test.shape)","e23d3908":"##\u5efa\u7acb\u6a21\u578b\nmodel = keras.Sequential( [ \n     layers.Dense(32,activation = 'relu',input_shape =(30,))\n    ,layers.Dense(32,activation = 'relu')\n    ,layers.Dense(1,activation = 'sigmoid')\n     ])","d203f9fb":"# \u914d\u7f6e\u6a21\u578b\nmodel.compile(optimizer=keras.optimizers.Adam(),\n             loss='binary_crossentropy',  # keras.losses.mean_squared_error \n              ##\u4e8c\u5206\u7c7b\u95ee\u9898\u7528\u7684loss\n             metrics=['accuracy'])\nmodel.summary()","de632faa":"##\u8bad\u7ec3\u6a21\u578b\nhistory = model.fit(x_train, y_train,validation_split=0.1, batch_size=64, epochs=100, verbose=0)","d4129e05":"##\u8bc4\u4f30\u6a21\u578b\nscores = model.evaluate(x_test,y_test)\nprint(model.metrics_names)\nscores","65eb9662":"##\u5b66\u4e60\u66f2\u7ebf\ndef plot_learning_curves(history):\n    pd.DataFrame(history.history).plot(figsize=(8, 5))\n    plt.grid(True)\n    plt.gca().set_ylim(0, 1)\n    plt.show()\n\nplot_learning_curves(history)","befa675a":"# \u5206\u7c7b\u95ee\u9898"}}