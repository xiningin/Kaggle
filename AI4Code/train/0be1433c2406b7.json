{"cell_type":{"4a5b975d":"code","146f482d":"code","91f9a785":"code","3f525ace":"code","cdf8cd41":"code","ea054240":"code","5d98afcb":"code","44afda3d":"code","0112f6a2":"code","f9fe09db":"code","8be68fe2":"code","da67ea18":"code","97b02b9c":"code","2cdd778c":"code","693e2db5":"markdown","69f05f68":"markdown","0cba628b":"markdown","0dfae03e":"markdown","dad2f3cd":"markdown","4da843f4":"markdown","50288909":"markdown","04678a69":"markdown"},"source":{"4a5b975d":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","146f482d":"import warnings\nwarnings.filterwarnings('ignore')","91f9a785":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\nnp.random.seed(42)","3f525ace":"df_raw = pd.read_csv('\/kaggle\/input\/statistics-homework\/MPG.csv')\ndf_full = df_raw.copy()","cdf8cd41":"from sklearn.preprocessing import OneHotEncoder\nonehot_encoder = OneHotEncoder()\norigin = df_full['origin'].to_numpy().reshape(-1, 1)\norigin_encoded_array = onehot_encoder.fit_transform(origin).toarray()\nassert df_full.shape[0] == origin_encoded_array.shape[0]\n\norigin_encoded_df = pd.DataFrame(origin_encoded_array, columns=['origin_A', 'origin_B', 'origin_C']).astype('int')\ndf_encoded_origin = pd.concat([df_full, origin_encoded_df], axis=1).drop('origin', axis=1)\nassert df_full.shape[1] + origin_encoded_df.shape[1] == pd.concat([df_full, origin_encoded_df], axis=1).shape[1]\n\ncategorical_columns = ['cylinders', 'modelyear']\nnumerical_columns = ['mpg', 'displacement', 'horsepower', 'weight', 'acceleration']\nassert (len(categorical_columns) + len(numerical_columns) + origin_encoded_df.shape[1]) == df_encoded_origin.shape[1]\n\ndf_encoded_ordinal = df_encoded_origin.copy()\n\nfrom sklearn.preprocessing import OrdinalEncoder, StandardScaler\nordinal_encoder = OrdinalEncoder()\n\nfor categorical_column in categorical_columns:\n    df_encoded_ordinal[categorical_column] = ordinal_encoder.fit_transform(df_encoded_ordinal[categorical_column].to_numpy().reshape(-1, 1)).astype('int')\n\ndf_scaled_numerical = df_encoded_ordinal.copy()\n\nfrom sklearn.preprocessing import StandardScaler\nnormal_scaler = StandardScaler()\n\nfor numerical_column in numerical_columns:\n    df_scaled_numerical[numerical_column] = normal_scaler.fit_transform(df_scaled_numerical[numerical_column].to_numpy().reshape(-1, 1))\n\ndf_preprocessed = df_scaled_numerical.copy()\n\ntrain, test = df_preprocessed.iloc[:360], df_preprocessed.iloc[360:]\ntrain_X, train_y_truth = train[train.columns[1:]], train[train.columns[0]]\ntest_X, test_y_truth = test[test.columns[1:]], test[test.columns[0]]","ea054240":"from sklearn.linear_model import LinearRegression\nlinear_regressor = LinearRegression()\nlinear_model = linear_regressor.fit(train_X, train_y_truth)\ntrain_y_pred_linear = linear_model.predict(train_X)\nlinear_residuals = train_y_pred_linear - train_y_truth","5d98afcb":"plt.figure(figsize=(15,7), dpi=300)\nsns.residplot(train_y_pred_linear, train_y_truth)","44afda3d":"from statsmodels.graphics.gofplots import qqplot\nfig, ax = plt.subplots(figsize=(15, 7), dpi=300)\nqqplot(linear_residuals, line='45', ax=ax);","0112f6a2":"train_r2_linear = linear_model.score(train_X, train_y_truth)\ntest_r2_linear = linear_model.score(test_X, test_y_truth)\ntest_y_pred_linear = linear_model.predict(test_X)\nfrom sklearn.metrics import mean_squared_error\nlinear_mse = mean_squared_error(test_y_truth, test_y_pred_linear)","f9fe09db":"print('train_r2_linear:', train_r2_linear)\nprint('test_r2_linear:', test_r2_linear)\nprint('linear prediction mean squared error:', linear_mse)","8be68fe2":"for variable, coefficient in zip(train_X.columns, linear_model.coef_):\n    print(variable + ': '+ str(coefficient))\nprint('intercept:', linear_model.intercept_)","da67ea18":"from sklearn.ensemble import RandomForestRegressor\nrandom_forest_regressor = RandomForestRegressor()\nrandom_forest_model = random_forest_regressor.fit(train_X, train_y_truth)\ntrain_r2_random_forest = random_forest_model.score(train_X, train_y_truth)\ntest_r2_random_forest = random_forest_model.score(test_X, test_y_truth)","97b02b9c":"test_y_pred_random_forest = random_forest_model.predict(test_X)\nrandom_forest_mse = mean_squared_error(test_y_truth, test_y_pred_random_forest)","2cdd778c":"print('train_r2_random_forest:', train_r2_random_forest)\nprint('test_r2_random_forest:', test_r2_random_forest)\nprint('random forest prediction mean squared error:', random_forest_mse)","693e2db5":"### Residual Plot","69f05f68":"### Random Forest Prediction & R2 & MSE","0cba628b":"----","0dfae03e":"## Linear Regression","dad2f3cd":"### QQ Plot","4da843f4":"## Random Forest","50288909":"## Data Preprocessing","04678a69":"### Linear Prediction & R2 & MSE"}}