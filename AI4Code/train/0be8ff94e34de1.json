{"cell_type":{"31ff9b97":"code","0396ac84":"code","63700e8c":"code","94d1cbd3":"code","27537896":"code","251cc905":"code","9c37aa69":"code","dd2207c7":"code","e514ce44":"code","11fd4869":"code","e9a99495":"code","a771b2af":"code","20ef1574":"code","ede8e05e":"code","05ca5c5f":"code","d0d0871a":"code","4edf667f":"code","05877132":"code","5b2bfdad":"code","0e923d04":"code","2d27e2d9":"code","fa6790cd":"code","bc4b27f0":"code","39b46d9f":"code","09ffe4bb":"code","b57fda6c":"code","d595e9a4":"code","9358f3d6":"code","f8ac00be":"code","9ae763d4":"code","5adeac2d":"code","fc4b05b5":"code","ddeeeff8":"code","f583f6eb":"code","43fa3643":"code","fec719b8":"code","6f7e1053":"code","667fe6b2":"code","32a7052f":"code","cca19658":"code","ed62230e":"code","190f36d2":"code","0e73eb0e":"code","5d468981":"code","62abc62b":"code","0fe06ee0":"code","68db3977":"code","c755e960":"code","0f3412f3":"code","7683a0e8":"code","f1c1dc64":"code","d44987f5":"code","f6f75ab5":"code","d134118c":"code","cf31466d":"code","08e89e46":"code","fa988663":"code","6264978d":"code","91f30b4d":"code","22742b53":"code","7d54a29b":"code","72a98eb2":"code","4d6dc04c":"code","1c9b19eb":"code","6c4d0b1c":"code","a0546178":"code","1c3b840b":"code","1ddb185e":"code","7e332d3d":"code","2cc722d0":"code","790aa578":"code","6ba3ec58":"code","76e47a45":"code","07de2184":"code","36e36f84":"code","46ffdcd4":"code","51017adc":"code","f61212ef":"code","90589013":"code","2d84c646":"code","7ef058d2":"code","3cfa09cb":"code","6ef9e2ac":"code","ed9c6b91":"code","8a6111c2":"code","c4e835d5":"code","daa96f41":"code","be19df2f":"code","c93a2663":"code","83afbbfc":"code","23fd4f21":"code","b5e438cd":"code","ba67b65f":"code","bd7fda0d":"markdown","988d78ca":"markdown","2f9f7e9e":"markdown","c5788267":"markdown","b876c54b":"markdown","8ead0e98":"markdown","6c5ca171":"markdown","1c4224fe":"markdown","f928b4ff":"markdown","831640cf":"markdown","a78fd499":"markdown","19acf47e":"markdown"},"source":{"31ff9b97":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0396ac84":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np","63700e8c":"data= pd.read_csv('\/kaggle\/input\/bmw-pricing-challenge\/bmw_pricing_challenge.csv')","94d1cbd3":"data.head(10)","27537896":"data.shape","251cc905":"data.info()","9c37aa69":"# Let's understand no.of unique values in each feature\nfor feat in data.columns:\n    print(data[feat].value_counts())\n    print(40*'-')","dd2207c7":"# since all the cars are BMW, We are going to remove marker_key \ndel data['maker_key']","e514ce44":"# Checking for null values\ndata.isnull().sum()","11fd4869":"data.describe().round(2).T","e9a99495":"# Understanding skewness of each variable\ndata.skew()","a771b2af":"plt.figure(figsize=(8,8))\nsns.heatmap(data.corr().round(2),cmap='viridis', annot=True)","20ef1574":"data.hist(figsize=(12,12))\nplt.show()","ede8e05e":"data.plot(kind='density', subplots=True, layout=(3,3), sharex=False, figsize=(12,12), title='Analysis of Distribution of variables')\nplt.tight_layout()\nplt.show()","05ca5c5f":"data.plot(kind='box', subplots=True, layout=(3,3), sharex=False, figsize=(12,12), title='Analysis of Distribution of variables')\nplt.tight_layout()\nplt.show()","d0d0871a":"plt.figure(figsize=(12,6))\nsns.kdeplot(data=data, x='price')\nplt.title('Distribution of Price', size=20)","4edf667f":"plt.figure(figsize=(12,6))\nsns.boxplot(y=data['price'])\nplt.title('Distribution of Price', size=20)","05877132":"upper= data['price'].quantile(0.999)\nlower= data['price'].quantile(0.01)","5b2bfdad":"print(upper)\nprint(lower)","0e923d04":"data= data[(data['price']>lower)&(data['price']<upper)]","2d27e2d9":"data.shape","fa6790cd":"plt.figure(figsize=(12,6))\nsns.boxplot(y=data['price'])\nplt.title('Distribution of Price', size=20)","bc4b27f0":"plt.figure(figsize=(12,6))\nsns.kdeplot(data=data, x='mileage')\nplt.title('Distribution of Mileage', size=20)","39b46d9f":"plt.figure(figsize=(12,6))\nsns.boxplot(y=data['mileage'])\nplt.title('Distribution of Mileage', size=20)","09ffe4bb":"upper= data['mileage'].quantile(0.999)\nlower= data['mileage'].quantile(0.001)","b57fda6c":"print(upper)\nprint(lower)","d595e9a4":"data= data[(data['price']>lower)&(data['price']<upper)]","9358f3d6":"data.shape","f8ac00be":"plt.figure(figsize=(12,6))\nsns.boxplot(y=data['mileage'])\nplt.title('Distribution of Mileage', size=20)","9ae763d4":"plt.figure(figsize=(12,6))\nsns.kdeplot(data=data, x='engine_power')\nplt.title('Distribution of Engine Power', size=20)","5adeac2d":"plt.figure(figsize=(12,6))\nsns.boxplot(y=data['engine_power'])\nplt.title('Distribution of Engine Power', size=20)","fc4b05b5":"upper= data['engine_power'].quantile(0.99)\nlower= data['engine_power'].quantile(0.01)","ddeeeff8":"print(upper)\nprint(lower)","f583f6eb":"data= data[(data['engine_power']>lower)&(data['engine_power']<upper)]","43fa3643":"data.shape","fec719b8":"data.plot(kind='box', subplots=True, layout=(3,3), sharex=False, figsize=(12,12), title='Analysis of Distribution of variables')\nplt.tight_layout()\nplt.show()","6f7e1053":"data.head()","667fe6b2":"# Model\nmodels=data['model_key'].value_counts()\nmodels","32a7052f":"plt.figure(figsize=(14,7))\nsns.countplot(data=data, x='model_key',order=data['model_key'].value_counts().index)\nplt.xticks(rotation=90)\nplt.show()","cca19658":"# Fuel\nfuel=data['fuel'].value_counts()\nfuel","ed62230e":"plt.figure(figsize=(14,7))\nsns.countplot(data=data, x='fuel',order=data['fuel'].value_counts().index)\nplt.xticks(rotation=90)\nplt.show()","190f36d2":"del data['fuel']","0e73eb0e":"# Paint color\npaint= data['paint_color'].value_counts()\npaint","5d468981":"plt.figure(figsize=(14,7))\nsns.countplot(data=data, x='paint_color',order=data['paint_color'].value_counts().index)\nplt.xticks(rotation=90)\nplt.show()","62abc62b":"top_6_paints= paint[:6]","0fe06ee0":"data['paint_color']= data['paint_color'].apply(lambda x:x if x in top_6_paints else 'other')","68db3977":"data['paint_color'].value_counts()","c755e960":"# car type\ncar_type= data['car_type'].value_counts()\ncar_type","0f3412f3":"plt.figure(figsize=(14,7))\nsns.countplot(data=data, x='car_type',order=data['car_type'].value_counts().index)\nplt.xticks(rotation=90)\nplt.show()","7683a0e8":"top_3_car_type= car_type[:3]","f1c1dc64":"data['car_type']= data['car_type'].apply(lambda x:x if x in top_3_car_type else 'other')","d44987f5":"data['car_type'].value_counts()","f6f75ab5":"for feat in data[['feature_1', 'feature_2', 'feature_3', 'feature_4', 'feature_5',\n                 'feature_6','feature_7','feature_8']]:\n    sns.countplot(data=data, x=feat,order=data[feat].value_counts().index)\n    plt.xticks(rotation=90)\n    plt.show()","d134118c":"data.head()","cf31466d":"# Converting registration date and sold date into datetime variables\ndata['registration_date']= pd.to_datetime(data['registration_date'])\ndata['sold_at']= pd.to_datetime(data['sold_at'])","08e89e46":"# Extracting registration year and month\ndata['registration_year']= data['registration_date'].dt.year\ndata['registration_month']= data['registration_date'].dt.month","fa988663":"# Extracting  year and month of sold\ndata['sold_year']= data['sold_at'].dt.year\ndata['sold_month']= data['sold_at'].dt.month","6264978d":"data.head()","91f30b4d":"# Extracting years used\ndata['years_used']= data['sold_year'] - data['registration_year']","22742b53":"data.head()","7d54a29b":"data['years_used'].value_counts()","72a98eb2":"data['sold_year'].value_counts()","4d6dc04c":"sns.kdeplot(data['years_used'])","1c9b19eb":"upper= data['years_used'].quantile(0.99)\nlower= data['years_used'].quantile(0.01)","6c4d0b1c":"print(upper)\nprint(lower)","a0546178":"data= data[(data['years_used']>lower)&(data['years_used']<upper)]","1c3b840b":"data.shape","1ddb185e":"# removing some irrelevent features\ndel data['registration_date']\ndel data['sold_at']\ndel data['sold_year']\ndel data['model_key']","7e332d3d":"plt.figure(figsize=(8,8))\nsns.heatmap(data.corr().round(2),cmap='viridis', annot=True)","2cc722d0":"# years used and registration year is higly correlated. so removing it\ndel data['registration_year']","790aa578":"sns.lineplot(data=data, x='registration_month', y='price')","6ba3ec58":"sns.lineplot(data=data, x='sold_month', y='price')","76e47a45":"data.head()","07de2184":"sns.lineplot(data=data, x='years_used', y='price')\nplt.title('No.years used VS price of Car', size=18)","36e36f84":"data_encoded= pd.get_dummies(data,\n                             columns=['paint_color', 'car_type', 'registration_month', 'sold_month'],\n                             drop_first=True)","46ffdcd4":"data_encoded.head()","51017adc":"print(data.shape)\nprint(data_encoded.shape)\n","f61212ef":"#Casting True\/Fasle to 1\/0 \ndata_encoded['feature_1']=data_encoded['feature_1'].astype('int')\ndata_encoded['feature_2']=data_encoded['feature_2'].astype('int')\ndata_encoded['feature_3']=data_encoded['feature_3'].astype('int')\ndata_encoded['feature_4']=data_encoded['feature_4'].astype('int')\ndata_encoded['feature_5']=data_encoded['feature_5'].astype('int')\ndata_encoded['feature_6']=data_encoded['feature_6'].astype('int')\ndata_encoded['feature_7']=data_encoded['feature_7'].astype('int')\ndata_encoded['feature_8']=data_encoded['feature_8'].astype('int')","90589013":"pd.set_option('display.max_columns',None)\ndata_encoded.head()","2d84c646":"data_encoded.info()","7ef058d2":"# Split into target (price) and features\nX= data_encoded.drop('price', axis=1)\ny= data_encoded.price","3cfa09cb":"# Train test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test= train_test_split(X, y, train_size=0.8, random_state=32)","6ef9e2ac":"print(X_train.shape, X_test.shape)","ed9c6b91":"# Standardising Data\nfrom sklearn.preprocessing import RobustScaler\nscaler= RobustScaler().fit(X_train)\nX_train_scaled= scaler.transform(X_train)\nX_test_scaled= scaler.transform(X_test)","8a6111c2":"import warnings \nwarnings.simplefilter(action='ignore', category=FutureWarning)  \n# TensorFlow and tf.keras\nimport tensorflow as tf \nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout,Flatten\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy, BinaryCrossentropy\nfrom tensorflow.keras.callbacks import TensorBoard,EarlyStopping","c4e835d5":"model= Sequential()\nmodel.add(tf.keras.layers.Dense(512, activation='relu', input_shape=(len(X_train.keys()),)))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dense(32, activation='relu'))\nmodel.add(tf.keras.layers.Dense(16, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1))\n","daa96f41":"model.compile(loss='mse',\n              optimizer='adam',\n              metrics=['mse','mae']\n)","be19df2f":"es_callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=2, \n                                               restore_best_weights=True,\n                                               verbose=1)\nhistory=model.fit(X_train_scaled, y_train, validation_split=0.1, epochs=50, callbacks=[es_callback])","c93a2663":"def plot_loss(history):\n  plt.plot(history.history['loss'], label='loss')\n  plt.plot(history.history['val_loss'], label='val_loss')\n  plt.xlabel('Epoch')\n  plt.ylabel('Error [Price]')\n  plt.legend()\n  plt.grid(True)","83afbbfc":"plot_loss(history)","23fd4f21":"model.evaluate(X_test_scaled, y_test)","b5e438cd":"test_predictions = model.predict(X_test_scaled).flatten()\na = plt.axes(aspect='equal')\nplt.scatter(y_test, test_predictions)\nplt.xlabel('True Values [price]')\nplt.ylabel('Predictions [price]')\nlims = [0, 80000]\nplt.xlim(lims)\nplt.ylim(lims)\n_ = plt.plot(lims, lims)","ba67b65f":"from sklearn.metrics import mean_squared_error,mean_absolute_error,explained_variance_score\nfrom sklearn.metrics import r2_score\nprint('Explained_varianve_score={}'.format( explained_variance_score(y_test,test_predictions)))\nprint('R-squared={}'.format( r2_score(y_test,test_predictions)))","bd7fda0d":"## Analysis of Mileage","988d78ca":"## Analysing features from feature 1 to 8","2f9f7e9e":"* Variables like Price, feature 7 are showing high skewness","c5788267":"## Analysing Price","b876c54b":"## Analysing car type","8ead0e98":"* Some outliers can be seen in price","6c5ca171":"## Analysing Model","1c4224fe":"* Price has a noticable +ve correlation with Engine Power\n* Among 8 unknown features, feature 4 and feature 8 are more correlated with Price\n* The Mileage is negatively correlated with Price","f928b4ff":"### Analysing Paint type","831640cf":"## Analysis of Engine Power","a78fd499":"* Fuel type is highly skewed towards Diesel. So we are not considering it for modelling","19acf47e":"* It doesnot makesense to have -ve mileage\n* Cars with engine power 0 also has sold. This might be cars without engine part "}}