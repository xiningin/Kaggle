{"cell_type":{"c1dbf995":"code","d7aa5088":"code","0059a82c":"code","52b36b4f":"code","8e61d0d4":"code","c8e08eb9":"code","63eb5b2a":"code","e714b873":"code","637890b3":"code","19ec659f":"markdown","722d86f5":"markdown","5b7c5d66":"markdown","769844da":"markdown"},"source":{"c1dbf995":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7aa5088":"df_train_cust = pd.read_csv('\/kaggle\/input\/restaurant-recommendation-challenge\/train_customers.csv')\ndf_train_cust.rename(columns={'akeed_customer_id':'customer_id'},inplace=True)\ndf_train_cust.set_index('customer_id',inplace=True)","0059a82c":"df_orders = pd.read_csv('\/kaggle\/input\/restaurant-recommendation-challenge\/orders.csv')\ndf_orders['created_at'] = pd.to_datetime(df_orders.created_at)\ndf_orders.set_index(['customer_id','akeed_order_id'],inplace=True)\n\n# We can only try to train models based on previous orders\n# for users who have more than one order.\ndf_orders['order_number']=(df_orders\n .groupby(level = 'customer_id')['created_at']\n .rank(method='first',ascending=True)\n)\n\ndf_orders = df_orders.join(\n    df_orders\n    .reset_index()\n    .groupby('customer_id')\n    .agg(\n        total_orders = ('akeed_order_id','count')\n    )\n).sort_index()\n\n# set a flag for the most recent order for each user\ndf_orders['last_order'] = np.where(df_orders.total_orders == df_orders.order_number,1,np.nan)\n","52b36b4f":"# we want to predict the most recent orders.\norders_to_predict = (df_orders\n                     .query('last_order == 1')\n                     .query('total_orders >= 2')\n                    )\n","8e61d0d4":"to_predict_list = orders_to_predict.reset_index().akeed_order_id.to_list()\n\n\n# for each customer we want \n# % of times there fav (most frequently visited) restraunt was ordered\n# removing the most recent order as this is what we want to predict.\nfav_restraunts = (\n    df_orders\n    .query('akeed_order_id not in @to_predict_list')\n    .reset_index()\n    .groupby(['customer_id','vendor_id'])\n    .agg({'akeed_order_id':'count'})\n    .join(\n        df_orders\n        .query('akeed_order_id not in @to_predict_list')\n        .reset_index()\n        .groupby('customer_id')\n        .agg(total_orders = ('akeed_order_id','count'))\n    )\n    .assign(\n        percentage = lambda x:x['akeed_order_id']\/x['total_orders']\n    )\n    \n)\n\n# get the most frequently visited restraunt for each user.\nfav_restraunts = fav_restraunts[\n    fav_restraunts.groupby(level='customer_id')['percentage'].transform(max) == fav_restraunts.percentage\n][['total_orders','percentage']]\n","c8e08eb9":"# join on to the orders to predict and flag if the n+1 order is\n# the same as there most popular\nfav_restraunts = fav_restraunts.join(\n    orders_to_predict\n    .reset_index()\n    .set_index('customer_id')['vendor_id'].rename('recent_order'),\n    how = 'inner'\n)\n\nfav_restraunts['ordered_fav'] = fav_restraunts['recent_order'] == fav_restraunts.index.get_level_values('vendor_id')\n\nfav_restraunts.head()","63eb5b2a":"# bin the percentages \n\nnum_bins = 10\nbins = [0 + i\/num_bins for i in range(num_bins+1)]\ndef bin_values(value, bins = bins):\n    if bins[-1]<=value:\n        return bins[-1]\n    for x in bins:\n        if value < x:\n            return x\n    \nfav_restraunts['percentage_bin'] = fav_restraunts.percentage.apply(bin_values)\n    \n    \n\n","e714b873":"# compute the probability of choosing most selected restraunt\nres = []\nfor percentage_bin,group in fav_restraunts.groupby('percentage_bin'):\n    p_a_b = group.ordered_fav.sum()\/group.ordered_fav.count()\n    res.append({'bin':percentage_bin, 'probability': p_a_b})\nres = pd.DataFrame(res)","637890b3":"display(res)\nax = res.plot(kind='bar',x='bin',y='probability',legend=False)\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n_ = ax.set_ylabel('Probability of revisiting frequently visited vendor')\n_ = ax.set_xlabel('% visited most frequently visied vendor')","19ec659f":"Probability of user reordering from the same restraunt increases as the frequency they have reorded increases up to 90%. Users who have ordered from a restraunt 100% are made up of users who have only made 1 purchase.","722d86f5":"# Load + prepare the data","5b7c5d66":"\n# How likely are they to order their most frequently ordered restraunt?","769844da":"\n# How likely are they to order their most frequently ordered restraunt?\n\nSeems like an easy first step is to see how likely users are to revisit previous restraunts.\n\nThis could maybe be improved if we combine with users who have visited a certain number of restraunts."}}