{"cell_type":{"4f97e033":"code","7163729c":"code","89e101c1":"code","404edc45":"code","d2ab0dc4":"code","c5a6e556":"code","7dcbf514":"code","dd3686ff":"code","38f6e931":"markdown","02fd8293":"markdown"},"source":{"4f97e033":"import numpy as np \n","7163729c":"#Helper Functions\n\nimport numpy as np\ndef sigmoid(x):\n    return 1 \/ (1 + np.exp(-x))\n# derivative of sigmoid\n# sigmoid(y) * (1.0 - sigmoid(y))\n# the way we use this y is already sigmoided\ndef sigmoid_derivative(y):\n    return y * (1.0 - y) ","89e101c1":"class NeuralNetwork:\n    def __init__(self, x, y):\n        self.input      = x\n        self.weights1   = np.random.rand(self.input.shape[1],4) \n        self.weights2   = np.random.rand(4,1)                 \n        self.y          = y\n        self.output     = np.zeros(self.y.shape)\n\n    def feedforward(self):\n        self.layer1 = sigmoid(np.dot(self.input, self.weights1))\n        self.output = sigmoid(np.dot(self.layer1, self.weights2))\n\n    def backprop(self):\n        # application of the chain rule to find derivative of the loss function with respect to weights2 and weights1\n        d_weights2 = np.dot(self.layer1.T, (2*(self.y - self.output) * sigmoid_derivative(self.output)))\n        d_weights1 = np.dot(self.input.T,  (np.dot(2*(self.y - self.output) * sigmoid_derivative(self.output), self.weights2.T) * sigmoid_derivative(self.layer1)))\n\n        # update the weights with the derivative (slope) of the loss function\n        self.weights1 += d_weights1\n        self.weights2 += d_weights2","404edc45":"X = np.array([[0,0,1],[0,1,1],[1,0,1],[1,1,1]])\ny = np.array([[0],[1],[1],[0]])\nnn = NeuralNetwork(X,y)","d2ab0dc4":"#epochs\nfor i in range(1000):\n    nn.feedforward()\n    nn.backprop()","c5a6e556":"nn.weights1","7dcbf514":"nn.weights2","dd3686ff":"for i in range(y.shape[0]):\n    print(nn.output[i],y[i])","38f6e931":"![](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*7zxb2lfWWKaVxnmq2o69Mw.png)","02fd8293":"![](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*sX6T0Y4aa3ARh7IBS_sdqw.png)"}}