{"cell_type":{"a7f03aef":"code","5d3cc301":"code","4b2343b7":"code","d9b5f91a":"code","a11132cd":"code","9f79a98f":"code","682eeb9a":"code","695d18b2":"code","fb78ca30":"code","ca542fcb":"code","644d1ede":"code","dbc446cd":"code","f78c9c05":"code","31051db3":"code","b6702f2e":"code","dcf0002d":"code","e791f5ce":"code","a768dde1":"code","e4b105cd":"code","726acdb0":"code","145ddf76":"code","337444ba":"markdown"},"source":{"a7f03aef":"import pandas as pd\nimport numpy as np\ndf=pd.read_csv(\"..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv\")","5d3cc301":"df.head()","4b2343b7":"df.describe()","d9b5f91a":"df.info()","a11132cd":"df.isna().sum()","9f79a98f":"df['salary'].fillna(value=df[\"salary\"].mean(), inplace=True)\n","682eeb9a":"import matplotlib.pyplot as plt\nfor i in df.columns:\n    if df[i].dtypes==\"object\":\n        df[i].value_counts().plot(kind=\"barh\")\n        plt.show()","695d18b2":"for i in df.columns:\n    if df[i].dtypes!=\"object\":\n        print(i)\n        df[i].hist()\n        plt.show()","fb78ca30":"df[\"salary\"]=np.log(df[\"salary\"])","ca542fcb":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['gender'] = le.fit_transform(df['gender'])\ndf['ssc_b'] = le.fit_transform(df['ssc_b'])\ndf['workex'] = le.fit_transform(df['workex'])\ndf['specialisation'] = le.fit_transform(df['specialisation'])\ndf['status'] = le.fit_transform(df['status'])\ndf['hsc_b'] = le.fit_transform(df['hsc_b'])\ndf['hsc_s'] = le.fit_transform(df['hsc_s'])\ndf['degree_t'] = le.fit_transform(df['degree_t'])","644d1ede":"import seaborn as sns\nplt.figure(figsize=(15,10))\ncorr = df.corr()\nsns.heatmap(corr, annot = True)","dbc446cd":"X=df.drop(\"status\",axis=1)\ny=df[\"status\"]","f78c9c05":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 43)\n","31051db3":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()\nrfc.fit(X_train,y_train)","b6702f2e":"rfc.score(X_test,y_test)","dcf0002d":"from sklearn.preprocessing import MinMaxScaler\n\n# fit scaler on training data\nnorm = MinMaxScaler().fit(X_train)\n\n# transform training data\nX_train_norm = norm.transform(X_train)\n\n# transform testing dataabs\nX_test_norm = norm.transform(X_test)","e791f5ce":"rfc1=RandomForestClassifier()\nrfc1.fit(X_train_norm,y_train)","a768dde1":"rfc1.score(X_test_norm,y_test)","e4b105cd":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n","726acdb0":"rfc2=RandomForestClassifier()\nrfc2.fit(X_train,y_train)","145ddf76":"rfc2.score(X_test,y_test)","337444ba":"## Imputing missing values with fillna "}}