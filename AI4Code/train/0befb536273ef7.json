{"cell_type":{"0d83aaee":"code","d4eda09e":"code","fbf5f24b":"code","429d9797":"code","bf89ad92":"code","75184709":"code","2f05deed":"code","1903b35b":"code","eef1b76b":"code","f6de7d01":"code","0fe66d01":"code","d1678df8":"code","73bb56d6":"code","77d72019":"code","f9f93992":"code","263e439c":"code","21fa469b":"code","0bdc82b2":"code","e8733db9":"code","bb1a49b7":"code","126f202c":"code","817ffa4c":"markdown"},"source":{"0d83aaee":"import numpy as np\nimport pandas as pd\nimport keras\nimport re\nfrom keras.layers import Embedding, Flatten, Dense\nfrom sklearn.metrics.pairwise import cosine_similarity\n!pip install glove_python","d4eda09e":"from glove import Corpus, Glove","fbf5f24b":"#Creating a corpus object\ncorpus = Corpus() \n\nlines=[\"Hello this is a tutorial on how to convert the word in an integer format\",\"this is a beautiful day\",\"Jack is going to office\"]\nnew_lines=[] \nfor line in lines: \n    new_lines.append(line.split(' ')) #new lines has the new format lines=new_lines\n    \nnew_lines","429d9797":"# read data\ndata= pd.read_excel(\"..\/input\/hindisongsexcelsupportedformat\/processedSongs.xlsx\" )\n\n# preprocessing function for any song\ndef preprocessSong(song):\n    dataset = ''\n    listOfWords = re.split(r'[;,\\s...\\n()\\'!?.]\\s*',song) # gets me a list of words\n    for word in listOfWords:\n#         if word ==  '' || word=='(' || word==')' || word =='\\'':\n#             pass\n#         else:\n        word = word.lower()\n        if word == 'x2':\n            continue\n        if word == 'x4':\n            continue\n        dataset+=' '+word\n    return dataset","bf89ad92":"lyrics = list(data.songLyrics)\nmyProcessedSongs = []\nfor song in lyrics:\n    mysong = preprocessSong(song)\n    song_words = []\n    for word in mysong.split(' '):\n        if word!='':\n            song_words.append(word)\n    myProcessedSongs.append(song_words)\n","75184709":"myProcessedSongs","2f05deed":"#Training the corpus to generate the co occurence matrix which is used in GloVe\ncorpus.fit(myProcessedSongs, window=30)\n\nglove = Glove(no_components=30, learning_rate=0.05) \nglove.fit(corpus.matrix, epochs=30, no_threads=4, verbose=True)\nglove.add_dictionary(corpus.dictionary)\nglove.save('glove_hindi_songs.model')\n\nfemale_names=['ladki','girl','gori','lady','kudi','chhori','woman']\nmale_names=['ladka','munda','mundey','boy','chokra','chhora','man']\n\ncolor =['sanwali','saanwala','pink','pinky','red','laal','kaala','kaali','gori','gora','white','black','yellow','brown']\n\nsoftAttitude=['bholi','bhola','heeran','hirni','nadaan','beautiful','mastani','mastana','seedhi','seedha','sharmili','sharmeela','sohni','sohna','bhali','bhala']\nstrongAttitude=['kukkad','bigda','bigdi','khatra','khauf','handa','jungli','badmash','gussa']\n\ncars=['car', 'gaddi','drive','lamborghini','jaguar','gaadi','motorcycle']\nclothes=['jeans','skirt','shirt','lehnga','chunni','ainak','ghagra','kurta','pajama','jacket','choodi','jhumka','chasma','chashma','kangan','top']\nfood=['namkeen','mithi','tikhi','teekha','khatti','makkhan','sweet','nimbu','imli','mitthe','rasmalai','mirchi','mishti','naariyal']\nalcohol=['daaru','whisky','daru','pila','botal','peg','shots','drink','peeta']\nbodylooks=['choti','chota','cheeks','adayein','thumka','aankhen','aankhein','nazron','charming']\n\n\nimport numpy as np\nfrom sklearn.metrics.pairwise import cosine_similarity\n \n# def cosine_similarity(np_array_1, np_array_2):\n#     a = np_array_1\n#     b = np_array_2\n#     # manually compute cosine similarity\n#     dot = np.dot(a, b)\n#     norma = np.linalg.norm(a)\n#     normb = np.linalg.norm(b)\n#     cos = dot \/ (norma * normb)\n#     # use library, operates on sets of vectors\n#     return cos\n    \ndef unit_vector(vec):\n    \"\"\"\n    Returns unit vector\n    \"\"\"\n    return vec \/ np.linalg.norm(vec)\n\ndef cosine_similarity(v1, v2):\n    \"\"\"\n    Returns cosine of the angle between two vectors\n    \"\"\"\n    v1_u = unit_vector(v1)\n    v2_u = unit_vector(v2)\n    return np.clip(np.tensordot(v1_u, v2_u, axes=(-1, -1)), -1.0, 1.0)\n    \n\nvec1 = glove.word_vectors[glove.dictionary['ladki']] \nvec2 = glove.word_vectors[glove.dictionary['ladka']] \n\nprint(cosine_similarity((vec1), vec2))\n\ndef weat_test(target_one,target_two, target_one_words, attribute_one,attribute_two, attribute_one_words, target_two_words, attribute_two_words):\n    cos=[]\n    s=0\n    s1=[]\n    s2=[]\n    S=[]\n    n=0\n        \n    for i in range(0, len(target_one_words)):\n            c1=[]\n            c2=[]\n            for k in range(0, len(attribute_one_words)):\n                wt = target_one_words[i]\n                at1 = attribute_one_words[k]\n                try:\n                    vec1 = glove.word_vectors[glove.dictionary[wt]]\n                    vec2 = glove.word_vectors[glove.dictionary[at1]]\n                    cos1 = cosine_similarity(vec1, vec2)\n                    cos.append(cos1)\n                    c1.append(cos1)\n                except:\n                    cos1=0\n                    cos.append(cos1)\n                    c1.append(cos1)\n                    continue\n            for k in range(0, len(attribute_two_words)):\n                cos2=0\n                wt = target_one_words[i]\n                at2 = attribute_two_words[k]\n                try:\n                    vec1 = glove.word_vectors[glove.dictionary[wt]]\n                    vec2 = glove.word_vectors[glove.dictionary[at2]]\n                    cos2 = cosine_similarity(vec1, vec2)\n                    cos.append(cos2)\n                    c2.append(cos2)\n                except:\n                    cos2=0\n                    cos.append(cos2)\n                    c2.append(cos2)\n                    continue\n            s1.append((np.mean(c1)-np.mean(c2)))\n            S.append((np.mean(c1)-np.mean(c2)))\n            n=n+1\n    for i in range(0, len(target_two_words)):\n            c1=[]\n            c2=[]\n            for k in range(0, len(attribute_one_words)):\n                wt = target_two_words[i]\n                at1 = attribute_one_words[k]\n                try:\n                    vec1 = glove.word_vectors[glove.dictionary[wt]]\n                    vec2 = glove.word_vectors[glove.dictionary[at1]]\n                    cos1 = cosine_similarity(vec1, vec2)\n                    cos.append(cos1)\n                    c1.append(cos1)\n                except:\n                    cos1=0\n                    cos.append(cos1)\n                    c1.append(cos1)\n                    continue\n            for k in range(0, len(attribute_two_words)):\n                cos2=0\n                wt = target_two_words[i]\n                at2 = attribute_two_words[k]\n                try:\n                    vec1 = glove.word_vectors[glove.dictionary[wt]]\n                    vec2 = glove.word_vectors[glove.dictionary[at2]]\n                    cos2 = cosine_similarity(vec1, vec2)\n                    cos.append(cos2)\n                    c2.append(cos2)\n                except:\n                    cos2=0\n                    cos.append(cos2)\n                    c2.append(cos2)\n                    continue\n            s2.append((np.mean(c1)-np.mean(c2)))\n            S.append((np.mean(c1)-np.mean(c2)))\n    s=np.sum(s1)-np.sum(s2)\n    stdev=np.std(S)\n    print(target_one + ' vs ' + target_two  + ' , ' +attribute_one + ' vs ' + attribute_two +', d = ' + str(s\/(stdev*n)))\n\ndef avg_similarity(target,attribute):\n   \n    S=[]\n    \n    for i in range(0, len(target)):\n        \n#         cos.append(model.similarity(target[i],attribute))\n#             c1=[]\n        maxlist=[]    \n    \n        vec1 = glove.word_vectors[glove.dictionary[target[i]]] \n        \n        for k in range(0, len(attribute)):\n            \n            vec2 = glove.word_vectors[glove.dictionary[attribute[k]]] \n            maxlist.append(cosine_similarity(vec1, vec2))\n            \n        maxlist.sort(reverse=True)\n        \n        for j in range(0,4):\n            S.append(maxlist[j])\n            \n        ans= np.array(S).sum()\/(len(target)*4)\n    return ans\n\nprint()\nprint()\nprint(\"Weat test results are \")\nprint(weat_test('female_names','male_names', female_names, 'softAttitude' ,'strongAttitude', softAttitude, male_names, strongAttitude))\n\natt=['color','softAttitude','strongAttitude','cars','clothes','food','alcohol','bodylooks']\natt1=[color,softAttitude,strongAttitude,cars, clothes,food,alcohol,bodylooks]\nfemale_score=[]\nmale_score=[]\n\nfor i in att1:\n    \n    female_score.append(avg_similarity(female_names,i))\n    male_score.append(avg_similarity(male_names,i))      \n    \nsupport1=pd.DataFrame({'attribute':att,'female_names':female_score,'male_names':male_score})\n\nprint(support1)","1903b35b":"print(glove.word_vectors[glove.dictionary['ladki']])","eef1b76b":"glove.most_similar(\"ladki\",number = 20)","f6de7d01":"support1","0fe66d01":"# np.loadtxt('..\/input\/glove.6B.50d.txt')\nimport pandas as pd\ndef read_glove_vectors(trainedWeightsFile = \"..\/input\/glove.6B.50d.txt\"):\n    f = open(trainedWeightsFile)\n    word_embeddings_matrix = {}\n    for wordAndEmbeddings in f:\n        line = wordAndEmbeddings.split()\n        word= line[0]\n        coefs = np.asarray(line[1:], dtype = 'float32')\n        word_embeddings_matrix[word] = coefs\n    f.close()\n    return word_embeddings_matrix","d1678df8":"embedding_matrix = read_glove_vectors()\n# print(len(embedding_matrix))\nword_embeddings_matrix = embedding_matrix\n","73bb56d6":"embedding_matrix['ashish']","77d72019":"apple = embedding_matrix['apple']\n# apple = np.array(apple)","f9f93992":"lion = embedding_matrix['lion']\n# lion = np.array(lion)","263e439c":"orange = embedding_matrix['orange']\n# orange = np.array(orange)\nprint(orange)","21fa469b":"# print(orange)\nprint(cosine_similarity(apple.reshape(1,-1), orange.reshape(1,-1)))","0bdc82b2":"def generate_similar_words(wrd1, wrd2, wrd3):\n    w1 = np.array(embedding_matrix[wrd1]).reshape(1,-1)\n    w2 = np.array(embedding_matrix[wrd2]).reshape(1,-1)\n    w3 = np.array(embedding_matrix[wrd3]).reshape(1,-1)\n    options = ['giraffe', 'tiger', 'monkey', 'chimpanzee', 'duck','bird', 'ducks', 'lion', 'goat']\n    tar = ''\n    max_sim = -10000\n    for word in options:\n        if word in (wrd1, wrd2, wrd3):\n            continue\n        word_tar = np.array(embedding_matrix[word]).reshape(1,-1)\n        sim = cosine_similarity((w3-(w1-w2)).reshape(1,-1),word_tar.reshape(1,-1))\n        if(sim>max_sim):\n            max_sim = sim\n            tar = word\n    return tar","e8733db9":"generate_similar_words('monkey', 'chimpanzee', 'duck')","bb1a49b7":"# f = open('..\/input\/glove.6B.50d.txt')\n# for line in f:\n#     print(line)","126f202c":"import pandas as pd\nprocessedSongs = pd.read_csv(\"..\/input\/processedSongs.csv\")","817ffa4c":"## WEAT Test for Glove"}}