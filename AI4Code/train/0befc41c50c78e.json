{"cell_type":{"1ec8ee4d":"code","50625a7f":"code","ad62c348":"code","5c27a527":"code","9ce1488f":"code","d4900cf4":"code","25b466ab":"code","bdb71c10":"code","5de189b1":"code","8e365651":"code","57fb2bb3":"code","7e36d7f4":"code","bdc6bcad":"code","fa7d5fc1":"code","0998f99f":"code","9306f0c9":"code","fc983d09":"code","7dbb7e0c":"markdown"},"source":{"1ec8ee4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","50625a7f":"import tensorflow as tf","ad62c348":"print(tf.__version__)","5c27a527":"from tensorflow.keras.datasets import mnist\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()","9ce1488f":"train_images.shape","d4900cf4":"# train_images[0]\ntrain_images[0].ndim","25b466ab":"train_images[0].shape","bdb71c10":"train_labels[0]","5de189b1":"train_labels[2]","8e365651":"from tensorflow.keras import models\nfrom tensorflow.keras import layers\n\nnetwork = models.Sequential()\nnetwork.add(layers.Dense(512, activation='relu', input_shape=(28 * 28,)))\n# MultiClassification Problem so \"Softmax\"\nnetwork.add(layers.Dense(10, activation='softmax'))\n# probability will be check","57fb2bb3":"network.compile(\n    optimizer='rmsprop',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n# loss function","7e36d7f4":"train_images = train_images.reshape((60000, 28 * 28)) # here converting 3d to 2d \ntrain_images = train_images.astype('float32') \/ 255 # all values will come under the range of 0 - 1\n\ntest_images = test_images.reshape((10000, 28 * 28))\ntest_images = test_images.astype('float32') \/ 255","bdc6bcad":"from tensorflow.keras.utils import to_categorical\n\ntrain_labels = to_categorical(train_labels)\ntest_labels = to_categorical(test_labels)","fa7d5fc1":"network.fit(\n    train_images,\n    train_labels,\n    epochs=5, # no. of iteration\n    batch_size=128 # chunk of input from total input\n)","0998f99f":"test_loss, test_acc = network.evaluate(test_images, test_labels)\nprint('Test Accuracy: ', test_acc)","9306f0c9":"from tensorflow.keras.datasets import mnist\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n\ndigit = train_images[4]\n\nimport matplotlib.pyplot as plt\nplt.imshow(digit, cmap=plt.cm.binary)\nplt.show()","fc983d09":"train_labels[4]","7dbb7e0c":"# Plot Image"}}