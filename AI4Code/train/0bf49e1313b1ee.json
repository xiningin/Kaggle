{"cell_type":{"b23b120a":"code","e29ea4c6":"code","41c7437b":"code","da91979a":"code","f5775b6e":"code","ec91200b":"code","aae1a7aa":"code","13b05d2f":"code","28c7637b":"code","cb07b3c4":"code","cf87cfa5":"code","d7d6a3c4":"code","15423afd":"code","744ef1b1":"markdown"},"source":{"b23b120a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.layers import Dropout, LSTM, Dense, Flatten\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers.embeddings import Embedding\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e29ea4c6":"# load train and test data\ntrain_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test.csv\")","41c7437b":"# First 5 data\ntrain_df.head()","da91979a":"# First 5 data\ntest_df.head()","f5775b6e":"# Features and target\nX = train_df.drop(\"target\", axis = 1)\ny = train_df[\"target\"]","ec91200b":"# Split data into train and test \nx_train, x_val, y_train, y_val = train_test_split(X, y, test_size = 0.2, shuffle = True, random_state = 34)\nx_train.shape, y_train.shape, x_val.shape, y_val.shape","aae1a7aa":"# Fill nan\/na value with 0\nx_train = x_train[\"question_text\"].fillna(\"_NA_\").values\nx_val = x_val[\"question_text\"].fillna(\"_NA_\").values\nx_test = test_df[\"question_text\"].fillna(\"_NA_\").values","13b05d2f":"# Attribute that we will use in function\nmax_words = 100000\nmax_len = 200\n# it takes lot of time that's why only for 2 epoch\nepoch = 1\nembedding_vecor_length = 32\nbatch_size = 1024\n# Tokenize text and select top 100k features\ntokenizer = Tokenizer(num_words=max_words)\ntokenizer.fit_on_texts(list(x_train))\nx_train = tokenizer.texts_to_sequences(x_train)\nx_val = tokenizer.texts_to_sequences(x_val)\nx_test = tokenizer.texts_to_sequences(x_test)","28c7637b":"# Padding \nx_trn_seq = pad_sequences(x_train, maxlen = max_len)\nx_val_seq = pad_sequences(x_val, maxlen = max_len)\nx_test = pad_sequences(x_test, maxlen = max_len)","cb07b3c4":"# Build sequential model with 2 LSTM layer follwed by dropout and flatten\nmodel = Sequential()\nmodel.add(Embedding(max_words, embedding_vecor_length, input_length = max_len))\nmodel.add(LSTM(100, return_sequences = True))\nmodel.add(Dropout(0.5))\n\nmodel.add(LSTM(100, return_sequences = True))\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(Dense(1, activation = \"sigmoid\"))\nmodel.compile(loss = \"binary_crossentropy\", optimizer = \"rmsprop\", metrics = [\"accuracy\"])\nmodel.summary()","cf87cfa5":"# Train model that gives you history about train loss and validation loss\nhistory = model.fit(x_trn_seq, y_train, batch_size, epochs = epoch, validation_data = (x_val_seq, y_val))\n# Accuracy on validation data\nscore = model.evaluate(x_val_seq, y_val, verbose = 0)\nprint(\"Validation Score:\", score[0])\nprint(\"Validation Accuracy\", score[1])","d7d6a3c4":"# Due to time constraints, commented it\n'''\n# Plot validataion and train loss\nx = range(1, epoch + 1)\nval_loss = history.history[\"val_loss\"]\ntrain_loss = history.history[\"loss\"]\nplt.plot(x, val_loss, \"b\", label = \"Validation loss\")\nplt.plot(x, train_loss, \"r\", label = \"Train loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Categorical Crossentropy loss\")\nplt.legend()\nplt.show()\n'''","15423afd":"# predict results\npred = model.predict(x_test)\nsample_submission = pd.DataFrame({\"qid\": test_df[\"qid\"].values})\nsample_submission[\"prediction\"] = pred\nsample_submission.to_csv(\"submission.csv\", index = False)","744ef1b1":"NOTE: - Will update it soon."}}