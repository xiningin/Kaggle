{"cell_type":{"bcdd80f8":"code","305e5432":"code","a6e7722b":"code","cc12c231":"code","c2ffd38f":"code","74a77713":"code","7fa5158b":"code","2073ccf5":"code","bc0003ce":"code","0e0f4a80":"code","086f05e0":"code","337ed1a2":"code","61d3b4b4":"code","cfbd9354":"markdown","3b6a30d3":"markdown","c8f0ff90":"markdown"},"source":{"bcdd80f8":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306eimport\nimport numpy as np\nimport pandas as pd\nfrom pandas import DataFrame\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\nfrom lightgbm import LGBMClassifier\nimport seaborn as sns\nfrom sklearn.metrics import log_loss, accuracy_score\nfrom sklearn.model_selection import KFold\nimport warnings\nwarnings.simplefilter('ignore')","305e5432":"# \u4e00\u89a7\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\norigin_path = \"..\/input\/data-science-spring-osaka-2021\/\"\nbase_path = \"..\/input\/makedatayaw\/\"#yaw\u65b9\u5411\u3092\u8ffd\u52a0\u3057\u305f\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3044\u307e\u3059\uff0e\ntrain_path = 'train.csv'\ntest_path = 'test.csv'\naction_path = 'actions.csv'\ndf_train = pd.read_csv(origin_path+train_path)\ndf_test = pd.read_csv(origin_path+test_path)\ndf_action = pd.read_csv(origin_path+action_path)","a6e7722b":"action_ = df_action[\"action_seq\"].unique()\ntrain_action = df_train[\"action_seq\"].unique()\nunseen_label = set(train_action) ^ set(action_)\n(unseen_label) # unseen label","cc12c231":"sns.countplot(y=\"action_seq\", data=df_train)","c2ffd38f":"# input_col = [\"Time\",\"ELBOW_R\",\"ELBOW_L\",\"SHOULDER_R\",\"SHOULDER_L\",\"AXILLA_R\",\"AXILLA_L\",\"THORAX_R\",\"THORAX_L\"]","74a77713":"def add_describe_as_features(row,flag):\n    file_path = row['file_path']\n    df = pd.read_csv(base_path + file_path)\n    if flag:\n        df = df[df[\"Time\"] >=1000]#\u306f\u3058\u3081\u3092\u524a\u9664  \n    s = df.describe().unstack(1)\n    return s.tolist()","7fa5158b":"# \u30ab\u30e9\u30e0\u540d\u306e\u30ea\u30b9\u30c8\u3092\u6e96\u5099\u3001\u6700\u521d\u306e\u6700\u5f8c\u3092\u307f\u308b\ndf = pd.read_csv(base_path + 'test\/test_0000.csv')\nlist_columns = ['_'.join(idx).strip() for idx in df.describe().unstack(1).index]\nlist_columns[:5]+list_columns[-5:]","2073ccf5":"#\u3069\u3053\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u95a2\u6570\u3000\u6b21\u306e\u6226\u7565\u306e\u305f\u3081\u306b\u51fa\u529b\u3057\u3066\u304a\u308a\u307e\u3057\u305f\uff0e\ndef incorrect(y_val, y_pred,y_pred_prob):\n    y_val = le.inverse_transform(y_val)\n    y_pred = le.inverse_transform(y_pred)\n    for (val,pred,prob) in zip(y_val, y_pred,y_pred_prob):\n        if val == pred:\n            pass\n        else:\n            print(\"\u4e0d\u6b63\u89e3:\",val,pred,prob)","bc0003ce":"def train_and_predict(df_train_,df_test_,flag):\n    # \u4e0a\u8a18\u51e6\u7406\u3092\u9069\u7528\u3057\u307e\u3059\n    df_train_[list_columns] = df_train_.apply(add_describe_as_features, axis=1, result_type='expand',args=(flag,))\n    df_test_[list_columns] = df_test_.apply(add_describe_as_features, axis=1, result_type='expand',args=(flag,))\n\n    # \u7279\u5fb4\u91cf\uff08=\u8aac\u660e\u5909\u6570\uff09\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\uff08\u88ab\u8aac\u660e\u5909\u6570\uff09\u306b\u5206\u5272\u3057\u3066\u304a\u304d\u307e\u3059\n    y_train = df_train_.action_seq\n    X_train = df_train_.drop(['file_path', 'action_seq'], axis=1)\n    X_test = df_test_.drop(['file_path'], axis=1)\n\n    # \u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u304a\u304d\u307e\u3059\n    le = LabelEncoder()\n    y_train = le.fit_transform(y_train)\n\n    # \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u3092\u691c\u5b9a\uff08\u7cbe\u5ea6\u8a55\u4fa1\uff09\u7528\u306b\u5207\u308a\u51fa\u3057\u307e\u3059\n    # \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u306b\u3088\u308b\u691c\u8a3c\u3092\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3078\u5909\u66f4\n    # -----------------------------------\n    # \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n    # -----------------------------------\n\n    # \u5404fold\u306e\u30b9\u30b3\u30a2\u3092\u4fdd\u5b58\u3059\u308b\u30ea\u30b9\u30c8\n    scores_accuracy = []\n\n    # \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\n    # \u5b66\u7fd2\u30c7\u30fc\u30bf\u30924\u3064\u306b\u5206\u5272\u3057\u3001\u3046\u30611\u3064\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3068\u3059\u308b\u3053\u3068\u3092\u3001\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3092\u5909\u3048\u3066\u7e70\u308a\u8fd4\u3059\n    \n    kf = KFold(n_splits=3, shuffle=True, random_state=71)\n    if flag:\n        kf = KFold(n_splits=4, shuffle=True, random_state=71)\n    for tr_idx, va_idx in kf.split(X_train,y_train):\n        # \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\n        X_train_, X_val = X_train.iloc[tr_idx], X_train.iloc[va_idx]\n        y_train_, y_val = y_train[tr_idx], y_train[va_idx]\n\n        # \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3092\u884c\u3046\n        model = LGBMClassifier(learning_rate=0.05, n_estimators=500)\n        model.fit(X_train_, y_train_, eval_set=[(X_val, y_val)], eval_metric='logloss', early_stopping_rounds=50,verbose=False)\n        # \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u78ba\u7387\u3067\u51fa\u529b\u3059\u308b\n        y_pred = model.predict(X_val)\n        y_pred_prob = model.predict_proba(X_val)\n        # \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3067\u306e\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\n#         incorrect(y_val, y_pred,np.max(y_pred_prob, axis=1))\n        accuracy = accuracy_score(y_val, y_pred)\n        print(f'accuracy: {accuracy:.4f}')\n        # \u305d\u306efold\u306e\u30b9\u30b3\u30a2\u3092\u4fdd\u5b58\u3059\u308b\n        scores_accuracy.append(accuracy)\n\n    # \u5404fold\u306e\u30b9\u30b3\u30a2\u306e\u5e73\u5747\u3092\u51fa\u529b\u3059\u308b\n    accuracy = np.mean(scores_accuracy)\n    print(f'CV mean accuracy: {accuracy:.4f}')\n    # \u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3066\u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\n    best_iter = model.best_iteration_\n    model = LGBMClassifier(learning_rate=0.05, n_estimators=best_iter)\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    y_pred_prob = model.predict_proba(X_test)\n    df_sub = pd.read_csv('..\/input\/data-science-spring-osaka-2021\/sample_submission.csv')\n    df_sub['action_seq'] = le.inverse_transform(y_pred)\n    df_sub[\"prob\"] = np.max(y_pred_prob, axis=1)\n    return df_sub","0e0f4a80":"num = 4 #\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u56de\u3059\u56de\u6570\nth = 0.9998\nflag = False\nfor i in range(num):\n    df_train_ = df_train.copy()\n    df_test_ = df_test.copy()\n    df_sub = train_and_predict(df_train_,df_test_,flag)\n    if i == 0:\n        df_train_test = df_sub[df_sub[\"prob\"] < 0.95]\n        df_train_test[\"action_seq\"] = list(unseen_label)[0]\n    elif i == 1:\n        df_train_test = df_sub[df_sub[\"action_seq\"] == list(unseen_label)[0]]\n    else:\n        df_train_test = df_sub[df_sub[\"prob\"] > th]\n        flag = True\n    df_train_test.pop(\"prob\")\n    print(len(df_train_test))\n    df_train = pd.read_csv(origin_path+train_path)\n    df_train = pd.concat([df_train,df_train_test]).reset_index(drop=True)","086f05e0":"sns.countplot(y=\"action_seq\", data=df_sub)#\u63d0\u51fa\u524d\u306b\u5206\u5e03\u3067\u78ba\u8a8d","337ed1a2":"# \u51fa\u529b\u3057\u3066\u63d0\u51fa\u3057\u307e\u3059\ndf_sub.to_csv('submission_conf.csv', index=False)","61d3b4b4":"df_sub = df_sub.drop(['prob'], axis=1)\ndf_sub.to_csv('submission.csv', index=False)","cfbd9354":"## \u4f59\u8ac7\n\n\u3053\u3093\u306a\u3053\u3068\u306b\u6c17\u3092\u3064\u3051\u306a\u304c\u3089\u53d6\u308a\u7d44\u307f\u307e\u3057\u305f\uff0e  \n1. \u6bce\u65e5\u7d50\u679c\u3092\u63d0\u51fa\u3059\u308b\u3053\u3068  \n1. \u4ed6\u306e\u65b9\u306ediscussion\u3084code\u3092\u307f\u308b\u3053\u3068\uff0c  \n1. \u308f\u304b\u3089\u306a\u3044\u3053\u3068\u306f\u7a4d\u6975\u7684\u306b\u691c\u7d22\u3057\u3066\u691c\u7d22\u3059\u308b\u529b\u3092\u3064\u3051\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3057\u305f\uff0e  \n\n\u4ed6\u306e\u65b9\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u4e0a\u3067\u610f\u8b58\u3057\u305f\u3053\u3068\u306finput,output\u3092\u610f\u8b58\u3057\u3066\u6982\u8981\u3092\u63b4\u3093\u3067\u304b\u3089\u8a73\u7d30\u306a\u51e6\u7406\u3092\u898b\u3066\u3044\u304f\u3088\u3046\u306b\u3057\u307e\u3057\u305f\uff0e\n\u306a\u3093\u3068\u306a\u304f\u691c\u7d22\u306e\u4ed5\u65b9\u3084\u5225code\u3067\u5171\u6709\u3067\u304d\u308c\u3070\u3068\u8003\u3048\u3066\u304a\u308a\u307e\u3059\uff0e","3b6a30d3":"**\u5168\u90e8jab\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059**","c8f0ff90":"# Data Science Spring Osaka 2021\u30003rd solution\n\n\u307f\u306a\u3055\u307e\u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\uff0e  \n\u904b\u55b6\u306e\u7686\u3055\u307e\u3053\u306e\u3088\u3046\u306a\u5834\u3092\u9802\u304d\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f!!!!!!!!!!!  \n\n\u7c21\u5358\u306b\u79c1\u306e\u30b3\u30fc\u30c9\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u306e\u3067\u5171\u6709\u81f4\u3057\u307e\u3059\uff0e  \n\n# \u65b9\u91dd  \n1. Pseudo Labeling\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u56de\u3059\uff09  \n1. \u7279\u5fb4\u91cf\u4f5c\u6210(yaw)  \n1. \u6700\u521d\u306e\u30c7\u30fc\u30bf\u3092\u4e00\u90e8\u524a\u9664 \n\n\u3067\u3059\uff0e  \n\n#### Pseudo Labeling  \n\n\u3053\u306e\u65b9\u6cd5\u306fdiscussion\u3084\u677e\u6751\u3055\u3093\u304b\u3089\u6559\u3048\u3066\u9802\u3044\u305f\u65b9\u6cd5\u3067\u3059\uff0e\nPseudo Labeling \u306e\u65b9\u91dd\u3067\u4e00\u90e8\u6ce8\u610f\u3059\u308b\u3057\u305f\u3053\u3068\u306f\u8aa4\u3063\u305f\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u306b\u56de\u3059\u3068\u5b66\u7fd2\u304c\u3046\u307e\u304f\u9032\u307e\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u3068\u8003\u3048\uff0c\u305d\u3053\u306b\u6ce8\u610f\u3092\u6255\u3063\u3066\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3057\u305f\uff0e(\u30e9\u30f3\u30ad\u30f3\u30b0\u30dc\u30fc\u30c9:Public Leaderboard\u306e\u7d50\u679c\u3092\u53b3\u9078\u3057\u3066\u5c11\u3057\u3065\u3064\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u3057\u3066\u3044\u304f)\u78ba\u4fe1\u5ea6\u304c\u76f8\u5bfe\u7684\u306b\u9ad8\u3044\u3082\u306e\u3092\u62bd\u51fa\u3057\u307e\u3057\u305f\uff0e\u3053\u3053\u3067\u306f\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e6~7\u5272\u4ee5\u4e0a\u306f\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u56de\u3055\u306a\u3044\u3088\u3046\u306b\u306a\u3093\u3068\u306a\u304f\u6ce8\u610f\u3057\u3066\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3057\u305f\uff0e\n\n#### \u7279\u5fb4\u91cf\u4f5c\u6210(yaw)  \n\n\u3053\u306e\u65b9\u91dd\u306f\u81ea\u5206\u306e\u8003\u3048\u304b\u3089\u5c0e\u5165\u3057\u307e\u3057\u305f\uff0e\uff08\u5b66\u751f\u6642\u4ee3\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3092\u6271\u3063\u3066\u3044\u305f\u304a\u308a\u307e\u3057\u305f\uff0e\uff09\n\u592a\u53e4\u3055\u3093\u306e[GBDT](https:\/\/qiita.com\/KROYO\/items\/fc267a71da51cfc036f0)\uff08\u4eca\u56de\u306fLightGBM\u4f7f\u7528\uff0c\u4ed6\u306b\u306fxgboost catboost\u3068\u304b\uff09\u306e\u7279\u5fb4\u91cf\u91cd\u8981\u5ea6\u306e[\u30b3\u30fc\u30c9](https:\/\/www.kaggle.com\/mugentk\/model-mean-to-describe)\u304b\u3089\u80f8\u306b\u3064\u3044\u305f\u30bb\u30f3\u30b5\uff08\u30b9\u30de\u30db\u3084\u30c9\u30ed\u30fc\u30f3\u306b\u8f09\u3063\u3066\u3044\u308b\u30bb\u30f3\u30b5\u3067\u59ff\u52e2\u3092\u63a8\u5b9a\u3067\u304d\u308b\u30bb\u30f3\u30b5\u3067IMU\u3068\u8a00\u308f\u308c\u3066\u3044\u307e\u3059\uff0e\uff09\u304c\u91cd\u8981\u3068\u3044\u3046\u7d50\u679c\u304c\u51fa\u3066\u304d\u305f\u306e\u3067\uff0cIMU\u306b\u6ce8\u76ee\u3057\u3066\uff0c[\u7279\u5fb4\u91cf\u306e\u751f\u6210\u3092\u8a66\u307f\u307e\u3057\u305f\uff0e](https:\/\/www.kaggle.com\/tyonemoto\/makedatayaw)\n\n#### \u6700\u521d\u306e\u30c7\u30fc\u30bf\u3092\u4e00\u90e8\u524a\u9664\n\n\u592a\u53e4\u3055\u3093\u304c\u3069\u3053\u304b\u3067\u5171\u6709\u3057\u3066\u9802\u3044\u305f\u8003\u3048\u3067\u3059\uff0e  \n\u5168\u3066\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304cjab\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u305f\u306e\u3067\uff0c\u7279\u306b\u5fc5\u8981\u306a\u3044\u304b\u306a\u3068\u601d\u3044\uff0c\u524a\u9664\u3057\u307e\u3057\u305f\uff0e\u7d50\u679c\u306b\u5f71\u97ff\u3057\u305f\u304b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\uff0e\n"}}