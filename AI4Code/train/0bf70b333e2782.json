{"cell_type":{"07025e9a":"code","e64b4d5c":"code","ae7cbd68":"code","d1112497":"code","669e5770":"code","3e918a1c":"code","4001fd61":"code","3aca7b98":"code","0a7c0ad1":"code","1f5d9cbc":"code","7674eb22":"code","300a306a":"code","39ae9efe":"code","9c8b6696":"code","071e32df":"code","ee20743e":"code","6a4a5d09":"code","8db37114":"code","ca5e22a8":"code","09271e1f":"code","75f3bf67":"code","4b82f6e3":"code","11d77f5f":"code","f8e10e7e":"code","cbdafaae":"code","8f2e0601":"code","85c4495f":"code","6504d3ba":"code","8c963359":"code","e236a5e0":"code","2044ff55":"code","93463061":"code","11209879":"code","bb99f2bf":"code","6abfb333":"code","ac707bba":"code","167c9da2":"code","c464a96a":"code","50386b36":"code","ee9c4de5":"code","1394d8e4":"code","c520bae8":"code","7367d01a":"code","be2551f2":"code","ea2f6667":"code","f14201e4":"code","cd49419b":"code","b3ac53d2":"code","6e1c1d8a":"code","cafb3ada":"code","f129c124":"code","ed8d59b4":"code","fd108a02":"code","add47d4b":"code","276f3e02":"code","39632592":"code","46d0a0c0":"code","e9b6d20a":"code","babea443":"code","545ce3ee":"code","30477980":"code","07102ebf":"code","d5275b1f":"code","aed50954":"code","1ac10210":"code","51d4ab7e":"code","377219a7":"code","56798d10":"code","8c8e3bcf":"code","678d88f2":"code","b3e35f69":"code","70f88d27":"code","0341520e":"code","2ac3679b":"code","91518a2b":"code","6ce8d2a1":"code","fe964b39":"code","be7c294a":"code","869b5b0f":"code","9c4c8195":"code","e7761ce0":"code","6a7c9060":"code","ade66917":"code","fba5b5a7":"code","7849ca20":"code","3ac1f7a4":"code","c4bfe467":"code","a5af456d":"code","64ea5723":"code","51820c08":"code","efa87e8b":"code","99e124cd":"code","49a8bee0":"code","a05009ee":"code","e98ccfe3":"code","a19a540c":"code","1552990c":"code","e6b3b6b1":"code","0520fd17":"code","28421fdb":"code","f4ac9f91":"code","f5766071":"code","7fc21d0a":"code","4598b428":"code","b5a776f4":"code","21effa40":"markdown","5bb1af48":"markdown","38409b08":"markdown","54bb9723":"markdown","b07553e7":"markdown","c10a915d":"markdown","ad02794a":"markdown","737242e2":"markdown","09c08fb6":"markdown","3c0f2500":"markdown","51e5a47f":"markdown","b058d158":"markdown","e1f39c92":"markdown","ae67cc23":"markdown","0dadb23f":"markdown","a28b28bd":"markdown","a8b9a1ad":"markdown","1462379f":"markdown","27fd11a9":"markdown","1027fa39":"markdown","979848e4":"markdown","1fe7ea23":"markdown","98363708":"markdown"},"source":{"07025e9a":"import datetime as dt\ndt_string = dt.datetime.now().strftime(\"%d\/%m\/%Y\")\nprint(f\"Kernel last updated: {dt_string}\")","e64b4d5c":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport datetime as dt\nimport folium\nfrom folium.plugins import HeatMap, HeatMapWithTime\n%matplotlib inline","ae7cbd68":"print(os.listdir('\/kaggle\/input'))\nDATA_FOLDER = \"\/kaggle\/input\/coronavirus-2019ncov\"\nprint(os.listdir(DATA_FOLDER))\n","d1112497":"data_df = pd.read_csv(os.path.join(DATA_FOLDER, \"covid-19-all.csv\"))","669e5770":"world_economy = pd.read_csv('https:\/\/docs.google.com\/spreadsheets\/d\/e\/2PACX-1vQjU32w7PB4A3j2pWeH6TFoqJ1eOFe1apxHmJFz-P5KqrTh0SHwLZJmVNGoRP9sIQnAqP6nHyCAvDMs\/pub?output=csv')","3e918a1c":"print(world_economy.shape)","4001fd61":"world_eco=world_economy.iloc[:,0:3]","3aca7b98":"world_eco.head()","0a7c0ad1":"world_eco['date'] = pd.to_datetime(world_eco['date'])","1f5d9cbc":"print(f\"Date - unique values: {world_eco['date'].nunique()} ({min(world_eco['date'])} - {max(world_eco['date'])})\")","7674eb22":"world_eco=world_eco[ (world_eco['date'] >= '2020-01-22 00:00:00')]","300a306a":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))\nmissing_data(world_eco)","39ae9efe":"print(f\"Countries:{world_eco['country'].nunique()}\")\n","9c8b6696":"data_df.tail()","071e32df":"for column in data_df.columns:\n    print(f\"{column}:{data_df[column].dtype}\")","ee20743e":"print(f\"Date - unique values: {data_df['Date'].nunique()} ({min(data_df['Date'])} - {max(data_df['Date'])})\")","6a4a5d09":"data_df['Date'] = pd.to_datetime(data_df['Date'])","8db37114":"for column in data_df.columns:\n    print(f\"{column}:{data_df[column].dtype}\")","ca5e22a8":"print(f\"Date - unique values: {data_df['Date'].nunique()} ({min(data_df['Date'])} - {max(data_df['Date'])})\")","09271e1f":"missing_data(data_df)","75f3bf67":"print(f\"Countries\/Regions:{data_df['Country\/Region'].nunique()}\")\nprint(f\"Province\/State:{data_df['Province\/State'].nunique()}\")","4b82f6e3":"covid_data=data_df\neconomy=world_eco\nprint(world_eco.shape)\nprint(covid_data.shape)","11d77f5f":"economy=economy.rename(columns={'country':'Country\/Region','date':'Date'})","f8e10e7e":"economy.head()","cbdafaae":"dataset=pd.merge(covid_data,economy,on=['Country\/Region','Date'])\ndataset","8f2e0601":"missing_data(dataset)","85c4495f":"def plot_count(feature, value, title, df, size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    df = df.sort_values([value], ascending=False).reset_index(drop=True)\n    g = sns.barplot(df[feature][0:30], df[value][0:30], palette='Set3')\n    g.set_title(\"Number of {} - first 30 by number\".format(title))\n    ax.set_xticklabels(ax.get_xticklabels(),rotation=90)\n    plt.show()    ","6504d3ba":"def plot_time_variation(df, y='Confirmed', hue='Province\/State', size=1, is_log=False):\n    f, ax = plt.subplots(1,1, figsize=(4*size,3*size))\n    \n    g = sns.lineplot(x=\"Date\", y=y, hue=hue, data=df)\n    plt.xticks(rotation=90)\n    plt.title(f'{y} cases grouped by {hue}')\n    if(is_log):\n        ax.set(yscale=\"log\")\n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show()  ","8c963359":"def plot_time_variation_all(df, title='Mainland China', size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,2*size))\n    g = sns.lineplot(x=\"Date\", y='Confirmed', data=df, color='blue', label='Confirmed')\n    g = sns.lineplot(x=\"Date\", y='Recovered', data=df, color='green', label='Recovered')\n    g = sns.lineplot(x=\"Date\", y='Deaths', data=df, color = 'red', label = 'Deaths')\n    plt.xlabel('Date',fontsize=0.2)\n    plt.ylabel(f'Total {title} cases')\n    plt.xticks(rotation=90)\n    plt.title(f'Total {title} cases')\n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show()  \n","e236a5e0":"def plot_time_variation_mortality(df, title='Mainland China', size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,2*size))\n    g = sns.lineplot(x=\"Date\", y='Mortality (D\/C)', data=df, color='blue', label='Mortality (Deaths \/ Confirmed)')\n    g = sns.lineplot(x=\"Date\", y='Mortality (D\/R)', data=df, color='green', label='Mortality (Death \/ Recovered)')\n    plt.xlabel('Date')\n    ax.set_yscale('log')\n    plt.ylabel(f'Mortality {title} [%]')\n    plt.xticks(rotation=90)\n    plt.title(f'Mortality percent {title}\\nCalculated as Deaths\/Confirmed cases and as Death \/ Recovered cases')\n    ax.grid(color='black', linestyle='dashed', linewidth=1)\n    plt.show()  ","2044ff55":"data_ct = data_wd.sort_values(by = ['Country','Date'], ascending=False)\nfiltered_data_ct_last = data_wd.drop_duplicates(subset = ['Country'], keep='first')\ndata_ct_agg = data_ct.groupby(['Date']).sum().reset_index()","93463061":"filtered_data_ct_last.head()","11209879":"plot_count('Country', 'Confirmed', 'Confirmed cases - all World', filtered_data_ct_last, size=4)","bb99f2bf":"data_ct.where(data_ct['Date']=='2020-06-05',data_ct).tail(2422)","6abfb333":"plot_count('Country', 'Deaths', 'Deaths - all World', filtered_data_ct_last, size=4)","ac707bba":"world_data_with_eco = dataset\nworld_data_with_eco .info()","167c9da2":"world_data_with_eco = dataset\n\nworld_data_with_eco = pd.DataFrame(world_data_with_eco.groupby(['Country\/Region', 'Date','currency rate'])['Confirmed', 'Recovered', 'Deaths','currency rate'].sum()).reset_index()\n\nworld_data_with_eco.columns = ['Country', 'Date', 'Confirmed', 'Recovered', 'Deaths','currency rate']\nworld_data_with_eco  = world_data_with_eco.sort_values(by = ['Country','Date'], ascending=False)\n\nworld_data_ct = world_data_with_eco.sort_values(by = ['Country','Date'], ascending=False)\n\nworld_filtered_data_ct_last = world_data_with_eco.drop_duplicates(subset = ['Country'], keep='first')\n\nworld_data_ct_agg = world_data_ct.groupby(['Date']).sum().reset_index()\n#print(world_data_ct_agg)","c464a96a":"world_filtered_data_ct_last","50386b36":"print(f\"Countries:{world_filtered_data_ct_last['Country'].nunique()}\")\nmissing_data(world_filtered_data_ct_last)","ee9c4de5":"world_data_ct","1394d8e4":"def plot_time_variation_all(df, title='Mainland China', size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,2*size))\n    g = sns.lineplot(x=\"Date\", y='currency rate', data=df, color='blue', label='Currency rates')\n    g = sns.lineplot(x=\"Date\", y='Recovered', data=df, color='green', label='Recovered')\n    g = sns.lineplot(x=\"Date\", y='Deaths', data=df, color = 'red', label = 'Deaths')\n    plt.xlabel('Date',fontsize=0.2)\n    plt.ylabel(f'Total {title} cases')\n    plt.xticks(rotation=90)\n    plt.title(f'Total {title} cases')\n    \n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show()  \n","c520bae8":"def plot_time_variation_countries_world(df, countries, case_type='Confirmed', size=3, is_log=False):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4*size))\n    for country in countries:\n        df_ = df[(df['Country']==country) & (df['Date'] > '2020-02-01')] \n        g = sns.lineplot(x=\"Date\", y=case_type, data=df_,  label=country)  \n        #ax.text(max(df_['Date']), (df_.loc[df_['Date']==max(df_['Date']), case_type]), str(country))\n    plt.xlabel('Date')\n    plt.ylabel(f'Total  {case_type}')\n    plt.title(f'Total {case_type}')\n    plt.xticks(rotation=90)\n    if(is_log):\n        ax.set(yscale=\"log\")\n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show()  ","7367d01a":"world_data_select_agg = world_data_ct.groupby(['Country', 'Date']).sum().reset_index()\nworld_data_select_agg['Active'] =  world_data_select_agg['Deaths'] - world_data_select_agg['Recovered']","be2551f2":"countries = ['China', 'Italy', 'Iran', 'Spain', 'Germany', 'Switzerland', 'US', 'South Korea', 'United Kingdom', 'France', 'Netherlands', 'Japan', 'Romania']\nplot_time_variation_countries_world(world_data_select_agg, countries,case_type='Deaths', size=4)","ea2f6667":"countries = ['China', 'Italy', 'Iran', 'Spain', 'Germany', 'Switzerland', 'US', 'South Korea', 'United Kingdom', 'France', 'Netherlands', 'Japan', 'Romania']\nplot_time_variation_countries_world(world_data_select_agg, countries,case_type='currency rate', size=4)","f14201e4":"countries = ['China', 'Italy', 'Iran', 'Spain', 'Germany', 'Switzerland', 'US', 'South Korea', 'United Kingdom', 'France',\\\n             'Netherlands', 'Austria', 'Japan', 'Romania']\nplot_time_variation_countries(data_select_agg, countries, case_type = 'Active', size=4)","cd49419b":"data_ps = data_df.sort_values(by = ['Province\/State','Date'], ascending=False)\nfiltered_data_ps = data_ps.drop_duplicates(subset = ['Province\/State'],keep='first').reset_index()\n\ndata_cr = data_df.sort_values(by = ['Country\/Region','Date'], ascending=False)\nfiltered_data_cr = data_cr.drop_duplicates(subset = ['Country\/Region'],keep='first').reset_index()\n\nfiltered_data_cr = filtered_data_cr.loc[~filtered_data_cr.Latitude.isna()]\nfiltered_data_cr = filtered_data_cr.loc[~filtered_data_cr.Longitude.isna()]\nfiltered_data = pd.concat([filtered_data_cr, filtered_data_ps], axis=0).reset_index()","b3ac53d2":"m = folium.Map(location=[0,0], zoom_start=2)\nmax_val = max(filtered_data['Confirmed'])\nHeatMap(data=filtered_data[['Latitude', 'Longitude', 'Confirmed']],\\\n        radius=15, max_zoom=12).add_to(m)\nm","6e1c1d8a":"def plot_time_variation_mortality_countries_world(df, countries):\n    i = 0\n    sns.set_style('whitegrid')\n    plt.figure()\n    fig, ax = plt.subplots(4,4,figsize=(18, 16))\n\n    for country in countries:\n        plt.subplot(4,4,i + 1)\n        df_ = df.loc[(df['Country']==country) & (df['Date'] > '2020-02-01')] \n        df_['date'] = df_['Date'].apply(lambda x: x.timetuple().tm_yday)\n        #df_['Mortality (D\/C)'] = df_['Deaths'] \/ df_['Confirmed'] * 100\n        df_['Mortality (D\/R)'] = df_['Deaths'] \/ df_['Recovered'] * 100\n        #g = sns.lineplot(x=\"date\", y='Mortality (D\/C)', data=df_,  label='M (D\/C)')\n        g = sns.lineplot(x=\"date\", y='currency rate', data=df_,  label='CR')\n        g = sns.lineplot(x=\"date\", y='Mortality (D\/R)', data=df_,  label='M (D\/R)')\n        plt.title(f'{country}') \n        ax[i\/\/4, i%4].set_yscale('log')\n        plt.xlabel('')\n        i = i + 1\n    fig.suptitle('Mortality Deaths\/Recovered (D\/R) &their currency rates (CR)')\n    plt.show()  ","cafb3ada":"countries = ['Austria', 'Azerbaijan', 'China', 'Croatia', \n             'Denmark', 'Germany', 'Iceland', 'Iran', \n             'Malaysia', 'New Zealand',  'South Korea', 'Switzerland', \n             'Japan', 'Italy', 'US', 'Romania']\nplot_time_variation_mortality_countries_world(world_data_select_agg, countries)","f129c124":"def plot_time_variation_mortality_countries_world(df, countries, title, size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4*size))\n    colors = ['red', 'blue', 'green', 'magenta', 'lightgreen', 'black']\n    for i, country in enumerate(countries):\n        dc_df = df.loc[df.Country == country].copy()\n        dc_df_agg = dc_df.groupby(['Date']).sum().reset_index()\n        #dc_df_agg['Mortality (D\/C)'] = dc_df_agg['Deaths'] \/ dc_df_agg['Confirmed'] * 100\n        dc_df_agg['Mortality (D\/R)'] = dc_df_agg['Deaths'] \/ dc_df_agg['Recovered'] * 100\n        g = sns.lineplot(x=\"Date\", y='currency rate', data=dc_df_agg, linestyle='-', color=colors[i], label=f'Curency rate of - {country}')\n        #ax.text(max(dc_df_agg['Date']), (dc_df_agg['Mortality (D\/C)'].tail(1)), str(country))\n        g = sns.scatterplot(x=\"Date\", y='Mortality (D\/R)', data=dc_df_agg, linestyle='-.', color=colors[i],label=f'Mortality (Deaths\/Recovered) - {country}')\n        #ax.text(max(dc_df_agg['Date']), (dc_df_agg['Mortality (D\/R)'].tail(1)), str(country))\n    plt.xlabel('Date')\n    plt.xlim('2020-01-15','2020-06-12')\n    ax.set_yscale('log')\n    plt.ylabel(f'Mortality {title} [%]')\n    plt.xticks(rotation=90)\n    plt.title(f'Mortality percent {title}\\nCalculated as currency rate (US dollar) and as Death \/ Recovered cases')\n    ax.grid(color='black', linestyle='dashed', linewidth=1)\n    plt.show()  ","ed8d59b4":"countries = ['US', 'Italy', 'China', 'South Korea', 'Japan', 'Romania']\nplot_time_variation_mortality_countries_world(world_data_select_agg, countries, '- selection of World Countries',5)","fd108a02":"world_data_select_agg.to_csv(\"world_data_select_agg.csv\")","add47d4b":"data =data_df\ncurrdata=world_economy","276f3e02":"data","39632592":"currdata","46d0a0c0":"print(currdata.shape)\ncurrdata = currdata.iloc[:,0:3]\ncurrdata.shape\ncurrdata.head()\n","e9b6d20a":"currdata = currdata[(currdata['date']>='2020-01-22 00:00:00')]\ncurrdata.head()","babea443":"print(f\"Countries:{currdata['country'].nunique()}\")\nprint(f\"Rows:{data.shape[0]}, Columns: {data.shape[1]}\")\ndata.head()","545ce3ee":"for column in data.columns:\n    print(f\"{column}:{data[column].dtype}\")","30477980":"print(f\"Date - unique values: {data['Date'].nunique()} ({min(data['Date'])} - {max(data['Date'])})\")\ndata['Date'] = pd.to_datetime(data['Date'])\ncurrdata['date'] = pd.to_datetime(currdata['date'])","07102ebf":"for column in data.columns:\n    print(f\"{column}:{data[column].dtype}\")","d5275b1f":"for column in currdata.columns:\n    print(f\"{column}:{currdata[column].dtype}\")","aed50954":"print(f\"Date - unique values: {data['Date'].nunique()} ({min(data['Date'])} - {max(data['Date'])})\")","1ac10210":"missing_data(data)","51d4ab7e":"missing_data(currdata)","377219a7":"print(f\"Countries\/Regions:{data['Country\/Region'].nunique()}\")\nprint(f\"Province\/State:{data['Province\/State'].nunique()}\")","56798d10":"covid_data=data\neconomy=currdata\nprint(currdata.shape)\nprint(covid_data.shape)\neconomy=economy.rename(columns={'country':'Country\/Region','date':'Date'})\ndataset=pd.merge(covid_data,economy,on=['Country\/Region','Date'])\ndataset","8c8e3bcf":"world = world_data_select_agg\nworld.tail(10)","678d88f2":"import random as rd\nimport matplotlib.pyplot as plt","b3e35f69":"X = world[['Active','currency rate']]","70f88d27":"plt.scatter(X[\"currency rate\"],X[\"Active\"],c='black')\nplt.xlabel('Currency Rate')\nplt.ylabel('Active Cases')\nplt.show()","0341520e":"X1 = world[['Deaths','currency rate']]\nX1 = X1.values","2ac3679b":"from sklearn.cluster import KMeans\nError =[]\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i).fit(X1)\n    kmeans.fit(X1)\n    Error.append(kmeans.inertia_)\nimport matplotlib.pyplot as plt\nplt.plot(range(1, 11), Error)\nplt.title('Elbow method')\nplt.xlabel('No of clusters')\nplt.ylabel('Error')\nplt.show()","91518a2b":"kmeans = KMeans(n_clusters=3)\ny_means = kmeans.fit_predict(X1)\nprint(y_means)","6ce8d2a1":"kmeans.cluster_centers_","fe964b39":"plt.scatter(X1[:,0],X1[:,1],c=y_means,cmap ='rainbow')","be7c294a":"world.plot(x='Deaths', y='currency rate', style='o')  \nplt.title('Deaths vs Currency Rate')  \nplt.xlabel('Deaths')  \nplt.ylabel('Currency Rate')  \nplt.show()","869b5b0f":"A = world[['Country','Deaths']]","9c4c8195":"A.count()","e7761ce0":"A.Deaths.sum()","6a7c9060":"A.groupby('Country').sum()","ade66917":"T=A.groupby('Country', as_index=False)['Deaths'].sum()","fba5b5a7":"T.columns","7849ca20":"T.head()","3ac1f7a4":"T.dtypes","c4bfe467":"T['Country']=T['Country'].astype('category')\nT.dtypes","a5af456d":"T['Country']=T[\"Country\"].cat.codes\nT.head()","64ea5723":"x = T.values","51820c08":"from sklearn.cluster import KMeans\nError =[]\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i).fit(x)\n    kmeans.fit(x)\n    Error.append(kmeans.inertia_)\nimport matplotlib.pyplot as plt\nplt.plot(range(1, 11), Error)\nplt.title('Elbow method')\nplt.xlabel('No of clusters')\nplt.ylabel('Error')\nplt.show()","efa87e8b":"kmeans3 = KMeans(n_clusters=3)\ny_means3 = kmeans3.fit_predict(x)\nprint(y_means3)","99e124cd":"kmeans3.cluster_centers_","49a8bee0":"plt.scatter(x[:,0],x[:,1],c=y_means3,cmap ='rainbow')","a05009ee":"import seaborn as sns\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n%matplotlib inline","e98ccfe3":"world.describe","a19a540c":"plt.figure(figsize=(15,10))\nplt.tight_layout()\nsns.distplot(world['currency rate'])","1552990c":"plt.figure(figsize=(15,10))\nplt.tight_layout()\nsns.distplot(world['Deaths'])","e6b3b6b1":"xw = world['Deaths'].values.reshape(-1,1)\nyw = world['currency rate'].values.reshape(-1,1)","0520fd17":"X_train, X_test, y_train, y_test = train_test_split(xw, yw, test_size=0.2, random_state=0)","28421fdb":"regressor = LinearRegression()  \nregressor.fit(X_train, y_train)","f4ac9f91":"#To retrieve the intercept:\nprint(regressor.intercept_)\n#For retrieving the slope:\nprint(regressor.coef_)","f5766071":"y_pred = regressor.predict(X_test)","7fc21d0a":"df = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})\ndf","4598b428":"plt.scatter(X_test, y_test,  color='gray')\nplt.plot(X_test, y_pred, color='red', linewidth=2)\nplt.show()","b5a776f4":"print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","21effa40":"Grouping new dataset","5bb1af48":"# Exploratory analysis through data visulaization","38409b08":"Linear regression  in order to predict how the death rate would affect the economy of the country using currency rates. We first split the data into train and test. And then applied linear regression over.","54bb9723":"copy of originals","b07553e7":"## All World mortality","c10a915d":"First 3 columns","ad02794a":"**Let's compare these curves for few of the countries above. (CURRENCY RATE)**","737242e2":"Currated by us from different data sources as mentioned above ","09c08fb6":"Currecy rate drops for each country","3c0f2500":"## Kmeans Clustering\nWe wanted to model data on the currency rates as well as the number of deaths, and the countries. We attempted to cluster the countries with the optimal cluster number suggested by the Elbow method, which was k = 3.","51e5a47f":"## Time variation\n\nWe show the time variation of the whole World cases and their exchange rates.","b058d158":"1. Let's explore datasets and merge accordingly","e1f39c92":"## Linear Regression","ae67cc23":"\n\n## Loading packages","0dadb23f":"We can observe the very high dynamic in countries like Italy, China or Spain and the almost saturated curve in the case of South Korea or Japan.","a28b28bd":"We performed K-means clustering to model data on the currency rates as well as the number of deaths, and the countries and Linear Regression in order to predict how the death rate would affect the economy of the country using currency rates. ","a8b9a1ad":"## Heatmap with cases in the World\n\n\n### Confirmed cases in the World\n\n\nLet's see a heatmap with cases distribution (as of last update) in the World.","1462379f":"Pre-processing","27fd11a9":"# Data Modeling ","1027fa39":"<h1>Coronavirus and world economy<\/h1>\nBy\nK163665 Saira Sohail &\nK163659 Hera Naqvi\n\n# Introduction\n\n\nThis notebook is part of our Data Science (DS481) project for Spring '20\n\nWe are using here a Kaggle Dataset [Coronavirus 2019-nCoV](https:\/\/www.kaggle.com\/gpreda\/coronavirus-2019ncov) updated daily, based on [John Hopkins data](https:\/\/github.com\/CSSEGISandData\/COVID-19\/). \nWe chose the cited data set as it gets updated frequently, which lets us reflect on daily evolution of covid cases.\n\nHeatmaps are also used to display geographical distribution of Confirmed cases and Deaths.\n\n\nIt will be important to monitor the impacts of the coronavirus on international markets and economies because they will impact our interconnected, global economy.Dataset for exchange rates relative to the U.S. dollar for each country was acquired from [International Monetary Fund (IMF)](https:\/\/www.imf.org\/en\/Data) website and [Federal Reserve Bank of St. Louis](https:\/\/fred.stlouisfed.org\/) . We start collecting the data of exchange rates from  August 1st, 2019 to June 6th, 2020, where we set the index values equal to 100 for all these exchange rates so we can compare their relative changes since then.","979848e4":"For currency rate over deaths","1fe7ea23":"**Merging 2 datasets based on date and country**","98363708":"Plotting both currency rate increase and deaths"}}