{"cell_type":{"b7704edf":"code","511a9c0f":"code","40e29f30":"code","737c0ff3":"code","3dfae109":"code","fc8dacca":"code","5d850933":"code","f715da97":"code","cfddde9b":"code","4d2951a8":"code","35adb8af":"code","0089c9ef":"code","9c6f2e01":"code","7dd129a8":"code","3f35bc0f":"code","7e0a36fa":"code","4aa27dc1":"code","02c2cf95":"code","d99178f1":"code","23ac2338":"code","f0597de9":"code","be444e7c":"code","a487832d":"code","d4c5973e":"code","66406966":"code","bd9d41bf":"code","cdbd2758":"code","da7a8b00":"code","4991fc7c":"code","9e351d8c":"code","fe580d41":"code","0567c625":"code","e507e94d":"code","aa840ab9":"code","ab7cdf2d":"code","bf080911":"code","4a9a2640":"code","4e80eb38":"code","531b401b":"code","046311b9":"markdown","7251f08e":"markdown","84a48484":"markdown","5d9026f6":"markdown","2092533f":"markdown","f8053a8f":"markdown","3e9a0d8e":"markdown","767b5fea":"markdown","553a1591":"markdown","9f5319a3":"markdown"},"source":{"b7704edf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","511a9c0f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n","40e29f30":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","737c0ff3":"train.head()","3dfae109":"test.head()","fc8dacca":"train.describe()","5d850933":"train.shape","f715da97":"train.info()","cfddde9b":"y_train=train['label']\nx_train=train.drop('label',axis=1)","4d2951a8":"sns.countplot(y_train)","35adb8af":"x_train.isnull().any().describe()","0089c9ef":"x_train.isnull().sum().sum()","9c6f2e01":"test.isnull().sum().sum()","7dd129a8":"# There are no null values in train and test set","3f35bc0f":"# normalize the data\nx_train=x_train\/255.0\ntest=test\/255.0","7e0a36fa":"# Reshape into 4 Dimensions to work with KERAS API\nx_train = x_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","4aa27dc1":"#y_train=train['label']\ny_train = to_categorical(y_train, num_classes = 10)","02c2cf95":"random_seed = 2","d99178f1":"X_train, X_val, Y_train, Y_val = train_test_split(x_train, y_train, test_size = 0.1, random_state=random_seed)","23ac2338":"sns.set(style='white', context='notebook', palette='deep')\ng = plt.imshow(X_train[0][:,:,0])\ng","f0597de9":"X_train[0].shape","be444e7c":"# my CNN architechture is In -> [[Conv2D->relu]*2 -> MaxPool2D -> Dropout]*2 -> Flatten -> Dense -> Dropout -> Out\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","a487832d":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","d4c5973e":"model.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","66406966":"#With the ReduceLROnPlateau function from Keras.callbacks, i choose to reduce the LR by half if the \n#accuracy is not improved after 3 epochs.","bd9d41bf":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","cdbd2758":"epochs = 1 # Turn epochs to 30 to get 0.9967 accuracy\nbatch_size = 86","da7a8b00":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n","4991fc7c":"datagen.fit(X_train)","9e351d8c":"history = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = 30, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","fe580d41":"# Plot the loss and accuracy curves for training and validation \nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(8, 8))\nplt.subplot(2, 1, 1)\nplt.plot(acc, label='Training Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.ylabel('Accuracy')\nplt.ylim([-1,1])\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 1, 2)\nplt.plot(loss, label='Training Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.ylabel('Cross Entropy')\nplt.ylim([-1,1.0])\nplt.title('Training and Validation Loss')\nplt.xlabel('epoch')\nplt.show()\n","0567c625":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) \n","e507e94d":"\n# Errors are difference between predicted labels and true labels\nerrors = (Y_pred_classes - Y_true != 0)\n\nY_pred_classes_errors = Y_pred_classes[errors]\nY_pred_errors = Y_pred[errors]\nY_true_errors = Y_true[errors]\nX_val_errors = X_val[errors]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)))\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\nY_pred_errors_prob = np.max(Y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(Y_pred_errors, Y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = Y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, X_val_errors, Y_pred_classes_errors, Y_true_errors)\n","aa840ab9":"results = model.predict(test)\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","ab7cdf2d":"results","bf080911":"plt.imshow(test[0][:,:,0])\nprint('Predicted Value : ', results[0])","4a9a2640":"# Testing for first 10 Images in test set\nfor i in range(5):\n    print('Predicted Value : ', results[i])    \n    plt.imshow(test[i][:,:,0])\n    plt.show()\n","4e80eb38":"from PIL import Image","531b401b":"img = Image.open('..\/input\/photo-three\/three.png')\nimg = np.resize(img, (28,28))\n\nim2arr = np.array(img)\nim2arr = im2arr.reshape(1,28,28,1)\ny_pred = model.predict(im2arr)\nres = np.argmax(y_pred)\nprint(res+1)\nImage.open('..\/input\/photo-three\/three.png')","046311b9":"## Evaluating Model","7251f08e":"## Checking for null values and missing values","84a48484":"# CNN MODEL","5d9026f6":"performing grayscale normalization to reduce the effect of illumination diferrences\n","2092533f":"## LOADING DATA","f8053a8f":"# Split into training and validation sets","3e9a0d8e":"## Setting Optimizer and Annealer","767b5fea":"## Label Encoding","553a1591":"## NORMALIZATION","9f5319a3":"# Confusion Matrix"}}