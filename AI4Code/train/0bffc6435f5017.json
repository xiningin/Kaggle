{"cell_type":{"4aa333fc":"code","25c70041":"code","261a3cac":"code","41ca4a0c":"code","d28a32a0":"code","bd6d2556":"code","dc8f0370":"code","bbd202c1":"code","630adeea":"code","90d0e358":"code","156eea70":"code","e11227df":"code","8a47a39c":"code","57621665":"code","ffbdb55b":"code","c14154ad":"code","d03b3a9c":"code","a6983361":"code","d5a716c0":"code","78a59e55":"code","5cc85bba":"code","676d9c9c":"code","0b7208ec":"code","aec3baa6":"code","6031b70b":"code","dbc5bca5":"code","03e902b7":"code","84384913":"code","732e7074":"code","3f56e271":"code","2daced7e":"code","a5db6778":"code","7fdc0163":"code","ede5d0d4":"code","a2fb40fb":"code","07f78f8d":"code","a1138fe4":"code","330f59eb":"code","c4429a99":"code","6b849ccc":"code","0bece4dc":"code","b40c0da9":"code","1f41a29a":"code","558057ef":"code","1f3dbc08":"code","bb7421ed":"code","29d8e0fa":"code","3e5366eb":"code","a8cbe7ca":"code","530884f8":"code","5e83c351":"code","95a6f266":"code","516887ef":"code","b8885fd2":"code","b1b56451":"code","40e462a8":"code","d78921a9":"code","a34f2b4e":"code","cef4f519":"code","f5e66406":"code","121ec049":"code","f1bdf69d":"code","1763dfae":"code","5e8617a2":"code","f2dff942":"code","5fb5f83a":"code","335d80f7":"code","0bc0c64b":"code","d689dfe5":"code","58a6955f":"code","2e1716a5":"code","bd61da97":"code","fa4ca14e":"code","50430305":"code","aaa599cb":"code","62770b9c":"code","77606d44":"code","c759e1ce":"code","8af3612e":"code","e610d2b0":"code","dca089ba":"code","3db134b3":"code","3f481080":"code","83d3f8dd":"code","c09dccd1":"code","c9a3b135":"code","be716056":"code","ef8b931d":"code","420b4c01":"code","c8f2bedf":"code","504e15e8":"code","158050d4":"code","a477593b":"code","8ed86ec1":"code","0e718b2b":"code","7d0780d8":"code","6cfd091c":"code","e72bdad0":"code","d72eb57f":"code","7854890c":"code","2ee2859b":"code","6c09fe39":"code","f4adc541":"code","5124d2fc":"code","2ca7b3d3":"code","9dd27edf":"code","91644c20":"code","845257a0":"code","a6b692e4":"code","4902fbb3":"code","4d8e13c9":"code","2db3e703":"code","f75c89ac":"code","3314c113":"code","ecf56c44":"code","f2dfb277":"code","07a5b18c":"code","6397c97e":"code","47e1ccc7":"code","ce462582":"code","1918bc95":"code","6d1c54d7":"code","2ec12cca":"code","69127abe":"code","666305a5":"code","e26dabc6":"code","875c2f7a":"code","f7a64c74":"code","625faa22":"code","d4dd5c56":"code","cf893de0":"markdown","076a13ef":"markdown","b9263fe3":"markdown","d8e70598":"markdown","f45dd4c9":"markdown","e2564c1c":"markdown","4c18bd6e":"markdown","38b05435":"markdown","0f520839":"markdown","82a2233a":"markdown","fe37236f":"markdown","63fc83af":"markdown","5d3e80b4":"markdown","9d34360b":"markdown","d22a49c9":"markdown","1994ae8e":"markdown","4df0694d":"markdown","9a8836bd":"markdown","7bc0700e":"markdown","603cc063":"markdown","07d3d8cf":"markdown","7446c1a4":"markdown","27b67a91":"markdown","dadfc29f":"markdown","c4345f36":"markdown","fa36d04b":"markdown","4a8d4abd":"markdown","07a57b0b":"markdown","955cd06c":"markdown","987b73bc":"markdown","27fadb48":"markdown","636bf33a":"markdown","b16df9ad":"markdown","b689ae9d":"markdown","d847afb9":"markdown","6856d4e5":"markdown","caa5e01f":"markdown","6d87963d":"markdown","3bdb1210":"markdown","493ece2a":"markdown","96ed0891":"markdown","12b2abe6":"markdown","698820f0":"markdown","468cbf03":"markdown","54f90ef9":"markdown","dd65f335":"markdown","0cd47070":"markdown","83b422fe":"markdown","b2d707af":"markdown","3b17942c":"markdown","3dbbea44":"markdown","a11d2ae7":"markdown","4a0effbc":"markdown","9e937834":"markdown","a88bcb66":"markdown","d5f274a0":"markdown","cbd95978":"markdown","049dfc0d":"markdown","d3a2811d":"markdown","31668099":"markdown","fef01980":"markdown","df55f7bd":"markdown","bf17aaaa":"markdown","1701bf72":"markdown","8e04d225":"markdown","e05da9ee":"markdown"},"source":{"4aa333fc":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport seaborn as sns\nimport re\nimport sys \n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.model_selection import train_test_split, KFold, RandomizedSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n\nfrom tqdm.notebook import tqdm\nfrom catboost import CatBoostRegressor","25c70041":"pd.options.display.max_columns = None","261a3cac":"def mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true))","41ca4a0c":"print('Python       :', sys.version.split('\\n')[0])\nprint('Numpy        :', np.__version__)","d28a32a0":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","bd6d2556":"VERSION    = 17\nVAL_SIZE   = 0.2   # 20%\nRANDOM_SEED = 42","dc8f0370":"!ls ..\/input\/","bbd202c1":"!ls ..\/input\/autoru-parsing","630adeea":"train = pd.read_csv('..\/input\/autoru-parsing\/parsing.csv')\ntest = pd.read_csv('..\/input\/sf-dst-car-price-prediction\/test.csv')\nsample_submission = pd.read_csv('..\/input\/sf-dst-car-price-prediction\/sample_submission.csv')","90d0e358":"train.head(5)","156eea70":"train.info()","e11227df":"train.dropna(axis=0, how='any', subset=['price'], inplace=True)","8a47a39c":"train.columns","57621665":"train.info()","ffbdb55b":"test.head(5)","c14154ad":"test.info()","d03b3a9c":"train.brand.unique()","a6983361":"test.brand.unique()","d5a716c0":"test['price'] = 0","78a59e55":"columns = ['bodyType', 'brand', 'car_url', 'color', 'engineDisplacement', 'enginePower',\n           'fuelType', 'modelDate', 'mileage', 'model_name', 'name', 'numberOfDoors',\n           'productionDate', 'vehicleTransmission', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', '\u041f\u0422\u0421', '\u041f\u0440\u0438\u0432\u043e\u0434', '\u0420\u0443\u043b\u044c', 'price']\ndf_train = train[columns]\ndf_test = test[columns]","5cc85bba":"df_train","676d9c9c":"df_test","0b7208ec":"df_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0435\u0441\u0442","aec3baa6":"data = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","6031b70b":"data","dbc5bca5":"len(data)","03e902b7":"data.drop_duplicates(subset=['car_url'], keep='first', inplace=True, ignore_index=True)","84384913":"len(data)","732e7074":"len(data[data['sample'] == 1])","3f56e271":"data.drop(['car_url'], axis=1, inplace=True)","2daced7e":"data['bodyType'].unique() ","a5db6778":"data['bodyType'].nunique() ","7fdc0163":"pattern = re.compile('[\u0430-\u044f]*')\nnew_column = []\nfor string in data['bodyType']:\n    new_column.append(pattern.match(str(string))[0])\ndata['bodyTypeShort'] = new_column","ede5d0d4":"data['bodyTypeShort'].nunique()","a2fb40fb":"data['brand'].value_counts()","07f78f8d":"data['color'].value_counts()","a1138fe4":"data['engineDisplacement'].nunique()","330f59eb":"data['engineDisplacement'].unique()","c4429a99":"data['engineDisplacement'].describe()","6b849ccc":"def to_float(column, pattern):\n    new_column = []\n    for string in column:\n        if pattern.match(string) != None:\n            new_column.append(float(pattern.match(string)[0]))\n        else:\n            new_column.append(2.0)\n    return new_column","0bece4dc":"pattern = re.compile('[0-9]\\.[0-9]')\ndata['engineDisplacement'] = to_float(data['engineDisplacement'], pattern)","b40c0da9":"data['engineDisplacement'].hist()","1f41a29a":"data['engineDisplacement'] = data['engineDisplacement'].apply(lambda x: np.log(x + 1))","558057ef":"data['engineDisplacement'].hist()","1f3dbc08":"data['enginePower'].nunique()","bb7421ed":"data['enginePower'].unique()","29d8e0fa":"data['enginePower'] = to_float(data['enginePower'], re.compile('[0-9]*'))","3e5366eb":"data['enginePower'].hist()","a8cbe7ca":"data['fuelType'].value_counts()","530884f8":"data['modelDate'].hist()","5e83c351":"data['modelDate'].describe()","95a6f266":"data[data['modelDate'] >= 1980]['modelDate'].hist()","516887ef":"data['mileage'].describe()","b8885fd2":"data['mileage'].hist()","b1b56451":"data['model_name'].nunique()","40e462a8":"data['brand_model'] = data['brand'] + ' ' + data['model_name']\ndata['brand_model'].nunique()","d78921a9":"data['name']","a34f2b4e":"data.drop(['name'], axis=1, inplace=True)","cef4f519":"data['numberOfDoors'].value_counts()","f5e66406":"data['numberOfDoors'][data['numberOfDoors'] == 0] = 3","121ec049":"data['numberOfDoors'].value_counts()","f1bdf69d":"data['productionDate'].hist()","1763dfae":"data['productionDate'].describe()","5e8617a2":"data[data['productionDate'] <= 1985]['productionDate'].value_counts()","f2dff942":"data['vehicleTransmission'].value_counts()","5fb5f83a":"data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].value_counts()","335d80f7":"pattern_owners = re.compile('[1-3]')\nnew_column = []\nfor string in data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b']:\n    if pattern_owners.match(string) != None:\n        new_column.append(int(pattern_owners.match(string)[0]))\ndata['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = new_column","0bc0c64b":"data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].value_counts()","d689dfe5":"data['\u041f\u0422\u0421'].value_counts()","58a6955f":"data['\u041f\u0422\u0421'] = data['\u041f\u0422\u0421'].fillna('\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b')","2e1716a5":"data['\u041f\u0440\u0438\u0432\u043e\u0434'].value_counts()","bd61da97":"data['\u0420\u0443\u043b\u044c'].value_counts()","fa4ca14e":"cat_columns = ['bodyType', 'brand', 'color', 'fuelType', 'modelDate', 'model_name', 'numberOfDoors',\n           'productionDate', 'vehicleTransmission', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', '\u041f\u0422\u0421', '\u041f\u0440\u0438\u0432\u043e\u0434', '\u0420\u0443\u043b\u044c', 'bodyTypeShort', 'brand_model']","50430305":"num_columns = ['engineDisplacement', 'enginePower', 'mileage', 'price']","aaa599cb":"sns.heatmap(data[num_columns].corr().abs(), vmin=0, vmax=1)","62770b9c":"data","77606d44":"X = data.query('sample == 1').drop(['sample', 'price'], axis=1)\nX_sub = data.query('sample == 0').drop(['sample', 'price'], axis=1)","c759e1ce":"X","8af3612e":"y = data[data['sample'] == 1]['price']\n# data.drop(['price'], axis=1, inplace=True)","e610d2b0":"y","dca089ba":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","3db134b3":"tmp_train = X_train.copy()\ntmp_train['price'] = y_train","3f481080":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c median \u043f\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c engineDisplacement \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 \u0440\u0430\u0437\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0435\u0441\u0442\npredict = X_test['engineDisplacement'].map(tmp_train.groupby('engineDisplacement')['price'].median())\n\n#\u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0438\u0432\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict.values))*100:0.2f}%\")","83d3f8dd":"model = CatBoostRegressor(iterations = 5000,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE'],\n                          silent=True,\n                         )\nmodel.fit(X_train, y_train,\n         cat_features=cat_columns,\n         eval_set=(X_test, y_test),\n         verbose_eval=0,\n         use_best_model=True,\n         #plot=True\n         )\n\nmodel.save_model('catboost_single_model_baseline.model')","c09dccd1":"# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\npredict = model.predict(X_test)\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict))*100:0.2f}%\")","c9a3b135":"np.log(y_train)","be716056":"model = CatBoostRegressor(iterations = 5000,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE'],\n                          silent=True,\n                         )\nmodel.fit(X_train, np.log(y_train),\n         cat_features=cat_columns,\n         eval_set=(X_test, np.log(y_test)),\n         verbose_eval=0,\n         use_best_model=True,\n         # plot=True\n         )\n\nmodel.save_model('catboost_single_model_2_baseline.model')","ef8b931d":"predict_test = np.exp(model.predict(X_test))\npredict_submission = np.exp(model.predict(X_sub))","420b4c01":"print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_test))*100:0.2f}%\")","c8f2bedf":"sample_submission['price'] = predict_submission\nsample_submission.to_csv(f'submission_v{VERSION}.csv', index=False)\nsample_submission.head(10)","504e15e8":"# cat_features_ids = np.where(X_train.apply(pd.Series.nunique) < 3000)[0].tolist()","158050d4":"# cat_features_ids","a477593b":"def cat_model(y_train, X_train, X_test, y_test):\n    model = CatBoostRegressor(iterations = 3000,\n                              learning_rate = 0.1,\n                              eval_metric='MAPE',\n                              random_seed = RANDOM_SEED,)\n    model.fit(X_train, y_train,\n              cat_features=cat_columns,\n              eval_set=(X_test, y_test),\n              verbose=False,\n              use_best_model=True,\n              plot=False)\n    \n    return(model)\n\n\ndef mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true))","8ed86ec1":"X = X.reset_index(drop=True)","0e718b2b":"y = y.reset_index(drop=True)","7d0780d8":"submissions = pd.DataFrame(0,columns=[\"sub_1\"], index=sample_submission.index) # \u043a\u0443\u0434\u0430 \u043f\u0438\u0448\u0435\u043c \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u044b \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\nscore_ls = []\nsplits = list(KFold(n_splits=5, shuffle=True, random_state=RANDOM_SEED).split(X, y))\n\nfor idx, (train_idx, test_idx) in tqdm(enumerate(splits), total=5,):\n    # use the indexes to extract the folds in the train and validation data\n    X_train, y_train, X_test, y_test = X.iloc[train_idx], y[train_idx], X.iloc[test_idx], y[test_idx]\n    # model for this fold\n    model = cat_model(y_train, X_train, X_test, y_test,)\n    # score model on test\n    test_predict = model.predict(X_test)\n    test_score = mape(y_test, test_predict)\n    score_ls.append(test_score)\n    print(f\"{idx+1} Fold Test MAPE: {mape(y_test, test_predict):0.3f}\")\n    # submissions\n    submissions[f'sub_{idx+1}'] = model.predict(X_sub)\n    model.save_model(f'catboost_fold_{idx+1}.model')\n    \nprint(f'Mean Score: {np.mean(score_ls):0.3f}')\nprint(f'Std Score: {np.std(score_ls):0.4f}')\nprint(f'Max Score: {np.max(score_ls):0.3f}')\nprint(f'Min Score: {np.min(score_ls):0.3f}')","6cfd091c":"submissions['blend'] = (submissions.sum(axis=1))\/len(submissions.columns)\nsample_submission['price'] = submissions['blend'].values\nsample_submission.to_csv(f'submission_blend_v{VERSION}.csv', index=False)\nsample_submission.head(10)","e72bdad0":"def label_encoding(cat_columns):\n    for column in cat_columns:\n        data[column] = data[column].astype('category').cat.codes","d72eb57f":"label_encoding(cat_columns)","7854890c":"data","2ee2859b":"imp_cat = pd.Series(mutual_info_classif(data[data['price'] != 0][cat_columns], data[data['price'] != 0]['price'],\n                                     discrete_features=True), index=cat_columns)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","6c09fe39":"X = data.query('sample == 1').drop(['sample', 'price', '\u0420\u0443\u043b\u044c', '\u041f\u0422\u0421', 'numberOfDoors', 'fuelType'], axis=1)\nX_sub = data.query('sample == 0').drop(['sample', 'price', '\u0420\u0443\u043b\u044c', '\u041f\u0422\u0421', 'numberOfDoors', 'fuelType'], axis=1)","f4adc541":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","5124d2fc":"y_train \/ 1.08","2ca7b3d3":"# linreg = LinearRegression()\n# linreg.fit(X_train, y_train\/1.08)","9dd27edf":"# predict_test = linreg.predict(X_test)\n# predict_submission = linreg.predict(X_sub)","91644c20":"# print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_test))*100:0.2f}%\")","845257a0":"model = DecisionTreeRegressor(random_state=RANDOM_SEED)\nmodel.fit(X_train, y_train\/1.08)","a6b692e4":"predict_test = model.predict(X_test)\npredict_submission = model.predict(X_sub)","4902fbb3":"print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_test))*100:0.2f}%\")","4d8e13c9":"X = data.query('sample == 1').drop(['sample', 'price'], axis=1)\nX_sub = data.query('sample == 0').drop(['sample', 'price'], axis=1)","2db3e703":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","f75c89ac":"rf = RandomForestRegressor(random_state=RANDOM_SEED)\nrf.fit(X_train, y_train)\npredict_test = rf.predict(X_test)\npredict_submission = rf.predict(X_sub)","3314c113":"print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_test))*100:0.2f}%\")","ecf56c44":"sns.barplot(rf.feature_importances_, X_train.columns)","f2dfb277":"y = y.reset_index(drop=True)\nX = X.reset_index(drop=True)","07a5b18c":"X = data.query('sample == 1')[['engineDisplacement', 'enginePower', 'fuelType', 'modelDate', 'mileage', 'model_name', 'productionDate', 'bodyTypeShort', 'brand_model']]\nX_sub = data.query('sample == 0')[['engineDisplacement', 'enginePower', 'fuelType', 'modelDate', 'mileage', 'model_name', 'productionDate', 'bodyTypeShort', 'brand_model']]","6397c97e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","47e1ccc7":"rf = RandomForestRegressor(random_state=RANDOM_SEED)\nrf.fit(X_train, y_train)\npredict_test = rf.predict(X_test)\npredict_submission = rf.predict(X_sub)","ce462582":"print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_test))*100:0.2f}%\")","1918bc95":"gbr = GradientBoostingRegressor(learning_rate=0.2, n_estimators=500, max_depth=5, min_samples_split=2, min_samples_leaf=2, subsample=1, random_state=RANDOM_SEED)\ngbr.fit(X_train, y_train\/1.08)\npredict_test = gbr.predict(X_test)\npredict_submission = gbr.predict(X_sub)","6d1c54d7":"print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict_test))*100:0.2f}%\")","2ec12cca":"def compute_meta_feature_mean(clf, X_train, X_test, y_train, cv):\n    \"\"\"\n    \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u0435\u0442\u0430-\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430. \n    \u041e\u043d\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043f\u0440\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043d\u043e\u0433\u043e\u043a\u043b\u0430\u0441\u0441\u043e\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438.\n\n    :arg clf: \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\n    :args X_train, y_train: \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\n    :arg X_test: \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n    :arg cv: \u043a\u043b\u0430\u0441\u0441, \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u0444\u043e\u043b\u0434\u044b (KFold)\n\n    :returns X_meta_train, X_meta_test: \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043e\u043a\n    \"\"\"\n    n_classes = len(np.unique(y_train))\n    X_meta_train = np.zeros((len(X_train), n_classes), dtype=np.float32)\n    X_meta_test = np.zeros((len(X_test), n_classes), dtype=np.float32)\n    for train_fold_index, predict_fold_index in cv.split(X_train):        \n        X_fold_train, X_fold_predict = X_train[train_fold_index], X_train[predict_fold_index]\n        y_fold_train = y_train[train_fold_index]\n        \n        folded_clf = clone(clf)\n        folded_clf.fit(X_fold_train, y_fold_train)\n        X_meta_train[predict_fold_index] = folded_clf.predict_proba(X_fold_predict)\n\n        X_meta_test += folded_clf.predict_proba(X_test)\n    \n    X_meta_test \/= cv.n_splits\n    return X_meta_train, X_meta_test   ","69127abe":"def compute_meta_feature(clf, X_train, X_test, y_train, cv):\n    \n    n_classes = len(np.unique(y_train))\n    X_meta_train = np.zeros((len(y_train), n_classes), dtype=np.float32)\n\n    splits = cv.split(X_train)\n    for train_fold_index, predict_fold_index in splits:\n        X_fold_train, X_fold_predict = X_train[train_fold_index], X_train[predict_fold_index]\n        y_fold_train = y_train[train_fold_index]\n        \n        folded_clf = clone(clf)\n        folded_clf.fit(X_fold_train, y_fold_train)\n        \n        X_meta_train[predict_fold_index] = folded_clf.predict_proba(X_fold_predict)\n    \n    meta_clf = clone(clf)\n    meta_clf.fit(X_train, y_train)\n    \n    X_meta_test = meta_clf.predict_proba(X_test)\n    \n    return X_meta_train, X_meta_test","666305a5":"def generate_meta_features(classifiers, X_train, X_test, y_train, cv):\n   \n    features = [\n        compute_meta_feature(clf, X_train, X_test, y_train, cv)\n        for clf in tqdm(classifiers)\n    ]\n    \n    stacked_features_train = np.hstack([\n        features_train for features_train, features_test in features\n    ])\n\n    stacked_features_test = np.hstack([\n        features_test for features_train, features_test in features\n    ])\n    \n    return stacked_features_train, stacked_features_test","e26dabc6":"cv = KFold(n_splits=10, shuffle=True, random_state=42)\n\ndef compute_metric(clf, X_train=X_train, y_train=y_train, X_test=X_test):\n    clf.fit(X_train, y_train)\n    y_test_pred = clf.predict(X_test)\n    return f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, y_test_pred))*100:0.2f}%\"","875c2f7a":"# stacked_features_train, stacked_features_test = generate_meta_features([\n#     RandomForestRegressor(n_estimators=300, n_jobs=-1, random_state=RANDOM_SEED),\n#     LinearRegression(normalize=True, n_jobs=-1)\n# ], X_train, X_test, y_train, cv)","f7a64c74":"# compute_metric(LogisticRegression(penalty = 'none', multi_class = 'auto', solver='lbfgs', random_state = 42), stacked_features_train, y_train, stacked_features_test)","625faa22":"# predict_submission = model.predict(X_sub)\n# predict_submission","d4dd5c56":"# sample_submission['price'] = predict_submission\n# sample_submission.to_csv(f'submission_v{VERSION}.csv', index=False)\n# sample_submission.head(10)","cf893de0":"#### \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u041f\u0438\u0440\u0441\u043e\u043d\u0430","076a13ef":"## Model 1: \u041d\u0430\u0438\u0432\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c\n\u042d\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u0446\u0435\u043d\u0443 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f (engineDisplacement). C \u043d\u0435\u0439 \u0431\u0443\u0434\u0435\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.","b9263fe3":"## fuelType","d8e70598":"## vehicleTransmission","f45dd4c9":"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 20.05%","e2564c1c":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a `price` \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d \u043d\u0430\u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0443, \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u044d\u0442\u0443 \u0447\u0430\u0441\u0442\u044c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","4c18bd6e":"## Model 2 : CatBoost","38b05435":"## EDA","0f520839":"\u0427\u0438\u0441\u043b\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u043b\u043e\u0441\u044c \u0441 25 \u0434\u043e 16. \u0414\u0430\u043b\u0435\u0435 \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0441\u0442\u0430\u0440\u044b\u0439 \u0438\u043b\u0438 \u043d\u043e\u0432\u044b\u0439) \u0441\u0438\u044c\u043d\u0435\u0435 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e","82a2233a":"\u0415\u0441\u0442\u044c \u043e\u0434\u043d\u043e \u043f\u0443\u0441\u0442\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u043e\u0434\u043e\u0439","fe37236f":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u043a\u0440\u0443\u043f\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0431\u0435\u0437 \u0438\u043d\u0444-\u0446\u0438\u0438 \u043e \u043a\u043e\u043b-\u0432\u0435 \u0434\u0432\u0435\u0440\u0435\u0439 \u0438 \u043f\u0440\u043e\u0447\u0435\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u0443\u0436\u0435 \u0435\u0441\u0442\u044c `numberOfDoors`","63fc83af":"### Submission","5d3e80b4":"## Stacking","9d34360b":"## model_name","d22a49c9":"\u0412\u044b\u0441\u043e\u043a\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f `engineDisplacement` \u0441 `enginePower`","1994ae8e":"\u041c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c `RandomForest`, `DecisionTree` \u0438 `CatBoost`(?) - \u043e\u043d\u0438 \u0434\u0430\u043b\u0438 \u043d\u0435\u043f\u043b\u043e\u0445\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f MAPE","4df0694d":"## name","9a8836bd":"### Submission","7bc0700e":"### \u0417\u0430\u0434\u0430\u0447\u0430\n-- \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0435\u0433\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u044f\u0432\u043b\u044f\u0442\u044c \u0432\u044b\u0433\u043e\u0434\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u043a\u043e\u0433\u0434\u0430 \u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f \u0446\u0435\u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430 \u043d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0440\u044b\u043d\u043e\u0447\u043d\u043e\u0439 \u0446\u0435\u043d\u044b).\n\n### \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \nMAPE (Mean Percentage Absolute Error) - \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u0432 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\u0445\n\n### \u041d\u0443\u0436\u043d\u043e\n* \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c train \u0434\u0430\u0442\u0430\u0441\u0435\u0442 - \u0441\u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435, \u043b\u0438\u0431\u043e \u043d\u0430\u0439\u0442\u0438 \u0433\u043e\u0442\u043e\u0432\u044b\u0439\n* \u041e\u0431\u0443\u0447\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c\n\n### \u041f\u043b\u044e\u0441\n* \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u043b\u0438 \u043a\u0430\u043a \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* \u041f\u043e\u0434\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0435\u0449\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n* \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438\n* \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 ML\n* \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0410\u043d\u0441\u0430\u043c\u0431\u043b\u044c \u043c\u043e\u0434\u0435\u043b\u0435\u0439, Blending, Stacking\n\n### \u042d\u0442\u0430\u043f\u044b \u0440\u0430\u0431\u043e\u0442\u044b\n* \u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u0441 \u0430\u0432\u0442\u043e.\u0440\u0443 - \u041d\u0438\u043d\u0430\n* EDA, Feature Engineering - \u0415\u043b\u0435\u043d\u0430\n* \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 - \u0415\u043b\u0435\u043d\u0430\n* \u0421\u0442\u0435\u043a\u0438\u043d\u0433","603cc063":"## modelDate","07d3d8cf":"\u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442","7446c1a4":"\u0421 \u043e\u043a\u0442\u044f\u0431\u0440\u044f 2020 \u0433\u043e\u0434\u0430 \u0446\u0435\u043d\u044b \u0432\u044b\u0440\u043e\u0441\u043b\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043d\u0430 8% (\u0420\u043e\u0441\u0441\u0442\u0430\u0442)","27b67a91":"## Data Preprocessing","dadfc29f":"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 93.57%","c4345f36":"`\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 15.01%`","fa36d04b":"## engineDisplacement","4a8d4abd":"## \u041f\u0440\u0438\u0432\u043e\u0434","07a57b0b":"['bodyType', 'brand', 'car_url', 'color', 'engineDisplacement', 'enginePower','fuelType', 'modelDate', 'mileage', 'model_name', 'name', 'numberOfDoors','productionDate', 'vehicleTransmission', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', '\u041f\u0422\u0421', '\u041f\u0440\u0438\u0432\u043e\u0434', '\u0420\u0443\u043b\u044c', ]","955cd06c":"\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c **\u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442** \u0438 \u0448\u0430\u0431\u043b\u043e\u043d **\u0441\u0430\u0431\u043c\u0438\u0448\u043d\u0430**","987b73bc":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441 label_encoding, \u0442\u0430\u043a \u043a\u0430\u043a CatBoost \u043b\u0443\u0447\u0448\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u043d\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438","27fadb48":"### DecisionTreeRegressor","636bf33a":"### Linear Regression","b16df9ad":"### bodyType","b689ae9d":"- `Train` - `32908` \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432\n- `Test` - `34686` \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432","d847afb9":"\u0412\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0430\u043c\u044b\u0435 \u0441\u0442\u0430\u0440\u044b\u0435 \u0430\u0432\u0442\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e","6856d4e5":"\u0418\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 'LTR', \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438 \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043a\u0430\u043a \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439","caa5e01f":"## Train Split","6d87963d":"# Setup","3bdb1210":"## \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c","493ece2a":"## \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b","96ed0891":"## \u041f\u0422\u0421","12b2abe6":"## productionDate","698820f0":"## \u0420\u0443\u043b\u044c","468cbf03":"\u041c\u0435\u0434\u0438\u0430\u043d\u0430 \u043d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u043d\u044b \u043f\u0443\u0441\u0442\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","54f90ef9":"### Log Traget\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u0437\u044f\u0442\u044c \u0442\u0430\u0440\u0433\u0435\u0442 \u0432 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c - \u044d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e np.log \u0438 np.exp).\n\n\u0412 \u043f\u0440\u0438\u043d\u0446\u0438\u0435\u043f\u0435 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0435 \u043f\u0440\u0438\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u0443\u0440\u0441 \u0434\u043e\u043b\u043b\u0430\u0440\u0430, \u0435\u0432\u0440\u043e \u0438\u043b\u0438 \u0433\u0440\u0435\u0447\u043a\u0438 :) \u0432 \u0434\u0430\u0442\u0443 \u0441\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0430\u0442\u0443 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432 \u0442\u0435\u0441\u0442\u0435 \u0432 parsing_unixtime","dd65f335":"\u0434\u043e 1981 \u0433\u043e\u0434\u0430 \u0430\u0432\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432 \u043e\u0434\u043d\u0443 \u0433\u0440\u0443\u043f\u043f\u0443","0cd47070":"#### \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e","83b422fe":"`\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 14.91%`","b2d707af":"\u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438","3b17942c":"\u0412 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 \u0442\u0435\u0441\u0442\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 `name`, \u0443\u0434\u0430\u043b\u044e \u0435\u0433\u043e","3dbbea44":"#### Submissions blend","a11d2ae7":"### CV","4a0effbc":"\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 `image`, `modelDate`, `model_info`, `numberOfDoors`, `priceCurrency`, `super_gen`, `vehicleConfiguration`, `vendor`, `car_url` \n\n\u0412 `\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435` \u0442\u0440\u0435\u0442\u044c \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n\n\u0412 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0447\u0442\u0438 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","9e937834":"**Train** \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0442\u0435\u043c \u0436\u0435 \u0431\u0440\u0435\u043d\u0430\u0434\u0430\u043c, \u0447\u0442\u043e \u0438 test:","a88bcb66":"### RandomForestRegressor","d5f274a0":"#### \u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","cbd95978":"\u0423\u0434\u0430\u043b\u0438\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 (\u043f\u043e url) \u0438\u0437 \u0442\u0440\u0435\u0439\u043d\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0432 \u043f\u0435\u0440\u0432\u043e\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435. \n\n\u0414\u0430\u043b\u0435\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0435 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f - \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c.","049dfc0d":"## Label Encoding","d3a2811d":"## numberOfDoors","31668099":"## enginePower","fef01980":"\u0420\u0430\u0437\u043c\u0435\u0440 `train` \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u043b\u0441\u044f \u043f\u043e\u0447\u0442\u0438 \u0432\u0434\u0432\u043e\u0435 ","df55f7bd":"### brand","bf17aaaa":"## mileage","1701bf72":"## color","8e04d225":"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0431\u0440\u0435\u043d\u0434 + \u043c\u043e\u0434\u0435\u043b\u044c","e05da9ee":"## Boosting"}}