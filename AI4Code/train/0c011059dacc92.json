{"cell_type":{"f7eb3cb9":"code","4f357f30":"code","b6959c8b":"code","85eecf4a":"code","f73d3a0c":"code","6e7baab7":"code","0970f28e":"markdown","4fe0924d":"markdown","b904c3eb":"markdown","3261f894":"markdown","8dba5024":"markdown","a3bb75ce":"markdown","a3bd410a":"markdown","cdf6b370":"markdown","3ea59598":"markdown","d66f9274":"markdown","2f1e494f":"markdown"},"source":{"f7eb3cb9":"import pandas as pd\n\ndf = pd.read_csv('typing_chart.csv')\ndf","4f357f30":"df.loc[df['Types'] == 'Fire']","b6959c8b":"df.iloc[[4,5,11,16]][['Types', 'Water']]","85eecf4a":"def matchup(weak, strong):\n    for col in df.columns:\n        if df.loc[df['Types'] == weak, col].values == 2.0:\n            if df.loc[df['Types'] == col, strong].values == 2.0:\n                print(col)","f73d3a0c":"matchup('Fire', 'Water')","6e7baab7":"matchup('Flying', 'Rock')","0970f28e":"If we narrow down the rows to just Grass, Ice, Bug, and Steel, and look through the Water column, the only typing that is super-effective against Water is Grass, which is one of our possible answers.\n\nThis means that **Grass** is the winner.\n\n**Fire** > **Grass** > **Water**\n\nBut how do we put this process into code?","4fe0924d":"From the row above, the only types that Fire is super-effective against is **Grass**, **Ice**, **Bug**, and **Steel** (denoted by a \"2\").\n\nThis gives us all of the possible answers for X, but it must also satisfy the condition of \"is it strong against **Water**?\"\n\nThis is where we look through the rows of our possibilities to see if it's super-effective against Water, our second given.","b904c3eb":"![typechart](https:\/\/img.pokemondb.net\/images\/typechart.png)","3261f894":"This project was an idea I came up with while playing my favorite Pokemon game, Pokemon XD: Gale of Darkness. In the game, there is this machine called a \"Purify Chamber\" that helps purify Shadow Pokemon. In other words, it lowers a gauge over time while you explore elsewhere.\n\nIn order for this gauge to deplete, it must be accompanied by up to four \"purified\" Pokemon inside the purify chamber.\n\nThe trick to this is that in order to maximize the speed (tempo) at which the Shadow Pokemon is purified, the four other Pokemon must be super-effective against each other, clockwise. For example, if the four Pokemon are Ground > Fire > Grass > Water, in that order, then it will make a loop and maximize the purification speed.\n\nHowever, I found that constantly finding different combinations of Pokemon for the purify chamber very exhausting as I found myself always needing one more Pokemon to complete the loop.\n\nThe problem was I couldn't find a Pokemon that was weak to one typing, but strong against another.\n\nThat's when I referred to the official Pokemon Type Chart:","8dba5024":"The website where I found the Pokemon Type Chart: https:\/\/pokemondb.net\/type\n\nSerebii does a great job with explaining everything that is Pokemon, including the Purify Chamber: https:\/\/www.serebii.net\/xd\/hall.shtml\n\nThe example video I provided in my GitHub: https:\/\/www.youtube.com\/watch?v=57ETSxesQ9U\n\nAnd one final special shoutout to Genius Sonority for developing such a great Pokemon game!","a3bb75ce":"If I'm given the type that is strong against X, then I can use that typing's **row** to find which types it's super-effective against.","a3bd410a":"# Credits","cdf6b370":"**To sum it up, to find if a particular type is super-effective against another, you look across its row. If you want to find out which types are super-effective against a particular type, you look down its column.**\n\nBut even staring at the chart was exhausting. There were so many numbers, rows, and columns to keep track of.\n\nThen I thought, \"maybe I can make a program to help me automate this process faster.\"\n\nSo I opened Excel and created the following csv file:","3ea59598":"Here, I replicated the chart to where every typing was accounted for and each damage multiplier was in its proper place.\n\nNow it was a matter of figuring out how I can code a solution to my problem: **How can I find a Pokemon typing that is weak to one and strong against another?**\n\nI started off with a simple example. If I wanted to know what type was weak against **Fire** but strong against **Water**, how would I find that?\n\nOr\n\n**Fire** > X > **Water**\n\nWhat is X?","d66f9274":"The function above does the following:\n\n**def matchup(weak, strong):**\n\n* Two variables are declared, weak and strong, which take string values of the two typings that we used in the example above in order to find X\n\n**for col in df.columns:**\n\n* First, it iterates through the columns and puts the string of the column heading into the variable \"col\"\n\n**if df.loc[df['Types'] == weak, col].values == 2.0:**\n\n* Next, it looks through the row of the \"weak\" typing and down the column that the for loop is on and checks if that value is a \"2\"\n\n**if df.loc[df['Types'] == col, strong].values == 2.0:**\n\n* If that if statement is True, then it checks the row of whatever \"col\" is and down the \"strong\" column to see if that value is also \"2\"\n\n**print(col)**\n\n* Finally, if both if statements are True, then the function prints col, which is the answer to our problem. If not, then the function moves on to another type until it runs out\n\n**Note: There can be more than one typing that comes out of the function. If it returns nothing, then there were no typings that satisfied the conditions.**","2f1e494f":"# Jaden's Purify Chamber Helper"}}