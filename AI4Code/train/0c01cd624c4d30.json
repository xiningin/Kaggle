{"cell_type":{"270ec788":"code","d530ae51":"code","2fd7d1ac":"code","53c6cead":"code","49724289":"code","4f54b75d":"code","de121c84":"code","3063bb87":"code","83f9779e":"code","63cc3b06":"code","de8c1738":"code","3df4ccbf":"code","db5a797d":"code","c4da1965":"code","45bd9ff9":"code","d7b0afac":"code","b9945c07":"code","0292d28d":"code","1be85e7b":"code","cd984d1b":"code","ec802b77":"code","dd6a70fa":"code","e6499791":"code","687b37c9":"code","b9ce7b0d":"code","073f4298":"code","74868231":"code","8bb0b298":"code","0dcddddc":"code","1086cc38":"code","812c79c2":"code","da44f175":"code","37217f32":"code","91304c4e":"code","6c17a0b4":"code","eb3dcfa3":"code","fb88db82":"code","7c59dea0":"code","98646cd5":"code","bb3b1e1e":"code","37bc0fb5":"code","bb7a03cf":"code","41431aed":"code","8bd46e3d":"code","38e678c4":"code","cb3452ec":"code","7641e865":"code","320aa860":"code","082f1cef":"code","2eb778b3":"markdown","aa73096b":"markdown","bcc5adb2":"markdown","967af218":"markdown","f97e0179":"markdown","62d7fc0a":"markdown","873230e5":"markdown"},"source":{"270ec788":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d530ae51":"import pandas as pd\nimport numpy as np\nprint(os.listdir(\"..\/input\"))\n\n\n","2fd7d1ac":"data = pd.read_csv(\"..\/input\/coviddata\/finaldatafortrainingofthemodel.csv\")","53c6cead":"data\n","49724289":"# import random\n# a = 0\n# for i in range(0, len(data)):\n#     S = data[\"symptom\"][i].split()\n#     travel = data[\"visiting Wuhan\"][i]\n#     if ('0' in S):\n#         if ('6' in S) or ('8' in S) or ('4' in S):\n#             if travel == 1:\n#                 data[\"result\"][i] = 0\n#     elif travel == 0 and ('4' in S):\n#         data[\"result\"][i] = 1\n#     elif ('5' in S):\n#         if ('6' in S):\n#             data[\"result\"][i] = 2\n#     else:\n#         symtoms = [0] * 10 + [2] * 4\n#         choice = random.choice(symtoms)\n#         data[\"result\"][i] = choice\nsym = []\npre = []\nasym = []\nfor i in data['result']:\n    if i == 0:\n        pre.append(1)\n    if i == 1:\n        asym.append(1)\n    if i == 2:\n        sym.append(1)\nprint(len(sym), len(pre), len(asym))\n            ","4f54b75d":"data.to_csv(\"finaldatafortrainingofthemodel.csv\")\n","de121c84":"from sklearn.linear_model import LogisticRegression","3063bb87":"X = data[[\"symptom\", \"age\", \"visiting Wuhan\"]]","83f9779e":"Y = data['result']\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nle.fit(X[\"symptom\"])\nX[\"symptom\"] = le.transform(X[\"symptom\"])","63cc3b06":"model =LogisticRegression()\n","de8c1738":"model.fit(X, Y)","3df4ccbf":"data","db5a797d":"le.transform(['3 6 1'])\npredict = model.predict(X)\n\n","c4da1965":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.title(\"Logistic Regression with Score 74.76%\")\nsns.lineplot(x='result', y=np.arange(0, len(data)), data=data, label=\"Real Values\")\nsns.lineplot(x=predict, y=np.arange(0, len(data)), label=\"Predicted Values\")\nplt.savefig(\"LogisticGraph.pdf\")\n","45bd9ff9":"from sklearn.metrics import accuracy_score","d7b0afac":"accuracy_score(Y, predict)*100\n","b9945c07":"from sklearn.ensemble import RandomForestClassifier","0292d28d":"model =RandomForestClassifier()","1be85e7b":"model.fit(X, Y)","cd984d1b":"predict = model.predict(X)\n","ec802b77":"accuracy_score(Y, predict)*100","dd6a70fa":"import seaborn as sns\nplt.title(\"Random Forest with Score 99.63%\")\n\nsns.lineplot(x='result', y=np.arange(0, len(data)), data=data)\nsns.lineplot(x=predict, y=np.arange(0, len(data)))\nplt.savefig(\"1.pdf\")","e6499791":"estimator = model.estimators_[1]\nestimator\n","687b37c9":"from sklearn.tree import export_graphviz\n","b9ce7b0d":"export_graphviz(estimator, out_file='tree_limited.dot', feature_names = X.columns,\n                class_names = ['1', '2' , '3'],\n                rounded = True, proportion = False, precision = 2, filled = True)","073f4298":"X.columns","74868231":"!dot -Tpng tree_limited.dot -o modelInAtree.png\n","8bb0b298":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(Y, predict)\nimport itertools\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Oranges):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    Source: http:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_confusion_matrix.html\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.figure(figsize = (16, 10))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title, size = 24)\n    plt.colorbar(aspect=4)\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=25, size = 14)\n    plt.yticks(tick_marks, classes, size = 14)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    \n    # Labeling the plot\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt), fontsize = 20,\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n        \n    plt.grid(None)\n    plt.tight_layout()\n    plt.ylabel('True label', size = 18)\n    plt.xlabel('Predicted label', size = 18)\nplot_confusion_matrix(cm, classes = ['presym', 'asym', 'sym'],\n                      title = 'Poverty Confusion Matrix')\nplt.savefig(\"2.pdf\")","0dcddddc":"sym = []\npre = []\nasym = []\nfor i in data['result']:\n    if i == 0:\n        pre.append(1)\n    if i == 1:\n        asym.append(1)\n    if i == 2:\n        sym.append(1)\n\nprint(len(sym), len(pre), len(asym))","1086cc38":"from sklearn.model_selection import train_test_split","812c79c2":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=42)","da44f175":"model_fc = RandomForestClassifier()\nmodel_fc.fit(X_train, y_train)","37217f32":"predictions = model.predict(X_test)","91304c4e":"accuracy_score(y_test, predictions)*100\n","6c17a0b4":"sns.countplot(data[\"result\"])\nplt.savefig(\"3.pdf\")","eb3dcfa3":"sns.lineplot(x='result', y=np.arange(0,len(data)), data=data)\nplt.savefig('4.pdf')","fb88db82":"sns.pairplot(data=data)\n\nplt.savefig('5.pdf')","7c59dea0":"data","98646cd5":"plt.figure(figsize = (25, 10))\nsns.distplot(data[\"age\"])\nplt.savefig(\"distplotages.pdf\")\n","bb3b1e1e":"plt.figure(figsize = (25, 10))\n\nsns.scatterplot(x=\"age\", y=np.arange(0, len(data)), data=data)\nplt.savefig(\"scatterplotages.pdf\")","37bc0fb5":"\n\nsns.kdeplot(data=X[\"age\"])\nplt.savefig(\"kdeplotage.pdf\")","bb7a03cf":"\nsns.violinplot(data[\"age\"])\nplt.savefig(\"violinplotages.pdf\")","41431aed":"\nsns.swarmplot(data[\"age\"])\nplt.savefig(\"violinplotages.pdf\")","8bd46e3d":"plt.figure(figsize = (25, 10))\nsns.distplot(X[\"symptom\"])\nplt.savefig(\"distplotsym.pdf\")\n","38e678c4":"\n\nsns.kdeplot(data=X[\"symptom\"])\nplt.savefig(\"kdeplotsym.pdf\")","cb3452ec":"X.columns = [\"symptom\", \"age\", \"travel history\"]","7641e865":"plt.figure(figsize=(50, 50))\ng = sns.pairplot(X)\ng.fig.set_size_inches(15,15)\nplt.savefig(\"Pairplotoffeatures.pdf\")","320aa860":"sns.countplot(X[\"travel history\"])\nplt.savefig(\"countplottravelhis.pdf\")","082f1cef":"plt.figure(figsize = (25, 10))\nsns.kdeplot(X[\"travel history\"], cumulative=True, bw=1)\nplt.savefig(\"distplottravelhis.pdf\")\n","2eb778b3":"# Plots for travel history","aa73096b":"# Different plots of symtoms\n","bcc5adb2":"# Different Plots of Age","967af218":"# Random Forest ","f97e0179":"# Codes Used In this\n**mild fever = 0,\ntiredness  = 1,\nno taste   = 2,\nsore throat= 3,\nno symptoms= 4,\nfever      = 5, \ndry cough  = 6,\ndiff breath= 7,\nsore throat= 8**\n\n\n\n\n> FOR PRESYMTOMATIC = 0\n> FOR ASYMPTOMATIC  = 1\n> FOR SYMPTOMATIC   = 2\n\n","62d7fc0a":"# Pairplot of features","873230e5":"# Logistic Regression"}}