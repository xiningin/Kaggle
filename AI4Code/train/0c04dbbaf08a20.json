{"cell_type":{"3b1893cc":"code","fa97f558":"code","d0ecbec3":"code","6c4a8a3e":"code","f8704502":"code","601c6b89":"code","7278a3f6":"code","781a9572":"code","68c29ab7":"code","e8a97d1c":"code","7ea6cd8b":"code","2ebc7780":"code","bb30f375":"code","c448d65d":"code","ede1917f":"code","31ceee4a":"code","92289cb0":"code","f6f3d0b4":"code","f63f6cd8":"code","c434c313":"code","02e304a5":"code","ac01bf24":"code","8d978d03":"code","76303857":"code","c3a546c9":"code","9eb2951d":"code","59b84b1d":"code","d4a95908":"code","93f5a3a4":"code","856db2db":"code","70e6dfe6":"code","5c0942b2":"code","0dc0a8e4":"code","f806e215":"code","e0555c70":"code","6fc15ade":"code","d8bdb310":"code","49ff64bd":"code","ef31fd09":"code","00668d79":"code","6b4ce5ae":"code","c4ab61d4":"code","81f796ed":"code","6b40d02d":"code","c3c85f38":"code","a649b427":"code","07ae1fa5":"code","972d3f54":"code","607d73ad":"code","cdff4b7a":"code","15359757":"code","cbb5ddc5":"code","65cf1e67":"markdown","2cc57c06":"markdown","76a2cd54":"markdown","cde1539f":"markdown","871c94f5":"markdown","856a4fb5":"markdown","0355d5e0":"markdown","64bb49d6":"markdown","c39b5450":"markdown","b95059bc":"markdown","722342c4":"markdown","b4fecdbc":"markdown","6d49ab73":"markdown","2c3b4276":"markdown","203140e7":"markdown","d0ad6ea3":"markdown","26c01c61":"markdown","0a3dafe1":"markdown","ad7dde3e":"markdown","760696de":"markdown"},"source":{"3b1893cc":"import pandas as pd\nfrom pandas import Series,DataFrame","fa97f558":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\n","d0ecbec3":"train_df.head()","6c4a8a3e":"train_df.describe(include='all')","f8704502":"import seaborn as sns","601c6b89":"sns.countplot('Survived',data=train_df)\n","7278a3f6":"train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","781a9572":"train_df[[\"Pclass\", \"Survived\"]].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","68c29ab7":"grid = sns.FacetGrid(train_df, row='Pclass', size=2.2, aspect=1.6)\ngrid.map(sns.barplot, 'Sex','Survived', alpha=.5, ci=None)\ngrid.add_legend()","e8a97d1c":"import matplotlib.pyplot as plt\n%matplotlib inline\ngrid = sns.FacetGrid(train_df, col='Survived', row='Sex', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","7ea6cd8b":"import matplotlib.pyplot as plt\n%matplotlib inline\ngrid = sns.FacetGrid(train_df, row='Sex', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","2ebc7780":"df = pd.DataFrame(train_df,columns=['PassengerId','Survived','Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked'])\n\n\n\n","bb30f375":"df = df.drop(['Cabin','PassengerId','Ticket'], axis = 1)\n","c448d65d":"df.head()","ede1917f":"test_df.head()","31ceee4a":"test = pd.DataFrame(test_df,columns=['PassengerId','Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked'])\n\n\n","92289cb0":"test = test.drop(['Cabin','Ticket'], axis = 1)\n","f6f3d0b4":"test.head()","f63f6cd8":"median = df['Age'].mean()\ndf['Age']= df['Age'].fillna(median)","c434c313":"sns.countplot('Embarked',data=train_df)","02e304a5":"import matplotlib.pyplot as plt\nplt.subplot(121)\nsns.boxplot('Pclass', 'Fare', 'Survived', df, orient='v')\n","ac01bf24":"df.groupby(['Embarked']).mean()","8d978d03":"df['Embarked'] = df['Embarked'].fillna('S')","76303857":"df.Age.isnull().any()","c3a546c9":"df.Embarked.isnull().any()","9eb2951d":"df.info()","59b84b1d":"median_test = test['Age'].median()\ntest['Age']= test['Age'].fillna(median_test)\nfare = test['Fare'].median()\ntest['Fare'] = test['Fare'].fillna(fare)\ntest.info()","d4a95908":"total_data = [df,test]","93f5a3a4":"for dataset in total_data:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)","856db2db":"for dataset in total_data:\n    dataset['Title'] = dataset['Title'].replace(['Capt','Col','Countess','Don','Dona','Dr','Jonkheer','Lady','Major','Master','Rev','Sir'], 'Honor')\n\n    dataset['Title'] = dataset['Title'].replace(['Mlle', 'Miss','Ms','Mme','Mrs','Mr'],'Common')\n    \ndf[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","70e6dfe6":"grid = sns.FacetGrid(df, row='Title', size=2.2, aspect=1.6)\ngrid.map(sns.barplot, 'Sex','Survived', alpha=.5, ci=None)\ngrid.add_legend()\n","5c0942b2":"df.groupby(['Title']).mean()\n","0dc0a8e4":"test.head()","f806e215":"for dataset in total_data:\n    dataset['Title'] = dataset['Title'].map( {'Honor': 1, 'Common': 0} ).astype(int)\n\n","e0555c70":"df = df.drop('Name', axis = 1)\ntest = test.drop('Name',axis = 1)\n","6fc15ade":"from sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\n\ndf['Gender'] = le.fit_transform(df.Sex)\n\ntest['Gender'] = le.fit_transform(test.Sex)\n","d8bdb310":"df = df.drop('Sex', axis = 1)\ntest = test.drop('Sex',axis = 1)","49ff64bd":"from sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\n\ndf['Embarked'] = le.fit_transform(df.Embarked)\n\ntest['Embarked'] = le.fit_transform(test.Embarked)","ef31fd09":"df.head()","00668d79":"test.head()","6b4ce5ae":"total_data = [df,test]","c4ab61d4":"X_train = df.drop(\"Survived\", axis=1)\nY_train = df[\"Survived\"]\nX_test  = test.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","81f796ed":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","6b40d02d":"# get Correlation Coefficient for each feature using Logistic Regression\ncoeff_df = DataFrame(df.columns.delete(0))\ncoeff_df.columns = ['Features']\ncoeff_df[\"Coefficient Estimate\"] = pd.Series(logreg.coef_[0])\n\n# preview\ncoeff_df","c3c85f38":"from sklearn.tree import DecisionTreeClassifier \nfrom sklearn.ensemble import RandomForestClassifier\n","a649b427":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","07ae1fa5":"clf = DecisionTreeClassifier(random_state=0)\nclf = clf.fit(X_train, Y_train)\nprint(dict(zip(X_train.columns, clf.feature_importances_)))","972d3f54":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred2 = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","607d73ad":"feature = ['Pclass', 'Age', 'SibSp', 'Parch','Fare','Embarked','Title','Gender']","cdff4b7a":"prediction = clf.predict(test[feature])\nprediction","15359757":"\nsubmission_randomforest = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':prediction})","cbb5ddc5":"filename = 'Titanic Prediction Beginner.csv'\n\nsubmission_randomforest.to_csv(filename, index = False)\n\nprint('Saved file:' + filename)","65cf1e67":"Explore the distribution to identify whether there is a skewed class distribution problem before analyzing the data in a machine learning model. \n","2cc57c06":"###EDA","76a2cd54":"Measure the feature importance ","cde1539f":"### Data Cleansing 2 : Imputation\nimpute the age with the median \nimpute the Embarked with the most frequent value","871c94f5":"### Data Cleansing 1: Drop Variables","856a4fb5":"drop the PassengerID and Cabin column","0355d5e0":"### Decision Tree and Random Forest\nUse Decision Tree and Random Forest to predict the result. ","64bb49d6":"## Machine Learning: Logistic Regression and Tree Models","c39b5450":"###Data Cleansing 3: Variable Modification","b95059bc":"changing string variable to numeric variable\nMale = 1, female = 0","722342c4":"This is a cruel fact. Male in class1 and class2 are still have more survival rate than female in class1 and class2. ","b4fecdbc":"Sex and Pclass are very importance features for survival.","6d49ab73":"collect all the title such as Jr, Mirs, or Miss and make it as a new variable\n1- honor, 0 - common","2c3b4276":"###Loading the data ","203140e7":"###Preview of the train data","d0ad6ea3":"Check whether the imputation is successful. \n","26c01c61":"Embarked: \"C\": 0, \"S\": 2,\"Q\": 1","0a3dafe1":"###Logistic Regression","ad7dde3e":"#### Submission","760696de":"Honor - 1 , common - 0"}}