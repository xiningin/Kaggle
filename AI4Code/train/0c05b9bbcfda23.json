{"cell_type":{"d96e75e8":"code","add0f5f1":"code","efa8a5e0":"code","547e0124":"code","2bdedf0a":"code","37f22031":"code","25351a6a":"code","deff2370":"code","26ec5146":"code","2de7dd30":"code","d471f510":"code","2e29ff7c":"code","a2ef1647":"code","104ff794":"code","4f75f5a7":"code","738a82d7":"code","740ce3e9":"code","c1d64443":"markdown","d2b9829f":"markdown","18c60e6b":"markdown","a8e3e645":"markdown","ef87b049":"markdown","f8afecf2":"markdown","3808f3e8":"markdown"},"source":{"d96e75e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nfrom category_encoders import TargetEncoder, OrdinalEncoder, LeaveOneOutEncoder\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import mean_squared_log_error\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport lightgbm as lgb\nfrom lightgbm import LGBMRegressor\nfrom collections import Counter\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import KFold\nfrom itertools import combinations\nfrom tqdm import tqdm_notebook as tqdm\n","add0f5f1":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","efa8a5e0":"df_train.CompanySize.fillna('None', inplace=True)","547e0124":"y_train = df_train.ConvertedSalary\nX_train = df_train.drop(['ConvertedSalary'], axis=1)\nX_test = df_test.copy()","2bdedf0a":"#vectorizer = TfidfVectorizer(max_features=10000, ngram_range=(1,2))\n#matrix = vectorizer.fit_transform(df_train.DevType.fillna('None'))\n#df_DT = pd.DataFrame(matrix.toarray(), columns=['DT_'+ k for k in vectorizer.get_feature_names()])\n#X_train = pd.concat([X_train, df_DT], axis=1)\n##\n#matrix = vectorizer.transform(df_test.DevType.fillna('None'))\n#df_DT = pd.DataFrame(matrix.toarray(), columns=['DT_'+ k for k in vectorizer.get_feature_names()])\n#X_test = pd.concat([X_test, df_DT], axis=1)\n##\n#X_train.drop('DevType', axis=1, inplace =True)\n#X_test.drop('DevType', axis=1, inplace =True)","37f22031":"#df_ext = pd.read_csv('..\/input\/country_info.csv')\n#X_train = pd.merge(X_train, df_ext, left_on='Country', right_on='Country', how='left')\n#X_test = pd.merge(X_test, df_ext, left_on='Country', right_on='Country', how='left')","25351a6a":"cols_oe = []\nfor c in X_train.columns:\n    if X_train[c].dtype == 'object':\n        cols_oe.append(c)\n#cols_oe = [c for c in cols_oe if c not in \n#           ['DevType','CommunicationTools']]","deff2370":"oe = OrdinalEncoder(cols=cols_oe, return_df=False)\nX_train[cols_oe] = oe.fit_transform(X_train[cols_oe])\nX_test[cols_oe] = oe.transform(X_test[cols_oe])","26ec5146":"X_train.drop('DevType', axis=1, inplace=True)\nX_test.drop('DevType', axis=1, inplace=True)","2de7dd30":"param_gbc ={'boosting_type':'gbdt', 'class_weight':None, 'colsample_bytree':0.7,\n        'importance_type':'gain', 'learning_rate':0.1, 'max_depth':-1,\n        'min_child_samples':20, 'min_child_weight':0.001, 'min_split_gain':0.0,\n        'n_estimators':9999, 'n_jobs':-1, 'num_leaves':31, 'objective':None,\n        'random_state':None, 'reg_alpha':0.0, 'reg_lambda':0.0, 'silent':True,\n        'subsample':1.0, 'subsample_for_bin':200000, 'subsample_freq':0}","d471f510":"scores = []\nskf = KFold(n_splits=5, random_state=99, shuffle=True)\nfor i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.iloc[train_ix,:], y_train[train_ix]\n#        X_train_, y_train_ = X_train.values[train_ix], y_train[train_ix]\n    X_val, y_val = X_train.iloc[test_ix,:], y_train[test_ix]\n#        X_val, y_val = X_train.values[test_ix], y_train[test_ix]\n    clf = LGBMRegressor(**param_gbc)\n    clf.fit(X_train_, y_train_, early_stopping_rounds=20, \n                eval_metric='rmsle', eval_set=[(X_val, y_val)])\n#        clf = LGBMClassifier()\n#        clf.fit(X_train_, y_train_)\n    y_pred = clf.predict(X_val)\n    y_pred[y_pred < 0] = 0.0\n    score = np.sqrt(mean_squared_log_error(y_val, y_pred))\n    scores.append(score)\n    print('CV Score of Fold_%d is %f'%(i, score))\nprint('Average Score is %f %f'%(np.array(scores).mean(), np.array(scores).std()))","2e29ff7c":"for i, score in enumerate(scores):\n    print('CV Score of Fold_%d is %f'%(i, score))\nprint('Average Score is %f %f'%(np.array(scores).mean(),np.array(scores).std()))","a2ef1647":"param_gbc ={'boosting_type':'gbdt', 'class_weight':None, 'colsample_bytree':0.7,\n        'importance_type':'gain', 'learning_rate':0.05, 'max_depth':-1,\n        'min_child_samples':20, 'min_child_weight':0.001, 'min_split_gain':0.0,\n        'n_estimators':150, 'n_jobs':-1, 'num_leaves':31, 'objective':None,\n        'random_state':None, 'reg_alpha':0.0, 'reg_lambda':0.0, 'silent':True,\n        'subsample':1.0, 'subsample_for_bin':200000, 'subsample_freq':0}","104ff794":"clf = lgb.LGBMRegressor(**param_gbc)\nclf.fit(X_train, y_train, eval_metric='rmsle')\ny_pred_all = clf.predict(X_train)\ny_pred_all[y_pred_all < 0] = 0.0\nscore = np.sqrt(mean_squared_log_error(y_train, y_pred_all))\nprint(score)","4f75f5a7":"y_pred = clf.predict(X_test)\ny_pred[y_pred < 0] = 0.0","738a82d7":"df_submit = pd.read_csv('..\/input\/sample_submission.csv')\ndf_submit.ConvertedSalary = y_pred","740ce3e9":"df_submit.to_csv('submission.csv', index=False)","c1d64443":"# TFIDF","d2b9829f":"# \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0","18c60e6b":"## OrdinalEncoding","a8e3e645":"# \u5168\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2","ef87b049":"# \u30e2\u30c7\u30eb\u4f5c\u6210","f8afecf2":"# \u3053\u3053\u304b\u3089\u5b9f\u884c","3808f3e8":"# \u30c6\u30fc\u30d6\u30eb\u7d50\u5408"}}