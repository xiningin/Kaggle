{"cell_type":{"0461aaa8":"code","b83bdd97":"code","44d23477":"code","d1ca324f":"code","0e41f473":"code","f28cbe5c":"markdown","5502b6e7":"markdown","77d0cf73":"markdown","5bab7f4e":"markdown","0d168685":"markdown","81f2c343":"markdown","65e02fde":"markdown"},"source":{"0461aaa8":"from __future__ import print_function, division\n\nfrom keras.datasets import mnist\nfrom keras.layers import Input, Dense, Reshape, Flatten, Dropout\nfrom keras.layers import BatchNormalization, Activation, ZeroPadding2D\nfrom keras.layers.advanced_activations import LeakyReLU\nfrom keras.layers.convolutional import UpSampling2D, Conv2D\nfrom keras.models import Sequential, Model\nfrom keras.optimizers import Adam\n\nimport matplotlib.pyplot as plt\n\nimport sys\n\nimport numpy as np\n\nimport os\n\nfrom PIL import Image, ImageSequence\n\nfrom matplotlib.pyplot import imshow","b83bdd97":"os.listdir('..\/input\/selfie2anime')","44d23477":"def load_data():\n        data = []\n        paths = []\n        for r, d, f in os.walk(r'..\/input\/selfie2anime\/trainB'):\n            for file in f:\n                if '.jpg' in file:\n                    paths.append(os.path.join(r, file))\n\n        for path in paths:\n            img = Image.open(path)\n            x = img.resize((128,128))\n            if(np.array(x).shape == (128,128,3)):\n                data.append(np.array(x))\n\n        x_train = np.array(data)\n        x_train = x_train.reshape(len(data),128,128,3)\n        return x_train","d1ca324f":"class DCGAN():\n    def __init__(self):\n        # Input shape\n        self.img_rows = 128\n        self.img_cols = 128\n        self.channels = 3\n        self.img_shape = (self.img_rows, self.img_cols, self.channels)\n        self.latent_dim = 200\n\n        optimizer = Adam(0.0002, 0.5)\n\n        # Build and compile the discriminator\n        self.discriminator = self.build_discriminator()\n        self.discriminator.compile(loss='binary_crossentropy',\n            optimizer=optimizer,\n            metrics=['accuracy'])\n\n        # Build the generator\n        self.generator = self.build_generator()\n        generator = self.generator\n\n        # The generator takes noise as input and generates imgs\n        z = Input(shape=(self.latent_dim,))\n        img = self.generator(z)\n\n        # For the combined model we will only train the generator\n        self.discriminator.trainable = False\n\n        # The discriminator takes generated images as input and determines validity\n        valid = self.discriminator(img)\n\n        # The combined model  (stacked generator and discriminator)\n        # Trains the generator to fool the discriminator\n        self.combined = Model(z, valid)\n        self.combined.compile(loss='binary_crossentropy', optimizer=optimizer)\n\n    def build_generator(self):\n\n        model = Sequential()\n        model.add(Dense(128 * 8 * 8, activation=\"relu\", input_dim=self.latent_dim))\n        model.add(Reshape((8, 8, 128)))\n        model.add(UpSampling2D())\n        model.add(Conv2D(128, kernel_size=3, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(Activation(\"relu\"))\n        model.add(UpSampling2D())\n        model.add(Conv2D(128, kernel_size=3, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(Activation(\"relu\"))\n        model.add(UpSampling2D())\n        model.add(Conv2D(128, kernel_size=3, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(Activation(\"relu\"))\n        model.add(UpSampling2D())\n        model.add(Conv2D(128, kernel_size=3, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(Activation(\"relu\"))\n        model.add(Conv2D(128, kernel_size=3, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(Activation(\"relu\"))\n        model.add(Conv2D(3, kernel_size=3, padding=\"same\"))\n        model.add(Activation(\"relu\"))\n        model.summary()\n\n        noise = Input(shape=(self.latent_dim,))\n        img = model(noise)\n\n        return Model(noise, img)\n\n    def build_discriminator(self):\n\n        model = Sequential()\n\n        model.add(Conv2D(32, kernel_size=3, strides=2, input_shape=self.img_shape, padding=\"same\"))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dropout(0.25))\n        model.add(Conv2D(64, kernel_size=3, strides=2, padding=\"same\"))\n        model.add(ZeroPadding2D(padding=((0,1),(0,1))))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dropout(0.25))\n        model.add(Conv2D(128, kernel_size=3, strides=2, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dropout(0.25))\n        model.add(Conv2D(256, kernel_size=3, strides=1, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dropout(0.25))\n        model.add(Flatten())\n        model.add(Dense(1, activation='sigmoid'))\n\n        model.summary()\n\n        img = Input(shape=self.img_shape)\n        validity = model(img)\n\n        return Model(img, validity)\n    \n\n    def train(self, epochs, batch_size=128, save_interval=50):\n\n        # Load the dataset\n        X_train = load_data()\n\n        # Rescale -1 to 1\n        X_train = X_train \/ 256\n\n        # Adversarial ground truths\n        valid = np.ones((batch_size, 1))\n        fake = np.zeros((batch_size, 1))\n\n        for epoch in range(epochs):\n\n            # ---------------------\n            #  Train Discriminator\n            # ---------------------\n\n            # Select a random half of images\n            idx = np.random.randint(0, X_train.shape[0], batch_size)\n            imgs = X_train[idx]\n\n            # Sample noise and generate a batch of new images\n            noise = np.random.normal(0, 1, (batch_size, self.latent_dim))\n            gen_imgs = self.generator.predict(noise)\n\n            # Train the discriminator (real classified as ones and generated as zeros)\n            d_loss_real = self.discriminator.train_on_batch(imgs, valid)\n            d_loss_fake = self.discriminator.train_on_batch(gen_imgs, fake)\n            d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)\n\n            # ---------------------\n            #  Train Generator\n            # ---------------------\n\n            # Train the generator (wants discriminator to mistake images as real)\n            g_loss = self.combined.train_on_batch(noise, valid)\n\n            # Plot the progress\n            print (\"%d [D loss: %f, acc.: %.2f%%] [G loss: %f]\" % (epoch, d_loss[0], 100*d_loss[1], g_loss))","0e41f473":"dcgan = DCGAN()\n#dcgan.train(epochs=15000, batch_size=40, save_interval=100)","f28cbe5c":"Downsizing each image from (256,256,3) to (128,128,3)","5502b6e7":"![24](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-GAN\/master\/results\/24.JPG)\n![17](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-GAN\/master\/results\/17.JPG)\n![10](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-GAN\/master\/results\/10.JPG)\n![3](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-GAN\/master\/results\/3.JPG)","77d0cf73":"\n# Results","5bab7f4e":"I tried to translate real selfies to anime but couldn't get good results, so this is generating anime faces based on noise using a Deep Convolutional GAN","0d168685":"<center>\n![](r'..\/input\/results\/train.gif')\n<\/center>","81f2c343":"Trained for 15000 epochs locally. Results shown below","65e02fde":"![training](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-GAN\/master\/train.gif)"}}