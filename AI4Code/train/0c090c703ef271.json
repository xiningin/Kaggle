{"cell_type":{"f2921f77":"code","8571da36":"code","8e4eb30d":"code","a02ad9b2":"code","35324e72":"code","21b14821":"code","87b97874":"code","e8076a05":"markdown"},"source":{"f2921f77":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom fastai.tabular import *\nfrom pathlib import Path\nfrom tqdm import tqdm\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8571da36":"path = Path('')\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntrain.drop(columns=['ID_code'],inplace=True)\n\ntester =  pd.read_csv('..\/input\/test.csv')\ntester.drop(columns=['ID_code'],inplace=True)\n\n#test = TabularList.from_df(tester.copy(), cat_names=cat_names, cont_names=cont_names)\n\ndep_var = 'target'\ncat_names = [] \ncont_names = train.columns\nprocs = [Normalize]\n\n#valid_idx = range(len(train)-2000, len(train))","8e4eb30d":"a = tester.columns\nt = pd.Index(['target'])\na = a.append(t)\n\ntest_probs = np.zeros(200000)\nnFolds = 12\nBATCH_SIZE = (4096*2)","a02ad9b2":"folds = StratifiedKFold(n_splits=nFolds, shuffle=False, random_state=99999)\nfor fold_, (trn_idx, val_idx) in tqdm(enumerate(folds.split(train.values, train['target'].values))):\n    valid_idx = val_idx\n    data = TabularDataBunch.from_df(path = path,df = train[a], dep_var = dep_var, valid_idx=valid_idx, procs=procs, cat_names=cat_names,bs=BATCH_SIZE, test_df=tester)\n    learn = tabular_learner(data, layers=[100,50,25], metrics=accuracy)\n    learn.fit_one_cycle(3, 1e-2)\n    test_predicts, _ = learn.get_preds(ds_type=DatasetType.Test)\n    test_probs += to_np(test_predicts[:, 1])","35324e72":"test_probs = test_probs\/nFolds","21b14821":"# (cat_x,cont_x),y = next(iter(data.train_dl))\n# for o in (cat_x, cont_x, y): print(to_np(o[:5]))\n#learn.save('ch-2')\n# learn.lr_find()\n# learn.recorder.plot()\n# preds = []\n# for i in tqdm(range(0,len(tester))):\n#     a = learn.predict(tester.iloc[i])\n#     b = a[2].numpy()\n#     preds.append(b[1])","87b97874":"sub = pd.read_csv('..\/input\/sample_submission.csv')\n\nsub['target'] = test_probs\n\nsub.to_csv('submission.csv',index=False)","e8076a05":"* Came across the idea of splitting the entire train set and using the model trained on the folds in order to make the predictions in another notebook - https:\/\/www.kaggle.com\/jesucristo\/30-lines-starter-solution-fast?scriptVersionId=11639715\n\nCombined that idea with the FastAI v1.0's Tabular learner."}}