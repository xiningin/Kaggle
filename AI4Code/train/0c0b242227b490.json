{"cell_type":{"e6c07e99":"code","bc7e1407":"code","f6dade0b":"code","bdcf09f1":"code","1e93966c":"code","a309b8aa":"code","7aaa045d":"code","2791840a":"code","6c886670":"code","6e5fe86c":"code","92cdb6c7":"code","96698750":"code","f8bef9c1":"code","d8ca1559":"code","a004440b":"code","0d22fc9d":"code","ad533f14":"code","d3d9dcc6":"code","df227884":"code","409b0fda":"code","9756eb36":"code","9702161e":"code","5f299d27":"code","66fb2521":"code","e3b107fa":"markdown","7f1524ea":"markdown","3b9412d7":"markdown","5337e0a7":"markdown","51b44887":"markdown"},"source":{"e6c07e99":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nfrom sklearn.base import clone\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import  RandomForestRegressor\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score, mean_squared_error, mean_absolute_error\n\nsns.set(style='darkgrid')\nplt.rcParams[\"figure.figsize\"] = (15,5)","bc7e1407":"df = pd.read_csv('\/kaggle\/input\/early-diabetes-classification\/diabetes_data.csv', sep=';')","f6dade0b":"df.head()","bdcf09f1":"df.shape","1e93966c":"df.dtypes","a309b8aa":"df.isna().sum()","7aaa045d":"sns.countplot(\n  x='class',\n  data=df\n);","2791840a":"sns.histplot(\n    x='age',\n     data=df,\n     hue='class'\n  );","6c886670":"sns.countplot(\n  x='gender',\n  data=df,\n  hue='class'\n);","6e5fe86c":"df1 = df.copy()","92cdb6c7":"df1['gender'] = df1['gender'].map({\"Male\":0, \"Female\":1}).astype( int )","96698750":"df1 = df1.drop('class', axis=1)","f8bef9c1":"cols = df1.columns","d8ca1559":"#put the values in the same scale.\nscaler = MinMaxScaler()\nX = scaler.fit_transform(df1)\nX = pd.DataFrame(X, columns = cols)\ny = df['class']","a004440b":"X_train_feat, X_test_feat, y_train_feat, y_test_feat = train_test_split(X, y, test_size = 0.25)","0d22fc9d":"rf = RandomForestRegressor()\nrf.fit(X_train_feat, y_train_feat)","ad533f14":"def imp_df(column_names, importances):\n  df = pd.DataFrame({'feature': column_names,\n                     'feature_importance': importances}).sort_values('feature_importance', ascending = False).reset_index(drop = True)\n  return df","d3d9dcc6":"def drop_col_feat_imp(model, X_train_feat, y_train_feat, random_state = 42):\n    \n    # clone the model to have the exact same specification as the one initially trained\n    model_clone = clone(model)\n    # set random_state for comparability\n    model_clone.random_state = random_state\n    # training and scoring the benchmark model\n    model_clone.fit(X_train_feat, y_train_feat)\n    benchmark_score = model_clone.score(X_train_feat, y_train_feat)\n    # list for storing feature importances\n    importances = []\n    \n    # iterating over all columns and storing feature importance (difference between benchmark and new model)\n    for col in X_train_feat.columns:\n        model_clone = clone(model)\n        model_clone.random_state = random_state\n        model_clone.fit(X_train_feat.drop(col, axis = 1), y_train_feat)\n        drop_col_score = model_clone.score(X_train_feat.drop(col, axis = 1), y_train_feat)\n        importances.append(benchmark_score - drop_col_score)\n    \n    importances_df = imp_df(X_train_feat.columns, importances)\n    return importances_df","df227884":"feat = drop_col_feat_imp(rf, X_train_feat, y_train_feat)","409b0fda":"plt.figure(figsize=(15,6))\nsns.barplot(data=feat, y='feature', x='feature_importance');","9756eb36":"feat_imp = feat[feat['feature_importance'] > 0 ]\nlist_feat = list(feat_imp.feature.values)\n\nX = X[list_feat]\ny = df['class']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state=42)","9702161e":"from sklearn.metrics import accuracy_score\nimport xgboost as xgb\n\nxgb_cl = xgb.XGBClassifier()\nxgb_cl.fit(X_train, y_train)\npreds = xgb_cl.predict(X_test)","5f299d27":"print('XGBoost : \\n', classification_report(y_test, preds))\nprint('XGBoost Accuracy: ', accuracy_score(y_test, preds))","66fb2521":"print('MAE:', mean_absolute_error(y_test, preds))\nprint('MSE:', mean_squared_error(y_test, preds))\nprint('RMSE:', np.sqrt(mean_squared_error(y_test, preds)))","e3b107fa":"# **PREPROCESSING**","7f1524ea":"## **CLASS**","3b9412d7":"# **XGBoost**","5337e0a7":"# **FEATURE SELECTION**","51b44887":"## **Scaler**"}}