{"cell_type":{"9a0706dc":"code","cda944a1":"code","4292ea97":"code","7ab6a21a":"code","8d84ce6e":"code","5e1148aa":"code","e208c6ea":"code","3020b540":"code","53f1c432":"code","e3fcdd09":"code","afbe95c1":"code","bb023d4a":"markdown","6ae2be0e":"markdown"},"source":{"9a0706dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cda944a1":"pokemon_df = pd.read_csv('..\/input\/Pokemon.csv')","4292ea97":"pokemon_df.head()","7ab6a21a":"pokemon_df.info()","8d84ce6e":"type_list = pokemon_df['Type 1'].unique()\ntype_count = pokemon_df[['Type 1']].groupby('Type 1')['Type 1'].count()\n\nplt.figure(figsize=(16, 6))\nax = sns.barplot(sorted(type_count),type_list,palette=\"Reds_d\")\nax.set_title('Number of type comparison')","5e1148aa":"type_index = pokemon_df[['Type 1','HP','Attack','Defense','Sp. Atk','Sp. Def']].groupby(['Type 1'])['HP','Attack','Defense','Sp. Atk','Sp. Def'].mean()\ntype_index.head()","e208c6ea":"type_index.max().max()","3020b540":"from math import ceil\n\ndef roundup(x):\n    return int(ceil(x \/ 10.0)) * 10\n\ndef get_criterias(maximum_attribute):\n    criteria_attribute = []\n    for i in range(3):\n        criteria_attribute.append(roundup(maximum_attribute * i * 1.25 \/3))\n    return criteria_attribute\n\nmaximum_attribute = roundup(type_index.max().max())\ncriteria_attribute = get_criterias(maximum_attribute)\ncriteria_attribute","53f1c432":"from math import pi\n\ndef plot_radar_comparison(type_name_1, type_name_2):\n    attributes = type_index.columns\n    attributes_count = len(attributes)\n\n    # We will get the stats and the 1st and 2nd type\n    type_1 = type_index.loc[type_name_1].values.tolist()\n    type_1 += type_1[:1]\n\n    # In addition we will concatinate the list with the first number of the list, to draw line connection\n    type_2 = type_index.loc[type_name_2].tolist()\n    type_2 += type_2[:1]\n    \n    # Calculate angles for filling purpose\n    angles = [n \/ float(attributes_count) * 2 * pi for n in range(attributes_count)]\n    angles += angles [:1]\n\n    angles2 = [n \/ float(attributes_count) * 2 * pi for n in range(attributes_count)]\n    angles2 += angles2 [:1]\n\n    ax = plt.subplot(111, polar=True)\n    \n    #Add the attribute labels to our axes\n    plt.xticks(angles[:-1],attributes)\n    plt.yticks([criteria_attribute[0],criteria_attribute[1],criteria_attribute[2]], [str(criteria_attribute[0]),str(criteria_attribute[1]),str(criteria_attribute[2])], color=\"grey\", size=7)\n    plt.ylim(0, type_index.max().max()*1.25)\n    #Plot the line around the outside of the filled area, using the angles and values calculated before\n    ax.plot(angles,type_1,'o-', linewidth=2)\n    ax.fill(angles, type_1, alpha=0.25)\n\n    ax.plot(angles2,type_2)\n    ax.fill(angles2, type_2, 'red', alpha=0.15)\n    \n    #Use figure text:\n    plt.figtext(0.2,0.9,type_name_1,color=\"blue\")\n    plt.figtext(0.3,0.9,'Versus')\n    plt.figtext(0.4,0.9,type_name_2,color=\"red\")\n    plt.show()\n    plt.show()","e3fcdd09":"plot_radar_comparison('Dark','Rock')","afbe95c1":"for key, value in type_index.idxmax().items():\n    if (value != 'Dragon'):\n        plot_radar_comparison(value, \"Dragon\")","bb023d4a":"**Since Dragons outmatch most of other types, I will plot radar charts among dragons and other leading types of each category. Hope this help!******","6ae2be0e":"**I want to make a simple comparison radar chart for our pokemon stats**"}}