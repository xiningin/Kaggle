{"cell_type":{"143889d8":"code","6220696b":"code","9115614f":"code","02871571":"code","b64fc8bf":"code","384914af":"code","34d9d954":"code","7a90c851":"code","856ef85b":"code","b6a13a8e":"code","3150d948":"code","246b7e53":"code","1bd02563":"code","5590e4a0":"code","d037f595":"code","c08b77bb":"code","aa70e7f2":"code","ff3f9612":"code","5fec94df":"markdown","d6595477":"markdown","8d963449":"markdown"},"source":{"143889d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6220696b":"#Importing Libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","9115614f":"#Reading the file and printing first 5 rows\ncust = pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ncust.head()","02871571":"#General Info of the data\ncust.info()","b64fc8bf":"#Checking Null values\ncust.isna().sum()","384914af":"y=cust.Churn.value_counts()\n\ny","34d9d954":"plt.style.available","7a90c851":"plt.style.use('seaborn-dark-palette')","856ef85b":"fig, ax = plt.subplots()\nwidth = 0.35\nind = np.arange(len(y))\n  \nax.barh(ind, y, width)\n\nfor i, v in enumerate(y):\n    ax.text(v+100 , i, str(v), \n            color = 'red', fontweight = 'bold')\n\nplt.yticks(ind,cust.Churn.unique(),fontsize=12)   \n\nplt.title('Customer Churn Distribution', fontsize=16, fontweight='bold')\nplt.xlabel('Customer Count', fontsize=12, fontweight='bold')\nplt.ylabel('Churn', fontsize=12, fontweight='bold')\n    \nplt.show()","b6a13a8e":"plt.style.use('seaborn')","3150d948":"pymnt=cust.groupby('PaymentMethod')['MonthlyCharges'].mean().round(2)\npymnt","246b7e53":"avg=cust.MonthlyCharges.mean()\navg","1bd02563":"plt.figure(figsize=(7,7))\n\nnb=pymnt.plot(kind='barh', y=\"MonthlyCharges\", x=\"PaymentMethod\")\nplt.yticks(fontsize=10)\n\nplt.title('Average Monthly Charges VS Payment Methods', fontsize=15, fontweight='bold', y=1.05)\nplt.ylabel('Payment Methods', fontsize=13, fontweight='bold')\nplt.xlabel('Monthly Charges', fontsize=13, fontweight='bold')\n\nfor i, v in enumerate(pymnt):\n    plt.text(v , i, str(v), \n            color = 'red', fontweight = 'bold',fontsize=9)\n\nnb.axvline(x=avg, color='darkgreen', label='Average', linestyle='--', linewidth=2)\n","5590e4a0":"plt.figure(figsize=(7,7))\n\nnb=pymnt.plot(kind='barh', y=\"MonthlyCharges\", x=\"PaymentMethod\")\nplt.yticks(fontsize=10)\n\nplt.title('Average Monthly Charges VS Payment Methods', fontsize=15, fontweight='bold', y=1.05)\nplt.ylabel('Payment Methods', fontsize=13, fontweight='bold')\nplt.xlabel('Monthly Charges', fontsize=13, fontweight='bold')\n\nplt.xlim([30, 80])\n\nnb.axvline(x=avg, color='darkgreen', label='Average', linestyle='--', linewidth=2)","d037f595":"PS=cust.PhoneService.value_counts()\nML=cust.MultipleLines.value_counts()\nIS=cust.InternetService.value_counts()\nOS=cust.OnlineSecurity.value_counts()\nOB=cust.OnlineBackup.value_counts()\nDP=cust.DeviceProtection.value_counts()\nTS=cust.TechSupport.value_counts()\nSTV=cust.StreamingTV.value_counts()\nSM=cust.StreamingMovies.value_counts()","c08b77bb":"cust=cust.replace(\"No phone service\", \"No service\")\ncust=cust.replace(\"No internet service\", \"No service\")\n\ncust.sample(10)","aa70e7f2":"plt.style.use('ggplot')","ff3f9612":"fig, axs = plt.subplots(3, 3)\n\nPS.plot(kind='bar',ax=axs[0,0],figsize=(15,15)).set_title('Phone Service', fontsize=12, fontweight='medium',color = 'darkblue')\naxs[0,0].set_ylabel('Count', fontsize=10, fontweight='bold')\naxs[0,0].tick_params(labelrotation=0)\n\nML.plot(kind='bar',ax=axs[0,1],figsize=(15,15)).set_title('Multiple Lines', fontsize=12, fontweight='medium',color = 'darkblue')\naxs[0,1].tick_params(labelrotation=0)\n\n\nIS.plot(kind='bar',ax=axs[0,2],figsize=(15,15)).set_title('Internet Service', fontsize=12, fontweight='medium',color = 'darkblue')\naxs[0,2].tick_params(labelrotation=0)\n\nOS.plot(kind='bar',ax=axs[1,0],figsize=(15,15)).set_title('Online Security', fontsize=12, fontweight='medium',color = 'darkblue')\naxs[1,0].set_ylabel('Count', fontsize=10, fontweight='bold')\naxs[1,0].tick_params(labelrotation=0)\n\nOB.plot(kind='bar',ax=axs[1,1],figsize=(15,15)).set_title('Online Backup', fontsize=12, fontweight='medium',color = 'darkblue')\naxs[1,1].tick_params(labelrotation=0)\n\nDP.plot(kind='bar',ax=axs[1,2],figsize=(15,15)).set_title('Device Protection', fontsize=12, fontweight='medium',color = 'darkblue')\naxs[1,2].tick_params(labelrotation=0)\n\nTS.plot(kind='bar',ax=axs[2,0],figsize=(15,15)).set_title('Tech Support', fontsize=12, fontweight='medium',color = 'darkblue')\naxs[2,0].set_ylabel('Count', fontsize=10, fontweight='bold')\naxs[2,0].tick_params(labelrotation=0)\n\nSTV.plot(kind='bar',ax=axs[2,1],figsize=(15,15)).set_title('Streaming TV', fontsize=12, fontweight='medium',color = 'darkblue')\naxs[2,1].tick_params(labelrotation=0)\n\nSM.plot(kind='bar',ax=axs[2,2],figsize=(15,15)).set_title('Streaming Movies', fontsize=12, fontweight='medium',color = 'darkblue')\naxs[2,2].tick_params(labelrotation=0)\n","5fec94df":"..","d6595477":"## Customer Churn Distribution","8d963449":"**To show the same graph in a way where the difference between the average monthly charges seems greater than they actually are, we can use to xlim function as shown below.**"}}