{"cell_type":{"a74c90f0":"code","946c06a9":"code","59a79f8b":"code","7750f22f":"code","f14fca73":"code","42c3bcfe":"code","fe5df94f":"code","05f955f8":"code","62cf54ad":"code","c12aad9a":"code","38963d0c":"code","ca75b915":"code","06d26ce5":"code","59ee0911":"code","c99a7746":"code","6e095da5":"markdown","b5ede3fe":"markdown","1f281064":"markdown","c4fc669c":"markdown","abcb740b":"markdown","586aee56":"markdown","790a5c3d":"markdown","960b060a":"markdown","6f7cb043":"markdown","da931064":"markdown","6ac8fab5":"markdown","5adb9975":"markdown","f37185d7":"markdown","de0a385c":"markdown"},"source":{"a74c90f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport cufflinks as cf\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly as ply\nimport datetime as dt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","946c06a9":"df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv')\ndf.describe(include='all')","59a79f8b":"import datetime as dt\n\ndf['ReportDateStamp'] = pd.to_datetime(df['reporting date'])\ndf['ReportDate_F'] = df['ReportDateStamp'].apply(lambda x: x.date())\nSta = df['ReportDateStamp'].max().strftime(\"%d\/%m\/%Y\")\nasa = dt.datetime.today().strftime(\"%d\/%m\/%Y\")\nEnd = df['ReportDateStamp'].min().strftime(\"%d\/%m\/%Y\")\n\nprint('Most Recent: ' + Sta)\nprint('Earliest: ' + End )\nprint('As At: ' + asa )","7750f22f":"plt.figure(figsize=(15,5)) \nsns.set(palette='colorblind')\nsns.distplot(df['age'],rug=True,hist=False)\nplt.xlim(left=0)","f14fca73":"country_list = list(df['country'].value_counts().head(7).reset_index()['index'])\npopular_countries = df[df['country'].isin(country_list)]\n\n\nfig = go.Figure()\nfig.add_trace(go.Violin(x=popular_countries['country'][ popular_countries['gender'] == 'male' ],\n                        y=popular_countries['age'][ popular_countries['gender'] == 'male' ],\n                        legendgroup='M', scalegroup='M', name='Male',\n                        line_color='blue')\n             )\nfig.add_trace(go.Violin(x=popular_countries['country'][ popular_countries['gender'] == 'female' ],\n                        y=popular_countries['age'][ popular_countries['gender'] == 'female' ],\n                        legendgroup='F', scalegroup='F', name='Female',\n                        line_color='green')\n             )\n\nfig.update_traces(box_visible=True, meanline_visible=True)\nfig.update_layout(violinmode='group')\nfig.show()","42c3bcfe":"fig, ax = plt.subplots(nrows=1,ncols=2,figsize=(12,6))\n\n\nelse_countries = df[~df['country'].isin(country_list)]\nsns.boxplot(y=else_countries['age'],x=else_countries['gender'],ax=ax[0])\nsns.boxplot(y=popular_countries['age'],x=popular_countries['gender'],ax=ax[1])\n\n# ax[2].table(cellText=else_countries['gender'].value_counts().reset_index()\n#             , cellColours=None, cellLoc='right', colWidths=None, rowLabels=None, \n#       rowColours=None, rowLoc='left', colLabels=None, colColours=None, colLoc='center',\n#       loc='right', bbox=None, edges='closed')\n\nax[0].title.set_text('All ex 7 countries')\nax[1].title.set_text('Top 7 countries')\n\n\nplt.ylim((0,100))\nprint(df['gender'].value_counts().reset_index())","fe5df94f":"import plotly.express as px\ntime_series = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv',\n                          index_col='id', parse_dates=True)\ntime_series['recovered_value'] = np.where(time_series['recovered'] != '0',1,0)\ntime_series['case'] = 1\n\nplot1 = time_series.groupby(['reporting date'])['recovered_value','case'].sum()\nplot1['recovery_rate'] = plot1['recovered_value']\/plot1['case'] \n# Compute the centered 7-day rolling mean\nplt.figure(figsize=(15,5))\nrolling=14\nplot1_7d = plot1.rolling(rolling, center=True).mean().reset_index()\nfig = px.line(plot1_7d, x=\"reporting date\", y=\"recovered_value\", title='Recovery figures  (rolling)')\nfig.show()","05f955f8":"#sns.countplot(x='symptom',data=df)\ndf[['symptom_1','symptom_2','symptom_3']] = df['symptom'].str.split(pat=',', n=2, expand=True)\n\nplot,ax = plt.subplots(nrows=2,ncols=1,figsize=(22,10))\nsns.countplot(x='symptom_1',data=df,ax=ax[0])\nsns.countplot(x='symptom_2',data=df,ax=ax[1])\n\nax[0].set_title('Symptom (1)')\nax[1].set_title('Symptom (2)')\n\nfor ax in plot.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=45)\n    plt.xlabel(' ')\nplt.tight_layout()","62cf54ad":"new_df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv',parse_dates=True,index_col='SNo')","c12aad9a":"new_df.describe(include='all')","38963d0c":"new_df['ReportDateStamp'] = pd.to_datetime(new_df['Last Update'])\nnew_df['ReportDate_F'] = new_df['ReportDateStamp'].apply(lambda x: x.date())\nSta = new_df['ReportDateStamp'].max().strftime(\"%d\/%m\/%Y\")\nasa = dt.datetime.today().strftime(\"%d\/%m\/%Y\")\nEnd = new_df['ReportDateStamp'].min().strftime(\"%d\/%m\/%Y\")\n\nprint('Most Recent: ' + Sta)\nprint('Earliest: ' + End )\nprint('As At: ' + asa )","ca75b915":"total_df = new_df.groupby(['Country\/Region','ObservationDate'])['Confirmed'].sum().reset_index()\ncountries_summary  = new_df.groupby(['Country\/Region'])['Confirmed'].sum().reset_index()\ncountries_summary  = countries_summary.loc[countries_summary['Country\/Region'] != 'Mainland China',:]\ncountries_summary  = countries_summary.sort_values(by=['Confirmed'],ascending=0).head(15)\n\nplt.figure(figsize=(20,5))\nsns.barplot(x='Country\/Region',y='Confirmed',data=countries_summary)\nplt.xticks(rotation=45)\n","06d26ce5":"EU_MAP = dict({\"Austria\" : 'EU',\n\"Belgium\" : 'EU' ,\n\"Bulgaria\" : 'EU' ,\n\"Croatia\" : 'EU' ,\n\"Cyprus\" : 'EU' ,\n\"Czechia\" : 'EU' ,\n\"Denmark\" : 'EU' ,\n\"Estonia\" : 'EU' ,\n\"Finland\" : 'EU' ,\n\"France\" : 'EU' ,\n\"Germany\" : 'EU' ,\n\"Greece\" : 'EU' ,\n\"Hungary\" : 'EU' ,\n\"Ireland\" : 'EU' ,\n#\"Italy\" : 'EU' ,\n\"Latvia\" : 'EU' ,\n\"Lithuania\" : 'EU' ,\n\"Luxembourg\" : 'EU' ,\n\"Malta\" : 'EU' ,\n\"Netherlands\" : 'EU' ,\n\"Poland\" : 'EU' ,\n\"Portugal\" : 'EU' ,\n\"Romania\" : 'EU' ,\n\"Slovakia\" : 'EU' ,\n\"Slovenia\" : 'EU' ,\n\"Spain\" : 'EU' ,\n\"Sweden\" : 'EU' ,\n\"UK\" : 'UK'})\n\nnew_df['EU_member'] = new_df['Country\/Region'].map(EU_MAP)\nnew_df.groupby(['EU_member'])['Confirmed'].sum().reset_index()\n\n\ngroupd_df = new_df.groupby(['EU_member']).agg({'Confirmed': 'sum'})\n# Change: groupby state_office and divide by sum\npcts = groupd_df.apply(lambda x: 100 * x \/ float(x.sum()))\npcts","59ee0911":"d1 = dt.datetime(2020,2,15) \nnew_df['ObservationDate_F'] = pd.to_datetime(new_df['ObservationDate'])\nnew_df = new_df.loc[new_df['ObservationDate'] >= d1,:]\n\ntime_series = new_df.groupby(['EU_member','ObservationDate_F'])['Confirmed'].sum().reset_index()\n\n\n\nplt.figure(figsize=(20,5))\nsns.lineplot(x='ObservationDate_F', y='Confirmed', data=time_series, hue='EU_member')\nplt.xticks(rotation=45)\n","c99a7746":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import Pipeline\n\nmodel = Pipeline([('poly', PolynomialFeatures(degree=2)),('linear', LinearRegression(fit_intercept=False))])\n\nmodel = model.fit(x[:, np.newaxis], y)","6e095da5":"## Next Step to try and categorise somehow the groups infected\n\n","b5ede3fe":"It's not going to be a straight comparison since UK only represents 5% of cases. ","1f281064":"Conclusion from this plot shows that Thailand should focus on younger children since, the have the lowest concentration of ages. \nJapan could be worse effected since they have a higher median age of all countries for both genders. \nLooking at this plot, people across the world need to stop seeing their Grandmothers. Compared to males, females are skewed much higher on the infection for most countires.","c4fc669c":"Looks like dataset hasn't been updated. Maybe continue once this has been refreshed?","abcb740b":"Seems have at an overall level, double peaks. Lets see how it varies by country.","586aee56":"Could so classify the symptoms for dies vs not dies, might need more data though (?)","790a5c3d":"## Switch datasets to the larger aggregate data, predict the cases X country","960b060a":"## Look at the line-by-line dataset, doesn't seem to be updated or very big but still worth a look","6f7cb043":"## Analyse UK vs EU countries infection rates","da931064":"This df has been updated much more recently. \nHere I am interested in EU countires cases to the UK. So try and group EU countries (exclude Italy, analyse seperately)\nI want to see if the UK governments' sliggish response has effected the cases.","6ac8fab5":"So there is no need to go out and buy toilet paper after all, we can sleep soundly. \nPossibly need to stock up on Lemsip and cold packs.","5adb9975":"Use the rolling feature to show recovery figures","f37185d7":"Females seem to be much older when they contract virus when split down the different countires M\/F, however when comparing the top 7 vs else, not so clear but *there is still a difference*. This shows that when countries get infected, they seem to be being driven by old(er) females. Could be noise but male distributions are consistent. Cannot draw any stable conclusions on 382 females overall","de0a385c":"Simple countplot of all countries in df, excluding mainland China. Which clearly has the most cases. Next would be to group the EU countires excluding Italy to stop it skewing result."}}