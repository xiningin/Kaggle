{"cell_type":{"9ab89b43":"code","1a14153d":"code","e6fd6850":"code","074ae5c9":"code","a8074b11":"code","98b07790":"code","d26f5961":"code","f7f151c5":"code","9b1cc4eb":"code","4c3463fb":"code","ccfea8e1":"code","b39653cb":"code","958d4505":"code","c2430b28":"code","ac82a9a8":"code","226843f9":"code","cef3346f":"code","8bc41703":"code","7bb3644f":"code","bbb8b0df":"code","f89c8b3b":"code","81890d67":"code","c9517259":"code","94c4f916":"code","18a9b48d":"code","0a562b97":"code","c907aa49":"code","f10bcbf0":"code","5773f549":"code","8aab7fa9":"code","ec6adf63":"code","03182bf3":"code","e64db7fc":"code","a99ee49b":"code","3fceb279":"code","03260db0":"code","ecf0bc01":"code","330f375b":"code","f9515ac3":"code","aec8588e":"code","af311ddf":"code","969b5514":"code","7ccfefca":"code","3dc1767b":"code","4c538f23":"code","dbf4a9c3":"code","a7c8b435":"code","d770f96e":"code","373973ad":"code","c14e08e7":"code","92a93c71":"code","8d4268b4":"code","85a90606":"code","50b1e44a":"code","361d8170":"code","7fa25a8f":"code","20930517":"code","f1f82233":"code","f206c4e5":"code","118ee936":"code","5cce18b8":"code","7332dd94":"code","ff005685":"code","3d6b5c69":"code","0398e977":"code","849abc40":"code","62bdeffd":"code","7f78efb3":"code","b64ca97a":"code","8460d4aa":"code","5f311a46":"code","3b796f09":"code","2f404bce":"code","c8317bad":"code","831b975a":"code","0f1ef2de":"code","fe7f68ab":"code","5df2ee50":"code","1a31f756":"code","fba5e953":"code","c6202277":"code","5370fad9":"code","1163f54f":"code","79c3258c":"code","04589b2f":"code","860a57d7":"code","b39e7925":"code","b7a0696f":"code","2ad291eb":"code","c48cfb63":"code","34be020a":"code","81cde027":"code","29bcbab1":"code","a1d95fb9":"code","16e29a99":"code","6f25eccb":"code","bc2a26c6":"code","9de197ef":"code","6b03a9cc":"markdown","de2eff11":"markdown","d2b29c3c":"markdown","2ad84543":"markdown","da4c97a7":"markdown","414466c5":"markdown","30b71b80":"markdown","1b1a4b70":"markdown","c58f86e8":"markdown","263e0248":"markdown","71ec435e":"markdown","097bffb4":"markdown","40fceae9":"markdown","faafc56c":"markdown","6014c1e9":"markdown","bcfaa125":"markdown","78b94673":"markdown","dbd01356":"markdown","f9eabba1":"markdown","e6183bee":"markdown","f5e65dfa":"markdown","4727f217":"markdown","0f6a0bca":"markdown","645197a6":"markdown","7b9d5917":"markdown","5e18ff9a":"markdown","cc5c0a02":"markdown","e5d2e452":"markdown","f5769c24":"markdown","63e0c90c":"markdown","b40227eb":"markdown","66ec8923":"markdown","ad1d066d":"markdown","99d6b400":"markdown","90f026a2":"markdown","eeca5018":"markdown","94473e5f":"markdown","86b1cb6f":"markdown","11f6034b":"markdown","75658b67":"markdown","bbd36262":"markdown","c01369ea":"markdown","1c117b4c":"markdown","0fb52959":"markdown","cfa08450":"markdown","b2008149":"markdown","f5bc9fcd":"markdown","30703e2e":"markdown","815607e3":"markdown","3928c518":"markdown","b8e5449d":"markdown","1f18ec98":"markdown","430b269c":"markdown","4a03a885":"markdown","08e5b90f":"markdown","f93b0921":"markdown","a5d57469":"markdown","edadd756":"markdown","8367fb18":"markdown","484373af":"markdown","c41a16d3":"markdown","9ede7ba0":"markdown","4eda17b9":"markdown","842e5c27":"markdown","e7c66d04":"markdown","8768ba9d":"markdown","d54ee7fe":"markdown","80f34332":"markdown","40f8ce84":"markdown","18a76268":"markdown","0b205e73":"markdown","8cdd5228":"markdown","9b3b42c7":"markdown","6ff346fd":"markdown","57dc3ab6":"markdown"},"source":{"9ab89b43":"import pandas as pd\nimport numpy as np\nimport plotly.figure_factory as ff\nimport plotly.express as px\n!pip install pycountry_convert\nimport pycountry, pycountry_convert, functools\n!pip install xlrd\n!pip install openpyxl\nimport json","1a14153d":"@functools.lru_cache(None)\ndef get_country_code(country):\n    try:\n        result = pycountry.countries.search_fuzzy(country)\n    except:\n        return 'NaN'\n    else:\n        return result[0].alpha_3\n\ndef get_country_name(alpha_3_code):\n    result = pycountry.countries.get(alpha_3=alpha_3_code)\n    if result is None:\n        return None\n    else:\n        return result.name\n\ndef get_continent_code(country_name):\n    code = get_country_code(country_name)\n    if code is None:\n        return None\n    country = pycountry.countries.get(alpha_3=get_country_code(country_name))\n    if country is None:\n        return None\n    try:\n        return pycountry_convert.country_alpha2_to_continent_code(country.alpha_2)\n    except:\n        return None","e6fd6850":"countries_dataset = pd.read_csv('..\/input\/countries-of-the-world\/countries of the world.csv', decimal=',')\ncountries_dataset.head()","074ae5c9":"print('Shape:', countries_dataset.shape, '\\n')\nprint('Missing values:')\nprint(countries_dataset.isnull().sum(), '\\n')\nprint('Data types:')\nprint(countries_dataset.dtypes, '\\n')","a8074b11":"columns_names = ['Country', 'Region', 'Population', 'Area, sq. km.',\n       'Pop. Density, per sq. km.', 'Coastline (coast\/area ratio)',\n       'Net migration, %', 'Infant mortality, per 1000 births',\n       'GDP, $ per capita', 'Literacy, %', 'Phones, per 1000', 'Arable, %',\n       'Crops, %', 'Other, %', 'Climate', 'Birthrate, per 1000 inhabitants', 'Deathrate, per 1000 inhabitants',\n       'Agriculture, %', 'Industry, %', 'Service, %']\ncountries_dataset.columns = columns_names\ncountries_dataset['Area, sq. km.'] *= 2.58999\ncountries_dataset['Pop. Density, per sq. km.'] *= 2.58999\ncountries_dataset['Agriculture, %'] *= 100\ncountries_dataset['Industry, %'] *= 100\ncountries_dataset['Service, %'] *= 100\ncountries_dataset = countries_dataset.round(decimals=3)\ncountries_dataset.drop(['Region', 'Climate', 'Infant mortality, per 1000 births', 'GDP, $ per capita', 'Deathrate, per 1000 inhabitants'], axis=1, inplace=True)","98b07790":"countries_dataset['Country'] = countries_dataset['Country'].astype(str).apply(lambda x: x[:-1] if x != 'NaN' else x)\ncountries_codes_map = {country: get_country_code(country) for country in countries_dataset['Country']}","d26f5961":"for country in countries_codes_map.keys():\n    if countries_codes_map[country] == 'NaN':\n        print(country)","f7f151c5":"missing_countries_codes = {\n    'Antigua & Barbuda': 'ATG',\n    'Bahamas, The': 'BHS',\n    'Bosnia & Herzegovina': 'BIH',\n    'British Virgin Is.': 'VGB',\n    'Burma': 'MMR',\n    'Cape Verde': 'CPV',\n    'Central African Rep.': 'CAF',\n    'Congo, Dem. Rep.': 'COD',\n    'Congo, Repub. of the': 'COG',\n    'East Timor': 'TLS',\n    'Gambia, The': 'GMB',\n    'Korea, North': 'PRK',\n    'Korea, South': 'KOR',\n    'Laos': 'LAO',\n    'Macau': 'MAC',\n    'Micronesia, Fed. St.': 'FSM',\n    'Netherlands Antilles': 'ANT',\n    'N. Mariana Islands': 'MNP',\n    'Saint Kitts & Nevis': 'KNA',\n    'St Pierre & Miquelon': 'SPM',\n    'Sao Tome & Principe': 'STP',\n    'Swaziland': 'SWZ',\n    'Trinidad & Tobago': 'TTO',\n    'Turks & Caicos Is': 'TCA',\n}\nfor country in missing_countries_codes.keys():\n    countries_codes_map[country] = missing_countries_codes[country]","9b1cc4eb":"countries_codes_map['Niger'] = 'NER'\ncountries_codes_map['Virgin Islands'] = 'VIR'\ncountries_codes_map['Guadeloupe'] = 'GLP'\ncountries_codes_map['Mayotte'] = 'MYT'","4c3463fb":"countries_dataset['Country code (ISO)'] = countries_dataset['Country'].map(countries_codes_map).astype(str)\ncountries_dataset = countries_dataset.loc[countries_dataset['Country code (ISO)'] != 'NaN']\ncountries_dataset.shape","ccfea8e1":"countries_dataset.head()","b39653cb":"env_dataset = pd.read_csv('..\/input\/environmental-variables-for-world-countries\/World_countries_env_vars.csv')\nenv_dataset.head()","958d4505":"print('Shape:', env_dataset.shape, '\\n')\nprint('Missing values:')\nprint(env_dataset.isnull().sum(), '\\n')\nprint('Data types:')\nprint(env_dataset.dtypes, '\\n')","c2430b28":"env_dataset['Country'] = env_dataset['Country'].astype(str)\nenv_dataset.set_axis(env_dataset.columns.map(lambda x: x.capitalize().replace('_', ' ')), axis=1, inplace=True)","ac82a9a8":"columns_names = ['Country', 'Accessibility to cities, min', 'Elevation, m', 'Aspect', 'Slope',\n               'Cropland cover, %', 'Tree canopy cover, %', 'Isothermality',\n               'Rain coldestquart, mm', 'Rain driestmonth, mm', 'Rain driestquart, mm',\n               'Rain mean annual, mm', 'Rain seasonailty', 'Rain warmestquart, mm',\n               'Rain wettestmonth, mm', 'Rain wettestquart, mm', 'Temp annual range, %',\n               'Temp coldestquart, degC', 'Temp diurnal range, degC', 'Temp driestquart, degC',\n               'Temp max warmestmonth, degC', 'Temp mean annual, degC', 'Temp min coldestmonth, degC',\n               'Temp seasonality, degC', 'Temp warmestquart, degC', 'Temp wettestquart, degC', 'Wind, m\/s',\n               'Cloudiness, days per year']\nenv_dataset.columns = columns_names\nenv_dataset.drop(['Aspect', 'Slope', 'Isothermality'], axis=1, inplace=True)\nenv_dataset = env_dataset.round(decimals=3)\nenv_dataset = env_dataset.loc[~(env_dataset['Country'] == 'Indian Ocean Territories')]\nenv_dataset = env_dataset.loc[~(env_dataset['Country'] == 'Kosovo')]\nenv_dataset = env_dataset.loc[~(env_dataset['Country'] == 'Northern Cyprus')]\ncountries_codes_map = {country: get_country_code(country) for country in env_dataset['Country']}","226843f9":"for country in countries_codes_map.keys():\n    if countries_codes_map[country] == 'NaN':\n        print(country)","cef3346f":"missing_countries_codes = {\n    'Democratic Republic of the Congo': 'COD',\n    'Indian Ocean Territories': 'IOT',\n    'Laos': 'LAO',\n    'North Korea': 'PRK',\n    'South Georgia and South Sandwich Islands': 'SGS',\n    'Ivory Coast': 'CIV',\n    'South Korea': 'KOR',\n    'Cape Verde': 'CPV',\n    'Guinea Bissau': 'GNB',\n    'Northern Cyprus': 'CYP',\n    'Swaziland': 'SWZ',\n    'East Timor': 'TLS',\n    'United States Virgin Islands': 'VIR',\n    'French Southern and Antarctic Lands': 'ATF',\n    'Hong Kong S.A.R.': 'HKG',\n    'Pitcairn Islands': 'PCN',\n    'Macau S.A.R': 'MAC'\n}\nfor country in missing_countries_codes.keys():\n    countries_codes_map[country] = missing_countries_codes[country]","8bc41703":"countries_codes_map['Curacao'] = 'CUW'\ncountries_codes_map['Sint Maarten'] = 'SXM'\ncountries_codes_map['Niger'] = 'NER'","7bb3644f":"env_dataset['Country code (ISO)'] = env_dataset['Country'].map(countries_codes_map).astype(str)\nenv_dataset = env_dataset.loc[env_dataset['Country code (ISO)'] != 'NaN']\nenv_dataset.shape","bbb8b0df":"env_dataset.head()","f89c8b3b":"happiness_dataset = pd.read_csv('..\/input\/world-happiness\/2015.csv')\nhappiness_dataset.head()","81890d67":"print('Shape:', happiness_dataset.shape, '\\n')\nprint('Missing values:')\nprint(happiness_dataset.isnull().sum(), '\\n')\nprint('Data types:')\nprint(happiness_dataset.dtypes, '\\n')","c9517259":"happiness_dataset = happiness_dataset.round(decimals=3)\nhappiness_dataset.drop(['Region', 'Standard Error', 'Happiness Rank'], axis=1, inplace=True)","94c4f916":"columns_names = ['Country', 'Happiness score',\n       'Economy (extent contribution)', 'Family (extent contribution)', 'Life expectancy (extent contribution)',\n       'Freedom (extent contribution)', 'Corruption (extent contribution)', 'Generosity (extent contribution)',\n       'Dystopia Residual (extent contribution)']\nhappiness_dataset.columns = columns_names\nhappiness_dataset['Country'] = happiness_dataset['Country'].astype(str)\nhappiness_dataset = happiness_dataset.loc[~(happiness_dataset['Country'] == 'Kosovo')]\ncountries_codes_map = {country: get_country_code(country) for country in happiness_dataset['Country']}","18a9b48d":"for country in countries_codes_map.keys():\n    if countries_codes_map[country] == 'NaN':\n        print(country)","0a562b97":"missing_countries_codes = {\n    'South Korea': 'KOR',\n    'Somaliland region': 'SOM',\n    'Laos': 'LAO',\n    'Swaziland': 'SWZ',\n    'Palestinian Territories': 'PSE',\n    'Hong Kong S.A.R. of China': 'HKG',\n    'Congo (Kinshasa)': 'COD',\n    'Congo (Brazzaville)': 'COG',\n    'Ivory Coast': 'CIV',\n}\nfor country in missing_countries_codes.keys():\n    countries_codes_map[country] = missing_countries_codes[country]","c907aa49":"countries_codes_map['Niger'] = 'NER'","f10bcbf0":"happiness_dataset['Country code (ISO)'] = happiness_dataset['Country'].map(countries_codes_map).astype(str)\nhappiness_dataset = happiness_dataset.loc[happiness_dataset['Country code (ISO)'] != 'NaN']\nhappiness_dataset.shape","5773f549":"happiness_dataset.head()","8aab7fa9":"emission_dataset = pd.read_csv('..\/input\/co2-and-ghg-emission-data\/emission data.csv')\nemission_dataset.head()","ec6adf63":"print('Shape:', emission_dataset.shape, '\\n')\nprint('Missing values:')\nprint(emission_dataset[['2014', '2015', '2016', '2017']].isnull().sum(), '\\n')\nprint('Data types:')\nprint(emission_dataset[['2014', '2015', '2016', '2017']].dtypes, '\\n')","03182bf3":"emission_dataset = emission_dataset[['Country', '2015']]\nemission_dataset.rename({'2015': 'Emission, tons'}, axis=1, inplace=True)\nemission_dataset['Country'] = emission_dataset['Country'].astype(str)","e64db7fc":"for item in emission_dataset['Country']:\n    print(item, end=', ')","a99ee49b":"emission_dataset = emission_dataset.loc[~emission_dataset['Country'].isin(['Americas (other)', 'Asia and Pacific (other)', 'EU-28', 'Europe (other)', \n                                                                           'Antarctic Fisheries', 'Middle East', 'Palestine', 'South Africa', 'World'])]\nemission_dataset.loc[emission_dataset['Country'] == 'Micronesia (country)', 'Country'] = 'Micronesia'\nemission_dataset = emission_dataset.loc[~((emission_dataset['Country'] == 'Kyrgysztan') & (emission_dataset['Emission, tons'] == 0.0))]","3fceb279":"countries_codes_map = {country: get_country_code(country) for country in emission_dataset['Country']}","03260db0":"for country in countries_codes_map.keys():\n    if countries_codes_map[country] == 'NaN':\n        print(country)","ecf0bc01":"missing_countries_codes = {\n    'Bonaire Sint Eustatius and Saba': 'BES',\n    'Cape Verde': 'CPV',\n    'Democratic Republic of Congo': 'COD',\n    'Faeroe Islands': 'FRO',\n    'Kyrgysztan': 'KGZ',\n    'Laos': 'LAO',\n    'North Korea': 'PRK',\n    'South Korea': 'KOR',\n    'Swaziland': 'SWZ',\n    'Wallis and Futuna Islands': 'WLF'\n}\nfor country in missing_countries_codes.keys():\n    countries_codes_map[country] = missing_countries_codes[country]","330f375b":"countries_codes_map['Niger'] = 'NER'\ncountries_codes_map['Republic of Korea'] = 'KOR'\ncountries_codes_map['Guadeloupe'] = 'GLP'\ncountries_codes_map['Curacao'] = 'CUW'","f9515ac3":"emission_dataset['Country code (ISO)'] = emission_dataset['Country'].map(countries_codes_map).astype(str)\nemission_dataset = emission_dataset.loc[emission_dataset['Country code (ISO)'] != 'NaN']\nemission_dataset.shape","aec8588e":"emission_dataset.head()","af311ddf":"life_dataset = pd.read_csv('..\/input\/life-expectancy-who\/Life Expectancy Data.csv')\nlife_dataset.head()","969b5514":"print('Shape:', life_dataset.shape, '\\n')\nprint('Missing values:')\nprint(life_dataset.isnull().sum(), '\\n')\nprint('Data types:')\nprint(life_dataset.dtypes, '\\n')","7ccfefca":"life_dataset = life_dataset.loc[life_dataset['Year'] == 2015]\nlife_dataset.drop(['Year', 'Status', 'Alcohol', 'GDP', 'Total expenditure', 'Population'], axis=1, inplace=True)","3dc1767b":"columns_names = ['Country', 'Life expectancy, age', 'Adult mortality, per 1000', 'Infant deaths, per 1000',\n       'Expenditure on health, % of GDP', 'Hepatitis B immunization, %', 'Measles, per 1000', 'BMI',\n       'Under-five deaths, per 1000', 'Polio immunization, %', 'Diphtheria immunization, %',\n       'HIV\/AIDS infant deaths, per 1000', 'Thinness 1-19 years, %',\n       'Thinness 5-9 years, %', 'Human Development Index (0 to 1)', 'School years']\nlife_dataset.columns = columns_names","4c538f23":"countries_codes_map = {country: get_country_code(country) for country in life_dataset['Country']}","dbf4a9c3":"for country in countries_codes_map.keys():\n    if countries_codes_map[country] == 'NaN':\n        print(country)","a7c8b435":"missing_countries_codes = {\n    'Bolivia (Plurinational State of)': 'BOL',\n    'Democratic Republic of the Congo': 'COD',\n    'Iran (Islamic Republic of)': 'IRN',\n    'Micronesia (Federated States of)': 'FSM',\n    'Swaziland': 'SWZ',\n    'The former Yugoslav republic of Macedonia': 'MKD',\n    'Venezuela (Bolivarian Republic of)': 'VEN'\n}\nfor country in missing_countries_codes.keys():\n    countries_codes_map[country] = missing_countries_codes[country]","d770f96e":"countries_codes_map['Niger'] = 'NER'\ncountries_codes_map['Republic of Korea'] = 'KOR'","373973ad":"life_dataset['Country code (ISO)'] = life_dataset['Country'].map(countries_codes_map).astype(str)\nlife_dataset = life_dataset.loc[life_dataset['Country code (ISO)'] != 'NaN']\nlife_dataset.shape","c14e08e7":"life_dataset.loc[life_dataset['Country code (ISO)'] == 'USA', 'Human Development Index (0 to 1)'] = 0.921","92a93c71":"life_dataset.head()","8d4268b4":"alcohol_dataset = pd.read_csv('..\/input\/alcohol-consumption\/gapminder_alcohol.csv')\nalcohol_dataset.head()","85a90606":"print('Shape:', alcohol_dataset.shape, '\\n')\nprint('Missing values:')\nprint(alcohol_dataset.isnull().sum(), '\\n')\nprint('Data types:')\nprint(alcohol_dataset.dtypes, '\\n')","50b1e44a":"alcohol_dataset.drop(['incomeperperson'], axis=1, inplace=True)\ncolumns_names = ['Country', 'Alcohol consumption', 'Suicides, per 100', 'Employ rate, %', 'Urban rate, %']\nalcohol_dataset.columns = columns_names\nalcohol_dataset = alcohol_dataset.round(decimals=3)","361d8170":"countries_codes_map = {country: get_country_code(country) for country in alcohol_dataset['Country']}","7fa25a8f":"for country in countries_codes_map.keys():\n    if countries_codes_map[country] == 'NaN':\n        print(country)","20930517":"missing_countries_codes = {\n    'Cape Verde': 'CPV',\n    'Central African Rep.': 'CAF',\n    'Congo, Dem. Rep.': 'COD',\n    'Congo, Rep.': 'COG',\n    'Czech Rep.': 'CZE',\n    'Dominican Rep.': 'DOM',\n    'Faeroe Islands': 'FRO',\n    'Hong Kong, China': 'HKG',\n    'Korea, Dem. Rep.': 'PRK',\n    'Korea, Rep.': 'KOR',\n    'Laos': 'LAO',\n    'Macao, China': 'MAC',\n    'Macedonia, FYR': 'MKD',\n    'Micronesia, Fed. Sts.': 'FSM',\n    'Netherlands Antilles': 'ANT',\n    'Serbia and Montenegro': 'SCG',\n    'Swaziland': 'SWZ',\n    'West Bank and Gaza': 'PSE',\n    'Yemen, Rep.': 'YEM'\n}\nfor country in missing_countries_codes.keys():\n    countries_codes_map[country] = missing_countries_codes[country]","f1f82233":"countries_codes_map['Niger'] = 'NER'\ncountries_codes_map['Guadeloupe'] = 'GLP'","f206c4e5":"alcohol_dataset['Country code (ISO)'] = alcohol_dataset['Country'].map(countries_codes_map).astype(str)\nalcohol_dataset = alcohol_dataset.loc[alcohol_dataset['Country code (ISO)'] != 'NaN']\nalcohol_dataset.shape","118ee936":"alcohol_dataset.head()","5cce18b8":"income_dataset = pd.read_excel('..\/input\/income-by-country\/Income by Country.xlsx', sheet_name=['GDP per capita', 'Income Index'])\nincome_dataset['GDP per capita']","7332dd94":"income_dataset['Income Index']","ff005685":"income_dataset = income_dataset['GDP per capita'][['Country', 2015]].merge(income_dataset['Income Index'][['Country', 2015]], on='Country', how='outer')","3d6b5c69":"income_dataset.rename({'2015_x': 'GDP, $ per capita', '2015_y': 'Income index (natural log)'}, axis=1, inplace=True)\n\nincome_dataset.loc[income_dataset['GDP, $ per capita'] == '..', 'GDP, $ per capita'] = np.nan\nincome_dataset.loc[income_dataset['Income index (natural log)'] == '..', 'Income index (natural log)'] = np.nan\nincome_dataset['GDP, $ per capita'] = income_dataset['GDP, $ per capita'].astype(np.float64)\nincome_dataset['Income index (natural log)'] = income_dataset['Income index (natural log)'].astype(np.float64)\n\nincome_dataset = income_dataset.round(decimals=3)\ncountries_codes_map = {country: get_country_code(country) for country in income_dataset['Country']}","0398e977":"for country in countries_codes_map.keys():\n    if countries_codes_map[country] == 'NaN':\n        print(country)","849abc40":"missing_countries_codes = {\n    'Bolivia (Plurinational State of)': 'BOL',\n    'Congo (Democratic Republic of the)': 'COD',\n    'C\u00c3\u00b4te d\\'Ivoire': 'CIV',\n    'Eswatini (Kingdom of)': 'SWZ',\n    'Hong Kong; China (SAR)': 'HKG',\n    'Iran (Islamic Republic of)': 'IRN',\n    'Korea (Republic of)': 'KOR',\n    'Micronesia (Federated States of)': 'FSM',\n    'Moldova (Republic of)': 'MDA',\n    'Palestine; State of': 'PSE',\n    'Tanzania (United Republic of)': 'TZA',\n    'Venezuela (Bolivarian Republic of)': 'VEN'\n}\nfor country in missing_countries_codes.keys():\n    countries_codes_map[country] = missing_countries_codes[country]","62bdeffd":"countries_codes_map['Niger'] = 'NER'","7f78efb3":"income_dataset['Country code (ISO)'] = income_dataset['Country'].map(countries_codes_map).astype(str)\nincome_dataset = income_dataset.loc[income_dataset['Country code (ISO)'] != 'NaN']\nincome_dataset.shape","b64ca97a":"income_dataset.head()","8460d4aa":"datasets = [countries_dataset, env_dataset, happiness_dataset, emission_dataset, life_dataset, alcohol_dataset, income_dataset]\ndf = datasets[0].drop('Country', axis=1)\nfor dataset in datasets[1:]:\n    df = df.merge(dataset.drop('Country', axis=1), on='Country code (ISO)', how='outer')","5f311a46":"df.head()","3b796f09":"df['Country'] = df['Country code (ISO)'].apply(get_country_name)","2f404bce":"df.loc[df['Country'].isnull(), 'Country code (ISO)']","c8317bad":"df.loc[df['Country code (ISO)'] == 'ANT', 'Country'] = 'Netherlands Antilles'\ndf.loc[df['Country code (ISO)'] == 'SCG', 'Country'] = 'Serbia and Montenegro'","831b975a":"df['Continent'] = df['Country'].apply(get_continent_code)","0f1ef2de":"df.loc[df['Continent'].isnull(), 'Country']","fe7f68ab":"missing_values = {\n    'Timor-Leste': 'AS',\n    'Netherlands Antilles': 'SA',\n    'Western Sahara': 'AF',\n    'Antarctica': 'AN',\n    'French Southern Territories': 'AN',\n    'Sint Maarten (Dutch part)': 'NA',\n    'Pitcairn': 'OC',\n    'Holy See (Vatican City State)': 'EU',\n    'Serbia and Montenegro': 'EU'\n}\nfor country in missing_values.keys():\n    df.loc[df['Country'] == country, 'Continent'] = missing_values[country]","5df2ee50":"continents_codes = {\n    'AS': 'Asia', \n    'EU': 'Europe', \n    'AF': 'Africa', \n    'OC': 'Oceania', \n    'NA': 'North america', \n    'SA': 'South america',\n    'AN': 'Antarctica'\n}\ndf['Continent'] = df['Continent'].replace(continents_codes)","1a31f756":"df.columns","fba5e953":"columns_order = ['Country', 'Country code (ISO)', 'Continent', 'Population', 'Area, sq. km.', 'GDP, $ per capita', 'Income index (natural log)', 'Pop. Density, per sq. km.', \n                 'Net migration, %', 'Phones, per 1000', 'Urban rate, %', 'Agriculture, %', 'Industry, %', 'Service, %', 'Expenditure on health, % of GDP', \n                 'Literacy, %', 'Accessibility to cities, min', 'Happiness score', \n                 'Economy (extent contribution)', 'Family (extent contribution)', 'Life expectancy (extent contribution)', 'Freedom (extent contribution)', \n                 'Corruption (extent contribution)', 'Generosity (extent contribution)', 'Dystopia Residual (extent contribution)', 'Thinness 1-19 years, %', \n                 'Thinness 5-9 years, %', 'Human Development Index (0 to 1)', 'School years', 'Alcohol consumption', 'Suicides, per 100', 'Employ rate, %', \n                 'Birthrate, per 1000 inhabitants', 'Life expectancy, age', 'Adult mortality, per 1000', 'Infant deaths, per 1000', 'Hepatitis B immunization, %', \n                 'Measles, per 1000', 'BMI', 'Under-five deaths, per 1000', 'Polio immunization, %','Diphtheria immunization, %', 'HIV\/AIDS infant deaths, per 1000', \n                 'Coastline (coast\/area ratio)', 'Arable, %', 'Crops, %', 'Other, %', 'Elevation, m', 'Cropland cover, %', 'Tree canopy cover, %', \n                 'Rain coldestquart, mm', 'Rain driestmonth, mm', 'Rain driestquart, mm', 'Rain mean annual, mm', 'Rain seasonailty', 'Rain warmestquart, mm', \n                 'Rain wettestmonth, mm', 'Rain wettestquart, mm', 'Temp annual range, %', 'Temp coldestquart, degC', 'Temp diurnal range, degC', \n                 'Temp driestquart, degC', 'Temp max warmestmonth, degC', 'Temp mean annual, degC', 'Temp min coldestmonth, degC', 'Temp seasonality, degC', \n                 'Temp warmestquart, degC', 'Temp wettestquart, degC', 'Wind, m\/s', 'Cloudiness, days per year', 'Emission, tons']\ndf = df[columns_order]","c6202277":"df.drop(['Economy (extent contribution)', 'Family (extent contribution)', 'Life expectancy (extent contribution)', 'Freedom (extent contribution)', \n        'Corruption (extent contribution)', 'Generosity (extent contribution)', 'Dystopia Residual (extent contribution)'], axis=1, inplace=True)\ndf.drop('Thinness 5-9 years, %', axis=1, inplace=True)","5370fad9":"df.drop('Under-five deaths, per 1000', axis=1, inplace=True)\ndf['Population growth vector, per 1000'] = df['Birthrate, per 1000 inhabitants'] - df['Adult mortality, per 1000'] - df['Infant deaths, per 1000']","1163f54f":"df.drop(['Cropland cover, %', 'Wind, m\/s', 'Cloudiness, days per year'], axis=1, inplace=True)\ndf.drop(['Rain coldestquart, mm', 'Rain driestmonth, mm', 'Rain driestquart, mm', 'Rain seasonailty', 'Rain warmestquart, mm', \n         'Rain wettestmonth, mm', 'Rain wettestquart, mm'], axis=1, inplace=True)\ndf['Temp range, degC'] = df['Temp max warmestmonth, degC'] - df['Temp min coldestmonth, degC']\ndf.drop(['Temp annual range, %', 'Temp coldestquart, degC', 'Temp diurnal range, degC', 'Temp driestquart, degC', 'Temp max warmestmonth, degC', \n         'Temp min coldestmonth, degC', 'Temp seasonality, degC', 'Temp warmestquart, degC', 'Temp wettestquart, degC'], axis=1, inplace=True)","79c3258c":"df.head()","04589b2f":"df.loc[df['Continent'] == 'Antarctica']","860a57d7":"df = df.loc[~(df['Continent'] == 'Antarctica')]","b39e7925":"df.to_csv('.\/result_df.csv')","b7a0696f":"px.histogram(df, x='GDP, $ per capita', color='Continent', barmode='overlay', marginal='box', title='GDP distribution', nbins=50, height=600)","2ad291eb":"px.histogram(df, x='Life expectancy, age', color='Continent', barmode='overlay', marginal='box', title='Life expectancy', nbins=20, height=600)","c48cfb63":"px.histogram(df, x='School years', color='Continent', barmode='overlay', marginal='box', title='Mean education years distribution', nbins=30, height=600)","34be020a":"px.imshow(df.corr(), color_continuous_scale=['#07f', '#fff', '#07f'], title='Correlation matrix', height=1000)","81cde027":"corr_matrix = df.corr().abs()\ntop_corr = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool)).stack().sort_values(ascending=False)\ntop_corr.to_frame().rename(columns={0: 'Correlation'}).head(20)","29bcbab1":"px.scatter_3d(df.loc[~df['Birthrate, per 1000 inhabitants'].isnull()], x='School years', y='Human Development Index (0 to 1)', z='Life expectancy, age', \n              color='Happiness score', hover_name='Country', size='Birthrate, per 1000 inhabitants', opacity=0, title='School years\/HDI\/Life expectancy', \n             width=750, height=750)","a1d95fb9":"px.scatter_3d(df.loc[~df['Birthrate, per 1000 inhabitants'].isnull()], x='GDP, $ per capita', y='Human Development Index (0 to 1)', z='Phones, per 1000', \n              color='Happiness score', hover_name='Country', size='Birthrate, per 1000 inhabitants', opacity=0, title='GDP\/HDI\/Phones', \n             width=750, height=750)","16e29a99":"px.scatter_matrix(df, dimensions=['GDP, $ per capita', 'Phones, per 1000', 'Human Development Index (0 to 1)', 'Birthrate, per 1000 inhabitants', \n                                  'Life expectancy, age', 'Happiness score'], color='School years', hover_name='Country', width=1000, height=1000, \n                  labels={'GDP, $ per capita': 'GDP $', 'Human Development Index (0 to 1)': 'HDI', 'Life expectancy, age': 'Life expectancy', \n                          'Birthrate, per 1000 inhabitants': 'Birthrate per 1000'}, hover_data=['Continent']).update_traces(diagonal_visible=False)","6f25eccb":"px.choropleth(df, locations='Country code (ISO)', color='Human Development Index (0 to 1)', hover_name='Country', \n              hover_data=['Continent', 'Area, sq. km.', 'Population', 'Pop. Density, per sq. km.', 'GDP, $ per capita', 'Happiness score', \n                          'Human Development Index (0 to 1)', 'Life expectancy, age', 'Literacy, %', 'Temp mean annual, degC'], title='Main information')","bc2a26c6":"px.choropleth(df, locations='Country code (ISO)', color='Life expectancy, age', hover_name='Country', \n              hover_data=['Continent', 'Life expectancy, age', 'BMI', 'Birthrate, per 1000 inhabitants', 'Adult mortality, per 1000', 'Infant deaths, per 1000', \n                          'Population growth vector, per 1000', 'Expenditure on health, % of GDP', 'Measles, per 1000', 'Hepatitis B immunization, %',\n                          'Polio immunization, %', 'Diphtheria immunization, %', 'HIV\/AIDS infant deaths, per 1000'], title='Health')","9de197ef":"px.choropleth(df, locations='Country code (ISO)', color='Happiness score', hover_name='Country', \n              hover_data=['Happiness score', 'GDP, $ per capita', 'Phones, per 1000', 'Urban rate, %', 'Literacy, %', \n                          'Accessibility to cities, min', 'Human Development Index (0 to 1)', 'School years', 'Alcohol consumption', \n                          'Suicides, per 100', 'Employ rate, %', 'Agriculture, %', 'Industry, %', 'Service, %'], title=\"Standart of living\")","6b03a9cc":"Let's see how some features are mutually distributed.","de2eff11":"<p style='font-size: 26px'>Life Expectancy (WHO)<\/p>","d2b29c3c":"**Correlation matrix** shows [Pearson correlation coefficient](https:\/\/en.wikipedia.org\/wiki\/Pearson_correlation_coefficient) between features. With it, we can \u044b\u0443\u0443 simple linear correlations. However, it does not always shows the real dependecies. In this graph, the brighter the color, the higher correlation.","2ad84543":"**What we need to do:**\n1. Add \"Country code\" column\n2. Format float values to 3 decimal places\n3. Reformat columns names\n5. Remove \"Region\", \"Standard Error\" and \"Happiness Rank\"","da4c97a7":"On **Life expectancy distribution** we can see significant differences between the average life expectancy on different continents. Subsequently, we will try to understand what causes this.","414466c5":"**Pairwise features dependencies**","30b71b80":"**What we need to do:**\n1. Add \"Country code (ISO)\" column\n2. Refactor columns names\n3. \u0421ombine data into one dataframe\n4. Convert columns to *float64*\n4. Leave only one entry per country (2015)","1b1a4b70":"Let's check if all countries got their code","c58f86e8":"So, we have prepared the data. Let's see what we have.<br>\n**Features:**\n1. *Country* - Name of country\n2. *Country code (ISO)* - Country [ISO 3166-1 alpha-3](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-3) code\n3. *Continent* - Continent name\n4. *Population* - Population of country\n5. *Area, sq. km.* - Area in square kilometers\n6. *GDP, \\$ per capita* - [Gross domestic product](https:\/\/en.wikipedia.org\/wiki\/Gross_domestic_product) in \\$\n7. *Income index (natural log)* - [Gross national income](https:\/\/en.wikipedia.org\/wiki\/Gross_national_income) (natural logarithm)\n8. *Pop. Density, per sq. km.* - Poulation density per square kilometer\n9. *Net migration, %* - Migration, percentage of residents\n10. *Phones, per 1000* - Modile phones per 1000 residents\n11. *Urban rate, %* - Percentage of residents living in cities\n12. *Agriculture, %* - Percentage of residents engaged in agriculture\n13. *Industry, %* - Percentage of residents engaged in industry\n14. *Service, %* - Percentage of residents engaged in service\n15. *Expenditure on health, % of GDP* - Expenditure on health in percent of GDP\n16. *Literacy, %* - Percentage of literate residents\n17. *Accessibility to cities, min* - Average driving time to the city in minutes\n18. *Happiness rank* (deleted)\n19. *Happiness score* - Average level of happiness according to the population survey\n20. *Thinness 1-19 years, %* - Prevalence of malnutrition among children aged 1-19\n21. *Human Development Index (0 to 1)* - [Human Development Index](https:\/\/en.wikipedia.org\/wiki\/Human_Development_Index) from 0 to 1\n22. *School years* - Mean education years\n23. *Alcohol consumption* - Alcohol consumption per person\n24. *Suicides, per 100* - Suicides per 100 residents\n25. *Employ rate, %* - Employment percentage\n26. *Birthrate, per 1000 inhabitants* - Birthrate\n27. *Life expectancy, age* - Average life expectancy\n28. *Adult mortality, per 1000* - Adult (16-65 years) mortality\n29. *Infant deaths, per 1000* - Infant deaths\n30. *Hepatitis B immunization, %* - Hepatit B immuniztion\n31. *Measles, per 1000* - Reported measles cases per 1000 people\n32. *BMI* - [Body Mass Index](https:\/\/en.wikipedia.org\/wiki\/Body_mass_index)\n33. *Polio immunization, %* - Polio immunization percentage\n34. *Diphtheria immunization, %* - Diphtheria immunization percentage\n35. *HIV\/AIDS infant deaths, per 1000* - HIV\/AIDS infant deaths per 1000 births\n36. *Coastline (coast\/area ratio)* - Coastline length\n37. *Arable, %* - Percentage of arable land\n38. *Crops, %* - Percentage of cropland\n39. *Other, %* - Percentage of other land\n40. *Elevation, m* - Height above sea level\n41. *Tree canopy cover, %* - Percentage of land with trees\n42. *Isothermality* (deleted)\n43. *Rain mean annual, mm* - Average annual precipitation in millimeters\n44. *Temp mean annual, degC* - Average annual temperature\n45. *Emission, tons* - Emission per year in tons\n46. *Population growth vector, per 1000* - Birthrate-Deathrate\n47. *Temp range, degC* - Temp range","263e0248":"<p style='font-size: 26px'>CO2 and GHG emission dataset<\/p>","71ec435e":"Let's check if all countries got their code","097bffb4":"<p style='font-size: 26px'>Combining<\/p>","40fceae9":"<h1 align='center'>Countries Statistics<\/h1>","faafc56c":"**GDP distribution** shows how GDP is distributed on different continents","6014c1e9":"# 0. About","bcfaa125":"Datasets used in this notebook:\n1. [Countries of the world](https:\/\/www.kaggle.com\/fernandol\/countries-of-the-world) - 225 countries<br>\n    Includes basic information such as area, population, GDP, etc.\n2. [Environmental variables for world countries](https:\/\/www.kaggle.com\/zanderventer\/environmental-variables-for-world-countries) - 242 countries<br>\n    Contains information about the natural conditions and climate of the countries.\n3. [World happiness report](https:\/\/www.kaggle.com\/unsdsn\/world-happiness) - 158 countries<br>\n    Assessment of the average level of happiness and the parameters used for the assessment.\n4. [CO2 and GHG emission data](https:\/\/www.kaggle.com\/srikantsahu\/co2-and-ghg-emission-data) - 222 countries<br>\n    Emissions of countries from 1750 to 2017.\n5. [Life expectancy (WHO)](https:\/\/www.kaggle.com\/kumarajarshi\/life-expectancy-who) - 183 countries<br>\n    Life expectancy and factors affecting it.\n6. [Alcohol consumption](https:\/\/www.kaggle.com\/sansuthi\/alcohol-consumption) - 213 countries<br>\n    Alcohol consumption, suicide rate, income, employment and urban rate.\n7. [Income by country](https:\/\/www.kaggle.com\/frankmollard\/income-by-country) - 193 countries<br>\n    Income, GDP and other economy factors","78b94673":"**What we need to do:**\n1. Add \"Country code (ISO)\" column\n2. Format float values to 3 decimal places\n3. Reformat columns names\n4. Remove \"aspect\", \"slope\", \"isothermality\" and \"cropland_cover\" columns","dbd01356":"Also, let's add a column with the name of the continent where the country is located.","f9eabba1":"Interactive map with main information about countries","e6183bee":"<p style='font-size: 26px'>Maps<\/p>","f5e65dfa":"<p style='font-size: 26px'>Distirbutions and histograms<\/p>","4727f217":"<p style='font-size: 26px'>Alcohol consumption dataset<\/p>","0f6a0bca":"Let's check if all countries got their code","645197a6":"As we can see, some countries were left without a code. This may be due to the fact that their names in the dataset are different from the names given by the standard. For simplicity, we'll fill them in manually.<br>\n*Note*: Siachen Glacier does not have its own ISO 3166-1 aplha-3 code","7b9d5917":"<p style='font-size: 26px'>Income by country dataset<\/p>","5e18ff9a":"Such a number of features makes further analysis difficult, so we should combine or remove some columns:\n1. Life<br>\n    1. Remove \"Economy (extent contribution)\", \"Family (extent contribution)\", \"Life expectancy (extent contribution)\", \"Freedom (extent contribution)\", \"Corruption (extent contribution)\", \"Generosity (extent contribution)\", \"Dystopia Residual (extent contribution)\"\n    2. Remove \"Thinness 5-9 years, %\"\n2. Health<br>\n    1. Remove \"Under-five deaths, per 1000\"\n    2. Add \"Population growth vector\" (Birthrate - Deathrate)\n3. Nature and environment\n    1. Remove \"Cropland cover, %\"\n    2. Leave only \"Rain mean annual, mm\"\n    3. Leave only \"Temp mean annual, degC\"\n    4. Add \"Temp range, degC\" (Temp max - Temp min)\n    5. Remove \"Wind, m\/s\", \"Cloudiness, days per year\" (too many missing values)","cc5c0a02":"Filling in some missing values:\n1. USA HDI 2105 - 0.921 (Source: https:\/\/countryeconomy.com\/hdi\/usa?year=2015)","e5d2e452":"# 1. Importing libraries","f5769c24":"**What we need to do:**\n1. Add \"Country code (ISO)\" column\n2. Reformat columns names\n3. Leave only data for 2015\n4. Remove data for regions (not countries)","63e0c90c":"**What we need to do:**\n1. Add \"Country code (ISO)\" column\n2. Reformat columns names\n3. Leave only one entry per country (2015)\n4. Remove \"Status\", \"Alcohol\", \"GDP\", \"Total expnediture and \"Population\" columns","b40227eb":"# 4. Visualization","66ec8923":"**What we need to do:**\n1. Add \"Country code (ISO)\" column\n2. Reformat columns names\n3. Remove \"income per person\" column","ad1d066d":"Okay, let's see what columns we have.","99d6b400":"We can also convert the codes to a more readable form.","90f026a2":"As we can see, some countries were left without a code. This may be due to the fact that their names in the dataset are different from the names given by the standard. For simplicity, we'll fill them in manually. Also, there are samples here that are not directly related to countries. They need to be removed:\n1. Human Development\n2. Very high human development\n3. High human development\n4. Medium human development\n5. Low human development\n6. Developing Countries\n7. Regions\n8. Arab States\n9. East Asia and the Pacific\n10. Europe and Central Asia\n11. Latin America and the Caribbean\n12. South Asia\n13. Sub-Saharan Africa\n14. Least Developed Countries\n15. Small Island Developing States\n16. Organization for Economic Co-operation and Development\n17. World","eeca5018":"As we can see, some countries were left without a code. This may be due to the fact that their names in the dataset are different from the names given by the standard. For simplicity, we'll fill them in manually.","94473e5f":"# 3. Some feature engineering","86b1cb6f":"I think that, given the number of records and the missing values in them, they will only interfere with charting, so let's just remove them.","11f6034b":"![image.jpg](https:\/\/les.mitsubishielectric.co.uk\/assets\/Uploads\/328a039bfe\/Changing-view-from-space.jpg)","75658b67":"Load the file and see what is in it.","bbd36262":"<p style='font-size: 26px'>Environmental variables for world countries dataset<\/p>","c01369ea":"As we can see, some countries were left without a code. This may be due to the fact that their names in the dataset are different from the names given by the standard. For simplicity, we'll fill them in manually.<br>","1c117b4c":"Renaming: \"Micronesia (country)\" to \"Micronesia\"","0fb52959":"Let's check if some countries names are *None*.","cfa08450":"Removing:\n1. Americas (other)\n2. Antarctic Fisheries\n3. Asia and Pacific (other)\n4. EU-28\n5. Europe (other)\n6. Middle East\n7. Palestine (don't have unified ISO code)\n8. South Africa\n9. World","b2008149":"# 2. Data preparing","f5bc9fcd":"Map, showing different health metrics for each country","30703e2e":"<p style='font-size: 26px'>Thank you for reading!<\/p> I will be glad if you write your opinion, comments and advice in the comments. Also write what you think about the data dependencies we saw in the graphs and how they might be related. And, of course, if you find any mistake, please write about it so that I can fix it. Thanks!","815607e3":"Also, we will create a function to find the country code by name and vice versa.","3928c518":"Let's check if all countries got their code","b8e5449d":"**Mean education years distribution** shows how many years people study on different continents","1f18ec98":"As we can see, some countries were left without a code. We fill them manually.","430b269c":"We will use the following libraries:\n1. **pandas** and **numpy** to work with data\n2. **plotly** and **plotly express** for interactive visualization\n3. **pycountry**, **pycountry_convert** and **functools** for converting country names and codes\n4. **xlrd** and **openpyxl** to work with Excel files\n5. **json** to load countries geojson","4a03a885":"I will save the resulting dataframe to 'output\/result_df.csv'. If you would like to use it in your public works, please add this notebook to the sources.","08e5b90f":"<p style='font-size: 26px'>Correlation<\/p>","f93b0921":"Most interesting dependencies:\n1. Human Development Index, School years, Life expectancy, Happiness score and Birthrate (pairwise and together)\n2. Human Development Index, GDP, Income index and Phones","a5d57469":"Let's check if all countries got their code","edadd756":"As we can see, some countries were left without a code. This may be due to the fact that their names in the dataset are different from the names given by the standard. For simplicity, we'll fill them in manually.<br>\n*Note*: Gaza Strip and West Bank at the moment does not have a unified code, so it will be easier to simply delete them from the table. More info: https:\/\/en.wikipedia.org\/wiki\/ISO_3166-2:PS<br>","8367fb18":"**What we need to do:**\n1. Add \"Country code (ISO)\" column\n2. Format float values to 3 decimal places\n3. Reformat columns names\n4. Reformat units\n5. Remove \"Climate\" column because we don't know what the encodings mean and it have too many missing values\n6. Remove \"Region\",  \"Infant mortality (per 1000 births)\", \"GDP ($ per capita)\" and \"Deathrate\" columns","484373af":"Let's use the pandas merge function to combine data into one dataframe.","c41a16d3":"Let's check if all countries got their code","9ede7ba0":"As we can see, some countries were left without a code. This may be due to the fact that their names in the dataset are different from the names given by the standard. For simplicity, we'll fill them in manually.<br>\n*Note*: Czechoslovakia was divided into Czechia (CZ, CZE, 203), and Slovakia (SK, SVK, 703), so, we just remove it. More info: https:\/\/www.iso.org\/obp\/ui\/#iso:code:3166:CSHH","4eda17b9":"<p style='font-size: 26px'>Countries of the world dataset<\/p>","842e5c27":"We need to change their order to make it easier to navigate. Let's divide the columns into several categories:\n1. **Main**<br>\n\"Country\", \"Country code (ISO)\", \"Continent\", \"Population\", \"Area, sq. km.\"\n2. **Economics**<br>\n\"GDP, $ per capita\",  \"Income index (natural log)\", \"Pop. Density, per sq. km.\", \"Net migration, %\", \"Phones, per 1000\", \"Urban rate, %\", \"Agriculture, %\", \"Industry, %\", \"Service, %\", \"Expenditure on health, % of GDP\"\n3. **Life**<br>\n\"Literacy, %\", \"Accessibility to cities, min\", \"Happiness score\", \"Economy (extent contribution)\", \"Family (extent contribution)\", \"Life expectancy (extent contribution)\", \"Freedom (extent contribution)\", \"Corruption (extent contribution)\", \"Generosity (extent contribution)\", \"Dystopia Residual (extent contribution)\", \"Thinness  1-19 years, %\", \"Thinness 5-9 years, %\", \"Human Development Index (0 to 1)\", \"School years\", \"Alcohol consumption\", \"Suicides, per 100\", \"Employ rate, %\"\n4. **Health**<br>\n\"Birthrate, per 1000 inhabitants\", \"Life expectancy, age\", \"Adult mortality, per 1000\", \"Infant deaths, per 1000\", \"Hepatitis B immunization, %\", \"Measles, per 1000\", \"BMI\", \"Under-five deaths, per 1000\", \"Polio immunization, %\",\"Diphtheria immunization, %\", \"HIV\/AIDS infant deaths, per 1000\"\n5. **Nature and environment**<br>\n\"Coastline (coast\/area ratio)\", \"Arable, %\", \"Crops, %\", \"Other, %\", \"Elevation, m\", \"Cropland cover, %\", \"Tree canopy cover, %\", \"Rain coldestquart, mm\", \"Rain driestmonth, mm\", \"Rain driestquart, mm\", \"Rain mean annual, mm\", \"Rain seasonailty\", \"Rain warmestquart, mm\", \"Rain wettestmonth, mm\", \"Rain wettestquart, mm\", \"Temp annual range, %\", \"Temp coldestquart, degC\", \"Temp diurnal range, degC\", \"Temp driestquart, degC\", \"Temp max warmestmonth, degC\", \"Temp mean annual, degC\", \"Temp min coldestmonth, degC\", \"Temp seasonality, degC\", \"Temp warmestquart, degC\", \"Temp wettestquart, degC\", \"Wind, m\/s\", \"Cloudiness, days per year\", \"Emission, tons\"","e7c66d04":"Let's check if all continents got their code","8768ba9d":"Features pairs with the highest correlation","d54ee7fe":"Standart of living map","80f34332":"Let's check if all countries got their code","40f8ce84":"We need to collect data from three datasets into one pandas dataframe. When working with countries, it is important for us to adhere to certain standards. We will use the [ISO 3166-1 alpha-3](https:\/\/www.iso.org\/iso-3166-country-codes.html) standard to encode the country names. ","18a76268":"<p style='font-size: 26px'>World happiness report dataset<\/p>","0b205e73":"As we can see, some countries were left without a code. This may be due to the fact that their names in the dataset are different from the names given by the standard. For simplicity, we'll fill them in manually.","8cdd5228":"We removed \"Country\" columns, now we will use the get_country_name function to create one.","9b3b42c7":"The names of the two countries were not found. Here they are:\n1. ANT - Netherlands Antilles\n2. SCG - Serbia and Montenegro\n\nLet's fill them in manually.","6ff346fd":"By the way, let's see how many countries we have marked on Antarctica.","57dc3ab6":"**In this notebook we will prepare and visualize various statistical data on countries. We will focus on the data for 2015, since there are most of them**"}}