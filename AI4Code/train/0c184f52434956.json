{"cell_type":{"8acbdb6f":"code","dc9641bb":"code","3856bfb6":"code","742a1af2":"code","032a2686":"code","4843e238":"code","bc50614c":"code","00344fc8":"code","4097693d":"code","df61f62c":"code","c9f7ba4e":"code","8bca2184":"code","35e033e4":"code","38d6be31":"code","0a3a1419":"code","d5002895":"code","10f03cf2":"code","ae3a1907":"code","bcda2886":"code","861d2662":"code","2f7a48a6":"markdown","647a26f0":"markdown","0f95254c":"markdown","836e7d97":"markdown","5f16dca0":"markdown","6e3a5b12":"markdown","fb425ab8":"markdown","abddbdd9":"markdown","82f53da8":"markdown","afa1bc41":"markdown","64cbb313":"markdown"},"source":{"8acbdb6f":"import pandas as pd\nimport seaborn as sns\nimport random","dc9641bb":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3856bfb6":"movie = pd.read_csv(\"..\/input\/movielens-20m-dataset\/movie.csv\")","742a1af2":"rating = pd.read_csv(\"..\/input\/movielens-20m-dataset\/rating.csv\")","032a2686":"movie.head()","4843e238":"rating.head()","bc50614c":"df_ = movie.merge(rating, how=\"left\", on=\"movieId\")\ndf = df_.copy()\ndf.head()","00344fc8":"def create_user_movie_df():\n    rating_counts = pd.DataFrame(df[\"title\"].value_counts())\n    rating_counts.describe([0.05, 0.50, 0.75, 0.85, 0.90, 0.95, 0.99]).T\n    limit = rating_counts.quantile([0.90]).T\n    limit_90 = limit[0.9][0]\n    rare_movies = rating_counts[rating_counts[\"title\"] <= limit_90].index\n    common_movies = df[~df[\"title\"].isin(rare_movies)]\n    user_movie_df = common_movies.pivot_table(index=\"userId\", columns=\"title\", values=\"rating\")\n    return user_movie_df","4097693d":"user_movie_df = create_user_movie_df()\nuser_movie_df.head() ","df61f62c":"def random_user_choose(user_movie_df, random_state):\n    random_user = int(pd.Series(user_movie_df.index).sample(1, random_state=random_state).values)\n    return random_user","c9f7ba4e":"random_user = random_user_choose(user_movie_df, random_state=33)\nrandom_user","8bca2184":"def movie_id_actual():\n    movie_id_act = rating[(rating[\"userId\"] == random_user) & (rating[\"rating\"] >= 4.0)]. \\\n        sort_values(by=\"timestamp\", ascending=False)[\"movieId\"][0:1].tolist()\n    return movie_id_act[0]","35e033e4":"movie_id = movie_id_actual()\nmovie_id","38d6be31":"def movie_id_name(dataframe, movie_ID):\n    movie_name = dataframe[dataframe[\"movieId\"] == movie_ID][[\"title\"]].values[0].tolist()\n    return movie_name[0]","0a3a1419":"movie_name = movie_id_name(df, movie_id)\nmovie_name","d5002895":"def item_based_recommender(movie_name, user_movie_df, random_user):\n    movie_name = user_movie_df[movie_name]\n    recommend_list = user_movie_df.corrwith(movie_name).sort_values(ascending=False).head(20)\n    recommend_list = recommend_list.reset_index()\n    recommend_list = recommend_list[\"title\"].tolist()\n    recommend_list\n\n    random_user_df = user_movie_df[user_movie_df.index == random_user]\n    random_user_movies_watched = random_user_df.columns[random_user_df.notna().any()].tolist()\n    random_user_movies_watched_df = user_movie_df[random_user_movies_watched]\n    random_user_movies_watched_df = random_user_movies_watched_df.columns.tolist()\n\n    movie_to_recommend = [i for i in random_user_movies_watched_df if i not in recommend_list]\n    movie_to_recommend = random.sample(movie_to_recommend, 5)\n    return movie_to_recommend","10f03cf2":"item_based_recommender(movie_name, user_movie_df, random_user)","ae3a1907":"def movie_name(dataframe, movieId_list):\n    for i in movieId_list:\n        movie_name = dataframe[dataframe[\"movieId\"] == i][[\"title\"]].values[0].tolist()\n        print(movie_name)","bcda2886":"def user_based_recommender(user_movie_df, random_user):\n    random_user_df = user_movie_df[user_movie_df.index == random_user]\n    random_user_movies_watched = random_user_df.columns[random_user_df.notna().any()].tolist()\n    movies_watched_df = user_movie_df[random_user_movies_watched]\n\n    user_movie_count = movies_watched_df.T.notnull().sum()\n    user_movie_count = user_movie_count.reset_index()\n    user_movie_count.columns = [\"userId\", \"movie_count\"]\n\n    user_movie_count.describe([0.05, 0.50, 0.75, 0.85, 0.90, 0.95, 0.99]).T\n    limit_movie = user_movie_count.quantile([0.99]).T\n    limit_movie_99 = limit_movie[0.99][1]\n\n    users_same_movies = user_movie_count[user_movie_count[\"movie_count\"] >= limit_movie_99][\"userId\"]\n    final_df = movies_watched_df[movies_watched_df.index.isin(users_same_movies)]\n    \n    final_df.T.corr()\n    corr_df = final_df.T.corr().unstack().sort_values().drop_duplicates()\n    corr_df = pd.DataFrame(corr_df, columns=[\"corr\"])\n    corr_df.index.names = [\"userId_1\", \"userId_2\"]\n    corr_df = corr_df.reset_index()\n\n    same_users = corr_df[(corr_df[\"userId_1\"] == random_user)]\n    same_users.describe([0.05, 0.50, 0.75, 0.85, 0.90, 0.95, 0.99]).T\n    limit_same_user = same_users.quantile([0.95]).T\n    limit_same_users_95 = limit_same_user[0.95][2]\n\n    top_users = corr_df[(corr_df[\"userId_1\"] == random_user) & (corr_df[\"corr\"] >= limit_same_users_95)][[\"userId_2\", \"corr\"]].reset_index(drop=True)\n    top_users = top_users.sort_values(by=\"corr\", ascending=False)\n    top_users.rename(columns={\"userId_2\": \"userId\"}, inplace=True)\n    top_users_rating = top_users.merge(rating[[\"userId\", \"movieId\", \"rating\"]], how=\"inner\")\n    top_users_rating = top_users_rating[top_users_rating[\"userId\"] != random_user]\n\n    top_users_rating[\"weighted_rating\"] = top_users_rating[\"corr\"] * top_users_rating[\"rating\"]\n    recommendation_df = top_users_rating.groupby(\"movieId\")[\"weighted_rating\"].mean()\n    recommendation_df = recommendation_df.reset_index()\n    recommendation_df_5 = recommendation_df.sort_values(by=\"weighted_rating\", ascending=False).head(5)\n    recommendation_df_5_list = recommendation_df_5[\"movieId\"].tolist()\n\n    return movie_name(df, recommendation_df_5_list)","861d2662":"user_based_recommender(user_movie_df, random_user)","2f7a48a6":"#### We choose a random user and check the userId. After that we can also check which movies our user watched at last and pick the last one.","647a26f0":"#### And see other 5 movie recommends with User-Based...","0f95254c":"#### We merge both datasets with the same column \"movieId\"","836e7d97":"#### *Description:*\n\n#### *The datasets describe ratings and free-text tagging activities from MovieLens, a movie recommendation service. It contains 20000263 ratings and 465564 tag applications across 27278 movies. These data were created by 138493 users between January 09, 1995 and March 31, 2015. This dataset was generated on October 17, 2016.*\n\n#### *Users were selected at random for inclusion. All selected users had rated at least 20 movies.*","5f16dca0":"#### Import libraries and get the dataset.","6e3a5b12":"#### Hybrid Recommend System (Item-Based and User-Based)\n#### Hybrid recommender systems are used to improve the quality of the model and make more effective recommendations.\n#### User-Based: User-Based Collaborative Filtering is a technique used to predict the items that a user might like on the basis of ratings given to that item by the other users who have similar taste with that of the target user.\n#### Item-Based: It is a form of collaborative filtering for recommender systems based on the similarity between items calculated using people's ratings of those items.","fb425ab8":"![hybrid rec system(3).jpg](attachment:b501f3ac-4db2-4c28-9a7d-b9abeaf79d0d.jpg)","abddbdd9":"#### See the our five movie recommends with Item-Based...","82f53da8":"#### Short explanation of titles from dataset:\n\n### movie.csv\n1. movieId \u2013 unique movie number\n2. title \u2013 movie name\n3. movieId \u2013 unique movie number\n\n### rating.csv\n1. userid \u2013 unique user number\n2. movieId \u2013 unique movie number\n3. rating \u2013 the rating given to the movie by the user\n4. timestamp \u2013 movie release date","afa1bc41":"#### Let's see what movie it is.","64cbb313":"#### There are also some movies in dataset, that they really less ratings count. That's why it would be better, if we throw out them and continue with common movies. So, we define rare and common movies. We create a list as rating_counts, see how they are distributed and take the limit quantile 90% for common movies. Finally create a table which users watched which movies. Here is important to understand table, because we take our users to the index and the columns for movies. "}}