{"cell_type":{"e3d53e8a":"code","cefe7dc6":"code","7ed7403b":"code","33a24eae":"code","631c7acf":"code","fdb0840f":"code","d144b6da":"code","a4ce676e":"code","35d1d4a5":"code","672887b8":"code","9f35e8bd":"code","f6313bdd":"code","085163f9":"code","5aee2f99":"code","b49a1723":"code","fca02a49":"code","f3812d0d":"code","70a01729":"code","6a02f5a8":"code","f07304e3":"code","6716fcf3":"code","65ba3d63":"code","df68b112":"code","7f1719f2":"code","b5a9755d":"code","ffbf371b":"code","98566d5e":"code","5fd28260":"code","aa061a4a":"code","ac8f7d7f":"code","ffad0129":"code","91ce190a":"code","2a14cecf":"code","d465bfa4":"code","04d000ca":"code","f7fc1147":"code","b232aa7b":"code","56ab1572":"code","892c380a":"code","73ccc0fc":"code","9842036a":"code","e0f466e7":"code","6b5b291a":"code","31774b59":"code","05d34ec8":"code","46d25172":"code","07e5c15f":"code","105fb349":"code","7dd48b19":"code","5a4f8985":"code","01a97fe9":"code","318e62d0":"code","6f51246f":"code","69c86f3c":"code","ef33b3cf":"code","afbd0960":"markdown"},"source":{"e3d53e8a":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import cross_val_score,train_test_split\nfrom sklearn.metrics import r2_score,mean_squared_error,make_scorer\nimport seaborn as sns\nfrom scipy.stats import skew,norm","cefe7dc6":"train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","7ed7403b":"print(train.shape,test.shape)","33a24eae":"plt.scatter(x='GrLivArea',y='SalePrice',data=train)\nplt.xlabel('GrLivArea')\nplt.ylabel('SalePrice')","631c7acf":"train['GrLivArea'].sort_values(ascending=False)[:2]","fdb0840f":"train=train[train['GrLivArea']<4670]\ntrain.shape","d144b6da":"train_id=train['Id']\ntest_id=test['Id']\ntrain.drop('Id',axis=1,inplace=True)\ntest.drop('Id',axis=1,inplace=True)\nprint(train.shape,test.shape)","a4ce676e":"sns.distplot(train['SalePrice'],fit=norm)\nplt.title('saleprice distribution')\nplt.ylabel('frequency')\nprint(train['SalePrice'].skew())","35d1d4a5":"train['SalePrice']=np.log1p(train['SalePrice'])\nsns.distplot(train['SalePrice'],fit=norm)\nplt.title('saleprice distribution')\nplt.ylabel('frequency')\nprint(train['SalePrice'].skew())","672887b8":"all_data=pd.concat((train,test)).reset_index(drop=True)\nall_data.drop('SalePrice',axis=1,inplace=True)\nall_data.shape","9f35e8bd":"y=train['SalePrice']","f6313bdd":"all_data.isnull().sum().sort_values(ascending=False)[:35]","085163f9":"all_data['GarageCars'].fillna(0,inplace=True)\nall_data['GarageArea'].fillna(0,inplace=True)\nall_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0],inplace=True)\nall_data['Electrical'].fillna(all_data['Electrical'].mode()[0],inplace=True)\nall_data['SaleType'].fillna(all_data['SaleType'].mode()[0],inplace=True)\nall_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0],inplace=True)\nall_data['TotalBsmtSF'].fillna(0,inplace=True)\nall_data['Exterior2nd'].fillna('NA',inplace=True)\nall_data['BsmtFinSF1'].fillna(0,inplace=True)\nall_data['BsmtFinSF2'].fillna(0,inplace=True)\nall_data['BsmtUnfSF'].fillna(0,inplace=True)\nall_data['BsmtFullBath'].fillna('NA',inplace=True)\nall_data['Functional'].fillna(all_data['Functional'].mode()[0],inplace=True)\nall_data['Utilities'].fillna(all_data['Utilities'].mode()[0],inplace=True)\nall_data['BsmtHalfBath'].fillna('NA',inplace=True)\nall_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0],inplace=True)\nall_data['MasVnrArea'].fillna(all_data['MasVnrArea'].mean(),inplace=True)\nall_data['MasVnrType'].fillna(all_data['MasVnrType'].mode()[0],inplace=True)\nall_data.isnull().sum().sort_values(ascending=False)[:20]","5aee2f99":"all_data['BsmtFinType2'].fillna('NA',inplace=True)\nall_data['BsmtCond'].fillna('NA',inplace=True)\nall_data['BsmtExposure'].fillna('NA',inplace=True)\nall_data['GarageType'].fillna('NA',inplace=True)\nall_data['GarageQual'].fillna('NA',inplace=True)\nall_data['GarageCond'].fillna('NA',inplace=True)\nall_data['GarageFinish'].fillna('NA',inplace=True)\nall_data.isnull().sum().sort_values(ascending=False)[:10]","b49a1723":"\nall_data.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu'],axis=1,inplace=True)\nall_data.isnull().sum().sort_values(ascending=False)[:5]","fca02a49":"corr_data=all_data.corr()\ncorr_data['LotFrontage'].sort_values(ascending=False)[:6]","f3812d0d":"sns.scatterplot(x='LotFrontage',y='LotArea',data=all_data)\nplt.xlabel('LotFrontage')\nplt.ylabel('LotArea')","70a01729":"all_data['LotFrontage'].fillna(all_data['LotFrontage'].mean(),inplace=True)","6a02f5a8":"all_data['GarageYrBlt'].fillna(0,inplace=True)\nall_data.isnull().sum().sort_values(ascending=False)[:5]","f07304e3":"all_data['BsmtQual'].fillna('NA',inplace=True)\nall_data['BsmtFinType1'].fillna('NA',inplace=True)\nall_data.isnull().sum().sort_values(ascending=False)[:5]","6716fcf3":"all_data.dtypes[all_data.dtypes!='object'][:60]","65ba3d63":"all_data['MoSold']=all_data['MoSold']\/13\nall_data['YrSold']+=all_data['MoSold']","df68b112":"all_data.drop('MoSold',axis=1,inplace=True)","7f1719f2":"all_data['MSSubClass']=all_data['MSSubClass'].apply(str)\nall_data['OverallCond']=all_data['OverallCond'].apply(str)\nall_data['OverallQual']=all_data['OverallQual'].apply(str)","b5a9755d":"numeric=all_data.dtypes[all_data.dtypes!='object'].index\nnumeric","ffbf371b":"corr_data=all_data.corr()\nsns.heatmap(corr_data)","98566d5e":"all_data[numeric].skew()","5fd28260":"for features in numeric:\n    if all_data[features].skew()>0.7:\n        all_data[features]=np.log1p(all_data[features])\nall_data[numeric].skew()","aa061a4a":"all_data.head()","ac8f7d7f":"all_data=pd.get_dummies(all_data)\nall_data.shape","ffad0129":"all_data.head()","91ce190a":"n=train.shape[0]\nn","2a14cecf":"train=all_data[:n]\ntest=all_data[n:]\nprint('train:',train.shape,'test:',test.shape)","d465bfa4":"scorer=make_scorer(mean_squared_error,greater_is_better=False)","04d000ca":"x_train,x_test,y_train,true_p=train_test_split(train,y,random_state=121,test_size=0.2,shuffle=True)\nprint('x_train,x_test,y_train,true_p\\n')\nprint(x_train.shape,x_test.shape,y_train.shape,true_p.shape)","f7fc1147":"def rmse_train_cv(model):\n    rmse=np.sqrt(-cross_val_score(model,x_train,y_train,cv=5,scoring=scorer))\n    return rmse\ndef rmse_test_cv(model):\n    rmse=np.sqrt(-cross_val_score(model,x_test,true_p,cv=5,scoring=scorer))\n    return rmse","b232aa7b":"from sklearn.linear_model import LinearRegression,LassoCV,RidgeCV,Ridge,Lasso","56ab1572":"lreg=LinearRegression()\nlreg.fit(x_train,y_train)\nprint('rmse value of train=',rmse_train_cv(lreg).mean())\nprint('rmse value of test=',rmse_test_cv(lreg).mean())","892c380a":"train_pred=lreg.predict(x_train)\ntest_pred=lreg.predict(x_test)","73ccc0fc":"plt.scatter(x=train_pred,y=train_pred-y_train,c='blue',marker='s',label='train data')\nplt.scatter(x=test_pred,y=test_pred-true_p,c='green',marker='s',label='test data')\nplt.xlabel('predicted values')\nplt.ylabel('residuals')\nplt.title('linear regression')\nplt.plot([10.0,13.5],[0.0,0.0],c='red')\nplt.show()\nplt.scatter(x=train_pred,y=y_train,c='blue',marker='s',label='train data')\nplt.scatter(x=test_pred,y=true_p,c='green',marker='s',label='test data')\nplt.xlabel('predicted values')\nplt.ylabel('actual values')\nplt.title('linear regression')\nplt.plot([11.0,13.2],[11.0,13.2],c='red')\nplt.show()","9842036a":"r2_score(test_pred,true_p)","e0f466e7":"x_train,x_test,y_train,true_p=train_test_split(train,y,random_state=121,test_size=0.2,shuffle=True)\nprint('x_train,x_test,y_train,true_p\\n')\nprint(x_train.shape,x_test.shape,y_train.shape,true_p.shape)","6b5b291a":"alphas=[0.001,0.003,0.007,0.01,0.03,0.06,0.09,0.2,0.6,1,3,6,10,30]\nridge=RidgeCV(alphas)\nridge.fit(x_train,y_train)\nalpha=ridge.alpha_\nprint('best alpha:',alpha)","31774b59":"print('optimising alpha')\nalphas=[alpha * .6, alpha * .65, alpha * .7, alpha * .75, alpha * .8, alpha * .85, \n                          alpha * .9, alpha * .95, alpha, alpha * 1.05, alpha * 1.1, alpha * 1.15,\n                          alpha * 1.25, alpha * 1.3, alpha * 1.35, alpha * 1.4]\nridge=RidgeCV(alphas,cv=10)\nridge.fit(x_train,y_train)\nbest_alpha=ridge.alpha_\nprint('optimised alpha:',best_alpha)","05d34ec8":"print('rmse value of train data in ridge regression:',rmse_train_cv(ridge).mean())\nprint('rmse value of test data in ridge regression:',rmse_test_cv(ridge).mean())","46d25172":"train_pred=ridge.predict(x_train)\ntest_pred=ridge.predict(x_test)","07e5c15f":"plt.scatter(x=train_pred,y=train_pred-y_train,c='blue',marker='s',label='train data')\nplt.scatter(x=test_pred,y=test_pred-true_p,c='green',marker='s',label='test data')\nplt.xlabel('predicted values')\nplt.ylabel('residuals')\nplt.title('ridge regression')\nplt.plot([10.0,13.5],[0.0,0.0],c='red')\nplt.show()\nplt.scatter(x=train_pred,y=y_train,c='blue',marker='s',label='train data')\nplt.scatter(x=test_pred,y=true_p,c='green',marker='s',label='test data')\nplt.xlabel('predicted values')\nplt.ylabel('actual values')\nplt.title('ridge regression')\nplt.plot([11.0,13.2],[11.0,13.2],c='red')\nplt.show()","105fb349":"r2_score(test_pred,true_p)","7dd48b19":"lasso=LassoCV(alphas=[0.0001, 0.0003, 0.0006, 0.001, 0.003, 0.006, 0.01, 0.03, 0.06, 0.1, \n                          0.3, 0.6, 1],cv=10,max_iter=10000)\nlasso.fit(x_train,y_train)\nalpha=lasso.alpha_\nprint('best alpha:',alpha)","5a4f8985":"print('optimising alpha')\nlasso=LassoCV(alphas=[alpha * .6, alpha * .65, alpha * .7, alpha * .75, alpha * .8, alpha * .85, \n                          alpha * .9, alpha * .95, alpha, alpha * 1.05, alpha * 1.1, alpha * 1.15,\n                          alpha * 1.25, alpha * 1.3, alpha * 1.35, alpha * 1.4],cv=10,max_iter=10000)\nlasso.fit(x_train,y_train)\nbest_alpha=lasso.alpha_\nprint('optimised alpha:',best_alpha)","01a97fe9":"print('rmse value of train data in lasso regression:',rmse_train_cv(lasso).mean())\nprint('rmse value of test data in lasso regression:',rmse_test_cv(lasso).mean())","318e62d0":"train_pred=lasso.predict(x_train)\ntest_pred=lasso.predict(x_test)","6f51246f":"plt.scatter(x=train_pred,y=train_pred-y_train,c='blue',marker='s',label='train data')\nplt.scatter(x=test_pred,y=test_pred-true_p,c='green',marker='s',label='test data')\nplt.xlabel('predicted values')\nplt.ylabel('residuals')\nplt.title('lasso regression')\nplt.plot([10.0,13.5],[0.0,0.0],c='red')\nplt.show()\nplt.scatter(x=train_pred,y=y_train,c='blue',marker='s',label='train data')\nplt.scatter(x=test_pred,y=true_p,c='green',marker='s',label='test data')\nplt.xlabel('predicted values')\nplt.ylabel('actual values')\nplt.title('lasso regression')\nplt.plot([11.0,13.2],[11.0,13.2],c='red')\nplt.show()","69c86f3c":"r2_score(test_pred,true_p)","ef33b3cf":"final_pred=lreg.predict(test)\nsub = pd.DataFrame()\nsub['Id'] = test_id\nsub['SalePrice'] = final_pred\nsub.to_csv('submission.csv',index=False)","afbd0960":"# Lasso regression"}}