{"cell_type":{"96cac7c5":"code","d4091287":"code","8f9fb2c4":"code","e4be10d9":"code","aa716b6a":"code","17f1d5c7":"code","4ede4cec":"code","4923163b":"code","5b89e9ee":"code","034845eb":"code","812f856f":"code","810a43f6":"code","4ba1ee5d":"code","688d97fc":"code","66396fb9":"code","bbedb273":"code","bcde48a7":"code","efbad56d":"code","866a5337":"code","32c486ee":"code","0127a929":"code","cde1fea8":"code","14530127":"code","455405a3":"code","59b5441c":"code","dc4e0bcc":"code","9ace1d74":"code","a81ff232":"code","36333823":"code","d1cb1eb9":"code","73739f70":"code","e3f46624":"code","ea49a1b6":"code","f206dd67":"markdown","26ad1f89":"markdown","9e51a0c3":"markdown","3f5ef1a0":"markdown","6ad4960b":"markdown","de078dff":"markdown","ae5d23c1":"markdown","72c87331":"markdown","ba6ced93":"markdown","e0a92830":"markdown","286770cf":"markdown","0faddad3":"markdown","93d85471":"markdown"},"source":{"96cac7c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d4091287":"# imports\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)","8f9fb2c4":"df = pd.read_csv(\"..\/input\/diciaccio20\/train1.csv\")","e4be10d9":"g = sns.countplot(data=df, x='TARGET')\ng.set_title('Fraud label distribution')\n\nfor patch in g.patches:\n    height = patch.get_height()\n    g.text( patch.get_x() + patch.get_width()\/2., \n                height + 3,\n               '{:1.2f}%'.format( height \/ len(df)*100), \n                ha=\"center\", \n                fontsize=15) \n","aa716b6a":"#checking for missing values\n\nset(df.isnull().sum().values)","17f1d5c7":"target_0 = df[df['TARGET']==0]\ntarget_1 = df[df['TARGET']==1]","4ede4cec":"def plot_dists(col, figsize=(20, 3), **kwargs):\n    f,x = plt.subplots(figsize=figsize)\n    g = sns.distplot(target_0[col], **kwargs)\n    g.set_title(col, fontsize=20)\n    g.set(xlabel=None)\n\n    g1 = sns.distplot(target_1[col], **kwargs)\n    g1.set(xlabel=None)\n    f.legend(labels=['not fraud','fraud'])","4923163b":"def plot_cat_dist(col, figsize=(20, 3)):\n    f, x = plt.subplots(figsize=figsize)\n    g = sns.countplot( x=col,  data=df)\n    g.set_title(col, fontsize=20)\n    g.set(xlabel=None)\n    \n    for patch in g.patches:\n        height = patch.get_height()\n        g.text(patch.get_x() + patch.get_width()\/2.,\n        height + 3,\n        '{:1.2f}%'.format(height\/df.shape[0]*100),\n        ha=\"center\",fontsize=12)\n    \n    gt = g.twinx()\n    \n    gt = sns.pointplot(x=col, y='TARGET', data=df, color='black', legend=False )","5b89e9ee":"plot_dists('var15')\nplot_cat_dist('var36')\nplot_dists('var38')","034845eb":"imp_features = ['imp_aport_var13_hace3',\n                 'imp_op_var39_comer_ult1',\n                 'imp_op_var39_comer_ult3',\n                 'imp_op_var39_efect_ult1',\n                 'imp_op_var39_efect_ult3',\n                 'imp_op_var39_ult1',\n                 'imp_op_var41_comer_ult1',\n                 'imp_op_var41_comer_ult3',\n                 'imp_op_var41_efect_ult1',\n                 'imp_op_var41_efect_ult3',\n                 'imp_op_var41_ult1',\n                 'imp_trans_var37_ult1',\n                 'imp_var43_emit_ult1']","812f856f":"df[imp_features].describe()","810a43f6":"f,x = plt.subplots(figsize=(20, 7))\nd = df[imp_features].isin([0]).sum()\/df.shape[0]\nsns.barplot(x=list(d.values), y=list(d.index.values))","4ba1ee5d":"ind_features = ['ind_var12',\n                'ind_var12_0',\n                'ind_var24',\n                'ind_var24_0',\n                'ind_var30',\n                'ind_var37',\n                'ind_var37_0',\n                'ind_var37_cte',\n                'ind_var39_0',\n                'ind_var40_0',\n                'ind_var41_0',\n                'ind_var5',\n                'ind_var5_0',\n                'ind_var8',\n                'ind_var8_0']","688d97fc":"df[ind_features].describe()","66396fb9":"for feature in ind_features:\n    plot_cat_dist(feature)\n","bbedb273":"plot_cat_dist('num_med_var22_ult3')","bcde48a7":"f,x = plt.subplots(figsize=(25, 3))\ng = sns.boxplot(x=\"num_med_var45_ult3\", y=\"TARGET\", data=df, orient='h')\ng.set_title('num_med_var45_ult3', fontsize=20)\nf.legend(labels=['not fraud','fraud'])","efbad56d":"num_meses_features = ['num_meses_var12_ult3',\n                     'num_meses_var39_vig_ult3',\n                     'num_meses_var5_ult3',\n                     'num_meses_var8_ult3']\n\nfor feature in num_meses_features:\n    plot_cat_dist(feature)","866a5337":"df.head()","32c486ee":"num_op_features = ['num_op_var39_comer_ult1',\n         'num_op_var39_comer_ult3',\n         'num_op_var39_efect_ult1',\n         'num_op_var39_efect_ult3',\n         'num_op_var39_hace2',\n         'num_op_var39_hace3',\n         'num_op_var39_ult1',\n         'num_op_var39_ult3',\n         'num_op_var41_comer_ult1',\n         'num_op_var41_comer_ult3',\n         'num_op_var41_efect_ult1',\n         'num_op_var41_efect_ult3',\n         'num_op_var41_hace2',\n         'num_op_var41_ult1',\n         'num_op_var41_ult3',\n         'num_trasp_var11_ult1']\n\nf,x = plt.subplots(figsize=(20, 7))\nd = df[num_op_features].isin([0]).sum()\/df.shape[0]\nsns.barplot(x=list(d.values), y=list(d.index.values))","0127a929":"num_var_features = [ 'num_var12_0',\n                     'num_var13_0',\n                     'num_var13_corto_0',\n                     'num_var22_hace2',\n                     'num_var22_hace3',\n                     'num_var22_ult1',\n                     'num_var22_ult3',\n                     'num_var24',\n                     'num_var24_0',\n                     'num_var26',\n                     'num_var30',\n                     'num_var30_0',\n                     'num_var35',\n                     'num_var37',\n                     'num_var37_0',\n                     'num_var37_med_ult2',\n                     'num_var39_0',\n                     'num_var4',\n                     'num_var41_0',\n                     'num_var42',\n                     'num_var42_0',\n                     'num_var43_emit_ult1',\n                     'num_var43_recib_ult1',\n                     'num_var45_hace2',\n                     'num_var45_hace3',\n                     'num_var45_ult1',\n                     'num_var45_ult3',\n                     'num_var5',\n                     'num_var5_0',\n                     'num_var8',\n                     'num_var8_0']\n\n\nf,x = plt.subplots(figsize=(20, 7))\nd = df[num_var_features].isin([0]).sum()\/df.shape[0]\nsns.barplot(x=list(d.values), y=list(d.index.values))","cde1fea8":"df[num_var_features].describe()","14530127":"for feature in num_var_features:\n    plot_cat_dist(feature)","455405a3":"sorted(df.columns.values)","59b5441c":"saldo_features=['saldo_medio_var12_hace2',\n                 'saldo_medio_var12_ult1',\n                 'saldo_medio_var12_ult3',\n                 'saldo_medio_var5_hace2',\n                 'saldo_medio_var5_hace3',\n                 'saldo_medio_var5_ult1',\n                 'saldo_medio_var5_ult3',\n                 'saldo_medio_var8_ult1',\n                 'saldo_medio_var8_ult3',\n                 'saldo_var1',\n                 'saldo_var12',\n                 'saldo_var13',\n                 'saldo_var13_corto',\n                 'saldo_var24',\n                 'saldo_var30',\n                 'saldo_var37',\n                 'saldo_var42',\n                 'saldo_var5',\n                 'saldo_var8']","dc4e0bcc":"for feature in saldo_features:\n    plot_dists(feature, kde_kws={'bw': 0.1})","9ace1d74":"correlation = df.corr().abs()\nsns.clustermap(correlation, cmap='coolwarm', \n               vmin=0, vmax=0.8, center=0, \n               square=True, linewidths=.5, \n               figsize=(50,50), yticklabels=1)","a81ff232":"from sklearn.ensemble import RandomForestClassifier","36333823":"df = df.dropna(how='any')","d1cb1eb9":"X = df[[col for col in df.columns.values if col!='TARGET' and col!='ID']]\ny = df['TARGET']\n\nrf = RandomForestClassifier()\nrf.fit(X, y)\n\nfv = dict(zip(X.columns, rf.feature_importances_))\nfv_dict = {k: v for k, v in sorted(fv.items(), key=lambda item: item[1], reverse=True)}","73739f70":"fig, ax = plt.subplots(figsize=(10,20))\nsns.barplot(y=list(fv_dict.keys()), x=list(fv_dict.values()))","e3f46624":"top = list(fv_dict.keys())[:10]\ntop.append('TARGET')","ea49a1b6":"sns.pairplot(df[top], hue='TARGET', kind=\"reg\")","f206dd67":"# num_med features","26ad1f89":"# Imp features","9e51a0c3":"# num_meses features","3f5ef1a0":"# saldo_medio features (Account balance)","6ad4960b":"# Ind features","de078dff":"# num_op features","ae5d23c1":"# num_var features","72c87331":"# Feature Importance","ba6ced93":"# Top important features","e0a92830":"# Target Skeweness","286770cf":"# Feature Correlation","0faddad3":"# Var features","93d85471":"Percentage of feature taking value of 0"}}