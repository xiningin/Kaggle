{"cell_type":{"5cc08eca":"code","0e9f3f2a":"code","efe006f8":"code","72ca3140":"code","ba42019e":"code","56a0b75a":"code","bfb9d058":"code","a542444b":"code","891925d3":"code","a195f2ea":"code","932a40ce":"code","6fa9836a":"code","5c94fe2e":"code","7dd1f504":"code","d3d28cfa":"code","7a99141d":"code","93fb7fa2":"code","4bf7125a":"code","727c2464":"code","3de0948c":"code","a190d4df":"code","6235a3b3":"code","7054c1df":"code","727fc419":"code","0ee479d1":"code","c2747f91":"code","bb69b632":"code","2b126012":"code","914baa70":"code","035b7cb0":"code","f64f2388":"code","b5f7ffcc":"code","05f970ef":"code","6f089f77":"code","dc5ff3ce":"code","e7b34b56":"code","db3f0388":"code","597148d7":"code","ebfab55f":"code","bc79d67e":"code","b9be98e5":"code","b8d6180a":"code","04f4b87d":"code","21eb1703":"code","d291d5dc":"code","1d514987":"code","2c445fa6":"code","62015f64":"code","a35c4f57":"code","048c5657":"code","272b84b6":"code","8e3a9fd9":"code","7cb2d850":"code","77dcc204":"code","a27e087a":"code","4af9f4aa":"code","90bade94":"code","cd498e2a":"code","b6479dec":"code","4cfc5ddb":"code","6ac6edf9":"code","a34fa7ac":"code","85dda979":"code","d03a7f5d":"code","2069a90a":"code","a02d3023":"code","84447e49":"code","e927ead3":"code","b76d87bb":"code","9604e83f":"code","65070b15":"code","c13e0d6b":"code","424d6fd8":"code","76b57442":"code","0f64a70f":"code","eee68a21":"code","7984c926":"code","53a9ce5f":"code","20b18704":"code","6e911482":"code","354474b8":"code","3d45b1ab":"code","8d56f75b":"code","83297751":"code","a6306dfc":"code","13e162a3":"code","60e1a8b3":"code","9c626793":"code","bee71292":"markdown","b532fb83":"markdown","8367cbd5":"markdown","e41fdfe5":"markdown","d6e43ae1":"markdown","32581db2":"markdown","95bd53f1":"markdown","e7617fc8":"markdown","7b091a73":"markdown","f26a259e":"markdown","a859aaa9":"markdown","dc25db50":"markdown","7244c3eb":"markdown","5e0b22c1":"markdown","ffe55963":"markdown","c3f2b195":"markdown","5abc5d44":"markdown","9021bd43":"markdown","c7cc909a":"markdown","bb697cdc":"markdown","16092d59":"markdown","b66e7f46":"markdown","71a01abb":"markdown","5f302436":"markdown","743cc190":"markdown","3426a73f":"markdown","64b150a8":"markdown","1b660d1e":"markdown","522f2d9d":"markdown","cc7a7ed3":"markdown","b3890950":"markdown","acdfa28c":"markdown","b5a6de9f":"markdown","84730030":"markdown","d2f5dadd":"markdown","3358fec8":"markdown","9aeee2cb":"markdown","bc6392d8":"markdown","5b5d4e6a":"markdown","ecafaa67":"markdown","8f5bfe6b":"markdown","602a500d":"markdown","db2c3618":"markdown","b7c1408a":"markdown","3a6d7a0c":"markdown","206d156c":"markdown","5634bfb1":"markdown"},"source":{"5cc08eca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0e9f3f2a":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","efe006f8":"train_df.columns","72ca3140":"train_df.head()","ba42019e":"train_df.describe()","56a0b75a":"train_df.info()","bfb9d058":"def bar_plot(variable):\n    \"\"\"\n        input variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel('Frequency')\n    plt.title(variable)\n    plt.show\n    print(\"{}: \\n {}\".format(variable, varValue))","a542444b":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","891925d3":"category2=[\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()) )","a195f2ea":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 100)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distrubution with hist\".format(variable))\n    plt.show()","932a40ce":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","6fa9836a":"train_df[[\"Pclass\",\"Survived\"]]","5c94fe2e":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","7dd1f504":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","d3d28cfa":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","7a99141d":"# SibSp vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","93fb7fa2":"def detect_outliers(df, features):\n    outlier_indices=[]\n    \n    for c in features:\n        # 1st quartile    \n        Q1=np.percentile(df[c],25)\n        # 3rd quartile    \n        Q3=np.percentile(df[c],75)\n        # IQR\n        IQR = Q3-Q1\n        # Outlier Step\n        outlier_step = IQR * 1.5\n        # Detect Outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indices\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n\n    return multiple_outliers","4bf7125a":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","727c2464":"train_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop = True)","3de0948c":"train_df_len = len(train_df) \ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","a190d4df":"train_df.columns[train_df.isnull().any()]","6235a3b3":"train_df.isnull().sum()","7054c1df":"train_df[train_df[\"Embarked\"].isnull()]","727fc419":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","0ee479d1":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","c2747f91":"train_df[train_df[\"Fare\"].isnull()]","bb69b632":"train_df[\"Fare\"]=train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","2b126012":"train_df[train_df[\"Fare\"].isnull()]","914baa70":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot=True, fmt = \".2f\")\nplt.show()","035b7cb0":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data=train_df, kind = \"bar\", size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","f64f2388":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data=train_df, size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","b5f7ffcc":"g = sns.factorplot(x = \"Pclass\", y=\"Survived\", kind = \"bar\", data=train_df, size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","05f970ef":"g=sns.FacetGrid(train_df, col=\"Survived\")\ng.map(sns.distplot, \"Age\", bins=25)\nplt.show()","6f089f77":"g = sns.FacetGrid(train_df, col=\"Survived\", row=\"Pclass\",size=3)\ng.map(plt.hist, \"Age\", bins=25)\ng.add_legend()\nplt.show()","dc5ff3ce":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 3)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","e7b34b56":"g = sns.FacetGrid(train_df, row=\"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","db3f0388":"train_df[train_df[\"Age\"].isnull()]","597148d7":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","ebfab55f":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind = \"box\")\nplt.show()","bc79d67e":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","b9be98e5":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","b8d6180a":"sns.heatmap(train_df[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\",]].corr(), annot = True)\nplt.show()","04f4b87d":"index_non_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_non_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"]==train_df.iloc[i][\"SibSp\"])&(train_df[\"Parch\"]==train_df.iloc[i][\"Parch\"])&(train_df[\"Pclass\"]==train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","21eb1703":"train_df[train_df[\"Age\"].isnull()]","d291d5dc":"train_df[\"Name\"].head(10)","1d514987":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","2c445fa6":"train_df[\"Title\"].head(10)","62015f64":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","a35c4f57":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","048c5657":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","272b84b6":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","8e3a9fd9":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","7cb2d850":"train_df.head()","77dcc204":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","a27e087a":"train_df.head()","4af9f4aa":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","90bade94":"train_df.head()","cd498e2a":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","b6479dec":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","4cfc5ddb":"train_df.head(10)","6ac6edf9":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","a34fa7ac":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","85dda979":"train_df[\"Embarked\"].head()","d03a7f5d":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","2069a90a":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","a02d3023":"train_df[\"Ticket\"].head(20)","84447e49":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","e927ead3":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","b76d87bb":"train_df[\"Ticket\"].head(20)","9604e83f":"train_df.head()","65070b15":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","c13e0d6b":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","424d6fd8":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","76b57442":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","0f64a70f":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","eee68a21":"train_df.columns","7984c926":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","53a9ce5f":"train_df_len","20b18704":"test.head()","6e911482":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","354474b8":"test.head()","3d45b1ab":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","8d56f75b":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","83297751":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","a6306dfc":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","13e162a3":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","60e1a8b3":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","9c626793":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","bee71292":"<a id = '3'><\/a>\n# Univariate Variable Analysis\n* Categorical Variable Analysis: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable Analysis: Fare, age and passengerId","b532fb83":"Sex is not informative for age prediction, age distrubution seems to be same.","8367cbd5":"<a id = '4'><\/a>\n## Categorical Variable","e41fdfe5":"# Introduction\nThe Titanik Sinking is one of the most notorious shipwredicks in the history. In 1912, during the voyage, the titanik sank colliding with an iceberg, killing 1502 out of passengers and crew.\n\n<font color ='blue'>\nContent: \n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)  \n    * [Parch -- Survived](#14)  \n    * [Pclass -- Survived](#15)  \n    * [Age -- Survived](#16)  \n    * [Pclass -- Survived -- Age](#17) \n    * [Embarked -- Sex -- Pclass -- Survived](#18)  \n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)  \n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32) \n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","d6e43ae1":"<a id = '13'><\/a>\n## SibSp -- Survived","32581db2":"* SibSp and parch can be used for new feature extraction with th=3\n* small families have more chance to survive\n* There is a std in survivol of passenger with parch=3","95bd53f1":"<a id = '9'><\/a>\n## Find Missing Value","e7617fc8":"<a id = \"27\"><\/a><br>\n## Sex","7b091a73":"<a id = '2'><\/a>\n# Variable Description\n1. PassengerId: unique id number to each passenger\n1. Survived: passenger survived(1) or died(0)\n1. Pclass: passenger class\n1. Name: name\n1. Sex: gender of passenger\n1. Age: age of passenger\n1. SibSp: number of siblings\/spouses\n1. Parch : number of parents\/children\n1. Ticket: ticket number\n1. Fare: amount of money spent on ticket\n1. Cabin: cabin category\n1. Embarked: port where passenger embarked (C = Cherbourg, Q = Queentown, S = Southampton)","f26a259e":"* Pclass is important feature for model training.","a859aaa9":"<a id = '19'><\/a>\n## Embarked -- Sex -- Fare -- Survived","dc25db50":"<a id = \"34\"><\/a><br>\n## Prediction and Submission","7244c3eb":"    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)","5e0b22c1":"<a id = '6'><\/a>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","ffe55963":"<a id = \"33\"><\/a><br>\n## Ensemble Modeling","c3f2b195":"<a id = \"25\"><\/a><br>\n## Ticket","5abc5d44":"<a id = '17'><\/a>\n## Pclass -- Survived -- Age","9021bd43":"<a id = '11'><\/a>\n ## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived","c7cc909a":"<a id = '10'><\/a>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has 1 missing value","bb697cdc":"<a id = \"31\"><\/a><br>\n## Simple Logistic Regression","16092d59":"<a id = '5'><\/a>\n## Numerical Variable","b66e7f46":"* Female passenger have much better survival rate than males.\n* Males have better survival rate in pclass 3 in C.\n* Embarked and Sex will be used in training.","71a01abb":"* float64(2): fare ve age\n* int64(5): Pclass, sibsp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","5f302436":"<a id = \"30\"><\/a><br>\n## Train - Test Split","743cc190":"<a id = \"23\"><\/a><br>\n## Family Size","3426a73f":"<a id = '7'><\/a>\n# Outlier Detection","64b150a8":"<a id = '11'><\/a>\n# Visualization","1b660d1e":"* age <= 10 has a high survival rate,\n* oldest passengers(80) survived,\n* large number of 20 years old did not survive,\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value of age","522f2d9d":"* Passengers who pay higher fare have better survival rate. Fare can be used as categorical training.","cc7a7ed3":"<a id = \"28\"><\/a><br>\n## Drop Passenger ID and Cabin ","b3890950":"<a id = '16'><\/a>\n## Age -- Survived","acdfa28c":"<a id = \"26\"><\/a><br>\n## Pclass","b5a6de9f":"<a id = '8'><\/a>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","84730030":"1st class passengers are older than 2nd, 2nd class passengers are older than 3rd class.","d2f5dadd":"* having a lot of SibSp have less chance to survive.\n* if sibsp == 0, 1 or 2 passenger has more chance to survive\n* we can consider a new feature describing these categories.","3358fec8":"<a id = '14'><\/a>\n## Parch -- Survived","9aeee2cb":"<a id = \"24\"><\/a><br>\n## Embarked","bc6392d8":"<a id = \"21\"><\/a><br>\n# Feature Engineering","5b5d4e6a":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","ecafaa67":"Age is not related with sex but it is correlated with parch, sibsp and pclass.","8f5bfe6b":"Fare feature seems to have correlation with Survived feature (0.26)","602a500d":"<a id = \"22\"><\/a><br>\n## Name -- Title","db2c3618":"<a id = '1'><\/a>\n# Load and Check Data","b7c1408a":"<a id = '18'><\/a>\n## Embarked -- Sex -- Pclass -- Survived","3a6d7a0c":"<a id = \"29\"><\/a><br>\n# Modeling","206d156c":"<a id = '20'><\/a>\n## Fill Missing: Age Feature","5634bfb1":"<a id = '15'><\/a>\n## Pclass -- Survived"}}