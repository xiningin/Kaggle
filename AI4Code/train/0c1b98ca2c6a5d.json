{"cell_type":{"c10ee3b6":"code","d7a83aeb":"code","0d8993f2":"code","603fe62c":"code","195c60aa":"code","e4d81811":"code","1056dcf1":"code","9a9aaf18":"code","bf6f0171":"code","e98a179a":"code","1e7efefa":"code","59b48c0a":"code","ec68034f":"code","243d467f":"code","a56ec6c1":"code","ddba8115":"code","3ba8ec8a":"code","e9f602ee":"code","ca8e5103":"code","9bd5c1fe":"code","6af03b72":"code","81af9324":"code","4fa14ab7":"code","f5d4aad0":"code","9f7797a4":"code","018988c5":"code","70ca3ba3":"code","df1f844d":"code","ba777683":"code","b072e959":"code","4ad2e157":"code","058d7983":"code","bc775c04":"code","2927e6ad":"code","a627d7aa":"code","5b191abe":"code","04d869f2":"code","834f34fd":"code","5e401974":"code","15fe90a8":"code","bdf65764":"code","4d2c6b73":"code","271b93c1":"code","a2f4873f":"code","ff3db128":"code","69e4c0a5":"code","f2655019":"code","2a81c6e5":"code","26998b78":"code","2acfff22":"code","38882a7e":"markdown","24f2c168":"markdown","ce7133c2":"markdown","175d97a7":"markdown","8c0f4fac":"markdown","76097712":"markdown","6bdf6021":"markdown","112a9f13":"markdown","80a3da5a":"markdown","ecc90113":"markdown","ce433f82":"markdown","fd603818":"markdown","2ce0b3fc":"markdown"},"source":{"c10ee3b6":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X, \uc2dc\ud5d8\ud658\uacbd\uacfc \uc720\uc0ac\ud558\uac8c \ud30c\uc77c\uc77d\uae30 \uad6c\ud604)\nimport pandas as pd\ndf = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\ny_train = X_train['Outcome']\nX_train = X_train.drop(columns=['Outcome'])\ny_test = X_test['Outcome']\nX_test = X_test.drop(columns=['Outcome'])\n\nX_train.shape, y_train.shape, X_test.shape, y_test.shape","d7a83aeb":"X_train.head()","0d8993f2":"X_test.head()","603fe62c":"X_train.describe()","195c60aa":"X_test.describe()","e4d81811":"X_train.info()","1056dcf1":"X_test.info()","9a9aaf18":"y_train.head()","bf6f0171":"y_train.value_counts()","e98a179a":"X_train.boxplot()","1e7efefa":"X_test.boxplot()","59b48c0a":"X_train.SkinThickness.hist()","ec68034f":"X_test.SkinThickness.hist()","243d467f":"X_train.Insulin.hist()","a56ec6c1":"X_test.Insulin.hist()","ddba8115":"for i in range(5):\n    print('X_train',X_train.iloc[:,i+1].name,':',len(X_train[X_train.iloc[:,i+1]==0]))\n    print('X_test',X_test.iloc[:,i+1].name,':',len(X_test[X_test.iloc[:,i+1]==0]))","3ba8ec8a":"X_train.loc[X_train.Insulin>X_test.Insulin.max(),'Insulin'] = X_test.Insulin.max()\nX_train.loc[X_train.SkinThickness>X_test.SkinThickness.max(),'SkinThickness'] = X_test.SkinThickness.max()\n\nfor i in range(5):\n    X_train.loc[X_train.iloc[:,i+1]==0,X_train.iloc[:,i+1].name] = X_train.loc[X_train.iloc[:,i+1]!=0,X_train.iloc[:,i+1].name].median()\n    X_test.loc[X_test.iloc[:,i+1]==0,X_test.iloc[:,i+1].name] = X_test.loc[X_test.iloc[:,i+1]!=0,X_test.iloc[:,i+1].name].median()","e9f602ee":"import sklearn\nfrom sklearn import *\n\nfrom sklearn.ensemble import AdaBoostClassifier, ExtraTreesClassifier, GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import recall_score, accuracy_score\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nimport xgboost as xg\nfrom xgboost import XGBClassifier, XGBRFClassifier","ca8e5103":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","9bd5c1fe":"X_tra, X_val, y_tra, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","6af03b72":"model_list = [AdaBoostClassifier(random_state=0), ExtraTreesClassifier(random_state=0), GradientBoostingClassifier(random_state=0), \n              RandomForestClassifier(random_state=0), LogisticRegression(random_state=0), KNeighborsClassifier(), \n              DecisionTreeClassifier(random_state=0), SVC(random_state=0), XGBClassifier(random_state=0), XGBRFClassifier(random_state=0)]\n\nfor i in range(len(model_list)):\n    clf = model_list[i]\n    clf.fit(X_tra, y_tra)\n    print(model_list[i],\":\",recall_score(y_val, clf.predict(X_val)))","81af9324":"parameters = {'n_estimators':[100, 300, 500], 'max_depth':[5, 10, 15]}\nclf = GridSearchCV(GradientBoostingClassifier(random_state=0) , parameters, scoring = 'recall')\nclf.fit(X_train, y_train)\nprint(clf.best_score_)\nprint(clf.best_params_)","4fa14ab7":"parameters = {'n_estimators':[100, 300, 500], 'max_depth':[5, 10, 15]}\nclf = GridSearchCV(RandomForestClassifier(random_state=0) , parameters, scoring = 'recall')\nclf.fit(X_train, y_train)\nprint(clf.best_score_)\nprint(clf.best_params_)","f5d4aad0":"parameters = {'max_depth':[-1, 5, 10, 15, 20]}\nclf = GridSearchCV(DecisionTreeClassifier(random_state=0) , parameters, scoring = 'recall')\nclf.fit(X_train, y_train)\nprint(clf.best_score_)\nprint(clf.best_params_)","9f7797a4":"parameters = {'n_estimators':[100, 300, 500], 'max_depth':[5, 10, 15]}\nclf = GridSearchCV(XGBRFClassifier(random_state=0) , parameters, scoring = 'recall')\nclf.fit(X_train, y_train)\nprint(clf.best_score_)\nprint(clf.best_params_)","018988c5":"clf = RandomForestClassifier(random_state=0, max_depth= 10, n_estimators= 300)\nclf.fit(X_train, y_train)\npred = clf.predict(X_test)","70ca3ba3":"recall_score(y_test, pred)","df1f844d":"accuracy_score(y_test, pred)","ba777683":"##pd.DataFrame({'index':y_test.index,'prediction':pred}).to_csv('xxx.csv')","b072e959":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X, \uc2dc\ud5d8\ud658\uacbd\uacfc \uc720\uc0ac\ud558\uac8c \ud30c\uc77c\uc77d\uae30 \uad6c\ud604)\nimport pandas as pd\ndf = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\ny_train = X_train['Outcome']\nX_train = X_train.drop(columns=['Outcome'])\ny_test = X_test['Outcome']\nX_test = X_test.drop(columns=['Outcome'])\n\nX_train.shape, y_train.shape, X_test.shape, y_test.shape","4ad2e157":"# \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport pandas as pd","058d7983":"# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 (\uc0dd\ub7b5)\nX_train.shape, y_train.shape, X_test.shape","bc775c04":"X_train.head()","2927e6ad":"y_train.value_counts()","a627d7aa":"X_train.info()","5b191abe":"X_train.isnull().sum()","04d869f2":"X_test.isnull().sum()","834f34fd":"X_train.describe()","5e401974":"#\uc774\uc0c1\uce58 \ucc98\ub9ac\n#Train\nprint('Glucose:',len(X_train[X_train['Glucose']==0]))\nprint('BloodPressure:',len(X_train[X_train['BloodPressure']==0]))\nprint('SkinThickness:',len(X_train[X_train['SkinThickness']==0]))\nprint('Insulin:',len(X_train[X_train['Insulin']==0]))\nprint('BMI:',len(X_train[X_train['BMI']==0]))","15fe90a8":"#Test\nprint('Glucose:',len(X_test[X_test['Glucose']==0]))\nprint('BloodPressure:',len(X_test[X_test['BloodPressure']==0]))\nprint('SkinThickness:',len(X_test[X_test['SkinThickness']==0]))\nprint('Insulin:',len(X_test[X_test['Insulin']==0]))\nprint('BMI:',len(X_test[X_test['BMI']==0]))","bdf65764":"# \ud3ec\ub3c4\ub2f9 \uc774\uc0c1\uce58 \uc0ad\uc81c\ndel_idx = X_train[(X_train['Glucose']==0)].index\ndel_idx","4d2c6b73":"print('Glucose \uc774\uc0c1\uce58 \uc0ad\uc81c \uc804 :', X_train.shape, y_train.shape)\nX_train = X_train.drop(index=del_idx, axis=0)\ny_train = y_train.drop(index=del_idx, axis=0)\nprint('Glucose \uc774\uc0c1\uce58 \uc0ad\uc81c \ud6c4 :', X_train.shape, y_train.shape)","271b93c1":"# \ud3ec\ub3c4\ub2f9\uc744 \uc81c\uc678\ud55c \uc774\uc0c1\uce58, \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uccb4\ncols = ['BloodPressure', 'SkinThickness', 'Insulin', 'BMI']\ncols_mean = X_train[cols].mean()\nX_train[cols].replace(0, cols_mean)","a2f4873f":"# \uc2a4\ucf00\uc77c\ub9c1\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.fit_transform(X_test)","ff3db128":"# \uc2a4\ucf00\uc77c \ud6c4 \ub370\uc774\ud130 \ud655\uc778\npd.DataFrame(X_train_scaled, columns=X_train.columns).head()","69e4c0a5":"from sklearn.svm import SVC\nmodel = SVC(random_state=2022)\nmodel.fit(X_train_scaled, y_train)\npredictions = model.predict(X_test)","f2655019":"round(model.score(X_train_scaled, y_train) * 100, 2) ","2a81c6e5":"output = pd.DataFrame({'idx': y_test.index, 'Outcome': predictions})\noutput.head()","26998b78":"# \uc218\ud5d8\ubc88\ud638.csv\ub85c \ucd9c\ub825\n#output.to_csv('1234567.csv', index=False)","2acfff22":"round(model.score(X_test, y_test) * 100, 2) # 60\uc810\ub300\ub85c \ub0ae\uc740 \uc815\ud655\ub3c4\ub97c \ubcf4\uc5ec\uc90c","38882a7e":"- GradientBoostingClassifier(random_state=0) : 0.6842105263157895\n- RandomForestClassifier(random_state=0) : 0.6578947368421053\n- DecisionTreeClassifier(random_state=0) : 0.7105263157894737\n- XGBRFClassifier() : 0.6842105263157895\n\n\uc704 \ubaa8\ub378 \uad6c\uccb4\ud654","24f2c168":"## [\ucc38\uace0]\uc791\uc5c5\ud6152 \ubb38\uad6c\n- \ucd9c\ub825\uc744 \uc6d0\ud558\uc2e4 \uacbd\uc6b0 print() \ud568\uc218 \ud65c\uc6a9\n- \uc608\uc2dc) print(df.head())\n- getcwd(), chdir() \ub4f1 \uc791\uc5c5 \ud3f4\ub354 \uc124\uc815 \ubd88\ud544\uc694\n- \ud30c\uc77c \uacbd\ub85c \uc0c1 \ub0b4\ubd80 \ub4dc\ub77c\uc774\ube0c \uacbd\ub85c(C: \ub4f1) \uc811\uadfc \ubd88\uac00\n\n### \ub370\uc774\ud130 \ud30c\uc77c \uc77d\uae30 \uc608\uc81c\n- import pandas as pd\n- X_test = pd.read_csv(\"data\/X_test.csv\")\n- X_train = pd.read_csv(\"data\/X_train.csv\")\n- y_train = pd.read_csv(\"data\/y_train.csv\")\n\n### \uc0ac\uc6a9\uc790 \ucf54\ub529\n\n### \ub2f5\uc548 \uc81c\ucd9c \ucc38\uace0\n- \uc544\ub798 \ucf54\ub4dc \uc608\uce21\ubcc0\uc218\uc640 \uc218\ud5d8\ubc88\ud638\ub97c \uac1c\uc778\ubcc4\ub85c \ubcc0\uacbd\ud558\uc5ec \ud65c\uc6a9\n- pd.DataFrame({'cust_id': X_test.cust_id, 'gender': pred}).to_csv('003000000.csv', index=False)","ce7133c2":"## \ub2f9\ub1e8\ubcd1 \uc5ec\ubd80 \ud310\ub2e8\n- \uc774\uc0c1\uce58 \ucc98\ub9ac (Glucose, BloodPressure, SkinThickness, Insulin, BMI\uac00 0\uc778 \uac12)","175d97a7":"\ubd84\ub958\ubb38\uc81c, \ub77c\ubca8\uc758 \uc218\uac00 \ucc28\uc774\uac00 \ub098\ubbc0\ub85c \uc815\ubc00\ud55c \ud310\ub2e8\uc744 \uc704\ud574 \uc7ac\ud604\ub960\ub97c \ud3c9\uac00\uc9c0\ud45c\ub85c \uc0ac\uc6a9(\ud3c9\uac00\uc9c0\ud45c\uac00 \uc5c6\ub124\uc694)","8c0f4fac":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","76097712":"## Start","6bdf6021":"## \ub370\uc774\ud130 \uc804\ucc98\ub9ac","112a9f13":"test\uc758 max\uac12\uc73c\ub85c train\ub370\uc774\ud130\uc758 \uc601\uc5ed \uc218\uc815\n\nGlucose, BloodPressure, SkinThickness, Insulin, BMI \uac12\uc774 0\uc77c \uc218\ub294 \uc5c6\uc73c\ubbc0\ub85c \uc911\uc559\uac12 \ub300\uccb4 ","80a3da5a":"\ud2b8\ub808\uc778\uc5d0\ub9cc 0\uc774 \uc788\ub294 \ud3ec\ub3c4\ub2f9(Glucose)\ub294 \uc0ad\uc81c\n\ub098\uba38\uc9c0\ub294 \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uccb4 \ud558\uc5ec \uc774\uc0c1\uce58\ub97c \ucc98\ub9ac\ud568","ecc90113":"## \uacb0\uacfc \uccb4\uc810 (\uc218\ud5d8\uc790\ub294 \uc54c \uc218 \uc5c6\ub294 \ubd80\ubd84\uc784)","ce433f82":"## EDA","fd603818":"\uacb0\uce21\uce58 x\n\nSkinThickness, Insulin \ubcc0\uc218\uc5d0\uc11c train, test \ubc94\uc704\uac00 \uc870\uae08 \ubc97\uc5b4\ub0a8","2ce0b3fc":"\ucd5c\uc885\ubaa8\ub378"}}