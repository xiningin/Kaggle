{"cell_type":{"c456bcdb":"code","f7f74641":"code","06a2e0e8":"code","23de2e94":"code","30a45e06":"code","2580b0ae":"code","c5a4d286":"code","b98e1373":"code","61c563cd":"code","fd29e792":"code","b3b74579":"code","4fa3ba0b":"code","2221ad92":"code","f8228618":"code","b6b173df":"code","680e900b":"code","316d7ae4":"code","a7fbcdd0":"code","3a4bce6d":"code","1496613e":"code","f458c6bd":"code","da319899":"code","1ba131ff":"code","9247b951":"code","bed56316":"code","28b09914":"code","2dadfb1b":"code","d6d234fe":"code","ee7f730d":"code","2299a2db":"code","8ed25e79":"code","3b36a0b2":"code","89ed74a0":"code","9a205404":"code","2251afbf":"code","61263dd4":"code","42d70b72":"markdown","e325e935":"markdown","a8ca5c19":"markdown","96347978":"markdown","45a8d366":"markdown","9c966be1":"markdown","5c2d98f0":"markdown","24ce8ce7":"markdown","482c0605":"markdown","f2269737":"markdown","098476a1":"markdown","3cb28895":"markdown","2169422f":"markdown","a44ccaa7":"markdown","77097fab":"markdown","58e89876":"markdown"},"source":{"c456bcdb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7f74641":"import time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.decomposition import TruncatedSVD\nimport umap\nt0_start = time.time()","06a2e0e8":"l = os.listdir('\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/')\nl\nl = list( filter(lambda x: 'sciPlex2' in x, l ) )\nprint(l)\n'''\n['GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_hashSampleSheet.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_hashTable.out.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n 'GSM4150377_sciPlex2_pData.txt']\n'''\ndirname =  '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/'\nll = list( filter(lambda x: 'gene.annotations' in x, l ) )\nprint(ll)\ngenes = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\n\ndisplay(genes)\nll = list( filter(lambda x: 'cell.annotations' in x, l ) )\nprint(ll)\ncells = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\ndisplay(cells)\n\nll = list( filter(lambda x: 'hashTable' in x, l ) )\nprint(ll)\ninfo_dict_cells2drugs = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(info_dict_cells2drugs)\ns = set(cells[0]) & set( info_dict_cells2drugs[1] ) \nprint( len(s), len(cells) )\n\nll = list( filter(lambda x: 'hashSampleSheet' in x, l ) )\nprint(ll)\nhashSampleSheet = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(hashSampleSheet)\n\nll = list( filter(lambda x: 'pData' in x, l ) )\nprint(ll)\npData = pd.read_csv(dirname + ll[0],sep = ' ')# , header = None)\ndisplay(pData)\n\n\n","23de2e94":"print()\nt0 = time.time()\nll = list( filter(lambda x: 'count.matrix' in x, l ) )\nexpression_matrix_in_sparse_form = pd.read_csv( dirname + ll[0], sep = '\\t', header = None)\nprint(np.round(time.time() - t0,2),'seconds passed' )\nprint('Each row in file has format - (i,j, value) - that means that count_matrix[i,j]=value')\nexpression_matrix_in_sparse_form[0] -= 1\nexpression_matrix_in_sparse_form[1] -= 1\ndisplay(expression_matrix_in_sparse_form)\n\nfrom scipy.sparse import csr_matrix\nm = csr_matrix((expression_matrix_in_sparse_form[2].values, (expression_matrix_in_sparse_form[0].values, \n                     expression_matrix_in_sparse_form[1].values))) # , shape=(len(genes), len(cells) ))#.toarray()\n\nprint(m.shape)\n","30a45e06":"m.shape\nm = m.transpose()\nm.shape","2580b0ae":"pData.head(2)","c5a4d286":"df = pd.DataFrame(index = pData.index, data = range(len(pData) ), columns = ['i'] )\ndf['n.umi'] = pData['n.umi']\ndf['Size_Factor'] = pData['Size_Factor']\n\nf = lambda x: x if not isinstance(x, str)  else x.split('_')[0]\ndf['drug'] = pData['top_oligo'].apply(f )\nf = lambda x: x if not isinstance(x, str)  else float(x.split('_')[1])\ndf['dose'] = pData['top_oligo'].apply(f )\nprint(np.sort( df['dose'].unique()), df['dose'].isnull().sum() )\nprint(( df['dose'].value_counts()) )\n\n\nm2 = m != 0\ndf['count genes expressed'] = np.array( m2.sum(axis = 1) ).ravel()\n\nl = np.array( [ x.startswith('MT-')  for x in genes[1]], dtype = bool )\nmask_MT_genes = l\nprint('Count mitochondrial genes:', l.sum(), ' out of: ', len(genes) )\nmt_expression_sum = np.array(m[:,mask_MT_genes].sum(axis=1)).ravel()\nnon_mt_expression_sum = np.array( m[:,~mask_MT_genes].sum(axis=1)).ravel()\nratio_mt2non_mt = (1+mt_expression_sum)\/(1+non_mt_expression_sum)\ndf['ratio mt2non_mt'] = ratio_mt2non_mt\n\n\ndf","b98e1373":"df.describe()","61c563cd":"# Consistency check. Check that 'n_umi' is exactly the m.sum(axis = 1)\n(m.sum(axis = 1).ravel() != df['n.umi'].values ).sum()","fd29e792":"df['drug'].fillna('NAN',inplace = True)\ndf['dose'].fillna('NAN',inplace = True)\ndf.groupby( ['drug','dose'])['dose'].count()","b3b74579":"\nif 1:\n    m2 = m.copy()\n    m2.data = np.log(1+m2.data)\n    m2 = m2.multiply( 1\/m2.sum(axis=1))\n    m2 = m2.tocsr()\n    str_preproc = 'LogThenNorm'\nelse:\n    m2 = m.multiply( 1\/m.sum(axis=1))\n    m2 = m2.tocsr()\n    m2.data = np.log(1+m2.data)\n    str_preproc = 'NormThenLog'\n\nprint(str_preproc)#  \nprint(m2[:4,:4].toarray())\nprint(m2.sum(axis = 1)[:4])\n    ","4fa3ba0b":"lg = list(genes[1].values)\nlen(lg), len(set(lg))","2221ad92":"flag_use_mygene = 1\nif flag_use_mygene:\n    !pip install mygene\n    import mygene\n    mg = mygene.MyGeneInfo()","f8228618":"list_selected_genes = ['ANAPC2' , 'CDC16' , 'CDC23' , 'CDC6' , 'CDT1' , 'DAD1' , 'EEF2' , 'GINS2' , 'POLA1' , 'POLE2' ,  'RPS2' , 'RRM1' , 'RRM2' , 'U2AF2' , 'WEE1' ]\n\n\nprint( len(list_selected_genes))\n\nfor g in list_selected_genes:\n    if g in genes[1].values:\n        pass; # print(g,'Yes - found in dataset genes list')\n    else:\n        print(g,'No - not found in dataset genes list')\n    \n    ","b6b173df":"fn  = '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/cell_cycle_genes_reactome_extended.txt'\nd = pd.read_csv(fn,header = None)\ncell_cycle_genes_reactome_extended = d[0].values\n","680e900b":"\nst = pd.DataFrame()\nfor g in list_selected_genes:\n    #print(g)\n    IX1 = np.where( genes[1] == g)[0]\n    if len(IX1) == 0:\n        st.loc[g,'Found'] = False\n        continue\n    st.loc[g,'Found'] = True\n    IX1 = IX1[0]\n    v = m[:,IX1].toarray().ravel()\n\n    st.loc[g,'Expression sum'] = v.sum()\n    st.loc[g,'Count Expressed cells'] = (v != 0 ).sum()\n    v = m2[:,IX1].toarray().ravel()\n    st.loc[g,'Expression sum normed'] = (v ).sum()\n    st.loc[g,'In cc reactome'] = g in cell_cycle_genes_reactome_extended\n    \n\nst.sort_values('Expression sum', ascending = False, inplace = True)\nst.head(20)\n","316d7ae4":"st.tail(20)\n","a7fbcdd0":"mm = st['Found'] == True\nlist_selected_genes_ordered = list(st[mm].index)\nprint( len(list_selected_genes_ordered), list_selected_genes_ordered )","3a4bce6d":"flag_use_mygene = 1\nif flag_use_mygene:\n    !pip install mygene\n    import mygene\n    mg = mygene.MyGeneInfo()","1496613e":"t0 = time.time()\n\nfor g in list_selected_genes:\n    #print(g)\n    IX1 = np.where( genes[1] == g)[0]\n    if len(IX1) == 0:\n        st.loc[g,'Found'] = False\n        continue\n    st.loc[g,'Found'] = True\n    IX1 = IX1[0]\n    ensembl_id = genes[0].iat[IX1].split('.')[0]\n    g_inf = mg.getgene(ensembl_id )\n    st.loc[g,'Count Pubmed'] = len( g_inf.get('generif',[]) ) #  g_inf.get('summary','No summary') )\n    st.loc[g,'Location'] = g_inf.get('map_location', np.nan ) #  g_inf.get('summary','No summary') )\n    st.loc[g,'Name'] = g_inf.get('name', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n    st.loc[g,'Summary'] = g_inf.get('summary', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n    if 0:\n        print( len( g_inf['generif']) )\n        print( g_inf['symbol'])\n        print( g_inf['map_location'])\n        print( 'alias', g_inf.get( 'alias','No' ) )\n        print( 'name', g_inf['name'])\n        print( g_inf['other_names'])\n        print()\n\nprint( time.time() - t0, 'seconds passed')\nst.head(20)\n        ","f458c6bd":"st.sort_values('Count Pubmed', ascending = False)","da319899":"g = 'HIST1H2AC' # S-phase of cell cycle expressed gene\n\ndef get_top_correlated_genes(g, n_top_expressed2look = 1000 , n_correlations2return = 3):\n    import time\n\n    IX1 = np.where( genes[1] == g)[0][0]\n    v1 = m2[:,IX1].toarray().ravel()\n\n    s = np.asarray( m.sum(axis = 0)).ravel()\n    IX = np.argsort(s)[::-1][:n_top_expressed2look] # indices for top expressed\n    v2 = m2[:,IX].toarray() # convert top expressed to numpy array from sparse \n\n    #t0 = time.time()\n    d = pd.DataFrame()\n    d['gene'] = genes[1].values[IX]\n    if (np.abs(v1).sum() != 0):\n        cr = np.corrcoef(v1,v2.T)[0,:][1:] # some strange reindex to extract correlation vector from matrix ( I do not know why matrix her)\n        #print(time.time()-t0,'seconds passed')\n    else:\n        cr = np.ones(len(d)) * np.nan\n    d['correlation'] = cr\n    d['Abs correlation'] = np.abs(cr)\n\n    d = d.sort_values('Abs correlation', ascending = False)\n\n    str_result = ''\n    cc = 0\n    for i in range(n_correlations2return+1):\n        if d['gene'].iat[i] != g:\n            str_result += d['gene'].iat[i]\n            str_result += ' '\n            str_result += str(np.round(d['correlation'].iat[i] ,2) )\n            str_result += ' '\n            cc += 1\n        if cc >= n_correlations2return:\n            break\n    df_corr_stat = d \n    return str_result, df_corr_stat\nimport time\nt0 = time.time()\nstr_result, df_corr_stat = get_top_correlated_genes(g)\nprint(time.time() - t0,'seconds passed')\nprint( str_result )\n\nprint()\nstr_result, df_corr_stat = get_top_correlated_genes(g , n_top_expressed2look = 10000 )\nprint(time.time() - t0,'seconds passed')\nprint( str_result )","1ba131ff":"t0 = time.time()\n\nfor g in list_selected_genes: # range( len(genes) ):\n    i = np.where(genes[1].values == g)[0][0] #.iat[i]\n    ensembl_id = genes[0].iat[i]\n    #i = np.where(st['gene'].values == g)\n    #IX = st.index[i]\n    \n    str_corr_info, df_corr_info = get_top_correlated_genes(g, n_top_expressed2look = 1000 , n_correlations2return = 5)\n    \n    st.loc[g,'Top Correlated'] = str_corr_info\n    \nprint(time.time()-t0,'seconds passed')    \nst.sort_values('Expression sum', ascending = False, inplace = True)\nst    ","9247b951":"t = pd.DataFrame()\nfor g in list_selected_genes:\n    IX = np.where(genes[1].values == g)[0][0]\n    t[g] = m2[:,IX].toarray().ravel()\n    print(g, m[:,IX].sum(), (m[:,IX] != 0).sum() )\n# display(t.describe())\ncm = t.corr()\ndisplay( np.round(cm,3) )","bed56316":"v = np.triu(cm,1).ravel()\nv= v[ v!= 0 ]\nplt.plot(np.sort(v))","28b09914":"from scipy.stats import chi2_contingency\n\ndef get_independence_pvalue_chi2(v1,v2, verbosity = 0 ):\n    tbl = np.zeros( (2,2) )\n    tbl[0,0] = (( v1 == 0 ) & (v2 == 0) ).sum()\n    tbl[0,1] = (( v1 == 0 ) & (v2 != 0) ).sum()\n    tbl[1,0] = (( v1 != 0 ) & (v2 == 0) ).sum()\n    tbl[1,1] = (( v1 != 0 ) & (v2 != 0) ).sum()\n\n    if verbosity > 0:\n        print( tbl )\n    g, p, dof, expctd = chi2_contingency(tbl, lambda_=\"log-likelihood\")\n    return p\n    \np = get_independence_pvalue_chi2(np.random.randint(0,2,size=1000) ,np.random.randint(0,2,size=1000) )\np","2dadfb1b":"a,b = np.where( np.triu(cm,1) > 0.1 )\n\nd = pd.DataFrame()\nfor i in range(len(a)):\n    d.loc[i,'Gene1'] = cm.index[a[i]] \n    d.loc[i,'Gene2'] = cm.index[b[i]] \n    d.loc[i,'Correlation'] = cm.iloc[a[i],b[i]]\n    d.loc[i,'Correlation Abs'] = np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[a[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v1 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene1 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[b[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v2 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene2 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    d.loc[i,'Correlation binarized'] = np.corrcoef(v1,v2)[0][1]\n    d.loc[i,'p-value Independence'] = get_independence_pvalue_chi2(v1,v2, verbosity = 0 )\n    \nd.sort_values('Correlation Abs',ascending = False).head(30)\n","d6d234fe":"a,b = np.where( np.triu(cm,1) < -.005 )\n\nd = pd.DataFrame()\nfor i in range(len(a)):\n    d.loc[i,'Gene1'] = cm.index[a[i]] \n    d.loc[i,'Gene2'] = cm.index[b[i]] \n    d.loc[i,'Correlation'] = cm.iloc[a[i],b[i]]\n    d.loc[i,'Correlation Abs'] = np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[a[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v1 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene1 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[b[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v2 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene2 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    d.loc[i,'Correlation binarized'] = np.corrcoef(v1,v2)[0][1]\n    d.loc[i,'p-value Independence'] = get_independence_pvalue_chi2(v1,v2, verbosity = 0 )\n    \nd.sort_values('Correlation Abs',ascending = False).head(30)\n","ee7f730d":"\nfor i,g in enumerate(st.index[:3]) : #list_selected_genes:\n    name = st.loc[st.index[i], 'Name']\n    IX1 = np.where( genes[1] == g)[0]\n    if len(IX1) == 0:\n        continue\n    IX1 = IX1[0]\n\n    fig = plt.figure(figsize = (20,4) )\n\n    fig.add_subplot(1,2,1)\n    v = m[:,IX1].toarray().ravel()\n    plt.plot(np.sort(v))\n    plt.grid()\n    plt.title('Expression sum ' + g + '\\n '+ name)\n    plt.xlabel('genes sorted by expression sum')\n\n    fig.add_subplot(1,2,2)\n    v = m2[:,IX1].toarray().ravel()\n    plt.plot(np.sort(v))\n    plt.grid()\n    plt.title('Expression normed sum ' + g + '\\n '+ name)\n    plt.xlabel('genes sorted by expression sum')\n    plt.show()\n","2299a2db":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\nstr_reducer = 'UMAP'\n#reducer = ncvis.NCVis()\n#reducer =  trimap.TRIMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [10]: # range(10,100,10):\n\n    m3 = m2.copy()#  != 0 # \n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m3 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\n\n    t0 = time.time()\n    r = svd.fit_transform(m3)\n    print(time.time() - t0, 'seconds passed on svd')\n    t0 = time.time()\n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed on ', str_reducer)\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by drug. count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['dose'].copy()\n    color_by[color_by == 'NAN'] = -1\n    color_by = color_by.astype(float)\n    color_by = np.log10(2+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + ' Color by log10 of dose. count_made_zeros='  +str( count_made_zeros )+ ' Non binarized' )\n    plt.show()\n    \n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","8ed25e79":"list_selected_genes_ordered = list(st.index)\nlen(list_selected_genes_ordered), list_selected_genes_ordered","3b36a0b2":"for g in list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = m[:,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2,3,4] )\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()    ","89ed74a0":"mask = df['dose'] == 0\nmask = mask.values\n\nprint(mask.sum())\n\nfor g in list_selected_genes_ordered[:5]: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by = m[mask,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0][mask],y=r[:,1][mask],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = m[mask,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2,3,4] )\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0][mask],y=r[:,1][mask],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()    ","9a205404":"print(time.time() - t0_start, 'seconds passed total')","2251afbf":"list_histone_genes_from_wiki = ['H1F0' , 'H1FNT' , 'H1FOO' , 'H1FX' ,\n'HIST1H1A' , 'HIST1H1B' , 'HIST1H1C' , 'HIST1H1D' , 'HIST1H1E' , 'HIST1H1T' ,\n'H2AFB1' , 'H2AFB2' , 'H2AFB3' , 'H2AFJ' , 'H2AFV' , 'H2AFX' , 'H2AFY' , 'H2AFY2' , 'H2AFZ' ,\n'HIST1H2AA' , 'HIST1H2AB' , 'HIST1H2AC' , 'HIST1H2AD' , 'HIST1H2AE' , 'HIST1H2AG' , 'HIST1H2AI' , 'HIST1H2AJ' , 'HIST1H2AK' , 'HIST1H2AL' , 'HIST1H2AM' ,\n'HIST2H2AA3' , 'HIST2H2AC' ,\n'H2BFM' , 'H2BFS' , 'H2BFWT' ,\n'HIST1H2BA' , 'HIST1H2BB' , 'HIST1H2BC' , 'HIST1H2BD' , 'HIST1H2BE' , 'HIST1H2BF' , 'HIST1H2BG' , 'HIST1H2BH' , 'HIST1H2BI' , \n'HIST1H2BJ' , 'HIST1H2BK' , 'HIST1H2BL' , 'HIST1H2BM' , 'HIST1H2BN' , 'HIST1H2BO' ,\n'HIST2H2BE' ,\n'HIST1H3A' , 'HIST1H3B' , 'HIST1H3C' , 'HIST1H3D' , 'HIST1H3E' , 'HIST1H3F' , 'HIST1H3G' , 'HIST1H3H' , 'HIST1H3I' , 'HIST1H3J' ,\n'HIST2H3C' ,\n'HIST3H3' ,\n'HIST1H4A' , 'HIST1H4B' , 'HIST1H4C' , 'HIST1H4D' , 'HIST1H4E' , 'HIST1H4F' , 'HIST1H4G' , 'HIST1H4H' , 'HIST1H4I' , 'HIST1H4J' , 'HIST1H4K' , 'HIST1H4L' ,\n'HIST4H4' ]\nlen(list_histone_genes_from_wiki)\nlen(list_histone_genes_from_wiki), len( set(list_histone_genes_from_wiki) & set(genes[1].values) )","61263dd4":"print(time.time() - t0_start, 'seconds passed total')","42d70b72":"# Plot expressions of top selected genes ","e325e935":"# Mygene stat on selected genes","a8ca5c19":"# Correlation analysis","96347978":"# What is about \n\nHere we analyse sciPlex2 subdataset \n\nList of essential genes common to all cell lines, S phase genes:\n[ANAPC2' , 'CDC16' , 'CDC23' , 'CDC6' , 'CDT1' , 'DAD1' , 'EEF2' , 'GINS2' , 'POLA1' , 'POLE2' , 'RPS2' , 'RRM1' , 'RRM2' , 'U2AF2' , 'WEE1' ]\n\nCell Div. 2019; 14: 15.\nPublished online 2019 Dec 23. doi: 10.1186\/s13008-019-0058-4\nPMCID: PMC6927170\nPMID: 31889988\nThe essentiality landscape of cell cycle related genes in human pluripotent and cancer cells\nhttps:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC6927170\/\n\n\n\n------------------\n\n#### Dataset reminder:\n\nIt is the second \"toy\" subdataset, while sciPlex3 is the main very huge subdataset.\n\nHere - only one cell line - A549 - human lung adenocarcinoma.\n\nExposed to 4 different compounds DEXA, nutlin, BMS, SAHA (HDAC).\n\n24 hours across SEVEN doses. \n\n24262 cells x 58347 genes\n\n\n'GSM4150377_sciPlex2_pData.txt' - contains information on: cell+drugs+doses+etc... There are 24262 rows - one row - one cell.\nThe index (=row number) of cell in that file corresponds to its index in the countmatrix (after transforming csv file with count matrix to sparse countmatrix)\n\nCount matrix (in list of edges format), cell ids, genes ids are in the files (respectively):\n'GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n \n ","45a8d366":"# Normalization and log ","9c966be1":"# get_top_correlated_genes","5c2d98f0":"# Some preliminary look on genes","24ce8ce7":"# List of selected genes","482c0605":"# Basic statistics on selected genes","f2269737":"# Create columns with information on each cell (drug, dose, etc)","098476a1":"# Visualization colored by genes","3cb28895":"# Histone genes info\n\njust to keep from previous notebook \n","2169422f":"# Load information files: genes annotations, cells info etc...","a44ccaa7":"# Load count matrix and convert it to sparse matrix csr_matrix","77097fab":"# UMAP visualization","58e89876":"# Look at duplicates"}}