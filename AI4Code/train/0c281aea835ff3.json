{"cell_type":{"6caae522":"code","74b1e649":"code","63aa8a8a":"code","a78325ac":"code","1e490dc2":"code","5b71ec03":"code","1e00e72a":"code","24796eab":"code","cfebee92":"code","fca6593b":"code","ac3c385c":"code","f4727184":"code","ccdef609":"code","a22f2b61":"code","b5f2f110":"code","77132a6a":"code","1bce83e2":"code","bc6a6004":"code","950f7c2b":"code","71ee60ba":"code","a571c6ec":"code","60154e69":"code","145ebb93":"code","901b15f1":"code","1df84c57":"code","9975a570":"code","e32ed46d":"markdown","91d8e415":"markdown","869d2140":"markdown","1be95461":"markdown","2bc4d9d1":"markdown"},"source":{"6caae522":"# Importing all necessary Python Libraries.\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","74b1e649":"# Uploading the training and testing datasets from Kaggle.\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","63aa8a8a":"train_data.info()","a78325ac":"# Checking for missing values.\ntrain_data.isnull().sum()","1e490dc2":"# Removing the Cabin feature due to its extensive missing values.\ntrain_data.drop('Cabin', axis=1, inplace=True)","5b71ec03":"# Replacing the missing embarked values with the value that appears the most frequently.\ntrain_data[\"Embarked\"].fillna(train_data['Embarked'].value_counts().idxmax(), inplace=True)","1e00e72a":"# Replacing the missing age values with the median age value.\ntrain_data[\"Age\"].fillna(train_data[\"Age\"].median(skipna=True), inplace=True)","24796eab":"train_data.isnull().sum()","cfebee92":"train_data.head()","fca6593b":"# Encoding the sex values.\ntrain_data['Sex'].replace(\"female\", 0,inplace=True)\ntrain_data['Sex'].replace(\"male\", 1,inplace=True)","ac3c385c":"# Encoding the embarked values.\ntrain_data['Embarked'].replace(\"S\", 0,inplace=True)\ntrain_data['Embarked'].replace(\"C\", 1,inplace=True)\ntrain_data['Embarked'].replace(\"Q\", 2,inplace=True)","f4727184":"train_data.dtypes","ccdef609":"test_data.isnull().sum()","a22f2b61":"test_data[\"Age\"].fillna(test_data[\"Age\"].median(skipna=True), inplace=True)\ntest_data[\"Fare\"].fillna(test_data[\"Fare\"].median(skipna=True), inplace=True)\ntest_data.drop('Cabin', axis=1, inplace=True)","b5f2f110":"test_data['Sex'].replace(\"female\", 0,inplace=True)\ntest_data['Sex'].replace(\"male\", 1,inplace=True)","77132a6a":"test_data['Embarked'].replace(\"S\", 0,inplace=True)\ntest_data['Embarked'].replace(\"C\", 1,inplace=True)\ntest_data['Embarked'].replace(\"Q\", 2,inplace=True)","1bce83e2":"test_data.dtypes","bc6a6004":"train_data.shape","950f7c2b":"test_data.shape","71ee60ba":"train_data.head()","a571c6ec":"outcome_data = train_data[\"Survived\"]\ntrain_data.drop([\"Survived\", \"Ticket\", \"Name\", \"PassengerId\"], axis=1, inplace=True)\ntest_data.drop([\"Name\",\"PassengerId\",\"Ticket\"], axis=1, inplace=True)","60154e69":"from sklearn.model_selection import train_test_split\n\n# Selecting the features and the outcome.\nX = train_data.values\ny = outcome_data.values\n\n# Splitting the data into training and test sets.\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1, stratify=y)","145ebb93":"from sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score, roc_auc_score, confusion_matrix, classification_report","901b15f1":"# Initializing a Support Vector Machine Classifier.\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(X_train, y_train)\n\n# Predicting from the test set.\ny_pred = classifier.predict(X_test)\n\n# Predicting from the train set.\ny_pred_train = classifier.predict(X_train)\n\n# Printing the accuracy with accuracy_score function.\nprint(\"Accuracy Train: \", accuracy_score(y_train, y_pred_train))\n\n# Printing the accuracy with accuracy_score function.\nprint(\"Accuracy Test: \", accuracy_score(y_test, y_pred))\n\n# Printing the confusion matrix.\nprint(\"\\nConfusion Matrix\\n\")\nprint(confusion_matrix(y_test, y_pred))","1df84c57":"last_clf = SVC(kernel = 'linear', random_state = 0)\n\nlast_clf.fit(train_data, outcome_data)","9975a570":"ids = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")[[\"PassengerId\"]].values\n\n# Making predictions.\npredictions = last_clf.predict(test_data.values)\n\n# Printing the predictions.\nprint(predictions)\n\n# Creating a dictionary with passenger ids and predictions.\ndf = {'PassengerId': ids.ravel(), 'Survived':predictions}\n\n# Creating a DataFrame named submission.\nsubmission = pd.DataFrame(df)\n\n# Displaying the first five rows of submission.\ndisplay(submission.head())\n\n# Saving the file.\nsubmission.to_csv(\"submission.csv\", index=False)","e32ed46d":"# Data","91d8e415":"In this notebook I utilize a simple Support Vector Machine classification algorithm to predict the passengers that survived the titatnic's crash and those who didn't.","869d2140":"# Support Vector Machine Predictions","1be95461":"# Random Forest Classification","2bc4d9d1":"# Importing Libraries"}}