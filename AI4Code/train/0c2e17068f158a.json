{"cell_type":{"41cb0b7c":"code","3da22ba2":"code","171049f6":"code","69b24478":"code","a8489604":"code","40c64c35":"code","cd7ae43b":"code","7c4d3e32":"code","71616b00":"code","2294c1c7":"code","1070a0ba":"code","e97f6fea":"code","1ae4dabc":"code","76e95e92":"code","6120f1a3":"code","15ac8055":"code","2c576807":"code","6cb327cc":"code","35c8566a":"code","88b87400":"code","ab540776":"code","645c7344":"code","f11ccbec":"code","f28df7ba":"code","4362abb1":"code","d584cb50":"code","9bb8f2f0":"code","c0df17a4":"code","5d007906":"code","e6cbe3bd":"code","be4f0677":"code","7dba3dff":"code","1c766f12":"code","27502de7":"code","f25c5c4c":"code","d584cdae":"code","276ec624":"code","c0d4307e":"code","4656bec2":"markdown"},"source":{"41cb0b7c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3da22ba2":"import pandas as pd\n# importing dataframes\ndistricts = pd.read_csv('..\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv')\nproducts = pd.read_csv('..\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv')","171049f6":"districts.head(20)","69b24478":"districts.tail\n","a8489604":"products.head(20)","40c64c35":"#first, we need to rename the column title \"LP ID\" to lp_id to merge both the products and engagement data in a single dataset \nproducts.rename(columns = {'LP ID': 'lp_id'}, inplace = True)\nproducts.head()\n\n","cd7ae43b":"import glob \npath = '..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data'\nengagement_files = glob.glob(os.path.join(path, \"*.csv\"))\nmy_list = []\nfor i in engagement_files:\n    my_file = pd.read_csv(i)\n    filename = os.path.splitext(i)\n    my_file['district_id'] = os.path.basename(filename[0])\n    my_list.append(my_file)\n    engagement_data = pd.concat(my_list)\n\nengagement_data","7c4d3e32":"print(districts.isnull().sum(axis=0))","71616b00":"import matplotlib.pyplot as plt\nimport seaborn as sns\n#counting the number of districts per states\nplt.figure(figsize=(10,12))\nsns.countplot(y ='state',data = districts,order=districts['state'].value_counts().index)\nplt.show()","2294c1c7":"#using a list of the USA states abbreviations\n#list available here: https:\/\/gist.github.com\/tlancon\/9794920a0c3a9990279de704f936050c  Kudos to tlancon\n\nus_states = {\n\t'Alabama': 'AL',\n\t'Alaska': 'AK',\n\t'Arizona': 'AZ',\n\t'Arkansas': 'AR',\n\t'California': 'CA',\n\t'Colorado': 'CO',\n\t'Connecticut': 'CT',\n\t'Delaware': 'DE',\n\t'District of Columbia': 'DC',\n\t'Florida': 'FL',\n\t'Georgia': 'GA',\n\t'Hawaii': 'HI',\n\t'Idaho': 'ID',\n\t'Illinois': 'IL',\n\t'Indiana': 'IN',\n\t'Iowa': 'IA',\n\t'Kansas': 'KS',\n\t'Kentucky': 'KY',\n\t'Louisiana': 'LA',\n\t'Maine': 'ME',\n\t'Maryland': 'MD',\n\t'Massachusetts': 'MA',\n\t'Michigan': 'MI',\n\t'Minnesota': 'MN',\n\t'Mississippi': 'MS',\n\t'Missouri': 'MO',\n\t'Montana': 'MT',\n\t'Nebraska': 'NE',\n\t'Nevada': 'NV',\n\t'New Hampshire': 'NH',\n\t'New Jersey': 'NJ',\n\t'New Mexico': 'NM',\n\t'New York': 'NY',\n\t'North Carolina': 'NC',\n\t'North Dakota': 'ND',\n\t'Ohio': 'OH',\n\t'Oklahoma': 'OK',\n\t'Oregon': 'OR',\n\t'Pennsylvania': 'PA',\n\t'Rhode Island': 'RI',\n\t'South Carolina': 'SC',\n\t'South Dakota': 'SD',\n\t'Tennessee': 'TN',\n\t'Texas': 'TX',\n\t'Utah': 'UT',\n\t'Vermont': 'VT',\n\t'Virginia': 'VA',\n\t'Washington': 'WA',\n\t'West Virginia': 'WV',\n\t'Wisconsin': 'WI',\n\t'Wyoming': 'WY'\n}","1070a0ba":"#replacing US state names by 2 letters state names\nfor i in districts.index:\n    for key in us_states:\n        if districts['state'][i] == key:\n            districts.at[i,'state']=us_states[key]","e97f6fea":"districts","1ae4dabc":"districts.dropna(inplace=True)\ndistricts.reset_index(drop=True, inplace=True)\ndistricts","76e95e92":"#separating black and hispanic data into two separate columns \n\nblack = []\nhispanic = []\nfor i in districts['pct_black\/hispanic']:\n    black.append(float(i.replace(\"[\",\"\").replace(']','').split(\", \")[0]))\n    hispanic.append(float(i.replace(\"[\",\"\").replace(']','').split(\", \")[1]))\ndistricts['black'] = black\ndistricts['hispanic'] = hispanic\n    \n","6120f1a3":"districts","15ac8055":"black_hispanic = districts[['state','black','hispanic']]\nblack_hispanic\n\n#We need to average the percentage of black and hispanic people for the different states are there are multiple occurences of certain states.","2c576807":"#creation of a new dataframe filled with NaN\n\nnew_dataframe = pd.DataFrame(columns=['state', 'black', 'hispanic'],index=range(100))\nnew_dataframe","6cb327cc":"new_dataframe","35c8566a":"#for each state, we insert the percentages of hispanic and black people to \"newdataframe\". If the state has already been inserted, then the values are averaged.\n\nimport numpy as np\ncount1 = 0\nfor i in black_hispanic['state']:\n    count = 0\n    while count1 < 87:\n        if str(black_hispanic['state'].loc[count1]) == str(new_dataframe['state'].loc[count]):\n            new_dataframe.at[count,'black'] = (black_hispanic['black'].loc[count1] + new_dataframe['black'].loc[count])\/2\n            new_dataframe.at[count,'hispanic'] = (black_hispanic['hispanic'].loc[count1] + new_dataframe['hispanic'].loc[count])\/2\n            count = 0\n            count1 = count1+1\n        if pd.isna(new_dataframe['state'].loc[count]) == True:\n            new_dataframe.at[count,'state'] = black_hispanic['state'].loc[count1]\n            new_dataframe.at[count,'black'] = black_hispanic['black'].loc[count1]\n            new_dataframe.at[count,'hispanic'] = black_hispanic['hispanic'].loc[count1]\n            count = 0\n            count1 = count1 + 1\n        if str(black_hispanic['state'].loc[count1]) != str(new_dataframe['state'].loc[count]):\n            count = count +1\n            \n   \n       ","88b87400":"\nnew_dataframe =  new_dataframe.dropna()\nnew_dataframe","ab540776":"#final list of states\n\nfor i in new_dataframe['state']:\n    print(i)","645c7344":"#converting values to float\n\nnew_dataframe[['black','hispanic']]=new_dataframe[['black','hispanic']].apply(pd.to_numeric) ","f11ccbec":"#values are now converted\n\nnew_dataframe['black'].dtype","f28df7ba":"#plotting the averaged percentage of black people per state on a US map.\n\nimport plotly.express as px\n\nfig = px.scatter_geo(\n    new_dataframe, locations=\"state\", locationmode='USA-states',\n    scope=\"usa\",\n    color='black', \n    size='black', hover_name=\"state\", \n    range_color= [0, 1], \n    projection=\"albers usa\", \n    title='Percentage of black people per US State', \n    color_continuous_scale = \"Blues\"\n)\n\nfig.show()","4362abb1":"#plotting the averaged percentage of hispanic people per state on a US map.\n\nimport plotly.express as px\n\nfig = px.scatter_geo(\n    new_dataframe, locations=\"state\", locationmode='USA-states',\n    scope=\"usa\",\n    color='hispanic', \n    size='hispanic', hover_name=\"state\", \n    range_color= [0, 1], \n    projection=\"albers usa\", \n    title='Percentage of hispanic people per US State', \n    color_continuous_scale = \"Blues\"\n)\n\nfig.show()","d584cb50":"#joining the datasets to include engagement data\n\nengagement_data[\"district_id\"] = engagement_data[\"district_id\"].astype(str).astype(int)\ndistricts_engagement = pd.merge(districts, engagement_data, left_on='district_id', right_on='district_id')\ndistricts_engagement.head(20)","9bb8f2f0":"#grouping by state and calculating the averaged engagement\n\navg_engagement_df = pd.DataFrame()\navg_engagement = districts_engagement.groupby('state')['engagement_index'].mean().reset_index(name='avg_engagement') #averaged engagement per state\n#avg_engagement_df['avg_engagement'] = avg_engagement","c0df17a4":"avg_engagement","5d007906":"#plotting the averaged engagement per state\n\nimport plotly.express as px\n\nfig = px.scatter_geo(\n    avg_engagement, locations=\"state\", locationmode='USA-states',\n    scope=\"usa\",\n    color='avg_engagement', \n    size='avg_engagement', hover_name=\"state\", \n    range_color= [0, 1], \n    projection=\"albers usa\", \n    title='Averaged engagement per US State', \n    color_continuous_scale = \"Blues\"\n)\n\nfig.show()","e6cbe3bd":"new_dataframe","be4f0677":"#inserting the engagement data to new_dataframe containing the averaged percentage of black and hispanic people per state\nfor i in new_dataframe['state']:\n    for j in avg_engagement['state']:\n        if i == j:\n            new_dataframe['avg_engagement']=avg_engagement['avg_engagement']","7dba3dff":"#resulting dataset \n\nnew_dataframe","1c766f12":"#plotting engagement per state \n\nimport matplotlib.pyplot as plt\n\nax = plt.subplot(111)\n\n\nx = new_dataframe['state']\ny = new_dataframe['avg_engagement']\n\nax.bar(x,y,color='r')\n\n\nax.autoscale(tight=True)","27502de7":"#plotting percentage of black people per state\n\nimport matplotlib.pyplot as plt\n\nax = plt.subplot(111)\n\ny = new_dataframe['black']\nx = new_dataframe['state']\n\n\nax.bar(x,y,color='b')\n\nax.autoscale(tight=True)\n\n#it looks like the states having a higher percentage of black people are having less engagement.","f25c5c4c":"#correlation between averaged percentage of black people and averaged engagement\n\nnew_dataframe[['avg_engagement','black']].corr(method='pearson') #looks like black people are less likely to engage","d584cdae":"#plotting the percentage of hispanic people per state\n\nimport matplotlib.pyplot as plt\n\nax = plt.subplot(111)\n\ny = new_dataframe['hispanic']\nx = new_dataframe['state']\n\n\nax.bar(x,y,color='g')\n\nax.autoscale(tight=True)\n\n#The same applies to the states having a higher percentage of hispanic people.","276ec624":"#correlation between averaged percentage of hispanic people and averaged engagement\n\nnew_dataframe[['avg_engagement','hispanic']].corr(method='pearson') #looks like hispanic people are less likely to engage","c0d4307e":"#contrast between averaged percentage of black and hispanic people and the averaged engagement\n\nimport plotly.express as px\nfig = px.scatter_geo(\n    new_dataframe, locations=\"state\", locationmode='USA-states',\n    scope=\"usa\",\n    color='avg_engagement', \n    size='avg_engagement', hover_name=\"state\", \n    range_color= [0, 1], \n    projection=\"albers usa\", \n    title='Averaged engagement per US State', \n    color_continuous_scale = \"Blues\"\n)\n\nfig2 = px.scatter_geo(\n    new_dataframe, locations=\"state\", locationmode='USA-states',\n    scope=\"usa\",\n    color='black', \n    size='black', hover_name=\"state\", \n    range_color= [0, 1], \n    projection=\"albers usa\", \n    title='Averaged percentage of black people per US State', \n    color_continuous_scale = \"Blues\"\n)\n\nfig3 = px.scatter_geo(\n    new_dataframe, locations=\"state\", locationmode='USA-states',\n    scope=\"usa\",\n    color='hispanic', \n    size='hispanic', hover_name=\"state\", \n    range_color= [0, 1], \n    projection=\"albers usa\", \n    title='Averaged percentage of hispanic people per US State', \n    color_continuous_scale = \"Blues\"\n)\nfig.show()\nfig2.show()\nfig3.show()","4656bec2":"The engagement data are aggregated at school district level, and each file in the folder engagement_data represents data from one school district. The 4-digit file name represents district_id which can be used to link to district information in district_info.csv. The lp_id can be used to link to product information in product_info.csv."}}