{"cell_type":{"41560d86":"code","6ece129b":"code","7b40dc7b":"code","35c0194c":"code","5a9496af":"code","2c84a99f":"code","6da44706":"code","7dc03bb2":"code","53bab4a9":"code","4a4802ff":"code","a639a72c":"code","f05d76de":"code","ea53c1ac":"code","741902ca":"code","16c69dad":"code","6db7324b":"code","46041168":"code","44e5aaec":"code","5731234c":"code","739a3a45":"code","81996b51":"code","e699d0bd":"code","1fad8426":"code","772d283f":"code","539ee513":"code","7acc8390":"code","047dfbc4":"code","c2ec5279":"code","f91413ec":"code","c6e83a47":"code","881a2948":"code","f9a57464":"code","bad5f51b":"code","a93c51bb":"code","146a50cb":"code","9a8360d2":"code","aede422d":"code","411042a1":"code","9b1d09b0":"code","a01326d2":"code","05e3046b":"code","9af4e69d":"code","23a59b20":"code","f5c2f746":"code","7a247c68":"code","30678de1":"code","d5118e0a":"code","bd075788":"code","7a9f1ba4":"code","eb499071":"code","a25fe26b":"code","7bcad6ea":"code","0232731b":"code","7d5c6b17":"code","09010eaf":"code","1b0b4f7e":"code","a34e19a5":"code","a746eb2b":"code","2e7983bc":"code","289a02a7":"code","377c80db":"code","8e4be116":"code","10897523":"code","5304cf53":"code","47e17036":"code","ab1ef2c7":"code","632a87dc":"code","d909b98d":"code","10d2dc55":"code","56a014a2":"code","9e6a7799":"code","4b7c2e97":"code","dec6bc2f":"code","4ad07aad":"code","a4d80379":"code","7fc9d248":"code","a82df2b0":"code","210335a9":"code","b767f490":"code","53316c10":"code","e4532c96":"code","2ff0e5ea":"code","7171eb94":"code","24c7ea9a":"code","73fa4984":"code","85312b46":"code","e0851cf5":"code","4e92393c":"code","86ce19a6":"code","d75f9d19":"code","76dcc7d0":"code","9440a910":"code","1a16685c":"code","cd1a30c1":"code","51d7ef99":"code","b6f35eef":"code","45695acd":"code","27e878c1":"code","a6c739e5":"code","43623760":"code","0d99babc":"code","a263ce92":"code","6c021352":"code","e48b8b9e":"code","94224db3":"code","d07ea096":"code","5fc2a105":"code","d7c9382b":"code","0b195787":"code","adb00dd5":"code","d9a691e2":"code","87c80810":"code","c4a02fa9":"code","cca3c366":"markdown","4f2b4609":"markdown","0fd74581":"markdown","05096e7a":"markdown","17133b65":"markdown","c06a4bcd":"markdown","4f81ca48":"markdown","a2834c80":"markdown","93d6601f":"markdown","facb8599":"markdown","e582ca24":"markdown","35a1649b":"markdown","ec2d2edb":"markdown"},"source":{"41560d86":"# import python standard library\nimport gc, itertools\n\n# import data manipulation library\nimport numpy as np\nimport pandas as pd\n\n# import data visualization library\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# import sklearn data preprocessing\nfrom sklearn.preprocessing import LabelEncoder\n\n# import xgboost model class\nimport xgboost as xgb\n\n# import sklearn model selection\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\n\n# import sklearn model evaluation regression metrics\nfrom sklearn.metrics import mean_squared_error","6ece129b":"# pandas options\npd.options.display.max_rows = 10","7b40dc7b":"# acquiring training and testing data\ndf_train = pd.read_csv('..\/input\/sales_train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","35c0194c":"# acquiring supplemental information\ndf_items = pd.read_csv('..\/input\/items.csv')\ndf_categories = pd.read_csv('..\/input\/item_categories.csv')\ndf_shops = pd.read_csv('..\/input\/shops.csv')","5a9496af":"# visualize head of the training data\ndf_train.head(n=5)","2c84a99f":"# visualize tail of the testing data\ndf_test.tail(n=5)","6da44706":"# visualize head of the supplemental information about the items\/products\ndf_items.head(n=5)","7dc03bb2":"# visualize head of the supplemental information about the items categories\ndf_categories.head(n=5)","53bab4a9":"# visualize head of the supplemental information about the shops\ndf_shops.head(n=5)","4a4802ff":"# combine training and testing dataframe\ndf_train['datatype'], df_test['datatype'] = 'training', 'testing'\ndf_train.insert(0, 'ID', np.nan)\ndf_test.insert(1, 'date', '01.11.2015')\ndf_test.insert(2, 'date_block_num', 34)\ndf_test.insert(df_test.shape[1] - 1, 'item_price', np.nan)\ndf_test.insert(df_test.shape[1] - 1, 'item_cnt_day', np.nan)\ndf_data = pd.concat([df_train, df_test], ignore_index=False)","a639a72c":"# describe training and testing data\ndf_data.describe(include='all')","f05d76de":"# list all features type number\ncol_number = df_data.select_dtypes(include=['number']).columns.tolist()\nprint('features type number:\\n items %s\\n length %d' %(col_number, len(col_number)))\n\n# list all features type object\ncol_object = df_data.select_dtypes(include=['object']).columns.tolist()\nprint('features type object:\\n items %s\\n length %d' %(col_object, len(col_object)))","ea53c1ac":"# feature exploration: histogram of all numeric features\n_ = df_data.hist(bins=20, figsize=(10, 6))","741902ca":"# feature extraction: fix the duplicated shop id\ndf_data.loc[df_data['shop_id'] == 0, 'shop_id'] = 57\ndf_data.loc[df_data['shop_id'] == 1, 'shop_id'] = 58\ndf_data.loc[df_data['shop_id'] == 11, 'shop_id'] = 10","16c69dad":"# feature extraction: set maximum and minimum limit for item price\ndf_data.loc[df_data['item_price'] < 0, 'item_price'] = df_data.loc[(df_data['date_block_num'] == 4) & (df_data['shop_id'] == 32) & (df_data['item_price'] > 0), 'item_price'].median()\ndf_data = df_data[((df_data['item_price'] >= 0) & (df_data['item_price'] <= 100000)) | (df_data['item_price'].isna())]","6db7324b":"# feature extraction: set maximum and minimum limit for number of products sold\ndf_data = df_data[(df_data['item_cnt_day'] <= 1000) | (df_data['item_cnt_day'].isna())]","46041168":"# feature exploration: histogram of all numeric features\n_ = df_data.hist(bins=20, figsize=(10, 6))","44e5aaec":"# feature exploration: zero number of products sold\ndf_data[df_data['item_cnt_day'] == 0].head()","5731234c":"# feature extraction: cross dataframe\nlist_of_cross = []\nfor dateblocknum in df_data['date_block_num'].unique():\n    shops = df_data.loc[df_data['date_block_num'] == dateblocknum, 'shop_id'].unique()\n    items = df_data.loc[df_data['date_block_num'] == dateblocknum, 'item_id'].unique()\n    list_of_cross.append(np.array(list(itertools.product(*[[dateblocknum], shops, items]))))\ndf_cross = pd.DataFrame(np.vstack(list_of_cross), columns=['date_block_num', 'shop_id', 'item_id'])","739a3a45":"# describe cross dataframe\ndf_cross.describe(include='all')","81996b51":"# feature extraction: block dataframe\ndf_block = df_data.groupby(['date_block_num', 'shop_id', 'item_id'], as_index=False).agg({\n    'item_price': 'mean', 'item_cnt_day': sum\n}).rename(columns={'item_cnt_day': 'item_cnt_month'})","e699d0bd":"# describe block dataframe for month 0 - 33\ndf_block[df_block['date_block_num'] != 34].describe(include='all')","1fad8426":"# describe block dataframe for month 34\ndf_block[df_block['date_block_num'] == 34].describe(include='all')","772d283f":"# feature extraction: merge block and cross dataframe\ndf_block = pd.merge(df_cross, df_block, how='left', left_on=['date_block_num', 'shop_id', 'item_id'], right_on=['date_block_num', 'shop_id', 'item_id'])","539ee513":"# feature extraction: number of products sold fillna by 0\ndf_block['item_cnt_month'] = df_block['item_cnt_month'].fillna(0)","7acc8390":"# feature extraction: merge with supplemental information about the items\/products\ndf_block = pd.merge(df_block, df_items, how='left', left_on='item_id', right_on='item_id')","047dfbc4":"# feature extraction: merge with supplemental information about the items categories\ndf_block = pd.merge(df_block, df_categories, how='left', left_on='item_category_id', right_on='item_category_id')","c2ec5279":"# feature extraction: merge with supplemental information about the shops\ndf_block = pd.merge(df_block, df_shops, how='left', left_on='shop_id', right_on='shop_id')","f91413ec":"# feature exploration: item id\ndf_block['item_id'].value_counts()","c6e83a47":"# feature exploration: category id\ndf_block['item_category_id'].value_counts()","881a2948":"# feature exploration: shop id\ndf_block['shop_id'].value_counts()","f9a57464":"# feature exploration: item id 20949\ndf_items.loc[df_items['item_id'] == 20949, 'item_category_id']","bad5f51b":"# feature exploration: category id 71\ndf_items.loc[df_items['item_category_id'] == 71, 'item_id']","a93c51bb":"# feature exploration: shop id 31\ndf_block.loc[df_block['shop_id'] == 31, 'item_category_id'].value_counts()","146a50cb":"# feature exploration: category id 40\ndf_block.loc[df_block['item_category_id'] == 40, 'item_id'].value_counts()","9a8360d2":"# feature exploration: category id 40\ndf_block.loc[df_block['item_category_id'] == 40, 'shop_id'].value_counts()","aede422d":"# feature exploration: item id happened in month 33\ndf_block.loc[df_block['date_block_num'] == 33, 'item_id'][~df_block.loc[df_block['date_block_num'] == 33, 'item_id'].isin(df_block.loc[df_block['date_block_num'] < 33, 'item_id'])].value_counts()","411042a1":"# feature exploration: item id happened in month 34\ndf_block.loc[df_block['date_block_num'] == 34, 'item_id'][~df_block.loc[df_block['date_block_num'] == 34, 'item_id'].isin(df_block.loc[df_block['date_block_num'] < 34, 'item_id'])].value_counts()","9b1d09b0":"# feature exploration: category id happened in month 33\ndf_block.loc[df_block['date_block_num'] == 33, 'item_category_id'][~df_block.loc[df_block['date_block_num'] == 33, 'item_category_id'].isin(df_block.loc[df_block['date_block_num'] < 33, 'item_category_id'])].value_counts()","a01326d2":"# feature exploration: category id happened in month 34\ndf_block.loc[df_block['date_block_num'] == 34, 'item_category_id'][~df_block.loc[df_block['date_block_num'] == 34, 'item_category_id'].isin(df_block.loc[df_block['date_block_num'] < 34, 'item_category_id'])].value_counts()","05e3046b":"# feature exploration: shop id happened in month 33\ndf_block.loc[df_block['date_block_num'] == 33, 'shop_id'][~df_block.loc[df_block['date_block_num'] == 33, 'shop_id'].isin(df_block.loc[df_block['date_block_num'] < 33, 'shop_id'])].value_counts()","9af4e69d":"# feature exploration: shop id happened in month 34\ndf_block.loc[df_block['date_block_num'] == 34, 'shop_id'][~df_block.loc[df_block['date_block_num'] == 34, 'shop_id'].isin(df_block.loc[df_block['date_block_num'] < 34, 'shop_id'])].value_counts()","23a59b20":"# memory clean-up\ndel df_categories, df_cross, df_data, df_items, df_shops\ngc.collect()","f5c2f746":"# feature extraction: year\ndf_block['year'] = df_block['date_block_num'] \/\/ 12","7a247c68":"# feature extraction: month\ndf_block['month'] = df_block['date_block_num'] % 12","30678de1":"# feature extraction: day\nday = pd.Series([31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\ndf_block['day'] = df_block['month'].map(day)","d5118e0a":"# feature extraction: city\ndf_block.loc[df_block['shop_name'] == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"', 'shop_name'] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'\ndf_block['city'] = df_block['shop_name'].str.split(' ').apply(lambda x: x[0])\ndf_block.loc[df_block['city'] == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\ndf_block['city'].value_counts()","bd075788":"# feature extraction: city_code\ndf_block['city_code'] = LabelEncoder().fit_transform(df_block['city'])","7a9f1ba4":"# feature extraction: type\ndf_block['type'] = df_block['item_category_name'].str.split('-').apply(lambda x: x[0].strip())\ndf_block['type'].value_counts()","eb499071":"# feature extraction: type_code\ndf_block['type_code'] = LabelEncoder().fit_transform(df_block['type'])","a25fe26b":"# feature extraction: subtype\ndf_block['subtype'] = df_block['item_category_name'].str.split('-').apply(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\ndf_block['subtype'].value_counts()","7bcad6ea":"# feature extraction: subtype_code\ndf_block['subtype_code'] = LabelEncoder().fit_transform(df_block['subtype'])","0232731b":"# describe block dataframe for month 0 - 33\ndf_block[df_block['date_block_num'] != 34].describe(include='all')","7d5c6b17":"# describe block dataframe for month 34\ndf_block[df_block['date_block_num'] == 34].describe(include='all')","09010eaf":"# feature exploration: item price and number of products sold by item id 20949\nfig, axes = plt.subplots(figsize=(20 , 6), ncols=1, nrows=2)\naxes = axes.flatten()\nsns.scatterplot(x='date_block_num', y='item_cnt_month', data=df_block[df_block['item_id'] == 20949].groupby(['date_block_num'], as_index=False).agg({'item_cnt_month': 'mean'}), ax=axes[0])\nsns.boxplot(x='date_block_num', y='item_price', data=df_block[df_block['item_id'] == 20949], ax=axes[1])","1b0b4f7e":"# feature exploration: item price and number of products sold by category id 71\nfig, axes = plt.subplots(figsize=(20 , 6), ncols=1, nrows=2)\naxes = axes.flatten()\nsns.scatterplot(x='date_block_num', y='item_cnt_month', data=df_block[df_block['item_category_id'] == 71].groupby(['date_block_num'], as_index=False).agg({'item_cnt_month': 'mean'}), ax=axes[0])\nsns.boxplot(x='date_block_num', y='item_price', data=df_block[df_block['item_category_id'] == 71], ax=axes[1])","a34e19a5":"# feature exploration: item price and number of products sold by item id 8778\nfig, axes = plt.subplots(figsize=(20 , 6), ncols=1, nrows=2)\naxes = axes.flatten()\nsns.scatterplot(x='date_block_num', y='item_cnt_month', data=df_block[df_block['item_id'] == 8778].groupby(['date_block_num'], as_index=False).agg({'item_cnt_month': 'mean'}), ax=axes[0])\nsns.boxplot(x='date_block_num', y='item_price', data=df_block[df_block['item_id'] == 8778], ax=axes[1])","a746eb2b":"# feature exploration: item price and number of products sold by item id 8778 and shop id 31\nfig, axes = plt.subplots(figsize=(20 , 6), ncols=1, nrows=2)\naxes = axes.flatten()\nsns.scatterplot(x='date_block_num', y='item_cnt_month', data=df_block[(df_block['item_id'] == 8778) & (df_block['shop_id'] == 31)].groupby(['date_block_num'], as_index=False).agg({'item_cnt_month': 'mean'}), ax=axes[0])\nsns.boxplot(x='date_block_num', y='item_price', data=df_block[(df_block['item_id'] == 8778) & (df_block['shop_id'] == 31)], ax=axes[1])","2e7983bc":"# feature exploration: item price and number of products sold by item id 8778 and shop id 25\nfig, axes = plt.subplots(figsize=(20 , 6), ncols=1, nrows=2)\naxes = axes.flatten()\nsns.scatterplot(x='date_block_num', y='item_cnt_month', data=df_block[(df_block['item_id'] == 8778) & (df_block['shop_id'] == 25)].groupby(['date_block_num'], as_index=False).agg({'item_cnt_month': 'mean'}), ax=axes[0])\nsns.boxplot(x='date_block_num', y='item_price', data=df_block[(df_block['item_id'] == 8778) & (df_block['shop_id'] == 25)], ax=axes[1])","289a02a7":"# feature exploration: item price and number of products sold by item id 19602\nfig, axes = plt.subplots(figsize=(20 , 6), ncols=1, nrows=2)\naxes = axes.flatten()\nsns.scatterplot(x='date_block_num', y='item_cnt_month', data=df_block[df_block['item_id'] == 19602].groupby(['date_block_num'], as_index=False).agg({'item_cnt_month': 'mean'}), ax=axes[0])\nsns.boxplot(x='date_block_num', y='item_price', data=df_block[df_block['item_id'] == 19602], ax=axes[1])","377c80db":"# feature exploration: item price and number of products sold by item id 19602 and shop id 31\nfig, axes = plt.subplots(figsize=(20 , 6), ncols=1, nrows=2)\naxes = axes.flatten()\nsns.scatterplot(x='date_block_num', y='item_cnt_month', data=df_block[(df_block['item_id'] == 19602) & (df_block['shop_id'] == 31)].groupby(['date_block_num'], as_index=False).agg({'item_cnt_month': 'mean'}), ax=axes[0])\nsns.boxplot(x='date_block_num', y='item_price', data=df_block[(df_block['item_id'] == 19602) & (df_block['shop_id'] == 31)], ax=axes[1])","8e4be116":"# feature exploration: item price and number of products sold by item id 19602 and shop id 25\nfig, axes = plt.subplots(figsize=(20 , 6), ncols=1, nrows=2)\naxes = axes.flatten()\nsns.scatterplot(x='date_block_num', y='item_cnt_month', data=df_block[(df_block['item_id'] == 19602) & (df_block['shop_id'] == 25)].groupby(['date_block_num'], as_index=False).agg({'item_cnt_month': 'mean'}), ax=axes[0])\nsns.boxplot(x='date_block_num', y='item_price', data=df_block[(df_block['item_id'] == 19602) & (df_block['shop_id'] == 25)], ax=axes[1])","10897523":"# feature exploration: item price and number of products sold by category id 40\nfig, axes = plt.subplots(figsize=(20 , 6), ncols=1, nrows=2)\naxes = axes.flatten()\nsns.scatterplot(x='date_block_num', y='item_cnt_month', data=df_block[df_block['item_category_id'] == 40].groupby(['date_block_num'], as_index=False).agg({'item_cnt_month': 'mean'}), ax=axes[0])\nsns.boxplot(x='date_block_num', y='item_price', data=df_block[df_block['item_category_id'] == 40], ax=axes[1])","5304cf53":"# feature exploration: item price and number of products sold by category id 40 and shop id 31\nfig, axes = plt.subplots(figsize=(20 , 6), ncols=1, nrows=2)\naxes = axes.flatten()\nsns.scatterplot(x='date_block_num', y='item_cnt_month', data=df_block[(df_block['item_category_id'] == 40) & (df_block['shop_id'] == 31)].groupby(['date_block_num'], as_index=False).agg({'item_cnt_month': 'mean'}), ax=axes[0])\nsns.boxplot(x='date_block_num', y='item_price', data=df_block[(df_block['item_category_id'] == 40) & (df_block['shop_id'] == 31)], ax=axes[1])","47e17036":"# feature exploration: item price and number of products sold by category id 40 and shop id 25\nfig, axes = plt.subplots(figsize=(20 , 6), ncols=1, nrows=2)\naxes = axes.flatten()\nsns.scatterplot(x='date_block_num', y='item_cnt_month', data=df_block[(df_block['item_category_id'] == 40) & (df_block['shop_id'] == 25)].groupby(['date_block_num'], as_index=False).agg({'item_cnt_month': 'mean'}), ax=axes[0])\nsns.boxplot(x='date_block_num', y='item_price', data=df_block[(df_block['item_category_id'] == 40) & (df_block['shop_id'] == 25)], ax=axes[1])","ab1ef2c7":"# memory clean-up\ndf_block = df_block.drop(['item_name', 'item_category_name', 'shop_name', 'city', 'type', 'subtype'], axis=1)\ngc.collect()","632a87dc":"# feature extraction: shifted features for item price\nfor i in [1, 2, 3, 4, 5, 6]:\n    shifted = df_block[['date_block_num', 'shop_id', 'item_id', 'item_price']].copy(deep=True)\n    shifted.columns = ['date_block_num', 'shop_id','item_id', 'item_price_shift' + str(i)]\n    shifted['date_block_num'] = shifted['date_block_num'] + i\n    df_block = pd.merge(df_block, shifted, how='left', on=['date_block_num', 'shop_id', 'item_id'])","d909b98d":"# feature extraction: statistic features for item price by item\ndf_block['item_price_by_item_mean'] = df_block.groupby(['item_id'])['item_price'].transform('mean').astype(np.float16)","10d2dc55":"# feature extraction: statistic shifted features for item price by item and date block\nfor i in [1, 2, 3, 4, 5, 6]: df_block['item_price_by_item_date_mean_shift' + str(i)] = df_block.groupby(['date_block_num', 'item_id'])['item_price_shift' + str(i)].transform('mean').astype(np.float16)","56a014a2":"# feature extraction: statistic shifted features for delta item price by item and date block\nfor i in [1, 2, 3, 4, 5, 6]: df_block['delta_item_price_by_item_date_mean_shift' + str(i)] = (df_block['item_price_by_item_date_mean_shift' + str(i)] - df_block['item_price_by_item_mean']) \/ df_block['item_price_by_item_mean']\n\ndef select_nonnull(row):\n    for i in [1, 2, 3, 4, 5, 6]:\n        if not(np.isnan(row['delta_item_price_by_item_date_mean_shift' + str(i)])): return row['delta_item_price_by_item_date_mean_shift' + str(i)]\n    return 0\ndf_block['delta_item_price_by_item_date_mean_shift'] = df_block.apply(select_nonnull, axis=1)","9e6a7799":"# memory clean-up\ndf_block = df_block.drop(['item_price_by_item_date_mean_shift' + str(i) for i in [1, 2, 3, 4, 5, 6]], axis=1)\ndf_block = df_block.drop(['delta_item_price_by_item_date_mean_shift' + str(i) for i in [1, 2, 3, 4, 5, 6]], axis=1)\ngc.collect()","4b7c2e97":"# feature extraction: set maximum and minimum limit for number of products sold\ndf_block['item_cnt_month'] = df_block['item_cnt_month'].clip(0 ,20)","dec6bc2f":"# feature extraction: shifted features for number of products sold\nfor i in [1, 2, 3, 6, 12]:\n    shifted = df_block[['date_block_num', 'shop_id', 'item_id', 'item_cnt_month']].copy(deep=True)\n    shifted.columns = ['date_block_num', 'shop_id','item_id', 'item_cnt_month_shift' + str(i)]\n    shifted['date_block_num'] = shifted['date_block_num'] + i\n    df_block = pd.merge(df_block, shifted, how='left', on=['date_block_num', 'shop_id', 'item_id'])","4ad07aad":"# feature extraction: statistic shifted features for number of products sold by date block\nfor i in [1]: df_block['item_cnt_month_by_date_mean_shift' + str(i)] = df_block.groupby(['date_block_num'])['item_cnt_month_shift' + str(i)].transform('mean').astype(np.float16)","a4d80379":"# feature extraction: statistic shifted features for number of products sold by item and date block\nfor i in [1, 2, 3, 6, 12]: df_block['item_cnt_month_by_item_date_mean_shift' + str(i)] = df_block.groupby(['date_block_num', 'item_id'])['item_cnt_month_shift' + str(i)].transform('mean').astype(np.float16)","7fc9d248":"# feature extraction: statistic shifted features for number of products sold by category and date block\nfor i in [1, 2, 3, 6, 12]: df_block['item_cnt_month_by_category_date_mean_shift' + str(i)] = df_block.groupby(['date_block_num', 'item_category_id'])['item_cnt_month_shift' + str(i)].transform('mean').astype(np.float16)","a82df2b0":"# feature extraction: statistic shifted features for number of products sold by shop and date block\nfor i in [1, 2, 3, 6, 12]: df_block['item_cnt_month_by_shop_date_mean_shift' + str(i)] = df_block.groupby(['date_block_num', 'shop_id'])['item_cnt_month_shift' + str(i)].transform('mean').astype(np.float16)","210335a9":"# feature extraction: statistic shifted features for number of products sold by city and date block\nfor i in [1]: df_block['item_cnt_month_by_city_date_mean_shift' + str(i)] = df_block.groupby(['date_block_num', 'city_code'])['item_cnt_month_shift' + str(i)].transform('mean').astype(np.float16)","b767f490":"# feature extraction: statistic shifted features for number of products sold by item, city and date block\nfor i in [1]: df_block['item_cnt_month_by_item_city_date_mean_shift' + str(i)] = df_block.groupby(['date_block_num', 'item_id', 'city_code'])['item_cnt_month_shift' + str(i)].transform('mean').astype(np.float16)","53316c10":"# feature extraction: statistic shifted features for number of products sold by category, shop and date block\nfor i in [1]: df_block['item_cnt_month_by_category_shop_date_mean_shift' + str(i)] = df_block.groupby(['date_block_num', 'item_category_id', 'shop_id'])['item_cnt_month_shift' + str(i)].transform('mean').astype(np.float16)","e4532c96":"# feature extraction: first sale\ndf_block['first_sale_item'] = (df_block['date_block_num'] - df_block.groupby(['item_id'])['date_block_num'].transform('min')).astype(np.int16)\ndf_block['first_sale_item_shop'] = (df_block['date_block_num'] - df_block.groupby(['item_id', 'shop_id'])['date_block_num'].transform('min')).astype(np.int16)","2ff0e5ea":"# feature extraction: number of products sold for first sale by category\nlist_of_first = []\nfor dateblocknum in df_block['date_block_num'].unique():\n    df_first = df_block[(df_block['date_block_num'] < dateblocknum) & (df_block['first_sale_item'] == 0)].groupby(['item_category_id'], as_index=False).agg({'item_cnt_month': 'mean'})\n    df_first.insert(0, 'date_block_num', dateblocknum)\n    list_of_first.append(df_first)\ndf_first = pd.concat(list_of_first, ignore_index=True).rename(columns={'item_cnt_month': 'item_cnt_month_by_category_first'})\ndf_block = pd.merge(df_block, df_first, how='left', on=['date_block_num', 'item_category_id'])","7171eb94":"# feature extraction: number of products sold for first sale by category for month onwards\nfor i in [12, 18, 24, 30]:\n    list_of_first = []\n    for dateblocknum in df_block['date_block_num'].unique():\n        df_first = df_block[(df_block['date_block_num'] >= i) & (df_block['date_block_num'] < dateblocknum) & (df_block['first_sale_item'] == 0)].groupby(['item_category_id'], as_index=False).agg({'item_cnt_month': 'mean'})\n        df_first.insert(0, 'date_block_num', dateblocknum)\n        list_of_first.append(df_first)\n    df_first = pd.concat(list_of_first, ignore_index=True).rename(columns={'item_cnt_month': 'item_cnt_month_by_category_first_month' + str(i) + 'onwards'})\n    df_block = pd.merge(df_block, df_first, how='left', on=['date_block_num', 'item_category_id'])","24c7ea9a":"# feature extraction: number of products sold for first sale by category and shop\nlist_of_first = []\nfor dateblocknum in df_block['date_block_num'].unique():\n    df_first = df_block[(df_block['date_block_num'] < dateblocknum) & (df_block['first_sale_item'] == 0)].groupby(['item_category_id', 'shop_id'], as_index=False).agg({'item_cnt_month': 'mean'})\n    df_first.insert(0, 'date_block_num', dateblocknum)\n    list_of_first.append(df_first)\ndf_first = pd.concat(list_of_first, ignore_index=True).rename(columns={'item_cnt_month': 'item_cnt_month_by_category_shop_first'})\ndf_block = pd.merge(df_block, df_first, how='left', on=['date_block_num', 'item_category_id', 'shop_id'])","73fa4984":"# feature extraction: number of products sold for first sale by category and shop for month onwards\nfor i in [12, 18, 24, 30]:\n    list_of_first = []\n    for dateblocknum in df_block['date_block_num'].unique():\n        df_first = df_block[(df_block['date_block_num'] >= i) & (df_block['date_block_num'] < dateblocknum) & (df_block['first_sale_item'] == 0)].groupby(['item_category_id', 'shop_id'], as_index=False).agg({'item_cnt_month': 'mean'})\n        df_first.insert(0, 'date_block_num', dateblocknum)\n        list_of_first.append(df_first)\n    df_first = pd.concat(list_of_first, ignore_index=True).rename(columns={'item_cnt_month': 'item_cnt_month_by_category_shop_first_month' + str(i) + 'onwards'})\n    df_block = pd.merge(df_block, df_first, how='left', on=['date_block_num', 'item_category_id', 'shop_id'])","85312b46":"# feature extraction: number of products sold for first sale by category and city\nlist_of_first = []\nfor dateblocknum in df_block['date_block_num'].unique():\n    df_first = df_block[(df_block['date_block_num'] < dateblocknum) & (df_block['first_sale_item'] == 0)].groupby(['item_category_id', 'city_code'], as_index=False).agg({'item_cnt_month': 'mean'})\n    df_first.insert(0, 'date_block_num', dateblocknum)\n    list_of_first.append(df_first)\ndf_first = pd.concat(list_of_first, ignore_index=True).rename(columns={'item_cnt_month': 'item_cnt_month_by_category_city_first'})\ndf_block = pd.merge(df_block, df_first, how='left', on=['date_block_num', 'item_category_id', 'city_code'])","e0851cf5":"# feature extraction: number of products sold for first sale by category and city for month onwards\nfor i in [12, 18, 24, 30]:\n    list_of_first = []\n    for dateblocknum in df_block['date_block_num'].unique():\n        df_first = df_block[(df_block['date_block_num'] >= i) & (df_block['date_block_num'] < dateblocknum) & (df_block['first_sale_item'] == 0)].groupby(['item_category_id', 'city_code'], as_index=False).agg({'item_cnt_month': 'mean'})\n        df_first.insert(0, 'date_block_num', dateblocknum)\n        list_of_first.append(df_first)\n    df_first = pd.concat(list_of_first, ignore_index=True).rename(columns={'item_cnt_month': 'item_cnt_month_by_category_city_first_month' + str(i) + 'onwards'})\n    df_block = pd.merge(df_block, df_first, how='left', on=['date_block_num', 'item_category_id', 'city_code'])","4e92393c":"# feature extraction: number of products sold for first sale by category and type\nlist_of_first = []\nfor dateblocknum in df_block['date_block_num'].unique():\n    df_first = df_block[(df_block['date_block_num'] < dateblocknum) & (df_block['first_sale_item'] == 0)].groupby(['item_category_id', 'type_code'], as_index=False).agg({'item_cnt_month': 'mean'})\n    df_first.insert(0, 'date_block_num', dateblocknum)\n    list_of_first.append(df_first)\ndf_first = pd.concat(list_of_first, ignore_index=True).rename(columns={'item_cnt_month': 'item_cnt_month_by_category_type_first'})\ndf_block = pd.merge(df_block, df_first, how='left', on=['date_block_num', 'item_category_id', 'type_code'])","86ce19a6":"# feature extraction: number of products sold for first sale by category and subtype\nlist_of_first = []\nfor dateblocknum in df_block['date_block_num'].unique():\n    df_first = df_block[(df_block['date_block_num'] < dateblocknum) & (df_block['first_sale_item'] == 0)].groupby(['item_category_id', 'subtype_code'], as_index=False).agg({'item_cnt_month': 'mean'})\n    df_first.insert(0, 'date_block_num', dateblocknum)\n    list_of_first.append(df_first)\ndf_first = pd.concat(list_of_first, ignore_index=True).rename(columns={'item_cnt_month': 'item_cnt_month_by_category_subtype_first'})\ndf_block = pd.merge(df_block, df_first, how='left', on=['date_block_num', 'item_category_id', 'subtype_code'])","d75f9d19":"# feature extraction: number of products sold for first sale by shop\nlist_of_first = []\nfor dateblocknum in df_block['date_block_num'].unique():\n    df_first = df_block[(df_block['date_block_num'] < dateblocknum) & (df_block['first_sale_item'] == 0)].groupby(['shop_id'], as_index=False).agg({'item_cnt_month': 'mean'})\n    df_first.insert(0, 'date_block_num', dateblocknum)\n    list_of_first.append(df_first)\ndf_first = pd.concat(list_of_first, ignore_index=True).rename(columns={'item_cnt_month': 'item_cnt_month_by_shop_first'})\ndf_block = pd.merge(df_block, df_first, how='left', on=['date_block_num', 'shop_id'])","76dcc7d0":"# feature extraction: number of products sold for first sale by city\nlist_of_first = []\nfor dateblocknum in df_block['date_block_num'].unique():\n    df_first = df_block[(df_block['date_block_num'] < dateblocknum) & (df_block['first_sale_item'] == 0)].groupby(['city_code'], as_index=False).agg({'item_cnt_month': 'mean'})\n    df_first.insert(0, 'date_block_num', dateblocknum)\n    list_of_first.append(df_first)\ndf_first = pd.concat(list_of_first, ignore_index=True).rename(columns={'item_cnt_month': 'item_cnt_month_by_city_first'})\ndf_block = pd.merge(df_block, df_first, how='left', on=['date_block_num', 'city_code'])","9440a910":"# feature extraction: drop first 12 months records\ndf_block = df_block[df_block['date_block_num'] > 11]","1a16685c":"# feature extraction: fillna with 0\ncol_fillnas = df_block.columns[df_block.isna().any()].tolist()\ndf_block[col_fillnas] = df_block[col_fillnas].fillna(0)","cd1a30c1":"# memory clean-up\ncol_floats = [col for col in df_block.columns if df_block[col].dtypes == 'float64']\ncol_ints = [col for col in df_block.columns if df_block[col].dtypes == 'int64']\ndf_block[col_floats] = df_block[col_floats].astype(np.float16)\ndf_block[col_ints] = df_block[col_ints].astype(np.int16)\ndel df_first, list_of_first\ngc.collect()","51d7ef99":"# describe block dataframe\ndf_block.describe(include='all')","b6f35eef":"# verify dtypes object\ndf_block.info()","45695acd":"# select the important features\nx = df_block[(df_block['first_sale_item'] != 0) & (df_block['date_block_num'] >= 30) & (df_block['date_block_num'] <= 33)].drop(['date_block_num', 'shop_id', 'item_id', 'item_cnt_month', 'item_category_id', 'year', 'month', 'day', 'city_code', 'type_code', 'subtype_code'] + [col for col in df_block.columns if col.startswith('item_price')], axis=1)\ny = df_block.loc[(df_block['first_sale_item'] != 0) & (df_block['date_block_num'] >= 30) & (df_block['date_block_num'] <= 33), 'item_cnt_month']","27e878c1":"# perform train-test (validate) split\nx_train, x_validate, y_train, y_validate = train_test_split(x, y, random_state=58, test_size=0.25)","a6c739e5":"# memory clean-up\ndel x, y\ngc.collect()","43623760":"# xgboost regression model setup\nmodel_xgbreg = xgb.XGBRegressor(max_depth=8, learning_rate=0.3, n_estimators=500, objective='reg:linear', booster='gbtree', gamma=0.1, min_child_weight=300, subsample=0.8, colsample_bytree=0.8, reg_alpha=0, reg_lambda=1, random_state=58)\n\n# xgboost regression model fit\nmodel_xgbreg.fit(x_train, y_train, eval_set=[(x_train, y_train), (x_validate, y_validate)], early_stopping_rounds=10, verbose=False, callbacks=[xgb.callback.print_evaluation(period=10)])\n\n# xgboost regression model prediction\nmodel_xgbreg_ypredict = model_xgbreg.predict(x_validate).clip(0 ,20)\n\n# xgboost regression model metrics\nmodel_xgbreg_rmse = mean_squared_error(y_validate, model_xgbreg_ypredict) ** 0.5\nprint('xgboost regression\\n  root mean squared error: %0.4f' %model_xgbreg_rmse)","0d99babc":"# plot the feature importances\nfig, axes = plt.subplots(figsize=(150 , 20))\nxgb.plot_importance(model_xgbreg, ax=axes)","a263ce92":"# model selection\nmodel_xgbreg_exist = model_xgbreg","6c021352":"# memory clean-up\ndel x_train, x_validate, y_train, y_validate\ngc.collect()","e48b8b9e":"# select the important features\nx = df_block[(df_block['first_sale_item'] == 0) & (df_block['date_block_num'] >= 30) & (df_block['date_block_num'] <= 33)].drop(['date_block_num', 'shop_id', 'item_id', 'item_cnt_month', 'item_category_id', 'year', 'month', 'day', 'city_code', 'type_code', 'subtype_code'] + [col for col in df_block.columns if col.startswith('item_price')], axis=1)\ny = df_block.loc[(df_block['first_sale_item'] == 0) & (df_block['date_block_num'] >= 30) & (df_block['date_block_num'] <= 33), 'item_cnt_month']","94224db3":"# perform train-test (validate) split\nx_train, x_validate, y_train, y_validate = train_test_split(x, y, test_size=0.25, random_state=58)","d07ea096":"# memory clean-up\ndel x, y\ngc.collect()","5fc2a105":"# xgboost regression model setup\nmodel_xgbreg = xgb.XGBRegressor(max_depth=8, learning_rate=0.3, n_estimators=500, objective='reg:linear', booster='gbtree', gamma=0.1, min_child_weight=300, subsample=0.8, colsample_bytree=0.8, reg_alpha=0, reg_lambda=1, random_state=58)\n\n# xgboost regression model fit\nmodel_xgbreg.fit(x_train, y_train, eval_set=[(x_train, y_train), (x_validate, y_validate)], early_stopping_rounds=10, verbose=True)\n\n# xgboost regression model prediction\nmodel_xgbreg_ypredict = model_xgbreg.predict(x_validate).clip(0 ,20)\n\n# xgboost regression model metrics\nmodel_xgbreg_rmse = mean_squared_error(y_validate, model_xgbreg_ypredict) ** 0.5\nprint('xgboost regression\\n  root mean squared error: %0.4f' %model_xgbreg_rmse)","d7c9382b":"# plot the feature importances\nfig, axes = plt.subplots(figsize=(150 , 20))\nxgb.plot_importance(model_xgbreg, ax=axes)","0b195787":"# model selection\nmodel_xgbreg_first = model_xgbreg","adb00dd5":"# memory clean-up\ndel x_train, x_validate, y_train, y_validate\ngc.collect()","d9a691e2":"# feature extraction: fix the duplicated shop id\ndf_test.loc[df_test['shop_id'] == 0, 'shop_id'] = 57\ndf_test.loc[df_test['shop_id'] == 1, 'shop_id'] = 58\ndf_test.loc[df_test['shop_id'] == 11, 'shop_id'] = 10","87c80810":"# model selection\nfinal_model = [model_xgbreg_exist, model_xgbreg_first]\n\n# prepare testing data and compute the observed value for model_exist\nx_test = df_block[(df_block['first_sale_item'] != 0) & (df_block['date_block_num'] == 34)].drop(['date_block_num', 'shop_id', 'item_id', 'item_cnt_month', 'item_category_id', 'year', 'month', 'day', 'city_code', 'type_code', 'subtype_code'] + [col for col in df_block.columns if col.startswith('item_price')], axis=1)\ny_test = pd.DataFrame({'item_cnt_month': final_model[0].predict(x_test).clip(0 ,20), 'shop_id': df_block.loc[(df_block['first_sale_item'] != 0) & (df_block['date_block_num'] == 34), 'shop_id'], 'item_id': df_block.loc[(df_block['first_sale_item'] != 0) & (df_block['date_block_num'] == 34), 'item_id']}, index=x_test.index)\ny_submit_exist = pd.merge(y_test, df_test[['ID', 'shop_id', 'item_id']], how='left', on=['shop_id', 'item_id'])\n\n# prepare testing data and compute the observed value for model_first\nx_test = df_block[(df_block['first_sale_item'] == 0) & (df_block['date_block_num'] == 34)].drop(['date_block_num', 'shop_id', 'item_id', 'item_cnt_month', 'item_category_id', 'year', 'month', 'day', 'city_code', 'type_code', 'subtype_code'] + [col for col in df_block.columns if col.startswith('item_price')], axis=1)\ny_test = pd.DataFrame({'item_cnt_month': final_model[1].predict(x_test).clip(0 ,20), 'shop_id': df_block.loc[(df_block['first_sale_item'] == 0) & (df_block['date_block_num'] == 34), 'shop_id'], 'item_id': df_block.loc[(df_block['first_sale_item'] == 0) & (df_block['date_block_num'] == 34), 'item_id']}, index=x_test.index)\ny_submit_first = pd.merge(y_test, df_test[['ID', 'shop_id', 'item_id']], how='left', on=['shop_id', 'item_id'])\n\n# merge submission\ny_submit = pd.concat([y_submit_exist, y_submit_first], ignore_index=True)","c4a02fa9":"# submit the results\nout = pd.DataFrame({'ID': y_submit['ID'], 'item_cnt_month': y_submit['item_cnt_month']})\nout.to_csv('submission.csv', index=False)","cca3c366":"The exploratory data analysis resulting in,\n\n* **Price:** As seen the correlations between item price and number of products sold above, the item price shift feature and select non-null number is applied.","4f2b4609":"> **Acquiring training and testing data**\n\nWe start by acquiring the training and testing datasets into Pandas DataFrames.","0fd74581":"The exploratory data analysis resulting in,\n\n* **Date:** It can be seen that there are correlations between item price and number of products sold with date.","05096e7a":"> **Feature exploration, engineering and cleansing**\n\nHere we generate descriptive statistics that summarize the central tendency, dispersion and shape of a dataset\u2019s distribution together with exploring some data.","17133b65":"The exploratory data analysis resulting in,\n\n* **First sale:** There are multiple items sale at first time which shfit features are not covered. The mean features group by category, type, subtype, shop and city are created.","c06a4bcd":"The exploratory data analysis resulting in,\n\n* **Number of products sold:** The shift feature for number of products sold are created with multiple grouping combinations.","4f81ca48":"> **Model, predict and solve the problem**\n\nNow, it is time to feed the features to Machine Learning models.","a2834c80":"> **Supply or submit the results**\n\nOur submission to the competition site Kaggle is ready. Any suggestions to improve our score are welcome.","93d6601f":"The exploratory data analysis resulting in,\n\n* **Number of products sold:** There is no data for zero number of products sold. It is required to create the cross table of zero number of products sold in each month and merge to the main dataframe.","facb8599":"The exploratory data analysis resulting in,\n\n* **Item:** There are 22,166 unique items. There are always new items show up as seen from the history.\n* **Category:** There are 84 unique categories.\n* **Shop:** There are 57 unique shops after removed duplication from above step.","e582ca24":"> **Analyze and identify patterns by visualizations**\n\nLet us generate some correlation plots of the features to see how related one feature is to the next. To do so, we will utilize the Seaborn plotting package which allows us to plot very conveniently as follows.\n\nThe Pearson Correlation plot can tell us the correlation between features with one another. If there is no strongly correlated between features, this means that there isn't much redundant or superfluous data in our training data. This plot is also useful to determine which features are correlated to the observed value.\n\nThe pairplots is also useful to observe the distribution of the training data from one feature to the other.\n\nThe pivot table is also another useful method to observe the impact between features.","35a1649b":"> **Problem overview**\n\nThis challenge serves as final project for the \"How to win a data science competition\" Coursera course. In this competition you will work with a challenging time-series dataset consisting of daily sales data, kindly provided by one of the largest Russian software firms - 1C Company. \n\nWe are asking you to predict total sales for every product and store in the next month. By solving this competition you will be able to apply and enhance your data science skills.","ec2d2edb":"After extracting all features, it is required to convert category features to numerics features, a format suitable to feed into our Machine Learning models."}}