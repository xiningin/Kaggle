{"cell_type":{"4f86d014":"code","43f136e6":"code","0413d81d":"code","8c99eb85":"code","b82d96b8":"code","e862b414":"code","b5be0ac5":"code","cbeb4298":"code","09aa933f":"code","b1668505":"code","21b2bf5b":"code","9b759cd9":"code","a4940757":"code","9867dab7":"code","86f75459":"code","611fa9e7":"code","1c2ebfb3":"code","53f9f98e":"code","f32da2e6":"code","220e4839":"code","f8a0e502":"code","0b8ff16c":"code","8095a730":"code","e9b34b13":"code","c868cc88":"code","0e015c33":"code","aef69701":"code","08e5e4c8":"code","13503e5c":"code","090026d4":"code","50078779":"code","f8ed7ec3":"code","d5a9d70d":"code","48cc21e9":"code","b6c5da09":"code","c392fd49":"code","e5f30b75":"code","f5a30c6c":"code","c17de14f":"code","0731740f":"code","e03f007d":"code","4cfdc973":"code","ff65a876":"code","c7a803eb":"code","199679dd":"code","905bf5d5":"code","87f010d1":"code","3a8ca365":"code","a6a8f12c":"markdown","6e3ba990":"markdown","9fb046f5":"markdown","4c0d8e5b":"markdown","0f547e3e":"markdown","45e291cd":"markdown","895713e0":"markdown"},"source":{"4f86d014":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.feature_selection import RFE\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import mean_squared_error\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n        for filename in filenames:\n            print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","43f136e6":"df_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf_train.info()","0413d81d":"df_test.info()","8c99eb85":"df_train.isna().sum().sort_values(ascending=False).head(25)","b82d96b8":"df_test.isna().sum().sort_values(ascending=False).head(35)","e862b414":"na_columns = df_train.isna().sum().sort_values(ascending=False).head(19)\nna_df_train = pd.DataFrame(na_columns,columns=['na_count'])\nna_df_train['len'] = 1460\nna_df_train['percentage'] = na_df_train['na_count']\/na_df_train['len']\ndrop_list_train = na_df_train[na_df_train['percentage']>= 0.15].index\ndf_train.drop(drop_list_train,axis=1,inplace =True)\n","b5be0ac5":"na_columns = df_test.isna().sum().sort_values(ascending=False).head(35)\nna_df_test = pd.DataFrame(na_columns,columns = ['na_count'])\nna_df_test['len'] = 1459\nna_df_test['percentage'] = na_df_test['na_count']\/na_df_test['len']\nna_df_test[na_df_test['percentage'] >= 0.15].index\ndrop_list_test = na_df_test[na_df_test['percentage'] >= 0.15].index\ndf_test.drop(drop_list_test,axis = 1,inplace = True)","cbeb4298":"train_na_columns = df_train.isna().sum().sort_values(ascending=False).head(13).index","09aa933f":"test_na_columns = df_test.isna().sum().sort_values(ascending=False).head(27).index","b1668505":"# SimpleImputer will help us to implement these Na values","21b2bf5b":"continuos_variable = SimpleImputer(missing_values=np.nan, strategy='median')\ncategorical_variable = SimpleImputer(missing_values=np.nan, strategy='most_frequent')","9b759cd9":"df_train['GarageYrBlt'].dtype == float","a4940757":"train_na_columns\nnumeric_columns_train = []\nobject_columns_train = []\nfor i in train_na_columns:\n    if (df_train[i].dtype == object):\n        \n        object_columns_train.append(i)\n    \n        \n    else:\n        numeric_columns_train.append(i)\nprint('Continous Feature quantity is {}'.format(len(numeric_columns_train)))\nprint('Categorical Feature quantity is {}'.format(len(object_columns_train)))\n        \n    ","9867dab7":"test_na_columns\nnumeric_columns_test = []\nobject_columns_test = []\nfor i in test_na_columns:\n    if (df_test[i].dtype == object):\n        \n        object_columns_test.append(i)\n    \n        \n    else:\n        numeric_columns_test.append(i)\nprint('Continous Feature quantity is {}'.format(len(numeric_columns_test)))\nprint('Categorical Feature quantity is {}'.format(len(object_columns_test)))\n        \n    ","86f75459":"drop_more =df_train[object_columns_train].nunique()>5\ndrop_more = drop_more.sort_values(ascending=False)[:7].index\n\ndf_train.drop(drop_more,axis = 1,inplace = True)\ndf_test.drop(drop_more,axis = 1,inplace = True)","611fa9e7":"df_train.drop('Id',axis=1,inplace = True)\ndf_test.drop('Id',axis =1,inplace = True)","1c2ebfb3":"lists = df_test.isna().sum().sort_values(ascending=False).head(11).index\n","53f9f98e":"df_train[numeric_columns_train] = continuos_variable.fit_transform(df_train[numeric_columns_train])","f32da2e6":"object_columns_train = [\n \n 'Utilities',\n \n \n \n \n \n \n \n 'MSZoning',\n \n \n \n 'KitchenQual']","220e4839":"df_train[object_columns_train] = categorical_variable.fit_transform(df_train[object_columns_train])\n","f8a0e502":"['BsmtCond', 'Utilities', 'MasVnrType', 'GarageFinish', 'GarageCond','MSZoning', 'Electrical', 'BsmtExposure', 'KitchenQual', 'GarageQual','BsmtQual']","0b8ff16c":"df_train.isna().sum().sort_values(ascending=False).head(5).index\ndf_train[df_train.isna().sum().sort_values(ascending=False).head(5).index] = categorical_variable.fit_transform(df_train[df_train.isna().sum().sort_values(ascending=False).head(5).index])","8095a730":"df_test[numeric_columns_test] = continuos_variable.fit_transform(df_test[numeric_columns_test])\ndf_test[object_columns_train] = categorical_variable.fit_transform(df_test[object_columns_train])","e9b34b13":"df_test[df_test.isna().sum().sort_values(ascending=False).head(8).index] = categorical_variable.fit_transform(df_test[df_test.isna().sum().sort_values(ascending=False).head(8).index])","c868cc88":"# all Na values has been implemented","0e015c33":"#df_train = pd.get_dummies(df_train,drop_first=True)\n#df_test = pd.get_dummies(df_test,drop_first = True)","aef69701":"df = pd.concat([df_train,df_test])","08e5e4c8":"df.drop('SalePrice',axis=1,inplace=True)","13503e5c":"df = pd.get_dummies(df,drop_first = True)","090026d4":"df_train = df[:1460]\ndf_test = df[1460:]","50078779":"scaler = StandardScaler()\ndf_trains = scaler.fit_transform(df_train)\ndf_tests = scaler.transform(df_test)","f8ed7ec3":"df_train = pd.DataFrame(df_trains,columns = df_train.columns)\ndf_test = pd.DataFrame(df_tests, columns = df_test.columns)\n","d5a9d70d":"#StandartScaler has completed, DataFrames are ready for split","48cc21e9":"y = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ny= y['SalePrice']","b6c5da09":"X_train, X_test, y_train, y_test = train_test_split(df_train, y, test_size=0.33, random_state=42)","c392fd49":"pipe = Pipeline([('rfe',RFE(estimator=RandomForestClassifier(), verbose=1)),('model',SVR())])","e5f30b75":"params = {'rfe__n_features_to_select' : [20,50,90,140],'model__C' : [1,10,100,1000],'model__kernel' : ['rbf','linear'],'model__gamma': [0.01,0.1,0.3,0.5]}\n\n\nrandom_model = RandomizedSearchCV(pipe,params,n_jobs = -1,verbose =2,cv=3)","f5a30c6c":"random_model.fit(X_train,y_train)","c17de14f":"random_model.best_params_","0731740f":"random_model.best_estimator_","e03f007d":"pred = random_model.predict(X_test)\n","4cfdc973":"print('Train RMSE is = {}'.format(np.sqrt(mean_squared_error(y_test,pred))))","ff65a876":"print('Test RMSE is = {}'.format(np.sqrt(mean_squared_error(y_train,random_model.predict(X_train)))))","c7a803eb":"pred = random_model.predict(df_test)","199679dd":"df_test =  pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","905bf5d5":"test_index = df_test.iloc[:,0]","87f010d1":"submission = pd.DataFrame(test_index)\nsubmission['SalePrice'] = pred\nsubmission= submission.rename(columns = {'Id':'id'})\n","3a8ca365":"submission.to_csv(\"Submission.csv\",index=False)\nsubmission","a6a8f12c":"**Preprocessing**","6e3ba990":"**Fill Na values**","9fb046f5":"**StandartScaler**","4c0d8e5b":"**One Hot Encoder**","0f547e3e":"**Train Test Split**","45e291cd":"**Introduction**","895713e0":"*We will start to implement Na values,firstly some columns should be drop which have more than 15% Na values*"}}