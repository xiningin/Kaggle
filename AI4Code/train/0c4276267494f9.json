{"cell_type":{"cf9489fc":"code","ec10fbdb":"code","d5936025":"code","619710ab":"code","ab7773b4":"code","d57e877e":"code","56898290":"code","4ee5e877":"code","fa04dc18":"code","0374c7c2":"code","eee2d1de":"code","a53db71a":"code","146e6493":"code","03cd1b54":"code","bbd9a6cf":"code","7eccdc1c":"code","62d56b3c":"code","4ec181f7":"code","65cccee9":"code","507275d4":"code","d1228fce":"code","4b05d7a3":"code","1d261e72":"code","510e6d48":"code","c390c1e8":"code","b74cf8fe":"code","32efb5ac":"markdown","35ce09aa":"markdown","80a0414b":"markdown","dc72ed9d":"markdown","775dac4c":"markdown","ff3b6f40":"markdown","19aa9c0e":"markdown","870a1044":"markdown","b798465b":"markdown","8387fe07":"markdown","04ae762e":"markdown","88982477":"markdown","c61a53a2":"markdown","7297f796":"markdown","340861f0":"markdown","f5bb51b2":"markdown","dfe93d56":"markdown","1d136066":"markdown"},"source":{"cf9489fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec10fbdb":"data=pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')","d5936025":"data.head()","619710ab":"data.shape","ab7773b4":"data.info()","d57e877e":"species=data.Species.unique()\nspecies","56898290":"len(species)","4ee5e877":"data.describe()","fa04dc18":"data.groupby('Species').size()","0374c7c2":"from pandas.plotting import scatter_matrix\nimport matplotlib.pyplot as plt\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n","eee2d1de":"dataset=data[[\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\"]]","a53db71a":"dataset.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)\nplt.show()","146e6493":"dataset.hist()\nplt.show()","03cd1b54":"scatter_matrix(dataset)\nplt.show()","bbd9a6cf":"import seaborn as sns","7eccdc1c":"sns.heatmap(data.isnull(), yticklabels = False, cmap = \"plasma\")\nplt.show()","62d56b3c":"sns.set_theme(style=\"darkgrid\")\nsns.boxplot(x= \"Species\", y=\"SepalLengthCm\", data = data)\nplt.show()","4ec181f7":"sns.set_theme(style=\"darkgrid\")\nsns.boxplot(x= \"Species\", y=\"PetalLengthCm\", data = data)\nplt.show()","65cccee9":"sns.set_theme(style=\"darkgrid\")\nsns.boxplot(x= \"Species\", y=\"SepalWidthCm\", data = data)\nplt.show()","507275d4":"sns.set_theme(style=\"darkgrid\")\nsns.boxplot(x= \"Species\", y=\"PetalWidthCm\", data = data)\nplt.show()","d1228fce":"datas = data[[\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\", \"Species\"]]\narray = datas.values\nX = array[:,0:4]\ny = array[:,4:5]","4b05d7a3":"validation_size = 0.20\nseed = 6\nX_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size = validation_size, random_state = seed)","1d261e72":"scoring = 'accuracy'","510e6d48":"models = []\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC()))\n\nresults = []\nnames = []","c390c1e8":"import warnings\nwarnings.filterwarnings('ignore')","b74cf8fe":"for name, model in models:\n    kfold = model_selection.KFold(n_splits = 10, random_state = seed)\n    cv_results = model_selection.cross_val_score(model, X_train, y_train, cv = kfold, scoring = scoring)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)\n    ","32efb5ac":"*Ok so it has 150 rows and 6 columns*","35ce09aa":"*The first 5 rows of the data are*","80a0414b":"# **Linear Discriminant Analysis is the best model!**","dc72ed9d":"*Let us take a look at the shape of the data set*","775dac4c":"*Multivariate Plot*","ff3b6f40":"*Splitting the train and test data*","19aa9c0e":"*Univariate Plot*","870a1044":"*Let us now describe the data*","b798465b":"*Let us import the data set into the data variable*","8387fe07":"*How many different species do we have?*","04ae762e":"*Let us see the different types of species in this dataset*","88982477":"*Box and Whisker Plot*","c61a53a2":"***Clearly, the most accurate model is Linear Discriminat Analysis***","7297f796":"*Defining the model variables*","340861f0":"*All set, let us now import all the required libraries*","f5bb51b2":"*Now let us take a look at some information regarding this dataset*","dfe93d56":"*Defining the models*","1d136066":"*Cross-validation*"}}