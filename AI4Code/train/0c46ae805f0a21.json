{"cell_type":{"cc2253dc":"code","686802c9":"code","33a2fb71":"code","cc5891d0":"code","0de7e70e":"code","86d42cb4":"code","67105f43":"code","952c594f":"code","761af1fb":"code","124e7acf":"code","4f6afc7e":"code","9daae1e2":"code","6e63a120":"markdown","399ef590":"markdown","b8e08cb8":"markdown","9b1701b1":"markdown","0cd9f525":"markdown","5d659402":"markdown","3633916f":"markdown","3b02609a":"markdown","ac3aab31":"markdown","0219503f":"markdown","eacfbbac":"markdown","427b4ab3":"markdown","eadcaff9":"markdown"},"source":{"cc2253dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics\nfrom math import sqrt\nimport seaborn as sns\nfrom scipy import stats\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","686802c9":"# read the data\ndf=pd.read_csv(\"..\/input\/19000-spotify-songs\/song_data.csv\")\ndf_info=pd.read_csv(\"..\/input\/19000-spotify-songs\/song_info.csv\")\n\n#remove the duplicates\ndf = df.drop_duplicates(subset=['song_name'])\n\n# Join the categorical variables\nnames=df_info['artist_name']\nplaylist = df_info['playlist']\nalbum = df_info['album_names']\ndf = df.join(names)\ndf = df.join(playlist)\ndf = df.join(album)","33a2fb71":"#delete records with popularity equal to zero (wrong values)\nindex_delete = df.index[df['song_popularity']==0]\ndf = df.drop(index_delete)\n\n#check that there is no null value\ndf.isnull().sum()","cc5891d0":"leble_en=preprocessing.LabelEncoder()\ndf['artist_name']=leble_en.fit_transform(df['artist_name'])\ndf['playlist']=leble_en.fit_transform(df['playlist'])\ndf['album_names']=leble_en.fit_transform(df['album_names'])\n","0de7e70e":"df=pd.get_dummies(data=df,columns=['time_signature'])\n\ndf.head","86d42cb4":"f,ax = plt.subplots(figsize=(24, 10))\ncor = df.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds, ax=ax)\nplt.show()","67105f43":"# remove the features \ndf = df.drop(['song_name','audio_mode','key','speechiness','album_names','song_duration_ms','energy'],axis=1)","952c594f":"sns.boxplot(x=df['liveness'])\nplt.show()\nsns.boxplot(x=df['loudness'])\nplt.show()","761af1fb":"sns.boxplot(x=df['tempo'])\nplt.show()\n\nindex_delete = df.index[df['tempo']==0]\ndf = df.drop(index_delete)","124e7acf":"scaler = preprocessing.MinMaxScaler()\ndf_scal = scaler.fit_transform(df)\ndf_scal = pd.DataFrame(df_scal, columns = df.columns)\n\nfig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(6, 5))\nax1.set_title('Before Scaling')\nsns.kdeplot(df['loudness'], ax=ax1)\nsns.kdeplot(df['danceability'], ax=ax1)\nsns.kdeplot(df['tempo'], ax=ax1)\nax2.set_title('After Min-Max Scaling')\nsns.kdeplot(df_scal['loudness'], ax=ax2)\nsns.kdeplot(df_scal['danceability'], ax=ax2)\nsns.kdeplot(df_scal['tempo'], ax=ax2)\nplt.show()","4f6afc7e":"# separate the target\nx=df_scal.drop(['song_popularity'],axis=1)\ny=df_scal['song_popularity']\n\n# train, validation and test\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=20)\nx_train,x_val,y_train,y_val=train_test_split(x_train,y_train,test_size=0.20,random_state=20)\n\n# range of the Hyperparameters\nmax_depth=[5,20, 50, 90]\nmin_samples_leaf = [1, 3, 5]\nmin_samples_split = [2, 6, 12]\n# range of the parameter for the number of trees\nn_estimators = [100,300,500]\n\nbest_err = 1\nfor num in n_estimators:\n    for min_split in min_samples_split:\n        for min_leaf in min_samples_leaf:\n            for depth in max_depth:\n                rf=RandomForestRegressor(n_estimators=num,max_depth=depth,max_features='sqrt',min_samples_leaf=min_leaf,min_samples_split=min_split, random_state=42)\n                rf.fit(x_train,y_train)\n                prediction=rf.predict(x_val)\n                err = sqrt(metrics.mean_squared_error(y_val, prediction))\n                if(err < best_err):\n                    best_err = err\n                    best_num = num\n                    best_split = min_split\n                    best_leaf = min_leaf\n                    best_depth = depth\nrf","9daae1e2":"new_x_train = x_train.append(x_val)\nnew_y_train = y_train.append(y_val)\n\nrandomForest = RandomForestRegressor(n_estimators=best_num,max_depth=best_depth,max_features='sqrt',min_samples_leaf=best_leaf,min_samples_split=best_split, random_state=42)\nrandomForest.fit(new_x_train, new_y_train)\ntest_prediction = randomForest.predict(x_test)\n\nprint('Root Mean Squared Error:', sqrt(metrics.mean_squared_error(y_test, test_prediction)))","6e63a120":"For the variable \"time_signature\", which can assume only 5 values, I use the One-Hot Encoding. A column for each value is created","399ef590":"I want to use also the categorical variables, in order to predict the popularity. Each unique value is assigned to a different integer.","b8e08cb8":"Now I want to remove redundant data, which does not affect accuracy, or can even reduce the accuracy. So I want to select a subset of features among those I have, in order to remove the noise and reduce the training time. To do that I look to the linear correlation between the features. I observe that these attributes, 'audio_mode','key','speechiness','album_names','song_duration_ms', have a very low correlation with the target: I try to remove them and the result is an improvement of the accuracy. Removing these features I avoid overfitting. Furthermore I notice that there is an high correlation between 'energy' and 'loudness': this means that both represent the same information. The accuracy improves removing the attribute 'energy'.","9b1701b1":"**Train, Validation and Test**","0cd9f525":"**Data Scaling**","5d659402":"The only outlier, whose removal gives a better performance is \"tempo\" == 0","3633916f":"The dataset is split in three parts: train (60%), validation (20%) and test (20%).\nThe model is fitted with the train set and subsequently, varying the parameters, it is evaluated on the validation set, in order to get the best combination. The algorithm chosen is ****Random Forest****.","3b02609a":"I want to find out if are there any outliers, wrong values that can bring noise to the model. \nWith the use of the boxplot many outliers seem to be spotted in these attributes, but their removal leads to a worsening of the efficiency. These are real data!","ac3aab31":"All the data have different numerical scales. I want to scale the data so that the algorithm can perform the calculations better. I use the Min-Max Scaler, that preserves the original distribution of the data.","0219503f":" **Outliers Detection**","eacfbbac":"**Data Preparation**","427b4ab3":"**Features Selection**","eadcaff9":"I initialize a new random forest with the parameters founded previously. It is trained on the train+validation set and is tested on the test set."}}