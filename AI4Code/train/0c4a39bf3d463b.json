{"cell_type":{"0cbdb67e":"code","d28d3401":"code","332d13d8":"code","6a21541b":"code","923774d6":"code","33b6cb1c":"code","5dec5d53":"code","213e131f":"code","92f24ed5":"code","8de4f5f6":"code","d49e7b3d":"markdown","c3a44c8e":"markdown","3516e7ca":"markdown","600cdaed":"markdown"},"source":{"0cbdb67e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d28d3401":"train_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")\ntrain_data","332d13d8":"y_train = train_data[\"label\"]\nX_train = train_data.drop([\"label\"], axis = 1)","6a21541b":"import matplotlib.pyplot as plt\n\ndef plot_digit(row):\n    some_digit = np.array(row)\n    some_digit_image = some_digit.reshape((28, 28))\n    plt.imshow(some_digit_image, cmap = plt.cm.binary)\n    plt.axis('off')\n    \nplot_digit(X_train.loc[0])\ny_train[0]","923774d6":"from sklearn.neighbors import KNeighborsClassifier\n\nknn_clf = KNeighborsClassifier()","33b6cb1c":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n    {'weights': [\"uniform\", \"distance\"], 'n_neighbors': [3, 4, 5]}\n]\n\ngrid_search = GridSearchCV(knn_clf, param_grid, cv = 5, verbose = 3, n_jobs = -1)\ngrid_search.fit(X_train, y_train)","5dec5d53":"grid_search.best_params_","213e131f":"grid_search.best_score_","92f24ed5":"model = KNeighborsClassifier(**grid_search.best_params_)\n\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","8de4f5f6":"submission['Label'] = y_pred\nsubmission.to_csv('submission.csv',index = False)","d49e7b3d":"## KNeighborsClassifier","c3a44c8e":"## Submission","3516e7ca":"## EDA","600cdaed":"## GridSearchCV"}}