{"cell_type":{"f9ad2ba7":"code","807db023":"code","983464b4":"code","4654e4a3":"code","b3d73d0d":"code","b0c02cdd":"code","1d59ab68":"code","2b56b975":"code","97caed30":"code","84457956":"code","03557b93":"code","c556bf1c":"code","6e44a8fe":"code","aa68df83":"code","c32f1b23":"code","44482dd2":"code","3d88ca1d":"code","a6e545eb":"code","b1c19d01":"code","f7659c28":"code","4cab54f8":"code","613e1307":"code","8f9fc769":"code","3454275a":"code","ba1cb03e":"code","0b2707df":"code","7a9de308":"code","a9a81549":"code","29682db1":"code","244d7968":"code","0323d045":"code","085ce861":"code","c9e1f511":"code","3632054e":"code","c11343fb":"code","91108cc1":"code","d5785bd1":"code","777335eb":"code","dd97cf18":"code","d3527cc5":"code","f7ee6d18":"code","72805ded":"code","b1c7ca8e":"code","c8d203dc":"code","0453c82f":"code","5ad02c90":"code","684ab34b":"code","06daf4f5":"code","d194d98b":"code","8495b42c":"code","a6126948":"code","4f293f6f":"code","65322f81":"code","1670d666":"code","e2fdb3d0":"code","0f55a5ca":"code","d3c08910":"code","90a38034":"code","1891d0ff":"code","c07920a3":"code","58f93b16":"code","c6449176":"code","aec8c2b9":"code","5922432b":"code","a4a2ff28":"code","019424fe":"code","e40e4d6c":"code","13e14804":"code","8d7914e4":"code","ceda5da1":"code","6d248f50":"code","2804ecea":"code","7c2208e9":"code","b7a9e3ac":"code","f4451f5d":"code","be298433":"code","9aa3a053":"code","e4dd3f5e":"code","816337ee":"code","1f5e3850":"code","7e9eaf68":"code","79f3244c":"code","d1faea0c":"code","88576c45":"code","99d47926":"code","91c91e2f":"code","65326059":"code","35803c76":"code","79668397":"code","5c0a6137":"code","df44fd84":"code","516b6654":"code","8ca9a4ef":"code","85e0e70c":"code","37c302f5":"code","b5d35bea":"code","172afbef":"code","dd1b702c":"code","a9e7f194":"code","880aa143":"code","9f927f83":"code","126ee32d":"code","e29a4a55":"code","9b646250":"code","5bb219fc":"code","1318bb3a":"code","8bd23792":"markdown","eb1f45e0":"markdown","e33199a4":"markdown","b19a5222":"markdown","fd4323ab":"markdown","bfc2fcdb":"markdown","91a77e6a":"markdown","449e9e8a":"markdown","ddd050e8":"markdown","1baef8e9":"markdown","4ba45fc7":"markdown","1c411469":"markdown","a948ed83":"markdown","8e2df3fb":"markdown","4166f1ba":"markdown","7f194767":"markdown","fec5c75e":"markdown","8a0ebaca":"markdown","d86d14f1":"markdown","530386a7":"markdown","5b72a6e1":"markdown","be9c704e":"markdown","8e2e9d71":"markdown","d834646a":"markdown","21ac87eb":"markdown","c4b0caf3":"markdown","f8f85e5a":"markdown","4dfcd715":"markdown","6dbd8622":"markdown","73618355":"markdown","ebe85b74":"markdown","fbf554e2":"markdown","66b33958":"markdown","f54da706":"markdown","cc9673f6":"markdown","65b735b8":"markdown","969c9b28":"markdown","0a55365d":"markdown","5de04d50":"markdown","74e6caab":"markdown","62a54f6f":"markdown","f776d3fd":"markdown","f9b42b2c":"markdown","ff3e0560":"markdown","d016b9d3":"markdown","a15e462d":"markdown","0e1e3261":"markdown","c8e5add6":"markdown","8f63582e":"markdown","40c0e619":"markdown","6173bc51":"markdown","67b447ec":"markdown","375a0ae5":"markdown","e29ab713":"markdown","2a8781ba":"markdown","74af497c":"markdown","32876f20":"markdown","138706b3":"markdown","a0c78b12":"markdown","4e34df26":"markdown","c7c48cbb":"markdown","2d9ae131":"markdown","d1673488":"markdown","d12a14a7":"markdown","e0ea8b83":"markdown","ad97d205":"markdown","3bab79f4":"markdown","b5f5f015":"markdown","74bd8f22":"markdown","a32dfcb4":"markdown","823f23a6":"markdown","c0eb25c9":"markdown","fd9a8d28":"markdown","6193d8b0":"markdown","320ef1c5":"markdown","0c16fb2e":"markdown","d6c3ba88":"markdown","eded8a5b":"markdown","f91a0fd9":"markdown","91ca37c2":"markdown","58ee3cba":"markdown","8c6efff1":"markdown"},"source":{"f9ad2ba7":"import pandas as pd\nimport numpy as np\nimport math\nimport datetime as dt\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, explained_variance_score, r2_score \nfrom sklearn.metrics import mean_poisson_deviance, mean_gamma_deviance, accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM, GRU\n\nfrom itertools import cycle\n\n# ! pip install plotly\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n","807db023":"# Import dataset\nbist100 = pd.read_csv(\"..\/input\/reliance-industries-limited-stocks-202021\/RELIANCE.csv\")\nbist100.head()","983464b4":"# Rename columns\nbist100.rename(columns={\"Date\":\"date\",\"Open\":\"open\",\"High\":\"high\",\"Low\":\"low\",\"Close\":\"close\"}, inplace= True)\nbist100.head()","4654e4a3":"# Checking null value\nbist100.isnull().sum()","b3d73d0d":"# Checking na value\nbist100.isna().any()","b0c02cdd":"bist100.dropna(inplace=True)\nbist100.isna().any()","1d59ab68":"# Checking Data type of each column\nprint(\"Date column data type: \", type(bist100['date'][0]))\nprint(\"Open column data type: \", type(bist100['open'][0]))\nprint(\"Close column data type: \", type(bist100['close'][0]))\nprint(\"High column data type: \", type(bist100['high'][0]))\nprint(\"Low column data type: \", type(bist100['low'][0]))","2b56b975":"# convert date field from string to Date format and make it index\nbist100['date'] = pd.to_datetime(bist100.date)\nbist100.head()","97caed30":"bist100.sort_values(by='date', inplace=True)\nbist100.head()","84457956":"bist100.shape","03557b93":"print(\"Starting date: \",bist100.iloc[0][0])\nprint(\"Ending date: \", bist100.iloc[-1][0])\nprint(\"Duration: \", bist100.iloc[-1][0]-bist100.iloc[0][0])","c556bf1c":"monthvise= bist100.groupby(bist100['date'].dt.strftime('%B'))[['open','close']].mean().sort_values(by='close')\nmonthvise.head()","6e44a8fe":"fig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=monthvise.index,\n    y=monthvise['open'],\n    name='Stock Open Price',\n    marker_color='crimson'\n))\nfig.add_trace(go.Bar(\n    x=monthvise.index,\n    y=monthvise['close'],\n    name='Stock Close Price',\n    marker_color='lightsalmon'\n))\n\nfig.update_layout(barmode='group', xaxis_tickangle=-45, \n                  title='Monthwise comparision between Stock actual, open and close price')\nfig.show()","aa68df83":"bist100.groupby(bist100['date'].dt.strftime('%B'))['low'].min()","c32f1b23":"monthvise_high= bist100.groupby(bist100['date'].dt.strftime('%B'))['high'].max()\nmonthvise_low= bist100.groupby(bist100['date'].dt.strftime('%B'))['low'].min()","44482dd2":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    x=monthvise_high.index,\n    y=monthvise_high,\n    name='Stock high Price',\n    marker_color='rgb(0, 153, 204)'\n))\nfig.add_trace(go.Bar(\n    x=monthvise_low.index,\n    y=monthvise_low,\n    name='Stock low Price',\n    marker_color='rgb(255, 128, 0)'\n))\n\nfig.update_layout(barmode='group', \n                  title=' Monthwise High and Low stock price')\nfig.show()","3d88ca1d":"names = cycle(['Stock Open Price','Stock Close Price','Stock High Price','Stock Low Price'])\n\nfig = px.line(bist100, x=bist100.date, y=[bist100['open'], bist100['close'], \n                                          bist100['high'], bist100['low']],\n             labels={'date': 'Date','value':'Stock value'})\nfig.update_layout(title_text='Stock analysis chart', font_size=15, font_color='black',legend_title_text='Stock Parameters')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n\nfig.show()","a6e545eb":"closedf = bist100[['date','close']]\nprint(\"Shape of close dataframe:\", closedf.shape)","b1c19d01":"fig = px.line(closedf, x=closedf.date, y=closedf.close,labels={'date':'Date','close':'Close Stock'})\nfig.update_traces(marker_line_width=2, opacity=0.6)\nfig.update_layout(title_text='Stock close price chart', plot_bgcolor='white', font_size=15, font_color='black')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","f7659c28":"close_stock = closedf.copy()\ndel closedf['date']\nscaler=MinMaxScaler(feature_range=(0,1))\nclosedf=scaler.fit_transform(np.array(closedf).reshape(-1,1))\nprint(closedf.shape)","4cab54f8":"training_size=int(len(closedf)*0.65)\ntest_size=len(closedf)-training_size\ntrain_data,test_data=closedf[0:training_size,:],closedf[training_size:len(closedf),:1]\nprint(\"train_data: \", train_data.shape)\nprint(\"test_data: \", test_data.shape)","613e1307":"# convert an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-time_step-1):\n        a = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 \n        dataX.append(a)\n        dataY.append(dataset[i + time_step, 0])\n    return np.array(dataX), np.array(dataY)","8f9fc769":"# reshape into X=t,t+1,t+2,t+3 and Y=t+4\ntime_step = 15\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, y_test = create_dataset(test_data, time_step)\n\nprint(\"X_train: \", X_train.shape)\nprint(\"y_train: \", y_train.shape)\nprint(\"X_test: \", X_test.shape)\nprint(\"y_test\", y_test.shape)","3454275a":"from sklearn.svm import SVR\n\nsvr_rbf = SVR(kernel= 'rbf', C= 1e2, gamma= 0.1)\nsvr_rbf.fit(X_train, y_train)","ba1cb03e":"# Lets Do the prediction \n\ntrain_predict=svr_rbf.predict(X_train)\ntest_predict=svr_rbf.predict(X_test)\n\ntrain_predict = train_predict.reshape(-1,1)\ntest_predict = test_predict.reshape(-1,1)\n\nprint(\"Train data prediction:\", train_predict.shape)\nprint(\"Test data prediction:\", test_predict.shape)\n","0b2707df":"# Transform back to original form\n\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)\noriginal_ytrain = scaler.inverse_transform(y_train.reshape(-1,1)) \noriginal_ytest = scaler.inverse_transform(y_test.reshape(-1,1)) ","7a9de308":"# Evaluation metrices RMSE and MAE\nprint(\"Train data RMSE: \", math.sqrt(mean_squared_error(original_ytrain,train_predict)))\nprint(\"Train data MSE: \", mean_squared_error(original_ytrain,train_predict))\nprint(\"Test data MAE: \", mean_absolute_error(original_ytrain,train_predict))\nprint(\"-------------------------------------------------------------------------------------\")\nprint(\"Test data RMSE: \", math.sqrt(mean_squared_error(original_ytest,test_predict)))\nprint(\"Test data MSE: \", mean_squared_error(original_ytest,test_predict))\nprint(\"Test data MAE: \", mean_absolute_error(original_ytest,test_predict))","a9a81549":"print(\"Train data explained variance regression score:\", explained_variance_score(original_ytrain, train_predict))\nprint(\"Test data explained variance regression score:\", explained_variance_score(original_ytest, test_predict))","29682db1":"print(\"Train data R2 score:\", r2_score(original_ytrain, train_predict))\nprint(\"Test data R2 score:\", r2_score(original_ytest, test_predict))","244d7968":"print(\"Train data MGD: \", mean_gamma_deviance(original_ytrain, train_predict))\nprint(\"Test data MGD: \", mean_gamma_deviance(original_ytest, test_predict))\nprint(\"----------------------------------------------------------------------\")\nprint(\"Train data MPD: \", mean_poisson_deviance(original_ytrain, train_predict))\nprint(\"Test data MPD: \", mean_poisson_deviance(original_ytest, test_predict))","0323d045":"# shift train predictions for plotting\n\nlook_back=time_step\ntrainPredictPlot = np.empty_like(closedf)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\nprint(\"Train predicted data: \", trainPredictPlot.shape)\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(closedf)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(closedf)-1, :] = test_predict\nprint(\"Test predicted data: \", testPredictPlot.shape)\n\nnames = cycle(['Original close price','Train predicted close price','Test predicted close price'])\n\nplotdf = pd.DataFrame({'date': close_stock['date'],\n                       'original_close': close_stock['close'],\n                      'train_predicted_close': trainPredictPlot.reshape(1,-1)[0].tolist(),\n                      'test_predicted_close': testPredictPlot.reshape(1,-1)[0].tolist()})\n\nfig = px.line(plotdf,x=plotdf['date'], y=[plotdf['original_close'],plotdf['train_predicted_close'],\n                                          plotdf['test_predicted_close']],\n              labels={'value':'Stock price','date': 'Date'})\nfig.update_layout(title_text='Comparision between original close price vs predicted close price',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","085ce861":"x_input=test_data[len(test_data)-time_step:].reshape(1,-1)\ntemp_input=list(x_input)\ntemp_input=temp_input[0].tolist()\n\nfrom numpy import array\n\nlst_output=[]\nn_steps=time_step\ni=0\npred_days = 10\nwhile(i<pred_days):\n    \n    if(len(temp_input)>time_step):\n        \n        x_input=np.array(temp_input[1:])\n        #print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        \n        yhat = svr_rbf.predict(x_input)\n        #print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat.tolist())\n        temp_input=temp_input[1:]\n       \n        lst_output.extend(yhat.tolist())\n        i=i+1\n        \n    else:\n        yhat = svr_rbf.predict(x_input)\n        \n        temp_input.extend(yhat.tolist())\n        lst_output.extend(yhat.tolist())\n        \n        i=i+1\n        \nprint(\"Output of predicted next days: \", len(lst_output))","c9e1f511":"last_days=np.arange(1,time_step+1)\nday_pred=np.arange(time_step+1,time_step+pred_days+1)\nprint(last_days)\nprint(day_pred)","3632054e":"temp_mat = np.empty((len(last_days)+pred_days+1,1))\ntemp_mat[:] = np.nan\ntemp_mat = temp_mat.reshape(1,-1).tolist()[0]\n\nlast_original_days_value = temp_mat\nnext_predicted_days_value = temp_mat\n\nlast_original_days_value[0:time_step+1] = scaler.inverse_transform(closedf[len(closedf)-time_step:]).reshape(1,-1).tolist()[0]\nnext_predicted_days_value[time_step+1:] = scaler.inverse_transform(np.array(lst_output).reshape(-1,1)).reshape(1,-1).tolist()[0]\n\nnew_pred_plot = pd.DataFrame({\n    'last_original_days_value':last_original_days_value,\n    'next_predicted_days_value':next_predicted_days_value\n})\n\nnames = cycle(['Last 15 days close price','Predicted next 10 days close price'])\n\nfig = px.line(new_pred_plot,x=new_pred_plot.index, y=[new_pred_plot['last_original_days_value'],\n                                                      new_pred_plot['next_predicted_days_value']],\n              labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Compare last 15 days vs next 10 days',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","c11343fb":"svrdf=closedf.tolist()\nsvrdf.extend((np.array(lst_output).reshape(-1,1)).tolist())\nsvrdf=scaler.inverse_transform(svrdf).reshape(1,-1).tolist()[0]\n\nnames = cycle(['Close Price'])\n\nfig = px.line(svrdf,labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Plotting whole closing stock price with prediction',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Stock')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","91108cc1":"from sklearn.ensemble import RandomForestRegressor\n\nregressor = RandomForestRegressor(n_estimators = 100, random_state = 0)\nregressor.fit(X_train, y_train)","d5785bd1":"# Lets Do the prediction \n\ntrain_predict=regressor.predict(X_train)\ntest_predict=regressor.predict(X_test)\n\ntrain_predict = train_predict.reshape(-1,1)\ntest_predict = test_predict.reshape(-1,1)\n\nprint(\"Train data prediction:\", train_predict.shape)\nprint(\"Test data prediction:\", test_predict.shape)\n","777335eb":"# Transform back to original form\n\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)\noriginal_ytrain = scaler.inverse_transform(y_train.reshape(-1,1)) \noriginal_ytest = scaler.inverse_transform(y_test.reshape(-1,1)) ","dd97cf18":"# Evaluation metrices RMSE and MAE\nprint(\"Train data RMSE: \", math.sqrt(mean_squared_error(original_ytrain,train_predict)))\nprint(\"Train data MSE: \", mean_squared_error(original_ytrain,train_predict))\nprint(\"Test data MAE: \", mean_absolute_error(original_ytrain,train_predict))\nprint(\"-------------------------------------------------------------------------------------\")\nprint(\"Test data RMSE: \", math.sqrt(mean_squared_error(original_ytest,test_predict)))\nprint(\"Test data MSE: \", mean_squared_error(original_ytest,test_predict))\nprint(\"Test data MAE: \", mean_absolute_error(original_ytest,test_predict))","d3527cc5":"print(\"Train data explained variance regression score:\", explained_variance_score(original_ytrain, train_predict))\nprint(\"Test data explained variance regression score:\", explained_variance_score(original_ytest, test_predict))","f7ee6d18":"print(\"Train data R2 score:\", r2_score(original_ytrain, train_predict))\nprint(\"Test data R2 score:\", r2_score(original_ytest, test_predict))","72805ded":"print(\"Train data MGD: \", mean_gamma_deviance(original_ytrain, train_predict))\nprint(\"Test data MGD: \", mean_gamma_deviance(original_ytest, test_predict))\nprint(\"----------------------------------------------------------------------\")\nprint(\"Train data MPD: \", mean_poisson_deviance(original_ytrain, train_predict))\nprint(\"Test data MPD: \", mean_poisson_deviance(original_ytest, test_predict))","b1c7ca8e":"# shift train predictions for plotting\n\nlook_back=time_step\ntrainPredictPlot = np.empty_like(closedf)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\nprint(\"Train predicted data: \", trainPredictPlot.shape)\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(closedf)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(closedf)-1, :] = test_predict\nprint(\"Test predicted data: \", testPredictPlot.shape)\n\nnames = cycle(['Original close price','Train predicted close price','Test predicted close price'])\n\n\nplotdf = pd.DataFrame({'date': close_stock['date'],\n                       'original_close': close_stock['close'],\n                      'train_predicted_close': trainPredictPlot.reshape(1,-1)[0].tolist(),\n                      'test_predicted_close': testPredictPlot.reshape(1,-1)[0].tolist()})\n\nfig = px.line(plotdf,x=plotdf['date'], y=[plotdf['original_close'],plotdf['train_predicted_close'],\n                                          plotdf['test_predicted_close']],\n              labels={'value':'Stock price','date': 'Date'})\nfig.update_layout(title_text='Comparision between original close price vs predicted close price',\n                  plot_bgcolor='white', font_size=15, font_color='black', legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","c8d203dc":"x_input=test_data[len(test_data)-time_step:].reshape(1,-1)\ntemp_input=list(x_input)\ntemp_input=temp_input[0].tolist()\n\nfrom numpy import array\n\nlst_output=[]\nn_steps=time_step\ni=0\npred_days = 10\nwhile(i<pred_days):\n    \n    if(len(temp_input)>time_step):\n        \n        x_input=np.array(temp_input[1:])\n        #print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        \n        yhat = regressor.predict(x_input)\n        #print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat.tolist())\n        temp_input=temp_input[1:]\n       \n        lst_output.extend(yhat.tolist())\n        i=i+1\n        \n    else:\n        yhat = regressor.predict(x_input)\n        \n        temp_input.extend(yhat.tolist())\n        lst_output.extend(yhat.tolist())\n        \n        i=i+1\n        \nprint(\"Output of predicted next days: \", len(lst_output))","0453c82f":"last_days=np.arange(1,time_step+1)\nday_pred=np.arange(time_step+1,time_step+pred_days+1)\nprint(last_days)\nprint(day_pred)","5ad02c90":"temp_mat = np.empty((len(last_days)+pred_days+1,1))\ntemp_mat[:] = np.nan\ntemp_mat = temp_mat.reshape(1,-1).tolist()[0]\n\nlast_original_days_value = temp_mat\nnext_predicted_days_value = temp_mat\n\nlast_original_days_value[0:time_step+1] = scaler.inverse_transform(closedf[len(closedf)-time_step:]).reshape(1,-1).tolist()[0]\nnext_predicted_days_value[time_step+1:] = scaler.inverse_transform(np.array(lst_output).reshape(-1,1)).reshape(1,-1).tolist()[0]\n\nnames = cycle(['Last 15 days close price','Predicted next 10 days close price'])\n\nnew_pred_plot = pd.DataFrame({\n    'last_original_days_value':last_original_days_value,\n    'next_predicted_days_value':next_predicted_days_value\n})\n\nfig = px.line(new_pred_plot,x=new_pred_plot.index, y=[new_pred_plot['last_original_days_value'],\n                                                      new_pred_plot['next_predicted_days_value']],\n              labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Compare last 15 days vs next 10 days',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","684ab34b":"rfdf=closedf.tolist()\nrfdf.extend((np.array(lst_output).reshape(-1,1)).tolist())\nrfdf=scaler.inverse_transform(rfdf).reshape(1,-1).tolist()[0]\n\nnames = cycle(['Close price'])\n\nfig = px.line(rfdf,labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Plotting whole closing stock price with prediction',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Stock')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","06daf4f5":"from sklearn import neighbors\n\nK = time_step\nneighbor = neighbors.KNeighborsRegressor(n_neighbors = K)\nneighbor.fit(X_train, y_train)","d194d98b":"# Lets Do the prediction \n\ntrain_predict=neighbor.predict(X_train)\ntest_predict=neighbor.predict(X_test)\n\ntrain_predict = train_predict.reshape(-1,1)\ntest_predict = test_predict.reshape(-1,1)\n\nprint(\"Train data prediction:\", train_predict.shape)\nprint(\"Test data prediction:\", test_predict.shape)\n","8495b42c":"# Transform back to original form\n\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)\noriginal_ytrain = scaler.inverse_transform(y_train.reshape(-1,1)) \noriginal_ytest = scaler.inverse_transform(y_test.reshape(-1,1)) ","a6126948":"# Evaluation metrices RMSE and MAE\nprint(\"Train data RMSE: \", math.sqrt(mean_squared_error(original_ytrain,train_predict)))\nprint(\"Train data MSE: \", mean_squared_error(original_ytrain,train_predict))\nprint(\"Test data MAE: \", mean_absolute_error(original_ytrain,train_predict))\nprint(\"-------------------------------------------------------------------------------------\")\nprint(\"Test data RMSE: \", math.sqrt(mean_squared_error(original_ytest,test_predict)))\nprint(\"Test data MSE: \", mean_squared_error(original_ytest,test_predict))\nprint(\"Test data MAE: \", mean_absolute_error(original_ytest,test_predict))","4f293f6f":"print(\"Train data explained variance regression score:\", explained_variance_score(original_ytrain, train_predict))\nprint(\"Test data explained variance regression score:\", explained_variance_score(original_ytest, test_predict))","65322f81":"print(\"Train data R2 score:\", r2_score(original_ytrain, train_predict))\nprint(\"Test data R2 score:\", r2_score(original_ytest, test_predict))","1670d666":"print(\"Train data MGD: \", mean_gamma_deviance(original_ytrain, train_predict))\nprint(\"Test data MGD: \", mean_gamma_deviance(original_ytest, test_predict))\nprint(\"----------------------------------------------------------------------\")\nprint(\"Train data MPD: \", mean_poisson_deviance(original_ytrain, train_predict))\nprint(\"Test data MPD: \", mean_poisson_deviance(original_ytest, test_predict))","e2fdb3d0":"# shift train predictions for plotting\n\nlook_back=time_step\ntrainPredictPlot = np.empty_like(closedf)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\nprint(\"Train predicted data: \", trainPredictPlot.shape)\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(closedf)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(closedf)-1, :] = test_predict\nprint(\"Test predicted data: \", testPredictPlot.shape)\n\nnames = cycle(['Original close price','Train predicted close price','Test predicted close price'])\n\nplotdf = pd.DataFrame({'date': close_stock['date'],\n                       'original_close': close_stock['close'],\n                      'train_predicted_close': trainPredictPlot.reshape(1,-1)[0].tolist(),\n                      'test_predicted_close': testPredictPlot.reshape(1,-1)[0].tolist()})\n\nfig = px.line(plotdf,x=plotdf['date'], y=[plotdf['original_close'],plotdf['train_predicted_close'],\n                                          plotdf['test_predicted_close']],\n              labels={'value':'Stock price','date': 'Date'})\nfig.update_layout(title_text='Comparision between original close price vs predicted close price',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","0f55a5ca":"x_input=test_data[len(test_data)-time_step:].reshape(1,-1)\ntemp_input=list(x_input)\ntemp_input=temp_input[0].tolist()\n\nfrom numpy import array\n\nlst_output=[]\nn_steps=time_step\ni=0\npred_days = 10\nwhile(i<pred_days):\n    \n    if(len(temp_input)>time_step):\n        \n        x_input=np.array(temp_input[1:])\n        #print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        \n        yhat = neighbor.predict(x_input)\n        #print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat.tolist())\n        temp_input=temp_input[1:]\n       \n        lst_output.extend(yhat.tolist())\n        i=i+1\n        \n    else:\n        yhat = neighbor.predict(x_input)\n        \n        temp_input.extend(yhat.tolist())\n        lst_output.extend(yhat.tolist())\n        \n        i=i+1\n        \nprint(\"Output of predicted next days: \", len(lst_output))","d3c08910":"last_days=np.arange(1,time_step+1)\nday_pred=np.arange(time_step+1,time_step+pred_days+1)\nprint(last_days)\nprint(day_pred)","90a38034":"temp_mat = np.empty((len(last_days)+pred_days+1,1))\ntemp_mat[:] = np.nan\ntemp_mat = temp_mat.reshape(1,-1).tolist()[0]\n\nlast_original_days_value = temp_mat\nnext_predicted_days_value = temp_mat\n\nlast_original_days_value[0:time_step+1] = scaler.inverse_transform(closedf[len(closedf)-time_step:]).reshape(1,-1).tolist()[0]\nnext_predicted_days_value[time_step+1:] = scaler.inverse_transform(np.array(lst_output).reshape(-1,1)).reshape(1,-1).tolist()[0]\n\nnew_pred_plot = pd.DataFrame({\n    'last_original_days_value':last_original_days_value,\n    'next_predicted_days_value':next_predicted_days_value\n})\n\nnames = cycle(['Last 15 days close price','Predicted next 10 days close price'])\n\nfig = px.line(new_pred_plot,x=new_pred_plot.index, y=[new_pred_plot['last_original_days_value'],\n                                                      new_pred_plot['next_predicted_days_value']],\n              labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Compare last 15 days vs next 10 days',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","1891d0ff":"knndf=closedf.tolist()\nknndf.extend((np.array(lst_output).reshape(-1,1)).tolist())\nknndf=scaler.inverse_transform(knndf).reshape(1,-1).tolist()[0]\n\nnames = cycle(['Close price'])\n\nfig = px.line(knndf,labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Plotting whole closing stock price with prediction',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Stock')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","c07920a3":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)\n\nprint(\"X_train: \", X_train.shape)\nprint(\"X_test: \", X_test.shape)","58f93b16":"tf.keras.backend.clear_session()\nmodel=Sequential()\nmodel.add(LSTM(32,return_sequences=True,input_shape=(time_step,1)))\nmodel.add(LSTM(32,return_sequences=True))\nmodel.add(LSTM(32))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')","c6449176":"model.summary()","aec8c2b9":"model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=200,batch_size=5,verbose=1)","5922432b":"### Lets Do the prediction and check performance metrics\ntrain_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)\ntrain_predict.shape, test_predict.shape","a4a2ff28":"# Transform back to original form\n\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)\noriginal_ytrain = scaler.inverse_transform(y_train.reshape(-1,1)) \noriginal_ytest = scaler.inverse_transform(y_test.reshape(-1,1)) ","019424fe":"# Evaluation metrices RMSE and MAE\nprint(\"Train data RMSE: \", math.sqrt(mean_squared_error(original_ytrain,train_predict)))\nprint(\"Train data MSE: \", mean_squared_error(original_ytrain,train_predict))\nprint(\"Test data MAE: \", mean_absolute_error(original_ytrain,train_predict))\nprint(\"-------------------------------------------------------------------------------------\")\nprint(\"Test data RMSE: \", math.sqrt(mean_squared_error(original_ytest,test_predict)))\nprint(\"Test data MSE: \", mean_squared_error(original_ytest,test_predict))\nprint(\"Test data MAE: \", mean_absolute_error(original_ytest,test_predict))","e40e4d6c":"print(\"Train data explained variance regression score:\", explained_variance_score(original_ytrain, train_predict))\nprint(\"Test data explained variance regression score:\", explained_variance_score(original_ytest, test_predict))","13e14804":"print(\"Train data R2 score:\", r2_score(original_ytrain, train_predict))\nprint(\"Test data R2 score:\", r2_score(original_ytest, test_predict))","8d7914e4":"print(\"Train data MGD: \", mean_gamma_deviance(original_ytrain, train_predict))\nprint(\"Test data MGD: \", mean_gamma_deviance(original_ytest, test_predict))\nprint(\"----------------------------------------------------------------------\")\nprint(\"Train data MPD: \", mean_poisson_deviance(original_ytrain, train_predict))\nprint(\"Test data MPD: \", mean_poisson_deviance(original_ytest, test_predict))","ceda5da1":"# shift train predictions for plotting\n\nlook_back=time_step\ntrainPredictPlot = np.empty_like(closedf)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\nprint(\"Train predicted data: \", trainPredictPlot.shape)\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(closedf)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(closedf)-1, :] = test_predict\nprint(\"Test predicted data: \", testPredictPlot.shape)\n\nnames = cycle(['Original close price','Train predicted close price','Test predicted close price'])\n\n\nplotdf = pd.DataFrame({'date': close_stock['date'],\n                       'original_close': close_stock['close'],\n                      'train_predicted_close': trainPredictPlot.reshape(1,-1)[0].tolist(),\n                      'test_predicted_close': testPredictPlot.reshape(1,-1)[0].tolist()})\n\nfig = px.line(plotdf,x=plotdf['date'], y=[plotdf['original_close'],plotdf['train_predicted_close'],\n                                          plotdf['test_predicted_close']],\n              labels={'value':'Stock price','date': 'Date'})\nfig.update_layout(title_text='Comparision between original close price vs predicted close price',\n                  plot_bgcolor='white', font_size=15, font_color='black', legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","6d248f50":"x_input=test_data[len(test_data)-time_step:].reshape(1,-1)\ntemp_input=list(x_input)\ntemp_input=temp_input[0].tolist()\n\nfrom numpy import array\n\nlst_output=[]\nn_steps=time_step\ni=0\npred_days = 10\nwhile(i<pred_days):\n    \n    if(len(temp_input)>time_step):\n        \n        x_input=np.array(temp_input[1:])\n        #print(\"{} day input {}\".format(i,x_input))\n        x_input = x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        \n        yhat = model.predict(x_input, verbose=0)\n        #print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        #print(temp_input)\n       \n        lst_output.extend(yhat.tolist())\n        i=i+1\n        \n    else:\n        \n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        temp_input.extend(yhat[0].tolist())\n        \n        lst_output.extend(yhat.tolist())\n        i=i+1\n               \nprint(\"Output of predicted next days: \", len(lst_output))","2804ecea":"last_days=np.arange(1,time_step+1)\nday_pred=np.arange(time_step+1,time_step+pred_days+1)\nprint(last_days)\nprint(day_pred)","7c2208e9":"temp_mat = np.empty((len(last_days)+pred_days+1,1))\ntemp_mat[:] = np.nan\ntemp_mat = temp_mat.reshape(1,-1).tolist()[0]\n\nlast_original_days_value = temp_mat\nnext_predicted_days_value = temp_mat\n\nlast_original_days_value[0:time_step+1] = scaler.inverse_transform(closedf[len(closedf)-time_step:]).reshape(1,-1).tolist()[0]\nnext_predicted_days_value[time_step+1:] = scaler.inverse_transform(np.array(lst_output).reshape(-1,1)).reshape(1,-1).tolist()[0]\n\nnew_pred_plot = pd.DataFrame({\n    'last_original_days_value':last_original_days_value,\n    'next_predicted_days_value':next_predicted_days_value\n})\n\nnames = cycle(['Last 15 days close price','Predicted next 10 days close price'])\n\nfig = px.line(new_pred_plot,x=new_pred_plot.index, y=[new_pred_plot['last_original_days_value'],\n                                                      new_pred_plot['next_predicted_days_value']],\n              labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Compare last 15 days vs next 10 days',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Close Price')\n\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","b7a9e3ac":"lstmdf=closedf.tolist()\nlstmdf.extend((np.array(lst_output).reshape(-1,1)).tolist())\nlstmdf=scaler.inverse_transform(lstmdf).reshape(1,-1).tolist()[0]\n\nnames = cycle(['Close price'])\n\nfig = px.line(lstmdf,labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Plotting whole closing stock price with prediction',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Stock')\n\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","f4451f5d":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)\n\nprint(\"X_train: \", X_train.shape)\nprint(\"X_test: \", X_test.shape)","be298433":"tf.keras.backend.clear_session()\nmodel=Sequential()\nmodel.add(GRU(32,return_sequences=True,input_shape=(time_step,1)))\nmodel.add(GRU(32,return_sequences=True))\nmodel.add(GRU(32,return_sequences=True))\nmodel.add(GRU(32))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')","9aa3a053":"model.summary()","e4dd3f5e":"model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=200,batch_size=5,verbose=1)","816337ee":"### Lets Do the prediction and check performance metrics\ntrain_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)\ntrain_predict.shape, test_predict.shape","1f5e3850":"# Transform back to original form\n\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)\noriginal_ytrain = scaler.inverse_transform(y_train.reshape(-1,1)) \noriginal_ytest = scaler.inverse_transform(y_test.reshape(-1,1)) ","7e9eaf68":"# Evaluation metrices RMSE and MAE\nprint(\"Train data RMSE: \", math.sqrt(mean_squared_error(original_ytrain,train_predict)))\nprint(\"Train data MSE: \", mean_squared_error(original_ytrain,train_predict))\nprint(\"Test data MAE: \", mean_absolute_error(original_ytrain,train_predict))\nprint(\"-------------------------------------------------------------------------------------\")\nprint(\"Test data RMSE: \", math.sqrt(mean_squared_error(original_ytest,test_predict)))\nprint(\"Test data MSE: \", mean_squared_error(original_ytest,test_predict))\nprint(\"Test data MAE: \", mean_absolute_error(original_ytest,test_predict))","79f3244c":"print(\"Train data explained variance regression score:\", explained_variance_score(original_ytrain, train_predict))\nprint(\"Test data explained variance regression score:\", explained_variance_score(original_ytest, test_predict))","d1faea0c":"print(\"Train data R2 score:\", r2_score(original_ytrain, train_predict))\nprint(\"Test data R2 score:\", r2_score(original_ytest, test_predict))","88576c45":"print(\"Train data MGD: \", mean_gamma_deviance(original_ytrain, train_predict))\nprint(\"Test data MGD: \", mean_gamma_deviance(original_ytest, test_predict))\nprint(\"----------------------------------------------------------------------\")\nprint(\"Train data MPD: \", mean_poisson_deviance(original_ytrain, train_predict))\nprint(\"Test data MPD: \", mean_poisson_deviance(original_ytest, test_predict))","99d47926":"# shift train predictions for plotting\n\nlook_back=time_step\ntrainPredictPlot = np.empty_like(closedf)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\nprint(\"Train predicted data: \", trainPredictPlot.shape)\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(closedf)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(closedf)-1, :] = test_predict\nprint(\"Test predicted data: \", testPredictPlot.shape)\n\n\nnames = cycle(['Original close price','Train predicted close price','Test predicted close price'])\n\nplotdf = pd.DataFrame({'date': close_stock['date'],\n                       'original_close': close_stock['close'],\n                      'train_predicted_close': trainPredictPlot.reshape(1,-1)[0].tolist(),\n                      'test_predicted_close': testPredictPlot.reshape(1,-1)[0].tolist()})\n\nfig = px.line(plotdf,x=plotdf['date'], y=[plotdf['original_close'],plotdf['train_predicted_close'],\n                                          plotdf['test_predicted_close']],\n              labels={'value':'Stock price','date': 'Date'})\nfig.update_layout(title_text='Comparision between original close price vs predicted close price',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","91c91e2f":"x_input=test_data[len(test_data)-time_step:].reshape(1,-1)\ntemp_input=list(x_input)\ntemp_input=temp_input[0].tolist()\n\nfrom numpy import array\n\nlst_output=[]\nn_steps=time_step\ni=0\npred_days = 10\nwhile(i<pred_days):\n    \n    if(len(temp_input)>time_step):\n        \n        x_input=np.array(temp_input[1:])\n        #print(\"{} day input {}\".format(i,x_input))\n        x_input = x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        \n        yhat = model.predict(x_input, verbose=0)\n        #print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        #print(temp_input)\n       \n        lst_output.extend(yhat.tolist())\n        i=i+1\n        \n    else:\n        \n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        temp_input.extend(yhat[0].tolist())\n        \n        lst_output.extend(yhat.tolist())\n        i=i+1\n               \nprint(\"Output of predicted next days: \", len(lst_output))","65326059":"last_days=np.arange(1,time_step+1)\nday_pred=np.arange(time_step+1,time_step+pred_days+1)\nprint(last_days)\nprint(day_pred)","35803c76":"temp_mat = np.empty((len(last_days)+pred_days+1,1))\ntemp_mat[:] = np.nan\ntemp_mat = temp_mat.reshape(1,-1).tolist()[0]\n\nlast_original_days_value = temp_mat\nnext_predicted_days_value = temp_mat\n\nlast_original_days_value[0:time_step+1] = scaler.inverse_transform(closedf[len(closedf)-time_step:]).reshape(1,-1).tolist()[0]\nnext_predicted_days_value[time_step+1:] = scaler.inverse_transform(np.array(lst_output).reshape(-1,1)).reshape(1,-1).tolist()[0]\n\nnew_pred_plot = pd.DataFrame({\n    'last_original_days_value':last_original_days_value,\n    'next_predicted_days_value':next_predicted_days_value\n})\nnames = cycle(['Last 15 days close price','Predicted next 10 days close price'])\n\nfig = px.line(new_pred_plot,x=new_pred_plot.index, y=[new_pred_plot['last_original_days_value'],\n                                                      new_pred_plot['next_predicted_days_value']],\n              labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Compare last 15 days vs next 10 days',\n                  plot_bgcolor='white', font_size=15, font_color='black', legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","79668397":"grudf=closedf.tolist()\ngrudf.extend((np.array(lst_output).reshape(-1,1)).tolist())\ngrudf=scaler.inverse_transform(grudf).reshape(1,-1).tolist()[0]\n\nnames = cycle(['Close price'])\nfig = px.line(grudf,labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Plotting whole closing stock price with prediction',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Stock')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","5c0a6137":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)\n\nprint(\"X_train: \", X_train.shape)\nprint(\"X_test: \", X_test.shape)","df44fd84":"tf.keras.backend.clear_session()\nmodel=Sequential()\nmodel.add(LSTM(32,return_sequences=True,input_shape=(time_step,1)))\nmodel.add(LSTM(32,return_sequences=True))\nmodel.add(GRU(32,return_sequences=True))\nmodel.add(GRU(32))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')","516b6654":"model.summary()","8ca9a4ef":"model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=200,batch_size=5,verbose=1)","85e0e70c":"### Lets Do the prediction and check performance metrics\ntrain_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)\ntrain_predict.shape, test_predict.shape","37c302f5":"# Transform back to original form\n\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)\noriginal_ytrain = scaler.inverse_transform(y_train.reshape(-1,1)) \noriginal_ytest = scaler.inverse_transform(y_test.reshape(-1,1)) ","b5d35bea":"# Evaluation metrices RMSE and MAE\nprint(\"Train data RMSE: \", math.sqrt(mean_squared_error(original_ytrain,train_predict)))\nprint(\"Train data MSE: \", mean_squared_error(original_ytrain,train_predict))\nprint(\"Test data MAE: \", mean_absolute_error(original_ytrain,train_predict))\nprint(\"-------------------------------------------------------------------------------------\")\nprint(\"Test data RMSE: \", math.sqrt(mean_squared_error(original_ytest,test_predict)))\nprint(\"Test data MSE: \", mean_squared_error(original_ytest,test_predict))\nprint(\"Test data MAE: \", mean_absolute_error(original_ytest,test_predict))","172afbef":"print(\"Train data explained variance regression score:\", explained_variance_score(original_ytrain, train_predict))\nprint(\"Test data explained variance regression score:\", explained_variance_score(original_ytest, test_predict))","dd1b702c":"print(\"Train data R2 score:\", r2_score(original_ytrain, train_predict))\nprint(\"Test data R2 score:\", r2_score(original_ytest, test_predict))","a9e7f194":"print(\"Train data MGD: \", mean_gamma_deviance(original_ytrain, train_predict))\nprint(\"Test data MGD: \", mean_gamma_deviance(original_ytest, test_predict))\nprint(\"----------------------------------------------------------------------\")\nprint(\"Train data MPD: \", mean_poisson_deviance(original_ytrain, train_predict))\nprint(\"Test data MPD: \", mean_poisson_deviance(original_ytest, test_predict))","880aa143":"# shift train predictions for plotting\n\nlook_back=time_step\ntrainPredictPlot = np.empty_like(closedf)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\nprint(\"Train predicted data: \", trainPredictPlot.shape)\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(closedf)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(closedf)-1, :] = test_predict\nprint(\"Test predicted data: \", testPredictPlot.shape)\n\nnames = cycle(['Original close price','Train predicted close price','Test predicted close price'])\n\nplotdf = pd.DataFrame({'date': close_stock['date'],\n                       'original_close': close_stock['close'],\n                      'train_predicted_close': trainPredictPlot.reshape(1,-1)[0].tolist(),\n                      'test_predicted_close': testPredictPlot.reshape(1,-1)[0].tolist()})\n\nfig = px.line(plotdf,x=plotdf['date'], y=[plotdf['original_close'],plotdf['train_predicted_close'],\n                                          plotdf['test_predicted_close']],\n              labels={'value':'Stock price','date': 'Date'})\nfig.update_layout(title_text='Comparision between original close price vs predicted close price',\n                  plot_bgcolor='white', font_size=15, font_color='black', legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","9f927f83":"x_input=test_data[len(test_data)-time_step:].reshape(1,-1)\ntemp_input=list(x_input)\ntemp_input=temp_input[0].tolist()\n\nfrom numpy import array\n\nlst_output=[]\nn_steps=time_step\ni=0\npred_days = 10\nwhile(i<pred_days):\n    \n    if(len(temp_input)>time_step):\n        \n        x_input=np.array(temp_input[1:])\n        #print(\"{} day input {}\".format(i,x_input))\n        x_input = x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        \n        yhat = model.predict(x_input, verbose=0)\n        #print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        #print(temp_input)\n       \n        lst_output.extend(yhat.tolist())\n        i=i+1\n        \n    else:\n        \n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        temp_input.extend(yhat[0].tolist())\n        \n        lst_output.extend(yhat.tolist())\n        i=i+1\n               \nprint(\"Output of predicted next days: \", len(lst_output))","126ee32d":"last_days=np.arange(1,time_step+1)\nday_pred=np.arange(time_step+1,time_step+pred_days+1)\nprint(last_days)\nprint(day_pred)","e29a4a55":"temp_mat = np.empty((len(last_days)+pred_days+1,1))\ntemp_mat[:] = np.nan\ntemp_mat = temp_mat.reshape(1,-1).tolist()[0]\n\nlast_original_days_value = temp_mat\nnext_predicted_days_value = temp_mat\n\nlast_original_days_value[0:time_step+1] = scaler.inverse_transform(closedf[len(closedf)-time_step:]).reshape(1,-1).tolist()[0]\nnext_predicted_days_value[time_step+1:] = scaler.inverse_transform(np.array(lst_output).reshape(-1,1)).reshape(1,-1).tolist()[0]\n\nnew_pred_plot = pd.DataFrame({\n    'last_original_days_value':last_original_days_value,\n    'next_predicted_days_value':next_predicted_days_value\n})\nnames = cycle(['Last 15 days close price','Predicted next 10 days close price'])\n\nfig = px.line(new_pred_plot,x=new_pred_plot.index, y=[new_pred_plot['last_original_days_value'],\n                                                      new_pred_plot['next_predicted_days_value']],\n              labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Compare last 15 days vs next 10 days',\n                  plot_bgcolor='white', font_size=15, font_color='black', legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","9b646250":"lstmgrudf=closedf.tolist()\nlstmgrudf.extend((np.array(lst_output).reshape(-1,1)).tolist())\nlstmgrudf=scaler.inverse_transform(lstmgrudf).reshape(1,-1).tolist()[0]\n\nnames = cycle(['Close price'])\n\nfig = px.line(lstmgrudf,labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Plotting whole closing stock price with prediction',\n                  plot_bgcolor='white', font_size=15, font_color='black', legend_title_text='Stock')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","5bb219fc":"finaldf = pd.DataFrame({\n    'svr':svrdf,\n    'rf':rfdf,\n    'knn':knndf,\n    'lstm':lstmdf,\n    'gru':grudf,\n    'lstm_gru':lstmgrudf,\n})\nfinaldf.head()","1318bb3a":"names = cycle(['SVR', 'RF','KNN','LSTM','GRU','LSTM + GRU'])\n\nfig = px.line(finaldf[225:], x=finaldf.index[225:], y=[finaldf['svr'][225:],finaldf['rf'][225:], finaldf['knn'][225:], \n                                          finaldf['lstm'][225:], finaldf['gru'][225:], finaldf['lstm_gru'][225:]],\n             labels={'x': 'Timestamp','value':'Stock close price'})\nfig.update_layout(title_text='Final stock analysis chart', font_size=15, font_color='black',legend_title_text='Algorithms')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n\nfig.show()","8bd23792":"<a name=\"rfevalmat\"><\/a>\n\n#### Evaluation metrices RMSE, MSE and MAE\n\nRoot Mean Square Error (RMSE), Mean Square Error (MSE) and Mean absolute Error (MAE) are a standard way to measure the error of a model in predicting quantitative data.","eb1f45e0":"<a name=\"trend\"><\/a>\n\n### Trend comparision between stock price, open price, close price, high price, low price","e33199a4":"<a name=\"sortdate\"><\/a>\n\n### Sorting dataset by date format","b19a5222":"<a name=\"grurloss\"><\/a>\n\n#### Regression Loss Mean Gamma deviance regression loss (MGD) and Mean Poisson deviance regression loss (MPD)","fd4323ab":"<a name=\"knnpred10\"><\/a>\n\n#### Predicting next 10 days","bfc2fcdb":"<a name=\"dateformat\"><\/a>\n\n### Convert date from string to date format","91a77e6a":"<a name=\"eda\"><\/a>\n\n### EDA - Exploratory Data Analysis","449e9e8a":"<a name=\"knn\"><\/a>\n\n### K-nearest neighgbour - KNN","ddd050e8":"<a name=\"rf\"><\/a>\n\n### Random Forest Regressor - RF","1baef8e9":"<a name=\"rfrsquare\"><\/a>\n\n#### R<sup>2<\/sup> score for regression\n\nR-squared (R2) is a statistical measure that represents the proportion of the variance for a dependent variable that's explained by an independent variable or variables in a regression model.\n\n1 = Best <br>\n0 or < 0 = worse","4ba45fc7":"<a name=\"lstmwholepred\"><\/a>\n\n#### Plotting whole closing stock price with prediction","1c411469":"<a name=\"svrlast25\"><\/a>\n\n#### Plotting last 15 days and next predicted 10 days","a948ed83":"<a name=\"knncomparechart\"><\/a>\n\n#### Comparision between original stock close price vs predicted close price","8e2df3fb":"<a name=\"svrevalmat\"><\/a>\n\n#### Evaluation metrices RMSE, MSE and MAE\n\nRoot Mean Square Error (RMSE), Mean Square Error (MSE) and Mean absolute Error (MAE) are a standard way to measure the error of a model in predicting quantitative data.","4166f1ba":"<a name=\"svrwholepred\"><\/a>\n\n#### Plotting whole closing stock price with prediction","7f194767":"<a name=\"duration\"><\/a>\n\n### Get the duration of dataset","fec5c75e":"<a name=\"lstmevalmat\"><\/a>\n\n#### LSTM model structure","8a0ebaca":"<a name=\"rfpred10\"><\/a>\n\n#### Predicting next 10 days","d86d14f1":"<a name=\"closepred\"><\/a>\n\n### Close price prediction preparation and preprocessing","530386a7":"<a name=\"rfwholepred\"><\/a>\n\n#### Plotting whole closing stock price with prediction","5b72a6e1":"<a name=\"lstm_grursquare\"><\/a>\n\n#### R<sup>2<\/sup> score for regression\n\nR-squared (R2) is a statistical measure that represents the proportion of the variance for a dependent variable that's explained by an independent variable or variables in a regression model.\n\n1 = Best <br>\n0 or < 0 = worse","be9c704e":"<a name=\"lstmcomparechart\"><\/a>\n\n#### Comparision between original stock close price vs predicted close price","8e2e9d71":"<a name=\"gruwholepred\"><\/a>\n\n#### Plotting whole closing stock price with prediction","d834646a":"<a name=\"rfevariance\"><\/a>\n\n#### Explained variance regression score\n\n\nThe explained variance score explains the dispersion of errors of a given dataset, and the formula is written as follows: Here, and Var(y) is the variance of prediction errors and actual values respectively. Scores close to 1.0 are highly desired, indicating better squares of standard deviations of errors.","21ac87eb":"<a name=\"rfrloss\"><\/a>\n\n#### Regression Loss Mean Gamma deviance regression loss (MGD) and Mean Poisson deviance regression loss (MPD)","c4b0caf3":"<a name=\"svrpred10\"><\/a>\n\n#### Predicting next 10 days","f8f85e5a":"## For more details of time series analysis with stock prediction see [Tesla stock prediction](https:\/\/www.kaggle.com\/ysthehurricane\/tesla-stock-price-prediction-using-gru-tutorial) notebbok","4dfcd715":"<a name=\"knnwholepred\"><\/a>\n\n#### Plotting whole closing stock price with prediction","6dbd8622":"### Table Content\n---------------------\n\n- [Summary](#summary)\n- [Import libraries and packages](#libs)\n- [Import Reliance dataset](#dataset)\n    - [Rename columns name](#cname)\n- [Preprocessing data](#predata)\n    - [Checking Null\/NA value and remove it](#nullna)\n    - [Checking columns datatype](#coldt)\n    - [Converting Date column from string to datetime format](#dateformat)\n    - [Sorting dataset by Date](#sortdate)\n- [Exploratory Data Analysis - EDA](#eda)\n    - [Get total duration](#duration)\n    - [Monthwise comparision between Stock actual, open and close price with chart](#month_op_close)\n    - [Monthwise High and Low stock price with chart](#month_high_low)\n    - [Trend comparision between stock price, open price, close price, high price, low price with chart](#trend) \n- [Close price prediction preparation and preprocessing](#closepred)\n    - [Make separate dataframe with close price](#sepclose)\n    - [Plotting stock close price chart](#plotclose)\n    - [Normalizing\/scaling close values between 0 to 1](#norm)\n    - [Split data for training and testing](#splitdata)\n- [Prepared data for according to time-series-prediction](#tsp)\n- [Algorithms](#algo)\n    - [Super vector regressor - SVR](#svr)\n        - [RMSE, MSE and MAE](#svrevalmat)\n        - [Explained variance regression score](#svrevariance)\n        - [R<sup>2<\/sup> score for regression](#svrrsquare)\n        - [Mean Gamma deviance regression loss (MGD) and Mean Poisson deviance regression loss (MPD)](#svrrloss)\n        - [Comparision between original stock close price vs predicted close price with chart](#svrcomparechart)\n        - [Predicting next 10 days](#svrpred10)\n        - [Plotting last 15 days and next predicted 10 days](#svrlast25)\n        - [Plotting whole closing stock price with next 10 days prediction](#svrwholepred)\n    - [Random Forest Regressor - RF](#rf)\n        - [RMSE, MSE and MAE](#rfevalmat)\n        - [Explained variance regression score](#rfevariance)\n        - [R<sup>2<\/sup> score for regression](#rfrsquare)\n        - [Mean Gamma deviance regression loss (MGD) and Mean Poisson deviance regression loss (MPD)](#rfrloss)\n        - [Comparision between original stock close price vs predicted close price with chart](#rfcomparechart)\n        - [Predicting next 10 days](#rfpred10)\n        - [Plotting last 15 days and next predicted 10 days](#rflast25)\n        - [Plotting whole closing stock price with next 10 days prediction](#rfwholepred)\n    - [K-nearest neighbour - KNN](#knn)\n        - [RMSE, MSE and MAE](#knnevalmat)\n        - [Explained variance regression score](#knnevariance)\n        - [R<sup>2<\/sup> score for regression](#knnrsquare)\n        - [Mean Gamma deviance regression loss (MGD) and Mean Poisson deviance regression loss (MPD)](#knnrloss)\n        - [Comparision between original stock close price vs predicted close price with chart](#knncomparechart)\n        - [Predicting next 10 days](#knnpred10)\n        - [Plotting last 15 days and next predicted 10 days](#knnlast25)\n        - [Plotting whole closing stock price with next 10 days prediction](#knnwholepred)\n    - [LSTM](#lstm)\n        - [RMSE, MSE and MAE](#lstmevalmat)\n        - [Explained variance regression score](#lstmevariance)\n        - [R<sup>2<\/sup> score for regression](#lstmrsquare)\n        - [Mean Gamma deviance regression loss (MGD) and Mean Poisson deviance regression loss (MPD)](#lstmrloss)\n        - [Comparision between original stock close price vs predicted close price with chart](#lstmcomparechart)\n        - [Predicting next 10 days](#lstmpred10)\n        - [Plotting last 15 days and next predicted 10 days](#lstmlast25)\n        - [Plotting whole closing stock price with next 10 days prediction](#lstmwholepred)\n    - [GRU](#gru)\n        - [RMSE, MSE and MAE](#gruevalmat)\n        - [Explained variance regression score](#gruevariance)\n        - [R<sup>2<\/sup> score for regression](#grursquare)\n        - [Mean Gamma deviance regression loss (MGD) and Mean Poisson deviance regression loss (MPD)](#grurloss)\n        - [Comparision between original stock close price vs predicted close price with chart](#grucomparechart)\n        - [Predicting next 10 days](#grupred10)\n        - [Plotting last 15 days and next predicted 10 days](#grulast25)\n        - [Plotting whole closing stock price with next 10 days prediction](#gruwholepred)\n    - [LSTM + GRU](#lstm_gru)\n        - [RMSE, MSE and MAE](#lstm_gruevalmat)\n        - [Explained variance regression score](#lstm_gruevariance)\n        - [R<sup>2<\/sup> score for regression](#lstm_grursquare)\n        - [Mean Gamma deviance regression loss (MGD) and Mean Poisson deviance regression loss (MPD)](#lstm_grurloss)\n        - [Comparision between original stock close price vs predicted close price with chart](#lstm_grucomparechart)\n        - [Predicting next 10 days](#lstm_grupred10)\n        - [Plotting last 15 days and next predicted 10 days](#lstm_grulast25)\n        - [Plotting whole closing stock price with next 10 days prediction](#lstm_gruwholepred)\n- [Conclusion](#conclusion)\n    - [Plotting final chart with all algorithms and compare prediction to each others](#finalchart)","73618355":"<a name=\"algo\"><\/a>\n\n### Algorithms","ebe85b74":"<a name=\"lstmrloss\"><\/a>\n\n#### Regression Loss Mean Gamma deviance regression loss (MGD) and Mean Poisson deviance regression loss (MPD)","fbf554e2":"<a name=\"lstmevalmat\"><\/a>\n\n#### Evaluation metrices RMSE, MSE and MAE\n\nRoot Mean Square Error (RMSE), Mean Square Error (MSE) and Mean absolute Error (MAE) are a standard way to measure the error of a model in predicting quantitative data.","66b33958":"<a name=\"lstmlast25\"><\/a>\n\n#### Plotting last 15 days and next predicted 10 days","f54da706":"<a name=\"lstm_grupred10\"><\/a>\n\n#### Predicting next 10 days","cc9673f6":"<a name=\"coldt\"><\/a>\n\n### Checking datatype of each column","65b735b8":"<a name=\"splitdata\"><\/a>\n\n### Split data for training and testing\nRatio for training and testing data is 65:35","969c9b28":"<a name=\"knnevalmat\"><\/a>\n\n#### Evaluation metrices RMSE, MSE and MAE\n\nRoot Mean Square Error (RMSE), Mean Square Error (MSE) and Mean absolute Error (MAE) are a standard way to measure the error of a model in predicting quantitative data.","0a55365d":"<a name=\"lstm_grucomparechart\"><\/a>\n\n#### Comparision between original stock close price vs predicted close price","5de04d50":"<a name=\"summary\"><\/a>\n### Summary","74e6caab":"<a name=\"lstm_gru\"><\/a>\n\n### LSTM + GRU","62a54f6f":"<a name=\"sepclose\"><\/a>\n\n### Make separate dataframe with close price","f776d3fd":"<a name=\"lstmpred10\"><\/a>\n\n#### Predicting next 10 days","f9b42b2c":"\n#### GRU model structure","ff3e0560":"<a name=\"tsp\"><\/a>\n\n### Create new dataset according to requirement of time-series prediction ","d016b9d3":"<a name=\"svrcomparechart\"><\/a>\n\n#### Comparision between original stock close price vs predicted close price","a15e462d":"<a name=\"svr\"><\/a>\n\n### Super vector regression - SVR","0e1e3261":"<a name=\"nullna\"><\/a>\n### Checking null and na value","c8e5add6":"<a name=\"grupred10\"><\/a>\n\n#### Predicting next 10 days","8f63582e":"<a name=\"grulast25\"><\/a>\n\n#### Plotting last 15 days and next predicted 10 days","40c0e619":"<a name=\"svrrsquare\"><\/a>\n\n#### R<sup>2<\/sup> score for regression\n\nR-squared (R2) is a statistical measure that represents the proportion of the variance for a dependent variable that's explained by an independent variable or variables in a regression model.\n\n1 = Best <br>\n0 or < 0 = worse","6173bc51":"<a name=\"lstmrsquare\"><\/a>\n\n#### R<sup>2<\/sup> score for regression\n\nR-squared (R2) is a statistical measure that represents the proportion of the variance for a dependent variable that's explained by an independent variable or variables in a regression model.\n\n1 = Best <br>\n0 or < 0 = worse","67b447ec":"<a name=\"knnlast25\"><\/a>\n\n#### Plotting last 15 days and next predicted 10 days","375a0ae5":"<a name=\"gruevalmat\"><\/a>\n\n#### Evaluation metrices RMSE, MSE and MAE\n\nRoot Mean Square Error (RMSE), Mean Square Error (MSE) and Mean absolute Error (MAE) are a standard way to measure the error of a model in predicting quantitative data.","e29ab713":"<a name=\"knnevariance\"><\/a>\n\n#### Explained variance regression score\n\n\nThe explained variance score explains the dispersion of errors of a given dataset, and the formula is written as follows: Here, and Var(y) is the variance of prediction errors and actual values respectively. Scores close to 1.0 are highly desired, indicating better squares of standard deviations of errors.","2a8781ba":"<a name=\"month_high_low\"><\/a>\n\n### Monthwise High and Low stock price ","74af497c":"<a name=\"lstm_gruevariance\"><\/a>\n\n#### Explained variance regression score\n\n\nThe explained variance score explains the dispersion of errors of a given dataset, and the formula is written as follows: Here, and Var(y) is the variance of prediction errors and actual values respectively. Scores close to 1.0 are highly desired, indicating better squares of standard deviations of errors.","32876f20":"<a name=\"lstm\"><\/a>\n\n### LSTM","138706b3":"<a name=\"lstmevariance\"><\/a>\n\n#### Explained variance regression score\n\n\nThe explained variance score explains the dispersion of errors of a given dataset, and the formula is written as follows: Here, and Var(y) is the variance of prediction errors and actual values respectively. Scores close to 1.0 are highly desired, indicating better squares of standard deviations of errors.","a0c78b12":"<a name=\"lstm_grulast25\"><\/a>\n\n#### Plotting last 15 days and next predicted 10 days","4e34df26":"<a name=\"knnrloss\"><\/a>\n\n#### Regression Loss Mean Gamma deviance regression loss (MGD) and Mean Poisson deviance regression loss (MPD)","c7c48cbb":"<a name=\"knnrsquare\"><\/a>\n\n#### R<sup>2<\/sup> score for regression\n\nR-squared (R2) is a statistical measure that represents the proportion of the variance for a dependent variable that's explained by an independent variable or variables in a regression model.\n\n1 = Best <br>\n0 or < 0 = worse","2d9ae131":"<a name=\"plotclose\"><\/a>\n\n### Plotting stock close price chart","d1673488":"<a name=\"lstm_gruwholepred\"><\/a>\n\n#### Plotting whole closing stock price with prediction","d12a14a7":"<a name=\"gru\"><\/a>\n\n### GRU","e0ea8b83":"<a name=\"svrevariance\"><\/a>\n\n#### Explained variance regression score\n\n\nThe explained variance score explains the dispersion of errors of a given dataset, and the formula is written as follows: Here, and Var(y) is the variance of prediction errors and actual values respectively. Scores close to 1.0 are highly desired, indicating better squares of standard deviations of errors.","ad97d205":"<a name=\"libs\"><\/a>\n### Import libraries and packages","3bab79f4":"<a name=\"predata\"><\/a>\n\n### Preprocessing Data","b5f5f015":"<a name=\"final_chart\"><\/a>\n\n### Conclusion Chart","74bd8f22":"<a name=\"cname\"><\/a>\n### Rename columns","a32dfcb4":"<a name=\"svrrloss\"><\/a>\n\n#### Regression Loss Mean Gamma deviance regression loss (MGD) and Mean Poisson deviance regression loss (MPD)","823f23a6":"<a name=\"grursquare\"><\/a>\n\n#### R<sup>2<\/sup> score for regression\n\nR-squared (R2) is a statistical measure that represents the proportion of the variance for a dependent variable that's explained by an independent variable or variables in a regression model.\n\n1 = Best <br>\n0 or < 0 = worse","c0eb25c9":"<a name=\"norm\"><\/a>\n\n### Normalizing \/ scaling close value between 0 to 1","fd9a8d28":"<a name=\"lstm_grurloss\"><\/a>\n\n#### Regression Loss Mean Gamma deviance regression loss (MGD) and Mean Poisson deviance regression loss (MPD)","6193d8b0":"<a name=\"grucomparechart\"><\/a>\n\n#### Comparision between original stock close price vs predicted close price","320ef1c5":"#### Model structure","0c16fb2e":"<a name=\"gruevariance\"><\/a>\n\n#### Explained variance regression score\n\n\nThe explained variance score explains the dispersion of errors of a given dataset, and the formula is written as follows: Here, and Var(y) is the variance of prediction errors and actual values respectively. Scores close to 1.0 are highly desired, indicating better squares of standard deviations of errors.","d6c3ba88":"<a name=\"dataset\"><\/a>\n### Import dataset ","eded8a5b":"<a name=\"rflast25\"><\/a>\n\n#### Plotting last 15 days and next predicted 10 days","f91a0fd9":"<a name=\"lstm_gruevalmat\"><\/a>\n\n#### Evaluation metrices RMSE, MSE and MAE\n\nRoot Mean Square Error (RMSE), Mean Square Error (MSE) and Mean absolute Error (MAE) are a standard way to measure the error of a model in predicting quantitative data.","91ca37c2":"<a name=\"rfcomparechart\"><\/a>\n\n#### Comparision between original stock close price vs predicted close price","58ee3cba":"<a name=\"month_op_close\"><\/a>\n\n### Monthwise comparision between Stock actual, open and close price","8c6efff1":"![Capture.PNG](attachment:c3d4d291-d5ae-42ff-b57e-d2e6c93a995b.PNG) "}}