{"cell_type":{"a905df9c":"code","7212fd61":"code","4ae2adc9":"code","470c9ea7":"code","2c8083d3":"code","8c909712":"code","b4a6f86f":"code","bbfc19f9":"code","d4c7d8b9":"code","a4411c8d":"code","efed9c10":"markdown","90430754":"markdown","9479b43c":"markdown","1d4c2b8b":"markdown","ab091d1e":"markdown"},"source":{"a905df9c":"import numpy as np\nimport pandas as pd\nimport os\nimport tensorflow as tf\nfrom catboost import CatBoostClassifier\nimport pandas as pd\nimport sklearn\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split","7212fd61":"def sample_images(images, row_count, column_count):\n    fig, axs = plt.subplots(row_count, column_count, figsize=(10,10))\n    for i in range(row_count):\n        for j in range(column_count):\n            axs[i,j].imshow(images[i * column_count + j])\n            axs[i,j].axis('off')\n    plt.show()","4ae2adc9":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","470c9ea7":"train.head()","2c8083d3":"train_labels = train.pop(\"label\")","8c909712":"test.head()","b4a6f86f":"row_count = 15\ncol_count = 15\nimages = np.array(train.iloc[np.random.choice(train.shape[0], row_count * col_count)])[:, :784].reshape((-1, 28, 28))\nsample_images(images, row_count, col_count)","bbfc19f9":"def evaluate(y_true, y_pred):\n    print(y_true.shape, y_pred.shape)\n    acc = sklearn.metrics.accuracy_score(y_true, y_pred)\n    print(\"Accuracy score: %.2f\"%(acc))\n    print(\"Classification report:\")\n    print(sklearn.metrics.classification_report(y_true, y_pred))","d4c7d8b9":"kfold = sklearn.model_selection.StratifiedKFold(5, shuffle=True, random_state=42)\nmodels = []\n# Train Validation Split is regarded as calling K-Fold algorithm once.\nis_validation_split = False\nfor fold, (train_indices, val_indices) in enumerate(kfold.split(train, train_labels)):\n    print(\"Training with fold %d\"%(fold + 1))\n    X_train = train.iloc[train_indices]\n    y_train = train_labels.iloc[train_indices]\n    X_val = train.iloc[val_indices]\n    y_val = train_labels.iloc[val_indices]\n    cat_params = {\n        'iterations': 10000, \n        'depth': 6, \n        'task_type' : 'GPU',\n        'use_best_model': True,\n        'early_stopping_rounds': 1000,\n        'learning_rate': 0.03,\n        \"verbose\": 1000\n    }\n    cat = CatBoostClassifier(\n        **cat_params\n    )\n    cat.fit(X_train, y_train, eval_set=[(X_val, y_val)])\n    models.append(cat)\n    evaluate(y_val, cat.predict(X_val).reshape(-1))\n    if is_validation_split:\n        break","a4411c8d":"test_labels = np.argmax(np.mean([model.predict_proba(test) for model in models], axis=0), axis=-1)\nimage_ids = np.arange(1, test_labels.shape[0]+1)\nresult = np.concatenate((image_ids.reshape(image_ids.shape[0], 1), test_labels.reshape(test_labels.shape[0], 1)), axis=1)\ndf = pd.DataFrame(result, columns=[\"ImageId\", \"Label\"], dtype='int')\ndf.to_csv(\"submission.csv\", index=False)","efed9c10":"## Import necessary Libraries","90430754":"## Load data","9479b43c":"## Submission","1d4c2b8b":"## Model Development & Evaluation","ab091d1e":"## Utilities"}}