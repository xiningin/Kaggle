{"cell_type":{"e644c2a2":"code","2452333b":"code","15807f2c":"code","04b58055":"code","0e55e138":"code","96be2eba":"code","52e27885":"code","7926d711":"code","55576e50":"code","5c03fe99":"code","e38550a8":"code","c1d5ef39":"code","adff7b73":"code","28be21b8":"code","ad3c2087":"code","9bef0f33":"code","7ad992ed":"markdown","02ba6cbf":"markdown","d3248963":"markdown","9a5f3350":"markdown","b1adc7d0":"markdown","5a4d8ba5":"markdown","420e0010":"markdown","537a5463":"markdown","8f749405":"markdown","2c6c89af":"markdown","878fcc85":"markdown","dc0b1c83":"markdown","a866aa5b":"markdown","3a624220":"markdown"},"source":{"e644c2a2":"# Array manipulation\nimport numpy as np\n\n# Reading images and data augmentation\nfrom keras.preprocessing.image import ImageDataGenerator,img_to_array,load_img\n\n# Showing images\nimport matplotlib.pyplot as plt\n\n# Transfer learning\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\n# VGG16 Model\nfrom keras.applications.vgg16 import VGG16\n\n# Path processing\nfrom glob import glob\n","2452333b":"random_sample_path = \"..\/input\/fruits\/fruits-360\/Training\/Apple Crimson Snow\/0_100.jpg\"\nrandom_sample_img = load_img(random_sample_path)\nrandom_sample_array = img_to_array(random_sample_img)\n\nplt.imshow(random_sample_img)\nplt.axis(\"off\")\nplt.show()\n","15807f2c":"# Learning shape of the image\nrandom_sample_array.shape","04b58055":"numClass = len(glob(\"..\/input\/fruits\/fruits-360\/Training\"+\"\/*\"))\n\nprint(\"There are {} classes in Fruits360 dataset\".format(numClass))","0e55e138":"vgg = VGG16()","96be2eba":"vgg.summary()","52e27885":"vgg_layer_list = vgg.layers\n\n# We created a blank model, we will add VGG layers to this blank model\nmodel = Sequential()\n\n# We iterate the index of each layer and we will append all the layers except prediction layer\nfor i in range(len(vgg_layer_list)-1):\n    model.add(vgg_layer_list[i])\n    \nmodel.summary()\n","7926d711":"for layers in model.layers:\n    layers.trainable = False","55576e50":"model.add(Dense(numClass,activation=\"softmax\"))\nmodel.summary()","5c03fe99":"model.compile(optimizer=\"RMSprop\",loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])\n","e38550a8":"train_path = \"..\/input\/fruits\/fruits-360\/Training\"\ntest_path  = \"..\/input\/fruits\/fruits-360\/Test\"","c1d5ef39":"# First, we need to read our data, easisest way to read data is using a image data generator\ntrain_data = ImageDataGenerator().flow_from_directory(train_path,target_size=(224,224))\n\n# Now let's create our test generator as well.\ntest_data = ImageDataGenerator().flow_from_directory(test_path,target_size=(224,224))\n","adff7b73":"BATCH_SIZE = 32\nEPOCHS = 16","28be21b8":"history = model.fit_generator(train_data,\n                              epochs=EPOCHS,\n                              validation_data=test_data,\n                              validation_steps = 800\/BATCH_SIZE,\n                              steps_per_epoch = 1600\/BATCH_SIZE\n                             )\n","ad3c2087":"# loss\n# accuracy\n# vall_loss\n# vall_accuracy\n\nplt.subplots(figsize=(6,4))\nplt.plot(history.history[\"loss\"],label=\"Train Loss\",color=\"green\")\nplt.plot(history.history[\"val_loss\"],label=\"Validation Loss\",color=\"blue\")\nplt.xlabel(\"Epoch Number\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","9bef0f33":"plt.subplots(figsize=(6,4))\nplt.plot(history.history[\"accuracy\"],label=\"Train Accuracy\",color=\"green\")\nplt.plot(history.history[\"val_accuracy\"],label=\"Validation Accuracy\",color=\"blue\")\nplt.xlabel(\"Epoch Number\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()","7ad992ed":"* As we can see, prediction layer of VGG16 has 1000 neuron but our data just have 131 classes. So we have to remove the prediction layer. And after that we have to add our prediction layer.","02ba6cbf":"# Introduction\nHello people, welcome to this kernel. In this kernel I am going to classify different fruits using VGG16 model. Before starting let's take a look at the content of this kernel\n\n# Content\n1. Importing Librarires\n1. Checking A Sample \/ Determining Number Of Classes\n1. VGG16 Model\n1. Training and Testing\n1. Train Analyses\n1. Conclusion","d3248963":"# Importing Libraries\nIn this section I am going to import libraries that I will use.","9a5f3350":"VGG16 model trained on ImageNet dataset, ImageNet dataset has 1000 classes and 14 million images. So model's learnt parameters learnt with a large dataset, we don't need to train them again.","b1adc7d0":"# Train Analyses\nIn this section I am going to examine the train.","5a4d8ba5":"# VGG16 Model\nIn this section I am going to prepare VGG16 model.","420e0010":"# Conclusion\n\nThanks for your attention, if you have any questions in your mind, please ask. I will definetely return to you.\n\nAnd if you liked this kernel, if you upvote this kernel I would be glad.","537a5463":"# Checking A Sample \/ Determining Number Of Classes\nIn this section I am going to check a random sample from the dataset in order to learn shapes of images after that I will determine the number of classes.","8f749405":"# Training and Testing\nIn this section I am going to train the model.","2c6c89af":"* Maybe you think that our images are 100x100, why did we give 224,224 as target size.\n\nIn ImageNet dataset images are 224x244, so input layer of VGG16 has 224x224 as target size. In order to solve this problem there are several ways.\n\n1. Just give target size as 224,224\n1. Change the target size of the input layer of model.","878fcc85":"We are ready to compile our model, in this model we will use RMSprop as optimizer and categorical_crossentropy as loss. And we will use accuracy and confusion matrix as metric but I won't mention confusion matrix in metrics list, we will create confusion matrix using scikit learn.;","dc0b1c83":"* First, I've created a vgg model using keras, keras automatically downloaded the parameters of VGG16.","a866aa5b":"* Our images' shapes are 100,100,3","3a624220":"* Now I am going to add last layer, prediction layer of our model."}}