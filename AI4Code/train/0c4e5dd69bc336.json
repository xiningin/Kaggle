{"cell_type":{"f8f4c546":"code","0c6878ef":"code","142f99e7":"code","3137faa9":"code","6f381205":"code","34f819c9":"code","1886f71c":"code","4247b369":"code","27db5935":"code","b8670e91":"code","7b6bc6db":"code","0d6570e3":"code","3ac808e2":"code","b80259bb":"code","42ea5cfa":"code","f766fcd5":"code","32fc3ecf":"code","60cc2156":"code","2e32c8cd":"code","d07db929":"code","099c6985":"code","32ddca07":"code","60b5516e":"code","5d20cec4":"code","90f0fb6a":"code","e01d82e7":"code","a86dd77b":"code","96cc95b5":"code","2eddcc74":"code","f47d4e0e":"code","9cf13ad5":"code","79c481f5":"code","f9a31a6f":"code","31392380":"code","e087be47":"code","6ec80b58":"code","54f1a923":"code","4d611581":"markdown","3f117a1b":"markdown","be70b3fa":"markdown","c341e70d":"markdown","ea5d7f29":"markdown","b4d198bb":"markdown","3cee60a2":"markdown","ee36fce2":"markdown"},"source":{"f8f4c546":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n    \n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c6878ef":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n%matplotlib inline\nimport cufflinks as cf\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot \ninit_notebook_mode(connected=True)\n\ninit_notebook_mode(connected=True)\ncf.go_offline()\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfrom IPython.core.display import HTML\n\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","142f99e7":"import requests\n\n\nurl = \"https:\/\/www.worldometers.info\/coronavirus\/#countries\"\n\nheader = {\n  \"User-Agent\": \"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/50.0.2661.75 Safari\/537.36\",\n  \"X-Requested-With\": \"XMLHttpRequest\"\n}\nr = requests.get(url, headers=header)\n\ndfs = pd.read_html(r.text)\ndf = dfs[0]\n\ntime_series = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv',parse_dates=['Date'])\n\n","3137faa9":"type(df)","6f381205":"df.isnull().sum()","34f819c9":"# renaming the columns\ndf.rename(columns = {'Country,Other':'Country'},inplace = True)\ndf.rename(columns = {'Serious,Critical':'Serious'},inplace = True)\ndf.rename(columns = {'Tot Cases\/1M pop':'TotalCases\/1M'},inplace = True)\ntime_series.rename(columns = {'Country\/Region':'Country'},inplace = True)\ndf.drop('#',axis =1,inplace = True)\ndf.head()\n","1886f71c":"#drop the columns in time_series\ntime_series.drop('Province\/State',axis =1,inplace = True)\ntime_series.head()","4247b369":"# Lets check the data types and change it\ndf.dtypes","27db5935":"#changing the data type\n\ndf['TotalCases'] = df['TotalCases'].fillna(0).astype('int')\ndf['TotalDeaths'] = df['TotalDeaths'].fillna(0).astype('int')\ndf['TotalRecovered'] = df['TotalRecovered'].fillna(0).astype('int')\ndf['ActiveCases'] = df['ActiveCases'].fillna(0).astype('int')\ndf['Serious'] = df['Serious'].fillna(0).astype('int')\ndf['Deaths\/1M pop'] = df['Deaths\/1M pop'].fillna(0).astype('int')\ndf['TotalTests'] = df['TotalTests'].fillna(0).astype('int')\ndf['Tests\/ 1M pop'] = df['Tests\/ 1M pop'].fillna(0).astype('int')\ndf['NewCases'] = df['NewCases'].fillna(0)\ndf[['NewCases']] = df[['NewCases']].replace('[\\+,]', '', regex=True).astype(int)\ndf['NewDeaths'] = df['NewDeaths'].fillna(0)\ndf[['NewDeaths']] = df[['NewDeaths']].replace('[\\+,]', '', regex=True).astype(int)\ndf[['Population']] = df[['Population']].fillna(0).astype('int')\ntime_series.fillna(0)\ntime_series.isnull().sum()\n","b8670e91":"#highlighting the most no of cases\ndataframe = df.iloc[1:216,:-1]\n\n\ndataframe.style.background_gradient(cmap = 'Reds')","7b6bc6db":"group1 = time_series.groupby(['Date', 'Country'])['Confirmed', 'Deaths','Recovered'].sum().reset_index()\nheat= px.choropleth(group1, locations=\"Country\", locationmode='country names', color=np.log(group1[\"Confirmed\"]), \n                    hover_name=\"Country\",projection = 'natural earth',title='Heatmap', color_continuous_scale=px.colors.sequential.Blues)\n\nheat.update(layout_coloraxis_showscale=False)\nheat.show()","0d6570e3":"group1","3ac808e2":"fig_heat= px.choropleth(group1, locations=\"Country\", locationmode='country names', color=np.log(group1[\"Deaths\"]), \n                    hover_name=\"Country\",projection = 'natural earth',title='Heatmap(Deaths)', \n                    color_continuous_scale=px.colors.sequential.Reds)\n\nfig_heat.update(layout_coloraxis_showscale=False)\n\nfig_heat.show()","b80259bb":"dataframe.head()","42ea5cfa":"\nfig_z = px.bar(dataframe.sort_values('TotalCases'),x='TotalCases', y='Country',orientation = 'h',\n\n            color_discrete_sequence=['#B3611A'],text = 'TotalCases',title='TotalCases')\n\n\nfig_x = px.bar(dataframe.sort_values('TotalDeaths'),x='TotalDeaths', y='Country',orientation = 'h',\n               color_discrete_sequence=['#830707'],text = 'TotalDeaths',title = 'TotalDeaths')\n\n\nfig_ = px.bar(dataframe.sort_values('TotalRecovered'),x='TotalRecovered',y='Country',orientation ='h',\n               color_discrete_sequence=['#073707'],text = 'TotalRecovered',title = 'TotalRecovered')\n\nfig_p = make_subplots(rows =1,cols =3,subplot_titles=('TotalCases','TotalDeaths','TotalRecovered'))\n\nfig_p.add_trace(fig_z['data'][0],row = 1,col =1)\nfig_p.add_trace(fig_x['data'][0],row = 1,col =2)\nfig_p.add_trace(fig_['data'][0],row=1,col=3)\n\nfig_p.update_layout(height=3000,title ='Per Country')\nfig_p.show()","f766fcd5":"#Top 20 countries with TotalCases\ntotalCases = df.iloc[1:21,0:2]\n\ndf1 = df[['Country','TotalDeaths']]\nTotalDeaths = df1[1:21]\n\ndf2 = df[['Country','TotalRecovered']]\ntotalrecovered = df2[1:21]","32fc3ecf":"data = totalCases.sort_values('TotalCases')\ndata1 = TotalDeaths.sort_values('TotalDeaths')\ndata2 = totalrecovered.sort_values('TotalRecovered')\n\nfig1 = px.bar(data,x=\"TotalCases\", y=\"Country\",orientation = 'h',color_discrete_sequence=['#B3611A'],text='TotalCases')\n\nfig2 = px.bar(data1,x=\"TotalDeaths\", y=\"Country\",orientation = 'h',color_discrete_sequence =['#830707'],text = 'TotalDeaths')\n\nfig3 = px.bar(data2,x='TotalRecovered',y='Country',orientation = 'h',color_discrete_sequence=['#073707'],text = 'TotalRecovered')\n\n\n\nfig = make_subplots(\n    rows=2, cols=3,\n    subplot_titles=(\"Totalconfirmed\", \"Total deaths\", \"total Recovered\"))\n\nfig.add_trace(fig1['data'][0], row=1, col=1)\nfig.add_trace(fig2['data'][0], row=1, col=2)\nfig.add_trace(fig3['data'][0], row=1, col=3)\n\nfig.update_layout(height=1200,title = 'Top 20 Countries')\n\n\n\nfig.show()","60cc2156":"df3 = df[['Country','ActiveCases']]\nActiveCases = df3[1:21]\n\ndf4 = df[[\"Country\",\"Serious\"]]\nSerious = df4[1:21]\n\ndf5 = df[['Country','TotalTests']]\nTotalTests = df5[1:21]\n\ndf6 = df[['Country','Tests\/ 1M pop']]\nTestperM = df6[1:21]\n\ndf7 = df[['Country','NewDeaths']]\nNewDeaths = df7[2:22]\n\ndf8 = df[['Country','Deaths\/1M pop']]\nDeathsperM = df8[1:21]\n\ndf9 = df[['Country','NewCases']]\nNewCases = df9[1:22]\n\n\n","2e32c8cd":"\n\n\ndata3 = ActiveCases.sort_values('ActiveCases')\ndata4 = Serious.sort_values('Serious')\n\n\nfig_q = px.bar(data3,x = 'ActiveCases',y='Country',orientation = 'h',color_discrete_sequence=['#476CC3'],\n              text = 'ActiveCases')\n\nfig_r = px.bar(data4, x = 'Serious', y='Country',orientation ='h',color_discrete_sequence=['#606060'],\n              text = 'Serious')\n\nfig_s = px.bar(TotalTests.sort_values('TotalTests'),x = 'TotalTests',y='Country',orientation = 'h',color_discrete_sequence=['#803604'],\n              text = 'TotalTests')\n\nfig_t = px.bar(TestperM.sort_values('Tests\/ 1M pop'), x = 'Tests\/ 1M pop', y='Country',orientation ='h',color_discrete_sequence=['#ff6666'],\n              text = 'Tests\/ 1M pop')\n\nfig_u = px.bar(NewDeaths.sort_values('NewDeaths'), x = 'NewDeaths',y = 'Country',orientation = 'h',text = 'NewDeaths',\n              color_discrete_sequence=['#660000'])\n\nfig_i= px.bar(DeathsperM.sort_values('Deaths\/1M pop'), x = 'Deaths\/1M pop',y = 'Country', orientation ='h', text = 'Deaths\/1M pop',\n              color_discrete_sequence=['#663300'])\n\n\n\nfig_o = px.bar(NewCases.sort_values('NewCases'),x= 'NewCases',y='Country',orientation = 'h',text='NewCases')\n\nfig_p = px.bar(NewDeaths.sort_values('NewDeaths'), x = 'NewDeaths',y = 'Country',orientation = 'h',text = 'NewDeaths',\n              color_discrete_sequence=['#660000'])\n\n\nfig2 = make_subplots(\n    rows=4, cols=2,\n    subplot_titles=(\"ActiveCases\",\"Serious\",\"TotalTests\",\"Tests\/1M\",\"NewDeaths\",\n                   'Deaths\/1M pop','NewCases','NewDeaths'))\nfig2.add_trace(fig_q['data'][0], row=1, col=1)\nfig2.add_trace(fig_r['data'][0], row=1, col=2)\nfig2.add_trace(fig_s['data'][0], row=2, col=1)\nfig2.add_trace(fig_t['data'][0], row=2, col=2)\nfig2.add_trace(fig_u['data'][0], row=3, col=1)\nfig2.add_trace(fig_i['data'][0], row=3, col=2)\nfig2.add_trace(fig_o['data'][0], row=4, col=1)\nfig2.add_trace(fig_p['data'][0], row=4, col=2)\n\nfig2.update_layout(height=3000,title = 'Top 20 countries')\n\n                    \nfig2.show()\n","d07db929":"grp_country1 = time_series.groupby(['Date'])['Confirmed','Deaths','Recovered'].sum().reset_index()\n","099c6985":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=grp_country1['Date'], y=grp_country1['Confirmed'],\n                    mode='lines',\n                    name='Confirmed'))\nfig.add_trace(go.Scatter(x=grp_country1['Date'], y=grp_country1['Recovered'],\n                    mode='lines',\n                    name='Recovered',fillcolor = 'green'))\nfig.add_trace(go.Scatter(x=grp_country1['Date'], y=grp_country1['Deaths'],\n                    mode='lines',\n                    name='Deaths',fillcolor = 'red'))\nfig.update_layout(title = 'Confirmed vs Deaths vs Recoverd in world')\nfig.show()","32ddca07":"grp_country = time_series.groupby(['Date',\"Country\"])['Confirmed','Deaths','Recovered'].sum().reset_index()\n\nfig_a = px.bar(grp_country, x = 'Date', y = 'Confirmed', color = 'Country',height = 500,\n      title = 'Total Confirmed Cases ')\n\nfig_a.show()\n\nfig_b= px.bar(grp_country, x = 'Date', y = 'Deaths',color = 'Country',height = 500,\n      title = 'Total Deaths')\nfig_b.show()\n\nfig_c=px.bar(grp_country,x='Date',y = 'Recovered', color= 'Country',height = 500,\n      title = 'Total Recovered')\nfig_c.show()","60b5516e":"group1 = time_series.groupby(['Date', 'Country'])['Confirmed', 'Deaths','Recovered'].sum().reset_index()\nfig7= px.choropleth(group1, locations=\"Country\", locationmode='country names', color=np.log(group1[\"Deaths\"]), \n                    hover_name=\"Country\",hover_data = ['Deaths'] ,animation_frame=group1[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    projection = 'natural earth',\n                    title='Deaths Over Time', color_continuous_scale=px.colors.sequential.Reds)\nfig7.update(layout_coloraxis_showscale=False)\nfig7.show()","5d20cec4":"\n\n\nfig8= px.choropleth(group1, locations=\"Country\", locationmode='country names', color=np.log(group1[\"Confirmed\"]), \n                    hover_name=\"Country\",hover_data = ['Confirmed'] ,animation_frame=group1[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    projection = 'natural earth',\n                    title='Confirmed Over Time', color_continuous_scale=px.colors.sequential.deep)\nfig8.update(layout_coloraxis_showscale=False)\nfig8.show()","90f0fb6a":"\nfig7= px.choropleth(group1, locations=\"Country\", locationmode='country names', color=np.log(group1[\"Recovered\"]), \n                    hover_name=\"Country\",hover_data = ['Recovered'] ,animation_frame=group1[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    projection = 'natural earth',\n                    title='Recovered Over Time', color_continuous_scale=px.colors.sequential.Greens)\nfig7.update(layout_coloraxis_showscale=False)\nfig7.show()","e01d82e7":"HTML('''<div class=\"flourish-embed\" data-src=\"story\/351001\" data-url=\"https:\/\/flo.uri.sh\/story\/351001\/embed\"><script src=\n\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","a86dd77b":"\nusa_df = pd.read_csv('..\/input\/corona-virus-report\/usa_county_wise.csv',parse_dates = ['Date'])","96cc95b5":"usa_df","2eddcc74":"usa_ = usa_df[usa_df['Date'] == max(usa_df['Date'])]\nusa_.head()\n","f47d4e0e":"usa_grouped = usa_.groupby('Province_State')['Confirmed', 'Deaths'].sum().reset_index()","9cf13ad5":"\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=usa_grouped['Province_State'], y=usa_grouped['Confirmed'],\n                    mode='lines+markers',\n                    name='Confirmed'))\nfig.add_trace(go.Scatter(x=usa_grouped['Province_State'], y=usa_grouped['Deaths'],\n                    mode='lines+markers',\n                    name='Deaths'))\nfig.update_layout(title = 'state wise Confirmed vs Deaths in USA')\n\nfig.show()","79c481f5":"usa_grouped1 = usa_df.groupby(['Date'])['Confirmed','Deaths'].sum().reset_index()","f9a31a6f":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=usa_grouped1['Date'], y=usa_grouped1['Confirmed'],\n                    mode='lines+markers',\n                    name='Confirmed'))\nfig.add_trace(go.Scatter(x=usa_grouped1['Date'], y=usa_grouped1['Deaths'],\n                    mode='lines+markers',\n                    name='Deaths'))\nfig.update_layout(title = 'Confirmed vs Deaths in USA')\nfig.show()","31392380":"ind_df = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv',parse_dates = ['Date'])\nind_df.head()","e087be47":"ind_latest = ind_df[ind_df['Date'] == max(ind_df['Date'])]\nind_latest.head()","6ec80b58":"\n\nind_group = ind_latest.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].sum().reset_index()\nind_group.head()","54f1a923":"fig1 = px.bar(ind_group.sort_values('Confirmed'), x='Confirmed', y = 'State\/UnionTerritory',orientation = 'h',text = 'Confirmed')\nfig1.update_layout(title = 'Confirmed',height = 800)\nfig1.show()\n\nfig2 = px.bar(ind_group.sort_values('Deaths'), x='Deaths', y = 'State\/UnionTerritory',orientation = 'h',text = 'Deaths',\n              color_discrete_sequence=['#F70E0E'])\nfig2.update_layout(title = 'Deaths',height = 800)\nfig2.show()\n\nfig3 = px.bar(ind_group.sort_values('Cured'), x='Cured', y = 'State\/UnionTerritory',orientation = 'h',text = 'Cured',\n              color_discrete_sequence=['#F70EFF'])\nfig3.update_layout(title='Recovered',height = 800)\nfig3.show()","4d611581":"# worldometer data\nhttps:\/\/www.worldometers.info\/coronavirus\/#countries","3f117a1b":"# USA","be70b3fa":"# Top 20 countries mostly affected\n","c341e70d":"# STAY HOME STAY SAFE","ea5d7f29":"# A Brief Introduction\n\nOn 31 December 2019, a cluster of cases of pneumonia of unknown cause, in the city of Wuhan, Hubei province in China, was reported to the World Health Organisation. In January 2020, a previously unknown new virus was identified, subsequently named the 2019 novel coronavirus, and samples obtained from cases and analysis of the virus\u2019 genetics indicated that this was the cause of the outbreak. This novel coronavirus was named Coronavirus Disease 2019 (COVID-19) by WHO in February 2020. The virus is referred to as SARS-CoV-2 and the associated disease is COVID-19.\n\n\n\n","b4d198bb":"# Heatmap Deaths","3cee60a2":"# Heatmap confirmed Cases","ee36fce2":"# Bar Race Chart confirmed"}}