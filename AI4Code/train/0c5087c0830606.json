{"cell_type":{"b0539f6b":"code","d01250ae":"code","4919ae78":"code","0fcaf02a":"code","0a8badd7":"code","2e9bbd2b":"code","f53b9d8a":"code","5167f79b":"code","c56a4b64":"code","d1d520f1":"code","7a33c459":"code","43a5572d":"code","cecbe0d5":"code","c0ea5315":"code","5a9ec932":"code","60e5a856":"code","ea9cdff8":"code","62b8ed5a":"code","4986fbcb":"code","da4ce7cb":"code","82ca3b4a":"code","ad8b1b18":"code","0eb4b815":"code","28b2b8e1":"code","2a51f657":"code","745953b2":"code","65320979":"code","340d4a34":"code","936b9372":"code","96257032":"code","2e29bf2d":"code","1e87058d":"code","dd0b8471":"code","1a8e698b":"code","9897277b":"code","672a66e9":"code","1f4869e9":"code","8d619aa8":"code","b208645b":"code","52130834":"code","bb613be6":"code","acf26ec0":"code","4ea66994":"code","604dcf19":"code","3aa95022":"code","7b3948c4":"code","b46c658d":"code","13a60839":"code","7873b5ce":"code","4376bd09":"code","fc76f1fa":"code","7dc9f67d":"code","53e59e33":"code","15575f0c":"code","5cdf8a1e":"code","e72a7c24":"code","65c263e3":"code","15d2d401":"code","8d00b42c":"code","defec4bf":"code","42d5824a":"code","717e3f0f":"code","9837c56d":"code","eaf2f9bf":"code","5b932ca4":"code","1be09ba3":"code","24bd2b5d":"code","11aeee83":"code","74d34dcc":"code","ea6f1eba":"code","9cbb06a6":"code","dc7a0909":"code","4e277090":"code","58a80bf6":"code","85e18a3a":"code","78f8d463":"code","65a413f3":"code","2bcbda22":"code","7649d0a9":"code","afd210f1":"code","460e5064":"code","ffb0ee18":"code","ed6410ab":"code","1f3505cd":"code","a6f2810b":"code","4fcde452":"code","eb434395":"code","d28ec3cf":"code","290939ac":"code","9093857c":"code","3866d1d4":"code","e94f4098":"code","eaa0bef6":"code","43344767":"code","7b280ea1":"code","f438770e":"code","438ef933":"code","dd9555d4":"code","3969db86":"code","ade25763":"code","d71e606a":"code","09403d18":"code","6928ccaf":"code","5888d160":"code","a5fcac13":"code","e13a4824":"code","6e3f20f0":"code","690a6898":"markdown","614dac45":"markdown","32de0c2f":"markdown","f2cb5e0e":"markdown","3eedb934":"markdown","a17951bf":"markdown","78fc283c":"markdown","4a5a2f6a":"markdown","7839d5c8":"markdown","208df5dc":"markdown","342027e6":"markdown","b405ab94":"markdown","5b605807":"markdown","71ab41cc":"markdown","d0548a87":"markdown","bfddc8f7":"markdown","ece78e97":"markdown","735a0065":"markdown","88a717cc":"markdown","08683b94":"markdown","e18b7ec5":"markdown","94a3e3d3":"markdown","43728b5f":"markdown","6459614a":"markdown","72583809":"markdown","313ee572":"markdown","9fbb71b6":"markdown","6ea21109":"markdown","368e9e94":"markdown","e7243ae0":"markdown","61bc38fb":"markdown","a5401896":"markdown","ed2da613":"markdown","5307ecb4":"markdown","6494d044":"markdown","86334bc6":"markdown","b410ec73":"markdown","6e46935b":"markdown","f27a8c0b":"markdown","f77a4aac":"markdown","61a746ab":"markdown","441f1b51":"markdown","1d3d49ce":"markdown","2a8cf684":"markdown","45070dde":"markdown","de3f2cec":"markdown","73fa9471":"markdown","68757bc9":"markdown","a75fbae4":"markdown","02e0a2e0":"markdown","c5a5432e":"markdown","1bfb80d0":"markdown","1cc68bb0":"markdown","3bb23539":"markdown","0c981d9d":"markdown","ea2bc8ab":"markdown","47c961a1":"markdown","4ab2824c":"markdown","46bc0a64":"markdown","a0eee482":"markdown"},"source":{"b0539f6b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d01250ae":"#IMPORTING RELEVANT LIBRARIES\n!pip install chart_studio\n!pip install scorecardpy\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.colors = True\nimport datetime as dt\nimport chart_studio.plotly as py\nimport plotly.graph_objects as go\nimport scorecardpy as sc\nfrom sklearn import preprocessing\nfrom category_encoders.ordinal import OrdinalEncoder\nfrom category_encoders.woe import WOEEncoder","4919ae78":"bike = pd.read_csv('\/kaggle\/input\/hourcsv\/hour.csv')","0fcaf02a":"bike.shape","0a8badd7":"bike.head()","2e9bbd2b":"bike.tail()","f53b9d8a":"bike.info()","5167f79b":"bike.describe(include = 'all')","c56a4b64":"bike['dteday']=pd.to_datetime(bike.dteday)","d1d520f1":"#Missing values in dataset\nbike.isnull().sum()","7a33c459":"sns.boxplot(bike.mnth, bike.cnt)","43a5572d":"sns.boxplot(bike.yr, bike.cnt)","cecbe0d5":"(bike.groupby(['yr'])['cnt'].sum()\/bike.cnt.sum())","c0ea5315":"bike.groupby(['yr','mnth'])['cnt'].sum().plot(kind='bar')","5a9ec932":"(bike.groupby(['yr','mnth'])['cnt'].sum()\/bike.groupby(['yr'])['cnt'].sum())","60e5a856":"((bike.groupby(['mnth'])[['registered','casual']].sum())\/(bike.cnt.sum())).plot(kind='bar')","ea9cdff8":"sns.boxplot(bike.season, bike.cnt)","62b8ed5a":"c=bike.groupby('season')['cnt'].sum()\nc\/c.sum()","4986fbcb":"(bike.groupby(['yr','season'])['cnt'].sum())\/bike.groupby(['yr'])['cnt'].sum()","da4ce7cb":"(bike.groupby(['yr','season'])['cnt'].sum()).plot(kind='bar')","82ca3b4a":"(bike.groupby(['yr','season'])[['registered','casual']].sum()).plot(kind='bar')","ad8b1b18":"fig = plt.figure(figsize=(10,6))\nsns.stripplot(x= \"season\", y = \"cnt\", data=bike, hue = \"workingday\" )","0eb4b815":"sns.boxplot(bike.weekday,bike.cnt)","28b2b8e1":"(bike.groupby('weekday')['cnt'].sum()\/bike.cnt.sum()).sort_values(ascending=False)","2a51f657":"(bike.groupby(['yr','weekday'])['cnt'].sum()).plot(kind='bar')","745953b2":"(bike.groupby(['weekday'])[['registered','casual']].sum()).plot(kind='bar')","65320979":"(bike.groupby('hr')['cnt'].sum()\/bike.cnt.sum()).sort_values(ascending=True).plot(kind='barh')","340d4a34":"((bike.groupby(['workingday'])['cnt'].sum())\/(bike.cnt.sum())).plot(kind='bar')","936b9372":"bike.groupby(['workingday'])['dteday'].count()","96257032":"((bike.groupby(['workingday'])[['registered','casual']].sum())\/(bike.cnt.sum())).plot(kind='bar')","2e29bf2d":"((bike.groupby(['workingday'])[['casual']].sum())\/(bike.casual.sum()))","1e87058d":"(bike.groupby('holiday')['cnt'].sum()).plot(kind='bar')","dd0b8471":"((bike.groupby(['holiday'])[['registered','casual']].sum())\/(bike.cnt.sum())).plot(kind='bar')","1a8e698b":"bike.groupby(['holiday'])['dteday'].count()","9897277b":"bike.groupby(['holiday'])['cnt'].sum()\/bike.groupby(['holiday'])['dteday'].count()","672a66e9":"sns.boxplot(bike.weathersit,bike.cnt)","1f4869e9":"sns.scatterplot(bike.temp,bike.cnt)","8d619aa8":"sns.scatterplot(bike.hum, bike.cnt)","b208645b":"sns.boxplot(bike.windspeed)","52130834":"plt.figure(figsize = (18,5))\nsns.boxplot(bike.windspeed, bike.cnt)","bb613be6":"sns.scatterplot(bike.cnt,bike.casual)","acf26ec0":"sns.scatterplot(bike.cnt,bike.registered)","4ea66994":"df1 = bike.drop(['instant','cnt'], axis = 1)\nfig = plt.figure(figsize=(14,14))\nsns.heatmap(df1.corr(),annot=True)","604dcf19":"#dropping instant since this is only a unique identifier and won't be required for model building\ndf = bike.drop(['instant'], axis = 1)","3aa95022":"sns.boxplot(x = bike.cnt)","7b3948c4":"upper_fence = plt.boxplot(bike['cnt'])['caps'][1].get_data()[1][1]\nprint('Upper fence is at',upper_fence)\nprint('Number of outliers:',len(bike[bike['cnt']>upper_fence]))","b46c658d":"bike.shape","13a60839":"bike.drop(bike[bike.cnt>upper_fence].index, inplace = True)","7873b5ce":"bike.shape","4376bd09":"import scipy\nfrom scipy import stats\n#Normal plot\nfig=plt.figure(figsize=(15,8))\nstats.probplot(bike.cnt.tolist(),dist='norm',plot=plt)\nplt.show()","fc76f1fa":"sns.histplot(bike.cnt)","7dc9f67d":"sns.boxplot(data=bike[['temp','windspeed','hum']])","53e59e33":"upper_fence = plt.boxplot(bike['windspeed'])['caps'][1].get_data()[1][1]\nprint('Upper fence is at',upper_fence)\nprint('Number of outliers:',len(bike[bike['windspeed']>upper_fence]))","15575f0c":"bike.drop(bike[bike.windspeed>upper_fence].index, inplace = True)","5cdf8a1e":"lower_fence = plt.boxplot(bike['hum'])['caps'][1].get_data()[0][0]\nprint('Lower fence is at',lower_fence)\nprint('Number of outliers:',len(bike[bike['hum']>upper_fence]))","e72a7c24":"bike.info()","65c263e3":"plt.hist(df['cnt'])","15d2d401":"from scipy import stats\nbike['cnt']= np.where((bike['cnt']<=0),1,bike['cnt'])\nfitted_data, fitted_lambda = stats.boxcox(bike['cnt'])\nprint(fitted_lambda)","8d00b42c":"bike['cnt'] = stats.boxcox(bike['cnt'])[0]","defec4bf":"plt.hist(bike.cnt , color ='g', edgecolor = 'black', bins=10)","42d5824a":"sns.distplot(bike.temp)","717e3f0f":"from scipy import stats\nbike['temp']= np.where((bike['temp']<=0),1,bike['temp'])\nfitted_data, fitted_lambda = stats.boxcox(bike['temp'])\nprint(fitted_lambda)","9837c56d":"sns.distplot(fitted_data) ","eaf2f9bf":"sns.distplot(np.log(bike.temp)) ","5b932ca4":"sns.distplot(bike.windspeed)","1be09ba3":"from scipy import stats\nbike['windspeed']= np.where((bike['windspeed']<=0),1,bike['windspeed'])\nfitted_data, fitted_lambda = stats.boxcox(bike['windspeed'])\nprint(fitted_lambda)","24bd2b5d":"plt.hist(fitted_data, color ='g', edgecolor = 'black', bins=10)","11aeee83":"# bike['windspeed'] = stats.boxcox(bike['windspeed'])[0]","74d34dcc":"sns.histplot(bike.windspeed)","ea6f1eba":"#bike =bike[~bike.isin([np.nan, np.inf, -np.inf]).any(1)]","9cbb06a6":"sns.histplot(bike.casual)","dc7a0909":"from scipy import stats\nbike['casual']= np.where((bike['casual']<=0),1,bike['casual'])\nfitted_data, fitted_lambda = stats.boxcox(bike['casual'])\nprint(fitted_lambda)","4e277090":"plt.hist(fitted_data, color ='g', edgecolor = 'black', bins=10)","58a80bf6":"bike['casual'] = stats.boxcox(bike['casual'])[0]","85e18a3a":"# from scipy import stats\n# bike['registered']= np.where((bike['registered']<=0),1,bike['registered'])\n# fitted_data, fitted_lambda = stats.boxcox(bike['registered'])\n# print(fitted_lambda)","78f8d463":"# plt.hist(fitted_data, color ='g', edgecolor = 'black', bins=10)","65a413f3":"#bike['registered'] = np.log(bike.registered)","2bcbda22":"from scipy import stats\nbike['hr']= np.where((bike['hr']<=0),1,bike['hr'])\nfitted_data, fitted_lambda = stats.boxcox(bike['hr'])\nprint(fitted_lambda)","7649d0a9":"plt.hist(fitted_data, color ='g', edgecolor = 'black', bins=10)","afd210f1":"#bike['registered'] = stats.boxcox(bike['registered'])[0]","460e5064":"#bike['log_hr'] = np.log(bike.hr)\nplt.hist(np.log(bike['hr']))","ffb0ee18":"#bike['registered'] = (bike.registered)^3","ed6410ab":"bike.columns","1f3505cd":"# lets build our linear model\n# independant variables\nX = bike.drop(['instant','cnt','temp','dteday','mnth'],axis=1)\n# the dependent variable\ny = bike[['cnt']]","a6f2810b":"X.head()","4fcde452":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","eb434395":"# scaler = preprocessing.MinMaxScaler()\n# # X_train = X_train.values[:,:]\n# X_train = scaler.fit_transform(X_train)\nX_train = pd.DataFrame(X_train)\nX_train.hist()","d28ec3cf":"# X_test = scaler.transform(X_test)\n# X_test = pd.DataFrame(X_test)\n# X_test.hist()","290939ac":"# y_train = np.asarray(y_train)\n# y_test = np.asarray(y_test)","9093857c":"import statsmodels.api as sm\n\nX_constant = sm.add_constant(X_train)\nlin_reg = sm.OLS(y_train,X_constant).fit()\nlin_reg.summary()","3866d1d4":"%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.stats.api as sms\nsns.set_style('darkgrid')\nsns.mpl.rcParams['figure.figsize'] = (15,9)\n\ndef linearity_test(model, y):\n    fitted_vals = model.predict()\n    resids = model.resid\n    \n    fig, ax = plt.subplots(1,2)\n    \n    sns.regplot(x=fitted_vals, y=y, lowess = True, ax=ax[0], line_kws={'color':'red'})\n    ax[0].set_title('Observed vs. Predicted Values', fontsize = 16)\n    ax[0].set(xlabel='Predicted', ylabel='Observed')\n    \n    sns.regplot(x=fitted_vals, y=resids, lowess = True, ax=ax[1],line_kws={'color':'red'})\n    ax[1].set_title('Residuals vs. Predicted Values',fontsize = 16)\n    ax[1].set(xlabel='Predicted',ylabel = 'Residuals')\n                    \nlinearity_test(lin_reg, y_train)","e94f4098":"# Mean residuals should be 0\nlin_reg.resid.mean()","eaa0bef6":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\nvif = [variance_inflation_factor(pd.DataFrame(X_constant).values,i) for i in range(X_constant.shape[1])]\npd.DataFrame({'vif':vif[1:]}, index=X.columns)","43344767":"%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.stats.api as sms\nsns.set_style('darkgrid')\nsns.mpl.rcParams['figure.figsize'] = (15,9)\n\nfitted_vals = lin_reg.predict()\nresids = lin_reg.resid\nresids_standardized = lin_reg.get_influence().resid_studentized_internal\n\nfig, ax = plt.subplots(1,2)\n    \nsns.regplot(x=fitted_vals, y=y_train, lowess = True, ax=ax[0], line_kws={'color':'red'})\nax[0].set_title('Residuals vs. Fitted', fontsize = 16)\nax[0].set(xlabel='Fitted Values', ylabel='Residuals')\n    \nsns.regplot(x=fitted_vals, y=np.sqrt(np.abs(resids_standardized)), lowess = True, ax=ax[1],line_kws={'color':'red'})\nax[1].set_title('Scale_location',fontsize = 16)\nax[1].set(xlabel='Fitted Values',ylabel = 'sqrt(abs(Residuals))')\n                    \n","7b280ea1":"import statsmodels.tsa.api as smt\n\nacf = smt.graphics.plot_acf(lin_reg.resid, lags = 40, alpha = 0.005)\nacf.show()","f438770e":"from statsmodels.stats.stattools import durbin_watson\ndurbin_watson(lin_reg.resid, axis=0)","438ef933":"sm.ProbPlot(lin_reg.resid).qqplot(line='s')\nplt.title('Q-Q plot')","dd9555d4":"X_new = sm.add_constant(X_test)\nypred = lin_reg.predict(X_new)\nprint(ypred[:10])","3969db86":"y_test[:10]","ade25763":"Xtrain_p= sm.add_constant(X_train)\nytrain_pred = lin_reg.predict(Xtrain_p)\nprint(ytrain_pred[:10])","d71e606a":"print(y_train[:10])","09403d18":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nRMSE_train = sqrt(mean_squared_error(y_train,ytrain_pred))\nRMSE_train","6928ccaf":"RMSE = sqrt(mean_squared_error(y_test,ypred))\nRMSE","5888d160":"from sklearn.metrics import mean_absolute_error\nmean_absolute_error(y_train,ytrain_pred)","a5fcac13":"from sklearn.metrics import mean_absolute_error\nmean_absolute_error(y_test,ypred)","e13a4824":"from sklearn.metrics import r2_score\nr2 = r2_score(y_train,ytrain_pred)\nprint(r2)","6e3f20f0":"from sklearn.metrics import r2_score\nr2 = r2_score(y_test,ypred)\nprint(r2)","690a6898":"### Multi-collinearity","614dac45":"Observation: as expected median cnt is highest for clear\/partly cloudy days while median cnt is least for heavy rain+thunderstorm+ice pellets days","32de0c2f":"### Linearity test","f2cb5e0e":"temp feature appears bi-modal and not normally distributed.","3eedb934":"we have more data for 2012 than for 2011","a17951bf":"1. Dataset was imported and found to be of shape (17379 x 17)\n2. Dataset consists of several int, float and one feature as a string object; date time was converted to date time\n3. EDA:\n - Variation of count with Year-month\n    - 2012 had 62% of total riders and 2011 had 38%\n    - September 2012 shows highest number of riders\n    - In 2011 June showed highest %riders and in 2012 September showed highest \n    - In terms of registered versus casual - August showed highest %registered riders, July showed highest %casual riders\n\n  - Variation of count with season\n    - Overall for both years, Winter has least number of riders - 14.3%, and Summer has highest count of riders - 32.2% \n    - The trend is the same by each year\n    - The trend is same for both casual and registered riders\t\t\t\n\n  - Variation of count with weekday\n      - Overall, weekday 5 shows highest %riders\n      - By each year - in 2011, Weekday 5 shows highest %riders and in 2012 weekday 4 shows highest %riders.\n      - Casual riders are highest on weekdays 6 and 0.\t\n\n   - Variation of count with hour\n      - Highest traffic in terms of %riders is highest at 5PM.\n      - During the day time, traffic is highest at 8AM.\n     \n   - Does working day or non working day have more riders\n       - Traffic is more during working days than non-working days\n       - Distribution of casual riders is almost similar between working and non-working days (slightly more on non working days)\n       - Registered riders are much higher on working days\n\n   - Does holiday have more riders \n       - Avg riders on a holiday = 157 and Avg riders on a non holiday = 190\n\n   - Variation of weathersit with riders \n       - As expected median cnt is highest for clear\/partly cloudy days while median cnt is least for heavy rain+thunderstorm+ice pellets days\n       \n   - Variation of cnt with temp and hum\n       - Almost uniform distribution between temp and cnt, and also between humidity and cnt\n       \n       \n4. Correlation matrix revealed high correlation between mnth and season - hence mnth feature will be removed. Similarly high correlation between temp and atemp, hence remove one of the two when building model\n    \n    \n5. Outlier treatment\n\n    - There are a few outliers in cnt feature - approx. 3% of data. Since it is a small number, we drop the outlier observations \n    - We also observe that cnt feature is right skewed\n    - Windspeed feature also has outliers, and we choose to drop them\n    - Dropping outliers from humidity worsened model performance - hence no change\n\n\n6. Feature transformations\n    - We applied boxcox transformation to cnt feature to get normal distribution\n    - Temp feature appears bimodal and attempted boxcox and log transformations - both do not achieve normality. Hence no change\n    - Windspeed also does not follow normal distribution - applying box cox worsened model performance, hence no change\n    - Casual feature is right skewed; Transformed casual feature using box cox to achieve normal distribution\n    - Transforming registered feature worsened model performance hence refraining from transformation\n    \n    \n7. We split the data into train and test at 80:20 ratio. Before doing so, we remove instant (because it is primary key),  dteday(because it is almost like a primary key), temp, and mnth because they are highly correlated with atemp and season respectively\n\n8. We use OrdinaryLeastSquares from statsmodels.api to find the optimal parameters from training set\n\n    - holiday, hum, and windspeed show insignificant p-values and hence cannot be considered for the model with confidence\n    - all other features have a p-value less than 0.05 and are good to estimate best fit line\n    - R-square and Adj. R-square are both 0.948 which is good.\n    - Durbin-Watson is 1.997 which is very close to 2 implying very little multicollinearity\n\n9. We test all assumptions of linear regression and see that no assumption is violated\n\n    - Linearity: We graphically see that predictions and actuals follow a linear correlation. Mean of residuals is approx. 0\n    - Multicollinearity: Variation Inflation factor is approx 1 for majority and less than 5 for a couple of features. \n    - Graphically seen that data is homoscedastic\n    - No autocorrelation - graphically shown\n    - Normality of residuals is seen from Q-Q plot\n\n10. We predicted on the test dataset\n\n11. To evaluate goodness of fit, computed RMSE, MAE and Rsquared. \n    - RMSE and MAE can help to compare across models. \n    - Hence we prefer to evaluate using  R- squared - the closer to 1 the better the model is. We see that it is 0.94 which is very good.\n    \n12. We use the same three evaluation metrics to compare train and test performance. For both, values are similar, and R2 for train is 0.94 like for test.\n\n","78fc283c":"### Splitting into train and test","4a5a2f6a":"## EDA, Univariate, Bivariate analysis, Outlier identification","7839d5c8":"Observation:\n1. 2012 had 62% of total riders and 2011 had 38%\n1. Overall for both years, September 2012 shows highest number of riders\n2. By year, June 2011 showed highest %riders in 2011 and September 2012 showed highest %riders in 2012\n3. While month of August showed highest %registered riders, July showed highest %casual riders","208df5dc":"Since no. of outliers is small, we will drop them","342027e6":"## Model evaluation","b405ab94":"### casual","5b605807":"### Finding the season with highest and lowest % of riders.","71ab41cc":"### R-squared","d0548a87":"### Linear regression and feature significance","bfddc8f7":"## Predict on test data","ece78e97":"The cnt feature is right skewed and can be transformed using log fn.","735a0065":"### Finding the hour of day with highest and lowest % of riders.","88a717cc":"### No autocorrelation of residuals","08683b94":"Observations:\n    \n1. Highest traffic in terms of %riders is highest at 5PM.\n2. During the day time, traffic is highest at 8AM.","e18b7ec5":"### How does cnt vary with temp ","94a3e3d3":"Observations:\n\n1. Overall, weekday 5 shows highest %riders\n2. By each year - in 2011, Weekday 5 shows highest %riders and in 2012 weekday 4 shows highest %riders.\n3. Casual riders are highest on weekdays 6 and 0.","43728b5f":"### RMSE","6459614a":"## Model development","72583809":"log transformation does not make distribution symmetric; hence we resorted to boxcox transformation","313ee572":"Since there is less than 5% outliers we will choose to drop those records rather than use mean imputation etc.","9fbb71b6":"### Checking if outliers are present in cnt","6ea21109":"### windspeed","368e9e94":"Observation:\n1. Overall for both years, Winter has least number of riders - 14.3%, and Summer has highest count of riders - 32.2% \n2. The trend is the same by each year\n3. The trend is same for both casual and registered riders","e7243ae0":"### Finding if holidays have more %riders","61bc38fb":"## Checking for model assumptions","a5401896":"Observation:\n\n    temp and atemp are highly correlated - keep only one\n    \n    month and season are highly correlated - remove mnth","ed2da613":"Median cnt is highest for summer","5307ecb4":"cnt feature is right skewed","6494d044":"### Normality of residuals","86334bc6":"### Finding the year-month with highest % of riders.","b410ec73":"## Summary","6e46935b":"### How does hum vary with cnt","f27a8c0b":"### How does cnt vary with weathersit","f77a4aac":"## Importing libraries","61a746ab":"windspeed has outliers","441f1b51":"## Outlier treatment","1d3d49ce":"### cnt feature","2a8cf684":"### temp","45070dde":"Almost uniform distribution between hum and cnt","de3f2cec":"## Feature transformations","73fa9471":"### Homoscadicity","68757bc9":"### Finding if working day or non working day has more %riders","a75fbae4":"### Checking temp, windspeed, hum","02e0a2e0":"### Correlation matrix","c5a5432e":"### MAE","1bfb80d0":"Observation:\n\n1. Traffic is more during working days than non-working days\n2. Distribution of casual riders is almost similar between working and non-working days (slightly more on non working days)\n3. Registered riders are much higher on working days","1cc68bb0":"Observation:\n\n1. Avg riders on a holiday = 157 and Avg riders on a non holiday = 190","3bb23539":"temp feature converts to left skewed with log transformation and normality is not obtained through box-cox. Hence not following through with transformation.","0c981d9d":"## Reading dataset and basic checks","ea2bc8ab":"### How does windspeed vary with cnt","47c961a1":"Almost uniform distribution between temp and cnt","4ab2824c":"There are quite a few number of outliers in cnt feature (3% of data)","46bc0a64":"Transformation does not improve the model, hence refraining from it","a0eee482":"### Finding the weekday with highest and lowest % of riders."}}