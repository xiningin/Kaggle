{"cell_type":{"49016933":"code","f50babba":"code","811d92ee":"code","01219acb":"code","2e6cd892":"code","30b8fa0e":"code","451fbf0e":"code","eae2c980":"code","5124df54":"code","859421dd":"code","a06598a8":"code","c4d73183":"code","c918a4ed":"code","390e18c9":"code","e5e8bf39":"code","94181133":"code","b4512683":"code","41750b4f":"code","0115ee65":"code","0993f1a1":"code","2c6da082":"code","30857015":"code","b2d55cc4":"code","8d9e92c0":"code","af47aec9":"code","82c7bfae":"code","970bd098":"code","90231c4c":"code","396d1358":"code","fd703abb":"code","4c5c3cbf":"code","1484a132":"code","a66a419b":"code","8854f6e3":"code","22d23ae1":"code","36ff4959":"code","b613c1e1":"code","17837690":"code","360e6519":"code","808ade65":"code","78413005":"code","5eb69180":"code","254f6309":"code","9140eec1":"code","1368a34c":"code","adbc9ca8":"code","6a30037c":"code","138685c5":"markdown","4b46a2c2":"markdown","c49b0a6b":"markdown","8987be13":"markdown","30443a83":"markdown","2c985720":"markdown","20a8f232":"markdown","33c2f017":"markdown","930a5c5a":"markdown","f55a6f3a":"markdown","52c30046":"markdown","94b1f249":"markdown","03b50fdb":"markdown","473b824c":"markdown","61874ca5":"markdown","5ddc1152":"markdown","0105c1e6":"markdown","f95891d9":"markdown","73b28f4a":"markdown","e0dd32e3":"markdown"},"source":{"49016933":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#sns.set()","f50babba":"train = pd.read_csv('..\/input\/feature-engineering\/train.csv', index_col=None)\npd.set_option('display.max_columns', None)\ntrain.head(5)","811d92ee":"import math\ndef calculate_top_venues():\n    summary_df = pd.read_csv('\/kaggle\/input\/indian-premier-league-ipl-all-seasons\/all_season_summary.csv', index_col=None)\n    valcount = summary_df['venue_name'].value_counts()\n    valcount = valcount.reset_index()\n    total_games = valcount['venue_name'].sum()\n    counter = 0\n    for i in range(0,8):\n        print(valcount.at[i,'index'], valcount.at[i,'venue_name'])\n        counter += valcount.at[i,'venue_name']\n\n    print(\"Percentage of total games played at these venues : {}%\".format(math.floor(counter\/total_games*100)))\n\ncalculate_top_venues()","01219acb":"venue = train.groupby(['venue']).sum()#.reset_index(name='counts')\nvenue = venue.reset_index()\nvenue = venue.sort_values(['runs'], ascending=False).reset_index(drop=True)\nf = plt.figure(figsize=(10, 20))\ngs = f.add_gridspec(2,1)\nwith sns.axes_style(\"darkgrid\"):\n    #sns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 3.5})    \n    ax = f.add_subplot(gs[0, 0])    \n    g1 = sns.barplot(y=\"venue\", x='runs', data=venue, palette=\"rocket\")\n    g1.set_ylabel(None,fontsize=20)\n    g1.axes.set_xlabel(\"Runs\",fontsize=18)     \n    g1.axes.set_xticks(range(0,30000,5000))    \n    g1.axes.set_title(\"Total Runs scored per venue\",fontsize=20)\n\nvenue = venue.sort_values(['ball'], ascending=False).reset_index(drop=True)\n\nwith sns.axes_style(\"darkgrid\"):\n    #sns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 3.5})    \n    ax = f.add_subplot(gs[1, 0])    \n    g1 = sns.barplot(y=\"venue\", x='ball', data=venue, palette=\"rocket\")\n    g1.set_ylabel(None,fontsize=20)\n    g1.set_ylabel(None,fontsize=20)\n    g1.axes.set_xlabel(\"Balls\",fontsize=18)     \n    g1.axes.set_xticks(range(0,25000,5000))    \n    g1.axes.set_title(\"Total Balls Bowled per venue\",fontsize=20)","2e6cd892":"venue_map = {'M.Chinnaswamy Stadium, Bengaluru':'Bengaluru',\n'Punjab Cricket Association IS Bindra Stadium, Mohali, Chandigarh':'Mohali',\n'Arun Jaitley Stadium, Delhi':'Delhi',\n'Wankhede Stadium, Mumbai':'Mumbai',\n'Eden Gardens, Kolkata':'Kolkata',\n'Sawai Mansingh Stadium, Jaipur':'Jaipur',\n'Rajiv Gandhi International Stadium, Uppal, Hyderabad':'Hyderabad',\n'MA Chidambaram Stadium, Chepauk, Chennai':'Chennai',\n'Dr DY Patil Sports Academy, Mumbai':'Others',\n'Newlands, Cape Town':'Others',\n'St George\\'s Park, Port Elizabeth':'Others',\n'Kingsmead, Durban':'Others',\n'SuperSport Park, Centurion':'Others',\n'Buffalo Park, East London':'Others',\n'The Wanderers Stadium, Johannesburg':'Others',\n'Diamond Oval, Kimberley':'Others',\n'Mangaung Oval, Bloemfontein':'Others',\n'Brabourne Stadium, Mumbai':'Others',\n'Sardar Patel (Gujarat) Stadium, Motera, Ahmedabad':'Others',\n'Barabati Stadium, Cuttack':'Others',\n'Vidarbha Cricket Association Stadium, Jamtha, Nagpur':'Others',\n'Himachal Pradesh Cricket Association Stadium, Dharamsala':'Others',\n'Nehru Stadium, Kochi':'Others',\n'Holkar Cricket Stadium, Indore':'Others',\n'Dr. Y.S. Rajasekhara Reddy ACA-VDCA Cricket Stadium, Visakhapatnam':'Others',\n'Maharashtra Cricket Association Stadium, Pune':'Pune',\n'Shaheed Veer Narayan Singh International Stadium, Raipur':'Others',\n'JSCA International Stadium Complex, Ranchi':'Others',\n'Sheikh Zayed Stadium, Abu Dhabi':'Others',\n'Sharjah Cricket Stadium':'Others',\n'Dubai International Cricket Stadium':'Others',\n'Saurashtra Cricket Association Stadium, Rajkot':'Others',\n'Green Park, Kanpur':'Others'}\ndef map_venue(venue_name):\n   return venue_map[venue_name]\ntrain['venue'] = train.apply(lambda x: map_venue(x['venue']),axis=1)\npd.set_option('display.max_columns', None)\ntrain['venue'].value_counts()","30b8fa0e":"train_set = train.copy()\nprint('train {} train_set {}'.format(train.shape, train_set.shape))","451fbf0e":"from sklearn.model_selection import StratifiedShuffleSplit\nsplit = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\nfor train_index, test_index in split.split(train_set, train_set['venue']):\n    strat_train_set = train_set.loc[train_index]\n    strat_test_set = train_set.loc[test_index]\n    \nstrat_test_set['venue'].value_counts() \/ len(strat_test_set)","eae2c980":"train_set['venue'].value_counts() \/ len(train)","5124df54":"#runs - column is not going to be part of the training set\nnumeric_features = ['ball', 'avg_runs_scored', 'avg_balls_faced',\n       'avg_4s_scored', 'avg_6s_scored', 'batting_st_rate',\n       'avg_games_captained', 'total_runs_scored', 'total_innings_batted',\n       'total_balls_faced', 'total_4s_hit', 'total_6s_hit',\n       'total_games_captained', 'bowler_avg_overs', 'bowler_avg_maidens',\n       'bowler_avg_conceded', 'bowler_avg_wkts', 'bowler_econ_rt',\n       'bowler_avg_dots', 'bowler_avg_4s', 'bowler_avg_6s', 'bowler_avg_wides',\n       'bowler_avg_noballs', 'bowler_avg_captaincy', 'bowler_total_conceded',\n       'total_innings_bowled', 'bowler_total_overs', 'bowler_total_maidens',\n       'bowler_total_wkts', 'bowler_total_dots', 'bowler_total_4s',\n       'bowler_total_6s', 'bowler_total_wides', 'bowler_total_noballs',\n       'bowler_total_captaincy']\n\ncategorical_features = ['venue', 'batsman_team', 'bowling_team', 'home_game','innings_id']\n\nremainder_features = ['season', 'match_id', 'batsman1_name', 'bowler1_name', 'home_team', 'away_team']","859421dd":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import set_config\n\nX = strat_train_set.drop(\"runs\", axis = 1) # train_data will feed to the model\ny = strat_train_set['runs'] # label to predict\n\ndef build_model(model):\n    numerical_pipe = Pipeline([('std_scaler',StandardScaler())])\n    categorical_pipe = Pipeline([('one_hot',OneHotEncoder())])\n    numeric_transformer = Pipeline(steps=[('scaler', StandardScaler())])\n    categorical_transformer = Pipeline(steps=[('onehot', OneHotEncoder(handle_unknown='ignore'))])\n    preprocessor = ColumnTransformer(\n        transformers=[\n            ('num', numeric_transformer, numeric_features),\n            ('cat', categorical_transformer, categorical_features)])\n    regr = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('regression_model', model)])   \n    set_config(display='diagram')\n    return regr\n\ndef get_pipeline():\n    numerical_pipe = Pipeline([('std_scaler',StandardScaler())])\n    categorical_pipe = Pipeline([('one_hot',OneHotEncoder())])\n    numeric_transformer = Pipeline(steps=[('scaler', StandardScaler())])\n    categorical_transformer = Pipeline(steps=[('onehot', OneHotEncoder(handle_unknown='ignore'))])\n    preprocessor = ColumnTransformer(\n        transformers=[\n            ('num', numeric_transformer, numeric_features),\n            ('cat', categorical_transformer, categorical_features)])\n    return preprocessor\n\ndef calculate_train_rmse(name, model):\n    runs_predictions = model.predict(X)\n    mse = mean_squared_error(y, runs_predictions)\n    rmse = np.sqrt(mse)\n    print(\"Training RMSE of {} : {}\".format(name,rmse))\n\ndef sample_prediction(name, model, num_records):\n    some_data = X.iloc[:num_records]\n    some_labels = y.iloc[:num_records]\n    preds = []\n    for label in list(model.predict(some_data)):\n        preds.append(math.floor(label))\n\n    print(\"Predictions on training data using :\", name)    \n    print(\"Predictions    :\", preds)\n    print(\"Actual labels  :\", list(some_labels))    ","a06598a8":"linear_reg = build_model(LinearRegression())\nlinear_reg.fit(X,y)","c4d73183":"calculate_train_rmse(\"LinearRegression\",linear_reg)","c918a4ed":"sample_prediction(\"LinearRegression\",linear_reg, 10)","390e18c9":"from sklearn.tree import DecisionTreeRegressor\ntree_reg = build_model(DecisionTreeRegressor())\ntree_reg.fit(X,y)","e5e8bf39":"calculate_train_rmse(\"DecisionTreeRegressor\",tree_reg)","94181133":"sample_prediction(\"DecisionTreeRegressor\", tree_reg, 10)","b4512683":"from sklearn.ensemble import RandomForestRegressor\nforest_reg = build_model(RandomForestRegressor(random_state = 42))\nforest_reg.fit(X,y)","41750b4f":"calculate_train_rmse(\"RandomForestRegressor\",forest_reg)","0115ee65":"sample_prediction(\"RandomForestRegressor\", forest_reg, 10)","0993f1a1":"from sklearn.svm import LinearSVR\nsvm_reg = build_model(LinearSVR(epsilon = 1.5, max_iter = 3000))\nsvm_reg.fit(X,y)","2c6da082":"calculate_train_rmse(\"LinearSVR\",svm_reg)","30857015":"sample_prediction(\"LinearSVR\", svm_reg, 10)","b2d55cc4":"print(\"RandomForestRegressor params : \", forest_reg[-1].get_params())","8d9e92c0":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n    {'regression_model__n_estimators': [3, 10, 30, 50], 'regression_model__max_features' : [2, 4, 6, 8, 10, 12]},\n    {'regression_model__bootstrap': [False], 'regression_model__n_estimators' : [3, 10], 'regression_model__max_features' : [2, 3, 4] }\n]\n\ngrid_search = GridSearchCV(forest_reg, param_grid, cv=5, \n                          scoring = 'neg_mean_squared_error',\n                          return_train_score=True)\ngrid_search.fit(X, y)\n","af47aec9":"grid_search.best_params_","82c7bfae":"set_config(display='diagram')\ngrid_search.best_estimator_","970bd098":"cvres = grid_search.cv_results_\n\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(-mean_score),params)","90231c4c":"sample_prediction(\"RandomForestRegressor\", forest_reg, 20)","396d1358":"final_model = grid_search.best_estimator_\npreprocessor = get_pipeline()\n\nX_test = strat_test_set.drop(\"runs\", axis = 1)\ny_test = strat_test_set[\"runs\"].copy()\n\nfinal_predictions = final_model.predict(X_test)\n\nfinal_mse = mean_squared_error(y_test,final_predictions)\nfinal_rmse = np.sqrt(final_mse)\nprint(\"Test RMSE : \", final_rmse)","fd703abb":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(tree_reg, X, y, scoring=\"neg_mean_squared_error\", cv=10)\ntree_rmse_scores = np.sqrt(-scores)","4c5c3cbf":"def display_scores(scores):\n    print(\"Scores : \", scores)\n    print(\"Mean : \", scores.mean())\n    print(\"Standard Deviation : \", scores.std())    ","1484a132":"display_scores(tree_rmse_scores)","a66a419b":"scores_linear = cross_val_score(linear_reg, X, y, scoring=\"neg_mean_squared_error\", cv=10)\nln_rmse_scores = np.sqrt(-scores_linear)","8854f6e3":"display_scores(ln_rmse_scores)","22d23ae1":"scores_forest = cross_val_score(forest_reg, X, y, scoring=\"neg_mean_squared_error\", cv=10)\nforest_rmse_scores = np.sqrt(-scores_forest)","36ff4959":"display_scores(forest_rmse_scores)","b613c1e1":"svm_cross = cross_val_score(svm_reg, X, y, scoring=\"neg_mean_squared_error\", cv=10)\nsvm_rmse_scores = np.sqrt(-svm_cross)","17837690":"display_scores(svm_rmse_scores)","360e6519":"import joblib as jbl\njbl.dump(linear_reg, \"linear_reg.pkl\")","808ade65":"jbl.dump(tree_reg, \"tree_reg.pkl\")","78413005":"jbl.dump(forest_reg, \"forest_reg.pkl\")","5eb69180":"jbl.dump(svm_reg, \"svm_reg.pkl\")","254f6309":"summary_df = pd.read_csv('\/kaggle\/input\/indian-premier-league-ipl-all-seasons\/all_season_summary.csv', index_col=None)\ndetail_df = pd.read_csv('\/kaggle\/input\/indian-premier-league-ipl-all-seasons\/all_season_details.csv', index_col=None)","9140eec1":"summary_df.loc[summary_df['id'] == 1216496]","1368a34c":"batsman_stats = pd.read_csv('..\/input\/feature-engineering\/batsman_numerical.csv', index_col=None)\nbowler_stats = pd.read_csv('..\/input\/feature-engineering\/bowler_numerical.csv', index_col=None)\n\nclass DataToPredict:\n    def __init__(self, match_id, venue = 'Others'):\n        self.match_id = match_id\n        self.data = None\n        self.venue = venue\n        self.predicted_runs = None # y_hat\n        self.X = None\n        self.y = None # old values\n        \n    def load(self):\n        match = detail_df.loc[detail_df['match_id'] == self.match_id]\n        #print(\"match shape \",match.shape)        \n        match = match.reset_index()\n        df = match[(match[\"isWide\"] == False) & (match[\"isNoball\"] == False)]\n        df1=pd.pivot_table(df, index=['season','match_id','batsman1_name','bowler1_name','home_team', 'away_team','innings_id'],values=['runs'],aggfunc=sum)\n        df2=pd.pivot_table(df,  index=['season','match_id','batsman1_name','bowler1_name','home_team', 'away_team','innings_id'],values=['ball'],aggfunc=len)\n        match = pd.concat([df1,df2],axis=1)\n        #print(\"match shape \",match.shape)\n        match = match.reset_index()\n        match = match.sort_values('innings_id')\n        #match = match.drop(columns=['index'], axis=1)\n        self.data = match\n        return self.data\n    \n    def fill_batsman_attributes(self):\n        df = self.data\n        for index, row in df.iterrows():\n            try:\n                temp = batsman_stats.loc[batsman_stats['fullName'] == df.at[index, 'batsman1_name']]\n                temp = temp.reset_index()\n                if df.empty:\n                    print('DataFrame is empty for {}'.format(df.at[index, 'batsman1_name']))\n                else:\n                    df.at[index,'avg_runs_scored'] = temp.at[0,'avg_runs_scored']\n                    df.at[index,'avg_balls_faced'] = temp.at[0,'avg_balls_faced']\n                    df.at[index,'avg_4s_scored'] = temp.at[0,'avg_4s_scored'] \n                    df.at[index,'avg_6s_scored'] = temp.at[0,'avg_6s_scored'] \n                    df.at[index,'batting_st_rate'] = temp.at[0,'batting_st_rate'] \n                    df.at[index,'avg_games_captained'] = temp.at[0,'avg_games_captained'] \n                    df.at[index,'total_runs_scored'] = temp.at[0,'total_runs_scored'] \n                    df.at[index,'total_innings_batted'] = temp.at[0,'total_innings_batted'] \n                    df.at[index,'total_balls_faced'] = temp.at[0,'total_balls_faced'] \n                    df.at[index,'total_4s_hit'] = temp.at[0,'total_4s_hit'] \n                    df.at[index,'total_6s_hit'] = temp.at[0,'total_6s_hit'] \n                    df.at[index,'total_games_captained'] = temp.at[0,'total_games_captained'] \n            except KeyError as e:\n                print(e)\n                continue\n        self.data = df\n        return self.data\n\n    def fill_bowler_attributes(self):\n        df = self.data\n        for index, row in df.iterrows():\n            try:\n                temp = bowler_stats.loc[bowler_stats['fullName'] == df.at[index, 'bowler1_name']]\n                temp = temp.reset_index()\n                if df.empty:\n                    print('DataFrame is empty for {}'.format(df.at[index, 'bowler1_name']))\n                else:\n                    df.at[index,'bowler_avg_overs'] = temp.at[0,'bowler_avg_overs']\n                    df.at[index,'bowler_avg_maidens'] = temp.at[0,'bowler_avg_maidens']\n                    df.at[index,'bowler_avg_conceded'] = temp.at[0,'bowler_avg_conceded']\n                    df.at[index,'bowler_avg_wkts'] = temp.at[0,'bowler_avg_wkts']\n                    df.at[index,'bowler_econ_rt'] = temp.at[0,'bowler_econ_rt']\n                    df.at[index,'bowler_avg_dots'] = temp.at[0,'bowler_avg_dots']\n                    df.at[index,'bowler_avg_4s'] = temp.at[0,'bowler_avg_4s']\n                    df.at[index,'bowler_avg_6s'] = temp.at[0,'bowler_avg_6s']\n                    df.at[index,'bowler_avg_wides'] = temp.at[0,'bowler_avg_wides']\n                    df.at[index,'bowler_avg_noballs'] = temp.at[0,'bowler_avg_noballs']\n                    df.at[index,'bowler_avg_captaincy'] = temp.at[0,'bowler_avg_captaincy']\n                    df.at[index,'bowler_total_conceded'] = temp.at[0,'bowler_total_conceded']\n                    df.at[index,'total_innings_bowled'] = temp.at[0,'total_innings_bowled']\n                    df.at[index,'bowler_total_overs'] = temp.at[0,'bowler_total_overs']\n                    df.at[index,'bowler_total_maidens'] = temp.at[0,'bowler_total_maidens']\n                    df.at[index,'bowler_total_wkts'] = temp.at[0,'bowler_total_wkts']\n                    df.at[index,'bowler_total_dots'] = temp.at[0,'bowler_total_dots']\n                    df.at[index,'bowler_total_4s'] = temp.at[0,'bowler_total_4s']\n                    df.at[index,'bowler_total_6s'] = temp.at[0,'bowler_total_6s']\n                    df.at[index,'bowler_total_wides'] = temp.at[0,'bowler_total_wides']\n                    df.at[index,'bowler_total_noballs'] = temp.at[0,'bowler_total_noballs']\n                    df.at[index,'bowler_total_captaincy'] = temp.at[0,'bowler_total_captaincy']\n            except KeyError as e:\n                print(e)\n                continue \n        self.data = df\n        return self.data\n\n    def add_features(self):\n        df = self.data\n        for index, row in df.iterrows():\n            try:\n                temp = summary_df.loc[summary_df['id'] == df.at[index, 'match_id']]\n                temp = temp.reset_index()\n                #df.at[index,'venue'] = temp.at[0,'venue_name']\n                df.at[index,'venue'] = self.venue\n                if df.at[index,'batsman1_name'] in (temp.at[0,'home_playx1'] ):\n                    df.at[index,'batsman_team'] = temp.at[0,'home_team']\n                if df.at[index,'batsman1_name'] in (temp.at[0,'away_playx1'] ):\n                    df.at[index,'batsman_team'] = temp.at[0,'away_team']\n                if df.at[index,'bowler1_name'] in (temp.at[0,'away_playx1'] ):\n                    df.at[index,'bowling_team'] = temp.at[0,'away_team']\n                if df.at[index,'bowler1_name'] in (temp.at[0,'home_playx1'] ):\n                    df.at[index,'bowling_team'] = temp.at[0,'home_team']\n                if df.at[index,'batsman_team'] in (temp.at[0,'home_team'] ):\n                    df.at[index,'home_game'] = 1\n                else:\n                    df.at[index,'home_game'] = 0                                    \n            except KeyError as e:\n                print(e)\n                continue\n        self.data = df\n        return self.data\n\n    def predict_runs(self):\n        self.y = self.data['runs'] # label to predict       \n        self.X = self.data.drop(columns=[\"runs\"], axis = 1) # train_data will feed to the model\n        self.predicted_runs = forest_reg.predict(self.X)\n        #print(\"Original Runs  : \", self.y) \n        print(\"Predicted Runs : \", np.ndarray.round(self.predicted_runs,0)) \n        \n    def add_preds_to_df(self):\n        self.data['prediction'] = np.ndarray.round(self.predicted_runs,0)\n        return self.data\n    \n    def print_preds(self):\n        self.data[['batsman1_name','bowler1_name','innings_id','runs','prediction','ball']]\n        \n    def declare_winner(self):\n        result_df = pd.pivot_table(self.data, index=['innings_id'],values=['runs', 'prediction'],aggfunc=sum)\n        result_df = result_df.reset_index()\n        innings1_score =  result_df.loc[result_df['innings_id']== 1]['prediction'][0]\n        innings2_score =  result_df.loc[result_df['innings_id']== 2]['prediction'][1]\n        print(\"first innings score  : \",innings1_score)\n        print(\"second innings score : \",innings2_score)\n        \n        #innings_id \tprediction \truns\n        #0 \t1 \t162.0 \t192\n        #1 \t2 \t181.0 \t195","adbc9ca8":"loader = DataToPredict(1216496, venue ='Jaipur')\n#loader = DataToPredict('336012', venue ='Others')\ncsk_rr = loader.load()\ncsk_rr = loader.add_features()\ncsk_rr = loader.fill_batsman_attributes()\ncsk_rr = loader.fill_bowler_attributes()\nloader.predict_runs()\ncsk_rr = loader.add_preds_to_df()\n#loader.print_preds()\nloader.declare_winner()","6a30037c":"score = csk_rr[['batsman1_name','bowler1_name','innings_id','runs','prediction','ball']]\nscore = score.reset_index()\nscore = score.groupby([\"batsman1_name\",\"innings_id\"])[[\"runs\",\"prediction\",\"ball\"]].sum()\nscore = score.reset_index()\nscore[[\"batsman1_name\",\"innings_id\",\"runs\",\"prediction\",\"ball\"]].sort_values(\"innings_id\", ascending=True)","138685c5":"# Pipeline","4b46a2c2":"# DecisionTrees","c49b0a6b":"<div align=\"center\">\n    <h1>Regression Techniques<\/h1>\n<img src=\"https:\/\/user-images.githubusercontent.com\/48846576\/102035064-24aa0900-3d85-11eb-9909-1e478abaf98b.jpg\"  width=\"800\" height=\"300\">\n    <span>Photo by <a href=\"https:\/\/unsplash.com\/@bushmush?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">michael weir<\/a> on <a href=\"https:\/\/unsplash.com\/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash<\/a><\/span>\n<\/div><br>\n<div align=\"left\">\n    <h2>Problem Statement<\/h2>\n    <p>Predict runs scored by batsman against a bowler. <\/p>\n    <p>Cricket is a bat and ball game. In Twenty20 cricket game, a bowler gets to bowl 4 overs maximum. Each over consists of 6 legal deliveries. i.e. a maximum of 24 legal deliveries (balls). Bowlers are classified into two major types viz. Pace\/Fast bowlers, Spin bowlers. Depending on the type of bowler there are different deliveries like In Swinger, Out Swinger, Cutter, Off Spin, Leg Spin, etc. Similarly batsman does have differnt kind of shots live drives, cuts, pull, hook, etc to counter the bowling and score runs. <\/p>\n    <p> Can we capture these insights from numerical data about each player and make an use case for Linear Regression? <\/p>\n   <ul>\n       <li> First step, I have explored the features and built a dataset. Details are in this <a href=\"https:\/\/www.kaggle.com\/rajsengo\/feature-engineering-for-regression\">notebook<\/a>  <\/li>\n       <li> In this notebook, I'm building regression models and comparing the performances to choose a best fit model<\/li>\n    <\/ul>\n<\/div>","8987be13":"# CSK is the Winner!\n\nWell the model predicts the second innings score to be higher than the first innings indicating that CSK would have won this game if it had happened in Jaipur instead of Sharjah Cricket Stadium. \n\nTODO : \n\n* Add extras to the totals predicted and run predictions for all the games in the season to see how model is performing and any issues\n* Validate the accuracy of the predictions and re-verify the model parameters\n* Try with advance regression techniques ","30443a83":"# Model Tuning","2c985720":"# Importance of Venue\n\nFollowing are the home venue of the IPL teams. However IPL games were played at other venues in India and abroad (UAE, South Africa) as well. \n\n* M.Chinnaswamy Stadium, Bengaluru\n* MA Chidambaram Stadium, Chepauk, Chennai\n* Arun Jaitley Stadium, Delhi\n* Rajiv Gandhi International Stadium, Uppal, Hyderabad\n* Sawai Mansingh Stadium, Jaipur\n* Eden Gardens, Kolkata\n* Punjab Cricket Association IS Bindra Stadium, Mohali, Chandigarh\n* Wankhede Stadium, Mumbai\n\nAs we can see 64% of the games were played at these venues. Hence these venues top the most runs scored and deliveries bowled list","20a8f232":"Let's take this game which happend at Sharjah Cricket Stadium and change the venue to Jaipur which is Rajathan Royal's home ground and see what our model predicts","33c2f017":"So far RandomForestRegressor seems to be providing better results. Let's Tune RandomForestRegressor","930a5c5a":"# RandomForestRegressor","f55a6f3a":"Let's transform the venues into the shorter names and also map the venues that are not the top 8 in our list to Others so that we only have 9 categorical values for this attribute","52c30046":"# Predictions\n\nWhat if IPL 2020 had happened in India?!","94b1f249":"## LinearRegression","03b50fdb":"# StratifiedShuffleSplit","473b824c":"# Cross validation","61874ca5":"## Predicted Score Card","5ddc1152":"# Evaluate the model on test set","0105c1e6":"strat_test_set is propotional to the distribution of venues in train_set","f95891d9":"DecisionTreeRegressor overfits the training data !","73b28f4a":"# Train data","e0dd32e3":"# Support Vector Machines"}}