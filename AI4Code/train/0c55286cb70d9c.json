{"cell_type":{"07086f56":"code","ddebf499":"code","5b89dbb0":"code","548ce9ac":"code","8915f024":"code","fcecda7d":"code","8ef0f12a":"code","7cd2a16d":"code","17c77327":"code","bf58750f":"code","f1ad1bd1":"code","41447e75":"code","f3308bb9":"code","31237617":"code","be52994f":"code","0e4362b9":"code","ebf4e956":"code","79e0ef76":"code","893e6301":"markdown","a6c193d9":"markdown","5c9be02f":"markdown","269b9a63":"markdown","f08c9f74":"markdown","f7dafca7":"markdown","15515cce":"markdown","de4100df":"markdown"},"source":{"07086f56":"import pandas as pd","ddebf499":"df = pd.read_csv('..\/input\/GroceryStoreDataSet.csv',names=['products'],header=None)","5b89dbb0":"df","548ce9ac":"df.columns ","8915f024":"df.values","fcecda7d":"data = list(df[\"products\"].apply(lambda x:x.split(',')))\ndata ","8ef0f12a":"from mlxtend.preprocessing import TransactionEncoder","7cd2a16d":"te = TransactionEncoder()\nte_data = te.fit(data).transform(data)\ndf = pd.DataFrame(te_data,columns=te.columns_)\ndf.head()","17c77327":"from mlxtend.frequent_patterns import apriori","bf58750f":"df1 = apriori(df,min_support=0.01, use_colnames=True)\ndf1","f1ad1bd1":"df1.sort_values(by=\"support\",ascending=False)","41447e75":"def check_in_list(ruleitem, basketitem):  #helper checking function\n#     print(\"basketitem=\", basketitem)\n#     print(\"ruleitem=\",list(ruleitem))\n    ret = all(t in list(ruleitem) for t in basketitem)\n#     print(ret)\n    return ret","f3308bb9":"# Uncomment below lines to see what above function does\n# df2 = apriori(df,min_support=0.01, max_len=2, use_colnames=True)  #list of only 1 items\n# df2 = df2[df2[\"itemsets\"].apply(len) > 1]\n# df2[\"check_in_list\"] = df2[\"itemsets\"].apply(check_in_list, args=(['BISCUIT', 'BREAD'],))\n# df2 = df2.sort_values(by=\"support\",ascending=False)  #sor\n# df2","31237617":"df1 = apriori(df,min_support=0.01, max_len=1, use_colnames=True)  #list of only 1 items\ndf1 = df1.sort_values(by=\"support\",ascending=False)  #sort desc by support value\ndef next_item(basketitems):\n    if basketitems is None:\n        return df1[\"itemsets\"][0]\n    max_len_apriori=len(basketitems) + 1\n    df2 = apriori(df,min_support=0.01, max_len=max_len_apriori, use_colnames=True)  #list of only 1 items\n    df2 = df2[df2[\"itemsets\"].apply(len) > max_len_apriori-1]\n    df2[\"check_in_list\"] = df2[\"itemsets\"].apply(check_in_list, args=(basketitems,))\n    df2 = df2[df2[\"check_in_list\"] == True]\n    df2 = df2.sort_values(by=\"support\",ascending=False)  #sort desc by support value\n#     print(df2)\n    if(len(df2) > 0):\n        return list(df2[\"itemsets\"])[0]","be52994f":"item=next_item(None)\nprint(list(item))","0e4362b9":"item=next_item(['BISCUIT'])\nprint(list(item))","ebf4e956":"item=next_item(['BISCUIT', 'BREAD'])\nprint(list(item))","79e0ef76":"item=next_item(['BISCUIT', 'BREAD', 'MILK'])\nprint(list(item))","893e6301":"When 3 items is added to basket","a6c193d9":"**Lets create a function which returns the next suggestions for customer, when he adds some items to his basket**","5c9be02f":"* When 1 item is added to basket","269b9a63":"**Below is example of finding association rules**","f08c9f74":"Usage examples:","f7dafca7":"* When nothing in baset:","15515cce":"* When 2 items is added to basket","de4100df":"<pre>\nmlxtend need data in below format. \n\n             itemname  apple banana grapes\ntransaction  1            0    1     1\n             2            1    0     1  \n             3            1    0     0\n             4            0    1     0\n<\/pre>"}}