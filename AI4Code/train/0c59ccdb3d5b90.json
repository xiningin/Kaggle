{"cell_type":{"8547a325":"code","a197f2d1":"code","405a5417":"code","ff473bbe":"code","9891ec0f":"code","25207961":"code","1cdf4e69":"code","4d076d0e":"code","c7f51c62":"code","d3bfccf3":"code","f43e45f9":"code","2a220e8d":"code","5b2e11f0":"code","09339356":"code","2590bbea":"code","93bfcc2c":"code","c4706599":"code","b77dce63":"code","5d5adac0":"code","566fb66a":"code","908f5ef3":"code","9dd58714":"code","5379aa45":"code","9afc96f3":"code","b4861a42":"code","201898bf":"code","af3abd51":"code","307ddfa5":"code","c86e154b":"code","1a9b6cd7":"code","aba6443b":"code","85926ebe":"code","3e65e85d":"markdown","955ff327":"markdown","4ec7fab6":"markdown","753f9aca":"markdown","8cbc6630":"markdown","ece8ab5d":"markdown","db9b6df2":"markdown","73432c66":"markdown","6c3d73d4":"markdown","b919e329":"markdown","4b0e3a0c":"markdown"},"source":{"8547a325":"import pandas as pd, numpy as np\nimport matplotlib.pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\"))","a197f2d1":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')","405a5417":"print(\"Data Quantity\")\nprint(\"| # of Train Data : {}\".format(len(train_df)))\nprint(\"| # of Test Data : {}\".format(len(test_df)))","ff473bbe":"train_df.columns","9891ec0f":"train_vars = ['bedrooms', 'bathrooms', 'sqft_living',\n       'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade',\n       'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode',\n       'lat', 'long', 'sqft_living15', 'sqft_lot15']\n\ncate_vars = ['zipcode', 'waterfront']","25207961":"train_df.head(5)","1cdf4e69":"print('Train Data View')\ntrain_df.describe()","4d076d0e":"out_index = np.array([False] * len(train_df))\n\nout_index = out_index | np.array(train_df['sqft_living'] > 13000)\nout_index = out_index | np.array((train_df['price']>2555000) & (train_df['grade'] == 8))\nout_index = out_index | np.array((train_df['price']>5555000) & (train_df['grade'] == 11))\n\n# Useful?\n#train_df = train_df.loc[out_index == False]","c7f51c62":"for df in [train_df, test_df]:\n    df['conv_date'] = [1 if values[:4] == '2014' else 0 for values in df.date ]\n    df['total_rooms'] = df['bedrooms'] + df['bathrooms']\n    df['sqft_ratio'] = df['sqft_living'] \/ df['sqft_lot']\n    df['sqft_total_size'] = df['sqft_living'] + df['sqft_lot'] + df['sqft_above'] + df['sqft_basement']\n    df['sqft_total15'] = df['sqft_living15'] + df['sqft_lot15'] \n    \n    df['is_renovated'] = df['yr_renovated'] - df['yr_built']\n    df['is_renovated'] = df['is_renovated'].apply(lambda x: 0 if x <= 0 else 1)\n#     df['date'] = df['date'].astype('int')","d3bfccf3":"def display_var(var_i, df):\n    df[df.columns[var_i]].value_counts().plot(kind='bar')\n    plt.title(var_i)\n    plt.xlabel(df.columns[var_i])\n    plt.ylabel('Count')\n    plt.show()","f43e45f9":"display_var(3, train_df)\ndisplay_var(4, train_df)\ndisplay_var(7, train_df)\ndisplay_var(8, train_df)\ndisplay_var(9, train_df)\ndisplay_var(10, train_df)\ndisplay_var(11, train_df)\ndisplay_var(21, train_df)","2a220e8d":"train_df.describe()","5b2e11f0":"train_df.columns","09339356":"skew_columns = ['sqft_ratio', 'sqft_total_size', 'sqft_total15', 'sqft_above', 'sqft_basement','sqft_living','sqft_lot','sqft_living15', 'sqft_lot15']\n\nminimax_columns = ['lat', 'long', 'total_rooms', 'view', 'condition', 'grade', 'bedrooms', 'bathrooms', 'floors',\n                   'sqft_ratio', 'sqft_total_size', 'sqft_total15', 'sqft_above', 'sqft_basement','sqft_living','sqft_lot','sqft_living15', 'sqft_lot15']\n\netc_vars = ['id', 'date']","2590bbea":"for c in skew_columns:\n    train_df[c] = np.log1p(train_df[c].values)\n    test_df[c] = np.log1p(test_df[c].values)","93bfcc2c":"train_df['price'] = np.log1p(train_df['price'].values)","c4706599":"from sklearn.preprocessing import minmax_scale","b77dce63":"concat_df = pd.concat([train_df, test_df], axis=0, sort=False)\nfor col in minimax_columns:\n    col_name = col\n    norm_value = minmax_scale(concat_df[col_name])\n    train_df[col_name] = norm_value[:len(train_df)]\n    test_df[col_name] = norm_value[len(train_df):]","5d5adac0":"train_df.head(3)","566fb66a":"from sklearn.model_selection import train_test_split\n\ndef sep_target(df, target_vars):\n    return df.drop(target_vars, axis=1), df[target_vars]\ndef col_trim(df, remove_cols):\n    return df.drop(remove_cols, axis=1)\n\n\ntarget_vars = ['price']\ntrn_df, trn_y = sep_target(train_df, target_vars)\ntrn_df = col_trim(trn_df, etc_vars)\ntst_df = col_trim(test_df, etc_vars)\n\ntrn_x_full, val_x_full , trn_y_full, val_y_full = train_test_split(trn_df, trn_y, test_size = 0.0, random_state = 9109)\ntrn_x, val_x , trn_y, val_y = train_test_split(trn_df, trn_y, test_size = 0.2, random_state = 9109)","908f5ef3":"trn_y_v, val_y_v = map(np.ravel, [trn_y.values, val_y.values])\ntrn_y_full_v, val_y_full_v = map(np.ravel, [trn_y_full.values, val_y_full.values])","9dd58714":"np.shape(np.ravel(trn_y_v))","5379aa45":"train_vars = tst_df.columns","9afc96f3":"from sklearn import ensemble, linear_model\nfrom sklearn.metrics import mean_squared_error\n\ndef eval(y_pred, y_true):\n    print('error : {}'.format(np.sqrt(mean_squared_error(y_true= np.expm1(y_true), y_pred=np.expm1(y_pred)))))\n    \ndef predeval(x, y_true, clf):\n    print('error : {}'.format(np.sqrt(mean_squared_error(y_true= np.expm1(y_true), y_pred=np.expm1(clf.predict(x))))))","b4861a42":"import lightgbm as lgb\n\nparam = {'objective':'regression', 'metric':'rmse', 'num_iteration':1000, 'learning_rate':0.05, 'early_stopping_round':30,\n         'max_depth':-1, 'num_leaves':15, 'feature_fraction':0.6,\n         'num_threads':-1}\n\ntrain_data = lgb.Dataset(trn_x, label=trn_y)\nvalidation_data = lgb.Dataset(val_x, label=val_y, reference=train_data)\nbst = lgb.train(param, train_data, valid_sets=[train_data, validation_data])\nbst.save_model('model.txt', num_iteration=bst.best_iteration)\n\n\neval(y_pred=bst.predict(val_x), y_true=val_y_v)","201898bf":"clf = ensemble.GradientBoostingRegressor(criterion='friedman_mse', n_estimators = 400, max_depth = 5, min_samples_split = 2,\n          learning_rate = 0.1, loss = 'ls')\nclf.fit(trn_x, trn_y_v)\nprint(\"r^2 : \",clf.score(val_x, val_y_v))\npredeval(val_x, val_y_v, clf)","af3abd51":"# clf = ensemble.RandomForestRegressor(n_estimators=200, max_depth=15)\n# clf.fit(trn_x, trn_y_v)\n# print(\"r^2 : \",clf.score(val_x, val_y_v))\n# predeval(val_x, val_y_v, clf)\n\n# clf = linear_model.Ridge(alpha=4.0, tol=0.001)\n# clf.fit(trn_x, trn_y_v)\n# print(\"r^2 : \",clf.score(val_x, val_y_v))\n# predeval(val_x, val_y_v, clf)","307ddfa5":"pred_lgb = bst.predict(tst_df, num_iteration=bst.best_iteration)","c86e154b":"clf = ensemble.GradientBoostingRegressor(criterion='friedman_mse', n_estimators = 400, max_depth = 5, min_samples_split = 2,\n          learning_rate = 0.1, loss = 'ls')\nclf.fit(trn_x_full, trn_y_full_v)\n\npred_gbm = clf.predict(tst_df)","1a9b6cd7":"pred_avg = np.mean([pred_lgb, pred_gbm], axis=0)","aba6443b":"def export(pred):\n    subm = pd.read_csv('..\/input\/sample_submission.csv')\n    subm['price'] = pred\n\n    subm_num = 0\n    subm_name = '.\/subm_{}.csv'.format(str(subm_num).zfill(3))\n\n    while os.path.isfile(subm_name):\n        subm_num += 1\n        subm_name = '.\/subm_{}.csv'.format(str(subm_num).zfill(3))\n\n    print(subm_name)\n    subm.to_csv(subm_name, index=False)","85926ebe":"export(np.expm1(pred_lgb))\nexport(np.expm1(pred_gbm))\nexport(np.expm1(pred_avg))","3e65e85d":"# 1. Data Load & View","955ff327":"# 0. Import modules","4ec7fab6":"# 5.2. SImple Ensemble","753f9aca":"# 2.2. Additional Variables","8cbc6630":"# 2.3. Display Variables","ece8ab5d":"# 2.1. Remove Outlier","db9b6df2":"# 5.1. Prediction","73432c66":"# 4. Model","6c3d73d4":"# 6. Submission","b919e329":"# 3. DataSET Split","4b0e3a0c":"# 2.4. Normalization Variables"}}