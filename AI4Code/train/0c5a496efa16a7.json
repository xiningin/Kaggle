{"cell_type":{"82b60535":"code","68867510":"code","c1961bc4":"code","20183929":"code","3c0922fa":"code","81e2e0e7":"code","e4f9c50f":"code","b80f4ec7":"code","21b8843a":"code","f8719130":"code","394fafa1":"code","3684ad97":"code","a92d1eb1":"code","055713fe":"code","0bdc1adc":"code","f2899592":"code","d823b6e4":"code","ff166250":"code","8f55003e":"code","ee3457cc":"code","db33fd87":"code","70a59bff":"code","39ffa1bf":"code","b2d00b53":"code","27705db5":"code","f5504a13":"code","936fd9bd":"code","cd561969":"code","6b228d2c":"code","71f0736e":"code","c0c6368b":"code","dd0116c0":"code","6a67030b":"code","f9e56a9f":"code","e26a9007":"code","7f2ac536":"code","c9b6dd79":"code","0e59cc8e":"code","e1d2cd3f":"code","6a7541a1":"code","1952a3ff":"code","2ad4a53c":"code","9dd3029e":"code","d00dec0d":"code","f304983b":"code","09ec1dbf":"code","357a9e1e":"code","447aa576":"code","fd261eb5":"code","bda20c77":"code","5fde090d":"code","34b2436c":"code","b180a3b1":"code","3b5e79a9":"code","0ebecb98":"code","d5bc784b":"code","c8e71d74":"code","06742d01":"code","04acf67f":"code","49742ed6":"code","feb76536":"code","c98d800d":"code","20006c32":"code","c8a89a99":"code","0babcae8":"code","652c0d1a":"code","6e1155fa":"code","9ba7fc40":"code","78031e33":"code","f91ce537":"markdown","db066a67":"markdown","9c1a3f11":"markdown","31bb574c":"markdown","58b478ab":"markdown","a435c350":"markdown","a5691c3f":"markdown","86f1d083":"markdown"},"source":{"82b60535":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport seaborn as sns\nfrom pandas.api.types import is_numeric_dtype\nimport scipy.stats\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport requests\n\n# show full dataframe\npd.set_option('max_colwidth', -1)","68867510":"def clean_country_names(df):\n    df['country'] = [c.strip().replace('*','') for c in df['country']]\n    df.loc[df['country']=='Czech Republic','country'] = 'Czechia'\n    df.loc[df['country']=='Iran, Islamic Republic of','country'] = 'Iran'\n    df.loc[df['country']=='Korea (South)','country'] = 'South Korea'\n    df.loc[df['country']=='Korea, South','country'] = 'South Korea'\n    df.loc[df['country']=='Russian Federation','country'] = 'Russia'\n    df.loc[df['country']=='United States of America','country'] = 'United States'\n    df.loc[df['country'] == 'US','country'] = 'United States'\n    df.loc[df['country']=='Mainland China','country'] = 'China'\n    df.loc[df['country'] == 'Taiwan, Republic of China','country'] = 'Taiwan'\n    df.loc[df['country'] == 'Tanzania, United Republic of','country'] = 'Tanzania'\n    df.loc[df['country'] == 'Viet Nam','country'] = 'Vietnam'\n    df.loc[df['country'] == 'Venezuela (Bolivarian Republic)','country'] = 'Venezuela'\n    df.loc[df['country'] == 'Syrian Arab Republic (Syria)','country'] = 'Syria'\n    df.loc[df['country'] == 'Saint Vincent and Grenadines','country'] = 'Saint Vincent and the Grenadines'\n    df.loc[df['country'] == 'Brunei Darussalam','country'] = 'Brunei'\n    df.loc[df['country'] == 'Cape Verde','country'] = 'Cabo Verde'\n    df.loc[df['country'] == 'Congo, (Kinshasa)','country'] = 'Congo (Kinshasa)'\n    df.loc[df['country'] == \"C\u00f4te d'Ivoire\",'country'] = \"Cote d'Ivoire\"\n    # df.loc[df['country'] == ''] = 'Diamond Princess'  # cruise ship!\n    df.loc[df['country'] == 'Swaziland','country'] = 'Eswatini'\n    df.loc[df['country'] == 'Holy See (Vatican City State)','country'] = 'Holy See'\n    df.loc[df['country'] == 'Lao PDR','country'] = 'Laos'\n    df.loc[df['country'] == 'Macedonia, Republic of','country'] = 'North Macedonia'","c1961bc4":"def scatter_plot(df, x, y, title, show_ranks=True, show_countries=['Qatar','Italy','Spain','United States','South Korea', 'Taiwan', 'Kenya']):\n    # basic plot\n#     x = \"covid_deaths_per_100000\"\n#     y = \"h1n1_Deaths_per_100000\"\n    df = df.dropna(subset=[x, y])\n    p1=sns.regplot(data=df, x=x, y=y, fit_reg=False, marker=\"o\", color=\"skyblue\", scatter_kws={'s':50})\n    p1.set_title(title)\n    \n    # highlighting countries\n    df_highlight = df[df['country'].isin(show_countries)]\n    sns.regplot(data=df_highlight, x=x, y=y, fit_reg=False, marker=\"o\", color=\"red\", scatter_kws={'s':50})\n    # add annotations one by one with a loop\n    for i in range(df_highlight.shape[0]):\n        p1.text(df_highlight[x].iloc[i]+0.2, df_highlight[y].iloc[i], df_highlight['country'].iloc[i], horizontalalignment='left', size='medium', color='black', weight='semibold')\n    \ndef scatter_plot_ranks(df, x, y, title):\n    df_ranks = df[['country',x,y]]\n    df_ranks.loc[:,x] = df_ranks[x].rank()\n    df_ranks.loc[:,y] = df_ranks[y].rank()\n    scatter_plot(df_ranks, x, y, title+'_ranks')\n        \n","20183929":"# y_col = 'age_over_65_years_percent'\n# scatter_plot_ranks(df_corr, x_col, y_col, x_col + ' vs ' + y_col)","3c0922fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# https:\/\/www.kaggle.com\/covid19\n# https:\/\/www.kaggle.com\/bitsnpieces\/covid19-country-data\n# COVID-19 datasets challenge - https:\/\/www.kaggle.com\/data\/139140\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# Any results you write to the current directory are saved as output.","81e2e0e7":"# data sources\ndf_sources = pd.read_csv('\/kaggle\/input\/covid19-country-data\/covid19_data - data_sources.csv')\ndf_sources = df_sources[df_sources['Name'] != 'airport_traffic']\n#df_sources[df_sources['Name'] == 'health']['Source'].tolist()\ndf_sources","e4f9c50f":"\ncountry_names = []\ndf_names = pd.read_csv('\/kaggle\/input\/covid19-country-data\/country_names_covid19_forecast.csv')\ndf_names.columns = ['country']\nclean_country_names(df_names)\n# df_names.loc[df_names['country'] == 'Korea, South', 'country'] = 'South Korea'\ndf_names\n","b80f4ec7":"df_latlong = pd.read_csv('\/kaggle\/input\/covid19-country-data\/covid19_data - lat_long.csv')\ndf_latlong.columns = [ c.replace('country_name','country') for c in df_latlong.columns ]\ndf_latlong = df_latlong[['country','latitude', 'longitude']]\ndf_latlong","21b8843a":"# male to female ratio\ndf_sex = pd.read_csv('\/kaggle\/input\/covid19-country-data\/covid19_data - sex.csv')\ndf_sex.columns = ['sex_male_to_female_' + c.replace('\u2013', '_').replace(' ', '_') for c in df_sex.columns ]\n# df_sex.columns = [ c.replace('Country\/region', 'country') for c in df_sex.columns ]\ndf_sex.columns = [c.replace('sex_male_to_female_Country\/region','country') for c in df_sex.columns ]\ndf_sex['country'] = [c.strip() for c in df_sex['country'] ]\ndf_sex.loc[df_sex['country'] == 'Korea, South', 'country'] = 'South Korea'\ndf_sex\n","f8719130":"# age\ndf_age = pd.read_csv('\/kaggle\/input\/covid19-country-data\/covid19_data - age.csv')\ndf_age.columns = [c.replace('Country','country').replace('_years','_years_percent') for c in df_age.columns]\ndf_age['country'] = [c.strip() for c in df_age['country']]\ndf_age['age_0_to_14_years_percent'] = [float(x.replace('\\xa0%','').replace('%','').strip()) for x in df_age['age_0_to_14_years_percent'].tolist()]\ndf_age['age_15_to_64_years_percent'] = [float(x.replace('\\xa0%','').replace('%','').strip()) for x in df_age['age_15_to_64_years_percent'].tolist()]\ndf_age['age_over_65_years_percent'] = [float(x.replace('\\xa0%','').replace('%','').strip()) for x in df_age['age_over_65_years_percent'].tolist()]\ndf_age","394fafa1":"# 2009 H1N1 pandemic\ndf_h1n1 = pd.read_csv('\/kaggle\/input\/covid19-country-data\/covid19_data - 2009_flu_pandemic.csv')\ndf_h1n1.columns = ['h1n1_' + c for c in df_h1n1.columns]\ndf_h1n1.columns = [c.replace('h1n1_Country','country').replace('_clean','') for c in df_h1n1.columns]\ndf_h1n1","3684ad97":"# convert to int\ndf_h1n1['h1n1_Cases_confirmed'] = [int(v.replace(',','')) for v in df_h1n1['h1n1_Cases_confirmed'].tolist()]\ndf_h1n1['h1n1_Deaths_confirmed'] = [int(v.replace(',','')) for v in df_h1n1['h1n1_Deaths_confirmed'].tolist()]\ndf_h1n1.astype({'h1n1_Cases_confirmed': 'int64', 'h1n1_Deaths_confirmed':'int64'})\ndf_h1n1","a92d1eb1":"# flu \/ pneumonia deaths\ndf_death = pd.read_csv('\/kaggle\/input\/covid19-country-data\/covid19_data - flu_pneumonia_death.csv')\ndf_death.columns = [c.replace('Country','country').replace('Rate','Flu_pneumonia_death_rate') for c in df_death.columns]\ndf_death = df_death[['country','Flu_pneumonia_death_rate_per_100000']]\ndf_death","055713fe":"# population\ndf_population = pd.read_csv('\/kaggle\/input\/covid19-country-data\/covid19_data - population.csv')\ndf_population.columns = [c.replace('Country','country') for c in df_population.columns]\ndf_population = df_population[['country','Population_2020','Density_KM2m','Fertility_rate','Median_age','Urban_pop_pct']]\ndf_population['Population_2020'] = [int(v.replace(',','')) for v in df_population['Population_2020']]\ndf_population","0bdc1adc":"# air_traffic\ndf_air = pd.read_csv('\/kaggle\/input\/covid19-country-data\/covid19_data - airport_traffic_world.csv')\ndf_air.columns = [c.replace('Country Name','country') for c in df_air.columns]\ndf_air = df_air[['country','airport_traffic_2018_thousands']]\n\ndf_air","f2899592":"# hospital\ndf_hospital = pd.read_csv('\/kaggle\/input\/covid19-country-data\/covid19_data - hospital_beds.csv')\ndf_hospital.columns = [c.replace('Country\/territory','country') for c in df_hospital.columns]\ndf_hospital = df_hospital[['country','hosp_beds_per_1000_2017','ICU-CCB_beds_per_100000']]\ndf_hospital['country'] = [c.strip() for c in df_hospital['country']]\ndf_hospital['ICU-CCB_beds_per_100000'] = [float(s2[:s2.find('[')]) for s2 in [str(s).strip()+'[' for s in df_hospital['ICU-CCB_beds_per_100000']] ]\ndf_hospital\n#df_hospital['country'].tolist()","d823b6e4":"# health\ndf_health = pd.read_csv('\/kaggle\/input\/covid19-country-data\/covid19_data - health.csv')\ndf_health.columns = [c.replace('Country','country') for c in df_health.columns]\ndf_health = df_health[['country','Health_Care_Index']]\ndf_health","ff166250":"# property_prices\ndf_property = pd.read_csv('\/kaggle\/input\/covid19-country-data\/covid19_data - property_prices.csv')\ndf_property.columns = [ 'property_' + c for c in df_property ]\ndf_property.columns = [ c.replace('property_Country','country').replace(' ', '_') for c in df_property ]\ndf_property = df_property[['country','property_Affordability_Index']]\ndf_property","8f55003e":"# gdp\ndf_gdp = pd.read_csv('\/kaggle\/input\/covid19-country-data\/covid19_data - gdp.csv')\ndel df_gdp['Rank']\ndf_gdp.columns = ['country','gdp_usd_million']\ndf_gdp['gdp_usd_million'] = [int(v.replace(',','').strip()) for v in df_gdp['gdp_usd_million']]\ndf_gdp","ee3457cc":"# covid\nimport requests\nimport io\n\ndef get_df_from_url(url):\n    s = requests.get(url).content\n    return pd.read_csv(io.StringIO(s.decode('utf-8')))\n\ncovid_url_prefix = 'https:\/\/github.com\/CSSEGISandData\/COVID-19\/raw\/master\/csse_covid_19_data\/csse_covid_19_time_series\/'\ndf_covid_confirmed = get_df_from_url(covid_url_prefix + 'time_series_covid19_confirmed_global.csv')\ndf_covid_deaths = get_df_from_url(covid_url_prefix + 'time_series_covid19_deaths_global.csv')\ndf_covid_recovered = get_df_from_url(covid_url_prefix + 'time_series_covid19_recovered_global.csv')\n\n# for d in [df_covid_confirmed, df_covid_deaths, df_covid_recovered]:\n#     d.columns = [c.replace('Country\/Region','country') for c in d.columns]\nlatest_covid_dt = df_covid_recovered.columns[-1]\ndf_covid_confirmed = df_covid_confirmed[['Country\/Region',latest_covid_dt]]\ndf_covid_confirmed.columns = ['country', 'covid_confirmed_'+latest_covid_dt.replace('\/','_')]\ndf_covid_deaths = df_covid_deaths[['Country\/Region',latest_covid_dt]]\ndf_covid_deaths.columns = ['country', 'covid_deaths_'+latest_covid_dt.replace('\/','_')]\ndf_covid_recovered = df_covid_recovered[['Country\/Region',latest_covid_dt]]\ndf_covid_recovered.columns = ['country', 'covid_recovered_'+latest_covid_dt.replace('\/','_')]\n\n\ndf_covid_confirmed = df_covid_confirmed.groupby('country').sum().reset_index()\ndf_covid_deaths = df_covid_deaths.groupby('country').sum().reset_index()\ndf_covid_recovered = df_covid_recovered.groupby('country').sum().reset_index()\n\ndf_covid_latest = pd.merge(pd.merge(df_covid_confirmed, df_covid_deaths, how='left'), df_covid_recovered, how='left')\ndf_covid_latest","db33fd87":"print(f'COVID-19 was last retrieved on {latest_covid_dt} (MM\/dd\/yy) from CSSEGISandData')","70a59bff":"# covid_tests - NOTE: Different covid_test_dates for each country!!!!\ndf_covid_tests = pd.read_csv('\/kaggle\/input\/covid19-country-data\/covid19_data - covid_tests.csv')\ndf_covid_tests = df_covid_tests[df_covid_tests['Entity'].str.contains('Australia - ') == False]\ndf_covid_tests['Date'] = pd.to_datetime(df_covid_tests['Date'])\nmax_covid_test_dt = max(df_covid_tests['Date'])\ndf_covid_tests = df_covid_tests[df_covid_tests['Entity'].str.contains('United States - ') == False]\ndf_covid_tests['country'] = [e.split(' - ')[0] for e in df_covid_tests['Entity'] ]\n\nmax_covid_test_dt = df_covid_tests.groupby('country').max().reset_index()[['country','Date']]\nsum_covid_test = df_covid_tests.groupby('country').sum().reset_index()\n\ndf_covid_tests = pd.merge(max_covid_test_dt, sum_covid_test)\n\ndf_covid_tests.columns = ['country', 'covid_test_date', 'covid_tests']\ndf_covid_tests\n","39ffa1bf":"# covid19 dataset https:\/\/www.kaggle.com\/vignesh1694\/covid19-coronavirus\nfrom datetime import datetime\n\n# TODO: get data from live feed\n# https:\/\/github.com\/CSSEGISandData\/COVID-19\/raw\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\n# time_series_covid19_deaths_global.csv\n# time_series_covid19_recovered_global.csv\ndf_covid = pd.read_csv('\/kaggle\/input\/covid19-coronavirus\/2019_nCoV_data.csv')\ndf_covid['country'] = df_covid['Country']\nclean_country_names(df_covid)\ndf_covid['Date_ts'] = [datetime.strptime(d, '%m\/%d\/%Y %H:%M') for d in df_covid['Date'].tolist()]\ndel df_covid['Country']\n# df_covid.loc[df_covid['Country'] == 'US','Country'] = 'United States'\n# df_covid.loc[df_covid['Country'] == 'Mainland China','Country'] = 'China'\n# df_covid.loc[df_covid['Country'] == 'Korea, South','Country'] = 'South Korea'\ndf_covid\n\n#datetime.strptime(,'%M\/%d\/%Y %H:%M')\n\n","b2d00b53":"df_covid_first_dt = df_covid.loc[df_covid.groupby(['country'])['Date_ts'].idxmin()]\ndf_covid_first_dt.columns = [c.replace('Date_ts','covid19_first_date') for c in df_covid_first_dt.columns]\ndf_covid_first_dt = df_covid_first_dt[['country','covid19_first_date']]\ndf_covid_first_dt","27705db5":"# school closures\ndf_school = pd.read_csv('\/kaggle\/input\/covid19-country-data\/covid19_data - school_closures.csv')\ndf_school.columns = [c.replace('Country','country') for c in df_school.columns]\nclean_country_names(df_school)\ndf_school['country'] = [c.split(',')[0] for c in df_school['country']]\ndf_school['Date'] = pd.to_datetime(df_school['Date'],dayfirst=True)\n# df_school = df_school[df_school['Scale']=='National']\ndf_school = df_school[['country','Date']].groupby('country').min().reset_index()\ndf_school.columns = ['country','first_school_closure_date']\ndf_school[df_school['country']=='Italy']\n","f5504a13":"# country codes\ndf_country_code = pd.read_csv('\/kaggle\/input\/country-code\/country_code.csv')\ndf_country_code.columns = [ c.replace('Country_name','country') for c in df_country_code.columns ]\nclean_country_names(df_country_code)\n# df_country_code.loc[df_country_code['country']=='Czech Republic','country'] = 'Czechia'\n# df_country_code.loc[df_country_code['country']=='Iran, Islamic Republic of','country'] = 'Iran'\n# df_country_code.loc[df_country_code['country']=='Korea (South)','country'] = 'South Korea'\n# df_country_code.loc[df_country_code['country']=='Russian Federation','country'] = 'Russia'\n# df_country_code.loc[df_country_code['country']=='United States of America','country'] = 'United States'\n\ndf_country_code[df_country_code['code_3digit'].isin(['CZE','USA', 'IRN', 'KOR', 'RUS', 'SGP', 'CIV'])]\n","936fd9bd":"# precipitation\ndf_precipitation = pd.read_excel('\/kaggle\/input\/world-bank-climate-change-data\/historical-data-excel-380-kb-.xls', sheet_name='Country_precipitationCRU')\ndf_precipitation.columns = [ c.replace('ISO_3DIGIT','code_3digit') for c in df_precipitation.columns ]\ndf_precipitation = pd.merge(df_country_code, df_precipitation, how='left')\ndel df_precipitation['Unnamed: 0']\ndf_precipitation\n","cd561969":"# temperature data\ndf_temp = pd.read_excel('\/kaggle\/input\/world-bank-climate-change-data\/historical-data-excel-380-kb-.xls', sheet_name='Country_temperatureCRU')\ndf_temp.columns = [ c.replace('ISO_3DIGIT','code_3digit').lower() for c in df_temp.columns ]\ndf_temp = pd.merge(df_country_code, df_temp, how='left')\ndel df_temp['Unnamed: 0']\ndf_temp","6b228d2c":"# merge everything\ndfs = [df_covid_latest, df_covid_first_dt, df_death, df_h1n1, df_school, df_temp, df_precipitation, df_air, df_property, df_health, df_hospital, df_population, df_gdp, df_age, df_sex, df_latlong, ]\nprint(f'{len(dfs)} data frames to merge')\ndf = df_names\nclean_country_names(df)\nfor d in dfs:\n    clean_country_names(d)\n    df = pd.merge(df, d, on='country', how='left')\ndf = df.drop_duplicates()\ndel df['code_2digit_y']\ndel df['code_3digit_y']\nprint(f'Resulting shape {df.shape}')\ndf.to_csv('\/kaggle\/working\/covid19_merged.csv')\ndf = df.round(4)\ndf\n","71f0736e":"df.describe()","c0c6368b":"list(zip(df.columns,df.dtypes))","dd0116c0":"# countries that do not have sex data\ndf[pd.isnull(df['sex_male_to_female_0_14_years'])]","6a67030b":"# countries that do not have lat_long data\ndf[pd.isna(df['latitude'])]","f9e56a9f":"# countries that do not have age data\ndf[pd.isna(df['age_15_to_64_years_percent'])]","e26a9007":"# missing\ndf[pd.isna(df['h1n1_Cases_confirmed'])]","7f2ac536":"# flu death rate missing data\ndf[pd.isna(df['Flu_pneumonia_death_rate_per_100000'])]","c9b6dd79":"# missing country in population\ndf[pd.isna(df['Population_2020'])]","0e59cc8e":"# show hospital beds, too many, just show what data we have!\nprint(df[pd.isna(df['hosp_beds_per_1000_2017'])].shape)\ndf[pd.notna(df['hosp_beds_per_1000_2017'])]","e1d2cd3f":"# show missing Health_Care_Index\ndf[pd.isna(df['Health_Care_Index'])]","6a7541a1":"# show missing property_Affordability_Index\ndf[pd.isna(df['property_Affordability_Index'])]","1952a3ff":"df[pd.isna(df['airport_traffic_2018_thousands'])]","2ad4a53c":"# covid check, should return no rows that are na!\ndf[pd.isna(df['covid_confirmed_' + latest_covid_dt.replace('\/','_') ])]","9dd3029e":"# feature engineering\ndf['covid_confirmed_per_100000'] = df['covid_confirmed_' + latest_covid_dt.replace('\/','_')] \/ (df['Population_2020'] \/ 100000)\ndf['covid_deaths_per_100000'] = df['covid_deaths_' + latest_covid_dt.replace('\/','_')] \/ (df['Population_2020'] \/ 100000)\ndf['h1n1_Cases_confirmed_per_100000'] = df['h1n1_Cases_confirmed'] \/ (df['Population_2020'] \/ 100000)\ndf['h1n1_Deaths_per_100000'] = df['h1n1_Deaths_confirmed'] \/ (df['Population_2020'] \/ 100000)\ndf['covid_deaths_per_confirmed_per_100'] = df['covid_deaths_' + latest_covid_dt.replace('\/','_')] \/ (df['covid_confirmed_' + latest_covid_dt.replace('\/','_')] \/ 100)\ndf['h1n1_deaths_per_confirmed_per_100'] = df['h1n1_Deaths_confirmed'] \/ (df['h1n1_Cases_confirmed'] \/ 100)\ndf['school_closed_days_after_first_case'] = df['first_school_closure_date'] - df['covid19_first_date']\ndf = df.round(4)\ndf.head(5)","d00dec0d":"print(df.shape)\ndf_corr = df.dropna(subset=['covid_deaths_per_100000'])\ndf_corr = df_corr.sort_values(by='covid_deaths_' + latest_covid_dt.replace('\/','_'), ascending=False)\nprint(df_corr.shape)\n\n# filters\n# min_deaths = 20\ntopn = 100\nquantiles = df_corr['covid_deaths_per_100000'].quantile([.1, .9])\n# filter_min_deaths = df['covid_deaths_' + latest_covid_dt.replace('\/','_')] >= min_deaths\nfilter_quantiles = (df_corr['covid_deaths_per_100000'] >= quantiles.iloc[0]) & (df_corr['covid_deaths_per_100000'] <= quantiles.iloc[1])\n\n# apply filter\n# df_corr = df[filter_min_deaths & filter_quantiles]\n# df_corr = df[filter_min_deaths]\ndf_corr = df_corr.head(topn)\n\nprint(df_corr.shape)\ndf_corr\n# sns.boxplot(df_corr['covid_deaths_per_100000'])","f304983b":"df_corr.tail(10)","09ec1dbf":"from pandas.api.types import is_numeric_dtype\nimport scipy.stats\n\ncorrs = []\nx_col = 'covid_deaths_per_100000'\nfor col in df_corr.columns:\n    df_xy = df_corr[[x_col, col]]\n    df_xy = df_xy.dropna()\n    x = df_xy[x_col]\n    y = df_xy[col]\n    if not is_numeric_dtype(y):\n        continue\n    sc = scipy.stats.spearmanr(x, y)\n    corrs.append((sc.pvalue, sc.correlation, col, y.shape[0], str(y.tolist()[:5]) + '...'))\ndf_corr_stats = pd.DataFrame(corrs)\ndf_corr_stats.columns = ['pvalue','spearman_rho_vs_' + x_col, 'feature_name', 'n_values', 'values']\ndf_corr_stats = df_corr_stats.sort_values(by=['pvalue'])\ndf_corr_stats.round(3)","357a9e1e":"y_col = 'age_over_65_years_percent'\nscatter_plot(df_corr, x_col, y_col, x_col + ' vs ' + y_col)","447aa576":"y_col = 'age_over_65_years_percent'\nscatter_plot_ranks(df_corr, x_col, y_col, x_col + ' vs ' + y_col)","fd261eb5":"y_col = 'Flu_pneumonia_death_rate_per_100000'\nscatter_plot(df_corr, x_col, y_col, x_col + ' vs ' + y_col)","bda20c77":"y_col = 'Flu_pneumonia_death_rate_per_100000'\nscatter_plot_ranks(df_corr, x_col, y_col, x_col + ' vs ' + y_col)","5fde090d":"y_col = 'apr_temp'\nscatter_plot(df_corr, x_col, y_col, x_col + ' vs ' + y_col)","34b2436c":"y_col = 'apr_temp'\nscatter_plot_ranks(df_corr, x_col, y_col, x_col + ' vs ' + y_col)","b180a3b1":"y_col = 'latitude'\nscatter_plot(df_corr, x_col, y_col, x_col + ' vs ' + y_col)","3b5e79a9":"y_col = 'latitude'\nscatter_plot_ranks(df_corr, x_col, y_col, x_col + ' vs ' + y_col)","0ebecb98":"y_col = 'property_Affordability_Index'\nscatter_plot(df_corr, x_col, y_col, x_col + ' vs ' + y_col)","d5bc784b":"y_col = 'property_Affordability_Index'\nscatter_plot_ranks(df_corr, x_col, y_col, x_col + ' vs ' + y_col)","c8e71d74":"# select countries for spot checks\n#c = ['China','United States', 'Italy', 'Canada', 'United Kingdom', 'Australia', 'Japan', 'South Korea', 'Taiwan', 'Iran']\ndf = df.sort_values(by=['covid_confirmed_' + latest_covid_dt.replace('\/','_') ], ascending=False)\ntopn = 20\ndf_topn_covid = df.head(topn)\ndf_topn_covid","06742d01":"\n# basic plot\nscatter_plot(df_topn_covid, 'covid_confirmed_per_100000', 'h1n1_Cases_confirmed_per_100000', 'Cases confirmed per 100,000 population')\n# p1=sns.regplot(data=df_topn_covid, x=x, y=y, fit_reg=False, marker=\"o\", color=\"skyblue\", scatter_kws={'s':50})\n# p1.set_title('Cases confirmed per 100,000 population')\n# # add annotations one by one with a loop\n# for i in range(df_topn_covid.shape[0]):\n#      p1.text(df_topn_covid[x].iloc[i]+0.2, df_topn_covid[y].iloc[i], df_topn_covid['country'].iloc[i], horizontalalignment='left', size='medium', color='black', weight='semibold')\n","04acf67f":"scatter_plot(df_topn_covid, 'covid_deaths_per_100000', 'h1n1_Deaths_per_100000', 'COVID-19 vs H1N1 deaths per 100,000 population \\n As of ' + latest_covid_dt.replace('\/','_'))","49742ed6":"scatter_plot(df_topn_covid, 'covid_deaths_per_confirmed_per_100', 'h1n1_deaths_per_confirmed_per_100', 'COVID-19 vs H1N1 deaths per 100 confirmed \\n As of ' + latest_covid_dt.replace('\/','_') )","feb76536":"df[df['country'].isin(['Italy','Germany','Spain','United States', 'United Kingdom','Switzerland','Turkey','France'])][['country','hosp_beds_per_1000_2017','ICU-CCB_beds_per_100000']]","c98d800d":"# deaths vs beds\nscatter_plot(df_topn_covid, 'covid_deaths_per_100000', 'ICU-CCB_beds_per_100000', 'COVID-19 deaths per 100,000 population vs ICU Beds per 100,000 \\n As of ' + latest_covid_dt.replace('\/','_') )","20006c32":"import scipy.stats\nx = df_topn_covid['covid_deaths_per_100000']\ny = df_topn_covid['ICU-CCB_beds_per_100000']\nscipy.stats.spearmanr(x,y, nan_policy='omit')","c8a89a99":"# deaths vs gdp\nscatter_plot(df_topn_covid, 'covid_deaths_per_100000', 'gdp_usd_million', 'COVID-19 deaths per 100,000 population vs GDP \\n As of ' + latest_covid_dt.replace('\/','_') )","0babcae8":"x = df_topn_covid['covid_deaths_per_100000']\ny = df_topn_covid['gdp_usd_million']\nscipy.stats.spearmanr(x,y)","652c0d1a":"# gdp vs beds\nx = df_topn_covid['ICU-CCB_beds_per_100000']\ny = df_topn_covid['gdp_usd_million']\nscipy.stats.spearmanr(x,y,nan_policy=\"omit\")","6e1155fa":"scatter_plot(df_topn_covid, 'covid_deaths_per_100000', 'age_over_65_years_percent', 'COVID-19 deaths per 100,000 population vs age over 65 yrs (%) \\n As of ' + latest_covid_dt.replace('\/','_') )","9ba7fc40":"df_topn_covid.dropna(subset=['first_school_closure_date'])","78031e33":"scatter_plot(df_topn_covid.dropna(subset=['first_school_closure_date']), 'covid_deaths_per_100000', 'first_school_closure_date', 'COVID-19 deaths per 100,000 population vs first day of school closure \\n As of ' + latest_covid_dt.replace('\/','_') )","f91ce537":"# Quality Checks","db066a67":"# Analysis Top 10 Countries by COVID-19 Cases","9c1a3f11":"### Select the top 50 countries with the most deaths for analysis","31bb574c":"# Data sources","58b478ab":"### Display features that are highly correlated with COVID-19 deaths per 100,000 population","a435c350":"# Identifying the most correlated variables to COVID-19 deaths","a5691c3f":"# Motivation\nWhy did I create this dataset? This is my first time creating a notebook in Kaggle and I am interested in learning more about COVID-19 and how different countries are affected by it and why. It might be useful to compare different metrics between different countries. And I also wanted to participate in a challenge, and I've decided to join the [COVID-19 datasets challenge](https:\/\/www.kaggle.com\/data\/139140). While looking through the projects, I noticed https:\/\/www.kaggle.com\/koryto\/countryinfo and it inspired me to start this project.\n\n# Method\nMy approach is to scour the Internet and Kaggle looking for country data that can potentially have an impact on how the COVID-19 pandemic spreads. In the end, I ended up with the following for each country:\n* Monthly temperature and precipitation from Worldbank\n* Latitude and longitude\n* Population, density, gender and age\n* Airport traffic from Worldbank\n* COVID-19 date of first case and number of cases and deaths as of March 26, 2020\n* 2009 H1N1 flu pandemic cases and deaths obtained from Wikipedia\n* Property affordability index and Health care index from Numbeo\n* Number of hospital beds and ICU beds from Wikipedia\n* Flu and pneumonia death rate from Worldlifeexpectancy.com (Age Adjusted Death Rate Estimates: 2017)\n* School closures due to COVID-19\n* Number of COVID-19 tests done\n\nDatasets have been merged by country name whenever possible. I needed to rename some countries by hand, e.g. US to United Sates, etc. but it's possible that I might have missed some. See the output file **covid19_merged.csv** for the merged result. \n\nData: https:\/\/www.kaggle.com\/bitsnpieces\/covid19-country-data\n\n# Features most correlated with COVID-19 deaths\n* age_over_65_years_percent\n* apr_temp\n* may_temp\n* Flu_pneumonia_death_rate_per_100000\n* latitude\n* annual_temp\n* oct_temp\n* age_0_to_14_years_percent\n* mar_temp\n* property_Affordability_Index\n* h1n1_Cases_confirmed_per_100000\n\n# Other sources\nOther interesting sources of information\n* [IMF Policy Tracker](https:\/\/www.imf.org\/en\/Topics\/imf-and-covid19\/Policy-Responses-to-COVID-19) \n* [nCov strain analysis across the globe!](https:\/\/nextstrain.org\/ncov)\n* [Impact on aviation](https:\/\/www.visualcapitalist.com\/global-flight-capacity-coronavirus\/)\n* [Impact on restaurants](https:\/\/rallyforrestaurants.com\/impact-COVID-19-restaurant-insights.html)\n* [Harvard](https:\/\/dataverse.harvard.edu\/dataverse\/2019ncov)\n* [Tableau datahub](https:\/\/www.tableau.com\/covid-19-coronavirus-data-resources)\n* [Unemployment outlook from ILO](https:\/\/www.ilo.org\/wesodata\/)\n\n# Caveats\nSince I did not personally collect each datapoint, and because each datasource is different with different objectives, collected at different times, measured in different ways, any inferences from this dataset will need further investigation.\n\n# Acknowledgements\nI want to acknowledge the authors of the datasets that made their data publicly available which has made this project possible.\n\nI hope that the community finds this dataset useful. Feel free to recommend other datasets that you think will be useful \/ relevant! Thanks for looking.\n","86f1d083":"# Merge"}}