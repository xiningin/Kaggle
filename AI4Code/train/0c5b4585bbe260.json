{"cell_type":{"228f2a7f":"code","01b563d4":"code","9e33f589":"code","56f7f30d":"code","245f6233":"code","03ca98c1":"code","9edb177c":"code","515e9fd3":"code","42eb56ca":"code","3ecfc1ca":"code","bbf7d5c6":"code","32f0e573":"code","2a22a131":"code","d3560ef4":"code","4f405dc4":"code","3404ff0e":"code","72b4eb58":"code","6c48fff4":"code","1ff8621c":"code","f6639d32":"code","7b786699":"code","76a06a7d":"code","21707c34":"markdown","23c772fb":"markdown","5991a430":"markdown","5c0724dc":"markdown","18b6bdbf":"markdown","92942bcf":"markdown","4da71965":"markdown"},"source":{"228f2a7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n#import plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# matplotlib\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom collections import Counter\nimport os\nprint(os.listdir(\"..\/input\"))\nimport sys\n\n# Any results you write to the current directory are saved as output.","01b563d4":"# import data\ndf = pd.read_csv(\"..\/input\/Admission_Predict_Ver1.1.csv\")","9e33f589":"df.head(5)","56f7f30d":"# information about data\ndf.info()","245f6233":"for x in df.columns:\n    sys.stdout.write(str(x)+\", \")  ","03ca98c1":"df.rename(columns={\"Serial No.\":\"Serial_No\",\"GRE Score\":\"GRE\",\"TOEFL Score\":\"TOEFL\",\n                   \"University Rating\":\"UnivRaiting\",\"LOR \":\"LOR\",\"Chance of Admit \":\"Chance_Admit\"},inplace=True)","9edb177c":"df.head()","515e9fd3":"# This is not correct data for visualisation with plotly. It's just for learning.\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.UnivRaiting,\n                    y = df.SOP,\n                    mode = \"lines\",\n                    name = \"SOP\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text = df.UnivRaiting)\n\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.UnivRaiting,\n                    y = df.LOR,\n                    mode = \"lines+markers\",\n                    name = \"LOR\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text = df.UnivRaiting)\n\ndata = [trace1,trace2]\nlayout = dict(title = \"SOP and LOR vs Universities' Raiting\",\n             xaxis=dict(title = \"University' Raiting\",ticklen = 5,zeroline=False)\n             )\nfig = dict(data=data,layout=layout)\niplot(fig)","42eb56ca":"counter_univ = Counter(df.UnivRaiting)\ncounter_univ","3ecfc1ca":"# close warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# This is not correct data for visualisation with plotly. It's just for learning.\n#prepare data frames\ndf_1 = df[df.UnivRaiting==1]\ndf_2 = df[df.UnivRaiting==2].iloc[:34,:]\ndf_3 = df[df.UnivRaiting==3].iloc[:34,:]\ndf_4 = df[df.UnivRaiting==4].iloc[:34,:]\ndf_5 = df[df.UnivRaiting==5].iloc[:34,:]\n\n# For correctly comparing we should add new columns which is new serial number\nnew_serial=[]\nfor i in range(34):\n    new_serial.append(i)\ndf_1[\"new_serial\"]=new_serial\ndf_2[\"new_serial\"]=new_serial\ndf_3[\"new_serial\"]=new_serial\ndf_4[\"new_serial\"]=new_serial\ndf_5[\"new_serial\"]=new_serial\n\n\n\n# creating trace1\ntrace1 = go.Scatter(\n                    x = df_1.new_serial,\n                    y = df_1.Chance_Admit,\n                    mode = \"markers\",\n                    name = \"Univs number 1\",\n                    marker = dict(color = 'rgba(255, 128, 255, 1)'),\n                    text = df_1.Chance_Admit)\ntrace2 = go.Scatter(\n                    x = df_2.new_serial,\n                    y = df_2.Chance_Admit,\n                    mode = \"markers\",\n                    name = \"Univs number 2\",\n                    marker = dict(color = 'rgba(255, 128, 2, 1)'),\n                    text = df_2.Chance_Admit)\ntrace3 = go.Scatter(\n                    x = df_3.new_serial,\n                    y = df_3.Chance_Admit,\n                    mode = \"markers\",\n                    name = \"Univs number 3\",\n                    marker = dict(color = 'rgba(0, 255, 200, 1)'),\n                    text = df_3.Chance_Admit)\ntrace4 = go.Scatter(\n                    x = df_4.new_serial,\n                    y = df_4.Chance_Admit,\n                    mode = \"markers\",\n                    name = \"Univs number 4\",\n                    marker = dict(color = 'rgba(100, 200, 110, 1)'),\n                    text = df_4.Chance_Admit)\ntrace5 = go.Scatter(\n                    x = df_5.new_serial,\n                    y = df_5.Chance_Admit,\n                    mode = \"markers\",\n                    name = \"Univs number 5\",\n                    marker = dict(color = 'rgba(150, 55, 255, 0.8)'),\n                    text = df_5.Chance_Admit)\ndata = [trace1,trace2,trace3,trace4,trace5]\n\nlayout = dict(title = \"Chance Admit vs Serial Number of 34 Universities with Raitings\",\n              xaxis = dict(title = 'Serial Number',ticklen = 5,zeroline = False),\n              yaxis = dict(title = 'Chance Admit',ticklen = 5,zeroline = False)\n             )\nfig = dict(data=data,layout=layout)\niplot(fig)","bbf7d5c6":"df.head()","32f0e573":"# prepare dataframes\ndf_1 = df.iloc[:5,:]\n# creating trace1\ntrace1 = go.Bar(\n                x = df_1.Serial_No,\n                y = df_1.GRE,\n                name = \"GRE\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                              line = dict(color = 'rgb(0,0,0)',width=1.5)),\n                text = df_1.UnivRaiting)\n# Creating trace2 \ntrace2 = go.Bar(\n                x = df_1.Serial_No,\n                y = df_1.TOEFL,\n                name = \"TOEFL\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line = dict(color = \"rgb(0,0,0)\",width=1.5)),\n                text = df_1.UnivRaiting)\ndata = [trace1,trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data,layout=layout)\niplot(fig)","2a22a131":"# prepare data frames\ndf_1 = df.iloc[:5,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df_1.Serial_No,\n                y = df_1.LOR,\n                name = \"LOR\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df_1.UnivRaiting)\n# create trace2 \ntrace2 = go.Bar(\n                x = df_1.Serial_No,\n                y = df_1.SOP,\n                name = \"SOP\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df_1.UnivRaiting)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","d3560ef4":"# prepare data frames\ndf_1 = df.iloc[:5,:]\n\n# creating trace1\ntrace1 = go.Bar(\n                x = df_1.Serial_No,\n                y = df_1.LOR,\n                name = \"LOR\")\ntrace2 = go.Bar(\n                x = df_1.Serial_No,\n                y = df_1.SOP,\n                name = \"SOP\")\n\ndata = [trace1,trace2]\n\nlayout = dict(title = \"LOR and SOP of First Five Universities\",\n              xaxis = dict(title = \"Firs 5 Universities\"),\n              barmode = \"relative\")\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","4f405dc4":"counter_univ1 = Counter(df.UnivRaiting)\ncounter_univ","3404ff0e":"# First we create new empty dataframe\ndf_count = pd.DataFrame()\n\n# we create new dictionary\ncounter_univ1 = dict(counter_univ)\n\nuniv_no = []\ncounts = []\n# Now we can insert data to our dataframe\nfor i,j in counter_univ1.items():\n    univ_no.append(i)\n    counts.append(j)\ndf_count[\"univ_no\"]=univ_no\ndf_count[\"counts\"] = counts\n\nlabels = df_count.univ_no\npie_list = counts\n\n#figura\nfig = {\n    \"data\": [\n        {\n            \"values\": pie_list,\n            \"labels\": labels,\n            \"domain\": {\"x\": [0, .5]},\n            \"name\": \"Number of Universities Raiting\",\n            \"hoverinfo\": \"label+percent+name\",\n            \"hole\": .3,\n            \"type\": \"pie\"\n        }],\n    \"layout\": {\n        \"title\": \"Universities Number of Rates\",\n        \"annotations\": [\n            {\n                \"font\": {\"size\": 20},\n                \"showarrow\": True,\n                \"text\": \"Number of Universities\",\n                \"x\": 0.20,\n                \"y\": 1\n            }\n        ]\n    }\n    \n}\n\niplot(fig)","72b4eb58":"# data preparetion\ndf_20 = df.iloc[:20,:]\nnum_univ_size = [each for each in df_20.CGPA]\nuniv_color = [each for each in df_20.Chance_Admit]\n\ndata = [\n    {\n        \"y\": df_20.GRE,\n        \"x\": df_20.Serial_No,\n        \"mode\": \"markers\",\n        \"marker\": {\n            \"color\": univ_color,\n            \"size\": num_univ_size,\n            \"showscale\":True\n        },\n        \"text\":df_20.UnivRaiting\n    }\n]\niplot(data)","6c48fff4":"# preparing data\nx2 = df.CGPA[df.UnivRaiting==2]\nx4 = df.CGPA[df.UnivRaiting==4]\n\ntrace1 = go.Histogram(\n        x = x2,\n        opacity = 0.8,\n        name=\"Univ Number 2\",\n        marker = dict(color = \"rgba(171, 50, 96, 0.6)\"))\ntrace2 = go.Histogram(\n        x = x4,\n        opacity = 0.8,\n        name=\"Univ Number 4\",\n        marker = dict(color = \"rgba(12, 50, 196, 0.6)\"))\n\ndata = [trace1,trace2]\n\nlayout = go.Layout(barmode=\"overlay\",\n                  title = \"2 Number Universities vs 4 Number\",\n                  xaxis = dict(title = \"University Number\"),\n                  yaxis = dict(title = \"count\"))\nfig = go.Figure(data = data,layout=layout)\n\niplot(fig)","1ff8621c":"# data preparation\nx2 = df[df.UnivRaiting==2]\n\ntrace1 = go.Box(\n    y = x2.SOP,\n    name = \"SOP of University Number 2\",\n    marker = dict(\n                    color = \"rgb(12,12,140)\"))\ntrace2 = go.Box(\n    y = x2.LOR,\n    name = \"LOR of University Number 2\",\n    marker = dict(\n                    color = \"rgb(12, 128, 128)\"))\ndata = [trace1,trace2]\niplot(data)","f6639d32":"df.head()","7b786699":"# import figure factory\nimport plotly.figure_factory as ff\n\n# preparing data\ndf_matrix = df.loc[:,[\"GRE\",\"TOEFL\",\"CGPA\",\"Chance_Admit\"]]\ndf_matrix[\"index\"] = np.arange(1,len(df_matrix)+1)\n\n# scatter matrix\nfig = ff.create_scatterplotmatrix(df_matrix,diag=\"box\",index=\"index\",\n                                      colormap=\"Portland\",colormap_type=\"cat\",\n                                      height=850,width=850)\niplot(fig)","76a06a7d":"# create trace1 that is 3d scatter\ntrace1 = go.Scatter3d(\n                        x = df.GRE,\n                        y = df.TOEFL,\n                        z = df.CGPA,\n                        mode = \"markers\",\n                        marker = dict(\n                                        size = 10,\n                                        color = \"rgb(255,0,0)\"))\ndata = [trace1]\n\nlayout = go.Layout(\n                    margin = dict(\n                                    l = 0,\n                                    r = 0,\n                                    b = 0,\n                                    t = 0))\n\nfig = go.Figure(data = data,layout=layout)\niplot(fig)","21707c34":"Now we can start analyse data.","23c772fb":"Now we can see there're some columns which have space. Firstly we will rename columns.","5991a430":"# Conclusion\n* If you like it, thank you for you upvotes.","5c0724dc":"This data set has the information on the GRE,TOEFL and other details of students seeking Post graduation admission at Universities. We will try analyse this data set and understand **plotly**. I mean both of them together :) ","18b6bdbf":"We will check the columns","92942bcf":"Importing data","4da71965":"First we will import all modules which we need."}}