{"cell_type":{"583a1975":"code","d537e38c":"code","8e6cbd3b":"code","b038bc16":"code","435e1bb7":"code","b1f90eb0":"code","de58e176":"code","cbacb495":"code","8130e33d":"code","d79d387d":"code","ed20d46f":"code","ecf1e6b0":"code","d3526795":"code","71480e57":"code","234519de":"code","6aa9a904":"code","6ecf0edb":"code","56bf953f":"code","ed00a19a":"code","33cbac77":"code","9308acc9":"code","5337bb11":"code","d4c8c94e":"code","cc709974":"code","9a9b3b52":"code","5c3b0799":"code","605b9024":"code","882de7df":"code","d4de73f1":"code","0067258c":"code","e80abc01":"code","8d1411a3":"code","fd815f7a":"code","e08da892":"code","5a6ba258":"code","f03655b0":"code","7dc6f12b":"code","2f493723":"code","d7cd92c1":"code","8873063b":"code","0fbbf2a2":"code","f91aaf94":"code","be1d5303":"code","ef170bf6":"code","eeba65cf":"code","b4e2fdbe":"code","01f1556d":"code","74ad2fd6":"code","ad73f8f7":"code","d5e7b8b9":"code","992cc947":"code","ae1fb9e3":"code","310027ce":"code","fff7b9f8":"code","91dd137c":"code","e23e8f24":"code","73a56cf6":"code","b6a14347":"code","f133ef37":"code","229bd6b0":"code","4508af78":"code","1cbdda63":"code","a745c03f":"code","d91c4824":"code","3e5254a9":"code","4b34a655":"code","181ed2c7":"code","fa727fb0":"code","a832e394":"code","c410cc05":"code","743b770b":"code","763e1dd0":"code","dcc61d72":"code","e38b80e7":"code","47ab182f":"markdown","cac50eda":"markdown","71b9f046":"markdown","5495a0fd":"markdown","caed401b":"markdown","1187180a":"markdown","847f8174":"markdown","fee9fac8":"markdown","ba179603":"markdown","a326c909":"markdown","1e7a0652":"markdown","32e8f088":"markdown","b8f67565":"markdown","99e35f82":"markdown","7aed560d":"markdown","dd9e6bee":"markdown","d482911a":"markdown","33d404da":"markdown","c2756858":"markdown","767d5eb3":"markdown","29935911":"markdown","5eeba3bc":"markdown","809bcf58":"markdown","de99960c":"markdown","2c283a71":"markdown","46d8d899":"markdown","4132546b":"markdown","cf695821":"markdown","618b1cbd":"markdown","925e3a21":"markdown"},"source":{"583a1975":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport seaborn as sns\nfrom IPython.display import display, Image\nfrom collections import Counter\n\n%matplotlib inline\nsns.set(style='white', context='notebook', palette='deep') \n\nimport matplotlib.style as style\nstyle.use('fivethirtyeight')\nimport time\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.linear_model import Ridge, Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nimport xgboost as xgb\nimport lightgbm\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error,r2_score, mean_absolute_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\n\nimport warnings\nwarnings.filterwarnings('ignore')","d537e38c":"df = pd.read_csv('..\/input\/nyc-property-sales\/nyc-rolling-sales.csv', index_col = 0)","8e6cbd3b":"df_raw = df # Creating a copy of data","b038bc16":"df.head()","435e1bb7":"df.shape","b1f90eb0":"df.info()","de58e176":"# Creating building age from year\ndf['BUILDING AGE'] = 2017 - df['YEAR BUILT']","cbacb495":"# Replacing numeric values with BOROUGH names\ndf['BOROUGH'] = df['BOROUGH'].map({1:'Manhattan', 2:'Bronx', 3: 'Brooklyn', 4:'Queens',5:'Staten Island'})","8130e33d":" # Creating year and month columns from date\ndf['sale_year'] = pd.DatetimeIndex(df['SALE DATE']).year\ndf['sale_month'] = pd.DatetimeIndex(df['SALE DATE']).month","d79d387d":"# Specifying date variable and correcting its type\ndf['SALE DATE'] = pd.to_datetime(df['SALE DATE'], errors='coerce') ","ed20d46f":"# Specifying numeric variables and correcting their types\nnumeric = [\"RESIDENTIAL UNITS\",\"COMMERCIAL UNITS\",\"TOTAL UNITS\", \"LAND SQUARE FEET\" ,\n           \"GROSS SQUARE FEET\",\"SALE PRICE\" ]\nfor col in numeric: \n    df[col] = pd.to_numeric(df[col], errors='coerce')","ecf1e6b0":"# Specifying categorical variables and correcting their types\ncategorical = [\"BOROUGH\",\"NEIGHBORHOOD\",'BUILDING CLASS CATEGORY', 'TAX CLASS AT PRESENT',\n               'BUILDING CLASS AT PRESENT','ZIP CODE', 'BUILDING CLASS AT TIME OF SALE', 'TAX CLASS AT TIME OF SALE']\nfor col in categorical: \n    df[col] = df[col].astype(object)","d3526795":"df.replace(' ',np.nan, inplace=True)","71480e57":"round(df.isna().sum() \/len(df) *100,2)","234519de":"print(df[(df['LAND SQUARE FEET'].isnull()) & (df['GROSS SQUARE FEET'].notnull())].shape[0])\nprint(df[(df['LAND SQUARE FEET'].notnull()) & (df['GROSS SQUARE FEET'].isnull())].shape[0])","6aa9a904":"imputation = df[['LAND SQUARE FEET','GROSS SQUARE FEET']]\nimputation[(imputation['LAND SQUARE FEET'].isnull()) & (imputation['GROSS SQUARE FEET'].notnull())]","6ecf0edb":"imputation.dropna(inplace = True)","56bf953f":"# Regression model for predicting Gross Square Feet \n\nX = imputation['LAND SQUARE FEET']\ny = imputation['GROSS SQUARE FEET']\n\nlm = LinearRegression()\nmodel = lm.fit(X.values.reshape(-1,1),y.values.reshape(-1,1))\n\nprint(\"Sabit: \", model.intercept_)\nprint(\"Katsay\u0131: \", model.coef_)\nprint(\"Regresyon Modeli: Y={}+{}X\".format(model.intercept_,model.coef_))\nprint(\"Rsquare: \", model.score(X.values.reshape(-1,1),y.values.reshape(-1,1)))","ed00a19a":"# Regression model for predicting Land Square Feet \n\nX = imputation['GROSS SQUARE FEET']\ny = imputation['LAND SQUARE FEET']\n\nlm = LinearRegression()\nmodel = lm.fit(X.values.reshape(-1,1),y.values.reshape(-1,1))\n\nprint(\"Sabit: \", model.intercept_)\nprint(\"Katsay\u0131: \", model.coef_)\nprint(\"Regresyon Modeli: Y={}+{}X\".format(model.intercept_,model.coef_))\nprint(\"Rsquare: \", model.score(X.values.reshape(-1,1),y.values.reshape(-1,1)))","33cbac77":"# Gross square feet estimator\n\ndef imputer_gross(x):\n    return x * 0.64779857 + 1822.76092513\n\n# land square feet estimator\n\ndef imputer_land(x):\n    return x * 0.6375468 + 1107.3023519","9308acc9":"# Imputing missing values of theese columns.\n\ndf['LAND SQUARE FEET'] = df['LAND SQUARE FEET'].mask((df['LAND SQUARE FEET'].isnull()) & (df['GROSS SQUARE FEET'].notnull()),\n                                                     imputer_land(df['GROSS SQUARE FEET']))\ndf['GROSS SQUARE FEET'] = df['GROSS SQUARE FEET'].mask((df['LAND SQUARE FEET'].notnull()) & (df['GROSS SQUARE FEET'].isnull()),\n                                                       imputer_gross(df['LAND SQUARE FEET']))","5337bb11":"df = df[df[\"SALE PRICE\"] > 0]  # Deleting 0 price transfer transactions \ndf = df[df[\"SALE PRICE\"].notnull()] # Deleting nan values of dependence variable","d4c8c94e":"plt.figure(figsize=(12,6))\nsns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis');","cc709974":"del df[\"BUILDING CLASS AT PRESENT\"] # It contains the same information with BUILDING CLASS CATEGORY\ndel df[\"ADDRESS\"] # The variable 1 not required for the model\ndel df[\"ZIP CODE\"] # The variable 2 not required for the model\ndel df[\"SALE DATE\"] # We don't need it as we have created the year and month variables.\ndf.drop([\"EASE-MENT\",\"APARTMENT NUMBER\"], axis=1, inplace=True) # Completely empty columns.\n\ndf = df.dropna() \ndf.drop_duplicates(keep = \"last\", inplace=True)","9a9b3b52":"# Removing data where commercial + residential doesn't equal total units\ndf = df[df['TOTAL UNITS'] == df['COMMERCIAL UNITS'] + df['RESIDENTIAL UNITS']]","5c3b0799":"df[[\"TOTAL UNITS\", \"SALE PRICE\"]].groupby(['TOTAL UNITS'], as_index=False).count().sort_values(by='SALE PRICE', ascending=False)","605b9024":"# Removing rows with TOTAL UNITS == 0 and one outlier with 2261 units\ndf = df[(df['TOTAL UNITS'] > 0) & (df['TOTAL UNITS'] != 2261)]","882de7df":"# Year cannot be 0.\ndf = df[df['YEAR BUILT'] != 0]\ndel df['YEAR BUILT']","d4de73f1":"# Square feet should not be 0.\ndf = df[df[\"LAND SQUARE FEET\"] != 0]\ndf = df[df[\"GROSS SQUARE FEET\"] != 0]","0067258c":"df.shape","e80abc01":"df_after_missing = df.copy()","8d1411a3":"round(df.describe([0.75,0.85,0.95,0.99,0.995,0.999]),3)","fd815f7a":"df[\"GROSS SQUARE FEET\"].mean() + 2*df[\"GROSS SQUARE FEET\"].std()","e08da892":"df = df[df[\"GROSS SQUARE FEET\"] < 72000] # Deleting outlier that far 2 std from mean ","5a6ba258":"df[\"LAND SQUARE FEET\"].mean() + 3*df[\"LAND SQUARE FEET\"].std()","f03655b0":"df = df[df[\"LAND SQUARE FEET\"] < 42000] # Deleting outlier that far 3 std from mean  ","7dc6f12b":"# Correlations with target according to the progress of the study\ncorr = pd.DataFrame(df.corr().abs().unstack()\n                    .sort_values(ascending = False)[\"SALE PRICE\"][1:]).rename(columns = {0:\"Corr After Outlier and Missing\"})\na = pd.DataFrame(df_after_missing.corr().abs().unstack()\n                 .sort_values(ascending = False)[\"SALE PRICE\"][1:]).rename(columns = {0:\"Corr After Missing\"})\nb = pd.DataFrame(df_raw.corr().abs().unstack()\n                 .sort_values(ascending = False)[\"SALE PRICE\"][1:]).rename(columns = {0:\"Corr Default\"}).iloc[:11,:]\n\npd.concat([b,a,corr],axis=1).dropna()","2f493723":"del df[\"LOT\"]","d7cd92c1":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(12,5))\nplotd = sns.distplot(df[(df['SALE PRICE']>100) & (df['SALE PRICE'] < 5000000)]['SALE PRICE'], kde=True, bins=100)\n\ntick_spacing=250000\nplotd.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))\nplotd.set_xlim([-100000, 5000000])\nplt.xticks(rotation=30)\nplt.axvline(df[(df['SALE PRICE']>100) & (df['SALE PRICE'] < 5000000)]['SALE PRICE'].mean(), c='red')\nplt.axvline(df[(df['SALE PRICE']>100) & (df['SALE PRICE'] < 5000000)]['SALE PRICE'].median(), c='blue')\nplt.text(250000,0.0000012, \"median\")\nplt.text(850000,0.0000010, \"mean\")\nplt.show()","8873063b":"m = df.select_dtypes(np.number)\ndf[m.columns]= m.round().astype('Int64')\npd.options.display.float_format = '{:,.0f}'.format\ndf.rename(columns = {\"SALE PRICE\":\"sale_price\"},inplace = True)","0fbbf2a2":"df2 = df[(df['sale_price'] > 100000) & (df['sale_price'] < 5000000)]\n\ntrace0 = go.Box(\n    y=df2.sale_price[df2.BOROUGH == 'Manhattan' ],\n    name = 'Manhattan',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=df2.sale_price[df2.BOROUGH ==  'Bronx' ],\n    name = 'Bronx',\n    marker = dict(\n        color = 'rgb(8,81,156)',\n    )\n)\ntrace2 = go.Box(\n    y=df2.sale_price[df2.BOROUGH ==  'Brooklyn' ],\n    name = 'Brooklyn',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace3 = go.Box(\n    y=df2.sale_price[df2.BOROUGH ==  'Queens' ],\n    name = 'Queens',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ntrace4 = go.Box(\n    y=df2.sale_price[df2.BOROUGH ==  'Staten Island' ],\n    name = 'Staten Island',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\n\ndat = [trace0, trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    title='Housing Prices by Boroughs',\n    xaxis=dict(\n        title='Borough'\n    ),\n    yaxis=dict(\n        title='Sale Price'\n    ),\n    paper_bgcolor='rgb(243, 243, 243)',\n    plot_bgcolor='rgb(243, 243, 243)'\n)\n\nfig = go.Figure(data=dat, layout=layout)\npy.iplot(fig)","f91aaf94":"months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\ncolors = ['hsl('+str(h)+',50%'+',50%)' for h in np.linspace(0, 360, 12)]\ndata = [{\n    'y' : df2.sale_price[df2.sale_month == ind],\n    'type':'box',\n    'name' : months[ind - 1],\n    'marker':{'color': colors[ind - 1]}\n} for ind in range(1,13)]\n\nlayout = go.Layout(\n    title='Housing Prices by Months',\n    xaxis=dict(\n        title='Month'\n    ),\n    yaxis=dict(\n        title='Sale Price'\n    ),\n    paper_bgcolor='rgb(243, 243, 243)',\n    plot_bgcolor='rgb(243, 243, 243)'\n)\n\nfig = go.Figure(data=data, layout=layout)\n#dat = [trace0, trace1, trace2, trace3, trace4]\npy.iplot(fig)","be1d5303":"sns.barplot(x = df.sale_year, y = df.sale_price).set_title(\"Sale Price by Year\");","ef170bf6":"df_bar=df[['sale_month', 'sale_price']].groupby(by='sale_month').count().sort_values(by='sale_month', ascending=True).reset_index()\ndf_bar.columns.values[1]='Sales_count'\n\nplt.figure(figsize=(12,6))\nsns.barplot(y = 'Sales_count', x = 'sale_month', data = df_bar)\nplt.title('Sale Count by Months')\nplt.show()","eeba65cf":"# There is no seasonality for house prices. So we can delete theese columns.\ndel df[\"sale_year\"]\ndel df[\"sale_month\"]","b4e2fdbe":"d3 = pd.DataFrame(df2.groupby(['BOROUGH']).mean()).reset_index()\nd3['BOROUGH'][d3.BOROUGH == 1] = 'Manhattan'\nd3['BOROUGH'][d3.BOROUGH == 2] = 'Bronx'\nd3['BOROUGH'][d3.BOROUGH == 3] = 'Brooklyn'\nd3['BOROUGH'][d3.BOROUGH == 4] = 'Queens'\nd3['BOROUGH'][d3.BOROUGH == 5] = 'Staten Island'\ntotal = d3[\"LAND SQUARE FEET\"].sum()\ntrace0 = go.Scatter(\n    x=d3.BOROUGH,\n    y=d3[\"LAND SQUARE FEET\"],\n    mode='markers',\n    marker=dict(\n        size=[((x\/total)*300) for x in d3[\"LAND SQUARE FEET\"]],\n        color=['rgb(93, 164, 214)', 'rgb(255, 144, 14)',  'rgb(44, 160, 101)', 'rgb(255, 65, 54)', 'rgb(255, 15, 54)'],\n    )\n)\n\ndata = [trace0]\nlayout = go.Layout(\n    title='Average Land Square Feet of Properties in Each Borough',\n    xaxis=dict(\n        title='Borough',\n        gridcolor='rgb(255, 255, 255)',\n    ),\n    yaxis=dict(\n        title='Land square feet',\n        gridcolor='rgb(255, 255, 255)',\n    ),\n    paper_bgcolor='rgb(243, 243, 243)',\n    plot_bgcolor='rgb(243, 243, 243)'\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='bubblechart-size')","01f1556d":"neighborhoods = list(dict(Counter(df2.NEIGHBORHOOD).most_common(10)).keys())\n\navg_sale_prices = []\nfor i in neighborhoods:\n    avg_price = np.mean(df2.sale_price[df2.NEIGHBORHOOD == i])\n    avg_sale_prices.append(avg_price)\n    \ndataa = [go.Bar(\n            y= neighborhoods,\n            x = avg_sale_prices,\n            width = 0.7,\n            opacity=0.6, \n            orientation = 'h',\n            marker=dict(\n                color='rgb(158,202,225)',\n                line=dict(\n                    color='rgb(8,48,107)',\n                    width=1.5,\n                )\n            ),\n        )]\nlayout = go.Layout(\n    title='House Price by Top 10 Neighborhoods',\n    autosize = True,\n    margin=go.Margin(\n        l=250,\n        r=50,\n        b=100,\n        t=100,\n        pad=4\n    ),\n    xaxis=dict(\n        title='Sale Price',\n    ),\n    yaxis=dict(\n        title='Neighborhood',\n    ),\n)\n\nfig = go.Figure(data=dataa, layout = layout)\npy.iplot(fig, filename='barplottype')","74ad2fd6":"dataset = df[(df['COMMERCIAL UNITS']<20) & (df['TOTAL UNITS']<50) & (df['sale_price']<5000000) & (df['sale_price']>100000) & (df['GROSS SQUARE FEET']>0)]\n\nplt.figure(figsize=(14,6))\nsns.boxplot(x='COMMERCIAL UNITS', y=\"sale_price\", data=dataset)\nplt.title('Sale Prices by Commercial Units');","ad73f8f7":"plt.figure(figsize=(16,6))\norder = sorted(dataset['BUILDING CLASS CATEGORY'].unique())\nsns.boxplot(x='BUILDING CLASS CATEGORY', y='sale_price', data=dataset, order=order)\nplt.xticks(rotation=90)\nplt.title('Sale Prices by Building Class Category')\nplt.show()","d5e7b8b9":"pd.options.display.float_format = '{:,.4f}'.format","992cc947":"df.head()","ae1fb9e3":"# Deleting of unnecessary categorical variables for the model\n\ndel df[\"NEIGHBORHOOD\"]\ndel df['BUILDING CLASS AT TIME OF SALE']\ndel df['TAX CLASS AT PRESENT']","310027ce":"df.info()","fff7b9f8":"#Fixing all column names to be lowercase and no spaces\ndf.columns = df.columns.str.lower().str.replace(' ', '_')","91dd137c":"df.tax_class_at_time_of_sale = df.tax_class_at_time_of_sale.astype(object)","e23e8f24":"# Popular Regression Algorithms\n\nlm = LinearRegression()\nlgbm = lightgbm.LGBMRegressor(random_state = 42)\nmlp = MLPRegressor(random_state = 42)\nridge = Ridge(random_state = 42)\nlasso = Lasso(random_state = 42)\nknn = KNeighborsRegressor()\nrf = RandomForestRegressor(random_state = 42)\nxgbt = xgb.XGBRegressor(random_state = 42)\ndtree = DecisionTreeRegressor(random_state = 42)","73a56cf6":"X = df.drop([\"sale_price\",\"building_class_category\",\"borough\",\"tax_class_at_time_of_sale\"],axis = 1).astype(int)\ny = df[\"sale_price\"].astype(int)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 42)","b6a14347":"algo = [xgbt,lgbm,lm,ridge,lasso,knn,rf,dtree,mlp]\nresult = []\n\nfor i in algo:\n        start = time.process_time()\n        model = i.fit(X_train,y_train)\n        result.append([str(i).split(\"(\")[0] + str(\"_baseline\"), model.score(X_train, y_train), model.score(X_test, y_test),\n                  np.sqrt(mean_squared_error(y_train, model.predict(X_train))),\n                  np.sqrt(mean_squared_error(y_test, model.predict(X_test))),\n                  mean_absolute_error(y_train, model.predict(X_train)),\n                  mean_absolute_error(y_test, model.predict(X_test))])\n        print(str(i).split(\"(\")[0],\"\u2713    \", \"{}\".format(time.process_time()-start),\"sn\")\n        \nresult_raw_model = pd.DataFrame(result, columns = [\"Algorithm\", \"Train_Score\", \"Test_Score\", \"Train_Rmse\",\n                                         \"Test_Rmse\", \"Train_Mae\", \"Test_Mae\"]).sort_values(\"Test_Rmse\").set_index(\"Algorithm\")\nresult_raw_model","f133ef37":"mtr = df.corr()\nmask = np.zeros_like(mtr)\nmask[np.triu_indices_from(mask)] = True\nfig, ax = plt.subplots(figsize=(16,12))\nplt.suptitle(\"Correlation Matrix of Columns in Heatmap\", size=24)\nsns.heatmap(mtr, mask= mask, annot=True, annot_kws={\"size\": 10});","229bd6b0":"# Identifying and deleting variables with more than 75% correlation\n\ncorr_matrix = df.corr().abs()\nupper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n[column for column in upper.columns if any(upper[column] > 0.75)]","4508af78":"del df[\"residential_units\"]\ndel df[\"total_units\"]","1cbdda63":"# Identifying and deleting variables that have nothing to do with the dependent variable\n\ndf.corr().abs().unstack().sort_values(ascending =False )[\"sale_price\"]","a745c03f":"del df[\"building_age\"]","d91c4824":"# Creating dummy variables from categorical variables\n\none_hot_variables = [\"borough\",\"building_class_category\",\"tax_class_at_time_of_sale\"]\ndf = pd.get_dummies(df,prefix = one_hot_variables, prefix_sep = \"_\" , drop_first = True)","3e5254a9":"X = df.drop([\"sale_price\"],axis = 1).astype(int)\ny = df[\"sale_price\"].astype(int)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 42)","4b34a655":"algo = [xgbt,lgbm,lm,ridge,lasso,knn,rf,dtree,mlp]\nresult = []\n\nfor i in algo:\n        start = time.process_time()\n        model = i.fit(X_train,y_train)\n        result.append([str(i).split(\"(\")[0] + str(\"_processed\"), model.score(X_train, y_train), model.score(X_test, y_test),\n                  np.sqrt(mean_squared_error(y_train, model.predict(X_train))),\n                  np.sqrt(mean_squared_error(y_test, model.predict(X_test))),\n                  mean_absolute_error(y_train, model.predict(X_train)),\n                  mean_absolute_error(y_test, model.predict(X_test))])\n        print(str(i).split(\"(\")[0],\"\u2713    \", \"{}\".format(time.process_time()-start),\"sec\")\n        \nresult_second_model = pd.DataFrame(result, columns = [\"Algorithm\", \"Train_Score\", \"Test_Score\", \"Train_Rmse\",\n                                         \"Test_Rmse\", \"Train_Mae\", \"Test_Mae\"]).sort_values(\"Test_Rmse\").set_index(\"Algorithm\")","181ed2c7":"result_second_model.head(2)","fa727fb0":"result_raw_model.head(2)","a832e394":"param_grid = {\n    \"n_estimators\":[100,200,300],\n    \"max_depth\":[10, 50, 100],\n    \"max_features\":[6,8,10,12,14,16]\n}\n\nrf = RandomForestRegressor(random_state = 42)\n\nrf_tuned = GridSearchCV(estimator = rf,\n                            param_grid = param_grid,\n                            cv = 2,\n                            n_jobs=-1,\n                        verbose=0)\n\nrf_tuned.fit(X_train, y_train)\nrf_tuned.best_estimator_","c410cc05":"model = rf_tuned.best_estimator_.fit(X_train,y_train) # Grid Search result","743b770b":"result_optimize_model = []\nresult_optimize_model.append([\"RandomForestRegressor Optimize\", model.score(X_train, y_train), model.score(X_test, y_test),\n                  np.sqrt(mean_squared_error(y_train, model.predict(X_train))),\n                  np.sqrt(mean_squared_error(y_test, model.predict(X_test))),\n                  mean_absolute_error(y_train, model.predict(X_train)),\n                  mean_absolute_error(y_test, model.predict(X_test))])\n\npd.DataFrame(result_optimize_model, columns = [\"Algorithm\", \"Train_Score\", \"Test_Score\", \"Train_Rmse\",\n                                         \"Test_Rmse\", \"Train_Mae\", \"Test_Mae\"]).sort_values(\"Test_Rmse\").set_index(\"Algorithm\")","763e1dd0":"result_second_model[:1]","dcc61d72":"rankings = model.feature_importances_.tolist()\nimportance = pd.DataFrame(sorted(zip(X_train.columns,rankings),reverse=True),columns=[\"variable\",\"importance\"]).sort_values(\"importance\",ascending = False)","e38b80e7":"plt.figure(figsize=(15,10))\nsns.barplot(x=\"importance\",\n            y=\"variable\",\n            data=importance)\nplt.title('De\u011fi\u015fken \u00d6nemleri')\nplt.tight_layout()","47ab182f":"----------------------","cac50eda":"## Exploratory Data Analysis","71b9f046":"#### Outlier Approachs","5495a0fd":"#### 1 - Feature Selection","caed401b":"#### Visualizations","1187180a":"<font color='blue'>**After running a regression model between these two variables on the general data, we will fill in the missing values with the predictions of this model.**","847f8174":"#### Variable Importances","fee9fac8":"#### 1 - b) Low Correlations with Dependent Variable","ba179603":"#### RandomForestRegressor - Hyper Parameter Optimization","a326c909":"----------------------------------\n**Story Of The Dataset**\n\nThis dataset contains every building sold in the New York City over a 1-year and their location, address, type,  sale price and sale date.\n\nBOROUGH: A digit code for the borough the property is located in.\n            - Manhattan (1), Bronx (2), Brooklyn (3), Queens (4), and Staten Island (5)\n\nBLOCK; LOT: The combination of borough, block, and lot forms a unique key for property in New York City.\n\nBUILDING CLASS AT PRESENT and BUILDING CLASS AT TIME OF SALE: The type of building at various points in time.\n\nNote : 0 dollar sales are actually transfers of ownership between parties.\n\n----------------------------------\n","1e7a0652":"#### Creatign New  Variables","32e8f088":"<font color='blue'>**There are 1372 rows that can be filled in with their approximate values.**","b8f67565":"<font color='blue'>**In the final model we established, the ranking of the most effective variables in terms of explaining the variance in the dependent variable is as in graph.**","99e35f82":"#### Missing Values Approaches","7aed560d":"#### 2 - One Hot Encoding For Categorical Columns","dd9e6bee":"#### 1 - a) Multicolinarity Control ( High correlation of independent variables with each other )","d482911a":"#### Specifying the Type of Variables","33d404da":"<font color='blue'> **Around 37% of GROSS SF and LAND SF are missing. Furthermore, around 35% of SALE PRICE is also missing. Instead of deleting all of square feet data, we can make imputation between each other of them on rows with a value in one and not in the other.**","c2756858":"<font color='blue'>**As a result, we achieved a slight improvement in all metrics with the optimized model.**","767d5eb3":"# End-to-end Machine Learning Regression Project","29935911":"<font color='blue'>**As can be seen, with the techniques we use, the number of errors has decreased significantly, and the scores have also increased. And the best performing model appears to be Random Forest. Now we will try hyperparameter estimation for this algorithm.**","5eeba3bc":"----------------------","809bcf58":"#### Baseline  Model","de99960c":"#### Second Model and Model Selection","2c283a71":"<font color='blue'>**As can be seen, the correlations gradually increased during all transactions.**","46d8d899":"#### Model Development","4132546b":"----------------------","cf695821":"------------------------------","618b1cbd":"<font color='blue'>**I found the best parameters by grid search.**","925e3a21":"<font color='red'>*Created with* \u2764 *by Mustafa Batuhan Ermi\u015f.*<font>"}}