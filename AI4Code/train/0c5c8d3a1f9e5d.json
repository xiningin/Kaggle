{"cell_type":{"c4aede34":"code","a2a75f94":"code","7cc13881":"code","e131dd65":"code","29d8c83a":"code","ef3c2785":"code","f3877672":"code","5afdf639":"code","2060f985":"code","81037ec6":"code","a63ad625":"code","84d4ff2c":"code","084d7ef3":"code","fb40a499":"code","e9e1e736":"code","0c053a46":"code","1b57cb40":"code","68a6be88":"markdown","2d2f8ddd":"markdown","0ae16602":"markdown","097b2987":"markdown","84fa02e4":"markdown","8b869fa1":"markdown","b20bdf7e":"markdown","378de445":"markdown"},"source":{"c4aede34":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a2a75f94":"# Carregar Dataset\ntrain=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest_images=pd.read_csv('..\/input\/digit-recognizer\/test.csv')","7cc13881":"# Separar em \"X_Train\" e \"Y_train\"\n\n# X_Train: axis=1 para dropar toda coluna target \"label\"\ntrain_images=train.drop('label',axis=1)\n\n#Y_Train\ntrain_labels=train['label']","e131dd65":"# Visualizar dataset\ntrain_images.head()","29d8c83a":"# Missing Values ?\ntrain_images.isnull().sum()","ef3c2785":"# Normaliza\u00e7\u00e3o dos dados para escala de cinza\ntrain_images=train_images\/255.0\ntest_images=test_images\/255.0","f3877672":"# Modelamos os dados para 28x28x1, afinal, possuimos as imagens no formato de vetor 1D com 784 valores\ntrain_images=train_images.values.reshape(len(train_images),28,28,1)\ntest_images=test_images.values.reshape(len(test_images),28,28,1)","5afdf639":"# Podemos visualizar 1 amostra\nplt.imshow(train_images[78][:,:,0])","2060f985":"# Carregar libs para modelo preditivo\nimport tensorflow as tf\nfrom tensorflow import keras","81037ec6":"def build_model(hp):\n    model=keras.Sequential([\n        keras.layers.Conv2D(\n            filters=hp.Int('conv_1_filter', min_value=32, max_value=128, step=16),   # escolher\u00e1 um valor do range\n            kernel_size=hp.Choice('conv_1_kernel', values = [3,5,7]),                # escolher\u00e1 apenas os melhores valores\n            activation='relu',\n            input_shape=(28,28,1)                                                    \n        ),\n         keras.layers.Conv2D(\n            filters=hp.Int('conv_2_filter', min_value=32, max_value=128, step=16),\n            kernel_size=hp.Choice('conv_2_kernel', values = [3,5,7]),\n            activation='relu'\n         ),\n         keras.layers.Flatten(),\n         keras.layers.Dense(\n             units=hp.Int('dense_1_units', min_value=32, max_value=128, step=16),\n             activation='relu'\n             ),\n        keras.layers.Dense(10, activation='softmax')     \n        ])\n    model.compile(optimizer=keras.optimizers.Adam(hp.Choice('learning_rate', values=[1e-2, 1e-3])),\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n  \n    return model","a63ad625":"from kerastuner import RandomSearch\nfrom kerastuner.engine.hyperparameters import HyperParameters","84d4ff2c":"tuner_search = RandomSearch(build_model,max_trials=5,objective='val_accuracy')","084d7ef3":"# Precis\u00e3o do n\u00famero de tentativas e hiperpar\u00e2metros usados \u200b\u200bpara cada tentativa(pode levar muito tempo)\ntuner_search.search(train_images,train_labels,epochs=3,validation_split=0.1,verbose=2)","fb40a499":"# Escolhemos apenas os melhores modelos\nmodel = tuner_search.get_best_models(num_models=1)[0]\nmodel.summary()","e9e1e736":"# Treinamos\nmodel.fit(train_images, train_labels, epochs=8,initial_epoch=3, validation_split=0.1,verbose=1)","0c053a46":"# Preparamos predi\u00e7\u00f5es\n\n# Coluna ImageId\ntest_pred = pd.DataFrame(model.predict(test_images, batch_size=200))\ntest_pred = pd.DataFrame(test_pred.idxmax(axis = 1))\ntest_pred.index.name = 'ImageId'\n\n# Coluna \"Label\"\ntest_pred = test_pred.rename(columns = {0: 'Label'}).reset_index()\ntest_pred['ImageId'] = test_pred['ImageId'] + 1\n\ntest_pred.head()","1b57cb40":"test_pred.to_csv('submission.csv', index = False)","68a6be88":"# RELU ACTIVATION\n![texto alternativo](https:\/\/www.researchgate.net\/profile\/Hossam_H_Sultan\/publication\/333411007\/figure\/fig7\/AS:766785846525952@1559827400204\/ReLU-activation-function.png)","2d2f8ddd":"#4. Modelo preditivo","0ae16602":"#2. data acquisition","097b2987":"#3. Preparar dados","84fa02e4":"#5. melhorias","8b869fa1":"#SOFTMAX\n![texto alternativo](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRhFghoIFWRy3q2baN_mODkmVnP1ZsrDR1pOg&usqp=CAU)","b20bdf7e":"\n\n# 1.Definition of the problem\n---\nCompetition for you has some experience with R or Python and machine learning basics, but it is new in computer vision. This competition is the perfect introduction to techniques like neural networks using a classic data set, including pre-extracted resources.\n\n![texto alternativo](https:\/\/www.wolfram.com\/mathematica\/new-in-10\/highly-automated-machine-learning\/HTMLImages.en\/create-a-handwritten-digit-recognizer\/In_1.png)\n\nMNIST (\"National Institute of Standards and Modified Technology\") is the de facto data set for the \u201cHello World\u201d of computer vision. Since its launch in 1999, this classic data set of handwritten images has served as the basis for benchmarking classification algorithms. As new machine learning techniques emerge, MNIST remains a trusted resource for researchers and students. In this competition, your objective is to correctly identify the digits of a data set of tens of thousands of handwritten images. We recommend that you experiment with different algorithms to learn first hand what works well and how the techniques compare.\nPractical skills:\n* Fundamentals of computer vision, including simple neural networks.\n* Classification methods such as SVM, KNN ...\n\nMore details about the data set, including algorithms that have been tested and their levels of success, can be found at http:\/\/yann.lecun.com\/exdb\/mnist\/index.html","378de445":"#FLATTENING\n![texto alternativo](https:\/\/sds-platform-private.s3-us-east-2.amazonaws.com\/uploads\/73_blog_image_1.png)"}}