{"cell_type":{"68e04017":"code","c73da829":"code","216d7bfb":"code","8d05f08a":"code","29d09b37":"code","f74c1ab0":"code","40b6389a":"code","1e95e8ee":"code","ab8ecdde":"code","9f9c2b70":"code","af607924":"markdown","d4a1096c":"markdown","fef2faed":"markdown","86b9ba19":"markdown","d8899872":"markdown","f056d034":"markdown","856d531f":"markdown","f6cc0622":"markdown","12019aa0":"markdown","868bfb5f":"markdown","702eef91":"markdown","68bf9519":"markdown","c2ab69cd":"markdown","1f3275f4":"markdown","8ec380eb":"markdown"},"source":{"68e04017":"\nimport tensorflow as tf\n\nimport numpy as np","c73da829":"celsius_q    = np.array([-40, -10,  0,  8, 15, 22,  38],  dtype=float)\nfahrenheit_a = np.array([-40,  14, 32, 46, 59, 72, 100],  dtype=float)\n\nfor i,c in enumerate(celsius_q):\n    print(\"{} degrees Celsius = {} degrees Fahrenheit\".format(c, fahrenheit_a[i]))","216d7bfb":"l0 = tf.keras.layers.Dense(units=1, input_shape=[1])","8d05f08a":"model = tf.keras.Sequential([l0])","29d09b37":"model.compile(loss='mean_squared_error',\n              optimizer=tf.keras.optimizers.Adam(0.1))","f74c1ab0":"history = model.fit(celsius_q, fahrenheit_a, epochs=500, verbose=False)\nprint(\"Finished training the model\")","40b6389a":"import matplotlib.pyplot as plt\nplt.xlabel('Epoch Number')\nplt.ylabel(\"Loss Magnitude\")\nplt.plot(history.history['loss'])","1e95e8ee":"print(model.predict([100.0]))","ab8ecdde":"print(\"These are the layer variables: {}\".format(l0.get_weights()))","9f9c2b70":"l0 = tf.keras.layers.Dense(units=4, input_shape=[1])\nl1 = tf.keras.layers.Dense(units=4)\nl2 = tf.keras.layers.Dense(units=1)\nmodel = tf.keras.Sequential([l0, l1, l2])\nmodel.compile(loss='mean_squared_error', optimizer=tf.keras.optimizers.Adam(0.1))\nmodel.fit(celsius_q, fahrenheit_a, epochs=500, verbose=False)\nprint(\"Finished training the model\")\nprint(model.predict([100.0]))\nprint(\"Model predicts that 100 degrees Celsius is: {} degrees Fahrenheit\".format(model.predict([100.0])))\nprint(\"These are the l0 variables: {}\".format(l0.get_weights()))\nprint(\"These are the l1 variables: {}\".format(l1.get_weights()))\nprint(\"These are the l2 variables: {}\".format(l2.get_weights()))","af607924":"## Create the model\n\nNext create the model. We will use simplest possible model we can, a Dense network. Since the problem is straightforward, this network will require only a single layer, with a single neuron.\n\n### Build a layer\n\nWe'll call the layer `l0` and create it by instantiating `tf.keras.layers.Dense` with the following configuration:\n\n*   `input_shape=[1]` \u2014 This specifies that the input to this layer is a single value. That is, the shape is a one-dimensional array with one member. Since this is the first (and only) layer, that input shape is the input shape of the entire model. The single value is a floating point number, representing degrees Celsius.\n\n*   `units=1` \u2014 This specifies the number of neurons in the layer. The number of neurons defines how many internal variables the layer has to try to learn how to solve the problem (more later). Since this is the final layer, it is also the size of the model's output \u2014 a single float value representing degrees Fahrenheit. (In a multi-layered network, the size and shape of the layer would need to match the `input_shape` of the next layer.)\n","d4a1096c":"## Import dependencies\n\nFirst, import TensorFlow. Here, we're calling it `tf` for ease of use. We also tell it to only display errors.\n\nNext, import [NumPy](http:\/\/www.numpy.org\/) as `np`. Numpy helps us to represent our data as highly performant lists.","fef2faed":"### Assemble layers into the model\n\nOnce layers are defined, they need to be assembled into a model. The Sequential model definition takes a list of layers as argument, specifying the calculation order from the input to the output.\n\nThis model has just a single layer, l0.","86b9ba19":"The first variable is close to ~1.8 and the second to ~32. These values (1.8 and 32) are the actual variables in the real conversion formula.\n\nThis is really close to the values in the conversion formula. We'll explain this in an upcoming video where we show how a Dense layer works, but for a single neuron with a single input and a single output, the internal math looks the same as [the equation for a line](https:\/\/en.wikipedia.org\/wiki\/Linear_equation#Slope%E2%80%93intercept_form), $y = mx + b$, which has the same form as the conversion equation, $f = 1.8c + 32$.\n\nSince the form is the same, the variables should converge on the standard values of 1.8 and 32, which is exactly what happened.\n\nWith additional neurons, additional inputs, and additional outputs, the formula becomes much more complex, but the idea is the same.\n\n### A little experiment\n\nJust for fun, what if we created more Dense layers with different units, which therefore also has more variables?","d8899872":"## Set up training data\n\nAs we saw before, supervised Machine Learning is all about figuring out an algorithm given a set of inputs and outputs. Since the task in this Codelab is to create a model that can give the temperature in Fahrenheit when given the degrees in Celsius, we create two lists `celsius_q` and `fahrenheit_a` that we can use to train our model.","f056d034":"**Note**\n\nYou will often see the layers defined inside the model definition, rather than beforehand:\n\n```python\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Dense(units=1, input_shape=[1])\n])\n```","856d531f":"## Display training statistics\n\nThe `fit` method returns a history object. We can use this object to plot how the loss of our model goes down after each training epoch. A high loss means that the Fahrenheit degrees the model predicts is far from the corresponding value in `fahrenheit_a`.\n\nWe'll use [Matplotlib](https:\/\/matplotlib.org\/) to visualize this (you could use another tool). As you can see, our model improves very quickly at first, and then has a steady, slow improvement until it is very near \"perfect\" towards the end.\n\n","f6cc0622":"The correct answer is $100 \\times 1.8 + 32 = 212$, so our model is doing really well.\n\n### To review\n\n\n*   We created a model with a Dense layer\n*   We trained it with 3500 examples (7 pairs, over 500 epochs).\n\nOur model tuned the variables (weights) in the Dense layer until it was able to return the correct Fahrenheit value for any Celsius value. (Remember, 100 Celsius was not part of our training data.)\n\n\n","12019aa0":"## Train the model\n\nTrain the model by calling the `fit` method.\n\nDuring training, the model takes in Celsius values, performs a calculation using the current internal variables (called \"weights\") and outputs values which are meant to be the Fahrenheit equivalent. Since the weights are initially set randomly, the output will not be close to the correct value. The difference between the actual output and the desired output is calculated using the loss function, and the optimizer function directs how the weights should be adjusted.\n\nThis cycle of calculate, compare, adjust is controlled by the `fit` method. The first argument is the inputs, the second argument is the desired outputs. The `epochs` argument specifies how many times this cycle should be run, and the `verbose` argument controls how much output the method produces.","868bfb5f":"## Compile the model, with loss and optimizer functions\n\nBefore training, the model has to be compiled. When compiled for training, the model is given:\n\n- **Loss function** \u2014 A way of measuring how far off predictions are from the desired outcome. (The measured difference is called the \"loss\".)\n\n- **Optimizer function** \u2014 A way of adjusting internal values in order to reduce the loss.\n","702eef91":"## Use the model to predict values\n\nNow you have a model that has been trained to learn the relationship between `celsius_q` and `fahrenheit_a`. You can use the predict method to have it calculate the Fahrenheit degrees for a previously unknown Celsius degrees.\n\nSo, for example, if the Celsius value is 100, what do you think the Fahrenheit result will be? Take a guess before you run this code.","68bf9519":"# The Basics: Training Your First Model","c2ab69cd":"## Looking at the layer weights\n\nFinally, let's print the internal variables of the Dense layer. ","1f3275f4":"As you can see, this model is also able to predict the corresponding Fahrenheit value really well. But when you look at the variables (weights) in the `l0` and `l1` layers, they are nothing even close to ~1.8 and ~32. The added complexity hides the \"simple\" form of the conversion equation.\n\nStay tuned for the upcoming video on how Dense layers work for the explanation.","8ec380eb":"### Some Machine Learning terminology\n\n - **Feature** \u2014 The input(s) to our model. In this case, a single value \u2014 the degrees in Celsius.\n\n - **Labels** \u2014 The output our model predicts. In this case, a single value \u2014 the degrees in Fahrenheit.\n\n - **Example** \u2014 A pair of inputs\/outputs used during training. In our case a pair of values from `celsius_q` and `fahrenheit_a` at a specific index, such as `(22,72)`.\n\n"}}