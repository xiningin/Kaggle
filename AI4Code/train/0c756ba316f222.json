{"cell_type":{"2cb3b7f0":"code","b9f1e021":"code","4925c8f6":"code","846daa24":"code","853cf94e":"code","db6afe43":"code","d74f7d1d":"code","ded6af46":"code","139fd865":"code","48107834":"code","7d124827":"markdown"},"source":{"2cb3b7f0":"from xgboost import XGBClassifier\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import GridSearchCV\nimport category_encoders as ce\nfrom sklearn.pipeline import Pipeline\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd ","b9f1e021":"#Import training and testing data\ntrain_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")","4925c8f6":"#Which columns have missing values?\ndisplay(train_data.isnull().sum().sort_values(ascending=False))\ndisplay(test_data.isnull().sum().sort_values(ascending=False))","846daa24":"#Create new Cabin variable\ntrain_data['Cabin_new'] = train_data['Cabin'].str[0]\ntest_data['Cabin_new'] = train_data['Cabin'].str[0]\n\n#Create title variable\ntrain_data['Title']=train_data.Name.str.extract('([A-Za-z]+)\\.')\ntest_data['Title']=test_data.Name.str.extract('([A-Za-z]+)\\.')\n\n#Create Fam_size variable\ntrain_data['Fam_size'] = train_data['SibSp'] + train_data['Parch']\ntest_data['Fam_size'] = test_data['SibSp'] + test_data['Parch']","853cf94e":"train_data","db6afe43":"#Preprocessing numerical data\n#Fare\ntrain_data['Fare'].fillna(train_data['Fare'].median(), inplace=True)\ntest_data['Fare'].fillna(train_data['Fare'].mean(), inplace=True)\n\n#Age\ntrain_data['Age'].fillna(train_data['Age'].mean(), inplace=True)\ntest_data['Age'].fillna(train_data['Age'].mean(), inplace=True)","d74f7d1d":"features = [\"Pclass\", \"Age\", \"Fam_size\", \"Fare\", \"Sex\", \"Embarked\"]\ncat_cols = ['Sex', 'Embarked', \"Pclass\"]\nnum_cols = ['Age', 'Fam_size', 'Fare']\n\ny = train_data[\"Survived\"]\nX = train_data[features]\nX_test = test_data[features]","ded6af46":"#Preprocessing for categorical data\ncat_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n#Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(transformers=[('cat', cat_transformer, cat_cols)])","139fd865":"#Model\nmodel = XGBClassifier(random_state=126)\n\n#Bundle preprocessing and modeling code in a pipeline\nmy_pipeline = Pipeline(steps=[('preprocess', preprocessor), \n                              ('model', model)])\n\nparam_grid = {\n    'model__n_estimators': [20, 40, 60],\n    'model__learning_rate': [0.05, 0.07, 0.08],\n    'model__max_depth': [4, 6, 8]}\n\n\nsearch = GridSearchCV(my_pipeline, param_grid, n_jobs=-1, verbose=10, cv=10)\nsearch.fit(X, y)\nprint(\"Best parameter (CV score=%0.3f):\" % search.best_score_)\nprint(search.best_params_)","48107834":"predictions = search.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","7d124827":"Visualizations created during the development of the model herein can be found here: https:\/\/www.kaggle.com\/db102291\/titanic-competition-visualization-w-seaborn"}}