{"cell_type":{"68a7efd2":"code","a628410e":"code","e2694f04":"code","4e899e97":"code","6a905122":"code","3712cbb8":"code","b0c151df":"code","2fa03484":"code","9f3a12bd":"code","d9d41b74":"code","ecf3beef":"code","e164bc2c":"code","8915ba9b":"code","8f20a170":"code","cc53341c":"code","8ba25f21":"code","77fbd9a5":"code","c7970dc2":"code","0e1fd916":"code","b27742eb":"code","8a5bf9af":"markdown","33cb4d53":"markdown","0254fc88":"markdown","2d74e6ea":"markdown","82e2b059":"markdown","967dfb76":"markdown","93a131cf":"markdown","4d43a584":"markdown","f9b571c1":"markdown","c4e4c634":"markdown","72ca07fc":"markdown","0dfb98da":"markdown"},"source":{"68a7efd2":"import pandas as pd\nimport numpy  as np\nimport matplotlib.pyplot as plt","a628410e":"dir = \"..\/input\/mall-customers\/Mall_Customers.csv\"\ndata = pd.read_csv(dir)\nprint(data.head(),\"\\n\\n\")\ndata['gender'] = [1 if g=='Male' else 0 for g in data['Genre']]\nprint(data.head())","e2694f04":"plt.figure(figsize=(6,3))\nplt.title(\"Annual Income plot\")\nplt.xlabel(\"Spending Score (1-100)\")\nplt.ylabel(\"Annual Income (k$)\")\nplt.scatter(data[\"Annual Income (k$)\"], data[\"Spending Score (1-100)\"]);\n\n\nplt.figure(figsize=(6,3))\nplt.title(\"Gender plot\")\nplt.scatter(data[\"gender\"], data[\"Spending Score (1-100)\"])\nplt.xlabel(\"gender\")\nplt.ylabel(\"Spending Score (1-100)\")\n\nplt.figure(figsize=(6,3))\nplt.title(\"Age plot\")\nplt.scatter(data[\"Age\"], data[\"Spending Score (1-100)\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Spending Score (1-100)\");\n\nplt.figure(figsize=(6,3))\nplt.title(\"Age vs Income plot\")\nplt.scatter(data[\"Age\"], data[\"Annual Income (k$)\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Annual Income (k$)\");","4e899e97":"def convert_to_points(data1, data2):\n    points = []\n    maxx = max(data1)\n    maxy = max(data2)\n    for i in data.index:\n        # Scaling down the points by dividing them by max\n        points.append( np.array((data1[i] \/ maxx, data2[i]\/ maxy)))\n\n    points = np.array(points)\n    return points\npoints = convert_to_points(data['Annual Income (k$)'], data['Spending Score (1-100)'])","6a905122":"plt.figure(figsize=(6,3))\nplt.title(\"Scaled Down data\")\nplt.scatter(points[:, 0], points[:, 1])\nplt.xlabel(\"Annual Income (k$)\")\nplt.ylabel(\"Spending Score (1-100)\")","3712cbb8":"points.shape","b0c151df":"def edist(a, b):\n    return np.linalg.norm(a-b)\n    # euclidean distance\n    # l2 norm\n    \ndef mdist(a, b):\n    return np.linalg.norm(a-b, 1)\n    # manhatten distance\n    # l1 norm","2fa03484":"# return the minimum distance between the clusters\ndef single_linkage(cA, cB, dist_type):\n    \n    min_dist= float('inf')\n    \n    for i in cA:\n        for j in cB:\n            if dist_type=='e':\n                dist = edist(i, j)\n            elif dist_type=='m':\n                dist = mdist(i, j)\n                \n            if dist <= min_dist:\n                min_i = i\n                min_j = j\n                min_dist = dist\n                \n    return min_dist","9f3a12bd":"# return average distance between the clusters\ndef avg_linkage(cA, cB, dist_type):\n    \n    avg = 0\n    count = 0\n    for i in cA:\n        for j in cB:\n            if dist_type=='e':\n                dist = edist(i, j)\n            elif dist_type=='m':\n                dist = mdist(i, j)\n            \n            avg += dist\n            count += 1\n                \n    return avg\/count","d9d41b74":"# return max distance between the clusters\ndef complete_linkage(cA, cB, dist_type):\n    \n    max_dist= float('-inf')\n    \n    for i in cA:\n        for j in cB:\n            if dist_type=='e':\n                dist = edist(i, j)\n            elif dist_type=='m':\n                dist = mdist(i, j)\n                \n            if dist >= max_dist:\n                max_i = i\n                max_j = j\n                max_dist = dist\n                \n    return max_dist","ecf3beef":"def centroid_linkage(cA, cB, dist_type):\n    \n    # centroid of points in cartesian plane =  mean of the x and y coordinates respectively\n    a = np.mean(cA, axis=-2)\n    b = np.mean(cB, axis=-2)\n    \n    if dist_type=='e':\n        dist = edist(a, b)\n    elif dist_type=='m':\n        dist = mdist(a, b)\n        \n    return dist\n","e164bc2c":"def min_dist(cluster, linkage, dist_type):\n    matrix = np.empty((len(cluster), len(cluster)))\n    \n    for i, c1 in enumerate(cluster):\n        for j, c2 in enumerate(cluster):\n            #print(c1)\n            #print(c2)\n            \n            if linkage=='single':\n                dist = single_linkage(c1, c2, dist_type)\n            elif linkage=='average':\n                dist = avg_linkage(c1, c2, dist_type)\n            elif linkage=='complete':\n                dist = complete_linkage(c1, c2, dist_type)\n            elif linkage=='cent':\n                dist = centroid_linkage(c1, c2, dist_type)\n            else:\n                print(\"Not a valid linkage. Exiting....\")\n                exit()\n                \n            matrix[i][j] = dist\n            if i == j:\n                matrix[i][j]=float(1e4)\n    \n    return matrix","8915ba9b":"def plot(c, xlab='x', ylab='y'):\n    x = np.zeros(len(c), dtype=list)\n    y = np.zeros(len(c), dtype=list)\n    plt.xlabel(xlab)\n    plt.ylabel(ylab)\n    for n, i in enumerate(c):\n        x[n]=list()\n        y[n]=list()\n        for j in i:\n            #print(j)\n            x[n].append(j[0])\n            y[n].append(j[1])\n    for i in range(len(c)):\n        plt.scatter(x[i], y[i], label=f\"Cluster {i+1}\")\n    \n    plt.legend()\n","8f20a170":"def Get_Clusters(points, N=1, linkage='average', dist_type='e', cut_off=2.7,verbose=1):\n    \n    # Initialize a cluster based on the input points\n    old_min = float(\"inf\")\n    cluster = []\n    for i in points:\n        cluster.append([i])\n    print(f\"Cluster shape: {np.array(cluster).shape}\\n(no of clusters, cluster size, coordinate)\\n\")\n    \n    len_segment = int(len(points)* 0.1)+1\n    # can specify the number of clusters desired\n    \n    while len(cluster) !=N:\n        sample_mat = min_dist(cluster, linkage, dist_type)\n        done = False\n        for i in range(sample_mat.shape[0]):\n            for j in range(sample_mat.shape[1]):\n                if sample_mat[i][j] == np.amin(sample_mat):\n                                       \n                    if done==False:\n                        mini = i\n                        minj = j\n                        done = True\n                    if np.amin(sample_mat) >= cut_off*old_min:\n                        print(\"distance too great, stopping cluster formation\")\n                        return cluster\n                    \n        for i in cluster[minj]:\n            cluster[mini].append(i)\n        del cluster[minj]\n        \n        \n        \n        if len(cluster)%20==0:\n            if verbose:\n                \n                print(f\"Number of clusters formed: {len(cluster)}\")\n                print(f\"distance between the 2 closest clusters: {np.amin(sample_mat)}\\n\\n\")\n        \n        if len(cluster)%len_segment==0:\n            old_min = np.amin(sample_mat)\n\n    return cluster\n","cc53341c":"clust = Get_Clusters(points ,linkage='cent')\nplt.figure(figsize=(15,8))\nplot(clust, \"Annual Income\", \"Spending_score\")","8ba25f21":"clust = Get_Clusters(points,cut_off=1.6, linkage = 'single', dist_type = 'e', verbose=0)\nplt.figure(figsize=(15,8))\nplot(clust, \"Annual Income\", \"Spending_score\")","77fbd9a5":"clust = Get_Clusters(points,N=5 ,linkage = 'complete', dist_type = 'm', verbose=0)\nplt.figure(figsize=(15,8))\nplot(clust, \"Annual Income\", \"Spending_score\")","c7970dc2":"clust = Get_Clusters(points, N=20 ,linkage = 'average', dist_type = 'e', verbose=0)\nplt.figure(figsize=(15,8))\nplot(clust, \"Annual Income\", \"Spending_score\")","0e1fd916":"age_vs_score = convert_to_points(data['Age'], data['Spending Score (1-100)'])\ncluster = Get_Clusters(age_vs_score, linkage='complete', verbose=0)\nplt.figure(figsize=(15,8))\nplot(cluster, \"Age\", \"Spending Score\")","b27742eb":"age_vs_income = convert_to_points(data['Age'], data['Annual Income (k$)'])\ncluster = Get_Clusters(age_vs_income, linkage='complete', verbose=0)\nplt.figure(figsize=(15,8))\nplot(cluster, \"Age\", \"Annual Income\")","8a5bf9af":"### Get the minimum distance between 2 clusters","33cb4d53":"# Get_Clusters ( points, N, dist_val, dist_type, verbose )\n## Arguments :=\n1. Points: numpy array of the shape (number of points, number of dimensions). each point stored as (x, y)\n2. N (Optional): Number of clusters required. Default: 1\n3. linkage (Optional): The type of linkage to be used. 'average': average linkage, 'single': single linkage, 'cent': centroid linkage. Default: 'average'\n4. dist_type (Optional): Method of calculating cluster distance. 'm' = manhattan distance, 'e' = Euclidean distance. Default = 'e'\n5. cut_off (Optional): cut off multiplier to stop clustering if cluster distance > cut_off * previous distance. Default: 2.6\n6. verbose (Optional): 1 = all info, 0 = no info. Default = 1","0254fc88":"##### Only one plot (Annual Income plot) has good clusterable data. Age plot can also be clustered to provide useful insight. ","2d74e6ea":"# Lets try Clustering with other fields","82e2b059":"### Plot the clusters","967dfb76":"### Age vs Annual Income","93a131cf":"## Convert the datapoints in the form (x, y) and add it to the data list","4d43a584":"# Step 1: Initialize clusters as individual points\n# Step 2: Loop\n### Step 2.1    : Make min distance matrix for cluster\n### Step 2.2    : Get the min points and add to the cluster\n### Step 2.3    : Repeat till num clusters <= desired OR till the closest clusters are farther than needed ","f9b571c1":"### Age vs Spending score","c4e4c634":"### Check the clusters","72ca07fc":"# --------------------------------------------------------------------------------------------------------","0dfb98da":"# Read the dataset and explore the raw data"}}