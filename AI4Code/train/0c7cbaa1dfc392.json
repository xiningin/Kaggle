{"cell_type":{"53de978d":"code","4786e1f3":"code","39b76fef":"code","8f8016f6":"code","b2ea99fb":"code","0ec6b146":"code","cff49da1":"code","0e5cc489":"code","24f3d538":"code","f89d0606":"code","4068886e":"code","ef84f0bd":"code","a743393f":"code","696b181e":"code","b602fd42":"code","d0138c5a":"code","5e484c00":"code","d6d188f1":"code","686aed47":"code","d0e35722":"code","92e6a4ef":"code","0529e889":"code","84c37c61":"code","1e61de3f":"code","c5d8f8e6":"code","daf7ca10":"code","be59fe15":"code","0f15fe7d":"code","ac31d801":"code","a8e0cd8a":"code","b2178c74":"code","3e5b017f":"code","842cc527":"code","a485abe7":"code","ce12d59f":"markdown","d88a0f8b":"markdown","1d45277b":"markdown","8d047e8b":"markdown"},"source":{"53de978d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4786e1f3":"train_file = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")","39b76fef":"train_file.head()","8f8016f6":"# Check which columns has NaN values\n\nfor column_name in train_file.columns:\n    print(column_name, \":\",  train_file[column_name].isnull().sum())","b2ea99fb":"del train_file[\"PassengerId\"]\ndel train_file[\"Name\"]\ndel train_file[\"Ticket\"]","0ec6b146":"train_file.head()","cff49da1":"# Creating seperate class check for sex\nmale_column = (train_file[\"Sex\"] == \"male\").astype(int)\nfemale_column = (train_file[\"Sex\"] == \"female\").astype(int)\n\ntrain_file[\"Male\"] = male_column\ntrain_file[\"Female\"] = female_column\n\n# Drop the actual sex columns since we no longer need it\ndel train_file[\"Sex\"]\n\nprint(train_file.head())","0e5cc489":"train_file[\"Age\"] = train_file[\"Age\"].fillna(int(train_file[\"Age\"].mean()))","24f3d538":"del train_file[\"Cabin\"]","f89d0606":"train_file[\"Embarked\"].value_counts().idxmax()","4068886e":"train_file[\"Embarked\"] = train_file[\"Embarked\"].fillna(train_file[\"Embarked\"].value_counts().idxmax())","ef84f0bd":"portS_column = (train_file[\"Embarked\"] == \"S\").astype(int)\nportQ_column = (train_file[\"Embarked\"] == \"Q\").astype(int)\nportC_column = (train_file[\"Embarked\"] == \"C\").astype(int)\n\ntrain_file[\"Embarked_S\"] = portS_column\ntrain_file[\"Embarked_Q\"] = portQ_column\ntrain_file[\"Embarked_C\"] = portC_column\n\ndel train_file[\"Embarked\"]\n\nprint(train_file.head())","a743393f":"pclass_1 = (train_file[\"Pclass\"] == 1).astype(int)\npclass_2 = (train_file[\"Pclass\"] == 2).astype(int)\npclass_3 = (train_file[\"Pclass\"] == 3).astype(int)\n\ntrain_file[\"Pclass1\"] = pclass_1\ntrain_file[\"Pclass2\"] = pclass_2\ntrain_file[\"Pclass3\"] = pclass_3\n\ndel train_file[\"Pclass\"]\n\nprint(train_file.head())","696b181e":"X = train_file.to_numpy()[:, 1:]\ny = train_file[\"Survived\"].to_numpy()","b602fd42":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","d0138c5a":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(random_state=0).fit(X_train, y_train)","5e484c00":"y_predict = clf.predict(X_test)\nfrom sklearn.metrics import mean_squared_error\nprint(mean_squared_error(y_predict, y_test))\nerror_wout_norm = mean_squared_error(y_predict, y_test)","d6d188f1":"clf.coef_","686aed47":"print(X_train[0])","d0e35722":"from sklearn import preprocessing\nmin_max_scaler = preprocessing.MinMaxScaler()\n\nX[:, 0, None] = min_max_scaler.fit_transform(X[:, 0].reshape(-1, 1)) # Age \nX[:, 3, None] = min_max_scaler.fit_transform(X[:, 3].reshape(-1, 1)) # Fare","92e6a4ef":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\nclf = LogisticRegression(random_state=0).fit(X_train, y_train)\n\ny_predict = clf.predict(X_test)\nprint(mean_squared_error(y_predict, y_test))\nprint(error_wout_norm)","0529e889":"(y_predict == y_test).sum() \/ y_test.shape[0] * 100","84c37c61":"y_train.shape","1e61de3f":"regressor.coef_","c5d8f8e6":"test_file = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_file.head()","daf7ca10":"# Check which columns has NaN values in test file\n\nfor column_name in test_file.columns:\n    print(column_name, \":\",  test_file[column_name].isnull().sum())","be59fe15":"def arrange_dataset (df):\n    df[\"Age\"] = df[\"Age\"].fillna(df[\"Age\"].mean())\n    df[\"Fare\"] = df[\"Fare\"].fillna(df[\"Fare\"].value_counts().idxmax())\n\n    del df[\"PassengerId\"]\n    del df[\"Name\"]\n    del df[\"Ticket\"]\n    del df[\"Cabin\"]\n    \n    # Creating seperate class check for sex\n    male_column = (df[\"Sex\"] == \"male\").astype(int)\n    female_column = (df[\"Sex\"] == \"female\").astype(int)\n\n    df[\"Male\"] = male_column\n    df[\"Female\"] = female_column\n\n    # Drop the actual sex columns since we no longer need it\n    del df[\"Sex\"]\n    \n    portS_column = (df[\"Embarked\"] == \"S\").astype(int)\n    portQ_column = (df[\"Embarked\"] == \"Q\").astype(int)\n    portC_column = (df[\"Embarked\"] == \"C\").astype(int)\n\n    df[\"Embarked_S\"] = portS_column\n    df[\"Embarked_Q\"] = portQ_column\n    df[\"Embarked_C\"] = portC_column\n\n    del df[\"Embarked\"]\n    \n    pclass_1 = (df[\"Pclass\"] == 1).astype(int)\n    pclass_2 = (df[\"Pclass\"] == 2).astype(int)\n    pclass_3 = (df[\"Pclass\"] == 3).astype(int)\n\n    df[\"Pclass1\"] = pclass_1\n    df[\"Pclass2\"] = pclass_2\n    df[\"Pclass3\"] = pclass_3\n\n    del df[\"Pclass\"]","0f15fe7d":"arrange_dataset(test_file)\nX_final = test_file.to_numpy()","ac31d801":"X_final[:, 0, None] = min_max_scaler.fit_transform(X_final[:, 0].reshape(-1, 1)) # Age \nX_final[:, 3, None] = min_max_scaler.fit_transform(X_final[:, 3].reshape(-1, 1)) # Fare","a8e0cd8a":"df = pd.DataFrame(clf.predict(X_final), columns=[\"Survived\"])","b2178c74":"test_file = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndf[\"PassengerId\"] = test_file[\"PassengerId\"]","3e5b017f":"df = df[[\"PassengerId\", \"Survived\"]]","842cc527":"df.columns","a485abe7":"df.to_csv('\/kaggle\/working\/df.csv')","ce12d59f":"Since the most repeated port is Cherbourg, I replace the NaN values with Cherbourg","d88a0f8b":"**Hypothesis #1**: PassengerID and Name is irrevelant","1d45277b":"As it can be seen here, since the range of values are too wide in Fare and Age compared to Embarked and Sex classes, the theta values for them is pretty low.","8d047e8b":"Since Cabin has too much NaN values, I also drop Cabin"}}