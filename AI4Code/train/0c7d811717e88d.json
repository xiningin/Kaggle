{"cell_type":{"bd00319d":"code","980abc97":"code","af16618c":"code","c7d7f443":"code","c6961302":"code","9bcdad02":"code","e4f43f90":"code","9ce47922":"code","1e6f1e22":"code","9255a5c3":"code","f043c59d":"code","bed2ea4f":"code","015b0441":"code","9709b80a":"code","e9645a44":"code","a2ddef4b":"code","e8b1c038":"code","b497b205":"code","2e666367":"code","9de45f3e":"code","fcaf0e69":"code","bbc157f2":"code","311167a3":"code","1b398f8e":"code","c3e0b44c":"code","acf138cd":"code","196b1289":"code","c77dd9c0":"code","9a8eefec":"code","4004d683":"code","22468e67":"code","9759aee2":"code","2f22bbe7":"code","978b17a2":"code","f212c2cb":"code","231f20a2":"code","26c19509":"code","39fa69fb":"code","8f670926":"code","3d5c1ec6":"code","0651de7d":"code","0149f9f3":"code","1f5f4325":"code","93a218eb":"code","44257d4b":"code","494e8b8f":"code","59905c4a":"code","eac535d2":"code","9b61d7f2":"code","aea6b055":"code","58c0a1b0":"code","e4b4ce57":"code","2ffff802":"code","5b0ed424":"code","822b8511":"code","209b33cc":"code","53f2cd8c":"code","8ca79c57":"code","cbc248df":"code","bbbe9ec0":"code","199041a7":"code","9d13eb2b":"code","231bef10":"code","8e093e23":"code","a622df01":"code","1e88fbe0":"code","58a7c3dc":"code","a1c66ebd":"code","c22f2b18":"code","85312f7f":"code","79503f85":"code","a1133356":"code","a038cc9b":"code","0e3bcada":"code","e7050c33":"code","ad748fcc":"code","1bd7c188":"code","eb2af850":"markdown","5e85a7bb":"markdown","231fdb09":"markdown","0f67ace0":"markdown","87a741e2":"markdown","1e9dd326":"markdown","769ced65":"markdown","f7872324":"markdown","e1797589":"markdown","c002d760":"markdown","aeeab790":"markdown","e98b4f14":"markdown","aa8444e4":"markdown","ba2cf3a3":"markdown","334246aa":"markdown","8650e00f":"markdown","bd265085":"markdown","5457d3df":"markdown","8e2cbfac":"markdown","de390be3":"markdown","ca4657e1":"markdown","bbeacb91":"markdown","bc368db7":"markdown","c5aa126f":"markdown","973dbd1c":"markdown","4dcbce2d":"markdown","8420f054":"markdown","e8e5f97d":"markdown","52da0293":"markdown","ac645674":"markdown","479cc8f3":"markdown","15f77831":"markdown","0144a4d9":"markdown","d925ac81":"markdown","5ff33bce":"markdown","6737ac12":"markdown","66ec0a35":"markdown","01f927c7":"markdown","d6bfb958":"markdown","49b7c7f1":"markdown","613e8f55":"markdown","915be379":"markdown","678318f4":"markdown","4450e076":"markdown","37e069cb":"markdown","30192afc":"markdown","13adbff9":"markdown","7b836aaf":"markdown","bc5601c9":"markdown"},"source":{"bd00319d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #plot graphs to analyze the data\nfrom __future__ import print_function\nimport csv\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","980abc97":"data=pd.read_csv(\"..\/input\/data.csv\")\n","af16618c":"data.info()","c7d7f443":"data.head()","c6961302":"data.corr()","9bcdad02":"data.Overall.plot(kind='line',color=\"red\",label=\"Overall\",alpha=0.5,grid=True,linestyle=\"-\",linewidth=5)\ndata.Potential\t.plot(kind ='line',color='green',label='Potential',alpha=0.5,grid=True,linestyle='-.',linewidth=5)\nplt.legend(loc=\"upper right\")\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\nplt.title(\"Overall Potential Line Plot\")\n","e4f43f90":"data.plot(kind=\"scatter\",x=\"Overall\",y=\"Potential\",alpha=0.5,color='g')\nplt.xlabel(\"Overall\")\nplt.ylabel(\"Potential\")\nplt.title(\"Overall Potential Scatter Plot\")\n","9ce47922":"plt.scatter(data.Overall,data.Potential,alpha=0.5,color='green')","1e6f1e22":"data.Overall.plot(kind='hist',bins=20)\nplt.show()","9255a5c3":"Dictionary={}\nfile = '..\/input\/data.csv'\nwith open(file) as fh:\n    rd = csv.DictReader(fh) \n    for row in rd:\n        keys=row.keys()\n        values=row.values()\n        for key in row.keys(): \n            Dictionary[key]=row[key]\n             \nprint(Dictionary)    ","f043c59d":"\n#del Dictionary['Flag']    #deletes key 'Flag'\n#Dictionary.clear()     #clears the dictionary.\n#del Dictionary        #deletes entire Dictionary\n#print(Dictionary)       #you cannot print the Dictionary after it's deleted. It will give an error.\n#I prefer not to print the dictionary it increases the run time","bed2ea4f":"data=pd.read_csv(\"..\/input\/data.csv\")","015b0441":"series=data[\"ID\"]\nprint(type(series))\nprint(series)\ndata_frame=data[[\"ID\"]]\nprint(type(data_frame))\nprint(data_frame)\n","9709b80a":"print(3>2)\nprint(3<2)\nprint(3==3)\nprint(True and False)\nprint(True or False)","e9645a44":"#Filtering with Pandas to Data Frame\nx=data['Overall']>90 #with this statement I search for Player who have a higher Overall value than 90\ndata[x]","a2ddef4b":"#Filtering with Pandas wih Logical_and\ndata[np.logical_and(data['Overall']>85,data['Potential']>90)] \n#with this statement I look for players who have higher Overall value than 85 'and' players who have higher Potential value than 90","e8b1c038":"i=0\nwhile i != 5:\n    print(\"i is\",i)\n    i+=1","b497b205":"my_list=[1,2,3,4,5]\nfor i in my_list:\n    print(\"i is\",i)\n    \nprint(\" \")   \n#For in Dictionaries\nfor key,value in Dictionary.items():\n    print(key,\":\",value)","2e666367":"def avg_number(x, y):\n    print(\"Average of \",x,\" and \",y, \" is \",(x+y)\/2)\navg_number(3, 4)\n\ndef my_function():\n    t=(1,2,3,4,5,6)\n    return t\na,b,c,d,e,_=my_function()  #we use _ for the variable we don't actually want to use but in any case you can use it as below.\nprint(a,b,c,d,e,_)","9de45f3e":"x=5    #x=5 is a global scope\ndef func():\n   # x=x*x if you use this here you will get an UnboundLocalError: local variable 'x' referenced before assignment\n    x=3   #=3 is a local scope.\n    x=x*x\n    return x\nprint(x)   #this is printing the global scope\nprint(func()) #and this is printing the local scope.\nprint(x)  #as yu can see below the global scope didn't change.\n","fcaf0e69":"#As I mentioned above in desciption of Scope.There are 3 types of scopes.1.Global 2.Local 3.Built-in\n#So how can we learn what is a built-in scope\nimport builtins\ndir(builtins)\n    ","bbc157f2":"def multiply(x,y): \n    def add():\n        summation=0\n        for i in range(0,y):\n            summation=summation+x\n        return summation\n    print(add())\n\nmultiply(3,5)","311167a3":"#Default Arguments\ndef func(a,b=1,c=3):\n    print(a,b,c)\nfunc(5)\nfunc(5,3,2)# What if I want to change the arguments? ","1b398f8e":"#Flexible Arguments\n#Args\ndef func(*args):\n    summation=0\n    for i in args:\n        summation+=i\n    return summation\nfunc(7,9,15,63,123)#there is no limit of parameters\n","c3e0b44c":"#kwargs\n#don't forget the dictionary I defined in the first part. I am going to use it.\ndef func(**kwargs):\n    for key,value in kwargs.items():\n        print(key,\":\",value)\n        \nfunc(country='turkey',name='muhammet',lastname='cepi')\nprint(\"----------------------\")\nfunc(**Dictionary)","acf138cd":"def multiplying(x,y):   #I used 4 lines to multiply two numbers. Instead I can use only one line to create the sam function.\n    multiplied=0\n    multiplied=x*y\n    return multiplied\n\nmultiply=lambda x,y:x*y\nprint(multiplying(3,5),\"the answer of the normal function\")\nprint(multiply(5,3),\"the answer of lambda funciton\")\n","196b1289":"mylist=[1,2,3,4]\nmyslist=[3,4,5,6]\ny=map(lambda x,z:z*x,mylist,myslist)\nprint(list(y))","c77dd9c0":"h_letters = []\n\nfor letter in 'human':\n    h_letters.append(letter)\n\nprint(h_letters)\n\nlist1=[1,2,3]\nlist2=[i+1 for i in list1]\nprint(\"list2=\",list2)","9a8eefec":"data=pd.read_csv('..\/input\/data.csv')\ndata.head()\n#we would likely use data.ClubLogo but as you can see below the column name is Club Logo.\n#There is a space. So we should use data[\"Club Logo\"]\n","4004d683":"data.tail()","22468e67":"data.columns #to see the columns we use it.","9759aee2":"print(data[\"Weak Foot\"].value_counts(dropna=False)) #dropna: if there are any nan values. Count them too.","2f22bbe7":"data.describe()","978b17a2":"data.boxplot(column=\"Overall\",by=\"Potential\")\nplt.show()\n#it's a good Idea to plot Overall by Potential but the plot is not looking ordinary.\n#so I am going to use non-sense columns for an ordinary plot.","f212c2cb":"data.boxplot(column=\"Weak Foot\",by=\"Skill Moves\")\nplt.show()","231f20a2":"data_new=data.head()  #first I created a new data to explain in easily.\ndata_new","26c19509":"#So I am going to melt the data\nmelted=pd.melt(frame=data_new,id_vars=\"Name\",value_vars=[\"Overall\",\"Potential\"])\nmelted\n#melt is a sort of a bridge between pandas and seaborn.","39fa69fb":"melted.pivot(index=\"Name\",columns=\"variable\",values=\"value\")","8f670926":"#first we need two dataframes\ndata1=data.head()\ndata2=data.tail()\npd.concat([data1, data2],ignore_index=True,axis=0) #you shoul not use axis=0 if ypu want to concat the data in rows.","3d5c1ec6":"data1=data.Overall.head()\ndata2=data.Potential.head();\npd.concat([data1, data2],ignore_index=True,axis=1) #but you must use axis=1 if you want to concat the column","0651de7d":"#data.dtypes ","0149f9f3":"data[\"Potential\"]=data[\"Potential\"].astype(\"float\")\ndata[\"Name\"]=data[\"Name\"].astype(\"category\")\ndata.dtypes\n#as you can see below the data types of the name and Potential have changed.","1f5f4325":"data.head(10) #as you can see below by the column \"Loaned From\" there are NaN values. These are missing datas.\n#There are several ways to deal with them.","93a218eb":"df=data\n#df.dropna(inplace=True) #this deletes all data that has one or more missing values.\n#But sadly it deleted everything because obviusly every data had one or more missing value.    :(\ndf.tail(10)","44257d4b":"df['Loaned From'] = df['Loaned From'].fillna(\"Real Madrid\")\ndata.head(10) #so they are all loaned from Real Madrid","494e8b8f":"data1=data\ndata1.LS.dropna(inplace=True)","59905c4a":"assert data1.LS.notnull().all() #it gives us nothing so it worked.","eac535d2":"footballer=[\"Messi\",\"Ronaldo\"]\ncountries=[\"Argentina\",\"Portugal\"]\nlist_label=[\"footballer\",\"countries\"]\nlist_col=[footballer,countries]\nzipped=list(zip(list_label,list_col))\ndictio=dict(zipped)\ndataf=pd.DataFrame(dictio)\nprint(dataf)\n#So above you see how to create two lists and concat them and then turn to zipped form and then to dictionary and then to dataframe wow that's a lot fo things.\n#If you don't have a dictionary already you have to make the thing above.\n#But let's use my Dictionary that I created at the top of my Kernel. I had a litle bit problems with it but I was able to solve it.\n#Using only one statement wil do the job for you \u0131f you have a Dictionary created already.\ndf=pd.Series(Dictionary).to_frame()\ndf","9b61d7f2":"# I am going to add a new column but not to dataframe based on the dictionary at the top of my kernel.\ndataf[\"Overall\"]=[94,93]\ndataf","aea6b055":"#Broadcasting\ndataf[\"potential\"]=95 #95 will be the value of the entire column\ndataf","58c0a1b0":"data1=data.loc[:,[\"Overall\",\"LongShots\",\"Acceleration\"]]\ndata1.plot() # it's confusing","e4b4ce57":"data1.plot(subplots=True)\nplt.show()","2ffff802":"#scatter plot\ndata.plot(kind=\"scatter\",x=\"Overall\",y=\"Potential\")","5b0ed424":"#histogram\ndata.plot(kind=\"hist\",y=\"Overall\",bins=50,range=(0,250),normed=True)","822b8511":"fig,axes=plt.subplots(nrows=2,ncols=1)\ndata.plot(kind=\"hist\",y=\"Overall\",bins=50,range=(0,250),normed=True,ax=axes[0])\ndata.plot(kind=\"hist\",y=\"Overall\",bins=50,range=(0,250),normed=True,ax=axes[1],cumulative=True)\nplt.savefig(\"mygraph.png\")\nplt","209b33cc":"time_list=[\"2019-02-24\",\"2019-02-25\"]\nprint(\"type of time_list=\")\nprint(type(time_list[1]))\ndatetime_object=pd.to_datetime(time_list)\nprint(\"type of datetime_object\")\nprint(type(datetime_object))","53f2cd8c":"#close warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n#as we have no date time index we should add it to our data frame\ndata2=data.head()\ndate_list=[\"2019-02-24\",\"2019-03-25\",\"2019-04-26\",\"2020-05-27\",\"2019-02-28\"]\ndatetime_object=pd.to_datetime(date_list)\ndata2[\"date\"]=datetime_object\ndata2=data2.set_index(\"date\")\ndata2","8ca79c57":"#now we select the row we want by datetime\ndata3=data2.loc[\"2019-02-28\"]\nprint(data3)\nprint(\"\\n\")\ndata4=data2.loc[\"2019-02-24\":\"2019-05-27\"]\nprint(data4)","cbc248df":"#list resample by year\ndata2.resample(\"A\").median()","bbbe9ec0":"#list resample by month\ndata2.resample(\"M\").median()","199041a7":"#there are Nan values and these must be filled.I am going to use interpolate. If you write to google pandas interpolate you will see the methods.\n\ndata2.resample(\"M\").first().interpolate(\"from_derivatives\")","9d13eb2b":"#I used here another method. There are 7 methods.\ndata2.resample(\"M\").mean().interpolate(\"linear\")","231bef10":"data=data.set_index(\"Unnamed: 0\") #with this statement you bring the column you want to row.\n#data.index=data[\"Unnamed: 0\"]\ndata.head()","8e093e23":"#data[:] to call everything\n#data[:][0:1] # to call one row\ndata[\"Nationality\"][1] #to call the nationality of one player.","a622df01":"data.iloc[0]   #row selection\n#data.iloc[:,5] #column selection\n#data.iloc[0:5,2:5] #multiple rows and columns selection. ","1e88fbe0":"data.iloc[0,5]#row and column selection. Exact value selection","58a7c3dc":"data.loc[0:5,\"Age\":\"Nationality\"]","a1c66ebd":"boolean=data.Overall>90\ndata[boolean]","c22f2b18":"#we can combine two boolean series\nboolean_first=data.Overall>90\nboolean_second=data.Potential>92\ndata[boolean_first&boolean_second]","85312f7f":"#confusing thing just look at the example.\ndata.Potential[data.Overall>90]","79503f85":"def div(n):\n    return 100-n\ndata.Overall.apply(div).head(10)","a1133356":"data.Overall.apply(lambda n:100-n).head(10) #the same fucniton as above","a038cc9b":"data[\"Overtial\"]=data.Overall+data.Potential\ndata.Overtial.head()\n#or you can use data.head() and take a look to the rightest column","0e3bcada":"#our index name:\nprint(data.index.name)\n#we can change it this way\ndata.index.name=\"MyID\"\ndata.head()","e7050c33":"#data.info() I used to count the entries.\n#I can change the range of the Index\ndata.index=range(100,18307,1)\ndata.head()","ad748fcc":"#I read the data again. It can be confusing for me if I continue with same data as above\ndata=pd.read_csv(\"..\/input\/data.csv\")\ndata.head()","1bd7c188":"data1=data.set_index([\"Overall\",\"Potential\"])\ndata1.head()","eb2af850":"**E- Lambda Functions**<br>\nLambda functions are helping us to create functions in a faster way.","5e85a7bb":"**Filterin Data Frames**<br>\nCreating boolean series using fllters","231fdb09":"**Hierarchical Indexing**<br>\nWe can build a hierarchical form of the indexes.","0f67ace0":"**Diagnose Data For Cleaning**<br>\nWe need to diagnose and clean the data for exploring.\nThere can be some \"unclean data\". Before cleaning we should fix them.<br>\nUnclean data is for example:<br>\n   Upper-lower case in Column names.<br>\n   Missing data<br>\n   Different language<br>\n","87a741e2":"**Explotary Data Analaysis**<br>\nvalue_counts()=Frequency counter.<br>\nI am going to check in next examples the outliers and quartiles. This is difficult to explain so KhanAcademy explained it very well. So here is the link.<br>\nhttps:\/\/www.khanacademy.org\/math\/statistics-probability\/summarizing-quantitative-data\/box-whisker-plots\/a\/identifying-outliers-iqr-rule<br>\nAfter using the describe function you will see below some row names:<br>\n%25 means lower-quartile<br>\n%50 means median<br>\n%75 means higher quartile<br>\n\n","1e9dd326":"**Indexed Objects and Labeled Data**<br>\nIndex:sqeuence of label","769ced65":"**Rewiev of Pandas**<br>\nWe learned the basics of pandas. Now we will go deeper in Pandas to learn new couple of things.<br>\nSo just to refresh our knowledge about I wrote three thing below.<br>\nsingle column=series<br>\nNan=Not a Number<br>\ndataframe.values=numpy\n","f7872324":"**Indexing and Selecting Data Frames**<br>\nSelecting data by row numbers (.iloc)  data.iloc[row selection, column selection]<br>\nSelecting data by label or by a conditional statment (.loc) data.loc[row selection, column selection]<br>\n","e1797589":"**Concatenating Data**<br>\nThere are many ways to concatenate two datas.","c002d760":"**3-DATA CLEAN\u0130NG**<br>\n","aeeab790":"**Resampling Pandas Time Series**<br>\nConvenience method for frequency conversion and resampling of time series. Object must have a datetime-like index (DatetimeIndex, PeriodIndex, or TimedeltaIndex), or pass datetime-like values to the on or level keyword.","e98b4f14":"**2-Pyhton Data Science Tollbox** <br>\nTo get along with the toolbox, we need to know how User Defined Functions are working.<br>\n**A- User Defined Functions:**","aa8444e4":"**Visual Explotary Data Analysis**<br>\n","ba2cf3a3":"**Histogram**\nHistogram shows us the frequency of a variable. For example if I want to know the frequency of 85 in Overall. I would likely use Histogram.\n As I told above there are multiple ways to do it but I am going the use the same way as above.\n","334246aa":"**G- List Comprehension**<br>\nList comprehensions provides us another way to create lists using iterables.","8650e00f":"**4-PANDAS BASIS**<br>\n","bd265085":"**Line Plot**\nThere are multiple ways to make a line plot. I am going to use the one, that is capable of creating all plots.\nThe X axis is the Id of the player.\nThe Y axis \u0131s the attribute","5457d3df":"**Transforming Data**<br>\nplain pyhton functions<br>\nLambda function<br>\nDefining columns using other columns","8e2cbfac":"**Indexing Pandas Time Series**<br>\ndatetime=object<br>\nparse_dates(booelan):Transform date to ISO 861 form.","de390be3":"**Scatter Plot**\nThere are also multiple ways to make a Scatter Plot but I am going to use the same function as above.\nThe X axis is Overall.\nThe Y axis is Potential\n","ca4657e1":"**While and For loops **\nSo now I am going to use loops to analyze the data.I am going to show you in a simple sense how loops work.\n","bbeacb91":"**Drop with Dropna**","bc368db7":"Just to show  one of the other ways of the plot functions.You can take a look at the code part below.","c5aa126f":"As you can see here, I have 18207 entries,89 columns. My DataTypes(dtypes) are float64,int64,object. The first five are Messi,Ronalde,Neymar,De Gea and De Bruyne.\nSo now I am going to look for correlations. I could make a map for it but I have no idea how it works.","973dbd1c":"**Pivoting Data**<br>\nThat's exactly the reverse of melt","4dcbce2d":"So in this Data Analyze  I tried to show you:<br>\n1:Basic Data Analyze functions.<br>\n2:Plotting Line,Scatter,Histogram<br>\n3:Basic Dictionary Functions<br>\n4:Basic Loops and operators and how to use them in dictionaries and in data_frames.\n","8420f054":"**Assert **<br>\nwe are going to check if dropna worked correctly","e8e5f97d":"We will take a look on pandas filtering.\nTo learn how Pandas Filtering works, we need to know the booelan operators(and,or,not) and comparison operators(==,>,<) work.","52da0293":"After reading the data I need some infos to analyze it.","ac645674":"**Building Data Frame From Sctratch**<br>\n*We can build data from from csv files but we have also the option to build data frames from dictionaries.<br>\n* Broadcasting=Adding a new column and give a value to the entire column","479cc8f3":"**-Listwise Deleting.**","15f77831":"First, I am looking in my Input folder if there is any data.","0144a4d9":"**Tidy Data**<br>\nWe can tide the data with melt().Explainng melt is difficult so I am going to make some examples.","d925ac81":"**Dictionary**\nDictionary is faster than lists.\nIt has a 'key' and 'value'.****\nFirstly I will show you how to turn a csv file to dictionary. I could do it only for one player.","5ff33bce":"**C- Nested Function**<br>\nNested Functions are functions in functions.","6737ac12":"**D-Default and Flexible Arguments**<br>\nDefault arguments are defined in functions as parameters.For example def func(a=1,b=2)\nFlexibel arguments are also defined in functions as parameters. There are two types of flexible arguments. These are args and kwargs.There is a slight but a very important difference between default and flexible arguments.If I call the function above like this func(3,5,8) the compiler will give an error but in flexible functions there are no limit of parameters.","66ec0a35":"* Deletion\n* Fill them with fillna()\n* drop them with dropna()\n* fill them with mean value.","01f927c7":"Now I will read the data.","d6bfb958":"Oh I think that's it. Thank you for your comments.","49b7c7f1":"**The Data Type Categorical**<br>\nI've found this explanation on an internet site and it's useful.<br>\nThe categorical data type is useful in the following cases:<br>\n<br>\nA string variable consisting of only a few different values. Converting such a string variable to a categorical variable will save some memory..<br>\nThe lexical order of a variable is not the same as the logical order (\u201cone\u201d, \u201ctwo\u201d, \u201cthree\u201d). By converting to a categorical and specifying an order on the categories, sorting and min\/max will use the logical order instead of the lexical order<br>\nAs a signal to other Python libraries that this column should be treated as a categorical variable (e.g. to use suitable statistical methods or plot types).<br>","613e8f55":"**B- Scope**<br>\nThe definition is difficult to  make so I found a definiton on the internet.<br><br>\nVariables can only reach the area in which they are defined, which is called scope. Think of it as the area of code where variables can be used. Python supports global variables (usable in the entire program) and local variables. And built-in variables.\n<br>\nBy default, all variables declared in a function are local variables. To access a global variable inside a function, it\u2019s required to explicitly define \u2018global variable\u2019.","915be379":"**Visual Explatory Data Anlaysis**<br>\n* Plot<br>\n*Subplot<br>\n*Histogram\n       *bins:nubmer of bins\n       *range(tuble):min and max values of bins\n       *normed(boolean):normalize or not\n       *cumulative(boolean):compute cumulative distribution","678318f4":"**Fill with fillna**","4450e076":"**Pandas**\n","37e069cb":"**Missing Data and Testing with Assert **","30192afc":"**F- Anonymous Function**<br>\nAnonymous function is, in my opininon an updated version of lambda function.It is used like this<br>\nmap(func,seq): seq is a list. func is a function. for example func is the squre function and seq is an list of numbers list(1,2,3,4). Every number in the list is going to be used in the function.","13adbff9":"**5-MANIPULATING DATA FRAMES with PANDAS**","7b836aaf":"**MatPlotLib**\nSo,from this point on I will take a look on the data with MatPlotLib.\nI will use Line plot,Scatter plot and Histogram","bc5601c9":"**1-Basic Data Analyze **"}}