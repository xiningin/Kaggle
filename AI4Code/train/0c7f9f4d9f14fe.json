{"cell_type":{"5cc33773":"code","2ee8ee53":"code","d147caa2":"code","7258cfd5":"code","096aec07":"code","3ca8b302":"code","e646c168":"code","b65a531c":"code","752e235c":"code","e8a3ec6d":"code","a0da4c48":"code","ee13dd60":"code","c6549491":"code","4c299144":"code","3e34cc2f":"code","f6fb45c8":"code","9b1f9d0a":"code","a39e9988":"code","ecbb1898":"code","cc87bac4":"code","28451a10":"markdown","88e34375":"markdown","e50470cb":"markdown","5b8d6b7a":"markdown","34dfd668":"markdown","989b2fdb":"markdown","b80d4f06":"markdown"},"source":{"5cc33773":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2ee8ee53":"# we learned to use the type command to ask python to return the data type of our input\nprint(type(\"string\"))\nprint(type(20))\nprint(type(30.2))\nprint(type(str(20)))\nprint(type(True))","d147caa2":"# we learned to change the data type by using functions:\nprint(int(True))\nprint(int(False))\nprint(bool(20.3))\nprint(bool(0.00))\nx = 4\nprint(str(x))\nprint(bool(1))","7258cfd5":"# In order to execute mathmatical operations we combine operands (ex. 5) with operators (ex. +)\n# and execute them based on mathematical order of operations\n\n(7**3 + 7) \/ 3 \/\/ 2 % 2\n\n# \/\/ means to divide into the largest whole number (round down division)\n# % means to divide and into the largest whole number(\/\/) and take\n# what remains\ndef percentsymboloperator(x,y):\n    return int(((x\/y) - (x\/\/y)) * y)\n\nprint(10000%17)\nprint(percentsymboloperator(10000,17))\n# we can get a sense for how the percent symbol operator (or remainder operator) \n# is coded and how it functions. There are a few ways to code this.\nimport time\n# let's import time and see how long it takes to run my \n# percent symbol operator vs the built in function","096aec07":"%%time\nprint(percentsymboloperator(1010101,6))\n","3ca8b302":"%%time\n1010101%6\n","e646c168":"# lets take the code for our funtion and run it manually \n# to get useful information\nx = 1010101\ny = 6\nprint(round(x\/y,4), \"is\", type(x\/y))\nprint(x\/\/y, \"is\", type(x\/\/y))\nz = x\/y - x\/\/y\nprint(\"their difference is\", round(z,4), \"which is\", type(z))\nprint(\"the product of this with y is\", z * y, \"which is\", type(z*y))\nprint(\"when we convert this into an int it is\", int(z*y))\nint(float(1))\n#instead of casting the float into an int which always rounds down\n#lets use our round function\nprint(round(z*y))\ndef percentsymboloperator(x,y):\n    return int(round(((x\/y) - (x\/\/y)) * y,0))\nprint(\"our new function returns\",percentsymboloperator(1010101,6))\n# now the equation should be debugged\na = -7%6 == percentsymboloperator(-7,6)\nb = -7%-6 == percentsymboloperator(-7,-6)\nc = 10%100 == percentsymboloperator(10,100)\nif a == b == c:\n    print(\"our function passes the test\")\nelse:\n    print(\"our funtion does not pass the test\")\n\n# We see that using a int function on a float does not \n# convert the float into the nearest integer value, but instead always rounds down\n# our % operation was rounding .999999 up to 1 and our int function was rounding it down\n# to 0 hence the discrepency.","b65a531c":"# variables store data in a particular data type\ny = True\nchomo = 1\n# when we enter a new value for a variable that variable is reassigned \n# or changed to a new value of a particular type\n# y can be called simply by typing y however if we want \n# multiple values to display other than just y\n# we should type the print command containing y as an argument.\nprint(y)\ny = \"papas\"\n# y is now the string: \"papas\" and the bool: True is no longer stored there\nprint(type(y))\nprint(y,\"fritas\")\n# it is important to understand that new variables do not save relationships\nx = 2\ny = x\/2\nx = 8\nprint(y)\n# As we see y is equal to 1 and not 8. When we input the line: y=x\/2\n# our computer calculates the value of y as 2\/2=1 and stores the y variable as the integer 1\n# later when we input the line: x = 8 this does not change the value of y","752e235c":"#If we want to capture a relationship we can define a function and then call the function\nmin = 12\ndef Hours(min):\n    return min \/\/ 60\n\nHours(135)\nHours(64)\n# as we can see the only output that is displayed \n# is the last output","e8a3ec6d":"Hours(100)\nx = 4\n# There is no output displayed","a0da4c48":"# Now we are going to check what version of python \n# we are running in our environment\nimport sys\nsys.version\n# We are running python 3.7.9\n# sys is a built in module that contains many system specific parameters","ee13dd60":"# built in error functions give us helpful information \n# about what might be the problem with our function. We can also create our own error functions\n# as well as return or print commands when creating a function to let us know what our function\n# is executing and where the error might be arising from and what the error might be.\n\nprint(sys.float_info)\n\ntype(sys)\n\n#we can look at some information pertaining \n# to the float class in the module: sys\nsys.path\n# by using the path method we can see a list of \n# the directories our interpreter will search in order to find\n# and import a new module, since the path is a list it can be changed\n","c6549491":"# the help function gives us useful information by reading the docstring\n# or documentation string contained in the class definition\n# the directory function returns a list of the methods pertaining to the\n# class argument or the class of the object argument\n\nhelp(float())\ndir(float)\nz = 23.3\ndir(float) == dir(z)","4c299144":"# strings are defined by single or double quotation marks\n# double quotation marks are best if we are specifying a string\n# value that contains single quotes or apostrophes and vice versa\nSentence = \"don't go there\"\n# the below line would produce a syntax error\n# Sentence = \"He said, \"Don't go there\"\"\nSentence = 'I said, \"I am tired\"'\n# a string can contain spaces the string below is a tab string of 8 spaces\ntab =\"        \"\n# strings can contain letters numbers special characters etc.\n# we can print strings using print and assign strings to variables","3e34cc2f":"# String indexing\n# Indexes start at 0\n# we can print or assign new values to by accessing an element or\n# or slice of elements in a string\nstring = \"this is a string\"\na = string[0] == 't'\nb = string[-1] == 'g'\nc = string[4] == ' '\nd = string[9:16] == ' string'\na == b == c == d\n# when we designate a slice of a string the first number \n# refers to the index of the first element in the new string\n# the last number refers to the index of the element after the last element\n# contained in our new string. In other words the element corresponding \n# the second number in the slice designation is not included in the new string","f6fb45c8":"long_string = 'theheh slfkdlskhf dkfshs dsd dsldk klkl  ddsdlkfsj sdfsl  l l lk 3018rrge3290rhv ofewf9ewh'\n# lets make a new string that accesses all of the data from element with index\n# 30 to the end\nnew_string = long_string[30:-1]+long_string[-1]\n# or \nother_string = long_string[30:len(long_string)+2]\nprint(new_string == other_string)\n# note that:\nthis = long_string[30:-1]\n# excludes the last element\nthat = other_string \nthis != that","9b1f9d0a":"# stride values allow us to take every n from a series of elements in a string\nthat = long_string[30:len(long_string)+2:2]\ntheother = other_string[::2]\nthat == theother\n# we can take an slice of even or odd. Since the first index number is 0\n# all of the even elements would be accessed by starting at 1 and using a \n# stride value of 2. odd would start at 0 and use stride = 2\n# we can use stride of type integer positive or negative\nstring = \"abcdefghijklmnopqrstuvwxyz\"\n# the below function counts backwards by 2 the index numbers are\n# 27 25 23 21 19 17 15 13 11 9 7 5 3 1\nstring[::-2]\nstring[::-1]\n# a value of -1 designates to create a new string that is equal to the original\n# string backwards\n# a negative stride of a slice of a string produces an empty string\n# we can work around this by doing one operation at a time","a39e9988":"# Concatenate Strings\n# we can add two strings together which will create a new string that is\n# the combination of the two individual strings added tip to tail\ntip = \"tip \"\nto = \"to \"\ntail = \"tail\"\nstatement = tip + to + tail\nprint(statement)\n\"tip \" + \"to \" + \"tail\" == statement","ecbb1898":"# If we use our multiplication operator (*) we can create a new string that is\n# equal to the old string added to itself n times\n\"sing\" * 3","cc87bac4":"# lets check the methods on a string\nstring = \"string\"\ndir(\"string\")\n# some common methods and functions:\ns1 = string.upper()\nprint(s1)\ns2 = s1.lower()\nprint(s2)\ns3 = s2.replace(\"t\",\"s\")\nprint(s3)\nprint(s3.find('ing'))\nlen(s3)\n","28451a10":"| Escape Sequences | Description | Example |\n|----|----|----|\n| \\' | placing a backslash before single or double quotes allows you to express them in your string|print(\"\\\"I'm tired\\\"\")|\n|\\\\| used to express a single backslash in a string | print(\"\\\\\")|\n|\\n| used to express new line| print(\"Name:\\nEvan\")|\n| \\t| used to enter a tab space | print(\"\\tfirst sent par 1\")|\n|r| used before a string to express that it should be read verbatim| print(r\"\"I'm going to the bar\" he said\")|","88e34375":"the built in function is unsuprisingly faster. Interestingly we got different outputs while we were looking for time, revealing a bug in my simple program. Lets follow our process through to reveal the bug","e50470cb":"### Debugging\n| Error Type | Description |\n| -- | -- |\n|NameError | A variable is not found in the local or global scope |\n| SyntaxError |\n|  |\n|IOError |\n|KeyError | A key is not found in a dictionary |\n|TypeError | A function or operation is applied to an object of the wrong type |\n|IndentationError | Indentation is incorrect |","5b8d6b7a":"### String Operations","34dfd668":"Now lets look at string operations.","989b2fdb":"# Python Basics\n### IBM Data Science Course 4 Week 1\nThis is a practice sheet for the material contained in the first week of the Python for Data Science, AI & Development Course, which is part of the IBM Data Science Professional Certificate program. \n\nThe purpose of this worksheet is for myself to practice basic Python concepts as well as expand upon the material I learned in my first week of learning Python. I hope others will find it helpful as a refresher to basic python or as a supplement to learning python for the first time.","b80d4f06":"# Primitive python data types  \n| *Data Types* | *Code* |  \n|  ----   |  ---   |  \n| Integer |  int|  \n| float  | float |\n| string | str  |\n|boolean | bool |\n"}}