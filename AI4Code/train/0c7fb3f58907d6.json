{"cell_type":{"42b0b3c4":"code","6fac4a11":"code","a0c75fe4":"code","da4fb556":"code","64a7b4f8":"code","22894a20":"code","5def4bfa":"code","96876dc7":"code","ab941579":"code","1a6cac71":"code","2dbadd2e":"code","aad6b1bc":"code","40726c32":"code","b60c0290":"code","ddcdcfcb":"code","d8f6aff8":"code","f4c91fff":"code","3c1698c6":"code","09dc6e5e":"code","cdc65fff":"code","ffe61127":"code","a4e586ca":"code","8c59f6e0":"code","2fa0f378":"code","803ddc65":"code","d7e743c1":"code","e8e38043":"code","6da49d4c":"code","1828bce7":"code","998f2fa3":"code","4c774f7f":"code","2c2e4078":"code","568d79da":"code","b716a6d8":"code","0bc747a2":"code","ad6b17a3":"code","d0a83c9e":"code","3b8cd44e":"code","39764a3a":"code","cb1b8b0d":"code","d9f64b27":"code","db66be25":"markdown","cfdc1561":"markdown","e2c87fac":"markdown","0af05493":"markdown","28ce5d27":"markdown","78d7e2d6":"markdown","edabe62f":"markdown","7f431961":"markdown","a1281cf1":"markdown","81cf9b86":"markdown","64400e2a":"markdown"},"source":{"42b0b3c4":"import  numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6fac4a11":"import os\nprint(os.listdir(\"..\/input\"))","a0c75fe4":"desc = pd.read_csv(\"..\/input\/DescriptionDataCoSupplyChain.csv\")\ntoken = pd.read_csv(\"..\/input\/tokenized_access_logs.csv\")","da4fb556":"#Data Description\ndesc.info()","64a7b4f8":"desc","22894a20":"data = pd.read_csv('..\/input\/DataCoSupplyChainDataset.csv',encoding = \"ISO-8859-1\")\ndata.info()","5def4bfa":"data.head()","96876dc7":"df = data.copy(deep=False)\n\npercent_Miss = (df.isnull().sum() \/ len(df)) * 100\nvalues_missing = df.isnull().sum()\nmissingValuesDf = pd.DataFrame({'missing values': values_missing,'percentMissing': percent_Miss})\nmissingValuesDf","ab941579":"data = data.drop(['Days for shipping (real)', 'Days for shipment (scheduled)', 'Customer Email', 'Customer Fname',\n                  'Customer Segment', 'Product Image', 'Customer Street', 'Customer Zipcode', 'Order Id', \n                  'Order Zipcode','Order Status','Product Description','Customer Lname','Customer Password',\n                  'Product Status','Late_delivery_risk','Order State','Customer State','Product Card Id',\n                  'Department Id','shipping date (DateOrders)','Delivery Status','Latitude','Longitude',\n                  'Order Item Cardprod Id','Order Item Id','Order Customer Id'], axis=1)\ndata.head()","1a6cac71":"ln = data.copy(deep=False)\nset_len = []\nfor column in ln.columns:\n    set_len.append(len(set(ln[column])))\n    \nlength_of_set = pd.DataFrame({\"Column\":ln.columns, \"Length of set\": set_len})\nlength_of_set","2dbadd2e":"data.shape","aad6b1bc":"data.select_dtypes('object').apply(pd.Series.nunique, axis = 0)","40726c32":"data.info()","b60c0290":"data.describe()","ddcdcfcb":"# change object data into int or float\n\nhist_data = data.copy(deep=False)\n# drop unused data\nhist_data = hist_data.drop(['Category Id','Customer Id','order date (DateOrders)','Product Category Id',\n                            'Order Country','Order City',], axis=1)\nfrom sklearn.preprocessing import LabelEncoder\ndef Change_obj_type(data):\n    for column in data.columns:\n        if data[column].dtype == type(object):\n            le = LabelEncoder()\n            data[column] = le.fit_transform(data[column])\n    return data\ncustomer_data = Change_obj_type(hist_data)\ncustomer_data","d8f6aff8":"#overview of data Distribution\ncustomer_data.hist(alpha=0.8, figsize=(12, 10))\nplt.tight_layout()\nplt.show()","f4c91fff":"# Customer Country\nsns.countplot(x='Customer Country', data=data);\nplt.title('Distribution of Customer Country');","3c1698c6":"# Top ten Customer City\ndata['Customer City'].value_counts()[:10].plot(kind='bar')\nplt.title(\"Top 10 Customer city\")","09dc6e5e":"# Payment type\nplot = sns.countplot(x='Type', data=data);\nplot.set_xticklabels(plot.get_xticklabels(), rotation=60)\n#data['Type'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of Payment types\")","cdc65fff":"# Top 15 Category of goods\ndata['Category Name'].value_counts()[:15].plot(kind='bar')\nplt.title(\"Top 15 Category of goods\")","ffe61127":"# Department Name\nplt.figure(figsize=(6,4))\nplot = sns.countplot(x='Department Name', data=data);\nplot.set_xticklabels(plot.get_xticklabels(), rotation=60)\nplt.title(\"Departments\")\n\n#data['Department Name'].value_counts().plot(kind='bar')","a4e586ca":"# Market\nsns.countplot(x='Market', data=data);\n\n#data['Market'].value_counts().plot(kind='bar')\nplt.title(\"Market list\")","8c59f6e0":"# Order Region\nplt.figure(figsize=(7,4))\nplot = sns.countplot(x='Order Region', data=data);\nplot.set_xticklabels(plot.get_xticklabels(), rotation=60)\n#data['Order Region'].value_counts().plot(kind='bar')\nplt.title(\"Order Regions\")","2fa0f378":"# Top 20 Product Name\ndata['Product Name'].value_counts()[:20].plot(kind='bar')\nplt.title('Top 20 Product Name')","803ddc65":"# Shipping Mode\nsns.countplot(x='Shipping Mode', data=data)\nplt.title('Shipping Mode')\nplt.xticks(rotation = 90)\nplt.show()","d7e743c1":"corr_data = data.copy(deep=False)\n# drop unused data\ncorr_data = corr_data.drop(['Category Id','Customer Id','order date (DateOrders)','Product Category Id'], axis=1)\n\n# change object type data into int\nfrom sklearn.preprocessing import LabelEncoder\ndef Change_obj_type(data):\n    for column in data.columns:\n        if data[column].dtype == type(object):\n            le = LabelEncoder()\n            data[column] = le.fit_transform(data[column])\n    return data\ncor_data = Change_obj_type(corr_data)","e8e38043":"from scipy.stats import norm\ncorr_m = cor_data.corr()\nf, ax = plt.subplots(figsize=(25,18))\nplot = sns.heatmap(corr_m, ax = ax,annot = True, cmap =\"YlGnBu\", linewidths = 0.1)\nplt.xlabel('xlabel', fontsize=18)\n#plot.figure.savefig(\"output.png\")","6da49d4c":"#\n\nplt.figure(figsize=(12, 12))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'Order Item Discount Rate', data=cor_data)\nplt.subplot(3,3,2)\nsns.boxplot(x = 'Benefit per order', data=cor_data)\nplt.subplot(3,3,3)\nsns.boxplot(x = 'Sales per customer', data=cor_data)\nplt.subplot(3,3,4)\nsns.boxplot(x = 'Category Name', data=cor_data)\nplt.subplot(3,3,5)\nsns.boxplot(x = 'Customer Country', data=cor_data)\nplt.subplot(3,3,6)\nsns.boxplot(x = 'Department Name', data=cor_data)\nplt.subplot(3,3,7)\nsns.boxplot(x = 'Order Item Discount', data=cor_data)\nplt.subplot(3,3,8)\nsns.boxplot(x = 'Product Price', data=cor_data)\nplt.subplot(3,3,9)\nsns.boxplot(x = 'Order Item Quantity', data=cor_data)\nplt.show()","1828bce7":"new_data = data.drop(['Order Profit Per Order','Order Item Product Price','Order Item Total'], axis=1)\nnew_data.info()","998f2fa3":"new_data['order date (DateOrders)'].min(), new_data['order date (DateOrders)'].max()","4c774f7f":"import datetime as dt\nPRASENT_DATE = dt.datetime(2017, 9, 10)\nnew_data['order date (DateOrders)'] = pd.to_datetime(new_data['order date (DateOrders)'])\nnew_data.head()","2c2e4078":"new_data.info()","568d79da":"new_data['TotalPrice'] = new_data['Order Item Quantity'] * new_data['Product Price']","b716a6d8":"rfm = new_data.groupby('Customer Id').agg({'order date (DateOrders)':lambda date:(PRASENT_DATE - date.max()).days,\n                                           'Order Item Quantity':lambda num:len(num),\n                                           'TotalPrice':lambda price:price.sum()})\nrfm.columns","0bc747a2":"# Change the name of columns\nrfm.columns=['monetary','frequency','recency']","ad6b17a3":"rfm['recency'] = rfm['recency'].astype(int)\nrfm[rfm['monetary']<0]=0","d0a83c9e":"rfm = rfm.drop_duplicates()\nrfm","3b8cd44e":"rfm['r_quartile'] = pd.qcut(rfm['recency'], 4, ['1','2','3','4'])\nrfm['f_quartile'] = pd.qcut(rfm['frequency'], 4, ['4','3','2','1'])\nrfm['m_quartile'] = pd.qcut(rfm['monetary'], 4, ['4','3','2','1'])","39764a3a":"rfm.head()","cb1b8b0d":"rfm['RFM_Score'] = rfm.r_quartile.astype(str)+ rfm.f_quartile.astype(str) + rfm.m_quartile.astype(str)\nrfm.head()","d9f64b27":"# Filter out Top\/Best cusotmers\nrfm.sort_values(['RFM_Score'],axis=0, ascending=True).head()","db66be25":"# 2.Exploring the content of variables","cfdc1561":"## Remove unused column from the data","e2c87fac":"### Correlation analysis","0af05493":"### removing those column have correlation 1","28ce5d27":"### Starting date and last date of order","78d7e2d6":"## Missing values","edabe62f":"### categorical data and their types in each columns","7f431961":"## RFM Analysis","a1281cf1":"### length of Set of values in each columns","81cf9b86":"# 1.Data preparation","64400e2a":"### Histogram plot"}}