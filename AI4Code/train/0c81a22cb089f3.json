{"cell_type":{"0f9faed3":"code","56f05384":"code","b41514f0":"code","a378aeb9":"code","515bb12b":"code","9eb12ba1":"code","a2dec8b9":"code","50d2a6d7":"code","7c73ba7b":"code","e441dd6c":"code","157c0b72":"code","9d73039b":"code","43732c1c":"code","621f0927":"code","1813c411":"code","5fe8268f":"code","db8dec2a":"code","b61158ab":"code","b404a072":"code","e7c85ab6":"code","36481a49":"code","6607940b":"code","ae319e7d":"code","3ae3b624":"code","7f67010a":"code","5e8c6f94":"markdown","fc1c4a4c":"markdown","806d9a32":"markdown","94068d35":"markdown"},"source":{"0f9faed3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px \nimport plotly.graph_objs as go \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","56f05384":"df = pd.read_csv(\"..\/input\/videogamesales\/vgsales.csv\")","b41514f0":"df.info()","a378aeb9":"df.shape","515bb12b":"total = df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total,percent],axis=1, keys=['Total','Percent'])\nmissing_data.head()","9eb12ba1":"df_num = df.select_dtypes(include=['float64','int64']).columns\ndf_col = df.select_dtypes(include= ['object']).columns\ndf_q = df[df_col]\ndf_q\nprint(\"Num of unique val:\")\nprint(\"Total = {}\".format(len(df)))\nfor col in df_q:\n  nb_uniq= len(df[col].unique())\n  print(\"{} = {}  \".format(col,nb_uniq))","a2dec8b9":"df_num = df.select_dtypes(include=['float64','int64']).columns","50d2a6d7":"plt.figure(figsize=(25,10))\nsns.barplot(\"Year\",\"Global_Sales\",data=df)\nplt.show()","7c73ba7b":"plt.figure(figsize=(25,10))\nsns.countplot('Year',data=df)\nplt.show()\n","e441dd6c":"plt.figure(figsize=(25,10))\nsns.countplot('Genre',data=df)\nplt.show()","157c0b72":"plt.figure(figsize=(25,10))\nsns.barplot(\"Genre\",\"Global_Sales\",data=df)\nplt.show()","9d73039b":"plt.figure(figsize=(25,10))\nsns.barplot(\"Genre\",\"NA_Sales\",data=df)\nplt.show()","43732c1c":"plt.figure(figsize=(25,10))\nsns.barplot(\"Genre\",\"EU_Sales\",data=df)\nplt.show()","621f0927":"plt.figure(figsize=(25,10))\nsns.barplot(\"Genre\",\"JP_Sales\",data=df)\nplt.show()","1813c411":"plt.figure(figsize=(20,20))\nsns.barplot(\"Platform\",\"Global_Sales\",data=df)\nplt.show()","5fe8268f":"plat1 = pd.crosstab(df.Platform,df.Genre)\nplat1","db8dec2a":"group = df.groupby(df.Year)[[\"Global_Sales\"]].sum()\ngroup = group.sort_values(by= \"Global_Sales\", ascending=False)\ngroup.head(8)\n","b61158ab":"grouped = df.groupby(df.Year)[[\"Global_Sales\"]].sum()\ngrouped = grouped.sort_values(by = \"Global_Sales\" , ascending = False)\ngrouped = grouped.head(10)\n\n\n# plottng \n\nfig = px.pie(data_frame = grouped , \n            names = grouped.index , \n            values = \"Global_Sales\" , \n            template = \"seaborn\" , \n            hole = 0.4 , \n            color_discrete_sequence = px.colors.sequential.Inferno , \n            )\n\nfig.update_layout(title = \"Top 10 Year of sales\", \n                  \n                 plot_bgcolor = \"rgb(230,230,230)\" , \n                 annotations= [dict(text = \"Global Sales\" , font_size = 20 , showarrow = False , opacity = 0.7)])\n\nfig.update_traces (rotation = 90 , pull = 0.03 , textinfo = \"percent+label\")\nfig.show()\n","b404a072":"grouped = df.groupby(df.Platform)[[\"Global_Sales\"]].sum()\ngrouped = grouped.sort_values(by = \"Global_Sales\" , ascending = False)\ngrouped = grouped.head(10)\n\n# plottng \n\nfig = px.pie(data_frame = grouped , \n            names = grouped.index , \n            values = \"Global_Sales\" , \n            template = \"seaborn\" , \n            hole = 0.4 , \n            color_discrete_sequence = px.colors.sequential.Inferno , \n            )\n\nfig.update_layout(title = \"Top 10 Platforms over the years\", \n                  \n                 plot_bgcolor = \"rgb(230,230,230)\" , \n                 annotations= [dict(text = \"Global Sales\" , font_size = 20 , showarrow = False , opacity = 0.7)])\n\nfig.update_traces (rotation = 90 , pull = 0.03 , textinfo = \"percent+label\")\nfig.show()","e7c85ab6":"grouped.head(10)","36481a49":"df_top=df.head(100)\ndf_top","6607940b":"plt.figure(figsize=(40,40))\nfrom plotly.offline import init_notebook_mode,iplot\ntraceNa = go.Scatter(\n                    x = df_top.Rank,\n                    y = df_top.NA_Sales,\n                    mode = \"markers\",\n                    name = \"North America\",\n                    marker = dict(color = 'rgba(30, 19, 239, 0.8)',size=6),\n                    text= df.Name)\n\ntraceEu = go.Scatter(\n                    x = df_top.Rank,\n                    y = df_top.EU_Sales,\n                    mode = \"markers\",\n                    name = \"Europe\",\n                    marker = dict(color = 'rgba(249, 94, 28, 0.8)',size=6),\n                    text= df.Name)\ntraceJp = go.Scatter(\n                    x = df_top.Rank,\n                    y = df_top.JP_Sales,\n                    mode = \"markers\",\n                    name = \"Japan\",\n                    marker = dict(color = 'rgba(10, 226, 180, 0.8)',size=6),\n                    text= df.Name)\ntraceO = go.Scatter(\n                    x = df_top.Rank,\n                    y = df_top.Other_Sales,\n                    mode = \"markers\",\n                    name = \"Other\",\n                    marker = dict(color = 'pink',size=6),\n                    text= df.Name)\n                    \n\ndata = [traceNa, traceEu,traceJp,traceO]\n\n\nlayout= dict(title='Top 100 Sales across different Regions',\n                   xaxis_title='Rank',\n                   yaxis_title='Sales_Region')\nfig = dict(data = data,layout = layout)\niplot(fig)","ae319e7d":"df2 = df.loc[:,[\"Year\",\"Platform\",\"NA_Sales\",\"EU_Sales\" ]]\ndf2","3ae3b624":"df_num = df.select_dtypes(include = ['float64', 'int64'])\ndf_num.head()","7f67010a":"#scatterplot\nsns.set()\ncols = ['Rank', 'Year','NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']\nsns.pairplot(df_num[cols], size = 2.5)\nplt.show();","5e8c6f94":"Unique Column Data in the data frame","fc1c4a4c":"Search for Null Data","806d9a32":"Crosstab viewing to analyse various trends across Platform and Genre","94068d35":"Plotting Various Graphs for Analysing Trend"}}