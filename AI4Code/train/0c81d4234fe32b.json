{"cell_type":{"021fbe39":"code","0014490d":"code","685caa6e":"code","05a4743d":"code","3851f692":"code","14d712e1":"code","f06d28e7":"code","872496b5":"code","d3bc511b":"code","4659fbf7":"code","33c8b504":"code","6d586b68":"code","80388aba":"code","ce0ae02d":"code","8bed5e28":"code","53130ef3":"code","435bd9c2":"code","9fca72f9":"code","0d268275":"code","d1773c54":"code","234484ae":"code","3ce6fc2c":"code","d011b716":"code","56611dd5":"markdown","8c597283":"markdown","8bce0255":"markdown"},"source":{"021fbe39":"from sklearn.metrics import r2_score, classification_report, mean_squared_error, accuracy_score, confusion_matrix, roc_curve, roc_auc_score,auc\nfrom sklearn.feature_extraction.text import HashingVectorizer, CountVectorizer\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nimport matplotlib.pyplot as matplotlib\n\n\nimport pandas\nimport string\nimport numpy\n\n%matplotlib inline","0014490d":"# Andreis: Fa\u00e7a um teste com o Count Vectorizer\n\nTeste = [\"Esse review e bom\",\n          \"Esse review e ruim\",\n          \"Esta analise e fant\u00e1stica\",\n          \"Esta analise e ruim\"]\n\n#Vectorizer = CountVectorizer()\n#Pos_palavras = Vectorizer.fit_transform(Teste)\n#print(Vectorizer.get_feature_names())\n#print(Pos_palavras.toarray())\n\nVectorizer = CountVectorizer()\nPos_palavras = Vectorizer.fit_transform(Teste)\nprint(Vectorizer.get_feature_names())\nprint(Pos_palavras.toarray())\n","685caa6e":"# Andreis: agora, mostra como funciona o transform\n\nnova_review = Vectorizer.transform([\"Esse review e novo\"])\nprint(Vectorizer.get_feature_names())\nprint(Pos_palavras.toarray())\n","05a4743d":"# Tarefa: Leia o CSV com o Pandas\n# Dataset: Review = textos com uma review\n#          Sentiment = sentimento (se \u00e9 uma review positiva ou negativa)\n\nreviews = pandas.read_csv(\"..\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv\")\nreviews","3851f692":"# Tarefa: Divida o X e Y e use o train_test_split\nX = reviews[\"review\"][0:5000]\nY = reviews[\"sentiment\"][0:5000]\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y)","14d712e1":"# Tarefa: Use o vetorizador CountVectorizer para fazer o fit_transform e transform\nVectorizer = CountVectorizer()\nX_train_vectorized = Vectorizer.fit_transform(X_train)\nX_test_vectorized = Vectorizer.transform(X_test)\n","f06d28e7":"# Tarefa: Use a regress\u00e3o log\u00edstica\n\nmodel = LogisticRegression(max_iter=3000)\nmodel.fit(X_train_vectorized, Y_train)\n\nresultado = model.predict(X_test_vectorized)\nprint(accuracy_score(resultado, Y_test))\nprint(confusion_matrix(resultado, Y_test))","872496b5":"# Tarefa: Teste um exemplo negativo e um positivo\n\nnova_review = Vectorizer.transform([\"This movie is bad\", \"This movie is awesome\"])\nmodel.predict(nova_review)","d3bc511b":"# Vamos descombrir por que deu o warning na c\u00e9lula passada?\n\nfrom sklearn.model_selection import learning_curve\ndef plot_learning_curve(est, X_train, y_train) :\n    train_sizes, train_scores, test_scores = learning_curve(estimator=est, X=X_train, y=y_train,cv=5,n_jobs=-1)\n    train_mean = numpy.mean(train_scores, axis=1)\n    train_std = numpy.std(train_scores, axis=1)\n    test_mean = numpy.mean(test_scores, axis=1)\n    test_std = numpy.std(test_scores, axis=1)\n    matplotlib.figure(figsize=(8,10))\n    matplotlib.plot(train_sizes, train_mean, color='blue', marker='o', markersize=5, label='training accuracy')\n    matplotlib.fill_between(train_sizes, train_mean + train_std, train_mean - train_std, alpha=0.15, color='blue')\n    matplotlib.plot(train_sizes, test_mean,color='green', linestyle='--',marker='s', markersize=5,label='validation accuracy')\n    matplotlib.fill_between(train_sizes,test_mean + test_std,test_mean - test_std,alpha=0.15, color='green')\n    matplotlib.grid(b='on')\n    matplotlib.xlabel('Number of training samples')\n    matplotlib.ylabel('Accuracy')\n    matplotlib.legend(loc='lower right')\n    matplotlib.show()\n\nplot_learning_curve(model, X_train_vectorized, Y_train)","4659fbf7":"# Tarefa: pegar o dataset do test do MNIST, o train e o test\n# Dataset: Label = N\u00famero indicado\n#          1x1 at\u00e9 28x28, pixeis de uma matriz 28x28 do desenho do n\u00famero\n","33c8b504":"# Dividir X e Y (n\u00e3o precisa usar o train_test_split, fa\u00e7a manualmente com os dois datasets)\n","6d586b68":"# Tarefa: pegar o label da PRIMEIRA imagem do train. Qual deve ser o n\u00famero escrito na primeira imagem? Guarde em uma vari\u00e1vel\n","80388aba":"# Tarefa: Usar o numpy.array(x) e pegar a PRIMEIRA imagem. O que os n\u00fameros significam? Qual o tamanho?\n","ce0ae02d":"# Tarefa: transformar a imagem que voc\u00ea pegou antes em uma matriz 28x28\n","8bed5e28":"# Tarefa: Use o matplotlib para mostrar a imagem (dica: imshow) para mostrar o n\u00famero a partir da matriz 28x28.\n","53130ef3":"# Tarefa: use a regress\u00e3o log\u00edstica para classificar. Use o classification_report ao inv\u00e9s de accuracy_score\n","435bd9c2":"# Fun\u00e7\u00e3o Reshape (relembrando da primeira aula pr\u00e1tica)\n\ndef reshape(list1D):\n     return numpy.array(list1D).reshape(-1,1)","9fca72f9":"# Tarefa: Leia o dataset de sal\u00e1rios com o Pandas\n\n","0d268275":"# Tarefa: divida x e y e fa\u00e7a um scatter com o matplotlib\n","d1773c54":"# Tarefa: Fa\u00e7a o train_test_split e use a regress\u00e3o linear\n","234484ae":"# Use o scatter plot para plotar os trains e tests com cores diferentes (use color='red')\n","3ce6fc2c":"# Tarefa: Pegue o coeficiente linear do modelo e onde ele intercepta o eixo y\n","d011b716":"# Agora, usando numpy, construa uma fun\u00e7\u00e3o e plot junto do scatter plot (use o linspace para construir um espa\u00e7o linear no x)\n","56611dd5":"# Parte 1: Classifica\u00e7\u00e3o Usando Palavras","8c597283":"# Parte 3: Regress\u00e3o Linear","8bce0255":"# Parte 2: Usando Imagens"}}