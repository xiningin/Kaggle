{"cell_type":{"d3fcba31":"code","6ebc2b4f":"code","a406d79f":"code","78bf1eec":"code","4d57b70a":"code","7408da57":"code","b644bd90":"code","b6a1aa9d":"code","08f84a08":"code","3ca87ed8":"code","b7e425be":"code","9b484636":"code","1a59cf64":"code","6f5370e0":"code","5099ee0e":"code","5281c933":"code","72402a52":"code","09d4adf7":"code","182ed8dd":"code","2a0ebcb3":"code","33349183":"code","1ee1b9a6":"code","7a2f529f":"code","4787dcac":"code","df5e0bd4":"code","ec4ff25c":"code","20d3b994":"code","d5db8806":"code","af8ac375":"code","15c19e50":"markdown","0d4889a4":"markdown","adb7701a":"markdown","a13a065a":"markdown","9422aad5":"markdown","53dd3789":"markdown","67408752":"markdown","f4e34f78":"markdown","4c8c1bc0":"markdown","fa8cfa42":"markdown","59a1c8a8":"markdown","b6d15e22":"markdown","df89a050":"markdown","556a1f70":"markdown","b3ef9179":"markdown","22bcb8f1":"markdown","b600cc0e":"markdown","850fa6c7":"markdown","02d45f56":"markdown","ae34088f":"markdown","7b09daae":"markdown","179839f4":"markdown","e981018a":"markdown","d2874443":"markdown"},"source":{"d3fcba31":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/images.unsplash.com\/photo-1509786679719-3d066e68f607?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60',width=400,height=400)","6ebc2b4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a406d79f":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/images.unsplash.com\/photo-1515941821061-27d7f9900d43?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60',width=400,height=400)","78bf1eec":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadsgpscsv\/gps.csv', delimiter=';', encoding = \"ISO-8859-1\", nrows = nRowsRead)\ndf.dataframeName = 'gps.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","4d57b70a":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBwgHBgkIBwgKCgkLDRYPDQwMDRsUFRAWIB0iIiAdHx8kKDQsJCYxJx8fLT0tMTU3Ojo6Iys\/RD84QzQ5OjcBCgoKDQwNGg8PGjclHyU3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3N\/\/AABEIALUAyAMBIgACEQEDEQH\/xAAcAAEAAQUBAQAAAAAAAAAAAAAABQECBAYHAwj\/xAA9EAACAQMDAQYDBwIFAgcAAAABAgMABBEFEiExBhMiQVFxFGGBBzJCkaHB0VKxFRYjYvBy4SQlNDVDgqL\/xAAZAQEBAQEBAQAAAAAAAAAAAAAAAQIDBAX\/xAAiEQEBAAICAgMBAAMAAAAAAAAAAQIRAxIhMRNBUTIjQmH\/2gAMAwEAAhEDEQA\/AOG0pSgUpSgUpSgUpSgUpSgUpSgUpSgUpSgUpSgUpSgUpSgUpSgUpSgUpSgUpSgUq5VLHAFeog48TYPlQeFKvkjZGw30PrVlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlAqoGSBVKuThhQZKLsxV3JJJ5qoOQMVcFqo83QypgfeXpWIetSIwpyeB61hTqveEqeDzRXlSlKgUpVQMnAoAGaAZzXtbW0txJsiXJHJPkB86lrezgt8MQJpP6mHhHsPOghGQqAT51SpnUka4Xe3LAfpUMRjjzoKUpSgUpSgUpSgUpSgUpSgUpSgVUVSlBkW787T9KzoIpJn2RJvbz8gPc+VRakg59K2Ls9cKsUnxCFlLhlUdDjrn1q7EnbadFp8PeuI3uSDh5F3CPjqFPH1NQWraJcW1rHqC7p7WbOZ1HCuDyD6VszXHfCR5FUIilmb8KAf8AMCsnStRutLuLe1v7V1tpV7x4JOA4fnJ+mPyqDm7AAnFMZ6V0LtN2Ts7q7uNR0bJtQ\/jhiIz89uf2z9K1XTLTSl1qOLWbi4g05tweSFA8idcce+AaCJMbKu4qQM459aohAdS2cZ5xU52lm0hnSPs+l38GGYme8YGWZuOSBwB1wPzqCHWg2BJY2iVYAVi6gD+59T86E7Tu8m6\/L51HaXKRL3WfvHjNSDA5YHrnGPWqi8YYgD65NReq2ncXLbGDIfMGs5W5254HQ+tVuIlmiK+flQQR61Sr3QoxVhg1ZUUpSlApSlApSlApSlApSlApSlBcvn61sE9s9vBDtGYtitlf+kZrX0x6A\/I1N2euXDCKG5aF1jUIryJzgdBnzoNs7E6JPqM8Ums7k0yKRZQm3\/1D4GB\/0jz8s8Cuj6tomna33jtGgWJNouFb7jg\/2HGc8Z4rTtM7XRvZx2WpIIWjQJFcRnGF8h7dakU1pbyNdOtzHJYyq8ciFD4h65XkDk8+p+dS7+lk2hjZ6lo96IX7x7dgVjmj5DAjPIHTj3+tRPaKwsNVgs5NOtsajKSsnc8B\/Tj5j\/nlXU9Js7H\/AAv4CSPvQ\/jeN5MluMe+3yxWl9o+zc1ldyTaajbg4bukBZlPJJGPIcVZds+Y5lfWM9jbyQXkMkNzFNtdGHI4\/moyuv61qUGudmLCHVCYLp3aFrgKG7xeDnkZ4JNc47QaBe6Fqkmn3Me+QeKN41JWVCMhl9RRUSjFWBBwRyDUpBcGaPLHxDr86jGBBweCPIjGKzNKVzcqQgaP8e44XHvQZLZPSvSFXUhzyinxHIGB7msiRIUw6Ksm45B3YA\/c\/SrJC0kn+sSynpjgD6VUYep2+7NwqnBPJAIUe2eT71Ft1qedfC2OjcNUNcx93J70V40qp61SoFKUoFKUoFKUoFKUoFKUoKg1K2kMMcSy4DyHnc3IX6etRQrKsptrBWPhNBId85OHG4\/7vOti7JarHa3JFzII4GDBuPxAZA\/t+Va5OoA+Yry3YUhs4PUUHWtM1UXgSSCQrIoyUyMj2\/551ssc9ncWsVrfwoY2Iz3nXd8sc81wzT9UOnuN7ybw2VkH9J6+9b3pOvC7iXv071CCBIo6fx5H6VNCR13swBEtzad2Q8jMsC4wgPz9P7586xdC1CAanFaarF3glgitTM+e+j2DjaeuOcflUzDcvFH37SPcgZ2Bn+5nqABwPPrUZ\/hiXGqSas7lo4SWUtkbRxhSD51dVEJ2osNL\/wAwLptyyPIyYjumi53Z8IbHl7\/LGK0jXrHUNPujBergKxVCg8B9q3TXtPvJdchvJouJvHkDhcAcH5fOo3UdSkmsjp+rozxRShzwAyBjtO3jwnoeOvnxVsVrNhcMyLC4BA+7ms7aCCVAGOhHlXhq+jy6eRcwSfEWTE7Jl\/s3oa945Ip1VlJXIBZPIGgswWGMtn0HTNW38Eb2q7QRMhweOGH\/AG\/esgsAcjp0Pzq18EEEiiNeIIJBHSqVmX8IilUh1YOM+E5x71iHrUVSlKUClKUClKUHt8PJ\/QafDyf0Gvqyy7D9nms4GewiyY1\/sK9v8idnDwLCLNdOuH6498\/x8mdxJ\/QaGGT+k19af5B7PEf+3x\/lWNL9nPZuTrZovtTWH6d+T8fKXdv\/AEmgRh5EV9QzfZV2ck6QkexqOuPsf0FwdjOh\/wCqr0w\/T5Mp\/q+frWYyRGNgd45B9ar1JLHiu1XX2LW5ybS\/Zf5rmfajsxd9mtXex1BW3bd6SY8Mi9AQf0rOWOmsM+30i4VjkjKyQ94Y1JTLYB\/is3QNXix8JdYiKkmMqMKM9RWHGjBC+PCpwTnpnpWPPYPcndAmW8wOc1mN2ugtfWumzW6RTmYzIxKK+VVuPy\/7VlTtql1YJFp5JRW37icMx9Fzya51p9xcaddxyzwNJGjcqeD+ddC0jtlYQW6oeGRR+Hxgj1z1q2WEsv23Ds+lxbWCzatGjTuCHixyqEeY6ZrUe0vZVtZvLp9BlQ2yRh+em4\/gzn9fWvbW+0D6zbxLY7+7biUAFV\/P+K9ez+qf5Zi+Ju5u7sgAshfgSZ8sftUiVz61kvNHuZIJotwHEttMuQw9D\/NREjR2+oEQcQSHcob8IPl9K7rquj6N280tb7TLhFnXLK6jH09fpXCu0FvLZatcWlwymWFtj7OmRSyfSy1dcXyRMUj2vjjI6Vgy3UkvBbA9BXiTmqVFVzmqUpQKUpQKUpQKUpQfZOmNbm0tybtGZok43D+kVnIIt\/hdMj0PNQdleWa2EDxRbmWJcyN4TwB5nmsoX80xdY49gx94ocj+a79cnk7YpjJPT9a8y7ZIKgjywairjULuKAdzCGkzzvby\/qNeMU1xcIJblEXPICr09wak46t5Eybnu8AxOfmoyK8G1DrlNnPAIJJ\/KsKOeLeyJKzBWycngfIVaLqBSee8OefOtTj\/AOMXlrKN+wPjQAHp5fXmta7d9lh2r0cRh1F5b5e2kZMHOOVz6GpaXVY4c5ibbnGTxVI9YswNyKAGPlxWrx3Xpmclj5qKTWF3JDcR7WXMcqEdfUe+eR7Zqu17OXvIJm8mjlA6gc5\/muk\/ajoA1C4TWNJhzO5C3EUZyZD5MB61EaF2Dvr2Ff8AF5Vs4M548Ui+vHQVx+PKV6vlxsb92Qfs92z0VZL6xgW+jAS4QKOD6+1YqfZnoupfFm3ZoJoLqSMMh8uGX9GFT3Zbs92f7P2\/\/li75WGHmlJdz+w+lesOrQ2N\/qzSSQRxSTRSoztszmMKcZ+cddJMnC5Y2+HPdd+zXtFYQSSaVcpdjacxsMMw9BiomyvNHvdOj0PtFYCyaJgQA5Vg\/uefM\/nXaYu0CkZKAgjIw2QR8qyPibO9YGW0jl4+8VDFf3qZ8eXvTeHLj+uPdoe1Gl9mNK+A7NojTAYjMY8MfzJ8zXHbl3mleaZ2eR2LOzHJYnqTX1lq3ZHs\/rCn4mzi3H8QGDWg659jMEgZ9KuP\/q9Z6Sz21OW78xwbFMVueu\/Z7relElrVnQfiXmtUntJoH2ujA+eR0rNwsdceTGseqVcRVKy0pSlKgUpSgUpSg+q7EIYI51czTGJAS\/pjy9BWVAt1NIWixkHOAMfqaj7Je6t4GEcoKxJnA4xtHPtUtBrNtbkx3UggK84Kn+P3r3ZZePD58nllNHcKdzbjgdMcn6+nyqhtJpHVpHlC+fiq201+3u5HjiG4KMgjzpc6uYGXvEyh4LA8j6Vz3n+N9YrJpETyd4GLyHpvya8\/8JKD\/UnXAPGScfkKHXID92dd44KswTH0Jrwl7R2yuYlCyOOoLAKc\/Pmr\/kTWLPj0qMDfKxZcdEGK87nTINmUZhnoGNREvaZ3i2WstrHcDO5HcMF9iOv6VGydpbto2S+S0kcnorFcLz0H0rWOPJv2XrpKPpsbFgJZIQvV3Xn6A1CahK9nIRaakk0Y6kbRj6Co+51TUzju5nRcZ29So\/WsKR7F7X\/Ue4ivQdzEruV\/b0r0Yy78uNnhJJrN0rZWbBPyFco7ca1Lf6\/dGZ2ZoH7iNc8BF6HHrktz863XvcdDUHf9n7S91H415Gjdjl1AyGPTPyqc\/Fc8dYt8GUwy3WyfZ9rMjdnkgWEJDAe7TeCxY4BY5PPU+30rbYdVdH7xQivjqMitKsXjsreOCABY1GF9fepS11WJDtngE0ePJtpzW8MNYyVzzsuVsbnB2gdiO8QbvVDgn8+DUgupCNkZZgu4cIw4J9K58t6m4lQVXPAPJFTVhqFscLLbuy+ZWTGPng8VjPix\/CZ5Ru\/x1rNHsuUVc+T9D9a1\/W+wuga8jEwKkp\/EnBFSFrZW8qKYnlCNyFJ3Ifr5GveKzntrgd2wKY9elebWM9V33b7jjPab7Hr20V5dNfv064PUVzfU9Bv9NkKXUEkZH9S4FfXGb1WJ2xyL6saxNV0jT9WgKahar4uCxXOKxet9umOWU9Pj9kK9RVtdy7VfY+JFa50aUHH4GOa5RrPZrUdImaO7tnTB6kHBrneP8dceXG+0HSr2Rh1GKsrm6lKUoPqzTNMu5tMtzK7F2t0HeA+ePQVh3ul3sCGWW6Rtq42mPIPv51naMJ57G1nUhGaFS6gkc4H5+9TWJVgYvsdseQ\/SvTMq8nWOY3d\/cxgj4WEqPEZIptuB8\/SvO27QeNkdGniVeS0obAqTn1LUr67uIJLRYS7bYo3hG0\/7unP9vnWN\/lm9nvUOoLaq0ilTk+L5YxwOAenrW5klxZLXVnHsubuwEiMMgpIMYx515QJbXF2g75Vgx94+EKMdOasvez9zpMHe\/GxTwfhVmwQKhYpplhl7lx4MttHIUeeadmerdNSt9D062\/1b5Y7h0yGADHHpgVqE94Jh4rguR0DKOn51ESYu2WLY+4N4sHPvz5c1s+gWfZ6Yypd3DySxuikbyOW6HnqOucelamWjrtEpeTxShoZShP4gPLzr2Pxd1a9+0yshbaNwwWb0B\/nArbtQ0iy0dUf\/AA2CaCRgAzzsFHt654q7W9HiudPHw1mIHdgzIpBTGOoHHy61ZyHRz53w2GODVhkz1NTd12eYp301yIGLbSjx42H0PJ6+VQt1pt\/bOySW82UwThfUZrrORjoqrg4AavZ4nXlXRuMju2zUaZzH4W2Z65z0ra9A0+8uY42i0xpd48M8qgR\/\/oc1r5NHRCI7gbgrHy4qR01b25f\/AMPCx8t2OPzrfLbR7eCMCdYFUtyojxz\/AGrOsrayhj7uCNdoJwPIevFT59z0nxnZtTYWXczBkYk5zyM\/LFTiup54x\/esHfwMAgD\/AG1aSCPLjqcdK8uWPa7dZ48JBm5DDP0\/eqRXUUjsgZSy9R0NYiM8ieFvE3AZeQP4qhs3faXba46spxmufWfa9r9JBokyTGdrHrj+KwdS0az1SIw39uj5GA23isdjf2smY\/Gp\/qFZUOqLwl0hiP8AVnINLjlPON212xv9OS9svskPjn0jkddhrkOq6LeabM0VzA6MvqK+x1ZJkBiYEfKoLtD2X0zXIWivIU7xujYGfpU3Mv6Wdsf58x8hkUrqXbT7LbzTS9xYKZoRzgDkVWp8WX0382P26B2ZXVodDt2efeHRRGiAZCYwMf35rZoC4RRIzMwHO45Nc00ntPfWkIdoC1qQDhecYAGOfLzP6Vu+l6tFqlsJ4nCr90rz1pMixnMiuxeRlBXoV4H5VDdo7i7SB3tGZBGBuYRg5zxkH1+lZl5JNGp7p1APRmyAPrWldodcvoR3CSxTLnx92mOOhGevOevNXbOkdeWWo3Uc3xks7T4LorE7SB1+R4qNsbju3J3ASLuHdlcg8efmf2rHl1ieIs1s8xiHAV23Y+ROBx9KzNFtWkU77m1jEpDl1i3yg55Azx+laxtSxbNcpazyXaW\/fWku5YxKo8\/cHpg49vKrbbWZkubdle5VYhhO7kIYDADDpk9Bz7VLag9rb2U6gR3cmNiRIrHYMDkjpyfy59ahodNvY4YLh8Ws7ElEPB2gjk+g9+voa3tNOkdi7i1FlJLbXN28W\/xxTN4d3yXy+lbDdaoZIc23+nMvQFdwrkU13cQXRuNJk2y7\/wD4VUI+ePuYwRn55rauzPaUas0lpfwwQX0QP3VIWVc4Jx5GsqlRd3Gq6d\/qQrPFcb0mNu25YiDjGDg9OeK1fWpNes5zp9pMbu1LYt0miDOAPwg+QratNHw13Msduyx4G5llwu4\/7f3H5VIl4g4V1GQOvpTsWIfsx2UjtwLrVF33TneqF9wQ9efmMcVuO\/cmeQQODWDFNb2kLMipGG5Y4wD71hTa\/bsUELOfRxHuTkcCrtNLtVu0SFllV3VyFMeMkH+K1+z1pVv+5hl3qTyrnO0+lbHHPbXyBXkAfHQnGfpS10jTocy2qR78nJ64NamSWL11KFArO4yeOAa92vtnJR8H8SgHHvUNq11HYXCfE2CuX8HeIfPy9qyVnMBQNJtM7Y7pl3An3\/ertnTNfVUgZe+8ETdHA4zWFquoPE52XcinbuAU\/pWTFCtvlZWLQkZJA8vn5H361h3ljZzKEZZipPhKnO0\/xWpYllREOv6xbzAw3zSofwTgEY9+oqatO1NtdER39u0Mw6leVP8AFQMtk9tzCsTLxlhzyP2\/tXk1rLcDfu2yDqEztb\/vW7hjXPzG8wPa3BMlnPsmzyUbg+4rLS9mQbL2ISJ5uoyPqK55bz3dplRJIjY6MA2f4qc03W7zYEYd76nqPyP81zz4ttY52NwXuZ0xGwkQ\/hY5pUFBMjeKzl2tnLJ5Z9uopXP47G++\/ccWl1SVLYxRIERVToT5gUN9e6faR3NtdOiTSHMQ6Aiq0rzYvXkuk1+9vrhIJJHEbY43Z61SVDGzSSN3m1trcY3UpXWOdY2oyQzRDbCUkmnEe7fkKPbzrZdL0qDSreCfiaeTgPtC7f8AnvSlaRqV\/qV1BduqSsuxudnG4\/MVK6bOt7KqXkfe95E0jMT4vAAQM+nP6UpREe8DCzhuFlZXPPAx8\/Kp3szFEmp2zyB3aZPvbsEfWlKtHRIVjhVkVWOc53NnpxWBql98A6KkWcgEENjFVpWBqOr9pjb3Eu2xjfEjKd7kk\/t9K1yTWdQuWjkNwyMjBhtyB5kcfSlK3BK6Xd3OoXSS3M8hLEkBWIwfXit+7MMkQebEjyTKrEtITw3OPn70pVqJTV4vibPbuZGY8HORn2rUtY1e60lvhH7u4dcGOfbsdfCD88ilKRKltC1S41DSopZ2O52CnBrLTVJW1FbMoCCwy+ecVSlaiViicTyG3VNq5POc+dWxyPFIsYOQM7f9tKV0jFZ7qrB2Zcndj88c1YYFk7tlCISwUnb1+dKVqVivWSz+HuCqyuSDw3mPalKVB\/\/Z',width=400,height=400)","7408da57":"df.head()","b644bd90":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/images.unsplash.com\/photo-1545631903-b34f49c1ada9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60',width=400,height=400)","b6a1aa9d":"df.describe()","08f84a08":"df.info()","3ca87ed8":"categorical_cols = [cname for cname in df.columns if\n                    df[cname].nunique() < 10 and \n                    df[cname].dtype == \"object\"]\n\n\n# Select numerical columns\nnumerical_cols = [cname for cname in df.columns if \n                df[cname].dtype in ['int64', 'float64']]","b7e425be":"print(numerical_cols)","9b484636":"#Missing values. Codes from my friend Caesar Lupum @caesarlupum\ntotal = df.isnull().sum().sort_values(ascending = False)\npercent = (df.isnull().sum()\/df.isnull().count()*100).sort_values(ascending = False)\nmissing_data  = pd.concat([total, percent], axis=1, keys=['estacao', 'conex_gps'])\nmissing_data.head(8)","1a59cf64":"# Number of each type of column\ndf.dtypes.value_counts()","6f5370e0":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/images.unsplash.com\/photo-1509576931792-214960705f8a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60',width=400,height=400)","5099ee0e":"import matplotlib.pyplot as plt\nimport seaborn as sns","5281c933":"sns.scatterplot(x='estacao',y='geocodigo',data=df)","72402a52":"sns.countplot(df[\"estacao\"])","09d4adf7":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nlowerdf = df.groupby('estacao').size()\/df['uf'].count()*100\nlabels = lowerdf.index\nvalues = lowerdf.values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.6)])\nfig.show()","182ed8dd":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.uf)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200, background_color=\"white\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.show()","2a0ebcb3":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/images.unsplash.com\/photo-1510333337682-fdd0eba357a4?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60',width=400,height=400)","33349183":"import folium","1ee1b9a6":"import geopandas as gpd\n\nfrom learntools.core import binder\nbinder.bind(globals())\n","7a2f529f":"df.plot()","4787dcac":"# How many rows in each column have missing values?\nprint(df.isnull().sum())\n\n# View rows with missing locations\nrows_with_missing = df[df[\"estacao\"]==\"conex_gps\"]\nrows_with_missing","df5e0bd4":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\ninit_notebook_mode(connected=True) \n\nimport pandas_profiling as pp\nimport plotly.express as px","ec4ff25c":"import folium\nfrom folium import Marker, GeoJson\nfrom folium.plugins import HeatMap\n\nimport pandas as pd\nimport geopandas as gpd\n\n# Function for displaying the map\ndef embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')","20d3b994":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/images.unsplash.com\/photo-1511068797325-6083f0f872b1?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60',width=400,height=400)","d5db8806":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/images.unsplash.com\/photo-1516546453174-5e1098a4b4af?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60',width=400,height=400)","af8ac375":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/images.unsplash.com\/flagged\/photo-1554692938-b59814c27db8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60',width=400,height=400)","15c19e50":"Flying high.  This Dataset includes digital altimetric data. I don't know how to explore it.","0d4889a4":"Codes from Fatih Bilgin.","adb7701a":"Photo by Chase Fade on Unsplash","a13a065a":"Photo by Heidi Sandstrom. on Unsplash","9422aad5":"Google maps?","53dd3789":"Photo by Bruno Aguirre on Unsplash","67408752":"As far as you can see, my problems with geospatial data have just began.","f4e34f78":"GPS waiting for satellite signal.","4c8c1bc0":"Deleting cells and GPS: reprogramming route.","fa8cfa42":"Maybe this is GOES-16 satellite. We need 3 satellites to localize the smartwatch GPS, like a join Diagram. Besides, satellites are old. Almost my age. Sometimes we loose their signal.Then the signal returns, or not. Don't blame the watch. Sometimes it's the user's fault.","59a1c8a8":"Photo by Robert Nyman on Unsplash","b6d15e22":"Dear Folium, why do you hate me? I deleted all the cells with my failed attempts.","df89a050":"Welcome to Rio de Janeiro. Thanks to my GPS data and WordCloud.","556a1f70":"I expected smth similar the map above. However I got that \"thing\" below. Sorry Alexis and Jessica. I tried during hours. I didn't make it. Not yet. ","b3ef9179":"Photo by Sebastian Hietsch on Unsplash","22bcb8f1":"Photo pt.wikipedia.org","b600cc0e":"Why? Why? Why again Fatih?  ","850fa6c7":"The inspiration for my Dataset \"Digital altimetric data information\/GPS\" and this Kaggle Notebook are Alexis Cook, AI Educator and Jessica Li, Data Scientist. Instructors from Geospatial Analysis micro-course in Kaggle (Create interactive maps, and discover patterns in geospatial data).","02d45f56":"Senior GPS . That one above doesn't requires satellite signal or internet.","ae34088f":"Photo by Kelsey Knight on Unsplash","7b09daae":"GPS off.","179839f4":"Photo by David Preston on Unsplash","e981018a":"Photo by oxana v on Unsplash","d2874443":"Why? No map!"}}