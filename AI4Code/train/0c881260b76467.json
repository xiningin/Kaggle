{"cell_type":{"c1eef653":"code","218cbbe1":"code","3220f167":"code","64adb788":"code","95538092":"code","c42622c4":"code","71ae6cc9":"code","b8a756e7":"code","3c3d99d8":"code","5152813f":"code","dc649ce7":"code","2a1cf1b7":"code","9b3b022e":"code","928deca7":"code","235200b6":"code","9e2a9e8c":"code","50ab79e3":"code","eb717e92":"code","5e11333d":"code","e3a47974":"code","95c5faf6":"code","fa157cfe":"code","77161b4f":"code","47823eb5":"code","4e68d23d":"code","68c7c357":"code","a75ee3d6":"code","57b0ece8":"code","7164d6b6":"code","3ab49f87":"code","8f0824d9":"code","4219e4b5":"code","c9afeffb":"code","37f275bc":"code","45d1ed16":"code","d45394d3":"code","b37d39c0":"code","d7ffd6fd":"code","d6be39f4":"code","8feed5c3":"code","ce281016":"code","9b824286":"code","45d6c795":"code","212c7887":"code","be737c76":"code","bf295c72":"markdown","256a540d":"markdown","0542f3f8":"markdown","06a3c9ba":"markdown","710c1401":"markdown","8fabc0c7":"markdown","eb7fb872":"markdown"},"source":{"c1eef653":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import svm\n\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import classification_report","218cbbe1":"df = pd.read_csv('\/content\/drive\/MyDrive\/Colab Notebooks\/Dataset\/Titanic dataset\/train.csv')","3220f167":"def group_age_range(data):\n  age = data['Age']\n  if 0 < age <= 16:\n    return 'child'\n  elif 16 < age <= 30 or pd.isna(age):\n    return 'young adult'\n  elif 30 < age <= 45:\n    return 'middle aged adult'\n  else:\n    return 'old aged adult'","64adb788":"def fillMissingAgeValueByNameTitles(X):\n    X['Initial']=0\n    for i in X:\n        X['Initial']= X.Name.str.extract('([A-Za-z]+)\\.') # name title initial\n        \n    X['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)\n    \n    X.loc[(X.Age.isnull())&(X.Initial=='Mr'),'Age']=33\n    X.loc[(X.Age.isnull())&(X.Initial=='Mrs'),'Age']=37\n    X.loc[(X.Age.isnull())&(X.Initial=='Master'),'Age']=5\n    X.loc[(X.Age.isnull())&(X.Initial=='Miss'),'Age']=22\n    X.loc[(X.Age.isnull())&(X.Initial=='Other'),'Age']=46\n    \nfillMissingAgeValueByNameTitles(df)","95538092":"df['Age_group'] = df.apply(group_age_range,1)","c42622c4":"df['Family_Size']=df['SibSp']+df['Parch']","71ae6cc9":"df['Embarked'] = df['Embarked'].fillna(df['Embarked'].value_counts().idxmax())","b8a756e7":"df.info()","3c3d99d8":"df.head()","5152813f":"df[df['Survived'] == 1].groupby(['Sex'])['Survived'].count()","dc649ce7":"woman_rate = df['Sex'][df['Sex'] == 'female'][df['Survived'] == 1].count()\/df['Sex'][df['Sex'] == 'female'].count()\nprint('Survival rate of woman: ', woman_rate) \nman_rate = df['Sex'][df['Sex'] == 'male'][df['Survived'] == 1].count()\/df['Sex'][df['Sex'] == 'male'].count()\nprint('Survival rate of man: ', man_rate)","2a1cf1b7":"def func(group):\n    num_survival = group['Survived'].sum()\n    total = group['Survived'].count()\n    survival_rate = group['Survived'].sum()\/group['Survived'].count()\n    return pd.Series([num_survival, total, survival_rate], index=['num_survival', 'total' ,'survival_rate'])\n\ndf.groupby(['Sex','Pclass']).apply(func)","9b3b022e":"d = df.groupby(['Sex','Age']).apply(func)","928deca7":"plt.figure();\nd.plot.hist(alpha=0.5);","235200b6":"age_fare = df[['Age','Fare','Pclass']]","9e2a9e8c":"x = age_fare.sort_values(by=['Age'])","50ab79e3":"x.plot.line(x = 'Age',y = 'Fare')","eb717e92":"# column_transform = make_column_transformer((OneHotEncoder(),['Sex','Age_group']),\n#                                            (OrdinalEncoder(),['Family_Size','Pclass']))\ncolumn_transform = make_column_transformer((OneHotEncoder(),['Sex','Age_group','Embarked']),\n                                           (OrdinalEncoder(),['Parch','SibSp','Pclass']))\nX = column_transform.fit_transform(df)","5e11333d":"Y = df['Survived'].values","e3a47974":"X.shape","95c5faf6":"NB = BernoulliNB()\nNB_pipeline = make_pipeline(column_transform, NB)","fa157cfe":"NB.fit(X,Y)","77161b4f":"pr = NB.predict(X)","47823eb5":"accuracy_score(Y, pr)","4e68d23d":"SVM = svm.SVC()\nSVM.fit(X,Y)","68c7c357":"pr = SVM.predict(X)\naccuracy_score(Y, pr)","a75ee3d6":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=2)\nmodel.fit(X,Y)","57b0ece8":"pr = model.predict(X)\nprint(classification_report(Y, pr))","7164d6b6":"MLP = MLPClassifier(max_iter=500,hidden_layer_sizes=(128,128,128))\nMLP.fit(X,Y)","3ab49f87":"pr = MLP.predict(X)\naccuracy_score(Y, pr)","8f0824d9":"print(classification_report(Y, pr))","4219e4b5":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout","c9afeffb":"model = Sequential()\nmodel.add(Dense(128, input_dim=11, activation=\"relu\"))\nmodel.add(Dropout(0.3)) \nmodel.add(Dense(128, activation=\"relu\"))\nmodel.add(Dropout(0.3))  \nmodel.add(Dense(128, activation=\"relu\")) \nmodel.add(Dense(1, activation=\"sigmoid\"))\nmodel.compile(\n  loss=\"binary_crossentropy\",\n  optimizer='adam',\n  metrics=['accuracy'])\nmodel.summary()","37f275bc":"# fit the keras model on the dataset\nmodel.fit(X,Y, epochs=150)","45d1ed16":"dt = pd.read_csv('\/content\/drive\/MyDrive\/Colab Notebooks\/Dataset\/Titanic dataset\/test.csv')","d45394d3":"fillMissingAgeValueByNameTitles(dt)","b37d39c0":"dt['Age_group'] = dt.apply(group_age_range,1)\ndt['Family_Size']=dt['SibSp']+dt['Parch']\ndt['Embarked'] = dt['Embarked'].fillna(df['Embarked'].value_counts().idxmax())","d7ffd6fd":"X_test = column_transform.fit_transform(dt)","d6be39f4":"my_pr = NB.predict(X_test)","8feed5c3":"my_pr = SVM.predict(X_test)","ce281016":"my_pr = MLP.predict(X_test)","9b824286":"my_pr = model.predict(X_test)\nmy_pr = np.round(my_pr).astype(int)","45d6c795":"re = pd.DataFrame()","212c7887":"re['PassengerId'] = dt['PassengerId']\nre['Survived'] = pd.DataFrame(my_pr)","be737c76":"re.to_csv('myPredict.csv',index=False)","bf295c72":"Naive Bayes\n","256a540d":"KERAS Deep Neural network","0542f3f8":"DNN from Keras","06a3c9ba":"Support Vector Machine","710c1401":"----------------Test---------------------\n","8fabc0c7":"Export result to csv file","eb7fb872":"Multilayer Perceptron "}}