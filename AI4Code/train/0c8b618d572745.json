{"cell_type":{"392e4cf9":"code","ca4dc787":"code","b7acba24":"code","e52ca069":"code","9d3f7a7f":"code","4cd77cc9":"code","ee8b1b32":"code","f827a65a":"code","efb724e7":"code","c98cb80e":"code","1fca7d9d":"code","380657cf":"code","8f908ba7":"code","0fda15eb":"code","71bca1c5":"code","a24826b4":"code","28cce25f":"code","2e01ddd4":"code","5794fa0e":"code","a96c845e":"code","77ef67ab":"code","52e1506e":"code","82229811":"code","cf0037d2":"code","9a8d6601":"code","6da1ed32":"code","bc1fc356":"code","9ac30296":"code","cbaae715":"markdown","99b0ee58":"markdown","01f1d74c":"markdown","25b07f81":"markdown","8a7280f4":"markdown","1be4f552":"markdown","c69f163b":"markdown","bdcd95b4":"markdown","c2b7398a":"markdown","3703fc74":"markdown","0c4ba0dc":"markdown","e6019613":"markdown","f090e56a":"markdown","291cf7a9":"markdown","48ad71ae":"markdown","2b00f80d":"markdown","4417dc09":"markdown","6f672191":"markdown","2d075fd7":"markdown","6067e696":"markdown","a589246c":"markdown","08db8466":"markdown","f5564ac0":"markdown","034a738c":"markdown","fa9369fd":"markdown"},"source":{"392e4cf9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ca4dc787":"!pip install datatable","b7acba24":"import datatable as dt","e52ca069":"path = \"\/kaggle\/input\/amazon-cell-phones-reviews\/\"","9d3f7a7f":"help(dt.fread)","4cd77cc9":"reviews = dt.fread(path+\"20190928-reviews.csv\")\nreviews.head(2)","ee8b1b32":"type(reviews)","f827a65a":"items = dt.fread(path+\"20190928-items.csv\")\nitems.head(2)","efb724e7":"reviews.names","c98cb80e":"reviews.nrows","1fca7d9d":"reviews.ncols","380657cf":"reviews.ndims","8f908ba7":"reviews.stypes","0fda15eb":"reviews[0,0]","71bca1c5":"# The column label can be provided also \nreviews[0,\"asin\"]","a24826b4":"reviews[0:10,0:4]","28cce25f":"reviews[0:10,'asin':'verified']","2e01ddd4":"from datatable import *","5794fa0e":"rating3 = reviews[f.rating == 3,:]\nrating3.head(5)","a96c845e":"avgRating = reviews[:,dt.mean(f.rating),dt.by(f.verified)]\navgRating","77ef67ab":"avgRating1 = reviews[:,dt.mean(f.rating),dt.by(f.verified,f.asin)]\navgRating1","52e1506e":"avgRating2 = reviews[:,[dt.mean(f.rating),dt.sum(f.rating)],dt.by(f.verified,f.asin)]\navgRating2","82229811":"items.key=\"asin\"","cf0037d2":"data12 =  reviews[:,:,dt.join(items)]","9a8d6601":"data12.head(3)","6da1ed32":"sortedData = reviews[:,:,dt.sort(f.rating)]\nsortedData.head(3)","bc1fc356":"sortedData = reviews[:,:,dt.sort(-f.rating)]\nsortedData.head(3)","9ac30296":"sortedData = reviews[:,:,dt.sort(-f.rating),dt.sort(f.verified)]\nsortedData.head(3)","cbaae715":"![](https:\/\/datatable.readthedocs.io\/en\/latest\/_static\/py_datatable_logo.png)","99b0ee58":"## Multiple aggregation on  rating by verified and customer (Conditioned on multiple columns)","01f1d74c":"# References \n\n-  https:\/\/github.com\/h2oai\/datatable\n- https:\/\/pypi.org\/project\/datatable\/ \n- https:\/\/datatable.readthedocs.io\/en\/latest\/index.html","25b07f81":"# Sorting by many columns","8a7280f4":"# About data used in this kernel","1be4f552":"# Installing Datatable","c69f163b":"# Introduction to DataTable","bdcd95b4":"# Data filtering ","c2b7398a":"# Sorting by rating in decreasing order","3703fc74":"### Filter out the data where rating is 3 ","0c4ba0dc":"## Average rating by verified and customer (Conditioned on multiple columns)","e6019613":"# Hope you have liked it. Kindly upvote if you like to motivate writers :)","f090e56a":"# Data slicing ","291cf7a9":"# Data Sorting","48ad71ae":"### It can be observed that, the method fread return datatable Frame object.","2b00f80d":"### Average rating conditioned on **verified** columns","4417dc09":"# Data indexing in DataTable\n\nData indexing can be done using [] bracket","6f672191":"# Data aggregation ","2d075fd7":"### By default it perform left outer join. In future perhaps other type of join will be implemented ","6067e696":"# Data joining in datatable ","a589246c":"# Some important Attributes of Frame class\n\n- **names** : Return the column names as tuple\n- **nrows** : Number of rows \n- **ncols** : Number of columns \n- **ndims** : Number of dimentions\n- **stypes** : Storage type","08db8466":"Python package **datatable** was inspired from its counterpart R package data.table. It was developped with the aim to analyse BigData efficiently. Following is about  datatable package.(**Taken from datatable github page**)\n\nThe set of features that we want to implement with datatable is at least the following:\n\n- Column-oriented data storage.\n\n- Native-C implementation for all datatypes, including strings. Packages such as pandas and numpy already do that for numeric columns, but not for strings.\n\n- Support for date-time and categorical types. Object type is also supported, but promotion into object discouraged.\n\n- All types should support null values, with as little overhead as possible.\n\n- Data should be stored on disk in the same format as in memory. This will allow us to memory-map data on disk and work on out-of-memory datasets transparently.\n\n- Work with memory-mapped datasets to avoid loading into memory more data than necessary for each particular operation.\n\n- Fast data reading from CSV and other formats.\n\n- Multi-threaded data processing: time-consuming operations should attempt to utilize all cores for maximum efficiency.\n\n- Efficient algorithms for sorting\/grouping\/joining.\n\n- Expressive query syntax (similar to data.table).\n\n - LLVM-based lazy computation for complex queries (code generated, compiled and executed on-the-fly).\n\n- LLVM-based user-defined functions.\n\n- Minimal amount of data copying, copy-on-write semantics for shared data.\n\n- Use \"rowindex\" views in filtering\/sorting\/grouping\/joining operators to avoid unnecessary data copying.\n\n- Interoperability with pandas \/ numpy \/ pure python: the users should have the ability to convert to another data-processing framework with ease.\n\n- Restrictions: Python 3.5+, 64-bit systems only.","f5564ac0":"Installation\nOn MacOS systems installing datatable is as easy as\n\npip install datatable\nOn Linux you can install a binary distribution as\n\n# If you have Python 3.5\npip install https:\/\/s3.amazonaws.com\/h2o-release\/datatable\/stable\/datatable-0.9.0\/datatable-0.9.0-cp35-cp35m-linux_x86_64.whl\n\n# If you have Python 3.6\n* pip install https:\/\/s3.amazonaws.com\/h2o-release\/datatable\/stable\/datatable-0.9.0\/datatable-0.9.0-cp36-cp36m-linux_","034a738c":"- Data has been taken from \nhttps:\/\/www.kaggle.com\/grikomsn\/amazon-cell-phones-reviews\n\n- Data is by Griko Nibras. Thanks to him for uploading this beutiful data set.","fa9369fd":"### Note  :\n\n- In output of head, color coding can be observed.\n- **Red** : String Data \n- **Green** : Integer \n- **Blue** : FLoating data "}}