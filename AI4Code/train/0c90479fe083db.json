{"cell_type":{"136ee25d":"code","5fa4e956":"code","0411e6c1":"code","06b98eae":"code","38fbd0dc":"code","409b4934":"code","286042e6":"code","05afa648":"code","0ab70eed":"code","7403f073":"code","90d2f506":"code","95d2d09b":"code","f0486e93":"code","01f23dc9":"code","1c573ba1":"code","fe75d1be":"code","374e9108":"code","99fe6c00":"code","a872ef45":"code","e8fe7caa":"code","3e4fbe32":"code","15fbb444":"code","61b9c679":"code","2b7c5ade":"code","8b89f034":"code","f15cc52b":"code","87986267":"code","e610469a":"code","e7957447":"code","95c144da":"code","26c478ef":"code","c06e0435":"code","ec4c769d":"code","5e7ef859":"code","20750c67":"code","77030bd2":"code","dd1fd658":"code","370b4604":"code","cf53608c":"code","29de5572":"markdown","69eb8e27":"markdown","887e0203":"markdown","f54d8f74":"markdown","55703ed8":"markdown","9ea6a9b3":"markdown"},"source":{"136ee25d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom math import sqrt\nfrom sklearn.ensemble import RandomForestRegressor\nplt.style.use('fivethirtyeight')","5fa4e956":"data = pd.read_csv('..\/input\/whocovid19globaldata\/whocovid19globaldata.csv')\n","0411e6c1":"data.head()","06b98eae":"data.shape","38fbd0dc":"for (country), group in data.groupby(['Country']):\n     group.to_csv(f'{country}.csv', index=False)","409b4934":"pd.read_csv(\"Turkey.csv\")","286042e6":"data = pd.read_csv('Turkey.csv')\ndata = data[data.Cumulative_cases != 0]\ndata","05afa648":"label = ['Country_code','Country', 'WHO_region']\ndata = data.drop(label, axis=1)\ndata","0ab70eed":"color_pal = [\"#00FFFF\", \"#66CDAA\", \"#E3CF57\", \"#8B7D6B\"]\n_ = data.plot(style='.', figsize=(15,5), color=color_pal, title='TVR')","7403f073":"data.Date_reported = pd.to_datetime(data.Date_reported, format='%Y-%m-%d %H:%M:%S')\ndata","90d2f506":"train_split_date = '2021-12-01'\ntest_split_date = '2022-01-29'\ndata_train = data.loc[(data.Date_reported >= train_split_date) & (data.Date_reported <= test_split_date)].copy()\ndata_test = data.loc[data.Date_reported > test_split_date].copy()","95d2d09b":"data_train","f0486e93":"data_test","01f23dc9":"def create_features(df, label=None):\n    \"\"\"\n    Creates time series features from datetime index\n    \"\"\"\n    df['month'] = df['Date_reported'].dt.month\n    df['year'] = df['Date_reported'].dt.year\n    df['dayofyear'] = df['Date_reported'].dt.dayofyear\n    df['dayofmonth'] = df['Date_reported'].dt.day\n    df['Cumulative_cases'] = df['Cumulative_cases']\n    df['New_deaths'] = df['New_deaths']\n    df['Cumulative_deaths'] = df['Cumulative_deaths']\n    \n    X = df[['month','year', 'dayofyear','dayofmonth', 'Cumulative_cases', 'New_deaths', 'Cumulative_deaths']]\n    \n    if label:\n        y = df[label]\n        return X, y\n\n    return X","1c573ba1":"X_train, y_train = create_features(data_train, label='New_cases')\nX_test, y_test = create_features(data_test, label='New_cases')\nX, y = create_features(data, label='New_cases')","fe75d1be":"X_train","374e9108":"X_test","99fe6c00":"from sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV","a872ef45":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.utils import check_array","e8fe7caa":"def mean_absolute_percentage_error(y_true, y_pred): \n    \"\"\"Calculates MAPE given y_true and y_pred\"\"\"\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","3e4fbe32":"def bestparam_randCV(model,hyperparam,x_train, y_train, n_iter=1000):\n    \n    hyperparam = hyperparam\n    randomizedCV = RandomizedSearchCV(model, param_distributions = hyperparam, cv = 10,\n                                          n_iter = n_iter, scoring = 'neg_mean_squared_error', n_jobs=-1, \n                                          random_state = 42, verbose = True)\n    \n    randomizedCV.fit(x_train, y_train)\n\n    print (\" Results from Random Search \" )\n    print (\"\\n The best estimator across ALL searched params:\\n\", randomizedCV.best_estimator_)\n    print (\"\\n The best score across ALL searched params:\\n\", randomizedCV.best_score_)\n    print (\"\\n The best parameters across ALL searched params:\\n\", randomizedCV.best_params_)\n    print ('\\n Best MSE', randomizedCV.score(x_train, y_train))\n     \n    \"\"\"\n    print (\"\\n Results from RandomizedSearchCV \" )    \n    print (randomizedCV.cv_results_)\n    \"\"\"\n    \n    return randomizedCV","15fbb444":"reg         = DecisionTreeRegressor()             \n\nhyperparam =  {'max_features': ['auto', 'sqrt'],\n               'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n               'min_samples_leaf': [1, 2, 3, 4],\n               'min_samples_split': [2, 3, 4, 5, 10]}\n \nn_iter     = 100\nbest_dt1   = bestparam_randCV(reg, hyperparam, X_train, y_train, n_iter)","61b9c679":"dt1 = DecisionTreeRegressor(\n                        max_features      = best_dt1.best_params_.get('max_features'),\n                        max_depth         = best_dt1.best_params_.get('max_depth'),\n                        min_samples_split = best_dt1.best_params_.get('min_samples_split'),\n                        min_samples_leaf  = best_dt1.best_params_.get('min_samples_leaf'))","2b7c5ade":"result_dt1 = dt1.fit(X_train, y_train)","8b89f034":"## Jika tidak jelas grafiknya ambil file .png saja yang di samping nama filenya \"filename.png\"\nimportances = result_dt1.feature_importances_\nindices = np.argsort(importances)\nfeatures=X_train.columns\nplt.figure(figsize=(20,50))\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), features[indices])\nplt.xlabel('Relative Importance')\nplt.savefig('filename.png', dpi=300)","f15cc52b":"data_train['New_cases_Prediction'] = result_dt1.predict(X_train)\ndata_all = pd.concat([data_test, data_train], sort=False)","87986267":"_ = data_all[['New_cases','New_cases_Prediction']].plot(figsize=(15, 5))","e610469a":"#RMSE\nsqrt(mean_squared_error(y_true=data_train['New_cases'],\n                   y_pred=data_train['New_cases_Prediction']))","e7957447":"#MAE\nmean_absolute_error(y_true=data_train['New_cases'],\n                   y_pred=data_train['New_cases_Prediction'])","95c144da":"#MAPE\nmean_absolute_percentage_error(y_true=data_train['New_cases'],\n                   y_pred=data_train['New_cases_Prediction'])","26c478ef":"data_test['New_cases_Prediction'] = result_dt1.predict(X_test)\ndata_all = pd.concat([data_test, data_train], sort=False)","c06e0435":"_ = data_all[['New_cases','New_cases_Prediction']].plot(figsize=(15, 5))","ec4c769d":"_ = data_test[['New_cases','New_cases_Prediction']].plot(figsize=(15, 5))","5e7ef859":"#RMSE\nsqrt(mean_squared_error(y_true=data_test['New_cases'],\n                   y_pred=data_test['New_cases_Prediction']))","20750c67":"#MAE\nmean_absolute_error(y_true=data_test['New_cases'],\n                   y_pred=data_test['New_cases_Prediction'])","77030bd2":"#MAPE\nmean_absolute_percentage_error(y_true=data_test['New_cases'],\n                   y_pred=data_test['New_cases_Prediction'])","dd1fd658":"data_test['error'] = data_test['New_cases'] - data_test['New_cases_Prediction']\ndata_test['abs_error'] = data_test['error'].apply(np.abs)\nerror_by_day = data_test.groupby(['year','month','dayofmonth']) \\\n    .mean()[['New_cases','New_cases_Prediction','error','abs_error']]","370b4604":"error_by_day.sort_values('error', ascending=True)","cf53608c":"data_test","29de5572":"# Randomized Cross Validation","69eb8e27":"# Evaluation on Train Set\n","887e0203":"# Modeling Phase\n* Search best hyperparameter with RandomizedCV\n* Create feature importance barchart\n* Evaluate in training dataset\n* Evaluate in testing dataset","f54d8f74":"# Forecast on Test Set\n","55703ed8":"# Feature Importances","9ea6a9b3":"# Forecast on Training Set\n"}}