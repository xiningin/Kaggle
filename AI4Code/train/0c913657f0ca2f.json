{"cell_type":{"93a9ec25":"code","dd668949":"code","0ca1d380":"code","edc19d09":"code","46bfba33":"code","596de485":"code","59639d11":"code","b928a701":"code","f1970817":"code","caad90da":"code","04c7b4e3":"code","e573a05d":"code","ba7a8e4c":"code","bdd53ab5":"code","a4565eb6":"code","1ca0dd2b":"code","3ea637e4":"code","30044dd2":"code","ff3cec71":"code","22f0c490":"code","36b90d4b":"code","d0f6b09e":"code","f59e6ad9":"markdown","62c105e4":"markdown","85e72307":"markdown","f5164f5c":"markdown","4aa7f008":"markdown","374d6e1b":"markdown","5d001f26":"markdown","d1a57da4":"markdown","408fb0ab":"markdown","9a569237":"markdown","99fa18be":"markdown","8c2e88f5":"markdown","3b521212":"markdown","abca0ee3":"markdown","c2e5e3f3":"markdown","340165ee":"markdown","a9e967d2":"markdown","8fc1ea69":"markdown","ca345846":"markdown","15060c58":"markdown","2f435d6a":"markdown","17c37115":"markdown","0ecaae4e":"markdown","c6a56c67":"markdown"},"source":{"93a9ec25":"import numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport math","dd668949":"data = pd.read_csv(\"..\/input\/home-data-for-ml-course\/train.csv\")","0ca1d380":"data.head()","edc19d09":"data.describe()","46bfba33":"corr = data.corr()\ncorr.style.background_gradient(cmap='coolwarm')","596de485":"endog = data['SalePrice']\nexog = sm.add_constant(data[['OverallQual','YearBuilt','YearRemodAdd','TotalBsmtSF','1stFlrSF','GrLivArea','FullBath','TotRmsAbvGrd','GarageCars','GarageArea']])\nprint(exog)","59639d11":"X = exog.to_numpy()\ny = endog.to_numpy()\n","b928a701":"xt = np.transpose(X)\nprint(xt)","f1970817":"xt_X = np.matmul(xt,X)\nprint(xt_X)","caad90da":"xt_X_inv = np.linalg.inv(xt_X)\nprint(xt_X_inv)","04c7b4e3":"xt_X_inv_xt = np.matmul(xt_X_inv,xt)\nprint(xt_X_inv_xt)","e573a05d":"beta = np.matmul(xt_X_inv_xt,y)\nprint(beta)","ba7a8e4c":"mod = sm.OLS(endog,exog)\nresults = mod.fit()\nprint(results.summary())","bdd53ab5":"def RSE(y_true, y_predicted):\n   \n    y_true = np.array(y_true)\n    y_predicted = np.array(y_predicted)\n    RSS = np.sum(np.square(y_true - y_predicted))\n\n    rse = math.sqrt(RSS \/ (len(y_true) - 2))\n    return rse","a4565eb6":"yp= results.predict()\nypa = np.array(yp)\nyta = data['SalePrice']\neterms =yta-ypa\n\n\ndata1 = pd.DataFrame(eterms)\ndata1['SalePrice'].hist(bins=10)","1ca0dd2b":"rse= RSE(data['SalePrice'],results.predict())\nprint(rse)","3ea637e4":"from sklearn import linear_model\nX = data[['OverallQual','YearBuilt','YearRemodAdd','TotalBsmtSF','1stFlrSF','GrLivArea','FullBath','TotRmsAbvGrd','GarageCars','GarageArea']]\ny = data['SalePrice']\n\nlm = linear_model.LinearRegression()\nmodel = lm.fit(X,y)\nlm.coef_","30044dd2":"lm.intercept_","ff3cec71":"test = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')","22f0c490":"X_test = data[['OverallQual','YearBuilt','YearRemodAdd','TotalBsmtSF','1stFlrSF','GrLivArea','FullBath','TotRmsAbvGrd','GarageCars','GarageArea']]\n","36b90d4b":"y_pred = lm.predict(X_test)","d0f6b09e":"y_pred","f59e6ad9":"I hope you liked it.","62c105e4":"## 3.Gradient Descent Method from Scikit-Learn","85e72307":"1. Ordinary Least Square method through Matrix operation.\n2. Ordinary Least Square method from StatsModels\n3. Gradient Descent Method from Scikit-Learn","f5164f5c":"### Loading Data","4aa7f008":"Taking **transpose** of X using **np.transpose(X)**","374d6e1b":"### Calculating Residual Standard Error","5d001f26":"**Multiplying** xt_X_inv with xt using **np.matmul(xt_X_inv,xt)**","d1a57da4":"Lets choose input vectors on the basis of correlation.\n\n**sm.add_constant()** in following cell adds constant unit vector as a coefficient for beta0 or theta0 or intercept","408fb0ab":"# Implementation of Multiple Linear Regression using 3 ways","9a569237":"## 1.Ordinary Least Square method through Matrix operation.","99fa18be":"* input vector - exog\n* output vector - endog","8c2e88f5":"![RSS.png](attachment:RSS.png)","3b521212":"### Predicting the result for test data","abca0ee3":"### Data Preprocessing","c2e5e3f3":"**Multiplying** xt (X Transpose) with X using **np.matmul(xt,X)**","340165ee":"## 2.Ordinary Least Square method from StatsModels","a9e967d2":"### Importing Liraries","8fc1ea69":"### Input Vectors","ca345846":"Formula for parameter estimation is \n\n**\u03b2 = (X'X)\u02c9\u00b9X'y**","15060c58":"Lets Convert the input and output vectors to array to implement the above formula.","2f435d6a":"Taking **Inverse** of xt_x using **np.linalg.inv(xt_x)**","17c37115":"Finally getting **beta** by multiplying xt_X_inv_xt and y","0ecaae4e":"## Predicting House Prices using Multiple Linear Regression","c6a56c67":"### Checking Correlation"}}