{"cell_type":{"c2d40fc8":"code","c3859c4b":"code","c922a27d":"code","a5619265":"code","3788d56b":"code","fa390e77":"code","1f292f80":"code","76864c77":"code","55e0595a":"code","7f1d1716":"code","bb71efd9":"code","3c6fbdeb":"code","16fbb06b":"code","9d02ba77":"code","16d264f6":"code","a4880e3a":"code","124b03f5":"code","494b54aa":"code","4f2de65d":"code","8ff4ca5f":"code","b31c293c":"code","4c39a508":"code","18ad3ac2":"code","223ebb80":"code","d05f343c":"code","2b5d5f12":"code","0e0624d2":"code","96ade336":"code","1a092129":"code","b608f8f5":"code","c684a9b4":"code","38a6b709":"code","7d6a9cd5":"code","54161e96":"code","5c959aab":"code","9f5e378e":"markdown","f6b04fa4":"markdown"},"source":{"c2d40fc8":"# Import the libraries\nimport numpy as np\nimport pandas as pd\n\npd.set_option(\"display.max_row\", None)\npd.set_option(\"display.max_columns\", None)\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c3859c4b":"# Read the csv files\ntrain_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv\")","c922a27d":"# Print the first five rows of the train dataframe\ntrain_df.head()","a5619265":"# Print the number of columns, rows and missing values in train dataframe\nprint(f'''No. of rows: {train_df.shape[0]}; No. of columns: {train_df.shape[1]}; \nNo. of missing value: {sum(train_df.isna().sum())}''')","3788d56b":"# analyse the typess of column in the dataframe\ntrain_df.dtypes","fa390e77":"# Describe various statistical values of dataframe\ntrain_df.describe().T","1f292f80":"# Describe the target column\nprint(\"Target column statistics: \")\ntrain_df[\"target\"].describe()","76864c77":"# Calculate the number of times each class occur in the target column\nprint(\"Frequency of each class:\")\ntrain_df[\"target\"].value_counts()","55e0595a":"temp_target = pd.DataFrame(train_df[\"target\"].value_counts()\/len(train_df))\ntarget_percentage = (train_df[\"target\"].value_counts()\/len(train_df)) * 100\ntemp_target[\"target_percent\"] = target_percentage\ntemp_target = temp_target.reset_index(drop = False)\ntemp_target = temp_target.sort_values(by = \"index\")\ntemp_target.head(10)","7f1d1716":"fig = px.bar(\n    x = temp_target['index'],\n    y = temp_target[\"target_percent\"],\n    color_discrete_sequence = [\"#ff355d\"] * len(temp_target),\n    text = temp_target[\"target_percent\"]\n    )\n\nfig.update_layout(\n    plot_bgcolor = \"#EEEEEE\",\n    paper_bgcolor = \"#f6f5f5\",\n    autosize = True,\n    xaxis = dict(\n        title_text = \"<b> Class <\/b>\",\n        titlefont = dict(size = 12)\n    ),\n    yaxis = dict(\n        title_text = \"<b> Target(%) <\/b>\",\n        titlefont = dict(size = 12)\n    ),\n    title_text = \"<b> Target Distribution <\/b>\",\n    title_font_size = 16,\n    title_font_color = \"black\",\n    title_pad_t = 5,\n    title_pad_l = 20\n    )\n \n\nfig.update_yaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\nfig.update_xaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\n\nfig.update_traces(texttemplate = \"%{text:.2s}\", textposition = \"outside\")\nfig.update_layout(uniformtext_minsize = 8, uniformtext_mode = \"hide\")\n\nfig.show()","bb71efd9":"# Print the first five rows of the test dataframe\ntest_df.head()","3c6fbdeb":"# Print the number of columns, rows and missing values in test dataframe\nprint(f\"Number of rows: {test_df.shape[0]}, Number of columns: {test_df.shape[1]}, Number of missing rows: {sum(test_df.isna().sum())}\")","16fbb06b":"# analyse the typess of column in the test dataframe\ntest_df.dtypes","9d02ba77":"# Describe various statistical values of test dataframe\ntest_df.describe().T","16d264f6":"# Create a list containing all the feature except id and target\nfeatures = [feature for feature in train_df.columns if feature not in [\"id\", \"target\"]]","a4880e3a":"unique_value_train = np.zeros(2) # Create an array of zeros\nfor feature in features:\n    temp = train_df[feature].unique() # Collect the unique value of series object using .unique()\n    unique_value_train = np.concatenate([unique_value_train, temp]) # join two or more arrays of the same shape along a specified axis\nunique_value_train = np.unique(unique_value_train) #Returns the array of sorted unique elements of an array","124b03f5":"unique_value_test = np.zeros(2)\nfor feature in features:\n    temp = test_df[feature].unique()\n    unique_value_test = np.concatenate([unique_value_test, temp])\nunique_value_test = np.unique(unique_value_test)","494b54aa":"unique_value_feature_train  = pd.DataFrame(train_df[features].nunique()) # Create dataframe of count of each unique element in a feature\nunique_value_feature_train = unique_value_feature_train.reset_index(drop = False)\nunique_value_feature_train.columns = [\"Features\", \"Count\"]\nunique_value_feature_train","4f2de65d":"unique_value_feature_test = pd.DataFrame(test_df[features].nunique())\nunique_value_feature_test = unique_value_feature_test.reset_index(drop = False)\nunique_value_feature_test.columns = [\"Features\", \"Count\"]\nunique_value_feature_test","8ff4ca5f":"fig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x = unique_value_feature_train[\"Features\"],\n    y = unique_value_feature_train[\"Count\"],\n    name='Train Features',\n    marker_color=\"#0099cc\"\n))\nfig.add_trace(go.Bar(\n    x = unique_value_feature_test[\"Features\"],\n    y = unique_value_feature_test[\"Count\"],\n    name='Test Features',\n    marker_color='#ff355d'\n))\n\nfig.update_layout(\n                  barmode='group', \n                  xaxis_tickangle=-45,\n                  plot_bgcolor=\"#EEEEEE\",\n                  paper_bgcolor = \"#f6f5f5\",\n                  autosize=True,\n                  yaxis = dict(\n                          title_text = \"<b>Count<\/b>\",\n                          titlefont = dict(size = 12)),\n                  title_text = \"<b> Feature Count of train and test data <\/b><br>\",\n                  title_font_size = 16,\n                  title_font_color = \"black\",\n                  title_pad_t = 2.3,\n                  title_pad_l = 18\n                  \n                 )  \nfig.update_yaxes(showticklabels=True, showline=True, linewidth=2, linecolor='black')\nfig.update_xaxes(showticklabels=True, showline=True, linewidth=2, linecolor='black')\n\nfig.show()","b31c293c":"unique_value_feature_diff = unique_value_feature_train.copy()\nunique_value_feature_diff[\"Count\"] = unique_value_feature_train[\"Count\"] - unique_value_feature_test[\"Count\"]\nunique_value_feature_diff = unique_value_feature_diff[unique_value_feature_diff[\"Count\"] != 0] \nunique_value_feature_diff\n# Count the number of features which has different count in train and test dataset","4c39a508":"fig = px.bar(x = unique_value_feature_diff[\"Features\"], y = unique_value_feature_diff[\"Count\"])\n\nfig.update_layout( \n                  plot_bgcolor=\"#EEEEEE\",\n                  paper_bgcolor = \"#f6f5f5\",\n                  autosize=True,\n                  xaxis = dict(\n                          title_text = \"<b>Features<\/b>\",\n                          titlefont = dict(size = 12)),\n                  yaxis = dict(\n                          title_text = \"<b>Count<\/b>\",\n                          titlefont = dict(size = 12)),\n                  title_text = \"<b> Difference of number of unique values in features <\/b><br>\",\n                  title_font_size = 16,\n                  title_font_color = \"black\",\n                  title_pad_t = 2.3,\n                  title_pad_l = 18\n                  \n                 )  \nfig.update_yaxes(showticklabels=True, showline=True, linewidth=2, linecolor='black')\nfig.update_xaxes(showticklabels=True, showline=True, linewidth=2, linecolor='black')\n\nfig.show()","18ad3ac2":"transpose_feature_train = train_df[features]\ntranspose_feature_train = transpose_feature_train.apply(pd.Series.value_counts, axis = 1).fillna(0)","223ebb80":"transpose_features_test = test_df[features]\ntranspose_features_test = transpose_features_test.apply(pd.Series.value_counts, axis = 1).fillna(0)","d05f343c":"\n\nfig = make_subplots(rows = 2, cols = 1, shared_yaxes=True, \n                   x_title=\"Unique Values\",  y_title=\"Count\")\n\nfig.append_trace(go.Histogram(\n                    x = unique_value_train,\n                    marker=dict(color=\"#ffd514\"),\n                    name = 'train',\n                    nbinsx = 352\n                    ),\n                    row = 1, col = 1\n                )\nfig.append_trace(go.Histogram(\n                    x = unique_value_test,\n                    marker = dict(color = '#ff355d'),\n                    name = 'test',\n                    nbinsx = 352),\n                    row = 2, col = 1\n                )\n\n\nfig.update_layout(height = 300,\n                  title_text = \"<b> Unique Values<\/b> <br>\" + \" Unique value for train and test data set\", \n                  paper_bgcolor = \"#f6f5f5\", plot_bgcolor = \"#f6f5f5\")\nfig.update_yaxes(showticklabels=False)\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black')\n","2b5d5f12":"\n\nfig = make_subplots(rows = 1, cols = 2,  \n                   x_title=\"Unique Values\",  horizontal_spacing = 0.2)\n\nfig.append_trace(go.Bar(\n                    x = unique_value_feature_train['Count'],\n                    y = unique_value_feature_train['Features'],\n                    marker=dict(color=\"#ffd514\"),\n                    name = 'train',\n                    orientation='h'\n                    ),\n                    row = 1, col = 1\n                )\nfig.append_trace(go.Bar(\n                    x = unique_value_feature_test['Count'],\n                    y = unique_value_feature_test['Features'],\n                    marker = dict(color = '#ff355d'),\n                    name = 'test',\n                    orientation='h'\n                    ),\n                    row = 1, col = 2\n                )\n\n\nfig.update_layout( height = 1000,\n                  title_text =  \" <b> Unique value for train and test data set <\/b>\", \n                  paper_bgcolor = \"#f6f5f5\", plot_bgcolor = \"#f6f5f5\")\nfig.update_yaxes(showticklabels=True, showline=True, linewidth=2, linecolor='black')\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black')\n","0e0624d2":"\n\nfig = px.bar(x=unique_value_feature_diff['Features'], y=unique_value_feature_diff['Count'], \n            color_discrete_sequence =['#0099cc']*len(unique_value_feature_diff), \n             text=unique_value_feature_diff['Count'])\n\n\nfig.update_layout(plot_bgcolor=\"#EEEEEE\",\n                  paper_bgcolor = \"#f6f5f5\",\n                  autosize= True,\n                  xaxis = dict(\n                          title_text = \"<b>Features<\/b>\",\n                          titlefont=dict(size=12)),\n                  yaxis = dict(\n                          title_text = \"<b>Unique values<\/b>\",\n                          titlefont = dict(size = 12)),\n                  title_text = \"<b> Unique Values for Train dataset <\/b><br>\" + \n                                \" Positive means that train dataset has higher unique value than test dataset\",\n                  title_font_size = 16,\n                  title_font_color = \"black\",\n                  title_pad_t = 2.3,\n                  title_pad_l = 18\n                  \n                 )  \nfig.update_yaxes(showticklabels=True, showline=True, linewidth=2, linecolor='black')\nfig.update_xaxes(showticklabels=True, showline=True, linewidth=2, linecolor='black')\n\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\n\nfig.show()","96ade336":"mean_unique_value_train = pd.DataFrame(transpose_feature_train.mean(axis=0))\nmean_unique_value_train = mean_unique_value_train.reset_index(drop=False)\nmean_unique_value_train.columns = ['Unique', 'Mean']\nmean_unique_value_train = mean_unique_value_train.sort_values('Mean', ascending=False)[:10]\nmean_unique_value_train","1a092129":"fig = px.bar(\n    x=mean_unique_value_train['Unique'],\n    y=mean_unique_value_train['Mean'],\n    color_discrete_sequence =['#ffd514']*len(unique_value_feature_diff), \n    text=mean_unique_value_train['Mean']\n)\n\n\nfig.update_layout(\n    plot_bgcolor=\"#EEEEEE\",\n    paper_bgcolor = \"#f6f5f5\",\n    autosize=True,\n    xaxis = dict(\n        title_text = \"<b>Unique values<\/b>\",\n        titlefont=dict(size=12)\n    ),\n    yaxis = dict(\n        title_text = \"<b>Mean occurance<\/b>\",\n        titlefont = dict(size = 12)\n    ),\n    title_text = \"<b> Unique Values for Train dataset <\/b><br>\" + \n                 \" Positive means that train dataset has higher unique value than test dataset\",\n    title_font_size = 16,\n    title_font_color = \"black\",\n    title_pad_t = 2.3,\n    title_pad_l = 18\n                  \n                 )  \nfig.update_yaxes(showticklabels=True, showline=True, linewidth=2, linecolor='black')\nfig.update_xaxes(showticklabels=True, showline=True, linewidth=2, linecolor='black')\n\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\n\nfig.show()","b608f8f5":"mean_unique_value_test = pd.DataFrame(transpose_features_test.mean(axis=0))\nmean_unique_value_test = mean_unique_value_test.reset_index(drop=False)\nmean_unique_value_test.columns = ['Unique', 'Mean']\nmean_unique_value_test = mean_unique_value_test.sort_values('Mean', ascending=False)[:10]\nmean_unique_value_test","c684a9b4":"\n\nfig = px.bar(\n    x=mean_unique_value_test['Unique'],\n    y=mean_unique_value_test['Mean'],\n    color_discrete_sequence =['#ff355d']*len(unique_value_feature_diff), \n    text=mean_unique_value_train['Mean']\n)\n\n\nfig.update_layout(\n    plot_bgcolor=\"#EEEEEE\",\n    paper_bgcolor = \"#f6f5f5\",\n    autosize=True,\n    xaxis = dict(\n        title_text = \"<b>Unique values<\/b>\",\n        titlefont=dict(size=12)\n    ),\n    yaxis = dict(\n        title_text = \"<b>Mean occurance<\/b>\",\n        titlefont = dict(size = 12)\n    ),\n    title_text = \"<b> Unique Values for Test dataset <\/b><br>\" + \n                 \" Number zero is dominating in every row\",\n    title_font_size = 16,\n    title_font_color = \"black\",\n    title_pad_t = 2.3,\n    title_pad_l = 18\n                  \n                 )  \nfig.update_yaxes(showticklabels=True, showline=True, linewidth=2, linecolor='black')\nfig.update_xaxes(showticklabels=True, showline=True, linewidth=2, linecolor='black')\n\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\n\nfig.show()","38a6b709":"zero_positive_train = pd.DataFrame()\nzero_positive_train[\"zero\"] = transpose_feature_train.iloc[:, 0]\nzero_positive_train[\"positive\"] = transpose_feature_train.iloc[:, 1:].sum(axis = 1)","7d6a9cd5":"zero_positive_test = pd.DataFrame()\nzero_positive_test[\"zero\"] = transpose_features_test.iloc[:, 0]\nzero_positive_test[\"positive\"] = transpose_features_test.iloc[:, 1:].sum(axis = 1)","54161e96":"x1 = zero_positive_test['positive']\nx2 = zero_positive_test['zero']\n\nhist_data = [x1, x2]\n\ngroup_labels = [\"positive\", \"zero\"]\n\ncolors = ['#ff5573', '#0099cc']\n\nfig = ff.create_distplot(hist_data, group_labels, colors = colors)\nfig.update_yaxes(showticklabels=True, showline=True, linewidth=2, linecolor='black')\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black')\n\nfig.update_traces(opacity= .8, selector=dict(type='histogram'))\nfig.update_layout(height = 300,\n                  title_text = \"<b>Test Data Set<\/b>\",\n                  xaxis_title_text='<b>Number of Occurance<\/b>', # xaxis label\n                  yaxis_title_text='Count',\n                  paper_bgcolor = \"#f6f5f5\", plot_bgcolor = \"#f6f5f5\")\n\nfig.show()","5c959aab":"fig = go.Figure()\n\nfig.add_trace(go.Histogram(\n    x = zero_positive_train['positive'],\n    histnorm = 'percent',\n    name = 'positive', # name used in legend and hover label\n    marker_color = '#ff5573',\n    opacity = 1\n))\n\nfig.add_trace(go.Histogram(\n    x = zero_positive_train['zero'],\n    histnorm = 'percent',\n    name = 'zero',\n    marker_color = '#0099cc',\n    opacity = 1\n))\n\nfig.update_layout(\n    title_text='<b>Train Data Set<\/b>', # title of plot\n    xaxis_title_text='<b>Number of Occurance<\/b>', # xaxis label\n    yaxis_title_text='Count', # yaxis label\n    height = 300,\n    bargap = 0.01, # gap between bars of adjacent location coordinates\n    bargroupgap = 0.0001, # gap between bars of the same location coordinates\n    paper_bgcolor = \"#f6f5f5\", plot_bgcolor = \"#f6f5f5\"\n)\n\nfig.update_traces(marker_line_width= 0.9, \n                  selector=dict(type='histogram'),\n                 marker_pattern_fillmode= \"overlay\")\n\n\nfig.update_yaxes(showticklabels=True, showline=True, linewidth=2, linecolor='black')\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black')\n\n\nfig.show()","9f5e378e":"If you have any suggestion or liked the work please comment and upvote!","f6b04fa4":"This notebook is based on this https:\/\/www.kaggle.com\/dwin183287\/tps-june-2021-eda notebook. As a practice of plotly I have tried to replicate the graphs using plotly. For more information please follow the above mentioned link."}}