{"cell_type":{"9f2e735d":"code","43439e8b":"code","95c04731":"code","05091fb7":"code","db51a23c":"code","99f88278":"code","e4794afa":"code","130d0d5c":"code","a86a815d":"code","a552ebf4":"code","a22f848a":"code","9106207a":"code","9ca6f397":"code","6e97cf20":"code","032fd08a":"code","dedff86a":"code","a9dfaa2a":"markdown","aa7fef21":"markdown","cce28f46":"markdown","23ddee88":"markdown","22374cd6":"markdown","a37d397b":"markdown","b79650e2":"markdown","a4267c31":"markdown","c71ae9f8":"markdown","5b3f2b63":"markdown","b1606cdf":"markdown","b8639c0b":"markdown","a96d6be7":"markdown","121e426a":"markdown","856d350a":"markdown","a975e3fe":"markdown","1e2afe3a":"markdown","c189dcd1":"markdown"},"source":{"9f2e735d":"from __future__ import absolute_import, division, print_function\n\nimport os","43439e8b":"import sys\nprint(\"Python version:\", sys.version)\n\nimport tensorflow as tf\nprint(\"TensorFlow version:\", tf.__version__)","95c04731":"keras = tf.keras","05091fb7":"(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.mnist.load_data()\n\ntrain_labels = train_labels[:1000]\ntest_labels = test_labels[:1000]\n\ntrain_images = train_images[:1000].reshape(-1, 28 * 28) \/ 255.0\ntest_images = test_images[:1000].reshape(-1, 28 * 28) \/ 255.0","db51a23c":"# Returns a short sequential model\ndef create_model():\n    model = tf.keras.models.Sequential([\n        keras.layers.Dense(512, activation=tf.keras.activations.relu, input_shape=(784,)),\n        keras.layers.Dropout(0.2),\n        keras.layers.Dense(10, activation=tf.keras.activations.softmax)\n    ])\n    \n    model.compile(optimizer='adam',\n                  loss=tf.keras.losses.sparse_categorical_crossentropy,\n                  metrics=['accuracy'])\n    \n    return model\n\n# Create a basic model instance\nmodel = create_model()\nmodel.summary()","99f88278":"checkpoint_path = 'training_1\/cp.ckpt'\ncheckpoint_dir = os.path.dirname(checkpoint_path)\n\n# create checkpoint callback\ncp_callback = tf.keras.callbacks.ModelCheckpoint(checkpoint_path,\n                                                save_weights_only=True,\n                                                verbose=1)\n\nmodel = create_model()\nmodel.fit(train_images, train_labels, epochs=10,\n         validation_data = (test_images, test_labels),\n         callbacks = [cp_callback]) # pass callback to training","e4794afa":"!ls {checkpoint_dir}","130d0d5c":"model = create_model()\n\nloss, acc = model.evaluate(test_images, test_labels)\nprint('Untrained model, accuracy: {:5.2f}%'.format(100*acc))","a86a815d":"model.load_weights(checkpoint_path)\nloss, acc = model.evaluate(test_images, test_labels)\nprint('Restored model, accuracy: {:5.2f}%'.format(100*acc))","a552ebf4":"# include the epoch in the file name. (use `str.format`)\ncheckpoint_path = 'training_2\/cp-{epoch:04d}.ckpt'\ncheckpoint_dir = os.path.dirname(checkpoint_path)\n\ncp_callback =  tf.keras.callbacks.ModelCheckpoint(checkpoint_path,\n                                                 verbose=1,\n                                                 save_weights_only=True,\n                                                 period=5) #  save weights everry 5 epochs\n\nmodel = create_model()\nmodel.save_weights(checkpoint_path.format(epoch=0))\nmodel.fit(train_images, train_labels,\n         epochs=50, callbacks=[cp_callback],\n         validation_data =  (test_images, test_labels),\n         verbose=0)","a22f848a":"!ls {checkpoint_dir}","9106207a":"latest = tf.train.latest_checkpoint(checkpoint_dir)\nlatest","9ca6f397":"# save the weights\nmodel.save_weights('.\/checkpoints\/my_checkpoint')\n\n# restore the weights\nmodel = create_model()\nmodel.load_weights('.\/checkpoints\/my_checkpoint')\n\nloss, acc = model.evaluate(test_images, test_labels)\nprint('Restored model, accuracy: {:5.2f}%'.format(100*acc))","6e97cf20":"model = create_model()\n\n# You need to use a keras.optimizer to restore the optimizer state from and HDF5 file.\nmodel.compile(optimizer='adam',\n             loss=tf.keras.losses.sparse_categorical_crossentropy,\n             metrics=['accuracy'])\n\nmodel.fit(train_images, train_labels, epochs=5)\n\n# save entire model to a HDF5 file\nmodel.save('my_model.h5')","032fd08a":"# Recreate the exact same model, including weights and optimizer.\nnew_model = keras.models.load_model('my_model.h5')\nnew_model.summary()","dedff86a":"loss, acc = new_model.evaluate(test_images, test_labels)\nprint('Restored model, accuracy: {:5.2f}%'.format(100*acc))","a9dfaa2a":"## Save the entire model\n\nThe entire model can be saved to a file taht contains the weight values, the model's configuration, and even the optimizer's configuration (depends on set up). This allows you to checkpoint a model and resume training later -  from the exact same state - without access to the original code.\n\nSaving a full-functional model is very useful - you can load them in TensorFlow.js ([HDF5](https:\/\/js.tensorflow.org\/tutorials\/import-keras.html), [Saved Model](https:\/\/js.tensorflow.org\/tutorials\/import-saved-model.html)) and then train and run them in web browsers, or convert them to run on mobile devices using TensorFlow lite ([HDF5](https:\/\/www.tensorflow.org\/lite\/convert\/python_api#exporting_a_tfkeras_file_), [Saved Model](https:\/\/www.tensorflow.org\/lite\/convert\/python_api#exporting_a_savedmodel_)).\n\n### As an HDF5 file\n\nKeras provides a basic save format using the [HDF5](https:\/\/en.wikipedia.org\/wiki\/Hierarchical_Data_Format) standard. For our purposes, the saved model can be treated as a single binary blob.","aa7fef21":"## Manually save weights\n\nAbove you saw how to load the weights into a model.\n\nManually saving the weights is just as simple, use the `Model.save_weights` method.","cce28f46":"NOTE: I rewrite various notebooks because that's how I learn. I do it on Kaggle because I like their community and other features. Please use and credit original source.\n\nSource: https:\/\/github.com\/tensorflow\/docs\/blob\/master\/site\/en\/r2\/tutorials\/keras\/save_and_restore_models.ipynb","23ddee88":"### Get an example dataset\n\nWe'll use the [MNIST dataset](http:\/\/yann.lecun.com\/exdb\/mnist\/) to train out model to demonstraate saving weights. To speed up these demonstration runs, only usee the first 1000 examples:","22374cd6":"Create a new, untrained model. When restoring a model from only weights, you must have a model with the same architecture as the original model. Since it's the same model architecture, we can share weights despite that it's a different *instance* of the model.\n\nNow rebuild a fresh, untrained model, and evaluate it on the test set. An untrained model will perform at chance levels (~10% accuracy):","a37d397b":"Note: the default tensorflow format only saves the 5 most recent checkpoints.\n\nTo test, reset the model and load the latest checkpoint:","b79650e2":"### Define a model\n\nLet's build a simple model we'll use to demonstrate saving and loading weights.","a4267c31":"## Save checkpoints during training\n\nThe primary use case is to automatically save checkpoints *during* and at the *end* of training.  This way you can use a trained model without having to retrain it, or pick-up training where you left off - in caes the training process was interrupted.\n\n`tf.keras.callbacks.ModelCheckpoint` is a callback that performs this task. This callback takes a couple of arguments to configure checkpointing.\n\n### Checkpointing callback usage\n\nTrain the model and pass it the `ModelCheckpoint` callback.","c71ae9f8":"# What's Next\n\nThat was a quick guide to saving and loading with `tf.keras`\n\n- The [tf.keras guide](https:\/\/www.tensorflow.org\/guide\/keras) shows more about saving and loading models with `tf.keras`\n- See [Saving in eager](https:\/\/www.tensorflow.org\/guide\/eager#object_based_saving) for saving during eager execution\n- The [Save and Restore](https:\/\/www.tensorflow.org\/guide\/saved_model) guide has low-level details about TensorFlow saving.","5b3f2b63":"This creates a single collection of TensorFlow checkpoint files that are updated at the end of each epoch:","b1606cdf":"### Checkpoint callback options\n\nThe callback provides several  options to give the resulting checkpoints unique names, and adjust the checkpointing frequency.\n\nTrain a new model, and save uniquely named checkpoints every 5-epochs:","b8639c0b":"## What are these files?\n\nThe above code stores the weights to a collection of [checkpoint](https:\/\/www.tensorflow.org\/guide\/saved_model#save_and_restore_variables)-formatted files that contain only the trained weights in a binary format. Checkpoint contain:\n- One or moree shards that contain your model's weights\n- An index file that indicates whcih weights are stored in which shard.\n\nIf you are only training a model on a single machine, you'll have one shard with the suffix: `.data-00000-of-00001`","a96d6be7":"Now recreate the model from that file:","121e426a":"Check it's accuracy:","856d350a":"Then load the weights from the checkpoint, and re-evaluate:","a975e3fe":"Now, look at the resulting checkpoints and choose the latest one:","1e2afe3a":"# Save and restore models\n\nModel progress can be saved during - and after - training. This means a model can resume where it left off and avoid long training times. Saving also means you can share your model and others can recreate your work. When publishing research models and techniques, most machine learning practitioners share:\n- code to create the model, and\n- the trained weights, or parameters, for the model\n\nSharing this data helps others understand how the model works and try it themselves with new data.\n\nCaution: Be careful with untrusted code - TensorFlow models are code. See [Using TensorFlow Securely](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for details.\n\n### Options\nThere are different ways to save TensorFlow models - depending on the API you're using. This guide uses [tf.keras](https:\/\/www.tensorflow.org\/guide\/keras), a high-level API to build and train models in TensorFlow. For other approaches, see the TensorFlow [Save and Restore](https:\/\/www.tensorflow.org\/guide\/saved_model) guide or [Saving in eager](https:\/\/www.tensorflow.org\/guide\/eager#object_based_saving).\n\n## Setup\n\n### Installs and imports\n\nInstall and import TensorFlow and dependencies:","c189dcd1":"This technique saves everything:\n- The weight values\n- The model's configuration (architecture)\n- The optimizer configuration\n\nKeras saves models by inspecting the architecture. Currently, it is not able to save TensorFlow optimizers (from `tf.train`). When using those, you will need to re-compile the model after loading, and you will loose the state of the optimizer."}}