{"cell_type":{"8afaea0c":"code","b41cf5be":"code","7df82068":"code","3ec4c07f":"code","83c184f1":"code","ecfe4021":"code","4ff49e37":"code","b785e72e":"code","06aad94e":"code","1b16ed63":"code","d44d6d88":"code","3b989623":"code","e321a95d":"code","79f2a542":"code","04c18f2d":"code","c9fe1b7f":"code","0f87ed83":"code","5db511e6":"code","65404ea6":"code","f5d84f5e":"code","9e3a4841":"code","28a73ffa":"code","0d06f0a1":"code","c39a926c":"code","1c6da6f6":"code","aef2c084":"code","0fbf47c9":"code","2486ad47":"code","b0983be4":"code","4fca31e1":"code","8ca38b71":"code","d05f093a":"code","8b3a6f65":"code","2a370495":"code","4c5f7539":"code","8b47eed3":"code","dc9d81d6":"code","c01c6cae":"code","760fcadb":"code","8d23ab4f":"code","8cb341fa":"code","8d9023a0":"code","a3346099":"code","a62d4830":"code","1237f573":"code","b74ec316":"code","b834009c":"code","7d2b401b":"code","6287a636":"code","d6ee7faf":"code","181ea662":"code","c0b7200e":"code","edff2378":"code","ada71af2":"code","7837cabd":"code","1524726d":"code","882248fa":"code","71cbd4a4":"code","92bf43d8":"code","f9a59991":"code","b177e0be":"code","e9641e69":"code","0b45c640":"code","d438742b":"markdown","7166ca34":"markdown","d1a9cb4c":"markdown","bb0dd414":"markdown","bfaa8fbf":"markdown","90b4f226":"markdown","021dd98b":"markdown","18545d93":"markdown","8af4df96":"markdown","cd677ff3":"markdown","24c9827c":"markdown","8425e319":"markdown","078101af":"markdown","0e64d09f":"markdown","f724cf01":"markdown","18108516":"markdown","fc510e37":"markdown","1c280842":"markdown","8dfe2e22":"markdown","59519665":"markdown","76909f7a":"markdown","2ddb54c6":"markdown","98e7bf6c":"markdown","a0614eb8":"markdown","a41d5f86":"markdown","ea3bb922":"markdown","75e9209b":"markdown","8310a686":"markdown","c57dac77":"markdown","adc75039":"markdown","175af182":"markdown","0b8eb5fa":"markdown","eed031b2":"markdown","34f08774":"markdown","03b40e40":"markdown","36574d7f":"markdown","4f940cb8":"markdown","9e853f58":"markdown","205eda74":"markdown","7227e36f":"markdown"},"source":{"8afaea0c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nplt.style.use('fast')\n!pip install missingno\nimport missingno as msngno \n%matplotlib inline\nimport ast\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nimport warnings\nwarnings.filterwarnings('ignore')","b41cf5be":"train = pd.read_csv('..\/input\/tmdb-box-office-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/tmdb-box-office-prediction\/test.csv')\ntrain_extra = pd.read_csv('..\/input\/tmdb-competition-additional-features\/TrainAdditionalFeatures.csv')\ntest_extra = pd.read_csv('..\/input\/tmdb-competition-additional-features\/TestAdditionalFeatures.csv')\n\ntrain = pd.merge(train, train_extra, how='left', on=['imdb_id'])\ntest = pd.merge(test, test_extra, how='left', on=['imdb_id'])\n\n","7df82068":"train.shape, test.shape","3ec4c07f":"train_extra.shape, test_extra.shape","83c184f1":"train.head()","ecfe4021":"sum(train.duplicated()), sum(test.duplicated())","4ff49e37":"train.loc[train['id'] == 16,'revenue'] = 192864          # Skinning\ntrain.loc[train['id'] == 90,'budget'] = 30000000         # Sommersby          \ntrain.loc[train['id'] == 118,'budget'] = 60000000        # Wild Hogs\ntrain.loc[train['id'] == 149,'budget'] = 18000000        # Beethoven\ntrain.loc[train['id'] == 313,'revenue'] = 12000000       # The Cookout \ntrain.loc[train['id'] == 451,'revenue'] = 12000000       # Chasing Liberty\ntrain.loc[train['id'] == 464,'budget'] = 20000000        # Parenthood\ntrain.loc[train['id'] == 470,'budget'] = 13000000        # The Karate Kid, Part II\ntrain.loc[train['id'] == 513,'budget'] = 930000          # From Prada to Nada\ntrain.loc[train['id'] == 797,'budget'] = 8000000         # Welcome to Dongmakgol\ntrain.loc[train['id'] == 819,'budget'] = 90000000        # Alvin and the Chipmunks: The Road Chip\ntrain.loc[train['id'] == 850,'budget'] = 90000000        # Modern Times\ntrain.loc[train['id'] == 1007,'budget'] = 2              # Zyzzyx Road \ntrain.loc[train['id'] == 1112,'budget'] = 7500000        # An Officer and a Gentleman\ntrain.loc[train['id'] == 1131,'budget'] = 4300000        # Smokey and the Bandit   \ntrain.loc[train['id'] == 1359,'budget'] = 10000000       # Stir Crazy \ntrain.loc[train['id'] == 1542,'budget'] = 1              # All at Once\ntrain.loc[train['id'] == 1570,'budget'] = 15800000       # Crocodile Dundee II\ntrain.loc[train['id'] == 1571,'budget'] = 4000000        # Lady and the Tramp\ntrain.loc[train['id'] == 1714,'budget'] = 46000000       # The Recruit\ntrain.loc[train['id'] == 1721,'budget'] = 17500000       # Cocoon\ntrain.loc[train['id'] == 1865,'revenue'] = 25000000      # Scooby-Doo 2: Monsters Unleashed\ntrain.loc[train['id'] == 1885,'budget'] = 12             # In the Cut\ntrain.loc[train['id'] == 2091,'budget'] = 10             # Deadfall\ntrain.loc[train['id'] == 2268,'budget'] = 17500000       # Madea Goes to Jail budget\ntrain.loc[train['id'] == 2491,'budget'] = 6              # Never Talk to Strangers\ntrain.loc[train['id'] == 2602,'budget'] = 31000000       # Mr. Holland's Opus\ntrain.loc[train['id'] == 2612,'budget'] = 15000000       # Field of Dreams\ntrain.loc[train['id'] == 2696,'budget'] = 10000000       # Nurse 3-D\ntrain.loc[train['id'] == 2801,'budget'] = 10000000       # Fracture\ntrain.loc[train['id'] == 335,'budget'] = 2 \ntrain.loc[train['id'] == 348,'budget'] = 12\ntrain.loc[train['id'] == 470,'budget'] = 13000000 \ntrain.loc[train['id'] == 513,'budget'] = 1100000\ntrain.loc[train['id'] == 640,'budget'] = 6 \ntrain.loc[train['id'] == 696,'budget'] = 1\ntrain.loc[train['id'] == 797,'budget'] = 8000000 \ntrain.loc[train['id'] == 850,'budget'] = 1500000\ntrain.loc[train['id'] == 1199,'budget'] = 5 \ntrain.loc[train['id'] == 1282,'budget'] = 9               # Death at a Funeral\ntrain.loc[train['id'] == 1347,'budget'] = 1\ntrain.loc[train['id'] == 1755,'budget'] = 2\ntrain.loc[train['id'] == 1801,'budget'] = 5\ntrain.loc[train['id'] == 1918,'budget'] = 592 \ntrain.loc[train['id'] == 2033,'budget'] = 4\ntrain.loc[train['id'] == 2118,'budget'] = 344 \ntrain.loc[train['id'] == 2252,'budget'] = 130\ntrain.loc[train['id'] == 2256,'budget'] = 1 \ntrain.loc[train['id'] == 2696,'budget'] = 10000000\n\n\ntest.loc[test['id'] == 6733,'budget'] = 5000000\ntest.loc[test['id'] == 3889,'budget'] = 15000000\ntest.loc[test['id'] == 6683,'budget'] = 50000000\ntest.loc[test['id'] == 5704,'budget'] = 4300000\ntest.loc[test['id'] == 6109,'budget'] = 281756\ntest.loc[test['id'] == 7242,'budget'] = 10000000\ntest.loc[test['id'] == 7021,'budget'] = 17540562       #  Two Is a Family\ntest.loc[test['id'] == 5591,'budget'] = 4000000        # The Orphanage\ntest.loc[test['id'] == 4282,'budget'] = 20000000       # Big Top Pee-wee\ntest.loc[test['id'] == 3033,'budget'] = 250 \ntest.loc[test['id'] == 3051,'budget'] = 50\ntest.loc[test['id'] == 3084,'budget'] = 337\ntest.loc[test['id'] == 3224,'budget'] = 4  \ntest.loc[test['id'] == 3594,'budget'] = 25  \ntest.loc[test['id'] == 3619,'budget'] = 500  \ntest.loc[test['id'] == 3831,'budget'] = 3  \ntest.loc[test['id'] == 3935,'budget'] = 500  \ntest.loc[test['id'] == 4049,'budget'] = 995946 \ntest.loc[test['id'] == 4424,'budget'] = 3  \ntest.loc[test['id'] == 4460,'budget'] = 8  \ntest.loc[test['id'] == 4555,'budget'] = 1200000 \ntest.loc[test['id'] == 4624,'budget'] = 30 \ntest.loc[test['id'] == 4645,'budget'] = 500 \ntest.loc[test['id'] == 4709,'budget'] = 450 \ntest.loc[test['id'] == 4839,'budget'] = 7\ntest.loc[test['id'] == 3125,'budget'] = 25 \ntest.loc[test['id'] == 3142,'budget'] = 1\ntest.loc[test['id'] == 3201,'budget'] = 450\ntest.loc[test['id'] == 3222,'budget'] = 6\ntest.loc[test['id'] == 3545,'budget'] = 38\ntest.loc[test['id'] == 3670,'budget'] = 18\ntest.loc[test['id'] == 3792,'budget'] = 19\ntest.loc[test['id'] == 3881,'budget'] = 7\ntest.loc[test['id'] == 3969,'budget'] = 400\ntest.loc[test['id'] == 4196,'budget'] = 6\ntest.loc[test['id'] == 4221,'budget'] = 11\ntest.loc[test['id'] == 4222,'budget'] = 500\ntest.loc[test['id'] == 4285,'budget'] = 11\ntest.loc[test['id'] == 4319,'budget'] = 1\ntest.loc[test['id'] == 4639,'budget'] = 10\ntest.loc[test['id'] == 4719,'budget'] = 45\ntest.loc[test['id'] == 4822,'budget'] = 22\ntest.loc[test['id'] == 4829,'budget'] = 20\ntest.loc[test['id'] == 4969,'budget'] = 20\ntest.loc[test['id'] == 5021,'budget'] = 40 \ntest.loc[test['id'] == 5035,'budget'] = 1 \ntest.loc[test['id'] == 5063,'budget'] = 14 \ntest.loc[test['id'] == 5119,'budget'] = 2 \ntest.loc[test['id'] == 5214,'budget'] = 30 \ntest.loc[test['id'] == 5221,'budget'] = 50 \ntest.loc[test['id'] == 4903,'budget'] = 15\ntest.loc[test['id'] == 4983,'budget'] = 3\ntest.loc[test['id'] == 5102,'budget'] = 28\ntest.loc[test['id'] == 5217,'budget'] = 75\ntest.loc[test['id'] == 5224,'budget'] = 3 \ntest.loc[test['id'] == 5469,'budget'] = 20 \ntest.loc[test['id'] == 5840,'budget'] = 1 \ntest.loc[test['id'] == 5960,'budget'] = 30\ntest.loc[test['id'] == 6506,'budget'] = 11 \ntest.loc[test['id'] == 6553,'budget'] = 280\ntest.loc[test['id'] == 6561,'budget'] = 7\ntest.loc[test['id'] == 6582,'budget'] = 218\ntest.loc[test['id'] == 6638,'budget'] = 5\ntest.loc[test['id'] == 6749,'budget'] = 8 \ntest.loc[test['id'] == 6759,'budget'] = 50 \ntest.loc[test['id'] == 6856,'budget'] = 10\ntest.loc[test['id'] == 6858,'budget'] =  100\ntest.loc[test['id'] == 6876,'budget'] =  250\ntest.loc[test['id'] == 6972,'budget'] = 1\ntest.loc[test['id'] == 7079,'budget'] = 8000000\ntest.loc[test['id'] == 7150,'budget'] = 118\ntest.loc[test['id'] == 6506,'budget'] = 118\ntest.loc[test['id'] == 7225,'budget'] = 6\ntest.loc[test['id'] == 7231,'budget'] = 85\ntest.loc[test['id'] == 5222,'budget'] = 5\ntest.loc[test['id'] == 5322,'budget'] = 90\ntest.loc[test['id'] == 5350,'budget'] = 70\ntest.loc[test['id'] == 5378,'budget'] = 10\ntest.loc[test['id'] == 5545,'budget'] = 80\ntest.loc[test['id'] == 5810,'budget'] = 8\ntest.loc[test['id'] == 5926,'budget'] = 300\ntest.loc[test['id'] == 5927,'budget'] = 4\ntest.loc[test['id'] == 5986,'budget'] = 1\ntest.loc[test['id'] == 6053,'budget'] = 20\ntest.loc[test['id'] == 6104,'budget'] = 1\ntest.loc[test['id'] == 6130,'budget'] = 30\ntest.loc[test['id'] == 6301,'budget'] = 150\ntest.loc[test['id'] == 6276,'budget'] = 100\ntest.loc[test['id'] == 6473,'budget'] = 100\ntest.loc[test['id'] == 6842,'budget'] = 30","b785e72e":"train.isna().sum()","06aad94e":"test.isna().sum()","1b16ed63":"missing_values=train.isna().sum().sort_values(ascending=False)\nsns.barplot(missing_values[:10],missing_values[:10].index,palette=\"rocket\")\nplt.show()\n\nmissing_values1=test.isna().sum().sort_values(ascending=False)\nsns.barplot(missing_values1[:10],missing_values1[:10].index,palette=\"rocket\")\nplt.show()","d44d6d88":"msngno.bar(train)","3b989623":"msngno.heatmap(train)","e321a95d":"train.describe()","79f2a542":"dict_columns = ['belongs_to_collection', 'genres', 'production_companies',\n                'production_countries', 'spoken_languages', 'Keywords', 'cast', 'crew']\n\ndef text_to_dict(df):\n    for column in dict_columns:\n        df[column] = df[column].apply(lambda x: {} if pd.isna(x) else ast.literal_eval(x) )\n    return df\n        \ntrain = text_to_dict(train)\ntest = text_to_dict(test)","04c18f2d":"for count,value in enumerate(train['belongs_to_collection'][:2]):\n    print(count,value)\n\nfor count,value in enumerate(test['genres'][:2]):\n    print(count,value)\n    \nfor count,value in enumerate(train['genres'][:2]):\n    print(count,value)\n    \nfor count,value in enumerate(train['spoken_languages'][:2]):\n    print(count,value)\n    \nfor count,value in enumerate(train['Keywords'][:2]):\n    print(count,value)\n    \nfor count,value in enumerate(train['production_countries'][:2]):\n    print(count,value)\n    \nfor count,value in enumerate(train['production_companies'][:2]):\n    print(count,value)\n    \nfor count,value in enumerate(train['cast'][:2]):\n    print(count,value)\n    \nfor count,value in enumerate(train['crew'][:2]):\n    print(count,value)","c9fe1b7f":"train['release_year']=pd.to_datetime(train['release_date']).dt.year\ntrain['release_month']=pd.to_datetime(train['release_date']).dt.month\ntrain['release_day']=pd.to_datetime(train['release_date']).dt.dayofweek\n\n\ntest['release_year']=pd.to_datetime(test['release_date']).dt.year\ntest['release_month']=pd.to_datetime(test['release_date']).dt.month\ntest['release_day']=pd.to_datetime(test['release_date']).dt.dayofweek\n","0f87ed83":"train['rating']=train['rating'].fillna(train['rating'].mean())\ntest['rating']=test['rating'].fillna(test['rating'].mean())\n\ntrain['totalVotes']=train['totalVotes'].fillna(train['totalVotes'].mean())\ntrain['totalVotes']=train['totalVotes'].round()\ntest['totalVotes']=test['totalVotes'].fillna(test['totalVotes'].mean())\ntest['totalVotes']=test['totalVotes'].round()\n\ntrain['runtime']=train['runtime'].fillna(train['runtime'].mean())\ntest['runtime']=test['runtime'].fillna(test['runtime'].mean())","5db511e6":"train.head()","65404ea6":"train['numberofgenres']=train['genres'].apply(lambda x: len(x) if x != {} else 0)\ntrain['nameofcollection'] = train['belongs_to_collection'].apply(lambda x: x[0]['name'] if x != {} else 0)\ntrain['genres_info'] = train['genres'].apply(lambda x: x[0]['name'] if x != {} else 0)\ntrain['language'] = train['spoken_languages'].apply(lambda x: x[0]['name'] if x != {} else 0)\ntrain['production_country'] = train['production_countries'].apply(lambda x: x[0]['name'] if x != {} else 0)\ntrain['production_company'] = train['production_companies'].apply(lambda x: x[0]['name'] if x != {} else 0)","f5d84f5e":"test['numberofgenres']=train['genres'].apply(lambda x: len(x) if x != {} else 0)\ntest['numberofgenres']=test['numberofgenres'].replace(np.nan,0)\ntest['nameofcollection'] = test['belongs_to_collection'].apply(lambda x: x[0]['name'] if x != {} else 0)\ntest['genres_info'] = test['genres'].apply(lambda x: x[0]['name'] if x != {} else 0)\ntest['language'] = test['spoken_languages'].apply(lambda x: x[0]['name'] if x != {} else 0)\ntest['production_country'] = test['production_countries'].apply(lambda x: x[0]['name'] if x != {} else 0)\ntest['production_company'] = test['production_companies'].apply(lambda x: x[0]['name'] if x != {} else 0)","9e3a4841":"train = train.astype({\"budget\":'Int32',})\nfig, ax = plt.subplots(1,2,figsize=(12,5))\nsns.distplot(train['budget'],ax=ax[0],color='black')\nsns.distplot(np.log1p(train['budget']),ax=ax[1],color='black')\n","28a73ffa":"fig, ax = plt.subplots(1,2,figsize=(12,5))\nsns.distplot(train['revenue'],ax=ax[0],color='black')\nsns.distplot(np.log(train['revenue']),ax=ax[1],color='black')\n","0d06f0a1":"train['lang_english']=0\ntrain.loc[train['original_language'].astype(str)==\"en\",\"lang_english\"]=1\n\ntrain['bud_runtime']=(train['budget']+1)\/(train['runtime']+1)\n\ntrain['bud_year']=(train['budget']+1)\/(train['release_year']+1)\n\ntrain['bud_popularity']=(train['budget']+1)\/(train['popularity']+1)\n\ntrain['runtime_year']=(train['runtime']+1)\/(train['release_year']+1)\n\ntrain['popularity_year']=(train['popularity']+1)\/(train['release_year']+1)","c39a926c":"test['lang_english']=0\ntest.loc[test['original_language'].astype(str)==\"en\",\"lang_english\"]=1\n\ntest['bud_runtime']=(test['budget']+1)\/(test['runtime']+1)\n\ntest['bud_year']=(test['budget']+1)\/(test['release_year']+1)\n\ntest['bud_popularity']=(test['budget']+1)\/(test['popularity']+1)\n\ntest['runtime_year']=(test['runtime']+1)\/(test['release_year']+1)\n\ntest['popularity_year']=(test['popularity']+1)\/(test['release_year']+1)","1c6da6f6":"train['homepage'] = train['homepage'].fillna(0)\ntrain['homepage'] = train['homepage'].apply(lambda x: 0 if x==0 else 1)\n\ntrain['overview'] = train['overview'].fillna(0)\ntrain['overview'] = train['overview'].apply(lambda x: 0 if x==0 else 1)\n\ntrain['poster_path'] = train['poster_path'].fillna(0)\ntrain['poster_path'] = train['poster_path'].apply(lambda x: 0 if x==0 else 1)\n\ntrain['tagline'] = train['tagline'].fillna(0)\ntrain['tagline'] = train['tagline'].apply(lambda x: 0 if x==0 else 1)\n","aef2c084":"test['homepage'] = test['homepage'].fillna(0)\ntest['homepage'] = test['homepage'].apply(lambda x: 0 if x==0 else 1)\n\ntest['overview'] = test['overview'].fillna(0)\ntest['overview'] = test['overview'].apply(lambda x: 0 if x==0 else 1)\n\ntest['poster_path'] = test['overview'].fillna(0)\ntest['poster_path'] = test['poster_path'].apply(lambda x: 0 if x==0 else 1)\n\ntest['tagline'] = test['tagline'].fillna(0)\ntest['tagline'] = test['tagline'].apply(lambda x: 0 if x==0 else 1)","0fbf47c9":"train.isna().sum()","2486ad47":"test.isna().sum()","b0983be4":"test['release_year']=test['release_year'].fillna(test['release_year'].mode()[0])\ntest['release_month']=test['release_month'].fillna(test['release_month'].mode()[0])\ntest['release_day']=test['release_day'].fillna(test['release_day'].mode()[0])\n\ntest['bud_year']=test['bud_year'].fillna(test['bud_year'].mean())\n\ntest['popularity_year']=test['popularity_year'].fillna(test['popularity_year'].mean())\n\ntest['runtime_year']=test['runtime_year'].fillna(test['runtime_year'].mean())","4fca31e1":"train.groupby('release_year')['revenue'].mean().plot(color='black')\nplt.xlabel('Release_year',fontsize = 10)\nplt.ylabel('Revenue',fontsize = 10);\nplt.title(\"Release Year vs Revenue\")","8ca38b71":"train =train.loc[(train['release_year']<=2020)]","d05f093a":"train.groupby('release_year')['revenue'].mean().plot(color='black')\nplt.xticks(np.arange(1970,2020,4),rotation=45)\nplt.xlabel('Release_year',fontsize = 10)\nplt.ylabel('Revenue',fontsize = 10);\nplt.title(\"Release Year vs Revenue\")","8b3a6f65":"train.groupby('release_month')['revenue'].mean().plot(color='black')\nplt.xlabel('Release_month',fontsize = 10)\nplt.ylabel('Revenue',fontsize = 10)\nplt.title(\"Release Month vs Revenue\")","2a370495":"train.groupby('release_day')['revenue'].mean().plot(color='black')\nplt.xlabel('Release_day',fontsize = 10)\nplt.ylabel('Revenue',fontsize = 10)\nplt.title(\"Release Day vs Revenue\")","4c5f7539":"plt.figure(figsize=(20,10))\nsns.countplot(x='release_year',data=train,palette=\"rocket\")\nplt.title(\"Movie Released VS Year\",fontsize=15)\nloc, labels = plt.xticks()\nplt.xlabel('Year',fontsize = 10)\nplt.ylabel('Number of Movies',fontsize = 10)\nplt.xticks(fontsize=15,rotation='vertical')\nplt.show()","8b47eed3":"plt.figure(figsize=(10,10))\nsns.countplot(x='release_day',data=train,palette=\"rocket\")\nloc, labels = plt.xticks()\nloc, labels = loc, ['Monday','Tuesday','Wednesday','Thursday',\"Friday\",\"Saturday\",\"Sunday\"]\nplt.xticks(loc, labels,fontsize=15)\nplt.xlabel('Release_day',fontsize = 10)\nplt.ylabel('Number of Movies',fontsize = 10)\nplt.title(\"Movies released VS Day of week\",fontsize=15)\nplt.show()","dc9d81d6":"train[['budget','revenue']].plot(kind='scatter',x='budget',y='revenue',figsize=(12,8))\nplt.title(\"Revenue VS Budget\",fontsize=15)\nplt.xlabel('Budget',fontsize = 10)\nplt.ylabel('Revenue',fontsize = 10)\nplt.show()","c01c6cae":"plt.figure(figsize=(10,5))\nsns.catplot(x='status', y='revenue', data=train,palette='rocket')\nplt.title('Revenue of movies VS Status',fontsize=13);\nplt.show()","760fcadb":"train.describe()","8d23ab4f":"train = train.drop(['belongs_to_collection','genres','production_companies','nameofcollection','imdb_id','overview','poster_path','tagline','original_title','original_language','release_date','language','production_countries','cast','spoken_languages',\n                    'Keywords', 'status','genres_info','production_company','production_country','title','crew','popularity2'], axis=1)\n\ntest = test.drop(['belongs_to_collection','genres','production_companies','nameofcollection','imdb_id','overview','poster_path','tagline','original_title','original_language','release_date','language','production_countries','cast','spoken_languages',\n                    'Keywords', 'status','genres_info','production_company','production_country','title','crew','popularity2'], axis=1)\n","8cb341fa":"gridpl = sns.PairGrid(data= train,vars = ['revenue', 'totalVotes', 'popularity'], size = 3)\n\ngridpl = gridpl.map_upper(plt.scatter, color = 'black')\ngridpl = gridpl.map_diag(plt.hist, bins = 15, color = 'black', edgecolor = 'k')\ngridpl = gridpl.map_lower(sns.kdeplot, cmap = 'Reds')\n","8d9023a0":"test['budget']=np.log1p(test['budget'])\ntrain['budget']=np.log1p(train['budget'])\n\ntrain['revenue']=np.log1p(train['revenue'])","a3346099":"train.head()","a62d4830":"test.head()","1237f573":"train.corr().revenue","b74ec316":"y=train.revenue\nX=train.drop( columns= ['revenue'])","b834009c":"X.shape,y.shape,test.shape","7d2b401b":"from sklearn.model_selection import train_test_split\nX_train,X_val,y_train,y_val= train_test_split(X,y,test_size=0.2,random_state=39)","6287a636":"from sklearn.linear_model import LinearRegression\nlr_model=LinearRegression()\nlr_model.fit(X_train,y_train)\nlr_pred=lr_model.predict(X_val)","d6ee7faf":"lr_rmse= mean_squared_error(y_val, lr_pred, squared=False)\nlr_rmse","181ea662":"corr = train.corr()\ncorr.style.background_gradient(cmap='coolwarm')","c0b7200e":"lr_model.fit(X,y)\nlr_pred_full = lr_model.predict(test)\nlr_pred_full = np.exp(lr_pred_full)\nrand_lr = pd.DataFrame(lr_pred_full)\n\nlinear_regression = pd.concat([test[\"id\"],rand_lr], axis =1)\nlinear_regression.columns = ['id', 'revenue']\nlinear_regression.to_csv(r'linear_regression.csv',index = False)\n","edff2378":"reg = LinearRegression().fit(X, y)\nfor i,j in zip(reg.coef_, train.columns):\n    print(i,j)","ada71af2":"from sklearn.ensemble import RandomForestRegressor\nrfr_model = RandomForestRegressor(random_state=42, \n                                  max_features='auto', \n                                  n_estimators= 50, \n                                  min_samples_leaf=2)\nrfr_model.fit(X_train,y_train)\nrfr_pred = rfr_model.predict(X_val)","7837cabd":"rfr_rmse= mean_squared_error(y_val, rfr_pred, squared=False)\nrfr_rmse","1524726d":"rfr_model.fit(X,y)\nrfr_pred_full = rfr_model.predict(test)\nrfr_pred_full = np.exp(rfr_pred_full)\nrand_rf = pd.DataFrame(rfr_pred_full)\n\nrandom_forest = pd.concat([test[\"id\"],rand_rf], axis =1)\nrandom_forest.columns = ['id', 'revenue']\nrandom_forest.to_csv(r'random_forest.csv',index = False)\n","882248fa":"import xgboost as xgb\nxgb_model = xgb.XGBRegressor(objective = 'reg:linear',\n                                  eta = 0.01,\n                                  max_depth = 3,\n                                  min_child_weight = 3,\n                                  subsample = 0.8,\n                                  gamma = 1.45,\n                                  colsample_bytree = 0.7,\n                                  eval_metric = 'rmse',\n                                  seed = 42,\n                                  n_estimators = 3000)","71cbd4a4":"xgb_model.fit(X_train, y_train)\nxgb_pred = xgb_model.predict(X_val)\nxgb_rmse= mean_squared_error(y_val, xgb_pred, squared=False)\nxgb_rmse","92bf43d8":"# from sklearn.model_selection import GridSearchCV\n# from xgboost.sklearn import XGBRegressor\n\n\n# xgb = XGBRegressor()\n# parameters = {\n#               'objective':['reg:linear'],\n#               'eta': [0.01, 0.03, 0.05, 0.07], \n#               'max_depth': [3, 5, 6, 7],\n#               'min_child_weight': [3, 4, 5],\n#               'subsample': [0.6, 0.7, 0.8],\n#               'colsample_bytree': [0.5, 0.6, 0.7],\n#               'eval_metric': ['rmse'],\n#               'n_estimators': [1000,2000,3000,3500] }\n\n# xgb_grid = GridSearchCV(xgb,parameters,cv = 2,n_jobs = 5,verbose=True)\n\n# xgb_grid.fit(X,y)\n\n# print(xgb_grid.best_score_)\n# print(xgb_grid.best_params_)","f9a59991":"xgb_model.fit(X, y)\nxgb_pred_full = xgb_model.predict(test)\nxgb_pred_full = np.exp(xgb_pred_full)\nrand_xgb = pd.DataFrame(xgb_pred_full)\n\nxgb = pd.concat([test[\"id\"],rand_xgb], axis =1)\nxgb.columns =['id', 'revenue']\nxgb.to_csv(r'xgb.csv',index = False)","b177e0be":"import lightgbm as lgb\nlgb_model = lgb.LGBMRegressor(objective='regression',num_leaves=1023,\n                              learning_rate=0.005, n_estimators=650,\n                              max_bin=58, bagging_fraction=0.80,max_depth=10,\n                              bagging_freq=5, feature_fraction=0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf=7, min_sum_hessian_in_leaf=11)\n","e9641e69":"lgb_model.fit(X_train, y_train)\nlgb_pred = lgb_model.predict(X_val)\nlgb_rmse= mean_squared_error(y_val, lgb_pred, squared=False)\nlgb_rmse","0b45c640":"lgb_model.fit(X, y)\nlgb_pred_full = lgb_model.predict(test)\nlgb_pred_full = np.exp(lgb_pred_full)\nrand_lgb = pd.DataFrame(lgb_pred_full)\n\nlgb = pd.concat([test[\"id\"],rand_lgb], axis =1)\nlgb.columns =['id', 'revenue']\nlgb.to_csv(r'lgb.csv',index = False)\n","d438742b":"**Exploring skewness of the Budget","7166ca34":"**Plotting the missing values to get a clear picture of how many variables have missing values","d1a9cb4c":"**The release date column was in an unstructured format and to analyse the data and it's features, I have dissolved the column in three seperate columns giving the year,month and day respectively.","bb0dd414":"Fitting the entire dataset on the model","bfaa8fbf":"**Checking the correlation of the variables with the target variable \"Revenue\"","90b4f226":"**LightBGM","021dd98b":"**Fixing the values that were missing\/wrong for the complete dataset\nThese were pre-released in the discussion section","18545d93":"**Revenue VS Budget","8af4df96":"**Various columns in the are in JSON format, converting it to dictionary","cd677ff3":"**Checking the duplicates","24c9827c":"**XGBoost","8425e319":"**Release Year VS Revenue","078101af":"**Hyperparameter Tuning - GRID Search","0e64d09f":"**Movie Released VS Day of week","f724cf01":"Fitting the entire dataset on the model","18108516":"Fitting the entire dataset on the model","fc510e37":"**Movie Released VS Year","1c280842":"**Loading the dataset, Train and Test\nI have also added additional features from an external source (both test and train)\n\n**Note: When the data is in the local machine, it is easier to load. The data was however loaded through GitHub link and it might take a while :)\n","8dfe2e22":"**Revenue of movies VS Status","59519665":"**Extracting the required data from the converted dictionary columns ","76909f7a":"**Checking for null values for both train and test dataset**","2ddb54c6":"**Imputing the missing values for Rating, TotalVotes, and Runtime by the average values in the dataset\nNOTE: The votes can't be in decimal hence I have rounded it upto the nearest integer.","98e7bf6c":"**We have revenue for the movies upto 2060!! Fishy :)","a0614eb8":"**Import all necessary libraries","a41d5f86":"**Taking the log values of \"Budget\" and \"Revenue\" in the train section and \"Budget\" in the test section as they were skewed and not normally distributed","ea3bb922":"**There were few missing values in the test as seen above in the dates section\nImputing year,month and day by the Mode and the continuous variables by the Mean","75e9209b":"**MODELLING","8310a686":"**List out the different values in the columns\nThese columns were all in JSON format and to have a clear picture I needed to look through the details of what information each column has that will be used for our modelling phase","c57dac77":"**RandomForestRegressor","adc75039":"Fitting the entire dataset on the model","175af182":"**Feature Engineering (Test and Train)","0b8eb5fa":"**Dropping down the columns","eed031b2":"**Exploring the skewness of the target variable \"Revenue\"","34f08774":"**Release Day VS Revenue","03b40e40":"**Encoding of some variables as per our requirement (Train and Test)","36574d7f":"**Mapping the plot for the number of non missing values ","4f940cb8":"**LinearRegression","9e853f58":"**Splitting the data in 80:20 (Train and Validation)","205eda74":"**Release Month VS Revenue","7227e36f":"**Visualising correlation between missing values in different columns\n(might be missing values in the same row)"}}