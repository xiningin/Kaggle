{"cell_type":{"1f7ed717":"code","9eaa9108":"code","d35ae562":"code","89943036":"code","ac26db93":"code","c310f6ee":"code","87ac4c46":"code","4bd075a0":"code","f4cbeb95":"code","68a2debc":"code","c02aa093":"code","15458476":"code","c4dadc85":"code","65cb57e7":"code","65d5d4ec":"code","bac6deb5":"code","8dde07b5":"code","4fc36a9b":"code","395762ed":"code","5c30be02":"code","82803f08":"code","d2ebe4c1":"code","4725b2ed":"code","c0b84a0b":"code","9920d281":"code","0f3bbf95":"code","8d74a510":"code","0e291a0c":"code","881848e6":"code","182dd375":"code","2a1fdefe":"code","1e884056":"code","e1cfefec":"code","852ef9f8":"code","a153a6c5":"code","e706d143":"code","4c1e508e":"code","bfb34b0d":"code","584f0f6e":"code","b847aabb":"code","101dfbd5":"code","091362c3":"code","fb862553":"code","e94f094e":"markdown","a86bb2f9":"markdown","07fc7a23":"markdown","177e2d31":"markdown","d96d2ced":"markdown","04e8ffc2":"markdown","117ac68b":"markdown","9a5f110d":"markdown","ebdb8803":"markdown","b163bd29":"markdown"},"source":{"1f7ed717":"#invite people for the Kaggle party\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error \nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import SelectFromModel\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","9eaa9108":"## read data\ntrain_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsample_submission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","d35ae562":"print(train_data.shape)\nprint(test_data.shape)","89943036":"y = train_data['SalePrice']\ny.shape","ac26db93":"describe_data = train_data.describe()\ndescribe_data","c310f6ee":"##show data\ntrain_data.head(10)","87ac4c46":"##histogram\n##draw the oytput \"y\" \n\nsns.distplot(y);","4bd075a0":"train_data.isnull().sum()","f4cbeb95":"test_data.isnull().sum()","68a2debc":"##Draw the relationship between \"LotArea\" and the output\nz = train_data['LotArea']\nprint(z.shape)\nplt.scatter(z,y)","c02aa093":"##Draw the relationship between \"TotalBsmtSF\" and the output\np = train_data['TotalBsmtSF']\nprint(z.shape)\nplt.scatter(p,y)\n","15458476":"##Draw the relationship between \"1stFlrSF\" and the output\nc = train_data['1stFlrSF']\nprint(z.shape)\nplt.scatter(c,y)","c4dadc85":"##Draw the relationship between \"GarageArea\" and the output\nu = train_data['GarageArea']\nprint(z.shape)\nplt.scatter(u,y)","65cb57e7":"categorical_features = train_data.select_dtypes([object]).columns\nnumerical_features = train_data.select_dtypes([int, float]).columns","65d5d4ec":"fig = plt.figure(figsize=(25,40)) #figure size\no = 13  # number of rows\nq = 3  # number of columns\nw = 1  # initialize plot counter\n\nfor feat in numerical_features:\n    plt.subplot(o, q, w)\n    sns.kdeplot(x=train_data[feat])\n    w+=1\n    \nplt.tight_layout()\nplt.show()","bac6deb5":"#histogram and normal probability plot\nsns.distplot(y, fit=norm);\nfig = plt.figure()\nres = stats.probplot(y, plot=plt)","8dde07b5":"y  = np.log(y)","4fc36a9b":"##transformed histogram and normal probability plot\nsns.distplot(y, fit=norm);\nfig = plt.figure()\nres = stats.probplot(y, plot=plt)","395762ed":"## delaing measing data in train_data\ntrain_data.isna().sum()[train_data.isna().sum()>0]\ntrain_data.fillna('Unknown',inplace=True)\nprint(train_data.shape)","5c30be02":"train_data.isnull().sum()","82803f08":"## delaing measing data in test_data\ntest_data.isna().sum()[test_data.isna().sum()>0]\ntest_data.fillna('Unknown',inplace=True)\nprint(test_data.shape)","d2ebe4c1":"test_data.isnull().sum()","4725b2ed":"\noe=OrdinalEncoder()\nfor col in train_data:\n    train_data[col]=oe.fit_transform(np.asarray(train_data[col].astype('str')).reshape(-1,1))\nfor col in test_data:\n    test_data[col]=oe.fit_transform(np.asarray(test_data[col].astype('str')).reshape(-1,1))","c0b84a0b":"print(train_data.shape)\nprint(test_data.shape)\nprint(y.shape)","9920d281":"test_data.head(10)","0f3bbf95":"train_data.head(10)","8d74a510":"## spliting data to X and y\n\n\nX = train_data.drop(columns = \"SalePrice\")\nprint(X.shape)\nprint(y.shape)\nprint(test_data.shape)","0e291a0c":"## Scaling Model \n## scale to train_data\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\nprint(X.shape)\n","881848e6":"## spliting data into X_train , y_train,X_test,y_test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=44, shuffle =True)","182dd375":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","2a1fdefe":"RandomForestRegressorModel = RandomForestRegressor(n_estimators=100,max_depth=5, random_state=44,min_samples_split=5,min_samples_leaf=5\n                                                ,n_jobs=-1 )\n                                                  \nRandomForestRegressorModel.fit(X_train, y_train)\n","1e884056":"#Calculating Details\nprint('Random Forest Regressor Train Score is : ' , RandomForestRegressorModel.score(X_train, y_train))\nprint('Random Forest Regressor Test Score is : ' , RandomForestRegressorModel.score(X_test, y_test))\n","e1cfefec":"#Calculating Prediction\ny_pred =  RandomForestRegressorModel.predict(X_test)\n\nprint('Predicted Value for RandomForestRegressorModelis : ' , y_pred)\n\nprint(y_pred.shape)","852ef9f8":"MAEValue = mean_absolute_error(y_test, y_pred, multioutput='uniform_average')\nprint(\"MAEValue is :\" ,MAEValue)","a153a6c5":"MSEValue= mean_squared_error(y_test, y_pred, multioutput='raw_values')\nprint(\"MSEValue is : \" , MSEValue)","e706d143":"## Knowing the best features \nsel = SelectFromModel(RandomForestRegressor( )) \nsel.fit(X,y)\nselected_features = sel.transform(X)\nsel.get_support()\n","4c1e508e":"feature_importance =  RandomForestRegressorModel.feature_importances_\nfeature_importance","bfb34b0d":"test_preds = RandomForestRegressorModel.predict(test_data)","584f0f6e":"print(test_preds.shape)","b847aabb":"print(test_data)","101dfbd5":"sample_submission ['SalePrice'] = test_preds","091362c3":"sample_submission.head(10)","fb862553":"sample_submission.to_csv('submission.csv') # convert data frame into csv file\n","e94f094e":"# **** read data","a86bb2f9":"# ****Submission","07fc7a23":"# ****convert data from string to number","177e2d31":" # ********missing data ","d96d2ced":"# ****Make Predictions","04e8ffc2":"# *****Spliting data to X_train, y_train,X_test and y_test","117ac68b":"# ****knowing the best features ","9a5f110d":"# 1.**Draw the Relationship between the numerical variable input and autput","ebdb8803":"# ****apply the RandomForestRegressor Algorithm","b163bd29":"# ****Scaling data "}}