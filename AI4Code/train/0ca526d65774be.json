{"cell_type":{"9aa50468":"code","3636d1d7":"code","df7fa837":"code","721ec597":"code","0bc1a094":"code","b7da6471":"code","a1cc950b":"code","dbbd5976":"code","6bdea9de":"code","008cc28b":"code","87a13bdc":"code","9546a080":"code","6ac0ab18":"code","b06c2855":"code","221df71b":"code","c0baf607":"code","80b5b73a":"code","170c01bc":"code","331f5ff5":"code","c2eab4e7":"code","7e125e6e":"code","f99a6a64":"code","55e10536":"code","dc707378":"code","2c5d7fd7":"code","6d84d4f2":"code","cba012f5":"code","affaf191":"code","e7aa0cb0":"code","2d400742":"code","80805654":"code","6b4357aa":"code","4632074c":"code","99aafea1":"code","a543a66d":"code","6584c70a":"code","bbf5ec3a":"code","21bb6196":"code","b4e41956":"code","23a9a775":"code","9805f713":"code","4d911064":"code","6e110f69":"code","868e7959":"code","2e8b8b3b":"code","5a24e5a2":"code","954bb652":"code","2f97ba90":"code","3c195008":"code","1d420164":"code","abfec728":"code","e23e11b5":"code","d3300f1d":"code","b90a8a58":"code","dcadc135":"code","324c9488":"markdown","1800887e":"markdown","9303e325":"markdown","34c32b1f":"markdown","062bb04d":"markdown","d62d0c5e":"markdown","d3d9abf4":"markdown","25a7e857":"markdown","758a2a87":"markdown","b32284b6":"markdown","5577138f":"markdown","ff45e9fa":"markdown","b8f3e074":"markdown","0712377e":"markdown","408bbc80":"markdown","214e03bc":"markdown","e2464e39":"markdown","3b308c73":"markdown","4e5b45eb":"markdown","d903c75c":"markdown","610bf96e":"markdown","daed5009":"markdown","3cb17ba5":"markdown","ab468afd":"markdown","157272d9":"markdown"},"source":{"9aa50468":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3636d1d7":"train = pd.read_csv('..\/input\/titanic\/train.csv')\nsubmission = pd.read_csv('..\/input\/titanic\/test.csv')","df7fa837":"train.head(2)","721ec597":"#Tamanho dos conjuntos de treinamento e teste\ntrain.shape","0bc1a094":"submission.shape","b7da6471":"#Quantidade de valores faltantes para cada atributo\ntrain.info()","a1cc950b":"train.describe()","dbbd5976":"def count_unique(df):\n  print(\"Quantidade de valores \u00fanicos para cada feature no conjunto de treinamento\")\n  for i in df.columns:\n    print(f\"{i}: {df[i].nunique()}\")","6bdea9de":"count_unique(train)","008cc28b":"columns=['PassengerId','Name','Ticket','Cabin']","87a13bdc":"train=train.drop(columns,axis=1)","9546a080":"train.head(3)","6ac0ab18":"#propor\u00e7\u00e3o do nosso target no nosso conjunto de dados\ntrain.Survived.value_counts()","b06c2855":"ax = sns.countplot(x=\"Survived\", data=train)\nplt.title('Contagem de Sobreviv\u00eancia')","221df71b":"print(f\"Considerando nosso conjunto de treinamento, {train.Survived.value_counts()[0]\/train.shape[0]*100:.2f}% dos passageiros n\u00e3o sobreviveram ao naufr\u00e1gio\")","c0baf607":"sns.countplot(data=train,hue=\"Pclass\", x='Survived')\nplt.title('Contagem de Classe')","80b5b73a":"train[['Pclass','Survived']].groupby(['Pclass']).mean()*100","170c01bc":"train[['Sex','Survived']].groupby(['Sex']).mean()*100","331f5ff5":"sns.countplot(data=train,hue=\"Sex\", x='Survived')\nplt.title('Contagem de G\u00eaneros')\n","c2eab4e7":"sns.catplot(x='Pclass',y='Survived', col='Sex', data=train, kind='bar')","7e125e6e":"sns.boxplot(train['Age']).set_title(\"idade\")","f99a6a64":"sns.distplot(train.loc[(train.Survived==0) & (train.Age.isnull()==False)]['Age'], kde=True, label='N\u00e3o Sobreviveu')\nsns.distplot(train.loc[(train.Survived==1) & (train.Age.isnull()==False)]['Age'], kde=True, label='Sobreviveu')\nplt.legend()","55e10536":"sns.catplot(x=\"Pclass\", y=\"Age\", col=\"Survived\",\n            data=train, kind=\"bar\")","dc707378":"train[['Age', 'Survived']].groupby(['Age']).mean()*100","2c5d7fd7":"median_age = train['Age'].median()","6d84d4f2":"train.loc[train['Age'].isnull(),'Age']=median_age","cba012f5":"from sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder()\ntrain['Sex'] = encoder.fit_transform(train['Sex'])","affaf191":"submission['Sex'] = encoder.fit_transform(submission['Sex'])","e7aa0cb0":"train.Sex.value_counts() #masculino = 1, feminino = 0","2d400742":"# features\nx = train[['Age', 'Sex', 'Pclass']]\n\n# target\ny = train['Survived']","80805654":"x.head()","6b4357aa":"from sklearn.model_selection import train_test_split\n\n# Separando os dados em treinamento e teste\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25, random_state=42)","4632074c":"x_test.shape","99aafea1":"x_train.shape","a543a66d":"from sklearn.tree import DecisionTreeClassifier\n\n\n# Instanciando o classificador\nmodel = DecisionTreeClassifier(criterion='entropy',random_state=42)\n\n# Treinamento do modelo\nmodel.fit(x_train,y_train)","6584c70a":"# arquivo de texto que armazena a estrutura da \u00e1rvore de decis\u00e3o\nfrom sklearn.tree import export_graphviz\nexport_graphviz(model,out_file='titanic_tree.dot',feature_names=['Age', 'Sex', 'Pclass'],rounded=True,filled=True,class_names=['Sobreviveu','N\u00e3o sobreviveu'])\n","bbf5ec3a":"!dot -Tpng titanic_tree.dot -o titanic_tree.png","21bb6196":"from IPython.core.display import Image, display\ndisplay(Image('titanic_tree.png', width=1900, unconfined=True))","b4e41956":"y_pred= model.predict(x_test)","23a9a775":"y_pred","9805f713":"from sklearn.metrics import accuracy_score","4d911064":"accuracy_score(y_test, y_pred)","6e110f69":"from sklearn.metrics import confusion_matrix\nimport itertools","868e7959":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Matriz de confus\u00e3o',\n                          cmap=plt.cm.Blues):\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n    \n    #plt.ylim(0.5, 0.5)\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    plt.ylim(1.5, -0.5) \n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('Classe real')\n    plt.xlabel('Classe prevista')\n    plt.tight_layout()","2e8b8b3b":"cnf_matrix=confusion_matrix(y_test,y_pred)","5a24e5a2":"cnf_matrix","954bb652":"plot_confusion_matrix(cnf_matrix,normalize=True, classes=['n\u00e3o sobreviveu','sobreviveu'])","2f97ba90":"# substituindo os valores faltantes pela mediana da idade do conjunto de treinamento\nsubmission.loc[submission['Age'].isnull(),'Age'] = median_age","3c195008":"# utilizamos o encoder que foi criado com base no conjunto de treinamento\nsubmission['Sex']= encoder.transform(submission['Sex'])","1d420164":"submission.head()","abfec728":"# realiza a predi\u00e7\u00e3o para o conjunto de teste\nsub_pred= model.predict(submission[['Age','Sex','Pclass']])","e23e11b5":"# transformar o array em um DataFrame para concatenar com o ID\n\nresults = pd.DataFrame(list(sub_pred),columns=['Survived'])","d3300f1d":"submission=pd.concat([submission['PassengerId'], results],axis=1)","b90a8a58":"#Estrutura final para submiss\u00e3o\nsubmission.head()","dcadc135":"#CSV\nsubmission.to_csv(\"titanic_submission.csv\",index=False)","324c9488":"5. Avaliando o modelo","1800887e":"**6. Predi\u00e7\u00e3o**","9303e325":"***3.6. Feature Engineering - Convertendo features categ\u00f3ricas***","34c32b1f":"***3.1. Sobreviv\u00eancia***","062bb04d":"***3.4. Age (idade do passageiro)***","d62d0c5e":"**1. Conhecendo o DataSet - Data Processing**","d3d9abf4":"> Os passageiros com o target igual a 0 s\u00e3o aqueles que n\u00e3o sobreviveram ao naufr\u00e1gio, enquanto que os que sobreviveram est\u00e3o com o valor 1.","25a7e857":">  Substituindo os valores faltantes pela mediana das idades.","758a2a87":"> **Interpreta\u00e7\u00e3o** \n\n> *As cores identificam a classifica\u00e7\u00e3o dada pelo modelo*\n> * N\u00f3s ou folhas em azul significam que a \u00e1rvore acha que o passageiro Morreu.\n> * N\u00f3s e folhas em laranja, a \u00e1rvore acha que o passageiro Sobreviveu.","b32284b6":"> *Fazendo as predi\u00e7\u00f5es para o conjunto sem o target e preparando CSV para submiss\u00e3o.*","5577138f":"*Modelo escolhido ser\u00e1 uma \u00c1rvore de decis\u00e3o*","ff45e9fa":"**4. Treinamento**","b8f3e074":"*Separando o conjunto de dados entre o conjunto de treinamento 75% e o restante conjunto de teste*","0712377e":"***3.5. Tratamento de valores faltantes - Missing values***","408bbc80":"> Come\u00e7ando pela acur\u00e1cia, com a m\u00e9trica de avalia\u00e7\u00e3o do Kaggle \u00e9 a acur\u00e1cia","214e03bc":"Os valores para esse atributo t\u00eam os seguintes significados:\n* 1 - Classe alta\n* 2 - Classe m\u00e9dia\n* 3 - Classe baixa","e2464e39":"***3.3. Sex - G\u00eanero do Passageiro***","3b308c73":"> Separando as features do target","4e5b45eb":"**Classifica\u00e7\u00e3o de dados - \u00c1rvore de decis\u00e3o (scikit-learn)**","d903c75c":"Verificando a relev\u00e2ncia da Classe do passageiro se comparado ao Target","610bf96e":"> Outra m\u00e9trica, a matriz de confus\u00e3o","daed5009":"**2. Remo\u00e7\u00e3o de features irrelevantes**","3cb17ba5":"***3.2. Classe do Ticket***","ab468afd":"**3. An\u00e1lise explorat\u00f3ria**","157272d9":"> Transformar em feature num\u00e9rica usando a abordagem do LabelEncoder."}}