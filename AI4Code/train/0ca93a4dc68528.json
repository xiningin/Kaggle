{"cell_type":{"d74f32ec":"code","57c6632f":"code","b81f13e4":"code","c224a4a4":"code","91fd3fe5":"code","84eed7d6":"code","f6764599":"code","da281dbf":"code","a24f2c68":"code","b653a1ca":"code","12703b9b":"code","40fcdcad":"code","ab23ab24":"code","67bab437":"code","e5c7d9a6":"code","6680ea61":"code","ff1195ef":"code","cc2a1ec2":"code","cbc46e5a":"markdown","a2bfc970":"markdown","63972977":"markdown","277465ce":"markdown","e88e3ace":"markdown","ed9b0d34":"markdown","c48b1955":"markdown","9b986663":"markdown","9b3a51af":"markdown","90a45d6f":"markdown"},"source":{"d74f32ec":"import re\nimport numpy as np\nimport collections\nfrom collections import Counter\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom bokeh.io import output_file, show\nfrom bokeh.plotting import figure\nfrom bokeh.models import ColumnDataSource, HoverTool\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\n\ndf = pd.read_csv('..\/input\/mbti_1.csv')\nprint(df.head(10))\nprint(\"*\"*40)\nprint(df.info())\n","57c6632f":"df['words_per_comment'] = df['posts'].apply(lambda x: len(x.split())\/50)\nprint(df.head())","b81f13e4":"df['words_per_comment'].mean()","c224a4a4":"plt.figure(figsize=(15,10))\nsns.violinplot(x='type', y='words_per_comment', data=df, inner=None, color='lightgray')\nsns.stripplot(x='type', y='words_per_comment', data=df, size=4, jitter=True)\nplt.ylabel('Words per comment')\nplt.show()","91fd3fe5":"df['http_per_comment'] = df['posts'].apply(lambda x: x.count('http')\/50)\ndf['music_per_comment'] = df['posts'].apply(lambda x: x.count('music')\/50)\ndf['question_per_comment'] = df['posts'].apply(lambda x: x.count('?')\/50)\ndf['img_per_comment'] = df['posts'].apply(lambda x: x.count('jpg')\/50)\ndf['excl_per_comment'] = df['posts'].apply(lambda x: x.count('!')\/50)\ndf['ellipsis_per_comment'] = df['posts'].apply(lambda x: x.count('...')\/50)\n\nplt.figure(figsize=(15,10))\nsns.jointplot(x='words_per_comment', y='ellipsis_per_comment', data=df, kind='kde')","84eed7d6":"i = df['type'].unique()\nk = 0\nfor m in range(0,2):\n    for n in range(0,6):\n        df_2 = df[df['type'] == i[k]]\n        sns.jointplot(x='words_per_comment', y='ellipsis_per_comment', data=df_2, kind=\"hex\")\n        plt.title(i[k])\n        k+=1\n","f6764599":"i = df['type'].unique()\nk = 0\nTypeArray = []\nPearArray=[]\nfor m in range(0,2):\n    for n in range(0,6):\n        df_2 = df[df['type'] == i[k]]\n        pearsoncoef1=np.corrcoef(x=df_2['words_per_comment'], y=df_2['ellipsis_per_comment'])\n        pear=pearsoncoef1[1][0]\n        print(pear)\n        TypeArray.append(i[k])\n        PearArray.append(pear)\n        k+=1\n\n\nTypeArray = [x for _,x in sorted(zip(PearArray,TypeArray))]\nPearArray = sorted(PearArray, reverse=True)\nprint(PearArray)\nprint(TypeArray)\nplt.scatter(TypeArray, PearArray)","da281dbf":"map1 = {\"I\": 0, \"E\": 1}\nmap2 = {\"N\": 0, \"S\": 1}\nmap3 = {\"T\": 0, \"F\": 1}\nmap4 = {\"J\": 0, \"P\": 1}\ndf['I-E'] = df['type'].astype(str).str[0]\ndf['I-E'] = df['I-E'].map(map1)\ndf['N-S'] = df['type'].astype(str).str[1]\ndf['N-S'] = df['N-S'].map(map2)\ndf['T-F'] = df['type'].astype(str).str[2]\ndf['T-F'] = df['T-F'].map(map3)\ndf['J-P'] = df['type'].astype(str).str[3]\ndf['J-P'] = df['J-P'].map(map4)\nprint(df.head(10))","a24f2c68":"# Random Forest\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\n\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, y_train)\nacc_random_forest = round(random_forest.score(X_train, y_train) * 100, 2)\nprint(round(acc_random_forest,2,), \"%\")","b653a1ca":"# Logistic Regression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\n\nY_pred = logreg.predict(X_test)\n\nacc_log = round(logreg.score(X_train, y_train) * 100, 2)\nprint(round(acc_log,2,), \"%\")","12703b9b":"# KNN\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\n\nY_pred = knn.predict(X_test)\n\nacc_knn = round(knn.score(X_train, y_train) * 100, 2)\nprint(round(acc_knn,2,), \"%\")","40fcdcad":"XX = df.drop(['type','posts','I-E'], axis=1).values\nyy = df['I-E'].values\n\nprint(yy.shape)\nprint(XX.shape)\n\nXX_train,XX_test,yy_train,yy_test=train_test_split(XX,yy,test_size = 0.1, random_state=5)\n\nsgdd = SGDClassifier(max_iter=5, tol=None)\nsgdd.fit(XX_train, yy_train)\nY_predd = sgdd.predict(XX_test)\nsgdd.score(XX_train, yy_train)\nacc_sgdd = round(sgdd.score(XX_train, yy_train) * 100, 2)\nprint(round(acc_sgdd,2,), \"%\")","ab23ab24":"random_forestt = RandomForestClassifier(n_estimators=100)\nrandom_forestt.fit(XX_train, yy_train)\n\nY_predictionn = random_forestt.predict(XX_test)\n\nrandom_forestt.score(XX_train, yy_train)\nacc_random_forestt = round(random_forestt.score(XX_train, yy_train) * 100, 2)\nprint(round(acc_random_forestt,2,), \"%\")","67bab437":"# Logistic Regression\nlogregg = LogisticRegression()\nlogregg.fit(XX_train, yy_train)\n\nY_predd = logregg.predict(XX_test)\n\nacc_logg = round(logregg.score(XX_train, yy_train) * 100, 2)\nprint(round(acc_logg,2,), \"%\")","e5c7d9a6":"# KNN\nknnn = KNeighborsClassifier(n_neighbors = 3)\nknnn.fit(XX_train, yy_train)\n\nY_predd = knnn.predict(XX_test)\n\nacc_knnn = round(knnn.score(XX_train, yy_train) * 100, 2)\nprint(round(acc_knnn,2,), \"%\")","6680ea61":"new_column=[]\nfor z in range(len(df['posts'])):\n    prov=df['posts'][z]\n    prov2= re.sub(r'[\u201c\u20ac\u00e2.|,?!)(1234567890:\/-]', '', prov)\n    prov3 = re.sub(r'\\w+:\\\/{2}[\\d\\w-]+(\\.[\\d\\w-]+)*(?:(?:\\\/[^\\s\/]*))*', '', prov)\n    prov4 = re.sub(r'[|||)(?.,:1234567890!]',' ',prov3)\n    prov5 = re.sub(' +',' ', prov4)\n    prov6 = prov5.split(\" \")\n    counter = Counter(prov6)\n    counter2 = counter.most_common(1)[0][0]\n    new_column.append(counter2)\ndf['most_used_word'] = new_column\nprint(df.head())\nprint(df['most_used_word'].unique())","ff1195ef":"p=[\"I think its good and I can do it. Lets see I am tired of speaking.\"]\n\n","cc2a1ec2":"y_p = knn.predict(p)\n\nprint(y_p)","cbc46e5a":"We can thus see that there are no null inputs, which means there is no need for cleaning the data. \n\nThe first idea that pops up is checking if the words per tweet of each person shows us some information. For that reason, we can create a new column as shown below.\n","a2bfc970":"There's quite a lot of information there. \n\nCreating new columns showing the amount of questionmarks per comment, exclamations or other types will be useful later on, as we will see. This are the examples I came up with, but here is where creativity comes into play.\n\nWe can also perform joint plots, pair plots and heat maps to explore relationship between data, just for fun.","63972977":"## **Table of Contents:**\n* Introduction\n* Exploratory data analysis\n* Data Preprocessing\n    - Converting Features\n    - Creating Categories\n    - Creating new Features\n* Building Machine Learning Models\n    - Training different models\n    - Which is the best model ?","277465ce":"Our simple model is only able to classify people with a 24% of right guesses, which is not too much. \n\nNow we will perform machine learning with the introverted\/extroverted column, and we'll see if our model is able to classify if someone is introverted or extroverted with a higher precision.","e88e3ace":"# **Exploratory data analysis**\n\nWe may use it for one reason or for another, but one thing we can do is printing a violin plot. \n\nAt the end I did not use it at all, but it is always nice to have the ability do some visual analysis for further investigations. ","ed9b0d34":"So we see our model has an accuracy of 77%, not bad for such a simple model! Let's see what else we can do!","c48b1955":"So it seems there's a large correlation between words per comment ant the ellipsis the user types per comment!","9b986663":"# **Data preprocessing**\n\nTo get a further insight on our dataset, we can first create 4 new columns dividing the people by introversion\/extroversion, intuition\/sensing, and so on. \n\nWhen it comes to performing machine learning, trying to distinguish between two categories is much easier than distinguishing between 16 categories. We will check that later on. Dividing the data in 4 small groups will perhaps be more useful when it comes to accuracy.","9b3a51af":"# **Introduction**\n\nThe database we are working with classifies people into 16 distinct personality types showing their last 50 tweets, separated by \"|||\". \n\nOur goal will be to create new columns based on the content of the tweets, in order to create a predictive model. As we will see, this can be quite tricky and our creativity comes into play when analysing the content of the tweets.\n\nWe begin by importing our dataset and showing some info, for an initial exploratory analysis.","90a45d6f":"# **Building machine learning algorithms**\n\nLet's do some machine learning now, first with the entire \"type\" column, with different models."}}