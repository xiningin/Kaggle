{"cell_type":{"90da26f1":"code","f9e25004":"code","97c665fc":"code","10c66e0f":"code","bdae6036":"code","5a5ffd4b":"code","c0c3ccd7":"code","0c266586":"code","afbdb8cb":"code","0989b74e":"code","384615fc":"code","649100f3":"code","7e437389":"code","8afc526a":"code","2d6b3ed2":"code","10e5f461":"code","08b54867":"code","9fff4aee":"code","533ab46c":"code","5ad13d3d":"code","924b577e":"code","a2924508":"code","89e729b7":"code","2f4f0f89":"code","dfad2ef4":"code","311cc2b7":"code","c37d97f5":"code","eb0c8bd4":"code","a8ad3b4d":"code","6191a435":"markdown","46fb7066":"markdown","7e2af08d":"markdown","bbb1c5cf":"markdown","c860bd55":"markdown","b31998bb":"markdown"},"source":{"90da26f1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f9e25004":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n","97c665fc":"! ls ..\/input\/pima-indians-diabetes-database","10c66e0f":"data = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')","bdae6036":"data.head()","5a5ffd4b":"## gives information about the data types,columns, null value counts, memory usage etc\n## function reference : https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.info.html\ndata.info(verbose=True)","c0c3ccd7":"print(data.describe())\nprint(data.shape)","0c266586":"# to check if any null value is present \ndata.isnull().sum()","afbdb8cb":"# checking corelation \ncorr= data.corr()\nplt.figure(figsize= (20,20))\nsns.heatmap(corr,annot=True,cmap='winter_r')","0989b74e":"data.corr()","384615fc":"sns.countplot(data.Outcome)\nplt.xlabel('Outcome')\nplt.ylabel('number of patient')\nplt.show()","649100f3":"Outcome_true= len(data.loc[data['Outcome']==0])\nOutcome_false= len(data.loc[data['Outcome']==1])\nprint(Outcome_true,Outcome_false)\n","7e437389":"\n## Train Test Split\n\nfrom sklearn.model_selection import train_test_split\nX =data.iloc[:,:-1].values\ny= data.iloc[:,-1].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state=10)","8afc526a":"print(X.shape,y.shape)","2d6b3ed2":"print('total number of data {}'.format(data.shape[0]))\nprint('total number of prenancies {}'.format(len(data.loc[data['BMI']==0])))\nprint('total number of Glucose {}'.format(len(data.loc[data['Glucose']==0])))\nprint('total number of BloodPressure {}'.format(len(data.loc[data['BloodPressure']==0])))\nprint('total number of SkinThickness {}'.format(len(data.loc[data['SkinThickness']==0])))\nprint('total number of Insulin {}'.format(len(data.loc[data['Insulin']==0])))\nprint('total number of BMI {}'.format(len(data.loc[data['BMI']==0])))\nprint('total number of DiabetesPedigreeFunction {}'.format(len(data.loc[data['DiabetesPedigreeFunction']==0])))\nprint('total number of Age {}'.format(len(data.loc[data['Age']==0])))\n","10e5f461":"from sklearn.impute import SimpleImputer\n\nfill_values = SimpleImputer(missing_values=0, strategy=\"mean\",verbose=0)\n\nX_train = fill_values.fit_transform(X_train)\nX_test = fill_values.fit_transform(X_test)","08b54867":"## Apply Algorithm\n\nfrom sklearn.ensemble import RandomForestClassifier\nrandom_forest_model = RandomForestClassifier(random_state=10)\n\nrandom_forest_model.fit(X_train, y_train)","9fff4aee":"predict_train_data = random_forest_model.predict(X_test)\n\nfrom sklearn import metrics\n\nprint(\"Accuracy = {0:.3f}\".format(metrics.accuracy_score(y_test, predict_train_data)))","533ab46c":"params={\n \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n    \n}","5ad13d3d":"## Hyperparameter optimization using RandomizedSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nimport xgboost","924b577e":"classifier=xgboost.XGBClassifier()","a2924508":"random_search=RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)","89e729b7":"random_search.fit(X_train,y_train)","2f4f0f89":"random_search.best_score_","dfad2ef4":"random_search.best_estimator_","311cc2b7":"classifier=xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.3, gamma=0.0,\n              learning_rate=0.05, max_delta_step=0, max_depth=3,\n              min_child_weight=7, missing=None, n_estimators=100, n_jobs=1,\n              nthread=None, objective='binary:logistic', random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n              silent=None, subsample=1, verbosity=1)","c37d97f5":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(classifier,X,y,cv=10)","eb0c8bd4":"score","a8ad3b4d":"score.mean()","6191a435":"\noutcome is already numerically classified. if Outcome was categrocial value(True\/False)\nthen we will map corresponding numerical value to Outcome.\n\nOutcome = {True: 1, False: 0}\n\ndata['Outcome'] = data['Outcome'].map(diabetes_map)","46fb7066":"** Hyper Parameter Optimization**\n","7e2af08d":"many data conatins zeo values , which is not possible hence replancing zeo values with mean values of feature.\n","bbb1c5cf":"**Basic EDA**","c860bd55":"**Importing the dataset**","b31998bb":"**Importing the required librarries**"}}