{"cell_type":{"48a4f673":"code","7078c04c":"code","62ad3eee":"code","0dd0bf06":"code","4f2fbc37":"code","614a2bab":"code","5e0f13de":"code","6a3642a3":"code","e37089e7":"code","fe57b1ea":"code","047cb902":"code","cd77b931":"code","904605d5":"code","f68d26e8":"code","920f1ac4":"code","9156550c":"code","b3df46b6":"code","a095f34d":"code","22b39cf8":"code","d599d9e6":"code","0ba81c92":"code","ebfccee3":"code","a5f4398a":"code","6eaf9090":"code","31622573":"code","fa70dc6b":"code","3ec77f6d":"code","b3446063":"code","10020b53":"code","14f4a304":"code","f38a5575":"code","7842d42d":"code","383b174b":"code","b959d713":"code","7e3e7afb":"code","e8e876ae":"code","beb307bd":"code","a8290e0b":"markdown"},"source":{"48a4f673":"import pandas as pd # IMPORTING PANDAS\nimport matplotlib.pyplot as plt # IMPORTING PYPLOT\nimport numpy as np # IMPORTING NUMPY\nimport re # IMPORTING REGEX","7078c04c":"nt = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\") # READING THE CSV FILE AS DATAFRAME","62ad3eee":"print(nt) #PRINTING THE DATAFRAME","0dd0bf06":"print(type(nt)) # PRINTING TYPE OF DATAFRAME TO CONFIRM","4f2fbc37":"print(nt.columns) #PRINTING COLUMNS","614a2bab":"nt.set_index('show_id', inplace = True) # SETTING \"show_id\" AS INDEX","5e0f13de":"print(nt) # PRINTING DATAFRAME","6a3642a3":"nt.shape # CHECKING SHAPE OF THE DATAFRAME","e37089e7":"nt.columns # PRINTING COLUMNS","fe57b1ea":"nt.type.unique() # SEEING UNIQUE VALUES IN TYPE COLUMN","047cb902":"# BAR GRAPH FOR NUMBER OF MOVIES\/TV SHOWS\n\nplt.figure(figsize = (7,5))\nplt.bar(['TV Shows','Movies'],[sum(nt.type == 'TV Show'),sum(nt.type == 'Movie')])\nplt.title('Bar plot for number of movies\/TV Shows')\nplt.xlabel('MEDIA TYPE')\nplt.ylabel('NUMBER')\nplt.show()","cd77b931":"n=0\nfor media in nt.title.unique():\n    n+=1\nprint(n) # PRINTING NUMBER OF UNIQUE MEDIA","904605d5":"n=0\nfor d in nt.director.unique():\n    n+=1\nprint(n) # PRINTING NUMBER OF UNIQUE directors","f68d26e8":"nt['director'].fillna('None',inplace = True)     # REMOVING THE NaN VALUES from DIRECTOR","920f1ac4":"direc_dict = {} # CREATING DICTIONARY FOR UNIQUE DIRECTORS AND COUNT OF MOVIES\/TV SHOWS\nfor d in list(nt.director): \n        if (d in direc_dict): \n            direc_dict[d] += 1\n        else: \n            direc_dict[d] = 1\n#print(direc_dict)","9156550c":"# REMOVING NaN\n\ndel direc_dict['None']","b3df46b6":"# PRINTING DIRECTORS FOR MORE THAN 7 MOVIES\n\nfor key,value in direc_dict.items(): \n    if value>7:\n        print(key)","a095f34d":"#NUMBER OF COUNTRIES PRESENT\n\npd.DataFrame(nt.country.unique()).count()","22b39cf8":"coun_dict = {} # CREATING DICTIONARY FOR UNIQUE DIRECTORS AND COUNT OF MOVIES\/TV SHOWS\nfor c in list(nt.country): \n        if (c in coun_dict): \n            coun_dict[c] += 1\n        else: \n            coun_dict[c] = 1","d599d9e6":"# PRINTING COUNTRIES FOR MORE THAN 30 MOVIES\n\nfor key,value in coun_dict.items(): \n    if value>30:\n        print(key)","0ba81c92":"# PRINTING COUNTRY WITH MAXIMUM NUMBER OF MOVIES\n\nmax_val = max(coun_dict.values())\nls = []\n\nfor key,value in coun_dict.items():\n    if value == max_val:\n        ls.append(key)\nprint(ls,max_val)","ebfccee3":"# DATE_ADDED VARIABLE\n\nnt.date_added","a5f4398a":"# CREATING BINS FOR HISTOGRAM\n\nbins = [i for i in range(2010,2021)]\n#print(bins)","6eaf9090":"nt['date_added'].fillna('0000',inplace = True) # Removing NA values\n\n# Retreiving year from dates\n\nl = []\nfor date in nt.date_added:\n    temp = date[-4::]\n    l.append(int(temp))","31622573":"# HISTOGRAM FOR Number of movies added in respective year\n\nplt.figure(figsize = (7,5))\nplt.title('Number of movies added in respective year')\nplt.xlabel('Years')\nplt.ylabel('Number of movies')\nplt.xticks(bins)\nplt.hist(l,bins,align = 'right',rwidth=0.8,color = 'coral')\nplt.show()","fa70dc6b":"#RELEASE YEAR\n\nnt.release_year","3ec77f6d":"# NUMBER OF MOVIES RELEASED IN SPECIFIC YEAR\n\nplt.figure(figsize = (7,5))\nplt.title('Number of movies released in respective year')\nplt.xlabel('Years')\nplt.ylabel('Number of movies')\nplt.xticks(bins)\nplt.hist(nt.release_year,bins,align = 'right',rwidth=0.8,color = 'teal')\nplt.show()","b3446063":"# RATING\n\nnt.rating","10020b53":"# REMOVING NAN AND MAKING UNIQUE RATING LIST\n\nnt.rating.fillna('None', inplace = True)\nunique_rating_list = nt.rating.unique() # UNIQUE RATING\n#unique_rating_list.fillna('None', inplace = True) # Making Nan None\n#unique_rating_list = [x for x in unique_rating_list if x is not 'None'] # Removing None by list comprehension\n#print(unique_rating_list) # Printing Unique Ratings","14f4a304":"rate_dict = {} # CREATING DICTIONARY FOR UNIQUE RATINGS AND COUNT OF MOVIES\/TV SHOWS\nfor r in list(nt.rating): \n        if (r in rate_dict): \n            rate_dict[r] += 1\n        else: \n            rate_dict[r] = 1\n\n# BAR CHART FOR NUMBER OF MOVIES\/SHOWS WITH THEIR RATINGS\nplt.figure(figsize = (12,7))\nplt.title('Number of Movies\/Shows with their respective ratings')\nplt.xlabel('Ratings')\nplt.ylabel('Count of Shows')\nplt.bar(rate_dict.keys(),rate_dict.values(),color = '#4042e4') # PLOTTING BAR CHART FOR NUMBER OF RATINGS\nplt.show()","f38a5575":"# DURATION VARIABLE\n\nnt.duration","7842d42d":"# UNIQUE DURATION\nunique_duration = list(nt.duration.unique())\n#print(unique_duration)","383b174b":"# DEMARCATING TV SERIES AND MOVIES SEPERATELY\n\nseason_TVSeries = []\nminutes_Movies = []\n\nfor el in unique_duration:\n    if el[-7::] == 'Seasons' or el[-6::] == 'Season':\n        season_TVSeries.append(el)\n    else:\n        minutes_Movies.append(el)\n#print(season_TVSeries)\n#print(minutes_Movies)","b959d713":"# FOR SEASONS\n\nbins = [x for x in range(1,16)]\n#print(bins)\nlist_num_seasons = [int(re.sub(\" .*\", \"\", x)) for x in season_TVSeries]\n#print(list_num_seasons)","7e3e7afb":"#BAR CHART FOR NUMBER OF UNIQUE SEASONS IN SHOWS\n\nplt.figure(figsize = (7,5))\nplt.title('Number of Unique Seasons in shows')\nplt.ylabel('Shows')\nplt.tick_params(axis = 'x', which = 'both', bottom = False, top = False) # REMOVING TICKS\nplt.xticks(bins, \" \") # REMOVING X LABEL VALUES\nplt.scatter(bins,list_num_seasons,color = '#4062e4') \nplt.show()","e8e876ae":"# FOR MOVIES\n\nbins = [x for x in range(0,321,40)]\nlist_time_movies = [int(re.sub(\" .*\", \"\", x)) for x in minutes_Movies]\n#print(bins)\n#print(list_time_movies)","beb307bd":"# BAR CHART FOR NUMBER OF RATINGS\n\nplt.figure(figsize = (7,5))\nplt.title('Number of Movies with their respective duration')\nplt.xlabel('Number of Movies')\nplt.ylabel('Duration')\nplt.hist(list_time_movies,bins,color = '#657482', orientation = 'horizontal', align = 'mid') # PLOTTING \n                                                                                            #BAR CHART FOR NUMBER OF RATINGS\nplt.grid(True,axis='both',which='major')\nplt.show()","a8290e0b":"### END OF FILE"}}