{"cell_type":{"3305bee0":"code","bc366104":"code","1bdffdf1":"code","3b5d594e":"code","826d62b6":"code","43e252cb":"code","ad499311":"code","05f2e4a3":"code","a93d80dc":"code","7cc2caa9":"code","a40f3794":"code","c74d6fad":"code","3c080ba2":"code","eb29300b":"code","ee4878f6":"code","fd955433":"code","64c41ef8":"code","9ed6e0b8":"code","79fc33b2":"code","b0ebddf8":"code","9c31686f":"code","e5a51f23":"code","28370780":"code","2e8335ac":"code","79a2952c":"code","e780e8f2":"code","8314518f":"code","53c17e2d":"code","6e37f2a8":"code","c6f37c69":"code","2d88d884":"code","fdc8d03a":"code","8c3ac9b6":"code","4d7df07c":"code","acd8f027":"code","6a5ba1e4":"code","bcc2557e":"code","a0f1e6df":"code","f0041255":"code","0473f341":"code","f9bd8d84":"code","c43a04be":"code","5b9fdb20":"code","e3e1e259":"code","68d50551":"code","0a08ce43":"code","80cc5d03":"code","5284cdaa":"code","556bf588":"code","681384e9":"markdown","23df11be":"markdown","e4d19b5d":"markdown","4bb804af":"markdown","dd7ea8f3":"markdown","d28c457a":"markdown","b57ac91c":"markdown","70164c31":"markdown","64774cae":"markdown","0e9c57c8":"markdown","f7ea2999":"markdown","408fed77":"markdown"},"source":{"3305bee0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport matplotlib.ticker as tick\nfrom matplotlib.colors import LinearSegmentedColormap\nimport matplotlib as mpl\n\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport xgboost as xgb\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","bc366104":"colors_dark = [\"#1F1F1F\", \"#313131\", '#636363', '#AEAEAE', '#DADADA']\ncolors_blue = [\"#21484A\", '#2D696C', '#46A3A9', '#5CD8E0', '#B6F4F8']\ncolors_red  = [\"#461818\", '#6F2525', '#A03535', '#E14B4B', '#FF5151']","1bdffdf1":"# code for creating custom cmap\n# ref: https:\/\/stackoverflow.com\/a\/50230769\/12033506\n\ndef NonLinCdict(steps, hexcol_array):\n    cdict = {'red': (), 'green': (), 'blue': ()}\n    for s, hexcol in zip(steps, hexcol_array):\n        rgb =mpl.colors.hex2color(hexcol)\n        cdict['red'] = cdict['red'] + ((s, rgb[0], rgb[0]),)\n        cdict['green'] = cdict['green'] + ((s, rgb[1], rgb[1]),)\n        cdict['blue'] = cdict['blue'] + ((s, rgb[2], rgb[2]),)\n    return cdict\n\nth = [0, 0.4, 0.5, 0.8, 1]\ncdict = NonLinCdict(th, (colors_blue[:4] + colors_dark[-1:])[::-1])\ncm = LinearSegmentedColormap('test', cdict)\ncm","3b5d594e":"def reformat_large_tick_values(tick_val, pos):\n    \"\"\"\n    Turns large tick values (in the billions, millions and thousands) such as 4500 into 4.5K and also appropriately turns 4000 into 4K (no zero after the decimal).\n    \"\"\"\n    if tick_val >= 1000000000:\n        val = round(tick_val\/1000000000, 1)\n        new_tick_format = '{:}B'.format(val)\n    elif tick_val >= 1000000:\n        val = round(tick_val\/1000000, 1)\n        new_tick_format = '{:}M'.format(val)\n    elif tick_val >= 1000:\n        val = round(tick_val\/1000, 1)\n        new_tick_format = '{:}K'.format(val)\n    elif tick_val < 1000:\n        new_tick_format = round(tick_val, 1)\n    else:\n        new_tick_format = tick_val\n\n    # make new_tick_format into a string value\n    new_tick_format = str(new_tick_format)\n    \n    # code below will keep 4.5M as is but change values such as 4.0M to 4M since that zero after the decimal isn't needed\n    index_of_decimal = new_tick_format.find(\".\")\n    \n    if index_of_decimal != -1:\n        value_after_decimal = new_tick_format[index_of_decimal+1]\n        if value_after_decimal == \"0\":\n            # remove the 0 after the decimal point since it's not needed\n            new_tick_format = new_tick_format[0:index_of_decimal] + new_tick_format[index_of_decimal+2:]\n            \n    return new_tick_format","826d62b6":"df_train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv\")\ndf_train.drop(\"PassengerId\", axis=1, inplace=True)","43e252cb":"train_null = (df_train.isnull().sum() \/ len(df_train) * 100).sort_values(ascending=False)\ntrain_notnull = (df_train.notnull().sum() \/ len(df_train) * 100).sort_values()\n\nfig, ax = plt.subplots(figsize=(14, 8))\n\nbars1 = ax.bar(x=train_null.index, height=train_null.values, color=colors_blue[0])\nbars2 = ax.bar(x=train_notnull.index, height=train_notnull.values, bottom=train_null.values, alpha=0.3, color=colors_dark[-1])\n\nfor bar in bars1: \n    height = bar.get_height()\n    x = bar.get_x()\n    \n    ax.text(\n        x=x+0.4, y=height + 2.5,\n        ha='center',\n        s=\"{:.2f}%\".format(height),\n        fontsize=12,\n        color=colors_dark[0],\n    )\n\nax.legend([\"Missing values (%)\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False, fontsize=12)\nax.grid(axis='y', alpha=0.2)\nax.set_axisbelow(True)\nax.tick_params(labelsize=12)\nax.set_xlabel(\"Feature\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"Percentage %\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\nplt.suptitle(\"Missing Value Percentage\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.title(\"The only feature with most significance loss is Cabin\", loc='center', x=0.48, y=1.03, fontsize=14, color=colors_dark[2])\nplt.tight_layout()\nplt.show()","ad499311":"def to_pct(row) : \n    return row*100 \/ row.sum()\n\ndf = df_train.groupby(['Sex', 'Survived']).count()['Name'].unstack()\ndf = df.apply(to_pct, axis=1).reset_index()\n\nfig, ax = plt.subplots(1, 2, figsize=(16, 6))\n\nbars0 = sns.countplot(data=df_train, x='Sex', hue='Survived', palette=list([colors_blue[1], colors_dark[-1]]), ax=ax[0], hue_order=[1, 0], order=['female', 'male'])\n\nbars1 = ax[1].bar(x=df.Sex, height=df[1], label='Survived', color=colors_blue[1])\nbars2 = ax[1].bar(x=df.Sex, height=df[0], bottom=df[1], label=\"Dead\", color=colors_dark[-1], alpha=0.3)\n\nfor bar in bars1 : \n    height = bar.get_height() \n    x = bar.get_x() \n    \n    ax[1].text(\n        x=x+0.4, y=height \/\/ 2,\n        va='center', ha='center', \n        s=f\"{round(height)}%\",\n        color='white',\n        fontweight='bold',\n        fontsize=24\n    )\n    \n# AX settings\n    \nax[0].legend([\"Survived\", \"Not Survived\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False, fontsize=12)\nax[0].grid(axis='y', alpha=0.2)\nax[0].set_axisbelow(True)\nax[0].tick_params(labelsize=12)\nax[0].set_ylabel(\"Survival Count\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax[0].yaxis.set_major_formatter(tick.FuncFormatter(reformat_large_tick_values))\nax[0].set_xlabel(None)\n\nax[0].spines['right'].set_visible(False)\nax[0].spines['left'].set_visible(False)\nax[0].spines['top'].set_visible(False)\n    \nax[1].legend([\"Survival Rate (%)\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False, fontsize=12)\nax[1].grid(axis='y', alpha=0.2)\nax[1].set_axisbelow(True)\nax[1].tick_params(labelsize=12)\nax[1].set_ylabel(\"Percentage %\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n\nax[1].spines['right'].set_visible(False)\nax[1].spines['left'].set_visible(False)\nax[1].spines['top'].set_visible(False)\n\nplt.title(\"It seems that female has a higher chance of survival comapared to male\", loc='center', x=-0.1, y=1.08, fontsize=14, color=colors_dark[2])\nplt.suptitle(\"Survival Rate Male and Female\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.tight_layout()\nplt.show()","05f2e4a3":"def to_pct(row) : \n    return row*100 \/ row.sum()\n\nfig, ax = plt.subplots(3, 2, figsize=(16, 16))\nfor i in range(3) : \n\n    df = df_train[df_train.Pclass == i+1]\n    df = df.groupby(['Sex', 'Survived']).count()['Name'].unstack()\n    df = df.apply(to_pct, axis=1).reset_index()\n\n\n    bars0 = sns.countplot(data=df_train[df_train.Pclass == i+1], x='Sex', hue='Survived', palette=list([colors_blue[1], colors_dark[-1]]), ax=ax[i, 0], hue_order=[1, 0], order=['female', 'male'])\n\n    bars1 = ax[i, 1].bar(x=df.Sex, height=df[1], label='Survived', color=colors_blue[1])\n    bars2 = ax[i, 1].bar(x=df.Sex, height=df[0], bottom=df[1], label=\"Dead\", color=colors_dark[-1], alpha=0.3)\n\n    for bar in bars1 : \n        height = bar.get_height() \n        x = bar.get_x() \n\n        ax[i, 1].text(\n            x=x+0.4, y=height \/\/ 2,\n            va='center', ha='center', \n            s=f\"{round(height)}%\",\n            color='white',\n            fontweight='bold',\n            fontsize=24\n        )\n\n    # AX settings\n    ax[i, 0].set_title(f\"Pclass = {i+1}\", loc='left', fontweight='bold', fontsize=14, color=colors_dark[1])\n\n    ax[i, 0].legend([\"Survived\", \"Not Survived\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False, fontsize=12)\n    ax[i, 0].grid(axis='y', alpha=0.2)\n    ax[i, 0].set_axisbelow(True)\n    ax[i, 0].tick_params(labelsize=12)\n    ax[i, 0].set_ylabel(\"Survival Count\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n    ax[i, 0].yaxis.set_major_formatter(tick.FuncFormatter(reformat_large_tick_values))\n    ax[i, 0].set_xlabel(None)\n\n    ax[i, 0].spines['right'].set_visible(False)\n    ax[i, 0].spines['left'].set_visible(False)\n    ax[i, 0].spines['top'].set_visible(False)\n\n    ax[i, 1].legend([\"Survival Rate (%)\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False, fontsize=12)\n    ax[i, 1].grid(axis='y', alpha=0.2)\n    ax[i, 1].set_axisbelow(True)\n    ax[i, 1].tick_params(labelsize=12)\n    ax[i, 1].set_ylabel(\"Percentage %\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n\n    ax[i, 1].spines['right'].set_visible(False)\n    ax[i, 1].spines['left'].set_visible(False)\n    ax[i, 1].spines['top'].set_visible(False)\n\nfig.suptitle(\"Survival Rate Male and Female On Each Class\\n\\n\\n\", fontsize=18, fontweight='bold', color=colors_dark[0])\nfig.text(ha='center', va='center', x=0.5, y=0.94, s=\"It is interesting to see the Pclass=3\\nmost of the passenger on Pclass=3 is male\\nand both female and male on Pclass=3, has a low survival chance\", fontsize=14, color=colors_dark[2])\nplt.subplots_adjust(top=2)\nplt.tight_layout()\nplt.show()","a93d80dc":"fig, ax = plt.subplots(figsize=(12, 6))\nage_mean = df_train.Age.mean()\nage_median = df_train.Age.median()\n\n\nsns.kdeplot(data=df_train, x='Age', shade=True, color=colors_blue[0], ax=ax, alpha=1)\n\nax.axvline(x=age_mean, linestyle='--', color=colors_blue[2])\nax.axvline(x=age_median, linestyle='--', color=colors_blue[3])\n\nax.annotate(\n    text=\"Average\\n {:.2f}\".format(age_mean),\n    fontsize=12,\n    xy=(age_mean, 0.021),\n    xytext=(age_mean-8, 0.022),\n    color=colors_dark[2],\n    arrowprops=dict(\n        arrowstyle= '-',\n        color=colors_dark[2],\n        ls='--'\n    )\n)\n\nax.annotate(\n    text=\"Median: {:.2f}\".format(age_median),\n    fontsize=12,\n    xy=(age_median, 0.02),\n    xytext=(age_mean+3, 0.021),\n    color=colors_dark[2],\n    arrowprops=dict(\n        arrowstyle= '-',\n        color=colors_dark[2],\n        ls='--'\n    )\n)\n\n\nax.grid(axis='y', alpha=0.2)\nax.set_axisbelow(True)\nax.tick_params(labelsize=12)\nax.set_xlabel(\"Age\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"Density\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\nplt.suptitle(\"How is The Age Distributed?\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.title(\"We can see that there are three hills: young, middle-aged, old. My guess is that most of old and young will travel in family\\nthe mean and median is pretty much the same you might want to check with other feature if you want to impute missing value for age\", loc='center', x=0.48, y=1.05, fontsize=14, color=colors_dark[2])\nplt.tight_layout()\nplt.show()","7cc2caa9":"fig, ax = plt.subplots(figsize=(12, 6))\n\n\nsns.kdeplot(data=df_train, x='Age', hue='Survived', ax=ax, shade=True, hue_order=[1, 0], palette=list([colors_blue[0], colors_dark[-1]]), alpha=1)\n\nax.grid(axis='y', alpha=0.2)\nax.set_axisbelow(True)\nax.tick_params(labelsize=12)\nax.set_xlabel(\"Age\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"Density\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.legend([\"Not Survived\", 'Survived'], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=3, frameon=False, fontsize=12)\n\n\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\nplt.suptitle(\"How is The Age Distributed?\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.title(\"Not so much interesting, but we can see that majority who didnt survived is between 20 to 30-ish\\n\", loc='center', x=0.48, y=1.02, fontsize=14, color=colors_dark[2])\nplt.tight_layout()\nplt.show()","a40f3794":"fig, ax = plt.subplots(3, 1, figsize=(14, 14))\n\nfig.text(ha='center', va='center', x=0.5, y=0.935, s=\"We can see that most who didnt survive is on Pclass=3, many people on Pclass one survive\\nwe can also see that most people on Pclass=1 is old people\", fontsize=14, color=colors_dark[2])\n\n\nfor i in range(3) :\n    \n\n    df = df_train[df_train.Pclass == i+1]\n    age_median =  df.Age.median()\n    \n    ax[i].axvline(x=age_median, linestyle='--', color=colors_red[2], label='Median')\n\n    sns.kdeplot(data=df, x='Age', hue='Survived', ax=ax[i], shade=True, alpha=0.4, hue_order=[1, 0], palette=list([colors_blue[1], colors_dark[-2]]))\n    ax[i].set_title(f\"Pclass = {i+1}\", loc='left', fontweight='bold', fontsize=14, color=colors_dark[1])\n    ax[i].grid(axis='y', alpha=0.2)\n    ax[i].set_axisbelow(True)\n    ax[i].tick_params(labelsize=12)\n    ax[i].set_xlabel(\"Age\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n    ax[i].set_ylabel(\"Density\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n    ax[i].legend([\"Median\", 'Not Survived', \"Survived\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=3, frameon=False, fontsize=12)\n\n\n    ax[i].spines['right'].set_visible(False)\n    ax[i].spines['left'].set_visible(False)\n    ax[i].spines['top'].set_visible(False)\n\nplt.suptitle(\"Age Distribution for Every Pclass?\\n\\n\\n\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.tight_layout()\nplt.show()","c74d6fad":"fig, ax = plt.subplots(figsize=(14, 6))\n\nbaby = [0, 5]\nchildren = [6, 16]\nyoung_adult = [17,29]\nmiddle_aged = [30,49]\nsenior = [50, 90]\n\nsns.kdeplot(data=df_train, x='Age', shade=True, color=colors_blue[0], ax=ax)\n\nax.axvspan(baby[0], baby[1], alpha=0.8, color=colors_blue[0])\nax.axvspan(children[0], children[1], alpha=0.8, color=colors_blue[0])\nax.axvspan(young_adult[0], young_adult[1], alpha=0.8, color=colors_blue[2])\nax.axvspan(middle_aged[0], middle_aged[1], alpha=0.8, color=colors_blue[3])\nax.axvspan(senior[0], senior[1], alpha=0.8, color=colors_blue[4])\n\nax.text(\n    x=(sum(baby) \/\/ 2) + 0.12, y=0.015,\n    s='Baby',\n    ha='center',\n    va='center',\n    fontsize=16,\n    color='white', \n    fontweight='bold'\n)\n\nax.text(\n    x=(sum(children) \/\/ 2) + 0.12, y=0.015,\n    s='Children',\n    ha='center',\n    va='center',\n    fontsize=16,\n    color='white', \n    fontweight='bold'\n)\n\nax.text(\n    x=(sum(young_adult) \/\/ 2) + 0.12, y=0.015,\n    s='Young\\nAdult',\n    ha='center',\n    va='center',\n    fontsize=16,\n    color='white', \n    fontweight='bold'\n)\n\nax.text(\n    x=(sum(middle_aged) \/\/ 2) + 0.12, y=0.015,\n    s='Middle\\nAged',\n    ha='center',\n    va='center',\n    fontsize=16,\n    color=colors_dark[1], \n    fontweight='bold'\n)\n\nax.text(\n    x=(sum(senior) \/\/ 2) + 0.12, y=0.015,\n    s='Senior',\n    ha='center',\n    va='center',\n    fontsize=16,\n    color=colors_dark[1], \n    fontweight='bold'\n)\n\n\nax.grid(axis='y', alpha=0.2)\nax.set_axisbelow(True)\nax.tick_params(labelsize=12)\nax.set_xlabel(\"Age\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"Density\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\nplt.suptitle(\"Age Categorization\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.title(\"Lets try to divide the age into four groups, i expect that children and senior have a higher chance of survival\", loc='center', x=0.48, y=1.05, fontsize=14, color=colors_dark[2])\nplt.tight_layout()\nplt.show()","3c080ba2":"bins = [0, 5, 17, 30, 50, 100]\nlabels = [\"Baby\", \"Children\", \"Young Adult\", \"Middle Aged\", \"Senior\"]\ndf_train['Age Group'] = pd.cut(df['Age'], bins=bins, labels=labels) ","eb29300b":"def to_pct(row) : \n    return row*100 \/ row.sum()\n\ndf = df_train.groupby(['Age Group', 'Survived']).count()['Name'].unstack()\ndf = df.apply(to_pct, axis=1).reset_index()\n\nmean_survive = df.mean()[1]\n\nfig, ax = plt.subplots(1, 2, figsize=(16, 6))\n\nbars0 = sns.countplot(data=df_train, x='Age Group', hue='Survived', palette=list([colors_blue[1], colors_dark[-1]]), ax=ax[0], hue_order=[1, 0])\n\nbars1 = ax[1].bar(x=df['Age Group'], height=df[1], label='Survived', color=colors_blue[1])\nbars2 = ax[1].bar(x=df['Age Group'], height=df[0], bottom=df[1], label=\"Dead\", color=colors_dark[-1], alpha=0.3)\n\nline1 = ax[1].axhline(y=mean_survive, linestyle=\"--\", color=colors_red[-2])\n\nfor bar in bars1 : \n    height = bar.get_height() \n    x = bar.get_x() \n    \n    ax[1].text(\n        x=x+0.4, y=height \/\/ 2,\n        va='center', ha='center', \n        s=f\"{round(height)}%\",\n        color='white',\n        fontweight='bold',\n        fontsize=24\n    )\n    \nax[1].text(\n    x=3.8, \n    y=mean_survive,\n    s=\"Average rate {:.2f}%\".format(mean_survive),\n    backgroundcolor=\"#2A5D61\",\n    color=\"white\",\n    fontweight='bold',\n    fontsize=12\n)\n    \n# AX settings\n    \nax[0].legend([\"Survived\", \"Not Survived\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False, fontsize=12)\nax[0].grid(axis='y', alpha=0.2)\nax[0].set_axisbelow(True)\nax[0].tick_params(labelsize=12)\nax[0].set_ylabel(\"Survival Count\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax[0].yaxis.set_major_formatter(tick.FuncFormatter(reformat_large_tick_values))\nax[0].set_xlabel(None)\n\nax[0].spines['right'].set_visible(False)\nax[0].spines['left'].set_visible(False)\nax[0].spines['top'].set_visible(False)\n    \nax[1].legend([\"Average rate of survival\", \"Survival Rate (%)\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False, fontsize=12)\nax[1].grid(axis='y', alpha=0.2)\nax[1].set_axisbelow(True)\nax[1].tick_params(labelsize=12)\nax[1].set_ylabel(\"Percentage %\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n\nax[1].spines['right'].set_visible(False)\nax[1].spines['left'].set_visible(False)\nax[1].spines['top'].set_visible(False)\n\nplt.title(\"As expected children and senior have a higher Rate of Survival\", loc='center', x=0.038, y=1.08, fontsize=14, color=colors_dark[2])\nplt.suptitle(\"Survival Rate For Every Age Group\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.tight_layout()\nplt.show()","ee4878f6":"embark_mapping = {\n    \"S\" : \"Southampton\",\n    'C' : \"Cherbourg\", \n    \"Q\" : \"Queenstown\",\n    np.nan : \"Not Embarked\"\n}\n\ndf_train = df_train.replace({\"Embarked\": embark_mapping})","fd955433":"def to_pct(row) : \n    return row*100 \/ row.sum()\n\ndf = df_train.groupby(['Embarked', 'Survived']).count()['Name'].unstack()\ndf = df.apply(to_pct, axis=1).reset_index()\n\nmean_survive = df.mean()[1]\n\nfig, ax = plt.subplots(1, 2, figsize=(16, 6))\n\nbars0 = sns.countplot(data=df_train, x='Embarked', hue='Survived', palette=list([colors_blue[1], colors_dark[-1]]), ax=ax[0], hue_order=[1, 0], order=df.Embarked)\n\nbars1 = ax[1].bar(x=df['Embarked'], height=df[1], label='Survived', color=colors_blue[1])\nbars2 = ax[1].bar(x=df['Embarked'], height=df[0], bottom=df[1], label=\"Dead\", color=colors_dark[-1], alpha=0.3)\n\nline1 = ax[1].axhline(y=mean_survive, linestyle=\"--\", color=colors_red[-2])\n\nfor bar in bars1 : \n    height = bar.get_height() \n    x = bar.get_x() \n    \n    ax[1].text(\n        x=x+0.4, y=height \/\/ 2,\n        va='center', ha='center', \n        s=f\"{round(height)}%\",\n        color='white',\n        fontweight='bold',\n        fontsize=24\n    )\n    \nax[1].text(\n    x=3.8, \n    y=mean_survive,\n    s=\"Average rate {:.2f}%\".format(mean_survive),\n    backgroundcolor=\"#2A5D61\",\n    color=\"white\",\n    fontweight='bold',\n    fontsize=12\n)\n    \n# AX settings\n    \nax[0].legend([\"Survived\", \"Not Survived\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False, fontsize=12)\nax[0].grid(axis='y', alpha=0.2)\nax[0].set_axisbelow(True)\nax[0].tick_params(labelsize=12)\nax[0].set_ylabel(\"Survival Count\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax[0].yaxis.set_major_formatter(tick.FuncFormatter(reformat_large_tick_values))\nax[0].set_xlabel(None)\n\nax[0].spines['right'].set_visible(False)\nax[0].spines['left'].set_visible(False)\nax[0].spines['top'].set_visible(False)\n    \nax[1].legend([\"Average rate of survival\", \"Survival Rate (%)\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False, fontsize=12)\nax[1].grid(axis='y', alpha=0.2)\nax[1].set_axisbelow(True)\nax[1].tick_params(labelsize=12)\nax[1].set_ylabel(\"Percentage %\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n\nax[1].spines['right'].set_visible(False)\nax[1].spines['left'].set_visible(False)\nax[1].spines['top'].set_visible(False)\n\nplt.title(\"Most people embarked from Southampton, people from Cherbough have a high rate of survival, why is that?\", loc='center', x=0.038, y=1.08, fontsize=14, color=colors_dark[2])\nplt.suptitle(\"How is the Survival Rate for Every Embarked Spot?\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.tight_layout()\nplt.show()","64c41ef8":"fig, ax = plt.subplots(figsize=(12, 8))\n\n\ndf = df_train.groupby(['Pclass', 'Embarked']).count()['Name'].unstack()\n\ndf.plot(kind='bar', stacked=True, ax=ax, color=list([colors_blue[0],colors_dark[2], colors_blue[2], colors_dark[4]]), rot=0)\n\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=3, frameon=False, fontsize=12)\nax.grid(axis='y', alpha=0.2)\nax.set_axisbelow(True)\nax.tick_params(labelsize=12)\nax.set_ylabel(\"Count\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.set_xlabel(\"Pclass\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.yaxis.set_major_formatter(tick.FuncFormatter(reformat_large_tick_values))\n\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\nplt.title(\"It turns out that many people boarding from Cherbourg board in Pclass=1 while majority boarding from Southampton are on Pclass=3\", loc='center', x=0.515, y=1.08, fontsize=14, color=colors_dark[2])\nplt.suptitle(\"What Pclass Are People in for Every Embark City?\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.tight_layout()\nplt.show()","9ed6e0b8":"df_train['Famsize'] = df_train['SibSp'] + df_train['Parch'] + 1\n\ndef hasfam(x) : \n    return \"With family\" if x.Famsize != 1 else \"Alone\"\n\ndf_train['Hasfam'] = df_train.apply(hasfam, axis=1)","79fc33b2":"def to_pct(row) : \n    return row*100 \/ row.sum()\n\ndf = df_train.groupby(['Hasfam', 'Survived']).count()['Name'].unstack()\ndf = df.apply(to_pct, axis=1).reset_index()\n\nmean_survive = df.mean()[1]\n\nfig, ax = plt.subplots(1, 2, figsize=(16, 6))\n\nbars0 = sns.countplot(data=df_train, x='Hasfam', hue='Survived', palette=list([colors_blue[1], colors_dark[-1]]), ax=ax[0], hue_order=[1, 0], order=df.Hasfam)\n\nbars1 = ax[1].bar(x=df['Hasfam'], height=df[1], color=colors_blue[1])\nbars2 = ax[1].bar(x=df['Hasfam'], height=df[0], bottom=df[1], color=colors_dark[-1], alpha=0.3)\n\nline1 = ax[1].axhline(y=mean_survive, linestyle=\"--\", color=colors_red[-2])\n\nfor bar in bars1 : \n    height = bar.get_height() \n    x = bar.get_x() \n    \n    ax[1].text(\n        x=x+0.4, y=height \/\/ 2,\n        va='center', ha='center', \n        s=f\"{round(height)}%\",\n        color='white',\n        fontweight='bold',\n        fontsize=24\n    )\n    \nax[1].text(\n    x=1.6, \n    y=mean_survive,\n    s=\"Average rate {:.2f}%\".format(mean_survive),\n    backgroundcolor=\"#2A5D61\",\n    color=\"white\",\n    fontweight='bold',\n    fontsize=12\n)\n    \n# AX settings\n    \nax[0].legend([\"Survived\", \"Not Survived\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False, fontsize=12)\nax[0].grid(axis='y', alpha=0.2)\nax[0].set_axisbelow(True)\nax[0].tick_params(labelsize=12)\nax[0].set_ylabel(\"Survival Count\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax[0].yaxis.set_major_formatter(tick.FuncFormatter(reformat_large_tick_values))\nax[0].set_xlabel(None)\n\nax[0].spines['right'].set_visible(False)\nax[0].spines['left'].set_visible(False)\nax[0].spines['top'].set_visible(False)\n    \nax[1].legend([\"Average rate of survival\", \"Survival Rate (%)\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False, fontsize=12)\nax[1].grid(axis='y', alpha=0.2)\nax[1].set_axisbelow(True)\nax[1].tick_params(labelsize=12)\nax[1].set_ylabel(\"Percentage %\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n\nax[1].spines['right'].set_visible(False)\nax[1].spines['left'].set_visible(False)\nax[1].spines['top'].set_visible(False)\n\nplt.title(\"People boarding the titanic with family has a 7% higher rate of survival, most of titanic passenger travels alone\", loc='center', x=0.038, y=1.08, fontsize=14, color=colors_dark[2])\nplt.suptitle(\"How is the Survival Rate for Those Who Has a Family?\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.tight_layout()\nplt.show()","b0ebddf8":"colors = ['#21484A', '#388085', '#54C2C9', '#4382BC', '#04A8B0', '#AEAEAE']\ndf = df_train[df_train['Hasfam'] == \"With family\"]\ndf = df.groupby('Famsize')['Name'].count()\n\ndf_cutted = df[5:].sum()\ndf = df[:5].append(pd.Series(df_cutted))\nlabels = [\"1\", \"2\", \"3\", \"4\", \"5\", \"> 5\"]\nexplode = (0.03,0.03,0.03,0.03, 0.03, 0.03)\n\n\nfig, ax = plt.subplots(figsize=(14, 8))\n\n\nwedges, texts, pcttext = ax.pie(\n    df.values, \n    wedgeprops=dict(width=0.5), \n    startangle=-40, \n    colors=colors, \n    explode=explode,\n    labels=labels,\n    textprops={\n        'fontsize': 12, \n        'color': colors_dark[1],\n        'fontweight': 'bold'\n    }, \n    autopct='%1.0f%%',\n    pctdistance=0.75, \n    labeldistance=1.2\n)\n\nfor t in pcttext : \n    t.set_color(\"white\"),\n\nfor t in pcttext[:3] : \n    t.set_fontsize(18)\n\n\nax.text(\n    x=0, y=-1.5,\n    s=\"Family Size:\",\n    ha='center',\n    color=colors_dark[1],\n    fontweight='bold',\n    fontsize=12\n)\n\nax.legend(labels, loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=6, borderpad=1, frameon=False, fontsize=12)\n\n# plt.title(\"tes\", loc='center', x=0.6, y=1.08, fontsize=14, color=colors_dark[2])\nplt.suptitle(\"Sizes of Family\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.title(\"It seems that most people who travels with family, travels with a family of three or less\", loc='center', ha='center', x=0.53, y=1, fontsize=14, color=colors_dark[2])\nplt.tight_layout()\nplt.show()","9c31686f":"fig, ax = plt.subplots(figsize=(12, 6))\nfare_mean = df_train.Fare.mean()\nfare_median = df_train.Fare.median()\n\n\nsns.kdeplot(data=df_train, x='Fare', shade=True, color=colors_blue[0], ax=ax, alpha=1)\n\nax.axvline(x=age_mean, linestyle='--', color=colors_blue[2])\nax.axvline(x=age_median, linestyle='--', color=colors_blue[3])\n\nax.annotate(\n    text=\"Average\\n {:.2f}\".format(age_mean),\n    fontsize=12,\n    xy=(fare_mean, 0.021),\n    xytext=(fare_mean+20, 0.022),\n    color=colors_dark[2],\n    arrowprops=dict(\n        arrowstyle= '-',\n        color=colors_dark[2],\n        ls='--'\n    )\n)\n\nax.annotate(\n    text=\"Median: {:.2f}\".format(age_median),\n    fontsize=12,\n    xy=(fare_median, 0.02),\n    xytext=(fare_median-80, 0.025),\n    color=colors_dark[2],\n    arrowprops=dict(\n        arrowstyle= '-',\n        color=colors_dark[2],\n        ls='--'\n    )\n)\n\n\nax.grid(axis='y', alpha=0.2)\nax.set_axisbelow(True)\nax.tick_params(labelsize=12)\nax.set_xlabel(\"Fare\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"Density\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\nplt.suptitle(\"How is The Fare Distributed?\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.title(\"It looks like that the ticket price is mostly gather on 10-24, we can also see a little hill on between 70-100\", loc='center', x=0.48, y=1.05, fontsize=14, color=colors_dark[2])\nplt.tight_layout()\nplt.show()","e5a51f23":"bins = [0, 25, 90, 150, np.inf]\nlabels = [\"Ticket 1\", \"Ticket 2\", \"Ticket 3\", \"Ticket 4\"]\n\ndf_train['Fare Group'] = pd.cut(df_train['Fare'], bins=bins, labels=labels) ","28370780":"df_train.Cabin = df_train.Cabin.fillna(\"No Cabin\")\ndf_train[\"Cabin\"] = df_train[\"Cabin\"].str[0]","2e8335ac":"cabin_mapping = {\n    \"N\" : \"Don't have cabin\",\n}\n\ndf_train = df_train.replace({\"Cabin\": cabin_mapping})","79a2952c":"def to_pct(row) : \n    return row*100 \/ row.sum()\n\ndf = df_train.groupby(['Cabin', 'Survived']).count()['Name'].unstack()\ndf = df.apply(to_pct, axis=1).reset_index()\n\nmean_survive = df.mean()[1]\n\nfig, ax = plt.subplots(2, 1, figsize=(12, 12))\n\n\nbars0 = sns.countplot(\n    data=df_train, \n    x='Cabin', \n    hue='Survived', \n    palette=list([colors_blue[1], colors_dark[-1]]),\n    ax=ax[0],\n    hue_order=[1, 0],\n    order = df.Cabin\n)\n\nbars1 = ax[1].bar(x=df['Cabin'], height=df[1], label='Survived', color=colors_blue[1])\nbars2 = ax[1].bar(x=df['Cabin'], height=df[0], bottom=df[1], label=\"Dead\", color=colors_dark[-1], alpha=0.3)\n\nline1 = ax[1].axhline(y=mean_survive, linestyle=\"--\", color=colors_red[-2])\n\nfor bar in bars1 : \n    height = bar.get_height() \n    x = bar.get_x() \n    \n    ax[1].text(\n        x=x+0.4, y=height \/\/ 2,\n        va='center', ha='center', \n        s=f\"{round(height)}%\",\n        color='white',\n        fontweight='bold',\n        fontsize=24\n    )\n    \nax[1].text(\n    x=8, \n    y=mean_survive,\n    s=\"Average rate {:.2f}%\".format(mean_survive),\n    backgroundcolor=\"#2A5D61\",\n    color=\"white\",\n    fontweight='bold',\n    fontsize=12\n)\n    \n# AX settings\n    \nax[0].legend([\"Survived\", \"Not Survived\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False, fontsize=12)\nax[0].grid(axis='y', alpha=0.2)\nax[0].set_axisbelow(True)\nax[0].tick_params(labelsize=12)\nax[0].set_ylabel(\"Survival Count\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax[0].yaxis.set_major_formatter(tick.FuncFormatter(reformat_large_tick_values))\nax[0].set_xlabel(None)\n\nax[0].spines['right'].set_visible(False)\nax[0].spines['left'].set_visible(False)\nax[0].spines['top'].set_visible(False)\n    \nax[1].legend([\"Average rate of survival\", \"Survival Rate (%)\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False, fontsize=12)\nax[1].grid(axis='y', alpha=0.2)\nax[1].set_axisbelow(True)\nax[1].tick_params(labelsize=12)\nax[1].set_ylabel(\"Percentage %\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n\nax[1].spines['right'].set_visible(False)\nax[1].spines['left'].set_visible(False)\nax[1].spines['top'].set_visible(False)\n\nfig.text(ha='center', va='center', x=0.5, y=0.935, s=\"Assuming that the missing value on Cabin is the people who is not on any cabin, most people dont belong in any cabin\", fontsize=14, color=colors_dark[2])\nplt.suptitle(\"How is the Survival Rate for Every Cabin?\\n\\n\\n\", fontsize=18, fontweight='bold', color=colors_dark[0])\n\nplt.tight_layout()\nplt.show()","e780e8f2":"data_train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv\")\ndata_test = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv\")\n\ndata_train.drop('PassengerId', axis=1, inplace=True)\ndata_test.drop('PassengerId', axis=1, inplace=True)","8314518f":"data_train['Age'] = data_train['Age'].fillna(data_train.groupby('Pclass')['Age'].transform('median'))\ndata_train['Fare'] = data_train['Fare'].fillna(data_train['Fare'].mean())\n\ndata_test['Age'] = data_test['Age'].fillna(data_test.groupby('Pclass')['Age'].transform('median'))\ndata_test['Fare'] = data_test['Fare'].fillna(data_test['Fare'].mean())","53c17e2d":"bins = [0, 5, 17, 30, 50, 100]\nlabels = [\"Baby\", \"Children\", \"Young Adult\", \"Middle Aged\", \"Senior\"]\n\ndata_train['Age Group'] = pd.cut(data_train['Age'], bins=bins, labels=labels) \ndata_test['Age Group'] = pd.cut(data_test['Age'], bins=bins, labels=labels) ","6e37f2a8":"bins = [0, 25, 90, 150, np.inf]\nlabels = [\"Ticket 1\", \"Ticket 2\", \"Ticket 3\", \"Ticket 4\"]\n\ndata_train['Fare Group'] = pd.cut(data_train['Fare'], bins=bins, labels=labels) \ndata_test['Fare Group'] = pd.cut(data_test['Fare'], bins=bins, labels=labels) ","c6f37c69":"def hasfam(x) : \n    return \"With family\" if x.Famsize != 1 else \"Alone\"\n\ndata_train[\"Famsize\"] = data_train[\"SibSp\"] + data_train[\"Parch\"] + 1\ndata_test[\"Famsize\"] = data_test[\"SibSp\"] + data_test[\"Parch\"] + 1\n\n\ndata_train['Hasfam'] = data_train.apply(hasfam, axis=1)\ndata_test['Hasfam'] = data_test.apply(hasfam, axis=1)","2d88d884":"def onClass3(x) :\n    return \"Yes\" if x.Pclass == 3 else \"No\"\n\n\ndata_train['On Pclass 3'] = data_train.apply(onClass3, axis=1)\ndata_test['On Pclass 3'] = data_test.apply(onClass3, axis=1)","fdc8d03a":"embark_mapping = {\n    \"S\" : \"Southampton\",\n    'C' : \"Cherbourg\", \n    \"Q\" : \"Queenstown\",\n    np.nan : \"Not Embarked\"\n}\n\ndata_train = data_train.replace({\"Embarked\": embark_mapping})\ndata_test = data_test.replace({\"Embarked\": embark_mapping})","8c3ac9b6":"data_train.Cabin = data_train.Cabin.fillna(\"No Cabin\")\ndata_train[\"Cabin\"] = data_train[\"Cabin\"].str[0]\n\ndata_test.Cabin = data_test.Cabin.fillna(\"No Cabin\")\ndata_test[\"Cabin\"] = data_test[\"Cabin\"].str[0]","4d7df07c":"col_to_use = [\"Age\", \"Fare\", \"Fare Group\", \"Age Group\", \"Sex\", \"Pclass\", \"SibSp\", \"Parch\", \"Embarked\", \"Famsize\", \"On Pclass 3\", \"Cabin\", \"Survived\"]\ncol_cat = [\"Sex\", \"Embarked\", \"On Pclass 3\", \"Cabin\"]\ndata_train = data_train[col_to_use]\ndata_test = data_test[col_to_use[:-1]]","acd8f027":"dum = pd.get_dummies(data_train[col_cat], prefix=['s', 'e', 'o', 'c'])\n\ndata_train = data_train.drop([\"Sex\", \"Embarked\", \"On Pclass 3\", \"Cabin\"], axis=1)\ndata_train = pd.concat([data_train, dum], axis=1)","6a5ba1e4":"dum = pd.get_dummies(data_test[col_cat], prefix=['s', 'e', 'o', 'c'])\n\ndata_test = data_test.drop([\"Sex\", \"Embarked\", \"On Pclass 3\", \"Cabin\"], axis=1)\ndata_test = pd.concat([data_test, dum], axis=1)","bcc2557e":"enc = OrdinalEncoder() \n\ndata_train[\"Age Group\"] = enc.fit_transform(data_train[[\"Age Group\"]])\ndata_test[\"Age Group\"] = enc.fit_transform(data_test[[\"Age Group\"]])","a0f1e6df":"enc = OrdinalEncoder() \n\ndata_train[\"Fare Group\"] = enc.fit_transform(data_train[[\"Fare Group\"]])\ndata_test[\"Fare Group\"] = enc.fit_transform(data_test[[\"Fare Group\"]])","f0041255":"X_data_train = data_train.drop('Survived', axis=1)\ny_data_train = data_train.Survived","0473f341":"X_data_train","f9bd8d84":"X_train, X_test, y_train, y_test = train_test_split(X_data_train, y_data_train, test_size=0.33)","c43a04be":"clf_rfc = RandomForestClassifier(\n    n_estimators=1100,\n    criterion='gini',\n    max_depth=7,\n    max_leaf_nodes=4,\n    random_state=4211\n)\n\nclf_rfc.fit(X_train, y_train)\n\n# clf_rfc.fit(X_data_train, y_data_train)\n\n# y_pred = clf_rfc.predict(data_test)\ny_pred = clf_rfc.predict(X_test)\n\nprint(classification_report(y_test, y_pred))","5b9fdb20":"conf = confusion_matrix(y_test, y_pred)\n\nfig, ax = plt.subplots(figsize=(6, 5))\ng = sns.heatmap(conf, annot=True, fmt='', cmap=cm, ax=ax, annot_kws={\"size\": 14})\n\nplt.tight_layout()\nplt.show()","e3e1e259":"importance = clf_rfc.feature_importances_\n\nfig, ax = plt.subplots(figsize=(14, 6))\n\nzipped = sorted(list(zip(X_train.columns, importance)), key= lambda x : x[1], reverse=True)\nx, importance = list(zip(*zipped))\n\n\nbars = ax.bar(x, importance)\n\nfor bar in bars : \n    height = bar.get_height()\n    if height >= 0 : \n        bar.set_color(colors_blue[0])\n    else :\n        bar.set_color(colors_blue[2])\n        \nax.set_xticks(x)\nax.set_xticklabels(x, rotation=-45, ha='left')\nax.grid(axis='y', alpha=0.2)\nax.set_axisbelow(True)\nax.tick_params(labelsize=12)\nax.set_xlabel(\"Features\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"Score\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\n\nplt.suptitle(\"Random Forest Feature Importance Score\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.title(\"\", loc='center', x=0.48, y=1.05, fontsize=14, color=colors_dark[2])\nplt.tight_layout()\nplt.show()","68d50551":"clf_lr = LogisticRegression(\n    max_iter=1000,\n    C=2,\n    verbose=1,\n    solver='liblinear'\n)\n\n# clf_lr.fit(X_data_train, y_data_train)\n\nclf_lr.fit(X_train, y_train)\n\ny_pred = clf_lr.predict(X_test)\n\nprint(classification_report(y_test, y_pred))","0a08ce43":"conf = confusion_matrix(y_test, y_pred)\n\nfig, ax = plt.subplots(figsize=(6, 5))\ng = sns.heatmap(conf, annot=True, fmt='', cmap=cm, ax=ax, annot_kws={\"size\": 14})\n\nplt.tight_layout()\nplt.show()","80cc5d03":"importance = clf_lr.coef_[0]\n\nfig, ax = plt.subplots(figsize=(14, 6))\n\nbars = ax.bar(X_train.columns, importance)\n\nfor bar in bars : \n    height = bar.get_height()\n    if height >= 0 : \n        bar.set_color(colors_blue[0])\n    else :\n        bar.set_color(colors_blue[2])\n        \nax.set_xticks(X_train.columns)\nax.set_xticklabels(X_train.columns, rotation=-45, ha='left')\nax.grid(axis='y', alpha=0.2)\nax.set_axisbelow(True)\nax.tick_params(labelsize=12)\nax.set_xlabel(\"Features\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"Score\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\n\n\nplt.suptitle(\"Logistic Regression Feature Importance Score\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.title(\"Positive score indicate a feature that predict class 1, whilst negative score indicate a feature that predict class 0\", loc='center', x=0.48, y=1.05, fontsize=14, color=colors_dark[2])\nplt.tight_layout()\nplt.show()","5284cdaa":"# sub_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv\")\n# sub_df = sub_df[[\"PassengerId\"]]\n# sub_df[\"Survived\"] = y_pred","556bf588":"# sub_df.to_csv(\"sub.csv\", index=False)","681384e9":"# Colors","23df11be":"# Feature Engineering","e4d19b5d":"# Imputation","4bb804af":"# Analysis on Gender","dd7ea8f3":"# Intro\n\nAh Titanic problem, classic!\n\nTitanic problem is one of the legendary problem here in Kaggle, here we are given a dataset about passengers boarding in the Titanic that was sink On April 15, 1912 and try to predict whether a passenger given a certain feature to survived or not. \n\nSoo in this notebook i'm only trying to explore the data, finding some insight and plot some visualization to understand more about the data. Hope you liked it!\n\n\n### Reference\nOh and yeah, my visualization is highly inspired by Subin An visualizations, i highly reccomend his notebooks if you are trying to learn about data visualization like i am \ud83d\ude03! here are his link:\n\nreference: https:\/\/www.kaggle.com\/subinium\/kaggle-2020-visualization-analysis","d28c457a":"# Analysis on Family","b57ac91c":"# Conclusion So Far\n\n### Dataset\n* there is a lot of missing value on Cabin feature, might want to engineered it or drop it later \n\n### Gender\n* Most people boarding the Titanic are Male\n* Female has a lot higher rate of survival compared with male\n* It seems like no matter what the gender is people boarding on Pclass=3 has a low chance of survival whilst Pclass=1 has the highest chance of survival\n\n### Age\n* Most people that boarding the Titanic are young adult or seniors \n* Most people who did not survive are young adult or middle aged \n* Children and Senior has a higher \n* It seems like no matter what the age is people boarding on Pclass=3 has a low chance of survival whilst Pclass=1 has the highest chance of survival\n\n### Embarked\n* Most people on Titanic embarked from Southampton\n* People embarked from Cherbourg has a higher rate of survival whilst people from Southampton has the lowest rate of survival\n* People from Cherbourg mostly board the Pclass=1 whilst people from Southampton mostly board the Pclass=3\n\n### Family \n* Most people in Titanic travels alone\n* People who travels alone has a lower rate of survival \n* Most people who travels in family, travels in family of 3 or less\n\n\n# Note\nHi thank you for reading my notebook, i hope you enjoy it and got a lot of insight \ud83d\ude03.\nIf you have any criticism or feedback please feel free to comment!","70164c31":"# Modelling and Feature Importance","64774cae":"# Analysis on Fare","0e9c57c8":"# Analysis on Age","f7ea2999":"# Analysis on Embarked","408fed77":"# Analysis on Cabin"}}