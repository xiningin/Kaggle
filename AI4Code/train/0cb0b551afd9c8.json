{"cell_type":{"d9d11ad9":"code","8beb7869":"code","9a7113f4":"code","4d6b5e88":"code","df622aaa":"code","74eadbc1":"code","005cc6fb":"code","02ac0ff8":"code","981abaf9":"code","bdd23b2b":"code","d3a6d602":"code","679825df":"code","2fc8fad3":"code","04d31b3d":"code","aca4bfdc":"code","c17bccec":"code","c889d7a0":"code","f7fb86b0":"code","03cd0031":"code","b34f70c0":"code","bd29a321":"code","f74c5099":"code","987621bc":"code","07960d23":"code","72548869":"code","5a84c260":"code","6c3d1eb4":"code","c836e027":"code","686cf1d9":"markdown","056f87f1":"markdown","72cc3a17":"markdown","d46254c5":"markdown","ad550f3c":"markdown","3ac1ee6e":"markdown","34d03c23":"markdown","64c5c3f5":"markdown","ca32df82":"markdown","a0861905":"markdown","2855847b":"markdown","607ded23":"markdown","9bcecbb4":"markdown","d537ad57":"markdown","6200eb47":"markdown","044bb3d0":"markdown","c82f133c":"markdown","4f0be785":"markdown","e7c02e56":"markdown"},"source":{"d9d11ad9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport plotly\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nfrom plotly.graph_objs import *\nimport seaborn as sns\ninit_notebook_mode()\nprint(os.listdir(\"..\/input\"))","8beb7869":"data_summary = pd.read_csv('..\/input\/copa-cases-summary.csv')\ndata_officer = pd.read_csv('..\/input\/copa-cases-by-involved-officer.csv')\ndata_complainant = pd.read_csv('..\/input\/copa-cases-by-complainant-or-subject.csv')","9a7113f4":"data_summary.head(5)","4d6b5e88":"data_officer.head(5)","df622aaa":"data_complainant.head(5)","74eadbc1":"def time_of_day_to_desc(x):\n    if x < 7:\n        return \"Early Morning\"\n    if x < 12:\n        return \"Morning\"\n    if x < 18:\n        return \"Afternoon\"\n    if x < 22:\n        return \"Evening\"\n    return \"Night\"\n\ndef weekend_or_not(x):\n    # Friday , Saturday, Sunday \n    if x is 6 or x is 7 or x is 1:\n        return \"Weekend\"\n    return \"Weekday\"\n\ndef is_black_person_involved(x):\n    if  not pd.isna(x) and 'African American \/ Black' in x:\n        return \"Yes\"\n    return \"No\"","005cc6fb":"data_summary['COMPLAINT_DATE'] = pd.to_datetime(data_summary['COMPLAINT_DATE'], infer_datetime_format=True)\ndata_complainant['COMPLAINT_DATE'] = pd.to_datetime(data_complainant['COMPLAINT_DATE'], infer_datetime_format=True)\ndata_complainant['RACE_OF_COMPLAINANT'] = data_complainant['RACE_OF_COMPLAINANT'].apply(lambda x: x if x != 'African American \/ Black' else 'Black')\ndata_summary['YEAR_OF_COMPLAINT'] = data_summary['COMPLAINT_DATE'].apply(lambda x:x.year)\ndata_complainant['YEAR_OF_COMPLAINT'] = data_complainant['COMPLAINT_DATE'].apply(lambda x:x.year)\ndata_summary['HOUR_DESC'] = data_summary['COMPLAINT_HOUR'].apply(time_of_day_to_desc)\ndata_complainant['HOUR_DESC'] = data_complainant['COMPLAINT_HOUR'].apply(time_of_day_to_desc)\ndata_complainant['IS_WEEKEND'] = data_complainant['COMPLAINT_DAY'].apply(weekend_or_not)\ndata_summary['IS_WEEKEND'] = data_summary['COMPLAINT_DAY'].apply(weekend_or_not)\ndata_summary['IS_BLACK_INV'] = data_summary['RACE_OF_COMPLAINANTS'].apply(is_black_person_involved)","02ac0ff8":"data_summary.head(5)","981abaf9":"print(\"Python Datetime Day: {} \\nThe Number of the Day in the Data: {}\".format(data_summary.iloc[0][\"COMPLAINT_DATE\"].strftime(\"%A\"), data_summary.iloc[0][\"COMPLAINT_DAY\"]))","bdd23b2b":"data_summary['YEAR_OF_COMPLAINT'].value_counts().plot('barh')","d3a6d602":"temp = data_summary['CURRENT_CATEGORY'].value_counts()\nfig = {\n  \"data\": [\n    {\n      \"values\": temp.values,\n      \"labels\": temp.index,\n      \"name\": \"Complaints Type\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .1,\n      \"type\": \"pie\"\n    }],\n  \"layout\": {\n        \"title\":\"Complaints Type\"\n    }\n}\niplot(fig, filename='pie')","679825df":"temp = data_summary['POLICE_SHOOTING'].value_counts()\nfig = {\n  \"data\": [\n    {\n      \"values\": temp.values,\n      \"labels\": temp.index,\n      \"name\": \"Is POLICE_SHOOTING?\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .1,\n      \"type\": \"pie\"\n    }],\n  \"layout\": {\n        \"title\":\"Complaints - POLICE_SHOOTING\"\n    }\n}\niplot(fig, filename='pie')","2fc8fad3":"temp = data_summary['CURRENT_STATUS'].value_counts()\nfig = {\n  \"data\": [\n    {\n      \"values\": temp.values,\n      \"labels\": temp.index,\n      \"name\": \"CURRENT_STATUS\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .1,\n      \"type\": \"pie\"\n    }],\n  \"layout\": {\n        \"title\":\"Complaints - CURRENT_STATUS\"\n    }\n}\niplot(fig, filename='pie')","04d31b3d":"fig, ax = plt.subplots(nrows=4, ncols=3)\nplt.subplots_adjust(left=0, right=4.2, top=5, bottom=0)\nyear = 2007\ncolumn = 0\nfor row in ax:\n    for col in row:\n        col.set_title(str(year))\n        tempush = data_summary[data_summary['YEAR_OF_COMPLAINT'] == year]\n        prop_df = (tempush['CURRENT_STATUS']\n                   .value_counts(normalize=True)\n                   .rename('Percentage')\n                   .reset_index())\n        g = sns.barplot(y=\"index\", x=\"Percentage\", data=prop_df, ax=col, orient='h')\n        g.set_ylabel('CURRENT_STATUS')\n        year += 1","aca4bfdc":"fig, ax = plt.subplots(nrows=4, ncols=3)\nplt.subplots_adjust(left=0, right=4.2, top=5, bottom=0)\nyear = 2007\ncolumn = 0\nfor row in ax:\n    for col in row:\n        col.set_title(str(year))\n        tempush = data_summary[data_summary['YEAR_OF_COMPLAINT'] == year]\n        prop_df = (tempush['POLICE_SHOOTING']\n                   .value_counts(normalize=True)\n                   .rename('Percentage')\n                   .reset_index())\n        g = sns.barplot(y=\"index\", x=\"Percentage\", data=prop_df, ax=col, orient='h')\n        g.set_ylabel('POLICE_SHOOTING')\n        year += 1","c17bccec":"fig, ax = plt.subplots(nrows=4, ncols=3)\nplt.subplots_adjust(left=0, right=4.2, top=5, bottom=0)\nyear = 2007\ncolumn = 0\nfor row in ax:\n    for col in row:\n        col.set_title(str(year))\n        tempush = data_summary[data_summary['YEAR_OF_COMPLAINT'] == year]\n        prop_df = (tempush['CURRENT_CATEGORY']\n                   .value_counts(normalize=True)\n                   .rename('Percentage')\n                   .reset_index())\n        g = sns.barplot(y=\"index\", x=\"Percentage\", data=prop_df, ax=col, orient='h')\n        g.set_ylabel('CURRENT_CATEGORY')\n        year += 1","c889d7a0":"fig, ax = plt.subplots(nrows=12, ncols=3)\nplt.subplots_adjust(left=0, right=2.2, top=12, bottom=0)\ni = 0\nfor row in ax:\n    for col, (colum, ordere) in zip(row, [('HOUR_DESC', [\"Early Morning\", \"Morning\", \"Afternoon\", \"Evening\", \"Night\"]),('COMPLAINT_DAY',list(range(1, 7 + 1))), ('COMPLAINT_MONTH', list(range(1, 12 + 1)))]):\n        tempush = data_summary[data_summary['YEAR_OF_COMPLAINT'] == 2007 + i]\n        col.set_title(str(2007 + i))\n        g = sns.countplot(ax=col, data=tempush, x=colum, palette='Set1', order=ordere)\n    i += 1    ","f7fb86b0":"order = ['20-29', '30-39', '0-19', '40-49', '50-59', '60-69', '70+', 'Unknown']\nfig, ax = plt.subplots(nrows=4, ncols=3)\nplt.subplots_adjust(left=0, right=4.2, top=5, bottom=0)\nyear = 2007\ncolumn = 0\nfor row in ax:\n    for col in row:\n        col.set_title(str(year))\n        tempush = data_complainant[data_complainant['YEAR_OF_COMPLAINT'] == year]\n        prop_df = (tempush['AGE_OF_COMPLAINANT']\n                   .value_counts(normalize=True)\n                   .rename('Percentage')\n                   .reset_index())\n        g = sns.barplot(y=\"index\", x=\"Percentage\", data=prop_df, ax=col, orient='h', order=order)\n        g.set_ylabel('AGE_OF_COMPLAINANTS')\n        year += 1","03cd0031":"sns.catplot(data=data_complainant, x='AGE_OF_COMPLAINANT', kind='count', hue='HOUR_DESC', col='IS_WEEKEND', order=order)","b34f70c0":"gender = data_complainant.groupby('LOG_NO').agg({'COMPLAINT_DATE': 'last', 'COMPLAINT_HOUR' : 'count'}).reset_index()\norder = ['Male', 'Female']\nfig, ax = plt.subplots(nrows=4, ncols=3)\nplt.subplots_adjust(left=0, right=4.2, top=5, bottom=0)\nyear = 2007\ncolumn = 0\nfor row in ax:\n    for col in row:\n        col.set_title(str(year))\n        tempush = data_complainant[data_complainant['YEAR_OF_COMPLAINT'] == year]\n        prop_df = (tempush['SEX_OF_COMPLAINANT']\n                   .value_counts(normalize=True)\n                   .rename('Percentage')\n                   .reset_index())\n        g = sns.barplot(y=\"index\", x=\"Percentage\", data=prop_df, ax=col, orient='h', order=order)\n        g.set_ylabel('SEX_OF_COMPLAINANT')\n        year += 1","bd29a321":"sns.catplot(data=data_complainant, x='SEX_OF_COMPLAINANT', kind='count', hue='HOUR_DESC', col='IS_WEEKEND', order=order)","f74c5099":"sns.catplot(data=data_complainant, x='SEX_OF_COMPLAINANT', kind='count', hue='RACE_OF_COMPLAINANT', col='HOUR_DESC', order=['Male', 'Female'], col_order=[\"Early Morning\", \"Morning\", \"Afternoon\", \"Evening\", \"Night\"], hue_order=['Black', 'Hispanic', 'White', 'Unknown', 'Asian or Pacific Islander', 'American Indian or Alaskan Native'])","987621bc":"temp = data_summary.set_index('COMPLAINT_DATE').groupby(pd.TimeGrouper('M')).count().dropna().reset_index()\ntrace_high = go.Scatter(\n                x=temp['COMPLAINT_DATE'],\n                y=temp['LOG_NO'],\n                name = \"Crimes Count\",\n                line = dict(color = '#17BECF'),\n                opacity = 0.8)\n\ndata = [trace_high]\n\nlayout = dict(\n    title='Crimes Count Over Time',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label='1m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=6,\n                     label='6m',\n                     step='month',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = True\n        ),\n        type='date'\n    )\n)\nfig = dict(data=data, layout=layout)\niplot(fig, filename = \"Manually Set Range\")","07960d23":"scatters = []\ncolors_list = ['#2da6fe', '#B4F0AE', '#c47943', '#2fa1d6', '#2fa1d6', '#5a59cc', '#901e86']\nfor i, race in enumerate(['Black', 'Hispanic', 'White', 'Asian or Pacific Islander', 'American Indian or Alaskan Native', 'Unknown']):\n        raced_df = data_complainant[data_complainant['RACE_OF_COMPLAINANT'] == race].groupby('LOG_NO').agg({'COMPLAINT_DATE': 'last', 'COMPLAINT_HOUR' : 'count'}).reset_index()\n        temp = raced_df.set_index('COMPLAINT_DATE').groupby(pd.TimeGrouper('Q')).count().dropna().reset_index()\n        trace_high = go.Scatter(\n                        x=temp['COMPLAINT_DATE'],\n                        y=temp['COMPLAINT_HOUR'],\n                        name = race,\n                        line = dict(color = colors_list[i]),\n                        opacity = 0.8)\n        scatters.append(trace_high)\n\ndata = scatters\nlayout = dict(\n    title='Crimes Count Over Time (Quarters)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label='1m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=6,\n                     label='6m',\n                     step='month',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = True\n        ),\n        type='date'\n    ),\n)\nys = [250, 225, 200, 175, 150, 125]\ntrace0 = go.Scatter(\n    x=['2013-07-01', '2014-07-30', '2014-08-01', '2015-01-30', '2016-07-01'],\n    y=ys,\n    name='BLM Events',\n    text=['BLM Movement Founded',\n          '#icantbreathe is trending',\n          'Furgeson',\n          'Baltimore Riots',\n          'Dallas Riots'],\n    mode='text',\n)\ndata.append(trace0)\nfounded = {'type':'line', 'x0':'2013-07-13', 'x1':'2013-07-13', 'y0':0, 'y1':250, 'line':dict(color='rgb(0, 0, 0)', width=1)}\nicantbreath = {'type':'line', 'x0':'2014-07-17', 'x1':'2014-07-17', 'y0':0, 'y1':250, 'line':dict(color='rgb(0, 0, 0)', width=1)}\nfurgeson = {'type':'line', 'x0':'2014-08-09', 'x1':'2014-08-09', 'y0':0, 'y1':250, 'line':dict(color='rgb(0, 0, 0)', width=1)}\ndallas = {'type':'line', 'x0':'2016-07-07', 'x1':'2016-07-07', 'y0':0, 'y1':250, 'line':dict(color='rgb(0, 0, 0)', width=1)}\nbaltimore = {'type':'line', 'x0':'2015-01-12', 'x1':'2015-01-12', 'y0':0, 'y1':250, 'line':dict(color='rgb(0, 0, 0)', width=1)}\nlayout[\"shapes\"] = [founded, icantbreath, furgeson, baltimore, dallas]\nfig = dict(data=data, layout=layout)\niplot(fig, filename = \"Manually Set Range\")","72548869":"scatters = []\ncolors_list = ['#2da6fe', '#B4F0AE', '#c47943', '#2fa1d6', '#2fa1d6', '#5a59cc', '#901e86', '#4528C9', '#D0F2AE']\nfor i, age in enumerate(['20-29', '30-39', '0-19', '40-49', '50-59', '60-69', '70+', 'Unknown']):\n        raced_df = data_complainant[data_complainant['RACE_OF_COMPLAINANT'] == 'Black']\n        raced_df = raced_df[raced_df['AGE_OF_COMPLAINANT'] == age].groupby('LOG_NO').agg({'COMPLAINT_DATE': 'last', 'COMPLAINT_HOUR' : 'count'}).reset_index()\n        temp = raced_df.set_index('COMPLAINT_DATE').groupby(pd.TimeGrouper('Q')).count().dropna().reset_index()\n        trace_high = go.Scatter(\n                        x=temp['COMPLAINT_DATE'],\n                        y=temp['COMPLAINT_HOUR'],\n                        name = age,\n                        line = dict(color = colors_list[i]),\n                        opacity = 1)\n        scatters.append(trace_high)\n\ndata = scatters\nlayout = dict(\n    title='Black Crimes Count Over Time W.R.T to Age (Quarters)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label='1m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=6,\n                     label='6m',\n                     step='month',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = True\n        ),\n        type='date'\n    ),\n)\nys = [250, 225, 200, 175, 150, 125]\ntrace0 = go.Scatter(\n    x=['2013-07-01', '2014-07-30', '2014-08-01', '2015-01-30', '2016-07-01'],\n    y=ys,\n    name='BLM Events',\n    text=['BLM Movement Founded',\n          '#icantbreathe is trending',\n          'Furgeson',\n          'Baltimore Riots',\n          'Dallas Riots'],\n    mode='text',\n)\ndata.append(trace0)\nfounded = {'type':'line', 'x0':'2013-07-13', 'x1':'2013-07-13', 'y0':0, 'y1':250, 'line':dict(color='rgb(0, 0, 0)', width=1)}\nicantbreath = {'type':'line', 'x0':'2014-07-17', 'x1':'2014-07-17', 'y0':0, 'y1':250, 'line':dict(color='rgb(0, 0, 0)', width=1)}\nfurgeson = {'type':'line', 'x0':'2014-08-09', 'x1':'2014-08-09', 'y0':0, 'y1':250, 'line':dict(color='rgb(0, 0, 0)', width=1)}\ndallas = {'type':'line', 'x0':'2016-07-07', 'x1':'2016-07-07', 'y0':0, 'y1':250, 'line':dict(color='rgb(0, 0, 0)', width=1)}\nbaltimore = {'type':'line', 'x0':'2015-01-12', 'x1':'2015-01-12', 'y0':0, 'y1':250, 'line':dict(color='rgb(0, 0, 0)', width=1)}\nlayout[\"shapes\"] = [founded, icantbreath, furgeson, baltimore, dallas]\nfig = dict(data=data, layout=layout)\niplot(fig, filename = \"Manually Set Range\")","5a84c260":"print(\"Top 10 Catagories Frequency:\\n-------------------------------------------------------------\")\nfreq_cat = data_summary['CURRENT_CATEGORY'].value_counts().nlargest(10).index\nprint('\\n'.join(freq_cat))","6c3d1eb4":"g = sns.countplot(data=data_summary[data_summary['CURRENT_CATEGORY'].isin(freq_cat)], x='CURRENT_CATEGORY', hue='IS_BLACK_INV', orient='h', order=freq_cat)\ng.set_xticklabels(g.get_xticklabels(),rotation=90)","c836e027":"scatters = []\ncolors_list = ['#2da6fe', '#B4F0AE', '#c47943', '#2fa1d6', '#2fa1d6', '#5a59cc', '#901e86', '#4528C9', '#D0F2AE', '#F1343A']\nfor i, cat in enumerate(freq_cat):\n        raced_df = data_complainant[data_complainant['RACE_OF_COMPLAINANT'] == 'Black']\n        raced_df = data_complainant[data_complainant['CURRENT_CATEGORY'] == cat].groupby('LOG_NO').agg({'COMPLAINT_DATE': 'last', 'COMPLAINT_HOUR' : 'count'}).reset_index()\n        temp = raced_df.set_index('COMPLAINT_DATE').groupby(pd.TimeGrouper('Q')).count().dropna().reset_index()\n        trace_high = go.Scatter(\n                        x=temp['COMPLAINT_DATE'],\n                        y=temp['COMPLAINT_HOUR'],\n                        name = cat,\n                        line = dict(color = colors_list[i]),\n                        opacity = 1)\n        scatters.append(trace_high)\n\ndata = scatters\nlayout = dict(\n    title='Black Crimes Count by the 10 Most Frequent Categories (Quarters)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label='1m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=6,\n                     label='6m',\n                     step='month',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = True\n        ),\n        type='date'\n    ),\n)\nys = [250, 225, 200, 175, 150, 125]\ntrace0 = go.Scatter(\n    x=['2013-07-01', '2014-07-30', '2014-08-01', '2015-01-30', '2016-07-01'],\n    y=ys,\n    name='BLM Events',\n    text=['BLM Movement Founded',\n          '#icantbreathe is trending',\n          'Furgeson',\n          'Baltimore Riots',\n          'Dallas Riots'],\n    mode='text',\n)\ndata.append(trace0)\nfounded = {'type':'line', 'x0':'2013-07-13', 'x1':'2013-07-13', 'y0':0, 'y1':250, 'line':dict(color='rgb(0, 0, 0)', width=1)}\nicantbreath = {'type':'line', 'x0':'2014-07-17', 'x1':'2014-07-17', 'y0':0, 'y1':250, 'line':dict(color='rgb(0, 0, 0)', width=1)}\nfurgeson = {'type':'line', 'x0':'2014-08-09', 'x1':'2014-08-09', 'y0':0, 'y1':250, 'line':dict(color='rgb(0, 0, 0)', width=1)}\ndallas = {'type':'line', 'x0':'2016-07-07', 'x1':'2016-07-07', 'y0':0, 'y1':250, 'line':dict(color='rgb(0, 0, 0)', width=1)}\nbaltimore = {'type':'line', 'x0':'2015-01-12', 'x1':'2015-01-12', 'y0':0, 'y1':250, 'line':dict(color='rgb(0, 0, 0)', width=1)}\nlayout[\"shapes\"] = [founded, icantbreath, furgeson, baltimore, dallas]\nfig = dict(data=data, layout=layout)\niplot(fig, filename = \"Manually Set Range\")","686cf1d9":"# Analysis <a id=\"4\"><\/a>","056f87f1":"### W.R.T to Sex, Gender, Time","72cc3a17":"# Crimes Through Time <a id=\"4-10\"><\/a>\n-------------------------------------------","d46254c5":"### W.R.T to Time","ad550f3c":"## Complaints Status for Each Year <a id=\"4-4-1\"><\/a>","3ac1ee6e":"# Police Shootings <a id=\"4-3\"><\/a>","34d03c23":"## Complaints Type <a id=\"4-2\"><\/a>","64c5c3f5":"# Complaints Status <a id=\"4-4\"><\/a>\n------------------------------------------------------","ca32df82":"# Python's Datetime vs Data's datetime columns <a id=\"3\"><\/a>\n","a0861905":"### W.R.T to Time","2855847b":"## Trends and Seasonality <a id=\"4-7\"><\/a>\n-----------------------------------------","607ded23":"# Table of Contents\n--------------------------------------------------------------\n1. [Introudction](#1)\n2. [Packages Import & Data Head & Util Functions](#2)\n3. [Python's Datetime vs Data's datetime columns](#3)\n4. [Analysis](#4)\n    1. [Number of Crimes Per Year](#4-1)\n    2. [Complaints Type](#4-2)\n    3. [Police Shootings](#4-3)\n    4. [Complaints Status](#4-4)\n    5. [Complaints Status for Each Year](#4-4-1)\n    6. [Catagory of Charges for Each Year](#4-5)\n    7. [Trends and Seasonality](#4-6)\n    8. [Age](#4-7)\n    9. [Gender](#4-8)\n    10. [Crimes Through Time](#4-9)","9bcecbb4":"# Age <a id=\"4-8\"><\/a>\n-----------------------------------------","d537ad57":"# Introduction <a id=\"1\"><\/a>\n------------------------------------------\n>Chicago (\/\u0283\u026a\u02c8k\u0251\u02d0\u0261o\u028a\/ (About this sound listen), locally also \/-\u02c8k\u0254\u02d0-\/), formally the City of Chicago, is located on the shores of freshwater Lake Michigan, and is the third most populous city in the United States. As of the 2017 census-estimate, Chicago has a population of 2,716,450, which makes it the most populous city in both the state of Illinois and the Midwestern United States. It is the county seat of Cook County, the second most populous county in the U.S. Chicago is the principal city of the Chicago metropolitan area, which is often referred to as \"Chicagoland.\" The Chicago metropolitan area has nearly 10 million people, is the third-largest in the United States, the fourth largest in North America, and the third largest metropolitan area in the world by land area.\n![Chicago](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/5\/5f\/Chicago_from_North_Avenue_Beach_June_2015_panorama_2.jpg\/1340px-Chicago_from_North_Avenue_Beach_June_2015_panorama_2.jpg)\n\n\n\n## Beat Map\n![Beatmap](http:\/\/3.bp.blogspot.com\/-aQV_vvpWDLQ\/VLN-0zrlDmI\/AAAAAAAAGxw\/G2EbOQY8rds\/s1600\/TOP_ROBBERY_BEATS_2014.jpg)\n","6200eb47":"## Number of Crimes Per Year  <a id=\"4-1\"><\/a>","044bb3d0":"# Gender <a id=\"4-9\"><\/a>\n-----------------------------------------","c82f133c":"## Catagory of Charges for Each Year <a id=\"4-6\"><\/a>\n-----------------------------------------","4f0be785":"## Police Shooting Cases Count for Each Year <a id=\"4-5\"><\/a>","e7c02e56":"# Packages Import & Data Head & Util Functions <a id=\"2\"><\/a>"}}