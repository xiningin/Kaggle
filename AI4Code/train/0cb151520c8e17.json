{"cell_type":{"433157fb":"code","79d33f1c":"code","504f7c13":"code","a630212c":"code","56c174af":"code","68236da6":"code","66a5b61f":"code","322eff73":"code","9d884e09":"code","a5eb6b60":"code","774a620f":"code","0c43b94b":"code","d2ea132c":"code","ce266f99":"code","02a84936":"code","ddf79219":"code","31367b9a":"code","b8b9db08":"code","2ec3ef59":"code","1f6fc540":"code","180a4d4e":"code","43eb6edc":"code","340af200":"code","4e1ae4fb":"code","0a97e1af":"code","b1ed8b8b":"code","434f0350":"markdown","80d27c01":"markdown","04e1da12":"markdown","9d2d9925":"markdown","1f9fe11c":"markdown","63178a0c":"markdown","38dcd981":"markdown","7b365c22":"markdown","cd569de4":"markdown","02b507e1":"markdown","70e96b4c":"markdown","054ec690":"markdown","21915327":"markdown","6fc2e91f":"markdown","44eef6f7":"markdown","9331307b":"markdown","868d9880":"markdown","afe6902d":"markdown","e2106639":"markdown","413747e2":"markdown","04da3232":"markdown","47bcc031":"markdown","967f34b7":"markdown","7c4b40db":"markdown","0bbc2ab6":"markdown","2a3edad7":"markdown"},"source":{"433157fb":"import math\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nimport tensorflow as tf","79d33f1c":"train = pd.read_csv('..\/input\/train.csv')\ntrain.head()","504f7c13":"train.describe()","a630212c":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","56c174af":"test.describe()","68236da6":"train.melt(id_vars=\"label\")['value'].isnull().sum()","66a5b61f":"test.melt()['value'].isnull().sum()","322eff73":"train['label'].value_counts().sort_index()","9d884e09":"# Plot\nplt.figure(figsize=(8, 4))\nsns.set_style(\"whitegrid\")\nsns.countplot(x=\"label\", data=train)\nplt.xlabel(\"Label\")\nplt.ylabel(\"Count\")\nplt.show()","a5eb6b60":"y = train['label']\nX = train.drop(['label'], axis = 1)","774a620f":"X = X \/ 255\ntest = test \/ 255","0c43b94b":"y = np.array(y)","d2ea132c":"X = X.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","ce266f99":"plt.imshow(X[0][:,:,0])","02a84936":"from sklearn.model_selection import StratifiedKFold","ddf79219":"# Tensorflow Keras CNN Model\nmodel = tf.keras.models.Sequential()\n\nmodel.add(tf.keras.layers.Conv2D(32, (3,3), padding = \"same\", activation = \"relu\", input_shape = X.shape[1:]))\nmodel.add(tf.keras.layers.MaxPool2D(2,2))\n\nmodel.add(tf.keras.layers.Conv2D(64, (3,3), padding = \"same\", activation = \"relu\"))\nmodel.add(tf.keras.layers.MaxPool2D(2,2))\n\nmodel.add(tf.keras.layers.Conv2D(128, (3,3), padding = \"same\", activation = \"relu\"))\nmodel.add(tf.keras.layers.MaxPool2D(2,2))\n\nmodel.add(tf.keras.layers.Conv2D(256, (3,3), padding = \"same\", activation = \"relu\"))\nmodel.add(tf.keras.layers.MaxPool2D(2,2))\n\nmodel.add(tf.keras.layers.Flatten())\n\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n","31367b9a":"model.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy', \n              metrics=['accuracy'])","b8b9db08":"model.summary()","2ec3ef59":"# Stratified K-Fold\nk_fold = StratifiedKFold(n_splits=12, random_state=12, shuffle=True)\n\nfor k_train_index, k_test_index in k_fold.split(X, y):\n    model.fit(X[k_train_index,:], y[k_train_index], epochs=5)","1f6fc540":"val_loss, val_acc = model.evaluate(X, y)\nval_acc","180a4d4e":"model.save(\"dr_cnn_model.h5\")","43eb6edc":"test_pred = model.predict(test)","340af200":"submission = pd.DataFrame()\nsubmission['ImageId'] = range(1, (len(test)+1))\nsubmission['Label'] = np.argmax(test_pred, axis=1)","4e1ae4fb":"submission.head()","0a97e1af":"submission.shape","b1ed8b8b":"submission.to_csv(\"submission.csv\", index=False)","434f0350":"# Handwritten Digit Recognizer using Stratified K-Fold Convolutional Neural Network","80d27c01":"### Modelling CNN","04e1da12":"##### Reading the Train Dataset","9d2d9925":"> ##### Conv2D --> MaxPool2D --> Conv2D --> MaxPool2D --> Conv2D --> MaxPool2D --> Conv2D --> MaxPool2D --> Flatten --> Dense Softmax","1f9fe11c":"#### Count of each labels","63178a0c":"##### Reading the Test Dataset","38dcd981":"#### Checking for NULL values (if any).","7b365c22":"##### Evalutaing the training dataset for the accuracy.","cd569de4":"### Predicting the submission dataframe","02b507e1":"### Exploratory Data Analsysis","70e96b4c":"#### Training with Stratified K-Fold\n\n##### The model is trained using 12 splits.","054ec690":"#### Dividing the training dataset into X and y","21915327":"#### Reshaping image to 28px X 28px dimension","6fc2e91f":"##### Saving the submission dataset as submission.csv","44eef6f7":"#### Converting labels to numpy array","9331307b":"#### Optimizer and loss function\n\n##### Adam is used as optiomizer with loss function of 'Sparse Categorical Crossentropy'.","868d9880":"### Importing important libraries","afe6902d":"###### Finding the predection for the test dataset.","e2106639":"#### Saving the model","413747e2":"##### Plots for number of training data for each number.","04da3232":"##### Building the submission dataset","47bcc031":"#### Importing Stratified K-Fold","967f34b7":"### Reading Datasets","7c4b40db":"#### Introduction\n\n###### This kernel uses Stratified K-Fold to train a simple Covolutional Neural Netwrok for the Digit Reconizer dataset.","0bbc2ab6":"#### Normalize the pixel data, i.e. converting values from 0 - 254 to 0 - 1 ","2a3edad7":"### Tensorflow Model"}}