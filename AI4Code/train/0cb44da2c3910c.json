{"cell_type":{"38b0a624":"code","2901e871":"code","2da6ef58":"code","a48f1b6e":"code","1cd0bca8":"code","6d0143eb":"code","a91b5d34":"code","e927416b":"code","50100182":"code","968f2607":"code","81d84736":"code","17190b69":"code","66ee46ff":"code","19f3a07f":"code","21903a1e":"code","f385ee8a":"code","d9de0858":"code","78bf9ced":"code","4184b473":"code","d03386b2":"code","48153671":"code","f1c44eb8":"code","09db4c48":"code","536ae3bb":"code","ec79046b":"code","be394d65":"code","2efa9d2b":"code","4603d3ac":"code","1a13ef46":"code","42d6f85d":"code","fc18100c":"code","6e0db97f":"code","751a770e":"code","a0b6717e":"code","18c01c75":"code","d9fee9c3":"code","165746eb":"code","03b2a721":"code","078d6bb5":"code","ab344a91":"code","e049ceaf":"code","4914c3af":"code","3db1e8f5":"code","4d8cbeaf":"code","bb07e8af":"code","950ef95e":"code","72eb53b6":"code","f51861aa":"code","64d44653":"code","15b33c70":"code","fe6ce6ff":"code","a22f20a7":"code","b836843c":"code","4144289c":"markdown","e51943f0":"markdown","4f961d29":"markdown","61f7875a":"markdown","c7866172":"markdown","41e8cf94":"markdown"},"source":{"38b0a624":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import rgb2hex\nfrom matplotlib.cm import get_cmap\nimport seaborn as sns\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder,StandardScaler\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\ninit_notebook_mode(connected=True)","2901e871":"train = pd.read_csv('\/kaggle\/input\/human-activity-recognition-with-smartphones\/train.csv')\ntrain.head()","2da6ef58":"test = pd.read_csv('\/kaggle\/input\/human-activity-recognition-with-smartphones\/test.csv')\ntest.head()","a48f1b6e":"#Removing Duplicate Rows : No duplicate rows found\ntrain = train.drop_duplicates()\nprint(train.shape)\n\n#Removing Duplicate Rows : No duplicate rows found\ntest = test.drop_duplicates()\nprint(test.shape)","1cd0bca8":"train.info()","6d0143eb":"test.info()","a91b5d34":"train.describe()","e927416b":"test.describe()","50100182":"## Finding Null values in the train dataset\ntrain.isnull().sum()\nprint(train.isnull().sum()[train.isnull().sum()>0])\n\ntest.isnull().sum()\nprint(test.isnull().sum()[test.isnull().sum()>0])","968f2607":"train.columns","81d84736":"test.columns","17190b69":"# Activity is the target column which has to be pridict\nprint(\"train_columns =\",train['Activity'].unique())\nprint(\"test_columns =\",test['Activity'].unique())","66ee46ff":"# Subject is the person ID's\nprint(\"train_subject =\",train['subject'].unique())\nprint(\"test_subject =\",test['subject'].unique())","19f3a07f":"#Bar plot of train activity\nplt.figure(figsize=(10,10))\nplt.title('Barplot of Activity')\nsns.countplot(train.Activity)\nplt.xticks(rotation=90)","21903a1e":"#Bar plot of train activity\nplt.figure(figsize=(10,10))\nplt.title('Barplot of Activity')\nsns.countplot(test.Activity)\nplt.xticks(rotation=90)","f385ee8a":"# plotting the visualization in the train distribution\nlabel_counts = train['Activity'].value_counts()\nn = label_counts.shape[0]\ncolormap = get_cmap('viridis')\ncolors = [rgb2hex(colormap(col)) for col in np.arange(0, 1.01, 1\/(n-1))]\n\ndata = go.Bar(x = label_counts.index,\n              y = label_counts,\n              marker = dict(color = colors))\n\nlayout = go.Layout(title = 'Smart Acticity Label Distribution',\n                  xaxis = dict(title = 'Activity'),\n                  yaxis = dict(title = 'Count'))\n\nfig = go.Figure(data=[data], layout = layout)\niplot(fig)","d9de0858":"# plotting the visualization in the train distribution\nlabel_counts = test['Activity'].value_counts()\nn = label_counts.shape[0]\ncolormap = get_cmap('viridis')\ncolors = [rgb2hex(colormap(col)) for col in np.arange(0, 1.01, 1\/(n-1))]\n\ndata = go.Bar(x = label_counts.index,\n              y = label_counts,\n              marker = dict(color = colors))\n\nlayout = go.Layout(title = 'Smart Acticity Label Distribution',\n                  xaxis = dict(title = 'Activity'),\n                  yaxis = dict(title = 'Count'))\n\nfig = go.Figure(data=[data], layout = layout)\niplot(fig)","78bf9ced":"print(\"train \\n\",train['Activity'].value_counts())\nprint(\"\\n\")\nprint(\"test :\\n\",test['Activity'].value_counts())","4184b473":"plt.figure(figsize=(10,10))\nplt.pie(np.array(train['Activity'].value_counts()), labels = sorted(train['Activity'].unique()), autopct = '%0.6f')","d03386b2":"plt.figure(figsize=(10,10))\nplt.pie(np.array(test['Activity'].value_counts()), labels = sorted(test['Activity'].unique()), autopct = '%0.6f')","48153671":"sns.boxplot(train['subject'])","f1c44eb8":"sns.boxplot(test['subject'])","09db4c48":"# Type of sensor used to take the data\nAcc = 0\nGyro = 0\nother = 0\n\nfor value in train.columns:\n    if \"Acc\" in str(value):\n        Acc += 1\n    elif \"Gyro\" in str(value):\n        Gyro += 1\n    else:\n        other += 1\n        \nplt.figure(figsize=(10,10))\nplt.bar(['Accelerometer', 'Gyroscope', 'Others'],[Acc,Gyro,other],color=('r','g','b'))","536ae3bb":"pd.crosstab(train.subject, train.Activity, margins = True).style.background_gradient(cmap='autumn_r')","ec79046b":"pd.crosstab(test.subject, test.Activity, margins = True).style.background_gradient(cmap='autumn_r')","be394d65":"sns.set(rc={'figure.figsize':(15,7)})\ncolours = [\"maroon\",\"coral\",\"darkorchid\",\"goldenrod\",\"purple\",\"darkgreen\",\"darkviolet\",\"saddlebrown\",\"aqua\",\"olive\"]\nindex = -1\nfor i in train.columns[0:10]:\n    index = index + 1\n    fig = sns.kdeplot(train[i] , shade=True, color=colours[index])\nplt.xlabel(\"Features\")\nplt.ylabel(\"Value\")\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig)","2efa9d2b":"sns.set(rc={'figure.figsize':(15,7)})\ncolours = [\"maroon\",\"coral\",\"darkorchid\",\"goldenrod\",\"purple\",\"darkgreen\",\"darkviolet\",\"saddlebrown\",\"aqua\",\"olive\"]\nindex = -1\nfor i in train.columns[0:10]:\n    index = index + 1\n    fig = sns.kdeplot(test[i] , shade=True, color=colours[index])\nplt.xlabel(\"Features\")\nplt.ylabel(\"Value\")\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig)","4603d3ac":"sns.set(rc={'figure.figsize':(15,7)})\ncolours = [\"maroon\",\"coral\",\"darkorchid\",\"goldenrod\",\"purple\",\"darkgreen\",\"darkviolet\",\"saddlebrown\",\"aqua\",\"olive\"]\nindex = -1\nfor i in train.columns[10:20]:\n    index = index + 1\n    fig = sns.kdeplot(train[i] , shade=True, color=colours[index])\nplt.xlabel(\"Features\")\nplt.ylabel(\"Value\")\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig)","1a13ef46":"sns.set(rc={'figure.figsize':(15,7)})\ncolours = [\"maroon\",\"coral\",\"darkorchid\",\"goldenrod\",\"purple\",\"darkgreen\",\"darkviolet\",\"saddlebrown\",\"aqua\",\"olive\"]\nindex = -1\nfor i in train.columns[10:20]:\n    index = index + 1\n    fig = sns.kdeplot(test[i] , shade=True, color=colours[index])\nplt.xlabel(\"Features\")\nplt.ylabel(\"Value\")\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig)","42d6f85d":"sns.set(rc={'figure.figsize':(15,7)})\ncolours = [\"maroon\",\"coral\",\"darkorchid\",\"goldenrod\",\"purple\",\"darkgreen\",\"darkviolet\",\"saddlebrown\",\"aqua\",\"olive\"]\nindex = -1\nfor i in train.columns[20:30]:\n    index = index + 1\n    fig = sns.kdeplot(train[i] , shade=True, color=colours[index])\nplt.xlabel(\"Features\")\nplt.ylabel(\"Value\")\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig)","fc18100c":"sns.set(rc={'figure.figsize':(15,7)})\ncolours = [\"maroon\",\"coral\",\"darkorchid\",\"goldenrod\",\"purple\",\"darkgreen\",\"darkviolet\",\"saddlebrown\",\"aqua\",\"olive\"]\nindex = -1\nfor i in train.columns[20:30]:\n    index = index + 1\n    fig = sns.kdeplot(test[i] , shade=True, color=colours[index])\nplt.xlabel(\"Features\")\nplt.ylabel(\"Value\")\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig)","6e0db97f":"sns.set(rc={'figure.figsize':(15,7)})\ncolours = [\"maroon\",\"coral\",\"darkorchid\",\"goldenrod\",\"purple\",\"darkgreen\",\"darkviolet\",\"saddlebrown\",\"aqua\",\"olive\"]\nindex = -1\nfor i in train.columns[30:40]:\n    index = index + 1\n    fig = sns.kdeplot(train[i] , shade=True, color=colours[index])\nplt.xlabel(\"Features\")\nplt.ylabel(\"Value\")\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig)","751a770e":"sns.set(rc={'figure.figsize':(15,7)})\ncolours = [\"maroon\",\"coral\",\"darkorchid\",\"goldenrod\",\"purple\",\"darkgreen\",\"darkviolet\",\"saddlebrown\",\"aqua\",\"olive\"]\nindex = -1\nfor i in train.columns[30:40]:\n    index = index + 1\n    fig = sns.kdeplot(test[i] , shade=True, color=colours[index])\nplt.xlabel(\"Features\")\nplt.ylabel(\"Value\")\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig)","a0b6717e":"sns.set(rc={'figure.figsize':(15,7)})\ncolours = [\"maroon\",\"coral\",\"darkorchid\",\"goldenrod\",\"purple\",\"darkgreen\",\"darkviolet\",\"saddlebrown\",\"aqua\",\"olive\"]\nindex = -1\nfor i in train.columns[40:50]:\n    index = index + 1\n    fig = sns.kdeplot(train[i] , shade=True, color=colours[index])\nplt.xlabel(\"Features\")\nplt.ylabel(\"Value\")\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig)","18c01c75":"sns.set(rc={'figure.figsize':(15,7)})\ncolours = [\"maroon\",\"coral\",\"darkorchid\",\"goldenrod\",\"purple\",\"darkgreen\",\"darkviolet\",\"saddlebrown\",\"aqua\",\"olive\"]\nindex = -1\nfor i in train.columns[40:50]:\n    index = index + 1\n    fig = sns.kdeplot(test[i] , shade=True, color=colours[index])\nplt.xlabel(\"Features\")\nplt.ylabel(\"Value\")\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig)","d9fee9c3":"sns.set(rc={'figure.figsize':(15,10)})\nplt.subplot(221)\nfig1 = sns.stripplot(x='Activity', y= train.loc[train['Activity']==\"STANDING\"].iloc[:,10], data= train.loc[train['Activity']==\"STANDING\"], jitter=True)\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig1)\nplt.subplot(224)\nfig2 = sns.stripplot(x='Activity', y= train.loc[train['Activity']==\"STANDING\"].iloc[:,11], data= train.loc[train['Activity']==\"STANDING\"], jitter=True)\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig2)\nplt.subplot(223)\nfig2 = sns.stripplot(x='Activity', y= train.loc[train['Activity']==\"STANDING\"].iloc[:,12], data= train.loc[train['Activity']==\"STANDING\"], jitter=True)\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig2)\nplt.subplot(222)\nfig2 = sns.stripplot(x='Activity', y= train.loc[train['Activity']==\"STANDING\"].iloc[:,13], data= train.loc[train['Activity']==\"STANDING\"], jitter=True)\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig2)","165746eb":"sns.set(rc={'figure.figsize':(15,10)})\nplt.subplot(221)\nfig1 = sns.stripplot(x='Activity', y= test.loc[test['Activity']==\"STANDING\"].iloc[:,10], data= test.loc[test['Activity']==\"STANDING\"], jitter=True)\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig1)\nplt.subplot(224)\nfig2 = sns.stripplot(x='Activity', y= test.loc[test['Activity']==\"STANDING\"].iloc[:,11], data= test.loc[test['Activity']==\"STANDING\"], jitter=True)\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig2)\nplt.subplot(223)\nfig2 = sns.stripplot(x='Activity', y= test.loc[test['Activity']==\"STANDING\"].iloc[:,12], data= test.loc[test['Activity']==\"STANDING\"], jitter=True)\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig2)\nplt.subplot(222)\nfig2 = sns.stripplot(x='Activity', y= test.loc[test['Activity']==\"STANDING\"].iloc[:,13], data= test.loc[test['Activity']==\"STANDING\"], jitter=True)\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig2)","03b2a721":"sns.set(rc={'figure.figsize':(15,5)})\nfig1 = sns.stripplot(x='Activity', y= train.loc[train['subject']==15].iloc[:,7], data= train.loc[train['subject']==15], jitter=True)\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig1)","078d6bb5":"sns.set(rc={'figure.figsize':(15,5)})\nfig1 = sns.stripplot(x='Activity', y= test.loc[train['subject']==15].iloc[:,7], data= train.loc[train['subject']==15], jitter=True)\nplt.title(\"Feature Distribution\")\nplt.grid(True)\nplt.show(fig1)","ab344a91":"train.dtypes.tail()","e049ceaf":"test.dtypes.tail()","4914c3af":"# Dropping the subject column because it will not affect the dataset\ntrain = train.drop('subject',axis=1)\ntest = test.drop('subject',axis=1)","3db1e8f5":"X_train = train.iloc[:,0:len(train.columns)-1]\nY_train = train.iloc[:,-1]","4d8cbeaf":"X_test = train.iloc[:,0:len(train.columns)-1]\nY_test = train.iloc[:,-1]","bb07e8af":"le = LabelEncoder()\nY_train = le.fit_transform(Y_train)\n\nle = LabelEncoder()\nY_test = le.fit_transform(Y_test)","950ef95e":"le_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))\nprint(le_name_mapping)","72eb53b6":"from sklearn.decomposition import PCA\n\npca = PCA(0.95)\n\npca.fit(X_train)\npca.fit(X_test)\n\ntrain_x_pca = pca.transform(X_train)\ntest_x_pca = pca.transform(X_test)\n\nprint(pca.n_components_)\nprint(pca.explained_variance_)","f51861aa":"ex_variance = np.var(train_x_pca,axis=0)\nprint(ex_variance)\nex_variance_ratio = ex_variance\/np.sum(ex_variance)\nprint(ex_variance_ratio)","64d44653":"ex_variance = np.var(test_x_pca,axis=0)\nprint(ex_variance)\nex_variance_ratio = ex_variance\/np.sum(ex_variance)\nprint(ex_variance_ratio)","15b33c70":"# Fitting Logistic Regression To the training set \nfrom sklearn.linear_model import LogisticRegression   \n  \nclassifier = LogisticRegression(penalty='l2',solver='lbfgs',class_weight='balanced', max_iter=10000,random_state = 0) \nclassifier.fit(train_x_pca, Y_train)\nprint(Y_train)","fe6ce6ff":"y_pred = classifier.predict(test_x_pca)\nprint(test_x_pca)","a22f20a7":"# making confusion matrix between \n#  test set of Y and predicted value. \nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(Y_test, y_pred) \nprint (cm)","b836843c":"from sklearn.metrics import classification_report,accuracy_score\nprint(classification_report(Y_test,y_pred))\nprint(\"Accuracy:\",accuracy_score(Y_test, y_pred)*100)\n\nprint(y_pred)","4144289c":"# Checking for class Imbalance","e51943f0":"# Importing Required Libraries","4f961d29":"# Applying PCA","61f7875a":"# Applying label encoder","c7866172":"# Splitting features and Train and Test data","41e8cf94":"# Reading the data"}}