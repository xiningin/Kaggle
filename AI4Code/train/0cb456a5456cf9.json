{"cell_type":{"7dfa9008":"code","9cb525f1":"code","e473334e":"code","24e5813a":"code","b4c1e815":"code","d7f25f26":"code","b8685f05":"code","483c013c":"code","5ba07b94":"code","67bf1fed":"code","000aa758":"code","2d49356e":"code","c1c53e3e":"markdown","177c069d":"markdown","8874c0e6":"markdown","d6dbc2c4":"markdown","15261d03":"markdown","3faaa08a":"markdown","25b8f473":"markdown","f8ac5333":"markdown","215a7780":"markdown","2ae714d5":"markdown","1d5edad7":"markdown","1e89957c":"markdown","91f35b0e":"markdown","afc1d9eb":"markdown","a1bf60fd":"markdown","537f53ae":"markdown","65cf59eb":"markdown","85e27eca":"markdown","25f18052":"markdown"},"source":{"7dfa9008":"# import libs\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.ensemble import RandomForestClassifier","9cb525f1":"df = pd.read_csv('..\/input\/hotel-booking-demand\/hotel_bookings.csv')\ndf.head()","e473334e":"df[\"hotel\"].value_counts()","24e5813a":"df_resort = df[df.hotel == 'Resort Hotel']\ncancel_resort = round(len(df_resort[df_resort.is_canceled == 1])\/ len(df_resort),3)\ndf_city = df[df.hotel == 'City Hotel']\ncancel_city = round(len(df_city[df_city.is_canceled == 1])\/ len(df_city),3)\nprint(\"cancel rate for resort is \",cancel_resort)\nprint(\"cancel rate for city is \", cancel_city)\n","b4c1e815":"df1 = df.copy()\nmonth = {'January':1, \"February\":2, \"March\":3, \"April\":4,\"May\":5,\"June\":6, \"July\":7, \"August\":8, \"September\":9,\"October\":10, \"November\":11, \"December\":12}\ndf1.arrival_date_month = df1.arrival_date_month.apply(lambda x: month[x])\ndf1 = df1.sort_values(by = 'arrival_date_month')\nfor i in range(0, 3): # i is index for combine chart and count year\n    s = df1[df1.arrival_date_year == i+2015].arrival_date_month.value_counts().sort_index()\n    s.plot.bar(width=0.5)\n    plt.show()","d7f25f26":"df1[\"stays_duation_total\"] =  df1.stays_in_weekend_nights + df1.stays_in_week_nights\nfor name in ['Resort Hotel', 'City Hotel']:\n    df2 = df1[df1.hotel == name].groupby(['arrival_date_year'])[\"stays_duation_total\"].mean().to_frame()\n    df2.plot.bar()\n    plt.show()\n","b8685f05":"cancel_corr = df.corr()[\"is_canceled\"]\ncancel_corr.abs().sort_values(ascending = False)","483c013c":"# preprocessing\ndf = df[df['is_canceled'].notna()]\nfeatures = ['lead_time', 'total_of_special_requests', 'required_car_parking_spaces', 'booking_changes','previous_cancellations']\nX = df[features]\nY = df[\"is_canceled\"]\n# missing value with median\nnum_transformer = SimpleImputer(strategy=\"median\")\nnum_transformer.fit_transform(X)\n# extract training data (60%) and test data (40%)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.40, random_state=42)\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)","5ba07b94":"Y_pred=logreg.predict(X_test)\n# get confusion matrix\ncnf_matrix = metrics.confusion_matrix(Y_test, Y_pred)\n# visualize confusion matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\n# accuracy, percision, recall\nprint(\"Accuracy:\",metrics.accuracy_score(Y_test, Y_pred))\nprint(\"Precision:\",metrics.precision_score(Y_test, Y_pred))\nprint(\"Recall:\",metrics.recall_score(Y_test, Y_pred))","67bf1fed":"# First, we can extract some features from the original features to make model more general:\n# (arrival_date_year, assigned_room_type, booking_changes, reservation_status, days_in_waiting_list)\n# The data can be simply divided into numerial data and categorical data:\nnum_features = [\"lead_time\",\"arrival_date_week_number\",\"arrival_date_day_of_month\",\n                \"stays_in_weekend_nights\",\"stays_in_week_nights\",\"adults\",\"children\",\n                \"babies\",\"is_repeated_guest\", \"previous_cancellations\",\n                \"previous_bookings_not_canceled\",\"agent\",\"company\",\n                \"required_car_parking_spaces\", \"total_of_special_requests\", \"adr\"]\ncat_features = [\"hotel\",\"arrival_date_month\",\"meal\",\"market_segment\",\n                \"distribution_channel\",\"reserved_room_type\",\"deposit_type\",\"customer_type\"]\nfeatures = num_features + cat_features\nX = df.drop([\"is_canceled\"], axis=1)[features]\ny = df[\"is_canceled\"]\n# deal with num_features - fill missing value - choose 0 as the filled value for all columns except date\n# however, date does not have missing value\n# (PS: simpleInputer can be not only used in filling numerical data but also string type data)\nnum_transformer = SimpleImputer(strategy=\"constant\", fill_value=0)\n# deal with categorical data\ncat_transformer = Pipeline(steps = [(\"imputer\", SimpleImputer(strategy=\"constant\", fill_value=\"unkown\")), \n                                   (\"onehot\", OneHotEncoder(handle_unknown=\"ignore\"))])\npreprocessor = ColumnTransformer(transformers=[(\"num\", num_transformer, num_features),\n                                               (\"cat\", cat_transformer, cat_features)])\n\n# referred from https:\/\/www.kaggle.com\/marcuswingen\/eda-of-bookings-and-ml-to-predict-cancelations","000aa758":"# split the train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.4, random_state=0)\nmodel = Pipeline(steps=[('preprocessor', preprocessor),('rf', RandomForestClassifier(random_state=42,n_jobs=-1))])\nmodel.fit(X_train, y_train)\npred = model.predict(X_test)\n#score = metrics.accuracy_score(y_test, pred)\n#print(\"the accuracy score is: \", round(score, 2))\n","2d49356e":"# get confusion matrix\ncnf_matrix = metrics.confusion_matrix(y_test, pred)\n# visualize confusion matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\n# accuracy, percision, recall\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, pred))\nprint(\"Precision:\",metrics.precision_score(y_test, pred))\nprint(\"Recall:\",metrics.recall_score(y_test, pred))","c1c53e3e":"# **The performance of logistic regression is not satisfying because the accuray is low: 10196 clients who canceled the reservation are misclassified as normal clients. For this model, we only take numerical features into consideration but ignore categorical one, it's necessary for us to choose another model and make some improvements** <br> \u7528logistic\u56de\u5f52\u8bad\u7ec3\u51fa\u7684\u6548\u679c\u4e0d\u597d\uff0c\u6709\u5927\u91cf\u7684\u9000\u8ba2\u7528\u6237\u88ab\u5212\u5206\u4e3a\u6b63\u5e38\u7528\u6237\uff0c\u56e0\u4e3a\u5728\u8fd9\u4e2a\u6a21\u578b\u4e2d\uff0c\u6211\u4eec\u53ea\u8003\u8651\u4e86\u6570\u503c\u7c7b\u7279\u5f81\u4f46\u662f\u6ca1\u6709\u8003\u8651\u5206\u7c7b\u578b\u7279\u5f81\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5efa\u7acb\u53e6\u4e00\u4e2a\u6a21\u578b\u5e76\u505a\u4e00\u4e9b\u6539\u8fdb\u3002","177c069d":"# **Q3 Answer** <br> The average occupation days of resort hotel from 2015 - 2017 are larger then 4 days and that for city hotel is about 2-3 days.<br> \u5047\u65e5\u9152\u5e97\u7684\u5e73\u5747\u9884\u8ba2\u65f6\u95f4\u57282015-2017\u4e4b\u95f4\u57284\u5929\u5de6\u53f3\uff0c\u800c\u57ce\u5e02\u9152\u5e97\u5e73\u5747\u9884\u8ba2\u65f6\u95f4\u76f8\u5bf9\u8f83\u5c11\uff0c\u57282-3\u5929\u4e4b\u95f4\u3002","8874c0e6":"# EDA of hotel data \u9152\u5e97\u9884\u8ba2\u6570\u636e\u7684\u7efc\u5408\u5206\u6790<br>My work can be simple described as 3 part: <br> a.Roughly feel of the data <br> \u6570\u636e\u7684\u7b80\u5355\u6d4f\u89c8 <br> b. Predict cancel rate using logistic regression<br>\u4f7f\u7528Logistic\u56de\u5f52\u9884\u6d4b\u7528\u6237\u9000\u8ba2\u60c5\u51b5<br>c. Predict cancel rate using random forest<br>\u4f7f\u7528\u968f\u673a\u68ee\u6797\u9884\u6d4b\u7528\u6237\u9000\u8ba2\u60c5\u51b5","d6dbc2c4":"# **The characteristic of random forest is that we do not need to select features maunally, random forest generate several decision tree and combine the classification result of each tree to obtain the final result.**<br>\u91c7\u7528\u968f\u673a\u68ee\u6797\u4f5c\u4e3a\u65b0\u7684\u5206\u7c7b\u5668\uff0c\u968f\u673a\u68ee\u6797\u7684\u4f18\u70b9\u5728\u4e8e\u6211\u4eec\u4e0d\u7528\u624b\u52a8\u9009\u62e9\u7279\u5f81\u3002","15261d03":"# **Q1 Answer**<br> For all numerical features, we compute the correlation of them. The top 5(except for is_canceled) features are important.<br> \u6211\u4eec\u5f97\u51fa\u76f8\u5173\u7cfb\u6570\u77e9\u9635\u5e76\u5c06\u5176\u6392\u5e8f\uff0c\u53d1\u73b0\u6392\u5728\u524d\u4e94\u4e2a(is_canceled \u9664\u5916)\u7684\u6570\u503c\u578b\u7279\u5f81\u4e0eis_canceled\u5177\u6709\u8f83\u5f3a\u76f8\u5173\u6027\u3002<br> \n    lead_time\n    total_of_special_requests\n    required_car_parking_spaces\n    booking_changes\n    previous_cancellations.","3faaa08a":"# **PART 2 Model Training**<br>\u8bad\u7ec3\u6a21\u578b","25b8f473":"# **PART 2** <br>Machine Learning: Prediction<br>\u673a\u5668\u5b66\u4e60\uff1a\u9884\u6d4b\u5ba2\u6237\u7684\u9000\u8ba2\u884c\u4e3a","f8ac5333":"# **Q2**<br>**When is peak hotel occupancy?** <br> \u5165\u4f4f\u9152\u5e97\u9ad8\u5cf0\u671f","215a7780":"# **PART 1 Data preprocessing**<br>\u6570\u636e\u9884\u5904\u7406","2ae714d5":"# **Q1** <br>**a.Which kind of hotel is more popular?** <br>\u54ea\u4e00\u79cd\u9152\u5e97\u66f4\u53d7\u6b22\u8fce\uff1f<br> **b.Which kind of hotel have higher cancel rate?**<br> \u54ea\u4e00\u79cd\u9152\u5e97\u6709\u66f4\u9ad8\u7684\u9000\u8ba2\u7387\uff1f<br>","1d5edad7":"# **Hooray!!!!! The accuracy increase from 0.71 to 0.86, the random forest model is much better than logistic regression one.**<br>\u6a21\u578b\u7684\u7cbe\u786e\u5ea6\u4ece0.71\u589e\u52a0\u52300.86\uff0c\u8868\u73b0\u6709\u660e\u663e\u7684\u63d0\u5347\uff0c\u53ef\u89c1\u9488\u5bf9\u8fd9\u4e2a\u6570\u636e\uff0c\u968f\u673a\u68ee\u6797\u6a21\u578b\u6bd4logistic \u56de\u5f52\u66f4\u52a0\u9002\u7528","1e89957c":"# **Q3**<br>**Using random forest to make predictions**<br>\u4f7f\u7528\u968f\u673a\u68ee\u6797\u8fdb\u884c\u9884\u6d4b","91f35b0e":"# **Q2** <br>**Predict cancel using logistic regression**<br> \u4f7f\u7528Logistic \u56de\u5f52\u9884\u6d4b\u9000\u8ba2\u60c5\u51b5","afc1d9eb":"# **Q1 answer**<br>a. Regardless of the cancelation, city hotel is more popular since its reservation is larger.<br>\u4e0d\u8003\u8651\u53d6\u6d88\u8ba2\u5355\u7684\u60c5\u51b5\uff0c\u57ce\u5e02\u9152\u5e97\u6bd4\u5047\u65e5\u9152\u5e97\u66f4\u53d7\u6b22\u8fce\uff0c\u56e0\u4e3a\u5b83\u7684\u9884\u8ba2\u91cf\u66f4\u5927\u3002<br>b. Cancel rate of city hotel is two times higher then resort one. <br>\u57ce\u5e02\u9152\u5e97\u7684\u9000\u8ba2\u7387\u6bd4\u5047\u65e5\u9152\u5e97\u7684\u9ad8\u5c06\u8fd1\u4e00\u500d","a1bf60fd":"# PART 1.<br>Have a feel of hotel data using python pandas<br> \u7b80\u5355\u7684\u6d4f\u89c8\u6570\u636e","537f53ae":"# **Genterate confusion matrix to assess the performance of regression model** <br> \u751f\u6210\u6df7\u6dc6\u77e9\u9635\uff0c\u8003\u5bdf\u6a21\u578b\u7684\u6548\u679c","65cf59eb":"# **Q1**<br> **Which features are important?<br>**\u54ea\u4e00\u4e9b\u7279\u5f81\u6bd4\u8f83\u91cd\u8981\uff1f","85e27eca":"# **Q2 Answer**<br>From the plot we can know that during 2015-2017, 9-10 is the first peak time and 4-5 is second.<br> \u7ed3\u5408\u4e09\u5f20\u56fe\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7b2c\u4e00\u4e2a\u5165\u4f4f\u9152\u5e97\u9ad8\u5cf0\u671f\u662f9-10\u6708\uff0c\u7b2c\u4e8c\u4e2a\u5165\u4f4f\u9ad8\u5cf0\u671f\u662f4-5\u6708\u3002","25f18052":"# **Q3**<br> **What are average occupation time for both?** <br> \u4e24\u5bb6\u9152\u5e97\u7684\u5e73\u5747\u5165\u4f4f\u65f6\u95f4\uff1f"}}