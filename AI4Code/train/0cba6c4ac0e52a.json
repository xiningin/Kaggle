{"cell_type":{"c6ca699f":"code","1cc43178":"code","2942aaa8":"code","844867be":"code","50982ca8":"code","ed4ca1c0":"code","9c98566c":"code","66306ea0":"code","8744be09":"code","62848f5e":"code","07707421":"code","f07e67d5":"code","1c3ad477":"code","681ff436":"code","f8ec8f9d":"code","5bc0bdca":"code","600c050e":"code","8d94313e":"code","4b4c6f4b":"code","9d39d4ef":"code","10b63535":"code","c5ce6730":"code","6d3388ed":"code","e08aa788":"code","89263988":"code","5050fd4c":"code","980ed104":"code","760edc3a":"code","d56f39e8":"code","e23b72ab":"code","4f2fd99e":"code","8d3c723e":"code","fe023ea5":"code","29dc6a61":"code","2c65407c":"code","da15050b":"code","b379500b":"code","69eff4f9":"code","b88e9ca5":"code","13da531c":"code","89393efa":"code","abb94055":"code","56a71cb8":"code","23692b87":"code","ac8b8ffd":"code","6046100c":"code","33b2af40":"code","0a2be05f":"code","daa0a065":"code","389c535e":"code","974d68cf":"code","47d9bb8a":"code","0e5e3f37":"code","e87cff16":"code","0a9d88d5":"code","34743b6f":"code","41d73ed5":"code","8d4592ce":"code","2cfc770d":"code","4820ac9c":"code","2bc71d0b":"code","bc2f6b07":"code","68edf09e":"code","2b63f79f":"code","d8f56b54":"code","be9394e8":"code","5f236df6":"code","3ecef16d":"code","5ee8003a":"code","b3ae8d68":"code","619ead00":"code","2fdf9eff":"code","07814b01":"code","cedaf9d0":"code","06316b79":"code","2ae76d60":"code","df0893e9":"code","d4c48a68":"code","ee023886":"code","dff841d9":"code","0a54688e":"markdown","f4c56f5d":"markdown","9c7046f3":"markdown","468642b1":"markdown","136af9ed":"markdown","c3d256d1":"markdown","79e2de28":"markdown","1b584464":"markdown","a3d00bc2":"markdown","d4f9cd89":"markdown","ee4ce7bd":"markdown","afbb4a8b":"markdown","532428b4":"markdown","55ff8197":"markdown","85ae1f18":"markdown","92816663":"markdown","16c5fa02":"markdown","8cecc582":"markdown","d5a0dfb1":"markdown","3e1a76f8":"markdown","9e4f77b8":"markdown","2bbc28d8":"markdown","9ccd5deb":"markdown","94c6a50b":"markdown","1f6a6a40":"markdown","1c4756e8":"markdown","232de3f5":"markdown","ca819581":"markdown","a241459a":"markdown"},"source":{"c6ca699f":"# importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import roc_auc_score, roc_curve","1cc43178":"# reading data                        \ndata=pd.read_csv(\"..\/input\/heart.csv\")","2942aaa8":"# displaying first 5 rows\ndata.head()","844867be":"# (no. of rows, no. of columns)\ndata.shape ","50982ca8":"data.describe()","ed4ca1c0":"# finding any null values in data\ndata.isnull().any()","9c98566c":"data.info()","66306ea0":"# Finding the number of patients with heart disease.\nsns.countplot(x=\"target\",data=data,palette=\"pastel\")\nplt.show()","8744be09":"# Finding the ration of males and females in the data (1 = male; 0 = female)\nsns.countplot(x=\"sex\",data=data,palette=\"colorblind\")\nplt.show()","62848f5e":"# Finding correaltion between all the parameters in the dataset.\nfig,ax = plt.subplots(figsize=(11,8))\nsns.heatmap(data.corr(),annot=True,cmap=\"Blues\" ,ax=ax)\nplt.show()","07707421":"# creating dummy variables\na=pd.get_dummies(data[\"cp\"],prefix=\"cp\")\nb=pd.get_dummies(data[\"restecg\"],prefix=\"restecg\")\nc=pd.get_dummies(data[\"ca\"],prefix=\"ca\")\nd=pd.get_dummies(data[\"thal\"],prefix=\"thal\")\ne=pd.get_dummies(data[\"slope\"],prefix=\"slope\")","f07e67d5":"# joining dummy variables in the dataset.\ndata=pd.concat([data,a,b,c,d],axis=1)\ndata.head()","1c3ad477":"# no. of rows and columns after addition of dummy variables\ndata.shape","681ff436":"# dropping of columns whose dummy variables have been created.\ndata=data.drop(columns=[\"cp\",\"restecg\",\"thal\",\"ca\",\"slope\"])\ndata.head()","f8ec8f9d":"# x= independent variables\nx=data.drop(\"target\",axis=1)\nx.head()","5bc0bdca":"# y=dependent variable (target) \ny=data[\"target\"]\ny.head()","600c050e":"# splitting data into train and test set.\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)","8d94313e":"# making object classifier of class LogisticRegression \nfrom sklearn.linear_model import LogisticRegression\nclassifier=LogisticRegression()","4b4c6f4b":"# Fitting training data set into classifier\nclassifier.fit(x_train,y_train)","9d39d4ef":"# Predicting test results\ny_pred=classifier.predict(x_test)","10b63535":"# Making confusion matrix\ncm=confusion_matrix(y_test,y_pred)\ncm","c5ce6730":"# Heatmap of confusion matrix\nsns.heatmap(pd.DataFrame(cm),annot=True,cmap=\"Reds\")\nplt.show()","6d3388ed":"print(\"Accuracy = \",accuracy_score(y_test,y_pred)*100,\"%\")\nprint(\"Precision = \",precision_score(y_test,y_pred)*100,\"%\")\nprint(\"Recall Score = \",recall_score(y_test,y_pred)*100,\"%\")","e08aa788":"sensitivity = cm[1,1]\/(cm[1,1] + cm[1,0])\nprint (\"Sensitivity =\",sensitivity)\nspecificity= cm[0,0]\/(cm[0,0] + cm[0,1])\nprint(\"Specificity =\",specificity)","89263988":"# calculating AUC\nauc=roc_auc_score(y_test,y_pred)\nauc","5050fd4c":"# calculating ROC curve\nfpr,tpr,thresholds= roc_curve(y_test,y_pred)","980ed104":"# plotting the roc curve for the model\nplt.plot([0,1],[0,1],linestyle=\"--\")\nplt.plot(fpr,tpr,marker=\".\")\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"TruePositive Rate\")\nplt.title(\"ROC Curve\")\nplt.show()","760edc3a":"# making object classifier of class KNeighborsClassifier \nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier= KNeighborsClassifier(n_neighbors=5,metric=\"minkowski\",p=2)","d56f39e8":"# Fitting training data set into classifier\nclassifier.fit(x_train,y_train)","e23b72ab":"# Predicting test results\ny_pred=classifier.predict(x_test)","4f2fd99e":"# Making confusion matrix\ncm=confusion_matrix(y_test,y_pred)\ncm","8d3c723e":"# Heatmap of confusion matrix\nsns.heatmap(pd.DataFrame(cm),annot=True,cmap=\"Reds\")\nplt.show()","fe023ea5":"print(\"Accuracy = \",accuracy_score(y_test,y_pred)*100,\"%\")\nprint(\"Precision = \",precision_score(y_test,y_pred)*100,\"%\")\nprint(\"Recall Score = \",recall_score(y_test,y_pred)*100,\"%\")","29dc6a61":"sensitivity = cm[1,1]\/(cm[1,1] + cm[1,0])\nprint (\"Sensitivity =\",sensitivity)\nspecificity= cm[0,0]\/(cm[0,0] + cm[0,1])\nprint(\"Specificity =\",specificity)","2c65407c":"# calculating AUC\nauc=roc_auc_score(y_test,y_pred)\nauc","da15050b":"# calculating ROC curve\nfpr,tpr,thresholds= roc_curve(y_test,y_pred)","b379500b":"# plotting the roc curve for the model\nplt.plot([0,1],[0,1],linestyle=\"--\")\nplt.plot(fpr,tpr,marker=\".\")\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"TruePositive Rate\")\nplt.title(\"ROC Curve\")\nplt.show()","69eff4f9":"# Cross Validation : Calculating cross validation score\nfrom sklearn.model_selection import cross_val_score\nscore = cross_val_score(classifier,x_train,y_train,cv=10,scoring=\"accuracy\")\nscore","b88e9ca5":"score.mean()","13da531c":"# making object classifier of class SVC\nfrom sklearn.svm import SVC\nclassifier= SVC(kernel=\"linear\")","89393efa":"# Fitting training data set into classifier\nclassifier.fit(x_train,y_train)","abb94055":"# Predicting test results\ny_pred=classifier.predict(x_test)","56a71cb8":"# Making confusion matrix\ncm=confusion_matrix(y_test,y_pred)\ncm","23692b87":"# Heatmap of confusion matrix\nsns.heatmap(pd.DataFrame(cm),annot=True,cmap=\"Reds\")\nplt.show()","ac8b8ffd":"print(\"Accuracy = \",accuracy_score(y_test,y_pred)*100,\"%\")\nprint(\"Precision = \",precision_score(y_test,y_pred)*100,\"%\")\nprint(\"Recall Score = \",recall_score(y_test,y_pred)*100,\"%\")","6046100c":"sensitivity = cm[1,1]\/(cm[1,1] + cm[1,0])\nprint (\"Sensitivity =\",sensitivity)\nspecificity= cm[0,0]\/(cm[0,0] + cm[0,1])\nprint(\"Specificity =\",specificity)","33b2af40":"# calculating AUC\nauc=roc_auc_score(y_test,y_pred)\nauc","0a2be05f":"# calculating ROC curve\nfpr,tpr,thresholds= roc_curve(y_test,y_pred)","daa0a065":"# plotting the roc curve for the model\nplt.plot([0,1],[0,1],linestyle=\"--\")\nplt.plot(fpr,tpr,marker=\".\")\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"TruePositive Rate\")\nplt.title(\"ROC Curve\")\nplt.show()","389c535e":"# making object classifier of class GaussianNB\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()","974d68cf":"# Fitting training data set into classifier\nclassifier.fit(x_train,y_train)","47d9bb8a":"# Predicting test results\ny_pred=classifier.predict(x_test)","0e5e3f37":"# Making confusion matrix\ncm=confusion_matrix(y_test,y_pred)\ncm","e87cff16":"# Heatmap of confusion matrix\nsns.heatmap(pd.DataFrame(cm),annot=True,cmap=\"Reds\")\nplt.show()","0a9d88d5":"print(\"Accuracy = \",accuracy_score(y_test,y_pred)*100,\"%\")\nprint(\"Precision = \",precision_score(y_test,y_pred)*100,\"%\")\nprint(\"Recall Score = \",recall_score(y_test,y_pred)*100,\"%\")","34743b6f":"sensitivity = cm[1,1]\/(cm[1,1] + cm[1,0])\nprint (\"Sensitivity =\",sensitivity)\nspecificity= cm[0,0]\/(cm[0,0] + cm[0,1])\nprint(\"Specificity =\",specificity)","41d73ed5":"# calculating AUC\nauc=roc_auc_score(y_test,y_pred)\nauc","8d4592ce":"# calculating ROC curve\nfpr,tpr,thresholds= roc_curve(y_test,y_pred)","2cfc770d":"# plotting the roc curve for the model\nplt.plot([0,1],[0,1],linestyle=\"--\")\nplt.plot(fpr,tpr,marker=\".\")\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"TruePositive Rate\")\nplt.title(\"ROC Curve\")\nplt.show()","4820ac9c":"# making object classifier of class DecisionTreeClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier=DecisionTreeClassifier(criterion=\"gini\",random_state=0)","2bc71d0b":"# Fitting training data set into classifier\nclassifier.fit(x_train,y_train)","bc2f6b07":"# Predicting test results\ny_pred=classifier.predict(x_test)","68edf09e":"# Making confusion matrix\ncm=confusion_matrix(y_test,y_pred)\ncm","2b63f79f":"# Heatmap of confusion matrix\nsns.heatmap(pd.DataFrame(cm),annot=True,cmap=\"Reds\")\nplt.show()","d8f56b54":"print(\"Accuracy = \",accuracy_score(y_test,y_pred)*100,\"%\")\nprint(\"Precision = \",precision_score(y_test,y_pred)*100,\"%\")\nprint(\"Recall Score = \",recall_score(y_test,y_pred)*100,\"%\")","be9394e8":"sensitivity = cm[1,1]\/(cm[1,1] + cm[1,0])\nprint (\"Sensitivity =\",sensitivity)\nspecificity= cm[0,0]\/(cm[0,0] + cm[0,1])\nprint(\"Specificity =\",specificity)","5f236df6":"# calculating AUC\nauc=roc_auc_score(y_test,y_pred)\nauc","3ecef16d":"# calculating ROC curve\nfpr,tpr,thresholds= roc_curve(y_test,y_pred)","5ee8003a":"# plotting the roc curve for the model\nplt.plot([0,1],[0,1],linestyle=\"--\")\nplt.plot(fpr,tpr,marker=\".\")\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"TruePositive Rate\")\nplt.title(\"ROC Curve\")\nplt.show()","b3ae8d68":"# making object classifier of class RandomForestClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier=RandomForestClassifier(n_estimators=10,criterion=\"gini\")","619ead00":"# Fitting training data set into classifier\nclassifier.fit(x_train,y_train)","2fdf9eff":"# Predicting test results\ny_pred=classifier.predict(x_test)","07814b01":"# Making confusion matrix\ncm=confusion_matrix(y_test,y_pred)\ncm","cedaf9d0":"# Heatmap of confusion matrix\nsns.heatmap(pd.DataFrame(cm),annot=True,cmap=\"Reds\")\nplt.show()","06316b79":"print(\"Accuracy = \",accuracy_score(y_test,y_pred)*100,\"%\")\nprint(\"Precision = \",precision_score(y_test,y_pred)*100,\"%\")\nprint(\"Recall Score = \",recall_score(y_test,y_pred)*100,\"%\")","2ae76d60":"sensitivity = cm[1,1]\/(cm[1,1] + cm[1,0])\nprint (\"Sensitivity =\",sensitivity)\nspecificity= cm[0,0]\/(cm[0,0] + cm[0,1])\nprint(\"Specificity =\",specificity)","df0893e9":"# calculating AUC\nauc=roc_auc_score(y_test,y_pred)\nauc","d4c48a68":"# calculating roc curve\nfpr,tpr,thresholds= roc_curve(y_test,y_pred)","ee023886":"# plotting the roc curve for the model\nplt.plot([0,1],[0,1],linestyle=\"--\")\nplt.plot(fpr,tpr,marker=\".\")\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"TruePositive Rate\")\nplt.title(\"ROC Curve\")\nplt.show()","dff841d9":"methods = [\"Logistic Regression\", \"KNN\", \"SVM\", \"Naive Bayes\", \"Decision Tree\", \"Random Forest\"]\naccuracy = [88.5,63.93,83.6,83.6,77.04,85.24]\nplt.subplots(figsize=(11,8))\nsns.barplot(x=methods,y=accuracy)\nplt.xlabel(\"Classifier\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Comparison between Classifiers\")\nplt.show()","0a54688e":"Number of correct predictions : 20 + 31 = 51\n\nNumber of incorrect predictions : 7 + 3 = 10","f4c56f5d":"Performance Measures :","9c7046f3":"ROC Curve and AUC Value :","468642b1":"ROC Curve and AUC Value :","136af9ed":"Performance Measures :","c3d256d1":"ROC Curve and AUC Value :","79e2de28":"Performance Measures :","1b584464":"From above graph we can say that Logistic Regression classification model is best suited for our dataset with accuraacy of 88.5% and KNN classification model is least suite with accuracy of 63.93%.","a3d00bc2":"Number of correct predictions : 23 + 28 = 52\n\nNumber of incorrect predictions : 4 + 6 = 10","d4f9cd89":"ROC Curve and AUC Value :","ee4ce7bd":"Number of correct predictions : 23 + 31 = 54\n\nNumber of incorrect predictions : 3 + 4 = 7","afbb4a8b":"OBJECTIVE : The dataset contains 14 attributes which determine whether a patient has heart disease or not. We will create several classification models to accurately predict the heart disease.","532428b4":"Performance Measures :","55ff8197":"# Random Forest Classifier","85ae1f18":"# Comparison Between Classifiers","92816663":"# Decision Tree Classifier","16c5fa02":"# KNN Classifier","8cecc582":"Performance Measures :","d5a0dfb1":"Number of correct predictions : 17 + 22 = 39\n\nNumber of incorrect predictions : 10 + 12 = 22 ","3e1a76f8":"Number of correct predictions : 21 + 26 = 47\n\nNumber of incorrect predictions : 8 + 6 = 14","9e4f77b8":"Attributes Description :\n\nage : age in years \n\nsex : (1 = male; 0 = female)\n\ncp : chest pain type (values- 0,1,2,3)\n\ntrestbps : resting blood pressure (in mm Hg on admission to the hospital)\n\nchol : serum cholestoral in mg\/dl\n\nfbs : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n\nrestecg : resting electrocardiographic results (values- 0,1,2)\n\nthalach : maximum heart rate achieved\n\nexang : exercise induced angina (1 = yes; 0 = no)\n\noldpeak : ST depression induced by exercise relative to rest\n\nslope : the slope of the peak exercise ST segment\n\nca : number of major vessels (0-3) colored by flourosopy\n\ntha : l3 = normal; 6 = fixed defect; 7 = reversable defect\n\ntarget : 1 or 0","2bbc28d8":"# Naive Bayes Classifier","9ccd5deb":"# SVM Classifier","94c6a50b":"Number of correct predictions : 22 + 29 = 51\n\nNumber of incorrect predictions : 5 + 5 = 10","1f6a6a40":"As wee see that cp, restecg, ca, thal and slope are categorical variables so we turn them into dummy variables.","1c4756e8":"# Logistic Regression","232de3f5":"Performance Measures :","ca819581":"ROC Curve and AUC Value : Receiver Operating Characteristics (ROC) Curve is a graph between True Positive Rate (y-axis) and False Positive Rate (x-axis). AUC Value is the area under ROC curve. \n\nAUC = 0 -- Bad Model\n\nAUC = 1 -- Good Model","a241459a":"ROC Curve and AUC Value :"}}