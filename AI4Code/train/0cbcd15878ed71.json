{"cell_type":{"04abb8c1":"code","bdb93ecf":"code","1fb153d5":"code","be42546f":"code","02723112":"code","aa354375":"code","04bbeeaa":"code","57024649":"code","e845d13b":"code","5546bddb":"code","1b62f444":"code","72267da2":"code","5097ab74":"code","3afef43c":"code","433fc05a":"code","10b2cd32":"markdown","4b5c90cf":"markdown","ae4daabb":"markdown","4897db1a":"markdown","6677ac26":"markdown","6b59d075":"markdown","d7d39314":"markdown","d5063538":"markdown","096c5297":"markdown","78119cd2":"markdown","60db9cf2":"markdown"},"source":{"04abb8c1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","bdb93ecf":"realEstateFrame = pd.read_csv('..\/input\/regressioncsv\/datasets_88705_204267_Real estate.csv')","1fb153d5":"realEstateFrame.head()","be42546f":"sns.heatmap(realEstateFrame.corr())","02723112":"X = realEstateFrame.drop('Y house price of unit area',axis=1)\ny = realEstateFrame['Y house price of unit area'] ","aa354375":"from sklearn.preprocessing import PolynomialFeatures\npolynomial_converter = PolynomialFeatures(degree=2,include_bias=False)\npoly_features = polynomial_converter.fit(X)\npoly_features = polynomial_converter.transform(X)\nprint(f'''\n{X.shape}\n{poly_features.shape}\n''')","04bbeeaa":"from sklearn.linear_model import LinearRegression\nsimpleModel = LinearRegression()\npolyModel = LinearRegression()","57024649":"from sklearn.model_selection import train_test_split\n\nXS_train, XS_test, ys_train, ys_test = train_test_split(X, y, test_size=0.3, random_state=101)\n\nX_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)\n\nsimpleModel.fit(XS_train,ys_train)\n\npolyModel.fit(X_train,y_train)","e845d13b":"ys_pred = simpleModel.predict(XS_test)\ny_pred = polyModel.predict(X_test)","5546bddb":"from sklearn import metrics\n\nsimple_MAE = metrics.mean_absolute_error(ys_test,ys_pred)\nsimple_MSE = metrics.mean_squared_error(ys_test,ys_pred)\nsimple_RMSE = np.sqrt(simple_MSE)\n\npoly_MAE =  metrics.mean_absolute_error(y_test,y_pred)\npoly_MSE =  metrics.mean_absolute_error(y_test,y_pred)\npoly_RMSE =  np.sqrt(poly_MSE)","1b62f444":"pd.DataFrame({'Poly Metrics': [poly_MAE, poly_MSE, poly_RMSE], 'Simple Metrics':[simple_MAE, simple_MSE, simple_RMSE]}, index=['MAE', 'MSE', 'RMSE'])\n","72267da2":"Train_RMSE_List = []\nTest_RMSE_List = []\n\nfor d in range(1,10):\n    polynomial_converter= PolynomialFeatures(degree=d, include_bias=False)\n    poly_features= polynomial_converter.fit(X)\n    poly_features= polynomial_converter.transform(X)\n    \n    \n    X_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)\n    poly_model = LinearRegression()\n    poly_model.fit(X_train,y_train)\n    \n    y_train_pred = poly_model.predict(X_train)\n    y_test_pred = poly_model.predict(X_test)\n    \n    trainRMSE = np.sqrt(metrics.mean_squared_error(y_train, y_train_pred))\n    testRMSE = np.sqrt(metrics.mean_squared_error(y_test, y_test_pred))    \n    \n    Train_RMSE_List.append(trainRMSE)\n    Test_RMSE_List.append(testRMSE)","5097ab74":"Train_RMSE_List","3afef43c":"Test_RMSE_List","433fc05a":"plt.plot(range(1,6), Train_RMSE_List[:5], label='Train RMSE')\nplt.plot(range(1,6), Test_RMSE_List[:5], label='Test RMSE')\n\nplt.xlabel('Polynomial Degree')\nplt.ylabel('RMSE')\nplt.legend()","10b2cd32":"#### we can see the correlations between data","4b5c90cf":"# This Time we must predict our test data","ae4daabb":"# determine Features and label","4897db1a":"# Adjusting Model","6677ac26":"# Polynomial degree VS RMSE","6b59d075":"# Create models","d7d39314":"# Now we must Evaluat the Model performance","d5063538":"# Split Data Set to train and test","096c5297":"# Data Overview","78119cd2":"# determine polynomial features","60db9cf2":"### we created our polynomial features now we must create the models"}}