{"cell_type":{"f226bed4":"code","6ba87ba7":"code","be440752":"code","b6515644":"code","b8e145d7":"code","37301256":"code","48e91c6f":"code","9e6373f6":"code","156e302b":"code","4abe247f":"code","735bcf13":"code","88130fa2":"code","761b4060":"code","d79f97f0":"code","0c04b37e":"code","bb0438aa":"code","c048967d":"code","6f0dccb4":"code","083ac7ba":"code","a37261e3":"code","00e52379":"code","79cf04a3":"code","ef046210":"code","f0553e56":"code","82488573":"code","4fac9f48":"code","7435088d":"code","803b0e37":"code","2cfb3df7":"code","62d980bb":"markdown","3bfeee42":"markdown","99d6e591":"markdown","dc8e1c9c":"markdown","02b6c44a":"markdown","68c9ccec":"markdown","63346661":"markdown","f9e55daf":"markdown","95995dfe":"markdown"},"source":{"f226bed4":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6ba87ba7":"diabet_class = pd.read_csv('..\/input\/diabetes-classification\/Diabetes_Classification.csv')\ndiabet_class = pd.DataFrame(diabet_class)\nprint(diabet_class.shape)\ndiabet_class.head(5)","be440752":"gender = {'male': 0,'female': 1}\ndiabet_class.Gender = [gender[item] for item in diabet_class.Gender]","b6515644":"diabet_class.info()","b8e145d7":"dict={}\nfor i in list(diabet_class.columns):\n    dict[i]=diabet_class[i].isnull().sum()\npd.DataFrame(dict,index=['number of null values']).transpose() ","37301256":"diabet_class.columns","48e91c6f":"diabet_class.describe()","9e6373f6":"plt.figure(figsize=(15,10))\nsns.heatmap(diabet_class.corr(),annot=True,fmt='.1f')\nplt.show()","156e302b":"sns.scatterplot(data=diabet_class, x=\"Age\", y=\"Cholesterol\", hue=\"Target\")","4abe247f":"sns.scatterplot(data=diabet_class, x=\"hip\", y=\"waist\", hue=\"Target\")","735bcf13":"sns.scatterplot(data=diabet_class, x=\"hip\", y=\"waist\", hue=\"Gender\")","88130fa2":"plt.hist(diabet_class.BMI, edgecolor=\"yellow\", color=\"black\", bins=5)\nplt.show()","761b4060":"binwidth = 8\nplt.hist(diabet_class.Glucose, bins=range(min(diabet_class.Glucose), max(diabet_class.Glucose) + binwidth, binwidth),\n         edgecolor=\"yellow\", color=\"black\")  \nplt.show()","d79f97f0":"sns.scatterplot(data=diabet_class, x=\"Cholesterol\", y=\"Glucose\", hue=\"Gender\")","0c04b37e":"gender  = sns.FacetGrid(diabet_class, col=\"Gender\", hue=\"Target\")\ngender.map(plt.scatter, \"Cholesterol\", \"Waist\/hip ratio\", alpha=.7)\ngender.add_legend();","bb0438aa":"gender  = sns.FacetGrid(diabet_class, col=\"Gender\", hue=\"Target\")\ngender.map(plt.scatter, \"Cholesterol\", \"Glucose\", alpha=.7)\ngender.add_legend();","c048967d":"sns.pairplot(diabet_class[['Age', 'Cholesterol', 'Glucose', 'Gender', 'waist', 'hip', 'BMI', \n                           'Height', 'Weight', 'Systolic BP', 'Diastolic BP', 'Waist\/hip ratio', 'HDL Chol',\n                          'Chol\/HDL ratio', 'Target']], hue = 'Target')","6f0dccb4":"important_nom_features= ['Cholesterol', 'Glucose', 'Waist\/hip ratio', 'BMI']","083ac7ba":"L = len(important_nom_features)\nncol= 2\nnrow= int(np.ceil(L\/ncol))\nfig, ax = plt.subplots(nrow, ncol, figsize=(10, 8),facecolor='white')   \nfig.subplots_adjust(top=0.95)\nj = 1\nfor col in important_nom_features:\n    plt.subplot(nrow, ncol, j, facecolor='white')    \n    ax = sns.kdeplot(data=diabet_class, x=col, hue=\"Target\", multiple=\"stack\") \n    ax.set_xlabel(col, fontsize=15)\n    ax.set_ylabel(\"Density\", fontsize=15)\n    sns.despine(right=True)\n    sns.despine(offset=0, trim=False)    \n    j = j +1\nplt.suptitle('Important Continous Features' ,fontsize = 16);","a37261e3":"import six\nimport sys\nsys.modules['sklearn.externals.six'] = six","00e52379":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn import metrics \nX = diabet_class[important_nom_features]\ny = diabet_class.Target","79cf04a3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1) # 70% training and 30% test","ef046210":"clf = DecisionTreeClassifier()    # Create Decision Tree classifer object\n\nclf = clf.fit(X_train,y_train)    # Train Decision Tree Classifer\n\ny_pred = clf.predict(X_test)      #Predict the response for test dataset","f0553e56":"print(\"Accuracy:\",metrics.accuracy_score(y_test,y_pred))\nprint(\"Precision:\",metrics.precision_score(y_test,y_pred,pos_label=0))\nprint(\"Recall:\",metrics.recall_score(y_test,y_pred,pos_label=0))\nprint(\"F Score:\",metrics.f1_score(y_test,y_pred,pos_label=0))\nprint(\"Confusion Matrix:\\n\",metrics.confusion_matrix(y_test,y_pred))","82488573":"import six\nimport sys\nsys.modules['sklearn.externals.six'] = six","4fac9f48":"!pip install pydotplus","7435088d":"from sklearn.externals.six import StringIO  \nfrom IPython.display import Image  \nfrom sklearn.tree import export_graphviz\nimport pydotplus\ndot_data = StringIO()\nexport_graphviz(clf, out_file=dot_data,  \n                filled=True, rounded=True,\n                special_characters=True, feature_names = important_nom_features,class_names=['0','1'])\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \ngraph.write_png('diabetes.png')\nImage(graph.create_png())","803b0e37":"clf = DecisionTreeClassifier(criterion=\"entropy\", max_depth=3)    # Create Decision Tree classifer object\nclf = clf.fit(X_train,y_train)    # Train Decision Tree Classifer\ny_pred = clf.predict(X_test)      #Predict the response for test dataset\nprint(\"Accuracy:\",metrics.accuracy_score(y_test,y_pred))\nprint(\"Precision:\",metrics.precision_score(y_test,y_pred,pos_label=0))\nprint(\"Recall:\",metrics.recall_score(y_test,y_pred,pos_label=0))\nprint(\"F Score:\",metrics.f1_score(y_test,y_pred,pos_label=0))\nprint(\"Confusion Matrix:\\n\",metrics.confusion_matrix(y_test,y_pred))","2cfb3df7":"from sklearn.externals.six import StringIO  \nfrom IPython.display import Image  \nfrom sklearn.tree import export_graphviz\nimport pydotplus\ndot_data = StringIO()\nexport_graphviz(clf, out_file=dot_data,  \n                filled=True, rounded=True,\n                special_characters=True, feature_names = important_nom_features,class_names=['0','1'])\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \ngraph.write_png('diabetes.png')\nImage(graph.create_png())","62d980bb":"**Evaluation of the minimum and maximum glucose levels in the samples**","3bfeee42":"**Evaluation of waist and hip size ratio according to gender**","99d6e591":"**Evaluation of all numerical factors on the subject**","dc8e1c9c":"**Evaluation of waist and hip size ratio in diabetes**","02b6c44a":"**The effect of age and cholesterol on diabetes**","68c9ccec":"**Evaluation of glucose and cholesterol levels according to gender**","63346661":"**Evaluation the effect of gender, cholesterol and glucose levels on diabetes**","f9e55daf":"**Evaluation the effect of gender, cholesterol and waist\/hip ratio levels on diabetes**","95995dfe":"**Evaluation BMI**"}}