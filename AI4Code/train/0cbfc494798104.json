{"cell_type":{"e5f44a11":"code","94a905a7":"code","bea3a27d":"code","c32d3f61":"code","98a55f12":"code","a621794e":"code","8fa167be":"code","de68fd3e":"code","de8916c4":"code","5c9f0359":"code","de1281d6":"code","272f77fc":"code","c938c94b":"code","e4250543":"code","1f187424":"code","6bb4a9cd":"code","b0dcb282":"code","eb4d072c":"code","a9066492":"code","27fe15d7":"code","6a910cdf":"code","971871ac":"code","6da5c65a":"code","a845b321":"markdown","206f6fa4":"markdown","8ec0576d":"markdown","b180a2f8":"markdown","0cf2b433":"markdown","95d14665":"markdown","1fdf8d6e":"markdown","812659a5":"markdown","7890843a":"markdown"},"source":{"e5f44a11":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","94a905a7":"train=pd.read_csv(\"..\/input\/titanic\/train.csv\")\n","bea3a27d":"train.info()","c32d3f61":"train1=train.drop([\"PassengerId\",\"Name\",\"Sex\",\"Ticket\",\"Cabin\",\"Embarked\"],axis=1)","98a55f12":"train1.dropna(axis=0,inplace=True)\n\nX_train=train1.drop([\"Survived\"],axis=1)\nY_train=train1.Survived.values.reshape(-1,1)","a621794e":"sns.countplot(Y_train.reshape(714, ),palette=\"icefire\")\nplt.show()","8fa167be":"from sklearn.model_selection import train_test_split\nx_train,x_val,y_train,y_val = train_test_split(X_train,Y_train,test_size=0.10,random_state=42)\nprint(\"x train shape:{} \".format(x_train.shape))\nprint(\"y_train shape:{} \".format(y_train.shape))\nprint(\"x_val shape:{} \".format(x_val.shape))\nprint(\"y_val shaoe:{} \".format(y_val.shape))","de68fd3e":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(x_train,y_train)\ny_predict=lr.predict(x_val)\ncost_list=[]\ncost_list.append(y_predict)","de8916c4":"print(\"train score:{}\".format(lr.score(x_train,y_train)))\nprint(\"test score:{}\".format(lr.score(x_val,y_val)))","5c9f0359":"from sklearn.metrics import confusion_matrix\n\nconfusion_mtx=confusion_matrix(y_val,y_predict)\nf,ax=plt.subplots(figsize=(10,10))\nsns.heatmap(confusion_mtx,annot=True,linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\",fmt=\".1f\",ax=ax)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Real\")\nplt.title(\"Corroleation\")\nplt.show()","de1281d6":"test=pd.read_csv(\"..\/input\/titanic\/test.csv\")\ngs=pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","272f77fc":"test.drop([\"PassengerId\"],axis=1,inplace=True)","c938c94b":"test_data=pd.concat([gs,test],axis=1)","e4250543":"test_data","1f187424":"test_data.drop([\"PassengerId\",\"Name\",\"Sex\",\"Ticket\",\"Cabin\",\"Embarked\"],axis=1,inplace=True)","6bb4a9cd":"test_data.dropna(axis=0,inplace=True)","b0dcb282":"test_data.info()","eb4d072c":"xtest=test_data.drop([\"Survived\"],axis=1)\nytest=test_data.Survived.values.reshape(-1,1)","a9066492":"sns.countplot(ytest.reshape(331, ),palette=\"icefire\")\nplt.show()","27fe15d7":"from sklearn.model_selection import train_test_split\nx_train1,x_test1,y_train1,y_test1 = train_test_split(xtest,ytest,test_size=0.10,random_state=42)\nprint(\"x train1 shape: \",x_train1.shape)\nprint(\"x test1 shape: \",x_test1.shape)\nprint(\"y train1 shape: \",y_train1.shape)\nprint(\"y test1 shape: \",y_test1.shape)","6a910cdf":"lr1=LogisticRegression()\nlr1.fit(x_train1,y_train1)\ny_predict1=lr1.predict(x_test1)\n","971871ac":"print(\"train score:{}\".format(lr1.score(x_train1,y_train1)))\nprint(\"test score:{}\".format(lr1.score(x_test1,y_test1)))","6da5c65a":"confusion_mtx1=confusion_matrix(y_test1,y_predict1)\nf,ax=plt.subplots(figsize=(10,10))\nsns.heatmap(confusion_mtx1,annot=True,linewidths=0.1,cmap=\"Greens\",linecolor=\"gray\",fmt=\".1f\",ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()\n","a845b321":"I split my data for training my machine ","206f6fa4":"above result give us decimal value so we can not observe very well.For this I used confusion_matrix method and heatmap of seaborn library method.This method show me numerically ","8ec0576d":"Firstly I create variables for the data by pd.read_csv","b180a2f8":"I visualized that who live or who died","0cf2b433":"I did same things above","95d14665":"I dropped columns of type=object because sklearn can not work \n","1fdf8d6e":"I used Logistic Regression method beacuse the machine prove to learn by this method ","812659a5":"I removed nan beacuse it give error and I did reshape for Y_train beacuse sklearn library can not understand Y_train.shape = (714, )\n","7890843a":"I scored my machine. we can see here that how long learnt the machine and could it make true prediction  "}}