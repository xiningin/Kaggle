{"cell_type":{"6caa418a":"code","6dc03b04":"code","929a667a":"code","dfe67f6b":"code","0ec2349e":"code","0f7ea08a":"code","495271fa":"code","bfeff632":"code","cb348030":"code","fed22a9b":"code","5cd06511":"code","855b9d4f":"code","2f7d3088":"code","3ec11069":"code","b4ef5bd0":"code","9cfa2339":"code","05c48845":"code","8f2f2184":"code","11bd9877":"code","c49fd391":"code","bda75f84":"code","409fb1d1":"code","01b77d38":"code","47b708da":"code","0f62f0cd":"code","af919643":"code","b2d6ca76":"code","cc842577":"code","406e1d27":"code","d97a733c":"code","e28e4b74":"code","4e43980a":"code","68740a76":"code","a5cd8f34":"code","4299f5b5":"code","be5d2342":"code","7edf8e7c":"code","5817da3c":"code","0e25f290":"code","199d285a":"code","6d71639a":"code","c5fe789f":"code","6803ed3c":"code","534c460f":"code","dacec056":"code","96d49e3d":"code","7b01cbfa":"code","5cf3a7f5":"code","989bf1cd":"code","f3012b0e":"code","c6f279df":"code","9c79a68f":"code","77145190":"code","7525bc7d":"code","1e5b9bb0":"code","a989029c":"code","04b810c9":"code","c9e3640f":"code","50c37abe":"code","4bae8a3b":"markdown","514d8959":"markdown","1347dc39":"markdown","33ce8b64":"markdown","665b9291":"markdown","3093f131":"markdown","c10e6847":"markdown","94cca630":"markdown","1f3e20ba":"markdown","b64b08af":"markdown","4bd24535":"markdown","ea4888ba":"markdown","5bdb3721":"markdown","14ef3d26":"markdown","33658252":"markdown","70f75be1":"markdown","6d3d7bbf":"markdown"},"source":{"6caa418a":"import pandas as pd\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('display.width', None)\npd.set_option('display.max_colwidth', None)\n\ndata1 = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')","6dc03b04":"data1.head()","929a667a":"data1.shape","dfe67f6b":"data1.info()","0ec2349e":"data1['date'] = pd.to_datetime(data1['date'].str.strip(), format='%Y\/%m\/%d')","0f7ea08a":"data1['Year'] = data1['date'].dt.year # getting year\ndata1['Month'] = data1['date'].dt.month # getting month\ndata1['Day'] = data1['date'].dt.day # getting day","495271fa":"data1.head()","bfeff632":"data1.describe()","cb348030":"'''Missing Value Chart'''\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 5))\ndata1.isnull().mean(axis=0).plot.barh()\nplt.title(\"Ratio of missing values per columns\")","fed22a9b":"'''Checking Duplicate'''\n\nprint('Dupplicate entries: {}'.format(data1.duplicated().sum()))\n# data1.drop_duplicates(inplace = True)","5cd06511":"#label encoding\nfrom sklearn.preprocessing import LabelEncoder\n\nvar = ['id','zipcode']\n\nfor i in var:\n    labelencoder = LabelEncoder()\n    data1[i] = labelencoder.fit_transform(data1[i])","855b9d4f":"data1['zipcode'].nunique()","2f7d3088":"import plotly.express as px\nimport plotly.offline as py \npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go \nimport plotly.tools as tools\nimport warnings\nfrom collections import Counter \nfrom plotly.subplots import make_subplots\n\ncustom_aggregation = {}\ncustom_aggregation[\"id\"] = \"count\"\ndata2 = data1.groupby(\"Year\").agg(custom_aggregation)\ndata2['Year'] = data2.index\n\nfig = make_subplots(rows=1, \n                    cols=2, \n                    specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=('Year',\n                                    'Month'))\n\n\nlabels = data2['Year'].tolist()\nvalues = data2['id'].tolist()\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name=''),\n                    1,1)\n\n#-------------------------------------------\n\ncustom_aggregation = {}\ncustom_aggregation[\"id\"] = \"count\"\ndata2 = data1.groupby(\"Month\").agg(custom_aggregation)\ndata2['Month'] = data2.index\n\nlabels = data2['Month'].tolist()\nvalues = data2['id'].tolist()\n\n\nfig.add_trace(go.Pie(\n                    labels=labels,\n                    values=values, \n                    name=''),\n                    1,2)\n\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig['layout'].update(height=400, \n                     width=800, \n                     title='Number of Sold House in:',\n                     showlegend=False)\nfig.show()","3ec11069":"fig = make_subplots(rows=1, \n                    cols=1)\n\ncustom_aggregation = {}\ncustom_aggregation[\"price\"] = \"mean\"\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"Mean Price\"]\ndata2['Region'] = data2.index\ndata2['Region'] = data2['Region'].astype('category')\ndata2 = data2.sort_values(by = 'Mean Price', ascending = False)\n\nx = data2['Region'].tolist()\ny = data2['Mean Price'].tolist()\n\n\nfig.add_trace(go.Scatter(x=x, \n                         y=y,\n                         name=' ',\n                         mode='markers'), 1, 1)\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='Mean Price Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"Mean Price\",\n                    legend_title=\"Price\")\nfig.show()","b4ef5bd0":"data1['price'].describe()","9cfa2339":"q1 = data1['price'].describe()[4]\nq3 = data1['price'].describe()[6]\nq1, q3","05c48845":"def conditions(a):\n    if (a['price'] <= q1):\n        return 'Low'\n    if (a['price'] >= q3):\n        return 'High'\n    else:\n        return 'Medium'","8f2f2184":"data1['Cat.'] = data1.apply(conditions, axis=1)","11bd9877":"import plotly.express as px\n\n# Price\n\ncustom_aggregation = {}\ncustom_aggregation[\"price\"] = \"mean\"\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"Mean Price\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"Mean Price\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='Mean Price Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"Mean Price\",\n                    legend_title=\"Price\")\n\nfig.show()","c49fd391":"# Bedrooms\n\ncustom_aggregation = {}\ncustom_aggregation[\"bedrooms\"] = 'mean'\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"Bedrooms\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"Bedrooms\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='Bedrooms Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"Bedrooms\",\n                    legend_title=\"Price\")\n\nfig.show()","bda75f84":"# Bathrooms\n\ncustom_aggregation = {}\ncustom_aggregation[\"bathrooms\"] = 'mean'\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"Bathrooms\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"Bathrooms\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='Bathrooms Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"Bathrooms\",\n                    legend_title=\"Price\")\n\nfig.show()","409fb1d1":"# Living Area\n\ncustom_aggregation = {}\ncustom_aggregation[\"sqft_living\"] = 'mean'\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"Living Area\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"Living Area\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='Living Area Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"Living Area\",\n                    legend_title=\"Price\")\n\nfig.show()","01b77d38":"# Land Space\n\ncustom_aggregation = {}\ncustom_aggregation[\"sqft_lot\"] = 'mean'\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"Land Space\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"Land Space\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='Land Space Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"Land Space\",\n                    legend_title=\"Price\")\n\nfig.show()","47b708da":"# Floors\n\ncustom_aggregation = {}\ncustom_aggregation[\"floors\"] = 'mean'\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"Floors\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"Floors\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='Floors Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"Floors\",\n                    legend_title=\"Price\")\n\nfig.show()","0f62f0cd":"# Waterfront\n\ncustom_aggregation = {}\ncustom_aggregation[\"waterfront\"] = 'mean'\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"Waterfront\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"Waterfront\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='Waterfront Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"Waterfront\",\n                    legend_title=\"Price\")\n\nfig.show()","af919643":"# View\n\ncustom_aggregation = {}\ncustom_aggregation[\"view\"] = 'mean'\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"View\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"View\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='View Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"View\",\n                    legend_title=\"Price\")\n\nfig.show()","b2d6ca76":"# Condition\n\ncustom_aggregation = {}\ncustom_aggregation[\"condition\"] = 'mean'\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"Condition\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"Condition\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='Condition Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"Condition\",\n                    legend_title=\"Price\")\n\nfig.show()","cc842577":"# Grade\n\ncustom_aggregation = {}\ncustom_aggregation[\"grade\"] = 'mean'\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"Grade\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"Grade\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='Grade Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"Grade\",\n                    legend_title=\"Price\")\n\nfig.show()","406e1d27":"# SQFT Above\n\ncustom_aggregation = {}\ncustom_aggregation[\"sqft_above\"] = 'mean'\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"SQFT Above\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"SQFT Above\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='SQFT Above Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"SQFT Above\",\n                    legend_title=\"Price\")\n\nfig.show()","d97a733c":"# SQFT Basement\n\ncustom_aggregation = {}\ncustom_aggregation[\"sqft_basement\"] = 'mean'\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"SQFT Basement\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"SQFT Basement\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='SQFT Basement Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"SQFT Basement\",\n                    legend_title=\"Price\")\n\nfig.show()","e28e4b74":"# Renovated\n\ncustom_aggregation = {}\ncustom_aggregation[\"yr_renovated\"] = 'mean'\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"Renovated\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"Renovated\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='Renovated Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"Renovated\",\n                    legend_title=\"Price\")\n\nfig.show()","4e43980a":"# Built\n\ncustom_aggregation = {}\ncustom_aggregation[\"yr_built\"] = 'mean'\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"Built\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"Built\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='Built Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"Built\",\n                    legend_title=\"Price\")\n\nfig.show()","68740a76":"# SQFT Living 15\n\ncustom_aggregation = {}\ncustom_aggregation[\"sqft_living15\"] = 'mean'\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"SQFT Living 15\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"SQFT Living 15\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='SQFT Living 15 Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"SQFT Living 15\",\n                    legend_title=\"Price\")\n\nfig.show()","a5cd8f34":"# SQFT Lot 15\n\ncustom_aggregation = {}\ncustom_aggregation[\"sqft_lot15\"] = 'mean'\ncustom_aggregation[\"Cat.\"] = lambda x: x.mode().iloc[0]\ndata2 = data1.groupby(\"zipcode\").agg(custom_aggregation)\ndata2.columns = [\"SQFT Lot 15\",'Category']\ndata2['Region'] = data2.index\n\nfig = px.scatter(data2, \n              x=\"Region\", \n              y=\"SQFT Lot 15\", \n              color=\"Category\")\n\nfig['layout'].update(height=500, \n                     width=900, \n                     title='SQFT Lot 15 Distribution by Region',\n                    xaxis_title=\"Region\",\n                    yaxis_title=\"SQFT Lot 15\",\n                    legend_title=\"Price\")\n\nfig.show()","4299f5b5":"custom_aggregation = {}\ncustom_aggregation[\"price\"] = 'mean'\ncustom_aggregation[\"bedrooms\"] = 'mean'\ncustom_aggregation[\"bathrooms\"] = 'mean'\ncustom_aggregation[\"sqft_living\"] = 'mean'\ncustom_aggregation[\"sqft_lot\"] = 'mean'\ncustom_aggregation[\"floors\"] = 'mean'\ncustom_aggregation[\"waterfront\"] = 'mean'\ncustom_aggregation[\"view\"] = 'mean'\ncustom_aggregation[\"condition\"] = 'mean'\ncustom_aggregation[\"grade\"] = 'mean'\ncustom_aggregation[\"sqft_above\"] = 'mean'\ncustom_aggregation[\"sqft_basement\"] = 'mean'\ncustom_aggregation[\"yr_built\"] = 'mean'\ncustom_aggregation[\"yr_renovated\"] = 'mean'\ncustom_aggregation[\"zipcode\"] = lambda x: x.mode().iloc[0]\ncustom_aggregation[\"sqft_living15\"] = 'mean'\ncustom_aggregation[\"sqft_lot15\"] = 'mean'\n\ndata2 = data1.groupby(\"Cat.\").agg(custom_aggregation)\ndata2['Feature'] = data2.index\n\nd_ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"price\"],\n    name='Price')\n\nd__ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"bedrooms\"],\n    name='Bedrooms')\n\nd___ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"bathrooms\"],\n    name='Bathrooms')\n\n\ndata = [d_, d__, d___]\n\nfig = tools.make_subplots(rows=1, \n                          cols=3)\n\nfig.append_trace(d_, 1, 1)\nfig.append_trace(d__, 1, 2)\nfig.append_trace(d___, 1, 3)\n\nfig['layout'].update(height=400, \n                     width=800, \n                     title='Price Category Comparison on Each Feature',\n                    xaxis_title=\" \",\n                    yaxis_title=\" \",\n                    legend_title=\"Feature\")\n\npy.iplot(fig, filename='combined-savings')\n\n","be5d2342":"d_ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"sqft_living\"],\n    name='SQFT Living')\n\nd__ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"sqft_lot\"],\n    name='SQFT Lot')\n\nd___ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"floors\"],\n    name='Floors')\n\n\ndata = [d_, d__, d___]\n\nfig = tools.make_subplots(rows=1, \n                          cols=3)\n\nfig.append_trace(d_, 1, 1)\nfig.append_trace(d__, 1, 2)\nfig.append_trace(d___, 1, 3)\n\nfig['layout'].update(height=400, \n                     width=800, \n                     title='Price Category Comparison on Each Feature',\n                    xaxis_title=\" \",\n                    yaxis_title=\" \",\n                    legend_title=\"Feature\")\n\npy.iplot(fig, filename='combined-savings')","7edf8e7c":"d_ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"waterfront\"],\n    name='Waterfront')\n\nd__ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"view\"],\n    name='View')\n\nd___ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"condition\"],\n    name='Condition')\n\n\ndata = [d_, d__, d___]\n\nfig = tools.make_subplots(rows=1, \n                          cols=3)\n\nfig.append_trace(d_, 1, 1)\nfig.append_trace(d__, 1, 2)\nfig.append_trace(d___, 1, 3)\n\nfig['layout'].update(height=400, \n                     width=800, \n                     title='Price Category Comparison on Each Feature',\n                    xaxis_title=\" \",\n                    yaxis_title=\" \",\n                    legend_title=\"Feature\")\n\npy.iplot(fig, filename='combined-savings')","5817da3c":"d_ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"grade\"],\n    name='Grade')\n\nd__ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"sqft_above\"],\n    name='SQFT Above')\n\nd___ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"sqft_basement\"],\n    name='SQFT Basement')\n\n\ndata = [d_, d__, d___]\n\nfig = tools.make_subplots(rows=1, \n                          cols=3)\n\nfig.append_trace(d_, 1, 1)\nfig.append_trace(d__, 1, 2)\nfig.append_trace(d___, 1, 3)\n\nfig['layout'].update(height=400, \n                     width=800, \n                     title='Price Category Comparison on Each Feature',\n                    xaxis_title=\" \",\n                    yaxis_title=\" \",\n                    legend_title=\"Feature\")\n\npy.iplot(fig, filename='combined-savings')","0e25f290":"d_ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"yr_built\"],\n    name='Built')\n\nd__ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"yr_renovated\"],\n    name='Renovated')\n\nd___ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"sqft_living15\"],\n    name='SQFT Living 15')\n\n\nd____ = go.Bar(\n    x = data2['Feature'].value_counts().index.sort_values(),\n    y = data2[\"sqft_lot15\"],\n    name='SQFT Lot 15')\n\n\ndata = [d_, d__, d___,d____]\n\nfig = tools.make_subplots(rows=1, \n                          cols=4)\n\nfig.append_trace(d_, 1, 1)\nfig.append_trace(d__, 1, 2)\nfig.append_trace(d___, 1, 3)\nfig.append_trace(d____, 1, 4)\n\nfig['layout'].update(height=400, \n                     width=900, \n                     title='Price Category Comparison on Each Feature',\n                    xaxis_title=\" \",\n                    yaxis_title=\" \",\n                    legend_title=\"Feature\")\n\npy.iplot(fig, filename='combined-savings')","199d285a":"data1['Year'].min(), data1['Year'].max()","6d71639a":"data1.corr()['price'].sort_values(ascending=False)","c5fe789f":"features = data1.corr()['price'].drop(['price','lat','long','Year']).sort_values(ascending=False)[:15].index.tolist()\nfeatures","6803ed3c":"fig = make_subplots(rows=1, \n                    cols=1)\ncor = data1.corr()\ncor_ = cor.index\ncor__ = cor.values\n\nfig.add_trace(go.Heatmap(\n                    x=cor_,\n                    y=cor_,\n                    z=cor__,\n                    name='Correlation',\n                    showscale=False,\n                    xgap=0.7,\n                    ygap=0.7), 1, 1)\n\n\nfig['layout'].update(height=600, \n                     width=600, \n                     title='Heat Map',\n                     xaxis_title=\" \",\n                     yaxis_title=\" \")\nfig.show()","534c460f":"from sklearn.model_selection import train_test_split\n\ntrain_data,test_data = train_test_split(data1,train_size = 0.7,random_state=3)","dacec056":"train_data.shape, test_data.shape","96d49e3d":"from sklearn.linear_model import SGDRegressor\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\nfrom sklearn.linear_model import Lasso, Ridge, ElasticNet, RANSACRegressor, SGDRegressor, HuberRegressor, BayesianRidge\nfrom sklearn.ensemble import RandomForestRegressor, BaggingRegressor, AdaBoostRegressor, GradientBoostingRegressor, ExtraTreesRegressor\nfrom xgboost import XGBRegressor, plot_importance\nfrom sklearn.svm import SVR, SVC, LinearSVC\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.decomposition import KernelPCA, PCA\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.model_selection import learning_curve, validation_curve, GridSearchCV\nfrom sklearn.base import clone\nfrom sklearn.metrics import mean_squared_error as MSE\n\npipelines = []\n\nseed = 2\n\npipelines.append((\"Scaled_Ridge\", \n                  Pipeline([(\"Scaler\", StandardScaler()),\n                            (\"Ridge\", Ridge(random_state=seed, tol=10 ))\n                           ]\n                          )\n                 )\n                )\n\n\npipelines.append((\"Scaled_Lasso\", \n                 Pipeline([(\"Scaler\", StandardScaler()), \n                           (\"Lasso\", Lasso(random_state=seed, tol=1))\n                          ]\n                         )\n                 )\n                )\n\npipelines.append((\"Scaled_Elastic\", \n                 Pipeline([(\"Scaler\", StandardScaler()), \n                           (\"Lasso\", ElasticNet(random_state=seed))\n                          ]\n                         )\n                 )\n                )\n\npipelines.append((\"Scaled_SVR\",\n                 Pipeline([(\"Scaler\", StandardScaler()),\n                           (\"SVR\",  SVR(kernel='linear', C=1e2, degree=5))\n                          ]\n                         )\n                 )\n                )\n\npipelines.append((\"Scaled_RF_reg\",\n                 Pipeline([(\"Scaler\", StandardScaler()),\n                           (\"RF\", RandomForestRegressor(random_state=seed))\n                          ]\n                         )\n                 )\n                )\n\npipelines.append((\"Scaled_ET_reg\",\n                 Pipeline([(\"Scaler\", StandardScaler()),\n                           (\"ET\", ExtraTreesRegressor(random_state=seed))\n                          ]\n                         )\n                 )\n                )\n\npipelines.append((\"Scaled_BR_reg\",\n                 Pipeline([(\"Scaler\", StandardScaler()),\n                           (\"BR\", BaggingRegressor(random_state=seed))\n                          ]\n                         )\n                 )\n                ) \n\npipelines.append((\"Scaled_Hub-Reg\",\n                 Pipeline([(\"Scaler\", StandardScaler()),\n                           (\"Hub-Reg\", HuberRegressor())\n                          ]\n                         )\n                 )\n                )\n\npipelines.append((\"Scaled_BayRidge\",\n                 Pipeline([(\"Scaler\", StandardScaler()),\n                        (\"BR\", BayesianRidge())\n                          ]\n                         )\n                 )\n                ) \n\npipelines.append((\"Scaled_XGB_reg\",\n                 Pipeline([(\"Scaler\", StandardScaler()),\n                          (\"XGBR\", XGBRegressor(seed=seed))\n                          ]\n                         )\n                 )\n                ) \n\npipelines.append((\"Scaled_DT_reg\",\n                 Pipeline([(\"Scaler\", StandardScaler()),\n                           (\"DT_reg\", DecisionTreeRegressor())\n                          ]\n                         )\n                 )\n                ) \n\npipelines.append((\"Scaled_KNN_reg\",\n                 Pipeline([(\"Scaler\", StandardScaler()),\n                           (\"KNN_reg\", KNeighborsRegressor())\n                          ]\n                         )\n                 )\n                )\n\npipelines.append((\"Scaled_ADA-Reg\",\n                  Pipeline([(\"Scaler\", StandardScaler()),\n                            (\"ADA-reg\", AdaBoostRegressor())\n                           ]\n                          )\n                 )\n                ) \n\npipelines.append((\"Scaled_Gboost-Reg\",\n                 Pipeline([(\"Scaler\", StandardScaler()),\n                           (\"GBoost-Reg\", GradientBoostingRegressor())\n                          ]\n                         )\n                 )\n                )\n\npipelines.append((\"Scaled_RFR_PCA\",\n                 Pipeline([(\"Scaler\", StandardScaler()),\n                           (\"PCA\", PCA(n_components=3)),\n                           (\"XGB\", RandomForestRegressor())\n                          ]\n                         )\n                 )\n                )\n\npipelines.append((\"Scaled_XGBR_PCA\",\n                 Pipeline([(\"Scaler\", StandardScaler()),\n                           (\"PCA\", PCA(n_components=3)),\n                           (\"XGB\", XGBRegressor())\n                          ]\n                         )\n                 )\n                )\n\n#'neg_mean_absolute_error', 'neg_mean_squared_error','r2'\nscoring = 'r2'\nn_folds = 7\nresults, names  = [], [] \n\nfor name, model  in pipelines:\n    kfold = KFold(n_splits=n_folds, random_state=None)\n    cv_results = cross_val_score(model, train_data[features], train_data['price'], cv= kfold,scoring=scoring, n_jobs=-1)    \n    names.append(name)\n    results.append(cv_results)    \n    msg = \"%s: %f (+\/- %f)\" % (name, cv_results.mean(),  cv_results.std())\n    print(msg)\n    \n# boxplot algorithm comparison\nfig = plt.figure(figsize=(18,6))\nfig.suptitle('Algorithm Comparison by R2')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.xticks(rotation=90)\nplt.show()","7b01cbfa":"evaluation = pd.DataFrame({'Model': [],\n                           'Details':[],\n                           'Root Mean Squared Error (RMSE)':[],\n                           'R-squared (training)':[],\n                           'Adjusted R-squared (training)':[],\n                           'R-squared (test)':[],\n                           'Adjusted R-squared (test)':[],\n                           '5-Fold Cross Validation':[]})","5cf3a7f5":"def adjustedR2(r2,n,k):\n    return r2-(k-1)\/(n-k)*(1-r2)","989bf1cd":"'''RANDOM FOREST REGRESION'''\n#with multiple selected_feature\nimport numpy as np\nfrom sklearn import metrics\n\nrf = RandomForestRegressor(random_state=seed)\nrf.fit(train_data[features],train_data['price'])\n\npred1 = rf.predict(test_data[features])\nrmsecm1 = float(format(np.sqrt(metrics.mean_squared_error(test_data['price'],pred1)),'.3f'))\nrtrcm1 = float(format(rf.score(train_data[features],train_data['price']),'.3f'))\nartrcm1 = float(format(adjustedR2(rf.score(train_data[features],train_data['price']),train_data.shape[0],len(features)),'.3f'))\nrtecm1 = float(format(rf.score(test_data[features],test_data['price']),'.3f'))\nartecm1 = float(format(adjustedR2(rf.score(test_data[features],test_data['price']),test_data.shape[0],len(features)),'.3f'))\ncv1 = float(format(cross_val_score(rf,data1[features],data1['price'],cv=5).mean(),'.3f'))\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['Random Forest','selected features',rmsecm1,rtrcm1,artrcm1,rtecm1,artecm1,cv1]\nevaluation.sort_values(by = '5-Fold Cross Validation', ascending=False)\nevaluation","f3012b0e":"'''EXTRA TREE REGRESION'''\n#with multiple selected_feature\n\net = ExtraTreesRegressor(random_state=seed)\net.fit(train_data[features],train_data['price'])\n\npred2 = et.predict(test_data[features])\nrmsecm2 = float(format(np.sqrt(metrics.mean_squared_error(test_data['price'],pred2)),'.3f'))\nrtrcm2 = float(format(et.score(train_data[features],train_data['price']),'.3f'))\nartrcm2 = float(format(adjustedR2(et.score(train_data[features],train_data['price']),train_data.shape[0],len(features)),'.3f'))\nrtecm2 = float(format(et.score(test_data[features],test_data['price']),'.3f'))\nartecm2 = float(format(adjustedR2(et.score(test_data[features],test_data['price']),test_data.shape[0],len(features)),'.3f'))\ncv2 = float(format(cross_val_score(et,data1[features],data1['price'],cv=5).mean(),'.3f'))\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['Extra Tree','selected features',rmsecm2,rtrcm2,artrcm2,rtecm2,artecm2,cv2]\nevaluation.sort_values(by = '5-Fold Cross Validation', ascending=False)\nevaluation","c6f279df":"'''XGB REGRESION'''\n#with multiple selected_feature\n\nxgb = XGBRegressor(random_state=seed)\nxgb.fit(train_data[features],train_data['price'])\n\npred3 = xgb.predict(test_data[features])\nrmsecm3 = float(format(np.sqrt(metrics.mean_squared_error(test_data['price'],pred3)),'.3f'))\nrtrcm3 = float(format(xgb.score(train_data[features],train_data['price']),'.3f'))\nartrcm3 = float(format(adjustedR2(xgb.score(train_data[features],train_data['price']),train_data.shape[0],len(features)),'.3f'))\nrtecm3 = float(format(xgb.score(test_data[features],test_data['price']),'.3f'))\nartecm3 = float(format(adjustedR2(xgb.score(test_data[features],test_data['price']),test_data.shape[0],len(features)),'.3f'))\ncv3 = float(format(cross_val_score(xgb,data1[features],data1['price'],cv=5).mean(),'.3f'))\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['XGB Regressor','selected features',rmsecm3,rtrcm3,artrcm3,rtecm3,artecm3,cv3]\nevaluation.sort_values(by = '5-Fold Cross Validation', ascending=False)\nevaluation","9c79a68f":"'''BAGGING REGRESION'''\n#with multiple selected_feature\n\nbg = BaggingRegressor(random_state=seed)\nbg.fit(train_data[features],train_data['price'])\n\npred4 = bg.predict(test_data[features])\nrmsecm4 = float(format(np.sqrt(metrics.mean_squared_error(test_data['price'],pred4)),'.3f'))\nrtrcm4 = float(format(bg.score(train_data[features],train_data['price']),'.3f'))\nartrcm4 = float(format(adjustedR2(bg.score(train_data[features],train_data['price']),train_data.shape[0],len(features)),'.3f'))\nrtecm4 = float(format(bg.score(test_data[features],test_data['price']),'.3f'))\nartecm4 = float(format(adjustedR2(bg.score(test_data[features],test_data['price']),test_data.shape[0],len(features)),'.3f'))\ncv4 = float(format(cross_val_score(bg,data1[features],data1['price'],cv=5).mean(),'.3f'))\n\nr = evaluation.shape[0]\nevaluation.loc[r] = ['Bagging','selected features',rmsecm4,rtrcm4,artrcm4,rtecm4,artecm4,cv4]\nevaluation.sort_values(by = '5-Fold Cross Validation', ascending=False)\nevaluation","77145190":"# DISPLAY MODELLING\nimport seaborn as sns\n\ndef model_performance_sc_plot(predictions, labels, title):\n    min_val = max(max(predictions), max(labels))\n    max_val = min(min(predictions), min(labels))\n    performance_df = pd.DataFrame({\"Label\":labels})\n    performance_df[\"Prediction\"] = predictions\n    sns.jointplot(y=\"Label\", x=\"Prediction\", data=performance_df, kind=\"reg\", height=7)\n    plt.plot([min_val, max_val], [min_val, max_val], 'm--')\n    plt.title(title, fontsize=9)\n    plt.show()","7525bc7d":"# Random Forest\n\nmodel_performance_sc_plot(pred1, test_data['price'], 'Validation')","1e5b9bb0":"# Extra Tree\n\nmodel_performance_sc_plot(pred2, test_data['price'], 'Validation')","a989029c":"# XGB\n\nmodel_performance_sc_plot(pred3, test_data['price'], 'Validation')","04b810c9":"# Bagging\n\nmodel_performance_sc_plot(pred4, test_data['price'], 'Validation')","c9e3640f":"data1['Random Forest'] = rf.predict(data1[features])\ndata1['Extra Tree'] = et.predict(data1[features])\ndata1['XGB'] = xgb.predict(data1[features])\ndata1['Bagging'] = bg.predict(data1[features])","50c37abe":"data_ = data1[['id','price','Random Forest','Extra Tree','XGB','Bagging']]\ndata_.sort_values(by='id', ascending=True).head()","4bae8a3b":"- I want to find out differences from each category of house (Low,Medium, High) in each features.\n- The higher difference in each house category, it will show that these features will greatly affect the price of the house\n- And feature that affect price based on significance difference on house category are:\n\n    1. Renovated, \n    2. SQFT Living 15\n    3. SQFT Lot 15\n    4. SQFT Basement\n    5. SQFT Above\n    6. View\n    7. Waterfront\n    8. SQFT Living\n    9. SQFT Lot\n    \n    \n- Assume that you really want home with nice view but in affordable price, i think you should go to city number 65 and 35 which have Medium Price. Or city number 12 and 68 which have low price!","514d8959":"- We have 21613 rows, 21 faetures\n- And for Date i convert to datetime format, and generating it's Year, Month, and Day in seperate column\n- Our data is clear from missing values and duplicate\n- For id and zipcode, i will convert it to simple numerical label using LabelEncoder","1347dc39":"Hello \ud83d\ude4c, welcome to my notebook. In this notebook we will try to exploring house sales data and also develop and evaluate model to predict house sales price. Feel free if you have any question or suggestion! Thank you!\n\n* Before i start, there is several piece of code that i copy from this beatufiul Kernel:\n\nhttps:\/\/www.kaggle.com\/burhanykiyakoglu\/predicting-house-prices\n\nhttps:\/\/www.kaggle.com\/kabure\/predicting-house-prices-xgb-rf-bagging-reg-pipe\n\nKindly, check and upvote their Kernel. Thank you!","33ce8b64":"# Feature Distribution","665b9291":"# Prediction","3093f131":"# Intro & Feature Defenition","c10e6847":"- I try to plot mean price of house in each region\n- But i think it will be more usefull if we can categorized wether the region categorized as High, Medium or Low house price\n- To do that i make a function to categorized its region\n- If the house price sold greater than Q3 it will categorized as High\n- If the house price sold lower than Q1 it will categorized as Lower\n- Else will return as Medium","94cca630":"# Mean Price Distribution","1f3e20ba":"Intro: This dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015. It's a great dataset for evaluating simple regression models.\n\n- id - Unique ID for each home sold\n- date - Date of the home sale\n- price - Price of each home sold\n- bedrooms - Number of bedrooms\n- bathrooms - Number of bathrooms, where .5 accounts for a room with a toilet but no shower\n- sqft_living - Square footage of the apartments interior living space\n- sqft_lot - Square footage of the land space\n- floors - Number of floors\n- waterfront - A dummy variable for whether the apartment was overlooking the waterfront or not\n- view - An index from 0 to 4 of how good the view of the property was\n- condition - An index from 1 to 5 on the condition of the apartment,\n- grade - An index from 1 to 13, where 1-3 falls short of building construction and design, 7 has an average level of construction and design, and 11-13 have a high quality level of construction and design.\n- sqft_above - The square footage of the interior housing space that is above ground level\n- sqft_basement - The square footage of the interior housing space that is below ground level\n- yr_built - The year the house was initially built\n- yr_renovated - The year of the house\u2019s last renovation\n- zipcode - What zipcode area the house is in\n- lat - Lattitude\n- long - Longitude\n- sqft_living15 - The square footage of interior housing living space for the nearest 15 neighbors\n- sqft_lot15 - The square footage of the land lots of the nearest 15 neighbors","b64b08af":"# Price Category Comparison on Each Feature","4bd24535":"# Data Importing & Preview","ea4888ba":"# Number of Sold House","5bdb3721":"# Pre-Processing","14ef3d26":"# Modelling","33658252":"- In 2014, number of house for sold is 67.7%, greater than in 2015 which is 32.3%\n- Throughout the month of the year, most houses are sold in May","70f75be1":"- For the feature, i select only feature which have positive correlation with price\n- Before modelling i will review several algorithm based on R2 values\n- I decided to go with Random Forest, Extra Tree, XGB and Debugging","6d3d7bbf":"Finish. Don't forget to upvote! Thank you!:)"}}