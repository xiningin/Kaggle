{"cell_type":{"b66d9dc3":"code","112cd723":"code","af0adb86":"code","9c71951b":"code","30a1a6ec":"code","df176381":"code","0df8e2fa":"code","8b74b47c":"code","e47b3a1c":"code","5d099081":"code","e5e2cdc4":"code","4ca8a390":"code","61a8bfa8":"code","d19eec99":"markdown","3f259f41":"markdown","9961b5e9":"markdown","db1a0972":"markdown","24cf9d6a":"markdown","01523214":"markdown","a265d11c":"markdown","e90d7bfa":"markdown","1867de1f":"markdown"},"source":{"b66d9dc3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\nimport librosa as lb\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","112cd723":"diagnosis=pd.read_csv('\/kaggle\/input\/respiratory-sound-database\/respiratory_sound_database\/Respiratory_Sound_Database\/patient_diagnosis.csv',names=['pid','disease'])\ndiagnosis.head()","af0adb86":"sns.countplot(diagnosis.disease)\nplt.xticks(rotation=90)","9c71951b":"import os\ndef extractId(filename):\n    return filename.split('_')[0]","30a1a6ec":"path='\/kaggle\/input\/preprocessing-part-1\/processed_audio_files\/'\nlength=len(os.listdir(path))\nindex=range(length)\ni=0\nfiles_df=pd.DataFrame(index=index,columns=['pid','filename'])\nfor f in os.listdir(path):\n    files_df.iloc[i]['pid']=extractId(f)\n    files_df.iloc[i]['filename']=f\n    i+=1\nfiles_df.head()","df176381":"files_df.pid=files_df.pid.astype('int64') # both pid's must be of same dtype for them to merge","0df8e2fa":"data=pd.merge(files_df,diagnosis,on='pid')\ndata.head()","8b74b47c":"sns.countplot(data.disease)\nplt.xticks(rotation=90)","e47b3a1c":"from sklearn.model_selection import train_test_split\nXtrain,Xval,ytrain,yval=train_test_split(data,data.disease,stratify=data.disease,random_state=42,test_size=0.25)","5d099081":"Xtrain.disease.value_counts()\/Xtrain.shape[0]","e5e2cdc4":"Xval.disease.value_counts()\/Xval.shape[0]","4ca8a390":"path='..\/input\/preprocessing-part-1\/processed_audio_files\/'\n\nimport librosa.display\nfile=path + Xtrain.iloc[193].filename \nsound,sample_rate=lb.load(file)\nmfccs = lb.feature.mfcc(y=sound, sr=sample_rate, n_mfcc=40)\nfig, ax = plt.subplots()\nimg = librosa.display.specshow(mfccs, x_axis='time', ax=ax)\nfig.colorbar(img, ax=ax)\nax.set(title='MFCC')","61a8bfa8":"Xtrain.to_csv('train.csv')\nXval.to_csv('val.csv')","d19eec99":"> I have used one file as an example here.","3f259f41":"* Here I am going to output **train & test datasets** so that i can use the **filenames** in then in another notebook where i will try other **feature extraction** methods inclusive of MFCC's and adopt the one or many based on **performance**.","9961b5e9":"> We will try to extract **Id** of each processed audio file and then merge them with their respective **class label** so we can split files in to train and validation folder in **stratified manner**","db1a0972":"> % of class labels in same in both train and val as we can see above\n\n* We did this because this will help our model to **learn and validate classes** , it will not be like we are training only on COPD disease and there is no COPD in our validation","24cf9d6a":"* Above i used the **stratify** arg of **train_test_split** and set it to disease to stratify data based on **class labels**","01523214":"> We can see that classes are very **skewed**","a265d11c":"* In the following plot we can see that classes are **imbalanced** so we must split them into train and validation set via stratify","e90d7bfa":"# Visualizing MFCCS ","1867de1f":"# Handeling Class Imbalance"}}