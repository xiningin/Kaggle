{"cell_type":{"849b35cc":"code","b08138d9":"code","6e8ba56e":"code","e9954b81":"code","c3f49381":"code","85d765cc":"code","4515bb89":"code","d7f4e3ee":"code","9f7316c4":"code","a3e9bceb":"code","da4c3aef":"markdown","340fd246":"markdown","2951cde0":"markdown","271cd1fd":"markdown"},"source":{"849b35cc":"\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.svm import SVC\nfrom sklearn.datasets import fetch_lfw_people\nfrom sklearn.decomposition import PCA as RandomizedPCA\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n\nsns.set(rc={'figure.figsize':(11.7,8.27)})","b08138d9":"class lfwPeopleDataset():\n    \n    def __init__(self, min_faces_per_person):\n        self.faces = fetch_lfw_people(min_faces_per_person=min_faces_per_person)\n    \n    def draw_sample(self):\n        fig, ax = plt.subplots(3, 5)\n        for i, axi in enumerate(ax.flat):\n            axi.imshow(self.faces.images[i], cmap='bone')\n            axi.set(xticks=[], yticks=[],\n            xlabel=self.faces.target_names[self.faces.target[i]])\n            \n    def get_features_labels(self):\n        return self.faces.data, self.faces.target, self.faces.target_names","6e8ba56e":"lfw_ds = lfwPeopleDataset(60)\nlfw_ds.draw_sample()","e9954b81":"features, labels, target_names = lfw_ds.get_features_labels()\n\nX_train, X_test, y_train, y_test = train_test_split(features, labels,\n                                                    random_state=42)","c3f49381":"class GridSearch():\n    def __init__(self):\n        pca = RandomizedPCA(n_components=150, whiten=True, random_state=42)\n        svc = SVC(kernel='rbf', class_weight='balanced')\n        self.model = make_pipeline(pca, svc)\n        \n        param_grid = {'svc__C': [1, 5, 10, 50],\n              'svc__gamma': [0.0001, 0.0005, 0.001, 0.005]}\n        self.grid = GridSearchCV(self.model, param_grid)\n        \n    def fit(self, X, y):\n        %time self.grid.fit(X, y)\n        print(self.grid.best_params_)\n        self.model = self.grid.best_estimator_\n        \n    def predict(self, X):\n        return self.model.predict(X)\n    \n    def plot_sample(self, target_names, y_hat):\n        fig, ax = plt.subplots(4, 6)\n        for i, axi in enumerate(ax.flat):\n            axi.imshow(X_test[i].reshape(62, 47), cmap='bone')\n            axi.set(xticks=[], yticks=[])\n            axi.set_ylabel(target_names[y_hat[i]].split()[-1],\n            color='black' if y_hat[i] == y_test[i] else 'red')\n            fig.suptitle('Predicted Names; Incorrect Labels in Red', size=14)\n            \n    def report(self, target_names, y, y_hat):\n        print(classification_report(y, y_hat,\n              target_names=target_names))\n        \n    def heatmap(self, target_names, y, y_hat):\n        mat = confusion_matrix(y, y_hat)\n        sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False,\n        xticklabels=target_names,\n        yticklabels=target_names)\n        plt.xlabel('true label')\n        plt.ylabel('predicted label')","85d765cc":"grid = GridSearch()","4515bb89":"grid.fit(X_train, y_train)","d7f4e3ee":"y_hat = grid.predict(X_test)\ngrid.plot_sample(target_names, y_hat)","9f7316c4":"grid.report(target_names, y_test, y_hat)","a3e9bceb":"grid.heatmap(target_names, y_test, y_hat)","da4c3aef":"<pre>\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$'               `$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  \n$$$$$$$$$$$$$$$$$$$$$$$$$$$$'                   `$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$$$'`$$$$$$$$$$$$$'`$$$$$$!                       !$$$$$$'`$$$$$$$$$$$$$'`$$$\n$$$$  $$$$$$$$$$$  $$$$$$$                         $$$$$$$  $$$$$$$$$$$  $$$$\n$$$$. `$' \\' \\$`  $$$$$$$!                         !$$$$$$$  '$\/ `\/ `$' .$$$$\n$$$$$. !\\  i  i .$$$$$$$$                           $$$$$$$$. i  i  \/! .$$$$$\n$$$$$$   `--`--.$$$$$$$$$                           $$$$$$$$$.--'--'   $$$$$$\n$$$$$$L        `$$$$$^^$$                           $$^^$$$$$'        J$$$$$$\n$$$$$$$.   .'   \"\"~   $$$    $.                 .$  $$$   ~\"\"   `.   .$$$$$$$\n$$$$$$$$.  ;      .e$$$$$!    $$.             .$$  !$$$$$e,      ;  .$$$$$$$$\n$$$$$$$$$   `.$$$$$$$$$$$$     $$$.         .$$$   $$$$$$$$$$$$.'   $$$$$$$$$\n$$$$$$$$    .$$$$$$$$$$$$$!     $$`$$$$$$$$'$$    !$$$$$$$$$$$$$.    $$$$$$$$\n$JT&yd$     $$$$$$$$$$$$$$$$.    $    $$    $   .$$$$$$$$$$$$$$$$     $by&TL$\n                                 $    $$    $\n                                 $.   $$   .$\n                                 `$        $'\n                                  `$$$$$$$$'\n                                  \n<b>Face recognition using Grid Search<\/b>\nby Alin Cijov\n<\/pre>","340fd246":"# Model","2951cde0":"# Analysis","271cd1fd":"# Dataset"}}