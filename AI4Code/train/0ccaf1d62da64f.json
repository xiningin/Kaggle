{"cell_type":{"95c94839":"code","5eac4fd6":"code","ca5bc35b":"code","6379c38a":"code","e5cb5b0a":"code","a2f52f8b":"code","1a1ac5af":"code","ff00ef4e":"code","eb7c835a":"code","f7eba3ae":"code","4000a5c4":"code","83ca9c24":"code","fe303af4":"code","b151b46f":"code","74c17e1a":"code","43a01080":"code","17a33c97":"code","22512f69":"code","162ceadf":"code","8559dbac":"code","6e350e19":"code","a044a4ad":"code","25bbf832":"code","b3a2e6b1":"code","a1fb1912":"code","9a066120":"code","b2f83c28":"code","da22908d":"code","2b92a85d":"code","15fb1da7":"code","44f28b16":"code","67ca1776":"code","14f0c41b":"code","2c44c1e5":"code","d7848a91":"code","777bfe3f":"code","a5d54159":"code","b4393c5b":"code","cdfb705a":"code","8ec92b7e":"code","c03ec885":"code","3ee5ad3b":"code","9dfcc9d6":"code","caa2e408":"markdown","8ab212c8":"markdown","baf01145":"markdown","fc597dc8":"markdown","9eb53f9d":"markdown","92e7d394":"markdown","9df63f40":"markdown","25f9a19f":"markdown"},"source":{"95c94839":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport seaborn as sns\n\ndataset = pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")\nprint(\"Number of entries = \" + str(len(dataset)))\ndataset.head()","5eac4fd6":"# Anaemia (1 = Anaemic, 0 = Non-Anaemic)\n\nanaemic_and_survived = len(dataset[(dataset['anaemia']==1) & (dataset['DEATH_EVENT']==0)])\nanaemic_and_died = len(dataset[(dataset['anaemia']==1) & (dataset['DEATH_EVENT']==1)])\nnon_anaemic_and_survived = len(dataset[(dataset['anaemia']==0) & (dataset['DEATH_EVENT']==0)])\nnon_anaemic_and_died = len(dataset[(dataset['anaemia']==0) & (dataset['DEATH_EVENT']==1)])\n\nanaemia_stats = [anaemic_and_survived, anaemic_and_died, non_anaemic_and_survived, non_anaemic_and_died]\nanaemia_labels = ['anaemic_and_survived', 'anaemic_and_died', 'non_anaemic_and_survived', 'non_anaemic_and_died']\n\nprint(anaemic_and_survived, anaemic_and_died, non_anaemic_and_survived, non_anaemic_and_died)\n\nfig, (ax1,ax2,ax3) = plt.subplots(1,3,figsize=(20,20))\n\nax1.pie(anaemia_stats[0:2], autopct='%1.1f%%')\nax1.set_title('Anaemic')\nax1.legend(anaemia_labels[0:2], loc='lower center', bbox_to_anchor=(0.5, -0.2))\n\nax2.pie(anaemia_stats[2:], autopct='%1.1f%%')\nax2.set_title('Non-Anaemic')\nax2.legend(anaemia_labels[2:], loc='lower center', bbox_to_anchor=(0.5, -0.2))\n\nax3.pie(anaemia_stats, autopct='%1.1f%%')\nax3.set_title('All')\nax3.legend(anaemia_labels, loc='lower center', bbox_to_anchor=(0.5, -0.2))\n\nplt.show()","ca5bc35b":"# Diabetes (1 = Diabetic, 0 = Non-Diabetic)\n\ndiabetic_and_survived = len(dataset[(dataset['diabetes']==1) & (dataset['DEATH_EVENT']==0)])\ndiabetic_and_died = len(dataset[(dataset['diabetes']==1) & (dataset['DEATH_EVENT']==1)])\nnon_diabetic_and_survived = len(dataset[(dataset['diabetes']==0) & (dataset['DEATH_EVENT']==0)])\nnon_diabetic_and_died = len(dataset[(dataset['diabetes']==0) & (dataset['DEATH_EVENT']==1)])\n\ndiabetes_stats = [diabetic_and_survived, diabetic_and_died, non_diabetic_and_survived, non_diabetic_and_died]\ndiabetes_labels = ['diabetic_and_survived', 'diabetic_and_died', 'non_diabetic_and_survived', 'non_diabetic_and_died']\n\nprint(diabetic_and_survived, diabetic_and_died, non_diabetic_and_survived, non_diabetic_and_died)\n\nfig, (ax1,ax2,ax3) = plt.subplots(1,3,figsize=(20,20))\n\nax1.pie(diabetes_stats[0:2], autopct='%1.1f%%')\nax1.set_title('Diabetic')\nax1.legend(diabetes_labels[0:2], loc='lower center', bbox_to_anchor=(0.5, -0.2))\n\nax2.pie(diabetes_stats[2:], autopct='%1.1f%%')\nax2.set_title('Non-Diabetic')\nax2.legend(diabetes_labels[2:], loc='lower center', bbox_to_anchor=(0.5, -0.2))\n\nax3.pie(diabetes_stats, autopct='%1.1f%%')\nax3.set_title('All')\nax3.legend(diabetes_labels, loc='lower center', bbox_to_anchor=(0.5, -0.2))\n\nplt.show()","6379c38a":"# High Blood Presure (1 = High BP, 0 = Normal BP)\n\nHigh_BP__and_survived = len(dataset[(dataset['high_blood_pressure']==1) & (dataset['DEATH_EVENT']==0)])\nHigh_BP__and_died = len(dataset[(dataset['high_blood_pressure']==1) & (dataset['DEATH_EVENT']==1)])\nNormal_BP__and_survived = len(dataset[(dataset['high_blood_pressure']==0) & (dataset['DEATH_EVENT']==0)])\nNormal_BP__and_died = len(dataset[(dataset['high_blood_pressure']==0) & (dataset['DEATH_EVENT']==1)])\n\nBP_stats = [High_BP__and_survived, High_BP__and_died, Normal_BP__and_survived, Normal_BP__and_died]\nBP_labels = ['High_BP_and_survived', 'High_BP_and_died', 'Normal_BP_and_survived', 'Normal_BP_and_died']\n\nprint(High_BP__and_survived, High_BP__and_died, Normal_BP__and_survived, Normal_BP__and_died)\n\nfig, (ax1,ax2,ax3) = plt.subplots(1,3,figsize=(20,20))\n\nax1.pie(BP_stats[0:2], autopct='%1.1f%%')\nax1.set_title('High BP')\nax1.legend(BP_labels[0:2], loc='lower center', bbox_to_anchor=(0.5, -0.2))\n\nax2.pie(BP_stats[2:], autopct='%1.1f%%')\nax2.set_title('Normal BP')\nax2.legend(BP_labels[2:], loc='lower center', bbox_to_anchor=(0.5, -0.2))\n\nax3.pie(BP_stats, autopct='%1.1f%%')\nax3.set_title('All')\nax3.legend(BP_labels, loc='lower center', bbox_to_anchor=(0.5, -0.2))\n\nplt.show()","e5cb5b0a":"# Gender (male = 1, female = 0)\n\nmale_and_survived = len(dataset[(dataset['sex']==1) & (dataset['DEATH_EVENT']==0)])\nmale_and_died = len(dataset[(dataset['sex']==1) & (dataset['DEATH_EVENT']==1)])\nfemale_and_survived = len(dataset[(dataset['sex']==0) & (dataset['DEATH_EVENT']==0)])\nfemale_and_died = len(dataset[(dataset['sex']==0) & (dataset['DEATH_EVENT']==1)])\n\ngender_stats = [male_and_survived, male_and_died, female_and_survived, female_and_died]\ngender_labels = ['male_and_survived', 'male_and_died', 'female_and_survived', 'female_and_died']\n\nprint(male_and_survived, male_and_died, female_and_survived, female_and_died)\n\nfig, (ax1,ax2,ax3) = plt.subplots(1,3,figsize=(20,20))\n\nax1.pie(gender_stats[0:2], autopct='%1.1f%%')\nax1.set_title('Males')\nax1.legend(gender_labels[0:2], loc='lower center', bbox_to_anchor=(0.5, -0.2))\n\nax2.pie(gender_stats[2:], autopct='%1.1f%%')\nax2.set_title('Females')\nax2.legend(gender_labels[2:], loc='lower center', bbox_to_anchor=(0.5, -0.2))\n\nax3.pie(gender_stats, autopct='%1.1f%%')\nax3.set_title('All')\nax3.legend(gender_labels, loc='lower center', bbox_to_anchor=(0.5, -0.2))\n\nplt.show()","a2f52f8b":"# Smoking (smoker = 1, non-smoker = 0)\n\nsmoker_and_survived = len(dataset[(dataset['smoking']==1) & (dataset['DEATH_EVENT']==0)])\nsmoker_and_died = len(dataset[(dataset['smoking']==1) & (dataset['DEATH_EVENT']==1)])\nnon_smoker_and_survived = len(dataset[(dataset['smoking']==0) & (dataset['DEATH_EVENT']==0)])\nnon_smoker_and_died = len(dataset[(dataset['smoking']==0) & (dataset['DEATH_EVENT']==1)])\n\nsmoking_stats = [smoker_and_survived, smoker_and_died, non_smoker_and_survived, non_smoker_and_died]\nsmoking_labels = ['smoker_and_survived', 'smoker_and_died', 'non_smoker_and_survived', 'non_smoker_and_died']\n\nprint(smoker_and_survived, smoker_and_died, non_smoker_and_survived, non_smoker_and_died)\n\nfig, (ax1,ax2,ax3) = plt.subplots(1,3,figsize=(20,20))\n\nax1.pie(smoking_stats[0:2], autopct='%1.1f%%')\nax1.set_title('Smokers')\nax1.legend(smoking_labels[0:2], loc='lower center', bbox_to_anchor=(0.5, -0.2))\n\nax2.pie(smoking_stats[2:], autopct='%1.1f%%')\nax2.set_title('Non-Smokers')\nax2.legend(smoking_labels[2:], loc='lower center', bbox_to_anchor=(0.5, -0.2))\n\nax3.pie(smoking_stats, autopct='%1.1f%%', )\nax3.set_title('All')\nax3.legend(smoking_labels, loc='lower center', bbox_to_anchor=(0.5, -0.2))\n\nplt.show()","1a1ac5af":"# Age \nage_data = [dataset[\"age\"].values]\nfig0 = ff.create_distplot(age_data, ['age'])\nfig0.update_layout(title_text = 'Age Distribution plot')\nfig0.show()","ff00ef4e":"# Age Spread according to Gender\nfig1 = px.box(dataset, x='sex', y='age', points=\"all\")\nfig1.update_layout(title_text = \"Gender wise Age Spread : Male = 1 Female = 0\")\nfig1.show()","eb7c835a":"# Analysis of Age on Survival Status\nhist_data = [dataset[dataset[\"DEATH_EVENT\"]==0][\"age\"], dataset[dataset[\"DEATH_EVENT\"]==1][\"age\"]]\nfig2 = ff.create_distplot(hist_data, ['Survived', 'Not Survived'], bin_size=0.5)\nfig2.update_layout(title_text = \"Analysis of Age on Survival Status\")\nfig2.show()","f7eba3ae":"# Analysis of Age and Gender on Survival Status\nfig3 = px.violin(dataset, y = \"age\", x = \"sex\", color = \"DEATH_EVENT\", box = True, points = \"all\", hover_data = dataset.columns)\nfig3.update_layout(title_text = \"Analysis of Age and Gender on Survival Status\")\nfig3.show()","4000a5c4":"# Effect of age and smoking on death event\nfig4 = px.violin(dataset, y=\"age\", x=\"smoking\", color=\"DEATH_EVENT\", box=True, points=\"all\", hover_data=dataset.columns)\nfig4.update_layout(title_text=\"Analysis of Age and Smoking on Survival Status\")\nfig4.show()","83ca9c24":"# Effect of diabetes and age on Death Event\nfig5 = px.violin(dataset, y=\"age\", x=\"diabetes\", color=\"DEATH_EVENT\", box=True, points=\"all\", hover_data=dataset.columns)\nfig5.update_layout(title_text=\"Analysis in Age and Diabetes on Survival Status (0 = non-diabetic, 1 = dabetic)\")\nfig5.show()","fe303af4":"# Effect of Age and Blood Pressure on Death Event\nfig6 = px.violin(dataset, y=\"age\", x=\"high_blood_pressure\", color=\"DEATH_EVENT\", box=True, points=\"all\", hover_data=dataset.columns)\nfig6.update_layout(title_text=\"Analysis in Age and Blood Pressure on Survival Status (0 = Normal BP, 1 = High BP)\")\nfig6.show()","b151b46f":"# Effect of Anaemia and Age on Death Event\nfig7 = px.violin(dataset, y=\"age\", x=\"anaemia\", color=\"DEATH_EVENT\", box=True, points=\"all\", hover_data=dataset.columns)\nfig7.update_layout(title_text=\"Analysis of Age and Anaemia on Survival Status (0 = non-anaemic, 1 = anaemic)\")\nfig7.show()","74c17e1a":"# Effect of creatinine_phosphokinase on Death Event\nfig8 = px.histogram(dataset, x=\"creatinine_phosphokinase\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=dataset.columns)\nfig8.update_layout(title_text = 'Analysis of creatine phosphokinase on survival status')\nfig8.show()","43a01080":"# Effect of platelets on Death Event\nfig9 = px.histogram(dataset, x=\"platelets\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=dataset.columns)\nfig9.update_layout(title_text = 'Analysis of Platelets on survival status')\nfig9.show()","17a33c97":"# Effect of ejection fraction on Death Event\nfig10 = px.histogram(dataset, x=\"ejection_fraction\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=dataset.columns)\nfig10.update_layout(title_text = 'Analysis of Ejection Fraction on survival status')\nfig10.show()","22512f69":"# Effect of Serum Creatinine on Death Event\nfig11 = px.histogram(dataset, x=\"serum_creatinine\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=dataset.columns)\nfig11.update_layout(title_text = 'Analysis of Serum Creatinine on survival status')\nfig11.show()","162ceadf":"# Effect of Serum Sodium on Death Event\nfig12 = px.histogram(dataset, x=\"serum_sodium\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=dataset.columns)\nfig12.update_layout(title_text = 'Analysis of Serum Sodium on survival status')\nfig12.show()","8559dbac":"columns = list(dataset.columns)\nprint(*columns, sep='\\n')\n# print('\\n'.join(columns)) Gives the same result...","6e350e19":"x = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","a044a4ad":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, train_size = 0.8, shuffle = True, random_state = 2)","25bbf832":"\"\"\"\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test) \n\"\"\"","b3a2e6b1":"from sklearn.metrics import confusion_matrix, accuracy_score\n\nalgo_accuracy_record = []  # each element is list of format - ['algo_name', algo_max_accuracy]","a1fb1912":"# Random Forest Classifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf_acc = []\nrf_cm = []\n\nfor num_trees in range(1, 200):\n    rf_classifier = RandomForestClassifier(n_estimators = num_trees, criterion = 'entropy', random_state = 0)\n    rf_classifier.fit(x_train, y_train)\n    rf_pred = rf_classifier.predict(x_test)\n\n    rf_acc.append(accuracy_score(y_test,rf_pred))\n    rf_cm.append(confusion_matrix(y_test,rf_pred))\n    \nmax_acc = max(rf_acc)\nmax_acc_cm = rf_cm[rf_acc.index(max_acc)]\nprint('maximum accuracy = ' + str(max_acc))\nprint('confusion matrix = ')\nprint(max_acc_cm)\nalgo_accuracy_record.append(['RandomForestClassifier', max_acc])\n# 0.933 without sc","9a066120":"# Decision Tree Classifier\nfrom sklearn.tree import DecisionTreeClassifier\n\ndt_acc = []\ndt_cm = []\n\ndt_classifier = DecisionTreeClassifier(criterion = 'entropy')\nfor i in range(20):\n    dt_classifier.fit(x_train[:,[3,4,7,11]], y_train)\n    dt_pred = dt_classifier.predict(x_test[:,[3,4,7,11]])\n\n    dt_acc.append(accuracy_score(y_test, dt_pred))\n    dt_cm.append(confusion_matrix(y_test, dt_pred))\n    \nmax_acc = max(dt_acc)\nmax_acc_cm = dt_cm[dt_acc.index(max_acc)]\n\nprint('maximum accuracy = ' + str(max_acc))\nprint('confusion matrix = ')\nprint(max_acc_cm)\nalgo_accuracy_record.append(['DecisionTreeClassifier', max_acc])\n# 0.855 without sc","b2f83c28":"# Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\n\nlr_classifier = LogisticRegression(random_state = 2)\nlr_classifier.fit(x_train[:,[4,7,8,11]], y_train)\nlr_pred = lr_classifier.predict(x_test[:,[4,7,8,11]])\n\nlr_acc = accuracy_score(y_test, lr_pred)\nlr_cm = confusion_matrix(y_test, lr_pred)\n\nprint('accuracy = ' + str(lr_acc))\nprint('confusion matrix = ')\nprint(lr_cm)\nalgo_accuracy_record.append(['LogisticRegresion', lr_acc])\n# 0.888 without sc","da22908d":"# Support Vector Classifier\nfrom sklearn.svm import SVC\nsvc_classifier = SVC(kernel = 'rbf', random_state = 0)\nsvc_classifier.fit(x_train[:,[1,4,7,11]], y_train)\nsvc_pred = svc_classifier.predict(x_test[:,[1,4,7,11]])\nsvc_acc = accuracy_score(y_test, svc_pred)\nsvc_cm = confusion_matrix(y_test, svc_pred)\nprint(svc_acc)\nprint(svc_cm)\nalgo_accuracy_record.append(['SupportVectorClassifier', svc_acc])\n# 0.9 without sc","2b92a85d":"# K-Nearest Neighbours Classifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn_acc = []\nknn_cm = []\n\n# using StandardScalar for K-NN generates better results\nfrom sklearn.preprocessing import StandardScaler\nk_x_train = x_train\nk_y_train = y_train\nk_x_test = x_test\nk_y_test = y_test\nk_sc = StandardScaler()\nk_x_train = k_sc.fit_transform(k_x_train)\nk_x_test = k_sc.transform(k_x_test)\n\nfor num_neighbours in range(1, 20):\n    knn_classifier = KNeighborsClassifier(n_neighbors=num_neighbours, metric='minkowski', p=2)\n    knn_classifier.fit(k_x_train[:,[4,7,11]], k_y_train)\n\n    knn_pred = knn_classifier.predict(k_x_test[:,[4,7,11]])\n\n    knn_acc.append(accuracy_score(k_y_test, knn_pred))\n    knn_cm.append(confusion_matrix(k_y_test, knn_pred))\n\nmax_acc = max(knn_acc)\nmax_acc_cm = knn_cm[knn_acc.index(max_acc)]\n\nprint('maximum accuracy = ' + str(max_acc))\nprint('confusion matrix = ')\nprint(max_acc_cm)\nalgo_accuracy_record.append(['K-NNClassifier', max_acc])\n# 0.9333 with sc","15fb1da7":"# Naive Bayes Classifier\nfrom sklearn.naive_bayes import GaussianNB\n\nnb_classifier = GaussianNB()\nnb_classifier.fit(x_train[:,[4,6,7,8,11]], y_train)\nnb_pred = nb_classifier.predict(x_test[:,[4,6,7,8,11]])\n\nnb_acc = accuracy_score(y_test, nb_pred)\nnb_cm = confusion_matrix(y_test, nb_pred)\n\nprint('maximum accuracy = ' + str(nb_acc))\nprint('confusion matrix = ')\nprint(nb_cm)\nalgo_accuracy_record.append(['NaiveBayesClassifier', nb_acc])\n# 0.866 without sc","44f28b16":"# Gradient Boosting Classifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\ngb_classifier = GradientBoostingClassifier(max_depth=2, random_state=1)\ngb_classifier.fit(x_train[:, [4,7,11]], y_train)\ngb_pred = gb_classifier.predict(x_test[:, [4,7,11]])\n\ngb_acc = accuracy_score(y_test, gb_pred)\ngb_cm = confusion_matrix(y_test, gb_pred)\n\nprint('maximum accuracy = ' + str(gb_acc))\nprint('confusion matrix = ')\nprint(gb_cm)\nalgo_accuracy_record.append(['GradientBoostingClassifier', gb_acc])\n# 0.911 without sc","67ca1776":"# XGBRF Classifier\nfrom xgboost import XGBRFClassifier\n\nxgb_classifier = XGBRFClassifier(max_depth=3, random_state=1)\nxgb_classifier.fit(x_train[:, [3,4,7,11]], y_train)\nxgb_pred = xgb_classifier.predict(x_test[:, [3,4,7,11]])\n\nxgb_acc = accuracy_score(y_test, xgb_pred)\nxgb_cm = confusion_matrix(y_test, xgb_pred)\n\nprint('maximum accuracy = ' + str(xgb_acc))\nprint('confusion matrix = ')\nprint(xgb_cm)\nalgo_accuracy_record.append(['XGBRFClassifier', gb_acc])\n# 0.911 without sc","14f0c41b":"# LGBM Classifier\nfrom lightgbm import LGBMClassifier\n\nlg_classifier = LGBMClassifier(max_depth=2, random_state=4)\nlg_classifier.fit(x_train[:,[3,4,7,8,11]], y_train)\nlg_pred = lg_classifier.predict(x_test[:,[3,4,7,8,11]])\n\nlg_acc = accuracy_score(y_test, lg_pred)\nlg_cm = confusion_matrix(y_test, lg_pred)\n\nprint('maximum accuracy = ' + str(lg_acc))\nprint('confusion matrix = ')\nprint(lg_cm)\nalgo_accuracy_record.append(['LGBMClassifier', lg_acc])\n# 0.911 without sc","2c44c1e5":"# CatBoost Classifier \n# pip install catboost\nfrom catboost import CatBoostClassifier\n\ncat_classifier = CatBoostClassifier()\ncat_classifier .fit(x_train[:,[4,7,11]], y_train)\ncat_pred = cat_classifier.predict(x_test[:,[4,7,11]])\n\ncat_acc = accuracy_score(y_test, cat_pred)\ncat_cm = confusion_matrix(y_test, cat_pred)\n\nprint('maximum accuracy = ' + str(cat_acc))\nprint('confusion matrix = ')\nprint(cat_cm)\nalgo_accuracy_record.append(['CatBoostClassifier', cat_acc])\n# 0.911 without sc","d7848a91":"# Extra Trees Classifier\nfrom sklearn.ensemble import ExtraTreesClassifier\n\net_classifier = ExtraTreesClassifier(n_estimators = 1000, max_depth=6, ccp_alpha=0.01)\net_classifier.fit(x_train[:,[3,4,7,8,11]], y_train)\n\net_pred = et_classifier.predict(x_test[:,[3,4,7,8,11]])\n\net_acc = accuracy_score(y_test, et_pred)\net_cm = confusion_matrix(y_test, et_pred)\n\nprint('maximum accuracy = ' + str(et_acc))\nprint('confusion matrix = ')\nprint(et_cm)\nalgo_accuracy_record.append(['ExtraTreesClassifier', et_acc])\n# 0.911 without sc","777bfe3f":"# AdaBoost Classifier\nfrom sklearn.ensemble import AdaBoostClassifier\n\nad_clf = AdaBoostClassifier(n_estimators = 1000, learning_rate=0.001)\nad_clf.fit(x_train[:,[4,7,11]], y_train)\nad_pred = ad_clf.predict(x_test[:,[4,7,11]])\n\nad_acc = accuracy_score(y_test, ad_pred)\nad_cm = confusion_matrix(y_test, ad_pred)\n\nprint('maximum accuracy = ' + str(ad_acc))\nprint('confusion matrix = ')\nprint(ad_cm)\nalgo_accuracy_record.append(['AdaBoostClassifier', ad_acc])\n# 0.9 without sc","a5d54159":"algo_accuracy_record","b4393c5b":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nimport keras\n\ninit = keras.initializers.RandomNormal(seed=1)\nact = keras.layers.LeakyReLU(alpha=0.3)\n\nx = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, train_size = 0.8, shuffle = True, random_state = 2)\n\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)\n\nmodel = Sequential()\n\nmodel.add(Dense(units = 12, kernel_initializer = init, activation = act, input_dim = 12))\n\nmodel.add(Dropout(1\/3))\n\nmodel.add(Dense(units = 12, kernel_initializer = init, activation = act))\n\nmodel.add(Dropout(1\/3))\n\nmodel.add(Dense(units = 8, kernel_initializer = init, activation = act))\n\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(units = 8, kernel_initializer = init, activation = 'tanh'))\n\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(units = 4, kernel_initializer = init, activation = 'tanh'))\n\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(units = 4, kernel_initializer = init, activation = 'tanh'))\n\nmodel.add(Dense(units = 1, kernel_initializer = init, activation = 'sigmoid'))\n\nmodel.compile(optimizer = 'adamax', loss = 'binary_crossentropy', metrics = ['accuracy'])","cdfb705a":"model.fit(x_train, y_train, batch_size = len(x_train), epochs = 1000)\n\nnn_pred = model.predict(x_test)\nfor i in range(len(nn_pred)):\n    if(nn_pred[i] > 0.5):\n        nn_pred[i] = 1\n    else:\n        nn_pred[i] = 0\nnn_acc = accuracy_score(y_test, nn_pred)\nprint('neural network accuracy = ' + str(nn_acc))\nprint('neural network confuson matrix:')\nprint(confusion_matrix(y_test, nn_pred))","8ec92b7e":"algo_accuracy_record.append(['Neural Network', nn_acc])","c03ec885":"algo_accuracy_record","3ee5ad3b":"algo_acc = np.transpose(algo_accuracy_record)\nx_plot = algo_acc[0]\ny_plot = np.round(np.array(algo_acc[1], dtype=np.float32)*100, 2)","9dfcc9d6":"# We plot bar graphs of accuracies of all models and highlight the models with maximum accuracy in orange color.\nfig = plt.figure(figsize=(26,11))\nbarlist = plt.bar(x_plot,y_plot)\nfor i in range(len(barlist)):\n    if (y_plot[i] == max(y_plot)):\n        barlist[i].set_color('orange')\n    else:\n        barlist[i].set_color('g')\nplt.xlabel('Classifier Name', fontsize = 18)\nplt.ylabel('% Accuracy', fontsize = 22)\nplt.xticks(x_plot, fontsize = 16)\nplt.yticks([0,10,20,30,40,50,60,70,80,90,100], fontsize = 16)\nplt.xticks(rotation = 60)\nplt.grid(True)\nplt.style.use(plt.style.available[8])\nplt.show()","caa2e408":"**Dataset Facts**\n\n*   Categorical data columns index = 1, 3, 5, 9, 10 \n*   No missing values or NaNs\n*   x has 10 columns\n*   y has 1 coloumn of two classes","8ab212c8":"# Machine Learning Algorithms","baf01145":"# Data Modelling","fc597dc8":"Highest accuracy was achieved by Random Forest Classifier and K-NN Classifier","9eb53f9d":"## Summary","92e7d394":"# Visualizing effects of categorical features on Death Event","9df63f40":"# Visualizing effects of non-categorical features on death event","25f9a19f":"# Deep Learning\n"}}