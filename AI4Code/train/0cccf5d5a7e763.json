{"cell_type":{"8f5657dd":"code","2fa2d19b":"code","5873a351":"code","fc7f11d6":"code","0ea5d078":"code","14303e3e":"code","3d549130":"code","1af3b7a5":"code","880ea06f":"code","3a88dc31":"code","b192a425":"code","5cd548a5":"code","fd359dc8":"code","e56c3068":"code","efa7cb47":"code","97ec38f4":"code","b163deb0":"code","cc522b60":"code","e4b2986d":"code","ee6ad09c":"code","422d5efd":"code","c778c9f2":"code","a0903157":"code","7a1f51cd":"code","775ca530":"code","86201326":"code","406e3e61":"code","4eb4bfe9":"code","191be669":"code","0bd7ea33":"code","218855a5":"code","3f50bdae":"code","955f9748":"code","219910b3":"code","6a5279df":"code","f7405720":"code","a7ffdc52":"code","fcae36a9":"code","1ce9a721":"code","c469ea54":"code","f1ce1465":"code","d49bf162":"code","98298276":"code","80a26ced":"code","d1b1d249":"code","b892f328":"code","418025b6":"code","2339e617":"code","643ece7b":"code","070f9cb5":"code","e786ce26":"code","e156a00c":"code","da6d333e":"code","44640330":"code","e4424fa1":"code","fa55b81d":"code","356dcbf6":"code","f9bfa1ce":"code","6aebef93":"code","358978cc":"code","9587991c":"markdown","53667475":"markdown","d1741cb5":"markdown","a3efc478":"markdown","e9698889":"markdown","141a32b1":"markdown","73de07e8":"markdown","d42c9a74":"markdown","cb269e0a":"markdown","d762992f":"markdown","0ae0b7c6":"markdown","87257e51":"markdown","efc9e8a0":"markdown","5b99fb34":"markdown","debe6354":"markdown","c873a292":"markdown","78d879fd":"markdown","d56e99ad":"markdown","94048fb9":"markdown","22b3e402":"markdown"},"source":{"8f5657dd":"import os\nimport numpy as np\nimport pandas as pd","2fa2d19b":"data_path = os.path.join('datasets', 'CarPrice_Assignment.csv')\ncars = pd.read_csv(data_path)","5873a351":"cars.head()","fc7f11d6":"cars.info()","0ea5d078":"cars.describe()","14303e3e":"import matplotlib.pyplot as plt\nimport seaborn as sns","3d549130":"cars = cars.drop('car_ID', axis=1)","1af3b7a5":"cars['CarName'] = cars['CarName'].str.split(' ', expand=True)","880ea06f":"cars['CarName'].unique()","3a88dc31":"cars['CarName'] = cars['CarName'].replace({'maxda': 'mazda',\n                                           'Nissan': 'nissan',\n                                           'porcshce': 'porsche',\n                                           'vokswagen': 'volkswagen',\n                                           'vw': 'volkswagen',\n                                           'toyouta': 'toyota'\n                                          })","b192a425":"cars['doornumber'].unique()","5cd548a5":"cars['doornumber'] = cars['doornumber'].replace({'two': 2, 'four': 4})","fd359dc8":"cars['cylindernumber'].unique()","e56c3068":"cars['cylindernumber'] = cars['cylindernumber'].replace({'four': 4,\n                                                         'six': 6,\n                                                         'five': 5,\n                                                         'three': 3,\n                                                         'twelve': 12,\n                                                         'two': 2,\n                                                         'eight': 8\n                                                        })","efa7cb47":"cat_col = cars.select_dtypes(include=['object']).columns\nnum_col = cars.select_dtypes(exclude=['object']).columns","97ec38f4":"plt.rcParams['figure.figsize'] = [15, 8]\nax = cars['CarName'].value_counts().plot(kind='bar', stacked=True, colormap='Set1')\nax.title.set_text('Brands')\nplt.xlabel('Brand', fontweight='bold')\nplt.ylabel('Count of Cars', fontweight='bold')","b163deb0":"plt.figure(figsize=(15,8))\nplt.title('Price Distribution')\nsns.distplot(cars['price'])","cc522b60":"for i in range(0,4):\n    batch=5*i\n    sns.pairplot(\n        data=cars,\n        y_vars=['price'],\n        x_vars=num_col[0+batch:5+batch],\n        kind=\"reg\"\n    )","e4b2986d":"corr = cars[num_col].corr()\ncorr['price'].sort_values(ascending=False)","ee6ad09c":"num_col_rel = ['enginesize', 'curbweight', 'horsepower', 'carwidth', 'cylindernumber', 'carlength', 'wheelbase', 'boreratio', 'price']\nnum_col_rel","422d5efd":"plt.figure(figsize=(20,15))\n\nfor i in range(1, len(cat_col)):\n    plt.subplot(3,3,i)\n    sns.boxplot(data=cars, x=cat_col[i], y='price')\n    \nplt.show()","c778c9f2":"num_col_rel.extend(cat_col)\ncolumns = num_col_rel\ncolumns","a0903157":"cars = cars[columns]","7a1f51cd":"from sklearn.model_selection import train_test_split","775ca530":"train_set, test_set = train_test_split(cars, test_size=0.2, random_state=42)","86201326":"train_set.head()","406e3e61":"cars_data = train_set.drop('price', axis=1)\ncars_label = train_set['price']","4eb4bfe9":"cars_data.head()","191be669":"cars_label.head()","0bd7ea33":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder","218855a5":"cat_col = cars_data.select_dtypes(include=['object']).columns\nnum_col = cars_data.select_dtypes(exclude=['object']).columns","3f50bdae":"num_pipeline = Pipeline([\n    ('std_scaler', StandardScaler())\n])","955f9748":"full_pipeline = ColumnTransformer([\n    ('num', num_pipeline, num_col),\n    ('cat', OneHotEncoder(drop='first'), cat_col)\n])","219910b3":"cars_prepared = full_pipeline.fit_transform(cars_data)","6a5279df":"from sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import r2_score, mean_squared_error","f7405720":"test_data = test_set.drop('price', axis=1)\ntest_prepared = full_pipeline.transform(test_data)\ntest_labels = test_set['price']","a7ffdc52":"def display_scores(model):\n    predictions = model.predict(test_prepared)\n    mse = mean_squared_error(test_labels,predictions)\n    rmse = np.sqrt(mse)\n    r2 = r2_score(test_labels, predictions)\n    print('MSE:', mse)\n    print('RMSE:', rmse)\n    print('R2:', r2)","fcae36a9":"from sklearn.linear_model import LinearRegression","1ce9a721":"lin_reg = LinearRegression()\nlin_reg.fit(cars_prepared, cars_label)","c469ea54":"display_scores(lin_reg)","f1ce1465":"from sklearn.ensemble import RandomForestRegressor","d49bf162":"forest_reg = RandomForestRegressor()\nforest_reg.fit(cars_prepared, cars_label)","98298276":"display_scores(forest_reg)","80a26ced":"from xgboost import XGBRegressor","d1b1d249":"xg_reg = XGBRegressor()\nxg_reg.fit(cars_prepared, cars_label)","b892f328":"display_scores(xg_reg)","418025b6":"from sklearn.model_selection import GridSearchCV","2339e617":"param_grid = [\n    {'n_estimators': np.arange(10, 200, 10), 'max_features': np.arange(2, 200, 2)},\n    {'bootstrap': [False], 'n_estimators': np.arange(10, 200, 10), 'max_features': np.arange(2, 200, 2)}\n]\n\nforest_reg_grid = RandomForestRegressor()\ngrid_search = GridSearchCV(forest_reg_grid, param_grid, cv=10, scoring='neg_mean_squared_error', return_train_score=True, n_jobs=-1)","643ece7b":"grid_search.fit(cars_prepared, cars_label)","070f9cb5":"grid_search.best_estimator_","e786ce26":"forest_best_estimator = grid_search.best_estimator_","e156a00c":"display_scores(forest_best_estimator)","da6d333e":"param_grid = [\n    {'n_estimators': np.arange(10, 200, 10), 'max_depth': np.arange(5, 10, 1)},\n]\n\nxgb_reg_grid = XGBRegressor()\ngrid_search = GridSearchCV(xgb_reg_grid, param_grid, cv=10, scoring='neg_mean_squared_error', return_train_score=True, n_jobs=-1)","44640330":"grid_search.fit(cars_prepared, cars_label)","e4424fa1":"grid_search.best_estimator_","fa55b81d":"xgb_best_estimator = grid_search.best_estimator_","356dcbf6":"display_scores(xgb_best_estimator)","f9bfa1ce":"display_scores(forest_reg)","6aebef93":"import joblib","358978cc":"joblib.dump(forest_reg, 'car_price_estimator.pkl')","9587991c":"All the categorical variables impact on the price","53667475":"The best model obtained is the RandomForestRegressor with its default values.","d1741cb5":"## Prepare Data","a3efc478":"## Data Cleaning","e9698889":"### Random Forest Regressor","141a32b1":"### Visualising Numeric Variables","73de07e8":"## Data Visualization","d42c9a74":"## Select and Train a Model","cb269e0a":"### Pipelines","d762992f":"### Grid Search XGBRegressor","0ae0b7c6":"## Create Sets","87257e51":"## Save Best Model","efc9e8a0":"### Visualising Categorical Variables","5b99fb34":"It seems that we have no null value","debe6354":"### Linear Regression","c873a292":"### Grid Search Random Forest Regressor","78d879fd":"## Import Data","d56e99ad":"- Relevant positive correlation: \n    - enginesize \n    - curbweight \n    - horsepower \n    - carwidth \n    - cylindernumber \n    - carlength\n    - wheelbase\n    - boreratio\n    \n- Relevant negative correlation: \n    - citympg\n    - highwaympg","94048fb9":"### XGBRegressor","22b3e402":"## Conclusion"}}