{"cell_type":{"38c084d3":"code","147db832":"code","809aa67e":"code","d7f70ccb":"code","26d40b27":"code","f8ee0e75":"code","4e8b2508":"code","19bfebb8":"code","bdaf158a":"code","aa1a9d53":"code","8ae63db3":"code","bbabcff6":"code","8b5be27f":"code","dd563585":"code","5103b360":"code","bdf83193":"code","01348c7b":"code","d6d95e67":"code","79a14a80":"code","9648ba26":"code","098080a4":"code","a3a4d0b0":"code","e83839c6":"code","d87f8e56":"code","a3206496":"code","9dce76d5":"code","161b08b6":"code","c8b4c150":"code","77410b2c":"code","b0c77efe":"code","022427ae":"code","293560fd":"code","6a38e809":"code","0c45d1df":"code","044fb686":"code","71282e47":"code","aa9146f7":"code","b5879f3f":"code","7de18810":"code","449cffa2":"code","9b73700a":"code","8dbbb4c8":"code","b42948da":"markdown","db1f4b93":"markdown","dd40246f":"markdown","3390496e":"markdown","2b1ab019":"markdown","3aae3c3a":"markdown","6c92f2c2":"markdown","881c8215":"markdown","9a667cf4":"markdown","e4b2ef6a":"markdown","50048869":"markdown","1ff016b5":"markdown"},"source":{"38c084d3":"!pip install pycaret","147db832":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport pycaret\nimport pickle\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom xgboost import XGBRegressor\nfrom xgboost import Booster\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNetCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score, cross_val_predict, cross_validate, GridSearchCV, RandomizedSearchCV","809aa67e":"df = pd.read_csv('\/kaggle\/input\/df-edited\/dfnew.csv')\ndf.drop(['Unnamed: 0'],axis=1,inplace=True)","d7f70ccb":"fig, ax = plt.subplots(2,3,figsize=(18,10))\n\nsns.scatterplot(x='temp',y='cum_power',data=df,ax=ax[0,0],color='g')\nsns.scatterplot(x='weather',y='cum_power',data=df,ax=ax[0,1],color='g')\nsns.scatterplot(x='wind',y='cum_power',data=df,ax=ax[0,2],color='g')\nsns.scatterplot(x='humidity',y='cum_power',data=df,ax=ax[1,0],color='g')\nsns.scatterplot(x='barometer',y='cum_power',data=df,ax=ax[1,1],color='g')\nsns.scatterplot(x='visibility',y='cum_power',data=df,ax=ax[1,2],color='g')\n\nplt.show()","26d40b27":"a = sns.jointplot(x='temp',y='cum_power',data=df,kind='kde',color='g')\nb = sns.jointplot(x='weather',y='cum_power',data=df,kind='kde',color='g')\nc = sns.jointplot(x='wind',y='cum_power',data=df,kind='kde',color='g')\nd = sns.jointplot(x='humidity',y='cum_power',data=df,kind='kde',color='g')\ne = sns.jointplot(x='barometer',y='cum_power',data=df,kind='kde',color='g')\nf = sns.jointplot(x='visibility',y='cum_power',data=df,kind='kde',color='g')\n\nplots = [a,b,c,d,e,f]\n\nfor plot in plots:\n  plt.show()","f8ee0e75":"plt.figure(figsize=(18,10))\nsns.heatmap(df.corr(),\n            vmin=-1,\n            cmap='coolwarm',\n            annot=True)\nplt.show()","4e8b2508":"# Creating figure \nfig = plt.figure(figsize = (16, 9)) \nax = plt.axes(projection =\"3d\")\n\n# Add x, y gridlines  \nax.grid(b = True, color ='grey',  \n        linestyle ='-.', linewidth = 0.3,  \n        alpha = 0.2)  \n  \n# Creating color map \nmy_cmap = plt.get_cmap('hsv') \n  \n# Creating plot \nsctt = ax.scatter3D(df['temp'], df['humidity'], df['cum_power'], \n                    alpha = 0.8, \n                    c = df['cum_power']) \n  \nplt.title('3D plot of Weather vs Visinilty vs Cum_Power with color legend of cum_power') \nax.set_xlabel('temp', fontweight ='bold')  \nax.set_ylabel('humidity', fontweight ='bold')  \nax.set_zlabel('cum_power', fontweight ='bold') \nfig.colorbar(sctt, ax = ax, shrink = 0.5, aspect = 5) \n  \n# show plot \nplt.show() ","19bfebb8":"# Creating figure \nfig = plt.figure(figsize = (16, 9)) \nax = plt.axes(projection =\"3d\")\n\n# Add x, y gridlines  \nax.grid(b = True, color ='grey',  \n        linestyle ='-.', linewidth = 0.3,  \n        alpha = 0.2)  \n  \n# Creating color map \nmy_cmap = plt.get_cmap('hsv') \n  \n# Creating plot \nsctt = ax.scatter3D(df['temp'], df['month'], df['humidity'], \n                    alpha = 0.8, \n                    c = df['cum_power']) \n  \nplt.title('3D plot of Weather vs Month vs Visibility with colour legend of Cum_Power') \nax.set_xlabel('temp', fontweight ='bold')  \nax.set_ylabel('month', fontweight ='bold')  \nax.set_zlabel('humidity', fontweight ='bold') \nfig.colorbar(sctt, ax = ax, shrink = 0.5, aspect = 5) \n  \n# show plot \nplt.show() ","bdaf158a":"# Creating figure \nfig = plt.figure(figsize = (16, 9)) \nax = plt.axes(projection =\"3d\")\n\n# Add x, y gridlines  \nax.grid(b = True, color ='grey',  \n        linestyle ='-.', linewidth = 0.3,  \n        alpha = 0.2)  \n  \n# Creating color map \nmy_cmap = plt.get_cmap('hsv') \n  \n# Creating plot \nsctt = ax.scatter3D(df['weather'], df['visibility'], df['cum_power'], \n                    alpha = 0.8, \n                    c = df['cum_power']) \n  \nplt.title('3D plot of Weather vs Visinilty vs Cum_Power with color legend of cum_power') \nax.set_xlabel('humidity', fontweight ='bold')  \nax.set_ylabel('visibility', fontweight ='bold')  \nax.set_zlabel('cum_power', fontweight ='bold') \nfig.colorbar(sctt, ax = ax, shrink = 0.5, aspect = 5) \n  \n# show plot \nplt.show() ","aa1a9d53":"# Creating figure \nfig = plt.figure(figsize = (16, 9)) \nax = plt.axes(projection =\"3d\")\n\n# Add x, y gridlines  \nax.grid(b = True, color ='grey',  \n        linestyle ='-.', linewidth = 0.3,  \n        alpha = 0.2)  \n  \n# Creating color map \nmy_cmap = plt.get_cmap('hsv') \n  \n# Creating plot \nsctt = ax.scatter3D(df['humidity'], df['visibility'], df['cum_power'], \n                    alpha = 0.8, \n                    c = df['cum_power']) \n  \nplt.title('3D plot of Humidity vs Visibility with colour legend of Cum_Power') \nax.set_xlabel('weather', fontweight ='bold')  \nax.set_ylabel('month', fontweight ='bold')  \nax.set_zlabel('visibility', fontweight ='bold') \nfig.colorbar(sctt, ax = ax, shrink = 0.5, aspect = 5) \n  \n# show plot \nplt.show() ","8ae63db3":"y = df[['cum_power']]\nxt = df[['year','month','day','temp','weather','wind','humidity','barometer','visibility']] \n\nscaler = StandardScaler()\nx = scaler.fit_transform(xt)\nxtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.30, random_state=42)","bbabcff6":"def rmse_test(model, X=xtrain):\n    rmse = np.sqrt(-cross_val_score(model, xtrain, ytrain, scoring=\"neg_mean_squared_error\", cv=5))\n    return (rmse)","8b5be27f":"lasso = LassoCV(random_state=42, cv=5)","dd563585":"print(\"RMSE score for Lasso:\")\nprint(rmse_test(lasso).mean())","5103b360":"lasso_model = lasso.fit(xtrain, ytrain)","bdf83193":"ypred = lasso_model.predict(xtest)\nnp.sqrt(mean_squared_error(ytest, ypred))","01348c7b":"elastic_net = ElasticNetCV(random_state=42, cv=5)","d6d95e67":"print(\"RMSE score for Elastic Net:\")\nprint(rmse_test(elastic_net).mean())","79a14a80":"elastic_model = elastic_net.fit(xtrain, ytrain)","9648ba26":"ypred = elastic_model.predict(xtest)\nnp.sqrt(mean_squared_error(ytest, ypred))","098080a4":"rf = RandomForestRegressor(random_state=42)","a3a4d0b0":"print(\"RMSE score for Random Forest:\")\nprint(rmse_test(rf).mean())","e83839c6":"rf_model = rf.fit(xtrain,ytrain)","d87f8e56":"ypred = rf_model.predict(xtest)\nnp.sqrt(mean_squared_error(ytest, ypred))","a3206496":"xgboost = XGBRegressor(random_state=42)","9dce76d5":"print(\"RMSE score for XGBoost:\")\nprint(rmse_test(xgboost).mean())","161b08b6":"xgb_model = xgboost.fit(xtrain, ytrain)","c8b4c150":"ypred = xgb_model.predict(xtest)\nnp.sqrt(mean_squared_error(ytest, ypred))","77410b2c":"xgboost = XGBRegressor(learning_rate=0.1,n_estimators=200,random_state=42)","b0c77efe":"print(\"RMSE score for XGBoost:\")\nprint(rmse_test(xgboost).mean())","022427ae":"xgb_model = xgboost.fit(xtrain, ytrain)","293560fd":"ypred = xgb_model.predict(xtest)\nnp.sqrt(mean_squared_error(ytest, ypred))","6a38e809":"xgb_model.feature_importances_","0c45d1df":"features = np.reshape(xgb_model.feature_importances_,(1,9))\nfeaturedf = pd.DataFrame(features,columns=xt.columns)","044fb686":"# FEATURE COEEFICIENTS\nfeaturedf.head()","71282e47":"featuredf.plot(kind='bar',title='Feature Coefficients',figsize=(15,6))\nplt.show()","aa9146f7":"from pycaret.regression import *","b5879f3f":"setup = setup(df, target = 'cum_power', session_id = 123, normalize = True,\n              numeric_features = ['year','month','day','temp','weather','wind','humidity','barometer','visibility'],\n              polynomial_features = True, trigonometry_features = True, feature_interaction=True,\n              bin_numeric_features = ['weather'])","7de18810":"setup[0].columns","449cffa2":"regressor = create_model('gbr')","9b73700a":"plot_model(regressor)","8dbbb4c8":"top3 = compare_models(n_select = 3)","b42948da":"# **MODEL DEVELOPMENT WITH PYCARET**","db1f4b93":"# **BACKGROUND**","dd40246f":"## **LASSO CV**","3390496e":"# **MODEL DEVELOPMENT AND TRAINING**","2b1ab019":"## **RANDOM FOREST**","3aae3c3a":"## **ELASTIC NET**","6c92f2c2":"# **EXPLORATORY DATA ANALYSIS**","881c8215":"## **XGBOOST**","9a667cf4":"## **HPERPARAMETER TUNING ON BEST PERFORMING MODEL**","e4b2ef6a":"Please see the full Feature Engineering in the notebook on my [github](https:\/\/github.com\/thabied\/Solar-Energy-Antwerp)\n\nI've uploaded the edited dataframe from this notebook into Kaggle as my initial work was done on Colab.\n\nSummary of edits:\n* combined weather and solar datasets\n* shifted every entry in the solar dataset a day back since readings were taken the morning after\n* applied encoding on categorical features where necessary","50048869":"# **LOAD EDITED DATAFRAME**","1ff016b5":"# **MODEL EVALUATION**"}}