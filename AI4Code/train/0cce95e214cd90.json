{"cell_type":{"56bbb8ba":"code","7d086937":"code","0a7ab9cd":"code","b33d3094":"code","c3504b83":"code","abbb535b":"code","e29c7218":"code","c585078a":"code","f2492cfa":"code","e1670fa3":"code","74fe05a3":"code","07578904":"code","6ae11b4c":"code","ff72da7a":"code","1be6f705":"code","47bd9e3c":"code","8070a114":"markdown","33523c41":"markdown","7d3fb0ea":"markdown","303a1e96":"markdown"},"source":{"56bbb8ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7d086937":"# Read the data\nData = pd.read_csv(\"..\/input\/datasetknn\/DataSetKNN.csv\")\nData.head()","0a7ab9cd":"X = Data.iloc[:,0:-1]\ntarget = Data.iloc[:,-1]    # separete attributes and target in other place","b33d3094":"Data.isna().sum()","c3504b83":"X.describe()","abbb535b":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","e29c7218":"sns.boxplot(Data[\"TARGET CLASS\"])   # check if data is  bias or not","c585078a":"col_names = X.columns","f2492cfa":"plot = sns.pairplot(X)\nplot.map_lower(sns.kdeplot)\n","e1670fa3":"sns.heatmap(X.corr())     # check the correlation of attributes with each other","74fe05a3":"# Scaling the data into standard form\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X)\nscaled_feature = scaler.transform(X)\nScaled_Data = pd.DataFrame(scaled_feature,columns=col_names)\nScaled_Data.head()","07578904":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(Scaled_Data,target,test_size=0.25)","6ae11b4c":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X_train,y_train)","ff72da7a":"# Check the error in prediction on the basis of neighboring value\n\nerror_rate = []\n\n# Will take some time\nfor i in range(1,50):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))\n    \n    \nmin_error= min(error_rate)\nn = error_rate.index(min_error)\nprint(\"optimium n_neighbors value is = \",  n) ","1be6f705":"# prediction using optimium n_neighbors value\nknn = KNeighborsClassifier(n_neighbors=n)\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)","47bd9e3c":"from sklearn.metrics import confusion_matrix, classification_report\n\nprint(confusion_matrix(y_test,pred))\nprint(classification_report(y_test,pred))","8070a114":"# **Data Splitting**","33523c41":"## **result and conclusion**","7d3fb0ea":"# **EDA and Preprocessing**","303a1e96":"# **KNN Model**"}}