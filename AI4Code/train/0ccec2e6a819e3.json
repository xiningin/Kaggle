{"cell_type":{"de940acd":"code","670b591f":"code","e7ee5059":"code","e62b1c27":"code","f49b2123":"code","5b8c64f7":"code","3b488451":"code","bc6f8029":"code","824e55d8":"code","71421bfa":"code","78f1f5c8":"code","b7fd57aa":"code","3f42d8cb":"code","25f1a8f5":"code","57835231":"code","fced2131":"code","fbaac1b5":"code","08b67a09":"code","5a971031":"code","973e502e":"code","e15b8041":"code","bf0c7391":"code","b75029fd":"code","e0efa91d":"code","54341162":"code","dd68cc95":"code","623e9fff":"code","fb1714fb":"code","26a939fa":"code","99bdb430":"code","a11da779":"code","4eebbc53":"markdown","f7d0f0d4":"markdown","1a3b65da":"markdown","1eab4f8b":"markdown","014f474d":"markdown"},"source":{"de940acd":"import pandas as pd","670b591f":"df1=pd.read_csv('..\/input\/real-or-fake-fake-jobposting-prediction\/fake_job_postings.csv')\ndf1.head()","e7ee5059":"df1.shape","e62b1c27":"df=df1[['description','requirements','fraudulent']]\ndf.head()","f49b2123":"###Drop Nan Values\ndf=df.dropna()","5b8c64f7":"df.shape","3b488451":"## Get the Independent Features\n\nX=df.drop('fraudulent',axis=1)","bc6f8029":"## Get the Dependent features\ny=df['fraudulent']","824e55d8":"y.value_counts()","71421bfa":"import tensorflow as tf\ntf.__version__","78f1f5c8":"from tensorflow.keras.layers import Embedding\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import one_hot\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Bidirectional\nfrom tensorflow.keras.layers import Dropout","b7fd57aa":"voc_size=5000","3f42d8cb":"message = X.copy()","25f1a8f5":"message['description'][1]","57835231":"message.reset_index(inplace=True)","fced2131":"import nltk\nimport re\nfrom nltk.corpus import stopwords","fbaac1b5":"from nltk.stem.porter import PorterStemmer\nps = PorterStemmer()\ncorpus = []\nfor i in range(0, len(message)):\n    review = re.sub('[^a-zA-Z]', ' ', message['description'][i])\n    review = review.lower()\n    review = review.split()\n    \n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)","08b67a09":"corpus[1]","5a971031":"onehot_repr=[one_hot(words,voc_size)for words in corpus] \nonehot_repr[1]","973e502e":"sent_length=40\nembedded_docs=pad_sequences(onehot_repr,padding='pre',maxlen=sent_length)\nprint(embedded_docs)","e15b8041":"embedded_docs[0]","bf0c7391":"## Creating model\nembedding_vector_features=50\nmodel1=Sequential()\nmodel1.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))\nmodel1.add(Bidirectional(LSTM(100))) ##Just add bidirectional!!, except it would just behave as normal LSTM Model\nmodel1.add(Dropout(0.3))\nmodel1.add(Dense(1,activation='sigmoid'))\nmodel1.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nprint(model1.summary())","b75029fd":"len(embedded_docs),y.shape","e0efa91d":"import numpy as np\nX_final=np.array(embedded_docs)\ny_final=np.array(y)","54341162":"X_final[1]","dd68cc95":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_final, y_final, test_size=0.25, random_state=32)","623e9fff":"model1.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=12,batch_size=64)","fb1714fb":"y_pred=model1.predict_classes(X_test)","26a939fa":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,y_pred)","99bdb430":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)","a11da779":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","4eebbc53":"## If you like my appoach, please give a UpVote!\n\n## Thankyou so much !","f7d0f0d4":"## Onehot Representation:","1a3b65da":"## Model Performance and Accuracy:","1eab4f8b":"# Welcome!\n\n## I would be dealing with the dataset, using Bi-directional LSTM Approach, Please have a look at my Notebook, if you liked it, please do UpVote!","014f474d":"## Embedding Representation:"}}