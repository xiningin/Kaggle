{"cell_type":{"9e3afc4e":"code","41b52211":"code","6083f483":"code","36605b1c":"code","98066e43":"code","5139af12":"code","ea2bea78":"code","9dae6b7a":"code","f69d52ce":"code","1fca9df5":"code","f117a06c":"code","3c686834":"code","66e20cf6":"code","5d65832f":"code","8054403c":"code","da5ff74b":"code","3d10ece9":"code","bb81f099":"code","d0b0ffbd":"code","b1d16245":"code","caaa497c":"markdown","24c9e9b0":"markdown","11c37b44":"markdown","f69a5976":"markdown","f4d84eed":"markdown","6ad805e8":"markdown"},"source":{"9e3afc4e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","41b52211":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, BatchNormalization,MaxPool2D\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n\n\n\nsns.set(style='white', context='notebook', palette='deep')","6083f483":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","36605b1c":"y_train=train['label']\nx_train=train.drop('label',axis=1)\n\nsns.countplot(y_train)\ny_train.value_counts()","98066e43":"train.isnull().sum().sort_values(ascending=False)","5139af12":"\nx_train\/=255\ntest\/=255","ea2bea78":"img_width, img_height = 28,28  #width and height of the images\nx_train = x_train.values.reshape(-1,img_width,img_height,1)\ntest = test.values.reshape(-1,img_width,img_height,1)","9dae6b7a":"y_train=to_categorical(y_train,num_classes=10)","f69d52ce":"x_train, x_test,y_train, y_test = train_test_split(x_train, y_train, test_size = 0.0000001, random_state=2018)","1fca9df5":"model=Sequential()\nmodel.add(Conv2D(32,(3,3),padding='same',input_shape=(28,28,1), activation ='relu'))\n\n\nmodel.add(Conv2D(32,(3,3),padding='same',input_shape=(28,28,1), activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(64,(3,3),padding='same',input_shape=(28,28,1), activation ='relu'))\nmodel.add(Conv2D(64,(3,3),padding='same',input_shape=(28,28,1), activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(128, (3, 3),padding='same',input_shape=(28,28,1), activation='relu'))\nmodel.add(Conv2D(128, (3, 3),padding='same',input_shape=(28,28,1), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\nmodel.add(Dense(512,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n","f117a06c":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\nmodel.compile(optimizer=optimizer,\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n","3c686834":"datagen=ImageDataGenerator(featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False) \n","66e20cf6":"datagen.fit(x_train)\nearlystop = EarlyStopping(patience=4)\n\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\n\n\ncallbacks = [earlystop, learning_rate_reduction]","5d65832f":"training = model.fit_generator(datagen.flow(x_train,y_train,batch_size=30),\n                   steps_per_epoch=x_train.shape[0]\/\/60,epochs=120,\n                   validation_data=(x_test,y_test),verbose=2,callbacks=[learning_rate_reduction,earlystop])","8054403c":"fig, ax = plt.subplots(2,1)\nax[0].plot(training.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(training.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(training.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(training.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","da5ff74b":"training.history","3d10ece9":"y_pred = model.predict(x_test)\n# Convert predictions classes to one hot vectors \ny_pred_classes = np.argmax(y_pred,axis = 1) \n# Convert validation observations to one hot vectors\ny_true = np.argmax(y_test,axis = 1) \n# compute the confusion matrix\nconfusion = confusion_matrix(y_true, y_pred_classes) ","bb81f099":"plt.imshow(confusion, interpolation='nearest', cmap=plt.cm.Accent)\nplt.title('Confusion matrix')\nplt.colorbar()\ntick_marks = np.arange(len(range(10)))\nplt.xticks(tick_marks, range(10), rotation=45)\nplt.yticks(tick_marks, range(10))\n\nthresh = confusion.max() \/ 2.\nfor i, j in itertools.product(range(confusion.shape[0]), range(confusion.shape[1])):\n    plt.text(j, i, confusion[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if confusion[i, j] > thresh else \"black\")\n\nplt.tight_layout()\nplt.ylabel('True label')\nplt.xlabel('Predicted label')","d0b0ffbd":"results = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")","b1d16245":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_datagen_min_data.csv\",index=False)","caaa497c":"#Normalization\n* As it a grayscale image so we need to convert it to range of [0,1]\n* If it is a colored image then it consists of RGB","24c9e9b0":"**MODEL BUILDING**","11c37b44":"**Cateogrical Encoding**","f69a5976":"**Splitting of Train and Test data**\n\n* The reason behind so less training data is to to give keep very less data as small as one data in testind so that most of data can be used to hypertune the model.","f4d84eed":"**Arguments**\n\n**featurewise_center**: Boolean. Set input mean to 0 over the dataset, feature-wise.\n\n**samplewise_center**: Boolean. Set each sample mean to 0.\n\n**featurewise_std_normalization**: Boolean. Divide inputs by std of the dataset, feature-wise.\n\n**samplewise_std_normalization**: Boolean. Divide each input by its std.\n\n**zca_epsilon**: epsilon for ZCA whitening. Default is 1e-6.\n\n**zca_whitening**: Boolean. Apply ZCA whitening.\n\n**rotation_range**: Int. Degree range for random rotations.\n\n**width_shift_range**: Float, 1-D array-like or int - float: fraction of total width, if < 1, or pixels if >= 1. - 1-D array.\n\n**height_shift_range**: Float, 1-D array-like or int - float: fraction of total height, if < 1, or pixels if >= 1. - 1-D array-like: random elements from the array. - int: integer number of pixels from interval (-height_shift_range, +height_shift_range) - With height_shift_range=2 possible values are integers same as with height_shift_range=[-1, 0, +1],\n\n**height_shift_range**=1.0 possible values are floats in the interval\n\n**brightness_range**: Tuple or list of two floats. Range for picking a brightness shift value from.\n\n**shear_range**: Float. Shear Intensity (Shear angle in counter-clockwise direction in degrees)\n\n**zoom_range**: Float or [lower, upper]. Range for random zoom. If a float, [lower, upper] = [1-zoom_range, 1+zoom_range]","6ad805e8":"**Import the libraries**"}}