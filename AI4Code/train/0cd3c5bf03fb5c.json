{"cell_type":{"c9eaf76b":"code","3ddbb0a2":"code","49966a36":"code","3d55ce6e":"code","3f998afd":"code","8155138c":"code","dee2a586":"code","e65fa1e7":"code","b287ef45":"code","af1b231a":"code","eae744e0":"code","54d6bca7":"code","3287de14":"code","4689b743":"code","46dad152":"code","87464245":"markdown","293f49c4":"markdown","7a76a3f7":"markdown","ed7e7ca4":"markdown","84f04171":"markdown","34675510":"markdown","08ca77ae":"markdown","d5678dd7":"markdown"},"source":{"c9eaf76b":"!pip install fastai --upgrade","3ddbb0a2":"from fastai import *\nfrom fastai.tabular import *","49966a36":"input_path = '\/kaggle\/input\/'\ntrain_df = pd.read_csv(f'{input_path}train.csv')\ntest_df = pd.read_csv(f'{input_path}test.csv')","3d55ce6e":"for df in [train_df, test_df]:\n    df['Title'] = df['Name'].str.split(',').str[1].str.split(' ').str[1]\n    df['Deck'] = df['Cabin'].str[0]\n\n# find mean age for each Title across train and test data sets\nall_df = pd.concat([train_df, test_df], sort=False)\nmean_age_by_title = all_df.groupby('Title').mean()['Age']\n# update missing ages\nfor df in [train_df, test_df]:\n    for title, age in mean_age_by_title.iteritems():\n        df.loc[df['Age'].isnull() & (df['Title'] == title), 'Age'] = age","3f998afd":"test_df.Fare.fillna(0,inplace=True)","8155138c":"dep_var = 'Survived'\ncat_names = ['Pclass', 'Sex', 'Embarked', 'Title', 'Deck']\ncont_names = ['Age', 'Fare', 'SibSp', 'Parch']\nprocs = [FillMissing, Categorify, Normalize]\n\ntest = TabularList.from_df(test_df, cat_names=cat_names, cont_names=cont_names, procs=procs)\ndata = (TabularList.from_df(train_df, path='.', cat_names=cat_names, cont_names=cont_names, procs=procs)\n                           .split_by_idx(list(range(0,200)))\n                           #.split_by_idx(valid_idx=range(200,400))\n                           .label_from_df(cols=dep_var)\n                           .add_test(test, label=0)\n                           .databunch())","dee2a586":"np.random.seed(101)","e65fa1e7":"??tabular_learner","b287ef45":"#learn = tabular_learner(data, layers=[60, 20], metrics=accuracy)\nlearn = tabular_learner(data, layers=[ 300, 150], metrics=accuracy, emb_drop=0.1)\n#learn.fit(10)\nlearn.lr_find()\nlearn.recorder.plot()","af1b231a":"learn.fit(15, 1e-2)\nlearn.fit(15, 1e-1)\nlearn.fit(15, 1e-2)\nlearn.fit(15, 1e-1)\nlearn.fit(15, 1e-2)\nlearn.fit(15, 1e-1)\nlearn.fit(15, 1e-2)\nlearn.fit(15, 1e-1)\nlearn.fit(15, 1e-2)\nlearn.fit(15, 1e-1)\nlearn.fit(15, 1e-2)\nlearn.fit(15, 1e-1)\nlearn.fit(15, 1e-2)\nlearn.fit(15, 1e-1)\nlearn.fit(15, 1e-2)\nlearn.fit(15, 1e-1)\nlearn.fit(15, 1e-2)\nlearn.fit(15, 1e-1)\nlearn.fit(15, 1e-2)\n#learn.fit(15, 1e-4)\n#learn.fit(15, 1e-4)","eae744e0":"learn.fit(1, 1e-3)","54d6bca7":"# get predictions\npreds, targets = learn.get_preds()\n\npredictions = np.argmax(preds, axis = 1)\npd.crosstab(predictions, targets)","3287de14":"predictions, *_ = learn.get_preds(DatasetType.Test)\nlabels = np.argmax(predictions, 1)","4689b743":"sub_df = pd.DataFrame({'PassengerId': test_df['PassengerId'], 'Survived': labels})\nsub_df.to_csv('submission.csv', index=False)","46dad152":"sub_df.tail()","87464245":"Need at least v1.0.25 of `fastai` so update default Kaggle version.","293f49c4":"Check that what we are submitting looks sensible.","7a76a3f7":"## Feature engineering\n- Extract *Title* from the name colum. \n- Extract *Deck* from the first character of the cabin number.\n- Fill in missing *Age* values with the mean age for passengers with the same title.","ed7e7ca4":"## Load data","84f04171":"## Training","34675510":"# Predicting survival of Titanic passengers","08ca77ae":"\n## Fastai setup","d5678dd7":"## Inference\nPredictions come as an array of probabilities of death or survival  for each passenger in the test set. Use `argmax` to convert each to`1` or `0` then construct the submission dataframe and save to CSV."}}