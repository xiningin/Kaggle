{"cell_type":{"92ca9241":"code","f98d8e8e":"code","c3066c0a":"code","fefb3e1e":"code","580d52ac":"code","7f88467d":"code","684e33df":"code","7e632847":"code","d113af9f":"code","e9b94855":"code","dc266521":"code","82412cef":"code","eda8fadb":"code","0fb2cccf":"code","9a7cf0c4":"code","00e060e8":"code","e1eb39ec":"code","9b3aa619":"code","256377dd":"code","39f92269":"code","7ba293fc":"code","53873af5":"code","2a9875f3":"code","33ab30f1":"code","4e228b79":"code","d2a00b7d":"code","cf70f001":"code","d1fde458":"code","73f2d006":"code","759e12ab":"code","0b1ab699":"markdown","fcb2bc0f":"markdown","e890e182":"markdown","cd6eec42":"markdown","32731594":"markdown","44216a04":"markdown","790010f2":"markdown","5d8444b8":"markdown","8c9ad666":"markdown","637b7b8e":"markdown","e9e2c587":"markdown","4682c546":"markdown","57e7c87c":"markdown","e9054d8f":"markdown","540e417c":"markdown","ba6bc475":"markdown","15e5abe2":"markdown","ca549b64":"markdown","e69cac8a":"markdown","5b5c791a":"markdown","1dda8c37":"markdown","462dfedf":"markdown","e8ad4832":"markdown","878c5352":"markdown","5e190e5d":"markdown","ff821175":"markdown","7ca0c616":"markdown","272f6f40":"markdown","0307652f":"markdown","afe23a1c":"markdown","60352066":"markdown","1907c738":"markdown","a1a5eaa9":"markdown","4e5b3442":"markdown","472f5256":"markdown","d1046b21":"markdown","5d376b86":"markdown","eaaa869a":"markdown"},"source":{"92ca9241":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\nfrom plotnine import *\n\n#import plotly.plotly as plt\n#import cufflinks as cf\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f98d8e8e":"my_data2=pd.read_excel(\"..\/input\/sales_data.xlsx\")\nmy_data2.head()","c3066c0a":"my_data1=pd.read_excel(\"..\/input\/date.xlsx\") \nmy_data1.head()","fefb3e1e":"my_data = pd.concat([my_data2, my_data1], axis=1, sort=False)\nmy_data.head()","580d52ac":"# Check for missing values\nmy_data.isnull().sum()","7f88467d":"# See rows with missing values\nmy_data[my_data.isnull().any(axis=1)]","684e33df":"# Plot histogram using seaborn\n#plt.figure(figsize=(15,8))\n#sns.distplot(my_data2['transaction timestamp'], bins =30)\n#sns.distplot(my_data['transaction timestamp'],kde = False)\n(my_data['transaction timestamp']).hist(bins =70, grid=False, figsize=(12,8), color='#86bf91', zorder=2, rwidth=0.9)\n# Add title and axis names\nplt.title('Visualisation')\nplt.xlabel('TRANSACTION TIMESTAMP')\nplt.ylabel('TOTAL COUNT')","7e632847":"total = my_data.isnull().sum().sort_values(ascending=False)\npercent = (my_data.isnull().sum()\/my_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nf, ax = plt.subplots(figsize=(15, 6))\nplt.xticks(rotation='90')\nsns.barplot(x=missing_data.index, y=missing_data['Percent'])\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)\nmissing_data.head()","d113af9f":"my_data.dropna(subset=['product description'], how='all', inplace = True)\nmy_data.dropna(subset=['customer id'], how='all', inplace = True)\nmy_data.isnull().sum()","e9b94855":"my_data.head()","dc266521":"prod_sales_amt=(my_data['quantity sold']).mul(my_data['unit price'])\nprod_sale_amt=prod_sales_amt.T \nprod_sale_amt = prod_sale_amt.to_frame()\nprod_sale_amt.columns = ['prd sale amt']\nprod_sale_amt.head()","82412cef":"my_data1 = pd.concat([my_data, prod_sale_amt], axis=1, join_axes=[my_data.index])\nmy_data1.head()","eda8fadb":"qty_sold_data = my_data1.nlargest(50, \"quantity sold\") \nunit_price_data = my_data1.nlargest(50, \"unit price\") \nprd_sale_amt= my_data1.nlargest(50,'prd sale amt')","0fb2cccf":"plt.figure(figsize=(20,10))\nmy_data['day_name'].value_counts()[:10].plot.pie(autopct='%1.1f%%',\n        shadow=True, startangle=90, cmap='tab20')\nplt.title(\"MOST PERCENTAGE OF SALES IN A WEEK\",size=14, weight='bold')","9a7cf0c4":"# Plot the total quantity sold cournty wise\nsns.set_color_codes(\"pastel\")\nplt.figure(figsize=(15,10))\nsns.barplot(x=\"quantity sold\", y=\"transaction country\", data=qty_sold_data,\n            label=\"Country Wise Sales\", color=\"b\")","00e060e8":"plt.figure(figsize=(15,10))\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"quantity sold\", y=\"product description\", data=qty_sold_data,\n            label=\"Product Wise Sales\", color=\"g\")","e1eb39ec":"# Plot the total quantity sold cournty wise\nsns.set_color_codes(\"pastel\")\nplt.figure(figsize=(15,10))\nsns.barplot(x=\"month_of_year\", y=\"quantity sold\", data=qty_sold_data,\n            label=\"Country Wise Sales\", color=\"y\")","9b3aa619":"my_data1.describe()","256377dd":"new_my_data= my_data1.filter(['quantity sold','unit price','customer id','day_of_month','prd sale amt'], axis=1)\nnew_my_data.head()","39f92269":"sns.pairplot(my_data1)","7ba293fc":"# RuntimeWarning: invalid value encountered in divide <to avoid this I am using np.seterr>\nnp.seterr(divide='ignore', invalid='ignore')\nsns.pairplot(qty_sold_data, hue=\"quantity sold\", palette=\"husl\")","53873af5":"sns.pairplot(unit_price_data, hue=\"unit price\", palette=\"husl\")","2a9875f3":"sns.pairplot(prd_sale_amt, hue=\"prd sale amt\", palette=\"husl\")","33ab30f1":"sns.catplot(x=\"day_of_month\", y=\"prd sale amt\", hue=\"customer id\", kind=\"swarm\", data=qty_sold_data,height=10);","4e228b79":"sns.catplot(x=\"day_of_month\", y=\"prd sale amt\", hue=\"customer id\", kind=\"swarm\", data=prd_sale_amt,height=10);","d2a00b7d":"sns.catplot(x=\"month_of_year\",y=\"prd sale amt\",kind='box',data=qty_sold_data, size =10)","cf70f001":"sns.catplot(x=\"month_of_year\",y=\"prd sale amt\",kind='box',data=prd_sale_amt, size =10)","d1fde458":"col_names = ['day_of_month','customer id']\n\nfig, ax = plt.subplots(len(col_names), figsize=(16,12))\n\nfor i, col_val in enumerate(col_names):\n\n    sns.distplot(my_data[col_val], hist=True, ax=ax[i])\n    ax[i].set_title('Freq dist '+col_val, fontsize=10)\n    ax[i].set_xlabel(col_val, fontsize=8)\n    ax[i].set_ylabel('Count', fontsize=8)\n\nplt.show()","73f2d006":"# Show the results of a linear regression within each dataset\nsns.lmplot(x=\"day_of_month\", y=\"quantity sold\", col=\"unit price\", hue=\"unit price\", data=qty_sold_data,\n           col_wrap=2, ci=None, palette=\"muted\", height=4,\n           scatter_kws={\"s\": 50, \"alpha\": 1})","759e12ab":"# Show the results of a linear regression within each dataset\nsns.lmplot(x=\"day_of_month\", y=\"quantity sold\", col=\"unit price\", hue=\"unit price\", data=unit_price_data,\n           col_wrap=2, ci=None, palette=\"muted\", height=4,\n           scatter_kws={\"s\": 50, \"alpha\": 1})","0b1ab699":"### chosing top 50 product sale amount dataframe as data and highlighting prd sale amt","fcb2bc0f":"# Data Visualisation on the Original Data ","e890e182":"### quantity sold for each day in a month based on top 50 quantity sold data ","cd6eec42":"### product sale amount for different dates of a month on the basis of top 50 product sales amount","32731594":"# finding missing value in a dataset","44216a04":"### calculating the product sale amount i.e. prod_sale_amt= quantity sold\t* unit price\t","790010f2":"## avoiding out of stock for particular day in a week based on percentage of sales","5d8444b8":"## typical customers buying from us can be seen in the next 2 plotting","8c9ad666":"# importing libraries","637b7b8e":"# Explatory Data Analysis","e9e2c587":"# data cleaning ","4682c546":"### month wise and customer id wise sales over the time","57e7c87c":"### chosing top 50 unit price dataframe as data and highlighting unit price","e9054d8f":"** now as we saw in the previous graph that the percentage of missing value for the column CUSTOMER ID, PRODUCT DESCRIPTION is very less so we thought of removing these row where CUSTOMER ID Product Description is NAN **","540e417c":"### now we are going to join original i.e. my_data dataframe with this prod_sale_amt dataframe","ba6bc475":"### new dataframe with numerical value columns only","15e5abe2":"### product sale amount for different months in a year for top 50 product sale amount","ca549b64":"## avoiding out of stock based on different months in a year sale","e69cac8a":"### the following pie chart shows the sales of product on various days of a week","5b5c791a":"# Identifying missing value in a dataset","1dda8c37":"## the below plot help us to understand on how to increase sales","462dfedf":"## company's perfromance overt time as visualised (the next 4 plotting)","e8ad4832":"## next two plots give insights on how to increase sales","878c5352":"# joining of two dataframe into single dataframe","5e190e5d":"## avoiding out of stock based on different products sold mostly ","ff821175":"### chosing top 50 quantity sold dataframe as data and highlighting quantity sold","7ca0c616":"### quantity sold for each day in a month based on top 50 unit price data","272f6f40":"### In case the number of features is small we can easily understand that features \u2018Customer ID\u2019, \u2018Product Description\u2019 contain missing values.","0307652f":"## Performance based on customer acquisition and customer loyalty (below 2nd graph shows it)","afe23a1c":"### Quantities sold for different Product description","60352066":"### Plotting pairwise relationships in a dataset.\n\n","1907c738":"## we are doing outer join as this result zero information loss","a1a5eaa9":"## company's perfromance over time as visualised ","4e5b3442":"### as the dataset is huge, selecting top 50 values in descending order for the column quantity sold, unit price","472f5256":"### product sale amount for different dates of a month on the basis of top 50 quantity sold data","d1046b21":"### product sale amount for different months in a year for top 50 quantity sold data","5d376b86":"### Country wise most quantity sold ","eaaa869a":"### Quantities sold for different months of a year"}}