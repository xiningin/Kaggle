{"cell_type":{"083c038b":"code","911347df":"code","e830007a":"code","5e667449":"code","a4ec923c":"code","da9e9930":"code","1c152a20":"code","b05c22c1":"code","b68510d2":"code","67cd5f55":"code","4645b569":"code","7d34a031":"code","3cf5e10c":"code","d3522413":"code","ce8b965d":"code","49bf6d8b":"code","4d1a5c88":"code","fc93c6bc":"code","d5b70111":"code","d3387acd":"code","081ed475":"code","5be19999":"code","290bfac6":"code","923beb2a":"code","79c9df76":"code","1186efac":"code","9442a631":"code","94ebc28f":"code","b93255f6":"code","409dfd46":"code","b7d0a5ce":"code","5770f6e3":"code","22f29761":"code","03930292":"code","12e1d8f3":"code","30893a0a":"code","a21bb81c":"code","49106dd4":"code","a3d43686":"code","6060b7d7":"code","10d6dfcd":"code","43424c2d":"markdown","0582a4ac":"markdown","bc28eaff":"markdown","af1a9d7e":"markdown","d3c638ee":"markdown","4ea1d9b3":"markdown"},"source":{"083c038b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","911347df":"import matplotlib.pyplot as plt","e830007a":"# Display only top 5 and bottom 5 rows\npd.set_option('display.max_rows',10)","5e667449":"def nl():\n    print('\\n')","a4ec923c":"df_dataset=pd.read_csv('\/kaggle\/input\/traffic-prediction-dataset\/traffic.csv', parse_dates=[0],infer_datetime_format=True)\ntrdf=pd.read_csv('\/kaggle\/input\/traffic-prediction-dataset\/traffic.csv')","da9e9930":"df_dataset\n","1c152a20":"df_dataset.info()","b05c22c1":"convert_dict = {'Junction': float\n               }\n  \ndf_dataset = df_dataset.astype(convert_dict)","b68510d2":"X=df_dataset.values\ny=df_dataset.iloc[38496:48120,0:3].values","67cd5f55":"print(X.shape,y.shape)","4645b569":"#from sklearn.model_selection import train_test_split\n#X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.2,random_state=42)","7d34a031":"#print(X_train.shape,X_test.shape,y_train.shape,y_test.shape)","3cf5e10c":"df_train=pd.DataFrame(X, columns = ['DateTime','Junction','Vehicles','ID'])","d3522413":"df_train","ce8b965d":"df_test=pd.DataFrame(y, columns = ['DateTime','Junction','Vehicles'])","49bf6d8b":"df_test","4d1a5c88":"df_temp= df_train.set_index(['Junction','DateTime'])","fc93c6bc":"level_values = df_temp.index.get_level_values","d5b70111":"time_targets = df_temp.groupby([level_values(0)]+[pd.Grouper(freq='1M',level=-1)])['Vehicles'].sum()\ntime_targets","d3387acd":"del df_temp\ndel time_targets","081ed475":"train = df_train.pivot(index='DateTime',columns='Junction',values='Vehicles')\ntrain","5be19999":"train= train.fillna(0) #fill Nans with 0 vehicles","290bfac6":"def gen_lag_features(df,n_in=1,n_out=1,dropnan=True):\n    n_vars=df.shape[1]\n    cols,names=list(),list()\n    # input sequence (t-n,...t-1)\n    for i in range(n_in,0,-1):\n        cols.append(df.shift(i))\n        names+=[('Junction %d (H-%d)'%(j+1,i)) for j in range(n_vars)]\n    # forecast sequence (t,t+1...t+n)\n    for i in range(0,n_out):\n        cols.append(df.shift(-i))\n        if i== 0:\n            names+=[('Junction %d (H)' % (j+1)) for j in range(n_vars)]\n        else:\n            names+=[('Junction %d (H+%d)' % (j+1,i)) for j in range(n_vars)]\n    # put it all together\n    agg = pd.concat(cols,axis=1)\n    agg.columns=names\n    # drop rows with Nan values\n    if dropnan:\n        agg.dropna(inplace=True)\n    return agg","923beb2a":"Xy_train=gen_lag_features(train)\nXy_train","79c9df76":"from sklearn.preprocessing import MinMaxScaler, StandardScaler\nscaler= MinMaxScaler(feature_range=(0,1))\nXy_train[Xy_train.columns] = scaler.fit_transform(Xy_train[Xy_train.columns])\n\nXy_train","1186efac":"X_train = Xy_train[Xy_train.index< '2017-04-01'].iloc[:,0:4]\nX_train","9442a631":"y_train = Xy_train[Xy_train.index< '2017-04-01'].iloc[:,4:]\ny_train","94ebc28f":"print(X_train.shape,y_train.shape)","b93255f6":"X_train = np.expand_dims(X_train.values,axis=2)\nprint(X_train.shape)\n\ny_train=y_train.values\nprint(y_train.shape)","409dfd46":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.initializers import he_normal\nimport keras.backend as K\n\ndef root_mean_squared_error(y_true,y_pred):\n    return K.sqrt(K.mean(K.square(y_pred-y_true),axis=-1))","b7d0a5ce":"#Initialising the RNN\nregressor = Sequential()\n\n#Adding the input layer and the LSTM layer\nregressor.add(LSTM(units=50,activation='relu',kernel_initializer= he_normal(seed=0),input_shape=(None,1)))\n\n#output for 4 junctions\nregressor.add(Dense(units =4))\n\n#compiling the RNN\nregressor.compile(optimizer='adam',loss=root_mean_squared_error)","5770f6e3":"#Fitting the RNN to the Training set\nregressor.fit(X_train,y_train,batch_size=128,epochs=100,verbose=1)","22f29761":"X_valid=Xy_train[Xy_train.index >='2017-04-01'].iloc[:,0:4]\nX_valid","03930292":"X_valid = np.expand_dims(X_valid.values,axis=2)\ny_pred = regressor.predict(X_valid)","12e1d8f3":"y_pred=scaler.inverse_transform(np.concatenate((X_valid.squeeze(),y_pred),axis=1))[:,4:]\ny_pred","30893a0a":"y_truth = train[train.index>='2017-04-01']\ny_truth","a21bb81c":"#Visualizing Result fot the junctions\nfor junction in range(4):\n    plt.figure\n    plt.plot(y_truth.values[:,junction],color ='green',label='Real traffic')\n    plt.plot(y_pred[:,junction],color='red', label='Predicted traffic')\n    plt.title('Traffic Forecasting at junction %i'%(junction+1))\n    plt.xlabel('Number of hours from Start')\n    plt.ylabel('Traffic')\n    plt.legend()\n    plt.show()","49106dd4":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\ndef rmse(y_true,y_pred):\n    return sqrt(mean_squared_error(y_true,y_pred))","a3d43686":"rmse(y_truth, y_pred)","6060b7d7":"trdf1=trdf.squeeze()\n#trdf1.as_matrix()\n#print(trdf1)","10d6dfcd":"import pandas as pd\nimport numpy as np\n\ntrainMat=trdf.values\ntrain=[]\ntarget=[]\nprint(trainMat)\nfor i in trainMat:\n    s= i[3]\n    year=s\/(10**7)\n    s=s%(10**7)\n    month= s\/(10**5)\n    s=s%(10**5)\n    date=s\/(10**3)\n    s=s%(10**3)\n    time=s\/(10)\n    s=s%(10)\n    junction=s\n    train.append([year,month,date,time,junction])\n    target.append(i[2])\nX=np.array(train)","43424c2d":"# validating","0582a4ac":"# Generate lag features","bc28eaff":"# Reshape the Data\n","af1a9d7e":"### Quick EDA","d3c638ee":"# lag_features","4ea1d9b3":"# Modeling\n"}}