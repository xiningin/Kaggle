{"cell_type":{"e50479e4":"code","8546e499":"code","4aa9e7df":"code","0485c427":"code","9ddd66e1":"code","a505b0ac":"code","a5888cfd":"code","e5beb853":"code","5a43454b":"code","8c8387e6":"code","844e6fdf":"code","ff9d5454":"code","5fb29452":"code","763de715":"code","58c91e61":"code","098ce7d6":"code","7b7a3c68":"code","80b223fa":"code","d0f0e650":"code","67c3da10":"code","aa1e88f8":"code","57f5259c":"code","f6aca844":"code","37a22be7":"code","fb2d265b":"code","5d43cac0":"code","edde9147":"code","e7ddf640":"code","ec01f01f":"code","4b30d25b":"markdown","23af51ef":"markdown","0df3c95b":"markdown","9d3e7296":"markdown","c0f9d7cf":"markdown","2c851239":"markdown","0c7945d5":"markdown","e608ce42":"markdown","3d992120":"markdown","0a6092e7":"markdown","44b092e8":"markdown","8f603b3b":"markdown","3d1a6ecb":"markdown","bc6cedad":"markdown","35c6cda9":"markdown","25f7a660":"markdown","673c08dd":"markdown","5ed02abd":"markdown","fa3801a8":"markdown"},"source":{"e50479e4":"#################################\nimport pandas as pd\nimport numpy as np\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#################################\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\n#################################","8546e499":"BASE_PATH = '\/kaggle\/input\/plant-pathology-2020-fgvc7\/'\nSAMPLE_LENGTH = 100","4aa9e7df":"train_df = pd.read_csv(BASE_PATH + 'train.csv')\nprint(train_df.head())","0485c427":"def load_image(image_id):\n    return mpimg.imread(BASE_PATH + f'images\/{image_id}.jpg')","9ddd66e1":"def display_image(image,binary=False,rcmap=False,show=False,label=False):\n    if binary:\n        binary = 'binary'\n    \n    f = plt.figure(figsize=(10,3))\n    subplot_max = image.shape[-1] + 1\n    if label:\n        subplot_max += 1\n    \n    ax = f.add_subplot(1,subplot_max,1)\n    ax.title.set_text('Image - RGB')\n    plt.imshow(image)\n    plt.axis('off')\n    \n    ax = f.add_subplot(1,subplot_max,2)\n    ax.title.set_text('Image - R')\n    plt.imshow(image[...,0],cmap=(binary or 'Reds') + rcmap * '_r')\n    plt.axis('off')\n    \n    ax = f.add_subplot(1,subplot_max,3)\n    ax.title.set_text('Image - G')\n    plt.imshow(image[...,1],cmap=(binary or 'Greens') + rcmap * '_r')\n    plt.axis('off')\n    \n    ax = f.add_subplot(1,subplot_max,4)\n    ax.title.set_text('Image - B')\n    plt.imshow(image[...,2],cmap=(binary or 'Blues') + rcmap * '_r')\n    plt.axis('off')\n    \n    if label:\n        ax = f.add_subplot(1,subplot_max,5)\n        #ax.title.set_text('Label')\n        plt.text(0.5,0.5,label)\n        plt.axis('off')\n        \n    if show:\n        plt.show()\n\nsubset_images = train_df['image_id'][:5].apply(load_image)        \nfor i in range(len(subset_images)):\n    la = train_df.iloc[i]\n    display_image(subset_images[i],True,label = la.index.values[la == 1])\nplt.show()","a505b0ac":"def plot_colour_distribution(column,max_sample_length=100,subset=None):\n    subset = train_df[train_df[column] == 1]['image_id'].reset_index(drop=True)\n    max_sample_length = min(max_sample_length, len(subset))\n    red_mean, green_mean, blue_mean = [], [], []\n    for i in range(max_sample_length):\n        img = load_image(subset[i])\n        red_mean.append(np.mean(img[...,0]))\n        green_mean.append(np.mean(img[...,1]))\n        blue_mean.append(np.mean(img[...,2]))\n    \n    sns.distplot(red_mean,color='r')\n    sns.distplot(green_mean,color='g')\n    sns.distplot(blue_mean,color='b')\n    plt.show()","a5888cfd":"subset_images = train_df[train_df['healthy'] == 1].sample(n=5)['image_id'].apply(load_image).reset_index(drop=True)\nfor i in range(len(subset_images)):\n    display_image(subset_images[i],True)\nplt.show()","e5beb853":"plot_colour_distribution('healthy',100)","5a43454b":"subset_images = train_df[train_df['multiple_diseases'] == 1].sample(n=5)['image_id'].apply(load_image).reset_index(drop=True)\nfor i in range(len(subset_images)):\n    display_image(subset_images[i],True)\nplt.show()","8c8387e6":"plot_colour_distribution('multiple_diseases',100)","844e6fdf":"subset_images = train_df[train_df['rust'] == 1].sample(n=5)['image_id'].apply(load_image).reset_index(drop=True)\nfor i in range(len(subset_images)):\n    display_image(subset_images[i],True)\nplt.show()","ff9d5454":"plot_colour_distribution('rust',100)","5fb29452":"subset_images = train_df[train_df['scab'] == 1].sample(n=5)['image_id'].apply(load_image).reset_index(drop=True)\nfor i in range(len(subset_images)):\n    display_image(subset_images[i],True)\nplt.show()","763de715":"plot_colour_distribution('scab',100)","58c91e61":"train_df.iloc[:,1:].sum().plot.bar(rot=0)\nplt.show()","098ce7d6":"IMAGE_SIZE = (256,256)\nVALIDATION_SIZE = 0.15\nBATCH_SIZE = 16\nSHUFFLE_BUFFER = 512","7b7a3c68":"train_val_df = pd.read_csv(BASE_PATH + 'train.csv')\ntest_df = pd.read_csv(BASE_PATH + 'test.csv')\n\ndef path_to_image(image_id, labels=None):\n    img = tf.io.read_file(BASE_PATH + 'images\/' + image_id + '.jpg')\n    img = tf.image.decode_jpeg(img, channels=3)\n    img = tf.image.convert_image_dtype(img, tf.float32)\n    img = tf.image.resize(img, IMAGE_SIZE)\n    if labels is None:\n        return img\n    return img, labels","80b223fa":"train_df, val_df = train_test_split(\n    train_val_df,\n    stratify=train_val_df[train_val_df.columns[1:]],\n    test_size=VALIDATION_SIZE,\n    random_state=1526,\n)","d0f0e650":"def df_to_dataset(df,no_y=False):\n    if no_y:\n        t_slice = (df['image_id'].values,)\n    else:\n        t_slice = (\n            df['image_id'].values,\n            df[df.columns[1:]].values,\n        )\n    return (\n        tf.data.Dataset\n        .from_tensor_slices(t_slice)\n        .map(\n            path_to_image,\n            num_parallel_calls=tf.data.experimental.AUTOTUNE,\n        )\n        .repeat()\n        .shuffle(SHUFFLE_BUFFER)\n        .batch(BATCH_SIZE)\n        .prefetch(tf.data.experimental.AUTOTUNE)\n    )\n\ntrain_dataset = df_to_dataset(train_df)\nval_dataset = df_to_dataset(val_df)\ntest_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((test_df['image_id'].values,))\n    .map(path_to_image, num_parallel_calls=tf.data.experimental.AUTOTUNE)\n    .batch(BATCH_SIZE)\n)","67c3da10":"optimizer = tf.keras.optimizers.Adam(3e-4)\nepochs = 20\nsteps_per_epoch = len(train_df) \/\/ BATCH_SIZE\nvalidation_steps = len(val_df) \/\/ BATCH_SIZE","aa1e88f8":"model = tf.keras.Sequential([\n    tf.keras.applications.ResNet50(\n        include_top = False,\n        weights = 'imagenet',\n        input_shape = IMAGE_SIZE + (3,),\n        pooling = 'avg',\n    ),\n    tf.keras.layers.Dense(4, activation='softmax'),\n])","57f5259c":"model.compile(\n    loss='categorical_crossentropy',\n    optimizer=optimizer,\n    metrics=['accuracy'],\n)","f6aca844":"history = model.fit(\n    x = train_dataset,\n    epochs = epochs,\n    validation_data = val_dataset,\n    steps_per_epoch = steps_per_epoch,\n    validation_steps = validation_steps,\n)","37a22be7":"sns.lineplot(range(len(history.history['accuracy'])),history.history['accuracy'])\nsns.lineplot(range(len(history.history['val_accuracy'])),history.history['val_accuracy'])\nplt.show()","fb2d265b":"sns.lineplot(range(len(history.history['loss'])),history.history['loss'])\nsns.lineplot(range(len(history.history['val_loss'])),history.history['val_loss'])\nplt.show()","5d43cac0":"a = model.predict(test_dataset)","edde9147":"sample_df = pd.read_csv(BASE_PATH + 'sample_submission.csv')\nsample_df[sample_df.columns[1:]] = a","e7ddf640":"sample_df.to_csv('predictions.csv',index=False)","ec01f01f":"sample_df[sample_df.columns[1:]].idxmax(axis=1).value_counts()","4b30d25b":"## Amount of Data per Category","23af51ef":"### Hyperparameters","0df3c95b":"### Leaves with Multiple Disease","9d3e7296":"### Leaves with Rust","c0f9d7cf":"### Constants","2c851239":"* Rust is clearly visible on Red Channel\n* Scab tends to haves spotty appearance in different channels with the veins often having lower values of green then for healthy leaves.","0c7945d5":"# Data Inspection","e608ce42":"## Loading Data","3d992120":"### Healthy Leaves","0a6092e7":"# Constants","44b092e8":"Healthy, Rust and Scab have almost equal amount of examples but multiple_diseases is severely imbalanced.","8f603b3b":"# Imports","3d1a6ecb":"### Splitting Dataset","bc6cedad":"## Planned Preprocessing Steps\nAs the disease are quite localized, cropping the image to just the leaves should help. Image flips would help increase the low amount of images. And the imbalance would need to be balanced using either duplicates, more augmentation for multiple_diseases or weights for loss function.\n* Crop to leaves\n* Flip Images \/ Augment data\n* 4 ~ 6 times augmentation for multiple_diseases","35c6cda9":"# Training skeleton","25f7a660":"## Displaying Images by Labels","673c08dd":"## Loading Dataset","5ed02abd":"### Leaves with Scab","fa3801a8":"## Defining Model"}}