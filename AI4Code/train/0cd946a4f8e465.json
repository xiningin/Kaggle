{"cell_type":{"74d837dd":"code","13efdde4":"code","d8cfcca3":"code","17fe4616":"code","d58c3290":"code","4b6c2e03":"code","1849ab19":"code","9c9cac74":"code","1714902a":"code","1b6a5460":"code","062d9c7d":"code","ec31c409":"code","f720fa59":"code","86195d24":"code","5dbd6425":"code","7b5e6bf4":"code","985d3aaa":"code","b9d78b08":"code","a604c3f1":"code","bdc2c0c7":"code","60f5a7d5":"code","de4022f2":"code","4359b07d":"code","c98c3cbd":"code","6896c6b5":"code","b41f8f17":"code","9902f1dc":"code","997b0a9a":"code","ed96ed45":"code","c4f0252d":"code","6ae81c2a":"code","81852b3e":"code","92eadfe2":"code","3f5b0247":"code","4ef19dde":"code","613e13bf":"code","77a801f6":"code","11c3e3ec":"code","30dbafce":"code","330526db":"code","2d01e4f9":"code","8321854a":"code","b22ad5d5":"code","dc6e92b9":"code","a8c926db":"code","617454bd":"code","131b866b":"code","b32c48c8":"code","90c0bf66":"code","c0efb71a":"code","78b6f014":"code","894747f0":"code","d61a6438":"code","48792e34":"code","b058924d":"code","4075e6aa":"code","d2ea8a0a":"code","c374caa6":"code","fbd22907":"code","582e7172":"code","fae11188":"code","aa29a41b":"code","c04e8930":"code","840734f0":"code","03f7322a":"code","3b9f3857":"code","5876ca4e":"code","fa2f5431":"code","0bd90a2d":"code","3588f903":"code","943f45dd":"code","84c601fa":"code","35974993":"code","c8a93bea":"code","6bd8f4c1":"code","f74bceb0":"code","999e7eab":"code","3a4e409f":"code","672b0d38":"markdown","66f00c30":"markdown","767cc8dd":"markdown","c8efb877":"markdown","b1f0a384":"markdown","cd1df448":"markdown","fd5a9540":"markdown"},"source":{"74d837dd":"!pip install sweetviz","13efdde4":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","d8cfcca3":"df_train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv')\ndf_submission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')","17fe4616":"df_train.head()","d58c3290":"df_test.head()","4b6c2e03":"df_submission.head()","1849ab19":"print('Size of train dataset:', df_train.shape)\nprint('\\nSize of est dataset:', df_test.shape)\nprint('\\n\\nSize submission:\\n\\n', df_submission.shape)\n","9c9cac74":"print('Missing Values in train:\\n\\n', df_train.isnull().sum())\nprint('\\n\\nMissing Values in test:\\n\\n', df_test.isnull().sum())\nprint('\\n\\nMissing Values submission:\\n\\n', df_submission.isnull().sum())","1714902a":"print('Info train ', df_train.info())\nprint('\\n\\nInfo test:\\n\\n', df_test.info())\nprint('\\n\\nInfo submission:\\n\\n', df_submission.info())","1b6a5460":"print('Data Type train ', df_train.dtypes)\nprint('\\n\\n Data Type test:\\n\\n', df_test.dtypes)\nprint('\\n\\n Data Type submission:\\n\\n', df_submission.dtypes)","062d9c7d":"print('Data Size  train ', df_train.size)\nprint('\\n\\n Data Size test :\\n\\n', df_test.size)\nprint('\\n\\n Data Size submission:\\n\\n', df_submission.size)","ec31c409":" df_train.describe().T","f720fa59":" df_test.describe().T","86195d24":"import sweetviz as sv","5dbd6425":"Tr_report1 = sv.analyze(df_train)\nTr_report1.show_notebook(w=\"80%\", h=\"full\")\nTr_report1.show_html('Tr_report1.html')","7b5e6bf4":"Te_report = sv.analyze(df_test)\nTe_report.show_notebook(w=\"80%\", h=\"full\")\nTe_report.show_html('Te_report.html')","985d3aaa":"data1=df_train\ndata2=df_test\nreport_comp=sv.compare([data1,'TRAIN'],[data2,'TEST'])\nreport_comp.show_notebook(w=\"80%\", h=\"full\")\nreport_comp.show_html('Compare_Results.html')","b9d78b08":"Sub_report = sv.analyze(df_submission)\nSub_report.show_notebook(w=\"80%\", h=\"full\")\nSub_report.show_html('Sub_report.html')","a604c3f1":"G = sns.pairplot(df_train, diag_kind=\"kde\")\nG.map_lower(sns.kdeplot, levels=4, color=\".2\")","bdc2c0c7":"sns.distplot(df_train['deg_C'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"g\"});","60f5a7d5":"sns.distplot(df_train['relative_humidity'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"g\"});","de4022f2":"sns.distplot(df_train['absolute_humidity'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"g\"});","4359b07d":"sns.distplot(df_train['sensor_1'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"g\"});","c98c3cbd":"sns.distplot(df_train['sensor_2'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"g\"});","6896c6b5":"sns.distplot(df_train['sensor_3'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"g\"});","b41f8f17":"sns.distplot(df_train['sensor_4'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"g\"});","9902f1dc":"sns.distplot(df_train['sensor_5'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"g\"});","997b0a9a":"sns.distplot(df_train['target_carbon_monoxide'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"g\"});","ed96ed45":"sns.distplot(df_train['target_benzene'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"g\"});","c4f0252d":"sns.distplot(df_train['target_nitrogen_oxides'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"g\"})","6ae81c2a":"df_train.plot(figsize = (11, 25), subplots = True, linewidth = 0.8, color = \"g\")\nplt.xlabel('')\nplt.show()","81852b3e":"df_test.plot(figsize = (11, 25), subplots = True, linewidth = 0.8, color = \"g\")\nplt.xlabel('')\nplt.show()","92eadfe2":"df_train.columns","3f5b0247":"df_train[['deg_C','target_carbon_monoxide','target_benzene', 'target_nitrogen_oxides']].corr()","4ef19dde":"df_train[['relative_humidity','target_carbon_monoxide','target_benzene', 'target_nitrogen_oxides']].corr()","613e13bf":"df_train[['sensor_1','target_carbon_monoxide','target_benzene', 'target_nitrogen_oxides']].corr()","77a801f6":"df_train[['sensor_2','target_carbon_monoxide','target_benzene', 'target_nitrogen_oxides']].corr()","11c3e3ec":"df_train[['sensor_3','target_carbon_monoxide','target_benzene', 'target_nitrogen_oxides']].corr()","30dbafce":"df_train[['sensor_4','target_carbon_monoxide','target_benzene', 'target_nitrogen_oxides']].corr()","330526db":"df_train[['sensor_5','target_carbon_monoxide','target_benzene', 'target_nitrogen_oxides']].corr()","2d01e4f9":"df_train.corr()","8321854a":"df_test.corr()","b22ad5d5":"plt.figure(figsize=(15,8))\nsns.heatmap(df_train.corr(), annot=True)","dc6e92b9":"plt.figure(figsize=(15,8))\nsns.heatmap(df_test.corr(), annot=True)","a8c926db":"df_train.drop('date_time', axis=1, inplace=True)\ndf_test.drop('date_time', axis=1, inplace=True)","617454bd":"df_train.to_csv('df_train.csv', index=False)\ndf_test.to_csv('df_test.csv', index=False)","131b866b":"df_train","b32c48c8":"import h2o\nfrom h2o.automl import H2OAutoML","90c0bf66":"h2o.init(\n    nthreads=-1,     # number of threads when launching a new H2O server\n    max_mem_size=12  # in gigabytes\n)","c0efb71a":"train = h2o.import_file(\".\/df_train.csv\")\ntest = h2o.import_file(\".\/df_test.csv\")\nsubmission = h2o.import_file(\"..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")","78b6f014":"train.head()","894747f0":"test.head()","d61a6438":"submission.head()","48792e34":"train_as_df = h2o.as_list(train,use_pandas=True)\ntrain_as_df_1 = train_as_df[train_as_df['target_carbon_monoxide'].notna()]\ntrain_as_df_2 = train_as_df[train_as_df['target_benzene'].notna()]\ntrain_as_df_3 = train_as_df[train_as_df['target_nitrogen_oxides'].notna()]","b058924d":"#Check for any missing values. In this case, there are no missing values to be treated.\n\nround((train_as_df_1.isnull().sum() * 100\/ len(train_as_df_1)),2).sort_values(ascending=False)","4075e6aa":"round((train_as_df_2.isnull().sum() * 100\/ len(train_as_df_2)),2).sort_values(ascending=False)","d2ea8a0a":"round((train_as_df_3.isnull().sum() * 100\/ len(train_as_df_3)),2).sort_values(ascending=False)","c374caa6":"train_1 = h2o.H2OFrame(train_as_df_1)\nx =train_1.columns\ny_1 = 'target_carbon_monoxide'\ny_2 ='target_benzene'\ny_3 ='target_nitrogen_oxides'\nx.remove(y_1)\nx.remove(y_2)\nx.remove(y_3)\n","fbd22907":"aml1 = H2OAutoML(max_models=10, seed=1)\naml1.train(x=x, y=y_1, training_frame=train_1)\nprint(aml1)\n\npre_aml1=aml1.predict(test)\nprint(pre_aml1)\n\nlb = aml1.leaderboard\nlb.head(rows=lb.nrows)\nlb = h2o.automl.get_leaderboard(aml1, extra_columns = 'ALL')\nprint(lb)\n\nmodel_ids = list(aml1.leaderboard['model_id'].as_data_frame().iloc[:,0])\nse = h2o.get_model([mid for mid in model_ids if \"AllModels\" in mid][0])\nprint(se)\n\nmetalearner = h2o.get_model(se.metalearner()['name'])\nprint(metalearner)\nmetalearner.coef_norm()","582e7172":"aml2 = H2OAutoML(max_models=10, seed=1)\naml2.train(x=x, y=y_2, training_frame=train_1)\nprint(aml2)\n\npre_aml2=aml2.predict(test)\nprint(pre_aml2)\n\nlb = aml2.leaderboard\nlb.head(rows=lb.nrows)\nlb = h2o.automl.get_leaderboard(aml2, extra_columns = 'ALL')\nprint(lb)\n\nmodel_ids = list(aml2.leaderboard['model_id'].as_data_frame().iloc[:,0])\nse = h2o.get_model([mid for mid in model_ids if \"AllModels\" in mid][0])\nprint(se)\n\nmetalearner = h2o.get_model(se.metalearner()['name'])\nprint(metalearner)\nmetalearner.coef_norm()","fae11188":"aml3 = H2OAutoML(max_models=10, seed=1)\naml3.train(x=x, y=y_3, training_frame=train_1)\nprint(aml3)\n\npre_aml3=aml3.predict(test)\nprint(pre_aml3)\n\nlb = aml3.leaderboard\nlb.head(rows=lb.nrows)\nlb = h2o.automl.get_leaderboard(aml3, extra_columns = 'ALL')\nprint(lb)\n\nmodel_ids = list(aml3.leaderboard['model_id'].as_data_frame().iloc[:,0])\nse = h2o.get_model([mid for mid in model_ids if \"AllModels\" in mid][0])\nprint(se)\n\nmetalearner = h2o.get_model(se.metalearner()['name'])\nprint(metalearner)\nmetalearner.coef_norm()","aa29a41b":"h2o.export_file(submission, path = \"Sub_Mission.csv\", force = True)","c04e8930":"import h2o\nfrom h2o.estimators import H2OGradientBoostingEstimator","840734f0":"train_1 = h2o.H2OFrame(train_as_df_1)\nx =train_1.columns\ny_1 = 'target_carbon_monoxide'\ny_2 ='target_benzene'\ny_3 ='target_nitrogen_oxides'\nx.remove(y_1)\nx.remove(y_2)\nx.remove(y_3)","03f7322a":"GBM1 = H2OGradientBoostingEstimator(nfolds=10, seed=1)\nGBM1.train(x=x, y=y_1, training_frame=train_1)\nprint(GBM1)\npre_GBM1=GBM1.predict(test)\nprint(pre_GBM1)\n\n# Eval performance:\nperformance = GBM1.model_performance()\n\nprint(performance)","3b9f3857":"GBM2 = H2OGradientBoostingEstimator(nfolds=10, seed=1)\nGBM2.train(x=x, y=y_2, training_frame=train_1)\nprint(GBM2)\npre_GBM2=GBM2.predict(test)\nprint(pre_GBM2)\n\n# Eval performance:\nperformance = GBM2.model_performance()\n\nprint(performance)","5876ca4e":"GBM3 = H2OGradientBoostingEstimator(nfolds=10, seed=1)\nGBM3.train(x=x, y=y_3, training_frame=train_1)\nprint(GBM3)\npre_GBM3=GBM3.predict(test)\nprint(pre_GBM3)\n\n# Eval performance:\nperformance = GBM3.model_performance()\n\nprint(performance)","fa2f5431":"from h2o.estimators import H2OXGBoostEstimator\nh2o.init()","0bd90a2d":"train_1 = h2o.H2OFrame(train_as_df_1)\nx =train_1.columns\ny_1 = 'target_carbon_monoxide'\ny_2 ='target_benzene'\ny_3 ='target_nitrogen_oxides'\nx.remove(y_1)\nx.remove(y_2)\nx.remove(y_3)","3588f903":"xgb_1 = H2OXGBoostEstimator(booster='dart',normalize_type=\"tree\",seed=1)\nxgb_1.train(x=x, y=y_1, training_frame=train_1)\nprint(xgb_1)\npre_xgb_1=xgb_1.predict(test)\nprint(pre_xgb_1)\n\n# Eval performance on a test set\nperformance = xgb_1.model_performance()\n\nprint(performance)\n\n\n# Extract feature interactions:\nfeature_interactions = xgb_1.feature_interaction()\nprint(feature_interactions)","943f45dd":"xgb_2 = H2OXGBoostEstimator(booster='dart',normalize_type=\"tree\",seed=1)\nxgb_2.train(x=x, y=y_2, training_frame=train_1)\nprint(xgb_1)\npre_xgb_2=xgb_2.predict(test)\nprint(pre_xgb_2)\n\n# Eval performance on a test set\nperformance = xgb_2.model_performance()\n\nprint(performance)\n\n\n# Extract feature interactions:\nfeature_interactions = xgb_2.feature_interaction()\nprint(feature_interactions)","84c601fa":"xgb_3 = H2OXGBoostEstimator(booster='dart',normalize_type=\"tree\",seed=1)\nxgb_3.train(x=x, y=y_3, training_frame=train_1)\nprint(xgb_3)\npre_xgb_3=xgb_3.predict(test)\nprint(pre_xgb_3)\n\n# Eval performance on a test set\nperformance = xgb_3.model_performance()\n\nprint(performance)\n\n\n# Extract feature interactions:\nfeature_interactions = xgb_3.feature_interaction()\nprint(feature_interactions)","35974993":"df_test_new = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv') \nsubmission = pd.concat([pd.DataFrame({'date_time': df_test_new['date_time']}),\n    pd.DataFrame({'target_carbon_monoxide': pre_aml1.as_data_frame().predict}),\n    pd.DataFrame({'target_benzene': pre_aml2.as_data_frame().predict}),\n    pd.DataFrame({'target_nitrogen_oxides':pre_aml3.as_data_frame().predict})], axis=1)\n\nsubmission.head()","c8a93bea":"submission.to_csv('Sample_submission_aml.csv', index=False)","6bd8f4c1":"df_test_new = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv') \nsubmission = pd.concat([pd.DataFrame({'date_time': df_test_new['date_time']}),\n    pd.DataFrame({'target_carbon_monoxide': pre_GBM1.as_data_frame().predict}),\n    pd.DataFrame({'target_benzene': pre_GBM2.as_data_frame().predict}),\n    pd.DataFrame({'target_nitrogen_oxides': pre_GBM3.as_data_frame().predict})], axis=1)\n\nsubmission.head()","f74bceb0":"submission.to_csv('Sample_submission_GBM3.csv', index=False)","999e7eab":"df_test_new = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv') \nsubmission = pd.concat([pd.DataFrame({'date_time': df_test_new['date_time']}),\n    pd.DataFrame({'target_carbon_monoxide': pre_xgb_1.as_data_frame().predict}),\n    pd.DataFrame({'target_benzene': pre_xgb_2.as_data_frame().predict}),\n    pd.DataFrame({'target_nitrogen_oxides': pre_xgb_3.as_data_frame().predict})], axis=1)\n\nsubmission.head()","3a4e409f":"submission.to_csv('Sample_submission_xgb.csv', index=False)","672b0d38":"# Exploratory Data Analysis with Sweetviz\n\nExploratory Data Analysis refers to the critical process of performing initial investigations on data to discover patterns, to spot anomalies, to test hypotheses, and to check assumptions with the help of summary statistics and graphical representations. When you want to build any model in Machine Learning you first need to understand the dataset. You need to get a sense of data before making your hands dirty.\n\n<img src=\"https:\/\/miro.medium.com\/max\/2000\/0*qnjfh5ioEMlMWgUZ.png\" width=\"800px\">\n\n\n\n##### Link\n[Here](https:\/\/pypi.org\/project\/sweetviz\/)","66f00c30":"# XGBoost ","767cc8dd":"### AutoML: Automatic Machine Learning","c8efb877":"# Tabular Playground Series - Jul 2021\n\n\n\n\n<img src=\"https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/25225\/logos\/header.png?t=2021-01-27-17-34-26\" width=\"800px\">\n\n\n### Data Description\nIn this competition you are predicting the values of air pollution measurements over time, based on basic weather information (temperature and humidity) and the input values of 5 sensors.\n\nThe three target values to you to predict are: target_carbon_monoxide, target_benzene, and target_nitrogen_oxides\n\n### Files\n* train.csv - the training data, including the weather data, sensor data, and values for the 3 targets\n* test.csv - the same format as train.csv, but without the target value; your task is to predict the value for each of these targets.\n* sample_submission.csv - a sample submission file in the correct format.\n\n\n#### Link \n\n[Here](https:\/\/www.kaggle.com\/c\/tabular-playground-series-jul-2021\/overview)","b1f0a384":"# Submission","cd1df448":"# Gradient Boosting Machine (GBM)\n","fd5a9540":"# H2O\u2019s AutoML\nH2O\u2019s AutoML can be used for automating the machine learning workflow, which includes automatic training and tuning of many models within a user-specified time-limi.\n\n\nWe used 3 models.\n* Automatic Machine Learning (AutoML)\n* Gradient Boosting Machine (GBM)\n* XGBoost \n\n<img src=\"https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/_images\/h2o-automl-logo.jpg\" width=\"600px\">\n\n\n\n#### Link \n[Here](https:\/\/h2o-release.s3.amazonaws.com\/h2o\/master\/3888\/docs-website\/h2o-docs\/automl.html)"}}