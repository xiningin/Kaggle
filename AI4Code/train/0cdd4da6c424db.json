{"cell_type":{"08654505":"code","6d478a3d":"code","e63779f8":"code","06debe5b":"code","d8f58b7d":"markdown"},"source":{"08654505":"last_action = None\ndef my_agent(obs_dict,config_dict):\n    from kaggle_environments.envs.hungry_geese.hungry_geese import Observation,Configuration,Action,row_col\n    import numpy as np \n    import random\n    def get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'):        \n        hit_opp_segments = 0\n        hit_my_goose_segments = 0\n        diff_distance_reward = 0\n        \n        if Direction == 'NORTH':\n\n            #player location after one step\n            player_goose = observation.geese[player_index]\n            player_head = player_goose[0]\n            player_row,player_column  = row_col(player_head,configuration.columns)\n            next_player_row,next_player_column  = player_row - 1,player_column \n            \n            # Food location\n            food = food_piece\n            food_row,food_column = row_col(food,configuration.columns) \n            # The difference between the two positions\n            diff_distance = (food_row - next_player_row)**2 + (food_column - next_player_column)**2\n            if diff_distance == 0:\n                diff_distance = 1\n            diff_distance_reward = 1\/diff_distance\n            #opp's location\n            for i in range(len(observation.geese)): \n                if i == player_index:\n                   my_goose = observation.geese[i]\n                   my_goose = my_goose[1:]\n                   for segment in my_goose:\n                      if player_head - 11 == segment:\n                          hit_my_goose_segments = hit_my_goose_segments + 1 \n                else:\n                    opp_goose = observation.geese[i]\n                    for segment in opp_goose:\n                       if player_head - 11 == segment:\n                          hit_opp_segments = hit_opp_segments + 1 \n                        \n            score = 100*diff_distance_reward - 1e3*hit_opp_segments - 1e3*hit_my_goose_segments\n            print(f'North:{score}')\n            return score\n\n\n        if Direction == 'SOUTH':\n\n            #player location after one step\n            player_goose = observation.geese[player_index]\n            player_head = player_goose[0]\n            player_row,player_column  = row_col(player_head,configuration.columns)\n            next_player_row,next_player_column  = player_row + 1,player_column\n\n            # Food location\n            food = food_piece\n            food_row,food_column = row_col(food,configuration.columns) \n            # The difference between the two positions\n            diff_distance = (food_row - next_player_row)**2 + (food_column - next_player_column)**2\n            if diff_distance == 0:\n                diff_distance = 1\n            diff_distance_reward = 1\/diff_distance\n            #opp segment's location & my goose segments location\n            for i in range(len(observation.geese)): \n                if i == player_index:\n                   my_goose = observation.geese[i]\n                   my_goose = my_goose[1:]\n                   for segment in my_goose:\n                      if player_head + 11 == segment:\n                          hit_my_goose_segments = hit_my_goose_segments + 1 \n                else:\n                    opp_goose = observation.geese[i]\n                    for segment in opp_goose:\n                       if player_head + 11 == segment:\n                          hit_opp_segments = hit_opp_segments + 1 \n                        \n            score = 100*diff_distance_reward - 1e3*hit_opp_segments - 1e3*hit_my_goose_segments\n            print(f'south:{score}')\n            return score\n\n\n        if Direction == 'EAST':\n\n            #player location after one step\n            player_goose = observation.geese[player_index]\n            player_head = player_goose[0]\n            player_row,player_column  = row_col(player_head,configuration.columns)\n            next_player_row,next_player_column  = player_row ,player_column + 1\n\n            # Food location\n            food = observation.food[0]\n            food_row,food_column = row_col(food,configuration.columns) \n            # The difference between the two positions\n            diff_distance = (food_row - next_player_row)**2 + (food_column - next_player_column)**2\n            if diff_distance == 0:\n                diff_distance = 1\n            diff_distance_reward = 1\/diff_distance        \n            #opp segment's location & my goose segments location\n            for i in range(len(observation.geese)): \n                if i == player_index:\n                   my_goose = observation.geese[i]\n                   my_goose = my_goose[1:]\n                   for segment in my_goose:\n                      if player_head + 1 == segment:\n                          hit_my_goose_segments = hit_my_goose_segments + 1 \n                else:\n                    opp_goose = observation.geese[i]\n                    for segment in opp_goose:\n                       if player_head + 1 == segment:\n                          hit_opp_segments = hit_opp_segments + 1 \n\n            score = 100*diff_distance_reward - 1e3*hit_opp_segments - 1e3*hit_my_goose_segments\n            print(f'East:{score}')\n            return score\n\n        if Direction == 'WEST':\n\n            #player location after one step\n            player_goose = observation.geese[player_index]\n            player_head = player_goose[0]\n            player_row,player_column  = row_col(player_head,configuration.columns)\n            next_player_row,next_player_column  = player_row ,player_column - 1\n\n            # Food location\n            food = food_piece\n            food_row,food_column = row_col(food,configuration.columns) \n            # The difference between the two positions\n            diff_distance = (food_row - next_player_row)**2 + (food_column - next_player_column)**2\n            if diff_distance == 0:\n                diff_distance = 1\n            diff_distance_reward = 1\/diff_distance\n            #opp segment's location & my goose segments location\n            for i in range(len(observation.geese)): \n                if i == player_index:\n                   my_goose = observation.geese[i]\n                   my_goose = my_goose[1:]\n                   for segment in my_goose:\n                      if player_head - 1 == segment:\n                          hit_my_goose_segments = hit_my_goose_segments + 1 \n                else:\n                    opp_goose = observation.geese[i]\n                    for segment in opp_goose:\n                       if player_head - 1 == segment:\n                          hit_opp_segments = hit_opp_segments + 1 \n\n            score = 100*diff_distance_reward - 1e3*hit_opp_segments - 1e3*hit_my_goose_segments\n            print(f'West:{score}')\n            return score\n    print('-----------------------------------------------')\n    import numpy as np \n    import random\n    # Logic to select action here, but don't allow last_action.opposite()\n    scores = []\n    observation = Observation(obs_dict)\n    configuration = Configuration(config_dict)\n    player_index = observation.index\n    player_goose = observation.geese[player_index]\n    player_head = player_goose[0]\n    player_row,player_column = row_col(player_head,configuration.columns)\n    food = observation.food[0]\n    food_row,food_column = row_col(food,configuration.columns)\n    food_piece = food\n    max_score_values = []\n    max_score_loc  = []\n    lock_SOUTH = 0\n    lock_NORTH = 0\n    lock_EAST = 0\n    lock_WEST = 0\n    # Checking allowed movements\n    if len(player_goose)== 1:\n        global last_action\n        if last_action == None:\n            scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n            scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n            scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))            \n            scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n            max_score = np.argmax(scores)\n            \n\n            if max_score == 0:\n                last_action = Action.SOUTH.name \n                lock_SOUTH = 1\n            if max_score == 1:\n                last_action = Action.NORTH.name \n                lock_NORTH = 1\n            if max_score == 2:\n                last_action = Action.EAST.name\n                lock_EAST = 1\n            if max_score == 3:\n                last_action = Action.WEST.name\n                lock_WEST = 1\n                \n        if lock_SOUTH == 0:\n            if last_action == Action.SOUTH.name:\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    last_action = Action.SOUTH.name \n                    lock_SOUTH = 1\n                if max_score == 1:\n                    last_action = Action.EAST.name\n                    lock_EAST = 1\n                if max_score == 2:\n                    last_action = Action.WEST.name\n                    lock_WEST = 1\n                \n        if lock_NORTH == 0:    \n            if last_action == Action.NORTH.name:\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    last_action = Action.NORTH.name\n                    lock_NORTH = 1\n                if max_score == 1:\n                    last_action = Action.EAST.name\n                    lock_EAST = 1\n                if max_score == 2:\n                    last_action = Action.WEST.name\n                    lock_WEST = 1\n                    \n        if lock_EAST == 0:            \n            if last_action == Action.EAST.name:\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))            \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    last_action =  Action.SOUTH.name \n                    lock_SOUTH = 1\n                if max_score == 1:\n                    last_action = Action.NORTH.name\n                    lock_NORTH = 1\n                if max_score == 2:\n                    last_action = Action.EAST.name\n                    lock_EAST = 1\n                    \n        if lock_WEST == 0:                        \n            if last_action == Action.WEST.name :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    last_action = Action.SOUTH.name\n                    lock_SOUTH = 1\n                if max_score == 1:\n                    last_action = Action.NORTH.name\n                    lock_NORTH = 1\n                if max_score == 2:\n                    last_action = Action.WEST.name \n                    lock_WEST = 1\n            \n    elif player_head == player_goose[1] + 1 :\n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))  \n        max_score = np.argmax(scores)\n\n        \n        if max_score == 0:\n            return Action.SOUTH.name \n        if max_score == 1:\n            return Action.NORTH.name \n        if max_score == 2:\n            return Action.EAST.name \n\n    elif player_head == player_goose[1] - 1 :\n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n        max_score = np.argmax(scores)\n\n        \n        if max_score == 0:\n            return Action.SOUTH.name \n        if max_score == 1:\n            return Action.NORTH.name \n        if max_score == 2:\n            return Action.WEST.name \n        \n    elif player_head == player_goose[1] - 11 :\n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))            \n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n        max_score = np.argmax(scores) \n        \n        if max_score == 0:\n            return Action.NORTH.name \n        if max_score == 1:\n            return Action.EAST.name \n        if max_score == 2:\n            return Action.WEST.name \n        \n    elif player_head == player_goose[1] + 11 :\n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))            \n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))            \n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST')) \n        max_score = np.argmax(scores) \n        \n        if max_score == 0:\n            return Action.SOUTH.name \n        if max_score == 1:\n            return Action.EAST.name \n        if max_score == 2:\n            return Action.WEST.name       \n\n    elif player_head == player_goose[1] - 11 * 6 :\n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST')) \n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))  \n        max_score = np.argmax(scores)\n\n        \n        if max_score == 0:\n            return Action.SOUTH.name \n        if max_score == 1:\n            return Action.EAST.name \n        if max_score == 2:\n            return Action.WEST.name \n    \n    elif player_head == player_goose[1] + 11 * 6 :\n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))\n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST')) \n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))  \n        max_score = np.argmax(scores)\n        \n        \n        if max_score == 0:\n            return Action.NORTH.name \n        if max_score == 1:\n            return Action.EAST.name \n        if max_score == 2:\n            return Action.WEST.name \n        \n    elif player_head == player_goose[1] - 11 :\n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))\n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST')) \n        max_score = np.argmax(scores)\n\n        \n        if max_score == 0:\n            return Action.SOUTH.name \n        if max_score == 1:\n            return Action.NORTH.name \n        if max_score == 2:\n            return Action.EAST.name \n    \n    elif player_head == player_goose[1] + 11 :\n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))\n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH')) \n        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))  \n        max_score = np.argmax(scores)\n\n        \n        if max_score == 0:\n            return Action.NORTH.name \n        if max_score == 1:\n            return Action.SOUTH.name \n        if max_score == 2:\n            return Action.WEST.name \n\n    return last_action","6d478a3d":"from kaggle_environments import make\nenv = make('hungry_geese',debug=True)\nprint(env.agents)","e63779f8":"env.run([my_agent,'greedy','greedy','greedy'])\nenv.render(mode='ipython')","06debe5b":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(my_agent, \"submission.py\")","d8f58b7d":"## Greedy Agent"}}