{"cell_type":{"493e9718":"code","e42d8a1e":"code","82427b2a":"code","f12c4168":"code","8b184ec8":"code","f59bfc6e":"code","aec1939e":"code","24609a1c":"code","6268824a":"code","83387311":"code","821ded6b":"code","dbdc33e6":"code","bec00785":"code","9c71482f":"code","a0fbb447":"code","8034a901":"code","a48ff318":"code","f7d78a50":"code","fefe7541":"code","dd666a05":"code","6353fc6e":"code","bf2188f2":"code","6beb82b1":"code","2de0dbe3":"code","da341ca3":"code","27c66e9f":"code","763b1d0a":"code","17758b75":"code","c043aa0c":"code","71825106":"code","9ffbf144":"code","db775744":"code","61272123":"code","09dffdd5":"code","18272bf8":"code","8d961fc1":"code","72d30aa9":"code","61ea2ccf":"code","cc1629df":"code","770032cc":"code","5dbdf5f6":"markdown","b11257fd":"markdown","aba94fd5":"markdown","bb11dad0":"markdown","e2ef17fc":"markdown","a20c9669":"markdown","7f0dc61d":"markdown","07263a66":"markdown"},"source":{"493e9718":"#Libraries\nimport os\nimport torch\nimport torchvision\nfrom torchvision.datasets.utils import download_url\nfrom torch.utils.data.dataloader import DataLoader\nfrom torchvision.datasets import ImageFolder\nimport torchvision.transforms as transforms\nfrom torch.utils.data import random_split\nfrom torchvision.utils import make_grid\nimport torchvision.models as models\nimport torch.nn as nn\nimport torch.nn.functional as F","e42d8a1e":"project_name='bird-species'","82427b2a":"# Look into the directory\ndata_dir = '..\/input\/100-bird-species'\nprint(os.listdir(data_dir))\nclasses = os.listdir(data_dir + \"\/train\")\nprint(classes[:10])\nprint(len(classes))","f12c4168":"# Data transforms (normalization & data augmentation)\ntransformations = transforms.Compose([\n                        transforms.Resize((128, 128)),\n                        transforms.ToTensor(),\n                       ])","8b184ec8":"# PyTorch datasets\ndataset = ImageFolder(data_dir+'\/train', transform=transformations)\ntest = ImageFolder(data_dir+'\/test', transform=transformations)\nvalid = ImageFolder(data_dir+'\/valid', transform=transformations)","f59bfc6e":"img, label = dataset[0]\nprint(img.shape, label)\nimg","aec1939e":"import matplotlib.pyplot as plt\n%matplotlib inline\n\ndef show_example(img, label):\n    print('Label: ', dataset.classes[label], \"(\"+str(label)+\")\")\n    plt.imshow(img.permute(1, 2, 0))\n","24609a1c":"img, label = dataset[0]\nshow_example(img, label)","6268824a":"show_example(*dataset[155])","83387311":"random_seed = 42\ntorch.manual_seed(random_seed);","821ded6b":"len(dataset)","dbdc33e6":"len(valid)","bec00785":"\nval_size = 1000\ntrain_size = len(dataset) - val_size\n\ntrain_ds, val_ds = random_split(dataset, [train_size, val_size])\nlen(train_ds), len(val_ds)","9c71482f":"batch_size= 32","a0fbb447":"# Pytorch Dataloaders\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=4, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=4, pin_memory=True)","8034a901":"def show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 6))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images, nrow=16).permute(1, 2, 0))\n        break\nshow_batch(train_dl)","a48ff318":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_acc']))","f7d78a50":"class ResNet(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet50(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 200)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))","fefe7541":"model = ResNet()\nmodel","dd666a05":"for images, labels in train_dl:\n    print('images.shape:', images.shape)\n    out = model(images)\n    print('out.shape:', out.shape)\n    print('out[0]:', out[0])\n    break","6353fc6e":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","bf2188f2":"device = get_default_device()\ndevice","6beb82b1":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device);","2de0dbe3":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history\n","da341ca3":"model = to_device(ResNet(), device)","27c66e9f":"evaluate(model, val_dl)\n","763b1d0a":"num_epochs = 5\nopt_func = torch.optim.Adam\nlr = 5.5e-5","17758b75":"history = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)\n","c043aa0c":"def plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');","71825106":"plot_accuracies(history)","9ffbf144":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","db775744":"plot_losses(history)","61272123":"test_dataset = ImageFolder(data_dir+'\/test', transform=transformations)","09dffdd5":"def predict_image(img, model):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    _, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return dataset.classes[preds[0].item()]\n","18272bf8":"img, label = test_dataset[0]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","8d961fc1":"img, label = test_dataset[100]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))\n","72d30aa9":"test_loader = DeviceDataLoader(DataLoader(test_dataset, batch_size*2), device)\nresult = evaluate(model, test_loader)\nresult","61ea2ccf":"!pip install jovian --upgrade -q","cc1629df":"import jovian","770032cc":"jovian.commit(project='bird-species', environment=None)","5dbdf5f6":"# Training the Model","b11257fd":"Residual Block\n![image.png](attachment:image.png)","aba94fd5":"# Explore Data","bb11dad0":"# Commit and upload the notebook\nAs a final step, we can save and commit our work using the jovian library.","e2ef17fc":"# Defining Model","a20c9669":"# Testing with individual images","7f0dc61d":"# Training and Validation Datasets","07263a66":"# Using a GPU"}}