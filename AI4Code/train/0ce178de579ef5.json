{"cell_type":{"5fee7584":"code","f319ebbe":"code","20b64bdc":"code","4df33e64":"code","919c588e":"markdown"},"source":{"5fee7584":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nfrom collections import OrderedDict\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport seaborn as sns\n# Any results you write to the current directory are saved as output.","f319ebbe":"classdic = OrderedDict([('CALsuburb', 9),#0\n                        ('PARoffice', 7),#1\n                        ('bedroom', 12),#2\n                        ('coast', 10),#3\n                        ('forest',4),#4\n                        ('highway', 14),#5\n                        ('industrial', 2),#6\n                        ('insidecity', 3),#7\n                        ('kitchen', 0),#8\n                        ('livingroom', 5),#9\n                        ('mountain', 8),#10\n                        ('opencountry', 6),#11\n                        ('store', 11),#12\n                        ('street', 1),#13\n                        ('tallbuilding', 13)])#14","20b64bdc":"from sklearn.metrics import confusion_matrix\n# ary = confusion_matrix(validation_generator.classes, predicted_classes)\nary = np.array([[30,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0],\n       [ 0, 21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n       [ 0,  0,  5,  0,  0,  0,  1,  0,  2,  9,  0,  0,  0,  0,  0],\n       [ 0,  0,  0, 39,  0,  3,  0,  0,  0,  0,  0,  5,  0,  0,  0],\n       [ 0,  0,  0,  0, 37,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0],\n       [ 0,  0,  0,  0,  0, 29,  0,  0,  1,  1,  0,  2,  1,  0,  0],\n       [ 1,  1,  1,  0,  0,  1, 23,  7,  2,  0,  0,  0,  6,  2,  1],\n       [ 0,  0,  0,  0,  0,  0,  0, 31,  0,  0,  0,  0,  2,  1,  1],\n       [ 0,  0,  0,  0,  0,  0,  0,  0, 20,  3,  0,  0,  1,  0,  0],\n       [ 0,  4,  3,  0,  0,  0,  1,  2,  5, 28,  0,  0,  3,  0,  0],\n       [ 0,  0,  0,  1,  1,  1,  0,  0,  0,  0, 63,  2,  0,  0,  0],\n       [ 0,  0,  0,  2,  0,  1,  0,  0,  0,  0,  6, 47,  0,  1,  0],\n       [ 0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  0, 31,  2,  0],\n       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0, 42,  0],\n       [ 0,  0,  1,  0,  0,  0,  2,  4,  0,  0,  0,  1,  0,  0, 45]])","4df33e64":"\ndf_cm = pd.DataFrame(ary, index = [ c for c in classdic.keys()],\n                  columns = [ c for c in classdic.keys()])\nplt.figure(figsize = (10,7))\nsns.heatmap(df_cm, annot=True)\n","919c588e":"**\u5be6\u5728\u662ftrain \u4e0d\u4e0a\u53bb\n\u6211\u597d\u60f3\u7761\u89ba \u770b\u770b\u54ea\u4e9b\u6bd4\u8f03\u5bb9\u6613\u6df7\u6dc6**"}}