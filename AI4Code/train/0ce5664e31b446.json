{"cell_type":{"023cc271":"code","83837c37":"code","fc5b67ce":"code","8b9e8afb":"code","300a1ade":"code","0b84a30c":"code","6ad91239":"code","577f3acb":"code","2e3097c0":"code","17f55f8b":"code","70596340":"code","2745b3b7":"code","20c24b73":"code","a64e9b2e":"code","935f7214":"code","d37a4a6d":"code","cf344f7c":"code","b8b0ca41":"code","a602fac0":"code","3fe0ebb9":"code","df20599e":"code","ec21186a":"code","786976d8":"code","2d10fd2a":"code","ed5a0df5":"code","6a5ca22a":"code","37d7b482":"code","5756d376":"code","aadb93f1":"code","a2501b1c":"code","5f0b8df6":"code","1a6151c1":"code","faac4aa1":"code","ae73e06d":"markdown","f0c9504e":"markdown","db0c4b0a":"markdown","c2b57c1d":"markdown","cb52dc8c":"markdown","aab75a3d":"markdown","9362f954":"markdown"},"source":{"023cc271":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","83837c37":"import matplotlib.pyplot as plt\ndata = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])\n\nfootball\n","fc5b67ce":"edu = pd.read_csv('\/kaggle\/input\/ict2020\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","8b9e8afb":"edu.head()","300a1ade":"edu.head(10)","0b84a30c":"edu.tail()","6ad91239":"edu.describe()","577f3acb":"edu['Value']","2e3097c0":"edu[10:14]","17f55f8b":"edu.iloc[90:94][['TIME','GEO']]","70596340":"edu[edu['Value'] > 6.5]","2745b3b7":"edu[edu[\"Value\"].isnull()].head()","20c24b73":"edu.max(axis = 0)","a64e9b2e":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","935f7214":"s = edu[\"Value\"]\/100\ns.head()","d37a4a6d":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","cf344f7c":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","b8b0ca41":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","a602fac0":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","3fe0ebb9":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","df20599e":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","ec21186a":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","786976d8":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","2d10fd2a":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","ed5a0df5":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","6a5ca22a":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","37d7b482":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","5756d376":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","aadb93f1":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","a2501b1c":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","5f0b8df6":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","1a6151c1":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","faac4aa1":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","ae73e06d":"- What happens if we give a number as argument to the method head()?\nIf we give a number as argument to the method head(), we can decide how many rows we can see. edu.head(h) shows the n first rows for example. ","f0c9504e":"- What does the method tail()return?\nThe method tail() shows just the last five rows. We can also give an argument to the method to chose what rows we want to see. \n","db0c4b0a":"- Which is the size of the edu DataFrame (rows x columns)?\n384 rows x 3 columns","c2b57c1d":"- What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?\nThe operation edu[edu['Value'] > 6.5] gives all the rows in which the value is over 6,5. If we add .tail(), we have only the 5 last rows (in which the vaule is over 6,5). \nThis is a DataFrame. ","cb52dc8c":"- What do you observe regarding the parameter ascending=False?\nWhen we use ascending=False country are ranked in the descending order. ","aab75a3d":"- Which measures does the result show? It seems that it shows some default values, can you guess which ones?\nThe result shows some statistical information on all the numeric columns in a DataFrame (here columns Time and Value). We have the number of value, the mean value, the standard deviation, the minimum, the first quartil, the median, the third quartil and the max. \nIn the column Value, we have only 361 values because we have NaN in some rows. \n","9362f954":"- What does this index return? What does the first index represent? And the second one?\nThis index returns a subset of columns (Time and Geo) and rows from the 90th to the 93th labels.This is not as the slice, it is the index labels as references, not the position.\nThe first index represents the rows that we want and the second index represents the columns. "}}