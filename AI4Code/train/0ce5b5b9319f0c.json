{"cell_type":{"5f4d5164":"code","95186511":"code","8232631c":"code","92b8bbf3":"code","038ac2f7":"code","48f2ca62":"code","0c618d5b":"code","fc43c2bb":"code","f2d1b047":"code","41c26871":"code","3b630c64":"code","2165f52d":"code","061ffc1c":"code","e7354478":"code","77ba7c69":"code","6c32f354":"code","dfdc7ec0":"code","071ff2b8":"code","ec60e565":"code","bbfff1eb":"code","06cefa3e":"code","99b520ff":"code","c36f4be7":"code","a565f56e":"code","d3a46562":"code","e53a005d":"code","c5ab025d":"code","66ec4bc1":"code","bd523a11":"code","e36cb005":"code","9be7a96a":"code","91be6271":"code","f1bd00a3":"code","f2b63c5b":"code","9f74e6c0":"code","916514a0":"code","062b4d86":"code","0acd0327":"code","dd1a3181":"code","c717747f":"code","612b2ceb":"code","6f7e3cdc":"code","e66b4e91":"code","68aa6040":"code","c522b16f":"code","f0475c04":"code","ed977cd3":"code","20e2df82":"code","d68eb083":"code","3e48ffff":"code","768d6a2a":"code","99f82bec":"code","c9c449e2":"code","b3aa3921":"code","f5fffc87":"code","f7af9813":"code","cfae5488":"code","ff79ebfa":"code","5c458d2d":"code","e3323740":"code","68e6b0fc":"code","bf398ee8":"code","d817f462":"code","e13a4779":"code","91be4063":"code","b60c1e97":"code","7b1c6c1a":"code","f738d416":"code","fe9cece5":"code","242be05c":"code","f74ffd84":"markdown","0dc22ccf":"markdown","6e9cba2c":"markdown","d0bb19a6":"markdown","e12473bc":"markdown","1757cb1b":"markdown","4317a99c":"markdown","5d7a798e":"markdown","6450a8f5":"markdown","698e8bbb":"markdown","8cc3aa48":"markdown","af8ac75b":"markdown","a83ea82f":"markdown","bece2374":"markdown","2ab18ac4":"markdown","cd96a62d":"markdown","a8a6c7cc":"markdown","e4b65e22":"markdown","28bd1ffb":"markdown","292cac85":"markdown","964c0421":"markdown","1526519b":"markdown","2ba75041":"markdown","1f69f720":"markdown","051ceb10":"markdown","5192cd5c":"markdown","4e878536":"markdown","1370661c":"markdown","8fcfcb5e":"markdown","b50a3066":"markdown","a3e4c93c":"markdown","d74010cd":"markdown","74699920":"markdown","c7c26d7e":"markdown","1ebf0757":"markdown","b98124ee":"markdown","50c8f91d":"markdown","685807db":"markdown","e28c2c60":"markdown","7c2b8a77":"markdown","851eee1c":"markdown","6214c68e":"markdown","6b0c97e1":"markdown","3e43b499":"markdown"},"source":{"5f4d5164":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","95186511":"import plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\nimport plotly.figure_factory as ff\nsns.set_style('darkgrid')\nfrom scipy.stats import probplot\n","8232631c":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","92b8bbf3":"test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","038ac2f7":"print(train.shape)\nprint(test.shape)","48f2ca62":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","0c618d5b":"train.head()","fc43c2bb":"percent_missing = train.isnull().sum() * 100 \/ len(train)\nmissing_value_df = pd.DataFrame({'column_name': train.columns,\n                                 'percent_missing': percent_missing})\nmissing_value_df.sort_values('percent_missing', inplace=True)\nmissing_value_df","f2d1b047":"fig = px.bar(missing_value_df, x='column_name', y='percent_missing',color='column_name')\nfig.show()","41c26871":"train.columns","3b630c64":"train.dtypes","2165f52d":"train._get_numeric_data().columns","061ffc1c":"train['MSSubClass'].unique()","e7354478":"sns.distplot(train['MSSubClass'], hist=False, rug=True);\n","77ba7c69":"train['LotFrontage'].unique()","6c32f354":"sns.distplot(train['LotFrontage'], hist=False, rug=True);\n","dfdc7ec0":"print(train['LotFrontage'].mean())\nprint(train['LotFrontage'].median())\n","071ff2b8":"fig = px.box(train, y=\"LotFrontage\", width=800, height=400)\nfig.show()","ec60e565":"train['LotFrontage'].fillna(train['LotFrontage'].median(),inplace=True)","bbfff1eb":"test['LotFrontage'].fillna(train['LotFrontage'].median(),inplace=True)","06cefa3e":"train['LotArea'].unique()","99b520ff":"sns.distplot(train['LotArea'], hist=False, rug=True);\n","c36f4be7":"fig = px.scatter(train, x=\"SalePrice\", y=\"LotArea\", width=800, height=400)\nfig.show()","a565f56e":"train['OverallQual'].unique()","d3a46562":"train['OverallQual'] = train['OverallQual'].astype('category')\n","e53a005d":"test['OverallQual'] = test['OverallQual'].astype('category')","c5ab025d":"train['OverallCond'].unique()","66ec4bc1":"train['OverallQual'] = train['OverallQual'].astype('category')\n","bd523a11":"test['OverallQual'] = test['OverallQual'].astype('category')","e36cb005":"train['YearBuilt'].unique()","9be7a96a":"sns.distplot(train['YearBuilt'], hist=False, rug=True);\n","91be6271":"train['Age_of_Building'] = train['YearBuilt'].apply(lambda x: 2020 - x)","f1bd00a3":"test['Age_of_Building'] = test['YearBuilt'].apply(lambda x: 2020 - x)","f2b63c5b":"sns.distplot(train['Age_of_Building'], hist=False, rug=True);\n","9f74e6c0":"fig = px.scatter(train, x=\"Age_of_Building\", y=\"SalePrice\", width=800, height=400)\nfig.show()","916514a0":"del train['YearBuilt']\ndel test['YearBuilt']","062b4d86":"train._get_numeric_data().columns","0acd0327":"def get_basic_desc_column(col_name):\n    print(train[col_name].unique())\n    print(sns.distplot(train[col_name], hist=False, rug=True))\n    fig = px.scatter(train, x=col_name, y=\"SalePrice\", width=800, height=400)\n    fig.show()","dd1a3181":"get_basic_desc_column('YearRemodAdd')","c717747f":"list_of_cols = ['MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',\n       'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea',\n       'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr',\n       'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt',\n       'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',\n       'MoSold', 'YrSold', 'SalePrice', 'Age_of_Building']","612b2ceb":"fig = px.scatter(train, x='GarageArea', y=\"SalePrice\", width=800, height=400)\nfig.show()","6f7e3cdc":"train = train[train['GarageArea']<=1220]","e66b4e91":"    fig = px.scatter(train, x='GrLivArea', y=\"SalePrice\", width=800, height=400)\n    fig.show()","68aa6040":"train = train[train['GrLivArea']<4000]","c522b16f":"fig = px.histogram(train, x=\"SalePrice\", nbins=100,width=800, height=400)\nfig.show()","f0475c04":"print('Mean - ' + str(train['SalePrice'].mean()))\nprint('Std - '+str(train['SalePrice'].std()))","ed977cd3":"\nx = np.random.normal(loc = train['SalePrice'].mean(), scale = train['SalePrice'].std(), size = (500))\n\nsns.distplot(x)\nsns.kdeplot(train['SalePrice'])","20e2df82":"probplot(train.SalePrice, dist=\"norm\", plot = plt)","d68eb083":"train[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n","3e48ffff":"probplot(train.SalePrice, dist=\"norm\", plot = plt)","768d6a2a":"percent_missing = train.isnull().sum() * 100 \/ len(train)\nmissing_value_df = pd.DataFrame({'column_name': train.columns,\n                                 'percent_missing': percent_missing})\nmissing_value_df.sort_values('percent_missing', inplace=True)\nmissing_value_df[missing_value_df['percent_missing']>0]","99f82bec":"percent_missing = test.isnull().sum() * 100 \/ len(train)\nmissing_value_df = pd.DataFrame({'column_name': test.columns,\n                                 'percent_missing': percent_missing})\nmissing_value_df.sort_values('percent_missing', inplace=True)\nmissing_value_df[missing_value_df['percent_missing']>0]","c9c449e2":"train['PoolQC'].fillna('None',inplace=True)\ntest['PoolQC'].fillna('None',inplace=True)","b3aa3921":"train['MiscFeature'].fillna('None',inplace=True)\ntest['MiscFeature'].fillna('None',inplace=True)","f5fffc87":"train['Alley'].fillna('None',inplace=True)\ntest['Alley'].fillna('None',inplace=True)","f7af9813":"train['Fence'].fillna('None',inplace=True)\ntest['Fence'].fillna('None',inplace=True)","cfae5488":"train['FireplaceQu'].fillna('None',inplace=True)\ntest['FireplaceQu'].fillna('None',inplace=True)","ff79ebfa":"train['GarageQual'].fillna('None',inplace=True)\ntest['GarageQual'].fillna('None',inplace=True)","5c458d2d":"train['GarageCond'].fillna('None',inplace=True)\ntest['GarageCond'].fillna('None',inplace=True)","e3323740":"f = ['GarageType','GarageFinish']\nfor i in f:\n    train[i].fillna('None',inplace=True)\n    test[i].fillna('None',inplace=True)\n","68e6b0fc":"train['GarageYrBlt'].fillna(0,inplace=True)\ntest['GarageYrBlt'].fillna(0,inplace=True)","bf398ee8":"train['BsmtFinSF2'].fillna(0,inplace=True)\ntest['BsmtFinSF2'].fillna(0,inplace=True)","d817f462":"train['BsmtExposure'].fillna('None',inplace=True)\ntest['BsmtExposure'].fillna('None',inplace=True)","e13a4779":"for col in ('BsmtQual', 'BsmtCond', 'BsmtFinType1','BsmtFinType2'):\n    train[col].fillna('None',inplace=True)\n    test[col].fillna('None',inplace=True)","91be4063":"train[\"MasVnrType\"] = train[\"MasVnrType\"].fillna(\"None\")\ntest[\"MasVnrType\"] = test[\"MasVnrType\"].fillna(\"None\")\n\ntrain[\"MasVnrArea\"] = train[\"MasVnrArea\"].fillna(0)\ntest[\"MasVnrArea\"] = test[\"MasVnrArea\"].fillna(0)","b60c1e97":"train['Electrical'] = train['Electrical'].fillna(train['Electrical'].mode()[0])\ntest['Electrical'] = test['Electrical'].fillna(train['Electrical'].mode()[0])\n","7b1c6c1a":"percent_missing = test.isnull().sum() * 100 \/ len(train)\nmissing_value_df = pd.DataFrame({'column_name': test.columns,\n                                 'percent_missing': percent_missing})\nmissing_value_df.sort_values('percent_missing', inplace=True)\nmissing_value_df[missing_value_df['percent_missing']>0]","f738d416":"test['MSZoning'] = test['MSZoning'].fillna(train['MSZoning'].mode()[0])\n","fe9cece5":"train = train.drop(['Utilities'], axis=1)\ntest = test.drop(['Utilities'], axis=1)\n","242be05c":"train[\"Functional\"] = train[\"Functional\"].fillna(\"Typ\")\n","f74ffd84":"Utilities - This feature had very little variation and almost no predictive power, hence we can drop it","0dc22ccf":"    The first step would be to find out percentage of missing values in the training set.\n    The EDA is going to first for numerical features followed by categorical features.\n    The Cleaning and Imputation for each feature will happen simulataneously.","6e9cba2c":"Fence","d0bb19a6":"LotArea: Lot size in square feet\n","e12473bc":"Alley","1757cb1b":"## **Exploratory Analysis & Data Cleaning**","4317a99c":"GarageYrBlt - For cases where houses don't have garages, the value will be 0","5d7a798e":"Missing values exlusively in test set","6450a8f5":"PoolQC : Description says NA means \"No Pool\".","698e8bbb":"To be continued","8cc3aa48":"YearBuilt","af8ac75b":"**Functional** - Default Value is Typ unless stated otherwise","a83ea82f":"Lets find % of missing values in each column","bece2374":"### Missing Values","2ab18ac4":"GarageType , GarageYrBlt\t","cd96a62d":"Log-transformation of the target variable\n\n","a8a6c7cc":"Target Variable - Sale Price","e4b65e22":"YearRemodAdd: Remodel date\n","28bd1ffb":"LotFrontage: Linear feet of street connected to property\n**","292cac85":"MSSubClass: The building class\n","964c0421":"MiscFeature","1526519b":"Data points after GrLivArea 4000 seem to be outliers, we can remove them","2ba75041":"* The 4 datapoints beyond 1220 Area seem to be outliers\n* We can go ahead and remove them","1f69f720":"Doing that for the Test dataset also","051ceb10":"OverallCond: Overall condition rating\n","5192cd5c":"The following columns have >15% missing values\n* PoolQC\n* Alley\n* Fireplace\n* Fence\n* Lot Frontage","4e878536":"GarageCond","1370661c":"* GarageArea\n* GrLivArea\n","8fcfcb5e":"Author - Mihir \n\nData Citations - \/kaggle\/input\/house-prices-advanced-regression-techniques\/ \n\nNotebook Citations - https:\/\/www.kaggle.com\/serigne\/stacked-regressions-top-4-on-leaderboard","b50a3066":"    LotFrontage as >15% missing values.\n    Lets look at Mean and Median values for LotFrontage\n","a3e4c93c":"The notebook covers \n\n* Data Exploration\n* Data Cleanining\n* Feature Engineering\n* Model building","d74010cd":"FireplaceQu","74699920":"GarageQual","c7c26d7e":"Electrical : Replace that with Mode","1ebf0757":"    Next we look at the probability plot\n    The probability plot is a graphical technique for assessing whether or not \n    a data set follows a given distribution such as the normal or Weibull. \n    The data are plotted against a theoretical distribution in such a way that the points should form approximately a straight line.","b98124ee":"OverallQual looks more of categorical variable. Hence we can just convert in to one.","50c8f91d":"Convert OverallCond to categorical ","685807db":"OverallQual: Overall material and finish quality\n","e28c2c60":"    As one can observe, there are outliers in LotFrontage.\n    This indicates we need to impute using the median of LotFrontage","7c2b8a77":"    Price vs Age of Building","851eee1c":"    Replace YearBuilt with feature 'Age_of_Building'\n    Age_of_Building = 2020 - YearBuilt","6214c68e":"Setup","6b0c97e1":"Imputation should be done using Train set because in real world scenario, we won't have a test set as scuh","3e43b499":"    Lets Focus on Area feature since we know the area size drives the property price"}}