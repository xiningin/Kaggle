{"cell_type":{"295fac35":"code","235cec9c":"code","04ad1129":"code","16fd9b66":"code","cb79c339":"code","60343be4":"code","889eddb3":"code","d64c850f":"code","a0f9f48c":"code","2623abb1":"code","74c9b696":"code","87a92291":"code","e8ebd58f":"code","628459bd":"code","91119618":"code","48e7f0c7":"code","5d99c639":"code","44dbc19c":"code","06c6240c":"code","a77abd79":"code","7c722fd7":"code","6ae8e1ee":"code","368d2e4f":"code","986b5a7f":"code","763007a6":"code","7c37fe49":"code","c0a7a983":"code","550aca6f":"code","5f95955b":"code","c052dd3c":"code","5929bb2c":"code","a2f51300":"code","ee4c9697":"code","5e88dad6":"code","f5d88356":"code","96fc7194":"code","e3469976":"code","335411a8":"code","6c9c2ca5":"code","c37ccff9":"code","6868bacb":"code","69ee8c6a":"code","104daf38":"code","661733a9":"code","30d7d03b":"code","83df592d":"code","84e15fc9":"code","fdbeaa91":"markdown","7d9b9b8d":"markdown","69d6f98d":"markdown","6ef2fbbc":"markdown","c52a8193":"markdown","7e748e56":"markdown","5dd52d52":"markdown","ba9af008":"markdown","a9d77bfc":"markdown","29931a15":"markdown","0fb9aa3a":"markdown","b5105080":"markdown","3662a10a":"markdown","57bc7e08":"markdown","c26bbcc0":"markdown","617ef894":"markdown","6e4afd6a":"markdown","c0b23e63":"markdown","a64d2747":"markdown","b4f6777f":"markdown","5bdb2409":"markdown","7d3ab8bf":"markdown","3c7b1dfc":"markdown","16cc8e4c":"markdown","2f2e03e4":"markdown","a88ff682":"markdown","b263b338":"markdown","911ce9f1":"markdown","75629b2f":"markdown","62e5e687":"markdown","b83923b7":"markdown","7c9aa086":"markdown","723b38e6":"markdown","3bbfd40e":"markdown","ce0d21f4":"markdown","be5cb321":"markdown","097d4bb3":"markdown","81eb1618":"markdown","c65e1b7b":"markdown","2e69ab6a":"markdown","7d9b009e":"markdown","4f4e281d":"markdown","9791e225":"markdown","953cd707":"markdown","8f44ecaa":"markdown","81830abb":"markdown","1c680d87":"markdown","5bb5747e":"markdown"},"source":{"295fac35":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","235cec9c":"#reading file\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","04ad1129":"#shows top 5 rows\ntrain.head()","16fd9b66":"test.head()","cb79c339":"#shows info\ntrain.info()","60343be4":"#info for test data\ntest.info()","889eddb3":"#this shows stats about dataset\ntrain.describe()","d64c850f":"test.describe()","a0f9f48c":"#this shows the shape(rows*columns) of dataset\ntrain.shape","2623abb1":"test.shape","74c9b696":"#This shows all the columns\ntrain.columns","87a92291":"#lets save and drop the ID column\n#Save the 'Id' column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n#Now drop the  'Id' colum since it's unnecessary for  the prediction process.\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)\n","e8ebd58f":"fig,ax  = plt.subplots(figsize= (8,5))\n\nax.scatter(train['GrLivArea'], train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","628459bd":"train = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)","91119618":"train['SalePrice'].describe()","48e7f0c7":"plt.hist(train['SalePrice'])","5d99c639":"sns.distplot(train['SalePrice'])","44dbc19c":"#we can even get mu and sigma values\nfrom scipy.stats import norm, skew\nsns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')","06c6240c":"#applying log transformation\ntrain['SalePrice'] = np.log(train['SalePrice'])\n\nsns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')","a77abd79":"#Correlation map to see how features are correlated with SalePrice\ncorrmat = train.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corrmat, vmax=0.9, square=True)","7c722fd7":"all_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))","6ae8e1ee":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na ==0].index).sort_values(ascending = False)\nall_data_na","368d2e4f":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","986b5a7f":"all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")","763007a6":"all_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")\n","7c37fe49":"all_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")\n","c0a7a983":"all_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")","550aca6f":"all_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")\n","5f95955b":"#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","c052dd3c":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')","5929bb2c":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)","a2f51300":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)","ee4c9697":"for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')","5e88dad6":"all_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)","f5d88356":"all_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])","96fc7194":"all_data = all_data.drop(['Utilities'], axis=1)","e3469976":"all_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")\n","335411a8":"all_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])","6c9c2ca5":"all_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])\n","c37ccff9":"all_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])","6868bacb":"all_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])","69ee8c6a":"all_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")","104daf38":"#MSSubClass=The building class\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","661733a9":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(all_data.shape))","30d7d03b":"# Adding total sqfootage feature \nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","83df592d":"all_data = pd.get_dummies(all_data)\nprint(all_data.shape)","84e15fc9":"ntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.SalePrice.values\ntrain = all_data[:ntrain]\ntest = all_data[ntrain:]\n","fdbeaa91":"lets fill\/Impute the missing values","7d9b9b8d":"some times removing outliers and missing values may effect ouur model badly. the solution is to use Models that are robust to Outliers and Impute missing values using Mean, Median and mode. mostly median plays safe.","69d6f98d":"Now you can see that the data of SalePrice is normally distributed. lets see the correlation matrix or heatmap.","6ef2fbbc":"you can see here that the Data is \n- **not normally distributed**\n- **postively skewed**\n- **has peakedness**","c52a8193":"apply log transformation, so that the values gets normally distributed","7e748e56":"label encoding the categorical values","5dd52d52":"This shows that it has **1459 rows and 80 columns**","ba9af008":"#### Adding one more important feature","a9d77bfc":"This shows that we have outliers at right bottom, lets remove them","29931a15":"### Feature engineering","0fb9aa3a":"### from here its time to build the model.","b5105080":"Alley : data description says NA means \"no alley access\"","3662a10a":"GarageYrBlt, GarageArea and GarageCars : Replacing missing data with 0 (Since No garage = no cars in such garage.)","57bc7e08":"Fence : data description says NA means \"no fence\"","c26bbcc0":"FireplaceQu : data description says NA means \"no fireplace\"","617ef894":"Since area related features are very important to determine house prices, we add one more feature which is the total area of basement, first and second floor areas of each house","6e4afd6a":"BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2 : For all these categorical basement-related features, NaN means that there is no basement.","c0b23e63":"This has 1459 rows and 80columns","a64d2747":"#### lets look for outliers and missing values","b4f6777f":"### statistics","5bdb2409":"At first sight, there are two red colored squares that get my attention. The first one refers to the 'TotalBsmtSF' and '1stFlrSF' variables, and the second one refers to the 'GarageX' variables. Both cases show how significant the correlation is between these variables. Actually, this correlation is so strong that it can indicate a situation of multicollinearity. If we think about these variables, we can conclude that they give almost the same information so multicollinearity really occurs.","7d3ab8bf":"LotFrontage : Since the area of each street connected to the house property most likely have a similar area to other houses in its neighborhood , we can fill in missing values by the median LotFrontage of the neighborhood.","3c7b1dfc":"#### Getting dummy categorical features","16cc8e4c":"lets turn numerical variables to categorical variables","2f2e03e4":"MasVnrArea and MasVnrType : NA most likely means no masonry veneer for these houses. We can fill 0 for the area and None for the type.","a88ff682":"PoolQC : data description says NA means \"No Pool\". That make sense, given the huge ratio of missing value (+99%) and majority of houses have no Pool at all in general.","b263b338":"Utilities : For this categorical feature all records are \"AllPub\", except for one \"NoSeWa\" and 2 NA . Since the house with 'NoSewa' is in the training set, this feature won't help in predictive modelling. We can then safely remove it.","911ce9f1":"Electrical : It has one NA value. Since this feature has mostly 'SBrkr', we can set that for the missing value.","75629b2f":"MiscFeature : data description says NA means \"no misc feature\"\n","62e5e687":"lets combine both test and train","b83923b7":"MSZoning (The general zoning classification) : 'RL' is by far the most common value. So we can fill in missing values with 'RL'","7c9aa086":"you can see that the minimum price is 34900 and max price is 755000. lets see howo the data is distributed","723b38e6":"GarageType, GarageFinish, GarageQual and GarageCond : Replacing missing data with None","3bbfd40e":"### Thank you for visiting my kernel. would love to here your suggestions.","ce0d21f4":"as our target variable is Sales price, lets expolore more about it","be5cb321":"### Data Preprocessing","097d4bb3":"Exterior1st and Exterior2nd : Again Both Exterior 1 & 2 have only one missing value. We will just substitute in the most common string\n","81eb1618":"this shows that it has **1460 rows and 81 columns**.","c65e1b7b":"KitchenQual: Only one NA value, and same as Electrical, we set 'TA' (which is the most frequent) for the missing value in KitchenQual.\n","2e69ab6a":"BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath : missing values are likely zero for having no basement","7d9b009e":"#### getting train and test sets","4f4e281d":"lets visualize them","9791e225":"SaleType : Fill in again with most frequent which is \"WD\"","953cd707":"It says that it has 1460 entries and has 81 columns. 43 has **object** datatype, 35 has **int** datatype,3 has **float** datatype of total memory 924KB","8f44ecaa":"### More feature engineering","81830abb":"This shows the **count,Mean,standarad deviation, min, max and Interquartile range** values of every column.","1c680d87":"MSSubClass : Na most likely means No building class. We can replace missing values with None","5bb5747e":"Functional : data description says NA means typical"}}