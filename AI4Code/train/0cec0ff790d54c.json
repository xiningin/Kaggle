{"cell_type":{"5b3e0be0":"code","4736f4ee":"code","ac557a2f":"code","157b6afe":"code","454de3e0":"code","9f0b66fc":"code","3f0a9874":"code","61ed051e":"code","be446272":"code","459f03f2":"code","2b4cdd45":"code","0433d2f2":"code","03498868":"code","901ab225":"code","26e91966":"code","e17b6d43":"markdown","d8227fbd":"markdown","8f6b63fa":"markdown","b655a9b9":"markdown","32a13744":"markdown","470beffd":"markdown","26e9aa11":"markdown","9b7a90c3":"markdown","60bbec6f":"markdown","f8f89a94":"markdown","63a0273e":"markdown","41668e0a":"markdown"},"source":{"5b3e0be0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\nfrom itertools import cycle\nimport datetime as dt\npd.set_option('max_columns', 50)\nplt.style.use('bmh')\ncolor_pal = plt.rcParams['axes.prop_cycle'].by_key()['color']\ncolor_cycle = cycle(plt.rcParams['axes.prop_cycle'].by_key()['color'])","4736f4ee":"!ls -GFlash --color ..\/input\/g-research-crypto-forecasting","ac557a2f":"train = pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv')\nasset = pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv')","157b6afe":"ax = asset.set_index('Asset_Name')['Weight'] \\\n    .sort_values(ascending=False) \\\n    .plot(kind='bar',\n          figsize=(12, 5),\n          color=color_pal[0]\n         )\nax.set_title('Asset Weight in Evaluation Metric', fontsize=18)\nax.set_xlabel('Asset Name')\nax.set_ylabel('Metric Weight')\nax.bar_label(ax.containers[0], fmt='%0.2f', color='white', padding=-12, fontsize=10)\nplt.xticks(rotation=45, ha='right')\nplt.show()","454de3e0":"asset_map = asset.set_index('Asset_ID')['Asset_Name'].to_dict()\nasset_count = train['Asset_ID'].value_counts() \\\n    .sort_values()\nasset_count.index = asset_count.index.map(asset_map)\nax = asset_count.plot(kind='barh',\n                 title='Count of Rows per Asset ID in Training Dataset',\n                 figsize=(12, 6),\n                color=color_pal[1])\nax.set_xlabel('Rows in Training Set')\nplt.show()","9f0b66fc":"train['Asset_Name'] = train['Asset_ID'].map(asset_map)\ntrain['datetime'] = pd.to_datetime(train['timestamp'], unit='s')","3f0a9874":"fig, axs = plt.subplots(5, 3,\n                        figsize=(15, 15),\n                       sharex=True)\naxs = axs.flatten()\ni = 0\nfor asn, d in train.sample(1_000_00, random_state=529).groupby('Asset_Name'):\n    d.set_index('datetime')['Open'] \\\n        .plot(color=next(color_cycle),\n              ax=axs[i],\n              title=asn)\n    i += 1\nfig.suptitle('Training Data Historic Prices', fontsize=25, y=0.95)\nplt.show()","61ed051e":"fig, axs = plt.subplots(5, 3,\n                        figsize=(15, 15),\n                       sharex=True)\naxs = axs.flatten()\ni = 0\nfor asn, d in train.sample(1_000_00, random_state=529).groupby('Asset_Name'):\n    d.set_index('datetime')['Volume'] \\\n        .plot(color=next(color_cycle),\n              ax=axs[i],\n              title=asn)\n    i += 1\nfig.suptitle('Training Data - Historic Trading Volume', fontsize=25, y=0.95)\nplt.show()","be446272":"fig, axs = plt.subplots(5, 3,\n                        figsize=(15, 15),\n                       sharex=True)\naxs = axs.flatten()\ni = 0\nfor asn, d in train.sample(1_000_00, random_state=529).groupby('Asset_Name'):\n    d.set_index('datetime')['VWAP'] \\\n        .plot(color=next(color_cycle),\n              ax=axs[i],\n              title=asn)\n    i += 1\nfig.suptitle('Training Data - Historic Trading Volume weighted average price for the minute.',\n             fontsize=25, y=0.95)\nplt.show()","459f03f2":"fig, axs = plt.subplots(5, 3,\n                        figsize=(15, 15))\naxs = axs.flatten()\ni = 0\nfor asn, d in train.sample(1_000_00, random_state=529).groupby('Asset_Name'):\n    d.set_index('datetime')['Volume'].apply(np.log) \\\n        .plot(color=next(color_cycle),\n              ax=axs[i],\n              kind='kde',\n              title=asn)\n    i += 1\nfig.suptitle('Training Data - Historic Trading Log(Volume)',\n             fontsize=25, y=0.95)\nplt.show()","2b4cdd45":"def time_series_features(df, dt_col='datetime', label=None):\n    \"\"\"\n    Creates time series features from datetime index.\n    \"\"\"\n    df = df.copy()\n    df['hour'] = df[dt_col].dt.hour\n    df['dayofweek'] = df[dt_col].dt.dayofweek\n    df['quarter'] = df[dt_col].dt.quarter\n    df['month'] = df[dt_col].dt.month\n    df['year'] = df[dt_col].dt.year\n    df['dayofyear'] = df[dt_col].dt.dayofyear\n    df['dayofmonth'] = df[dt_col].dt.day\n    df['weekofyear'] = df[dt_col].dt.isocalendar().week\n    return df\n\ntrain = time_series_features(train)","0433d2f2":"fig, axs = plt.subplots(5, 3,\n                        figsize=(15, 15), sharex=True)\naxs = axs.flatten()\ni = 0\nfor asn, d in train.query('year == 2021').sample(1_000_00, random_state=529).groupby('Asset_Name'):\n    sns.boxplot(data=d, x='month', y='VWAP', ax=axs[i])\n    axs[i].set_title(asn)\n    i += 1\nplt.tight_layout()\nplt.show()","03498868":"fig, axs = plt.subplots(5, 3,\n                        figsize=(15, 15),\n                       sharex=True)\naxs = axs.flatten()\ni = 0\nfor asn, d in train.sample(1_000_00, random_state=529).groupby('Asset_Name'):\n    d.set_index('datetime')['Target'] \\\n        .plot(color=next(color_cycle),\n              ax=axs[i],\n              title=asn)\n    i += 1\nfig.suptitle('Training Data - Target',\n             fontsize=25, y=0.95)\nplt.show()","901ab225":"train_subset = train.query('Asset_Name == \"Bitcoin\"') \\\n    .sample(1_000, random_state=529)\nax = sns.pairplot(train_subset,\n             hue='year',\n             vars=['Volume',\n                   'Count',\n                   'VWAP',\n                   'Target',\n                  ])","26e91966":"train_subset = train.query('Asset_Name == \"Ethereum\"') \\\n    .sample(1_000, random_state=529)\nax = sns.pairplot(train_subset,\n             hue='year',\n                  palette='Spectral',\n             vars=['Volume',\n                   'Count',\n                   'VWAP',\n                   'Target',\n                  ])","e17b6d43":"# Training Data And Assets\n\nFor most assets we are provided 19M rows of historical data. Some of the coins have less historical data.","d8227fbd":"# Coin Prices over Time\n- Lets take a look at some time trends.\n- We convert the timestamp column into datetime\n- Plot historic prices per coin.","8f6b63fa":"# Target for each Asset\n\nTarget is derived from log returns ( `Ra` ) over 15 minutes. We can visualize how the target is different over time for each asset.","b655a9b9":"## 2021 VWAP by Month","32a13744":"# What are we trying to predict?\n- We are trying to predict the prices of 14 \"assets\".\n- Each asset is given a different weight in the evaluation metric.\n- We are given historic prices by the minute: the start, end, max and min price.\n- Bitcoin predictions are the most important... Marker coins are the least.","470beffd":"# Predicting Crypto Prices\n\n![Dodge](https:\/\/d.newsweek.com\/en\/full\/1784128\/dogecoin.jpg?w=790&f=5c22adba14c4c3d31d31d006f7a4f669)\n\nThis is a starter notebook for the G-Research Crypto forecasting competition. It was created during a live coding session on twitch. Check it out here: https:\/\/www.twitch.tv\/medallionstallion_","26e9aa11":"# Time Series Trends.\n- How does the day of week, time of year, etc impact the trading value?\n- Does our target have time series trends?","9b7a90c3":"# Ethereum Features","60bbec6f":"## Read in the training data\nSome things of note:\n- The training data is ~2.7G\n- We are given supplimental data about the assets we are trying to predict.","f8f89a94":"## What is VWAP?\n\nPlotting VWAP vs the opening prices show they are very similar. VWAP is \"The volume weighted average price for the minute.\"","63a0273e":"# Bitcoin Features","41668e0a":"# TODO:\nStart a baseline Model"}}