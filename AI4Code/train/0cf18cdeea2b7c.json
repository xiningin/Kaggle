{"cell_type":{"8021c93e":"code","70af773a":"code","c3ad722f":"code","13c76ae2":"code","f6c192ca":"code","df64f9c7":"code","3c902beb":"code","a87e4733":"code","74388646":"code","733c2d4a":"code","2dc0293f":"code","2419d933":"code","f22b67ce":"code","80ff6906":"code","b627f832":"code","a8c56135":"code","4fe3b5d7":"code","fd56ecb1":"code","e7bd1536":"code","48012841":"markdown","53e933dd":"markdown","79d13633":"markdown","a488ea13":"markdown","0a6c7392":"markdown","8932f268":"markdown","fab926c5":"markdown","9fc4aa26":"markdown","e8fdb8f6":"markdown","32c7d265":"markdown","5796b2a4":"markdown","3620a576":"markdown","dc5f9821":"markdown","391901b8":"markdown","5a60845a":"markdown","ff9bba22":"markdown","61331c65":"markdown","2fcad277":"markdown","03bbe314":"markdown","96f706a2":"markdown"},"source":{"8021c93e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tqdm import tqdm_notebook as tqdm\n\nimport glob\nimport cv2\nimport os\n\nfrom colorama import Fore, Back, Style\n\n# Setting color palette.\nplt.rcdefaults()\nplt.style.use('dark_background')\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","70af773a":"# Assigning paths to variables\nINPUT_PATH = os.path.join('..', 'input')\nDATASET_PATH = os.path.join(INPUT_PATH, 'landmark-recognition-2020')\nTRAIN_IMAGE_PATH = os.path.join(DATASET_PATH, 'train')\nTEST_IMAGE_PATH = os.path.join(DATASET_PATH, 'test')\nTRAIN_CSV_PATH = os.path.join(DATASET_PATH, 'train.csv')\nSUBMISSION_CSV_PATH = os.path.join(DATASET_PATH, 'sample_submission.csv')","c3ad722f":"train = pd.read_csv(TRAIN_CSV_PATH)\nprint(\"training dataset has {} rows and {} columns\".format(train.shape[0],train.shape[1]))\n\nsubmission = pd.read_csv(SUBMISSION_CSV_PATH)\nprint(\"submission dataset has {} rows and {} columns \\n\".format(submission.shape[0],submission.shape[1]))","13c76ae2":"# understand folder structure\nprint(Fore.YELLOW + \"If you want to access image a40d00dc4fcc3a10, you should traverse as shown below:\\n\",Style.RESET_ALL)\n\nprint(Fore.GREEN + f\"Image name: {train['id'].iloc[9]}\\n\",Style.RESET_ALL)\n\nprint(Fore.BLUE + f\"First folder to look inside: {train['id'][9][0]}\")\nprint(Fore.BLUE + f\"Second folder to look inside: {train['id'][9][1]}\")\nprint(Fore.BLUE + f\"Second folder to look inside: {train['id'][9][2]}\",Style.RESET_ALL)","f6c192ca":"print(Fore.BLUE + f\"{'---'*20} \\n Mapping for Training Data \\n {'---'*20}\")\ndata_label_dict = {'image': [], 'target': []}\nfor i in tqdm(range(train.shape[0])):\n    data_label_dict['image'].append(\n        TRAIN_IMAGE_PATH + '\/' +\n        train['id'][i][0] + '\/' + \n        train['id'][i][1]+ '\/' +\n        train['id'][i][2]+ '\/' +\n        train['id'][i] + \".jpg\")\n    data_label_dict['target'].append(\n        train['landmark_id'][i])\n\n#Convert to dataframe\ntrain_pathlabel = pd.DataFrame(data_label_dict)\nprint(train_pathlabel.head())\n    \nprint(Fore.BLUE + f\"{'---'*20} \\n Mapping for Test Data \\n {'---'*20}\",Style.RESET_ALL)\ndata_label_dict = {'image': []}\nfor i in tqdm(range(submission.shape[0])):\n    data_label_dict['image'].append(\n        TEST_IMAGE_PATH + '\/' +\n        submission['id'][i][0] + '\/' + \n        submission['id'][i][1]+ '\/' +\n        submission['id'][i][2]+ '\/' +\n        submission['id'][i] + \".jpg\")\n\ntest_pathlabel = pd.DataFrame(data_label_dict)\nprint(test_pathlabel.head())","df64f9c7":"# list of unique landmark ids\ntrain.landmark_id.unique()","3c902beb":"# count of unique landmark_ids\nprint(\"There are\", train.landmark_id.nunique(), \"landmarks in the training dataset\")","a87e4733":"# each class count-wise\ntrain.landmark_id.value_counts()","74388646":"files = train_pathlabel.image[:10]\nprint(Fore.BLUE + \"Shape of files from training dataset\",Style.RESET_ALL)\nfor i in range(10):\n    im = cv2.imread(files[i])\n    print(im.shape)\n\n\nprint(\"------------------------------------\")    \nprint(\"------------------------------------\")    \nprint(\"------------------------------------\")    \n\nfiles = test_pathlabel.image[:10]\nprint(Fore.BLUE + \"Shape of files from test dataset\",Style.RESET_ALL)\nfor i in range(10):\n    im = cv2.imread(files[i])\n    print(im.shape)","733c2d4a":"plt.figure(figsize = (12, 8))\n\nsns.kdeplot(train['landmark_id'], color=\"yellow\",shade=True)\nplt.xlabel(\"LandMark IDs\")\nplt.ylabel(\"Probability Density\")\nplt.title('Class Distribution - Density plot')\n\nplt.show()","2dc0293f":"fig = plt.figure(figsize = (12,8))\n\ncount = train.landmark_id.value_counts().sort_values(ascending=False)[:10]\n\nsns.countplot(x=train.landmark_id,\n             order = train.landmark_id.value_counts().sort_values(ascending=False).iloc[:10].index)\n\nplt.xlabel(\"LandMark Id\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Top 10 Classes in the Dataset\")\n\nplt.show()","2419d933":"top6 = train.landmark_id.value_counts().sort_values(ascending=False)[:6].index\n\nimages = []\n\nfor i in range(6):\n    img=cv2.imread(train_pathlabel[train_pathlabel.target == top6[i]]['image'].values[1])   \n    images.append(img)\n\nf, ax = plt.subplots(3,2, figsize=(20,15))\nfor i, img in enumerate(images):        \n        ax[i\/\/2, i%2].imshow(img)\n        ax[i\/\/2, i%2].axis('off')","f22b67ce":"fig = plt.figure(figsize = (12,8))\n\ncount = train.landmark_id.value_counts().sort_values(ascending=False)[:50]\n\nsns.countplot(x=train.landmark_id,\n             order = train.landmark_id.value_counts().sort_values(ascending=False).iloc[:50].index)\n\nplt.xticks(rotation = 90)\n\nplt.xlabel(\"LandMark Id\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Top 50 Classes in the Dataset\")\n\nplt.show()","80ff6906":"top50 = train.landmark_id.value_counts().sort_values(ascending=False).index[:50]\n\nimages = []\n\nfor i in range(50):\n    img=cv2.imread(train_pathlabel[train_pathlabel.target == top50[i]]['image'].values[1])   \n    images.append(img)\n\nf, ax = plt.subplots(10,5, figsize=(20,15))\nfor i, img in enumerate(images):        \n        ax[i\/\/5, i%5].imshow(img)\n        ax[i\/\/5, i%5].axis('off')","b627f832":"fig = plt.figure(figsize = (10,6))\n\ncount = train.landmark_id.value_counts()[-10:]\n\nsns.countplot(x=train.landmark_id,\n             order = train_pathlabel.target.value_counts().iloc[-10:].index)\n\nplt.xlabel(\"LandMark Id\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Bottom 10 Classes in the Dataset\")\n\nplt.show()","a8c56135":"files = train_pathlabel.image[:4]\n\nfig = plt.figure(figsize = (20,9))\n\nfor i in range(4):\n    img=cv2.imread(files[i])   \n    plt.subplot(2,2,i+1)\n    plt.hist(img.ravel(), bins = 256,color = 'gold')\n    \nplt.suptitle(\"Histogram for Grayscale Images\",fontsize = 25)    \nplt.show()","4fe3b5d7":"fig = plt.figure(figsize = (20,9))\n\nfor i in range(4):\n    img=cv2.imread(files[i])   \n    plt.subplot(2,2,i+1)\n    plt.hist(img.ravel(), bins = 8, color = \"coral\")\n\nplt.suptitle(\"Cumulative Histogram for Grayscale Images - Bin Size = 8\",fontsize = 25)    \nplt.show()","fd56ecb1":"fig = plt.figure(figsize = (20,9))\n\nfor i in range(4):\n    img=cv2.imread(files[i])   \n    plt.subplot(2,2,i+1)\n    plt.hist(img.ravel(), bins = 256,color = 'magenta',cumulative = True)\n\nplt.suptitle(\"Cumulative Histogram for Grayscale Images\",fontsize = 25)    \nplt.show()","e7bd1536":"fig = plt.figure(figsize = (20,9))\n\nfor i in range(4):\n    img=cv2.imread(files[i])   \n    plt.subplot(2,2,i+1)\n    plt.hist(img.ravel(), bins = 256, color = 'orange', )\n    plt.hist(img[:, :, 0].ravel(), bins = 256, color = 'red', alpha = 0.5)\n    plt.hist(img[:, :, 1].ravel(), bins = 256, color = 'Green', alpha = 0.5)\n    plt.hist(img[:, :, 2].ravel(), bins = 256, color = 'Blue', alpha = 0.5)\n    plt.xlabel('Intensity Value')\n    plt.ylabel('Count')\n    plt.legend(['Total', 'Red_Channel', 'Green_Channel', 'Blue_Channel'])\n\nplt.suptitle(\"Color Histograms\",fontsize = 25)    \nplt.show()","48012841":"### Top 10 class categories","53e933dd":"Note that Landmark id '138982' has more than 6000 images, next top 9 clasess in this table have less than 2500 images\n","79d13633":"### Cumulative Histogram\n\nThe cumulative histogram is a special histogram that can be derived from the normal histogram. We find the counts of each intensity value from 0\u2013255 and then add each subsequent counts.","a488ea13":"### Density plot for class distribution ","0a6c7392":"### Histogram of Color Images\n\nIn color images, we have 3 color channels representing RGB. In Combined Color Histogram the intensity count is the sum of all three color channels.","8932f268":"### Chceck File sizes of first 10 files","fab926c5":"### Histogram of grayscale images\n* We will loaded the grayscale images here & generated its histogram\n* Since the images are stored in the form of a 2D ordered matrix we converted it to a 1D array using the ravel() method","9fc4aa26":"### Declare path variables","e8fdb8f6":"Observations from the whole analysis done above: \n*     There are 81313 unique landmark_ids \n*     There is only one landmark which has more than 6000 images\n*     Number of images per landmark_id ranges from 2 to 6272.","32c7d265":"### Load CSV files","5796b2a4":"### Histogram of grayscale images with bins = 8\n\nUsually, the range of intensity values of images is from [0\u2013255] in 8bits representation(2\u2078).\nBut images can be also represented using 2\u00b9\u2076, 2\u00b3\u00b2 bits and so on. In such cases the intensity range is high and it is hard to represent each intensity value in a histogram.\n\nWe use binning to overcome the above problem. Here we quantize the range into several buckets. For example,\nIf we quantize 0-255 into 8 bins, here our bins will be: 0-31, 32-63, 64-95, 96-127, 128-159, 160-191, 192-223, 224-255","3620a576":"## Google Landmark Recognition 2020","dc5f9821":"### Top 50 Class Categories","391901b8":"## Build dictionary to store image paths & labels","5a60845a":"Just 2 images per class for the bottom 10 classes","ff9bba22":"### Viewing some landmarks ","61331c65":"### Bottom 10 Class Categories","2fcad277":"### Folder Structure","03bbe314":"### Import required libraries","96f706a2":"## Exploratory Data Analysis"}}