{"cell_type":{"ba061d42":"code","81448fb0":"code","9bae2b68":"code","0ca8e567":"code","8af1c8ce":"code","077944fe":"code","9e46045f":"code","712a45e8":"code","fb12ab09":"code","a9a5488b":"code","fba13601":"code","86dc33ee":"code","ca8d8cc2":"code","b6326bb0":"code","3c3ba929":"code","702fa2c1":"code","80a1ca87":"code","5d2d43f6":"code","0598b618":"code","f7cc597a":"code","89af9259":"markdown"},"source":{"ba061d42":"import numpy as np\nimport pandas as pd\n\nfrom category_encoders import CountEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\n\nfrom tqdm.notebook import tqdm\nfrom xgboost import XGBRegressor","81448fb0":"# \u30e1\u30a4\u30f3\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u898b\u307e\u3059\ndf_train = pd.read_csv('\/kaggle\/input\/data-science-summer2-osaka\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/data-science-summer2-osaka\/test.csv')","9bae2b68":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u305d\u308c\u305e\u308c\u306e\u884c\u6570\u3068\u5217\u6570\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_train.shape, df_test.shape","0ca8e567":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5148\u982d\uff15\u884c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_train.head()","8af1c8ce":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5148\u982d\uff15\u884c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test.head()","077944fe":"# \u8aac\u660e\u5909\u6570\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u306b\u5206\u5272\u3057\u3066\u304a\u304d\u307e\u3059\ny_train = df_train.Score\nX_train = df_train.drop(['Score'], axis=1)\nX_test = df_test.copy()","9e46045f":"# dtype\u304cobject\uff08\u6570\u5024\u3067\u306a\u3044\u3082\u306e\uff09\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306f5000\u884c\u306a\u306e\u3067\u3001Name\u306f\u5b8c\u5168\u30e6\u30cb\u30fc\u30af\n# \u610f\u5916\u3068English\/Japanese name\u306f\u30e6\u30cb\u30fc\u30af\u3067\u306f\u306a\u304f\u540c\u3058\u3082\u306e\u304c\u7e70\u308a\u8fd4\u3057\u767b\u5834\u3057\u3066\u3044\u308b\u4f8b\u304c\u3042\u308b\u3002\u30b7\u30ea\u30fc\u30ba\u3082\u306e\uff1f\n# Genres\u3068Aired\u306f\u305d\u308c\u305e\u308c\u4e2d\u8eab\u304c\u8907\u5408\u5316\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u306bhigh cardinality\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3088\u3046\u3060\u3002\n# Genres\u306f\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u9805\u76ee\u304c\u5217\u6319\u3055\u308c\u3066\u304a\u308a\u3001\u5206\u89e3\u3057\u305f\u304f\u306a\u308b\u3002\n# Aired\u306f\u30b9\u30bf\u30fc\u30c8\u3068\u30a8\u30f3\u30c9\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u3053\u308c\u3082\u5206\u5272\u3059\u3079\u304d\u3067\u3057\u3087\u3046\u3002\n\ncats = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train[col].nunique())","712a45e8":"# Genres\u306e\u5206\u5272\u3067\u3059\u304c\u3001TFIDF\u3092\u7528\u3044\u3066\u30ab\u30a6\u30f3\u30c8\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\ntfidf = TfidfVectorizer(max_features=1000, use_idf=False, )\n\nTXT_train_enc = tfidf.fit_transform(X_train.Genres)\nTXT_test_enc = tfidf.transform(X_test.Genres)\n\nX_train.drop(['Genres'], axis=1, inplace=True)\nX_test.drop(['Genres'], axis=1, inplace=True)","fb12ab09":"tfidf.vocabulary_","a9a5488b":"# sparse matrix\u3067\u8fd4\u3063\u3066\u304d\u307e\u3059\n# \u4eca\u56de\u306f\u30ab\u30e9\u30e0\u6570\u304c\u5c11\u306a\u3044\u3067\u3059\u304c\u3001\u4e00\u822c\u306b\u306f\u304b\u306a\u308a\u30ef\u30a4\u30c9\u306b\u306a\u308b\u306e\u3067\u30e1\u30e2\u30ea\u52b9\u7387\u4e0a\u5927\u4e8b\u3067\u3059\u306d\u3002\nTXT_train_enc","fba13601":"# \u5bc6\u884c\u5217\u306b\u5909\u63db\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u306d\u3002\nTXT_train_enc.todense()","86dc33ee":"# \u4eca\u56de\u306f\u5217\u6570\u5c11\u306a\u3044\u306e\u3067\u5bc6\u884c\u5217\u306b\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n# \u758e\u884c\u5217\u306e\u307e\u307e\u5b66\u7fd2\u5668\u306b\u5165\u308c\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\nTXT_train_enc = TXT_train_enc.todense()\nTXT_test_enc = TXT_test_enc.todense()","ca8d8cc2":"# Aired\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3053\u3067\u306f\u671f\u9593\u306e\u59cb\u307e\u308a\uff1f\u3060\u3051\u53d6\u308a\u51fa\u3057\u3066\u305d\u308c\u304c\u3069\u308c\u3060\u3051\u4ee5\u524d\u304b\u3092\u53d6\u308a\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\n# \u3082\u3063\u3068\u8272\u3005\u826f\u3044\u5de5\u592b\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\ndef aired_datetime(air):\n    try:\n        d = pd.to_datetime('2021-08-01') - pd.to_datetime(air.split(' to ')[0])\n        d \/= pd.Timedelta('1d')\n    except:\n        d = -9999\n    return d","b6326bb0":"# \u5909\u63db\u3057\u307e\u3059\nX_train['Aired'] = X_train['Aired'].apply(aired_datetime)\nX_test['Aired'] = X_test['Aired'].apply(aired_datetime)","3c3ba929":"# \u305d\u306e\u4ed6\u306b\u3082\u8272\u3005\u3084\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3082\u3046\u4e00\u62ec\u3057\u3066\u30a8\u30a4\u30e4\u3067Count Encoding\u3057\u3066\u3057\u307e\u3044\u307e\u3059\ncats = []\n\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \nce = CountEncoder(cols=cats)\n\nX_train = ce.fit_transform(X_train)\nX_test = ce.transform(X_test)","702fa2c1":"#\u3000\u3071\u3063\u3068\u308f\u304b\u308b\u4e0d\u8981\u30ab\u30e9\u30e0\u306f\u9664\u3044\u3066\u304a\u304d\u307e\u3059\nX_train.drop(['MAL_ID', 'Name'], axis=1, inplace=True)\nX_test.drop(['MAL_ID', 'Name'], axis=1, inplace=True)","80a1ca87":"# # \u5148\u307b\u3069\u51e6\u7406\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u30ab\u30e9\u30e0\u3068\u7d50\u5408\u3057\u307e\u3059\n# X_train = np.concatenate([X_train.values, TXT_train_enc], axis=1)\n# X_test = np.concatenate([X_test.values, TXT_test_enc], axis=1)","5d2d43f6":"# TFIDF\u3092\u7528\u3044\u3066\u30ab\u30a6\u30f3\u30c8\u5206\u5272\u3057\u305fGenres\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u5909\u63db\ndf_TXT_train_enc = pd.DataFrame(TXT_train_enc)","0598b618":"#\u3000Score\u3068\u306e\u76f8\u95a2\u3092\u307f\u305f\u3044\u306e\u3067\u4e00\u6c17\u306b\u7d50\u5408\nX_train_corr = pd.concat([y_train, X_train, df_TXT_train_enc], axis=1)\nX_train_corr.sample(3)","f7cc597a":"X_train_corr.corr().style.background_gradient(cmap = \"bwr\", vmin = -1, vmax = 1, axis = None)","89af9259":"# \u76f8\u95a2\u95a2\u4fc2\u3092\u76f8\u95a2\u4fc2\u6570\u542b\u3081\u3066\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3067\u8868\u793a\n# \u5c71\u672c\u5148\u751f\u304b\u30898\/26\u306e\u4e2d\u9593\u5831\u544a\u4f1a\u3067\u3001\u300c\u3053\u306e\u7a0b\u5ea6\u306e\u7279\u5fb4\u91cf\u6570\u3067\u3042\u308c\u3070\u3001\u7279\u5fb4\u91cf\u306e\u524a\u6e1b\u306b\u52b4\u529b\u3092\u5272\u304f\u3088\u308a\u3001\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u306b\u6ce8\u76ee\u3059\u308b\u65b9\u304c\u826f\u3044\u300d\u3068\u306e\u30a2\u30c9\u30d0\u30a4\u30b9\u304c\u3042\u308a\u307e\u3057\u305f\u3002"}}