{"cell_type":{"9299d147":"code","0e9ba252":"code","a4adccee":"code","21cba333":"code","d0b141dc":"code","94bc399e":"code","f32b7749":"code","947bd0d0":"code","11c1af34":"code","4b23f23c":"code","0c2e3f92":"code","83c3040b":"code","cd5155de":"markdown","6580f419":"markdown","1d4975cf":"markdown","aed6319c":"markdown","eaf5e2cd":"markdown","0a676b5d":"markdown","78e7dcbc":"markdown"},"source":{"9299d147":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e9ba252":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","a4adccee":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","21cba333":"print(list(train_data))\n\ntrain_data_manip = train_data.copy(deep=True)","d0b141dc":"sex_mapping={'male': 0, 'female': 1}\ntrain_data_manip['Sex']=train_data_manip['Sex'].map(sex_mapping)\nprint(train_data_manip['Sex'])","94bc399e":"embarked_mapping={'S': 0, 'C': 1, 'Q': 2}\ntrain_data_manip['Embarked']=train_data_manip['Embarked'].fillna('S')\ntrain_data_manip['Embarked']=train_data_manip['Embarked'].map(embarked_mapping)\nprint(train_data_manip['Embarked'])","f32b7749":"cabin_mapping={'A': 0, 'B': 1, 'C': 2, 'D':3,'E':4,'F':5,'G':6,'T':7}\n\ntrain_data_manip['Cabin']=train_data_manip['Cabin'].fillna('T')\ntrain_data_manip['Cabin']=train_data_manip['Cabin'].str.slice(0,1).map(cabin_mapping)\nprint(train_data_manip['Cabin'])","947bd0d0":"train_data_manip.loc[train_data_manip.Age<11, 'Age'] = 0\ntrain_data_manip.loc[(train_data_manip.Age>=11) & (train_data_manip.Age<25), 'Age'] = 1\ntrain_data_manip.loc[(train_data_manip.Age>=25) & (train_data_manip.Age<45), 'Age'] = 2\ntrain_data_manip.loc[(train_data_manip.Age>=45) & (train_data_manip.Age<60), 'Age'] = 3\ntrain_data_manip.loc[(train_data_manip.Age>=60), 'Age'] = 4\nprint(train_data_manip['Age'])","11c1af34":"train_data_m=train_data_manip.dropna()\n\nX = train_data_m[[\"Pclass\",\"Sex\",\"Age\",\"Fare\",\"Cabin\",\"Embarked\"]].values\ny = train_data_m[[\"Survived\"]].values\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4)","4b23f23c":"model=RandomForestClassifier()\nmodel.fit(X,y)\ny_pred = model.predict(X_test)\nacc_random_forest = round(model.score(X, y)*100, 2)\nprint(acc_random_forest)","0c2e3f92":"test_data_manip = test_data.copy(deep=True)\ntest_data_manip['Sex']=test_data_manip['Sex'].map(sex_mapping)\ntest_data_manip['Embarked']=test_data_manip['Embarked'].fillna('S')\ntest_data_manip['Embarked']=test_data_manip['Embarked'].map(embarked_mapping)\ntest_data_manip['Cabin']=test_data_manip['Cabin'].fillna('T')\ntest_data_manip['Cabin']=test_data_manip['Cabin'].str.slice(0,1).map(cabin_mapping)\nmean_age=test_data_manip['Age'].mean()\ntest_data_manip['Age'] = test_data_manip['Age'].fillna(mean_age)\ntest_data_manip.loc[test_data_manip.Age<11, 'Age'] = 0\ntest_data_manip.loc[(test_data_manip.Age>=11) & (test_data_manip.Age<25), 'Age'] = 1\ntest_data_manip.loc[(test_data_manip.Age>=25) & (test_data_manip.Age<45), 'Age'] = 2\ntest_data_manip.loc[(test_data_manip.Age>=45) & (test_data_manip.Age<60), 'Age'] = 3\ntest_data_manip.loc[(test_data_manip.Age>=60), 'Age'] = 4\nmean_fare=test_data_manip['Fare'].mean()\ntest_data_manip['Fare'] = test_data_manip['Fare'].fillna(mean_fare)\n\nSex_nulos=test_data_manip['Sex'].isnull().values.any()\nprint('Sex '+str(Sex_nulos))\nPclass_nulos=test_data_manip['Pclass'].isnull().values.any()\nprint('Pclass '+str(Pclass_nulos))\nEmbarked_nulos=test_data_manip['Embarked'].isnull().values.any()\nprint('Embarked '+str(Embarked_nulos))\nCabin_nulos=test_data_manip['Cabin'].isnull().values.any()\nprint('Cabin '+str(Cabin_nulos))\nAge_nulos=test_data_manip['Age'].isnull().values.any()\nprint('Age '+str(Age_nulos))\nFare_nulos=test_data_manip['Fare'].isnull().values.any()\nprint('Fare '+str(Fare_nulos))\n\n\nprint(test_data_manip)\nprint(test_data_manip.shape)","83c3040b":"X_test_sub = test_data_manip[[\"Pclass\",\"Sex\",\"Age\",\"Fare\",\"Cabin\",\"Embarked\"]].values\n\ny_pred = model.predict(X_test_sub)\n\noutput = pd.DataFrame({'PassengerId': test_data_manip.PassengerId, 'Survived': y_pred})\nprint(output)\n\noutput.to_csv('my_submission_v11.csv', index=False)\nprint(\"Your submission was successfully saved!\")","cd5155de":"Embarked","6580f419":"I give the same treatment to the test data file.\n\nI'm not sure if I have to do this. But for me seams to be coherent convert data the same way I did for the training data file.","1d4975cf":"Choosing features","aed6319c":"Cabin","eaf5e2cd":"sex","0a676b5d":"This is my first job (not my first version) and I got an accuracy of 94.12%. But when I submit for competition, my score is 0.75119. It's even under the score given by the tutorial.\nSo, Am I overfitting?\n\nI'm going to change the split to try to avoid the overfitting.","78e7dcbc":"Ages"}}