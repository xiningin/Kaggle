{"cell_type":{"dc8ec48d":"code","d3dd63f8":"code","2ad98237":"code","4cd33698":"code","6827c487":"code","ca6df5c4":"code","55cb23e7":"code","1a19ec85":"code","8b2fc918":"code","6f009749":"code","5fe6b67e":"code","28456c2e":"code","4d2ee5bf":"code","80cdf1ef":"code","58ea4465":"code","209be9e0":"code","9e077482":"code","2c19dba0":"code","56184a03":"markdown","7c343ea6":"markdown","ffdef751":"markdown","dc897d5b":"markdown"},"source":{"dc8ec48d":"# params = {'max_depth': [5,7,8,9,10],\n#         'min_child_weight': [1, 5, 10],\n#         'gamma': [0.5, 1, 1.5, 2, 5],\n#         'subsample': [0.6, 0.8, 1.0],\n#         'colsample_bytree': [0.6, 0.8, 1.0],\n#         'max_delta_step': [3, 4, 5, 6],\n#         #'min_child_weight': [2.8189, 1.5, 3,4]\n#         }\n        \n# xgb_grid = xgb.XGBClassifier(learning_rate=0.01, n_estimators=5000, objective='binary:logistic', silent=True, nthread=1)\n\n# folds = 5\n# param_comb = 7\n# skf = StratifiedKFold(n_splits=folds, shuffle = True, random_state = 1004)\n\n# random_search = RandomizedSearchCV(xgb_grid, param_distributions=params, n_iter=param_comb, scoring='roc_auc', n_jobs=4\n#                                    , cv=skf.split(df_train_x,df_train_y), verbose=3, random_state=1004)\n\n# random_search.fit(df_train_x,df_train_y)","d3dd63f8":"# print('\\n All results:' + random_search.cv_results_)\n# print('\\n Best estimator:' + random_search.best_estimator_)\n# print('\\n Best normalized gini score for %d-fold search with %d parameter combinations:' % (folds, param_comb))\n# print(random_search.best_score_ * 2 - 1)\n\n# print('\\n Best hyperparameters:')\n# print(random_search.best_params_)\n# results = pd.DataFrame(random_search.cv_results_)\n# results.to_csv('grid-search-results.csv', index=False)","2ad98237":"import seaborn as sns\nimport sys\nimport csv\nimport datetime\nimport operator\nimport joblib\nimport warnings\nwarnings.simplefilter('ignore')\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import scale\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import precision_recall_fscore_support\nfrom sklearn.metrics import accuracy_score\nfrom statsmodels.formula.api import ols\nfrom sklearn.metrics import cohen_kappa_score\nfrom collections import OrderedDict\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom scipy.stats import norm, skew, probplot\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom category_encoders.target_encoder import TargetEncoder\nfrom sklearn.model_selection import StratifiedKFold","4cd33698":"df_train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/test.csv')","6827c487":"# 7:3\uc73c\ub85c \uc81c\uacf5\ub41c train data\ub97c train\uacfc validation data\ub85c \uad6c\ubd84\n\nfrom sklearn.model_selection import train_test_split\n\nrandom_state_val =42\ntest_size_val =0.3\ntrain,validation = train_test_split(df_train, test_size = test_size_val, random_state = random_state_val)","ca6df5c4":"y_nm = 'target'\n\ndf_train_x = train.drop(y_nm, axis = 1)\ndf_train_y = pd.DataFrame(train[y_nm])\n\ndf_val_x = validation.drop(y_nm, axis = 1)\ndf_val_y = pd.DataFrame(validation[y_nm])\n\ndf_test_x = df_test","55cb23e7":"# numeric data\uc640 char\nnum_cols = [col for col in df_train_x.columns if df_train_x[col].dtype in [\"float16\",\"float32\",\"float64\"]]\ncat_cols = [col for col in df_train_x.columns if df_train_x[col].dtype not in [\"float16\",\"float32\",\"float64\"]]","1a19ec85":"# categorical data type data\uc5d0 \ub300\ud558\uc5ec target encoding\uc744 \uc0ac\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4.\n# Proceed with TargetEncoding for data of the categorical data type.\n\ny = train[\"target\"].copy()\n\nfor cols in cat_cols:\n    enc = TargetEncoder(cols=[cols])\n    df_train_x = enc.fit_transform(df_train_x, y)\n    df_val_x = enc.transform(df_val_x)\n    df_test_x = enc.transform(df_test_x)","8b2fc918":"scaler = QuantileTransformer()\nscaler.fit(df_train_x)\ndf_train_x = pd.DataFrame(scaler.transform(df_train_x))\ndf_val_x = pd.DataFrame(scaler.transform(df_val_x))\ndf_test_x = pd.DataFrame(scaler.transform(df_test_x))","6f009749":"XGBClassifier = xgb.XGBClassifier(max_depth = 5,\n                                 learning_rate = 0.007,\n                                 n_estimators = 7000,\n                                 objective = 'binary:logistic',\n                                 booster = 'gbtree',\n                                 gamma = 1.5,\n                                 max_delta_step = 3,\n                                 min_child_weight = 10,\n                                 subsample = 0.6,\n                                 colsample_bytree = 0.8,\n                                 n_jobs = -1\n                                 )","5fe6b67e":"start = datetime.datetime.now()\nxgb = XGBClassifier.fit(df_train_x.values,\n                       df_train_y.values.ravel(),\n                       eval_set = [(df_train_x.values, df_train_y), (df_val_x.values, df_val_y)], \n                       eval_metric = 'auc',\n                       early_stopping_rounds = 15,\n                       verbose = True)\nend = datetime.datetime.now()\nend-start","28456c2e":"fi_vals = xgb.get_booster().get_score(importance_type = 'weight')\nfi_dict = {df_train_x.columns[i]:float(fi_vals.get('f'+str(i),0.)) for i in range(len(df_train_x.columns))}\nfeature_importance_ = sorted(fi_dict.items(), key=operator.itemgetter(1), reverse=True)\nfeature_importance_result = OrderedDict(feature_importance_)\n\nimportance = pd.DataFrame(feature_importance_)\nimportance.columns = ['feature','weight']\nimportance.head(10)","4d2ee5bf":"importance_ten = importance[:10]\nimportance_ten.set_index('feature').sort_values(by='weight').plot(kind='barh', figsize=(5, 5))","80cdf1ef":"fpr, tpr, _ = roc_curve(df_val_y, xgb.predict_proba(df_val_x.values)[:, 1])\nroc_auc = auc(fpr, tpr)\n\nresult_lst =[]\nmax_roc_auc =0.\nopt_threshold =0.\nval_y_prob = xgb.predict_proba(df_val_x.values)[:, 1]\n\nfor n in range(0,50):\n    threshold = round(((n+1)*0.01),2)\n    pred_yn = val_y_prob.copy()\n    pred_yn = np.where(pred_yn > threshold, 1., 0.)\n    \n    result_dict = {}\n    precision, recall, f1_score, support = precision_recall_fscore_support(df_val_y.values.ravel(), pred_yn, average='binary')\n    accuracy = accuracy_score(df_val_y.values.ravel(), pred_yn)\n    kappa = cohen_kappa_score(df_val_y.values.ravel(), pred_yn)\n    \n    result_dict ={'Threshold': threshold, 'Accuracy': round(accuracy,4), 'Precision': round(precision,4), 'Recall': round(recall,4), 'F1_Score': round(f1_score,4),'roc_auc': round(roc_auc,4), 'Kappa': round(kappa,4)}\n    result_lst.append(result_dict)\n    \n    if max_roc_auc <= roc_auc:\n        max_roc_auc = roc_auc\n        opt_threshold = threshold\n        \n    confMat = confusion_matrix(df_val_y.values.ravel(), pred_yn, labels=[1,0])\n    \nmatric_df = pd.DataFrame(result_lst, columns=['Threshold','Accuracy', 'Precision', 'Recall', 'F1_Score','roc_auc' ,'Kappa'])\nmatric_df.to_csv('REC_scores.csv',sep=',', header=True, index=False, encoding='UTF-8')\n\nprint('Max roc_auc =%f, optimized_threshold=%f'%(max_roc_auc, opt_threshold))\nprint('Complete')","58ea4465":"predict_xgb = xgb.predict_proba(df_train_x.values)[:,1]\npred_train = np.where(predict_xgb > opt_threshold, 1., 0.)\n\ntp, fn, fp, tn = confusion_matrix(df_train_y.values.ravel(), pred_train, labels=[1,0]).ravel()\n\nconf_matrix = pd.DataFrame(\n    confusion_matrix(df_train_y.values.ravel(), pred_train),\n    columns=['Predicted Value 0', 'Predicted Value 1'],\n    index=['True Value 0', 'True Value 1']\n)\n\nprint(\"1. Counfusion Matrix\")\nprint(conf_matrix.T)\nprint(\"\")\n\nprint(\"2. Classification Report\")\nprint(classification_report(df_train_y.values.ravel(), pred_train))","209be9e0":"from sklearn.metrics import roc_curve, auc\nfpr, tpr, _ = roc_curve(df_train_y.values.ravel(), predict_xgb)\n\nimport matplotlib.pyplot as plt\nroc_auc = auc(fpr, tpr)\n\n# Plot of a ROC curve for a specific class\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', label='ROC curve (area = %0.3f)' % roc_auc)\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.legend(loc=\"lower right\")\nplt.show()","9e077482":"Accuracy_Rate = (tp + tn) \/ (tp + tn + fp + fn)\nRecall_Rate = tp \/ (tp + fn)\nPrecision_Rate = tp \/ (tp + fp)\nSpecificity_Rate = tn \/ (tn + fp)\nF1_Score = (Precision_Rate * Recall_Rate) \/ (Precision_Rate + Recall_Rate) * 2\n\nprint(\"3. Model Metric Sumamry\")\nprint(\" - Accuracy Rate    : {:2.3f} %\".format(Accuracy_Rate*100))\nprint(\" - Recall Rate      : {:2.3f} %\".format(Recall_Rate*100))\nprint(\" - Precision Rate   : {:2.3f} %\".format(Precision_Rate*100))\nprint(\" - Specificity Rate : {:2.3f} %\".format(Specificity_Rate*100))\nprint(\" - F1 Score         : {:2.3f} \".format(F1_Score*100))\nprint(\" - ROC AUC          : {:2.3f} \".format(roc_auc*100))","2c19dba0":"pred_test = xgb.predict_proba(df_test_x.values)[:,1]\n\ntest_result= pd.DataFrame(pred_test)\ntest_result.columns = ['target']\npredict = test_result['target']\nId_No = df_test['id']\nsubmission = pd.DataFrame({'id': Id_No, 'target': predict})\nsubmission['target'] = submission['target'].astype('float32')\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","56184a03":"### Grid Search\n\ud558\ub2e8\uc758 \ucf54\ub4dc\ub85c Grid Search\ub97c \uc9c4\ud589\ud558\uc5ec Hyperparameter Tuning\uc744 \ud558\uc600\uc2b5\ub2c8\ub2e4.\n\ucc38\uace0\uc0ac\ud56d : \uc2dc\uac04\uc774 \ub9ce\uc774 \uac78\ub9bd\ub2c8\ub2e4.\n\nThe Grid Search was conducted with the code below and Hyperparameter Tuning was performed.\nNote: It takes a long time.","7c343ea6":"### \ubaa8\ub378\ub9c1(Modeling)","ffdef751":"![image.png](attachment:c4239d24-2490-41ff-a100-c3efd805ab56.png)","dc897d5b":"### Data \ubd88\ub7ec\uc624\uae30(Read Data set)"}}