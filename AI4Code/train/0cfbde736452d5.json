{"cell_type":{"e1ecf8d5":"code","b434683c":"code","e92165e0":"code","14338360":"code","dcad879a":"code","299c1848":"code","67ed831f":"code","65e34052":"code","ee38ba25":"code","063f666c":"code","9d7fdaea":"code","f2a8e0f9":"markdown"},"source":{"e1ecf8d5":"import numpy as np\nimport keras\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, BatchNormalization, Dropout, MaxPool2D, Input, Softmax, Activation, Flatten\nfrom keras.models import Model\nfrom keras import optimizers\nfrom keras.layers import concatenate,AveragePooling2D\nimport os\nprint(os.listdir(\"..\/input\"))\nimport cv2\nimport scipy\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.utils.vis_utils import plot_model\nimport matplotlib.pyplot as plt","b434683c":"from tqdm import tqdm\ndef get_data(folder):\n    \"\"\"\n    Load the data and labels from the given folder.\n    \"\"\"\n    X = []\n    y = []\n    z = []\n    for wbc_type in os.listdir(folder):\n        if not wbc_type.startswith('.'):\n            if wbc_type in ['NEUTROPHIL']:\n                label = 1\n                label2 = 1\n            elif wbc_type in ['EOSINOPHIL']:\n                label = 2\n                label2 = 1\n            elif wbc_type in ['MONOCYTE']:\n                label = 3  \n                label2 = 0\n            elif wbc_type in ['LYMPHOCYTE']:\n                label = 4 \n                label2 = 0\n            else:\n                label = 5\n                label2 = 0\n            for image_filename in tqdm(os.listdir(folder + wbc_type)):\n                img_file = cv2.imread(folder + wbc_type + '\/' + image_filename)\n                if img_file is not None:\n                    img_file = scipy.misc.imresize(arr=img_file, size=(60, 80, 3))\n                    img_arr = np.asarray(img_file)\n                    X.append(img_arr)\n                    y.append(label)\n                    z.append(label2)\n    X = np.asarray(X)\n    y = np.asarray(y)\n    z = np.asarray(z)\n    return X,y,z\nX_train, y_train, z_train = get_data('..\/input\/dataset2-master\/dataset2-master\/images\/TRAIN\/')\nX_test, y_test, z_test = get_data('..\/input\/dataset2-master\/dataset2-master\/images\/TEST\/')\n\n# Encode labels to hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nfrom keras.utils.np_utils import to_categorical\ny_trainHot = to_categorical(y_train, num_classes = 5)\ny_testHot = to_categorical(y_test, num_classes = 5)\nz_trainHot = to_categorical(z_train, num_classes = 2)\nz_testHot = to_categorical(z_test, num_classes = 2)\ndict_characters = {1:'NEUTROPHIL',2:'EOSINOPHIL',3:'MONOCYTE',4:'LYMPHOCYTE'}\ndict_characters2 = {0:'Mononuclear',1:'Polynuclear'}\nprint(dict_characters)\nprint(dict_characters2)","e92165e0":"print(\"Train X Shape --> \",X_train.shape)\nprint(\"Train y Shape --> \",y_trainHot.shape)\nprint(\"Train z Shape --> \",z_trainHot.shape)\n##\n# Input Layer (-1, 60, 80, 3) All three channel RGB\n# Output Layer 1 (-1, 5) Softmax\n# Output Layer 2 (-1, 2) Softmax (Doesn't work as 2nd output backpropogation messes all the weights)\n##","14338360":"def keras_model(block_num=2):\n    inp = Input(shape=(60,80,3))\n    k = BatchNormalization()(inp)\n    k = Conv2D(32, (7,7), padding=\"same\",activation=\"relu\",strides=(2,2))(k)\n    k = MaxPool2D(pool_size=(3, 3), padding=\"same\",strides=(2,2))(k) \n    k = Conv2D(32, (3,3), padding=\"same\",activation=\"relu\",strides=(1,1))(k)\n    k = MaxPool2D(pool_size=(3, 3), padding=\"same\",strides=(2,2))(k)\n    for j in range(1,block_num+1):\n        out_conv = []\n        for i in [(1,1),(3,3),(5,5),(0,0)]:\n            p = k\n            if i == (1,1):\n                p = Conv2D(32, (1,1), padding=\"same\",activation=\"relu\")(p)\n                out_conv.append(Conv2D(32, (1,1), padding=\"same\",activation=\"relu\")(p))\n            elif i == (0,0):\n                p = MaxPool2D(pool_size=(2, 2), padding=\"same\",strides=(1,1))(p)\n                out_conv.append(Conv2D(32, (1,1), padding=\"same\",activation=\"relu\")(p))\n            else:\n                p = Conv2D(32, (1,1), padding=\"same\",activation=\"relu\")(p)\n                p = Conv2D(32, i, padding=\"same\",activation=\"relu\")(p)\n                out_conv.append(Conv2D(32, i, padding=\"same\",activation=\"relu\")(p))\n        x = concatenate(out_conv, axis = -1)\n        #if j%2 == 0:\n        #    x = MaxPool2D(pool_size=(3, 3), padding=\"same\",strides=(2,2))(x)\n        #x = BatchNormalization(axis=-1)(x)\n        k = x\n   # x = Dropout(0.5)(k)\n    x = MaxPool2D(pool_size=(7, 7), padding=\"same\",strides=(2,2))(x)\n    x = Flatten()(x)\n    #x = Dense(1024,activation=\"relu\")(x)\n    #x = BatchNormalization()(x)\n    #x = Dropout(0.5)(x)\n    y = Dense(5,activation=\"softmax\")(x)\n#    z = Dense(2,activation=\"softmax\")(x)\n    model = Model(inp, y)\n    opt = optimizers.Adam(lr=0.01,decay=0.0001)\n    model.compile(loss='categorical_crossentropy',\n                  optimizer=\"adam\",\n                  metrics=['accuracy'])\n    return model\nmodel = keras_model(4)\nmodel.summary()","dcad879a":"plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)\nplt.figure(figsize=(16,20))\nplt.imshow(plt.imread('model_plot.png'))","299c1848":"filepath = \".\/weight_tr5.hdf5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='val_acc', verbose=1, save_best_only=True, mode='max')\ncallbacks_list = [checkpoint]\nhistory = model.fit(X_train,\n         y_trainHot,\n         epochs = 60,\n         batch_size = 32,\n         validation_data = (X_test,y_testHot),\n         callbacks = callbacks_list,\n         verbose = 1)","67ed831f":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\n# \"bo\" is for \"blue dot\"\nplt.plot(epochs, loss, label='Training loss')\n# b is for \"solid blue line\"\nplt.plot(epochs, val_loss, label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","65e34052":"#Accuracy Plot\nhistory_dict = history.history\nhistory_dict.keys()\nplt.clf()   # clear figure\nacc_values = history_dict['acc']\nval_acc_values = history_dict['val_acc']\n\nplt.plot(epochs, acc, label='Training acc')\nplt.plot(epochs, val_acc, label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.show()","ee38ba25":"## Loading Best Weights from the Gang\nmodel.load_weights(filepath)\nfrom keras.preprocessing.image import ImageDataGenerator\ndatagentrain = ImageDataGenerator(featurewise_center=False,\n                samplewise_center=False,\n                featurewise_std_normalization=False,\n                samplewise_std_normalization=False,\n                zca_whitening=False, zca_epsilon=1e-06,\n                rotation_range=5, width_shift_range=0.0,\n                height_shift_range=0.0, brightness_range=None,\n                shear_range=0, zoom_range=0.0,\n                channel_shift_range=0.0, fill_mode='nearest',\n                cval=0.0, horizontal_flip=True, vertical_flip=True,\n                rescale=None, preprocessing_function=None,\n                data_format=None, validation_split=0.0)\ndatagentrain.fit(X_train)\nhistory = model.fit_generator(datagentrain.flow(X_train, y_trainHot, batch_size=32),\n                    steps_per_epoch=64,\n                    epochs=64,\n                    workers=4,\n                    use_multiprocessing=True,validation_data = (X_test,y_testHot),\n         callbacks = callbacks_list,)","063f666c":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\n# \"bo\" is for \"blue dot\"\nplt.plot(epochs, loss, label='Training loss')\n# b is for \"solid blue line\"\nplt.plot(epochs, val_loss, label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","9d7fdaea":"#Accuracy Plot\nhistory_dict = history.history\nhistory_dict.keys()\nplt.clf()   # clear figure\nacc_values = history_dict['acc']\nval_acc_values = history_dict['val_acc']\n\nplt.plot(epochs, acc, label='Training acc')\nplt.plot(epochs, val_acc, label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.show()","f2a8e0f9":"# Keras Inception Network\n### Thanks to Paul Moonely for How to load data"}}