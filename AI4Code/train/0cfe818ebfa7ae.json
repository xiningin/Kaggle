{"cell_type":{"b479710b":"code","40b57857":"code","02bc4ace":"code","734acda8":"code","12a2bb6d":"code","04806a12":"code","87e9b8ec":"code","81e6e7d9":"code","59648bbc":"code","8838bec4":"code","e530d6c0":"code","56f092eb":"code","64d27c57":"code","dd4fd19c":"code","a92b6e30":"code","ad974ab1":"code","b2116c4b":"code","f873db10":"code","909d12f5":"code","a8f046ba":"code","7067c932":"code","c5d48e2e":"code","97f79e02":"code","f8124560":"code","6f5a8f81":"code","97be181f":"code","1bc80b57":"code","557e1b05":"code","83a90adf":"code","d27d4937":"code","4cb092d9":"code","2f4f3572":"code","36a86c9d":"code","a12924f2":"code","260ca272":"code","c81e996b":"code","bbee212d":"code","4463cd44":"code","a145dd40":"code","66cf7d6b":"code","0c27c895":"code","8ccfc204":"code","af05d20a":"code","fc36afdb":"code","f25a1237":"code","22ef0ce2":"code","de5347de":"code","9bcc54dd":"code","37d31edc":"code","288a04a5":"code","ba539001":"code","27846687":"code","214bb23c":"code","1045f131":"code","3b20df6f":"code","6ea014f1":"markdown","3e7c38e4":"markdown","f83ef328":"markdown","953ec58d":"markdown","1381f1f6":"markdown","0f9cfc78":"markdown","c630aed1":"markdown","13dfaf0d":"markdown","fe40e86f":"markdown","b07431db":"markdown","c563d458":"markdown","ac459a4a":"markdown","13818a99":"markdown","6561f4ec":"markdown","6b175db9":"markdown","0ded3cab":"markdown","1556f38d":"markdown","d736d158":"markdown","f8d02c4f":"markdown","1554c861":"markdown","b2120bc4":"markdown","42afd3ed":"markdown","462c94b0":"markdown","94e3e942":"markdown","302d1169":"markdown","af994663":"markdown","6239bfa1":"markdown","de7cda50":"markdown","6cf4b65d":"markdown","1fac9899":"markdown","08f900b7":"markdown","dfa33588":"markdown","1c84fc46":"markdown","33736565":"markdown","a332e0ff":"markdown","c4f7cad2":"markdown","de694c39":"markdown","289bb109":"markdown","cb07f4f8":"markdown","05b82000":"markdown","b13dd558":"markdown","ce9b1562":"markdown","1a1599b3":"markdown","bf9edc82":"markdown","91f437fa":"markdown","2775ad10":"markdown","6b8e1e54":"markdown","44c4a3af":"markdown","e9ae360f":"markdown","f42dd7a7":"markdown","60bf3ac9":"markdown","19e66435":"markdown","ca49cd95":"markdown","63577000":"markdown","64a4cd39":"markdown","ad102110":"markdown","0f5d5e1c":"markdown","5295b75f":"markdown","0d6fb4bc":"markdown","bb8cdaab":"markdown","13327fc5":"markdown","4d668d30":"markdown","853c5805":"markdown","10b78715":"markdown","ca1bf64c":"markdown","35bc2788":"markdown"},"source":{"b479710b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/flight_data.csv'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n## To Make Change in File Just Local Path needs to be changed to applicable Path\nflight_data=pd.read_csv('\/kaggle\/input\/flight_data.csv')\nflight_data","40b57857":"from datetime import datetime\nflight_data['time_hour']= pd.to_datetime(flight_data['time_hour']) \n## Inserting Columns Day_week based upon day taken from time_hour variable. \nflight_data['flight_date'] = pd.to_datetime(flight_data[['year','month','day']], yearfirst=True)\nflight_data['Day_Week']=flight_data.flight_date.dt.day_name()\n#### Removing and adding the Column as Month Name ########################\nflight_data['month1']=flight_data['flight_date'].dt.month_name()\n##################Adding Column Avg Speed to Data Frame######################\nflight_data['Avgspped']=flight_data['distance'] \/ (flight_data['air_time']\/60)\nflight_data['Avgspped']=flight_data.Avgspped.round(2)\nflight_data_org=flight_data.copy()\nflight_data_org.shape","02bc4ace":"# List of Records where dept_time is null and Departure delay is also null and Arrival time and arrival _delay is also null.There are 8255 such records \n### ALl These Records are taken in Different Cancelled\nflight_Cancelled=flight_data[(flight_data[\"dep_time\"].isnull())&(flight_data[\"dep_delay\"].isnull())&(flight_data[\"arr_time\"].isnull())&(flight_data[\"arr_delay\"].isnull())]\n### Taking index of Columns and Removing the values from Orginal data Frame\nflight_data.drop(index=flight_Cancelled.index,inplace=True)","734acda8":"# Data Frame Created to Update the Values for Arrival Time\ntest1=pd.DataFrame(flight_data[flight_data[\"arr_time\"].isnull()])\n# Updating the Arrival time for Null as scheduled arrival time plus delay.\ntest1['arr_time'].fillna(test1['sched_arr_time']+test1['dep_delay'],inplace=True)","12a2bb6d":"### Function Written to Validate the time in test data set to correct value 22:86 to be 23:26 and 2420 to 0020 as military standard time\ndef Validate_time(hours):\n    no=hours\n    minutes=no%100\n    if(minutes>59):\n         hours=(no - minutes)\/100\n         hours=hours*100\n         hours+=100\n         if(hours>=2400):hours=hours-2400\n         hours=hours+(minutes-60)      \n    else:\n        if(hours>=2400):hours=hours-2400\n    return int(hours)","04806a12":"## Applying the validate time function for arr_time with axis=1 for each row \ntest1['arr_time'] = test1.apply(lambda row : Validate_time(row['arr_time']), axis = 1) \n#flight_data[flight_data[\"arr_time\"].isnull()]","87e9b8ec":"## Updating the Data using the arr_time updated values with values from test data frame \nflight_data['arr_time'].fillna(value=test1['arr_time'],inplace=True)\n","81e6e7d9":"## Updating the Arrival delay from temp datafrome where values are updated.\nflight_data['arr_delay'].fillna(value=flight_data['arr_time'] - flight_data['sched_arr_time'],inplace=True)\n### Updating airtime as 65% of difference between arrival and departure time.\nflight_data['air_time'].fillna(value=round((flight_data['arr_time'] - flight_data['dep_time'])*.65),inplace=True)","59648bbc":"###########Function Created to Drop Data Frame to Free up Memory #############\ndef Drop_dataframe(df):\n    df.drop(df.index, inplace=True)\n    df.drop(columns=df.columns,inplace=True)\n    return (df.shape)","8838bec4":"############Departure Delays#################\nflight_data_new0=flight_data[flight_data['dep_delay']!=0]\nflight_data_new1=flight_data[flight_data['dep_delay']>0]\nflight_data_new2=flight_data[flight_data['dep_delay']==0]\nflight_data_new3=flight_data[flight_data['dep_delay']<0]\n\ntest0=pd.DataFrame(flight_data_new0[['carrier','month1','dep_delay']].groupby(['carrier','month1']).mean())\ntest1=pd.DataFrame(flight_data_new1[['carrier','month1','dep_delay']].groupby(['carrier','month1']).count())\ntest2=pd.DataFrame(flight_data_new2[['carrier','month1','dep_delay']].groupby(['carrier','month1']).count())\ntest3=pd.DataFrame(flight_data_new3[['carrier','month1','dep_delay']].groupby(['carrier','month1']).count())\n\nTemp1=pd.merge(test0,test1,how='outer',on=['carrier','month1'])\nTemp2=pd.merge(test2,test3,how='outer',on=['carrier','month1'])\nTemp3=pd.merge(Temp1,Temp2,how='outer',on=['carrier','month1'])\n\n#############Arrvial Delays##########################################################################\nflight_data_new4=flight_data[flight_data['arr_delay']!=0]\nflight_data_new5=flight_data[flight_data['arr_delay']>0]\nflight_data_new6=flight_data[flight_data['arr_delay']==0]\nflight_data_new7=flight_data[flight_data['arr_delay']<0]\n\ntest4=pd.DataFrame(flight_data_new4[['carrier','month1','arr_delay']].groupby(['carrier','month1']).mean())\ntest5=pd.DataFrame(flight_data_new5[['carrier','month1','arr_delay']].groupby(['carrier','month1']).count())\ntest6=pd.DataFrame(flight_data_new6[['carrier','month1','arr_delay']].groupby(['carrier','month1']).count())\ntest7=pd.DataFrame(flight_data_new7[['carrier','month1','arr_delay']].groupby(['carrier','month1']).count())\n\nTemp4=pd.merge(test4,test5,how='outer',on=['carrier','month1'])\nTemp5=pd.merge(test6,test7,how='outer',on=['carrier','month1'])\nTemp6=pd.merge(Temp4,Temp5,how='outer',on=['carrier','month1'])\n##############Merging dataframe in one############################################################\nsum_flight=pd.merge(Temp3,Temp6,how='outer',on=['carrier','month1'])\n#Temp5.rename(columns = {'dep_delay_x':'dep_delay','dep_delay_y':'dep_intime','dep_delay':'dep_ahead_time'}, inplace = True)\n#########Renaming Columns for Meaningfull Name\nsum_flight.rename(columns = {'arr_delay_y_x':'arr_delay','arr_delay_x_y':'arr_intime','arr_delay_y_y':'arr_ahead_time','arr_delay_x_x':'avg_arr_delay'}, inplace = True)\nsum_flight.rename(columns = {'dep_delay_x_x':'avg_dep_delay','dep_delay_y_x':'dep_delay','dep_delay_x_y':'dep_intime','dep_delay_y_y':'dep_ahead_time'}, inplace = True)\n##########Rounding Values for Better Display\nsum_flight['avg_dep_delay']=sum_flight.avg_dep_delay.round(2)\nsum_flight['avg_arr_delay']=sum_flight.avg_arr_delay.round(2)\nsum_flight.head()","e530d6c0":"##########Cleaning the Data frames ###############\n#################Cleaning the Data frames which are not required later#############################\nDrop_dataframe(flight_data_new0)\nDrop_dataframe(flight_data_new1)\nDrop_dataframe(flight_data_new2)\nDrop_dataframe(flight_data_new3)\nDrop_dataframe(flight_data_new4)\nDrop_dataframe(flight_data_new5)\nDrop_dataframe(flight_data_new6)\nDrop_dataframe(flight_data_new7)\nDrop_dataframe(test0)\nDrop_dataframe(test1)\nDrop_dataframe(test2)\nDrop_dataframe(test3)\nDrop_dataframe(test4)\nDrop_dataframe(test5)\nDrop_dataframe(test6)\nDrop_dataframe(test7)\nDrop_dataframe(Temp1)\nDrop_dataframe(Temp2)\nDrop_dataframe(Temp3)\nDrop_dataframe(Temp4)\nDrop_dataframe(Temp5)\nDrop_dataframe(Temp6)\nprint(\"\")","56f092eb":"#### Handling Null Values as join was outer for Arrival time\nsum_flight.fillna(0,inplace=True)\nsum_flight.reset_index(level=1, drop=False,inplace=True)\nsum_flight.reset_index(level=0, drop=False,inplace=True)\nsum_flight.rename(columns = {'month1':'month'}, inplace = True)\n\n########Converting Data Types to Index \nsum_flight['dep_delay'] = sum_flight['dep_delay'].astype(int)\nsum_flight['dep_intime'] = sum_flight['dep_intime'].astype(int)\nsum_flight['dep_ahead_time'] = sum_flight['dep_ahead_time'].astype(int)\nsum_flight['arr_delay'] = sum_flight['arr_delay'].astype(int)\nsum_flight['arr_intime'] = sum_flight['arr_intime'].astype(int)\nsum_flight['arr_ahead_time'] = sum_flight['arr_ahead_time'].astype(int)","64d27c57":"############Departure Delays Day Wise #################\nflight_data_new0=flight_data[flight_data['dep_delay']!=0]\nflight_data_new1=flight_data[flight_data['dep_delay']>0]\nflight_data_new2=flight_data[flight_data['dep_delay']==0]\nflight_data_new3=flight_data[flight_data['dep_delay']<0]\n\ntest0=pd.DataFrame(flight_data_new0[['carrier','Day_Week','dep_delay']].groupby(['carrier','Day_Week']).mean())\ntest1=pd.DataFrame(flight_data_new1[['carrier','Day_Week','dep_delay']].groupby(['carrier','Day_Week']).count())\ntest2=pd.DataFrame(flight_data_new2[['carrier','Day_Week','dep_delay']].groupby(['carrier','Day_Week']).count())\ntest3=pd.DataFrame(flight_data_new3[['carrier','Day_Week','dep_delay']].groupby(['carrier','Day_Week']).count())\n\nTemp1=pd.merge(test0,test1,how='outer',on=['carrier','Day_Week'])\nTemp2=pd.merge(test2,test3,how='outer',on=['carrier','Day_Week'])\nTemp3=pd.merge(Temp1,Temp2,how='outer',on=['carrier','Day_Week'])\n\n#############Arrvial Delays Day Wise ##########################################################################\nflight_data_new4=flight_data[flight_data['arr_delay']!=0]\nflight_data_new5=flight_data[flight_data['arr_delay']>0]\nflight_data_new6=flight_data[flight_data['arr_delay']==0]\nflight_data_new7=flight_data[flight_data['arr_delay']<0]\n\ntest4=pd.DataFrame(flight_data_new4[['carrier','Day_Week','arr_delay']].groupby(['carrier','Day_Week']).mean())\ntest5=pd.DataFrame(flight_data_new5[['carrier','Day_Week','arr_delay']].groupby(['carrier','Day_Week']).count())\ntest6=pd.DataFrame(flight_data_new6[['carrier','Day_Week','arr_delay']].groupby(['carrier','Day_Week']).count())\ntest7=pd.DataFrame(flight_data_new7[['carrier','Day_Week','arr_delay']].groupby(['carrier','Day_Week']).count())\nTemp4=pd.merge(test4,test5,how='outer',on=['carrier','Day_Week'])\nTemp5=pd.merge(test6,test7,how='outer',on=['carrier','Day_Week'])\nTemp6=pd.merge(Temp4,Temp5,how='outer',on=['carrier','Day_Week'])\n\nwsum_flight=pd.merge(Temp3,Temp6,how='outer',on=['carrier','Day_Week'])\nwsum_flight.rename(columns = {'dep_delay_x_x':'wek_avg_dep_delay','dep_delay_y_x':'wek_dep_delay','dep_delay_x_y':'wek_dep_intime','dep_delay_y_y':'wek_dep_ahead_time'}, inplace = True)\nwsum_flight.rename(columns = {'arr_delay_x_x':'wek_avg_arr_delay','arr_delay_y_x':'wek_arr_delay','arr_delay_y_y':'wek_arr_ahead_time','arr_delay_x_y':'wek_arr_intime'}, inplace = True)\n### Updating Null Values \nwsum_flight.fillna(0,inplace=True)\nwsum_flight['wek_avg_dep_delay']=wsum_flight.wek_avg_dep_delay.round(2)\nwsum_flight['wek_avg_arr_delay']=wsum_flight.wek_avg_arr_delay.round(2)\n\n######Converting Columns to Int######################\nwsum_flight['wek_dep_delay'] = wsum_flight['wek_dep_delay'].astype(int)\nwsum_flight['wek_dep_intime'] = wsum_flight['wek_dep_intime'].astype(int)\nwsum_flight['wek_arr_delay'] = wsum_flight['wek_arr_delay'].astype(int)\nwsum_flight['wek_arr_intime'] = wsum_flight['wek_arr_intime'].astype(int)\nwsum_flight['wek_arr_ahead_time'] = wsum_flight['wek_arr_ahead_time'].astype(int)\nwsum_flight.head()","dd4fd19c":"#### Updating the Index Columns to We have Weekday as column and not as index\nwsum_flight.reset_index(level=1, drop=False,inplace=True)\nwsum_flight.reset_index(level=0, drop=False,inplace=True)","a92b6e30":"#################Cleaning the Data frames which are not required later#############################\nDrop_dataframe(flight_data_new0)\nDrop_dataframe(flight_data_new1)\nDrop_dataframe(flight_data_new2)\nDrop_dataframe(flight_data_new3)\nDrop_dataframe(flight_data_new4)\nDrop_dataframe(flight_data_new5)\nDrop_dataframe(flight_data_new6)\nDrop_dataframe(flight_data_new7)\nDrop_dataframe(test0)\nDrop_dataframe(test1)\nDrop_dataframe(test2)\nDrop_dataframe(test3)\nDrop_dataframe(test4)\nDrop_dataframe(test5)\nDrop_dataframe(test6)\nDrop_dataframe(test7)\nDrop_dataframe(Temp1)\nDrop_dataframe(Temp2)\nDrop_dataframe(Temp3)\nDrop_dataframe(Temp4)\nDrop_dataframe(Temp5)\nDrop_dataframe(Temp6)\nprint(\"\")","ad974ab1":"###########Updating the Flight Cancelled Dataframe inspiration was Virat for the Code ################\nflight_Cancelled['dep_time'].fillna(0.00, inplace=True)\nflight_Cancelled['dep_delay'].fillna(0.00, inplace=True)\nflight_Cancelled['arr_time'].fillna(0.00, inplace=True)\nflight_Cancelled['arr_delay'].fillna(0.00, inplace=True)\nflight_Cancelled['air_time'].fillna(.00, inplace=True)\n#flight_Cancelled.loc[(flight_Cancelled['dep_time'] == 0.00) & (flight_Cancelled['dep_delay'] == 0.00) & (flight_Cancelled['arr_time'] == 0.00) & (flight_Cancelled['arr_delay'] == 0.00) & (flight_Cancelled['air_time'] == 0.00),'flight_sattus'] = 'Cancelled'\nflight_Cancelled['flight_sattus']='Cancelled'\nflight_Cancelled['tailnum'].fillna('Unknown', inplace=True)\nflight_Cancelled.isnull().sum()\n","b2116c4b":"#########Creating Dataframe for Updating the Cancelled Summary Starting with adding column\n############ Two Data Frames are Defined One for Monthly Cancellation and Another for Day Wise Cancellation\ntest1=pd.DataFrame(flight_Cancelled.groupby(['carrier','month1','flight_sattus'],observed=False).count())\ntest2=pd.DataFrame(flight_Cancelled.groupby(['carrier','Day_Week','flight_sattus'],observed=False).count())\ntest1.rename(columns = {'year':'Cancelled_Flight'},inplace=True)\ntest2.rename(columns = {'year':'Cancelled_Flight'},inplace=True)\n\n#######################=Droping of Unwanted Columns ####################\ntest1=test1.drop(['month', 'day', 'dep_time', 'sched_dep_time', 'dep_delay','arr_time', 'sched_arr_time', 'arr_delay', \n'flight', 'tailnum', 'origin', 'dest', 'air_time', 'distance', 'flight_date', 'Avgspped','hour', 'minute','time_hour', 'Day_Week'],axis=1)\n\ntest2=test2.drop(['month', 'day', 'dep_time', 'sched_dep_time', 'dep_delay','arr_time', 'sched_arr_time', 'arr_delay', \n'flight', 'tailnum', 'origin', 'dest', 'air_time', 'distance','flight_date', 'Avgspped', 'hour', 'minute','time_hour','month1'],axis=1)\n\n###############Droping Indexes and setting them as normal columns\ntest1.reset_index(level=2, drop=False,inplace=True)\ntest1.reset_index(level=1, drop=False,inplace=True)\ntest1.reset_index(level=0, drop=False,inplace=True)\n\ntest2.reset_index(level=2, drop=False,inplace=True)\ntest2.reset_index(level=1, drop=False,inplace=True)\ntest2.reset_index(level=0, drop=False,inplace=True)\n\n######################Dropping Columns which are not required####################################\ntest1.drop('flight_sattus',axis=1,inplace=True)\ntest2.drop('flight_sattus',axis=1,inplace=True)\n\n#############renaming Columns===================\ntest1.rename(columns = {'month1':'month'},inplace=True)","f873db10":"### Merging Data Frames to Get Consolidated Output . \n#Temp7=pd.merge(sum_flight,cancell_sum1,how='outer',on=['carrier','month'])\nsum_flight=pd.merge(sum_flight,test1,how='outer',on=['carrier','month'])\n#Temp8= pd.merge(wsum_flight,cancell_sum2,how='outer',on=['carrier','Day_Week'])\nwsum_flight=pd.merge(wsum_flight,test2,how='outer',on=['carrier','Day_Week'])","909d12f5":"########(185, 11) (112, 11) Validate Sum_flight has 191 and 11columns and wsum_flights has 112 rows and 11 Columns\nprint(sum_flight.shape,wsum_flight.shape)\nwsum_flight.head()","a8f046ba":"sum_flight.head()","7067c932":"###########Updating Null Values##############\nsum_flight['Cancelled_Flight'].fillna(0,inplace=True)\nwsum_flight['Cancelled_Flight'].fillna(0,inplace=True)\nsum_flight.fillna(0,inplace=True)","c5d48e2e":"###########Inserting New Columns to Get the Total Count of Flights based upon condition validated.\nsum_flight['Total_Flights']=sum_flight['arr_delay'] + sum_flight['arr_intime']+ sum_flight['arr_ahead_time']+sum_flight['Cancelled_Flight']\nwsum_flight['Total_Flights']=wsum_flight['wek_dep_delay'] + wsum_flight['wek_dep_intime']+ wsum_flight['wek_dep_ahead_time']+wsum_flight['Cancelled_Flight']","97f79e02":"#cancell_sum1=pd.DataFrame(flight_Cancelled1.groupby(['carrier','month1','flight_sattus'],observed=False).count())\nairport_analysis=pd.DataFrame(flight_data[['month1','carrier','flight','tailnum','dep_delay','arr_delay','origin','dest']])","f8124560":"###########Function created to Update the Status of Row Based upon input condition for arrival and Departure Status.\ndef Update_Status(row):\n    if row == 0 :val= 'Ontime'\n    elif row< 0 :val= 'Ahdtime'\n    elif row> 0 :val= 'Delay'\n    else: val=\"\"\n    return val","6f5a8f81":"## Inserting New Column Dep Status and Arrival Status and Updating Values inside it.\nairport_analysis['Dep_Status']=airport_analysis.apply(lambda row : Update_Status(row['dep_delay']), axis = 1) \nairport_analysis['Arr_Status']=airport_analysis.apply(lambda row : Update_Status(row['arr_delay']), axis = 1) \nairport_analysis.rename(columns = {'month1':'month'},inplace=True)","97be181f":"#### Data Frames are Crated to Store the Departure Summary with Few Columns\ndep_sum=pd.DataFrame(airport_analysis.groupby(['month','carrier','origin','Dep_Status',],observed=True).count())\ndep_sum=dep_sum.drop(['tailnum', 'dep_delay','Arr_Status', 'arr_delay','dest'],axis=1)\n#dep_sum.reset_index(level=4, drop=False,inplace=True)\ndep_sum.reset_index(level=3, drop=False,inplace=True)\ndep_sum.reset_index(level=2, drop=False,inplace=True)\ndep_sum.reset_index(level=1, drop=False,inplace=True)\ndep_sum.reset_index(level=0, drop=False,inplace=True)\ndep_sum.rename(columns = {'flight':'Total_Dep'},inplace=True)\ndep_sum.shape","1bc80b57":"#############Arrival status Flights  ########################################\narr_sum=pd.DataFrame(airport_analysis.groupby(['month','carrier','dest','Arr_Status'],observed=True).count())\narr_sum=arr_sum.drop(['tailnum', 'dep_delay','arr_delay','Dep_Status','origin'],axis=1)\narr_sum.reset_index(level=3, drop=False,inplace=True)\narr_sum.reset_index(level=2, drop=False,inplace=True)\narr_sum.reset_index(level=1, drop=False,inplace=True)\narr_sum.reset_index(level=0, drop=False,inplace=True)\narr_sum.rename(columns = {'flight':'Total_Arr'},inplace=True)","557e1b05":"############Maximum No of Flights Headed for Some particular Destination.==>#############\n#flight_data_org\nairport_dep_sum=pd.DataFrame(airport_analysis.groupby(['origin','dest']).count())\nairport_dep_sum.reset_index(level=1, drop=False,inplace=True)\nairport_dep_sum.reset_index(level=0, drop=False,inplace=True)\nairport_dep_sum=airport_dep_sum.drop(['carrier','flight','tailnum','dep_delay','arr_delay','Dep_Status','Arr_Status'],axis=1)\nairport_dep_sum.rename(columns = {'month':'Count'},inplace=True)\nprint(airport_dep_sum.shape)\nairport_dep_sum.head()\n########This Query Gives the Exact Count of Data based \nairport_dep_sum.sort_values('Count',ascending=False).head()","83a90adf":"## Importing important functions.\nfrom scipy import stats, integrate\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import stats, integrate\nimport seaborn as sns\nplt.rcParams['font.size'] = 14\n%matplotlib inline\nimage_path=r\"E:\\UPX\\Project\\attachment_Project_Datasets\\Project Datasets\\attachment_Project_1_NYC-Flight_data\\Pictures\/\"","d27d4937":"##########Departure Delays for Various Airlines. \nsns.scatterplot(x=\"carrier\", y=\"dep_delay\", data=sum_flight)\nplt.title('Departure Delays for Various Airlines ')","4cb092d9":"#######################Plots to Show Average Arrival Delay in Arrival and Departure for Different Airlines################\nflg,ax=plt.subplots(1,2,figsize=(14,8))\nax[1].set_title('Average Monthly Arrival Delay for Carriers')\nax[0].set_title('Average Monthly Departure Delay for Carriers')\nsns.boxplot(x=\"carrier\", y=\"avg_arr_delay\", data=sum_flight, palette='rainbow',ax=ax[1])\nsns.boxplot(x=\"carrier\", y=\"avg_dep_delay\", data=sum_flight, palette='rainbow',ax=ax[0])\nplt.show()","2f4f3572":"plt.tight_layout()\ng=sns.catplot(x=\"carrier\", y=\"wek_avg_dep_delay\", data=wsum_flight,height=8, kind=\"bar\",hue='Day_Week',legend=True)\ng.fig.suptitle('Departure Delay Day wise for Different Carrier')\nplt.plot()","36a86c9d":"plt.tight_layout()\ng=sns.catplot(x=\"carrier\", y=\"wek_avg_arr_delay\", data=wsum_flight,height=8, kind=\"bar\",hue='Day_Week',legend=True)\ng.fig.suptitle('Arrival Delay Day wise for Different Carrier')\nplt.plot()","a12924f2":"######## Non Punctual Flights or the One Not Departed on Time\nplt.title('Flights Which have not Departed on Time')\nsns.lineplot(x=\"carrier\", y=\"dep_delay\",  data=sum_flight)\n","260ca272":"### Temp test1 to create to visualise departure summary report for 3 airports\ntest1=pd.DataFrame(dep_sum[['origin','Dep_Status','Total_Dep']].groupby(['origin','Dep_Status']).sum())\ntest1.reset_index(level=1, drop=False,inplace=True)\ntest1.reset_index(level=0, drop=False,inplace=True)\nplt.title(\"Departure Summary Status for three Airport\")\nsns.lineplot(x='origin',y='Total_Dep',data=test1,hue='Dep_Status')\ntest2=test1[test1['Dep_Status']=='Ontime']","c81e996b":"##### Plots Showing Deleyed Departed and Delayed Arrived Flights\nflg,ax=plt.subplots(1,2,figsize=(12,6))\nax[0].set_title('Flight Departured with Delay ')\nax[1].set_title('Flight Arrived Late ')\nsns.distplot(sum_flight.dep_delay,kde=True,ax=ax[0])\nsns.distplot(sum_flight.arr_delay,kde=True,ax=ax[1])","bbee212d":"## Company Wise Arrival Delay \nfig=plt.figure()\n#plt.title('Average Arrival Delay for Airlines ')\nsns.catplot(x=\"carrier\", y=\"avg_arr_delay\", data=sum_flight, kind=\"bar\")\n#sns.catplot(x=\"carrier\", y=\"avg_dep_delay\", data=sum_flight, kind=\"bar\")","4463cd44":"##### Plots Showing the Average Departure Delays for Airlines across different Month\n#fig = plt.figure()\n#plt.title('Average Departure Delay Month wise for Airlines')\nsns.catplot(x=\"carrier\", y=\"avg_dep_delay\",hue='month' ,data=sum_flight)\n","a145dd40":"plt.title(\"On Time Departure for Various Airports\")\nsns.countplot(x='Total_Dep',data=test2 ,hue='origin')","66cf7d6b":"############Showing Total Flights vs Cancelled Flights \n#est1=pd.DataFrame(sum_flight[['Total_Flights','dep_delay','arr_delay','Cancelled_Flight','month']].groupby('month').sum())\ntest1=pd.DataFrame(sum_flight[['dep_delay','arr_delay','Cancelled_Flight','carrier']].groupby(['carrier']).sum())\nplt.figure(figsize=(12,6))\nplt.title(\"Cancelled and Arrived and Departed Late Flights for Months in 2013\")\nplt.ylabel(\"Airlines\")\nsns.heatmap(test1,cmap=\"YlGnBu\",annot=True,fmt='g',linewidths=.06,cbar=False)\n#plt.savefig(image_path+\"Heat Map of Departure Delays and Cancelled Flights.png\")","0c27c895":"########### Ploting Total Flights in Bar and Pie Charts. \nflg,ax=plt.subplots(1,2,figsize=(12,6))\nlabel1=flight_data['carrier'].unique().tolist()\nplt.pie(flight_data['carrier'].value_counts(),autopct='%1.2f%%',shadow=False,labels=label1)                                               \nax[1].set_title('Flight as Percent of Carrier')\nsns.countplot('carrier',order = flight_data['carrier'].value_counts().index, data=flight_data,ax=ax[0])\nax[0].set_title('Total Flight Count Airline Wise')\nax[0].set_ylabel('Number of Flights')\n#plt.show()","8ccfc204":"#########FLight Correlation Between Arrival and Departure for Differeng Airlines.\nsns.relplot(x='dep_intime',y='arr_intime',data=sum_flight,hue='carrier')\nplt.title('Flights Which have Departed on Time and Arrived on Time')","af05d20a":"#### Ploting Linear Regerrion plot between Flight Arrived and Departed for Different Airlines\nsns.lmplot(x='dep_delay',y='arr_delay',data=sum_flight,fit_reg=False,hue='carrier',aspect=1.5,height=6)\n","fc36afdb":"###### Time Arrival % Analysis################\nplt.title(\"Airlines Arrival and Delay Arrival Status\")\nsns_plot=sns.swarmplot(x='carrier',y='Total_Arr',data=arr_sum,hue='Arr_Status')\n#sns_plot.savefig(image_path+\"Arrival_Delays.png\")\n#plt.savefig(image_path+\"Arrival_Delays.png\")","f25a1237":"plt.title(\"Airlines Departure and their Delay Status\")\nsns.swarmplot(x='carrier',y='Total_Dep',data=dep_sum,hue='Dep_Status')","22ef0ce2":"plt.title(\"Departure Status for Airlines\")\nsns.lineplot(x='carrier',y='Total_Dep',data=dep_sum,hue='Dep_Status')\n#plt.savefig(image_path+\"Departure Status for Airlines.png\")","de5347de":"plt.title(\"Arrival Status for Airlines\")\nsns.lineplot(x='carrier',y='Total_Arr',data=arr_sum,hue='Arr_Status')\n#plt.savefig(image_path+\"Arrival_Status_for_Airline.png\")","9bcc54dd":"plt.figure(figsize=(13,4))\ng = sns.scatterplot(x='month',y='Cancelled_Flight',hue='carrier',data=sum_flight)\ng.legend(loc='center right', bbox_to_anchor=(1.13, 0.4), ncol=1)\nplt.title(\"Cancelled Flight Summary for Various Months\")\n#plt.savefig(image_path+\"Cancelled Flight Summary monthwise .png\")\nplt.show()","37d31edc":"plt.figure(figsize=(13,4))\ng = sns.scatterplot(x='Day_Week',y='Cancelled_Flight',hue='carrier',data=wsum_flight)\ng.legend(loc='center right', bbox_to_anchor=(1.13, 0.4), ncol=1)\nplt.title(\"Cancelled Flight Summary for Various Days\")\n#plt.savefig(image_path+\"Cancelled Flight Summary daywise.png\")\nplt.show()","288a04a5":"sns.set_style(\"dark\")\ntest1=airport_dep_sum.sort_values(by='Count',ascending=False).head(40)\nplt.title(\"List of Maximum Destination for Three Airport Top 40 Records\")\nsns.swarmplot(x='dest',y='Count',hue='origin',data=test1,size=6)","ba539001":"###########Speed Analysis of Aircraft #############\n#test1=pd.DataFrame(flight_speed[['carrier','Avgspped']].groupby('carrier').mean())\n#test2=pd.DataFrame(flight_speed[['tailnum','Avgspped']].groupby('tailnum').mean())\ntest1=pd.DataFrame(flight_data[['carrier','Avgspped']].groupby('carrier').mean())\ntest2=pd.DataFrame(flight_data[['tailnum','Avgspped']].groupby('tailnum').mean())\ntest1['Avgspped']=test1.Avgspped.round(2)\ntest2['Avgspped']=test2.Avgspped.round(2)\ntest3=test2.head(10)\ntest4=test2.tail(10)","27846687":"sns.lineplot(x=test1.index,y='Avgspped',data=test1,color='blue', linewidth=2.5)\n#sns.lineplot(x=test2.index,y='Avgspped',data=test2,color='pink', linewidth=2.5)\nplt.title(\"Average Speed of Companies \")\n","214bb23c":"plt.figure(figsize=(10,4))\nplt.title(\"Top 10 Aircraft in terms of Average Speed \")\nsns.lineplot(x=test3.index,y='Avgspped',data=test3,color='red', linewidth=2.5,legend='full')","1045f131":"plt.figure(figsize=(10,4))\nplt.title(\"Bottom 10 Aircraft in terms of Average Speed \")\nsns.lineplot(x=test4.index,y='Avgspped',data=test4,color='blue', linewidth=2.5,legend='full')","3b20df6f":"#################Cleaning the Data frames which are not required later#############################\nDrop_dataframe(flight_data_new0)\nDrop_dataframe(flight_data_new1)\nDrop_dataframe(flight_data_new2)\nDrop_dataframe(flight_data_new3)\nDrop_dataframe(flight_data_new4)\nDrop_dataframe(flight_data_new5)\nDrop_dataframe(flight_data_new6)\nDrop_dataframe(flight_data_new7)\nDrop_dataframe(test0)\nDrop_dataframe(test1)\nDrop_dataframe(test2)\nDrop_dataframe(test3)\nDrop_dataframe(test4)\nDrop_dataframe(test5)\nDrop_dataframe(test6)\nDrop_dataframe(test7)\nDrop_dataframe(Temp1)\nDrop_dataframe(Temp2)\nDrop_dataframe(Temp3)\nDrop_dataframe(Temp4)\nDrop_dataframe(Temp5)\nDrop_dataframe(Temp6)","6ea014f1":"## Speed Analysis","3e7c38e4":"### Days Wise Cancelled Flight Summary","f83ef328":"### On Time Departure for Various Airports","953ec58d":"## Summary Data inforation Data Cleaning and Updation","1381f1f6":"### Updating Missing Value with 0 and inserting Flight Status Columns Cancelled Flights","0f9cfc78":"# Exploratary Data Analysis & Data Summarisation","c630aed1":"## Updating Departure and Arrival Status ","13dfaf0d":"# Data Import from Internal Source","fe40e86f":"### Average Departure Delay Month wise for Airlines","b07431db":"## Cleaning Data Frames Created upon to Free Memory","c563d458":"### Ontime Late and Ahead of Time Arrivals for Various Airlines","ac459a4a":"#####  Double Click Here for Function Explanation\n<!-- \nThe Function is created to Update the time validate for 22:80 is updated as 23:30 and 2450 as 0050\n-->","13818a99":"### Average Daywise Departure and Arrival Delay","6561f4ec":"## Flight Data Details\nThe data has flight departure arrival time departure time , delay in  Arrival and Departure .\nThe data also talks about 16 Airlines which operate different flights . Flights Airtime , Distance and Time taken is also covered in the data.\nThe data has number of Cancelled Flights which is derived fact from schedule and Arrival Time being Null.\nTime taken by aircraft is prsent and Speed is derived from distance and time.\nAll the Data has date , month and year columns and this is used for segregating the data month wise \u2013 Day wise for Analysis","6b175db9":"## Creating Data Frame to Summarise the Cancelled Data Frame Data month and day wise","0ded3cab":"### Total Flight and Carriers Description","1556f38d":"# Data Summarisation","d736d158":"## Cancelled Flights Summary","f8d02c4f":"### Canclled Flights for Month Wise","1554c861":"##### Double-click __here__ for Detailed Explaination.\n<!--Departure Delays\nDepartures Delays\nflight_data_new0-3 Data Frames Created where departure delay is less than greater than equal or not equal to Zero.\ntest0-3 These data frames created the New data frame from subset of data and Does the Aggergation on Month.\nTemp1-3 These are Just for Holding the Summary Data Frames !!\nArrival Delays\nflight_data_new4-7 Data Frames Created where Arrival delay is less than greater than equal or not equal to Zero.\ntest4-7 These data frames created the New data frame from subset of data and Does the Aggergation on Month.\nTemp4-7 These are Just for Holding the Summary Data Frames !!\n\nsum_flight is Summary Data Frame which has whole summary aggeration result of above\n-->","b2120bc4":"## Arrival and Delay Status ","42afd3ed":"## Creating Departure Summary Dataframe and Grouping Data","462c94b0":"# Consolidating Data Frames","94e3e942":"## Updating Null Values","302d1169":"### Departure Summary using line plot with different status for all Carriers","af994663":"## Total Flights  ","6239bfa1":"<img height=\"200\" width=\"350\" align=\"right\"  src=\"http:\/\/127.0.0.1:8888\/notebooks\/UPX\/Project\/attachment_Project_Datasets\/Project Datasets\/attachment_Project_1_NYC-Flight_data\/Pictures\/Ppt Pitcures\/Flight_Picture.png\"><\/img>\n ","de7cda50":"### Departue Delays Month Wise ","6cf4b65d":"# Flight Data Introduction","1fac9899":"### Bottom 10 Aircraft in terms of Average Speed .","08f900b7":"## Cleaning Data Frames Created upon to Free Memory","dfa33588":"#### Double-click __here__ for Detailed Explaination.\n<!-- \n#time_hour is Converted to Time as during import this is string Column\n#flight_date is column added to some date manupulation in the code.\n#month1 Column is Name of Month from month Column .\n#Avgspped is Column added to Calculate the Average Speed \n-->","1c84fc46":"### Flight Departed Late and Arrived Late using Barchart","33736565":"## Airport Departure Summary Report ","a332e0ff":"# Cancelled Flight Data Frame","c4f7cad2":"## Monthly and Weekly Summary with Cancelled Flights ","de694c39":"### Departure Delays for Various Carrier","289bb109":"### Cancelled Flights Comparision","cb07f4f8":"### Top 10 Aircraft in terms of Average Speed","05b82000":"## Updating Arrival Delay & Arrival Time\nUpdating Arrival Delay as Difference to Arrival time and scheduled Arrival Time for Null Values \nair time as 65% of differencec of Arrival time and Departure Time","b13dd558":"## Creating Cancelled data Frame ","ce9b1562":"## Addition of Columns in Data Frame for Further Analysis\n","1a1599b3":"### Droping all Temporary Data Frames .","bf9edc82":"## Regerssion Graph for Arrival and Departure Delay ","91f437fa":"## Source and Destination of Various Flights","2775ad10":"## Creating Arrival Summary Dataframe and Grouping Data","6b8e1e54":"## Flight Arrival and Departure on time Corelation","44c4a3af":"# Visulisation Starts from Here ","e9ae360f":"## Various Departure Status of all Carriers using lines plots","f42dd7a7":"## Departure Summary Reports","60bf3ac9":"### Company Wise Arrival Delay ","19e66435":"##  Test Data Frame to Update Subset Data and Apply a validation fuction to it ","ca49cd95":"### Flights Not Departed on Time line plot","63577000":"## Cancelled Flights","64a4cd39":"## Inserting New Columns for Total Flights as Sum of Different Values","ad102110":"### Ontime Late and Ahead of Time Departures for Various Airlines","0f5d5e1c":"## Creating Multiple data For Flight Arrival and Departure Summary Day Wise ","5295b75f":"## Memory Cleaning Function for Droping Test Data Frames Created .","0d6fb4bc":"## Creating Multiple data For Flight Arrival and Departure Summary Month Wise","bb8cdaab":"# Airport Wise Analysis","13327fc5":"## Updating the Test Function result to main function using test values updated.","4d668d30":"# Thanks for completing !!\n\nNotebook created by: <a href = \"https:\/\/www.linkedin.com\/in\/narendrasharma\/\">Narendra Sharma<\/a>\n\n<hr>\nThis notebook Solely for Education and Training and Need not to be reproduced or Copied without expilict permission from Author !!","853c5805":"## Creating and Dataframe as Subset with relavent Columns","10b78715":"## Average Monthly Departure and Arrival Delay","ca1bf64c":"### Average Speed for Different Companies","35bc2788":"### Various Arrival Status of all Carriers using lines plots"}}