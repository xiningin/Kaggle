{"cell_type":{"a7d7026a":"code","556c9a5a":"code","f1457b3d":"code","e472a96a":"code","2465eaf4":"code","dd8adf6b":"code","3db3c6ef":"code","3ca01f3e":"code","c40b7a43":"code","948cfcf1":"code","deae88e4":"code","03b3fb90":"code","2b80b7a0":"code","afec095b":"code","e26c41fe":"code","ff38ee04":"code","11eed5cb":"code","d370b810":"code","539029c3":"code","e4b26e22":"code","90bef061":"code","74e9bc3e":"code","0b61731c":"code","39f29a91":"code","b0b3ce06":"code","e8c25717":"code","38cc169d":"code","030f4e70":"code","4758bf1c":"code","f85a9193":"code","b65e0c7c":"code","46a6eba2":"code","9b72ece3":"code","9d6fec0f":"code","4a59daa5":"code","f0053dd2":"code","8655bbd2":"code","03cd560e":"code","9b69f946":"code","b603d72b":"code","6dc95aec":"code","11de4567":"code","92c90b1d":"code","3affcc0f":"code","33699ee3":"code","306b3a2d":"code","4c2b9749":"code","2b18fa52":"code","cb857f34":"code","7c0e4de1":"code","84b5439f":"code","db7ca7fa":"code","76b055d3":"code","59b57405":"code","6d453158":"code","4ff7b309":"code","219ce89a":"code","d83b3320":"code","cf4c1bf1":"code","530d3026":"code","847b06dd":"code","0ccfc5db":"code","45c3d49e":"code","8539a002":"code","77df048c":"code","3a12cf50":"code","d2f5aada":"code","684c3eba":"code","7c7e0f09":"code","c550f781":"code","c6846f12":"code","26b327f6":"code","b02f50c5":"code","8072f797":"markdown","ea234506":"markdown","bc1ac7de":"markdown","7a0565b6":"markdown","e3451935":"markdown","e6d3b284":"markdown","6e2d036a":"markdown"},"source":{"a7d7026a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","556c9a5a":"import warnings\nwarnings.filterwarnings('ignore')","f1457b3d":"train =pd.read_csv('..\/input\/janata-hack-customer-segmentation\/train.csv')\ntest =pd.read_csv('..\/input\/janata-hack-customer-segmentation\/test.csv')\ntrain['data']='train'\ntest['data']='test'\ndf=pd.concat([train,test],ignore_index=True, sort=False)","e472a96a":"df.shape","2465eaf4":"df.ID = df.ID-458982","dd8adf6b":"df.ID.nunique()","3db3c6ef":"train.ID.nunique()","3ca01f3e":"test.ID.nunique()","c40b7a43":"df.drop('ID',axis=1,inplace=True)","948cfcf1":"trainset = df[df.data=='train']\ntrainset.drop('data', axis =1 ,inplace = True)","deae88e4":"trainset.sample(5)","03b3fb90":"df.isnull().sum()","2b80b7a0":"df.info()","afec095b":"df[df.Ever_Married.isnull()].isnull().sum()","e26c41fe":"df[df.Ever_Married.isnull()].Spending_Score.value_counts()","ff38ee04":"df.loc[ (pd.isnull(df['Ever_Married'])) & (df['Spending_Score'] != 'Low'), 'Ever_Married'] = 'Yes'","11eed5cb":"df[df.Ever_Married.isnull()].isnull().sum()","d370b810":"# lawer ,married\n# healthcare ,unmarried\ndf.loc[ (pd.isnull(df['Ever_Married'])) & (df['Profession'] == 'Lawyer'), 'Ever_Married'] = 'Yes'\ndf.loc[ (pd.isnull(df['Ever_Married'])) & (df['Profession'] == 'Healthcare'), 'Ever_Married'] = 'No'","539029c3":"df[df.Ever_Married.isnull()].isnull().sum()","e4b26e22":"# graduated married\ndf.loc[ (pd.isnull(df['Ever_Married'])) & (df['Graduated'] == 'Yes'), 'Ever_Married'] = 'Yes'\ndf.loc[ (pd.isnull(df['Ever_Married'])) & (df['Graduated'] == 'No'), 'Ever_Married'] = 'No'","90bef061":"df[df.Ever_Married.isnull()].isnull().sum()","74e9bc3e":"# artists graduated\ndf.loc[ (pd.isnull(df['Graduated'])) & (df['Profession'] == 'Artist'), 'Graduated'] = 'Yes'","0b61731c":"df[df.Graduated.isnull()].isnull().sum()","39f29a91":"# married graduated\ndf.loc[ (pd.isnull(df['Graduated'])) & (df['Ever_Married'] == 'Yes'), 'Graduated'] = 'Yes'\ndf.loc[ (pd.isnull(df['Graduated'])) & (df['Ever_Married'] == 'No'), 'Graduated'] = 'No'","b0b3ce06":"df[df.Graduated.isnull()].isnull().sum()","e8c25717":"df[df.Profession.isnull()].isnull().sum()","38cc169d":"# var_1=6 , profession=artist","030f4e70":"df.loc[ (pd.isnull(df['Profession'])) & (df['Var_1']=='Cat_6') ,'Profession'] = 'Artist'","4758bf1c":"df[df.Profession.isnull()].isnull().sum()","f85a9193":"for i in ['Healthcare', 'Engineer', 'Lawyer', 'Entertainment', 'Artist','Executive', 'Doctor', 'Homemaker', 'Marketing']:\n    print(i,'\\n',df[df.Profession == i]['Work_Experience'].median(),'\\n')","b65e0c7c":"df.loc[ (pd.isnull(df['Work_Experience'])) & (df['Profession'] == 'Healthcare'), 'Work_Experience'] = 1\ndf.loc[ (pd.isnull(df['Work_Experience'])) & (df['Profession'] == 'Engineer'), 'Work_Experience'] = 1\ndf.loc[ (pd.isnull(df['Work_Experience'])) & (df['Profession'] == 'Lawyer'), 'Work_Experience'] = 1\ndf.loc[ (pd.isnull(df['Work_Experience'])) & (df['Profession'] == 'Entertainment'), 'Work_Experience'] = 1\ndf.loc[ (pd.isnull(df['Work_Experience'])) & (df['Profession'] == 'Artist'), 'Work_Experience'] = 1\ndf.loc[ (pd.isnull(df['Work_Experience'])) & (df['Profession'] == 'Executive'), 'Work_Experience'] = 1\ndf.loc[ (pd.isnull(df['Work_Experience'])) & (df['Profession'] == 'Doctor'), 'Work_Experience'] = 1\ndf.loc[ (pd.isnull(df['Work_Experience'])) & (df['Profession'] == 'Homemaker'), 'Work_Experience'] = 8\ndf.loc[ (pd.isnull(df['Work_Experience'])) & (df['Profession'] == 'Marketing'), 'Work_Experience'] = 1","46a6eba2":"df['Work_Experience'].fillna(1,inplace=True)","9b72ece3":"#ever_married = yes , family size = 2\ndf.loc[ (pd.isnull(df['Family_Size'])) & (df['Ever_Married'] == 'Yes'), 'Family_Size'] = 2\ndf.loc[ (pd.isnull(df['Family_Size'])) & (df['Ever_Married'] == 'No'), 'Family_Size'] = 1","9d6fec0f":"# fam siz 4 proff healthcare\ndf.loc[ (pd.isnull(df['Profession'])) & (df['Family_Size'] == 4), 'Profession'] = 'Healthcare'","4a59daa5":"df.Profession.fillna(method='ffill',inplace=True)\ndf.Var_1.fillna(method='ffill',inplace=True)","f0053dd2":"df.isnull().sum()","8655bbd2":"trainset = df[df.data=='train']","03cd560e":"X = trainset.drop(['Segmentation','data'],axis=1)\ny = trainset['Segmentation']","9b69f946":"X.shape","b603d72b":"y.shape","6dc95aec":"def target(x):\n    if x == 'A':\n        x=1\n    elif x == 'B':\n        x=2\n    elif x == 'C':\n        x=3\n    elif x == 'D':\n        x=4\n    return(x)\ny = y.apply(target)","11de4567":"y.value_counts()","92c90b1d":"from sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","3affcc0f":"cate_features_index = np.where(X.dtypes != float)[0]\ncate_features_index","33699ee3":"X.Ever_Married.value_counts()","306b3a2d":"X.columns","4c2b9749":"cat_cols = np.array([0, 1, 3, 4, 6, 8])\ncat_cols","2b18fa52":"from catboost import Pool, CatBoostClassifier","cb857f34":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score","7c0e4de1":"# 1st target\nmodelCat = CatBoostClassifier()\nmodelCat.fit(X_train,y_train,cat_features=cate_features_index,eval_set=(X_test,y_test))","84b5439f":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score","db7ca7fa":"y_pred = modelCat.predict(X_test)\nfrom sklearn import metrics  \nprint(metrics.accuracy_score(y_test, y_pred))\nprint(metrics.f1_score(y_test, y_pred, average='weighted'))","76b055d3":"df","59b57405":"def gender(x):\n    if x=='Male':\n        x=1\n    else:\n        x=0\n    return(x)\ndf.Gender = df.Gender.apply(gender)","6d453158":"def yes_no(x):\n    if x=='Yes':\n        x=1\n    else:\n        x=0\n    return(x)\ndf.Ever_Married = df.Ever_Married.apply(yes_no)\ndf.Graduated = df.Graduated.apply(yes_no)","4ff7b309":"df['divorce'] = df['Family_Size']- df['Ever_Married']\ndef divor(x):\n    if x==0:\n        x=1\n    else:\n        x=0\n    return(x)\ndf['divorce'] = df['divorce'].apply(divor)","219ce89a":"df['work'] = df['Work_Experience']\/df['Age']","d83b3320":"df=pd.get_dummies(df,columns=['Profession','Var_1','Spending_Score'])","cf4c1bf1":"df.data.value_counts()","530d3026":"traindata = df[df.data=='train']","847b06dd":"X = traindata.drop(['Segmentation','data'],axis=1)\ny = traindata['Segmentation']","0ccfc5db":"# balancing via SMOTE\nfrom imblearn.over_sampling import SMOTE\nsmote = SMOTE('auto')\nX_sm, y_sm = smote.fit_sample(X,y)\nprint(X_sm.shape, y_sm.shape)","45c3d49e":"from numpy import mean\nfrom numpy import std","8539a002":"from lightgbm import LGBMClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold","77df048c":"model = LGBMClassifier(num_leaves=11,n_estimators=200)\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=42)\nn_scores = cross_val_score(model, X_sm, y_sm, scoring='accuracy', cv=cv, n_jobs=-1, error_score='raise')","3a12cf50":"print('Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))","d2f5aada":"# complte train fit\nmodel.fit(X, y)","684c3eba":"testdata = df[df.data=='test'].drop('data',axis=1)","7c7e0f09":"X_test = testdata.drop('Segmentation',axis=1)","c550f781":"y_pred_testset = model.predict(X_test)","c6846f12":"y_pred_testset","26b327f6":"# pd.DataFrame(y_pred_testset).to_csv('predictions.csv')","b02f50c5":"#seg_et_1=pd.concat([test_ids,seg_et],ignore_index=False,join='outer',axis=1)\n#df=pd.get_dummies(df,columns=['Profession','Var_1','Spending_Score'])","8072f797":"trainset = trainset.apply(myfillna)","ea234506":"# GBC","bc1ac7de":"def myfillna(series):\n    if series.dtype is pd.np.dtype(float):\n        return series.fillna(series.median())\n    elif series.dtype is pd.np.dtype(int):\n        return series.fillna(series.median())\n    elif series.dtype is pd.np.dtype(object):\n        return series.fillna('NaN')\n    else:\n        return series","7a0565b6":"# CatBoost","e3451935":"from sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","e6d3b284":"X = trainset.drop('Segmentation',axis=1)\ny = trainset['Segmentation']","6e2d036a":"# new feature"}}