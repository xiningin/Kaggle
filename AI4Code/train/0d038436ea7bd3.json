{"cell_type":{"33cf5e3e":"code","68deea2d":"code","40c411b0":"code","658f7eba":"code","086e6910":"code","bab2491f":"code","5da94af1":"code","43ee5457":"code","0d5ef233":"code","4fe4469a":"code","1bafc5c6":"code","f7318133":"code","cda54586":"code","3a660f58":"code","a5bed2e6":"code","e5cc630e":"code","681d7ebc":"code","9a24fa34":"code","341c4f2a":"code","021a0dc4":"code","337ff47e":"code","fff6e3db":"code","0a57afdc":"code","e1f80b30":"code","024da5ed":"code","6749c5cb":"code","8f343035":"code","f5e18994":"code","17ca4550":"code","06f598d0":"code","18975271":"code","c068dfe3":"code","63abdc58":"code","9488c8f9":"code","b89199e3":"markdown","1da658d9":"markdown","d4d4057c":"markdown","d3f6533b":"markdown"},"source":{"33cf5e3e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","68deea2d":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","40c411b0":"train.info()\nprint('*'*45)\ntest.info()","658f7eba":"train['Ticket'].value_counts()","086e6910":"train.describe(include=['O'])","bab2491f":"print(train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False))\nsns.countplot(train['Pclass'], hue = train.Survived)","5da94af1":"print(train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False))\nsns.countplot(train['Sex'], hue = train.Survived)","43ee5457":"print(train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False))\nsns.countplot(train['Embarked'], hue = train.Survived)","0d5ef233":"print(train[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False))\nsns.countplot(train['SibSp'], hue = train.Survived)","4fe4469a":"train[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","1bafc5c6":"grid = sns.FacetGrid(train, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","f7318133":"grid = sns.FacetGrid(train, row='Embarked', size=2.2, aspect=1.6)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()","cda54586":"train.columns","3a660f58":"columns = ['Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Fare', 'Embarked']\ndf = train[columns].append(test[columns])","a5bed2e6":"df['Title'] = df.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(df['Title'],df['Sex'])","e5cc630e":"df['Title'] = df['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ndf['Title'] = df['Title'].replace('Mlle', 'Miss')\ndf['Title'] = df['Title'].replace('Ms', 'Miss')\ndf['Title'] = df['Title'].replace('Mme', 'Mrs')","681d7ebc":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\ndf['Title'] = df['Title'].map(title_mapping)\ndf.head()","9a24fa34":"df['FamilySize'] = df['SibSp'] + df['Parch'] + 1","341c4f2a":"df = df.drop(['Parch', 'SibSp'], axis=1)","021a0dc4":"df['Sex'].fillna(df['Sex'].mode(),inplace =True)\ndf['Embarked'].fillna(df['Embarked'].mode(),inplace =True)\ndf['Fare'].fillna(0,inplace =True)","337ff47e":"df = pd.get_dummies(df, columns = ['Sex','Embarked'],drop_first=True)\ndf.drop(['Name'],axis=1,inplace= True)","fff6e3db":"df.head()","0a57afdc":"df.isnull().sum()","e1f80b30":"df['Age'] = df['Age'].round()\ndf['Age'].fillna(df['Age'].mean(),inplace = True)\ndf.isnull().sum()","024da5ed":"df['AgeRange'] = pd.cut(df['Age'],5)","6749c5cb":"df.loc[ df['Age'] <= 16, 'Age'] = 0\ndf.loc[(df['Age'] > 16) & (df['Age'] <= 32), 'Age'] = 1\ndf.loc[(df['Age'] > 32) & (df['Age'] <= 48), 'Age'] = 2\ndf.loc[(df['Age'] > 48) & (df['Age'] <= 64), 'Age'] = 3\ndf.loc[ df['Age'] > 64, 'Age']=4","8f343035":"df.head(7)","f5e18994":"df['FareBand'] = pd.qcut(df['Fare'], 4)\ndf['FareBand']","17ca4550":"df.loc[ df['Fare'] <= 7.91, 'Fare'] = 0\ndf.loc[(df['Fare'] > 7.91) & (df['Fare'] <= 14.454), 'Fare'] = 1\ndf.loc[(df['Fare'] > 14.454) & (df['Fare'] <= 31), 'Fare']   = 2\ndf.loc[df['Fare'] > 31, 'Fare'] = 3\n\ndf = df.drop(['FareBand','AgeRange'], axis=1)\n    \ndf.head(10)","06f598d0":"df['Agec'] = df['Age']*df.Pclass\ndf = df.drop(['Age','Pclass'], axis=1)\ndf.head()","18975271":"y_train = train['Survived']\nx_train = df.loc[:y_train.shape[0]-1]\nx_test = df.loc[y_train.shape[0]-1:]\nx_test.drop(x_test.index[0],inplace = True)","c068dfe3":"df.head()","63abdc58":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import KFold,cross_val_score\nimport xgboost as xgb\n\nmodels = []\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('RF', RandomForestClassifier(n_estimators=10)))\nmodels.append(('SVM', SVC(kernel = 'linear')))\nmodels.append(('XGB', xgb.XGBClassifier(max_depth=3, n_estimators=300, learning_rate=0.05)))\n# evalutate each model in turn\nresults = []\nnames = []\nfor name, model in models:\n    kfold = KFold(n_splits=10)\n    cv_results = cross_val_score(model, x_train, y_train, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","9488c8f9":"model = xgb.XGBClassifier()\nmodel.fit(x_train, y_train)\npredictions = model.predict(x_test)\nsubmission = pd.DataFrame({ 'PassengerId': test['PassengerId'],\n                            'Survived': predictions })\nsubmission.to_csv(\"submission.csv\", index=False)","b89199e3":"> Cabin as lots of null values and PassengerId as insignificant can be dropped","1da658d9":"# Treatment","d4d4057c":"Numeric - Continous: Age, Fare. Discrete: SibSp, Parch, Categorical- Sex,Embarked, String- Ticket,Name","d3f6533b":"Ticket can be dropped since contains lots of categories which seems irrelevant"}}