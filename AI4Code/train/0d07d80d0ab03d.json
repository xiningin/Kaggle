{"cell_type":{"96225f03":"code","e7ec7f68":"code","63d5e5c4":"code","213612ae":"code","059ea141":"code","727fbf39":"code","211ecdf7":"code","f87e4ec0":"code","be29315a":"code","d2de71d9":"code","9168206f":"code","783505fc":"code","6ed629a2":"code","2b62ca57":"code","b12453ae":"code","648f977c":"code","2af3543a":"code","9bef3f89":"code","76639081":"code","b82adfe7":"code","cb33d259":"code","972ac3b0":"code","5b9a28b9":"code","bca0d38f":"code","a418706f":"code","81a32a73":"code","9457d033":"code","112867f6":"code","6073dca9":"code","cf5a734a":"code","0233b771":"code","3ed92ef7":"code","a846b772":"code","18689d9e":"code","a7c05dde":"code","2b372066":"code","d81f11b9":"code","3296202c":"code","f317c5ce":"code","5e8630c2":"code","d8083b04":"code","76c6710d":"code","6aef9cb8":"code","7a647375":"code","f3386f6e":"code","1be06ed8":"code","c41065ad":"code","ad2e6aa5":"code","c6c49181":"code","9a4dec81":"code","25037773":"code","1d2548d3":"code","2f35e37e":"code","2a86a88c":"code","9c153c55":"code","220a6e49":"markdown","43d945b5":"markdown","83e0eb5b":"markdown","619fbb51":"markdown","8bda2e58":"markdown","5d92079e":"markdown","e7ae2f4a":"markdown","64b3b74e":"markdown","6d50f104":"markdown","19743ece":"markdown","2cdddf12":"markdown","ff7b02e8":"markdown","2615f22e":"markdown","b922ab4f":"markdown","0c10f617":"markdown","6ae1f91f":"markdown","c5336762":"markdown","4384ca93":"markdown","779b6931":"markdown","697dd6bf":"markdown","2fcce469":"markdown","1381e649":"markdown","3768f25b":"markdown"},"source":{"96225f03":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline","e7ec7f68":"train = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/sample_submission.csv')","63d5e5c4":"train.shape, test.shape, sample_submission.shape","213612ae":"train.info()","059ea141":"for col, values in train.iteritems():\n    num_uniques = values.nunique()\n    print ('{name}: {num_unique}'.format(name=col, num_unique=num_uniques))\n    print (values.unique())\n    print ('\\n')","727fbf39":"train.describe(include='O')","211ecdf7":"### for visualization\ntrain['income_cat'] = train.income.map({'>50K': 1, '<=50K': 0})","f87e4ec0":"f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain['income'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('income')\nax[0].set_ylabel('')\nsns.countplot('income',data=train,ax=ax[1])\nax[1].set_title('income')\nplt.show()","be29315a":"train['workclass'].value_counts()","d2de71d9":"train.groupby(['workclass','income'])['income'].count()","9168206f":"f,ax=plt.subplots(1,2,figsize=(20,8))\ntrain[['workclass','income_cat']].groupby(['workclass']).mean().plot.bar(ax=ax[0])\nax[0].set_title('income_cat vs workclass')\n\nchart = sns.countplot(x = 'workclass',hue='income_cat',data=train, ax=ax[1])\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45,\n                  horizontalalignment='right',\n                  fontweight='light',\n                  fontsize='large')\nax[1].set_title('workclass : High Income vs Low Income')\nplt.show()","783505fc":"pd.crosstab(train.workclass,train.income,margins=True).style.background_gradient(cmap='summer_r')","6ed629a2":"train['education'].value_counts()","2b62ca57":"train.groupby(['education','income'])['income'].count()","b12453ae":"f,ax=plt.subplots(1,2,figsize=(20,8))\ntrain[['education','income_cat']].groupby(['education']).mean().plot.bar(ax=ax[0])\nax[0].set_title('income_cat vs education')\n\nchart = sns.countplot(x = 'education',hue='income_cat',data=train, ax=ax[1])\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45,\n                  horizontalalignment='right',\n                  fontweight='light',\n                  fontsize='large')\nax[1].set_title('education : High Income vs Low Income')\nplt.show()","648f977c":"pd.crosstab(train.education,train.income,margins=True).style.background_gradient(cmap='summer_r')","2af3543a":"train['marital_status'].value_counts()","9bef3f89":"train.groupby(['marital_status','income'])['income'].count()","76639081":"f,ax=plt.subplots(1,2,figsize=(20,8))\ntrain[['marital_status','income_cat']].groupby(['marital_status']).mean().plot.bar(ax=ax[0])\nax[0].set_title('income_cat vs marital_status')\n\nchart = sns.countplot(x = 'marital_status',hue='income_cat',data=train, ax=ax[1])\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45,\n                  horizontalalignment='right',\n                  fontweight='light',\n                  fontsize='large')\nax[1].set_title('marital_status : High Income vs Low Income')\nplt.show()","b82adfe7":"pd.crosstab(train.marital_status,train.income,margins=True).style.background_gradient(cmap='summer_r')\n\n","cb33d259":"train['occupation'].value_counts()\n","972ac3b0":"train.groupby(['occupation','income'])['income'].count()","5b9a28b9":"f,ax=plt.subplots(1,2,figsize=(20,8))\ntrain[['occupation','income_cat']].groupby(['occupation']).mean().plot.bar(ax=ax[0])\nax[0].set_title('income_cat vs occupation')\n\nchart = sns.countplot(x = 'occupation',hue='income_cat',data=train, ax=ax[1])\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45,\n                  horizontalalignment='right',\n                  fontweight='light',\n                  fontsize='large')\nax[1].set_title('occupation : High Income vs Low Income')\nplt.show()","bca0d38f":"pd.crosstab(train.occupation,train.income,margins=True).style.background_gradient(cmap='summer_r')","a418706f":"train['relationship'].value_counts()","81a32a73":"train.groupby(['relationship','income'])['income'].count()","9457d033":"f,ax=plt.subplots(1,2,figsize=(20,8))\ntrain[['relationship','income_cat']].groupby(['relationship']).mean().plot.bar(ax=ax[0])\nax[0].set_title('income_cat vs relationship')\n\nchart = sns.countplot(x = 'relationship',hue='income_cat',data=train, ax=ax[1])\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45,\n                  horizontalalignment='right',\n                  fontweight='light',\n                  fontsize='large')\nax[1].set_title('relationship : High Income vs Low Income')\nplt.show()","112867f6":"pd.crosstab(train.relationship,train.income,margins=True).style.background_gradient(cmap='summer_r')","6073dca9":"train['race'].value_counts()\n","cf5a734a":"train.groupby(['race','income'])['income'].count()","0233b771":"\nf,ax=plt.subplots(1,2,figsize=(20,8))\ntrain[['race','income_cat']].groupby(['race']).mean().plot.bar(ax=ax[0])\nax[0].set_title('income_cat vs race')\n\nchart = sns.countplot(x = 'race',hue='income_cat',data=train, ax=ax[1])\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45,\n                  horizontalalignment='right',\n                  fontweight='light',\n                  fontsize='large')\nax[1].set_title('race : High Income vs Low Income')\nplt.show()\n","3ed92ef7":"pd.crosstab(train.race,train.income,margins=True).style.background_gradient(cmap='summer_r')","a846b772":"f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain[['sex','income_cat']].groupby(['sex']).mean().plot.bar(ax=ax[0])\nax[0].set_title('High Income vs Low Income')\nsns.countplot('sex',hue='income_cat',data=train,ax=ax[1])\nax[1].set_title('sex: High Income vs Low Income')\nplt.show()","18689d9e":"train['native_country'].value_counts()","a7c05dde":"train.groupby(['native_country','income'])['income'].count()","2b372066":"f,ax=plt.subplots(1,2,figsize=(20,8))\ntrain[['native_country','income_cat']].groupby(['native_country']).mean().plot.bar(ax=ax[0])\nax[0].set_title('income_cat vs native_country')\n\nchart = sns.countplot(x = 'native_country',hue='income_cat',data=train, ax=ax[1])\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45,\n                  horizontalalignment='right',\n                  fontweight='light',\n                  fontsize='large')\nax[1].set_title('native_country : High Income vs Low Income')\nplt.show()\n","d81f11b9":"pd.crosstab(train.native_country,train.income,margins=True).style.background_gradient(cmap='summer_r')\n","3296202c":"print('Highest age is:',train['age'].max(), 'years_old')\nprint('Lowest age is:',train['age'].min(), 'years_old')\nprint('Average age is:',train['age'].mean(), 'years_old')","f317c5ce":"age_high_zero_died = train[(train[\"age\"] > 0) & (train[\"income_cat\"] == 0)]\nage_high_zero_surv = train[(train[\"age\"] > 0) & (train[\"income_cat\"] == 1)]\n\n\nplt.figure(figsize=(20,8))\n\n\nsns.distplot(age_high_zero_surv[\"age\"], bins=24, color='g')\nsns.distplot(age_high_zero_died[\"age\"], bins=24, color='r')\nplt.title(\"Distribuition and density by age\",fontsize=20)\nplt.xlabel(\"age\",fontsize=15)\nplt.ylabel(\"Distribuition High Income and Low Income\",fontsize=15)\nplt.show()","5e8630c2":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"race\",\"age\", hue=\"income_cat\", data=train,split=True,ax=ax[0])\nax[0].set_title('race and age vs income')\nax[0].set_yticks(range(0,100,10))\nsns.violinplot(\"workclass\",\"age\", hue=\"income_cat\", data=train,split=True,ax=ax[1])\nax[1].set_title('workclass and age vs income_cat')\nax[1].set_yticks(range(0,100,10))\nplt.show()","d8083b04":"print('Highest fnlwgt is:',train['fnlwgt'].max())\nprint('Lowest fnlwgt is:',train['fnlwgt'].min())\nprint('Average fnlwgt is:',train['fnlwgt'].mean())","76c6710d":"fnlwgt_high_zero_died = train[(train[\"fnlwgt\"] > 0) & (train[\"income_cat\"] == 0)]\nfnlwgt_high_zero_surv = train[(train[\"fnlwgt\"] > 0) & (train[\"income_cat\"] == 1)]\n\n\nplt.figure(figsize=(20,8))\n\n\nsns.distplot(fnlwgt_high_zero_died[\"fnlwgt\"], bins=24, color='g')\nsns.distplot(fnlwgt_high_zero_surv[\"fnlwgt\"], bins=24, color='r')\nplt.title(\"Distribuition and density by fnlwgt\",fontsize=20)\nplt.xlabel(\"fnlwgt\",fontsize=15)\nplt.ylabel(\"Distribuition High Income and Low Income\",fontsize=15)\nplt.show()","6aef9cb8":"print('Highest capital_gain is:',train['capital_gain'].max() , '$')\nprint('Lowest capital_gain is:',train['capital_gain'].min(), '$')\nprint('Average capital_gain is:',train['capital_gain'].mean(), '$')","7a647375":"capital_gain_high_zero_died = train[(train[\"capital_gain\"] > 0) & (train[\"income_cat\"] == 0)]\ncapital_gain_high_zero_surv = train[(train[\"capital_gain\"] > 0) & (train[\"income_cat\"] == 1)]\n\n\nplt.figure(figsize=(20,8))\n\n\nsns.distplot(capital_gain_high_zero_died[\"capital_gain\"], bins=24, color='g')\nsns.distplot(capital_gain_high_zero_surv[\"capital_gain\"], bins=24, color='r')\nplt.title(\"Distribuition and density by capital_gain\",fontsize=20)\nplt.xlabel(\"capital_gain\",fontsize=15)\nplt.ylabel(\"Distribuition High Income and Low Income\",fontsize=15)\nplt.show()","f3386f6e":"print('Highest capital_loss is:',train['capital_loss'].max() , '$')\nprint('Lowest capital_loss is:',train['capital_loss'].min(), '$')\nprint('Average capital_loss is:',train['capital_loss'].mean(), '$')","1be06ed8":"capital_loss_high_zero_died = train[(train[\"capital_loss\"] > 0) & (train[\"income_cat\"] == 0)]\ncapital_loss_high_zero_surv = train[(train[\"capital_loss\"] > 0) & (train[\"income_cat\"] == 1)]\n\n\nplt.figure(figsize=(20,8))\n\n\nsns.distplot(capital_loss_high_zero_died[\"capital_loss\"], bins=24, color='g')\nsns.distplot(capital_loss_high_zero_surv[\"capital_loss\"], bins=24, color='r')\nplt.title(\"Distribuition and density by capital_loss\",fontsize=20)\nplt.xlabel(\"capital_loss\",fontsize=15)\nplt.ylabel(\"Distribuition High Income and Low Income\",fontsize=15)\nplt.show()","c41065ad":"print('Highest hours_per_week is:',train['hours_per_week'].max() , 'hours')\nprint('Lowest hours_per_week is:',train['hours_per_week'].min(), 'hours')\nprint('Average hours_per_week is:',train['hours_per_week'].mean(), 'hours')","ad2e6aa5":"hours_high_zero_died = train[(train[\"hours_per_week\"] > 0) & (train[\"income_cat\"] == 0)]\nhours_high_zero_surv = train[(train[\"hours_per_week\"] > 0) & (train[\"income_cat\"] == 1)]\n\n\nplt.figure(figsize=(20,8))\n\nsns.distplot(capital_loss_high_zero_died[\"hours_per_week\"], bins=24, color='g')\nsns.distplot(capital_loss_high_zero_surv[\"hours_per_week\"], bins=24, color='r')\nplt.title(\"Distribuition and density by hours_per_week\",fontsize=20)\nplt.xlabel(\"hours_per_week\",fontsize=15)\nplt.ylabel(\"Distribuition High Income and Low Income\",fontsize=15)\nplt.show()","c6c49181":"train.info()","9a4dec81":"## Label Encoding\n## Categorize category features\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfor df in [train,test]:\n    df['workclass'] = le.fit_transform(df['workclass'].astype(str))\n    df['marital_status'] = le.fit_transform(df['marital_status'].astype(str))\n    df['education'] = le.fit_transform(df['education'].astype(str))\n    df['occupation'] = le.fit_transform(df['occupation'].astype(str))\n    df['race'] = le.fit_transform(df['race'].astype(str))\n    df['sex'] = le.fit_transform(df['sex'].astype(str))\n    df['relationship'] = le.fit_transform(df['native_country'].astype(str))\n    df['native_country'] = le.fit_transform(df['native_country'].astype(str))\n    \n#   cat_features = ['workclass','marital_status','education','occupation','race','sex','relationship','native_country']\n\n\n# for i in enumerate (cat_features):\n#    ca = i[1]\n#    train[ca] = train[ca].astype('category')\n","25037773":"train['income'] = train.income.map({'>50K': 1, '<=50K': 0})","1d2548d3":"for df in [train, test]:\n    df.drop('education_num', axis= 1 , inplace  = True)","2f35e37e":"train.drop('income_cat', axis= 1 , inplace  = True)","2a86a88c":"train.info()","9c153c55":"########## Export\ntrain.to_pickle('train.pkl')\ntest.to_pickle('test.pkl')","220a6e49":"### Age","43d945b5":"## Data Preprocessing","83e0eb5b":"### fnlwgt","619fbb51":"### Education","8bda2e58":"## Type of Features \n\n* ***Categorical Features*** : workclass, education, marital_status, occupation, relationship, race, sex , native_country\n* ***Continuous Features*** : age, fnlwgt, capital_gain, capital_loss, hours_per_week","5d92079e":"### Capital_loss","e7ae2f4a":"### Capital_gain","64b3b74e":"### Import","6d50f104":"### Occupation","19743ece":"### Dependencies","2cdddf12":"## Continuous Features","ff7b02e8":"### Marital_status","2615f22e":"### race","b922ab4f":"### Data Description\n\n* id\n* age : \ub098\uc774\n* workclass : \uace0\uc6a9 \ud615\ud0dc\n* fnlwgt : \uc0ac\ub78c \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58 (final weight\uc758 \uc57d\uc790)\n* education : \uad50\uc721 \uc218\uc900\n* education_num : \uad50\uc721 \uc218\uc900 \uc218\uce58\n* marital_status: \uacb0\ud63c \uc0c1\ud0dc\n* occupation : \uc5c5\uc885\n* relationship : \uac00\uc871 \uad00\uacc4\n* race : \uc778\uc885\n* sex : \uc131\ubcc4\n* capital_gain : \uc591\ub3c4 \uc18c\ub4dd\n* capital_loss : \uc591\ub3c4 \uc190\uc2e4\n* hours_per_week : \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04\n* native_country : \uad6d\uc801\n* income : \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12)\n* > 50K : 1\n* <=50K : 0","0c10f617":"### hours_per_week","6ae1f91f":"### native_country","c5336762":"## Categorical Features","4384ca93":"### Sex","779b6931":"### WorkClass","697dd6bf":"## Basic infos","2fcce469":"### Relationship","1381e649":"### Export","3768f25b":"### Drop duplicated columns"}}