{"cell_type":{"8aa94791":"code","5d37b13d":"code","0610a243":"code","80c9fef4":"code","6d0b373b":"code","1e091a99":"code","4e1becbf":"code","29367d24":"markdown"},"source":{"8aa94791":"import numpy as np\nimport pandas as pd\nimport math\nimport random\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport time","5d37b13d":"#Generate undirected graphs of size 2^n where the probability of an edge is 1\/2\ndef gen_graph(size):\n    n = pow(2,size)\n    adj_mat = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(0)\n        adj_mat.append(row)\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            adj_mat[i][j] = random.randint(0,1)\n            adj_mat[j][i] = adj_mat[i][j]\n    \n    adj_list = gen_adj_list(adj_mat)\n    return adj_list, adj_mat\n\ndef gen_adj_list(adj_mat):\n    adj_list = []\n    for i in range(len(adj_mat)):\n        edge_list = []\n        for j in range(len(adj_mat)):\n            if adj_mat[i][j] == 1:\n                edge_list.append(j)\n        adj_list.append(edge_list) \n    \n    return adj_list","0610a243":"def draw_graph(adj_mat):\n    G = nx.DiGraph() \n    rows = len(adj_mat)\n    cols = rows\n    for i in range(rows): \n        for j in range( cols): \n            if adj_mat[i][j] == 1: \n                G.add_edge(i,j) \n    nx.draw( G ) \n    plt.show()                     ","80c9fef4":"#Triangle Identification with Adjacency Matrix\ndef triangle_adj_mat(adj_mat):\n    n = len(adj_mat)\n    for i in range(n-2):\n        for j in range(i + 1,n - 1):\n            if adj_mat[i][j] == 1:\n                for k in range(j + 1,n):\n                    if adj_mat[i][k] == 1 and adj_mat[j][k] == 1:\n                        return True   \n    return False","6d0b373b":"#Triangle Identification with Adjacency Lists\ndef triangle_adj_list(adj_list):\n    adj_mat = []\n    for i in range(len(adj_list)):\n        edge = []\n        for j in range(len(adj_list)):\n            edge.append(0)\n        adj_mat.append(edge)\n    for i in range(len(adj_list)):\n        for j in adj_list[i]:\n            adj_mat[i][j] = 1\n            adj_mat[j][i] = 1\n    return(triangle_adj_mat(adj_mat))","1e091a99":"import time\ndata_list = []\ndata_mat = []\nfor i in range(4):\n    adj_list, adj_mat = gen_graph(i)\n    start_time = time.time()\n    triangle_adj_list(adj_list)\n    end_time = time.time()\n    data_list.append([pow(2,i),end_time-start_time])\n    \n    start_time = time.time()\n    triangle_adj_mat(adj_mat)  \n    end_time = time.time()\n    data_mat.append([pow(2,i),end_time-start_time])","4e1becbf":"df_list = pd.DataFrame(data_list,columns=['x','y'])\ndf_mat = pd.DataFrame(data_mat,columns=['x','y'])\n\ndf_list_log = df_list.apply(lambda x:np.log2(x))\ndf_mat_log = df_mat.apply(lambda x:np.log2(x))\n\nplt.plot(df_list['x'],df_list['y'], '-o')\nplt.show()\nplt.plot(df_mat['x'],df_mat['y'], '-o')\nplt.show()\n\nplt.plot(df_list_log['x'],df_list_log['y'], '-o')\nplt.show()\nplt.plot(df_mat_log['x'],df_mat_log['y'], '-o')\nplt.show()","29367d24":"CSE 202: HW1 3.4"}}