{"cell_type":{"d3c411d0":"code","7205cb1e":"code","ba80e3ee":"code","aaad0b8d":"code","66f4c872":"code","4efb3875":"code","55073ea6":"code","bce0f807":"code","de7c6bee":"code","25562d34":"code","87b21475":"code","4e2bc256":"code","c01383be":"code","b4336331":"code","bfcc24d7":"code","8c0c234f":"code","e3f4e400":"code","bea99ca3":"markdown","2522aae3":"markdown","3345d9dd":"markdown","1ad9ec62":"markdown","20d0ffe3":"markdown","4ebc2483":"markdown","064d5dff":"markdown","024e1d30":"markdown","88e1ab1c":"markdown","f9b03651":"markdown","9c7a93ba":"markdown","915a031f":"markdown"},"source":{"d3c411d0":"\"\"\"\nLibraries\n\"\"\"\n\n!pip install rank_bm25 -q\n\nimport numpy as np\nimport pandas as pd \nfrom pathlib import Path, PurePath\n\nimport nltk\nfrom nltk.corpus import stopwords\nimport re\nimport string\nimport torch\n\nfrom rank_bm25 import BM25Okapi # Search engine","7205cb1e":"\"\"\"\nLoad metadata df\n\"\"\"\n\ninput_dir = PurePath('..\/input\/CORD-19-research-challenge')\nmetadata_path = input_dir \/ 'metadata.csv'\nmetadata_df = pd.read_csv(metadata_path, low_memory=False)\nmetadata_df = metadata_df.dropna(subset=['abstract', 'title']) \\\n                            .reset_index(drop=True)","ba80e3ee":"from rank_bm25 import BM25Okapi\nnltk.download('stopwords')\nnltk.download('punkt')\nenglish_stopwords = list(set(stopwords.words('english')))","aaad0b8d":"class CovidSearchEngine:\n    \"\"\"\n    Simple CovidSearchEngine.\n    \"\"\"\n    \n    def remove_special_character(self, text):\n        #Remove special characters from text string\n        return text.translate(str.maketrans('', '', string.punctuation))\n\n    def tokenize(self, text):\n        # tokenize text\n        words = nltk.word_tokenize(text)\n        return list(set([word for word in words \n                         if len(word) > 1\n                         and not word in english_stopwords\n                         and not word.isnumeric() \n                        ])\n                   )\n    \n    def preprocess(self, text):\n        # Clean and tokenize text input\n        return self.tokenize(self.remove_special_character(text.lower()))\n\n\n    def __init__(self, corpus: pd.DataFrame):\n        self.corpus = corpus\n        self.columns = corpus.columns\n        \n        raw_search_str = self.corpus.abstract.fillna('') + ' ' \\\n                            + self.corpus.title.fillna('')\n        \n        self.index = raw_search_str.apply(self.preprocess).to_frame()\n        self.index.columns = ['terms']\n        self.index.index = self.corpus.index\n        self.bm25 = BM25Okapi(self.index.terms.tolist())\n    \n    def search(self, query, num):\n        \"\"\"\n        Return top `num` results that better match the query\n        \"\"\"\n        # obtain scores\n        search_terms = self.preprocess(query) \n        doc_scores = self.bm25.get_scores(search_terms)\n        \n        # sort by scores\n        ind = np.argsort(doc_scores)[::-1][:num] \n        \n        # select top results and returns\n        results = self.corpus.iloc[ind][self.columns]\n        results['score'] = doc_scores[ind]\n        results = results[results.score > 0]\n        return results.reset_index()","66f4c872":"cse = CovidSearchEngine(metadata_df)","4efb3875":"!pip install transformers","55073ea6":"\"\"\"\nDownload pre-trained QA model\n\"\"\"\n\nimport torch\nfrom transformers import BertTokenizer\nfrom transformers import BertForQuestionAnswering\n\ntorch_device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nBERT_SQUAD = 'bert-large-uncased-whole-word-masking-finetuned-squad'\n\nmodel = BertForQuestionAnswering.from_pretrained(BERT_SQUAD)\ntokenizer = BertTokenizer.from_pretrained(BERT_SQUAD)\n\nmodel = model.to(torch_device)\nmodel.eval()\n\nprint()","bce0f807":"def answer_question(question, context):\n    # answer question given question and context\n    encoded_dict = tokenizer.encode_plus(\n                        question, context,\n                        add_special_tokens = True,\n                        max_length = 256,\n                        pad_to_max_length = True,\n                        return_tensors = 'pt'\n                   )\n    \n    input_ids = encoded_dict['input_ids'].to(torch_device)\n    token_type_ids = encoded_dict['token_type_ids'].to(torch_device)\n    \n    start_scores, end_scores = model(input_ids, token_type_ids=token_type_ids)\n\n    all_tokens = tokenizer.convert_ids_to_tokens(input_ids[0])\n    start_index = torch.argmax(start_scores)\n    end_index = torch.argmax(end_scores)\n    \n    answer = tokenizer.convert_tokens_to_string(all_tokens[start_index:end_index+1])\n    answer = answer.replace('[CLS]', '')\n    return answer","de7c6bee":"# adapted from https:\/\/www.kaggle.com\/dirktheeng\/anserini-bert-squad-for-semantic-corpus-search\n\ncovid_kaggle_questions = {\n\"data\":[\n          {\n              \"task\": \"What is known about transmission, incubation, and environmental stability?\",\n              \"questions\": [\n                  \"Is the virus transmitted by aerisol, droplets, food, close contact, fecal matter, or water?\",\n                  \"How long is the incubation period for the virus?\",\n                  \"Can the virus be transmitted asymptomatically or during the incubation period?\",\n                  \"How does weather, heat, and humidity affect the tramsmission of 2019-nCoV?\",\n                  \"How long can the 2019-nCoV virus remain viable on common surfaces?\"\n              ]\n          },\n        {\n              \"task\":  \"transmission, incubation, and environmental stability - Part2\",\n              \"questions\": [\n                  \"How long are individual contagious after recovery?\",\n                  \"How does incubation period vary with age?\",\n                  \"How does incubation period vary with health status?\",\n                  \"Can the virus be transmitted asymptomatically or during the incubation period to children?\"\n              ]\n          },\n        {\n              \"task\":  \"transmission, incubation, and environmental stability - Part3\",\n              \"questions\": [\n                  \"Is there a seasonality for transmission?\",\n                  \"How does the virus persist on surfaces like copper, stainless steel or plastic?\",\n                  \"What are the tools and studies to monitor phenotypic change and potential adaptation of the virus?\",\n                  \"How effective are movement control strategies to prevent secondary transmission in health care and community settings?\"\n                  \"How effective are personal protective equipment (PPE)?\"\n                  \"What is the role of the environment in transmission?\"\n              ]\n          }\n      ]\n}","25562d34":"NUM_CONTEXT_FOR_EACH_QUESTION = 10\n\n\ndef get_all_context(query, num_results):\n    # Return ^num_results' papers that better match the query\n    \n    papers_df = cse.search(query, num_results)\n    return papers_df['abstract'].str.replace(\"Abstract\", \"\").tolist()\n\n\ndef get_all_answers(question, all_contexts):\n    # Ask the same question to all contexts (all papers)\n    \n    all_answers = []\n    \n    for context in all_contexts:\n        all_answers.append(answer_question(question, context))\n    return all_answers\n\n\ndef create_output_results(question, \n                          all_contexts, \n                          all_answers, \n                          summary_answer='', \n                          summary_context=''):\n    # Return results in json format\n    \n    def find_start_end_index_substring(context, answer):   \n        search_re = re.search(re.escape(answer.lower()), context.lower())\n        if search_re:\n            return search_re.start(), search_re.end()\n        else:\n            return 0, len(context)\n        \n    output = {}\n    output['question'] = question\n    output['summary_answer'] = summary_answer\n    output['summary_context'] = summary_context\n    results = []\n    for c, a in zip(all_contexts, all_answers):\n\n        span = {}\n        span['context'] = c\n        span['answer'] = a\n        span['start_index'], span['end_index'] = find_start_end_index_substring(c,a)\n\n        results.append(span)\n    \n    output['results'] = results\n        \n    return output\n\n    \ndef get_results(question, \n                summarize=False, \n                num_results=NUM_CONTEXT_FOR_EACH_QUESTION,\n                verbose=True):\n    # Get results\n\n    all_contexts = get_all_context(question, num_results)\n    \n    all_answers = get_all_answers(question, all_contexts)\n    \n    if summarize:\n        # NotImplementedYet\n        summary_answer = get_summary(all_answers)\n        summary_context = get_summary(all_contexts)\n    \n    return create_output_results(question, \n                                 all_contexts, \n                                 all_answers)","87b21475":"all_tasks = []\n\nfor i, t in enumerate(covid_kaggle_questions['data']):\n    print(\"Answering questions to task {}. ...\".format(i+1))\n    answers_to_question = []\n    for q in t['questions']:\n            answers_to_question.append(get_results(q, verbose=False))\n    task = {}\n    task['task'] = t['task']\n    task['questions'] = answers_to_question\n    \n    all_tasks.append(task)\n\nall_answers = {}\nall_answers['data'] = all_tasks","4e2bc256":"from IPython.display import display, Markdown, Latex, HTML\n\ndef layout_style():\n    style = \"\"\"\n        div {\n            color: black;\n        }\n        .single_answer {\n            border-left: 3px solid #dc7b15;\n            padding-left: 10px;\n            font-family: Arial;\n            font-size: 16px;\n            color: #777777;\n            margin-left: 5px;\n\n        }\n        .answer{\n            color: #dc7b15;\n        }\n        .question_title {\n            color: grey;\n            display: block;\n            text-transform: none;\n        }      \n        div.output_scroll { \n            height: auto; \n        }\n    \"\"\"\n    return \"<style>\" + style + \"<\/style>\"\n\ndef dm(x): display(Markdown(x))\ndef dh(x): display(HTML(layout_style() + x))","c01383be":"def display_single_context(context, start_index, end_index):\n    \n    before_answer = context[:start_index]\n    answer = context[start_index:end_index]\n    after_answer = context[end_index:]\n\n    content = before_answer + \"<span class='answer'>\" + answer + \"<\/span>\" + after_answer\n\n    return dh(\"\"\"<div class=\"single_answer\">{}<\/div>\"\"\".format(content))\n\ndef display_question_title(question):\n    return dh(\"<h2 class='question_title'>{}<\/h2>\".format(question.capitalize()))\n\n\ndef display_all_contexts(index, question):\n    \n    def answer_not_found(context, start_index, end_index):\n        return (start_index == 0 and len(context) == end_index) or (start_index == 0 and end_index == 0)\n\n    display_question_title(str(index + 1) + \". \" + question['question'].capitalize())\n    \n    # display context\n    for i in question['results']:\n        if answer_not_found(i['context'], i['start_index'], i['end_index']):\n            continue # skip not found questions\n        display_single_context(i['context'], i['start_index'], i['end_index'])\n\ndef display_task_title(index, task):\n    task_title = \"Task \" + str(index) + \": \" + task\n    return dh(\"<h1 class='task_title'>{}<\/h1>\".format(task_title))\n\ndef display_single_task(index, task):\n    \n    display_task_title(index, task['task'])\n    \n    for i, question in enumerate(task['questions']):\n        display_all_contexts(i, question)","b4336331":"task = 1\ndisplay_single_task(task, all_tasks[task-1])","bfcc24d7":"task = 2\ndisplay_single_task(task, all_tasks[task-1])","8c0c234f":"task = 3\ndisplay_single_task(task, all_tasks[task-1])","e3f4e400":"import json\nwith open(\"covid_kaggle_answer_from_qa.json\", \"w\") as f:\n    json.dump(all_answers, f)","bea99ca3":"# Question-Answering Model\n\nDownload the pre-trained BERT model and install the dependencies","2522aae3":"Created by a [TransUnion](http:\/\/www.transunion.com) data scientist that believes that information can be used to change our world for the better. #InformationForGood","3345d9dd":"# Task and questions\n\nDictionary to store task and questions","1ad9ec62":"# Question & Answering Model\n\nAdapted from - https:\/\/www.kaggle.com\/jonathanbesomi\/a-qa-model-to-answer-them-all\n\nThe 3 important aspects of this are - *question*, *context*, *answer*\n\nModel input - question & context \n\nModel output - answer","20d0ffe3":"# Export Results\n\nExport the results to a json dump.","4ebc2483":"# Show Results\n\nDefine helper functions to better visualize.","064d5dff":"Task Details\nWhat is known about transmission, incubation, and environmental stability? What do we know about natural history, transmission, and diagnostics for the virus? What have we learned about infection prevention and control?\n\nSpecifically, we want to know what the literature reports about:\n\n* Range of incubation periods for the disease in humans (and how this varies across age and health status) and how long individuals are contagious, even after recovery.\n* Prevalence of asymptomatic shedding and transmission (e.g., particularly children).\n* Seasonality of transmission.\n* Physical science of the coronavirus (e.g., charge distribution, adhesion to hydrophilic\/phobic surfaces, environmental survival to inform decontamination efforts for affected areas and provide information about viral shedding).\n* Persistence and stability on a multitude of substrates and sources (e.g., nasal discharge, sputum, urine, fecal matter, blood).\n* Persistence of virus on surfaces of different materials (e,g., copper, stainless steel, plastic).\n* Natural history of the virus and shedding of it from an infected person\n* Implementation of diagnostics and products to improve clinical processes\n* Disease models, including animal models for infection, disease and transmission\n* Tools and studies to monitor phenotypic change and potential adaptation of the virus\n* Immune response and immunity\n* Effectiveness of movement control strategies to prevent secondary transmission in health care and community settings\n* Effectiveness of personal protective equipment (PPE) and its usefulness to reduce risk of transmission in health care and community settings\n* Role of the environment in transmission","024e1d30":"# Compute Answers\n\nThe get_result() function takes in the question and returns the context, answer and start & end index for the answer in the context which can be highlighted.\n\nThe questions in the dictionary are passed to the get_result() in a loop and the answers appended.","88e1ab1c":"The answer_question() function, based on the question and the context obtained using the search engine passed returns the answer","f9b03651":"# Load dataset & libraries","9c7a93ba":"For a question & answering model you need a dataset to train the model and the most popular one is SQuAD - The Stanford Question Answering Dataset. \n\nFor context, we use a search engine to filter the data and get a reduced set of relevant context. Search engine used is Okapi BM25. This is a ranking function used to estimate the relevance of documents given a search query. This ranking function is based on bag-of-words retrieval function.\n\nBERT (Bidirectional Encoder Representation from Transformers) has shown great performance for a multitude of Natural Language Understanding tasks. The BERT pre-trained model on the SQuAD dataset is used here to obtain the answers based on the question and context.\n","915a031f":"# Covid Search Engine\n\nThe main method prepocesses the metadata (title+abstract) and indexes the data. Once indexed, similar papers can be searched using the search(question) function."}}