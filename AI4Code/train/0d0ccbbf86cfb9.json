{"cell_type":{"d8b06cc2":"code","08cf8ad4":"code","007adc0c":"code","d0095d0f":"code","d885eb5c":"code","8692447d":"code","3df85cd1":"code","a9264990":"code","c186041c":"code","2cf216ed":"code","3f22334a":"code","26caad31":"code","7aeb4ecf":"code","14ab3f6c":"code","f82f3ddf":"code","89b150b8":"code","79d93e98":"code","96451b14":"code","11626c69":"code","b795a80b":"code","d52dc797":"markdown","9e5c9776":"markdown","6ea24eeb":"markdown","3e034ba9":"markdown","45cfbd8c":"markdown","f475973c":"markdown","1db8f625":"markdown","bdbbb69d":"markdown","585af17d":"markdown","f60e7843":"markdown","e9bd216e":"markdown","c78f03e6":"markdown","8798161e":"markdown","541c8924":"markdown","6e6f34e2":"markdown","01277c04":"markdown","5c35eac7":"markdown","720ff500":"markdown","97e45076":"markdown","4a1ef4c8":"markdown","25902f6a":"markdown"},"source":{"d8b06cc2":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, Lambda, MaxPooling2D # convolution layers\nfrom keras.layers import Dense, Dropout, Flatten # core layers\n\nfrom keras.layers.normalization import BatchNormalization\n\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom keras.utils.np_utils import to_categorical","08cf8ad4":"import os\ntrain = pd.read_csv('..\/input\/mnist-split\/train.csv\/train.csv')\ntest = pd.read_csv('..\/input\/mnist-split\/test.csv\/test.csv')\nprint(\"Data Ready\")","007adc0c":"print(f\"Training data size is {train.shape}\\nTesting data size is {test.shape}\")","d0095d0f":"X = train.drop(['label'], 1).values\ny = train['label'].values\ntest_x = test.values","d885eb5c":"X = X \/ 255.0\ntest_x = test_x \/ 255.0","8692447d":"X = X.reshape(-1,28,28,1)\ntest_x = test_x.reshape(-1,28,28,1)","3df85cd1":"y = to_categorical(y)","a9264990":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=0)\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","c186041c":"X_train__ = X_train.reshape(X_train.shape[0], 28, 28)\n\nfig, axis = plt.subplots(1, 4, figsize=(20, 10))\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(X_train__[i], cmap='binary')\n    digit = y_train[i].argmax()\n    ax.set(title = f\"Real Number is {digit}\");","2cf216ed":"mean = np.mean(X_train)\nstd = np.std(X_train)\n\ndef standardize(x):\n    return (x-mean)\/std","3f22334a":"epochs = 50\nbatch_size = 64","26caad31":"model=Sequential()\n\n \nmodel.add(Conv2D(filters=64, kernel_size = (3,3), activation=\"relu\", input_shape=(28,28,1)))\nmodel.add(Conv2D(filters=64, kernel_size = (3,3), activation=\"relu\"))\n\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters=128, kernel_size = (3,3), activation=\"relu\"))\nmodel.add(Conv2D(filters=128, kernel_size = (3,3), activation=\"relu\"))\n\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())    \nmodel.add(Conv2D(filters=256, kernel_size = (3,3), activation=\"relu\"))\n\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(512,activation=\"relu\"))\n\nmodel.add(Dense(10,activation=\"softmax\"))\n\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])","7aeb4ecf":"model.summary()","14ab3f6c":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ntrain_gen = datagen.flow(X_train, y_train, batch_size=batch_size)\ntest_gen = datagen.flow(X_test, y_test, batch_size=batch_size)","f82f3ddf":"# Fit the model\nhistory = model.fit_generator(train_gen, \n                              epochs = epochs, \n                              steps_per_epoch = X_train.shape[0] \/\/ batch_size,\n                              validation_data = test_gen,\n                              validation_steps = X_test.shape[0] \/\/ batch_size)","89b150b8":"y_pred = model.predict(X_test)\nX_test__ = X_test.reshape(X_test.shape[0], 28, 28)\n\nfig, axis = plt.subplots(4, 4, figsize=(12, 14))\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(X_test__[i], cmap='binary')\n    ax.set(title = f\"Real Number is {y_test[i].argmax()}\\nPredict Number is {y_pred[i].argmax()}\");","79d93e98":"model.save(\"mnist_trained_99.h5\")","96451b14":"from keras.models import load_model\nmodel = load_model(\"..\/input\/mnist-model-99\/mnist_trained_99.h5\") # Path where the model is saved.\nprint(\"Model loaded successfully\")","11626c69":"from skimage import color, io\nfrom skimage.transform import resize","b795a80b":"digits_folder = \"..\/input\/handwritten-digits-images\"  # Folder containing the images of handwritten digits\nimages = os.listdir(digits_folder)  # Custom image list\n\n\nfig, axis = plt.subplots(4, 4, figsize=(12, 14))\nfor i, ax in enumerate(axis.flat):\n    image = io.imread(digits_folder + \"\/\" + images[i])\n    ax.imshow(image, cmap='binary')\n    image = color.rgb2gray(image)\n    image_resized = resize(image, (28, 28, 1))\n    final = 1 - np.array(image_resized)\n    final = np.expand_dims(final, axis=0)\n    answer = model.predict(final)\n    ret_val = answer.argmax()\n    ax.set(title = f\"Predicted number: {ret_val}\");\n","d52dc797":"# Training a Machine Learning model for the MNIST Handwritten digits dataset","9e5c9776":"**Set data features and labels**\n","6ea24eeb":"# Using the model to predict our custom handwritten digits","3e034ba9":"## Part 1 finishes here(Model Training)","45cfbd8c":"# 3. Convolutional Neural Network\n\n## 3.1 Defining the model\n\nThis uses a Keras Sequential API to create a CNN, we start from the input and add the layers one by one.\n\nThe first layer is the convolutional (Conv2D) layer. We choose 32 filters for the first-two conv2D layers and 64 filters for the second-two layers and 128 filters for third-two layers and 256 for the last one. Each filter transforms a part of the image as defined by the kernel size using the kernel filter. The kernel filter matrix is applied on the whole image. Filters can be seen as a transformation of the image.\n\nThe CNN can isolate features that are useful everywhere from these transformed images (feature maps).\n\nThe second important layer in CNN is the pooling (MaxPool2D) layer. This layer simply acts as a downsampling filter. It looks at the 2 neighboring pixels and picks the maximal value. These are used to reduce computational cost, and to some extent also reduce overfitting.\n\nCombining convolutional and pooling layers, CNN is able to combine local features and learn more global features of the image.\n\n'relu' is the rectifier (activation function max(0,x)). The rectifier activation function is used to add non linearity to the network.\n\nThe Flatten layer is used to convert the final feature maps into a single 1D vector. This flattening step is needed so that we can make use of fully connected layers after some convolutional\/maxpool layers. It combines all the found local features of the previous convolutional layers.\n\nIn the end we use the features in two fully-connected (Dense) layers which is just an artificial neural networks (ANN) classifier. In the last layer(Dense(10,activation=\"softmax\")) the net outputs distribution of probability of each class i.e. [0,0,0.98,0,0,0,0,0,0,0]","f475973c":"## 2. Data Preprocessing\n\n### 2.1 Importing the datasets\n\nI found a dataset that was already split into training set and testing set, both are subsets of the MNIST Handwritten digits dataset","1db8f625":"# Part 2 \n\n### Using the model to predict the digits","bdbbb69d":"## 3.3 Model Training","585af17d":"## 3.2 Augmenting the data\n\nThis step was necessary because we are dealing with the user input, the user is free to draw anything he wants, so the drawing of the digits might not always be in perfect orientation. Hence we need to train the model for handiling such situations\n\nI found out the following data augmentation techniques that are frequently used by people for further improving the accurary of their models.\n\nThe improvement:\n - Without data augmentation, Accuracy:  98.114%\n - With data augmentation, Accuracy:  99.67% \n","f60e7843":"**Normalization**\n","e9bd216e":"**Visualizing the Data**","c78f03e6":"## 1. Introduction\n\nMNIST (\"Modified National Institute of Standards and Technology\") Handwritten Digit recogition is often regarded as the \"Hello World\" of Machine Learning. This project involvs creating a Machine Learning model using a simple Convolutional Neural Network to further enhance the capabilities of the model in recognising the Handwritten Digits. We then run and test the model on user inputs.\n\nWe begin by: \n**Importing the required libraries**\n","8798161e":"# Saving the trained Model","541c8924":"### 2.3 Reshaping\nReshape image in 3 dimensions (height = 28px, width = 28px , canal = 1) \n\ncanal = 1:  For gray scale","6e6f34e2":"### Loading the model from the file\n","01277c04":"**Model Definition**","5c35eac7":"### 2.2 Normalization\nWe perform a grayscale normalization which reduces the time as well as avoids looking for useless details in the image","720ff500":"### 2.4 Label Encoding\n**Encode labels to one-hot-vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])**","97e45076":"\n### 2.5 Split training and valdiation set\nThe validation set is to evaluate the performance of the model\n","4a1ef4c8":"`___________________________________________________________________________________________________________`","25902f6a":"## Model Summary"}}