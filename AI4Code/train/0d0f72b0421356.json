{"cell_type":{"b4008038":"code","ff9e40f6":"code","5fbfc050":"code","1853c40d":"code","75c7d1ee":"code","3500f71d":"code","324e5418":"code","bfd47a71":"code","6e3fc1c6":"code","8d4a5c8a":"code","188f1a1d":"code","57973867":"code","59e6bc71":"code","58f0643b":"code","d70a0a26":"code","7367c414":"code","dfd7d919":"code","bc751012":"code","200c5778":"code","5570cd75":"code","e7064034":"code","30012e3f":"code","7015e4ee":"code","319b5cbd":"code","b3d0e7e0":"code","4d7c3c2e":"markdown"},"source":{"b4008038":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ff9e40f6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_validate, cross_val_predict\nfrom sklearn import metrics","5fbfc050":"dataset = pd.read_csv(\"..\/input\/heart.csv\")","1853c40d":"dataset.shape","75c7d1ee":"dataset.dtypes","3500f71d":"dataset.target.value_counts()","324e5418":"sns.countplot(x='target', data=dataset, palette=\"RdBu\")\nplt.show()","bfd47a71":"maleCount = len(dataset[dataset.sex == 1])\nfemaleCount = len(dataset[dataset.sex == 0])\nprint(\"Male Patients = {:.2f} %\".format(maleCount\/len(dataset) * 100))\nprint(\"Female Patients = {:.2f} %\".format(femaleCount\/len(dataset) * 100))","6e3fc1c6":"pd.crosstab(dataset.sex, dataset.target).plot(kind=\"bar\",figsize=(15,6),color=['#1CA53B','#AA1111' ])\nplt.title('Heart Disease Frequency w.r.t sex')\nplt.ylabel('Frequency')\nplt.xlabel('SEX(0 = male, 1 = female)')\nplt.legend([\"Disease\",\"No Disease\"])\nplt.show()","8d4a5c8a":"df=dataset","188f1a1d":"#scatter plot\nplt.scatter(x=df.age[df.target==1], y=df.thalach[df.target==1], c=\"red\")\nplt.scatter(x=df.age[df.target==0], y=df.thalach[df.target==0], c=\"green\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maaximum Heart Rate\")\nplt.show()","57973867":"pd.crosstab(df.slope,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#FAF7A6','#FD5733' ])\nplt.title('Heart Disease Frequency for Slope')\nplt.xlabel('The Slope of The Peak Exercise ST Segment ')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency')\nplt.show()","59e6bc71":"pd.crosstab(df.fbs,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#DDCF00','#F81845' ])\nplt.title('Heart Disease Frequency According To FBS')\nplt.xlabel('FBS - (Fasting Blood Sugar > 120 mg\/dl) (1 = true; 0 = false)')\nplt.xticks(rotation = 0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","58f0643b":"pd.crosstab(df.cp, df.target).plot(kind=\"bar\",figsize=(15,6),color=['#DDCF00','#F81845' ])\nplt.title('Heart Disease Frequency According To Chest Pain Type')\nplt.xlabel('CPT - Chest Pain Type ')\nplt.xticks(rotation = 0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","d70a0a26":"X = df.drop(['target'], axis=1)\ny = df['target']","7367c414":"y.head()","dfd7d919":"logreg=LogisticRegression()\npredicted = cross_val_predict(logreg, X, y, cv=10)\nmetrics.accuracy_score(y, predicted)","bc751012":"print(metrics.classification_report(y, predicted))","200c5778":"X = df.drop(['target'], axis=1)\ny = df['target']","5570cd75":"# Normalize\nx = (X - np.min(X)) \/ (np.max(X) - np.min(X)).values","e7064034":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=0)","30012e3f":"#transpose matrices\nx_train = x_train.T\ny_train = y_train.T\nx_test = x_test.T\ny_test = y_test.T","7015e4ee":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 1000, random_state = 1)\nrf.fit(x_train.T, y_train.T)\nprint(\"Random Forest Algorithm Accuracy Score : {:.2f}%\".format(rf.score(x_test.T,y_test.T)*100))","319b5cbd":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 7)  # n_neighbors means k\nknn.fit(x_train.T, y_train.T)\nprediction = knn.predict(x_test.T)\n\nprint(\"{} NN Score: {:.2f}%\".format(3, knn.score(x_test.T, y_test.T)*100))","b3d0e7e0":"scoreList = []\nfor i in range(1,20):\n    knn2 = KNeighborsClassifier(n_neighbors = i)  # n_neighbors means k\n    knn2.fit(x_train.T, y_train.T)\n    scoreList.append(knn2.score(x_test.T, y_test.T))\n    \nplt.plot(range(1,20), scoreList)\nplt.xticks(np.arange(1,20,1))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()\n\n\nprint(\"Maximum KNN Score is {:.2f}%\".format((max(scoreList))*100))","4d7c3c2e":"**DATA EXPLORATION**"}}