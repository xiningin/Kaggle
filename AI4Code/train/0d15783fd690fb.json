{"cell_type":{"34f15a5d":"code","fdfde52a":"code","9e112976":"code","dc69069f":"code","0aa3919d":"code","a5bb2c72":"code","bd8dcbe7":"code","9ba278e8":"code","c5b4265f":"code","35e32388":"code","e1ecfe2b":"code","30b54d29":"code","3ee8e051":"code","d83a1cf0":"markdown","ca8c9e61":"markdown","769699cb":"markdown","1c8de354":"markdown","1bd3216b":"markdown","e7e61d51":"markdown","6df9afa2":"markdown","6c1b6e0e":"markdown"},"source":{"34f15a5d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdfde52a":"import numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport tensorflow.keras as keras\n%matplotlib inline","9e112976":"from tensorflow.keras.datasets import mnist, fashion_mnist\n\n(xtrain,ytrain), (xtest, ytest)= mnist.load_data() ","dc69069f":"#Rescaling the arrays\nxtrain, xtest= xtrain\/255 , xtest\/255","0aa3919d":"##Visualizaing the images\n\nimport matplotlib.pyplot as plt\nf, ax = plt.subplots(1,5)\nf.set_size_inches(80, 40)\nfor i in range(5,10):\n    ax[i-5].imshow(xtrain[i].reshape(28, 28))\nplt.show()","a5bb2c72":"xtrain= xtrain.reshape(-1,28,28,1)","bd8dcbe7":"xtest=xtest.reshape(-1,28,28,1)","9ba278e8":"from keras.models import Sequential, Model\nfrom keras.layers import Dense, Conv2D, MaxPooling2D,MaxPool2D ,UpSampling2D, Flatten, Input\nfrom keras.optimizers import SGD, Adam, Adadelta, Adagrad\nfrom keras import backend as K\n\ndef autoencoder():\n    \n    e0= Input(shape= (28,28,1))\n    \n    e1= Conv2D(64, (3,3), activation= 'relu', padding='same')(e0)\n    e1= MaxPooling2D((2,2), padding= 'same')(e1)\n    e2= Conv2D(32, (3,3), activation= 'relu', padding= 'same')(e1)\n    e2= MaxPooling2D((2,2), padding= 'same')(e2)\n    e3= Conv2D(16, (3,3), activation= 'relu', padding= 'same')(e2)\n    \n    latent= MaxPooling2D((2,2), padding= 'same')(e3)\n    \n    d1= Conv2D(16, (3,3), activation= 'relu', padding= 'same')(latent)\n    d1= UpSampling2D((2,2))(d1)\n    d2= Conv2D(32, (3,3), activation= 'relu', padding= 'same')(d1)   #Note that no padding is mentioned here...\n    d2= UpSampling2D((2,2))(d2)\n    d3= Conv2D(64, (3,3), activation= 'relu')(d2)\n    d3= UpSampling2D((2,2))(d3)\n    d4= Conv2D(1, (3,3), padding='same',activation= 'relu')(d3)\n    \n    model= Model(e0, d4)\n    model.compile(optimizer= 'adam', loss= 'binary_crossentropy')\n    \n    return model\n\n\n","c5b4265f":"model= autoencoder()\nmodel.summary()","35e32388":"xtrain.shape","e1ecfe2b":"import tensorflow as tf\nprint(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))","30b54d29":"import tensorflow as tf\nfrom keras.callbacks import EarlyStopping\n\nwith tf.device('\/device:GPU:0'):\n    early_stopping = EarlyStopping(monitor='val_loss', min_delta=0, patience=10, verbose=1, mode='auto')\n    model.fit(xtrain, xtrain, epochs=40, batch_size=2048, validation_data=(xtest, xtest), callbacks=[early_stopping])","3ee8e051":"pred= model.predict(xtest[:5])\ndef plot_predictions(y_true, y_pred):    \n    f, ax = plt.subplots(2, 5)\n    for i in range(5):\n        ax[0][i].imshow(np.reshape(y_true[i], (28, 28)), aspect='auto')\n        ax[1][i].imshow(np.reshape(y_pred[i], (28, 28)), aspect='auto')\n    plt.tight_layout()\n    \nplot_predictions(xtest[:5], pred[:5])","d83a1cf0":"## tf code for using GPU\n\nNote that we have used Early stopping so you dont have to ponder on the problem of epochs and all.","ca8c9e61":"## Now we will reshape the input according to the autoencoder model. ","769699cb":"Max pooling operations are non invertible in nature but the feature maps can be regenerated by recording the locations of the mxaima that were performed during MaxPooling. Upsampling leverages this property to establish the image from the bottleneck.","1c8de354":"### The aim of this notebook is to provide an insight into how the autoencoder works and how you can also deploy it for your use. We will be using Convolutional autoencoders to regenerate the images fed to the network by creating a bottleneck as described in the original paper.","1bd3216b":"## We will define the autoencoder model based on CNN and not normal neural network.\n\n","e7e61d51":"## It's good to see that model is doing well","6df9afa2":"Some references I followed:-\n\nhttps:\/\/www.analyticsvidhya.com\/blog\/2018\/06\/unsupervised-deep-learning-computer-vision\/\nhttps:\/\/towardsdatascience.com\/applied-deep-learning-part-3-autoencoders-1c083af4d798\nhttps:\/\/blog.keras.io\/building-autoencoders-in-keras.html\nhttps:\/\/cs.stanford.edu\/people\/karpathy\/convnetjs\/demo\/autoencoder.html\nhttps:\/\/machinelearningmastery.com\/develop-encoder-decoder-model-sequence-sequence-prediction-keras\/","6c1b6e0e":"## We will use mnist dataset which already comes with Keras "}}