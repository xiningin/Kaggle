{"cell_type":{"4dbc0054":"code","9eeecc22":"code","4f3bcb4a":"code","1201f639":"code","ede740a0":"code","3c2fc125":"code","bcd6a400":"code","484ef93e":"code","52ba3d91":"code","ff911f5f":"code","cda31b8e":"code","08e13038":"code","74e44e9f":"markdown","67b95222":"markdown","75506b29":"markdown","5757a8d0":"markdown","07ddc431":"markdown","87977e26":"markdown"},"source":{"4dbc0054":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom skimage import io\nimport matplotlib.pyplot as plt\n# import libraries\n%matplotlib inline\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9eeecc22":"# loading dataset\nnba = pd.read_csv('\/kaggle\/input\/basketball-players-stats-per-season-49-leagues\/players_stats_by_season_full_details.csv')\n# show first five rows\nnba.head()","4f3bcb4a":"nba.describe()","1201f639":"# Set font\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['font.sans-serif'] = 'Helvetica'\n\n# Set the style of the axes and the text color\nplt.rcParams['axes.edgecolor']='#333F4B'\nplt.rcParams['axes.linewidth']=0.8\nplt.rcParams['xtick.color']='#333F4B'\nplt.rcParams['ytick.color']='#333F4B'\nplt.rcParams['text.color']='#333F4B'\n\n# Create dataframe\nnba_RegularSeason = nba.loc[nba['Stage'] == 'Regular_Season']\nnba_3 = nba_RegularSeason[['Season', '3PA']].groupby('Season').sum()\n\n# Numeric placeholder for the y axis\nmy_range = list(range(1,len(nba_3.index)+1))\nfig, ax = plt.subplots(figsize=(8,4))\n\n\n# create for each expense type an horizontal line that starts at x = 0 with the length \n# represented by the specific expense percentage value.\nplt.hlines(y=my_range, xmin=0, xmax=nba_3['3PA'], color='#0d67a3', alpha=0.4, linewidth=7)\n\n# create for each expense type a dot at the level of the expense percentage value\nplt.plot(nba_3['3PA'], my_range, \"o\", markersize=8, color='#0d67a3', alpha=0.6)\n\n# set labels\nax.set_xlabel(\"Number of 3P's attempted\", fontsize=13, fontweight='black', color = '#333F4B')\nax.set_ylabel(\"Season\", fontsize=13, fontweight='black', color = '#333F4B')\n\n# set axis\nax.tick_params(axis='both', which='major', labelsize=12)\nplt.yticks(my_range, nba_3.index)\n\n# add an horizonal label for the y axis \nfig.text(-0.23, 0.96, \"Number of 3P's made per Season\", fontsize=15, fontweight='black', color = '#333F4B')\n\n# change the style of the axis spines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\nax.spines['left'].set_smart_bounds(True)\nax.spines['bottom'].set_smart_bounds(True)\n\n# set the spines position\nax.spines['bottom'].set_position(('axes', -0.04))\nax.spines['left'].set_position(('axes', 0.015))\n\n#plt.savefig('hist2.png', dpi=300, bbox_inches='tight')","ede740a0":"def get_percentage(list_a, list_m):\n    return list_a \/ list_m\n\nnba['2PM'] = nba['FGM'] - nba['3PM']\nnba['2PA'] = nba['FGA'] - nba['3PA']\nnba['Avg_Min'] = nba['MIN'] \/ nba['GP']\nnba['Avg_AST'] = nba['AST'] \/ nba['GP']\nnba['Avg_STL'] = nba['STL'] \/ nba['GP']\nnba['Avg_BLK'] = nba['BLK'] \/ nba['GP']\nnba['Avg_PTS'] = nba['PTS'] \/ nba['GP']\nnba['Avg_3P'] = nba['3PM'] \/ nba['GP']\nnba['Avg_2P'] = nba['2PM'] \/ nba['GP']\nnba['Avg_FT'] = nba['FTM'] \/ nba['GP']\nnba['Avg_REB'] = nba['REB'] \/ nba['GP']\n\nnba['percentage_2P'] = get_percentage(nba['2PM'], nba['2PA'])\nnba['percentage_3P'] = get_percentage(nba['3PM'], nba['3PA']) \nnba['percentage_FT'] = get_percentage(nba['FTM'], nba['FTA'])\nnba['percentage_OR'] = get_percentage(nba['ORB'], nba['REB'])\nnba['percentage_DR'] = get_percentage(nba['DRB'], nba['REB'])","3c2fc125":"# Set font\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['font.sans-serif'] = 'Helvetica'\n\n# Set the style of the axes and the text color\nplt.rcParams['axes.edgecolor']='#333F4B'\nplt.rcParams['axes.linewidth']=0.8\nplt.rcParams['xtick.color']='#333F4B'\nplt.rcParams['ytick.color']='#333F4B'\nplt.rcParams['text.color']='#333F4B'\n\n# Create dataframe\nnba_RegularSeason = nba.loc[nba['Stage'] == 'Regular_Season']\nnba_percentage = nba_RegularSeason[['Season', 'percentage_3P']].groupby('Season').mean()\n\n# Numeric placeholder for the y axis\nmy_range = list(range(1,len(nba_percentage.index)+1))\nfig, ax = plt.subplots(figsize=(8,4))\n\n# create for each expense type an horizontal line that starts at x = 0 with the length \n# represented by the specific expense percentage value.\nplt.hlines(y=my_range, xmin=0, xmax=nba_percentage['percentage_3P'], color='#0d67a3', alpha=0.4, linewidth=7)\n\n# create for each expense type a dot at the level of the expense percentage value\nplt.plot(nba_percentage['percentage_3P'], my_range, \"o\", markersize=8, color='#0d67a3', alpha=0.6)\n\n# set labels\nax.set_xlabel(\"Percentage\", fontsize=13, fontweight='black', color = '#333F4B')\nax.set_ylabel(\"Season\", fontsize=13, fontweight='black', color = '#333F4B')\n\n# set axis\nax.tick_params(axis='both', which='major', labelsize=12)\nplt.yticks(my_range, nba_percentage.index)\n\n# add an horizonal label for the y axis \nfig.text(-0.23, 0.96, \"Percentage 3P's made per Season\", fontsize=15, fontweight='black', color = '#333F4B')\n\n# change the style of the axis spines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\nax.spines['left'].set_smart_bounds(True)\nax.spines['bottom'].set_smart_bounds(True)\n\n# set the spines position\nax.spines['bottom'].set_position(('axes', -0.04))\nax.spines['left'].set_position(('axes', 0.015))\n\n#plt.savefig('hist2.png', dpi=300, bbox_inches='tight')","bcd6a400":"def plot_img(url, idx):\n    # read and plot img\n    image = io.imread(url)\n    plt.imshow(image)\n    \n    # plot title n remove axis\n    plt.title(nba_mvp.Player[idx], loc='center', fontsize=18)\n    ax.axis('off')\n    \ndef plot_radar(idx, stage, color_1):\n    # categories\n    categories = nba_mvp.iloc[idx,2:].index.tolist()\n    N = len(categories) # get number of categories\n    \n    # values\n    values= nba_mvp.iloc[idx,2:].values.tolist()\n    values += values[:1] # repeat first value to close poly\n    # calculate angle for each category\n    angles = [n \/ float(N) * 2 * np.pi for n in range(N)]\n    angles += angles[:1] # repeat first angle to close poly\n    # plot\n    plt.polar(angles, values, marker='.', label=stage, color=color_1) # lines\n    plt.fill(angles, values, alpha=0.2, color = color_1) # area\n    \n    # xticks\n    plt.xticks(angles[:-1], categories)\n    # yticks\n    ax.set_rlabel_position(0) # yticks position\n    plt.yticks([0, 2, 4, 6, 8, 10, 12], color=\"grey\", size=10)\n    plt.ylim(0,14)","484ef93e":"def plot_img(url, idx):\n    # read and plot img\n    image = io.imread(url)\n    plt.imshow(image)\n    \n    # plot title n remove axis\n    plt.title(nba_mvp.Player[idx], loc='center', fontsize=18)\n    ax.axis('off')\n    \ndef plot_radar(idx, stage, color_1):\n    # categories\n    categories = nba_mvp.iloc[idx,2:].index.tolist()\n    N = len(categories) # get number of categories\n    \n    # values\n    values= nba_mvp.iloc[idx,2:].values.tolist()\n    values += values[:1] # repeat first value to close poly\n    # calculate angle for each category\n    angles = [n \/ float(N) * 2 * np.pi for n in range(N)]\n    angles += angles[:1] # repeat first angle to close poly\n    # plot\n    plt.polar(angles, values, marker='.', label=stage, color=color_1) # lines\n    plt.fill(angles, values, alpha=0.2, color = color_1) # area\n    \n    # xticks\n    plt.xticks(angles[:-1], categories)\n    # yticks\n    ax.set_rlabel_position(0) # yticks position\n    plt.yticks([0, 2, 4, 6, 8, 10, 12], color=\"grey\", size=10)\n    plt.ylim(0,14)","52ba3d91":"idx1_regular = 1272 # \nidx1_playoff = 3197 # \n\nidx2_regular = 1468 # \nidx2_playoff = 3363\n\nidx3_regular = 1756 # \nidx3_playoff = 3500\n\nidx4_regular = 2040\nidx4_playoff = 3656\n\nnba_mvp = nba[['Player', 'Avg_AST', 'Avg_STL', 'Avg_BLK', 'Avg_3P', 'Avg_2P', 'Avg_FT', 'Avg_REB']]\nfig = plt.figure(figsize=(12,8))\nplt.subplots_adjust(right = 1.5)\n\n# img 1\nax = plt.subplot(241)\nplot_img('https:\/\/a.espncdn.com\/combiner\/i?img=\/i\/headshots\/nba\/players\/full\/3975.png&w=350&h=254', idx1_regular)\n# img 2\nax = plt.subplot(242)\nplot_img('https:\/\/a.espncdn.com\/combiner\/i?img=\/i\/headshots\/nba\/players\/full\/3468.png&w=350&h=254', idx2_regular)\n# img 3\nax = plt.subplot(243)\nplot_img('https:\/\/a.espncdn.com\/combiner\/i?img=\/i\/headshots\/nba\/players\/full\/3992.png&w=350&h=254', idx3_regular)\n# img 6\nax = plt.subplot(244)\nplot_img('https:\/\/a.espncdn.com\/combiner\/i?img=\/i\/headshots\/nba\/players\/full\/3032977.png&w=350&h=254', idx4_regular)\n\n\n### Second Row\n# radar 1\nax = plt.subplot(245, polar=\"True\")\nplot_radar(idx1_regular, 'regular', 'yellow')\nplot_radar(idx1_playoff, 'playoff', 'blue')\nax.legend()\n\n# radar 2\nax = plt.subplot(246, polar=\"True\")\nplot_radar(idx2_regular, 'regular', 'red')\nplot_radar(idx2_playoff, 'playoff', 'black')\nax.legend()\n\n# radar 3\nax = plt.subplot(247, polar=\"True\")\nplot_radar(idx3_regular, 'regular', 'red')\nplot_radar(idx3_playoff, 'playoff', 'black')\nax.legend()\n\n# radar 3\nax = plt.subplot(248, polar=\"True\")\nplot_radar(idx4_regular, 'regular', 'green')\nplot_radar(idx4_playoff, 'playoff', 'black')\nax.legend()\n\nplt.show()","ff911f5f":"def plot_img(url, idx):\n    # read and plot img\n    image = io.imread(url)\n    plt.imshow(image)\n    \n    # plot title n remove axis\n    plt.title(nba.Team[idx], loc='center', fontsize=18)\n    ax.axis('off')\n    \ndef plot_radar(values, color_1):\n    # categories\n    categories = ['Avg_AST', 'Avg_STL', 'Avg_BLK', 'Avg_3P', 'Avg_2P', 'Avg_FT', 'Avg_REB']\n    N = len(categories) # get number of categories\n    \n    # values\n    #values = dataset.iloc[idx,2:].values.tolist()\n    values += values[:1] # repeat first value to close poly\n    # calculate angle for each category\n    angles = [n \/ float(N) * 2 * np.pi for n in range(N)]\n    angles += angles[:1] # repeat first angle to close poly\n    # plot\n    plt.polar(angles, values, marker='.', color=color_1) # lines\n    plt.fill(angles, values, alpha=0.2, color = color_1) # area\n    \n    # xticks\n    plt.xticks(angles[:-1], categories)\n    # yticks\n    ax.set_rlabel_position(0) # yticks position\n    plt.yticks([0, 2, 4, 6, 8, 10, 12], color=\"grey\", size=10)\n    plt.ylim(0,14)","cda31b8e":"years = ['2015 - 2016', '2016 - 2017', '2017 - 2018', '2018 - 2019']\nnba_teams = ['CLE', 'GSW', 'GSW', 'TOR']\nplot_number = [245, 246, 247, 248]\ncolor = ['red', 'blue', 'blue', 'red']\navg_mins = []\n\ncount = 0\nfor year in years:\n    test = nba.groupby(['Team', 'Season', 'Stage']).mean().reset_index()\n    test_regular = int(test.loc[(test['Stage'] == 'Playoffs') &\n                                (test['Team'] == nba_teams[count]) &\n                                (test['Season'] == year)]['MIN'].values)\n    avg_mins.append(test_regular)\n    count += 1","08e13038":"fig = plt.figure(figsize=(12,8))\nplt.subplots_adjust(right = 1.5)\n\n# img 1\nax = plt.subplot(241)\nplot_img('https:\/\/a.espncdn.com\/i\/teamlogos\/nba\/500\/cle.png', 1)\n# img 2\nax = plt.subplot(242)\nplot_img('https:\/\/a.espncdn.com\/i\/teamlogos\/nba\/500\/gs.png', 28)\n# img 3\nax = plt.subplot(243)\nplot_img('https:\/\/a.espncdn.com\/i\/teamlogos\/nba\/500\/gs.png', 28)\n# img 6\nax = plt.subplot(244)\nplot_img('https:\/\/a.espncdn.com\/i\/teamlogos\/nba\/500\/tor.png', 8)\n\n\nfor i in range(0,4):\n    test_regular = nba.loc[(nba['Stage'] == 'Playoffs') &\n                            (nba['Team'] == nba_teams[i]) &\n                            (nba['Season'] == years[i]) &\n                            (nba['MIN'] > avg_mins[i])]\n    test_regular = test_regular[['Avg_AST', 'Avg_STL', 'Avg_BLK', 'Avg_3P', 'Avg_2P', 'Avg_FT', 'Avg_REB']]\n    ax = plt.subplot(plot_number[i], polar=\"True\")\n    for j in test_regular.values.tolist():\n        plot_radar(j, color[i])\n        ","74e44e9f":"## Number of 3's per game\nFrom the following barplot we can see that the number of 3's made per game has almost dubbled in 10years (we all know who to thank for that).\nThe question that follows this graph would then be: did the percentage 3's made also increase? ","67b95222":"## NBA Champs: 2015-2019\nShowing the overall performance of each championship team during the playoffs. ","75506b29":"# 3P percentage\nThe percentage of threes made per regular season increased from 29% in 2009 - 2010, to 34% in 2019-2020. ","5757a8d0":"# Introduction\n**This Dataset Includes:**\n* Seasons 2010-20\n* 49 Leagues, ~11K players details & stats per Season\n* Player Details: Birth Date, Height, Weight, Nationality, High School\n* Stats per Season: Scoring Stats, Free Throws, Rebounds, Blocks, Assists, Minutes, Games etc.\n\n\n","07ddc431":"## NBA MVP's: 2015 - 2019\nShowing the skill set of each MVP from 2015 to 2019. ","87977e26":"<h1><center>Talking NBA<\/center><\/h1>\n\n<img src=\"https:\/\/images2.minutemediacdn.com\/image\/upload\/c_fill,w_720,ar_16:9,f_auto,q_auto,g_auto\/shape\/cover\/sport\/inside-the-nba-on-tnt-624056e85d13606586fd4707937af266.jpg\" width=\"500\" height = \"600\">\n\n\n\n"}}