{"cell_type":{"9f7734a0":"code","53df8b0f":"code","ba55bf31":"code","b8090a02":"code","ae4c350a":"code","ae921da3":"code","03539042":"markdown","a823ea5f":"markdown","68505088":"markdown","c7cf5ded":"markdown","c7d7f7ba":"markdown","b70f2df1":"markdown","8fa75b84":"markdown"},"source":{"9f7734a0":"from kaggle_environments import make\nimport json","53df8b0f":"%%writefile agent.py\nfrom lux.game import Game\nfrom lux.game_map import Cell, RESOURCE_TYPES\nfrom lux.constants import Constants\nfrom lux.game_constants import GAME_CONSTANTS\nfrom lux import annotate\nimport pandas as pd\nimport math\n\n\ndef print_object_information(name, obj):\n    \"\"\"\n    Small function to print methods and properties of a given object.\n    \"\"\"\n    attr = vars(obj)\n    methods = [method_name for method_name in dir(obj)\n          if callable(getattr(obj, method_name))]\n    methods = [method_name for method_name in methods if method_name[0:2] !=\"__\"]\n    print(\"\")\n    print(\"\")\n    print(\"Name:\", name)\n    print(\"Type:\", type(obj))\n    print(20*\"-\")\n    print(\"Properties:\")\n    for key, value in attr.items():\n        if(len(str(value)) > 700):\n            print(key, \": \", str(value)[:700])\n        else:\n            print(key, \": \", value )\n    print(20*\"-\")\n    print(\"Methods:\")\n    print(methods)\n    print(\"\")\n    print(\"\")\n\n\"\"\"\nWe simply use a empty agent and print out some runtime information.\n\"\"\"\ndef agent(observation, configuration):\n    global game_state\n\n    ### Do not edit ###\n    if observation[\"step\"] == 0:\n        game_state = Game()\n        game_state._initialize(observation[\"updates\"])\n        game_state._update(observation[\"updates\"][2:])\n        game_state.id = observation.player\n    else:\n        game_state._update(observation[\"updates\"])\n    \n    actions = []\n\n    ### AI Code goes down here! ### \n    player = game_state.players[observation.player]\n    opponent = game_state.players[(observation.player + 1) % 2]\n    width, height = game_state.map.width, game_state.map.height\n\n    \"\"\"\n    In each step there are two observations. One for each player. Since we do not want to print everything twice, \n    we will limit ourselves to the observations of player 1.\n    \"\"\"\n    if observation.player == 1:\n        \"\"\"\n        There seems to be some kind of time limit per observation and it is not able to print everything in one step. \n        Therefore I have split the output of each object into different steps.\n        \"\"\"\n        if observation[\"step\"] == 0:\n            print_object_information(\"observation\" , observation)      \n        if observation[\"step\"] == 1:\n            print_object_information(\"player\" , game_state.players[1])   \n        if observation[\"step\"] == 2:\n            print_object_information(\"unit\" , game_state.players[1].units[0])\n        if observation[\"step\"] == 3:\n            print_object_information(\"cargo\" , game_state.players[1].units[0].cargo)\n        if observation[\"step\"] == 4:\n            print_object_information(\"cities\" , game_state.players[1].cities[\"c_2\"])\n        if observation[\"step\"] == 5:\n            print_object_information(\"citytiles\" , game_state.players[1].cities[\"c_2\"].citytiles[0])\n        if observation[\"step\"] == 6:\n            print_object_information(\"game_state\" , game_state) \n        if observation[\"step\"] == 7:\n            print_object_information(\"map\" , game_state.map) \n        if observation[\"step\"] == 8:\n            print_object_information(\"cell\" , game_state.map.map[0][0])\n        if observation[\"step\"] == 9:\n            print(50*\"*\")\n            print(\"OBSERVATION UPDATES:\")\n            print(50*\"*\")\n    \n    \"\"\"\n    It is interesting to observe the observation.update property over several steps.\n    \"\"\"\n    if ((observation[\"step\"] in range(9,13)) and (observation.player == 1)):\n        print(15*\"-\")\n        print(\"observation_updates_turn\", observation[\"step\"])\n        print(observation.updates) \n        print(15*\"-\")\n    return actions","ba55bf31":"\"\"\"\nWe choose a seed with a small map size (12x12) to have a better view of objects like lux.game_map.GameMap.\n\"\"\"\nenv = make(\"lux_ai_2021\", configuration={\"seed\": 51, \"loglevel\": 1}, debug=True)\nsteps = env.run([\".\/agent.py\", \".\/agent.py\"])","b8090a02":"\"\"\"\nQick look at the map for clarification.\n\"\"\"\nenv.render(mode=\"ipython\", width=1200, height=800)","ae4c350a":"import pandas as pd\n\"\"\"\nLet's start by loading some seeds.\n\"\"\"\nseeds_df = pd.read_json(\"..\/input\/lux-dummy-performance-data\/seeds_200.json\")\nseeds_df.head()","ae921da3":"import numpy as np\nagent1 = \".\/agent_x.py\"\nagent2 = \".\/agent_y.py\"\n\ndef analyse_resources(input_update):\n    wood = 0\n    coal = 0\n    uranium = 0\n    resource_str = \"\"\n    for item in input_update:\n        if \"wood\" in item:\n            # wood\n            pos = item.rfind(\" \")\n            wood += int(item[pos + 1:])\n            resource_str += f\",{item[2:]}\"\n        elif \"coal\" in item:\n            # coal\n            pos = item.rfind(\" \")\n            coal += int(item[pos + 1:])\n            resource_str += f\",{item[2:]}\"\n        elif \"uranium\" in item:\n            # uranium\n            pos = item.rfind(\" \")\n            uranium += int(item[pos + 1:])\n            resource_str += f\",{item[2:]}\"\n    return wood, coal, uranium, resource_str\n\ndef run_performance_run(seeds_df: pd.DataFrame, agent1: str, agent2: str):\n    save = True\n    performance_dict = {}\n    run_count = 1\n    player_1_wins = 0\n    player_2_wins = 0\n    for map_size in seeds_df.columns:\n        seeds = seeds_df[map_size].values\n        print(50*\"*\")\n        print(f\"running {map_size} Seeds...\")\n        for seed in seeds:\n            step_start = time.time()\n            print(f\"run: {run_count}  (seed: {seed})\")\n            run_count += 1\n            env = make(\"lux_ai_2021\", configuration={\"seed\": int(seed), \"loglevel\": 1, \"annotations\": True}, debug=True)\n\n            time_str = datetime.now().strftime(\"%d%m_%H%M\")\n            steps = env.run([agent1, agent2]) # <------- YOUR AGENTS\n            \n            # use the steps dict to finde the information you need about this run.\n            \n            reward_0 = steps[-1][0][\"reward\"]\n            reward_1 = steps[-1][1][\"reward\"]\n            num_cities_0 = int(reward_0 \/ 10000)\n            num_cities_1 = int(reward_1 \/ 10000)\n\n            if reward_0 > reward_1:\n                player_1_wins += 1\n            elif reward_1 > reward_0:\n                player_2_wins += 1\n            \n            updates_0 = steps[0][0][\"observation\"][\"updates\"]\n            updates_1 = steps[-1][0][\"observation\"][\"updates\"]\n\n            wood_0, coal_0, uranium_0, resource_str_0 = analyse_resources(updates_0)\n            wood_1, coal_1, uranium_1, resource_str_1 = analyse_resources(updates_1)\n\n            performance_dict[int(seed)] = {\"seed\": str(seed), \"map_size\": map_size, \"reward_0\": reward_0,\n                                           \"reward_1\": reward_1, \"num_cities_0\": num_cities_0,\n                                           \"num_cities_1\": num_cities_1, \"wood_0\": wood_0, \"coal_0\": coal_0,\n                                           \"uranium_0\": uranium_0, \"resource_str_0\": resource_str_0, \"wood_1\": wood_1,\n                                           \"coal_1\": coal_1, \"uranium_1\": uranium_1, \"resource_str_1\": resource_str_1}\n\n            if save:\n                replay = env.toJSON()\n                replay_name = f\"{seed}_{map_size}_{num_cities_0}_{num_cities_1}_{time_str}.json\"\n                with open(f\"replays\/{replay_name}\", \"w\") as f:\n                    json.dump(replay, f)\n            if reward_1 > reward_0:\n                winner = \"Player 2\"\n            elif reward_0 > reward_1:\n                winner = \"Player 1\"\n            else:\n                winner = \"Draw\"\n            step_end = time.time()\n            step_duration = step_end - step_start\n\n    print(\"done.\")\n    print(\"writing file...\")\n    time_str = datetime.now().strftime(\"%d%m_%H%M\")\n    with open(f'performance\/performance_run_{time_str}.json', 'w') as outfile:\n        json.dump(performance_dict, outfile)\n    print(\"done.\")\n    print(\"player_1_wins (agent 2): \", player_1_wins)\n    print(\"player_2_wins (agent 1): \", player_2_wins)\n    \n\"\"\"\n2) Use the stored information for some simple outputs like this:\n\"\"\" \n\nfile_name = \"..\/input\/lux-dummy-performance-data\/performance_run_0212_1552.json\" # <---- Path to your performance file\ndf = pd.read_json(file_name)\ndf = df.T.reset_index(drop=True)\n\ndf[\"result\"] = np.where(df['reward_0'] >= df['reward_1'], \"win\", \"loss\")\n\nprint(100*\"*\")\nprint(f\"Overall win rate {round(len(df[df['result']=='win'])\/200, 2)}%\")\nprint(100*\"-\")\nloosing_seeds = {}\nfor size in [\"S\", \"M\", \"L\", \"XL\"]:\n    df_ = df[df[\"map_size\"] == size].copy()\n    print(f\"Win rate on {size}: {round(len(df_[df_['result']=='win'])\/50, 2)}%\")\n    loosing_seeds[size] = df_[df_[\"result\"] == \"loss\"][\"seed\"].values\nprint(100*\"*\")\n\nfor size in [\"S\", \"M\", \"L\", \"XL\"]:\n    print(f\"Loosing seeds on {size}: {loosing_seeds[size]}\")\nprint(100*\"*\")\n","03539042":"<div style=\"color: #474644;\n           display:fill;\n           border-radius:0px;\n           border-style: solid;\n           border-color:#9B7610;\n           text-align:center;\n           background-color:#F1BD30 ;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.2em;\n           text-align:left\">  \n<center>\n<h3> Link to Lux AI Season 1 Kits<\/h3>\n<\/center>\n<hr>\n    \nThe following code is relevant only if you want to know how to retrieve the properties of classes in Python. All the properties and methods of the given structure can be found at the following link:\n    \n    \n\n[ ---------> LINK <------------ ](https:\/\/github.com\/Lux-AI-Challenge\/Lux-Design-2021\/blob\/master\/kits\/README.md)\n\n    \nI was over excited when I started this challenge and must have overlooked this page on github at the beginning. \ud83d\ude05","a823ea5f":"<div style=\"color: #474644;\n           display:fill;\n           border-radius:0px;\n           border-style: solid;\n           border-color:#9B7610;\n           text-align:center;\n           background-color:#F1BD30 ;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.2em;\n           text-align:left\">  \n<center>\n<h1> \ud83d\udc7e Given Properties and Methods on one Page \ud83e\udd16<\/h1>\n<\/center>\n<hr>\nHello all! I just started this competition and so far I am very excited about it. I started my observation by reading the specifications and then the information on github. This was a lot of instructions and I found it very helpful for me to have the properties and methods of all the important classes presented on one page to observe the given structure. This way I can see what is already there and can be used and what I might need to build. This overview can be especially helpful if you're working in a JupyterNotebook like me and want to look something up quickly. I was just copying this \"first look\" into one of my \"stuff\" notebooks and thought it might be helpful to some of you who, like me, are just getting started with this challenge. So I added a caption and posted it publicly. (Taking the risk that exactly something like this is already written somewhere for python.)\ud83e\udd13  \n<\/div>","68505088":"<div style=\"color: #474644;\n           display:fill;\n           border-radius:0px;\n           border-style: solid;\n           border-color:#9B7610;\n           text-align:center;\n           background-color:#F1BD30 ;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.2em;\n           text-align:left\">  \n<h4> Additional content (some seeds) \ud83c\udf0e\ud83c\udf0f: <\/h4>\n<ul>\n    <li> 12 x 12 Map: 51 <\/li>\n    <li> 16 x 16 Map: 5621242  <\/li>\n    <li> 24 x 24 Map: 5121  <\/li>\n    <li> 32 x 32 Map: 562124210  <\/li>\n<\/ul>\n<hr> \nHope this small overview helps some of you or maybe it's just my why of starting thinks. Anaway have a nice and productive day \ud83d\ude0e\ud83d\udc4d!\n<\/div>","c7cf5ded":"!pip install kaggle-environments -U","c7d7f7ba":"<div style=\"color: #474644;\n           display:fill;\n           border-radius:0px;\n           border-style: solid;\n           border-color:#9B7610;\n           text-align:center;\n           background-color:#F1BD30 ;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.2em;\n           text-align:left\">  \n<h4> Some ideas on performance analysis: <\/h4>\n1.) Define some kpis like harvestetd wood, num citys etc and save them i a json file for a series of runs. <br>\n2.) Use this json file late on to comapre the performance of different bots agains each other.\n<\/div>","b70f2df1":"<div style=\"color: #474644;\n           display:fill;\n           border-radius:0px;\n           border-style: solid;\n           border-color:#9B7610;\n           text-align:center;\n           background-color:#F1BD30 ;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.2em;\n           text-align:left\">  \nHere we can see the growth of all resources. In addition, we can see the harvesting of each city (there is a worker on each city and therefore it automatically harvests with this worker). For example, look at wood (8,11) and wood (9, 10).\n<\/div>","8fa75b84":"<div style=\"color: #474644;\n           display:fill;\n           border-radius:0px;\n           border-style: solid;\n           border-color:#9B7610;\n           text-align:center;\n           background-color:#F1BD30 ;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.2em;\n           text-align:left\">  \nFor this I wrote a small print function (quick and dirty) to get the needed information. However, there are some small exceptions for units. If I understood it right, not all listed methods for units are usable for carts. So you should clarify beforehand whether unit.is_worker or unit.is_cart.\n(Carts can only do .move and .transfer).\n<\/div>"}}