{"cell_type":{"4e909488":"code","80655c40":"code","4d2c1c9f":"code","a280264f":"code","ff4f947f":"code","7fa0c544":"code","98bb75c8":"code","bfaf5f3b":"code","c973e6fc":"code","9619b0ff":"code","07803fbf":"code","ede970aa":"code","8e0dec7f":"code","b898c7ff":"code","8c01714e":"code","4f4ae575":"code","261ab876":"code","bb0ae1ad":"code","2513e760":"code","f9fd9ba3":"code","5d9044b6":"code","cf7ba4d0":"code","8068bbe4":"code","6c6e332a":"code","4786b262":"code","55837273":"code","b2d9caa6":"code","678ee9ea":"code","3c7ff8c4":"code","35fcf4ce":"code","25bcac47":"code","e30212a8":"code","9b9f464e":"code","c9f363f6":"code","cf68d063":"code","1d257bb6":"code","1b34d013":"code","edc1fcd5":"code","71c6a137":"code","02c61a33":"code","f9db38ec":"code","2c69043c":"code","db2516a7":"code","2f752d8e":"code","0cde2b62":"code","d9f2aeb4":"code","3c367386":"code","8fa5419a":"code","c4e7ddf0":"code","f597a78c":"code","0908aa60":"markdown","b2080f2c":"markdown","4586b12b":"markdown","6dd7d026":"markdown","35046943":"markdown","21d11e89":"markdown","94882984":"markdown","89ebd249":"markdown","361f8ee8":"markdown","833de62c":"markdown","5f53dbb9":"markdown","42bea452":"markdown","83b91711":"markdown","42cf11ba":"markdown","01701ed3":"markdown","a13ab987":"markdown","17885ce5":"markdown","1d925819":"markdown","80fa43d5":"markdown","5dd3b310":"markdown","fb3ef30d":"markdown","acce24e9":"markdown","2201570d":"markdown","a7cc53ae":"markdown","bf9af626":"markdown","86be63d6":"markdown"},"source":{"4e909488":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","80655c40":"#import the libraries.\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4d2c1c9f":"data = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","a280264f":"data.head()","ff4f947f":"data.tail()","7fa0c544":"data.info()","98bb75c8":"data.isnull().sum()","bfaf5f3b":"data.dtypes","c973e6fc":"data.nunique()","9619b0ff":"data.shape","07803fbf":"sns.pairplot(data,hue='Outcome')\nplt.show()","ede970aa":"sns.countplot(x='Outcome',data= data,palette = 'flare')\nplt.show()","8e0dec7f":"sns.distplot(data['Age'])","b898c7ff":"data.corr()","8c01714e":"#Heatmap -> For check how the independent variables are correlated with target variable.\nplt.figure(figsize=(14,8))\nsns.heatmap(data.corr(),cmap=\"YlGnBu\", annot=True)\nplt.show()","4f4ae575":"x = data.drop('Outcome',axis=1)\ny = data['Outcome']","261ab876":"x.shape,y.shape","bb0ae1ad":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)","2513e760":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","f9fd9ba3":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","5d9044b6":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)","cf7ba4d0":"y_pred = classifier.predict(X_test)","8068bbe4":"from sklearn.metrics import confusion_matrix,accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","6c6e332a":"sns.heatmap(cm, annot=True)\nplt.show()","4786b262":"sns.heatmap(cm\/np.sum(cm), annot=True, \n            fmt='.2%', cmap='Blues')\nplt.show()","55837273":"labels = ['True Neg','False Pos','False Neg','True Pos']\nlabels = np.asarray(labels).reshape(2,2)\nsns.heatmap(cm, annot=labels, fmt='', cmap='Blues')\nplt.show()","b2d9caa6":"acc1 = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy score: {acc1}\")","678ee9ea":"from sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(X_train, y_train)","3c7ff8c4":"y_pred = classifier.predict(X_test)","35fcf4ce":"y_pred","25bcac47":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nacc2 = accuracy_score(y_test, y_pred)","e30212a8":"print(acc2)","9b9f464e":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)","c9f363f6":"acc3 = accuracy_score(y_test, y_pred)","cf68d063":"print(f\"Accuracy score: {acc3}\")","1d257bb6":"from sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)","1b34d013":"y_pred = classifier.predict(X_test)","edc1fcd5":"cm = confusion_matrix(y_test, y_pred)\nprint(cm)","71c6a137":"\nacc4 = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy score : {acc4}\")","02c61a33":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\nDecisionTreeClassifier(criterion='entropy', random_state=0)\ny_pred = classifier.predict(X_test)","f9db38ec":"cm = confusion_matrix(y_test,y_pred)\nprint(cm)","2c69043c":"acc5 = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy score: {acc5}\")","db2516a7":" from sklearn.ensemble import RandomForestClassifier\nforest= RandomForestClassifier(n_estimators =40, random_state = 0)\nforest.fit(X_train,y_train)\nRandomForestClassifier(n_estimators=40, random_state=0)\ny_pred = forest.predict(X_test)\nprint(confusion_matrix(y_test,y_pred))\n","2f752d8e":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","0cde2b62":"acc6 = forest.score(X_test,y_test)","d9f2aeb4":"print(acc6)","3c367386":"from xgboost import XGBClassifier\nclassifier = XGBClassifier()\nclassifier.fit(X_train, y_train)","8fa5419a":"y_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nacc7 = accuracy_score(y_test, y_pred)","c4e7ddf0":"print(acc7)","f597a78c":"mylist=[]\nmylist2=[]\nmylist.append(acc1)\nmylist2.append(\"Logistic Regression\")\nmylist.append(acc2)\nmylist2.append(\"SVM\")\nmylist.append(acc3)\nmylist2.append(\"KNN\")\nmylist.append(acc4)\nmylist2.append(\"Naive Bayes\")\nmylist.append(acc5)\nmylist2.append(\"DTR\")\nmylist.append(acc6)\nmylist2.append(\"RF\")\nmylist.append(acc7)\nmylist2.append(\"XGBoost\")\nplt.rcParams['figure.figsize']=8,6\nsns.set_style(\"darkgrid\")\nplt.figure(figsize=(22,8))\nax = sns.barplot(x=mylist2, y=mylist, palette = \"mako\", saturation =1.5)\nplt.xlabel(\"Classification Models\", fontsize = 20 )\nplt.ylabel(\"Accuracy\", fontsize = 20)\nplt.title(\"Accuracy of different Classification Models\", fontsize = 20)\nplt.xticks(fontsize = 11, horizontalalignment = 'center', rotation = 8)\nplt.yticks(fontsize = 13)\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate(f'{height:.2%}', (x + width\/2, y + height*1.02), ha='center', fontsize = 'x-large')\nplt.show()","0908aa60":"<h4>Here we can see from age 22 to 40 has the more diabetes.<\/h4>","b2080f2c":"# Training the Naive Bayes on the Training set","4586b12b":"**Feel free to ask,  your queries....\u263a\ufe0f**","6dd7d026":"<h3>Context<\/h3>","35046943":"# Logistic Regression","21d11e89":"# SVM","94882984":"# Training Decision Tree Classification on Train set","89ebd249":"# Feature scalling","361f8ee8":"DataSet Link : https:\/\/www.kaggle.com\/uciml\/pima-indians-diabetes-database","833de62c":"# Apply the ML(Classification model).","5f53dbb9":"<h3>Content<\/h3>","42bea452":"# Training the K-NN model on the Training set","83b91711":"**The datasets consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.**","42cf11ba":"# Create visualization for all model with their Accuracy","01701ed3":"# Random Forest Classifier","a13ab987":"# Making confusion matrix","17885ce5":"<h3>Columns<\/h3>","1d925819":"# Introduction","80fa43d5":"* Pregnancies : Number of times pregnant\n* Glucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n* BloodPressure : Diastolic blood pressure (mm Hg)\n* SkinThickness : Triceps skin fold thickness (mm)\n* Insulin : 2-Hour serum insulin (mu U\/ml)\n* BMI : Body mass index (weight in kg\/(height in m)^2)\n* DiabetesPedigreeFunction : Diabetes pedigree function\n* Age : Age (years)\n* Outcome : Class variable (0 or 1) 268 of 768 are 1, the others are 0","5dd3b310":"# Training XGBoost on the Training set","fb3ef30d":"![](https:\/\/c.tenor.com\/WQ-Zqtg1_kwAAAAC\/thank-you-spongebob.gif)","acce24e9":"**This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.**","2201570d":"# Predict the test result","a7cc53ae":"# Split the dataset into train and test","bf9af626":"![](https:\/\/www.medical-tribune.de\/fileadmin\/Medizin_und_Forschung\/Artikelbilder\/2020\/Oktober_2020\/20201014_Diabetes_Diagnose_AdobeStock_272349802_WrightStudio_823.png)","86be63d6":"<h5>Since the range of values of raw data varies widely, in some machine learning algorithms, objective functions do not work correctly without normalization<\/h5>"}}