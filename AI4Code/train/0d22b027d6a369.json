{"cell_type":{"bf0fb36a":"code","e3b4726a":"code","41253074":"code","2a735d27":"code","4fb10e04":"code","c2137a93":"code","e9aa764f":"code","154149ca":"code","111dba16":"code","3e620cc5":"code","33c2b6a4":"code","d1e687be":"code","6c589d51":"code","4a80116e":"code","a2a69b00":"code","747cc017":"code","bb1465d2":"code","72f47957":"code","802bdfb3":"code","8953366f":"code","2a104b46":"code","daf09ff2":"code","87264600":"code","1d33bd49":"code","44ab4499":"code","723e214f":"code","f44b825f":"code","a3632725":"code","ea4be34b":"code","e0a0f6a2":"code","f36c9574":"markdown","b819cde2":"markdown","6f748212":"markdown"},"source":{"bf0fb36a":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport json\nimport ipywidgets as widgets\n\nfrom matplotlib import pyplot as plt\nfrom typing import Dict, List, Any, Callable, Optional\nfrom tqdm.notebook import tqdm","e3b4726a":"SIDE = 5\nENDZONE = 10\nFIELD_L = 120\nFIELD_W = 53.3\nFIELD_MID = 60\nFIELD_X = (0 - SIDE, FIELD_L + SIDE)\nFIELD_Y = (0 - SIDE, FIELD_W + SIDE)\nFIELD_XD = (FIELD_X[1] - FIELD_X[0]) \/ 10\nFIELD_YD = (FIELD_Y[1] - FIELD_Y[0]) \/ 10\nFIELD_RATIO = 1.25\nFIELD_DIM = (FIELD_RATIO * FIELD_XD, FIELD_RATIO * FIELD_YD)\n\n\ndef plot_field(plt):\n    style = {\n        \"c\": \"black\",\n        \"alpha\": 0.5,\n    }\n    plt.xlim(*FIELD_X)\n    plt.ylim(*FIELD_Y)\n    plt.plot([0, FIELD_L], [0, 0], **style)\n    plt.plot([0, FIELD_L], [FIELD_W, FIELD_W], **style)\n    plt.plot([0, 0], [0, FIELD_W], **style)\n    plt.plot([FIELD_L, FIELD_L], [0, FIELD_W], **style)\n    for x in range(ENDZONE, FIELD_L, 10):\n        yard = 50 - abs(x - 10 - 50)\n        no_dash = (x == FIELD_MID) or (x == ENDZONE) or (x == (FIELD_L - ENDZONE))\n        style = {\n            \"c\": \"black\",\n            \"alpha\": 0.5,\n            \"dashes\": [] if no_dash else [2, 2],\n        }\n        plt.plot([x, x], [0, FIELD_W], **style)\n        plt.text(s=yard, x=x, y=-2, ha=\"center\")\n    fig = plt.gcf()\n    fig.set_size_inches(*FIELD_DIM)\n    \n","41253074":"DIR = \"..\/input\/nfl-big-data-bowl-2022\"\nDIR_VT = \"..\/input\/process-punt-return-decision-data\"\nDIR_PRED = \"..\/input\/model-training-returns-for-loss\"\ndf_preds = pd.read_csv(f\"{DIR_PRED}\/predictions.csv\")\ndf_preds[\"players\"] = df_preds[\"players\"].apply(lambda j: json.loads(j))\nprint(f\"Loaded {df_preds.shape[0]:,d} plays with predictions.\")\ndf_games = pd.read_csv(f\"{DIR}\/games.csv\")\ndf_players = pd.read_csv(f\"{DIR}\/players.csv\")\n# Get patched versions from our custom output\ndf_plays = pd.read_csv(f\"{DIR_VT}\/plays_patched.csv\")\ndf_pff = pd.read_csv(f\"{DIR_VT}\/pff_patched.csv\")","2a735d27":"df_preds.columns","4fb10e04":"df_preds.head()","c2137a93":"PLAY_KEYS = [\"gameId\", \"playId\"]","e9aa764f":"#ballLanding is ball is returnable\ndf_preds[PLAY_KEYS + ['returnerNflId', 'ballLandingYardline','penaltyResultYardline', 'specialTeamsResult']].head()","154149ca":"df_preds['specialTeamsResult'].unique()","111dba16":"#Helper Functions\ndef result_classifier(x):\n    if x == 'Fair Catch':\n        return 'Fair Catch'\n    elif x == 'Return' or x == 'Muffed':\n        return 'Return'\n    else:\n        return 'Bail'","3e620cc5":"DISPLAY_KEYS = PLAY_KEYS + ['returnerNflId', 'ballLandingYardline', 'specialTeamsResult', 'penaltyResultYardline']\ndf_ball_lands = df_preds.copy()\ndf_ball_lands['ballLandingYardline'] = df_preds['ballLandingYardline']\ndf_ball_lands[DISPLAY_KEYS].head()","33c2b6a4":"df_ball_lands['classifiedResult'] = df_ball_lands['specialTeamsResult'].apply(result_classifier)\ndf_ball_lands[DISPLAY_KEYS + ['classifiedResult']]","d1e687be":"DISPLAY_KEYS = DISPLAY_KEYS + ['classifiedResult']\n#making a new column result yardage from when the punt lands to where the offense starts \nprint(df_ball_lands[DISPLAY_KEYS].reset_index())\ndf_ball_lands['netDecisionYards'] = df_ball_lands['penaltyResultYardline'] - df_ball_lands['ballLandingYardline']","6c589d51":"df_ball_lands[DISPLAY_KEYS + ['netDecisionYards']]","4a80116e":"df_ball_lands['landX'] = df_ball_lands['ballLandingX'].apply(np.round)\ndf_ball_lands['landY'] = df_ball_lands['ballLandingY'].apply(np.round)\ndf_bl_x_y = df_ball_lands.groupby(['landX', 'landY', 'classifiedResult'])['playId'].count().reset_index()\ndf_bl_x_y['fraction'] = df_bl_x_y['playId'] \/ len(df_ball_lands)\ndf_bl_x_y_mc = df_bl_x_y.groupby(['landX', 'landY', 'classifiedResult'])['playId'].max().reset_index()\ndf_bl_x_y_j = df_bl_x_y_mc.join(df_bl_x_y.set_index(['landX', 'landY', 'playId', 'classifiedResult'])\\\n                                , on = ['landX', 'landY', 'playId', 'classifiedResult'], )\\\n                                .rename(columns = {'classifiedResult' : 'result'})\nassert df_bl_x_y_j['result'].isna().sum() == 0, \"some yards don't have a classified result\"\n","a2a69b00":"sns.palplot(sns.color_palette('hls',3))","747cc017":"plot_field(plt)\nsns.scatterplot(\n    data = df_ball_lands,\n    x = 'ballLandingX',\n    y = 'ballLandingY',\n    hue = 'classifiedResult',\n    palette = {'Fair Catch' : 'blue', 'Return' : 'yellow', 'Bail' : 'black'},\n    alpha = 0.5)\nplt.legend()\nplt.show()","bb1465d2":"df_ball_lands.head()","72f47957":"\ndef df_to_heatmap_gp(df):\n    df_hm = df.copy()\n    df_hm['ballLandingXFloor'] = df_hm['ballLandingX'].apply(np.floor).astype(int)\n    df_hm['ballLandingYFloor'] = df_hm['ballLandingY'].apply(np.floor).astype(int)\n    gp_hm = (\n        df_hm\n            .groupby(['ballLandingXFloor', 'ballLandingYFloor', 'classifiedResult'])\n            ['playId'].count()\n            .reset_index()\n            .rename(columns = {'playId': 'playCount'})\n    )\n    return gp_hm","802bdfb3":"# plot_field(plt)\n# sns.scatterplot(data = gp_hm, x = 'ballLandingXFloor', y = 'ballLandingYFloor', opacity = 5)","8953366f":"def join_to_matrix(gp, xSize, ySize, xCol, yCol, valCol):\n    rows, columns = np.indices((ySize, xSize))\n    rows = rows.flatten()\n    columns = columns.flatten()\n    df_mat = pd.DataFrame({'rows' : rows, 'columns' : columns}, index = range(len(rows)))\n    df_mat_w_hm = df_mat.join(gp.set_index([yCol, xCol]), on = ['rows', 'columns'])\n    mat = df_mat_w_hm[valCol].fillna(0).values.reshape(ySize,xSize)\n    return mat","2a104b46":"mat_fc = join_to_matrix(\n    df_bl_x_y[df_bl_x_y['classifiedResult'] == 'Fair Catch'],\n    80,\n    54,\n    'landX',\n    'landY',\n    'fraction'\n)\nmat_ret = join_to_matrix(\n    df_bl_x_y[df_bl_x_y['classifiedResult'] == 'Return'],\n    80,\n    54,\n    'landX',\n    'landY',\n    'fraction'\n)\nmat_bail = join_to_matrix(\n    df_bl_x_y[df_bl_x_y['classifiedResult'] == 'Bail'],\n    80,\n    54,\n    'landX',\n    'landY',\n    'fraction'\n)","daf09ff2":"plot_field(plt)\nplt.imshow(mat_fc, cmap = 'Greens')\nplt.colorbar()\nplt.show()","87264600":"plot_field(plt)\nplt.imshow(mat_ret, cmap = 'Blues')\nplt.colorbar()\nplt.show()","1d33bd49":"plot_field(plt)\nplt.imshow(mat_bail, cmap = 'Reds')\nplt.colorbar()\nplt.show()","44ab4499":"#create a groupby using a dataframe\n#build analysis on this model\n#think about applications in when this could be useful","723e214f":"def plot_kicks_from_yardline(y, r):\n    colors = {'Return' : 'Greens', 'Bail' : 'Reds', 'Fair Catch' : 'Blues'}\n    df_query = df_ball_lands.query(f\"kickingYardline <= {y} and kickingYardline > {y-10}\")\n    df_gp = df_to_heatmap_gp(df_query)\n    mat = join_to_matrix(\n        df_gp[df_gp['classifiedResult'] == r],\n        120,\n        54,\n        'ballLandingXFloor',\n        'ballLandingYFloor',\n        'playCount'\n    )\n    plot_field(plt)\n    plt.axvline(120 - y)\n    plt.axvline(120 - y - 10 )\n    if len(df_gp) >= 1:\n        plt.imshow(mat, cmap = colors.get(r))\n        plt.colorbar()\n    plt.title(f\"n = {len(df_query)} returnable punts ending in {r}, punts from {y-10} to {y}\")\n    plt.show()","f44b825f":"_ = widgets.interact(plot_kicks_from_yardline, y = (10,80,10), r = ['Return', 'Fair Catch', 'Bail'])","a3632725":"#Rounding landing yardline\ndf_ball_lands['ballLandingYardline'] = df_ball_lands['ballLandingYardline'].apply(np.floor)\n#Querying for punts landed futher than opponent 35\ndf_ball_lands = df_ball_lands.query('ballLandingYardline <= 65')","ea4be34b":"def netDecisionYards_based_on_kickingYardline(y) :\n    df_query = df_ball_lands.copy()\n    df_heats = df_query.query(f\"kickingYardline > {y-10} and kickingYardline <= {y}\")\n    \n    df_heat_zones = df_heats\\\n    .groupby(['ballLandingYardline', 'classifiedResult'])['netDecisionYards']\\\n    .mean().reset_index()\\\n    .rename(columns = {'netDecisionYards': 'yardsPlusMinus'})\n\n    df_bl_copy = df_heats.copy()\n\n    df_bl_copy = df_bl_copy.groupby(['ballLandingYardline', 'classifiedResult'])['playId']\\\n            .count()\\\n            .reset_index()\\\n            .rename(columns = {'playId' : 'playCount'})\n\n    df_heat_zones_ud = df_heats.join(df_bl_copy.set_index(['ballLandingYardline', 'classifiedResult'])\n                                          , on = ['ballLandingYardline', 'classifiedResult'])\\\n                                         .rename(columns = {'netDecisionYards': 'yardsPlusMinus'})\n\n        \n    df_heat_zones_ud = df_heat_zones_ud.query('playCount >= 4')\n        \n    print(f\"Decision plus\/minus yardage when punted between {y - 10} and {y} of kicking team\")\n    \n    sns.lineplot(\n        data = df_heat_zones_ud,\n        x = 'ballLandingYardline',\n        y = 'yardsPlusMinus',\n        hue = 'classifiedResult',\n        palette = {'Fair Catch' : 'blue', 'Return' : 'green', 'Bail' : 'red'}\n    )\n    plt.gcf().set_size_inches(12,6)\n    plt.legend()\n    plt.show()","e0a0f6a2":"_ = widgets.interact(netDecisionYards_based_on_kickingYardline, y = (10,80,10))","f36c9574":"# Heat Map","b819cde2":"# Analytics: Returns For Loss ","6f748212":"# Load Data"}}