{"cell_type":{"655e817d":"code","9f8070ce":"code","be038a42":"code","74672f02":"code","30c54eb1":"code","f32cb252":"code","f5555898":"code","a20524ff":"code","fb700d03":"code","4f668d45":"code","be5ebe8d":"code","fef7fe13":"code","ce9c5f7e":"code","c2c0e100":"code","843d7e2e":"code","9fa3ae68":"code","21c33bad":"code","07a08c40":"code","08f61f61":"code","952cf1c0":"code","757a0463":"code","666f1400":"code","8155985d":"code","23cf82fe":"code","94ceb515":"code","4db0036d":"code","9e210a67":"code","06f161f1":"code","19666a21":"code","89e0c182":"code","d23e486a":"code","0bf09168":"code","9b5b77f9":"code","2aad4814":"code","a7c7b728":"code","ef857ed1":"code","f67df2bd":"code","68f9e2db":"code","78d01bae":"code","45982c5d":"code","389885eb":"code","07c394ab":"code","14eb16be":"code","c5de628a":"code","06ebd107":"code","bdda500e":"code","a78d1df6":"code","6dbea6e5":"code","f0b0dc8c":"code","04508791":"code","c40b167d":"code","5f6a9e25":"code","cbf79859":"code","80a1c339":"code","7a844ff4":"code","3bd8f783":"code","b9fdbb94":"code","44f0c9ee":"code","e0e6e276":"code","5509876a":"code","b09b13f4":"code","bea3519d":"code","c35f070e":"code","f68643eb":"code","8a24f71b":"code","64f7a731":"code","0c18c938":"code","f4bfb6a6":"code","dc203bbe":"code","897b5cf1":"code","d506df8d":"markdown","07115b3e":"markdown","ce40f59c":"markdown","4515a948":"markdown","066d31b8":"markdown","7dcc1f6d":"markdown","53917baf":"markdown","2ed63532":"markdown","4085cf50":"markdown","d3380776":"markdown","04468479":"markdown","d5c8c7a8":"markdown","73d0834a":"markdown","d4bab141":"markdown","a5fba0fd":"markdown","9dfd3479":"markdown","af3bb84c":"markdown","cfd7042e":"markdown","c5aacef2":"markdown","2c523f0e":"markdown","aa07ce29":"markdown","69258fb6":"markdown","d4f6659d":"markdown","7da20de0":"markdown","4f75a75c":"markdown","8cc1acde":"markdown","94178bb4":"markdown","703f2607":"markdown","a99e5da5":"markdown","6d728bcb":"markdown","d5192f54":"markdown","2dcdcfc8":"markdown","14054758":"markdown","bd163df8":"markdown","689b9809":"markdown","024c9a5a":"markdown","7e6c8387":"markdown","0c153ffb":"markdown","ca73000e":"markdown","110773f6":"markdown","6d738601":"markdown","0e87d38c":"markdown","0799b480":"markdown"},"source":{"655e817d":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt","9f8070ce":"sns.set_style('ticks')","be038a42":"data_matches = pd.read_csv('..\/input\/league-of-legends-world-championship-2019\/wc_matches.csv')\ndata_players = pd.read_csv('..\/input\/league-of-legends-world-championship-2019\/wc_players.csv')\ndata_champions = pd.read_csv('..\/input\/league-of-legends-world-championship-2019\/wc_champions.csv')","74672f02":"data_matches.info()","30c54eb1":"data_matches.head()","f32cb252":"del data_matches['Unnamed: 0']","f5555898":"data_matches.isna().sum()","a20524ff":"data_matches['date'] = pd.to_datetime(data_matches['date'])","fb700d03":"data_players.info()","4f668d45":"data_players.head()","be5ebe8d":"del data_players['Unnamed: 0']","fef7fe13":"data_players.isna().sum()","ce9c5f7e":"data_players['heraldtime'].isna().sum()","c2c0e100":"del data_players['heraldtime']","843d7e2e":"data_champions.info()","9fa3ae68":"data_champions.head()","21c33bad":"del data_champions['Unnamed: 0']","07a08c40":"data_champions.isna().sum()","08f61f61":"data_matches.describe()","952cf1c0":"winners = set(data_matches['winner'].explode().unique())\nwinners","757a0463":"teams = set(data_matches['team1'].explode().unique())\nteams","666f1400":"teams.difference(winners)","8155985d":"data_players.describe()","23cf82fe":"data_champions.describe()","94ceb515":"data_matches.head()","4db0036d":"mvp_data = data_matches['mvp'].value_counts().to_frame().reset_index()\nmvp_data.columns = ['name', 'mvp_count']\nmvp_data.head()","9e210a67":"fig, ax = plt.subplots()\nfig.set_size_inches(50.7, 25.27)\nsns.barplot(data=mvp_data, x='name', y='mvp_count')","06f161f1":"sides = ['Blue', 'Red']\ndef count_win_on_side(row):\n    if (row['winner'] == row['blue']):\n        return pd.Series([1, 0], sides)\n    else:\n        return pd.Series([0, 1], sides)\n\ndata_sides = data_matches.apply(lambda row: count_win_on_side(row), axis=1).mean()","19666a21":"fig, ax = plt.subplots(figsize=(20, 7), subplot_kw=dict(aspect=\"equal\"))\n\ncolors = ['#51acc6', '#ea96a3']\nplt.pie(data_sides, colors=colors, labels=sides)\n\nax.set_title('Distribution of the winning percentage by side', pad=20)\nplt.axis('equal')\nplt.show()","89e0c182":"pbp_caster_data = data_matches['pbp_caster'].value_counts().to_frame().reset_index()\npbp_caster_data.columns = ['name', 'count']\nfig, ax = plt.subplots()\nfig.set_size_inches(7, 5)\nsns.barplot(data=pbp_caster_data, x='name', y='count')","d23e486a":"color_caster_data = data_matches['color_caster'].value_counts().to_frame().reset_index()\ncolor_caster_data.columns = ['name', 'count']\nfig, ax = plt.subplots()\nfig.set_size_inches(33, 10)\nsns.barplot(data=color_caster_data, x='name', y='count')","0bf09168":"data_winner = data_matches['winner'].value_counts().to_frame().reset_index()\ndata_winner.columns = ['name', 'count']\nfig, ax = plt.subplots(figsize=(20, 7), subplot_kw=dict(aspect='equal'))\n\nwedges, texts = plt.pie(data_winner['count'], labels=data_winner['name'])\n\nax.set_title('Distribution of the winning percentage by team', pad=20)\nax.legend(wedges, data_winner['name'],\n          title='Teams',\n          loc='center left',\n          bbox_to_anchor=(1, 0, 0.5, 1))\nplt.axis('equal')\nplt.show()","9b5b77f9":"data_players.head()","2aad4814":"columns_ban = ['ban1', 'ban2', 'ban3', 'ban4', 'ban5']\ndata_bans = None\nfor column_name in columns_ban:\n    # This is player's data, so we need to divide ban count by members count in a team\n    bans = data_players[column_name].value_counts()\/5\n    bans = bans.astype('int').to_frame().reset_index()\n    if (data_bans is None):\n        data_bans = bans\n    else:\n        data_bans = data_bans.merge(bans, on='index')\ndata_bans['ban_count'] = data_bans['ban1'] + data_bans['ban2'] + data_bans['ban3'] + data_bans['ban4'] + data_bans['ban5']\ndel data_bans['ban1'], data_bans['ban2'], data_bans['ban3'], data_bans['ban4'], data_bans['ban5']\ndata_bans.columns = ['champion', 'ban_count']\nprint(data_bans)","a7c7b728":"fig, ax = plt.subplots(figsize=(20, 7), subplot_kw=dict(aspect='equal'))\n\nwedges, texts = plt.pie(data_bans['ban_count'], labels=data_bans['champion'])\n\nax.set_title('Distribution of the ban percentage by champion', pad=20)\nax.legend(wedges, data_bans['champion'],\n          title='Champions',\n          loc='center left',\n          bbox_to_anchor=(1, 0, 0.5, 1))\nplt.axis('equal')\nplt.show()","ef857ed1":"data_players.groupby('player')['csat15'].mean().sort_values(ascending=False)","f67df2bd":"data_players.groupby('player')['xpat10'].mean().sort_values(ascending=False)","68f9e2db":"data_players.groupby('player')['teamkills'].sum().sort_values(ascending=False)","78d01bae":"data_players.groupby('player')['ft'].sum().sort_values(ascending=False)","45982c5d":"data_players.groupby('player')['totalgold'].mean().sort_values(ascending=False)","389885eb":"data_players.groupby('player')['pentas'].sum().sort_values(ascending=False)","07c394ab":"data_players.groupby('player')['fb'].sum().sort_values(ascending=False)","14eb16be":"data_players.groupby('player')['minionkills'].mean().sort_values(ascending=False)","c5de628a":"data_players.groupby('player')['wards'].mean().sort_values(ascending=False)","06ebd107":"data_players.groupby('player')['visionwards'].mean().sort_values(ascending=False)","bdda500e":"data_players.groupby('player')['dmgtochamps'].mean().sort_values(ascending=False)","a78d1df6":"data_players.groupby('player')['fbaron'].sum().sort_values(ascending=False)","6dbea6e5":"data_champions.head()","f0b0dc8c":"data_champions.sort_values(by='win_total', ascending=False)","04508791":"data_champions.sort_values(by='winrate_total', ascending=False)","c40b167d":"data_matches.head()","5f6a9e25":"data_phoenix_win_matches = data_matches.loc[((data_matches['team1'] == 'FunPlus Phoenix') | (data_matches['team2'] == 'FunPlus Phoenix') & (data_matches['winner'] == 'FunPlus Phoenix'))]","cbf79859":"data_phoenix_win_matches","80a1c339":"data_phoenix_win_sides = data_phoenix_win_matches.apply(lambda row: count_win_on_side(row), axis=1).mean()","7a844ff4":"fig, ax = plt.subplots(figsize=(20, 7), subplot_kw=dict(aspect=\"equal\"))\n\ncolors = ['#51acc6', '#ea96a3']\nplt.pie(data_phoenix_win_sides, colors=colors, labels=sides)\n\nax.set_title('Distribution of the FunPlus Phoenix winning percentage by side', pad=20)\nplt.axis('equal')\nplt.show()","3bd8f783":"data_phoenix_lose_matches = data_matches.loc[(((data_matches['team1'] == 'FunPlus Phoenix') | (data_matches['team2'] == 'FunPlus Phoenix')) & (data_matches['winner'] != 'FunPlus Phoenix'))]","b9fdbb94":"data_phoenix_lose_sides = data_phoenix_lose_matches.apply(lambda row: count_win_on_side(row), axis=1).mean()","44f0c9ee":"fig, ax = plt.subplots(figsize=(20, 7), subplot_kw=dict(aspect=\"equal\"))\n\ncolors = ['#51acc6', '#ea96a3']\nplt.pie(data_phoenix_lose_sides, colors=colors, labels=sides)\n\nax.set_title('Distribution of the FunPlus Phoenix lose percentage by side', pad=20)\nplt.axis('equal')\nplt.show()","e0e6e276":"data_phoenix_lose_matches","5509876a":"phoenix_players = ['GimGoon', 'Lwx', 'Crisp', 'Doinb', 'Tian']","b09b13f4":"data_players.head()","bea3519d":"phoenix_player_data = data_players.loc[data_players['player'].isin(phoenix_players)]","c35f070e":"phoenix_player_data","f68643eb":"data_players.groupby('player')['teamkills'].sum().sort_values(ascending=False)","8a24f71b":"data_players.groupby('player')['fbaron'].sum().sort_values(ascending=False)","64f7a731":"data_players.groupby('player')['dmgtochamps'].mean().sort_values(ascending=False).head(15)","0c18c938":"data_players.groupby('player')['visionwards'].mean().sort_values(ascending=False).head(15)","f4bfb6a6":"data_players.groupby('player')['wards'].mean().sort_values(ascending=False).head(15)","dc203bbe":"data_players.groupby('player')['minionkills'].mean().sort_values(ascending=False).head(15)","897b5cf1":"data_players.groupby('player')['fb'].sum().sort_values(ascending=False).head(15)","d506df8d":"Let's remove unnecessary column **Unnamed: 0**","07115b3e":"FunPlus Phoenix team are top 5 in teamkills, also","ce40f59c":"### Champions","4515a948":"Another unnecessary column **Unnamed: 0**","066d31b8":"I can conclude that FPX won early game and stomp their opponents with gold diff. We can't see them in top cs or damage stat, only in baron and teamkills.","7dcc1f6d":"And only support in top 15 of vision wards.","53917baf":"Nothing interesting at first sight. ","2ed63532":"Nothing interesting too.","4085cf50":"No NA values, great !","d3380776":"As for previous player visual analysis, we can say that:","04468479":"Let's check why **FunPlus** Phoenix won this competition and we can conclude something about selection of casters on matches.","d5c8c7a8":"Same situation with simple wards.","73d0834a":"23 unique winners and 24 unique teams ? There is team without wins ? Let's find out this team.","d4bab141":"On blue side you can more easily contest dragons, so maybe FunPlux Phoenix team played around botside and contest dragons ?","a5fba0fd":"* Introduction\n* Preparations\n    * Matches\n    * Players\n    * Champions\n* Quick Look: Files and content\n* Visual Overview\n    * Matches\n    * Players\n    * Champions\n* Analysis\n    * Matches\n    * Players\n* Conclusion\n* Note","9dfd3479":"## Analysis","af3bb84c":"Let's check loses of this team.","cfd7042e":"### Matches","c5aacef2":"## Note","2c523f0e":"Great, no problems with this table.","aa07ce29":"## Conclusion","69258fb6":"### Players","d4f6659d":"### Matches","7da20de0":"## Quick Look","4f75a75c":"### Players","8cc1acde":"As we can see, FPX are not in top15 in damage to champions stat and also,","94178bb4":"## Preparations","703f2607":"The 2019 League of Legends World Championship was the ninth world championship for League of Legends, an esports tournament for the video game developed by Riot Games. It was held from October 2, 2019, to November 10, 2019, in Berlin, Madrid and Paris. Twenty four teams from 13 regions qualified for the tournament based on their placement in regional circuits such as those in China, Europe, North America, South Korea and Taiwan\/Hong Kong\/Macau with twelve of those teams having to reach the main event via a play-in stage.","a99e5da5":"Now, problems with this table have been resolved.","6d728bcb":"Top 5 in a first baron time.","d5192f54":"## Introduction","2dcdcfc8":"As we see, we can identify several reasons for FPX victory in WC 2019:\n1. Stomp Early\n2. Early First Baron \n3. A lot of fights, which leads to a large number of teamkills and gold.\n\nWe can only congratulate this team on the victory with such statistics, bypassing all the \"rules\" of the professional League of legends, they were able to win with their ability to play as a team.\n\nAs for casters Riot Games prefers **Jatt**, **Medic**, **Drakos** as for their main casters for WC 2019.","14054758":"**ahq eSports Club** the only team that didn't win a single game, interesting.","bd163df8":"Also, **date** column has *object* type, let's convert it to a *datetime*.","689b9809":"### Players","024c9a5a":"Let's check sides first.","7e6c8387":"FunPlus Phoenix lost 2 matches on a red side !","0c153ffb":"If you like this notebook, please upvote it.  \nYou can also view my *League of Legends* datasets.\n* [WC 2019](https:\/\/www.kaggle.com\/ilyadziamidovich\/league-of-legends-world-championship-2019)\n* [LCL 2019](https:\/\/www.kaggle.com\/ilyadziamidovich\/league-of-legends-lcl-2019)","ca73000e":"### Matches","110773f6":"Let's check this table for NA.","6d738601":"### Champions","0e87d38c":"As we can see in other stat, we can't find players from FPX except GimGoon.","0799b480":"## Visual Overview"}}