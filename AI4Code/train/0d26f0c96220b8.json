{"cell_type":{"a4277452":"code","72cd9e65":"code","acaddef5":"code","90f5fa53":"code","8ab9d328":"code","ed6783fa":"code","19272279":"code","0a9154fe":"code","25fd15d1":"code","81207364":"code","2c79e51d":"code","52368df5":"code","f0668536":"code","f83b11b1":"code","f3da7659":"code","db43d221":"code","6076d1e2":"code","67bb0a93":"code","d2d7dddd":"code","a6c60707":"code","20dece8e":"code","75a199f7":"code","0b914b89":"code","1c86c56f":"code","67334670":"code","80ff62bd":"code","1ae67ab8":"code","b5722b63":"code","89ee989d":"code","26c5e9c0":"code","cb0f019d":"code","69998bbf":"code","1112832e":"code","e4fb409e":"code","17545ad8":"code","a352667d":"code","98f99ef8":"code","739efa62":"code","e071223b":"code","cea4aeb3":"code","9cd7965f":"code","d6135d85":"code","c32fc79e":"code","6cdbd302":"code","3685c84f":"code","6df2740a":"code","89dc86ae":"code","2b8223be":"code","d943943b":"code","34942e9d":"code","509734c7":"code","6fc5d960":"code","4fbc708d":"code","3dbcdbf0":"code","802dacbe":"code","c3131e95":"code","623934b8":"code","5ca84a2c":"code","9ff160c9":"code","394241e0":"code","9229c150":"code","8d6e3c64":"code","c336b6f6":"code","db2d88cc":"code","38397146":"code","997b8384":"code","da9a1e50":"code","38f3cda0":"code","5e035568":"code","81cccbc9":"code","6b42cf03":"code","2ce87476":"code","978c649f":"code","25ca1d89":"code","bdd7ca2c":"code","4023a217":"code","c4e2188b":"code","8eaaec9e":"markdown","9a40a700":"markdown","a2532882":"markdown","422a3d9f":"markdown","f5f3166c":"markdown","f5d6658c":"markdown","c3b197c8":"markdown","220c9343":"markdown","9a52333a":"markdown","39e588a6":"markdown","583dd535":"markdown","0071ba7e":"markdown","b3d97b98":"markdown","8e616c5e":"markdown","7b8b4e8c":"markdown","076c806c":"markdown","f7db5ee1":"markdown","d82a314e":"markdown","5fd51886":"markdown","fb08588a":"markdown","553e9599":"markdown","47a80668":"markdown","41dda236":"markdown","e42888c1":"markdown","53ab9f5c":"markdown","b6cca0c6":"markdown","d6feae0f":"markdown","ac18a881":"markdown","a04b071b":"markdown","0dd7935c":"markdown","4a19874d":"markdown","841fa06d":"markdown","a2b85316":"markdown","9ecde0a2":"markdown","4a47c0f4":"markdown","cca32885":"markdown","0d408bb4":"markdown","92df081e":"markdown","c3ac9aa6":"markdown"},"source":{"a4277452":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","72cd9e65":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math","acaddef5":"# Reading Data\ntrain_url = '\/kaggle\/input\/titanic\/train.csv'\ntest_url =  '\/kaggle\/input\/titanic\/test.csv'\n\ntrain = pd.read_csv(train_url) \ntest = pd.read_csv(test_url) ","90f5fa53":"# Age, Cabin, Embarked\ntrain.info()","8ab9d328":"train.head()","ed6783fa":"# All function needed for new features \ndef Correct_Age(age):\n    return math.ceil(age)\n\ndef Get_Title(sentance):\n    for w in sentance.split():\n        if \".\" in w:\n            return w.replace(\".\", \"\").lower()       \n\ndef Get_Surname(sentance):\n    return sentance.split()[0].replace(\",\", \"\")\n\ndef Correct_Title(df):\n    # mlle, ms, countess, mme, lady  ---> miss\n    miss_list = [\"mlle\", \"ms\", \"countess\", \"mme\", \"lady\"]\n    for i in miss_list:\n        df.loc[df.Title == i, \"Title\"] = \"miss\"\n    \n    # Compine passenger who work in value job or has ranked title together in special \n    job_title = ['don', 'rev', 'dr', 'major', 'sir','col', 'capt', 'jonkheer']  \n    for i in job_title:\n        df.loc[df.Title == i, \"Title\"] = \"special\"\n    \n    # Get Master Ages\n    max_age = df[df.Title == \"master\"][\"Age\"].max()\n    \n    #Specify Girl category in Title to miss's with age <= max master age\n    girls = (df.Title == \"miss\") & (df.Age <= max_age)\n    df.loc[girls, \"Title\"] = \"girl\"\n\n    return df[\"Title\"]\n\ndef Get_Child(df):\n    \n    df[\"child\"] = 0\n    \n    # master and girl categories only \n    child_cat = (df.Title == \"master\") | (df.Title == \"girl\")\n    \n    # Assign 1 in child column to child_cat \n    df.loc[child_cat, \"child\"] = 1  \n    return df[\"child\"]\n\ndef Fill_null_age(df):\n    df['Age'] = df['Age'].fillna(df.groupby('Title')['Age'].transform('median'))\n    return df['Age']\n\ndef Correct_Cabin(df):\n    \n    # Get \"Cabin\" values that have more than one cabin\n    combined_cabin = [c for c in df[\"Cabin\"].unique()[1:] if (len(c) > 4) and (c[0] != \"F\")]\n    f_combined_cabins = [c for c in df[\"Cabin\"].unique()[1:] if (len(c) > 4) and (c[0] == \"F\")]\n    \n    #  take just the first cabin for them all combined_cabin\n    for cc in combined_cabin:\n        df.loc[df.Cabin == cc, \"Cabin\"] = cc.split()[0].strip()\n    \n    for cc in f_combined_cabins:\n        df.loc[df.Cabin == cc, \"Cabin\"] = cc.split()[1]\n    \n\n\ndef Get_CabinClass(df):\n    # Cabin_values {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'unknown'}\n    #--------------{ 7,   6,   5,   4,   3,   2,   1,     0}\n    CabinClass = df[\"Cabin\"].str[0]\n    mapping = {'A': 7,\n               'B': 6,\n               'C': 5,\n               'D': 4,\n               'E': 3,\n               'F': 2,\n               'G': 1}\n    return CabinClass.map(mapping)\n\ndef Get_CabinNumber(df):\n    # Add new feature, the number of cabin\n    df[\"CabinNum\"] = df[\"Cabin\"].str[1:].replace(\"\", \"0\").astype(float)\n    return df[\"CabinNum\"]\n\ndef fill_nan_cabine(pclass, nan_length):\n\n    # Cabin_values {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'unknown'}\n    #--------------{ 7,   6,   5,   4,   3,   2,   1,     0}\n    \n    # Cabin_values for each pclass\n    # pclass 1 --> {A', 'B', 'C', 'D', 'E'}\n    # pclass 2 ----------------->{'D', 'E', 'F'}\n    # pclass 3 ---------------------->{'E', 'F', 'G'}\n    \n    # Generate random cabins and return it\n    if pclass == 1:\n        return pd.Series(np.random.randint(3, 8, nan_length)).values\n        \n    elif pclass == 2:\n        return pd.Series(np.random.randint(2, 5, nan_length)).values\n        \n    else:\n        return pd.Series(np.zeros(nan_length)).values\n    \ndef fill_nan_cabine_number(nan_length):\n    return np.random.randint(1, 150, nan_length)\n\ndef Get_HaveCabin(df):\n    df[\"HaveCabin\"] = df[\"CabinClass\"].notnull()\n    return df[\"HaveCabin\"]\n\n\ndef cal_position_x(num):\n    # right > left cause the crush happen first in right side of the  ship\n    # unknown -->0\n    # left --> 1\n    # right --> 2\n    if math.isnan(num) == False:\n        if num % 2 == 0:\n            # left --> even\n            return 1\n        else:\n            return 2\n    else:\n        return 0\n        \ndef cal_position_y(num):\n    # Since The front half of the ship reaches the bottom first\n    # unknown -->0\n    # back --> 1\n    # middle --> 2\n    # front --> 3\n    \n    if math.isnan(num) == False:\n        if num <= 45:\n            # the front part \n            return 3\n        elif ((num >= 46) and (num <= 90)):\n            # the middle part\n            return 2\n        elif num > 90:\n            return 1\n    else:\n        return 0","19272279":"# Traveller who Servived VS. who died \nprint(train[\"Survived\"].value_counts(normalize=True))\n\nsns.countplot(x=\"Survived\", data=train).set_xticklabels([\"Servived\", \"Dead\"])\nplt.title(\"Dead  VS. Servived \")\nplt.xlabel(\"\");","0a9154fe":"# Traveller's gender who Servived VS. who died \nprint(train[[\"Sex\", \"Survived\"]].value_counts())\n\nplt.title(\"Dead  VS. Servived \");\nsns.countplot(x=\"Survived\", hue=\"Sex\", data=train);","25fd15d1":"# Traveller's class who Servived VS. who died \nprint(train.groupby(\"Pclass\")[\"Survived\"].value_counts(normalize=True))","81207364":"# Traveller's class who Servived VS. who died \nprint(train.groupby([\"Pclass\", \"Sex\"])[\"Survived\"].value_counts(normalize=True))\nsns.catplot(x=\"Sex\", y=\"Survived\", col=\"Pclass\", kind=\"bar\", ci=None, data=train);","2c79e51d":"# Explore Age column\ntrain[\"Age\"].describe()","52368df5":"# Get columns that have age less than 1\ntrain[train[\"Age\"] < 1].sort_values(\"Pclass\")","f0668536":"# Explore Age of people who has \"Master\" title in there name \npeople_master = train[train[\"Name\"].str.contains(\"Master\")].sort_values(\"Pclass\")\ndisplay(people_master)\ndisplay(people_master.describe())","f83b11b1":"# Correct age \ntrain_small_ages = (train.Age < 1)\ntrain.loc[train_small_ages, \"Age\"] = train.loc[train_small_ages, \"Age\"].apply(Correct_Age)\n\ntest_small_ages = (test.Age < 1)\ntest.loc[test_small_ages, \"Age\"] = test.loc[test_small_ages, \"Age\"].apply(Correct_Age)\n","f3da7659":"# Explore passengers who has \"Baclini\" in their name \ntrain[train[\"Name\"].str.contains(\"Baclini\")]","db43d221":"# Fixing Helene's age \ntrain.loc[469, \"Age\"] = 3\n\n# Fixing Eugenie's age\ntrain.loc[644, \"Age\"] = 3","6076d1e2":"train[\"Age\"].describe()","67bb0a93":"# Get null values in Age col.\nnull_age = train[\"Age\"].isnull()\nprint(\"Number of null values in age column: \", null_age.sum())","d2d7dddd":"# Explore why these rows have null ages\ntrain[null_age].groupby(\"Pclass\")[\"PassengerId\"].count()","a6c60707":"# View observations from class 3 who have missing age \nx = train[null_age]\nx[x.Pclass == 3].sort_values(\"SibSp\", ascending=False).tail(10)","20dece8e":"# Get Surname & Title\ntrain[\"Surname\"] = train[\"Name\"].apply(Get_Surname)\ntrain[\"Title\"] = train[\"Name\"].apply(Get_Title)\n\ntest[\"Surname\"] = test[\"Name\"].apply(Get_Surname)\ntest[\"Title\"] = test[\"Name\"].apply(Get_Title)","75a199f7":"fig, ax = plt.subplots(figsize=(10,6))\nsns.countplot(x='Title', data=train, ax=ax);","0b914b89":"title_count = train[\"Title\"].value_counts()\ntitle_count","1c86c56f":"# Explore who from this list [mlle, ms, countess, mme, lady] are miss\nfor t in title_count.index:  \n    if (title_count[t] < 40):\n        print(\"--------------------------------------------- \"+ t + \" ---------------------------\")\n        display(train[(train.Title == t) ])","67334670":"# Check if lady is married or not \ndisplay(train[train.Surname == \"Duff\"])","80ff62bd":"# Compine common categories together\ntrain[\"Title\"] = Correct_Title(train)\n\ntest[\"Title\"] = Correct_Title(test)","1ae67ab8":"sns.countplot(x=\"Title\", data=train);","b5722b63":"# Create New Feature called child contains girl and master\ntrain[\"child\"] = Get_Child(train)\ntest[\"child\"] = Get_Child(test)","89ee989d":"train[\"child\"].value_counts()","26c5e9c0":"# Fill null ages with the median of each category in Tilte\ntrain['Age'] = Fill_null_age(train)\ntest['Age'] = Fill_null_age(test)","cb0f019d":"# Check if Age changed \ntrain.Age.isna().sum()","69998bbf":"# Find if there's nan in Ticket column\ntrain.Ticket.isna().sum()","1112832e":"# Count each one with same Ticket\ntrain_Groups = train.groupby(\"Ticket\")[\"PassengerId\"].count()\ntest_Groups = test.groupby(\"Ticket\")[\"PassengerId\"].count()","e4fb409e":"# Merge \"Groups\" panda series with train datafram on ticket values\ntrain = train.merge(train_Groups, on=\"Ticket\", how=\"left\")\n\ntest = test.merge(test_Groups, on=\"Ticket\", how=\"left\")","17545ad8":"# Change columns name PassengerId_x ---> PassengerId\n#                     PassengerId_y ---> Group\ntrain.rename(columns={'PassengerId_x': 'PassengerId', 'PassengerId_y': 'Group', \"child\": \"Child\"}, inplace=True)\ntest.rename(columns={'PassengerId_x': 'PassengerId', 'PassengerId_y': 'Group', \"child\": \"Child\"}, inplace=True)","a352667d":"# Create new feature HaveGroup True if Group > 1, False if not\ntrain[\"HaveGroup\"] = train[\"Group\"] > 1\ntest[\"HaveGroup\"] = test[\"Group\"] > 1","98f99ef8":"train[\"Group\"].unique()","739efa62":"# Correct group values \ntrain[\"Group\"] = train[\"Group\"] - 1\ntest[\"Group\"] = test[\"Group\"] - 1","e071223b":"# check that it groupped correcticly\nprint(train.shape)\ntrain.sort_values([\"Ticket\"]).head()","cea4aeb3":"train[\"Cabin\"].unique() ","9cd7965f":"[c for c in train[\"Cabin\"].unique()[1:] if (len(c) < 2)]","d6135d85":"train[train.Cabin == \"T\"]","c32fc79e":"train[train.Cabin == \"D\"]","6cdbd302":"[c for c in train[\"Cabin\"].unique()[1:] if (len(c) > 4)]","3685c84f":"#  take just the first cabin for them all combined_cabin\nCorrect_Cabin(train)\nCorrect_Cabin(test)","6df2740a":"# Cabin Classes \ntrain[\"CabinClass\"] = Get_CabinClass(train)\ntest[\"CabinClass\"] = Get_CabinClass(test)","89dc86ae":"train[\"CabinClass\"].fillna(0, inplace=True)\ntest[\"CabinClass\"].fillna(0, inplace=True)","2b8223be":"print(train[\"CabinClass\"].isna().sum())\nprint(test[\"CabinClass\"].isna().sum())","d943943b":"train.loc[((train.Pclass == 3) & (train.CabinClass.notnull())), \"CabinClass\"]","34942e9d":"for i in range(1,4):\n    print(\"Number of null cabinaless in pclass {0} is {1}\".format(i, ((train.Pclass == i) & train.CabinClass.isna()).sum()))","509734c7":"for i in range(1,4):\n    print(train.loc[(train.Pclass == i),\"CabinClass\"].value_counts())","6fc5d960":"# Add new feature, the number of cabin\ntrain[\"CabinNum\"] = Get_CabinNumber(train)\ntest[\"CabinNum\"] = Get_CabinNumber(test)","4fbc708d":"# Fill null values in fare \ntrain['Fare'] = train.Fare.fillna(train.Fare.median())\ntest['Fare'] = train.Fare.fillna(train.Fare.median())","3dbcdbf0":"# Add new Feature HaveCabin true if yes , false if not \ntrain[\"HaveCabin\"] = Get_HaveCabin(train)\ntest[\"HaveCabin\"] = Get_HaveCabin(test)","802dacbe":"# Add 2 new features position_x, position_y \ntrain[\"position_x\"] = train[\"CabinNum\"].apply(cal_position_x)\ntrain[\"position_y\"] = train[\"CabinNum\"].apply(cal_position_y)\n\ntest[\"position_x\"] = test[\"CabinNum\"].apply(cal_position_x)\ntest[\"position_y\"] = test[\"CabinNum\"].apply(cal_position_y)","c3131e95":"# split Fare, Age to 4 categories \n# Train\ntrain['CatAge'] = pd.qcut(train.Age, q=4, labels=False )\ntrain['CatFare']= pd.qcut(train.Fare, q=4, labels=False)\n\n#Test\ntest['CatAge'] = pd.qcut(test.Age, q=4, labels=False )\ntest['CatFare']= pd.qcut(test.Fare, q=4, labels=False)","623934b8":"# Adding family size \n# Train\ntrain['Fam_Size'] = train.Parch + train.SibSp\n\n#Test\ntest['Fam_Size'] = test.Parch + test.SibSp","5ca84a2c":"# Check if there's null values in Embarked\ntrain[train[\"Embarked\"].isnull()]","9ff160c9":"train[train[\"Pclass\"] ==1 ][\"Embarked\"].value_counts()","394241e0":"train.loc[train[\"Embarked\"].isnull(), \"Embarked\"] = \"S\"","9229c150":"cat_features = [\"Pclass\", \"Sex\", \"Embarked\", \"Title\", \"Child\", \"Group\", \"HaveGroup\", \"CabinClass\", \"HaveCabin\", \"position_x\", \"position_y\", \"CatAge\", \"CatFare\", \"Fam_Size\"]","8d6e3c64":"for feature in cat_features:\n    g = sns.countplot(x=feature, hue=\"Survived\", data=train)\n    plt.show()\n    ","c336b6f6":"#Feature that may not have heavy impact\n#[\"Child\", \"Group\"]","db2d88cc":"featurs = [\"Pclass\", \"Sex\", \"Embarked\", \"Title\", \"HaveGroup\", \"CabinClass\", \"HaveCabin\", \"position_x\", \"position_y\", \"CatAge\", \"CatFare\", \"Fam_Size\"]","38397146":"g = sns.countplot(x=\"position_x\", hue=\"Survived\", data=train)\ng.set_xticklabels([\"Unknown\", \"Left\",\"Right\"])\ng.set_xlabel(\"Position of cabina\")\ng.set_ylabel(\"Count\")","997b8384":"g = sns.countplot(x=\"position_y\", hue=\"Survived\", data=train)\ng.set_xticklabels([\"Unknown\", \"Back\",\"Middle\", \"Front\"])\ng.set_xlabel(\"Position of cabina\")\ng.set_ylabel(\"Count\")","da9a1e50":"train_x = train.drop([\"PassengerId\", \"Survived\"], axis=1)","38f3cda0":"g = sns.countplot(x=\"CabinClass\", hue=\"Survived\", data=train)\ng.set_xticklabels([\"Unknow\", \"A\",\"B\", \"C\", \"D\", \"E\", \"F\", \"G\"])\ng.set_xlabel(\"Position of cabina\")\ng.set_ylabel(\"Count\")","5e035568":"test.columns","81cccbc9":"X = train_x[featurs]\ny = train[\"Survived\"]\nX_test = test[featurs]","6b42cf03":"# Ordinal_Categorical_Feature\n#ord_feature = [\"Pclass\", \"Title\", \"position_x\", \"position_y\", \"CabinClass\", \"Child\"]\n\n# Nominal_Categorical_Feature\n#nom_feature= ['Sex', \"Group\", \"HaveGroup\", \"HaveCabin\"]\n\n# All Catefgoriacl Features\n#cat_feature = [\"Pclass\", \"Title\", \"position_x\", \"position_y\", \"\", \"Child\", 'Sex', 'Embarked', \"Group\", \"HaveGroup\", \"HaveCabin\"]","2ce87476":"# labeled_Categories\nlabel_cat = [\"Title\", \"Sex\", \"Embarked\"]","978c649f":"# labeled_Encoding \nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfor f in label_cat:\n    X[f] = le.fit_transform(X[f])\n    X_test[f] = le.fit_transform(X_test[f]) ","25ca1d89":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nmodels = []\nmodels.append((\"Logistic Regression:\",LogisticRegression(max_iter=1000)))\n\nmodels.append((\"Naive Bayes:\",GaussianNB()))\n\nmodels.append((\"K-Nearest Neighbour:\",KNeighborsClassifier(n_neighbors=3)))\n\nmodels.append((\"Support Vector Machine-linear:\",SVC(kernel=\"linear\", C=2)))\nmodels.append((\"Support Vector Machine-poly:\",SVC(kernel=\"poly\", degree=3, C=1.5)))\nmodels.append((\"Support Vector Machine-rbf:\",SVC(kernel=\"rbf\", C=2)))\n\nmodels.append((\"Decision Tree:\",DecisionTreeClassifier()))\nmodels.append((\"Random Forest:\",RandomForestClassifier(n_estimators=50)))","bdd7ca2c":"results = []\nnames = []\n\nfor name, model in models:\n    kfold = KFold(n_splits=10, random_state=42, shuffle=True)\n    result = cross_val_score(model, X, y, cv=kfold, scoring=\"accuracy\")\n    names.append(name)\n    results.append(result)\n    \n\n\"\"\"model.fit(X_train, y_train)\ncoss_val(model,X_train, y_train, cv=5)\nestimate_model(model, X_train, y_train, X_val, y_val)\nfeature_importance(model)\"\"\"\n  \nfor i in range(len(names)):\n    print(names[i],results[i].mean()*100)","4023a217":"test[\"Survived\"] = SVC(kernel=\"poly\", degree=3, C=1.5).fit(X, y).predict(X_test)\nsubmission = test[[\"PassengerId\", \"Survived\"]]\nsubmission.to_csv('\/kaggle\/working\/submission.csv', index=False)","c4e2188b":"from sklearn.metrics import f1_score\n\nreal_y = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\nscore = f1_score(real_y.Survived, test[\"Survived\"], average='macro')\nprint(\"Thr f1 score of \",score)","8eaaec9e":"******************************************************************************************** <br>\nmiss: Unmarried woman <br>\nmlle: Miss <br>\nlady: Women of a high social class <br>\nms: married or unmarried women <br>\nmrs: Married woman <br>\nmme: Sometimes Married woman <br>\ncountess: the wife or widow of an earl or count <br>\n******************************************************************************************** <br>\n <br>\nmaster: English honorific for boys and young men <br>\nmr: men under the rank of knighthood married or not  <br>\n********************************************************************************************| <br>\n <br>\njobs  <br>\ncol: Colonel officer rank <br>\nmajor: Officer rank above the rank of captain <br>\ncapt: Captain officer rank <br>\njonkheer: Young lord OR 'young lady', the lowest title within the nobility system <br>\nsir: Man of rank or position <br>\ndon: Mr <br>\ndr: doctor <br>\nrev: Reverend  <br>\n","9a40a700":"It make sense if most of pclass 1 passengers didn't have cabina  <br>\nBut those from pclass 1, and pclass 2 will fill there nan values with cabines that have same fare ","a2532882":"Note:<br>\nFrom previous, I have noticed that families share the same ticket value <br>\nSo, create a new feature called \"HaveGroup\" contains if this passenger was in group\/ family\/ child with a nany...etc <br>\nCause it's possible that people who know each either, rescued and help themself!  <br>","422a3d9f":"Will choose the model with the heighest accuracy --> Support Vector Machine-poly\n","f5f3166c":"# Explore columns in Titanic data set","f5d6658c":"Note: most of null ages are in class 3 which make sense, they might neglect to collect information about people from class c ","c3b197c8":"Assign to nan --> Random room numbers and random cabin for Pclass 1, 2","220c9343":"##  Explore Ticket column","9a52333a":"#### Dealing with combined cabin\nMost of the combined cabins belong to families <br>\nso, I will take just the first cabin for them all cause they all cabins closed to each other <br>\nex. C23 C25 C27 <br>\n23, 25, 27 are beside each other<br>","39e588a6":"position_x  position_y  Survived\n Unknown     Unknown     1           206\n#Unknown     Unknown     0           481\n\n Left        Back        1            11\n#Left        Back        0             7\n\n Left        Middle      1            16\n#Left        Middle      0            13\n\n Left        Front       1            41\n#Left        Front       0            24 \n\n Right       Back        1            14\n#Right       Back        0             4\n\n Right       Middle      1            19\n#Right       Middle      0            12 \n\n Right       Front       1            35\n#Right       Front       0             8\n\n\n","583dd535":"Note: <br>\nclass 1 has the least Death <br>\nclass 1 has the most Survivors <br>\n\nclass 3 has the most Death <br>\n\nSurvivors:<br>\nclass 1 > class 2 > class 3<br>\n\nDeath:<br>\nclass 3 > class 2 > class 1<br>","0071ba7e":"Most of cabins have char and one or two digit <br>\nFigure out if there's less than this \n","b3d97b98":"Most of first class people ride the ship from S, so will fill nan values with S","8e616c5e":"Both have same (Pclass, SibSp, Parch, Embarked,  Surname) and there's similarity in Age <br>\nBut Two different same in they differ in (Ticket, Fare, Cabin) <br>\nSo, They might be sibling <br>\nThen lady will be added to miss category  <br>","7b8b4e8c":"Check which feature have trend i","076c806c":"Note: <br> It dosen't make sense to have age less than 1 !!\n","f7db5ee1":"Fill nan values with Embarked of people from class 1 ","d82a314e":"Proplems to Explore:<br>\n1- Are people with master title in their name, Children ???<br>\n2- Are passengers with id 470, 645 sibiling ??<br>","5fd51886":"===========================================","fb08588a":"##  Explore Cabin column","553e9599":"### Encoding Categorical Values ","47a80668":"### Fill nan values in Age \n#### One solution is using scrapper from Encyclopedia Titanica website \nhttps:\/\/www.encyclopedia-titanica.org\n\nSurvivor_url = \"https:\/\/www.encyclopedia-titanica.org\/titanic-survivors-list\/\" <br>\ndead_url = \"https:\/\/www.encyclopedia-titanica.org\/titanic-victims-list\/\"<br>\n\n#Survivor with nan Age --> Survivor_nan_age<br>\nSurvivor_nan_age = passenger_nan_age[passenger_nan_age.Survived == 1]<br>\n\n#Dead with nan Age --> Survivor_nan_age<br>\ndead_nan_age = passenger_nan_age[passenger_nan_age.Survived == 0]<br>\n\nThe problem is Names in this dataset are not complete, So rarely will match with the right name <br>\nand most of the time will git 404 page <br>\n#### Second solution is to fill it with the median age values of same Title <br>","41dda236":"Note: Name contain \"Surname\", \"title\". \"first_name\" \"last_name\" <br>\nSolutions for this problem: <br>\n&emsp; 1- fill null ages with passenger's mean ages who had same title <br>","e42888c1":"Note:\nSurvived Female > Survived male\nDead female < than Dead male","53ab9f5c":"Identify Where the cabin was using previous info: <br>\n#### The position of the cabin\nCabin Number:<br>\nodd --> right<br>\neven---> left<br>\n\nfront ----> <45<br>\nmiddle ---> 46-90<br>\nback -----> >90<br>\n<br>\nShip Decks From top to bottom<br>\nT, A, B, C, D, E, F, G<br>","b6cca0c6":"Conclusion: <br>\nAccording to encyclopedia-titanica website those two girles one was 2.9 and the other was 3  <br>\nand this is a mistake in this dataset<br>\n&emsp; Mrs.Solomon is the mother of 3 daughters Marie, Helene , and Eugenie<br>\n&emsp; So, We will fix Helene , and Eugenie 'age from 0.75 to 7 years old<br>","d6feae0f":"### Add 2 new features position_x, position_y \n#### position_x --> right, left\n#### position_y --> front, middle, back","ac18a881":"We have problem with Cabin number cause some Cabin values have more than one cabin<br>\nCabin Class gives information about in which surface the room was <br>\nCabin Number gives us information where the room was [right, middle, left] of the ship<br>","a04b071b":"1 means this passenger according to these data wasn't share same ticket, so we need to adjust this column by minis it from 1 ","0dd7935c":"If \"master\" are Boys <br>\nThen we need a category for Girls who have the same age interval  <br>\nThis will help In --> Are Boys and Girls were rescued with similar proportion? <br>\nOR did they rescue gender over another ?! <br>","4a19874d":"Note:<br>\nThe F Deck contain This areas --> R, J, H, G, E, C <br>\nSo, ['F G73', 'F E69', 'F G63'], are a special case, so let's separated it ","841fa06d":"Notes from \"https:\/\/www.encyclopedia-titanica.org\/titanic-deckplans\/location-t.html\" <br>\n#### The position of the cabin\nCabin Number:<br>\nodd --> right<br>\neven---> left<br>\n\nfront ----> <45<br>\nmiddle ---> 46-90<br>\nback -----> >90<br>\n<br>\nShip Decks From top to bottom<br>\nT, A, B, C, D, E, F, G<br>","a2b85316":"full unknown cabin with 0","9ecde0a2":"Note :\nAccording to this dataset <br>Who died > Who survived","4a47c0f4":"People who has \"Master\" in there name are <br>\n1- male <br>\n2- Maxumim Age is: 12<br>\n3- All of them have value in \"Parch\" columns whice mean they might have parent or children <br>\nSo, Conclusion: <br>\n    &emsp;  1- They are childern <br>","cca32885":"Note: <br>\nMost of Survivors in all classes were Females ","0d408bb4":"##  Explore Age column","92df081e":"if child'age = 10 months <br>\nin this data set will be 10\/12 = 0.83 <br>\nSo, I'm gonna rounds the age up to the next largest age to simplify numbers and prevent outliers <br>","c3ac9aa6":"Note: Might passengers who were in the lower Cabins couldn't survive and the others in the higher Cabins could <br>\nex. Cabin = C27<br>\nSeprate each cabin to class and number <br>\ncabin_class: C<br>\ncabin_num: 27<br>"}}