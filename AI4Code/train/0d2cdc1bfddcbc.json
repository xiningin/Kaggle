{"cell_type":{"43cd3cb4":"code","190f57dd":"code","959903a4":"code","2f5fd600":"code","57e6a84b":"code","3d069d6a":"code","41408e9c":"code","7609b35f":"code","9eccb758":"code","1a911b1f":"code","1086f61d":"code","c94d4c11":"code","5e952d22":"code","502a465b":"code","706215e2":"code","89a8ab3a":"code","9be5e3cc":"code","32b1413f":"code","c4af524e":"code","94cb1ab6":"code","02f6e153":"code","b028d8cd":"code","624cadfb":"code","4c2dfac4":"code","6206a830":"code","9d831593":"markdown","fcd7a70c":"markdown","ca4c12e4":"markdown","4d32b1d7":"markdown","380fbfd9":"markdown"},"source":{"43cd3cb4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","190f57dd":"df = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","959903a4":"df.head()","2f5fd600":"df.shape","57e6a84b":"df.isnull().sum()","3d069d6a":"df.dtypes","41408e9c":"import seaborn as sns \nimport matplotlib.pyplot as plt \nplt.figure(figsize=(12,10))\nax = sns.heatmap(df.corr())","7609b35f":"fig = plt.figure(figsize = (20,15))\nax = fig.gca()\ndf.hist(ax=ax)\nplt.show()","9eccb758":"y = df['DEATH_EVENT']\nX =  df.drop(['DEATH_EVENT'],axis=1)","1a911b1f":"X['serum_sodium'] = X[X['serum_sodium'] > 130]\nX['creatinine_phosphokinase'] = X[X['creatinine_phosphokinase'] < 4000]\nX['serum_creatinine'] = X[X['serum_creatinine'] < 4]\nX['ejection_fraction'] = X[X['ejection_fraction'] < 60]\nX['platelets'] = X[X['platelets'] < 500000]\nX['age'] = X[X['age'] < 80]\n","1086f61d":"fig = plt.figure(figsize = (20,15))\nax = fig.gca()\nX.hist(ax=ax)\nplt.show()","c94d4c11":"X.dropna(inplace=True,axis=1)","5e952d22":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\n     X, y, test_size=0.4)","502a465b":"#Using xgboost\nimport xgboost as xgb\nfrom sklearn.metrics import accuracy_score,confusion_matrix\n\nxgb_model = xgb.XGBClassifier(objective=\"binary:logistic\", n_estimators=10,) #random_state=10)\nxgb_model.fit(X_train, y_train)","706215e2":"y_pred = xgb_model.predict(X_test)\nprint(confusion_matrix(y_test, y_pred))","89a8ab3a":"accuracy_score(y_test,y_pred)","9be5e3cc":"#Using NN by keras \nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation,Dropout ,Flatten\nfrom tensorflow.keras.layers.experimental.preprocessing import Normalization","32b1413f":"normalize = Normalization()","c4af524e":"model = Sequential([\n    normalize,\n    Flatten(input_shape=(12,)),\n    Dense(32, activation=tf.nn.tanh),\n      Dropout(0.5),\n    Dense(16, activation=tf.nn.tanh),\n     Dropout(0.5),\n    Dense(1, activation=tf.nn.sigmoid),\n])\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam',metrics=['accuracy'])","94cb1ab6":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss', mode='min', patience=10,restore_best_weights=True)","02f6e153":"model.fit(x=X_train, \n          y=y_train, \n          epochs=500,\n          batch_size=10,\n          validation_data=(X_test, y_test),\n           callbacks=[early_stop]\n          )","b028d8cd":"model.evaluate(X_test, y_test)","624cadfb":"pred = model.predict(X_test)","4c2dfac4":"y_test.iloc[9]","6206a830":"model.predict(np.array([X_test.iloc[9]]))","9d831593":"# Using NN to build classification model","fcd7a70c":"### Split the data ","ca4c12e4":"# Preprocessing  the data","4d32b1d7":"# Reading and Visualization Data ","380fbfd9":"# Building model using XGBosst "}}