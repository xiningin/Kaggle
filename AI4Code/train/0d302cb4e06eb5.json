{"cell_type":{"f0c2240a":"code","a1f8cd89":"code","6eb42a1c":"code","41545808":"code","6c0c3610":"code","624e8887":"code","59b097b8":"code","0c0b4800":"code","505cf46b":"code","f346df1a":"code","c570839e":"code","49c88a77":"code","5377b656":"code","8bf98afd":"code","efed79d1":"code","08d4b007":"code","ed1b699c":"code","240198a7":"code","fa2eef8d":"code","11f69621":"code","c0eb5ad7":"code","f949e5c0":"code","08ff0543":"code","14735d5e":"markdown","be624d0f":"markdown","4a651232":"markdown","75362fb1":"markdown","dfe7255f":"markdown","7519a921":"markdown","d482a178":"markdown","574b8b5c":"markdown","e5cb7b1a":"markdown","04c17dec":"markdown","dbe4ae76":"markdown","90cb1f68":"markdown","f9ac784a":"markdown","c60818f1":"markdown","03486a91":"markdown","0a1d58df":"markdown","06e825e2":"markdown","f12b4639":"markdown","ba079d3e":"markdown","127ebee8":"markdown","18f05cb2":"markdown","4f208f9d":"markdown","8fba30cf":"markdown","02de0884":"markdown","282b3e58":"markdown","eae36e76":"markdown"},"source":{"f0c2240a":"print(\"The print function takes an input and prints it to the screen.\")\nprint(\"Each call to print starts on a new line.\")\nprint(\"You'll often call print with strings, but you can pass any kind of value. For example, a number:\")\nprint(2 + 2)\nprint(\"If print is called with multiple arguments...\", \"it joins them\",\n      \"(with spaces in between)\", \"before printing.\")\nprint('But', 'this', 'is', 'configurable', sep='!...')\nprint()\nprint(\"^^^ print can also be called with no arguments to print a blank line.\")","a1f8cd89":"help(abs)","6eb42a1c":"help(abs(-2))","41545808":"help(print)","6c0c3610":"def least_difference(a, b, c):\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    return min(diff1, diff2, diff3)","624e8887":"print(\n    least_difference(1, 10, 100),\n    least_difference(1, 10, 10),\n    least_difference(5, 6, 7), # Python allows trailing commas in argument lists. How nice is that?\n)","59b097b8":"help(least_difference)","0c0b4800":"def least_difference(a, b, c):\n    \"\"\"Return the smallest difference between any two numbers\n    among a, b and c.\n    \n    >>> least_difference(1, 5, -5)\n    4\n    \"\"\"\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    return min(diff1, diff2, diff3)","505cf46b":"help(least_difference)","f346df1a":"def least_difference(a, b, c):\n    \"\"\"Return the smallest difference between any two numbers\n    among a, b and c.\n    \"\"\"\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    min(diff1, diff2, diff3)\n    \nprint(\n    least_difference(1, 10, 100),\n    least_difference(1, 10, 10),\n    least_difference(5, 6, 7),\n)","c570839e":"mystery = print()\nprint(mystery)","49c88a77":"print(1, 2, 3, sep=' < ')","5377b656":"print(1, 2, 3)","8bf98afd":"def greet(who=\"Colin\"):\n    print(\"Hello,\", who)\n    \ngreet()\ngreet(who=\"Kaggle\")\n# (In this case, we don't need to specify the name of the argument, because it's unambiguous.)\ngreet(\"world\")","efed79d1":"def f(n):\n    return n * 2\n\nx = 12.5","08d4b007":"print(\n    type(x),\n    type(f), sep='\\n'\n)","ed1b699c":"print(x)\nprint(f)","240198a7":"def call(fn, arg):\n    \"\"\"Call fn on arg\"\"\"\n    return fn(arg)\n\ndef squared_call(fn, arg):\n    \"\"\"Call fn on the result of calling fn on arg\"\"\"\n    return fn(fn(arg))\n\nprint(\n    call(f, 1),\n    squared_call(f, 1), \n    sep='\\n', # '\\n' is the newline character - it starts a new line\n)","fa2eef8d":"def mod_5(x):\n    \"\"\"Return the remainder of x after dividing by 5\"\"\"\n    return x % 5\n\nprint(\n    'Which number is biggest?',\n    max(100, 51, 14),\n    'Which number is the biggest modulo 5?',\n    max(100, 51, 14, key=mod_5),\n    sep='\\n',\n)","11f69621":"mod_5 = lambda x: x % 5\n\n# Note that we don't use the \"return\" keyword above (it's implicit)\n# (The line below would produce a SyntaxError)\n#mod_5 = lambda x: return x % 5\n\nprint('101 mod 5 =', mod_5(101))","c0eb5ad7":"# Lambdas can take multiple comma-separated arguments\nabs_diff = lambda a, b: abs(a-b)\nprint(\"Absolute difference of 5 and 7 is\", abs_diff(5, 7))","f949e5c0":"# Or no arguments\nalways_32 = lambda: 32\nalways_32()","08ff0543":"# Preview of lists and strings. (We'll go in depth into both soon)\n# - len: return the length of a sequence (such as a string or list)\n# - sorted: return a sorted version of the given sequence (optional key \n#           function works similarly to max and min)\n# - s.lower() : return a lowercase version of string s\nnames = ['jacques', 'Ty', 'Mia', 'pui-wa']\nprint(\"Longest name is:\", max(names, key=lambda anything: len(anything))) # or just key=len\nprint(\"Names sorted case insensitive:\", sorted(names, key=lambda name: name.lower()))","14735d5e":"But if we don't specify a value, `sep` is treated as having a default value of `' '` (a single space).","be624d0f":"Python allows us to define such functions. The result of calling them is the special value `None`. (This is similar to the concept of \"null\" in other languages.)\n\nWithout a `return` statement, `least_difference` is completely pointless, but a function with side effects may do something useful without returning anything. We've already seen two examples of this: `print()` and `help()` don't return anything. We only call them for their side effects (putting some text on the screen). Other examples of useful side effects include writing to a file, or modifying an input.","4a651232":"Python evaluates an expression like this from the inside out. First it calculates the value of `abs(-2)`, then it provides help on whatever the value of that expression is.\n\n<small>(And it turns out to have a lot to say about integers! In Python, even something as simple-seeming as an integer is actually an object with a fair amount of internal complexity. After we talk later about objects, methods, and attributes in Python, the voluminous help output above will make more sense.)<\/small>\n\n`abs` is a very simple function with a short docstring. `help` shines even more when dealing with more complex, configurable functions like `print`:","75362fb1":"You probably won't often define [higher order functions](https:\/\/en.wikipedia.org\/wiki\/Higher-order_function) like this yourself, but there are some existing ones (built in to Python and in libraries like pandas or numpy) that you might find useful to call. For example, `max`.\n\nBy default, `max` returns the largest of its arguments. But if we pass in a function using the optional `key` argument, it returns the argument `x` that maximizes `key(x)` (aka the 'argmax').","dfe7255f":"...though what it shows isn't super useful.\n\nNotice that the code cells above have examples of functions (`type`, and `print`) taking *another function* as input. This opens up some interesting possibilities - we can *call* the function we receive as an argument.","7519a921":"## Functions that don't return\n\nWhat would happen if we didn't include the `return` keyword in our function?","d482a178":"## \"What does this function do again?\"\n\nI showed the `abs` function in the previous tutorial, but what if you've forgotten what it does?\n\nThe `help()` function is possibly the most important Python function you can learn. If you can remember how to use `help()`, you hold the key to understanding just about any other function in Python.","574b8b5c":"# Functions and Getting Help\nIn this lesson, we'll be talking about functions: calling them, defining them, and looking them up using Python's built-in documentation.\n\nIn some languages, functions must be defined to always take a specific number of arguments, each having a particular type. Python functions are allowed much more flexibility. The `print` function is a good example of this:","e5cb7b1a":"\n\nDocstrings are a nice way to document your code for others - or even for yourself. (How many times have you come back to some code you were working on a day ago and wondered \"what was I thinking?\")","04c17dec":"Or maybe the `help()` function can tell us something about it.","dbe4ae76":"## Defining functions\n\nBuiltin functions are great, but we can only get so far with them before we need to start defining our own functions. Below is a simple example.","90cb1f68":"The syntax for creating them may be different, but `f` and `x` in the code above aren't so fundamentally different. They're each variables that refer to objects. `x` refers to an object of type `float`, and `f` refers to an object of type... well, let's ask Python:","f9ac784a":"### Lambda functions\n\nIf you're writing a short throwaway function whose body fits into a single line (like `mod_5` above), Python's `lambda` syntax is conveniently compact.","c60818f1":"> **Aside: example calls**\n> The last two lines of the docstring are an example function call and result. (The `>>>` is a reference to the command prompt used in Python interactive shells.) Python doesn't run the example call - it's just there for the benefit of the reader. The convention of including 1 or more example calls in a function's docstring is far from universally observed, but it can be very effective at helping someone understand your function. For a real-world example of, see [this docstring for the numpy function `np.eye`](https:\/\/github.com\/numpy\/numpy\/blob\/v1.14.2\/numpy\/lib\/twodim_base.py#L140-L194).","03486a91":"# Your turn!\n\nHead over to [the Exercises notebook](https:\/\/www.kaggle.com\/kernels\/fork\/1275158) to get some hands-on practice working with functions and getting help.","0a1d58df":"<!-- Mention that non-default args must come before default? -->\n\n## Functions are objects too","06e825e2":"## Default arguments\n\nWhen we called `help(print)`, we saw that the `print` function has several optional arguments. For example, we can specify a value for `sep` to put some special string in between our printed arguments:","f12b4639":"Some of this might look inscrutable for now (what's `sys.stdout`?), but this docstring does shed some light on that `sep` parameter we used in one of our `print` examples at the beginning. ","ba079d3e":"**Common pitfall:** when you're looking up a function, remember to pass in the name of the function itself, and not the result of calling that function. \n\nWhat happens if we invoke help on a *call* to the function `abs()`? Unhide the output of the cell below to see.","127ebee8":"We can even ask Python to print `f` out:","18f05cb2":"When applied to a function, `help()` displays...\n\n- the header of that function `abs(x, \/)`. In this case, this tells us that `abs()` takes a single argument `x`. (The forward slash isn't important, but if you're curious, you can read about it [here](https:\/\/stackoverflow.com\/questions\/24735311\/python-what-does-the-slash-mean-in-the-output-of-helprange))\n- A brief English description of what the function does.","4f208f9d":"Unsurprisingly, Python isn't smart enough to read my code and turn it into a nice English description. However, when I write a function, I can provide a description in what's called the **docstring**.\n\n### Docstrings","8fba30cf":"Adding optional arguments with default values to the functions we define turns out to be pretty easy:","02de0884":"The docstring is a triple-quoted string (which may span multiple lines) that comes immediately after the header of a function. When we call `help()` on a function, it shows the docstring.","282b3e58":"With judicious use of lambdas, you can occasionally solve complex problems in a single line. ","eae36e76":"This creates a function called `least_difference`, which takes three arguments, `a`, `b`, and `c`.\n\nFunctions start with a header introduced by the `def` keyword. The indented block of code following the `:` is run when the function is called.\n\n`return` is another keyword uniquely associated with functions. When Python encounters a `return` statement, it exits the function immediately, and passes the value on the right hand side to the calling context.\n\nIs it clear what `least_difference()` does from the source code? If we're not sure, we can always try it out on a few examples:"}}