{"cell_type":{"8d303177":"code","57af3c56":"code","186ab2c0":"code","dc4de468":"code","e4b32ac4":"code","4c2596aa":"code","47b2c208":"code","f9a90210":"code","ea8af4b9":"code","7d1f374a":"markdown","404865ad":"markdown","f49136ac":"markdown","bf53a339":"markdown","1d15816b":"markdown","9643235b":"markdown","4a023a40":"markdown","01f34743":"markdown"},"source":{"8d303177":"import numpy as np \nimport pandas as pd \n\nfrom sklearn import ensemble\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.model_selection import cross_val_score,cross_val_predict,cross_validate\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve","57af3c56":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","186ab2c0":"#1. delete unnecessary columns\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\n#2.find null data and fill new data \ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n#3.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","dc4de468":"y = train['Survived']\nX = train.drop(['Survived'], axis=1)\nX_test = test\n\nparams={\"n_estimators\":np.arange(500,1000,100),\n        \"max_depth\":np.arange(2,12,2)\n       }\n\ngbm_est = ensemble.GradientBoostingClassifier(\n    learning_rate = 0.001, \n    loss = 'exponential', \n    max_features ='sqrt', \n    random_state = 42,\n    verbose=0)\n\ngr_gbm_est=GridSearchCV(gbm_est,params,cv=3,n_jobs=-1,verbose=10)\ngr_gbm_est.fit(X,y)","e4b32ac4":"gr_gbm_est.best_estimator_","4c2596aa":"cross_validate(gr_gbm_est.best_estimator_, X, y, cv=3)","47b2c208":"y_train_pred = cross_val_predict(gr_gbm_est.best_estimator_, X, y, cv=3)\nprint( confusion_matrix(y, y_train_pred) )\n\nprint(\"\")\n\nprint(\"precision_score1:\",precision_score(y, y_train_pred) )\ncm = confusion_matrix(y, y_train_pred)\nprint(\"precision_score2:\",cm[1, 1] \/ (cm[0, 1] + cm[1, 1]) )\n\nprint(\"\")\n\nprint(\"recall_score1:\",recall_score(y, y_train_pred))\nprint(\"recall_score2:\",cm[1, 1] \/ (cm[1, 0] + cm[1, 1]) )\n\nprint(\"\")\n\nprint(\"f1_score1:\",f1_score(y, y_train_pred))\nprint(\"f1_score2:\", cm[1, 1] \/ (cm[1, 1] + (cm[1, 0] + cm[0, 1]) \/ 2) )\n\nprint(\"\")\n\nprint(\"roc_auc score\",roc_auc_score(y, y_train_pred) )","f9a90210":"pred_test = gr_gbm_est.best_estimator_.predict(X_test)","ea8af4b9":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = (pred_test > 0.5).astype(int)\nsubmission.to_csv('sub.csv', index=False)\nsubmission.head()","7d1f374a":"# import libraries","404865ad":"# submit","f49136ac":"# train result = > best model ","bf53a339":"# load data","1d15816b":"# evaluate model","9643235b":"# predict ","4a023a40":"# preprocess","01f34743":"# make model (training)"}}