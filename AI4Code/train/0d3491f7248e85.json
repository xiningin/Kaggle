{"cell_type":{"e399c1c6":"code","2f0b3d3a":"code","0a70cec9":"code","c6431130":"code","c5680c84":"code","6227b085":"code","1654b99d":"code","f9591ce4":"code","fefd8770":"code","c3ae34f4":"code","cfa82ba6":"code","37617fee":"code","5195e1cc":"code","3a7996f0":"code","e219f5b4":"code","307accdd":"code","365fff50":"code","e8fb53e7":"code","345fd826":"code","fd08fec5":"code","b2d1a8d9":"markdown","a1a42bf7":"markdown","1f1e613f":"markdown"},"source":{"e399c1c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom mne.preprocessing import read_ica, ICA\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f0b3d3a":"!ls \/kaggle\/input\/rawsbeforehoes\/","0a70cec9":"import matplotlib.pyplot as plt\n\nimport mne\nfrom mne import read_proj\nfrom mne.io import read_raw_fif\n\nfrom mne.datasets import sample\nimport os","c6431130":"path = \"\/kaggle\/input\/rawsbeforehoes\/P01-raw.fif\"\nraw = mne.io.read_raw_fif(path,preload=True)","c5680c84":"raw.info","6227b085":"raw.plot()","1654b99d":"ica = read_ica('\/kaggle\/input\/openmiir\/eeg\/preprocessing\/ica\/P01-100p_64c-ica.fif')\n","f9591ce4":"ica.plot_components()\n","fefd8770":"ica.plot_sources(raw)","c3ae34f4":"reconst_raw = raw.copy()\ns = ica.apply(reconst_raw)","cfa82ba6":"X = raw.get_data()\nX_clean = s.get_data()","37617fee":"sfreq = raw.info['sfreq']","5195e1cc":"from pylab import *\nplot(X[1, 0:int(10 * sfreq)])","3a7996f0":"raw.plot(n_channels = 2, scalings = 'auto')","e219f5b4":"plot(X_clean[0])","307accdd":"raw.plot_psd()","365fff50":"reconst_raw.plot_psd()","e8fb53e7":"plot(X_clean[0])","345fd826":"reconst_raw.plot(duration=20.0, start=0.0, n_channels=1)","fd08fec5":"# show some frontal channels to clearly illustrate the artifact removal\nchs = raw.ch_names\nchan_idxs = [raw.ch_names.index(ch) for ch in chs]\nraw.plot(order=chan_idxs, start=12, duration=4)\nreconst_raw.plot(order=chan_idxs, start=12, duration=4)","b2d1a8d9":"Nous nous sommes bas\u00e9 sur [Ce tutorial](https:\/\/mne.tools\/stable\/auto_tutorials\/preprocessing\/plot_40_artifact_correction_ica.html#sphx-glr-auto-tutorials-preprocessing-plot-40-artifact-correction-ica-py). Les composantes ind\u00e9pendantes utilis\u00e9es ici sont  celles calcul\u00e9es dans le [repo](https:\/\/github.com\/sstober\/openmiir\/tree\/master\/eeg\/preprocessing) du dataset. \n\n","a1a42bf7":"The data :\n-  5 blocks that each comprised all 12 stimuli in randomized order: 60 perception trials per subject.\n- EEG was recorded with a BioSemi Active-Two system using 64+2 EEG channels at 512 Hz. \n- Hor- izontal and vertical electrooculography (EOG) channels were used to record eye movements. \n\nTo do :\n\n- remove and interpolate bad EEG channels (between 0 and 3 per subject) identified by manual visual inspection.\n- Filter with a bandpass keeping a frequency range between 0.5 and 30 Hz ( this also remove any slow signal drift in the EEG) \n- To remove artifacts caused by eye blinks, we computed ICA  and semi-automatically removed components that had a high correlation with the EOG channels.\n- Reconstruct from the remaining independent components without reducing dimensionality. \n- all trial channels were additionally normalized to zero mean and range [\u22121, 1].","1f1e613f":"# Data preprocessing and artifact removal"}}