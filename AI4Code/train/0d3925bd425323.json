{"cell_type":{"96f2fa16":"code","154a106a":"code","2426587d":"code","4986bd18":"code","73b0e324":"code","52cfec9d":"code","5df2dbbf":"code","9c721261":"code","a2bbc527":"code","5211b3cb":"code","978269f5":"code","0993d6a1":"code","eb724462":"code","28eb79e3":"code","bbb7d823":"code","49602ec9":"markdown","8bcae146":"markdown","ad80824a":"markdown","dcf60185":"markdown","ea25576b":"markdown"},"source":{"96f2fa16":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","154a106a":"df_Train = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_train.csv')","2426587d":"df_Test = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_test.csv')","4986bd18":"df = pd.concat([df_Train,df_Test])","73b0e324":"df_Test.info()","52cfec9d":"df_Train.info()","5df2dbbf":"df.info()","9c721261":"from tensorflow import keras\nfrom tensorflow.keras import layers","a2bbc527":"#model \/ data parameters\nnum_classes = 10\ninput_shape = (28,28,1) #grayscale\n\n#split the data\n(x_train,y_train),(x_test,y_test) = keras.datasets.mnist.load_data()","5211b3cb":"#scale images to the [0,1] range\n\nx_train = x_train.astype('float32')\/255\nx_test = x_test.astype('float32')\/255\n\n\n","978269f5":"# make sure images has the shape (28,28,1)\n\nx_train = np.expand_dims(x_train, -1)\nx_test = np.expand_dims(x_test, -1)\n\nprint(\"x_train shape:\", x_train.shape)\nprint(x_train.shape[0], \"train samples\")\nprint(x_test.shape[0], \"test samples\")","0993d6a1":"#convert class vectors to binary class matrices\n\ny_train = keras.utils.to_categorical(y_train,num_classes)\ny_test = keras.utils.to_categorical(y_test,num_classes)\n","eb724462":"model = keras.Sequential(\n[\n    keras.Input(shape=input_shape),\n    layers.Conv2D(32, kernel_size=(3,3),activation='relu'),\n    layers.MaxPooling2D(pool_size=(2,2)),\n    layers.Conv2D(64,kernel_size=(3,3),activation='relu'),\n    layers.MaxPooling2D(pool_size=(2,2)),\n    layers.Flatten(),\n    layers.Dropout(0.5),\n    layers.Dense(num_classes, activation=\"softmax\"),   \n]\n)\n\nmodel.summary()","28eb79e3":"batch_size = 128\nepochs = 15\n\nmodel.compile(loss = \"categorical_crossentropy\",optimizer=\"adam\", metrics=[\"accuracy\"])\n\nmodel.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_split=0.1)\n","bbb7d823":"score = model.evaluate(x_test, y_test, verbose=0)\nprint(\"Test loss:\", score[0])\nprint(\"Test accuracy:\", score[1])","49602ec9":"###  A simple convnet that achieves ~99% test accuracy on MNIST.","8bcae146":"# Train the model","ad80824a":"# prepare the data","dcf60185":"# Evaluate the trained model","ea25576b":"# build the model"}}