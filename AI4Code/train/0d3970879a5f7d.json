{"cell_type":{"9b501847":"code","c904fa3b":"code","4059c865":"code","5a95f0ec":"code","720b60b0":"code","0d87aaae":"code","74c56d16":"code","40ea0568":"code","411f9172":"code","081d659a":"code","65360b54":"code","76ac5a2a":"code","bf0cd147":"code","9f4c4967":"code","47e563ed":"code","bfdc87ef":"code","d8842696":"code","4d135092":"code","06278668":"code","6dc0a4e6":"code","abe008f5":"code","3b12a343":"code","5c26ec2c":"code","edf54380":"code","f564f692":"code","6ead2b3d":"code","4993857c":"code","faabd038":"code","e1a4af79":"code","dda14613":"code","c911959a":"code","1a386f08":"code","5bb81f17":"code","3c81f1c2":"code","12a854dd":"code","80099918":"code","1a4ed827":"code","0746f9a4":"code","f900956a":"markdown","a3ae8701":"markdown","56535194":"markdown","f2a81960":"markdown","e8d095ad":"markdown","57f5dc58":"markdown","78568156":"markdown","5195e3be":"markdown","edf848d4":"markdown","828d3dd6":"markdown","b8babc20":"markdown"},"source":{"9b501847":"# COVID-19 new cases in Vilnius (the capital of Lithuania) prediction\n# This is my first notebook shared, the model was done and run a month ago. But really wanted to share and maybe that will be an interest to someone.\n# Any type of feedback would be enourmosly valuable and appreciated :) !! \n\n# APPROACH SUMMARY:\n# for 2020-04-06 to 2020-04-12 predicted avg.daily growth rate of 1.049%\n# not that bad result 1.008% daily increase predicted in Vilnius from 2020-04-01 to 2020-04-05, actually was 0.94%\n# governement measurement time features added\n# gdp, density and % of age >65 features added (3)\n# same as 2.1. based on daily growth rates on the first 17 days after covid19 break through (i.e. when cases started increasing) .\n# based on most similar 4 countries\n\n\n# DATA SOURCES:\n# World Development Indicators & Lithuania Statistics\n# Acaps https:\/\/data.humdata.org\/dataset\/acaps-covid19-government-measures-dataset\n# COVID19 https:\/\/github.com\/starschema\/COVID-19-data\/blob\/master\/notebooks\/JHU_COVID-19.ipynb  and it uses data from 2019 Novel Coronavirus Visual Dashboard operated by Johns Hopkins University\n\n\n# CHALLENGES:\n# Even though actual avg. daily growth rate was 1.17%  (i.e. it was higher than predicted by 12 %) \n# however the total actual number of new cases in Vilnius duing that period was lower (141 real vs 226 predicted - 60% diff)\n# The reason for such a big difference was set high number of new cases on the first prediction day (2020-04-06) (21 real vs 28 predicted) which inflated the total numbers (as each day was multiplied by avg.daily growth rate).\n# To get the first day of prediction I took an avg of last 6 days. \n# I think better would have been to use 2 models: 1) to get a number for the first day of prediction and only then 2) use cosine similarity to get daily growth rate based on similar countries.\n# what what could be that best model to get best prediction for the first day.","c904fa3b":"from sklearn.metrics.pairwise import cosine_similarity\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns","4059c865":"df = pd.read_csv(\"..\/input\/covid-world-countries-0407\/world_countries_0407.csv\",sep=\";\")","5a95f0ec":"df.drop('Unnamed: 0',axis=1,inplace=True)","720b60b0":"### pandemic start if avg of 3 days in a row growth rate > 0: ###\n\n# 1st lag \ndf['pre_growth_rate'] = df.groupby('Country\/Region')['growth_rate'].shift(1,fill_value=0)\ndf['Date2'] = pd.DatetimeIndex(df['Date']) - pd.DateOffset(1)\ndf['pre_Date'] = [time.date() for time in df['Date2']]\ndf.drop(['Date2'],axis=1, inplace=True)\n\n# 2nd lag:\ndf['pre_pre_growth_rate'] = df.groupby('Country\/Region')['growth_rate'].shift(2,fill_value=0)\ndf['Date4'] = pd.DatetimeIndex(df['Date']) - pd.DateOffset(2)\ndf['pre_pre_Date'] = [time.date() for time in df['Date4']]\ndf.drop(['Date4'],axis=1, inplace=True)\n\ndf['pandemic_sum'] = df['growth_rate'] + df['pre_growth_rate'] + df['pre_pre_growth_rate']\ndf['pandemic_mean'] = df[['growth_rate', 'pre_growth_rate', 'pre_pre_growth_rate']].mean(axis=1)\n\n# filter out with avg of 3 days in a row growth rate > 0:\ndf = df[df['pandemic_mean']>0]\n\n# create new day variable:\ndf.drop('Day',axis=1,inplace=True)\ndf = df.sort_values(by = ['Country\/Region',\"Date\"])\ndf['Day'] = df.groupby('Country\/Region').cumcount()+1\n\ndf = df[['Country\/Region','Day', 'Date','Difference','growth_rate','pandemic_mean']]\n#samples:\ndf[df['Country\/Region'] =='Lithuania']\n#df[df['Country\/Region'] =='Vilnius']\n#df[df['Country\/Region'] =='Afghanistan']","0d87aaae":"# model(find similarity) based on the same number of days that Lithuania has reached now:\nnumber_days = df[df['Country\/Region'] == 'Lithuania']['Day'].max()-10\ndf2 = df[df['Day'] <= number_days]\nnumber_days","74c56d16":"# only take those that had at least the same number of days with COVID19\ndf3 = df2[df2.groupby(['Country\/Region'])['Day'].transform('count') == number_days]\n\n# number of countries we will compare LT with:\ndf3['Country\/Region'].nunique()","40ea0568":"df4 = df3.pivot(index='Country\/Region', columns = 'Day', values = 'growth_rate').reset_index()\ndf4.describe()","411f9172":"# keep country names for final output:\ncountries = df4[['Country\/Region']]\n\n#drop country\/branch column:\n#df4.drop('Country\/Region',axis=1,inplace=True)","081d659a":"countries \n#df4['Country\/Region'].unique()","65360b54":"fa = pd.read_csv('..\/input\/population-65-and-older\/population_65_and_older.csv', sep=';')\n\n#cleaning data non-matching country names and fixing San Marino null value:\n#1.cleaning data non-matching country names\nfa.replace({'Vietnam': 'Viet Nam','Slovak Republic': 'Slovakia', 'Czech Republic': 'Czechia' },inplace=True)\nfa1 = df4.merge(fa,on='Country\/Region')\nfa1_countries = fa1['Country\/Region'].unique()\n# 5 countries that are not in 65 and older dataset:\ndf4[~df4['Country\/Region'].isin(fa1_countries)]","76ac5a2a":"#checking which column has nulls:\nfa1.isna().sum()","bf0cd147":"fa1[fa1.isnull().any(axis=1)]","9f4c4967":"#2. cleaning: fixing San Marino 19.8\nfa1[fa1['Country\/Region']=='San Marino'] = fa1[fa1['Country\/Region']=='San Marino'].fillna(19.8)\nfa1[fa1['Country\/Region']=='Andorra'] = fa1[fa1['Country\/Region']=='Andorra'].fillna(13.8)\nfa1[fa1['Country\/Region']=='Liechtenstein'] = fa1[fa1['Country\/Region']=='Liechtenstein'].fillna(15)\nfa1[fa1['Country\/Region']=='Monaco'] = fa1[fa1['Country\/Region']=='Monaco'].fillna(26.9)\n","47e563ed":"fd = pd.read_csv('..\/input\/population-density-by-country\/population_density_by_country.csv',sep=';')\nfd.replace({'Vietnam': 'Viet Nam','Slovak Republic': 'Slovakia', 'Czech Republic': 'Czechia' },inplace=True)\nfd1 = fa1.merge(fd,on='Country\/Region')\nfd1.info()","bfdc87ef":"fg = pd.read_csv('..\/input\/gdp-per-capita-by-country\/gdp_per_capita_by_country.csv',sep=';')\nfg.replace({'Vietnam': 'Viet Nam','Slovak Republic': 'Slovakia', 'Czech Republic': 'Czechia' },inplace=True)\nfg1 =fd1.merge(fg,on='Country\/Region')\n#fg1.info()\nfg1.drop('Country Code',axis=1,inplace=True)\nfg1","d8842696":"countries = fg1[['Country\/Region']]","4d135092":"#fs2['DATE_IMPLEMENTED'].unique()","06278668":"fs = pd.read_csv('..\/input\/government-restriction-dates\/government_restriction_dates.csv',sep=';')\nfs2 = fs[['COUNTRY', 'ISO', 'CATEGORY', 'MEASURE', 'DATE_IMPLEMENTED']]\nfs2.dropna(inplace=True)\nfs2['DATE_IMPLEMENTED'].max()\n#fs2['MEASURE'].value_counts()\n\n#fs2[fs2['CATEGORY'] == 'Lockdown']['MEASURE'].unique()\n#fs2.groupby(['COUNTRY'])[]\n#fs2[fs2['CATEGORY','MEASURE']].nunique()\n\n#fs2.groupby(['COUNTRY','CATEGORY','MEASURE']).agg({'DATE_IMPLEMENTED':'min'}).reset_index()\nfs3 = fs2.groupby(['COUNTRY','CATEGORY']).agg({'DATE_IMPLEMENTED':'min'}).reset_index()\nfs4 = fs3.pivot(index = 'COUNTRY', columns = 'CATEGORY', values = 'DATE_IMPLEMENTED').reset_index()\nfs4.columns = ['Country\/Region', 'Humanitarian exemption', 'Lockdown',\n       'Movement restrictions', 'Public health measures',\n       'Social and economic measures', 'Social distancing']\n\nvno = fs4[fs4['Country\/Region'] == 'Lithuania'].copy()\nvno.replace('Lithuania', 'Vilnius',inplace = True)\n\nfs5 = fs4.append(vno)\n\n#fg1 =fd1.merge(fg,on='Country\/Region')\n#fg1\nwith_outbreak_date = fg1.merge(df[df['Day']==1][['Country\/Region', 'Date']], on = 'Country\/Region')\nfs55 = with_outbreak_date.merge(fs5, on = 'Country\/Region')\nfs6 = fs55.merge(df.groupby(['Country\/Region']).agg({'Day':'max'}), on ='Country\/Region')\n#fs6.info()\nfs6.drop(columns = ['Humanitarian exemption'],inplace=True)\nfs6\n\n#fs6['Lockdown'] = pd.to_datetime(df[\"Lockdown\"]).dt.strftime('%Y-%m-%d')\n\n#fs6[\"Date\"] = pd.to_datetime(fs6[\"Date\"]).dt.strftime('%Y-%m-%d')\n#fs6[\"Lockdown\"] = pd.to_datetime(fs6[\"Lockdown\"]).dt.strftime('%Y-%m-%d')\n#fs6[\"Movement restrictions\"] = pd.to_datetime(fs6[\"Movement restrictions\"]).dt.strftime('%Y-%m-%d')\n#fs6[\"Social and economic measures\"] = pd.to_datetime(fs6[\"Social and economic measures\"]).dt.strftime('%Y-%m-%d')\n#fs6[\"Social distancing\"] = pd.to_datetime(fs6[\"Social distancing\"]).dt.strftime('%Y-%m-%d')\n\nfs6[['Lockdown', 'Movement restrictions', 'Public health measures', 'Social and economic measures', \n     'Social distancing', 'Date']] = fs6[['Lockdown', 'Movement restrictions', 'Public health measures', \n                                          'Social and economic measures', 'Social distancing', 'Date']].apply(pd.to_datetime)\n\nfs6['Lockdown_diff'] = (fs6['Date']-fs6['Lockdown']).dt.days\nfs6['Public health measures_diff'] = (fs6['Date']-fs6['Public health measures']).dt.days\nfs6['Movement restrictions_diff'] = (fs6['Date']-fs6['Movement restrictions']).dt.days\nfs6['Social and economic measures_diff'] = (fs6['Date']-fs6['Social and economic measures']).dt.days\nfs6['Social distancing_diff'] = (fs6['Date']-fs6['Social distancing']).dt.days\n\nfs6.drop(['Movement restrictions','Date', 'Lockdown','Public health measures','Social and economic measures',\n        'Social distancing' ],axis=1, inplace=True)\nfs6.fillna(-75,inplace=True)\nfs6\n\ncountries = fs6[['Country\/Region']]\nfs6.drop(columns = ['Country\/Region'],inplace=True)\n#df[['A','B']] = df[['A','B']].apply(pd.to_datetime) #if conversion required\n#df['C'] = (df['B'] - df['A']).dt.days\n\n#fs6.columns\n\nfs6\n","6dc0a4e6":"# then add 1st date to fg1 for final sactions days from outbreak calculation.\n#fg1","abe008f5":"fg1.drop(['Country\/Region'],axis=1, inplace=True)","3b12a343":"output = pd.DataFrame(cosine_similarity(fs6)) #fg1\n\n#add country\/branch:\nfinal_output = countries.merge(output, left_index = True, right_index=True)\n#final_output.to_csv('cosine_similarity_growth_rate_by_day_3dMeanPandemic_Vilnius_added.csv')","5c26ec2c":"final_output","edf54380":"#select Lithuania and Vilnius only:\nselected = final_output[final_output['Country\/Region'].isin(['Lithuania', 'Vilnius'])].T\nselected.columns = selected.iloc[0]\nselected.drop(selected.index[0],inplace=True)\nselected = countries.merge(selected, left_index=True, right_index=True)\nselected = selected.sort_values(by=['Lithuania'], ascending=False)\nselected['order_by_similarity_lithuania'] = np.arange(len(selected))\nselected = selected.sort_values(by=['Vilnius'], ascending=False)\nselected['order_by_similarity_vilnius'] = np.arange(len(selected))\nselected","f564f692":"#p = pd.read_csv('similarity_score_pandemic_3dmean_done_on_up_to_0327_for_LT.csv',sep=';')","6ead2b3d":"p = selected.copy()\np","4993857c":"# CHOOSE Vilnius or Lithuania:\norder_choice = 'order_by_similarity_vilnius' #order_by_similarity_vilnius, order_by_similarity_lithuania\nregion_choice = 'Vilnius' #vilnius, Lithuania\nnumber_of_top_similar = 5","faabd038":"p = p[p[order_choice] !=0]","e1a4af79":"\ntop = p[(p[order_choice] <= number_of_top_similar) & (p['Country\/Region'] != 'Lithuania') ]\ntop","dda14613":"# visualize future in similar countries VERSION NO 1 (similar countries trend in each) (Singapore was also similar but taken out due to being a exception to the rule):\nsimilar_countries = top['Country\/Region'].unique()\nfor_trends = df[df['Country\/Region'].isin(similar_countries)]\nfor_trends[['Country\/Region','Day','growth_rate']]\n# visualize:\nsns.set(rc={'figure.figsize':(14,10)})\nsns.lineplot(x=\"Day\", y=\"growth_rate\", hue=\"Country\/Region\", data=for_trends)","c911959a":"# visualize future in similar countries VERSION NO 2 (mean of similar countries) (Singapore was also similar but taken out due to being a exception to the rule):\nsimilar_countries_without_lt = similar_countries\n\navg = df[df['Country\/Region'].isin(similar_countries_without_lt)].groupby('Day').agg({'growth_rate': 'mean'}).reset_index()\navg['Country\/Region'] = 'Mean of Similar Countries'\nlt = df[df['Country\/Region'].isin([region_choice])][['Day', 'growth_rate','Country\/Region']]\nfor_trends_mean = pd.concat([avg, lt])\n\n# visualize:\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.lineplot(x=\"Day\", y=\"growth_rate\", hue=\"Country\/Region\", data=for_trends_mean)\n\n# here similarity is done based on first 17 days of pandemic:","1a386f08":"#df = pd.read_csv('pasaulio_salys_0404.csv')\ndf[df['Country\/Region'] == region_choice]","5bb81f17":"# prediction validation:\n#include new data that we have on LT only:\n# but only after cleaning data in the same way (only once the pandemic start)\n\n# DATA CLEANING:\n\n### pandemic start if avg of 3 days in a row growth rate > 0: ###\n\ndf = pd.read_csv('\/..\/input\/covid-world-countries-0407\/world_countries_0407.csv',sep=\";\")\n\n# 1st lag \ndf['pre_growth_rate'] = df.groupby('Country\/Region')['growth_rate'].shift(1,fill_value=0)\ndf['Date2'] = pd.DatetimeIndex(df['Date']) - pd.DateOffset(1)\ndf['pre_Date'] = [time.date() for time in df['Date2']]\ndf.drop(['Date2'],axis=1, inplace=True)\n\n# 2nd lag:\ndf['pre_pre_growth_rate'] = df.groupby('Country\/Region')['growth_rate'].shift(2,fill_value=0)\ndf['Date4'] = pd.DatetimeIndex(df['Date']) - pd.DateOffset(2)\ndf['pre_pre_Date'] = [time.date() for time in df['Date4']]\ndf.drop(['Date4'],axis=1, inplace=True)\n\ndf['pandemic_sum'] = df['growth_rate'] + df['pre_growth_rate'] + df['pre_pre_growth_rate']\ndf['pandemic_mean'] = df[['growth_rate', 'pre_growth_rate', 'pre_pre_growth_rate']].mean(axis=1)\n\n# filter out with avg of 3 days in a row growth rate > 0:\ndf = df[df['pandemic_mean']>0]\n\n# create new day variable:\ndf.drop('Day',axis=1,inplace=True)\ndf = df.sort_values(by = ['Country\/Region',\"Date\"])\ndf['Day'] = df.groupby('Country\/Region').cumcount()+1\n\ndf = df[['Country\/Region','Day', 'Date','Difference','growth_rate','pandemic_mean']]\n#samples:\n#df[df['Country\/Region'] =='Lithuania']\n#df[df['Country\/Region'] =='Afghanistan']","3c81f1c2":"#LT actual growth rate with later dates:\nlt_for_validation = df[df['Country\/Region']==region_choice][['Day', 'growth_rate','Country\/Region']]\n#mean of similar countries:\nmean_for_validation = for_trends_mean[for_trends_mean['Country\/Region'] == 'Mean of Similar Countries']\nfor_validation = pd.concat([lt_for_validation,mean_for_validation])","12a854dd":"# visualize:\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.lineplot(x=\"Day\", y=\"growth_rate\", hue=\"Country\/Region\", data=for_validation)","80099918":"# what was the average growth rate of similar countries in the future 7 days (18-24) and in Vilnius?\nfor_validation[(for_validation['Country\/Region']==region_choice) & (for_validation['Day'] > 17) & (for_validation['Day'] < 23)].agg({'growth_rate':'mean'})","1a4ed827":"for_validation[(for_validation['Country\/Region']=='Mean of Similar Countries') & (for_validation['Day'] > 17) & (for_validation['Day'] < 23)].agg({'growth_rate':'mean'})","0746f9a4":"for_validation[(for_validation['Country\/Region']=='Mean of Similar Countries') & (for_validation['Day'] > 22) & (for_validation['Day'] < 30)].agg({'growth_rate':'mean'})","f900956a":"GDP ADDED","a3ae8701":"### PANDEMIC ADJUSTMENT\npandemic start if avg of 3 days in a row growth rate > 0","56535194":"GOVERNMENT SANCTIONS ADDITION","f2a81960":"\"\"\"\nWhen looking from the first case appearance in the country, in previous analysis I saw a bit of lag in growth rate daily performance when comparing LT with other countries \ntherefore decided to start not from the first case \nbut from further i.e. when new cases of infected started apearing on a daily basis.\n\"\"\"","e8d095ad":"POPULATION OVER 65 ADDED","57f5dc58":"## PREDICTION: \n#### Daily growth rate of new cases from 2020-04-06 to 2020-04-12 based on similar countries performance during that time:","78568156":"DENSITY ADDED","5195e3be":"### VALIDATION:","edf848d4":"### EXTRA FEATURES ADDITION","828d3dd6":"### COSINE SIMILARITY:","b8babc20":"#### 2020-04-01 - 2020-04-05 Actual Vilnius vs similar countries : avg. daily growth rate"}}