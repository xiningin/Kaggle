{"cell_type":{"5d7600c5":"code","9fd411e7":"code","95d73174":"code","dcfdf4e9":"code","fff22188":"code","67a4934c":"code","d4a4bc49":"code","fd8e84c4":"code","d5f35282":"code","8fca185b":"code","935e4d46":"code","803f2adf":"code","e801188d":"code","588454d4":"code","87cd5912":"code","ca541645":"code","cfde3bcb":"code","78d6c523":"code","c4173fd1":"code","a8351769":"code","eece1060":"code","5fd67600":"code","2ac75329":"code","cbf7aa9e":"code","0f1601fd":"code","3aae233b":"code","386a9fa3":"code","05c913f6":"code","3536ec80":"code","dcdb23b6":"code","2c44d54d":"markdown","dbd0cdab":"markdown","1ccf888a":"markdown","812dcbbf":"markdown","0105beaf":"markdown","467e8527":"markdown","2138f7b4":"markdown","7ef73630":"markdown","815389a1":"markdown","f6a2d76d":"markdown","d130cf3d":"markdown","37ec3fef":"markdown","ab17a644":"markdown","ad8d979e":"markdown","85a4533a":"markdown","c6f0109f":"markdown","84a31826":"markdown","f4734db6":"markdown","dfdc94c9":"markdown"},"source":{"5d7600c5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nfrom sklearn import datasets, linear_model\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\n\n%matplotlib inline\n\n\n\ndata_frame = pd.read_csv(\"..\/input\/music-and-mental-health-data\/master_song_data.csv\")\n\ndata_frame.info()\n","9fd411e7":"\ndata_frame = data_frame.iloc[: , [0,1,2,4,5,6,7,9,11,12,13,14]]\n\ndata_frame.head()","95d73174":"from sklearn import preprocessing\n\nexclude = [\"Participant_ID\", \"Song_name\", \"Artist\"]\nfor column in data_frame.columns:\n    if data_frame[column].dtype == type(object) and column not in exclude:\n        le = preprocessing.LabelEncoder()\n        data_frame[column] = le.fit_transform(data_frame[column])\n        \ndata_frame.head()\ndata_frame","dcfdf4e9":"scaler = StandardScaler(with_mean=False)\ntransformed = scaler.fit_transform(data_frame[['Loudness', 'Valence', 'Danceability', 'Acousticness']])\nfor idx, col in enumerate(data_frame.columns[4:-6]):\n    data_frame[col] = transformed[:,idx]\n    \ndata_frame.describe()","fff22188":"x = data_frame[\"Danceability\"].values\ny = data_frame[\"Valence\"].values\nl = data_frame[\"Loudness\"].values\na = data_frame[\"Acousticness\"].values\nz = data_frame[\"Total_mental_health\"].values\n\n\nz = z.reshape(z.shape[0], 1)\nx = x.reshape(x.shape[0], 1)\ny = y.reshape(y.shape[0], 1)\nl = l.reshape(l.shape[0], 1)\na = a.reshape(a.shape[0], 1)\n\nregr = linear_model.LinearRegression()\nregr.fit(z, x)\n\n\nfig = plt.figure(figsize=(6, 6))\nfig.suptitle(\"Correlation between Danceability and Mental Health Metric\")\n\nzx = plt.subplot(1, 1, 1)\nzx.scatter(z, x, alpha=0.5)\nzx.plot(z, regr.predict(z), color=\"red\", linewidth=3)\nplt.xticks(())\nplt.yticks(())\n\n\nplt.xlabel(\"Mental Health Metric\")\nplt.ylabel(\"Danceability\")\n\nplt.show()","67a4934c":"regr = linear_model.LinearRegression()\nregr.fit(z, y)\n\nfig = plt.figure(figsize=(6, 6))\nfig.suptitle(\"Correlation between mental health assessment and valence\")\n\naz = plt.subplot(1, 1, 1)\naz.scatter(z, y, alpha=0.5)\naz.plot(z, regr.predict(z), color=\"red\", linewidth=3)\nplt.xticks(())\nplt.yticks(())\n\n\nplt.xlabel(\"Mental Health Metric\")\nplt.ylabel(\"Valence\")\n\nplt.show()","d4a4bc49":"regr = linear_model.LinearRegression()\nregr.fit(z, a)\n\nfig = plt.figure(figsize=(6, 6))\nfig.suptitle(\"Correlation between mental health assessment and acousticness\")\n\nza = plt.subplot(1, 1, 1)\nza.scatter(z, a, alpha=0.5)\nza.plot(z, regr.predict(z), color=\"red\", linewidth=3)\nplt.xticks(())\nplt.yticks(())\n\nplt.xlabel(\"Mental Health Metric\")\nplt.ylabel(\"Acousticness\")\n\nplt.show()","fd8e84c4":"regr = linear_model.LinearRegression()\nregr.fit(z, l)\n\nfig = plt.figure(figsize=(6, 6))\nfig.suptitle(\"Correlation between mental health assessment and loudness\")\n\nzl = plt.subplot(1, 1, 1)\nzl.scatter(z, l, alpha=0.5)\nzl.plot(z, regr.predict(z), color=\"red\", linewidth=3)\nplt.xticks(())\nplt.yticks(())\n\n\nplt.xlabel(\"Mental Health Metric\")\nplt.ylabel(\"Loudness\")\n\nplt.show()","d5f35282":"x = \"Valence\"\ny = \"Total_mental_health\"\n\n#Structure graphs layout\nfig, (ax2) = plt.subplots(1, 1, sharey=False, sharex=False, figsize=(10, 5))\nfig.suptitle(\"Valence X Total Mental Health\")\n\n#add  \"heatmap\" that illustrates the number of songs found at all values of valence and danceability.\nh = ax2.hist2d(data_frame[x], data_frame[y], bins=20)\nax2.set_xlabel(x)\nax2.set_ylabel(y)\n\nplt.colorbar(h[3], ax=ax2)\n\nplt.show()\n","8fca185b":"x = \"Loudness\"\ny = \"Total_mental_health\"\n\n\n#Structure graphs layout\nfig, (ax2) = plt.subplots(1, 1, sharey=False, sharex=False, figsize=(10, 5))\nfig.suptitle(\"Loudness X Total Mental Health\")\n\n#add  \"heatmap\" that illustrates the number of songs found at all values of valence and danceability.\nh = ax2.hist2d(data_frame[x], data_frame[y], bins=20)\nax2.set_xlabel(x)\nax2.set_ylabel(y)\n\nplt.colorbar(h[3], ax=ax2)\n\nplt.show()\n","935e4d46":"x = \"Danceability\"\ny = \"Total_mental_health\"\n\n\n#Structure graphs layout\nfig, (ax2) = plt.subplots(1, 1, sharey=False, sharex=False, figsize=(10, 5))\nfig.suptitle(\"Danceability X Total Mental Health\")\n\n#add  \"heatmap\" that illustrates the number of songs found at all values of valence and danceability.\nh = ax2.hist2d(data_frame[x], data_frame[y], bins=20)\nax2.set_xlabel(x)\nax2.set_ylabel(y)\n\n\nplt.colorbar(h[3], ax=ax2)\n\nplt.show()\n","803f2adf":"x = \"Acousticness\"\ny = \"Total_mental_health\"\n\n\n#Structure graphs layout\nfig, (ax2) = plt.subplots(1, 1, sharey=False, sharex=False, figsize=(10, 5))\nfig.suptitle(\"Acousticness X Total Mental Health\")\n\n#add  \"heatmap\" that illustrates the number of songs found at all values of valence and danceability.\nh = ax2.hist2d(data_frame[x], data_frame[y], bins=20)\nax2.set_xlabel(x)\nax2.set_ylabel(y)\n\n\nplt.colorbar(h[3], ax=ax2)\n\nplt.show()\n","e801188d":"x = \"Audio + Lyrics analysis\"\ny = \"Total_mental_health\"\n\n\n#Structure graphs layout\nfig, (ax2) = plt.subplots(1, 1, sharey=False, sharex=False, figsize=(10, 5))\nfig.suptitle(\"Audio & Lyrics Sentiment X Total Mental Health\")\n\n#add  \"heatmap\" that illustrates the number of songs found at all values of valence and danceability.\nh = ax2.hist2d(data_frame[x], data_frame[y], bins=4)\nax2.set_xlabel(x)\nax2.set_ylabel(y)\n\n\nplt.colorbar(h[3], ax=ax2)\n\nplt.show()\n","588454d4":"chosen = [\"Loudness\", \"Valence\", \"Danceability\", \"Acousticness\", \"Audio + Lyrics analysis\" ,\"Total_mental_health\"]\n\ntext1 = data_frame[\"Artist\"] + \" - \" + data_frame[\"Song_name\"]\ntext2 = text1.values \n\nX = data_frame[chosen].values\ny = data_frame[\"Total_mental_health\"].values\n\nmin_max_scaler = MinMaxScaler()\nX = min_max_scaler.fit_transform(X)\n\npca = PCA(n_components=3)\npca.fit(X)\n\nX = pca.transform(X)\n\nimport plotly.offline as py\n#import plotly.express as px\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\n#x,y,z = PCA Index \n#can we add markers value?\ntrace = go.Scatter3d(\n    x=X[:,0],\n    y=X[:,1],\n    z=X[:,2],\n    text=text2,\n    mode=\"markers\",\n    marker=dict(\n        size=8,\n        color=y\n    )\n)\n\nfig = go.Figure(data=[trace])\n\npy.iplot(fig, filename=\"test-graph\")","87cd5912":"chosen = [\"Loudness\", \"Valence\", \"Danceability\",\"Acousticness\",\"Audio + Lyrics analysis\",\"Total_mental_health\"]\ntext1 = data_frame[\"Artist\"] + \" - \" + data_frame[\"Song_name\"]\ntext2 = text1.values\n\n# X = data_frame.drop(droppable, axis=1).values\nX = data_frame[chosen].values\ny = data_frame[\"Total_mental_health\"].values\n\nmin_max_scaler = MinMaxScaler()\nX = min_max_scaler.fit_transform(X)\n\npca = PCA(n_components=2)\npca.fit(X)\n\nX = pca.transform(X)\n\nfig = {\n    \"data\": [\n        {\n            \"x\": X[:, 0],\n            \"y\": X[:, 1],\n            \"text\": text2,\n            \"mode\": \"markers\",\n            \"marker\": {\"size\": \"8\", \"color\": y}\n        }\n    ],\n    \"layout\": {\n         \"xaxis\": {\"title\": \"PCA X\"},\n        \"yaxis\": {\"title\": \"PCA Y\"},\n    }\n}\n\npy.iplot(fig, filename=\"test-graph2\")","ca541645":"kmeans_X_Y = pd.DataFrame({'pca1': X[:, 0], 'pca2': X[:, 1]})","cfde3bcb":"import time\n\nchosen = [\"Loudness\", \"Valence\", \"Danceability\", \"Acousticness\", \"Audio + Lyrics analysis\",\"Total_mental_health\"]\n\n\nX = data_frame[chosen].values\ny = data_frame[\"Total_mental_health\"].values\n\nmin_max_scaler = MinMaxScaler()\nX = min_max_scaler.fit_transform(X)\n\ntime_start = time.time()\ntsne = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=500)\ntsne_results = tsne.fit_transform(X)\n\nprint('t-SNE done! Time elapsed: {} seconds'.format(time.time()-time_start))\n\nfig = {\n    \"data\": [\n        {\n            \"x\": tsne_results[:, 0],\n            \"y\": tsne_results[:, 1],\n            \"text\": text2,\n            \"mode\": \"markers\",\n            \"marker\": {\"size\": \"8\", \"color\": y}\n        }\n    ],\n    \"layout\": {\n        \"xaxis\": {\"title\": \"x-tsne\"},\n        \"yaxis\": {\"title\": \"y-tsne\"}\n    }\n}\n\npy.iplot(fig, filename=\"test-graph2\")","78d6c523":"kmeans_X_Y_sne = pd.DataFrame({'pca1': tsne_results[:, 0], 'pca2': tsne_results[:, 1]})","c4173fd1":"def add_cluster_number_to_dataframe(model, df,pca_df):\n    df = df.copy() # Prevent adding column in-place\n    df['cluster'] = model.labels_ + 1\n    df['cluster'] = 'cluster ' + df['cluster'].astype(str)\n    \n    df['pca1'] = pca_df['pca1']\n    df['pca2'] = pca_df['pca2']\n    \n    df = df.sort_values(['cluster'])\n    \n    \n    return df","a8351769":"\n\nkmeans = KMeans(n_clusters=3, random_state = 424, n_jobs=-1)\nkmeans.fit(kmeans_X_Y)\n\ndata_frame_pca = add_cluster_number_to_dataframe(kmeans, data_frame, kmeans_X_Y)\n\ndata_frame_pca.head()\n","eece1060":"df_filtered_1 = data_frame_pca[data_frame_pca['cluster'] == \"cluster 1\"]\ndf_filtered_1_X = df_filtered_1['pca1'].values\ndf_filtered_1_Y = df_filtered_1['pca2'].values\ndf_filtered_1_text1 = df_filtered_1[\"Artist\"] + \" - \" + df_filtered_1[\"Song_name\"]\ndf_filtered_1_text2 = df_filtered_1_text1.values \n\ntrace1 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 1\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_1_X,\n    \"y\": df_filtered_1_Y,\n    \"text\":df_filtered_1_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"blue\"\n  }\n}\n\ndf_filtered_2 = data_frame_pca[data_frame_pca['cluster'] == \"cluster 2\"]\ndf_filtered_2_X = df_filtered_2['pca1'].values\ndf_filtered_2_Y = df_filtered_2['pca2'].values\ndf_filtered_2_text1 = df_filtered_2[\"Artist\"] + \" - \" + df_filtered_2[\"Song_name\"]\ndf_filtered_2_text2 = df_filtered_2_text1.values \n\ntrace2 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 2\", \n  \"type\": \"scatter\", \n\"x\": df_filtered_2_X,\n\"y\": df_filtered_2_Y,\n      \"text\":df_filtered_2_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"green\"\n  }\n}\n\n\ndf_filtered_3 = data_frame_pca[data_frame_pca['cluster'] == \"cluster 3\"]\ndf_filtered_3_X = df_filtered_3['pca1'].values\ndf_filtered_3_Y = df_filtered_3['pca2'].values\ndf_filtered_3_text1 = df_filtered_3[\"Artist\"] + \" - \" + df_filtered_3[\"Song_name\"]\ndf_filtered_3_text2 = df_filtered_3_text1.values \n\n\ntrace3 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 3\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_3_X,\n    \"y\": df_filtered_3_Y,\n      \"text\":df_filtered_3_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"red\"\n  }\n}\n\n\ndata = [trace1, trace2,trace3]\nlayout = {\n  \"title\": \"PCA K-Means Clustering (k=3)\", \n  \"xaxis\": {\n    \"ticks\": \"\", \n    \"showgrid\": True, \n    \"zeroline\": True, \n    \"showticklabels\": True\n  }, \n  \"yaxis\": {\n    \"ticks\": \"\", \n    \"showgrid\": True, \n    \"zeroline\": True, \n    \"showticklabels\": True\n  }, \n  \"legend\": {\"font\": {\"size\": 16}}, \n  \"titlefont\": {\"size\": 24}\n}\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"test-graph4\")","5fd67600":"SSE = []\nfor i in range(2,11):\n    model = KMeans(n_clusters= i, random_state=99)\n    model.fit(kmeans_X_Y_sne)\n    SSE.append(model.inertia_)\nk = (range(2,11))\nplt.title('Elbow curve')\nplt.xlabel('k')\nplt.ylabel('SSE')\nplt.grid(True)\nplt.plot(k, SSE)\nplt.show()","2ac75329":"kmeans = KMeans(n_clusters=3, random_state = 424, n_jobs=-1)\nkmeans.fit(kmeans_X_Y_sne)\n\ndata_frame_sne = add_cluster_number_to_dataframe(kmeans, data_frame, kmeans_X_Y_sne)\n\ndata_frame_sne.head()\n","cbf7aa9e":"df_filtered_1 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 1\"]\ndf_filtered_1_X = df_filtered_1['pca1'].values\ndf_filtered_1_Y = df_filtered_1['pca2'].values\ndf_filtered_1_text1 = df_filtered_1[\"Artist\"] + \" - \" + df_filtered_1[\"Song_name\"]\ndf_filtered_1_text2 = df_filtered_1_text1.values \n\ntrace1 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 1\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_1_X,\n    \"y\": df_filtered_1_Y,\n    \"text\":df_filtered_1_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"blue\"\n  }\n}\n\ndf_filtered_2 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 2\"]\ndf_filtered_2_X = df_filtered_2['pca1'].values\ndf_filtered_2_Y = df_filtered_2['pca2'].values\ndf_filtered_2_text1 = df_filtered_2[\"Artist\"] + \" - \" + df_filtered_2[\"Song_name\"]\ndf_filtered_2_text2 = df_filtered_2_text1.values \n\ntrace2 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 2\", \n  \"type\": \"scatter\", \n\"x\": df_filtered_2_X,\n\"y\": df_filtered_2_Y,\n      \"text\":df_filtered_2_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"green\"\n  }\n}\n\n\ndf_filtered_3 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 3\"]\ndf_filtered_3_X = df_filtered_3['pca1'].values\ndf_filtered_3_Y = df_filtered_3['pca2'].values\ndf_filtered_3_text1 = df_filtered_3[\"Artist\"] + \" - \" + df_filtered_3[\"Song_name\"]\ndf_filtered_3_text2 = df_filtered_3_text1.values \n\n\ntrace3 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 3\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_3_X,\n    \"y\": df_filtered_3_Y,\n      \"text\":df_filtered_3_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"red\"\n  }\n}\n\n\ndata = [trace1, trace2,trace3]\nlayout = {\n  \"title\": \"t-SNE K-Means Clustering (k=3)\", \n  \"xaxis\": {\n    \"ticks\": \"\", \n    \"showgrid\": True, \n    \"zeroline\": True, \n    \"showticklabels\": True\n  }, \n  \"yaxis\": {\n    \"ticks\": \"\", \n    \"showgrid\": True, \n    \"zeroline\": True, \n    \"showticklabels\": True\n  }, \n  \"legend\": {\"font\": {\"size\": 16}}, \n  \"titlefont\": {\"size\": 24}\n}\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"test-graph5\")","0f1601fd":"kmeans = KMeans(n_clusters=4, random_state = 200, n_jobs=-1)\nkmeans.fit(kmeans_X_Y_sne)\n\ndata_frame_sne = add_cluster_number_to_dataframe(kmeans, data_frame, kmeans_X_Y_sne)\n\ndata_frame_sne.head()\n","3aae233b":"df_filtered_1 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 1\"]\ndf_filtered_1_X = df_filtered_1['pca1'].values\ndf_filtered_1_Y = df_filtered_1['pca2'].values\ndf_filtered_1_text1 = df_filtered_1[\"Artist\"] + \" - \" + df_filtered_1[\"Song_name\"]\ndf_filtered_1_text2 = df_filtered_1_text1.values \n\ntrace1 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 1\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_1_X,\n    \"y\": df_filtered_1_Y,\n    \"text\":df_filtered_1_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"blue\"\n  }\n}\n\ndf_filtered_2 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 2\"]\ndf_filtered_2_X = df_filtered_2['pca1'].values\ndf_filtered_2_Y = df_filtered_2['pca2'].values\ndf_filtered_2_text1 = df_filtered_2[\"Artist\"] + \" - \" + df_filtered_2[\"Song_name\"]\ndf_filtered_2_text2 = df_filtered_2_text1.values \n\ntrace2 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 2\", \n  \"type\": \"scatter\", \n\"x\": df_filtered_2_X,\n\"y\": df_filtered_2_Y,\n      \"text\":df_filtered_2_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"green\"\n  }\n}\n\n\ndf_filtered_3 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 3\"]\ndf_filtered_3_X = df_filtered_3['pca1'].values\ndf_filtered_3_Y = df_filtered_3['pca2'].values\ndf_filtered_3_text1 = df_filtered_3[\"Artist\"] + \" - \" + df_filtered_3[\"Song_name\"]\ndf_filtered_3_text2 = df_filtered_3_text1.values \n\n\ntrace3 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 3\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_3_X,\n    \"y\": df_filtered_3_Y,\n      \"text\":df_filtered_3_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"red\"\n  }\n}\n\n\n\ndf_filtered_4 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 4\"]\ndf_filtered_4_X = df_filtered_4['pca1'].values\ndf_filtered_4_Y = df_filtered_4['pca2'].values\ndf_filtered_4_text1 = df_filtered_4[\"Artist\"] + \" - \" + df_filtered_4[\"Song_name\"]\ndf_filtered_4_text2 = df_filtered_4_text1.values \n\n\ntrace4 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 4\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_4_X,\n    \"y\": df_filtered_4_Y,\n      \"text\":df_filtered_4_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"Yellow\"\n  }\n}\n\n\n\ndata = [trace1, trace2,trace3,trace4]\nlayout = {\n  \"title\": \"t-SNE K-Means Clustering (k=4)\", \n  \"xaxis\": {\n    \"ticks\": \"\", \n    \"showgrid\": True, \n    \"zeroline\": True, \n    \"showticklabels\": True\n  }, \n  \"yaxis\": {\n    \"ticks\": \"\", \n    \"showgrid\": True, \n    \"zeroline\": True, \n    \"showticklabels\": True\n  }, \n  \"legend\": {\"font\": {\"size\": 16}}, \n  \"titlefont\": {\"size\": 24}\n}\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"test-graph6\")","386a9fa3":"kmeans = KMeans(n_clusters=5, random_state = 424, n_jobs=-1)\nkmeans.fit(kmeans_X_Y_sne)\n\ndata_frame_sne = add_cluster_number_to_dataframe(kmeans, data_frame, kmeans_X_Y_sne)\n\ndata_frame_sne.head()\n","05c913f6":"df_filtered_1 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 1\"]\ndf_filtered_1_X = df_filtered_1['pca1'].values\ndf_filtered_1_Y = df_filtered_1['pca2'].values\ndf_filtered_1_text1 = df_filtered_1[\"Artist\"] + \" - \" + df_filtered_1[\"Song_name\"]\ndf_filtered_1_text2 = df_filtered_1_text1.values \n\ntrace1 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 1\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_1_X,\n    \"y\": df_filtered_1_Y,\n    \"text\":df_filtered_1_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"blue\"\n  }\n}\n\ndf_filtered_2 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 2\"]\ndf_filtered_2_X = df_filtered_2['pca1'].values\ndf_filtered_2_Y = df_filtered_2['pca2'].values\ndf_filtered_2_text1 = df_filtered_2[\"Artist\"] + \" - \" + df_filtered_2[\"Song_name\"]\ndf_filtered_2_text2 = df_filtered_2_text1.values \n\ntrace2 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 2\", \n  \"type\": \"scatter\", \n\"x\": df_filtered_2_X,\n\"y\": df_filtered_2_Y,\n      \"text\":df_filtered_2_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"green\"\n  }\n}\n\n\ndf_filtered_3 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 3\"]\ndf_filtered_3_X = df_filtered_3['pca1'].values\ndf_filtered_3_Y = df_filtered_3['pca2'].values\ndf_filtered_3_text1 = df_filtered_3[\"Artist\"] + \" - \" + df_filtered_3[\"Song_name\"]\ndf_filtered_3_text2 = df_filtered_3_text1.values \n\n\ntrace3 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 3\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_3_X,\n    \"y\": df_filtered_3_Y,\n      \"text\":df_filtered_3_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"red\"\n  }\n}\n\n\n\ndf_filtered_4 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 4\"]\ndf_filtered_4_X = df_filtered_4['pca1'].values\ndf_filtered_4_Y = df_filtered_4['pca2'].values\ndf_filtered_4_text1 = df_filtered_4[\"Artist\"] + \" - \" + df_filtered_4[\"Song_name\"]\ndf_filtered_4_text2 = df_filtered_4_text1.values \n\n\ntrace4 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 4\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_4_X,\n    \"y\": df_filtered_4_Y,\n      \"text\":df_filtered_4_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"Yellow\"\n  }\n}\n\ndf_filtered_5 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 5\"]\ndf_filtered_5_X = df_filtered_5['pca1'].values\ndf_filtered_5_Y = df_filtered_5['pca2'].values\ndf_filtered_5_text1 = df_filtered_5[\"Artist\"] + \" - \" + df_filtered_5[\"Song_name\"]\ndf_filtered_5_text2 = df_filtered_5_text1.values \n\n\ntrace5 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 5\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_5_X,\n    \"y\": df_filtered_5_Y,\n      \"text\":df_filtered_5_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"Orange\"\n  }\n}\n\n\n\ndata = [trace1, trace2,trace3,trace4,trace5]\nlayout = {\n  \"title\": \"t-SNE K-Means Clustering (k=5)\", \n  \"xaxis\": {\n    \"ticks\": \"\", \n    \"showgrid\": True, \n    \"zeroline\": True, \n    \"showticklabels\": True\n  }, \n  \"yaxis\": {\n    \"ticks\": \"\", \n    \"showgrid\": True, \n    \"zeroline\": True, \n    \"showticklabels\": True\n  }, \n  \"legend\": {\"font\": {\"size\": 16}}, \n  \"titlefont\": {\"size\": 24}\n}\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"test-graph7\")","3536ec80":"kmeans = KMeans(n_clusters=6, random_state = 424, n_jobs=-1,max_iter=500)\nkmeans.fit(kmeans_X_Y_sne)\n\ndata_frame_sne = add_cluster_number_to_dataframe(kmeans, data_frame, kmeans_X_Y_sne)\n\ndata_frame_sne.head()\n","dcdb23b6":"df_filtered_1 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 1\"]\ndf_filtered_1_X = df_filtered_1['pca1'].values\ndf_filtered_1_Y = df_filtered_1['pca2'].values\ndf_filtered_1_text1 = df_filtered_1[\"Artist\"] + \" - \" + df_filtered_1[\"Song_name\"]\ndf_filtered_1_text2 = df_filtered_1_text1.values \n\ntrace1 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 1\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_1_X,\n    \"y\": df_filtered_1_Y,\n    \"text\":df_filtered_1_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"blue\"\n  }\n}\n\ndf_filtered_2 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 2\"]\ndf_filtered_2_X = df_filtered_2['pca1'].values\ndf_filtered_2_Y = df_filtered_2['pca2'].values\ndf_filtered_2_text1 = df_filtered_2[\"Artist\"] + \" - \" + df_filtered_2[\"Song_name\"]\ndf_filtered_2_text2 = df_filtered_2_text1.values \n\ntrace2 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 2\", \n  \"type\": \"scatter\", \n\"x\": df_filtered_2_X,\n\"y\": df_filtered_2_Y,\n      \"text\":df_filtered_2_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"green\"\n  }\n}\n\n\ndf_filtered_3 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 3\"]\ndf_filtered_3_X = df_filtered_3['pca1'].values\ndf_filtered_3_Y = df_filtered_3['pca2'].values\ndf_filtered_3_text1 = df_filtered_3[\"Artist\"] + \" - \" + df_filtered_3[\"Song_name\"]\ndf_filtered_3_text2 = df_filtered_3_text1.values \n\n\ntrace3 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 3\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_3_X,\n    \"y\": df_filtered_3_Y,\n      \"text\":df_filtered_3_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"red\"\n  }\n}\n\n\n\ndf_filtered_4 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 4\"]\ndf_filtered_4_X = df_filtered_4['pca1'].values\ndf_filtered_4_Y = df_filtered_4['pca2'].values\ndf_filtered_4_text1 = df_filtered_4[\"Artist\"] + \" - \" + df_filtered_4[\"Song_name\"]\ndf_filtered_4_text2 = df_filtered_4_text1.values \n\n\ntrace4 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 4\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_4_X,\n    \"y\": df_filtered_4_Y,\n      \"text\":df_filtered_4_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"Yellow\"\n  }\n}\n\ndf_filtered_5 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 5\"]\ndf_filtered_5_X = df_filtered_5['pca1'].values\ndf_filtered_5_Y = df_filtered_5['pca2'].values\ndf_filtered_5_text1 = df_filtered_5[\"Artist\"] + \" - \" + df_filtered_5[\"Song_name\"]\ndf_filtered_5_text2 = df_filtered_5_text1.values \n\n\ntrace5 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 5\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_5_X,\n    \"y\": df_filtered_5_Y,\n      \"text\":df_filtered_5_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"Orange\"\n  }\n}\n\ndf_filtered_6 = data_frame_sne[data_frame_sne['cluster'] == \"cluster 6\"]\ndf_filtered_6_X = df_filtered_6['pca1'].values\ndf_filtered_6_Y = df_filtered_6['pca2'].values\ndf_filtered_6_text1 = df_filtered_6[\"Artist\"] + \" - \" + df_filtered_6[\"Song_name\"]\ndf_filtered_6_text2 = df_filtered_6_text1.values \n\n\ntrace6 = {\n  \"mode\": \"markers\", \n  \"name\": \"Cluster 6\", \n  \"type\": \"scatter\", \n    \"x\": df_filtered_6_X,\n    \"y\": df_filtered_6_Y,\n      \"text\":df_filtered_6_text2,\n  \"marker\": {\n    \"line\": {\n      \"color\": \"white\", \n      \"width\": 0.5\n    }, \n    \"size\": 12, \n    \"color\": \"Brown\"\n  }\n}\n\ndata = [trace1, trace2,trace3,trace4,trace5,trace6]\nlayout = {\n  \"title\": \"t-SNE K-Means Clustering (k=6)\", \n  \"xaxis\": {\n    \"ticks\": \"\", \n    \"showgrid\": True, \n    \"zeroline\": True, \n    \"showticklabels\": True\n  }, \n  \"yaxis\": {\n    \"ticks\": \"\", \n    \"showgrid\": True, \n    \"zeroline\": True, \n    \"showticklabels\": True\n  }, \n  \"legend\": {\"font\": {\"size\": 16}}, \n  \"titlefont\": {\"size\": 24}\n}\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"test-graph8\")","2c44d54d":"# K-Means Clustering Model (PCA)","dbd0cdab":"# Principal Component Analysis (PCA) ","1ccf888a":"Audio & Lyrics Sentiment X Total Mental Health","812dcbbf":"In another attempt, we use a smaller \"chosen\" list and PCA to generate a two-dimensional graph.This specific graph was chosen due to its seemingly spot-on axes naming.","0105beaf":"First we import all the necessary modules and generate the table to analyse.","467e8527":"# K-Means Clustering Model (t-SNE), k=3","2138f7b4":"Now to create some histograms. The plot on the left illustrates the distribution of songs based on their energy levels, whereas the one on the right is a \"heatmap\" (histogram in two dimensions) that illustrates the number of songs found at all values of valence and danceability.","7ef73630":"We generate a similar graph using t-distributed stochastic neighbor embedding (t-SNE) and yet another \"chosen\" list instead.","815389a1":"We apply the  Principal Component Analysis (PCA) to reduce the dimensions of chosen attributes list to 3, effectively creating a matrix suitable for generating the following 3-dimensional plot. The lesser the distance between any two songs, the larger the similarities in their traits.","f6a2d76d":"# Elbow Method","d130cf3d":"Valence X Total Mental Health","37ec3fef":"# K-Means Clustering Model (t-SNE), k=5","ab17a644":"# Standardise Chosen Variables \n","ad8d979e":"Loudness X Total Mental Health","85a4533a":"Perform Feature encoding for class attributes","c6f0109f":"# IS424: Assessing Mental Health Index based on the Music Attributes\n\nThis notebook does basic analysis of song metadata taken from spotify. \n\nThe data contains numeric metrics generated by spotify which measure the songs' danceability, mood, liveness, etc. The data also contains the songs' title and artist.\n\n\nGithub of codes for data extraction, cleaning & transformation: ","84a31826":"# K-Means Clustering Model (t-SNE), k=4","f4734db6":"# K-Means Clustering Model (t-SNE), k=6","dfdc94c9":"building correlation of total mental health metric and song mood"}}