{"cell_type":{"176c8e38":"code","f0a5ee5a":"code","386cf82a":"code","5b5645e2":"code","b4915b1b":"code","b40256a2":"code","de673c24":"code","e96bc044":"code","058bfbb3":"code","6ac90cbc":"code","9f938815":"code","b8391257":"code","8b90dacb":"code","184a9972":"code","7302cf72":"code","d02831e3":"code","bd1dbd54":"code","17255636":"code","63855cfd":"code","4d531b47":"code","f6a0d362":"code","ece3c6d3":"code","1ece42cf":"code","58910263":"code","d6ee8f5c":"code","4dcaeef0":"code","f166e3d9":"markdown","deedf60b":"markdown","1677fcd0":"markdown","2088087a":"markdown","4b23ec8e":"markdown","b2b7645e":"markdown","8797fbe1":"markdown","8bd9f8ed":"markdown","de02ee0b":"markdown","84188503":"markdown","f58e8cbb":"markdown","5e72a07f":"markdown"},"source":{"176c8e38":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f0a5ee5a":"# importing the librabries \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom sklearn.model_selection import train_test_split\nimport missingno as msno # check missing value\n\n# geographic visualization \nimport chart_studio.plotly as py\nimport plotly.graph_objs as go \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected= True)\n","386cf82a":"df = pd.read_csv('..\/input\/us-accidents\/US_Accidents_May19.csv')","5b5645e2":"df.shape","b4915b1b":"df.columns","b40256a2":"df.head()","de673c24":"# checking null values \ndef chk_null(df):\n    total = df.isnull().sum().sort_values(ascending = False)\n    percent = (df.isnull().sum()\/df.shape[0]*100).sort_values(ascending = False)\n    missing_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    print(missing_data.head(10))","e96bc044":"chk_null(df)","058bfbb3":"msno.matrix(df)","6ac90cbc":"df.drop(['Precipitation(in)','Wind_Chill(F)','End_Lat','End_Lng'] ,axis =1,inplace = True)\ndf.shape","9f938815":"plt.figure(figsize=(10,7))\nby_cat = df.groupby([\"Source\"]).size().sort_values(ascending = False)\nsns.barplot(by_cat.values, by_cat.index.values, palette = \"rocket\")\nplt.title(\"Data colleted by different surces\")\nplt.xlabel(\"Collection Count\")","b8391257":"plt.figure(figsize=(10,7))\nby_cat = df.groupby([\"Timezone\"]).size().sort_values(ascending = False)\nsns.barplot(by_cat.values, by_cat.index.values, palette = \"rocket\")\nplt.title(\"accident count for different timezone\")\nplt.xlabel(\"Numer of acidents\")","8b90dacb":"plt.figure(figsize=(10,7))\nby_cat = df.groupby([\"Side\"]).size().sort_values(ascending = False)\nsns.barplot(by_cat.values, by_cat.index.values, palette = \"rocket\")\nplt.title(\"accident count for different timezone\")\nplt.xlabel(\"Numer of acidents\")","184a9972":"plt.figure(figsize=(7,10))\nby_cat = df.groupby(['State']).size().sort_values(ascending = False)\nsns.barplot(by_cat.values, by_cat.index.values, palette = \"rocket\")\nplt.title(\"accident count for different State\")\nplt.xlabel(\"Numer of acidents\")","7302cf72":"# total number of accident grouped by US state \nacc_count = df.groupby('State')['State'].size()","d02831e3":"data = dict(type = 'choropleth',\n            locations = [\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"\tCT\",\"DC\",\"DE\",\"FL\",\"GA\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VA\",\"VT\",\"WA\",\"WI\t\",\"WV\",\"WY\"],\n            locationmode = 'USA-states',\n            colorscale= 'Electric',\n            text= [\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"\tCT\",\"DC\",\"DE\",\"FL\",\"GA\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VA\",\"VT\",\"WA\",\"WI\t\",\"WV\",\"WY\"],\n            z=acc_count,\n            colorbar = {'title':'Accident_count'})\nlayout = dict(geo = {'scope':'usa'})\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap)","bd1dbd54":"#chekcing corelation etween various features \nplt.figure(figsize=(8,8))\ncorr = df.corr()\nsns.heatmap(corr)","17255636":"# Number of unique classes in each 'object' column\n# Number of each type of column\ndf.dtypes.value_counts()","63855cfd":"df.select_dtypes('object').apply(pd.Series.nunique, axis = 0)","4d531b47":"df['Start_Time'] = pd.to_datetime(df['Start_Time'], format=\"%Y\/%m\/%d %H:%M:%S\")\ndf['DayOfWeekNum'] = df['Start_Time'].dt.dayofweek\ndf['DayOfWeek'] = df['Start_Time'].dt.weekday_name\ndf['MonthDayNum'] = df['Start_Time'].dt.day\ndf['HourOfDay'] = df['Start_Time'].dt.hour","f6a0d362":"sev_count = df.groupby('Severity').size()","ece3c6d3":"df.Severity.value_counts(normalize=True).sort_index().plot.bar()\nplt.grid()\nplt.title('Severity')\nplt.xlabel('Severity')\nplt.ylabel('Fraction');","1ece42cf":"sns.set_style('whitegrid')\nax = sns.pointplot(x=\"HourOfDay\", y=\"TMC\", hue=\"DayOfWeek\", data=df)\nax.set_title('hoursoffday vs TMC(Traffic Message Channel) of accident')\nplt.show()","58910263":"weekday = df.groupby('DayOfWeek').ID.count()\nweekday = weekday\/weekday.sum()\ndayOfWeek=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\nweekday[dayOfWeek].plot.bar()\nplt.title('Acccidents by Weekday')\nplt.xlabel('Weekday')\nplt.ylabel('fraction of total accident');","d6ee8f5c":"st = pd.to_datetime(df.Start_Time, format='%Y-%m-%d %H:%M:%S')\nend = pd.to_datetime(df.End_Time, format='%Y-%m-%d %H:%M:%S')","4dcaeef0":"diff = (end-st)\ntop20 = diff.astype('timedelta64[m]').value_counts().nlargest(20)\nprint('top 20 accident durations correspond to {:.1f}% of the data'.format(top20.sum()*100\/len(diff)))\n(top20\/top20.sum()).plot.bar(figsize=(7,5))\nplt.title('Accident Duration [Minutes]')\nplt.xlabel('Duration [minutes]')\nplt.ylabel('Fraction');","f166e3d9":"from above plot we can see that between 6 to 18  hours of the day below 212 TMC are generating for any accident. \n","deedf60b":"From above plot we found that CA state has highest number of accident.","1677fcd0":"**Geographic accident Visualization using plotly **","2088087a":"Now we need to begin to build our data dictionary. Easiest way to do this is to use the dict() function of the general form:\n\ntype = 'choropleth',\n\nlocations = list of states\n\nlocationmode = 'USA-states'\n\ncolorscale=\n\n**Either a predefined string:**\n\n'pairs' | 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' | 'Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu'\n\nor create a custom colorscale\n\ntext= list or array of text to display per point\n\nz= array of values on z axis (color of state)\n\ncolorbar = {'title':'Colorbar Title'})","4b23ec8e":"most of datas are collected by MapQuest","b2b7645e":"**weekdays vs fraction of accident **\n\nfrom below plot we find that on weekend less amount of  accident occured ","8797fbe1":"Severity Shows the severity of the accident, a number between 1 and 4, where 1 indicates the least impact on traffic (i.e., short delay as a result of the accident) and 4 indicates a significant impact on traffic (i.e., long delay).","8bd9f8ed":"from above plot we found that US\/Eastern timezone has highest acccident count and US\/Mountain has lowest accident count. ","de02ee0b":"**Severity vs Fraction of total accidents **","84188503":"**US state wise accident **","f58e8cbb":"means most of accident occured from right side. ","5e72a07f":"here we can see that 'Precipitation', 'Wind_Chill' , 'End_Lat' , 'End_Lng' have higher missing values hence dropping those columns "}}