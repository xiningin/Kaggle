{"cell_type":{"316c5d2a":"code","ed446e3c":"code","775f5a77":"code","60941a40":"code","c75d1ecf":"code","ea2b2f74":"code","173958b5":"code","87c2d90e":"code","96b61b6c":"code","3efbe565":"code","48f4c0f3":"code","65bc7c8b":"code","8ea7ffb7":"code","cf5c57dc":"code","f99f84e3":"code","9eedb2b1":"code","44ed3877":"code","ce3a8488":"code","ac2f8943":"code","e8e37230":"code","bb6dd3ff":"code","da8a88c5":"code","5198914c":"code","229fc75e":"code","72a2e293":"code","96119247":"code","79516578":"code","b64f328d":"code","2a69e11d":"code","84e5c2c7":"code","9212a8ed":"code","6dc35132":"markdown","4fa180e9":"markdown","b64b0758":"markdown","8f41f877":"markdown","5448bd00":"markdown","3c55ee29":"markdown","24e184a4":"markdown","e631bcaf":"markdown","242c644b":"markdown","cabad29d":"markdown","518f2b52":"markdown","e789ab28":"markdown","221b2987":"markdown","5cd60400":"markdown","e874dd6a":"markdown","d9a3f77d":"markdown","9d8b88e0":"markdown","2d7e43a3":"markdown","1807bf75":"markdown","6d12195b":"markdown","633b037e":"markdown","1ee1f60a":"markdown"},"source":{"316c5d2a":"import pandas as pd\npd.set_option('max_colwidth', 800)\nimport numpy as np\n\nfrom bs4 import BeautifulSoup\nimport requests\n\nfrom geopy.geocoders import Nominatim\n\nimport folium \nfrom pandas.io.json import json_normalize\n\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\n\nfrom sklearn.cluster import KMeans","ed446e3c":"url = 'https:\/\/en.wikipedia.org\/wiki\/List_of_districts_of_Jakarta'\nres = requests.get(url).text \nsoup = BeautifulSoup(res, 'html.parser')","775f5a77":"lis = soup.find_all('li')\nlis = lis[5:51] # Removing the redundant elements","60941a40":"neighborhoods = []\ndistricts = []\n\nfor li in lis:\n    li = li.get_text() # Getting the text from <li> elements\n    neighborhoods.append(li)","c75d1ecf":"for neighborhood in neighborhoods:\n    if 'Jakarta' in neighborhood:\n        districts.append(neighborhood)\n        neighborhoods.remove(neighborhood)\n\nneighborhoods[:5]","ea2b2f74":"df = pd.DataFrame(neighborhoods)\ndf.columns = ['Neighborhood']\ndf = df.iloc[5:32].reset_index().drop('index',axis=1)\n\nprint(df.shape)\ndf.head()","173958b5":"geolocator = Nominatim(user_agent=\"jakarta_explore\")\nlatitudes = []\nlongitudes = []\n\nfor neighborhood in df['Neighborhood']:\n    location = geolocator.geocode(neighborhood)\n    latitudes.append(location.latitude)\n    longitudes.append(location.longitude)","87c2d90e":"df['Longitude'] = longitudes\ndf['Latitude'] = latitudes\ndf.head()","96b61b6c":"# Jakarta latitude and longitude\njkt_lat = -6.200000\njkt_long = 106.816666\n\n# Create the map of Jakarta\nmap_jakarta = folium.Map(location=[jkt_lat, jkt_long], zoom_start=11)\n\n# Add markers to map\nfor lat, lng, neighborhood in zip(df['Latitude'], df['Longitude'], df['Neighborhood']):\n    label = '{}'.format(neighborhood)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        color='blue',\n        fill=True,\n        fill_color='#3186cc',\n        fill_opacity=0.7,\n        parse_html=False).add_to(map_jakarta)  \n    \nmap_jakarta","3efbe565":"foursquare_api = pd.read_csv('..\/input\/foursquarecredential\/foursquare-api.csv')","48f4c0f3":"CLIENT_ID = foursquare_api['CLIENT_ID'].values[0] # replace with your Foursquare ID\nCLIENT_SECRET = foursquare_api[' CLIENT_SECRET'].values[0] # replace with your Foursquare Secret\nVERSION = '20200605'","65bc7c8b":"LIMIT = 100\nradius = 500\n\nvenues = []\n\nfor neighborhood, lat, long in zip(df['Neighborhood'], df['Latitude'], df['Longitude']):\n    url = \"https:\/\/api.foursquare.com\/v2\/venues\/explore?client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}\".format(\n        CLIENT_ID,\n        CLIENT_SECRET,\n        VERSION,\n        lat,\n        long,\n        radius, \n        LIMIT)\n    \n    results = requests.get(url).json()['response']['groups'][0]['items']\n    \n    for venue in results:\n        venues.append((\n            neighborhood,\n            lat, \n            long, \n            venue['venue']['name'], \n            venue['venue']['location']['lat'], \n            venue['venue']['location']['lng'],  \n            venue['venue']['categories'][0]['name']))","8ea7ffb7":"venues_df = pd.DataFrame(venues)\nvenues_df.columns = ['Neighborhood', 'Neighborhood Latitude', 'Neighborhood Longitude', 'Venue Name', 'Venue Latitude', 'Venue Longitude', 'Venue Category']\nprint(venues_df.shape)\nvenues_df.head()","cf5c57dc":"# One hot encoding\njakarta_onehot = pd.get_dummies(venues_df[['Venue Category']], prefix=\"\", prefix_sep=\"\")\n\n# Completing the dataframe\njakarta_onehot['Neighborhood'] = venues_df['Neighborhood'] \n\n# Moving neighborhood column to the first column\nfixed_columns = list(jakarta_onehot.columns[96:]) + list(jakarta_onehot.columns[:96])\njakarta_onehot = jakarta_onehot[fixed_columns]\n\nprint(jakarta_onehot.shape)\njakarta_onehot.head()","f99f84e3":"jakarta_grouped = jakarta_onehot.groupby('Neighborhood').mean().reset_index()\njakarta_grouped.head()","9eedb2b1":"# Function to return the most commong venues\n\ndef return_most_common_venues(row, num_top_venues):\n    row_categories = row.iloc[1:]\n    row_categories_sorted = row_categories.sort_values(ascending=False)\n    \n    return row_categories_sorted.index.values[0:num_top_venues]","44ed3877":"num_top_venues = 10\nindicators = ['st', 'nd', 'rd']\n\n# Create columns according to number of top venues\ncolumns = ['Neighborhood']\nfor ind in np.arange(num_top_venues):\n    try:\n        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n    except:\n        columns.append('{}th Most Common Venue'.format(ind+1))\n\n# Create a new dataframe\nneighbourhoods_venues_sorted = pd.DataFrame(columns=columns)\nneighbourhoods_venues_sorted['Neighborhood'] = jakarta_grouped['Neighborhood']\n\nfor ind in np.arange(jakarta_grouped.shape[0]):\n    neighbourhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(jakarta_grouped.iloc[ind, :], num_top_venues)\n    \nneighbourhoods_venues_sorted.head()","ce3a8488":"jakarta_clustering = jakarta_grouped.drop('Neighborhood', axis = 1)","ac2f8943":"max_range = 10 # Maximum range of clusters","e8e37230":"from sklearn.metrics import silhouette_samples, silhouette_score\n\nindices = []\nscores = []\n\nfor kclusters in range(2, max_range) :\n    \n    # Run k-means clustering\n    jc = jakarta_clustering\n    kmeans = KMeans(n_clusters = kclusters, init = 'k-means++', random_state = 420).fit_predict(jc)\n    \n    # Gets the score for the clustering operation performed\n    score = silhouette_score(jc, kmeans)\n    \n    # Appending the index and score to the respective lists\n    indices.append(kclusters)\n    scores.append(score)","bb6dd3ff":"import matplotlib.pyplot as plt\n%matplotlib inline\n\ndef plot(x, y, xlabel, ylabel):\n    plt.figure(figsize=(20,10))\n    plt.plot(np.arange(2, x), y, 'o-')\n    plt.xlabel(xlabel)\n    plt.ylabel(ylabel)\n    plt.xticks(np.arange(2, x))\n    plt.show()","da8a88c5":"plot(max_range, scores, \"No. of clusters\", \"Silhouette Score\")","5198914c":"opt = np.argmax(scores) + 2 # Finds the optimal value\nopt","229fc75e":"kclusters = opt\n\n# Run k-means clustering\njc = jakarta_clustering\nkmeans = KMeans(n_clusters = kclusters, init = 'k-means++', random_state = 0).fit(jc)","72a2e293":"# Add clustering labels\nneighbourhoods_venues_sorted.insert(0, 'Cluster Labels', kmeans.labels_)","96119247":"neighbourhoods_venues_sorted.head()","79516578":"jakarta_final = df\njakarta_final = jakarta_final.join(neighbourhoods_venues_sorted.set_index('Neighborhood'), on='Neighborhood')\njakarta_final.dropna(inplace = True)\njakarta_final['Cluster Labels'] = jakarta_final['Cluster Labels'].astype(int)\njakarta_final.head()","b64f328d":"# Create map\nmap_clusters = folium.Map(location=[jkt_lat, jkt_long], zoom_start=11)\n\n# Set color scheme for the clusters\nx = np.arange(kclusters)\nys = [i + x + (i*x)**2 for i in range(kclusters)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# Add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, cluster in zip(jakarta_final['Latitude'], jakarta_final['Longitude'], jakarta_final['Neighborhood'], jakarta_final['Cluster Labels']):\n    label = folium.Popup(str(poi) + ' (Cluster ' + str(cluster + 1) + ')', parse_html=True)\n    map_clusters.add_child(\n        folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        color=rainbow[cluster-1],\n        fill=True,\n        fill_color=rainbow[cluster-1],\n        fill_opacity=0.7))\n       \nmap_clusters","2a69e11d":"clusters = pd.DataFrame(jakarta_final.groupby('Cluster Labels', as_index=False).apply(lambda x: \", \".join(x['Neighborhood'].tolist())), columns=['Similar'])\nclusters['Count'] = jakarta_final.groupby('Cluster Labels')['Neighborhood'].count()\n\ncluster_0 = jakarta_final.loc[jakarta_final['Cluster Labels']==0].Neighborhood.values\ncluster_1 = jakarta_final.loc[jakarta_final['Cluster Labels']==1].Neighborhood.values\ncluster_2 = jakarta_final.loc[jakarta_final['Cluster Labels']==2].Neighborhood.values\ncluster_3 = jakarta_final.loc[jakarta_final['Cluster Labels']==3].Neighborhood.values\n\nprint(\"Cluster | Count | Neighbourhoods\")\nprint(\"--------|-------|---------------\")\ncnt = 0\nfor x,y,z in zip(clusters.index,clusters['Count'],clusters['Similar']):\n    if cnt == 0:\n        z = ', '.join(cluster_0)\n    elif cnt == 1:\n        z = ', '.join(cluster_1)\n    elif cnt == 2:\n        z = ', '.join(cluster_2)\n    else:\n        z = ', '.join(cluster_3)\n    cnt += 1\n    print(\"{} | {} | {}\".format(x,y,z))","84e5c2c7":"jakarta_final.head()","9212a8ed":"clusters_grouped = jakarta_final.groupby(['Cluster Labels','1st Most Common Venue']).count().reset_index()\nclusters_grouped[['Cluster Labels', '1st Most Common Venue']]","6dc35132":"### Aggregating venues by neighborhoods","4fa180e9":"# \ud83c\udfd9\ufe0f Jakarta Neighborhoods: GeoData Clustering","b64b0758":"The main goal of this project is to explore and cluster the neighborhoods in Jakarta, Indonesia and also to determine the best location for various business placement. \n\nThis idea comes from the process of business modeling which often require a strategic placement for their office or headquarter. It is very common for business contractor to do some analysis before setting up their business office in an area. \n\nSo, which areas in Jakarta is most suitable for a specific kind of business? What are the factors affecting a strategic usiness placement? \n\nThe target audience for this project are: \n- Potential constructor who wants to start their own business and need a recommendation for setting up their office in Jakarta\n- Existing company who wants to renew their place in a different area of neighborhoods in Jakarta\n- Anyone who is interested in neighborhood clustering using Python as a data science tools\n","8f41f877":"### Neighborhood clustering using K-Means","5448bd00":"### Creating folium map with neighborhood markers","3c55ee29":"### Creating final dataframe","24e184a4":"### Finding top 10 venues","e631bcaf":"### Scraping the wikipedia website","242c644b":"### Using FourSquare API to explore the neighborhoods","cabad29d":"### Examining the clusters","518f2b52":"### Getting the neighborhood name","e789ab28":"### Making a dataframe from scraped-data","221b2987":"### Using GeoPy to get the neighborhood's coordinates","5cd60400":"### Importing Required Libraries","e874dd6a":"### Plotting the scoring result","d9a3f77d":"### Clustering with optimal number of clusters","9d8b88e0":"- Scraping Wikipedia\n- Data Preprocessing\n- Coordinates Retrieval Using GeoPy\n- EDA\n- Getting Venues Using [FourSquare API](https:\/\/foursquare.com\/)\n- K-Means Clustering","2d7e43a3":"### Converting the venues into a dataframe","1807bf75":"### One-hot encoding to analyze neighborhoods","6d12195b":"### Cluster Visualization","633b037e":"### Adding the coordinates to the dataframe","1ee1f60a":"<img src=\"https:\/\/wallpapercave.com\/wp\/wp1865851.jpg\"\/>\n<h4 style=\"font-size:10px;text-align:center\"> Image Source: Wallpaper cave<\/h4>"}}