{"cell_type":{"7c8697d2":"code","12c2db57":"code","932b6a29":"code","bcc920f3":"code","ee4d19dd":"code","eb72d188":"code","69895726":"code","d193522b":"code","f929e149":"code","c28ac20f":"code","9b3ce19c":"code","e90d0648":"code","f6e99cbb":"code","fd296388":"code","9ce61007":"code","00400b76":"code","77ac5ffe":"code","4c6be6e2":"code","0a42d8f8":"code","52f2700b":"code","ddea7eaa":"code","c8e13c98":"code","570331d9":"code","e39dacf5":"code","4eaa5cf0":"code","3894ef4d":"code","ae8c1040":"code","9ca17de2":"code","80ac7fa1":"code","48856ca0":"code","2ab3278a":"code","6d164998":"code","2ccfd986":"code","c9ed9049":"code","95919fd5":"code","7fe200e4":"code","fb0e4936":"code","34f31afd":"code","e30e13dc":"code","7fac58d7":"markdown","7bdea128":"markdown","cc192751":"markdown","7e6d5921":"markdown","7806654c":"markdown","d2f18909":"markdown","ab15d65d":"markdown","1d640b0d":"markdown","ea0c3e12":"markdown"},"source":{"7c8697d2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_absolute_error\nimport tensorflow as tf\nimport keras\n","12c2db57":"print('tf version:',tf.__version__,'\\n' ,'keras version:',keras.__version__,'\\n' ,'numpy version:',np.__version__)","932b6a29":"# load previous prediction results\npredicted_data = pd.read_hdf('..\/input\/106b-lstm-sol-elec-gas-3-univariate-multi-step-lst\/predicted_data6B.hdf5')","bcc920f3":"# read the data file\nsolarpower = pd.read_csv(\"..\/input\/solarpanelspower\/PV_Elec_Gas3.csv\",header = None,skiprows=1 ,\n                    names = ['date','cum_power','Elec_kW', 'Gas_mxm'], sep=',',usecols = [0,1,2,3],\n                     parse_dates={'dt' : ['date']}, infer_datetime_format=True,index_col='dt')\nprint(solarpower.head(2))\n","ee4d19dd":"# make cum_power stationary\n\nsolarpower2 = solarpower.shift(periods=1, freq='D', axis=0)\nsolarpower['cum_power_shift'] = solarpower2.loc[:,'cum_power']\nsolarpower['day_power'] = solarpower['cum_power'].values - solarpower['cum_power_shift']\nsolarpower.iloc[0:1].day_power.value = 0.\nA = solarpower.dropna()\ndel A['cum_power'], A['cum_power_shift']\nsolarpower = A","eb72d188":"solarpower.head(2), solarpower.tail(2)","69895726":"X_train = solarpower[:'2018-10-28']\nX_valid = solarpower['2018-10-29':'2019-10-28'] # is 365 days\nX_train.shape, X_valid.shape","d193522b":"X_train.tail(2), X_valid.head(2)","f929e149":"X_valid_start_cum_power = solarpower2['2018-10-28':'2018-10-28'].cum_power.values\nX_valid_start_cum_power # we need this to predict cumulative power on validation","c28ac20f":"# we devide the series into multiple input and output patterns\n\ndef my_split_window(array, y_series, window_in, window_out):\n    '''\n    the Pandas dataframe is split into output sequences of length window_in and \n    output sequences of lenght window_out\n    returns arrays X, y\n    '''\n    X = []\n    y = []\n    n_steps = array.shape[0] - window_in + 1\n    #print('n_steps', n_steps)\n    for step in range(n_steps):\n        if (step + window_in + window_out -1) > (len(y_series)):\n            break\n        X_w = []\n        for i in range(window_in):\n            X_w.append(array[i+step])\n            y_w = []\n            for j in range(window_out):\n                n = i + j + step\n                y_w.append(y_series[n])\n        X_w = np.array(X_w)\n        X.append(X_w)\n        y_w = np.array(y_w)\n        y.append(y_w)   \n    X = np.array(X)\n    y = np.array(y)\n    return X, y","9b3ce19c":"# test my_split_window\ndf = pd.DataFrame()\ndf['feature1'] = [10,20,30,40,50,60,70,80,90]\ndf['feature2'] = [15,25,35,45,55,65,75,85,95]\nseries         = [25,45,65,85,105,125,145,165,185]\nfeatures = ['feature1','feature2']\narray = np.array(df[features])\nwindow_in = 3\nwindow_out = 2\nX_, y_ = my_split_window(array ,series, window_in, window_out)\nX_, y_\n","e90d0648":"X_.shape, y_.shape","f6e99cbb":"X_train.columns","fd296388":"# apply my_split_window on daily solar power with a window of 365 days (we do not make account for leap years)\n\nwindow_in = 365\nwindow_out = 365\nfeatures = ['Elec_kW', 'Gas_mxm']\ny_series = X_train.day_power.values\nX, y = my_split_window(np.array(X_train[features]) , y_series ,  window_in, window_out)\nprint('X.shape', X.shape, 'y.shape', y.shape)\n# print a sample\nfor i in range(2):\n    print(X[i][-2:], y[i][-2:])","9ce61007":"# vector output model:\n# model for univariate series input and prediction of  timestep vector\n# we have an input shape = (number of windows, window_in) \n#  and we have a window size of one year (365 days)\n# the output vector is of shape(number of window_out)\nwindow_in = 365\nwindow_out = 365\nn_features = 2\n# define model\ndef multi_step_output_model(window_in, window_out, n_features):\n    model = tf.keras.Sequential()\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tf.keras.layers.Conv1D(filters=32, kernel_size=2, activation='relu', \n                                 input_shape=(window_in, n_features)))\n    model.add(tf.keras.layers.MaxPooling1D(pool_size=2))\n    model.add(tf.keras.layers.Flatten())\n    model.add(tf.keras.layers.BatchNormalization())    \n    model.add(tf.keras.layers.Dense(50, activation='relu'))\n    model.add(tf.keras.layers.Dropout(0.2))\n    model.add(tf.keras.layers.Dense(window_out))\n    return model\n\nmodel = multi_step_output_model(window_in, window_out, window_out)\n# compile the model:\nmodel.compile(optimizer='adam', loss='mae')\n\n# fit model\nhistory = model.fit(X, y, epochs=200, verbose=0)\n\n# graph of the loss shows convergence\nimport matplotlib.pyplot as plt\nplt.plot(history.history['loss'])\nplt.title('loss')\nplt.xlabel('epochs')\nplt.show()","00400b76":"# predicting next year on X_train last year \n# the model expects an input of shape(1, window_in, n_features  )\nX_input = np.array(X_train[features][-365:].values)\nX_input = X_input.reshape(1, window_in, n_features)\n\ny_hat = model.predict(X_input, verbose=0)","77ac5ffe":"y_hat.shape","4c6be6e2":"\nplt.plot(y_hat[0], label='predicted_power')\n\ny_true = X_valid.day_power.values\nplt.plot(y_true, label='true_power')\nplt.legend()\nplt.show()","0a42d8f8":"first_r2_score = r2_score(y_true, y_hat[0]) # Best possible score is 1.0 \nfirst_mae = mean_absolute_error(y_true, y_hat[0])\nprint('r2_score %.5f' % first_r2_score)\nprint('mae %.2f' % first_mae)","52f2700b":"# 100 epochs : 0.42520212661926315","ddea7eaa":"def cumulate(series, start=0):\n    '''\n    start is the starting cumulative power, the series is the daily solar power\n    a list with daily cumulative power is the result\n    '''\n    cum = [start]\n    for i in range(len(series)):\n        sum_plus = cum[i] + series[i]\n        cum.append(sum_plus)\n    return cum","c8e13c98":"y_true_cumulative = cumulate(y_true)\ny_predicted_cumulative = cumulate(y_hat[0])\n\nplt.plot(y_predicted_cumulative, label='predicted_power')\nplt.plot(y_true_cumulative, label='true_power')\nplt.legend()\nplt.show()","570331d9":"true_cumulative_power_after_one_year = int(y_true_cumulative[-1])\npredicted_cumulative_power_after_one_year = int(y_predicted_cumulative[-1])\nprint('true cumulative power after one year:', true_cumulative_power_after_one_year)\nprint('predicted cumulative power after one year:', predicted_cumulative_power_after_one_year)\n\nacc_one_year = 1- (true_cumulative_power_after_one_year - predicted_cumulative_power_after_one_year)\/true_cumulative_power_after_one_year\nacc_one_year = acc_one_year * 100\n\nprint('accuracy after one year: %.2f' %  acc_one_year,'%')\nprint('r2 score %.2f ' % r2_score(y_true_cumulative, y_predicted_cumulative))\nprint('mae  %.2f' % mean_absolute_error(y_true_cumulative, y_predicted_cumulative))","e39dacf5":"# fit model\nhistory = model.fit(X, y, epochs=400, verbose=0)\n\n# graph of the loss shows convergence\nimport matplotlib.pyplot as plt\nplt.plot(history.history['loss'])\nplt.title('loss')\nplt.xlabel('epochs')\nplt.show()","4eaa5cf0":"# predicting next year\n# the model expects an input of shape(1, window_in, n_features  )\nX_input = np.array(X_valid[features].values)\nX_input = X_input.reshape(1, window_in, n_features)\n\ny_hat = model.predict(X_input, verbose=0)","3894ef4d":"\nplt.plot(y_hat[0], label='predicted_power')\n\ny_true = X_valid.day_power.values\nplt.plot(y_true, label='true_power')\nplt.legend()\nplt.show()","ae8c1040":"first_r2_score = r2_score(y_true, y_hat[0]) # Best possible score is 1.0 \nfirst_mae = mean_absolute_error(y_true, y_hat[0])\nprint('r2_score %.5f' % first_r2_score)\nprint('mae %.2f' % first_mae)","9ca17de2":"y_true_cumulative = cumulate(y_true)\ny_predicted_cumulative = cumulate(y_hat[0])\n\nplt.plot(y_predicted_cumulative, label='predicted_power')\nplt.plot(y_true_cumulative, label='true_power')\nplt.legend()\nplt.show()","80ac7fa1":"true_cumulative_power_after_one_year = int(y_true_cumulative[-1])\npredicted_cumulative_power_after_one_year = int(y_predicted_cumulative[-1])\nprint('true cumulative power after one year:', true_cumulative_power_after_one_year)\nprint('predicted cumulative power after one year:', predicted_cumulative_power_after_one_year)\n\nacc_one_year = 1- (true_cumulative_power_after_one_year - predicted_cumulative_power_after_one_year)\/true_cumulative_power_after_one_year\nacc_one_year = acc_one_year * 100\n\nprint('accuracy after one year: %.2f' %  acc_one_year,'%')\nprint('r2 score %.5f ' % r2_score(y_true_cumulative, y_predicted_cumulative))\nprint('mae  %.2f' % mean_absolute_error(y_true_cumulative, y_predicted_cumulative))","48856ca0":"predicted_data['107_3f_CNN_univariate_multi_ouput_600epochs'] = y_hat[0,:]\npredicted_data.to_hdf('predicted_data.hdf5',key='predicted_data', table='true',mode='a')","2ab3278a":"# adding a feature with simple feature engineering","6d164998":"X_train = X_train.copy()\nX_valid = X_valid.copy()\nX_train['Gas_plus_Elek'] = X_train.Gas_mxm + X_train.Elec_kW\nX_valid['Gas_plus_Elek'] = X_valid.Gas_mxm + X_valid.Elec_kW","2ccfd986":"# apply my_split_window on dayly solar power with a window of 365 days (we do not make account for leap years)\n# the input series is the daily solar power\n# apply my_split_window on daily solar power with a window of 365 days (we do not make account for leap years)\n\nwindow_in = 365\nwindow_out = 365\nfeatures = ['Elec_kW', 'Gas_mxm', 'Gas_plus_Elek']\ny_series = X_train.day_power.values\nX, y = my_split_window(np.array(X_train[features]) , y_series ,  window_in, window_out)\nprint('X.shape', X.shape, 'y.shape', y.shape)\n# print a sample\nfor i in range(2):\n    print(X[i][-2:], y[i][-2:])","c9ed9049":"# vector output model:\n# model for univariate series input and prediction of  timestep vector\n# we have an input shape = (number of windows, window_in) \n#  and we have a window size of one year (365 days)\n# the output vector is of shape(number of window_out)\nwindow_in = 365\nwindow_out = 365\nn_features = 3\n# define model\n\nmodel = multi_step_output_model(window_in, window_out, window_out)\n# compile the model:\nmodel.compile(optimizer='adam', loss='mae')\n\n# fit model\nhistory = model.fit(X, y, epochs=600, verbose=0)\n\n# graph of the loss shows convergence\nimport matplotlib.pyplot as plt\nplt.plot(history.history['loss'])\nplt.title('loss')\nplt.xlabel('epochs')\nplt.show()","95919fd5":"# plot the prediction and validation\nplt.plot(y_hat[0], label='predicted_power')\n\ny_true = X_valid.day_power.values\nplt.plot(y_true, label='true_power')\nplt.legend()\nplt.show()","7fe200e4":"first_r2_score = r2_score(y_true, y_hat[0]) # Best possible score is 1.0 \nfirst_mae = mean_absolute_error(y_true, y_hat[0])\nprint('r2_score %.5f' % first_r2_score)\nprint('mae %.2f' % first_mae)","fb0e4936":"y_true_cumulative = cumulate(y_true)\ny_predicted_cumulative = cumulate(y_hat[0])\n\nplt.plot(y_predicted_cumulative, label='predicted_power')\nplt.plot(y_true_cumulative, label='true_power')\nplt.legend()\nplt.show()","34f31afd":"true_cumulative_power_after_one_year = int(y_true_cumulative[-1])\npredicted_cumulative_power_after_one_year = int(y_predicted_cumulative[-1])\nprint('true cumulative power after one year:', true_cumulative_power_after_one_year)\nprint('predicted cumulative power after one year:', predicted_cumulative_power_after_one_year)\n\nacc_one_year = 1- (true_cumulative_power_after_one_year - predicted_cumulative_power_after_one_year)\/true_cumulative_power_after_one_year\nacc_one_year = acc_one_year * 100\n\nprint('accuracy after one year: %.2f' %  acc_one_year,'%')\nprint('r2 score %.5f ' % r2_score(y_true_cumulative, y_predicted_cumulative))\nprint('mae  %.2f' % mean_absolute_error(y_true_cumulative, y_predicted_cumulative))","e30e13dc":"predicted_data['107_4f_CNN_univariate_multi_ouput_600epochs'] = y_hat[0,:]\npredicted_data.to_hdf('predicted_data7.hdf5',key='predicted_data', table='true',mode='a')","7fac58d7":"The error increases after 4 months","7bdea128":"# but the cumulative power is actually much more intersting.#\n# It tels us what the the total expected solar power of that year will be. #","cc192751":"This notbook uses :  \ntf version: 2.0.0-beta1 ;\n keras version: 2.2.4 ; \n numpy version: 1.16.4 ","7e6d5921":"test 107 : test prediction solarpower with *multivariate multiple input multi-step output cnn* \n","7806654c":"Results end of 106\n\ntrue cumulative power after one year: 4015  \npredicted cumulative power after one year: 4273  \naccuracy after one year: 106.43 %  \nr2 score 0.99  \nmae  102.80  ","d2f18909":"These notebooks are based on the excellent articly by Jason Brownlee:\nHow to Develop Convolutional Neural Network Models for Time Series Forecasting.  \nhttps:\/\/machinelearningmastery.com\/how-to-develop-convolutional-neural-network-models-for-time-series-forecasting\/","ab15d65d":"We want to use a one-dimensional Convolutional Neural Network (1D CNN). Just like in a CNN for images,  \na 1D CNN extracts features. It is very usefull in timeseries. More info is on the links:  \nhttps:\/\/missinglink.ai\/guides\/keras\/keras-conv1d-working-1d-convolutional-neural-networks-keras\/  \nhttps:\/\/machinelearningmastery.com\/cnn-models-for-human-activity-recognition-time-series-classification\/  \n","1d640b0d":"# train more","ea0c3e12":"r2_score 0.64180  \nmae 3.74"}}