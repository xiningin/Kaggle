{"cell_type":{"ec68eaff":"code","96205ca3":"code","1a651cde":"code","7552d325":"code","7fe89915":"code","074d3cb0":"code","a310b5c4":"code","e87b5cba":"code","adb4fe1d":"code","f82ad2a2":"code","9f2d8f78":"code","4f81b719":"code","0581c7a6":"code","47bf95c7":"code","2b78a06e":"code","78e71159":"code","774017b3":"code","004808eb":"code","563595b5":"code","b96f8d2d":"code","79b76a83":"code","43d018a4":"code","b3f01d28":"code","b1fd347d":"code","9b8fb76e":"code","23255795":"code","95cf6462":"code","b0c3de1c":"code","229fc204":"code","0072614b":"code","7158408d":"code","2a5cd7f0":"code","a7c8796f":"code","79775917":"code","94a92a04":"code","c2de282e":"code","3bef64c3":"code","a4e367f3":"code","b5bedf9e":"code","f794845b":"code","b7f02e79":"code","a0a5d89a":"code","74bab184":"code","e1883ac7":"code","3105a36e":"code","f0e0060e":"code","d8293a26":"code","42b7be73":"code","4d3c9419":"code","e1f528cb":"code","3327f967":"code","794ee3c0":"code","12cae592":"markdown","feae1118":"markdown","97e5684a":"markdown","ba197b32":"markdown","b9598153":"markdown","429f1225":"markdown","45bd44d2":"markdown","10e033c5":"markdown","b0dc5bae":"markdown","eb9ffd96":"markdown","4bb9bd96":"markdown","d62e7f4f":"markdown","17914378":"markdown","a898863f":"markdown","785702b7":"markdown","49736b7b":"markdown","91f2ad7d":"markdown","f99780e8":"markdown","b2747e21":"markdown","dc3fd764":"markdown","89affcd9":"markdown","8fefba1a":"markdown","5910080c":"markdown","655c51e8":"markdown","d110a95a":"markdown"},"source":{"ec68eaff":"import plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\nfrom colorama import Fore\n\nfrom pandas_profiling import ProfileReport\nimport seaborn as sns\nfrom sklearn import metrics\nfrom scipy import stats\nimport math\n\nfrom tqdm.notebook import tqdm\nfrom copy import deepcopy\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nimport lightgbm as lgb\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nimport optuna\nfrom optuna import Trial, visualization\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score,confusion_matrix\nfrom sklearn.metrics import accuracy_score, mean_squared_error","96205ca3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1a651cde":"train_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv')\nsub_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')\n\ntrain_df.head()","7552d325":"feature_cols = train_df.drop(['id', 'target'], axis=1).columns\n\n## Getting all the data that are not of \"object\" type. \nnumerical_columns = train_df[feature_cols].select_dtypes(include=['int64','float64']).columns\ncategorical_columns = train_df[feature_cols].select_dtypes(exclude=['int64','float64']).columns","7fe89915":"## Join train and test datasets in order to obtain the same number of features during categorical conversion\ntrain_indexs = train_df.index\ntest_indexs = test_df.index\n\ndf =  pd.concat(objs=[train_df, test_df], axis=0).reset_index(drop=True)\ndf = df.drop('id', axis=1)","074d3cb0":"df.info()","a310b5c4":"f, axes = plt.subplots(nrows=3, ncols=1, figsize=(12, 12))\n\nf.suptitle('Target', fontsize=16)\ng = sns.kdeplot(train_df['target'], shade=True, label=\"%.2f\"%(train_df['target'].skew()), ax=axes[0])\ng = g.legend(loc=\"best\")\nstats.probplot(train_df['target'], plot=axes[1])\nsns.boxplot(x='target', data=train_df, orient='h', ax=axes[2]);\n\nplt.tight_layout()\nplt.show()","e87b5cba":"num_rows, num_cols = 4,4\nf, axes = plt.subplots(nrows=num_rows, ncols=num_cols, figsize=(12, 12))\nf.suptitle('Distribution of Features', fontsize=16)\n\nfor index, column in enumerate(df[numerical_columns].columns):\n    i,j = (index \/\/ num_cols, index % num_cols)\n    g = sns.kdeplot(train_df[column], color=\"m\", shade=True, label=\"%.2f\"%(train_df[column].skew()), ax=axes[i,j])\n    g = g.legend(loc=\"best\")\n\nf.delaxes(axes[3, 2])\nf.delaxes(axes[3, 3])\nplt.tight_layout()\nplt.show()","adb4fe1d":"corr = df[numerical_columns].corr().abs()\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n\nfig, ax = plt.subplots(figsize=(14, 14))\n\n# plot heatmap\nsns.heatmap(corr, mask=mask, annot=True, fmt=\".2f\", cmap='coolwarm',\n            cbar_kws={\"shrink\": .8}, vmin=0, vmax=1)\n# yticks\nplt.yticks(rotation=0)\nplt.show()","f82ad2a2":"num_rows, num_cols = 3,4\nf, axes = plt.subplots(nrows=num_rows, ncols=num_cols, figsize=(12, 12))\n#f.suptitle('Distribution of Features', fontsize=16)\n\nfor index, column in enumerate(df[categorical_columns].columns):\n    i,j = (index \/\/ num_cols, index % num_cols)\n    sns.histplot(x=column, data=df, ax=axes[i,j])\n\nf.delaxes(axes[2, 2])\nf.delaxes(axes[2, 3])\nplt.tight_layout()\nplt.show()","9f2d8f78":"def modify_df(df):\n    df['cat4'] = df['cat4'].apply(lambda x: x if x == 'B' else 'Z')\n    df['cat5'] = df['cat5'].apply(lambda x: x if x in ['B', 'D'] else 'Z')\n    df['cat6'] = df['cat6'].apply(lambda x: x if x == 'A' else 'Z')\n    df['cat7'] = df['cat7'].apply(lambda x: x if x in ['E', 'D'] else 'Z')\n    df['cat8'] = df['cat8'].apply(lambda x: x if x in ['E', 'C', 'G', 'A'] else 'Z')\n    \n    df['cont001'] = df['cont8'] * df['cont0']\n    df['cont002'] = df['cont9'] * df['cont0']\n    df['cont003'] = df['cont9'] * df['cont5']\n    df['cont004'] = df['cont8'] * df['cont5']\n    df['cont005'] = df['cont2'] * df['cont4']\n    df['cont006'] = df['cont1'] * df['cont3']\n    df['cont007'] = df['cont13'] * df['cont1']\n\n    return df\n\nmod_train_df = modify_df(train_df.copy())\nmod_test_df = modify_df(test_df.copy())","4f81b719":"for feature in categorical_columns:\n    le = LabelEncoder()\n    le.fit(train_df[feature])\n    train_df[feature] = le.transform(train_df[feature])\n    test_df[feature] = le.transform(test_df[feature])\n\nfor feature in categorical_columns:\n    le = LabelEncoder()\n    le.fit(mod_train_df[feature])\n    mod_train_df[feature] = le.transform(mod_train_df[feature])\n    mod_test_df[feature] = le.transform(mod_test_df[feature])","0581c7a6":"x = train_df[feature_cols]\ny = train_df['target']\n\nfeature_cols_mod = mod_train_df.drop(['id', 'target'], axis=1).columns\nxmod, ymod = mod_train_df[feature_cols_mod], mod_train_df['target']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)","47bf95c7":"# Instantiate model with 100 decision trees\nclf = XGBRegressor(random_state=42, tree_method='gpu_hist')\n\nclf.fit(x_train, y_train)","2b78a06e":"# Use the forest's predict method on the test data\npredictions = clf.predict(x_test)\n\nscore_rmse = math.sqrt(mean_squared_error(y_test, predictions))\nprint(Fore.GREEN + 'Base XGBoost RMSE: {}'.format(score_rmse))","78e71159":"sub_xgb_base = clf.predict(test_df[feature_cols])","774017b3":"# Instantiate model with 100 decision trees\nclf = LGBMRegressor(random_state=42, device='gpu')\n\nclf.fit(x_train, y_train)","004808eb":"# Use the forest's predict method on the test data\npredictions = clf.predict(x_test)\n\nscore_rmse = math.sqrt(mean_squared_error(y_test, predictions))\nprint(Fore.GREEN + 'Base LGBM RMSE: {}'.format(score_rmse))","563595b5":"train_oof = np.zeros((300000,))\ntest_preds = 0\ntrain_oof.shape","b96f8d2d":"NUM_FOLDS = 5\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=0)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(x, y))):\n        tmp_train_df, tmp_val_df = x.iloc[train_ind][feature_cols], x.iloc[val_ind][feature_cols]\n        train_target, val_target = y[train_ind], y[val_ind]\n        \n        model = LGBMRegressor(random_state=42, device='gpu')\n        model.fit(tmp_train_df, train_target, eval_set=[(tmp_val_df, val_target)], verbose=False)\n        temp_oof = model.predict(tmp_val_df)\n        temp_test = model.predict(test_df[feature_cols])\n\n        train_oof[val_ind] = temp_oof\n        test_preds += temp_test\/NUM_FOLDS\n        \n        print(mean_squared_error(temp_oof, val_target, squared=False))","79b76a83":"sub_df['target'] = test_preds\nsub_df.to_csv('submission_lgbm_cv.csv', index=False)\nsub_df.head()\n\nsub_lgbm_cv = test_preds","43d018a4":"xgb_params = {\n    'booster':'gbtree',\n    'n_estimators':20000,\n    'max_depth':5, \n    'eta':0.008,\n    'gamma':3.5,\n    'objective':'reg:squarederror',\n    'verbosity':0,\n    'subsample':0.75,\n    'colsample_bytree':0.35,\n    'reg_lambda':0.23,\n    'reg_alpha':0.52,\n    'scale_pos_weight':1,\n    'objective':'reg:squarederror',\n    'eval_metric':'rmse',\n    'seed': 42,\n    'tree_method':'gpu_hist',\n    'gpu_id':0\n}","b3f01d28":"train_oof = np.zeros((300000,))\ntest_preds = 0\ntrain_oof.shape\n\nNUM_FOLDS = 5\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=42)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(x, y))):\n        tmp_train_df, tmp_val_df = x.iloc[train_ind][feature_cols], x.iloc[val_ind][feature_cols]\n        train_target, val_target = y[train_ind], y[val_ind]\n        \n        model = XGBRegressor(**xgb_params)\n        model.fit(\n            tmp_train_df, \n            train_target, \n            eval_set=[(tmp_val_df, val_target)], \n            early_stopping_rounds = 50, \n            verbose = False\n        )\n        \n        temp_oof = model.predict(tmp_val_df)\n        temp_test = model.predict(test_df[feature_cols])\n\n        train_oof[val_ind] = temp_oof\n        test_preds += temp_test\/NUM_FOLDS\n        \n        print(mean_squared_error(temp_oof, val_target, squared=False))","b1fd347d":"sub_df['target'] = test_preds\nsub_df.to_csv('submission_xgb_cv_optimized.csv', index=False)\nsub_df.head()\n\nsub_xgb_cv_optimized = test_preds","9b8fb76e":"xgb_params = {\n    'booster':'gbtree',\n    'n_estimators':10000,\n    'max_depth':7, \n    'eta':0.01,\n    'gamma':1.8,\n    'objective':'reg:squarederror',\n    'verbosity':0,\n    'subsample':0.85,\n    'colsample_bytree':0.4,\n    'lambda':2.7,\n    'alpha':6,\n    'scale_pos_weight':1,\n    'objective':'reg:squarederror',\n    'eval_metric':'rmse',\n    'seed': 42,\n    'tree_method':'gpu_hist',\n    'gpu_id':0\n}","23255795":"train_oof = np.zeros((300000,))\ntest_preds = 0\ntrain_oof.shape\n\nNUM_FOLDS = 5\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=42)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(xmod, ymod))):\n        tmp_train_df, tmp_val_df = xmod.iloc[train_ind][feature_cols_mod], xmod.iloc[val_ind][feature_cols_mod]\n        train_target, val_target = ymod[train_ind], ymod[val_ind]\n        \n        model = XGBRegressor(**xgb_params)\n        model.fit(\n            tmp_train_df, \n            train_target, \n            eval_set=[(tmp_val_df, val_target)], \n            early_stopping_rounds = 50, \n            verbose = False\n        )\n        \n        temp_oof = model.predict(tmp_val_df)\n        temp_test = model.predict(mod_test_df[feature_cols_mod])\n\n        train_oof[val_ind] = temp_oof\n        test_preds += temp_test\/NUM_FOLDS\n        \n        print(mean_squared_error(temp_oof, val_target, squared=False))","95cf6462":"sub_df['target'] = test_preds\nsub_df.to_csv('submission_xgb_mod_cv_optimized.csv', index=False)\nsub_df.head()\n\nsub_xgb_mod_cv_optimized = test_preds","b0c3de1c":"def objective(trial,data=x,target=y):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.15,random_state=42)\n    \n    # To select which parameters to optimize, please look at the XGBoost documentation:\n    # https:\/\/xgboost.readthedocs.io\/en\/latest\/parameter.html\n    param = {\n        'device':'gpu',  # Use GPU acceleration\n        'metric': 'rmse',\n        'random_state': 42,\n        'reg_lambda': trial.suggest_loguniform(\n            'reg_lambda', 1e-3, 10.0\n        ),\n        'reg_alpha': trial.suggest_loguniform(\n            'reg_alpha', 1e-3, 10.0\n        ),\n        'colsample_bytree': trial.suggest_categorical(\n            'colsample_bytree', [0.3,0.5,0.6,0.7,0.8,0.9,1.0]\n        ),\n        'subsample': trial.suggest_categorical(\n            'subsample', [0.6,0.7,0.8,1.0]\n        ),\n        'learning_rate': trial.suggest_categorical(\n            'learning_rate', [0.008,0.009,0.01,0.012,0.014,0.016,0.018, 0.02]\n        ),\n        'n_estimators': trial.suggest_categorical(\n            \"n_estimators\", [150, 200, 300, 3000]\n        ),\n        'max_depth': trial.suggest_categorical(\n            'max_depth', [4,5,7,9,11,13,15,17,20]\n        ),\n        'min_child_samples': trial.suggest_int(\n            'min_child_samples', 1, 300\n        ),\n        'num_leaves': trial.suggest_int(\n            'num_leaves', 15, 120\n        ),\n    }\n    model = LGBMRegressor(**param)  \n    \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)], early_stopping_rounds=300, verbose=False)\n    \n    preds = model.predict(test_x)\n    \n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","229fc204":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=5)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","0072614b":"study.trials_dataframe().head()","7158408d":"# plot_optimization_histor: shows the scores from all trials as well as the best score so far at each point.\noptuna.visualization.plot_optimization_history(study)","2a5cd7f0":"# plot feature importance for algorithm parameters\nvisualization.plot_param_importances(study)","a7c8796f":"#Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","79775917":"# finally plot best parameters\nstudy.best_params","94a92a04":"best_params = {\n    'reg_lambda': 0.015979956459638782,\n    'reg_alpha': 9.103977313355028,\n    'colsample_bytree': 0.3,\n    'subsample': 1.0,\n    'learning_rate': 0.009,\n    'n_estimators': 3000,\n    'max_depth': 15,\n    'min_child_samples': 142,\n    'num_leaves': 84,\n    'random_state': 42, \n    'device': 'gpu',\n}\n\n# Instantiate model with 100 decision trees\nclf = LGBMRegressor(**best_params)\n\nclf.fit(x_train, y_train)\n\n# Use the forest's predict method on the test data\npredictions = clf.predict(x_test)\n\nscore_rmse = math.sqrt(mean_squared_error(y_test, predictions))\nprint(Fore.GREEN + 'Base LGBM RMSE: {}'.format(score_rmse))","c2de282e":"sub_preds = clf.predict(test_df[feature_cols])\n\nsub_df['target'] = sub_preds\nsub_df.to_csv('submission_lgbm_optuna.csv', index=False)\nsub_df.head()\n\nsub_lgbm_optuna = sub_preds","3bef64c3":"lgbm_params = {\n    \"random_state\": 2021,\n    \"metric\": \"rmse\",\n    \"n_jobs\": -1,\n    \"cat_feature\": [x for x in range(len(categorical_columns))],\n    \"early_stopping_round\": 150,\n    \"reg_alpha\": 6.147694913504962,\n    \"reg_lambda\": 0.002457826062076097,\n    \"colsample_bytree\": 0.3,\n    \"learning_rate\": 0.01,\n    \"max_depth\": 30,\n    \"num_leaves\": 100,\n    \"min_child_samples\": 275,\n    \"n_estimators\": 30000,\n    \"cat_smooth\": 40.0,\n    \"max_bin\": 512,\n    \"min_data_per_group\": 100,\n    \"bagging_freq\": 1,\n    \"bagging_fraction\": 0.7,\n    \"cat_l2\": 12.0,\n}","a4e367f3":"train_oof = np.zeros((300000,))\ntest_preds = 0\ntrain_oof.shape\n\nNUM_FOLDS = 5\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=42)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(x, y))):\n        tmp_train_df, tmp_val_df = x.iloc[train_ind][feature_cols], x.iloc[val_ind][feature_cols]\n        train_target, val_target = y[train_ind], y[val_ind]\n        \n        model = LGBMRegressor(**lgbm_params)\n        model.fit(\n            tmp_train_df, \n            train_target, \n            eval_set=[(tmp_val_df, val_target)],\n            early_stopping_rounds = 100,\n            verbose=False\n        )\n        \n        temp_oof = model.predict(tmp_val_df)\n        temp_test = model.predict(test_df[feature_cols])\n\n        train_oof[val_ind] = temp_oof\n        test_preds += temp_test\/NUM_FOLDS\n        \n        print(mean_squared_error(temp_oof, val_target, squared=False))","b5bedf9e":"sub_df['target'] = test_preds\nsub_df.to_csv('submission_lgbm_cv_optimized.csv', index=False)\nsub_df.head()\n\nsub_lgbm_cv_optimized = test_preds","f794845b":"train_oof = np.zeros((300000,))\ntest_preds = 0\ntrain_oof.shape\n\nNUM_FOLDS = 5\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=42)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(xmod, ymod))):\n        tmp_train_df, tmp_val_df = xmod.iloc[train_ind][feature_cols_mod], xmod.iloc[val_ind][feature_cols_mod]\n        train_target, val_target = ymod[train_ind], ymod[val_ind]\n        \n        model = LGBMRegressor(**lgbm_params)\n        model.fit(\n            tmp_train_df, \n            train_target, \n            eval_set=[(tmp_val_df, val_target)],\n            early_stopping_rounds = 100,\n            verbose=False\n        )\n        \n        temp_oof = model.predict(tmp_val_df)\n        temp_test = model.predict(mod_test_df[feature_cols_mod])\n\n        train_oof[val_ind] = temp_oof\n        test_preds += temp_test\/NUM_FOLDS\n        \n        print(mean_squared_error(temp_oof, val_target, squared=False))","b7f02e79":"sub_df['target'] = test_preds\nsub_df.to_csv('submission_lgbm_mod_cv_optimized.csv', index=False)\nsub_df.head()\n\nsub_lgbm_mod_cv_optimized = test_preds","a0a5d89a":"import h2o\nfrom h2o.automl import H2OAutoML\n\nh2o.init()","74bab184":"train_hf = h2o.H2OFrame(train_df)\ntest_hf = h2o.H2OFrame(test_df)\n\npredictors = list(feature_cols)\nresponse = 'target'\n\n# Split into train and test\ntrain, valid = train_hf.split_frame(ratios=[.8], seed=1234)","e1883ac7":"aml = H2OAutoML(\n    max_models=20,\n    max_runtime_secs=200,\n    exclude_algos = [\"DeepLearning\", \"DRF\"],\n    seed=42,\n)","3105a36e":"# Train the model\naml.train(x=predictors,\n        y=response,\n        training_frame=train,\n        validation_frame=valid\n)","f0e0060e":"# View the AutoML Leaderboard\nlb = aml.leaderboard\nlb.head(rows=lb.nrows)  # Print all rows instead of default (10 rows)","d8293a26":"lb = lb.as_data_frame()\nlb['model_type'] = lb['model_id'].apply(lambda x: x.split('_')[0])\nfig = px.bar(\n    lb, \n    x='model_id',\n    y='rmse',\n    color='model_type'\n)\nfig.show()","42b7be73":"print('The model performance in RMSE: {}'.format(aml.leader.rmse(valid=True)))\nprint('The model performance in MAE: {}'.format(aml.leader.mae(valid=True)))","4d3c9419":"preds = aml.predict(test_hf).as_data_frame()\npreds.head()","e1f528cb":"sub_df['target'] = preds['predict']\nsub_df.to_csv('submission_h2o.csv', index=False)\nsub_df.head()\n\nsub_automl = preds['predict']","3327f967":"sub1 = 0.3*sub_xgb_cv_optimized + 0.3*sub_lgbm_cv_optimized + 0.4*sub_lgbm_optuna\nsub2 = 0.4*sub_xgb_cv_optimized + 0.4*sub_lgbm_cv_optimized + 0.2*sub_lgbm_optuna\nsub3 = 0.3*sub_xgb_cv_optimized + 0.4*sub_lgbm_cv_optimized + 0.3*sub_lgbm_optuna\n\nsub4 = 0.3*sub_xgb_cv_optimized + 0.3*sub_lgbm_cv_optimized + 0.3*sub_lgbm_optuna + 0.1*sub_automl\nsub5 = 0.3*sub_xgb_cv_optimized + 0.3*sub_lgbm_cv_optimized + 0.2*sub_lgbm_optuna + 0.2*sub_automl\n\nsub6 = 0.5*sub_lgbm_mod_cv_optimized + 0.5*sub_xgb_mod_cv_optimized\nsub7 = 0.7*sub_lgbm_mod_cv_optimized + 0.3*sub_xgb_mod_cv_optimized\n\nsub8 = 0.2*sub_xgb_cv_optimized + 0.2*sub_lgbm_cv_optimized + 0.3*sub_lgbm_mod_cv_optimized + 0.3*sub_xgb_mod_cv_optimized\nsub9 = 0.1*sub_xgb_cv_optimized + 0.1*sub_lgbm_cv_optimized + 0.4*sub_lgbm_mod_cv_optimized + 0.4*sub_xgb_mod_cv_optimized\nsub10 = 0.1*sub_xgb_cv_optimized + 0.2*sub_lgbm_cv_optimized + 0.4*sub_lgbm_mod_cv_optimized + 0.3*sub_xgb_mod_cv_optimized\n\nsub11 = 0.5*sub_xgb_cv_optimized + 0.5*sub_lgbm_cv_optimized\nsub12 = 0.6*sub_xgb_cv_optimized + 0.4*sub_lgbm_cv_optimized\nsub13 = 0.4*sub_xgb_cv_optimized + 0.6*sub_lgbm_cv_optimized\n\nsub14 = 0.2*sub_xgb_cv_optimized + 0.7*sub_lgbm_cv_optimized + 0.1*sub_lgbm_mod_cv_optimized\nsub14 = 0.2*sub_xgb_cv_optimized + 0.7*sub_lgbm_cv_optimized + 0.1*sub_xgb_mod_cv_optimized","794ee3c0":"sub_df['target'] = sub1\nsub_df.to_csv('submission_01.csv', index=False)\n\nsub_df['target'] = sub2\nsub_df.to_csv('submission_02.csv', index=False)\n\nsub_df['target'] = sub3\nsub_df.to_csv('submission_03.csv', index=False)\n\nsub_df['target'] = sub4\nsub_df.to_csv('submission_04.csv', index=False)\n\nsub_df['target'] = sub5\nsub_df.to_csv('submission_05.csv', index=False)\n\nsub_df['target'] = sub6\nsub_df.to_csv('submission_06.csv', index=False)\n\nsub_df['target'] = sub7\nsub_df.to_csv('submission_07.csv', index=False)\n\nsub_df['target'] = sub8\nsub_df.to_csv('submission_08.csv', index=False)\n\nsub_df['target'] = sub9\nsub_df.to_csv('submission_09.csv', index=False)\n\nsub_df['target'] = sub10\nsub_df.to_csv('submission_10.csv', index=False)\n\nsub_df['target'] = sub11\nsub_df.to_csv('submission_11.csv', index=False)\n\nsub_df['target'] = sub12\nsub_df.to_csv('submission_12.csv', index=False)\n\nsub_df['target'] = sub13\nsub_df.to_csv('submission_13.csv', index=False)\n\nsub_df['target'] = sub14\nsub_df.to_csv('submission_14.csv', index=False)","12cae592":"<a id='5'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center\">5. Optimized LGBM CrossValidated \ud83e\uddee<\/p>","feae1118":"### Some manual fixes","97e5684a":"<a id='1.3'><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center\">1.3 Categorical Variables<\/p>","ba197b32":"<a id='4.3'><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center\">4.3 Optuna Submission \ud83d\udcdd<\/p>","b9598153":"<a id='3.1'><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center\">3.1 Base XGBoost<\/p>","429f1225":"As we can see, there is no high correlation between variables","45bd44d2":"<a id='4'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center\">4. Optuna Optimization: LGBM \u2699\ufe0f<\/p>","10e033c5":"<a id='4.2'><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center\">4.2 Optimized LGBM \ud83d\udcdd<\/p>","b0dc5bae":"<a id='1'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center\">1. Data visualization \ud83d\udcca<\/p>","eb9ffd96":"<a id='1.1'><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center\">1.1 Target Variable<\/p>","4bb9bd96":"<a id='3.3'><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center\">3.2 Base LGBM Cross Validation<\/p>","d62e7f4f":"<a id='3.5'><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center\">3.5 Optimized XGBoost 2 Cross Validation<\/p>","17914378":"<a id='1.2'><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center\">1.2 Numerical Variables<\/p>","a898863f":"<a id='3'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center\">3. Base Model \u2699\ufe0f<\/p>","785702b7":"### Modified dataframe","49736b7b":"<a id='3.4'><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center\">3.4 Optimized XGBoost 1 Cross Validation<\/p>","91f2ad7d":"<a id='4.1'><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center\">4.1 Study visualization \ud83d\udcc8<\/p>","f99780e8":"<a id='2'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center\">2. Feature Engineering \ud83d\udd27<\/p>","b2747e21":"<a id='7'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center\">7. Final Submission<\/p>","dc3fd764":"## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center\">Table of Content<\/p>\n\n* [1. Data visualization \ud83d\udcca](#1)\n    * [1.1 Target](#1.1)\n    * [1.2 Numerical Columns](#1.2)\n    * [1.3 Categorical Columns](#1.3)\n* [2. Feature Engineering \ud83d\udd27](#2)\n* [3. Base Model \u2699\ufe0f](#3)\n    * [3.1 XGBoost](#3.1)\n    * [3.2 LGBM](#3.2)\n    * [3.3 LGBM: Cross-Validation](#3.3)\n* [4. Optuna Optimization: LGBM \u2699\ufe0f](#4)\n    * [4.1 Study Visualization \ud83d\udcc8](#4.1)\n    * [4.2 Optuna Submission \ud83d\udcdd](#4.2)\n* [5. H2O AutoML \ud83e\uddee](#5)\n    * [5.1 H2O AutoML Submission \ud83d\udcdd](#5.1)\n* [6. LGBM Optimized CrossValidatied](#6)\n* [7. Fianl Submission](#7)","89affcd9":"<a id='3.2'><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center\">3.2 Base LGBM<\/p>","8fefba1a":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:180%; text-align:center\">Tabular Playground Series \ud83d\udcda - Feb 2021 \ud83d\udcc8<\/p>\n\n![kaggle-python.png](attachment:kaggle-python.png)","5910080c":"<a id='6'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center\">6. H2O AutoML \ud83e\uddee<\/p>","655c51e8":"### Label Encoder\n![LabelEncoder.png](attachment:LabelEncoder.png)","d110a95a":"<a id='5.1'><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center\">5.1 H2O AutoML Submission \ud83d\udcdd<\/p>"}}