{"cell_type":{"fa30f98b":"code","2b5f071e":"code","d3a000fb":"code","a4dd7e35":"code","3b048f12":"code","cfb521ae":"code","00db3b11":"code","55930ae4":"code","b5acded3":"code","b0df0db0":"code","72dbdbe9":"code","0e503f44":"code","75b39d5e":"code","ba2c59dc":"code","1f5e5f8d":"code","1c23b36a":"code","efaac49b":"code","cfc3ac11":"code","685c6a27":"code","f43175aa":"code","bfb02638":"code","0df76e7b":"code","2c653c84":"code","f3792e38":"code","218d484e":"code","fc393b0e":"code","1a999f76":"code","bd39b7b9":"code","b2ec3ddc":"code","33263e70":"code","ff60c7d1":"code","16d78aab":"code","8a0bbc1a":"code","e6e6af42":"code","5f886979":"code","f8e61750":"code","88973f88":"code","cfd41231":"code","e4160403":"code","ee43aab0":"code","ed869895":"code","b0044112":"code","c0f5b65f":"code","14e37a57":"code","7ed68181":"code","ba3496c5":"markdown","b5c5b3d8":"markdown","3b12f7ec":"markdown","98efedb1":"markdown","fd2e845f":"markdown","882457ba":"markdown","e7a691e4":"markdown","01739728":"markdown","48c5fb62":"markdown","57b31a0d":"markdown","6f8e2e97":"markdown","5120164a":"markdown","e6ea1266":"markdown","d9dfe2a9":"markdown","747784e6":"markdown","9721718f":"markdown","2433c55e":"markdown","e5a4faa7":"markdown","f47c827c":"markdown","72edff34":"markdown","7d8f9c4c":"markdown","fb8326b3":"markdown","e8cd9388":"markdown","9cf6f5c6":"markdown","9a0fbbfb":"markdown","df8ccc2a":"markdown","03ec4b4c":"markdown","1045d118":"markdown","40c458e0":"markdown","002542b1":"markdown","b644014b":"markdown","5c6f779b":"markdown","81d79120":"markdown","f773024b":"markdown","9631d25e":"markdown","3ffb1df2":"markdown","2648b4d7":"markdown","24795a20":"markdown"},"source":{"fa30f98b":"import pandas as pd #data preprocessing\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = (10, 10)\nimport seaborn as sns\nplt.style.use(\"fivethirtyeight\")\n%matplotlib inline\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport os\nos.listdir('..\/input')","2b5f071e":"df = pd.read_csv(\"..\/input\/train.csv\")\ndf.sample(2)","d3a000fb":"df.info()","a4dd7e35":"null_sum = pd.DataFrame(df.isnull().sum(), columns=['Sum'])\nnull_percent = pd.DataFrame((df.isnull().sum()\/df.shape[0])*100, columns=['Percent'])\ntotal = pd.concat([null_sum, null_percent], axis=1)\ntotal.sort_values(['Sum', 'Percent'], ascending=False)","3b048f12":"df.drop('Cabin', axis=1, inplace=True)\ndf[\"Age\"] = df[\"Age\"].fillna(value=df.Age.mean())","cfb521ae":"def pie_plot(cnts, colors, title):\n    labels = cnts.index\n    values = cnts.values\n    \n    trace = go.Pie(labels=labels,\n                   values=values,\n                   title=title,\n                   textinfo='value',\n                   hoverinfo='label+percent',\n                   hole=.4,\n                   textposition='inside',\n                   marker=dict(colors=colors,\n                               line=dict(color='#000000', width=2)\n                              )\n                  )\n    layout = go.Layout(hovermode='closest')\n    fig = go.Figure(data=[trace], layout=layout)\n    return py.iplot(fig)","00db3b11":"pie_plot(df['Embarked'].value_counts(), colors=['yellow','orange', 'cyan'], title='Embarked')","55930ae4":"df[\"Embarked\"] = df[\"Embarked\"].fillna(\"S\")","b5acded3":"pie_plot(df['Survived'].value_counts(), colors=['gold','cyan'], title='Survived?')","b0df0db0":"plt.figure(figsize=(10,10))\nplt.style.use('ggplot')\nsns.countplot(df['Survived'], hue=df['Sex'], palette='plasma')\nplt.title(\"Survived vs Sex\")\nplt.show()","72dbdbe9":"plt.figure(figsize=(10,10))\nsns.countplot(x='Survived', hue='Pclass', data=df, palette='inferno')\nplt.title('Survived vs Pclass')\nplt.show()","0e503f44":"df[\"Title\"] = df[\"Name\"].str.extract(\"([A-Za-z]+)\\.\", expand=False)\ndf[\"Title\"].unique()","75b39d5e":"df[\"Title\"] = df[\"Title\"].replace([\"Don\", \"Rev\", \"Dr\", \"Major\", \"Lady\", \n                                         \"Sir\", \"Col\", \"Capt\", \"Countess\", \"Jonkheer\"], \"Rare\")\n\ndf[\"Title\"] = df[\"Title\"].replace(\"Mlle\", \"Mrs\")\ndf[\"Title\"] = df[\"Title\"].replace(\"Ms\", \"Miss\")\ndf[\"Title\"] = df[\"Title\"].replace(\"Mme\", \"Mrs\")\n\ndf[[\"Title\", \"Survived\"]].groupby(\"Title\", as_index=False).mean()","ba2c59dc":"df[\"Sex\"] = df[\"Sex\"].map({\"male\": 1, \"female\":0})","1f5e5f8d":"df[\"Fareband\"] = pd.qcut(df[\"Fare\"], 4)\ndf[[\"Fareband\", \"Survived\"]].groupby(\"Fareband\", as_index=False).mean().sort_values(by=\"Fareband\", ascending=True)","1c23b36a":"df.loc[df[\"Fare\"] <= 7.91, \"Fare\"] = 0\ndf.loc[(df[\"Fare\"] > 7.91) & (df[\"Fare\"] <= 14.454), \"Fare\"] = 1\ndf.loc[(df[\"Fare\"] > 14.454) & (df[\"Fare\"] <= 31.0), \"Fare\"] = 2\ndf.loc[df[\"Fare\"] > 31.0, \"Fare\"] = 3\ndf[\"Fare\"] = df[\"Fare\"].astype(\"int\")","efaac49b":"df[\"Ageband\"] = pd.cut(df[\"Age\"], 4)\ndf[[\"Ageband\", \"Survived\"]].groupby(\"Ageband\", as_index=False).mean().sort_values(by=\"Ageband\", ascending=True)","cfc3ac11":"df.loc[df[\"Age\"] <= 20.315, \"Age\"] = 0\ndf.loc[(df[\"Age\"] > 20.315) & (df[\"Age\"] <= 40.21), \"Age\"] = 1\ndf.loc[(df[\"Age\"] > 40.21) & (df[\"Age\"] <= 60.105), \"Age\"] = 2\ndf.loc[(df[\"Age\"] > 60.105) & (df[\"Age\"] <= 80.0), \"Age\"] = 3\ndf[\"Age\"] = df[\"Age\"].astype(\"int\")","685c6a27":"df[\"isAlone\"] = df[\"SibSp\"] + df[\"Parch\"] + 1\ndf[\"isAlone\"].loc[df[\"isAlone\"] > 1] = 0\ndf[\"isAlone\"].loc[df[\"isAlone\"] == 1] = 1","f43175aa":"df['Survived'].value_counts()","bfb02638":"plt.figure(figsize=(10,10))\nsns.countplot(df['Survived'], palette='Set1');","0df76e7b":"df.drop(['PassengerId', 'Ageband', 'Fareband', 'Name', 'Ticket'], axis=1, inplace=True)","2c653c84":"objects = df.select_dtypes(include=['object'])\nobjects = pd.get_dummies(objects, drop_first=True)\ndf.drop(df.select_dtypes(include=['object']), axis=1, inplace=True)\ndf = pd.concat([df, objects], axis=1)\ndf.head()","f3792e38":"X = df.drop('Survived', axis=1)\ny = df[\"Survived\"]","218d484e":"from sklearn import metrics\nimport eli5\nfrom sklearn.model_selection import  train_test_split\nfrom sklearn.utils import resample\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier","fc393b0e":"df_train, df_test, Y_train, Y_test = train_test_split(X, y , test_size=0.2, random_state=42)","1a999f76":"\nX = pd.concat([df_train, Y_train], axis=1)\n\nnot_survived = X[X.Survived==0]\nsurvived = X[X.Survived==1]\n\nover_sampled = resample(survived, \n                        replace=True, # Samples with replacement\n                        n_samples=len(not_survived), # Number of samples\n                        random_state=27)\n\nover_sampled = pd.concat([not_survived, over_sampled])\n\nover_sampled.Survived.value_counts()","bd39b7b9":"plt.figure(figsize=(8,8))\nsns.countplot(over_sampled['Survived'], palette='Set2');","b2ec3ddc":"under_sampled = resample(not_survived,\n                         replace=False, # sample without replacement\n                         n_samples=len(survived), # Number of Samples\n                         random_state=27\n                        )\nunder_sampled = pd.concat([survived, under_sampled])\n\nunder_sampled.Survived.value_counts()","33263e70":"plt.figure(figsize=(8,8))\nsns.countplot(under_sampled['Survived'], palette='Set1');","ff60c7d1":"X = df.drop('Survived', axis=1)\ny = df[\"Survived\"]\n\nsmote = SMOTE(ratio='minority')\nX_sm, y_sm = smote.fit_sample(X, y)","16d78aab":"x_train, x_test, y_train, y_test = train_test_split(X_sm, y_sm , test_size=0.2, random_state=42)","8a0bbc1a":"\nx_test = df_test\ny_test = Y_test","e6e6af42":"rf = RandomForestClassifier(random_state = 2, criterion = 'gini', max_depth = 7, n_estimators = 100)\nrf.fit(x_train, y_train)\npredictions = rf.predict(x_test)","5f886979":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, predictions) * 100","f8e61750":"treecl = DecisionTreeClassifier(max_depth= 3)\ntreecl .fit(x_train , y_train)\npredictions_treecl = treecl.predict(x_test)","88973f88":"accuracy_score(y_test, predictions_treecl) * 100","cfd41231":"ex_tre_cl = ExtraTreesClassifier(n_estimators= 120, max_depth= 6)\nex_tre_cl.fit(x_train , y_train )\npredictions_ex_tre_cl = ex_tre_cl.predict(x_test)","e4160403":"accuracy_score(y_test, predictions_ex_tre_cl) * 100","ee43aab0":"from catboost import CatBoostClassifier\n","ed869895":"params= {'depth': 4,\n  'l2_leaf_reg': 5, 'learning_rate': 0.07,'verbose': 1000 }\n\nmodel = CatBoostClassifier(**params)\nmodel.fit(x_train,y_train,eval_set= (x_test, y_test),  use_best_model=True, plot=True)\npredictions_cat = model.predict(x_test) \n","b0044112":"accuracy_score(y_test,predictions_cat ) * 100\n","c0f5b65f":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras.models import Sequential\nfrom keras.layers import Dense","14e37a57":"modelAnn = Sequential()\n\nmodelAnn.add(Dense(128,activation=\"relu\",input_dim=13))\nmodelAnn.add(Dropout(0.4))\nmodelAnn.add(Dense(64,activation=\"relu\"))\nmodelAnn.add(Dropout(0.4))\nmodelAnn.add(Dense(1,activation=\"sigmoid\"))\n\nmodelAnn.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])","7ed68181":"hist=modelAnn.fit(x_train,y_train,batch_size=60,epochs= 507 ,validation_data=(x_test,y_test)) ","ba3496c5":"# Artificial Neural Network","b5c5b3d8":"Creating isAlone Feature to see if the person is alone or not","3b12f7ec":">* PassengerId: type should be integers \n>* Survived: Survived or Not \n>* Pclass: Class of Travel\n>* Name: Name of Passenger\n>* Sex: Gender\n>* Age: Age of Passengers\n>* SibSp: Number of Sibling\/Spouse aboard\n>* Parch: Number of Parent\/Child aboard\n>* Ticket: Ticket number\n>* Fare: Fare for ticket\n>* Cabin: Cabin Number\n>* Embarked: The port in which a passenger has embarked. C - Cherbourg, S - Southampton, Q = Queenstown","98efedb1":"these features don't make sense","fd2e845f":"SMOTE (Synthetic Minority Oversampling TEchnique) consists of synthesizing elements for the minority class, based on those that already exist. It works randomly picking a point from the minority class and computing the k-nearest neighbors for this point. The synthetic points are added between the chosen point and its neighbors.","882457ba":"importing libraries","e7a691e4":" # CatBoostClassifier","01739728":"# Which class survived the most?","48c5fb62":">* Females Survived the most","57b31a0d":"# Data Description","6f8e2e97":">* target column is imbalanced\n>* We have handled this later with resampling","5120164a":"# RandomForestClassifier","e6ea1266":"Bining the values of Fare","d9dfe2a9":">* Higher Age passengers are mostly in First Class\n>* As First Class Passengers have survived the most there is a direct relation with Fare\n>* Higher Age passengers survived the most which is because most higher age passengers travelled in first class and most first class passengers Survived","747784e6":"# Resampling","9721718f":"# DecisionTreeClassifier","2433c55e":"# Imbalanced ?","e5a4faa7":"# How many people Survived?","f47c827c":">* Most passengers got on board from Southampton","72edff34":"Droping Cabin column and filling Age column null values with mean ","7d8f9c4c":">* 38.4% of people Survived","fb8326b3":"# Who Survived more Male or Female?","e8cd9388":">* Cabin and Age columns has most null values","9cf6f5c6":"UnderSampling","9a0fbbfb":"One Hot Encoding","df8ccc2a":"Mapping male as 1 and Female as 0","03ec4b4c":">* First Class Passengers Survived the most","1045d118":"Extracting prefix from names ","40c458e0":"# SMOTE","002542b1":"Bining the values of Age","b644014b":"# Feature Engineering","5c6f779b":"<img src = \"https:\/\/raw.githubusercontent.com\/rafjaa\/machine_learning_fecib\/master\/src\/static\/img\/resampling.png\" width='800'>","81d79120":"Filling null values with most common value","f773024b":"# Preprocessing","9631d25e":"OverSampling","3ffb1df2":"<img src=\"https:\/\/raw.githubusercontent.com\/rafjaa\/machine_learning_fecib\/master\/src\/static\/img\/smote.png\" width='800'>","2648b4d7":"Correcting spelling mistakes in prefixes and naming rarely used prefixes with Rare'''","24795a20":"# ExtraTreesClassifier"}}