{"cell_type":{"fcffbef5":"code","75d49351":"code","90d95dcf":"code","863c9cb0":"code","90ed55cd":"code","3d021ad1":"code","de3da23d":"code","76969d9e":"code","6bb0a006":"code","fd89c984":"code","d468ef8b":"code","d9fd0a91":"code","bdc525bb":"code","8b63443b":"code","585a41ea":"code","fd796fdb":"code","0f17215e":"code","e97d3dfa":"code","22304de1":"code","3a27d8d4":"code","697c9354":"code","1ced4316":"code","214cd0cf":"code","b00956b4":"code","8a145acb":"code","0e314071":"code","9dd1ff2e":"code","c03314dc":"code","7238ed08":"code","29d16089":"code","2807955b":"code","bb756cb3":"code","1e98511a":"code","a15a1657":"code","6ae03fd8":"code","f274caff":"code","27161ccf":"code","e4088326":"code","5d4bb8e1":"code","8bc91694":"code","ec3a80ac":"code","d095137f":"code","6cfb2033":"code","b8c3ef3a":"code","f347b4ec":"code","071a3909":"code","46792e0a":"code","ec3aa329":"code","4521c094":"code","a19146d3":"code","a9e89d74":"code","a11190bb":"code","5e6e5d16":"code","bda7ae3d":"code","aaa04ca4":"code","94ea4166":"code","0f62d4c2":"code","371ebf9b":"code","653655db":"code","16760967":"code","cdd686e6":"code","2154652b":"code","5fce6797":"code","6adf1395":"code","b6ba999f":"code","13ee08e1":"code","1bb05805":"code","c181fb6d":"code","a777c26a":"code","958f19d7":"code","6581d7de":"code","1cdcf918":"code","30b3e6c1":"code","44ae07f9":"code","2c28c590":"code","6ab94a7e":"code","a57541b4":"code","97495101":"code","c27489f0":"code","fdf207a5":"code","26459113":"code","d3b1c612":"code","7557fde1":"code","f645e6cb":"code","f3407eb9":"code","f2a24710":"code","0960017f":"code","80a21475":"code","8d41f564":"code","1b496afb":"code","7c8ef458":"code","3a958707":"code","726df9ad":"code","d537d740":"code","0351fdc1":"code","5712a33e":"code","89821a2c":"code","d07669a6":"code","42e00786":"code","214053eb":"code","6affabfb":"code","f0283c03":"code","54438729":"code","43bb5b83":"code","46dba08c":"code","05f4032c":"code","f0ac5a94":"code","d6c5f75b":"code","c656b780":"code","c9d66c2c":"code","aea6cad8":"code","a7ccd194":"code","e7f0b2d0":"code","9e1b9548":"code","9463423f":"markdown","a26ed789":"markdown","d07fda38":"markdown","19150fb7":"markdown","f68e2446":"markdown","0b532d0b":"markdown","bbfe161d":"markdown","2d1a973c":"markdown","b55e9540":"markdown","c542a231":"markdown","1a92a6c8":"markdown","68fa0e69":"markdown","91f1d9fc":"markdown","5c53d0fc":"markdown","cbeebdf3":"markdown","81222255":"markdown","aebf72e4":"markdown","9c7444c7":"markdown","0b16c639":"markdown","7c402200":"markdown","ceb63a2a":"markdown","1839b04d":"markdown","3a2a1989":"markdown","d7d3b19e":"markdown","7ed60de0":"markdown","7f0ec1ec":"markdown","a032d448":"markdown","82a226b6":"markdown","02f8e5c7":"markdown","c30344b0":"markdown","5d5e678f":"markdown","ab1ac65d":"markdown","38ed413c":"markdown","b199d30a":"markdown","9f449033":"markdown","428bf7a9":"markdown","60419dff":"markdown","c35a2f7e":"markdown","546ec3b1":"markdown","235a5c67":"markdown","b792b2b2":"markdown","a23b6b1c":"markdown","509d10f0":"markdown","0db2c27c":"markdown","d79fe20f":"markdown","688f14bb":"markdown","fa0de772":"markdown","0d7aebf1":"markdown","b550c093":"markdown","ec17c37a":"markdown","1efc7dc4":"markdown","44ad59bb":"markdown","7c5d5767":"markdown","b773ed55":"markdown","97afce78":"markdown","e1341e8d":"markdown","ee4ddace":"markdown"},"source":{"fcffbef5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","75d49351":"train_df=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId=test_df['PassengerId']","90d95dcf":"train_df.columns","863c9cb0":"train_df.head()","90ed55cd":"train_df.describe()","3d021ad1":"train_df.columns","de3da23d":"train_df.info()","76969d9e":"train_df['Sex'].value_counts()","6bb0a006":"def bar_plot(variable):\n    \"\"\"\n    input: variable\n    output: bar plot and frequency\n    \"\"\"\n    # get variable\n    var=train_df[variable]\n    \n    # get frequencies\n    varValues=var.value_counts()    \n    \n    # visualisation\n    plt.figure(figsize=(7,4))\n    plt.bar(varValues.index, varValues)\n    plt.xticks(varValues.index, varValues.index.values)\n    plt.ylabel('Frequency')\n    plt.title(variable)\n    plt.show()\n    print('{}:\\n {}'.format(variable,varValues))","fd89c984":"category1 = ['Survived', 'Sex', 'Pclass', 'Embarked', 'SibSp', 'Parch']\nfor c in category1:\n    bar_plot(c)","d468ef8b":"category2 = ['Ticket', 'Name', 'Cabin']\nfor c in category2:\n    print('{} \\n\\n'.format(train_df[c].value_counts()))","d9fd0a91":"def hist_plot(c):\n    plt.hist(train_df[c], bins=30)\n    plt.xlabel(c)\n    plt.ylabel('Frequency')\n    plt.title('{} distribution with histogram'.format(c))\n    plt.show()","bdc525bb":"numerical = ['Fare', 'Age', 'PassengerId']\nfor c in numerical:\n    hist_plot(c)","8b63443b":"train_df[['Pclass','Survived']].groupby('Pclass', as_index=False).mean().sort_values(by='Survived', ascending=False)","585a41ea":"train_df[['Sex','Survived']].groupby('Sex', as_index=False).mean().sort_values(by='Survived', ascending=False)","fd796fdb":"train_df[['SibSp','Survived']].groupby('SibSp', as_index=False).mean().sort_values(by='Survived', ascending=False)","0f17215e":"train_df[['Parch','Survived']].groupby('Parch', as_index=False).mean().sort_values(by='Survived', ascending=False)","e97d3dfa":"def detect_outliers(df,columns):\n    outlier_list=[]\n    \n    for c in columns:\n        # 1st Quartile\n        Q1 = np.percentile(df[c],25)\n        \n        # 3rd Quartile\n        Q3 = np.percentile(df[c],75)\n        \n        # IQR\n        IQR = Q3-Q1\n        \n        # outlier_step\n        outlier_step = 1.5*IQR\n        \n        # detect outlier indices\n        indices = df[(df[c] < Q1-outlier_step) | (df[c] > Q3+outlier_step)].index\n        \n        # add outlier indices to the outlier list\n        outlier_list.extend(indices)\n    \n    outlier_list_counter=Counter(outlier_list)\n    final_outlier_list = [i for i,v in outlier_list_counter.items() if v>2]\n    \n    return final_outlier_list","22304de1":"# detect outliers\nfinal_outlier_list = detect_outliers(train_df, ['Age', 'Fare', 'SibSp', 'Parch'])\n\n# show outliers\ntrain_df.loc[final_outlier_list]","3a27d8d4":"# remove outliers\ntrain_df = train_df.drop(final_outlier_list, axis=0).reset_index(drop=True)","697c9354":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis=0).reset_index(drop=True)","1ced4316":"train_df.columns[train_df.isnull().any()]","214cd0cf":"train_df.isnull().sum()","b00956b4":"train_df[train_df['Embarked'].isnull() == True]","8a145acb":"train_df['Embarked'][train_df['Pclass']==1].value_counts()","0e314071":"train_df.boxplot(column='Fare', by='Embarked')\nplt.show()","9dd1ff2e":"train_df['Embarked'] = train_df['Embarked'].fillna('C')","c03314dc":"train_df[train_df['Embarked'].isnull() == True]","7238ed08":"train_df[train_df['Fare'].isnull()==True]","29d16089":"train_df['Fare'][train_df.Pclass==3].mean()","2807955b":"train_df['Fare'] = train_df['Fare'].fillna(train_df['Fare'][train_df.Pclass==3].mean())","bb756cb3":"train_df[train_df['Fare'].isnull()==True]","1e98511a":"list1 = ['SibSp', 'Parch', 'Age', 'Fare', 'Survived']\nsns.heatmap(train_df[list1].corr(), annot=True, fmt='0.2f')\nplt.show()","a15a1657":"g = sns.factorplot(x='SibSp', y='Survived', data=train_df, kind='bar')\ng.set_ylabels('Probability of Survival')\nplt.show()","6ae03fd8":"g = sns.factorplot(x='Parch', y='Survived', data=train_df, kind='bar')\ng.set_ylabels('Probability of Survival')\nplt.show()","f274caff":"g = sns.factorplot(x='Pclass', y='Survived', data=train_df, kind='bar')\ng.set_ylabels('Probability of Survival')\nplt.show()","27161ccf":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(sns.distplot, 'Age', bins=25)\nplt.show()","e4088326":"g = sns.FacetGrid(train_df[train_df.Fare<=300], col='Survived', size=6)\ng.map(plt.hist, 'Fare', bins=50)\ng.add_legend()\nplt.show()","5d4bb8e1":"g = sns.FacetGrid(train_df, col='Survived', row='Pclass', size=2)\ng.map(plt.hist, 'Age', bins=25)\ng.add_legend()\nplt.show()","8bc91694":"g = sns.FacetGrid(train_df, row='Embarked', size=2)\ng.map(sns.pointplot, 'Pclass', 'Survived', 'Sex')\ng.add_legend()\nplt.show()","ec3a80ac":"g = sns.FacetGrid(train_df, row='Embarked', col='Survived', size=2.3)\ng.map(sns.barplot, 'Sex', 'Fare' )\ng.add_legend()\nplt.show()","d095137f":"g = sns.factorplot(x='Survived', y='Fare', data=train_df, kind='bar')\nplt.show()","6cfb2033":"train_df[train_df['Age'].isnull()]","b8c3ef3a":"sns.factorplot(x='Sex', y='Age', data=train_df, kind='box')\nplt.show()","f347b4ec":"sns.factorplot(x='Sex', y='Age', hue='Pclass', data=train_df, kind='box')\nplt.show()","071a3909":"sns.factorplot(x='Parch', y='Age', data=train_df, kind='box')\nsns.factorplot(x='SibSp', y='Age', data=train_df, kind='box')\nplt.show()","46792e0a":"sns.heatmap(train_df[['Age','Sex','SibSp','Parch','Pclass']].corr(), annot=True, fmt='0.3f')\nplt.show()","ec3aa329":"train_df['Sex']=list(1 if i=='male' else 0 for i in train_df['Sex'])","4521c094":"sns.heatmap(train_df[['Age','Sex','SibSp','Parch','Pclass']].corr(), annot=True, fmt='0.3f')\nplt.show()","a19146d3":"train_df['Sex']=list('male' if i==1 else 'female' for i in train_df['Sex'])","a9e89d74":"index_nan_age = list(train_df[train_df['Age'].isnull()].index)","a11190bb":"for i in index_nan_age:\n    age_prediction = train_df['Age'][((train_df['SibSp']==train_df.iloc[i]['SibSp']) & (train_df['Parch']==train_df.iloc[i]['Parch']) & (train_df['Pclass']==train_df.iloc[i]['Pclass']))].median()\n    age_med = train_df['Age'].median()\n    if not np.isnan(age_prediction):\n        train_df['Age'].iloc[i] = age_prediction\n    else:\n        train_df['Age'].iloc[i] = age_med","5e6e5d16":"train_df[train_df['Age'].isnull()]","bda7ae3d":"from sklearn.tree import DecisionTreeRegressor","aaa04ca4":"fare = np.array(train_df.Fare[:train_df_len]).reshape(-1,1)\nsurvived = np.array(train_df.Survived[:train_df_len]).reshape(-1,1)\nDecTree = DecisionTreeRegressor(max_leaf_nodes=150)\nDecTree.fit(fare, survived)\ntrain_df['Fare_class'] = DecTree.apply(np.array(train_df.Fare).reshape(-1,1))","94ea4166":"train_df = pd.get_dummies(data=train_df, columns=['Fare_class'])","0f62d4c2":"train_df.drop('Fare', axis=1, inplace=True)","371ebf9b":"train_df['Age'] = train_df['Age'].astype('int')","653655db":"train_df['Age_based_survival'] = 0","16760967":"train_df.head()","cdd686e6":"for i in range(train_df['Age'].max()+1):\n    df = train_df[train_df['Age']==i][train_df.Survived.isna() == False]\n    avg_surv_prob = df['Survived'].mean()\n    train_df.loc[train_df.Age==i,'Age_based_survival'] = avg_surv_prob","2154652b":"train_df['Age_based_survival'] = train_df['Age_based_survival'].fillna(0)\ntrain_df[train_df['Age_based_survival'].isnull()]","5fce6797":"train_df.drop('Age', axis=1, inplace=True)\ntrain_df.head()","6adf1395":"train_df['Name'].head(10)","b6ba999f":"\"Braund, Mr. Owen Harris\".split('.')[0].split(',')[-1].strip()","13ee08e1":"train_df['Title'] = [i.split('.')[0].split(',')[-1].strip() for i in train_df['Name']]\ntrain_df['Title']","1bb05805":"plt.figure(figsize=(12,5))\nsns.countplot(train_df['Title'])\nplt.xticks(rotation=60)\nplt.show()","c181fb6d":"train_df['Title'] = train_df['Title'].replace(['Lady','the Countess','Capt','Col','Don','Dr','Major','Rev','Sir','Jonkheer','Dona'],'other')","a777c26a":"plt.figure(figsize=(12,5))\nsns.countplot(train_df['Title'])\nplt.xticks(rotation=60)\nplt.show()","958f19d7":"train_df['Title'] = [0 if i=='Master' else 1 if i=='Miss' or i=='Ms' or i=='Mlle' or i=='Mrs' else 2 if i=='Mr' else 3 for i in train_df['Title']]","6581d7de":"plt.figure(figsize=(12,5))\nsns.countplot(train_df['Title'])\nplt.show()","1cdcf918":"g = sns.factorplot(x='Title', y='Survived', data=train_df, kind='bar')\ng.set_xticklabels(['Master','Mrs','Mr','other'])\ng.set_ylabels('Survival Probability')\nplt.show()","30b3e6c1":"train_df.drop('Name', axis=1, inplace=True)","44ae07f9":"train_df.head()","2c28c590":"train_df = pd.get_dummies(data=train_df, columns=['Title'])","6ab94a7e":"train_df.head()","a57541b4":"train_df['Fsize'] = train_df['SibSp'] + train_df['Parch'] + 1","97495101":"g = sns.factorplot(x='Fsize', y='Survived', data=train_df, kind='bar')\nplt.show()","c27489f0":"train_df['Family_size'] = [1 if i in [2,3,4] else 0 for i in train_df['Fsize']]","fdf207a5":"train_df.head()","26459113":"sns.countplot(x='Family_size', data=train_df)\nplt.xlabel('Family size')\nplt.show()","d3b1c612":"g = sns.factorplot(x='Family_size', y='Survived', data=train_df, kind='bar')\ng.set_xlabels('Family size')\ng.set_ylabels('Survival Probability')\nplt.show()","7557fde1":"train_df.head()","f645e6cb":"train_df['SibSp_categ'] = [0 if i in [0,1,2] else 1 if i in [3,4] else 2 for i in train_df.SibSp]","f3407eb9":"train_df = pd.get_dummies(data=train_df, columns=['SibSp_categ'])","f2a24710":"train_df['Parch_categ'] = [0 if i in [1,2,3] else 1 if i in [0,5] else 2 for i in train_df.Parch]","0960017f":"train_df = pd.get_dummies(data=train_df, columns=['Parch_categ'])","80a21475":"train_df.head()","8d41f564":"sns.countplot(train_df['Embarked'])\nplt.show()","1b496afb":"train_df = pd.get_dummies(data=train_df, columns=['Embarked'])","7c8ef458":"train_df.head()","3a958707":"train_df['Ticket'].head(50)","726df9ad":"ticket_list=[]\nfor i in train_df['Ticket']:\n    if not i.strip().isdigit():\n        ticket_list.append(i.strip().replace('.','').replace('\/','').split()[0])\n    else:\n        ticket_list.append('x')\ntrain_df['Ticket'] = ticket_list","d537d740":"train_df['Ticket']","0351fdc1":"train_df = pd.get_dummies(train_df, columns=['Ticket'], prefix='T')","5712a33e":"train_df.head()","89821a2c":"sns.countplot(x=train_df['Pclass'])\nplt.show()","d07669a6":"train_df['Pclass'] = train_df['Pclass'].astype('category')\ntrain_df = pd.get_dummies(data=train_df, columns=['Pclass'])\ntrain_df.head()","42e00786":"train_df['Sex'] = train_df['Sex'].astype('category')\ntrain_df = pd.get_dummies(data=train_df, columns=['Sex'])\ntrain_df.head()","214053eb":"train_df.drop(labels=['PassengerId', 'Cabin'], axis=1, inplace=True)\ntrain_df.columns","6affabfb":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","f0283c03":"train_df_len","54438729":"train_df.head()","43bb5b83":"train_df = (train_df - train_df.min())\/(train_df.max() - train_df.min())","46dba08c":"train_df.columns.values","05f4032c":"test = train_df[train_df_len:]\ntest.drop(labels=['Survived'], axis=1, inplace=True)\ntest.head()","f0ac5a94":"train_df","d6c5f75b":"train = train_df[:train_df_len]\ny_train = train['Survived']\nx_train = train.drop('Survived', axis=1)\nx_train,x_test,y_train,y_test = train_test_split(x_train,y_train,test_size=0.2, random_state=42)\nprint('x_train: ',len(x_train))\nprint('x_test: ',len(x_test))\nprint('y_train: ',len(y_train))\nprint('y_test: ',len(y_test))\nprint('test: ',len(test))","c656b780":"log_reg = LogisticRegression()\nlog_reg.fit(x_train,y_train)\nacc_logreg_train = round(log_reg.score(x_train,y_train)*100,2)\nacc_logreg_test = round(log_reg.score(x_test,y_test)*100,2)\nprint('Training accuracy: %{}'.format(acc_logreg_train))\nprint('Testing accuracy: %{}'.format(acc_logreg_test))","c9d66c2c":"random_state = 42\n\nmodel_list = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state, probability=True),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\n\ngrid_list = [dt_param_grid, svc_param_grid, rf_param_grid, logreg_param_grid, knn_param_grid]","aea6cad8":"score_list = []\nbest_estimators = []\n\nfor i in range(5):\n    my_model = GridSearchCV(estimator=model_list[i], param_grid=grid_list[i], scoring='accuracy', n_jobs=-1, cv=StratifiedKFold(n_splits=10))\n    my_model.fit(x_train, y_train)\n    score_list.append(accuracy_score(my_model.best_estimator_.predict(x_test), y_test))\n    best_estimators.append(my_model.best_estimator_)\n\nprint('Best scores: ', score_list, '\\n')","a7ccd194":"cv_results = pd.DataFrame({'Algorithms': ['DecisionTreeClassifier',\n             'SVC',\n             'RandomForestClassifier',\n             'LogisticRegression',\n             'KNeighborsClassifier'], 'Scores':score_list})\n\nsns.barplot(y='Algorithms', x='Scores', data=cv_results)\nplt.title('Algorithms and their scores')\nplt.show()\nprint(score_list)","e7f0b2d0":"votingC = VotingClassifier([('RandomForest',best_estimators[2]),\n                           ('SVC',best_estimators[1]),\n                           ('Logistic',best_estimators[3])], voting='soft', n_jobs=-1)\nvotingC.fit(x_train, y_train)\nprint('Ensembled score: ', accuracy_score(votingC.predict(x_test),y_test))","9e1b9548":"test_survived = pd.Series(votingC.predict(test), name='Survived').astype(int)\nresults = pd.concat([test_PassengerId, test_survived], axis=1)\nresults.to_csv('titanic.csv', index=False)","9463423f":"<a id='31'><\/a>\n## Simple Logistic Regression","a26ed789":"<a id='8'><\/a>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","d07fda38":"<a id='36'><\/a>\n## SibSp","19150fb7":"<a id='3'><\/a>\n# Univariate Variable Analysis\n* Categorical Variables: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp, Parch\n* Numerical Variables: Fare, Age, PassengerId","f68e2446":"<a id='15'><\/a>\n## Pclass - Survived","0b532d0b":"* Passengers who had paid more have more chance to survive.\n* Fare feature can be turned into categorical by determining thresholds.\n* People embarked in Q have more chance to survive.","bbfe161d":"<a id='32'><\/a>\n## Hyperparameter Tuning - Grid Search - Cross Validation\nWe will compare 5 ML classifiers and evaluate mean accuracy for each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","2d1a973c":"<a id='33'><\/a>\n## Ensemble Modelling","b55e9540":"<a id='11'><\/a>\n# Visualisation","c542a231":"<a id='1'><\/a>\n# Load and Check Data","1a92a6c8":"<a id='9'><\/a>\n# Find Missing Value","68fa0e69":"<a id='26'><\/a>\n## Pclass","91f1d9fc":"* Survival chance is decreasing as SibSp increases.\n* Passengers with a SibSp of 0, 1 or 2 are more likely to survive.\n* We can extract a new feature based on SibSp. We can form 2 groups, ones having a SibSp of 2 or less, and ones having a SibSp of 3 or more.","5c53d0fc":"<a id='30'><\/a>\n## Train-Test Split","cbeebdf3":"<a id='5'><\/a>\n## Numerical Variable","81222255":"<a id='2'><\/a>\n# Variable Descriptions\n\n1. PassengerId: unique id number to each passenger\n1. Survived: survived(1) or dead(0)\n1. Pclass: passenger class\n1. Name: name of passenger\n1. Sex: gender of passenger\n1. Age: age of passenger\n1. SibSp: number of siblings and spouse\n1. Parch: number of parents and children\n1. Ticket: ticket number\n1. Fare: amount of money spent on ticket\n1. Cabin: cabin category\n1. Embarked: port where passenger embarked (C:Cherbourg, Q:Queenstown, S:Southampton)","aebf72e4":"There is not much difference between the number of passengers who embarked from S and embarked from C. Let's check Fare, both passengers paid 80 for Fare, maybe this can help us.","9c7444c7":"## Fare","0b16c639":"## Embarked","7c402200":"<a id='21'><\/a>\n# Feature Engineering","ceb63a2a":"* Pclass 1 passengers approximately have a median of 40.\n* Pclass 2 passengers approximately have a median of 30.\n* Pclass 3 passengers approximately have a median of 24.\n\nPclass can be used for age prediction.","1839b04d":"<a id='14'><\/a>\n## Parch - Survived","3a2a1989":"<a id='24'><\/a>\n## Embarked","d7d3b19e":"* Passengers with a Parch of 3 or less (small families) have more chance to survive.\n* We can combine Parch and SibSp wtih th=3 to extract a new feature.\n* Survival probablity of Parch=3 has a significant standard deviation.","7ed60de0":"<a id='16'><\/a>\n## Age - Survived","7f0ec1ec":"<a id='6'><\/a>\n# Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","a032d448":"We cannot see Sex feature on the heatmap, since it has string values. It has to be consisted of numeric values, to be included in the heatmap.","82a226b6":"<a id='35'><\/a>\n## Age","02f8e5c7":"> <a id='29'><\/a>\n# Modeling","c30344b0":"* Most of the passengers are Pclass 3. And most of the Pclass 3 passengers are dead.\n* Survival rate increases as the Pclass increases.\n* Pclass is an important feature for our model.","5d5e678f":"* Children <=10 have a high survival rate.\n* Oldest people also seems mostly survived.\n* People in their 20s are mostly dead.\n* Most of the passengers are between 15 and 35.\n* Use Age feature in training.\n* Use Age distribution to fill missing values of Age.","ab1ac65d":"> <a id='28'><\/a>\n## Drop PassengerId and Cabin","38ed413c":"* There is no correlation between Age and Sex, as we have noticed before.\n* There is some correlation between Age and SibSp, Parch, Pclass.","b199d30a":"* Females have more chance to survive.\n* Males in Pclass 3 embarked in C have more chance to survive.\n* Embarked and Sex will be used in training our model.","9f449033":"<a id='25'><\/a>\n## Ticket","428bf7a9":"## Fare - Survived","60419dff":"* float64(2): Fare, Age\n* int64(5): PassengerId, Survived, Pclass, Sibsp, Parch\n* object(5): Name, Sex, Ticket, Cabin, Embarked","c35a2f7e":"<a id='20'><\/a>\n## Fill Missing: Age Feature","546ec3b1":"<a id='22'><\/a>\n## Name - Title","235a5c67":"# Introduction\nTitanic is one of the most notorious shipwrecks in history. In 1912, during her maiden voyage, it collided with an iceberg and sank. 1512 out of 2224 passengers and crew died in the accident.\n\n<font color = 'blue'>\nContent:\n\n1. [Load and Check Data](#1)\n1. [Variable Descriptions](#2)\n    * [Univariate Variable Analysis](#3)\n      * [Categorical Variable](#4)\n      * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualisation](#11)\n    * [Correlation between SibSp - Parch - Age - Fare - Survived](#12)\n    * [SibSp - Survived](#13)\n    * [Parch - Survived](#14)\n    * [Pclass - Survived](#15)\n    * [Age - Survived](#16)\n    * [Pclass - Age - Survived](#17)\n    * [Embarked - Sex - Pclass - Survived](#18)\n    * [Embarked - Sex - Fare - Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Fare](#38)\n    * [Age](#35)\n    * [Name - Title](#22)\n    * [Family Size](#23)\n    * [SibSp](#36)\n    * [Parch](#37)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop PassengerId and Cabin](#28)\n1. [Modeling](#29)\n    * [Train-Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning - Grid Search - Cross Validation](#32)\n    * [Ensemble Modelling](#33)\n    * [Prediction and Submission](#34)","b792b2b2":"<a id='18'><\/a>\n## Embarked - Sex - Pclass - Survived","a23b6b1c":"<a id='38'><\/a>\n## Fare","509d10f0":"<a id='12'><\/a>\n## [Correlation between SibSp - Parch - Age - Fare - Survived]","0db2c27c":"Small families have more survival chance than large families.","d79fe20f":"<a id='13'><\/a>\n## SibSp - Survived","688f14bb":"<a id='7'><\/a>\n# Outlier Detection","fa0de772":"<a id='4'><\/a>\n## Categorical Variable","0d7aebf1":"<a id='34'><\/a>\n## Prediction and Submission","b550c093":"As you may have guessed, passengers with higher classes have more chance to survive.","ec17c37a":"There is significant correlation between Fare and Survived (0.26).","1efc7dc4":"<a id='19'><\/a>\n## Embarked - Sex - Fare - Survived","44ad59bb":"Age distribution seems very similar for males and females. Sex is not informative for age prediction.","7c5d5767":"<a id='23'><\/a>\n## Family Size","b773ed55":"<a id='37'><\/a>\n## Parch","97afce78":"<a id='17'><\/a>\n## Pclass - Age - Survived","e1341e8d":"<a id='10'><\/a>\n# Fill Missing Value","ee4ddace":"<a id='27'><\/a>\n## Sex"}}