{"cell_type":{"48045ea2":"code","d126483d":"code","146c5209":"code","ae5ea357":"code","ebe6a6fa":"code","48c76390":"code","18e0f802":"code","7ba14f8d":"code","996e7623":"code","820a70ff":"code","ec505717":"code","cc7e00da":"code","9b204943":"code","478e67a7":"code","bf11ac34":"code","86e7d5e9":"code","1b7989a4":"code","8f56b99c":"code","36ace43d":"code","14dcb84c":"code","4412aa0e":"code","d54ba1bc":"markdown","22acb95c":"markdown","c0ffc2ed":"markdown","acc0602e":"markdown","8f10843e":"markdown","85a20ceb":"markdown","325b2007":"markdown","a6f47f14":"markdown","6e5a0a87":"markdown","302a7457":"markdown","8ac4603e":"markdown","a77790d9":"markdown","937139ec":"markdown","5618a57e":"markdown","17c9b96b":"markdown","e65eec77":"markdown","312e3e37":"markdown","5084b980":"markdown"},"source":{"48045ea2":"pip install -U lightautoml # -U ","d126483d":"# Standard python libraries\nimport os\nimport time\nimport re\n\n# Installed libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import train_test_split\n\n# Imports \nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.tasks import Task\nfrom lightautoml.dataset.roles import NumericRole","146c5209":"N_THREADS = 4 # threads cnt for lgbm and linear models\nN_FOLDS = 5 # folds cnt for AutoML\nRANDOM_STATE = 42 # fixed random state for various reasons\nTEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 8 * 3600 # Time in seconds for automl run\nTARGET_NAME = 'target'","ae5ea357":"%%time\n\ntrain_data = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/train.csv')\ntrain_data[TARGET_NAME] = train_data[TARGET_NAME].str.slice(start=6).astype(int) - 1\ntrain_data.head()","ebe6a6fa":"test_data = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/test.csv')\ntest_data.head()","48c76390":"submission = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/sample_submission.csv')\nsubmission.head()","18e0f802":"%%time\n\ntask = Task('multiclass',)","7ba14f8d":"%%time\n\nroles = {\n    'target': TARGET_NAME,\n    'drop': ['id'],\n}","996e7623":"%%time \n\nautoml = TabularAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       general_params = {\n                           'use_algos': [['linear_l2', 'lgb_tuned', 'cb_tuned']], #linear_l2', 'lgb', 'lgb_tuned'\u3068\u3044\u3046\u30d1\u30bf\u30fc\u30f3\u3082\u3067\u304d\u308b\u307f\u305f\u3044\n                           'return_all_predictions': True,\n                           'weighted_blender_max_nonzero_coef': 0.0\n                       },\n                       tuning_params = {'max_tuning_time': 1800},\n                       reader_params = {'n_jobs': N_THREADS},\n                       config_path = '..\/input\/lightautoml-configs\/conf_0_sel_type_0.yml'\n                       )\noof_pred = automl.fit_predict(train_data, roles = roles)\nprint('oof_pred:\\n{}\\nShape = {}'.format(oof_pred[:10], oof_pred.shape))","820a70ff":"!cat config_path","ec505717":"%%time\n\ntest_pred = automl.predict(test_data)\nprint('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred[:10], test_pred.shape))\n\n# print('Check scores...')\n# print('OOF score: {}'.format(log_loss(train_data[TARGET_NAME].values, oof_pred.data)))","cc7e00da":"columns = ['PREDS_Linear_' + str(i) for i in range(1, 10)] + \\\n          ['PREDS_LGBM_' + str(i) for i in range(1, 10)] + \\\n          ['PREDS_CB_' + str(i) for i in range(1, 10)] + \\\n          ['PREDS_NN_' + str(i) for i in range(1, 10)]\ncolumns","9b204943":"oof_nn = pd.read_csv('..\/input\/python-keras-nn-residual\/OOF_nn_predict.csv')\ntest_nn = pd.read_csv('..\/input\/python-keras-nn-residual\/nn_predict.csv')\noof_nn","478e67a7":"OOF_preds = pd.DataFrame(np.hstack((oof_pred.data, oof_nn.drop('id', axis = 1))), columns = columns)\nTEST_preds = pd.DataFrame(np.hstack((test_pred.data, test_nn.drop('id', axis = 1))), columns = columns)","bf11ac34":"for col in columns:\n    train_data[col] = OOF_preds[col]\n    test_data[col] = TEST_preds[col]","86e7d5e9":"test_data.head()","1b7989a4":"%%time \n\nroles = {\n    'target': TARGET_NAME,  #\u3053\u3053\u3067\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u8a2d\u5b9a\n    'drop': ['id'],         #traingdata\u306e\u4e0d\u8981\u306a\u3082\u306e\u3092\u524a\u9664\n    NumericRole(np.float32, prob = True): columns    #\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u30c7\u30fc\u30bf\u306e\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\u3059\u308b\u3002\n}\n\nautoml = TabularUtilizedAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       general_params = {\n                           'use_algos': [['lgb_tuned', 'cb_tuned']], #\u3042\u308c\uff12\u7a2e\u985e\n                       },\n                       tuning_params = {'max_tuning_time': 1800},\n                       reader_params = {'n_jobs': N_THREADS},\n                       configs_list = ['..\/input\/lightautoml-configs\/conf_1_sel_type_1.yml'],\n                       max_runs_per_config=1\n                       )\noof_pred = automl.fit_predict(train_data, roles = roles)\nprint('oof_pred:\\n{}\\nShape = {}'.format(oof_pred[:10], oof_pred.shape))","8f56b99c":"# \u7279\u5fb4\u306e\u91cd\u8981\u5ea6\u306e\u8a08\u7b97\nfast_fi = automl.get_feature_scores('fast')\nfast_fi.set_index('Feature')['Importance'].plot.bar(figsize = (20, 10), grid = True)","36ace43d":"test_pred = automl.predict(test_data)\nprint('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred[:10], test_pred.shape))\n\nprint('Check scores...')\nprint('OOF score: {}'.format(log_loss(train_data[TARGET_NAME].values, oof_pred.data)))","14dcb84c":"submission.iloc[:, 1:] = test_pred.data\nsubmission.to_csv('sample.csv', index = False)","4412aa0e":"submission","d54ba1bc":"## \u3059\u3079\u3066\u306e OF \u3068\u30c6\u30b9\u30c8 pred \u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0 \u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8 \u30c7\u30fc\u30bf\u306b\u7d44\u307f\u5408\u308f\u305b\u308b","22acb95c":"![image.png](attachment:04b9bf8d-305d-482f-bf2b-d48c5d559b77.png)","c0ffc2ed":"\u30de\u30eb\u30c1\u30af\u30e9\u30b9\u5206\u985e\u306a\u306e\u3067\u3001multicalss\u3092\u8a2d\u5b9a","acc0602e":"##  preds \u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067 LightAutoML \u30e2\u30c7\u30eb\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3059\u308b","8f10843e":"\u3053\u306etarget\u3068submission\u306e\u30af\u30e9\u30b9\u3068\u306e\u95a2\u4fc2\u306f\u3069\u3046\u3059\u308b\u306e\uff1f","85a20ceb":"Google\u306b\u3088\u308c\u3070\u3001AutoML\u306e\u57fa\u672c\u7684\u306a\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3001\u9ad8\u5ea6\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u80fd\u529b\u3092\u5fc5\u8981\u3068\u305b\u305a\u3001\u8ab0\u3067\u3082\u753b\u50cf\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u3068Google\u306e\u30b7\u30b9\u30c6\u30e0\u304c\u81ea\u52d5\u7684\u306b\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u304f\u308c\u308b\u3068\u3044\u3046\u3082\u306e\u3060\u3002\nAutoML\uff08Automated Machine Learning\uff1a\u81ea\u52d5\u5316\u3055\u308c\u305f\u6a5f\u68b0\u5b66\u7fd2\uff09\u3068\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u8a2d\u8a08\u30fb\u69cb\u7bc9\u3092\u81ea\u52d5\u5316\u3059\u308b\u305f\u3081\u306e\u624b\u6cd5\u5168\u822c\u3001\u307e\u305f\u306f\u305d\u306e\u6982\u5ff5\u3092\u6307\u3059\u3002\n\n\u3000\u7279\u306b\u30b0\u30fc\u30b0\u30eb\u306f\u300cAutoML\u300d\u3092\u6a19\u699c\u3057\u3066\u5404\u7a2eAI\u30b5\u30fc\u30d3\u30b9\u3078\u306e\u642d\u8f09\u306b\u6ce8\u529b\u3057\u3066\u304a\u308a\u3001\u521d\u51fa\u3067\u306f2017\u5e745\u6708\u306b\u300cGoogle AI Blog: Using Machine Learning to Explore Neural Network Architecture\u300d\u3068\u3044\u3046\u8a18\u4e8b\u3092\u516c\u958b\u3057\u3066\u3044\u308b\u3002\u73fe\u6642\u70b9\u3067\u306f\u3001GCP\uff08Google Cloud Platform\uff09\u306e\u300cCloud AutoML\u300d\uff08\u57f7\u7b46\u6642\u70b9\u3067\u30d9\u30fc\u30bf\u7248\uff09\u3067\u3001\u300cAutoML Vision\u300d\u306a\u3069\u306e\u8ee2\u79fb\u5b66\u7fd2\u7cfb\u306e\u30b5\u30fc\u30d3\u30b9\u3084\u3001\u300cAutoML Tables\u300d\u306a\u3069\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u81ea\u52d5\u9078\u629e\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u304c\u65e2\u306b\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\u6709\u511f\u3060\u3051\u3069\u3053\u306e\u30b5\u30fc\u30d3\u30b9\u3092\u4f7f\u3048\u3070kaggle\u306f\u697d\u52dd\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u66f8\u3044\u3066\u3042\u3063\u305f\u3002\u672c\u5f53\u3067\u3059\u304b\u306d\u3002","325b2007":"## \u30ab\u30e9\u30e0\u8a2d\u5b9a","a6f47f14":"#\u30a4\u30f3\u30dd\u30fc\u30c8 ","6e5a0a87":"## \u30c8\u30ec\u30a4\u30cb\u30f3\u30b0","302a7457":"# \u30d1\u30e9\u30e1\u30fc\u30bf","8ac4603e":"## \u30b5\u30d6\u30df\u30c3\u30b7\u30e7\u30f3","a77790d9":"![image.png](attachment:5dda633c-2051-4e02-9e0a-29116a74b216.png)","937139ec":"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u3068\u30b9\u30b3\u30a2\u306e\u30c1\u30a7\u30c3\u30af","5618a57e":"\u4e88\u6e2c","17c9b96b":"\u3053\u308c\u3084\u3089\u308c\u3061\u3083\u3046\u3068\u308f\u304b\u3089\u306a\u3044\u3002\u3053\u306e\u30c7\u30fc\u30bf\u306f\u4e00\u4f53\u3069\u3046\u3084\u3063\u3066\u4f5c\u3063\u305f\u306e\u304b\u3002![image.png](attachment:86aa6d4c-8333-4837-936f-525f10b13b87.png)","e65eec77":"## \u30bf\u30b9\u30af\u4f5c\u6210","312e3e37":"\uff13\u3064\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u30c8\u30ec\u30a4\u30cb\u30f3\u30b0\u3059\u308b\u3002\u7d50\u679c\u3082\uff13\u3064\u51fa\u529b\u3055\u308c\u308b\u3002","5084b980":"\u30c7\u30fc\u30bf\u30ed\u30fc\u30c9"}}