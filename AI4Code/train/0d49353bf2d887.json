{"cell_type":{"9e0baa40":"code","19193d4e":"code","8c5b6ae9":"code","ecfdfd0f":"code","16efe4b0":"code","c1aeeee7":"code","4b3bfc9a":"code","f4ac34fa":"code","f65ae097":"code","3e451d07":"code","5a89261a":"code","21296433":"code","041baabc":"code","d4424254":"code","18f3e5eb":"code","9c24a290":"code","6aeea379":"code","a40bec8b":"code","68000b23":"code","6d3d0827":"code","65c9157c":"code","b0789f06":"code","6ba60f1e":"code","0484c969":"code","8907ef4a":"code","3dbac839":"code","5f0bfb5b":"code","46d66fd0":"code","b49b23a2":"code","3311b0f9":"code","eff8f541":"code","d7a6d68c":"code","d242a581":"code","46838adf":"code","225f9425":"code","b422379a":"code","2aef1df3":"markdown","42531d71":"markdown","83ef13c1":"markdown","83add2ce":"markdown","daa53e70":"markdown","5674ed2c":"markdown","e0c8ebd0":"markdown","b1ec2fca":"markdown","bfd487f7":"markdown","f946b397":"markdown","af6061ad":"markdown","96789d9f":"markdown","24dc9077":"markdown","17d03e29":"markdown","858a2977":"markdown","a0969c44":"markdown","1f48095d":"markdown","e444c084":"markdown","6c24023f":"markdown","bd2f5ea9":"markdown"},"source":{"9e0baa40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","19193d4e":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn import metrics\nimport folium\nprint('import successful')","8c5b6ae9":"df = pd.read_csv('..\/input\/house-price-prediction-challenge\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-price-prediction-challenge\/test.csv')\nprint('The shape of dataset is {}'.format(df.shape))\ndf.head()","ecfdfd0f":"df_test.head()","16efe4b0":"df.isnull().sum()","c1aeeee7":"df['BHK_NO.'].value_counts().to_frame('counts')","4b3bfc9a":"df = df[(df['TARGET(PRICE_IN_LACS)']<15000) & \n        (df['SQUARE_FT']<300000) & (df['BHK_NO.']<=6)]\n\nprint('Shape of the dataset after neglecting the outliers {}'.format(df.shape))","f4ac34fa":"df.info()","f65ae097":"df.describe()","3e451d07":"df.corr()","5a89261a":"df['city'] = df['ADDRESS'].apply(lambda x: x.split(',')[1])\ndf.drop('ADDRESS', axis=1, inplace=True)\ntop_cities = df['city'].value_counts()[:10].keys().tolist()\n\n\ndf_test['city'] = df_test['ADDRESS'].apply(lambda x: x.split(',')[1])\ndf_test.drop('ADDRESS', axis=1, inplace=True)\n","21296433":"plt.figure()\nsns.countplot('POSTED_BY', data=df)","041baabc":"price_range = [300, 600, 1000,1500, 2500, 4000, 6000, 8000, 10000]\nplt.figure(figsize=(12, 7))\nsns.regplot(x='BHK_NO.', y='TARGET(PRICE_IN_LACS)', data=df)\nplt.xticks([1, 2, 3, 4, 5, 6, 7])\nplt.yticks(price_range)\nplt.title('price w.r.t number of bhk')\nplt.xlabel('number of bhk')\nplt.show()","d4424254":"plt.figure(figsize=(11, 8))\nplt.subplot(2, 2, 1)\nsns.countplot('READY_TO_MOVE', data=df)\nplt.xlabel('')\nplt.title('Ready_to_move', fontsize=12)\nplt.subplot(2, 2, 2)\nsns.countplot('READY_TO_MOVE', data=df[df['RERA']==0])\nplt.xlabel('')\nplt.title('Ready_to_move due to unapproved RERA')\nplt.subplot(2, 2, 3)\nsns.countplot('RESALE', data=df[df['RERA']==0])\nplt.title('Resale due to unapproved RERA')\nplt.xlabel('')\nplt.subplot(2, 2, 4)\nsns.regplot(x='RESALE',y='TARGET(PRICE_IN_LACS)', data=df)\nplt.xlabel('There is a decrease in the \\n price of the house\\n which is being resaled')","18f3e5eb":"plt.figure(figsize=(12, 8))\nsns.regplot('SQUARE_FT','TARGET(PRICE_IN_LACS)', data=df)","9c24a290":"owner_sales = df[df['POSTED_BY']=='Owner']\ndealer_sales = df[df['POSTED_BY']=='Dealer']\nbuilder_sales = df[df['POSTED_BY']=='Builder']\nowner_price = []\ndealer_price = []\nbuilder_price = []\nsq_ft = []\nfor bhk in range(1, 7):\n    owner_cost = owner_sales['TARGET(PRICE_IN_LACS)'][owner_sales['BHK_NO.']==bhk].mean()\n    dealer_cost = dealer_sales['TARGET(PRICE_IN_LACS)'][dealer_sales['BHK_NO.']==bhk].mean()\n    builder_cost = builder_sales['TARGET(PRICE_IN_LACS)'][builder_sales['BHK_NO.']==bhk].mean()\n    s = df['SQUARE_FT'][df['BHK_NO.']==bhk].mean()\n    owner_price.append(owner_cost)\n    dealer_price.append(dealer_cost)\n    builder_price.append(builder_cost)\n    sq_ft.append(s)\n    \nprint(owner_price, '\\n', builder_price , '\\n', dealer_price)\nprint(sq_ft)","6aeea379":"import matplotlib.gridspec as gridspec\nplt.figure(figsize=(20, 7))\ngspec = gridspec.GridSpec(2, 2)\ntop_plot = plt.subplot(gspec[0, 1:])\nbottom_bar = plt.subplot(gspec[1:, 1:])\nplt.style.use('seaborn')\nbhk = np.arange(1, 7)\nprice = [owner_price, dealer_price, builder_price]\nlabel = ['owner', 'dealer', 'builder']\nsqft = []\nn=1\nfor i, l in zip(price, label):\n    x=[]\n    y=[]\n    for j, k, m in zip(i, bhk, sq_ft):\n        if n==3:\n            if str(m)!='nan':\n                sqft.append(m)\n            else:\n                sqft.append(0)\n        if str(j)!='nan':\n            x.append(k)\n            y.append(j)\n    top_plot.plot(x, y, label=l)\n    n += 1\ntop_plot.set_ylabel('price in lakhs')\ntop_plot.set_xticklabels([])\ntop_plot.legend()\nbottom_bar.bar(bhk, sqft, color='pink', alpha=0.7)\nbottom_bar.invert_yaxis()\nbottom_bar.set_xticks(bhk)\nbottom_bar.set_xlabel('No. of BHK')\nbottom_bar.set_ylabel('Square feet')\nplt.tight_layout()","a40bec8b":"cost_per_sq_ft = []\nfor city in (top_cities):\n    a = df['SQUARE_FT'][df['city']==city].mean()\n    b = df['TARGET(PRICE_IN_LACS)'][df['city']==city].mean()\n    cost_per_sq_ft.append(int((b\/a)*100000))\ncost_per_sq_ft","68000b23":"plt.figure(figsize=(12, 5))\nplt.bar(top_cities, cost_per_sq_ft, color=['red', 'blue', 'green',\n                                           'yellow', 'pink', 'orange',\n                                           'cyan', '#eb8f34', '#ab34eb','#9bc4d1'])\nplt.xlabel('Cities', fontsize=12)\nplt.ylabel('Cost per Square_feet (in Rupees)', fontsize=12)\nplt.title('Cost per Square_ft in Top Cities of India', fontsize=15)","6d3d0827":"city_df = df[df['city'].isin(top_cities)]\ncity_df['city'].unique()","65c9157c":"plt.figure(figsize=(10, 15))\nsns.barplot(x='TARGET(PRICE_IN_LACS)', y='city', data=city_df, hue='BHK_NO.', estimator=np.mean)","b0789f06":"df2 = pd.concat([df.drop(['city','POSTED_BY', 'BHK_OR_RK', 'LONGITUDE', 'LATITUDE'], axis=1),  \n                pd.get_dummies(df['POSTED_BY'])], axis=1)\ndf2_test = pd.concat([df_test.drop(['city','POSTED_BY', 'BHK_OR_RK', 'LONGITUDE', 'LATITUDE'], axis=1), \n                pd.get_dummies(df_test['POSTED_BY'])], axis=1)\ndf2_test.reset_index(drop=True, inplace=True)\n\ndf2.reset_index(drop=True, inplace=True)\ndf2.head()","6ba60f1e":"x = df2.drop('TARGET(PRICE_IN_LACS)', axis=1).values\ny = df2['TARGET(PRICE_IN_LACS)'].values","0484c969":"x_train, x_test,y_train,  y_test = train_test_split(x, y, test_size=0.2, random_state=2)\nprint('x_train and x_test shapes are {} and {}'.format(x_train.shape, x_test.shape))\nprint('y_train and y_test shapes are {} and {}'.format(y_train.shape, y_test.shape))","8907ef4a":"model1 = LinearRegression()\nmodel1.fit(x_train, y_train)\nyhat1 = model1.predict(x_test)\nprint('The mean absolute error for linear regression is {}'.format(metrics.mean_absolute_error(yhat1, y_test)))\nprint('The Residual sum of squares (MSE): {}'.format(np.mean((yhat1-y_test)**2)))\nprint('The R2-Score is {}'.format(metrics.r2_score(yhat1, y_test)))","3dbac839":"ax1 = sns.distplot(y_test, hist=False, color='r', label='Actual value')\nsns.distplot(yhat1, hist=False, color='b', label='predicted value', ax=ax1)","5f0bfb5b":"model2 = DecisionTreeRegressor(random_state=1)\nmodel2.fit(x_train, y_train)\nyhat2 = model2.predict(x_test)\nprint('The mean_absolute error for Decision Tree Regressor is {}'.format(metrics.mean_absolute_error(yhat2, y_test)))\nprint('The Residual sum of squares (MSE): {}'.format(np.mean((yhat2-y_test)**2)))\nprint('The R2-Score is {}'.format(metrics.r2_score(yhat2, y_test)))","46d66fd0":"ax2 = sns.distplot(y_test, hist=False, color='r', label='Actual value')\nsns.distplot(yhat2, hist=False, color='b', label='predicted value', ax=ax2)","b49b23a2":"model3 = RandomForestRegressor(n_estimators=500, random_state=1)\nmodel3.fit(x_train, y_train)\nyhat3 = model3.predict(x_test)\nprint('The mean_absolute error for Random Forest Regressor is {}'.format(metrics.mean_absolute_error(yhat3, y_test)))\nprint('The Residual sum of squares (MSE): {}'.format(np.mean((yhat3-y_test)**2)))\nprint('The R2-Score is {}'.format(metrics.r2_score(yhat3, y_test)))","3311b0f9":"ax3 = sns.distplot(y_test, hist=False, color='r', label='Actual value')\nsns.distplot(yhat3, hist=False, color='b', label='predicted value', ax=ax3)","eff8f541":"model4 = XGBRegressor(n_estimators=300, learning_rate=0.02, n_jobs=4)\nmodel4.fit(x_train, y_train)\nyhat4 = model4.predict(x_test)\nprint('The mean_absolute error XGBRegressor is {}'.format(metrics.mean_absolute_error(yhat4, y_test)))\nprint('The Residual sum of squares (MSE): {}'.format(np.mean((yhat4-y_test)**2)))\nprint('The R2-Score is {}'.format(metrics.r2_score(yhat4, y_test)))","d7a6d68c":"ax4 = sns.distplot(y_test, hist=False, color='r', label='Actual value')\nsns.distplot(yhat4, hist=False, color='b', label='predicted value', ax=ax4)","d242a581":"pred_test = model4.predict(df2_test.values)\nprint(pred_test[:20])\ndf2_test.head(20)","46838adf":"output = pd.DataFrame({\n    'TARGET(PRICE_IN_LACS)': pred_test\n})","225f9425":"output.to_csv('indian_housing_price.csv', index=False)","b422379a":"df3 = pd.read_csv('.\/indian_housing_price.csv')\ndf3.head()","2aef1df3":"##### now let's first read both train.csv and test.csv using pandas","42531d71":"#### This housing price prediction model is better but it's not the best model to predit the housing prices. surely there is a room for improvement for the model to predict more accurately.","83ef13c1":"##### seems this dataset is clean as it has no missing values.so it's like a  lit of burden reduced","83add2ce":"![image.png](attachment:image.png)","daa53e70":"#### reducing the address to the city names which will give us a deep insight of the data","5674ed2c":"# model developement","e0c8ebd0":"##### seeing the no. of rooms column in the training_data which has upto 20 rooms and its inappropriate and seems a much outlied number and neglecting houses with prices above 15000 lakhs which is inappropriate and neglecting square_ft values to less than 300000","b1ec2fca":"#### As of the four models xgbregressor has predicted well .so using model 4 to predict the test.csv data values","bfd487f7":"### XGBRegressor","f946b397":"### Decision Tree Regressor","af6061ad":"### Linear Regression","96789d9f":"## Conclusion","24dc9077":"### Random Forest Regressor","17d03e29":"#### Thus this is half concluded but i made this some how clear that,\n#### dealers sell most of the houses than owners and builders\n#### price increases with increase in square feet and with increase in number of BHK\n#### dealers and builders price are higher than that of owners selling price\n#### people in unapproved rera houses are ready to move and resale\n#### price decreases with resaled house and unapproved house\n#### price is variant with respect to the land rate and we must make further improvement in the model","858a2977":"## Data Cleaning","a0969c44":"## Gathering Data:\n##### The dataset under which the project is made is available in kaggle datasets\n##### The dataset which was provided in kaggle is a combo of threee csv files,\nsample_submission.csv\ntest.csv\ntrain.csv\n##### we'll use the train.csv which is the training dataset ,we'll use only this dataset for every steps made in this notebook and the test.csv will be used only for final prediction of the model its like a kind of task","1f48095d":"# **Housing Price Prediction - India**","e444c084":"## Data Preprocessing","6c24023f":"## Understanding The Problem Statement :\n#### In this notebook we are going to predict the housing prices in india\n##### Prediction house prices are expected to help people who plan to buy a house so they can know the price range in the future, then they can plan their finance well. In addition, house price predictions are also beneficial for property investors to know the trend of housing prices in a certain location.\n##### Housing price prediction in india will be a bit challenging as this country is a mixture of various clusters which cannot be compared with any other countries and as a vast country ,The prediction might get under unexpected situations according to the land rate variation through out the nation.so come on lets jump in ..","bd2f5ea9":"# EDA:"}}