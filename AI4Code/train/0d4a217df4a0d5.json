{"cell_type":{"cf5e8d18":"code","0b17dbdd":"code","57dbf087":"code","757a24f3":"code","3088e0ab":"code","bf2e6f27":"code","b13f740e":"code","94e3f31b":"code","f3c8779e":"code","cbca2e2c":"code","1f329748":"code","83b72607":"code","9d743474":"code","c015fcdb":"code","24b1fc37":"code","afb8ee23":"code","634a8d29":"code","0b272cba":"code","26b66f24":"code","de76ee61":"markdown","fbff60e3":"markdown","04755aaf":"markdown","7d681399":"markdown","4ee2e893":"markdown","062c6a1d":"markdown","29a60fa8":"markdown","e54399d6":"markdown","d219014b":"markdown"},"source":{"cf5e8d18":"# importing libraries\n\n!pip install lifetimes\n!pip install openpyxl\n\nfrom sqlalchemy import create_engine\nimport datetime as dt\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom lifetimes import BetaGeoFitter\nfrom lifetimes import GammaGammaFitter\nfrom lifetimes.plotting import plot_period_transactions\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\npd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.width\",500)\npd.set_option(\"display.float_format\", lambda x: \"%.4f\" % x)","0b17dbdd":"# loading dataset, we analyse the period in 2010-2011.\n\ndf = pd.read_excel(\"..\/input\/online-retail2\/online_retail_II.xlsx\", sheet_name=\"Year 2010-2011\")","57dbf087":"# \"checking dataframe and show infos about some details\"\n\ndef check_df(dataframe, head=5):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(head))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n\n\ncheck_df(df)","757a24f3":"df.head()","3088e0ab":"# target country will be United Kingdom for this project\ndf = df[df[\"Country\"] == \"United Kingdom\"]","bf2e6f27":"# data cleaning\ndf.isnull().sum()\ndf.describe().T\ndf.dropna(inplace=True)\n\n# if C involves in invoice number that means rejected parts.\ndf = df[~df[\"Invoice\"].str.contains(\"C\",na=False)]\ndf = df[df[\"Quantity\"] > 0]\ndf = df[df[\"Price\"] > 0]","b13f740e":"def outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n\nreplace_with_thresholds(df,\"Quantity\")\nreplace_with_thresholds(df,\"Price\")","94e3f31b":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    \"\"\"\n\n    Veri setindeki kategorik, numerik ve kategorik fakat kardinal de\u011fi\u015fkenlerin isimlerini verir.\n    Not: Kategorik de\u011fi\u015fkenlerin i\u00e7erisine numerik g\u00f6r\u00fcn\u00fcml\u00fc kategorik de\u011fi\u015fkenler de dahildir.\n\n    Parameters\n    ------\n        dataframe: dataframe\n                De\u011fi\u015fken isimleri al\u0131nmak istenilen dataframe\n        cat_th: int, optional\n                numerik fakat kategorik olan de\u011fi\u015fkenler i\u00e7in s\u0131n\u0131f e\u015fik de\u011feri\n        car_th: int, optinal\n                kategorik fakat kardinal de\u011fi\u015fkenler i\u00e7in s\u0131n\u0131f e\u015fik de\u011feri\n\n    Returns\n    ------\n        cat_cols: list\n                Kategorik de\u011fi\u015fken listesi\n        num_cols: list\n                Numerik de\u011fi\u015fken listesi\n        cat_but_car: list\n                Kategorik g\u00f6r\u00fcn\u00fcml\u00fc kardinal de\u011fi\u015fken listesi\n\n    Examples\n    ------\n        import seaborn as sns\n        df = sns.load_dataset(\"iris\")\n        print(grab_col_names(df))\n\n\n    Notes\n    ------\n        cat_cols + num_cols + cat_but_car = toplam de\u011fi\u015fken say\u0131s\u0131\n        num_but_cat cat_cols'un i\u00e7erisinde.\n        Return olan 3 liste toplam\u0131 toplam de\u011fi\u015fken say\u0131s\u0131na e\u015fittir: cat_cols + num_cols + cat_but_car = de\u011fi\u015fken say\u0131s\u0131\n\n    \"\"\"\n\n\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n\n    return cat_cols, num_cols, cat_but_car\n\n# variable's types\ncat_cols, num_cols, cat_but_car = grab_col_names(df)","f3c8779e":"# creating total price variable that represents to monetary\ndf[\"TotalPrice\"] = df[\"Quantity\"] * df[\"Price\"]\n\n# creating date variable for calculate recency values\ntoday_date = dt.datetime(2011,12,11)","cbca2e2c":"# Preparing data to lifetime value calculation\n\ncltv_df = df.groupby(\"Customer ID\").agg({\"InvoiceDate\": [lambda date: (date.max() - date.min()).days,\n                                                         lambda date: (today_date - date.min()).days],\n                                         \"Invoice\": lambda num: num.nunique(),\n                                         \"TotalPrice\": lambda TotalPrice: TotalPrice.sum()})\n\n# rename columns\ncltv_df.columns = cltv_df.columns.droplevel(0)\ncltv_df.columns = [\"recency\",\"T\",\"frequency\",\"monetary\"]","1f329748":"cltv_df[\"monetary\"] = cltv_df[\"monetary\"] \/ cltv_df[\"frequency\"] ## revenue per transaction\ncltv_df = cltv_df[cltv_df[\"frequency\"] > 1] ## remove no purchases\ncltv_df[\"recency\"] = cltv_df[\"recency\"] \/ 7 ## turns recency value to weekly\ncltv_df[\"T\"] = cltv_df[\"T\"] \/ 7 ## T turns to weekly","83b72607":"## CREATING BG-NBD MODEL\n\nbgf = BetaGeoFitter(penalizer_coef=0.001)\n\n# modelling all customers\nbgf.fit(cltv_df[\"frequency\"],\n        cltv_df[\"recency\"],\n        cltv_df[\"T\"])\n\n# Expected purchases within 1 week\ncltv_df[\"expected_purc_1_week\"] = bgf.predict(1,\n                                              cltv_df[\"frequency\"],\n                                              cltv_df[\"recency\"],\n                                              cltv_df[\"T\"])\n                                              \n\n# Expected purchases within 1 month\ncltv_df[\"expected_purc_1_month\"] = bgf.predict(4,\n                                               cltv_df[\"frequency\"],\n                                               cltv_df[\"recency\"],\n                                               cltv_df[\"T\"])\n                                              \n\n\n# Number of sales expected by the company in 3 months\nbgf.predict(4,cltv_df[\"frequency\"],cltv_df[\"recency\"],cltv_df[\"T\"]).sum()","9d743474":"# evaluation\nplot_period_transactions(bgf)\nplt.show()","c015fcdb":"## CREATING GAMMA GAMMA MODEL\n\n\"Gamma gamma model focus on to profit margin, so frequency and monetary values are only required\"\n\nggf = GammaGammaFitter(penalizer_coef=0.01)\nggf.fit(cltv_df[\"frequency\"], cltv_df[\"monetary\"])\n\n# calculation of expected average profit\ncltv_df[\"expected_average_profit\"] = ggf.conditional_expected_average_profit(cltv_df[\"frequency\"],\n                                                                             cltv_df[\"monetary\"])\n\n","24b1fc37":"# Customer Lifetime Value Calculation with using both models BG\/NBD and GAMMA GAMMA\n\ncltv = ggf.customer_lifetime_value(bgf,cltv_df[\"frequency\"], cltv_df[\"recency\"], cltv_df[\"T\"],cltv_df[\"monetary\"],\n                                   time = 6,\n                                   freq=\"W\",\n                                   discount_rate = 0.01)","afb8ee23":"# Sorting by customer lifetime value\ncltv.head()\n\ncltv = cltv.reset_index()\n\ncltv.sort_values(by=\"clv\",ascending=False)","634a8d29":"# CLTV for 12 months\n\ncltv = ggf.customer_lifetime_value(bgf,cltv_df[\"frequency\"], cltv_df[\"recency\"], cltv_df[\"T\"],cltv_df[\"monetary\"],\n                                   time = 12,\n                                   freq=\"W\",\n                                   discount_rate = 0.01)\n\ncltv_final = cltv_df.merge(cltv,on=\"Customer ID\",how=\"left\")\ncltv_final.head(10)\n\ncltv.head()\n\ncltv = cltv.reset_index()\n\ncltv.sort_values(by=\"clv\",ascending=False).head(10)","0b272cba":"# Segmentation of CLTV values from A to D \n\nscaler = MinMaxScaler(feature_range=(0,1))\nscaler.fit(cltv_final[[\"clv\"]])\ncltv_final[\"scaled_clv\"] = scaler.transform(cltv_final[[\"clv\"]])\n\ncltv_final.sort_values(by=\"scaled_clv\",ascending=False).head()\n\ncltv_final[\"segment\"] = pd.qcut(cltv_final[\"scaled_clv\"],4,labels=[\"D\",\"C\",\"B\",\"A\"])\ncltv_final.head()","26b66f24":"import seaborn as sns\n#Creating scatter plot\nsns.scatterplot(data=cltv_final, x=\"segment\", y=\"clv\")\n#Adding the aesthetics\nplt.title('Segmentation graph')\nplt.xlabel('X axis title')\nplt.ylabel('Y axis title') \n\n# Show the plot\nplt.show()","de76ee61":"### Dataset knowledges:\n\n### *Context*\n#### This data set is pulled from UCI Machine Learning Repository, titled \"Online Retail II Data Set\", donated in 2019. This data set includes an additional year 01\/12\/2009-09\/12\/2010 from the data set titled \"Online Retail Data Set\" donated in 2015.\n\n### *Content*\n#### This Online Retail II data set contains all the transactions occurring for a UK-based and registered, non-store online retail between 01\/12\/2009 and 09\/12\/2011. The company mainly sells unique all-occasion gift-ware. Many customers of the company are wholesalers.\n\n### *Attributes Description:*\n\n* #### InvoiceNo: Invoice number. Nominal. A 6-digit integral number uniquely assigned to each transaction. If this code starts with the letter 'c', it indicates a cancellation.\n* #### StockCode: Product (item) code. Nominal. A 5-digit integral number uniquely assigned to each distinct product.\n* #### Description: Product (item) name. Nominal.\n* #### Quantity: The quantities of each product (item) per transaction. Numeric.\n* #### InvoiceDate: Invoice date and time. Numeric. The day and time when a transaction was generated.\n* #### UnitPrice: Unit price. Numeric. Product price per unit in sterling (\u00c2\u00a3).\n* #### CustomerID: Customer number. Nominal. A 5-digit integral number uniquely assigned to each customer.\n* #### Country: Country name. Nominal. The name of the country where a customer resides.","fbff60e3":"### CLTV is primary metric for understanding customers. Using accurate estimates of CLV as the basis for marketing decisions will maximize the company\u2019s revenues (or profits). In this way , we'll segmentate customers in 4 metrics(recency,T,frequency,monetary) and make CLV prediction with using BG\/NBD and Gamma Gamma models.","04755aaf":"![imager-1.png](attachment:2870a6bc-99c5-4fd6-8519-8cb173224120.png)","7d681399":"### *BG\/NBD Model:*\n\n#### The model has also known as Buy Till You Die and it explains to transaction of customers in order to purchasing. BG\/NBD model helps through predict customers transactions in products.","4ee2e893":"### *Gamma Gamma Submodel:*\n\n#### It gives us to expected average profit for each customers in period that also could be indicates manually.","062c6a1d":"### Customer lifetime value (CLV) is the predicted sum total of all future revenues (or profits) that a particular customer will generate for a business. It's basically related to customers purchasing behaviours. As a number of customers are increasing, indicating which customer group is the best or are these customers are acceptable for make investment is getting harder. So CLV prediction helps to response of these requirements and solving them.","29a60fa8":"### Let's continue with project...","e54399d6":"# **What Is Customer Lifetime Value and Why We Need This?**","d219014b":"### *Metrics definitions:*\n\n#### Recency: How recently a customer has made a purchase\n#### Frequency: How often a customer makes a purchase\n#### T: The age of the client in the company. Weekly (for every single user)\n#### Monetary Value: How much money a customer spends on purchases"}}