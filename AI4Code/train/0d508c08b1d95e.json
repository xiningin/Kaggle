{"cell_type":{"62c51340":"code","adbd4072":"code","a461e266":"code","739c5a4c":"code","55b30761":"code","bf574e43":"code","cdc449a5":"code","52e4aafc":"code","66cf926b":"code","0632ace9":"code","6efdd5c5":"code","8b3ec9c4":"code","f5df8ded":"code","43e48aec":"code","178f1a6a":"code","3b0cd51f":"code","aebb959a":"code","4178a93f":"code","aa8168c9":"code","539bfcef":"code","33be74ec":"code","7cdc2b99":"code","504e0fc8":"code","00562146":"code","dcb8aabd":"code","fd068b44":"code","685b5969":"code","5601eee1":"code","36880244":"code","bb94745e":"code","904708f5":"code","8b11153d":"code","36f07819":"code","cda99d78":"code","5a42ebe9":"code","16c9c8ec":"code","bb88b5d7":"code","48e69257":"code","2f9e5049":"code","18a60903":"code","a5780046":"code","b1d217d9":"code","6aa55139":"code","aac94d11":"code","86000683":"code","b2467e16":"code","570cf594":"code","4d81ce7e":"code","4d0bbb1f":"code","5d12d548":"code","2bfb8265":"code","720fc7e6":"code","895b114a":"code","a4f6a967":"code","134572ed":"code","54497cfa":"code","90d5635a":"code","b1756927":"code","b97bd203":"code","8a327f94":"code","ad4dcce7":"code","32344864":"code","434e3c33":"code","ddb4702f":"code","1ba698a4":"code","3749b955":"code","d949e6fb":"code","729bd08a":"code","6c505e18":"code","132925fd":"code","51360a4e":"code","fc3cc6a3":"code","64f306ac":"code","23d0040a":"code","b3bb124b":"code","0a059bea":"code","89e98a30":"code","fbc8dbae":"code","79edb354":"code","2f312b8c":"code","e0ce21de":"code","2606ffb1":"code","e109eb87":"code","0d8987da":"code","8942092e":"code","4becc698":"code","68bf9ae4":"code","823309f7":"code","ecf8cb4c":"code","97dd33f4":"code","ea5b0eda":"code","c2423a49":"code","d679a691":"code","b39f1cbb":"code","ce27bec0":"code","2ac3eb57":"code","042bc7fb":"code","ff778950":"code","585c3d1b":"code","f59697ec":"code","0510f6ff":"code","56d95180":"code","fa90aa16":"code","fbd30dca":"code","cb01e67d":"code","05b8feac":"code","dc75684f":"code","cc44b272":"code","45d40ce2":"code","f0a92676":"code","e7a0e234":"code","88175ac0":"code","f2ff5a3c":"code","ee587869":"code","506c1bd6":"code","92a36771":"code","a7785de2":"markdown","88c7912c":"markdown"},"source":{"62c51340":"import pandas as pd\ndf = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')\ndf.head()","adbd4072":"df.nunique()","a461e266":"df.info()","739c5a4c":"df['DATE_TIME'] = pd.to_datetime(df['DATE_TIME'],format = '%Y-%m-%d %H:%M')","55b30761":"df['DATE'] = pd.to_datetime(df['DATE_TIME'],format = '%Y-%m-%d %H:%M').dt.date","bf574e43":"df['DATE'] = pd.to_datetime(df['DATE'])","cdc449a5":"df.info()","52e4aafc":"import matplotlib.pyplot as plt\nplt.figure(figsize=(20,10)) # To increase the size of the graph\nplt.plot(df['DATE_TIME'],df['AMBIENT_TEMPERATURE'],label = 'Ambient')\nplt.legend()\nplt.grid()\nplt.margins(0.05)\nplt.show()","66cf926b":"import matplotlib.pyplot as plt\nplt.figure(figsize=(20,10)) # To increase the size of the graph\nplt.plot(df['DATE_TIME'],df['MODULE_TEMPERATURE'],label = 'Module')\nplt.legend()\nplt.grid()\nplt.margins(0.05)\nplt.show()","0632ace9":"import matplotlib.pyplot as plt\nplt.figure(figsize=(20,10)) # To increase the size of the graph\nplt.plot(df['DATE_TIME'],df['MODULE_TEMPERATURE']-df['AMBIENT_TEMPERATURE'],label = 'Difference')\nplt.legend()\nplt.grid()\nplt.margins(0.05)\nplt.show()","6efdd5c5":"import matplotlib.pyplot as plt\nplt.figure(figsize=(20,10)) # To increase the size of the graph\nplt.plot(df['DATE_TIME'],df['AMBIENT_TEMPERATURE'],label = 'Ambient')\nplt.plot(df['DATE_TIME'],df['MODULE_TEMPERATURE'],label = 'Module')\nplt.plot(df['DATE_TIME'],df['MODULE_TEMPERATURE']-df['AMBIENT_TEMPERATURE'],label = 'Difference')\nplt.legend()\nplt.grid()\nplt.margins(0.05)\nplt.show()","8b3ec9c4":"import matplotlib.pyplot as plt\nplt.figure(figsize=(20,10)) # To increase the size of the graph\nplt.plot(df['DATE_TIME'],df['AMBIENT_TEMPERATURE'].rolling(window=20).mean(),label = 'Ambient')\nplt.plot(df['DATE_TIME'],df['MODULE_TEMPERATURE'].rolling(window=20).mean(),label = 'Module')\nplt.plot(df['DATE_TIME'],(df['MODULE_TEMPERATURE']-df['AMBIENT_TEMPERATURE']).rolling(window=20).mean(),label = 'Difference')\nplt.legend()\nplt.grid()\nplt.margins(0.05)\nplt.show()","f5df8ded":"#dataframe.rolling","43e48aec":"# Scatter plot\nimport numpy as np\na = np.random.randint(1,1000,500)\nb = np.random.randint(1,100,500)\n","178f1a6a":"#plt.scatter(a,b)\nplt.plot(a,b,marker='o',linestyle='')\nplt.show()","3b0cd51f":"plt.figure(figsize=(20,10))\nplt.scatter(df['AMBIENT_TEMPERATURE'],df['MODULE_TEMPERATURE'],s = 50,label='Temperature Graph',alpha = 0.5)\nplt.plot()\nplt.legend()\nplt.grid()\nplt.margins(0.05)\nplt.show()","aebb959a":"plt.legend?","4178a93f":"plt.figure(figsize=(20,10))\nplt.plot(df['AMBIENT_TEMPERATURE'],df['MODULE_TEMPERATURE'],ms = 10,label='Temperature Graph',\n         alpha = 0.5,marker='o',linestyle='')\nplt.plot()\nplt.legend()\nplt.grid()\nplt.margins(0.05)\nplt.show()","aa8168c9":"a = np.random.randint(0,300,len(df['AMBIENT_TEMPERATURE']))\nplt.figure(figsize=(20,10))\nplt.scatter(df['AMBIENT_TEMPERATURE'],df['MODULE_TEMPERATURE'],s =a,label='Temperature Graph',alpha = 0.5)\nplt.plot()\nplt.legend()\nplt.grid()\nplt.margins(0.05)\nplt.show()\n\n# Try for increasing sizes of bubbles for increasing of temperature","539bfcef":"# IRRADIATION\n# > 0 -Daytime\n# == 0 - NightTime","33be74ec":"df['DATE']=='2020-05-15'","7cdc2b99":"dates = df['DATE'].unique()\ndates","504e0fc8":"df[df['DATE']==dates[0]] # I want all the other values for this specific date","00562146":"df[df['DATE']==dates[0]][df['IRRADIATION']>0] # The Dataframe for the first date where IRRADIATION IS >0","dcb8aabd":"\ndata = df[df['DATE']==dates[0]][df['IRRADIATION']>0]\nplt.plot(data['AMBIENT_TEMPERATURE'],data['MODULE_TEMPERATURE'],marker='o',linestyle='',\n        label=pd.to_datetime(dates[0],format='%Y-%m-%d').date())\nplt.legend()\nplt.show()","fd068b44":"plt.figure(figsize=(20,10))\nfor date in dates:\n    data = df[df['DATE']==date][df['IRRADIATION']>0]\n              \n    plt.plot(data['AMBIENT_TEMPERATURE'],data['MODULE_TEMPERATURE'],marker='o',linestyle='',\n        label=pd.to_datetime(date,format='%Y-%m-%d').date())\nplt.legend()\nplt.show()","685b5969":"df.columns","5601eee1":"plt.figure(figsize=(20,10))\nplt.plot(df['IRRADIATION'],df['MODULE_TEMPERATURE'],ms=10,marker='o',linestyle='',alpha=0.5,label='Module Temp')\nplt.legend()","36880244":"data = df[df['IRRADIATION']>0.1]\nplt.figure(figsize=(20,10))\nplt.plot(data['IRRADIATION'],data['MODULE_TEMPERATURE']-data['AMBIENT_TEMPERATURE'],marker='o',linestyle='',alpha=0.5,label='Difference Temp')\nplt.legend()\nplt.ylabel('Temperature Difference')\nplt.xlabel('Irradiation')","bb94745e":"df.info()","904708f5":"df_gen = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\ndf_gen['DATE_TIME'] = pd.to_datetime(df_gen['DATE_TIME'],format='%d-%m-%Y %H:%M')\ndf_gen['DATE'] = pd.to_datetime(df_gen['DATE_TIME'],format='%d-%m-%Y %H:%M').dt.date\ndf_gen['DATE'] = pd.to_datetime(df_gen['DATE'])\ndf_gen.info()","8b11153d":"inv_lst = df_gen['SOURCE_KEY'].unique()\ninv_lst","36f07819":"df_gen.groupby('SOURCE_KEY')['TOTAL_YIELD'].max()","cda99d78":"plt.figure(figsize=(20,10))\nplt.bar(inv_lst,df_gen.groupby('SOURCE_KEY')['TOTAL_YIELD'].max())\nplt.xticks(rotation=90)\nplt.grid()","5a42ebe9":"df_gen.info()","16c9c8ec":"df.info()","bb88b5d7":"r_left = pd.merge(df_gen,df,on='DATE_TIME',how='left')\nr_left","48e69257":"r_left.info()","2f9e5049":"# LEFT MERGE\n# 2 DataFrames\n# MERGED DATAFRAME = LEFT+ RIGHT\n# Left Side - df_gen :68778 rows, 8 columns\n# Right Side - df : 3182, 7 columns\n# Output: 68778 rows - 14(15-1)columns","18a60903":"r_left.isnull().sum()","a5780046":"r_left['AMBIENT_TEMPERATURE'].isnull().value_counts()","b1d217d9":"null_data1 = r_left[r_left.isnull().any(axis=1)]\nnull_data1","6aa55139":"# Sensor was down at this specific time stamp","aac94d11":"# RIGHT MERGE\n# 2 DataFrames\n# MERGED DATAFRAME = LEFT+ RIGHT\n# Left Side - df_gen :68778 rows, 8 columns\n# Right Side - df : 3182, 7 columns\n# Output: 68778 rows - 14(15-1)columns","86000683":"plt.figure(figsize=(20,10))\nplt.plot(r_left['IRRADIATION'],r_left['DC_POWER'],marker='o',linestyle='',alpha=0.5,label='DC Power')\nplt.legend()\n\nplt.xlabel('Irradiation')\nplt.ylabel('DC Power')","b2467e16":"plt.figure(figsize=(20,10))\nplt.plot(r_left['MODULE_TEMPERATURE'],r_left['DC_POWER'],marker='o',linestyle='',alpha=0.5,label='DC Power')\nplt.legend()\n\nplt.xlabel('Module temperature')\nplt.ylabel('DC Power')","570cf594":"dates = r_left['DATE_x'].unique()\ndates","4d81ce7e":"r_left[r_left['DATE_x']==dates[0]][r_left['IRRADIATION']>0.1]","4d0bbb1f":"data = r_left[r_left['DATE_x']==dates[1]][r_left['IRRADIATION']>0.1]\nplt.plot(data['MODULE_TEMPERATURE'],data['DC_POWER'],marker='o',linestyle='',\n         label = pd.to_datetime(dates[1],format='%Y-%m-%d').date())\nplt.legend()\nprint(dates[1])","5d12d548":"# For all 34 dates\nplt.figure(figsize=(20,10))\nfor date in dates:\n    data = r_left[r_left['DATE_x']==date][r_left['IRRADIATION']>0.1]\n    plt.plot(data['MODULE_TEMPERATURE'],data['DC_POWER'],marker='o',linestyle='',\n             label = pd.to_datetime(date,format='%Y-%m-%d').date())\nplt.legend()\nplt.grid()\nplt.xlabel('Module Temperature')\nplt.ylabel('DC Power')\nplt.title('MODULE TEMPERATURE VS DC POWER')\nplt.show()","2bfb8265":"# Inverters\nplt.figure(figsize=(20,10))\ndate = dates[4]  # One specifi date\ninverters = r_left['SOURCE_KEY_x'].unique()\nprint(inverters)\nfor inverter in inverters:\n    data = data = r_left[r_left['DATE_x']==date][r_left['SOURCE_KEY_x']==inverter]\n    plt.scatter(data['MODULE_TEMPERATURE'],data['DC_POWER'],label=inverter)\nplt.legend()","720fc7e6":"# df_gen summary data","895b114a":"data_summary = df_gen.groupby(['SOURCE_KEY','DATE']).agg(READINGS = ('TOTAL_YIELD','count'),\n                                                         INV = ('SOURCE_KEY',max),\n                                                        DATE = ('DATE',max))\ndata_summary","a4f6a967":"# Total readings from an inverter :\n4*24","134572ed":"plt.scatter(data_summary['DATE'],data_summary['READINGS'])\nplt.xticks(rotation=90)","54497cfa":"plt.figure(figsize=(12,8))\nfor inv in data_summary['INV'].unique():\n    plt.scatter(data_summary[data_summary['INV']==inv]['DATE'],\n            data_summary[data_summary['INV']==inv]['READINGS'],label=inv,s = 80)\nplt.legend()\nplt.title('Readings vs Date')\nplt.xlabel('Date')\nplt.ylabel('Number of Readings')\nplt.show()","90d5635a":"r_left.info()","b1756927":"# Linear Regression\n# Input(x) - Independent Variable [Irradiation] 12    \n# Output(y) - Dependent Variable [Dc Power] 3\n\n#NOTE: Sklearn library accepts inputs only in 2 DImension","b97bd203":"\n# FIlling Irradiation column with 0 for null values\nr_left['IRRADIATION'] = r_left['IRRADIATION'].fillna(0) \nr_left['AMBIENT_TEMPERATURE'] = r_left['AMBIENT_TEMPERATURE'].fillna(0) \nr_left['MODULE_TEMPERATURE'] = r_left['MODULE_TEMPERATURE'].fillna(0) \nr_left.info()","8a327f94":"#x = r_left.iloc[:,[12]].values\nx = r_left.iloc[:,12:13].values\nx.ndim","ad4dcce7":"y = r_left.iloc[:,3].values\ny","32344864":"import matplotlib.pyplot as plt\nplt.scatter(x,y,s=1)","434e3c33":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)","ddb4702f":"x_train.shape","1ba698a4":"x_test.shape","3749b955":"55022+13756","d949e6fb":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()","729bd08a":"model.fit(x_train,y_train)","6c505e18":"y_pred = model.predict(x_test)\ny_pred","132925fd":"y_test","51360a4e":"# Visualization of Best Fit Line\n# Training Data\nplt.scatter(x_train,y_train,s=1)\nplt.scatter(x_train,model.predict(x_train),s=1)\nplt.show()","fc3cc6a3":"# Testing Data\nplt.scatter(x_test,y_test,s=1)\nplt.scatter(x_test,model.predict(x_test),s=1)\nplt.show()","64f306ac":"model.predict([[0.6]])","23d0040a":"# Plotting for Predicted vs Real Output in the test data\nplt.scatter(y_pred,y_test,s=1)","b3bb124b":"df1 = pd.DataFrame({'Actual':y_test,'Predicted':y_pred})\ndf2 = df1.head(10)","0a059bea":"df2.plot(figsize=(20,8))","89e98a30":"# Research\nimport seaborn as sns\nsns.regplot(x='Actual',y='Predicted',data=df1)\nplt.show()","fbc8dbae":"sns.regplot?","79edb354":"from sklearn.metrics import r2_score,mean_squared_error\nprint(mean_squared_error(y_pred,y_test))","2f312b8c":"import numpy as np\nMSE = np.square(np.subtract(y_pred,y_test)).mean()\nMSE","e0ce21de":"r2_score(y_pred,y_test)","2606ffb1":"x1 = r_left.iloc[:,11:12].values\ny1 = r_left.iloc[:,4].values\nplt.scatter(x1,y1,s=1)","e109eb87":"from sklearn.model_selection import train_test_split\nx1_train,x1_test,y1_train,y1_test = train_test_split(x1,y1,test_size=0.2,random_state=0)","0d8987da":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(x1_train,y1_train)\ny_pred = model.predict(x1_test)\n","8942092e":"# Testing Data\nplt.scatter(x1_test,y1_test,s=1)\nplt.scatter(x1_test,model.predict(x1_test),s=1)\nplt.xlabel('Ambient Temperature')\nplt.ylabel('AC Power')\nplt.show()","4becc698":"model.predict([[30]])","68bf9ae4":"import pickle\npickle.dump(model, open('model.pkl','wb'))\n","823309f7":"!pip install streamlit\n!pip install pyngrok","ecf8cb4c":"%%writefile app1.py\nimport streamlit as st\nimport pickle\n\nst.title(\"Temperature vs AC Power\")\nst.subheader('Prediction')\nst.write('This project is based on Linear Regression')\n\nmodel = pickle.load(open('model.pkl', 'rb'))\ntemp = st.number_input('Enter temperature')\nop = model.predict([[temp]])\nif st.button(\"Predict\"):\n  st.title(f'The AC Power is {op}')\n","97dd33f4":"from pyngrok import ngrok\npublic_url = ngrok.connect(port='8501')\nprint(public_url)\n\n","ea5b0eda":"\n!streamlit run app1.py","c2423a49":"# Forecasting - Predict the future based on Past events","d679a691":"df.info()","b39f1cbb":"day_summary = df.groupby('DATE').agg(TOTAL_IRRADIANCE=('IRRADIATION',sum),DATE=('DATE',max))\nday_summary","ce27bec0":"day_summary = day_summary.rename(columns={'DATE':'ds','TOTAL_IRRADIANCE':'y'})\nday_summary.info()","2ac3eb57":"import fbprophet\nop = fbprophet.Prophet(changepoint_prior_scale=0.25)\nop.fit(day_summary)","042bc7fb":"# Make a future possible prediction (df) for 1 month\nforecast = op.make_future_dataframe(periods = 30,freq='D')\nforecast = op.predict(forecast)","ff778950":"op.plot(forecast,xlabel='Date',ylabel='Irradiation')\nplt.title('Irradiation Prediction');","585c3d1b":"forecast['ds'].value_counts()","f59697ec":"df_new = df[['DATE_TIME','IRRADIATION']]","0510f6ff":"df_new","56d95180":"df_new = df_new.rename(columns={'DATE_TIME':'ds','IRRADIATION':'y'})\ndf_new","fa90aa16":"import fbprophet\nop = fbprophet.Prophet(changepoint_prior_scale=0.25)\nop.fit(df_new)","fbd30dca":"# Make a future possible prediction (df) for H Hours\nforecast = op.make_future_dataframe(periods = 300,freq='H')\nforecast = op.predict(forecast)","cb01e67d":"op.plot(forecast,xlabel='Date',ylabel='Irradiation')\nplt.title('Irradiation Prediction');","05b8feac":"op.plot_components(forecast);","dc75684f":"forecast","cc44b272":"r_left.info()","45d40ce2":"# correlation matrix\ncor = r_left.drop(['PLANT_ID_x','PLANT_ID_y'],axis=1)\ncor = cor.corr()\ncor","f0a92676":"# plotting correlations on a heatmap\n\n# figure size\nplt.figure(figsize=(8,4))\n\n# heatmap\nsns.heatmap(cor, cmap=\"YlGnBu\", annot=True)\nplt.show()","e7a0e234":"# Clustering daily yield in different clusters","88175ac0":"plt.scatter(r_left['AMBIENT_TEMPERATURE'],r_left['DAILY_YIELD'],s=0.1)\n","f2ff5a3c":"plt.scatter(r_left['TOTAL_YIELD'],r_left['DAILY_YIELD'],s=0.1)","ee587869":"import pickle\npickle.dump(model, open('model.pkl','wb'))","506c1bd6":"!pip install flask-ngrok","92a36771":"from flask_ngrok import run_with_ngrok\nfrom flask import Flask,jsonify\nimport numpy as np\nimport pickle\napp = Flask(_name_)\nrun_with_ngrok(app) \n\nmodel = pickle.load(open('model.pkl', 'rb'))\n\n@app.route('\/')\ndef home():\n  return 'Hi. Welcome to the ML Model'\n\n@app.route(\"\/<float:x>\")\ndef ml(x):\n    arr = np.array([x])\n    result = model.predict([arr]).tolist()\n    return jsonify(result)\napp.run()","a7785de2":"# **Assignment : Put the respective numbers on top of every bar**\n\n\nHint: Annotate or Text","88c7912c":"**FLASK APP**"}}