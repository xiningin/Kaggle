{"cell_type":{"52e8bb9f":"code","7d03a236":"code","4c869e5f":"code","b4f5316c":"code","bb972938":"code","fee96c2a":"code","56c1fded":"code","24068b25":"code","6b3ee85d":"code","292ab17e":"code","e4cf2823":"code","84b21017":"code","4c1d3f5e":"code","6b0bb17e":"code","8710f222":"code","6607c448":"code","aa5635a7":"code","87ed696c":"code","c9a0d7c2":"code","44b52799":"code","0431b0a3":"code","7dd28e9b":"code","d8c19c4f":"code","fbf99daf":"code","99b47cb3":"code","9cd58a78":"code","a1e2fa07":"code","4370c487":"code","e8661d06":"code","28d30e6c":"code","08bbcec1":"code","c5b5901a":"code","5c90f29a":"code","28604bb0":"code","45c83ae1":"code","03199298":"code","a8428cad":"code","3dfa4bfa":"code","b81affe7":"code","cd617ff1":"code","8c8418c8":"code","8efeb6f2":"code","90899000":"code","9c042bfe":"markdown","b5089aa1":"markdown","18f54187":"markdown","fe53db61":"markdown","2fda933a":"markdown","112fe911":"markdown","9928929c":"markdown","c0b814dd":"markdown"},"source":{"52e8bb9f":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","7d03a236":"df = pd.read_csv('..\/input\/kaggle-competitions-ranking\/Kaggle Competitions Ranking.csv', error_bad_lines = False, encoding = 'latin-1', sep = ';')","4c869e5f":"df.head()","b4f5316c":"df.tail()","bb972938":"#Check all columns\n\ndf.columns","fee96c2a":"# Check Rows and columns of dataset\n\ndf.shape","56c1fded":"#check dataset type\n\ndf.dtypes","24068b25":"#check missing value of dataset\n\ndf.isnull().sum()   #sum is done to know total, if we want to see, just write isnull()","6b3ee85d":"#handling missing value\n\ndf.dropna(inplace = True)   \ndf.isnull().sum()","292ab17e":"df.shape   #after dropping null dataset","e4cf2823":"df.corr()","84b21017":"sns.heatmap(df.corr(), vmax = 0.9, linewidths = 0.8, cmap = 'flare')\nplt.title('Pearson Correlation', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.show()","4c1d3f5e":"#check unique of rank column\n\ndf[\"Rank\"].unique()","6b0bb17e":"#check unique of tier column\n\ndf['Tier'].unique()","8710f222":"#check number of tier column\n\ndf['Tier'].value_counts()","6607c448":"#check unique of username column\n\ndf['Username'].unique()","aa5635a7":"#check number of username column\n\ndf['Username'].value_counts()","87ed696c":"#remove spesific value in username column\n\n\ndf = df.drop(df[df.Username.isin(['?', '??', '???', '????', '?????', '??????', '???????'])].index)\ndf['Username'].value_counts()\n","c9a0d7c2":"#check unique of join date column\n\n\ndf['Join Date'].unique()","44b52799":"#check number of join date column\n\ndf['Join Date'].value_counts()","0431b0a3":"#visualize the outlier of each variable\n\n\ndf.boxplot(column = ['Bronze Medals', 'Silver Medals', 'Gold Medals'])\nplt.ylabel('Count', fontsize = 12)\nplt.show()\n\ndf.boxplot(column = ['Bronze Medals', 'Silver Medals', 'Gold Medals', 'Points'])\nplt.ylabel('Count', fontsize = 12)\nplt.show()\n\n\nprint('Maximum of bronze medals :', df['Bronze Medals'].max())\nprint('Minimum of bronze medals :', df['Bronze Medals'].min())\nprint('Median of bronze medals :', df['Bronze Medals'].median())\nprint('Average of bronze medals :', df['Bronze Medals'].mean())\nprint('Total of bronze medals :', df['Bronze Medals'].sum())\nprint('\\n')\nprint('Maximum of silver medals :', df['Silver Medals'].max())\nprint('Minimum of silver medals :', df['Silver Medals'].min())\nprint('Median of silver medals :', df['Silver Medals'].median())\nprint('Average of silver medals :', df['Silver Medals'].mean())\nprint('Total of silver medals :', df['Silver Medals'].sum())\nprint('\\n')\nprint('Maximum of gold medals :', df['Gold Medals'].max())\nprint('Minimum of gold medals :', df['Gold Medals'].min())\nprint('Median of gold medals :', df['Gold Medals'].median())\nprint('Average of gold medals :', df['Gold Medals'].mean())\nprint('Total of gold medals :', df['Gold Medals'].sum())\nprint('\\n')\nprint('Maximum of points :', df['Points'].max())\nprint('Minimum of points :', df['Points'].min())\nprint('Median of points :', df['Points'].median())\nprint('Average of points :', df['Points'].mean())\nprint('Total of points :', df['Points'].sum())","7dd28e9b":"#analyze of bronze medals under 1.0 based on rank, join date, tier and username\n\n\ndf[df['Bronze Medals'] < 1.0][['Rank', 'Join Date', 'Tier', 'Username', 'Bronze Medals']]","d8c19c4f":"#analyze of bronze medals over 1.0 based on rank, join date, tier and username\n\n\ndf[df['Bronze Medals'] > 1.0][['Rank', 'Join Date', 'Tier', 'Username', 'Bronze Medals']]","fbf99daf":"#analyze of silver medals under 2.0 based on rank, join date, tier and username\n\ndf[df['Silver Medals'] < 2.0][['Rank', 'Join Date', 'Tier', 'Username', 'Silver Medals']]","99b47cb3":"#analyze of silver medals over 2.0 based on rank, join date, tier and username\n\ndf[df['Silver Medals'] > 2.0][['Rank', 'Join Date', 'Tier', 'Username', 'Silver Medals']]","9cd58a78":"#analyze of gold medals over 0.0 based on rank, join date, tier and username\n\n\ndf[df['Gold Medals'] > 0.0][['Rank', 'Join Date', 'Tier', 'Username', 'Gold Medals']]","a1e2fa07":"#analyze of points under 3418.0.0 based on rank, join date, tier and username\n\n\ndf[df['Points'] < 3418.0][['Rank', 'Join Date', 'Tier', 'Username', 'Points']]","4370c487":"#remove question mark attribute in username column\ndf['Username'] = [str(i).replace('?', '') for i in df['Username']]\n\n#show again \ndf[df['Points'] < 3418.0][['Rank', 'Join Date', 'Tier', 'Username', 'Points']]\n","e8661d06":"df.shape","28d30e6c":"#analyze of points over 3418.0.0 based on rank, join date, tier and username\ndf[df['Points'] > 3418.0][['Rank', 'Join Date', 'Tier', 'Username', 'Points']]","08bbcec1":"#analyze average of bronze medals based on tier, join date, rank and username\n\n\nbronze_medal = pd.pivot_table(df, index = ['Tier', 'Join Date', 'Rank', 'Username'], values = 'Bronze Medals',\n              aggfunc = {'Bronze Medals' : np.sum}).sort_values('Bronze Medals', ascending = False)\nbronze_medal.head(20)","c5b5901a":"#analyze total of silver medals based on tier, join date, rank and username\n\n\nsilver_medal = pd.pivot_table(df, index = ['Tier', 'Join Date', 'Rank', 'Username'], values = 'Silver Medals',\n              aggfunc = {'Silver Medals' : np.sum}).sort_values('Silver Medals', ascending = False)\nsilver_medal.head(20)","5c90f29a":"#analyze total of gold medals based on tier, join date, rank and username\n\ngold_medal = pd.pivot_table(df, index = ['Tier', 'Join Date', 'Rank', 'Username'], values = 'Gold Medals',\n              aggfunc = {'Gold Medals' : np.mean}).sort_values('Gold Medals', ascending = False)\ngold_medal.head(20)","28604bb0":"#analyze total of points based on tier, join date, rank and username\n\npoint = pd.pivot_table(df, index = ['Tier', 'Join Date', 'Rank', 'Username'], values = 'Points',\n              aggfunc = {'Points' : np.mean}).sort_values('Points', ascending = False)\npoint.head(20)","45c83ae1":"#visualize number of tier\nplt.figure(figsize = (6,5))\nsector = [np.count_nonzero(df[df['Tier'] == 'grandmaster']),\n          np.count_nonzero(df[df['Tier'] == 'master']),\n          np.count_nonzero(df[df['Tier'] == 'expert'])]\nactivities = ['Grandmaster', 'Master', 'Expert']\nplt.pie(sector, labels = activities, autopct = '%1.f%%')\nplt.title('Number of Tiers', fontsize = 15, fontweight = 'bold')\nplt.show()","03199298":"#visualize total bronze medals based on tier\nchart = df.groupby('Tier')['Bronze Medals'].sum().sort_values(ascending = False).plot(kind = 'bar', color = 'lightseagreen')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 0)\nplt.title('Total Bronze Medals based on Tier', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.xlabel('Tier', fontsize = 12)\nplt.ylabel('Total Bronze Medals', fontsize = 12)\nplt.show()","a8428cad":"#visualize total silver medals based on tier\nchart = df.groupby('Tier')['Silver Medals'].sum().sort_values(ascending = False).plot(kind = 'bar', color = 'dodgerblue')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 0)\nplt.title('Total Silver Medals based on Tier', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.xlabel('Tier', fontsize = 12)\nplt.ylabel('Total Silver Medals', fontsize = 12)\nplt.show()","3dfa4bfa":"#visualize total silver medals based on tier\nchart = df.groupby('Tier')['Gold Medals'].sum().sort_values(ascending = False).plot(kind = 'bar', color = 'salmon')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 0)\nplt.title('Total Gold Medals based on Tier', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.xlabel('Tier', fontsize = 12)\nplt.ylabel('Total Gold Medals', fontsize = 12)\nplt.show()","b81affe7":"#visualize total point medals based on tier\nchart = df.groupby('Tier')['Points'].sum().sort_values(ascending = False).plot(kind = 'bar', color = 'lightseagreen')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 0)\nplt.title('Total Points based on Tier', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.xlabel('Tier', fontsize = 12)\nplt.ylabel('Total Points Medals', fontsize = 12)\nplt.show()","cd617ff1":"#visualize correlation of total points and total bronze medals\nplt.scatter(df['Points'], df['Bronze Medals'], marker = 'o', color = 'darkorange')\nplt.title('Total Points ~ Total Bronze Medals', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.xlabel('Total Points', fontsize = 12)\nplt.ylabel('Total Bronze Medals', fontsize = 12)\nplt.show()","8c8418c8":"#visualize correlation of total points and total silver medals\nplt.scatter(df['Points'], df['Silver Medals'], marker = '+', color = 'maroon')\nplt.title('Total Points ~ Total Silver Medals', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.xlabel('Total Points', fontsize = 12)\nplt.ylabel('Total Silver Medals', fontsize = 12)\nplt.show()","8efeb6f2":"#visualize correlation of total points and total gold medals\nplt.scatter(df['Points'], df['Gold Medals'], marker = '^', color = 'forestgreen')\nplt.title('Total Points ~ Total Gold Medals', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.xlabel('Total Points', fontsize = 12)\nplt.ylabel('Total Gold Medals', fontsize = 12)\nplt.show()","90899000":"#visualize distribution of each variables\ndf.hist(figsize = (8,9))\nplt.show()","9c042bfe":"# show tail of dataset","b5089aa1":"# Corelation Matrix","18f54187":"# show head of dataset","fe53db61":"# Exploratory Data Analysis (EDA)","2fda933a":"# import library","112fe911":"# Understand this importing step LATER ****","9928929c":"# Read Dataset","c0b814dd":"# visualize correlation of each variable using pearson correlation (Linear)"}}