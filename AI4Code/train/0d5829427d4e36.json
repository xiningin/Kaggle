{"cell_type":{"fea5242a":"code","31f6ea42":"code","9a225299":"code","af54f823":"code","58c25388":"code","efbd29d5":"code","e138b77a":"code","998abbcb":"code","acccabd0":"code","fc82dd0f":"code","017d99d7":"code","0b83f6c4":"code","3ccac7f4":"code","bd25e256":"code","628fbfba":"code","23ff18ac":"code","f218a14b":"code","c0244ad0":"code","1202f6ca":"code","49e2dc2d":"code","3f0ceed2":"code","a971ac51":"code","8b2026e0":"code","6ece1107":"code","b4317c96":"code","a90af574":"code","ff57af72":"code","55754d5d":"code","9adbbe12":"code","7e82b0f0":"code","1c5aaca4":"code","25036f2c":"code","aba40269":"code","af2039e9":"code","0de74d5a":"code","6406cd7c":"code","2b8be68e":"code","37294d8b":"code","7434c42c":"code","bf5cdf56":"code","cfead781":"code","4c8a111d":"code","3cbba4bf":"code","90018af9":"code","0684c08e":"code","6bf3408f":"code","d6a3f4b1":"code","3664c07f":"code","6f12035d":"code","87138700":"code","0ff2e4fe":"code","b25d5edd":"code","12c655bc":"code","d3377b86":"code","8373546c":"code","02471235":"code","0ce48eb5":"code","3e83f5dc":"code","4ee284dc":"code","811bbd38":"code","10c831fd":"code","5a0f6a27":"code","bdf4d016":"code","36ea8c8d":"code","1efcf648":"code","8649ed2b":"code","39053faf":"code","dad3e7fe":"code","2e791f78":"code","6e866c6d":"code","3aed1045":"code","328f8b26":"code","6f26d997":"code","1c95ed57":"code","8b3e8ca3":"code","b05a1789":"code","f6a9a1c9":"code","72b3e3f0":"code","162df096":"code","c56f7835":"code","7823c5d6":"code","b22ec964":"code","608d187e":"code","2b6c64d4":"code","23f39701":"code","bbeb55be":"code","3219a06c":"code","12684982":"code","e64466ab":"code","e1652364":"code","2e1f6776":"code","e9133dd8":"code","4853e306":"markdown","8066accb":"markdown","becca717":"markdown","d025ba08":"markdown","9bd8721d":"markdown","31b5a0d5":"markdown","2da92df5":"markdown","28be2c97":"markdown","2bf00525":"markdown","7a7a6f67":"markdown","dd1b8c18":"markdown","e303beff":"markdown","b864a293":"markdown","7b992e13":"markdown","e9e930db":"markdown","208566c5":"markdown","93efc163":"markdown","d4fdb1b1":"markdown","774a6f92":"markdown","c1431f17":"markdown","d48f8cd8":"markdown","2ab97a03":"markdown","82830619":"markdown"},"source":{"fea5242a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31f6ea42":"df = pd.read_csv('..\/input\/dados-das-interfaces-1\/H.dat',sep=\"\\s+\")\ndf.columns = ['Interfaces', 'Propriedades','Fluidos','Valores']\n#print(df)","9a225299":"df.axes","af54f823":"prop = df[\"Propriedades\"].unique().tolist()\nprop.sort()\nprint(len(prop))","58c25388":"interf = df[\"Interfaces\"].unique().tolist()\nprint(len(interf))","efbd29d5":"table = pd.pivot_table(data = df, index = [\"Interfaces\"], columns = [\"Propriedades\"])\n#pd.set_option(\"display.max_rows\", None, \"display.max_columns\", None)\ntable.shape","e138b77a":"df_ = pd.DataFrame(table)\n#df.drop(['Interfaces'], axis=1)\ndf_.columns = prop\ndf_.head()\n\n","998abbcb":"df_.shape","acccabd0":"df_.reset_index(level=0, inplace=True)\ndf_.shape","fc82dd0f":"df_.head()","017d99d7":"tipos_interfaces = [\"heptane\",\"heptol\",\"light\",\"medium\",\"toluene\"]\nl_interf = df_[\"Interfaces\"]\n\ndef stringInList(str, lst):\n    for i in range(len(lst)):\n        if str in lst[i]:\n            lst[i] = str\n            \nfor i in range(len(tipos_interfaces)):\n    \n    stringInList(tipos_interfaces[i],l_interf)\n\ndf_[\"Interfaces\"] = l_interf\n\ndf_.head()\n","0b83f6c4":"df_.info()","3ccac7f4":"df_.to_csv('mycsvfile.csv',index=False)","bd25e256":"import matplotlib.pyplot as plt\nimport seaborn as sns","628fbfba":"plt.figure(figsize = (30,8))\n\nsns.heatmap(df_.isnull(),\n            yticklabels = 0,\n            cbar = False)\n\nplt.title('Vis\u00e3o geral dos valores faltantes')\nplt.xlabel('Propriedades')\nplt.ylabel('Interfaces')\nplt.show()","23ff18ac":"import missingno as msno\n\nmsno.matrix(df_)\nplt.xlabel('Propriedades')\nplt.ylabel('Interfaces')","f218a14b":"dados = df_.iloc[:,-np.int(len(df_)*0.22):-1]\ndados","c0244ad0":"dados.shape","1202f6ca":"g = sns.clustermap(dados.corr(), center=0, cmap=\"vlag\",\n                   dendrogram_ratio=(.1, .2),\n                   cbar_pos=(.02, .32, .03, .2),\n                   linewidths=.75)","49e2dc2d":"fig, axes = plt.subplots(3, sharex=True, figsize=(16,8))\nfig.suptitle('Correla\u00e7\u00e3o de WO.OH.DAT com outras propriedades')\n\nsns.lineplot(ax=axes[0], data=df_, x='WAT.CUR.PLANE.X.dat', y=\"WO.OH.DAT\", hue=\"Interfaces\")\nsns.lineplot(ax=axes[1], data=df_, x='WAT.CUR.PLANE.Y.dat', y=\"WO.OH.DAT\", hue=\"Interfaces\")\nsns.lineplot(ax=axes[2], data=df_, x='WAT.CUR.PLANE.Z.dat', y=\"WO.OH.DAT\", hue=\"Interfaces\")\n\n\nplt.xlabel(\"Propriedades\")\nplt.ylabel(\"WO.OH.DAT\")\n\n","3f0ceed2":"sns.lineplot(x=\"WAT.CUR.PLANE.X.dat\", y=\"WO.OH.DAT\",\n             hue=\"Interfaces\",\n             data=df_)","a971ac51":"sns.lineplot(x=\"WAT.CUR.PLANE.Y.dat\", y=\"WO.OH.DAT\",\n             hue=\"Interfaces\",\n             data=df_)","8b2026e0":"sns.lineplot(x=\"WAT.CUR.PLANE.Z.dat\", y=\"WO.OH.DAT\",\n             hue=\"Interfaces\",\n             data=df_)","6ece1107":"fig, axes = plt.subplots(3, sharex=True, figsize=(16,8))\nfig.suptitle('Correla\u00e7\u00e3o de WO.OH.DAT com outras propriedades')\n\nsns.lineplot(ax=axes[0], data=df_, x='WAT.ORD.VECT1.X.dat', y=\"WO.OH.DAT\", hue=\"Interfaces\")\nsns.lineplot(ax=axes[1], data=df_, x='WAT.ORD.VECT1.Y.dat', y=\"WO.OH.DAT\", hue=\"Interfaces\")\nsns.lineplot(ax=axes[2], data=df_, x='WAT.ORD.VECT1.Z.dat', y=\"WO.OH.DAT\", hue=\"Interfaces\")\n\nplt.xlabel(\"Propriedades\")\nplt.ylabel(\"WO.OH.DAT\")","b4317c96":"sns.lineplot(x=\"WAT.ORD.VECT1.X.dat\", y=\"WO.OH.DAT\",\n             hue=\"Interfaces\",\n             data=df_)","a90af574":"sns.lineplot(x=\"WAT.ORD.VECT1.Y.dat\", y=\"WO.OH.DAT\",\n             hue=\"Interfaces\",\n             data=df_)","ff57af72":"sns.lineplot(x=\"WAT.ORD.VECT1.Z.dat\", y=\"WO.OH.DAT\",\n             hue=\"Interfaces\",\n             data=df_)","55754d5d":"sns.lineplot(x=\"WAT.CUR.PLANE.Z.dat\", y=\"WO.OH.DAT\",\n             hue=\"Interfaces\",\n             data=df_)","9adbbe12":"with sns.axes_style(style='ticks'):\n    g = sns.catplot(x = df_[\"Interfaces\"] , y = \"TDENS.AROMATIC.dat\", data=df_, kind=\"box\")\n    g.set(xlabel =\"Interfaces\", ylabel = \"TDENS.AROMATIC.dat\", title ='Valores de TDENS.AROMATIC.dat nas interfaces')\n    \nplt.xticks(rotation=\"30\")","7e82b0f0":"with sns.axes_style(style='ticks'):\n    g = sns.catplot(x = df_[\"Interfaces\"] , y = \"CUR.Z.HEPTANE.dat\", data=df_, kind=\"box\")\n    g.set(xlabel =\"Interfaces\", ylabel = \"CUR.Z.HEPTANE.dat\", title ='Valores de CUR.Z.HEPTANE.dat nas interfaces')\n    \nplt.xticks(rotation=\"30\")","1c5aaca4":"ax = sns.violinplot(x=\"Interfaces\", y=\"SIGMA.DAT\", data=df_)\nplt.xticks(rotation=\"30\")","25036f2c":"sns.lineplot(x=\"SIGMA.DAT\", y=\"CUR.Z.HEPTANE.dat\",\n             hue=\"Interfaces\",\n             data=df_)","aba40269":"sns.lineplot(x=\"WWHB.DAT\", y=\"WO.TOT.DAT\",\n             hue=\"Interfaces\",\n             data=df_)","af2039e9":"sns.lineplot(x=\"WATER.LP2.DAT\", y=\"WO.TOT.DAT\",\n             hue=\"Interfaces\",\n             data=df_)","0de74d5a":"d1 = df_['WO.TOT.DAT'].to_numpy()\n","6406cd7c":"d2 = df_['WO.HC.DAT'].to_numpy()\nd2","2b8be68e":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.datasets import make_regression\n\nd1 = df_['WO.TOT.DAT'].to_numpy()\n\nd2 = df_['WO.HC.DAT'].to_numpy()\n\nX = d1.reshape(-1, 1)\n\ny = d2.reshape(-1, 1)\n\n# criando e treinando o modelo\nmodel = LinearRegression()\nmodel.fit(X, y)\n","37294d8b":"# para visualizar os coeficientes angular\na = model.coef_\na","7434c42c":"# para visualizar os coeficientes linear\nb = model.intercept_\nb","bf5cdf56":"# R^2\nr2 = model.score(X,y)\nr2","cfead781":"#Previs\u00f5es para o mesmo conjunto passado\ny_previsto = model.predict(X)","4c8a111d":"def aad():\n\n    o = y\n\n    p = y_previsto\n\n    a = 0\n\n    for i in range(len(o)):\n\n        a += (np.abs(np.round(p[i],decimals = 2) - o[i])\/o[i])\n\n    return a\/len(o)*100","3cbba4bf":"def graphic():\n\n    plt.style.use('default')\n    plt.style.use('ggplot')\n\n    fig, ax = plt.subplots(figsize=(8, 4))\n\n    ax.plot(X,y_previsto , color='k', label = ('AAD = ' + str(np.round(aad(),decimals = 2))+ '% '))\n    ax.scatter(X, y, edgecolor='k', facecolor='grey', alpha=0.7, label='Sample data')\n    ax.set_ylabel('WO.HC.DAT', fontsize=14)\n    ax.set_xlabel('WO.TOT.DAT', fontsize=14)\n    ax.text(0.8, 0.1, 'aegis4048.github.io', fontsize=13, ha='center', va='center',\n         transform=ax.transAxes, color='grey', alpha=0.5)\n    ax.legend(facecolor='white', fontsize=11)\n    ax.set_title('$R^2= %.2f$' % r2, fontsize=18)\n\n    fig.tight_layout()\n\n    plt.show()\n    \ngraphic()","90018af9":"from sklearn.model_selection import train_test_split\n\ndado1 = df_['WO.TOT.DAT'].to_numpy()\n\ndado2 = df_['WO.HC.DAT'].to_numpy()\n\nX1 = dado1.reshape(-1, 1)\n\ny1 = dado2.reshape(-1, 1)\n\n#Dividindo o dataset\nX_train, X_test, y_train, y_test = train_test_split(X1, y1, test_size=0.2, random_state=0)\n\n\n#Treinando o algoritmo\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","0684c08e":"# para visualizar os coeficientes angular\na = regressor.coef_\na","6bf3408f":"# para visualizar os coeficientes linear\nb = regressor.intercept_\nb","d6a3f4b1":"from sklearn.metrics import r2_score\nfrom sklearn import metrics\ny_pred = regressor.predict(X_test)\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nprint('R^2:', regressor.score(X_train,y_train))","3664c07f":"def aad1():\n\n    o = y_test\n\n    p = y_pred\n\n    a = 0\n\n    for i in range(len(o)):\n\n        a += (np.abs(np.round(p[i],decimals = 2) - o[i])\/o[i])\n\n    return a\/len(o)*100","6f12035d":"def graphic1():\n    \n\n\n    plt.style.use('default')\n    plt.style.use('ggplot')\n\n    fig, ax = plt.subplots(figsize=(8, 4))\n\n    ax.plot(X_test, y_pred , color='k', label = ('AAD = ' + str(np.round(aad1(),decimals = 2))+ '% '))\n    ax.scatter(X_train, y_train, edgecolor='k', facecolor='grey', alpha=0.7, label='Sample data')\n    ax.set_ylabel('WO.HC.DAT', fontsize=14)\n    ax.set_xlabel('WO.TOT.DAT', fontsize=14)\n    ax.text(0.8, 0.1, 'aegis4048.github.io', fontsize=13, ha='center', va='center',\n         transform=ax.transAxes, color='grey', alpha=0.5)\n    ax.legend(facecolor='white', fontsize=11)\n    ax.set_title('$R^2= %.2f$' % r2, fontsize=18)\n\n    fig.tight_layout()\n\n    plt.show()\n    \n   \n    \ngraphic1()","87138700":"df_ = df_.fillna(0)\n\ndf_","0ff2e4fe":"from sklearn.model_selection import learning_curve\n\n# 80% treino e 20% valida\u00e7\u00e3o\ntrain_sizes = [1, 10, 30, 50, 80, 94]\n\nfeatures = ['WAT.CUR.PLANE.X.dat', 'WAT.ORD.PLANE.X.dat', 'WAT.CUR.VECT1.X.dat', 'WO.OH.DAT']\ntarget = \"SIGMA.DAT\"\n\ntrain_sizes, train_scores, validation_scores = learning_curve(\n    estimator = LinearRegression(),\n    X = df_[features],\n    y = df_[target], train_sizes = train_sizes, cv = 5,\n    scoring = 'neg_mean_squared_error')","b25d5edd":"print('Training scores:\\n\\n', train_scores)\nprint('\\n', '-' * 70) # separator to make the output easy to read\nprint('\\nValidation scores:\\n\\n', validation_scores)","12c655bc":"train_scores_mean = -train_scores.mean(axis = 1)\nvalidation_scores_mean = -validation_scores.mean(axis = 1)\nprint('Mean training scores\\n\\n', pd.Series(train_scores_mean, index = train_sizes))\nprint('\\n', '-' * 20) # separator\nprint('\\nMean validation scores\\n\\n',pd.Series(validation_scores_mean, index = train_sizes))","d3377b86":"import matplotlib.pyplot as plt\n\nplt.style.use('seaborn')\nplt.plot(train_sizes, train_scores_mean, label = 'Training error')\nplt.plot(train_sizes, validation_scores_mean, label = 'Validation error')\nplt.ylabel('MSE', fontsize = 14)\nplt.xlabel('Training set size', fontsize = 14)\nplt.title('Learning curves for a multiple regression model', fontsize = 18, y = 1.03)\nplt.legend()\nplt.ylim(0,30)","8373546c":"def strings_in_a_list(n, s):\n    if n == 0:\n        return []\n    else:\n        l = strings_in_a_list(n - 1, s)\n        l.append(s)\n        return l","02471235":"heptane = pd.read_csv('..\/input\/interfaces\/heptane.dat',sep=\";\")\nheptane.columns = ['P','N','A','DensityOil','Salinity','Na','K','Ca','Mg','Cl','SO4','IFT']\n\nheptane_h = strings_in_a_list(len(heptane['P']) , 'heptane')\n\nheptane['Type'] = heptane_h\n\nheptane = heptane[['Type','IFT','P','N','A','DensityOil','Salinity','Na','K','Ca','Mg','Cl','SO4']]\n\nheptane","0ce48eb5":"heptane_todos = df_[df_['Interfaces'] == \"heptane\"]\n\nheptane_todos","3e83f5dc":"heptane_prop = heptane_todos.loc[:,['HEPTANE' in i for i in heptane_todos.columns]]\n\nheptane_prop","4ee284dc":"heptane_curtose = heptane_prop.loc[0:,['CUR' in i for i in heptane_prop.columns]]\n\nheptane_curtose","811bbd38":"heptane_curtose.shape","10c831fd":"salinidade_heptane = heptane.loc[:2,['Salinity' in i for i in heptane.columns]]\n\nsalinidade_heptane","5a0f6a27":"heptane_tort = heptane_prop.loc[0:,['TORT' in i for i in heptane_prop.columns]]\n\nheptane_tort","bdf4d016":"heptane_ent = heptane_prop.loc[0:,['ENT' in i for i in heptane_prop.columns]]\n\nheptane_ent","36ea8c8d":"heptane_ent.shape","1efcf648":"heptol = pd.read_csv('..\/input\/interfaces\/heptol.dat',sep=\";\")\nheptol.columns = ['P','N','A','DensityOil','Salinity','Na','K','Ca','Mg','Cl','SO4','IFT']\n\nheptol_h = strings_in_a_list(len(heptol['P']) , 'heptol')\n\nheptol['Type'] = heptol_h\n\nheptol = heptol[['Type','IFT','P','N','A','DensityOil','Salinity','Na','K','Ca','Mg','Cl','SO4']]\n\nheptol","8649ed2b":"heptol = df_[df_['Interfaces'] == \"heptol\"]\n\nheptol","39053faf":"light = pd.read_csv('..\/input\/interfaces\/light.dat',sep=\";\")\nlight.columns = ['P','N','A','DensityOil','Salinity','Na','K','Ca','Mg','Cl','SO4','IFT']\n\nlight_h = strings_in_a_list(len(light['P']) , 'light')\n\nlight['Type'] = light_h\n\nlight = light[['Type','IFT','P','N','A','DensityOil','Salinity','Na','K','Ca','Mg','Cl','SO4']]\n\nlight","dad3e7fe":"light_todos = df_[df_['Interfaces'] == \"light\"]\n\nlight_todos","2e791f78":"hexane_prop = light_todos.loc[:,['HEXANE' in i for i in light_todos.columns]]\n\nhexane_prop.shape","6e866c6d":"hexane_curt = hexane_prop.loc[:,['CUR' in i for i in hexane_prop.columns]]\n\nhexane_curt.shape","3aed1045":"hexane_tort = hexane_prop.loc[:,['TORT' in i for i in hexane_prop.columns]]\n\nhexane_tort.shape","328f8b26":"hexane_ent = hexane_prop.loc[:,['ENT' in i for i in hexane_prop.columns]]\n\nhexane_ent.shape","6f26d997":"oct_prop = light_todos.loc[:,['OCTANE' in i for i in light_todos.columns]]\n\noct_prop.shape","1c95ed57":"oct_curt = oct_prop.loc[:,['CUR' in i for i in oct_prop.columns]]\n\noct_curt.shape","8b3e8ca3":"oct_tort = oct_prop.loc[:,['TORT' in i for i in oct_prop.columns]]\n\noct_tort.shape","b05a1789":"oct_ent = oct_prop.loc[:,['ENT' in i for i in oct_prop.columns]]\n\noct_ent.shape","f6a9a1c9":"non_prop = light_todos.loc[:,['NONANE' in i for i in light_todos.columns]]\n\nnon_prop.shape","72b3e3f0":"non_curt = non_prop.loc[:,['CUR' in i for i in non_prop.columns]]\n\nnon_curt.shape","162df096":"non_tort = non_prop.loc[:,['TORT' in i for i in non_prop.columns]]\n\nnon_tort.shape","c56f7835":"non_ent = non_prop.loc[:,['ENT' in i for i in non_prop.columns]]\n\nnon_ent.shape","7823c5d6":"ben_prop = light_todos.loc[:,['BENZENE' in i for i in light_todos.columns]]\n\nben_prop.shape","b22ec964":"ben_curt = ben_prop.loc[:,['CUR' in i for i in ben_prop.columns]]\n\nben_curt.shape","608d187e":"ben_tort = ben_prop.loc[:,['TORT' in i for i in ben_prop.columns]]\n\nben_tort.shape","2b6c64d4":"ben_ent = ben_prop.loc[:,['ENT' in i for i in ben_prop.columns]]\n\nben_ent.shape","23f39701":"medium = pd.read_csv('..\/input\/interfaces\/medium.dat',sep=\";\")\nmedium.columns = ['P','N','A','DensityOil','Salinity','Na','K','Ca','Mg','Cl','SO4','IFT']\n\nmedium_h = strings_in_a_list(len(medium['P']) , 'medium')\n\nmedium['Type'] = medium_h\n\nmedium = medium[['Type','IFT','P','N','A','DensityOil','Salinity','Na','K','Ca','Mg','Cl','SO4']]\n\nmedium","bbeb55be":"medium = df_[df_['Interfaces'] == \"medium\"]\n\nmedium","3219a06c":"toluene = pd.read_csv('..\/input\/interfaces\/toluene.dat',sep=\";\")\ntoluene.columns = ['P','N','A','DensityOil','Salinity','Na','K','Ca','Mg','Cl','SO4','IFT']\n\ntoluene_h = strings_in_a_list(len(toluene['P']) , 'toluene')\n\ntoluene['Type'] = toluene_h\n\ntoluene = toluene[['Type','IFT','P','N','A','DensityOil','Salinity','Na','K','Ca','Mg','Cl','SO4']]\n\n\ntoluene","12684982":"toluene_todos = df_[df_['Interfaces'] == \"toluene\"]\n\ntoluene_todos","e64466ab":"toluene_prop = toluene_todos.loc[:,['TOLUENE' in i for i in toluene_todos.columns]]\n\ntoluene_prop.shape\n","e1652364":"toluene_curt = toluene_prop.loc[:,['CUR' in i for i in toluene_prop.columns]]\n\ntoluene_curt.shape","2e1f6776":"toluene_tort = toluene_prop.loc[:,['TORT' in i for i in toluene_prop.columns]]\n\ntoluene_tort.shape","e9133dd8":"toluene_ent = toluene_prop.loc[:,['ENT' in i for i in toluene_prop.columns]]\n\ntoluene_ent.shape","4853e306":"# **CURVA DE APRENDIZADO - Regress\u00e3o de multiplas vari\u00e1veis**","8066accb":"# 1. **Manipula\u00e7\u00e3o do dataset**","becca717":"Heptane","d025ba08":"Tolune","9bd8721d":"Heptol","31b5a0d5":"**Quantidade de propriedades \u00fanicas no dataset.**","2da92df5":"**Obtendo a tabela de Propriedades X Interfaces.**","28be2c97":"Curtose do heptano x salinidade","2bf00525":"Medium","7a7a6f67":"Entropia do heptano","dd1b8c18":"# 1. **Regress\u00e3o linear - modelo2**","e303beff":"# CONTINUA\u00c7\u00c3O 20\/07\/2021","b864a293":"# 1. **Regress\u00e3o Linear - modelo1**","7b992e13":"Light","e9e930db":"hexane\n","208566c5":"Nonane","93efc163":"**Quantidade de interfaces no dataset.**","d4fdb1b1":"**Clusteriza\u00e7\u00e3o das Interfaces**","774a6f92":"Octane","c1431f17":"Benzene","d48f8cd8":"Tortuosidade do heptano","2ab97a03":"# 2.**Contru\u00e7\u00e3o dos gr\u00e1ficos**","82830619":"**Importa\u00e7\u00e3o do dataset.**"}}