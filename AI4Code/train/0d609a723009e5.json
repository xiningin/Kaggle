{"cell_type":{"9f453288":"code","542ca4b3":"code","5a9a9f0b":"code","675b8c5a":"code","f2f0a752":"code","c75c9aea":"code","22a6835a":"code","8f64ed8d":"code","8bfde7d3":"code","75b33faa":"code","092a5122":"code","1aae8b2c":"code","cab704bd":"code","3cac80ff":"code","f8810262":"code","70b5f239":"code","140f16b0":"code","b860e81a":"code","159d81fb":"code","959b34ef":"code","b6d29a69":"code","e7601ed7":"code","c140d40c":"code","8dfc7fda":"code","4faa932c":"code","be26392e":"code","e4f7b227":"code","3212cb28":"code","1bc46f4a":"code","81aa2620":"code","1ba0e0f4":"markdown","85fa3778":"markdown","5792f001":"markdown","a49fdd1c":"markdown","65d4413e":"markdown","b1e4d1cf":"markdown","d86aa655":"markdown","909d209b":"markdown"},"source":{"9f453288":"#importing required python libraries\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom matplotlib import style\n\n\n","542ca4b3":"#reading the data as two seperate DataFrames\ntest_set = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntrain_set = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")","5a9a9f0b":"#No. of rows and columns in the training set\ntrain_set.shape","675b8c5a":"#Exploratory Data Analysis\ntrain_set.info()","f2f0a752":"#Exploratory Data Analysis\ntrain_set.describe()","c75c9aea":"#Exploratory Data Analysis\ntrain_set.head(8)","22a6835a":"#Exploratory Data Analysis\ntrain_set.columns.values","8f64ed8d":"#Getting a count of the number of survivors\ntrain_set[\"Survived\"].value_counts()","8bfde7d3":"#visualising the count of number of survivors\nsns.countplot(train_set[\"Survived\"],label=\"Count\")","75b33faa":"#finding missing values in the training data\nprint(train_set.isnull().sum())","092a5122":"#finding missing values in the test data\nprint(test_set.isnull().sum())","1aae8b2c":"#we will now combine them both and then perform data cleansing\nframes=[train_set,test_set]\ndataset=pd.concat(frames)\nprint(\"Missing values in the age column in the entire dataset:\"+str(dataset[\"Age\"].isnull().sum()))\nprint(\"Missing values percentage:\"+str(round(dataset[\"Age\"].isnull().sum()\/len(dataset)*100))+\"%\")\n","cab704bd":"#replacing the missing values of age with median values of the Sex and Pclass groupby object \ngbsexclass=dataset.groupby([\"Sex\",\"Pclass\"])\ndef impute_median(series):\n    return series.fillna(series.median())\ndataset.Age = gbsexclass[\"Age\"].transform(impute_median)","3cac80ff":"#finding details of the one missing value in the \"Fare\" column\ndataset.loc[dataset[\"Fare\"].isnull()]","f8810262":"#replacing the missing value with the median of fares paid by other people in the same groups as him\nmr_thomas=dataset.loc[(dataset['Pclass']==3) & (dataset[\"SibSp\"]==0) & (dataset[\"Embarked\"]==\"S\")][\"Fare\"].median()\nprint(mr_thomas)\ndataset.loc[dataset[\"Fare\"].isnull(),\"Fare\"]=mr_thomas","70b5f239":"#missing values in the cabin column\ndisplay(dataset[\"Cabin\"].unique())\nprint(\"There are \" + str(dataset[\"Cabin\"].nunique()) + \" Different values for cabin and \" + str(dataset[\"Cabin\"].isnull().sum()) + \" cases are missing \")","140f16b0":"#keep all first letters of cabin in a new variable and use M for missing\ndataset[\"Deck\"] = dataset[\"Cabin\"].apply(lambda s: s[0] if pd.notnull(s) else \"M\")","b860e81a":"#plotting survival rates for different cabins\ndataset[[\"Deck\",\"Survived\"]].groupby(\"Deck\")[\"Survived\"].mean().plot(kind=\"bar\" , figsize=(15,7))\nplt.suptitle(\"Survival rates for different cabins\")\n\n","159d81fb":"#grouping together some cabins\nidx=dataset[dataset[\"Deck\"]==\"T\"].index\ndataset.loc[idx,\"Deck\"]=\"A\"\ndataset[\"Deck\"]=dataset[\"Deck\"].replace([\"A\",\"B\",\"C\"],\"ABC\")\ndataset[\"Deck\"]=dataset[\"Deck\"].replace([\"D\",\"E\"],\"DE\")\ndataset[\"Deck\"]=dataset[\"Deck\"].replace([\"F\",\"G\"],\"FG\")\ndataset[\"Deck\"].value_counts()\n","959b34ef":"#replacing the two missing values in Embarked Column\ndataset.loc[dataset[\"Embarked\"].isnull() , \"Embarked\"] = \"S\"","b6d29a69":"# Visualize the count of survivors for columns 'who', 'sex', 'pclass', 'sibsp', 'parch', and 'embarked'\ncols = [\"Age\", \"Sex\", \"Pclass\", \"SibSp\", \"Parch\", \"Embarked\"]\n\nn_rows = 2\nn_cols = 3\n\n# The subplot grid and the figure size of each graph\n# This returns a Figure (fig) and an Axes Object (axs)\nfig, axs = plt.subplots(n_rows, n_cols, figsize=(n_cols*3.2,n_rows*3.2))\n\nfor r in range(0,n_rows):\n    for c in range(0,n_cols):  \n        \n        i = r*n_cols+ c #index to go through the number of columns       \n        ax = axs[r][c] #Show where to position each subplot\n        sns.countplot(train_set[cols[i]], hue=train_set[\"Survived\"], ax=ax)\n        ax.set_title(cols[i])\n        ax.legend(title=\"Survived\", loc='upper right') \n        \nplt.tight_layout()   #tight_layout","e7601ed7":"#look at survival rate by sex\ndataset.groupby(\"Sex\")[[\"Survived\"]].mean()","c140d40c":"#survival rate by sex and class\ndataset.pivot_table(\"Survived\", index=\"Sex\", columns=\"Pclass\")","8dfc7fda":"#visualising the above pivot table\ndataset.pivot_table(\"Survived\", index=\"Sex\", columns=\"Pclass\").plot()","4faa932c":"#survival rate of each class\nsns.barplot(data=dataset , x=\"Pclass\", y=\"Survived\")","be26392e":"#correlation matrix\nCorrMatrix=dataset.corr()\nprint(CorrMatrix)\n","e4f7b227":"#heatmap \nplt.figure(figsize=(20,15))\nax=sns.heatmap(CorrMatrix,annot=True)\n","3212cb28":"#forming some new features from the existing ones\ndataset[\"Ticket_Frequency\"]=dataset.groupby(\"Ticket\")[\"Ticket\"].transform(\"count\")\ndataset[[\"Ticket_Frequency\",\"Survived\"]].groupby(\"Ticket_Frequency\").mean()","1bc46f4a":"#dropping redundant columns\ndataset.drop([\"Ticket\",\"Cabin\"],axis=1,inplace=True)","81aa2620":"#encoding categorical values \nfrom sklearn import preprocessing\n\n#Encode Embarked column\nle = preprocessing.LabelEncoder()\ndataset[\"Embarked\"] = le.fit_transform(dataset[\"Embarked\"])\n\n\n#Encode Deck column\nle = preprocessing.LabelEncoder()\ndataset[\"Deck\"] = le.fit_transform(dataset[\"Deck\"])\n\n#Print the NEW unique values in the columns\nprint(dataset[\"Embarked\"].unique())\nprint(dataset[\"Deck\"].unique())","1ba0e0f4":"From the table above we can see that about 74% of females survived whereas only 18% of males survived.","85fa3778":"From the pivot table above, we see that females in first class had a survival rate of about 96.8%, meaning the majority of them survived.\nMales in third class had the lowest survival rate at about 13.54%, meaning the majority of them did not survive.","5792f001":"From the charts above, we can see that a man (a male 18 or older) is not likely to survive from the chart **Who**.\n\nFemales are most likely to survive from the chart **Sex**.\n\nThird class is most likely to not survive by chart **Pclass**.\n\nIf you have 0 siblings or spouses on board, you are not likely to survive according to chart **SibSp**.\n\nIf you have 0 parents or children on board, you are not likely to survive according to the **Parch** chart.\n\nIf you embarked from Southampton (S), you are not likely to survive according to the **Embarked** chart.\n","a49fdd1c":"As expected there are some differences between the survival rates for each ticket frequency.","65d4413e":"**20% of our values in the \"Age\" column are missing**","b1e4d1cf":"A little over 60% of the passengers in first class survived. Less than 30% of passengers in third class survived. That means less than half of the passengers in third class survived, compared to the passengers in first class.","d86aa655":"We see that the heatmap does not show any value of more than 0.5 . ","909d209b":"**Notice that there were more passengers who didnt survive(549) than those who did(342)**."}}