{"cell_type":{"ba94169c":"code","44d6b2ab":"code","df2ea23f":"code","c735583e":"code","ea310ef2":"code","ce7b357b":"code","9eea80f8":"code","fa1e6af0":"code","a2108901":"code","9a4d2f8d":"code","9963ed8a":"code","275bbdaa":"code","d84048d1":"code","fb680dde":"code","ae804582":"code","9c1887a6":"code","c3537a60":"code","268cf6d2":"code","eb2786e7":"code","1ba5b989":"code","8a861ae9":"code","df4003e4":"code","cd962ce5":"code","04fc94b7":"code","50fee3b5":"code","683db3ea":"code","089fa160":"code","e93979a1":"code","00efe3f9":"code","e8e51e0a":"code","bb4e2092":"code","f4869921":"code","f1353afb":"code","7dd80b45":"code","39262bf6":"code","53249ef4":"code","732004ac":"code","04297420":"markdown","549ecd62":"markdown","985e9699":"markdown","59b70157":"markdown","90accf1c":"markdown","ccda23a9":"markdown","2717c98a":"markdown","1891e6ae":"markdown","c41441ea":"markdown","b788baf4":"markdown","5338d9b0":"markdown","da78acfc":"markdown","a2d1e58c":"markdown","dfc2fde7":"markdown","56698d4f":"markdown","440b9baf":"markdown","0ae751b4":"markdown","e78e86c6":"markdown","46637233":"markdown","e021d619":"markdown","0da643e5":"markdown","52104000":"markdown","918b1b9a":"markdown","70342089":"markdown","8622d553":"markdown","f80f46e3":"markdown","fc2deee0":"markdown","4732ac0b":"markdown","9f2454fe":"markdown"},"source":{"ba94169c":"import os\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nimport cv2\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models\nfrom scipy.io import loadmat\nfrom keras.utils import to_categorical\nimport itertools\n\nimport warnings\nwarnings.simplefilter('ignore')","44d6b2ab":"# Thanks to https:\/\/www.kaggle.com\/mosius\/cnn-over-mnist\ndef load_mnist_dataset():\n    \"\"\"\n    Load MNIST-original dataset\n\n    Returns:\n    - mnist_data -- an array of arrays in the shape of (784,)\n    - mnist_label -- an array of labels\n    - classes -- array of labels classes(a set of labels)\n    - shape -- shape of data item\n    - channels_count -- channel count of data images\n    \"\"\"\n\n    mnist = loadmat(\"..\/input\/mnist-original\/mnist-original.mat\")\n    mnist_data = mnist[\"data\"].T\n    mnist_data = mnist_data.reshape(len(mnist_data), 28, 28, 1)\n    mnist_label = mnist[\"label\"][0]\n    count = len(set(mnist_label))\n    return mnist_data, mnist_label, count, (28, 28, 1)","df2ea23f":"# Download data from MNIST-original dataset\ndata, labels, classes_count, data_shape = load_mnist_dataset()\n\nprint(\"data shape: \" + str(data.shape))\nprint(\"labels shape: \" + str(labels.shape))\nprint(\"classes count: \" + str(classes_count))","c735583e":"def plot_images_sample(X, Y):\n    # Draw plot for images sample\n    \n    plt.figure(figsize=(10,10))\n    rand_indicies = np.random.randint(len(X), size=25)\n    for i in range(25):\n        plt.subplot(5,5,i+1)\n        plt.xticks([])\n        plt.yticks([])\n        plt.grid(False)\n        index = rand_indicies[i]\n        plt.imshow(np.squeeze(X[index]), cmap=plt.cm.binary)\n        plt.xlabel(Y[index])\n    plt.show()","ea310ef2":"# Draw plot for images sample\nplot_images_sample(data, labels)","ce7b357b":"def fe_data(df, target):\n    # FE: scaling data ant transform target to categorical\n    df = df \/ 255.\n    target = to_categorical(target)\n    return df, target","9eea80f8":"# FE and data splitting\ntest_size_part = 0.1\nx_train_orig, x_test_orig, y_train_orig, y_test_orig = train_test_split(data, labels, test_size=test_size_part, shuffle=True)\nX_train, Y_train = fe_data(x_train_orig, y_train_orig)\nX_test, Y_test = fe_data(x_test_orig, y_test_orig)","fa1e6af0":"# Thanks to https:\/\/www.kaggle.com\/mosius\/cnn-over-mnist\n# Model building\nmodel = models.Sequential([\n        layers.Conv2D(8, kernel_size=(4, 4), strides=(1, 1), padding='same', activation='relu', input_shape=data_shape),\n        layers.MaxPooling2D((8, 8), padding='same'),\n        layers.Conv2D(16, kernel_size=(2, 2), strides=(1, 1), padding='same', activation='relu'),\n        layers.MaxPooling2D((4, 4), padding='same'),\n        layers.Flatten(),\n        layers.Dense(classes_count)\n    ])\n\nmodel.summary()","a2108901":"# Model training\nepochs_num = 10\nvalidation_split_part = 0.2\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\nhistory = model.fit(X_train, Y_train, epochs=epochs_num, validation_split=validation_split_part)","9a4d2f8d":"# Draw plot for CNN training\nplt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['val_accuracy'], label='val_accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.ylim([0.5, 1])\nplt.legend(loc='lower right')\nplt.show()","9963ed8a":"# Print test prediction accuracy\ntest_loss, test_acc = model.evaluate(X_test, Y_test, verbose=2)\nprint(\"test accuracy: \" + str(test_acc))","275bbdaa":"def get_predictions(X_test):\n    # Digits prediction\n\n    predictions = model.predict(X_test)\n    predictions = np.argmax(predictions, axis=1)\n    \n    return predictions","d84048d1":"# Prediction and display it\npredictions = get_predictions(X_test)\nplot_images_sample(X_test, predictions)","fb680dde":"# Thanks to https:\/\/www.kaggle.com\/vbmokin\/tensorflow-keras-gpu-for-chinese-mnist-prediction\ndef create_trace(x,y,ylabel,color):\n        trace = go.Scatter(\n            x = x,y = y,\n            name=ylabel,\n            marker=dict(color=color),\n            mode = \"markers+lines\",\n            text=x\n        )\n        return trace\n    \ndef plot_accuracy_and_loss(train_model):\n    hist = train_model.history\n    acc = hist['accuracy']\n    val_acc = hist['val_accuracy']\n    loss = hist['loss']\n    val_loss = hist['val_loss']\n    epochs = list(range(1,len(acc)+1))\n    #define the traces\n    trace_ta = create_trace(epochs,acc,\"Training accuracy\", \"Green\")\n    trace_va = create_trace(epochs,val_acc,\"Validation accuracy\", \"Red\")\n    trace_tl = create_trace(epochs,loss,\"Training loss\", \"Blue\")\n    trace_vl = create_trace(epochs,val_loss,\"Validation loss\", \"Magenta\")\n    fig = tools.make_subplots(rows=1,cols=2, subplot_titles=('Training and validation accuracy',\n                                                             'Training and validation loss'))\n    #add traces to the figure\n    fig.append_trace(trace_ta,1,1)\n    fig.append_trace(trace_va,1,1)\n    fig.append_trace(trace_tl,1,2)\n    fig.append_trace(trace_vl,1,2)\n    #set the layout for the figure\n    fig['layout']['xaxis'].update(title = 'Epoch')\n    fig['layout']['xaxis2'].update(title = 'Epoch')\n    fig['layout']['yaxis'].update(title = 'Accuracy', range=[0,1])\n    fig['layout']['yaxis2'].update(title = 'Loss', range=[0,1])\n    #plot\n    iplot(fig, filename='accuracy-loss')","ae804582":"# Plotting the loss error (Plotly)\nplot_accuracy_and_loss(history)","9c1887a6":"def plot_cm(train, target_train):\n# Look at confusion matrix \n# Thanks to https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6\n\n    def plot_confusion_matrix(cm, classes,\n                              normalize=False,\n                              title='Confusion matrix',\n                              cmap=plt.cm.Blues):\n        \"\"\"\n        This function prints and plots the confusion matrix.\n        Normalization can be applied by setting `normalize=True`.\n        \"\"\"\n        plt.imshow(cm, interpolation='nearest', cmap=cmap)\n        plt.title(title)\n        plt.colorbar()\n        tick_marks = np.arange(len(classes))\n        plt.xticks(tick_marks, classes, rotation=45)\n        plt.yticks(tick_marks, classes)\n\n        if normalize:\n            cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n        thresh = cm.max() \/ 2.\n        for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n            plt.text(j, i, cm[i, j],\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n\n        plt.tight_layout()\n        plt.ylabel('True label')\n        plt.xlabel('Predicted label')\n\n    # Predict the values from the validation dataset\n    Y_pred = model.predict(train)\n    # Convert predictions classes to one hot vectors \n    Y_pred_classes = np.argmax(Y_pred,axis = 1) \n    # Convert validation observations to one hot vectors\n    Y_true = np.argmax(target_train,axis = 1) \n    # compute the confusion matrix\n    confusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n    # plot the confusion matrix\n    plot_confusion_matrix(confusion_mtx, classes = range(10)) ","c3537a60":"# Draw confusing matrix for training data\nplot_cm(X_train, Y_train)","268cf6d2":"# Draw confusing matrix for test data\nplot_cm(X_test, Y_test)","eb2786e7":"def pred_wrong_display_MNIST_dataset(X_test, predictions, Y_test):\n    # Displays misclassified digits from MNIST dataset\n    \n    X_test_wrong = []\n    predictions_wrong = []\n    Y_test_pred = []\n    for i in range(len(X_test)):\n        Y_test_pred.append(np.argmax(Y_test[i]))\n        if predictions[i] != Y_test_pred[i]:\n            #print(i, predictions[i], Y_test_pred[i])\n            X_test_wrong.append(X_test[i])\n            predictions_wrong.append(predictions[i])\n\n    plot_images_sample(X_test_wrong, predictions_wrong)\n        \n    print('Accuracy is', round(accuracy_score(Y_test_pred, predictions),3))\n    \n    return Y_test_pred","1ba5b989":"# Displays misclassified digits from MNIST\nY_test_pred = pred_wrong_display_MNIST_dataset(X_test, predictions, Y_test)","8a861ae9":"# Find all images in input folder\ndata_files = []\nfor dirname, _, filenames in os.walk('..\/input'):\n    for filename in filenames:\n        data_files.append(os.path.join(dirname, filename))\ndata_files","df4003e4":"# Download data\n#image_file = data_files[1]\nimage_file = '..\/input\/typographic-digits-first-10-fonts\/Goudy_Stout_italic.png'\nprint(image_file[image_file.rfind('\/')+1:-4])\nimage_test = cv2.imread(image_file)\nplt.imshow(image_test)\nplt.show()","cd962ce5":"erode_kernel = 3\nthreshold_basic = 100","04fc94b7":"def digits_finder(image_file: str, out_size=28):\n    # Find digits on the image_file and transform it to [-1, out_size, out_size, 1]\n    \n    image_test = cv2.imread(image_file)\n    gray_test = cv2.cvtColor(image_test, cv2.COLOR_BGR2GRAY)\n    ret, thresh = cv2.threshold(gray_test, threshold_basic, 255, cv2.THRESH_BINARY)\n    image_erode = cv2.erode(thresh, np.ones((erode_kernel, erode_kernel), np.uint8), iterations=1)\n\n    # Find contours\n    contours, hierarchy = cv2.findContours(image_erode, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)\n    output = image_test.copy()\n\n    digits = []\n    j = 0\n    labels = []\n    for idx, contour in enumerate(contours):\n        (x, y, w, h) = cv2.boundingRect(contour)\n        if (hierarchy[0][idx][3] == 0):\n            cv2.rectangle(output, (x, y), (x + w, y + h), (70, 0, 0), 1)\n            digit_crop = gray_test[y:y + h, x:x + w]\n\n            # Resize digit canvas to square\n            size_max = max(w, h)\n            print(j, w*h)\n            digit_square = 255 * np.ones(shape=[size_max, size_max], dtype=np.uint8)\n            if w > h:\n                y_pos = size_max\/\/2 - h\/\/2\n                digit_square[y_pos:y_pos + h, 0:w] = digit_crop\n            elif w < h:\n                x_pos = size_max\/\/2 - w\/\/2\n                digit_square[0:h, x_pos:x_pos + w] = digit_crop\n            else:\n                digit_square = digit_crop\n            \n            # Resize digit to 28x28 and add digit and its X-coordinate\n            digits.append((x,(cv2.resize(digit_square, (out_size, out_size), interpolation=cv2.INTER_AREA))))\n            labels.append(str(j))\n            j += 1\n            \n\n    # Sort array in place by X-coordinate\n    digits.sort(key=lambda x: x[0], reverse=False)\n    \n    # Tranform digits to tensor\n    digits_new =[]\n    for i in range(len(digits)):\n        digits_new.append(digits[i][1])\n    digits_res = np.reshape(digits_new, (10, 28, 28, 1))\n\n    return digits_res, labels","50fee3b5":"# Preprocessing data\nX_user_test, Y_user_test = digits_finder(image_file)","683db3ea":"def plot_images_test(X, Y):\n    # Draw plot for images sample\n    \n    plt.figure(figsize=(10,10))\n    plt.gray()\n    for i in range(len(Y)):        \n        plt.subplot(1,len(Y),i+1)\n        plt.xticks([])\n        plt.yticks([])\n        plt.grid(False)\n        plt.imshow(np.squeeze(X[i]))\n        plt.xlabel(Y[i])\n    plt.show()","089fa160":"# Draw plot for images sample\nplot_images_test(X_user_test, Y_user_test)","e93979a1":"# FE\nX_user_test, Y_user_test = fe_data(X_user_test, Y_user_test)","00efe3f9":"# Color inversion \nX_user_test = 1-X_user_test","e8e51e0a":"# Prediction and display it\npredictions_user = get_predictions(X_user_test)\nplot_images_test(X_user_test, predictions_user)","bb4e2092":"plot_cm(X_user_test, Y_user_test)","f4869921":"def pred_wrong_display_for_user_dataset(X_test, predictions, Y_test):\n    # Displays misclassified digits from user's dataset\n    \n    X_test_wrong = []\n    predictions_wrong = []\n    Y_test_pred = []\n    for i in range(len(X_test)):\n        Y_test_pred.append(np.argmax(Y_test[i]))\n        if predictions[i] != Y_test_pred[i]:\n            #print(i, predictions[i], Y_test_pred[i])\n            X_test_wrong.append(X_test[i])\n            predictions_wrong.append(predictions[i])\n\n    plot_images_test(X_test_wrong, predictions_wrong)\n        \n    print('Accuracy is', round(accuracy_score(Y_test_pred, predictions),3))\n    \n    return Y_test_pred","f1353afb":"Y_user_test_pred = pred_wrong_display_for_user_dataset(X_user_test, predictions_user, Y_user_test)","7dd80b45":"X_train[100][10]","39262bf6":"X_user_test[0][6]","53249ef4":"X_user_test[1][6]","732004ac":"X_user_test[9][6]","04297420":"### Confuse matrix","549ecd62":"**TASK**: Experiment with test_size_part","985e9699":"### Plotting the loss error (Plotly)","59b70157":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [MNIST-digits model training](#2)\n    - [Download data](#2.1)\n    - [EDA & FE](#2.2)\n    - [Model training](#2.3)\n    - [Prediction](#2.4)    \n    - [Results visualization: plotting the loss error, confusing matrix, outliers](#2.5)\n1. [User-digits prediction and analyze](#3)\n    - [Download data](#3.1)\n    - [Preprocessing](#3.2)\n    - [EDA & FE](#3.3)\n    - [Prediction](#3.4) \n    - [Results visualization: confusing matrix, outliers](#3.5)","90accf1c":"### Outliers analysis","ccda23a9":"### 3.2. Preprocessing<a class=\"anchor\" id=\"3.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","2717c98a":"**TASKS**: Experiment with CNN architecture and parameters:\n* number of layers\n* Conv2D parameters in each layers: number of neurons, kernel_size, strides, padding, activation functions\n* MaxPooling2D parameters\n* Dropout (add or no)\n* Softmax (add or no)\n* etc.","1891e6ae":"### 3.5. Results visualization: confusing matrix, outliers<a class=\"anchor\" id=\"3.5\"><\/a>\n\n[Back to Table of Contents](#0.1)","c41441ea":"### 2.2. EDA & FE<a class=\"anchor\" id=\"2.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","b788baf4":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)","5338d9b0":"### 3.4. Prediction<a class=\"anchor\" id=\"3.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","da78acfc":"### Acknowledgements:\n* dataset [MNIST Original](https:\/\/www.kaggle.com\/avnishnish\/mnist-original)\n* [CNN over MNIST](https:\/\/www.kaggle.com\/mosius\/cnn-over-mnist)\n* [Data Science for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/data-science-for-tabular-data-advanced-techniques)\n* [Data Science with DL & NLP: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/data-science-with-dl-nlp-advanced-techniques)\n* [AI-ML-DS Training. L3AT: NH4 - NN models](https:\/\/www.kaggle.com\/vbmokin\/ai-ml-ds-training-l3at-nh4-nn-models)\n* [Introduction to CNN Keras - 0.997 (top 6%)](https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6)\n* [Tensorflow\/Keras\/GPU for Chinese MNIST Prediction](https:\/\/www.kaggle.com\/gpreda\/tensorflow-keras-gpu-for-chinese-mnist-prediction)","a2d1e58c":"**TASKS**: Experiment with parameters:\n* erode_kernel\n* threshold_basic","dfc2fde7":"<a class=\"anchor\" id=\"0\"><\/a>\n# [AI-ML-DS : Training for beginners](https:\/\/www.kaggle.com\/vbmokin\/ai-ml-ds-training-for-beginners-in-kaggle). Level 4 (very difficult). 2021\n## Kaggle GM, Prof. [@vbmokin](https:\/\/www.kaggle.com\/vbmokin)\n### [Vinnytsia National Technical University](https:\/\/vntu.edu.ua\/), Ukraine\n#### [Chair of the System Analysis and Information Technologies](http:\/\/mmss.vntu.edu.ua\/index.php\/ua\/)","56698d4f":"## Dataset [MNIST models testing: typographic digits](https:\/\/www.kaggle.com\/vbmokin\/typographic-digits-first-10-fonts)\n\n\nYour upvote for my dataset are most welcome.","440b9baf":"### Tensor values output","0ae751b4":"### 3.1. Download data<a class=\"anchor\" id=\"3.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","e78e86c6":"### 2.5. Results visualization: plotting the loss error, confusing matrix, outliers<a class=\"anchor\" id=\"2.5\"><\/a>\n\n[Back to Table of Contents](#0.1)","46637233":"**TASK**: Experiment with:\n* epochs_num\n* validation_split_part (optional)","e021d619":"MNIST","0da643e5":"## 3. User-digits prediction and analyze<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","52104000":"## 2. MNIST-digits model training<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","918b1b9a":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","70342089":"User's dataset","8622d553":"### 2.4. Prediction<a class=\"anchor\" id=\"2.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","f80f46e3":"### 2.3. Model training<a class=\"anchor\" id=\"2.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","fc2deee0":"### 2.1. Download data<a class=\"anchor\" id=\"2.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","4732ac0b":"**TASK**: Experiment with different images (fonts) - see in dataset [MNIST models testing: typographic digits](https:\/\/www.kaggle.com\/vbmokin\/typographic-digits-first-10-fonts)","9f2454fe":"### 3.3. EDA & FE<a class=\"anchor\" id=\"3.3\"><\/a>\n\n[Back to Table of Contents](#0.1)"}}