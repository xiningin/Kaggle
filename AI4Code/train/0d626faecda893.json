{"cell_type":{"cf4c47a0":"code","59a90897":"code","49d48fe4":"code","22d8b6bb":"code","31b0c71b":"code","447be6aa":"code","5db97b35":"code","83967b7c":"code","0a879a0e":"code","8e06fe7e":"code","73e01ecf":"code","9aa9467d":"code","f17aa343":"code","7079730f":"code","92b06837":"code","727ab9fc":"markdown","addc1739":"markdown","d655c98a":"markdown"},"source":{"cf4c47a0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 10)\n\n\n# Standard plotly imports\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nfrom plotly.offline import iplot, init_notebook_mode\nimport cufflinks\nimport cufflinks as cf\nimport plotly.figure_factory as ff\nimport os\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","59a90897":"import janestreet\nenv = janestreet.make_env() # initialize the environment\niter_test = env.iter_test() # an iterator which loops over the test set","49d48fe4":"import os\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nimport xgboost as xgb","22d8b6bb":"print('# File sizes')\ntotal_size = 0\nstart_path = '..\/input\/jane-street-market-prediction'  # To get size of current directory\nfor path, dirs, files in os.walk(start_path):\n    for f in files:\n        fp = os.path.join(path, f)\n        total_size += os.path.getsize(fp)\nprint(\"Directory size: \" + str(round(total_size\/ 1000000, 2)) + 'MB')","31b0c71b":"%%time\ntrain = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\nfeatures = pd.read_csv('..\/input\/jane-street-market-prediction\/features.csv')\nexample_test = pd.read_csv('..\/input\/jane-street-market-prediction\/example_test.csv')\nsample_prediction_df = pd.read_csv('..\/input\/jane-street-market-prediction\/example_sample_submission.csv')\nprint (\"Data is loaded!\")","447be6aa":"print('train shape is {}'.format(train.shape))\nprint('features shape is {}'.format(features.shape))\nprint('example_test shape is {}'.format(example_test.shape))\nprint('sample_prediction_df shape is {}'.format(sample_prediction_df.shape))","5db97b35":"train.head()","83967b7c":"missing_values_count = train.isnull().sum()\nprint (missing_values_count)\ntotal_cells = np.product(train.shape)\ntotal_missing = missing_values_count.sum()\nprint (\"% of missing data = \",(total_missing\/total_cells) * 100)","0a879a0e":"# I have taked this cell from https:\/\/www.kaggle.com\/jazivxt\/the-market-is-reactive\n# And https:\/\/www.kaggle.com\/drcapa\/jane-street-market-prediction-starter-xgb\n\ntrain = train[train['weight'] != 0]\n\ntrain['action'] = ((train['weight'].values * train['resp'].values) > 0).astype('int')\n\n\nX_train = train.loc[:, train.columns.str.contains('feature')]\ny_train = train.loc[:, 'action']","8e06fe7e":"X_train = X_train.fillna(-999)","73e01ecf":"x = train['action'].value_counts().index\ny = train['action'].value_counts().values\n\ntrace2 = go.Bar(\n     x=x ,\n     y=y,\n     marker=dict(\n         color=y,\n         colorscale = 'Viridis',\n         reversescale = True\n     ),\n     name=\"Imbalance\",    \n )\nlayout = dict(\n     title=\"Data imbalance - action\",\n     #width = 900, height = 500,\n     xaxis=go.layout.XAxis(\n     automargin=True),\n     yaxis=dict(\n         showgrid=False,\n         showline=False,\n         showticklabels=True,\n #         domain=[0, 0.85],\n     ), \n)\nfig1 = go.Figure(data=[trace2], layout=layout)\niplot(fig1)","9aa9467d":"del x, y, train","f17aa343":"# The training part taked from here https:\/\/www.kaggle.com\/xhlulu\/ieee-fraud-xgboost-with-gpu-fit-in-40s\n\nclf = xgb.XGBClassifier(\n    n_estimators=500,\n    max_depth=8,\n    learning_rate=0.02,\n    subsample=0.9,\n    colsample_bytree=0.65,\n#     missing=-999,\n    random_state=2020,\n    tree_method='gpu_hist' \n)","7079730f":"%time clf.fit(X_train, y_train)","92b06837":"for (test_df, sample_prediction_df) in iter_test:\n    X_test = test_df.loc[:, test_df.columns.str.contains('feature')]\n    X_test.fillna(-999)\n    y_preds = clf.predict(X_test)\n    sample_prediction_df.action = y_preds\n    env.predict(sample_prediction_df)","727ab9fc":"## Training\n","addc1739":"## Basics","d655c98a":"# Prepration"}}