{"cell_type":{"6d164662":"code","825012bd":"code","b90078eb":"code","e2a57a23":"code","5c03027b":"code","ad48f2a9":"code","1326768a":"code","f15a9022":"code","65ac176c":"code","4a3f6b3f":"code","e82d1d40":"code","2e85747c":"code","0e59cfe9":"code","bdef10ba":"code","2d593867":"code","596d8eb1":"code","05bfe402":"code","0af8dd3a":"code","6384be01":"code","959fa894":"markdown","234d1d15":"markdown","b073c9ec":"markdown","f7071483":"markdown","c063c61f":"markdown","bb4be92e":"markdown","83bee9ea":"markdown","b1f50522":"markdown","b1dbd633":"markdown","4bd2371a":"markdown","84b51aec":"markdown","e95ce276":"markdown","c0b1cb92":"markdown","a4a1c369":"markdown"},"source":{"6d164662":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","825012bd":"df = pd.read_csv('\/kaggle\/input\/forest-fires-in-brazil\/amazon.csv', encoding = \"ISO-8859-1\")\ndf.head()","b90078eb":"list_ = range(1, 13)\nm = dict(zip(df['month'].unique(), list_))\ndf['month'] = df['month'].map(m)","e2a57a23":"def quarter(month):\n    if month == 1 or month == 2 or month == 3:\n        return '1_Quarter'\n    elif month == 4 or month == 5 or month == 6:\n        return '2_Quarter'\n    elif month == 7 or month == 8 or month == 9:\n        return '3_Quarter'\n    elif month == 10 or month == 11 or month == 12:\n        return '4_Quarter'\n    \n    \ndf['quarter'] = df['month'].apply(lambda x : quarter(x))","5c03027b":"aux = df.groupby(['year', 'quarter'])['number'].agg('sum')\nindexs = []\nfor year,quarter in list(aux.index):\n    indexs.append(str(year)+'_'+str(quarter))","ad48f2a9":"import plotly.express as px\nimport plotly.graph_objects as go\nfig = px.line(x=indexs, y=list(aux[:]), title='Observed')\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","1326768a":"from statsmodels.tsa.stattools import adfuller\ndef adf_test(timeseries):\n    print ('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print (dfoutput)\n\nadf_test(list(aux[:]))","f15a9022":"import statsmodels.api as sm\nimport plotly.graph_objects as go\n\nres = sm.tsa.seasonal_decompose(list(aux[:]), period=3, model=\"additive\")\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=indexs, y=res.observed, mode='lines',name='Obeserved'))\nfig.add_trace(go.Scatter(x=indexs, y=res.trend, mode='lines',name='Trend'))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","65ac176c":"fig = px.line(x=indexs, y=res.resid, title='Residual component')\nfig.show()","4a3f6b3f":"def get_correlation_between_states(df):\n    dict_ = {}\n    for state in df['state'].unique():\n        select = df[df['state']==state]\n        aux2 = select.groupby(['year', 'quarter'])['number'].agg('sum')\n        aux = df.groupby(['year', 'quarter'])['number'].agg('sum')\n        #indexs = []\n        #for year,quarter in list(aux.index):\n        #    indexs.append(str(year)+'_'+str(quarter))\n        dict_[state] =  np.corrcoef(aux2[:], aux[:])[0][1]\n    return dict_\n\ndict_ =  get_correlation_between_states(df)","e82d1d40":"import plotly.express as px\n\nsorted_dict = sorted(dict_.items(), key=lambda kv: kv[1])\nsorted_dict = dict(sorted_dict)\nfig = px.bar(x=list(sorted_dict.keys()), y=list(sorted_dict.values()))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","2e85747c":"def get_state(df, state):\n    aux = df[df['state']==state]\n    aux2 = aux.groupby(['year', 'quarter'])['number'].agg('sum')\n    indexs = []\n    for year, quarter in list(aux2.index):\n        indexs.append(str(year)+'_'+str(quarter))\n    return indexs, list(aux2[:])","0e59cfe9":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=list(indexs), y=list(aux[:]), mode='lines',name='Observed'))\nx, y = get_state(df, 'Sergipe')\nfig.add_trace(go.Scatter(x=x, y=y, mode='lines',name='Sergipe'))\nx, y = get_state(df, 'Roraima')\nfig.add_trace(go.Scatter(x=x, y=y, mode='lines',name='Roraima'))\nx, y = get_state(df, 'Maranhao')\nfig.add_trace(go.Scatter(x=x, y=y, mode='lines',name='Maranhao'))\nx, y = get_state(df, 'Rio')\nfig.add_trace(go.Scatter(x=x, y=y, mode='lines',name='Rio'))\nx, y = get_state(df, 'Acre')\nfig.add_trace(go.Scatter(x=x, y=y, mode='lines',name='Acre'))\nx, y = get_state(df, 'Paraiba')\nfig.add_trace(go.Scatter(x=x, y=y, mode='lines',name='Paraiba'))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","bdef10ba":"def difference(dataset, interval=1):\n    diff = list()\n    for i in range(interval, len(dataset)):\n        value = dataset[i] - dataset[i - interval]\n        diff.append(value)\n    return diff\n\ndef get_correlation_between_states_detrend(df):\n    dict_ = {}\n    for state in df['state'].unique():\n        select = df[df['state']==state]\n        aux2 = select.groupby(['year'])['number'].agg('sum')\n        aux = df.groupby(['year'])['number'].agg('sum')\n        detrend2 = difference(list(aux2[:]))\n        detrend = difference(list(aux[:]))\n        dict_[state] =  np.corrcoef(detrend2, detrend)[0][1]\n    return dict_","2d593867":"dict_ = get_correlation_between_states_detrend(df)\nsorted_dict = sorted(dict_.items(), key=lambda kv: kv[1])\nsorted_dict = dict(sorted_dict)\nfig = px.bar(x=list(sorted_dict.keys()), y=list(sorted_dict.values()))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","596d8eb1":"fig = go.Figure()\ny = difference(list(aux[:]))\n\nfig.add_trace(go.Scatter(x=indexs, y=y, mode='lines',name='Observed'))\n\nx, y = get_state(df, 'Distrito Federal')\ny = difference(y)\n\nfig.add_trace(go.Scatter(x=x, y=y, mode='lines',name='Distrito Federal'))\nx, y = get_state(df, 'Rondonia')\ny = difference(y)\n\nfig.add_trace(go.Scatter(x=x, y=y, mode='lines',name='Rondonia'))\n\nx, y = get_state(df, 'Amazonas')\ny = difference(y)\n\nfig.add_trace(go.Scatter(x=x, y=y, mode='lines',name='Amazonas'))\n\nx, y = get_state(df, 'Pernambuco')\ny = difference(y)\n\nfig.add_trace(go.Scatter(x=x, y=y, mode='lines',name='Pernambuco'))\nx, y = get_state(df, 'Bahia')\ny = difference(y)\n\nfig.add_trace(go.Scatter(x=x, y=y, mode='lines',name='Bahia'))\nx, y = get_state(df, 'Mato Grosso')\ny = difference(y)\n\nfig.add_trace(go.Scatter(x=x, y=y, mode='lines',name='Mato Grosso'))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","05bfe402":"def fires_count(df):\n    dict_ ={}\n    for state in df['state'].unique():\n        aux = df[df['state']==state]\n        tmp = aux.groupby(['state'])['number'].agg('sum')\n        dict_[state] = sum(tmp[:])\n    return dict_\n\n\ndict_ = fires_count(df)\nsorted_dict = sorted(dict_.items(), key=lambda kv: kv[1])\nsorted_dict = dict(sorted_dict)\nfig = px.bar(x=list(sorted_dict.keys()), y=list(sorted_dict.values()))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","0af8dd3a":"fig = px.line(x=indexs, y=res.seasonal, title='Residual component')\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","6384be01":"def fires_count_deseasonality(df):    \n    for state in df['state'].unique():\n        aux = df[df['state']==state]\n        tmp = aux.groupby(['year', 'quarter'])['number'].agg('sum')\n        y = difference(list(tmp[:]), 3)\n        dict_[state] = sum(y)\n    return dict_\n\ndict_ = fires_count_deseasonality(df)\nsorted_dict = sorted(dict_.items(), key=lambda kv: kv[1])\nsorted_dict = dict(sorted_dict)\nfig = px.bar(x=list(sorted_dict.keys()), y=list(sorted_dict.values()))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","959fa894":"* So now we know about component series, lets know how each state contributes to series constructor","234d1d15":"* In the data there are 23 brazilian states, to better undestand the series lets see how burned in each state are correlated with the long serie, to do this i will use pearson correlation ","b073c9ec":"* the p-value is greater than 0 so our series is not stationary, but the value is so small if is interisting we can consider, stationary series has some interesting properties like mean, variacian and covariancia being constant throughout the series","f7071483":"* The series show that there are some seasonality the first and secound quarter in each year is the period where there are less fires, however the third and the fourth are the peak burn rates, so to identify if it is behavior of series i will observer if this series above is a stationary series, if is a stationary means that this flow of fires is natural occur at this quarter division","c063c61f":"<a id=\"1\"><\/a> <br>\n<font size=\"+3\" color=\"black\"><b>2 - Time Series Analysis<\/b><\/font><br><a id=\"2\"><\/a>\n<br> ","bb4be92e":"* after removing the trend component we have changes in the correlations, let us show in fact how each state correlates with the fires in the country over the years\n","83bee9ea":"* Lets start exploring our time series","b1f50522":" * above we can observe that the number of fires by ranked states, however observing the seasonality component of the series we see that it is periodic, so there are states that are more susceptible to fires depending on the time of year, and then we will observe how are the states with more fires if we disregard this component\n","b1dbd633":"<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n  <h1 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">&nbsp;Summary:<\/h1>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#1\" role=\"tab\" aria-controls=\"profile\">1. Introduction<span class=\"badge badge-primary badge-pill\">1<\/span><\/a>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#2\" role=\"tab\" aria-controls=\"messages\">2. Time Series<span class=\"badge badge-primary badge-pill\">2<\/span><\/a>\n<\/div>","4bd2371a":"* so now lets we will decompose the series into the components that compose it","84b51aec":"* in the graph above we can see the states that most correlate with the general graph of fires, this shows that these states follow the growth or decline of fires in the country, however we can have a biased analysis in this regard to better understand our series we will remove the trend component of the series and see how the correlations remain","e95ce276":"* we will define our time intervals in quarters to analyze the fires","c0b1cb92":"<a id=\"1\"><\/a> <br>\n<font size=\"+3\" color=\"black\"><b>1 - Introduction<\/b><\/font><br><a id=\"1\"><\/a>\n<br> \n* the propose of this kernel is a detailed view in temporary series for fires in brazil, exploring some components of the series","a4a1c369":"<img src='https:\/\/assets.bwbx.io\/images\/users\/iqjWHBFdfxIU\/iYYkEpi_S2Bk\/v1\/1000x-1.jpg' style='height:400px'>"}}