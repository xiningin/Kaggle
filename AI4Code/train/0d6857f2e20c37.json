{"cell_type":{"e797611d":"code","e272182c":"code","2ce39607":"code","002798f0":"code","a4676424":"code","da777879":"code","a4f0ebdd":"code","c71e4cc4":"code","b5a31743":"code","2b3d4a20":"code","6d142081":"code","b86d3f74":"code","f591b11d":"code","e893fccf":"code","8d924c4e":"code","ce3f9420":"code","1ca4cd4c":"code","f3788f4d":"code","97edf328":"markdown","8808a218":"markdown","58cf2a31":"markdown","e29ea8eb":"markdown","1d22ebe2":"markdown","b3173c80":"markdown","7afd3b4e":"markdown","86801326":"markdown"},"source":{"e797611d":"import os\n\nimport numpy as np\nimport pandas as pd\n\nfrom tqdm.notebook import tqdm\n\nimport cv2\nfrom PIL import Image\n\nfrom matplotlib import pyplot as plt","e272182c":"im = cv2.imread('..\/input\/hpa-single-cell-image-classification\/train\/000a6c98-bb9b-11e8-b2b9-ac1f6b6435d0_blue.png', cv2.IMREAD_UNCHANGED)\nplt.imshow(im)","2ce39607":"plt.imshow(cv2.resize(im, (512, 512), interpolation=cv2.INTER_LINEAR))","002798f0":"imb = cv2.imread('..\/input\/hpa-single-cell-image-classification\/train\/000a6c98-bb9b-11e8-b2b9-ac1f6b6435d0_blue.png', cv2.IMREAD_UNCHANGED)\nimg = cv2.imread('..\/input\/hpa-single-cell-image-classification\/train\/000a6c98-bb9b-11e8-b2b9-ac1f6b6435d0_green.png', cv2.IMREAD_UNCHANGED)\nimr = cv2.imread('..\/input\/hpa-single-cell-image-classification\/train\/000a6c98-bb9b-11e8-b2b9-ac1f6b6435d0_red.png', cv2.IMREAD_UNCHANGED)\nimy = cv2.imread('..\/input\/hpa-single-cell-image-classification\/train\/000a6c98-bb9b-11e8-b2b9-ac1f6b6435d0_yellow.png', cv2.IMREAD_UNCHANGED)\n\nimb = cv2.resize(imb, (512, 512), interpolation=cv2.INTER_LINEAR)\nimg = cv2.resize(img, (512, 512), interpolation=cv2.INTER_LINEAR)\nimr = cv2.resize(imr, (512, 512), interpolation=cv2.INTER_LINEAR)\nimy = cv2.resize(imy, (512, 512), interpolation=cv2.INTER_LINEAR)\n\nim = np.stack((imb, img, imr, imy)).transpose((1, 2, 0))\ncv2.imwrite('im.png', im)\n\ncv2.imwrite('imb.jpg', imb)\ncv2.imwrite('img.jpg', img)\ncv2.imwrite('imr.jpg', imr)\ncv2.imwrite('imy.jpg', imy)\n\ncv2.imwrite('imgrgb.jpg', np.stack((imb, img, imr)).transpose((1, 2, 0)))  # opencv uses BGR format","a4676424":"!ls -lh","da777879":"%%timeit\nimb = cv2.imread('..\/input\/hpa-single-cell-image-classification\/train\/000a6c98-bb9b-11e8-b2b9-ac1f6b6435d0_blue.png', cv2.IMREAD_UNCHANGED)\nimg = cv2.imread('..\/input\/hpa-single-cell-image-classification\/train\/000a6c98-bb9b-11e8-b2b9-ac1f6b6435d0_green.png', cv2.IMREAD_UNCHANGED)\nimr = cv2.imread('..\/input\/hpa-single-cell-image-classification\/train\/000a6c98-bb9b-11e8-b2b9-ac1f6b6435d0_red.png', cv2.IMREAD_UNCHANGED)\nimy = cv2.imread('..\/input\/hpa-single-cell-image-classification\/train\/000a6c98-bb9b-11e8-b2b9-ac1f6b6435d0_yellow.png', cv2.IMREAD_UNCHANGED)","a4f0ebdd":"%%timeit\ncv2.imread('im.png')","c71e4cc4":"%%timeit\ncv2.imread('imb.jpg')\ncv2.imread('img.jpg')\ncv2.imread('imr.jpg')\ncv2.imread('imy.jpg')","b5a31743":"%%timeit\ncv2.imread('imrgb.jpg')\ncv2.imread('imy.jpg')","2b3d4a20":"imrgb = cv2.imread('imgrgb.jpg', cv2.IMREAD_UNCHANGED)\nimrgb = cv2.cvtColor(imrgb, cv2.COLOR_BGR2RGB)\nplt.imshow(imrgb)","6d142081":"imy = cv2.imread('imy.jpg', cv2.IMREAD_UNCHANGED)\nplt.imshow(imy)","b86d3f74":"!rm -rf *\n!mkdir train","f591b11d":"df = pd.read_csv('..\/input\/hpa-single-cell-image-classification\/train.csv')\ndf","e893fccf":"from joblib import Parallel, delayed","8d924c4e":"path = '..\/input\/hpa-single-cell-image-classification\/train'\n\ndef save(ID):\n    imb = cv2.imread(f'{path}\/{ID}_blue.png', cv2.IMREAD_UNCHANGED)\n    img = cv2.imread(f'{path}\/{ID}_green.png', cv2.IMREAD_UNCHANGED)\n    imr = cv2.imread(f'{path}\/{ID}_red.png', cv2.IMREAD_UNCHANGED)\n    imy = cv2.imread(f'{path}\/{ID}_yellow.png', cv2.IMREAD_UNCHANGED)\n    \n    imb = cv2.resize(imb, (512, 512), interpolation=cv2.INTER_LINEAR)\n    img = cv2.resize(img, (512, 512), interpolation=cv2.INTER_LINEAR)\n    imr = cv2.resize(imr, (512, 512), interpolation=cv2.INTER_LINEAR)\n    imy = cv2.resize(imy, (512, 512), interpolation=cv2.INTER_LINEAR)\n    \n    cv2.imwrite(f'train\/{ID}_rgb.jpg', np.stack((imb, img, imr)).transpose((1, 2, 0)))\n    cv2.imwrite(f'train\/{ID}_yellow.jpg', imy)","ce3f9420":"Parallel(n_jobs=4)(delayed(save)(row.ID) for row in tqdm(df.itertuples(), total=len(df)))\n'' # suppress output","1ca4cd4c":"!du -sh train\n!ls -f train | wc -l","f3788f4d":"!cp ..\/input\/hpa-single-cell-image-classification\/train.csv .","97edf328":"load 1 single scaled-down png image with 4 channels","8808a218":"## Process the whole dataset","58cf2a31":"## Experiment\nWe compare the loading speed of different loading strategies\n+ do nothing: load 4 full size png images \n+ load 1 single scaled-down png image with 4 channels\n+ load 4 scaled-down jpg image\n+ load a jpg image with rgb channel and a jpg image with yellow channel","e29ea8eb":"To speed up the loading of training samples, we can pre-scale the images to a smaller size (here we use 512) and use a format that loads faster, such as jpg.","1d22ebe2":"load a jpg image with rgb channel and a jpg image with yellow channel, loading time reduced from 164 ms to 2.87 ms","b3173c80":"load 4 scaled-down jpg image","7afd3b4e":"do nothing: load 4 full size png images","86801326":"### Prepare images"}}