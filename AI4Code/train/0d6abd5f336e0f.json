{"cell_type":{"a5e7a022":"code","657e71cd":"code","efffaec3":"code","7caac530":"code","751d6be0":"code","b724660e":"code","2871683e":"code","5d31491e":"code","d44c2216":"code","b1d7597e":"code","060130ee":"code","f232a695":"code","3ddd598b":"code","af1da8a8":"code","e5ff4a2f":"code","4900633a":"code","bac7669b":"code","8b5e9281":"code","bcfbc094":"code","62c1ff24":"code","414c8273":"code","a11bc403":"code","350d9380":"code","3b97f413":"code","1e62f35b":"code","9fca61d4":"code","03ae159f":"code","5046d834":"code","84c4417b":"code","dcca25a5":"code","1c0e7a2d":"code","254a0bc9":"code","6e61f93b":"code","f1b1e7c1":"code","a03b9dea":"code","5bfaa599":"code","3812a7e6":"code","6e80a613":"code","13c2f046":"code","d409efb2":"code","fd77d1d5":"code","bfc02eb8":"code","ecf433cd":"code","9ba037a3":"code","fea38add":"code","d6773720":"code","99353709":"code","210c5409":"code","e090e546":"code","559e3b39":"code","3523c89c":"code","048c281e":"code","d5d2a5c4":"code","01c4447a":"code","6ce5afa9":"code","9388e909":"code","52ec2638":"code","1994a521":"markdown","338eaf75":"markdown","e88cffbe":"markdown","24f6ddc4":"markdown","9d46c723":"markdown","5b899c60":"markdown","b204c5bc":"markdown","923f88d1":"markdown","00c9ecce":"markdown","26a16ae0":"markdown","bd87b5b8":"markdown","fa5f90d4":"markdown","0d0b15a7":"markdown","f5c97458":"markdown","7b92ae5c":"markdown","c6bc50b5":"markdown","878e0bac":"markdown","9b24bd1e":"markdown","3663bc3a":"markdown","e6190916":"markdown","efb5d2db":"markdown","69a40f4b":"markdown","3f8c9627":"markdown","d4f706e4":"markdown","31aac23c":"markdown","56918d90":"markdown"},"source":{"a5e7a022":"import os\nimport torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\nimport torchvision.transforms as T\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\nimport pandas as pd\nimport time\nimport copy\n%matplotlib inline","657e71cd":"DATA_DIR = '..\/input\/jovian-pytorch-z2g\/Human protein atlas'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           # Contains training images\nTEST_DIR = DATA_DIR + '\/test'                             # Contains test images\n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       # Contains real labels for training images\nTEST_CSV = '..\/input\/jovian-pytorch-z2g\/submission.csv'   # Contains dummy labels for test image","efffaec3":"\n!head \"{TRAIN_CSV}\"","7caac530":"!head \"{TEST_CSV}\"","751d6be0":"!ls \"{TRAIN_DIR}\" | head","b724660e":"df = pd.read_csv(TRAIN_CSV)\ndf.head()","2871683e":"cat= df['Label'].value_counts()","5d31491e":"cat = cat.to_frame()\ncat.reset_index(inplace=True)\ncat.rename(columns={'index':'Label', 'Label':'Count'},inplace=True)","d44c2216":"cat['Category'] = np.ceil(cat['Count'] \/ len(df) *100)\n\ncat['Category'].value_counts()","b1d7597e":"cat.drop(['Count'], axis=1,inplace=True)","060130ee":"df = df.merge(cat, on='Label', how='left')","f232a695":"df.head()","3ddd598b":"from sklearn.model_selection import StratifiedShuffleSplit\nsplit = StratifiedShuffleSplit(n_splits=1, test_size=0.1, random_state=42)","af1da8a8":"for train_index, val_index in split.split(df[['Image','Label']], df[\"Category\"]):\n    train_df = df[['Image','Label']].loc[train_index]\n    val_df = df[['Image','Label']].loc[val_index]\n","e5ff4a2f":"train_df.reset_index(drop=True, inplace=True)\nval_df.reset_index(drop=True, inplace=True)","4900633a":"train_df","bac7669b":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","8b5e9281":"def encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)\n    ","bcfbc094":"class HumanProteinDataset(Dataset):\n    def __init__(self, df, root_dir, transform=None):\n        self.df = df\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","62c1ff24":"normalize_stats = ([0.0793, 0.0530, 0.0545], [0.1290, 0.0886, 0.1376])\n\ntrain_tfms = T.Compose([\n    T.RandomCrop(512),\n    T.RandomResizedCrop(256, scale=(0.5,0.9), ratio=(1, 1)), \n#     T.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0.1),\n    T.RandomHorizontalFlip(), \n    T.RandomRotation(10),\n    T.ToTensor(), \n     T.Normalize(*normalize_stats,inplace=True), \n  #  T.RandomErasing(inplace=True)\n])\n\nvalid_tfms = T.Compose([\n    T.Resize(256), \n    T.ToTensor(), \n     T.Normalize(*normalize_stats)\n])","414c8273":"train_ds = HumanProteinDataset(train_df, TRAIN_DIR, transform=train_tfms)\nval_ds = HumanProteinDataset(val_df, TRAIN_DIR, transform=valid_tfms)","a11bc403":"len(train_ds),len(val_ds)","350d9380":"def encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)","3b97f413":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))","1e62f35b":"show_sample(*train_ds[1541], invert=False)","9fca61d4":"show_sample(*train_ds[1541])","03ae159f":"torch.manual_seed(10)","5046d834":"batch_size = 64","84c4417b":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=2, pin_memory=True)","dcca25a5":"def show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break","1c0e7a2d":"show_batch(train_dl)","254a0bc9":"def F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","6e61f93b":"class MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                      \n        loss = F.binary_cross_entropy(out, targets)      \n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                           # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        score = F_score(out, targets)\n        return {'val_loss': loss.detach(), 'val_score': score.detach() }\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_score'], result['val_score']))","f1b1e7c1":"class ProteinCnnModel2(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = torch.load('..\/input\/zero2gans\/resnet101_final.pth')\n        # Replace last layer\n        \n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n        ","a03b9dea":"model = ProteinCnnModel2()\nmodel","5bfaa599":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","3812a7e6":"device = 'cuda'","6e80a613":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","13c2f046":"from tqdm.notebook import tqdm","d409efb2":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    \n    since = time.time()\n    \n    torch.cuda.empty_cache()\n    history = []\n    optimizer = opt_func\n    best_model_wts = copy.deepcopy(model.network.state_dict())\n    best_acc = evaluate(model, val_loader)['val_score']\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        \n        if result['val_score'] > best_acc:\n            best_acc = result['val_score']\n            best_model_wts = copy.deepcopy(model.network.state_dict())\n        \n        model.epoch_end(epoch, result)\n        \n        history.append(result)\n    \n    model.network.state_dict(best_model_wts)\n    \n    time_elapsed = time.time() - since\n    \n    print('Training has completed in {:.0f}m {:.0f}s => '.format(time_elapsed \/\/ 60, time_elapsed % 60), end=' ')\n    \n    print(\"\\nBest_score {:.4f}\".format(best_acc))\n    \n    return history","fd77d1d5":"model.network.to('cuda')","bfc02eb8":"evaluate(model, val_dl)","ecf433cd":"num_epochs = 20\nopt_func = torch.optim.SGD(model.parameters(), lr=1e-4, momentum=0.9, weight_decay=1e-6)","9ba037a3":"history = fit(num_epochs, model, train_dl, val_dl, opt_func)","fea38add":"torch.save(model.network,\"resnet101_final_02.pth\")","d6773720":"def plot_history(history):\n    \n    train_loss_total = []\n    val_loss_total = []\n    f1_score_total = []\n    total_epochs = 0\n\n    for hist in history:\n        train_loss_total.append(hist['train_loss'])\n        val_loss_total.append(hist['val_loss'])\n        f1_score_total.append(hist['val_score'])\n        total_epochs += 1\n        \n    fig, axs = plt.subplots(1, 2)\n    axs[0].plot(range(total_epochs), train_loss_total, label='Train Loss')\n    axs[0].plot(range(total_epochs), val_loss_total, label='Val Loss')\n    \n    axs[0].legend()\n    axs[0].set_title('Loss with Epochs')\n    axs[1].plot(range(total_epochs), f1_score_total)  \n    axs[1].set_title('F1 sore with Epochs')\n    plt.tight_layout(pad=0.4, w_pad=2, h_pad=3)\n    \n    \n    \n    ","99353709":"plot_history(history)","210c5409":"def predict_single(image):\n    xb = image.unsqueeze(0)\n    xb = to_device(xb, device)\n    preds = model(xb)\n    prediction = preds[0]\n    print(\"Prediction: \", prediction)\n    show_sample(image, prediction)","e090e546":"test_df = pd.read_csv(TEST_CSV)\ntest_dataset = HumanProteinDataset(test_df, TEST_DIR, transform=valid_tfms)\nimg, target = test_dataset[0]\nimg.shape","559e3b39":"predict_single(test_dataset[100][0])","3523c89c":"predict_single(test_dataset[74][0])","048c281e":"test_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size, num_workers=3, pin_memory=True), device)","d5d2a5c4":"@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    batch_probs = torch.cat(batch_probs)\n    return [decode_target(x) for x in batch_probs]","01c4447a":"test_preds = predict_dl(test_dl, model)","6ce5afa9":"submission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.head()","9388e909":"sub_fname = 'Final_submission.csv'","52ec2638":"submission_df.to_csv(sub_fname, index=False)","1994a521":"## Exploring the Data\n\nWhen you create a notebook with the \"Notebooks\" tab of a Kaggle competition, the data is automatically included in the `..\/input` folder. You can explore the files in the sidebar. Let us create some constants acess the data directories and CSV files.","338eaf75":"## Human Protein Multi Label Image Classification \n\nThis is a starter notebook for the competition [Zero to GANs - Human Protein Classification](https:\/\/www.kaggle.com\/c\/jovian-pytorch-z2g)","e88cffbe":"## Creating Datasets & Data Loaders\n\nWe can now create a custom dataset by extending the `Dataset` class from PyTorch. We need to define the `__len__` and `__getitem__` methods to create a dataset. We'll also provide the option of adding transforms into the constructor.","24f6ddc4":"Here's the same image viewed with the colors inverted","9d46c723":"### Training & Validation sets\n\nAs a good practice, we should split the data into training and validation datasets. Let's fix a seed for PyTorch (to ensure we always get the same validation set), and create the datasets using `random_split`.","5b899c60":"## Training the model","b204c5bc":"We can now save it batck to CSV, and download the file from the sidebar (check the output folder)","923f88d1":"## History Plot","00c9ecce":"## Model","26a16ae0":"Transforms can be chained using `transforms.Compose`. For instance, you may add `transforms.Resize(128)` before `transforms.ToTensor()` to resize images to size 128x128 before converting them into tensors. See the full list of transforms here: https:\/\/pytorch.org\/docs\/master\/torchvision\/transforms.html","bd87b5b8":"### 1. **Categorize them relavent to their precentage in load training datastet**","fa5f90d4":"Next, let's create a test dataset using the `submission.csv` file. Note that the file contains dummy labels (always `'0'`). We'll use the same transforms we used for the training set.","0d0b15a7":"## Creating a submission file","f5c97458":"To create a tensor from the labels, we will encode the labels as vectors of 1s & 0s. For example, if the labels are `'2 4 5'`, the correspoding vector for it would be `[0, 0, 1, 0, 1, 1, 0, 0, 0, 0]`. Let's define helper funtions to encode labels into tensors and vice versa.","7b92ae5c":"The `train.csv` file contains image IDs and labels for training data. Note that this is a multi-label classification problem. Each image can have more than one type of protein.","c6bc50b5":"Let's load the `train.csv` file into a Pandas dataframe","878e0bac":"Here's a sample image without the colors inverted.","9b24bd1e":"Similarly, `submission.csv` contains image IDs for test data. However, since the goal of this competition is to make predictions for the test set, the `submission.csv` files contains **dummy labels**, which you need to replace with your predictions and sumbit to the competition on the \"Submission\" tab. In other words, we don't have the labels for the test set.","3663bc3a":"## Making predictions & submission\n\nTo start with, let's create a helper function to make a prediction on a single image.","e6190916":"### Load Pretrained model","efb5d2db":"Let's take a look at a sample image from the dataset. We'll define a function `show_sample` to help us. We will also include the option to invert the image before showing it, because the original images are quite dark.","69a40f4b":"Let us know create a submission file with these predictions","3f8c9627":"## Stratified sampling to solve imblance class","d4f706e4":"### Data Loaders","31aac23c":"The image files are named `<image-id>.png` and can be found in the respective `train` and `test` folders.","56918d90":"If your kernel runs out of memory here, you might need to reduce your batch size."}}