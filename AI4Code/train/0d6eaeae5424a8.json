{"cell_type":{"5e2ead90":"code","83a3d6ad":"code","56f1c86c":"code","6e31ea5a":"code","1cf20978":"code","fc55bebe":"code","1b079083":"code","77e5178f":"code","4a50a1ef":"code","d22b13c4":"code","e578c87e":"code","66fc65e9":"code","41b19c08":"code","e6ef3f29":"code","7282032e":"markdown"},"source":{"5e2ead90":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt","83a3d6ad":"df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf1 = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","56f1c86c":"df2 = df.drop([\"Name\",\"Ticket\",\"Fare\",\"Cabin\"], axis = \"columns\")\ndf2.dropna()\ndf2.Age.fillna(int(df.Age.mean()))\ndf2[\"Embarked\"].dropna()\ngender = pd.get_dummies(df2.Sex)","6e31ea5a":"df2 = pd.concat([df2,gender],axis=\"columns\")\ndf3 = df2.drop([\"Sex\",\"Embarked\",\"Age\"],axis=\"columns\")\ndf3[\"age\"] = df2.Age\ndf3[\"age\"].fillna(df2[\"Age\"].mean(),inplace = True)","1cf20978":"X = df3.drop(\"Survived\",axis= \"columns\")\nY = df3[\"Survived\"]","fc55bebe":"def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\ndef plotCorrelationMatrix(df, graphWidth):\n    filename  = None\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix', fontsize=15)\n    plt.show()\ndef plotConfussionMatrix(y_pred,y):\n    from sklearn.metrices import confussion_matrix as confm\n    cm = confm(y,y_pred)\n    plt.figure(figsize = (10,7))\n    import seaborn as sn\n    sn.heatmap(cm,annot=True)\n    plt.xlabel(\"prediction\")\n    plt.ylabel(\"Truth\")\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.1000000f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\nplotPerColumnDistribution(df3,8,10)\nplotCorrelationMatrix(df3,10)","1b079083":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X,Y)","77e5178f":"import pickle as p\nwith open(\"Titanic\",\"wb\") as f:\n    p.dump(model,f)","4a50a1ef":"df2 = df1.drop([\"Name\",\"Ticket\",\"Fare\",\"Cabin\",\"Embarked\"],axis = \"columns\")\ndf3 = df2\ndf3.Age.fillna(df3.Age.mean())","d22b13c4":"gender1 = pd.get_dummies(df3.Sex)\ndf4 = pd.concat([df3,gender1],axis=\"columns\")\ndf5 = df4.drop([\"Sex\",\"Age\"],axis=\"columns\")\ndf5 = pd.concat([df4,df3.Age],axis=\"columns\")\ndf6 = df5.drop([\"Sex\",\"Age\"],axis=\"columns\")\ndf6 = pd.concat([df6,df4.Age],axis = \"columns\")\ndf7 = df6\ndf7[\"Age\"] = df6[\"Age\"].fillna(df4.Age.mean())","e578c87e":"Y_pred = model.predict(df7)\nSurvived = Y_pred\nDF = df7","66fc65e9":"PassengerId = df7[\"PassengerId\"]","41b19c08":"DF = DF.drop([\"Pclass\",\"SibSp\",\"Parch\",\"female\",\"male\",\"Age\",\"PassengerId\"],axis=\"columns\")","e6ef3f29":"DF[\"PassengerId\"] = PassengerId\nDF[\"Survived\"] = Survived\nDF.to_csv(\"sub.csv\",index=False)","7282032e":"yay after a whole day work is done"}}