{"cell_type":{"917c3d6f":"code","fd796c8f":"code","b9a76753":"code","bb399c26":"code","5c68d017":"code","6069140c":"code","4829875a":"code","1eb7fc39":"code","5911229e":"code","a2a03727":"code","afbd6399":"code","34ee7593":"code","7ec3ac7c":"code","9ed26800":"code","a56ccbec":"code","0b1eaaf8":"code","8bab4ac6":"code","d070d635":"code","d5749308":"code","a781d951":"code","6c554806":"code","c939aae6":"code","56ca0383":"code","7dd41ffc":"code","69c81704":"code","675d7ff8":"code","dbc759ee":"code","8bfd96bb":"code","7c341bcf":"code","6fdc85a1":"code","8fb2157c":"code","c4222f91":"code","8f27d2df":"code","52fbe10f":"code","4d3c95ed":"code","42941d95":"code","fa6330f6":"code","2091c100":"code","de75cf95":"code","fa86c634":"code","e12938a3":"code","3242b70d":"code","7c9282e3":"code","9dbb848c":"code","bc0ca5fa":"code","48fff926":"code","06d3ff3a":"code","4bdefcc9":"markdown","df610dc0":"markdown"},"source":{"917c3d6f":"import pandas as pd\nimport numpy as np","fd796c8f":"mem_data = pd.read_csv('..\/input\/mem_data.csv')\nmem_tr = pd.read_csv('..\/input\/transactions.csv')\nsong_info = pd.read_csv('..\/input\/songs.csv')","b9a76753":"Q1 = mem_data.age.quantile(0.25)\nQ3 = mem_data.age.quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)\nwhisker = (mem_data.age >= (Q1 - 1.5 * IQR)) & (mem_data.age <= (Q3 + 1.5 * IQR))\nmem_data.age = mem_data.age.where(whisker, other=0)","bb399c26":"mem_tr = mem_tr.merge(song_info, how='left')","5c68d017":"f = pd.to_datetime(mem_data.reg_date, format='%Y%m%d')\nf = (pd.to_datetime('2017-12-31') - f).dt.days\nmem_data['R_DAY'] = f\nmem_data.R_DAY.describe()","6069140c":"f = pd.to_datetime(mem_data.ex_date, format='%Y%m%d')\nf = (f.max() - f).dt.days\nmem_data['E_DAY'] = f\nmem_data.E_DAY.describe()","4829875a":"f = mem_tr.groupby('user_id')['listen'].agg({'total_listen':'sum'}).reindex().reset_index()\nmem_data = mem_data.merge(f, how='left')\nmem_data.iloc[:,-1] = mem_data.iloc[:,-1].fillna(0).astype('int')\nmem_data.head()","1eb7fc39":"f = mem_tr[mem_tr.listen==1].groupby('user_id')['artist'].agg({'like_artists':'nunique'}).reindex().reset_index()\nf = f.astype('int')\nmem_data = mem_data.merge(f, how='left')\nmem_data.iloc[:,-1] = mem_data.iloc[:,-1].fillna(0).astype('int')","5911229e":"f = mem_tr.groupby('user_id')['listen'].agg({'rec_ratio':'count'}).reindex().reset_index()\nf = f.astype('int')\nmem_data = mem_data.merge(f, how='left')\nmem_data.iloc[:,-1] = mem_data.iloc[:,-1].fillna(0)\nmem_data['rec_ratio'] = (mem_data['total_listen'] \/ mem_data['rec_ratio'].values).fillna(0).astype('float32')","a2a03727":"f = mem_tr.merge(song_info, how='left')\nf = f.groupby('user_id')['genre'].agg({'rec_genre':'nunique'}).reindex().reset_index()\nmem_data = mem_data.merge(f, how='left')\nmem_data.iloc[:,-1] = mem_data.iloc[:,-1].fillna(0)","afbd6399":"d_col = ['reg_date','ex_date']\nmem_data = mem_data.drop(d_col, axis=1)\nmem_data.info()","34ee7593":"mem_tr['country'] = mem_tr.isrc.str[:2]","7ec3ac7c":"mem_tr['song_code'] = mem_tr.isrc.str[3:5]","9ed26800":"mem_tr['song_date'] = mem_tr.isrc.str[5:7]","a56ccbec":"mem_tr['song_date'] = np.where(mem_tr.song_date.astype(int) >30 ,'19'+mem_tr.song_date,'20'+mem_tr.song_date )","0b1eaaf8":"mem_tr['song_date'] = mem_tr.song_date.astype(int)","8bab4ac6":"features = []","d070d635":"df = mem_tr.groupby(['user_id','genre'])['listen'].agg({'listen_genre_cnt':'count'}).reindex().reset_index()\ndf = df.pivot_table(values='listen_genre_cnt', index=df.user_id, columns='genre', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df);\ndf.shape","d5749308":"df = mem_tr.groupby(['user_id','rec_loc'])['listen'].agg({'rec_loc_count':'count'}).reindex().reset_index()\ndf = df.pivot_table(values='rec_loc_count', index=df.user_id, columns='rec_loc', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\ndf.shape","a781d951":"df = mem_tr.groupby(['user_id','rec_screen'])['listen'].agg({'rec_screen_count':'count'}).reindex().reset_index()\ndf = df.pivot_table(values='rec_screen_count', index=df.user_id, columns='rec_screen', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\ndf.shape","6c554806":"df = mem_tr.groupby(['user_id','entry'])['listen'].agg({'entry_count':'count'}).reindex().reset_index()\ndf = df.pivot_table(values='entry_count', index=df.user_id, columns='entry', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df)\ndf.shape","c939aae6":"df = mem_tr.groupby(['user_id','artist'])['listen'].agg({'artist_count':'count'}).reindex().reset_index()\ndf = df.pivot_table(values='artist_count', index=df.user_id, columns='artist', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df);\ndf.shape","56ca0383":"df = mem_tr.groupby(['user_id','composer'])['listen'].agg({'composer_count':'count'}).reindex().reset_index()\ndf = df.pivot_table(values='composer_count', index=df.user_id, columns='composer', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df);\ndf.shape","7dd41ffc":"df = mem_tr.groupby(['user_id','lyricist'])['listen'].agg({'lyricist_count':'count'}).reindex().reset_index()\ndf = df.pivot_table(values='lyricist_count', index=df.user_id, columns='lyricist', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df);\ndf.shape","69c81704":"df = mem_tr.groupby(['user_id','language'])['listen'].agg({'language_count':'count'}).reindex().reset_index()\ndf = df.pivot_table(values='language_count', index=df.user_id, columns='language', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df);\ndf.shape","675d7ff8":"df = mem_tr.groupby(['user_id','country'])['listen'].agg({'country_count':'count'}).reindex().reset_index()\ndf = df.pivot_table(values='country_count', index=df.user_id, columns='country', aggfunc='first',fill_value=0).reset_index()\nfeatures.append(df);\ndf.shape","dbc759ee":"df = mem_tr.groupby(['user_id','listen'])['length'].agg({'country_count':'mean'}).reindex().reset_index()\nnlisten = df[df.listen==0]\nnlisten.drop(['listen'], axis=1,inplace=True)\nlisten = df[df.listen==1]\nlisten.drop(['listen'], axis=1,inplace=True)\nfeatures.append(nlisten);\nfeatures.append(listen);","8bfd96bb":"df = mem_tr.groupby(['user_id','listen'])['song_date'].agg({'song_date_time':'mean'}).reindex().reset_index()\nnlisten = df[df.listen==0]\nnlisten.drop(['listen'], axis=1,inplace=True)\nlisten = df[df.listen==1]\nlisten.drop(['listen'], axis=1,inplace=True)\nfeatures.append(nlisten);\nfeatures.append(listen);\n","7c341bcf":"f = mem_data.groupby('user_id')['city'].agg([('city', lambda x: x.value_counts().index[0])]).reset_index()\nf = pd.get_dummies(f, columns=['city'])\nfeatures.append(f);\nf.shape","6fdc85a1":"f = mem_data.groupby('user_id')['reg_method'].agg([('reg_method', lambda x: x.value_counts().index[0])]).reset_index()\nf = pd.get_dummies(f, columns=['reg_method'])\nfeatures.append(f);\nf.shape","8fb2157c":"for f in features :\n    mem_data = pd.merge(mem_data, f, how='left',on='user_id')\ndisplay(mem_data.shape)","c4222f91":"d_col = ['reg_method','city']\nmem_data = mem_data.drop(d_col, axis=1)\nmem_data.info()","8f27d2df":"mem_data.fillna(0,inplace=True)","52fbe10f":"from sklearn.model_selection import RandomizedSearchCV, StratifiedKFold\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nimport glob","4d3c95ed":"input_data = 'pre_data.csv'\noutput_data = 'prediction_dd2.csv'","42941d95":"kfold = StratifiedKFold(n_splits=2)\nn_it = 12\nnp.random.seed(724)","fa6330f6":"main = mem_data","2091c100":"train = main[main.gender!='unknown']\ntrain.gender = (train.gender=='male').astype(int)\ntest = main[main.gender=='unknown']\ntest = test.sort_values('user_id')\nt_final = test[['user_id', 'gender']]\ntest = test.drop(['gender','user_id'], axis=1)\ntarget = train.gender.values\ntrain = train.drop(['gender','user_id'], axis=1)","de75cf95":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\n\ntrain.columns = np.arange(0,len(train.columns))\ntest.columns = np.arange(0,len(test.columns))\nfrom xgboost import XGBClassifier\nparameters = {'max_depth': 4, 'subsample': 0.9, 'colsample_bytree': 1.0, 'learning_rate': 0.05, \n              'min_child_weight': 5, 'silent': True, 'n_estimators': 200}\nXGB = XGBClassifier(**parameters, random_state=714,  n_jobs=-1)\n#params = {'max_features':list(np.arange(1, train.shape[1])), 'bootstrap':[False], 'n_estimators': list(np.arange(50,100)), 'criterion':['gini','entropy']}\n#model = RandomizedSearchCV(RandomForestClassifier(), param_distributions=params, n_iter=n_it, cv=kfold, scoring='roc_auc',n_jobs=-1, verbose=1)\nprint('MODELING.............................................................................')\nXGB.fit(train, target)\n#model = model.best_estimator_\nscore = cross_val_score(XGB, train, target, cv=5, scoring='roc_auc')\nprint('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))\nprint('COMPLETE')","fa86c634":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\n\nmodel = RandomForestClassifier(bootstrap=False, class_weight=None, criterion='gini',\n            max_depth=None, max_features=561, max_leaf_nodes=None,\n            min_impurity_decrease=0.0, min_impurity_split=None,\n            min_samples_leaf=1, min_samples_split=2,\n            min_weight_fraction_leaf=0.0, n_estimators=80, n_jobs=-1,\n            oob_score=False, random_state=714, verbose=0,\n            warm_start=False)\nprint('MODELING.............................................................................')\nmodel.fit(train, target)\nscore = cross_val_score(model, train, target, cv=5, scoring='roc_auc')\nprint('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))\nprint('COMPLETE')","e12938a3":"import lightgbm as lgb\nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\nmodel_lgb.fit(train, target)\nscore = cross_val_score(model_lgb,train, target, cv=2, scoring='roc_auc')\nprint('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","3242b70d":"lgb = model_lgb.predict(test)","7c9282e3":"from sklearn.ensemble import GradientBoostingClassifier\nGBoost_clf = GradientBoostingClassifier(learning_rate=0.05,\n                                   max_depth=8, max_features=0.3,\n                                   min_samples_leaf=100,\n                                   loss=\"deviance\",\n                                   random_state =5)\nGBoost_clf.fit(train, target)\nscore = cross_val_score(GBoost_clf, train, target, cv=2, scoring='roc_auc')\nprint('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","9dbb848c":"from sklearn.ensemble import VotingClassifier\nvotingC = VotingClassifier(estimators=[('random', model), ('XGB',XGB), ('GBoost',GBoost_clf)], voting='soft', n_jobs=-1)\n    \nvotingC = votingC.fit(train, target)\n#score = cross_val_score(votingC, X_train, y_train, cv=5, scoring='roc_auc')\n#print('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","bc0ca5fa":"votingC = votingC.predict_proba(test)[:,1]","48fff926":"ensembled_prediction = (0.7*votingC)+(0.3*lgb)","06d3ff3a":"t_final.gender = ensembled_prediction\nt_final.to_csv(output_data, index=False)\nprint('COMPLETE')","4bdefcc9":"# Competition\uc744 \uc704\ud55c \ub370\uc774\ud130 \ucc98\ub9ac \uc608\uc81c","df610dc0":"- mem_data.csv \ud30c\uc77c\uc758 gender \uc5f4\uacfc user_id\uc5f4\uc740 \ubaa8\ub378\ub9c1\uc5d0 \uc0ac\uc6a9\ub428\uc5d0 \ub530\ub77c \uc218\uc815\ud558\uc2dc\uba74 \uc548\ub429\ub2c8\ub2e4."}}