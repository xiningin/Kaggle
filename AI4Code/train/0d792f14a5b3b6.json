{"cell_type":{"60672e1d":"code","df955a94":"code","a32e9c26":"code","e131f6d4":"code","0e1df5bf":"code","a60ab84b":"markdown","4e06e3f0":"markdown"},"source":{"60672e1d":"import numpy as np\nimport cv2\nimport matplotlib.pyplot as plt","df955a94":"img = cv2.imread(r'..\/input\/image-for-basic-digital-image-processing-operation\/lena.jpg',0)","a32e9c26":"psnr=10*np.log10((255*255)\/(1\/(225*225)*np.sum(img)*np.sum(img)))\nprint('PSNR is: ',psnr)","e131f6d4":"def cov_binary(num):\n    binary_num = [int(i) for i in list('{0:0b}'.format(num))]\n    for j in range(8 - len(binary_num)):\n        binary_num.insert(0,0)        \n    return binary_num\ndef conv_decimal(listt):\n    x = 0\n    for i in range(8):\n        x = x + int(listt[i])*(2**(7-i))\n    return x\ndef discriminate_bit(bit,img):\n    z = np.zeros([225,225])\n    for i in range(225):\n        for j in range(225):\n            x = cov_binary(img[i][j])\n            for k in range(8):\n                if k == bit:\n                    x[k] = x[k]\n                else:\n                    x[k] = 0\n            x1 = conv_decimal(x)\n            z[i][j] = x1\n    return z","0e1df5bf":"# set up side-by-side image display\nfig = plt.figure()\nfig.set_figheight(15)\nfig.set_figwidth(15)\n\nfor i in range(1,9):\n    fig.add_subplot(4,2,i)\n    plt.imshow(discriminate_bit(i-1,img), cmap='gray')\n\n\nplt.show(block=True)","a60ab84b":"# Bit Plane Slicing Output","4e06e3f0":"# Image to be used:"}}