{"cell_type":{"4caddbee":"code","4c2979a8":"code","5edbc377":"code","07057c13":"code","c30498a2":"code","3c28449f":"code","67757f5d":"code","b71a5282":"code","20a32f07":"code","c990c21a":"code","f077dbc1":"code","d61d51c8":"code","87c12174":"code","1562bcec":"code","c67d658c":"code","3bfd8401":"code","37eb29b8":"code","cc60c868":"code","99a6cd18":"code","27463536":"code","1877378a":"code","310d95bc":"code","3c56c86a":"code","af0ccbb8":"code","c72c61ef":"code","aa09ba11":"code","fb65d28d":"markdown","24a205bf":"markdown","69fb0281":"markdown","3afd8ccc":"markdown","dae979c8":"markdown","7911da47":"markdown","e1265b2e":"markdown"},"source":{"4caddbee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c2979a8":"# Import\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5edbc377":"df = pd.read_csv('\/kaggle\/input\/fish-market\/Fish.csv')\ndf","07057c13":"df.rename(columns={'Length1':'LenVertical', 'Length2':'LenDiagonal', 'Length3':'LenCross'}, inplace=True)\ndf","c30498a2":"df.describe()","3c28449f":"df.info()","67757f5d":"# check null item\ndf.isnull().sum()","b71a5282":"sns.set_palette('deep')\ndf.hist(figsize=(12, 12))","20a32f07":"# number of Species\ndf['Species'].value_counts()","c990c21a":"# histogram by Species\nsns.set_palette('deep')\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Species')","f077dbc1":"# scatterplot for Height and Weight\nsns.set_palette('deep')\nplt.figure(figsize=(12, 7))\nsns.scatterplot(x='Height', y='Weight', data=df, hue='Species', style='Species', s=60)\nplt.show()","d61d51c8":"# scatterplot for Height and LenVertical (Length of Vertical)\nsns.set_palette('deep')\nplt.figure(figsize=(12, 7))\nsns.scatterplot(x='LenVertical', y='Weight', data=df, hue='Species', style='Species', s=60)\nplt.show()","87c12174":"# scatterplot for Height and LenDiagonal (Length of Diagonal)\nsns.set_palette('deep')\nplt.figure(figsize=(12, 7))\nsns.scatterplot(x='LenDiagonal', y='Weight', data=df, hue='Species', style='Species', s=60)\nplt.show()","1562bcec":"# scatterplot for Height and LenCross (Length of Cross)\nsns.set_palette('deep')\nplt.figure(figsize=(12, 7))\nsns.scatterplot(x='LenCross', y='Weight', data=df, hue='Species', style='Species', s=60)\nplt.show()","c67d658c":"# scatterplot for Height and Width\nsns.set_palette('deep')\nplt.figure(figsize=(12, 7))\nsns.scatterplot(x='Width', y='Weight', data=df, hue='Species', style='Species', s=60)\nplt.show()","3bfd8401":"# correlation\nsns.set_palette('deep')\nplt.figure(figsize=(12, 7))\nsns.heatmap(df.corr(), annot=True)","37eb29b8":"# seperate input and target\ntarget_data = df['Species']\ninput_data = df.drop('Species', axis=1)","cc60c868":"target_data, input_data","99a6cd18":"# encording\nfrom sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ntarget_data = encoder.fit_transform(target_data)\ntarget_map = {index:label for index, label in enumerate(encoder.classes_)}\ntarget_map","27463536":"# standardize\nfrom sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nss.fit(input_data)\nscaled_input_data = ss.transform(input_data)\nscaled_input_data[:10]","1877378a":"# split train \/ test data\nfrom sklearn.model_selection import train_test_split\ntrain_input, test_input, train_target, test_target = train_test_split(scaled_input_data, target_data, random_state=0)","310d95bc":"test_input.shape, train_input.shape","3c56c86a":"# linear regression\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(train_input, train_target)\nprint(lr.score(train_input, train_target), lr.score(test_input, test_target))","af0ccbb8":"# logistic regression\nfrom sklearn.linear_model import LogisticRegression\nlgr = LogisticRegression()\nlgr.fit(train_input, train_target)\nprint(lgr.score(train_input, train_target), lgr.score(test_input, test_target))","c72c61ef":"# decision tree\nfrom sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(max_depth=13, random_state=0)\ndt.fit(train_input, train_target)\nprint(dt.score(train_input, train_target), dt.score(test_input, test_target))","aa09ba11":"# graph - decision tree\nfrom sklearn.tree import plot_tree\nplt.figure(figsize=(20, 15))\nplot_tree(dt, filled=True, feature_names=['Weight', 'Height', 'LenVertical', 'LenDiagonal', 'LenCross', 'Width'])\nplt.show()","fb65d28d":"## Overview","24a205bf":"## Training & Testing","69fb0281":"## Investigating data","3afd8ccc":"## Preprocessing","dae979c8":"## Meaning\n- Species: species name of fish\n- Weight: weight of fish in Gram g\n- Length1: vertical length in cm\n- Length2: diagonal length in cm\n- Length3: cross length in cm\n- Height: height in cm\n- Width: diagonal width in cm","7911da47":"## Read Data","e1265b2e":"## Changing names"}}