{"cell_type":{"c6d47049":"code","476c3851":"code","fe47435f":"code","340e95cc":"code","74ceb1df":"code","7544b140":"code","b89d4e58":"code","f8e8e732":"code","d30a8089":"code","839762c4":"code","c0d4e7d5":"code","13d2dc3c":"code","4cf4a97a":"code","0311c043":"code","fc80aefd":"code","52792b99":"code","b6572552":"code","1d3c72ca":"code","2feb5be8":"code","67652c1a":"code","7cbc26c1":"code","83eb7533":"code","617577c7":"code","74baca4e":"code","1ee0ce2a":"code","cbe47ff3":"code","c5e10094":"code","4465d96b":"code","d7afc30d":"code","13d49547":"code","2f2ab5a8":"code","e3007957":"code","6e750d05":"code","912fdc2f":"code","3a99048d":"code","a2a7a1ae":"code","d78f5c55":"code","dd21638a":"code","effd9f08":"code","d3b2f719":"code","4de3d1a7":"code","c2c7d6c7":"code","a9ec7570":"code","c65c38a4":"code","ae50fd96":"code","2d2995a2":"code","185422c7":"code","d3cc88a9":"code","4fa7c1ee":"code","079f9458":"code","4f509a43":"code","3cd48afb":"code","797a2b1b":"code","d77fbf59":"code","e12627e8":"code","54854076":"code","6a85260f":"code","77ac5dde":"code","3966b30c":"code","284c8666":"code","532e8bd3":"code","8d4c96c1":"markdown","b2ec5746":"markdown","8c620809":"markdown","317a39bd":"markdown","944958aa":"markdown","ce5c0a3b":"markdown","c89ce39f":"markdown","bab4b0fd":"markdown","92c6c736":"markdown","0709dc9c":"markdown","2b82062f":"markdown","4ed97cdc":"markdown","9db55a8d":"markdown","a45d327a":"markdown","2715bdae":"markdown","2711e8cd":"markdown","c75029a1":"markdown","fe4af3bf":"markdown","d726e041":"markdown","70b6eb12":"markdown","2cbc3eb2":"markdown","86ca75a1":"markdown","54feefae":"markdown","1ec0d15a":"markdown","9a3b6f50":"markdown","c3b0c193":"markdown","942fdfec":"markdown","466d8fbf":"markdown","66117dc7":"markdown","04c9b2ec":"markdown","59356e1c":"markdown","a90e18cc":"markdown","4da8da87":"markdown","9e7fd346":"markdown","9f7f5774":"markdown","1ca55071":"markdown","bd1d2c79":"markdown","357d6392":"markdown","68951ba1":"markdown","6234e9c1":"markdown","9c9311e2":"markdown","a7b0f270":"markdown","d791f5f4":"markdown","16e88f0a":"markdown","7962c6e4":"markdown","90e195e5":"markdown","4add569c":"markdown","7b86c3ca":"markdown","8edba174":"markdown","ad9541bd":"markdown","22a754fc":"markdown","fe5ce70a":"markdown","f72276ea":"markdown","4fad0d2f":"markdown","4b16a9f2":"markdown","484b5849":"markdown","1e1ce093":"markdown","4f45e1f0":"markdown","3922497c":"markdown","72ecd6d6":"markdown","1118d811":"markdown","b0b17d17":"markdown","cfa5280e":"markdown","1432e60a":"markdown"},"source":{"c6d47049":"import ast\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom keras import models\nfrom keras import layers\nfrom keras import optimizers\nfrom datetime import datetime\nfrom keras import regularizers\nfrom collections import Counter\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import normalize\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom keras.metrics import mean_squared_logarithmic_error\n\nplt.style.use('fivethirtyeight')","476c3851":"df_train=pd.read_csv('..\/input\/train.csv')\ndf_test=pd.read_csv('..\/input\/test.csv')","fe47435f":"print(f'The train data has {df_train.shape[0]} rows and {df_train.shape[1]} columns')","340e95cc":"print(f'The test data has {df_test.shape[0]} rows and {df_test.shape[1]} columns')","74ceb1df":"df_train.info()","7544b140":"df_train.head(5)","b89d4e58":"df_train.describe(include='all')","f8e8e732":"df_train.isna().sum().sort_values(ascending=False)","d30a8089":"missing=df_train.isna().sum().sort_values(ascending=False)\nplt.figure(figsize=(8,8))\nsns.barplot(missing[:8],missing[:8].index)\nplt.show()","839762c4":"import ast\ndict_columns = ['belongs_to_collection', 'genres', 'production_companies',\n                'production_countries', 'spoken_languages', 'Keywords', 'cast', 'crew']\n\ndef text_to_dict(df):\n    for column in dict_columns:\n        df[column] = df[column].apply(lambda x: {} if pd.isna(x) else ast.literal_eval(x) )\n    return df\n        \ndfx = text_to_dict(df_train)\nfor col in dict_columns:\n       df_train[col]=dfx[col]\n\n","c0d4e7d5":"df_train['belongs_to_collection'].apply(lambda x:len(x) if x!= {} else 0).value_counts()","13d2dc3c":"collections=df_train['belongs_to_collection'].apply(lambda x : x[0]['name'] if x!= {} else '?').value_counts()[1:15]\nplt.figure(figsize=(8,8))\nsns.barplot(collections,collections.index)\nplt.show()","4cf4a97a":"df_train['tagline'].apply(lambda x:1 if x is not np.nan else 0).value_counts()","0311c043":"plt.figure(figsize=(10,10))\ntaglines=' '.join(df_train['tagline'].apply(lambda x:x if x is not np.nan else ''))\n\nwordcloud = WordCloud(max_font_size=None, background_color='white', collocations=False,\n                      width=1200, height=1000).generate(taglines)\nplt.imshow(wordcloud)\nplt.title('Taglines')\nplt.axis(\"off\")\nplt.show()\n","fc80aefd":"keywords=df_train['Keywords'].apply(lambda x: ' '.join(i['name'] for i in x) if x != {} else '')\nplt.figure(figsize=(10,10))\ndata=' '.join(words for words in keywords)\nwordcloud = WordCloud(max_font_size=None, background_color='white', collocations=False,\n                      width=1200, height=1000).generate(data)\nplt.imshow(wordcloud)\nplt.title('Taglines')\nplt.axis(\"off\")\nplt.show()\n","52792b99":"x=df_train['production_companies'].apply(lambda x : [x[i]['name'] for i in range(len(x))] if x != {} else []).values\nCounter([i for j in x for i in j]).most_common(20)","b6572552":"countries=df_train['production_countries'].apply(lambda x: [i['name'] for i in x] if x!={} else []).values\ncount=Counter([j for i in countries for j in i]).most_common(10)\nsns.barplot([val[1] for val in count],[val[0] for val in count])","1d3c72ca":"df_train['spoken_languages'].apply(lambda x:len(x) if x !={} else 0).value_counts()","2feb5be8":"lang=df_train['spoken_languages'].apply(lambda x: [i['name'] for i in x] if x != {} else [])\ncount=Counter([i for j in lang for i in j]).most_common(5)\nsns.barplot([val[1] for val in count],[val[0] for val in count])","67652c1a":"genre=df_train['genres'].apply(lambda x: [i['name'] for i in x] if x != {} else [])\ncount=Counter([i for j in genre for i in j]).most_common(10)\nsns.barplot([val[1] for val in count],[val[0] for val in count])","7cbc26c1":"dfx = text_to_dict(df_test)\nfor col in dict_columns:\n       df_test[col]=dfx[col]\n","83eb7533":"plt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nplt.title('skewed data')\nsns.distplot(df_train['revenue'])\nplt.subplot(1,2,2)\nplt.title('log transformation')\nsns.distplot(np.log(df_train['revenue']))\nplt.show()","617577c7":"df_train['log_revenue']=np.log1p(df_train['revenue'])\n","74baca4e":"plt.subplots(figsize=(10,5))\nplt.subplot(1,2,1)\nplt.hist(df_train['revenue'],bins=10,color='g')\nplt.title('skewed data')\nplt.subplot(1,2,2)\nplt.hist(np.log(df_train['revenue']),bins=10,color='g')\nplt.title('log transformation')\nplt.show()\n","1ee0ce2a":"df_train['revenue'].describe()","cbe47ff3":"plt.subplots(figsize=(10,5))\nplt.subplot(1,2,1)\nplt.hist(df_train['budget']+1,bins=10,color='g')\nplt.title('skewed data')\nplt.subplot(1,2,2)\nplt.hist(np.log(df_train['budget']+1),bins=10,color='g')\nplt.title('log transformation')\nplt.show()\n\n","c5e10094":"plt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nsns.scatterplot(df_train['budget'],df_train['revenue'])\nplt.subplot(1,2,2)\nsns.scatterplot(np.log1p(df_train['budget']),np.log1p(df_train['revenue']))\nplt.show()","4465d96b":"df_train['log_budget']=np.log1p(df_train['budget'])\ndf_test['log_budget']=np.log1p(df_train['budget'])","d7afc30d":"plt.hist(df_train['popularity'],bins=30,color='violet')\nplt.show()","13d49547":"sns.scatterplot(df_train['popularity'],df_train['revenue'],color='violet')\nplt.show()","2f2ab5a8":"def date(x):\n    x=str(x)\n    year=x.split('\/')[2]\n    if int(year)<19:\n        return x[:-2]+'20'+year\n    else:\n        return x[:-2]+'19'+year\ndf_train['release_date']=df_train['release_date'].fillna('1\/1\/90').apply(lambda x: date(x))\ndf_test['release_date']=df_test['release_date'].fillna('1\/1\/90').apply(lambda x: date(x))\n","e3007957":"#from datetime import datetime\ndf_train['release_date']=df_train['release_date'].apply(lambda x: datetime.strptime(x,'%m\/%d\/%Y'))\ndf_test['release_date']=df_test['release_date'].apply(lambda x: datetime.strptime(x,'%m\/%d\/%Y'))\n","6e750d05":"df_train['release_day']=df_train['release_date'].apply(lambda x:x.weekday())\ndf_train['release_month']=df_train['release_date'].apply(lambda x:x.month)\ndf_train['release_year']=df_train['release_date'].apply(lambda x:x.year)","912fdc2f":"df_test['release_day']=df_test['release_date'].apply(lambda x:x.weekday())\ndf_test['release_month']=df_test['release_date'].apply(lambda x:x.month)\ndf_test['release_year']=df_test['release_date'].apply(lambda x:x.year)","3a99048d":"day=df_train['release_day'].value_counts().sort_index()\nsns.barplot(day.index,day)\nplt.gca().set_xticklabels([\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"],rotation='45')\nplt.ylabel('No of releases')","a2a7a1ae":"sns.catplot(x='release_day',y='revenue',data=df_train)\nplt.gca().set_xticklabels([\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"],rotation='90')\nplt.show()","d78f5c55":"sns.catplot(x='release_day',y='runtime',data=df_train)\nplt.gca().set_xticklabels([\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"],rotation='90')\nplt.show()","dd21638a":"plt.figure(figsize=(10,15))\nsns.catplot(x='release_month',y='revenue',data=df_train)\nmonth_lst = ['January', 'February', 'March', 'April', 'May', 'June', 'July',\n              'August', 'September', 'October', 'November', 'December']\nplt.gca().set_xticklabels(month_lst,rotation='90')\nplt.show()","effd9f08":"plt.figure(figsize=(15,8))\nyearly=df_train.groupby(df_train['release_year'])['revenue'].agg('mean')\nplt.plot(yearly.index,yearly)\nplt.xlabel('year')\nplt.ylabel(\"Revenue\")\nplt.savefig('fig')","d3b2f719":"plt.figure(figsize=(10,5))\n\nplt.subplot(1,2,1)\nsns.distplot(np.log1p(df_train['runtime'].fillna(0)))\n\nplt.subplot(1,2,2)\nsns.scatterplot(np.log1p(df_train['runtime'].fillna(0)),np.log1p(df_train['revenue']))\n","4de3d1a7":"df_train['homepage'].value_counts().sort_values(ascending=False)[:5]","c2c7d6c7":"genres=df_train.loc[df_train['genres'].str.len()==1][['genres','revenue','budget','popularity','runtime']].reset_index(drop=True)\ngenres['genres']=genres.genres.apply(lambda x :x[0]['name'])","a9ec7570":"genres=genres.groupby(genres.genres).agg('mean')","c65c38a4":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.barplot(genres['revenue'],genres.index)\n\nplt.subplot(2,2,2)\nsns.barplot(genres['budget'],genres.index)\n\nplt.subplot(2,2,3)\nsns.barplot(genres['popularity'],genres.index)\n\nplt.subplot(2,2,4)\nsns.barplot(genres['runtime'],genres.index)","ae50fd96":"\ncrew=df_train['crew'].apply(lambda x:[i['name'] for i in x] if x != {} else [])\nCounter([i for j in crew for i in j]).most_common(15)","2d2995a2":"cast=df_train['cast'].apply(lambda x:[i['name'] for i in x] if x != {} else [])\nCounter([i for j in cast for i in j]).most_common(15)","185422c7":"def  prepare_data(df):\n    df['_budget_runtime_ratio'] = (df['budget']\/df['runtime']).replace([np.inf,-np.inf,np.nan],0)\n    df['_budget_popularity_ratio'] = df['budget']\/df['popularity']\n    df['_budget_year_ratio'] = df['budget'].fillna(0)\/(df['release_year']*df['release_year'])\n    df['_releaseYear_popularity_ratio'] = df['release_year']\/df['popularity']\n    df['_releaseYear_popularity_ratio2'] = df['popularity']\/df['release_year']\n    df['budget']=np.log1p(df['budget'])\n    \n    df['collection_name']=df['belongs_to_collection'].apply(lambda x: x[0]['name'] if x != {} else 0)\n    df['has_homepage']=0\n    df.loc[(pd.isnull(df['homepage'])),'has_homepage']=1\n    \n    le=LabelEncoder()\n    le.fit(list(df['collection_name'].fillna('')))\n    df['collection_name']=le.transform(df['collection_name'].fillna('').astype(str))\n    \n    le=LabelEncoder()\n    le.fit(list(df['original_language'].fillna('')))\n    df['original_language']=le.transform(df['original_language'].fillna('').astype(str))\n    \n    df['_num_Keywords'] = df['Keywords'].apply(lambda x: len(x) if x != {} else 0)\n    df['_num_cast'] = df['cast'].apply(lambda x: len(x) if x != {} else 0)\n    \n    df['isbelongto_coll']=0\n    df.loc[pd.isna(df['belongs_to_collection']),'isbelongto_coll']=1\n    \n    df['isTaglineNA'] = 0\n    df.loc[df['tagline'] == 0 ,\"isTaglineNA\"] = 1 \n\n    df['isOriginalLanguageEng'] = 0 \n    df.loc[ df['original_language'].astype(str) == \"en\" ,\"isOriginalLanguageEng\"] = 1\n    \n    df['ismovie_released']=1\n    df.loc[(df['status']!='Released'),'ismovie_released']=0\n    \n    df['no_spoken_languages']=df['spoken_languages'].apply(lambda x: len(x))\n    df['original_title_letter_count'] = df['original_title'].str.len() \n    df['original_title_word_count'] = df['original_title'].str.split().str.len() \n\n\n    df['title_word_count'] = df['title'].str.split().str.len()\n    df['overview_word_count'] = df['overview'].str.split().str.len()\n    df['tagline_word_count'] = df['tagline'].str.split().str.len()\n    \n    \n    df['collection_id'] = df['belongs_to_collection'].apply(lambda x : np.nan if len(x)==0 else x[0]['id'])\n    df['production_countries_count'] = df['production_countries'].apply(lambda x : len(x))\n    df['production_companies_count'] = df['production_companies'].apply(lambda x : len(x))\n    df['cast_count'] = df['cast'].apply(lambda x : len(x))\n    df['crew_count'] = df['crew'].apply(lambda x : len(x))\n\n    df['genders_0_crew'] = df['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 0]))\n    df['genders_1_crew'] = df['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 1]))\n    df['genders_2_crew'] = df['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 2]))\n\n    for col in  ['genres', 'production_countries', 'spoken_languages', 'production_companies'] :\n        df[col] = df[col].map(lambda x: sorted(list(set([n if n in train_dict[col] else col+'_etc' for n in [d['name'] for d in x]])))).map(lambda x: ','.join(map(str, x)))\n        temp = df[col].str.get_dummies(sep=',')\n        df = pd.concat([df, temp], axis=1, sort=False)\n    df.drop(['genres_etc'], axis = 1, inplace = True)\n    \n    cols_to_normalize=['runtime','popularity','budget','_budget_runtime_ratio','_budget_year_ratio','_budget_popularity_ratio','_releaseYear_popularity_ratio',\n    '_releaseYear_popularity_ratio2','_num_Keywords','_num_cast','no_spoken_languages','original_title_letter_count','original_title_word_count',\n    'title_word_count','overview_word_count','tagline_word_count','production_countries_count','production_companies_count','cast_count','crew_count',\n    'genders_0_crew','genders_1_crew','genders_2_crew']\n    for col in cols_to_normalize:\n        print(col)\n        x_array=[]\n        x_array=np.array(df[col].fillna(0))\n        X_norm=normalize([x_array])[0]\n        df[col]=X_norm\n    \n    df = df.drop(['belongs_to_collection','genres','homepage','imdb_id','overview','id'\n    ,'poster_path','production_companies','production_countries','release_date','spoken_languages'\n    ,'status','title','Keywords','cast','crew','original_language','original_title','tagline', 'collection_id'\n    ],axis=1)\n    \n    df.fillna(value=0.0, inplace = True) \n\n    return df\n\n    ","d3cc88a9":"def get_json(df):\n    global dict_columns\n    result=dict()\n    for col in dict_columns:\n        d=dict()\n        rows=df[col].values\n        for row in rows:\n            if row is None: continue\n            for i in row:\n                if i['name'] not in d:\n                    d[i['name']]=0\n                else:\n                    d[i['name']]+=1\n            result[col]=d\n    return result\n    \n    \n\n    \ntrain_dict=get_json(df_train)\ntest_dict=get_json(df_test)\n","4fa7c1ee":"df_train.shape","079f9458":"for col in dict_columns :\n    \n    remove = []\n    train_id = set(list(train_dict[col].keys()))\n    test_id = set(list(test_dict[col].keys()))   \n    \n    remove += list(train_id - test_id) + list(test_id - train_id)\n    for i in train_id.union(test_id) - set(remove) :\n        if train_dict[col][i] < 10 or i == '' :\n            remove += [i]\n    for i in remove :\n        if i in train_dict[col] :\n            del train_dict[col][i]\n        if i in test_dict[col] :\n            del test_dict[col][i]\n                  \n    \n\n            ","4f509a43":"df_test['revenue']=np.nan\nall_data=prepare_data((pd.concat([df_train,df_test]))).reset_index(drop=True)\ntrain=all_data.loc[:df_train.shape[0]-1,:]\ntest=all_data.loc[df_train.shape[0]:,:]\nprint(train.shape)\n","3cd48afb":"all_data.head(3)","797a2b1b":"train.drop('revenue',axis=1,inplace=True)\n\ny=train['log_revenue']\nX=train.drop(['log_revenue'],axis=1)","d77fbf59":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1)\nkfold=KFold(n_splits=3,random_state=42,shuffle=True)\n","e12627e8":"    \nmodel=models.Sequential()\nmodel.add(layers.Dense(356,activation='relu',kernel_regularizer=regularizers.l1(.001),input_shape=(X.shape[1],)))\n#model.add(layers.Dropout(0.1))\nmodel.add(layers.Dense(256,kernel_regularizer=regularizers.l1(.001),activation='relu'))\nmodel.add(layers.Dense(1))\nmodel.compile(optimizer=optimizers.rmsprop(lr=.001),loss='mse'\n,metrics=['mean_squared_logarithmic_error'])\n","54854076":"\nepochs=40","6a85260f":"hist=model.fit(X_train,y_train,epochs=epochs,verbose=0,validation_data=(X_test,y_test))","77ac5dde":"\nmae=hist.history['mean_squared_logarithmic_error']\nplt.plot(range(1,epochs),mae[1:],label='mae')\nplt.xlabel('epochs')\nplt.ylabel('mean_abs_error')\nmae=hist.history['val_mean_squared_logarithmic_error']\nplt.plot(range(1,epochs),mae[1:],label='val_mae')\nplt.legend()\n","3966b30c":"mae=hist.history['loss']\nplt.plot(range(1,epochs),mae[1:],label='trraining loss')\nplt.xlabel('epochs')\nplt.ylabel('loss')\nmae=hist.history['val_loss']\nplt.plot(range(1,epochs),mae[1:],label='val_loss')\nplt.legend()\n","284c8666":"test.drop(['revenue','log_revenue'],axis=1,inplace=True)","532e8bd3":"y=np.expm1(model.predict(test))\ndf_test['revenue']=y\ndf_test[['id','revenue']].to_csv('submission.csv',index=False)\n\n","8d4c96c1":"### problem statement.","b2ec5746":"- This is our target variable.\n- We will inspect the distribution first.","8c620809":"### Release day of week","317a39bd":"**if you like my kernel,please do consider upvoting it**","944958aa":"We will inspect which genre films are most common","ce5c0a3b":"### Year vs revenue","c89ce39f":"- A wordcloud using taglines","bab4b0fd":"- The target variable is skewed,so we will log transform it to obtain a standard distribution.","92c6c736":"- Revenue from films seems increasing and decreasing throughout the years.\n- There is a steep increase in revenue after 2017 or so.","0709dc9c":"### Popularity vs revenue","2b82062f":"We can observe that james bond collection films,friday the 13th,         \nThe pink panther stands first among the number of films released \nin particular collection series","4ed97cdc":"#### Which months yeilds the maximum revenue?","9db55a8d":"Now we will inspect the languages spoken","a45d327a":"- Drama is the most common genre followed by comedy and thrillers.","2715bdae":"\n#### Inspecting revenue ,budget ,popularity and runtime of each genre","2711e8cd":"### Genre","c75029a1":"In a world... where movies made an estimated $41.7 billion in 2018, the film industry is more popular than ever. But what movies make the most money at the box office? How much does a director matter? Or the budget? For some movies, it's \"You had me at 'Hello.'\" For others, the trailer falls short of expectations and you think \"What we have here is a failure to communicate.\"\n\nIn this competition, you're presented with metadata on over 7,000 past films from The Movie Database to try and predict their overall worldwide box office revenue. Data points provided include cast, crew, plot keywords, budget, posters, release dates, languages, production companies, and countries. You can collect other publicly available data to use in your model predictions, but in the spirit of this competition, use only data that would have been available before a movie's release.","fe4af3bf":"### Popularity","d726e041":"### Spoken languages","70b6eb12":"\n\n\n- belongs_to_collection - Contains the TMDB Id, Name, Movie Poster and Backdrop URL of a movie in JSON format. You can see the Poster and Backdrop Image like this: https:\/\/image.tmdb.org\/t\/p\/original\/. Example: https:\/\/image.tmdb.org\/t\/p\/original\/\/iEhb00TGPucF0b4joM1ieyY026U.jpg","2cbc3eb2":"### Extracting date features","86ca75a1":"There are many variable with large number of null values,we will inspect those variables first.","54feefae":"### Tagline","1ec0d15a":"- We can see that most films are released on friday.\n- This might be because of some strategy .","9a3b6f50":"#### Keywords","c3b0c193":"### Revenue","942fdfec":"### Cast","466d8fbf":"#### Revenue vs budget","66117dc7":"- There are the most fomous and common crew members\n- Number of films in which they appeared is also shown.","04c9b2ec":"### Production companies","59356e1c":"- These are the countries in which most films are released.\n  USA stand first and way above \n  from other countries in terms of number of films assosiated with countries. ","a90e18cc":"### Budget","4da8da87":"- As expected English comes first followed by French","9e7fd346":"- tagline : The tagline which was assosiated with the film","9f7f5774":"### Keras model","1ca55071":"#### Is there any relation between runtime and revenue?","bd1d2c79":"###  Loading dataset","357d6392":"### Missing values","68951ba1":"This kernel is dedicated for TMDB revenue prediction challenge.In this kernel i have done\n- Getting started with TMDB\n- Cleaning TMDB data\n- Exploratory data analysis of TMDB data\n- feature engineering\n- Keras model\n- model Evaluvation","6234e9c1":"- The most famous production companies and the number films released by each","9c9311e2":"### Mean absolute error","a7b0f270":"### Crew","d791f5f4":"#### belongs to collection","16e88f0a":"### Loss","7962c6e4":"### Importing required libraries","90e195e5":"- Histogram ","4add569c":"#### Is there any relation between release day and revenue?","7b86c3ca":"- This indicates the number of languages spoken in a film","8edba174":"**If you like my kernel please consider upvoting,Thank you !**","ad9541bd":"### Feature Engineering","22a754fc":"- We dont see any linear relationship among budget and revenue.","fe5ce70a":"### Getting a basic ideas about the data","f72276ea":"### Splitting train and test","4fad0d2f":"Only 604 films belong to some collections","4b16a9f2":"### Production countries","484b5849":"In reference with [kernel](https:\/\/www.kaggle.com\/zero92\/eda-tmdb-box-office-prediction) by B.H","1e1ce093":"### Runtime","4f45e1f0":"### Homepage","3922497c":"- The months of April,may and june yeilds maximum revenue.","72ecd6d6":"### Making my submission","1118d811":"- There are the actors that have appeared in most films","b0b17d17":"![](https:\/\/media.giphy.com\/media\/WZ4M8M2VbauEo\/giphy.gif)","cfa5280e":"- genres : Contains all the Genres Name & TMDB Id in JSON Format","1432e60a":"- we can see that in most films there is only one language spoken in it.\n- Most number of languages spoken in a film is 9."}}