{"cell_type":{"e630c91d":"code","3de60f33":"code","70504710":"code","d01d3a56":"code","6d239fb6":"code","6c915e86":"code","89b8c487":"code","27b9ed1f":"code","983ad1d1":"code","59e0e049":"code","7a00a4cb":"code","dc7b7938":"code","e3fc046e":"code","09006ed6":"code","08914ad3":"code","8a4f691a":"code","bd45d3a1":"code","7c755b73":"code","fd1ae73f":"code","d4a62c3e":"code","1a4bed47":"code","3ff880a1":"code","e7e799e3":"code","73390a47":"markdown","7f7be415":"markdown","eeb932a4":"markdown","60cdf66f":"markdown","a3f21363":"markdown","31ba2f68":"markdown","37c4c369":"markdown","29f25ebb":"markdown","180afa88":"markdown","4eb4ed26":"markdown","4090596a":"markdown","66793217":"markdown","3ba55128":"markdown","41956166":"markdown","b9207e13":"markdown","10ef2860":"markdown","a76264d9":"markdown"},"source":{"e630c91d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import utils\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, Dropout, MaxPooling2D, GlobalAveragePooling2D, Activation, BatchNormalization\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import regularizers\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3de60f33":"train_df = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_test.csv')","70504710":"print(train_df.shape)\ntrain_df.head()","d01d3a56":"print(test_df.shape)\ntest_df.head()","6d239fb6":"train_df = np.array(train_df, dtype='float32')\ntest_df = np.array(test_df, dtype='float32')","6c915e86":"X_train = train_df[:,1:] \/ 255.0\nX_test = test_df[:,1:] \/ 255.0\n\ny_train = train_df[:,0]\ny_test = test_df[:, 0]","89b8c487":"X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=36)","27b9ed1f":"class_names = ['T_shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', \n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","983ad1d1":"plt.figure(figsize=(12,12))\nfor i in range(36):\n    plt.subplot(6, 6, i+1)\n    plt.imshow(X_train[i].reshape(28,28))\n    index = int(y_train[i])\n    plt.title(class_names[index])\n    plt.xticks([])\n    plt.yticks([])\nplt.show()","59e0e049":"fig, axes = plt.subplots(15, 15, figsize=(16,18))\naxes = axes.ravel()\nn_train = len(train_df)\n\nfor i in range(225):\n    index = np.random.randint(0, n_train)\n    axes[i].imshow(train_df[index,1:].reshape(28,28))\n    label_index = int(train_df[index,0])\n    axes[i].set_title(class_names[label_index], fontsize=9)\n    axes[i].axis('off')\nplt.show()\nplt.tight_layout()","7a00a4cb":"X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)\nX_test = X_test.reshape(X_test.shape[0], 28, 28, 1)\nX_valid = X_valid.reshape(X_valid.shape[0], 28, 28, 1)","dc7b7938":"def cnn_model():\n    \n    model = Sequential()\n    \n    # First Conv layer\n    model.add(Conv2D(filters=128, kernel_size=(3,3), activation='relu', padding='same', kernel_regularizer=regularizers.l2(1e-4), input_shape=(28,28,1)))\n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(Dropout(0.3))\n    \n    # Second Conv layer\n    model.add(Conv2D(filters=256, kernel_size=(3,3), activation='relu', padding='same', kernel_regularizer=regularizers.l2(1e-4)))\n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(Dropout(0.3))\n    \n     # Third, fourth, fifth convolution layer\n    model.add(Conv2D(filters=512, kernel_size=(3,3), activation='relu', padding='same', kernel_regularizer=regularizers.l2(1e-4)))\n    model.add(Conv2D(filters=512, kernel_size=(3,3), activation='relu', padding='same', kernel_regularizer=regularizers.l2(1e-4)))\n    model.add(Conv2D(filters=256, kernel_size=(3,3), activation='relu', padding='same', kernel_regularizer=regularizers.l2(1e-4)))\n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(Dropout(0.3))\n\n    # Fully Connected layers\n    model.add(Flatten())\n    \n    model.add(Dense(512, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(256, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(128, activation='relu'))\n    model.add(Dropout(0.5))\n    \n    model.add(Dense(10, activation='softmax'))\n    \n    model.summary()\n    \n    return model","e3fc046e":"datagen = ImageDataGenerator(featurewise_center=False,\n                            samplewise_center=False,\n                            featurewise_std_normalization=False,\n                            samplewise_std_normalization=False,\n                            zca_whitening=False,\n                            rotation_range=15,\n                            width_shift_range=0.1,\n                            height_shift_range=0.1,\n                            horizontal_flip=True,\n                            vertical_flip=False)\n\ndatagen.fit(X_train)","09006ed6":"model = cnn_model()","08914ad3":"model.compile(loss='sparse_categorical_crossentropy',\n             optimizer=Adam(lr=0.0003, decay=1e-6),\n             metrics=['accuracy'])","8a4f691a":"history = model.fit(datagen.flow(X_train, y_train, batch_size = 64),\n                    steps_per_epoch = len(X_train) \/\/ 64, \n                    epochs = 125, \n                    validation_data= (X_valid, y_valid),\n                    verbose=1)","bd45d3a1":"pd.DataFrame(history.history).plot()","7c755b73":"scores = model.evaluate(X_test, y_test)","fd1ae73f":"pred = model.predict(X_test)","d4a62c3e":"class_names = ['T_shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', \n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n\ny_pred = np.argmax(pred, axis=1)","1a4bed47":"print(classification_report(y_test, y_pred))","3ff880a1":"fig, axes = plt.subplots(5, 5, figsize=(12,12))\naxes = axes.ravel()\n\nfor i in np.arange(25):\n    axes[i].imshow(X_test[i].reshape(28,28))\n    axes[i].set_title('True: %s \\nPredict: %s' % (class_names[int(y_test[i])], class_names[y_pred[i]]))\n    axes[i].axis('off')\n    plt.subplots_adjust(wspace=1)","e7e799e3":"fig, axes = plt.subplots(5, 5, figsize=(12,12))\naxes = axes.ravel()\n\nmiss_pred = np.where(y_pred != y_test)[0]\nfor i in np.arange(25):\n    axes[i].imshow(X_test[miss_pred[i]].reshape(28,28))\n    axes[i].set_title('True: %s \\nPredict: %s' % (class_names[int(y_test[miss_pred[i]])],\n                                                 class_names[y_pred[miss_pred[i]]]))\n    axes[i].axis('off')\n    plt.subplots_adjust(wspace=1)","73390a47":"### Convert train and test df to array and normalize it by dividing it by 255.0 so that all our values are between 0 and 1","7f7be415":"### Reshape the data to the required format for Neural Networks [batch_size, width, height, channels]","eeb932a4":"### Further splitting the training data to create a validation set to test model performance","60cdf66f":"### Classification report to understand how the model is performing on every class","a3f21363":"### Import the required libraries","31ba2f68":"### Read the Train and Test data","37c4c369":"### Fit the model","29f25ebb":"### Visualize a few images to get a feel of the dataset","180afa88":"### Evaluate model on the test set","4eb4ed26":"### Plotting the train and val accuracy & loss","4090596a":"# Convolutional Neural Network achieving 93.28% Accuracy on Fashion MNIST using strong Regulariziation and Data Augmentation \n\nThis notebook is applying a CNN model that I built for the CIFAR10 dataset to the Fashion MNIST dataset to test its architecture. The model performs pretty well achieving a 93.28% accuracy on unseen test data. If you wanna checkout the notebook where I built this model and explained how I chose the hyperparameters, click on this link: https:\/\/www.kaggle.com\/sid2412\/cifar10-cnn-model-85-97-accuracy\n\n","66793217":"### Compile the model","3ba55128":"### Visualize the true and predicted label","41956166":"### Define the model","b9207e13":"### Data Augmentation to introduce variations in the dataset and make the model more robust and generalize better","10ef2860":"### Visualize the misclassified labels ","a76264d9":"### Generate predictions"}}