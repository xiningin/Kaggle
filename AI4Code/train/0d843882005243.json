{"cell_type":{"acb6e89f":"code","fa9e90c1":"code","d43a46de":"code","422959c0":"code","509f93b4":"code","20a66c38":"code","0ba3e618":"code","9de38367":"code","522b14fd":"code","dfe1d650":"code","7c9d1ce7":"code","4f91c685":"code","2d29cbd2":"code","51f03e2c":"code","d719025b":"code","8cc0c3f9":"code","dd8b60d1":"code","908041be":"code","6078e1ae":"code","24f1f933":"code","8511b37b":"code","ca8daae6":"code","0ee02cbf":"code","88ad380a":"code","e742d025":"code","fd179737":"code","4a24d07e":"markdown","87b656d8":"markdown","7986c043":"markdown","949b5706":"markdown","4c8f7f48":"markdown","a83b429e":"markdown","10c03108":"markdown"},"source":{"acb6e89f":"# Imports\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.datasets import load_boston","fa9e90c1":"boston = load_boston()\n\n# Boston Housing Dataset\nprint(boston['DESCR'])","d43a46de":"# load keys from boston dict\nboston.keys()\n","422959c0":"# put it into a pandas dataframe\n\ndf =pd.DataFrame(boston.data, columns=boston.feature_names)\ndf.head()\ndf","509f93b4":"df['MEDV'] = boston.target","20a66c38":"df.isnull().sum()","0ba3e618":"sns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.distplot(df['MEDV'], bins=30)\nplt.show()","9de38367":"len(df['CRIM'].unique())","522b14fd":"correlation_matrix = df.corr().round(2)\n# annot = True to print the values inside the square\nsns.heatmap(data=correlation_matrix, annot=True)","dfe1d650":"corr = df.corr()\n\n# correlation --> -1 to 1\n# - --> negative corelation \n# + --> positive corelation\ncorr.style.background_gradient(cmap='coolwarm')","7c9d1ce7":"sns.pairplot(df)","4f91c685":"X = pd.DataFrame(np.c_[df['LSTAT'], df['RM']], columns = ['LSTAT','RM'])\nY = df['MEDV']","2d29cbd2":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=5)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","51f03e2c":"corr = df.corr()\n\ncorr.style.background_gradient(cmap='coolwarm')","d719025b":"X_train","8cc0c3f9":"Y_test","dd8b60d1":"multi_lr = LinearRegression()","908041be":"multi_lr.fit(X_train, Y_train)","6078e1ae":"multi_lr.intercept_","24f1f933":"multi_lr.coef_","8511b37b":"multi_predictions = multi_lr.predict(X_test)","ca8daae6":"multi_predictions[-5:]","0ee02cbf":"#Prediction of test set\ny_pred_multi_lr= multi_lr.predict(X_test)\n#Predicted values\nprint(\"Prediction for test set: {}\".format(y_pred_multi_lr))","88ad380a":"#Actual value and the predicted value\nmlr_diff = pd.DataFrame({'Actual value': Y_test, 'Predicted value': y_pred_multi_lr})\nmlr_diff.head()","e742d025":"from sklearn import metrics\nmeanAbErr = metrics.mean_absolute_error(Y_test, y_pred_multi_lr)\nmeanSqErr = metrics.mean_squared_error(Y_test, y_pred_multi_lr)\nrootMeanSqErr = np.sqrt(metrics.mean_squared_error(Y_test, y_pred_multi_lr))\nprint('R squared: {:.2f}'.format(multi_lr.score(X,Y)*100))\nprint('Mean Absolute Error:', meanAbErr)\nprint('Mean Square Error:', meanSqErr)\nprint('Root Mean Square Error:', rootMeanSqErr)","fd179737":"from sklearn.metrics import mean_squared_error\n# model evaluation for training set\ny_train_predict = multi_lr.predict(X_train)\nrmse = (np.sqrt(mean_squared_error(Y_train, y_train_predict)))\nr2 = r2_score(Y_train, y_train_predict)\n\nprint(\"The model performance for training set\")\nprint(\"--------------------------------------\")\nprint('RMSE is {}'.format(rmse))\nprint('R2 score is {}'.format(r2))\nprint(\"\\n\")\n\n# model evaluation for testing set\ny_test_predict = multi_lr.predict(X_test)\nrmse = (np.sqrt(mean_squared_error(Y_test, y_test_predict)))\nr2 = r2_score(Y_test, y_test_predict)\n\nprint(\"The model performance for testing set\")\nprint(\"--------------------------------------\")\nprint('RMSE is {}'.format(rmse))\nprint('R2 score is {}'.format(r2))","4a24d07e":"## Based on the above observations i will use RM and LSTAT as our features. Using a scatter plot let\u2019s see how these features vary with MEDV.\n","87b656d8":"### Boston Dataset","7986c043":" first plot the distribution of the target variable MEDV. We will use the distplot function from the seaborn library.","949b5706":"#### Multiple Linear Regression\nThe exact same thing, but with multiple variables...\n```\nY = b0 + b1X1 + b2X2....\n\nListing Price of House = $100,000 + ($100 * Square Footage) + ($10,000 * Number of Bedrooms)\n```","4c8f7f48":"## Model evaluation\nWe will evaluate our model using RMSE and R2-score.","a83b429e":"## we create a correlation matrix that measures the linear relationships between the variables. The correlation matrix can be formed by using the corr function from the pandas dataframe library. We will use the heatmap function from the seaborn library to plot the correlation matrix.","10c03108":"## Observations:\n## The prices increase as the value of RM increases linearly. There are few outliers and the data seems to be capped at 50.\n## The prices tend to decrease with an increase in LSTAT. Though it doesn\u2019t look to be following exactly a linear line."}}