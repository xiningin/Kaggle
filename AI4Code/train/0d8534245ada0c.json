{"cell_type":{"244cca3f":"code","18d9f02d":"code","14fac66e":"code","12387f50":"code","f9e81d38":"code","d1bfd59e":"code","307717ec":"code","5b9cb5a0":"code","3109ad93":"code","2cc7781f":"code","a844c186":"code","c3ed5814":"code","27dde35a":"code","f85c7926":"code","98211d79":"code","a5a1b05c":"code","cfe5dc59":"code","c2beac3f":"code","a827ad7f":"code","0a37e39e":"code","80dfc680":"code","d6602c85":"code","83251b2f":"code","2de99d00":"code","71d5c58e":"code","1e1d828c":"code","cacd4271":"code","2a4c11d1":"code","c796f2dd":"code","b5bb94bb":"code","c3cc10d6":"code","18173c34":"code","201f3c66":"code","faa813e9":"code","76e48fa4":"code","0e3488b6":"code","6e7ae90b":"code","f94dc4db":"code","c2b495d8":"code","051e5ed2":"code","3176b040":"code","aa74dca2":"code","885120e9":"code","84914a82":"code","db1491db":"code","15eb574c":"code","67ddb010":"code","fc3a4f47":"code","45995900":"code","4f6e505f":"code","a53238fa":"code","11e9c0c3":"code","1684a23f":"code","a0e44086":"code","c11c6711":"code","7b54f4d4":"code","80db562d":"code","6e6a1d7a":"code","51c0552a":"code","148325b0":"code","9218bca4":"code","c3d01f77":"code","7438254d":"code","1484aae0":"code","45024c18":"code","1bb96666":"code","e2e93581":"code","e446d7c6":"code","a6753675":"code","626356a5":"code","a64d4e52":"code","288b2f80":"code","d1aa40f2":"code","47a00bdd":"code","a72f59a4":"code","90511ef0":"code","182882b7":"code","9e360eae":"code","bc1e9aa3":"markdown","c6da64f0":"markdown","0411ebbf":"markdown","1f9fd6ca":"markdown","08234a0b":"markdown","5b9756eb":"markdown","4f69ae6e":"markdown","c210029b":"markdown","10cca5df":"markdown","29713d03":"markdown","4fef32af":"markdown","c122221d":"markdown","68c06c1f":"markdown","133f9f30":"markdown","e1f26940":"markdown","fec9c4d9":"markdown","db4d9a8e":"markdown","e8ebebd7":"markdown","9fb5d173":"markdown","15c39fa0":"markdown","c903ebd3":"markdown","379257e8":"markdown","194bc6ba":"markdown","97df6c0d":"markdown","2a4f5fda":"markdown","4f033812":"markdown","95bc3676":"markdown","d66d88f1":"markdown","255468ea":"markdown","ba6cd049":"markdown","1692a0af":"markdown","e198bb51":"markdown","a1cf37cd":"markdown","7e104acb":"markdown","54971eed":"markdown","0cbc9227":"markdown","05ca609e":"markdown","42f40807":"markdown","0d96ec17":"markdown","19e31d49":"markdown","a6c5ab58":"markdown","da044b0d":"markdown","988523db":"markdown","7ffadd0c":"markdown","a5dd953d":"markdown","31923a94":"markdown","95a77a21":"markdown","592a51d7":"markdown","0d6254fd":"markdown","e78a2fcb":"markdown","17ac2951":"markdown","383c023b":"markdown","8e367647":"markdown","a63c26e1":"markdown","f5a42487":"markdown","476f1e06":"markdown","2902e9e0":"markdown","be299909":"markdown","e7ad3338":"markdown","f8485a71":"markdown","56d1d300":"markdown","a3af019f":"markdown","80d3acab":"markdown","ac321117":"markdown","06e06178":"markdown"},"source":{"244cca3f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18d9f02d":"import time\n\n# importing libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import special, stats\n\n# preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\n\n\n# model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score\n\n\n# SMOTe\nfrom imblearn.over_sampling import SMOTE\n\n# models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n# metrics\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, average_precision_score, precision_recall_curve \nfrom sklearn.metrics import recall_score, roc_curve, roc_auc_score, precision_recall_curve, auc, plot_confusion_matrix\n\n# ensemble\nfrom xgboost import XGBClassifier\n\n# warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# style\nimport matplotlib.style as style\nstyle.use('fivethirtyeight')","14fac66e":"df = pd.read_csv('\/kaggle\/input\/bank-marketing-campaigns-dataset\/bank-additional-full.csv', sep=';')","12387f50":"df.shape","f9e81d38":"df.head()","d1bfd59e":"df.info()","307717ec":"# Check for null values if any\n\n# This method shows the count of null values, percent and dataTypes\n\ndef missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    \n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n        \n    tt['Types'] = types\n    return(np.transpose(tt))","5b9cb5a0":"missing_data(df)","3109ad93":"df['y'].value_counts()","2cc7781f":"def plot_pie(dataset, target, size=(7,7)):\n    return dataset[target].value_counts().plot.pie(autopct = '%1.1f%%', figsize=size)\n\nplot_pie(df, 'y')","a844c186":"# create a new variable `target` that takes 1 for `yes` else 0\ndf['target'] = np.where(df['y'].isin(['yes']), 1, 0)\n\ndf.head()","c3ed5814":"df['target'].mean()","27dde35a":"sns.countplot(df['target'])","f85c7926":"df['education'].value_counts()","98211d79":"# We will plot the relationship of `education` with `target`\n# estimator is mean to show the likelihood of taking up the loan\ndef barplot_mean(x, y, df, hue=None, order=None, hue_order=None):\n    print(df.groupby(x)[y].mean())\n    uniqs = df[x].nunique()\n    \n    if uniqs > 4:\n        plt.figure(figsize=(16,4))\n        \n    sns.barplot(x=x, y=y, data=df, estimator=np.mean, hue=hue, order=order, hue_order=hue_order)\n    plt.show()\n\nbarplot_mean('education', 'target', df)","a5a1b05c":"# We will group the basic education groups into one\nbasic_grps = ['basic.4y', 'basic.6y', 'basic.9y']\n\ndf['education'] = np.where(df['education'].isin(basic_grps), 'Basic', df['education'])\ndf.head()","cfe5dc59":"barplot_mean('education', 'target', df)","c2beac3f":"df['education'] = np.where(df['education'].isin(['illiterate']), 'unknown', df['education'])\nbarplot_mean('education', 'target', df)","a827ad7f":"barplot_mean('day_of_week', 'target', df)","0a37e39e":"barplot_mean('job', 'target', df)","80dfc680":"df['job'] = np.where(df['job'].isin(['unknown']), 'unemployed', df['job'])\nbarplot_mean('job', 'target', df)","d6602c85":"barplot_mean('marital', 'target', df)","83251b2f":"barplot_mean('default', 'target', df)","2de99d00":"print(df.groupby('default')['target'].sum())\nprint(\"*\"*30)\n# if we look at the count - we do have 3 cases of people who have `defaulted`\nprint(df.groupby('default')['target'].count())\n\n# But we do have cases of `unknown`. \n# We can go ahead and group them in `yes` \n# because we are not sure which category they belong to","71d5c58e":"df['default'] = np.where(df['default'].isin(['unknown']), 'yes', df['default'])\nbarplot_mean('default', 'target', df)","1e1d828c":"barplot_mean('housing', 'target', df)","cacd4271":"barplot_mean('loan', 'target', df)","2a4c11d1":"barplot_mean('contact', 'target', df)","c796f2dd":"barplot_mean('month', 'target', df)","b5bb94bb":"qtr1 = ['jan', 'feb', 'mar']\nqtr2 = ['apr', 'may', 'jun']\nqtr3 = ['jul', 'aug', 'sep']\nqtr4 = ['oct', 'nov', 'dec']\n\ndf['qtr'] = np.where(df['month'].isin(qtr1), 'Q1', \n                                       np.where(df['month'].isin(qtr2), 'Q2', \n                                       np.where(df['month'].isin(qtr3), 'Q3',\n                                       np.where(df['month'].isin(qtr4), 'Q4', 0)\n                                       )))\ndf['qtr'].value_counts()","c3cc10d6":"barplot_mean('qtr', 'target', df, order=[\"Q1\",\"Q2\",\"Q3\",\"Q4\"])\n# `order` as the name suggest orders the graph in similar fashion as the input list\n# here we pass the order as per the quarters","18173c34":"barplot_mean('qtr', 'target', df, hue='contact', order=[\"Q1\",\"Q2\",\"Q3\",\"Q4\"])","201f3c66":"df[df['contact'] == \"cellular\"].groupby('qtr')['target'].mean()\n\n# avg. likelihood across qtr\n# Q1    0.505495\n# Q2    0.091349\n# Q3    0.112053\n# Q4    0.163967","faa813e9":"barplot_mean('poutcome', 'target', df)","76e48fa4":"df['poutcome'] = np.where(df['poutcome'].isin(['nonexistent', 'failure']), 0, 1)\nbarplot_mean('poutcome', 'target', df)","0e3488b6":"barplot_mean('qtr', 'target', df, hue='poutcome', order=[\"Q1\",\"Q2\",\"Q3\",\"Q4\"])","6e7ae90b":"df[df['poutcome'] == 1].groupby('qtr')['target'].mean()\n\n# avg. likelihood across qtr\n# Q1    0.505495\n# Q2    0.091349\n# Q3    0.112053\n# Q4    0.163967","f94dc4db":"df['age_rank'] = pd.qcut(df['age'].rank(method='first').values, 5, duplicates='drop').codes+1\ndf['age_rank'].value_counts()\n\n# we have divided age into 5 ranks thery distributing 20% data in each rank\n# we can now see if there is any trend with respect to age on target","c2b495d8":"barplot_mean('age_rank', 'target', df)","051e5ed2":"barplot_mean('age_rank', 'target', df, hue='qtr', hue_order=[\"Q1\",\"Q2\",\"Q3\",\"Q4\"])","3176b040":"df['duration_rank'] = pd.qcut(df['duration'].rank(method='first').values, 5, duplicates='drop').codes+1\ndf['duration_rank'].value_counts()","aa74dca2":"barplot_mean('duration_rank', 'target', df)","885120e9":"df['campaign_rank'] = pd.qcut(df['campaign'].rank(method='first').values, 5, duplicates='drop').codes+1\ndf['campaign_rank'].value_counts()","84914a82":"barplot_mean('campaign_rank', 'target', df)","db1491db":"print(df.groupby('campaign_rank')['campaign'].min())\nprint(\"*\"*30)\nprint(df.groupby('campaign_rank')['campaign'].mean())\nprint(\"*\"*30)\nprint(df.groupby('campaign_rank')['campaign'].max())","15eb574c":"df['pdays_rank'] = pd.qcut(df['pdays'].rank(method='first').values, 5, duplicates='drop').codes+1\ndf['pdays_rank'].value_counts()","67ddb010":"barplot_mean('pdays_rank', 'target', df)","fc3a4f47":"print(df.groupby('pdays_rank')['pdays'].min())\nprint(\"*\"*30)\nprint(df.groupby('pdays_rank')['pdays'].mean())\nprint(\"*\"*30)\nprint(df.groupby('pdays_rank')['pdays'].max())","45995900":"df['prev_rank'] = pd.qcut(df['previous'].rank(method='first').values, 5, duplicates='drop').codes+1\ndf['prev_rank'].value_counts()","4f6e505f":"barplot_mean('prev_rank', 'target', df)","a53238fa":"barplot_mean('prev_rank', 'target', df, hue='qtr', hue_order=[\"Q1\",\"Q2\",\"Q3\",\"Q4\"])","11e9c0c3":"df['emp.var.rate_rank'] = pd.qcut(df['emp.var.rate'].rank(method='first').values, 5, duplicates='drop').codes+1\nbarplot_mean('emp.var.rate_rank', 'target', df)","1684a23f":"df['cons.price.idx_rank'] = pd.qcut(df['cons.price.idx'].rank(method='first').values, 5, duplicates='drop').codes+1\nbarplot_mean('cons.price.idx_rank', 'target', df)","a0e44086":"df['cons.conf.idx_rank'] = pd.qcut(df['cons.conf.idx'].rank(method='first').values, 5, duplicates='drop').codes+1\nbarplot_mean('cons.conf.idx_rank', 'target', df)","c11c6711":"df['euribor3m_rank'] = pd.qcut(df['euribor3m'].rank(method='first').values, 5, duplicates='drop').codes+1\nbarplot_mean('euribor3m_rank', 'target', df)","7b54f4d4":"df['nr.employed_rank'] = pd.qcut(df['nr.employed'].rank(method='first').values, 5, duplicates='drop').codes+1\nbarplot_mean('nr.employed_rank', 'target', df)","80db562d":"df['nr.employed_rank'] = pd.qcut(df['nr.employed'].rank(method='first').values, 10, duplicates='drop').codes+1\nbarplot_mean('nr.employed_rank', 'target', df)","6e6a1d7a":"df['nr.employed_rank'] = np.where(df['nr.employed_rank'].isin(['1']), 'A', \n                                       np.where(df['nr.employed_rank'].isin(['2']), 'B', 'C'))\n                                                                            \ndf['nr.employed_rank'].value_counts()","51c0552a":"barplot_mean('nr.employed_rank', 'target', df)","148325b0":"df.info()","9218bca4":"# We are not considering education, job, day_of_week, housing, loan\ncols_cat = ['default', 'contact', 'poutcome', 'nr.employed_rank']\n\n# We are not considering age, duration, cons.conf.idx \ncols_num = ['campaign', 'pdays', 'previous', 'emp.var.rate', 'cons.price.idx', 'euribor3m'] #, 'duration']\n\n# NOTE: duration is added to improve the ROC score","c3d01f77":"# dummy encoding categorical variable\n# ref: https:\/\/stackoverflow.com\/questions\/36631163\/what-are-the-pros-and-cons-between-get-dummies-pandas-and-onehotencoder-sciki\ncols_cat_dummy = pd.get_dummies(df[cols_cat], drop_first=True)\ncols_cat_dummy.head()","7438254d":"X_all = pd.concat([df[cols_num], cols_cat_dummy], axis=1, join='inner')\nX_all.head()","1484aae0":"# Assigning X and Y\nX = X_all\ny = df['target']","45024c18":"# Train-Val split 75-25\nX_train, X_val, y_train, y_val = train_test_split(X, y, random_state=101, test_size=0.30)\n\nprint(X_train.shape, X_val.shape, y_train.shape, y_val.shape)","1bb96666":"lr = LogisticRegression()\nlr.fit(X_train, y_train)\n\n# TODO: Do a grid search to explore best parameters\ndt = DecisionTreeClassifier(criterion=\"gini\", random_state=101, max_depth=7, min_samples_leaf=5)\ndt.fit(X_train, y_train)\n\nrf_1000 = RandomForestClassifier(n_estimators=1000, random_state=101, criterion=\"gini\", max_features=\"auto\", max_depth=2)\nrf_1000.fit(X_train, y_train)","e2e93581":"y_pred = lr.predict(X_val)\nprint(\"Accuracy of logistic regression on test set {:.2f}\".format(lr.score(X_val, y_val)))","e446d7c6":"y_pred_tree = dt.predict(X_val)\nprint(\"Accuracy of decision tree on test set {:.2f}\".format(dt.score(X_val, y_val)))","a6753675":"y_pred_rf = rf_1000.predict(X_val)\nprint(\"Accuracy of random forest on test set {:.2f}\".format(rf_1000.score(X_val, y_val)))","626356a5":"rf_1000_train_score = rf_1000.score(X_train, y_train)\nrf_1000_test_score = rf_1000.score(X_val, y_val)\n\n\nprint(\"Training Score:\", rf_1000_train_score)\nprint(\"Test Score:\", rf_1000_test_score)","a64d4e52":"sns.set_style({'axes.grid' : False})\n# logistic regression\nplot_confusion_matrix(lr, X_val, y_val)\nprint(classification_report(y_val, y_pred))","288b2f80":"# decision tree\nprint(classification_report(y_val, y_pred_tree))\nplot_confusion_matrix(dt, X_val, y_val)","d1aa40f2":"# random forest\nprint(classification_report(y_val, y_pred_rf))\nplot_confusion_matrix(rf_1000, X_val, y_val)","47a00bdd":"lr_roc_auc = roc_auc_score(y_val, lr.predict(X_val))\ndt_roc_auc = roc_auc_score(y_val, dt.predict(X_val))\nrf_roc_auc = roc_auc_score(y_val, rf_1000.predict(X_val))\n\nfpr, tpr, thresholds = roc_curve(y_val, lr.predict_proba(X_val)[:, 1])\nfpr, tpr, thresholds = roc_curve(y_val, dt.predict_proba(X_val)[:, 1])\nfpr, tpr, thresholds = roc_curve(y_val, rf_1000.predict_proba(X_val)[:, 1])\n\nplt.figure()\n\nplt.plot(fpr, tpr, 'b', label = 'LR AUC = %0.2f' % lr_roc_auc)\nplt.plot(fpr, tpr, 'r', label = 'DT AUC = %0.2f' % dt_roc_auc)\nplt.plot(fpr, tpr, 'g', label = 'RF AUC = %0.2f' % rf_roc_auc)\n\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.savefig('LR DT RF ROC Curve')\nplt.show()\n\n","a72f59a4":"### The score is coming in the range of late 50s, lets try to improve the model by incorporating `duration`\n\n### After using `duration`, we are able to get the score upto `0.77` for decision tree","90511ef0":"# Ranking the probabilities from the logistic regression model\n\ny_pred_prob = lr.predict_proba(X)[:,1]\ndf['y_pred_P'] = pd.DataFrame(y_pred_prob)\ndf['P_rank'] = pd.qcut(df['y_pred_P'].rank(method='first').values, 10, duplicates='drop').codes+1\ndf.groupby('P_rank')['target'].mean()\n\n# The highest rank has a likelihood of 48.28 percent (~ 4.3 times better than the average)","182882b7":"# Ranking the probabilities from the logistic regression model\n\ny_pred_prob_dtree = dt.predict_proba(X)[:,1]\ndf['y_pred_P_dtree'] = pd.DataFrame(y_pred_prob_dtree)\ndf['P_rank_dtree'] = pd.qcut(df['y_pred_P_dtree'].rank(method='first').values, 10, duplicates='drop').codes+1\ndf.groupby('P_rank_dtree')['target'].mean()\n\n# The highest rank has a likelihood of 51.56 percent (~ 4.6 times better than the average)","9e360eae":"df.to_csv('telemarketing_model_scored_file.csv')","bc1e9aa3":"### We are not able to see any monotonic trend here. One way to resolve this is to see if grouping them into quarters will help us find any signals.","c6da64f0":"### We have an interesting insight here ! `Q2` has a likelihood of `0.9%` but if you target the customers with `contact=\"cellular\"`, your chances are very much better than `0.9%`\n\n### We see an that `contact=\"cellular\"` is leading most of the quarters except `Q4`. There might be some external factors at play here.\n\n### We will try to look at the profiles of cellular customer across the quarters and their likelihood of purchasing the term loan","0411ebbf":"### We see there is no significant difference in the trend for different marital status so we can conclude that this is a weak predictor of the dependent target","1f9fd6ca":"### We observe that this can used in a decision tree to make audiences","08234a0b":"### We observe that this is a very weak predictor","5b9756eb":"### This is a very good variable to design the audience which can be utilised later since it is able to discriminate the dependent target variable.\n\n### Note: We see that there is a positive slope in the trend","4f69ae6e":"## Let us try combining `qtr` and other variable together.","c210029b":"### This is a very good variable to design the audience which can be utilised later since it is able to discriminate the dependent target variable. \n\n### Note: As a predictor, this is also weak because the likelihood of a person with `no default` buying a term loan is only `12.87 %` ","10cca5df":"### `Q1` has the least amount of observation while `Q2` is the majority\n\n### We will study the behavior of the target variable with respect to quarter","29713d03":"# 18. cons.conf.idx","4fef32af":"# 8. contact","c122221d":"# 16. emp.var.rate","68c06c1f":"# Splitting the data set","133f9f30":"# 9. month","e1f26940":"# 11. age","fec9c4d9":"### we see that we have `U-shaped` curve. This variable might not help us discriminate the dependent variable. The prediction will be impacted\n\n### let us try to combine this with `qtr`","db4d9a8e":"### this plot is showing a non-linear trend. Let us look at what kind of value does `campaign` takes ?","e8ebebd7":"### `Q1` is showing a likelihood of `50 %`. That is huge ! Of all the customers called in the start of the year, every second called customer will end up buying a term loan\n\n### While building our strategy, we can inform the marketing team to invest their major efforts in the beginning of the year to get the best results.\n\n### Arriving into `Q2`, there is a sharp decline in the interest of the customers. These may be the dry months for the marketing team. This can also support us building an effective strategy accordingly.","9fb5d173":"### We see there is no significant difference in the trend for different days of the week so we can conclude that this is a weak predictor of the dependent target","15c39fa0":"### We see there is no significant difference in the trend for different housing loan status so we can conclude that this is a weak predictor of the dependent target","c903ebd3":"# Confusion Matrices -- Classification Reports","379257e8":"# Data Dictionary","194bc6ba":"# Prediction","97df6c0d":"### From a discrimination point of view, decision tree is able to give a better likelihood","2a4f5fda":"# Inspecting Categorical variables","4f033812":"# 17. cons.price.idx","95bc3676":"# 7. loan","d66d88f1":"# 3. job","255468ea":"# Modelling","ba6cd049":"### In a no model scenario, out of 100 calls, _11 are taking the term loan_","1692a0af":"### This is a very good variable to design the audience which can be utilised later since it is able to discriminate the dependent target variable.","e198bb51":"# How many term depositors are there in the data ?","a1cf37cd":"# 10. poutcome","7e104acb":"# 20.nr.employed","54971eed":"### It appears as if `student` and `retired` people have very high chances of taking a term loan. We can also go ahead and group `unknown` and `unemployed` into one bucket","0cbc9227":"# Making sense from the model - Lorenz curve","05ca609e":"# 13. campaign","42f40807":"# 1. education","0d96ec17":"### We see a trend in case of `default`. A person having `default` is having the mean as `0`. We will inspect this by doing the sum","19e31d49":"### From the perspective of discrimination, we see a very strong positive trend. As the duration is increasing, the chances of buying the term loan is almost doubling. This will be an excellent predictor while using in the model\n\n### But we have to be cautious of using `duration` because by definition `duration` is last contact duration, in seconds and we do not know the duration until a call is made.\n\n### so we will move ahead","a6c5ab58":"# 12. duration","da044b0d":"# 5. default","988523db":"### We observe that this can used in a decision tree to make audiences. Let us kbreak it into 10 ranks instead of 5","7ffadd0c":"# 15. previous","a5dd953d":"### As we can infer from this graph, `Q1` seems to stand out everytime as evident earlier since it has a likelihood of `50 %`","31923a94":"### There is no monotonic trend visible that accounts for the discrmination of the target variable. We will be doing similar analysis for other variables as well","95a77a21":"### We can see the behavior that rank 1 has now higher likelihood and the trend is going in a decreasing fashion. We can transform this to add a discrimatory slope by merging everything after the 3rd rank with itself","592a51d7":"### we will convert continuos variables into categories by binning them into ranks","0d6254fd":"# Libraries","e78a2fcb":"| Input variables:                                         |                                                                                                                                                                                                                                                                                                                                                                                                                              |                                                                |   |\n|----------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------|---|\n| # bank client data:                                      |                                                                                                                                                                                                                                                                                                                                                                                                                              |                                                                |   |\n| 1                                                        | age (numeric)                                                                                                                                                                                                                                                                                                                                                                                                                |                                                                |   |\n| 2                                                        | job : type of job (categorical: 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown')                                                                                                                                                                                                                                           |                                                                |   |\n| 3                                                        | marital : marital status (categorical: 'divorced','married','single','unknown'; note: 'divorced' means divorced or widowed)                                                                                                                                                                                                                                                                                                  |                                                                |   |\n| 4                                                        | education (categorical: 'basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','unknown')                                                                                                                                                                                                                                                                                     |                                                                |   |\n| 5                                                        | default: has credit in default? (categorical: 'no','yes','unknown')                                                                                                                                                                                                                                                                                                                                                          |                                                                |   |\n| 6                                                        | housing: has housing loan? (categorical: 'no','yes','unknown')                                                                                                                                                                                                                                                                                                                                                               |                                                                |   |\n| 7                                                        | loan: has personal loan? (categorical: 'no','yes','unknown')                                                                                                                                                                                                                                                                                                                                                                 |                                                                |   |\n| # related with the last contact of the current campaign: |                                                                                                                                                                                                                                                                                                                                                                                                                              |                                                                |   |\n| 8                                                        | contact: contact communication type (categorical: 'cellular','telephone')                                                                                                                                                                                                                                                                                                                                                    |                                                                |   |\n| 9                                                        | month: last contact month of year (categorical: 'jan', 'feb', 'mar', ..., 'nov', 'dec')                                                                                                                                                                                                                                                                                                                                      |                                                                |   |\n| 10                                                       | day_of_week: last contact day of the week (categorical: 'mon','tue','wed','thu','fri')                                                                                                                                                                                                                                                                                                                                       |                                                                |   |\n| 11                                                       | duration: last contact duration, in seconds (numeric). Important note: this attribute highly affects the output target (e.g., if duration=0 then y='no'). Yet, the duration is not known before a call is performed. Also, after the end of the call y is obviously known. Thus, this input should only be included for benchmark purposes and should be discarded if the intention is to have a realistic predictive model. |                                                                |   |\n| # other attributes:                                      |                                                                                                                                                                                                                                                                                                                                                                                                                              |                                                                |   |\n| 12                                                       | campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)                                                                                                                                                                                                                                                                                                             |                                                                |   |\n| 13                                                       | pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)                                                                                                                                                                                                                                                                   |                                                                |   |\n| 14                                                       | previous: number of contacts performed before this campaign and for this client (numeric)                                                                                                                                                                                                                                                                                                                                    |                                                                |   |\n| 15                                                       | poutcome: outcome of the previous marketing campaign (categorical: 'failure','nonexistent','success')                                                                                                                                                                                                                                                                                                                        |                                                                |   |\n| # social and economic context attributes                 |                                                                                                                                                                                                                                                                                                                                                                                                                              |                                                                |   |\n| 16                                                       | emp.var.rate: employment variation rate                                                                                                                                                                                                                                                                                                                                                                                      | quarterly indicator (numeric)                                  |   |\n| 17                                                       | cons.price.idx: consumer price index                                                                                                                                                                                                                                                                                                                                                                                         | monthly indicator (numeric)                                    |   |\n| 18                                                       | cons.conf.idx: consumer confidence index                                                                                                                                                                                                                                                                                                                                                                                     | monthly indicator (numeric)                                    |   |\n| 19                                                       | euribor3m: euribor 3 month rate                                                                                                                                                                                                                                                                                                                                                                                              | daily indicator (numeric)                                      |   |\n| 20                                                       | nr.employed: number of employees                                                                                                                                                                                                                                                                                                                                                                                             | quarterly indicator (numeric)                                  |   |\n| Output variable (desired target):                        |                                                                                                                                                                                                                                                                                                                                                                                                                              |                                                                |   |\n| 21                                                       | y                                                                                                                                                                                                                                                                                                                                                                                                                            | has the client subscribed a term deposit? (binary: 'yes','no') |   |","17ac2951":"### `university.degree` and `professional.course` are a little better than the avg. success rate of the data\n\n### `illiterate` and `unknown` is showing high chances of taking a loan (comparing to 0.112..), but we do not want to target such audience in the practical scenario. Always analyze graphs with practical perspective !","383c023b":"# working with continous variables","8e367647":"# 14. pdays","a63c26e1":"### This can behave as a good predictor in case of a decision tree since the lower ranks are capturing more and higher ranks are capturing less","f5a42487":"# 19.euribor3m","476f1e06":"### We observe that when we combine `poutcome` and `quarter`. We will be able to build profiles that have 5-8 times better likelihood of success when compared to the no-model scenario. `Q3` has better chances than `Q4`\n\n### The idea is as we have seen above that `Q2` and `Q3` are not favorable in comparison to `Q1` and `Q4`, but in the practical scenario we can't stop the team to run campaigns in `Q2` and `Q3`. So we are adding surrogate variables to boost their performance.\n\n### Hope this notebook is useful \ud83d\ude04","2902e9e0":"### We see there is no significant difference in the trend for different personal loan status so we can conclude that this is a weak predictor of the dependent target","be299909":"# What is the baseline likelihood of term deposits ? This tells us what is the success rate in the absence of ML model","e7ad3338":"# 6. housing","f8485a71":"# Plotting the ROC curves","56d1d300":"# 4.marital_status ","a3af019f":"# 2. day_of_week","80d3acab":"### we will also go ahead and merge `unknown` and `illiterate` into one","ac321117":"### We observe a strong slope from rank 1 to 4","06e06178":"### This is a very good variable to design the audience which can be utilised later since it is able to discriminate the dependent target variable.\n### Note: Customers who were a success earlier are `5 times` mre likely to buy the term loan than a person who was a failure\n\n### We will also merge `nonexistent` and `failure` together"}}