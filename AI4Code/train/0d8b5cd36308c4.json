{"cell_type":{"bddf5355":"code","50b7caaf":"code","38b006b3":"code","e51af4b4":"code","8c611994":"code","bbf73c78":"code","ea126f1c":"code","6e3e818e":"code","9a5a1dc5":"code","452ef1bf":"code","1cec3e19":"code","9c90a370":"code","d101345f":"code","46f5cf53":"code","403c1b1b":"code","076a2c24":"code","8ce541fa":"code","a1659e48":"code","e9116d47":"code","ef321393":"code","7637b4d5":"code","7cbc8759":"markdown","816a0138":"markdown","f009ccb8":"markdown"},"source":{"bddf5355":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","50b7caaf":"# training data\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","38b006b3":"# testing data\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","e51af4b4":"test_data.tail()","8c611994":"# checking NaN values\ntrain_data.isnull().sum()","bbf73c78":"# Mode of Embarked is 'S' so replacing NaN with S\ntrain_data['Embarked']= train_data['Embarked'].replace(to_replace = np.nan, value='S')\ntrain_data.isnull().sum()","ea126f1c":"# Similarly replacing 'S' for testing dataset\ntest_data['Embarked']= test_data['Embarked'].replace(to_replace = np.nan, value='S')\ntest_data.isnull().sum()","6e3e818e":"# To predict the Ages of passengers having NaN as their age\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestRegressor\n\ntrain_data['Sex']=train_data['Sex'].map({'male':1, 'female':0})\ntest_data['Sex']=test_data['Sex'].map({'male':1, 'female':0})\n\n#print(train_data)","9a5a1dc5":"print(train_data.shape, test_data.shape)","452ef1bf":"# Combining training and testing given separately to form a new df for age prediction\ndf=train_data.append(test_data)\nprint(df.shape)","1cec3e19":"df= df.drop('Survived',axis=1)\ndf","9c90a370":"# dividing into training and testing part\n# testing is the one where the ages have to be predicted\ntrain = df.loc[(df.Age.notnull())]\ntest = df.loc[(df.Age.isnull())]\nprint(train.shape,test.shape)","d101345f":"# Fitting the model\nfeatures = [\"Pclass\",\"Sex\",\"SibSp\",\"Parch\"]\nX_train_rfr = pd.get_dummies(train[features])\nX_test_rfr = pd.get_dummies(test[features])\nY_train_rfr = train['Age']\nrfr = RandomForestRegressor(n_estimators=2000, n_jobs=-1)\nrfr.fit(X_train_rfr,Y_train_rfr)","46f5cf53":"predicted_ages = rfr.predict(X_test_rfr) ","403c1b1b":"test['Age'].tail()","076a2c24":"test['Pred_Age']=predicted_ages\nprint(test['Pred_Age'].tail())","8ce541fa":"# rounding the float values\ntest['Pred_Age']=test['Pred_Age'].round()\ntest","a1659e48":"# replacing the NaN values of age of passengers in training dataset with the predicted values\ntrain_data['Age'] = train_data['PassengerId'].map(test.set_index('PassengerId')['Pred_Age']).fillna(train_data['Age'])\ntrain_data","e9116d47":"# replacing the NaN values of age of passengers in testing dataset with the predicted values\ntest_data['Age'] = test_data['PassengerId'].map(test.set_index('PassengerId')['Pred_Age']).fillna(test_data['Age'])\ntest_data","ef321393":"# model for survival classification\nfrom sklearn.ensemble import RandomForestClassifier\n\nY_train = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\",\"Sex\",\"SibSp\",\"Age\",\"Parch\",\"Embarked\"]\nX_train = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X_train, Y_train)\nY_pred = model.predict(X_test)","7637b4d5":"# storing the output\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': Y_pred})\noutput.to_csv('submission.csv', index=False)\nprint(\"submission was successfully saved\")","7cbc8759":"# RandomForestRegressor for Age prediction\nAs age seems to be a factor which cannot be disregared easily but also has a huge number of NaN values, we should find a good way to replace those.","816a0138":"# Taking care of the NaN values of the Embarked Column\nReplacing NaN values with 'S' because its the most frequently occured value","f009ccb8":"# RandomForestClassifier for Survival Prediction"}}