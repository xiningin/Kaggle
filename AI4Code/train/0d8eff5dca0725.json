{"cell_type":{"db245f08":"code","59f8d3f9":"code","0ff0c4ed":"code","c763bef3":"code","74ca974e":"code","7eb149a2":"code","8c2b3abf":"code","0f43a471":"markdown","e3c14e58":"markdown","bc1168a0":"markdown","fa5d51b0":"markdown","a2981dbc":"markdown","5cda910b":"markdown","9765d3f5":"markdown"},"source":{"db245f08":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59f8d3f9":"import os\nfrom os.path import exists, join, basename, splitext\n\ngit_repo_url = 'https:\/\/github.com\/foolwood\/SiamMask.git'\nproject_name = splitext(basename(git_repo_url))[0]\nif not exists(project_name):\n  # clone and install dependencies\n  !git clone -q --depth 1 {git_repo_url}\n  !sed -i \"\/torch\/d\" {project_name}\/requirements.txt\n  !cd {project_name} && pip install -q -r requirements.txt\n  !cd {project_name} && bash make.sh\n  !pip install -q youtube-dl\n  \nimport sys\nsys.path.append(project_name)\nsys.path.append(join(project_name, 'experiments', 'siammask_sharp'))\nimport time\nimport matplotlib\nimport matplotlib.pyplot as plt\nplt.rcParams[\"axes.grid\"] = False\n\nfrom IPython.display import YouTubeVideo\n\nimport cv2\nimport torchvision\nimport cv2\nimport numpy as np\nimport torch\ntorch.set_grad_enabled(False)\n\nfrom types import SimpleNamespace\nfrom custom import Custom\nfrom tools.test import *","0ff0c4ed":"exp_path = join(project_name, 'experiments\/siammask_sharp')\npretrained_path1 = join(exp_path, 'SiamMask_DAVIS.pth')\npretrained_path2 = join(exp_path, 'SiamMask_VOT.pth')\n\n# download pretrained weights\nif not exists(pretrained_path1):\n  !cd {exp_path} && wget http:\/\/www.robots.ox.ac.uk\/~qwang\/SiamMask_DAVIS.pth\nif not exists(pretrained_path2):\n  !cd {exp_path} && wget http:\/\/www.robots.ox.ac.uk\/~qwang\/SiamMask_VOT.pth\n    \n# init SiamMask\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\ncfg = load_config(SimpleNamespace(config=join(exp_path, 'config_davis.json')))\nsiammask = Custom(anchors=cfg['anchors'])\nsiammask = load_pretrain(siammask, pretrained_path2)\nsiammask = siammask.eval().to(device)","c763bef3":"#https:\/\/youtu.be\/61h4-dvGZac\n#https:\/\/youtu.be\/xz7a9h2Epas\nYOUTUBE_ID = 'c_6-8kvLFCs'\n\n\nYouTubeVideo(YOUTUBE_ID)","74ca974e":"def single_object(pred):\n    threshold = 0.5\n    pred_class = [COCO_INSTANCE_CATEGORY_NAMES[i] for i in list(pred[0]['labels'].numpy())] # Get the Prediction Score\n    pred_boxes = [[(i[0], i[1]), (i[2], i[3])] for i in list(pred[0]['boxes'].detach().numpy())] # Bounding boxes\n    pred_score = list(pred[0]['scores'].detach().numpy())\n    pred_class = list(pred[0]['labels'].numpy())[-1] # Get the Prediction Score\n    pred_boxes = list(pred[0]['boxes'].detach().numpy())[-1] # Bounding boxes\n    pred_score = list(pred[0]['scores'].detach().numpy())[-1]\n    pred_t = [pred_score.index(x) for x in pred_score if x > threshold][-1] # Get list of index with score greater than threshold.\n    pred_boxes = pred_boxes[:pred_t+1]\n    pred_class = pred_class[:pred_t+1]\n    return pred_boxes, pred_class","7eb149a2":"!rm -rf youtube.mp4\n# download the youtube with the given ID\n!youtube-dl -f 'bestvideo[ext=mp4]' --output \"youtube.%(ext)s\" https:\/\/www.youtube.com\/watch?v={YOUTUBE_ID}\n\nf = 0\nvideo_capture = cv2.VideoCapture()\nif video_capture.open('youtube.mp4'):\n  width, height = int(video_capture.get(cv2.CAP_PROP_FRAME_WIDTH)), int(video_capture.get(cv2.CAP_PROP_FRAME_HEIGHT))\n  fps = video_capture.get(cv2.CAP_PROP_FPS)\n  \n  !rm -f output.mp4 output.avi\n  # can't write out mp4, so try to write into an AVI file\n  video_writer = cv2.VideoWriter(\"output.avi\", cv2.VideoWriter_fourcc(*'MJPG'), fps, (width, height))\n  \n  while video_capture.isOpened():\n    ret, frame = video_capture.read()\n    if not ret:\n      break\n\n    if f == 0:\n      # detect a person on the first frame with Mask R-CNN\n      maskrcnn = torchvision.models.detection.maskrcnn_resnet50_fpn(pretrained=True).eval()\n      output = maskrcnn([torchvision.transforms.functional.to_tensor((frame[...,::-1] \/ 255).astype(np.float32))])[0]\n      print(output['labels'])\n      #boxes, labels = single_object(output)\n      box = output['boxes'][1]\n      print(\"box: \" + str(box))\n      label = output['labels'][1]\n      print(\"label: \" + str(label))\n      score = output['scores'][1]\n      print(\"score: \" + str(score))\n\n      target_pos, target_sz = None, None\n      while True:\n      #for box, label, score in boxes, labels:\n        # search for a person with atleast 70% probability\n        if label == 16:\n          box = box.numpy()\n          print(\"box: \" + str(box))\n          x, y = int(box[0]), int(box[1])\n          w, h = int(box[2]) - x, int(box[3]) - y\n          target_pos = np.array([x + w \/ 2, y + h \/ 2])\n          target_sz = np.array([w, h])\n          break\n      assert target_pos is not None, \"no person found on the first frame!\"\n      print(\"person found:\", target_pos, target_sz)\n      \n      # init tracker\n      state = siamese_init(frame, target_pos, target_sz, siammask, cfg['hp'], device=device)\n    else:\n      # track\n      state = siamese_track(state, frame, mask_enable=True, refine_enable=True, device=device)\n      location = state['ploygon'].flatten()\n      mask = state['mask'] > state['p'].seg_thr\n      \n      frame[:, :, 2] = (mask > 0) * 255 + (mask == 0) * frame[:, :, 2]\n      cv2.polylines(frame, [np.int0(location).reshape((-1, 1, 2))], True, (0, 255, 0), 3)\n      \n      video_writer.write(frame)\n  \n    f += 1\n    # only on first 100 frames\n    if f > 1000:\n      break\n      \n  video_capture.release()\n  video_writer.release()\n  \n  # convert AVI to MP4\n  !ffmpeg -y -loglevel info -i output.avi output.mp4\nelse:\n  print(\"can't open the given input video file!\")","8c2b3abf":"def show_local_mp4_video(file_name, width=640, height=480):\n  import io\n  import base64\n  from IPython.display import HTML\n  video_encoded = base64.b64encode(io.open(file_name, 'rb').read())\n  return HTML(data='''<video width=\"{0}\" height=\"{1}\" alt=\"test\" controls>\n                        <source src=\"data:video\/mp4;base64,{2}\" type=\"video\/mp4\" \/>\n                      <\/video>'''.format(width, height, video_encoded.decode('ascii')))\n\nshow_local_mp4_video('output.mp4', width=960, height=720)","0f43a471":"Download the above youtube video and detect\/track\/segment a single person on the first 100 frames:","e3c14e58":"## Download pretrained weights and initialize SiamMask ","bc1168a0":"# SiamMask","fa5d51b0":"## Source\n\n[tugstugi](https:\/\/github.com\/tugstugi\/dl-colab-notebooks) \n\nFeel free to **upvote**","a2981dbc":"Finally, visualize the result:","5cda910b":"## Track a person on a test video with SiamMask\n\nWe are going to detect and track\/segment a person on the following youtube video:","9765d3f5":"## Install SiamMask"}}