{"cell_type":{"99f1b6c2":"code","23aebaba":"code","fb540534":"code","4a3f9d1b":"code","63d1a3ba":"code","3b275a13":"code","ccc18c37":"code","99c7160b":"code","1df5f249":"code","d007c449":"code","2d4c47e9":"code","9be26d86":"code","c1693fe4":"code","846b1d21":"code","82f8536f":"code","e74b4d28":"code","d2b8d01f":"code","c3ad1fda":"code","8b720bdc":"code","946ef346":"code","e113aa65":"code","56c62650":"markdown"},"source":{"99f1b6c2":"import os\nimport numpy as np\nimport pandas as pd\nfrom glob import glob\nfrom itertools import chain\nfrom tensorflow.keras import layers\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score, accuracy_score, average_precision_score\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nimport tensorflow as tf","23aebaba":"!pip install gdown","fb540534":"!gdown --id 1qRIdvUWiNxdAXXeEoyOMya-NuES6D-Px","4a3f9d1b":"path = \"..\/input\/chexpert-dataset\/\"\n\ntrain_df = pd.read_csv('..\/input\/modified-csv-of-chexpert\/modifiedv2_train.csv')\nvalid_df = pd.read_csv('..\/input\/modified-csv-of-chexpert\/modifiedv2_valid.csv')\ntrain_df[\"path\"] = path + train_df[\"Path\"]\nvalid_df[\"path\"] = path + valid_df[\"Path\"]\n\ndfs = [train_df, valid_df]\nall_xray_df = pd.concat(dfs)\nall_xray_df.sample(3)","63d1a3ba":"# all_xray_df.drop(\"No Finding\", axis=1, inplace=True)\nall_xray_df.columns","3b275a13":"all_xray_df['Finding Labels'] = all_xray_df['Finding Labels'].fillna('')","ccc18c37":"all_xray_df['Finding Labels'] = all_xray_df['Finding Labels'].map(lambda x: x.replace('No Finding', ''))","99c7160b":"all_labels = ['Atelectasis'\n, 'Consolidation'\n, 'Infiltration'\n, 'Pneumothorax'\n, 'Edema'\n, 'Emphysema'\n, 'Fibrosis'\n, 'Pleural Effusion'\n, 'Mass'\n, 'Pneumonia'\n, 'Pleural_thickening'\n, 'Cardiomegaly'\n, 'Nodule Mass'\n, 'Hernia'\n, 'Enlarged Cardiom'\n, 'Lung Lesion'\n, 'Lung Opacity'\n, 'Pleural Other'\n,'Fracture']\n\nprint('All Labels ({}): {}'.format(len(all_labels), all_labels))","1df5f249":"for c_label in all_labels:\n    if len(c_label)>1: # leave out empty labels\n        all_xray_df[c_label] = all_xray_df['Finding Labels'].map(lambda finding: 1.0 if c_label in finding else 0)\nall_xray_df.sample(3)","d007c449":"all_xray_df.head()","2d4c47e9":"train_df, valid_df = train_test_split(all_xray_df, test_size=0.20, random_state=2018, stratify=all_xray_df['Finding Labels'].map(lambda x: x[:4]))","9be26d86":"train_df['labels'] = train_df.apply(lambda x: x['Finding Labels'].split('|'), axis=1)\nvalid_df['labels'] = valid_df.apply(lambda x: x['Finding Labels'].split('|'), axis=1)","c1693fe4":"DATA_DIR = '..\/input\/chexpert-dataset\/CheXpert-v1.0-small\/train'\nimage_size = 256\nbatch_size = 32","846b1d21":"core_idg = ImageDataGenerator(rescale=1 \/ 255,\n                                  samplewise_center=True,\n                                  samplewise_std_normalization=True,\n                                  horizontal_flip=True,\n                                  vertical_flip=False,\n                                  height_shift_range=0.05,\n                                  width_shift_range=0.1,\n                                  rotation_range=5,\n                                  shear_range=0.1,\n                                  fill_mode='reflect',\n                                  zoom_range=0.15)\n\ntrain_gen = core_idg.flow_from_dataframe(dataframe=train_df,\n                                             directory=None,\n                                             x_col='path',\n                                             y_col='labels',\n                                             class_mode='categorical',\n                                             batch_size=batch_size,\n                                             classes=all_labels,\n                                             target_size=(image_size, image_size))\n\nvalid_gen = core_idg.flow_from_dataframe(dataframe=valid_df,\n                                             directory=None,\n                                             x_col='path',\n                                             y_col='labels',\n                                             class_mode='categorical',\n                                             batch_size=batch_size,\n                                             classes=all_labels,\n                                             target_size=(image_size, image_size))\n\ntest_X, test_Y = next(core_idg.flow_from_dataframe(dataframe=valid_df,\n                                                       directory=None,\n                                                       x_col='path',\n                                                       y_col='labels',\n                                                       class_mode='categorical',\n                                                       batch_size=1024,\n                                                       classes=all_labels,\n                                                       target_size=(image_size, image_size)))","82f8536f":"from tensorflow.keras.callbacks import ModelCheckpoint, LearningRateScheduler, EarlyStopping, ReduceLROnPlateau\nweight_path=\"{}sigmoid_activation_inceptionresnetv2_chexpert.h5\".format('xray_class')\n\ncheckpoint = ModelCheckpoint(weight_path, monitor='val_loss', verbose=1, \n                             save_best_only=True, mode='min')\n\nearly = EarlyStopping(monitor=\"val_loss\", \n                      mode=\"min\", \n                      patience=3)\ncallbacks_list = [checkpoint, early]","e74b4d28":"for x, y in train_gen:\n    print(x.shape)\n    break","d2b8d01f":"nihmodel = tf.keras.models.load_model('.\/sigmoid_activation_inceptionresnetv2.h5')","c3ad1fda":"# del newnihmodel","8b720bdc":"base_inputs = nihmodel.layers[0].input\nbase_outputs = nihmodel.layers[-2].output\n#dense_1 = layers.Dense(500, activation=\"relu\")(base_outputs)\noutput_layer = layers.Dense(19, activation=\"sigmoid\")(base_outputs)\n\nnewnihmodel = tf.keras.Model(inputs = base_inputs, outputs = output_layer)\nnewnihmodel.compile(\n    optimizer = tf.keras.optimizers.Adam(),\n    loss = tf.keras.losses.BinaryCrossentropy(),\n    metrics = [\"binary_accuracy\", \"mae\"],\n)","946ef346":"newnihmodel.summary()","e113aa65":"newnihmodel.fit(train_gen, \n                            steps_per_epoch=100,\n                            validation_data = (test_X, test_Y), \n                            epochs = 30, \n                            callbacks = callbacks_list)","56c62650":"**Fine Tune on chexpert**"}}