{"cell_type":{"e1621bbb":"code","52733c84":"code","806b57c4":"code","50b31ef3":"code","ab7e4914":"code","26c76aa5":"code","b3ff2bba":"code","2140c1e4":"code","24325686":"code","ecb86672":"code","7b1ff0b8":"code","9137a4c8":"code","b9732cad":"code","f3e83e46":"code","d61383ca":"code","304dc3cf":"code","1fdea545":"code","97a02268":"code","5be0347e":"code","a4c7b51e":"code","98627539":"code","097b0978":"code","9375aad8":"code","dec3b6a2":"code","092d4921":"code","9d941eae":"code","75499f42":"code","b467a6cf":"code","38c0cf80":"code","996d99d1":"code","6706adf3":"code","98e5e8ba":"code","83893b12":"code","22b2797c":"code","5e1b0033":"code","fc5bc0db":"code","e76ab421":"code","a009804f":"code","79f60b33":"code","ad8c2dc8":"code","2e6f79ef":"code","920e9f2a":"code","5c11f499":"code","3e8773de":"code","d1ba6b62":"code","ebc458dd":"code","8f08eb22":"code","149e8f66":"code","1c26fdb1":"code","84b6cb95":"code","ecd1512a":"code","4cc16083":"code","f83c6e2d":"code","5be7c0b5":"code","f9c5e417":"code","155b1d30":"code","d66c8ea1":"code","2010069c":"code","344666c2":"code","d10dea5c":"code","e9f392c7":"code","25286bd1":"code","f1177892":"code","eb4fad6b":"code","87ca0d70":"code","16389b84":"code","dc5a50db":"code","efedcf80":"code","13231add":"code","7ccf9c83":"markdown","ebcf0e62":"markdown","f35e471f":"markdown","3b518540":"markdown","5ea01ad4":"markdown","6d434683":"markdown","7e0ccf1c":"markdown","9a824dd5":"markdown","d76e5715":"markdown","cc6b34a9":"markdown","7d0e4b08":"markdown","af12f0fe":"markdown","51ce3cbc":"markdown","709c7aff":"markdown","d585f412":"markdown","14c14ecb":"markdown","8b52d3ff":"markdown","02a3b716":"markdown","59d6ac23":"markdown","37e66eb7":"markdown"},"source":{"e1621bbb":"#data preprocessing\nimport pandas as pd\n\n#Linear Algebra\nimport numpy as np\n\n#Data Visualization\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\n#plotly\n!pip install chart_studio\nimport plotly.express as px\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n\n#Algorithms\nfrom sklearn.svm import SVR\nfrom sklearn import linear_model\nfrom sklearn.linear_model import Ridge,Lasso,ElasticNet\nfrom pandas import Series, DataFrame\nfrom sklearn.linear_model import LinearRegression,LogisticRegression\nfrom sklearn.tree import DecisionTreeRegressor \nfrom sklearn.ensemble import RandomForestRegressor \nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.ensemble import GradientBoostingRegressor \nfrom sklearn import metrics  \nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","52733c84":"flight=pd.read_excel('..\/input\/data-train\/Data_Train.xlsx')\nflight.head()","806b57c4":"flight.describe()","50b31ef3":"flight.info()","ab7e4914":"flight.shape","26c76aa5":"flight['Date']=flight['Date_of_Journey'].str.split('\/').str[0]\nflight['Month']=flight['Date_of_Journey'].str.split('\/').str[1]\nflight['Year']=flight['Date_of_Journey'].str.split('\/').str[2]\n","b3ff2bba":"flight.head()","2140c1e4":"flight.dtypes","24325686":"flight['Date']=flight['Date'].astype(int)\nflight['Month']=flight['Month'].astype(int)\nflight['Year']=flight['Year'].astype(int)","ecb86672":"flight.dtypes","7b1ff0b8":"#droping Date-of-journey column\nflight.drop('Date_of_Journey',axis=1,inplace=True)\n","9137a4c8":"flight.head()","b9732cad":"flight['Arrival_time']=flight['Arrival_Time'].str.split(' ').str[0]\nflight.head()","f3e83e46":"#dropping Arrival_time\nflight.drop('Arrival_Time',axis=1,inplace=True)\nflight.head()","d61383ca":"flight[flight['Total_Stops'].isnull()]","304dc3cf":"flight['Total_Stops']=flight['Total_Stops'].fillna('1 stop')","1fdea545":"flight['Total_Stops']=flight['Total_Stops'].replace('non-stop','0 stop')","97a02268":"flight.head()","5be0347e":"flight['Stop']=flight['Total_Stops'].str.split(' ').str[0]","a4c7b51e":"flight.head()","98627539":"flight.drop('Total_Stops',axis=1,inplace=True)","097b0978":"flight.head()","9375aad8":"flight['Stop']=flight['Stop'].astype(int)","dec3b6a2":"flight.dtypes","092d4921":"flight['Arrival_hour']=flight['Arrival_time'].str.split(':').str[0]\nflight['Arrival_minutes']=flight['Arrival_time'].str.split(':').str[1]","9d941eae":"flight.head()","75499f42":"#Dropping Arrival_time feature from data\nflight.drop('Arrival_time',axis=1,inplace=True)","b467a6cf":"#converting data type from string to float\nflight['Arrival_hour']=flight['Arrival_hour'].astype(int)\nflight['Arrival_minutes']=flight['Arrival_minutes'].astype(int)","38c0cf80":"flight['Dep_hour']=flight['Dep_Time'].str.split(':').str[0]\nflight['Dep_minutes']=flight['Dep_Time'].str.split(':').str[1]","996d99d1":"flight['Dep_hour']=flight['Dep_hour'].astype(int)\nflight['Dep_minutes']=flight['Dep_minutes'].astype(int)\nflight.drop('Dep_Time',axis=1,inplace=True)","6706adf3":"flight.head()","98e5e8ba":"flight['Route_1']=flight['Route'].str.split('\u2192').str[0]\nflight['Route_2']=flight['Route'].str.split('\u2192').str[1]\nflight['Route_3']=flight['Route'].str.split('\u2192').str[2]\nflight['Route_4']=flight['Route'].str.split('\u2192').str[3]\nflight['Route_5']=flight['Route'].str.split('\u2192').str[4]\n","83893b12":"flight.head()","22b2797c":"flight['Price'].fillna((flight['Price'].mean()),inplace=True)","5e1b0033":"flight['Route_1'].fillna('None',inplace=True)\nflight['Route_2'].fillna('None',inplace=True)\nflight['Route_3'].fillna('None',inplace=True)\nflight['Route_4'].fillna('None',inplace=True)\nflight['Route_5'].fillna('None',inplace=True)","fc5bc0db":"flight.head()","e76ab421":"flight.drop(['Route','Duration'],axis=1,inplace=True)","a009804f":"flight.head()","79f60b33":"from sklearn.preprocessing import LabelEncoder\nencoder=LabelEncoder()\nflight['Airline']=encoder.fit_transform(flight['Airline'])\nflight['Source']=encoder.fit_transform(flight['Source'])\nflight['Destination']=encoder.fit_transform(flight['Destination'])\nflight['Additional_Info']=encoder.fit_transform(flight['Additional_Info'])\nflight['Route_1']=encoder.fit_transform(flight['Route_1'])\nflight['Route_2']=encoder.fit_transform(flight['Route_2'])\nflight['Route_3']=encoder.fit_transform(flight['Route_3'])\nflight['Route_4']=encoder.fit_transform(flight['Route_4'])\nflight['Route_5']=encoder.fit_transform(flight['Route_5'])","ad8c2dc8":"flight.head()","2e6f79ef":"#dropping year column\nflight.drop('Year',axis=1,inplace=True)","920e9f2a":"flight.isnull().sum()","5c11f499":"#check still any missing values present or not\nsns.heatmap(flight.isnull())","3e8773de":"flight['Stop'].value_counts().iplot(kind='bar',\n                                              yTitle='Counts', \n                                              linecolor='black', \n                                              opacity=0.7,\n                                              color='blue',\n                                              theme='pearl',\n                                              bargap=0.5,\n                                              gridcolor='white',\n                                              title='Distribution of classes column ')","d1ba6b62":"\nfig = px.scatter(flight, x=\"Arrival_hour\", y=\"Dep_hour\", color='Price')\nfig.show()","ebc458dd":"#check cor-relation\ncorr_hmap=flight.corr()\nplt.figure(figsize=(8,7))\nsns.heatmap(corr_hmap,annot=True)\nplt.show()","8f08eb22":"from sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel","149e8f66":"x=flight.drop('Price',axis=1)\nx.head()","1c26fdb1":"y=flight['Price']\ny.head()","84b6cb95":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)","ecd1512a":"x_train.shape","4cc16083":"y_train.shape","f83c6e2d":"x_test.shape","5be7c0b5":"y_test.shape","f9c5e417":"model=SelectFromModel(Lasso(alpha=0.005,random_state=0))","155b1d30":"model.fit(x_train,y_train)","d66c8ea1":"model.get_support()","2010069c":"selected_features=x_train.columns[(model.get_support())]","344666c2":"selected_features","d10dea5c":"from sklearn.model_selection import RandomizedSearchCV\n#Randomized Search CV\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n# max_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 100]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]","e9f392c7":"# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\nprint(random_grid)","25286bd1":"# Use the random grid to search for best hyperparameters\n# First create the base model to tune\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()","f1177892":"# Random search of parameters, using 3 fold cross validation, \n# search across 50 different combinations\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 50, cv = 5, verbose=2, random_state=42, n_jobs = 1)\n","eb4fad6b":"rf_random.fit(x_train,y_train)","87ca0d70":"y_pred=rf_random.predict(x_test)","16389b84":"rsquare=metrics.r2_score(y_test,y_pred)\nprint('R-square',rsquare)","dc5a50db":"sns.distplot(y_test-y_pred)","efedcf80":"plt.scatter(y_test,y_pred)\n","13231add":"pred_rfr=rf_random.predict(x_test)\nprint(\"predicted price\",pred_rfr)\nprint(\"actual price\",y_test)","7ccf9c83":"flight data has 11 features and 10683 rows .","ebcf0e62":"Here we can observe one thing minimum flight price is 1759 and maximum is 79512.","f35e471f":"# Problem Description","3b518540":"# Getting Data","5ea01ad4":"## Feature Selection","6d434683":"# Feature Engineering","7e0ccf1c":"From here we can observe that one thing where dep-hour is in between(15-18) hours arrival time at  any time the price of flight ticket is more than 90000.","9a824dd5":"## Feature Description","d76e5715":"Route and Total_Stops contains missing data and it's better to clear this missing values.","cc6b34a9":"# Importing Libraries","7d0e4b08":"* Size of training set: 10683 records\n* Size of test set: 2671 records\n* FEATURES: Airline: The name of the airline.     \n* Date_of_Journey: The date of the journey\n* Source: The source from which the service begins.\n* Destination: The destination where the service ends.\n* Route: The route taken by the flight to reach the destination.\n* Dep_Time: The time when the journey starts from the source.\n* Arrival_Time: Time of arrival at the destination.\n* Duration: Total duration of the flight.\n* Total_Stops: Total stops between the source and destination.\n* Additional_Info: Additional information about the flight\n* Price: The price of the ticket","af12f0fe":"Here you can see out of 100% 52 % of stops are belongs to 1 stop and 32% of stops are belongs to no-stop ,14 % are belongs to 2 stops ,rest of are 3 stops.","51ce3cbc":"## Random Forest Regressor","709c7aff":"Now you can see here there is no missing data present here .","d585f412":"Data looks perfect upto now .","14c14ecb":"Flight ticket prices can be something hard to guess, today we might see a price, check out the price of the same flight tomorrow, it will be a different story. We might have often heard travellers saying that flight ticket prices are so unpredictable. Huh! Here we take on the challenge! As data scientists, we are gonna prove that given the right data anything can be predicted. Here you will be provided with prices of flight tickets for various airlines between the months of March and June of 2019 and between various cities.","8b52d3ff":"# Predicting Data","02a3b716":"# Exploratory Data Analysis","59d6ac23":"It's done upto now","37e66eb7":"Here we can observe price is in integer format and other than price ever other feature is in object format."}}