{"cell_type":{"71b447a8":"code","1ffd6365":"code","d4cb6f01":"code","368e2411":"code","9255082d":"code","f0fb69a0":"code","cc37db2a":"code","22a957db":"code","381e9be9":"code","739eda44":"code","9901bd2a":"code","53df5848":"code","a74900bd":"code","3eb96541":"code","f1f173a9":"code","734dd73f":"code","c668b82f":"code","7d751b9d":"code","7fa59c30":"code","d2599744":"code","a1d0f52b":"code","3299f0e7":"code","3050b54f":"code","1f3b7ac8":"code","e9339dab":"code","35f0ab66":"code","149142a9":"code","c06df810":"code","a92bcae1":"code","7115b453":"code","3e62970f":"code","a3138067":"code","7e813e0a":"code","51671ad2":"code","f5e1595e":"code","42bf7aa5":"code","c866795d":"code","47e61b8a":"code","6276e1fc":"code","8c846c9f":"code","80ae7b8e":"code","e4735d4e":"code","6ad09132":"code","68538763":"code","ec4d2a41":"code","d8f4eed1":"code","7d6219b1":"code","83887ee7":"code","40c5a1aa":"code","96dfe1d6":"code","1a91766f":"code","3e817055":"code","5687f08a":"code","1ca1eb2e":"code","a7213c9d":"code","27946173":"code","29db0df4":"code","47917744":"code","0d278cdd":"code","633cfb52":"code","47aea63d":"code","baae6ee2":"code","0a35cfbc":"code","8f35f371":"code","38b633be":"code","61da4bd4":"code","19bcfdcb":"code","d8f6fc7b":"markdown","73da47b3":"markdown","c160e834":"markdown","1a2f47c6":"markdown","852a0b8e":"markdown","55c926a9":"markdown","340c7427":"markdown","15cc4182":"markdown","a74b9310":"markdown","6a652d95":"markdown","816aa1ee":"markdown","64fea6db":"markdown","294ffec4":"markdown","d6d22df8":"markdown","4a9f5544":"markdown","dd6c4cd8":"markdown","cac3b751":"markdown","f9ba54d3":"markdown","2ae41ae7":"markdown","2c4c8d63":"markdown","3d4eaf83":"markdown","52e8293c":"markdown","abf0494a":"markdown","f300021b":"markdown","b6f1465e":"markdown","1d34c0a9":"markdown","63874fee":"markdown","6fc324db":"markdown","ebd1eb01":"markdown","2a15192b":"markdown","449d0ed9":"markdown","727a54fd":"markdown","ec3968cf":"markdown","e6623081":"markdown","97f65d02":"markdown","f0013ad9":"markdown","d13c2e59":"markdown","d3c8350e":"markdown","446cd7fc":"markdown","ed4ea851":"markdown","a916ee06":"markdown","dd19529c":"markdown","fa591738":"markdown","4f56782a":"markdown","da4dd47b":"markdown","2cbd1cb2":"markdown","a66de41b":"markdown","ec0c70f8":"markdown","c50f4bdd":"markdown","da1fe599":"markdown","7498e1ce":"markdown","431d8ac0":"markdown","187b2736":"markdown","0fb3725d":"markdown","3370ca1e":"markdown","d4a71e1f":"markdown","7685e109":"markdown","c2e13f1e":"markdown","467827e5":"markdown","af3571d2":"markdown","499d0152":"markdown","2ffda4e7":"markdown","15d17cae":"markdown","6a41310c":"markdown","27d7f14a":"markdown","4dfe82dc":"markdown","e6e6cf92":"markdown","90a70a73":"markdown","a03d55b8":"markdown","8893b1dc":"markdown","f1c67eb1":"markdown","a1aab55b":"markdown","c081295f":"markdown","98dc248d":"markdown","cd739a70":"markdown","941d1174":"markdown","f087584b":"markdown"},"source":{"71b447a8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tqdm.auto import tqdm \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1ffd6365":"oj = os.path.join\npath = '..\/input\/ventilator-pressure-prediction'\ntrain = pd.read_csv(oj(path, 'train.csv'))\ntest  = pd.read_csv(oj(path, 'test.csv'))\nsub   = pd.read_csv(oj(path, 'sample_submission.csv'))","d4cb6f01":"%%time\ntrain['R_C'] = [f'{r:02}_{c:02}' for r, c in zip(train['R'], train['C'])]\nRCorder = list(np.sort(train['R_C'].unique()))\n#RCorder","368e2411":"%%time\n# fast area calculation\ntrain['time_delta'] = train['time_step'].diff()\ntrain['time_delta'].fillna(0, inplace=True)\ntrain['time_delta'].mask(train['time_delta'] < 0, 0, inplace=True)\ntrain['tmp'] = train['time_delta'] * train['u_in']\ntrain['area'] = train.groupby('breath_id')['tmp'].cumsum()","9255082d":"%%time\n# u_in: max, min, mean, std \nu_in_max_dict = train.groupby('breath_id')['u_in'].max().to_dict()\ntrain['u_in_max'] = train['breath_id'].map(u_in_max_dict)\nu_in_min_dict = train.groupby('breath_id')['u_in'].min().to_dict()\ntrain['u_in_min'] = train['breath_id'].map(u_in_min_dict)\nu_in_mean_dict = train.groupby('breath_id')['u_in'].mean().to_dict()\ntrain['u_in_mean'] = train['breath_id'].map(u_in_mean_dict)\nu_in_std_dict = train.groupby('breath_id')['u_in'].std().to_dict()\ntrain['u_in_std'] = train['breath_id'].map(u_in_std_dict)","f0fb69a0":"# u_in_half is time:0 - time point of u_out:1 rise (almost 1.0s)\ntrain['tmp'] = train['u_out']*(-1)+1 # inversion of u_out\ntrain['u_in_half'] = train['tmp'] * train['u_in']","cc37db2a":"%%time\n# u_in_half: max, min, mean, std\nu_in_half_max_dict = train.groupby('breath_id')['u_in_half'].max().to_dict()\ntrain['u_in_half_max'] = train['breath_id'].map(u_in_half_max_dict)\nu_in_half_min_dict = train.groupby('breath_id')['u_in_half'].min().to_dict()\ntrain['u_in_half_min'] = train['breath_id'].map(u_in_half_min_dict)\nu_in_half_mean_dict = train.groupby('breath_id')['u_in_half'].mean().to_dict()\ntrain['u_in_half_mean'] = train['breath_id'].map(u_in_half_mean_dict)\nu_in_half_std_dict = train.groupby('breath_id')['u_in_half'].std().to_dict()\ntrain['u_in_half_std'] = train['breath_id'].map(u_in_half_std_dict)","22a957db":"# Groupby is slow, do not use it.\n# All entries are first point of each breath_id\nfirst_df = train.loc[0::80,:]\n# All entries are first point of each breath_id\nlast_df = train.loc[79::80,:]","381e9be9":"%%time\n# The Main mode DataFrame and flag\nmain_df= last_df[(last_df['u_in']>4.8)&(last_df['u_in']<5.1)]\nmain_mode_dict = dict(zip(main_df['breath_id'], [1]*len(main_df)))\ntrain['main_mode'] = train['breath_id'].map(main_mode_dict)\ntrain['main_mode'].fillna(0, inplace=True)","739eda44":"%%time\n# u_out1_timing flag and DataFrame: speed up\n# \u9ad8\u901f\u7248 uout1_df \u4f5c\u6210\ntrain['u_out_diff'] = train['u_out'].diff()\ntrain['u_out_diff'].fillna(0, inplace=True)\ntrain['u_out_diff'].replace(-1, 0, inplace=True)\nuout1_df = train[train['u_out_diff']==1]","9901bd2a":"main_uout1 = uout1_df[uout1_df['main_mode']==1]\nnomain_uout1 = uout1_df[uout1_df['main_mode']==1]","53df5848":"# Register Area when u_out becomes 1\nuout1_area_dict = dict(zip(first_df['breath_id'], first_df['u_in']))\ntrain['area_uout1'] = train['breath_id'].map(uout1_area_dict) ","a74900bd":"%%time\n# u_in: first point, last point\nu_in_first_dict = dict(zip(first_df['breath_id'], first_df['u_in']))\ntrain['u_in_first'] = train['breath_id'].map(u_in_first_dict)\nu_in_last_dict = dict(zip(first_df['breath_id'], last_df['u_in']))\ntrain['u_in_last'] = train['breath_id'].map(u_in_last_dict)\n# time(sec) of end point\ntime_end_dict = dict(zip(last_df['breath_id'], last_df['time_step']))     \ntrain['time_end'] = train['breath_id'].map(time_end_dict)","3eb96541":"%%time\n# time(sec) when u_out becomes 1\nuout1_dict = dict(zip(uout1_df['breath_id'], uout1_df['time_step']))\ntrain['time_uout1'] = train['breath_id'].map(uout1_dict)","f1f173a9":"%%time\n# u_in when u_out becomes1\nu_in_uout1_dict = dict(zip(uout1_df['breath_id'], uout1_df['u_in']))\ntrain['u_in_uout1'] = train['breath_id'].map(u_in_uout1_dict)","734dd73f":"%%time\n# Dict that puts 0 at the beginning of the 80row cycle\nfirst_0_dict = dict(zip(first_df['id'], [0]*len(uout1_df)))\n\n# Faster version u_in_diff creation, faster than groupby\ntrain['u_in_diff'] = train['u_in'].diff()\ntrain['tmp'] = train['id'].map(first_0_dict) # put 0, the 80row cycle\ntrain.iloc[0::80, train.columns.get_loc('u_in_diff')] = train.iloc[0::80, train.columns.get_loc('tmp')]","c668b82f":"%%time\n# Create u_in vibration\ntrain['diff_sign'] = np.sign(train['u_in_diff'])\ntrain['sign_diff'] = train['diff_sign'].diff()\ntrain['tmp'] = train['id'].map(first_0_dict) # put 0, the 80row cycle\ntrain.iloc[0::80, train.columns.get_loc('sign_diff')] = train.iloc[0::80, train.columns.get_loc('tmp')]\n\n# Count the number of inversions, so take the absolute value and sum\ntrain['sign_diff'] = abs(train['sign_diff']) \nsign_diff_dict = train.groupby('breath_id')['sign_diff'].sum().to_dict()\ntrain['diff_vib'] = train['breath_id'].map(sign_diff_dict)","7d751b9d":"%%time\nif 'diff_sign' in train.columns:\n    train.drop(['diff_sign', 'sign_diff'], axis=1, inplace=True)","7fa59c30":"train.head()","d2599744":"train.columns","a1d0f52b":"%%time\n################################################################\nfirst_df = train.loc[0::80,:]\nlast_df = train.loc[79::80,:]\nmain_df= last_df[(last_df['u_in']>4.8)&(last_df['u_in']<5.1)]\nnomain_df = last_df[(last_df['u_in']<=4.8)|(last_df['u_in']>=5.1)]\nuout1_df = train[train['u_out_diff']==1]\nmain_uout1 = uout1_df[uout1_df['main_mode']==1]\nnomain_uout1 = uout1_df[uout1_df['main_mode']==1]\n################################################################","3299f0e7":"def plot_bid(bid, col1='', col2=''):\n    fig, ax1 = plt.subplots(figsize = (6, 4)) \n    \n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n    ax2 = ax1.twinx()\n\n    ax1.plot(tmp['time_step'], tmp['pressure'], 'm-', label='pressure')\n    ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in')\n    ax2.plot(tmp['time_step'], tmp['u_out'], 'b-', label='u_out')\n\n    ax1.set_xlabel('Timestep')\n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    mean = tmp['diff_mean'][0]\n    std = tmp['diff_std'][0]\n    vib = tmp['diff_vib'][0]\n    title_str = f'breath_id:{bid}, R:{R}, C:{C}, mean:{mean:.2f}, std:{std:.2f}, vib:{vib:.1f}'\n    if col1 != '':\n        c1 = tmp[col1][0]\n        title_str += f'{col1}: {c1}'\n    if col2 != '':\n        c2 = tmp[col2][0]\n        title_str += f'{col2}: {c2}'\n    ax1.set_title(title_str)\n\n    ax1.set_ylim(0, 100)\n    \n    ax1.legend(loc=(1.1, 0.8))\n    ax2.legend(loc=(1.1, 0.7))\n    plt.show()\n\ndef plot_uin(bid):\n    fig, ax1 = plt.subplots(figsize = (6, 4)) \n\n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n    #ax2 = ax1.twinx()\n\n    ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in')\n\n    ax1.set_xlabel('Timestep')\n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    mean = tmp['diff_mean'][0]\n    std = tmp['diff_std'][0]\n    vib = tmp['diff_vib'][0]\n    title_str = f'breath_id:{bid}, R:{R}, C:{C}, mean:{mean:.2f}, std:{std:.2f}, vib:{vib:.1f}'\n    ax1.set_title(title_str)\n\n    ax1.set_ylim(0, 100)\n    \n    plt.show()\n\ndef plot_time_step(bid):\n    plt.figure()\n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    plt.title(f'breath_id:{bid}, R:{R}, C:{C}')\n    plt.ylabel('Timestep')\n    plt.xlabel('Row No.')\n\n    plt.plot(train.loc[train['breath_id'] == bid]['time_step'].tolist())\n    plt.show()\n\ndef plot_uin_list(bid_list, ylim=100, u_low=0, u_high=100, pos=79, alpha=False):\n    \n    fig, ax1 = plt.subplots(figsize = (6, 4)) # original (12, 8)\n\n    if alpha:\n        a = alpha\n    else:\n        if (len(bid_list)):\n            a = max(1.0\/len(bid_list), 0.01)\n        else:\n            a = 1\n    \n    for bid in tqdm(bid_list):\n        tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n        u = tmp['u_in'][pos]\n        if (u >= u_low) and (u <= u_high):  \n            ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', alpha=a)\n\n    ax1.set_xlabel('Timestep')\n    ax1.set_ylabel('u_in')\n    ax1.set_ylim(0,ylim)\n    #ax1.legend(loc=(1.1, 0.8))\n    plt.show()\n\ndef df_from_to(df, f=0.0, t=6.0):\n    # \u300c0.0\u306e\u307f\u300d\u3068\u300c0.0\u3088\u308a\u5927\u304d\u304f1\u4ee5\u4e0b\u300d\u3092\u5b9f\u73fe\u3057\u305f\u3044\u306e\u3067\u3001\u3053\u306e\u4e0d\u7b49\u53f7\u306e\u5f62\n    bid_list = df.loc[(df['u_in'] > f)&(df['u_in'] <= t)]['breath_id'].tolist()\n    return bid_list   ","3050b54f":"def plot_double_time_bid(bid, time_delta=False, col1='', col2=''):\n    fig = plt.figure(figsize = (12, 4))\n    ax1 = fig.add_subplot(1, 2, 1)\n    ax2 = fig.add_subplot(1, 2, 2)\n    \n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n\n    ts = []\n    td = []\n    if time_delta:\n        outlier = tmp.loc[tmp['time_delta'] > 0.15]\n        \n        rw = outlier['id'].tolist()\n        ts = outlier['time_step'].tolist()\n        td = outlier['time_delta'].tolist()\n        \n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    title_str = f'breath_id:{bid}, R:{R}, C:{C}'\n    if col1 != '':\n        c1 = tmp[col1][0]\n        title_str += f'{col1}: {c1}'\n    if col2 != '':\n        c2 = tmp[col2][0]\n        title_str += f'{col2}: {c2}'\n    ax1.set_title(title_str)\n    \n    ax1.set_ylabel('Timestep')\n    ax1.set_xlabel('Row No.')\n\n    ymax = 3.0\n    ax1.set_ylim(0, ymax)\n\n    if time_delta:\n        rows = []\n        for a in rw:\n            aa = a % 80 - 2\n            if aa < 0:\n                aa += 80\n            rows.append(aa)\n            aa = a % 80 - 1\n            if aa < 0:\n                aa += 80\n            rows.append(aa)\n        ax1.vlines(rows, 0, ymax, \"red\", linestyles='dashed', alpha=0.2)\n\n    \n    ax1.plot(train.loc[train['breath_id'] == bid]['time_step'].tolist())\n\n    ##############################\n    ax3 = ax2.twinx()\n\n    ax2.plot(tmp['time_step'], tmp['pressure'], 'm-', label='pressure')\n    ax2.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in')\n    ax3.plot(tmp['time_step'], tmp['u_out'], 'b-', label='u_out')\n\n    ax2.set_xlabel('Timestep')\n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    mean = tmp['diff_mean'][0]\n    std = tmp['diff_std'][0]\n    vib = tmp['diff_vib'][0]\n    title_str = f'breath_id:{bid}, R:{R}, C:{C}, mean:{mean:.2f}, std:{std:.2f}, vib:{vib:.1f}'\n    ax2.set_title(title_str)\n\n    ymax = 100\n    ax2.set_ylim(0, ymax)\n    \n    if time_delta:\n        lines = []\n        for a, b in zip(ts, td):\n            lines.append(a-b)\n            lines.append(a)\n        ax2.vlines(lines, 0, ymax, \"red\", linestyles='dashed', alpha=0.2)\n    \n    ax2.legend(loc=(1.1, 0.8))\n    ax3.legend(loc=(1.1, 0.7))\n    \n    fig.tight_layout()\n    plt.show()","1f3b7ac8":"def plot_pre_list(bid_list, ylim=100, low=0, high=100, pos=79, alpha=False):\n    \n    fig, ax1 = plt.subplots(figsize = (6, 4)) # original (12, 8)\n\n    if alpha:\n        a = alpha\n    else:\n        if (len(bid_list)):\n            a = max(1.0\/len(bid_list), 0.01)\n        else:\n            a = 1\n    \n    for bid in tqdm(bid_list):\n        tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n        u = tmp['pressure'][pos]\n        if (u >= low) and (u <= high):  \n            ax1.plot(tmp['time_step'], tmp['pressure'], 'm-', alpha=a)\n\n    ax1.set_xlabel('Timestep')\n    ax1.set_ylabel('Pressure')\n    ax1.set_ylim(0,ylim)\n    #ax1.legend(loc=(1.1, 0.8))\n    plt.show()\n","e9339dab":"def plot_double_pre_list(bid_list, max_plots=False, ylim=100, alpha=False):\n    fig = plt.figure(figsize = (12, 4))\n    ax1 = fig.add_subplot(1, 2, 1)\n    ax2 = fig.add_subplot(1, 2, 2)\n       \n    title_str = f'time - u_in'\n    ax1.set_title(title_str)\n    \n    ax1.set_ylabel('u_in')\n    ax1.set_xlabel('Timestep')\n\n    ax1.set_ylim(0, ylim)\n   \n    ##############################\n    ax2.set_ylabel('Pressure')\n    ax2.set_xlabel('Timestep')\n    \n    title_str = f'time - pressure'\n    ax2.set_title(title_str)\n\n    ax2.set_ylim(0, ylim)\n\n    ##############################\n    if alpha:\n        a = alpha\n    else:\n        if (len(bid_list)):\n            a = max(1.0\/len(bid_list), 0.01)\n        else:\n            a = 1\n    if not max_plots:\n        max_plots = len(bid_list)\n        \n    for bid in tqdm(bid_list[:max_plots]):\n        tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n        ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in', alpha=a)\n        ax2.plot(tmp['time_step'], tmp['pressure'], 'm-', label='pressure', alpha=a)\n    \n    fig.tight_layout()\n    plt.show()","35f0ab66":"def plot_double_area_bid(bid):\n    fig = plt.figure(figsize = (12, 4))\n    ax1 = fig.add_subplot(1, 2, 1)\n    ax2 = fig.add_subplot(1, 2, 2)\n    \n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n\n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    title_str = f'Area'\n    ax1.set_title(title_str)\n    \n    ax1.set_ylabel('Area')\n    ax1.set_xlabel('Timestep')\n\n    ymax = 100\n    ax1.set_ylim(0, ymax)\n\n    ax1.plot(tmp['time_step'], tmp['area'],  'r-', label='area')\n    #ax1.plot(tmp['time_step'], tmp['area2'], 'g-', label='area2')\n\n    ##############################\n    ax3 = ax2.twinx()\n\n    ax2.plot(tmp['time_step'], tmp['pressure'], 'm-', label='pressure')\n    ax2.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in')\n    ax3.plot(tmp['time_step'], tmp['u_out'], 'b-', label='u_out')\n\n    ax2.set_xlabel('Timestep')\n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    mean = tmp['diff_mean'][0]\n    std = tmp['diff_std'][0]\n    vib = tmp['diff_vib'][0]\n    title_str = f'breath_id:{bid}, R:{R}, C:{C}, mean:{mean:.2f}, std:{std:.2f}, vib:{vib:.1f}'\n    ax2.set_title(title_str)\n\n    ymax = 100\n    ax2.set_ylim(0, ymax)\n    \n    ax2.legend(loc=(1.1, 0.8))\n    ax3.legend(loc=(1.1, 0.7))\n    \n    fig.tight_layout()\n    plt.show()","149142a9":"def plot_bid_stats(list, indiv=3, df=last_df, max_plots=False, no_uin=False,\n                   alpha=False, time_delta=False, col1='', col2=''):\n    tmpdf= df[df['breath_id'].isin(list)]\n    bid_list = tmpdf['breath_id']\n    print('Number of plots:', len(bid_list))\n    \n    if indiv:\n        for bid in bid_list[:indiv]: # \u6700\u59273\u500b\u3001\u500b\u5225\u8868\u793a\n            if time_delta:\n                plot_double_bid(bid, time_delta=True, col1=col1, col2=col2)\n            else:\n                plot_bid(bid, col1=col1, col2=col2)\n\n    #plt.hist(tmpdf['R_C'], bins=17) # \u68d2\u30b0\u30e9\u30d5\u306e\u9806\u756a\u6307\u5b9a\u3067\u304d\u306a\u3044\u306e\u3067\u898b\u306b\u304f\u3044\n    sns.countplot(x=\"R_C\", data=tmpdf, order=RCorder)\n    plt.show()\n    \n    if not no_uin:\n        if not max_plots:\n            max_plots = len(bid_list)\n            print(f'Number of plots: {max_plots}')\n        else:\n            print(f'Number of plots: {max_plots}\/{len(bid_list)}')\n        plot_uin_list(bid_list[:max_plots], alpha=alpha)","c06df810":"print('The main mode:')\nplot_bid_stats(main_df['breath_id'], indiv=0, no_uin=True)\nplot_double_pre_list(main_df['breath_id'][:1000])\nprint('Other than the main mode:')\nplot_bid_stats(nomain_df['breath_id'], indiv=0, no_uin=True)\nplot_double_pre_list(nomain_df['breath_id'][:1000])","a92bcae1":"plt.hist(last_df['diff_vib'], bins=100)\nplt.title(\"diff_vib global distribution\")\nplt.show()","7115b453":"# The main mode and ohters\nfig = plt.figure(figsize = (12, 4))\nax1 = fig.add_subplot(1, 2, 1)\nax2 = fig.add_subplot(1, 2, 2)\n\nax1.hist(main_df['diff_vib'], bins=100)\nax1.set_title('The main mode')\n\nax2.hist(nomain_df['diff_vib'], bins=100)\nax2.set_title('Other than the main mode')\n\nplt.show()","3e62970f":"df = main_df\nprint('Number of the main mode:', len(df) )\nplot_double_pre_list(df['breath_id'], max_plots=1000)","a3138067":"print('Total:', len(uout1_df))\nprint('Main mode:', len(main_uout1))","7e813e0a":"def between(list):\n    between = []\n    for i, a in enumerate(list):\n        if i == 0:\n            prev = a\n            continue\n        b = (prev + a)\/2\n        between.append(b)\n        prev = a\n    \n    return between","51671ad2":"pattern = {}","f5e1595e":"df=main_uout1\nfor a in ['05_10', '20_10', '50_10']:\n    print(a)\n    df2=df[df['R_C']==a]\n    plot_double_pre_list(df2['breath_id'], max_plots=1000)","42bf7aa5":"df=main_uout1\nymax=600\nxmax=60\nfor a in ['05_10', '20_10', '50_10']:\n    print(a)\n    plt.figure(figsize=(12,4))\n    plt.title(f'R_C: {a}')\n    plt.ylim(0,ymax)\n    plt.xlim(0,xmax)\n    plt.hist(df[df['R_C']==a]['pressure'], bins=100)\n    pattern[a] = [10, 15, 20, 25, 30, 35]\n    plt.vlines(pattern[a], 0, ymax, \"red\", linestyles='dashed')\n    plt.vlines(between(pattern[a]), 0, ymax, \"green\", linestyles='dashed', alpha=0.5)\n    plt.show()","c866795d":"def plot_uin_pre_hist(RC_list, df, double=True, pre=True, mean=True):\n    ymax=600\n    xmax=60\n    for a in RC_list:\n        print('R_C:', a)\n        df2=df[df['R_C']==a]\n        print('Number:', len(df2))\n        \n        if double:\n            plot_double_pre_list(df2['breath_id'], max_plots=1000)    \n\n        if pre:\n            plt.figure(figsize=(12,4))\n            plt.title(f'pressure: R_C: {a}')\n            plt.ylim(0,ymax)\n            plt.xlim(0,xmax)\n            plt.hist(df2['pressure'], bins=100)\n            plt.vlines(pattern[a], 0, ymax, \"red\", linestyles='dashed')\n            plt.vlines(between(pattern[a]), 0, ymax, \"green\", linestyles='dashed', alpha=0.5)\n            plt.show()\n\n        if mean:\n            plt.figure(figsize=(12,4))\n            plt.title(f'u_in_mean: R_C: {a}')\n            plt.hist(df2['u_in_mean'], bins=100)\n            plt.show()","47e61b8a":"df=main_uout1\nplot_uin_pre_hist(['05_10', '20_10'], df, double=False, pre=False)","6276e1fc":"df=main_uout1\ndf2=df[(df['u_in_max']>=30)] ### condition\nplot_uin_pre_hist(['05_10', '20_10'], df2)","8c846c9f":"df=main_uout1\ndf2=df[(df['u_in_max']<30)&(df['u_in_first']>0)] ### condition\nplot_uin_pre_hist(['05_10', '20_10'], df2)","80ae7b8e":"df=main_uout1\ndf2=df[(df['u_in_max']<30)&(df['u_in_first']==0)] ### condition\nplot_uin_pre_hist(['05_10', '20_10'], df2)","e4735d4e":"plt.figure(figsize=(12, 4))\nplt.hist(df[df['R_C']==a]['diff_vib'], bins=100)\nplt.vlines([10], 0, 2000, \"red\", linestyles='dashed')\nplt.title('Main mode, R_C=50_10: histgram of diff_vib')\nplt.show()","6ad09132":"df=main_uout1\ndf2=df[(df['u_in_first']<1)&(df['diff_vib']<10)] ### condition\nplot_uin_pre_hist(['50_10'], df2)","68538763":"df=main_uout1\ndf2=df[(df['u_in_first']<1)&(df['diff_vib']>=10)] ### condition\nplot_uin_pre_hist(['50_10'], df2)","ec4d2a41":"df=main_uout1\ndf2=df[(df['u_in_first']>=1)] ### condition\nplot_uin_pre_hist(['50_10'], df2)","d8f4eed1":"df=main_uout1\ndf2=df[df['R_C']=='20_20']\nplot_double_pre_list(df2['breath_id'], max_plots=1000)","7d6219b1":"df=main_uout1\nymax=600\nxmax=60\nfor a in ['20_20']:\n    print(a)\n    plt.figure(figsize=(12,4))\n    plt.title(f'R_C: {a}')\n    plt.ylim(0,ymax)\n    plt.xlim(0,xmax)\n    plt.hist(df[df['R_C']==a]['pressure'], bins=100)\n    pattern[a] = [10, 15.5, 21, 26, 31, 36]\n    plt.vlines(pattern[a], 0, ymax, \"red\", linestyles='dashed')\n    plt.vlines(between(pattern[a]), 0, ymax, \"green\", linestyles='dashed', alpha=0.5)\n    plt.show()","83887ee7":"df=main_uout1\nplot_uin_pre_hist(['20_20'], df, double=False, pre=False)","40c5a1aa":"plt.figure(figsize=(12, 4))\nplt.hist(df[df['R_C']=='20_20']['diff_vib'], bins=100)\nplt.vlines([10], 0, 2000, \"red\", linestyles='dashed')\nplt.show()","96dfe1d6":"df=main_uout1\ndf2 = df[(df['diff_vib']>10)]\nplot_uin_pre_hist(['20_20'], df2)","1a91766f":"df=main_uout1\ndf2 = df[df['diff_vib']<=10]\nplot_uin_pre_hist(['20_20'], df2)","3e817055":"df=main_uout1\nfor a in ['05_20', '20_50']:\n    print(a)\n    df2=df[df['R_C']==a]\n    plot_double_pre_list(df2['breath_id'], max_plots=1000)","5687f08a":"df=main_uout1\nymax=600\nxmax=60\nfor a in ['05_20', '20_50']:\n    print(a)\n    plt.figure(figsize=(12,4))\n    plt.title(f'R_C: {a}')\n    plt.ylim(0,ymax)\n    plt.xlim(0,xmax)\n    plt.hist(df[df['R_C']==a]['pressure'], bins=100)\n    pattern[a] = [10, 15.5, 20.5, 25.5, 30, 34] \n    plt.vlines(pattern[a], 0, ymax, \"red\", linestyles='dashed')\n    plt.vlines(between(pattern[a]), 0, ymax, \"green\", linestyles='dashed', alpha=0.5)\n    plt.show()","1ca1eb2e":"df=main_uout1\nplot_uin_pre_hist(['05_20', '20_50'], df, double=False, pre=False)","a7213c9d":"df=main_uout1\ndf2 = df[(df['u_in_first']>30)]\nplot_uin_pre_hist(['05_20'], df2)","27946173":"df=main_uout1\ndf2 = df[(df['u_in_first']>0)&(df['u_in_first']<=30)]\nplot_uin_pre_hist(['05_20'], df2)","29db0df4":"df=main_uout1\ndf2 = df[(df['u_in_first']==0)]\nplot_uin_pre_hist(['05_20'], df2)","47917744":"df=main_uout1\nfor a in ['05_50']:\n    print(a)\n    df2=df[df['R_C']==a]\n    plot_double_pre_list(df2['breath_id'], max_plots=1000)","0d278cdd":"df=main_uout1\nymax=600\nxmax=60\nfor a in ['05_50']:\n    print(a)\n    plt.figure(figsize=(12,4))\n    plt.title(f'R_C: {a}')\n    plt.ylim(0,ymax)\n    plt.xlim(0,xmax)\n    plt.hist(df[df['R_C']==a]['pressure'], bins=100)\n    pattern[a] = [10, 15, 19, 23.5, 27, 31.5]\n    plt.vlines(pattern[a], 0, ymax, \"red\", linestyles='dashed')\n    plt.vlines(between(pattern[a]), 0, ymax, \"green\", linestyles='dashed', alpha=0.5)\n    plt.show()","633cfb52":"df=main_uout1\nplot_uin_pre_hist(['05_50'], df, double=False, pre=False)","47aea63d":"df=main_uout1\nfor a in ['50_20', '50_50']:\n    print(a)\n    df2=df[df['R_C']==a]\n    plot_double_pre_list(df2['breath_id'], max_plots=1000)","baae6ee2":"df=main_uout1\nymax=600\nxmax=60\nfor a in ['50_20', '50_50']:\n    plt.figure(figsize=(12,4))\n    plt.title(f'R_C: {a}')\n    plt.ylim(0,ymax)\n    plt.xlim(0,xmax)\n    plt.hist(df[df['R_C']==a]['pressure'], bins=100)\n    pattern[a]=[]\n    plt.vlines(pattern[a], 0, ymax, \"red\", linestyles='dashed')\n    plt.vlines(between(pattern[a]), 0, ymax, \"green\", linestyles='dashed', alpha=0.5)\n    plt.show()","0a35cfbc":"df=main_uout1\nplot_uin_pre_hist(['50_20', '50_50'], df, double=False, pre=False)","8f35f371":"plt.figure(figsize=(12, 4))\nplt.hist(df[df['R_C']=='50_20']['diff_vib'], bins=100)\nplt.vlines([25], 0, 2000, \"red\", linestyles='dashed')\nplt.title('50_20: histgram of diff_vib')\nplt.show()","38b633be":"plt.figure(figsize=(12, 4))\nplt.hist(df[df['R_C']=='50_50']['diff_vib'], bins=100)\nplt.vlines([25], 0, 2000, \"red\", linestyles='dashed')\nplt.title('50_50: histgram of diff_vib')\nplt.show()","61da4bd4":"df=main_uout1\ndf2 = df[(df['diff_vib']<25)]\nplot_uin_pre_hist(['50_20', '50_50'], df2)","19bcfdcb":"df=main_uout1\ndf2 = df[(df['diff_vib']>=25)]\nplot_uin_pre_hist(['50_20', '50_50'], df2)","d8f6fc7b":"### u_in_max >= 30","73da47b3":"### 05_20: u_in_first > 30","c160e834":"# The Main mode and others","1a2f47c6":"# Functions for plot","852a0b8e":"R_C: 20_20 seems to be a different mode.","55c926a9":"In \"other than main mode\", there are only R = 50 and C = 10.","340c7427":"## Classification by u_in_mean 05_20, 20_50","15cc4182":"## Classification by u_in_mean 20_20","a74b9310":"## Peak point of pressure at u_out=1","6a652d95":"# Add features","816aa1ee":"## Overview","64fea6db":"Let's take a look at the histogram of u_in_mean.","294ffec4":"## Peak point of pressure at u_out=1","d6d22df8":"## Overview","4a9f5544":"# R_C: 05_10, 20_10, 50_10","dd6c4cd8":"05_20 and 20_50 are in the form of peak in pressure histgram.","cac3b751":"### u_in_max < 30 & u_in_first > 0","f9ba54d3":"diff_vib indicates the number of vibrations.","2ae41ae7":"### diff_vib > 10","2c4c8d63":"50_20, 50_50 are very difficult cases.","3d4eaf83":"The peak distributions of the '05_10', '20_10' and '50_10' pressure histograms are similar.","52e8293c":"## Peak point of pressure at u_out=1","abf0494a":"diff_vib: It seems to be divided at 10.","f300021b":"From here on, we will look at each R_C separately. They have the perspectives of'Overview',' Peak point of pressure at u_out=1', and 'Classification by u_in_mean', respectively.","b6f1465e":"# R_C: 50_20, 50_50","1d34c0a9":"# EDA of the main mode","63874fee":"### dif_vib >= 25","6fc324db":"## Peak point of pressure at u_out=1","ebd1eb01":"By classifying by the value of u_in_first, it became easier to classify by u_in_mead. Still, u_in_first == 0 seems difficult.","2a15192b":"05_50 is considered alone.","449d0ed9":"## Overview","727a54fd":"In the \"pressure\" graph, you can see a faint layer.","ec3968cf":"bid_list = list(train['breath_id'].unique())","e6623081":"### u_in_max <30 & u_in_first == 0","97f65d02":"The pressure in uout1 is terrible, and there seems to be no classification.","f0013ad9":"The pattern is very different between The main mode and others.","d13c2e59":"05_50 seems to be able to be classified by u_in_mead as it is.","d3c8350e":"Groupby is slow, so I don't use it as much as possible.","446cd7fc":"## Peak point of pressure at u_out=1","ed4ea851":"Let's take a look at the histogram of u_in_mead.","a916ee06":"# R_C: 05_20, 20_50","dd19529c":"## Overview","fa591738":"### 05_20: u_in_first ==0","4f56782a":"## Classification by u_in_mean 50_10 ","da4dd47b":"### u_in_first >= 1","2cbd1cb2":"# R_C: 20_20","a66de41b":"**If you are interested in this notebook, please check [EDA about Pressure with Colored Charts](https:\/\/www.kaggle.com\/marutama\/eda-about-pressure-with-colored-charts) out as well.It will be the latest and most beautiful update.**\n\n**Note: I added the explanation of the latter half. Oct 15th**\n\nThis is Part 1 of the series notebook, Pressure main mode EDA. Part 2 is [here](https:\/\/www.kaggle.com\/marutama\/eda-about-pressure-part-2), dealing with other than main mode.\n\nIt's long, so I'll write an overview.\n- I decided the conditions from the chart shape of u_in and puressure with the feeling that I became AI. I hope it will be a hint for Feature engineering.\n- Feature addition has been sped up by avoiding groupby as much as possible.\n- Part 1 is specialized for main mode. After 1 second, the u_in graph has the same shape. It accounts for 92% of the total.\n- If you look at the u_in and pressure graphs in the main mode, you can see a faint layered pattern.\n- Classified by R_C to make the layered pattern clearer.\n- As a layered feature point of Pressure, the Pressure value when u_out becomes 1 is referred to. If you make a histogram, multiple peaks will appear neatly.\n- For a relatively simple pattern, it seems possible to predict the number of layers corresponding to the average value (mean) of u_in. Not all works, but ...\n- I also made the vibration(diff_vib) coefficient of u_in. Take the diff of u_in and count how many times the sign of the diff is inverted. It's quite convenient.\n\nContinue to [Part 2](https:\/\/www.kaggle.com\/marutama\/eda-about-pressure-part-2).\n\nIn [Part 2](https:\/\/www.kaggle.com\/marutama\/eda-about-pressure-part-2)., you can see that the mode is clearly divided depending on whether the end time of time_step is larger or smaller than 2.65. This is also interesting!\n\nI think there are many places where the explanation is insufficient. Please comment if you request.\n\n\nThis notebook is a continuation of:\n- [EDA about time_step and u_out](https:\/\/www.kaggle.com\/marutama\/eda-about-time-step-and-u-out).\n- [EDA about u_in](https:\/\/www.kaggle.com\/marutama\/eda-about-u-in)\n\nIf you find it useful, please upvote it as well.\u3002\n\nChart Plot referred to [Ventilator Pressure Prediction: EDA, FE and models](https:\/\/www.kaggle.com\/artgor\/ventilator-pressure-prediction-eda-fe-and-models). \n\nFor the R_C distribution part, I referred to [Ventilator Pressure simple EDA](https:\/\/www.kaggle.com\/currypurin\/ventilator-pressure-simple-eda).\n\n\n- [EDA about: LSTM Feature Importance](https:\/\/www.kaggle.com\/marutama\/eda-about-lstm-feature-importance)\nAnd [finetune of Tensorflow Bi-LSTM EDA about](https:\/\/www.kaggle.com\/marutama\/finetune-of-tensorflow-bi-lstm-eda-about) is for Modeling.\n\nThank you very much.\n\nThe importance of the features introduced in the \"EDA about\" series below:\n- [EDA about: LSTM Feature Importance](https:\/\/www.kaggle.com\/marutama\/eda-about-lstm-feature-importance)\n\nAnd [finetune of Tensorflow Bi-LSTM EDA about](https:\/\/www.kaggle.com\/marutama\/finetune-of-tensorflow-bi-lstm-eda-about) is for Modeling.\n\n\n","ec0c70f8":"### diff_vib < 25","c50f4bdd":"The peak distributions of the '05_10' and '20_10' u_in_mean histograms are similar. Then, in order to classify the modes more clearly, we divide them into the following three conditions.\n\n- u_in_max >= 30\n- u_in_max < 30 & u_in_first > 0\n- u_in_max < 30 & u_in_first == 0","da1fe599":"50_20 and 50_50 seem difficult.","7498e1ce":"# Distribution of diff_vib: \"u_in\" diff vibration (Number of sign inversions)\u00b6","431d8ac0":"### u_in_first < 1 & diff_vib < 10","187b2736":"Let's take a look at the histogram of u_in_mean.","0fb3725d":"Since it seems that you can classify with diff_vib, consider the following three conditions. Another u_in_first: I'm also paying attention to the first u_in.\n\n- u_in_first < 1 & diff_vib < 10\n- u_in_first < 1 & diff_vib >= 10\n- u_in_first >= 1","3370ca1e":"# R_C: 05_50","d4a71e1f":"### u_in_first < 1 & diff_vib >= 10","7685e109":"According to [notebook of mine](https:\/\/www.kaggle.com\/marutama\/eda-about-u-in), u_in has a main mode that accounts for 70018\/75450=92%. It is 0 for 1 to 1.5 seconds and ends near 5 (4.965-4.995).","c2e13f1e":"## Classification by u_in_mean 50_20, 50_50","467827e5":"It seems to be difficult at this rate. Let's take a look at diff_vib.","af3571d2":"### 05_20: u_in_first > 0 & u_in_first <= 30","499d0152":"## Overview","2ffda4e7":"### diff_vib <= 10","15d17cae":"## Classification by u_in_mean 05_50","6a41310c":"u_in_mean makes it easier to classify.","27d7f14a":"20_50 seems to be divided by u_in_mean as it is, but 05_20 seems to be a little difficult. Let's consider 05_20 under the following conditions.\n- u_in_first > 30\n- u_in_first > 0 & u_in_first <= 30\n- u_in_first ==0","4dfe82dc":"It seems that 2 to 3 modes are mixed. Let's disassemble it.","e6e6cf92":"It seems that peak has come out that seems to be divided by u_in_mean.","90a70a73":"It seems better to classify it a little more. It seems better to classify it a little more. Let's take a look at diff_vib.","a03d55b8":"# Load CSV","8893b1dc":"It seems that it will not be possible to classify as it is.","f1c67eb1":"There are several modes, but it seems that they can be roughly classified by u_in_mean.","a1aab55b":"Think of 50_10 in a different story. Now let's take a look at diff_vib.","c081295f":"It seems that diff_vib can be divided into 25 or less and above ...","98dc248d":"In particular, 20_20 is easier to classify with u_in_mead.","cd739a70":"## Overview","941d1174":"# Recreate each DataFrame when all the features are available","f087584b":"## Classification by u_in_mean 05_10, 20_10"}}