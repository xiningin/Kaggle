{"cell_type":{"ee74f089":"code","42b37d61":"code","4a451e63":"code","6c2651f7":"code","12ca8ed6":"code","7e106a69":"code","5be9f306":"code","4847706d":"code","5a4c1ed2":"code","6e80bb33":"code","87775091":"code","6bfb3b43":"code","23541625":"code","8d964323":"code","546a9b68":"code","2204da15":"markdown","42f158e7":"markdown","77c95bac":"markdown","8df73ef8":"markdown"},"source":{"ee74f089":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","42b37d61":"columns = [\"var\",\"skewness\",\"curtosis\",\"entropy\",\"classes\"]\ndf=pd.read_csv('\/kaggle\/input\/data_banknote_authentication.txt',index_col=False, names = columns)\ndf","4a451e63":"df.info()","6c2651f7":"f, ax = plt.subplots(1, 4, figsize=(10,3))\nvis1 = sns.distplot(df[\"var\"],bins=10, ax= ax[0])\nvis2 = sns.distplot(df[\"skewness\"],bins=10, ax=ax[1])\nvis3 = sns.distplot(df[\"curtosis\"],bins=10, ax= ax[2])\nvis4 = sns.distplot(df[\"entropy\"],bins=10, ax=ax[3])\nf.savefig('subplot.png')\nplt.show()","12ca8ed6":"sns.pairplot(df, hue=\"classes\") #hue farkl\u0131 renklerde c\u0131kmas\u0131 i\u00e7in \nplt.show()","7e106a69":"mean_vec = []\nfor i in df[\"classes\"].unique():\n    mean_vec.append( np.array((df[df[\"classes\"]==i].mean()[:4]) ))\nprint(mean_vec)","5be9f306":"SW = np.zeros((4,4))\nfor i in range(1,4): #2 is number of classes\n    per_class_sc_mat = np.zeros((4,4))\n    for j in range(df[df[\"classes\"]==i].shape[0]):\n        row, mv = df.loc[j][:4].values.reshape(4,1), mean_vec[i].reshape(4,1)\n        per_class_sc_mat += (row-mv).dot((row-mv).T)\n    SW += per_class_sc_mat\nprint('Sinif Ici Dagilim Matrisi:\\n', SW)\n\noverall_mean = np.array(df.drop(\"classes\", axis=1).mean())\nSB = np.zeros((4,4))\nfor i in range(2): #2 is number of classes\n    n = df[df[\"classes\"]==i].shape[0]\n    mv = mean_vec[i].reshape(4,1)\n    overall_mean = overall_mean.reshape(4,1) # make column vector\n    SB += n * (mv - overall_mean).dot((mv - overall_mean).T)\nprint('Siniflar Arasi Dagilim Matrisi:\\n', SB)\n\n\n","4847706d":"e_vals, e_vecs = np.linalg.eig(np.linalg.inv(SW).dot(SB))\nprint('Ozvektorleri \\n%s' %e_vecs)\nprint('\\nOzdegerleri \\n%s' %e_vals)","5a4c1ed2":"eig_vals, eig_vecs = np.linalg.eig(np.linalg.inv(SW).dot(SB))\n\nfor i in range(len(eig_vals)):\n    eigvec_sc = eig_vecs[:,i].reshape(4,1)   \n    print('\\nOzvektor {}: \\n{}'.format(i+1, eigvec_sc.real))\n    print('Ozdeger {:}: {:.2e}'.format(i+1, eig_vals[i].real))","6e80bb33":"for i in range(len(eig_vals)):\n    eigv = eig_vecs[:,i].reshape(4,1)\n    np.testing.assert_array_almost_equal(np.linalg.inv(SW).dot(SB).dot(eigv),\n                                         eig_vals[i] * eigv,\n                                         decimal=6, err_msg='', verbose=True)\nprint('OK')","87775091":"# \u00d6zde\u011fer ve \u00d6zvekt\u00f6rleri listeleyin\neig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:,i]) for i in range(len(eig_vals))]\n\n# \u00d6zde\u011fer ve \u00d6zvekt\u00f6rleri k\u00fc\u00e7\u00fckten b\u00fcy\u00fc\u011fe do\u011fru s\u0131ralama\neig_pairs = sorted(eig_pairs, key=lambda k: k[0], reverse=True)\n\n# \u00d6zde\u011ferleri azaltarak listenin do\u011fru s\u0131raland\u0131\u011f\u0131n\u0131 g\u00f6rsel olarak onaylay\u0131n.\n\nprint('Azalan Duzende Ozdegerler :\\n')\nfor i in eig_pairs:\n    print(i[0])","6bfb3b43":"#\u015eimdi, \u201ca\u00e7\u0131klanan varyans\u0131\u201d y\u00fczde olarak ifade edelim\n\nprint('Aciklanan Varyans:\\n')\neigv_sum = sum(eig_vals)\nfor i,j in enumerate(eig_pairs):\n    print('Ozdeger {0:}: {1:.2%}'.format(i+1, (j[0]\/eigv_sum).real))","23541625":"#En b\u00fcy\u00fck \u00f6zde\u011ferlere sahip k \u00f6zvekt\u00f6r\u00fcn\u00fc se\u00e7elim\n\nW = np.hstack((eig_pairs[0][1].reshape(4,1), eig_pairs[1][1].reshape(4,1)))\nprint('Matris W:\\n', W.real)","8d964323":"X=df.iloc[:,1:].copy()\nX_lda = X.dot(W)\nX_lda\n","546a9b68":"def plot_step_lda():\n\n  #???  \n\nplot_step_lda()","2204da15":"\u015eimdi, her iki s\u0131n\u0131f i\u00e7in 4 boyutlu ortalama vekt\u00f6rleri hesaplayaca\u011f\u0131z (4 = \u00f6zellik say\u0131s\u0131). ","42f158e7":"\u00d6zvekt\u00f6r \u00f6zde\u011fer hesaplamas\u0131n\u0131 kontrol etmek","77c95bac":"\u0130lk \u00f6zde\u011fer, bug\u00fcne kadar en bilgilendirici olan\u0131d\u0131r ve bu \u00f6zde\u011ferleri temel alarak aral\u0131kl\u0131 bir 1B \u00f6zelli\u011fi olu\u015fturacak olursak, \u00e7ok fazla bilgi kaybetmeyiz.","8df73ef8":"Bir sonraki ad\u0131m, s\u0131n\u0131f i\u00e7i da\u011f\u0131l\u0131m matrislerini ve s\u0131n\u0131f i\u00e7i da\u011f\u0131l\u0131m matrislerini hesaplamakt\u0131r."}}