{"cell_type":{"081eca7d":"code","e073a57d":"code","d12ac669":"code","68f33ccc":"code","9d098ff0":"code","21b60889":"code","4c0ea3cb":"code","5386ed4d":"code","28862b0d":"code","88385399":"code","0454609c":"code","1bd316d0":"code","ce2137ff":"markdown","0d120599":"markdown","fb0f73ec":"markdown","5d2d75c1":"markdown","0a063375":"markdown","5020f9c0":"markdown","cb8442f3":"markdown","64f36bdc":"markdown","ba117278":"markdown"},"source":{"081eca7d":"!pip install scikit-learn-intelex -q --progress-bar off","e073a57d":"import time\nimport pandas as pd","d12ac669":"train = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/test.csv')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/sample_submission.csv')\n\ny_train = train['target']\nx_train = train.drop(['id','target'], axis=1)\nx_test = test.drop(['id'], axis=1)    \n\nfrom sklearn.model_selection import train_test_split\nx_train_sub, x_val, y_train_sub, y_val = train_test_split(x_train, y_train, test_size=0.2, random_state=42)\nprint(x_train_sub.shape, x_val.shape)","68f33ccc":"def stack_model(params, x_train, y_train, x_test):\n    from sklearn.preprocessing import QuantileTransformer\n    from sklearn.linear_model import LogisticRegression\n    from sklearn.ensemble import BaggingClassifier\n    from sklearn.ensemble import StackingClassifier\n    from sklearn.pipeline import make_pipeline\n    from sklearn.neighbors import KNeighborsClassifier\n    n_first_bag_est = 6\n    n_second_bag_est = 4\n    params_quantile = {\n        'n_quantiles': params['n_quantiles_first'],\n        'random_state': 46,\n    }\n    params_quantile_second = {\n        'n_quantiles': params['n_quantiles_second'],\n        'random_state': 33,\n    }\n    params_quantile_final = {\n        'n_quantiles': params['n_quantiles_final'],\n        'random_state': 35,\n    }\n    params_logreg = {\n        'C': params['C_lr']\n    }\n    params_logreg_second = {\n        'C': params['C_lr2']\n    }\n    params_knn = {\n        'n_neighbors': params['n_neighbors_knn'],\n        'metric': params['metric_knn']\n    }\n    estimators = [\n         ('lr', BaggingClassifier(base_estimator=make_pipeline(QuantileTransformer(**params_quantile), \n                                                               LogisticRegression(**params_logreg)),\n                                  n_estimators=n_first_bag_est, random_state=0)),\n         ('lr2', BaggingClassifier(base_estimator=make_pipeline(QuantileTransformer(**params_quantile_second), \n                                                               LogisticRegression(**params_logreg_second)),\n                                  n_estimators=n_second_bag_est, random_state=0)),\n    ]\n    clf = StackingClassifier(\n       estimators=estimators, final_estimator=make_pipeline(QuantileTransformer(**params_quantile_final), \n                                                            KNeighborsClassifier(**params_knn)), stack_method='predict_proba'\n    )\n    clf.fit(x_train, y_train)\n    y_pred = clf.predict_proba(x_test)\n    return y_pred\n","9d098ff0":"parameters = {\n    'n_quantiles_first': 5, \n    'n_quantiles_second': 4, \n    'n_quantiles_final': 3, \n    'C_lr': 0.00024812627870458766, \n    'C_lr2': 0.0008462404365990055, \n    'n_neighbors_knn': 2500, \n    'metric_knn': 'euclidean'\n}","21b60889":"from sklearnex import patch_sklearn\npatch_sklearn()","4c0ea3cb":"from sklearn.metrics import log_loss\nt0 = time.time()\ny_pred = stack_model(parameters, x_train_sub, y_train_sub, x_val)\nt1 = time.time()","5386ed4d":"print(f\"Time for Intel(R) Extension for Scikit-learn: {t1 - t0} sec\")\nprint(f\"Metric value: {log_loss(y_val, y_pred)}\")","28862b0d":"from sklearnex import unpatch_sklearn\nunpatch_sklearn()","88385399":"from sklearn.metrics import log_loss\nt0 = time.time()\ny_pred = stack_model(parameters, x_train_sub, y_train_sub, x_val)\nt1 = time.time()","0454609c":"print(f\"Time for original Scikit-learn: {t1 - t0} sec\")\nprint(f\"Metric value: {log_loss(y_val, y_pred)}\")","1bd316d0":"patch_sklearn()\ny_pred = stack_model(parameters, x_train, y_train, x_test)\nsample_submission[['Class_1','Class_2', 'Class_3', 'Class_4','Class_5','Class_6', 'Class_7', 'Class_8', 'Class_9']] = y_pred\nsample_submission.to_csv('stack_model.csv', index=False)","ce2137ff":"# \ud83d\ude82 Fit model with original Scikit-learn","0d120599":"# \ud83d\udcdc Conclusions\n\nWith Intel(R) Extension for Scikit-learn patching you can:\n\n- Use your scikit-learn code for training and inference without modification;\n- Train and predict scikit-learn models and get more time for experiments;\n- Get the same quality of predictions.\n\n*Please, upvote if you like.*","fb0f73ec":"<br>\n<h1 style = \"font-size:25px; font-family:cursive ; font-weight : bold; color : #020296; text-align: center; border-radius: 10px 15px;\"> \ud83d\ude80 Fast ML stack with Intel(R) Extension for Scikit-learn  <\/h1>\n<br>\n\nFor classical machine learning algorithms, we often use the most popular Python library, Scikit-learn. We use it to fit models and search for optimal parameters, but\u202fscikit-learn\u202fsometimes works for hours, if not days. Speeding up this process is something anyone who uses Scikit-learn would be interested in.\n\nI want to show you how to get results faster without changing the code. To do this, we will use another Python library,\u202f**[Intel(R) Extension for Scikit-learn](https:\/\/github.com\/intel\/scikit-learn-intelex)**. It accelerates Scikit-learn and does not require you changing the code written for scikit-learn.\n\nI will show you how to speed up your kernel from **18 minutes** to **5 minutes** without changes of code!\n","5d2d75c1":"# \ud83e\udd16 Creating ML model\n\nFunction presents model that is a stack includes two baggings of LogisticRegression and kNearestClassifier from Scikit-learn.","0a063375":"# \ud83d\ude9d Fit model with Intel(R) Extension for Scikit-learn","5020f9c0":"# \ud83d\udccb Reading data and splitting on training and validation datasets","cb8442f3":"# \ud83e\udd47Prepare submission","64f36bdc":"# \ud83d\udd28 Installing Intel(R) Extension for Scikit-learn\n\nLet's try to use Intel(R) Extension for Scikit-learn. First, download it. Package also avaialble in conda - please refer to details https:\/\/github.com\/intel\/scikit-learn-intelex","ba117278":"# \u2699\ufe0f Best parameters\nThis set of parameters was found by the search on the grid of parameters."}}