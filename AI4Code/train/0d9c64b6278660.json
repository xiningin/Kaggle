{"cell_type":{"d5467c5d":"code","0dc5747f":"code","d6e94897":"code","8a84cc25":"code","2a04bde8":"code","6d47cb59":"code","7e11672e":"code","daf00e2a":"code","cfbd50b4":"code","61237522":"code","4c9e1327":"code","11620a65":"code","8017bf99":"code","56210087":"code","9e2afbcf":"code","fb2da03d":"code","87ae8e69":"code","f8afbb07":"code","870253f8":"code","2ca2f80e":"code","8b9d2328":"code","538e067b":"code","22012a0a":"code","5dcd4805":"code","ee3cf125":"code","721e032b":"code","8588293f":"code","b3548e81":"code","d40ef2e1":"code","a89eb595":"code","4973b828":"code","7414f5b8":"code","17a753bb":"code","3609556f":"code","07d99db4":"code","b7f8cde0":"code","d75d6484":"code","722b71dc":"markdown","869a8a0a":"markdown","1597f2eb":"markdown","c3aea1e2":"markdown","eac37e41":"markdown","8927207a":"markdown","dde50b20":"markdown","1a2cbe76":"markdown","724aec3e":"markdown","aa420550":"markdown","38a4d415":"markdown","8ae0231e":"markdown","a545a543":"markdown","7d065875":"markdown","eaff9b2e":"markdown","5d39ff46":"markdown","2090eb9d":"markdown","344dfb33":"markdown","e8f6fc69":"markdown","c891e359":"markdown","3d282b73":"markdown","38c3a601":"markdown","52034de3":"markdown","11ce68e5":"markdown","d5d70ef3":"markdown","0d6ab10e":"markdown","04f9a370":"markdown","0417b2b1":"markdown","f8f87493":"markdown","0016d603":"markdown","ac53004c":"markdown","b9e9d330":"markdown","483e1de7":"markdown","aaca1295":"markdown","333ad006":"markdown","a47fc88f":"markdown"},"source":{"d5467c5d":"x = 1\nx+x+1","0dc5747f":"from sympy import Symbol\nx = Symbol('x')","d6e94897":"x + x + 1","8a84cc25":"a = Symbol('x')\na + a + 1","2a04bde8":"a = Symbol('x')\na.name","6d47cb59":"x = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')","7e11672e":"from sympy import symbols\nx,y,z = symbols('x,y,z')","daf00e2a":"z = x*y + x*y\nz","cfbd50b4":"z = x*(x + x)\nz","61237522":"z = (x + 2)*(x + 3)\nz","4c9e1327":"from sympy import expand\nexpand(z)","11620a65":"from sympy import Symbol\nx = Symbol('x')\ny = Symbol('y')","8017bf99":"from sympy import factor\nexpr = x**2 - y**2\nfactor(expr)","56210087":"from sympy import expand\nfactors = factor(expr)\nexpand(factors)","9e2afbcf":"expr = x**3 + 3*x**2*y + 3*x*y**2 + y**3\nfactors = factor(expr)\nfactors","fb2da03d":"from sympy import pprint\nexpr = x*x + 2*x*y + y*y\nexpr","87ae8e69":"expr = 1 + 2*x + 2*x**2\npprint(expr)","f8afbb07":"from sympy import init_printing\ninit_printing(order='rev-lex')\npprint(expr)","870253f8":"from sympy import Symbol, pprint, init_printing\n\n# Initialize printing system with reverse order\ninit_printing(order='rev-lex')\n\nn = 6\nx = Symbol('x')\nseries = x\nfor i in range(2, n+1):\n    series = series + (x**i)\/i\n\npprint(series)","2ca2f80e":"x = Symbol('x')\ny = Symbol('y')\nexpr = x*x + x*y + x*y + y*y\nexpr","8b9d2328":"res = expr.subs({x:1, y:2})\nres","538e067b":"expr.subs({x:1-y})","22012a0a":"expr_subs = expr.subs({x:1-y})\nfrom sympy import simplify\nsimplify(expr_subs)","5dcd4805":"from sympy import sympify\n\n# Enter this expression in checkbox : x**2 + 3*x + x**3 + 2*x\nexpr = input('Enter a mathematical expression: ')","ee3cf125":"expr = sympify(expr)\nexpr","721e032b":"from sympy import Symbol, solve\nx = Symbol('x')\nexpr = x - 5 - 7\nsolve(expr)","8588293f":"from sympy import solve\nx = Symbol('x')\nexpr = x**2 + 5*x + 4\nsolve(expr, dict=True)","b3548e81":"x=Symbol('x')\nexpr = x**2 + x + 1\nsolve(expr, dict=True)","d40ef2e1":"x = Symbol('x')\na = Symbol('a')\nb = Symbol('b')\nc = Symbol('c')\n\nexpr = a*x*x + b*x + c\nsolve(expr, x, dict=True)","a89eb595":"x = Symbol('x')\ny = Symbol('y')\nexpr1 = 2*x + 3*y - 6\nexpr2 = 3*x + 2*y - 12\n\nsolve((expr1, expr2), dict=True)","4973b828":"from sympy.plotting import plot\nfrom sympy import Symbol\nx = Symbol('x')\nplot(2*x+3)","7414f5b8":"plot((2*x + 3), (x, -5, 5))","17a753bb":"plot(2*x + 3, (x, -5, 5), title='A Line', xlabel='x', ylabel='2x+3')","3609556f":"p = plot(2*x + 3, (x, -5, 5), title='A Line', xlabel='x', ylabel='2x+3', show=False)","07d99db4":"p.save('line.png')","b7f8cde0":"from sympy.plotting import plot\nfrom sympy import Symbol\n\nx = Symbol('x')\nplot(2*x+3, 3*x+1)","d75d6484":"from sympy.plotting import plot\nfrom sympy import Symbol\nx = Symbol('x')\n\np = plot(2*x+3, 3*x+1, legend=True, show=False)\np[0].line_color = 'b'\np[1].line_color = 'r'\n\np.show()","722b71dc":"The terms are arranged in the order of powers of $x$, from highest to lowest. If you want the expression in the opposite order, with the highest power of $x$ last, you can make that happen with the *init_printing()* function, as follows:","869a8a0a":"You can also change the order of the terms when you print an expression. Consider the expression $1 + 2x + 2x^2$:","1597f2eb":"You may have expected *SymPy* to multiply everything out. Instead, the expression was printed exactly how we entered it. *SymPy* automatically **simplifies** only the **most basic of expressions** and leaves it to the programmer to explicitly require simplification in cases such as the preceding one.","c3aea1e2":"As expected, we get the factored version of the expression. Now let\u2019s expand the factors to get back the original expanded version:","eac37e41":"## Converting Strings to Mathematical Expressions\n\nSo far, we\u2019ve been writing out individual expressions each time we want to do something with them. However, what if you wanted to write a more general program that could manipulate any expression provided by the user? For that, we need a way to convert a user\u2019s input, which is a string, into something we can perform mathematical operations on. SymPy\u2019s sympify() function helps us do exactly that. The function is so called because it converts the string into a SymPy object that makes it possible to apply SymPy\u2019sfunctions to the input. Let\u2019s see an example:","8927207a":"## Solving a System of Linear Equations\n\nConsider the following two equations:\n\n$$\n\\left\\{\\begin{matrix}\n2x + 3y = 6\\\\ \n3x + 2y = 12\n\\end{matrix}\\right.\n$$\n\nSay we want to find the pair of values $(x, y)$ that satisfies both the equations. We can use the *solve()* function to find the solution for a system of equations like this one. First, we define the two symbols and create the two equations:","dde50b20":"In the statement $x = Symbol('x')$, the $x$ on the left side is the Python label. So, it\u2019s perfectly fine to write the preceding statements as follows:","1a2cbe76":"Let\u2019s see whether we can find the product of $x(x + x)$:","724aec3e":"You can also express one symbol in terms of another and substitute accordingly, using the *subs()* method. For example, if you knew that $x = 1 \u2212 y$, here\u2019s how you could evaluate the preceding expression:","aa420550":"If you want the result to be simplified further\u2014for example, if there are terms that cancel each other out, we can use SymPy\u2019s *simplify()* function, as follows:","38a4d415":"## Plotting Using SymPy\n\nWith SymPy, on the other hand, you can just tell SymPy the equation of the line you want to plot, and the graph will be created for you. Let\u2019s plot a line whose equation is given by $y = 2x + 3$:\n\n","8ae0231e":"Let\u2019s see what happens when we enter the expression $(x + 2)*(x + 3)$:","a545a543":"## Solving Equations\n\nSymPy\u2019s *solve()* function can be used to find solutions to equations. When you input an expression with a symbol representing a variable, such as $x$, *solve()* calculates the value of that symbol. This function always makes its calculation by assuming the expression you enter is equal to zero\u2014that is, it prints the value that, when substituted for the symbol, makes the entire expression equal zero. Let\u2019s start with the simple equation $x \u2212 5 = 7$. If we want to use solve() to find the value of $x$, we first have to make one side of the equation equal zero $(x \u2212 5 \u2212 7 = 0)$. Then, we\u2019re ready to use *solve()*, as follows:","7d065875":"## Plotting Multiple Functions\n\nYou can enter multiple expressions when calling the SymPy plot function to plot more than one expression on the same graph. For example, the following code plots two lines at once","eaff9b2e":"* First, we import the *Symbol class* from the *sympy library*. \n* Then, we **create an object** of this class passing $'x'$ as a parameter. \n* Note that this $'x'$ is written as a string within quotes. \n\nWe can now define expressions and equations in terms of this symbol. For example, here\u2019s the earlier expression:","5d39ff46":"The show keyword argument allows us to specify whether we want the graph to be displayed. Passing *show=False* will cause the graph to not be displayed when you call the *plot(* function:","2090eb9d":"## Substituting in Values\n\nLet\u2019s see how we can use *SymPy* to plug values into an algebraic expression. This will let us calculate the value of the expression for certain values of the variables. Consider the mathematical expression $x^2 + 2xy + y^2$, which can be defined as follows:","344dfb33":"Let\u2019s attempt another example:","e8f6fc69":"Next, we import the *factor()* function and use it to convert the expanded version (on the left side of the identity) to the factored version (on the right side):","c891e359":"You can use other keyword arguments in the *plot()* function, such as title to enter a title or *xlabel* and *ylabel* to label the *x-axis* and the *y-axis*, respectively. The following *plot()* function specifies the preceding three keyword arguments","3d282b73":"## Factorizing and Expanding Expressions\n\nThe *factor()* function decomposes an expression into its factors, and the *expand()* function expands an expression, expressing it as a sum of individual terms. Let\u2019s test out these functions with the basic algebraic identity $x^2 \u2212 y^2 = (x + y)(x \u2212 y)$. The left side of the identity is the **expanded version**, and the right side depicts the corresponding **factorization**. Because we have two symbols in the identity, we\u2019ll create two Symbol objects:","38c3a601":"If you want to evaluate this expression, you can substitute numbers in for the symbols using the *subs()* method:","52034de3":"You will see that no graph is shown. The label $p$ refers to the plot that is created, so you can now call *p.show()* to display the graph. You can also save the graph as an image file using the *save()* method, as follows:","11ce68e5":"## Printing a Series\n\nConsider the following series:\n\n$$ x+\\frac{x^{2}}{2}+\\frac{x^{3}}{3}+\\frac{x^{4}}{4}+...+\\frac{x^{n}}{n} $$\n\nLet\u2019s write a program that will ask a user to input a number, n, and print this series for that number. In the series, x is a symbol and $n$ is an integer input by the program\u2019s user. The $n$th term in this series is given by:\n\n$$ \\frac{x^{n}}{n} $$\n\nWe can print this series using the following program:","d5d70ef3":"Once you\u2019ve defined symbols, you can carry out basic mathematical operations on them. For example, you might do the following:","0d6ab10e":"## Defining Symbols and Symbolic Operations\n\n*Symbols* form the building blocks of *symbolic math*. The term symbol is just a general name for the $xs$, $ys$, $as$, and $bs$ you use in equations and algebraic expressions. Creating and using symbols will let us do things differently than before. Consider the following statements:","04f9a370":"## Solving Quadratic Equations\n\nLet\u2019s see an example:","0417b2b1":"But a shorter method would be to use the $symbols()$ function to define all three at once:","f8f87493":"*SymPy* uses matplotlib behind the scenes to draw the graphs. Also note that we didn\u2019t have to call the *show()* function to show the graphs because this is done automatically by *SymPy*.\n\nNow, let\u2019s say that you wanted to limit the values of $'x'$ in the preceding graph to lie in the range $\u22125$ to $5$ (instead of $\u221210$ to $10$). You\u2019d do that as follows:","0016d603":"We store the factorized expression in a new label, **factors**, and then call the *expand()* function with it. When we do this, we receive the original expression we started with. Let\u2019s try it with the more complicated identity $x^3 + 3x^2y + 3xy^2 + y3 = (x + y)^3$:","ac53004c":"## Pretty Printing\n\nIf you want the expressions we\u2019ve been working with to look a bit nicer when you print them, you can use the *pprint()* function. This function will print the expression in a way that more closely resembles how we\u2019d normally write it on paper. For example, here\u2019s an expression:","b9e9d330":"Here we create a label, $x$, to refer to the number 1. Then, when we write the statement $x + x + 1$, it\u2019s evaluated for us, and the result is 3. \n\n* What if you wanted the result in terms of the symbol $x$? That is, if instead of 3, you wanted Python to tell you that the result is $2x + 1$? \n\nYou couldn\u2019t just write $x + x + 1$ without the statement $x = 1$ because Python wouldn\u2019t know what $x$ refers to. \n\n**SymPy** lets us write programs where we can express and evaluate mathematical expressions in terms of such symbols. To use a symbol in your program, you have to create an object of the Symbol class, like this:","483e1de7":"Let\u2019s take a look at finding the roots for the generic quadratic equation $ax^2 + bx + c = 0$.","aaca1295":"To set different colors for each line with SymPy, we\u2019ll need to perform some extra steps, as shown in the following code, which also adds a legend to the graph:","333ad006":"Using a non-matching label can be confusing, however, so I would recommend **choosing a label that\u2019s the same letter as the symbol** it refers to.\n\nFor any Symbol object, its name attribute is a string that is the actual symbol it represents:","a47fc88f":"To define multiple symbols, you can either create separate Symbol objects or use the $symbols()$ function to define them more concisely. Let\u2019s say you wanted to use three symbols\u2014$x$, $y$, and $z$\u2014in your program. You could define them individually, as we did earlier:"}}