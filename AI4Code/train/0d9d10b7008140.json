{"cell_type":{"d616df8b":"code","b08eec64":"code","7d74067a":"code","2f663ccf":"code","ef52c520":"code","69f638e7":"code","77da7acf":"code","7aff2cd5":"code","10068906":"code","8e5df9d7":"code","63ab2bc6":"code","dbf7d31a":"code","7b5d2e08":"code","598c56f0":"code","9c3c0020":"code","f71a3ef2":"code","9535dc94":"code","796477b1":"code","479df4bd":"code","55d9212e":"code","d5dbb16f":"code","ae7317c0":"code","d47983b3":"code","fcff7e43":"code","f247da02":"code","ad375747":"code","f97709f1":"code","9fad3934":"code","49f0dded":"code","14bf8a92":"code","ab7a8587":"code","8fb2a150":"markdown","1ccc5cc4":"markdown","271b2803":"markdown","90dd57df":"markdown","e0d515fb":"markdown","2bf87772":"markdown","65b63576":"markdown","1f68eff8":"markdown","4e32e37c":"markdown","9013ad44":"markdown","53e55c89":"markdown","83c2a13a":"markdown","a1a35278":"markdown","2e0fa4b7":"markdown","d4c3a57f":"markdown","6a10c636":"markdown","bbe8363c":"markdown","93c4a54e":"markdown"},"source":{"d616df8b":"import numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pylab as pl\n\nimport os\nprint(os.listdir(\"..\/input\"))","b08eec64":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","7d74067a":"train.head()","2f663ccf":"train.info()","ef52c520":"test_id = test['id'] # save for submission\ndel train['id']\ndel test['id']","69f638e7":"train['type'].unique(), train['color'].unique()","77da7acf":"sns.violinplot(x='bone_length', y='type', data=train)","7aff2cd5":"sns.boxplot(x='hair_length', y='type', data=train)","10068906":"sns.pairplot(train)","8e5df9d7":"from category_encoders import OneHotEncoder\n\nencoder = OneHotEncoder(cols=['color'], use_cat_names=True)\n\ntrain = encoder.fit_transform(train)\ntest = encoder.fit_transform(test)","63ab2bc6":"train.head()","dbf7d31a":"from sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder()\n\nencoder.fit(train['type'])\n\nprint(encoder.classes_)\n\ntrain['type_no'] = encoder.transform(train['type'])","7b5d2e08":"train.head()","598c56f0":"sns.heatmap(train.corr(), xticklabels=list(train), yticklabels=list(train))","9c3c0020":"target = train['type_no'] # for visualizations\ntarget_string = train['type'] # for final predictions\n\ndel train['type']\ndel train['type_no']\n\ntarget.head()","f71a3ef2":"from sklearn.model_selection import train_test_split\n\ntrain_data, test_data, train_target, test_target = train_test_split(train, target, test_size=0.2, random_state=42)","9535dc94":"from mlxtend.plotting import plot_decision_regions\nimport matplotlib.gridspec as gridspec\nimport itertools\n\ndef decisions(classifier, features):\n    classifier.fit(train_data[features], train_target)\n    ax = plot_decision_regions(test_data[features].values, test_target.values, clf=classifier, legend=2)\n    handles, labels = ax.get_legend_handles_labels()\n    ax.legend(handles, ['Ghost', 'Ghoul', 'Goblin'], framealpha=0.3, scatterpoints=1)\n    plt.xlabel(features[0])\n    plt.ylabel(features[1])\n    plt.show()\n    \ndef grid_decisions(classifiers, classifier_names, features):\n    gs = gridspec.GridSpec(2, 2)\n    fig = plt.figure(figsize=(10,8))\n\n    for clf, lab, grd in zip(classifiers,classifier_names, itertools.product([0, 1], repeat=2)):\n        clf.fit(train_data[features], train_target)\n        ax = plt.subplot(gs[grd[0], grd[1]])\n        fig = plot_decision_regions(test_data[features].values, test_target.values, clf=clf, legend=2)\n        handles, labels = fig.get_legend_handles_labels()\n        fig.legend(handles, ['Ghost', 'Ghoul', 'Goblin'], framealpha=0.3, scatterpoints=1)\n        plt.title(lab)\n\n    plt.show()","796477b1":"from sklearn.tree import DecisionTreeClassifier\n\ndecisions(DecisionTreeClassifier(), ['hair_length', 'bone_length'])","479df4bd":"from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n\nclfs = [RandomForestClassifier(), AdaBoostClassifier(), SVC(), KNeighborsClassifier()]\nlabels = ['Random Forest', 'Ada Boost', 'Support Vector', 'K-Neighbors']\n\ngrid_decisions(clfs, labels, ['hair_length', 'bone_length'])","55d9212e":"from IPython.display import Image\nfrom IPython.core.display import HTML \nImage(url= 'https:\/\/cdn-images-1.medium.com\/max\/1600\/1*JZbxrdzabrT33Yl-LrmShw.png', width=750, height=750)","d5dbb16f":"train.head()","ae7317c0":"from sklearn.metrics import accuracy_score\n\nclfs = [RandomForestClassifier(), AdaBoostClassifier(), SVC(), KNeighborsClassifier()]\nlabels = ['Random Forest', 'Ada Boost', 'Support Vector', 'K-Neighbors']\n\nfor model, name in zip(clfs, labels):\n    model.fit(train_data, train_target)\n    predictions = model.predict(test_data)\n    print('{} accuracy is: {}'.format(name, accuracy_score(test_target, predictions)))","d47983b3":"from IPython.display import Image\nfrom IPython.core.display import HTML \nImage(url= 'https:\/\/scikit-learn.org\/stable\/_images\/grid_search_cross_validation.png', width=500, height=500)","fcff7e43":"from sklearn.model_selection import GridSearchCV\n\nparams = {\n    'C': [0.001, 0.01, 0.1, 1, 10],\n    'gamma': [0.001, 0.01, 0.1, 1]\n}\n\ngrid_search = GridSearchCV(SVC(), params, cv=5)\n\ngrid_search.fit(train, target)\n\ngrid_search.best_params_","f247da02":"import eli5\nfrom eli5.sklearn import PermutationImportance\n\nimportance_model = SVC(C=10, gamma=0.1, probability=True)\nimportance_model.fit(train, target)\n\nperm = PermutationImportance(importance_model, random_state=42).fit(test_data, test_target)\neli5.show_weights(perm, feature_names=test_data.columns.tolist())","ad375747":"import shap\n\ndata_for_prediction = test_data.iloc[0]\n\nk_explainer = shap.KernelExplainer(importance_model.predict_proba, train_data)\nk_shap_values = k_explainer.shap_values(data_for_prediction)\n\nshap.initjs()\nshap.force_plot(k_explainer.expected_value[1], k_shap_values[1], data_for_prediction)","f97709f1":"test_target.iloc[0], target_string.iloc[0]","9fad3934":"model = SVC(C=10, gamma=0.1)\nmodel.fit(train, target_string)","49f0dded":"predictions = model.predict(test)\npredictions[:10]","14bf8a92":"submission = pd.DataFrame({'id': test_id, 'type': predictions})\nsubmission.head()","ab7a8587":"submission.to_csv('submission.csv', index=False)","8fb2a150":"> ### One-Hot encode color","1ccc5cc4":"> ### A look at what's important for our model","271b2803":"> ### Evaluate initial accuracy of chosen models","90dd57df":"> ### Load data","e0d515fb":"> ### Make final predictions, aggregate predicted types with ids and export as CSV","2bf87772":"The *heat map* also suggests that **having more** *soul* correlates with **higher** *hair* and *bone* lengths.","65b63576":"> ### Tweaking hyperparameters with Cross-Validation","1f68eff8":">","4e32e37c":"> ### Label Encode target type","9013ad44":"One can notice that creatures that have **more soul** also tend to have **longer bones** and **longer hair** *:D*","53e55c89":"**Ghouls** also have the longest hair from the three classes","83c2a13a":"> ### Fitting final model on all of the training data","a1a35278":"> ### Data preparation for training and predictions","2e0fa4b7":"We can see that **Ghouls** have the longest bones, while **Goblins** and **Ghosts** have shorter ones.","d4c3a57f":"> ### Visualizing decision boundaries","6a10c636":"> ### Check unique possible classes","bbe8363c":"> ### Some data analysis","93c4a54e":"While rerunning above cell multiple times the **SVC** seems to be the most performant, with **Ada Boost** coming in second most of the time."}}