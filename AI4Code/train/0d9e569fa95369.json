{"cell_type":{"b33567c6":"code","4eddfca6":"code","4e16f2c2":"code","101a5081":"code","8d9c59fc":"code","9f57010d":"code","9d7440d3":"code","d44f0a32":"markdown","477eb69d":"markdown","99562840":"markdown","46d1b2fb":"markdown"},"source":{"b33567c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.linear_model import LinearRegression\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4eddfca6":"train = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv', index_col = 'Id')\ntest = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv', index_col = 'Id')\n\ny_train = train.SalePrice\n#y_test not included since it will be created by us.\ntrain.tail(5)","4e16f2c2":"def show_percentage_values_missing(dataFrame):\n    missing_values = pd.concat([\n        dataFrame.isnull().sum().sort_values(ascending = False), #Column 1\n        dataFrame.isnull().sum().sort_values(ascending = False).apply(lambda x: (x \/ dataFrame.shape[0]) * 100)], #Column 2\n        axis = 1, #Increasing by column\n        keys = ['Values missing', 'Percent of missing'])\n    return (missing_values[missing_values['Percent of missing']>0])\n","101a5081":"def impute_cat_data_with_none(dataframe):\n    df_miss = show_percentage_values_missing(dataframe)\n    for i in df_miss.index:\n        if(dataframe[i].dtype =='object'):\n            dataframe[i] = dataframe[i].fillna('None')\n    return dataframe\n\nimpute_cat_data_with_none(test)\nimpute_cat_data_with_none(train)","8d9c59fc":"def missing_val_regression(df,feature):\n    df_copy = df.copy()\n    df_true = df_copy.dropna() #DF with non_nans\n    \n    #Define Null Colls and Categorical\/Obj Colls\n    null_columns = df.columns[df.isna().any()]\n    obj_columns = df.select_dtypes(include='object').columns\n    parameters = list(set(df.columns) - set(null_columns)- set(obj_columns))\n\n\n    model = LinearRegression()\n    model.fit(X = df_true[parameters],y = df_true[feature])\n\n    df_copy.loc[df_copy[feature].isnull(), feature] = model.predict(df_copy[parameters])[df_copy[feature].isnull()]\n    return df_copy","9f57010d":"for missing_feature in reversed(test.columns[test.isna().any()]):\n    test = missing_val_regression(test, missing_feature)\n    print(show_percentage_values_missing(test))","9d7440d3":"for missing_feature in reversed(train.columns[train.isna().any()]):\n    train = missing_val_regression(train,missing_feature)\n    print(show_percentage_values_missing(train))","d44f0a32":"# Function for Missing Continuous data Regression\nNote: This method requires NaN's to be removed from Categorical variables, otherwise it wouldn't work.\n\nThe reason i chose this method for imputation rather than mean or medium is because it would produce a much more accurate representation of the model.\nAlthough mean and medium implementations are simpler for application, it is less accurate.\n\nMean Method: Prone to give inaccuracies because of outliers\nMedian method: Just less accurate i supposed.\nLinear Regression Method: I suppose might produce a higher accuracy in comparison to the other models?\n\nWe'll see when we finally finish this dataset.","477eb69d":"# Imputation for Categorical data\nImputing NaN's with none which will be further processed on Feature Selection\n","99562840":"Here is the application for percent the linear regression continuous data imputation.\n\nIt incrementally reduce the fill in the missing values via percent of missing data of the training set and test set","46d1b2fb":"## Dealing With Missing Values\n1. Determine if it's Categorical or continuous\n2. If it's continuous, it will run a function to automatically find NaN's and fill the DataFrame using regression.\n3. If it's Categorical, fill NaN's with none."}}