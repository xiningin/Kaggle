{"cell_type":{"5c86f06d":"code","3a987d31":"code","66d07c99":"code","f4e2720e":"code","03a2a3b9":"code","56102bc3":"code","a7014e36":"code","4e51c465":"code","e2a255e8":"code","c74a44ca":"code","cad602b9":"code","ac011db1":"code","4a675955":"code","70c5ae71":"code","edfb407b":"code","f1375ebc":"code","ea2274f1":"code","6c9b1dac":"code","a6b032b8":"code","7ec039dd":"code","d2fa5756":"code","5b83c47d":"code","15500ca2":"code","394f7170":"code","4967583f":"code","a818e986":"code","7e18edb5":"code","0eb5bba7":"code","e3804e3d":"code","92289b48":"code","50ad511c":"code","2b4d335f":"code","b0178af9":"code","be1dd476":"code","e5020089":"code","78c634af":"code","141377a4":"code","21cf292f":"code","86b35346":"code","e4675bd1":"code","115b0941":"code","dc0e2de8":"code","f48dd2d8":"code","c53e98f8":"code","781cf7df":"code","2c6c3b90":"code","89468c09":"code","20eed948":"code","b5ffd4fa":"code","0c4c8df4":"code","083b9663":"code","3df7e17b":"code","0f894989":"code","57754f6d":"code","ff6f4057":"code","b4989a0c":"code","d59904c7":"code","bfc1ce2d":"code","aa2457f7":"code","479527f8":"code","47f9a055":"code","07b318d4":"code","2295a57a":"code","ac6d1cac":"code","4ed00a9e":"code","92af4cee":"code","49af9f5d":"code","927499c6":"code","388d61f0":"code","ae93c2a1":"code","3ee11ad8":"code","0152d5d4":"code","37bfabeb":"code","e48cf6ac":"code","bac3479c":"code","be95d01f":"code","660555fb":"markdown","b47dcce5":"markdown","74cbed67":"markdown","e64e1274":"markdown","4cf793f0":"markdown","c79ed5dc":"markdown","7e90a7d2":"markdown","736710b9":"markdown","e9bc7153":"markdown","6dbd0acb":"markdown","a2aa7c80":"markdown","18e36576":"markdown","7385f029":"markdown","160f1317":"markdown","6988b822":"markdown","8eaacfa7":"markdown","427539ef":"markdown","3086e3ff":"markdown","e876d4b6":"markdown","43137801":"markdown","f80b9240":"markdown","a3e1e4e2":"markdown","7278a68e":"markdown","0405c794":"markdown","92165bd8":"markdown","7c78a190":"markdown","0b89d384":"markdown","00ff187e":"markdown","6d977d5a":"markdown","3598d8d2":"markdown","06e6c40f":"markdown","ea7025a5":"markdown","79ff604d":"markdown","084f6e1a":"markdown","d2df99fa":"markdown","28b4bdc6":"markdown","acfa0020":"markdown","c8e51cee":"markdown","adbd2d07":"markdown","e739de48":"markdown","073ffbc0":"markdown","63dfc952":"markdown","2f46f290":"markdown","f18f9c36":"markdown","4bb687ab":"markdown","691300ed":"markdown","2dee4005":"markdown","2154b78d":"markdown","0f915bbc":"markdown","40df0fb3":"markdown","b50936a9":"markdown","285c4fd9":"markdown","5ee9c2bd":"markdown","4c576379":"markdown","32787cb3":"markdown","532cf407":"markdown","ea70571c":"markdown","0a600878":"markdown"},"source":{"5c86f06d":"\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a987d31":"#IMPORT NECESSARY LIBRARIES\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\") ","66d07c99":"df = pd.read_csv('..\/input\/cardiogoodfitness\/CardioGoodFitness.csv')\n","f4e2720e":"df.head()","03a2a3b9":"df.shape","56102bc3":"df.info()","a7014e36":"df.columns","4e51c465":"df.Product=df[\"Product\"].astype(\"category\")\ndf.Gender=df[\"Gender\"].astype(\"category\")\ndf.MaritalStatus=df[\"MaritalStatus\"].astype(\"category\")\n","e2a255e8":"df.info()","c74a44ca":"df.isnull().sum()","cad602b9":"df.duplicated().sum()","ac011db1":"list_col=['Product','MaritalStatus','Usage','Fitness','Education','Age']\n#How many models we have?\n#what is Martial status of customers?\n# how many days people expect to use treadmill?\n# what is self rated fitness of customers buying treadmill?\n# what is eductaion of customer buying treadmill?\n# what is eductaion of customer buying treadmill?\nfor col in list_col: \n    print('{} :{} ' . format(col.upper(),df[col].unique()))\n    ","4a675955":"df.describe()","70c5ae71":"df.describe(include='all')","edfb407b":"df.Product.value_counts()","f1375ebc":"df.Gender.value_counts()","ea2274f1":"df.MaritalStatus.value_counts()","6c9b1dac":"df[df['Product'] == 'TM195'].describe()","a6b032b8":"df[df['Product'] == 'TM498'].describe().T","7ec039dd":"df[df['Product'] == 'TM798'].describe()","d2fa5756":"df.groupby('Product')['Age'].mean()","5b83c47d":"df.groupby('Product')['Income'].mean()","15500ca2":"df.groupby('Product')['Miles'].mean()","394f7170":"df.corr()","4967583f":"sns.heatmap(df.corr(), annot=True, vmin=-1, vmax=1)\nplt.show()","a818e986":"plt.hist(df.Age, edgecolor = 'white')\nplt.title('Histogram view of Age')\nplt.show()","7e18edb5":"bins = [18,20,22,24,26,28,30,32,34]\nplt.hist(df.Age, bins, edgecolor = 'white')\nplt.title('Categorical histogram of Age')\nplt.show()","0eb5bba7":"sns.distplot(df.Income)\nplt.title('Distribution Plot of Income')\nplt.show()","e3804e3d":"sns.boxplot(df.Income)\nplt.title('Box plot of Income')\nplt.show()","92289b48":"sns.countplot(df.Gender, hue=df.Product)\nplt.title('Gender based distribution')\nplt.show()","50ad511c":"sns.countplot(df.Product, hue=df.Gender)\nplt.title('Gender based distribution')\nplt.show()","2b4d335f":"sns.boxplot(df['Gender'],df['Age'])","b0178af9":"sns.countplot(df.Product, hue=df.MaritalStatus)\nplt.title('Marital Status based distribution')\nplt.show()","be1dd476":"sns.countplot(df.MaritalStatus, hue=df.Product)\nplt.title('Marital Status based distribution')\nplt.show()","e5020089":"sns.countplot(df.Usage)\nplt.title('Count based on Usage')\nplt.show()","78c634af":"sns.countplot(df.Product, hue=df.Usage)\nplt.title('Usage based distribution')\nplt.show()","141377a4":"sns.countplot(df.Fitness)\nplt.title('Count based on Self Acclaimed Fitness Level')\nplt.show()","21cf292f":"sns.countplot(df.Fitness, hue=df.Product)\nplt.title('Fitness Levels based distribution')\nplt.show()","86b35346":"sns.countplot(df.Education)\nplt.title('Count based on number of years of Education')\nplt.show()","e4675bd1":"sns.countplot(df.Education, hue=df.Product)\nplt.title('Education based distribution')\nplt.show()","115b0941":"plt.figure(figsize=(10,5))\nsns.countplot(df.Product, hue=df.Education)\nplt.title('Education based distribution')\nplt.show()","dc0e2de8":"plt.figure(figsize=(10,5))\nsns.countplot(df.Miles)\nplt.title('Count based on Miles')\nplt.xticks(rotation=90)\nplt.show()","f48dd2d8":"sns.boxplot(df.Miles)\nplt.title('Boxplot of Miles')\nplt.show()","c53e98f8":"def bar_perc(plot, feature):\n    '''\n    plot\n    feature: 1-d categorical feature array\n    '''\n    total = len(feature) # length of the column\n    for p in plot.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total) # percentage of each class of the category\n        x = p.get_x() + p.get_width() \/ 2 - 0.05 # width of the plot\n        y = p.get_y() + p.get_height()           # hieght of the plot\n        plot.annotate(percentage, (x, y), size = 12) # annotate the percentage","781cf7df":"fig1, axes1 =plt.subplots(1,3,figsize=(14, 7))\nlist_col=['Product','Gender','MaritalStatus']\nj=0\nfor i in range(len(list_col)):\n    order = df[list_col[i]].value_counts(ascending=False).index # to display bar in ascending order\n    axis=sns.countplot(x=list_col[i], data=df , order=order,ax=axes1[i],palette='plasma').set(title=list_col[i].upper() + ' WISE SALES')\n    bar_perc(axes1[i],df[list_col[i]])\n    ","2c6c3b90":"df[df['Miles']>180]","89468c09":"sns.jointplot(x='Age',y='Miles',data=df)\nplt.show()","20eed948":"sns.jointplot(x='Age',y='Income',data=df, color='red', kind='hex')\nplt.show()","b5ffd4fa":"sns.jointplot(x='Income',y='Miles',data=df, color='orange', kind='hex')\nplt.show()","0c4c8df4":"sns.catplot(x='Gender',y='Income',data=df)\nplt.show()","083b9663":"sns.catplot(x='Gender',y='Miles',data=df, kind='violin')\nplt.show()","3df7e17b":"sns.catplot(x='Gender',y='Usage',data=df, kind='bar')\nplt.show()","0f894989":"sns.catplot(x='MaritalStatus',y='Income',data=df, kind='box')\nplt.show()","57754f6d":"sns.catplot(x='MaritalStatus',y='Miles',data=df, kind='swarm')\nplt.show()","ff6f4057":"sns.catplot(x='Gender',y='Income', hue='Product',col='MaritalStatus',data=df, kind='bar')\nplt.show()","b4989a0c":"sns.pointplot(x=df['Education'],y=df['Income'],hue=df['Product'])\nplt.show()","d59904c7":"sns.pairplot(df, hue='Product')\nplt.show()","bfc1ce2d":"plt.figure(figsize = (20,10))\ndf.drop('Product', axis = 1).boxplot()\nplt.xlabel('Inputs \/ Features')\nplt.title('Boxplot of all Input Features')","aa2457f7":"from sklearn.preprocessing import LabelEncoder\nlabel_enc=LabelEncoder()\ndf['MaritalStatus']=label_enc.fit_transform(df['MaritalStatus'])\ndf.head()","479527f8":"df['Gender']=[0 if df['Gender'][i]=='Male' else 1 for i in df.index]","47f9a055":"from sklearn.preprocessing import LabelEncoder\nlabel_enc=LabelEncoder()\ndf['Product']=label_enc.fit_transform(df['Product'])\n","07b318d4":"X = df.drop(\"Product\" , axis=1)\ny = df[\"Product\"]","2295a57a":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n","ac6d1cac":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n","4ed00a9e":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)","92af4cee":"y_pred = classifier.predict(X_test)","49af9f5d":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\nacc_logisreg = round( accuracy_score(y_test, y_pred) * 100, 2 )\nprint( 'Accuracy of Logistic Regression: ', acc_logisreg )","927499c6":"#Import Library for Linear Discriminant Analysis\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\n#Initialize the Linear Discriminant Analysis Classifier\nmodel = LinearDiscriminantAnalysis()\n\n#Train the model using Training Dataset\nmodel.fit(X_train, y_train)\n\n# Prediction using test data\ny_pred = model.predict(X_test)\n\n# Calculate Model accuracy by comparing y_test and y_pred\nacc_lda = round( accuracy_score(y_test, y_pred) * 100, 2 )\nprint( 'Accuracy of Linear Discriminant Analysis Classifier: ', acc_lda )","388d61f0":"#Import Library for Gaussian Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\n\n#Initialize the Gaussian Naive Bayes Classifier\nmodel = GaussianNB()\n\n#Train the model using Training Dataset\nmodel.fit(X_train, y_train)\n\n# Prediction using test data\ny_pred = model.predict(X_test)\n\n# Calculate Model accuracy by comparing y_test and y_pred\nacc_ganb = round( accuracy_score(y_test, y_pred) * 100, 2 )\nprint( 'Accuracy of Gaussian Naive Bayes : ', acc_ganb )","ae93c2a1":"#Import Library for Decision Tree Classifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n#Initialize the Decision Tree Classifier\nmodel = DecisionTreeClassifier()\n\n#Train the model using Training Dataset\nmodel.fit(X_train, y_train)\n\n# Prediction using test data\ny_pred = model.predict(X_test)\n\n# Calculate Model accuracy by comparing y_test and y_pred\nacc_dtree = round( accuracy_score(y_test, y_pred) * 100, 2 )\nprint( 'Accuracy of  Decision Tree Classifier : ', acc_dtree )","3ee11ad8":"#Import Library for Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Initialize the Random Forest\nmodel = RandomForestClassifier(n_estimators=200,max_depth=4)\n\n#Train the model using Training Dataset\nmodel.fit(X_train, y_train)\n\n# Prediction using test data\ny_pred = model.predict(X_test)\n\n# Calculate Model accuracy by comparing y_test and y_pred\nacc_rf = round( accuracy_score(y_test, y_pred) * 100, 2 )\nprint( 'Accuracy of  Random Forest : ', acc_rf )","0152d5d4":"# Import KNN Classifier\nfrom sklearn.neighbors import KNeighborsClassifier","37bfabeb":"# Here we will check Error for k value in range of 1 to 40\nerror_rate= []\n\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors= i)\n    knn.fit(X_train, y_train)\n    pred_i = knn.predict(X_test)\n    error=np.mean(pred_i == y_test)\n    error_rate.append(error)","e48cf6ac":"# Plot of Error vs K-value\nplt.figure(figsize=(10,6))\nplt.plot(range(1,40), error_rate)\nplt.title(\"Error Rate vs. K-value\")\nplt.xticks(list(range(1,40)),rotation=90)\nplt.grid()\n\nplt.xlabel('K-value')\nplt.ylabel('Error_rate')","bac3479c":"knn = KNeighborsClassifier(n_neighbors= 3)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nacc_knn = round( accuracy_score(y_test, y_pred) * 100, 2 )\nprint( 'Accuracy of  K=Nearest-Neighbor : ', acc_knn )","be95d01f":"# Create a dataframe with all models and score\n\nmodels = pd.DataFrame({\n    'Model': ['Logistic Regression', 'Linear Discriminant Analysis','Naive Bayes', 'Decision Tree', 'Random Forest',  \n              'K - Nearest Neighbors'],\n    'Score': [acc_logisreg, acc_lda, acc_ganb, acc_dtree, acc_rf,  acc_knn,]})\n\nmodels.sort_values(by='Score', ascending=False)","660555fb":"**Random Forest**","b47dcce5":"**Decision Tree**","74cbed67":"**Analysis of Income based on Marital Status**","e64e1274":"**Linear Discriminent Analysis**","4cf793f0":"**Observations**\n \n* There are 60 customers who purchased TM 498 Model\n* Average age of customer who purchases TM498 is 28.9 , Median is 26 . Age is right skewed. Customer range is between 24-33.\n* Average Education is 15 and median is 16.\n* Expected usage is 3 day a week\n* Expected Miles to run is on an Average 60 miles per week and median is 85.\n* Average Income is 48973.\n* Median Income is 49459","c79ed5dc":"**Dividing dataset into train and test set**","7e90a7d2":"**Analysis based on Marital Status**","736710b9":"**Observations**\n\n* Average age of customer who purchases TM798 is 29 , Median is 27 .\n* Average Education is 17 and median is 18.\n* Expected usage is 4-5 day a week\n* Expected Miles to run is on an Average 166 miles per week and median is 160.\n* Average Income is 75K and median is 76K","e9bc7153":"**Objective**\n\n* Come up with a customer profile (characteristics of a customer) of the different products\n* Based on the data we have to generate a set of insights and recommendations that will help the company in targetting new customers","6dbd0acb":"**Analysis Based on Usage**","a2aa7c80":"**Check for outliers**","18e36576":"**Label Enconding for the Categorical Values**","7385f029":"**Observation**\n\nMost of the customers have 16 year of education (assuming them to be college graduates or bachelors)","160f1317":"# Data preprocessing","6988b822":"**Analysis Based on Education**","8eaacfa7":"**Observation:-**\n\nWe get the same observation as from the correlation plot\n","427539ef":"**Average age for each model**","3086e3ff":"**Analysis of Miles based on Marital Status**","e876d4b6":"\n\n**Count based on model**","43137801":"# MODEL SELECTION","f80b9240":"**Observation:-**\n\n* Education and Income are correlated.\n* TM798 has higher income and higher education","a3e1e4e2":"**Observation**\n\n* 80 customers bought TM195 model\n* Average age of customer who purchases TM195 is 28.5 , Median is 26 . Data is right skewed.\n* Average Education is 15 and median is 16.\n* Expected usage is 3 day a week\n* Expected Miles to run is on an Average 82.78 miles per week and median is 85.\n* Self rated fitness is 3 that is average fitness level\n* Average income and median is around $46K.","7278a68e":"**Understand data for Product Code TM798**","0405c794":"**Observation:** There are no missing or duplicate values in the dataset","92165bd8":"**Analysis of Miles based on Age**","7c78a190":"There are not much features with outliers so no need to remove them.","0b89d384":"**Gaussian Naive Bayes**","00ff187e":"**Analysis of Income based on Age**","6d977d5a":"**Pairplot of all numerical values with classification of Product**","3598d8d2":"**Logistic Regression**","06e6c40f":"**Analysis Based On Miles planned per week**","ea7025a5":"**Analysis of Miles based on Gender**","79ff604d":"**Analysis Based on Gender**\n\n","084f6e1a":"# CardioGoodFitness","d2df99fa":"**Average Income for each model**","28b4bdc6":"**Analysis based on Income**","acfa0020":"**Multivariate Analysis**","c8e51cee":"**Understand data for Product Code TM498**","adbd2d07":"![th.jfif](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQEAYABgAAD\/2wBDAAoHBwkHBgoJCAkLCwoMDxkQDw4ODx4WFxIZJCAmJSMgIyIoLTkwKCo2KyIjMkQyNjs9QEBAJjBGS0U+Sjk\/QD3\/2wBDAQsLCw8NDx0QEB09KSMpPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT3\/wAARCACnASkDASIAAhEBAxEB\/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL\/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6\/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL\/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6\/9oADAMBAAIRAxEAPwDylQSalVSeAaYgOasquBzxVmUhpBOQOtKytUpA6d6TIbNMkhKfuW+hzXrGiDbo1mM8+Sn8q8plbbA\/rg16toyldEsMnkQx5P8AwGgpGH8ROfDrbs8TJ\/WvL8Ke4\/OvYPE8Uc76XDMgeKTUIVdT0Yc8Gu3k0HS5FG+wtzx3jH+FNRuHNY+aPLU9CKPK9DX0Y\/hPQ5Pv6ZaH\/tiv+FVpPAfh2TOdMtvwTFHKHOz588pvWl2yL0P617zJ8NvDkn\/Lgi\/7rMP61Wk+Ffh9\/uxSL9JW\/wAaOQOc8QDTL0Y\/nS\/aLhf+WjV7HJ8I9Hb7k1wn\/bTNVX+D1mxxFfXA+pB\/pRyBz+R5Ul1eM2EdiatRzXZUn7ZEMdietW\/E9hZaJqD6Zp9y900ZxPKcYL\/3RjsO\/v8ASqUDRCMI7KpY\/MwGSi+3v6f5xNtShfteogna27HdcGmDWrxOrD8q0ZLSNozPGptkJAjXPzMAMDPoAOvqTTIdNMyEXjBY2cRiYr\/qz747DIzRYLkFtqS3Z8q5VQW6NUV5ZyW7dPlPcV0r\/CrXkOV+yuOoKuef0qvdeA\/E1uqo0SOD0CyD+tPlZPNF7HLO4BGeSO1Nkk86QsRjirup6DqOkkfboDGW6cg\/yrOU4PNS\/MtW6F\/TbKa8bYh2oerHoK6RdTstBtvs9h+9uG+8\/WuWS8lZVgjOxTxx3ruPDHh+xhAuNRYbzym48U0hN2ZR0rw7da7OLnUGMVuTnB6tXe2qw2FssFsm2NRgCnRyWKgBZ0wOmDUiz2eeJo\/zFFxpWMnxHKz+Hr4YODH\/AFrx9\/vmvavELQP4dv1jdC3kkgA14rJ980nsC3Fj+9XYeFhi4jz\/AHhXIQjL16L4H0YXEqTXJIRWGEB+99a1paamFZXaSOm8Wq1x4FuIkDMzTRAADJPzV53eaJcaT5Au4Wj81d67q9tkjj8pYwi7FIIGOK4T4lndLpvsrj+VUlfUid1ocx4TGPEi4\/54yfyr1yyY\/Yoef4F\/lXk3hIZ8SD\/rhL\/KvWbLmzh\/3F\/lTZCOH+KBJvtNz\/zxf\/0KuAH+tT\/rov8AMV6B8UVZbzTSRj90\/wDMV5+B+9j\/AOui\/wDoQo6CXxHtOmZ+26nz\/wAvZ\/8AQRWpz61maYP9M1P\/AK+z\/wCgitPFA7Hz5EMkVcCjFVoAN4A9auYGD61ijoYwBS3qQOtIY+GqQDilK9aBFSXBt2HbHSvW9LjD6Jag8boE5H+6K8omXETkdhXq+jZGhafu6\/Z0\/wDQRQUjJ8Qs63WlAnKjUISD+dekg\/u1+lea+Jfvac3pfw\/zr0gH92v0FWieoZozTe9LTGLRmgU7y2PakA2svxPeS6f4W1S6gZlljgOxh\/CSQufwzWwImAJOFAGSScAD1rznxrrl5JZ3D\/vLfSUVA52\/NcCQnAx0GQpbB7Y9aGwtqeSzKRIxOSckc\/rTrS3nnkxBDJM6jcVRScD1NK80TAFSeM9a6DworsuoWkPl\/ap4Q0IY9WU54PY4HX61hJ2OiEeZ2Zm2D3F3cKiK8j\/3kwdo9uw+vWvTtGsVi0xbVYSI9m1lHOc9c+veuYg8mw1ydwqbHfcQo79T+ua6bUbYmFLq3tXkt7iLbJLEFLwHIyQScjjJBHcVPNdmqhyo9BgAWCIKoRQigKOijHSs3Wm2PGc45rUgCGCIxuXTYNrE5LDHBJqhrOni7VCzEBTniumLOKSZ4v4sUzeIrwSSM6rgqCxIHHauOZPnP1rt\/FiRW3iKZQQA0YPJ78iuNYDzG54zSnuKk7ElhGGvoRj+IV7Npnh2LWNOj8ximz0HWvINJA\/tOHPZq958L\/8AHjQtIjbvIba+CdPj++C\/1Nch4z0e1sNWslt12q7cgH3r1BOted\/EA\/8AE4sBj+I\/zohqxVLKJgapo7W0puUDiN4JM8nH3a85k++a9w8SIG8PoMY\/cuc\/8BrxCX\/WGipsVTVmPtuJV+tes+CP9Sv+\/Xktv\/rF+tereBn3Qgejj+VEfhFP40d854rhPiQvz6cfZ\/6V3hHFcL8SOun\/APA\/6VcDKqcx4R\/5GP6W8v8AKvWbDi2tv91a8m8I8+I2\/wCvaX+Ves2I\/wBGt\/8AdWmyYnJfF3\/X6V\/uSfzFebp\/r4v+uqf+hCvSfi4P32lf7sn8xXmyf6+H\/rqn\/oQoXwi+2e0aZ\/x+6n\/19n\/0EVqZrM0wf6dqf\/X2f\/QRWpikUkeAQgbhViq8XU1YjI65rJGzHk4FKB1J6VExJznnJqXPyHPpTEQ3H+pcD0NepaMd+g2J\/wCndP8A0EV5XOuYHOe3FeqaIQfD1hznMCHP\/ARQNGX4iGRYD\/p+h\/8AQq9PSJfLT6CvLvEf3bE+l9D\/AOhV6nH\/AKtPoKGOOrYLEvpTiigHilFKfumkVYqr9\/8AGrmABVNP9Z+NWJ5fs9rNPtz5UbPj1wM02JI5jxv4tj0OD+z7YRzajcISUflYU7s3+FeSaxqdzqk\/+mXMt3cyttjEv3QemQvQACtLUrZ1ll1TUrkyXF9cPxnqidW+m4hR9DUvhbws+seK7Q7g8MQ82TAOMc4H4nA9+aTFuzh5YITAGhGCsm05PJGOK2dNtv8AR5ZlXEsYDK4OCD6g03VtEay8Q39nC6TRW0xy8fK54yM+3Q+9dPpGkkfu2XHmw7gCPyrCo7HXSjdmNYN51wm8nk4Oa7e0tLy8tW0uF541uNuJEi3Ljdzk+nBzXFpb3FneEiCRwhz8qE132hXk27T760tb2WRwYpIkXC7OMsc\/Xj8aiOrNnpFnXaHpbaRpcVk0\/nmPOH2bB9AMnj8asX6\/uTVrGKr3wzCfpXWcD1OUi0yzuL0STW0bvnqwzXmvxRtYbbxAogiWINEpO0YycnmvU4QRISOua8s+JxZtdTcc\/uh\/M1UjOOjRzmjAC4RiM4Ne4+DLlLjTmO4ZU4ryDwbpi6lq0Ucx\/dE5Yetei+MoY9Os7ZbPdCCcHYSuRj2o0ceUTTUnI70TwqeZFH1OK898eOk+s2AhdWIY5wc45rJsNzgFmZs+pJp2pJi5sT\/00\/rTjGzCcuZG9rt5bTaT9mSVTOLaVtgPOAvNeJTf6w12lqS\/jXUwSSBZz456fLXFzf6w1E9jSG4tuf3gr1TwQ2ADjqw\/lXllv\/rBXqfgvqv+8KcNiKnxo9B6iuA+JlzEJbOJXUzRqzsuegPTP1rvi6RRPLKdqRgsx9AK8O8SapJqeoXFywOZ3O1fRegH5YqloiZ6ux1PhfSrGSMavY3+5liaGa2kHzByuSVPcV6DYf8AHtbf7q\/yrzjQYhYavaaWv3oLOWSf3ldQSPwGBXpNiP8ARrb\/AHVoJscl8XeJdK\/3ZP6V5qn+vh\/66p\/6EK9L+L3+s0v\/AHZP6V5on+vh\/wCuqf8AoQql8JL\/AIh7Vpn\/AB\/an\/19n\/0EVqVl6d\/x\/wCp\/wDX1\/7KK06ktHz9HJzwKsAjA9aqoMZPvUsbkyAYNZo0ZOD6U4H27UmMUE7R70xEc2RA3HFeo6Ef+Kf08f8ATun8q8vnJ+zGvT9BBGgafk8+Qn8qEMzfEa5jtG7Lewn\/AMer1KP\/AFSfQV5h4kGLW3OePtkP\/oVepRAGFSPQUSHDdgKcfu03FKfumpNCqv8ArPxqzLH51vLFn\/WRsn5giqwBMmACST0Fcb498fLpUUmk6LOG1JvkmnjORbDuAf7\/AP6D9aGxJXOE8UQRSaksV5fKkqkp9niQyG3RFwqsP7zHk88ZJNV\/D+oa9ZpLDp8wtxcZEjqcSN\/wL+HgAcYNV7CyAwSOWregT7MQ3cc1jKozohRXUt2\/h2Tw1p7anE32i2jTddWj85Xu0bHoR1wevNdPFHb3t7a3tocwSRDY2MDFTaXe2+p6TJDMgwyFXHqCMH9K5TwpqM2g3V3pF6G+z283liQj5YyfuEnoA4I69x70klJFt8kvIlmkuLPX7q6licW7ylMhcbAOBkduOR612XhF0u5ZrhZN\/lp5W4dOuaztaiEtok9tIqTxtwrHCyA9Ub09j2PsTWr4L1CG404wRAKqgsgAxjnDAj1BpwVpCqSbhY6Sq96P3JqwKhvf9Sa3OU52FfnP1ryn4n\/8h5P+uQ\/ma9YiHzt9a8z+JdkrW1pqalg7XE9pMjHIyhypH1U9KqUraEqLevYzvh5\/yGoq7rx+f3NoPeuM8N6bqGgaZF4iurXbZNII03HDsSMg7fTg8\/0p114luvEl+7zgJFFxGg7fWiOtmiJe7dM2NMGUFTamuLix\/wCun+FM0sfIKl1Mj7RY56eb\/hWnUnoc3a\/8jvqvYfY5\/wD0GuLl\/wBYa7S2Ibxnq7oysps5+Qc4+WuLk\/1prKZrHcdb\/wCsH1r1PwX95fqK8sg\/1o+teqeCedv4VUdiKnxI6Lxtcta+ErhlYqJJEjfA5KnqP0ryvSzHda4t3JE0trZ4lZBwXweB+Jr034hS+T4NlfuJ49v15rjPDGmoliJLgFYwpupj6gfcX8TzTWxM9HcueH7a2uddu9RgvcOsUnnW10NkqlvTsw+lejWX\/Hrbf7q1zdrBBaeHdPEsSNdX8k0+9l5AC56\/iBXSWf8Ax623+6tISRyXxe\/1mlf7sn8xXmi\/66L\/AK6p\/wChCvS\/i7\/rNK\/3ZP6V5mP9ZH\/10X\/0IVa+Eh\/Ge2abzf6n\/wBfX\/sorUxWXpv\/AB\/6n\/19f+yitTFQaLY+fEG4HFSxL8xbvUUZ44qWNuDmoLZOSecVFI+GwBxipAeDxUTrk+goEI7loGU+leoeH2LeHdPPX9wteVNkLXqfhwkeHbDI\/wCWK00Mp+KD\/oEIx\/y9w\/8AoVen2+VgQf7IrzHxMo+xw\/8AX5D\/AOhV6jGP3aY\/uiiQ4bsXPNGSeByTxikPFcF8R\/GR0qBtF02QjUJ1\/fyqeYIz\/CP9ph+Q9zU7Gi1M\/wAb+PHNxLo\/h+bBBK3N7Gec90jPb3b8BXDW2mkEECp9LsQABgZ9a24Ujt1JYgAdSTWE5nXSpFe2g8sqOhFSahILOENMQFPTNM1u4n0e1t7ya1dUuSfJDnaWA\/i29QvPBxzXOXF9cajL5lw4b0UDCj6CsrN6s1copWR2Xh\/VHkIVflUngZ7UzTvFEEfiLWDJa\/abS6lWM\/MMMqLsPyngg81yMt+9pDshc+c6kKB\/CPU1Fp7mN0RASegHrXTh4a3ZxYur7qij1mGK0urN0sp2ktSv+qfmW19\/9tB+JUeo6GgTSWt\/aybT\/wAfHkTBRnkgjP6UvhjQEAhudQnAdcMqRvjafc11ltaBNSLQxJHp8BN00gxhpCpXaB2A5JPuKqpFKV4hSqNwakaOeetUdQ1C1gLQzXEccgCHDHruJAx+VWIJ45bRLlmCxGMSEnsuM15Drt7catrA1D50kMjFTn7qdFXHbAqKlTlWhdCj7SVnseiJA8N0UkTnd+BHt615tqN55so+1WyXCR3L3CI2dokbGSR36DANdxe+K0TwlFemMLqCqVgiZDh2A6j1QfqeK4e0vbXVI5JY5CjH5mB6g1FSamkbUKfs5NM6bwjrkLvNazukdwFkPmzfOIkbktt9SAePQDPpXnNw2maXrWox2E80tkkmIXmXa7j3GB3z2HFa9zrQ8PXEdzDeOblcMsCEY9i3oP1PpXOahd3\/AIp1aXUdScNNNjcVULkAAAAdhgVdC6McZyt76mgviuVYvLsYMyHjewyB9B3NVLfX9Wm1KOKWaOIlseZdL8q\/Wuh0LTbe0Ak2AyAYBx936Ve1OKGa4slkiRwZOdy5z0roabOO6RXN9e2lhdxNDojx3kDh7ixcbyAM8ivN5BmU11KwxReK9VjijVEW1lwoHA4rl2\/1v1qHsXHcWEfvR9a9T8EdV\/CvLYuZQR616n4GXfsCjJz2q4bET+JG\/wCPLYXnhiOAglWvYt+BnC\/Nmuelt7n+y0hjtJt11IJHKoSqR9I1JHTjmtjx7fO3hxrTS7hZL\/7Qh8qFwz4Gc8CsHwh8SNYiYWE+ktqG0EERpiQAdc0J2CUbmxrNwF8bafpsZyllpjj8WXP8gK6my\/49Lb\/dWuEGq6frfjeC90+GSKSWzl+0K5z8wGB+lddNq1po+jwT3kqxqFXr\/Qd6CU9Tn\/i9jzNKyf4ZP6V5oAC6HPR1P6itzxr4nPifU45IUdLaBSke7q2Tkk+nauYkJXoSDTvZCcbyue76aN15fyL92S43L9NorUxXMeFbx7jRYJn+8wBY+prc+1GlYpM8EjI6dDn9KSdipwGIHamRHc1ThcrzzzxUF7MfDITGu7k460pYkN6jpRtwvHAFNPemIickxk9xXqvh\/I8OWHX\/AI91P6V5UwBRvpXrOhAf8I\/p4\/6d0\/8AQRQgM3xKztZ26463kX\/oVeosWggUnptrzHxIyxwWzEcLewH\/AMer1G7uY3sM\/wCzTkOHUy77WV07Tby\/kAK2sLSBT0YgfKPxOK8Fnaa4ujd3MhlnmcySuerMTkmvbWsYNbsLmyvFY2067XCnB6ggg+oIBrzfxJ8PtV0FXubMPqFgnJdF\/eRj\/aUdR7j9KzmjWmxNNjt7uBVdnicdHjOCP6Gu08LaPo1jZzalqlwLiazBlk84AJCg6Mq\/xH39egFeW2Go7GBVu\/Y11kF7bahZNb3QV43GGU965\/hdzs+ONkynM0njjXrrUL5W8qc+XEhP+qjB+UD3HX6k1xpFxBLLBuCFGKMdvPBx36V6Z4e0t1lNrabmiJz5+Pu+xrkfiNYtZ+Or2HTd2xljcgN1YopY\/ieaqMk3qZzg4pJGGluBg85bqTySasJC8bAqMHsappZ6u7KF8wFjxmVVGT9TXWaN4H1m5CPqbXkMLf3XQDHruJ6fhWymujOd0pX1RpeHtauWjSIu29SPqa6TW\/EMlhYWukoWU3YaR39ATgfh149qr6R4cU2AlsdNmTc7KjyTAuyjADHnAyc4HPA965bxOLi31+SOdpsqihPMbdwBj5fbIP60TrJR03HCg3Oz2PRdbhkv\/B8cdqzKluyF4wfvoOBn6HBrn3OlaPbrJdTi\/uxyLeI4iQ\/7T\/xfQVh3vjC+uY4LeA+RaxqcopyZHxjLH25wKw5rl2yzsSa4btvU9NWinqaGp6nLqFy9xcybnbAAAwFHZQOwHYVi6nNHpV7b\/YCV1SM75XjOfLPZMdCw6k9jx2NSvPLbJG0Klr2f\/j3QDJjB\/wCWhHqf4R\/wL0rP1XT7rw6qRzwmO5mTeWc5YD+ldNKn9pnFiKq+BEUVuBMWuW8yYksUJzg+pPc1NpkzNdTM7ZPSqOmEtIxY5Pqa9D+GfhyN0vdVvwhtthUBxkYHU11KyVzgldtoh058xipL+TE9mc8B8nFV7QrcXhjsoztlkIhTvgngV1FvZ2\/nJa4eZgQoaP8Ajl\/+JH\/16u1yb6GEmgW1nqDalqe5I70MHLdViPBwo5yegrLn8Npo2mrqUDCJbpj9nid91xs7EkcDjHT1FdZJbWGq3csdzqqwW1uQFlb5muJO7f7gHA\/E96Zouh2k+t+ekzT2sblLZnXBnZcbnA\/ugnA9yPSh2DUrax4I0680SO9uXWwuooFaS6K4DNgYDr3JJxxzXJxXd1BZfZoJWiQ\/fKHBf8fT2rudUivfGeoywWLqun2PAc52SSdCeOvt7fWsPWfCt5o2nSXdzNbbAQqhSdzE9hxUopo57R\/k8QaesZwTcJyPrXsSWcf2qe6tY0S8eFoxLjuemfxrz3wNo5uNXiupEyUBcf7I\/wDr13+q6nDo1m9xJjP931oYLY8g0+7fQNXuZplPnpFLEF\/2zx\/jUM095rcglu5iwiAVV7KPYVtaXocvi3UbvUJ\/3duXZhj+JieaxdWs5dJ1CS2RiR7elU11M1poVZkSJSM9Kzny5wOpqxKW6Hqau6Np5utRgQj+IE1O5a0R6h4WtGttCgRhztGa19lOs0EVrGg9KnwKASPnqE\/MRVhGwAKrRdSamDZOPSs0aMmLcVGScmk3Ypm7OTQFgc5Q89q9Z8Okjw\/pwPP+jp\/KvJOqH6GvW\/Dn\/IBsT6QJ\/KnEGZ\/i4EadGR1+0xf+hV6II3lgRW4yorz3xZJ5WnxSHnbcwtj6NmvRRfJJDHtPUZ6U5McOpJBZqijaenpVlJjGCVzkdOapnzhGWVjg1DG8qkA5PvUM0MfX\/AGla4WuXh+zXbcma2whP+8Oh\/LNcVdfDzXbAM9jNBfRr0Xd5Un5H5T+derebLgKw4NIY3fhQQKl2e5autTyvTvGN\/4eZbPVbSWDHA8xNjfgTwfwrpFvtM8TafJLc2UV8kIy2V\/eIPYjkfga6+fT4p7cxXAWWNuqSIGU\/ga8d8b3EPhjxbPb6G8dpGI4xJFC2BnAY5A6c9qxlSW6N4YhrSSOohsPC9gxubR0+0RnkXD+YYvUBW6H361v215Hrl9b2\/2WK8hTId1mUFBjOdufmFePf2vDfyyTTOFmclmOepPWus8A2K3N\/PfRolxJCuyKO3ufLnUnqwXuME9fTpU+ztqzVVeZ6HpMdzaAultJKrx8GKSIoVHtxiuM8WeFZ9WtJtZsldrmKQq0ZyTNHgfcHsc4A68+1dS7Tx2oSW4u5gnOLkqzqemMgc1leOdfl8HaFZxWsKNeXcjFSc4UhRlsfiOKmKUpWCpLkhc8qEoH3hg1Jp1rd6xfC30+3+0SA5OR8iD1Y+ntWp4d8J614yvZNRvbiVIJWzLO3WT1Cjv9eleq6dotnoOmi1sLdYl6s3VnPqT3reNJR3OWeIlNWWhjeHPCNrog+1Tt9q1KTJkuH55PXb6V538U2La9Hk\/8sh\/M16+c1498TznXkB\/55D+ZrZGDVrHOaLZS38jxwKzOFLbV6kCvUNev\/wCx\/BNvpNrE0VzPEHmUfwR\/xc+5GK858I6pJo2sxXiJ5iqCsif3kPX8e\/4V6el5pfjnTkuJS9u9q4SeM8eYmchM9MEjtz1q1sjGVrvuVPBuk7LEX90Xi89flfaSYoj\/ABexboPatq58y6lFtaj7MZ02l88Wlrg5Y\/7TAHHtn1Fcz4iY654nbTyZv7L0zat3GjkLcTn7sSgf98+yqx7Vk6n47gjuJLdVuZRIT9plRwgc5GQq46DGAD0AA7U3IFBnRS21pfzStZxJDp6Agy72Jt41xmRl7segHqelXpzMpjsLOHy9Qvo1jWIH\/jzth0Unsx5LH1J9BUdhe2\/9kwXCD9zmNtsny+bPj5Iz\/sxg5J6bsn+GrEGp2ei6fcX0c4udXuvlZuSIz3Iz29PwoKsZkmn6lpt9\/Z2nXamUEA+TLtUH3+lY08l\/rF95GoXbTw2rEElsrnvitdLU3B+y3cKrf3yeZHNEdzRr1+b0rnPEsg0ONtLtZhLM\/Ejp2Hp9aAZ1Hg7xNaJf3NvEm4dAQOoFZPi\/VZtb1RrSyR5FHVU5wKq6ba\/8I9ohkCF765HRRkqO1dr4U0FNF0h7u9ANzON8jHt7fhT8ybaHGad4hvNBtDZ+QAB\/e4IqiNUsmkknvLWWWWQ5BJ4rVvnTV9akkWH9wG\/T3rP8Rva3EsNvagbl+9tHA9qq7SIauYwT7ddNL5YjQnhR0ArX0C5gttSXdj0zVS5KafZY\/iI5rnRdyLOZAe9S2kNJvY95s7uOdF2tkVb3CvIdD8WSWrKHYlfc10H\/AAnCetIq\/c84Q9alBqBc4qVAayNWSY4zikCgZzS\/eBBpnPNAhTjBA9DXrPhkgaBYjt5C\/wAq8lAJ3duK9b0DI0ayz0MCfyqoiZQ8aoz6IBGMu08YUepLcV1cdlrMemqWtoi4UcK+TXNeK45pNI3xI37maJyccAhu9dNZeNDdW6xpbShgoGTjk05N9Aja7uXTrFzZWCiWxZ5MYwtRx+KSgUTaXcqzDjCg1QvfEkheOCK2ZpmYAZPFVb\/xFcWMMBuLJhK4+6pBFZ2ZrzRtuaF94lupGU2ulXJA5JbArUs9eaS3Hm2cyOR93ANcvb+MtxRHsZee4xVi48VRWVtLd3aNFbxjLHv7AepPpVWdtieZX3Lt1rN99oO+2dLdcs7lgAiDkkn6V4L4g1M61r99fn\/l5maQcdieP0xXQ+KfHep69FJCZDaWUvAtIj\/DnILt1Yn8vauVggSRiXfaoIz64zzSsPmEtbOW8uY7eBN8sjbUTOCT+NemaNpdzo1nDBMkczQHcVnTGGz\/AAsOVGTjPI\/lSaFpVraWjRJZ2FwkgxIXBDOPfdmtyyxbt5IjZYGbb5Ux3FB0G1u6+3UfShxXUFNrVHSadfxapbtIqsrp\/rYn+8jDnB\/oehqjr9vZ+M7nSbxYXmtbLzGngx8xZtu1T6jjJrKwbO9mkjlaMJbupb1QjAB9wTwe1X\/DGqz2mliGC1ecBzmRWHzHuf6fhWcKXK20a1K3tElI6BNRmgiWOHTnVQNoVcAKKjvdRuhbndYSKe2SKzb\/AMV3NtsxYzHPU5FVYfGTX8iRNbyg5xhsVoovcy9ovhuOj1vUGBH9kzcHruHNeY\/Eed59dDSRGMiMDB9Oa9Q1fxZBpZSIwySOwzhQMCvLvG8k+s3r6gIfJgjVY9znGTycD1NNJ22JbV0rmJoIV9QhjdxGruFLEE4BPPA5P0r1Lwvr2nw2UGnLZxQrdszWiONz3CqTmV+yAkcfQ15ro1\/d6DNFcaeqHUGHmbnQMI48eh45\/liuok8azXN3a3kFtbWc0VuPtd1HErsqBvuoW9cbQPVjzgVSlZEON5Gn4nv4dCs9QnsLdrJi\/wDoZJOZJJv9ZOM8k7QQD2GOmTXAeF9Cl17V44UOyJfnllPSNR1P+e+K9RtPEVp4k8xGtkudH8ppLhblOYR22gdGJxgDr2xUS2dp4XsI1TTWEN3IzyRljhVH3Yy\/fk8+vNLd3LV0rEsl1Bp9nJeLEUtLKELbw5zujPcr1DMRnJ7Y9TXn0njq4k1U3U9pbyx7y3lHOD6Vs+O9VmsNOi09ZAZr0edcuOpHYfT+grz5IzJIFHek5dhqNtz03RvE1hZ+G7rUwy\/2jMxXy8fc9APasXw9ZNqN7Nq2oZMMbbiT\/E1YmnWEl\/cxWcGfmPJ9B3Nd\/DBB9pt9Ht8iKJd0hUdT7mr2M92X\/DstvcX7TXTgljlVPRfSjxp4kMjDTLDknG9gf0qDxTf2Gn6ZFa2aRqxxyp5ArndFjgu1e6kk+ZT8oz+pp7iehsWsh0u1WKZQ80x4UdzUM2grYwvdygeYfmPpU+hW8up3X2q5bdDExEQP86zvHHiHI+xW7cDhsU+YOXQ5HVr03MxUH5R1rONO68n8aaRk1m3caVi9ommy6rqkVvGrFSwLkema73\/hBY\/+eTfrR8NtNW1kuLp1yVVOD7gmvQfty\/3BQ9AtzanzzGM5qwo4FQxirAAANJDYBetNC8mplA9aQAH64oEROcRs3+ya9b0uB7bSrSCYYkSBAR6HaDXkc2BBIB\/dNe03Z2XTL\/djjH\/kMU47g9rmn4liRPh7JtUAtHESQOp3Cue0WB1tleRcAjiug8XSrb\/DmR2yQscJP\/fS1xVj4mMdmitE7KAOQtEU2mOUlGRq3StHdRTpyVcEVJrTNfQxPtwYhwPrWe+vQ3ARNjKxYYyKfqGu2VjbyPdOVVF5wMknsBTsF0y1p8cJtlLY3AcmuK+IOpGS+g08E+TbIJXX+9I3T8lx+ZrodH1XSbyA3J1BYsNtMcmAfrXD+OZY5vE148EqyxMU2upyCAiihsInPO5diSck+tXtKtftk5hxkuCB9azqv6Tc\/Z72N8nAYVMdyprQ7fRJXNrC3ILICfr3\/Wux0fyp5mF5j7PHG0jsegAGM57dc57YrjdJYASovIjmYDHoTuH6Gu18NsWv\/J3NGZomUOp6Hr0PBGAc54xTYkVPElwuk290plhN1IjfZw7AFwBkkDvVjwKDH4TtGLc7Sf1NeZ+NL+W58WyH92LeBVgtjE25DGvAIPfJz\/KrumeP7jSrGOzSziZI+MmQjNFtBO\/Nc9FdjcyfvBhRms2aNLTxBYeUAPNYqQPpXKXHxNnMYWPTbVGz993Zv04qg\/j68lvIZ\/s1lvhOVwrY\/nRcdlbY7Dx9cwaf5c0nUj5VHVz6Vxkmn3M16\/8AbxMFvaKJrhSwyWIysYH94jjHbmrA1mfWL+bxPq\/lmO0wlrAv3TL\/AAgL6D7x98VjySX3iG+iskZnZ5C5BOfnbqSf6\/Wld7DaVrjUkGoXUl5d4SCPlkUYGB0QD8v8muj0XxDaa3p7aRq1hAJJUVY5I0CLJsHy7yOVKjPzDjGc+p5vUngidrK0bdBATucf8tGHGf8AP+FaemQJZ2ryTxtJJIgMsafeZfvLCPQvjc\/ogx\/ERQxQdmdQNR0jwlZ2QhRp43Q3c4JwwPSHI9zkqp5A+Y9MVvR+MIp7C3luLQx212gZ4X52A+ntWHe+GtP1CW21OS9TULNo\/PCQgRm4mzkhh2GMKBwQB9a4e81fUb3V7i4uS8aMTiLoqDoAB7VN+iNWurOy8X+BYNZjXVPD9z5rMAvks+Q3+6e30rgGsm09jDKv78ffHp7V1On6j\/YmkvdGV\/tEnCJnufaq\/hTRpNd1Vru5y0aNuYn+JqqNtzOf8pr+HdMOlaabl0\/0uccZ\/gWnK8qW8jRZjz99u7GrWtS32naoP3Q8llCqT0FYmt6sbDTtikFn61VxWtoclqd7PNcyBpG25OBntVWK9niQokjBT1AqJ3MjFmOSTk0gGTWd2Woq2p3WleK1s9FMS\/f21yl1cPdXDSyEkk1CmQuM8UprS5lazCpFj\/dsx9KbEhkcAdKszjZCyjsKaRMnbQ9OsbwaTDJEij5hHz\/wGpv7df0Ws65ieeVdg\/gT+VN+wzf3adl1IvLoedR9asjpVaIE5q2BwKzRsxVHHFAH8qeijFKFG3FMkqzr+7YYya9o1BQL+Y9sIP8AxwV4zdqBA+OuOtey36n7RKevyp\/6AKFuN7F7xyQPhlMcZHlwZHqN61hR3mmnS40K4OwfKF9q2vHZP\/CtWTcAWEA57\/MteQP4vmh1BkjVTaxkIoCglgDyST3PNKNrajle+nY6C7ubSyaKeeRYoVbknnPsB3rI1\/V9I1WGZI7qUZAaNvKIG4djk9K1bvxbotwy+doEMuDwXjU4zUcXirRASE8N2igd\/KTj9Kq7ErHE28pgUgSQnJzzSXB81d25G916V1U\/j2FZz9k0PT0jHTdEuT+lY2v+IpNbW2d7W3txDuAWFAobOM5x9Kkq2pg09G2kH0oZf4h0NNBxS2NNzrdB1uC3mle6lEcbRqSTycrxgepwf0qHW\/GFzqK\/Z7PdbWgPQH55P94+ntXN5yuKaGptkKJ00PkavZpFIdrDlWHVG9PpVGWxjSRxIsgdTgru6H8qo2V4baUHJ2Hr7e9bWsQC60+O\/j5ZMJJg9VP3W\/p+Va3UlcxcXF2uZ8liuzd5LsRyAX4NQC2dOTAi8c5bt+dUgwA+6pqWMeZgDauep9qyubcrXU1tOjS4dbi6Ci0tiEVMY8x+oH0HU+w962btR4c0cLbxiPU9THyqDgwQHv7Fv8ateH7SwmUX0iMmkaWhJd1IMzZz37sccdgAO5rldZ1qbVdUuL6U4klbgD+EdlHsBTtZXE3zPlXQgjEVteeW7LKBx6Lntk+gPWtS4keaCdIpWL+Szs\/8TBsFmPoXIz7KFHeqWj6d53m3lxxb26mRye57D8TVZJJZmbazFp2AbHVuelK3cG+x03gSDUL\/AFeLTLBgYp8vPvGViA6tj17D1NaWoaQtn4mex1Q8oC4K9GXqG+n9a3vh1ajwZo+q6prAjjhBGHU5Z8D7o98nGPXNcNrmu3Osahc30\/E94cFByI4x91B\/nrmpcLs0jVcVrsQyRTa1qDi2VjBGcBuyr6mvSdCWytNHjjs3X90PmOeS1cBDqMujaNJbQhVlmBLt3XPf8uKi8MfappnkDMtuvABPFNu2hMVzO\/c9NlvrbV7N43wZRxg+teTeKLa6t7wpKCYweDW0+sNYagZEbIzz71vhLXxJZbmA3Y\/Knug6nlFTRp3rZ1nQl0yY4PB7VmDApJClIBxRgsQByT0orrPh5oSavr+6aPekCeZg9M5AGf1qiCncaNJpmjWVxLGUM7Py3fgVkTnMb\/SvU\/irCsOmaWqgALI44+gryuf\/AFb\/AENXF3iZNWmep2bZkYj\/AJ5x\/wAqubjWXayMJBtHWKPP5Vd8xqhxubxqqKtY8pjBBKsMEHBqwAdufSiihEsljB496cPu0UUyStdcwP8ASvWL7xDpaarLYvO\/2jcE2iI4BCDPP4UUUluUth3i3VLXxB4cg07TJ\/38bozmVGVcKPXn+VebN4FvC7M19ZJubIHzn\/2Wiii2hXW5ai8C3kr\/APIWtQfZH\/wq4nwyu5shtXh564ibn9aKKQyT\/hU82cNqyfhbn\/4qnn4U5Ch9VYgekAH\/ALNRRQA9PhZbLw+o3BHfCKKe3ws04qVW+uxIR8pIUgH3GKKKQXZlXnww1CzhaWKeC4ReThijfrx+tct9jiDEFTkf7VFFaRSaMpyaejEa3hQZ8v8ANjViPU5rWxlgi2+VIpVlZd3B+tFFU0lsEW5bmeLt+0cI\/wC2S1Kt3cgEBkUH+6ij+lFFZI2loOnv7x7cWr3MzRk58sudgP06Uy0szdXBjUj5cDnuTRRRuxbRN7xQ66VaQaLAMYAlnYfxHsKpeHYR9t3sASFYqCM46c\/rRRV\/aM3pAm1bWZ7+U2ayOLKGTcsZPVsYz\/hVJWKyb26k0UUu7E90js9T8Ix3WiwNbSbZHI8xm7isvXJxoWmrZ2g2uwxn0FFFYN3Z3KKjG6OWjuHm4c5zXY+Hy1jaNJkkAdKKK0MOpg69qT312d3QVk0UVRmyS3jM86J\/eYL+Zr1X4fGPTbvUU2\/NtjGcduaKKf2WZt+8g+KFz9osrAY+7Ix\/SvMJ\/wDVv9DRRTj8IpP94ek2bFYS+OfJj\/lUn2tvQUUU7Cbsz\/\/Z)","e739de48":"# Feature Engineering","073ffbc0":"**Understand data for Product Code TM195**","63dfc952":"***Correlation between Numerical columns of datase***","2f46f290":"# Data Visualisation","f18f9c36":"**Observation**\n\n* Age and Income has some in significant correlation\n* Education and Income has very little correlation\n* There is some corelation between Usage and Income\n* Fitness and miles are corelated\n* TM798 model is correlated to Education, Usage,Fitness, Income and Miles.\n* Miles and usage are positively correlated","4bb687ab":"**ABOUT THE DATASET**\n\nThe market research team at AdRight is assigned the task to identify the profile of the typical customer for each treadmill product offered by CardioGood Fitness.\n\nThe team decides to investigate whether there are differences across the product lines with respect to customer characteristics.\n\nThe team decides to collect data on individuals who purchased a treadmill at a CardioGoodFitness retail store during the prior three months. The data are stored in the CardioGoodFitness.csv file.\n\n\n**cardiogoodfitness.csv:** The csv contains data related to customers who have purchased different model from Cardio Good Fitness :\n\n* Product - the model no. of the treadmill\n* Age - in no of years, of the customer\n* Gender - of the customer\n* Education - in no. of years, of the customer\n* Marital Status - of the customer\n* Usage - Avg. # times the customer wants to use the treadmill every week\n* Fitness - Self rated fitness score of the customer (5 - very fit, 1 - very unfit)\n* Income - of the customer\n* Miles- expected to run\n \n","691300ed":"**Pointplot showing sales based on Education & Income**","2dee4005":"Based on the above results we could say that the dataset has better accuracy for Decision Tree.","2154b78d":"**Analysis Based on Fitness level**","0f915bbc":"**Analysis of Miles based on Income**","40df0fb3":"**Analysis of Usage based on Gender**","b50936a9":"**Analysis of Income based on Gender**","285c4fd9":"**Observation:**\n\n* Age of customer using treadmill is between range 18 - 50 . Average age is 28.78 and median is 26.\n* Maximum income of treadmill user is 100K , Average income approx. 54K ,while median is is approx. 51K.\n* Expected Treadmill usage is atleast Once a week , maximum is 7 times a week and on Average 3 times a week\n* Customer education is between 12 -21 years, with average and median of 16 years and maximum of 21 years\n* Customer expects to runs on an average of 103.19 miles per week, median 94 miles per week.\n* Average self rated fitness is 3.","5ee9c2bd":"**Average miles per Model**","4c576379":"**K=Nearest-Neighbor**","32787cb3":"# Data Exploring","532cf407":"**Analysis Based on Age**","ea70571c":"**Observation**\n\n* TM195 model was equally bought my Male and Female\n* Compared to females, male bought TM498 model .\n* TM798 model is popular in Males than in female.","0a600878":"# Data Exploration"}}