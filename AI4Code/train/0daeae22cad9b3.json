{"cell_type":{"30f196e5":"code","537f08b8":"code","3acd1bb5":"code","89a69f49":"code","b09c56b5":"code","dbe0dfd0":"code","87c081ef":"code","c54f63b6":"code","1563d856":"code","c0280727":"code","bf8bbb9f":"code","2f00882f":"code","9ef26ce3":"code","e8993484":"code","7e2c7777":"code","502da8af":"code","c1632024":"code","efa76db6":"code","43af8f59":"code","9b002f64":"code","a159069b":"code","bf0aa6d6":"code","d92e53b5":"code","3fd449e0":"code","cfd67a36":"code","3abc0254":"code","e852e148":"code","f022ae22":"code","05d4c393":"code","ba11fbfd":"code","f3bd0e52":"code","e3989d61":"code","0ec8c814":"code","76375570":"code","8deb5ae2":"code","68056640":"code","2179bd86":"code","b69c5a04":"markdown","0665841e":"markdown","1e7f5d19":"markdown","8887629e":"markdown","56da4632":"markdown","397e3f95":"markdown","d1816aa7":"markdown","5faa8a02":"markdown","4084a67b":"markdown","92c8090a":"markdown","75802a95":"markdown","f455fd86":"markdown","e2c20dd3":"markdown","1f14e7cc":"markdown","56a73972":"markdown","3b97258e":"markdown","8479eb4b":"markdown","1d253e59":"markdown","8f5004c8":"markdown","6379fde3":"markdown","cc9432b6":"markdown","44d75be8":"markdown","690e929a":"markdown","5dec8095":"markdown","e9d061ca":"markdown","179a1477":"markdown","8d7e2566":"markdown","8a98a784":"markdown","e03915ae":"markdown","3fab92e2":"markdown","e8724a90":"markdown"},"source":{"30f196e5":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.ticker as ticker\nfrom datetime import datetime\nimport pytz\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","537f08b8":"train_df = pd.read_csv('..\/input\/UjiIndoorLoc\/TrainingData.csv')\nvalidate_df = pd.read_csv('..\/input\/UjiIndoorLoc\/ValidationData.csv')","3acd1bb5":"train_df.columns","89a69f49":"diff1 = set(train_df.columns) - set(validate_df.columns)\ndiff2 = set(validate_df.columns) - set(train_df.columns)\nprint(diff1, diff2)","b09c56b5":"df = pd.concat([train_df, validate_df])","dbe0dfd0":"print(f\"there are {df['USERID'].nunique()} different users.\")\nprint(f\"list of user ids: {df['USERID'].unique()}\\n\")\nprint(f\"entries per user:\\n{df['USERID'].value_counts()}\")","87c081ef":"print(f\"there are {df['PHONEID'].nunique()} different phones used.\")\nprint(f\"list of user ids: {df['PHONEID'].unique()}\\n\")\nprint(f\"entries per phone:\\n{df['PHONEID'].value_counts()}\")","c54f63b6":"df.groupby('USERID')['PHONEID'].unique()","1563d856":"df.groupby('PHONEID')['USERID'].unique()","c0280727":"wap_df = train_df[train_df.columns[:520]]\nno_of_waps = wap_df[wap_df != 100].count(axis=1)\n\nplt.figure(figsize=(10,5))\nsns.distplot(no_of_waps)","bf8bbb9f":"sns.countplot(train_df['RELATIVEPOSITION'])","2f00882f":"sns.countplot(df['BUILDINGID'])","9ef26ce3":"print(f\"no of floors in each building:\\n{df.groupby('BUILDINGID')['FLOOR'].unique()}\")","e8993484":"sns.countplot(train_df['FLOOR'])","7e2c7777":"temp1 = df[df['BUILDINGID']==0].groupby('FLOOR')['SPACEID'].nunique()\ntemp2 = df[df['BUILDINGID']==1].groupby('FLOOR')['SPACEID'].nunique()\ntemp3 = df[df['BUILDINGID']==2].groupby('FLOOR')['SPACEID'].nunique()\n\nprint(f\"floorwise distribution of spaces in building-0:\\n{temp1}\\n\")\nprint(f\"floorwise distribution of spaces in building-1:\\n{temp2}\\n\")\nprint(f\"floorwise distribution of spaces in building-2:\\n{temp3}\\n\")","502da8af":"plt.figure(figsize=(12,5))\ng = sns.lineplot(data=df.groupby('USERID')['SPACEID'].nunique())\ng.set_xticks(np.arange(19))\nprint()","c1632024":"df.groupby('SPACEID')['USERID'].unique()","efa76db6":"plt.figure(figsize=(20,5))\nax = sns.barplot(data=df, x='SPACEID', y='USERID')\n# g.set_xticklabels(list(range(0,254,10)))\nax.xaxis.set_major_locator(ticker.MultipleLocator(10))\nax.xaxis.set_major_formatter(ticker.ScalarFormatter())\nplt.show()","43af8f59":"train_x = train_df.drop(columns=[\"LONGITUDE\", \"LATITUDE\", \"FLOOR\", \"BUILDINGID\", \"SPACEID\", \"RELATIVEPOSITION\", \"USERID\", \"PHONEID\", \"TIMESTAMP\"])\ntrain_y = train_df[[\"LONGITUDE\", \"LATITUDE\"]]\n\ntest_x = validate_df.drop(columns=[\"LONGITUDE\", \"LATITUDE\", \"FLOOR\", \"BUILDINGID\", \"SPACEID\", \"RELATIVEPOSITION\", \"USERID\", \"PHONEID\", \"TIMESTAMP\"])\ntest_y = validate_df[[\"LONGITUDE\", \"LATITUDE\"]]\n","9b002f64":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation=tf.nn.relu),\n#     tf.keras.layers.Dense(512, activation=tf.nn.relu),\n    tf.keras.layers.Dense(2, activation = 'linear')\n])\nmodel.compile(\n    optimizer='adam',\n    loss='mean_squared_error',\n    metrics=[tf.keras.metrics.RootMeanSquaredError(), tf.keras.metrics.CosineSimilarity(axis=1)]\n)","a159069b":"val_data = (test_x, test_y)","bf0aa6d6":"epochs = 5\nresult = model.fit(\n    train_x.values.astype('float'),\n    train_y.values.astype('float'),\n    validation_data=val_data,\n    epochs=epochs\n)","d92e53b5":"x_vals = range(1, epochs+1)\nplt.plot(x_vals, result.history['val_root_mean_squared_error'])\nplt.legend(\"RMSE\")\nplt.show()","3fd449e0":"df_sorted = df.sort_values(by=['TIMESTAMP'])","cfd67a36":"temp = df_sorted.groupby('USERID')['BUILDINGID'].unique()\nprint(f\"list of buildings visited by each user:\\n{temp}\")","3abc0254":"user11_building_movement = df_sorted[df_sorted['USERID']==11]['BUILDINGID']\n\nplt.figure(figsize=(15,5))\nax = sns.lineplot(data=user11_building_movement.to_numpy())\nax.set_title('USER 11 BUILDING MOVEMENT')\nax.set_xlabel('time')\nax.set_ylabel('building_id')\nax.set_yticks([0,1,2])\nplt.show()","e852e148":"user9_building_movement = df_sorted[df_sorted['USERID']==9]['BUILDINGID']\n\nplt.figure(figsize=(15,5))\nax = sns.lineplot(data=user9_building_movement.to_numpy())\nax.set_yticks([1,2])\nax.set_title('USER 9 BUILDINGS MOVEMENT')\nax.set_xlabel('time')\nax.set_ylabel('building_id')\nplt.show()","f022ae22":"user14_building_movement = df_sorted[df_sorted['USERID']==14]['BUILDINGID']\n\nplt.figure(figsize=(15,5))\nax = sns.lineplot(data=user14_building_movement.to_numpy())\nax.set_yticks([1,2])\nax.set_title('USER 14 BUILDINGS MOVEMENT')\nax.set_xlabel('time')\nax.set_ylabel('building_id')\nplt.show()","05d4c393":"ulist = [3, 5, 6, 12, 15]","ba11fbfd":"# confirmation\nsubdf = df_sorted[df_sorted['USERID'].isin(ulist)]\nsubdf.groupby('USERID')['BUILDINGID'].unique()","f3bd0e52":"# to check the portion of sub-dataframe selected\np = round(len(subdf)\/len(df)*100, 2)\nprint(f\"{p}% of entries consist of users who have visited only building-2\")","e3989d61":"floors_visited = subdf.groupby('USERID')['FLOOR'].unique()\nprint(f\"floors visited by each user:\\n{floors_visited}\")","0ec8c814":"plt.figure(figsize=(10,10))\nax1 = plt.subplot(211)\nax2 = plt.subplot(212)\n\nsns.lineplot(data=subdf[subdf['USERID']==5]['FLOOR'].to_numpy(), ax=ax1)\nax1.set_yticks([2,3,4])\nax1.set_title('USER 5 FLOORS MOVEMENT')\nax1.set_xlabel('time')\nax1.set_ylabel('floor')\n\nsns.lineplot(data=subdf[subdf['USERID']==6]['FLOOR'].to_numpy(), ax=ax2)\nax2.set_yticks([2,3,4])\nax2.set_title('USER 6 FLOORS MOVEMENT')\nax2.set_xlabel('time')\nax2.set_ylabel('floor')\n\nplt.show()","76375570":"# data of users who's movement is restricted in building 2 and floor 1.\nmdf = df[df['USERID'].isin([12,15])]","8deb5ae2":"# to check the portion of mini-dataframe selected\n\np = round(len(mdf)\/len(df)*100, 2)\nprint(f\"{p}% of entries consist of users who have visited only building-2 floor-1\")","68056640":"# to get the details of spaceids inside building-2 floor-1\n\nspaceid_list = df[(df['BUILDINGID']==2) & (df['FLOOR']==1)]['SPACEID'].unique()\n\nprint(f\"there are total of {len(spaceid_list)} spaces in building-2 floor-1.\\n\")\nprint(f\"list of spaceids:\\n{spaceid_list}\")","2179bd86":"plt.figure(figsize=(20,10))\nax1 = plt.subplot(211)\nax2 = plt.subplot(212)\n\nsns.lineplot(data=mdf[mdf['USERID']==12]['SPACEID'].to_numpy(), ax=ax1)\nax1.set_title('USER 12 SPACES MOVEMENT')\nax1.set_xlabel('time')\nax1.set_ylabel('spaces')\n\nsns.lineplot(data=mdf[mdf['USERID']==15]['SPACEID'].to_numpy(), ax=ax2)\nax2.set_title('USER 15 SPACES MOVEMENT')\nax2.set_xlabel('time')\nax2.set_ylabel('spaces')\n\nplt.show()","b69c5a04":"* majority of entries are taken at outside the frontdoor of any rooom.","0665841e":"* other than one user all the users have used single phone.","1e7f5d19":"### let's look at distribution of entries by floors.","8887629e":"## Future work: Crowd behaviour analysis.\n\n* feature engineering\n    * apply binning on timestamps and extract dates and time-hours of specific entry\n    * divide data datewise and hourwise.\n* time series analysis\n    * determine crowd density datewise and hourwise at different abstraction levels.(building, floor, spaces)\n    * for example: changes in density of users on date T+1 from date T at different buildings.","56da4632":"### Relative position analysis\n\nAttribute 526 (RelativePosition): Relative position with respect to the Space (1 - Inside, 2 - Outside in Front of the door). Categorical integer values.","397e3f95":"## Individual trajectory analysis","d1816aa7":"* here, we can notice that user-11 has visited all 3 buildings, so we can map it's movement through all buildings.","5faa8a02":"users 3, 5, 6, 12, 15 have only visited building 2, so we can analyse their floor movement without any complexity.","4084a67b":"## Prediction of longitude and latitude using Neural network regression method.","92c8090a":"* turns out building-2 is largest amongst all and have 5 floors, while others have 4 floors.","75802a95":"### Now let's analyse WAPs.","f455fd86":"* after the 2nd epoch decrement in rmse is relatively low.","e2c20dd3":"* we can say that it's relatively easy to train a model on this data from the fact that cosine similarity reached 1.0 at the 2nd epoch itself.","1f14e7cc":"### we can clearly see some pre-defined pattern in their movement","56a73972":"* building-2 has relatively more entries, let's find out why.","3b97258e":"* We can also notice that movement of users 12, 15 is restricted to floor-1.\n* Next we will compare spaces movement within builing-2 floor-1 o these users.","8479eb4b":"### check for difference in columns in train and validate dataset","1d253e59":"(SpaceID): Internal ID number to identify the Space (office, corridor, classroom) where the capture was taken. Categorical integer values.","8f5004c8":"* two phones are shared among users, other than that, each phone is used by single user.","6379fde3":"types of columns in train dataset","cc9432b6":"* distribution of number of unique visits on every space-id.","44d75be8":"### Buildings analysis","690e929a":"* empty sets means that train and validate dataset have same features.","5dec8095":"doing the same for more users.","e9d061ca":"### Q. which phones are used by which users?","179a1477":"* for majority of the entries 10 to 20 WAPs are detected out of 520.","8d7e2566":"## now let's check how the data is distributed","8a98a784":"* All the floors look equally distributed. (floor-4 seems to have low count because it corresponds to only one building)","e03915ae":"Attributes 001 to 520 (WAP001-WAP520): Intensity value for WAP001.\n\nNegative integer values from -104 to 0 and +100. Positive value 100 used if WAP001 was not detected.\n\n(in -104 to 0) higher the better","3fab92e2":"Before we can analyse the data for trajectory analysis, we need to sort the data according to timestamps.","e8724a90":"* we can see that user 5 and 6 have visited 2 floors, so we can analyse their floor trajectory."}}