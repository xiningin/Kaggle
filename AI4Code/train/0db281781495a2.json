{"cell_type":{"2b1060c5":"code","5d5638ea":"code","26bee967":"code","2db7f5b4":"code","42615a51":"code","25328a2e":"code","ac7b3ba8":"code","7ab925a3":"code","76673968":"code","e627e4e4":"code","1fba3c58":"code","504b8ed3":"code","02ac4985":"code","9cf1689e":"code","37d46c2b":"code","45f92709":"code","a387b013":"code","92774e7f":"code","74bf9a8f":"code","12bc6a8c":"code","36f50750":"code","ab0b4adc":"code","1bb0383d":"code","59c644df":"code","7686dfc9":"code","0da7d418":"code","a048817a":"code","8e7c8c5d":"code","58cb007b":"code","511bd7ab":"code","af5c1e4c":"code","9faabf99":"code","cc547605":"code","6cd1c1dc":"code","04383222":"code","fa69d573":"code","ddd20e66":"code","313dcd2c":"code","205cb43f":"code","9773fc6c":"code","05a92a36":"code","76822243":"code","8317094f":"code","bd50bb9b":"markdown","cde39677":"markdown","9f3f4809":"markdown","840e6b1f":"markdown","5ae6991c":"markdown","1a6670e3":"markdown","77f0a7a5":"markdown","976b796c":"markdown"},"source":{"2b1060c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d5638ea":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport warnings\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.pipeline import make_pipeline\nfrom pylab import rcParams\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import f1_score, roc_auc_score, roc_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import hamming_loss\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import plot_precision_recall_curve\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import classification_report\nfrom sklearn import metrics\nfrom sklearn.metrics import jaccard_score\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import matthews_corrcoef\nfrom sklearn.metrics import zero_one_loss\nfrom sklearn.metrics import brier_score_loss\nfrom sklearn.metrics import balanced_accuracy_score","26bee967":"df = pd.read_csv(\"\/kaggle\/input\/richters-predictor-modeling-earthquake-damage\/train_values.csv\")","2db7f5b4":"df.head()","42615a51":"df.columns","25328a2e":"df.shape","ac7b3ba8":"df2 = pd.read_csv(\"\/kaggle\/input\/richters-predictor-modeling-earthquake-damage\/train_labels.csv\")","7ab925a3":"df2.head()","76673968":"df2.shape","e627e4e4":"df['damage_grade'] = df2['damage_grade']","1fba3c58":"plt.figure(figsize=(10,10))\ncor=df.corr()[\"damage_grade\"]\ncor=pd.DataFrame(cor)\nsns.heatmap(cor,annot=True,cmap=\"viridis\")","504b8ed3":"# exploring the statstical fearures of train dataset.\ndf.describe().T.style.background_gradient(cmap='Set2',low =0.4,high=0.1,axis=0)","02ac4985":"df.describe(include=\"object\").T.style.background_gradient(cmap='Set2',axis=0)\n","9cf1689e":"# checking the types of varibles in the dataset(int,float,object)\ndtypes=pd.DataFrame(df.dtypes,columns=[\"Data Type\"])\ndtypes[\"Unique Values\"]=df.nunique()\ndtypes[\"Null Values\"]=df.isnull().sum()\ndtypes[\"% null Values\"]=df.isnull().sum()\/len(df)\ndtypes.style.background_gradient(cmap='Set2',axis=0)","37d46c2b":"y = df2['damage_grade']","45f92709":"y.unique()","a387b013":"y.value_counts()","92774e7f":"df.isna().any()","74bf9a8f":"df.info()","12bc6a8c":"df[\"has_secondary_use_hotel\"].unique()\ndf[\"has_secondary_use_other\"].unique()\n","36f50750":"col = df.columns\ncol = df[['has_superstructure_adobe_mud',\n       'has_superstructure_mud_mortar_stone', 'has_superstructure_stone_flag',\n       'has_superstructure_cement_mortar_stone',\n       'has_superstructure_mud_mortar_brick',\n       'has_superstructure_cement_mortar_brick', 'has_superstructure_timber',\n       'has_superstructure_bamboo', 'has_superstructure_rc_non_engineered',\n       'has_superstructure_rc_engineered', 'has_superstructure_other',\n       'legal_ownership_status', 'has_secondary_use',\n       'has_secondary_use_agriculture', 'has_secondary_use_hotel',\n       'has_secondary_use_rental', 'has_secondary_use_institution',\n       'has_secondary_use_school', 'has_secondary_use_industry',\n       'has_secondary_use_health_post', 'has_secondary_use_gov_office',\n       'has_secondary_use_use_police', 'has_secondary_use_other']]","ab0b4adc":"for i in col:\n    print (df[i].unique())","1bb0383d":"df[['has_superstructure_adobe_mud',\n       'has_superstructure_mud_mortar_stone', 'has_superstructure_stone_flag',\n       'has_superstructure_cement_mortar_stone',\n       'has_superstructure_mud_mortar_brick',\n       'has_superstructure_cement_mortar_brick', 'has_superstructure_timber',\n       'has_superstructure_bamboo', 'has_superstructure_rc_non_engineered',\n       'has_superstructure_rc_engineered', 'has_superstructure_other',\n       'legal_ownership_status', 'has_secondary_use',\n       'has_secondary_use_agriculture', 'has_secondary_use_hotel',\n       'has_secondary_use_rental', 'has_secondary_use_institution',\n       'has_secondary_use_school', 'has_secondary_use_industry',\n       'has_secondary_use_health_post', 'has_secondary_use_gov_office',\n       'has_secondary_use_use_police', 'has_secondary_use_other']] = df[['has_superstructure_adobe_mud',\n       'has_superstructure_mud_mortar_stone', 'has_superstructure_stone_flag',\n       'has_superstructure_cement_mortar_stone',\n       'has_superstructure_mud_mortar_brick',\n       'has_superstructure_cement_mortar_brick', 'has_superstructure_timber',\n       'has_superstructure_bamboo', 'has_superstructure_rc_non_engineered',\n       'has_superstructure_rc_engineered', 'has_superstructure_other',\n       'legal_ownership_status', 'has_secondary_use',\n       'has_secondary_use_agriculture', 'has_secondary_use_hotel',\n       'has_secondary_use_rental', 'has_secondary_use_institution',\n       'has_secondary_use_school', 'has_secondary_use_industry',\n       'has_secondary_use_health_post', 'has_secondary_use_gov_office',\n       'has_secondary_use_use_police', 'has_secondary_use_other']].astype('object')","59c644df":"df.info()","7686dfc9":"l0 = df['building_id'].unique()\nl1 = df['geo_level_1_id'].unique()\nl2 = df['geo_level_2_id'].unique()\nl3 = df['geo_level_3_id'].unique()","0da7d418":"len(l1)\nlen(l2)\nlen(l3)\nlen(l0)#all unique","a048817a":"df1 = df[['count_floors_pre_eq', 'age', 'area_percentage', 'height_percentage',\n       'land_surface_condition', 'foundation_type', 'roof_type',\n       'ground_floor_type', 'other_floor_type', 'position',\n       'plan_configuration', 'has_superstructure_adobe_mud',\n       'has_superstructure_mud_mortar_stone', 'has_superstructure_stone_flag',\n       'has_superstructure_cement_mortar_stone',\n       'has_superstructure_mud_mortar_brick',\n       'has_superstructure_cement_mortar_brick', 'has_superstructure_timber',\n       'has_superstructure_bamboo', 'has_superstructure_rc_non_engineered',\n       'has_superstructure_rc_engineered', 'has_superstructure_other',\n       'legal_ownership_status', 'count_families', 'has_secondary_use',\n       'has_secondary_use_agriculture', 'has_secondary_use_hotel',\n       'has_secondary_use_rental', 'has_secondary_use_institution',\n       'has_secondary_use_school', 'has_secondary_use_industry',\n       'has_secondary_use_health_post', 'has_secondary_use_gov_office',\n       'has_secondary_use_use_police', 'has_secondary_use_other']]","8e7c8c5d":"df1.info()","58cb007b":"X = pd.DataFrame(df1)","511bd7ab":"X = pd.get_dummies(X,drop_first=True)","af5c1e4c":"def generate_model_report(y_actual, y_predicted):\n    print(\"Accuracy = \" , accuracy_score(y_actual, y_predicted))\n    print(\"Precision = \" ,precision_score(y_actual, y_predicted,average=\"micro\"))\n    print(\"Recall = \" ,recall_score(y_actual, y_predicted,average=\"micro\"))\n    print(\"F1 Score = \" ,f1_score(y_actual, y_predicted,average=\"micro\"))\n    print(\"Cohen Kappa score= \",cohen_kappa_score(y_actual,y_predicted))\n    print(\"Hamming Loss = \",hamming_loss(y_actual,y_predicted))\n    print(\"Jaccard Score = \",jaccard_score(y_actual, y_predicted,average=\"micro\"))\n#     print(\"Log Loss = \",log_loss(y_actual, y_predicted))\n    print(\"Matthews correlation coefficient = \", matthews_corrcoef(y_actual, y_predicted))\n    print(\"Zero one loss = \",zero_one_loss(y_actual, y_predicted))\n#     print(\"brier_score_loss  = \",brier_score_loss(y_actual, y_predicted))\n    print(\"Balanced accuracy = \",balanced_accuracy_score(y_actual, y_predicted))","9faabf99":"def generate_auc_roc_curve(clf, X_test):\n    y_pred_proba = clf.predict_proba(X_test)[:, 1]\n    fpr, tpr, thresholds = roc_curve(y_test,  y_pred_proba)\n    auc = roc_auc_score(y_test, y_pred_proba)\n    plt.plot(fpr,tpr,label=\"AUC ROC Curve with Area Under the curve =\"+str(auc))\n    plt.legend(loc=4)\n    plt.show()\n    pass","cc547605":"from sklearn import preprocessing\n# from sklearn.preprocessing import Normalizer\nX = preprocessing.normalize(X, norm='l2')","6cd1c1dc":"X.shape","04383222":"y = y.astype('int')\n","fa69d573":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","ddd20e66":"def generate_auc_roc_curve(clf, X_test):\n    y_pred_proba = clf.predict_proba(X_test)[:, 1]\n    fpr, tpr, thresholds = roc_curve(y_test,  y_pred_proba)\n    auc = roc_auc_score(y_test, y_pred_proba,multi_class = \"ovr\",average = \"macro\")\n    plt.plot(fpr,tpr,label=\"AUC ROC Curve with Area Under the curve =\"+str(auc))\n    plt.legend(loc=4)\n    plt.show()\n    pass\n\n","313dcd2c":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(random_state = 0, multi_class = \"multinomial\", solver=\"newton-cg\")\nlr.get_params()","205cb43f":"lr.fit(X_train,y_train)","9773fc6c":"y_lr = lr.predict(X_test)\ny_lr = pd.DataFrame(y_lr)\ny_lr.value_counts()","05a92a36":"generate_model_report(y_test, y_lr)","76822243":"y_prob = lr.predict_proba(X_test)\ny_prob","8317094f":"macro_roc_auc_ovo = roc_auc_score(y_test, y_prob, multi_class=\"ovo\",\n                                  average=\"macro\")\nweighted_roc_auc_ovo = roc_auc_score(y_test, y_prob, multi_class=\"ovo\",\n                                     average=\"weighted\")\nmacro_roc_auc_ovr = roc_auc_score(y_test, y_prob, multi_class=\"ovr\",\n                                  average=\"macro\")\nweighted_roc_auc_ovr = roc_auc_score(y_test, y_prob, multi_class=\"ovr\",\n                                     average=\"weighted\")\nprint(\"One-vs-One ROC AUC scores:\\n{:.6f} (macro),\\n{:.6f} \"\n      \"(weighted by prevalence)\"\n      .format(macro_roc_auc_ovo, weighted_roc_auc_ovo))\nprint(\"One-vs-Rest ROC AUC scores:\\n{:.6f} (macro),\\n{:.6f} \"\n      \"(weighted by prevalence)\"\n      .format(macro_roc_auc_ovr, weighted_roc_auc_ovr))","bd50bb9b":"> # Normalization","cde39677":"> # LOGISTIC REGRESSION","9f3f4809":"> # GENERATE MODEL REPORT","840e6b1f":"> #  Description\n* > geo_level_1_id, geo_level_2_id, geo_level_3_id (type: int): geographic region in which building exists, from largest (level 1) to most specific sub-region (level 3). Possible values: level 1: 0-30, level 2: 0-1427, level 3: 0-12567.\n* > count_floors_pre_eq (type: int): number of floors in the building before the earthquake.\n* > age (type: int): age of the building in years.\n* > area_percentage (type: int): normalized area of the building footprint.\n* > height_percentage (type: int): normalized height of the building footprint.\n* > land_surface_condition (type: categorical): surface condition of the land where the building was built. Possible values: n, o, t.\n* > foundation_type (type: categorical): type of foundation used while building. Possible values: h, i, r, u, w.\n* > roof_type (type: categorical): type of roof used while building. Possible values: n, q, x.\n* > ground_floor_type (type: categorical): type of the ground floor. Possible values: f, m, v, x, z.\n* > other_floor_type (type: categorical): type of constructions used in higher than the ground floors (except of roof). Possible values: j, q, s, x.\n* > position (type: categorical): position of the building. Possible values: j, o, s, t.\n* > plan_configuration (type: categorical): building plan configuration. Possible values: a, c, d, f, m, n, o, q, s, u.\n* > has_superstructure_adobe_mud (type: binary): flag variable that indicates if the superstructure was made of Adobe\/Mud.\n* > has_superstructure_mud_mortar_stone (type: binary): flag variable that indicates if the superstructure was made of Mud Mortar - Stone.\n*  > has_superstructure_stone_flag (type: binary): flag variable that indicates if the superstructure was made of Stone.\n*   > has_superstructure_cement_mortar_stone (type: binary): flag variable that indicates if the superstructure was made of Cement Mortar - Stone.\n*   > has_superstructure_mud_mortar_brick (type: binary): flag variable that indicates if the superstructure was made of Mud Mortar - Brick.\n*   > has_superstructure_cement_mortar_brick (type: binary): flag variable that indicates if the superstructure was made of Cement Mortar - Brick.\n*   > has_superstructure_timber (type: binary): flag variable that indicates if the superstructure was made of Timber.\n*   > has_superstructure_bamboo (type: binary): flag variable that indicates if the superstructure was made of Bamboo.\n*   > has_superstructure_rc_non_engineered (type: binary): flag variable that indicates if the superstructure was made of non-engineered reinforced concrete.\n*   > has_superstructure_rc_engineered (type: binary): flag variable that indicates if the superstructure was made of engineered reinforced concrete.\n*   > has_superstructure_other (type: binary): flag variable that indicates if the superstructure was made of any other material.\n*   > legal_ownership_status (type: categorical): legal ownership status of the land where building was built. Possible values: a, r, v, w.\n*   > count_families (type: int): number of families that live in the building.\n*   > has_secondary_use (type: binary): flag variable that indicates if the building was used for any secondary purpose.\n*   > has_secondary_use_agriculture (type: binary): flag variable that indicates if the building was used for agricultural purposes.\n*   > has_secondary_use_hotel (type: binary): flag variable that indicates if the building was used as a hotel.\n*   > has_secondary_use_rental (type: binary): flag variable that indicates if the building was used for rental purposes.\n*   > has_secondary_use_institution (type: binary): flag variable that indicates if the building was used as a location of any institution.\n*   > has_secondary_use_school (type: binary): flag variable that indicates if the building was used as a school.\n*   > has_secondary_use_industry (type: binary): flag variable that indicates if the building was used for industrial purposes.\n*   > has_secondary_use_health_post (type: binary): flag variable that indicates if the building was used as a health post.\n*   > has_secondary_use_gov_office (type: binary): flag variable that indicates if the building was used fas a government office.\n*   > has_secondary_use_use_police (type: binary): flag variable that indicates if the building was used as a police station.\n*   > has_secondary_use_other (type: binary): flag variable that indicates if the building was secondarily used for other purposes.","5ae6991c":"> We're trying to predict the ordinal variable damage_grade, which represents a level of damage to the building that was hit by the earthquake. There are 3 grades of the damage\n> \n1. > 1: represents low damage\n2. > 2: represents a medium amount of damage\n3. > 3:\nrepresents almost complete destruction","1a6670e3":"> # Generate auc roc curve","77f0a7a5":"> # Train test split","976b796c":"> # Generate auc_roc_curve"}}