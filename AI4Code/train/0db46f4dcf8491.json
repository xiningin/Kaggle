{"cell_type":{"a9278bef":"code","54c6a96e":"code","c377e707":"code","afd6099c":"code","42dddca8":"code","40976a7b":"code","297512db":"code","2fb21f24":"code","03148ab8":"code","f437a2bd":"code","1896f359":"code","131f118a":"code","190115e7":"code","95609938":"code","0f56395b":"code","9cd1ec34":"code","0ffdd3f7":"code","4bfce77f":"code","2ec2b566":"code","61d3faac":"code","0a66d65a":"code","383c3cb4":"code","4fa2c7d2":"code","d44d3f86":"code","1b144c16":"code","f0dec471":"code","c973af72":"code","bdc39b69":"code","3f99182d":"code","4f5865f6":"code","6684a366":"code","db5894a4":"code","400ef213":"code","f1b1e29c":"code","46b35395":"code","42ffc66d":"code","20274560":"code","9ceff542":"code","88c155a2":"code","799646fd":"code","6f431e59":"code","65e37e5e":"code","c39f5315":"code","becb20a4":"code","9e6c8c05":"code","d85c1d07":"code","0cbcbf33":"code","203f349f":"code","135f26fd":"code","2d65f4f1":"code","9e3c98ba":"code","d8579df9":"code","3fa340ee":"code","3d584640":"code","9f3b29f0":"code","f3bb51a9":"code","5d8053dc":"code","eea0e5e4":"code","4c484102":"code","a5482afd":"code","49f855fe":"code","7d375681":"code","c15b7d65":"code","66577905":"code","d6a2fef4":"code","b5fef3e0":"code","aa117d13":"code","b834d005":"code","c500d3f9":"code","a66a042b":"code","c6a550ca":"code","aede5196":"code","438cc320":"code","d7dd1e39":"code","5806cc12":"code","2fd5fec1":"code","4d5ad0e4":"code","08bd4286":"code","77f0e2ca":"code","85bfc5df":"code","2319e5da":"code","62df5b0d":"code","12653729":"code","3513160b":"code","e35f5866":"code","2d2d28a1":"code","e2c3565f":"code","79df0537":"code","82443cad":"code","7a3e900b":"code","b8c95fa2":"code","ed8809ea":"code","bff6a9f7":"code","d1fae823":"code","02be4dd3":"code","4c63d3ad":"code","8e06932e":"code","98e1758d":"code","20cc4723":"code","11f4b851":"code","963c5291":"code","64072ccc":"code","49a809a3":"code","4bb2d44b":"code","4498bc98":"code","66d0703e":"code","2128d810":"code","48012aae":"code","6206b31d":"code","0c13e54e":"code","a55b2f37":"code","bc42246b":"code","8a98e578":"code","6d68ee08":"code","5a1b3243":"code","a8e66106":"code","154a5332":"code","1a325a4e":"code","89da1e84":"code","6d36bffc":"code","f19061f5":"code","739ef371":"code","05d73817":"code","4c246165":"code","1fb3d2b0":"code","f690ceb5":"code","6dd2803d":"code","5885d26f":"code","3fd82751":"code","068500e9":"code","d991b410":"code","85d669d2":"code","effef337":"code","459527d2":"code","8e4d88f2":"code","d39fa33d":"code","69cf5ccc":"code","6db28112":"code","c58762b9":"code","021132aa":"code","a887ae48":"code","60ab5942":"code","71828852":"code","bf6efb9a":"code","68c85723":"code","4596d523":"code","1d481200":"code","113be00c":"code","5727f2e8":"code","4ef18f72":"code","d3ab7437":"code","f1b3db4f":"code","61a7f16a":"code","286e695b":"code","3dbf697b":"code","6be2c512":"code","a1bc3f20":"code","fdcc9134":"code","93683dc4":"code","6cccd3f2":"code","298b4a0b":"code","f3b9f6c7":"code","35da28f1":"code","5adbe075":"code","497548ab":"code","b5a87cbd":"code","890ae23c":"code","ea665f8d":"code","e8b49f65":"code","0d4b8025":"code","650b5b58":"code","4b6919e6":"code","b32de6b7":"code","87a2a11b":"code","865b6a5a":"code","e07ec3a7":"code","953cf2c4":"code","110f40c8":"code","43afa5bf":"code","a163b7c6":"code","f8795e3e":"code","2704775c":"code","86534687":"code","a663dc2a":"code","f5252e2f":"code","8ce76157":"code","f9cb1ae0":"code","cc13c842":"code","4b17261e":"code","a2e8fd0c":"code","d756c07d":"code","d7a7ba5b":"code","c65ecc53":"code","f2aec9d6":"code","fc3dcbf6":"code","9a15b4e1":"code","a64c9416":"code","6d8b7f1d":"code","b84d0f47":"code","d5f6db0f":"code","10b1a391":"code","75b3e77e":"code","570f2205":"code","15ecf041":"code","1f3d6805":"code","45b4b4ee":"code","b6addfdb":"code","47823822":"code","efc69da1":"code","73b18c1f":"code","717c4bed":"code","8e16f93c":"code","23595994":"code","4f00b577":"code","4b2cb94b":"code","89ab1989":"code","acb3b80d":"code","6e286cb5":"code","548bae21":"code","04ec99ee":"code","bde6bfd8":"code","b990c046":"code","0616a8a1":"code","0d666ae4":"code","991316cc":"code","f1a6f74f":"code","7e601697":"code","3b5af5be":"code","991d7cd7":"code","fe6e3f07":"code","79ab0fde":"code","c637980d":"code","316dec95":"code","65bc8436":"code","9edbcc54":"code","5fe36374":"code","bd3bc4d5":"code","9e733254":"code","f109448e":"code","fa962a06":"code","7039a5bb":"code","8392a015":"code","c8015ea8":"code","ca35eeff":"code","a17a75f4":"code","52a61160":"code","36b77d88":"code","4ec1e329":"code","287c84af":"code","7626f014":"code","38e17188":"code","7330a00c":"code","ec73cb25":"code","56a59839":"code","45a50f0a":"code","13b67e47":"code","0c46d86d":"code","f89791f4":"code","84e55aa2":"code","0eedcb18":"code","9208a8ec":"code","8d8e9eda":"code","34195321":"code","2ad6a4da":"code","a40c4a91":"code","bcefaafa":"code","1834c5ed":"code","3561beee":"code","6c2e8990":"code","6e567161":"code","308a29ef":"code","e2496a31":"code","20267ac1":"code","2b39944b":"code","eefa5c3f":"code","8a307924":"code","2230bf26":"code","abec7393":"code","083142af":"code","65b300a4":"code","88231d53":"code","d1f45886":"code","938bb914":"code","fa71b7f8":"code","caba2d7c":"code","21d808da":"code","0fd93e4e":"code","121ffa65":"code","2c7e289e":"code","fdd05e68":"code","5db8e1b1":"code","26e952b7":"code","db2a2553":"code","9afef4ea":"code","e2626606":"code","2b78f1c5":"code","ac88327c":"code","53b32eb9":"code","57a71634":"code","31b10690":"code","05ebbdb4":"code","13bb1bb6":"code","66959abd":"code","631759a8":"code","873d114a":"code","be319b25":"code","b97149cf":"code","c24f3477":"code","0b66fd4a":"code","410fd8ee":"code","6978a60f":"code","0e24bf12":"code","c49bf10d":"code","140e693f":"code","f06b9f60":"code","339f9d57":"code","ccfce260":"code","7056cfa8":"code","8f26f498":"code","f7111daf":"code","4ffa6135":"code","7e25208b":"code","c2893c97":"code","3eca2ff1":"code","c55682c4":"code","0fa9b97a":"code","e2781527":"code","29add022":"code","c4d5e23a":"code","c335ccdd":"code","9d13db64":"code","e4f7d1c2":"code","9977d37c":"code","2bcae96b":"code","0ec7c0f1":"code","918becbf":"code","ad330fa0":"code","cf6a6a22":"markdown"},"source":{"a9278bef":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","54c6a96e":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c377e707":"def plot_feature(df,col):\n    plt.figure(figsize=(14,6))\n    plt.subplot(1,2,1)\n    if df[col].dtype == 'int64':\n        df[col].value_counts().sort_index().plot()\n    else:\n        mean = df.groupby(col)['price'].mean()\n        df[col] = df[col].astype('category')\n        levels = mean.sort_values().index.tolist()\n        df[col].cat.reorder_categories(levels,inplace=True)\n        df[col].value_counts().plot()\n    plt.xticks(rotation=45)\n    plt.xlabel(col)\n    plt.ylabel('Counts')\n    plt.subplot(1,2,2)\n    \n    if df[col].dtype == 'int64' or col == 'price':\n        mean = df.groupby(col)['price'].mean()\n        std = df.groupby(col)['price'].std()\n        mean.plot()\n        plt.fill_between(range(len(std.index)),mean.values-std.values,mean.values + std.values, \\\n                        alpha=0.1)\n    else:\n        sns.boxplot(x = col,y='price',data=df)\n    plt.xticks(rotation=45)\n    plt.ylabel('Sales')\n    plt.show()","afd6099c":"def missingdata(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    ms=pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    ms= ms[ms[\"Percent\"] > 0]\n    f,ax =plt.subplots(figsize=(8,6))\n    plt.xticks(rotation='90')\n    fig=sns.barplot(ms.index, ms[\"Percent\"],color=\"green\",alpha=0.8)\n    plt.xlabel('Features', fontsize=15)\n    plt.ylabel('Percent of missing values', fontsize=15)\n    plt.title('Percent missing data by feature', fontsize=15)\n    return ms","42dddca8":"def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n                        n_jobs=1, train_sizes=np.linspace(.1, 1.0, 5)):\n    plt.figure()\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1,\n                     color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Validation score\")\n\n    plt.legend(loc=\"best\")\n    return plt","40976a7b":"df = pd.read_csv('\/kaggle\/input\/auto-data-car-price-prediction-regression\/AutoData.csv')","297512db":"df.head()","2fb21f24":"pd.options.display.max_rows=None\npd.options.display.max_columns = None","03148ab8":"df.head()","f437a2bd":"# back up data\ndf1 = df.copy()\ndf2 = df.copy()\ndf3 = df.copy()","1896f359":"df1.head()","131f118a":"sns.heatmap(df1.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","190115e7":"import missingno as msno\nmsno.matrix(df1,figsize=(12,5))\nplt.show()","95609938":"total = df1.isnull().sum().sort_values(ascending=False)\npercent = ((df1.isnull().sum())*100)\/df1.isnull().count().sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total','Percent'], sort=False).sort_values('Total', ascending=False)","0f56395b":"missing_data","9cd1ec34":"df1.isnull().sum()","0ffdd3f7":"df1.info()","4bfce77f":"df1.describe()","2ec2b566":"df1.corr()","61d3faac":"plt.figure(figsize=(15,8))\nsns.heatmap(df1.corr(),annot=True,cmap='Blues')\nplt.show()","0a66d65a":"plt.figure(figsize=(15,8))\nsns.heatmap(df1.corr(),annot=False,cmap='viridis')\nplt.show()","383c3cb4":"plt.figure(figsize=(15,8))\nsns.heatmap(df1.corr(),annot=True,cmap='Reds')\nplt.show()","4fa2c7d2":"plt.figure(figsize=(15,8))\ndf1.corr().style.background_gradient(cmap='coolwarm')","d44d3f86":"corr = df1.corr()\ncut_off = 0.1\ncorr = corr[(corr > cut_off) | (corr < -cut_off)]\nplt.subplots(figsize=(16,16));\nsns.heatmap(corr, cmap=\"RdBu\", square=True, annot=False, cbar_kws={\"shrink\": .6}, )\nplt.title(f\"Correlation of features greater than +\/-{cut_off}\")\nplt.tight_layout()\nplt.show()","1b144c16":"#plt.style.use('ggplot')\ncorr = df1.corr()\nplt.figure(figsize=(16,9));\ncorr[\"price\"].sort_values(ascending=True)[:-1].plot(kind=\"barh\")\nplt.xlabel(\"Correlation\")\nplt.tight_layout()\nplt.show()","f0dec471":"corrMatt = df1.corr()\nmask = np.array(corrMatt)\nmask[np.tril_indices_from(mask)] = False\nfig,ax= plt.subplots()\nfig.set_size_inches(20,10)\nsns.heatmap(corrMatt, mask=mask,vmax=.8, square=True,annot=True)\nplt.show()","c973af72":"from scipy.stats import spearmanr\nlabels = []\nvalues = []\nfor col in df1:\n    if col not in [\"price\"]:\n        labels.append(col)\n        values.append(spearmanr(df1[col].values, df1[\"price\"].values)[0])\ncorr_df = pd.DataFrame({'col_labels':labels, 'corr_values':values})\ncorr_df = corr_df.sort_values(by='corr_values')\n \nind = np.arange(corr_df.shape[0])\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(12,30))\nrects = ax.barh(ind, np.array(corr_df.corr_values.values), color='g')\nax.set_yticks(ind)\nax.set_yticklabels(corr_df.col_labels.values, rotation='horizontal')\nax.set_xlabel(\"Correlation coefficient\")\nax.set_title(\"Correlation coefficient of the variables\")\nplt.show()","bdc39b69":"sns.clustermap(df1.corr(), annot=True, linewidths=.6, fmt= '.2f', figsize=(20, 15))\nplt.show()","3f99182d":"plt.figure(figsize=(30,9))\ndf1.corr()['price'].sort_values(ascending = False).plot('bar')\nplt.show()","4f5865f6":"asset_name = df1.groupby('make')['price'].count().sort_values(ascending=False)[:10]\nplt.barh(y=asset_name.index, width=asset_name.values, height=0.5, color='green')\nplt.gca().invert_yaxis()\nplt.xlabel('cars')","6684a366":"msno.matrix(df1.sample(200),figsize=(35, 60), width_ratios=(10, 1), color=(.0, 0.5, 0.5),fontsize=16)\nplt.show()","db5894a4":"msno.dendrogram(df1,fontsize=14)\nplt.show()","400ef213":"msno.bar(df1.sample(100))\nplt.show()","f1b1e29c":"df1.plot(subplots=True,figsize=(18,18))\nplt.show()","46b35395":"for col in df1.drop(['price'],axis=1):\n    plot_feature(df1,col)","42ffc66d":"df2.head()","20274560":"df2.drop(['make'],axis=1,inplace=True)","9ceff542":"cat = []\nnum = []\nfor col in df2.columns:\n    if df2[col].dtype=='O':\n        cat.append(col)\n    else:\n        num.append(col)","88c155a2":"cat","799646fd":"num","6f431e59":"plt.style.use('ggplot')\nfor col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    sns.barplot(x=col,y='price',data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","65e37e5e":"for col in df2[cat]:\n    plt.figure(figsize=(12,7))\n    sns.boxplot(x=col,y='price',data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","c39f5315":"for col in df2[cat]:\n    plt.figure(figsize=(12,7))\n    sns.boxenplot(x=col,y='price',data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","becb20a4":"for col in df2[cat]:\n    plt.figure(figsize=(12,7))\n    sns.violinplot(x=col,y='price',data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","9e6c8c05":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    sns.barplot(x=col,y='price',data=df2)\n    sns.pointplot(x=col,y='price',data=df2,color='Black')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","d85c1d07":"for col in df2[cat]:\n    plt.figure(figsize=(12,7))\n    sns.boxplot(x=col,y='price',data=df2)\n    sns.pointplot(x=col,y='price',data=df2,color='Black')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","0cbcbf33":"for col in df2[cat]:\n    plt.figure(figsize=(12,7))\n    sns.boxenplot(x=col,y='price',data=df2)\n    sns.pointplot(x=col,y='price',data=df2,color='Black')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","203f349f":"for col in df2[cat]:\n    plt.figure(figsize=(12,7))\n    sns.boxplot(x=col,y='price',data=df2)\n    sns.stripplot(x=col,y='price',data=df2,color='Black')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","135f26fd":"for col in df2[cat]:\n    plt.figure(figsize=(12,7))\n    sns.boxenplot(x=col,y='price',data=df2)\n    sns.stripplot(x=col,y='price',data=df2,color='Black')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","2d65f4f1":"import plotly.express as px\nfor col in df2[num].drop(['price'],axis=1):\n    import plotly.express as px\n    type_count = df2[col].value_counts().reset_index()\n    total = len(df3)\n    type_count['percent'] = round((type_count[col]\/total)*100,2)\n    print(type_count)\n    fig = px.bar(type_count, x='index', y=col,\n             hover_data=['index','percent'], color=col,\n             labels={'type':'Type Count'}, height=400)\n    fig.show()","9e3c98ba":"for col in df2[cat]:\n    import plotly.express as px\n    type_count = df2[col].value_counts().reset_index()\n    total = len(df3)\n    type_count['percent'] = round((type_count[col]\/total)*100,2)\n    print(type_count)\n    fig = px.bar(type_count, x='index', y=col,\n             hover_data=['index','percent'], color=col,\n             labels={'type':'Type Count'}, height=400)\n    fig.show() ","d8579df9":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    sns.jointplot(x=col,y='price',data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","3fa340ee":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    sns.jointplot(x=col,y='price',data=df2,kind='reg')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","3d584640":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    sns.jointplot(x=col,y='price',data=df2,color='g',kind='hex')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","9f3b29f0":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    sns.jointplot(x=col,y='price',data=df2,color='r',kind='kde')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","f3bb51a9":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    sns.jointplot(x=col,y='price',data=df2,color='magenta',kind='kde')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","5d8053dc":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    sns.lineplot(x=col,y='price',data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","eea0e5e4":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    sns.factorplot(x=col,y='price',data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","4c484102":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    sns.stripplot(x=col,y='price',data=df2,jitter=True,edgecolor='gray',size=10,palette='winter',orient='v')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","a5482afd":"for col in df2[cat]:\n    plt.figure(figsize=(13,7))\n    sns.stripplot(x=col,y='price',data=df2,jitter=True,edgecolor='gray',size=10,palette='winter',orient='v')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","49f855fe":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    sns.residplot(x=col,y='price',data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","7d375681":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    sns.distplot(df2[col],color='r')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","c15b7d65":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    plt.plot(col,'price',data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","66577905":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    plt.bar(col,'price',data=df2,color='b')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","d6a2fef4":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    plt.hist(df2[col],color='g',bins=50)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","b5fef3e0":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    df2.plot(col,'price')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","aa117d13":"import scipy.stats as st\nfor col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    st.probplot(df2[col],plot=plt)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","b834d005":"for col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(13,7))\n    sns.kdeplot(data=df2[num])\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","c500d3f9":"plt.style.use('dark_background')\nfor col in df2[num].drop(['price'],axis=1):\n    plt.figure(figsize=(12,7))\n    plt.plot(df2[col].value_counts(),color='Red')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","a66a042b":"for col in df2[cat]:\n    plt.figure(figsize=(12,7))\n    plt.plot(df2[col].value_counts(),color='R')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","c6a550ca":"plt.style.use('ggplot')\n\ndef plot_count(x,fig):\n    plt.subplot(23,2,fig)\n   \n    sns.countplot(df2[x],palette=(\"magma\"))\n    plt.subplot(23,2,(fig+1))\n    sns.boxplot(x=df2[x], y=df2.price, palette=(\"magma\"))\n    \nplt.figure(figsize=(15,65))\n\nplot_count('symboling',1)\nplot_count('fueltype',3)\nplot_count('aspiration',5)\nplot_count('doornumber',7)\nplot_count('carbody',9)\nplot_count('drivewheel',11)\nplot_count('enginelocation',13)\nplot_count('wheelbase',15)\nplot_count('carlength',17)\nplot_count('carwidth',19)\nplot_count('carheight',21)\nplot_count('curbweight',23)\nplot_count('enginetype',25)\nplot_count('cylindernumber',27)\nplot_count('enginesize',29)\nplot_count('fuelsystem',31)\nplot_count('boreratio',33)\nplot_count('stroke',35)\nplot_count('compressionratio',37)\nplot_count('horsepower',39)\nplot_count('peakrpm',41)\nplot_count('citympg',43)\nplot_count('highwaympg',45)\n\n\n\nplt.tight_layout()\nplt.show()","aede5196":"def plot_count(x,fig):\n    plt.subplot(23,2,fig)\n   \n    sns.boxenplot(df2[x],y=df2.price,palette=(\"Blues_d\"))\n    plt.subplot(23,2,(fig+1))\n    sns.lineplot(x=df2[x], y=df2.price)\n    \nplt.figure(figsize=(15,65))\n\nplot_count('symboling',1)\nplot_count('fueltype',3)\nplot_count('aspiration',5)\nplot_count('doornumber',7)\nplot_count('carbody',9)\nplot_count('drivewheel',11)\nplot_count('enginelocation',13)\nplot_count('wheelbase',15)\nplot_count('carlength',17)\nplot_count('carwidth',19)\nplot_count('carheight',21)\nplot_count('curbweight',23)\nplot_count('enginetype',25)\nplot_count('cylindernumber',27)\nplot_count('enginesize',29)\nplot_count('fuelsystem',31)\nplot_count('boreratio',33)\nplot_count('stroke',35)\nplot_count('compressionratio',37)\nplot_count('horsepower',39)\nplot_count('peakrpm',41)\nplot_count('citympg',43)\nplot_count('highwaympg',45)\n\n\n\nplt.tight_layout()\nplt.show()","438cc320":"def plot_count(x,fig):\n    plt.subplot(23,2,fig)\n   \n    plt.plot(df2[x],color='Blue')\n    plt.subplot(23,2,(fig+1))\n    sns.lineplot(x=df2[x], y=df2.price,color='Black')\n    \nplt.figure(figsize=(15,65))\n\nplot_count('symboling',1)\nplot_count('fueltype',3)\nplot_count('aspiration',5)\nplot_count('doornumber',7)\nplot_count('carbody',9)\nplot_count('drivewheel',11)\nplot_count('enginelocation',13)\nplot_count('wheelbase',15)\nplot_count('carlength',17)\nplot_count('carwidth',19)\nplot_count('carheight',21)\nplot_count('curbweight',23)\nplot_count('enginetype',25)\nplot_count('cylindernumber',27)\nplot_count('enginesize',29)\nplot_count('fuelsystem',31)\nplot_count('boreratio',33)\nplot_count('stroke',35)\nplot_count('compressionratio',37)\nplot_count('horsepower',39)\nplot_count('peakrpm',41)\nplot_count('citympg',43)\nplot_count('highwaympg',45)\n\n\n\nplt.tight_layout()\nplt.show()","d7dd1e39":"def plot_count(x,fig):\n    plt.subplot(23,2,fig)\n   \n    plt.plot(df2[x],color='Orange')\n    plt.subplot(23,2,(fig+1))\n    plt.plot(df2[x],'price',data=df2)\n    \nplt.figure(figsize=(15,65))\n\nplot_count('symboling',1)\nplot_count('fueltype',3)\nplot_count('aspiration',5)\nplot_count('doornumber',7)\nplot_count('carbody',9)\nplot_count('drivewheel',11)\nplot_count('enginelocation',13)\nplot_count('wheelbase',15)\nplot_count('carlength',17)\nplot_count('carwidth',19)\nplot_count('carheight',21)\nplot_count('curbweight',23)\nplot_count('enginetype',25)\nplot_count('cylindernumber',27)\nplot_count('enginesize',29)\nplot_count('fuelsystem',31)\nplot_count('boreratio',33)\nplot_count('stroke',35)\nplot_count('compressionratio',37)\nplot_count('horsepower',39)\nplot_count('peakrpm',41)\nplot_count('citympg',43)\nplot_count('highwaympg',45)\n\n\n\nplt.tight_layout()\nplt.show()","5806cc12":"for col in df2[num]:\n    x = pd.DataFrame()\n    x[col] = df3.groupby(col)['price'].mean()\n    x.plot(secondary_y='price', figsize=(20, 10),color='Black')","2fd5fec1":"plt.figure(figsize=(15,8))\n\nplt.subplot(1,2,1)\nsns.countplot(df2.fueltype,palette=(\"Blues_d\"))\n\nplt.subplot(1,2,2)\nsns.countplot(df2.enginetype,palette=(\"PuBuGn\"))","4d5ad0e4":"plt.figure(figsize=(15,6))\n\nplt.subplot(1,2,1)\nsns.countplot(df2.doornumber)\n\nplt.subplot(1,2,2)\nsns.countplot(df2.carbody)\n\nplt.figure(figsize=(15,6))\n\nplt.subplot(1,2,1)\nsns.countplot(df2.fuelsystem)\n\nplt.subplot(1,2,2)\nsns.countplot(df2.cylindernumber)\n\nplt.show()","08bd4286":"plt.figure(figsize=(30,10))\nsns.countplot(df1.make.value_counts())\nplt.xlabel('cars')\nplt.ylabel('price')\nplt.show()","77f0e2ca":"plt.style.use('default')\nplt.figure(figsize=(20,8))\ndft = pd.DataFrame(df1.groupby(['make'])['price'].mean().sort_values(ascending=False)).plot.bar()\n\ndft = pd.DataFrame(df1.groupby(['aspiration'])['price'].mean().sort_values(ascending=False)).plot.bar()\n\ndft = pd.DataFrame(df1.groupby(['enginelocation'])['price'].mean().sort_values(ascending=False)).plot.bar()\nplt.show()","85bfc5df":"for col in df2[num]:\n    plt.figure(figsize=(15,8))\n    dft = pd.DataFrame(df2.groupby([col])['price'].mean().sort_values(ascending=False)).plot.bar()\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.show()","2319e5da":"for col in df2[cat]:\n    plt.figure(figsize=(15,8))\n    dft = pd.DataFrame(df2.groupby([col])['price'].mean().sort_values(ascending=False)).plot.bar()\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.show()","62df5b0d":"plt.figure(figsize=(15,6))\n\ndft2 = pd.DataFrame(df2.groupby(['carlength','doornumber'])['price'].mean().unstack(fill_value=0))\ndf2.plot.bar()","12653729":"plt.figure(figsize=(15,6))\n\ndft2 = pd.DataFrame(df2.groupby(['fuelsystem','carlength','drivewheel'])['price'].mean().unstack(fill_value=0))\ndf2.plot.bar()","3513160b":"plt.figure(figsize=(15,6))\n\nsns.scatterplot(x=df3['fuelsystem'],y=df3['price'],hue=df3['drivewheel'])\nplt.show()","e35f5866":"plt.figure(figsize=(15,6))\n\nsns.scatterplot(x=df3['fueltype'],y=df3['price'],hue=df3['enginesize'])\nplt.show()","2d2d28a1":"plt.figure(figsize=(15,6))\n\nsns.scatterplot(x=df3['make'],y=df3['price'],hue=df3['doornumber'])\nplt.show()","e2c3565f":"plt.style.use('ggplot')\nfig,ax=plt.subplots(1,2,figsize=(18,8))\ndf3['carbody'].value_counts().plot.pie(explode=[0,0.05,0,0,0],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('carbody')\nax[0].set_ylabel('carbody')\nsns.countplot('carbody',data=df3,ax=ax[1],order=df3['carbody'].value_counts().index)\nax[1].set_title('carbody')\nplt.show()","79df0537":"fig,ax=plt.subplots(1,2,figsize=(18,8))\ndf3['doornumber'].value_counts().plot.pie(explode=[0,0.05],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('doornumber')\nax[0].set_ylabel('doornumber')\nsns.countplot('doornumber',data=df3,ax=ax[1],order=df3['doornumber'].value_counts().index)\nax[1].set_title('doornumber')\nplt.show()","82443cad":"fig,ax=plt.subplots(1,2,figsize=(18,8))\ndf3['aspiration'].value_counts().plot.pie(explode=[0,0.05],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('aspiration')\nax[0].set_ylabel('aspiration')\nsns.countplot('aspiration',data=df3,ax=ax[1],order=df3['aspiration'].value_counts().index)\nax[1].set_title('aspiration')\nplt.show()","7a3e900b":"fig,ax=plt.subplots(1,2,figsize=(18,8))\ndf3['drivewheel'].value_counts().plot.pie(explode=[0,0.05,0],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('drivewheel')\nax[0].set_ylabel('drivewheel')\nsns.countplot('drivewheel',data=df3,ax=ax[1],order=df3['drivewheel'].value_counts().index)\nax[1].set_title('drivewheel')\nplt.show()","b8c95fa2":"# check with all columns\n\nplt.style.use('fivethirtyeight')\nfor col in df3:\n    fig,ax=plt.subplots(1,2,figsize=(18,8))\n    df3[col].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[0],shadow=True)\n    ax[0].set_title(col)\n    ax[0].set_ylabel(col)\n    sns.countplot(col,data=df3,ax=ax[1],order=df3[col].value_counts().index)\n    ax[1].set_title(col)\n    plt.show()\n","ed8809ea":"for col in df3:\n    a = df3[df3.price <50000]\n    plt.figure(figsize=(10,6))\n    sns.boxplot(y=\"price\",x =col ,data = a)\n    plt.show()    ","bff6a9f7":"for col in df3:\n    a = df3[df3.price > 18920]\n    plt.figure(figsize=(10,6))\n    sns.boxplot(y=\"price\",x =col ,data = a)\n    plt.show() ","d1fae823":"plt.figure(figsize=(10,6))\nsns.countplot(x = 'carbody',hue = \"fueltype\",data = df3)\nplt.show()","02be4dd3":"plt.figure(figsize=(10,6))\nsns.countplot(x = 'enginelocation',hue = \"fueltype\",data = df3)\nplt.show()","4c63d3ad":"cat","8e06932e":"for col in df2[cat]:\n    fig,ax=plt.subplots(1,2,figsize=(15,8))\n    clr = (\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\n    df3[col].value_counts().sort_values(ascending=False)[:10].sort_values().plot(kind='barh',color=clr,ax=ax[0])\n    ax[0].set_title(\"aspiration\",size=20)\n    ax[0].set_xlabel('aspiration',size=18)\n\n\n    count=df3[col].value_counts()\n    groups=list(df3[col].value_counts().index)[:10]\n    counts=list(count[:10])\n    counts.append(count.agg(sum)-count[:10].agg('sum'))\n    groups.append('Other')\n    type_dict=pd.DataFrame({\"group\":groups,\"counts\":counts})\n    clr1=('brown','darksalmon','orange','hotpink','cadetblue','purple','red','gold','forestgreen','blue','plum')\n    qx = type_dict.plot(kind='pie', y='counts', labels=groups,colors=clr1,autopct='%1.1f%%', pctdistance=0.9, radius=1.2,ax=ax[1])\n    plt.legend(loc=0, bbox_to_anchor=(1.15,0.4)) \n    plt.subplots_adjust(wspace =0.5, hspace =0)\n    plt.ioff()\n    plt.ylabel('')\n    plt.show()","98e1758d":"num","20cc4723":"for col in df2[num]:\n    fig,ax=plt.subplots(1,2,figsize=(15,8))\n    clr = (\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\n    df3[col].value_counts().sort_values(ascending=False).sort_values().plot(kind='barh',color=clr,ax=ax[0])\n    ax[0].set_title(\"wheelbase\",size=20)\n    ax[0].set_xlabel('wheelbase',size=18)\n    count=df3[col].value_counts()\n    groups=list(df3[col].value_counts().index)\n    counts=list(count)\n    counts.append(count.agg(sum)-count.agg('sum'))\n    groups.append('Other')\n    type_dict=pd.DataFrame({\"group\":groups,\"counts\":counts})\n    clr1=('brown','darksalmon','orange','hotpink','cadetblue','purple','red','gold','forestgreen','blue','plum')\n    qx = type_dict.plot(kind='pie', y='counts', labels=groups,colors=clr1,autopct='%1.1f%%', pctdistance=0.9, radius=1.2,ax=ax[1])\n    plt.legend(loc=0, bbox_to_anchor=(1.15,0.4)) \n    plt.subplots_adjust(wspace =0.5, hspace =0)\n    plt.ioff()\n    plt.ylabel('')\n    plt.show()\n    ","11f4b851":"a = df3['carlength'].values[:100]\nf = df3['carwidth'].values[:100]\n\ndef plot_acc_ttf_data(a,f, title=\"Car Length and width\"):\n    fig, ax1 = plt.subplots(figsize=(12, 8))\n    plt.title(title)\n    plt.plot(a, color='r')\n    ax1.set_ylabel('carlength', color='r')\n    plt.legend(['carlength'], loc=(0.01, 0.95))\n    ax2 = ax1.twinx()\n    plt.plot(f, color='b')\n    ax2.set_ylabel('carwidth', color='b')\n    plt.legend(['carwidth'], loc=(0.01, 0.9))\n    plt.grid(True)\n\nplot_acc_ttf_data(a,f)","963c5291":"a = df3['enginesize'].values[:300]\nf = df3['peakrpm'].values[:500]\n\ndef plot_acc_ttf_data(a,f, title=\"Engine size and peakrpm\"):\n    fig, ax1 = plt.subplots(figsize=(12, 8))\n    plt.title(title)\n    plt.plot(a, color='r')\n    ax1.set_ylabel('enginesize', color='r')\n    plt.legend(['enginesize'], loc=(0.01, 0.95))\n    ax2 = ax1.twinx()\n    plt.plot(f, color='b')\n    ax2.set_ylabel('peakrpm', color='b')\n    plt.legend(['peakrpm'], loc=(0.01, 0.9))\n    plt.grid(True)\n\nplot_acc_ttf_data(a,f)","64072ccc":"for i in [0.05, 0.1, 0.25, 0.5 ,0.7, 0.9, 0.95]:\n    price_df = df2.groupby('wheelbase')['carlength'].quantile(i).reset_index()\n    plt.plot(price_df['wheelbase'], price_df['carlength'], label='%.2f quantile' %i)\nplt.legend(loc='best')\nplt.xlabel('Wheelbase')\nplt.ylabel('Price')\nplt.show()","49a809a3":"for i in [0.05, 0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]:\n    price_df = df2.groupby('carlength')['carwidth'].quantile(i).reset_index()\n    plt.plot(price_df['carlength'], price_df['carwidth'], label='%.2f quantile' %i)\nplt.legend(loc='best')\nplt.xlabel('Wheel')\nplt.ylabel('Price')\nplt.show()","4bb2d44b":"for i in [0.05,0.2,0.6,0.9,0.95]:\n    price_df = df3.groupby('citympg')['highwaympg'].quantile(i).reset_index()\n    plt.plot(price_df['citympg'], price_df['highwaympg'], label='%.2f quantile' %i)\nplt.legend(loc='best')\nplt.xlabel('highwaympg')\nplt.ylabel('Price')\nplt.show()","4498bc98":"for i in [0.05,0.2,0.6,0.9,0.95]:\n    price_df = df3.groupby('peakrpm')['price'].quantile(i).reset_index()\n    plt.plot(price_df['peakrpm'], price_df['price'], label='%.2f quantile' %i)\nplt.legend(loc='best')\nplt.xlabel('peakrpm')\nplt.ylabel('Price')\nplt.show()","66d0703e":"df3.head()","2128d810":"plt.style.use('default')\nplt.figure(figsize = (20, 15))\nsns.pointplot(df3[\"carlength\"], df3[\"carwidth\"], linestyles=\"-\")\nsns.pointplot(df3[\"wheelbase\"], df3[\"carheight\"], color = \"green\", linestyles=\"--\")\nplt.grid()\nplt.show()","48012aae":"plt.figure(figsize = (20, 15))\nsns.pointplot(df3[\"boreratio\"], df3[\"stroke\"], linestyles=\"-\")\nsns.pointplot(df3[\"citympg\"], df3[\"highwaympg\"], color = \"green\", linestyles=\"--\")\nplt.grid()\nplt.show()","6206b31d":"count = df3.groupby(['wheelbase','carlength'])['price'].count().reset_index()\nfig = px.line(count, x=\"wheelbase\", y=\"carlength\", color='price')\nfig.show()","0c13e54e":"count = df3.groupby(['carwidth','carheight'])['price'].count().reset_index()\nfig = px.line(count, x=\"carwidth\", y=\"carheight\", color='price')\nfig.show()","a55b2f37":"count = df3.groupby(['curbweight','enginesize'])['price'].count().reset_index()\nfig = px.line(count, x=\"curbweight\", y=\"enginesize\", color='price')\nfig.show()","bc42246b":"count = df3.groupby(['boreratio','stroke'])['price'].count().reset_index()\nfig = px.line(count, x=\"boreratio\", y=\"stroke\", color='price')\nfig.show()","8a98e578":"count = df3.groupby(['compressionratio','horsepower'])['price'].count().reset_index()\nfig = px.line(count, x=\"compressionratio\", y=\"horsepower\", color='price')\nfig.show()","6d68ee08":"count = df3.groupby(['peakrpm','symboling'])['price'].count().reset_index()\nfig = px.line(count, x=\"peakrpm\", y=\"price\", color='symboling')\nfig.show()","5a1b3243":"count = df3.groupby(['make'])['price'].count().reset_index()\ncount.sort_values(by=['price'], inplace = True, ascending = True)\nprint(count)\nfig = px.line(count, x=\"make\", y=\"price\")\nfig.show()","a8e66106":"plt.style.use('ggplot')\nfor col in df3[num]:\n    plt.figure(figsize=(12,5))\n    plt.subplot(1,2,1)\n    g = sns.distplot((df3[col] + 1))\n    plt.subplot(1,2,2)\n    plt.scatter(range(df3.shape[0]), np.sort(np.log(df3[col]+1).values))\n    plt.xticks(rotation=45)\n    plt.show() ","154a5332":"for col in df3[num]:\n    plt.figure(figsize=(12,5))\n    plt.subplot(1,2,1)\n    g = sns.distplot(df3[col].values, bins=100, kde=False)\n    plt.subplot(1,2,2)\n    plt.scatter(range(df3.shape[0]), np.sort(np.log(df3[col]+1).values))\n    plt.xticks(rotation=45)\n    plt.show() ","1a325a4e":"plt.figure(figsize = (12,18))\nplt.subplot(421)\ng4 = sns.distplot(np.log(df3['boreratio']),\n                  hist=False)\ng4 = sns.distplot(np.log(df3['stroke']), \n                  hist=False)\n\nplt.subplot(422)\ng5 = sns.distplot(np.log(df3['curbweight']), \n                  hist=False)\ng5 = sns.distplot(np.log(df3['enginesize']), \n                  hist=False)\n\nplt.show()","89da1e84":"plt.figure(figsize = (12,18))\n\nplt.subplot(423)\ng1 = sns.distplot(np.log(df3['wheelbase']), \n                  hist=False)\ng1 = sns.distplot(np.log(df3['carlength']), \n                  hist=False)\n\n\nplt.subplot(424)\ng2 = sns.distplot(np.log(df3['carwidth']),\n                  hist=False)\ng2 = sns.distplot(np.log(df3['carheight']), \n                  hist=False)\n\n\nplt.subplot(425)\ng3 = sns.distplot(np.log(df3['curbweight']), \n                  hist=False)\ng3 = sns.distplot(np.log(df3['enginesize']), \n                  hist=False)\n\n\n\n\nplt.show()","6d36bffc":"df3['carlength'] = np.log(df3['carlength'])\n\n(sns.FacetGrid(df3, hue='carbody', size=5, aspect=2)\n  .map(sns.kdeplot, 'carlength', shade=True)\n .add_legend()\n)\nplt.show()","f19061f5":"df3['wheelbase'] = np.log(df3['wheelbase'])\n\n(sns.FacetGrid(df3, hue='aspiration', size=5, aspect=2)\n  .map(sns.kdeplot, 'wheelbase', shade=True)\n .add_legend()\n)\nplt.show()","739ef371":"df3['carheight'] = np.log(df3['carheight'])\n\n(sns.FacetGrid(df3, hue='drivewheel', size=5, aspect=2)\n  .map(sns.kdeplot, 'carheight', shade=True)\n .add_legend()\n)\nplt.show()","05d73817":"df3['price'] = np.log(df3['price'])\n\n(sns.FacetGrid(df3, hue='make', size=5, aspect=2)\n  .map(sns.kdeplot, 'price', shade=True)\n .add_legend()\n)\nplt.show()","4c246165":"df3['carlength'] = np.log(df3['carlength'])\n\n(sns.FacetGrid(df3, hue='carbody', size=5, aspect=2)\n  .map(sns.kdeplot, 'carlength', shade=True)\n .add_legend()\n)\nplt.show()","1fb3d2b0":"df3['carwidth'] = np.log(df3['carwidth'])\n\n(sns.FacetGrid(df3, hue='doornumber', size=5, aspect=2)\n  .map(sns.kdeplot, 'carwidth', shade=True)\n .add_legend()\n)\nplt.show()","f690ceb5":"df3['peakrpm'] = np.log(df3['peakrpm'])\n\n(sns.FacetGrid(df3, hue='fuelsystem', size=5, aspect=2)\n  .map(sns.kdeplot, 'peakrpm', shade=True)\n .add_legend()\n)\nplt.show()","6dd2803d":"for col in df3[num]:\n    df3[col] = np.log(df3[col])\n    (sns.FacetGrid(df3, hue='fueltype', size=5, aspect=2)\n    .map(sns.kdeplot, col, shade=True)\n    .add_legend()\n    )\n    plt.show()    ","5885d26f":"for col in df3[num]:\n    df3[col] = np.log(df3[col])\n    (sns.FacetGrid(df3, hue='aspiration', size=5, aspect=2)\n    .map(sns.kdeplot, col, shade=True)\n    .add_legend()\n    )\n    plt.show()  ","3fd82751":"df4 = df.copy()\nfor col in df4[num]:\n    fig,axes=plt.subplots(nrows=2,ncols=1)\n    df4.plot(kind='hist',y=col,bins=50,range=(0,100),density=True,ax=axes[0])\n    df4.plot(kind='hist',y=col,bins=100,density=True,ax=axes[1],cumulative=True)\n    plt.show()    ","068500e9":"plt.figure(figsize=(20,25))\ni = 0\n\nfor item in df4[num].columns:\n    i += 1\n    plt.subplot(8, 2, i)\n    sns.distplot(df4[item], rug=True, rug_kws={\"color\": \"b\"},kde=True,\n                 kde_kws={\"color\": \"blue\", \"lw\": 5, \"label\": \"KDE\"},\n                 hist_kws={\"histtype\": \"step\", \"linewidth\": 3,\"alpha\": 1, \"color\": \"blue\"},label=\"{0}\".format(item))\nplt.show()","d991b410":"df4.head()","85d669d2":"import plotly.express as px\nfig = px.histogram(df4.dropna(), x='make', y=\"price\", color=\"fueltype\",\n                   marginal=\"box\", \n                   hover_data=df4.columns)\nfig.show()","effef337":"fig = px.histogram(df4, x='carlength', y='price', color='aspiration',\n                   marginal=\"box\",\n                   hover_data=df4.columns)\nfig.show()","459527d2":"fig = px.histogram(df4, x='carbody', y='carlength', color='carlength',\n                   marginal=\"box\",\n                   hover_data=df4.columns)\nfig.show()","8e4d88f2":"fig = px.histogram(df4, x='doornumber', y='carheight', color='enginetype',\n                   marginal=\"box\",\n                   hover_data=df4.columns)\nfig.show()","d39fa33d":"fig = px.histogram(df4, x='citympg', y='highwaympg', color='price',\n                   marginal=\"box\",\n                   hover_data=df4.columns)\nfig.show()","69cf5ccc":"fig = px.histogram(df4, x='make', y='wheelbase', color='price',\n                   marginal=\"box\",\n                   hover_data=df4.columns)\nfig.show()","6db28112":"fig = px.histogram(df4, x='carwidth', y='curbweight', color='fuelsystem',\n                   marginal=\"box\",\n                   hover_data=df4.columns)\nfig.show()","c58762b9":"fig = px.histogram(df4, x='enginetype', y='fuelsystem', color='wheelbase',\n                   marginal=\"box\",\n                   hover_data=df4.columns)\nfig.show()","021132aa":"sns.pairplot(df4)\nplt.show()","a887ae48":"sns.pairplot(df4,hue='fueltype')\nplt.show()","60ab5942":"plt.figure(figsize=(14,6))\nplt.subplot(1,2,1)\nsns.boxplot(df4.price)\nplt.subplot(1,2,2)\nsns.distplot(df4.price,bins=20)\nplt.show()","71828852":"q = df2.price.describe()\nprint(q)\nIQR    = q['75%'] - q['25%']\nUpper  = q['75%'] + 1.5 * IQR\nLower  = q['25%'] - 1.5 * IQR\nprint(\"the upper and lower outliers are {} and {}\".format(Upper,Lower))","bf6efb9a":"rows =7\n\ncols = 2\n\nfig,ax = plt.subplots(nrows=rows,ncols=cols,figsize=(16,35))\n\ncol = df4[num].columns\n\nindex = 0\n\nfor i in range(rows):\n    for j in range(cols):\n        sns.distplot(df4[col[index]],ax=ax[i][j])\n        index = index + 1\n        \nplt.tight_layout()","68c85723":"rows = 7\ncols = 2\n\nfig,ax = plt.subplots(nrows=rows,ncols=cols,figsize=(16,35))\n\ncol = df4[num].columns\n\nindex = 0\n\nfor i in range(rows):\n    for j in range(cols):\n        sns.regplot(x=df4[col[index]],y=df4['price'],ax=ax[i][j])\n        index = index + 1\n        \nplt.tight_layout()","4596d523":"df.head()","1d481200":"df.rename(columns={'make':'cars_name'},inplace=True)","113be00c":"df['cars_name'].unique()","5727f2e8":"def change_name(a,b):\n    df.cars_name.replace(a,b,inplace=True)\n    \nchange_name('maxda rx3','mazda rx3')\nchange_name('maxda glc deluxe','mazda glc deluxe')\nchange_name('porcshce panamera','porsche panamera')\nchange_name('toyouta tercel','toyota tercel')\nchange_name('vokswagen rabbit','volkswagen rabbit')\nchange_name('vw dasher','volkswagen dasher')\nchange_name('vw rabbit','volkswagen rabbit')","4ef18f72":"df['cars_name'].unique()","d3ab7437":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn import metrics\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport time\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import learning_curve\nimport statsmodels.api as sm\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.feature_selection import RFE","f1b3db4f":"df.head()","61a7f16a":"df.drop(['cars_name'],axis=1,inplace=True)","286e695b":"df.head()","3dbf697b":"cat = ['fueltype','aspiration','doornumber','carbody','drivewheel','enginelocation','enginetype','cylindernumber','fuelsystem']","6be2c512":"dfn = pd.get_dummies(df,cat,drop_first=True)","a1bc3f20":"dfn.head()","fdcc9134":"from sklearn.preprocessing import MinMaxScaler\nscalar = MinMaxScaler()\ndf_columns = dfn.columns\ndfn = scalar.fit_transform(dfn)\ndfn = pd.DataFrame(dfn)\ndfn.columns = df_columns\ndfn.head()","93683dc4":"X = dfn.drop(['price'],axis=1)","6cccd3f2":"y = df[['price']]","298b4a0b":"X.head()","f3b9f6c7":"y.head()","35da28f1":" X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)","5adbe075":"cross_val_score(LinearRegression(),X_train,y_train).mean()","497548ab":"cross_val_score(RandomForestRegressor(n_estimators=100),X_train,y_train).mean()","b5a87cbd":"cross_val_score(SVR(),X_train,y_train).mean()","890ae23c":"cross_val_score(GradientBoostingRegressor(),X_train,y_train).mean()","ea665f8d":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","e8b49f65":"rf = RandomForestRegressor(n_estimators=100)\nrf.fit(X_train,y_train)\npred = rf.predict(X_test)\nr2_score(y_test,pred)","0d4b8025":"gb = GradientBoostingRegressor()\ngb.fit(X_train,y_train)\npred = gb.predict(X_test)\nr2_score(y_test,pred)","650b5b58":"svm = SVR()\nsvm.fit(X_train,y_train)\npred = svm.predict(X_test)\nr2_score(y_test,pred)","4b6919e6":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","b32de6b7":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","87a2a11b":"df.corr()","865b6a5a":"plt.figure(figsize=(15,8))\nsns.heatmap(df.corr(),annot=True,cmap='Blues')\nplt.show()","e07ec3a7":"rf.feature_importances_","953cf2c4":"feature_importance = pd.Series(rf.feature_importances_,index=X_train.columns)\nfeature_importance.sort_values()\nfeature_importance.plot(kind='barh',figsize=(15,25))\nplt.tight_layout()\nplt.show()","110f40c8":"plt.figure(figsize=(7,8))\nfeatures = X_train.columns\nimportances = rf.feature_importances_\nindices = np.argsort(importances)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='Black', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","43afa5bf":"from sklearn.feature_selection import SelectFromModel","a163b7c6":"fe = SelectFromModel(RandomForestRegressor(n_estimators=100,random_state=100))\nfe.fit(X_train,y_train)","f8795e3e":"fe.get_support()","2704775c":"a = X_train.columns[fe.get_support()]","86534687":"a","a663dc2a":"lr = LinearRegression()\nlr.fit(X_train[a],y_train)\npred = lr.predict(X_test[a])\nr2_score(y_test,pred)","f5252e2f":"rf = RandomForestRegressor()\nrf.fit(X_train[a],y_train)\npred = rf.predict(X_test[a])\nr2_score(y_test,pred)","8ce76157":"gb = GradientBoostingRegressor()\ngb.fit(X_train[a],y_train)\npred = gb.predict(X_test[a])\nr2_score(y_test,pred)","f9cb1ae0":"from sklearn.feature_selection import RFE","cc13c842":"def run_Linear(X_train, X_test, y_train, y_test):\n    clf = LinearRegression()\n    clf.fit(X_train, y_train)\n    pred = clf.predict(X_test)\n    print('R2 Score: ', r2_score(y_test, pred))\n    print('MSE:',metrics.mean_squared_error(pred,y_test))\n    rms = np.sqrt(metrics.mean_squared_error(pred, y_test))\n    print('RMSE:',rms)","4b17261e":"def run_randomForest(X_train, X_test, y_train, y_test):\n    clf = RandomForestRegressor(n_estimators=100, random_state=100, n_jobs=-1)\n    clf.fit(X_train, y_train)\n    pred = clf.predict(X_test)\n    print('R2 Score: ', r2_score(y_test, pred))\n    print('MSE:',metrics.mean_squared_error(pred,y_test))\n    rms = np.sqrt(metrics.mean_squared_error(pred, y_test))\n    print('RMSE:',rms)","a2e8fd0c":"def run_Gradient(X_train, X_test, y_train, y_test):\n    clf = GradientBoostingRegressor(n_estimators=100, random_state=100)\n    clf.fit(X_train, y_train)\n    pred = clf.predict(X_test)\n    print('R2 Score: ', r2_score(y_test, pred))\n    print('MSE:',metrics.mean_squared_error(pred,y_test))\n    rms = np.sqrt(metrics.mean_squared_error(pred, y_test))\n    print('RMSE:',rms)","d756c07d":"X_train.shape","d7a7ba5b":"for index in range(1,44):\n    fe = RFE(LinearRegression(), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_Linear(X_train_b, X_test_b, y_train, y_test)\n    print()","c65ecc53":"for index in range(1,44):\n    fe = RFE(RandomForestRegressor(n_estimators=100, random_state=100), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_randomForest(X_train_b, X_test_b, y_train, y_test)\n    print()","f2aec9d6":"for index in range(1,44):\n    fe = RFE(GradientBoostingRegressor(n_estimators=100, random_state=100), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_Gradient(X_train_b, X_test_b, y_train, y_test)\n    print()","fc3dcbf6":"fe = RFE(LinearRegression(), n_features_to_select = 26)\nfe.fit(X_train, y_train)\nX_train_b = fe.transform(X_train)\nX_test_b = fe.transform(X_test)\nprint('Selected Feature: ', 26)\nrun_randomForest(X_train_b, X_test_b, y_train, y_test)\nprint()","9a15b4e1":"fe = RFE(RandomForestRegressor(n_estimators=100, random_state=100), n_features_to_select = 12)\nfe.fit(X_train, y_train)\nX_train_b = fe.transform(X_train)\nX_test_b = fe.transform(X_test)\nprint('Selected Feature: ', 12)\nrun_randomForest(X_train_b, X_test_b, y_train, y_test)\nprint()","a64c9416":"fe = RFE(GradientBoostingRegressor(n_estimators=100, random_state=100), n_features_to_select = 4)\nfe.fit(X_train, y_train)\nX_train_b = fe.transform(X_train)\nX_test_b = fe.transform(X_test)\nprint('Selected Feature: ', 4)\nrun_Gradient(X_train_b, X_test_b, y_train, y_test)\nprint()","6d8b7f1d":"fe = RFE(LinearRegression(), n_features_to_select = 26)\nfe.fit(X_train, y_train)\nX_train_b = fe.transform(X_train)\nX_test_b = fe.transform(X_test)\nprint('Selected Feature: ', 26)\nrun_randomForest(X_train_b, X_test_b, y_train, y_test)\nprint()","b84d0f47":"a = X_train.columns[fe.get_support()]","d5f6db0f":"a","10b1a391":"lr = LinearRegression()\nlr.fit(X_train[a],y_train)\npred = lr.predict(X_test[a])\nr2_score(y_test,pred)","75b3e77e":"X_train_sm = sm.add_constant(X_train[a])\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","570f2205":"vif = pd.DataFrame()\nvif['Features'] = X_train[a].columns\nvif['VIF'] = [variance_inflation_factor(X_train[a].values, i) for i in range(X_train[a].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","15ecf041":"fe = RFE(RandomForestRegressor(n_estimators=100, random_state=100), n_features_to_select = 12)\nfe.fit(X_train, y_train)\nX_train_b = fe.transform(X_train)\nX_test_b = fe.transform(X_test)\nprint('Selected Feature: ', 12)\nrun_randomForest(X_train_b, X_test_b, y_train, y_test)\nprint()","1f3d6805":"b = X_train.columns[fe.get_support()]","45b4b4ee":"b","b6addfdb":"rf = RandomForestRegressor()\nrf.fit(X_train[b],y_train)\npred = rf.predict(X_test[b])\nr2_score(y_test,pred)","47823822":"X_train_sm = sm.add_constant(X_train[b])\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","efc69da1":"vif = pd.DataFrame()\nvif['Features'] = X_train[b].columns\nvif['VIF'] = [variance_inflation_factor(X_train[b].values, i) for i in range(X_train[b].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","73b18c1f":"fe = RFE(GradientBoostingRegressor(n_estimators=100, random_state=100), n_features_to_select = 4)\nfe.fit(X_train, y_train)\nX_train_b = fe.transform(X_train)\nX_test_b = fe.transform(X_test)\nprint('Selected Feature: ', 4)\nrun_Gradient(X_train_b, X_test_b, y_train, y_test)\nprint()","717c4bed":"c= X_train.columns[fe.get_support()]","8e16f93c":"c","23595994":"gb = GradientBoostingRegressor()\ngb.fit(X_train[c],y_train)\npred = gb.predict(X_test[c])\nr2_score(y_test,pred)","4f00b577":"X_train_sm = sm.add_constant(X_train[c])\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","4b2cb94b":"vif = pd.DataFrame()\nvif['Features'] = X_train[c].columns\nvif['VIF'] = [variance_inflation_factor(X_train[c].values, i) for i in range(X_train[c].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","89ab1989":"lr = LinearRegression()\nlr.fit(X_train[a],y_train)\npred = lr.predict(X_test[a])\nr2_score(y_test,pred)","acb3b80d":"plt.style.use('default')\ntitle = \"(Linear Regression)\"\ncv= 5\nplot_learning_curve(lr, title, X_train[a], \n                    y_train,cv=cv ,ylim=(0.2,1.0));","6e286cb5":"plt.scatter(y_test,pred)\nplt.show()","548bae21":"sns.distplot(y_test-pred)\nplt.show()","04ec99ee":"rf = RandomForestRegressor()\nrf.fit(X_train[b],y_train)\npred = rf.predict(X_test[b])\nr2_score(y_test,pred)","bde6bfd8":"title = \"(Random Forest)\"\ncv= 5\nplot_learning_curve(rf, title, X_train[b], \n                    y_train,cv=cv ,ylim=(0.2,1.0));","b990c046":"plt.scatter(y_test,pred)\nplt.show()","0616a8a1":"gb = GradientBoostingRegressor()\ngb.fit(X_train[c],y_train)\npred = gb.predict(X_test[c])\nr2_score(y_test,pred)","0d666ae4":"title = \"(Gradient Boosting)\"\ncv= 5\nplot_learning_curve(gb, title, X_train[c], \n                    y_train,cv=cv ,ylim=(0.2,1.0));","991316cc":"plt.scatter(y_test,pred)\nplt.show()","f1a6f74f":"lr = LinearRegression()\nrfe = RFE(lr, 14)             \nrfe = rfe.fit(X_train, y_train)\nprint(rfe.support_)          \nprint(rfe.ranking_) ","7e601697":"b=X_train.columns[rfe.get_support()]\nb","3b5af5be":"lr = LinearRegression()\nlr.fit(X_train[b],y_train)\npred = lr.predict(X_test[b])\nr2_score(y_test,pred)","991d7cd7":"X_train.shape","fe6e3f07":"folds = KFold(n_splits = 5, shuffle = True, random_state = 100)\n\n\nhyper_params = [{'n_features_to_select': list(range(1, 43))}]\n\nlm = LinearRegression()\nlm.fit(X_train, y_train)\nrfe = RFE(lm)             \n\nmodel_cv = GridSearchCV(estimator = rfe, \n                        param_grid = hyper_params, \n                        scoring= 'r2', \n                        cv = folds, \n                        verbose = 1,\n                        return_train_score=True)      \n\nmodel_cv.fit(X_train, y_train) ","79ab0fde":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results.head()","c637980d":"plt.figure(figsize=(16,6))\nplt.plot(cv_results[\"param_n_features_to_select\"], cv_results[\"mean_test_score\"])\nplt.plot(cv_results[\"param_n_features_to_select\"], cv_results[\"mean_train_score\"])\nplt.xlabel('number of features')\nplt.ylabel('r-squared')\nplt.title(\"Optimal Number of Features\")\nplt.legend(['test score', 'train score'], loc='upper left')\nplt.show()","316dec95":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","65bc8436":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","9edbcc54":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","5fe36374":"X_train.drop('symboling',axis=1,inplace=True)\nX_test.drop('symboling',axis=1,inplace=True)","bd3bc4d5":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","9e733254":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","f109448e":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","fa962a06":"X_train.drop('wheelbase',axis=1,inplace=True)\nX_test.drop('wheelbase',axis=1,inplace=True)","7039a5bb":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","8392a015":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","c8015ea8":"X_train.drop('carlength',axis=1,inplace=True)\nX_test.drop('carlength',axis=1,inplace=True)","ca35eeff":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","a17a75f4":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","52a61160":"X_train.drop('carheight',axis=1,inplace=True)\nX_test.drop('carheight',axis=1,inplace=True)","36b77d88":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","4ec1e329":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","287c84af":"X_train.drop('curbweight',axis=1,inplace=True)\nX_test.drop('curbweight',axis=1,inplace=True)","7626f014":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","38e17188":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","7330a00c":"X_train.drop('compressionratio',axis=1,inplace=True)\nX_test.drop('compressionratio',axis=1,inplace=True)","ec73cb25":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","56a59839":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","45a50f0a":"X_train.drop('horsepower',axis=1,inplace=True)\nX_test.drop('horsepower',axis=1,inplace=True)","13b67e47":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","0c46d86d":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","f89791f4":"X_train.drop('citympg',axis=1,inplace=True)\nX_test.drop('citympg',axis=1,inplace=True)","84e55aa2":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","0eedcb18":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","9208a8ec":"X_train.drop('highwaympg',axis=1,inplace=True)\nX_test.drop('highwaympg',axis=1,inplace=True)","8d8e9eda":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","34195321":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","2ad6a4da":"X_train.drop('fueltype_gas',axis=1,inplace=True)\nX_test.drop('fueltype_gas',axis=1,inplace=True)","a40c4a91":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","bcefaafa":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","1834c5ed":"X_train.drop('doornumber_two',axis=1,inplace=True)\nX_test.drop('doornumber_two',axis=1,inplace=True)","3561beee":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","6c2e8990":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","6e567161":"X_train.drop('carbody_hardtop',axis=1,inplace=True)\nX_test.drop('carbody_hardtop',axis=1,inplace=True)","308a29ef":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","e2496a31":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","20267ac1":"X_train.drop('carbody_hatchback',axis=1,inplace=True)\nX_test.drop('carbody_hatchback',axis=1,inplace=True)","2b39944b":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","eefa5c3f":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","8a307924":"X_train.drop(['carbody_sedan','carbody_wagon','drivewheel_fwd','drivewheel_rwd','enginetype_dohcv'],axis=1,inplace=True)\nX_test.drop(['carbody_sedan','carbody_wagon','drivewheel_fwd','drivewheel_rwd','enginetype_dohcv'],axis=1,inplace=True)","2230bf26":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","abec7393":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","083142af":"X_train.drop(['enginelocation_rear','enginetype_l','enginetype_ohcf','cylindernumber_five','cylindernumber_four','cylindernumber_five'],axis=1,inplace=True)\nX_test.drop(['enginelocation_rear','enginetype_l','enginetype_ohcf','cylindernumber_five','cylindernumber_four','cylindernumber_five'],axis=1,inplace=True)","65b300a4":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","88231d53":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","d1f45886":"X_train.drop(['cylindernumber_six','fuelsystem_2bbl','fuelsystem_4bbl','fuelsystem_idi','fuelsystem_mfi','fuelsystem_mpfi','fuelsystem_spdi'],axis=1,inplace=True)\nX_test.drop(['cylindernumber_six','fuelsystem_2bbl','fuelsystem_4bbl','fuelsystem_idi','fuelsystem_mfi','fuelsystem_mpfi','fuelsystem_spdi'],axis=1,inplace=True)","938bb914":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","fa71b7f8":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","caba2d7c":"X_train.drop('fuelsystem_spfi',axis=1,inplace=True)\nX_test.drop('fuelsystem_spfi',axis=1,inplace=True)","21d808da":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","0fd93e4e":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","121ffa65":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","2c7e289e":"X_train.drop('enginetype_rotor',axis=1,inplace=True)\nX_test.drop('enginetype_rotor',axis=1,inplace=True)","fdd05e68":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","5db8e1b1":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","26e952b7":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","db2a2553":"X_train.drop('stroke',axis=1,inplace=True)\nX_test.drop('stroke',axis=1,inplace=True)","9afef4ea":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","e2626606":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","2b78f1c5":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","ac88327c":"X_train.drop('carwidth',axis=1,inplace=True)\nX_test.drop('carwidth',axis=1,inplace=True)","53b32eb9":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","57a71634":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","31b10690":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","05ebbdb4":"X_train.drop(['boreratio'],axis=1,inplace=True)\nX_test.drop(['boreratio'],axis=1,inplace=True)","13bb1bb6":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","66959abd":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","631759a8":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","873d114a":"X_train.drop(['enginetype_ohc'],axis=1,inplace=True)\nX_test.drop(['enginetype_ohc'],axis=1,inplace=True)","be319b25":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","b97149cf":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","c24f3477":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","0b66fd4a":"X_train.drop(['cylindernumber_three'],axis=1,inplace=True)\nX_test.drop(['cylindernumber_three'],axis=1,inplace=True)","410fd8ee":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","6978a60f":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","0e24bf12":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","c49bf10d":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","140e693f":"rf = RandomForestRegressor(n_estimators=100)\nrf.fit(X_train,y_train)\npred = rf.predict(X_test)\nr2_score(y_test,pred)","f06b9f60":"gb = GradientBoostingRegressor()\ngb.fit(X_train,y_train)\npred = gb.predict(X_test)\nr2_score(y_test,pred)","339f9d57":"svm = SVR()\nsvm.fit(X_train,y_train)\npred = svm.predict(X_test)\nr2_score(y_test,pred)","ccfce260":"plt.style.use('default')\nlr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)\ntitle = \"Learning Curve (Linear Regression)\"\ncv = 5\nplot_learning_curve(lr, title, X_train, \n                    y_train, ylim=(0.1, 1.0), cv=cv, n_jobs=-1);","7056cfa8":"plt.figure(figsize=(10,5))\nplt.style.use('default')\nlr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)\nplt.scatter(y_test,pred)\nplt.show()","8f26f498":"plt.figure(figsize=(10,5))\nsns.distplot(y_test-pred)\nplt.show()","f7111daf":"title = \"Learning Curve (Random Forest)\"\ncv = 5\nplot_learning_curve(rf, title, X_train, \n                    y_train, ylim=(0.1, 1.0), cv=cv, n_jobs=-1);","4ffa6135":"plt.figure(figsize=(10,5))\nplt.style.use('default')\nlr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)\nplt.scatter(y_test,pred)\nplt.show()","7e25208b":"title = \"Learning Curve (Gradient Boosting)\"\ncv = 5\nplot_learning_curve(gb, title, X_train, \n                    y_train, ylim=(0.1, 1.0), cv=cv, n_jobs=-1);","c2893c97":"plt.figure(figsize=(10,5))\nplt.style.use('default')\nlr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)\nplt.scatter(y_test,pred)\nplt.show()","3eca2ff1":"rf = RandomForestRegressor(n_estimators=100)\nrf.fit(X_train,y_train)\npred = rf.predict(X_test)\nr2_score(y_test,pred)","c55682c4":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\n\nn_folds = 5\nparameters = {'max_depth': [1,2,3,4,5]}\ndtree = DecisionTreeRegressor(criterion='mse',\n                               random_state = 100)\ntree = GridSearchCV(dtree, parameters, \n                    cv=n_folds,\n                   return_train_score=True)\ntree.fit(X_train, y_train)\nscores = tree.cv_results_\npd.DataFrame(scores).head()","0fa9b97a":"plt.figure()\nplt.plot(scores[\"param_max_depth\"], \n         scores[\"mean_train_score\"], \n         label=\"training accuracy\")\nplt.plot(scores[\"param_max_depth\"], \n         scores[\"mean_test_score\"], \n         label=\"test accuracy\")\nplt.xlabel(\"max_depth\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()","e2781527":"n_folds = 5\nparameters = {'min_samples_leaf': [1,2,3,4,5]}\ndtree = DecisionTreeRegressor(criterion='mse',\n                               random_state = 100)\ntree = GridSearchCV(dtree, parameters, \n                    cv=n_folds,\n                   return_train_score=True)\ntree.fit(X_train, y_train)\nscores = tree.cv_results_\npd.DataFrame(scores).head()","29add022":"plt.figure()\nplt.plot(scores[\"param_min_samples_leaf\"], \n         scores[\"mean_train_score\"], \n         label=\"training accuracy\")\nplt.plot(scores[\"param_min_samples_leaf\"], \n         scores[\"mean_test_score\"], \n         label=\"test accuracy\")\nplt.xlabel(\"min_samples_leaf\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()","c4d5e23a":"n_folds = 5\nparameters = {'min_samples_split': [2,3,4,5]}\ndtree = DecisionTreeRegressor(criterion='mse',\n                               random_state = 100)\ntree = GridSearchCV(dtree, parameters, \n                    cv=n_folds,\n                   return_train_score=True)\ntree.fit(X_train, y_train)\nscores = tree.cv_results_\npd.DataFrame(scores).head()","c335ccdd":"plt.figure()\nplt.plot(scores[\"param_min_samples_split\"], \n         scores[\"mean_train_score\"], \n         label=\"training accuracy\")\nplt.plot(scores[\"param_min_samples_split\"], \n         scores[\"mean_test_score\"], \n         label=\"test accuracy\")\nplt.xlabel(\"min_samples_split\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()","9d13db64":"results = []\nn_estimator_options = [10,20,30,40,50,60,70,80,90,100,110,120]\nfor trees in n_estimator_options:\n    model = RandomForestRegressor(trees,n_jobs=-1,random_state=100)\n    model.fit(X_train,y_train)\n    pred = model.predict(X_test)\n    print (trees,\"trees\")\n    roc = r2_score(y_test,pred)\n    print(\"accuary\",roc)\n    results.append(roc)\n    print (\"\")\n        \npd.Series(results,n_estimator_options).plot() \nplt.show()","e4f7d1c2":"result = []\nmax_features_options = [\"auto\",None,\"sqrt\",\"log2\",0.9,0.2]\nfor max_features in max_features_options:\n    model = RandomForestRegressor(n_estimators=50,n_jobs=-1,random_state=100,max_features=max_features)\n    model.fit(X_train,y_train)\n    pred = model.predict(X_test)\n    print (max_features,\"option\")\n    roc = r2_score(y_test,pred)\n    print(\"accuary\",roc)\n    result.append(roc)\n    print (\"\")\npd.Series(result,max_features_options).plot() \nplt.show()","9977d37c":"result = []\nmin_samples_split_options = [2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n\nfor min_split in min_samples_split_options:\n    model = RandomForestRegressor(n_estimators=100,\n                                  n_jobs=-1,\n                                  random_state=100,\n                                  max_features=0.9,\n                                  min_samples_split=min_split)\n    model.fit(X_train,y_train)\n    print(min_split,\"min_sample_split\")\n    pred = model.predict(X_test)\n    roc = r2_score(y_test,pred)\n    print(\"min_sample_split\",roc)\n    result.append(roc)\n    print(\"\")\npd.Series(result,min_samples_split_options).plot() \nplt.show()","2bcae96b":"result = []\nmin_samples_leaf_options = [1,2,3,4]\n\nfor min_sample in min_samples_leaf_options:\n    model = RandomForestRegressor(n_estimators=100,\n                                  n_jobs=-1,\n                                  random_state=100,\n                                  max_features=0.9,\n                                  min_samples_leaf=min_sample)\n    model.fit(X_train,y_train)\n    print(min_sample,\"min_sample\")\n    pred = model.predict(X_test)\n    roc = r2_score(y_test,pred)\n    print(\"min_sample\",roc)\n    result.append(roc)\n    print(\"\")\npd.Series(result,min_samples_leaf_options).plot() \nplt.show()","0ec7c0f1":"rf = RandomForestRegressor()\n\nscores = cross_val_score(rf, X_train, y_train, cv=5)\n\nprint(scores.mean())\n\nrf.fit(X_train, y_train)\ntrain_predictions = rf.predict(X_train)\ntest_predictions = rf.predict(X_test)\n\nprint('Before Parameter Tuning')\nprint('The Training R2 Score is', r2_score(y_train,train_predictions))\nprint('The Testing R2 Score is', r2_score(y_test,test_predictions))\n\nparameters = {   \n              'max_depth':[1,2,3,4,5], \n              'min_samples_leaf':[1,2,3,4,5], \n              'min_samples_split':[2,3,4,5],\n              'n_estimators': [50,100,150],\n              'max_features' : ['auto'],\n              \n              \n    \n              }\n\n\ndef generate_model_from_search(grid_or_random,model, parameters,X, y):\n    if grid_or_random == \"Grid\":\n        search_obj = GridSearchCV(model, parameters)\n    elif grid_or_random == \"Random\":\n        search_obj = RandomizedSearchCV(model, parameters,cv=5,n_jobs=-1,verbose=5,random_state=100)\n    fit_obj = search_obj.fit(X, y)\n    best_model = fit_obj.best_estimator_\n    return best_model\n\nbest_model_random = generate_model_from_search(\"Random\", \n                                           rf, \n                                           parameters, \n                                           X_train, \n                                           y_train,\n                                            )\n\nscores = cross_val_score(best_model_random, X_train, y_train, cv=5,n_jobs=-1, verbose=5)\nprint(scores.mean())\n\nbest_model_random.fit(X_train, y_train)\nbest_train_predictions = best_model_random.predict(X_train)\nbest_test_predictions = best_model_random.predict(X_test)\nprint('After Parameter Tuning')\nprint('The training R2 Score is', r2_score(y_train,best_train_predictions))\nprint('The testing R2 Score is', r2_score(y_test,best_test_predictions))","918becbf":"rf = RandomForestRegressor()\n\nscores = cross_val_score(rf, X_train, y_train, cv=5)\n\nprint(scores.mean())\n\nrf.fit(X_train, y_train)\ntrain_predictions = rf.predict(X_train)\ntest_predictions = rf.predict(X_test)\n\nprint('Before Parameter Tuning')\nprint('The Training R2 Score is', r2_score(y_train,train_predictions))\nprint('The Testing R2 Score is', r2_score(y_test,test_predictions))\n\nparameters = {   \n              'max_depth':[5], \n              'min_samples_leaf':[1], \n              'min_samples_split':[2],\n              'n_estimators': [150],\n              'max_features' : ['auto'],\n              \n              \n    \n              }\n\n\ndef generate_model_from_search(grid_or_random,model, parameters,X, y):\n    if grid_or_random == \"Grid\":\n        search_obj = GridSearchCV(model, parameters)\n    elif grid_or_random == \"Random\":\n        search_obj = RandomizedSearchCV(model, parameters,cv=5,n_jobs=-1,verbose=5,random_state=100)\n    fit_obj = search_obj.fit(X, y)\n    best_model = fit_obj.best_estimator_\n    return best_model\n\nbest_model_random = generate_model_from_search(\"Random\", \n                                           rf, \n                                           parameters, \n                                           X_train, \n                                           y_train,\n                                            )\n\nscores = cross_val_score(best_model_random, X_train, y_train, cv=5,n_jobs=-1, verbose=5)\nprint(scores.mean())\n\nbest_model_random.fit(X_train, y_train)\nbest_train_predictions = best_model_random.predict(X_train)\nbest_test_predictions = best_model_random.predict(X_test)\nprint('After Parameter Tuning')\nprint('The training R2 Score is', r2_score(y_train,best_train_predictions))\nprint('The testing R2 Score is', r2_score(y_test,best_test_predictions))","ad330fa0":"gb = GradientBoostingRegressor()\n\nscores = cross_val_score(gb, X_train, y_train, cv=5)\n\nprint(scores.mean())\n\ngb.fit(X_train, y_train)\ntrain_predictions = gb.predict(X_train)\ntest_predictions = gb.predict(X_test)\n\nprint('Before Parameter Tuning')\nprint('The Training R2 Score is', r2_score(y_train,train_predictions))\nprint('The Testing R2 Score is', r2_score(y_test,test_predictions))\n\nparameters = {   \n              'max_depth':[5], \n              'min_samples_leaf':[1], \n              'min_samples_split':[2],\n              'n_estimators': [150],\n              'max_features' : ['auto'],\n            }\n\n\n\ndef generate_model_from_search(grid_or_random,model, parameters,X, y):\n    if grid_or_random == \"Grid\":\n        search_obj = GridSearchCV(model, parameters)\n    elif grid_or_random == \"Random\":\n        search_obj = RandomizedSearchCV(model, parameters,cv=5,n_jobs=-1,verbose=5,random_state=100)\n    fit_obj = search_obj.fit(X, y)\n    best_model = fit_obj.best_estimator_\n    return best_model\n\nbest_model_random = generate_model_from_search(\"Random\", \n                                           gb, \n                                           parameters, \n                                           X_train, \n                                           y_train,\n                                            )\n\nscores = cross_val_score(best_model_random, X_train, y_train, cv=5,n_jobs=-1, verbose=5)\nprint(scores.mean())\n\nbest_model_random.fit(X_train, y_train)\nbest_train_predictions = best_model_random.predict(X_train)\nbest_test_predictions = best_model_random.predict(X_test)\nprint('After Parameter Tuning')\nprint('The training R2 Score is', r2_score(y_train,best_train_predictions))\nprint('The testing R2 Score is', r2_score(y_test,best_test_predictions))","cf6a6a22":"# Data"}}