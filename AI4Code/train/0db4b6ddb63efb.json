{"cell_type":{"e2ad8745":"code","5f7bc485":"code","5ef97349":"code","d3c8c406":"code","44e11b73":"code","b3312da2":"code","7e575a36":"code","b11201a3":"code","c950bfd7":"code","3b1ff2f5":"code","f110bccc":"code","bf99b387":"code","791adc01":"code","cdf244b4":"code","dafb3ffa":"code","27bfe5dd":"code","e1b0eb56":"code","77261b8d":"code","4c6ffeca":"code","f0e2882a":"markdown","86e988fb":"markdown","82a03c46":"markdown","0b721b39":"markdown","7a9f41be":"markdown","78812070":"markdown","deb4b6c7":"markdown","8860fd66":"markdown","db72d09e":"markdown","8e61d086":"markdown","6b17f469":"markdown","ccb9fbc1":"markdown"},"source":{"e2ad8745":"# Importing Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalization\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.preprocessing import image","5f7bc485":"# dataset path\ndata_dir = '\/kaggle\/input\/yoga-pose-image-classification-dataset\/dataset\/'\n\ndata = tf.keras.preprocessing.image_dataset_from_directory(data_dir)","5ef97349":"# Create an ImageDataGenerator and do Image Augmentation\ndatagen = ImageDataGenerator(\n        rescale = 1.\/255,\n        rotation_range = 40,\n        width_shift_range = 0.2,\n        height_shift_range = 0.2,\n        shear_range = 0.2,\n        zoom_range = 0.2,\n        horizontal_flip = True,\n        fill_mode = 'nearest',\n        validation_split = 0.2\n)","d3c8c406":"height = 224\nwidth = 224\nchannels = 3\nbatch_size = 32\nimg_shape = (height, width, channels)\nimg_size = (height, width)","44e11b73":"train_data = datagen.flow_from_directory(\n    data_dir,\n    target_size = img_size,\n    batch_size = batch_size,\n    class_mode = 'categorical',\n    subset = 'training')\n\nval_data = datagen.flow_from_directory(\n    data_dir,\n    target_size = img_size,\n    batch_size = batch_size,\n    class_mode='categorical',\n    subset = 'validation')","b3312da2":"num_classes = len(data.class_names)\nprint('.... Number of Classes : {0} ....'.format(num_classes))","7e575a36":"#Defing a function to see images\ndef show_img(data):\n    plt.figure(figsize=(15,15))\n    for images, labels in data.take(1):\n        for i in range(9):\n            ax = plt.subplot(3, 3, i + 1)\n            ax.imshow(images[i].numpy().astype(\"uint8\"))\n            ax.axis(\"off\")\n\n#Plotting the images in dataset\nshow_img(data)","b11201a3":"# load pre-trained InceptionV3\npre_trained = InceptionV3(weights='imagenet', include_top=False, input_shape=img_shape, pooling='avg')\n\n# The last 15 layers fine tune\nfor layer in pre_trained.layers[:-15]:\n    layer.trainable = False\n\n# The last 15 layers fine tune\nfor layer in pre_trained.layers[-15:]:\n    layer.trainable = True","c950bfd7":"x = pre_trained.output\nx = BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001)(x)\nx = Dense(128, activation='relu')(x)\nx = Dropout(0.2)(x)\npredictions = Dense(num_classes, activation='softmax')(x)\n\nmodel = Model(inputs = pre_trained.input, outputs = predictions)\nmodel.compile(optimizer = Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])","3b1ff2f5":"STEP_SIZE_TRAIN = train_data.n \/\/ train_data.batch_size\nSTEP_SIZE_VALID = val_data.n \/\/ val_data.batch_size\n\nhistory = model.fit_generator(train_data,\n                    steps_per_epoch = STEP_SIZE_TRAIN,\n                    validation_data = val_data,\n                    validation_steps = STEP_SIZE_VALID,\n                    epochs = 50,\n                    verbose = 1)","f110bccc":"plt.xlabel('Epoch Number')\nplt.ylabel('Loss')\nplt.plot(history.history['loss'], label='training set')\nplt.plot(history.history['val_loss'], label='validation set')\nplt.legend()","bf99b387":"plt.xlabel('Epoch Number')\nplt.ylabel('Accuracy')\nplt.plot(history.history['accuracy'], label='training set')\nplt.plot(history.history['val_accuracy'], label='validation set')\nplt.legend()","791adc01":"model_name = 'yoga_asans_recognition_inceptionV3.h5'\nmodel.save(model_name, save_format='h5')","cdf244b4":"class_map = train_data.class_indices\nclasses = []\nfor key in class_map.keys():\n    classes.append(key)","dafb3ffa":"def predict_image(filename, model):\n    img_ = image.load_img(filename, target_size=(224, 224))\n    img_array = image.img_to_array(img_)\n    img_processed = np.expand_dims(img_array, axis=0)\n    img_processed \/= 255.\n    \n    prediction = model.predict(img_processed)\n    \n    index = np.argmax(prediction)\n    \n    plt.title(\"Prediction - {}\".format(str(classes[index]).title()), size=18, color='red')\n    plt.imshow(img_array)","27bfe5dd":"predict_image('\/kaggle\/input\/yoga-pose-image-classification-dataset\/dataset\/dhanurasana\/17-0.png', model)","e1b0eb56":"predict_image('\/kaggle\/input\/yoga-pose-image-classification-dataset\/dataset\/malasana\/90-0.png', model)","77261b8d":"predict_image('\/kaggle\/input\/yoga-pose-image-classification-dataset\/dataset\/tolasana\/62-0.png', model)","4c6ffeca":"predict_image('\/kaggle\/input\/yoga-pose-image-classification-dataset\/dataset\/sukhasana\/2-0.png', model)","f0e2882a":"<a id=\"3\"><\/a>\n# <p style=\"background-color:blue;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">BUILDING MODEL<\/p>\n\n<p style=\"font-family:newtimeroman;color:#F47340;font-size:150%\">\n    Here I will be using pre-trained model, which can be done using Transfer Learning. The reuse of a previously learned model on a new problem is known as transfer learning. It\u2019s particularly popular in deep learning right now since it can train deep neural networks with a small amount of data. This is particularly valuable in the field of data science, as most real-world situations do not require millions of labelled data points to train complicated models. \n<\/p>\n\nReference : [Analytics Vidhya](https:\/\/www.analyticsvidhya.com\/blog\/2021\/10\/understanding-transfer-learning-for-deep-learning\/)","86e988fb":"<p style=\"font-family:newtimeroman;color:#F47340;font-size:150%\">\n    Now that I have the dataset loaded, let us have a look at a few images.\n<\/p>","82a03c46":"<a id=\"1\"><\/a>\n# <p style=\"background-color:blue;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">IMPORTING LIBRARIES<\/p>\n\n<p style=\"font-family:newtimeroman;color:#F47340;font-size:150%\">The following Libraries will be used in the notebook.<\/p>","0b721b39":"<a id='top'><\/a>\n<p style=\"background-color:blue;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">TABLE OF CONTENTS<\/p>   \n    \n* [IMPORTING LIBRARIES](#1)\n\n* [LOADING DATA](#2)\n\n* [BUILDING MODEL](#3)\n\n* [TRANSFER LEARNING USING INCEPTIONV3](#4)\n\n* [PLOTTING MODEL TRAINING AND VALIDATION RESULT](#5)\n\n* [SAVING MODEL](#6)\n","7a9f41be":"\n# <p style=\"background-color:blue;font-family:newtimeroman;color:#FFF9ED;font-size:200%;text-align:center;border-radius:10px 10px;\">Yoga Asanas<\/p>\n\n> The oldest scriptures of \"Vedas\" found are about 5000 years old. Vedas mention about Yoga and Asanas, but the first complete text on Yoga was written by Patanjali, 500 years BC. Asana is the third step in Patanjal Yoga (Ashtanga Yoga) and first step in the Hatha Yoga Pradipika written by Swami Swatmarama. Hatha Yoga Pradipika is believed to be the original text of Hatha Yoga. \nThe word asana is derived from the Sanskrit verb 'Aas' which means existence. The state of existence is Asana or position. Here the position of body as well as mind is expected in Asana. -- [Reference](http:\/\/diabeteshormone.com\/diabetes\/Details.aspx?DiabetesID=48)","78812070":"<a id=\"6\"><\/a>\n# <p style=\"background-color:blue;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">SAVING MODEL<\/p>\n\n<p style=\"font-family:newtimeroman;color:#F47340;font-size:150%\">\n    Let's save model for future.\n<\/p>","deb4b6c7":"<a id=\"2\"><\/a>\n# <p style=\"background-color:blue;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">LOADING DATA<\/p>\n\n<p style=\"font-family:newtimeroman;color:#F47340;font-size:150%\">\n    Here I will using Yoga Pose Image datasets. This dataset contains 5993 images and 107 different yoga asanas.\n<\/p>","8860fd66":"<a id=\"4\"><\/a>\n# <p style=\"background-color:blue;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">TRANSFER LEARNING USING INCEPTION V3<\/p>\n\n<p style=\"font-family:newtimeroman;color:#F47340;font-size:150%\">\n\nInception is a convolutional neural network architecture introduced by Google which achieved top results in ImageNet Large Scale Visual Recognition Challenge 2014.\n    \n<\/p>\n\n![](https:\/\/camo.githubusercontent.com\/d93725579fc7e7140a60faadaaf47ae93eda84b6\/68747470733a2f2f7777772e50657465724d6f7373416d6c416c6c52657365617263682e636f6d2f6d656469612f696d616765732f7265706f7369746f726965732f434e4e2e6a7067)\n\nImage Source: [Intel](https:\/\/www.intel.com\/content\/www\/us\/en\/developer\/articles\/technical\/inception-v3-deep-convolutional-architecture-for-classifying-acute-myeloidlymphoblastic.html)","db72d09e":"# **<span style=\"color:blue;\"> IF YOU LIKED THIS NOTEBOOK, PLEASE DO UPVOTE.<\/span>**\n\n# **<span style=\"color:blue;\"> BEST WISHES!<\/span>**","8e61d086":"<a id=\"5\"><\/a>\n# <p style=\"background-color:blue;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">PLOTTING MODEL TRAINING AND VALIDATION RESULT<\/p>","6b17f469":"<a id=\"7\"><\/a>\n# <p style=\"background-color:blue;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">PREDICTION<\/p>\n\n<p style=\"font-family:newtimeroman;color:#F47340;font-size:150%\">\n    Let's check how accurate is our model.\n<\/p>","ccb9fbc1":"<p style=\"font-family:newtimeroman;font-size:120%;color:#F47340;\">In this notebook, I will build Convolutional Neural Network (CNN or ConvNet) to classify yoga asanas."}}