{"cell_type":{"c5971e33":"code","408fc0b2":"code","a4c09410":"code","839913ec":"code","abc41031":"code","6186b3e6":"code","f9483229":"code","2e09d7ef":"code","230ed711":"code","2ca8569a":"code","b5d94a1e":"code","6f8e6d88":"code","da52a0da":"code","fd98ff62":"code","9fe55a10":"code","592a9448":"code","0b8cdce9":"code","4f948d58":"code","c97fb652":"code","3f63fd98":"code","b181ca30":"code","a5bde165":"code","dfc404f8":"code","b2171f07":"markdown","88dfb08e":"markdown"},"source":{"c5971e33":"import os\nimport cv2\nimport tqdm\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow import keras\nfrom keras import Sequential\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout\nfrom tensorflow.keras.utils import plot_model","408fc0b2":"def loadImages(fileNames, path):\n    print('form {} extracting cat images'.format(path))\n    \n    images = []\n    imagePaths = []    \n    \n    for fileName in fileNames:\n        if fileName[-1] == 't':\n            continue\n        imagePaths.append(os.path.join(path, fileName))\n        \n        \n    for imagePath in tqdm.tqdm(imagePaths):\n        \n        image = cv2.imread(imagePath)\n        if image is None:\n            continue\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        image = cv2.resize(image, (256, 256)) \n        \n        images.append(image)           \n    \n    return images","a4c09410":"images = []\nfor path, directories, fileNames in os.walk('..\/input\/cat-dataset'):\n     \n    if len(fileNames) is not 0:\n        images = loadImages(fileNames, path)\n        break\n\nprint(len(images))","839913ec":"imgs = np.array(images, dtype = 'float')\nimgs = imgs \/ 255.0","abc41031":"imgs.shape","6186b3e6":"imgs_lable = np.zeros(imgs.shape[0])\nimgs_lable.shape","f9483229":"plt.figure(figsize=(15,15))\nindex = np.random.choice(imgs.shape[0], 20, replace=False)\nfor i in range(20):\n    plt.subplot(5,4,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(imgs[index[i]])\nplt.show()","2e09d7ef":"images_gen = []\nfor path, directories, fileNames in os.walk('..\/input\/generatedimg'):\n     \n    if len(fileNames) is not 0:\n        images_gen = loadImages(fileNames, path)\n        break\n\nprint(len(images_gen))","230ed711":"imgs_gen = np.array(images_gen, dtype = 'float')\nimgs_gen = imgs_gen\/255","2ca8569a":"imgs_gen.shape","b5d94a1e":"imgsgen_lable = np.full((imgs_gen.shape[0], ), 1)\nimgsgen_lable.shape","6f8e6d88":"plt.figure(figsize=(15,15))\nindex = np.random.choice(imgs_gen.shape[0], 20, replace=False)\nfor i in range(20):\n    plt.subplot(5,4,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(imgs_gen[index[i]])\nplt.show()","da52a0da":"X = np.concatenate((imgs, imgs_gen))\ny = np.concatenate((imgs_lable, imgsgen_lable))\nprint(X.shape)\nprint(y.shape)","fd98ff62":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","9fe55a10":"layers = [\n    Conv2D(32, kernel_size = (3, 3), input_shape = (256, 256, 3), activation = 'relu', padding = 'same'),\n    Dropout(0.5),\n    MaxPooling2D(5, 5),\n    Conv2D(64, kernel_size = (3, 3), activation = 'relu', padding = 'same'),\n    Dropout(0.7),\n    MaxPooling2D(5, 5),\n    Flatten(),\n    Dense(128, activation = 'sigmoid'),\n    Dropout(0.7),\n    Dense(32, activation = 'relu'),\n    Dropout(0.7),\n    Dense(2, activation = 'softmax')\n]\nmodel = Sequential(layers)\n\nprint(model.summary())","592a9448":"plot_model(model, show_shapes=True)","0b8cdce9":"model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics=['accuracy'])","4f948d58":"history = model.fit(X_train, y_train, \n                    batch_size = 25, \n                    epochs = 25, \n                    verbose = 1, \n                    validation_data = (X_test, y_test),\n                    shuffle=True)","c97fb652":"plt.plot(history.history[\"accuracy\"])\nplt.plot(history.history[\"val_accuracy\"])\nplt.title(\"Model accuracy\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Epoch\")\nplt.legend([\"Train\", \"Test\"])\nplt.show()","3f63fd98":"plt.plot(history.history[\"loss\"])\nplt.plot(history.history[\"val_loss\"])\nplt.title(\"Model loss\")\nplt.ylabel(\"Loss\")\nplt.xlabel(\"Epoch\")\nplt.legend([\"Train\", \"Test\"])\nplt.show()","b181ca30":"imag = cv2.imread('..\/input\/cat-dataset\/CAT_01\/00000100_002.jpg')\nimag = cv2.cvtColor(imag, cv2.COLOR_BGR2RGB)\nimag = cv2.resize(imag, (256, 256))\nimag = imag.reshape(-1, 256, 256, 3)\nimag = np.array(imag, dtype = 'float')\nimag = imag\/255\nimag.shape","a5bde165":"prediction = model.predict(imag)","dfc404f8":"print(prediction)","b2171f07":"# **Extracting generated images**","88dfb08e":"# **Extracting Real images**"}}