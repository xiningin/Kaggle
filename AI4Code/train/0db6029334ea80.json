{"cell_type":{"f0c6628d":"code","00a4ac2d":"code","af61b9bc":"code","b7e8d5e0":"code","77ca1ed4":"code","257b0698":"code","31f159fb":"code","acc3a2cd":"code","da00f310":"code","8355b76d":"code","2760a7bb":"code","a45c91c0":"code","43490d6f":"code","cc324380":"code","9964b21f":"code","08cddd5d":"code","b399aeeb":"code","5f7a9271":"markdown","d2ada87b":"markdown","1d5c9654":"markdown","a9b2aa7c":"markdown","c507364d":"markdown","dbe1f73c":"markdown","61f572db":"markdown","d9d02367":"markdown","db8089d7":"markdown","5d96557b":"markdown"},"source":{"f0c6628d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # For Data Visualization\n\n# Load Data\ndf_train = pd.read_csv('\/kaggle\/input\/widsdatathon2021\/TrainingWiDS2021.csv',index_col=0)\ndf_test = pd.read_csv('\/kaggle\/input\/widsdatathon2021\/UnlabeledWiDS2021.csv',index_col=0)\ndf_dict = pd.read_csv('\/kaggle\/input\/widsdatathon2021\/DataDictionaryWiDS2021.csv')\ndf_sample = pd.read_csv('\/kaggle\/input\/widsdatathon2021\/SampleSubmissionWiDS2021.csv')\ndf_template = pd.read_csv('\/kaggle\/input\/widsdatathon2021\/SolutionTemplateWiDS2021.csv')","00a4ac2d":"print(f'Number of Records in Training: {len(df_train)}')\nprint(f'Number of Records in Test: {len(df_test)}')","af61b9bc":"# Target Variable Distribution in Training\ndf_train.groupby('diabetes_mellitus').encounter_id.count()","b7e8d5e0":"df_0 = df_train[df_train['diabetes_mellitus']==0]\ndf_1 = df_train[df_train['diabetes_mellitus']==1]\ndiff = len(df_0) - len(df_1)\n\nprint(f\"Non Diabetes Class (0):{len(df_0)}\\nDiabetes Class (1): {len(df_1)},\\ndifference {diff}\")","77ca1ed4":"from sklearn.utils import resample\ndf_1_new = resample(df_1, replace=True,n_samples=90000,random_state= 2021)","257b0698":"print('After Balancing')\ndf_balanced = pd.concat([df_0, df_1_new])\ndf_balanced.groupby('diabetes_mellitus').encounter_id.count()","31f159fb":"# Remove Dependent Variable\ndf_train_1 = df_balanced.loc[:,'encounter_id':'solid_tumor_with_metastasis'].reset_index(drop=True)\n# Dependent Variable\ny = df_balanced['diabetes_mellitus']\ndf_test_1 = df_test.reset_index(drop=True)","acc3a2cd":"cat_clmns = df_train_1.dtypes[df_train_1.dtypes == \"object\"].index \nnumeric_clmns = df_train_1.dtypes[df_train_1.dtypes != \"object\"].index\n\n#Categorical Values\ndf_train_1[cat_clmns] = df_train_1[cat_clmns].fillna(df_train_1[cat_clmns].mode().loc[0])\n# Numerical\ndf_train_1[numeric_clmns] = df_train_1[numeric_clmns].fillna(df_train_1[numeric_clmns].mean())\n\n# Impute Test \n# Categorical Values\ndf_test_1[cat_clmns] = df_test_1[cat_clmns].fillna(df_train_1[cat_clmns].mode().loc[0])\n# Numerical\ndf_test_1[numeric_clmns] = df_test_1[numeric_clmns].fillna(df_train_1[numeric_clmns].mean())","da00f310":"from sklearn.preprocessing import LabelEncoder\n\n# process columns, apply LabelEncoder to categorical features\nfor c in cat_clmns:\n    label_enc = LabelEncoder()\n    label_enc.fit(df_train_1[c].values)\n    # Training Data\n    df_train_1[c] = label_enc.transform(df_train_1[c].values)\n    # Testing Data\n    df_test_1[c] = label_enc.transform(df_test_1[c].values)","8355b76d":"df_train_2 = df_train_1.drop(['encounter_id', 'hospital_id'], axis = 1)\ndf_test_2 = df_test_1.drop(['encounter_id', 'hospital_id'], axis = 1)","2760a7bb":"from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import metrics\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n\nnfold = 5\nskf = StratifiedKFold(n_splits=nfold, shuffle=True, random_state=2019)\nX_train, X_test, y_train, y_test = train_test_split(df_train_2, y, test_size=0.2, random_state=42)","a45c91c0":"import xgboost as xgb\nfrom xgboost import XGBRegressor","43490d6f":"# Initiate classifier to use\nxgbb = XGBRegressor(n_estimators=250, silent=True, nthread=6, tree_method='gpu_hist', eval_metric='auc')\n","cc324380":"# A parameter grid for XGBoost\nparams = {\n        'min_child_weight': [1, 5, 10],\n        'gamma': [0.5, 1, 1.5, 2, 5],\n        'subsample': [0.6, 0.8, 1.0],\n        'colsample_bytree': [0.6, 0.8, 1.0],\n        'max_depth': [3, 5, 7, 10],\n        'learning_rate': [0.01, 0.02, 0.05]    \n        }\n\nrandom_search = RandomizedSearchCV(xgbb, \n                                   param_distributions=params, \n                                   scoring='roc_auc', \n                                   cv=skf.split(X_train,y_train), \n                                   verbose=3, \n                                   random_state=1001 )","9964b21f":"%%time \ntrain_model =random_search.fit(X_train,y_train)\npred = train_model.predict(X_test)\n# Output Best model\ntrain_model.best_params_","08cddd5d":"from sklearn.metrics import r2_score\nr2_score(pred, y_test.values)","b399aeeb":"y_pred_lgb = train_model.predict(df_test_2)\nframe_xgb = { 'encounter_id': df_test['encounter_id'], 'diabetes_mellitus': y_pred_lgb } \nresult = pd.DataFrame(frame_xgb) \nresult.to_csv('xgb_gpu.csv')","5f7a9271":"# Grid Search","d2ada87b":"### GPU Guadrails:\n\n1. Only 36 hours per week so use cautiously\n2. The clock starts from as soon as you enable the toggle, doesn't wait for you to run a cell or model\n3. You can NOT run data analysis on CPU and then move to GPU for model only, a new session re-starts when you enable or disable the GPU. So you need to run all on GPU.\n4. Ensure you extract your output before you disable the GPU because a new session will reset your dataframes.\n5. Basic data analysis does not take much time so don't worry running them on gpu because of #3, just ensure your code is error free, you should not waste gpu on debugging the code, thats all. Also, don't go out while it is running. :D \n\n\n\n### How to run XGB on GPU?\n\n1. If you want to run my file, just enable internet and run it\n2. If you want to run on your file and model\n* Check your file throughly for the issues and run for one parameter\n* Add tree_method='gpu_hist' in the XGB model\n* If you are sure enable internet and GPU\n* Run All","1d5c9654":"# XGB","a9b2aa7c":"# Impute","c507364d":"# Output","dbe1f73c":"# GPU + XGB","61f572db":"# Model Testing Prep","d9d02367":"# Encoding","db8089d7":"1. Great Kernal, learnt Resmapling [lightgbm-encoding-0-85883-score](https:\/\/www.kaggle.com\/hamzafarooq50\/lightgbm-encoding-0-85883-score\/comments)","5d96557b":"# Balancing the Data"}}