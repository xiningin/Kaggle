{"cell_type":{"03801f36":"code","51461e30":"code","d5c2d840":"code","ad82c849":"code","7e8d9859":"code","a1e3af52":"code","94f549ce":"code","01625fe1":"code","9de39a48":"code","3e364cee":"code","7bf47da4":"code","d875788c":"code","bc9f4199":"code","f0b58ba0":"code","891ed920":"code","57e1c7f3":"code","c518bead":"code","2c7d670c":"code","20309421":"code","43b1c8cf":"code","d3e6d4b4":"code","d26b81ef":"code","e75ac34d":"code","bee71ebb":"code","9eeaa8ec":"code","c8e2335b":"code","b3f80dee":"code","03e5c637":"code","1331f209":"code","b5ff2ae9":"code","49eac24a":"code","02f60176":"code","47e1165c":"code","2e78c9b3":"code","ce95460a":"code","82ebfe99":"code","d1e63e70":"code","dff9abb5":"code","0d71212c":"code","1546f7d6":"code","71888f37":"code","27f9e798":"code","4541c879":"code","8d1f1066":"code","790f9291":"code","319ed13e":"code","83a8353c":"code","ca73648d":"code","49bab708":"code","4d490ecf":"code","63264da9":"code","64b19ca9":"code","7c93e6ca":"code","0f81fbe8":"code","ed3e3a1f":"code","07a31a37":"code","bbf7cb90":"code","91af022e":"code","c0979c06":"code","d763c52d":"code","33d857a0":"code","04b74c82":"code","9531d36b":"code","c57a2252":"code","440f797d":"code","ebca2086":"markdown","9fd5c2da":"markdown","84bfd720":"markdown","4978c84a":"markdown","d588ba67":"markdown","f607fcf9":"markdown","441b2012":"markdown","2b90999b":"markdown","e21556c4":"markdown","bd795b70":"markdown","b13e1ff3":"markdown","6dbebfc1":"markdown","3cf45717":"markdown","6c73798e":"markdown","c7b3b648":"markdown"},"source":{"03801f36":"from sklearn import tree\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, RandomizedSearchCV\nfrom sklearn.metrics import precision_score, recall_score, f1_score, roc_curve, auc\n\nimport xgboost as xgb\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","51461e30":"sns.set(rc={'figure.figsize': (9, 6)})","d5c2d840":"titanic_data = pd.read_csv('..\/input\/titanic\/train.csv')","ad82c849":"titanic_data.head()","7e8d9859":"titanic_data.isnull().sum()","a1e3af52":"X = titanic_data.drop(columns=['Name', 'Ticket', 'Cabin'])","94f549ce":"fem = X.query('Sex == \"female\"')\nfem = fem.fillna({'Age': fem.Age.median()})\nml = X.query('Sex == \"male\"')\nml = ml.fillna({'Age': ml.Age.median()})\nX = fem.append(ml)\ny = X.Survived\nX = X.drop(columns=['Survived', 'PassengerId'])\nX = pd.get_dummies(X)\nX = X.fillna({'Fare': X.Fare.median()}).drop(columns=['Sex_male'])","01625fe1":"X.tail()","9de39a48":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","3e364cee":"clf = tree.DecisionTreeClassifier()","7bf47da4":"parameters = {'criterion': ['gini', 'entropy'], 'max_depth': range(3, 15),\n              'min_samples_split': range(50, 500, 10),\n              'min_samples_leaf': range(50, 500, 10)}","d875788c":"rand_search_cv_clf = RandomizedSearchCV(clf, parameters, cv=5, scoring='roc_auc',\n                                        n_iter=500, random_state=42, n_jobs=-1)","bc9f4199":"rand_search_cv_clf.fit(X_train, y_train)","f0b58ba0":"rand_search_cv_clf.best_params_","891ed920":"tree_best_clf = rand_search_cv_clf.best_estimator_","57e1c7f3":"tree_best = np.array([tree_best_clf.score(X_test, y_test), precision_score(y_test,\n                                                                           tree_best_clf.predict(X_test)),\n      recall_score(y_test, tree_best_clf.predict(X_test)),\n      f1_score(y_test, tree_best_clf.predict(X_test))])\ntree_best","c518bead":"y_predicted_prob = tree_best_clf.predict_proba(X_test)\ntree_fpr, tree_tpr, thresholds = roc_curve(y_test, y_predicted_prob[:,1])\ntree_roc_auc= auc(tree_fpr, tree_tpr)","2c7d670c":"clf = LogisticRegression()","20309421":"parameters = {'solver': ['newton-cg', 'lbfgs', 'sag', 'saga'], \n              'max_iter': range(2000, 5000, 100), \n              'penalty': ['none', 'l2']}","43b1c8cf":"rand_search_cv_clf = RandomizedSearchCV(clf, parameters, cv=5, scoring='roc_auc',\n                                        n_iter=30, random_state=42, n_jobs=-1)","d3e6d4b4":"rand_search_cv_clf.fit(X_train, y_train)","d26b81ef":"rand_search_cv_clf.best_params_","e75ac34d":"regr_best_clf = rand_search_cv_clf.best_estimator_","bee71ebb":"regr_best = np.array([regr_best_clf.score(X_test, y_test), precision_score(y_test,\n                                                                           regr_best_clf.predict(X_test)),\n      recall_score(y_test, regr_best_clf.predict(X_test)),\n      f1_score(y_test, regr_best_clf.predict(X_test))])\nregr_best","9eeaa8ec":"y_predicted_prob = regr_best_clf.predict_proba(X_test)\nregr_fpr, regr_tpr, thresholds = roc_curve(y_test, y_predicted_prob[:,1])\nregr_roc_auc= auc(regr_fpr, regr_tpr)","c8e2335b":"clf = RandomForestClassifier()","b3f80dee":"parameters = {'n_estimators': range(10, 150, 5), 'criterion': ['gini', 'entropy'],\n              'max_depth': range(3, 15),\n              'min_samples_split': range(10, 500, 10),\n              'min_samples_leaf': range(10, 500, 10)}","03e5c637":"rand_search_cv_clf = RandomizedSearchCV(clf, parameters, cv=5, scoring='roc_auc',\n                                        n_iter=300, random_state=42, n_jobs=-1)","1331f209":"rand_search_cv_clf.fit(X_train, y_train)","b5ff2ae9":"rand_search_cv_clf.best_params_","49eac24a":"forest_best_clf = rand_search_cv_clf.best_estimator_","02f60176":"forest_best = np.array([forest_best_clf.score(X_test, y_test), precision_score(y_test,\n                                                                               forest_best_clf.predict(X_test)),\n      recall_score(y_test, forest_best_clf.predict(X_test)),\n      f1_score(y_test, forest_best_clf.predict(X_test))])\nforest_best","47e1165c":"y_predicted_prob = forest_best_clf.predict_proba(X_test)\nforest_fpr, forest_tpr, thresholds = roc_curve(y_test, y_predicted_prob[:,1])\nforest_roc_auc= auc(forest_fpr, forest_tpr)","2e78c9b3":"clf = xgb.XGBClassifier()","ce95460a":"parameters = {'learning_rate': [0.1, 0.3, 0.6, 0.9],\n              'verbosity': range(0, 4),\n              'booster': ['gbtree', 'gblinear', 'dart'],\n              'max_depth': range(3, 15), 'min_samples_split': range(10, 1000, 10),\n              'min_samples_leaf': range(10, 1000, 10),\n              'n_estimators': range(10, 150, 5)}","82ebfe99":"rand_search_cv_clf = RandomizedSearchCV(clf, parameters, cv=5, scoring='roc_auc',\n                                        n_iter=300, random_state=42, n_jobs=-1)","d1e63e70":"rand_search_cv_clf.fit(X_train, y_train)","dff9abb5":"rand_search_cv_clf.best_params_","0d71212c":"xgb_best_clf = rand_search_cv_clf.best_estimator_","1546f7d6":"xgb_best = np.array([xgb_best_clf.score(X_test, y_test), precision_score(y_test,\n                                                                               xgb_best_clf.predict(X_test)),\n      recall_score(y_test, xgb_best_clf.predict(X_test)),\n      f1_score(y_test, xgb_best_clf.predict(X_test))])\nxgb_best","71888f37":"y_predicted_prob = xgb_best_clf.predict_proba(X_test)\nxgb_fpr, xgb_tpr, thresholds = roc_curve(y_test, y_predicted_prob[:,1])\nxgb_roc_auc= auc(xgb_fpr, xgb_tpr)","27f9e798":"clf = xgb.XGBRFClassifier()","4541c879":"parameters = {'learning_rate': [0.1, 0.3, 0.5, 1, 3, 5, 10],\n              'verbosity': range(0, 4),\n              'booster': ['gbtree', 'gblinear', 'dart'],\n              'max_depth': range(3, 15), 'min_samples_split': range(10, 1000, 10),\n              'min_samples_leaf': range(10, 1000, 10),\n              'n_estimators': range(10, 150, 5)}","8d1f1066":"rand_search_cv_clf = RandomizedSearchCV(clf, parameters, cv=5, scoring='roc_auc',\n                                        n_iter=300, random_state=42, n_jobs=-1)","790f9291":"rand_search_cv_clf.fit(X_train, y_train)","319ed13e":"rand_search_cv_clf.best_params_","83a8353c":"xgbrf_best_clf = rand_search_cv_clf.best_estimator_","ca73648d":"xgbrf_best = np.array([xgbrf_best_clf.score(X_test, y_test), precision_score(y_test,\n                                                                               xgbrf_best_clf.predict(X_test)),\n      recall_score(y_test, xgbrf_best_clf.predict(X_test)),\n      f1_score(y_test, xgbrf_best_clf.predict(X_test))])\nxgbrf_best","49bab708":"y_predicted_prob = xgbrf_best_clf.predict_proba(X_test)\nxgbrf_fpr, xgbrf_tpr, thresholds = roc_curve(y_test, y_predicted_prob[:,1])\nxgbrf_roc_auc= auc(xgbrf_fpr, xgbrf_tpr)","4d490ecf":"scores = pd.DataFrame([regr_best.T, tree_best.T, forest_best.T, xgb_best.T, xgbrf_best.T], \n                      index=['logistic_regression', 'decision_tree', 'random_forest', 'XGB', 'XGBRF'],\n                      columns=['score', 'precision', 'recall', 'f1'])","63264da9":"scores","64b19ca9":"plt.figure()\nplt.plot(regr_fpr, regr_tpr,\n          label='Logistic regression ROC curve (area = %0.3f)' % regr_roc_auc)\nplt.plot(tree_fpr, tree_tpr,\n          label='Decision tree ROC curve (area = %0.3f)' % tree_roc_auc)\nplt.plot(forest_fpr, forest_tpr,\n          label='Random forest ROC curve (area = %0.3f)' % forest_roc_auc)\nplt.plot(xgb_fpr, xgb_tpr,\n          label='XGB ROC curve (area = %0.3f)' % xgb_roc_auc)\nplt.plot(xgbrf_fpr, xgbrf_tpr,\n          label='XGBRF ROC curve (area = %0.3f)' % xgbrf_roc_auc)\nplt.plot([0, 1], [0, 1], color='navy',  linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\nplt.legend(loc=\"lower right\")\nplt.show()","7c93e6ca":"titanic_test = pd.read_csv('..\/input\/titanic\/test.csv') ","0f81fbe8":"X_pred = titanic_test.drop(columns=['Name', 'Ticket', 'Cabin'])","ed3e3a1f":"fem = X_pred.query('Sex == \"female\"')\nfem = fem.fillna({'Age': fem.Age.median()})\nml = X_pred.query('Sex == \"male\"')\nml = ml.fillna({'Age': ml.Age.median()})\nX_pred = fem.append(ml)","07a31a37":"pasid = X_pred.PassengerId\nX_pred = X_pred.drop(columns=['PassengerId'])\nX_pred = pd.get_dummies(X_pred)\nX_pred = X_pred.fillna({'Fare': X_pred.Fare.median()}).drop(columns=['Sex_male'])","bbf7cb90":"X_pred.head()","91af022e":"X_pred.isnull().sum()","c0979c06":"y_pred = xgb_best_clf.predict(X_pred)","d763c52d":"pasid = pasid.to_numpy()","33d857a0":"y_pred.shape","04b74c82":"out = np.hstack((pasid.reshape((418, 1)), y_pred.reshape((418, 1))))","9531d36b":"out.shape","c57a2252":"out = pd.DataFrame(out, columns=['PassengerId', 'Survived'])","440f797d":"out.to_csv('out_1.csv', index=False)","ebca2086":"# Decision tree preparing","9fd5c2da":"## Parameters selection with RandomizedSearchCV using ","84bfd720":"### Best XGBRF score, precision, recall and f1","4978c84a":"### Best XGB score, precision, recall and f1","d588ba67":"# Let's try logistic regression","f607fcf9":"## Prediction and writing to file","441b2012":"# Training data preparing","2b90999b":"# Let's try random forest","e21556c4":"### Best decision tree score, precision, recall and f1","bd795b70":"# Prediction\n## Prediction data preparing","b13e1ff3":"## Comparison","6dbebfc1":"### Best logistic regression score, precision, recall and f1","3cf45717":"### Best random forest score, precision, recall and f1","6c73798e":"# Let's try XGBRF\n","c7b3b648":"# Let's try XGB"}}