{"cell_type":{"e489e554":"code","3b22c5b5":"code","7a924b7d":"code","3ea0305f":"code","4b2c8527":"code","ba7eeba0":"code","464094e3":"code","1febc68f":"code","ec384786":"code","4d410257":"code","c611b29d":"code","fc63ca05":"code","6b04806c":"code","b366780d":"code","e5cc6059":"code","c9a8ae05":"code","3582196e":"code","867cb36a":"code","4306e0ac":"code","c47b5733":"code","7d8b2420":"code","e7e038cb":"code","ddd4844a":"code","33519727":"code","c0ada0c6":"code","a4c2b0e7":"code","2d1f6adf":"code","c544604e":"code","db1526d0":"code","c8654d0c":"code","237a08a2":"code","1e5f8715":"code","b2c654ed":"code","a32bc157":"code","33a57cec":"code","90add2f3":"code","4c0adc82":"code","d8a67169":"code","61a0b55c":"code","031dc034":"code","555fb73c":"code","792dd2e4":"code","e20390ba":"code","71833674":"code","58de8686":"code","0cf736d6":"code","365515cf":"code","94490023":"code","d244aa69":"code","bd6b787c":"code","faf758d5":"code","91a849c9":"code","805add01":"code","d8d7e779":"code","9e37dc3d":"code","4b1fbfb2":"code","d563a0ec":"code","ef3dcbf7":"code","03040489":"code","ab3708d1":"code","4e81e50a":"code","9bfce4a9":"code","f853da9e":"code","a70ac1a3":"code","1241500f":"code","b60888c5":"code","06c6731f":"code","f9f34f13":"code","636db8da":"code","54589e45":"code","7209bf11":"code","57fce5c3":"code","c74fd711":"code","507e8421":"code","6ae112f1":"code","87fdb9a2":"code","a8019cd6":"code","32cd59ab":"code","632a259d":"code","3e5d8de7":"code","2cf39c2e":"code","4aaad8bb":"code","43300fc4":"code","0b8a4d4c":"code","7be6d6d3":"code","07a0be3e":"code","349c3c98":"code","4a2ab9f5":"code","24daf1ee":"markdown","94476251":"markdown","f4bd8a34":"markdown","5c701b5a":"markdown","48e755fa":"markdown","6728bf5e":"markdown","c2da5fd9":"markdown","3ec0396b":"markdown","64b9fc9b":"markdown","9056633c":"markdown","f96e63ff":"markdown","14e9d48d":"markdown","ec461e4f":"markdown","fa90a388":"markdown","62d2a139":"markdown","4f181028":"markdown","94ff8974":"markdown","ecbd44c4":"markdown","f86032b0":"markdown","673aa650":"markdown","06125f19":"markdown","c0a579d6":"markdown","b37dfe0c":"markdown","82db241f":"markdown","95947e4c":"markdown","fcb3c874":"markdown","31f442d1":"markdown","cc475697":"markdown","68fd0751":"markdown","2a825c37":"markdown","c4e6f076":"markdown","7249442e":"markdown","8754bca8":"markdown","2a3e035e":"markdown","f2250ded":"markdown","715b0841":"markdown","d4d05362":"markdown","1b040807":"markdown","6106a252":"markdown","6437ea19":"markdown","cc994cdb":"markdown","1f192c6a":"markdown","9f5dd01f":"markdown"},"source":{"e489e554":"import advertools as adv\nimport pandas as pd\npd.options.display.max_columns = None\nadv.__version__","3b22c5b5":"app_key = 'YOUR_APP_KEY'\napp_secret = 'YOUR_APP_SECRET'\noauth_token = 'YOUR_OAUTH_TOKEN'\noauth_token_secret = 'YOUR_OAUTH_TOKEN_SECRET'\n\nauth_params = {\n    'app_key': app_key,\n    'app_secret': app_secret,\n    'oauth_token': oauth_token,\n    'oauth_token_secret': oauth_token_secret,\n}\nadv.twitter.set_auth_params(**auth_params)","7a924b7d":"# code to get the data from the Twitter API \n# ttues = adv.twitter.search(q='#TravelTuesday -filter:retweets', count=5000, tweet_mode='extended')","3ea0305f":"ttues = pd.read_csv('..\/input\/ttues.csv')","4b2c8527":"hashtag_summary = adv.extract_hashtags(ttues['tweet_full_text'])\nhashtag_summary.keys()","ba7eeba0":"hashtag_summary['overview']","464094e3":"hashtag_summary['hashtag_freq'][:10]","1febc68f":"hashtag_summary['top_hashtags'][:20]","ec384786":"mention_summary = adv.extract_mentions(ttues['tweet_full_text'])\nmention_summary.keys()","4d410257":"mention_summary['overview']","c611b29d":"mention_summary['top_mentions'][:20]","fc63ca05":"emoji_summary = adv.extract_emoji(ttues['tweet_full_text'])\nemoji_summary.keys()","6b04806c":"emoji_summary['overview']","b366780d":"emoji_summary['top_emoji'][:20]","e5cc6059":"emoji_summary['top_emoji_text'][:20]","c9a8ae05":"emoji_summary['top_emoji_groups']","3582196e":"emoji_summary['top_emoji_sub_groups'][:20]","867cb36a":"[(i, f) for i, f in enumerate(dir(adv), -42) if f.startswith('extract')]","4306e0ac":"currency_summary = adv.extract_currency(ttues['tweet_full_text'])","c47b5733":"currency_summary.keys()","7d8b2420":"currency_summary['overview']","e7e038cb":"currency_summary['top_currency_symbols']","ddd4844a":"print(*adv.regex.CURRENCY_RAW, sep=' ')","33519727":"[x for x in  currency_summary['currency_symbol_names'] if x][:20]","c0ada0c6":"[x for x in currency_summary['surrounding_text'] if x][:20]","a4c2b0e7":"[x for x in adv.extract_currency(ttues['tweet_full_text'],\n                                 left_chars=0, \n                                 right_chars=15)['surrounding_text'] if x][:20]","2d1f6adf":"exclamation_summary = adv.extract_exclamations(ttues['tweet_full_text'])\nexclamation_summary.keys()","c544604e":"exclamation_summary['overview']","db1526d0":"exclamation_summary['exclamation_mark_freq']","c8654d0c":"exclamation_summary['top_exclamation_marks']","237a08a2":"[x for x in exclamation_summary['exclamation_text'] if x][:10]","1e5f8715":"intense_summary = adv.extract_intense_words(ttues['tweet_full_text'], min_reps=3)","b2c654ed":"intense_summary.keys()","a32bc157":"intense_summary['overview']","33a57cec":"intense_summary['intense_word_freq']","90add2f3":"intense_summary['intense_words_flat'][20:50]","4c0adc82":"for i, tweet in enumerate(intense_summary['intense_words'][:100]):\n    if tweet:\n        print('Tweet original text:')\n        print(ttues['tweet_full_text'][i])\n        print()\n        print('Extracted intense words:')\n        print(tweet)\n        print('\\n===============\\n')","d8a67169":"print(*adv.regex.QUESTION_MARK_RAW, sep='  ')","61a0b55c":"'what?' == 'what?'","031dc034":"'\u037e' == ';'","555fb73c":"from unicodedata import name\nname('\u037e')","792dd2e4":"name('\u00bf')","e20390ba":"cervantes = \"\"\"Por Dios, hermano, que agora me acabo de desenga\u00f1ar de un enga\u00f1o en \nque he estado todo el mucho tiempo que ha que os conozco, en el cual siempre os he \ntenido por discreto y prudente en todas vuestras aciones. Pero agora veo que est\u00e1is \ntan lejos de serlo como lo est\u00e1 el cielo de la tierra. \u00bfC\u00f3mo que es posible que \ncosas de tan poco momento y tan f\u00e1ciles de remediar puedan tener fuerzas de \nsuspender y absortar un ingenio tan maduro como el vuestro, y tan hecho a romper \ny atropellar por otras dificultades mayores? A la fe, esto no nace de falta de \nhabilidad, sino de sobra de pereza y penuria de discurso. \u00bfQuer\u00e9is ver si es verdad \nlo que digo? Pues estadme atento y ver\u00e9is c\u00f3mo, en un abrir y cerrar de ojos, confundo \ntodas vuestras dificultades y remedio todas las faltas que dec\u00eds que os suspenden y \nacobardan para dejar de sacar a la luz del mundo la historia de vuestro famoso \ndon Quijote, luz y espejo de toda la caballer\u00eda andante.  Decid -le repliqu\u00e9 yo, \noyendo lo que me dec\u00eda-: \u00bfde qu\u00e9 modo pens\u00e1is llenar el vac\u00edo de mi temor y reducir \na claridad el caos de mi confusi\u00f3n?\"\"\"","71833674":"preguntas = adv.extract_questions([cervantes])","58de8686":"print(*preguntas['question_text'][0], sep='\\n\\n')","0cf736d6":"name('\u061f')","365515cf":"arabic = ['\u0645\u0631\u062d\u0628\u0627\u064b. \u0645\u0627 \u0627\u0633\u0645\u0643\u061f', '\u0643\u064a\u0641 \u062d\u0627\u0644\u0643\u061f \u0645\u0627\u0630\u0627 \u062a\u0641\u0639\u0644\u061f']","94490023":"adv.extract_questions(arabic)['question_text']","d244aa69":"hebrew = ['\u05e9\u05dc\u05d5\u05dd. \u05de\u05d4 \u05e9\u05dc\u05d5\u05de\u05da? \u05de\u05d4 \u05d4\u05e9\u05dd \u05e9\u05dc\u05da?']","bd6b787c":"adv.extract_questions(hebrew)['question_text']","faf758d5":"print('\\N{Interrobang}')","91a849c9":"for i, q in enumerate(adv.QUESTION_MARK_RAW[1:-1], 1):\n    print(f'{i:>2}: {q:^4} {name(q).title()}')","805add01":"question_summary = adv.extract_questions(ttues['tweet_full_text'])","d8d7e779":"question_summary.keys()","9e37dc3d":"question_summary['overview']","4b1fbfb2":"question_summary['top_question_marks']","d563a0ec":"question_summary['question_mark_freq']","ef3dcbf7":"for i, tweet in enumerate(ttues.tweet_full_text[:40]):\n    if '?' in tweet:\n        print('Tweet original text:')\n        print(tweet)\n        print()\n        print('Extracted question(s):')\n        print(question_summary['question_text'][i])\n        print('\\n==============\\n')","03040489":"question_summary['question_text'][:30]","ab3708d1":"photo_words = adv.extract_words(ttues['tweet_full_text'], ['photo', 'image', 'img', 'camera'])","4e81e50a":"photo_words['overview']","9bfce4a9":"photo_words.keys()","f853da9e":"photo_words['top_words'][:20]","a70ac1a3":"adv.extract_words(ttues['tweet_full_text'],['photo', 'image', 'img', 'camera'], \n                 entire_words_only=True)['top_words']","1241500f":"exclamation_summary = adv.extract(ttues['tweet_full_text'], regex='\\S+!', \n                                  key_name='exclamation')","b60888c5":"exclamation_summary['overview']","06c6731f":"exclamation_summary['top_exclamations'][:10]","f9f34f13":"url_summary = adv.extract_urls(ttues['tweet_full_text'])\nurl_summary.keys()","636db8da":"url_summary['overview']","54589e45":"url_summary['url_freq']","7209bf11":"url_summary['top_domains']","57fce5c3":"url_summary['top_tlds']","c74fd711":"text_list = ['one two three', 'four five six']\nadv.word_tokenize(text_list, phrase_len=1)","507e8421":"adv.word_tokenize(text_list, phrase_len=2)","6ae112f1":"adv.word_tokenize(text_list, phrase_len=3)","87fdb9a2":"word_freq = adv.word_frequency(ttues['tweet_full_text'], \n                               ttues['user_followers_count'], \n                               rm_words=list(adv.stopwords['english'])+[\"it's\", '\u2013', '',\n                                                                        ' ', '\u2014', '-', '&amp'])","a8019cd6":"word_freq.head(20).style.format({'wtd_freq': '{:,}', 'rel_value': '{:,}'})","32cd59ab":"word_freq2 = adv.word_frequency(ttues['tweet_full_text'], \n                               ttues['user_followers_count'], \n                                phrase_len=2,\n                               rm_words=list(adv.stopwords['english'])+[\"it's\", '\u2013', '',\n                                                                        ' ', '\u2014', '-', '&amp']+\n                               ['to be', 'of the', 'it is', 'is the', 'in the', 'if you', \n                                'to travel', 'for a', 'i have', 'to the', 'at the', 'as a', 'is to'])","632a259d":"word_freq2.head(20).style.format({'wtd_freq': '{:,}', 'rel_value': '{:,}'})","3e5d8de7":"hash_frequency = adv.word_frequency(ttues['tweet_full_text'], \n                                    ttues['user_followers_count'], \n                                    regex=adv.regex.HASHTAG_RAW)\n","2cf39c2e":"hashtag_summary['top_hashtags'][:10]","4aaad8bb":"hash_frequency.head(20).style.format({'wtd_freq': '{:,}', 'rel_value': '{:,}'})","43300fc4":"mention_freq = adv.word_frequency(ttues['tweet_full_text'], \n                                  ttues['user_followers_count'],\n                                  regex=adv.regex.MENTION_RAW)","0b8a4d4c":"mention_freq.head(15).style.format({'wtd_freq': '{:,}', 'rel_value': '{:,}'})","7be6d6d3":"currency_freq = adv.word_frequency(ttues['tweet_full_text'], \n                                  ttues['user_followers_count'],\n                                  regex=adv.regex.CURRENCY_RAW)","07a0be3e":"currency_freq.head().style.format({'wtd_freq': '{:,}', 'rel_value': '{:,}'})","349c3c98":"emoji_freq = adv.word_frequency(ttues['tweet_full_text'], \n                                ttues['user_followers_count'],\n                                regex=adv.emoji.EMOJI.pattern)\nemoji_freq.head(20)","4a2ab9f5":"(emoji_freq\n .assign(emoji_text=[adv.emoji.EMOJI_ENTRIES[x].name if x != '\ufe0f' else '' for x in emoji_freq['word']],\n         emoji_group=[adv.emoji.EMOJI_ENTRIES[x].group if x != '\ufe0f' else '' for x in emoji_freq['word']],\n         emoji_sub_group=[adv.emoji.EMOJI_ENTRIES[x].sub_group if x != '\ufe0f' else '' for x in emoji_freq['word']])\n .head(30)\n .style.format({'wtd_freq': '{:,}', 'rel_value': '{:,}'}))","24daf1ee":"This is was a quick overview of the new functions available. If you have any suggestions or come across any bugs, [please let me know](https:\/\/github.com\/eliasdabbas\/advertools\/issues)","94476251":"### extract\n\nThis is the generic function used by all others. Sometimes you want to have a certain pattern that is not available by default. Here, I provide a regular expression to extract one or more non-space characters followed by an exclamation mark. ","f4bd8a34":"Let's see the most used words, on an absolute and a weighted basis. ","5c701b5a":"![](https:\/\/storage.googleapis.com\/kagglesdsdata\/datasets\/152293\/350977\/extract_functions.png?GoogleAccessId=web-data@kaggle-161607.iam.gserviceaccount.com&Expires=1554139466&Signature=a3pzaEldFuuGiFrM%2F2smkOtPV7W7p6%2BjUC7MOasHiMKvCnpf7W6K5HoZYkIJxLkgv12mKBBaGkBZuAkZcgdvt5VSNu2vsTG0ey6XeHYW7n1gZj2LdN1lm3TNz6TfXh9I6ZB11K%2FIdQc67UOZlU7Sesod06dWXZ0sjGkNKAvpoUV0KGC3KIXnSshlTabEVmXaIDJ1QC4Wt585iZpeISnRi%2BuobVZz45N98XZJwbJMuGY5bxk8RTz00WIFUKkm5hJoD6nJDwKKW81OEyhVF9wBRcnU1iTWPxN%2FLKlzvukkO8LrEwAr32iVIsh5PwSqNGvGgxH1ZRtfaEyI1IKVgUl2vA%3D%3D)","48e755fa":"\nThe `extract.py` module contains one main generic function, which is `extract`. This function is used by all the others.  \nThe way it works is that it takes a `text_list`, `regext`, and `key_name` arguments.   \n`extract(text_list, regex, key_name)`\n\nSo, if I want to extract hashtags or mentions, I can do it this way:  \n`extract(text_list, emoji_regex, key_name='emoji')`  \n`extract(text_list, hashtag_regex, key_name='hashtag')`  \n\nThere is also now a separate `regex` module that contains all the regexes used for different entities, and a sample is shown above. The idea is to expand those regexes, and create several more functions that do the same thing but with different entities.   \nThis is already available right now, if you want to extract emails for example, you only have to create a regex for it:   \n`extract(text_list, EMAIL_REGEX, key_name='email')`  \n\nNow, let's explore the new functions. We start by extracting currency symbols from the text list. As the name suggests, this gets any currency symbol and provides summary statistics about it.\n\n### extract_currency","6728bf5e":"The new structure makes it easy to scale to many kinds of entities and\/or different variations of those entities.  \nThis is how the modules are structured:","c2da5fd9":"When specifying `entire_words_only=True` you get only instances where the exact word \"photo\" was used, without being in a longer text.  \n\nThe first option is useful in cases where things might be confusing. For example if you specify \"rain\", those letters might be part of the words 'raining', 'train', 'training', or 'brain'. Completely unrelated and potentially misleading. The first option shows you how they appeared.  \nIn some cases, like the above they all seem related to photography. Although \"photo\" might be part of 'photon', or 'photosynthesis' for example. ","3ec0396b":"## Word Frequency \n\nThe second topic is about counting words in a text list. The `word_frequency` function works the same as before, but it has a few new options. \n\n- `num_list` is now optional: In case you don't have numbers describing your text list. You will get the absolute frequency only (with the weighted frequency obviously being the same). \n- `phrase_len`: This is a new parameter. With it, you specify how many words you want in each phrase, and counts the phrases. By default the length is one, which is the same behavior. But what if you want to to count two-word or three-word phrases? This is achieved by the `word_tokenize` function. Here is a quick example of how it works. ","64b9fc9b":"Finally, here is a list of all question marks included and their names:","9056633c":"If you are tweeting, have one character left, and you absolutely must ask a question with an exclamation mark, in one character, Unicode has you covered with the \"interrobang\"!","f96e63ff":"### extract_questions\n\nAnother importan thing that you might be interested in, are the questions, if any, in your text list.  \nThis function extracts question marks and questions.  \nWhat do I mean by \"question mark\"?  \nI'm glad you asked.  \nThere are twenty two different question marks in the Unicode database. (some of these might not display properly, on different machines\/browsers): ","14e9d48d":"Another important addition to the `word_frequency` function is the `regex` parameter.  \nMaybe you don't want to count all words. Maybe you want to count the absolute and weighted occurrences of hashtags in your text list?  \nSince the hashtag regex is already defined, you can simply use like this: ","ec461e4f":"After some digging, I found out that some of the URLs were written contained three forward slashed, and that is why they appear as the empty string.","fa90a388":"## Hashtags, mentions and emoji\nI'll quickly go through these, and then discuss the new functions. ","62d2a139":"The `question_text` key gives a list for each tweet, showing the question(s), and an empty list if none exist. ","4f181028":"# Text Analysis for Online Marketers - Part 2\n\n#### New features in `advertools` v0.7.x\n\nThis is a follow-up to my previous article discussing [text analysis on SEMrush](https:\/\/www.semrush.com\/blog\/text-analysis-for-online-marketers\/). The same concepts are expanded with a few additional functions, and a few additions to existing functions. \n\nA quick summary of the two main concepts discussed: \n\n**1. Extracting entities:** Structured elements in a text list that can be extracted and provide a better understanding of the data. The main ones discussed were `extract_hashtags`, `extract_mentions`, and `extract_emoji`. Now there are a few additional functions that extract different entities, but work the same way. \n\n**2. Word count(frequency), absolute and weighted:** The main idea here is that counting words in a text list can give a good idea about the topics discussed. When we have numbers describing the text list, we can get a better idea, by taking into consideration the weights given to each word. \nFor example, if you have two social media posts, one that says, \"I like Football\", and another that says, \"I like Basketball\", an absolute count shows that 50% of posts are about Football, and 50% about Basketball.  \nIf we now take the number of followers of the post's writer, we get a different story. If the first person has 1,000 followers, and the second has 99,000, then from a weighted perspective, it's 1% Football, and 99% Basketball. \nThe first (absolute) count looks at things from the writer\/creators' perspective, while the second looks at it from a consumption perspective.  \n\nFor my example I'll be using 4,000 tweets that contain the hashtag #TravelTuesday. ","94ff8974":"### extract_exclamations\nThese are sentences that end with an exclamation mark. Simple! ","ecbd44c4":"40% of tweets seem to have used exclamation marks in the tweets. Let's find out more. ","f86032b0":"Getting the names of the emoji is very useful in understanding what people are trying to express. It is even easier if can get the groups (and below, the sub-groups) for the emoji for an easier categorization, instead of having to go through them one by one.  \nUnsurprisingly, \"Travel & Places\" is the top group. \nHere are the top sub-groups.","673aa650":"This shows that 3,669 tweets contained no intense words, 349 tweets contained one, and so on. ","06125f19":"what\u037e!!","c0a579d6":"If you are like me, this might surprise you (skip if you speak Greek). ","b37dfe0c":"### extract_intense_words\n\nI'm sure you have noticed how sometimes on social media people express an intense feeling or view by repeating characters many times?  \n\"I loooovvveeeee thissssss!!!!\"  \n\"Whaaaat??? can't believe you said that????!!!\"  \n\nThe `extract_intense_words` extracts all words that have any character repeated three or more times. You can change that to four, or more if you want really intense words.  Som things to keep in mind about intense words:\n- Intensity could be positive or negative, as the above two examples show.\n- Intense feelings can be described (and are often described) without having to repeat so many characters. So these are not the only \"intense\" words. \n- People are different. Some people are more dramatic in general in the way they express themselves, and usually use \"great\" or \"terrible\" to describe how they feel. Other people might use \"good\" and \"bad\" to convey the same idea. \n- Repetition doesn't always imply intensity. For example, you will see below that $50,000 was extracted as an intense word, but it's not really what we intend. Unless you consider the fifty thousand to be an intense number! ","82db241f":"Back to our tweets, let's see what\/how much people are asking. ","95947e4c":"This shold work properly with any other RTL language that uses this question mark. There seems to be an issue with Hebrew however. Although it's an RTL language, it uses the LTR question mark \"?\".  \nThe questions seem to be extracted, but not properly 100%.  \nI think the reason is that since RTL and LTR orientations are mixed, the extraction doesn't work properly? I'm not sure. Let me know if you have any suggestions.  \nThe issue is clear even when pasting this text from Google Translate. The quesion marks are placed in the wrong positions.","fcb3c874":"As you can see the output of the `extract_` functions is almost identical. For some special cases (like emoji) some additional information is extracted like the names of the emoji. \nHere are all the `extract_` functions currently available.","31f442d1":"Now you can get an idea of how money\/prices\/currencies\/etc. are being discussed. \n\nThe `extract_currency` function takes two additional arguments `left_chars` and `right_chars`. These specify how many characters to the left and right of the currency symbol to extract.  \nFor example, if we knew that all currency-related content is written in a widely used format, e.g. $1,234.56 we can specify `left_chars` as zero, and set ten or twenty characters to the right: ","cc475697":"21.1% of tweets contain questions. ","68fd0751":"10.4% of tweets contain intense words. Let's see more. ","2a825c37":"It's not always clear what those symbols are for. Maybe people are writing about prices, maybe forex, or the economy, or maybe using the dollar sign to explain some command line tool that starts with $.  \nThere is also no standard way of writing prices,  it differs from country to country, and people might not use the standard anyway.  \nIn order to get the context of how those currencies are being used, the key `surrounding_text` shows you just that. ","c4e6f076":"### extract_words\n\nSometimes you want to specify a list of words to see how much a certain topic is covered\/discussed in the dataset. This function allows you to specify your words, and gives a summary of how they are used.  \nThere are two ways to extract those words with the `entire_words_only` parameter. This is set to `False` by default. This means that it will show you the string you specified and how it appears within the larger \"word\".  \nBelow I specify 'photo', 'image', 'img', and 'camera', to see how much these topics are covered. Take a look at the top words. ","7249442e":"We get a higher resolution understanding of the emoji used, and it confirms exactly what people are expressing. ","8754bca8":"### Efficiency","2a3e035e":"Here we run the same for two-word phrsaes. Note that I have added a bunch of stop-words ('to be', 'of the', etc.)","f2250ded":"'#marbella' is  in position six, on a weighted basis, where it's not even in the top twenty on an absolute basis.  \nHere is the same with mentions, and then with currencies, and  emoji. ","715b0841":"There is an additional key in the output `currency_symbol_names` so you know what the symbols are.  \nHere is the full list of available currency symbols in the Unicode database:","d4d05362":"**Inverted question mark used in Spanish** Here is sample text from Cervantes. ","1b040807":"It seems the questions are extracted correctly, but the first one has two question marks. ","6106a252":"Here are some tweets that contain intense words. The full text is provided and underneath it extracted, are the intense words as a list. ","6437ea19":"37% of posts have exclamation marks. Maybe a special function should be developed for that\u203d","cc994cdb":"As a reminder, these are the top hashtags we extracted previously (counting on an absolute basis). Below that I show both absolute and weighted freuquency of hashtags. ","1f192c6a":"**Arabic - right-to-left question mark**","9f5dd01f":"### extract_urls\n\nWhere are people linking to? Are they linking? Which domains are they linking to? Which top-level domains?\n\nWith Twitter actually, there isn't much value in extracting the URLs if you are using the API, for two reasons: \n1. Twitter already provides the URLs as part of the response object, and they are also expanded\n2. As you will see below, almost all URLs are shown as t.co, so we won't see much about the domains and so on\nI'm still including this for demonstration purposes. "}}