{"cell_type":{"6d631b18":"code","7fe213ae":"code","a3160f3b":"code","daebc3d7":"code","9e189b85":"code","70082b94":"code","9070c580":"code","6e342b57":"code","4e7cc74f":"code","3fe660c3":"code","7e53127f":"code","891241be":"code","9f21de48":"code","b8dacfa3":"code","c27108f4":"code","dcd8c848":"code","d91bf92f":"code","a9dd747d":"code","e6917318":"code","86ab930a":"code","013ea426":"code","5808ccd8":"code","f30f30cf":"code","e07eb90c":"code","e055e3aa":"code","bd8893db":"code","053f192f":"code","9c541ba5":"code","c885b8b4":"code","9c5eb194":"code","418efd0f":"code","e1680cf0":"code","e5f9d19a":"code","8e2326d9":"code","9a651e15":"code","cf466b91":"code","9d99a9f9":"code","4a47f668":"code","fd02a9e0":"code","a579db82":"code","a21d5b2d":"code","7eda12da":"code","b681cadc":"code","e0d74e7a":"code","600194b1":"code","34f7894e":"code","dab4c222":"code","fa363cb2":"code","750e4505":"code","3596676b":"code","9e1ae4cb":"code","a7fa01af":"code","4697177a":"code","97c63ce3":"code","186a7d12":"code","3f5cf607":"code","3689214b":"code","39c5af44":"code","8cb6f85a":"code","f9b7d747":"code","46da0697":"code","bfa51042":"code","409e1b90":"code","708c6846":"code","a2cfa907":"code","d6c32e2b":"code","45a3bf89":"code","99c2b4b9":"markdown","ff6487a4":"markdown","fa11bf9c":"markdown"},"source":{"6d631b18":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.style.use('ggplot')\n\nimport warnings\ndef ignore_warn(*args, **kwagrs):\n    pass\nwarnings.warn = ignore_warn","7fe213ae":"data = pd.read_csv('..\/input\/bank.csv')\ndata.head()","a3160f3b":"data.shape","daebc3d7":"data.describe()","9e189b85":"data.info()","70082b94":"data.columns","9070c580":"count_list = ['age', 'job', 'marital', 'education', 'contact', 'month', 'poutcome']","6e342b57":"for feature in count_list:\n    plt.figure(figsize=(12, 7))\n    sns.countplot(feature, data=data)\n    plt.xticks(rotation=90)\n    plt.show()","4e7cc74f":"data.rename(columns={'y': 'client'}, inplace=True)","3fe660c3":"data['client'] = data['client'].map({'no': 0, 'yes': 1})","7e53127f":"data.head()","891241be":"sns.countplot('client', data=data)\nplt.show()","9f21de48":"age = sns.FacetGrid(data, col='client')\nage.map(plt.hist, 'age', bins=20)\nplt.show()","b8dacfa3":"job = data[['job', 'client']].groupby(['job'], as_index=False).mean().sort_values(ascending=False, by='client')\njob","c27108f4":"plt.figure(figsize=(8, 5))\nsns.barplot(x='job', y='client', data=job)\nplt.xticks(rotation=90)\nplt.show()","dcd8c848":"g = sns.pointplot(x='job', y='client', data=data)\nplt.xticks(rotation=90)","d91bf92f":"data[['education', 'client']].groupby(['education'], as_index=False).mean().sort_values(by='client', ascending=False)","a9dd747d":"g = sns.catplot(x='job', y='age', col='education', hue='client', kind='point', data=data)\nfor ax in g.axes.flat:\n    labels = ax.get_xticklabels()\n    ax.set_xticklabels(labels, rotation=90)\nplt.show()","e6917318":"g = sns.FacetGrid(col='client', data=data)\ng.map(plt.hist, 'balance', bins=20)\ng.set(xlim=(0, 25000))","86ab930a":"data.head()","013ea426":"data[['client', 'default']].groupby(['default'], as_index=False).mean()","5808ccd8":"data[['client', 'housing']].groupby(['housing'], as_index=False).mean()","f30f30cf":"data[['client', 'loan']].groupby(['loan'], as_index=False).mean()","e07eb90c":"g = sns.PairGrid(data, x_vars=['loan', 'default', 'housing'], y_vars='balance', hue='client')\ng.map(sns.pointplot)\ng.add_legend()","e055e3aa":"g = sns.FacetGrid(col='client', data=data)\ng.map(plt.hist, 'duration', bins=20)\ng.set(xlim=(0, 2000))","bd8893db":"sns.factorplot(x='month', y='day', hue='client', col='contact', data=data)","053f192f":"g = sns.FacetGrid(data, col='client')\ng.map(plt.hist, 'campaign', bins=25)\ng.set(xlim=(0, 30))","9c541ba5":"sns.factorplot(x='contact', y='campaign', hue='client', data=data)","c885b8b4":"plt.figure(figsize=(8, 5))\nsns.scatterplot(x='pdays', y='previous', hue='poutcome', data=data)\nplt.show()","9c5eb194":"plt.figure(figsize=(10, 7))\nsns.countplot('previous', data=data)","418efd0f":"data.loc[data['previous'] > 250, 'previous'] = np.nan\ndata['previous'] = data['previous'].fillna(data['previous'].mode()[0])","e1680cf0":"plt.figure(figsize=(8, 5))\nsns.scatterplot(x='pdays', y='previous', hue='poutcome', data=data)\nplt.show()","e5f9d19a":"data.describe()","8e2326d9":"data['age_band'] = pd.cut(data['age'], 10)\ndata[['age_band', 'client']].groupby(['age_band'], as_index=False).mean().sort_values(by='age_band', ascending=False)","9a651e15":"data.loc[data['age'] < 25.7, 'age'] = 0\ndata.loc[(data['age'] > 25.7) & (data['age'] < 33.4), 'age'] = 1\ndata.loc[(data['age'] > 33.4) & (data['age'] < 41.1), 'age'] = 2\ndata.loc[(data['age'] > 41.1) & (data['age'] < 48.8), 'age'] = 3\ndata.loc[(data['age'] > 48.8) & (data['age'] < 56.5), 'age'] = 4\ndata.loc[(data['age'] > 56.5) & (data['age'] < 64.2), 'age'] = 5\ndata.loc[(data['age'] > 64.2) & (data['age'] < 71.9), 'age'] = 6\ndata.loc[(data['age'] > 71.9) & (data['age'] < 79.6), 'age'] = 7\ndata.loc[(data['age'] > 79.6) & (data['age'] < 87.3), 'age'] = 8\ndata.loc[data['age'] > 87.3, 'age'] = 9","cf466b91":"data['balance_band'] = pd.cut(data['balance'], 10)\ndata[['balance_band', 'client']].groupby(['balance_band'], as_index=False).mean().sort_values(by='balance_band', ascending=False)","9d99a9f9":"data.loc[data['balance'] < 2995.6, 'balance'] = 0\ndata.loc[(data['balance'] > 2995.6) & (data['balance'] < 14010.2), 'balance'] = 1\ndata.loc[(data['balance'] > 14010.2) & (data['balance'] < 25024.8), 'balance'] = 2\ndata.loc[(data['balance'] > 25024.8) & (data['balance'] < 36039.4), 'balance'] = 3\ndata.loc[(data['balance'] > 36039.4) & (data['balance'] < 47054), 'balance'] = 4\ndata.loc[(data['balance'] > 47054) & (data['balance'] < 58068.6), 'balance'] = 5\ndata.loc[(data['balance'] > 58068.6) & (data['balance'] < 69083.2), 'balance'] = 6\ndata.loc[(data['balance'] > 69083.2) & (data['balance'] < 80097.8), 'balance'] = 7\ndata.loc[(data['balance'] > 80097.8) & (data['balance'] < 91112.4), 'balance'] = 8\ndata.loc[data['balance'] > 91112.4, 'balance'] = 9","4a47f668":"data['day_band'] = pd.cut(data['day'], 5)\ndata[['day_band', 'client']].groupby(['day_band'], as_index=False).mean().sort_values('day_band', ascending=False)","fd02a9e0":"data.loc[data['day'] <= 7, 'day'] = 0\ndata.loc[(data['day'] > 7) & (data['day'] <= 13), 'day'] = 1\ndata.loc[(data['day'] > 13) & (data['day'] <= 19), 'day'] = 2\ndata.loc[(data['day'] > 19) & (data['day'] <= 25), 'day'] = 3\ndata.loc[data['day'] > 25, 'day'] = 4","a579db82":"data['duration_band'] = pd.cut(data['duration'], 5)\ndata[['duration_band', 'client']].groupby(['duration_band'], as_index=False).mean().sort_values('duration_band', ascending=False)","a21d5b2d":"data.loc[data['duration'] < 983.6, 'duration'] = 0\ndata.loc[(data['duration'] > 983.6) & (data['duration'] < 1967.2), 'duration'] = 1\ndata.loc[(data['duration'] > 1967.2) & (data['duration'] < 2950.8), 'duration'] = 2\ndata.loc[(data['duration'] > 2950.8) & (data['duration'] < 3934.4), 'duration'] = 3\ndata.loc[data['duration'] > 3934.4, 'duration'] = 4","7eda12da":"data['campaign_band'] = pd.cut(data['campaign'], 6)\ndata[['campaign_band', 'client']].groupby(['campaign_band'], as_index=False).mean().sort_values('campaign_band', ascending=False)","b681cadc":"data.loc[data['campaign'] < 11.3, 'campaign'] = 0\ndata.loc[(data['campaign'] > 11.3) & (data['campaign'] < 21.6), 'campaign'] = 1\ndata.loc[(data['campaign'] > 21.6) & (data['campaign'] <= 32), 'campaign'] = 2\ndata.loc[(data['campaign'] > 32) & (data['campaign'] < 42.3), 'campaign'] = 3\ndata.loc[(data['campaign'] > 42.3) & (data['campaign'] < 52.6), 'campaign'] = 4\ndata.loc[data['campaign'] > 52.6, 'campaign'] = 5","e0d74e7a":"data['pdays_band'] = pd.cut(data['pdays'], 9)\ndata[['pdays_band', 'client']].groupby(['pdays_band'], as_index=False).mean().sort_values('pdays_band', ascending=False)","600194b1":"data.loc[data['pdays'] == -1, 'pdays'] = 0\ndata.loc[(data['pdays'] > 0) & (data['pdays'] < 95.8), 'pdays'] = 1\ndata.loc[(data['pdays'] > 95.8) & (data['pdays'] < 95.8), 'pdays'] = 2\ndata.loc[(data['pdays'] > 192.7) & (data['pdays'] < 289.6), 'pdays'] = 3\ndata.loc[(data['pdays'] > 289.6) & (data['pdays'] < 386.5), 'pdays'] = 4\ndata.loc[(data['pdays'] > 386.5) & (data['pdays'] < 483.4), 'pdays'] = 5\ndata.loc[(data['pdays'] > 483.4) & (data['pdays'] < 580.3), 'pdays'] = 6\ndata.loc[(data['pdays'] > 580.3) & (data['pdays'] < 677.2), 'pdays'] = 7\ndata.loc[(data['pdays'] > 677.2) & (data['pdays'] < 774.1), 'pdays'] = 8\ndata.loc[data['pdays'] > 774.1, 'pdays'] = 9","34f7894e":"data['previous_band'] = pd.cut(data['previous'], 6)\ndata[['previous_band', 'client']].groupby(['previous_band'], as_index=False).mean().sort_values('previous_band', ascending=False)","dab4c222":"data.loc[data['previous'] < 9.6, 'previous'] = 0\ndata.loc[(data['previous'] > 9.6) & (data['previous'] < 19.3), 'previous'] = 1\ndata.loc[(data['previous'] > 19.3) & (data['previous'] <= 29), 'previous'] = 2\ndata.loc[(data['previous'] > 29) & (data['previous'] < 38.6), 'previous'] = 3\ndata.loc[(data['previous'] > 38.6) & (data['previous'] < 48.3), 'previous'] = 4\ndata.loc[data['previous'] > 48.3, 'previous'] = 5","fa363cb2":"data.drop(['age_band', 'balance_band', 'day_band', 'duration_band', 'campaign_band', 'pdays_band', 'previous_band'], axis=1, inplace=True)","750e4505":"data['previous'] = data['previous'].astype(int)\ndata.head()","3596676b":"cols = data.dtypes[data.dtypes == 'O'].index\ncols","9e1ae4cb":"from sklearn.preprocessing import LabelEncoder\n\nlabel = LabelEncoder()\nfor col in cols:\n    data[col] = label.fit(data[col]).transform(data[col])","a7fa01af":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.grid_search import GridSearchCV\nfrom sklearn.cross_validation import cross_val_score\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn import metrics\nimport xgboost as xgb","4697177a":"target = 'client'","97c63ce3":"train = data.drop(['client'], axis=1)\ntest = data['client']","186a7d12":"X_train, X_test, y_train, y_test = train_test_split(train, test, test_size=.3)","3f5cf607":"log = LogisticRegression()\nlog.fit(X_train, y_train)\ny_pred = log.predict(X_test)\nscore = 100*accuracy_score(y_test, y_pred)\nscore","3689214b":"svm = SVC()\nsvm.fit(X_train,y_train)\ny_pred = svm.predict(X_test)\nscore = 100*accuracy_score(y_test, y_pred)\nscore","39c5af44":"model_xgb = xgb.XGBClassifier(\n    learning_rate = 0.1,\n    n_estimators=1000,\n    max_depth=5,\n    min_child_weight=1,\n    gamma=0,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    objective='binary:logistic',\n    nthread=4,\n    scale_pos_weight=1,\n    seed=10)\nmodel_xgb.fit(X_train, y_train)\ny_pred = model_xgb.predict(X_test)\nscore = 100*accuracy_score(y_test, y_pred)\nscore","8cb6f85a":"knn = KNeighborsClassifier(n_neighbors = 10)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nscore = 100*accuracy_score(y_test, y_pred)\nscore","f9b7d747":"train.head()","46da0697":"rfc = RandomForestClassifier()\nrfc.fit(X_train, y_train)\ny_pred = rfc.predict(X_test)\nscore = 100*accuracy_score(y_test, y_pred)\nscore","bfa51042":"gboost = GradientBoostingClassifier()\ngboost.fit(X_train, y_train)\ny_pred = gboost.predict(X_test)\nscore = 100*accuracy_score(y_test, y_pred)\nscore","409e1b90":"def modelfit(model, train, predictors, useTrainCV=True, cv_folds = 5, early_stopping_rounds=100):\n    if useTrainCV:\n        model_params = model.get_xgb_params()\n        xgbtrain = xgb.DMatrix(train[predictors].values, label=train[target].values)\n        cvresult = xgb.cv(model_params, xgbtrain, num_boost_round=model.get_params()['n_estimators'], nfold=cv_folds,\n                          early_stopping_rounds=early_stopping_rounds, metrics='auc', verbose_eval=False)\n        model.set_params(n_estimators=cvresult.shape[0])\n    # fit model\n    model.fit(train[predictors], train[target], eval_metric='auc')\n    # predict\n    predictions = model.predict(train[predictors])\n    probs = model.predict_proba(train[predictors])[:, 1]\n    # print report model\n    print('Model report:')\n    print('Accuracy: {}'.format(metrics.accuracy_score(train[target].values, predictions)))\n    print('AUC score: {}'.format(metrics.roc_auc_score(train[target], probs)))\n    # plot feature importance\n    index = train.drop([target], axis=1).columns\n    feature_imp = pd.Series(data=model.feature_importances_,\n                            index = index).sort_values(ascending=False)\n    plt.figure(figsize=(16, 9))\n    feature_imp.plot(kind='bar', color='blue', title='Feature importances')\n    plt.ylabel('Score')\n    plt.xlabel('Feature importance')\n    ","708c6846":"# predictors = [x for x in data.columns if x not in [target]]\n# model = XGBClassifier(\n#     learning_rate = 0.1,\n#     n_estimators=1000,\n#     max_depth=5,\n#     min_child_weight=1,\n#     gamma=0,\n#     subsample=0.8,\n#     colsample_bytree=0.8,\n#     objective='binary:logistic',\n#     nthread=4,\n#     scale_pos_weight=1,\n#     seed=10)\n# modelfit(model, data, predictors)","a2cfa907":"# params_test = {\n#     'max_depth': [3, 4, 5, 6, 7, 8, 9],\n#     'min_child_weight': [1, 2, 3, 4, 5, 6]\n# }\n# gsearch = GridSearchCV(estimator = XGBClassifier(\n#     learning_rate = 0.1,\n#     n_estimators=200,\n#     max_depth=5,\n#     min_child_weight=1,\n#     gamma=0,\n#     subsample=0.8,\n#     colsample_bytree=0.8,\n#     objective='binary:logistic',\n#     nthread=4,\n#     scale_pos_weight=1,\n#     seed=10), param_grid = params_test, scoring = 'roc_auc', n_jobs=4, iid=False, cv=5)\n# gsearch.fit(data[predictors], data[target])\n# gsearch.best_estimator_, gsearch.best_params_, gsearch.best_score_","d6c32e2b":"adaboost = AdaBoostClassifier()\nadaboost.fit(X_train, y_train)\ny_pred = adaboost.predict(X_test)\nscore = 100*accuracy_score(y_test, y_pred)\nscore","45a3bf89":"# params_test = {\n#     'max_depth': [3, 4, 5, 6, 7, 8, 9],\n#     'n_estimators': [50, 100, 150, 200, 250]\n# }\n# model = XGBClassifier()\n# #kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=7)\n# gsearch = GridSearchCV(model, params_test, scoring='roc_auc', n_jobs=-1, cv=5, verbose=1)\n# result = gsearch.fit(data[predictors], data[target])\n# result.best_score_, result.best_params_","99c2b4b9":"## Encoder some object features","ff6487a4":"   # Data decription:\n   ## bank client data:\n   1 - age (numeric)\n   \n   2 - job : type of job (categorical: \"admin.\", \"unknown\", \"unemployed\", \"management\", \"housemaid\", \"entrepreneur\", \"student\", \"blue-collar\", \"self-employed\", \"retired\", \"technician\", \"services\") \n   \n   3 - marital : marital status (categorical: \"married\", \"divorced\", \"single\"; note: \"divorced\" means divorced or widowed)\n   \n   4 - education (categorical: \"unknown\", \"secondary\", \"primary\", \"tertiary\")\n   \n   5 - default: has credit in default? (binary: \"yes\", \"no\")\n   \n   6 - balance: average yearly balance, in euros (numeric) \n   \n   7 - housing: has housing loan? (binary: \"yes\", \"no\")\n   \n   8 - loan: has personal loan? (binary: \"yes\", \"no\")\n   \n   ## related with the last contact of the current campaign:\n   9 - contact: contact communication type (categorical: \"unknown\", \"telephone\", \"cellular\") \n   \n  10 - day: last contact day of the month (numeric)\n  \n  11 - month: last contact month of year (categorical: \"jan\", \"feb\", \"mar\", ..., \"nov\", \"dec\")\n  \n  12 - duration: last contact duration, in seconds (numeric)\n  \n   ## other attributes:\n  13 - campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)\n  \n  14 - pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric, -1 means client was not previously contacted)\n  \n  15 - previous: number of contacts performed before this campaign and for this client (numeric)\n  \n  16 - poutcome: outcome of the previous marketing campaign (categorical: \"unknown\",\"other\",\"failure\",\"success\")\n  \n\n  Output variable (desired target):\n  \n  17 - y - has the client subscribed a term deposit? (binary: \"yes\",\"no\")","fa11bf9c":"## Modeling"}}