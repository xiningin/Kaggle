{"cell_type":{"1261a6a8":"code","04e5d4d0":"code","d1ea1594":"code","4d64847c":"code","63f2fddc":"code","a12d5259":"code","55944128":"code","7e3ab077":"code","f94efe22":"code","2fa3c38e":"code","52e215f4":"code","a7888fff":"code","c25c4314":"code","6d7331d9":"code","313a7c25":"code","b4ac320e":"code","0b57ae9a":"code","4b7c427a":"code","9b6fabcc":"code","c47761b1":"code","361a0ef9":"code","4880d622":"code","5da86af9":"code","d70a773d":"code","844e98b3":"code","f38c77de":"code","8f21c82d":"code","2a2b7467":"code","f8150cff":"code","5141eca0":"code","236cca5e":"code","b1217a09":"code","8f766694":"code","488e99cd":"code","bbb18b66":"code","d93bef3e":"code","a4c5f526":"code","cd2f50c0":"code","08dafa26":"code","1d11b26e":"code","504a6bb1":"code","7197071d":"code","4b66d0d3":"code","30864a26":"code","bc3ba156":"code","ee18346b":"code","c0dbbbfe":"code","8ae978b8":"code","5064e100":"code","0c62375a":"code","f1cde151":"code","62eddbbf":"code","74171585":"code","70fe3176":"code","4d2b6e7b":"code","c01698fc":"code","e996cccd":"markdown","96e01c0b":"markdown","2326b3c9":"markdown","bb4bc2c7":"markdown","b04e0e59":"markdown","b2b8b994":"markdown","8b3bfc80":"markdown","cbf7dce1":"markdown","2a9f5f10":"markdown","0f4f0762":"markdown","96a35d82":"markdown","5fc9d4d1":"markdown"},"source":{"1261a6a8":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib\n%matplotlib inline\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 150)\nsns.set_style('darkgrid')\nmatplotlib.rcParams['font.size']=14\nmatplotlib.rcParams['figure.figsize'] = (10, 6)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'","04e5d4d0":"imputed_df = pd.read_csv('\/kaggle\/input\/used-cars-dataset-from-cardekhocom\/cardekho_imputated.csv')\nupdated_df = pd.read_csv('\/kaggle\/input\/used-cars-dataset-from-cardekhocom\/cardekho_updated.csv')","d1ea1594":"imputed_df.head()","4d64847c":"updated_df.head()","63f2fddc":"imputed_df.info()","a12d5259":"updated_df.info()","55944128":"updated_df.isnull().sum()","7e3ab077":"updated_df['km_driven'] = imputed_df['km_driven']\nupdated_df['new_price'] = (imputed_df['min_cost_price']+imputed_df['max_cost_price'])\/2\nupdated_df['new_price'] = round(updated_df['new_price'],2)\nupdated_df['new_price'] = updated_df['new_price']\/100000\nupdated_df['year'] = 2021 - updated_df['year']\nupdated_df['km_driven'] = updated_df['km_driven']\/10000","f94efe22":"tar = updated_df['new_price'].copy()\nNew_price = tar","2fa3c38e":"updated_df = updated_df.drop(['new_price'], axis=1)","52e215f4":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import MinMaxScaler, OneHotEncoder\nfrom sklearn.model_selection import train_test_split","a7888fff":"input_cols, target_col = updated_df.columns[1:-1], New_price\ninputs_df, targets = updated_df[input_cols].copy(), target_col.copy()","c25c4314":"targets = targets.replace(np.nan, 0)","6d7331d9":"numeric_cols = updated_df[input_cols].select_dtypes(include=np.number).columns.tolist()\ncategorical_cols = updated_df[input_cols].select_dtypes(include='object').columns.tolist()","313a7c25":"imputer = SimpleImputer().fit(inputs_df[numeric_cols])\ninputs_df[numeric_cols] = imputer.transform(inputs_df[numeric_cols])\nscaler = MinMaxScaler().fit(inputs_df[numeric_cols])\ninputs_df[numeric_cols] = scaler.transform(inputs_df[numeric_cols])","b4ac320e":"inputs_df","0b57ae9a":"inputs_df[[\n 'mileage',\n 'engine',\n 'max_power']] = inputs_df[[\n 'mileage',\n 'engine',\n 'max_power']].replace(np.nan, 'Unknown')","4b7c427a":"inputs_df[categorical_cols] = inputs_df[categorical_cols].astype(str)","9b6fabcc":"encoder = OneHotEncoder(sparse=False, handle_unknown='ignore').fit(inputs_df[categorical_cols])\nencoded_cols = list(encoder.get_feature_names(categorical_cols))\ninputs_df[encoded_cols] = encoder.transform(inputs_df[categorical_cols])","c47761b1":"train_inputs, val_inputs, train_targets, val_targets = train_test_split(inputs_df[numeric_cols + encoded_cols], targets, test_size=0.25, random_state=42)","361a0ef9":"from sklearn.tree import DecisionTreeRegressor","4880d622":"tree = DecisionTreeRegressor(random_state=42)","5da86af9":"tree.fit(train_inputs, train_targets)","d70a773d":"from sklearn.metrics import mean_squared_error","844e98b3":"tree_train_preds = tree.predict(train_inputs)","f38c77de":"tree_train_rmse = mean_squared_error(train_targets, tree_train_preds, squared=False)","8f21c82d":"tree_val_preds = tree.predict(val_inputs)","2a2b7467":"tree_val_rmse = mean_squared_error(val_targets, tree_val_preds, squared=False)","f8150cff":"print('Train RMSE: {}, Validation RMSE: {}'.format(tree_train_rmse, tree_val_rmse))","5141eca0":"from sklearn.tree import plot_tree, export_text\nsns.set_style('darkgrid')","236cca5e":"plt.figure(figsize=(30, 15))\nplot_tree(tree, feature_names=train_inputs.columns, max_depth=3, filled=True);","b1217a09":"tree_text = export_text(tree, max_depth=10, feature_names=list(train_inputs.columns))","8f766694":"# Display the first few lines\nprint(tree_text[:2000])","488e99cd":"tree_importances = tree.feature_importances_","bbb18b66":"tree_importance_df = pd.DataFrame({\n    'feature': train_inputs.columns,\n    'importance': tree_importances\n}).sort_values('importance', ascending=False)","d93bef3e":"tree_importance_df","a4c5f526":"plt.title('Decision Tree Feature Importance')\nsns.barplot(data=tree_importance_df.head(10), x='importance', y='feature');","cd2f50c0":"from sklearn.ensemble import RandomForestRegressor","08dafa26":"rf1 = RandomForestRegressor(n_jobs=-1, random_state=42)","1d11b26e":"# Fit the model\nrf1.fit(train_inputs, train_targets)","504a6bb1":"rf1_train_preds = rf1.predict(train_inputs)","7197071d":"rf1_train_rmse = mean_squared_error(train_targets, rf1_train_preds, squared=False)","4b66d0d3":"rf1_val_preds = rf1.predict(val_inputs)","30864a26":"rf1_val_rmse = mean_squared_error(val_targets, rf1_val_preds, squared=False)","bc3ba156":"print('Train RMSE: {}, Validation RMSE: {}'.format(rf1_train_rmse, rf1_val_rmse))","ee18346b":"# Create the model with custom hyperparameters\nrf2 = RandomForestRegressor(n_jobs=-1,\n                            random_state=42,\n                            n_estimators=500,\n                            max_features=7)","c0dbbbfe":"# Train the model\nrf2.fit(train_inputs, train_targets)","8ae978b8":"rf2.score(train_inputs, train_targets), rf2.score(val_inputs, val_targets)","5064e100":"rf2_train_preds = rf2.predict(train_inputs)","0c62375a":"rf2_train_rmse = mean_squared_error(train_targets, rf2_train_preds, squared=False)","f1cde151":"rf2_val_preds = rf2.predict(val_inputs)","62eddbbf":"rf2_val_rmse = mean_squared_error(val_targets, rf2_val_preds, squared=False)","74171585":"print('Train RMSE: {}, Validation RMSE: {}'.format(rf2_train_rmse, rf2_val_rmse))","70fe3176":"rf2_importance_df = pd.DataFrame({\n    'feature': train_inputs.columns,\n    'importance': rf2.feature_importances_\n}).sort_values('importance', ascending=False)","4d2b6e7b":"rf2_importance_df","c01698fc":"sns.barplot(data=rf2_importance_df, x='importance', y='feature');\n","e996cccd":"**Identify numeric and categorical columns**","96e01c0b":"**One-hot encode categorical columns**","2326b3c9":"**Identify input and target columns**","bb4bc2c7":"***Visualize the tree graphically using plot_tree***","b04e0e59":"***Visualize the tree textually using export_text***","b2b8b994":" # **CAR PRICE PREDICTION**","8b3bfc80":"**Check feature importance**","cbf7dce1":"# **Training the Best Model**","2a9f5f10":"**Impute and scale numeric columns**","0f4f0762":"*Create the model*","96a35d82":"## **Decision Tree**","5fc9d4d1":"**Create training and validation sets**"}}