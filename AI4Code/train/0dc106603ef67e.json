{"cell_type":{"524210ce":"code","f78eb12f":"code","e7b59310":"code","472a2c0e":"code","c775cd8a":"code","eee236e6":"code","69f1e6c2":"code","2836b936":"code","a2482d3d":"code","8707a40d":"code","368663f6":"code","ee7f73c1":"code","44ad1736":"code","0f6ff290":"code","9f8bf742":"code","db95b0d8":"code","f0fa7437":"code","a8672f08":"code","c72ed307":"code","0cab2f9a":"code","00300a88":"code","fa2ecf66":"code","17face7a":"code","d510a65f":"code","0004db99":"code","d115a5cd":"code","3f430ffe":"code","47106449":"code","8e685600":"code","96aaee8b":"code","c1f7a264":"code","25269375":"code","a4d677f3":"code","ee0fde59":"code","f63c6568":"code","45b79eb1":"code","771bd29f":"code","44e2b3e1":"code","8c177ef2":"code","1032a391":"code","b4c78cf3":"code","2cbff36c":"code","df86dc96":"code","3465ba6b":"markdown","15c0af67":"markdown","d4083dea":"markdown","2194f60e":"markdown","b6200480":"markdown","2ce4c80e":"markdown","1dbd6e68":"markdown","7d368b40":"markdown","15c5c60c":"markdown","88d0b0bd":"markdown","ded01156":"markdown","a6834b4e":"markdown","13cd7180":"markdown","0e9e7e99":"markdown","0df4d5c7":"markdown","a469648c":"markdown","cda02b43":"markdown","48c0245d":"markdown","17a5a751":"markdown","82413065":"markdown","b5dffd7b":"markdown","e0e8a404":"markdown","c74963e1":"markdown","c392bd4d":"markdown"},"source":{"524210ce":"%matplotlib inline\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nimport seaborn as sns\n# Make the default figures a bit bigger\nplt.rcParams['figure.figsize'] = (7,4.5) \nplt.rcParams[\"figure.dpi\"] = 120 \n\nsns.set(style=\"ticks\")\nsns.set_context(\"notebook\", font_scale = .7, rc={\"grid.linewidth\": 5}) #poster\ngreek_salad = ['#D0D3C5', '#56B1BF', '#08708A', '#D73A31', '#032B2F']\nsns.set_palette(greek_salad)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport glob\nfilelist = glob.glob(\"..\/input\/*.csv\")\n\n# Load datas\nAAPL = pd.read_csv('..\/input\/AAPL.csv', sep=',', index_col=0, parse_dates=True)\ncols = ['open', 'high', 'low', 'close', 'unadjustedVolume']\nAAPL = AAPL[cols].copy()\nAAPL.rename(columns={'unadjustedVolume': 'volume'}, inplace=True)\n\n# display(AAPL.info())\n# display(AAPL.head(3))\n# display(AAPL.tail(3))\n\ndf_stocks = pd.DataFrame()\n\nfor i in filelist:\n    tmp = pd.read_csv(i)\n    tmp['symbol'] = i.split('\/')[-1].split('.')[0]\n    df_stocks = df_stocks.append(tmp)\n\ncols = ['date', 'open', 'high', 'low', 'close', 'unadjustedVolume', 'changePercent', 'symbol']\ndf_stocks = df_stocks[cols].copy()\ndf_stocks.rename(columns={'unadjustedVolume': 'volume', 'changePercent':'change'}, inplace=True)\ndf_stocks['date'] = pd.to_datetime(df_stocks['date'])\ndf_stocks.head()","f78eb12f":"# create new dataframe with just closing price for each stock\ndf = df_stocks.pivot(index='date', columns='symbol', values='close')\n\n# subset data since 2015\ndf = df[df.index>='2015-01-01']\ndf.tail()","e7b59310":"### Plot the Daily Closing Price and Volume of a Stock\n\n# plt.figure(figsize=(15,7))\n# top = plt.subplot2grid((4,4), (0, 0), rowspan=3, colspan=4)\n# bottom = plt.subplot2grid((4,4), (3,0), rowspan=1, colspan=4)\n# top.plot(AAPL.index, AAPL['close'], color=greek_salad[2]) \n# bottom.bar(AAPL.index, AAPL['volume'], color=greek_salad[4]) \n \n# # set the labels\n# top.axes.get_xaxis().set_visible(False)\n# top.set_title('AAPL')\n# top.set_ylabel('Closing Price')\n# bottom.set_ylabel('Volume');","472a2c0e":"### Plot a Histogram of the Daily Closing Price\n\n# plt.figure(figsize=(15,7))\n# sns.distplot(AAPL['close'].dropna(), bins=50, color=greek_salad[2]);","c775cd8a":"# simple moving averages\nsma5 = AAPL['close'].rolling(5).mean() #5 days\nsma60 = AAPL['close'].rolling(60).mean() #100 days\n \nAAPL_sma = pd.DataFrame({'AAPL': AAPL['close'], 'SMA 5': sma5, 'SMA 60': sma60})\nAAPL_sma.plot(figsize=(10, 3), legend=True, title='AAPL');\n","eee236e6":"df.plot(figsize=(10,4))\nplt.ylabel('Price')\nplt.legend(\"\");","69f1e6c2":"returnfstart = df.apply(lambda x: x \/ x[0])\nreturnfstart.plot(figsize=(10,4)).axhline(1, lw=3, color='black')\nplt.ylabel('Return From Start Price')\nplt.legend('', '');","2836b936":"df.pct_change().plot(figsize=(10,4))\nplt.axhline(0, color='black', lw=3)\nplt.ylabel('Daily Percentage Return')\nplt.legend('', '');","a2482d3d":"# Resample df to business months, take last observation as value \nmonthly = df.resample('BM').apply(lambda x: x[-1])\n\n# Calculate the monthly percentage change\nmonthly.pct_change().plot(figsize=(10,4))\nplt.axhline(0, color='black', lw=1)\nplt.ylabel('Monthly Percentage Return')\nplt.legend('', '');","8707a40d":"# Resample df to quarters, take the mean as value per quarter\nquarter = df.resample('4M').mean()\n\n# Calculate the quarterly percentage change\nquarter.pct_change().plot(figsize=(10,4))\nplt.axhline(0, color='black', lw=3)\nplt.ylabel('Quarterly Percentage Return')\nplt.legend('', '');","368663f6":"# sns.jointplot('AAPL', 'BA', df, kind='reg', color=greek_salad[4]);","ee7f73c1":"# Compute the correlation matrix\ncorr = df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(7, 7))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5});","44ad1736":"# ax1 = sns.PairGrid(df[['AAPL', 'AXP', 'BA']].dropna())\n# # define top, bottom and diagonal plots\n# ax1.map_upper(plt.scatter, color=greek_salad[4])\n# ax1.map_lower(sns.kdeplot, cmap='cool_d')\n# ax1.map_diag(sns.distplot, bins=30);","0f6ff290":"### Distribution of daily percentage change\n\n# daily_pct_c = df\/ df.shift(1) -1\n# daily_pct_c.hist(bins=50, figsize=(15,20), color=greek_salad[1])\n# plt.show()\n\n# display(daily_pct_c.describe())","9f8bf742":"cum_daily_return = (1 + daily_pct_c).cumprod()\n\ncum_daily_return.plot(figsize=(10,4))\nplt.ylabel('Cumulative Daily Returns');\nplt.axhline(1, color='black', lw=3)\nplt.legend('', '');","db95b0d8":"# Resample the cumulative daily return to cumulative monthly return \ncum_monthly_return = cum_daily_return.resample(\"M\").mean()\n\ncum_monthly_return.plot(figsize=(10,4))\nplt.ylabel('Cumulative Monthly Returns');\nplt.axhline(1, color='black', lw=3)\nplt.legend(\"\",\"\");","f0fa7437":"# Define the minumum of periods to consider \nmin_periods = 75 \n\n# Calculate the volatility\nvol = daily_pct_c.rolling(min_periods).std() * np.sqrt(min_periods) \n\n# Plot the volatility\nvol.plot(figsize=(10, 4))\n\n# Show the plot\nplt.legend('', '');","a8672f08":"AAPL.head()","c72ed307":"# Initialize the short and long windows\nshort_window = 40\nlong_window = 100\n\n# Initialize the `signals` DataFrame with the `signal` column\nsignals = pd.DataFrame(index=AAPL.index)\nsignals['signal'] = 0.0\n\n# Create short simple moving average over the short window\nsignals['short_mavg'] = AAPL['close'].rolling(window=short_window, min_periods=1, center=False).mean()\n\n# Create long simple moving average over the long window\nsignals['long_mavg'] = AAPL['close'].rolling(window=long_window, min_periods=1, center=False).mean()\n\n# Create signals\nsignals['signal'][short_window:] = np.where(signals['short_mavg'][short_window:] \n                                            > signals['long_mavg'][short_window:], 1.0, 0.0)   \n\n# Generate trading orders\nsignals['positions'] = signals['signal'].diff()","0cab2f9a":"# Initialize the plot figure\nfig = plt.figure(figsize=(10, 8))\n\n# Add a subplot and label for y-axis\nax1 = fig.add_subplot(111,  ylabel='Price in $')\n\n# Plot the closing price\nAAPL['close'].plot(ax=ax1, color='grey', lw=2.)\n\n# Plot the short and long moving averages\nsignals[['short_mavg', 'long_mavg']].plot(ax=ax1, lw=2.)\n\n# Plot the buy signals\nax1.plot(signals.loc[signals.positions == 1.0].index, \n         signals.short_mavg[signals.positions == 1.0],\n         '^', markersize=10, color='m')\n         \n# Plot the sell signals\nax1.plot(signals.loc[signals.positions == -1.0].index, \n         signals.short_mavg[signals.positions == -1.0],\n         'v', markersize=10, color='k')\n         \n# Show the plot\nplt.show()","00300a88":"# Set the initial capital\ninitial_capital= float(100000.0)\n\n# Create a DataFrame `positions`\npositions = pd.DataFrame(index=signals.index).fillna(0.0)\n\n# Buy a 100 shares\npositions['AAPL'] = 100*signals['signal']   \n  \n# Initialize the portfolio with value owned   \nportfolio = positions.multiply(AAPL['close'], axis=0)\n\n# Store the difference in shares owned \npos_diff = positions.diff()\n\n# Add `holdings` to portfolio\nportfolio['holdings'] = (positions.multiply(AAPL['close'], axis=0)).sum(axis=1)\n\n# Add `cash` to portfolio\nportfolio['cash'] = initial_capital - (pos_diff.multiply(AAPL['close'], axis=0)).sum(axis=1).cumsum()   \n\n# Add `total` to portfolio\nportfolio['total'] = portfolio['cash'] + portfolio['holdings']\n\n# Add `returns` to portfolio\nportfolio['returns'] = portfolio['total'].pct_change()","fa2ecf66":"fig = plt.figure(figsize=(10, 8))\n\nax1 = fig.add_subplot(111, ylabel='Portfolio value in $')\n\n# Plot the equity curve in dollars\nportfolio['total'].plot(ax=ax1, lw=2.)\n\n# Plot the \"buy\" trades against the equity curve\nax1.plot(portfolio.loc[signals.positions == 1.0].index, \n         portfolio.total[signals.positions == 1.0],\n         '^', markersize=10, color='m')\n\n# Plot the \"sell\" trades against the equity curve\nax1.plot(portfolio.loc[signals.positions == -1.0].index, \n         portfolio.total[signals.positions == -1.0],\n         'v', markersize=10, color='k')\n\n# Show the plot\nplt.show()","17face7a":"# Isolate the returns of your strategy\nreturns = portfolio['returns']\n\n# annualized Sharpe ratio\nsharpe_ratio = np.sqrt(252) * (returns.mean() \/ returns.std())\n\n# Print the Sharpe ratio\nprint(np.round(sharpe_ratio,2))","d510a65f":"# Define a trailing 252 trading day window\nwindow = 252\n\n# Calculate the max drawdown in the past window days for each day\nrolling_max = AAPL['close'].rolling(window, min_periods=1).max()\ndaily_drawdown = AAPL['close']\/rolling_max - 1.0\n\n# Calculate the minimum (negative) daily drawdown\nmax_daily_drawdown = daily_drawdown.rolling(window, min_periods=1).min()\n\n# Plot the results\ndaily_drawdown.plot()\nmax_daily_drawdown.plot()\n\n# Show the plot\nplt.show()","0004db99":"# Get the number of days in `aapl`\ndays = (AAPL.index[-1] - AAPL.index[0]).days\n\n# Calculate the CAGR \ncagr = ((((AAPL['close'][-1]) \/ AAPL['close'][1])) ** (365.0\/days)) - 1\n\n# Print CAGR\nprint(np.round(cagr,3))","d115a5cd":"# Drop the columns\nph_df = AAPL.drop(['open', 'high', 'low','volume'], axis=1)\nph_df.reset_index(inplace=True)\nph_df.rename(columns={'close': 'y', 'date': 'ds'}, inplace=True)\nph_df['ds'] = pd.to_datetime(ph_df['ds'])\nph_df.head()\n","3f430ffe":"!pip3 uninstall --yes fbprophet\n!pip3 install fbprophet --no-cache-dir --no-binary :all:","47106449":"from fbprophet import Prophet\nm = Prophet()\nm.fit(ph_df)","8e685600":"# Create Future dates\nfuture_prices = m.make_future_dataframe(periods=365)\n\n# Predict Prices\nforecast = m.predict(future_prices)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","96aaee8b":"fig = m.plot(forecast)\nax1 = fig.add_subplot(111)\nax1.set_title(\"AAPL Stock Price Forecast\", fontsize=16)\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"Close Price\", fontsize=12)\nplt.show()","c1f7a264":"fig2 = m.plot_components(forecast)\nplt.show()","25269375":"# Monthly Data Predictions\nm = Prophet(changepoint_prior_scale=0.01).fit(ph_df)\nfuture = m.make_future_dataframe(periods=12, freq='M')\nfcst = m.predict(future)\nfig = m.plot(fcst)\nplt.title(\"Monthly Prediction \\n 1 year time frame\", fontsize=16)\nplt.xlabel(\"Date\", fontsize=12)\nplt.ylabel(\"Close Price\", fontsize=12)\n\nplt.show()","a4d677f3":"fig = m.plot_components(fcst)\nplt.show()","ee0fde59":"from plotly import tools\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\nimport plotly.tools as tls\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)","f63c6568":"trace = go.Ohlc(x=AAPL.index,\n                open=AAPL['open'],\n                high=AAPL['high'],\n                low=AAPL['low'],\n                close=AAPL['close'],\n               increasing=dict(line=dict(color= '#58FA58')),\n                decreasing=dict(line=dict(color= '#FA5858')))\n\nlayout = {\n    'title': 'AAPL Historical Price',\n    'xaxis': {'title': 'Date',\n             'rangeslider': {'visible': False}},\n    'yaxis': {'title': 'Stock Price (USD$)'},\n    'shapes': [{\n        'x0': '2018-12-31', 'x1': '2018-12-31',\n        'y0': 0, 'y1': 1, 'xref': 'x', 'yref': 'paper',\n        'line': {'color': 'rgb(30,30,30)', 'width': 1}\n    }],\n    'annotations': [{\n        'x': '2019-01-01', 'y': 0.05, 'xref': 'x', 'yref': 'paper',\n        'showarrow': False, 'xanchor': 'left',\n        'text': '2019 <br> starts'\n    }]\n}\n\ndata = [trace]\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='simple_ohlc')","45b79eb1":"# Moving Averages (10, 50 and 200)\nAAPL['10_d_avg'] = AAPL.close.rolling(window=10).mean()\nAAPL['50_d_avg'] = AAPL.close.rolling(window=50).mean()\nAAPL['200_d_avg'] = AAPL.close.rolling(window=200).mean()\nclose_p = AAPL['close'].values.tolist()\n\n\n# Variables to insert into plotly\nten_d = AAPL['10_d_avg'].values.tolist()\nfifty_d = AAPL['50_d_avg'].values.tolist()\ntwoh_d = AAPL['200_d_avg'].values.tolist()\ndate = AAPL.index.values.tolist()\n\n# Set date as index\n#amzn_df = amzn_df.set_index('date')","771bd29f":"fig = tls.make_subplots(rows=2, cols=1, shared_xaxes=True)\n\ncolors = ['#ff4500', '#92a1cf', '#6E6E6E']\navgs = ['10_d_avg', '50_d_avg', '200_d_avg']\n# for i,c in zip(range(n),color):\n#    ax1.plot(x, y,c=c)\n\nfor col, c in zip(avgs, colors):\n    fig.append_trace({'x': AAPL.index, 'y': AAPL[col], 'type': 'scatter', 'name': col, 'line': {'color': c}}, 1, 1)\nfor col in ['close']:\n    fig.append_trace({'x': AAPL.index, 'y': AAPL[col], 'type': 'scatter', 'name': 'Closing Price', 'line':{'color': '#01DF3A'}}, 2, 1)\n    \nfig['layout'].update(height=800,title='Relationship between MAs <br> and Closing Price',\n                    paper_bgcolor='#F2DFCE', plot_bgcolor='#F2DFCE')\n    \niplot(fig, filename='pandas\/mixed-type subplots')","44e2b3e1":"# Take off the date index\nAAPL = AAPL.reset_index()\n\n# Plotly\ntrace0 = go.Scatter(\n    x = AAPL['date'],\n    y = ten_d,\n    name = '10-day MA',\n    line = dict(\n        color = ('#ff6347'),\n        width = 4)\n)\ntrace1 = go.Scatter(\n    x = AAPL['date'],\n    y = fifty_d,\n    name = '50-day MA',\n    line = dict(\n        color = ('#92a1cf'),\n        width = 4,\n    dash=\"dot\")\n)\ntrace2 = go.Scatter(\n    x = AAPL['date'],\n    y = twoh_d,\n    name = '200-day MA',\n    line = dict(\n        color = ('#2EF688'),\n        width = 4,\n        dash = 'dash') # dash options include 'dash', 'dot', and 'dashdot'\n)\n\ndata = [trace0, trace1, trace2]\n\n\n# Edit the layout\nlayout = dict(title = 'Moving Averages for AAPL',\n              xaxis = dict(title = 'Date'),\n              yaxis = dict(title = 'Price'),\n#               annotations=[\n#         dict(\n#             x='2016-01-13',\n#             y=657,\n#             xref='x',\n#             yref='y',\n#             text='<i> First major decline <br> after 10-d crosses <br> 50-d moving average <\/i>',\n#             showarrow=True,\n#             arrowhead=5,\n#             ax=5,\n#             ay=-50\n#         ), dict(\n#         x = \"2016-02-24\",\n#         y = 535,\n#         text = \"<i>Upward trend after <br> 10-day crosses <br>200-day moving average <\/i>\",\n#         textangle = 0,\n#         ax = 50,\n#         ay = 50,\n#         font = dict(\n#           color = \"black\",\n#           size = 12\n#         )\n#         )],\n              paper_bgcolor='#FFF9F5',\n              plot_bgcolor='#FFF9F5'\n              )\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename='styled-line')","8c177ef2":"df_MSFT = df_stocks[df_stocks['symbol'] == \"MSFT\"].copy()\ndf_MSFT.drop('symbol', axis=1, inplace=True)\ndf_MSFT.set_index('date', inplace=True)\ndf_MSFT.head()","1032a391":"def feature_creator(df):\n    \n    ## Current price\n    lambd = df['close']\n    \n    ## Rolling mean\n    rm_lambd = df['close'].rolling(window=60).mean()\n    \n    ## Rolling volatility\n    rstd_lambd = (df['close'].rolling(window=60).std()) \/ lambd\n    \n    ## Trading range\n    df_range = (df['low'] - df['high']) \/ df['high']\n    rm_df_range = df_range.rolling(window=60).mean()\n    \n    ## Momentum\n    momentum = (df['close'] - df['close'].shift(60)) \/ df['close']\n    \n    ## Cumulative returns\n    cumula_ret_df = df['close']\n    cumula_ret_df = (cumula_ret_df \/ cumula_ret_df.ix[0]) - 1\n    \n    ##  Distance from moving average\n    dfrm = (df['close'] - rm_lambd) \/ df['close']\n    \n    ## Standard deviations from moving average\n    stfrm = (df['close'] - rm_lambd) \/ df['close'].rolling(window=60).std()\n    \n    ## Daily returns\n    daily_ret = df['close']\n    daily_ret = (daily_ret \/ daily_ret.shift(1)) - 1\n    daily_ret = daily_ret.rolling(window=60).mean()\n    daily_ret = daily_ret.drop(daily_ret.index[0:60])\n    \n    ## Volatility momentum\n    std_rat_1 = df['close'].rolling(window=60).std()\n    std_rat_2 = df['close'].shift(1).rolling(window=60).std()\n    std_rat = (std_rat_1 \/ std_rat_2) - 1\n    \n    ## ADX, DI_minus, DI_plus\n    p_high = df['high'].shift(1).drop(df['high'].index[0])\n    p_low = df['low'].shift(1).drop(df['low'].index[0])\n    p_close = df['close'].shift(1).drop(df['close'].index[0])\n    high = df['high'].drop(df['high'].index[0])\n    low = df['low'].drop(df['low'].index[0])\n    close = df['close'].drop(df['close'].index[0])\n    UpMove = high - p_high\n    DownMove = low - p_low\n    up_more_down = UpMove > DownMove\n    up_more_zero = UpMove > 0\n    down_more_up = DownMove > UpMove\n    down_more_zero = DownMove > 0\n    data = pd.concat([UpMove, DownMove], axis=1)\n    data = data.rename(columns={'High':'UpMove', 'Low':'DownMove'})\n    data['DI_plus_one'] = up_more_down & up_more_zero\n    data['DI_minus_one'] = down_more_up & down_more_zero\n    data['DI_plus'] = (1 * data['DI_plus_one']) * UpMove\n    data['DI_minus'] = (1 * data['DI_minus_one']) * DownMove\n    data_x = data.drop(['DI_plus_one', 'DI_minus_one'], axis=1)\n    DI_plus = data_x['DI_plus']\n    DI_minus = data_x['DI_minus']\n    TR1 = abs(high - low)\n    TR2 = abs(high - p_close)\n    TR3 = abs(low - p_close)\n    TR_max = np.maximum(TR1, TR2)\n    TR = np.maximum(TR_max, TR3)\n    TR_ewma_x = TR.ewm(com=13, min_periods=28).mean()\n    TR_ewma = TR_ewma_x.drop(TR_ewma_x.index[0:13])\n    plus_div = DI_plus \/ TR_ewma\n    minus_div = DI_minus \/ TR_ewma\n    plus_DI_x = 100 * plus_div.ewm(com=13, min_periods=28).mean()\n    plus_DI = plus_DI_x.drop(plus_DI_x.index[0:26])\n    minus_DI_x = 100 * minus_div.ewm(com=13, min_periods=28).mean()\n    minus_DI = minus_DI_x.drop(minus_DI_x.index[0:26])\n    ADX_x = abs((plus_DI - minus_DI) \/ (plus_DI + minus_DI))\n    ADX_xx = 100 * ADX_x.ewm(com=13, min_periods=28).mean()\n    ADX = ADX_xx.drop(ADX_xx.index[0:26])\n    m_plus_DI_xx = (plus_DI - plus_DI.shift(2)) \/ plus_DI\n    m_minus_DI_xx = (minus_DI - minus_DI.shift(2)) \/ minus_DI\n    m_plus_DI_x = m_plus_DI_xx.drop(m_plus_DI_xx.index[0:3])\n    m_minus_DI_x = m_minus_DI_xx.drop(m_minus_DI_xx.index[0:3])\n    \n    ## Volume \/ 10 000\n    volume = df['volume'] \/ 10000\n    \n    ## Change in volume\n    m_volume = (df['volume'] - df['volume'].shift(60)) \/ df['volume']\n        \n    ## Trig angle\n    period = 60\n    x1 = df['close'].shift(period)\n    x1 = x1.drop(x1.index[0:period])\n    x3 = df['close'].drop(df['close'].index[0:6])\n    x2_max = df['close'].rolling(window=period).max()\n    x2_min = df['close'].rolling(window=period).min()\n    f1 = (df['close'] - x2_max)\n    f2 = (df['close'] - x2_min)\n    f_max = (f1 > f2).astype(int)\n    f_min = (f2 > f1).astype(int)\n    zz1 = f_max * x2_max\n    zz2 = f_min * x2_min\n    x2 = zz1 + zz2\n    x2 = x2.drop(x2.index[0:6])\n    x_len = np.sqrt((np.square(x2 - x1)) + np.square(period))\n    y_len = np.sqrt((np.square(x2 - x3)) + np.square(period))\n    y_len = y_len.drop(y_len.index[0:period])\n    x_theta = np.arcsin(period \/ x_len)\n    y_theta = np.arcsin(period \/ y_len)\n    z1 = 90 - (np.arcsin(period \/ x_len))\n    z2 = 90 - (np.arcsin(period \/ y_len))\n    trig_x = 180 - z1 - z2\n    min_value = x3 > x2\n    max_value = x2 > x3\n    mini = min_value.drop(min_value.index[0:5]).astype(int)\n    maxi = max_value.drop(max_value.index[0:5]).astype(int) * - 1\n    mask = mini + maxi\n    trig = trig_x * mask\n\n    features = [ lambd, rm_lambd, rstd_lambd, rm_df_range, momentum, cumula_ret_df, dfrm, stfrm, daily_ret,\n               std_rat, m_plus_DI_x, m_minus_DI_x, ADX, volume, m_volume, trig]\n    features = pd.concat(features, axis=1)\n    features.columns = ['current value', 'rolling mean', 'volatility', 'trading range', 'momentum', 'cumulative value',\n                       'distance from moving average', 'standard deviations from moving average', 'daily change', 'change in volatility', 'Change in + directional movement', 'Change in - directional movement', 'Average Directional Index', 'volume', 'change in volume', 'angle']\n    features = features.drop(features.index[0:82])\n    features = features.drop(features.index[-60:])\n    \n    return features","b4c78cf3":"def target_creator(df):\n    target = df['close'].shift(-60)\n    current_close = df['close']\n    frames = [current_close, target]\n    out = pd.concat(frames, axis=1)\n    out.columns = ['current_close','target']\n    out = out.drop(out.index[0:82])\n    out = out.drop(out.index[-60:])\n    return out","2cbff36c":"X, y = feature_creator(df_MSFT), target_creator(df_MSFT)['target']","df86dc96":"plt.plot(X['current value'], label='current price')\nplt.plot(y, label='target price in 60 trading days')\nplt.legend()\nsns.despine();","3465ba6b":"Another way is the plot the daily percentage change of stock price.","15c0af67":"## Monthly Predictions","d4083dea":"## Evaluating Moving Average Crossover Strategy\n### Sharpe Ratio","2194f60e":"Below we can see aligned our current price line and the line representing where prices will be in 60 trading days, which will be what our model will be trying to learn. We must note that there is a bias towards predicting increases in price because the equity has mostly increased in price over the long term.","b6200480":"Because of stocks overlapping each other, it is a little hard to make any comparisons here. It is better to have some hard numbers so lets do some correlation plots.\n\n### Correlation Plots","2ce4c80e":"## Building a trading strategy","1dbd6e68":"# OHLC \n[Source](https:\/\/www.kaggle.com\/janiobachmann\/s-p-500-time-series-forecasting-with-prophet)","7d368b40":"# Stock Market Data Analysis with Python\n#### Basics for handling and analyzing stock market data\n\n[Source](https:\/\/ntguardian.wordpress.com\/2018\/07\/17\/stock-data-analysis-python-v2\/)\n## 1. Import Multiple Stock Data","15c5c60c":"Just looking at the chart, you can see that the relationship is somewhat linear. Strongly correlated stocks can be used in **pair trading**","88d0b0bd":"### Volatility Calculation ","ded01156":"As each stock has different prices, it is difficult to compare between them to visualise any relationships. Some transformation can help to normalise this issue.\n\n### Normalizing multiple stocks\nDividing all the closing price to the first closing price in the period.","a6834b4e":"### Cumulative daily returns","13cd7180":"# Forecast stock price","0e9e7e99":"### Plot the Daily Closing Price of multiple stocks","0df4d5c7":"# Moving averages","a469648c":"Create feature set","cda02b43":"## 2. Visualizing Stock Data","48c0245d":"### Compound Annual Growth Rate (CAGR)","17a5a751":"The target creator function takes a dataframe and returns a dataframe with two entries, the current close price and the close price in 60 trading days or one \"quarter\".","82413065":"# Predict future prices","b5dffd7b":"### Maximum Drawdown","e0e8a404":"PairGrid can be used for paired comparisons with flexibility on the type of charts being plotted. For this case, a scatterplots, kde plots and histograms are plotted.","c74963e1":"## Backtesting a strategy","c392bd4d":"### Chart Simple Moving Average"}}