{"cell_type":{"47e3fed6":"code","435eef2f":"code","3aabb93e":"code","47ef5dc4":"code","2ef24a7b":"code","84deeb87":"code","7f66771c":"code","5f40b8ed":"code","416ce274":"code","6a457dea":"code","2c07fd19":"code","58512b27":"code","fad75c4b":"code","8215b16e":"code","57c483bc":"code","61ffc384":"code","6f7b023b":"code","50520cc8":"markdown","ffa44275":"markdown"},"source":{"47e3fed6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","435eef2f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport geopandas as gdf\n%matplotlib inline","3aabb93e":"df1=pd.read_csv(\"..\/input\/i-am-coming-home\/Im coming Home (1).csv\")\ndf2=pd.read_csv(\"..\/input\/i-am-coming-home\/Im coming Home(2).csv\")\ndf3=pd.read_csv(\"..\/input\/i-am-coming-home\/Im coming Home(3).csv\")\ndf1_mod=df1.iloc[:-3]\ndf1_mod=df1_mod.rename(columns = {'Country-wise': 'NAME'})\ndf1_mod[\"NAME\"]=df1_mod[\"NAME\"].replace({'Brunei':'Brunei Darussalam',\n 'Iran':'Iran (Islamic Republic of)',\n 'Laos':\"Lao People's Democratic Republic\",\n 'Moldova':'Republic of Moldova',\n 'Myanmar':'Burma',\n 'South Korea':'Korea, Republic of',\n 'Syria': 'Syrian Arab Republic',\n 'Tanzania':'United Republic of Tanzania',\n 'United States of America':'United States',\n 'Vietnam':'Viet Nam'}\n    )\ndf1_mod","47ef5dc4":"shp_gdf = gdf.read_file('..\/input\/world-shapefile\/world_shapefile.shp')\nnull_value=[0 for i in range(0,len(list(set(shp_gdf.NAME.unique())-set(df1_mod.NAME.unique()))))]\ndata = {'NAME':list(set(shp_gdf.NAME.unique())-set(df1_mod.NAME.unique())),\n        'Number of Repatriated Indians':null_value}\n\n# Create DataFrame\ndf1_mod=df1_mod.append(pd.DataFrame(data), ignore_index=True)","2ef24a7b":"shp_gdf1=shp_gdf.loc[:,[\"NAME\",\"LON\",\"LAT\",\"geometry\"]].merge(df1_mod,on=\"NAME\").sort_values(by=[\"Number of Repatriated Indians\"],ascending=False)","84deeb87":"import plotly.express as px\nfig, ax = plt.subplots(1, figsize=(20, 12))\nax.axis('off')\nax.set_title('Indians(Repatriated from around the globe)',\n             fontdict={'fontsize': '15', 'fontweight' : '3'})\nfig = shp_gdf1.plot(column='Number of Repatriated Indians',cmap=\"Accent\",linewidth=0.3, ax=ax, edgecolor='0.2',legend=True)","7f66771c":"fig = px.choropleth(shp_gdf1,\n                   geojson=shp_gdf1.geometry,\n                   locations=shp_gdf1.index,\n                   color=\"Number of Repatriated Indians\"\n                   ,hover_name=\"NAME\",\n                   color_continuous_scale=px.colors.sequential.Blues,projection=\"natural earth\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.show()","5f40b8ed":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(20,8))\nsns.barplot(x=\"NAME\",y=\"Number of Repatriated Indians\",data=shp_gdf1.head(20),ax=ax1)\nax1.tick_params(labelrotation=45)\nsns.despine(ax=ax1)\nax1.set_xlabel(\"Countries\")\nax1.set_title(\"Country wise Repatriated Indians(Top 20 countries)\")\nsns.barplot(x=\"State\/UT-wise\",y=\"Number of Repatriated Indians\",data=df2.sort_values(by=\"Number of Repatriated Indians\",ascending=False).head(20),ax=ax2)\nax2.tick_params(labelrotation=45)\nax2.set_title(\"State wise Repatriated Indians(Top 20 states)\")\nsns.despine(ax=ax2)\nplt.suptitle(\"Indians Repatriated from Outside and Inside the Country(India)\",fontsize=20)\nplt.show()","416ce274":"shp_ind = gdf.read_file('..\/input\/india-gis-data\/India States\/Indian_states.shp')\nshp_ind=shp_ind.rename(columns={\"st_nm\":\"State\/UT-wise\"})\ndf2[\"State\/UT-wise\"]=df2[\"State\/UT-wise\"].replace({\n    \"Andaman & Nicobar Islands\":'Andaman & Nicobar Island',\n    \"Arunachal Pradesh\": 'Arunanchal Pradesh',\n    \"Dadra & Nagar Haveli\":'Dadara & Nagar Havelli',\n    \"Daman and Diu\": 'Daman & Diu',\n    \"Jammu and Kashmir\":'Jammu & Kashmir',\n    \"Delhi\":'NCT of Delhi',\n    \"Uttaranchal\": 'Uttarakhand'\n})\n\n#set(shp_ind[\"State\/UT-wise\"])-set(shp_ind2[\"State\/UT-wise\"])\nshp_ind2=shp_ind.merge(df2\n                       ,on=\"State\/UT-wise\").drop(columns=[\"Sl. No.\"])\nfig = px.choropleth(shp_ind2,\n                   geojson=shp_ind2.geometry,\n                   locations=shp_ind2.index,\n                   color=\"Number of Repatriated Indians\"\n                   ,hover_name=\"State\/UT-wise\",\n                   color_continuous_scale=px.colors.sequential.RdBu)\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.show()","6a457dea":"df3[\"Number of Repatriated Indians by Land\"]=df3[\"Number of Repatriated Indians by Land\"].astype(\"float\")\ndf3[\"Number of Repatriated Indians by Sea\"]=df3[\"Number of Repatriated Indians by Sea\"].astype(\"float\")\nfig,ax=plt.subplots(1,3,figsize=(20,8))\nsns.barplot(y=\"Country-wise\",x=\"Number of Repatriated Indians by air (as arrived on 11 september 2020)\",\n            data=df3.sort_values(by=[\"Number of Repatriated Indians by air (as arrived on 11 september 2020)\"]).tail(20),ax=ax[0])\nax[0].tick_params(labelrotation=45)\nsns.despine(ax=ax[0])\nax[0].set_xlabel(\"Count of Repatriated Indians\")\nax[0].set_title(\"Country wise Repatriated Indians(Top 20 countries)\")\nsns.barplot(y=\"Country-wise\",x=\"Number of Repatriated Indians by Sea\",\n            data=df3.sort_values(by=[\"Number of Repatriated Indians by Sea\"]).head(20),ax=ax[1])\nax[1].tick_params(labelrotation=45)\nsns.despine(ax=ax[1])\nax[1].set_xlabel(\"Count of Repatriated Indians\")\nax[1].set_title(\"Country wise Repatriated Indians(Top 20 countries)\")\nsns.barplot(y=\"Country-wise\",x=\"Number of Repatriated Indians by Land\",\n            data=df3.sort_values(by=[\"Number of Repatriated Indians by Land\"]).head(20),ax=ax[2])\nax[2].tick_params(labelrotation=45)\nsns.despine(ax=ax[2])\nax[2].set_xlabel(\"Count of Repatriated Indians\")\nax[2].set_title(\"Country wise Repatriated Indians(Top 20 countries)\")\nplt.suptitle(\"Indians Repatriated from Outside the Country(India)\",fontsize=20)\nplt.show()","2c07fd19":"pip install geonamescache","58512b27":"import geonamescache\nfrom matplotlib.patches import ConnectionPatch\ngc = geonamescache.GeonamesCache()\ncountries = gc.get_countries()\ndf3[\"Country-wise\"]=df3[\"Country-wise\"].replace({\"United States of America\":\"United States\"})\ngeonames=pd.DataFrame(countries).T.loc[:,[\"name\",\"continentcode\",\"capital\"]]\nnew_df3=geonames.rename(columns={\"name\":\"Country-wise\"}).merge(df3,on=\"Country-wise\");\nplt.figure(figsize=(20,10))\nnew_df3.groupby(\"continentcode\")[\"Number of Repatriated Indians by air (as arrived on 11 september 2020)\"].sum().plot.pie(autopct='%.2f');\nplt.ylabel(\"Arrived by Air\");\nplt.title(\"Number of Repatriated Indians from Continents\",fontsize=20)\nplt.legend([\"Africa\",\"Asia\",\"Europe\",\"North America\",\"Oceania and Australia\",\"South America\"],facecolor=\"whitesmoke\")\nplt.show()","fad75c4b":"def mat_plot(continent,ax):\n    xpos = 0\n    bottom = 0\n    ratios = list(new_df3[new_df3[\"continentcode\"]==continent].groupby(\"Country-wise\")[\"Number of Repatriated Indians by air (as arrived on 11 september 2020)\"].sum().sort_values().tail().values)\n    width = .2\n    colors=[k for k,v in matplotlib.colors.cnames.items()][20:30]\n\n    for j in range(len(ratios)):\n        height = ratios[j]\n        ax.bar(xpos, height, width, bottom=bottom, color=colors[j])\n        ypos = bottom + ax.patches[j].get_height() \/ 2\n        bottom += height\n        ax.text(xpos, ypos,(ax.patches[j].get_height()),\n                 ha='center')\n\n    ax.legend((list(new_df3[new_df3[\"continentcode\"]==continent].groupby(\"Country-wise\")[\"Number of Repatriated Indians by air (as arrived on 11 september 2020)\"].\n                  sum().sort_values().tail().keys())))\n    ax.axis('off')\n    ax.set_title(\"Countries from {}\".format(continent),fontsize=8)\n    ax.set_xlim(- 2.5 * width, 2.5 * width)","8215b16e":"import matplotlib\nfrom matplotlib.patches import ConnectionPatch\nimport numpy as np\n\n# make figure and assign axis objects\nfig, (ax1, ax2,ax3,ax4,ax5,ax6,ax7) = plt.subplots(1,7, figsize=(25,10),facecolor=\"whitesmoke\")\nfig.subplots_adjust(wspace=0)\n\n# pie chart parameters\nratios = list(new_df3.groupby(\"continentcode\")[\"Number of Repatriated Indians by air (as arrived on 11 september 2020)\"].sum().values)\nlabels = list(new_df3.groupby(\"continentcode\")[\"Number of Repatriated Indians by air (as arrived on 11 september 2020)\"].sum().keys())\nexplode = [0, 0.1, 0,0,0,0]\n# rotate so that first wedge is split by the x-axis\nangle = -180 * ratios[0]\nax1.pie(ratios, autopct='%1.1f%%', startangle=angle,\n        labels=labels, explode=explode)\nax1.legend([\"Africa\",\"Asia\",\"Europe\",\"North America\",\"Oceania and Australia\",\"South America\"],loc=\"lower right\")\n# bar chart parameters\n\nmat_plot(\"AS\",ax2)\nmat_plot(\"EU\",ax3)\nmat_plot(\"NA\",ax4)\nmat_plot(\"SA\",ax5)\nmat_plot(\"OC\",ax6)\nmat_plot(\"AF\",ax7)\nplt.suptitle(\" 5 Countries from each continent where the most Indian Repatriated\",fontsize=12)\nplt.show()","57c483bc":"import folium\nfrom folium.plugins import FastMarkerCluster\nm = folium.Map(location=[180,0], tiles = 'cartodbpositron', zoom_start=4, control_scale=True)\n\n# Create a list of coordinate pairs\nlocations = list(zip(shp_gdf1.where(shp_gdf1[\"Number of Repatriated Indians\"]!=0).dropna()[\"LAT\"],\n                     shp_gdf1.where(shp_gdf1[\"Number of Repatriated Indians\"]!=0).dropna()[\"LON\"]))\nmarker_cluster = FastMarkerCluster(locations)\n\n# Add marker cluster to map\nmarker_cluster.add_to(m)\nm.get_root().html.add_child(folium.Element('''<h3><b>\"Counts of Countries(as per their region)\"<\/b><\/h3>'''))\n# Show map\nm","61ffc384":"from folium.plugins import HeatMap\ntitle_html = '''\n             <h2 align=\"left\" style=\"font-size:16px\"><b>{}<\/b><\/h2>\n             '''.format(\"Heatmap of Clustered areas from where the Repatriated Indians came\")\n# Create a Map instance\nm = folium.Map(location=[51.507351, -0.127758], tiles = 'stamentoner', zoom_start=10, control_scale=True)\n\n# Add heatmap to map instance\n# Available parameters: HeatMap(data, name=None, min_opacity=0.5, max_zoom=18, max_val=1.0, radius=25, blur=15, gradient=None, overlay=True, control=True, show=True)\nHeatMap(locations).add_to(m)\n\n# Alternative syntax:\n#m.add_child(HeatMap(points_array, radius=15))\nm.get_root().html.add_child(folium.Element(title_html))\n# Show map\nm ","6f7b023b":"title_html = '''\n             <h2 align=\"left\" style=\"font-size:16px\"><b>{}<\/b><\/h2>\n             '''.format(\"Heatmap as per the Repatriated Indians count\")\n# Create a Map instance\nheat_df = shp_gdf1.loc[:,[\"LAT\",\"LON\",'Number of Repatriated Indians']]\nmap_hooray = folium.Map(location=[45.517999 ,0 ], zoom_start=4 )\nheat_data = heat_df.values.tolist()\nHeatMap(heat_data,radius=13).add_to(map_hooray)\nmap_hooray.get_root().html.add_child(folium.Element(title_html))\nmap_hooray","50520cc8":"<u>Types of projections<\/u> \n'airy', 'aitoff', 'albers', 'albers usa', 'august',\n            'azimuthal equal area', 'azimuthal equidistant', 'baker',\n            'bertin1953', 'boggs', 'bonne', 'bottomley', 'bromley',\n            'collignon', 'conic conformal', 'conic equal area', 'conic\n            equidistant', 'craig', 'craster', 'cylindrical equal\n            area', 'cylindrical stereographic', 'eckert1', 'eckert2',\n            'eckert3', 'eckert4', 'eckert5', 'eckert6', 'eisenlohr',\n            'equirectangular', 'fahey', 'foucaut', 'foucaut\n            sinusoidal', 'ginzburg4', 'ginzburg5', 'ginzburg6',\n            'ginzburg8', 'ginzburg9', 'gnomonic', 'gringorten',\n            'gringorten quincuncial', 'guyou', 'hammer', 'hill',\n            'homolosine', 'hufnagel', 'hyperelliptical',\n            'kavrayskiy7', 'lagrange', 'larrivee', 'laskowski',\n            'loximuthal', 'mercator', 'miller', 'mollweide', 'mt flat\n            polar parabolic', 'mt flat polar quartic', 'mt flat polar\n            sinusoidal', 'natural earth', 'natural earth1', 'natural\n            earth2', 'nell hammer', 'nicolosi', 'orthographic',\n            'patterson', 'peirce quincuncial', 'polyconic',\n            'rectangular polyconic', 'robinson', 'satellite', 'sinu\n            mollweide', 'sinusoidal', 'stereographic', 'times',\n            'transverse mercator', 'van der grinten', 'van der\n            grinten2', 'van der grinten3', 'van der grinten4',\n            'wagner4', 'wagner6', 'wiechel', 'winkel tripel',\n            'winkel3'","ffa44275":"### Indians Repatriated mostly come from Mid Eastern nations and USA under Vande Bharat Mission."}}