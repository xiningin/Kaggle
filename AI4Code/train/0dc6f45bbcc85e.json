{"cell_type":{"2b81af29":"code","780cc85b":"code","a6ea4bcd":"code","9e6e0d53":"code","079ba32a":"code","f474c1eb":"code","84c6c5de":"code","433c410a":"code","b2a56081":"code","d8103f28":"code","7e8cb6ad":"code","d08459fc":"code","dd09a188":"code","f6e1596a":"code","893468cf":"code","1b3bc90e":"code","9a907c34":"code","e12dc102":"code","d5f0f455":"code","b2e3d464":"code","9d81080d":"code","7b6c201d":"code","7f649aed":"code","10af6b67":"code","f9ea3f6a":"code","ade47d07":"code","779b159c":"code","01147f1d":"code","fd409a77":"code","e9a1dec8":"code","68253fa4":"code","b957fc14":"code","9daf70de":"code","50d59964":"code","19f95f1f":"code","24eac7c5":"code","2a2e486f":"code","16be0326":"code","66522dd4":"code","b5db1f90":"code","f6ab4891":"code","6c099153":"code","41b4f147":"code","1de803de":"code","72af4759":"markdown","5a36864c":"markdown","e5c2d6a9":"markdown","65791602":"markdown","aee27fa0":"markdown","fda04ce1":"markdown","08309208":"markdown","d830159e":"markdown","e48f8e85":"markdown","8460ef11":"markdown","c3069997":"markdown","6afaf7cc":"markdown","1671cb4a":"markdown","717fef0b":"markdown","20af742a":"markdown","521128f3":"markdown","60a8accd":"markdown","6b08a5ea":"markdown","87fcf998":"markdown","ac86b77c":"markdown","d4cd4ac5":"markdown"},"source":{"2b81af29":"from sklearn.datasets import fetch_openml\nmnist = fetch_openml('mnist_784', version = 1)\nmnist.keys()","780cc85b":"X, y = mnist[\"data\"], mnist[\"target\"]\nprint(X.shape)\nprint(y.shape)","a6ea4bcd":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nsome_digit = X[0]\nsome_digit_image = some_digit.reshape(28, 28)\n\nplt.imshow(some_digit_image, cmap=mpl.cm.binary, interpolation = \"nearest\")\nplt.axis(\"off\")\nplt.show()","9e6e0d53":"y[0]","079ba32a":"import numpy as np\ny = y.astype(np.uint8)","f474c1eb":"X_train, X_test, y_train, y_test = X[:60000], X[60000:], y[:60000], y[60000:]","84c6c5de":"y_train_5 = (y_train == 5)\ny_test_5 = (y_test == 5)","433c410a":"from sklearn.linear_model import SGDClassifier\n\nsgd_clf = SGDClassifier(random_state = 42)\nsgd_clf.fit(X_train, y_train_5)","b2a56081":"sgd_clf.predict([some_digit])","d8103f28":"from sklearn.model_selection import cross_val_score\ncross_val_score(sgd_clf, X_train, y_train_5, cv=3, scoring = \"accuracy\")","7e8cb6ad":"from sklearn.base import BaseEstimator\n\nclass Never5Classifier(BaseEstimator):\n    def fit(self, X, y=None):\n        pass\n    def predict(self, X):\n        return np.zeros((len(X),1), dtype = bool)","d08459fc":"never_5_clf = Never5Classifier()\ncross_val_score(never_5_clf, X_train, y_train_5, cv=3, scoring = \"accuracy\")","dd09a188":"from sklearn.model_selection import cross_val_predict\n\ny_train_pred = cross_val_predict(sgd_clf, X_train, y_train_5, cv=3)","f6e1596a":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_train_5, y_train_pred)","893468cf":"from sklearn.metrics import precision_score, recall_score\nprecision_score(y_train_5, y_train_pred)","1b3bc90e":"recall_score(y_train_5, y_train_pred)","9a907c34":"from sklearn.metrics import f1_score\nf1_score(y_train_5, y_train_pred)","e12dc102":"y_scores = cross_val_predict(sgd_clf, X_train, y_train_5, cv = 3, method=\"decision_function\")","d5f0f455":"from sklearn.metrics import precision_recall_curve\nprecisions, recalls, thresholds = precision_recall_curve(y_train_5, y_scores)\n\ndef plot_precision_recall_vs_threshold(precisions, recalls, thresholds):\n    plt.plot(thresholds, precisions[:-1], \"b--\", label=\"Precision\")\n    plt.plot(thresholds, recalls[:-1], \"g--\", label=\"Recall\")\n    plt.plot(thresholds[10000],precisions[10000],\"ro\")\n    plt.plot(thresholds[20000], precisions[20000], \"go\")\n    plt.legend(loc=\"upper right\")\n    plt.xlabel(\"Threshold\")\n    plt.grid()\n \n\nplot_precision_recall_vs_threshold(precisions, recalls, thresholds)\nplt.show()\n    ","b2e3d464":"threshold_90_precision = thresholds[np.argmax(precisions >= 0.90)]\ny_train_pred_90 = (y_scores >= threshold_90_precision)\nprint(precision_score(y_train_5, y_train_pred_90))\nprint(recall_score(y_train_5, y_train_pred_90))","9d81080d":"plt.plot(recalls, precisions)\nplt.grid()\nplt.xlabel(\"Recall\")\nplt.ylabel(\"Precision\")","7b6c201d":"from sklearn.metrics import roc_curve\n\nfpr, tpr, thresholds = roc_curve(y_train_5, y_scores)","7f649aed":"def plot_roc_curve(fpr, tpr, label=None):\n    plt.plot(fpr, tpr, linewidth=2, label=label)\n    plt.plot([0,1], [0,1], 'k--') #dashed diagonal\n    plt.xlabel(\"False Positive Rate\")\n    plt.ylabel(\"True Positive Rate\")\n    plt.grid()","10af6b67":"plot_roc_curve(fpr, tpr)\nplt.show()","f9ea3f6a":"from sklearn.metrics import roc_auc_score\nroc_auc_score(y_train_5, y_scores)","ade47d07":"from sklearn.ensemble import RandomForestClassifier\n\nforest_clf = RandomForestClassifier(random_state = 42)\ny_probas_forest = cross_val_predict(forest_clf, X_train, y_train_5, cv=3, method=\"predict_proba\")\ny_scores_forest = y_probas_forest[:, 1]\nfpr_forest, tpr_forest, thresholds_forest = roc_curve(y_train_5, y_scores_forest)","779b159c":"plt.plot(fpr, tpr, \"b:\", label=\"SGD\")\nplot_roc_curve(fpr_forest, tpr_forest, \"Random Forest\")\nplt.legend(loc=\"lower right\")\nplt.show()","01147f1d":"roc_auc_score(y_train_5, y_scores_forest)","fd409a77":"sgd_clf.fit(X_train, y_train) #automatically detects to run OvA except for SVM classifiers\nsgd_clf.predict([some_digit])","e9a1dec8":"plt.imshow(some_digit_image, cmap=mpl.cm.binary, interpolation = \"nearest\")","68253fa4":"some_digit_scores = sgd_clf.decision_function([some_digit])\nsome_digit_scores","b957fc14":"np.argmax(some_digit_scores)","9daf70de":"sgd_clf.classes_","50d59964":"sgd_clf.classes_[3]","19f95f1f":"from sklearn.multiclass import OneVsOneClassifier\novo_clf = OneVsOneClassifier(SGDClassifier(random_state=42))\novo_clf.fit(X_train, y_train)\novo_clf.predict([some_digit])","24eac7c5":"len(ovo_clf.estimators_)","2a2e486f":"forest_clf.fit(X_train, y_train)\nforest_clf.predict([some_digit])","16be0326":"forest_clf.predict_proba([some_digit])","66522dd4":"cross_val_score(sgd_clf, X_train, y_train, cv=3, scoring=\"accuracy\")","b5db1f90":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train.astype(np.float64))\ncross_val_score(sgd_clf, X_train_scaled, y_train, cv=3, scoring=\"accuracy\")","f6ab4891":"y_train_pred = cross_val_predict(sgd_clf, X_train_scaled, y_train, cv=3)\nconf_mx = confusion_matrix(y_train, y_train_pred)\nconf_mx","6c099153":"plt.matshow(conf_mx, cmap=plt.cm.gray)\nplt.show()","41b4f147":"row_sums = conf_mx.sum(axis = 1, keepdims = True)\nnorm_conf_mx = conf_mx \/ row_sums","1de803de":"np.fill_diagonal(norm_conf_mx, 0)\nplt.matshow(norm_conf_mx, cmap=plt.cm.gray)\nplt.show()","72af4759":"Performance Measures","5a36864c":"#### Multiclass Classification","e5c2d6a9":"ROC AUC","65791602":"As a rule of thumb, one should prefer the PR curve whenever the positive class is rare or when you care more about the false positives than the false negatives. The ROC curve otherwise.","aee27fa0":"Simply scaling the inputs increases accuracy.","fda04ce1":"Training a Binary Classification\n- \"5-detector\"","08309208":"Random Forest Classifier","d830159e":"Comparing error rates instead of absolute number of errors (which would make abundant classes look unfairly bad)","e48f8e85":"Stochastic Gradient Descent","8460ef11":"Fill diagonal with zeros to keep only the errors ","c3069997":"Confusion Matrix","6afaf7cc":"- One-versus-all(OvA) Strategy has one binary classifier for each class i.e N classes have N classifiers.\n\n- One-versus-One(OvO) Strategy uses too many classifiers for detecting each class. The actual no of classes are N * (N-1)\/2 if the number of classes are N.\n","1671cb4a":"Train-Test split","717fef0b":"Dumb Classifier","20af742a":"The ROC Curve","521128f3":"Precision and Recall","60a8accd":"Precision\/Recall Tradeoff","6b08a5ea":"#### Error Analysis","87fcf998":"F1 score\n- harmonic mean of recall and precision\n- gives more weigth to low values so for high F1 score both recall and precision should be high\n- favours classifiers that have similar precision and recall.","ac86b77c":"Measuring Accuracy using Cross-Validation","d4cd4ac5":"RandomForestClassifier"}}