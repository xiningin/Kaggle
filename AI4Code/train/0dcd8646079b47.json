{"cell_type":{"cb1ae5f9":"code","bd0a5a3e":"code","384e3880":"code","1874abb1":"code","4dd554b0":"code","53586849":"code","71b73275":"code","e47b7fe4":"code","9d678276":"code","b6062589":"code","882d53c0":"code","305aa229":"code","be0a53a8":"markdown","7332a0da":"markdown","899aebe7":"markdown","3b39ae42":"markdown","2c9df78b":"markdown","0d1d1d37":"markdown","6b4afdc5":"markdown","5333de63":"markdown","7e70df17":"markdown","c8d8bbe5":"markdown","57c3f4c1":"markdown"},"source":{"cb1ae5f9":"## Mathmatics libraries\nimport numpy as np\nimport math\n\n## Image Processing libraries\nimport skimage\nfrom skimage import exposure\n\nimport scipy.misc as misc\n\nimport rawpy\nimport imageio\n\n## Visual and plotting libraries\nimport matplotlib.pyplot as plt","bd0a5a3e":"## Reading a RAW file:\nrawImg = rawpy.imread('..\/input\/IMG_0978.CR2')","384e3880":"#rgbImg = rawImg.postprocess()\nrgbImg = rawImg.raw_image_visible","1874abb1":"type(rgbImg)","4dd554b0":"def basic_showImg(img, size=4):\n    '''Shows an image in a numpy.array type. Syntax:\n        basic_showImg(img, size=4), where\n            img = image numpy.array;\n            size = the size to show the image. Its value is 4 by default.\n    '''\n    plt.figure(figsize=(size,size))\n    plt.imshow(img)\n    plt.show()","53586849":"basic_showImg(rgbImg,8)","71b73275":"# Gamma adjustment\ngamma_corrected = exposure.adjust_gamma(rgbImg, gamma=0.5, gain=1)","e47b7fe4":"basic_showImg(gamma_corrected,8)","9d678276":"# Histogram equalization\nhist_equalized = exposure.equalize_hist(rgbImg)","b6062589":"basic_showImg(hist_equalized,8)","882d53c0":"def basic_writeImg(directory, filename, img):\n    imageio.imwrite(directory+filename, img)","305aa229":"basic_writeImg('','edited_img.png', hist_equalized)","be0a53a8":"## III. Exposure editing","7332a0da":"### I. Libraries and methods  \nThe lines below import some python libraries developed for image processing.","899aebe7":"Here the image was already read. It's interesting to notice that in image processing a image is considered as a matrix. In python, the simplest way to represent it is using a numpy.array type, as confirmed below:","3b39ae42":"The next line (commented) was suppose to post-process the RAW image into a numpy.array. Here, due to some Kaggle limitation it was not possible to run without the \"unsuficient memory\" error. In a local kernel, though, please uncomment the first line below and remove the *rgbImg = rawImg.raw_image_visible* statement. ","2c9df78b":"### Histogram equalization\nHistogram equalization is usually applied to adjust contrast in a given image before other editions or processing. There are plenty of techniques to deal with RGB images or gray scaled images. In this example I will not take it into account, appying the histogram equalization for a flattened image (i.e. all three channels combined). More details can be found in https:\/\/en.wikipedia.org\/wiki\/Histogram_equalization.","0d1d1d37":"Once we define our \"showing function\", let's see what we have loaded:","6b4afdc5":"Now it would be useful to define a function to show the image we have read:","5333de63":"## II. Reading a RAW image (CR2)\nThe CR2 file stands for Canon Raw Image, which is not a pure raw image but also includes some metadata. There are plenty of already implemented code to read raw data in Python and, in the case of a CR2 file, to parse its metadata. The code I'm implementing here is based on https:\/\/stackoverflow.com\/questions\/2422050\/raw-image-processing-in-python.","7e70df17":"# Python RAW image processing\nThis notebook has the basic purpose to illustrate how to read a RAW image and to edit it using some well-known python libraries. Maybe next versions of this kernel may include other basic functions (translated from C old code). ","c8d8bbe5":"## IV. Exporting an image\nSince your edition is finished, you can export your image to different formats. There are several libraries for this. I do prefer imageio since it supports many image formats, as detailed in http:\/\/imageio.readthedocs.io\/en\/stable\/formats.html.","57c3f4c1":"### Gamma correction\nThe code in this section performs *gamma adjustment* using the *scikit-image* library. A brief explanation on gamma attribute on images can be found in https:\/\/en.wikipedia.org\/wiki\/Gamma_correction. In general, gamma values greater than 1 will shift the image histogram towards left and the output image will be darker than the input image. On the other hand, for gamma values less than 1, the histogram will shift towards right and the output image will be brighter than the input image."}}