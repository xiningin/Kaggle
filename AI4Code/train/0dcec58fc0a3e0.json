{"cell_type":{"c791c47d":"code","f90d3517":"code","f5600544":"code","811dbab6":"code","388518cd":"code","f40c92dc":"code","d3adf079":"code","0fb59dbe":"code","70728f31":"code","4d3317d6":"code","347dd774":"code","fa219c15":"code","2ecdb41b":"code","e564ad92":"code","5107fb04":"code","57c1267d":"code","a63943f9":"code","961ec3d9":"code","edfd1ce5":"code","91303f9f":"code","680cb01c":"code","00db7ce4":"code","895688a5":"code","bb46704a":"code","a3edf05a":"code","af502917":"code","8721928d":"code","7ddb70c5":"code","6584b7ec":"code","44605445":"code","2639cebf":"code","6f362a86":"code","5abfeb8b":"code","73cb811e":"code","cc80494a":"code","6b2de765":"code","f1ab9ef0":"code","e28e508f":"code","0d9a69d2":"code","29ce4618":"code","64c8c2fa":"code","f9da8351":"code","352b1752":"code","068a062b":"code","99c53186":"code","766efa50":"code","cac662a6":"code","1c8e4a85":"code","7c02f073":"code","f8f9fbed":"code","d875bd39":"code","a2d16b0d":"code","57f0fea7":"code","c9305b9a":"code","62cbdd4f":"code","78ff2c7a":"code","6c2fe310":"code","8b0d7b89":"code","9b9a4fb8":"code","10f47083":"code","02d90aa6":"code","7be329e1":"code","4a4a5a3d":"code","00c6d313":"code","210f8d35":"code","802a4942":"code","3e3d1327":"code","b265e083":"code","395507c1":"code","650e17a6":"code","052b8347":"code","3063d2db":"code","3d51d3cb":"code","baf273cb":"code","b7dbe8a9":"code","dafff524":"code","2bb6fa1b":"code","47808dd9":"code","b04ea181":"code","397ecce0":"code","5450c91f":"code","03a9a6ab":"code","76be3ada":"code","1c289a50":"code","978d9a0a":"code","5b2d1277":"code","ae8d4cf6":"code","7bdfed6a":"code","3e153fc9":"code","b82a9cfd":"code","9b6bd5f4":"code","f3a88dcb":"code","dcb17b74":"code","a1434c90":"code","80b43188":"code","d3cea733":"code","4d278646":"markdown","4310a90e":"markdown","496061fd":"markdown","b5b7a81c":"markdown","d5f05d98":"markdown","68c3e9ba":"markdown","e438c777":"markdown","1f22e3e0":"markdown","08e014a5":"markdown","9147ef13":"markdown","121699b5":"markdown","63f9e2cd":"markdown","b5c8f4fc":"markdown","665193f9":"markdown","a9c195bd":"markdown","7176844e":"markdown","7a1f3ce2":"markdown","b11b202e":"markdown","b0e7f51a":"markdown","99ca3cc3":"markdown","1ba44cb5":"markdown","d3bad092":"markdown","f0166160":"markdown","1b0c446e":"markdown","6506287e":"markdown","c54c975e":"markdown","0e470e8c":"markdown","05f32c7f":"markdown","ba913519":"markdown","b4fbff8b":"markdown","5530c984":"markdown","71e45bd4":"markdown","06c6d423":"markdown","20b97c57":"markdown","ecb435e6":"markdown","82d98450":"markdown","19a71b7e":"markdown","a59c2a62":"markdown","f220e14b":"markdown","8f9873e7":"markdown","ac20956d":"markdown","590028f4":"markdown","167626c5":"markdown","a04004d7":"markdown","492247c2":"markdown","c8fabeaa":"markdown","aae4e9bc":"markdown","efd695fd":"markdown","93406c10":"markdown","4d029984":"markdown","03f98619":"markdown","a65ffeb6":"markdown","3d20eca7":"markdown","bb39580d":"markdown","45079ce8":"markdown","61438d5b":"markdown","06d63417":"markdown","ee64d6f4":"markdown","a2dcd052":"markdown","7f7b4297":"markdown","c860b954":"markdown","87605e37":"markdown"},"source":{"c791c47d":"from IPython.display import Image\nimport os\nImage('..\/input\/ferrari\/1950to2019.jpg')","f90d3517":"# import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport sqlite3\nfrom sqlalchemy import create_engine\n\nimport matplotlib.pyplot as plt\n\ninput_files=os.listdir('\/kaggle\/input\/formula-1-world-championship-1950-2020')","f5600544":"# Set up a connection with database file to interact with the data base. If this file does not exist then it gets automatically created.\nconn=sqlite3.connect(\"f1_info.db\")","811dbab6":"engine=create_engine('sqlite:\/\/\/f1_info.db', echo=False)","388518cd":"def preprocess_cat_cols(df):\n    cat_col=df.select_dtypes(include='object').columns\n    for col in cat_col:\n        for val in df[col].tolist():\n            try:\n                if '\\\\N' in val:\n                    df[col].replace({'\\\\N':'nan'}, inplace=True)\n                    break\n            except:\n                print('Column:',col,'Value:',val)\n        df[col].str.strip()\n        \n        \ndef duplicate_index(df):\n    dup=df.duplicated()\n    indices=dup[dup==True].index\n    return indices","f40c92dc":"input_files","d3adf079":"ckt=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('circuits.csv')])\n#Column alt has nothing but '\\N' so we drop that column\npreprocess_cat_cols(ckt)\nprint(ckt.head())\nckt.to_sql('circuit', con=engine, if_exists='replace')","0fb59dbe":"input_files.index('constructors.csv')","70728f31":"constr=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('constructors.csv')])\npreprocess_cat_cols(constr)\nprint(constr.head())\nconstr.to_sql('constructors', con=engine, if_exists='replace')","4d3317d6":"input_files.index('constructor_results.csv')","347dd774":"constr_rsl=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('constructor_results.csv')])\npreprocess_cat_cols(constr_rsl)\nprint(constr_rsl.head())\nconstr_rsl.to_sql('constructor_results', con=engine, if_exists='replace')","fa219c15":"input_files.index('constructor_standings.csv')","2ecdb41b":"constr_std=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('constructor_standings.csv')])\npreprocess_cat_cols(constr_std)\nprint(constr_std)\nconstr_std.to_sql('constr_std', con=engine, if_exists='replace')","e564ad92":"input_files.index('drivers.csv')","5107fb04":"drivers=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('drivers.csv')])\n\ndrivers['name']=drivers['forename']+' '+drivers['surname']\ndrivers.drop(['forename','surname'],axis=1,inplace=True)\n\npreprocess_cat_cols(drivers)\nprint(drivers.head())\ndrivers.to_sql('drivers', con=engine, if_exists='replace')","57c1267d":"input_files.index('driver_standings.csv')","a63943f9":"drivers_std=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('driver_standings.csv')])\npreprocess_cat_cols(drivers_std)\nprint(drivers_std)\ndrivers_std.to_sql('drivers_std', con=engine, if_exists='replace')","961ec3d9":"input_files.index('lap_times.csv')","edfd1ce5":"lap_time=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('lap_times.csv')])\npreprocess_cat_cols(lap_time)\nprint(lap_time.head())\nlap_time.to_sql('lap_time', con=engine, if_exists='replace')","91303f9f":"input_files.index('pit_stops.csv')","680cb01c":"pit_stops=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('pit_stops.csv')])\npreprocess_cat_cols(pit_stops)\nprint(pit_stops.head())\npit_stops.to_sql('pit_stops', con=engine, if_exists='replace')","00db7ce4":"input_files.index('qualifying.csv')","895688a5":"quali=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('qualifying.csv')])\npreprocess_cat_cols(quali)\nprint(quali.head())\nquali.to_sql('quali', con=engine, if_exists='replace')","bb46704a":"input_files.index('races.csv')","a3edf05a":"races=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('races.csv')])\npreprocess_cat_cols(races)\nprint(races)\nraces.to_sql('races', con=engine, if_exists='replace')","af502917":"input_files.index('results.csv')","8721928d":"results=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('results.csv')])\nresults.position.replace({'\\\\N':1000},inplace=True)\nresults['position']=results.position.astype('int32').tolist()\ngrouped=results.groupby(by='raceId')['position']\nvalues=grouped.transform(lambda x: len(x))\nindices_to_replace=results[results.position==1000].index.tolist()\nvalues_to_replace=values[indices_to_replace]\nresults['position'].iloc[indices_to_replace]=values_to_replace\n\npreprocess_cat_cols(results)\nprint(results.head())\nresults.to_sql('results', con=engine, if_exists='replace')","7ddb70c5":"# import necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport sqlite3\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n#plt.style.use('dark_background')\nplt.style.use('ggplot')","6584b7ec":"query=\"\"\"\n        select name,r.constructorId,count(raceId) wins from constructors c\n        join results r on c.constructorId=r.constructorId\n        where r.position=1\n        group by r.constructorId\n        order by wins desc\n\"\"\"","44605445":"team_race_wins=pd.read_sql_query(query,conn).copy()\nfig,ax=plt.subplots(figsize=(15,7))\nax=team_race_wins.wins.plot.bar(x='name',y='wins', color='tab:red')\nax.set_xticks(range(team_race_wins.shape[0]))\nax.set_xticklabels(team_race_wins.name, fontsize=12)\nplt.xlabel('Constructors that have won atleast one race', fontsize=12)\nplt.ylabel('Number of race wins', fontsize=12);","2639cebf":"query=\"\"\"\n    select ssq.year, cs.name, max(ssq.total_pts) win_pts from\n    (select sq.constructorId, sq.year, sum(sq.pts) total_pts from\n    (select rs.constructorId,r.year,sum(rs.points) pts from results rs\n    join races r on rs.raceId=r.raceId\n    group by rs.raceId, rs.constructorId) sq\n    group by sq.constructorId,sq.year) ssq\n    join constructors cs\n    on ssq.constructorId=cs.constructorId\n    group by ssq.year\n\"\"\"","6f362a86":"q=pd.read_sql_query(query,conn)\nconstr_champs_by_year=q.copy()\n\nconstr_champs_by_team=constr_champs_by_year.name.value_counts()\n\nfig,ax=plt.subplots(figsize=(15,7))\nax=constr_champs_by_team.plot.bar(color='tab:red')\nax.set_xticks(range(team_race_wins.shape[0]))\nax.set_xticklabels(team_race_wins.name, fontsize=12)\nplt.ylabel('Number of constructors championships', fontsize=12)\nplt.xlabel('Constructors', fontsize=15);","5abfeb8b":"query=\"\"\"\n    select cs.name, driver_champs from\n    (select sqq.constructorId, count(sqq.constructorId) driver_champs from\n    (select sq.year, sq.driverId, sq.constructorId, max(pts) season_pts from\n    (select rs.driverId, rs.constructorId, r.year, sum(rs.points) pts from results rs\n    join races r on rs.raceId=r.raceId\n    group by rs.driverId, r.year) sq\n    group by sq.year) sqq\n    group by sqq.constructorId) sqqq join\n    constructors cs on sqqq.constructorId=cs.constructorId\n    order by driver_champs desc\n\"\"\"","73cb811e":"q=pd.read_sql_query(query,conn)\ndriver_champs_by_team=q.copy()\n\nfig,ax=plt.subplots(figsize=(13,8))\ndriver_champs_by_team.plot.bar(x='name',y='driver_champs',ax=ax, color='tab:red')\nax.set_xlabel('Constructors',fontsize=14)\nax.set_ylabel('Number of driver championships won by constructor',fontsize=14);","cc80494a":"query=\"\"\"\n    select sssq.name, sq2.num_seasons ,sssq.num_champ from\n    (select ssq.name, count(ssq.name) num_champ from\n    (select sq.year, sq.name, max(sq.season_points) win_points from\n    (select r.year, cs.name, sum(rs.points) season_points from results rs join\n    races r on rs.raceId=r.raceId join\n    constructors cs on rs.constructorId=cs.constructorId\n    group by cs.name, r.year) sq\n    group by sq.year) ssq\n    group by ssq.name) sssq join \n    \n    (select sq1.name, count(sq1.year) num_seasons from\n    (select r.year, cs.name from results rs join\n    races r on rs.raceId=r.raceId join\n    constructors cs on rs.constructorId=cs.constructorId\n    group by cs.name, r.year) sq1\n    group by sq1.name) sq2\n    \n    on\n    \n    sssq.name=sq2.name\n\"\"\"\n","6b2de765":"q=pd.read_sql_query(query,conn)\nconst_champs_seasons=q.copy()\nconst_champs_seasons['perc_season_champs']=round((const_champs_seasons['num_champ']\/const_champs_seasons['num_seasons'])*100,2)\nconst_champs_seasons.sort_values(by=['perc_season_champs'],ascending=False,inplace=True)\n\nfig=plt.figure(figsize=(17,17))\nfig.tight_layout()\n\nax1=fig.add_subplot(221)\nax2=fig.add_subplot(222)\nax3=fig.add_subplot(212)\n\nconst_champs_seasons.plot.barh(x='name',y='num_seasons',ax=ax1, color='darkorange' ,label='Number of seasons participated')\nconst_champs_seasons.plot.barh(x='name',y='num_champ',ax=ax2, sharey=ax1, color='tab:red' ,label='Number of championships won')\nconst_champs_seasons.plot.bar(x='name',y='perc_season_champs',ax=ax3, color='turquoise' ,label='Percentage of championship wins');","f1ab9ef0":"champ_teams=constr_champs_by_team.index\nohe_teams=pd.get_dummies(constr_champs_by_year.name)\nchamp_teams_by_year=dict()\nfor team in champ_teams:    \n    champ_teams_by_year[team]=np.cumsum(ohe_teams[team])\n\n# plot the chart\nfig,ax=plt.subplots(figsize=(15,9))\nfor team,performance in champ_teams_by_year.items():\n    ax.plot(performance)\n    ax.scatter(range(len(performance)),performance,label=team)\nax.set_ylabel('Number of championships', fontsize=14)\nax.set_xlabel('Season Year', fontsize=14)\nax.set_xticks(range(constr_champs_by_year.shape[0]))\nax.set_xticklabels(constr_champs_by_year.year.tolist(), rotation='vertical', fontsize=15)\nplt.legend();","e28e508f":"query=\"\"\"\n    select sqq.year, cs.name from\n    (select sq.year, sq.driverId, sq.constructorId, max(pts) season_pts from\n    (select rs.driverId, rs.constructorId, r.year, sum(rs.points) pts from results rs\n    join races r on rs.raceId=r.raceId\n    group by rs.driverId, r.year) sq\n    group by sq.year) sqq join\n    constructors cs on\n    cs.constructorId=sqq.constructorId\n    order by sqq.year\n\"\"\"","0d9a69d2":"q=pd.read_sql_query(query,conn)\ndrivers_champs_by_team_yearly=q.copy()\n\nchamp_teams_for_drivers=drivers_champs_by_team_yearly.name.tolist()\nohe_champ_teams_for_drivers=pd.get_dummies(drivers_champs_by_team_yearly)\nchamp_teams_for_drivers=dict()\nfor team in ohe_champ_teams_for_drivers.columns[1:]:\n    champ_teams_for_drivers[team.split('_')[1]]=np.cumsum(ohe_champ_teams_for_drivers[team])\n\n# plot the graph\nfig,ax=plt.subplots(figsize=(15,9))\nfor team,driver_champs in champ_teams_for_drivers.items():\n    ax.plot(driver_champs, label=team)\n    ax.scatter(range(drivers_champs_by_team_yearly.shape[0]),driver_champs)\nax.set_xticks(range(drivers_champs_by_team_yearly.shape[0]))\nax.set_xticklabels(drivers_champs_by_team_yearly.year.tolist(), rotation='vertical', fontsize=15)\nplt.legend();","29ce4618":"query=\"\"\"\n    select sssq.name, sq2.num_seasons ,sssq.num_champ from\n    (select ssq.name, count(ssq.name) num_champ from\n    (select sq.year, sq.name, max(sq.season_points) win_points from\n    (select r.year, dr.name, sum(rs.points) season_points from results rs join\n    races r on rs.raceId=r.raceId join\n    drivers dr on rs.driverId=dr.driverId\n    group by dr.name, r.year) sq\n    group by sq.year) ssq\n    group by ssq.name) sssq join \n    \n    (select sq1.name, count(sq1.year) num_seasons from\n    (select r.year, dr.name from results rs join\n    races r on rs.raceId=r.raceId join\n    drivers dr on rs.driverId=dr.driverId\n    group by dr.name, r.year) sq1\n    group by sq1.name) sq2\n    \n    on\n    \n    sssq.name=sq2.name\n\"\"\"","64c8c2fa":"q=pd.read_sql_query(query,conn)\ndr_champs_seasons=q.copy()\ndr_champs_seasons['perc_season_champs']=round((dr_champs_seasons['num_champ']\/dr_champs_seasons['num_seasons'])*100,2)\ndr_champs_seasons.sort_values(by=['perc_season_champs'],ascending=False,inplace=True)\n\nfig=plt.figure(figsize=(17,17))\nfig.tight_layout()\n\nax1=fig.add_subplot(221)\nax2=fig.add_subplot(222)\nax3=fig.add_subplot(212)\n\ndr_champs_seasons.plot.barh(x='name',y='num_seasons',ax=ax1)\nax1.set_xticks(range(1,max(dr_champs_seasons['num_seasons'])+1))\nax1.set_title('Number season participated')\n\ndr_champs_seasons.plot.barh(x='name',y='num_champ',ax=ax2)\nax2.set_title('Number of driver championships won')\n\ndr_champs_seasons.plot.bar(x='name',y='perc_season_champs',ax=ax3)\nax3.set_title('Percentage of championships won');","f9da8351":"query=\"\"\"\n    select sq.name, count(*) num_wins from\n    (select dr.name from results rs join\n    drivers dr on rs.driverId=dr.driverId\n    where rs.position==1) sq\n    group by sq.name\n    order by num_wins desc limit(25)\n\"\"\"","352b1752":"dr_race_wins=pd.read_sql_query(query,conn)\nfig,ax=plt.subplots(figsize=(14,6))\ndr_race_wins.plot.bar(x='name',y='num_wins',ax=ax)\nax.set_title('Drivers by number race wins')\nax.set_ylabel('Number of race wins');","068a062b":"query=\"\"\"\n    select dr.name, count(*) num_race_wins, sq.debut_season from results rs\n    \n    join\n    \n    races r on rs.raceId=r.raceId\n    \n    join\n    \n    drivers dr on rs.driverId=dr.driverId\n    \n    join\n    \n    (select rs.driverId, min(r.year) debut_season from results rs join\n    races r on rs.raceId=r.raceId\n    group by rs.driverId) sq\n    \n    on\n    \n    rs.driverId=sq.driverId and r.year=sq.debut_season\n    \n    where rs.position=1\n    \n    group by dr.name\n    \n    order by num_race_wins desc\n\"\"\"","99c53186":"dr_debut_wins=pd.read_sql_query(query,conn)\nfig,ax=plt.subplots(figsize=(13,6))\ndr_debut_wins.plot.bar(x='name',y='num_race_wins',ax=ax)\nax.set_title('Drivers that won races in their debut season')\n\nxlocs, xlabs = plt.xticks()\nfor i,v in enumerate(dr_debut_wins.debut_season):\n    plt.text(xlocs[i]-0.2,dr_debut_wins.num_race_wins[i]+0.05, str(v))","766efa50":"query=\"\"\"\n    select dr.name, count(*) num_podiums, sq.debut_season from results rs\n    \n    join\n    \n    races r on rs.raceId=r.raceId\n    \n    join\n    \n    drivers dr on rs.driverId=dr.driverId\n    \n    join\n    \n    (select rs.driverId, min(r.year) debut_season from results rs join\n    races r on rs.raceId=r.raceId\n    group by rs.driverId) sq\n    \n    on\n    \n    rs.driverId=sq.driverId and r.year=sq.debut_season\n    \n    where rs.position<4\n    \n    group by dr.name\n    \n    order by num_podiums desc\n\"\"\"","cac662a6":"dr_debut_podiums=pd.read_sql_query(query,conn)\nfig,ax=plt.subplots(figsize=(20,6))\ndr_debut_podiums.plot.bar(x='name',y='num_podiums',ax=ax)\nax.set_title('Drivers with number of podium finishes in a debut season');\n\nxlocs, xlabs = plt.xticks()\nfor i,v in enumerate(dr_debut_podiums.debut_season):\n    plt.text(xlocs[i]-0.2,dr_debut_podiums.num_podiums[i]+0.05, str(v), rotation=35)","1c8e4a85":"query=\"\"\"\n    select sq.name, count(*) num_pole_positions from\n    (select dr.name from results rs join\n    drivers dr on rs.driverId=dr.driverId\n    where rs.grid==1) sq\n    group by sq.name\n    order by num_pole_positions desc limit(25)\n\"\"\"","7c02f073":"q=pd.read_sql_query(query,conn)\nfig,ax=plt.subplots(figsize=(14,6))\nq.plot.bar(x='name',y='num_pole_positions',ax=ax)\nax.set_title('Drivers by number of pole positions')\nax.set_ylabel('Number of pole positions');","f8f9fbed":"query=\"\"\"\n    select dr.name, count(*) num_poles, sq.debut_season from results rs\n    \n    join\n    \n    races r on rs.raceId=r.raceId\n    \n    join\n    \n    drivers dr on rs.driverId=dr.driverId\n    \n    join\n    \n    (select rs.driverId, min(r.year) debut_season from results rs join\n    races r on rs.raceId=r.raceId\n    group by rs.driverId) sq\n    \n    on\n    \n    rs.driverId=sq.driverId and r.year=sq.debut_season\n    \n    where rs.grid=1\n    \n    group by dr.name\n    \n    order by num_poles desc\n\"\"\"","d875bd39":"dr_debut_poles=pd.read_sql_query(query,conn)\n\nfig,ax=plt.subplots(figsize=(13,6))\ndr_debut_poles.plot.bar(x='name',y='num_poles',ax=ax)\nax.set_title('Drivers number of pole positions debut season')\n\nxlocs, xlabs = plt.xticks()\nfor i,v in enumerate(dr_debut_poles.debut_season):\n    plt.text(xlocs[i]-0.2,dr_debut_poles.num_poles[i]+0.05, str(v))","a2d16b0d":"query=\"\"\"\n    select dr.name driver_name, ckt.location circuit_name, max(sq.ckt_wins) most_ckt_wins from\n    \n    (select rs.driverId, r.circuitId, count(*) ckt_wins from results rs join\n    races r on rs.raceId=r.raceId join\n    circuit ckt on r.circuitId=ckt.circuitId\n    where rs.position=1\n    group by rs.driverId, r.circuitId) sq\n    \n    join\n    \n    drivers dr on sq.driverId=dr.driverId\n    \n    join\n    \n    circuit ckt on sq.circuitId=ckt.circuitId\n    \n    group by sq.driverId\n    having most_ckt_wins>1\n    order by most_ckt_wins desc\n\"\"\"","57f0fea7":"dr_most_ckt_wins=pd.read_sql_query(query,conn)\n\nfig,ax=plt.subplots(figsize=(17,6))\n\ndr_most_ckt_wins.plot.bar(x='driver_name',y='most_ckt_wins',ax=ax)\n\nxlocs, xlabs = plt.xticks()\nfor i,v in enumerate(dr_most_ckt_wins.circuit_name):\n    plt.text(xlocs[i]-0.2,dr_most_ckt_wins.most_ckt_wins[i]+0.05, str(v), rotation=45);","c9305b9a":"query=\"\"\"\n    select dr.name driver_name, ckt.location circuit_name, max(sq.ckt_poles) most_ckt_poles from\n    \n    (select rs.driverId, r.circuitId, count(*) ckt_poles from results rs join\n    races r on rs.raceId=r.raceId join\n    circuit ckt on r.circuitId=ckt.circuitId\n    where rs.grid=1\n    group by rs.driverId, r.circuitId) sq\n    \n    join\n    \n    drivers dr on sq.driverId=dr.driverId\n    \n    join\n    \n    circuit ckt on sq.circuitId=ckt.circuitId\n    \n    group by sq.driverId\n    having most_ckt_poles>1\n    \n    order by most_ckt_poles desc\n\"\"\"","62cbdd4f":"dr_most_ckt_poles=pd.read_sql_query(query,conn)\n\nfig,ax=plt.subplots(figsize=(17,6))\n\ndr_most_ckt_poles.plot.bar(x='driver_name',y='most_ckt_poles',ax=ax)\n\nxlocs, xlabs = plt.xticks()\nfor i,v in enumerate(dr_most_ckt_poles.circuit_name):\n    plt.text(xlocs[i]-0.2,dr_most_ckt_poles.most_ckt_poles[i]+0.05, str(v), rotation=45);","78ff2c7a":"query=\"\"\"\n    select count(distinct(r.circuitId)) distinct_ckt_wins, dr.name from results rs join\n    races r on rs.raceId=r.raceId join\n    drivers dr on rs.driverId=dr.driverId\n    where rs.position=1\n    group by rs.driverId\n    order by distinct_ckt_wins desc\n\"\"\"","6c2fe310":"dr_ckt_wins=pd.read_sql_query(query,conn)\ndr_ckt_wins=dr_ckt_wins[dr_ckt_wins.distinct_ckt_wins>=10]\nfig,ax=plt.subplots(figsize=(15,6))\ndr_ckt_wins.plot.bar(x='name',y='distinct_ckt_wins',ax=ax)\nax.set_title('Drivers by number of distinct circuit wins');","8b0d7b89":"query=\"\"\"\n    select count(distinct(r.circuitId)) distinct_ckt_poles, dr.name from results rs join\n    races r on rs.raceId=r.raceId join\n    drivers dr on rs.driverId=dr.driverId\n    where rs.grid=1\n    group by rs.driverId\n    order by distinct_ckt_poles desc\n\"\"\"","9b9a4fb8":"dr_ckt_poles=pd.read_sql_query(query,conn)\ndr_ckt_poles=dr_ckt_poles[dr_ckt_poles.distinct_ckt_poles>=10]\nfig,ax=plt.subplots(figsize=(15,6))\ndr_ckt_poles.plot.bar(x='name',y='distinct_ckt_poles',ax=ax)\nax.set_title('Drivers by number of distinct circuit poles');","10f47083":"query=\"\"\"\n    select count(distinct(r.year)) seasons_with_win, dr.name from results rs join\n    races r on rs.raceId=r.raceId join\n    drivers dr on rs.driverId=dr.driverId\n    where rs.position=1\n    group by dr.name\n    having seasons_with_win>1\n    order by seasons_with_win desc\n\"\"\"","02d90aa6":"dr_season_with_wins=pd.read_sql_query(query,conn)\nfig,ax=plt.subplots(figsize=(15,6))\ndr_season_with_wins.plot.bar(x='name',y='seasons_with_win',ax=ax)\nax.set_title('Drivers by number of season with race wins');","7be329e1":"query=\"\"\"\n    select dr.name, rs.position from drivers dr join\n    results rs on dr.driverId=rs.driverId\n    where dr.name in\n    (select distinct(dr.name) from drivers dr join\n    results rs on dr.driverId=rs.driverId\n    where rs.position<4)\n\"\"\"","4a4a5a3d":"q=pd.read_sql_query(query,conn)\nq.rename(columns={'position':'points'}, inplace=True)\navg_pts_df=q.groupby('name').filter(lambda x: len(x)>6)\n\noop=avg_pts_df[avg_pts_df.points>10].index\navg_pts_df.points[oop]=0\navg_pts_df['points'].replace({1:25,2:18,3:15,4:12,5:10,6:8,7:6,8:4,9:2,10:1},inplace=True)\navg_pts_df=pd.DataFrame(avg_pts_df.groupby(by='name',as_index=False).mean())\navg_pts_df.sort_values(by='points',ascending=False, inplace=True)\n\nfig,ax=plt.subplots(figsize=(15,6))\navg_pts_df[:20].plot.bar(x='name',y='points',ax=ax)\nax.set_ylabel('Average points score')\nax.set_xlabel('Driver name')\nax.set_title('Top 20 drivers by average points scored according to 2019 points system');","00c6d313":"query=\"\"\"\n    select r.name track, count(*) races_held from races r\n    group by track\n    order by races_held desc\n\"\"\"","210f8d35":"q=pd.read_sql_query(query,conn)\nq.rename(columns={'races_held':'Number of races'},inplace=True)\n\nreace_tracks=q.copy()\n\nfig,ax=plt.subplots(figsize=(14,7))\nreace_tracks.plot.bar(x='track',y='Number of races',ax=ax);","802a4942":"query=\"\"\"\n    select r.circuitId, ssq.name, ssq.cnt, count(r.circuitId) race_count from races r join\n    (select ckt.circuitId, ckt.name, count(sq.circuitId) cnt from circuit ckt join\n    (select rs.raceId, r.circuitId from races r join\n    results rs on r.raceId=rs.raceId\n    where rs.grid=1 and rs.position=1) sq\n    on ckt.circuitId=sq.circuitId\n    group by sq.circuitId) ssq\n    on r.circuitId=ssq.circuitId\n    group by r.circuitId \n\"\"\"","3e3d1327":"q=pd.read_sql_query(query,conn)\n\nq['percentage_win']=round((q['cnt']\/q['race_count'])*100,2)\nq.drop(['circuitId','cnt'],axis=1,inplace=True)\nq=q.sort_values(by=['percentage_win'],ascending=False)\n\n\nfig,ax=plt.subplots(nrows=1,ncols=1,figsize=(13,6))\nfig.tight_layout()\nq.plot(x='name',y='race_count',ax=ax, rot=90, color='k',label='Total number of race events on')\nq.plot.bar(x='name',y='percentage_win',ax=ax, rot=90,label='Probability of winning from the pole position');","b265e083":"query=\"\"\"\n    select ssq.name, count(r.raceId) total_races, ssq.cnt from races r join\n    (select ckt.name, sq.circuitId, count(sq.raceId) cnt from circuit ckt join\n    (select rs.raceId, r.circuitId from races r join\n    results rs on r.raceId=rs.raceId\n    where rs.grid=1 and rs.position!=1) sq\n    on ckt.circuitId=sq.circuitId\n    group by ckt.name) ssq\n    on r.circuitId=ssq.circuitId\n    group by ssq.name\n\"\"\"","395507c1":"q=pd.read_sql_query(query,conn)\nq['percentage_lose']=q['cnt']\/q['total_races']\nq.drop(['cnt'],axis=1,inplace=True)\nq=q.sort_values(by=['percentage_lose'],ascending=False)\n\nq['scaled_total_races']=q['total_races']\/max(q['total_races'])\n\nfig,ax=plt.subplots(nrows=1,ncols=1,figsize=(13,6))\nfig.tight_layout()\nq.plot(x='name',y='scaled_total_races',ax=ax, rot=90, color='k', label='Relative total number of races on a track (scaled)')\nq.plot.bar(x='name',y='percentage_lose',ax=ax, rot=90, label='Probability of not winning from a pole position on a track');","650e17a6":"query=\"\"\"\n    select dr.name, sq.races from drivers dr\n    join\n    (select driverId, count(*) races from results rs join\n    races r on rs.raceId=r.raceId\n    where r.year>1999 and r.year<2010\n    group by driverId) sq\n    on dr.driverId=sq.driverId\n    order by sq.races desc\n\"\"\"","052b8347":"q=pd.read_sql_query(query,conn)\nq.rename(columns={'name':'driver'},inplace=True)\n\nv8_drivers_races=q.copy()\n\nfig,ax=plt.subplots(figsize=(15,5))\n\nv8_drivers_races.plot.bar(x='driver',y='races',ax=ax)\nax.set_title('Number of race appearnces by drivers in 2000-2009')\nax.set_xlabel('Drivers',fontsize=14)\nax.set_ylabel('Number of races',fontsize=14);","3063d2db":"query=\"\"\"\n    select dr.name, sq.races from drivers dr\n    join\n    (select driverId, count(*) races from results rs join\n    races r on rs.raceId=r.raceId\n    where r.year>2009 and r.year<2020\n    group by driverId) sq\n    on dr.driverId=sq.driverId\n    order by sq.races desc\n\"\"\"","3d51d3cb":"q=pd.read_sql_query(query,conn)\nq.rename(columns={'name':'driver'},inplace=True)\n\nv6_drivers_races=q.copy()\nfig,ax=plt.subplots(figsize=(15,5))\nv6_drivers_races.plot.bar(x='driver',y='races',ax=ax)\nax.set_title('Number of race appearnces by drivers in 2010-2019')\nax.set_xlabel('Drivers',fontsize=14)\nax.set_ylabel('Number of races',fontsize=14);","baf273cb":"fig,ax=plt.subplots(figsize=(10,5))\nax.bar(x=[1,2],height=[v8_drivers_races.shape[0],v6_drivers_races.shape[0]],width=0.5)\nax.set_xticks([1,2])\nax.set_xticklabels(['2000-2009','2010-2019'])\nax.set_ylabel('Number of unique drivers',fontsize=12);","b7dbe8a9":"query=\"\"\"\n    select dr.name, count(*) wins from results rs join\n    drivers dr on rs.driverId=dr.driverId\n    where rs.raceId in (select distinct(r.raceId) from races r\n    where r.year>1999 and r.year<2010) and rs.position=1\n    group by dr.name\n    order by wins desc\n\"\"\"","dafff524":"q=pd.read_sql_query(query,conn)\nq.rename(columns={'name':'driver'},inplace=True)\n\nwinners_v8=q.copy()\n\nfig,ax=plt.subplots(figsize=(14,5))\nwinners_v8.plot.bar(x='driver',y='wins',ax=ax)\nax.set_title('Number of race wins by drivers in 2000-2009',fontsize=14)\nax.set_xlabel('Drivers',fontsize=14)\nax.set_ylabel('Number of race wins',fontsize=14);","2bb6fa1b":"query=\"\"\"\n    select dr.name, count(*) wins from results rs join\n    drivers dr on rs.driverId=dr.driverId\n    where rs.raceId in (select distinct(r.raceId) from races r\n    where r.year>2009 and r.year<2020) and rs.position=1\n    group by dr.name\n    order by wins desc\n\"\"\"","47808dd9":"q=pd.read_sql_query(query,conn)\nq.rename(columns={'name':'driver'},inplace=True)\n\nwinners_v6=q.copy()\n\nfig,ax=plt.subplots(figsize=(14,5))\nwinners_v6.plot.bar(x='driver',y='wins',ax=ax)\nax.set_title('Number of race wins by drivers in 2010-2019',fontsize=14)\nax.set_xlabel('Drivers',fontsize=14)\nax.set_ylabel('Number of race wins',fontsize=14);","b04ea181":"fig,ax=plt.subplots(figsize=(10,5))\nax.bar(x=[1,2],height=[winners_v8.shape[0],winners_v6.shape[0]],width=0.5)\nax.set_xticks([1,2])\nax.set_xticklabels(['2000-2009','2010-2019'])\nax.set_ylabel('Number of drivers that one races',fontsize=12);","397ecce0":"v8_driver_perc_win=pd.merge(winners_v8,v8_drivers_races,how='inner',on='driver')\n\nv8_driver_perc_win['Percentage Win']=round((v8_driver_perc_win['wins']\/v8_driver_perc_win['races'])*100,2)\nv8_driver_perc_win.drop(['wins','races'],axis=1,inplace=True)\n\nv8_driver_perc_win=v8_driver_perc_win.sort_values(by='Percentage Win', ascending=False)\n\nfig,ax=plt.subplots(figsize=(14,5))\nv8_driver_perc_win.plot.bar(x='driver',y='Percentage Win',ax=ax)\nax.set_title(\"Drivers by percentages of race wins (2000-2009)\",fontsize=14)\nax.set_ylabel('Win percentage',fontsize=14)\nax.set_xlabel('Drivers',fontsize=14);","5450c91f":"v6_driver_perc_win=pd.merge(winners_v6,v6_drivers_races,how='inner',on='driver')\n\nv6_driver_perc_win['Percentage Win']=round((v6_driver_perc_win['wins']\/v6_driver_perc_win['races'])*100,2)\nv6_driver_perc_win.drop(['wins','races'],axis=1,inplace=True)\n\nv6_driver_perc_win=v6_driver_perc_win.sort_values(by='Percentage Win', ascending=False)\n\nfig,ax=plt.subplots(figsize=(14,5))\nv6_driver_perc_win.plot.bar(x='driver',y='Percentage Win',ax=ax)\nplt.title(\"Drivers by percentages of race wins (2010-2019)\",fontsize=14)\nax.set_ylabel('Win percentage',fontsize=14)\nax.set_xlabel('Drivers',fontsize=14);","03a9a6ab":"query=\"\"\"\n    select sq.year, sq.name, max(sq.season_score) winning_score from \n    (select r.year, dr.name, sum(rs.points) season_score from results rs join\n    races r on rs.raceId=r.raceId join\n    drivers dr on rs.driverId=dr.driverId\n    where r.year>1999 and r.year<2010\n    group by rs.driverId, r.year) sq\n    group by sq.year\n\"\"\"","76be3ada":"q=pd.read_sql_query(query,conn)\n\nv8_champions=q.copy()\n\nv8_champions.rename(columns={'year':'championship','name':'driver'},inplace=True)\n\nfig,ax=plt.subplots(figsize=(13,5))\nv8_champions[['driver','championship']].groupby(by='driver',as_index=False).count().plot.bar(x='driver',y='championship',ax=ax)\nax.set_title(\"Driver's championships in 2000-2009\",fontsize=14)\nax.set_xlabel('Drivers',fontsize=14)\nax.set_ylabel('Number of championships',fontsize=14);","1c289a50":"query=\"\"\"\n    select sq.year, sq.name, max(sq.season_score) winning_score from \n    (select r.year, dr.name, sum(rs.points) season_score from results rs join\n    races r on rs.raceId=r.raceId join\n    drivers dr on rs.driverId=dr.driverId\n    where r.year>2009 and r.year<2020\n    group by rs.driverId, r.year) sq\n    group by sq.year\n\"\"\"","978d9a0a":"q=pd.read_sql_query(query,conn)\n\nv6_champions=q.copy()\n\nv6_champions.rename(columns={'year':'championship','name':'driver'},inplace=True)\n\nfig,ax=plt.subplots(figsize=(13,5))\nv6_champions[['driver','championship']].groupby(by='driver',as_index=False).count().plot.bar(x='driver',y='championship',ax=ax)\nax.set_title(\"Driver's championships in (2010-2019)\",fontsize=14)\nax.set_xlabel('Drivers',fontsize=14)\nax.set_ylabel('Number of championships',fontsize=14);","5b2d1277":"query=\"\"\"\n    select dr.name, count(qu.position) pole_position from quali qu join\n    races r on qu.raceId=r.raceId join\n    drivers dr on qu.driverId=dr.driverId\n    where r.year>1999 and r.year<2010 and qu.position=1\n    group by dr.name\n    order by pole_position desc\n\"\"\"","ae8d4cf6":"q=pd.read_sql_query(query,conn)\nq.rename({'name':'driver'})\n\nfig,ax=plt.subplots(figsize=(14,5))\nq.plot.bar(x='name',y='pole_position',ax=ax)\nax.set_title('Number of pole positions by driver in 2000-2009',fontsize=14)\nax.set_xlabel('Drivers',fontsize=14)\nax.set_ylabel('Number of poles',fontsize=14);","7bdfed6a":"query=\"\"\"\n    select dr.name, count(qu.position) pole_position from quali qu join\n    races r on qu.raceId=r.raceId join\n    drivers dr on qu.driverId=dr.driverId\n    where r.year>2009 and r.year<2020 and qu.position=1\n    group by dr.name\n    order by pole_position desc\n\"\"\"","3e153fc9":"q=pd.read_sql_query(query,conn)\nq.rename({'name':'driver'})\n\nfig,ax=plt.subplots(figsize=(14,5))\nq.plot.bar(x='name',y='pole_position',ax=ax)\nax.set_title('Number of pole positions by driver in 2010-2019')\nax.set_xlabel('Drivers',fontsize=14)\nax.set_ylabel('Number of poles',fontsize=14);","b82a9cfd":"query=\"\"\"\n    select dr.name, min(r.year) debut_year, ckt.name from results rs join\n    drivers dr on rs.driverId=dr.driverId join\n    races r on r.raceId=rs.raceId join\n    circuit ckt on r.circuitId=ckt.circuitId\n    where dr.name='Lewis Hamilton' or dr.name='Sebastian Vettel'\n    group by dr.name\n\"\"\"\nq=pd.read_sql_query(query,conn)\nq","9b6bd5f4":"query=\"\"\"\n    select r.round, r.year, dr.name driver, \n    sum(rs.points) over (partition by r.year, dr.name order by r.round) as season_score\n    from results rs join\n    races r on rs.raceId=r.raceId join\n    drivers dr on rs.driverId=dr.driverId\n    where (dr.name='Lewis Hamilton' or dr.name='Sebastian Vettel') and r.year>=2007 and r.year<2020\n    order by r.year, r.round\n\"\"\"","f3a88dcb":"q=pd.read_sql_query(query,conn)\n\nlewise_seb=q.copy()\nyears_of_champs=lewise_seb.year.tolist()\nindex=[]\nyrs=sorted(list(set(years_of_champs)))\nfor ind in yrs:\n    index.append(years_of_champs.index(ind))\n    \nfig,ax=plt.subplots(figsize=(15,10))\nlewise_seb.groupby(by='driver')['season_score'].plot.line(ax=ax)\nfor ind in index:\n    ax.plot([ind]*2,[0,400], ls='--',label='Season:'+str(years_of_champs[ind]),c='black', alpha=0.7)\nax.set_xlabel('Races',fontsize=14)\nax.set_ylabel('Cummulative Score of the season',fontsize=14)\nax.set_title('Season performances of Lewis and Sebastian from 2007-2019',fontsize=14)\nplt.legend();","dcb17b74":"query=\"\"\"\n    select r.year, dr.name, round((sum(rs.points)\/sq.max_season_race_points_possible)*100,2) percentage_of_maximum_race_points_possible from results rs join\n    races r on rs.raceId=r.raceId join\n    drivers dr on rs.driverId=dr.driverId join\n    (select r.year, (round(max(rs.points)\/5)*5)*count(distinct(rs.raceId)) max_season_race_points_possible from results rs join\n    races r on rs.raceId=r.raceId join\n    drivers dr on rs.driverId=dr.driverId\n    where r.year>2006 and r.year<2020\n    group by r.year) sq on r.year=sq.year\n    where (r.year>2006 and r.year<2020) and (dr.name='Lewis Hamilton' or dr.name='Sebastian Vettel')\n    group by r.year, rs.driverId\n\"\"\"","a1434c90":"q=pd.read_sql_query(query,conn)\n\nseason_winning_score_precentage=q\n\nfig,ax=plt.subplots(figsize=(10,5))\n\nax.plot(range(2007,2020),list(season_winning_score_precentage.percentage_of_maximum_race_points_possible[season_winning_score_precentage.name=='Lewis Hamilton']), label='Lewis Hamilton')\nax.plot(range(2007,2020),list(season_winning_score_precentage.percentage_of_maximum_race_points_possible[season_winning_score_precentage.name=='Sebastian Vettel']), label='Sebastian Vettel')\nax.set_ylabel('Percentage of maximum possible points scored by a driver',fontsize=10)\nax.set_xlabel('Seasons 2007-2019',fontsize=14)\nplt.legend();","80b43188":"query=\"\"\"\n    select dr.name, rs.position from results rs join\n    drivers dr on rs.driverId=dr.driverId join\n    races r on rs.raceId=r.raceId\n    where dr.name in ('Sebastian Vettel','Lewis Hamilton')\n    group by r.year, r.round, dr.name\n\"\"\"","d3cea733":"q=pd.read_sql_query(query,conn)\n\nq.rename(columns={'position':'points'},inplace=True)\n\noop=q[q.points>10].index\nq.points.iloc[oop]=0\n\nq.points.replace({1:25,2:18,3:15,4:12,5:10,6:8,7:6,8:4,9:2,10:1},inplace=True)\n\nlew_pts=np.cumsum(q[q.name=='Lewis Hamilton'].points)\nseb_pts=np.cumsum(q[q.name=='Sebastian Vettel'].points)\n\nfig,ax=plt.subplots(figsize=(15,6))\nax.plot(lew_pts,label='Lewis Hamilton')\nax.plot(seb_pts,label='Sebastian Vettel')\nax.set_xlabel('Races in sequence from 2007',fontsize=14)\nax.set_ylabel('Cummulative points scored by driver ( as per 2019 pointing system)',fontsize=10)\nplt.legend();","4d278646":"### If you enjoyed the analysis and felt like you have experienced little bit of F1's history, please upvote this notebook. Thanks in advance!","4310a90e":"### 3 Constructor Results <br>\nEach constructor has two cars and so two drivers. Constructors fights for constructor's championship where two drivers help their constructors to win constructor's championship without compromising their own glories; Driver's championship! Hence, it is important to note constructors' results. Note that in this table constructors are encoded as constructorId.","496061fd":"## 12. Drivers by average points scored in a career (using 2019 pointing system)","b5b7a81c":"## 6. Driver's championships","d5f05d98":"\n### 2. Constructors <br>\nIn F1 the teams are called constructors as they are much more than just teams. They build cars of incredible specs from scratch!","68c3e9ba":"Let's define funtions; first to preprocess data and second to remove duplicate entries from the data.","e438c777":"Everybody on the every track wants to start from the pole position but for few tracks the pole position becomes even more improtant. By combining bar plot and line plot the Circuit de Barcelona-Catalunya is one of those circuits.","1f22e3e0":"1. Ferrari has participated many more times than any other team. In fact, it is the only team to participate in every 70 F1 seasons from 1950.\n2. Mercedes is the current team to beat as it has more than 50% chance of winning a season title.","08e014a5":"## 9. Drivers by number of race wins on the different circuits","9147ef13":"# E) Comparision of last two decades 2000-2009 and 2010-2019 <br>\n## 1. Drivers by number of race appearances","121699b5":"On two of the most oldest tracks, Monza and Silverstone, starting from the pole does not provide drivers huge advantage over the other derivers behind the grid.","63f9e2cd":"## 5. Constructors by constructors' championship wins over the period of years","b5c8f4fc":"## 3. Drivers by number of race wins in debut season","665193f9":"This plot shows how difficult it is for a driver to win driver's championship. There are many great names in the plot and some of the ones are just little over 5% of winning a title in their entire F1 career.","a9c195bd":"In the championship plot picture is even worst. So in 2010's decade only three drivers were able to win the title compared to five in 2000's decade.","7176844e":"## 4. Drivers by number of podium finishes in a debut season","7a1f3ce2":"# C) Analysis of Drivers\n## 1. Drivers by percentage championship won","b11b202e":"### 6. Drivers Standing <br>\nAs we saw in the constructor's standing table, this table shows the driver standing of each of the drivers after each of the races he participated in it. I know F1 has very high gender inequality which I hate, but it is what it is and we should work for change! But, unfortunately, all F1 drivers are happened to be males so far.","b0e7f51a":"## 5. Drivers by percentages of race wins","99ca3cc3":"## 11. Drivers by number of seasons with atleast one race win","1ba44cb5":"## 2. Season performance based on points scored in a season (2007-2019)","d3bad092":"### 10. Races <br>\nThis table connects many dots for retrieving information. It contains the year in which race was held, what was the sequence of the races in that year and at what circuit race event occured.","f0166160":"Lewis Hamilton is cosidered as one of the all time greatest of all drivers. No doubt as his average points are just above the great Juan Fangio. But Fangio had far more less races than Lewis which makes Lewis more special.","1b0c446e":"## 6. Drivers by a number of pole positions in a debut season","6506287e":"# F) Comparison of two contemporary multi title holders: Sebastian and Hamilton (Head-to-Head) <br>\n## 1. First season","c54c975e":"## 2. Constructors by number of constructors' championship wins <br>","0e470e8c":"## 5. Drivers by number of pole positions","05f32c7f":"## 3. Race winners (drivers) by number of wins","ba913519":"## 6. Constructors by number of driver championship wins over the period of years","b4fbff8b":"1. In the history of Ferrari there were momemnts when they had not been winning the constructor's title for a long time. Those periods are 1961-1969, 1982-1998, 2008-2019(present).\n2. During these periods other teams had find their glories. From 1982-1998 it was McLaren and Williams and 2008-2019 it was Red Bull and Mercedes.","5530c984":"1. Similar to the chart above, in the driver's championship too, Ferrari had major sequence of seasons when its drivers weren't winning the driver's title as well. These seasons are from 1961-1974, 1979-2000, 2007-2019 <br>\n2. During these periods drivers from other teams won the titles mainly McLaren and Williams in 1979-2000 and Red Bull and Mercedes in 2007-2019.","71e45bd4":"## 7. Driver's pole positions","06c6d423":"## 2. Drivers by number of race wins","20b97c57":"### 11. Results <br>\nThis table contains all of the information regarding race results.","ecb435e6":"So number of drivers that participated in the 2010-2019 decade fall short compare to the last one.","82d98450":"### 4. Constructor Standing <br>\nThis table shows what is the standing of each costructor after each race.","19a71b7e":"## 2. Number of drivers raced in a decade","a59c2a62":"### 1. Circuit <br>\nThis table contains the circuit information wherever F1 race was ever held.","f220e14b":"## 4. Points scored over the F1 career","8f9873e7":"## 3. Percent of maximum possible points scored <br>\nNow, in any season, maximum points available for a driver is (number of races in a season)x(points awarded to a race winner). Note that from 2019 season one extra point is given to a driver how claims fastest lap of the race. Here, we are not counting that one extra point.","ac20956d":"Italian grand prix and British grand prix are the only grand prix to be never missed F1 calender to this date. Monaco grand prix is the second most respected grand prix of the F1 calender.","590028f4":"# D) Analysis of Circuits <br>\n## 1. Circuits by number of races","167626c5":"This is F1 fan made notebook trying to look back into the history of it to find answers to some of the many questions. Approach here is to first create SQL data base (sqlite more specifically) using sqlalchemy and then use sql queries to pull required information for the analysis. So without wasting a time let's start creating a data base. <br>\n## A) Create Data Base","a04004d7":"## 3. Constructors by number of driver's championship wins","492247c2":"The data set has follwing tables of information and so we will create separate table for each of table in our sql data base.","c8fabeaa":"## 4. Number distinct race winners in a decade","aae4e9bc":"## 7. Drivers by number of wins at a same circuit","efd695fd":"## 4. Constructors by percentage of constructors' championship wins","93406c10":"# B) Analysis of the Constructors <br>\n## 1. Constructors by number of race wins","4d029984":"# History of F1 at a glance from 1950-2019","03f98619":"### 7. Lap Time <br>\nThis table provides lap times for all of the laps for all of the drivers for all of the races from 1950 to 2019. This is table is hugee!!!","a65ffeb6":"## 3. Circuits -where polesitters don't win","3d20eca7":"## 2. Circuits - where polesitters win","bb39580d":"The count of different drivers that won races also reduced in 2010 decade compare to 2000 decade","45079ce8":"### 9. Qualifying <br>\nQualifying is a mini-race that happens one day before the actually race event. This is pretty important as it defines from what positions each of the drivers will start the race. This table provides information regarding that.","61438d5b":"## 8. Drivers by number of poles on same circuit","06d63417":"### 8. Pit Stops <br>\nThis table provides the pit stop information (duration of the stop and lap when pit stop happened) for all the drivers for all of the races.","ee64d6f4":"### 5. Drivers <br>\nHere, comes the more fun part where our favorite drivers and heros shine. In this table each driver has driverId and little bit bio information.","a2dcd052":"In terms of points Lewis almost always has been on the top of Seb.","7f7b4297":"## 10. Drivers by pole positions at different grand prix","c860b954":"1. Note that McLaren has more driver's chamionships than the constructor's","87605e37":"1. Ferrari has dominated F1 in the race wins and championship wins but their dominance in the championship titles are far more prominant than the race wins. <br>\n2. Note, even though McLaren has almost 50 more race wins than Williams, they both have same number of championship titles."}}