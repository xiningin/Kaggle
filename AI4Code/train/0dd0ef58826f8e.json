{"cell_type":{"e4d03503":"code","272d7455":"code","e7fd5eaf":"code","ed1dbd7b":"code","102039cb":"code","d2fab58f":"code","3593c113":"code","fb9eb520":"code","7f1df35c":"code","c5db4c77":"markdown","f00e7363":"markdown","948e9639":"markdown","5a1cecc2":"markdown","f5323258":"markdown","bc2163e9":"markdown"},"source":{"e4d03503":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow.keras as keras\n\nimport plotnine\nfrom plotnine import ggplot, geom_point, aes, geom_line, facet_wrap, labs\nfrom plotnine.themes import theme_classic\n\n\nplotnine.options.figure_size = (8, 20)\n\ntrain_epochs = 250\nlr = 1e-1","272d7455":"x = np.array([[0, 0], [1, 0], [0, 1], [1, 1]])\ny = np.array([[0], [1], [1], [0]])","e7fd5eaf":"def build_sigmoid(i):\n    my_model = keras.Sequential([\n        keras.layers.Dense(2, activation = 'sigmoid'),\n        keras.layers.Dense(1, activation = 'sigmoid')\n    ])\n\n    my_model.compile(optimizer = keras.optimizers.Adam(lr = lr), loss = keras.losses.BinaryCrossentropy())\n    \n    history = my_model.fit(x = x, y = y, epochs = train_epochs, verbose = 0)\n    \n    df = pd.DataFrame(history.history)\n    df['run'] = i\n    df['type'] = '1) Sigmoid activation'\n    \n    return df","ed1dbd7b":"def build_relu(i):\n    my_model = keras.Sequential([\n        keras.layers.Dense(2, activation = 'relu'),\n        keras.layers.Dense(1, activation = 'sigmoid')\n    ])\n\n    my_model.compile(optimizer = keras.optimizers.Adam(lr = lr), loss = keras.losses.BinaryCrossentropy())\n    \n    history = my_model.fit(x = x, y = y, epochs = train_epochs, verbose = 0)\n    \n    df = pd.DataFrame(history.history)\n    df['run'] = i\n    df['type'] = '2) Relu activation'\n    \n    return df","102039cb":"def build_leaky_relu(i):\n    my_model = keras.Sequential([\n        keras.layers.Dense(2),\n        keras.layers.LeakyReLU(alpha=0.1),\n        keras.layers.Dense(1, activation = 'sigmoid')\n    ])\n\n    my_model.compile(optimizer = keras.optimizers.Adam(lr = lr), loss = keras.losses.BinaryCrossentropy())\n    \n    history = my_model.fit(x = x, y = y, epochs = train_epochs, verbose = 0)\n    \n    df = pd.DataFrame(history.history)\n    df['run'] = i\n    df['type'] = '3) Leaky ReLu activation'\n    \n    return df","d2fab58f":"def build_prelu(i):\n    my_model = keras.Sequential([\n        keras.layers.Dense(1),\n        keras.layers.PReLU(),\n        keras.layers.Dense(1, activation = 'sigmoid')\n    ])\n\n    my_model.compile(optimizer = keras.optimizers.Adam(lr = lr), loss = keras.losses.BinaryCrossentropy())\n    \n    history = my_model.fit(x = x, y = y, epochs = train_epochs, verbose = 0)\n    \n    df = pd.DataFrame(history.history)\n    df['run'] = i\n    df['type'] = '4) PReLu activation'\n    \n    return df","3593c113":"n = 100\nsigmoid = [build_sigmoid(i) for i in range(n)]\nrelu = [build_relu(i) for i in range(n)]\nleaky_relu = [build_leaky_relu(i) for i in range(n)]\nprelu = [build_prelu(i) for i in range(n)]\n\nresult_df = pd.concat([*sigmoid, *relu, *leaky_relu, *prelu]).reset_index()\nresult_df.head()","fb9eb520":"(ggplot(result_df, aes('index', 'loss', group = 'run'))\n + geom_line(alpha = 0.8, color = 'lightblue')\n + facet_wrap('~type', ncol = 1)\n + labs(x = 'Training Epochs', y = 'Binary Crossentropy', color = 'Model Type')\n + theme_classic()\n)","7f1df35c":"keep = (result_df['index'] == 249)\nfiltered_df = result_df[keep].copy()\nfiltered_df['solved'] = (filtered_df['loss'] <= 0.01)\nfiltered_df.groupby('type')[['solved']].sum()\/n","c5db4c77":"# Sigmoid","f00e7363":"# PreLu","948e9639":"# Leaky ReLu","5a1cecc2":"# Run All","f5323258":"# Raw Data\nThe X-Or problem: when exactly 1 input is true, return 1, otherwise return 0.","bc2163e9":"# ReLu"}}