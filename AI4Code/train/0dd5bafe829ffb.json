{"cell_type":{"25e8a639":"code","bdea0b21":"code","a282421c":"code","092e6426":"code","6a44ffd2":"code","c66e322b":"code","0be4928d":"code","3a490f6d":"code","1d4fccc4":"code","6ca42c89":"code","6d6abf3a":"code","c94b05e5":"code","156752b2":"code","30493cc4":"code","5ad27ed4":"code","df47bec5":"code","b6d7ba1c":"code","ef665ee1":"code","cfc5558a":"code","9d37488d":"code","7c567e49":"code","2faa331f":"code","23f21e11":"code","9c8b2738":"code","bf497748":"code","ac169b63":"code","d438259c":"code","06d9f98d":"code","837dfa03":"code","3ef5781c":"code","8ad510ec":"code","dd8e92ca":"code","b44a2f50":"code","05c5d9b9":"code","aae69067":"code","03943af1":"code","bcd5f23a":"code","2011a5bd":"code","8c12f653":"code","986de3c0":"code","596d9954":"code","1cb5ca5f":"code","eaa92efb":"code","190cb8ce":"code","a4696313":"code","c5edac26":"code","46b76e65":"code","980acbda":"markdown","e59e7863":"markdown","233b3512":"markdown","a2ace21d":"markdown","f2e4c260":"markdown","18d3b4c4":"markdown","dd706381":"markdown","495fd265":"markdown","a042fd25":"markdown","2c909793":"markdown","85799e42":"markdown"},"source":{"25e8a639":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nnp.set_printoptions(suppress=True)\nimport warnings\nwarnings.filterwarnings('ignore')","bdea0b21":"# Importing datasets\ntrain = pd.read_csv('..\/input\/healthcare-analytics\/train.csv')\ntest = pd.read_csv('..\/input\/healthcare-analytics\/test.csv')","a282421c":"train.head()","092e6426":"train.info()\ntrain.Stay.unique()","6a44ffd2":"# NA values in train dataset\ntrain.isnull().sum().sort_values(ascending = False)","c66e322b":"# NA values in test dataset\ntest.isnull().sum().sort_values(ascending = False)","0be4928d":"# Dimension of train dataset\ntrain.shape","3a490f6d":"# Dimension of test dataset\ntest.shape","1d4fccc4":"# Number of distinct observations in train dataset \nfor i in train.columns:\n    print(i, ':', train[i].nunique())","6ca42c89":"# Number of distinct observations in test dataset\nfor i in test.columns:\n    print(i, ':', test[i].nunique())","6d6abf3a":"#Replacing NA values in Bed Grade Column for both Train and Test datssets\ntrain['Bed Grade'].fillna(train['Bed Grade'].mode()[0], inplace = True)\ntest['Bed Grade'].fillna(test['Bed Grade'].mode()[0], inplace = True)","c94b05e5":"#Replacing NA values in  Column for both Train and Test datssets\ntrain['City_Code_Patient'].fillna(train['City_Code_Patient'].mode()[0], inplace = True)\ntest['City_Code_Patient'].fillna(test['City_Code_Patient'].mode()[0], inplace = True)","156752b2":"# Label Encoding Stay column in train dataset\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntrain['Stay'] = le.fit_transform(train['Stay'].astype('str'))","30493cc4":"train.head()","5ad27ed4":"#Imputing dummy Stay column in test datset to concatenate with train dataset\ntest['Stay'] = -1\ndf = pd.concat([train, test])\ndf.shape","df47bec5":"#Label Encoding all the columns in Train and test datasets\nfor i in ['Hospital_type_code', 'Hospital_region_code', 'Department',\n          'Ward_Type', 'Ward_Facility_Code', 'Type of Admission', 'Severity of Illness', 'Age']:\n    le = LabelEncoder()\n    df[i] = le.fit_transform(df[i].astype(str))","b6d7ba1c":"#Spearating Train and Test Datasets\ntrain = df[df['Stay']!=-1]\ntest = df[df['Stay']==-1]","ef665ee1":"def get_countid_enocde(train, test, cols, name):\n  temp = train.groupby(cols)['case_id'].count().reset_index().rename(columns = {'case_id': name})\n  temp2 = test.groupby(cols)['case_id'].count().reset_index().rename(columns = {'case_id': name})\n  train = pd.merge(train, temp, how='left', on= cols)\n  test = pd.merge(test,temp2, how='left', on= cols)\n  train[name] = train[name].astype('float')\n  test[name] = test[name].astype('float')\n  train[name].fillna(np.median(temp[name]), inplace = True)\n  test[name].fillna(np.median(temp2[name]), inplace = True)\n  return train, test","cfc5558a":"train, test = get_countid_enocde(train, test, ['patientid'], name = 'count_id_patient')\ntrain, test = get_countid_enocde(train, test, \n                                 ['patientid', 'Hospital_region_code'], name = 'count_id_patient_hospitalCode')\ntrain, test = get_countid_enocde(train, test, \n                                 ['patientid', 'Ward_Facility_Code'], name = 'count_id_patient_wardfacilityCode')","9d37488d":"# Droping duplicate columns\ntest1 = test.drop(['Stay', 'patientid', 'Hospital_region_code', 'Ward_Facility_Code'], axis =1)\ntrain1 = train.drop(['case_id', 'patientid', 'Hospital_region_code', 'Ward_Facility_Code'], axis =1)","7c567e49":"# Splitting train data for Naive Bayes and XGBoost\nX1 = train1.drop('Stay', axis =1)\ny1 = train1['Stay']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X1, y1, test_size =0.20, random_state =100)","2faa331f":"from sklearn.naive_bayes import GaussianNB\ntarget = y_train.values\nfeatures = X_train.values\nclassifier_nb = GaussianNB()\nmodel_nb = classifier_nb.fit(features, target)","23f21e11":"prediction_nb = model_nb.predict(X_test)\nfrom sklearn.metrics import accuracy_score\nacc_score_nb = accuracy_score(prediction_nb,y_test)\nprint(\"Acurracy:\", acc_score_nb*100)","9c8b2738":"import xgboost\nclassifier_xgb = xgboost.XGBClassifier(max_depth=4, learning_rate=0.1, n_estimators=800,\n                                  objective='multi:softmax', reg_alpha=0.5, reg_lambda=1.5,\n                                  booster='gbtree', n_jobs=4, min_child_weight=2, base_score= 0.75)","bf497748":"model_xgb = classifier_xgb.fit(X_train, y_train)","ac169b63":"prediction_xgb = model_xgb.predict(X_test)\nacc_score_xgb = accuracy_score(prediction_xgb,y_test)\nprint(\"Accuracy:\", acc_score_xgb*100)","d438259c":"# Segregation of features and target variable\nX = train.drop('Stay', axis =1)\ny = train['Stay']\nprint(X.columns)\nz = test.drop('Stay', axis = 1)\nprint(z.columns)\n\n# Data Scaling\nfrom sklearn import preprocessing\nX_scale = preprocessing.scale(X)\nX_scale.shape","06d9f98d":"X_train, X_test, y_train, y_test = train_test_split(X_scale, y, test_size =0.20, random_state =100)","837dfa03":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nimport tensorflow as tf","3ef5781c":"from keras.utils import to_categorical\n#Sparse Matrix\na = to_categorical(y_train)\nb = to_categorical(y_test)","8ad510ec":"model = Sequential()\nmodel.add(Dense(64, activation='relu', input_shape = (254750, 20))) \nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(11, activation='softmax'))","dd8e92ca":"model.summary()","b44a2f50":"model.compile(optimizer= 'SGD', \n              loss='categorical_crossentropy', \n              metrics=['accuracy'])","05c5d9b9":"callbacks = [tf.keras.callbacks.TensorBoard(\"logs_keras\")]\nmodel.fit(X_train, a, epochs=20, callbacks=callbacks, validation_split = 0.2)","aae69067":"# Genrating tensorboard\n!tensorboard --logdir logs_keras","03943af1":"# Retraining the model with 4 epochs\nmodel.fit(X_train, a, epochs=4, validation_split = 0.2)\nprint(\"\\n Model Evaluation\")\nmodel.evaluate(X_test,b)","bcd5f23a":"# Naive Bayes\npred_nb = classifier_nb.predict(test1.iloc[:,1:])\nresult_nb = pd.DataFrame(pred_nb, columns=['Stay'])\nresult_nb['case_id'] = test1['case_id']\nresult_nb = result_nb[['case_id', 'Stay']]","2011a5bd":"result_nb['Stay'] = result_nb['Stay'].replace({0:'0-10', 1: '11-20', 2: '21-30', 3:'31-40', 4: '41-50', 5: '51-60', 6: '61-70', 7: '71-80', 8: '81-90', 9: '91-100', 10: 'More than 100 Days'})\nresult_nb.head()","8c12f653":"# XGBoost\npred_xgb = classifier_xgb.predict(test1.iloc[:,1:])\nresult_xgb = pd.DataFrame(pred_xgb, columns=['Stay'])\nresult_xgb['case_id'] = test1['case_id']\nresult_xgb = result_xgb[['case_id', 'Stay']]","986de3c0":"result_xgb['Stay'] = result_xgb['Stay'].replace({0:'0-10', 1: '11-20', 2: '21-30', 3:'31-40', 4: '41-50', 5: '51-60', 6: '61-70', 7: '71-80', 8: '81-90', 9: '91-100', 10: 'More than 100 Days'})\nresult_xgb.head()","596d9954":"# Neural Network\ntest_scale = preprocessing.scale(z)\ntest_scale.shape","1cb5ca5f":"pred = model.predict_classes(test_scale)\npred","eaa92efb":"result_nn = pd.DataFrame(pred, columns=['Stay'])\nresult_nn['case_id'] = test['case_id']\nresult_nn = result_nn[['case_id', 'Stay']]","190cb8ce":"result_nn['Stay'] = result_nn['Stay'].replace({0:'0-10', 1: '11-20', 2: '21-30', 3:'31-40', 4: '41-50', 5: '51-60', 6: '61-70', 7: '71-80', 8: '81-90', 9: '91-100', 10: 'More than 100 Days'})\nresult_nn.head()","a4696313":"# Naive Bayes\nprint(result_nb.groupby('Stay')['case_id'].nunique())","c5edac26":"# XGBoost\nprint(result_xgb.groupby('Stay')['case_id'].nunique())","46b76e65":"# Neural Networks\nprint(result_nn.groupby('Stay')['case_id'].nunique())","980acbda":"## Results","e59e7863":"### Naive Bayes Model","233b3512":"# Predictions","a2ace21d":"### Feature Engineering","f2e4c260":"### Overview of Data","18d3b4c4":"### Data Preparation","dd706381":"### XGBoost Model","495fd265":"## Data Exploration","a042fd25":"### Neural Network","2c909793":"# Healthcare Analytics\n### The goal of this project is to accurately predict the Length of Stay for each patient so that the hospitals can optimize resources and function better.","85799e42":"## Models"}}