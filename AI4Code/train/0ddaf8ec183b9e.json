{"cell_type":{"d0b68739":"code","ec041fe0":"code","cfbaa2c4":"code","43bec096":"code","66384821":"code","375f5711":"code","b7867b01":"code","e5151606":"code","e2b7b0d5":"code","bcd5f771":"markdown"},"source":{"d0b68739":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport scipy\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n%matplotlib inline\nimport numpy as np\nfrom IPython.core.pylabtools import figsize\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport matplotlib\nimport matplotlib.animation as animation\nimport seaborn as sns\n\n# Any results you write to the current directory are saved as output.","ec041fe0":"real_probs_dict = {'R':0.8,'G':0.4,'B':0.3}\nassets = ['R','G','B']","cfbaa2c4":"'''\nThis function takes as input three tuples for alpha,beta that specify priorR,priorG,priorB \nAnd returns R,G,B along with the maximum value sampled from these three distributions.\nWe can sample from a beta distribution using \n'''\n\ndef find_asset(priorR,priorG,priorB):    \n    red_rv = scipy.stats.beta.rvs(priorR[0],priorR[1])\n    green_rv = scipy.stats.beta.rvs(priorG[0],priorG[1])\n    blue_rv = scipy.stats.beta.rvs(priorB[0],priorB[1])\n    return assets[np.argmax([red_rv,green_rv,blue_rv])]\n    \n'''\nThis is a helper function that simulates the real world using the actual probability value of the assets.\nIn real life we won't have this function and our user click input will be the proxy for this function.\n'''\ndef simulate_real_website(asset, real_probs_dict):\n    #simulate a coin toss with probability. Asset clicked or not.\n    if real_probs_dict[asset]> scipy.stats.uniform.rvs(0,1):\n        return 1\n    else:\n        return 0\n\n'''\nThis function takes as input the selected asset and returns the updated posteriors for the selected asset.\n'''\ndef update_posterior(asset,priorR,priorG,priorB,outcome):\n    if asset=='R':\n        priorR=(priorR[0]+outcome,priorR[1]+1-outcome)\n    elif asset=='G':\n        priorG=(priorG[0]+outcome,priorG[1]+1-outcome)\n    elif asset=='B':\n        priorB=(priorB[0]+outcome,priorB[1]+1-outcome)\n    return priorR,priorG,priorB\n\n'''\nThis function runs the strategy once.\n'''\ndef run_strategy_once(priorR,priorG,priorB):\n    # 1. get the asset\n    asset = find_asset(priorR,priorG,priorB)\n    # 2. get the outcome from the website\n    outcome = simulate_real_website(asset, real_probs_dict)\n    # 3. update posterior\n    priorR,priorG,priorB = update_posterior(asset,priorR,priorG,priorB,outcome)\n    return asset,priorR,priorG,priorB","43bec096":"priorR,priorG,priorB = (1,1),(1,1),(1,1)\ndata = [(\"_\",priorR,priorG,priorB)]\nfor i in range(50):\n    asset,priorR,priorG,priorB = run_strategy_once(priorR,priorG,priorB)\n    data.append((asset,priorR,priorG,priorB))","66384821":"def plot_posteriors(priorR,priorG,priorB,ax=None,title=None):\n    #fig = plt.figure(figsize=(12.5, 10))\n    parameters = [priorR,priorG,priorB]\n    x = np.linspace(0.001, 1, 150)\n    for i, (alpha, beta) in enumerate(parameters):\n        color = assets[i]\n        y = stats.beta.pdf(x, alpha, beta)\n        lines = sns.lineplot(x, y, label=\"%s (%.1f,%.1f)\" % (color, alpha, beta), color = color,ax=ax)\n        plt.fill_between(x, 0, y, alpha=0.2, color=color)\n        if title:\n            plt.title(title)\n        plt.autoscale(tight=True)\n    plt.legend(title=r\"$\\alpha, \\beta$ - parameters\")\n    return plt","375f5711":"fig = plt.figure(figsize=(40, 60))\nfig.subplots_adjust(hspace=0.4, wspace=0.4)\ncnt=1\nfor i in range(0,30,2):\n    ax = fig.add_subplot(8, 4, cnt)\n    g = plot_posteriors(*data[i][1:],ax,\"after \"+str(i)+\" runs\")\n    cnt+=1\nplt.show()","b7867b01":"for i,x in enumerate(data[1:]):\n    print(\"Pick\",i+1,\":\",x[0],end=\" ,\")","e5151606":"from collections import Counter\nCounter([x[0] for x in data[1:]])","e2b7b0d5":"fig = plt.figure(figsize=(12.5, 5))\nsns.set(style=\"ticks\")\nsns.barplot(x=['R','G','B'],y=[42,5,3],palette=['R','G','B'],alpha=0.3)\nsns.despine()","bcd5f771":"Strategy:\nWe will sample a random variable from each of the 3 distributions for assets.\n\nWe will find out which random variable is maximum and will show the one asset which gave the maximum random variable.\n\nWe will get to know if that asset is clicked or not\n\nWe will update the prior for the asset using the information in step 3.\n\nRepeat from Step 1"}}