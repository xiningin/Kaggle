{"cell_type":{"021b43fb":"code","fbceb37f":"code","db2df857":"code","51995377":"code","657a9032":"code","d4cf9f20":"code","de52889d":"code","ad510270":"code","13bca72a":"code","acac6e2a":"code","90642330":"code","69e17be6":"code","b014b4f8":"code","9b8b0a8f":"code","e4efc6c1":"code","8e7e6875":"code","8afcc91c":"code","2817e15a":"code","43067f56":"markdown"},"source":{"021b43fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fbceb37f":"import matplotlib.pyplot as plt\nimport cv2\nimg = cv2.imread('\/kaggle\/input\/face-mask-lite-dataset\/with_mask\/with-mask-default-mask-seed9854.png')\nplt.imshow(img)","db2df857":"without = '\/kaggle\/input\/face-mask-lite-dataset\/without_mask'\nwithmask = '\/kaggle\/input\/face-mask-lite-dataset\/with_mask'\ntrain = '\/kaggle\/input\/face-mask-lite-dataset'","51995377":"import os\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","657a9032":"classes = ['with_mask','without_mask']\ndata =[]\nfor i in enumerate(os.listdir(train)):\n    path = os.path.join(train,i[1])\n    for j in os.listdir(path):\n        img = cv2.imread(os.path.join(path,j),0)\n        img = cv2.resize(img,(100,100))\n        data.append([img,i[0]])","d4cf9f20":"img=[]\nlabel=[]\nfor x,y in data:\n    img.append(x)\n    label.append(y)\nimg = np.array(img).reshape(-1,100,100,1)\nlabel = np.array(label)","de52889d":"from sklearn.model_selection import train_test_split\n\ntrainF,testF,trainl,testl = train_test_split(img,label,random_state=42,test_size=.2)","ad510270":"import tensorflow as tf\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D,SeparableConv2D,Flatten,Dense,MaxPooling2D\n","13bca72a":"model = Sequential()\nmodel.add(SeparableConv2D(32,kernel_size=3,padding='same',kernel_initializer ='glorot_uniform',input_shape = (100,100,1),activation='LeakyReLU'))\nmodel.add(MaxPooling2D(strides=2))\nmodel.add(SeparableConv2D(64,kernel_size=3,padding='same',kernel_initializer='glorot_uniform',activation='LeakyReLU'))\nmodel.add(MaxPooling2D(strides=2))\nmodel.add(SeparableConv2D(128,kernel_size=3,padding='same',kernel_initializer='glorot_uniform',activation='LeakyReLU'))\nmodel.add(MaxPooling2D(strides=2))\nmodel.add(SeparableConv2D(256,kernel_size=3,padding='same',kernel_initializer='glorot_uniform',activation='LeakyReLU'))\nmodel.add(MaxPooling2D(strides=2))\n\nmodel.add(SeparableConv2D(512,kernel_size=3,padding='same',kernel_initializer='glorot_uniform',activation='LeakyReLU'))\nmodel.add(MaxPooling2D(strides=2))\n\nmodel.add(Flatten())\nmodel.add(Dense(4098,activation='relu'))\nmodel.add(Dense(1,activation='sigmoid'))","acac6e2a":"from tensorflow.keras.optimizers import Adam","90642330":"model.compile(loss = 'binary_crossentropy',optimizer = Adam(.001),metrics=['accuracy'])","69e17be6":"model.fit(trainF,trainl,validation_split=.2,epochs=5,batch_size=20)","b014b4f8":"pred = model.predict(testF)\n\nfor i in range(len(pred)):\n    pred[i] = np.argmax(pred[i])","9b8b0a8f":"val = model.evaluate(testF,testl,steps=200)\nprint(val[1])","e4efc6c1":"pred = np.array(model.predict(testF[:50]),dtype='int')","8e7e6875":"for i in range(len(pred)):\n    print(pred[i],testl[i])","8afcc91c":"len(testF)","2817e15a":"plt.figure(figsize=(15,15))\nfor i in enumerate(testF[:50]):\n    plt.subplot(5,10,i[0]+1)\n    plt.xlabel(str(pred[i[0]]))\n    plt.imshow(i[1])","43067f56":"# Model\n"}}