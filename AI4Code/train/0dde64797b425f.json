{"cell_type":{"1f9388d7":"code","e7ab984f":"code","b26dc5a3":"code","55a99abf":"code","03f14335":"code","78f646c1":"code","ff403914":"code","2947a88d":"code","4ba82c2f":"code","0abe58c5":"markdown","7d15b5cc":"markdown","efc0548c":"markdown","a915f7a0":"markdown","77037274":"markdown","55c56818":"markdown","e40b2685":"markdown","2ad11909":"markdown","cba04c83":"markdown","191a2d37":"markdown","cfce91e4":"markdown","fccaa32b":"markdown","c2a1432b":"markdown","02109e7c":"markdown"},"source":{"1f9388d7":"import os\nimport matplotlib.pyplot as plt","e7ab984f":"path = '\/kaggle\/input\/challenges-in-representation-learning-facial-expression-recognition-challenge\/'\nos.listdir(path)","b26dc5a3":"token = \"XXX\"","55a99abf":"import requests\n#from token_bot import token\n\nurl = \"https:\/\/api.telegram.org\/bot\/\".replace(\"bot\", \"bot\"+token)\n\nresp = requests.get(url+'getMe')\nprint(\"staus code:\", resp.status_code)","03f14335":"import cv2\nimport numpy as np\n\nimage_size = 48\n\ndef image_preprocessing(image, image_size):\n    \"\"\" Image Preprocessing \"\"\"\n\n    # Load Image\n    readFlag=cv2.COLOR_BGR2GRAY\n    #image = np.asarray(bytearray(resp.read()), dtype=\"uint8\")\n    #image = cv2.imdecode(image, readFlag)\n    image_gray = cv2.cvtColor(image, readFlag)\n    \n    # Crop Image\n    mid_row = int(image_gray.shape[0]\/2)\n    mid_col = int(image_gray.shape[1]\/2)\n    if image_gray.shape[0]>image_gray.shape[1]:\n        image_cropped = image_gray[mid_row-mid_col:mid_row+mid_col,\n                                   0:image_gray.shape[1]]\n    else:\n        image_cropped = image_gray[0:image_gray.shape[0],\n                                   mid_col-mid_row:mid_col+mid_row]\n    \n    # Rescale Image\n    image_rescale = cv2.resize(image_cropped,\n                               dsize=(image_size, image_size),\n                               interpolation=cv2.INTER_AREA)\n    return image_rescale ","78f646c1":"path_image = '\/kaggle\/input\/facialemotionbot-images\/'\nos.listdir(path_image)","ff403914":"def plot_befor_after(image):\n    \"\"\" Compare original and prepared image \"\"\"\n    \n    fig, axs = plt.subplots(1, 2, figsize=(15, 10))\n    fig.subplots_adjust(hspace = .1, wspace=.1)\n    axs = axs.ravel()\n    # Plot Original Image\n    axs[0].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    axs[0].set_title('original shape: '+str(image.shape))\n    # Image Preprocessing\n    image_rescale = image_preprocessing(image, image_size)\n    # Plot Prepared Image\n    axs[1].imshow(image_rescale, cmap='gray')\n    axs[1].set_title('rescaled shape: '+str(image_rescale.shape))\n    for i in range(2):\n        axs[i].set_xticklabels([])\n        axs[i].set_yticklabels([])\n    plt.show()","2947a88d":"file_path = path_image+'landscape.png'\nimage = cv2.imread(file_path)\nplot_befor_after(image)","4ba82c2f":"file_path = path_image+'portrait.png'\nimage = cv2.imread(file_path)\nplot_befor_after(image)","0abe58c5":"# Create Application <a name=\"Application\"><\/a>\nIn this section we describe the creation process of the application. We recommend this [notebook](https:\/\/www.kaggle.com\/drcapa\/facial-expression-eda-cnn) as a simple tutorial for defining a simple neural network.Further we presume to develop the app on a local machine.\nYou can download and use the code of my [github repository](https:\/\/github.com\/DrCapa\/FacialExpressionBot). Now we describe some import parts of the code.\n## URL\nFirst we define the URLs for the requests:\n```python\nfrom token_bot import token\n\n# URLs\nurl = \"https:\/\/api.telegram.org\/bot\/\".replace(\"bot\", \"bot\"+token)\nurl_file = \"https:\/\/api.telegram.org\/file\/bot\/\".replace(\"bot\", \"bot\"+token)\n```\nWe assume that the telegram token is stored in the file token_bot.py as described above. The first URL is used to get the message of a user. The second URL is used to get the files in the attachment of a message.\n## Load Model\nThe next step is to with loading the a pretrained model. With respect to the recommended notebook we saved the model in this way\n```python\nmodel_json = model.to_json()\nwith open(\"models\/model.json\", \"w\") as json_file:\n    json_file.write(model_json)\n\nmodel.save_weights(\"models\/model.h5\")\n```\nFor developing and using the CNN we use the keras library.\n\nSo you can load the model by\n```python\n# Path\npath_model = 'model\/'\n# Load Model\njson_file = open(path_model+'model.json', 'r')\nmodel_json = json_file.read()\njson_file.close()\nmodel = models.model_from_json(model_json)\nmodel.load_weights(path_model+'model.h5')\n```\n\nThe next step is to compile the model\n```python\n# Compile Model\nmodel.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n```\n## Functions\nWe define some functions. These funcions are so called handler. For further informations use [this documentation](https:\/\/python-telegram-bot.readthedocs.io\/en\/stable\/telegram.ext.html#handlers).\n\n## Load & Prepare Image\nWe focus now on the image preprocessing to guarantee the requirements:\n* image size: 48 x 48 pixel,\n* image chanel: 1.\n\nAdditionally there are two requirements with respect to the photo befor sending:\n1. Only one face per photo.\n2. The face must be in the center of the image.","7d15b5cc":"# Intro\n<font size=\"3\">Welcome to the facial expression bot tutorial.<\/font>\n\n<img style=\"float: left; padding:16px\" src=\"https:\/\/i.ibb.co\/yVFSqgk\/Example-Image-Bot.png\" alt=\"Example-Image-Bot\" border=\"0\">\n\nThis tutorial support you to run your data science project as a telegram bot. To demonstrate the process we use this [dataset](https:\/\/www.kaggle.com\/c\/challenges-in-representation-learning-facial-expression-recognition-challenge\/data). If somebody send an image to the bot, the bot will response with the predicted emotion. Therefore we use a simple CNN trained on this dataset.\n\nThe underlying data consists of 48x48 pixel grayscale images of faces. The faces have been automatically registered so that the face is more or less centered and occupies about the same amount of space in each image. So these are the requirements of the input image we have to guarantee. The task is to categorize each face based on the emotion shown in the facial expression in to one of seven categories:\n\n| categorie  | emotion  |\n|:---:|:---|\n| 0  | Angry  |\n| 1  |  Disgust |\n| 2  |  Fear |\n| 3  |  Happy |\n| 4  |  Sad |\n| 5  |  Surprise |\n| 6  | Neutral |\n\nIn this tutorial we focus on creating, deploying and using a classification of facial emotions together with a telegram bot. The underlying model based on the simple neural network of this [notebook](https:\/\/www.kaggle.com\/drcapa\/facial-expression-eda-cnn).\n\nPlease notice that the photos sent will not be saved or used for application out of the telegram bot. Of course the usage of the bot is free. \n\n\n<font size=\"3\"><span style=\"color: royalblue;\">Please vote the notebook up if it helps you. Feel free to leave a comment above the notebook. Thank you. <\/span><\/font>","efc0548c":"## Test The Bot\nTo test the connection to the bot we create two files:\n1. token_bot.py: includes the token **XXX** as a string.\n2. test_bot.py: send a simple request and get back the status code.\n\nWe use here **XXX** for the token because we don't want to share the true token. ","a915f7a0":"To test the image_preprocessing function we consider two test images. ","77037274":"# Deploy On Heroku <a name=\"Heroku\"><\/a>\nIn this section we describe the deployment process. To deploy and run the app we use [Heroku](http:\/\/). For simple tests Heroku is for free. If you also want to deploy your project on Heroku you can use following instructions.\n1. Create an account on Heroku.\n2. Create a git repository of your project.\nYou have to create a requirements.txt file like this\n```\nrequests\ntelegram\nnumpy\npython-telegram-bot\nopencv-contrib-python\ntensorflow-cpu\nkeras\nurllib3\n```\nRemark: We use tensorflow-cpu to reduce memory, compare [this article](https:\/\/stackoverflow.com\/questions\/61062303\/deploy-python-app-to-heroku-slug-size-too-large). \n3. Create a new app on Heroku. (There is a helpful documentation [here](https:\/\/devcenter.heroku.com\/categories\/python-support).)\n\nThe name of my new app on Heroku is **facial-expression-telegram-bot**. <br>\n\n4. ```$ heroku login ```\n5. ```$ heroku git:remote -a facial-expression-telegram-bot ```\n6. ```$ git push heroku master```\n\nIf the upload was successful you will get a message like this:\n\n<img src=\"https:\/\/i.ibb.co\/8XFpvsW\/deploy-heroku.png\" alt=\"deploy-heroku\" border=\"0\"><\/a><br \/>\n\n7. Test your app on the Heroku console\nClick on **More** on the upper right conor and select **Run Console**.\n\n<img src=\"https:\/\/i.ibb.co\/9ng0z9S\/run-console.png\" alt=\"run-console\" border=\"0\"><\/a>\n\nWrite **python app.py** in the console line. ","55c56818":"**token_bot.py**","e40b2685":"**test_bot.py**","2ad11909":"Portrait","cba04c83":"# Libraries","191a2d37":"# Create Telegram Bot <a name=\"Telegram\"><\/a>\n## In General\nIn this section we describe the creation process of a telegram bot.\n\n1. Open the telegram app and enter **@BotFather** in the search tab. Then select this bot.\n2. Click **START** below the chat window.\n3. To create a new bot click on **\/newbot** or write **\/newbot** into the message field.\n4. Follow the instructions.\n5. After choosing name for the bot and the **username** for the bot you will get your token to access the HTTP API.\n\nNow the bot is available. A user can call\/use them via **@username**.\n\nTo change the profile photo of the bot write **\/setuserpic** in the message field. You can also set a bot description by **\/setdescription**.\n\nRemark: Please take the follwoing advice of the BotFather seriously: \"Keep your token secure and store it safely, it can be used by anyone to control your bot.\" \n\n## In My Case\nThe name of my bot is **FacialExpressionBot**. The name of the bot and the username are equal.\n\n<img src=\"https:\/\/i.ibb.co\/VYgF96p\/Facial-Expression-Bot.png\" alt=\"Facial-Expression-Bot\" border=\"1\">\n","cfce91e4":"# Path","fccaa32b":"Landscape:","c2a1432b":"Here the code is 404 - not found. This is because of the wrong. If everything is fine you will get the status code 200. The error code are described [here](https:\/\/core.telegram.org\/api\/errors).","02109e7c":"# Table Of Content\nWe explain the project stepwise:\n1. [Create Telegram Bot](#Telegram)\n2. [Create Application](#Application)\n3. [Deploy App On Heroku](#Heroku)"}}