{"cell_type":{"0b932427":"code","02cc2b43":"code","1003ddce":"code","11c50322":"code","a2ed3818":"code","7d79deba":"code","fe9c4083":"code","28caeb3c":"code","16ea8547":"code","dab0d092":"code","224b488a":"code","ab915830":"code","2e0196cd":"code","6b0e7d96":"code","0e36cbb6":"code","e6bdaf93":"code","ac332447":"code","0243b0cc":"code","4c8a85b5":"code","55294b44":"code","0a1ea9f2":"markdown","0bed6b5f":"markdown","98672c9c":"markdown","b203bd89":"markdown","04e8b213":"markdown","4da53fcd":"markdown","4384f54f":"markdown","f5fd40d3":"markdown","14b33fec":"markdown","e9578578":"markdown","92fb8bff":"markdown","654a2091":"markdown"},"source":{"0b932427":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","02cc2b43":"train_df = pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/train_data.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/test_data.csv')\n\ntrain_df.head()","1003ddce":"train_df['grouped'] = train_df['Hospital_code'].astype(str) + train_df['Hospital_type_code'].astype(str) + train_df['City_Code_Hospital'].astype(str)+ train_df['Hospital_region_code'].astype(str) + train_df['Ward_Facility_Code'].astype(str)\n\ntest_df['grouped'] = test_df['Hospital_code'].astype(str) + test_df['Hospital_type_code'].astype(str) + test_df['City_Code_Hospital'].astype(str)+ test_df['Hospital_region_code'].astype(str) + test_df['Ward_Facility_Code'].astype(str)\ntest_df.head()","11c50322":"train_df.isnull().sum()","a2ed3818":"x1=train_df['Bed Grade'].fillna(train_df['Bed Grade'].mode()[0])\nx2=train_df['City_Code_Patient'].fillna(train_df['City_Code_Patient'].mode()[0])\ntrain_df['Bed Grade'] = x1\ntrain_df['City_Code_Patient'] =x2\ntrain_df.isnull().sum()\n\nx1=test_df['Bed Grade'].fillna(test_df['Bed Grade'].mode()[0])\nx2=test_df['City_Code_Patient'].fillna(test_df['City_Code_Patient'].mode()[0])\ntest_df['Bed Grade'] = x1\ntest_df['City_Code_Patient'] =x2\ntest_df.isnull().sum()","7d79deba":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle1 = LabelEncoder()\ntrain_df['Hospital_type_code'] = le.fit_transform(train_df['Hospital_type_code'])\ntrain_df['City_Code_Hospital'] = le.fit_transform(train_df['City_Code_Hospital'])\ntrain_df['Hospital_region_code'] = le.fit_transform(train_df['Hospital_region_code'])\ntrain_df['Department'] = le.fit_transform(train_df['Department'])\ntrain_df['Ward_Type'] = le.fit_transform(train_df['Ward_Type'])\ntrain_df['Ward_Facility_Code'] = le.fit_transform(train_df['Ward_Facility_Code'])\ntrain_df['Type of Admission'] = le.fit_transform(train_df['Type of Admission'])\ntrain_df['Severity of Illness'] = le.fit_transform(train_df['Severity of Illness'])\ntrain_df['Age'] = le.fit_transform(train_df['Age'])\n# train_df['grouped'] = le.fit_transform(train_df['grouped'])\ntrain_df['Stay'] = le1.fit_transform(train_df['Stay'])\ntrain_df=train_df.drop('case_id',axis=1)\n# train_df=train_df.drop('Admission_Deposit',axis=1)\n# train_df=train_df.drop('Hospital_code',axis=1)\ntrain_df=train_df.drop('patientid',axis=1)\n# train_df=train_df.drop('Visitors with Patient',axis=1)\n# train_df=train_df.drop('Hospital_code',axis=1)\n# train_df=train_df.drop('Hospital_type_code',axis=1)\n# train_df=train_df.drop('City_Code_Hospital',axis=1)\n# train_df=train_df.drop('Hospital_region_code',axis=1)\n# train_df=train_df.drop('Ward_Facility_Code',axis=1)\n\ntest_df['Hospital_type_code'] = le.fit_transform(test_df['Hospital_type_code'])\ntest_df['City_Code_Hospital'] = le.fit_transform(test_df['City_Code_Hospital'])\ntest_df['Hospital_region_code'] = le.fit_transform(test_df['Hospital_region_code'])\ntest_df['Department'] = le.fit_transform(test_df['Department'])\ntest_df['Ward_Type'] = le.fit_transform(test_df['Ward_Type'])\ntest_df['Ward_Facility_Code'] = le.fit_transform(test_df['Ward_Facility_Code'])\ntest_df['Type of Admission'] = le.fit_transform(test_df['Type of Admission'])\ntest_df['Severity of Illness'] = le.fit_transform(test_df['Severity of Illness'])\ntest_df['Age'] = le.fit_transform(test_df['Age'])\n# test_df['grouped'] = le.fit_transform(test_df['grouped'])\ntest_ids=test_df['case_id']\ntest_df=test_df.drop('case_id',axis=1)\n# test_df=test_df.drop('Admission_Deposit',axis=1)\n# test_df=test_df.drop('Hospital_code',axis=1)\ntest_df=test_df.drop('patientid',axis=1)\n# test_df=test_df.drop('City_Code_Patient',axis=1)\n# test_df=test_df.drop('Visitors with Patient',axis=1)\n# test_df=test_df.drop('Hospital_code',axis=1)\n# test_df=test_df.drop('Hospital_type_code',axis=1)\n# test_df=test_df.drop('City_Code_Hospital',axis=1)\n# test_df=test_df.drop('Hospital_region_code',axis=1)\n# test_df=test_df.drop('Ward_Facility_Code',axis=1)\n\n\ntrain_df.head()","fe9c4083":"test_df.head()","28caeb3c":"sns.countplot('Department',data=train_df)","16ea8547":"sns.countplot('Ward_Type',data=train_df)","dab0d092":"sns.countplot('Type of Admission',data=train_df)","224b488a":"sns.countplot('Severity of Illness',data=train_df)","ab915830":"sns.countplot('Age',data=train_df)","2e0196cd":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nX_train, X_val, y_train, y_val = train_test_split(train_df.drop('Stay',axis=1),train_df['Stay'] , test_size=0.2, random_state=0,shuffle=True)","6b0e7d96":"from sklearn.ensemble import RandomForestClassifier\n\nclf_rf = RandomForestClassifier(max_depth=10, random_state=6)\nclf_rf.fit(X_train,y_train)\npreds=clf_rf.predict(X_val)\n\nprint('Accuracy: ', accuracy_score(y_val, preds)*100, '%')","0e36cbb6":"from sklearn.naive_bayes import GaussianNB\n\nclf_gnb = GaussianNB()\nclf_gnb.fit(X_train,y_train)\npreds=clf_gnb.predict(X_val)\n\nprint('Accuracy: ', accuracy_score(y_val, preds)*100, '%')","e6bdaf93":"from xgboost import XGBClassifier\nclf_xgb = XGBClassifier()\nclf_xgb.fit(X_train,y_train)\npreds=clf_xgb.predict(X_val)\n\nprint('Accuracy: ', accuracy_score(y_val, preds)*100, '%')","ac332447":"from lightgbm import LGBMClassifier\n\nclf_lgb = make_pipeline(StandardScaler(), LGBMClassifier(random_state=444,n_estimators=825,learning_rate=0.07,colsample_bytree=0.7,\n                        min_data_in_leaf=65,reg_alpha=1.6,reg_lambda=1.1))\nclf_lgb.fit(X_train,y_train)\npreds=clf_lgb.predict(X_val)\n\nprint('Accuracy: ', accuracy_score(y_val, preds)*100, '%')","0243b0cc":"from catboost import Pool, CatBoostClassifier\n\nclf_ctb = CatBoostClassifier(iterations=100,\n                           learning_rate=0.08,\n                           depth=7,\n                           loss_function='MultiClass',\n                           eval_metric='Accuracy')\nclf_ctb.fit(X_train,y_train)\npreds=clf_ctb.predict(X_val)\n\nprint('Accuracy: ', accuracy_score(y_val, preds)*100, '%')","4c8a85b5":"df_sub = pd.DataFrame()\ndf_sub[\"case_id\"] = test_ids\ndf_sub[\"Stay\"] = le1.inverse_transform(clf_lgb.predict(test_df))\ndf_sub.head()\n\ndf_sub.to_csv(\"Submission.csv\",index=False)","55294b44":"df_sub.head()","0a1ea9f2":"## Convert to Submission Data","0bed6b5f":"## 1. Tuned Random Forest Classifier","98672c9c":"## Fitting the ML Models","b203bd89":"## Visualization","04e8b213":"# Hospital Time of Stay Prediction\nIt is a classification Problem. As the dataset is very large, we need to use some ensembing models to get better and better predictions\n\n1. RandomForest\n2. Naive Bayes(Not Ensemble)\n3. XGBoost (42.0)\n4. LightGBM (42.74)\n5. Catboost (42.23) Overfits the training dataset","4da53fcd":"## 2. Naive Bayes","4384f54f":"## 5. Tuned CAT Classifier","f5fd40d3":"## Label Encoding\nConverting Categorical data to numerical values. I used a separate labelencoder for Stay to easily use inverse_transform without any difficuly(Helped me reduce some code)","14b33fec":"## 4. Tuned LightGBM Classifier - The best approach","e9578578":"## 3. XGBClassifier","92fb8bff":"## Handling Missing Data","654a2091":"## Categorical Variables\n1. Hospital_type_code\n2. City_Code_Hospital\n3. Hospital_region_code\n4. Department\n5. Ward_Type\n6. Ward_Facility_Code\n7. Type of Admission\n8. Severity of Illness\n9. Age\n\n## Continuous Variables\n1. Available Extra Rooms in Hospital\n2. Bed Grade\n3. City_Code_Patient\n4. Admission_Deposit\n5. Visitors with Patient"}}