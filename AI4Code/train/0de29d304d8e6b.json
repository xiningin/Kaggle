{"cell_type":{"b389cba4":"code","1cd6fb5d":"code","c7321873":"code","872bfd6e":"code","436d8002":"code","4741fb89":"markdown","343595ee":"markdown","6d5fec45":"markdown","81d2a1b5":"markdown","906aef80":"markdown","06932e2c":"markdown"},"source":{"b389cba4":"from IPython.core.display import display, HTML, Javascript\nhtml_contents =\"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <link rel=\"stylesheet\" href=\"https:\/\/www.w3schools.com\/w3css\/4\/w3.css\">\n        <link rel=\"stylesheet\" href=\"https:\/\/fonts.googleapis.com\/css?family=Benne\">\n        <link rel=\"stylesheet\" href=\"https:\/\/fonts.googleapis.com\/css?family=Open Sans\">\n        <style>\n        .title-section {\n            font-family: \"Benne\", Arial, sans-serif;\n            color: \"#6A8CAF\";\n            }\n        body {\n            font-family: \"Open Sans\", Arial, sans-serif;\n            }\n        <\/style>\n    <\/head>\n<\/html>\n\"\"\"\nHTML(html_contents)","1cd6fb5d":"# import libraries\nimport pandas as pd\nimport numpy as np\nimport datetime as dt\nimport pandas_datareader as pdr\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker\nplt.rcParams['font.sans-serif'] = ['Verdana']","c7321873":"# load dataset\nstore = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/stores.csv\")\ntrain = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/train.csv\")\ntest = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/test.csv\")\ntransactions = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/transactions.csv\")\noil = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/oil.csv\")\nholidays_events = pd.read_csv(\"..\/input\/store-sales-time-series-forecasting\/holidays_events.csv\")","872bfd6e":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(3, 9), facecolor='#F7F7F7')\ngs = fig.add_gridspec(2, 1)\ngs.update(wspace=1.5, hspace=1.1)\n\n##########STORE-BY-STATE##########\nstore_by_state = store.groupby('state')\nstore_by_state.first().reset_index()\ntemp = store_by_state.first().reset_index()\ntemp = temp.sort_values('store_nbr', ascending=False)\nbackground_color = \"#F7F7F7\"\ncolor_map = [\"#E8F0F2\" for _ in range(20)]\ncolor_map[0] = \"#A2DBFA\" #F2A154 79B4B7\nsns.set_palette(sns.color_palette(color_map))\n\nax0 = fig.add_subplot(gs[0, 0])\nax0.set_facecolor(background_color)\nax0.set(xlim=(0, 60))\nax0.set(ylim=(0, 20))\nfor s in [\"left\", \"right\", \"top\", \"bottom\"]:\n    ax0.spines[s].set_visible(False)\n\n#graph\nax0 = sns.barplot(ax=ax0, y=temp['state'], x=temp['store_nbr'], \n                      zorder=2, linewidth=0.3, edgecolor=\"#7F7C82\", \n                      orient='h', saturation=0.9, alpha=0.7)\n\n#format axis\nax0.axes.get_xaxis().set_visible(False)\nax0.set_ylabel(\"State\",fontsize=3, weight='semibold')\nax0.tick_params(labelsize=3, width=0.2, length=1)\nax0.axvline(linewidth=1, color=\"#7F7C82\")\n\n#title\nx0, x1 = ax0.get_xlim()\ny0, y1 = ax0.get_ylim()\nax0.text(x0, y1-1, 'Store by State', fontsize=4, ha='left', va='top', weight='semibold')\n\n#data label\ni=0\nfor p in ax0.patches:\n    value = f'{p.get_width():4,.0f}'\n    x = p.get_x() + 1\n    i+=1\n    y = p.get_y() + p.get_height() \/ 2 \n    ax0.text(x, y, value, ha='center', va='center', fontsize=2, weight='semibold') \n\nx_format = ticker.FuncFormatter(lambda x, p: format(int(x), ','))\nax0.xaxis.set_major_formatter(x_format)\n\nplt.show()","436d8002":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(3, 5), facecolor='#F7F7F7')\ngs = fig.add_gridspec(2, 1)\ngs.update(wspace=1.5, hspace=1.1)\n\n##########TRANSACTIONS##########\ntransactions['year'] = pd.DatetimeIndex(transactions['date']).year\ntemp = transactions.groupby('year', as_index=False).sum()\ntemp = temp.drop(4)\ntemp = temp.sort_values('year', ascending=False)\n\nbackground_color = \"#F7F7F7\"\ncolor_map = [\"#E8F0F2\" for _ in range(20)]\ncolor_map[2] = \"#A2DBFA\" #F2A154 79B4B7\nsns.set_palette(sns.color_palette(color_map))\n\nax0 = fig.add_subplot(gs[0, 0])\nax0.set_facecolor(background_color)\nax0.set(xlim=(0, 6))\nax0.set(ylim=(0, 35000))\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n\n#graph\nax0 = sns.barplot(ax=ax0, y=temp['transactions']\/1000, x=temp['year'], \n                      zorder=2, linewidth=0.3, edgecolor=\"#7F7C82\", \n                      orient='v', saturation=0.9, alpha=0.7)\n\n#format axis\n# ax0.axes.get_xaxis().set_visible(False)\nax0.set_ylabel(\"Transactions\",fontsize=3, weight='semibold')\nax0.set_xlabel(\"Year\",fontsize=3, weight='semibold')\nax0.tick_params(labelsize=3, width=0.2, length=1)\n# ax0.axhline(linewidth=1, color=\"#7F7C82\")\n\n#title\nx0, x1 = ax0.get_xlim()\ny0, y1 = ax0.get_ylim()\nax0.text(x0, y1+5000, 'Transactions by Year', fontsize=4, ha='left', va='top', weight='semibold')\n\ni=0\nfor p in ax0.patches:\n    value = f'{p.get_height():,.0f} K'\n    x = p.get_x() + p.get_width() \/ 2 \n    y = p.get_y() + p.get_height() + 1000\n    ax0.text(x, y, value, ha='center', va='center', fontsize=2.5, weight='semibold') \n\ny_format = ticker.FuncFormatter(lambda x, p: format(int(x), ','))\nax0.yaxis.set_major_formatter(y_format)\n\nplt.show()","4741fb89":"The chart above shows number of transactions yearly. The highest is in 2015 then slightly down in 2016. The data in 2017 only until August, it is taken out of the chart.","343595ee":"## <span class=\"title-section w3-xxlarge\">Yearly Transactions<\/span>","6d5fec45":"## <span class=\"title-section w3-xxlarge\">Store by State<\/span>","81d2a1b5":"[Corporaci\u00f3n Favorita](https:\/\/www.corporacionfavorita.com\/) is a large Ecuadorian-based grocery retailer. Born in 1952 as La Favorita, in center of Quito. In 1957 open its first supermarket, the first self-service store in the country.\n\n**Context**\n\nForecasts aren\u2019t just for meteorologists. Governments forecast economic growth. Scientists attempt to predict the future population. And businesses forecast product demand\u2014a common task of professional data scientists. Forecasts are especially relevant to brick-and-mortar grocery stores, which must dance delicately with how much inventory to buy. Predict a little over, and grocers are stuck with overstocked, perishable goods. Guess a little under, and popular items quickly sell out, leading to lost revenue and upset customers. More accurate forecasting, thanks to machine learning, could help ensure retailers please customers by having just enough of the right products at the right time.\n\nCurrent subjective forecasting methods for retail have little data to back them up and are unlikely to be automated. The problem becomes even more complex as retailers add new locations with unique needs, new products, ever-transitioning seasonal tastes, and unpredictable product marketing.\n\n**Potential Impact**\n\nIf successful, you'll have flexed some new skills in a real world example. For grocery stores, more accurate forecasting can decrease food waste related to overstocking and improve customer satisfaction. The results of this ongoing competition, over time, might even ensure your local store has exactly what you need the next time you shop.","906aef80":"# <span class=\"title-section w3-xxxlarge\">Store Sales Forecasting<\/span>","06932e2c":"<span class=\"title-section w3-xlarge\">It is not finished yet!<\/span>\n\nThis is just a beginning. The work has just started, if you like this notebook, you know it is <span class=\"w3-tag w3-large\"><b>FREE<\/b><\/span> to click the upvote button.\n\nThanks for reading this notebook. If you have any feedback or comments please write it down the comment section below."}}