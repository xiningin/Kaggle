{"cell_type":{"9adbb781":"code","d4132a2b":"code","0ab688b6":"code","9691b5c5":"code","7d397ac5":"code","58e0570e":"code","f126b6e1":"code","e1ca8f9a":"code","cae22345":"code","53f883b6":"code","91fc4054":"code","d9cc50da":"code","39848dfb":"code","083757b1":"code","0f3f3013":"code","96f96f3a":"code","b9550513":"markdown","08aca41b":"markdown","e1b600c8":"markdown","3736e2d0":"markdown","321dbeb6":"markdown","72d64d87":"markdown","58747ad6":"markdown","79df936d":"markdown"},"source":{"9adbb781":"#import libraries\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d4132a2b":"#Operations\ndef Avgperday(data):\n  avgperday = data.groupby('Day')['AvgTemperature'].mean()\n  return avgpermonth\ndef Avgpermonth(data):\n  avgpermonth = data.groupby('Month')['AvgTemperature'].mean()\n  return avgpermonth\ndef Avgperyear(data):  \n  avgperyear = data.groupby('Year')['AvgTemperature'].mean()\n  return avgperyear\n\n# chart function\ndef plot_chart(data,info): \n  plt.figure(figsize=(15,5))\n  plt.plot(data.reset_index()[info],data.values,\"o-\",linestyle='solid',label=\"Temperature\")\n  plt.xlabel('{}'.format(info),fontsize=16)\n  plt.ylabel('Average Temperature [\u00b0C]',fontsize=16)\n  plt.title('Temperature per {}'.format(info),fontsize=16)\n  plt.grid(color='r', linestyle='dotted', linewidth=0.5)\n  plt.legend()\n  plt.show()","0ab688b6":"def GlobalTemperature_visual(chart_time,inicial_date = '1995-01-01',final_date = '2019-12-31',Region=None,Country=None,City=None):  \n  \"\"\"\n   Funtion which returns a chart of the Average Temperature from a given location and time.\n\n  If any location is specified the function returns a chart related with the data from the whole world.\n  To know what is the exactly list of Regions\/Country\/City for the parameters, involke the GlobalTemperature_dataInfo.\n  The Parameter chart_time only accepts the following string names: [Day, Month, Year].\n  The correct format for the inicial_date and final_date is: Year-Month-Day.\n  If not specified, the inicial_date and final_date are: '1995-01-01', '2019-12-31'.\n  The Parameters inicial_date and final_date only accepts values in the interval of: 1995-01-01 ------ 2019-12-31.\n  \"\"\"\n  data = pd.read_csv('\/kaggle\/input\/daily-temperature-of-major-cities\/city_temperature.csv',low_memory=False) #import data\n  data.drop(columns = 'State',inplace=True) #drop column state\n  data['AvgTemperature'] = (data['AvgTemperature']-32)*(5\/9) #transforming in Celsius\n  remove = data.loc[(data['AvgTemperature']< -50)] #removing outliers\n  data.drop(remove.index,inplace=True)\n  remove = data.loc[(data['Year'] == 2020)] #removing data from incomplete year\n  data.drop(remove.index,inplace=True)\n  date = pd.to_datetime(data[['Month','Day','Year']],errors='coerce') #data format\n  data['date'] = date #new column\n\n#Location choice\n  if Region != None and Country == None and City == None:\n    if any(data['Region'].unique() == Region) == False:\n      return print('Please check the list of locations and the spelling accepted using the funtion: GlobalTemperature_dataInfo ')\n    data = data[data['Region'] == Region]\n\n  elif Region == None and Country != None and City == None:\n    if any(data['Country'].unique() == Country) == False:\n      return print('Please check the list of locations and the spelling accepted using the funtion: GlobalTemperature_dataInfo ')\n    data = data[data['Country'] == Country]\n\n  elif Region == None and Country == None and City != None:\n    if any(data['City'].unique() == City) == False:\n      return print('Please check the list of locations and the spelling accepted using the funtion: GlobalTemperature_dataInfo ')\n    data = data[data['City'] == City]\n\n  elif Region == None and Country == None and City == None:\n    data = data\n  else:\n    return print('Please select just one of types of location: Region, Country, City or let None in all for World data')\n\n\n\n  #Date choice\n  if inicial_date<'1995-01-01' or inicial_date>'2019-12-31':\n    return print('Please choose a initial_date greater than 1995-01-01 and lesser than 2019-12-31.')\n  elif final_date<'1995-01-01' or final_date>'2019-12-31':\n    return print('Please choose a initial_date greater than 1995-01-01 and lesser than 2019-12-31.')\n\n  data = data[(data['date'] >= inicial_date) & (data['date'] <= final_date)]\n\n\n\n  #chart period choice\n  if chart_time == 'Day':\n    return plot_chart(Avgperday(data),chart_time)\n\n  elif chart_time == 'Month':\n    return plot_chart(Avgpermonth(data),chart_time)\n\n  elif chart_time == 'Year':\n    return plot_chart(Avgperyear(data),chart_time)\n\n  elif chart_time == None:\n    return plot_chart(Avgperyear(data),chart_time )\n  \n  else:\n    return print('Please type one of the following: Day,Month,Year or None ')","9691b5c5":"def GlobalTemperature_values(chart_time,inicial_date = '1995-01-01',final_date = '2019-12-31',Region=None,Country=None,City=None):  \n  \"\"\"\n  Funtion which returns the values of the Average Temperature from a given location and time.\n\n  If any location is specified the function returns a chart related with the data from the whole world.\n  To know what is the exactly list of Regions\/Country\/City for the parameters, involke the GlobalTemperature_dataInfo.\n  \n  The Parameter chart_time only accepts the following string names: [Day, Month, Year].\n\n  The correct format for the inicial_date and final_date is: Year-Month-Day.\n  If not specified, the inicial_date and final_date are: '1995-01-01', '2019-12-31'.\n  The Parameters inicial_date and final_date only accepts values in the interval of: 1995-01-01 ------ 2019-12-31.\n\n  \"\"\"\n  data = pd.read_csv('\/kaggle\/input\/daily-temperature-of-major-cities\/city_temperature.csv',low_memory=False) #import data\n  data.drop(columns = 'State',inplace=True) #drop column state\n  data['AvgTemperature'] = (data['AvgTemperature']-32)*(5\/9) #transforming in Celsius\n  remove = data.loc[(data['AvgTemperature']< -50)] #removing outliers\n  data.drop(remove.index,inplace=True)\n  remove = data.loc[(data['Year'] == 2020)] #removing data from incomplete year\n  data.drop(remove.index,inplace=True)\n  date = pd.to_datetime(data[['Month','Day','Year']],errors='coerce') #data format\n  data['date'] = date #new column\n\n   #Location choice\n  if Region != None and Country == None and City == None:\n    if any(data['Region'].unique() == Region) == False:\n      return print('Please check the list of locations and the spelling accepted using the funtion: GlobalTemperature_dataInfo ')\n    data = data[data['Region'] == Region]\n\n  elif Region == None and Country != None and City == None:\n    if any(data['Country'].unique() == Country) == False:\n      return print('Please check the list of locations and the spelling accepted using the funtion: GlobalTemperature_dataInfo ')\n    data = data[data['Country'] == Country]\n\n  elif Region == None and Country == None and City != None:\n    if any(data['City'].unique() == City) == False:\n      return print('Please check the list of locations and the spelling accepted using the funtion: GlobalTemperature_dataInfo ')\n    data = data[data['City'] == City]\n  \n  elif Region == None and Country == None and City == None:\n    data = data\n\n  else:\n    return print('Please select just one of types of location: Region, Country, City or let None in all for World data')\n\n\n\n  #Date choice\n  if inicial_date<'1995-01-01' or inicial_date>'2019-12-31':\n    return print('Please choose a initial_date greater than 1995-01-01 and lesser than 2019-12-31.')\n  elif final_date<'1995-01-01' or final_date>'2019-12-31':\n    return print('Please choose a initial_date greater than 1995-01-01 and lesser than 2019-12-31.')\n\n  data = data[(data['date'] >= inicial_date) & (data['date'] <= final_date)]\n\n  #chart period choice\n\n  if chart_time == 'Day':\n    return Avgperday(data)\n\n  elif chart_time == 'Month':\n    return Avgpermonth(data)\n\n  elif chart_time == 'Year':\n    return Avgperyear(data)\n\n  elif chart_time == None:\n    return Avgperyear(data)\n  \n  else:\n    return print('Please type one of the following: Day,Month,Year or None ')","7d397ac5":"def GlobalTemperature_dataInfo(locations):\n  \"\"\"\n  Function which returns a list of Region\/Country\/city accepted. \n  The Parameter chart_time only accepts the following string names: [Region,Country,City].\n  \"\"\"\n  data = pd.read_csv('\/kaggle\/input\/daily-temperature-of-major-cities\/city_temperature.csv',low_memory=False) #import data\n  data.drop(columns = 'State',inplace=True) #drop column state\n  data['AvgTemperature'] = (data['AvgTemperature']-32)*(5\/9) #transforming in Celsius\n  remove = data.loc[(data['AvgTemperature']< -50)] #removing outliers\n  data.drop(remove.index,inplace=True)\n  remove = data.loc[(data['Year'] == 2020)] #removing data from incomplete year\n  data.drop(remove.index,inplace=True)\n  date = pd.to_datetime(data[['Month','Day','Year']],errors='coerce') #data format\n  data['date'] = date #new column\n\n  if locations == 'City':\n    a = list(data['City'].unique())\n    return sorted(a) \n  elif locations == 'Country':\n    a = list(data['Country'].unique())\n    return sorted(a)\n  elif locations == 'Region':\n    a = list(data['Region'].unique())\n    return sorted(a)\n  else:\n    return print('Please select just one of types of location: Region, Country, City')","58e0570e":"GlobalTemperature_dataInfo(locations = 'Regions')","f126b6e1":"GlobalTemperature_dataInfo(locations = 'Region')","e1ca8f9a":"GlobalTemperature_visual('Month',Region='Africa',Country=None,City='Sao Paulo')","cae22345":"GlobalTemperature_visual('Month',Region='Africaw',Country=None,City=None)","53f883b6":"GlobalTemperature_visual('Year',Region='Africa',Country=None,City=None)","91fc4054":"GlobalTemperature_visual('Year',Region='Africa',Country=None,City=None,inicial_date = '2000-01-01')","d9cc50da":"GlobalTemperature_visual('Year',Region=None,Country=None,City=None)","39848dfb":"GlobalTemperature_values('Year',Region=None,Country=None,City=None)","083757b1":"Regions = GlobalTemperature_dataInfo(locations = 'Region') #taking the regions \n# datasets which will be used to make a chart of the avg_temp\/regions\/periods_of_time\nfirst_t = pd.DataFrame(columns=Regions)\nsec_t = pd.DataFrame(columns=Regions)\nthird_t = pd.DataFrame(columns=Regions)\nfourth_t = pd.DataFrame(columns=Regions)\nfifth_t = pd.DataFrame(columns=Regions)\nlast_t = pd.DataFrame(columns=Regions)\n\n#using the previous functions to select the data from different Regions and periods of time \nfor r in Regions:\n  first_t[r] = GlobalTemperature_values('Year',Region=r,Country=None,City=None,inicial_date = '1995-01-01',final_date = '2000-01-01')\n  sec_t[r] = GlobalTemperature_values('Year',Region=r,Country=None,City=None,inicial_date = '2000-01-01',final_date = '2005-01-01')\n  third_t[r] = GlobalTemperature_values('Year',Region=r,Country=None,City=None,inicial_date = '2005-01-01',final_date = '2010-12-29')\n  fourth_t[r] = GlobalTemperature_values('Year',Region=r,Country=None,City=None,inicial_date = '2010-01-01',final_date = '2015-12-29')\n  fifth_t[r] = GlobalTemperature_values('Year',Region=r,Country=None,City=None,inicial_date = '2015-01-01',final_date = '2018-12-29')\n  last_t[r] = GlobalTemperature_values('Year',Region=r,Country=None,City=None,inicial_date = '2019-01-01',final_date = '2019-12-29')\n\n#adding data from the world for comparison \nfirst_t['World'] = GlobalTemperature_values('Year',Region=None,Country=None,City=None,inicial_date = '1995-01-01',final_date = '2000-01-01')\nsec_t['World'] = GlobalTemperature_values('Year',Region=None,Country=None,City=None,inicial_date = '2000-01-01',final_date = '2005-01-01')\nthird_t['World'] = GlobalTemperature_values('Year',Region=None,Country=None,City=None,inicial_date = '2005-01-01',final_date = '2010-12-29')\nfourth_t['World'] = GlobalTemperature_values('Year',Region=None,Country=None,City=None,inicial_date = '2010-01-01',final_date = '2015-12-29')\nfifth_t['World'] = GlobalTemperature_values('Year',Region=None,Country=None,City=None,inicial_date = '2015-01-01',final_date = '2018-12-29')\nlast_t['World'] = GlobalTemperature_values('Year',Region=None,Country=None,City=None,inicial_date = '2019-01-01',final_date = '2019-12-29')\n\n#join all the data into a new dataset\ndf = pd.DataFrame(columns = ['Regions','1995-01-01 -- 2000-01-01', '2000-01-01 -- 2005-01-01','2005-01-01 -- 2010-01-01','2010-01-01 -- 2015-01-01','2015-01-01 -- 2018-12-29','2019-01-01 -- 2019-12-29'])\ndf['Regions'] = first_t[:].mean().reset_index()['index']\ndf['1995-01-01 -- 2000-01-01'] = first_t[:].mean().reset_index()[0]\ndf['2000-01-01 -- 2005-01-01'] = sec_t[:].mean().reset_index()[0]\ndf['2005-01-01 -- 2010-01-01'] = third_t[:].mean().reset_index()[0]\ndf['2010-01-01 -- 2015-01-01'] = fourth_t[:].mean().reset_index()[0]\ndf['2015-01-01 -- 2018-12-29'] = fifth_t[:].mean().reset_index()[0]\ndf['2019-01-01 -- 2019-12-29'] = last_t[:].mean().reset_index()[0]\n\n#converting the form of this dataset into a way that seaborn barplot get it\ndf = pd.melt(df,\n             id_vars = ['Regions'],\n             value_vars = ['1995-01-01 -- 2000-01-01', '2000-01-01 -- 2005-01-01','2005-01-01 -- 2010-01-01','2010-01-01 -- 2015-01-01','2015-01-01 -- 2018-12-29','2019-01-01 -- 2019-12-29'],\n             var_name = 'Label',\n             value_name = 'Value')","0f3f3013":"import seaborn as sns\nplt.figure(figsize=(25,9))\nsns.barplot(x ='Regions',y='Value',hue='Label',data=df)\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.,fontsize=20)\nplt.title('Avg Temperature [\u00b0C]\/Region\/Year', fontsize=20)\nplt.rcParams['xtick.labelsize'] = 20\nplt.rcParams['ytick.labelsize'] = 20\ndegrees = 35\nplt.xticks(rotation=degrees)\nplt.xlabel('Regions', fontsize=20)\nplt.ylabel('Avg Temperature [\u00b0C]', fontsize=20)\nplt.grid(color='r', linestyle='dotted', linewidth=0.5)\nplt.tight_layout()","96f96f3a":"wd = GlobalTemperature_values('Year',Region=None,Country=None,City=None,inicial_date = '1995-01-01',final_date = '2019-12-31')\nX = wd.axes[0].values\ny = wd.values\n\n#different models\nmodel = np.poly1d(np.polyfit(X, y, 1))\nmodel2 = np.poly1d(np.polyfit(X, y, 2))\nmodel3 = np.poly1d(np.polyfit(X, y, 3))\n\n#For the Next 10 years\nXnew =np.array([x for x in range(1995,2030,1)]).reshape(-1,1)\nynew = model(Xnew)\n\nXnew2 =np.array([x for x in range(1995,2030,1)]).reshape(-1,1)\nynew2 = model2(Xnew)\n\nXnew3 =np.array([x for x in range(1995,2030,1)]).reshape(-1,1)\nynew3 = model3(Xnew)\n\n\nplt.figure(figsize=(12,7))\nplt.scatter(X, y,label = 'Original Data')\nplt.plot(Xnew, ynew,color='r', label = 'Prediction model (1\u00b0)')\nplt.plot(Xnew2, ynew2,color='k', label = 'Prediction model (2\u00b0)')\nplt.plot(Xnew3, ynew3,color='g', label = 'Prediction model (3\u00b0)')\n# plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.title('Avg Temperature [\u00b0C]\/Year', fontsize=20)\nplt.rcParams['xtick.labelsize'] = 10\nplt.rcParams['ytick.labelsize'] = 10\nplt.xlabel('Years', fontsize=15)\nplt.ylabel('Avg Temperature [\u00b0C]', fontsize=15)\nplt.grid(color='r', linestyle='dotted', linewidth=0.5)\nplt.tight_layout()\nplt.legend()\nplt.show()","b9550513":"I tried to make a code that makes possible to other ones explore the data. I am new in kaggle and just saw how this exploratory analysis usually  is done, after I made my work. So, any suggestions or comentary, please feel free to ask.","08aca41b":"Testing the GlobalTemperature_dataInfo","e1b600c8":"Testing the GlobalTemperature_values","3736e2d0":"All the functions used are presented and comment below","321dbeb6":"Regression analysis from world data","72d64d87":"Analysing the chart, is possible to observe that all the regions are with a increasing temperature.\nThe most notorious cases are: Asia, Middle East, North America and Europe.\nIt is possible to see that the year of 2019 it is, in most cases, the one which have the maximum avg temperature.","58747ad6":"Testing data for 2019","79df936d":"Testing the GlobalTemperature_visual"}}