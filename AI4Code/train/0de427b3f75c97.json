{"cell_type":{"e956a72a":"code","6e8c9091":"code","be2c10ec":"code","785d6c4c":"code","b99b22b9":"code","ddf46538":"code","5c6778a8":"code","5456c563":"code","f383d5f3":"markdown","60a17846":"markdown","8c9e37bc":"markdown","1edd9198":"markdown","6adc5724":"markdown","a78ab5f5":"markdown","3076aae3":"markdown","fa88f449":"markdown","2c6787c1":"markdown","059d623c":"markdown"},"source":{"e956a72a":"import numpy as np\nimport pandas as pd\nfrom datetime import datetime\n\nsudoku = pd.read_csv(\"..\/input\/sudoku\/sudoku.csv\") # Loading puzzles from csv\nsample = sudoku.loc[2020] # row 2020\nsample","6e8c9091":"def decode_sudoku(sample: str) -> np.matrix:\n    '''Transform an encoded puzzle into an integer matrix.'''\n    return np.matrix([np.array(list(sample[i:i+9])).astype(np.int) for i in range(0, len(sample), 9)])\n\ndecoded_puzzle = decode_sudoku(sample['puzzle'])\ndecoded_puzzle","be2c10ec":"def encode_sudoku(sudoku: np.matrix) -> str:\n    '''Transform an integer matrix into an encoded string'''\n    return ''.join([''.join(list(r.astype(str))) for r in np.asarray(sudoku)])\n\nencoded_puzzle = encode_sudoku(decoded_puzzle)\n\nassert encoded_puzzle == sample['puzzle'] # must be true, since the same puzzle was decoded and encoded\nencoded_puzzle","785d6c4c":"from ortools.sat.python import cp_model\n\ndef solve_with_cp(grid: np.matrix) -> (np.matrix, float):\n    '''Solve Sudoku instance (np.matrix) with CP modeling. Returns a tuple with the resulting matrix and the execution time in seconds.'''\n    assert grid.shape == (9,9)\n    \n    grid_size = 9\n    region_size = 3 #np.sqrt(grid_size).astype(np.int)\n    model = cp_model.CpModel() # Step 1\n\n    # Begin of Step2: Create and initialize variables.\n    x = {}\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if grid[i, j] != 0:\n                x[i, j] = grid[i, j] # Initial values (values already defined on the puzzle).\n            else:\n                x[i, j] = model.NewIntVar(1, grid_size, 'x[{},{}]'.format(i,j) ) # Values to be found (variyng from 1 to 9).\n    # End of Step 2.\n\n    # Begin of Step3: Values constraints.\n    # AllDifferent on rows, to declare that all elements of all rows must be different.\n    for i in range(grid_size):\n        model.AddAllDifferent([x[i, j] for j in range(grid_size)])\n\n    # AllDifferent on columns, to declare that all elements of all columns must be different.\n    for j in range(grid_size):\n        model.AddAllDifferent([x[i, j] for i in range(grid_size)])\n\n    # AllDifferent on regions, to declare that all elements of all regions must be different.\n    for row_idx in range(0, grid_size, region_size):\n        for col_idx in range(0, grid_size, region_size):\n            model.AddAllDifferent([x[row_idx + i, j] for j in range(col_idx, (col_idx + region_size)) for i in range(region_size)])\n    # End of Step 3.\n\n    solver = cp_model.CpSolver() # Step 4\n    start = datetime.now()\n    status = solver.Solve(model) # Step 5\n    exec_time = datetime.now() - start\n    result = np.zeros((grid_size, grid_size)).astype(np.int)\n\n    # Begin of Step 6: Getting values defined by the solver\n    if status == cp_model.FEASIBLE:\n        for i in range(grid_size):\n            for j in range(grid_size):\n                result[i,j] = int(solver.Value(x[i,j]))\n    else:\n        raise Exception('Unfeasible Sudoku')\n    # End of Step 6\n\n    return result, exec_time.total_seconds()\n\nres, _ = solve_with_cp(decoded_puzzle)\ncp_solution = encode_sudoku(res) \n\nassert cp_solution == sample['solution'] # must show the same solution for the puzzle found on the dataset\nres","b99b22b9":"from ortools.linear_solver import pywraplp\n\ndef solve_with_ip(grid: np.ndarray) -> (np.ndarray, float):\n    '''Solve Sudoku instance (np.matrix) with IP modeling. Returns a tuple with the resulting matrix and the execution time in seconds.'''\n    assert grid.shape == (9,9)\n    \n    grid_size = 9\n    cell_size = 3 #np.sqrt(grid_size).astype(np.int)\n    solver = pywraplp.Solver('Sudoku Solver', pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING) # Step 1\n\n    # Begin of Step2: Create variables.\n    x = {}\n    for i in range(grid_size):\n        for j in range(grid_size):\n            # Initial values.\n            for k in range(grid_size):\n                x[i, j, k] = solver.BoolVar('x[%i,%i,%i]' % (i, j, k))\n    # End of Step2\n    \n    # Begin of Step3: Initialize variables in case of known (defined) values.\n    for i in range(grid_size):\n        for j in range(grid_size):\n            defined = grid[i, j] != 0\n            if defined:\n                solver.Add(x[i,j,grid[i, j]-1] == 1)\n    # End of Step3\n    \n    # Begin of Step4: Initialize variables in case of known (defined) values. \n    # All bins of a cell must have sum equals to 1\n    for i in range(grid_size):\n        for j in range(grid_size):\n            solver.Add(solver.Sum([x[i, j, k] for k in range(grid_size)]) == 1)\n    # End of Step4\n\n    # Begin of Step5: Create variables.\n    for k in range(grid_size):\n        # AllDifferent on rows.\n        for i in range(grid_size):\n            solver.Add(solver.Sum([x[i, j, k] for j in range(grid_size)]) == 1)\n\n        # AllDifferent on columns.\n        for j in range(grid_size):\n            solver.Add(solver.Sum([x[i, j, k] for i in range(grid_size)]) == 1)\n\n        # AllDifferent on regions.\n        for row_idx in range(0, grid_size, cell_size):\n            for col_idx in range(0, grid_size, cell_size):\n                solver.Add(solver.Sum([x[row_idx + i, j, k] for j in range(col_idx, (col_idx + cell_size)) for i in range(cell_size)]) == 1)\n    # End of Step5\n\n    # Solve and print out the solution.\n    start = datetime.now()\n    status = solver.Solve() # Step 6\n    exec_time = datetime.now() - start\n    statusdict = {0:'OPTIMAL', 1:'FEASIBLE', 2:'INFEASIBLE', 3:'UNBOUNDED', \n                  4:'ABNORMAL', 5:'MODEL_INVALID', 6:'NOT_SOLVED'}\n    \n    result = np.zeros((grid_size, grid_size)).astype(np.int)\n    if status == pywraplp.Solver.OPTIMAL:\n        for i in range(grid_size):\n            for j in range(grid_size):\n                result[i,j] = sum((k + 1) * int(x[i, j, k].solution_value()) for k in range(grid_size))\n    else:\n        raise Exception('Unfeasible Sudoku: {}'.format(statusdict[status]))\n\n    return result, exec_time.total_seconds()\n\nres, _ = solve_with_ip(decoded_puzzle)\nip_solution = encode_sudoku(res) \n\nassert ip_solution == sample['solution'] # must show the same solution for the puzzle found on the dataset\nres","ddf46538":"def solve_sudoku(instance: np.matrix, solver: str = 'ip') -> (np.matrix, float):\n    if solver == 'ip':\n        return solve_with_ip(instance)\n    elif solver == 'cp':\n        return solve_with_cp(instance)\n    else:\n        raise Exception('Unknown solver: {}'.format(solver))\n\nsolve_sudoku(decode_sudoku(sample['puzzle']))","5c6778a8":"from tqdm.notebook import tqdm\n\nsample_size = 1000\nseed = 2020\nip_exec_time = []\ncp_exec_time = []\n\nfor index, row in tqdm(sudoku.sample(sample_size, random_state=seed).iterrows()):\n    res, exec_time = solve_sudoku(decode_sudoku(row.puzzle), 'cp') # Solving with CP\n    assert encode_sudoku(res) == row.solution # Assert if result equals to the expected solution\n    cp_exec_time += [exec_time] # Register the solver execution time\n    \n    res, exec_time = solve_sudoku(decode_sudoku(row.puzzle), 'ip') # Solving with IP\n    assert encode_sudoku(res) == row.solution # Assert if result equals to the expected solution\n    ip_exec_time += [exec_time] # Register the solver execution time\n    \nperformance_df = pd.DataFrame({'IP' : ip_exec_time, 'CP' : cp_exec_time})\nperformance_df.head()","5456c563":"performance_df.plot.hist(subplots=True, figsize=(12, 4), layout=(1,2))","f383d5f3":"# Constraint Programming\n\n**Constraint Programming (CP)** is a paradigm for solving combinatorial problems that draws on a wide range of techniques from artificial intelligence, computer science, and operations research. In Constraint Programming, users declaratively state the constraints on the feasible solutions for a set of decision variables. Constraints differ from the common primitives of imperative programming languages in that they do not specify a step or sequence of steps to execute, but rather the properties of a solution to be found. In additions to constraints, users also need to specify a method to solve these constraints. This typically draws upon standard methods like chronological backtracking and constraint propagation, but may use customized code like a problem specific branching heuristic.\n\nConstraint Programming is based on feasibility (finding a feasible solution) rather than optimization (finding an optimal solution) and focuses on the constraints and variables rather than the objective function. In fact, a CP problem may not even have an objective function \u2014 the goal may simply be to narrow down a vary large set of possible solutions to a more manageable subset by adding constraints to the problem. However, CP can be used to solve standard optimization problems, which have an objective function, by simply comparing the value of the objective for all feasible solutions. See The Job shop problem for an example of this.","60a17846":"<img alt=\"sudoku-img\" src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQmJshvMQUu37mCVrVCgYgrk5s9STJPH6JTKj0KEabiNcpgGzDP\" width=\"500\">\n\nThis Kernel has the objective to present some deterministic approaches to solve a Sudoku puzzle. Two approaches will be used:\n\n* Constraint Programming\n* Integer Programming\n\nFor both approaches, The [OR Tools](https:\/\/developers.google.com\/optimization) lib will be used.\n\nOR-Tools is an open source software suite for optimization, tuned for tackling the world's toughest problems in vehicle routing, flows, linear programming, **integer programming and constraint programming**.\n\n# Sudoku Puzzle\n\nSudoku is a mathematical game that was invented in the late 1970s, became popular in Japan in the 1980s and became known internationally in 2005 when numerous newspapers began publishing it in their hobbies section. \n\nThe objective of the game is to place numbers from 1 to 9 in each of the empty cells in a 9x9 grid, consisting of 3x3 subgrades called regions. The puzzle contains some initial clues, which are numbers inserted into some cells, to allow an induction or deduction of numbers into empty cells. Each column, row, and region can only have a number from each of 1 through 9.\n\nFor instance, given the initial Sudoku state:\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/f\/ff\/Sudoku-by-L2G-20050714.svg\/1024px-Sudoku-by-L2G-20050714.svg.png\" width=\"300\">\n\nThe final state must be:\n\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/31\/Sudoku-by-L2G-20050714_solution.svg\/1024px-Sudoku-by-L2G-20050714_solution.svg.png\" width=\"300\">","8c9e37bc":"## References \n\n* https:\/\/www.kaggle.com\/danielmartinezb\/irregular-6x6-sudoku-a-search\n* https:\/\/en.wikipedia.org\/wiki\/Constraint_programming\n* https:\/\/pt.wikipedia.org\/wiki\/Sudoku\n* https:\/\/developers.google.com\/optimization\n* https:\/\/towardsdatascience.com\/using-integer-linear-programming-to-solve-sudoku-puzzles-15e9d2a70baa\n* https:\/\/en.wikipedia.org\/wiki\/Linear_programming\n* https:\/\/en.wikipedia.org\/wiki\/Integer_programming","1edd9198":"## Modeling a Sudoku Solver with OR Tools Integer Programming Solver\n\nFor this IP formulation there is no solution that is better than another, only a feasible solution matters, the one which satisfies all constraints. Therefore, this formulation will not require an objective function. That been said, this formulation is quite similar to the CP model, but with a subtle difference: instead of a 2D matrix with integer variables (varying from 1 to 9), a binary representation of a 3D matrix will be used.\n\nFor instance, the simple attribution $x[0,3] = 2$ is translated to 9 attributions like: $x[0,3,0] = 0$, $x[0,3,1] = 1$, $x[0,3,2] = 0$, ..., $x[0,3,8] = 0$. On this representation the model must assure that only one possible value for a cell is valid (1) while the others must be invalid (0), therefore the additional constraint must be added to the model:\n\n$\\sum_{0}^{k-1} x[i, j, k] = 1, \\forall i, j$ (*)\n\nTo start modeling a Sudoku Solver with OR Tools Integer Programming, the following steps must be executed:\n\n1. To start modeling with OR Tools is to create an instance of the solver with `pywraplp.Solver(...)`. On this example, the CBC MIP Solver is used;\n2. Create a grid of variables. Every variables represents a possible value of a cell of the sudoku, this means that every variable must be a boolean value and vary from 0 to 1. That been said a matrix $x$ and all values are initialized as boolean variables;\n3. Add constraints to fetch all initial values on the *known* values;\n4. Add constraint to assure that only one possible value for a cell is valid (*);\n5. Define the *rows*, *columns* and regions *constraints*.\n6. Solve model using `solver.Solve()`;\n7. After model is solved, use `x[i, j, k].solution_value()` to show the final value of all variables on the $x$ matrix and convert it from boolean to integer.","6adc5724":"# Loading sample\n\nThe 9 Million Sudoku Puzzle dataset will be used. One puzzle sample for further explanations.","a78ab5f5":"As can be seen, both methods are really fast on solving sudoku, however CP has showed consistently better execution time than the IP approach.","3076aae3":"# Integer Programming\n\n## Linear Programming\n\n**Linear programming (LP)**, also called linear optimization, is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).\n\nMore formally, linear programming is a technique for the optimization of a linear objective function, subject to linear equality and linear inequality constraints. Its feasible region is a convex polytope, which is a set defined as the intersection of finitely many half spaces, each of which is defined by a linear inequality. Its objective function is a real-valued affine (linear) function defined on this polyhedron. A linear programming algorithm finds a point in the polytope where this function has the smallest (or largest) value if such a point exists.\n\nLinear programs are problems that can be expressed in canonical form as\n\n*Maximize*   $c^t \\times x$  \n*Subject to* $A \\times x \\leq b$  \n*And*        $x \\geq 0$\n\nwhere $x$ represents the vector of variables (to be determined), $c$ and $b$ are vectors of (known) coefficients, $A$ is a (known) matrix of coefficients, and $(\\cdot)^T$ is the matrix transpose. The expression to be maximized or minimized is called the objective function ($c^t \\times x$ in this case). The inequalities $A \\times x \\leq b$ and $x \\geq 0$ are the constraints which specify a convex polytope over which the objective function is to be optimized. In this context, two vectors are comparable when they have the same dimensions. If every entry in the first is less-than or equal-to the corresponding entry in the second, then it can be said that the first vector is less-than or equal-to the second vector.\n\n## Mixed Integer Programming\n\nAn Integer Programming problem is a special form of Linear Programming in which some or all of the variables are restricted to be integers. In many settings the term refers to integer linear programming (ILP), in which the objective function and the constraints (other than the integer constraints) are linear.\n\nInteger programming is NP-complete. In particular, the special case of 0-1 integer linear programming, in which unknowns are binary, and only the restrictions must be satisfied.\n\nIf some decision variables are not discrete the problem is known as a mixed-integer programming (MIP) problem.\n\nFor instance, the following model:\n\nMaximize $y$  \nSubject to:  \n$-x + y \\leq 1$  \n$3x + 2y \\leq 12$  \n$2x + 3y \\leq 12$  \n$x, y \\geq 0$  \n$x, y \\in \\mathbb{Z}$\n\nCan be plotted like the image below, where the blue lines are the linear bounds, but $x$ and $y$ **can't** assume any of these values, since they're not integers. However, the red dots are under the blue area and are integer values, these are the values $x$ and $y$ **can** assume. Since this model tries do maximize $y$, this means that $y$ must be 2 and $x$ can be 1 or 2. Both this values will maximize $y$ and satisfy all the declared constraints.\n\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/0\/06\/IP_polytope_with_LP_relaxation.svg\/350px-IP_polytope_with_LP_relaxation.svg.png\"\/>\n","fa88f449":"The puzzle column shows the initial sudoku state (with missing pieces as 0) and the solution shows the same puzzle solved.\n\nThe format is encoded as a single string. I will now create functions to decode it (and encode it back) to a 2d integer matrix.","2c6787c1":"# Comparing approaches\n\nNow is time to compare how both approaches perform. To achieve this goal both methods will be used to solve a sample of size 1000 collected from the original dataset. Since both methods also returns the execution time in seconds, this data will be registered for further analysis.\n\nThe code below save the data of execution time on the `performance_df` dataframe.","059d623c":"## Modeling a Sudoku Solver with OR Tools Constraint Programming Solver\n\nTo start modeling a Sudoku Solver with OR Tools Constraint Programming, the following steps must be executed:\n\n1. To start modeling with OR Tools is to create a model with `cp_model.CpModel()`;\n2. Create a grid of variables. Every variables represents a cell of the sudoku solver, this means that every variable must be an integer value and vary from 1 to 9. That been said a matrix $x$ is created, where *known* values (of the initial puzzle) are copied to the matrix and the *unknown* values are initialized as integer variables;\n3. Define the *rows*, *columns* and regions *constraints*. OR Tools have a Global Constraint (GC) that declare that a set of variables must have different values. To use the GC, the function `model.AddAllDifferent` must be used;\n4. Create a solver using `cp_model.CpSolver()`;\n5. Solve model using `solver.Solve(model)`;\n6. After model is solved, use `solver.Value` to show the final value of all variables on the $x$ matrix."}}