{"cell_type":{"a7e350ee":"code","a594b498":"code","59986225":"code","fd5108ec":"code","13419f99":"code","745f03d5":"code","6c531199":"code","51610fb1":"code","be2afb51":"code","220c19d7":"code","118f4537":"code","09c8e3a3":"code","2e49e1a2":"code","a46db9d1":"code","fef75fa4":"code","5ef1ae32":"code","46816d64":"code","65f412c7":"code","85b4d1e5":"code","987c3c8f":"code","6df96aa5":"code","12a25399":"code","68cf3fa6":"code","709bbc3e":"code","b5d72ef7":"code","0024670e":"code","9b5a060e":"code","e7c41597":"code","cc9756ca":"code","fdd3bfc2":"code","519649a0":"code","e7c94d59":"code","7f00b90b":"code","7ad84205":"code","e99142d9":"markdown","163d8aea":"markdown","8eedb74e":"markdown","9dcaaa72":"markdown","3e9387cf":"markdown","0939a2ed":"markdown","3138c854":"markdown","6e7de10e":"markdown","c3bf14ee":"markdown","819b67d5":"markdown","716d1726":"markdown","13000869":"markdown"},"source":{"a7e350ee":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a594b498":"data = pd.read_csv('\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv')\ndata.head()  # see first 5 rows","59986225":"# Let's create three different lists.\nteam = [\"Fenerbahce\",\"Galatasaray\"]\nteam_value = [\"150M\",\"180M\"]\nlist_label = [\"team\",\"team_value\"]\nlist_col = [team,team_value]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","fd5108ec":"# Add new columns\ndf[\"Player_Number\"] = [\"25\",\"23\"]\ndf","13419f99":"# Broadcasting\ndf[\"Expenses\"] = 100000000 #Broadcasting entire column\ndf","745f03d5":"# Plotting all data \ndata1 = data.loc[:,[\"suicides_no\",\"population\"]]\ndata1.plot()\nplt.show()\n# So confusing","6c531199":"# subplots\ndata1.plot(subplots = True)\nplt.show()","51610fb1":"# scatter plot  \ndata1.plot(kind = \"scatter\",x=\"population\",y = \"suicides_no\")\nplt.show()","be2afb51":"# hist plot  \ndata1.plot(kind = \"hist\",y = \"suicides_no\",range= (0,500),bins = 10)","220c19d7":"fig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"suicides_no\",bins = 50,range= (0,500),ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"suicides_no\",bins = 50,range= (0,500),ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt.show()","118f4537":"data.describe()","09c8e3a3":"time_list = [\"1985-01-01\",\"2016-12-31\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","2e49e1a2":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.head()\ndate_list = [\"1987-01-01\",\"1987-02-01\",\"1987-03-01\",\"1987-04-01\",\"1987-05-01\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2 ","a46db9d1":"print(data2.loc[\"1987-01-01\"])\nprint(data2.loc[\"1987-01-01\":\"1987-03-01\"])","fef75fa4":"# We will use data2 that we create at previous part\ndata2.resample(\"A\").mean()","5ef1ae32":"# Lets resample with month\ndata2.resample(\"M\").mean()","46816d64":"# In real life (data is real. Not created from us like data2) we can solve this problem with interpolate\n# We can interpolete from first value\ndata2.resample(\"M\").first().interpolate(\"linear\")","65f412c7":"# Or we can interpolate with mean()\ndata2.resample(\"M\").mean().interpolate(\"linear\")","85b4d1e5":"# read data\ndata = pd.read_csv('\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv')\ndata= data.set_index(\"year\")\ndata.head()","987c3c8f":"# indexing using square brackets\ndata[\"sex\"][1987]","6df96aa5":"# using column attribute and row label\ndata.sex[1987]","12a25399":"# using loc accessor\ndata.loc[1987,[\"sex\"]]","68cf3fa6":"# Selecting only some columns\ndata[[\"sex\",\"age\"]]","709bbc3e":"# Difference between selecting columns: series and dataframes\nprint(type(data[\"sex\"]))     # series\nprint(type(data[[\"sex\"]]))   # data frames","b5d72ef7":"# Slicing and indexing series\ndata.loc[:,\"sex\":\"suicides_no\"]","0024670e":"data.loc[::-1,\"sex\":\"suicides_no\"]","9b5a060e":"boolean = data.suicides_no > 100\ndata[boolean]","e7c41597":"first_filter = data.suicides_no > 200\nsecond_filter = data.population > 1000000\ndata[first_filter & second_filter]","cc9756ca":"# Plain python functions\ndef div(n):\n    return n\/2\ndata.suicides_no.apply(div)","fdd3bfc2":"# Or we can use lambda function\ndata.suicides_no.apply(lambda n : n\/2)","519649a0":"# Defining column using other columns\ndata[\"Ratio\"] = data.population \/ data.suicides_no\ndata.head()","e7c94d59":"# our index name is this:\nprint(data.index.name)\n# lets change it\ndata.index.name = \"index_name\"\ndata.head()","7f00b90b":"# lets read data frame one more time to start from beginning\ndata = pd.read_csv('\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv')\ndata.head()\n# As you can see there is index. However we want to set one or more column to be index","7ad84205":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"country\",\"sex\"]) \ndata1.head(100)\n# data1.loc[\"Fire\",\"Flying\"] # howw to use indexes","e99142d9":"Let's manipulate DATA FRAMES WITH PANDAS","163d8aea":"TRANSFORMING DATA","8eedb74e":"HIERARCHICAL INDEXING","9dcaaa72":"Let's build data frames from scratch\n* We can build data frames from csv as we did above.\n* Also we can build dataframe from dictionaries\n* We can use zip() method to returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.\n* Adding new column\n* Broadcasting: Create new column and assign a value to entire column","3e9387cf":"Let's visualise our dataset.","0939a2ed":"RESAMPLING PANDAS TIME SERIES\n* Resampling: statistical method over different time intervals\n* Needs string to specify frequency like \"M\" = month or \"A\" = year\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: increase date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019","3138c854":"Our aim is to examine Pandas Foundation and Manipulating Data Frames with Pandas","6e7de10e":"STATISTICAL EXPLORATORY DATA ANALYSIS","c3bf14ee":"INDEXING PANDAS TIME SERIES","819b67d5":"FILTERING DATA FRAMES","716d1726":"We can add new columns.","13000869":"SLICING DATA FRAME"}}