{"cell_type":{"e82fc51f":"code","4c56973e":"code","2db605ad":"code","a63b6b70":"code","a85f5dbc":"code","c2cc4730":"code","eebebffc":"code","c0fac5c2":"code","fc0404cb":"code","8bfc390a":"code","33fbdf60":"code","253e75f2":"code","2e3ab34b":"code","d7e250cf":"code","780706ca":"code","a2eba972":"code","8c38fb8d":"code","952c47a1":"code","9518e687":"code","d0c4a8b1":"code","6476a02e":"code","c5677fc7":"code","5f7b8b29":"code","2e4b8b2d":"code","df42dcfd":"code","7834b6a3":"code","718b83ae":"code","8b09622f":"code","8604a32a":"code","3306d28a":"code","d0dd4b10":"code","3f3f61f4":"code","539548fe":"code","248f7bbf":"code","775bb298":"code","4c974f5e":"code","014c082d":"code","cda1c73f":"code","0ba5e56e":"code","488e7f54":"code","7becfb9a":"code","78ca4243":"code","6db9c333":"code","d8d41f92":"code","bf492096":"code","ceb97f33":"code","58a129bd":"code","4a2b9af1":"code","b7672b6f":"code","75d912c3":"code","42f3c81d":"code","c370a4d7":"code","ec84e11b":"code","8d8091ce":"code","d6da3ba0":"code","89a71abe":"code","13a1bfd8":"code","e04c4bc3":"code","2410bd13":"code","2b8cf917":"code","80a92bfd":"code","bf3dc211":"code","3a41c2dd":"code","c9913c11":"code","87a0a371":"code","5f33833a":"code","79e8bf5d":"markdown","e5acee58":"markdown","8e200260":"markdown","118a124a":"markdown","09c50d3d":"markdown","7fa3b8ea":"markdown","5f76af29":"markdown","79a4a3ef":"markdown","54a78d1b":"markdown","9044f097":"markdown","a786c137":"markdown","5188560c":"markdown","cd6af08c":"markdown","20fecfc5":"markdown","4bb3f73d":"markdown","30a3bd5a":"markdown","c615003f":"markdown","87744890":"markdown","a254c988":"markdown","47ed7c88":"markdown","de5fd8b7":"markdown","5b6b1892":"markdown","a26ad577":"markdown","f7a7b00c":"markdown","f68516b2":"markdown","e9c52724":"markdown","b4bdad3b":"markdown","861ebbcb":"markdown","bd681636":"markdown","e1d32cba":"markdown","4eb0f0d0":"markdown","e34daa9f":"markdown","97fe5fb5":"markdown","0f2cef2d":"markdown","544182ae":"markdown","6edf8633":"markdown","2e7bf145":"markdown","27396a12":"markdown","c3d7ff00":"markdown","1a48a12c":"markdown","2149bc48":"markdown","8762615e":"markdown","4fff2e60":"markdown","b2d272d9":"markdown","efbb6586":"markdown","1d43dc15":"markdown","943e1381":"markdown","35e0572b":"markdown"},"source":{"e82fc51f":"import os\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#color\nfrom colorama import Fore, Back, Style","4c56973e":"base_path = '..\/input\/lish-moa\/'","2db605ad":"test_features_df = pd.read_csv(base_path + 'test_features.csv')\ntrain_features_df = pd.read_csv(base_path + 'train_features.csv')\ntrain_targets_scored_df = pd.read_csv(base_path + 'train_targets_scored.csv')\ntrain_targets_nonscored_df = pd.read_csv(base_path + 'train_targets_nonscored.csv')\nsample_submission_df = pd.read_csv(base_path + 'sample_submission.csv')","a63b6b70":"print(Fore.YELLOW + 'Sample submission shape: ',Style.RESET_ALL,sample_submission_df.shape)\nsample_submission_df.head(5)","a85f5dbc":"# Null values and Data types\nprint(Fore.YELLOW + 'test_features_df !!',Style.RESET_ALL)\nprint(test_features_df.info())\nprint('-------------')\nprint(Fore.BLUE + 'train_features_df !!',Style.RESET_ALL)\nprint(train_features_df.info())\nprint(Fore.YELLOW + 'train_targets_scored_df !!',Style.RESET_ALL)\nprint(train_targets_scored_df.info())\nprint('-------------')\nprint(Fore.BLUE + 'train_targets_nonscored_df !!',Style.RESET_ALL)\nprint(train_targets_nonscored_df.info())\nprint(Fore.YELLOW + 'sample_submission_df !!',Style.RESET_ALL)\nprint(test_features_df.info())","c2cc4730":"corrmat = train_features_df.corr()\nf, ax = plt.subplots(figsize=(14,14))\nsns.heatmap(corrmat, square=True, vmax=.8)","eebebffc":"corrmat = train_targets_scored_df.corr()\nf, ax = plt.subplots(figsize=(14,14))\nsns.heatmap(corrmat, square=True, vmax=.8)","c0fac5c2":"corrmat = train_targets_nonscored_df.corr()\nf, ax = plt.subplots(figsize=(14,14))\nsns.heatmap(corrmat, square=True, vmax=.8)","fc0404cb":"!pip install dabl","8bfc390a":"import dabl","33fbdf60":"test_features_df_clean = dabl.clean(test_features_df, verbose=0)\ntrain_features_df_clean = dabl.clean(train_features_df, verbose=0)\ntrain_targets_scored_df_clean = dabl.clean(train_targets_scored_df, verbose=0)\ntrain_targets_nonscored_df_clean = dabl.clean(train_targets_nonscored_df, verbose=0)","253e75f2":"types = dabl.detect_types(test_features_df_clean)\nprint(types) ","2e3ab34b":"dabl.plot(test_features_df_clean, 'cp_type')","d7e250cf":"dabl.plot(test_features_df_clean, 'cp_time')","780706ca":"dabl.plot(test_features_df_clean, 'cp_dose')","a2eba972":"dabl.plot(test_features_df_clean, 'g-0')","8c38fb8d":"dabl.plot(test_features_df_clean, 'g-100')","952c47a1":"dabl.plot(test_features_df_clean, 'g-350')","9518e687":"dabl.plot(test_features_df_clean, 'g-500')","d0c4a8b1":"dabl.plot(test_features_df_clean, 'g-771')","6476a02e":"dabl.plot(test_features_df_clean, 'c-0')","c5677fc7":"dabl.plot(test_features_df_clean, 'c-50')","5f7b8b29":"dabl.plot(test_features_df_clean, 'c-99')","2e4b8b2d":"types = dabl.detect_types(train_features_df_clean)\nprint(types) ","df42dcfd":"dabl.plot(train_features_df_clean, 'cp_type')","7834b6a3":"dabl.plot(train_features_df_clean, 'cp_time')","718b83ae":"dabl.plot(train_features_df_clean, 'cp_dose')","8b09622f":"dabl.plot(train_features_df_clean, 'g-0')","8604a32a":"dabl.plot(train_features_df_clean, 'g-100')","3306d28a":"dabl.plot(train_features_df_clean, 'g-350')","d0dd4b10":"dabl.plot(train_features_df_clean, 'g-500')","3f3f61f4":"dabl.plot(train_features_df_clean, 'g-771')","539548fe":"dabl.plot(train_features_df_clean, 'c-0')","248f7bbf":"dabl.plot(train_features_df_clean, 'c-50')","775bb298":"dabl.plot(train_features_df_clean, 'c-99')","4c974f5e":"types = dabl.detect_types(train_targets_scored_df_clean)\nprint(types) ","014c082d":"train_targets_scored_df_clean","cda1c73f":"train_targets_scored_df","0ba5e56e":"train_targets_nonscored_df_clean","488e7f54":"train_targets_nonscored_df","7becfb9a":"!pip install datasist","78ca4243":"import datasist as ds  #import datasist library","6db9c333":"ds.structdata.check_train_test_set(train_features_df, test_features_df, index=None, col=None)","d8d41f92":"ds.structdata.describe(test_features_df)","bf492096":"ds.structdata.describe(train_features_df)","ceb97f33":"numerical_feats = ds.structdata.get_num_feats(test_features_df)\nds.structdata.detect_outliers(test_features_df,80,numerical_feats)","58a129bd":"numerical_feats = ds.structdata.get_num_feats(train_features_df)\nds.structdata.detect_outliers(train_features_df,80,numerical_feats)","4a2b9af1":"ds.structdata.display_missing(test_features_df)","b7672b6f":"ds.structdata.display_missing(train_features_df)","75d912c3":"cat_feats = ds.structdata.get_cat_feats(test_features_df)\ncat_feats","42f3c81d":"cat_feats = ds.structdata.get_cat_feats(train_features_df)\ncat_feats","c370a4d7":"num_feats = ds.structdata.get_num_feats(test_features_df)\nprint(len(num_feats))","ec84e11b":"num_feats = ds.structdata.get_num_feats(train_features_df)\nprint(len(num_feats))","8d8091ce":"get_unique_counts = ds.structdata.get_unique_counts(test_features_df)\nget_unique_counts","d6da3ba0":"get_unique_counts = ds.structdata.get_unique_counts(train_features_df)\nget_unique_counts","89a71abe":"!pip install autoviz","13a1bfd8":"import pandas as pd\nfrom autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()","e04c4bc3":"test_features_df","2410bd13":"sep = ','\ntarget = 'cp_type'\ndft = AV.AutoViz(filename=\"\", sep=sep, depVar=target, dfte=test_features_df, header=0, verbose=1,\n                            lowess=False,chart_format='svg',max_rows_analyzed=5000,max_cols_analyzed=50)","2b8cf917":"sep = ','\ntarget = 'cp_type'\ndft = AV.AutoViz(filename=\"\", sep=sep, depVar=target, dfte=train_features_df, header=0, verbose=1,\n                            lowess=False, chart_format='svg',max_rows_analyzed=4000,max_cols_analyzed=50)","80a92bfd":"!pip install missingno","bf3dc211":"import missingno as msno\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","3a41c2dd":"msno.matrix(test_features_df)","c9913c11":"msno.matrix(train_features_df)","87a0a371":"msno.bar(test_features_df.sample(10))","5f33833a":"msno.bar(train_features_df.sample(10))","79e8bf5d":"For basic EDA, I'll use some automated ML tools.","e5acee58":"### C-0 ~ C-99","8e200260":"**detect_outliers**: Detect Rows with outliers.","118a124a":"# EDA for train_targets_scored_df","09c50d3d":"## Automated ML tools for EDA\n\nFor basic EDA, I'll use some automated ML tools.","7fa3b8ea":"`cp_time` : treatment duration (24, 48, 72 hours).","5f76af29":"# EDA for train_features_df","79a4a3ef":"# 2. <a id='2'>Reading the data \ud83d\udcda<\/a>","54a78d1b":"# EDA for train_targets_nonscored_df","9044f097":"### g-0 ~ g-771","a786c137":"Features `g-` signify gene expression data. Gene expression is the process by which the information encoded in a gene is used to direct the assembly of a protein molecule. The cell reads the sequence of the gene in groups of three bases.\n\nIn test_feature_df, we can see `g-0` ~ `g-771` and I'll show `g-0, g-100, g-350, g-500, g-771` since there are too many columns for `g-`.","5188560c":"`cp_type` indicates samples treated with a compound (cp_vehicle) or with a control perturbation (ctrl_vehicle).","cd6af08c":"# 4. <a id='4'>Data Analysis Baseline Library (dabl) \ud83c\udf31<\/a> ","20fecfc5":"<img src='https:\/\/img.timesnownews.com\/story\/1536770343-miedicine-2.jpg?d=600x450'>\n<p>\n<h1><center>Mechanisms of Action(MoA) Prediction: EDA!\ud83d\udc8a<\/center><h1>\n    \n    \n    \n# 1. <a id='Introduction'>Introduction \ud83c\udccf <\/a>\n    \n### 1.1 What is Mechanisms of Action(MoA)?\n* In the past, scientists derived drugs from natural products or were inspired by traditional remedies. Very common drugs, such as paracetamol, known in the US as acetaminophen, were put into clinical use decades before the biological mechanisms driving their pharmacological activities were understood. Today, with the advent of more powerful technologies, drug discovery has changed from the serendipitous approaches of the past to a more targeted model based on an understanding of the underlying biological mechanism of a disease. In this new framework, scientists seek to identify a protein target associated with a disease and develop a molecule that can modulate that protein target. As a shorthand to describe the biological activity of a given molecule, scientists assign a label referred to as mechanism-of-action or MoA for short.\n\n###  1.2 What is Mechanisms of Action(MoA) Prediction Competition?\n* The aim of this challenge is to \u201cclassify drugs based on their biological activity\u201d. Pharmaceutical drug discovery aims to identify certain proteins that are associated with a specific disease, and then to develop molecules that can target those proteins. The MoA of a molecule encodes its biological activity. Our dataset describes the response of 100 different types of human cells to various drugs. Those response patterns will be used to classify the MoA reponse.\n(This is a multi-label classification problem.)  \n\n### 1.3 Metric: log loss\n* Please see the [evaluation metric](http:\/\/https:\/\/www.kaggle.com\/c\/lish-moa\/overview\/evaluation).","4bb3f73d":"### cp_dose","30a3bd5a":"### cp_type","c615003f":"`cp_dose` : dose (high or low)","87744890":"This project tries to help make supervised machine learning more accessible for beginners, and reduce boiler plate for common tasks","a254c988":"![](https:\/\/warehouse-camo.ingress.cmh1.psfhosted.org\/6572d848c045b008268a4d6ca2617526a102d9b0\/68747470733a2f2f726973656e772e6769746875622e696f2f64617461736973742f64617461736973742e706e67)\n**datasist** is a python package providing fast, quick, and an abstracted interface to popular and frequently used functions or techniques relating to data analysis, visualization, data exploration, feature engineering, Computer, NLP, Deep Learning, modeling, model deployment etc.","47ed7c88":"### g-0 ~ g-771\nIn train_features_df, we can see `g-0` ~ `g-771` and I'll show `g-0, g-100, g-350, g-500, g-771` since there are toomany columns for `g-`.","de5fd8b7":"![](https:\/\/storage.googleapis.com\/coderzcolumn\/static\/tutorials\/data_science\/article_image\/missingno%20-%20Visualize%20Missing%20Data%20in%20Python.jpg)\nMessy datasets? Missing values? missingno provides a small toolset of flexible and easy-to-use missing data visualizations and utilities that allows you to get a quick visual summary of the completeness (or lack thereof) of your dataset. Just pip install missingno to get started.\n\nIn the case of a real-world dataset, it is very common that some values in the dataset are missing. We represent these missing values as NaN (Not a Number) values. But to build a good machine learning model our dataset should be complete. That\u2019s why we use some imputation techniques to replace the NaN values with some probable values. But before doing that we need to have a good understanding of how the NaN values are distributed in our dataset.\n\nMissingno library offers a very nice way to visualize the distribution of NaN values. Missingno is a Python library and compatible with Pandas.","5b6b1892":"# 6. <a id='6'>AutoViz \ud83d\udef6 <\/a> ","a26ad577":"All is `0`.","f7a7b00c":"## test_features","f68516b2":"# EDA for test_features_df","e9c52724":"**display_missing**: Display missing values as a pandas dataframe.","b4bdad3b":"**Bar Chart :**\n\nThis bar chart gives you an idea about how many missing values are there in each column.","861ebbcb":"![](https:\/\/github.com\/AutoViML\/AutoViz\/raw\/master\/logo.png)\nAutomatically Visualize any dataset, any size with a single line of code.\n\nAutoViz performs automatic visualization of any dataset with one line. Give any input file (CSV, txt or json) and AutoViz will visualize it.","bd681636":"### cp_time","e1d32cba":"## Correlation\n* https:\/\/www.kaggle.com\/blessondensil294\/beginners-eda-viz-moa-drug-prediction","4eb0f0d0":"`c-` signify `cell viability` data. Cell viability is a measure of the proportion of live, healthy cells within a population. Cell viability assays are used to determine the overall health of cells, optimize culture or experimental conditions, and to measure cell survival following treatment with compounds, such as during a drug screen.\n\nIn test_feature_df, we can see `c-0` ~ `c-99` and I'll show `c-0, c-50, c-99` since there are too many columns for `c-`.","e34daa9f":"### cp_time","97fe5fb5":"* train_features.csv - Features for the training set. Features g- signify gene expression data, and c- signify cell viability data. cp_type indicates samples treated with a compound (cp_vehicle) or with a control perturbation (ctrl_vehicle); control perturbations have no MoAs; cp_time and cp_dose indicate treatment duration (24, 48, 72 hours) and dose (high or low).\n* train_targets_scored.csv - The binary MoA targets that are scored.\n* train_targets_nonscored.csv - Additional (optional) binary MoA responses for the training data. These are not predicted nor scored.\n* test_features.csv - Features for the test data. You must predict the probability of each scored MoA for each row in the test data.\n* sample_submission.csv - A submission file in the correct format.","0f2cef2d":"### cp_dose","544182ae":"Now let\u2019s ask dabl what it thinks by cleaning up the data.\n\ndabl tries to detect the types of your data and apply appropriate conversions. It also tries to detect potential data quality issues. The field of data cleaning is impossibly broad, and dabl\u2019s approaches are by no means sophisticated. The goal of dabl is to get the data \u201cclean enough\u201d to create useful visualizations and models, and to allow users to perform custom cleaning operations themselves. In particular if the detection of semantic types (continuous, categorical, ordinal, text, etc) fails, the user can provide type_hints:","6edf8633":"In train_features_df, we can see `c-0` ~ `c-99` and I'll show `c-0, c-50, c-99` since there are too many columns for `c-`.","2e7bf145":"float64(`872`) : 772 columns with gene expression data + 100 columns with cell viability data","27396a12":"## If this kernel is useful, <font color='orange'>please upvote<\/font>!\n- See you next time and I will update it soon!","c3d7ff00":"**Matrix:**\n\nVisualising missing values for a sample. Using this matrix you can very quickly find the pattern of missingness in the dataset.","1a48a12c":"**get_cat_feats** : Returns the categorical features in a data set","2149bc48":"**check_train_test_set**: Checks the distribution of train and test for uniqueness in order to determine the best feature engineering strategy.","8762615e":"# 3. <a id='3'>Basic Data Exploration \ud83c\udfd5\ufe0f<\/a>","4fff2e60":"All is `0`.","b2d272d9":"### cp_type","efbb6586":"# 7. <a id='7'>missingno \ud83d\udef6<\/a> ","1d43dc15":"# 5. <a id='5'>Datasist \u2728<\/a> ","943e1381":"**get_num_feats** : Returns the numerical features in a data set","35e0572b":"I can not get Plot for data.csv, but get some information.\n* Number of variables removed due to `high correlation` = `235` in test_features_df\n* Number of variables removed due to `high correlation` = `229`  in train_features_df"}}