{"cell_type":{"693480f4":"code","8e6eb46e":"code","1cee7a23":"code","aa90a1bf":"code","81cb520c":"code","1be52afb":"code","122c582a":"code","be3705b0":"code","4a2f1f2a":"code","3d3b3679":"code","19b2ea83":"code","97101ec0":"markdown","23adc341":"markdown","39fd8aaf":"markdown","94dcfbc2":"markdown","e0883cba":"markdown","5910bf07":"markdown","f0e2f5ab":"markdown","705aecb1":"markdown","1534bc7b":"markdown","1fa48389":"markdown"},"source":{"693480f4":"import numpy as np","8e6eb46e":"names = ['Bob','David','Mary','Skyler']\nlocations = [(5,2,10),(2,3,5),(19,3,4),(3,5,1)]\n\nfriends = list(map(lambda x, y: {'name': x, 'location': y}, names, locations))\nfriends","1cee7a23":"def calculate_distance(loc1,loc2):\n    (x1,y1,z1)=loc1\n    (x2,y2,z2)=loc2\n    \n    return ((x1-x2)**2+(y1-y2)**2+(z1-z2)**2)**(1\/2)\n\ndef calculate_total_distance(friend,friends):\n    return sum(map(lambda x: calculate_distance(friend['location'], x['location']), friends))\n    \ndef find_all_distance(friends):\n    return list(map(lambda x: calculate_total_distance(x,friends), friends))\n\ndef find_host(friends):\n    names = list(map(lambda x: x['name'], friends))\n    name_distance = np.vstack((names, find_all_distance(friends))).transpose()\n    \n    result = name_distance[np.argsort(name_distance[:,1])][0]\n    return result[0], result[1]\n    \nresult = find_host(friends)\nresult","aa90a1bf":"data = [2,5,6,3,7,8,93,35,43]\n\ndef calculate_abs_distance(i,j):\n    return abs(i-j)\n   \ndef total_abs_distance(datapoint, data): \n    return sum(map(lambda x: calculate_abs_distance(datapoint, x), data))\n    \ndistances = list(map(lambda x: total_abs_distance(x,data), data))\n\ndata_dist = (np.vstack((data,distances)).transpose())\n\nresult = data_dist[np.argsort(data_dist[:,1])][0]\nresult[0]","81cb520c":"print(np.median(data))","1be52afb":"locations = np.array(list(map(lambda x: x['location'], friends)))\n\n(p,q,r) = np.mean(locations[:,0]), np.mean(locations[:,1]), np.mean(locations[:,2])\n\ndef get_distance(v1,v2):\n    return sum((v1-v2)**2)\n\nnames = list(map(lambda x: x['name'], friends))\n\ndist_from_center = np.array(list(map(lambda x: get_distance(x, np.array([p,q,r])), locations)))\ndist_from_center = np.vstack((names, dist_from_center)).transpose()\n\nresult = dist_from_center[np.argsort(dist_from_center)][0]\nresult[0][0], result[0][1]","122c582a":"LIMIT = 100\nN = 1000000 #population size\n\nX=np.random.choice(np.arange(1,LIMIT), N, replace=True)\nY=np.random.choice(np.arange(1,LIMIT), N, replace=True)\nZ=np.random.choice(np.arange(1,LIMIT), N, replace=True)\n\nDATA=np.array([X,Y,Z]).transpose()\nnp.mean(DATA,axis=0)","be3705b0":"n = 1000 #sample size\nN_ITERATIONS = 100\n\nresults=[]\n\nfor _ in range(N_ITERATIONS):\n    x=np.random.choice(X, n, replace=True)\n    y=np.random.choice(Y, n, replace=True)\n    z=np.random.choice(Z, n, replace=True)\n\n    x_mean = np.mean(x)\n    y_mean = np.mean(y)\n    z_mean = np.mean(z)\n    results.append([x_mean,y_mean,z_mean])\n\ncentroid = np.mean(np.array(results),axis=0)\ncentroid","4a2f1f2a":"distances = list(map(lambda x: calculate_distance(x, centroid), DATA))\nidx = distances.index(min(distances))\n\nprint('Host location: ', DATA[idx])","3d3b3679":"medoid = np.median(DATA, axis=0) \nmedoid","19b2ea83":"n = 1000 #sample size\nN_ITERATIONS = 100\n\nresults=[]\n\nfor _ in range(N_ITERATIONS):\n    x=np.random.choice(X, n, replace=True)\n    y=np.random.choice(Y, n, replace=True)\n    z=np.random.choice(Z, n, replace=True)\n\n    x_median = np.median(x)\n    y_median = np.median(y)\n    z_median = np.median(z)\n    results.append([x_median,y_median,z_median])\n\nestimated_medoid = np.mean(np.array(results),axis=0)\nestimated_medoid","97101ec0":"**Consider a case when all the points are on a line.** \n\n**The least sum of distances (absolute\/manhattan distance in this case) will be for the point that is median of numbers. This can be mathematically proved.**","23adc341":"### Geometric Median\n\nNow, let's try if we can find median in a similar manner - using the theory of law of large numbers.\n\nEarlier, we were interested in finding the centroid of population and so we considered centroids of samples and took average. Now, **since we are interested in finding the median of data, we consider median of samples and take average.** ","39fd8aaf":"However, since our points are in N-dimensional space, we need to calculate something commonly called as **geometric median.**\n\nWe build up on that using the idea of **Law of Large Numbers**.","94dcfbc2":"**We see that the population parameters (mean of data points) and average of bootstrapped samples are similar.**\n\nSo, if we need to find the host which satisfies the objective among a million friends, we can use bootstrapping to **estimate** the centroid of all the friends' locations and find the friend whose location is closest to the estimated centroid.","e0883cba":"### **Now, consider if we had a million points in the space. How do we go about these approaches then?**\n\n**According to law of large numbers, if you conduct an experiment a number of times, the average of results should be close to expected value.** \n\nIn our case, we are trying to find the mean of all points, and so we can bootstrapp samples and calculate their mean. \n\nWe do this for a number of times and finally compute their average - this value should be close to the actual mean of all points.  ","5910bf07":"**Solution in quadratic time complexity**","f0e2f5ab":"**which is the same as the median of data**","705aecb1":"**If we were to minimize the sum of squares of distances instead of sum of distances, the optimum solution will be the centroid (can be theoretically found).**\n\nAnd so, an imperfect solution would be to find the closest point to the centroid since we require our point to be one of the friends' house.","1534bc7b":"## Interview Question\n\n#### You are given with names and locations of some of your friends. Find the friend from which the sum of distances to other friends is the least.","1fa48389":"**So, we see that Law of Large Numbers can be used to solve the problem of finding geometric median.**"}}