{"cell_type":{"b3e3f2be":"code","b731b5d7":"code","d9879f6d":"code","13b1312a":"code","5e0dc11a":"code","453738bc":"code","bc02f20e":"code","a0fb1544":"code","04c52caf":"code","e678745b":"code","c1333e9b":"code","12866422":"code","bbade4ae":"code","23cbca65":"code","e1d474a1":"code","2da67456":"code","3a5d01a7":"code","5d3248fa":"code","140ef2f4":"code","936dfdae":"code","25c46add":"code","2883394e":"markdown","b0b5f5dd":"markdown","d5ecfed8":"markdown","93e54115":"markdown","32d7e61d":"markdown","8bf09c30":"markdown","d033cf1b":"markdown","b7bdcced":"markdown","f79e8ddf":"markdown","c3fae2ea":"markdown","260f254d":"markdown","db611d0b":"markdown","108f4f16":"markdown","05ad1010":"markdown","ba9e16b8":"markdown","1b1af83d":"markdown","c45a4249":"markdown","25fbd6fb":"markdown","8dcb069e":"markdown"},"source":{"b3e3f2be":"!pip install feyn","b731b5d7":"import feyn\nimport pandas as pd","d9879f6d":"data = '\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv'\ndf = pd.read_csv(data)\ndf","13b1312a":"df[\"week\"] = pd.to_datetime(df.Date).dt.isocalendar().week.astype(int)\ndf = df.drop(\"Date\", axis=1)","5e0dc11a":"df.dtypes","453738bc":"stypes = {\n    \"Location\": \"cat\",\n    \"WindGustDir\": \"cat\",\n    \"WindDir9am\": \"cat\",\n    \"WindDir3pm\": \"cat\",\n    \"RainToday\": \"cat\",\n    \"week\": \"cat\",\n}","bc02f20e":"df.isna().sum()","a0fb1544":"df = df.dropna(subset=[\"RainTomorrow\"])\ndf[\"RainTomorrow\"]=df[\"RainTomorrow\"]==\"Yes\"","04c52caf":"df = df.drop([\"Evaporation\", \"Sunshine\", \"Cloud9am\", \"Cloud3pm\"], axis=1)","e678745b":"df.isna().sum()","c1333e9b":"na_data = df[df.isna().any(axis=1)].copy() # This dataframe holds observations where any of the values are missing\nfull_data = df.dropna() # This dataframe holds observations where *none* of the values are missing","12866422":"full_data","bbade4ae":"train, test = feyn.tools.split(full_data, ratio=(1,1), random_state=42)","23cbca65":"ql = feyn.connect_qlattice()","e1d474a1":"ql.reset(random_seed=42)","2da67456":"models = ql.auto_run(train, output_name=\"RainTomorrow\", kind=\"classification\", stypes = stypes)","3a5d01a7":"models[0].plot_roc_curve(train)\nmodels[0].plot_roc_curve(test)","5d3248fa":"models[0].plot_confusion_matrix(test, threshold=.3)","140ef2f4":"models[0].plot_confusion_matrix(test, threshold=.5)","936dfdae":"models[0].sympify(2)","25c46add":"models[0].plot(test)","2883394e":"# Dropping the remainder\nThere is still a lot of missing values. We will set aside the data with missing values (because we might use this in later extensions of this notebook where we demonstrate how to use the QLattice to impute data).","b0b5f5dd":"# Community QLattice\nWe are now ready to connect to the QLattice. The feyn module will look in you local configuration file to see if we have a commercial QLattice. If not, it will allocate a community QLattice for us on the Abzu compute cluster.","d5ecfed8":"# Confusion matrix\nA simpler and less powerfull way to evaluate classifiers is a confusion matrix: https:\/\/docs.abzu.ai\/docs\/guides\/plotting\/confusion_matrix.html\nLet us see how that looks at various thresholds","93e54115":"# Feature interaction\nFinally we can see how the features interact by plotting the equation with pearson correlations of each node. See more here: https:\/\/docs.abzu.ai\/docs\/guides\/plotting\/model_plot.html\n","32d7e61d":"# Reproducability\nThe qlattice will be reset when we get it, but to ensure that we get exactly the same result every time we run the notebook we need to seed the QLattice. This is done with the `reset` method","8bf09c30":"# Data types\nWe observe that we have categorical (dtype `object`) and numerical columns. The QLattice will work fine with the categorical and numerical data. We just need to tell it which is which. We will create a `dict` names `stypes` with this information which we will pass to the QLattice later. Read more about categorical data in the QLattice here: https:\/\/docs.abzu.ai\/docs\/guides\/essentials\/stypes.html","d033cf1b":"# Split the data in train and test.\nWe split the data in two equally sized buckets. We will use one set to find the model and the other to test that the model is not overfitted.","b7bdcced":"# Data\nRead in the data and have a quick look at it:","f79e8ddf":"# The target variable\nThere are over 3000 observations with no data for the target variable. We drop those observations up front\n\nWe also notice that the target variable is boolean but expressed as a string. Let us convert it to a proper boolean (0\/1)","c3fae2ea":"![image.png](attachment:8ec6e554-0d95-4868-ba79-ddab755b449c.png)\n# Use a Community QLattice to solve the rain prediction in very little time\n\nThe QLattice is a supervised machine learning tool for symbolic regression developed by [Abzu](https:\/\/www.abzu.ai) . It is inspired by Richard Feynman's path integral formulation. That's why the python module to use it is called *Feyn*, and the *Q* in QLattice is for Quantum.\n\nAbzu provides free QLattices for non-commercial use to anyone. These free community QLattices gets allocated for you automatically if you use Feyn without an active subscription, as we will do in this notebook. Read more about how it works here: https:\/\/docs.abzu.ai\/docs\/guides\/getting_started\/community.html\n\nThe feyn Python module is not installed on Kaggle by default so we have to pip install it first. \n\n__Note__: the pip install will fail unless you enable *Internet* in the *settings* to the right --->","260f254d":"# The model is math!\nWhat the QLattice actually finds is an equation that relates the input to the output. The user can control the compexity and structure of the equation in various ways. Here we just went with the defaults. Let's see the actual mathematical expression:","db611d0b":"# Search for the best model\nWe are now ready to instruct the QLattice to search for the best mathematical model to explain the data. Here we use the high-level convenience function that does everything with sensible defaults: https:\/\/docs.abzu.ai\/docs\/guides\/essentials\/auto_run.html. \n\nFor more detailed control, we could use the primitives: https:\/\/docs.abzu.ai\/docs\/guides\/primitives\/using_primitives.html\n\nNotice that the `stypes` dictionary we created earlier gets passed to the QLattice here. \n\n__NOTE:__ This will take several minutes to complete. It invoves work done on the QLattice machine remotely as well as in the local notebook. The part that runs locally is slowing things down because of the limited CPU resources on Kaggle. Running the same on my machine locally only takes 20 seconds!","108f4f16":"# More missing data\nThere is a lot of missing data. Some columns just have too much to keep around: \"Evaporation\", \"Sunshine\", \"Cloud9am\" and \"Cloud3pm\". We will drop those without further ado.","05ad1010":"# First impressions:\nWe notice that:\n- The target variable is `RainingTomorrow`.\n- All the other variables are possible predictors\n\n## The date column\nWe have the `Date` of each observation. This should probably not be used as a predictor as it could lead to overfitting. However, the time of year of the observation is perhaps a good predictor. So we will create a `week` of year column to allow the model to capture seasonality.","ba9e16b8":"# Evaluate\nThe QLattice has found a mathematical relationship tha can relate the predictors to the output. The final step is to evaluate the model on the test and the train set. To do that we plot the *ROC* curve of the classifier on both the test and the training data. You can read more about ROC curves here: https:\/\/docs.abzu.ai\/docs\/guides\/plotting\/roc_curve.html\n\nIn this case they overlap almost perfectly which indicates that the model generalizes to unseen data very well.","1b1af83d":"# Python imports\nIn this notebook we will use only two python modules: the `feyn` module to access the QLattice, and the `pandas` module to access the data","c45a4249":"# What do we have left?\n\nWe still have 112925 observations left. That should be plenty to find a good model ","25fbd6fb":"# Deal with missing data.\nWe have 145,460 observations. Let's check for missing data","8dcb069e":"# Conclusion\nIn a fex simple steps we were able to:\n- Find a mathematical model that predicts rain\n- Show that it gereralizes very well to new data.\n- Understand which features interacts to predict rain\n- Visualize the performance of the model in various ways.\n"}}