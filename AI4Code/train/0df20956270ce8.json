{"cell_type":{"09fd1319":"code","959b14be":"code","b74ad7a3":"code","62304eb8":"code","2fb0a233":"code","1ee7c757":"code","54664bf5":"code","23addc33":"code","702a95b2":"code","69810239":"code","4237d5ab":"code","6f616b0f":"code","48d630d6":"code","ec786dfe":"code","cc2b4fc7":"code","7a696cc6":"markdown","c75876ff":"markdown","dde59490":"markdown","accbc8cb":"markdown","b623de7c":"markdown","cc5658eb":"markdown","5cbc0d2f":"markdown"},"source":{"09fd1319":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nimport torch\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision import transforms,datasets","959b14be":"#Check if GPU is present or not and print its name\ntorch.cuda.get_device_name()","b74ad7a3":"train  = datasets.MNIST(\"\",train=True,download=True,transform= transforms.Compose([transforms.ToTensor()]))\ntest  = datasets.MNIST(\"\",train=False,download=True,transform= transforms.Compose([transforms.ToTensor()]))","62304eb8":"trainset = torch.utils.data.DataLoader(train,batch_size=32,shuffle=True)\ntestset = torch.utils.data.DataLoader(test,batch_size=32,shuffle=True)","2fb0a233":"for data in trainset:\n    print(data)\n    break","1ee7c757":"x,y = data[0][0],data[0][1]","54664bf5":"%matplotlib inline \nplt.imshow(x.view(28,28),alpha = 0.8,cmap='gist_gray')\nplt.show()","23addc33":"#Create an empty dictionary to hold count of each digit.\ntotal = 0\ncounter_dict = {}\nfor i in range(10):\n  counter_dict[i]=0\nprint(counter_dict)","702a95b2":"#Store the count of each digit stored . This step help us to check whether data is imbalanced or not.\nfor data in trainset:\n  Xs,ys = data\n  for y in ys:\n    counter_dict[int(y)]+=1\nprint(counter_dict)","69810239":"#Create a Basic Dense layer Model\nclass Net(nn.Module):\n  def __init__(self):\n    super().__init__() #Intialising the parent class(basically inheritance)\n    self.fc1 = nn.Linear(28*28,64) #Dense Layers\n    self.fc2 = nn.Linear(64,64)\n    self.fc3 = nn.Linear(64,64)\n    self.fc4 = nn.Linear(64,10) \n\n  def forward(self,x):\n    x = F.relu(self.fc1(x))\n    x = F.relu(self.fc2(x))\n    x = F.relu(self.fc3(x))\n    x = self.fc4(x)\n    return F.log_softmax(x,dim=1) #Final Activation Function (gives probablity of each class)\n\nnet = Net()\nprint(net)","4237d5ab":"X = torch.rand([28,28]) #Apply Random input to the model\nX","6f616b0f":"output = net(X.view(-1,28*28)) #Reshape the output (same as numpy reshape function)\noutput","48d630d6":"import torch.optim as optim\nfrom tqdm import tqdm\noptimizer = optim.Adam(net.parameters(),lr=0.001) #Optimizer Function to update the weight for forward function\n\nepochs = 10\nfor epoch in range(epochs):\n  for data in tqdm(trainset):\n    X,y = data\n    net.zero_grad()\n    output = net(X.view(-1,28*28))\n    loss = F.nll_loss(output,y)\n    loss.backward()\n    optimizer.step()\n  print(\"Epoch: {}, Loss: {}\".format(epoch,loss))","ec786dfe":"correct = 0\ntotal = 0\n\nwith torch.no_grad():\n  for data in trainset:\n    X,y = data\n    output = net(X.view(-1,28*28))\n    for idx,i in enumerate(output):\n      if torch.argmax(i)==y[idx]:\n        correct+=1\n      total+=1\nprint(\"Accuracy: {}\".format(correct\/total))","cc2b4fc7":"fig = plt.figure(figsize=(10,10))\nfor i in range(1,10):\n  fig.add_subplot(5,5,i)\n  plt.imshow(X[i].view(28,28),alpha= 0.8,cmap='gist_gray')\n  print(torch.argmax(net(X[i].view(-1,784))[0]))\nplt.show()","7a696cc6":"                                                    || Kindly Upvote if you like ||","c75876ff":"#                     Import Necessary Libraries","dde59490":"# Visualise the Results","accbc8cb":"# Loading the Dataset","b623de7c":"# Model Inference","cc5658eb":"![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAARcAAAC1CAMAAABCrku3AAAA0lBMVEX\/\/\/8lJSXuTCwhISEdHR0RERH8\/PwUFBQMDAxhYWEAAADFxcUqKio6Ojrs7OwYGBiXl5fh4eFKSkqwsLDp6en29vZAQECCgoLwSCaRkZH+9fOoqKj1VDPy8vLwSCXCwsLPz89VVVXa2tppaWm5ubn73dd9fX0yMjKsrKyKior96eXyQxuBgYGfn59SUlJycnL0aU\/6zsb3raH60sr5v7X97er1fWf0Wz384dz5x731jXv0hHD0WDf2nY70cVjzQBP2ZEj1l4b3tKj2p5j0kH72nIzBCe0EAAAPEUlEQVR4nO1c6ULiOhQG2tKFpbIKIqUsglpxGVSc0VFH577\/K93mpEvaJmkLl4uWfr+UhjT5enL2UijkyPEtsTrZ9wq+JM5ecl4oWJVKOS9RnL0YpzkvEaxOe6WclwjObFpyXiJYvdi05LyEAdKS8xLGGUhLzksIjrTkvAThSkvOSwCetOS8kPClpWTclve9mi8DQlp6L5fEhYfLh70tav84W\/u0nK78zy+fX4z174M9VqS09O78z59eLPsT6\/VAiTlbGx4tJYKWwiP+\/O3H3pa2T9gRNFVaCg9vzqcHqYhJ3dL7SV55cngprQ\/wIJHSYtwFLj1YhysvT4S0GD9DFx+tQ9UvHGmxcblGxFiPBycuXGkpIP\/ltHd6eP4LX1oAJw8HJyy2tBhcaYngMAQnQAtdWoK4W5\/tfFH7x8l7SmlZlaz3y\/hh3xwnrwwvl4VVr1cybjN\/lP5YaaUFmS7r184Xtl\/89GnpJaKlhy269bHzpe0TD57jklBaHFpKvdNMq5hfnrgY90nG+w6g9bzrte0RK4+WpOfiyUtdWUmU9DfFo2uLrL9Jv3LvUmm87nJle8WZS0svhd31DJiVRCF9Szx74rKKH+zi5N05Scbj7la2V1x6RyKVN+KfpKddrWy\/+OFu8DTdBl8dgbF+72hh+0XZjQDSOq\/32c5rnnkWN2V47GmYt0wepM0f+28rndPzveBaI+Mz7TfPHF6MTPq8rkuf9hj5B6n3nsF0w8Opc4zW6TsVXFF7yWDwuHKP0QbumWvhjRT+4HfBT6e6aiQOjYjvuhY+g6HAh2tUUqtdP7CyEiUnvhc+tjC2l73Nv\/vV8Wlt\/swfepvL2lfHVryUssvLjy3O0UOGz5GnXzbo3rjMsN69d+y09U\/6795l2E7fbRHkfDi89DLo1z25laANaqp\/HF7WGYwDTtyOdyP15spOxi6biSkvHZlaebpqN11e+Lvgc2MF42a03jJojohiY+pSs1uOszKZx3xw07RpPZgzT2NnUb0UCn9da5sy7fZ3i0j8O2Dl9renc+ddA5\/Zulr51j0QL2lSmV6+PJNZb4QPrwSfImfndVilKWp\/L3gFshSBzqVbRshwn4cvML2kJeqy3zKT4b6gwq3XAfOeTMX89ZoZMqtdEPxGMuM1CTH\/eALWy2DISMBv3zVuY3da\/pO6H++74uTWf498HWNgHh59WjIZMZI46xGvHv3gOfYr\/0UCI4uF6RD8jm9bDG6ZInP51yJexc+opxvAD4IYw3imdjdcfr74o3pZLEtTQBJTMqzXj5ACfrh77hFDeqXDoMUm5o0gptSzTh9\/\/3w6AVze\/Xh+twySuCwmuxm495WvIzQ2Suv1qfVmWUbgmvF+CLrFxWptlaLoRT96ezys3zs5+WVRWAjD6GU0FcXB\/TqOmZ71eggvfIZx8nnKY6ZnvWcy\/Z8AD58vbwadFePt9j77Pi4TJ\/ePpyEDhPw4a\/28ymbuPzme7p\/fe7aZNhCQvT69\/fMz20mFpCg\/3X38\/vvr+fnXn8\/7Vc5JCId+cnLkyJEjR44cORjotEdH01ruLIUxVWRZL+a8hKGKxaJQzXkJI+eFjhS8NI6CWA5alclGjJr9oxToNza5x5ZIwctIkwOQJEXRlNq81U5702VoJj60SvptbY0UvFSkIgWCLonqLN1Nl9SZWJDMDfa1LbbmBUHUFq00N80kL4IHUmoUNcVp4vAiRKGYG+5tG6TmpdZ1UavqsiS77Oh6cjVA0y8inqYbxcLcdHNbIC0v0nm542JYN2cXNc2hRtBHSW86bEcxkdEctUInin14EWl5USKKpNFfyJgYabLFQuoS5uWLYHte7C1daCAyYrez+UIyyIt9CSth6WLzhWSSl4KJ1aZe33gh2eSl0FJAYI42XkhGeYGJikJzY9uRVV6wdyNtHONllZdyDaleKVU8QCIpL52GaVbMSTtmyUPiG+32kDlsgmYzGxFDSuGlzpiHz0vhRrcvy330ZxmDvWq4HFxLEl7K5tF4ISoIwkJdMmSzMVqq1b7zz6TfrApCtTZtRfZUrlw0qzrMJlabx6PAgBAvk+W4hubpUuaJ4QWCHnGK\/pxpdlijq8z91auifb0bfBqxvAwHXUUW3bhDECVpTPOwG5o9SsK8NKaKDC6EICriPBDB1Y8WzjUclumKcGP6l0leOsumIsGNBXse4SLETAwvM2SRxDHsYCGguICpa8B4KcvAZ7G8nFclMlIFR1JpRl3shuLJbUvXidEasfTyUpDDsxV1ZWy6A3xeystF8MbyIhgJJuFFaMLfFygykJlGe4xslxwMwGN4aY8V\/9n6obyoRG7i89LXAvvR\/OfcaCoRVmA6jzuPF7OphYcKSkBOk8tLYQIcscovsHJ84pLyUqniJy\/oklyt1RaC4gbgyjSkMz1elhreq67r6BA4S0MYCc6XRVlSZF1SJHc2zQzwgrSDiCeRJckbJcgmccMYXs5ht45SAYlQGJmHvky5yOWlgp+ZIFXns8bQVtltc3mt4FVKapB+l5cR9jR19fjialpTZN\/nnDkSIEvq0WjSaEzMWV8V0HTCwp0LeFl0bjSQD1k9HsxGrb6q4McjkroxhhfYrX7s3BotSr+hDux0kfYJx5g8XkwdNqIXl6TKM1V8GKTgbTAvRx2k43ThCEcmnUnfS285+TVdvCBP8nBmb9pfMbipC1UGJdbywhtbkWMpPfe\/GcMLiIg0cPaOVlUUqeESzuOE9QKHlzo2Qso0PN0MnwctMBfmZXksI1Eidl53HnHDnS2SYJzcaF6iWsXHxx7XDAp2H4ghHXs+L23Mo+n8C5rXZSkIcHSU8Ko4vKggvBolWG\/UYPkKaZWAF2GMPr6hKbixHuXSxchbFebF1iTL8Bw3ekARxfEygH1VXUGH9Jt4TRk4FAk95IPNSwv0Jz2H0a4KxYBKdXgp2h\/L1GM8gMshJyEKR15qZvSWIG6EseXygg+O7huZJvpfo2TwwHnRIh4ZkxdnZoaXaEKukDScmBd7T9QYFlwrBmUkgBexS1MEIDDEg+XycgXKjNgubF++io68Rpq+FglImLzgByyyQhzsZhMC4\/JCdyuXcMoWsYlFnB6g3hQ7agvvfx4vcIoC2xoiURaqkQXAAZP74Y+ZvJRB8CSm3Dvxqi+YDi9Rhw9GI1vIMR4eOPF0A0RU965xeDnCLlTADzwG9RqpRII5l6PPksWLiesEzIjYEUyf6EbEYBCoKOxrAXB4KWPvwHviTF4aKvYIgqfW9ONIclL0eGn6mMUL5pGTOMbBWNNfDfCi0UvDOECJU7oFfv4FS6j3pOi8dCpTx\/EMlwOuBcopr2hUKWLz0mXpbw9zJJi6Z2GxnaZZQvcYsQNaHzxemjRe\/C2Vh21zMK9JTsyqL0IuCSjMsP+GlDlF6zB5aYP+W\/AEH\/Sg7HlfwItEFxewsYmSrWl5EcY306mqjq+b3ZqgaZLuBptSM2zT6mFVjD4TWaeCwYup0U5jAO3g2QBeGKEZSKs+583mIC0vdkQrIoTq9qJ2FZUB7Nia5EfnIHO0U8HgZRbSqhSUkW\/nc415odeEQUezbRuB1LzQIBIJHQKgeYPBI3JeqF4wixcce\/P7a5Ai80WKx8tFgtkwtuZF0BVlykgogJYrEiZ2AuJyThvL4OUKyVxMx9RUJP1PHi+goonQho30vHh9KSLK6gi1m3NmkRE0L0kDel5+DBUAg5ebBDtBY3wh5PGCGOQbNxepeVk0HVyrNxeDUbTCQKAOPpnvWuCcCF3tbcELkgI\/EtgPL3qq0jzWvN46RpB5MalDGbzM\/9NzlIRljNS8HCeY1AO43b6pAOelSR\/K4CWJpkQZMdFT7zxeruixCQW75QX8Sy94Bq9KoeaqmLxAQMq30+CXJ7PTEHyz6xQEdssLXogbq8AeWa0gDF4q8X7dUKf4dXReeGnnIHbMC\/ii7tlH8zEXxeAFLDs\/DoB1+ZULHi+4ia+7gzggJS+OBYDICYpKzKZTBi\/lRWzcCK5f0U\/Zc3jBuT85gUHaNS\/YBIGQg\/PSZQ1kxdNALE\/BgA4jEnY8XpzZEiiYXfOCi0Uogu0g9ciOTVi8tPDnbDdppAW1OZeXQdxsLnbNS+HI9Vmg\/iczu8JZvLSLsAqGFSvgkItMqXB5aUNShGUTCeycl4ZrApAIc0wBM+8Nnp1AT0EXKCaGy0thCrMVY\/sjd86LU3Ho1CHEZ7eEM3mZQO6YxWgbNCnpQ\/N5MfFsXMPvrnq3vMD5UWYo88KzkOy62hyXiOj5\/WtwXkjS+LxggSkqceHM7nkBfSuoKEnCMytsXnBNsahRVHZHBYdEII9FDC8NnHalE1MP1GF3ywv2LyC7x+vW5NSnZ7gKo92EdcykG6k2xvJSGDg1nXFkMcOBr5D\/B14aeCG0ojQBXp\/HBS6Vyd0WudBh32lnCEphHC+FGzybXrwIaN9JfyEF+zx2zIvbG8APZLl9QXO8FUGr9U3YTLldmYs4T6aEVhTLS2HqJB5lRR2Yjfqw3jBn8y56X8h3O\/8PXmbOrrhVYX4f2dyROUFWqs2xOu4Wnc4lIdL+Ec9LeepJsKIUF6grTXHqGl4Z6v\/gBTRvXLYgpu+wJTlCh3pFRa9bVRei70PF8oKq9+5skJf1\/ha9QCwNL6wOhVhAcqmocct8cX2qE1Xz9+JtQ43OmYQX1GUZma2oa9emOyAFLyPUrSxtwsuEaNVkoa0piqJVOSMqqk420oqSODUpwxowUew7haNxYDbUsEyWNVCznSzQeenCHTxeOhOE1C+RFxwFE9Nc0Wkh8FOMk2VT0DRFkhRNK44ZffDD1mw2S\/Ku++TImc2eTlpMg19Zzm1c0XmZwR3+g7cucdMnu1UjBYaTSmuAfgBhi1cGQ7Mtz0fmJk97a4CLmagqfFgAhzdRdeKwAI07X+aNqy8DSOknaiI4LOC+zr1otq8MaASPTwQdHHBpLfFvNxwKoAEz\/wWrCCCpJPELzAcI3K4t7OOns740WtEeuxx2AFKNLS8fJKAqkYsLYDRzjU95DplUMdcuCGOte1Fp1IeNWRNoiX037DBQ11F2WqwuBPy6qk5\/heHg0HLeF3OShGJt898QyhRU8jcRino1Vy6AzlT0f\/tAjL7zfLhoDJoipJM1nfpDJAeM4WR2PmiZuawcKP4Fm09FJJaC440AAAAASUVORK5CYII=)","5cbc0d2f":"# Model Preparation"}}