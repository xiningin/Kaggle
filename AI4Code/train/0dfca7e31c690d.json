{"cell_type":{"7a956c11":"code","0b47d5f4":"code","37449ad8":"code","bb3dae5a":"code","468a97c6":"code","91d28dbb":"code","a7fb1fc2":"code","dd0b0f3f":"code","57687846":"code","5d0bc09b":"code","5b0c9bab":"code","bb0639b2":"code","7638ffeb":"code","8a9d63ba":"code","061a16dc":"code","b2001353":"code","ee1fc3c4":"markdown","1df4043c":"markdown","e91febf9":"markdown","562de4ba":"markdown","108e6d89":"markdown","1993e1a4":"markdown","ec8e4a21":"markdown"},"source":{"7a956c11":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b47d5f4":"# Creating all directories for storing training and validation images\n!mkdir \/kaggle\/working\/images\n!mkdir \/kaggle\/working\/images\/train\n!mkdir \/kaggle\/working\/images\/validation\n!mkdir \/kaggle\/working\/images\/train\/face_with_mask\n!mkdir \/kaggle\/working\/images\/train\/face_no_mask\n!mkdir \/kaggle\/working\/images\/validation\/face_with_mask\n!mkdir \/kaggle\/working\/images\/validation\/face_no_mask","37449ad8":"# Reading all Annotated files belonging to face_with_mask and face_no_mask categories\nimport csv\nimport os\nimport shutil\nimport cv2\n\nsrc_path=\"\/kaggle\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images\/\"\nres_path=\"\/kaggle\/working\/images\/train\/face_with_mask\/\"\nres2_path=\"\/kaggle\/working\/images\/train\/face_no_mask\/\"\n\ntest_path=\"\/kaggle\/working\/images\/validation\/face_with_mask\/\"\ntest2_path=\"\/kaggle\/working\/images\/validation\/face_no_mask\/\"\n\ncount=0\nwith open('\/kaggle\/input\/face-mask-detection-dataset\/train.csv') as csvfile:\n    readCSV = list(csv.reader(csvfile, delimiter=','))\n    print(len([row for row in readCSV[1:] if(row[5]==\"face_with_mask\" or row[5]==\"face_no_mask\")]))\n    #Train test split\n    len_train_samples=int(len([row for row in readCSV[1:] if(row[5]==\"face_with_mask\" or row[5]==\"face_no_mask\")])*0.8)\n    for row in readCSV[1:]:\n        #print(row)\n        if(row[5]==\"face_with_mask\" or row[5]==\"face_no_mask\"):\n            count+=1\n            x1=int(row[1])\n            x2=int(row[2])\n            y1=int(row[3])\n            y2=int(row[4])\n            \n            image=cv2.imread(src_path+row[0])\n            image=image[x2:y2,x1:y1]\n            \n            if(count<=len_train_samples and row[5]==\"face_with_mask\"):\n                cv2.imwrite(res_path+str(count)+\".jpg\",image)\n            \n            elif(count<=len_train_samples and row[5]==\"face_no_mask\"):\n                cv2.imwrite(res2_path+str(count)+\".jpg\",image)\n            \n            elif(count>len_train_samples and row[5]==\"face_with_mask\"):\n                cv2.imwrite(test_path+str(count)+\".jpg\",image)\n            \n            elif(count>len_train_samples and row[5]==\"face_no_mask\"):\n                cv2.imwrite(test2_path+str(count)+\".jpg\",image)\n    ","bb3dae5a":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport os\nfor pic in os.listdir(\"\/kaggle\/working\/images\/train\/face_with_mask\/\")[0:1]:\n    print(pic)\n    img=plt.imread(\"\/kaggle\/working\/images\/train\/face_with_mask\/\"+pic)\n    plt.imshow(img)\n    ","468a97c6":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.layers import Dense, Flatten, GlobalAveragePooling2D, BatchNormalization, Conv2D, Input, AveragePooling2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import MaxPooling2D, Activation, Dropout\nfrom tensorflow.keras.applications import MobileNetV2, ResNet50, Xception\nfrom tensorflow.keras.optimizers import Adam, Adadelta\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n\nbatch_size=32\nmomentum=0.9\nepochs=7\nepoch_size=400\nlr=0.1\nwd=0.0005\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,rotation_range=20,zoom_range=0.15,width_shift_range=0.2,height_shift_range=0.2,shear_range=0.15,horizontal_flip=True,fill_mode=\"nearest\")\nvalidation_datagen = ImageDataGenerator(rescale=1.\/255,rotation_range=20,zoom_range=0.15,width_shift_range=0.2,height_shift_range=0.2,shear_range=0.15,horizontal_flip=True,fill_mode=\"nearest\")","91d28dbb":"train_generator = train_datagen.flow_from_directory(\n        \"\/kaggle\/working\/images\/train\/\",  # This is the source directory for training images\n        target_size=(224, 224),\n        batch_size=batch_size,\n        class_mode='categorical',\n        color_mode=\"rgb\",\n        shuffle=False)\n\nvalidation_generator = validation_datagen.flow_from_directory(\n        \"\/kaggle\/working\/images\/validation\",  # This is the source directory for validation images\n        target_size=(224, 224),\n        batch_size=batch_size,\n        class_mode='categorical',\n        color_mode=\"rgb\",\n        shuffle=False)\nnb_train_samples = 4599\nnb_validation_samples = 1150","a7fb1fc2":"# The Base model is a pretrained Xception Model trained on imagenet\n\nbaseModel = Xception(weights=\"imagenet\", include_top=False,\ninput_tensor=Input(shape=(224, 224, 3)))\n# construct the head of the model that will be placed on top of the\n# the base model\nheadModel = baseModel.output\nheadModel = AveragePooling2D(pool_size=(7, 7))(headModel)\nheadModel = Flatten(name=\"flatten\")(headModel)\nheadModel = Dense(128, activation=\"relu\")(headModel)\nheadModel = Dropout(0.5)(headModel)\nheadModel = Dense(2, activation=\"softmax\")(headModel)\n# place the head FC model on top of the base model (this will become\n# the actual model we will train)\nmodel = Model(inputs=baseModel.input, outputs=headModel)\n# loop over all layers in the base model and freeze them so they will\n# *not* be updated during the first training process\nfor layer in baseModel.layers:\n    layer.trainable = False\n\nopt = Adam(lr=lr*0.01, decay=0.01)\n\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,metrics=[\"accuracy\"])\nmodel.summary()","dd0b0f3f":"# train the head of the network\nH = model.fit(train_generator,\n      steps_per_epoch=nb_train_samples \/\/ batch_size,\n      validation_data=validation_generator, \n      validation_steps=nb_validation_samples \/\/ batch_size,\n      epochs=epochs)\n\nscore = model.evaluate_generator(validation_generator,nb_validation_samples\/\/batch_size)\nprint(\" Total: \", len(validation_generator.filenames))\nprint(\"Loss: \", score[0], \"Accuracy: \", score[1])","57687846":"model.save(\"\/kaggle\/working\/xception_model.h5\")","5d0bc09b":"# from IPython.display import FileLink, FileLinks\n# FileLinks('.') #lists all downloadable files on server","5b0c9bab":"import matplotlib.pyplot as plt\nimport numpy as np\n\nN = epochs\nplt.style.use(\"ggplot\")\nplt.figure()\nplt.plot(np.arange(0, N), H.history[\"loss\"], label=\"train_loss\")\nplt.plot(np.arange(0, N), H.history[\"val_loss\"], label=\"val_loss\")\nplt.plot(np.arange(0, N), H.history[\"accuracy\"], label=\"train_acc\")\nplt.plot(np.arange(0, N), H.history[\"val_accuracy\"], label=\"val_acc\")\nplt.title(\"Training Loss and Accuracy\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\/Accuracy\")\nplt.legend(loc=\"lower left\")","bb0639b2":"def detect_and_predict_mask(frame, faceNet, maskNet):\n    # grab the dimensions of the frame and then construct a blob\n    # from it\n    (h, w) = frame.shape[:2]\n    blob = cv2.dnn.blobFromImage(frame, 1.0, (300, 300), (104.0, 117.0, 123.0))\n    # pass the blob through the network and obtain the face detections\n    faceNet.setInput(blob)\n    detections = faceNet.forward()\n    # initialize our list of faces, their corresponding locations,\n    # and the list of predictions from our face mask network\n    faces = []\n    locs = []\n    preds = []\n    for i in range(0, detections.shape[2]):\n        # extract the confidence (i.e., probability) associated with\n        # the detection\n        confidence = detections[0, 0, i, 2]\n        # filter out weak detections by ensuring the confidence is\n        # greater than the minimum confidence\n        if confidence > 0.5:\n            # compute the (x, y)-coordinates of the bounding box for\n            # the object\n            box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])\n            (startX, startY, endX, endY) = box.astype(\"int\")\n            # ensure the bounding boxes fall within the dimensions of\n            # the frame\n            \n            if(startX>w or startY>h or endX>w or endY>h):\n                continue\n            (startX, startY) = (max(0, startX), max(0, startY))\n            (endX, endY) = (min(w - 1, endX), min(h - 1, endY))\n            # crop detected face out of image\n            face = frame[startY:endY, startX:endX]\n            face = cv2.resize(face, (224, 224))\n            face = img_to_array(face)\n            face = preprocess_input(face)\n            # add the face and bounding boxes to their respective\n            # lists\n            faces.append(face)\n            locs.append((startX, startY, endX, endY))\n            \n    if len(faces) > 0:\n        # for faster inference we'll make batch predictions on *all*\n        # faces at the same time rather than one-by-one predictions\n        # in the above `for` loop\n        faces = np.array(faces, dtype=\"float32\")\n        preds = maskNet.predict(faces, batch_size=32)\n        \n    else:\n        # in case the face gets obscured by the mask and doesn't get detected\n        # run the model to detect for faces with masks on the entire image\n        locs=[(20, 20, w-20, h-20)]\n        face=frame\n        face = cv2.resize(face, (224, 224))\n        face = img_to_array(face)\n        face = preprocess_input(face)\n        faces = np.array([face], dtype=\"float32\")\n        preds = maskNet.predict(faces, batch_size=32)\n        \n        \n    return (locs, preds)\n\n    \ndef resize(image, width=None, height=None, inter=cv2.INTER_AREA):\n    # initialize the dimensions of the image to be resized and\n    # grab the image size\n    dim = None\n    (h, w) = image.shape[:2]\n\n    # if both the width and height are None, then return the\n    # original image\n    if width is None and height is None:\n        return image\n\n    # check to see if the width is None\n    if width is None:\n        # calculate the ratio of the height and construct the\n        # dimensions\n        r = height \/ float(h)\n        dim = (int(w * r), height)\n\n    # otherwise, the height is None\n    else:\n        # calculate the ratio of the width and construct the\n        # dimensions\n        r = width \/ float(w)\n        dim = (width, int(h * r))\n\n    # resize the image\n    resized = cv2.resize(image, dim, interpolation=inter)\n\n    # return the resized image\n    return resized\n","7638ffeb":"import os\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom IPython.display import Image, display\nfrom tensorflow.keras.preprocessing.image import img_to_array\nfrom tensorflow.keras.applications.xception import preprocess_input\n\nsrc_path=\"\/kaggle\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images\/\"\nfaceNet = cv2.dnn.readNet(\"\/kaggle\/input\/face-detection-model\/deploy.prototxt.txt\", \"\/kaggle\/input\/face-detection-model\/res10_300x300_ssd_iter_140000.caffemodel\")\ncount=0\n\noutput=[]\nfor file in os.listdir(src_path):\n    name=int(file.split(\".\")[0])\n    if(name<1801):\n        count+=1\n        print(count)\n        image=cv2.imread(src_path+file)        \n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        \n        print(file)\n        (locs, preds) = detect_and_predict_mask(image, faceNet, model)\n\n        flag=0\n        for (box, pred) in zip(locs, preds):\n            # unpack the bounding box and predictions\n            flag=1\n            (startX, startY, endX, endY) = box\n            (withoutMask,mask) = pred\n            # determine the class label and color we'll use to draw\n            # the bounding box and text\n            label = \"face_with_mask\" if mask > withoutMask else \"face_no_mask\"\n            color = (0, 255, 0) if label == \"face_with_mask\" else (0, 0, 255)\n            # include the probability in the label\n            # display the label and bounding box rectangle on the output\n            # frame\n            cv2.putText(image, label, (startX, startY - 10),\n                cv2.FONT_HERSHEY_SIMPLEX, 1.05, color, 2)\n            cv2.rectangle(image, (startX, startY), (endX, endY), color, 3)\n            output.append([file,startX,startY,endX,endY,label])\n            \n        if(count<15):\n            plt.figure()\n            plt.imshow(image)\n\n        print(label)\n","8a9d63ba":"print(output[:10])","061a16dc":"import csv\nwith open(\"\/kaggle\/working\/submission.csv\",\"w+\") as my_csv:\n    csvWriter = csv.writer(my_csv,delimiter=',')\n    csvWriter.writerow([\"name\",\"x1\",\"x2\",\"y1\",\"y2\",\"classname\"])\n    csvWriter.writerows(output)","b2001353":"import pandas as pd\n\ndata=pd.read_csv(\"\/kaggle\/working\/submission.csv\")\ndata.head()","ee1fc3c4":"## Model Defenition","1df4043c":"## Write Results to submission.csv","e91febf9":"## Visualize Training Loss and Accuracy","562de4ba":"## Data Preprocessing","108e6d89":"## Setting up ImageDataGenerator","1993e1a4":"## Testing the Model","ec8e4a21":"## Training the Model"}}