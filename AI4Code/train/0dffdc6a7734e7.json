{"cell_type":{"90788acc":"code","a57b1309":"code","be0c5953":"code","e789f719":"code","919b50b2":"code","c560aa2d":"code","ea0a05dc":"code","317592bf":"code","3932a14c":"code","c206b8f6":"code","126a200e":"code","b19419a1":"code","d788ff4b":"code","c8418d04":"code","7c42329a":"code","99a77c76":"markdown","535b6182":"markdown","558ea502":"markdown","a128c8f1":"markdown","42b58439":"markdown","ca8b7af0":"markdown","9d628a10":"markdown","98890479":"markdown","22f7c697":"markdown","50b1fe08":"markdown"},"source":{"90788acc":"!pip install datasets --no-index --find-links=file:\/\/\/kaggle\/input\/coleridge-packages\/packages\/datasets\n!pip install ..\/input\/coleridge-packages\/seqeval-1.2.2-py3-none-any.whl\n!pip install ..\/input\/coleridge-packages\/tokenizers-0.10.1-cp37-cp37m-manylinux1_x86_64.whl\n!pip install ..\/input\/coleridge-packages\/transformers-4.5.0.dev0-py3-none-any.whl","a57b1309":"import os\nimport re\nimport json\nimport time\nimport datetime\nimport random\nimport glob\nimport importlib\n\nimport numpy as np\nimport pandas as pd\n\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nrandom.seed(123)\nnp.random.seed(456)","be0c5953":"# copy my_seqeval.py to the working directory because the input directory is non-writable\n!cp \/kaggle\/input\/coleridge-packages\/my_seqeval.py .\/","e789f719":"MAX_LENGTH = 64 # max no. words for each sentence.\nOVERLAP = 20 # if a sentence exceeds MAX_LENGTH, we split it to multiple sentences with overlapping\n\nMAX_SAMPLE = None # set a small number for experimentation, set None for production.","919b50b2":"COMPUTE_EVAL = True","c560aa2d":"if COMPUTE_EVAL:\n    df = pd.read_csv('..\/input\/coleridgeinitiative-show-us-the-data\/train.csv')\n    np.random.seed(456)\n    df['split'] = np.random.randn(df.shape[0], 1)\n    \n    np.random.seed(456)\n    msk = np.random.rand(len(df)) <= 0.9\n\n    train = df[msk]\n    train2 = train\n    val = df[~msk]\nelse:\n    train_path = '..\/input\/coleridgeinitiative-show-us-the-data\/train.csv'\n    train = pd.read_csv(train_path)\n    train = train[:MAX_SAMPLE]\nprint(f'No. raw training rows: {len(train)}')","ea0a05dc":"# print(\"Length oftraining data: \", str(len(train)))\n# print(train['Id'])\n# print(train['Id'][1])\n# print(train['Id'][2])\n# print(train['Id'][3])\n# print(train['Id'][4])\n# print(train['Id'][5])\n# print(train['Id'][6])","317592bf":"train = train.groupby('Id').agg({\n    'pub_title': 'first',\n    'dataset_title': '|'.join,\n    'dataset_label': '|'.join,\n    'cleaned_label': '|'.join\n}).reset_index()\n\nprint(f'No. grouped training rows: {len(train)}')","3932a14c":"paper_train_folder = '..\/input\/coleridgeinitiative-show-us-the-data\/train'\npapers = {}\nfor paper_id in train['Id'].unique():\n    with open(f'{paper_train_folder}\/{paper_id}.json', 'r') as f:\n        paper = json.load(f)\n        papers[paper_id] = paper","c206b8f6":"def clean_training_text(txt):\n    \"\"\"\n    similar to the default clean_text function but without lowercasing.\n    \"\"\"\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt)).strip()\n\ndef shorten_sentences(sentences):\n    short_sentences = []\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > MAX_LENGTH:\n            for p in range(0, len(words), MAX_LENGTH - OVERLAP):\n                short_sentences.append(' '.join(words[p:p+MAX_LENGTH]))\n        else:\n            short_sentences.append(sentence)\n    return short_sentences\n\ndef find_sublist(big_list, small_list):\n    all_positions = []\n    for i in range(len(big_list) - len(small_list) + 1):\n        if small_list == big_list[i:i+len(small_list)]:\n            all_positions.append(i)\n    \n    return all_positions\n\ndef tag_sentence(sentence, labels): # requirement: both sentence and labels are already cleaned\n    sentence_words = sentence.split()\n    \n    if labels is not None and any(re.findall(f'\\\\b{label}\\\\b', sentence)\n                                  for label in labels): # positive sample\n        nes = ['O'] * len(sentence_words)\n        for label in labels:\n            label_words = label.split()\n\n            all_pos = find_sublist(sentence_words, label_words)\n            for pos in all_pos:\n                nes[pos] = 'B'\n                for i in range(pos+1, pos+len(label_words)):\n                    nes[i] = 'I'\n\n        return True, list(zip(sentence_words, nes))\n        \n    else: # negative sample\n        nes = ['O'] * len(sentence_words)\n        return False, list(zip(sentence_words, nes))","126a200e":"cnt_pos, cnt_neg = 0, 0 # number of sentences that contain\/not contain labels\nner_data = []\n\npbar = tqdm(total=len(train))\nfor i, id, dataset_label in train[['Id', 'dataset_label']].itertuples():\n    # paper\n    paper = papers[id]\n    \n    # labels\n    labels = dataset_label.split('|')\n    labels = [clean_training_text(label) for label in labels]\n    \n    # sentences\n    sentences = set([clean_training_text(sentence) for section in paper \n                 for sentence in section['text'].split('.') \n                ])\n    sentences = shorten_sentences(sentences) # make sentences short\n    sentences = [sentence for sentence in sentences if len(sentence) > 10] # only accept sentences with length > 10 chars\n    \n    # positive sample\n    for sentence in sentences:\n        is_positive, tags = tag_sentence(sentence, labels)\n        if is_positive:\n            cnt_pos += 1\n            ner_data.append(tags)\n        elif any(word in sentence.lower() for word in ['data', 'study']): \n            ner_data.append(tags)\n            cnt_neg += 1\n    \n    # process bar\n    pbar.update(1)\n    pbar.set_description(f\"Training data size: {cnt_pos} positives + {cnt_neg} negatives\")\n\n# shuffling\nrandom.shuffle(ner_data)","b19419a1":"with open('train_ner.json', 'w') as f:\n    for row in ner_data:\n        words, nes = list(zip(*row))\n        row_json = {'tokens' : words, 'tags' : nes}\n        json.dump(row_json, f)\n        f.write('\\n')","d788ff4b":"#Default:\n# !python ..\/input\/kaggle-ner-utils\/kaggle_run_ner.py \\\n# --model_name_or_path 'bert-base-cased' \\\n# --train_file '.\/train_ner.json' \\\n# --validation_file '.\/train_ner.json' \\\n# --num_train_epochs 1 \\\n# --per_device_train_batch_size 8 \\\n# --per_device_eval_batch_size 8 \\\n# --save_steps 15000 \\\n# --output_dir '.\/output' \\\n# --report_to 'none' \\\n# --seed 123 \\\n# --do_train ","c8418d04":"#SciBERT:\n# !python ..\/input\/kaggle-ner-utils\/kaggle_run_ner.py \\\n# --model_name_or_path 'allenai\/scibert_scivocab_uncased' \\\n# --train_file '.\/train_ner.json' \\\n# --validation_file '.\/train_ner.json' \\\n# --num_train_epochs 1 \\\n# --per_device_train_batch_size 8 \\\n# --per_device_eval_batch_size 8 \\\n# --save_steps 15000 \\\n# --output_dir '.\/output' \\\n# --report_to 'none' \\\n# --seed 123 \\\n# --do_train ","7c42329a":"#RoBERTa\n!python ..\/input\/kaggle-ner-utils\/kaggle_run_ner.py \\\n--model_name_or_path 'roberta-base' \\\n--train_file '.\/train_ner.json' \\\n--validation_file '.\/train_ner.json' \\\n--num_train_epochs 1 \\\n--per_device_train_batch_size 8 \\\n--per_device_eval_batch_size 8 \\\n--save_steps 15000 \\\n--output_dir '.\/output' \\\n--report_to 'none' \\\n--seed 123 \\\n--do_train ","99a77c76":"# Import","535b6182":"# Hyper-parameters","558ea502":"# Transform data to NER format","a128c8f1":"After the tuning finishes, we should find our model in '.\/output'.","42b58439":"## Install packages","ca8b7af0":"write data to file.","9d628a10":"This notebook shows how to fine-tune a BERT model (from huggingface) for our dataset recognition task.\n\nNote that internet is needed during the training phase (for downloading the bert-base-cased model). Internet can be turned off during prediction.","98890479":"Group by publication, training labels should have the same form as expected output.","22f7c697":"# Load data","50b1fe08":"# Fine-tune a BERT model for NER"}}