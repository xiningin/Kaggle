{"cell_type":{"137f68db":"code","054728dd":"code","d2c6d944":"code","db888ea8":"code","91e2b4b2":"code","714a8f4d":"code","36db1716":"code","91918505":"markdown","24074437":"markdown","8897baf8":"markdown","3af7304e":"markdown","c4efd12d":"markdown","3d8b0f27":"markdown","5845852f":"markdown"},"source":{"137f68db":"!pip install 'kaggle-environments==0.3.2'","054728dd":"from enum import Enum\nimport random\n\nimport numpy as np\n\n\nclass Direction(Enum):\n    NORTH = 1\n    SOUTH = 2\n    EAST = 3\n    WEST = 4\n    STATIONARY = 5\n\nopposite_direction = { Direction.NORTH: Direction.SOUTH,\n                       Direction.SOUTH: Direction.NORTH,\n                       Direction.EAST: Direction.WEST,\n                       Direction.WEST: Direction.EAST,\n                       Direction.STATIONARY: None }\n\nclass Geometry():\n    def __init__(self, rows, cols = None):\n        self.rows = rows\n        self.cols = cols\n        if cols is None:\n            self.cols = rows\n\n    def to_location(self, pos):\n        return (pos \/\/ self.rows, pos % self.cols)\n\n    def all_locations(self):\n        x, y = np.indices([self.rows, self.cols])\n        return zip(x.flatten(), y.flatten())\n\n    def distance_between(self, p1, p2):\n        row_d = abs(p1[0] - p2[0])\n        row_d = min(row_d, self.rows - row_d)\n        col_d = abs(p1[1] - p2[1])\n        col_d = min(col_d, self.cols - col_d)\n        return row_d + col_d\n\n    def move_direction(self, dir, location):\n        if dir == Direction.NORTH:\n            return ((location[0] - 1) % self.rows, location[1])\n        elif dir == Direction.SOUTH:\n            return ((location[0] + 1) % self.rows, location[1])\n        elif dir == Direction.EAST:\n            return (location[0], (location[1] + 1) % self.cols)\n        elif dir == Direction.WEST:\n            return (location[0], (location[1] - 1) % self.cols)\n        else: # STATIONARY\n            return location\n\n    def order_directions(self, loc, goal):\n        dir_dist = {}\n        dirs = list(Direction)\n        random.shuffle(dirs)\n        for d in dirs:\n            new_loc = self.move_direction(d, loc)\n            dir_dist[d] = self.distance_between(new_loc, goal)\n        best_dir = min(dir_dist, key=dir_dist.get)\n        opp_dir = opposite_direction[best_dir]\n        return sorted(dir_dist, key=lambda x: (dir_dist[x], x==opp_dir))\n\n\nclass Map:\n    def __init__(self, geometry, value_list, unoccupied = 0):\n        self.geometry = geometry\n        self.unoccupied = unoccupied\n        map = np.zeros((geometry.rows, geometry.cols))\n        for pos, value in enumerate(value_list):\n            map[geometry.to_location(pos)] = value\n        self.map = map\n\n    def locations(self):\n        return zip(*(self.map > self.unoccupied).nonzero())\n\n    def __getitem__(self, key):\n        return self.map[key]\n\n    def __setitem__(self, key, value):\n        self.map[key] = value\n\n    def adjacent(self, location):\n        adj = {}\n        for dir in Direction:\n            if dir == Direction.STATIONARY:\n                continue\n            loc = self.geometry.move_direction(dir, location)\n            adj[dir] = self.map[loc]\n        return adj\n\n    def closest(self, location):\n        min_dist = float(\"inf\")\n        closest_loc = None\n        for goal in self.locations():\n            dist = self.geometry.distance_between(location, goal)\n            if dist < min_dist:\n                min_dist = dist\n                closest_loc = goal\n        return closest_loc, min_dist\n\n    def max_location(self):\n        pos = self.map.argmax()\n        return self.geometry.to_location(pos)\n\n    def discount_filter(self, center, dropoff):\n        discounted = np.zeros((self.geometry.rows, self.geometry.cols))\n        for loc in self.geometry.all_locations():\n            dist = self.geometry.distance_between(loc, center)\n            discounted[loc] = self.map[loc] * (dropoff ** dist)\n        return discounted\n","d2c6d944":"from kaggle_environments.utils import Struct\n\n\ndef create_obs_maps(obs):\n    size = int(len(obs.halite) ** 0.5)\n    geo = Geometry(size)\n    friends = [obs.player]\n    enemies = [i for i in range(len(obs.players)) if i != obs.player]\n    everyone = friends + enemies\n\n    def yards_for(player_ids):\n        for p in player_ids:\n            for item in obs.players[p][1].items():\n                yield item\n\n    def ships_for(player_ids):\n        for p in player_ids:\n            for item in obs.players[p][2].items():\n                yield item\n\n    def halite_map():\n        return Map(geo, [x if x > 0 else 0 for x in obs.halite])\n\n    def yard_map(group):\n        lst = [0] * size * size\n        for _, pos in yards_for(group):\n            lst[pos] = 1\n        return Map(geo, lst)\n\n    def ship_map(group):\n        unoccupied = -1\n        lst = [unoccupied] * size * size\n        for _, (pos, cargo) in ships_for(group):\n            lst[pos] = cargo\n        return Map(geo, lst, unoccupied=unoccupied)\n\n    def unit_owners():\n        owner = {}\n        for i in everyone:\n            for name, _ in yards_for([i]):\n                owner[name] = i\n            for name, _ in ships_for([i]):\n                owner[name] = i\n        return owner\n\n    def locations():\n        locs = {}\n        for i in everyone:\n            for name, pos in yards_for([i]):\n                locs[name] = geo.to_location(pos)\n            for name, (pos, cargo) in ships_for([i]):\n                locs[name] = geo.to_location(pos)\n        return locs\n\n    def player_scores():\n        score = [0] * len(everyone)\n        for i in everyone:\n            score[i] = obs.players[i][0]\n        return score\n\n    result = {\n        # geometry\n        \"geometry\": geo,\n        # wraparound maps\n        \"halite\": halite_map(),\n        \"friendly_yards\": yard_map(friends),\n        \"friendly_ships\": ship_map(friends),\n        \"enemy_yards\": yard_map(enemies),\n        \"enemy_ships\": ship_map(enemies),\n        # owner lookup by uid\n        \"owner_of\": unit_owners(),\n        # uid lookup by location\n        \"ship_at\": {geo.to_location(p):u for u,(p,c) in ships_for(everyone)},\n        \"yard_at\": {geo.to_location(p):u for u,p in yards_for(everyone)},\n        # location lookup by uid\n        \"location_of\": locations(),\n        # score lookup\n        \"score_of\": player_scores(),\n        # general info\n        \"step\": obs.step,\n        \"bank\": obs.players[obs.player][0],\n        \"num_yards\": len(obs.players[obs.player][1]),\n        \"num_ships\": len(obs.players[obs.player][2]),\n        # id info\n        \"my_id\": obs.player,\n        \"my_ship_ids\": [x for x, _ in ships_for(friends)],\n        \"my_yard_ids\": [x for x, _ in yards_for(friends)]\n    }\n    # use the same Struct as kaggle obs\n    return Struct(**result)\n","db888ea8":"def simple_convert(config, obsm):\n    actions = {}\n    if obsm.num_yards == 0 or obsm.num_ships \/ obsm.num_yards >= 5:\n        loc = obsm.friendly_ships.max_location()\n        fyl = obsm.friendly_yards.locations()\n        money_left = obsm.friendly_ships[loc] + obsm.bank - config.convertCost\n        can_afford = (obsm.num_ships == 1 and money_left > config.spawnCost)\n        can_afford = can_afford or (obsm.num_ships > 1 and money_left > 0)\n        if loc not in fyl and can_afford:\n            ship_id = obsm.ship_at[loc]\n            actions[ship_id] = \"CONVERT\"\n            obsm.bank += (obsm.friendly_ships[loc] - config.convertCost)\n    return actions\n\ndef ship_share(obsm, add_one = True):\n    total_num_ships = len(obsm.ship_at)\n    total_halite = obsm.halite.map.sum()\n    return total_halite \/ (total_num_ships + add_one)\n\ndef simple_spawn(config, obsm):\n    actions = {}\n    yard_exists = obsm.num_yards > 0\n    worth_it = ship_share(obsm) > config.spawnCost\n    if yard_exists and worth_it and obsm.bank > config.spawnCost:\n        yard_id = obsm.my_yard_ids[-1]\n        actions[yard_id] = \"SPAWN\"\n        obsm.bank -= config.spawnCost\n    return actions\n\ndef simple_move(obsm, goals, locations_taken):\n    actions = {}\n    for ship_id, goal_loc in goals.items():\n        ship_loc = obsm.location_of[ship_id]\n        preferred_dirs = obsm.geometry.order_directions(ship_loc, goal_loc)\n        for dir in preferred_dirs:\n            move_to = obsm.geometry.move_direction(dir, ship_loc)\n            if move_to not in locations_taken:\n                if dir != Direction.STATIONARY:\n                    actions[ship_id] = dir.name\n                locations_taken.add(move_to)\n                break\n    return actions\n\n\n","91e2b4b2":"import numpy as np\nfrom scipy.optimize import linear_sum_assignment\n\n\ndef assign_goals(obsm, ship_ids, goal_map, discount_factor, cargo_min):\n    goal_for = {}\n    needs_goal = []\n    # if it meets cargo minimum send to closest shipyard\n    for ship_id in ship_ids:\n        ship_loc = obsm.location_of[ship_id]\n        ship_cargo = obsm.friendly_ships[ship_loc]\n        if ship_cargo > cargo_min and obsm.num_yards > 0:\n            closest_yard = obsm.friendly_yards.closest(ship_loc)[0]\n            goal_for[ship_id] = closest_yard\n        else:\n            needs_goal.append(ship_id)\n    # assign goals to remaining ships with linear_sum_assignment \n    # based on distance-discounted goal map\n    assignments_matrix = np.zeros((len(needs_goal), goal_map.map.flatten().size))\n    for i, ship_id in enumerate(needs_goal):\n        loc = obsm.location_of[ship_id]\n        df = goal_map.discount_filter(loc, discount_factor)\n        assignments_matrix[i] = df.flatten()\n    ship_idx, goal_pos = linear_sum_assignment(assignments_matrix, True)\n    for idx, pos in zip(ship_idx, goal_pos):\n        ship_id = needs_goal[idx]\n        goal_loc = obsm.geometry.to_location(pos)\n        if goal_map[goal_loc] == goal_map.unoccupied:\n            # if you don't have a goal, chase the largest enemy ship\n            goal_for[ship_id] = obsm.enemy_ships.max_location()\n        else:\n            goal_for[ship_id] = goal_loc\n    return goal_for\n","714a8f4d":"def pirate_agent(obs, config):\n    actions = {}\n    obsm = create_obs_maps(obs)\n    needs_goal = obsm.my_ship_ids.copy()\n    locations_taken = set()\n    \n    # should spawn\n    spawns = simple_spawn(config, obsm)\n    for yard_id in spawns.keys():\n        locations_taken.add(obsm.location_of[yard_id])\n    actions.update(spawns)\n    \n    # should convert\n    converts = simple_convert(config, obsm)\n    for ship_id in converts.keys():\n        needs_goal.remove(ship_id)\n    actions.update(converts)\n    \n    # assign goals\n    goal_for = {}\n    miners = needs_goal[0:1]\n    goal_for.update(assign_goals(obsm, miners, obsm.halite, 0.8, 217))\n    pirates = needs_goal[len(miners):-1]\n    goal_for.update(assign_goals(obsm, pirates, obsm.enemy_ships, 0.8, 0))\n    destroyers = needs_goal[len(miners)+len(pirates):]\n    goal_for.update(assign_goals(obsm, destroyers, obsm.enemy_yards, 0.8, 0))\n    \n    # move toward goals\n    moves = simple_move(obsm, goal_for, locations_taken)\n    actions.update(moves)\n    return actions\n","36db1716":"from kaggle_environments import make\n\nenv = make(\"halite\", debug=True)\nenv.run([pirate_agent, \"random\", \"random\", \"random\"])\nenv.render(mode=\"ipython\", width=800, height=600)","91918505":"## Rules\n\nThis section contains simple rules for when to convert and spawn and for how to move around the board.  These rules do at most one convert and at most one spawn per turn.\n\nConvert Rules\n* if possible have at least one shipyard\n* have one shipyard for every 5 ships\n* build the shipyard with the ship with largest cargo\n* don't build where a shipyard already exists\n* if this is the last ship don't build a shipyard unless you will have enough halite to replace the ship\n\nSpawn Rules:\n* spawn if collecting an average amount of halite would make it worthwhile\n\nMovement Rules:\n* move closer to the goal unless you would collide with your own ship\n","24074437":"## Agent\n\nThis agent splits the ships into three different categories before assigning goals.  At least one ship is assigned to do mining.  Another ship is assigned to destroy the closest enemy shipyard.  The remaining ships are assigned to attack enemy ships.  \n\nThe aim of this agent is not to collect more halite than the other players, but to eliminate the other players from the game before the time is up.","8897baf8":"## Map-based observation\n\nNext, I converted the kaggle observation structure to a map-based observation.  This has all the same information as the normal observation, but I find it easier to work with.","3af7304e":"# Pirate Agent\n\nThe end result of this notebook is an agent whose ships almost always attack enemy ships.  It is an attempt to see if the rules that were updated as part of the kaggle-environments 0.3.2 release can be exploited.\n\nFor all of this code in a single file see https:\/\/gist.github.com\/hubcity\/36fcf4a19d1fe33f0f07b01506e6bcde\n\nThe overall structure of this notebook was inspired by the [Halite BoilerBot](https:\/\/www.kaggle.com\/superant\/halite-boilerbot).","c4efd12d":"## Gameplay\n\nThe \"random\" opponent makes for an easy win.\n","3d8b0f27":"## Map Geometry\n\nFirst, some basic classes to deal with the [wraparound](https:\/\/en.wikipedia.org\/wiki\/Wraparound_%28video_games%29) map that is the halite world.","5845852f":"## Goals\n\nShips are assigned the goal of depositing halite to the closest shipyard when they have met the cargo minimum.  The remaining ships are assigned goals using [linear_sum_assignment](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.optimize.linear_sum_assignment.html) from scipy.  (See the [assignment problem](https:\/\/en.wikipedia.org\/wiki\/Assignment_problem) and the polynomial time solution, the [Hungarian method](https:\/\/en.wikipedia.org\/wiki\/Hungarian_algorithm).)"}}