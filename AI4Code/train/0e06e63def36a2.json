{"cell_type":{"5693038f":"code","82fa99ef":"code","6f2f5bac":"code","a9b9817b":"code","4bfd2b03":"code","0ee93264":"code","7e117be2":"code","e732a2a8":"code","bd7d24b2":"code","38216e27":"code","df0e01ba":"code","037647a0":"code","70aa1e86":"code","a695e4d1":"code","3e90a112":"code","47ee7040":"code","b1e9436a":"code","77a0123d":"code","a295e85d":"code","0f7cdcb1":"code","705cd24a":"code","78b7c80d":"code","46227f58":"code","33a28160":"code","fc2c6bfb":"code","b1e334ec":"code","359e82ca":"code","a4c7c51b":"code","ff6da7d2":"code","692b903a":"code","3900982b":"code","d9a930a9":"code","91977a1a":"code","9aaba5a0":"code","fbf3735c":"code","68e6311f":"code","94e7f4a1":"code","622eb79d":"code","9bcdb2ac":"code","01697a43":"code","5b837d30":"code","5532d309":"code","920fde32":"code","3790e605":"code","e5eb62b7":"code","652f42b3":"code","21756022":"code","453f26d4":"code","f5eb18b0":"code","c94a067b":"code","c838aa6c":"code","9d5975b5":"code","a8d5d654":"code","51e29978":"code","c7db86f4":"code","52dbda51":"code","5630dcca":"code","6c500b1f":"code","bd82f34e":"code","8a929f56":"code","00d19689":"code","626a6311":"code","facad9e4":"code","c0632e6a":"code","f9b51df0":"code","481dd6bd":"code","fb7b94f0":"code","83388747":"code","dbf68fd1":"code","7af23a9e":"code","f6ed02a8":"code","5fee5f65":"code","6392c660":"code","4b6809d9":"code","2addb7cd":"code","471b9764":"code","fdef905a":"code","40001940":"code","edba19b5":"code","44fcc34a":"code","514ba8fd":"code","4ef74376":"code","68193b58":"code","3d6a478c":"code","74bac65a":"code","9d1c8c25":"code","4c70fb72":"code","45204008":"code","2a2216d2":"code","5d61ffa2":"code","2023e67e":"code","33c684e9":"code","e6a41332":"markdown","b58975e4":"markdown","76269be6":"markdown","39af2afd":"markdown","b883e236":"markdown","c8e20976":"markdown","2259674f":"markdown","7aa3f7e8":"markdown","3f8e7abb":"markdown","2efedf2e":"markdown","424775ab":"markdown","4c888e5f":"markdown","2216b63b":"markdown","b63a9472":"markdown","bde06357":"markdown","5b351c15":"markdown"},"source":{"5693038f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, \\\nroc_auc_score, classification_report, confusion_matrix, plot_roc_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import RobustScaler,MinMaxScaler\nimport matplotlib.pyplot as plt","82fa99ef":"df=pd.read_csv('..\/input\/diabetes-data-set\/diabetes.csv')","6f2f5bac":"df.head()","a9b9817b":"df.isnull().sum()","4bfd2b03":"for col in df.columns:\n    df.loc[(df[\"Outcome\"]==0) & (df[col].isnull()),col] = df[df[\"Outcome\"]==0][col].median()\n    df.loc[(df[\"Outcome\"]==1) & (df[col].isnull()),col] = df[df[\"Outcome\"]==1][col].median()","0ee93264":"df.isnull().sum()","7e117be2":"df.tail()","e732a2a8":"df.sum()","bd7d24b2":"df.loc[(df['Pregnancies'] == 12) & (df['Glucose'] == 151) & (df['Age'] == 38)  , 'Pregnancies'] = 2\ndf.loc[(df['Pregnancies'] == 12) & (df['Glucose'] == 151) & (df['Age'] == 38)  , 'Pregnancies'] = 2\ndf.loc[(df['Pregnancies'] == 12) & (df['Glucose'] == 151) & (df['Age'] == 38)  , 'Pregnancies'] = 2\n","38216e27":"df.loc[df['Pregnancies'] >= 12]\n","df0e01ba":"df.Outcome.hist()","037647a0":"#pip uninstall plotly && python -m pip install plotly","70aa1e86":"import plotly.graph_objects as go","a695e4d1":"labels = ['Non-Diabetes','Diabetes']\nfig = go.Figure(data=[go.Pie(labels=labels, values=df.Outcome.value_counts())])\nfig.show()","3e90a112":"labels = ['Non-Diabetes','Diabetes']\nfig = go.Figure([go.Bar(x=labels, y=df.Outcome.value_counts())])\nfig.show()","47ee7040":"df.Pregnancies.value_counts()","b1e9436a":"fig = go.Figure([go.Bar(x=df.Pregnancies.value_counts().index, y=df.Pregnancies.value_counts())])\nfig.update_layout(title_text='Pregnancies')\nfig.show()","77a0123d":"fig = go.Figure([go.Bar(x=df.Glucose .value_counts().index, y=df.Glucose .value_counts())])\nfig.update_layout(title_text='Overall Glucose  level')\nfig.show()","a295e85d":"fig = go.Figure([go.Bar(x=df.BloodPressure.value_counts().index, y=df.BloodPressure.value_counts())])\nfig.update_layout(title_text='Overall BloodPressure  level')\nfig.show()","0f7cdcb1":"fig = go.Figure([go.Bar(x=df.Age.value_counts().index, y=df.Age.value_counts())])\nfig.update_layout(title_text='Age')\nfig.show()","705cd24a":"fig = go.Figure([go.Bar(x=df.BMI.value_counts().index, y=df.BMI.value_counts(),marker_color='crimson')])\nfig.update_layout(title_text='BMI')\nfig.show()","78b7c80d":"corr = df[df.columns].corr()\nsns.heatmap(corr, cmap=\"YlGnBu\", annot = True)\nplt.title('Heatmap for Correlation of Parameters')\nsns.set(rc={'figure.figsize':(30,30)})\nplt.show()","46227f58":"df.hist(figsize=(17,12))\nplt.show()","33a28160":"df.describe().T","fc2c6bfb":"Q1 = df[\"BloodPressure\"].quantile(0.25)\nQ3 = df[\"BloodPressure\"].quantile(0.75)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR","b1e334ec":"lower","359e82ca":"upper","a4c7c51b":"df[(df[\"BloodPressure\"] > upper)].any(axis=None)","ff6da7d2":"for feature in df:\n    print(feature)","692b903a":"for feature in df:\n    \n    Q1 = df[feature].quantile(0.05)\n    Q3 = df[feature].quantile(0.95)\n    IQR = Q3 - Q1\n    lower = Q1 - 1.5*IQR\n    upper = Q3 + 1.5*IQR\n    \n    if df[(df[feature] > upper)].any(axis=None):\n        print(feature,\"yes\")\n    else:\n        print(feature, \"no\")","3900982b":"df.head()","d9a930a9":"df.shape","91977a1a":"df.hist(figsize=(17,12))\nplt.show()","9aaba5a0":"x= df.drop('Outcome',axis=1).values\ny =df.Outcome.values\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=.3,random_state=4)\n","fbf3735c":"y_train.shape","68e6311f":"x_test.shape","94e7f4a1":"y_test.shape","622eb79d":"df.count()","9bcdb2ac":"from sklearn.metrics import roc_curve\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split\n\n","01697a43":"from sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression","5b837d30":"knn = KNeighborsClassifier(n_neighbors=20, weights='uniform')\nknn.fit(x_train,y_train)","5532d309":"print(knn.score(x_train,y_train))","920fde32":"print(knn.score(x_test,y_test))","3790e605":"confusion_matrix(y_test,knn.predict(x_test))","e5eb62b7":"gs_log_pred=knn.predict(x_test)\n\n# Print confusion matrix for Logistic regression.\ngs_logreg_matrix = confusion_matrix(y_test,gs_log_pred)\nsns.set(font_scale=1.3)\nplt.subplots(figsize=(3, 3))\nsns.heatmap(gs_logreg_matrix,annot=True, cbar=False, cmap='twilight',linewidth=0.5,fmt=\"d\")\n","652f42b3":"prediction_lr=knn.predict(x_test)\nprint('__________________________')\nprint('\\n clasification report:\\n', classification_report(y_test,prediction_lr))\nprint('__________________________')","21756022":"from sklearn import svm, datasets\nfrom sklearn.model_selection import GridSearchCV","453f26d4":"k_range = list(range(1, 31))","f5eb18b0":"weight_options = ['uniform', 'distance']","c94a067b":"param_grid = dict(n_neighbors=k_range, weights=weight_options)","c838aa6c":"grid = GridSearchCV(knn, param_grid, cv=50, scoring='accuracy')","9d5975b5":"grid.fit(x, y)","a8d5d654":"print(grid.best_score_)","51e29978":"print(grid.best_params_)","c7db86f4":"print(grid.best_estimator_)","52dbda51":"\nknn.predict([[10,150,50,30,100,30.5,0.5,25]])\n","5630dcca":"knn.fit(x,y)\nknn.predict([[1,85,66,29,0,26.6,0.351,33]])\n","6c500b1f":"user = [[1,85,66,29,0,26.6,0.351,33]]","bd82f34e":"\n\nif knn.predict(user) == 1 :\n    print (\"sssss\")\nelse :\n    print (\"yyyyyyy\")","8a929f56":"gs_log_pred=grid.predict(x_test)\n\n# Print confusion matrix for Logistic regression.\ngs_logreg_matrix = confusion_matrix(y_test,gs_log_pred)\nsns.set(font_scale=1.3)\nplt.subplots(figsize=(3, 3))\nsns.heatmap(gs_logreg_matrix,annot=True, cbar=False, cmap='twilight',linewidth=0.5,fmt=\"d\")\n","00d19689":"svm_alg = SVC()\nsvm_alg.fit(x_train,y_train)","626a6311":"print(svm_alg.score(x_train,y_train))\nprint(svm_alg.score(x_test,y_test))","facad9e4":"confusion_matrix(y_test,svm_alg.predict(x_test))\n","c0632e6a":"gs_log_pred=svm_alg.predict(x_test)\n\n# Print confusion matrix for Logistic regression.\ngs_logreg_matrix = confusion_matrix(y_test,gs_log_pred)\nsns.set(font_scale=1.3)\nplt.subplots(figsize=(3, 3))\nsns.heatmap(gs_logreg_matrix,annot=True, cbar=False, cmap='twilight',linewidth=0.5,fmt=\"d\")\n","f9b51df0":"prediction_lr=svm_alg.predict(x_test)\nprint('__________________________')\nprint('\\n clasification report:\\n', classification_report(y_test,prediction_lr))\nprint('__________________________')","481dd6bd":"from xgboost import XGBClassifier","fb7b94f0":"xgb = XGBClassifier(objective= 'binary:logistic', learning_rate=0.3, max_depth=3)","83388747":"xgb.fit(x_train,y_train)","dbf68fd1":"xgb.score(x_train,y_train)","7af23a9e":"xgb.score(x_test,y_test)","f6ed02a8":"prediction_lr=xgb.predict(x_test)\nprint('__________________________')\nprint('\\n clasification report:\\n', classification_report(y_test,prediction_lr))\nprint('__________________________')","5fee5f65":"gs_log_pred=xgb.predict(x_test)\n\n# Print confusion matrix for Logistic regression.\ngs_logreg_matrix = confusion_matrix(y_test,gs_log_pred)\nsns.set(font_scale=1.3)\nplt.subplots(figsize=(3, 3))\nsns.heatmap(gs_logreg_matrix,annot=True, cbar=False, cmap='twilight',linewidth=0.5,fmt=\"d\")\n","6392c660":"from sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nsteps = [('scalar', StandardScaler()),\n         ('SVM', SVC())]\npipeline = Pipeline(steps)\nparameters = {'SVM__C':[1, 10, 100],\n              'SVM__gamma':[0.1, 0.01]}\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state = 1)\ncv = GridSearchCV(pipeline,param_grid=parameters,cv=3)\ncv.fit(x_train,y_train)\n\ny_pred = cv.predict(x_test)\n\nprint(\"Accuracy: {}\".format(cv.score(x_test, y_test)))\nprint(\"Tuned Model Parameters: {}\".format(cv.best_params_))","4b6809d9":"prediction_lr=cv.predict(x_test)\nprint('__________________________')\nprint('\\n clasification report:\\n', classification_report(y_test,prediction_lr))\nprint('__________________________')","2addb7cd":"cv.score(x_train,y_train)","471b9764":"cv.score(x_test,y_test)","fdef905a":"gs_log_pred=cv.predict(x_test)\n\n# Print confusion matrix for Logistic regression.\ngs_logreg_matrix = confusion_matrix(y_test,gs_log_pred)\nsns.set(font_scale=1.3)\nplt.subplots(figsize=(3, 3))\nsns.heatmap(gs_logreg_matrix,annot=True, cbar=False, cmap='twilight',linewidth=0.5,fmt=\"d\")\n","40001940":"from sklearn.linear_model import LinearRegression\n","edba19b5":"model = LinearRegression()\nmodel.fit(x_train, y_train)\n","44fcc34a":"model.score(x_train,y_train)","514ba8fd":"model.score(x_test,y_test)","4ef74376":"from sklearn.linear_model import  TheilSenRegressor\nmodel = TheilSenRegressor()\nmodel.fit(x_train, y_train)\n\ny_pred = model.predict(x_test)\naccuracy = model.score(x_test, y_test)\nprint(accuracy)","68193b58":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OrdinalEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OrdinalEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nfrom sklearn.metrics import mean_squared_error, r2_score","3d6a478c":"from sklearn.ensemble import GradientBoostingRegressor\n\n# Define preprocessing for numeric columns (scale them)\nnumeric_features = [0,1,2,3,4,5,6,7]\nnumeric_transformer = Pipeline(steps=[\n    ('scaler', StandardScaler())])\n\n# Combine preprocessing steps\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n    ])\n\n# Create preprocessing and training pipeline\npipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                           ('regressor', GradientBoostingRegressor())])\n\n\n# fit the pipeline to train a linear regression model on the training set\nmodel_gb = pipeline.fit(x_train, (y_train))\nprint (model_gb)\n\n# Evaluate the model using the test data\npredictions = model_gb.predict(x_test)\nmse = mean_squared_error(y_test, predictions)\nprint(\"MSE:\", mse)\nrmse = np.sqrt(mse)\nprint(\"RMSE:\", rmse)\nr2 = r2_score(y_test, predictions)\nprint(\"R2:\", r2)\n\n","74bac65a":"from sklearn.ensemble import RandomForestClassifier\n\n\nrf_params = {\"n_estimators\" :[100,200,500,1000], \n             \"max_features\": [3,5,7], \n             \"min_samples_split\": [2,5,10,30],\n            \"max_depth\": [3,5,8,None]}\n\nrf_model = RandomForestClassifier(random_state = 12345)\n\ngs_cv = GridSearchCV(rf_model, \n                    rf_params,\n                    cv = 10,\n                    n_jobs = -1,\n                    verbose = 2).fit(x, y)","9d1c8c25":"gs_cv.best_params_","4c70fb72":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nrf_tuned = RandomForestClassifier(**gs_cv.best_params_)","45204008":"rf_tuned = rf_tuned.fit(x,y)","2a2216d2":"cross_val_score(rf_tuned, x, y, cv = 10).mean()","5d61ffa2":"rf_tuned.score(x_train,y_train)","2023e67e":"rf_tuned.score(x_test,y_test)","33c684e9":"gs_log_pred=rf_tuned.predict(x_test)\n\n# Print confusion matrix for Logistic regression.\ngs_logreg_matrix = confusion_matrix(y_test,gs_log_pred)\nsns.set(font_scale=1.3)\nplt.subplots(figsize=(3, 3))\nsns.heatmap(gs_logreg_matrix,annot=True, cbar=False, cmap='twilight',linewidth=0.5,fmt=\"d\")\n","e6a41332":"# xg Bost","b58975e4":"# svc","76269be6":"# KNN Algorithm","39af2afd":"# tunning data using grid search","b883e236":"________________","c8e20976":"# SVM using Grid serch","2259674f":"# Visulaization ","7aa3f7e8":"# modeling ","3f8e7abb":"# Modeling","2efedf2e":"# KNN Grid search ","424775ab":"____________________________________________","4c888e5f":"# TheilSen Regressorion","2216b63b":"# GradientBoosting Regressorion","b63a9472":"# Random forest Classifier","bde06357":"Handling outliers ","5b351c15":"# Linear regression"}}