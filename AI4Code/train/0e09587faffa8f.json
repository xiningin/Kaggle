{"cell_type":{"6c23eb98":"code","a7e7083c":"code","b3392d5e":"code","d7d6f1fc":"code","b8932cf3":"code","4147da7e":"code","6e470ae8":"code","23a966f2":"code","28bc6042":"code","6c23571f":"code","187ca988":"code","b8c92aca":"code","555feff7":"code","a7da30d1":"code","bbbcfb9c":"code","d8dcae07":"code","6f9eaa10":"code","7afc4b2c":"code","6008da0c":"code","e2e4dce6":"markdown","ce1c6962":"markdown","31d4a8c9":"markdown","0a949889":"markdown","b246922e":"markdown","f49a8898":"markdown","aa518e10":"markdown","8bec4dc2":"markdown","7c1a1e76":"markdown","8632ca45":"markdown","263585e6":"markdown","6d677bea":"markdown","40b89bda":"markdown","c52cc9a9":"markdown","415ec04d":"markdown","0dd5cf37":"markdown","aa6d10da":"markdown","167f0cd9":"markdown","ba4bed1f":"markdown","8d90ed23":"markdown","1c8030ba":"markdown","5c35caa3":"markdown"},"source":{"6c23eb98":"# Import Python libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime as dt\n\n# Silence the warning 'SettingWithCopyWarning'\npd.options.mode.chained_assignment = None","a7e7083c":"# Create Pandas dataframe with only 5 Million rows\nnyc_parking_tickets = pd.read_csv(\"..\/input\/nyc-parking-tickets\/Parking_Violations_Issued_-_Fiscal_Year_2017.csv\",nrows=5000000)","b3392d5e":"# View top 5 rows\nnyc_parking_tickets.head(5)","d7d6f1fc":"# View shape of dataframe (rows,columns)\nnyc_parking_tickets.shape","b8932cf3":"# Change column names\nnyc_parking_tickets.columns = ['SummonsNumber', 'PlateID', 'RegistrationState', 'PlateType', 'IssueDate', 'ViolationCode', 'VehicleBodyType', 'VehicleMake', 'IssuingAgency', 'StreetCode1', 'StreetCode2', 'StreetCode3','VehicleExpirationDate', 'ViolationLocation', 'ViolationPrecinct','IssuerPrecinct', 'IssuerCode', 'IssuerCommand', 'IssuerSquad', 'ViolationTime', 'TimeFirstObserved', 'ViolationCounty', 'ViolationInFrontOfOrOpposite', 'HouseNumber', 'StreetName', 'IntersectingStreet', 'DateFirstObserved', 'LawSection', 'SubDivision', 'ViolationLegalCode', 'DaysParkingInEffect', 'FromHoursInEffect', 'ToHoursInEffect', 'VehicleColor', 'UnregisteredVehicle', 'VehicleYear', 'MeterNumber', 'FeetFromCurb', 'ViolationPostCode', 'ViolationDescription', 'NoStandingOrStoppingViolation', 'HydrantViolation', 'DoubleParkingViolation']\n\n# Drop columns with > 80% null values\ncolumns_to_drop = ((nyc_parking_tickets.isna().sum()\/len(nyc_parking_tickets))*100) > 80\nnyc_parking_tickets.drop(columns_to_drop[columns_to_drop.values == True].index.tolist(),axis=1,inplace=True)\n\n# Convert 'IssueDate' to datetime\nnyc_parking_tickets['IssueDate'] = pd.to_datetime(nyc_parking_tickets['IssueDate'],format='%m\/%d\/%Y',errors='coerce')\n\n# Replace '99' in RegistrationState column by null\nnyc_parking_tickets['RegistrationState'] = nyc_parking_tickets['RegistrationState'].replace({'99': None})\n\n# Replace '999' in PlateType column by null\nnyc_parking_tickets['PlateType'] = nyc_parking_tickets['PlateType'].replace({'999': None})\n\n# Convert incorrent values (88888888, etc.) in 'VehicleExpirationDate' column to Null\nincorrect_values = nyc_parking_tickets[(nyc_parking_tickets['VehicleExpirationDate'] > 20990101)]['VehicleExpirationDate'].unique().tolist()\nnyc_parking_tickets[nyc_parking_tickets['VehicleExpirationDate'].isin(incorrect_values)] = None\n\n# Convert 'ViolationTime' column to stirng and convert values not containing 'A\/P' (ambiguous) to null\nnyc_parking_tickets['ViolationTime'] = nyc_parking_tickets['ViolationTime'].astype('str')\nViolationTime_ambiguous = nyc_parking_tickets[~nyc_parking_tickets['ViolationTime'].str.contains('P|A')]['ViolationTime'].unique().tolist()\nnyc_parking_tickets[nyc_parking_tickets['ViolationTime'].isin(ViolationTime_ambiguous)] = None\n\n# Fix 'DateFirstObserved' column\n    # Replace NaN values with 0\n    # Replace 0 with null\n    # Convert the column to datetime\nnyc_parking_tickets['DateFirstObserved'] = nyc_parking_tickets['DateFirstObserved'].replace({np.NaN:0}).astype('int') \nnyc_parking_tickets['DateFirstObserved'] = nyc_parking_tickets['DateFirstObserved'].replace({0:None})\nnyc_parking_tickets['DateFirstObserved'] = pd.to_datetime(nyc_parking_tickets['DateFirstObserved'],format='%Y%m%d',errors='coerce')\n\n# Drop duplicates based on 'SummonsNumber' column as summon numbers should be unique\nnyc_parking_tickets.drop_duplicates(subset = ['SummonsNumber'], inplace = True)","4147da7e":"# Issuing agency vs Summons dataframe\nia_plot = nyc_parking_tickets.groupby(['IssuingAgency']).count()['SummonsNumber'].sort_values(ascending=False).reset_index()\n# Bar plot\nsns.barplot(x = 'IssuingAgency', y = 'SummonsNumber', data = ia_plot)","6e470ae8":"# Vehicle registration state (Top 10) vs Summons\nnyc_parking_tickets.groupby(['RegistrationState']).count()['SummonsNumber'].sort_values(ascending=False).reset_index().head(10)","23a966f2":"# Plate Type (Top 10) vs Summons\nnyc_parking_tickets.groupby(['PlateType']).count()['SummonsNumber'].sort_values(ascending=False).reset_index().head(10)","28bc6042":"# Plate ID (Top 5) vs Summons\nnyc_parking_tickets.groupby(['PlateID']).count()['SummonsNumber'].sort_values(ascending=False).reset_index().head(5)","6c23571f":"# Issue date time series plot\nissue_date = nyc_parking_tickets.loc[:,['IssueDate','SummonsNumber']].groupby('IssueDate').count()['SummonsNumber'].reset_index()\nsns.relplot(x = 'IssueDate', y = 'SummonsNumber', data = issue_date, kind = \"line\")\nplt.xticks(rotation = 45)","187ca988":"# Top 10 Violations dataframe\ntop_10_violations = nyc_parking_tickets.loc[:,['ViolationDescription','SummonsNumber']].groupby(['ViolationDescription']).count()['SummonsNumber'].reset_index().sort_values('SummonsNumber',ascending = False).head(10)\n# Bar plot\nsns.barplot(x = 'SummonsNumber', y = 'ViolationDescription', data = top_10_violations)","b8c92aca":"# Violation Time (Top 10) vs Summons\nnyc_parking_tickets.groupby(['ViolationTime']).count()['SummonsNumber'].sort_values(ascending=False).reset_index().head(10)","555feff7":"# Vehicle County vs Summons\nvc_plot = nyc_parking_tickets.groupby(['ViolationCounty']).count()['SummonsNumber'].sort_values(ascending=False).reset_index()\n# Bar plot\nsns.barplot(x = 'ViolationCounty', y = 'SummonsNumber', data = vc_plot)","a7da30d1":"# Vehicle Body Type (Top 10) vs Summons\nnyc_parking_tickets.groupby(['VehicleBodyType']).count()['SummonsNumber'].sort_values(ascending=False).reset_index().head(10)","bbbcfb9c":"# Vehicle Make (Top 10) vs Summons\nnyc_parking_tickets.groupby(['VehicleMake']).count()['SummonsNumber'].sort_values(ascending=False).reset_index().head(10)","d8dcae07":"# Vehicle Make + Body Type (Top 5) vs Summons\nnyc_parking_tickets.groupby(['VehicleMake','VehicleBodyType']).count()['SummonsNumber'].sort_values(ascending=False).reset_index().head(5)","6f9eaa10":"# Vehicle Location vs Summons\nnyc_parking_tickets.groupby(['ViolationLocation']).count()['SummonsNumber'].sort_values(ascending=False).reset_index().head(10)","7afc4b2c":"# Registration State, Violation Description & Summons Number\nnyc_parking_tickets.loc[:,['RegistrationState','ViolationDescription','SummonsNumber']].groupby(['RegistrationState','ViolationDescription']).count()['SummonsNumber'].reset_index().sort_values('SummonsNumber',ascending = False).head(5)","6008da0c":"# Time series plot (ViolationTime vs Summons)\n\n# Concatenate 'M' to 'ViolationTime' column \nnyc_parking_tickets['ViolationTime'] = nyc_parking_tickets['ViolationTime'] + 'M'\n# Convert the column to datetime\nnyc_parking_tickets['ViolationTime'] = pd.to_datetime(nyc_parking_tickets['ViolationTime'],format='%I%M%p',errors='coerce')\n# Extract hour from the 'ViolationTime' column \nnyc_parking_tickets['ViolationTime'] = nyc_parking_tickets['ViolationTime'].dt.strftime('%H')\n# Prepare dataframe for time series plot\ntime_series_summons = nyc_parking_tickets.groupby(['ViolationTime']).count()['SummonsNumber'].reset_index().sort_values(['ViolationTime'])\n\n# Time series plot using seaborn\nsns.relplot(x = \"ViolationTime\", y = \"SummonsNumber\", data = time_series_summons, kind = \"line\", ci = None)\nplt.xlabel(\"Hour of day (24 hours format)\")\nplt.xticks(rotation = 90)\nplt.ylabel(\"Summons Count\")\nplt.show()","e2e4dce6":"The general violation location number **19** was issued the maximum number of tickets","ce1c6962":"Agency with code **T** was issued the maximum number of summons","31d4a8c9":"## III. Cleaning","0a949889":"## IV. Analysis","b246922e":"The vehicle plate type with the highest number of summons was **PAS**","f49a8898":"**SUBN** vehicle body type accounted for the maximum number of violations ","aa518e10":"![](https:\/\/i.ytimg.com\/vi\/0QI4eG8D0Ic\/maxresdefault.jpg)","8bec4dc2":"## I. Environment Setup","7c1a1e76":"From the above time series plot, we can observe that the peak of issuing tickets occured between the **September to November 2016** peiod (Time duration - July, 2016 to July, 2017) ","8632ca45":"In this notebook, we shall be analysing the data that NYC Department of Finance collects on every **parking ticket** issued in the city to deliver insights to the governing body (let's just imagine one \ud83d\ude0b)\n\nYou can find more details about the dataset [**here**](https:\/\/www.kaggle.com\/new-york-city\/nyc-parking-tickets)\n\nThe notebook consists of four parts - **Environment Setup**, **Reading Data**, **Cleaning** & **Analysis**\n\nWe shall be using the first **5 Million** rows from the original dataset for our analysis\n\n*So let's get started!*","263585e6":"The vehicle registration state with the highest number of summons was **New York**","6d677bea":"From the above table, it is quite evident that the maximum number of violations occured **between 8 AM to 12 PM**","40b89bda":"**Toyota** vehicles of body type **4DSD** accounted for the maximum number of summons","c52cc9a9":"This brings us to the end of the notebook\n\nIn this Kaggle notebook, we read 5 Million rows from the NYC Parking dataset, performed data wrangling and later analysed to deliver insights\n\nSince I'm a beginner, I would love to have your valuable feedback and suggestions so that I can keep on improving\n\nAlso, if you liked my work, please consider upvoting this notebook, would mean a lot to me!\n\nThank you\ud83d\ude04","415ec04d":"The maximum number of tickets were issued for **overspeeding near school premises** violation","0dd5cf37":"The highest number of tickets were issued to **Toyota** vehicles","aa6d10da":"From the above line plot, we can see that the peak for the maximum number of summons in a day occured around **9 AM**","167f0cd9":"## II. Reading Data","ba4bed1f":"The maximum number of tickets were issued for **overspeeding near school premises** violation with vehicles registered in NY ","8d90ed23":"The maximum number of violations occured in the county of **New York**","1c8030ba":"# New York City: Parking Tickets Analysis\n![New York City](https:\/\/blog-www.pods.com\/wp-content\/uploads\/2019\/04\/MG_1_1_New_York_City-1.jpg)","5c35caa3":"Amongst the different registered vehicle plate IDs, the maximum number of tickets were issued to **no-plate-id (blank plates)**"}}