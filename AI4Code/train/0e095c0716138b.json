{"cell_type":{"5726a38f":"code","84f74182":"code","53457c31":"code","36880a25":"code","1c81d7d9":"code","26fbb4a5":"code","602d2d89":"code","1f7e35b1":"code","98c1f958":"code","33c500c2":"code","989a70c1":"code","79f1e913":"code","016aa26f":"code","a48c5e8d":"code","b7d88c0a":"code","c104248b":"code","bd33a735":"code","1fb79317":"code","41ac56e3":"code","a7a15a27":"code","1d4b3342":"code","31e4c0de":"code","ad2d0655":"code","a1f4eefb":"markdown"},"source":{"5726a38f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport warnings\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","84f74182":"data = pd.read_csv('..\/input\/voice.csv')","53457c31":"data.head()","36880a25":"data.info()","1c81d7d9":"data.describe()","26fbb4a5":"sns.countplot(x=\"label\", data=data)\ndata.loc[:,'label'].value_counts()","602d2d89":"color_list = ['red' if i=='male' else 'green' for i in data.loc[:,'label']]\npd.plotting.scatter_matrix(data.loc[:, data.columns != 'label'],\n                          c=color_list,\n                          figsize=[25,25],\n                          diagonal='hist',\n                          alpha=0.5,\n                          s = 200,\n                          marker = 'x',\n                          edgecolor=\"black\")\nplt.show()\n","1f7e35b1":"data.label = [1 if each == \"male\" else 0 for each in data.label]\nprint(data.info())","98c1f958":"y = data.label.values\nx_data = data.drop([\"label\"],axis=1)","33c500c2":"# Normalization\nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values","989a70c1":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state= 42)","79f1e913":"x_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T","016aa26f":"print(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)\n","a48c5e8d":"# lets initialize parameters\n# So what we need is dimension, that is, the number of features as a parameter for our initialize method(def)\n# dimension=2534\n#initial weights=0.01, initial bias=0\ndef initialize_weights_and_bias(dimension):\n    \n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b\n","b7d88c0a":"# w,b = initialize_weights_and_bias(2534)\ndef sigmoid(z):\n    \n    y_head = 1\/(1+ np.exp(-z))\n    return y_head\n","c104248b":"def forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]      # x_train.shape[1]  is for scaling\n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 # x_train.shape[1]  is for scaling\n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    \n    return cost,gradients\n\n","bd33a735":"# Updating(learning) parameters\ndef update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","1fb79317":"#prediction \ndef predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","41ac56e3":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 30\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # Print test Errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \n   ","a7a15a27":"# num_iterations = 100\nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 100)","1d4b3342":"# num_iterations = 200\nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 200)","31e4c0de":"# num_iterations = 300\nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 300)","ad2d0655":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\n\nlr.fit(x_train.T,y_train.T)\nprint(\"test accuracy {}\".format(lr.score(x_test.T,y_test.T)))","a1f4eefb":"**Gender Classification**"}}