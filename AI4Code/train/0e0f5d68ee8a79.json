{"cell_type":{"da0ea52a":"code","3ba49666":"code","f80a4c12":"code","8e8e3d14":"code","e0d6a054":"code","be36ff0d":"code","a5db6a4a":"code","f784f332":"code","02624e35":"code","14366a78":"markdown","6b6a260e":"markdown","12c67c8b":"markdown","8aedb7da":"markdown"},"source":{"da0ea52a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3ba49666":"import numpy as np\nfrom scipy import integrate , optimize\nimport matplotlib.pyplot as plt\nimport warnings\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nwarnings.filterwarnings(\"ignore\")\n\nconfirmed_cases = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\nconfirmed_deaths = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")\nrecovered = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")\n\n# TURKEY DATA\nturkey_total_case = confirmed_cases[confirmed_cases[\"Country\/Region\"]==\"Turkey\"]\nturkey_total_deaths = confirmed_deaths[confirmed_deaths[\"Country\/Region\"]==\"Turkey\"]\nturkey_recovered = recovered[recovered[\"Country\/Region\"]==\"Turkey\"]\n\nturkey_infected = (turkey_total_case.T[\"1\/22\/20\":] - turkey_recovered.T[\"1\/22\/20\":] - turkey_total_deaths.T[\"1\/22\/20\":])\nturkey_recovered_death =(turkey_recovered.T[\"3\/11\/20\":] + turkey_total_deaths.T[\"3\/11\/20\":])\n\nturkey_index_1 = turkey_recovered_death.index[44:62]\nturkey_index = turkey_recovered_death.index[:]\n\nturkey_infected=turkey_infected[turkey_infected[213]>0].reset_index().drop(\"index\",axis=1).rename(columns={213:\"infected\"})\nturkey_recovered_death = turkey_recovered_death[turkey_recovered_death[213]>-1].reset_index().drop(\"index\",axis=1).rename(columns={213:\"rec\"})\n\nturkey = pd.DataFrame(data=[turkey_infected.infected,turkey_recovered_death.rec]).T\nturkey_all = turkey.copy()\nturkey = turkey.loc[44:61]\n\n#GERMANY DATA\ngerman_total_case = confirmed_cases[confirmed_cases[\"Country\/Region\"]==\"Germany\"]\ngerman_total_deaths = confirmed_deaths[confirmed_deaths[\"Country\/Region\"]==\"Germany\"]\ngerman_recovered = recovered[recovered[\"Country\/Region\"]==\"Germany\"]\n\ngerman_infected = pd.DataFrame(german_total_case.T[\"1\/22\/20\":][120] - german_recovered.T[\"1\/22\/20\":][112] - german_total_deaths.T[\"1\/22\/20\":][120])\ngerman_recovered_death =pd.DataFrame(german_recovered.T[\"1\/22\/20\":][112] + german_total_deaths.T[\"1\/22\/20\":][120])\n\ngerman_index_1 = german_recovered_death.index[81:111]\ngerman_index = german_recovered_death.index[:]\n\ngerman_infected=german_infected[german_infected[0]>-1].reset_index().drop(\"index\",axis=1).rename(columns={0:\"infected\"})\ngerman_recovered_death = german_recovered_death[german_recovered_death[0]>-1].reset_index().drop(\"index\",axis=1).rename(columns={0:\"rec\"})\n\ngerman = pd.DataFrame(data=[german_infected.infected,german_recovered_death.rec]).T\ngerman_all = german.copy()\ngerman = german.loc[81:110]\n\n#SPAIN DATA\nspain_total_case = confirmed_cases[confirmed_cases[\"Country\/Region\"]==\"Spain\"]\nspain_total_deaths = confirmed_deaths[confirmed_deaths[\"Country\/Region\"]==\"Spain\"]\nspain_recovered = recovered[recovered[\"Country\/Region\"]==\"Spain\"]\n\nspain_infected = pd.DataFrame(spain_total_case.T[\"1\/22\/20\":][201] - spain_recovered.T[\"1\/22\/20\":][199] - spain_total_deaths.T[\"1\/22\/20\":][201])\nspain_recovered_death =pd.DataFrame(spain_recovered.T[\"1\/22\/20\":][199] + spain_total_deaths.T[\"1\/22\/20\":][201])\n\nspain_index_1 = spain_recovered_death.index[93:111]\nspain_index = spain_recovered_death.index[:]\n\nspain_infected=spain_infected[spain_infected[0]>-1].reset_index().drop(\"index\",axis=1).rename(columns={0:\"infected\"})\nspain_recovered_death = spain_recovered_death[spain_recovered_death[0]>-1].reset_index().drop(\"index\",axis=1).rename(columns={0:\"rec\"})\n\nspain = pd.DataFrame(data=[spain_infected.infected,spain_recovered_death.rec]).T\nspain_all = spain.copy()\nspain = spain.loc[93:110]\n\n#ITALY DATA\nitaly_total_case = confirmed_cases[confirmed_cases[\"Country\/Region\"]==\"Italy\"]\nitaly_total_deaths = confirmed_deaths[confirmed_deaths[\"Country\/Region\"]==\"Italy\"]\nitaly_recovered = recovered[recovered[\"Country\/Region\"]==\"Italy\"]\n\nitaly_infected = pd.DataFrame(italy_total_case.T[\"1\/22\/20\":][137] - italy_recovered.T[\"1\/22\/20\":][131] - italy_total_deaths.T[\"1\/22\/20\":][137])\nitaly_recovered_death =pd.DataFrame(italy_recovered.T[\"1\/22\/20\":][131] + italy_total_deaths.T[\"1\/22\/20\":][137])\n\nitaly_index_1 = italy_recovered_death.index[98:111]\nitaly_index = italy_recovered_death.index[:]\n\nitaly_infected=italy_infected[italy_infected[0]>-1].reset_index().drop(\"index\",axis=1).rename(columns={0:\"infected\"})\nitaly_recovered_death = italy_recovered_death[italy_recovered_death[0]>-1].reset_index().drop(\"index\",axis=1).rename(columns={0:\"rec\"})\n\nitaly = pd.DataFrame(data=[italy_infected.infected,italy_recovered_death.rec]).T\nitaly_all = italy.copy()\nitaly = italy.loc[98:110]","f80a4c12":"# GAMMAS \n#Turkey\nreq = turkey_recovered_death.loc[44:61]\nreq[\"derivative\"] = req.rec-req.rec.shift(1)\nreq[\"gamma\"] = req.shift(-1).derivative\/turkey_infected.loc[44:61].infected\ngammas = req[req.gamma<0.09].gamma\n#gammas = req.loc[44:61].gamma\nturkey_gamma = gammas.mean()\n#German\nreq = german_recovered_death.loc[26:]\nreq[\"derivative\"] = req.rec-req.rec.shift(1)\nreq[\"gamma\"] = req.shift(-1).derivative\/german_infected.loc[26:].infected\n#gammas = req[(req.gamma>0.01) & (req.gamma<0.3) ].gamma\ngammas = req.loc[81:110].gamma\ngerman_gamma = gammas.mean()\n#Spain\nreq = spain_recovered_death.loc[42:]\nreq[\"derivative\"] = req.rec-req.rec.shift(1)\nreq[\"gamma\"] = req.shift(-1).derivative\/spain_infected.loc[42:].infected\ngammas = req.loc[93:110].gamma\nspain_gamma = gammas.mean()\n#Italy\nreq = italy_recovered_death.loc[32:]\nreq[\"derivative\"] = req.rec-req.rec.shift(1)\nreq[\"gamma\"] = req.shift(-1).derivative\/italy_infected.loc[32:].infected\ngammas = req.loc[98:111].gamma\nitaly_gamma = gammas.mean()\n\n# POPULATIONS\nturkey_pop =  float(84000000)\ngerman_pop = float(84000000)\nspain_pop =  float(46000000)\nitaly_pop =  float(60000000)","8e8e3d14":"# BETA OPTIMIZATION\ndef model (country_df, country_name,country_index,population,country_gamma):\n    y_inf = [i for i in country_df.infected]\n    x_inf = country_df.index\n    y_inf = np.array(y_inf, dtype=float)\n    x_inf = np.array(x_inf, dtype=int)\n    y_rec = [i for i in country_df.rec]\n    x_rec = country_df.index\n    y_rec = np.array(y_rec, dtype=float)\n    x_rec = np.array(x_rec, dtype=int)\n\n    N = population\n    inf0 = y_inf[0]\n    sus0 = N - inf0\n    rec0 = y_rec[0]\n\n    def sir_model(y, x, beta, gamma):\n        s,i,r =y\n        gamma = country_gamma\n        dydt = [-beta *s*i\/N +gamma * i,beta *s*i\/N -gamma * i ,gamma * i]\n        return dydt\n\n    def fit_odeint(x, beta, gamma):\n        return integrate.odeint(sir_model, (sus0, inf0, rec0), x, args=(beta, gamma))[:,1]\n\n    popt, pcov = optimize.curve_fit(fit_odeint, x_inf, y_inf)\n    fitted_i = fit_odeint(x_inf, *popt)\n\n    fig = make_subplots(rows=1, cols=2)\n    index = country_index[x_inf[0]:x_inf[len(x_inf)-1]+1]\n    fig.append_trace(go.Scatter(x=index, y=y_inf,mode='markers',name= \"Actual Cases\"), row=1, col=1)\n    fig.add_trace(go.Scatter(x=index, y=fitted_i, mode='lines',name='Fitted Cases'))\n    \n    title = \"Fit of SIR model for \"+ country_name +\" infected cases \\n\" \n    title2 =  \"Beta = \"+ str(popt[0]) + \" and Gamma = \" + str(country_gamma)\n    fig.update_layout(title = title ,xaxis_title='Date',yaxis_title='Pop Infected')\n    fig.update_layout(legend=dict(x=0.001, y=0.01))\n    fig.show()\n    print(title2)\n    return popt[0]","e0d6a054":"spain_beta = model (spain,\"Spain\",spain_index,spain_pop,spain_gamma)\nitaly_beta = model (italy, \"Italy\",italy_index,italy_pop,italy_gamma)","be36ff0d":"turkey_beta = model (turkey,\"Turkey\",turkey_index,turkey_pop,turkey_gamma)\ngerman_beta = model(german,\" Germany\",german_index,german_pop,german_gamma)","a5db6a4a":"def forecast(country_all, country_df,country_name,country_beta,country_gamma,country_index,counry_pop):\n    y_inf = [i for i in country_df.infected]\n    x_inf = country_df.index\n    y_inf = np.array(y_inf, dtype=float)\n    x_inf = np.array(x_inf, dtype=int)\n    y_rec = [i for i in country_df.rec]\n    x_rec = country_df.index\n    y_rec = np.array(y_rec, dtype=float)\n    x_rec = np.array(x_rec, dtype=int)\n\n    N = counry_pop\n    inf0 = y_inf[0]\n    sus0 = N - inf0\n    rec0 = y_rec[0]\n    def sir_model(y, x):\n        s,i,r =y\n\n        beta = country_beta\n        gamma = country_gamma\n        dydt = [-beta *s*i\/N +gamma * i,beta *s*i\/N -gamma * i ,gamma * i]\n        return dydt\n    t = np.arange(0,250)    \n    r =integrate.odeint(sir_model,(sus0, inf0, rec0),t)\n   \n    index = country_index[x_inf[0]:]\n    fig = make_subplots(rows=1, cols=2)\n    fig.append_trace(go.Scatter(x=country_index, y=country_all.infected,mode='markers',name= \" Actual Active Cases\"), row=1, col=1)\n    fig.add_trace(go.Scatter(x=index, y=r[:,1], mode='lines',name='Forecasted Infected Cases'))\n    #fig.show()\n    #fig2 = make_subplots(rows=1, cols=2)\n    fig.append_trace(go.Scatter(x=country_index, y=country_all.rec,mode='markers',name= \"Actual Recovered Cases\"), row=1, col=1)\n    fig.add_trace(go.Scatter(x=index, y=r[:,2], mode='lines',name='Forecasted Recovered Cases'))\n    title = \" Actual and Forecasted Cases for Active and Recovered Class of \" +country_name\n    fig.update_layout(title = title ,xaxis_title='Date',yaxis_title='Cases')\n    fig.update_layout(legend=dict(x=0.001, y=0.99))\n   \n    fig.show()\n ","f784f332":"forecast(spain_all,spain,\"Spain\",spain_beta,spain_gamma,spain_index,spain_pop)\nforecast(italy_all,italy,\"Italy\",italy_beta,italy_gamma,italy_index,italy_pop)","02624e35":"forecast(turkey_all,turkey,\"Turkey\",turkey_beta,turkey_gamma,turkey_index,turkey_pop)\nforecast(german_all,german,\"German\",german_beta,german_gamma,german_index,german_pop)","14366a78":"# <p><span style=\"color:blue\">**FORECASTING COVID-19 WITH SIR MODEL AND REAL DATA **<\/span><\/p>","6b6a260e":"# <p><span style=\"color:green\">Results<\/span><\/p>","12c67c8b":"# <p><span style=\"color:green\">**Inroduction **<\/span><\/p>\n## **Dynamics of infectious diseases can be explained with SIR or SEIR models. The name of these models is come from their names of classes.**\n\n#### <p><span style=\"color:red\">**S --> Suspicious  **<\/span>: Individuals who have posibility of getting infected, but not infected currently.<\/p> \n#### <p><span style=\"color:red\">**E --> Exposed  **<\/span>: Individuals who are infected but not infectious.<\/p>    \n#### <p><span style=\"color:red\">**I --> Infectios   **<\/span>: Individuals curently infected<\/p> \n#### <p><span style=\"color:red\">**R --> Recovered  **<\/span>  : Individuals who were infected but not anymore (survived or died).<\/p>\n\n## Here we will use SIR Model to forecast tranmission of new Coronavirus\n___\n<a href=\"https:\/\/sarkac.org\/wp-content\/uploads\/2020\/03\/denklemler2.jpg\" rel=\"sarkac.org\"><img align=\"left\" src=\"https:\/\/sarkac.org\/wp-content\/uploads\/2020\/03\/denklemler2.jpg\" alt=\"\" \/><\/a>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<br> <font color = \"green\" size=\"5\">Beta --> <\/font> Average number of individuals that each individual touches per unit time <font color = \"blue\" size=\"4\">X<\/font> probability of transmitting the disease <br>\n<font color = \"green\" size=\"5\">Gamma --> <\/font> 1 <font color = \"blue\" size=\"4\">\/<\/font> average duration of disease\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n___\n## It is not possible to solve this equations with conventional ways. Thus, we will use some numeric methods to handle it. There is some code blocks at the bottom of the page to provide numerical solution to this differantial equations.\n_________________________________\n<img src =\"attachment:sirr.png\" align = \"left\" \/>\n\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<br> Here is an example chart of SIR model with <font color = \"green\" size=\"2\">Beta <\/font> = 1  and <font color = \"green\" size=\"2\">Gamma<\/font> = 0.25.  <br>\n<br>Initial values: s0 = 0.99 i0 = 0.01 and r0 =0 . <br>\n<br> <br>\n<br> <font color = \"green\" size=\"5\">What if we increase beta and decrease gamma? <\/font> <br>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n___\n___\n![betagamma.png](attachment:betagamma.png)\n<br>If we increase beta, as shown in the charts, peak level of the infected cases will be greater. Also peak of the infected cases slides to left, as beta increases.<br>\n<br>If we increase gamma value, it means that duration of the disease will be shortened, peak value of infected cases will decrease, which means curve will be more flatten. However, gama  value has small efect in sliding the peak to left or right.<br>\n<br>There is also a fact that, if gamma > beta, then infected cases will be decreasing.\n___","8aedb7da":"# <p><span style=\"color:green\">Method <\/span><\/p>\n___\n## To forecast the spread of the Covid-19 we will use countries' coronavirus cases. We will try to make an estimation about parameters gamma and beta. However there ocurs some problems, when we try to do it for Covid-19. While other infectious diseases obey sir or seir models, Covid-19 data couldn't fit in a proper way. I think it is because of the Covid_19's high infectiousness and being asymptomatic %80 of the people.\n## There is a sir model plot below for Turkey, its parameters gained from real data to make a good fit.\n\n<img src =\"attachment:wrong_fit.png\" align = \"left\" >\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n## <br> We tried to fit but results are frustrated. <br>\n## <br> Thus, I tried to find peaked counteries' parameters with using their daily cases after peak. So, I estimate the value of beta and gamma after the peak. As one can know, beta is smaller than gamma after the peak. Below, there is a plot of daily gamma values of Turkey. I calculated these values with respect to sir model equations using real data.<br>\n<img src =\"attachment:sssss.png\" align = \"left\" >\n## <br> After calculating daily gamma values and averaging them. We use some python libraries to find best fitting beta values to real data. <br>\n## <br> Also, these gama values tell us countries health system. In Turkey and Germany, gamma value is approximately 0.075, which means that the disease lasts 14 days on average. In Italy and Spain, however, gama is 0.04 approximately, which means the disease lasts 25 days on average. It is an indication of collapse of Spain and Italy's Health system for a while.\n"}}