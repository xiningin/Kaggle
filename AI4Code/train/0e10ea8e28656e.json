{"cell_type":{"9b108879":"code","f499dfd0":"code","d8cfab96":"code","883cc830":"code","6e5530c1":"code","f7bd5ff4":"code","d6c1e068":"code","39ec9838":"code","0bb1949f":"code","508f7ed2":"code","50d46a60":"code","381894ea":"code","1253d491":"code","1454d75d":"code","f6074dcb":"code","2c1df465":"code","e3695ccf":"code","e7a00ee3":"code","d890ff85":"code","901384f8":"code","bd2597b2":"code","b5b27c95":"code","4f14a6dc":"code","0e8ef54a":"code","b3c638da":"code","c61485ff":"code","7242ea7b":"code","1e40c0a6":"code","3e28f436":"code","f8e31745":"code","06e2c4c2":"code","a16f4ef0":"code","574585cd":"code","69bdf80d":"code","89908666":"code","0f842954":"code","edc57f92":"markdown","22d28ef9":"markdown","f2990cac":"markdown","65c45392":"markdown"},"source":{"9b108879":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f499dfd0":"print(os.listdir(\"..\/input\/dogs-vs-cats-redux-kernels-edition\/\"))","d8cfab96":"import numpy as np\nimport tensorflow as tf\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dense, Flatten, BatchNormalization, Conv2D, MaxPool2D\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.metrics import categorical_crossentropy\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nimport os\nimport shutil\nimport random\nimport glob\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n%matplotlib inline","883cc830":"!unzip -q ..\/input\/dogs-vs-cats-redux-kernels-edition\/train.zip","6e5530c1":"!unzip -q ..\/input\/dogs-vs-cats-redux-kernels-edition\/test.zip","f7bd5ff4":"filenames = os.listdir(\"\/kaggle\/working\/test\")\nfor filename in filenames:\n    test_df = pd.DataFrame({\n    'filename': filenames\n})\n\ntest_df.index = test_df.index + 1\ntest_df.head()","d6c1e068":"print(os.listdir(\"\/kaggle\/working\"))","39ec9838":"filenames = os.listdir(\"\/kaggle\/working\/train\")\ncategories = []\nfor filename in filenames:\n    category = filename.split('.')[0]\n    if category == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})\ndf.head()","0bb1949f":"sns.countplot(df['category'])","508f7ed2":"df['category'] = df['category'].astype(str)","50d46a60":"train_df, validate_df = train_test_split(df, test_size=0.1)\ntrain_df = train_df.reset_index()\nvalidate_df = validate_df.reset_index()","381894ea":"total_train = train_df.shape[0]\ntotal_validate = validate_df.shape[0]","1253d491":"print(total_train)\nprint(total_validate)","1454d75d":"train_batches = ImageDataGenerator(\n    rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest',\n    width_shift_range=0.1,\n    height_shift_range=0.1) \\\n    .flow_from_dataframe(\n    train_df, \n    \"\/kaggle\/working\/train\", \n    x_col='filename',\n    y_col='category',\n    class_mode='binary',\n    target_size=(224, 224),\n    batch_size=124)\n\nvalid_batches = ImageDataGenerator(rescale=1.\/255) \\\n    .flow_from_dataframe(\n    validate_df, \n    \"\/kaggle\/working\/train\", \n    x_col='filename',\n    y_col='category',\n    class_mode='binary',\n    target_size=(224, 224),\n    batch_size=124)\n\ntest_batches = ImageDataGenerator(rescale=1.\/255) \\\n    .flow_from_dataframe(\n    test_df, \n    \"\/kaggle\/working\/test\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    batch_size=124,\n    target_size=(224, 224),\n    shuffle=False\n)","f6074dcb":"assert train_batches.n == 22500\nassert valid_batches.n == 2500","2c1df465":"imgs, labels = next(train_batches)","e3695ccf":"# This function will plot images in the form of a grid with 1 row and 10 columns where images are placed in each column.\ndef plotImages(images_arr):\n    fig, axes = plt.subplots(1, 10, figsize=(20,20))\n    axes = axes.flatten()\n    for img, ax in zip( images_arr, axes):\n        ax.imshow(img)\n        ax.axis('off')\n    plt.tight_layout()\n    plt.show()","e7a00ee3":"plotImages(imgs)\nprint(labels[0:10])","d890ff85":"model= tf.keras.models.Sequential(\n    [tf.keras.layers.Conv2D(filters = 64, kernel_size = (3,3), activation = 'relu', input_shape = (224,224,3)),\n     tf.keras.layers.Conv2D(filters = 64, kernel_size = (3,3), activation = 'relu'),\n     tf.keras.layers.MaxPooling2D(2, 2),\n     tf.keras.layers.Dropout(.25),\n     tf.keras.layers.Conv2D(filters = 64, kernel_size = (3,3), activation = 'relu'),\n     tf.keras.layers.MaxPooling2D(2,2),\n     tf.keras.layers.Flatten(),\n     tf.keras.layers.Dense(128, activation='relu'),\n     tf.keras.layers.Dense(1, activation='sigmoid')]\n)","901384f8":"model.summary()","bd2597b2":"model.compile(optimizer=Adam(learning_rate=0.0001),\n              loss='binary_crossentropy',\n              metrics=['accuracy'])","b5b27c95":"model.fit(x=train_batches,\n          steps_per_epoch=len(train_batches),\n          validation_data=valid_batches,\n          validation_steps=len(valid_batches),\n          epochs=2,\n          verbose=2\n)","4f14a6dc":"train_batches1 = ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input) \\\n    .flow_from_dataframe(\n    train_df, \n    \"\/kaggle\/working\/train\", \n    x_col='filename',\n    y_col='category',\n    class_mode='binary',\n    target_size=(224, 224),\n    batch_size=124)\n\nvalid_batches1 = ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input) \\\n    .flow_from_dataframe(\n    validate_df, \n    \"\/kaggle\/working\/train\", \n    x_col='filename',\n    y_col='category',\n    class_mode='binary',\n    target_size=(224, 224),\n    batch_size=124)\n\ntest_batches1 = ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input) \\\n    .flow_from_dataframe(\n    test_df, \n    \"\/kaggle\/working\/test\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    batch_size=124,\n    target_size=(224, 224),\n    shuffle=False\n)","0e8ef54a":"imgs, labels = next(train_batches1)\nplotImages(imgs)\nprint(labels[0:10])","b3c638da":"vgg16_model = tf.keras.applications.vgg16.VGG16()","c61485ff":"vgg16_model.summary()","7242ea7b":"model = Sequential()\nfor layer in vgg16_model.layers[:-1]:\n    model.add(layer)","1e40c0a6":"model.summary()","3e28f436":"for layer in model.layers:\n    layer.trainable = False","f8e31745":"model.add(Dense(units=1, activation='sigmoid'))","06e2c4c2":"model.summary()","a16f4ef0":"model.compile(optimizer=Adam(learning_rate=0.0001),\n              loss='binary_crossentropy',\n              metrics=['accuracy'])","574585cd":"model.fit(x=train_batches1,\n          steps_per_epoch=len(train_batches1),\n          validation_data=valid_batches1,\n          validation_steps=len(valid_batches1),\n          epochs=3,\n          verbose=2)","69bdf80d":"results = model.predict(test_batches)","89908666":"test_df['category'] = np.where(results > 0.5, 1,0)","0f842954":"submission_df = test_df.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)\n","edc57f92":"Removing the Last Layer","22d28ef9":"Predict","f2990cac":"Submission","65c45392":"Since accuracy is not that great, we will use a pre-trained model with transfer learning."}}