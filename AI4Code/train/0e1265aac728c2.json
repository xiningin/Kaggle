{"cell_type":{"8ad8794b":"code","7ef3bbd2":"code","c3a6b745":"code","834765d9":"code","15ea602d":"code","f7a94345":"code","48ff009a":"code","544ffc16":"code","b148a2d0":"code","8bfb9bbd":"code","ca93ed5d":"code","509f7728":"code","37f7524f":"code","e4a84ec6":"code","845ad09e":"code","489888f4":"code","a61715b8":"code","7a17bd32":"code","b701cd01":"code","9f4497c6":"code","0bbae01b":"code","b7c8fb79":"code","b1fd4d0b":"markdown","2ecf9c0d":"markdown","45619849":"markdown","91b2cd6b":"markdown","e27ea2f1":"markdown","a7c642e5":"markdown","d69e5363":"markdown","58d0c80f":"markdown","a91561ec":"markdown","b75a744a":"markdown","e4fcb806":"markdown","0bbc7cde":"markdown","be6b5a8a":"markdown","92443aeb":"markdown","dd8d15e7":"markdown","54228143":"markdown","1419c194":"markdown","1249a53e":"markdown"},"source":{"8ad8794b":"# TODO: Mix R and Python using reticulate?\n#\u00a0Maybe later...\n# Can reticulate be used?\n#\u00a0Using py2r? Does this exist?","7ef3bbd2":"import pandas as pd\nimport matplotlib.pylab as plt\n%matplotlib inline","c3a6b745":"train_features_df = pd.read_csv(\"..\/input\/lish-moa\/train_features.csv\")\ntest_features_df = pd.read_csv(\"..\/input\/lish-moa\/test_features.csv\")\ntrain_targets_df = pd.read_csv(\"..\/input\/lish-moa\/train_targets_scored.csv\")","834765d9":"train_features_df.sample(2).T","15ea602d":"test_features_df.sample(2).T","f7a94345":"train_features_df.dtypes","48ff009a":"train_features_df.columns.tolist()","544ffc16":"train_features_df.shape","b148a2d0":"test_features_df.shape","8bfb9bbd":"len(train_features_df.columns[train_features_df.columns.str.startswith(\"c-\")])","ca93ed5d":"len(train_features_df.columns[train_features_df.columns.str.startswith(\"g-\")])","509f7728":"for col in train_features_df.select_dtypes([\"object\", \"int\"]):\n    print(f\"Unique value counts for {col}\")\n    print(train_features_df.loc[:, col].value_counts())","37f7524f":"train_features_df[\"sig_id\"].unique().tolist()","e4a84ec6":"train_features_df[\"sig_id\"].nunique()","845ad09e":"train_features_df[\"cp_dose\"].nunique()","489888f4":"train_features_df[\"cp_dose\"].unique()","a61715b8":"targets_count_s = train_targets_df.drop(\"sig_id\", axis=1).sum().sort_values(ascending=False).copy()\n\nchunk_size = (len(targets_count_s) \/\/ 10 + 1)\n\nfig, axes = plt.subplots(10, 1, figsize=(8, 100))\n\ncount = 0\nfor ax_id, chunk_id in enumerate(range(0, len(targets_count_s), chunk_size)):\n    targets_count_s.iloc[chunk_id:chunk_id+chunk_size].sort_values().plot(kind=\"barh\", ax=axes[ax_id])","7a17bd32":"train_targets_df[\"all\"] = train_targets_df.drop(\"sig_id\", axis=1).sum(axis=1)","b701cd01":"df = train_features_df.merge(train_targets_df, on=\"sig_id\")","9f4497c6":"(df.groupby([\"all\", \"cp_type\"])\n    .size()\n    .unstack(fill_value=0))","0bbae01b":"train_targets_df.loc[lambda df: (df[\"all\"] == 7), :].loc[:, lambda df: (df != 0).any(axis=0)]","b7c8fb79":"train_targets_df.loc[lambda df: (df[\"all\"] == 5), :].loc[:, lambda df: (df != 0).any(axis=0)]","b1fd4d0b":"Few things to say about this confusion matrix:\n    \n    \n1. All ctl_vehicle have 0 targets (first row, ctl_vehicle column) => thus no false positives in the control group.\nThis allows us to do two things: first, we can train without these control rows and second, \n2. Very few rows have many targets. For instance, we have 6 rows with 7 targets at 1.\nWe will explore some of these rows and see if they share something (spoiler: they do).\n3. In contrast to that, most of the rows have 0 or 1 target at a time (TODO: add percentage). \nThis means that we can simplify the problem by considering it as a multiclass problem (dropping the rows with more than 1 target).","2ecf9c0d":"# Mean model","45619849":"#\u00a0Load the datasets","91b2cd6b":"#\u00a0Specific MoA?","e27ea2f1":"One interesting model to start with is the mean model, i.e. the mean over all targets from the train \ntargets.\nA refined version of this is to remove the control group from the train targets then compute the mean.","a7c642e5":"These are of two types of datasets:\n    \n- features\n- targets (scored)\n\nThere is also one extra type of file with `non scored` targets but we will get back to this later.\nLet's load the different DataFrames.","d69e5363":"In order to prepare the next section, let's prepare one new targets column: the sum\nof all the targets: one row is equal to the sum accross all the targets. ","58d0c80f":"#\u00a0Targets","a91561ec":"Let's also check the next number in the list: those having 5 targets.","b75a744a":"One interesting observation is that few `sig_id`'s have always the same group of targets. Let's find out about these.\nWe will start with the fewset, i.e. those with a sum of targets equal to 7 (this number can be seen in the occurences matrix above): \n\n","e4fcb806":"#\u00a0Control groups","0bbc7cde":"nfkb_inhibitor is the most common target (with a wooping) and atp-sensitive_potassium_channel_antagonist is the least one\n(with a mere 1 occurence)","be6b5a8a":"**Warning**: before we start, notice that, since this is a code competition, the test dataset \nwe have here is only a subset of the whole dataset. Indeed, when re-run, the \"real\" test dataset\nwill be about 4 times larger. Some insights thus only partially represent the reality. Use this fact to your \nadvantage.\n\nWith that out of the way, let's go!","92443aeb":"As stated in the data description, some rows come from controle groups. How to spot these: \nwell that's easy, we juste need to ","dd8d15e7":"#\u00a0Features","54228143":"To get started, let's explore the features (both train and public test). For that, we will check \nsome samples, the data types, etc...","1419c194":"Now that we understand better the features, let's explore a little bit more the targets.\nTo start, let's have a look at the count of positives (i.e. ones) for each target.\nTo make this more readable, we will make many barplots.","1249a53e":"Few first insights (for both train and test):\n\n- We have **876** columns\n- Among these, lots of columns start with `c-` or `g-`:\n    * **100** columns of c type from 0 to 99: c-0, c-1, and so on. These are related to the \n    * **772** columns of g type from 0 to 771: \n- `cp_type`: either `trt_cp` or  \n- `cp_dose`: either D1 or D2. These could be small and high doses (of which one could be leathal to the cells...).\n\n"}}