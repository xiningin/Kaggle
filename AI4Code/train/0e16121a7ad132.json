{"cell_type":{"45b8ee32":"code","4e016b24":"code","4ee90ee2":"code","8f114a8d":"code","112c875a":"code","79242cfb":"code","05f67b77":"code","4c76e8a7":"code","ff2ca0f5":"code","6e1a07ec":"code","1f7261d1":"code","8aa02c5f":"code","0d77c55b":"code","d7ed2e2a":"code","cbb62413":"code","41c32df7":"code","51a6e5af":"code","e08610b7":"code","1c41e06c":"code","0be1b0d8":"code","214f8795":"code","fd9f6052":"code","ff72f0d4":"code","096169cf":"code","00baeb9b":"code","2f2ad58f":"code","aace9123":"code","ebfc5a24":"code","86928add":"code","a8fcb84d":"code","66f2e9b9":"code","d101df1b":"code","8073ec02":"code","c287f866":"code","868fa2cc":"code","438338a4":"code","6fd37ec4":"code","b5e5d299":"code","540ebee6":"code","6edd540f":"code","79147c00":"code","bfdb68b6":"code","7254fdd8":"code","b7722295":"code","c58dff68":"code","945fada9":"code","12ba89a5":"code","46dd2d30":"code","744228e0":"code","b03e25a1":"code","4894a12d":"code","b94c409a":"code","ace90c0a":"code","e086d814":"code","d67e6616":"code","8c5198ac":"code","c3d16a29":"code","84d85f8d":"markdown","5f8e2bac":"markdown","2b4b5a73":"markdown","51b255df":"markdown","a0ba1011":"markdown","c4ceb7e2":"markdown","b5d904a4":"markdown","fdcc3b7a":"markdown","d6757ab4":"markdown","6e4c0573":"markdown","705507a8":"markdown","6780a93b":"markdown","30a229df":"markdown","c6cc19f5":"markdown","4b3daacc":"markdown","320fd38a":"markdown","21862cb6":"markdown","3e9bd635":"markdown"},"source":{"45b8ee32":"import numpy as np \nimport pandas as pd ","4e016b24":"cdf = pd.read_csv(\"..\/input\/dogus-datathon-otomotiv\/FINAL_CUSTOMER_DATATHON.csv\")\ncdf.drop(['GENDER','MARITAL_STATUS', 'Unnamed: 0'], axis=1, inplace=True)\nsas = pd.read_csv(\"..\/input\/dogus-datathon-otomotiv\/FINAL_SALES_FILE_DATATHON.csv\")\nsas['SF_CREATE_DATE'] = pd.to_datetime(sas['SF_CREATE_DATE']).dt.date\nsas['sales_file'] = 1\ntrend = pd.merge(sas, cdf , on='CUSTOMER_ID',how='outer')\ntrend['sales_file'] = trend['sales_file'].astype(np.float).astype(\"Int32\")","4ee90ee2":"trend.shape","8f114a8d":"sub = pd.read_csv(\"..\/input\/dogus-datathon-otomotiv\/sample_submission.csv\")\nsub = sub.rename(columns={\"Id\": \"BASE_CUSTOMER_ID\"})\nsub = sub.drop(sub.columns[[1]], axis=1)\nprint(sub.head(2))\nprint(sub.shape)","112c875a":"trend.head(3)","79242cfb":"trend['SF_CREATE_DATE'] = pd.to_datetime(trend['SF_CREATE_DATE'], errors='coerce')\ntrend['ds'] = trend['SF_CREATE_DATE']  \ntrend = trend.drop(trend.columns[[0,1,2,4,5,6,9,10,11,12,13]], axis=1)\ndf = pd.merge(sub, trend, on='BASE_CUSTOMER_ID' , how='left')\ndf.sales_file = df.sales_file.fillna(0)\ndf.ds.fillna(df['ds'].max(), inplace=True)\ntre = pd.pivot_table(df, values='sales_file',\n                    columns=['ds'], aggfunc=np.sum, fill_value=0)\ndf = tre.T\n\ndf.reset_index(level=0, inplace=True)\n\ndf = df.rename(columns={\"sales_file\": \"y\" })\n\ndf.tail()","05f67b77":"df.info()","4c76e8a7":"df['ds'] = df['ds'].astype(str)\ndf['y'] = df['y'].astype(str)","ff2ca0f5":"!pip install pystan==2.19.1.1","6e1a07ec":"!pip install prophet","1f7261d1":"from fbprophet import Prophet","8aa02c5f":"m = Prophet()\nm.fit(df)\nfuture = m.make_future_dataframe(periods=92)\nfuture.tail()","0d77c55b":"forecast = m.predict(future)\nforecast.tail()","d7ed2e2a":"fig1 = m.plot(forecast)","cbb62413":"fig2 = m.plot_components(forecast)","41c32df7":"from prophet.plot import plot_plotly, plot_components_plotly\nplot_plotly(m, forecast)","51a6e5af":"plot_components_plotly(m, forecast)","e08610b7":"def cleanner(filename1,filename2,filename3,filename4,filename5,filename6):\n    filename4.drop('Unnamed: 0', axis=1, inplace=True)\n    filename1.drop('Unnamed: 0', axis=1, inplace=True)\n    filename2.drop('Unnamed: 0', axis=1, inplace=True)\n    filename3.drop('Unnamed: 0', axis=1, inplace=True)\n    filename5.drop('Unnamed: 0', axis=1, inplace=True)\n    filename6.drop('Unnamed: 0', axis=1, inplace=True)","1c41e06c":"mask = pd.read_csv(\"..\/input\/dogus-datathon-otomotiv\/MASK_SERVIS_BAKIM_DATATHON_FINAL.csv\")\nve =pd.read_csv(\"..\/input\/dogus-datathon-otomotiv\/FINAL_VEHICLE_TABLE_DATATHON.csv\")\nsif = pd.read_csv(\"..\/input\/dogus-datathon-otomotiv\/FINAL_SIFIR_ARAC_ALANLAR_DATATHON.csv\")\ncr = pd.read_csv(\"..\/input\/dogus-datathon-otomotiv\/FINAL_CUSTOMER_RELATED_TABLE_FOR_DATATHON.csv\")\nsale = pd.read_csv(\"..\/input\/dogus-datathon-otomotiv\/FINAL_SALES_FILE_DATATHON.csv\")\ncd =pd.read_csv(\"..\/input\/dogus-datathon-otomotiv\/FINAL_CUSTOMER_DATATHON.csv\")\n\ncleanner(mask, ve , sif , cr , sale, cd)","0be1b0d8":"pip install yfinance","214f8795":"import yfinance as yf\nstock = yf.Ticker('TRY=X')\ndolar = stock.history(period='1mo', start='2007-1-1', end='2021-6-10')\ndolar.reset_index(level=0, inplace=True)\ndolar = dolar[['Date', 'Close']]\ndolar","fd9f6052":"mask['CREATE_DATE'] = pd.to_datetime(mask['CREATE_DATE'])\nmask['CREATE_DATE'] = pd.to_datetime(mask['CREATE_DATE'], format=\"%d\/%m\/%y\")\nmask.CREATE_DATE = mask.CREATE_DATE.astype('datetime64[D]')\ndolar = dolar.rename(columns={\"Date\": \"CREATE_DATE\", \"Close\": \"dolar\"})\ndolar.isnull().sum()\n","ff72f0d4":"mask2 = pd.merge(mask, dolar, how='left' , on='CREATE_DATE')\nmask2[\"dolar\"] = mask2[\"dolar\"].fillna(method=\"bfill\")\nmask2[\"TOTAL_AMOUNT_TL\"] = mask2[\"TOTAL_AMOUNT_TL\"].fillna(mask2[\"TOTAL_AMOUNT_TL\"].median())\nmask2.isnull().sum()\nmask2['reelTL'] = mask2['TOTAL_AMOUNT_TL'] \/ mask2['dolar']\nf_mask= mask2[['IS_MAINTENANCE','VEHICLE_ID','reelTL']]","096169cf":"cr = cr[['BASE_CUSTOMER_ID', 'VEHICLE_ID']]\nff_mask = pd.merge(cr, f_mask, how='left', on='VEHICLE_ID')","00baeb9b":"ff_mask.IS_MAINTENANCE = ff_mask.IS_MAINTENANCE.replace({0:1, 1:1.15})\nff_mask.IS_MAINTENANCE.fillna(0, inplace=True)\nff_mask.reelTL.fillna(0, inplace=True)","2f2ad58f":"ff_mask['servis'] = ff_mask.groupby(['BASE_CUSTOMER_ID', 'VEHICLE_ID'])['IS_MAINTENANCE'].transform('sum')\nff_mask['TL'] = ff_mask.groupby(['BASE_CUSTOMER_ID', 'VEHICLE_ID'])['reelTL'].transform('sum')","aace9123":"ff_mask = ff_mask.drop_duplicates(subset=['BASE_CUSTOMER_ID', 'VEHICLE_ID'])\nff_mask.reset_index(drop=True, inplace=True)","ebfc5a24":"sif['CREATE_DATE'] = pd.to_datetime(sif['CREATE_DATE'])\nsif['CREATE_DATE'] = pd.to_datetime(sif['CREATE_DATE'], format=\"%d\/%m\/%y\")\nsif.CREATE_DATE = sif.CREATE_DATE.astype('datetime64[D]')\nsif_mask = pd.merge(ff_mask, sif, on='VEHICLE_ID', how='outer')\nsif_mask.reset_index(drop=True, inplace=True)\nsif_mask['sifarac'] = 1\nsif_mask = sif_mask[['BASE_CUSTOMER_ID','VEHICLE_ID','IS_MAINTENANCE','reelTL', 'servis' ,'TL', 'CREATE_DATE', 'sifarac']]\nsif_mask.head()","86928add":"ve['TRAFFIC_DATE'] = pd.to_datetime(ve['TRAFFIC_DATE'])\nve[\"TRAFFIC_DATE\"].fillna(method=\"ffill\",inplace=True) \nimport datetime\nlast_Day = pd.Timestamp(datetime.datetime.strptime('10\/07\/2021','%d\/%m\/%Y').date())\nve['time_wcar'] = 0\nve['time_wcar'] = (last_Day - ve['TRAFFIC_DATE'])\nve['time_wcar'] = ve['time_wcar']\/np.timedelta64(1,'D')\nve = ve[['VEHICLE_ID', 'time_wcar', 'TRAFFIC_DATE']]\nsif_maskv = pd.merge(sif_mask, ve, on='VEHICLE_ID', how='outer')\nsif_maskv.loc[sif_maskv['CREATE_DATE'].isnull(),'CREATE_DATE'] = sif_maskv['TRAFFIC_DATE']\nsif_maskv['ay'] = sif_maskv['CREATE_DATE'].dt.month\nsif_maskv['yil'] = sif_maskv['CREATE_DATE'].dt.year\nsif_maskv.loc[((sif_maskv['ay'] == 6) | (sif_maskv['ay'] == 7) | (sif_maskv['ay'] == 8)), 'yazayi'] = 1\nsif_maskv.loc[(sif_maskv['yil'] == 2021) & ((sif_maskv['ay'] == 6) | (sif_maskv['ay'] == 7)), 'son2ay'] = 1\nsif_maskv.loc[(sif_maskv['yil'] == 2021) & ((sif_maskv['ay'] == 5) | (sif_maskv['ay'] == 6) | (sif_maskv['ay'] == 7)), 'son3ay'] = 1\nsif_maskv.son3ay = sif_maskv.son3ay.fillna(0)\nsif_maskv.son2ay = sif_maskv.son2ay.fillna(0)\nsif_maskv.yazayi = sif_maskv.yazayi.fillna(0)\nsif_maskv.sort_values(by='CREATE_DATE').tail(5) ","a8fcb84d":"cdsa = pd.merge(sale,cd, on='CUSTOMER_ID', how='outer')","66f2e9b9":"df = pd.merge(sub, trend, on='BASE_CUSTOMER_ID' , how='left')\ndf.sales_file = df.sales_file.fillna(0)\ndf.ds.fillna(df['ds'].max(), inplace=True)\ndf.reset_index(level=0, inplace=True)\ndf = df.rename(columns={\"sales_file\": \"y\" })\ndf['ds'] = df['ds'].astype(str)\nmtb = pd.pivot_table(df, values='y',index='BASE_CUSTOMER_ID',\n                    columns=['ds'], aggfunc=np.sum, fill_value=0)\n\nmtb.reset_index(level=0, inplace=True)\nfrom operator import mul\n#for i in range(4113):\n   #mtb.iloc[::,i+1] =  mul(mtb.iloc[::,i+1],fore.iloc[i, 1])\n\nmtb[\"topdosya\"] = mtb.iloc[::,1::].sum(axis=1)\nmtbed = mtb[['BASE_CUSTOMER_ID', 'topdosya']]\nmtbed.head()","d101df1b":"kme = pd.merge(mtbed,cdsa, on = 'BASE_CUSTOMER_ID', how='outer')","8073ec02":"kme2 = (kme.assign(counts=kme.count(axis=1))\n   .sort_values(['BASE_CUSTOMER_ID', 'counts'])\n   .drop_duplicates(subset=['BASE_CUSTOMER_ID'], keep='last')\n   .drop('counts', axis=1))\n\nkme2 = pd.merge(kme2,f_mask, on = 'BASE_CUSTOMER_ID', how='outer')","c287f866":"kme2 = kme2[['BASE_CUSTOMER_ID', 'topdosya','REQ_BRAND_CODE','REQ_TOPMODEL_CODE','GENDER_ID','MARITAL_STATUS_ID','FK_ADDRESS_COMMUNICATION_CITY','OCCUPATION','servis', 'reelTL' , 'sifarac','time_wcar','yazayi','son2ay','son3ay']]","868fa2cc":"kme2.time_wcar.hist(bins=100)","438338a4":"kme2['servis'] = kme2.groupby(['BASE_CUSTOMER_ID'])['servis'].transform('sum')\nkme2['reelTL'] = kme2.groupby(['BASE_CUSTOMER_ID'])['reelTL'].transform('sum')\nkme2['sifarac'] = kme2.groupby(['BASE_CUSTOMER_ID'])['sifarac'].transform('sum')\nkme2['time_wcar'] = kme2.groupby(['BASE_CUSTOMER_ID'])['time_wcar'].transform('min') ###","6fd37ec4":"kme2.time_wcar.hist(bins=100)","b5e5d299":"kme2 = kme2.drop_duplicates(subset=['BASE_CUSTOMER_ID'])\nkme2.reset_index(drop=True, inplace=True)\nkmen = kme2[['topdosya' ,'servis', 'reelTL' , 'sifarac', 'time_wcar']]\nkmen.head()","540ebee6":"!pip install ycimpute\n\nfrom ycimpute.imputer import EM\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.neighbors import LocalOutlierFactor\nvar_names=list(kmen)\nn_df=np.array(kmen)\ndff=EM().complete(n_df)\ndff=pd.DataFrame(dff, columns=var_names)\ndff.isnull().sum()","6edd540f":"import matplotlib.pyplot as plt\nplt.figure(figsize=(12,12))\nsns.heatmap(dff.corr(),annot=True)","79147c00":"from scipy import stats\nfrom sklearn.preprocessing import StandardScaler,normalize\nfrom sklearn.cluster import KMeans\nfrom sklearn.cluster import MiniBatchKMeans\nfrom sklearn.cluster import AgglomerativeClustering\nimport scipy.cluster.hierarchy as shc\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.cluster import MeanShift\nfrom sklearn.cluster import estimate_bandwidth\nfrom sklearn import metrics\nfrom sklearn.decomposition import PCA\n# Preprocessing \nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ndata_scaled = scaler.fit_transform(dff)","bfdb68b6":"from sklearn.cluster import KMeans\n\nerror = []\nfor i in range(1,14):\n    kmeans = KMeans(n_clusters=i)\n    kmeans.fit(data_scaled)\n    error.append(kmeans.inertia_)\n\nplt.plot(error,\"bx-\")\nplt.scatter(5,error[5],linewidths=10,c=\"r\")\nplt.xticks(range(1,14))\nplt.show()","7254fdd8":"kmeans = KMeans(n_clusters=5)\nkmeans.fit(data_scaled)\nkmeans.labels_\nkmeans.labels_.shape\ndata_cluster = pd.concat([dff,pd.DataFrame({\"cluster\":kmeans.labels_})],axis=1)\ndata_cluster.head()\nsns.countplot(\"cluster\",data=data_cluster)","b7722295":"kmeans_labels=KMeans(n_clusters=5,random_state=123).fit_predict(data_scaled)\npca = PCA(n_components=3).fit_transform(data_scaled)\nfig = plt.figure(figsize=(12, 7), dpi=80, facecolor='w', edgecolor='k')\nax = plt.axes(projection=\"3d\")\nax.scatter3D(pca.T[0],pca.T[1],pca.T[2],c=kmeans_labels,cmap='Spectral')\n\nxLabel = ax.set_xlabel('X')\nyLabel = ax.set_ylabel('Y')\nzLabel = ax.set_zlabel('Z')\nax.view_init(60,35)","c58dff68":"pca = PCA(n_components=2)\npca_data = pca.fit_transform(data_scaled)\n\npca_data = pd.DataFrame(data=pca_data,columns=[\"pca1\",\"pca2\"])\npca_data = pd.concat([pca_data,pd.DataFrame({\"cluster\":kmeans.labels_})],axis=1)\nplt.figure(figsize=(12,12))\nsns.scatterplot(x=\"pca1\",y=\"pca2\",hue=\"cluster\",data=pca_data,palette=\"deep\")\nplt.show()","945fada9":"data_cluster.set_index('cluster')\ngrouped=data_cluster.groupby(by='cluster').mean().round(1)\nfeatures=['topdosya', 'servis', 'reelTL', 'sifarac', 'time_wcar']\nplt.figure(figsize=(25,20))\nfor i,j in enumerate(features):\n    plt.subplot(3,3,i+1)\n    sns.barplot(grouped.index,grouped[j])\n    plt.title(j,fontdict={'color':'darkblue'})\nplt.tight_layout();\nplt.show();","12ba89a5":"data_cluster = pd.concat([kme2,pd.DataFrame({\"cluster\":kmeans.labels_})],axis=1)\ncsub = data_cluster[['BASE_CUSTOMER_ID','cluster','topdosya','son3ay']]\nclss = csub.groupby('cluster').mean()\nclss.reset_index(level=0, inplace=True)\nclss = clss[['cluster' , 'topdosya']]\nclss","46dd2d30":"csub = pd.merge(csub, clss, how='outer', on='cluster')","744228e0":"q = \"(son3ay == 1)\"\n\nprint(csub.query(q))","b03e25a1":"csub.loc[csub['son3ay'] == 1, 'topdosya_x'] = 0\ncsub.loc[csub['topdosya_x'].isnull() == True, 'topdosya_x'] = csub.topdosya_y\ncsub.loc[csub['topdosya_x'] == 0, 'topdosya_x'] = csub.topdosya_y","4894a12d":"perc =[.25, .50, .6827, .9545, .9973]\ncsub.describe(percentiles = perc).T","b94c409a":"csub.loc[csub['topdosya_x'] > 16.877, 'topdosya_x'] = 16.877\ncsub.describe(percentiles = perc).T","ace90c0a":"csub = csub[['BASE_CUSTOMER_ID','topdosya_x']]\ncsub = csub.rename(columns={\"topdosya_x\": \"Expected\" })","e086d814":"from numpy import asarray\nfrom sklearn.preprocessing import StandardScaler\n# transform data\ncsub[\"Expected\"] = StandardScaler().fit_transform(asarray(csub[\"Expected\"]).reshape(-1,1))\n\nfrom sklearn.preprocessing import MinMaxScaler\n# apply normalization techniques\ncsub[\"Expected\"] = MinMaxScaler().fit_transform(np.array(csub[\"Expected\"]).reshape(-1,1))\ncsub['Expected'].value_counts(normalize=True)","d67e6616":"mtb2 = mtbed[['BASE_CUSTOMER_ID']]\n\ncusub = pd.merge(mtb2, csub,  on = 'BASE_CUSTOMER_ID', how='left')","8c5198ac":"cusub = cusub[['BASE_CUSTOMER_ID','Expected']]\ncusub.head(10)","c3d16a29":"cusub['Expected'].value_counts(normalize=True)","84d85f8d":"![3d pca](https:\/\/serving.photos.photobox.com\/1802485011a9cbe7f5c18067cd4637bb23ec8985a98007d147d25bc12cf88e7ed613d837.jpg)","5f8e2bac":"# S\u0131n\u0131flar","2b4b5a73":"# Veri D\u00fczenleme","51b255df":"![Standard deviation diagram](http:\/\/upload.wikimedia.org\/wikipedia\/commons\/8\/8c\/Standard_deviation_diagram.svg)","a0ba1011":"topdosya.mean= 2.237\ntopdosya.std= 4.884998\nmean + 3std = 16.877","c4ceb7e2":"# Korelasyon","b5d904a4":"# K-MEANS","fdcc3b7a":"# Data Scale","d6757ab4":"# Tekil ki\u015finin son ald\u0131\u011f\u0131 s\u0131f\u0131r ara\u00e7 \u00fczerinden ne kadar zaman ge\u00e7mi\u015f","6e4c0573":"# $\/\u20ba Verisi","705507a8":"# EM ile Eksik Verileri Doldurma","6780a93b":"# PCA ile G\u00f6rselle\u015ftirme","30a229df":"![2d pca](https:\/\/serving.photos.photobox.com\/18944601a9c80598a16efdf3b1c6714fdfb2c3b5d21932304334261213c814669ae7eebb.jpg)","c6cc19f5":"![](https:\/\/serving.photos.photobox.com\/61414662a74b274dcf4f0423c94249d7211dc018b054d654dfba3d123232ef9ab939580c.jpg)","4b3daacc":"Servis bak\u0131m maliyeti uzun y\u0131llara yay\u0131ld\u0131\u011f\u0131ndan $\/\u20ba verisi ile d\u00fczenlenmi\u015ftir","320fd38a":"# Trend Analizi","21862cb6":"# Histogram","3e9bd635":"Koyu mavi ortalamadan bir standart sapmadan daha d\u00fc\u015f\u00fck de\u011ferleri g\u00f6sterir. Normal da\u011f\u0131l\u0131m i\u00e7in bu %68,27 olur; (orta ile koyu mavi) ortalamadan iki standart sapma i\u00e7in %95,45; (a\u00e7\u0131k, orta ve koyu mavi i\u00e7in) ortalamadan \u00fc\u00e7 standart sapma %99,73 olur."}}