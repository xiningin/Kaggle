{"cell_type":{"04c139dc":"code","e6271cd3":"code","853c628b":"code","a52c5775":"code","efc1ca55":"code","4299ccb7":"code","dd28e628":"code","4898c8cc":"code","f779e06d":"code","faf509a8":"code","e842cfb9":"code","2f1a9ba8":"code","1c49e00a":"code","fcb24f0d":"code","523c7e79":"code","890e02c5":"code","d10f932f":"code","53e56b19":"code","75c7826d":"code","57b18cf1":"code","b7231a3b":"code","fa1bab9f":"markdown"},"source":{"04c139dc":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e6271cd3":"date_list = [\"31\/03\/2021\",\"28\/02\/2021\",\"31\/01\/2021\",\"31\/12\/2020\",\"30\/11\/2020\",\"31\/10\/2020\",\"30\/09\/2020\",\"31\/08\/2020\",\"31\/07\/2020\",\"30\/06\/2020\",\"31\/05\/2020\",\"30\/04\/2020\"]","853c628b":"MAIN_PATH = \"\/kaggle\/input\/dogus-datathon-otomotiv\/\"","a52c5775":"def load_data(path, is_external = False):\n    global MAIN_PATH\n    if is_external == False:\n        return pd.read_csv(MAIN_PATH + path).drop(\"Unnamed: 0\", axis = 1)\n    else:\n        return pd.read_csv(\"\/kaggle\/input\/\" + path)","efc1ca55":"customerData = load_data(\"FINAL_CUSTOMER_DATATHON.csv\")\ncustomerData[\"BIRTH_DATE\"] = [datetime.today().year - date for date in customerData[\"BIRTH_DATE\"] if date is not None]\ncustomerData.BIRTH_DATE.fillna(customerData.BIRTH_DATE.mean(),inplace = True)\ncustomerData.fillna(\"Unknown\", inplace = True)\ncustomerData.rename(columns = {\"BIRTH_DATE\": \"AGE\"}, inplace = True)","4299ccb7":"salesData = load_data(\"FINAL_SALES_FILE_DATATHON.csv\")\nsalesData.SF_CREATE_DATE = pd.to_datetime(salesData.SF_CREATE_DATE)","dd28e628":"customerRelatedData = load_data(\"FINAL_CUSTOMER_RELATED_TABLE_FOR_DATATHON.csv\")\ncustomerRelatedData.END_DATE = customerRelatedData.END_DATE.fillna(\"31-10-2021\")\ncustomerRelatedData.START_DATE = pd.to_datetime(customerRelatedData.START_DATE)\ncustomerRelatedData.END_DATE = pd.to_datetime(customerRelatedData.END_DATE)\ncustomerRelatedData[\"DATE_DIFF\"] = customerRelatedData.END_DATE - customerRelatedData.START_DATE\ncustomerRelatedData.DATE_DIFF = [i.days for i in customerRelatedData.DATE_DIFF]","4898c8cc":"sifirAracData = load_data(\"FINAL_SIFIR_ARAC_ALANLAR_DATATHON.csv\")\nsifirAracData.CREATE_DATE = pd.to_datetime(sifirAracData.CREATE_DATE)","f779e06d":"bakimData = load_data(\"MASK_SERVIS_BAKIM_DATATHON_FINAL.csv\")\nbakimData.CREATE_DATE = pd.to_datetime(bakimData.CREATE_DATE)\nbakimData[\"IS_MAINTENANCE\"] = [2 if i == 0 else 1 for i in bakimData[\"IS_MAINTENANCE\"]]","faf509a8":"dolarData = load_data(\"externaldata\/dolar_kuru.csv\", True)\ndolarData.DOLAR_KURU = [i.replace(\",\",\".\") for i in dolarData.DOLAR_KURU]\ndolarData.DOLAR_KURU = dolarData.DOLAR_KURU.astype(float)\ndolarData.DATE = pd.to_datetime(dolarData.DATE)","e842cfb9":"faizData = load_data(\"externaldata\/faiz_oran.csv\", True)\nfaizData.FAIZ_ORANI = [i.replace(\",\",\".\") for i in faizData.FAIZ_ORANI]\nfaizData.FAIZ_ORANI = faizData.FAIZ_ORANI.astype(float)\nfaizData.DATE = pd.to_datetime(faizData.DATE)","2f1a9ba8":"otvData = load_data(\"externaldata\/otv_oran.csv\", True)\notvData.OTV = otvData.OTV.astype(int)\notvData.DATE = pd.to_datetime(otvData.DATE)","1c49e00a":"submissionData = pd.read_csv(\"\/kaggle\/input\/dogus-datathon-otomotiv\/sample_submission.csv\")\nsubmissionData.rename(columns = {\"Id\": \"BASE_CUSTOMER_ID\"}, inplace = True)","fcb24f0d":"salesData.head()","523c7e79":"customerData.head()","890e02c5":"def sampleData(data):\n    negatives = data[data.TARGET == 0]\n    positives = data[data.TARGET == 1]\n    sampledNegative = negatives.sample(frac = 0.15, random_state = 1)\n    trainDataSampled = sampledNegative.append(positives)\n    trainDataSampled = trainDataSampled.sample(frac=1)\n    return trainDataSampled\n\ndef first_last_date(date, diff = 3):\n    last_date = datetime.strptime(date, '%d\/%m\/%Y')\n    first_date = last_date - relativedelta(months = diff)\n    return last_date, first_date\n\ndef createData(dates, write = False, appendix = None):\n    trainData = pd.DataFrame(columns = ['BASE_CUSTOMER_ID', 'TARGET', 'GENDER', 'MARITAL_STATUS', 'AGE','TOTAL_MAINTENANCE', 'MEAN_EXPENSE_MAINTENANCE', 'TOTAL_SERVICE','MEAN_EXPENSE_SERVICE', 'COUNT_NEW_CAR', 'TOTAL_COUNT_SALESFILE','MEAN_DOLAR', 'MEAN_FAIZ', 'MEAN_OTV'])\n    validationData = pd.DataFrame(columns = ['BASE_CUSTOMER_ID', 'TARGET', 'GENDER', 'MARITAL_STATUS', 'AGE','TOTAL_MAINTENANCE', 'MEAN_EXPENSE_MAINTENANCE', 'TOTAL_SERVICE','MEAN_EXPENSE_SERVICE', 'COUNT_NEW_CAR', 'TOTAL_COUNT_SALESFILE','MEAN_DOLAR', 'MEAN_FAIZ', 'MEAN_OTV'])\n    for idx, date in enumerate(dates):\n        print(date)\n        start = datetime.today()\n        # 3 ayl\u0131k periyodu al\u0131r\n        last_date, first_date = first_last_date(date)\n        filteredTargetData = salesData[(salesData.SF_CREATE_DATE <= last_date) & (salesData.SF_CREATE_DATE > first_date)].\\\n                                                                                                           drop_duplicates(subset = [\"CUSTOMER_ID\"])[[\"CUSTOMER_ID\"]]\n        # O aylarsa sales verisinde olan m\u00fc\u015fterilere 1 atar\n        filteredTargetData[\"TARGET\"] = 1\n        # Baz verisinde aktif olan m\u00fc\u015fterileri al\u0131r\n        filteredActiveCustomer = customerRelatedData[(customerRelatedData.START_DATE < first_date) & (customerRelatedData.END_DATE > first_date) & (customerRelatedData.FK_RELATION_STATUS_ID == 1)][[\"BASE_CUSTOMER_ID\"]].drop_duplicates(subset = [\"BASE_CUSTOMER_ID\"])\n        # Target verisi ile merge'leyip na'lar 0 ile doluyor\n        inputCustomerData = pd.merge(filteredActiveCustomer, customerData, how = \"left\", on = \"BASE_CUSTOMER_ID\")\n        mergedTargetByCustomerID = pd.merge(inputCustomerData, filteredTargetData, how = \"left\", on = \"CUSTOMER_ID\")\n        mergedTargetByCustomerID.TARGET = mergedTargetByCustomerID.TARGET.fillna(0)\n        # Inputlar olmadan baz tablosu\n        finalBaseDataWithoutInput = mergedTargetByCustomerID[[\"BASE_CUSTOMER_ID\",\"TARGET\"]].groupby(by = \"BASE_CUSTOMER_ID\").max().reset_index()\n        # Ki\u015finin bak\u0131m\/servis verileri\n        finalData = pd.merge(finalBaseDataWithoutInput, customerData[[\"BASE_CUSTOMER_ID\",\"GENDER\", \"MARITAL_STATUS\", \"AGE\", \"OCCUPATION\"]].drop_duplicates(subset = [\"BASE_CUSTOMER_ID\"], keep = \"first\"), how = \"left\", on = \"BASE_CUSTOMER_ID\")\n        tempBakimData = pd.merge(bakimData, customerRelatedData[[\"BASE_CUSTOMER_ID\", \"VEHICLE_ID\"]], how = \"left\", on = \"VEHICLE_ID\")\n        tempBakimData = tempBakimData[tempBakimData.CREATE_DATE < date].drop([\"CREATE_DATE\",\"VEHICLE_ID\"], axis = 1)\n        tempBakimDataBakim = tempBakimData[tempBakimData.IS_MAINTENANCE == 1]\n        tempBakimDataServis = tempBakimData[tempBakimData.IS_MAINTENANCE == 2]\n        tempBakimDataBakim = tempBakimDataBakim.groupby(\"BASE_CUSTOMER_ID\").agg({'IS_MAINTENANCE': [np.sum], 'TOTAL_AMOUNT_TL': [np.mean]})\n        tempBakimDataBakim.columns = tempBakimDataBakim.columns.droplevel(0)\n        tempBakimDataBakim = tempBakimDataBakim.reset_index()\n        tempBakimDataBakim.rename(columns = {\"sum\": \"TOTAL_MAINTENANCE\", \"mean\": \"MEAN_EXPENSE_MAINTENANCE\"}, inplace = True)\n        finalData = pd.merge(finalData, tempBakimDataBakim, how = \"left\", on = \"BASE_CUSTOMER_ID\")\n        tempBakimDataServis = tempBakimDataServis.groupby(\"BASE_CUSTOMER_ID\").agg({'IS_MAINTENANCE': [np.sum], 'TOTAL_AMOUNT_TL': [np.mean]})\n        tempBakimDataServis.columns = tempBakimDataServis.columns.droplevel(0)\n        tempBakimDataServis = tempBakimDataServis.reset_index()\n        tempBakimDataServis.rename(columns = {\"sum\": \"TOTAL_SERVICE\", \"mean\": \"MEAN_EXPENSE_SERVICE\"}, inplace = True)\n        tempBakimDataServis.TOTAL_SERVICE = tempBakimDataServis.TOTAL_SERVICE \/ 2 \n        finalData = pd.merge(finalData, tempBakimDataServis, how = \"left\", on = \"BASE_CUSTOMER_ID\")\n        # M\u00fc\u015fterinin t an\u0131nda sahip oldu\u011fu s\u0131f\u0131r ara\u00e7 say\u0131s\u0131\n        tempSifirAracData = sifirAracData[sifirAracData.CREATE_DATE < first_date]\n        tempSifirAracData = pd.merge(tempSifirAracData, customerData[[\"BASE_CUSTOMER_ID\", \"CUSTOMER_ID\"]], how = \"left\", on = \"CUSTOMER_ID\").drop([\"CREATE_DATE\",\"CUSTOMER_ID\"], axis = 1)\n        tempSifirAracData = tempSifirAracData.groupby(\"BASE_CUSTOMER_ID\").count().reset_index()\n        tempSifirAracData.rename(columns = {\"VEHICLE_ID\": \"COUNT_NEW_CAR\"}, inplace = True)\n        finalData = pd.merge(finalData, tempSifirAracData, how = \"left\", on = \"BASE_CUSTOMER_ID\")\n        # M\u00fc\u015fterinin t an\u0131na kadar a\u00e7t\u0131\u011f\u0131 sat\u0131\u015f dosyas\u0131\n        tempSalesData = salesData[[\"CUSTOMER_ID\", \"SALESFILE_ID\",\"SF_CREATE_DATE\"]]\n        tempSalesData = tempSalesData[tempSalesData.SF_CREATE_DATE < first_date]\n        tempSalesData = pd.merge(tempSalesData, customerData[[\"BASE_CUSTOMER_ID\", \"CUSTOMER_ID\"]], how = \"left\",on = \"CUSTOMER_ID\").drop([\"CUSTOMER_ID\", \"SF_CREATE_DATE\"], axis = 1)\n        tempSalesData = tempSalesData.groupby(\"BASE_CUSTOMER_ID\").count().reset_index()\n        tempSalesData.rename(columns = {\"SALESFILE_ID\": \"TOTAL_COUNT_SALESFILE\"}, inplace = True)\n        finalData = pd.merge(finalData, tempSalesData, how = \"left\", on = \"BASE_CUSTOMER_ID\")\n        # External Veriler\n        finalData[\"MEAN_DOLAR\"] = dolarData[(dolarData.DATE > first_date) & (dolarData.DATE <= last_date)].DOLAR_KURU.mean()\n        finalData[\"MEAN_FAIZ\"] = faizData[(faizData.DATE > first_date) & (faizData.DATE <= last_date)].FAIZ_ORANI.mean()\n        finalData[\"MEAN_OTV\"] = otvData[(otvData.DATE > first_date) & (otvData.DATE <= last_date)].OTV.mean()\n        # Ortalama s\u0131f\u0131r ara\u00e7 elinde tutma\n        #dateDiffTempData = customerRelatedData[[\"BASE_CUSTOMER_ID\",\"DATE_DIFF\"]].groupby(\"BASE_CUSTOMER_ID\").mean().reset_index()\n        #finalData = pd.merge(finalData, dateDiffTempData, how = \"left\", on = \"BASE_CUSTOMER_ID\")\n        # M\u00fc\u015fteri ald\u0131\u011f\u0131 ara\u00e7lar\u0131 ortalama ne kadar elinde tutmu\u015f (\u015eu an sahip oldu\u011fu)\n        tempCustomerRelatedDataForCarOwned = customerRelatedData[(customerRelatedData.START_DATE <= first_date) & (customerRelatedData.FK_RELATION_STATUS_ID == 1)] \n        tempCustomerRelatedDataForCarOwned[\"START_TODAY_DIFF\"] = first_date - tempCustomerRelatedDataForCarOwned.START_DATE\n        tempCustomerRelatedDataForCarOwned.START_TODAY_DIFF = [i.days for i in tempCustomerRelatedDataForCarOwned.START_TODAY_DIFF]\n        tempCustomerRelatedDataForCarOwned = tempCustomerRelatedDataForCarOwned[[\"BASE_CUSTOMER_ID\", \"START_TODAY_DIFF\"]].groupby(\"BASE_CUSTOMER_ID\").mean().reset_index()\n        finalData = pd.merge(finalData, tempCustomerRelatedDataForCarOwned, how = \"left\", on = \"BASE_CUSTOMER_ID\") \n        timedelta = datetime.today() - start\n        print(f\"Time: {timedelta}\")\n        ### final\n        if idx == (len(dates) - 1):\n            print(idx, \"Validation\")\n            validationData = validationData.append(finalData)\n        else:\n            print(idx, \"Train\")\n            #finalData = sampleData(finalData) ## Sample'la hi\u00e7 u\u011fra\u015fma skolar artmaz ise yeni model olu\u015ftururken. \u0130\u00e7erde sample al\n            #print(\"Sampled\")\n            trainData = trainData.append(finalData)\n    if write == True:\n        trainData.to_csv(f\"modelTrainData{datetime.today().day}-{datetime.today().month}-{datetime.today().year}--{appendix}.csv\", index = False)\n        validationData.to_csv(f\"modelValidationData{datetime.today().day}-{datetime.today().month}-{datetime.today().year}--{appendix}.csv\", index = False)\n    return trainData, validationData","d10f932f":"def createSubmissionData(submissionData, write = False, appendix = None):\n    print(\"Started!\")\n    start = datetime.today()\n    finalData = pd.merge(submissionData, customerData[[\"BASE_CUSTOMER_ID\",\"GENDER\", \"MARITAL_STATUS\", \"AGE\", \"OCCUPATION\"]].drop_duplicates(subset = [\"BASE_CUSTOMER_ID\"], keep = \"first\"), how = \"left\", on = \"BASE_CUSTOMER_ID\")\n    tempBakimData = pd.merge(bakimData, customerRelatedData[[\"BASE_CUSTOMER_ID\", \"VEHICLE_ID\"]], how = \"left\", on = \"VEHICLE_ID\")\n    #tempBakimData = tempBakimData[tempBakimData.CREATE_DATE < date].drop([\"CREATE_DATE\",\"VEHICLE_ID\"], axis = 1)\n    tempBakimDataBakim = tempBakimData[tempBakimData.IS_MAINTENANCE == 1]\n    tempBakimDataServis = tempBakimData[tempBakimData.IS_MAINTENANCE == 2]\n    tempBakimDataBakim = tempBakimDataBakim.groupby(\"BASE_CUSTOMER_ID\").agg({'IS_MAINTENANCE': [np.sum], 'TOTAL_AMOUNT_TL': [np.mean]})\n    tempBakimDataBakim.columns = tempBakimDataBakim.columns.droplevel(0)\n    tempBakimDataBakim = tempBakimDataBakim.reset_index()\n    tempBakimDataBakim.rename(columns = {\"sum\": \"TOTAL_MAINTENANCE\", \"mean\": \"MEAN_EXPENSE_MAINTENANCE\"}, inplace = True)\n    finalData = pd.merge(finalData, tempBakimDataBakim, how = \"left\", on = \"BASE_CUSTOMER_ID\")\n    tempBakimDataServis = tempBakimDataServis.groupby(\"BASE_CUSTOMER_ID\").agg({'IS_MAINTENANCE': [np.sum], 'TOTAL_AMOUNT_TL': [np.mean]})\n    tempBakimDataServis.columns = tempBakimDataServis.columns.droplevel(0)\n    tempBakimDataServis = tempBakimDataServis.reset_index()\n    tempBakimDataServis.rename(columns = {\"sum\": \"TOTAL_SERVICE\", \"mean\": \"MEAN_EXPENSE_SERVICE\"}, inplace = True)\n    tempBakimDataServis.TOTAL_SERVICE = tempBakimDataServis.TOTAL_SERVICE \/ 2 \n    finalData = pd.merge(finalData, tempBakimDataServis, how = \"left\", on = \"BASE_CUSTOMER_ID\")\n    # M\u00fc\u015fterinin t an\u0131nda sahip oldu\u011fu s\u0131f\u0131r ara\u00e7 say\u0131s\u0131\n    #tempSifirAracData = sifirAracData[sifirAracData.CREATE_DATE < first_date]\n    tempSifirAracData = sifirAracData\n    tempSifirAracData = pd.merge(tempSifirAracData, customerData[[\"BASE_CUSTOMER_ID\", \"CUSTOMER_ID\"]], how = \"left\", on = \"CUSTOMER_ID\").drop([\"CREATE_DATE\",\"CUSTOMER_ID\"], axis = 1)\n    tempSifirAracData = tempSifirAracData.groupby(\"BASE_CUSTOMER_ID\").count().reset_index()\n    tempSifirAracData.rename(columns = {\"VEHICLE_ID\": \"COUNT_NEW_CAR\"}, inplace = True)\n    finalData = pd.merge(finalData, tempSifirAracData, how = \"left\", on = \"BASE_CUSTOMER_ID\")\n    # M\u00fc\u015fterinin t an\u0131na kadar a\u00e7t\u0131\u011f\u0131 sat\u0131\u015f dosyas\u0131\n    tempSalesData = salesData[[\"CUSTOMER_ID\", \"SALESFILE_ID\",\"SF_CREATE_DATE\"]]\n    #tempSalesData = tempSalesData[tempSalesData.SF_CREATE_DATE < first_date]\n    tempSalesData = pd.merge(tempSalesData, customerData[[\"BASE_CUSTOMER_ID\", \"CUSTOMER_ID\"]], how = \"left\",on = \"CUSTOMER_ID\").drop([\"CUSTOMER_ID\", \"SF_CREATE_DATE\"], axis = 1)\n    tempSalesData = tempSalesData.groupby(\"BASE_CUSTOMER_ID\").count().reset_index()\n    tempSalesData.rename(columns = {\"SALESFILE_ID\": \"TOTAL_COUNT_SALESFILE\"}, inplace = True)\n    finalData = pd.merge(finalData, tempSalesData, how = \"left\", on = \"BASE_CUSTOMER_ID\")\n    # External Veriler\n    finalData[\"MEAN_DOLAR\"] = dolarData[(dolarData.DATE > datetime.strptime(\"30\/06\/2021\", '%d\/%m\/%Y')) & (dolarData.DATE <= datetime.strptime(\"31\/08\/2021\", '%d\/%m\/%Y'))].DOLAR_KURU.mean()\n    finalData[\"MEAN_FAIZ\"] = faizData[(faizData.DATE > datetime.strptime(\"30\/06\/2021\", '%d\/%m\/%Y')) & (faizData.DATE <= datetime.strptime(\"31\/08\/2021\", '%d\/%m\/%Y'))].FAIZ_ORANI.mean()\n    finalData[\"MEAN_OTV\"] = otvData[(otvData.DATE > datetime.strptime(\"30\/06\/2021\", '%d\/%m\/%Y')) & (otvData.DATE <= datetime.strptime(\"31\/08\/2021\", '%d\/%m\/%Y'))].OTV.mean()\n    # Ortalama s\u0131f\u0131r ara\u00e7 elinde tutma\n    #dateDiffTempData = customerRelatedData[[\"BASE_CUSTOMER_ID\",\"DATE_DIFF\"]].groupby(\"BASE_CUSTOMER_ID\").mean().reset_index()\n    #finalData = pd.merge(finalData, dateDiffTempData, how = \"left\", on = \"BASE_CUSTOMER_ID\")\n   # M\u00fc\u015fteri ald\u0131\u011f\u0131 ara\u00e7lar\u0131 ortalama ne kadar elinde tutmu\u015f (\u015eu an sahip oldu\u011fu)\n    tempCustomerRelatedDataForCarOwned = customerRelatedData[(customerRelatedData.START_DATE <= datetime.strptime(\"30\/06\/2021\", '%d\/%m\/%Y')) & (customerRelatedData.FK_RELATION_STATUS_ID == 1)] \n    tempCustomerRelatedDataForCarOwned[\"START_TODAY_DIFF\"] = datetime.strptime(\"30\/06\/2021\", '%d\/%m\/%Y') - tempCustomerRelatedDataForCarOwned.START_DATE\n    tempCustomerRelatedDataForCarOwned.START_TODAY_DIFF = [i.days for i in tempCustomerRelatedDataForCarOwned.START_TODAY_DIFF]\n    tempCustomerRelatedDataForCarOwned = tempCustomerRelatedDataForCarOwned[[\"BASE_CUSTOMER_ID\", \"START_TODAY_DIFF\"]].groupby(\"BASE_CUSTOMER_ID\").mean().reset_index()\n    finalData = pd.merge(finalData, tempCustomerRelatedDataForCarOwned, how = \"left\", on = \"BASE_CUSTOMER_ID\") \n    finalData.drop(\"Expected\", axis = 1, inplace =True)\n    print(\"Done!\")\n    print(f\"Time: {datetime.today() - start}\")\n    if write == True:\n        finalData.to_csv(f\"modelSubmissionData{datetime.today().day}-{datetime.today().month}-{datetime.today().year}--{appendix}.csv\", index = False)\n    return finalData","53e56b19":"trainData, validationData = createData(date_list, True, \"5\")","75c7826d":"trainData.TARGET.value_counts()","57b18cf1":"subData = createSubmissionData(submissionData, True, \"5\")","b7231a3b":"subData","fa1bab9f":"# Target Prep."}}