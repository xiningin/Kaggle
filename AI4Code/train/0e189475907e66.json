{"cell_type":{"41336111":"code","6b6b5919":"code","480230cd":"code","d4c7308a":"code","c51548da":"code","a0dbd548":"code","403a4aac":"code","8555ded6":"code","0eb27beb":"code","7be328cb":"code","75915c53":"code","b7f38d58":"code","02594c03":"markdown","ad8e82ae":"markdown","08a19d6e":"markdown","ddc98f6c":"markdown","8e6c1681":"markdown","c91352e9":"markdown","43aaf23a":"markdown","4b15dc43":"markdown","b53289f4":"markdown","99a74b62":"markdown","9a5385f4":"markdown","3b5e851d":"markdown","6d42ce8e":"markdown"},"source":{"41336111":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6b6b5919":"#import dataset \n\ndf=pd.read_csv('\/kaggle\/input\/airquality\/Air_Quality.csv',parse_dates=['Date'],index_col='Date')\ndf.head()\n","480230cd":"# EDA : describe data quickly by pandas-profiling\n\nfrom pandas_profiling import ProfileReport\nprofile=ProfileReport(df, title='EDA of Air-Quality',html={'style':{'full_width':True}})\n","d4c7308a":"profile.to_widgets()","c51548da":"#visualize data \n\n# Import missingno as msno\nimport missingno as msno\nimport matplotlib.pyplot as plt\n\n# Plot amount of missingness\nmsno.bar(df) # you can see pandas-profilin count part\n\nplt.show()","a0dbd548":"# Plot nullity matrix of airquality with frequency 'M'\nmsno.matrix(df, freq='M') # this part actually displays the missingness types, also more visible version of pandas-profiling matrix.\n\nplt.show()","403a4aac":"### Forward Fill\n# Impute airquality DataFrame with ffill method\nffill_imputed = df.copy(deep=True)\n\nffill_imputed.fillna(method='ffill',inplace=True)\n\n# Plot the imputed DataFrame ffill_imp in red dotted style \nffill_imputed['Ozone'].plot(color='red', marker='o', linestyle='dotted', figsize=(30, 5))\n\n# Plot the airquality DataFrame with title\ndf['Ozone'].plot(title='Ozone', marker='o', figsize=(30, 5))\n\nplt.show()","8555ded6":"### Back Fill Fill\n# Impute airquality DataFrame with bfill method\nbfill_imputed = df.copy(deep=True)\n\nbfill_imputed.fillna(method='bfill',inplace=True)\n\n# Plot the imputed DataFrame bfill_imp in red dotted style \nbfill_imputed['Ozone'].plot(color='red', marker='o', linestyle='dotted', figsize=(30, 5))\n\n# Plot the airquality DataFrame with title\ndf['Ozone'].plot(title='Ozone', marker='o', figsize=(30, 5))\n\nplt.show()","0eb27beb":"# Interpolate the NaNs quadratically\n\nquadratic_imput=df.copy(deep=True)\n\nquadratic_imput.interpolate(method='quadratic', inplace=True)\n\nquadratic_imput['Ozone'].plot(color='red', marker='o', linestyle='dotted', figsize=(30, 5))\n\ndf['Ozone'].plot(title='Ozone', marker='o', figsize=(30, 5))\n","7be328cb":"# Interpolate the NaNs by nearest method\n\nnearest_imput=df.copy(deep=True)\n\nnearest_imput.interpolate(method='nearest', inplace=True)\n\nnearest_imput['Ozone'].plot(color='red', marker='o', linestyle='dotted', figsize=(30, 5))\n\ndf['Ozone'].plot(title='Ozone', marker='o', figsize=(30, 5))","75915c53":"# Interpolate the NaNs by linear method\n\nlinear_imput=df.copy(deep=True)\n\nlinear_imput.interpolate(method='linear', inplace=True)\n\nlinear_imput['Ozone'].plot(color='red', marker='o', linestyle='dotted', figsize=(30, 5))\n\ndf['Ozone'].plot(title='Ozone', marker='o', figsize=(30, 5))","b7f38d58":"# Set nrows to 3 and ncols to 1\nfig, axes = plt.subplots(6, 1, figsize=(30, 20))\n\n# Create a dictionary of interpolations\ninterpolations = {'Airquality': df, 'Back-fill':bfill_imputed, 'Forward-fill':ffill_imputed,\n                  'Linear Interpolation': linear_imput, 'Quadratic Interpolation': quadratic_imput, \n                  'Nearest Interpolation': nearest_imput}\n\n# Loop over axes and interpolations\nfor ax, df_key in zip(axes, interpolations):\n  # Select and also set the title for a DataFrame\n  interpolations[df_key].Ozone.plot(color='red', marker='o', \n                                 linestyle='dotted', ax=ax)\n  df.Ozone.plot(title=df_key + ' - Ozone', marker='o', ax=ax)\n  \nplt.show()\n","02594c03":"# Analysis of Missing Data by Visualisation","ad8e82ae":"The purpose of the kernel is that demonstrates ways of handling with missing data on time series dataset and creating starting point to prepare the ground to develop intellectuality and techniques about dealing with missing data.\n\n1.  Loading Data\n2.  Exploratory Analysis of Data ( EDA )\n3.  Analysis of Missing Data by Visualisation\n4.  Impututation Methods\n5.  Comparision of Results\n\n","08a19d6e":"# Loading Dataset","ddc98f6c":"# Time Series Imputation Techniques\n\n**** The Fillna() Method\n\nThe method fills missing values according to sequency condition. It means that the method replaces 'nan's value with last observed non-nan value or next observed non-nan value.\n\n1. backfill - bfill    : according to last observed value\n2. forwardfill - ffill : according to next observed value\n\n**** Interpolate() Method\n\nThe method is more complex than above fillna() method. It consists of different methodologies, including 'linear','quadratic','nearest'.\n\n1. Linear    : Impute linearly or with equidistant values, draw linearity between 2 non missing value to fill gap.\n2. Quadratic : Impute parabolic trajectory in negative direction to positive, it has large bias in some condition.\n3. Nearest   : Impute with the nearest observable value, it consists of both bfill and ffill method actually.\n\n","8e6c1681":"There are many ways and libraries to elucidate features of data. The pandas-profiling report is be used in this analysis, because of both comprehensive result and given short path-code by profiling report.","c91352e9":"Below, visualization consists of 'Ozone' variable only, because clearly demonstrate effects of different kind of techniques.","43aaf23a":"# Exploratory Analysis","4b15dc43":"# How do we decide what to do with null value\n\nFirst of all, we should check importance of missing values. This means how variables which have missing values affect the dataset. Whether it is ignorable or not.\u0130f it is ignorable, we can remove them by using pairwise method or listwise method. However, if it is not ignorable we implement different imputation methodologies.\n\n****The Types of Missingness\n\n1. MCAR ( Missing completely at Random)\n2. MAR  (Missing at Random)\n3. MNAR (Missing not at Random)\n\nMCAR means that \"Missingness has no relationship between any values, observed or missing\". Therefore, in this situation you can remove missing values. For that, you can use pairwise method (delete column missing value; minimize lost data) or listwise method (delete row missing value). MAR means that \"There is a systematic relationship between missingness and other observed data, but not the missing data\". Final, MNAR means that \"There is a relationship between missingness and its values, missing or non-missing\".\n\n**** How determine which kind of Missingness\n\nThere are a lot of ways for that. I prefer basic visualization to determine type of missingness. The package of 'missingno' provides us with some brilliant demonstration to guide for our decision. Actually, the pandas-profiling shows us which variable have what kind of missingness type. You can compare similarity of outputs.","b53289f4":"# Pandas-Profiling -- Detect Missing Values\n\nYou can pass over from one widget to another one to see description of dataset.In this kernel, we will focus on missing variable. You can see them on Overview part throughout both being sum and percantange. Also, you can seperately investifate all variables' descriptions on variable part. In missing widget, you can study missing variable by different ways, including dendrogram,heatmap,matrix and count calculations. Futhermore, if you look at warning part you can see which variables have missing value and their proportion.\n\nBeyond above, in the interaction widget, you can see how variables correlated with each other and not by scatter plot. Also, you can look at correlation sheet for heatmap and observe correlation by different calculation methodologies.\n","99a74b62":"In our small dataset, variable of 'Ozone' and 'Solar' have missing values. As you know, handling with missing value is important part of preprocessing data because to find tidy and clear data is so hard. There are two options to deal with missing values; removing or imputing. Also we can create dummy variables and bining missing values into one group, but in this dataset we have not categorical variables.","9a5385f4":"# Comparision of Results","3b5e851d":"# ***AIR-QUALITY -- **Handle with Missing data on Time Series**","6d42ce8e":"When we look at 'Ozone' variable, we can see missingness frequency. It is absolutely MNAR type. Therefore, we will select imputation technique rather than removing Also, we may say abouy 'Solar' variable as being MAR type. So, we will impute them also."}}