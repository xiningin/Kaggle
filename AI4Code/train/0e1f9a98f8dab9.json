{"cell_type":{"88b7f60a":"code","4225b21e":"code","59233e0f":"code","feb41377":"code","ef657eaf":"code","e0ccedf9":"code","727549e2":"code","9ba01473":"code","530ea4a3":"code","c68c900f":"code","87d7673e":"code","ace99bf1":"code","7ce852a3":"code","27fff88f":"code","482e0fbe":"code","04791a42":"code","06bdbd0e":"code","8b7ec5ed":"code","0da9e2cf":"code","adcee5a9":"code","913b6868":"code","a821146e":"code","5d6fbfcb":"code","3e5b0be7":"code","3b743ff5":"code","42a69d44":"code","779b2831":"code","4397bc88":"code","6434085b":"code","23598619":"code","9e1f96db":"code","4550fd08":"code","760d548e":"code","b1e13bec":"code","a617f077":"code","03054acc":"code","c86f932f":"code","e8c55706":"code","fb5a926b":"code","42ee3349":"code","409de08a":"code","2a10f702":"code","6776c8b2":"code","236ad874":"code","bb08602d":"code","31a6fa8e":"code","47cc7995":"code","fbe8ebe8":"code","e05e0696":"code","20180ca4":"code","c718d968":"code","cf811231":"markdown","d70c8770":"markdown","01243343":"markdown","9ebad765":"markdown","820d32a8":"markdown","ebc6d5c7":"markdown","14f74470":"markdown","addbad20":"markdown","0176381c":"markdown","0e7f5a21":"markdown","4ef747c7":"markdown","90257b92":"markdown","cba2ad08":"markdown","c98f9e58":"markdown"},"source":{"88b7f60a":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4225b21e":"!pip install feature-engine","59233e0f":"!pip install eli5","feb41377":"!pip install shap","ef657eaf":"import os\nimport joblib\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\nnp.random.seed(0)\n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\n# Revise according to your data directory\nPATH = '\/kaggle\/input\/ibm-hr-data\/'\nFILE = 'IBM_HR_Data.csv'","e0ccedf9":"df = pd.read_csv(filepath_or_buffer=os.path.join(PATH, FILE))\n\n# We are dropping the following columns since they are not features, just ID nos and so on. Plus, 'StandardHours' contains no variation\ndf.drop(labels=['EmployeeCount', 'EmployeeNumber', 'ApplicationID', 'Over18', 'StandardHours'], axis='columns', inplace=True)\n\n# Overview of dtypes and Missing Values\ndef observe_data(df):\n    '''\n    Presents exploratory data summary in a crisp manner; \n    with dtype, null values, total values and feature summary columns.\n    '''\n    df = df.copy()\n    properties = pd.Series()\n    for i in df.columns.tolist():\n        if pd.api.types.is_object_dtype(df[i]):\n            properties[i] = df[i].unique().tolist()\n        elif pd.api.types.is_numeric_dtype(df[i]):\n            properties[i] = round(df[i].describe(),2).tolist()\n        elif pd.api.types.is_datetime64_any_dtype(df[i]):\n            properties[i] = [df[i].min().strftime(format='%Y-%m-%d'), df[i].max().strftime(format='%Y-%m-%d')]\n        elif pd.api.types.is_categorical_dtype(df[i]):\n            properties[i] = list(df[i].unique())\n    observe = pd.concat([df.dtypes, df.isnull().sum(), df.notnull().sum(), properties], axis=1)\n    observe.columns = ['dtypes', 'Missing_Vals', 'Total_Vals', 'Properties']\n    return observe\n\nobserve_data(df)","727549e2":"# We will binarize 'NumCompaniesWorked'\ndef binarize(column, bins, num_categories=[1,2,3]):\n    x = pd.cut(x=column.tolist(), bins=bins, include_lowest=True)\n    x.categories = num_categories\n    tmp = pd.concat([column, pd.Series(x)], axis=1)\n    \n    column = x\n    return column","9ba01473":"# Categories are binarized into: 0-2 years: single; 3-5 years: few, 6-9 years: many\nbins = pd.IntervalIndex.from_tuples([(-1, 2), (2, 5), (5, 9)])\n\n# transforming 'NumCompaniesWorked' and a few more variables\ndf['NumCompaniesWorked'] = binarize(column=df['NumCompaniesWorked'], bins=bins).astype('O')\ndf['TrainingTimesLastYear'] = df['TrainingTimesLastYear'].astype('O')\ndf['WorkLifeBalance'] = df['WorkLifeBalance'].map({1:'Low',2:'Medium',3:'High',4:'Very High',5:'Very High'})\ndf['BusinessTravel'] = df['BusinessTravel'].map({'Travel_Rarely':2, 'Travel_Frequently':3, 'Non-Travel':1})","530ea4a3":"# List of all variables that are of 'O' type\ncategorical_features = df.select_dtypes(include=['object','category']).columns.tolist()\ncategorical_features.remove('Attrition')\n\n# A view of categorical features\nprint('\\033[1m' +'categorical features: ', '\\033[0m',categorical_features)\nprint('='*100)\n# List of all variables that are of 'float' or 'int' type\nnumerical_features = df.select_dtypes(include=np.number).columns.tolist()\nprint('\\033[1m' +'numerical features: ', '\\033[0m',numerical_features)\nprint('='*100)\n\n# This lists shall be expanded after categorical encoding with categorical_features \nordinal_features = ['Education', 'EnvironmentSatisfaction', 'JobInvolvement', 'JobLevel', 'JobSatisfaction', 'PerformanceRating', 'RelationshipSatisfaction', 'StockOptionLevel','BusinessTravel', 'NumCompaniesWorked']\nnominal_features = [i for i in categorical_features if i not in ordinal_features]\ncommon = list(set(ordinal_features).intersection(set(numerical_features)))\nactual_numerical = [i for i in numerical_features if i not in common]\nprint('\\033[1m' +'ordinal features: ', '\\033[0m',ordinal_features) #\nprint('='*100)\nprint('\\033[1m' +'nominal features: ', '\\033[0m',nominal_features) #\nprint('='*100)\nprint('\\033[1m' +'actual numerical: ', '\\033[0m',actual_numerical) #","c68c900f":"# If we recall, all the variables with missing values were of numerical types,\n# Let's view them once again to ensure the actual_numerical dtypes captures all of them\nobserve_data(df[actual_numerical])","87d7673e":"# The missing values are found in 'Age', 'DailyRate', 'HourlyRate', 'MonthlyIncome' and 'MonthlyRate'; all are numerical type\ndf.loc[df.isna().any(axis=1),numerical_features]","ace99bf1":"# Scikit-learn libraries\nfrom sklearn.preprocessing import StandardScaler, QuantileTransformer\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, StackingClassifier, VotingClassifier\nfrom sklearn.metrics import recall_score, classification_report, confusion_matrix, roc_curve\nfrom sklearn import tree\nfrom sklearn.linear_model import LogisticRegression\n\n# For oversampling through imbalance-learn\nfrom imblearn.pipeline import make_pipeline, Pipeline\nfrom imblearn.combine import SMOTETomek\n\n# For data processing through feature-engine\nfrom feature_engine.variable_transformers import YeoJohnsonTransformer\nfrom feature_engine.missing_data_imputers import MeanMedianImputer\nfrom feature_engine.categorical_encoders import WoERatioCategoricalEncoder\n\n# For visualizing trees\nfrom graphviz import Source\nfrom IPython.display import SVG, Image\n\n# Model Interpretation\nimport eli5\nimport shap","7ce852a3":"shap.initjs()","27fff88f":"# Data preprocessing pipeline\n## Train-Test split\nX = df.drop(labels='Attrition', axis=1)\ny = df['Attrition'].map({'Voluntary Resignation':1, 'Current employee':0})\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0, stratify=y)\n\n## Imputing numerical missing values from their respective 'mean'\/ 'median'\nimpute = MeanMedianImputer(imputation_method='median', variables=actual_numerical)\n\n## Transforming nominal categorical features based on their probability ratio (ordinal features are already transformed)\ntransform_nominal = WoERatioCategoricalEncoder(encoding_method='ratio', variables=nominal_features)\n\n## Pre-processing pipeline\npreprocessor = make_pipeline(impute, transform_nominal)\n\n## Transforming the variable\nX_train = preprocessor.fit_transform(X_train, y_train)\nX_test = preprocessor.transform(X_test)\n\n## Oversampling using SMOTE and creating hard boundaries using Tomac lines\nsmotetomec = SMOTETomek(random_state=0)\nX_sample, y_sample = smotetomec.fit_resample(X_train, y_train)","482e0fbe":"## Instantiating Random Forest classifier\nclassifier = RandomForestClassifier(max_depth=5, min_samples_leaf=100, class_weight={1:1.5}, random_state=0)\n\n## Parameters grid\nparameter_grid = {\n    'criterion': ['entropy', 'gini'], \n    'min_samples_leaf': [10, 50, 80], \n    'max_depth':[2,3,4,5]} #\n\n## Instantiating and fitting GridsearchCV to the train set\ngscvrf = GridSearchCV(estimator=classifier, param_grid=parameter_grid, cv=10, iid=False, scoring='f1_weighted', verbose=False)\ngscvrf.fit(X_sample, y_sample)\n\n## Predicting test outcomes\ny_pred = gscvrf.predict(X_test)\n\n## confusion matrix\ncf = pd.DataFrame(confusion_matrix(y_test, y_pred), index=['current_employee', 'resigned'], columns=['current_employee', 'resigned'])[::-1].T[::-1]","04791a42":"# Model Evaluation\nprint(pd.Series(gscvrf.best_params_))\nprint('='*40)\nprint('recall score: %.3f' % recall_score(y_test, y_pred))\nprint('='*40)\nprint(classification_report(y_test, y_pred))\nprint('='*40)\nprint(cf)","06bdbd0e":"# ROC Curve\ny_pred_train_prob = gscvrf.predict_proba(X_train)[:,1]\ny_pred_test__prob = gscvrf.predict_proba(X_test)[:,1]\n\nfp_rate_train, tp_rate_train, thresh1 = roc_curve(y_train, y_pred_train_prob)\nfp_rate_test, tp_rate_test, thresh2 = roc_curve(y_test, y_pred_test__prob)\n\nplt.figure(figsize=(8,8))\nplt.plot(fp_rate_train, tp_rate_train, label='train')\nplt.plot(fp_rate_test, tp_rate_test, label='test')\nplt.plot([0, 1], ls=\"--\")\nplt.plot([0, 0], [1, 0] , c=\".7\"), plt.plot([1, 1] , c=\".7\")\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.title('ROC Curve', fontweight='semibold')\nplt.legend(loc='center left', bbox_to_anchor=(1.,.5), frameon=False)\nplt.grid()\nplt.show()","8b7ec5ed":"# Let's interpret mean weightage of each feature in the model, globally\neli5.show_weights(gscvrf.best_estimator_, feature_names=X_train.columns.tolist())","0da9e2cf":"# We can also view mean weightage of a sample observation, i.e., local interpret\neli5.show_prediction(estimator=gscvrf.best_estimator_, doc=X_test.sample(), feature_names=X_train.columns.tolist(), show_feature_values=True)","adcee5a9":"observations = shap.sample(X_test)\nexplainer_rf = shap.TreeExplainer(gscvrf.best_estimator_)\n\nshap_vals_rf = explainer_rf.shap_values(observations)","913b6868":"shap.summary_plot(shap_values=shap_vals_rf, features=X_test)","a821146e":"shap.force_plot(base_value=explainer_rf.expected_value[1], shap_values=shap_vals_rf[1], features=observations, feature_names=X_test.columns.tolist())","5d6fbfcb":"joblib.dump(value=gscvrf, filename=os.path.join(PATH, 'randomforest.pkl'))","3e5b0be7":"## Instantiating Decision Tree as base classifier\nbase_classifier = tree.DecisionTreeClassifier(max_depth=5, min_impurity_decrease=0.001, class_weight={1:1.5})\n\n## Instantiating Adaptive Boosting as meta classifier\nmeta_classifier = AdaBoostClassifier(learning_rate=0.1, random_state=0, base_estimator=base_classifier)\n\n## Parameters grid\nparameter_grid = {\n    'n_estimators': [i for i in range(20,50,10)], \n    'learning_rate': [i for i in np.linspace(start=0.1, stop=0.25, num=5)]}\n\n## Instantiating and fitting GridsearchCV to the train set\ngscvab = GridSearchCV(estimator=meta_classifier, param_grid=parameter_grid, cv=10, iid=False, n_jobs=-1, scoring='f1_weighted', verbose=False)\ngscvab.fit(X_sample, y_sample)\n\n## Predicting test outcomes\ny_pred = gscvab.predict(X_test)\n\n## confusion matrix\ncf = pd.DataFrame(confusion_matrix(y_test, y_pred), index=['current_employee', 'resigned'], columns=['current_employee', 'resigned'])[::-1].T[::-1]","3b743ff5":"# Model Evaluation\nprint(pd.Series(gscvab.best_params_))\nprint('='*40)\nprint('recall score: %.3f' % recall_score(y_test, y_pred))\nprint('='*40)\nprint(classification_report(y_test, y_pred))\nprint('='*40)\nprint(cf)","42a69d44":"# ROC Curve\ny_pred_train_prob = gscvab.predict_proba(X_train)[:,1]\ny_pred_test__prob = gscvab.predict_proba(X_test)[:,1]\n\nfp_rate_train, tp_rate_train, thresh1 = roc_curve(y_train, y_pred_train_prob)\nfp_rate_test, tp_rate_test, thresh2 = roc_curve(y_test, y_pred_test__prob)\n\nplt.figure(figsize=(8,8))\nplt.plot(fp_rate_train, tp_rate_train, label='train')\nplt.plot(fp_rate_test, tp_rate_test, label='test')\nplt.plot([0, 1], ls=\"--\")\nplt.plot([0, 0], [1, 0] , c=\".7\"), plt.plot([1, 1] , c=\".7\")\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.title('ROC Curve', fontweight='semibold')\nplt.legend(loc='center left', bbox_to_anchor=(1.,.5), frameon=False)\nplt.grid()\nplt.show()","779b2831":"# # Let's interpret mean weightage of each feature in the model, globally\n# eli5.show_weights(gscvab.best_estimator_, feature_names=X_train.columns.tolist())\n\n# observations = X_test.sample(100)\n# explainer_rf = shap.BruteForceExplainer(gscvab.best_estimator_.predict, data=observations)\n\n# shap_vals_rf = explainer_rf.shap_values(observations)\n\n# shap.summary_plot(shap_values=shap_vals_rf, features=X_test)","4397bc88":"# Model Interpretation\npd.Series(gscvab.best_estimator_.feature_importances_, index=X_train.columns.tolist()).sort_values(ascending=False).plot(kind='bar', figsize=(10,6), title='Feature Importance');","6434085b":"# shap.force_plot(base_value=explainer_rf.expected_value[1], shap_values=shap_vals_rf[1], features=observations, feature_names=X_test.columns.tolist())","23598619":"joblib.dump(value=gscvab, filename=os.path.join(PATH, 'adaboost.pkl'))","9e1f96db":"## Instantiating Random Forest classifier\nclassifier = GradientBoostingClassifier(n_estimators=30, min_samples_leaf=50, min_impurity_decrease=0.02, random_state=0, max_features='auto', n_iter_no_change=3)\n\n## Parameters grid\nparameter_grid = {\n    'n_estimators': [20, 30, 40],\n    'max_depth': [3,4,5], \n    'learning_rate': [i for i in np.linspace(start=0.1, stop=0.5, num=5)], \n    'loss': ['deviance', 'exponential']}\n\n## Instantiating and fitting GridsearchCV to the train set\ngscvgb = GridSearchCV(estimator=classifier, param_grid=parameter_grid, cv=10, scoring='f1_weighted', verbose=False)\ngscvgb.fit(X_sample, y_sample)\n\n## Predicting test outcomes\ny_pred = gscvgb.predict(X_test)\n\n## confusion matrix\ncf = pd.DataFrame(confusion_matrix(y_test, y_pred), index=['current_employee', 'resigned'], columns=['current_employee', 'resigned'])[::-1].T[::-1]","4550fd08":"# Model Evaluation\nprint(pd.Series(gscvgb.best_params_))\nprint('='*40)\nprint('recall score: %.3f' % recall_score(y_test, y_pred))\nprint('='*40)\nprint(classification_report(y_test, y_pred))\nprint('='*40)\nprint(cf)","760d548e":"# ROC Curve\ny_pred_train_prob = gscvgb.predict_proba(X_train)[:,1]\ny_pred_test__prob = gscvgb.predict_proba(X_test)[:,1]\n\nfp_rate_train, tp_rate_train, thresh1 = roc_curve(y_train, y_pred_train_prob)\nfp_rate_test, tp_rate_test, thresh2 = roc_curve(y_test, y_pred_test__prob)\n\nplt.figure(figsize=(8,8))\nplt.plot(fp_rate_train, tp_rate_train, label='train')\nplt.plot(fp_rate_test, tp_rate_test, label='test')\nplt.plot([0, 1], ls=\"--\")\nplt.plot([0, 0], [1, 0] , c=\".7\"), plt.plot([1, 1] , c=\".7\")\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.title('ROC Curve', fontweight='semibold')\nplt.legend(loc='center left', bbox_to_anchor=(1.,.5), frameon=False)\nplt.grid()\nplt.show()","b1e13bec":"# Let's interpret mean weightage of each feature in the model, globally\neli5.show_weights(gscvgb.best_estimator_, feature_names=X_train.columns.tolist())","a617f077":"# We can also view mean weightage of a sample observation, i.e., local interpret\neli5.show_prediction(estimator=gscvgb.best_estimator_, doc=X_test.sample(), feature_names=X_train.columns.tolist(), show_feature_values=True)","03054acc":"observations = shap.sample(X_test)\nexplainer_gb  = shap.TreeExplainer(gscvgb.best_estimator_)\n\nshap_vals_gb = explainer_gb.shap_values(observations)","c86f932f":"shap.summary_plot(shap_values=shap_vals_rf, features=observations)","e8c55706":"shap.force_plot(base_value=explainer_gb.expected_value, shap_values=shap_vals_gb, features=observations, feature_names=X_test.columns.tolist())","fb5a926b":"joblib.dump(value=gscvgb, filename=os.path.join(PATH, 'gradientboost.pkl'))","42ee3349":"## Stacking Classifier Steps\n### Extracting the best estimator from each model into a list\nrandom_forest = gscvrf.best_estimator_\nadaptive_boost= gscvab.best_estimator_\ngradient_boost= gscvgb.best_estimator_\n\nclassifier_list = [('random_forest',random_forest), \n                   ('adaptive_boost',adaptive_boost), \n                   ('gradient_boost',gradient_boost)]\n\n# ### Declaring meta classifier\nm_classifier = LogisticRegression()\n\n# ### Instantiating Stacking Classifier\nstack = StackingClassifier(estimators=classifier_list, final_estimator=m_classifier)\nstack.fit(X_sample, y_sample)\n\n# Predicting test outcomes\ny_pred = stack.predict(X_test)\n\n# ## confusion matrix\ncf = pd.DataFrame(confusion_matrix(y_test, y_pred), index=['current_employee', 'resigned'], columns=['current_employee', 'resigned'])[::-1].T[::-1]","409de08a":"# Model Evaluation\nprint(classification_report(y_test, y_pred))\nprint('='*80)\nprint(cf)","2a10f702":"# ROC Curve\ny_pred_train_prob = stack.predict_proba(X_train)[:,1]\ny_pred_test__prob = stack.predict_proba(X_test)[:,1]\n\nfp_rate_train, tp_rate_train, thresh1 = roc_curve(y_train, y_pred_train_prob)\nfp_rate_test, tp_rate_test, thresh2 = roc_curve(y_test, y_pred_test__prob)\n\nplt.figure(figsize=(8,8))\nplt.plot(fp_rate_train, tp_rate_train, label='train')\nplt.plot(fp_rate_test, tp_rate_test, label='test')\nplt.plot([0, 1], ls=\"--\")\nplt.plot([0, 0], [1, 0] , c=\".7\"), plt.plot([1, 1] , c=\".7\")\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.title('ROC Curve', fontweight='semibold')\nplt.legend(loc='center left', bbox_to_anchor=(1.,.5), frameon=False)\nplt.grid()\nplt.show()","6776c8b2":"# Global Interpretation of the Meta Model of Stacking Classifier\neli5.show_weights(stack.final_estimator_, feature_names=['Random_Forest', 'Adaptive_Boost', 'Gradient_Boost'])","236ad874":"# How this perticular observation is scored?\neli5.show_prediction(estimator=stack.final_estimator_, doc=stack.transform(X_test)[0], feature_names=['Random_Forest', 'Adaptive_Boost', 'Gradient_Boost'], show_feature_values=True)","bb08602d":"explainer = shap.LinearExplainer(model=stack.final_estimator_, data=stack.transform(X_test), nsamples=100)\n\nobservations = stack.transform(X_test.sample(1000, random_state=0))\nshap_values = explainer.shap_values(observations)","31a6fa8e":"shap.force_plot(base_value=explainer.expected_value, shap_values=shap_values, features=observations, feature_names=['Random_Forest', 'Adaptive_Boost', 'Gradient_Boost'])","47cc7995":"shap.summary_plot(shap_values=shap_values, features=observations, feature_names=['Random_Forest', 'Adaptive_Boost', 'Gradient_Boost'])","fbe8ebe8":"# Classifier list: this time we'll also add stacking\nclassifier_list = [('random_forest',random_forest), \n                   ('adaptive_boost',adaptive_boost), \n                   ('gradient_boost',gradient_boost), \n                   ('stacking', stack)]\n\n# Instantiating Stacking Classifier\nvote = VotingClassifier(estimators=classifier_list, voting='soft')\nvote.fit(X_sample, y_sample)\n\n## Predicting test outcomes\ny_pred = vote.predict(X_test)\n\n# ## confusion matrix\ncf = pd.DataFrame(confusion_matrix(y_test, y_pred), index=['current_employee', 'resigned'], columns=['current_employee', 'resigned'])[::-1].T[::-1]","e05e0696":"# Model Evaluation\nprint(classification_report(y_test, y_pred))\nprint('='*40)\nprint(cf)","20180ca4":"# ROC Curve\ny_pred_train_prob = vote.predict_proba(X_train)[:,1]\ny_pred_test__prob = vote.predict_proba(X_test)[:,1]\n\nfp_rate_train, tp_rate_train, thresh1 = roc_curve(y_train, y_pred_train_prob)\nfp_rate_test, tp_rate_test, thresh2 = roc_curve(y_test, y_pred_test__prob)\n\nplt.figure(figsize=(8,8))\nplt.plot(fp_rate_train, tp_rate_train, label='train')\nplt.plot(fp_rate_test, tp_rate_test, label='test')\nplt.plot([0, 1], ls=\"--\")\nplt.plot([0, 0], [1, 0] , c=\".7\"), plt.plot([1, 1] , c=\".7\")\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.title('ROC Curve', fontweight='semibold')\nplt.legend(loc='center left', bbox_to_anchor=(1.,.5), frameon=False)\nplt.grid()\nplt.show()","c718d968":"compensation = pd.concat([X_train['DailyRate'], y_train], axis=1)\n\nsns.boxplot(data=compensation, y='DailyRate', x='Attrition');","cf811231":"The collective ```force_plot``` the same information as above, but breaks down for each observation. It is also possible to hold a perticular feature constant and view the interaction.","d70c8770":"The collective ```force_plot``` the same information as above, but breaks down for each observation. It is also possible to hold a perticular feature constant and view the interaction.","01243343":"### Stacking Classifier\n\nIntuitively, the performance of random forest classifier is good, that of adaptive boosting is better and that of gradient boosting is the best. Does it imply we should simply go for gradient boosting algorithm? Let's find out...","9ebad765":"It turns out that Stacking classifier performed even better. What's happening? Looking at the weights, it turns out that adaptive boosting classifier holds higher weight than the gradient boosting classifier. Observing the summary plot above, it is aparent that few observations in gradient boosting hold very high SHAP value (thereby high impact on model performance) while most of observations hold low to medium SHAP values. On the other hand, adaptive boosting classifier has greater proportion of high SHAP values, thereby indicating consistance in model prediction.\n\n### Voting Classifier\n\nFinal verdict! We will now run our final ensemble classifier. This classifier will combine all above four classifier and apply 'soft' voting mechanism.","820d32a8":"### Preprocessing Pipeline","ebc6d5c7":"Despite most features being of integer data type, most could be classified into ordinal or nominal data type.\n\nThe following is some observation\/ action items:\n* Features ```'NumCompaniesWorked'``` and ```'BusinessTravel'``` in ```categorical_features``` list are or ordinal type whereas rest are of nominal types. We will therefore segregate elements of ```categorical_features``` list into their respective sub-categories.\n* Feature ```'NumCompaniesWorked'```, contianing 10 labels, will be reclassified into three labels. This will facilitate in classification.\n* Finally, we shall classify variables into ```'actual numerical'``` (interval\/ measure scale), ```'nominal_variables'``` and ```'ordinal_variables'```.\n\n|actual numerical features|ordinal features|nominal features|\n|----|----|----|\n|'DistanceFromHome'|'Education'|'TrainingTimesLastYear'|\n|'PercentSalaryHike'|'EnvironmentSatisfaction'|'WorkLifeBalance'|\n|'YearsAtCompany'|'JobInvolvement'|'Employee Source'|\n|'YearsInCurrentRole'|'JobLevel'|'Department'|\n|'YearsSinceLastPromotion'|'JobSatisfaction'|'EducationField'|\n|'YearsWithCurrManager'|'PerformanceRating'|'Gender'|\n|'TotalWorkingYears'|'RelationshipSatisfaction'|'JobRole'|\n|'Age'|'StockOptionLevel|'MaritalStatus'|\n|'DailyRate'|'BusinessTravel'|'OverTime'|\n|'HourlyRate'|'NumCompaniesWorked'||\n|'MonthlyIncome'|||\n|'MonthlyRate'|||","14f74470":"## Cleaning and processing raw data\n\nThe entire statstical modelling process begins with loading and cleaning the dataset to desired form.\n\nCertain variables _viz_., EmployeeCount, EmployeeNumber, ApplicationID are not features. Further variables of Over18 and StandardHours are 99.99% constant; features without variability are of no use for model. We shall remove all such variables.\n\nI also have defined a utility function to view each variable, its data type and its sample in tabular form...","addbad20":"## Preprocessing pipeline, model fitting and model interpretation","0176381c":"# IBM HR Analytics Employee Attrition Detection\n\n## Business Problem\n\nThis exercise will deal with predicting which employees are likely to resign.\n\nAs one may already know, attrition of highly skilled talent in a high-tech sector could mean serious business implications for firms like IBM. As such, there is a great business interest in understanding the drivers and predicting the probability of employees quitting.\n\nThe model would facilitate timely HR intervention which could possibly avert an employee from quitting.\n\n## Data\n\nThe data comprises of an employee survey which records following details of the  employee, including whether or not the employee resigned or is a current employee.\n\n|Feature|Description|\n|----|----|\n|Age|Age of employee in nUmerical value|\n|Attrition|Employee quitting (0=No, 1=Yes)|\n|Business Travel|(1=No Travel, 2=Travel Frequently, 3=Tavel Rarely)|\n|Daily Rate|Numerical Value - Salary Level|\n|Department|(1=HR, 2=R&D, 3=Sales)|\n|Distance From Home|Numerical Value - distance from work to home|\n|Education|No. of years in numerical value|\n|Education Field|(1=HR, 2=LIFE SCIENCES, 3=MARKETING, 4=MEDICAL SCIENCES, 5=OTHERS, 6= TEHCNICAL)|\n|Employee Count|Numerical value|\n|Employee Number|Employee ID in numerical value|\n|Environment Satisfaction|satisfaction level with the environment in numerical value|\n|Gender|(1=FEMALE, 2=MALE)|\n|Hourly Rate|Hourly salary in numerical value|\n|Job Involvement|Numerical value|\n|Job Level|Numerical value|\n|Job Role|(1=HC REP, 2=HR, 3=LAB TECHNICIAN, 4=MANAGER, 5= MANAGING DIRECTOR, 6= REASEARCH DIRECTOR, 7= RESEARCH SCIENTIST, 8=SALES EXECUTIEVE, 9= SALES REPRESENTATIVE)|\n|Job Satisfaction|Numerical value|\n|Marital Status|(1=divorced, 2=married, 3=single)|\n|Monthly Income|Numerical value|\n|Monthly Rate|Numerical value|\n|No. of Companies Worked|0-9 numerical value|\n|Overtime|(1=NO, 2=YES)|\n|Salary Hike %|Numerical Value|\n|Over 18|(1=YES, 2=NO)|\n|Performance Rating|Numerical value|\n|Relationship Satisfaction|Numerical value|\n|Standard Hours|Numerical value|\n|Stock Option Level|Numerical value|\n|Total Working Hours|Numerical value|\n|Training Times Last Year|Numerical value|\n|Work-Life Balance|Numerical value|\n|Years At Company|Numerical value|\n|Years Since Last Promotion|Numerical value|\n|Years with Current Manager|Numerical value|\n|Hiring Source|(seek, referral, recruit.net, linkedin, jora, indeed, glassdoor, adzuna, company website)|\n\n## Solution and Methodology\n\nThis problem is similar to predicting cancer, in the sense that cost of False Negative is far greater than cost of False Positive. Therefore the objective of the model would be to **maximize recall score**. In other words, the model should be highly sensitive.\n\nAs we will see later, the variables are not normally distributed. Further, although not verified, I feel it wouldn be prudent not to rule out possibility multicollinearity among the feature set. To circumvent the possibility of violating any of the assumptions of a linear model, it would be wise to go for a non-parametric model, say a tree based algorithm.\n\nTherefore, the plan of action will be:\n1. Fitting Base Classifiers\n    1. RandomForest\n    2. Adaboost\n    3. Gradient Boosting (or XGBoost)\n2. Stacking $\\rightarrow$ with all the above 'base' classifiers\n3. Voting $\\rightarrow$ with the base classifiers plus stacking classifier\n\nFor the all the models, the following pipeline shalll be trained:\n1. Missing value imputation with column median.\n2. Transforming categorical features to their Weight of Evidence: $\\ln{\\frac{\\text{Proportion of Positive Events}}{\\text{Proportion of Negative Events}}}$\n3. Transforming variables to normal distribution using Yeo-Johnson transformation (all the features in the dataset are of numerical dtype by now)\n4. Standardizing the dataset using sklearn ```StandardScaler()```.\n5. Adjusting for class imbalance using imbalance-learn combination algorithm, SMOTE-Tomac. As said before, the intent is to increase the sensitivity, by demarkating a clear decision boundary.\n6. Fitting the base algorithm\n\nThe respective hyperparameters of each algorithm in the above pipeline is in turn tuned using ```GridSearchCV()``` with 10-fold cross validation.\n\n### Model Interpretation\n\n<font size=1.5>*source*:\n1. [Importance of ML Interpretation](https:\/\/towardsdatascience.com\/human-interpretable-machine-learning-part-1-the-need-and-importance-of-model-interpretation-2ed758f5f476)\n2. [Model Interpretation Strategies](https:\/\/towardsdatascience.com\/explainable-artificial-intelligence-part-2-model-interpretation-strategies-75d4afa6b739)\n3. [Hands-On Machine Learning Interpretation](https:\/\/towardsdatascience.com\/explainable-artificial-intelligence-part-3-hands-on-machine-learning-model-interpretation-e8ebe5afc608)\n<\/font>\n\nThe models we will be deploying are complex, black-box models in that they are non-parametric and meta-classifiers of many simple tree classifiers (random forest, adaptive boosting or gradient boosting), with which it's not possible to guage theit inner functioning.\n\nTo have confidence on these models, often the decision makers may feel the need to understand what drives the model. Besides, it's no longer a luxury; regulations require models to be explainable. Therefore, recently, model explainability is the new \"frontier\" in ML.\n\n#### Criteria\n\nAlthough model interpretation is still an evolving field, most of the techniques revolve around the following three criteria:\n\n<u>intrinsic\/ post hoc<\/u>? Intrinsic implies the model itself being interpretable, _viz_., parametric model or a single decision tree; whereas post-hoc involves trying to interpret a pre-trained model.\n\n<u>Model specific\/ model-agnostic<\/u>? Certain model interpretation techniques apply to specific models _viz_., p-values and AIC scores pertaining to regression models. Whereas model-agnostic tools are relavant to performing post-hoc methods and can be applied to any machine learning model.\n\nBroadly speaking scope of interpretability can be either local or global. <u>Local<\/u> implies (Why did model make a specific decision?) being able to explain the conditional interaction between response variable and predictor variables w.r.t. single example. Whereas, <u>global<\/u> interpretation (How does model makes interpretations?) tries to explain the model based on complete dataset.\n\nIn our analysis, we will implement post-hoc, model-agnostic techniques having both local as well as global scope. \n\n#### Techniques\n##### Feature Importance\nDegree to which a predictive model relies on a perticular feature. Typically, it's the increase in model's prediction error after we permuted the feature's values.\n\nSince we will be using SHAP values (discussed below), computing feature importance separately gets redundunt. \n\n##### Partial Dependence Plots\n*Not implemented*\n\n##### Global Surrogate Models\n*Not implemented*\n\n##### Local-Interpretable Model-Agnostic Explainations (LIME)\n*Not implemented*\n\n##### Shapley Additive Explanations\n<font size=1.5>**Source**: [SHAP](https:\/\/christophm.github.io\/interpretable-ml-book\/shap.html)<\/font>\n\nSHAP (SHapley Additive exPlanations) by Lundberg and Lee (2016) is a method to explain individual predictions. Based on the game theoretically optimal Shapley Values, the goal of SHAP is to explain the prediction of an instance $x$ by computing contribution of each feature to the prediction.\n\nThe original Shapley values (from Game Theory) tell how fairly distribute the payout (prediction) among the players (features). In ML context, the Shapely values in SHAP is represented as an additive feature attribution method, a linear model.\n\n\\begin{align}\ng(z') &= \\phi_0+\\sum^M_{j=1}\\phi_j z'_j \\\\\n\\text{where}\\\\\ng &: \\text{explanation model} \\\\\nz' & \\in\\{0,1\\}^M\\;\\;\\text{is a coalition vector} \\\\\n\\phi_j & \\in \\mathbb{R};\\;\\text{is a feature attribution of feature }j \\\\\n\\end{align}","0e7f5a21":"The collective ```force_plot``` the same information as above, but breaks down for each observation. It is also possible to hold a perticular feature constant and view the interaction.","4ef747c7":"### Gradient Boosting Classifier","90257b92":"## Conclusion\n\nFrom the above models, we observe that features like Age, overtime, compensation level (daily-rate, monthly-rate, hourly-rate, monthly-income), distance from home play major role in prediction, whereas job role, maritial status, gender, employee source etc play little importance in predicting the outcome.\n\nThings to consider: \n* Certain age groups are more likely to quite than others.\n* With increase in overtime, chances of an employee quitting also increases - that's obvious because already employees are clocking standard 80 work hours per week (feature that was dropped), anything beyond that might cause burnout.\n* Although, the distribution of compensation levels *viz*., HourlyRate, DailyRate, MonthlyRate between current employees and resigned is equal (as depicted in the following box plot), the interaction of these variables with other variables might explain the outcome better (Adaptive boosting classifier).","cba2ad08":"### Random Forest Classifier","c98f9e58":"### Adaptive Boosting Classifier"}}