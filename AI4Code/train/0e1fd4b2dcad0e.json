{"cell_type":{"4761e685":"code","77524cbe":"code","4621432f":"code","ba9046aa":"code","c623e750":"code","48517f2f":"code","f16a8590":"code","71ba2428":"code","c8daf255":"code","7150c528":"code","c14dcdba":"code","407d302a":"markdown","7d86e152":"markdown","0b67c548":"markdown","1c5b71e3":"markdown","75622779":"markdown","5b17d211":"markdown","e24a6e38":"markdown"},"source":{"4761e685":"# import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom tensorflow.keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n","77524cbe":"# import dataset\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","4621432f":"# create independant and dependant matrices\nX = train.iloc[:, 1:].values\ny = train.iloc[:, 0].values\n\nX_test = test.iloc[:,:].values\n\n# scaling\nX = X\/255\nX_test = X_test\/255\n\n# train validation split\nfrom sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.1, random_state = 0)\n\n# encoding output values\ny_train = to_categorical(y_train, num_classes=10)\ny_valid = to_categorical(y_valid, num_classes=10)\n\n# reshape input values\nX_train = X_train.reshape(-1,28,28,1)\nX_valid = X_valid.reshape(-1,28,28,1)\nX_test = X_test.reshape(-1,28,28,1)","ba9046aa":"model = Sequential()\n    \nmodel.add(Convolution2D(filters=32, kernel_size=5, strides =1, padding='Same', input_shape=(28,28,1), activation='relu'))\nmodel.add(Convolution2D(filters=32, kernel_size=5, strides =1, padding='Same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n    \nmodel.add(Convolution2D(filters=64, kernel_size=3, strides =1, padding='Same', activation='relu'))\nmodel.add(Convolution2D(filters=64, kernel_size=3, strides =1, padding='Same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n    \nmodel.add(Flatten())\nmodel.add(Dense(units=1024, activation=\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(units=10, activation=\"softmax\"))\n    \nmodel.compile(optimizer=\"Adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","c623e750":"model.summary()","48517f2f":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","f16a8590":"# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","71ba2428":"# fit the model\nhistory = model.fit_generator(datagen.flow(X_train,y_train, batch_size=50),\n                              epochs = 20, validation_data = (X_valid,y_valid),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ 50\n                              , callbacks=[learning_rate_reduction])","c8daf255":"\n#These graphs shows the accuracy vs #epochs and loss vs #epochs. I did not compiled this part because it will not be\n#relevant with 3 epochs.\n\n# list all data in history\nprint(history.history.keys())\n\n# summarize history for accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()\n\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()\n","7150c528":"y_pred = model.predict(X_test)\ny_pred = np.argmax(y_pred,axis = 1)\n\nresults = pd.Series(y_pred,name=\"Label\")\n\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"solution_digit_classifier.csv\", index=False)","c14dcdba":"submission","407d302a":"To end up with this model, I tested my model with different optimizers (Adam, Adadleta, Adagrad, Adamax, Nadam, RMSprop, SGD), batch size, epochs, number of neurons, number of kernels ...","7d86e152":"# 3 - Visualization","0b67c548":"# 4 - Prediction","1c5b71e3":"# MNIST: CNN with Keras \/ 99.5% score","75622779":"# 2 - Model CNN","5b17d211":"**NOTE BEFORE READING: To achieve a 0.99503 score, I used 20 epochs. In order to make this code faster, it will only have 3 epochs.**\n\nThis is my first Notebook, so, do not hesitate to give me feedbacks !\n\nA huge thanks to the following notebooks from which I learnt a lot:\n\n- https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6 (very detailed, but I guess you already know this one)\n- https:\/\/www.kaggle.com\/cedricb\/mnist-cnn-grid-search-data-augmentation (model selection, optimization)\n- https:\/\/www.kaggle.com\/kakauandme\/tensorflow-deep-nn (ideal if you wan to do the challenge with tensorflow)\n\nGo check them out !","e24a6e38":"# 1 - Introduction"}}