{"cell_type":{"48aa8071":"code","9235ef10":"code","2250dee3":"code","8d009d48":"code","2788438d":"code","6e1ef470":"code","fd9f87f5":"code","57d31849":"code","e55b1d55":"code","7373ee18":"code","c27ef263":"code","744774a1":"code","eb3a8ef9":"code","e56a0a0e":"code","94fc317d":"markdown","f132df0d":"markdown","2acc8cd0":"markdown","7db6d453":"markdown","835aadf2":"markdown","d50c7c21":"markdown","f1fc092b":"markdown","00683c0b":"markdown","5a9bf6e5":"markdown","5ddd9797":"markdown","b11a36ec":"markdown","133f9a4d":"markdown","1b0447ff":"markdown","6655c9dd":"markdown"},"source":{"48aa8071":"import pandas as pd\npd.set_option('max_rows', 5)\nimport numpy as np\nreviews = pd.read_csv(\"..\/input\/winemag-data-130k-v2.csv\", index_col=0)\nreviews.head()","9235ef10":"reviews.points.describe()","2250dee3":"reviews.describe()","8d009d48":"type(reviews.points)","2788438d":"reviews.taster_name.describe()","6e1ef470":"reviews.points.mean()","fd9f87f5":"reviews.taster_name.unique()","57d31849":"reviews.taster_name.value_counts()","e55b1d55":"review_points_mean = reviews.points.mean()\nreview_points_mean","7373ee18":"review_points_mean = reviews.points.mean()\nreviews.points.map(lambda p: p - review_points_mean)","c27ef263":"def remean_points(row):\n    row.points = row.points - review_points_mean\n    return row\n\nreviews.apply(remean_points, axis='columns')","744774a1":"reviews.head(1)","eb3a8ef9":"review_points_mean = reviews.points.mean()\nreviews.points - review_points_mean","e56a0a0e":"reviews.country + \" - \" + reviews.region_1","94fc317d":"**[Pandas Micro-Course Home Page](https:\/\/www.kaggle.com\/learn\/pandas)**\n\n---\n","f132df0d":"To see a list of unique values _and_ how often they occur in the dataset, we can use the `value_counts` method:","2acc8cd0":"If we had called `reviews.apply` with `axis='index'`, then instead of passing a function to transform each row, we would need to give a function to transform each *column*.\n\nNote that `Series.map` and `DataFrame.apply` return new, transformed Series and DataFrames, respectively. They don't modify the original data they're called on. If we look at the first row of `reviews`, we can see that it still has its original `points` value.","7db6d453":"\n\n`pandas` provides many common mapping operations as built-ins. For example, here's a faster way of remeaning our points column:","835aadf2":"---\n**[Pandas Micro-Course Home Page](https:\/\/www.kaggle.com\/learn\/pandas)**\n\n","d50c7c21":"# Intro\nThere are some powerful, and easy-to-use summary functions in pandas. Some of these are used in almost all data science projects. But even somewhat niche needs have helpful `pandas` function to make you more productive.\n\nBefore looking at example, we'll read raw data using the `read_csv` command you've already seen.","f1fc092b":"The function you pass to `map` should expect a single value from the Series (a point value, in the above example), and return a transformed version of that value. `map` returns a new Series where all the values have been transformed by your function.\n\n[`DataFrame.apply`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.apply.html) is the equivalent method if we want to transform a whole DataFrame by calling a custom method on each row.","00683c0b":"## Summary functions\n\nOne of the most important summarization functions is the `describe` method.","5a9bf6e5":"These operators are faster than the `map` or `apply` because they use speed ups built into `pandas`. All of the standard Python operators (`>`, `<`, `==`, and so on) work in this manner.\n\nHowever, they are not as flexible as `map` or `apply`, which can do more advanced things, like applying conditional logic, which cannot be done with addition and subtraction alone.","5ddd9797":"If you have narrower needs, there are functions that return more specific information. For example, you can see the points allotted (e.g. how well an averagely rated wine does) with the `mean` function:","b11a36ec":"This is a high-level summary of the given column. This output above only makes sense for numerical data; for string data here's what we get:","133f9a4d":"## Maps\n\nA \"map\" is a term, borrowed from mathematics, for a function that takes one set of values and \"maps\" them to another set of values.\n* **In data science, we often have a need for creating new representations from existing data, or for transforming data from the format it is in now to the format that we want it to be in later**. \nMaps are what handle this work, making them extremely important for getting your work done!\n\nThere are two mapping method that you will use often. [`Series.map`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.map.html) is the first, and slightly simpler one. For example, suppose that we wanted to remean the scores the wines recieved to 0. We can do this as follows:","1b0447ff":"In this code we are performing an operation between a lot of values on the left-hand side (everything in the `Series`) and a single value on the right-hand side (the mean value). `pandas` looks at this expression and figures out that we must mean to subtract that mean value from every value in the dataset.\n\n`pandas` will also understand what to do if we perform these operations between `Series` of equal length. For example, an easy way of combining country and region information in the dataset would be to do the following:","6655c9dd":"To see a list of unique values we can use the `unique` function:"}}