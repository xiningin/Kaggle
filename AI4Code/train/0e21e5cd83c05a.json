{"cell_type":{"144d4242":"code","86d52634":"code","99562b96":"code","d591c633":"code","d812f45c":"code","839cc1da":"code","ef3487ee":"code","d8bf6387":"code","04c21feb":"code","2561978c":"code","036bd797":"code","cec40f7d":"code","874932d9":"code","6951b471":"code","08ee7a26":"code","67aec8b9":"code","eafec01b":"code","a85abef9":"code","f8981b5e":"code","997dc291":"code","3204b1c7":"code","45dfbb65":"code","5eeacc4e":"code","354ea36c":"markdown","1469d371":"markdown"},"source":{"144d4242":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","86d52634":"import matplotlib.pyplot as plt\nimport datetime as dt","99562b96":"print(os.getcwd())","d591c633":"dataset = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')","d812f45c":"dataset.head(4)","839cc1da":"xLength = len(dataset.columns) - 4\nX = np.arange(xLength)","ef3487ee":"dataset['Country\/Region'][0:4]","d8bf6387":"analyzedContry = 'Italy'\n\nfilt3 = (dataset['Country\/Region'] == analyzedContry)\n\ny = np.transpose(dataset.loc[filt3, dataset.columns[4:]].apply(pd.Series.sum).values)\n","04c21feb":"print(X.shape)\nprint(y.shape)","2561978c":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","036bd797":"print(X_train)\nprint(X_test)","cec40f7d":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\n\nX_train = sc_X.fit_transform(X_train.reshape(-1, 1))\nX_test = sc_X.transform(X_test.reshape(-1, 1))","874932d9":"#Fitting Linear Regression to the dataset\nfrom sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(X.reshape(-1, 1), y.reshape(-1, 1))","6951b471":"# Fitting Polynomial Regression to the dataset\nfrom sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 4)\nX_poly = poly_reg.fit_transform(X.reshape(-1, 1))\npoly_reg.fit(X_poly, y.reshape(-1, 1))\nlin_reg_2 = LinearRegression()\nlin_reg_2.fit(X_poly, y.reshape(-1, 1))","08ee7a26":"# Visualising the Linear Regression results\nplt.scatter(X.reshape(-1, 1), y.reshape(-1, 1), color = 'red', alpha = 0.4)\nplt.plot(X.reshape(-1, 1), lin_reg.predict(X.reshape(-1, 1)), color = 'blue')\nplt.title('{} Corona Infected Cases (Linear Regression)'.format(analyzedContry))\n\n#plt.figure(figsize=(15, 15))\n#plt.xticks(np.arange(xLength), pd.to_datetime(dataset.columns[4:], format ='%m\/%d\/%y').tolist())\n\nplt.xlabel('Time (days)')\nplt.ylabel('Number of Cases in {}'.format(analyzedContry))\nplt.show()","67aec8b9":"# Visualising the Polynomial Regression results \n# Red dots are actual cases , Blue line is the fitted function\nplt.scatter(X.reshape(-1, 1), y.reshape(-1, 1), color = 'red', alpha = 0.4)\nplt.plot(X.reshape(-1, 1), lin_reg_2.predict(poly_reg.fit_transform(X.reshape(-1, 1))), color = 'blue')\nplt.title(' {} Corona Infected Cases (Polynomial Regression)'.format(analyzedContry))\nplt.xlabel('Time (days)' )\nplt.ylabel('Number of Cases in {}'.format(analyzedContry))\nplt.show()","eafec01b":"# Visualising the Polynomial Regression results (for higher resolution and smoother curve)\n# Red dots are actual cases , Blue line is the fitted function\n\nX_grid = np.arange(min(X.reshape(-1, 1)), max(X.reshape(-1, 1)), 0.1)\nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(X.reshape(-1, 1), y.reshape(-1, 1), color = 'red', alpha = 0.4)\nplt.plot(X_grid, lin_reg_2.predict(poly_reg.fit_transform(X_grid)), color = 'blue')\nplt.title('{} Corona Infected Cases (Polynomial Regression)'.format(analyzedContry))\nplt.xlabel('Time (days)')\nplt.ylabel('Number of Cases in {}'.format(analyzedContry))\nplt.show()","a85abef9":"# Predicting a new result with Linear Regression\nlin_reg.predict([[140]])","f8981b5e":"\n# Predicting a new result with Polynomial Regression\nlin_reg_2.predict(poly_reg.fit_transform([[140]]))","997dc291":"#Training the Logistic Regression model on the Training set\n\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X.reshape(-1, 1), y.reshape(-1, 1))","3204b1c7":"y_pred = classifier.predict(X_test)","45dfbb65":"# Fitting Linear Regression to the dataset\nfrom sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(X.reshape(-1, 1), y.reshape(-1, 1))","5eeacc4e":"# Visualising the Polynomial Regression results\n# Red dots are actual cases , Blue line is the fitted function\n\nplt.scatter(X.reshape(-1, 1), y.reshape(-1, 1), color = 'red', alpha = 0.4)\nplt.plot(X.reshape(-1, 1), classifier.predict(X.reshape(-1, 1)), color = 'blue')\n\nplt.title(' {} Corona Infected Cases (Logistic Regression)'.format(analyzedContry))\nplt.xlabel('Time (days)' )\nplt.ylabel('Number of Cases in {}'.format(analyzedContry))\nplt.show()","354ea36c":"## COVID19 prediction of total cases in the comming days based on current situation\u00b6","1469d371":"### In this notebook we train a model based on total cases of corona cases and predict the number of total cases in future"}}