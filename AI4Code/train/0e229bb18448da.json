{"cell_type":{"7f4e4fb9":"code","281c4c6a":"code","7b4c66af":"code","6b767aff":"code","dc0599ac":"code","807de765":"code","b966449f":"code","ea39dad5":"code","dec5dfb1":"code","fb713d9b":"code","8eb3d01d":"code","051d0405":"code","79204a51":"code","97bf75de":"code","89750a67":"code","98bb1926":"code","84a4d1d0":"code","1ae8282d":"code","4421353a":"code","f22e6de1":"code","12f76a2f":"code","1f23a582":"code","a03aa29b":"code","ab027040":"code","f09bf7ae":"code","81f65d2f":"code","99f37d82":"code","2e405fd8":"code","0d4b1890":"code","6616a048":"code","36089ace":"code","a256dc5a":"code","eedf804f":"code","be7772ed":"code","50a6c74d":"code","51060d25":"code","1079a3c0":"code","de49d9d6":"code","37c88f45":"code","59d62f05":"code","892f5904":"code","a90f0230":"code","b6b98f6a":"code","f32d813c":"code","194b587e":"code","a1a8f220":"code","40ef35af":"code","2a256afe":"code","1ba30204":"code","fb2fd8e6":"code","0f7351b2":"code","dd0477c9":"code","a8ac4613":"code","ec24a094":"code","a84d418e":"code","530253bc":"code","c4e9d6e6":"code","b202fa72":"code","fb262481":"code","026ea633":"code","5185c4fd":"code","6b60ccca":"code","095b6053":"code","28539363":"code","759e2404":"code","d904dce0":"code","ed8d3e8e":"code","35a0bb85":"code","89b84c85":"code","6a7d3842":"code","4ca32c50":"code","ad9f5863":"code","37ec9d1e":"code","ddf8624f":"code","701772b7":"code","eeca0525":"code","e5ac369f":"code","21d6dd1a":"code","8a40efec":"code","561ab424":"code","e63344ab":"code","116f82f7":"code","1820b65e":"code","d4467699":"code","7950c0d1":"code","da586e5f":"code","9e3cb058":"code","ae763137":"code","3752ca24":"code","d0a8c12d":"code","b18711b6":"code","f13d9e60":"code","f900903d":"code","3bef47af":"code","c4caee88":"code","35b55992":"code","94ec3e84":"code","0398a63c":"code","84d67426":"code","abf3db4c":"code","fb06e901":"code","b48c4a1d":"code","e1172144":"code","83d6f0fa":"code","c15ad3eb":"code","df937e45":"code","7695a56e":"code","57240f9b":"code","77a50ed4":"code","2508d330":"code","ad05f89b":"code","bd0c6f99":"code","17307dbd":"code","bba3ad50":"code","03c8d153":"code","87f3b3e0":"code","22b1cebc":"code","58861946":"code","c73fd68b":"code","9d208282":"code","fad3b807":"code","0e2641b6":"code","c9f4fae6":"code","16371cfc":"code","8169cb64":"code","caa73f46":"code","87140e69":"code","3067ccae":"code","7f0cf550":"code","0d82b1ca":"code","6ba21eae":"code","1db1ca75":"code","0b3ac049":"code","82fd7e14":"code","5226a44e":"code","b70b2db3":"code","0f8a7591":"code","7680804d":"code","2cbf46d3":"code","fbb3d12c":"code","69645191":"code","0074e74f":"code","da541a61":"code","79df676d":"code","07d3dc3b":"code","adb2d5a6":"code","98ffbf20":"code","58342465":"code","f282fd8c":"code","d995e556":"code","c4c0e231":"code","adf253d3":"code","fe05f390":"code","5a84058a":"code","94c8b50e":"code","98fbd2d9":"code","418eeea0":"code","6eaaec4f":"code","d2aac1b3":"code","663ff3d0":"code","e8d7a6f4":"code","c000aa7f":"code","0d41d09a":"code","6e4ea280":"code","87c8e0dc":"code","5a517587":"code","55d766fe":"code","48378032":"code","383b6b26":"code","0d47736f":"code","69037ea9":"code","9980b601":"code","645ba900":"code","1749670d":"code","aac6a1f7":"code","dd15e0ed":"code","516318a4":"code","311c096a":"code","fe8f0b49":"code","2fc57406":"code","7df3afc3":"code","3b01e421":"code","c14ad422":"code","ae3b3312":"code","e50c3f48":"code","70a619ec":"code","38c2b931":"code","b02649cf":"code","db23fc90":"code","9590d137":"code","cfde9ed5":"code","d1e9c85a":"code","db7b446a":"code","cda0e891":"code","c7975c60":"code","732c5140":"code","82bc4b52":"code","ac05b378":"code","2413898f":"code","6bc3ca36":"code","c473897d":"code","2a4a92fc":"code","d030f9a6":"code","9be0743e":"code","9fc71106":"code","b2ea00ea":"code","483262c0":"code","9da37895":"code","e63569db":"code","de342b0f":"code","638bb4a6":"code","5709e638":"code","9e7ec9a1":"code","438ae9c5":"code","ab99c7c4":"code","2d028116":"code","d8de4348":"code","52a81a4e":"code","b6e59982":"code","01ab87cc":"code","475c8c2e":"code","672aaa08":"code","b01c79dc":"code","c0e1a89d":"code","4f61d209":"code","d074b738":"code","6aba14fc":"code","170ad8f4":"code","ebbe0f4f":"code","7fa54003":"code","277a89d4":"code","9cc5a886":"code","9610510f":"code","9001fa7b":"code","7f640c97":"code","8f9c6ffa":"code","a92eae57":"code","0304dea1":"code","bf6c54b0":"code","acbd3c3e":"code","2a1099b6":"code","3143f0fd":"code","f2beb85f":"code","ceb1314b":"code","c95170ed":"code","30a139dd":"code","58379f8e":"code","90f985db":"code","1679bd3c":"code","13a5919d":"code","940d3744":"code","1d84f21a":"code","b5c56149":"code","34ebdb88":"code","97d38c25":"code","5cd0a65d":"code","1bac1abc":"code","9ab17170":"code","b1e22422":"code","a096d73a":"code","659c2a0b":"code","e9400060":"code","cfd712ec":"markdown","65b7c851":"markdown","18f7961a":"markdown","d7e81854":"markdown","52bafdf2":"markdown","36e4212b":"markdown","b3369c58":"markdown","0f2992fb":"markdown","6df1a51c":"markdown","10e524ae":"markdown","12ddb0b3":"markdown","42d1adaf":"markdown","41782939":"markdown","ce5f26d6":"markdown","4f20610e":"markdown","964a9012":"markdown","4f325f3b":"markdown","b8be33a7":"markdown","f61b63f1":"markdown","a9f24d71":"markdown","03a9af42":"markdown","802de332":"markdown","36076735":"markdown","f6192dcc":"markdown","847a430a":"markdown","19823556":"markdown","4ee9b161":"markdown","edfe3b3b":"markdown","f5f2ef19":"markdown","39c8e0d3":"markdown","2dad7f7c":"markdown","5d4bbb5a":"markdown","51427b4f":"markdown","df83703a":"markdown","19582028":"markdown","446f9f6d":"markdown","538c4fc2":"markdown","53290db5":"markdown","5342994a":"markdown","a93466be":"markdown","f7f42e57":"markdown","c329392c":"markdown","e51d97f9":"markdown","8194d3ed":"markdown","b15e45af":"markdown","1f957069":"markdown","902db6f1":"markdown","5774c400":"markdown","a89cba1c":"markdown","ad12b1b6":"markdown","7f3dbce7":"markdown","41eb9aa8":"markdown","ca690273":"markdown","4299dea9":"markdown","1dee2b2a":"markdown","e4b2b5ab":"markdown","8e8e852d":"markdown","aaaa1e26":"markdown","38bef386":"markdown","171e2fce":"markdown","913c7838":"markdown","ee82b195":"markdown","fc8d31d9":"markdown","36c34dcc":"markdown","c5052edd":"markdown","b1f4ae1d":"markdown","e0892f26":"markdown","d933c3bc":"markdown","05ae40d2":"markdown","3e2b7b7a":"markdown","72fa5c78":"markdown","ee7176e1":"markdown","160d7b2d":"markdown","9fca4511":"markdown","2738c992":"markdown","cb01de48":"markdown","f4db17e1":"markdown","8d528a71":"markdown","031bdf79":"markdown","433a5688":"markdown","0e6fea97":"markdown","aa3c8b9e":"markdown","9f1f4b6c":"markdown","91fe1c19":"markdown","3a4108f6":"markdown","c7f7c17c":"markdown","2013ba04":"markdown","7000e4d1":"markdown","0f020744":"markdown","09614b30":"markdown","a74ee81b":"markdown","d55fe476":"markdown","d95cb1ef":"markdown","b3d7c69c":"markdown","961acb01":"markdown","922adb06":"markdown","d6c92d83":"markdown","03604710":"markdown","09d9cccb":"markdown","dfc60ba7":"markdown","8fe75580":"markdown","0395101f":"markdown","33d8e14d":"markdown","3244b7b9":"markdown","fdd38189":"markdown","880919ad":"markdown","ebaffa06":"markdown","873e40a8":"markdown","6cb001e5":"markdown","072e8626":"markdown","0d582ce0":"markdown","213e48ee":"markdown","a7cac4fd":"markdown","3c69985a":"markdown","d7663330":"markdown","1f7871b6":"markdown","f8b0a517":"markdown","89fd6cf0":"markdown","4ae01013":"markdown","c136efac":"markdown","a9737ecb":"markdown","cb2604bb":"markdown","56dcc5d2":"markdown","c633a38d":"markdown","cab83f34":"markdown","1e170a6d":"markdown","6d89953e":"markdown","1b655801":"markdown","f4dfc767":"markdown","38f525e3":"markdown","c4621763":"markdown","e10cf381":"markdown","3f44ff1b":"markdown","fbdac261":"markdown","229eafb5":"markdown","f8415101":"markdown","8b6dd97a":"markdown","2f181b9d":"markdown","636fc9ef":"markdown","b042ed21":"markdown","1be087d8":"markdown","4dff094a":"markdown","90a4cff1":"markdown","155d4d5e":"markdown","e21ebfba":"markdown","7331667f":"markdown","27eaaaec":"markdown","98b4ad90":"markdown","0d6c184f":"markdown","89707ef0":"markdown","3cc04aca":"markdown","068be7ea":"markdown","a0327954":"markdown","ff254c2c":"markdown","966f98cb":"markdown","4b8f3abe":"markdown"},"source":{"7f4e4fb9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport re\nimport datetime\nimport squarify\nimport plotly\n# plotly standard imports\nimport plotly.graph_objs as go\nimport chart_studio.plotly as py\n\n# Cufflinks wrapper on plotly\nimport cufflinks as cf\n\n# Options for pandas\n#pd.options.display.max_columns = 30\n\n# Display all cell outputs\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'\n\nfrom plotly.offline import iplot, init_notebook_mode, plot\ncf.go_offline()\n\ninit_notebook_mode(connected=True)","281c4c6a":"apps = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')\napps.head(2)","7b4c66af":"#lets see the total Rows and columns\napps.shape","6b767aff":"apps.describe()","dc0599ac":"apps.info()","807de765":"apps.isnull().sum()","b966449f":"# we can also see the null values by this\nsns.heatmap(apps.isnull(),yticklabels=False, cbar=False, cmap= 'viridis')","ea39dad5":"# Checking For the Outliers\n\nsns.boxplot(y=apps['Rating'])","dec5dfb1":"#->Calculating q75 and q25\n\nq75, q25 = np.nanpercentile(apps['Rating'], [75 ,25])","fb713d9b":"print(\"25% qunatile: \" + str(q25),\"75% quantile: \" + str(q75))","8eb3d01d":"#Inter-Quartile Range\n\niqr = q75-q25\nprint(\"IQR:\" + str(iqr))\n\n#We now create a benchmark using InterQuartile Range for Outlier Treatment.\n\nbench = q75 + (iqr*1.5)\nprint(\"Benchmark: \"+ str(bench))\n\n#We use loc to identify the position of the outlier cell and replace it with our capping value.\n\napps.loc[apps['Rating'] > 5.25, 'Rating'] = np.nan","051d0405":"sns.boxplot(y=apps['Rating'])","79204a51":"sns.set_color_codes()\napps['Rating'].hist()","97bf75de":"rat = apps[apps['Rating']>4]['App'].count()\n\nprint(\"Total number of Apps having ratings above 4 is: \"+ str(rat))","89750a67":"# filling Numerical data by interpolation.\napps = apps.interpolate()","98bb1926":"# filling categorical data with mode\napps.fillna(apps['Type'].mode().values[0],inplace=True)","84a4d1d0":"apps.fillna(apps['Current Ver'].mode().values[0],inplace=True)\napps.fillna(apps['Android Ver'].mode().values[0],inplace=True)","1ae8282d":"apps.isna().sum()","4421353a":"sns.heatmap(apps.isnull(),yticklabels=False, cbar=False, cmap= 'viridis')","f22e6de1":"#droping the duplicate rows\napps = apps.drop_duplicates()\napps.shape","12f76a2f":"apps[apps['Price']=='Everyone']","1f23a582":"# Fixing the Bad data\napps['Reviews'] = apps['Reviews'].replace('3.0M',3000000)\napps['Price'] = apps['Price'].replace('Everyone',0)\napps['Type'] = apps['Type'].replace('0',np.nan)\napps['Type'] = apps['Type'].interpolate()","a03aa29b":"#converting Price,Installs,Reviews into numeric\napps['Reviews'] = pd.to_numeric(apps['Reviews'])\n\napps['Size'] = apps['Size'].apply(lambda x: str(x).replace('+','') if '+' in str(x) else str(x))\napps['Size'] = apps['Size'].apply(lambda x: str(x).replace(',','') if ',' in str(x) else str(x))\n\napps['Installs'] = apps['Installs'].apply(lambda x: str(x).replace(',','') if ',' in str(x) else str(x))\napps['Installs'] = apps['Installs'].apply(lambda x: str(x).replace('+','') if '+' in str(x) else str(x))\n\napps['Price'] = apps['Price'].apply(lambda x: str(x).replace('$','') if '$' in str(x) else str(x))\napps['Price'] = apps['Price'].apply(lambda x: float(x))","ab027040":"#apps[apps['Installs']=='Free'].head(1)\n\napps['Installs'] = apps['Installs'].replace('Free',0)\n\napps['Installs'] = pd.to_numeric(apps['Installs'])","f09bf7ae":"apps.info()","81f65d2f":"# Feature Transformation\napps2 = apps.copy()\napps2.skew()","99f37d82":"#-> Decresing skewness of the variables\napps2['Reviews'] = np.sqrt(np.sqrt(np.sqrt(apps2['Reviews'])));\napps2['Installs'] = np.sqrt(np.sqrt(np.sqrt(np.sqrt(apps2['Installs']))));\napps2['Price'] = np.sqrt(np.sqrt(np.sqrt(np.sqrt(np.sqrt(apps2['Price'])))));\napps2.skew()\n\n## We can see we have reduced the skewness to lowest level which is pretty good for Machine Learning Models","2e405fd8":"apps['Content Rating'].value_counts()","0d4b1890":"# Fixing the Similar values Issue\napps['Content Rating'] = apps['Content Rating'].replace('Everyone 10+','Everyone');\napps['Content Rating'] = apps['Content Rating'].replace('Adults only 18+','Mature 17+');","6616a048":"install_reviews = apps2[['Installs','Reviews']]\ninstall_reviews2 = apps[['Installs','Reviews']]","36089ace":"install_reviews.head()\ninstall_reviews2.head()","a256dc5a":"install_reviews.corr()","eedf804f":"install_reviews2.corr()","be7772ed":"plt.figure(figsize=(16,5))\nplt.subplot(121)\nsns.regplot(data = install_reviews2,x='Installs',y='Reviews')\nplt.title(\" Before Performing Feature Transformation (Correlation: 0.63)\")\n\nplt.subplot(122)\nsns.regplot(data = install_reviews,x='Installs',y='Reviews');\nplt.title(\" After Performing Feature Transformation (Correlation: 0.94)\");","50a6c74d":"top10_cateogries = apps.groupby(apps['Category'])['Category'].count().sort_values(ascending=False).head(10)","51060d25":"top10_cateogries","1079a3c0":"plt.figure(figsize=(20,10))\nplt.subplot(121)\ntop10_cateogries.plot.pie(autopct='%1.f%%',\n                                                             wedgeprops={'linewidth':10,'edgecolor':'white'},\n                                                             shadow=True,\n                                                             fontsize=20)\nplt.title(\"% Wise Distribution of Categories\")\n\nplt.subplot(122)\ntop10_cateogries.plot(marker='o',markersize=10,color='red')\ntop10_cateogries.plot(kind='bar',color='green')\nplt.title(\"Distribution of Categories\");","de49d9d6":"Category_counts = apps['Category'].value_counts().head(15)\nCategory_counts.head()","37c88f45":"plt.figure(figsize=(16,9))\nsquarify.plot(sizes=Category_counts.values,label=Category_counts.index,value=Category_counts.values,color=[\"#FF6138\",\"#FFFF9D\",\"#BEEB9F\", \"#79BD8F\",\"#684656\",\"#E7EFF3\"], alpha=0.6)\nplt.title('Distribution of Investors and Investments Done');","59d62f05":"plt.figure(figsize=(12,6))\nsns.countplot(data=apps,x='Category')\nplt.ylabel(\"Number of Apps\")\nplt.title(\"Number of Apps per Category\", size=20)\nplt.xticks(rotation=90);","892f5904":"top10_Apps_Higest_Reviews = apps[['App','Reviews']].sort_values(by='Reviews',ascending=False).drop_duplicates('App').reset_index().drop('index',axis=1).head(10)\ntop10_Apps_Higest_Reviews['Reviews'] =round(top10_Apps_Higest_Reviews['Reviews']*100\/top10_Apps_Higest_Reviews['Reviews'].sum())\ntop10_Apps_Higest_Reviews['Reviews'] = top10_Apps_Higest_Reviews['Reviews'].astype(int).astype(str)\n\ntop10_Apps_Higest_Reviews['Reviews'] = top10_Apps_Higest_Reviews['Reviews'].apply(lambda x: x+'%')\ntop10_Apps_Higest_Reviews","a90f0230":"least5_Apps_lowest_Reviews = apps[['App','Reviews']].sort_values(by='Reviews').drop_duplicates('App').reset_index().drop('index',axis=1).head(5)\nleast5_Apps_lowest_Reviews","b6b98f6a":"a1 = apps[apps['Size'].str.contains('.M',regex=True)]\n#apps2 = apps[apps['Size']=='.M']\ntop10_Apps_Higest_Size = a1[['App','Size']].sort_values(by='Size',ascending=False).drop_duplicates('Size').reset_index().drop('index',axis=1).head(10)\ntop10_Apps_Higest_Size","f32d813c":"ap = apps2.copy()\nap = ap.dropna()\na2 = ap[ap['Size'].str.contains('.M',regex=True)]\n\nt = a2[['Category','App','Size']]\nt = t.groupby('Category')['App','Size'].max().sort_values(by='Size',ascending=False).drop_duplicates().reset_index()\nt","194b587e":"top10_most_Installed_Apps = apps[['App','Installs']].sort_values(by='Installs',ascending=False).reset_index().drop('index',axis=1).head(10)\ntop10_most_Installed_Apps = top10_most_Installed_Apps[top10_most_Installed_Apps['Installs']!='Free']\ntop10_most_Installed_Apps.head(10)","a1a8f220":"apps['Type'].value_counts()","40ef35af":"Top10_Free_Paid_Apps = pd.crosstab(apps['Category'],apps['Type']).sort_values(by=['Free','Paid'],ascending=False).head(10)\nTop10_Free_Paid_Apps = Top10_Free_Paid_Apps.reset_index()\nTop10_Free_Paid_Apps","2a256afe":"f,ax2 = plt.subplots(figsize =(20,10))\nsns.pointplot(data=Top10_Free_Paid_Apps,x='Category',y='Free',color='green',alpha=0.8)\nsns.pointplot(data=Top10_Free_Paid_Apps,x='Category',y='Paid',color='blue',alpha=0.8)\nplt.text(x = 5, y = 1444.3, s = 'Free Apps', color = 'green', fontsize = 17,style = 'italic')\nplt.text(x = 5, y = 1333.46, s = 'Paid Apps', color='blue',fontsize = 18,style = 'italic')\nplt.xlabel('Categories', fontsize = 15, color = 'black')\nplt.ylabel('Ratings', fontsize = 15, color = 'black')\nplt.xticks(rotation = 60);\nplt.title(\"Free Apps Vs Paid Apps wrt differnet Categories\");","1ba30204":"plt.figure(figsize=(14,6))\nTop10_Free_Paid_Apps.plot.bar(subplots=True);","fb2fd8e6":"plt.figure(figsize=(14,6))\nsns.countplot(data=apps,x='Category',hue='Type')\nplt.xticks(rotation=90)\nplt.title(\"Distribution of Category wrt Type\");","0f7351b2":"top10_apps_MaxPrice = apps[['App','Category','Price']].sort_values(by='Price',ascending=False).drop_duplicates('Price').reset_index().drop('index',axis=1).head(10)\ntop10_apps_MaxPrice","dd0477c9":"sns.barplot(data=top10_apps_MaxPrice,x='Category',y='Price')\nplt.xticks(rotation=90)\nplt.title(\"Categoies wrt total Price\");","a8ac4613":"top10_apps_MaxPrices = apps.groupby(['Category','App'])['Category','App','Price'].sum().sort_values(by='Price',ascending=False).drop_duplicates().head(10)\ntop10_apps_MaxPrices","ec24a094":"plt.figure(figsize=(12,6))\ntop10_apps_MaxPrices.plot(kind='line',marker='o',markersize=5,color='blue')\nplt.xticks(rotation=90)\nplt.title(\"Top10 Apps MaxPrices\");","a84d418e":"apps['Content Rating'].value_counts()\n\n# Category Rating with Free is wrong so we will remove that one.\n\napps['Content Rating'] = apps['Content Rating'].replace('Free',np.nan).dropna() \napps['Content Rating'].value_counts()","530253bc":"apps['Content Rating'].value_counts().plot(kind='bar',color=['red','green','blue','purple','brown','yellow'])\nplt.yscale('log')\nplt.title(\" Distribution of Content Ratings \");","c4e9d6e6":"plt.figure(figsize=(16,10))\nplt.subplot(121)\napps['Content Rating'].value_counts().plot.pie(autopct='%1.f%%',\n                                                             wedgeprops={'linewidth':10,'edgecolor':'white'},\n                                                             shadow=True,\n                                                             fontsize=20)\nplt.title(\"% wise Contert Rating \")\n\nplt.subplot(122)\napps['Content Rating'].value_counts().plot(color='red',marker='o',markersize='10',linestyle='dashed',linewidth=3)\napps['Content Rating'].value_counts().plot(kind='bar',color='green');\nplt.title(\"Distribution of Contert Rating \");","b202fa72":"appCategory_ContentRatings = pd.crosstab(apps['Category'],apps['Content Rating'])\nappCategory_ContentRatings.sort_values(['Everyone','Teen'],ascending=False).head(8)","fb262481":"plt.figure(figsize=(14,8))\nplt.tight_layout()\nsns.heatmap(data=appCategory_ContentRatings,linewidths=0.1,linecolor='black',cmap='bone_r')\nplt.title('App_Category Vs Ratings');","026ea633":"plt.figure(figsize=(14,8))\nplt.tight_layout()\nsns.clustermap(data=appCategory_ContentRatings,linewidths=0.1,linecolor='black',cmap='bone_r')\nplt.title('App_Category Vs Ratings');","5185c4fd":"apps['Android Ver'].value_counts().head(5)","6b60ccca":"# need to replace Varies with device with 0 then we will make the data balance.\napps['Android Ver'] = apps['Android Ver'].replace(\"Varies with device\",'0')","095b6053":"apps['Android Ver'].value_counts().head(5)","28539363":"apps['Android Ver'] = apps['Android Ver'].apply(lambda x:x.split('W')[0])\napps = apps[apps['Android Ver']!='Free']\napps['Android Ver']=apps['Android Ver'].apply(lambda x:x[0:3])\napps['Android Ver'] = apps['Android Ver'].astype(float);\napps['Android Ver'] = round(apps['Android Ver'])\napps['Android Ver'].value_counts()","759e2404":"# Converting 0.0 a resonable value\napps['Android Ver'] = apps['Android Ver'].replace(0.0,np.nan)\napps['Android Ver'] = apps['Android Ver'].fillna(method='ffill')\napps['Android Ver'].value_counts()","d904dce0":"## Distribution of People using different Android Versions wrt Type of App installed\nAndroid_version_Type = pd.crosstab(apps['Type'],apps['Android Ver'])\nAndroid_version_Type.reset_index()","ed8d3e8e":"plt.figure(figsize=(14,8))\nplt.tight_layout()\nsns.heatmap(data= Android_version_Type,linewidths=0.1,linecolor='black',cmap='tab20')\nplt.title('Android Version Vs Types');","35a0bb85":"apps['Last Updated'].value_counts()","89b84c85":"apps['Last Updated'] = pd.to_datetime(apps['Last Updated'])","6a7d3842":"def get_monthName(dt):\n    var = str(dt.month_name()) + \" \" + str(dt.year)\n    return var\n\napps['Last_Updated_Month'] = apps['Last Updated'].map(get_monthName)","4ca32c50":"def get_month(dt):\n    return dt.month_name()\n\napps['Month_of_Updation'] = apps['Last Updated'].map(get_month)\n\ndef get_year(dt):\n    return dt.year\n\napps['Year_of_Updation'] = apps['Last Updated'].map(get_year)","ad9f5863":"#Updatings of apps\nupdates = apps['Year_of_Updation'].value_counts()","37ec9d1e":"plt.figure(figsize=(19,6))\nplt.subplot(121)\nsns.countplot(data=apps,x='Year_of_Updation')\nplt.title(\"Count of Apps updated in Each Year \");\n\nplt.subplot(122)\nupdates.plot(kind='line',marker='o',markersize=15);","ddf8624f":"### Which category has updated there apps most of the time\n\n### top 5 apps updated most of the time","701772b7":"apps['Year_of_Updation'] = apps['Year_of_Updation'].astype(int)\nsns.regplot(data=apps,x='Year_of_Updation',y='Rating',scatter_kws={'alpha':0.15})\nplt.title(\"Ratings vs Year_of_Updation\");","eeca0525":"updating_Apps_year =  pd.crosstab(apps['Category'],apps['Year_of_Updation'])\nupdating_Apps_year","e5ac369f":"plt.figure(figsize=(14,8))\nplt.tight_layout()\nsns.heatmap(data=updating_Apps_year,linewidths=0.1,linecolor='black',cmap='cividis_r')\nplt.title('App_Category Vs Year of Updation');","21d6dd1a":"updating_Apps_month =  pd.crosstab(apps['Category'],apps['Month_of_Updation'])\nupdating_Apps_month","8a40efec":"plt.figure(figsize=(14,8))\nplt.tight_layout()\nsns.heatmap(data=updating_Apps_month,linewidths=0.1,linecolor='black',cmap='Reds')\nplt.title('App_Category Vs month of updation');","561ab424":"plt.figure(figsize=(14,8))\nplt.tight_layout()\nsns.clustermap(data=updating_Apps_month,linewidths=0.1,linecolor='black',cmap='bone_r')\nplt.title('App_Category Vs month of Updation');","e63344ab":"apps['Current Ver'].value_counts()","116f82f7":"current_version = apps[['Category','Current Ver']].groupby('Category').max().sort_values(by='Current Ver',ascending=False).reset_index().head(20)\ncurrent_version","1820b65e":"total_version = apps[['Category','Current Ver']].groupby('Category').count().sort_values(by='Current Ver',ascending=False).reset_index().head(10)\ntotal_version","d4467699":"plt.figure(figsize=(12,4))\nsns.catplot(data=total_version,x='Category',y='Current Ver',kind='bar')\nplt.xticks(rotation=90);","7950c0d1":"# remove\/ deselect the unwanted column 'Varies'\napps = apps[apps['Android Ver']!='Varies']\napps['Android Ver'] = apps['Android Ver'].replace('4.4W','4.4')\n\na = apps[['Category','Android Ver']].copy()\na","da586e5f":"#Latest versions of all Categories of Apps\nversions =  a.groupby('Category')['Android Ver'].max().sort_values(ascending=False)\nversions = versions.reset_index()\nversions = versions[(versions['Category']!='1.9') & (versions['Android Ver']!='1.9')]\n\nversions['Android Ver'] = versions['Android Ver'].replace('Free',np.nan)\nversions.dropna(inplace=True)","9e3cb058":"versions.head(10)","ae763137":"versions['Android Ver'] = pd.to_numeric(versions['Android Ver'])\n\nplt.figure(figsize=(15,10))\nsns.barplot(data=versions,y='Category',x='Android Ver')\nplt.title(\"Categories working on Latest Android Version\");","3752ca24":"plt.figure(figsize=(13,5))\nsns.countplot(data=versions,y='Android Ver')\nplt.title(\" Number of users using Android Version 5 or More\");","d0a8c12d":"apps = apps[apps['Category']!='1.9']","b18711b6":"fg = apps2[['Category','Rating']].copy()\nfg['Rating'] = round(fg['Rating'])\nfg.groupby(apps['Category'])['Rating'].value_counts()","f13d9e60":"#Top 10 Cateogy which got highest Raatings\ntop10_rating_eachApp = fg.groupby(apps['Category'])['Rating'].value_counts()\ntop10_rating_eachApp = top10_rating_eachApp.unstack().reset_index()\ntop10_rating_eachApp.columns=['Category','1 star','2 star','3 star','4 star','5 star']\n\ntop10_rating_eachApp = top10_rating_eachApp.sort_values(['5 star','4 star'],ascending=False).head(10)\ntop10_rating_eachApp = top10_rating_eachApp.fillna(0)\ntop10_rating_eachApp = top10_rating_eachApp.reset_index().set_index('index').reset_index().drop('index',axis=1)\ntop10_rating_eachApp","f900903d":"#Melting the  top10_rating_each category\n\nmelted_top10_rating_eachApp = pd.melt(top10_rating_eachApp, \n                    id_vars=[\"Category\"],\n                    var_name=[\"1 star\"])\n\nmelted_top10_rating_eachApp.columns=[\"Category\",\"Ratings\",\"Count\"]\nmelted_top10_rating_eachApp.head()","3bef47af":"plt.figure(figsize=(19,6))\nsns.barplot(data=melted_top10_rating_eachApp,x='Category',y='Count',hue='Ratings')\nplt.xticks(rotation=90)\nplt.title(\"Top 10 Categories having higest Ratings\");","c4caee88":"Ratingscols = apps[['App','Category','Rating']].copy()","35b55992":"Ratingscols.sort_values('Rating', ascending=False).groupby(['Category'])['Rating'].value_counts()","94ec3e84":"# Relation between Ratings and Reviews\nx = sns.regplot(data=apps,x='Rating',y='Reviews',scatter_kws={'alpha':0.15})\nx.set(yscale=\"log\");","0398a63c":"apps[['Rating','Reviews']].corr()","84d67426":"top5_install = apps.sort_values(by='Installs',ascending=False).groupby(['Category','App'])['Installs'].value_counts()\ntop5_install","abf3db4c":"Rating_ContentRating = pd.crosstab(round(apps['Rating']),apps['Content Rating'])\nRating_ContentRating","fb06e901":"#percentage of paid and free apps in Play Store?\nplt.figure(figsize=(16,5))\nplt.subplot(121)\nsns.countplot(data=apps,x='Type')\nplt.title(\"Distribution of Free vs Paid Apps\");\n\nplt.subplot(122)\nlabels = apps.Type.unique() \nsizes = [len(apps[apps.Type == \"Free\"]), len(apps[apps.Type == \"Paid\"])]\nexplode = (0, 0.2)\n\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90, colors=[\"red\",\"orange\"]) \nplt.axis('equal');  \nplt.title(\"Percentage of Paid Vs Free Apps\");","b48c4a1d":"Content_Type_Year_Updation = pd.crosstab(apps['Content Rating'],[apps['Type'], apps['Year_of_Updation']])\nContent_Type_Year_Updation","e1172144":"plt.figure(figsize=(14,8))\nplt.tight_layout()\nsns.heatmap(data=Content_Type_Year_Updation,linewidths=0.1,linecolor='black',cmap='gist_stern')\nplt.title('Rating_Content WRT Rating and Year');","83d6f0fa":"Content_Type_Installs = pd.crosstab(apps['Content Rating'],[apps['Type'], apps['Installs']])\nContent_Type_Installs","c15ad3eb":"plt.figure(figsize=(14,9))\nplt.tight_layout()\nsns.heatmap(data=Content_Type_Installs,linewidths=0.1,linecolor='black',cmap='gist_stern')\nplt.title('Rating_Content WRT Rating and Installs');","df937e45":"bins = [0.01,75,150,225,300,375,400]\nlabels =[\"0-75 $\",\"75-150 $\",\"150-225 $\",\"225-300 $\",\"300-375 $\",\"375-400 $\"]\napps['Price_range'] = pd.cut(apps['Price'],bins=bins, labels=labels)","7695a56e":"apps.head(2)","57240f9b":"# Filling the Empty Categorical values\napps['Price_range'] = apps['Price_range'].cat.add_categories('Free')","77a50ed4":"apps['Price_range'].fillna('Free', inplace =True) ","2508d330":"apps.head(2)","ad05f89b":"Content_Type_Year_PriceRange = pd.crosstab(apps['Content Rating'],[apps['Type'], apps['Price_range']])\nContent_Type_Year_PriceRange","bd0c6f99":"plt.figure(figsize=(12,6))\nContent_Type_Year_PriceRange.plot(kind='line',marker='o')\nplt.xticks(rotation=60)\nplt.title('Content Ratings wrt Type and Price');","17307dbd":"plt.figure(figsize=(14,9))\nplt.tight_layout()\nsns.heatmap(data=Content_Type_Year_PriceRange,linewidths=0.1,linecolor='black',cmap='gist_stern')\nplt.title('Rating_Content WRT Rating and Installs');","bba3ad50":"ab = apps[['Category','Type','Content Rating','Android Ver']].copy()","03c8d153":"# remove\/ deselect the unwanted column 'Varies'\nab = ab[ab['Android Ver']!='Varies']\nab.head()","87f3b3e0":"# creating bins for dividing Android Version\n\nbins = [1.0,3.0,6.0,8.0]\nlabels =[\"1.0 - 3.0\",\"3.0 - 6.0\",\"6.0 - 8.0\"]\nab['Android Ver'] = pd.cut(ab['Android Ver'],bins=bins, labels=labels);","22b1cebc":"ab.tail()","58861946":"Content_Type_Year_AndroidVersion = pd.crosstab(ab['Content Rating'],[ab['Type'], ab['Android Ver']])\nContent_Type_Year_AndroidVersion","c73fd68b":"Content_Type_Year_AndroidVersion.plot()\nplt.title(\"Content type wrt Android Version using\")\nplt.xticks(rotation=60);","9d208282":"plt.figure(figsize=(14,9))\nplt.tight_layout()\nsns.heatmap(data=Content_Type_Year_AndroidVersion,linewidths=0.1,linecolor='black',cmap='gist_stern')\nplt.title('Rating_Content WRT Rating and Andoid Version');","fad3b807":"Content_Type_Year_Month = pd.crosstab(apps['Content Rating'],[apps['Type'], apps['Month_of_Updation']])\nContent_Type_Year_Month","0e2641b6":"plt.figure(figsize=(12,6))\nsns.lineplot(data=apps,x='Month_of_Updation',y='Reviews',hue='Type',marker='o',markersize=10)\nplt.xticks(rotation=60);","c9f4fae6":"plt.figure(figsize=(20,5))\nfig = sns.countplot(x=apps['Installs'], palette=\"hls\")\nfig.set_xticklabels(fig.get_xticklabels(),rotation=90)\nplt.title(\"Distribution of Installations by count\");\nplt.show(fig);","16371cfc":"plt.figure(figsize=(15,3))\nfig = sns.barplot(y=apps['Genres'].value_counts().reset_index()[:10]['Genres'], x=apps['Genres'].value_counts().reset_index()[:10]['index'], palette=\"hls\")\nfig.set_xticklabels(fig.get_xticklabels(),rotation=90)\nplt.title(\"Genres wrt Different Categories\");","8169cb64":"g = apps.sort_values(by='Reviews',ascending=False);","caa73f46":"plt.figure(figsize=(10,5))\nfig = sns.barplot(x=g['App'][:10], y=g['Reviews'][:10], palette=\"hls\")\nfig.set_xticklabels(fig.get_xticklabels(),rotation=90)\nplt.title(\"Top 5 Apps which got highest ratings\")\nplt.show(fig);","87140e69":"apps['Size'].value_counts()","3067ccae":"temp=apps['Price'].apply(lambda x: True if x>350 else False)\napps[temp].head(3)","7f0cf550":"apps['Pri_Genres'] = apps['Genres'].apply(lambda x: x.split(';')[0])\napps['Pri_Genres'].head()","0d82b1ca":"apps['Sec_Genres'] = apps['Genres'].apply(lambda x: x.split(';')[-1])\napps['Sec_Genres'].head()","6ba21eae":"grouped = apps.groupby(['Pri_Genres','Sec_Genres'])\ngrouped = grouped.size().reset_index()\ngrouped.head()","1db1ca75":"twowaytable = pd.crosstab(apps[\"Pri_Genres\"],apps[\"Sec_Genres\"])\ntwowaytable.head()","0b3ac049":"twowaytable.plot(kind=\"barh\", figsize=(15,15),stacked=True);\nplt.legend(bbox_to_anchor=(1.0,1.0))\nplt.title(\"Pri Genres Vs Sec Genres\");","82fd7e14":"apps['Last Updated'].head()","5226a44e":"sns.set(font_scale=1.5, style = \"whitegrid\") #set the font size and background\nplt.figure(figsize=(8,6)) #set the plotsize\nsns.distplot(apps['Rating'], hist=False, color=\"orange\", kde_kws={\"shade\": True})\nplt.ylabel(\"Frequency\")\nplt.title(\"Distribution of App Ratings\");","b70b2db3":"plt.figure(figsize=(8,6))\nplt.hist(apps.Rating, range=(1,5), bins=16)\nplt.axvline(x=apps.Rating.mean(), linewidth=4, color='g', label=\"mean\")\nplt.axvline(x=apps.Rating.median(), linewidth=4, color='r', label=\"median\")\nplt.xlabel(\"App Ratings\")\nplt.ylabel(\"Count\")\nplt.title(\"Histogram of App Ratings\")\nplt.legend([\"mean\", \"median\"])\nplt.show();","0f8a7591":"avg_category_rating = apps.groupby(\"Category\")['Rating'].mean().sort_values(ascending=False).reset_index()\navg_category_rating.head(10)","7680804d":"plt.figure(figsize=(17,6))\nx = sns.barplot(x=\"Category\", y=\"Rating\", data=avg_category_rating, palette=\"Blues\") \nplt.xticks(rotation=90)\nx.set(ylim=(3.5,5))\nplt.axhline(apps['Rating'].mean(),color='green');\nplt.text(x = 27, y = 4.25, s = 'Mean App Rating', color='green',fontsize = 18,style = 'italic');","2cbf46d3":"sns.lineplot(data=install_reviews,x='Installs',y='Reviews');\nplt.title(\"Reviews vs Installs\");","fbb3d12c":"apps['Review_to_Install_Ratio'] = apps['Reviews'] \/ apps['Installs']\napps['Review_to_Install_Ratio'].head()","69645191":"f, axes = plt.subplots(1, 3, figsize=(35, 10), sharex=True) #set the plotsize, divide p\n\n\ng1 = sns.kdeplot(apps.Review_to_Install_Ratio[apps.Installs == 1000000000], shade=True, ax=axes[0], color=\"blue\")\ng1.title.set_text(\"Distriution of Reviews per Download in 1 Billion Installed Apps\")\n\ng2 = sns.kdeplot(apps.Review_to_Install_Ratio[apps.Installs == 500000000], shade=True, ax=axes[1], color=\"green\")\ng2.title.set_text(\"Distriution of Reviews per Download in 500 Million Installed Apps\")\n\ng3 = sns.kdeplot(apps.Review_to_Install_Ratio[apps.Installs == 100000000], shade=True, ax=axes[2],color=\"red\")\ng3.title.set_text(\"Distriution of Reviews per Download in 100 Million Installed Apps\")","0074e74f":"#Do we have a correlation between price of the app and rating?\nplt.figure(figsize=(12,6))\nplt.axhline(y=apps.Rating.mean(), linewidth=4, color='g', label=\"mean\")\nsns.regplot(x=\"Price\", y=\"Rating\", data=apps,scatter_kws={'alpha':0.15})\nplt.title(\"Price VS Rating\", size=20)\nplt.legend();","da541a61":"#Chagning MB and GB to overall KB's\ndef num_size(Size):\n    if Size[-1] == 'k':\n        return float(Size[:-1])*1024\n    else:\n        return float(Size[:-1])*1024*1024","79df676d":"apps['Size'].value_counts().head()","07d3dc3b":"apps['Size'] = apps['Size'].replace('Varies with device',0.0)","adb2d5a6":"apps3 = apps[apps['Size']!=0.0].copy()\napps3['Size'].value_counts()","98ffbf20":"apps3['Size']=apps3['Size'].map(num_size).astype(float)","58342465":"apps3['Size'].head()","f282fd8c":"#apps['Android_Ver']=apps.Android_Ver.apply(lambda x: x.replace('nan', '9999'))","d995e556":"#Size vs reviews\nplt.figure(figsize=(15,5))\nsns.scatterplot(data=apps3,x='Size',y='Rating')\nplt.axhline(apps3['Rating'].mean(),color='red')\nplt.title(\"Size vs Ratings\");","c4c0e231":"ab = apps3[(apps3['Category']== 'GAME') | (apps3['Category']== 'FAMILY')]\nplt.figure(figsize=(15,6))\nsns.scatterplot(data=ab,x='Size',y='Rating',hue='Category')\nplt.axhline(apps3['Rating'].mean(),color='brown')\nplt.title(\" Size vs Ratings wrt Category\");","adf253d3":"f = np.log(apps3['Size'])\ng = np.log(apps3['Reviews'])\n\nac = apps3[(apps3['Category']== 'GAME') | (apps3['Category']== 'FAMILY') | (apps3['Category']== 'DATING') | (apps3['Category']== 'TOOLS')]\n\nplt.figure(figsize=(16,7))\nsns.scatterplot(f,g,hue=ac['Category'])\nplt.title(\"Size vs Reviews wrt Category\");","fe05f390":"plt.figure(figsize=(16,5))\nsns.boxplot(data=apps3,y='Price',x='Category')\nplt.xticks(rotation=90);\nplt.title(\"Category Vs Price\");","5a84058a":"plt.figure(figsize=(16,5))\nsns.boxplot(data=apps3[apps3['Price']<250],y='Price',x='Category')\nplt.xticks(rotation=90);\nplt.title(\"Category Vs Price\");","94c8b50e":"medi = apps3[(apps3['Category']=='MEDICAL') & (apps3['Price']>0)]\nmedi.head(2)","98fbd2d9":"sns.countplot(data=medi,x='Content Rating');\nplt.title(\"Medical Apps Content Ratings\");","418eeea0":"plt.figure(figsize=(16,5))\nsns.scatterplot(data=apps3,y='Rating',x='Size',hue='Type')\nplt.axhline(apps3['Rating'].mean(),color='red');\nplt.title(\"Size Vs Ratings\");","6eaaec4f":"plt.figure(figsize=(16,5))\nsns.scatterplot(data=apps3,y='Rating',x='Size',hue='Content Rating')\nplt.axhline(apps3['Rating'].mean(),color='red');","d2aac1b3":"plt.figure(figsize=(19,5))\nplt.subplot(121)\nx = np.log(apps2['Installs'])\ny = np.log(apps2['Reviews'])\nsns.scatterplot(x,y,hue= apps3['Content Rating']);\nplt.title(\"Installs vs Reviews\");\nplt.legend(loc='best');\n\nplt.subplot(122)\nsns.heatmap(apps2[['Installs','Reviews']].corr(),annot=True)\nplt.title(\"Correlation between both\");","663ff3d0":"g = sns.kdeplot(np.sqrt(apps['Reviews']), color=\"Green\", shade = True)\ng.set_xlabel(\"Reviews\")\ng.set_ylabel(\"Frequency\")\nplt.title('Distribution of Reveiw');","e8d7a6f4":"apps3.loc[(apps3['Price'] > 0) & (apps3['Price'] <= 0.99), 'PriceBand'] = '1 cheap'\napps3.loc[(apps3['Price'] > 0.99) & (apps3['Price'] <= 2.99), 'PriceBand']   = '2 not cheap'\napps3.loc[(apps3['Price'] > 2.99) & (apps3['Price'] <= 4.99), 'PriceBand']   = '3 normal'\napps3.loc[(apps3['Price'] > 4.99) & (apps3['Price'] <= 14.99), 'PriceBand']   = '4 expensive'\napps3.loc[(apps3['Price'] > 14.99) & (apps3['Price'] <= 29.99), 'PriceBand']   = '5 too expensive'\napps3.loc[(apps3['Price'] > 29.99), 'PriceBand']  = 'Highly Expensive'\napps3[['PriceBand', 'Rating']].groupby(['PriceBand'], as_index=False).mean()","c000aa7f":"g = sns.catplot(x=\"PriceBand\",y=\"Rating\",data=apps3, kind=\"boxen\", height = 10 ,palette = \"Pastel1\")\ng.despine(left=True)\ng.set_xticklabels(rotation=90)\ng = g.set_ylabels(\"Rating\")\nplt.title('Boxen plot Rating VS PriceBand',size = 20);","0d41d09a":"#Days from last updations\n\napps3['new'] = pd.to_datetime(apps3['Last Updated'])\n\napps3['lastupdate'] = (apps3['Last Updated'] -  apps3['Last Updated'].max()).dt.days\napps3['lastupdate'].head()\n\nplt.figure(figsize = (10,10))\nsns.regplot(x=\"lastupdate\", y=\"Rating\", color = 'lightgreen',data=apps3);\nplt.title('Rating  VS Last Update( days ago )',size = 20);","6e4ea280":"apps3['Total_money_generated'] = apps3['Installs'] * apps3['Price']","87c8e0dc":"top_10_category_revenue = apps3.groupby('Category')['Total_money_generated'].sum().astype(int).sort_values(ascending=False).head(10)\ntop_10_category_revenue","5a517587":"plt.figure(figsize=(16,10))\nplt.subplot(121)\ntop_10_category_revenue.head().plot.pie(autopct='%1.f%%',\n                                                             wedgeprops={'linewidth':10,'edgecolor':'white'},\n                                                             shadow=True,\n                                                             fontsize=20)\nplt.title(\"Percentage of top 5 Revenue generating Apps\")\n\nplt.subplot(122)\ntop_10_category_revenue.head().plot(color='brown',marker='o',markersize='10',linestyle='dashed',linewidth=3)\ntop_10_category_revenue.head().plot(kind='bar',color='pink');\nplt.title(\"Top 5 Revenue generating Apps\");","55d766fe":"# Creating Tree Map\n\nplt.figure(figsize=(16,9))\nsquarify.plot(sizes=top_10_category_revenue.values,label=top_10_category_revenue.index,value=top_10_category_revenue.values,color=[\"#FF6138\",\"#FFFF9D\",\"#BEEB9F\", \"#79BD8F\",\"#684656\",\"#E7EFF3\"], alpha=0.6)\nplt.title('Revenue Generated by Each App');","48378032":"plt.figure(figsize=(16,5))\nsns.countplot(data=apps3,x='Content Rating',hue='Category')\n#pltlegend().remove()\nplt.legend(loc='right');\nplt.title(\"Content type wrt Category\");","383b6b26":"plt.figure(figsize=(15,5))\nsns.heatmap(apps3.corr(),annot=True);","0d47736f":"apps3.nlargest(5,'Reviews')","69037ea9":"apps3.nsmallest(5,'Reviews')","9980b601":"#Grouping the number of reviews in 4 groups -A, B, C, Highest\nbins = [0,100,100000,1000000,100000000]\nlabels =[\"A\",\"B\",\"C\",\"Highest\"]\napps3['Review_category'] = pd.cut(apps3['Reviews'],bins=bins, labels=labels)","645ba900":"apps3['Review_category'] = pd.cut(apps3['Reviews'],bins=bins, labels=labels)","1749670d":"apps3['Reviews'].max()","aac6a1f7":"ax = sns.countplot(data=apps3,x='Review_category')\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()),(p.get_x()+p.get_width()\/2,p.get_height()),\n               ha='center',va='center',xytext=(0,10),textcoords='offset points',color='black',fontsize=20);\nplt.title(\"Distribution of Review Category\");","dd15e0ed":"plt.figure(figsize=(5,5))\nx = sns.barplot(x='Review_category', y='Rating', data=apps3, hue='Type', palette='husl')\nplt.legend(loc=4)\nplt.title('Number of applications installed and their ratings with respect to the type of application')\nx.set(ylim=(1,5));","516318a4":"plt.figure(figsize=(5,5))\nsns.barplot(x='Review_category', y='Reviews', data=apps3, hue='Type', palette='husl')\nplt.legend(loc=0)\nplt.title('Group of installed applications with respect to Reviews and type');","311c096a":"aas = apps3[(apps3['Size']<51200)]\naas = aas.sort_values(by=['Installs','Reviews'], ascending=False).reset_index().drop('index',axis=1)\naas.head(3)","fe8f0b49":"sns.barplot(data=aas.head(),y='App',x='Installs')\nplt.xticks(rotation=90);","2fc57406":"sns.pointplot(data=aas,y='Reviews',x='Installs',marker='o')\nplt.xticks(rotation=90);","7df3afc3":"ass2 = apps3[(apps3['Category']=='SOCIAL')&(apps3['Size']<50000000)]\nass2 = ass2.sort_values(by='Installs',ascending=False)\nass2.drop_duplicates('App',inplace=True);","3b01e421":"sns.barplot(data=ass2.head(5),y='App',x='Installs',hue='Review_category');\nplt.title(\"Apps in Social Cateogory that are small size but have highest Installations\");","c14ad422":"sns.heatmap(apps2[['Rating','Reviews','Installs','Size','Price']].corr(), annot=True, fmt='.2f', cmap='YlGnBu_r');","ae3b3312":"sns.pairplot(apps,hue = 'Type', palette='Set2');","e50c3f48":"#for label in ax.get_xticklabels():\n#    label.set_rotation(90)\n\nsns.catplot(x = 'Content Rating', y = 'Rating',hue='Type',data=apps,\n            kind = 'violin', inner = 'stick', split = True,\n            height=8, aspect=1.5, palette='Set3')\nplt.title(\"Content Rating vs Rating wrt Type\");","70a619ec":"f,ax=plt.subplots(1,2,figsize=(14,10))\na = apps[apps['Type']=='Free']['Category'].value_counts()\na.plot(kind='barh',ax=ax[0])\nax[0].set_title('Category based on Free and Paid')\nb = apps[apps['Type']=='Paid']['Category'].value_counts()\nb.plot(kind='barh',ax=ax[1]);\n#plt.xticks(rotation=90)","38c2b931":"apps[apps['Type']=='Free']['Category'].value_counts().reset_index().head()","b02649cf":"plt.figure(figsize=(16,6))\nsns.boxplot(data=apps,x='Category',y='Rating')\nplt.xticks(rotation=90)\nplt.title(\"Category vs Rating\");","db23fc90":"top_10_apps_mostRating_2018_mostDownloads = apps3[(apps3['Rating'] >= 4.5) & (apps3['Year_of_Updation']== 2018) & (apps3['Installs'] >= 100000000)]","9590d137":"top_10_apps_mostRating_2018_mostDownloads = top_10_apps_mostRating_2018_mostDownloads.drop_duplicates('App')\ntop_10_apps_mostRating_2018_mostDownloads.head()","cfde9ed5":"ap1 = top_10_apps_mostRating_2018_mostDownloads[top_10_apps_mostRating_2018_mostDownloads['Category']==\"GAME\"]\nap1 = ap1.sort_values(by='Installs',ascending=False)\nap1.head()","d1e9c85a":"sns.lineplot(data=ap1.head(10),x='App',y='Reviews',marker='o')\nplt.xticks(rotation=90)\n##plt.title(\"Game Category Apps wrt Reviews\");","db7b446a":"sns.barplot(data=ap1.head(10),x='App',y='Reviews',hue='Content Rating')\nplt.xticks(rotation=90)\nplt.title(\"Games with overall Reviews wrt Content Ratings\");","cda0e891":"new_app = apps[['Category','Rating','Android Ver']].copy()","c7975c60":"ab = new_app.groupby('Category').mean().reset_index()\nab.head()","732c5140":"f,ax2 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='Category',y='Android Ver',data=ab,color='magenta',alpha=0.8)\nsns.pointplot(x='Category',y='Rating',data=ab,color='aqua',alpha=0.8)\nplt.text(x = 18, y = 4.3, s = 'Average Rating', color = 'aqua', fontsize = 17,style = 'italic')\nplt.text(x = 18, y = 3.46, s = 'Average Min Supported Android Ver', color='magenta',fontsize = 18,style = 'italic')\nplt.xlabel('Categories', fontsize = 15, color = 'black')\nplt.ylabel('Ratings', fontsize = 15, color = 'black')\nplt.xticks(rotation =90)\nplt.title(\" Avg Ratings vs Ang minimum Supported Android Version\");","82bc4b52":"g = sns.jointplot(ab['Android Ver'], ab['Rating'], kind=\"kde\", height=7, color='aqua')\nplt.savefig('graph.png')\nplt.show()","ac05b378":"plt.figure(figsize = (12,7))\nsns.boxplot(x='Content Rating', y='Rating', hue='Type', data=apps, palette='PRGn')\nplt.title(\"Content Rating Vs Rating\");","2413898f":"plt.figure(figsize=(15,5))\nplt.axhline(y=apps.Rating.mean(), linewidth=4, color='g', label=\"mean\")\nsns.scatterplot(data=apps3,x='Size',y='Rating',alpha = 0.5)\nplt.xlabel('Size')              \nplt.ylabel('Rating')\nplt.title('How do Sizes impact the app rating?');","6bc3ca36":"plt.figure(figsize=(20,10))\nax=sns.countplot('Installs',data=apps)\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()),(p.get_x()+p.get_width()\/2,p.get_height()),\n               ha='center',va='center',xytext=(0,10),textcoords='offset points',color='black',fontsize=20)\nplt.xticks(rotation=90,fontsize=20)\nplt.yticks(fontsize=20)\nplt.xlabel('Installs',fontsize=20)\nplt.ylabel('Count',fontsize=20)\nplt.title('Installation Count of google apps',fontsize=20,color='red');","c473897d":"p_price=apps.groupby('Category')['Price'].sum().sort_values(ascending=False).reset_index()\nplt.figure(figsize=(17,5))\nsns.barplot(x='Category',y='Price',data=p_price)\n\nplt.xlabel('Category',fontsize=15)\nplt.ylabel('Price',fontsize=15)\nplt.xticks(rotation=90,fontsize=15)\nplt.yticks(fontsize=15)\nplt.title('Total Price according to the category in google apps',fontsize=15);","2a4a92fc":"content_price=apps.groupby('Content Rating')['Price'].sum().sort_values(ascending=False).reset_index()\nplt.figure(figsize=(17,5))\nsns.barplot(x='Content Rating',y='Price',data=content_price)\nplt.ylabel('Content Rating',fontsize=15)\nplt.xlabel('Price',fontsize=15)\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.title('Total Price of content rating of google apps',fontsize=15);","d030f9a6":"plt.figure(figsize=(30,20))\nplt.subplot(121)\napps.groupby('Content Rating')['Genres'].nunique().plot.pie(autopct='%1.f%%',\n                                                             wedgeprops={'linewidth':10,'edgecolor':'white'},\n                                                             shadow=True,\n                                                             fontsize=20)\nplt.title(\" % Distribution based on Generes\")\n\nplt.subplot(122)\napps.groupby('Type')['Genres'].nunique().plot.pie(autopct='%1.f%%',\n                                                             wedgeprops={'linewidth':5,'edgecolor':'white'},\n                                                             shadow=True,\n                                                             fontsize=20)\nplt.title(\" % Distribution based on Generes Type\");","9be0743e":"### Same using Pie plot\n\nplt.figure(figsize=(30,20))\nplt.subplot(121)\napps.groupby('Content Rating')['Genres'].nunique().plot.pie(autopct='%1.f%%',\n                                                             wedgeprops={'linewidth':10,'edgecolor':'white'},\n                                                             shadow=True,\n                                                             fontsize=20)\nplt.ylabel('')\ncircle=plt.Circle((0,0),0.5,color='white')\nplt.gca().add_artist(circle)\nplt.title('Content rating according to genres',fontsize=20)\n\nplt.subplot(122)\napps.groupby('Type')['Genres'].nunique().plot.pie(autopct='%1.f%%',\n                                                             wedgeprops={'linewidth':5,'edgecolor':'white'},\n                                                             shadow=True,\n                                                             fontsize=20)\nplt.ylabel('')\ncircle=plt.Circle((0,0),0.5,color='white')\nplt.gca().add_artist(circle)\nplt.title('Google app type according to genres',fontsize=20);","9fc71106":"plt.figure(figsize=(6,12))\ng = sns.FacetGrid(apps3,col='Content Rating', hue='Type', col_wrap=3)\ng.map(sns.regplot, 'Installs', 'Reviews');","b2ea00ea":"apps[apps['App'].str.startswith('G')].head(2)","483262c0":"apps[apps['App'].str.endswith('E')].head(2)","9da37895":"apps['Installs'] = apps['Installs'].replace('Free',np.nan)\napps['Installs'] = apps['Installs'].fillna(apps['Installs'].interpolate())\napps['Installs'] = pd.to_numeric(apps['Installs'])\n\napps.groupby('Category')['Installs'].agg(['mean', 'min', 'max']).astype(int).head()","e63569db":"capitalizer = apps['Last_Updated_Month'].apply(lambda x: x.capitalize())\ncapitalizer","de342b0f":"apps.loc[apps['Reviews'].idxmax(),]['App']","638bb4a6":"dummy = pd.get_dummies(apps3['Type'])\ndummy","5709e638":"apps2 = pd.concat([apps2, dummy], axis=1)","9e7ec9a1":"apps2.drop('Type',axis=1,inplace=True)","438ae9c5":"apps2.head(2)","ab99c7c4":"apps['Content Rating'].value_counts()","2d028116":"dummy1 = pd.get_dummies(apps3['Content Rating'])\ndummy1","d8de4348":"apps2 = pd.concat([apps2, dummy1], axis=1)\napps2.drop('Content Rating',axis =1,inplace=True)\napps2.head(2)","52a81a4e":"## Let's find the top 10 most frequent categories for the variable Category\n\napps3['Category'].value_counts().sort_values(ascending=False).head(10)","b6e59982":"# let's make a list with the most frequent categories of the variable\n\ntop_10 = [x for x in apps3['Category'].value_counts().sort_values(ascending=False).head(10).index]\ntop_10","01ab87cc":"## Creating function to perform One Hot Encoding\n\ndef one_hot_top_x(df, variable, top_x_labels):\n        \n    for label in top_x_labels:\n        df[variable+'_'+label] = np.where(apps2[variable]==label, 1, 0)","475c8c2e":"one_hot_top_x(apps2, 'Category',top_10)","672aaa08":"# Removing the Category Column\napps2.drop('Category',axis=1,inplace=True)\napps2.head(2)","b01c79dc":"import statistics as sts\nfrom statistics import mode","c0e1a89d":"apps4 = apps3.copy()\nprint(\"Mean of Rating: \" + str(round(apps4.Rating.mean(),2)) + \" Median of Rating:\" + str(round(apps4.Rating.median(),2)))","4f61d209":"sns.distplot(apps4['Rating'],norm_hist=True)\nplt.title(\"Distribution of Ratings\");","d074b738":"plt.figure(figsize=(8,6))\nplt.hist(apps4.Rating, range=(1,5), bins=16)\nplt.axvline(x=apps4.Rating.mean(), linewidth=4, color='g', label=\"mean\")\nplt.axvline(x=apps4.Rating.median(), linewidth=4, color='r', label=\"median\")\nplt.axvline(x=mode(apps4['Rating']), linewidth=4, color='yellow', label=\"mode\")\nplt.xlabel(\"App Ratings\")\nplt.ylabel(\"Count\")\nplt.title(\"Histogram of App Ratings\")\nplt.legend();","6aba14fc":"sns.boxplot(data=apps4,x='Price')\nplt.title(\"Price Variation\")","170ad8f4":"# Seeing the variance\n\nva1 = apps4['Rating'].var()\n\nprint(\"Variance: \" + str(round(va1,2)))\n\n#-> We can see the variance is too large to compare the dispersion of age, we have to use standard deviation\n\n#Cal standard deviation and coff of variation (sd\/mean) of age\nstaDev = apps4['Rating'].std()\n\nprint(\"Standard Deviation: \" + str(round(staDev,2)))\n\n#To Compare 2 variable we need coff of variance\n\ncoffOfVariation = apps4['Rating'].std()\/apps4['Rating'].mean()\ncoffOfVariation\n\nprint(\"Coffecient of Varaition: \" + str(round(coffOfVariation,2)))","ebbe0f4f":"cov = apps4['Rating'].cov(apps4['Price'])\n\nprint(\"Covarience: \" + str(cov))\n\n# cal corelation coeff (corelation adjust covariance, so that relationship b\/w 2 variables become easy to understand)\n\n#(corelation coeff = cov(x,y)\/sd(x).sd(y), -1 to 1 range)\n\nsdMul = apps4['Rating'].std()*apps4['Price'].std()\n\ncorelation_coeff_Rating_Price = apps4['Rating'].cov(apps4['Price'])\/sdMul\nprint(\"Correlation Coefficient: \" + str(corelation_coeff_Rating_Price))","7fa54003":"top10_rating_eachApp.head(3)\n\n# These are the Top 3 apps Category so we will compare these","277a89d4":"family = apps4[(apps4['Category'] == 'FAMILY') & (apps4['Price'] > 0)]['Price'].head(78)\ngame = apps4[(apps4['Category'] == 'GAME') & (apps4['Price'] > 0)]['Price'].head(78)\ntools = apps4[(apps4['Category'] == 'TOOLS') & (apps4['Price'] > 0)]['Price'].head(78)","9cc5a886":"family = family.reset_index()\nfamily.columns = ['index','Price']\nfamily.drop('index',axis=1,inplace=True)\n#family['Price'] = round(family['Price'],1)\n\ngame = game.reset_index()\ngame.columns = ['index','Price']\ngame.drop('index',axis=1,inplace=True)\n\ntools = tools.reset_index()\ntools.columns = ['index','Price']\ntools.drop('index',axis=1,inplace=True)\n\nprice = pd.concat([family,game,tools],axis=1)\nprice.columns=['Family_price','Game_price','Tool_price']\nprice.head()","9610510f":"# Comparing variance, Standard deviation and cofficient of variation of 3 Category Price\n\nv1_Family = price['Family_price'].var()\n\nprint(\"Variance of Family Category: \" + str(round(v1_Family,2)))\n\nv2_Game = price['Game_price'].var()\n\nprint(\"Variance of Game Category: \" + str(round(v2_Game,2)))\n\nv3_Tool = price['Tool_price'].var()\n\nprint(\"Variance of Tool Category: \" + str(round(v3_Tool,2)))\n\n\n\n#-> Since var is has a square unit we cant compare so we calculate sd\n\nsd1_Family = price['Family_price'].std()\n\nprint(\"Standard Deviation of Family Category: \" + str(round(sd1_Family,2)))\n\nsd2_Game = price['Game_price'].std()\n\nprint(\"Standard Deviation of Game Category: \" + str(round(sd2_Game,2)))\n\nsd3_Tool = price['Tool_price'].std()\n\nprint(\"Standard Deviation of Tool Category: \" + str(round(sd3_Tool,2)))\n\n\n\n#-> We need to cal coff of variation of comparision b\/w the ratings\n\ncoff_family = price['Family_price'].std()\/price['Family_price'].mean()\nprint(\"Coff of variance of Family Category: \" + str(round(coff_family,2)))\n\ncoff_game = price['Game_price'].std()\/price['Game_price'].mean()\nprint(\"Coff of variance of Game Category: \" + str(round(coff_game,2)))\n\ncoff_tool = price['Tool_price'].std()\/price['Tool_price'].mean()\nprint(\"Coff of variance of Tool Category: \" + str(round(coff_tool,2)))","9001fa7b":"# Statistical Analysis\n\n# Taking sample\n\nsample_data =  apps4.sample(700)\nsample_data.shape","7f640c97":"# Confidence Interval = (Sample Mean + Margin of Error , Sample Mean - Margin of Error)\n\n# Margin of Error = (critical value) * (SD)\/(sqrt(Sample Size))    (Standard_Error = (SD)\/(sqrt(Sample Size))\n  \n\n#Step1) Calculating mean, sd and SE\nm1 = sample_data['Rating'].mean()\n\nsd1 =sample_data['Rating'].std()\n\nsample_size = len(sample_data)\n\nSE =  sd1\/np.sqrt(sample_size)\n\nprint(\"Mean is: \"+ str(round(m1,2)) + \" Standard Deviation is: \" + str(round(sd1,2)) + \" Standard Error is: \" + str(round(SE,2)))","8f9c6ffa":"#Step2) Finding T statistic \n# Degree of Freedom = n-1 = 700-1 = 699 and for 95% confidence i.e alpha is 5% so alpha\/2 is .25\n\nimport scipy.stats as stats\n\nt_statistic = stats.t.ppf(q=.95,df=699)\nt_statistic","a92eae57":"#Step3) using the formula to find confidence interval \n\n#### [mean(ages2) - 1.65*SE , mean(ages2) + 1.65*SE]\n\nCI_lowerLimit = m1 - t_statistic * SE\nCI_upperLimit = m1 + t_statistic * SE\n\nprint(\"We are 95% confident that the average Rating of Apps is between: \" + \"(\" + str(round(CI_lowerLimit,2)) + \" , \" + str(round(CI_upperLimit,2)) + \")\")","0304dea1":"# Confidence Interval = (Sample Mean + Margin of Error , Sample Mean - Margin of Error)\n\n# Margin of Error = (critical value) * (SD)\/(sqrt(Sample Size))    (Standard_Error = (SD)\/(sqrt(Sample Size))\n  \nsample_data2 =  apps4[apps4['Category']=='FAMILY'].sample(700)\nsample_data2.shape\n\n#Step1) Calculating mean, sd and SE\nm1 = sample_data2['Reviews'].mean()\n\nsd1 =sample_data2['Reviews'].std()\n\nsample_size = len(sample_data2)\n\nSE =  sd1\/np.sqrt(sample_size)\n\nprint(\"Mean is: \"+ str(round(m1,2)) + \" Standard Deviation is: \" + str(round(sd1,2)) + \" Standard Error is: \" + str(round(SE,2)))","bf6c54b0":"#Step2) Finding T statistic \n# Degree of Freedom = n-1 = 700-1 = 699 and for 95% confidence i.e alpha is 5% so alpha\/2 is .25\n\nimport scipy.stats as stats\n\nt_statistic = stats.t.ppf(q=.95,df=699)\nt_statistic","acbd3c3e":"#Step3) using the formula to find confidence interval \n\n#### [mean(ages2) - 1.65*SE , mean(ages2) + 1.65*SE]\n\nCI_lowerLimit = m1 - t_statistic * SE\nCI_upperLimit = m1 + t_statistic * SE\n\nprint(\"We are 95% confident that the average Reviews of Apps is between: \" + \"(\" + str(round(CI_lowerLimit,2)) + \" , \" + str(round(CI_upperLimit,2)) + \")\")","2a1099b6":"family_paid = apps[(apps['Category'] == 'FAMILY') & (apps['Price'] > 0)]['Installs']\n\nfamily_free = apps[(apps['Category'] == 'FAMILY') & (apps['Price'] == 0)]['Installs'].head(191)","3143f0fd":"family_paid = family_paid.reset_index()\nfamily_paid.columns = ['index','Installs']\nfamily_paid.drop('index',axis=1,inplace=True)\n\nfamily_free = family_free.reset_index()\nfamily_free.columns = ['index','Installs']\nfamily_free.drop('index',axis=1,inplace=True)\n\ninstalls = pd.concat([family_paid,family_free],axis=1)\ninstalls.columns=['Paid_Apps_Installs','Free_Apps_Installs']\ninstalls.head()","f2beb85f":"installs['Paid_Apps_Installs'] = pd.to_numeric(installs['Paid_Apps_Installs'])\ninstalls['Free_Apps_Installs'] = pd.to_numeric(installs['Free_Apps_Installs'])","ceb1314b":"# Step1)Cal mean and sd\n\nm1_free = installs['Free_Apps_Installs'].mean()\nm2_paid = installs['Paid_Apps_Installs'].mean()\n\nsd1_free = installs['Free_Apps_Installs'].std()\nsd2_paid = installs['Paid_Apps_Installs'].std()\n\nprint(\"Mean of Free Apps: \" + str(round(m1_free,2)) + \" Standard deviation of Free Apps:\" + str(round(sd1_free)))\nprint(\"Mean of Paid Apps: \" + str(round(m2_paid,2)) + \" Standard deviation of Paid Apps:\" + str(round(sd2_paid)))\n\nprint(\"Total number of Installation: \" + str(len(installs)))","c95170ed":"#Step2) Calculate unbiased estimator i.e pooled sample variance\npooled_variance = 190*20586486*20586486  + 190*1029624*1029624 \/380\npolled_variance = 21243176570478\npolled_sd = np.sqrt(21243176570478)\npolled_sd","30a139dd":"# Step3) Calculating Student's T statistic\n\n#Degree of freedom is 191 + 191 -2 =380 and confidence level is 95%\nimport scipy.stats as stats\n\nt_stat = stats.t.ppf(q=.95,df=380)\nt_stat\n\n#appling formula\nlower_bound = (9539900.52 - 163726.77) - t_stat*np.sqrt(212431765704786\/24 + 212431765704786\/24)\nupper_bound = (9539900.52 - 163726.77) + t_stat*np.sqrt(212431765704786\/24 + 212431765704786\/24)\n\nprint(\"We are 95% confident that Free Apps Installs for Family Category is greater than Paid Apps by margin of :\")\nprint(\"(\" + str(round(lower_bound,2)) + \" , \" + str(round(upper_bound,2))+ \")\")","58379f8e":"#Test at 5% significance. Calculate the p-value of the test\n\n#Taking sample of 200 ages\ntools_size = apps3[apps3['Category']=='TOOLS']['Size'].sample(200)\n\n# Step1) Writing null and alternative hypothesis \n\n# H0:mean of tools App Size is > 9000000\n# H1:mean of tools App Size is < 9000000\n\n# Its a one-sided tail test\n\n# Step2) Cal the mean,sd and SE\nm1_size = tools_size.mean()\n\nsd1_size = tools_size.std()\n\nSE = sd1_size\/np.sqrt(200) # SE-> Standard Error\n\nprint(\"Mean of tools: \" + str(round(m1_size,2)) + \" Std of tools: \" + str(round(sd1_size,2)) + \" SE is:\" + str(round(SE,2)))","90f985db":"# Step3) Finding T Score\n\n# T=  x - hyphosis_mean(x) \/ SE\n\nT_score , p_value = stats.ttest_1samp(a=tools_size,popmean=9196363.03)\n\n# Step4) Finding Critical T value and comapring\n# as degree of freedom is 200 -1 = 199 and we are caluclation at alpha=0.05 (95%)\n\nt_critical = stats.t.ppf(q=.95,df=199)\nprint(\"Critical t value: \" + str(round(t_critical,3)) + \", T score is: \" + str(T_score))","1679bd3c":"# Step4) Finding P value\n\nT_score , p_value = stats.ttest_1samp(a=tools_size,popmean=9196363.03)\n\nprint(\"P value: \" + str(round(p_value,2)))","13a5919d":"#Test at 5% significance. Calculate the p-value of the test\n\n#Taking sample of 350 ages\ngame_ratings = apps3[apps3['Category']=='GAME']['Rating'].sample(350)\n\n# Step1) Writing null and alternative hypothesis \n\n# H0:mean of game Category rating < 4\n# H1:mean of game Category rating > 4\n\n# Its a one-sided tail test\n\n# Step2) Cal the mean,sd and SE\nm1_rating = game_ratings.mean()\n\nsd1_rating = game_ratings.std()\n\nSE_rating = sd1_rating\/np.sqrt(350) # SE-> Standard Error\n\nprint(\"Mean of Ratings: \" + str(round(m1_rating,2)) + \" Std of Ratings: \" + str(round(sd1_rating,2)) + \" SE is:\" + str(round(SE_rating,2)))","940d3744":"# Step3) Finding T Score\n\n# T=  x - hyphosis_mean(x) \/ SE\npopulation_mean = apps3[apps3['Category']=='GAME']['Rating'].mean()\n\nT_score = (population_mean - 4)\/ SE_rating\nT_score = 5.71\n\n# Step4) Finding Critical T value and comapring\n# as degree of freedom is 350 -1 = 349 and we are caluclation at alpha=0.05 (95%)\n\nt_critical = stats.t.ppf(q=.95,df=349)\nprint(\"Critical t value: \" + str(round(t_critical,3)) + \", T score is: \" + str(T_score))","1d84f21a":"# Step4) Finding P value\n\n#As per the P value calculator wrt T Score ,DF ,Significance Level ,One-tailed\np_value = 0.00001\n\nprint(\"P value: \" + str(p_value))","b5c56149":"tools_paid = apps4[(apps4['Category'] == 'TOOLS') & (apps4['Type'] == 'Paid')]['Installs']\n\ngame_paid = apps4[(apps4['Category'] == 'GAME') & (apps4['Type'] == 'Paid')]['Installs'].head(78)\n\ntools_paid = tools_paid.reset_index()\ntools_paid.columns = ['index','Installs']\ntools_paid.drop('index',axis=1,inplace=True)\n\ngame_paid = game_paid.reset_index()\ngame_paid.columns = ['index','Installs']\ngame_paid.drop('index',axis=1,inplace=True)\n\ninstalls_all = pd.concat([tools_paid,game_paid],axis=1)\ninstalls_all.columns=['Tools_Paid_Apps_Installs','Game_Paid_Apps_Installs']\ninstalls_all.head(10)","34ebdb88":"# Step1) Writing null and alternative hypothesis \n\n# H0: mean(tools) = mean(games)  i.e mean(tools) - mean(games) = 0\n# H1: mean(tools) != mean(games) i.e mean(tools) - mean(games) != 0\n\n# Step2) Cal mean and sd\n\nm1_tools = installs_all['Tools_Paid_Apps_Installs'].mean()\nm2_games = installs_all['Game_Paid_Apps_Installs'].mean()\n\nsd1_tools = installs_all['Tools_Paid_Apps_Installs'].std()\nsd2_games = installs_all['Game_Paid_Apps_Installs'].std()\n\nprint(\"Mean of Tools Category: \" + str(round(m1_tools,2)) + \" Standard deviation of Tools Category:\" + str(round(sd1_tools)))\nprint(\"Mean of Games Category: \" + str(round(m2_games,2)) + \" Standard deviation of Games Category:\" + str(round(sd2_games)))\n\nprint(\"Total number of Installation: \" + str(len(installs_all)))\n\nSE1 = sd1_tools\/np.sqrt(156)\nSE2 = sd2_games\/np.sqrt(156)\n\nSE = SE1+SE2 # SE-> Standard Error\nprint(\"Standard Error is: \"+ str(round(SE,2)))","97d38c25":"#Step3) Calculate unbiased estimator i.e pooled sample variance\n\n#degree_freedom<- 78+78-2 \ndegree_freedom= 154\n\n# using formula of Pooled variance -> (n1-1)*sd1^2 + (n2-1)*sd2^2 \/(n1+n2-2) \npooled_variance = 77*114450*114450 + 77*1152922*1152922 \/156  \npolled_variance = 671163970292.0\npolled_sd = np.sqrt(671163970292.0)\npolled_sd","5cd0a65d":"# Step4) Finding T Score\n#t_score <- diff of sample mean - diff of hyphothsis mean \/ SE\n\n#t_score <- (m2 - m1) - 0 \/SE\nT_score = (m2_games - m1_tools) - 0 \/SE\nT_score = 2.307\n\n# Step5) Finding Critical T value and comapring\n\n#Degree of freedom is 78 + 78 -2 = 156 and confidence level is 95%\n\nt_critical = stats.t.ppf(q=.95,df=156)\nprint(\"Critical t value: \" + str(round(t_critical,3)) + \", T score is: \" + str(T_score))","1bac1abc":"# Step6) Finding P value\n\n#As per the P value calculator wrt T Score ,DF ,Significance Level ,One-tailed\np_value = .02237\n\nprint(\"P value: \" + str(p_value))","9ab17170":"personization_price = apps4[(apps4['Category'] == 'PERSONALIZATION') & (apps4['Price']>0) & (apps4['Content Rating']=='Everyone')]['Price']\nmedical_price = apps4[(apps4['Category'] == 'MEDICAL') & (apps4['Price']>0) & (apps4['Content Rating']=='Everyone')]['Price'].head(83)\n\npersonization_price = personization_price.reset_index()\npersonization_price.columns = ['index','price']\npersonization_price.drop('index',axis=1,inplace=True)\n\nmedical_price = medical_price.reset_index()\nmedical_price.columns = ['index','price']\nmedical_price.drop('index',axis=1,inplace=True)\n\nprice_all = pd.concat([personization_price,medical_price],axis=1)\nprice_all.columns=['Personaization_Apps_Price','Medical_Apps_Price']\nprice_all.tail(5)","b1e22422":"# Step1) Writing Null and Alternative Hyphothesis \n\n# H0: mean(personalization) = mean(medical)  i.e mean(personalization) - mean(medical) = 0\n# H1: mean(personalization) != mean(medical) i.e mean(personalization) - mean(medical) != 0\n\n# Step2) Cal mean and sd\n\nm1_personalization = price_all['Personaization_Apps_Price'].mean()\nm2_medical = price_all['Medical_Apps_Price'].mean()\n\nsd1_personalization = price_all['Personaization_Apps_Price'].std()\nsd2_medical = price_all['Medical_Apps_Price'].std()\n\nprint(\"Mean of personalization Category: \" + str(round(m1_personalization,2)) + \" Standard deviation of personalization Category:\" + str(round(sd1_personalization,2)))\nprint(\"Mean of medical Category: \" + str(round(m2_medical,2)) + \" Standard deviation of medical Category:\" + str(round(sd2_medical,2)))\n\nprint(\"Total number of Installation: \" + str(len(price_all)))\n\nSE1 = sd1_personalization\/np.sqrt(166)\nSE2 = sd2_medical\/np.sqrt(166)\n\nSE = SE1+SE2 # SE-> Standard Error\nprint(\"Standard Error is: \"+ str(round(SE,2)))","a096d73a":"# Step3) Cal Pooled Sample variance\n\n#degree_freedom = 83+83-2 \ndegree_freedom = 164\n\n# using formula of Pooled variance -> (n1-1)*sd1^2 + (n2-1)*sd2^2 \/(n1+n2-2)\npooled_variance = 82*sd1_personalization*sd1_personalization + 82*sd2_medical*sd2_medical \/164\npolled_variance = 125.99\npolled_sd = np.sqrt(125.99)\npolled_sd","659c2a0b":"# Step4) Finding T score\n\n# T_score <- (m2 - m1) - 0 \/SE\nT_score = (m2_medical - m1_personalization) - 0 \nT_score = T_score\/SE\n\n# Step5) Finding Critical t value and comapring\n\n#Degree of freedom is 83 + 83 -2 = 166 and confidence level is 95%\n\nt_critical = stats.t.ppf(q=.95,df=166)\nprint(\"Critical t value: \" + str(round(t_critical,3)) + \", T score is: \" + str(T_score))","e9400060":"# Step 6) Calculate P value\n\n#As per the P value calculator wrt T Score ,DF ,Significance Level ,One-tailed\np_value = .000001\n\n# calculating using T statistic\nt_critical,p_value2 = stats.ttest_ind(a=price_all['Personaization_Apps_Price'],b=price_all['Medical_Apps_Price'],equal_var=False)\n\nprint(\"P value: \" + str(p_value))","cfd712ec":"#### We can see the variable mean is smaller than median that means Skweness is towords Left(-ve skewness).","65b7c851":"### Conclusion:\n\n#### **Testing at 5% significat level**\n\n### *The p-value is 0.75* \n\n1.  0.75 > 0.05 i.e P > alpha so as per decision rule we accept the null hyphothsis\n \n1.  So at 5% significance level we can't say that the average app size of Tools is less than 9000000\n\n### **The result is Not Significant**\n\n\n#### **If we test at 1% significat level**\n\n1.  0.75 > 0.01 i.e P > alpha therefore, we cannot reject the null hypothesis.\n\n1.  So at 1% significance level we can't say that the average app size of Tools is less than 9000000.\n\n### **The result is Not Significant**","18f7961a":"### Conclusion:\n\n#### **We can see Family, Game and Tools are the Categories with most number of the Apps.**","d7e81854":"### Conclusion:\n\n1. Tools, Medical and Health-Fitness are the Categories which are supporting latest Android Version.\n \n1. Most of the Categories apps are supporting android version between 6-8 android version.\n\n1. Categories like Weather, Dating, Beauty, Shopping ect are still support upto android version 5.  That is why they have less number of users using these apps compared to other Categories.","52bafdf2":"### Conclusion:\n\n1. We can see the coff of variation is 0.13\n \n1. It is pretty low so we can say there is very high variation of price for some of the paid apps wrt to Category.\n \n1. The lower the coefficient of variation, the less the level of dispersion around the mean, as you can see from the plot.","36e4212b":"### Q1) Find if the average Size of Apps in Tools is greater than 9000000 or not.\n","b3369c58":"### Q)Top 10 Category which got highest Ratings","0f2992fb":"### Conclusion:\n\n#### We are 95% confident that the average Rating of Apps is between: (4.15 , 4.21)","6df1a51c":"### Q) Top 10 Categories (total number of apps in each Category )","10e524ae":"### Q)Category wise updation wrt to Months.","12ddb0b3":"### Conclusion:\n\n1. Almost all app categories perform decently. \n\n1. Health and Fitness and Books and Reference produce the highest quality apps with 50% apps having a rating greater than 4.5. This is extremely high!\n \n1. On the contrary, 50% of apps in the Dating category have a rating lesser than the average rating.\n\n1. A few junk apps also exist in the Lifestyle, Family and Finance category.","42d1adaf":"### Q) Total price wrt Category","41782939":"### Q)Top 5 install apps in each category","ce5f26d6":"### Q)Feature Construction\n\n#### Total amount spent by category (installs * price)","4f20610e":"### Q)Current Versions of each app Category supports","964a9012":"### Q)Top 5 suggested Social category applications that have the highest installs which are less than 50MB.","4f325f3b":"### Q) Distribution of App rating","b8be33a7":"### Q)Category wise total times updation in each year.","f61b63f1":"### ***We can see top 10 Categories have been comverted to Numeric and the data has also become nice for creating Machine Learning Models***.","a9f24d71":"### Q) Compare Average Ratings Vs Average minimum Supported Android version.","03a9af42":"#### We need to do some data cleaning and fix some bad data\n\n#### 1) Category can't be in number \n#### 2) All the reviews are in number except the above one.\n#### 3) Price should be in number not \"Everyone\".\n#### 4) Type is categorical type but we see a false value.\n#### 5) Installs should be a numeric. It should not be free.","802de332":"### Conclusion:\n\n* #### We can see most of Installation are for range 100000 - 1000000","36076735":"### Conclusion\n\n### *The p-value is .02237*\n\n#### -> **If we test at 5% significat level**\n\n1. .02 < 0.05 i.e P < alpha so as per decision rule we reject the null hyphothsis\n \n1. So at 5% significance level  we can say that average installs for Category Tools and Games wrt Type are NOT SAME\n\n### **The result is Significant**\n\n#### -> *If we test at 1% significat level*\n\n1. .02 > 0.010 i.e P > alpha i.e P > alpha so as per decision rule we accept the null hyphothsis\n\n1. We see if we take at 1% significant level, We have to accept Null Hyphothsis i.e average installations are same.\n\n### **The result won't be Significant**\n\n#### So upto .02237 the result is significant after that result is not significant \n\n### *Its upto statistician which value he want to take*.*","f6192dcc":"### Conclusion:\n\n1. In Paid Version we can see apps are moslty running on Android Version 4 which is Jelly Bean (pretty old)\n \n1. In Free Version we can see apps are moslty running on Android Version  4 followed by some better version i.e 5.\n \n1. Very Few People who are using latest versions like Android 7 or 8.\n \n1. There are People around 660 using Android Version 5 with Type Free.","847a430a":"### Q3) Calculating Confidence Interval of average Installs of Apps for Category Family wrt Price","19823556":"### Conclusion:\n\n#### We can see there is no Correlation between Rating and Reviews","4ee9b161":"### Spliting the Genres into 2 categories","edfe3b3b":"### Conclusion:\n\n#### Average rating of All PriceBand is pretty around 4.2 except highly Expensive.\n\n### Avera","f5f2ef19":"### Conclusion:\n\n* We can see that as the time period for not updating the apps rises their ratings gets down as well.","39c8e0d3":"### Conclusion:\n\n#### These are the Apps Which didn't got any Ratings till now , may be due to very new to Play Store. ","2dad7f7c":"### Conclusion:\n\n#### We are 95% confident that the average Reviews of Apps is between: (51923.65 , 276749.08)","5d4bbb5a":"### Conclusion:\n\n1. #### We can see that Family,Tools are at top for supporting the current Android version followerd by Weather,Business.\n\n1. #### Apps like Entertainment, Finance, books,Health,video-players and Photography have very old versions still.","51427b4f":"### Conclusion:\n\n1. Most top rated apps are optimally sized between 2MB to 40MB - neither too light nor too heavy.\n\n1. Majority of the paid apps that are highly rated have small sizes. This means that most paid apps are designed and developed to cater to specific functionalities and hence are not bulky.\n\n1. Users prefer to pay for apps that are light-weighted. A paid app that is bulky may not perform well in the market.","df83703a":"### Q) Total number of Apps in each Category.","19582028":"### Q)Content Rating Distribution","446f9f6d":"### Conclusion:\n\n1. Most of the Android Version running Type Free belongs to version 3.0 - 6.0. Very Few Lastest Version Users.\n\n1. Similar scenerio wrt to Type Paid.","538c4fc2":"### Q)Average Rating per Category","53290db5":"### Q)How many Free and Paid apps are there in each App category","5342994a":"### Q)Medical apps are costly see it wrt Category type.","a93466be":"### Conclusion:\n\n#### Apps like Truth and Dare, Private Dating, Dating white girls and more have no reviews and have been Rated badly also even it is Paid or Free.","f7f42e57":"### Q) Top 10 apps which got highest reviews in percentage","c329392c":"### Conclusion:\n\n#### Maimi Crime , Clash of Clans , Clash Royale are the most Bulky Apps","e51d97f9":"### Q) Top 10 Category to genrate highest Revenue.","8194d3ed":"### **We can Perform One Hot Encoding with many labels in it on Column Category**.\u00b6\n\n#### *The technique I will use is one hot encoding to the 10 most frequent labels of the variable. This means that they would make one binary variable for each of the 10 most frequent labels only.*\n\n##### (Solution givin by Winners of the KDD Cup Orange Challenge 2009)","b15e45af":"#### Content Rating Column","1f957069":"### Q2) See if Installs in Category TOOLS and GAME wrt TYPE paid are same or not.","902db6f1":" ### Conclusion:\n \n #### *We can see most of the ratings are between 4.2 - 4.6*\n\n #### *We can see that many of the ratings are between 1-3 ,i.e variance is pretty high*","5774c400":"### Conclusion:\n\n#### We can see that as the Price Increases , The reviews had started falling down may be due to users are not that much satisfied with the paid apps wrt what they had expectations.","a89cba1c":"### Q)Rating Analysis for Each Category","ad12b1b6":"### Q)Distribution of People using different Android Versions wrt Type of App installed","7f3dbce7":"#### 5.44 > 1.654 i.e  T> t\n\n1. #### As per decision rule if absoulte value of T score > critical t, we reject Null Hyphothesis\n \n1. #### We accept the Alternate Hyphothesis test'\n\n#### **The Result is Significant**\n\n#### So, at 95% level of significance we can say that price for Category PERSONALIZATION and MEDICAL wrt price > 0  and Content Rating \"Everyone\" are not same.","41eb9aa8":"### Q) Content Type wrt Month","ca690273":"### Q) Top 5 Apps which got highest ratings.","4299dea9":"### Q)Top 10 apps having maximum prices","1dee2b2a":"### Q)Does every popular app (Installs 100M+) receives a review from each download ?","e4b2b5ab":"###  1) Calculating Confidence Interval of average Rating of Apps","8e8e852d":"### Conclusion:\n\n#### Most of the people are still using Android Version 5 and 7 which we have seen sometime ago followed by 6 and 8.","aaaa1e26":"### Q)How do App prices impact App Rating?","38bef386":"#### We can see there are some Structural Errors like\n#### 1) Everyone 10+ is same as Everyone\n#### 2) Adults only 18+ is same as Mature 17+\n\n#### Need to fix these errors","171e2fce":"### Conclusion:\n\n#### We can see Most of Top ratings belong to Family Category even if they have are heavy size App\n\n#### Games also have a similar trend. ","913c7838":"# ***Inferential Statistics***  #","ee82b195":"* #### *There are apps in Categories Like finance,Lifestyle,family which are costly*\n\n* #### *Removing these and seeing the plot again.*","fc8d31d9":"### Conclusion:\n\n1. Almost all category apps have started their updation quite frequently from 2018.\n \n1. Categories like Family , Game, Tools have started their updations frequently from 2015-2016 , though they have much larger number of Apps.","36c34dcc":"### Conclusion:\n\n#### We can observe that the 2 variables are highly correlated i.e As Installation Increase Reviews also increase.","c5052edd":"### Conclusion:\n\n1. Most the Apps can are made for Everyone.\n \n1. Teen Apps are also pretty high that would include mostly Education Apps.\n \n1. Mature Apps are reasonable that would include like Dating Apps ","b1f4ae1d":"### Q)Content rating comparision wrt Category of Top 10 category having highest revenue generated.","e0892f26":"### ***These Dummy Variable Creating are important for Machine Learning Algorithm to get better Accuracy***","d933c3bc":"### Q) App having high number of installs, will it also have more user reviews?","05ae40d2":"* The File has complete indepth Exploratory Data Analysis Analysis and Statistical Analysis  based on data between 2010 - 2018.\n \n* The Dataset initially contains 10841 rows and 13 column.\n \n* The dataset is split into various subset for multiple uses.\n\n* The First Part of Analysis has Data Cleaning, Feature Engineering Part.\n\n* Feature Engineering is divided into\n\n1. Feature Scaling\n\n1. Feature Transformation\n\n1. Feature Addition\/Constructions\n\n* The Second Part Contains Exploratory Data Analysis.\n\n* The Third Part Contains Descriptive Statistics.\n\n* The Forth Part Contains Inferential Statistics.","3e2b7b7a":"### Conclusion:\n\n### *The p-value is .000001*\n\n#### -> **If we test at 5% significat level**\n\n1. .000001 < 0.05 i.e P < alpha so as per decision rule we reject the null hyphothsis\n\n1.  So at 5% significance level  we can say that price for Categories wrt Content Rating (Everyone) are not same.\n\n### **The result is Significant**\n\n#### -> **If we test at 1% significat level**\n\n1. .000001 > 0.010 i.e P < alpha so as per decision rule we reject the null hyphothsis\n\n1. So at 1% significance level  we can say that price for Categories wrt Content Rating (Everyone) are not same.\n\n### **The result is Significant**","72fa5c78":"### Q)How do the sizes of paid apps and free apps vary?","ee7176e1":"## Q)***How many apps having rating more than 4***","160d7b2d":"### Q)Find if the average Ratings of Apps in Game Category is less than 4 or not.","9fca4511":"### Conclusion:\n\n1. Tools, Libraries , Games, Parenting, Family, Shopping , Medical , Education are the Having the Bulky apps\n \n1. Food,Beauty, Travels, Weather, Entertainment, Dating, Arts, Comics are having light weighted apps","2738c992":"### Q)Printing 10 Apps with 100 million installs and Rating >= 4.5 and Year = 2018 in Entertainment4","cb01de48":"### Conclusion:\n\n#### We are 95% confident that Free Apps Installs for Family Category is greater than Paid Apps by margin of : (2438619.09 , 16313728.41)","f4db17e1":"### Q)Top 5 popular app less than 50MB and having most installed and have highest Reviews","8d528a71":"### Conclusion:\n\n#### We can see that all 3 have coff of variation  almost >1. So we can conclude their price variablity is highly distributed around the mean specially Family Category.","031bdf79":"### Conclusion:\n\n#### We can see Family, Tools, Game, Busimess have got the highest Content Ratings in Everyone.","433a5688":"### Conclusion:\n\n1. Most of apps are are made for Everyone.\n1. Most of Mature Apps are rated pretty bad and have less size\n1. Teen apps Ratings are pretty good and most of apps got 4 and above , and most of apps are less in size","0e6fea97":"### Q)Top 5 highest size apps","aa3c8b9e":"### Feature Creation\n\n* Creating a new column of Month and Year","9f1f4b6c":"### Conclusion:\n\n* #### Most of Genres are Tools, Entertainment and Education.","91fe1c19":"### Q)Least 5 app with lowerst reviews","3a4108f6":"#### We can seee the top 5 apps installed from each category","c7f7c17c":"*  *Here we will compare Apps2 (Installs and Reviews) which has reduced Skewenss near to Normal Distribution*.\n*  *and Apps (Installs and Reviews) which have original values*.","2013ba04":"### Q)Most Bulky Apps in Each Category.","7000e4d1":"### Q) Apps starting with alphabet 'G'","0f020744":"### Conclusion:\n\n#### Facebook has got highest Reviews as it is the most Famous followed by WhatsApp, Instagram and Messenger","09614b30":"### Q)How do the sizes of apps and Content Ratings differ","a74ee81b":"### Q)Top 10 most installed Apps","d55fe476":"\n\n\n\n### Q2) Calculating Confidence Interval of average Rating of Family Category Apps","d95cb1ef":"### Q)App wise total number count of each Ratings","b3d7c69c":"### Conclusion:\n\n1. Mediacal and Family are costly apps\n1. All other apps are priced under 30.\n1. Surprisingly, all game apps are reasonably priced below 20.\n1. Medical apps are costly see it wrt Category type","961acb01":"#### 5.71 > 1.649 i.e  T > t\n\n1. As per decision rule if absoulte value of T score > critical t, we reject Null Hyphothesis\n \n1. We accept the Alternate Hyphothesis test\n \n1. So, at 95% level of significance we can say that average Ratings of Apps in Game Category is greater than 4.","922adb06":"### Conclusion:\n\n### *The p-value is .00001*\n\n\n#### -> **Testing at 5% significat level**\n \n1. .00001 < 0.05 i.e P < alpha so as per decision rule we reject the null hyphothsis\n \n1. So at 5% significance level we can say that average Ratings of Apps in Game Category is greater than 4.\n\n### **The result is Significant**\n\n#### -> **If we test at 1% significat level**\n\n1. .00001 < 0.01 i.e P < alpha therefore, we reject the null hypothesis.\n\n1. So at 1% significance level we can say that average Ratings of Apps in Game Category is greater than 4.\n\n### **The result is Significant**","d6c92d83":"### Conclusion:\n\n#### From the Trend we can see predict that if the Apps Are updated frequently their ratings will also increase simulataniously.","03604710":"### Conclusion:\n\n1. Majority of the paid apps that are highly rated have small sizes. This means that most paid apps are designed and developed to cater to specific functionalities and hence are not bulky.\n\n1. Users prefer to pay for apps that are light-weighted. \n \n1. A paid app that is bulky may not perform well in the market.\n \n1. Most of Apps That are bulky that got better ratings wrt small size apps doesn't matter they are Free or Paid.","09d9cccb":"# ***Descriptive Statistics*** #","dfc60ba7":"### Conclusion:\n\n### * **We can see after Performing Feature Trasformation we have increase the Corrrelation from .63 to .94 which is very good.**","8fe75580":"### Q)Content Type wrt Total Installation and Type","0395101f":"### Conclusion:\n\n#### Clash of Clans is the most Reviewed app followed by Subway Surfers. of Game Categories. Thus they also got top Ratings.","33d8e14d":"### Q)Create a lambda function that capitalize strings.","3244b7b9":"### Q)Name of the app which has got the Max Reviews.","fdd38189":"### Conclusion:\n\n1. I am Rich - Trump Edition is mostly expesive of Lifestyle Category \n\n1. I am Rich Premium, Eu Sou Rico are the next most expensive of Finance Category","880919ad":"### Q)Different Content ratings","ebaffa06":"### Conclusion:\n\n1. Family Category is having the Highest number of Free and paid apps, followed by Game\n \n1. In Free Category by Tools, Business , Productivity.\n \n1. In Paid Category Medical and Games Apps are pretty costly followed by Tools.","873e40a8":"#### 0.32 < 1.653 i.e  T< t\n\n1. As per decision rule if absoulte value of T score < critical t, we can't reject the Null Hyphothesis\n \n1. So,We accept the null Hyphothesis test\n \n1. So, at 95% level of significance we can 't say if the average app size of Tools is less than 9000000","6cb001e5":"### Q) Conclusion:\n\n1. Hangouts, Messanger, Maps,Instagram,Gmail ect are the apps which are the top installed Apps.\n \n1. We can say apps that are made by Google and Facebook are top installed apps as they are Top IT companies.","072e8626":"### Q)Price Range Vs Content Type","0d582ce0":"### Feature Adding\n\n#### Categorising Price","213e48ee":"### Conclusion:\n\n#### * We can see the skewness is pretty high. The distrubution is not normal.\n#### * Example Reviews is 17.47 is std away from the normal i.e 0.\n\n### ** It is important to fix these issues so that it gives better correlation and better results for the Machine learning Models.\n\n### ** Need to Perform Feature Transformation and normalize the data.","a7cac4fd":"### Conclusion:\n\n#### We can see Subway Surfers, Shadow Fight 2 had got top reviews. ","3c69985a":"### Conclusion:\n\n1. #### Though Lifestyle App was the most Costly one still,\n\n1. #### Finance Category apps are mostly the Costly ones and Family has almost the same trend as well. \n\n1. #### Followed bt Lifestyle and Medical Apps.","d7663330":"### Q) Apps ending with Alphabet 'E'","1f7871b6":"### Q)Rating Distibution ","f8b0a517":"### Q) Installations Counts of Apps","89fd6cf0":"### Conclusion:\n\n*  1) Strong +ve Correlation between  Reviews and Installs.\n \n*  2) Low -ve Correlation between Install and Price. i.e If Price Increase Installations decrease.\n \n*  3) Low +ve Correlation between Ratings and Reviews.\n \n*  4) Low -ve Correlation between Reviews and price.","4ae01013":"### Conclusion:\n\n1. We can see Most of paid apps cost in optimal range i.e below 75.\n\n1. Very few apps are costly that range more than 375$","c136efac":"### Conclusion:\n\n1. #### Family, Game and Tools are categories with highest number of Android Versions running.\n \n1. #### This shows apps in these categories are more stable and compatible and work best with any of the android version.","a9737ecb":"### Conclusion:\n\n1. #### Most bulky apps belong to the Game and Family category. Despite this, these bulky apps are fairly highly Reviewed indicating that they are bulky for a purpose.\n \n1. #### Most of Tools Based apps are between Less to moderate in Size. \n \n1. #### Dating Apps are Rated Low compared to Others.","cb2604bb":"### Q)How do Sizes impact the app rating?","56dcc5d2":"### Conclusion:\n\n1. #### Most to Categories Apps have updated their apps in July specially Family and Games \n\n1. #### Next Frequent months are June , May and August.\n \n1. #### We can say updation period is from May to  August of Most of the Apps.\n \n1. #### Family Category Apps are updated almost Every month.","c633a38d":"#### Here is the Tree Map to see different Cateogries and and number of Apps it contains","cab83f34":"### Q3) See if Price in Category PERSONALIZATION and MEDICAL wrt price >0 and Content Rating Everyone are same or not.","1e170a6d":"### Conclusion:\n\n1. Events, Art-Design, Education and Parenting have got highest Average Ratings.\n \n1. We did not find Family , Tools and Games in Top 10 though having many Apps in them because as the number of Apps increases in Category there Ratings might decrease a bit. But they have average ratings of Above 4.1.","6d89953e":"*  *We can see there are some Outliers in Ratings so, we have to fix that*\n\n*  *Using Inter Quantile Range Method to fix outliers*","1b655801":"\n### ** *Before Applying Models We need to do some feature engineering like converting categorical variables to numericals*\n\n### **Perfoming 1 hot encoding on Type and Content Rating**","f4dfc767":"### Conclusion:\n\n#### We can see Categories ratings wrt Categories. But Categories like Education, Libraries-Demo  and Weather have got almost good rating with no ratings less than 3 which is pretty good.","38f525e3":"### Feature Creation\n\n#### Creating 4 bins for dividing Price.","c4621763":"### Q)Updatings of apps","e10cf381":"### Conclusion:\n\n#### We can conclude that less size apps have grown exponentially well as their Reviews are pretty high if installation is also high.","3f44ff1b":"### Q1) Calculate covariance and correlation coefficient between ratings and Price","fbdac261":"#### Type Column","229eafb5":"### Conclusion:\n\n#### In Free type \n\n1. Content Type Everyone had started updated their apps from 2014-2015 onwards and have grown exponentially in 2017-2018\n \n1. Content Type Mature and Teen had very less updates but started well in 2018\n\n#### In Paid type\n\n1. Content Type Everyone has updated their apps from 2014-15 onwards.\n\n1. Content Type Mature and Teen has pretty less Paid type but started updating in 2018.","f8415101":"### Conclusion:\n\n1. It shows -ve corelation coeff and covariance that means the both variable move in opposite direction so we can say\n\n1. As the price gets higher the ratings get lower .i.e Paid apps are not that well compared to Free Apps.","8b6dd97a":"### Conclusion:\n\n1. We can see there is imcrease in updation of Apps but almost an exponential growth in updation of Apps in 2018 compared be other years.  \n \n1. That shows the increase in using of Apps by  people  and as the Apps become more and more popular they use to update there app more frequently.","2f181b9d":"### Conclusion:\n\n#### We can see Apps like Wifi Connect, Market Update amd ExDialer that are of small size but heavily used as they have pretty high installatio and reviews as well.","636fc9ef":"#### Here is the number of Installls wrt to Type Paid or Free and Content Rating. ","b042ed21":"### Conclusion:\n\n#### ** We can see we have reduced the skewness to lowest level which is pretty good for Machine Learning Models.","1be087d8":"### Conclusion:\n\n1. #### Family Category has the highest Content Rating Everyone type Apps, followed by Tools\n \n1. #### Game Category has the highest Content Rating Teen type and Mature 17 + Apps that shows many mature and teen play games ex PUBG or Subway Surf\n \n1. #### Other Categories are mostly made for  Everyone Type.","4dff094a":"### Q)Relation of Installs\/ Reviews","90a4cff1":"### Conclusion:\n\n1. We can see that Lifestype is highest Revenue Generator, next are Family, game and Finance.\n \n1. This is because we have seen earlier that these 3-4 categories were having many costly Apps.","155d4d5e":"#### * The Missing values can be filled with the median if the histogram of right or left skewered.\n#### * Categorical  data can be filled with Mode. (As there are very less categorical data missing)\n#### * Numerical data can be filled with Median.\n\n#### * We can also use Interpolation to fill the missing values. (Its a nice way to fill Numerical data.)","e21ebfba":"### Conclusion:\n\n1. We can see that Apps that can are made for Everyone has got maximum 4 star rating and pretty good amount of 5 star too.\n\n1. Mature 17+ and Teen apps also got maximum 4 star ratings.","7331667f":"#### For GAME category","27eaaaec":"### Conclusion:\n\n1. We can see Family Category has got max 5 star and 4 star ratings . This is all because of frequent Updatings which they started from 2015-16 onwards.\n \n1. Most of the Other apps have got maximum 4 starts ratings and very free 2 or 1 star. \n \n1. This is the reason why average Ratings is 4.1","98b4ad90":"### Conclusion:\n\n#### We can see that Review Category B has highest frequency.","0d6c184f":"### Q2)Compare Price distribution of Top 3 apps Category.","89707ef0":"### Conclusion:\n\n1. #### Most of the Type Free Apps are updated frequency between May- August.Mostly July and August.\n \n1. #### Paid apps are updated pretty less but a slight up can be seen month of July.","3cc04aca":"*  We need to Fix this Android Versions and convert it into better form*","068be7ea":"#### 2.307 > 1.655 i.e  T> t\n\n1. As per decision rule if absoulte value of T score > critical t, we reject Null Hyphothesis\n \n1. We accept the Alternate Hyphothesis test\n\n1. The Result is Significant\n\n1. -> So, at 95% level of significance we can say that average installs for Category Tools and Games wrt Type are NOT SAME","a0327954":"### Conclusion:\n\n1.  *A strong positive correlation of 0.94 exists between the number of reviews and number of downloads. This means that customers tend to download a given app more if it has been reviewed by a larger number of people.*\n \n1.  *This also means that many active users who download an app usually also leave back a review or feedback.*** \n1.  *So, getting your app reviewed by more people maybe a good idea to increase your app's capture in the market!*","ff254c2c":"## Hypothesis Testing  ##","966f98cb":"### Conclusion:\n\n#### As size increases Ratings increases . That shows heavy apps are performing pretty well.","4b8f3abe":"### Q)Number of Versions of each app Category supports"}}