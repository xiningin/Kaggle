{"cell_type":{"42a4848e":"code","4b4a1aeb":"code","63e99152":"code","d1e333e0":"code","b5a8bc99":"code","e47d64b0":"code","9f207a25":"code","1add460e":"code","02a130f6":"code","fe44decd":"code","d93fd429":"code","ca9575b6":"code","c7d99f7f":"code","90176aa5":"code","44ca02a4":"code","799cf72d":"code","3d43baf2":"code","98ccf38a":"markdown","2061f680":"markdown","bb4e9d46":"markdown","1ac96869":"markdown","44b5768e":"markdown","d769292a":"markdown","fb57f811":"markdown","7feb94c5":"markdown","2b3cb69a":"markdown","2251b65d":"markdown","17a6412b":"markdown","bf83bc23":"markdown","7ae63007":"markdown","46a1b76b":"markdown","3ba56f14":"markdown","a41dc3b2":"markdown"},"source":{"42a4848e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b4a1aeb":"df=pd.read_csv('\/kaggle\/input\/co2-emissions-1960-2018\/CO2_Emissions_1960-2018.csv')","63e99152":"df.head()","d1e333e0":"df.info","b5a8bc99":"df.shape","e47d64b0":"df.isnull().sum()","9f207a25":"df = df.fillna(df.mean())","1add460e":"df.isnull().sum()","02a130f6":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\n\n\nimport matplotlib.pyplot as plt \nimport plotly.express as px","fe44decd":"df.columns","d93fd429":"data = pd.read_csv('\/kaggle\/input\/co2-emissions-1960-2018\/CO2_Emissions_1960-2018.csv',index_col='Country Name')\ndata = data.transpose()\ndata.index = pd.to_datetime(data.index).year\ndata = data.fillna(data.mean())\ndata.dropna(axis=1 , inplace = True)\ndata.head()","ca9575b6":"line = px.line(data_frame= data, x = data.index,y =[\"World\"] , markers = True)\nline.update_traces(line_color=\"blue\")\nline.update_yaxes(title_text = 'CO2 emissions')\nline.update_xaxes(title_text = 'Year',\n    rangeslider_visible = False)\nline.update_layout(legend=dict(title=\"Country\"),\n                  showlegend = True,\n    title = {\n        'text': 'CO2 Emissions World Wide'})\n\nline.show()","c7d99f7f":"data.columns","90176aa5":"data1=data['World']\ndata1.head()","44ca02a4":"rolmean=data1.rolling(window=5).mean()\nrolstd=data1.rolling(window=5).std()\nprint(rolmean,rolstd)","799cf72d":"mean=plt.plot(rolmean,color='red',label='rolling mean')\nsd=plt.plot(rolstd,color='blue',label='rolling std')\nplt.legend(loc='best')\nplt.title('Rolling Mean and Standard deviation')\nplt.show(block=False)","3d43baf2":"from statsmodels.tsa.stattools import adfuller\nprint('result of dickey fuller test:')\ndftest=adfuller(data['World'],autolag='AIC')\ndfoutput=pd.Series(dftest[0:4],index=['test statistic','pvalue','#lags used','no. of observations used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key]=value\nprint(dfoutput)","98ccf38a":"Now we try to get an general idea about our datset","2061f680":"let us proceed with 5 year moving average method for our initial time series analysis.\nwe will determine rolling mean and rolling standard deviation in order to check for stationarity of our time series.","bb4e9d46":"**importing our dataset**","1ac96869":"**Now we will proceed to make our dataset stationary. For this process we will use differencing method. **","44b5768e":"lets check for null values present in our dataset","d769292a":"visual representation\n","fb57f811":"now we wish to impute our missing values for different years we will use mean imputation for this process.","7feb94c5":"lets now work with this following data where only world is present as a column value to do this we subset our dataframe in the following manner.","2b3cb69a":"lets now check the plots of rolling mean and rolling standard deviation","2251b65d":"here p value is >0.05 so we cant reject the null hypothesis i.e our dataset is non stationary.","17a6412b":"similar command can be used to check for other countries we just need to chnage the y values to get them","bf83bc23":"lets now assign years as our index values for our dataframe","7ae63007":"clearly from the rolling mean plot we can see that our time series is not stationary it has upwards trend from 1960 to 1980 and has a downward trend from 1980 to 1995 again rising from 2000 and onwards.","46a1b76b":"**ok so there are missing values present in our dataset**","3ba56f14":"**Augmented Dickey Fuller Test**","a41dc3b2":"**lets check if there is any more null values**"}}