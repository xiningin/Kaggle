{"cell_type":{"2b99658d":"code","d6505c61":"code","694818eb":"code","64afb23b":"code","0386bba7":"code","b8f51649":"code","3a4d217a":"code","95dae236":"code","abef6e97":"code","a36b2ed1":"code","57a22aab":"code","249744c8":"markdown"},"source":{"2b99658d":"import numpy as np\nimport matplotlib.pyplot as plt\nimport math\nimport random\nimport pandas as pd\nimport scipy.stats as stat\nfrom scipy.stats import norm\n\nimport os","d6505c61":"from scipy.stats import t\n\n\ndef calcula_numero_desvios_tstudent_para_confianca(confianca, tamanho_amostra):\n    mean = 0\n    std = 1\n    rv = t(df=(tamanho_amostra-1))\n    return rv.interval(confianca)[1]","694818eb":"from scipy.stats import norm\n\n\ndef calcula_numero_desvios_normal_para_confianca(confianca):\n    mean = 0\n    std = 1\n    rv = norm(loc=mean, scale=std)\n    return rv.interval(confianca)[1]","64afb23b":"def recupera_amostra(populacao, tamanho_amostra):\n    return populacao[np.random.randint(0, len(populacao), tamanho_amostra)]","0386bba7":"# Define popula\u00e7\u00e3o\n\nmean = 160\nstd = 20\ndistribuicao_probabilidades = norm(loc=mean, scale=std)\n\ntamanho_populacao = 100000\n\npopulacao = distribuicao_probabilidades.rvs(size=tamanho_populacao, random_state=1)\n\nprint('Tamanho popula\u00e7\u00e3o {}, m\u00e9dia {}, desvio {}'.format(len(populacao), np.mean(populacao), np.std(populacao)))\n\n","b8f51649":"fig, axs = plt.subplots(1, 1, figsize=(14,6))\n\naxs.hist(populacao, density=True, facecolor='g', alpha=0.75, bins=50)\naxs.grid(True)\naxs.set_title('Histograma de alturas da Popula\u00e7\u00e3o')\n\nplt.show()","3a4d217a":"tamanho_amostra = 100\namostra = recupera_amostra(populacao, tamanho_amostra)\nprint(amostra)","95dae236":"fig, axs = plt.subplots(1, 1, figsize=(14,6))\n\naxs.hist(amostra, density=True, facecolor='g', alpha=0.75, bins=50)\naxs.grid(True)\naxs.set_title('Histograma de alturas da amostra')\n\nplt.show()","abef6e97":"\n\n#Dada uma amostra de 100 elementos, calcule a m\u00e9dia da altura da populacao considerando confian\u00e7a de 93%\n\n#1-Calcule a m\u00e9dia da amostra ex. media_amostra = np.mean(amostra)\nmedia_amostra = np.mean(amostra)\nprint(media_amostra)\n#2-Calcule o desvio da amostra ex. desvio_amostra = np.std(amostra)\ndesvio_amostra = np.std(amostra)\nprint(desvio_amostra)\n#3-Calcule quantos desvios precisar\u00e1 para seu grau de confi\u00e2n\u00e7a ex. numero_desvios = calcula_numero_desvios_tstudent_para_confianca(confian\u00e7a, tamanho_amostra)\n\n#4-Calcule o desvio das amostras ex. desvio_amostras = desvio_amostra\/np.sqrt(tamanho_amostra)\n\n#5-Calcule a margem de erro ex. margem_erro = numero_desvios*desvio_amostras\n\n#6-Calcule o intervalo ex. inferior = media_amostra-margem_erro, superior = media_amostra+margem_erro","a36b2ed1":"# Obtenha uma amostra de 1000 elementos e calcule a m\u00e9dia da altura da populacao considerando confian\u00e7a de 80%\ntamanho_amostra = 100\namostra = recupera_amostra(populacao, tamanho_amostra)\nprint(amostra)","57a22aab":"# Obtenha uma amostra de 100 elementos e calcule a m\u00e9dia da altura da populacao considerando confian\u00e7a de 99%","249744c8":"# Exerc\u00edcio aula 3 para o curso de avalia\u00e7\u00e3o de pol\u00edticas p\u00fablicas"}}