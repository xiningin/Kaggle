{"cell_type":{"acbe8995":"code","7166dac5":"code","77e1ca8d":"code","fb0aa175":"code","27a0c4d2":"code","068e7a5c":"code","bc0491b1":"code","fa1f9a26":"code","b020d97c":"code","5c8739d9":"code","2546797b":"code","ac4f08a7":"code","e8fb8ddc":"code","7680de3b":"code","bf1dd35f":"code","a2804e5c":"code","0fae530d":"markdown","1bc3df9c":"markdown","96c34255":"markdown","fc56d178":"markdown","abd62ddf":"markdown","dad0163f":"markdown","870e73b1":"markdown","414035d8":"markdown","a6d617db":"markdown","29fd5dfe":"markdown","fd2c8342":"markdown","fdf519bf":"markdown","7d8bad35":"markdown"},"source":{"acbe8995":"import os\nimport numpy as np \nimport pandas as pd \nimport pandas_profiling as pp\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\nprint(os.listdir(\"..\/input\"))\n","7166dac5":"train = pd.read_csv('..\/input\/train.csv')\ntest  = pd.read_csv('..\/input\/test.csv')\nsample= pd.read_csv('..\/input\/sample_submission.csv')","77e1ca8d":"pp.ProfileReport(train)","fb0aa175":"def display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000, \"display.max_columns\", 1000): \n        display(df)","27a0c4d2":"y     = train[['Id','SalePrice']]\ntrain = train.drop('SalePrice',axis=1)","068e7a5c":"all_dfs = [train,test]\nall_df = pd.concat(all_dfs).reset_index(drop=True);","bc0491b1":"display_all(all_df.isnull().sum()\/all_df.shape[0])","fa1f9a26":"all_df.drop(['Alley','PoolQC','MiscFeature','Fence','FireplaceQu','Utilities'],axis=1,inplace=True)","b020d97c":"all_df['LotFrontage'].fillna(value=all_df['LotFrontage'].median(),inplace=True)\nall_df['MasVnrType'].fillna(value='None',inplace=True)\nall_df['MasVnrArea'].fillna(0,inplace=True)\nall_df['BsmtCond'].fillna(value='TA',inplace=True)\nall_df['BsmtExposure'].fillna(value='No',inplace=True)\nall_df['Electrical'].fillna(value='SBrkr',inplace=True)\nall_df['BsmtFinType2'].fillna(value='Unf',inplace=True)\nall_df['GarageType'].fillna(value='Attchd',inplace=True)\nall_df['GarageYrBlt'].fillna(value=all_df['GarageYrBlt'].median(),inplace=True)\nall_df['GarageFinish'].fillna(value='Unf',inplace=True)\nall_df['GarageQual'].fillna(value='TA',inplace=True)\nall_df['GarageCond'].fillna(value='TA',inplace=True)\nall_df['BsmtFinType1'].fillna(value='NO',inplace=True)\nall_df['BsmtQual'].fillna(value='No',inplace=True)\nall_df['BsmtFullBath'].fillna(value=all_df['BsmtFullBath'].median(),inplace=True)\nall_df['BsmtFinSF1'].fillna(value=all_df['BsmtFinSF1'].median(),inplace=True)\nall_df['BsmtFinSF2'].fillna(value=0,inplace=True)\nall_df['BsmtUnfSF'].fillna(value=0,inplace=True)\nall_df['TotalBsmtSF'].fillna(value=all_df['TotalBsmtSF'].median(),inplace=True)\nall_df['BsmtHalfBath'].fillna(value=0,inplace=True)\nall_df['GarageCars'].fillna(value=all_df['GarageCars'].median(),inplace=True)\nall_df['GarageArea'].fillna(value=all_df['GarageArea'].median(),inplace=True)","5c8739d9":"labelencoder=LabelEncoder()\n\nall_df['MSZoning']      = labelencoder.fit_transform(all_df['MSZoning'].astype(str))\nall_df['Exterior1st']   = labelencoder.fit_transform(all_df['Exterior1st'].astype(str))\nall_df['Exterior2nd']   = labelencoder.fit_transform(all_df['Exterior2nd'].astype(str))\nall_df['KitchenQual']   = labelencoder.fit_transform(all_df['KitchenQual'].astype(str))\nall_df['Functional']    = labelencoder.fit_transform(all_df['Functional'].astype(str))\nall_df['SaleType']      = labelencoder.fit_transform(all_df['SaleType'].astype(str))\nall_df['Street']        = labelencoder.fit_transform(all_df['Street'])   \nall_df['LotShape']      = labelencoder.fit_transform(all_df['LotShape'])   \nall_df['LandContour']   = labelencoder.fit_transform(all_df['LandContour'])   \nall_df['LotConfig']     = labelencoder.fit_transform(all_df['LotConfig'])   \nall_df['LandSlope']     = labelencoder.fit_transform(all_df['LandSlope'])   \nall_df['Neighborhood']  = labelencoder.fit_transform(all_df['Neighborhood'])   \nall_df['Condition1']    = labelencoder.fit_transform(all_df['Condition1'])   \nall_df['Condition2']    = labelencoder.fit_transform(all_df['Condition2'])   \nall_df['BldgType']      = labelencoder.fit_transform(all_df['BldgType'])   \nall_df['HouseStyle']    = labelencoder.fit_transform(all_df['HouseStyle'])   \nall_df['RoofStyle']     = labelencoder.fit_transform(all_df['RoofStyle'])   \nall_df['RoofMatl']      = labelencoder.fit_transform(all_df['RoofMatl'])    \nall_df['MasVnrType']    = labelencoder.fit_transform(all_df['MasVnrType'])   \nall_df['ExterQual']     = labelencoder.fit_transform(all_df['ExterQual'])  \nall_df['ExterCond']     = labelencoder.fit_transform(all_df['ExterCond'])   \nall_df['Foundation']    = labelencoder.fit_transform(all_df['Foundation'])   \nall_df['BsmtQual']      = labelencoder.fit_transform(all_df['BsmtQual'])   \nall_df['BsmtCond']      = labelencoder.fit_transform(all_df['BsmtCond'])   \nall_df['BsmtExposure']  = labelencoder.fit_transform(all_df['BsmtExposure'])   \nall_df['BsmtFinType1']  = labelencoder.fit_transform(all_df['BsmtFinType1'])   \nall_df['BsmtFinType2']  = labelencoder.fit_transform(all_df['BsmtFinType2'])   \nall_df['Heating']       = labelencoder.fit_transform(all_df['Heating'])   \nall_df['HeatingQC']     = labelencoder.fit_transform(all_df['HeatingQC'])   \nall_df['CentralAir']    = labelencoder.fit_transform(all_df['CentralAir'])   \nall_df['Electrical']    = labelencoder.fit_transform(all_df['Electrical'])    \nall_df['GarageType']    = labelencoder.fit_transform(all_df['GarageType'])  \nall_df['GarageFinish']  = labelencoder.fit_transform(all_df['GarageFinish'])   \nall_df['GarageQual']    = labelencoder.fit_transform(all_df['GarageQual'])  \nall_df['GarageCond']    = labelencoder.fit_transform(all_df['GarageCond'])   \nall_df['PavedDrive']    = labelencoder.fit_transform(all_df['PavedDrive'])  \nall_df['SaleCondition'] = labelencoder.fit_transform(all_df['SaleCondition'])  ","2546797b":"Scaler = StandardScaler()\nall_scaled = pd.DataFrame(Scaler.fit_transform(all_df))\n\ntrain_scaled = pd.DataFrame(all_scaled[:1460])\ntest_scaled = pd.DataFrame(all_scaled[1460:2920])","ac4f08a7":"X = train_scaled\nX_train, X_test, y_train, y_test = train_test_split(X, y['SalePrice'], test_size=0.1, random_state=42)","e8fb8ddc":"from xgboost import XGBRegressor\nXGB = XGBRegressor(max_depth=3,learning_rate=0.1,n_estimators=1000,reg_alpha=0.001,reg_lambda=0.000001,n_jobs=-1,min_child_weight=3)\nXGB.fit(X_train,y_train)","7680de3b":"print (\"Training score:\",XGB.score(X_train,y_train),\"Test Score:\",XGB.score(X_test,y_test))","bf1dd35f":"y_pred = pd.DataFrame(XGB.predict(test_scaled))\ny_pred['SalePrice']=y_pred[0]\ny_pred['Id'] = test['Id']\ny_pred.drop(0,axis=1,inplace=True)","a2804e5c":"y_pred.to_csv('house_price_xgb.csv',index=False)","0fae530d":"# XGBoost","1bc3df9c":"# gotta encode all the object types! ","96c34255":"# train - test split !","fc56d178":"# need to scale in case we want to use linear models","abd62ddf":"# Getting the data","dad0163f":"thanks a lot for your time! I'm trying to keep this notebook in a neat way to help the beginners! Though I'm planning to add some simple EDA blocks as well. Please upvote if you like it!","870e73b1":"# let's fill the Na with specific values!","414035d8":"#           A very simple XGB Regression Example for Beginners !\n\n\n\n![](https:\/\/marsrealty.co.nz\/wp-content\/uploads\/2018\/10\/sold-1000x500.jpeg)","a6d617db":"# don't really know what to do with these!","29fd5dfe":"# train and target","fd2c8342":"# Imports","fdf519bf":"# finally the submission","7d8bad35":"# our score"}}