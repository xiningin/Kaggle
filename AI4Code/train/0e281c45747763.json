{"cell_type":{"0369c2fb":"code","c4081480":"code","8890fab5":"code","765b4597":"code","76545c55":"code","50dc7287":"code","c87df32f":"code","6c8d3daf":"code","dfaad6ea":"code","9c8f1280":"code","06972b05":"code","87537f1a":"code","97e27478":"code","c83c1caa":"code","68c405d4":"code","147c4ed5":"code","9eebb6ee":"code","10cdd6cb":"code","c077909b":"code","d7ac3563":"markdown","f4ea277c":"markdown","8c0ad0bc":"markdown","d0014d38":"markdown","a8142987":"markdown","ca884dc4":"markdown","77b6f238":"markdown","7cc13fbe":"markdown","aab4a802":"markdown","f84ed56d":"markdown"},"source":{"0369c2fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4081480":"!pip install nglview\nimport Bio\nfrom Bio.Seq import Seq\nfrom Bio.SeqRecord import SeqRecord\nfrom Bio import SeqIO\nfrom Bio import AlignIO\nfrom Bio.pairwise2 import format_alignment \nfrom Bio.Align import MultipleSeqAlignment\nfrom Bio.Blast import NCBIWWW\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\nfrom Bio.Data import CodonTable\nimport nglview as nv\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom colorama import Back, Style, Fore\nimport seaborn as sns\nimport pandas as pd\n","8890fab5":"for record in SeqIO.parse(\"\/kaggle\/input\/covid19-genome-sequence\/sequence.fasta\", \"fasta\"):\n    print(record.id)","765b4597":"ncov_record = SeqIO.read(\"\/kaggle\/input\/covid19-genome-sequence\/sequence.fasta\", \"fasta\")\nncov_record","76545c55":"ncov_dna = ncov_record.seq\n","50dc7287":"ncov_dna","c87df32f":"def ten_nucleotide_seq(genome):\n    genes = []\n    for ix, char in enumerate(genome):\n        if ix != 0 and ix%10 == 0:\n            genes.append(' ')\n        genes.append(char)\n    return ''.join(genes)\n\n# color code to represent genome sequences\nnu_clr_switcher = {\n    # standard color-codes\n    'A': Back.GREEN,\n    'C': Back.YELLOW,\n    'G': Back.RED,\n    'T': Back.BLUE,\n    ' ': Style.RESET_ALL\n}\nprotein_clr_switcher = {\n    # color-code by proteinfamily's polarity\n    'A': Back.BLUE,\n    'V': Back.BLUE,\n    'I': Back.BLUE,\n    'L': Back.BLUE,\n    'M': Back.BLUE,\n    'F': Back.BLUE,\n    'Y': Back.CYAN,\n    'W': Back.BLUE,\n    'H': Back.CYAN,\n    'R': Back.RED,\n    'K': Back.RED,\n    'N': Back.GREEN,\n    'Q': Back.GREEN,\n    'E': Back.MAGENTA,\n    'D': Back.MAGENTA,\n    'S': Back.GREEN,\n    'T': Back.GREEN,\n    'G': Back.YELLOW,\n    'P': Back.YELLOW,\n    'C': Back.BLUE,\n    ' ': Style.RESET_ALL\n}\ndef seq_repr(genome_str, strand ='dna'):\n    if strand == 'dna':\n        genome_str = ten_nucleotide_seq(genome=genome_str)\n        line_break_cntr = 0\n        for i in range(len(genome_str)):\n            if genome_str[i] == ' ':\n                line_break_cntr += 1\n                if line_break_cntr>0 and line_break_cntr%6==0:\n                    text = \"\\n\"\n                else:\n                    text = nu_clr_switcher[genome_str[i]] + genome_str[i]\n            else:\n                text = nu_clr_switcher[genome_str[i]] + genome_str[i]\n            print(text, end=\"\")\n        Style.RESET_ALL\n    if strand == 'protein':\n        for i in range(len(genome_str)):\n            if genome_str[i] in protein_clr_switcher:\n                if genome_str[i] == 'S' and genome_str[i+1:i+4] == 'TOP':\n                    text = Style.RESET_ALL + 'S'\n                elif genome_str[i] == 'T' and genome_str[i-1] == 'S' and genome_str[i+1:i+3] == 'OP':\n                    text = Style.RESET_ALL + 'T'\n                elif genome_str[i] == 'P' and genome_str[i-3:i] == 'STO':\n                    text = Style.RESET_ALL + 'P'\n                else:\n                    text = protein_clr_switcher[genome_str[i]] + genome_str[i]\n            else:\n                Style.RESET_ALL\n                text = genome_str[i]\n            print(text, end=\"\")","6c8d3daf":"print(\"COVID-19 genome: \")\nseq_repr(ncov_dna[0:300])","dfaad6ea":"len(ncov_dna)","9c8f1280":"def nucleotides_composition(seq):\n    nucleotides = {'A': 0, 'C': 0, 'G': 0, 'T': 0}\n    for n in nucleotides:\n        nucleotides[n] = seq.count(n)\/len(seq)*100\n    return nucleotides","06972b05":"ndict=nucleotides_composition(ncov_dna)\nndict","87537f1a":"import pandas as pd\nndf = pd.DataFrame.from_dict(ndict, orient ='index')\nndf = ndf.reset_index()\nndf = ndf.rename(columns={\"index\": \"Nucleotide\", 0: \"Composition\"})","97e27478":"ax = sns.barplot(x=\"Nucleotide\", y=\"Composition\", data=ndf)","c83c1caa":"from Bio.SeqUtils import GC\nprint(f\"GC% :{GC(ncov_dna)}\")","68c405d4":"# tri-nucleotide compositions\ntrimers = [\"AAA\", \"AAC\", \"AAG\", \"AAT\", \"ACA\", \"ACC\", \"ACG\", \"ACT\", \"AGA\", \"AGC\", \"AGG\", \"ATA\", \"ATC\", \"ATG\", \"CAA\", \n           \"CAC\", \"CAG\", \"CCA\",\"CCC\",\"CCG\",\"CGA\",\"CGC\",\"CTA\",\"CTC\",\"GAA\",\"GAC\",\"GCA\",\"GCC\",\"GGA\",\"GTA\",\"TAA\",\"TCA\"]\n\ndef trimer_composition(genome):\n    trimer_dict = dict()\n    for trimer in trimers:\n        trimer_dict[trimer] = genome.count(trimer)\n    return trimer_dict","147c4ed5":"composition = trimer_composition(ncov_dna)\ntotal_composition = sum(composition.values())\nnorm_freq = [count\/total_composition for count in composition.values()]\nprint(composition)\nprint(total_composition)\nprint(norm_freq)","9eebb6ee":"tri = pd.DataFrame.from_dict(composition, orient ='index')\ntri = tri.reset_index()\ntri = tri.rename(columns={\"index\": \"trimer\", 0: \"count\"})","10cdd6cb":"r1 = tri.sort_values(by='count', ascending=False)\nr1.style.bar(subset=[\"count\"],color='#').background_gradient(cmap='Reds')","c077909b":"fig_dims = (12, 8)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.barplot(x=\"count\", y=\"trimer\", ax=ax, data=tri)","d7ac3563":"# Finding the Composition of each Nucleotide","f4ea277c":"# **What is BioPython?**\nThe Biopython Project is an international association of developers of freely available Python (https:\/\/www.python.org) tools for computational molecular biology. Python is an object oriented, interpreted, flexible language that is becoming increasingly popular for scientific computing. Python is easy to learn, has a very clear syntax and can easily be extended with modules written in C, C++ or FORTRAN.","8c0ad0bc":"# Calculating GC-content of the DNA\nIn polymerase chain reaction (PCR) experiments, the GC-content of short oligonucleotides known as primers is often used to predict their annealing temperature to the template DNA. A higher GC-content level indicates a relatively higher melting temperature which correlates to higher stability.","d0014d38":"# What is DNA?\nDNA stands for deoxyribonucleic acid. It's the genetic code that determines all the characteristics of a living thing. ... Each nucleotide contains a sugar and a phosphate molecule, which make up the 'backbone' of DNA, and, one of four organic bases. The bases are adenine (A), guanine (G), cytosine (C) and thymine (T)\n![image.png](attachment:image.png)","a8142987":"The Sequence I am using can be downloaded from http:\/\/www.ncbi.nlm.nih.gov\/\n\nNCBI is now a leading source for public biomedical databases, software tools for analyzing molecular and genomic data, and research in computational biology. Today NCBI creates and maintains over 40 integrated databases for the medical and scientific communities as well as the general public.","ca884dc4":"For now I have analysed the structure of the DNA. Further analysis will be done in part-2\nhttps:\/\/www.kaggle.com\/sreshta140\/looking-into-dna-sequence-2","77b6f238":"Visualizing the Nucleotides of the Covid19 DNA","7cc13fbe":"# Tri-nucleotide compositions (Tri-mer)\nIn bioinformatics, k-mers are subsequences of length {\\displaystyle k}k contained within a biological sequence. Primarily used within the context of computational genomics and sequence analysis, in which k-mers are composed of nucleotides (i.e. A, T, G, and C), k-mers are capitalized upon to assemble DNA sequences,improve heterologous gene expression,identify species in metagenomic samples, and create attenuated vaccines.","aab4a802":"Loading the FASTA file","f84ed56d":"Total Number of Nucleotides"}}