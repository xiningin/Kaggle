{"cell_type":{"67f0406c":"code","8088c506":"code","c25d65b8":"code","74363680":"code","138dc798":"code","d274a949":"code","1b814a98":"code","a6334eb6":"code","3f57bdca":"code","5bce0375":"code","15c40be7":"code","a551f7e9":"code","a92670ed":"code","02e3d356":"code","405b6c5e":"code","91ee814c":"code","bcb7fb72":"code","b7493988":"markdown","3b39b98f":"markdown","cd9cfa8a":"markdown","f6bdef49":"markdown","e807386c":"markdown","d5fdc8aa":"markdown"},"source":{"67f0406c":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import  accuracy_score, classification_report\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nimport seaborn as sns","8088c506":"data = pd.read_csv('\/kaggle\/input\/csgo-round-winner-classification\/csgo_round_snapshots.csv')","c25d65b8":"data.head()","74363680":"sns.histplot(data = data, x = 'round_winner')","138dc798":"sns.histplot(data = data, x = 'map')","d274a949":"most_popular_maps = ['de_dust2', 'de_inferno']\nd1 =data[data['map'] == most_popular_maps[0]]\nsns.histplot(data = d1, x = 'round_winner')","1b814a98":"d2 =data[data['map'] == most_popular_maps[1]]\nsns.histplot(data = d2, x = 'round_winner')","a6334eb6":"encoder = LabelEncoder()\nscaler = StandardScaler()","3f57bdca":"for column in data.columns:\n    if len(data[column].unique()) == 1:\n        data = data.drop([column], axis = 1)","5bce0375":"data['round_winner'] = data['round_winner'].replace({'T' : 0, 'CT' : 1})\ndata['bomb_planted'] = data['bomb_planted'].astype(np.int16)\ny = data['round_winner']","15c40be7":"data = data.drop('round_winner', axis = 1)\ndata['map'] = encoder.fit_transform(data['map'])","a551f7e9":"X = pd.DataFrame(scaler.fit_transform(data), columns = data.columns)\nX_train, X_test, y_train, y_test = train_test_split(X, y, shuffle = True, train_size = 0.8, random_state = 24)","a92670ed":"Estimator = DecisionTreeClassifier()\nparam_grid = {'max_depth':[None,1,2,3], 'min_samples_leaf' :[2,3,4] }\nOptimizer = GridSearchCV(Estimator, param_grid, cv = 5)","02e3d356":"Optimizer.fit(X_train,y_train)\n\npredsTrain = Optimizer.predict(X_train)\npredsTest = Optimizer.predict(X_test)","405b6c5e":"print(classification_report(y_train, predsTrain))","91ee814c":"print(classification_report(y_test, predsTest))","bcb7fb72":"'Best accuracy when using decision trees with optimal hyperparameter search option: {}'.format(round(100 * accuracy_score(y_test, predsTest), 2))","b7493988":"# Let's choose a model based on decision trees. This choice is based on the fact that the winning side is always different on different maps.","3b39b98f":"# Creation of an encoder and scaler for data preprocessing","cd9cfa8a":"# As we can see, the distribution of victories depending on the map is slightly different from each other.","f6bdef49":"# Lets take a look at the distribution of maps in this dataset and find out who wins the most on the most popular maps. ","e807386c":"# Creation of a preprocessed dataset and division into training and test samples","d5fdc8aa":"# Processing binary and categorical features in a dataset"}}