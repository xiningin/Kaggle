{"cell_type":{"af4b331e":"code","44e4f796":"code","59c38ee9":"code","3a2ac8cc":"code","3e33e024":"code","e97a6880":"code","e27d7650":"code","01cf2e09":"code","2ab94bf0":"code","a9ff69d7":"code","1d00c9fc":"code","ac6fb34e":"code","5ee7db7c":"markdown","8f4af126":"markdown"},"source":{"af4b331e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","44e4f796":"BATCH_SIZE = 16\n","59c38ee9":"import tensorflow as tf\nimport numpy as np\nfrom transformers import AutoTokenizer, TFAutoModelForSequenceClassification,RobertaForSequenceClassification\nfrom sklearn.model_selection import train_test_split\n\n# Same as before\ncheckpoint = \"..\/input\/clrp-roberta-base\/clrp_roberta_base\"\n\ntokenizer = AutoTokenizer.from_pretrained(checkpoint,from_pt=True)\nbase_model = TFAutoModelForSequenceClassification.from_pretrained(checkpoint,from_pt=True)\n\nVERBOSE = 1\n\n\n\ndf = pd.read_csv('..\/input\/commonlitreadabilityprize\/train.csv')\n\nseqs = df.excerpt\ntargets = df.target\n\ndf_test = pd.read_csv('..\/input\/commonlitreadabilityprize\/test.csv')\n\ntest_seqs = df_test.excerpt\n\n\n# Split the data\nx_train, x_valid, y_train, y_valid = train_test_split(seqs, targets, test_size=0.2, shuffle= True)\n\n\n","3a2ac8cc":"x_train[:1]","3e33e024":"batch = dict(tokenizer(seqs.to_list(), padding=True, truncation=True, return_tensors=\"tf\"))\n\ntest_batch = dict(tokenizer(test_seqs.to_list(), padding=True, truncation=True, return_tensors=\"tf\"))","e97a6880":"callbacks = [tf.keras.callbacks.ModelCheckpoint(f'bert_Base.h5', \n                                                        monitor = 'val_root_mean_squared_error', \n                                                        verbose = VERBOSE, \n                                                        save_best_only = True,\n                                                        save_weights_only = True, \n                                                        mode = 'min') \n            ]","e27d7650":"steps = x_train.shape[0] \/\/ (BATCH_SIZE *16)","01cf2e09":"base_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-5,epsilon=1e-6),\n              loss=tf.keras.losses.MeanSquaredError(),\n              metrics = [tf.keras.metrics.RootMeanSquaredError()],\n             )\n\nlabels = tf.convert_to_tensor(targets)\n\nhistory = base_model.fit(x=batch,y=labels,batch_size=BATCH_SIZE,epochs=70\n                   ,callbacks = [callbacks],\n                         steps_per_epoch = steps,\n                         validation_split=0.2\n                   )","2ab94bf0":"base_model.summary()","a9ff69d7":"history_frame = pd.DataFrame(history.history)\nhistory_frame.loc[:, ['loss', 'val_loss']].plot()\nhistory_frame.loc[:, ['root_mean_squared_error', 'val_root_mean_squared_error']].plot();\n","1d00c9fc":"base_model.load_weights(f'.\/bert_Base.h5')\n    \npreds = base_model.predict(test_batch)","ac6fb34e":"df_test['target'] = np.mean(preds[0],axis=1)\ndf_test[['id', 'target']].to_csv('submission.csv', index = False)","5ee7db7c":"# Predict","8f4af126":"Basic Notebook for Train in Inference"}}