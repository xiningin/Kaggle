{"cell_type":{"c8b5f037":"code","afb2f7e0":"code","14b86425":"code","0d016ceb":"code","73475ba9":"code","37915c17":"code","be342b1e":"code","d6d517a8":"code","e7e6cafd":"code","109844d1":"code","41339ccf":"code","fba0add1":"code","5c931c67":"code","0d32128a":"code","f83d1b0d":"code","4dbd2bf2":"code","1b6a24db":"code","d424153b":"code","ffa12444":"markdown","351e930a":"markdown","d26cfc92":"markdown","e325deb2":"markdown","54e6a4ba":"markdown","905b6491":"markdown","3c48f32c":"markdown","0aabbd65":"markdown","f2df70f5":"markdown"},"source":{"c8b5f037":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","afb2f7e0":"# importing all the essential libraries for the Neural Networks\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Dropout","14b86425":"# importing the training and testing data\ntrain_data = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_train.csv\")\ntest_data = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_test.csv')","0d016ceb":"# creating training and testing datasets with labels\nX_train = train_data.drop('label', axis = 1)\ny_train = train_data['label']\n\nX_test = test_data.drop('label', axis = 1)\ny_test = test_data['label']","73475ba9":"X_train.shape","37915c17":"# normalizing the data\nX_train = X_train \/ 255\nX_test = X_test \/ 255","be342b1e":"# visualizing any one image for our imagination :) \nplt.imshow(X_train.iloc[:1].values.reshape((28, 28)))","d6d517a8":"rows, columns = 28, 28\nX_train = X_train.values.reshape(X_train.shape[0], rows, columns, 1)\nX_test = X_test.values.reshape(X_test.shape[0], rows, columns, 1)","e7e6cafd":"X_train.shape","109844d1":"CNN_model = Sequential()\n# convolutional layer - 1\nCNN_model.add(Conv2D(filters = 32, kernel_size = (3, 3), activation = 'relu', input_shape = (rows, columns, 1)))\n# Max pooling Layer - 1\nCNN_model.add(MaxPool2D(pool_size = (2, 2)))\n# Drop out layer - 1\nCNN_model.add(Dropout(0.2))\n# convolutional layer - 2\nCNN_model.add(Conv2D(filters = 64, kernel_size = (3, 3), activation = 'relu'))\n# Max pooling Layer - 2\nCNN_model.add(MaxPool2D(pool_size = (2, 2)))\n# Drop out layer - 2\nCNN_model.add(Dropout(0.2))\n# convolutional layer - 3\nCNN_model.add(Conv2D(filters = 128, kernel_size = (3, 3), activation = 'relu'))\n# Max pooling Layer - 3\nCNN_model.add(MaxPool2D(pool_size = (2, 2)))\n# Drop out layer - 3\nCNN_model.add(Dropout(0.2))\n# flatten layer\nCNN_model.add(Flatten())\n# fully connected layer 1\nCNN_model.add(Dense(units = 128, activation = 'relu'))\n# Drop out layer - 4\nCNN_model.add(Dropout(0.2))\n# output layer\nCNN_model.add(Dense(units = len(set(y_train)), activation = 'softmax'))\n# compiling the model\nCNN_model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])","41339ccf":"epochs = 25\nfitted_model = CNN_model.fit(X_train, y_train, epochs = epochs, verbose = 1, validation_split = 0.2)","fba0add1":"# summary of the model\nCNN_model.summary()","5c931c67":"prediction = CNN_model.predict_classes(X_test)","0d32128a":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score","f83d1b0d":"print(classification_report(prediction, y_test))","4dbd2bf2":"print(confusion_matrix(prediction, y_test))","1b6a24db":"print(accuracy_score(prediction, y_test))","d424153b":"accuracy = fitted_model.history['acc']\nvalidated_accuracy = fitted_model.history['val_acc']\n\nplt.plot(range(len(validated_accuracy)), validated_accuracy, 'go', label = 'validated_accuracy')\nplt.plot(range(len(accuracy)), accuracy, 'ro', label = 'accuracy')\n\nplt.title('Training vs validated accuracy')\n\nplt.legend()","ffa12444":"784 features - each representing each pixel.","351e930a":"Evaluating the model in the test set now","d26cfc92":"Voila ! ","e325deb2":"Begineers in CNN are welcome to check my code and thanks in advance for your encouragement. ","54e6a4ba":"Fitting the model","905b6491":"importing the metrics for classification ","3c48f32c":"Thanks for viewing my code. Kindly comment any creative ideas, if any. Lets share knowledge and Learn together !","0aabbd65":"We need to reshape the image so that it can be used with Conv2d. ","f2df70f5":"We shall explore the training and testing data"}}