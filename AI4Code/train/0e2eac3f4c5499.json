{"cell_type":{"554ccecf":"code","33b0de41":"code","62752ac3":"code","89fc7bcd":"code","db8d3d50":"code","32345ea1":"code","0f9104c8":"code","d5fbda81":"code","eb516836":"code","dd91d85d":"code","07d73d7b":"code","d40f9d1b":"code","75a58644":"code","e1746de1":"code","88db6d5d":"code","a3bee1b0":"code","27f8fec0":"code","507c1ca0":"code","a40f4fe9":"code","3915784b":"code","cf04dfb0":"code","b9cd25d3":"code","06ed364d":"code","a5999007":"code","05fb78f2":"code","8264530c":"code","1e0ff9e2":"code","f36c5383":"code","3523645e":"code","9f06a4ae":"code","e5dbd522":"code","7944d507":"code","53bf8623":"code","9ef4b2c9":"code","5d784424":"code","438d28b1":"code","cdd62459":"markdown","50c8c942":"markdown","347e166b":"markdown","038ba137":"markdown","23de3546":"markdown","b6984e3f":"markdown","6539695f":"markdown","77e3bf81":"markdown","44529c9b":"markdown","0441bc62":"markdown","dd70a295":"markdown","4bb8df8f":"markdown","fafa782f":"markdown","3a14e0ad":"markdown","d6a0d459":"markdown","9981581b":"markdown","feb5333d":"markdown","81a25e80":"markdown","e3ed6b77":"markdown","4fd1aec0":"markdown","9350dab8":"markdown","39bb2a40":"markdown","4e3eed37":"markdown"},"source":{"554ccecf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","33b0de41":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud, STOPWORDS","62752ac3":"df = pd.read_csv(\"\/kaggle\/input\/top-play-store-games\/android-games.csv\")\nprint(df.info())\ndf.head(5)","89fc7bcd":"# Check unique values of installs\nprint(f\"number of installs' unique values: {df['installs'].nunique()}\")\nprint(\"\\n\")\nprint(\"unique values\")\nprint(df['installs'].unique())","db8d3d50":"# define a unit transform function to work with .apply()\ndef unit_transform(value):\n    if value[-1].lower() == 'm':\n        return float(value[:-1].strip()) * 1000000\n    elif value[-1].lower() == 'k':\n        return float(value[:-1].strip()) * 1000","32345ea1":"# transform installs column\ndf['installs'] = df['installs'].apply(unit_transform)\ndf['installs'][:3]","0f9104c8":"# select all 1st rank games sorted by average rating\ndf[df['rank'] == 1].sort_values(by = 'average rating', ascending = False)","d5fbda81":"# set plot style and font scale\nsns.set(style = 'darkgrid', font_scale = 1)","eb516836":"# create text of game titles\ntitles = ', '.join(df['title'].to_list())\ntitles[:100]","dd91d85d":"# stopwords\nstopwords = set(STOPWORDS)","07d73d7b":"# instantiate a word cloud object\ntitle_wc = WordCloud(\n    background_color='white',\n    max_words=2000,\n    stopwords=stopwords\n)\n\n# generate the word cloud\ntitle_wc.generate(titles)","d40f9d1b":"# display the word cloud\nfig = plt.figure(figsize = (14,18))\n\n# display the cloud\nplt.imshow(title_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","75a58644":"# add the words [Game,Games] to stopwords\nstopwords.add('Game')\nstopwords.add('Games')\n\n# re-generate the word cloud\ntitle_wc.generate(titles)\n\n# display the cloud\nfig = plt.figure(figsize = (14,18))\nplt.imshow(title_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","e1746de1":"# total number of unique game category\ndf['category'].nunique()","88db6d5d":"# Average installations by game category\ndf.groupby('category').agg(['mean'])['installs'].sort_values(by = 'mean', ascending = False).plot(kind = 'barh', title = 'average installs by category')","a3bee1b0":"# Number of free, paid games by category\ndf.pivot_table(index = 'category', columns = 'paid', values = 'rank',aggfunc='count').plot(kind = 'bar', stacked = True, title = 'number of free\/paid games by category')\nplt.legend(bbox_to_anchor = (1.05,1), title = 'paid')\n# df.groupby(['category','paid']).count()['title']","27f8fec0":"# Average of average rating by type of game(free vs paid)\nsns.barplot(x = 'paid', y = 'average rating', estimator = np.mean, data = df)\nplt.title(\"Average rating (free vs paid games)\")","507c1ca0":"df.head(2)","a40f4fe9":"# Mean of [average rating, growth 30 days, growth 60 days] by category\ndf[['category', 'average rating','growth (30 days)','growth (60 days)']].pivot_table(index = 'category',\n                                                                                     values = ['average rating',\n                                                                                               'growth (30 days)',\n                                                                                               'growth (60 days)'],\n                                                                                    aggfunc = 'mean')","3915784b":"# Check growth (30 days) of GAME ACTION and GAME WORD\nstrange = df[(df['category'] == 'GAME ACTION') | \n             (df['category'] == 'GAME WORD')][['category','growth (30 days)']].sort_values(by = 'growth (30 days)',\n                                                                                           ascending = False).head().index","cf04dfb0":"# show those strange games with abnormally high growth (30 days)\ndf.iloc[strange]","b9cd25d3":"# Average of average rating by category\ndf.groupby(\"category\").mean()['average rating'].sort_values(ascending = False).plot(kind = 'barh', title = 'average rating by category')","06ed364d":"# average rating distribution by game category\ng = sns.FacetGrid(df, row = 'category')\ng = g.map(sns.histplot, 'average rating', kde = True)","a5999007":"from scipy import stats\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler","05fb78f2":"df.head(3)","8264530c":"# df_std = pd.DataFrame(np.abs(StandardScaler().fit_transform(df.drop(['title','rank','category','paid'], axis = 1))), \n#                       columns = df.drop(['title','rank','category','paid'], axis = 1).columns) \n# df_std.head(3)\n# df_std[(df_std > 3).any(axis = 1)]","1e0ff9e2":"df_cluster = df[['category','installs','average rating']].groupby(\"category\").agg(['mean','median'])","f36c5383":"df_cluster","3523645e":"df_cluster = pd.concat([df_cluster.xs(('installs','mean') , axis = 1), df_cluster.xs(('average rating','median') , axis = 1)], axis = 1)\ndf_cluster.head(3)","9f06a4ae":"df_cluster = df_cluster.droplevel(1, axis = 1)","e5dbd522":"scaler = StandardScaler().fit(df_cluster)\ndf_cluster_std = scaler.transform(df_cluster)","7944d507":"error = []\nfor i in range(2,15): # we only have 17 categories, this is prabably too much.\n    km = KMeans(n_clusters = i, init = 'k-means++', random_state = 101).fit(df_cluster_std)\n    error.append(km.inertia_)","53bf8623":"plt.plot(range(2,15), error, marker = 'D', markerfacecolor = 'red', color = 'blue', markeredgecolor = 'red')\nplt.title(\"Error VS K\")\nplt.xlabel('K')\nplt.ylabel('Error')","9ef4b2c9":"# Fit KMeans with optimal K\nkm = KMeans(n_clusters = 4, init = 'k-means++', random_state = 101).fit(df_cluster_std)\npred = km.labels_\ncentroids = km.cluster_centers_","5d784424":"# result\nresult = df_cluster.copy()\nresult.reset_index(inplace = True)\nresult['cluster'] = pred\n# result = pd.DataFrame(np.column_stack((df_cluster.index, pred)), columns = ['category','cluster'])\nresult.head()","438d28b1":"fig_r, ax_r = plt.subplots(figsize = (13,10))\n\nsns.scatterplot(x = 'installs', y = 'average rating', hue = 'cluster', palette = 'gist_rainbow', \n                data = result, s = 200, ax = ax_r)\n\nplt.legend(bbox_to_anchor = (1.1,1), title = 'cluster')\n\nfor i in range(result.shape[0]):\n    \n    if result.iloc[i,0] == 'GAME STRATEGY':\n        plt.text(result.iloc[i,1], result.iloc[i,2] - 0.005, result.iloc[i,0][5:])\n    else:\n        plt.text(result.iloc[i,1], result.iloc[i,2], result.iloc[i,0][5:])\n\nplt.title(\"Cluster by game category\")\nplt.show()","cdd62459":"*As expected, there are many famous games like Candy Crush, Clash of Clans, Garena Free Fire, etc on the list. But I didn't expect that 1st rank with highest average rating would have a title I can't read*<br>\n[For more info](https:\/\/play.google.com\/store\/apps\/details?id=com.zytoona.wordscrush&hl=th&gl=US)","50c8c942":"*From the histograms above, some categories have negative skewness. So, in this case, **median** is likely to do a better job as Measure of Central Value than mean.*","347e166b":"*So, Fill-The-Words-word search puzzle and Garena AOV: Link Start are the cause of an extremely high 30-days growth of GAME ACTION and GAME WORD genres* ","038ba137":"## **5.Conclusion & Last word**\n### Conclusion\nAfter analyzed this dataset of **top-100 Play store games by category** which contained 17 unique game categories, I found that<br>\n* 1.Most game titles in this dataset has words like Free, Puzzle, World, Word and Online.\n* 2.Most games are free to play.\n* 3.There is no significant different in average rating between paid game and free game.\n* 4.The most popular by number of installations are Arcade, Casual and Action categories.\n* 5.Using Kmeans clustering, we can assign 17 categories into 4 groups.\n<br>\n\n### Last word\nThanks **Dhruvil Dave** for providing this dataset. It was fun.","23de3546":"*Alright, it seems that the words like Free, Puzzle, World, Word and Online are highly used for naming an android game.*","b6984e3f":"## **2.Data Preprocessing**","6539695f":"## **3.EDA**","77e3bf81":"### Cluster Result\n* Cluster 0 ***red***\n    * (WORD, CARD, CASINO) \n    * Highest rating, but also the smallest average number of installations. \n<br>\n* Cluster 1 ***green*** \n    * (TRIVIA, BOARD, ADVENTURE, STRATEGY, SIMULATION, PUZZLE) \n    * Medium-high rating and small-medium average number of installations.\n<br>\n* Cluster 2 ***blue*** \n    * (ROLE PLAYING, EDUCATIONAL, MUSIC, SPORTS)  \n    * Lowest rating and small-medium average number of installations.\n<br>\n* Cluster 3 ***Pink*** \n    * (RACING, CASUAL, ARCADE, ACTION)\n    * Medium rating and high average number of installations.","44529c9b":"## **4.Fit Model**","0441bc62":"## **5.Result**","dd70a295":"*optimal K: 4*","4bb8df8f":"*Wow, what's wrong with GAME ACTION and GAME WORD? That 30-days growth is extremely crazy !!*","fafa782f":"This dataset has...\n* 1730 rows\n* 15 columns\n* No missing values\n* Proper dtypes, **except installs** (should be numeric)\n* ***objective: EDA***","3a14e0ad":"## **0.Starter codes**","d6a0d459":"## **1.Import libraries and a dataset**","9981581b":"*There is no big difference in average rating between paid games and free games.*","feb5333d":"*From the plot above, there is no clear difference in average rating between categories*. ","81a25e80":"*Arcade, Casual and Action are top three categories by the highest average number of installations.*","e3ed6b77":"## **0.5.Info**\nThis is a dataset of top 100 games of each category of games on Google Play Store along with their ratings and other data like price and number of installs.<br>***Data as of April 9, 2021.***","4fd1aec0":"*From the word cloud above, there are many games that have the word 'game' in the title. However, I don't think the word 'game' in title of game apps is meaningful. So let's add Game or Games in stopwords.*","9350dab8":"*Most games are free to play. It's the same for every categories.* ","39bb2a40":"*Next, we will try clustering categories into group of similarity (average rating and installs) using KMeans.*","4e3eed37":"#### Convert installs data type from object to numeric"}}