{"cell_type":{"a0c214c8":"code","e9d62c54":"code","9ed408df":"code","b9ef3933":"code","249738d4":"code","31880ebc":"code","d95d5f70":"code","ee468d8b":"code","b3dfafab":"code","db681388":"code","d7603ab0":"code","b482ed82":"code","64932226":"code","ff8c83f1":"code","83eebe85":"code","0c97e55a":"markdown","a85b0458":"markdown"},"source":{"a0c214c8":"from scipy import stats\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder\nimport sys\n#from tqdm import tqdm_notebook as tqdm\nfrom tqdm.notebook import tqdm","e9d62c54":"def cal_clean(df):\n    #starts at saturday  so we can drop the weekday\n    df=df.drop(columns=['weekday'])\n    #fill na in events and Label enconding\n    df['event_name_1']=df['event_name_1'].fillna('no_event')\n    df['event_type_1']=df['event_type_1'].fillna('no_event')\n    df['event_name_2']=df['event_name_2'].fillna('no_event')\n    df['event_type_2']=df['event_type_2'].fillna('no_event')\n    le = LabelEncoder()\n    df['event_type_1'] = le.fit_transform(df.event_type_1)\n    df['event_name_1'] = le.fit_transform(df.event_name_1)\n    df['event_type_2'] = le.fit_transform(df.event_type_2)\n    df['event_name_2'] = le.fit_transform(df.event_name_2)\n    #can drop the date because already extracted is available\n    df=df.drop(columns=['date'])\n    #label encode the d\n    #df['d'] = le.fit_transform(df.d)\n    return df\n\n#clean the sales details\ndef sale_clean(df):\n    le = LabelEncoder()\n    df['dept_id'] = le.fit_transform(df.dept_id)\n    df['cat_id'] = le.fit_transform(df.cat_id)\n    df['store_id'] = le.fit_transform(df.store_id)\n    df['item_id'] = le.fit_transform(df.item_id)\n    df['state_id'] = le.fit_transform(df.state_id)\n    df=df.drop(columns=['id'])\n    return df","9ed408df":"#store wise data break up\ndef store_split(sale_df):\n    new_sale=sale_df.groupby(['store_id'])\n    df_st1=new_sale.get_group(0)\n    df_st2=new_sale.get_group(1)\n    df_st3=new_sale.get_group(2)\n    df_st4=new_sale.get_group(3)\n    df_st5=new_sale.get_group(4)\n    df_st6=new_sale.get_group(5)\n    df_st7=new_sale.get_group(6)\n    df_st8=new_sale.get_group(7)\n    df_st9=new_sale.get_group(8)\n    df_st10=new_sale.get_group(9)\n    x=[]\n    return df_st1,df_st2,df_st3,df_st4,df_st5,df_st6,df_st7,df_st8,df_st9,df_st10","b9ef3933":"INPUT_DIR = '..\/input\/m5-forecasting-accuracy\/'\ncal_df = pd.read_csv(f'{INPUT_DIR}\/calendar.csv')\nsale_df = pd.read_csv(f'{INPUT_DIR}\/sales_train_validation.csv')","249738d4":"#clean the cal df\nnew_cal=cal_clean(cal_df)","31880ebc":"#clean the sales data\nnew_sale=sale_clean(sale_df)","d95d5f70":"#split store wise\ns0=pd.DataFrame()\ns1=pd.DataFrame()\ns2=pd.DataFrame()\ns3=pd.DataFrame()\ns4=pd.DataFrame()\ns5=pd.DataFrame()\ns6=pd.DataFrame()\ns7=pd.DataFrame()\ns8=pd.DataFrame()\ns9=pd.DataFrame()\ns0,s1,s2,s3,s4,s5,s6,s7,s8,s9=store_split(new_sale)","ee468d8b":"def day_to_row(sale_df,cal_df,start_day,end_day):\n    df=pd.DataFrame()\n    x=sale_df.columns.to_list()\n    end_day+=start_day\n    cnt=end_day-start_day\n    start_day+=5\n    with tqdm(total=cnt) as pbar:\n        for i in range(cnt):\n            temp = pd.DataFrame(columns=['item_id','event_name_1','event_type_1','event_name_2','event_type_2','snap','wday','month','year','sales'])\n            temp['item_id']=sale_df['item_id']\n            temp['sales']=sale_df[x[start_day+i]]\n            t=cal_df[cal_df['d']==x[start_day+i]].values\n            temp['event_name_1']=t[0][7]\n            temp['event_type_1']=t[0][8]\n            temp['event_name_2']=t[0][9]\n            temp['event_type_2']=t[0][10]\n            temp['snap']=t[0][11]\n            temp['wday']=t[0][1]\n            temp['month']=t[0][2]\n            temp['year']=t[0][3]\n            #print(x[start_day+i],temp.shape)\n            df=pd.concat([df,temp], axis=0,ignore_index=True)\n            pbar.update(1)\n        print('Dates copied from:',x[start_day],'->',x[start_day+i],' Dataset shape',df.shape)\n    return df","b3dfafab":"#start day range 1-1913\n#end day -> Required day count\ntrain=day_to_row(s0,new_cal,0,50)","db681388":"val=day_to_row(s0,new_cal,50,5)","d7603ab0":"X=train.drop(columns=['sales'])\ny=train['sales']","b482ed82":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(random_state=0).fit(X, y)","64932226":"X_val=val.drop(columns=['sales'])\ny_true=val['sales']","ff8c83f1":"y_pred=clf.predict(X_val)","83eebe85":"# model evaluation\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error,accuracy_score\nfrom math import sqrt\nprint(\"RMSSE\",mean_absolute_error(y_true, y_pred))\nprint(\"MSE\",mean_squared_error(y_true, y_pred))\nprint(\"RMSSE\",sqrt(mean_squared_error(y_true, y_pred)))\nprint(\"Accuracy\",accuracy_score(y_true, y_pred))","0c97e55a":"## Store one dataset","a85b0458":"## Model creation"}}