{"cell_type":{"4fb14f9a":"code","13678daf":"code","415cf5c2":"code","fc96ce06":"code","6122cdaf":"code","f8657af0":"code","c28e93e7":"code","35ba98e7":"code","5f46d941":"code","a042eb8e":"code","50a2ed54":"code","538218e6":"code","963fbf7c":"code","9dc19951":"code","4e18ec77":"code","791d0308":"code","2ab34658":"code","202b6a37":"code","f8b3459d":"code","27606dee":"markdown","a1c42ea1":"markdown","5e6c3186":"markdown","6a0cb205":"markdown","0573e580":"markdown","4af3df1c":"markdown","d3cbca5d":"markdown","28ef4ec0":"markdown","b945b2cb":"markdown","0b5b9a7b":"markdown","d1aeadf2":"markdown","46c237a7":"markdown","159b0c7f":"markdown","da5d3662":"markdown","24fa02b8":"markdown","2b638c58":"markdown","80fd8372":"markdown","1b6770cf":"markdown","57138264":"markdown","625e7aa8":"markdown"},"source":{"4fb14f9a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","13678daf":"def sigmoid(Z):\n    return 1\/(1+np.exp(-Z))","415cf5c2":"trainData = pd.read_csv(\"..\/input\/titanic\/train.csv\")","fc96ce06":"sns.countplot(x ='Sex', hue = \"Survived\", data = trainData)\n \n# Show the plot\nplt.show()\n","6122cdaf":"sex = np.where(trainData['Sex'] == 'female',1,0)\nx = np.c_[np.ones((sex.shape[0],1)), sex]\nx","f8657af0":"y = np.array(trainData[\"Survived\"]).reshape(-1,1)\nprint(x,y)","c28e93e7":"w0 = np.arange(-2,2,0.1)\nw1 = np.arange(-2,2,0.1)","35ba98e7":"m = sex.shape[0]\ncostGrid = []","5f46d941":"for i in range (len(w0)):\n    costRow = []\n    for j in range(len(w1)):\n        y_pred = np.dot(x, [[w0[j]],[w1[i]]])\n        residuals = y_pred - y\n        currentCost = np.sum(residuals ** 2) \/ (2 * m)\n        costRow.append(currentCost)\n    costGrid.append(costRow)\ncostGrid\nW0, W1 = np.meshgrid(w0, w1)\nplt.contourf(W0, W1, costGrid, 250, cmap='RdGy')\nplt.colorbar();","a042eb8e":"cost = []\nw = np.zeros((x.shape[1], 1))\npercentageChangeOfCost = -10000000\nnoOfIterations = 1\nalpha = 0.001\nthreshold = -0.0001\nstop = False\ncostsList = []\n","50a2ed54":"while (not stop):\n    cost = []\n    w = [[0],[0]]\n    percentageChangeOfCost = -10000000\n    noOfIterations = 1\n    print(alpha)\n    while percentageChangeOfCost < threshold:\n        y_pred = np.dot(x, w)\n        residuals = y_pred - y\n        currentCost = np.sum(residuals ** 2) \/ (2 * m)\n        if noOfIterations > 1:\n            percentageChangeOfCost = 100 * (currentCost - cost[noOfIterations-1-1]) \/ currentCost\n        if percentageChangeOfCost > 0:\n            print(\"stop\")\n            stop = True\n            break\n        gradient_vector = np.dot(x.T, residuals)\n        w -= (alpha \/ m) * gradient_vector\n        cost.append(currentCost)\n        noOfIterations += 1\n    if (not stop):\n        currentCostsListItem = [alpha, cost]\n        costsList.append(currentCostsListItem)\n        alpha *= 3\n        wFinal = w\n    print(noOfIterations, percentageChangeOfCost, currentCost, w)\ncostsList","538218e6":"for index in range (len(costsList)):\n    plt.plot(costsList[index][1])","963fbf7c":"plt.scatter(sex, y)\nxLinRegPlot = np.arange(0,1.1,0.1)\nplt.plot(xLinRegPlot, np.array(wFinal[0] + wFinal[1] * xLinRegPlot))","9dc19951":"sexBinary = np.array([[1, 1],[0, 1]])\nsurvived = np.dot(sexBinary.T, wFinal)\nplt.bar(['male', 'female'], survived.T[0], color ='green')\nfor index, value in enumerate(survived):\n    plt.text(index - 0.3, value\/2, str(value), fontsize=15, color=\"white\")\n\n","4e18ec77":"cost = []\nw = np.zeros((x.shape[1], 1))\npercentageChangeOfCost = -10000000\nnoOfIterations = 1\nalpha = 0.001\nthreshold = -0.0001\nstop = False\ncostsList = []","791d0308":"while (not stop):\n    cost = []\n    w = [[0],[0]]\n    percentageChangeOfCost = -10000000\n    noOfIterations = 1\n    print(alpha)\n    while percentageChangeOfCost < threshold:\n        y_pred = sigmoid(np.dot(x, w))\n        residuals = y_pred - y\n        currentCost = np.sum(residuals ** 2) \/ (2 * m)\n        if noOfIterations > 1:\n            percentageChangeOfCost = 100 * (currentCost - cost[noOfIterations-1-1]) \/ currentCost\n        if percentageChangeOfCost > 0:\n            print(\"stop\")\n            stop = True\n            break\n        gradient_vector = np.dot(x.T, residuals)\n        w -= (alpha \/ m) * gradient_vector\n        cost.append(currentCost)\n        noOfIterations += 1\n    if (not stop):\n        currentCostsListItem = [alpha, cost]\n        costsList.append(currentCostsListItem)\n        alpha *= 3\n        wFinal = w\n    print(noOfIterations, percentageChangeOfCost, currentCost, w)\ncostsList","2ab34658":"sigmoid(np.dot(sexBinary.T, wFinal))","202b6a37":"plt.plot(np.arange(-2,2.1,0.1),sigmoid(wFinal[0]+np.arange(-2,2.1,0.1)*wFinal[1]))\nplt.plot(np.ones(3)*0,np.arange(0,1.5,.5))\nplt.plot(np.ones(3)*1,np.arange(0,1.5,.5))\nplt.plot(0,sigmoid(np.dot(sexBinary.T, wFinal))[0],'ro')\nplt.plot(1,sigmoid(np.dot(sexBinary.T, wFinal))[1],'ro')","f8b3459d":"sexBinary = np.array([[1, 1],[0, 1]])\nsurvivedL = sigmoid(np.dot(sexBinary.T, wFinal))\nplt.bar(['male', 'female'], survivedL.T[0], color ='green')\nfor index, value in enumerate(survivedL):\n    plt.text(index - 0.3, value\/2, str(value), fontsize=15, color=\"white\")\n","27606dee":"# Grid Search","a1c42ea1":"## Plot of Cost Function","5e6c3186":"## Inintilization of Variables","6a0cb205":"* ## Enumeration of sex\n* ## adding x0 = 1 to input sex","0573e580":"## Converting output y from row to column vector","4af3df1c":"## Initializing Variables","d3cbca5d":"# Plotting Input Data","28ef4ec0":"* # Plotting Logisitic Regression Prediction","b945b2cb":"# Logisitc Regression","0b5b9a7b":"# Importing Data","d1aeadf2":"## Gradient Descent","46c237a7":"## Initializing the Different Values of Parameters","159b0c7f":"# Gradient Descent","da5d3662":"## Gradient Descent Algo","24fa02b8":"# Plotting Predictions","2b638c58":"## Sigmoid","80fd8372":"# Linear Regression Plot","1b6770cf":"# Importing Packages","57138264":"# Processing Input and Output\n","625e7aa8":"# Functions"}}