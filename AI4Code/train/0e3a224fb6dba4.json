{"cell_type":{"30919dab":"code","e42ff544":"code","1d6650e3":"code","6ca33acb":"code","720cd6d6":"code","96b142e6":"code","7cc1e73b":"code","99ed452c":"code","3f2b980a":"code","282564d6":"code","508e733e":"code","8aeff4f9":"code","49c2a593":"code","e46a1b38":"code","64f8a140":"code","f40247da":"markdown","9ac1b935":"markdown","2a7905a5":"markdown","30e62243":"markdown","8e3a1537":"markdown","80b94cba":"markdown","61ab34be":"markdown","e89bca0f":"markdown","441b1e9d":"markdown","b20c6fbe":"markdown"},"source":{"30919dab":"! apt update\n! apt install -y python3-dev zlib1g-dev libjpeg-dev cmake swig python-pyglet python3-opengl libboost-all-dev libsdl2-dev libosmesa6-dev patchelf ffmpeg xvfb\n! pip install xvfbwrapper\n\n!pip install stable-baselines3[extra]\n!pip install Box2D\n!pip install box2d-py\n!pip install gym[all]\n!pip install gym[Box_2D]","e42ff544":"from IPython.display import clear_output\n\nclear_output()\n\nfrom xvfbwrapper import Xvfb\nvdisplay = Xvfb(width=1280, height=740)\nvdisplay.start()\n\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nfrom matplotlib import animation, rc\nfrom IPython.display import Math, HTML\n\nfrom pylab import rcParams\n\nrcParams['figure.figsize'] = 5, 3\n\n\nimport os\nimport gym\nfrom stable_baselines3 import DQN\nfrom stable_baselines3.common.vec_env import DummyVecEnv\nfrom stable_baselines3.common.evaluation import evaluate_policy\nfrom stable_baselines3.common.callbacks import EvalCallback, StopTrainingOnRewardThreshold","1d6650e3":"environment_name = \"LunarLander-v2\"\nenv = gym.make(environment_name)","6ca33acb":"print(env.action_space)\nenv.action_space.sample()","720cd6d6":"print(env.observation_space)\nprint(env.observation_space.sample())","96b142e6":"def render_frames(env, num_frame=50):\n    env.reset()\n    frames = []\n    for i in range(num_frame):\n        _, _, done, _ = env.step( env.action_space.sample() )\n        if done:\n            env.reset()        \n        frames.append(  env.render(mode=\"rgb_array\") )\n        \n    return frames\n\ndef create_animation(frames):\n    rc('animation', html='jshtml')\n    fig = plt.figure()\n    plt.axis(\"off\")\n    im = plt.imshow(frames[0], animated=True)\n\n    def updatefig(i):\n        im.set_array(frames[i])\n        return im,\n\n    ani = animation.FuncAnimation(fig, updatefig, frames=len(frames), interval=len(frames)\/10, blit=True)\n    display(HTML(ani.to_html5_video()))    \n    plt.close()    \n    \n    return ani","7cc1e73b":"obs = env.reset()\nani = create_animation(render_frames(env, 300))","99ed452c":"log_path = os.path.join('Training', 'Logs')\nsave_path = os.path.join('Training', 'Saved Models')","3f2b980a":"stop_callback = StopTrainingOnRewardThreshold(reward_threshold=300, verbose=1)\neval_callback = EvalCallback(env, \n                             callback_on_new_best=stop_callback, \n                             eval_freq=20000, \n                             best_model_save_path=save_path, \n                             verbose=1)","282564d6":"env = gym.make(environment_name)\nenv = DummyVecEnv([lambda: env])\nmodel = DQN('MlpPolicy', learning_rate = 0.001, gamma = 0.99, env=env, verbose=0)","508e733e":"model.learn(total_timesteps=2000000, callback=eval_callback)","8aeff4f9":"best_model_path = os.path.join('Training', 'Saved Models', 'best_model')\nmodel = DQN.load(best_model_path, env)","49c2a593":"print(\"Mean of rewards over 10 trials  : \" + str(evaluate_policy(model, env, n_eval_episodes=10, render=True)[0]))\nenv.close()","e46a1b38":"def render_frames_with_env(env):\n\n    frames = []\n    \n    obs = env.reset()\n    for i in range(500):\n      action, _states = model.predict(obs)\n      obs, rewards, done, info = env.step(action)\n\n      frames.append(  env.render(mode=\"rgb_array\") )\n      if done:\n        env.reset()\n                \n    return frames\n\ndef create_animation(frames):\n    rc('animation', html='jshtml')\n    fig = plt.figure()\n    plt.axis(\"off\")\n    im = plt.imshow(frames[0], animated=True)\n\n    def updatefig(i):\n        im.set_array(frames[i])\n        return im,\n\n    ani = animation.FuncAnimation(fig, updatefig, frames=len(frames), interval=20, blit=True)\n    display(HTML(ani.to_html5_video()))    \n    plt.close()    \n    \n    return ani","64f8a140":"ani = create_animation(render_frames_with_env(env))","f40247da":"**Try with random input**","9ac1b935":"# Create the model","2a7905a5":"**Training**","30e62243":"**Space of the env**","8e3a1537":"**Actions of the env**","80b94cba":"# IMPORT","61ab34be":"### ENV","e89bca0f":"# Evaluate the model","441b1e9d":"**Load a model**","b20c6fbe":"**Fonction to create animation**"}}