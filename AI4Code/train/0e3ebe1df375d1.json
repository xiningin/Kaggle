{"cell_type":{"0584c5e6":"code","7803e476":"code","f8c50231":"code","896f29b8":"code","677d4176":"code","62ea3176":"code","9b8b2da0":"code","9b56cb52":"code","016b8fb7":"code","474d6718":"code","b8348f03":"code","82ca61ed":"code","e3e4fed5":"code","1bd337ca":"code","1d45e6b4":"code","952c9b10":"code","b3fa88f2":"code","9f61fac5":"code","06592368":"markdown"},"source":{"0584c5e6":"import pandas as pd\nimport numpy as np","7803e476":"dataset = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","f8c50231":"dataset.head()","896f29b8":"dataset.isnull().sum()","677d4176":"dataset.shape","62ea3176":"dataset['diagnosis']=np.where(dataset['diagnosis']=='M',1,0)","9b8b2da0":"X=dataset.iloc[:, 2:-1].values\ny=dataset.iloc[:, 1].values","9b56cb52":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","016b8fb7":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F","474d6718":"X_train=torch.FloatTensor(X_train)\nX_test=torch.FloatTensor(X_test)\ny_train=torch.LongTensor(y_train)\ny_test=torch.LongTensor(y_test)","b8348f03":"class ANN_Model(nn.Module):\n    def __init__(self,input_features=30,hidden1=100,hidden2=100,out_features=2):\n        super().__init__()\n        self.f_connected1=nn.Linear(input_features,hidden1)\n        self.f_connected2=nn.Linear(hidden1,hidden2)\n        self.out=nn.Linear(hidden2,out_features)\n    def forward(self,x):\n        x=F.relu(self.f_connected1(x))\n        x=F.relu(self.f_connected2(x))\n        x=self.out(x)\n        return x","82ca61ed":"torch.manual_seed(20)\nmodel=ANN_Model()","e3e4fed5":"loss_function=nn.CrossEntropyLoss()\noptimizer=torch.optim.Adam(model.parameters(),lr=0.01)","1bd337ca":"epochs=500\nfinal_losses=[]\nfor i in range(epochs):\n    i=i+1\n    y_pred=model.forward(X_train)\n    loss=loss_function(y_pred,y_train)\n    final_losses.append(loss)\n    if i%10==1:\n        print(\"Epoch number: {} and the loss : {}\".format(i,loss.item()))\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()","1d45e6b4":"import matplotlib.pyplot as plt\n%matplotlib inline\nplt.plot(range(epochs),final_losses)\nplt.ylabel('Loss')\nplt.xlabel('Epoch')","952c9b10":"predictions=[]\nwith torch.no_grad():\n    for i,data in enumerate(X_test):\n        y_pred=model(data)\n        predictions.append(y_pred.argmax().item())\n        print(y_pred.argmax().item())","b3fa88f2":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predictions)\ncm","9f61fac5":"from sklearn.metrics import accuracy_score\nscore=accuracy_score(y_test,predictions)\nscore","06592368":"Creating Model with Pytorch"}}