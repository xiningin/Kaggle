{"cell_type":{"0555ad6b":"code","4afa99d2":"code","60bb4279":"code","6621a612":"code","5504f05c":"code","cc2dce2e":"code","77823e67":"code","ab5d4f61":"code","f6c6b890":"code","d82b4a11":"code","4f8297ee":"code","46172639":"code","c4026d50":"code","b2487c7f":"code","7f494718":"code","9f0fa846":"code","3b823625":"code","dc7135f3":"code","7dc2ddec":"markdown","1752d43a":"markdown","a300fcad":"markdown","1ed4985f":"markdown","46923742":"markdown","0c5a5928":"markdown","69be222e":"markdown","df51f77e":"markdown","efe160fb":"markdown","38bd6ae6":"markdown","c256c60c":"markdown","c8da262c":"markdown","8afdd437":"markdown","0f932767":"markdown","a5f5ea1b":"markdown","bc61c78e":"markdown","aacc96d1":"markdown","66d82d46":"markdown","c74d69b7":"markdown","472595f7":"markdown","3c4bc8b8":"markdown","925ea425":"markdown","4ed35e76":"markdown","1652a5f4":"markdown"},"source":{"0555ad6b":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4afa99d2":"# population Dataset\npopulation_df=pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')\npopulation_df.head()","60bb4279":"# information about population Dataframe\npopulation_df.info()","6621a612":"# number of categories in Species Column\npopulation_df.Species.unique().tolist()","5504f05c":"# Removing 'Iris-versicolor' Observations from population dataframe\nsub_population_df=population_df[population_df['Species']!='Iris-versicolor']\nsub_population_df.Species.unique().tolist()","cc2dce2e":"# sample size = 30 \nnp.random.seed(42)\nsample_df=sub_population_df.sample(30)","77823e67":"# let's simulate the sample 1, 5, 7, 10 and check the theroms above\nsample_1=sample_df[sample_df['Species']=='Iris-virginica']['SepalLengthCm']\nfor n in [1, 10, 50, 200, 500, 1000, 2000, 10000]:\n    means=[]\n    for _ in range(n):\n        size=len(sample_1)\n        bootsamp=np.random.choice(sample_1, size=size)\n        means.append(bootsamp.mean())\n    plt.hist(means)\n    plt.title('n={}'.format(n))\n    plt.show()\n    print('for n={} \\n'.format(n))\n    print('sample mean= ', np.mean(means), 'population mean= ',population_df[population_df['Species']=='Iris-virginica']['SepalLengthCm'].mean())\n    print('sample std= ', np.std(means), 'population mean= ',population_df[population_df['Species']=='Iris-virginica']['SepalLengthCm'].std()\/np.sqrt(len(sample_1)))","ab5d4f61":"#let's consider another example to see a case where the Central Limit Theorem doesn't work...(standard Deviation)\nfor n in [1, 10, 50, 200, 500, 1000, 2000, 10000]:\n    stds=[]\n    for _ in range(n):\n        size=len(sample_1)\n        bootsamp=np.random.choice(sample_1, size=size)\n        stds.append(bootsamp.std())\n    plt.hist(stds)\n    plt.title('n={}'.format(n))\n    plt.show()\n    print('for n={} \\n'.format(n))\n    print('sample mean= ', np.mean(stds), 'population mean= ',population_df[population_df['Species']=='Iris-virginica']['SepalLengthCm'].mean())\n    print('sample std= ', np.std(stds), 'population mean= ',population_df[population_df['Species']=='Iris-virginica']['SepalLengthCm'].std()\/np.sqrt(len(sample_1)))","f6c6b890":"# let's build A 95% Confidence Interval\nmeans=[]\nfor i in range(10000):\n    bootsamp=sample_1.sample(len(sample_1), replace=True)\n    means.append(bootsamp.mean())\nmeans=np.array(means)\nprint('upper bound: ', np.percentile(means, 97.5), 'lower bound: ',np.percentile(means, 2.5))","d82b4a11":"sample_2=sample_df[sample_df['Species']=='Iris-virginica']\nsample_3=sample_df[sample_df['Species']=='Iris-setosa']\nactual_diff=sample_2['SepalLengthCm'].mean()-sample_3['SepalLengthCm'].mean()\nactual_diff","4f8297ee":"# Bootstraping\ndiffs=[]\nfor _ in range(10000):\n    bootsamp_2=sample_2['SepalLengthCm'].sample(len(sample_2), replace=True)\n    bootsamp_3=sample_3['SepalLengthCm'].sample(len(sample_3), replace=True)\n    diffs.append(bootsamp_2.mean() - bootsamp_3.mean())\nplt.hist(diffs)\nplt.show()","46172639":"# Now let's Simulate The Null Values\nnull_vals=np.random.normal(0, np.std(diffs), len(diffs))\nplt.hist(null_vals)\nplt.show()","c4026d50":"# let's Calculate p-value\np_value=(null_vals<actual_diff).mean()\nprint(p_value)\nplt.hist(null_vals)\nplt.axvline(p_value, color='red')\nplt.show()","b2487c7f":"actual_diff_1=sample_2['SepalWidthCm'].mean()-sample_3['SepalWidthCm'].mean()\nactual_diff_1","7f494718":"# Bootstraping\ndiffs=[]\nfor _ in range(10000):\n    bootsamp_2=sample_2['SepalWidthCm'].sample(len(sample_2), replace=True)\n    bootsamp_3=sample_3['SepalWidthCm'].sample(len(sample_3), replace=True)\n    diffs.append(bootsamp_2.mean() - bootsamp_3.mean())\nplt.hist(diffs)\nplt.show()","9f0fa846":"# Now let's Simulate The Null Values\nnull_vals=np.random.normal(0, np.std(diffs), len(diffs))\nplt.hist(null_vals)\nplt.show()","3b823625":"# let's Calculate p-value\np_value=(null_vals>actual_diff_1).mean()\nprint(p_value)\nplt.hist(null_vals)\nplt.axvline(p_value, color='red')\nplt.show()","dc7135f3":"new_alpha=0.05\/2\nnew_alpha","7dc2ddec":"> number of observations 150, no missing values, 4 numerical-Continuous Values columns and 1 Categorical Column.","1752d43a":"> Sampling Distribution doesn't work for Standard Deviation, Central Limit Therom and Law of Large Numbers don't acheive here.","a300fcad":"### Bonferroni Correction \n**When performing more than one hypothesis test, your type I error compounds. In order to correct for this, a common technique is called the Bonferroni correction. This correction is very conservative, but says that your new type I error rate should be the error rate you actually want divided by the number of tests you are performing. **","1ed4985f":"**H_0: Mu(v)-Mu(s)<=0**\n\n**H_1: Mu(v)-Mu(s)>0**","46923742":"### Confidence Intevals\n**is a type of estimate computed from the statistics of the observed data. This proposes a range of plausible values for an unknown parameter**\n> We can use bootstrapping and sampling distributions to build confidence intervals for our parameters of interest.\n\n> By finding the statistic that best estimates our parameter(s) of interest (say the sample mean to estimate the population mean or the difference in sample means to estimate the difference in population means), we can easily build confidence intervals for the parameter of interest.","0c5a5928":"#### Traditional Confidence Interval Methods\n> is that these methods are no longer necessary with what is possible with statistics in modern computing, and these methods will become even less important with the future of computing.\n\n>with Large Sample size Bootstraping will give the same results of Traditional Methods.","69be222e":"> After Removing the values of 'Iris-versicolor', let's take a sample from the population dataframe\nand begin the first part of our Analysis.","df51f77e":"> number of Unique Values in Species Column is 3 Values ('Iris-setosa', 'Iris-versicolor', 'Iris-virginica')\nlet's take another dataframe has no values of 'Iris-versicolor'","efe160fb":"#### 95% Confidence Interval\n![95%](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSl28q1X7WDmi8FxR_CgToVStcCxSRLe6Ec1g&usqp=CAU)","38bd6ae6":"# Confidence Interval, Hypothesis Testing, Alpha Parameter, Bootstraping & Bonferroni Correction\n![Stats](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxIQEA8QEBAVFRAPEBAQDhUWEBMSEhAVFRMfFhURFhUYHSggGBsnHRgVITIhJiwrLi4vFx8zODMsNygtLisBCgoKDg0OGRAQGismICUrMC8tLy0wLy0vLy0tNS0tLS0tLS0tLS0tLS0tLS0tLS0rLS0tLSstLy4tLS0vLS0tNf\/AABEIAOcA2gMBIgACEQEDEQH\/xAAcAAEAAQUBAQAAAAAAAAAAAAAAAwECBAUGCAf\/xABEEAABAwICBAcPAgUDBQAAAAABAAIDBBEFEiExUXEGBxMiMkFhFBYzNUJTVHOBkpOys9HScpEjYoKhsUNSwRUlNKLh\/8QAGgEBAQEBAQEBAAAAAAAAAAAAAAEDAgQFBv\/EACoRAQEAAgEDAQgCAwEAAAAAAAABAhExAxIhUQQTIjJBYXGBFEIFofHw\/9oADAMBAAIRAxEAPwD7iqXQq0lBddUzKMuVpvsKOtJsyZlBzthVOdsKGmRmTMsfnbCnO2FDTIzJmWPzthTnbChpkZkzLH52wpzthQ0yMyZlj87YU52woaZGZMyx+dsKc7YUNMjMmZY\/O2FOdsKGmRmTMsfnbCnO2FDTIzJmWPzthTnbChpkZkzKDnbCqjNsKGk90uobnrCvaUTSRFQKqIoVE4qRyhvzhvR1HzXhnwsrKaunhhmyxsEWUclG62aNrjpLSdZK0vf7iPpA+DD+Kpxj+M6ndD9Fq5payTTy5ZXd8um7\/cR9IHwYfxTv9xH0gfBh\/Fcyiuo57r6um7\/cR9IHwYfxTv8AcR9IHwYfxXMomod19XTd\/uI+kD4MP4p3+4j6QPgw\/iuZRNQ7r6um7\/cR9IHwYfxTv9xH0gfBh\/Fcyiah3X1dN3+4j6QPgw\/inf7iPpA+DD+K5lE1Duvq6bv9xH0gfBh\/FO\/3EfSB8GH8VzKJqHdfV03f7iPpA+DD+Kd\/uI+kD4MP4rmUTUO6+rpu\/wBxH0gfBh\/FO\/3EfSB8GH8VzKJqHdfV03f7iPpA+DD+Kd\/uI+kD4MP4rmUTUO6+rpu\/3EfSB8GH8U7\/AHEfSB8GH8VzKJqHdfV0w4e4h6QPgw\/ivsx0FedG6xvC9FzHSNy4zjbo23e0jSrlYxXrhpVrlB5Q3qdyx\/KG9HUfHOMfxnU7ofotXNLpeMfxnU7ofotXNLacPHlzRERVBERARSRQlweRbmNzG+y9tCjV0mxEUtPAZHBotc316tAukm\/BbpEiIooiujZmcGjW4gD2mySsyuc062kg7NBsrpNrURFFEUlRCWOym1wAdGrSLqNWzXhJdiIiiiIiCrdY3heip9Y3Lzq3WN4XomfpDcuM2\/Q5qSNSKONSLNrVrlj+UN6yHLH8ob0WPjnGP4zqd0P0Wrml0vGP4zqd0P0WrmltOHjy5oiIqgiIgyqM8yo9UfmCwY3XWbSdCo9SfmCwIV1lxHGPNTLMwnwzdz\/kKw1l4T4Zu5\/yFXp\/NPyZ\/Lfw18b1KseFZC4dpaTwkf62fMFHWP8A40vrH\/MpKXwkfrGfMFBWeGl9Y\/5l1\/X9uP7fpchRYVTicbCWknMNBAaf+VzbppJbw2mMO\/jH9LPkCgC1WJ8IGySF7IzazRziAdAA6rrMoJy9jXOsC65sOodSuWUuV0mOGWOM2yURFAREQVbrG8L0TP0huXnZusbwvRM\/SG5cZt+hzUkakUcakWbWrXLH8ob1kOWP5Q3osfHOMfxnU7ofotXNLpeMfxnU7ofotXNLacPHlzRERVBERBk0nQqPUn5gsCFbeko35Jbi3KR5W33307FpauUU5yy6HawBpJG0di59908tSWbjXL2Tr9Od+eFkrJW8pKNrADbn20nZfWAuIkxGWW4hblb\/ALuv99QXYYZibZQ1rnAS25zdpA0lu0ayvH7ZepcZ2b\/T63+Hx6E6mXvtb143\/vn9MfFaJrAJGCwuA4dWnUQsIFQ8JsdaWtjhOYZg6Rw6NhqaD16dN+xQ4dVtkGg6RrHWFp7Jc\/dzv5eb\/KY9L39vR1r6643\/AO\/22NL4SP1jPmCgrPDS+sf8ynpfCR+sZ8wUFZ4aX1j\/AJl7f6\/t8r+36XLRY+5hcAPCDQbbNh7Vk4hiVjycWl50EjTl7B2\/4WNBSBgJdpkN7nXb\/wC9qyvnw3xnb5rU5TexFjexHWD1rf0DjoHUNAUnCSmvVOcBrZHftPJjSr6GKwV7O22Ocup3yVmhERVyIiIKt1jeF6Jn6Q3Lzs3WN4XomfpDcuM2\/Q5qSNSKONSLNrVrlj+UN6yHLH8ob0WPjnGP4zqd0P0Wrml0vGP4zqd0P0WrmltOHjy5oiIqgpKcjOy+rM2\/7qNUIUs3NOsMu3KX0dMud4WtjJgzAF4z2\/Tovf22UlJWyiOo51+ShLo7i9jcD2hc+C+V5fI4ucdZP+AOoL5\/Q9iz6ecyys0+\/wC3f5jpdfoXp4S7ut7+n1TtudA1LY4FT2nYeyT5Co4Y7BbDCfDN3P8AkK+n0\/mn5fm+p8t\/Dm46NQT0Jac0ZyuHs\/ZbiFSSRArjW2kysZXB2nfIxssugh12Aa3ZT0iOrSFHwlw6QNdJCek4mUaiA46S07Ft8JmDo2tB0sAa4dejQCocfrGxwvBPOkaWMHWb6L7gvlfyOt77s39eH6n+D7J\/D95qb7d7+\/8A3xpydLTiMaNLjrP\/AAOxZcUF9JVtFHfSVn20L6un5a3dX42y85\/TH8gUcbbBT414c\/pj+QKFq06nz38s8PliqIi4diIiCrdY3heiZ+kNy87N1jeF6Jn6Q3LjNv0OakjUijjUiza1a5Y\/lDeshyx\/KG9Fj45xj+M6ndD9Fq5pdLxj+M6ndD9Fq5pbTh48uaIiKoIiIMmjjLm1AAJJhIAAuTzgsSCgkH+k\/wBx32Vxe5ulriD2Ej\/CjFXL5x\/vu+673jZJXGru6ZXcknm3+477LKwyneJWkscBZ+ktIHRK1vdsnnH++77qjqyXzj\/fd91ccsZZfKZTKzS6Kjk80\/3HfZT9yyebf7jvssNtXL5x\/vu+6k7tk84\/33fdc\/D93XxfZNFQycrE7I8WkYScrhozC\/sWvxDC5XVEzuTeQZH2ORxFsxtY7Fkmsk84\/wB933UYqpb+Ef8AEd91d4aT409PQSNHg3+477KU0knm3+477KAVknnH++77p3bJ5x\/vu+6nw\/dfi+zMxemeZiRG4jKzSGkjohRNpJPNv9x32WIauXzj\/fd91eKyTzj\/AH3fddZXG23y5kyk0ke0g2III1gixCorBIXG5JJOsk3JV6zaCIiCrdY3heiZ+kNy87N1jeF6Jn6Q3LjNv0OakjUijjUiza1a5Y\/lDeshyx\/KG9Fj45xj+M6ndD9Fq5pdLxj+M6ndD9Fq5pbTh48uaIiKoIiICplVUQUyhMoVUQUyhMoVUQUyhMoVUQUyhMoVUQUyhMoVUQUAVURAREQVbrG8L0TP0huXnZusbwvRM\/SG5cZt+hzUkakUcakWbWrXLH8ob1kOWP5Q3osfHOMfxnU7ofotXNLpeMfxnU7ofotXNLacPHlzRERVBERAJVA4HUR+6zsEmdHU07mOIcJowCNelwB\/sSPavoHCbEA1+Isq6uGWB0T2UtM0B08cpAyOPMGSxub3OsbFLXUm4+YB42j91cTZfXKeskkfhokqmFk1DG+alexjn1bjG4kjMLaTbrHRXPcX9HIw1dXHBmdHIynijL2jKHSAzDM8gXay37qdy9jhCVQuG1d2zDe4JMZljYDLSCE0ZLQ4RMnef4rQdBLW2F\/5TtWtj4X1jYhLlDpbywNqnRguDXta4wggAFwIDhe+vUrtO3XLlc42j91UOG1d9wx4UVUPIMZLzZ8NppH3aLiRznEzNItZ3NG0di2eMynuuunNnyUOHxyUocA5sbni7pQ3rItf2qbXtfL7pdbytxWprYI2SsMr+6mtinLADmcwgUuYNA0kh1r9X7dbwywd3cDoxFZmGmDkX5mkzRuYGzGwJLbP0m4GpXadu3zUOB61Vddwvq5ZaTCWuc52eBzyNZc8ENDtHXYke1cirEs0IiIgiIgq3WN4XomfpDcvOzdY3heiZ+kNy4zb9DmpI1Io41Is2tWuWP5Q3rIcoPKG9Fj43xj+M6ndD9Fq5pdLxj+M6ndD9Fq5pbTh48uaIiKoIiIJ6KpMUjJWhpdG4OaHtDm3Gq7Tr2+xTYviT6qV00gYHuADsjMgdbyiOs9vYFNwbp4JKqFlU\/LA5x5Q5so6JLWl3kgmwv29Wtb\/ABClp6csdV4Y6ICUZOSmfLDURkG7c5dbNqIsQT2alNupPDT1XCaeSSmlyxMfS2EBZC1mVo1Rna0abDquVFimPy1EPIPZCI+VdPzIgw8o6+Z1+3MV0MzsPjpaKpfhwy1Tqlr2tqJiWck4taW3cAbm172WOeD8P\/TtX\/cO5u79bvAcpltlvbo87Ve6nhdX1a5\/CupMrJRybXMi5CzYgGyReae03Dmjq2XKxMSxuWcRsc2NsUbszIo4mxxBx1uLRrJ7V0cD8Pkpq6pZhwtSmlDA6omBfyr8ji6ziBY3ta6gnjo5KGrqYqQMyVDIYS6SUvY17QcxGcgkEm3sTx6Gr6tLiuOyVL4Xyxw3gAawNhDWlgIIjcPKYLGzdXOdtU8\/CqpdUMqQWMmawxksiAEjD5Dwb5hvW\/xTCaWNj3R0RkouRJjrIqh0sgfkvney9mjNoIIsP7COJ2HyUtbVMw4ZaZ9O1jXVEwc8SuDXF1nEC2nVdNw1fVpTwpnzRFrIGthkMscbKdjIhJlLeVLRrcAdBvoUNLwgljlqZWsiLqsObODEC0hxu9oF9AJ17VuzSUk9HNLBShj3VrKWBzpJS5gkAIc4ZyLgutuCsrxh9PUuo5KZ3JRfw5anlZOXz5L8o1g5tr2GW1uvsTwavqxIuGdQ0RAR0\/8AAAbCe5m3jA\/2m+j2LnnuuSTrJJPtXZ4ZhUBpaWSOjFXmaDiDmzvE8Dr85jImuB0C9tBvYbbrj6rJyknJ5uTzv5PN0smY5c3ba11Yl39USIirkREQVbrG8L0TP0huXnZusbwvRM+sblxm36HNSRqRRsUiza1a5Q25w3qcqF21Fj4zxj+M6ndD9Fq5pfT+Mbgo+c920zS54aBPGBdzg0WD2jrIGgjrAFu35gtsb4eTOWUREVciIiDNweubBMyV8TZWtzB0btAcHNLTpsbHTcG3UtjW41CKR1HSwyNjklbK8yyiQgjU1gAAHVp1rQoml231Xi1PJSUdKYpR3M9xe7lGc8SOzSgc3Qb3y7Ou63Hf6e6c+WTuPk8nc148vQyWvlvl67XvfrtoXEopqL3VvaLFaeOlrabkpj3U5hY7lGcwROzxA83Sb9Lb1WVKTGImUEtIY5DJJKJs+dmQOb0BltfLYC4vt0haNE0m3Vx8J6eN89RDSOZUTxOie3lh3M3MLFwYGgnVfKdGk71r8OxaGOhqqV0chfUlhzh7A1pjOaPQW3tfXtGqy0iJo7q3tLjMUdC6lDJBK6cVAkD2ZWyN0Ms3Le1gPb19SzH8JKZ83dclEXVducOVHcz35cvKujLSe3Le2jXfSuWRNHdXSYZjtNGaWV9K\/uijYxjHRTCNk2S9nSjLe5vpIvfr0aFoa2pMsssrgA6WR8jgNQL3FxA7NKhRXRsRERBERBVusbwvRU2sbl8h4DcEn1cjJpWltKxwcSRblyD0G\/y7TvA06vrxNys869HRlnlexSK1quXDuqFWuCvVCEEGkaly\/CfgVBW5pYiIak6SQOZIf527f5hp23XWuaonMVl0tky5fBcZwWejfkqIy2\/RdrY\/9LtR3a9oC169C1MbJGGOZjZI3aHBzQ4HeCuFx\/i2a68lDJbr5J5Jbua\/WNzr7wu5n6sMulZw+aIsrEcOmp38nPE6N\/UHDX2tOpw7RdYq7ZCIiAiIgIiICIiAiIgIiICK+GJz3BjGlz3GzWtaXOcdgA0ldxgHFvLJZ9Y\/kY9eRpDpTvPRZ\/c9gUt0sxt4cVR0kkzxHExz5HamtFzv7B26l9H4M8XbY8steQ52tsIN2D9bvLPYNG9dhheGwUjOTpogwHpHW53a5x0u9qzA0nSVxc2+PS15oNQa0WaAAABYADUN3YpGNVWtV4C4a2gVURHIiIgoqEK5EETmKMstpCyLKhCOpWFVwRzMMc8bZGHWHNBG+x6+0Licb4tY33fRS5T5uQlzNwf0m+2679zVG5qstiXHHJ8GxbBqikdlqIXMubNcRdjv0vGg7tawF6GkcHNLZGh7XCzgQCCNhB0Fcri\/ACjqLugJgkPU3TGT6s6v6SF3M\/Vjl0bOHyNF0uMcBq2mueT5WMeVFd59rOkPYCO1c0esdY0HsOxd7ZWWciIiIIiICLcYPwYq6uxhgdkP+o7mR22hx6X9N13GEcW0MdnVkxkOvk2XYzcXdJ3syqXKR1MLeHzaio5JniOGNz3nyWtLjvNtQ7Su4wTi0kdZ9ZII26+TYQ6TcXdFvszL6FRQxQN5OnibGzY1oF+021ntKm16yuLm2x6MnLDwnCqekblpoWtvoc7W936nHSVm2J1q9rVIAuGvicLGsUgCqAqom1LKqIiCIiAiIgIiILSVY5yksqFqDHc9QvkKzDGrDAg175Ssd8xW0dSqN1EEXbXNxN7Ou42HSsevZRVf\/lU7S7VnA5w\/rbZw3LZPw4FQuwoIvi8uSreLeGS5pKq3XkeA8brixHtBWkk4uK4OsBE4f7hLo\/uAf7L6KcJUopZALCR9v1n7rrurO9LGuJoeLIizquqaxvWIxf8A932A90rf0GE4bSWMcPKyDy38832gu0N\/pC2LsLubkknaTcq4YSFLla6mGMRy4092rmjs1\/uom1JKzGYUFOzDgo62xI5ismOUqdtEFK2mCJtYyQqZrlUQq8MRFQVcqAKqAiIgIiICIiAiIgIiICIiAiIgKlkRAyqmVEQMqrZEQLKqIgIiICIiAiIgIiICIiD\/2Q==)\n**In This Kernel, I want to share with you Important Concept in Practical Statistics Like Confidence Intervals, Hypothesis Testing, Types of errors, Bootstraping and Bonferroni Corection, and Talking about the differences between it and between Theoritical Statistics.**\n**In this Kernel, I will make some Tests to prove some real evidence.**","c256c60c":"**Now Let's See Which Iris has the Larger Average Sepal Length**","c8da262c":"### Connecting Errors and P-value\n* P-value > alpha ----> Fail to Reject H_0\n* P-value <= alpha ----> Reject H_0\n\n**alpha=0.05**","8afdd437":"### Hypothesis Testing & Types of errors\n**1- Hypothesis Testing**\n> I Love to define it as Translating your question into hypothesis 1 and hypothesis 2, then collecting the data to Answer your question.\n\n![hp](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSD2ekuumqKHGbqB8I1mME8eJfkTfFwHlZ3rg&usqp=CAU)\n\n**Setting Up A Hypothesis Test**\n1. The H_0(null-hypothesis) is true before you collect any data.\n2. The H_0 and H_1(alternative-hypothesis) are competing, non-overlapping hypotheses.\n3. H_1 is what we would like to prove to be true.\n\n> You saw that the statement, \"Innocent until proven guilty\" is one that suggests the following hypotheses are true:\n1. H_0: Innocent\n2. H_1: Guilty\n\n**2- Types of Errors**\n\n*Type I error*\n1. They are denoted by the symbol alpha.\n2. The definition of a type I error is: Deciding the alternative (H_1) while the null(H_0) is True\n\n*Type II Errors*\n1. They are denoted by the symbol beta.\n2. The definition of a type II error is: Deciding the null H_0 is true, when actually H_1 is true.\n\n![errors](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRUo2AL8y_YyryurD-5HXPP1Iuc1946MLQSNg&usqp=CAU)","0f932767":"**Now Let's See Which Iris has the Larger Average Sepal Width**","a5f5ea1b":"### P-value\n**is the probability of observing your statistic (or one more extreme in favor of the alternative) if the null hypothesis is true.**\n> If your parameter is greater than some value in the alternative hypothesis, your shading would look like this to obtain your p-value:\n![pic1](https:\/\/video.udacity-data.com\/topher\/2017\/November\/5a0230ff_screen-shot-2017-11-07-at-2.16.14-pm\/screen-shot-2017-11-07-at-2.16.14-pm.png)\n> If your parameter is less than some value in the alternative hypothesis, your shading would look like this to obtain your p-value:\n![pic2](https:\/\/video.udacity-data.com\/topher\/2017\/November\/5a023164_screen-shot-2017-11-07-at-2.18.27-pm\/screen-shot-2017-11-07-at-2.18.27-pm.png)\n> If your parameter is not equal to some value in the alternative hypothesis, your shading would look like this to obtain your p-value:\n![pic3](https:\/\/video.udacity-data.com\/topher\/2017\/November\/5a02314d_screen-shot-2017-11-07-at-2.17.08-pm\/screen-shot-2017-11-07-at-2.17.08-pm.png)","bc61c78e":"> We are 95% confident, the population mean falls between the bounds that we find.\nand this is True because the population mean equal to 6.587999999999998","aacc96d1":"> WoW, We Saw How it Confirm Our two theroms\n**The Central Limit Theorem actually applies for these well known statistics:**\n1. Sample means\n2. Sample proportions\n3. Difference in sample means \n4. Difference in sample proportions\n** **\n**And it applies for additional statistics, but it doesn't apply for all statistics!**.\n**Like**\n1. variance\n2. Standard Deviation","66d82d46":"## Getting Some Information About the population Dataset","c74d69b7":"> Fail to Reject Null Hypothesis","472595f7":"**I Hope you Enjoy this notebook, Guys**","3c4bc8b8":"### Now Let's Talk about Sampling Distribution\n**Sampling Distribution** *is the distribution of a statistic.*\n**Two important mathematical theorems for working with sampling distributions include:**\n* **Law of Large Numbers**\n* **Central Limit Theorem**\n\n#### 1- Law of Large Numbers\n*The Law of Large Numbers says that as our sample size increases, the sample mean gets closer to the population mean*\n#### 2- Central Limit Therom\n*The Central Limit Theorem states that with a large enough sample size the sampling distribution of the mean will be normally distributed, has a mean approximately equal to the population mean and the standard deviation equal to the population standard deviation divided by the size of the sample*\n![fig](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAS0AAACnCAMAAABzYfrWAAACKFBMVEX\/\/\/\/9\/\/\/\/\/f\/\/\/\/36\/\/\/\/\/\/v4\/\/\/\/\/\/z7+\/v7\/\/z\/+\/\/\/\/\/n\/\/f78\/P\/\/\/v3Q+uTpy7P9\/fPx\/\/8AlEve3t7\/8t\/\/9Nrhx6xyuY3o+u6tflXa6vXv7+\/\/9finajKmbzSt7sxUc6N+fn6\/k3Hx+v+b3be8TU3p6emhoaG8lGrT9ena\/\/AAO3ErY6XIyMgmnFBnwpOrq6uu+NQWikqysrLe+\/Ssw9KKs9\/\/kZYAf0oAPW1cq37RLzf\/7umt0u5bfa69vb3lqa8JjEfhTElDd6yUutbWYmb\/4+GSkpJjY2OIwapzc3PS0tJUVFSLud4nXpixDBfen6FBZ5Ipml3KISfcYWaZAABcrngAQYerwtWKsuT62Nm6AACxOT6kyNP\/w8n9qKrmiovFDAgAKm+IAACWrs9AQEDh1cfgzcGgd1qfbEWweEfvy7vWoHHht4jBhkrbuZKqhVRw0qA5tG+T6Llw3aWH471xuZjL4PTQ2voASol5n8dRcZMma6MAUZ5ZerPR8vn96PbVNUnOSFPoTFbxY2Kn0rnDKzLOAAYLfVT2r7rorqW7HBjjd3vwzc+LpbQjTXL8rKOuPjTafXjMeoKrFyPSdm8sm2tCmnG8\/+r\/pbJdjLavopL\/5MiDpZKixbVmgJZqo+K8i5S8cn78eoDKqalYTz9LMRRFGwAyAABcMAUeDgB6ZVVtj3YATyMAcjEANISpWWfnEy+PdX5inHpvjKzHh4ehZGDHDDnxAAAa90lEQVR4nO2djWPb1LXA75VkWR\/Xauwa2iwStJmDszZ1a5J+haZNAqndJk1smoaWdCQOzfjaYxsw2iUU6ArtlqaFjmaFwDYG29se2x6DN8q\/9865kmX5K7YTpSXUB6pcy7J09dO555577ocIKRZFUWCTT+Bfhmkz2W6SppQKU4iJpPKwgJYCO82eE01alcRM9ET7E6BfSjzKBWgxY+RYk1YliY78JNpzDBJKTzqd7uxMckwjTd2qJIrSP0w606hbJko8jkWSNXWroiikvVMZHoHyp\/R0gqST3OY3dauyACoz3Q+0iGkL7ox3nuhv4ioX8BZc78GzF6iV7WwKsb0tcBxY8b5ygk1xpYmmKeshlIr3OgsbSGggQElQdyUcCN7rLH2HRQzoavi551taWp5\/\/vnnQB4IG\/c6T99doVAfPv\/Ciy+++NJLL7344gsv\/GBLk1Z1EQTB+ulL\/\/Xyyy\/\/7Gcv\/\/znLz+8JdwsilWFCYLR8tDPHww\/+KNfPBgOb3moSWsFCRgMaLWEyQM\/fOEBm1azJFaVsE6NLQ+1WAVaKr3XefruiqpSowWMlYglUQ8AONqkVVVUyaYV5LTEliatlQRoEaClN2nVI2ilkJbBaQWhJCpNWlWlhFZLk9ZKolLGaSlNWrWFqqLg0S2xSWtFUalNS3mgSau2NGk1IqrBaQWA1g+atGoJp\/VQk1Z94pREm1Y40PS3VhKap2VwWnqzVb2SNGk1IlRVS2npTVrVpEmrEXFpBT0lUWx2MVaWPC29SasOyVt5XWzSqkPyMQhXt1qQli3N7oxSER1aRpNWHSI6JZE0adUhot1OtHWLR5qbtKpLnpbSpFWHeOJbzZJYU9y4fIEWcuJyr\/P23ZN8n0+g6W\/VIarkpRXm7cQmrWpSSbeaZbCalNFqUe91lr7DUq5bzcFu1SXvQRTaiQ3Qut+mJZREmgPY51P\/r0umvHz\/pajPR2+AltnZ0xm\/3+YD1U+rRI3MEyfS9xusSr2vJUfgXPVoPBonOEPdnnOGGzNhmqUEv\/dS3LMfrKhb5shwz8gwJJREEqUzTnDOZzQdvevZvbdCS\/qqK9MyT4xET6BOmXEujoal2+96fu+tuLRW8CAUAqiS3EglOrlu4TzidJr0nLjPfAi3zyewUl81KFG6ZwRwxRMjIAmk1Z+MDyfvM8MFtKhD64fVe19HRthIQnEViSNSEj0991udmKcVKNCqdxzE\/YaKrInWfSgN0GJOHAfL4f0a0snPxXBptVSgZegBKHkGEagAwjSNMeEe5PXeS120gmGdKFJra4QL\/FHV+zMKVqduBYmyt+OVgmxrvS+tWyEauAItSilhO04ODnZ3D24e7D54cHBrk9aDut5SlZax49VXX3vttVc3\/\/L1ba9vbtKqrlvIi+3Y\/erO1tatBx\/dG9l58HzkPqXF6qMV3LH7qU1Ia5sc2tF9fm+TVvV51YaoA62d6t6t3dtCwqa1lMT8+pdE2XhtcrGMVoV2ImNGwKF1fnCttAAURhbNRHwN2b5HUi+toOro1lpo2c3xkeETRIkOm+nEWjN\/16VOWkzktMI7G6QVV8y4oihOYMf5g6tgptOkf\/j7WhKZQbluNUgr3pMeSfajhUr09+P\/fG8SaLUnSeKEudFwlVv5lWiFGyqJCokmjpmd7bg+YQIFaSleWhssmOhGmleMBuJiN2TH7sf2NqpbWOCGEwr2GtnCq0ReEjtJYsMtq+rOxahFiyCtHUCrMQ\/iWH\/8BDIyoRj297u6pbBkO0l2bjQXojFaexumlY6b6RGzsMYlA92KdraPEDOZSG44F8Izz2eFaKBN6+Rje8ON0lLKI9LOmuMbcZVQzxyydaFVKhh03bhtpvpmc7pWntOSWMO07LVxoGYVKd3A6+SU975WpkVEDy3aKC0XUFCUNjSuPC01Pwt9S4VZ6EAruAZalMqxCxd+9atftcXk7wUtvQYtI1CgJa+C1lunQea6hiLyhg7o10mLBNaiW6I8NjY\/P\/9x16gsb+juyuKZK9VprcVuUVW++EZbLDbUNSrJG7q3qHiU7vrQIgYFWpZ0Zm4\/FTcyLXdFqRp1IlsTLYK0NOlM19PUUO\/iRA\/f\/d98DEJcT3+L61ZMPtO1n7K7ZLYUsh6R7HyfTw3dctqJa6d1d0YEKHEOy\/R7INAqaIUapyW5tO7K+DgzmTwWJf09Pf0+a1cDtFbfTvTQwvkI\/umX\/QoP\/lod7850krS3x4+Z5jGfxxGX9b76T8vw0JI0jfnZrFaUkZ6RRAJLnOKMIGYK6e8n6WMjSMvnjpK8lddr0PJY+YZoMRKLxSLc35L3dT0dkWVo\/BD\/6sXoyLGe6Amk1Z\/G9zelTRzUr5gnMMitHOv37UJcOK2HHFq6XnmdZo+\/tacxWoxc2LVrbGzXm9vbQpFnesfGxubm5mN+jpYDVP3HqPtyMFMRMJlOYCAbdMtfwyWW0aocgwisjlYIXNJdH29\/y6Y1d\/HI9u2Q9JNWzzBJ98ThjIlOLqbCiNKTiCaix3Ccv38XQimiVW0chNuqbjTSTOXIvq79b7e1QUmUIuCdtrW17TrS5ufk2nSPkk6CMafOu8GgGlH6f3LsJ51KZ6I\/7XOdmKe14qgRV7dWRWs0QgnQCkXOnH5aprGxI21+vhWHWynuVjF3\/h9\/NxhR8HWQ\/kqxblVZZXHVukUYVoSyQHZtbxNkpKXbtARf3S6jxCtZt\/aCWh+tvG41OMaGaQQRhSSgBSbs9NORdaBFKTxyAZAx\/kGS8hFH3\/tJyntfV7ZbjdJi9Mzc07KAtCSkJau+0wI+qioISgDSIUok9FHWKULrWdttRX\/L1a3zeVp1mh6Jl0SKtKBQgpr5T0uS1YBgaX19qUsgwoanpRXR2u53SZRUXbCmLl899Otf\/\/q6ZaO6N7QY\/u8piWujtZ\/rVsxHWowYVNV1Q1vOXD51+fLS5T7bYt1TWkQXkZa8ZloMdMtPWgKcSQwArgOZ3OTk1OV3UphlYX0WE6iXlqgHC7rFIzaqgaNRa7qZEvhbJbTAbqk+PXlKBPR0jXA4fGDimmFdAlqCpmkGY+vBixbi8hXrRIZKIPEJK5vytDAauGcn7JHVemj1jsrMpgVuvUx8pmUEjL4b2Zs3p99dGmBs8pFDueXl6YGUti7KVQctpkR2HD9+pWPPZseDwP7Ep45fudJxpVWt6dFwWkHJpWXYtCSfaBlQClNHZ2bOzsxcHSBa6pGZ38yMz2QGtPWJ0Xr6fH5RhRaTj\/\/29sGDg6BQ3JePSJs2d\/\/2twe7D26r2X9jcFq6XExL8o0WFQPh1NFD09ML7wIt1K3phYV3FwfWKaBdmxY09o4ffOX1jld2P9bq9lU\/1dHx+quDj0Zq4apMS\/aRlh5OPXLIMtiBzADTJh953CICJn05fZmUr\/pTYuVFA2h1d0TUTW40UEIrH9m5p\/tRudbpbVqB9aNlQEkEWkQDRIIFtC7Ru0lrS7EpYoZDK1hCS9255+CjK8324YZ83XXLoRUI5GmlqLZutMqs\/MNbihwplqclE06rFWhR7H3dWwctFBloSaW65ZfdgvMztPKH0INwaPUZ2oHFa4yS9fAhSmdFPexZrczA1Snhv8jxQaC1I08L+6r3gG5tPbhiSaQYDqDgZI1KwWJaMT3sz51QWWKG7totjdMCu7V4TVcZuF2+2\/rSPp+HtwTc7wq0NndIdp+Ph9belWgZhhgUKRUEit1iRbQwdqr7Ez2lshwMh1275dBinJZoGP4rV21atECrtX5aQV0PQLNEY4CIGg6tXqAV2fVWG8Wpx34ItKdtWsymlQJaEkFaQRXfvu332gLltEpLoofWXr3V7dmXV6TFm0w8Gge6RVhBt8QI2K2Qouv+hOrEoB7uO3rIEgq0CMktXgsHjPVYDLg+3RospVVLtzCSKcUikVhk6HQRLSMy9lYb7JZ96fdJDUxPX8tdLaJFhdzi9WvXrg3cYL4Pfqpt5b20eMvHobWylQ\/qYODncUDg6f1isIjWLtz9XhQq27WGVdhUZnwcGj1FtGQtN37o7NmzmeupdSiJXlol62+BLcYx2w4tN9Ls0Nqzom4FWGx77\/u9XXNltOa6envff\/+MrK6d1nTm+sLCdLFuSdqB8QMD16aXjqZ8H5EkrkQLvy+h5ca3atCCNlPsiScvXHh7aG7US4tBSbzw9tujvYclVZXX6HYBraylgb+VrxPtknggs2CJqR+fWk9a2E5cidamMlort3yQVpscAe+UioUYBEMPIhIZ6j0sAy15rbSWspY1WYlWYHJ9aVXULYZOZjXdAlrV75brVlsIWz6uB2HT2t4WjsyCbuk+6FZ1Wqhb0prOXkFq0RLWRosSD60zed0Ky0NIC339NWV+BVp66sdHLd9D8+tIK4IlEduJlHlLIvhbDEuiFFDXQIvXD2x64u7SyreqHQ+iJq2t9dIS8rS6QLcKkWbqoSWuiRaIxmlxK8+KaUESSqKqBoLEx8WvKkSai9okq6bFbFohgrRETivyTC\/SgpIocFpBYw0OBDbZhQItWkpLAyt\/SdT1oAGtr1VfpfSiZX0+PtESvLSMUlpot2hgLbREVQ0GAzcr0AJ\/K7NghEG3LoWohJfwrWuxVg+Zl9ZJ32gxm9YaboMxIkKD+mbGsVs8YFqgNaAjrZQmMB42ule0dm4t9k5r0dKQFvHQMtySSI3V02KCZll94Qemq9AC3er73anJPsuylLW6KR6pSYsU0QqX0qp+P3adGKJIK1BCi9i01jC62egbuPXBBx+8O54FP7QCLY31\/W781PXr129Zin99\/LX6E70tn4ZoES8tvYQWdXRr9bSCfUfHM4vQns5a+uQj5XZL0\/p+95uZzOL41RvCutaJBVpODELltFghdlpPDIKU65b8TN47ldZMy0gdHZ+anDyA7cTJR8r9Lab3\/fjdqckb1xen\/Iw316IlqmIZLQK09laNbzmKT1nEbvkU0xL8ocWAVipo8FZ1Je+U6bxOZDmg5WPAuQYtqKXVMlq0Dlpo7oCWVErLJ92yabECLVaJlmUBLT\/7flZDa+XYKRUxyuyhtZ8EXVqSlxZUuA3m1kAziokyWlYFWimN5c5O+TmwrpxWoeWDJTEYKC+J9ogkTqtCTpAWx5UviS6tfWW0Qg3aFHH1tPyoGGlJOxE8CE\/vq2GIbp1YbuWxThRsJ6PolCJmDfZF3iqhVaJbPHTaWCzYcHBRgrQC4rRr5SvSYpyWjcoPP6KM1sMtRfk30BUu9SA8tChBf9nr\/1GqEho7s3\/\/7OjFN9pkXicGSZ4WdWnNj46ODl2Q6u36wY5N\/vAMBcflipyWPl29TkRaAlp5y8IMMn9oqaU9+8U9fZVoeX15qmmCVEwLPuzrffN019zYG2\/LRSWxt6Bbc3O4QMQbsXozmn8DpqhQcOOhcXhqPCXUqBOR1lmgpVm65i+tSn0+XCRZ9vRVF9PaZg\/\/EL05AbxEfmbsyNCZoYtg5Yt0q3c\/zXsQXfNnzsyOHWmYlkG0yYHl6enc44cuaVpVWhanBR7EzPXpbC77U8uXmnEl3cLXc0Z2btq06aM9lWl1v4bftqo68b7JE0qitK93XpbQylPKdauEFvjyXYcpDqqM1Wu3bFbBoEi1qaVMZmlp3KGlCUBLswdtaSm7Zx90i0eaCdBaWlqamPh9ivjh0lfQLTf\/mL0d5x\/78MOnTu7uoDYtjEEIzKE1+OpjIFfCOhG9tCRC983Ng5V3aBXpVr4kdh3WWBvQqrejwaYVCAQkYSFzytYty45vod3y9JCpmLT6uG5ZuZkD09M3F4+mmJ+0wvqD5bTAe9hx+\/btDz8s0MI6Ucjr1uBJ+Lb7fGtYx3o0z8uhRUjBOy3QkohLK1RKq4JlMWxIHlpByVjI5FJG6tShlBCsZuUHLMOhhXYrtXT0Eit2u1bX7Z+vE4HWj0ppGUZQ3HHy9kebdr6yuYMyd9SIViiJH3306ODWVluxDO6bc\/MAiGZpIdJM9Eq0ZAlpBQ1noJc7fcLtksXObGh5gVDK33MshZhBgNZS1jK4v6UX7FYhBqESSBoK0qK85UNSS9cvUWYYAs4IEsEnlqhvtIrKxqaTt\/e27u3YbOuWQ0tzo4GRyEeQDLleE8W4lkakC0ArVKAVcGl5Wj42LT1AaRGuAjeuTQhLAgGbpcohahFFQ1oC0hJJnpbmafmo4oHMtSDq1iWCdSIzgBZUj\/iiCjkSUZkGHgjl0xnx0TZk\/fO0wi6torGBSCsSOe\/SKrbyj6oqJiWXlmEEghgHv9A1L4XcPh8vLeLSiti0dL7ui4jBUJGv\/CZxsdVJBUOl60hMxKligcnp5eVlHnhAD4IJlXRLD+Qy1wyr4J0aqcV3wHpN3+xTZZAQehMM3+\/Bg3eUNDDAoJhWsOXhlhLd+hBogW7JnjqR4EhKPko3wmmFqOFoVjBIY21tsdjh08W0aEG3cESSS+uJC21mLEYZ+J7McGg5uCScdhjUgzYtvlsP\/\/5sZmLi7KJNa5JZduw0b+UtpJXSFSyJFvZVM2632OTV8cVMJjMxSWUZ38Ig4Lh2nA1IV0XrIaD1B6RFymnd3om69ZoMiB6DQrlncBsm9+z00uK6BW6\/ooRis2O7Ll68eHpe5rSo3bPvRAPBlw85uvX+4YjSdhEOffLJN9qoElJC+UgPvvATF\/pUmMGCASUY1kFbQyEG276jh3LZ7KnFbIqgbhFrGWm5o90s7kHoxoFFh5YCdeIUKN\/Vd67fyp4anyIhQdPA9TJwbrGB1zChNDaw3o1KOC3d1i2kVVSON518CnQLvNMIxT6f1p1bBx+Vyc7dGLEBWq1OSeQigfWUIx\/PvfXxx0ecOjFOI8\/0jhrcylNs+URIZBdUhHY7se3JsY+PHLnY+7YcQR\/YDmgwePAa2D5CBEvDuQ3wJDAIn80tZ3OHDk1a1vTVrMVb1XZJhOTjhJdES+uz\/a3xAQa0jl5ShAM2raOTVl\/u6+vZbC4HdaRh9IU0bLEx2AqNuhYtL2557hPQrT\/0PNfyUkvRV1AnbvvjlT2bf3nlTx27Ibltz+ArV\/60bfNTkHyq+zXYC03G\/HCD2W+++XT+4tjh+aHRufkz7114Yuzwe2dmu+b3vXdhFyQPj879Gba7tsNmvnd033uHx544PH\/4z3Pz33z63jcXJPs0IrOmpj6bAskOTC0MDNwZWPj81ue3ro\/PHMrM\/Gb85p2BA1evL3y2cHl84bOBv2RyA5A8NPXXG38Z58nHp2DvYm4gu3D1HUx+vTyQvZm5vPDZ1F++Hs9kvh6\/nPs2dycLX8EVBvh1PvvrjRtWBSztlWX4v\/\/29\/\/5+xdf\/O0f\/\/jii38WffWvDw8e\/N8vB3cPfvnl4ObNfGtvBr\/sHtzc\/eWX3Zs\/\/Jdz7Kdzp599Flp\/\/4YtJp99803cwTfQKnT2\/vv0afsw\/tW\/4TM\/4NknP81f86ulpXNons5NnAWZWDx7dnFiYhwENjMzE+cWx2cy5xZnxjPnJiA5cW4GknDA1+OYXDw7AXsX8Sg4IMP3QnIRdsIO\/Ay\/XczAGc+CDTwHJ584N5FZ+ur\/SpmkSbSKjPR\/8s9PPvmkJ\/3Jlk+eK\/qmddPx4\/863nG84\/x\/Os53dPwH\/nWcx00heSV\/bPzw7PyR2dnZoW++GZodmv14CNJH5mEzC59hL08e4Z8xOf8NT87y5NDQGfeaN5azX92Cgvf5neVcLncrt5xbvnVneTmb\/RZL0ue3crnpO1\/BN9nP72Szy3e+XV7GZA6OugWp7K1bWdh8Pg0HfAtH5e7AUdncV7ksT8J5vp2Goz64hV\/hAdk7d6ZzN8qYxMvedGuLQoxgwAyAy2yG9TB\/vwrLOyPg66smVLy4tZOqZJoyeHlxNdIqt4KoWGlRUaVmSAq1yWC7YjFJlmJtWF1DMgbVJM50bovxz3IIvuMH4Gcak0ISHhUpdE0KlhXHMEPc1CzNumSB\/cI4gmbvteUS\/NNMBfsVTRwYb8FRAv8GjwVTbjFIR3FrmgqejGmMmSZ8NuK6obA+fkAf06xgH+wtg1LVC0MwQRBDCAEFGnIP5F4vVN00hN6J4ArDCad2Va+qOrhEolMHMxwmD62TAPhJKnWaQkxEL0APoPfM+\/Idd8OtuHmTBp4It1vg36Lp1XCLSRTIH3pHeN2QYcBFggbOHQihk8lzwj3MfO4Izym2842AGmSap0UlyYahigY8dseHwHgn\/zEafS+Tii4FXBiaHpiXIJwcaMHT9vwMaMFNhIpQ2bwAFTxXjGxhwNgOn4LDBKfjaHTuJNmtPLiGZxferRN7wb9Y58FdBXj7hqPDDOE4e7wBHEYDsOAqAmSFz0Uxgny4asBALpDATMiQl7zHiVOHeUWKR+GkUQ5fcJx24Aq\/0AxVwk54e\/QNxfYaXqaaNnlo6Th2I4TCZ07IkqcpAPeBgx0h67wBUiIGZEMF\/WJ8tAHeqmCXX3uwMn8bl\/3AYZdqO57Uxc14CMV+Cgx\/gLMRcHCvjkMGBfteJMwORtgkSqSIBE4wYzigENcBRdU1EKOBPifhjid6mnzmMDwLwEhVzlmzAaKGagLcKJCBg0VsH2BMVcIpvKweTwKfr+P+YwFkCl7NSwseD3xm+fsvatIJ6EOijglu4w7jxo5\/TBhzzV\/ZLub+gvFQCvxODARt3QqglqGq8N8ZdrAbfi7ZRZvmFzDAooaFkH9vHwT7+G74Q\/LZYqwwJR2TIVRc\/gtql1Gq2OGTenTLMS7cmwX9BQe6aHqMIYLTW9XVtdeId2lhaVfy9ihPytNMZnbO7TwWt6UJdQNkxl1fex6eemNdQtGoCZoVLX9RhULMkWrvGFDcH+Tv2ozGa9ASKtGKx0WD0kIIBd+8ftdEiTd6sUTnSKfJosMVFvcy09HOamsVxtP9\/G\/+rqPJaNpsXLdIMm1QaFK7l+yE09ytlzsr8fZkgwujtveb7VEEU\/6zRDvp7Kl2pWQPv5Bz1wocOJwgK9FiFWmNtCuiWugj70lDhu7SG0YUE1\/\/0pi0J5ThEUVJV9CtTqCVrvwrk5TQSgOt5CpoRdPES6sdaDV6B2uQ1dBqHyEVaSWBVtXTJR2ts2+a0+qpSYtU0C0M\/Tm0FHwJUHvP3Xp7jdI4rc4klERmtlegFR0m1V+vlkwWfezvJDXWY61gjBSGpd0rCaDl87Ku1UVpXI+VZBIK4ki6s6xSVABBT7XHHE2ni+7K7OmssdZvxSi4mUyPKJ5DlP7O\/ppZ9k2i6c54pUz\/P\/JCk\/bninVHAAAAAElFTkSuQmCC) ![laws](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcS8WHDvRwiufzB6iBhNmyqJQqTel_CbnKBUMA&usqp=CAU) \n> Now let's Simulate the Sample to Create A sampling Distribution for the mean of  SepalLengthCm for Iris-virginica to check the Law of Large Numbers and the Central Limit therom.","925ea425":"### What is Bootstraping?\n**is sampling with replacement. Using random.choice in python actually samples in this way. Where the probability of any number in our set stays the same regardless of how many times it has been chosen. Flipping a coin and rolling a die are kind of like bootstrap sampling as well, as rolling a 6 in one scenario doesn't mean that 6 is less likely later.**\n![bootstarping](https:\/\/blogs.sas.com\/content\/iml\/files\/2018\/12\/bootstrapSummary.png)\n> I actually have been bootstrapping to create sampling distributions in earlier parts, It turns out, we can do a pretty good job of finding out where a parameter is by using a sampling distribution created from bootstrapping from only a sample.","4ed35e76":"**H_0: Mu(v)-Mu(s)>=0**\n\n**H_1: Mu(v)-Mu(s)<0**","1652a5f4":"**small p-values suggest our null is not true. Rather, our statistic is likely to have come from a different distribution than the null.**\n\n**When the p-value is large, we have evidence that our statistic was likely to come from the null hypothesis. Therefore, we do not have evidence to reject the null.**\n\n**P-value = 1, we failed to reject the null hypothesis**"}}