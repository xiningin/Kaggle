{"cell_type":{"71f7863c":"code","132d39dd":"code","638f7822":"code","b7406e1e":"code","4b89c8ec":"code","181f653c":"code","f0465065":"code","c3a1a15b":"code","1e80a678":"code","574e02e4":"code","ed72e9b0":"code","f0503848":"code","0b027323":"code","d3ba8fd6":"code","f740ce6a":"code","79f9ffe9":"code","b0e7db2c":"code","dd381305":"code","95ad13e5":"code","fe422425":"code","d81dd056":"code","fa539797":"code","855a1bd0":"code","92588a79":"code","7b3d9655":"code","4b1c0252":"code","62048faa":"code","46cf4b13":"code","40274090":"code","50a230db":"code","951195c7":"code","3d1fd1e2":"code","8407a7ec":"code","8ab89149":"code","8466f1a0":"code","623e5a99":"code","f03d4f8c":"code","d5e388f4":"code","b0093863":"code","d6bc6e48":"code","a0fe1700":"markdown","6df1ea10":"markdown","ad882ae2":"markdown","8e2322f2":"markdown"},"source":{"71f7863c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import metrics, preprocessing\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\npd.options.display.max_columns = None","132d39dd":"# read training data\nbank= pd.read_csv(r'\/kaggle\/input\/portuguese-bank-telemarketing-data\/bank_train.csv')\nbank.head()","638f7822":"bank.shape","b7406e1e":"bank.info()","4b89c8ec":"bank.describe()","181f653c":"pip install sweetviz","f0465065":"# importing sweetviz\nimport sweetviz as sv\n#analyzing the dataset\nadvert_report = sv.analyze(bank)\n#display the report\nadvert_report.show_html('EDA.html')","c3a1a15b":"from sklearn.model_selection import train_test_split\n\n# We specify this so that the train and test data set always have the same rows, respectively\nnp.random.seed(0)\ndf_train, df_test = train_test_split(bank, train_size = 0.8, random_state = 42)","1e80a678":"# read training data\ndf_train.head()","574e02e4":"# read test data\ndf_test.head()","ed72e9b0":"# Build the model \n# Create a decision tree object with default hyperparameters\ndc =  DecisionTreeClassifier()\n\n","f0503848":"# Train the model\nprint(df_train.columns)\n\n","0b027323":"# Create x_train: Drop the columns 'purchased' (target) and 'id'\nx_train = df_train.drop(['purchased','id'], axis=1)\n\nx_train.head()","d3ba8fd6":"# Create y_train\ny_train = df_train['purchased']\n\ny_train.head()","f740ce6a":"# Fit the model\ndc.fit(x_train, y_train)\n\n","79f9ffe9":"from sklearn import tree\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(dc,\n                   feature_names=x_train.columns,\n                   class_names=['0', \"1\"],\n                   filled=True)","b0e7db2c":"#  Make predictions using test data\ndf_test.head()\n\n","dd381305":"y_test = df_test['purchased']\ny_test.head()","95ad13e5":"x_test=df_test.drop(['id','purchased'], axis=1)\nx_test.head()","fe422425":"# remember to drop 'id' from the test dataset \npredictions = dc.predict(x_test)\npredictions[:5]\n\n","d81dd056":"from sklearn.metrics import r2_score\nr2train_dc=round(r2_score(y_train, dc.predict(x_train)),2)\n\nr2train_dc","fa539797":"r2test_dc=round(r2_score(y_test, dc.predict(x_test)),2)\n\nr2test_dc","855a1bd0":"dc.feature_importances_","92588a79":"imp_df = pd.DataFrame({\n    \"Varname\": x_train.columns,\n    \"Imp\": dc.feature_importances_})","7b3d9655":"imp_df.loc[imp_df['Imp'] != 0].sort_values(by=\"Imp\", ascending=False)","4b1c0252":"# Hyperparameter tuning: maxdepth\n# specify number of folds for k-fold CV\nn_folds = 4","62048faa":"# parameters to build the model on: specify a range of max_depth\nparameters = {'max_depth': range(2,10)}","46cf4b13":"# instantiate the model\ndtree = DecisionTreeClassifier()","40274090":"# fit tree on training data\ntree = GridSearchCV(dtree, parameters, \n                    cv=n_folds, \n                  scoring=\"accuracy\",\n                  return_train_score=True)\ntree.fit(x_train, y_train)","50a230db":"# scores of GridSearch CV\nscores = tree.cv_results_\npd.DataFrame(scores).head()","951195c7":"# plotting accuracies with max_depth \nplt.figure()\nplt.grid()\nplt.plot(scores[\"param_max_depth\"], \n         scores[\"mean_train_score\"], \n         label=\"training accuracy\")\nplt.plot(scores[\"param_max_depth\"], \n         scores[\"mean_test_score\"], \n         label=\"test accuracy\")\nplt.xlabel(\"max_depth\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()","3d1fd1e2":"# observe the optimal value of max_depth from the plot and store \n# in max_depth_optimal\nmax_depth_optimal = 3","8407a7ec":"# Build a tree with optimal max_depth\nbest_tree = DecisionTreeClassifier(max_depth=max_depth_optimal)\nbest_tree.fit(x_train, y_train)","8ab89149":"from sklearn import tree\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(best_tree,\n                   feature_names=x_train.columns,\n                   class_names=['0', \"1\"],\n                   filled=True)","8466f1a0":"r2train_dc=round(r2_score(y_train, best_tree.predict(x_train)),2)\n\nr2train_dc","623e5a99":"r2test_dc=round(r2_score(y_test, best_tree.predict(x_test)),2)\n\nr2test_dc","f03d4f8c":"best_tree.feature_importances_","d5e388f4":"imp_df = pd.DataFrame({\n    \"Varname\": x_train.columns,\n    \"Imp\": best_tree.feature_importances_})","b0093863":"imp_df.sort_values(by=\"Imp\", ascending=False)","d6bc6e48":"imp_df.loc[imp_df['Imp'] != 0].sort_values(by=\"Imp\", ascending=False)","a0fe1700":"![image.png](attachment:image.png)","6df1ea10":"# Problem Statement\n\nWe are given the 'Portuguese Bank' marketing dataset which contains data about a telemarketing campaign run by the bank to sell a product (term deposit - a type of investment product).\n\nBank wants to identify the important features which can be used focus to understand the potential Buyers\n\n","ad882ae2":"Following Features which can be used focus to understand the potential Buyers keeping Accuracy above 90% for test & train:\n- duration\n- nr.employed\n- cons.price.idx\t\n- euribor3m","8e2322f2":"# EDA "}}