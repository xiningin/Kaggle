{"cell_type":{"dbb1fa6d":"code","bd98001d":"code","cb71ee54":"code","d0b33927":"code","d328f39b":"code","af707b68":"code","671af89e":"code","6b876cba":"code","f03beb49":"code","ed66fa15":"code","aafce0ca":"code","dd1a3dc0":"code","768f77fa":"code","e9238b4f":"code","38001778":"code","6e77f75e":"code","3185bb3e":"code","845fda15":"code","237d0d29":"code","38a70026":"code","dc645c95":"code","f79f9028":"code","68043292":"code","10372edd":"markdown","461e14f7":"markdown","216d0438":"markdown","55909802":"markdown","7f1782ec":"markdown","75b6d250":"markdown","fad97545":"markdown","644d9e76":"markdown","1188ffe9":"markdown","a6bcb62a":"markdown","a125adbb":"markdown","1c65d4e2":"markdown","b8d89797":"markdown","f1a436e3":"markdown"},"source":{"dbb1fa6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #Data visualization\nimport seaborn as sns #Data visualization\n\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\n%matplotlib inline\nsns.set_style('whitegrid')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bd98001d":"#Reading our csv file into pandas dataframe\ndf = pd.read_csv('..\/input\/app-store-apple-data-set-10k-apps\/AppleStore.csv')\ndf.head()","cb71ee54":"#Shape of our data\ndf.shape","d0b33927":"#Get some information about our data\ndf.info()","d328f39b":"#Finding out if the id column is useful or not. \n#Althought it's obvious that it's not but there's a small chance it could be useful.\ndf.id.nunique()","af707b68":"df.isnull().sum()","671af89e":"#Finding if their any unique values in currency table that could be useful\ndf.currency.nunique(dropna=False)","6b876cba":"#Droping unnecessary columns\ndf.drop(['Unnamed: 0', 'id', 'currency'], axis=1, inplace=True)","f03beb49":"df.user_rating.value_counts()","ed66fa15":"#Converting price to 1 (paid) and 0 (unpaid)\ndf['price'] = df['price'].apply(lambda x : 1 if x > 0 else 0)\nprice_ft = df.groupby(['price']).size().sort_values(ascending=False).reset_index(name='Count')\nplt.figure(figsize=(10, 7))\nsns.countplot(x='price', data=df)\nprice_ft","aafce0ca":"rating_ft = df.groupby(['user_rating']).size().sort_values(ascending=False).reset_index(name='Count')\nplt.figure(figsize=(15, 7))\nsns.countplot(x='user_rating', data=df)\nrating_ft","dd1a3dc0":"plt.figure(figsize=(15, 7))\nsns.countplot(x='cont_rating', data=df)","768f77fa":"# Pie chart for content rating\nlabels = ['4+', '12+', '17+', '9+']  # names on pie chart \nsizes = [df['cont_rating'][df['cont_rating'] == '4+'].count(),df['cont_rating'][df['cont_rating'] == '12+'].count(), df['cont_rating'][df['cont_rating'] == '17+'].count(), df['cont_rating'][df['cont_rating'] == '9+'].count()]  \n# \"explode\" the 2nd, 3rd and 4th slice (i.e. '12+', '17+', '9+')\nexplode = (0, 0.1, 0.1, 0.1)\n#add colors   \ncolors = ['#F54F52','#378AFF', '#93F03B', '#FFA32F']\nfig1, ax1 = plt.subplots(figsize=(15, 7))\nax1.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90, textprops={'fontsize': 15, 'fontWeight':'bold'})\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal')\nplt.tight_layout()\nplt.show()","e9238b4f":"rating_ft = df.groupby(['user_rating']).size().sort_values(ascending=False).reset_index(name='Count')\nrating_ft['Percentage'] = rating_ft['Count'].apply(lambda x : round((x \/ df.user_rating.count())*100, 2))\nrating_ft['UnPaid'] =rating_ft['user_rating'].apply(lambda x : df['user_rating'][(df['user_rating'] == x) & (df['price'] == 0)].count())\nrating_ft['Paid'] =rating_ft['user_rating'].apply(lambda x : df['user_rating'][(df['user_rating'] == x) & (df['price'] == 1)].count())\nrating_ft['Perc_Unpaid'] = rating_ft['user_rating'].apply(lambda x : round((df['user_rating'][(df['user_rating'] == x) & (df['price'] == 0)].count() \/ df['user_rating'][df['user_rating'] == x].count() ) * 100, 2))\nrating_ft['Perc_Paid'] = rating_ft['user_rating'].apply(lambda x : round((df['user_rating'][(df['user_rating'] == x) & (df['price'] == 1)].count() \/ df['user_rating'][df['user_rating'] == x].count() ) * 100, 2))\nig, ax =plt.subplots(nrows=1, ncols=2, figsize=(16, 7))\nsns.countplot(x='user_rating', data=df, hue='price', ax=ax[0])\nsns.countplot(x = 'user_rating_ver', hue='price', data=df, ax=ax[1])\nplt.tight_layout()\nrating_ft","38001778":"cont_ft = df.groupby(['cont_rating']).size().sort_values(ascending=False).reset_index(name='Count')\ncont_ft['Percentage'] = cont_ft['Count'].apply(lambda x : round((x \/ df.cont_rating.count())*100, 2))\ncont_ft['Perc_Unpaid'] = cont_ft['cont_rating'].apply(lambda x : round((df['cont_rating'][(df['cont_rating'] == x) & (df['price'] == 0)].count() \/ df['cont_rating'][df['cont_rating'] == x].count() ) * 100, 2))\ncont_ft['Perc_Paid'] = cont_ft['cont_rating'].apply(lambda x : round((df['cont_rating'][(df['cont_rating'] == x) & (df['price'] == 1)].count() \/ df['cont_rating'][df['cont_rating'] == x].count() ) * 100, 2))\nplt.figure(figsize=(16, 5))\nsns.countplot(x='cont_rating', hue='price', data=df)\ncont_ft","6e77f75e":"cont_ft = df.groupby(['prime_genre']).size().sort_values(ascending=False).reset_index(name='Count')\ncont_ft['Percentage'] = cont_ft['Count'].apply(lambda x : round((x \/ df.prime_genre.count())* 100, 2))\ncont_ft['UnPaid'] = cont_ft['prime_genre'].apply(lambda x : df['prime_genre'][(df['prime_genre'] == x) & (df['price'] == 0)].count())\ncont_ft['Paid'] = cont_ft['prime_genre'].apply(lambda x : df['prime_genre'][(df['prime_genre'] == x) & (df['price'] == 1)].count())\ncont_ft['Perc_Unpaid'] = cont_ft['prime_genre'].apply(lambda x : round((df['prime_genre'][(df['prime_genre'] == x) & (df['price'] == 0)].count() \/ df['prime_genre'][df['prime_genre'] == x].count() ) * 100, 2))\ncont_ft['Perc_Paid'] = cont_ft['prime_genre'].apply(lambda x : round((df['prime_genre'][(df['prime_genre'] == x) & (df['price'] == 1)].count() \/ df['prime_genre'][df['prime_genre'] == x].count() ) * 100, 2))\nplt.figure(figsize=(20, 5))\nsns.countplot(x='prime_genre', hue='price', data=df)\ncont_ft","3185bb3e":"plt.figure(figsize=(30, 15))\nsns.countplot(x='prime_genre', data=df, hue='cont_rating')","845fda15":"plt.figure(figsize=(20, 10))\nsns.barplot(x='prime_genre', y='user_rating', data=df)","237d0d29":"plt.figure(figsize=(20, 10))\nsns.barplot(x='cont_rating', y='user_rating', data=df)","38a70026":"#Genre feature has lots of categories so we can reduce them\ndf.prime_genre.value_counts(dropna=False)","dc645c95":"#Top 6 categories\nprint('Games: {}%'.format(round(( df['prime_genre'][df['prime_genre'] == 'Games'].count() \/ df.prime_genre.count() ) * 100, 2)))\nprint('Entertainment: {}%'.format(round(( df['prime_genre'][df['prime_genre'] == 'Entertainment'].count() \/ df.prime_genre.count() ) * 100, 2)))\nprint('Education: {}%'.format(round(( df['prime_genre'][df['prime_genre'] == 'Education'].count() \/ df.prime_genre.count() ) * 100, 2)))\nprint('Photo & Video: {}%'.format(round(( df['prime_genre'][df['prime_genre'] == 'Photo & Video'].count() \/ df.prime_genre.count() ) * 100, 2)))\nprint('Utilities: {}%'.format(round(( df['prime_genre'][df['prime_genre'] == 'Utilities'].count() \/ df.prime_genre.count() ) * 100, 2)))\nprint('Health & Fitness: {}%'.format(round(( df['prime_genre'][df['prime_genre'] == 'Health & Fitness'].count() \/ df.prime_genre.count() ) * 100, 2)))","f79f9028":"#Reducing number of categories\ndf['prime_genre'] = df['prime_genre'].apply(lambda x : x if x in ['Games', 'Entertainment', 'Education', 'Photo & Video', 'Utilities', 'Health & Fitness'] else 'Other')","68043292":"cont_ft = df.groupby(['prime_genre']).size().sort_values(ascending=False).reset_index(name='Count')\ncont_ft['Percentage'] = cont_ft['Count'].apply(lambda x : round((x \/ df.prime_genre.count())* 100, 2))\ncont_ft['UnPaid'] = cont_ft['prime_genre'].apply(lambda x : df['prime_genre'][(df['prime_genre'] == x) & (df['price'] == 0)].count())\ncont_ft['Paid'] = cont_ft['prime_genre'].apply(lambda x : df['prime_genre'][(df['prime_genre'] == x) & (df['price'] == 1)].count())\ncont_ft['Perc_Unpaid'] = cont_ft['prime_genre'].apply(lambda x : round((df['prime_genre'][(df['prime_genre'] == x) & (df['price'] == 0)].count() \/ df['prime_genre'][df['prime_genre'] == x].count() ) * 100, 2))\ncont_ft['Perc_Paid'] = cont_ft['prime_genre'].apply(lambda x : round((df['prime_genre'][(df['prime_genre'] == x) & (df['price'] == 1)].count() \/ df['prime_genre'][df['prime_genre'] == x].count() ) * 100, 2))\nplt.figure(figsize=(20, 5))\nsns.countplot(x='prime_genre', hue='price', data=df)\ncont_ft","10372edd":"The Python Pandas packages helps us work with our datasets. We start by acquiring the dataset into Pandas DataFrames.","461e14f7":"- top unpaid apps categories are: Shopping (99.18%), Social Networking (90.0%) & Finance (85.63%)\n- top paid apps categories are: Education (70.86%), Reference (68.75%) & Medical (65.22%)","216d0438":"#### As we can see here \n1. Top content rating for unpaid apps are : 17+ with (71.8%), 12+ with (61%) \n2. Top user ratings for paid apps are : 9+ with (55.6%), 4+ with (44.3%) \n\nUnpaid apps tend to be for large age than paid apps! ","55909802":"### As we can see there are no null values","7f1782ec":"### 1. Univariate Categorical Analysis ","75b6d250":"### 2. Bivariate Categorical Analysis ","fad97545":"#### As we can see here \n1. Top user ratings for unpaid apps are : 0.0 with (72%), 2.5 with (60%) and 4.5 with (55%)\n2. Top user ratings for paid apps are : 1.5 with (53.5%), 1.0 with (52%) and 5.0 with (48%)\n\nSo the price can affect the user ratings but not what we expected. ","644d9e76":"#### Let's then see the relation between the genre and content rating","1188ffe9":"#### Relation between price and cont_rating","a6bcb62a":"#### As we can see here most of the apps are 4+ years\n- Apps with higher cont_rating than 4+ are : Social Networking, News and Medical.","a125adbb":"# Time for Exploratory Data Analysis","1c65d4e2":"We can reduce it to only top five or six categories","b8d89797":"# Understanding the data \nNow we will try to understand our data before doing any analysis","f1a436e3":"#### How price affect the user_rating "}}