{"cell_type":{"2588b4c8":"code","9241a70c":"code","e60d015d":"code","2c0de3e9":"code","f0d72a53":"markdown"},"source":{"2588b4c8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport keras\nimport sklearn\nimport sklearn.preprocessing\nfrom sklearn.model_selection import train_test_split\n\nsegmented = np.load(\"..\/input\/segmented.npy\")\n_, HEIGHT, WIDTH, N_CLASSES = segmented.shape\ncombined = np.load(\"..\/input\/combined.npy\").reshape((-1, HEIGHT, WIDTH, 1))\/255","9241a70c":"inputs=keras.layers.Input((HEIGHT, WIDTH,1))\nx=keras.layers.ZeroPadding2D(((0, 0), (0, 96-WIDTH)))(inputs)\nlayers = []\nfor n, k, s in [(32, 5, 1),(64, 5, 1),(128, 5, 1),(128, 3, 1),(128, 3, 1)]:\n    x=keras.layers.Conv2D(n, kernel_size=k, strides=s, padding='same')(x)\n    x=keras.layers.LeakyReLU()(x)\n    x=keras.layers.Conv2D(n, kernel_size=k, strides=s, padding='same')(x)\n    x=keras.layers.MaxPooling2D(pool_size=3, strides=2, padding='same')(x)\n    x=keras.layers.LeakyReLU()(x)\n    x=keras.layers.BatchNormalization()(x)\n    layers.append(x)\nlayers.pop()\nfor n, k, s in [(128, 3, 1),(128, 3, 1)]:\n    x=keras.layers.Conv2D(n, kernel_size=k, strides=s, padding='same')(x)\n    x=keras.layers.LeakyReLU()(x)\n    x=keras.layers.BatchNormalization()(x)\nfor n, k, s in reversed([(N_CLASSES, 5, 2),(64, 5, 2),(64, 5, 2),(128, 5, 2),(128, 5, 2)]):\n    x=keras.layers.Conv2DTranspose(n, kernel_size=k, strides=s, padding='same')(x)\n    if len(layers)>0:\n        l = layers.pop()\n        x=keras.layers.concatenate([l, x])\n    x=keras.layers.LeakyReLU()(x)\n    x=keras.layers.BatchNormalization()(x)\nx=keras.layers.Conv2DTranspose(N_CLASSES, kernel_size=5, strides=1, padding='same')(x)\nx=keras.layers.Cropping2D(((0, 0), (0, 96-WIDTH)))(x)\noutputs = keras.layers.Activation('softmax')(x)\nmodel = keras.models.Model(inputs=inputs, outputs=outputs)\nmodel.summary()","e60d015d":"model.compile(loss='categorical_crossentropy',\n              optimizer=keras.optimizers.Adam(0.001),\n              metrics=['accuracy'])\n\ndatagen = keras.preprocessing.image.ImageDataGenerator(rotation_range=10.0,\n                                                       width_shift_range=2,\n                                                       height_shift_range=2,\n                                                       shear_range=0.0,\n                                                       zoom_range=0.1,\n                                                       data_format='channels_last',\n                                                       validation_split=0.1\n                                                      )\n\nepochs = 30\nbatch_size = 50\nmodel.fit_generator(zip(datagen.flow(combined, batch_size=batch_size, subset='training', seed=1), datagen.flow(segmented, batch_size=batch_size, subset='training', seed=1)),\n                    epochs=epochs, \n                    steps_per_epoch = len(combined)\/\/batch_size,\n                    validation_data=zip(datagen.flow(combined, batch_size=batch_size, subset='validation', seed=1), datagen.flow(segmented, batch_size=batch_size, subset='validation', seed=1)),\n                    validation_steps=50,\n                    #callbacks=[keras.callbacks.EarlyStopping(monitor='val_acc', min_delta=0, patience=2, verbose=0, mode='auto')],\n                    verbose=2\n         )","2c0de3e9":"N_TEST = 10\nSEED = np.random.randint(0, 1000)\noriginals = next(datagen.flow(combined, batch_size=N_TEST, subset='validation', seed=SEED))\nground_truth = next(datagen.flow(segmented, batch_size=N_TEST, subset='validation', seed=SEED))\npredicted = model.predict_on_batch(originals)\npredicted = np.round(predicted).astype(np.int)\nplt.figure(figsize=(20, 5))\nnp.set_printoptions(threshold=np.nan)\nfor i in range(N_TEST):\n    plt.subplot(4, N_TEST, i+1)\n    plt.imshow(originals[i].reshape((HEIGHT, WIDTH)))\n    plt.subplot(4, N_TEST, i+1+N_TEST)\n    plt.imshow(np.argmax(predicted[i], axis=2), vmax=10, vmin=0)\n    plt.subplot(4, N_TEST, i+1+2*N_TEST)\n    plt.imshow(np.argmax(ground_truth[i], axis=2), vmax=10, vmin=0)\n    plt.subplot(4, N_TEST, i+1+3*N_TEST)\n    plt.imshow(np.any(predicted[i]-ground_truth[i], axis=2))","f0d72a53":"# Image Segmentation with FCN\n\n## Ref:\n\n[Image Segmentation Keras : Implementation of Segnet, FCN, UNet and other models in Keras.](https:\/\/github.com\/divamgupta\/image-segmentation-keras)\n\n[Fully Convolutional Networks for Semantic Segmentation](https:\/\/people.eecs.berkeley.edu\/~jonlong\/long_shelhamer_fcn.pdf)"}}