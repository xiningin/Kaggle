{"cell_type":{"631d1885":"code","750b9c2e":"code","6c4a1a97":"code","63beb846":"code","c551232c":"code","13433cb5":"code","8586cf58":"code","29cfc0ff":"code","107d20e1":"code","b6ec0b29":"code","fe26af14":"code","bfee2b57":"code","ad37518c":"markdown","da82da2f":"markdown","0e49d665":"markdown","e084f64a":"markdown","44974280":"markdown","3cbd9399":"markdown","2ba90896":"markdown","e2880be1":"markdown","0a3c6216":"markdown","c70c35a1":"markdown","09dcbe6d":"markdown","a3191224":"markdown"},"source":{"631d1885":"\n# import necessary libraries\n\nimport pandas as pd\nfrom math import sqrt","750b9c2e":"\n#dictionary with usernames their watched web series and ratings out of 5\n\ndataset={\n        'Joko': {'Laskar Pelangi': 5,\n                  'Warkop DKI Reborn': 3,\n                  'Habibie Ainun': 3,\n                  '5 CM': 3,\n                  'Ada Apa Dengan Cinta': 4,\n                  'The Raid': 3},\n    \n        'Bagus': {'Laskar Pelangi': 5,\n                    'Warkop DKI Reborn': 3,\n                    '5 CM': 5,\n                    'Habibie Ainun':5,\n                    'The Raid': 3,\n                    'Ada Apa Dengan Cinta': 3},\n    \n        'Rizza': {'Laskar Pelangi': 2,\n                   'Habibie Ainun': 5,\n                   '5 CM': 3,\n                   'The Raid': 4},\n    \n        'Citra': {'Habibie Ainun': 5,\n                   'The Raid': 4,\n                   '5 CM': 4,},\n    \n       'Lina': {'Laskar Pelangi': 4,\n                    'Warkop DKI Reborn': 4,\n                    'Habibie Ainun': 4,\n                    'The Raid': 3,\n                    'Ada Apa Dengan Cinta': 2},\n    \n       'Intan': {'Laskar Pelangi': 3,\n                  'Habibie Ainun': 4,\n                  'The Raid': 3,\n                  '5 CM': 5,\n                  'Ada Apa Dengan Cinta': 3},\n    \n      'Rohma': {'Habibie Ainun':4,\n                  'Ada Apa Dengan Cinta':1,\n                  '5 CM':4}}","6c4a1a97":"#create a data frame of this dataset\n\ndataset_df=pd.DataFrame(dataset)\ndataset_df.fillna(\"Belum Menonton\",inplace=True)\ndataset_df","63beb846":"\n# custom function to create unique set of web series\n\ndef unique_items():\n    unique_items_list = []\n    for person in dataset.keys():\n        for items in dataset[person]:\n            unique_items_list.append(items)\n    s=set(unique_items_list)\n    unique_items_list=list(s)\n    return unique_items_list","c551232c":"unique_items()","13433cb5":"# custom function to create pearson correlation method from scratch\n\ndef person_corelation(person1,person2):\n    both_rated = {}\n    for item in dataset[person1]:\n        if item in dataset[person2]:\n            both_rated[item] = 1\n\n    number_of_ratings = len(both_rated)\n    if number_of_ratings == 0:\n        return 0\n\n    person1_preferences_sum = sum([dataset[person1][item] for item in both_rated])\n    person2_preferences_sum = sum([dataset[person2][item] for item in both_rated])\n\n    # Sum up the squares of preferences of each user\n    person1_square_preferences_sum = sum([pow(dataset[person1][item], 2) for item in both_rated])\n    person2_square_preferences_sum = sum([pow(dataset[person2][item], 2) for item in both_rated])\n\n    # Sum up the product value of both preferences for each item\n    product_sum_of_both_users = sum([dataset[person1][item] * dataset[person2][item] for item in both_rated])\n\n    # Calculate the pearson score\n    numerator_value = product_sum_of_both_users - (\n    person1_preferences_sum * person2_preferences_sum \/ number_of_ratings)\n    denominator_value = sqrt((person1_square_preferences_sum - pow(person1_preferences_sum, 2) \/ number_of_ratings) * (\n    person2_square_preferences_sum - pow(person2_preferences_sum, 2) \/ number_of_ratings))\n    if denominator_value == 0:\n        return 0\n    else:\n        r = numerator_value \/ denominator_value\n        return r","8586cf58":"# custom function to check most similar users\n\ndef most_similar_users(target_person,no_of_users):\n    \n    # Used list comprehension for finding pearson similarity between users\n    scores = [(person_corelation(target_person,other_person),other_person) for other_person in dataset if other_person !=target_person]\n    \n    #sort the scores in descending order\n    scores.sort(reverse=True)\n    \n    #return the scores between the target person & other persons\n    return scores[0:no_of_users]","29cfc0ff":"\n# function check by input one person name & returns the similarity score \n\nmost_similar_users('Joko',6)","107d20e1":"#custom function to filter the seen movies and unseen movies of the target user\n\ndef target_movies_to_users(target_person):\n    target_person_movie_lst = []\n    unique_list =unique_items()\n    for movies in dataset[target_person]:\n        target_person_movie_lst.append(movies)\n\n    s=set(unique_list)\n    recommended_movies=list(s.difference(target_person_movie_lst))\n    a = len(recommended_movies)\n    if a == 0:\n        return 0\n    return recommended_movies,target_person_movie_lst","b6ec0b29":"# function check\n\nunseen_movies,seen_movies=target_movies_to_users('Citra')\n\ndct = {\"Unseen Movies\":unseen_movies,\"Seen Movies\":seen_movies}\npd.DataFrame(dct)","fe26af14":"def recommendation_phase(person):\n    # Gets recommendations for a person by using a weighted average of every other user's rankings\n    totals = {}  #empty dictionary\n    simSums = {} # empty dictionary\n    for other in dataset:\n        # don't compare me to myself\n        if other == person:\n            continue\n        sim = person_corelation(person, other)\n\n        # ignore scores of zero or lower\n        if sim <= 0:\n            continue\n        for item in dataset[other]:\n            # only score movies i haven't seen yet\n            if item not in dataset[person]:\n                # Similrity * score\n                totals.setdefault(item, 0)\n                totals[item] += dataset[other][item] * sim\n                # sum of similarities\n                simSums.setdefault(item, 0)\n                simSums[item] += sim\n                # Create the normalized list\n\n    rankings = [(total \/ simSums[item], item) for item, total in totals.items()]\n    rankings.sort(reverse=True)\n    # returns the recommended items\n    recommendataions_list = [(recommend_item,score) for score, recommend_item in rankings]\n    return recommendataions_list","bfee2b57":"print(\"Masukkan nama user\")\ntp = input().title()\nif tp in dataset.keys():\n    a=recommendation_phase(tp)\n    if a != -1:\n        print(\"Recommendation Using User based Collaborative Filtering:  \")\n        for webseries,weights in a:\n            print(webseries,'---->',weights)\nelse:\n    print(\"Person not found in the dataset..please try again\")","ad37518c":"Import library yang dibutuhkan, \n* library pandas digunakan untuk memanipulasi dan mengolah data yang akan digunakan. \n* library math digunakan untuk melakukan perhitungan matematika","da82da2f":"**Menambahkan keterangan belum menonton**, tidak semua anak pernah menonton semua list film yang tersedia. untuk film yang belum ditonton oleh anak terkait, maka akan diberi keterangan ","0e49d665":"**Unique Item**, menentukan film apa saja yang ditonton berdasarkan dataset.","e084f64a":"**Menentukan dataset yang akan digunakan.** \nDataset berikut ini merupakan data rating suatu film yang telah ditonton tiap anak. Rating yang diberikan menggunakan skala 1-5. Film yang diberi rating merupakan film yang pernah ditonton anak tersebut. Contohnya, Joko telah menonton film laskar pelangi dan memberi rating 5, Joko juga telah menonton film Warkop DKI Reborn dan memberi rating 3. begitu seterusnya","44974280":"Pada contoh dibawah ini, user yang bernama citra sudah pernah menonton, habibie ainun, the raid, dan 5 CM. sedangkan film yang belum pernah ditontoh antara lain yaitu ada apa dengan cinta, laskar pelangi, dan warkop DKI reborn","3cbd9399":"# User Based Collaborative Filtering\n**Penanggung Jawab : Joko Slamet (18050974030)**\n\nKelompok 5 PTI 2018\n1. Bagus Wahyudianto\n2. Joko Slamet\n3. Rizza Bayu","2ba90896":"Pada tahap ini, pengguna diminta untuk memasukkan salah satu nama user yang telah ada di dataset, setelah memasukkan nama user, maka akan muncul prediksi rating terhadap film yang belum ditonton oleh user tersebut","e2880be1":"Berikut ini adalah contoh hasil dari tingkat kesamaan Joko dengan beberapa user lainnya","0a3c6216":"Function dibawah ini berfungsi untuk mengetahui film apa yang pernah ditonton dan yang belum pernah ditonton oleh user","c70c35a1":"Function di bawah ini berfungsi untuk menghitung korelasi \/  tingkat kesamaan antara satu orang dengan orang yang lain","09dcbe6d":"Setelah melakukan perhitungan tingkata kesamaan, maka langkah selanjutnya yaitu mencari tahu user mana yang memiliki tingkat kesamaan tertinggi","a3191224":"Function dibawah ini berfungsi untuk memprediksi nilai rating yang akan diberikan user terhadap film yang belum ia tonton. "}}