{"cell_type":{"ee394199":"code","3233cb00":"code","058fe9db":"code","6ca172a1":"code","a27a4fc6":"code","656c7003":"code","4fa1909f":"code","4b02ec21":"code","9bbac835":"code","5111f219":"code","6b9ac32f":"code","544c54ee":"code","50699265":"code","b140bb5a":"code","5c103808":"code","fe276b19":"code","45bbae30":"code","920d4dbb":"code","df60f03a":"code","78d7667d":"code","6accd508":"code","bf506706":"code","c76be159":"code","d80cded1":"code","425bca77":"code","49688be3":"code","244f2e12":"code","c846087a":"code","bbad5461":"code","361ca597":"code","89b86eef":"code","a0735708":"code","46cefd85":"code","8694cff8":"code","891ae508":"code","f9928919":"code","652a6dd0":"code","0eff3d87":"code","9f6ccc6e":"code","5c8dece4":"code","70ad0f75":"code","81fd2efd":"code","181ffdfa":"code","d451d4cc":"code","5b09dc79":"code","53fe859e":"code","3d578940":"code","cfbf4a4b":"code","6e582ed0":"code","bd7fab48":"code","32f5e8e8":"code","7b316e87":"code","f0735189":"code","771dcba3":"code","2fe3092a":"code","1fa8a763":"markdown","aa6dc4a0":"markdown","3d8fe9d0":"markdown","4d44c7ac":"markdown","aec43528":"markdown","8fe03646":"markdown","3c4cfa5f":"markdown","b25ca9e5":"markdown","e1ca85ee":"markdown","568d6daf":"markdown","5b1a2b30":"markdown","37cf2c87":"markdown","d801436e":"markdown","64403c9b":"markdown","56fbdbda":"markdown","7aa4911c":"markdown","193a43bb":"markdown","505cc313":"markdown","0a809a93":"markdown","2d1ed3f4":"markdown","736a434f":"markdown","249ae89e":"markdown"},"source":{"ee394199":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3233cb00":"cols = ['Severity', 'Start_Time', 'City', 'County', 'State', 'Temperature(F)',\n        'Humidity(%)', 'Precipitation(in)', 'Weather_Condition',\n       'Traffic_Signal', 'Sunrise_Sunset']\n## Remember to tround latitude and longitude to 2 digits, we're interested in checking if any specific place may has more accidents than others.","058fe9db":"df = pd.read_csv(\"..\/input\/us-accidents\/US_Accidents_Dec20.csv\", usecols=cols)","6ca172a1":"df.head()","a27a4fc6":"df.info()","656c7003":"df.isnull().sum()","4fa1909f":"df['Precipitation(in)'].fillna(0, inplace=True)","4b02ec21":"df.dropna(axis=0, inplace=True)","9bbac835":"df['Start_Time'] = pd.to_datetime(df['Start_Time'])","5111f219":"## Extracting each data from the date. Separating it in it's own column will help with visualizations.\ndf['Week_day'] = df['Start_Time'].dt.dayofweek\ndf['Month'] = df['Start_Time'].dt.month\ndf['Year'] = df['Start_Time'].dt.year","6b9ac32f":"df['Week_day'] = df['Week_day'].map({0:'Monday', 1:'Tuesday', 2: 'Wednesday', 3:'Thursday', 4:'Friday', 5:'Saturday', 6:'Sunday'})\ndf['Month'] = df['Month'].map({1:'January', 2:'February', 3: 'March', 4:'April', 5:'May', 6:'June', 7:'July',\n                                  8:'August', 9:'September', 10: 'October', 11:'November', 12:'December'})","544c54ee":"df.drop(\"Start_Time\", axis=1, inplace=True)","50699265":"df.head()","b140bb5a":"df.head()","5c103808":"import plotly\nimport plotly.graph_objs as go\nimport plotly.offline as py","fe276b19":"plotly.offline.init_notebook_mode(connected=True)","45bbae30":"severity = df['Severity'].groupby(by=df['Severity']).count()\nseverity","920d4dbb":"#Selecting data to plot\ndata = [go.Pie(labels=severity.index,\n               values=severity.values,\n               direction='clockwise')\n       ]\n\n# Editing style\nlayout = go.Layout(title='Severity of accidents',\n                   width=600,\n                   height=600                   \n                  )\n#Creating figure\nfig = go.Figure(data=data, layout=layout)\n\n## Plotting\npy.iplot(fig)","df60f03a":"accidents_years = pd.DataFrame(df['Year'].groupby(df['Year']).count())\naccidents_years","78d7667d":"data = [go.Bar(x=[2016,2017,2018,2019,2020],\n               y=accidents_years['Year'])]\n\nlayout = go.Layout(title='Accidents by year 2016-June 2020',\n                   xaxis={'title':'Year'},\n                   yaxis={'title':'Number of accidents'},\n                   width=700,\n                   height=600)\n\n\nfig = go.Figure(data=data, layout=layout)\nfig.update_yaxes(nticks=4)\n\npy.iplot(fig)","6accd508":"m2016 = pd.DataFrame(df['Month'].groupby(by=df['Month'].loc[df['Year']==2016]).count())\n\nm2017 = pd.DataFrame(df['Month'].groupby(by=df['Month'].loc[df['Year']==2017]).count())\n\nm2018 = pd.DataFrame(df['Month'].groupby(df['Month'].loc[df['Year']==2018]).count())\n\nm2019 = pd.DataFrame(df['Month'].groupby(df['Month'].loc[df['Year']==2019]).count())\n\nm2020 = pd.DataFrame(df['Month'].groupby(df['Month'].loc[df['Year']==2020]).count())\n\n## First we filter the data by Month and then, count the times the month appear in a year (indexed by loc)\n## Remember \"Month\" at the left is index, \"month\" at the right is the column, this will be usefull when creating a new organized dataframe later on","bf506706":"accidents_months_2016 = pd.DataFrame({'Month of the year - 2016': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n               'Total Accidents':          [0, \n                                            m2016['Month'].loc[m2016.index=='February'].sum(),      \n                                            m2016['Month'].loc[m2016.index=='March'].sum(), \n                                            m2016['Month'].loc[m2016.index=='April'].sum(), \n                                            m2016['Month'].loc[m2016.index=='May'].sum(),\n                                            m2016['Month'].loc[m2016.index=='June'].sum(), \n                                            m2016['Month'].loc[m2016.index=='July'].sum(), \n                                            m2016['Month'].loc[m2016.index=='August'].sum(),  \n                                            m2016['Month'].loc[m2016.index=='September'].sum(),      \n                                            m2016['Month'].loc[m2016.index=='October'].sum(), \n                                            m2016['Month'].loc[m2016.index=='November'].sum(), \n                                            m2016['Month'].loc[m2016.index=='December'].sum()]})\naccidents_months_2016","c76be159":"accidents_months_2017 = pd.DataFrame({'Month of the year - 2017': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n                                      'Total Accidents': [m2017['Month'].loc[m2017.index=='January'].sum(), \n                                                          m2017['Month'].loc[m2017.index=='February'].sum(),\n                                                          m2017['Month'].loc[m2017.index=='March'].sum(), \n                                                          m2017['Month'].loc[m2017.index=='April'].sum(), \n                                                          m2017['Month'].loc[m2017.index=='May'].sum(),\n                                                          m2017['Month'].loc[m2017.index=='June'].sum(),\n                                                          m2017['Month'].loc[m2017.index=='July'].sum(), \n                                                          m2017['Month'].loc[m2017.index=='August'].sum(),  \n                                                          m2017['Month'].loc[m2017.index=='September'].sum(),      \n                                                          m2017['Month'].loc[m2017.index=='October'].sum(), \n                                                          m2017['Month'].loc[m2017.index=='November'].sum(), \n                                                          m2017['Month'].loc[m2017.index=='December'].sum()]})","d80cded1":"accidents_months_2018 = pd.DataFrame({'Month of the year - 2018': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n               'Total Accidents':          [m2018['Month'].loc[m2018.index=='January'].sum(), \n                                            m2018['Month'].loc[m2018.index=='February'].sum(),      \n                                            m2018['Month'].loc[m2018.index=='March'].sum(), \n                                            m2018['Month'].loc[m2018.index=='April'].sum(), \n                                            m2018['Month'].loc[m2018.index=='May'].sum(),\n                                            m2018['Month'].loc[m2018.index=='June'].sum(), \n                                            m2018['Month'].loc[m2018.index=='July'].sum(), \n                                            m2018['Month'].loc[m2018.index=='August'].sum(),  \n                                            m2018['Month'].loc[m2018.index=='September'].sum(),      \n                                            m2018['Month'].loc[m2018.index=='October'].sum(), \n                                            m2018['Month'].loc[m2018.index=='November'].sum(), \n                                            m2018['Month'].loc[m2018.index=='December'].sum()]})\naccidents_months_2018","425bca77":"accidents_months_2019 = pd.DataFrame({'Month of the year - 2019': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n               'Total Accidents':          [m2019['Month'].loc[m2019.index=='January'].sum(), \n                                            m2019['Month'].loc[m2019.index=='February'].sum(),      \n                                            m2019['Month'].loc[m2019.index=='March'].sum(), \n                                            m2019['Month'].loc[m2019.index=='April'].sum(), \n                                            m2019['Month'].loc[m2019.index=='May'].sum(),\n                                            m2019['Month'].loc[m2019.index=='June'].sum(), \n                                            m2019['Month'].loc[m2019.index=='July'].sum(), \n                                            m2019['Month'].loc[m2019.index=='August'].sum(),  \n                                            m2019['Month'].loc[m2019.index=='September'].sum(),      \n                                            m2019['Month'].loc[m2019.index=='October'].sum(), \n                                            m2019['Month'].loc[m2019.index=='November'].sum(), \n                                            m2019['Month'].loc[m2019.index=='December'].sum()]})\naccidents_months_2019","49688be3":"accidents_months_2020 = pd.DataFrame({'Month of the year - 2020': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n               'Total Accidents':          [m2020['Month'].loc[m2020.index=='January'].sum(), \n                                            m2020['Month'].loc[m2020.index=='February'].sum(),      \n                                            m2020['Month'].loc[m2020.index=='March'].sum(), \n                                            m2020['Month'].loc[m2020.index=='April'].sum(), \n                                            m2020['Month'].loc[m2020.index=='May'].sum(),\n                                            m2020['Month'].loc[m2020.index=='June'].sum(), \n                                            m2020['Month'].loc[m2020.index=='July'].sum(), \n                                            m2020['Month'].loc[m2020.index=='August'].sum(),  \n                                            m2020['Month'].loc[m2020.index=='September'].sum(),      \n                                            m2020['Month'].loc[m2020.index=='October'].sum(), \n                                            m2020['Month'].loc[m2020.index=='November'].sum(), \n                                            m2020['Month'].loc[m2020.index=='December'].sum()]})\naccidents_months_2020","244f2e12":"data = [go.Bar(x=accidents_months_2016['Month of the year - 2016'],\n               y=accidents_months_2016['Total Accidents'],\n               name='2016'),\n        go.Bar(x=accidents_months_2017['Month of the year - 2017'],\n               y=accidents_months_2017['Total Accidents'],\n               name='2017'),\n        go.Bar(x=accidents_months_2018['Month of the year - 2018'],\n               y=accidents_months_2018['Total Accidents'],\n               name='2018'),\n        go.Bar(x=accidents_months_2019['Month of the year - 2019'],\n               y=accidents_months_2019['Total Accidents'],\n               name='2019'),\n        go.Bar(x=accidents_months_2020['Month of the year - 2020'],\n               y=accidents_months_2020['Total Accidents'],\n               name='2020')\n        ]\n\nlayout = go.Layout(title='Accidents per month - February 2016 - June 2020',\n                   xaxis={'title':'Month of the year'},\n                   yaxis={'title':'Number of accidents'},\n                   width=1700,\n                   height=700)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig)","c846087a":"day = df.groupby(\"Week_day\")[\"Week_day\"].count()\nday","bbad5461":"day = df['Week_day'].value_counts(sort=True)\nday","361ca597":"d2016 = pd.DataFrame(df['Week_day'].loc[df['Year']==2016].groupby(df['Week_day']).count())\n\nd2017 = pd.DataFrame(df['Week_day'].loc[df['Year']==2017].groupby(df['Week_day']).count())\n\nd2018 = pd.DataFrame(df['Week_day'].loc[df['Year']==2018].groupby(df['Week_day']).count())\n\nd2019 = pd.DataFrame(df['Week_day'].loc[df['Year']==2019].groupby(df['Week_day']).count())\n\nd2020 = pd.DataFrame(df['Week_day'].loc[df['Year']==2020].groupby(df['Week_day']).count())","89b86eef":"d2016","a0735708":"days_2016 = pd.DataFrame({'Day of the week - 2016': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n               'Total Accidents':          [d2016['Week_day'].loc[d2016.index=='Monday'].sum(), \n                                            d2016['Week_day'].loc[d2016.index=='Tuesday'].sum(),      \n                                            d2016['Week_day'].loc[d2016.index=='Wednesday'].sum(), \n                                            d2016['Week_day'].loc[d2016.index=='Thursday'].sum(), \n                                            d2016['Week_day'].loc[d2016.index=='Friday'].sum(),\n                                            d2016['Week_day'].loc[d2016.index=='Saturday'].sum(), \n                                            d2016['Week_day'].loc[d2016.index=='Sunday'].sum()]})\ndays_2016","46cefd85":"days_2017 = pd.DataFrame({'Day of the week - 2017': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n               'Total Accidents':          [d2017['Week_day'].loc[d2017.index=='Monday'].sum(), \n                                            d2017['Week_day'].loc[d2017.index=='Tuesday'].sum(),      \n                                            d2017['Week_day'].loc[d2017.index=='Wednesday'].sum(), \n                                            d2017['Week_day'].loc[d2017.index=='Thursday'].sum(), \n                                            d2017['Week_day'].loc[d2017.index=='Friday'].sum(),\n                                            d2017['Week_day'].loc[d2017.index=='Saturday'].sum(), \n                                            d2017['Week_day'].loc[d2017.index=='Sunday'].sum()]})\ndays_2017","8694cff8":"days_2018 = pd.DataFrame({'Day of the week - 2018': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n               'Total Accidents':          [d2018['Week_day'].loc[d2018.index=='Monday'].sum(), \n                                            d2018['Week_day'].loc[d2018.index=='Tuesday'].sum(),      \n                                            d2018['Week_day'].loc[d2018.index=='Wednesday'].sum(), \n                                            d2018['Week_day'].loc[d2018.index=='Thursday'].sum(), \n                                            d2018['Week_day'].loc[d2018.index=='Friday'].sum(),\n                                            d2018['Week_day'].loc[d2018.index=='Saturday'].sum(), \n                                            d2018['Week_day'].loc[d2018.index=='Sunday'].sum()]})\ndays_2018","891ae508":"days_2019 = pd.DataFrame({'Day of the week - 2019': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n               'Total Accidents':          [d2019['Week_day'].loc[d2019.index=='Monday'].sum(), \n                                            d2019['Week_day'].loc[d2019.index=='Tuesday'].sum(),      \n                                            d2019['Week_day'].loc[d2019.index=='Wednesday'].sum(), \n                                            d2019['Week_day'].loc[d2019.index=='Thursday'].sum(), \n                                            d2019['Week_day'].loc[d2019.index=='Friday'].sum(),\n                                            d2019['Week_day'].loc[d2019.index=='Saturday'].sum(), \n                                            d2019['Week_day'].loc[d2019.index=='Sunday'].sum()]})\ndays_2019","f9928919":"days_2020 = pd.DataFrame({'Day of the week - 2020': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n               'Total Accidents':          [d2020['Week_day'].loc[d2020.index=='Monday'].sum(), \n                                            d2020['Week_day'].loc[d2020.index=='Tuesday'].sum(),      \n                                            d2020['Week_day'].loc[d2020.index=='Wednesday'].sum(), \n                                            d2020['Week_day'].loc[d2020.index=='Thursday'].sum(), \n                                            d2020['Week_day'].loc[d2020.index=='Friday'].sum(),\n                                            d2020['Week_day'].loc[d2020.index=='Saturday'].sum(), \n                                            d2020['Week_day'].loc[d2020.index=='Sunday'].sum()]})\ndays_2020","652a6dd0":"data = [go.Bar(x=days_2016['Day of the week - 2016'],\n               y=days_2016['Total Accidents'],\n               name='2016'),\n        go.Bar(x=days_2017['Day of the week - 2017'],\n               y=days_2017['Total Accidents'],\n               name='2017'),\n        go.Bar(x=days_2018['Day of the week - 2018'],\n               y=days_2018['Total Accidents'],\n               name='2018'),\n        go.Bar(x=days_2019['Day of the week - 2019'],\n               y=days_2019['Total Accidents'],\n               name='2019'),\n        go.Bar(x=days_2020['Day of the week - 2020'],\n               y=days_2020['Total Accidents'],\n               name='2020')]\n\nlayout = go.Layout(title='Accidents per day - February 2016 - June 2020',\n                   xaxis={'title':'Day of the week'},\n                   yaxis={'title':'Number of accidents'},\n                   width=1700,\n                   height=700)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(data)","0eff3d87":"cities = df['City'].value_counts()[df['City'].value_counts()>10000]\ncities\n## You can change the value on the first line to filter less or more cities with the amount the accidents you want to check","9f6ccc6e":"data = [go.Bar(x=cities.index,\n               y=cities.values,\n               name='Cities')]\n\nlayout = go.Layout(title='Accidents per City - 2016 - 2019',\n                   yaxis={'title':'Number of accidents'},\n                   width=1700,\n                   height=700)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig)","5c8dece4":"county = df['County'].value_counts()[df['County'].value_counts()>10000]\ncounty","70ad0f75":"data = [go.Bar(x=county.index,\n               y=county.values,\n               name='County')]\n\nlayout = go.Layout(title='Accidents per County - 2016 - 2019',\n                   yaxis={'title':'Number of accidents'},\n                   width=1700,\n                   height=700)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig)","81fd2efd":"state = df['State'].value_counts()\nstate","181ffdfa":"data = [go.Bar(x=state.index,\n               y=state.values,\n               name='State')]\n\nlayout = go.Layout(title='Accidents per State - 2016 - 2019',\n                   yaxis={'title':'Number of accidents'},\n                   width=1700,\n                   height=700)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig)","d451d4cc":"range_temp = pd.cut(df['Temperature(F)'], 5)\nrange_temp.unique()","5b09dc79":"df.loc[ (df['Temperature(F)'] > -33) & (df['Temperature(F)'] <= 10), 'Temperature(F)']=1\ndf.loc[ (df['Temperature(F)'] > 10) & (df['Temperature(F)'] <= 50), 'Temperature(F)']=2\ndf.loc[ (df['Temperature(F)'] > 50) & (df['Temperature(F)'] <= 90), 'Temperature(F)']=3\ndf.loc[ (df['Temperature(F)'] > 90) & (df['Temperature(F)'] <= 130),'Temperature(F)' ]=4\ndf.loc[  df['Temperature(F)'] > 130, 'Temperature(F)']=5","53fe859e":"temp_values = df['Temperature(F)'].value_counts()\ntemp_values","3d578940":"data = [go.Bar(x=temp_values.index,\n               y=temp_values.values,\n               name='Temperature')]\n\nlayout = go.Layout(title='Accidents per Temperature - 2016 - 2019',\n                   yaxis={'title':'Number of accidents'},\n                   width=1200,\n                   height=500)\n\nfig = go.Figure(data=data, layout=layout)\n\nfig.add_annotation(x=1,y=0,text=\"-30-10 F\")\nfig.add_annotation(x=2,y=0,text=\"10-50 F\")\nfig.add_annotation(x=3,y=0,text=\"50-90 F\")\nfig.add_annotation(x=4,y=0,text=\"90-130 F\")\nfig.add_annotation(x=5,y=0,text=\">130 F\")\n\npy.iplot(fig)","cfbf4a4b":"df.loc[ (df['Humidity(%)'] > 0) & (df['Humidity(%)'] <= 20), 'Humidity(%)']=1\ndf.loc[ (df['Humidity(%)'] > 20) & (df['Humidity(%)'] <= 40), 'Humidity(%)' ]=2\ndf.loc[ (df['Humidity(%)'] > 40) & (df['Humidity(%)'] <= 60), 'Humidity(%)']=3\ndf.loc[ (df['Humidity(%)'] > 60) & (df['Humidity(%)'] <= 80),'Humidity(%)' ]=4\ndf.loc[  df['Humidity(%)'] > 80, 'Humidity(%)']=5","6e582ed0":"df['Humidity(%)'].unique()","bd7fab48":"hum = df['Humidity(%)'].value_counts()\nhum","32f5e8e8":"data = [go.Bar(x=hum.index,y=hum.values,name='Humidity')]\n\nlayout = go.Layout(title='Accidents according to Humitity',xaxis={'title':'Humidity'}, yaxis={'title':'Accidents'}, width=1200,\n                   height=500)\n\nfig = go.Figure(data=data,layout=layout)\n\nfig.add_annotation(x=1,y=0,text=\"0-20 [%]\")\nfig.add_annotation(x=2,y=0,text=\"20-40 [%]\")\nfig.add_annotation(x=3,y=0,text=\"40-60 [%]\")\nfig.add_annotation(x=4,y=0,text=\"60-80 [%]\")\nfig.add_annotation(x=5,y=0,text=\"80-100 [%] F\")\n\n\npy.iplot(fig)","7b316e87":"ts = df['Traffic_Signal'].value_counts()","f0735189":"data = [go.Pie(labels=ts.index,\n               values=ts.values,\n               direction='clockwise')\n       ]\n\nlayout = go.Layout(title='Near a traffic light?',\n                   width=600,\n                   height=600)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig)","771dcba3":"ss = df['Sunrise_Sunset'].value_counts()","2fe3092a":"data = [go.Pie(labels=ss.index,\n               values=ss.values,\n               direction='clockwise')\n       ]\n\nlayout = go.Layout(title='Day or Night?',\n                   width=600,\n                   height=600)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig)","1fa8a763":"We'll now extract day, month and year from the Start_Time feature, let's try to make some cool graphs with the separated columns","aa6dc4a0":"From the dataset page, we know that the dataset contain lots of columns. I think some of them are not very useful, so, we'll first check the columns and import only the meaningful ones. All removed columns will have a discussion on why they were excluded.","3d8fe9d0":"# Removal or edition of blank cells","4d44c7ac":"Now, let's convert our Week_day into text, 0 will be Monday and 6 will be Sunday.\n\nWe'll do the same for the month, 1 will be January and 12 December. This will make our graphs easier to read.","aec43528":"## Severity Data","8fe03646":"Well, that's a lot of features!\n\nLet's first removing the following:\n\n- ID: Not necessary, we can count the amount of accidents without it.\n- Source: It only shows the source from the data\n- TMCA: It only describe a code that is related to extra details of the event, not useful for this analysis.\n- End_Time: It's not relevant when the accident ended, as it's supposed to end in the same day.\n- Start_lat: We already have data from cities. If we need more detailed analisys on a specific location, we can use this data. \n- Start_Lng: We already have data from cities\n- End_Lat: Column is empty\n- End_Lng: Column is empty\n- Distance: Does not affect our visualisations goal\n- Description: Too many unique values\n- Number: It shows the street, number, as accidents happen everywhere in US, I don't believe there's a relation to the street number and accidents.\n- Street: Too many unique values, same as above.\n- Side: It only serves to show that the side Right has way more accidents. I guess left is related to inverted streets (like in UK)\n- Zipcode: Too many unique values, the data from City\/County\/State already have this information\n- Country: All accidents are in US Territory.\n- Airport_Code: It only shows the code of a nearbt airport, some accidents may don't have it.\n- Weather_Timestamp: We can get this data from temperature and time already.\n- Wind_Direction: This may be useful for a specific accident analisys, as the wind may interefere in driving, but this does not apply for an analisys on all accidents\n- Wind_Speed: Has lots of missing values, so we'll remove as this may affect analysis.\n- Wind_Chill(F): The temperature already speaks for it.\n- All Boolean columns, except Traffic_Signal: They only show True or False values and the count for each one can already be seen on the dataset page. Traffic_Signal has a different value from all others and may be useful to take a deeper look into it.\n- Nautical_Twilight, Astronomical_Twilight: I guess the only important thing is if day or night in the local, of if it's day or night on civil twilight, as some of them may be related to more accidents due to leaving or arriving work\/home.\n\nRemoved after a first analysis\n\n- Timezone: Not useful for out visualisation goal\n- Pressure: Not useful\n- Visibility: Most of accidents have good visibility\n- Precipitation(in): The huge majority of accidents happens on precipitation values lower than 0.25\n","3c4cfa5f":"Now, our dataset is more clean and organized. Let's now edit our data!","b25ca9e5":"# Data checking","e1ca85ee":"In total, we removed most of the columns!","568d6daf":"# Columns on Dataset","5b1a2b30":"I assume that those lines with no precipitaion in it are cases in there was no rain, so we'll input a 0 on these lines.\nRegarding the other columns, we'll simply remove the lines. As we have many columns, it won't harm to remove a few lines from it.","37cf2c87":"The average number of accidents per month in each year, just keeps increasing. Did something happened during this period? Or just more data was collected?\n\nOnly a deeper analisys on the change on Traffic laws in US in this period can help in that. Also, an analisys on how the data was collected during these 4 years.\n","d801436e":"## Plotting the Data","64403c9b":"And now we'll remove all other rows with NaN values, the dataset is large enough, so this won't affect it heavily.","56fbdbda":"Look on how we decreased our data usage! Let's decrease even more by removing lines that are blank or need some edition!","7aa4911c":"We need to order tha data from 0 to 6 in the first column. Since I wasn't able to figure this out, I'll manually create it.","193a43bb":"- [String] ID - This is a unique identifier of the accident record.\n\n- [String] Source - Indicates source of the accident report (i.e. the API which reported the accident.).\n\n- [Number] TMCA - traffic accident may have a Traffic Message Channel (TMC) code which provides more detailed description of the event.\n\n- [String] Severity - Shows the severity of the accident, a number between 1 and 4, where 1 indicates the least impact on traffic (i.e., short delay as a result of the accident) and 4 indicates a significant impact on traffic (i.e., long delay).\n\n- [Date] Start_Time - Shows start time of the accident in local time zone.\n\n- [Date] End_Time - Shows end time of the accident in local time zone.\n\n- [Decimal] Start_Lat - Shows latitude in GPS coordinate of the start point.\n\n- [Decimal] Start_Lng - Shows longitude in GPS coordinate of the start point.\n\n- [UUID] End_Lat - Shows latitude in GPS coordinate of the end point.\n\n- [UUID] End_Lng - Shows longitude in GPS coordinate of the end point.\n\n- [Number] Distance(mi) - The length of the road extent affected by the accident.\n\n- [String] Description - Shows natural language description of the accident.\n\n- [Number] Number - Shows the street number in address field.\n\n- [String] Street - Shows the street name in address field.\n\n- [String] Side - Shows the relative side of the street (Right\/Left) in address field.\n\n- [String] City - Shows the city in address field.\n\n- [String] County - Shows the county in address field.\n\n- [String] State - Shows the state in address field.\n\n- [String] Zipcode - Shows the zipcode in address field.\n\n- [Country] Country - Shows the country in address field.\n\n- [String] Timezone - Shows timezone based on the location of the accident (eastern, central, etc.).\n\n- [String] Airport_Code - Denotes an airport-based weather station which is the closest one to location of the accident.\n\n- [Date] Weather_Timestamp - Shows the time-stamp of weather observation record (in local time).\n\n- [Number] Temperature(F) - Shows the temperature (in Fahrenheit).\n\n- [Number] Wind_Chill(F) - Shows the wind chill (in Fahrenheit).\n\n- [Number] Humidity(%) - Shows the humidity (in percentage).\n\n- [Number] Pressure(in) - Shows the air pressure (in inches).\n\n- [Number] Visibility(mi) - Shows visibility (in miles).\n\n- [String] Wind_Direction - Shows wind direction.\n\n- [Number] Wind_Speed(mph) - Shows wind speed (in miles per hour).\n\n- [Number] Precipitation(in) - Shows precipitation amount in inches, if there is any.\n\n- [String] Weather_Condition - Shows the weather condition (rain, snow, thunderstorm, fog, etc.).\n\n- [Boolean] Amenity - A Point-Of-Interest (POI) annotation which indicates presence of amenity in a nearby location.\n\n- [Boolean] Bump - A POI annotation which indicates presence of speed bump or hump in a nearby location.\n\n- [Boolean] Crossing - A POI annotation which indicates presence of crossing in a nearby location.\n\n- [Boolean] Give_Way - A POI annotation which indicates presence of give_way sign in a nearby location.\n\n- [Boolean] Junction - A POI annotation which indicates presence of junction in a nearby location.\n\n- [Boolean] No_Exit - A POI annotation which indicates presence of no_exit sign in a nearby location.\n\n- [Boolean] Railway - A POI annotation which indicates presence of railway in a nearby location.\n\n- [Boolean] Roundabout - A POI annotation which indicates presence of roundabout in a nearby location.\n\n- [Boolean] Station - A POI annotation which indicates presence of station (bus, train, etc.) in a nearby location.\n\n- [Boolean] Stop - A POI annotation which indicates presence of stop sign in a nearby location.\n\n- [Boolean] Traffic_Calming - A POI annotation which indicates presence of traffic_calming means in a nearby location.\n\n- [Boolean] Traffic_Signal - A POI annotation which indicates presence of traffic_signal in a nearby location.\n\n- [Boolean] Turning_Loop - A POI annotation which indicates presence of turning_loop in a nearby location.\n\n- [String] Sunrise_Sunset - Shows the period of day (i.e. day or night) based on sunrise\/sunset.\n\n- [String] Civil_Twilight - Shows the period of day (i.e. day or night) based on civil twilight.\n\n- [String] Nautical_Twilight - Shows the period of day (i.e. day or night) based on nautical twilight.\n\n- [String] Astronomical_Twilight - Shows the period of day (i.e. day or night) based on astronomical twilight.","505cc313":"According to: https:\/\/www.pstriallaw.com\/car-accidents\/facts-and-statistics\/\n\nThe main causes of car crashes that our offices sees in Houston and beyond include:\n\n**Drunk Driving**\nHarris County had the most drunk-driving crashes in the state in both 2012 and 2013, according to MADD.\n\n**Distracted Driving**\nAll it takes is a few seconds of looking down a cell phone to trigger a crash. Many rear-end collisions are caused by distracted driving.\n\n**Aggressive Driving**\nAggressive driving is when someone intentionally violates traffic laws and places other drivers in danger, like speeding, swerving between lanes, running red lights and tailgating.\n\nFor a more specific look at what causes accidents on our road, according to state statistics, here are some of the most common causes of accidents in Texas:\n\n**Speeding**\nDriver inattention\nFailing to yield at a left turn\nUnsafe lane change\nFollowing too closely\nFailing to yield at a stop sign\nDriving too slowly\nFailing to yield in private drives\nDriving while intoxicated","0a809a93":"This will be a **visual** analisys about accidents in U.S. I hope to extract some useful insights from the data we'll plot. It will be my second practice with the Plotly libray, which I personally liked more as it has a better visual and also has friendly graphs.\n\nIf you like these visualisations, please give me a upvote or leave a comment, I highly appreciate that and this will keep me motivated to keep learning more :)","2d1ed3f4":"Houston has a very different number of accidents than the others, the growth is huge when compared with the previous cities.","736a434f":"# Data edition","249ae89e":"We see a lof of missing values on Precipitation, we'll fill these with a 0, as I suppose if there's no value there was no rain at the time of the accident."}}