{"cell_type":{"de1ee0e2":"code","f60e34e5":"code","3bd500ef":"code","7d24c1de":"code","d7a11a12":"code","012f8128":"code","f3ebf205":"code","9c3d47c7":"code","c21f0759":"code","17247230":"code","9a19c193":"code","4c4f097d":"code","5d68487b":"code","0781c0ee":"code","f4c7a511":"code","6ca1104c":"code","810f6eb2":"code","b8b8f95d":"code","deec8ba0":"code","90b542ad":"code","51da72f8":"code","07b4f2f1":"code","a9e9aaeb":"code","30771008":"code","6a3ad630":"code","209bbffd":"code","f8b6279f":"code","fc85add8":"code","c61fea6f":"code","898755ba":"code","de5bde20":"code","0fc42dac":"code","3c500384":"code","345fc41a":"code","84e40607":"code","09794ac0":"code","2c011939":"code","fe5ded89":"code","81209dd0":"code","8118830b":"code","b04d9e2e":"code","a59b992f":"code","97d78444":"code","efe2961c":"code","c481ad45":"code","6a3400b3":"code","840aef47":"code","cc979e2f":"code","338d8875":"code","82c8039e":"markdown","fbb24f48":"markdown","172b65d8":"markdown","f20641c9":"markdown","333663dd":"markdown","7e36caf2":"markdown","447ea36a":"markdown","63372be5":"markdown","528d4838":"markdown","704fc236":"markdown","46203ac9":"markdown","b6648878":"markdown","eadf8e97":"markdown","f7e4c0a7":"markdown","2d87f4c8":"markdown","d1e87c87":"markdown","0cc05c0c":"markdown","5773e1c9":"markdown","b8265472":"markdown","799caeee":"markdown","052aaffd":"markdown","5cffbed5":"markdown"},"source":{"de1ee0e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f60e34e5":"red_df=pd.read_csv('\/kaggle\/input\/wine-quality-selection\/winequality-red.csv')\n#white_df=pd.read_csv('\/kaggle\/input\/wine-quality-selection\/winequality-white.csv')","3bd500ef":"red_df.describe()","7d24c1de":"red_df.info()","d7a11a12":"red_df.head(2)","012f8128":"import seaborn as sns\nimport matplotlib.pyplot as plt \n\n\nplt.rcParams[\"patch.force_edgecolor\"] = True\nsns.set_style('darkgrid')","f3ebf205":"wine_quality = {\n    3:'Three',\n    4:'Four',\n    5:'Five',\n    6:'Six',\n    7:'Seven',\n    8:'Eight'\n}","9c3d47c7":"red_df['quality']= red_df['quality'].replace(wine_quality)","c21f0759":"red_df['quality'].unique()","17247230":"sns.pairplot(red_df)","9a19c193":"red_df.loc[:,'citric acid':'total sulfur dioxide'].describe()","4c4f097d":"plt.figure(figsize=(15,15))\nsns.boxplot(data = red_df.iloc[:,2:])\nplt.ylim(0,100)","5d68487b":"sns.distplot(red_df['total sulfur dioxide'], bins=50)","0781c0ee":"#red_df[red_df['total sulfur dioxide']>100]['total sulfur dioxide'].count()","f4c7a511":"iq1 = red_df.quantile(0.25)\niq3 = red_df.quantile(0.75)\nIQR  = iq3- iq1","6ca1104c":"IQR","810f6eb2":"red_df.skew()","b8b8f95d":"print(red_df[['residual sugar', 'chlorides', 'free sulfur dioxide',\n       'total sulfur dioxide','sulphates']].quantile(0.10))","deec8ba0":"print(red_df[['residual sugar', 'chlorides', 'free sulfur dioxide',\n       'total sulfur dioxide','sulphates']].quantile(0.90))","90b542ad":"#red_df[red_df['residual sugar'] <= 3.6]['residual sugar']","51da72f8":"red_df['residual sugar'] = red_df['residual sugar'].apply(lambda x: 3.6 if (x >3.6) else x)\nred_df['chlorides'] = red_df['chlorides'].apply(lambda x: 0.109 if (x >0.109) else x)\nred_df['free sulfur dioxide'] = red_df['free sulfur dioxide'].apply(lambda x: 31.000 if (x >31.000) else x)\nred_df['total sulfur dioxide'] = red_df['total sulfur dioxide'].apply(lambda x: 93.200 if (x >93.200) else x)\nred_df['sulphates'] = red_df['sulphates'].apply(lambda x: 0.850 if (x >0.850) else x)\n","07b4f2f1":"red_df.skew()","a9e9aaeb":"red_df.info()","30771008":"corr_matrix = red_df.corr()","6a3ad630":"sns.heatmap(corr_matrix, cmap='magma',annot=True, lw=2, linecolor='white')","209bbffd":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()","f8b6279f":"red_df.iloc[:,:11] = scaler.fit_transform(red_df.iloc[:,:11])","fc85add8":"sns.countplot(red_df['quality'])\n","c61fea6f":"red_df['quality'].value_counts()","898755ba":"from imblearn.over_sampling import SMOTE","de5bde20":"smote = SMOTE()","0fc42dac":"X = red_df.iloc[:,:11]\ny= red_df['quality']","3c500384":"X_res, y_res = smote.fit_resample(X,y)","345fc41a":"from sklearn.model_selection import train_test_split","84e40607":"X_train, X_test, y_train, y_test = train_test_split(X_res,y_res, test_size=0.3, random_state=101)","09794ac0":"from sklearn.neighbors import KNeighborsClassifier","2c011939":"cls = KNeighborsClassifier()","fe5ded89":"cls.fit(X_train, y_train)","81209dd0":"y_pred = cls.predict(X_test)","8118830b":"from sklearn.metrics import classification_report, confusion_matrix","b04d9e2e":"print(\"Classification Report: \\n\", classification_report(y_test, y_pred))\nprint(\"Confusion Matrix: \\n\", confusion_matrix(y_test, y_pred))","a59b992f":"from sklearn.model_selection import GridSearchCV","97d78444":"params = {\n    'n_neighbors' :[3,5,7,9,11,13,15,19],\n    'weights':['uniform','distance']\n}","efe2961c":"grs_cv = GridSearchCV(estimator=KNeighborsClassifier(), param_grid=params, cv=10,verbose=2)","c481ad45":"grs_cv.fit(X_res,y_res)","6a3400b3":"print(grs_cv.best_params_)\nprint(grs_cv.best_score_)","840aef47":"cls_2 = KNeighborsClassifier(n_neighbors=3,weights='distance')\n","cc979e2f":"cls_2.fit(X_train, y_train)\n\n","338d8875":"y_pred_2 = cls_2.predict(X_test)\nprint(\"Classification Report: \\n\", classification_report(y_test, y_pred_2))\nprint(\"Confusion Matrix: \\n\", confusion_matrix(y_test, y_pred_2))","82c8039e":"# Pairplot mainly for distribution","fbb24f48":"# Inter Quartile Range","172b65d8":"Accuracy is 87% on average","f20641c9":"# Wine Quality -> Numerical -> Categorical","333663dd":"Skewness of outside of range from -1 to 1 are not good. Well atleast to wikipedia lol","7e36caf2":"I wont touch corrs on version 1","447ea36a":"# Data Overviews","63372be5":"# Skewness","528d4838":"# Classification Report and Confusion Matrix","704fc236":"Dependent Feature column have higly imbalanced classes. So, lets use SMOTE for oversampling","46203ac9":"I'll be solving only for red wine dataset. Please fork it and improve it and use them on white wine set","b6648878":"# Dependent Class Imbalances","eadf8e97":"## 10th Quartile","f7e4c0a7":"## 90th Quartile","2d87f4c8":"# Data Splitting","d1e87c87":"# Grid Search CV","0cc05c0c":"# KNN","5773e1c9":"# KNN after GSCV","b8265472":"lets consider values outside of 90th quartile as outliers ","799caeee":"# Replacing Outliers -> 90th quartile","052aaffd":"Above figures and desription displays skewness of data","5cffbed5":"Accuracy is 79% in average"}}