{"cell_type":{"573677d7":"code","b8c33573":"code","da60ecbc":"code","01a39796":"code","79f2104e":"code","0c6c0fce":"code","027a7801":"code","24449b70":"markdown","50ac5a72":"markdown","3763fc1b":"markdown","3f568868":"markdown"},"source":{"573677d7":"import torch\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","b8c33573":"x = np.linspace(0, 0.5, 1000)\n\u03b5 = 0.02 * np.random.randn(x.shape[0])\ny = x + 0.3 * np.sin(2 * np.pi * (x + \u03b5)) + 0.3 * np.sin(4 * np.pi * (x + \u03b5)) + \u03b5\n\nfig, ax = plt.subplots(figsize=(10, 5))\nax.plot(x, y, 'o', markersize=1);","da60ecbc":"!pip3 install pyro-ppl","01a39796":"import pyro\nimport pyro.distributions as dist\nfrom pyro.nn import PyroModule, PyroSample\nimport torch.nn as nn\nfrom pyro.infer.autoguide import AutoDiagonalNormal\nfrom pyro.infer import SVI, Trace_ELBO, Predictive\nfrom tqdm.auto import trange, tqdm","79f2104e":"class Model(PyroModule):\n    def __init__(self, h1=20, h2=20):\n        super().__init__()\n        self.fc1 = PyroModule[nn.Linear](1, h1)\n        self.fc1.weight = PyroSample(dist.Normal(0., 1.).expand([h1, 1]).to_event(2))\n        self.fc1.bias = PyroSample(dist.Normal(0., 1.).expand([h1]).to_event(1))\n        self.fc2 = PyroModule[nn.Linear](h1, h2)\n        self.fc2.weight = PyroSample(dist.Normal(0., 1.).expand([h2, h1]).to_event(2))\n        self.fc2.bias = PyroSample(dist.Normal(0., 1.).expand([h2]).to_event(1))\n        self.fc3 = PyroModule[nn.Linear](h2, 1)\n        self.fc3.weight = PyroSample(dist.Normal(0., 1.).expand([1, h2]).to_event(2))\n        self.fc3.bias = PyroSample(dist.Normal(0., 1.).expand([1]).to_event(1))\n        self.relu = nn.ReLU()\n\n    def forward(self, x, y=None):\n        x = x.reshape(-1, 1)\n        x = self.relu(self.fc1(x))\n        x = self.relu(self.fc2(x))\n        mu = self.fc3(x).squeeze()\n        sigma = pyro.sample(\"sigma\", dist.Uniform(0., 1.))\n        with pyro.plate(\"data\", x.shape[0]):\n            obs = pyro.sample(\"obs\", dist.Normal(mu, sigma), obs=y)\n        return mu","0c6c0fce":"model = Model()\nguide = AutoDiagonalNormal(model)\nadam = pyro.optim.Adam({\"lr\": 1e-3})\nsvi = SVI(model, guide, adam, loss=Trace_ELBO())\n\npyro.clear_param_store()\nbar = trange(20000)\nx_train = torch.from_numpy(x).float()\ny_train = torch.from_numpy(y).float()\nfor epoch in bar:\n    loss = svi.step(x_train, y_train)\n    bar.set_postfix(loss=f'{loss \/ x.shape[0]:.3f}')","027a7801":"predictive = Predictive(model, guide=guide, num_samples=500)\nx_test = torch.linspace(-0.5, 1, 3000)\npreds = predictive(x_test)\n\ny_pred = preds['obs'].T.detach().numpy().mean(axis=1)\ny_std = preds['obs'].T.detach().numpy().std(axis=1)\n\nfig, ax = plt.subplots(figsize=(10, 5))\nax.plot(x, y, 'o', markersize=1)\nax.plot(x_test, y_pred)\nax.fill_between(x_test, y_pred - y_std, y_pred + y_std,\n                alpha=0.5, color='#ffcd3c');","24449b70":"# 3. Training","50ac5a72":"# Simple Bayesian Neural Network in Pyro\nThis is a very simple tutorial that demonstrates how to implement a Bayesian Neural Network in Pyro for regression.\n### References:\n1. Blundell, C., Cornebise, J., Kavukcuoglu, K., & Wierstra, D. (2015). Weight Uncertainty in Neural Networks. ArXiv, [abs\/1505.05424](https:\/\/arxiv.org\/abs\/1505.05424).\n2. Uber Technologies, Inc. (2018). Bayesian Regression Tutorial. Pyro.Ai. http:\/\/pyro.ai\/examples\/bayesian_regression.html\n\n# 1. Data","3763fc1b":"# 4. Prediction","3f568868":"# 2. Model"}}