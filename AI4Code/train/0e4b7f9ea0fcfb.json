{"cell_type":{"c5af76ea":"code","fbadca42":"code","f336b6f3":"code","dfdbd440":"code","20e727c7":"code","0db28e0a":"code","2f90e8d8":"code","6c3730dc":"code","6f927f91":"code","2df94b71":"code","29fe68c1":"code","7095f19b":"code","fdd61166":"code","73f761ec":"code","9f3976e2":"code","80a6f988":"code","3cda607b":"code","080a2d69":"code","918b4f44":"code","1e6203a0":"code","6ce5d797":"code","0abf16f1":"code","01e76a5b":"code","a7f54315":"code","3131566b":"code","8bc211cd":"code","034ebb95":"code","607e3880":"code","79e9a70a":"markdown"},"source":{"c5af76ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fbadca42":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","f336b6f3":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","dfdbd440":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","20e727c7":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","0db28e0a":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf1 = pd.read_csv('..\/input\/cusersmarildownloadsswimmingcsv\/swimming.csv', delimiter=';', nrows = nRowsRead)\ndf1.dataframeName = 'swimming.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","2f90e8d8":"df1.tail(5)","6c3730dc":"df1.shape","6f927f91":"df1.info","2df94b71":"df1.describe()","29fe68c1":"plotPerColumnDistribution(df1, 10, 5)","7095f19b":"plotCorrelationMatrix(df1, 8)","fdd61166":"plotScatterMatrix(df1, 15, 10)","73f761ec":"df1.calories.describe()","9f3976e2":"print (\"Skew is:\", df1.calories.skew())\nplt.hist(df1.calories, color='magenta')\nplt.show()","80a6f988":"target = np.log(df1.calories)\nprint (\"Skew is:\", target.skew())\nplt.hist(target, color='lightgreen')\nplt.show()","3cda607b":"numeric_features = df1.select_dtypes(include=[np.number])\nnumeric_features.dtypes","080a2d69":"corr = numeric_features.corr()\n\nprint (corr['calories'].sort_values(ascending=False)[1:11], '\\n')\nprint (corr['calories'].sort_values(ascending=False)[-10:])","918b4f44":"df1.calories.unique()","1e6203a0":"#Define a function which can pivot and plot the intended aggregate function \ndef pivotandplot(data,variable,onVariable,aggfunc):\n    pivot_var = data.pivot_table(index=variable,\n                                  values=onVariable, aggfunc=aggfunc)\n    pivot_var.plot(kind='bar', color='teal')\n    plt.xlabel(variable)\n    plt.ylabel(onVariable)\n    plt.xticks(rotation=0)\n    plt.show()","6ce5d797":"pivotandplot(df1,'calories','number_of_runs',np.median)","0abf16f1":"# numpy, matplotlib, seaborn\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline","01e76a5b":"# It is a continous variable and hence lets look at the relationship of calories with number_of_runs using a Regression plot\n\n_ = sns.regplot(df1['calories'], df1['number_of_runs'])","a7f54315":"df1.plot(kind='scatter', x='calories', y='number_of_runs', alpha=0.5, color='orangered', figsize = (12,9))\nplt.title('calories And number_of_runs')\nplt.xlabel(\"calories\")\nplt.ylabel(\"number_of_runs\")\nplt.show()","3131566b":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling as pp\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport plotly.express as px","8bc211cd":"trace1 = go.Box(\n    y=df1[\"calories\"],\n    name = 'calories',\n    marker = dict(color = 'rgb(0,63,132)')\n)\ntrace2 = go.Box(\n    y=df1[\"number_of_runs\"],\n    name = 'number_of_runs',\n    marker = dict(color = 'rgb(88, 171, 98)')\n)\n\ndata = [trace1, trace2]\nlayout = dict(autosize=False, width=700,height=500, title='calories', paper_bgcolor='rgb(243, 243, 243)', \n              plot_bgcolor='rgb(243,243,243)', margin=dict(l=40,r=30,b=80,t=100,))\nfig = dict(data=data, layout=layout)\niplot(fig)","034ebb95":"ax = sns.scatterplot(x=\"distance\", y=\"time\", \\\n                     hue=\"favorite\", legend=\"full\", palette = \"BuGn_r\", data=df1)","607e3880":"ax = sns.violinplot(x=\"total_strokes\", y=\"number_of_runs\", data=df1, \n                    inner=None, color=\".8\")\nax = sns.stripplot(x=\"total_strokes\", y=\"number_of_runs\", data=df1, \n                   jitter=True)\nax.set_title('total_strokes vs number_of_runs')\nax.set_ylabel('Fast and furious')","79e9a70a":"Is that a violinplot above? Maybe Vin Diesel smashed my violins. Sniff, sniff."}}