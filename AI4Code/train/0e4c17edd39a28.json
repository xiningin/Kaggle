{"cell_type":{"38a3af17":"code","15fcb9c9":"code","990e4da3":"code","3b04e156":"code","bc5f03ae":"code","37c72d0f":"code","eb1a2174":"code","f3f2af48":"code","9c11201e":"code","d8a79386":"code","2ea62053":"code","13e08b5b":"code","d8d0d36f":"code","3e0a701b":"code","f0c9bfdc":"code","6f0a22de":"code","37c5740f":"code","78cb2271":"code","40f48fb7":"code","9093bb56":"code","63aea778":"code","9b888ff1":"code","d92bf676":"code","2cde5a2c":"markdown","7cef5ae5":"markdown","2bfb4aaf":"markdown","e94097cf":"markdown","eafa36bf":"markdown","2292e410":"markdown"},"source":{"38a3af17":"!curl https:\/\/raw.githubusercontent.com\/pytorch\/xla\/master\/contrib\/scripts\/env-setup.py -o pytorch-xla-env-setup.py\n!python pytorch-xla-env-setup.py --apt-packages libomp5 libopenblas-dev","15fcb9c9":"import gc\nimport os\nimport time\nimport math\nimport random\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom datetime import date\nfrom transformers import *\nfrom sklearn.metrics import *\nfrom tqdm.notebook import tqdm\n\nimport torch\nimport torch.nn as nn\nimport torch.utils.data\nimport torch.nn.functional as F\nimport torch_xla\n\n\nfrom torch import Tensor\nfrom torch.optim import *\nfrom torch.nn.modules.loss import *\nfrom torch.optim.lr_scheduler import * \nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.utils.data.sampler import RandomSampler","990e4da3":"def seed_everything(seed):\n    \"\"\"\n    Seeds basic parameters for reproductibility of results\n    \n    Arguments:\n        seed {int} -- Number of the seed\n    \"\"\"\n    random.seed(seed)\n    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False","3b04e156":"seed = 2020\nseed_everything(seed)","bc5f03ae":"MODEL_PATHS = {\n    'bert-multi-cased': '..\/input\/bertconfigs\/multi_cased_L-12_H-768_A-12\/multi_cased_L-12_H-768_A-12\/',\n}","37c72d0f":"DATA_PATH = '..\/input\/jigsaw-multilingual-toxic-comment-classification\/'\n\ndf_val = pd.read_csv(DATA_PATH + 'validation-processed-seqlen128.csv')\ndf_test =  pd.read_csv(DATA_PATH + 'test-processed-seqlen128.csv')\ndf_train = pd.read_csv(DATA_PATH + 'jigsaw-toxic-comment-train-processed-seqlen128.csv')","eb1a2174":"sns.countplot(df_train['toxic'])\nplt.title('Target repartition on training data')\nplt.show()","f3f2af48":"class JigsawDataset(Dataset):\n    \"\"\"\n    Torch dataset for training and validating\n    \"\"\"\n    def __init__(self, df):\n        super().__init__()\n        self.df = df \n        self.word_ids = np.array([word_ids[1:-1].split(', ') for word_ids in df['input_word_ids']]).astype(int)\n        \n        try:\n            self.y = df['toxic'].values\n        except KeyError: # test data\n            self.y = np.zeros(len(df))\n\n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        return torch.tensor(self.word_ids[idx]), torch.tensor(self.y[idx])","9c11201e":"TRANSFORMERS = {\n    \"bert-multi-cased\": (BertModel, BertTokenizer, \"bert-base-uncased\"),\n}","d8a79386":"class Transformer(nn.Module):\n    def __init__(self, model, num_classes=1):\n        \"\"\"\n        Constructor\n        \n        Arguments:\n            model {string} -- Transformer to build the model on. Expects \"camembert-base\".\n            num_classes {int} -- Number of classes (default: {1})\n        \"\"\"\n        super().__init__()\n        self.name = model\n\n        model_class, tokenizer_class, pretrained_weights = TRANSFORMERS[model]\n\n        bert_config = BertConfig.from_json_file(MODEL_PATHS[model] + 'bert_config.json')\n        bert_config.output_hidden_states = True\n        \n        self.transformer = BertModel(bert_config)\n\n        self.nb_features = self.transformer.pooler.dense.out_features\n\n        self.pooler = nn.Sequential(\n            nn.Linear(self.nb_features, self.nb_features), \n            nn.Tanh(),\n        )\n\n        self.logit = nn.Linear(self.nb_features, num_classes)\n\n    def forward(self, tokens):\n        \"\"\"\n        Usual torch forward function\n        \n        Arguments:\n            tokens {torch tensor} -- Sentence tokens\n        \n        Returns:\n            torch tensor -- Class logits\n        \"\"\"\n        _, _, hidden_states = self.transformer(\n            tokens, attention_mask=(tokens > 0).long()\n        )\n\n        hidden_states = hidden_states[-1][:, 0] # Use the representation of the first token of the last layer\n\n        ft = self.pooler(hidden_states)\n\n        return self.logit(ft)","2ea62053":"def fit(model, train_dataset, val_dataset, epochs=1, batch_size=8, warmup_prop=0, lr=5e-4):\n    \n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n    val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\n\n    optimizer = AdamW(model.parameters(), lr=lr)\n    \n    num_warmup_steps = int(warmup_prop * epochs * len(train_loader))\n    num_training_steps = epochs * len(train_loader)\n    \n    scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps, num_training_steps)\n\n    loss_fct = nn.BCEWithLogitsLoss(reduction='mean').cuda()\n    \n    for epoch in range(epochs):\n        model.train()\n        start_time = time.time()\n        \n        optimizer.zero_grad()\n        avg_loss = 0\n        \n        for step, (x, y_batch) in tqdm(enumerate(train_loader), total=len(train_loader)): \n            \n            y_pred = model(x.to(device))\n            \n            loss = loss_fct(y_pred.view(-1).float(), y_batch.float().to(device))\n            loss.backward()\n            avg_loss += loss.item() \/ len(train_loader)\n\n            xm.optimizer_step(optimizer, barrier=True)\n            #optimizer.step()\n            scheduler.step()\n            model.zero_grad()\n            optimizer.zero_grad()\n                \n        model.eval()\n        preds = []\n        truths = []\n        avg_val_loss = 0.\n\n        with torch.no_grad():\n            for x, y_batch in tqdm(val_loader):                \n                y_pred = model(x.to(device))\n                loss = loss_fct(y_pred.detach().view(-1).float(), y_batch.float().to(device))\n                avg_val_loss += loss.item() \/ len(val_loader)\n                \n                probs = torch.sigmoid(y_pred).detach().cpu().numpy()\n                preds += list(probs.flatten())\n                truths += list(y_batch.numpy().flatten())\n            score = roc_auc_score(truths, preds)\n            \n        \n        dt = time.time() - start_time\n        lr = scheduler.get_last_lr()[0]\n        print(f'Epoch {epoch + 1}\/{epochs} \\t lr={lr:.1e} \\t t={dt:.0f}s \\t loss={avg_loss:.4f} \\t val_loss={avg_val_loss:.4f} \\t val_auc={score:.4f}')","13e08b5b":"import torch_xla\nimport torch_xla.core.xla_model as xm","d8d0d36f":"model = Transformer(\"bert-multi-cased\")\ndevice = xm.xla_device()\nmodel = model.to(device)","3e0a701b":"epochs = 3\nbatch_size = 32\nwarmup_prop = 0.1\nlr = 1e-4","f0c9bfdc":"df_train.shape","6f0a22de":"n = 10000  # I do not train on the entier data as it will take too long (for now)\ntrain_dataset = JigsawDataset(df_train.sample(n))\n#train_dataset = JigsawDataset(df_train)","37c5740f":"val_dataset = JigsawDataset(df_val)\ntest_dataset = JigsawDataset(df_test)","78cb2271":"fit(model, train_dataset, val_dataset, epochs=epochs, batch_size=batch_size, warmup_prop=warmup_prop, lr=lr)","40f48fb7":"def predict(model, dataset, batch_size=64):\n    \"\"\"\n    Usual predict torch function\n    \n    Arguments:\n        model {torch model} -- Model to predict with\n        dataset {torch dataset} -- Dataset to get predictions from\n    \n    Keyword Arguments:\n        batch_size {int} -- Batch size (default: {32})\n    \n    Returns:\n        numpy array -- Predictions\n    \"\"\"\n\n    model.eval()\n    preds = np.empty((0, 1))\n    loader = DataLoader(dataset, batch_size=batch_size, shuffle=False)\n\n    with torch.no_grad():\n        for x, _ in tqdm(loader):\n            probs = torch.sigmoid(model(x.to(device))).detach().cpu().numpy()\n            preds = np.concatenate([preds, probs])\n            \n    return preds","9093bb56":"pred_val = predict(model, val_dataset)","63aea778":"score = roc_auc_score(df_val['toxic'], pred_val)\nprint(f'Scored {score:.4f} on validation data')","9b888ff1":"pred_test = predict(model, test_dataset)","d92bf676":"sub = pd.read_csv(DATA_PATH + 'sample_submission.csv')\nsub['toxic'] = pred_test\nsub.to_csv('submission.csv', index=False)\nsub.head()","2cde5a2c":"# Predicting","7cef5ae5":"# Model","2bfb4aaf":"### This kernel is forked from https:\/\/www.kaggle.com\/theoviel\/bert-pytorch-huggingface-starter\n- Thanks for sharing https:\/\/www.kaggle.com\/theoviel","e94097cf":"### Training with TPU is faster thant Training with GPU\n### 150s 1epoch -> 100s 1epoch","eafa36bf":"# Data","2292e410":"# Training"}}