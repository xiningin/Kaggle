{"cell_type":{"807f7947":"code","23dd2144":"code","160a3ce5":"code","68ce4212":"code","c2bd3016":"code","f6be72b6":"code","6c6229d2":"code","be4c89f2":"code","f97b74f5":"code","558f632c":"code","c4fed0ba":"code","f1782016":"code","47f73555":"code","4cc14a1b":"code","60be75b9":"code","b8870c91":"code","a91c8209":"code","959b2f13":"code","c909733e":"code","cc3ed54c":"markdown","057b8a62":"markdown","a043322d":"markdown","3b6d207e":"markdown","6a7c102b":"markdown","99c26a71":"markdown","f2679c52":"markdown","1cc59f66":"markdown","a5fc73b8":"markdown","7c05cab7":"markdown","74882095":"markdown","06b34716":"markdown","1cdad0a6":"markdown","326c8d87":"markdown","7f392b2d":"markdown","e6bb461c":"markdown"},"source":{"807f7947":"import math, re, os\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\nimport datetime\nimport tqdm\nprint(\"Tensorflow version \" + tf.__version__)\nAUTO = tf.data.experimental.AUTOTUNE","23dd2144":"# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","160a3ce5":"AUTO = tf.data.experimental.AUTOTUNE\n\n# Configuration\nIMAGE_SIZE = [512, 512]\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync","68ce4212":"# Data access\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('tpu-getting-started')\n\nGCS_PATH_SELECT = { # available image sizes\n    192: GCS_DS_PATH + '\/tfrecords-jpeg-192x192',\n    224: GCS_DS_PATH + '\/tfrecords-jpeg-224x224',\n    331: GCS_DS_PATH + '\/tfrecords-jpeg-331x331',\n    512: GCS_DS_PATH + '\/tfrecords-jpeg-512x512'\n}\n\nGCS_PATH = GCS_PATH_SELECT[IMAGE_SIZE[0]]\n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec') # predictions on this dataset should be submitted for the competition","c2bd3016":"CLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']                                                                                                                                               # 100 - 102","f6be72b6":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled = True, ordered = False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # Diregarding data order. Order does not matter since we will be shuffling the data anyway\n    \n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n        \n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads = AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # use data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls = AUTO) # returns a dataset of (image, label) pairs if labeled = True or (image, id) pair if labeld = False\n    return dataset\n\ndef data_augment(image, label):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    # this happens essentially for free on TPU. Data pipeline code is executed on the \"CPU\" part\n    # of the TPU while the TPU itself is computing gradients.\n    image = tf.image.random_flip_left_right(image)\n    return image, label   \n\ndef get_validation_dataset(dataset):\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\nNUM_TRAINING_IMAGES = int(count_data_items(TRAINING_FILENAMES))\nNUM_VALIDATION_IMAGES = int(count_data_items(VALIDATION_FILENAMES))\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\n\nprint('Dataset: {} training images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))","6c6229d2":"def get_mat(rotation, shear, height_zoom, width_zoom, height_shift, width_shift):\n    # returns 3x3 transformmatrix which transforms indicies\n        \n    # CONVERT DEGREES TO RADIANS\n    rotation = math.pi * rotation \/ 180.\n    shear = math.pi * shear \/ 180.\n    \n    # ROTATION MATRIX\n    c1 = tf.math.cos(rotation)\n    s1 = tf.math.sin(rotation)\n    one = tf.constant([1],dtype='float32')\n    zero = tf.constant([0],dtype='float32')\n    rotation_matrix = tf.reshape( tf.concat([c1,s1,zero, -s1,c1,zero, zero,zero,one],axis=0),[3,3] )\n        \n    # SHEAR MATRIX\n    c2 = tf.math.cos(shear)\n    s2 = tf.math.sin(shear)\n    shear_matrix = tf.reshape( tf.concat([one,s2,zero, zero,c2,zero, zero,zero,one],axis=0),[3,3] )    \n    \n    # ZOOM MATRIX\n    zoom_matrix = tf.reshape( tf.concat([one\/height_zoom,zero,zero, zero,one\/width_zoom,zero, zero,zero,one],axis=0),[3,3] )\n    \n    # SHIFT MATRIX\n    shift_matrix = tf.reshape( tf.concat([one,zero,height_shift, zero,one,width_shift, zero,zero,one],axis=0),[3,3] )\n    \n    return K.dot(K.dot(rotation_matrix, shear_matrix), K.dot(zoom_matrix, shift_matrix))","be4c89f2":"def transform(image, label):\n    \n    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n    # output - image randomly rotated, sheared, zoomed, and shifted\n    DIM = IMAGE_SIZE[0]\n    XDIM = DIM%2 #fix for size 331\n    \n    rot = 15. * tf.random.normal([1],dtype='float32')\n    shr = 5. * tf.random.normal([1],dtype='float32') \n    h_zoom = 1.0 + tf.random.normal([1],dtype='float32')\/10.\n    w_zoom = 1.0 + tf.random.normal([1],dtype='float32')\/10.\n    h_shift = 16. * tf.random.normal([1],dtype='float32') \n    w_shift = 16. * tf.random.normal([1],dtype='float32') \n  \n    # GET TRANSFORMATION MATRIX\n    m = get_mat(rot,shr,h_zoom,w_zoom,h_shift,w_shift) \n\n    # LIST DESTINATION PIXEL INDICES\n    x = tf.repeat( tf.range(DIM\/\/2,-DIM\/\/2,-1), DIM )\n    y = tf.tile( tf.range(-DIM\/\/2,DIM\/\/2),[DIM] )\n    z = tf.ones([DIM*DIM],dtype='int32')\n    idx = tf.stack( [x,y,z] )\n    \n    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n    idx2 = K.dot(m,tf.cast(idx,dtype='float32'))\n    idx2 = K.cast(idx2,dtype='int32')\n    idx2 = K.clip(idx2,-DIM\/\/2+XDIM+1,DIM\/\/2)\n    \n    # FIND ORIGIN PIXEL VALUES           \n    idx3 = tf.stack( [DIM\/\/2-idx2[0,], DIM\/\/2-1+idx2[1,]] )\n    d = tf.gather_nd(image,tf.transpose(idx3))\n        \n    return tf.reshape(d,[DIM,DIM,3]), label","f97b74f5":"def get_training_dataset(dataset, batch_size=None, do_aug=True, advanced_aug=True, repeat=True, with_labels=True, drop_remainder=False):\n    \n    if do_aug:\n        dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n        \n    if not with_labels:\n        dataset = dataset.map(lambda image, label: image, num_parallel_calls=AUTO)\n    \n    if advanced_aug:\n        dataset = dataset.map(transform, num_parallel_calls=AUTO)\n    \n    if type(repeat) == bool and repeat:\n        dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    elif type(repeat) == int and repeat > 0:\n        dataset = dataset.repeat(repeat)\n    \n    dataset = dataset.shuffle(2048)\n    \n    if batch_size is None:\n        batch_size = BATCH_SIZE\n    \n    dataset = dataset.batch(batch_size, drop_remainder=drop_remainder)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    \n    return dataset","558f632c":"n_iter = 3\ndataset = load_dataset(TRAINING_FILENAMES, labeled=True)","c4fed0ba":"training_dataset = get_training_dataset(dataset, do_aug=False, advanced_aug=False, repeat=1, with_labels=True)\n\nstart = datetime.datetime.now()\n\nfor i in tqdm.tqdm(range(n_iter)):\n    # Iterate over the whole training dataset\n    for image, labe in training_dataset:\n        pass\n\nend = datetime.datetime.now()\nelapsed = (end - start).total_seconds()\naverage = elapsed \/ n_iter\nprint(\"Average timing for 1 iteration = {}\".format(average))","f1782016":"training_dataset = get_training_dataset(dataset, do_aug=False, advanced_aug=True, repeat=1, with_labels=True)\n\nstart = datetime.datetime.now()\n\nfor i in tqdm.tqdm(range(n_iter)):\n    # Iterate over the whole training dataset\n    for image, labe in training_dataset:\n        pass\n\nend = datetime.datetime.now()\nelapsed = (end - start).total_seconds()\naverage = elapsed \/ n_iter\nprint(\"Average timing for 1 iteration = {}\".format(average))","47f73555":"def get_batch_transformatioin_matrix(rotation, shear, height_zoom, width_zoom, height_shift, width_shift):\n    \"\"\"Returns a tf.Tensor of shape (batch_size, 3, 3) with each element along the 1st axis being\n       an image transformation matrix (which transforms indicies).\n\n    Args:\n        rotation: 1-D Tensor with shape [batch_size].\n        shear: 1-D Tensor with shape [batch_size].\n        height_zoom: 1-D Tensor with shape [batch_size].\n        width_zoom: 1-D Tensor with shape [batch_size].\n        height_shift: 1-D Tensor with shape [batch_size].\n        width_shift: 1-D Tensor with shape [batch_size].\n        \n    Returns:\n        A 3-D Tensor with shape [batch_size, 3, 3].\n    \"\"\"    \n\n    # A trick to get batch_size\n    batch_size = tf.cast(tf.reduce_sum(tf.ones_like(rotation)), tf.int64)    \n    \n    # CONVERT DEGREES TO RADIANS\n    rotation = tf.constant(math.pi) * rotation \/ 180.0\n    shear = tf.constant(math.pi) * shear \/ 180.0\n\n    # shape = (batch_size,)\n    one = tf.ones_like(rotation, dtype=tf.float32)\n    zero = tf.zeros_like(rotation, dtype=tf.float32)\n    \n    # ROTATION MATRIX\n    c1 = tf.math.cos(rotation) # shape = (batch_size,)\n    s1 = tf.math.sin(rotation) # shape = (batch_size,)\n\n    # Intermediate matrix for rotation, shape = (9, batch_size) \n    rotation_matrix_temp = tf.stack([c1, s1, zero, -s1, c1, zero, zero, zero, one], axis=0)\n    # shape = (batch_size, 9)\n    rotation_matrix_temp = tf.transpose(rotation_matrix_temp)\n    # Fianl rotation matrix, shape = (batch_size, 3, 3)\n    rotation_matrix = tf.reshape(rotation_matrix_temp, shape=(batch_size, 3, 3))\n        \n    # SHEAR MATRIX\n    c2 = tf.math.cos(shear) # shape = (batch_size,)\n    s2 = tf.math.sin(shear) # shape = (batch_size,)\n    \n    # Intermediate matrix for shear, shape = (9, batch_size) \n    shear_matrix_temp = tf.stack([one, s2, zero, zero, c2, zero, zero, zero, one], axis=0)\n    # shape = (batch_size, 9)\n    shear_matrix_temp = tf.transpose(shear_matrix_temp)\n    # Fianl shear matrix, shape = (batch_size, 3, 3)\n    shear_matrix = tf.reshape(shear_matrix_temp, shape=(batch_size, 3, 3))    \n    \n\n    # ZOOM MATRIX\n    \n    # Intermediate matrix for zoom, shape = (9, batch_size) \n    zoom_matrix_temp = tf.stack([one \/ height_zoom, zero, zero, zero, one \/ width_zoom, zero, zero, zero, one], axis=0)\n    # shape = (batch_size, 9)\n    zoom_matrix_temp = tf.transpose(zoom_matrix_temp)\n    # Fianl zoom matrix, shape = (batch_size, 3, 3)\n    zoom_matrix = tf.reshape(zoom_matrix_temp, shape=(batch_size, 3, 3))\n    \n    # SHIFT MATRIX\n    \n    # Intermediate matrix for shift, shape = (9, batch_size) \n    shift_matrix_temp = tf.stack([one, zero, height_shift, zero, one, width_shift, zero, zero, one], axis=0)\n    # shape = (batch_size, 9)\n    shift_matrix_temp = tf.transpose(shift_matrix_temp)\n    # Fianl shift matrix, shape = (batch_size, 3, 3)\n    shift_matrix = tf.reshape(shift_matrix_temp, shape=(batch_size, 3, 3))    \n        \n    return tf.linalg.matmul(tf.linalg.matmul(rotation_matrix, shear_matrix), tf.linalg.matmul(zoom_matrix, shift_matrix))\n\n\ndef batch_transform(images):\n    \"\"\"Returns a tf.Tensor of the same shape as `images`, represented a batch of randomly transformed images.\n\n    Args:\n        images: 4-D Tensor with shape (batch_size, width, hight, depth).\n            Currently, `depth` can only be 3.\n        \n    Returns:\n        A 4-D Tensor with the same shape as `images`.\n    \"\"\" \n    \n    # input `images`: a batch of images [batch_size, dim, dim, 3]\n    # output: images randomly rotated, sheared, zoomed, and shifted\n    DIM = images.shape[1]\n    XDIM = DIM % 2  # fix for size 331\n    \n    # A trick to get batch_size\n    batch_size = tf.cast(tf.reduce_sum(tf.ones_like(images)) \/ (images.shape[1] * images.shape[2] * images.shape[3]), tf.int64)\n    \n    rot = 15.0 * tf.random.normal([batch_size], dtype='float32')\n    shr = 5.0 * tf.random.normal([batch_size], dtype='float32') \n    h_zoom = 1.0 + tf.random.normal([batch_size], dtype='float32') \/ 10.0\n    w_zoom = 1.0 + tf.random.normal([batch_size], dtype='float32') \/ 10.0\n    h_shift = 16.0 * tf.random.normal([batch_size], dtype='float32') \n    w_shift = 16.0 * tf.random.normal([batch_size], dtype='float32') \n  \n    # GET TRANSFORMATION MATRIX\n    # shape = (batch_size, 3, 3)\n    m = get_batch_transformatioin_matrix(rot, shr, h_zoom, w_zoom, h_shift, w_shift) \n\n    # LIST DESTINATION PIXEL INDICES\n    x = tf.repeat(tf.range(DIM \/\/ 2, -DIM \/\/ 2, -1), DIM)  # shape = (DIM * DIM,)\n    y = tf.tile(tf.range(-DIM \/\/ 2, DIM \/\/ 2), [DIM])  # shape = (DIM * DIM,)\n    z = tf.ones([DIM * DIM], dtype='int32')  # shape = (DIM * DIM,)\n    idx = tf.stack([x, y, z])  # shape = (3, DIM * DIM)\n    \n    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n    idx2 = tf.linalg.matmul(m, tf.cast(idx, dtype='float32'))  # shape = (batch_size, 3, DIM ** 2)\n    idx2 = K.cast(idx2, dtype='int32')  # shape = (batch_size, 3, DIM ** 2)\n    idx2 = K.clip(idx2, -DIM \/\/ 2 + XDIM + 1, DIM \/\/ 2)  # shape = (batch_size, 3, DIM ** 2)\n    \n    # FIND ORIGIN PIXEL VALUES\n    # shape = (batch_size, 2, DIM ** 2)\n    idx3 = tf.stack([DIM \/\/ 2 - idx2[:, 0, ], DIM \/\/ 2 - 1 + idx2[:, 1, ]], axis=1)  \n    \n    # shape = (batch_size, DIM ** 2, 3)\n    d = tf.gather_nd(images, tf.transpose(idx3, perm=[0, 2, 1]), batch_dims=1)\n        \n    # shape = (batch_size, DIM, DIM, 3)\n    new_images = tf.reshape(d, (batch_size, DIM, DIM, 3))\n\n    return new_images\n\nclass Data_Augmentation_Dummy(tf.keras.layers.Layer):\n    \"\"\"\n    This dummy class is used for measuring timing without the overhead of sending large tensors back to CPU from GPU \/ TPU.\n    Otherwise, it won't be faster then data processing on CPU by tf.data.Dataset API directly (sometimes, even slower).\n    \"\"\"\n    \n    def __init__(self):\n        \n        super(Data_Augmentation_Dummy, self).__init__()\n        \n\n    def build(self, input_shape):  # Create the state of the layer (weights)\n    \n        pass\n        \n    def call(self, inputs):  # Defines the computation from inputs to outputs\n        \n        images = inputs\n        batch_size = tf.cast(tf.reduce_sum(tf.ones_like(images)) \/ (images.shape[1] * images.shape[2] * images.shape[3]), tf.int64)    \n        \n        new_images = batch_transform(images)\n        \n        # We return dummy value here in order to avoid the overhead of sending tensor back to CPU from GPU.\n        # We will make a real one later.\n        return tf.zeros(shape=(batch_size,))","4cc14a1b":"input_layer = tf.keras.layers.InputLayer(\n    input_shape=(IMAGE_SIZE[0], IMAGE_SIZE[1], 3), name='input_layer'\n)\n\ndata_augmentation_layer = Data_Augmentation_Dummy()\n\nwith strategy.scope():\n    \n    model = tf.keras.Sequential([\n        input_layer,\n        data_augmentation_layer\n    ])","60be75b9":"training_dataset = get_training_dataset(dataset, do_aug=False, advanced_aug=False, repeat=1, with_labels=False, drop_remainder=True)\n\nstart = datetime.datetime.now()\n\n    \nfor i in tqdm.tqdm(range(n_iter)):\n    model.predict(training_dataset)\n    \nend = datetime.datetime.now()\nelapsed = (end - start).total_seconds()\naverage = elapsed \/ n_iter\nprint(\"Average timing for 1 iteration = {}\".format(average))","b8870c91":"def batch_to_numpy_images_and_labels(data):\n    \n    images = data\n    numpy_images = images.numpy()\n\n    # If no labels, only image IDs, return None for labels (this is the case for test data)\n    return numpy_images\n\n\ndef display_one_flower(image, title, subplot, red=False, titlesize=16):\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(title) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)\n\n\ndef display_batch_of_images(databatch, predictions=None):\n    \n    \"\"\"This will work with:\n    display_batch_of_images(images)\n    \"\"\"\n    \n    # data\n    images = batch_to_numpy_images_and_labels(databatch)\n    labels = None\n    \n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n        \n    # size and spacing\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # display\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title = '' if label is None else CLASSES[label]\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n    \n    #layout\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()","a91c8209":"training_dataset = get_training_dataset(dataset, batch_size=16, do_aug=False, advanced_aug=False, repeat=1, with_labels=False)\n\nclass Data_Augmentation(tf.keras.layers.Layer):\n    \"\"\"\n    This layer is ready to be used along with image class models.\n    \"\"\"\n    \n    def __init__(self):\n        \n        super(Data_Augmentation, self).__init__()\n        \n\n    def build(self, input_shape):  # Create the state of the layer (weights)\n    \n        pass\n        \n    def call(self, inputs):  # Defines the computation from inputs to outputs\n    \n        new_images = batch_transform(inputs)\n        \n        return new_images\n    \ninput_layer = tf.keras.layers.InputLayer(\n    input_shape=(IMAGE_SIZE[0], IMAGE_SIZE[1], 3), name='input_layer'\n)\n\ndata_augmentation_layer = Data_Augmentation()\n\nwith strategy.scope():\n    \n    model = tf.keras.Sequential([\n        input_layer,\n        data_augmentation_layer\n    ])\n    \n\nimages = next(iter(training_dataset.take(1)))\nprint(images.shape)\nnew_images = model(images)\nprint(new_images.shape)","959b2f13":"display_batch_of_images(images)","c909733e":"display_batch_of_images(new_images)","cc3ed54c":"# Timing without any data augmentation","057b8a62":"# Using GPU \/ TPU","a043322d":"# Data Augmentation in batch form and running on GPU\/TPU.\n\nThis notebook implements a batch form of Chris Deotte's great data augmention in [Rotation Augmentation GPU\/TPU - [0.96+]](https:\/\/www.kaggle.com\/cdeotte\/rotation-augmentation-gpu-tpu-0-96).\n\nIt also shows how to perform data augmentation on GPU \/ TPU directly.\n    \n    * [Important] Although running data augmentation directly on GPU\/TPU is faster, it loses the advantage of separating the data processing on CPU and model training on GPU\/TPU.\n    * Therefore, we don't encourage the idea of using tf.keras.layers.Layer for data augmentation shown in this kernel.\n    * However, the batch implementation is still beneficial when doing data augmentation on CPU by using tf.data.Dataset.\n    * In order to make the measurement of timing, we measure it with a dummy layer which does the data processing in GPU \/ TPU, but return dummy tensor. This is to avoid the overhead of sending large tensor back to CPU.\n","3b6d207e":"# Transformed images","6a7c102b":"# Check data augmentation effect","99c26a71":"# Data Directories","f2679c52":"# Dataset Functions\nFrom starter [kernel][1]\n\n[1]: https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu","1cc59f66":"# Configurations","a5fc73b8":"# Original images","7c05cab7":"# Timing with advanced (Chris Deotte's) data augumentation only","74882095":"# Data Augmentation\nThe following code does random rotations, shear, zoom, and shift using the GPU\/TPU. When an image gets moved away from an edge revealing blank space, the blank space is filled by stretching the colors on the original edge. Change the variables in function `transform()` below to control the desired amount of augmentation. Here's a diagram illustrating the mathematics.\n\n![rotate.JPG](attachment:rotate.JPG)","06b34716":"# An example usage","1cdad0a6":"# Timing with advanced data augumentation run in GPU \/ TPU","326c8d87":"# Use actual Data_Augmentation layer","7f392b2d":"# Classes","e6bb461c":"# Measure timing"}}