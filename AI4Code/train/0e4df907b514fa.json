{"cell_type":{"c7dcbef3":"code","969faa9f":"code","a6d8e96d":"code","6ab4752a":"code","5894465c":"code","a7207adc":"code","05393ddb":"code","55c5d176":"code","607d14f6":"code","3f301b4e":"code","23c1d66f":"code","8541946b":"code","e4aa02fc":"code","c44f97cb":"code","13db6d41":"code","e71eec3f":"code","f41df4b8":"code","0e8836d0":"code","47bacdf4":"code","3f7b74be":"code","3a8b5dbc":"code","845b30f1":"code","a3e52b90":"code","50fec093":"code","78530f3f":"code","635f8de8":"code","1c0bdca2":"code","b23700fa":"code","b5e2b189":"code","a0067e19":"code","ab69148e":"code","bfae744b":"code","48f24c42":"code","b574ca2f":"code","9f3baac8":"code","fb01dfdb":"code","ab08c74d":"code","8acb2a1a":"code","e836ecdf":"code","a5c7ba06":"code","529fb4d4":"code","a650dea9":"code","1f5d086a":"code","87e5594d":"code","31a00569":"code","2051b1c0":"code","eaf67753":"code","dc0d082c":"code","1a56f699":"code","9382b006":"code","ce298db6":"code","463e1d93":"code","1d262f07":"code","79e90f8d":"code","efe40d5c":"code","119ad7ad":"code","602eff4b":"code","c2bb8d33":"code","0341ea7e":"code","cf0c541b":"code","798d75ac":"code","dcdb89bb":"code","784ae86b":"code","be8cdfde":"code","ab1b8d95":"code","a5329a6f":"code","e5bec758":"code","263ffcaa":"code","ba6fa8ec":"code","a8f9c455":"code","084c5014":"code","a07263c0":"code","f14a0b14":"code","c928844f":"code","cb3ec2af":"code","e60082fb":"code","0934b3da":"code","d5b3c88b":"code","47e38d34":"code","4f6640a9":"code","e06aad01":"code","d1f60ab7":"code","66c4267f":"code","98dd24c8":"code","b7ccb0e1":"code","57384ae9":"code","4a967c80":"code","ba1709b3":"code","9508d76b":"code","4c237a40":"code","a7b450fa":"code","6c12b924":"code","e24f8c22":"code","4e3f06c3":"code","306c0154":"code","b4eb8683":"code","072691d7":"code","9847ea1e":"code","b50f12f7":"code","a710b5a9":"code","27698f23":"code","b9fc3f8e":"code","c9a14792":"code","13f6c566":"code","73bc3098":"code","0b218312":"code","5f493375":"code","e0f82840":"code","5ddaf662":"code","5d0674ba":"code","5d8723f6":"code","befb190e":"code","17c4dc8b":"code","1e450dde":"code","07b20e54":"code","617072f5":"code","4253c6aa":"code","93362985":"code","76b9759f":"code","1c35449a":"code","8b16999e":"code","a6ce0615":"code","2b1599d5":"code","f2f6390c":"code","33a8f9eb":"code","17433103":"code","5d68fba8":"code","b4e6a182":"code","ec8ba0b9":"code","4a8e39fb":"code","5faf4460":"code","c0817930":"code","e0c82170":"code","d922de05":"code","fc3fb436":"code","2cba9959":"code","5ba5cbfb":"code","deeb1478":"code","8b8bb6fd":"code","81ca64cb":"code","6c55c9b9":"code","dae11f19":"code","a43fe9e1":"code","080cb197":"code","cd29c636":"code","f068f53d":"code","2d03b68d":"code","df75b5e4":"code","0ccb9681":"code","be251ffc":"code","3e378d5e":"code","d3557b4d":"code","5ef33001":"code","328cf116":"code","ef710d72":"code","fc9629bf":"code","4642ff7f":"code","7384ea5a":"code","e2461105":"code","2b39c9e4":"code","caa2698b":"code","c14f7cf3":"code","fd20bc64":"code","9e620004":"code","fd191aa3":"code","13a93f17":"code","852e19a1":"code","43f22c25":"code","be91a691":"code","b37e54f2":"code","568d474a":"code","55a72e77":"code","04b6208f":"code","7722836b":"code","81a63ffa":"code","591ef754":"markdown","a1b4903d":"markdown","c3757a88":"markdown","351e045d":"markdown","62054749":"markdown","3f98eb2c":"markdown","ded998cb":"markdown","525ba98e":"markdown","3dfbb4fa":"markdown","88436b4f":"markdown","3962fc27":"markdown","566ecae5":"markdown","4978a0d9":"markdown","394875a3":"markdown","cdfc44e7":"markdown","0bfd854b":"markdown","1f165057":"markdown","4f3eedf0":"markdown","1ad698b4":"markdown","7e7fe350":"markdown","5e763f56":"markdown","57482a7b":"markdown","cae9e9ff":"markdown","a5e74aa0":"markdown","cccae53d":"markdown","5a5d8839":"markdown","ff853130":"markdown","d567a26f":"markdown","054ba383":"markdown","67e072b6":"markdown","66d8c46b":"markdown","ba89c251":"markdown","57dde580":"markdown","40ecedc4":"markdown","6183f9c5":"markdown","20c55534":"markdown","051870d6":"markdown","ba50c457":"markdown","6e273fd8":"markdown","d23cfd89":"markdown","90f400fe":"markdown","1b36f17f":"markdown","7ef5b9a2":"markdown","fc7e40eb":"markdown","9f7a4d9f":"markdown","19b04d71":"markdown","22d14be8":"markdown","2317d4d2":"markdown","c7d1aba1":"markdown","8e3382b5":"markdown","7192f73c":"markdown","edbf1831":"markdown","bf559619":"markdown","5fb44204":"markdown","bf9e2dd7":"markdown","79b5bf74":"markdown","c4f42bba":"markdown","70cbc56a":"markdown","155b6e15":"markdown","9970e764":"markdown","085ba68b":"markdown","48097d9c":"markdown","2e44ef52":"markdown","6f11db7b":"markdown"},"source":{"c7dcbef3":"import pandas as pd\nimport numpy as np\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nimport plotly\nimport plotly.express as px\nimport tensorflow as tf \nfrom sklearn.linear_model import LinearRegression, Ridge,Lasso,RidgeCV\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures\nfrom sklearn.model_selection import GridSearchCV, RepeatedKFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.preprocessing import Normalizer\n","969faa9f":"#Set the figure Size for the plots\nplt.rcParams['figure.figsize']=(15,10)","a6d8e96d":"pathIndia='\/kaggle\/input\/covid19-in-india\/'","6ab4752a":"ind=pd.read_csv(f'{pathIndia}covid_19_india.csv',parse_dates=True)\nind_test=pd.read_csv(f'{pathIndia}StatewiseTestingDetails.csv',parse_dates=True)\nind_vaccine=pd.read_csv(f'{pathIndia}covid_vaccine_statewise.csv',parse_dates=True)","5894465c":"ind.head(5)","a7207adc":"#Converting Dates to Datetime Object \nind['Date']=pd.to_datetime(ind['Date'])","05393ddb":"ind.dtypes\n#Hence we confirm that the above operation succeeded or not","55c5d176":"time_series=ind.groupby('Date').sum()","607d14f6":"sns.lineplot(x='Date',y='Confirmed',data=ind,color='black',alpha=0.3)\nsns.lineplot(x='Date',y='Cured',data=ind,color='purple')\nplt.xlabel('Time Frame',fontsize=30)\nplt.ylabel('Confirmed Cases',fontsize=30)\nplt.ticklabel_format(style='plain', axis='y')\nplt.xticks(rotation=60,ticks=['2020-01-30','2020-08-11','2021-03-28','2021-08-11'],fontsize=20)\nplt.yticks(fontsize=20)\nplt.title('Indian Covid Cases Rise from 2020 to 2021',fontsize=30)\nplt.legend(labels=['Cases', 'Cured Patients'],loc=2,borderpad=1,fontsize=25)\n","3f301b4e":"#We create a datetime Index to access the datetime object, alterntively dt can be used\nind['Year']=pd.DatetimeIndex(ind['Date']).year\nind['Month']=pd.DatetimeIndex(ind['Date']).month\nind['Day']=pd.DatetimeIndex(ind['Date']).day","23c1d66f":"#Verification of our changes \nind.head(5)","8541946b":"#Get Data of the year 2020\nind_2020=ind.where(ind['Date'].dt.year==2020)\n#Plotting the timeseries graph\nsns.lineplot(x='Month',y='Confirmed',data=ind_2020,color='black')\nplt.xlabel('Time Frame',fontsize=30)\nplt.ylabel('Confirmed Cases',fontsize=30)\nplt.xlim(0,12)\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\nplt.title('Monthly Case Rise from 2020',fontsize=40)\n","e4aa02fc":"# For the year 2021\nind_2021=ind.where(ind['Date'].dt.year==2021)\nsns.lineplot(x='Month',y='Confirmed',data=ind_2021,color='black')\nplt.xlabel('Time Frame',fontsize=30)\nplt.ylabel('Confirmed Cases',fontsize=30)\nplt.xlim(1,8)\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\nplt.ticklabel_format(style='plain', axis='y')\nplt.title('Monthly Case Rise from 2021',fontsize=40)\n","c44f97cb":"#Monthly Statewise Cases, Deaths, Cure\nmonthly=ind_2020.groupby('State\/UnionTerritory').sum().sort_values('Confirmed',ascending=False)\nmonthly[['Confirmed','Cured','Deaths']].plot(kind='bar',colormap='plasma',grid=True,figsize=(20,6),title='State Wise Analysis of Confirmed Cases, Cured Patients and Deaths', xlabel= 'States', ylabel='Frequency',width=0.8)\nplt.ticklabel_format(style='plain', axis='y')\nplt.ylabel('Frequency', fontsize=30)\nplt.xlabel('States\/UnionTerritory', fontsize=30)\nplt.title('State Wise Analysis of Confirmed Cases, Cured Patients and Deaths in 2020',fontsize=25)\nplt.legend(loc=0,borderpad=1,fontsize=25)\n","13db6d41":"#Monthly Statewise Cases, Deaths, Cure\n\nmonthly=ind_2021.groupby('State\/UnionTerritory').sum().sort_values('Confirmed',ascending=False)\nmonthly[['Confirmed','Cured','Deaths']].plot(kind='bar',colormap='plasma',grid=True,figsize=(18,6),title='Statwesise Analysis of Confirmed Cases, Cured Patients and Deaths', xlabel= 'States', ylabel='Frequency',width=0.8)\nplt.ticklabel_format(style='plain', axis='y')\nplt.ylabel('Frequency', fontsize=30)\nplt.xlabel('States\/UnionTerritory', fontsize=30)\nplt.title('State Wise Analysis of Confirmed Cases, Cured Patients and Deaths in 2021',fontsize=25)\nplt.legend(loc=0,borderpad=1,fontsize=25)","e71eec3f":"# This function calculates the 7 Day average cases for a particular day \ndef compute_7_day(df,column):\n    n=len(df)-1\n    t=0\n    avg=[]\n    while True:\n        if t==n+1:\n            break\n        if t+6<n:\n            average=np.round(df.iloc[t:t+6].mean()[column])\n            avg.append(average)\n        else:\n            end=n-t\n            average=np.round(df.iloc[end:n].mean()[column])\n            avg.append(average)\n        t+=1\n    return avg\n\n            \n        \n    ","f41df4b8":"#We kick-off with Kerala\nkerala=ind.where(ind['State\/UnionTerritory']=='Kerala')\nkerala.dropna(inplace=True)\nkerala.set_index('Date',inplace=True)\nkerala['7DayAvg']=compute_7_day(kerala,'Confirmed')","0e8836d0":"#Verifing our Changes \nkerala.head(5)","47bacdf4":"#plotting for Kerala\nfig,ax=plt.subplots(figsize=(14,10))\n# kerala.Confirmed.plot(kind='bar')\nax.bar(kerala.index,kerala['Confirmed'],width=1.5,color='#611d00',alpha=1,label='Confirmed Patients')\nax.bar(kerala.index,kerala['Cured'],width=0.5,color='#ff6826',alpha=0.85,label='Cured Patients')\nax.plot(kerala.index[0:550],kerala['7DayAvg'].iloc[0:550],color='#ffac88',linewidth=7,label='7-Day Average')\nax.grid(True,color='black',linestyle='-',alpha=0.1)\nplt.ticklabel_format(style='plain', axis='y')\nplt.xlabel('Junauary 2020 to August 2021', fontsize=30)\nplt.ylabel('Frequency', fontsize=30)\nplt.title('The Growth of Covid Cases and Cure Over the Years in Kerala',fontsize=25)\nplt.xticks(ticks=['2020-01-30','2020-08-11','2021-03-28','2021-08-11'],rotation=60,fontsize=30)\nplt.yticks(fontsize=30)\nplt.legend(loc=2,borderpad=1,fontsize=25)","3f7b74be":"#We do the same for Maharashtara\nmh=ind.where(ind['State\/UnionTerritory']=='Maharashtra')\nmh.dropna(inplace=True)\nmh.set_index('Date',inplace=True)\nmh['7DayAvg']=compute_7_day(mh,'Confirmed')","3a8b5dbc":"#Verification of Our Changes\nmh.head(5)","845b30f1":"#Plotting time series for Maharashrta\nfig,ax=plt.subplots(figsize=(14,10))\nax.bar(mh.index,mh['Confirmed'],width=1.5,color='#611d00',alpha=1,label='Confirmed Patients')\nax.bar(mh.index,mh['Cured'],width=0.5,color='#ff6826',alpha=0.85,label='Cured Patients')\nax.plot(mh.index[0:500],mh['7DayAvg'].iloc[0:500],color='#ffac88',linewidth=7,label='7-Day Average')\nplt.ticklabel_format(style='plain', axis='y')\nplt.xlabel('Junauary 2020 to August 2021', fontsize=30)\nax.grid(True,color='black',linestyle='-',alpha=0.1)\nplt.ylabel('Frequency', fontsize=30)\nplt.title('The Growth of Covid Cases and Cure Over the Years in Maharashtra',fontsize=25)\nplt.xticks(ticks=['2020-01-30','2020-08-11','2021-03-28','2021-08-11'],rotation=60,fontsize=30)\nplt.yticks(fontsize=30)\nplt.legend(loc=2,borderpad=1,fontsize=25)","a3e52b90":"#Anaysis on India\nind1=ind.dropna()\nind1.set_index('Date',inplace=True)\nind1['7DayAvg']=compute_7_day(ind1,'Confirmed')","50fec093":"#we transform our dataset for time series analysis\nind1_dates=ind1.groupby('Date').sum()","78530f3f":"fig,ax=plt.subplots(figsize=(14,10))\nax.bar(ind1_dates.index,ind1_dates['Confirmed'],width=1.5,color='#611d00',alpha=1,label='Confirmed Patients')\nax.bar(ind1_dates.index,ind1_dates['Cured'],width=0.5,color='#ff6826',alpha=0.85,label='Cured Patients')\nax.plot(ind1_dates.index[0:550],ind1_dates['7DayAvg'].iloc[0:550],color='#ffac88',linewidth=5,label='7-Day Average')\nplt.ticklabel_format(style='plain', axis='y')\nplt.xlabel('Junauary 2020 to August 2021', fontsize=30)\nax.grid(True,color='black',linestyle='-',alpha=0.1)\nplt.ylabel('Frequency', fontsize=30)\nplt.title('The Growth of Covid Cases and Cure Over the Years in India',fontsize=28)\nplt.xticks(ticks=['2020-01-30','2020-08-11','2021-03-28','2021-08-11'],rotation=60,fontsize=30)\nplt.yticks(fontsize=30)\n\nplt.legend(loc=2,borderpad=1,fontsize=25)","635f8de8":"#Day of the highest number of cases recorded\nind1_dates.sort_values('Confirmed',ascending=False)['Confirmed'].iloc[:5]","1c0bdca2":"# Trend for Deaths in Covid \nfig,ax=plt.subplots(figsize=(14,10))\nax.bar(ind1_dates.index,ind1_dates['Deaths'],width=0.5,color='#e9343a',alpha=0.85,label='Deaths')\nax.plot(ind1_dates.index,ind1_dates['Deaths'],color='#e9343a',alpha=0.85,)\nplt.ticklabel_format(style='plain', axis='y')\nplt.xlabel('Junauary 2020 to August 2021', fontsize=30)\nax.grid(True,color='black',linestyle='-',alpha=0.1)\nplt.ylabel('Frequency', fontsize=30)\nplt.title('The Growth of Death Count Over the Years in India',fontsize=30)\nplt.xticks(ticks=['2020-01-30','2020-08-11','2021-03-28','2021-08-11'],rotation=60,fontsize=30)\nplt.yticks(fontsize=30)\nplt.legend(loc=2,borderpad=1,fontsize=25)","b23700fa":"### VACCINATION DATASET SNEAK PEEK### \n\nind_vaccine.head()","b5e2b189":"#Shape of Our Data \nind_vaccine.shape","a0067e19":"#Alot of null values, let's see which columns contain them and how many\nind_vaccine.isna().sum()","ab69148e":"#Treat Nan Values \nind_vaccine.fillna(0,inplace=True)\n#Verify the changes\nind_vaccine.head()","bfae744b":"# To create consistency over data sets we use Date as the default name \nind_vaccine.rename(columns={'Updated On':'Date'},inplace=True)","48f24c42":"# To prepare our data for timeseries analysis we take the date column as index and also first transform it into a datetime object \nvac=ind_vaccine\nvac['Date']=pd.to_datetime(vac['Date'])\nvac.set_index('Date',inplace=True)","b574ca2f":"# we merge our data set with the covid datset used before to get a collective analysis \nmerge=pd.merge(left=vac,right=ind1_dates,how='inner',on='Date')","9f3baac8":"merge.head()","fb01dfdb":"# vac['Total Doses Administered'].plot(kind='line',label='Total Doses Administered')\nvac['First Dose Administered'].plot(kind='line',label='First Doses Administered')\nvac['Second Dose Administered'].plot(kind='line',label='Second Doses Administered')\n\nplt.xlabel('Time Frame',fontsize=40, color='black',)\nplt.ylabel('Frequency',fontsize=40, color='black')\nplt.xticks(fontsize=30)\nplt.yticks(fontsize=30)\nplt.ticklabel_format(style='plain', axis='y')\nplt.grid(True,color='black',alpha=0.4)\nplt.title('Vaccine Dosage Trend in India',fontsize=40, color='black')\nplt.legend(loc=2,borderpad=1,fontsize=25)\n\nplt.tight_layout()\n\n\n\n","ab08c74d":"merge['Cured'].plot(kind='line',label='Curation While Vaccinations',linewidth=6,color='r')\nind1_dates['2020-01-30':'2020-12-31']['Cured'].plot(kind='line',label='Curation Without Vaccination',linewidth=6,color='g')\nplt.axvline('2020-12-31',label='Max Curation without vaccine',linestyle='--')\nplt.xlabel('Time Frame',fontsize=40, color='black',)\nplt.ylabel('Frequency',fontsize=40, color='black')\nplt.xticks(fontsize=30)\nplt.yticks(fontsize=30)\nplt.ticklabel_format(style='plain', axis='y')\nplt.grid(True,color='black',alpha=0.4)\nplt.title('Curration With and Without Vaccines',fontsize=40, color='black')\nplt.legend(loc=2,borderpad=1,fontsize=25)\nplt.tight_layout()","8acb2a1a":"#Transforming Data Frame to get Inidian Vaccine Information\ntotal_vaccines=vac.where(vac['State']=='India')","e836ecdf":"#Dropping observations where the number of Sessions are 0 \ntotal_vaccines=total_vaccines.where(total_vaccines['Sessions']!=0).dropna()\ntotal=total_vaccines.sort_values('Total Doses Administered',ascending=False).iloc[0]\ntotal","a5c7ba06":"#Stripping white spaces from the series Index. Also I will recommend you tom use Camel Case Indexes instead>\ntotal.index=list(map(lambda x:x.strip(),total.index))","529fb4d4":"total.loc['Covaxin (Doses Administered)':'Sputnik V (Doses Administered)'].plot(kind='bar',label='Frequency of Variations Used In India ',width=0.5,color='g')\nplt.xlabel('Vaccine Variations',fontsize=40, color='black',)\nplt.ylabel('Frequency',fontsize=40, color='black')\nplt.xticks(fontsize=15,rotation=0)\nplt.yticks(fontsize=15)\nplt.ticklabel_format(style='plain', axis='y')\nplt.grid(True,color='black',alpha=0.4)\nplt.title('Vaccines Used in India',fontsize=40, color='black')\nplt.legend(loc=2,borderpad=1,fontsize=15)\nplt.tight_layout()","a650dea9":"#Number of Doses Administered \ntotal.loc['First Dose Administered':'Second Dose Administered'].plot(kind='bar',label='Difference in Frequency of Shots',width=0.5,color='g')\nplt.xlabel('Doses',fontsize=40, color='black',)\nplt.ylabel('Frequency',fontsize=40, color='black')\nplt.xticks(fontsize=15,rotation=0)\nplt.yticks(fontsize=15)\nplt.ticklabel_format(style='plain', axis='y')\nplt.grid(True,color='black',alpha=0.4)\nplt.title('Doses Administered in 8 Months',fontsize=40, color='black')\nplt.legend(loc=0,borderpad=1,fontsize=15)\n# plt.ylim(0,60000000000)\nplt.tight_layout()","1f5d086a":"# A variable is there to make our lives easy, right?\npathItaly='\/kaggle\/input\/covid19-in-italy\/'","87e5594d":"#The first dataset\nita_province=pd.read_csv(f'{pathItaly}covid19_italy_province.csv',parse_dates=True)","31a00569":"ita_province.head()","2051b1c0":"#Check for Nan values \nita_province.isna().sum()","eaf67753":"ita_province.ProvinceAbbreviation.fillna('UK',inplace=True)","dc0d082c":"#The rest of the data is numerical columns so we can just place 0 there\nita_province.fillna(0,inplace=True)","1a56f699":"new=ita_province[ita_province['Latitude']!=0]\ntotal_cases=new.groupby('ProvinceAbbreviation')['TotalPositiveCases'].sum()\n#The group by dataframe indexes are the province names which we will require later so convert it back into a column\ntotal_cases_df=total_cases.to_frame().reset_index()\n","9382b006":"# Here we merge both the datasets created above \nmerge_df=pd.merge(left=total_cases_df, right=new,on='ProvinceAbbreviation')","ce298db6":"# We keep the first value for data and rest drop all the copy provinces \nmap_data=merge_df.drop_duplicates(subset=['ProvinceAbbreviation'])","463e1d93":"map_data.head(5)","1d262f07":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"MB\")\npx.set_mapbox_access_token(secret_value_0)\nfig = px.scatter_mapbox(map_data, hover_name='ProvinceAbbreviation', lat=\"Latitude\", lon=\"Longitude\", size=\"TotalPositiveCases_x\", color=\"TotalPositiveCases_x\",color_continuous_scale=px.colors.sequential.Plasma_r, size_max=50, zoom=2)\nfig.update_layout(mapbox_style=\"dark\")","79e90f8d":"ita_region=pd.read_csv(f'{pathItaly}covid19_italy_region.csv',parse_dates=True)","efe40d5c":"ita_region.head(5)","119ad7ad":"#Null values Exploration\nita_region.isna().sum()","602eff4b":"#Only test performed has null values we remove them by \nita_region.fillna(0,inplace=True)","c2bb8d33":"#Verification of Changes\nita_region.isna().sum()","0341ea7e":"# We again peek at our data set \nita_region.head()","cf0c541b":"# We are off to our timeseries analysis and we drop the columns that are irrelevant\nita_p=ita_region.set_index('Date').drop(['Country','RegionCode','Latitude','Longitude','SNo'],axis=1)","798d75ac":"ita_p.head()","dcdb89bb":"# A little Data Cleaning\nita_p['RegionName']=ita_p['RegionName'].str.strip()","784ae86b":"#Peek Again\nita_p.head()","be8cdfde":"# Calculating Region Wise Cases\ntotal_cases1=ita_p.groupby('RegionName').sum()","ab1b8d95":"#Adding Region Name with our aggreated New Data \nnew_df=total_cases1.sort_values('TestsPerformed',ascending=False).reset_index()\nmerge_df1=pd.merge(left=new_df, right=ita_province,on='RegionName').drop_duplicates(subset=['RegionName'])\n# We add another feature Positivity Rate in The Data Set\nmerge_df1['PR']=merge_df1['TotalPositiveCases_x']\/merge_df1['TestsPerformed']","a5329a6f":"#MAP PLOT \nfig1 = px.scatter_mapbox(merge_df1, hover_name='RegionName', lat=\"Latitude\", lon=\"Longitude\", size=\"PR\", color=\"PR\",color_continuous_scale=px.colors.sequential.Plasma_r, size_max=40, zoom=3)\nfig1.update_layout(mapbox_style=\"dark\")","e5bec758":"ita_region['Date']=pd.to_datetime(ita_region['Date'])","263ffcaa":"# We group our data by Date so we get an observation per date\nita_time=ita_region.groupby('Date').sum()","ba6fa8ec":"# We plot the timeseries summary of Covid-19 Summary\nita_time['HospitalizedPatients'].plot(kind='line',label='Hospitalized Patients',linewidth=6,color='#6497b1')\nita_time['IntensiveCarePatients'].plot(kind='line',label='Intensive Care Patients',linewidth=6,color='#536872')\nita_time['HomeConfinement'].plot(kind='line',label='Home Confinement',linewidth=6,color='#708090')\nita_time['CurrentPositiveCases'].plot(kind='line',label='Current Positive Cases',linewidth=6,color='#283655')\nplt.xlabel('Time Frame',fontsize=40, color='black',)\nplt.ylabel('Frequency',fontsize=40, color='black')\nplt.xticks(fontsize=30)\nplt.yticks(fontsize=30)\nplt.ticklabel_format(style='plain', axis='y')\nplt.grid(True,color='black',alpha=0.4)\nplt.title(\"Italy's Covid Summary\",fontsize=40, color='black')\nplt.legend(loc=2,borderpad=1,fontsize=25)\nplt.tight_layout()","a8f9c455":"def split_sequence(sequence, n_steps_in, n_steps_out):\n    X, y = list(), list()\n    for i in range(len(sequence)):\n        end_ix = i + n_steps_in\n        out_end_ix = end_ix + n_steps_out\n        if(out_end_ix > len(sequence)):\n            break\n        seq_x, seq_y = sequence[i:end_ix], sequence[end_ix:out_end_ix]\n        X.append(seq_x)\n        y.append(seq_y)\n    return np.array(X), np.array(y)","084c5014":"# Our target Variable will be Total Positive Cases \ntest=ita_time['TotalPositiveCases']","a07263c0":"# We take the last 15 days as historical data and we will predict the next 15 days cases. Hence the shape is 15 fr X and Y\nX,y=split_sequence(test,15,15)","f14a0b14":"X.shape","c928844f":"Y=y[257]","cb3ec2af":"# Creating Multi Layer Perceptron\ninputs=tf.keras.Input(shape=(15))\nx=tf.keras.layers.Dense(100,activation='relu',kernel_regularizer=tf.keras.regularizers.l1(0.001))(inputs)\nx=tf.keras.layers.Dense(100,activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00001))(x)\noutputs=tf.keras.layers.Dense(15)(x)","e60082fb":"# We take Compile our Model\nmodel=tf.keras.Model(inputs,outputs)\nmodel.compile(loss='mse',optimizer='adam',metrics=['mse'])","0934b3da":"model.summary()","d5b3c88b":"# Saving Our models Data \nhistory=model.fit(X,y,epochs=500,verbose=0,validation_split=0.2)","47e38d34":"#Plotting the Loss \nfig,ax=plt.subplots(figsize=(15,10))\nplt.plot(history.history['loss'],label='Train Loss')\nplt.plot(history.history['val_loss'],label='Validation Loss')\nplt.xlabel('Epochs',fontsize=40, color='black',)\nplt.ylabel('Loss',fontsize=40, color='black')\nplt.xticks(fontsize=30)\nplt.yticks(fontsize=30)\nplt.grid(True,color='black',alpha=0.4)\nplt.title(\"Italy Covid ForeCasting Model Loss\",fontsize=40, color='black')\nplt.legend(loc=1,borderpad=1,fontsize=25)\nplt.tight_layout()","4f6640a9":"#Our loss did convergedand if we see the predictions they are pretty close to the originial one's\npreds=model.predict(X).flatten()\ny_plot=y.flatten()\nfig,ax=plt.subplots(figsize=(15,10))\nplt.plot(y_plot,label='Original Cases', color='#051e3e',linewidth=1)\nplt.plot(preds,label='Predicted Cases', color='#851e3e',linewidth=1)\nplt.xlabel('Days',fontsize=40, color='black',)\nplt.ylabel('Total Cases',fontsize=40, color='black')\nplt.xticks(fontsize=28,rotation=60)\nplt.yticks(fontsize=30)\nplt.ticklabel_format(style='plain', axis='y')\nplt.grid(True,color='black',alpha=0.4)\nplt.title(\"Italy Covid Forecasting MLP\",fontsize=40, color='black')\nplt.legend(loc=2,borderpad=1,fontsize=25)\nplt.tight_layout()\n","e06aad01":"#Developing Linear Model\nlr=LinearRegression()\nmodelLR=lr.fit(X,y)\ny_LR=modelLR.predict(y)\nmse=((y.flatten()-y_LR.flatten())**2).mean()\nprint(f'The MSE from our Linear Regression Model is {mse}')\ny_plot=y.flatten()\n\n#Plotting the Predictions\nfig,ax=plt.subplots(figsize=(15,10))\nplt.plot(y_plot,label='Original Cases', color='#051e3e',linewidth=1)\nplt.plot(y_LR.flatten(),label='Predicted Cases', color='#851e3e',linewidth=1)\n# plt.plot(history.history['val_loss'],label='Validation Loss')\nplt.xlabel('Days',fontsize=40, color='black',)\nplt.ylabel('Total Cases',fontsize=40, color='black')\nplt.xticks(fontsize=28,rotation=60)\nplt.yticks(fontsize=30)\nplt.ticklabel_format(style='plain', axis='y')\nplt.grid(True,color='black',alpha=0.4)\nplt.title(\"Italy Covid Forecasting LR Model\",fontsize=40, color='black')\nplt.legend(loc=2,borderpad=1,fontsize=25)\nplt.tight_layout()\n","d1f60ab7":"#Building Polynomial Model \nmaxdegree=7 # The maximum degree we would like to test\ntraining_error=[]\ncross_validation_error=[]\nfor d in range(1,maxdegree):\n    x_poly_train=PolynomialFeatures(degree=d).fit_transform(X)\n    lr=LinearRegression(fit_intercept=False)\n    model_log=lr.fit(x_poly_train,y)\n    y_train_pred=model_log.predict(x_poly_train)\n    mse_train=mean_squared_error(y,y_train_pred)\n    cve=cross_validate(lr,x_poly_train,y,scoring='neg_mean_squared_error',cv=5,return_train_score=True)\n    training_error.append(mse_train)\n    cross_validation_error.append(np.mean(np.absolute(cve['test_score'])))\nfig,ax=plt.subplots(figsize=(15,10))\nax.plot(range(1,maxdegree),cross_validation_error)\nax.set_xlabel('Degree',fontsize=30)\nax.set_ylabel('MSE',fontsize=30)\nax.set_title('MSE VS Degree',fontsize=45)","66c4267f":"# We create Date Labels,for the next 15 days \ndate_labels=[]\nstyle='2020-12'\nfor i in range(13,28):\n    date_labels.append(f'{style}-{i}')","98dd24c8":"# The predictions for the next 15 days are \nnext_15_days=model.predict(Y.reshape(1,15))\nfig,ax=plt.subplots(figsize=(15,10))\nplt.plot(date_labels,next_15_days.flatten(),label='Next 15 Days Covid Cases Forecast', color='#851e3e',marker='o',markersize=12)\nplt.xlabel('Days',fontsize=40, color='black',)\nplt.ylabel('Total Cases',fontsize=40, color='black')\nplt.xticks(fontsize=28,rotation=75)\nplt.yticks(fontsize=30)\nplt.ticklabel_format(style='plain', axis='y')\nplt.grid(True,color='black',alpha=0.4)\nplt.title(\"Italy Covid Forecasting\",fontsize=40, color='black')\nplt.legend(loc=2,borderpad=1,fontsize=25)\nplt.tight_layout()\n","b7ccb0e1":"pathKor='\/kaggle\/input\/coronavirusdataset\/'","57384ae9":"case=pd.read_csv(f'{pathKor}Case.csv',parse_dates=True)\npatientInfo=pd.read_csv(f'{pathKor}PatientInfo.csv',parse_dates=True)\npolicy=pd.read_csv(f'{pathKor}Policy.csv',parse_dates=True)\nregion=pd.read_csv(f'{pathKor}Region.csv',parse_dates=True)\nsearchTrend=pd.read_csv(f'{pathKor}SearchTrend.csv',parse_dates=True)\nseoulFloating=pd.read_csv(f'{pathKor}SeoulFloating.csv',parse_dates=True)\ntime=pd.read_csv(f'{pathKor}SeoulFloating.csv',parse_dates=True)","4a967c80":"case.head()","ba1709b3":"patientInfo.head()","9508d76b":"policy.head()","4c237a40":"region.head()","a7b450fa":"# A peek into the data set Search Trend which is the data of tests finding from 2016 to present of different viral disease. \nsearchTrend.head()","6c12b924":"seoulFloating.head()","e24f8c22":"# searchTrend Visualization\nsearchTrend.plot(kind='box')\nplt.xlabel('Diseases',fontsize=40, color='black',)\nplt.ylabel('Distribution',fontsize=40, color='black')\nplt.xticks(fontsize=28,rotation=75)\nplt.yticks(fontsize=30)\nplt.ticklabel_format(style='plain', axis='y')\nplt.grid(True,color='black',alpha=0.4)\nplt.title(\"Virus Distributions\",fontsize=40, color='black')\n# plt.legend(loc=2,borderpad=1,fontsize=25)\nplt.tight_layout()","4e3f06c3":"searchTrend.plot(x='date',kind='line')\nplt.xlabel('Time Frame',fontsize=40, color='black',)\nplt.ylabel('Distribution',fontsize=40, color='black')\nplt.xticks(fontsize=28,rotation=60)\nplt.yticks(fontsize=30)\nplt.ticklabel_format(style='plain', axis='y')\nplt.grid(True,color='black',alpha=0.4)\nplt.title(\"Search Trends in South Korea\",fontsize=40, color='black')\nplt.legend(loc=2,borderpad=1,fontsize=25)\nplt.tight_layout()","306c0154":"patientInfo.head()","b4eb8683":"# We see the NAn values and lets take a deeper look\npatientInfo.isna().sum()","072691d7":"# Starting filling Nan Values in our data w\ndummy_date='2016-02-04'\npatientInfo['confirmed_date'].fillna(dummy_date,inplace=True)","9847ea1e":"patientInfo['released_date'].fillna(dummy_date,inplace=True)\npatientInfo['deceased_date'].fillna(dummy_date,inplace=True)","b50f12f7":"patientInfo['symptom_onset_date'].fillna(dummy_date,inplace=True)","a710b5a9":"# We choose genders randomly to fill null values giving them equal probability for each gender\nreplacement = np.random.choice(['male', 'female'], p=[.5, .5], size=1122)\nnan=patientInfo['sex'].isna()\npatientInfo.loc[nan,'sex']=replacement","27698f23":"patientInfo.isna().sum()","b9fc3f8e":"#Filling the string based columns with Ubknown UK and integers with 0\npatientInfo.age.fillna('UK',inplace=True)\npatientInfo.city.fillna('UK',inplace=True)\npatientInfo.fillna(0,inplace=True)\n","c9a14792":"#Verifying our changes\npatientInfo.isna().sum()","13f6c566":"# We'll see corona virus cases distribution by age \nageDistribution=patientInfo.groupby('age').count()['patient_id'].drop('UK').reset_index()","73bc3098":"ageDistribution.head()","0b218312":"ageDistribution.set_index('age',inplace=True)","5f493375":"ageDistribution.drop('100s',inplace=True)","e0f82840":"# South Korea Cases By Age\nageDistribution.plot(kind='barh')\nplt.xlabel('Frequency',fontsize=40, color='black',)\nplt.ylabel('Age Groups',fontsize=40, color='black')\nplt.xticks(fontsize=28,rotation=60)\nplt.yticks(fontsize=30)\nplt.grid(True,color='black',alpha=0.4)\nplt.title(\"Cases by Age Groups in South Korea\",fontsize=40, color='black')\nplt.legend(loc=1,borderpad=0,fontsize=25,labels=['Cases'])\nplt.tight_layout()","5ddaf662":"#Cases by gender\nsexDistribution=patientInfo.groupby('sex').count()['patient_id']","5d0674ba":"sexDistribution.plot(kind='bar')\nplt.xlabel('Frequency',fontsize=40, color='black',)\nplt.ylabel('Gender Distribution',fontsize=40, color='black')\nplt.xticks(fontsize=28,rotation=60)\nplt.yticks(fontsize=30)\nplt.grid(True,color='black',alpha=0.4)\nplt.title(\"Cases by Gender in South Korea\",fontsize=40, color='black')\nplt.legend(loc=0,borderpad=1,fontsize=23,labels=['Cases'])\nplt.tight_layout()","5d8723f6":"# We move on and see the days taken for different kinds of patients and we only consider the recovered patients not the ones deceased\nrecovered=patientInfo.where((patientInfo['confirmed_date']!=dummy_date) & (patientInfo['released_date']!=dummy_date) & (patientInfo['deceased_date']==dummy_date)).dropna()","befb190e":"#We add the column days taken to our dataset \nrecovered['days_taken']=(pd.to_datetime(recovered['released_date'])-pd.to_datetime(recovered['confirmed_date']))","17c4dc8b":"#Avergage amount of days taken by each gender\nrecovered.groupby('sex')['days_taken'].sum()\/sexDistribution","1e450dde":"# Average Number of days taken by each age group to recover\nrecovered.groupby('age')['days_taken'].sum().drop(['UK','100s'])\/ageDistribution['patient_id']","07b20e54":"#Calculating Avergae elderly population ratio for each province\nA=region.groupby('province').agg({'elderly_population_ratio':'mean'}).reset_index()","617072f5":"# WE take the total cases for each province\nB=case.groupby('province').agg({'confirmed':'sum'}).reset_index()","4253c6aa":"# Merging the data sets into one \nC=A.merge(B)","93362985":"# We extratct the coordinates for each province\ncoord=case.drop_duplicates(subset=['province'])[['province','latitude','longitude']].set_index('province')","76b9759f":"#Fill the missing ones\ncoord.loc['Incheon']=[37.4563,126.7052]\ncoord.loc['Daejeon']=[36.3504,127.3845]\ncoord.loc['Ulsan']=[35.5384,129.3114]\ncoord.loc['Gangwon-do']=[37.8228,128.1555]\ncoord.loc['Jeollabuk-do']=[35.7175,127.1530]\ncoord.loc['Gyeongsangbuk-do']=[36.4919,128.8889]\ncoord.loc['Gyeongsangnam-do']=[35.4606,128.2132]\ncoord.loc['Jeju-do']=[33.4890,126.4983]","1c35449a":"#Reset the index so that province becomes a column\ncoord.reset_index(inplace=True)","8b16999e":"#Concatinating the Coordinates and The Aggregated Dataset C\nD=C.merge(coord)","a6ce0615":"#taking a peek to the final dataset\nD.head()","2b1599d5":"#Longitude and Latitude are converted to floats for plotting\nD['latitude']=D['latitude'].astype('float')\nD['longitude']=D['longitude'].astype('float')","f2f6390c":"fig2 = px.scatter_mapbox(D, hover_name='province', lat=\"latitude\", lon=\"longitude\", size=\"confirmed\", color=\"elderly_population_ratio\",color_continuous_scale=px.colors.sequential.Plasma_r, size_max=40, zoom=3)\nfig2.update_layout(mapbox_style=\"dark\")","33a8f9eb":"pathBrazil='\/kaggle\/input\/corona-virus-brazil\/'","17433103":"brazilCovid=pd.read_csv(f'{pathBrazil}brazil_covid19.csv',parse_dates=True)\nbrazilCovidCities=pd.read_csv(f'{pathBrazil}brazil_covid19_cities.csv',parse_dates=True)\nbrazilCityCoord=pd.read_csv(f'{pathBrazil}brazil_cities_coordinates.csv',parse_dates=True)\nbrazilCovidMacro=pd.read_csv(f'{pathBrazil}brazil_covid19_macro.csv',parse_dates=True)","5d68fba8":"#Checking for null values\nbrazilCovidCities.isna().sum()","b4e6a182":"brazilCovid.isna().sum()","ec8ba0b9":"#Transforming Data for time series\ntime_brazil=brazilCovid.set_index('date')","4a8e39fb":"#Time Series COvid Summary\ntime_brazil1=time_brazil.reset_index().groupby('date').sum()\ntime_brazil1['cases'].plot(kind='line',label='Corona Cases',linewidth=6,color='#6497b1')\ntime_brazil1['deaths'].plot(kind='line',label='Deaths Caused',linewidth=6,color='#536872')\nplt.xlabel('Time Frame',fontsize=40, color='black',)\nplt.ylabel('Frequency',fontsize=40, color='black')\nplt.xticks(fontsize=30,rotation=60)\nplt.yticks(fontsize=30)\nplt.ticklabel_format(style='plain', axis='y')\nplt.grid(True,color='black',alpha=0.4)\nplt.title(\"Brazils's Covid Summary\",fontsize=40, color='black')\nplt.legend(loc=2,borderpad=1,fontsize=25)\nplt.tight_layout()","5faf4460":"#Renaming Columns for merging \nbrazilCovidCities.rename(columns={'city_name':'name'},inplace=True)","c0817930":"#Calculating Cases by Cities\ncases_by_cities=brazilCovidCities.groupby('name')['cases','deaths'].sum().reset_index()","e0c82170":"cases_by_cities.head()","d922de05":"#Renaming Columns for merge\nbrazilCityCoord.rename(columns={'city_name':'name'},inplace=True)","fc3fb436":"# We merge our dataset to get stats and lat long in 1\nlat_long=cases_by_cities.merge(brazilCityCoord,on='name')","2cba9959":"fig3 = px.scatter_mapbox(lat_long, hover_name='name', lat=\"lat\", lon=\"long\", size=\"cases\", color=\"deaths\",color_continuous_scale=px.colors.sequential.Plasma_r, size_max=40, zoom=3)\nfig3.update_layout(mapbox_style=\"dark\")","5ba5cbfb":"#Brazil Timeseries Data \nbrazilCovidMacro.head()","deeb1478":"#Filling Null Values\nbrazilCovidMacro.fillna(0,inplace=True)\nbrazilCovidMacro.isna().sum()","8b8bb6fd":"brazilCovidMacro.head()","81ca64cb":"#Creatingg Tick labels for  Time Series graph\ntick=['2020-02-05','2020-06-04','2020-09-12','2020-09-12','2021-03-29']","6c55c9b9":"#Time Series Data Ploting\ntime_brazil2=brazilCovidMacro.set_index('date')\ntime_brazil2['cases'].plot(kind='line',label='Corona Cases',linewidth=6,color='#6497b1')\ntime_brazil2['deaths'].plot(kind='line',label='Deaths Caused',linewidth=6,color='#536872')\ntime_brazil2['recovered'].plot(kind='bar',label='Recovered Patients',width=1,color='#708090',alpha=0.3)\nplt.xlabel('Time Frame',fontsize=40, color='black',)\nplt.ylabel('Frequency',fontsize=40, color='black')\nplt.xticks(fontsize=30,rotation=60,labels=tick,ticks=[30,120,210,300,380])\nplt.yticks(fontsize=30)\nplt.ticklabel_format(style='plain', axis='y')\nplt.grid(True,color='black',alpha=0.4)\nplt.title(\"Brazils's Covid Summary\",fontsize=40, color='black')\nplt.legend(loc=2,borderpad=1,fontsize=25)\nplt.tight_layout()","dae11f19":"#Transforming Datasets\nIndian=ind.groupby('Date').agg({'Cured':'sum','Deaths':'sum','Confirmed':'sum'})","a43fe9e1":"#Italian Dataset is processed  as well\nItalian=ita_region.groupby('Date').agg({'Recovered':'sum','Deaths':'sum','TotalPositiveCases':'sum'})","080cb197":"#Columns Renaming\nItalian.columns=['Cured','Deaths','Confirmed']","cd29c636":"#Adding Mortality Rate Feature\ndef MR(df):\n    df['MR']=np.round(df['Deaths']\/df['Confirmed'],5)\n    return df","f068f53d":"Indian=MR(Indian)\nItalian=MR(Italian)","2d03b68d":"#Curing Rate\ndef CR(df):\n    df['CR']=np.round(df['Cured']\/df['Confirmed'],5)\n    return df\n    ","df75b5e4":"Indian=CR(Indian)\nItalian=CR(Italian)","0ccb9681":"Indian.head()","be251ffc":"#TO store MSE of all the models\nmseIndian={}\nmseItalian={}","3e378d5e":"#Common Function to generate lr model\ndef lrModel(x_train,y_train):\n    lr=LinearRegression()\n    model=lr.fit(x_train,y_train)\n    return model\n    ","d3557b4d":"#Indian Predictors and Response\nX_Indian=Indian.drop('Deaths',axis=1).values\ny_Indian=Indian['Deaths'].values","5ef33001":"#Normalizing the data\nnorm_Indian=Normalizer()\nX_Indian_Norm=norm_Indian.fit_transform(X_Indian)","328cf116":"#Simple LR\nlr_Indian=lrModel(X_Indian_Norm,y_Indian)\npred=lr_Indian.predict(X_Indian_Norm)\nmse=mean_squared_error(y_Indian,pred)\nmseIndian['lr']=mse","ef710d72":"#Moving Forward We will find the hyperpermaters of the models with GridSearch CV and use the best model \n\ndef best_classifier(clf, params, X,y, n_folds = 5):\n    gs = GridSearchCV(clf, param_grid = params, cv=n_folds)\n    gs.fit(X,y)\n    print(\"BEST\", gs.best_params_, round(gs.best_score_,2))\n    best = gs.best_estimator_\n    return best","fc9629bf":"# RIDGE REGRESSION\nbest_ridge_Indian=best_classifier(Ridge(),{'alpha':np.linspace(0.1,0.0001,20)},X_Indian_Norm,y_Indian)\npred_ridge=best_ridge_Indian.predict(X_Indian_Norm)","4642ff7f":"mseIndian['lr_ridge']=mean_squared_error(y_Indian,pred_ridge)","7384ea5a":"#Lasso Regression\nbest_lasso_Indian=best_classifier(Lasso(),{'alpha':np.linspace(0.1,0.0001,20),'max_iter':[1000,10000,20000,30000]},X_Indian_Norm,y_Indian)\npred_lasso=best_lasso_Indian.predict(X_Indian_Norm)","e2461105":"mseIndian['lr_lasso']=mean_squared_error(y_Indian,pred_lasso)","2b39c9e4":"##KNN_REgressor \nbest_knn_Indian=best_classifier(KNeighborsRegressor(),{'n_neighbors':[i for i in range(1,20)]},X_Indian_Norm,y_Indian)\npred_knn=best_knn_Indian.predict(X_Indian_Norm)\nmseIndian['knn']=mean_squared_error(y_Indian,pred_knn)","caa2698b":"##Neural Networks\n\n## Layers Configured\ninputs=tf.keras.Input(shape=4)\nx=tf.keras.layers.Dense(512,activation='swish',kernel_regularizer=tf.keras.regularizers.l2(0.0001))(inputs)\nx=tf.keras.layers.Dense(512,activation='swish',kernel_regularizer=tf.keras.regularizers.l1(0.0001))(x)\nx=tf.keras.layers.Dense(512,activation='swish',kernel_regularizer=tf.keras.regularizers.l2(0.0001))(x)\nx=tf.keras.layers.Dense(512,activation='swish',kernel_regularizer=tf.keras.regularizers.l1(0.0001))(x)\noutputs=tf.keras.layers.Dense(1,activation='linear')(x)\n\n## Model Config\n\nmodel_Indian=tf.keras.Model(inputs,outputs)\nmodel_Indian.compile(optimizer='adam',loss='mse',metrics=['mse'])\nmodel_Indian.summary()\n\n## Model Fitting\n\nhistory_Indian=model_Indian.fit(X_Indian,y_Indian,epochs=500,validation_split=0.2,verbose=0)\n\n\n\n","c14f7cf3":"#Loss of our Neural Network\nfig,ax=plt.subplots(figsize=(15,10))\nplt.plot(history_Indian.history['loss'],label='Train Loss')\nplt.plot(history_Indian.history['val_loss'],label='Validation Loss')\nplt.xlabel('Epochs',fontsize=40, color='black',)\nplt.ylabel('Loss',fontsize=40, color='black')\nplt.xticks(fontsize=30)\nplt.yticks(fontsize=30)\nplt.grid(True,color='black',alpha=0.4)\nplt.title(\"Indian MLP Model Loss\",fontsize=40, color='black')\nplt.legend(loc=1,borderpad=1,fontsize=25)\nplt.tight_layout()","fd20bc64":"pred_mlp=model_Indian.predict(X_Indian_Norm)\nmseIndian['mlp']=mean_squared_error(y_Indian,pred_mlp)","9e620004":"#Loss of each developed Model \nfig,ax=plt.subplots(figsize=(15,10))\nplt.plot(mseIndian.keys(),mseIndian.values(),label='Mean Squared Error',linewidth=4,marker='o',linestyle='--',markersize=20)\nplt.xlabel('Models',fontsize=40, color='black',)\nplt.ylabel('Loss',fontsize=40, color='black')\nplt.xticks(fontsize=30)\nplt.yticks(fontsize=30)\nplt.grid(True,color='black',alpha=0.4)\nplt.title(\"Indian Death Models Loss\",fontsize=40, color='black')\nplt.legend(loc=0,borderpad=1,fontsize=25)\nplt.tight_layout()","fd191aa3":"#Italian Predictors and Response \nX_Italian=Italian.drop('Deaths',axis=1).values\ny_Italian=Italian['Deaths'].values","13a93f17":"#Normalizing our data \nnorm_Italian=Normalizer()\nX_Italian_Norm=norm_Italian.fit_transform(X_Italian)","852e19a1":"#Simple LR\nlr_Italian=lrModel(X_Italian_Norm,y_Italian)\npred=lr_Italian.predict(X_Italian_Norm)\nmse=mean_squared_error(y_Italian,pred)\nmseItalian['lr']=mse","43f22c25":"# RIDGE REGRESSION\nbest_ridge_Italian=best_classifier(Ridge(),{'alpha':np.linspace(0.1,0.0001,20)},X_Italian_Norm,y_Italian)\npred_ridge=best_ridge_Italian.predict(X_Italian_Norm)\n\nmseItalian['lr_ridge']=mean_squared_error(y_Italian,pred_ridge)\n\n#Lasso Regression\nbest_lasso_Italian=best_classifier(Lasso(),{'alpha':np.linspace(0.1,0.0001,20),'max_iter':[1000,10000,20000,30000]},X_Italian_Norm,y_Italian)\npred_lasso=best_lasso_Italian.predict(X_Italian_Norm)\nmseItalian['lr_lasso']=mean_squared_error(y_Italian,pred_lasso)\n\n##KNN_REgressor \nbest_knn_Italian=best_classifier(KNeighborsRegressor(),{'n_neighbors':[i for i in range(1,20)]},X_Italian_Norm,y_Italian)\npred_knn=best_knn_Italian.predict(X_Italian_Norm)\nmseItalian['knn']=mean_squared_error(y_Italian,pred_knn)\n","be91a691":"#MSE for all the Models \nfig,ax=plt.subplots(figsize=(15,10))\nplt.plot(mseItalian.keys(),mseItalian.values(),label='Mean Squared Error',linewidth=4,marker='o',linestyle='--',markersize=20)\n# plt.plot(history_Italian.history['val_loss'],label='Validation Loss')\nplt.xlabel('Models',fontsize=40, color='black',)\nplt.ylabel('Loss',fontsize=40, color='black')\nplt.xticks(fontsize=30)\nplt.yticks(fontsize=30)\n# plt.ticklabel_format(style='plain', axis='y')\nplt.grid(True,color='black',alpha=0.4)\nplt.title(\"Italian Death Models Loss\",fontsize=40, color='black')\nplt.legend(loc=0,borderpad=1,fontsize=25)\nplt.tight_layout()","b37e54f2":"#Preparing the Dataset\nBrazilian=brazilCovidMacro[['cases','deaths','recovered']].copy()\nBrazilian.columns=['Confirmed','Deaths','Cured']\nBrazilian=MR(Brazilian)\nBrazilian=CR(Brazilian)\nBrazilian.fillna(0,inplace=True)","568d474a":"#Setting Response \ny_brazil=Brazilian['Deaths']\n","55a72e77":"#Indian Predictions\nX_BI=norm_Indian.transform(Brazilian[['Cured','Confirmed', 'MR', 'CR']].values)\ny_brazil_Indian=best_knn_Indian.predict(X_BI)","04b6208f":"#Italian Prediction\nX_BIT=norm_Italian.transform(Brazilian[['Cured','Confirmed', 'MR', 'CR']].values)\ny_brazil_Italian=best_knn_Italian.predict(X_BIT)","7722836b":"#Setting Index\nindex=[i for i in range(len(y_brazil))]","81a63ffa":"#Final Prediction Plots\nplt.plot(index,y_brazil,label=\"Brazil's Death Count\")\nplt.plot(index,y_brazil_Indian,label=\"Indian Model's Brazil's Death Count\")\nplt.plot(index,y_brazil_Italian,label=\"Italian Model's Brazil's Death Count\")\nplt.xlabel('Samples',fontsize=40, color='black',)\nplt.ylabel('Predictions',fontsize=40, color='black')\nplt.xticks(fontsize=30)\nplt.yticks(fontsize=30)\nplt.grid(True,color='black',alpha=0.4)\nplt.title(\"Italian Death Models Loss\",fontsize=40, color='black')\nplt.legend(loc=0,borderpad=1,fontsize=25)\nplt.tight_layout()","591ef754":"<p style='font-size:20px'>To predict, we need a test set and that is the data from Brazil. We process the data set to be structurally similar as the two used above. We'll predict from both of our models and plot our results with the original data.<\/p>","a1b4903d":"## Linear Regression Model","c3757a88":"<p style='font-size:20px'>We start by initially getting a rough timeseries analysis for of the amount of cases and cured patients over the time. We do that by transforming our data frame as we sum the cases for each date and make the data more appropriate for timeseries analysis.<\/p>","351e045d":"><p style='font-size:25px'>Brazil cases rose linearly from 2020 to 2021. This is the problem in hand, From the exploration above we will take all the neccessary steps and to prevent this rise in cases.<\/p>","62054749":"> <p style='font-size:25px'> It can be noticed that the five most affected states in 2020 are:<ui><li style='font-size:25px'>Maharashtra<\/li><li style='font-size:25px'>Andhra Pradesh<\/li><li style='font-size:25px'>Tamil Nadu<\/li><li style='font-size:25px'>Karnataka<\/li><li style='font-size:25px'>UttarPradesh<\/li><\/ui><\/p>","3f98eb2c":"<p style='font-size:20px'>Feel free to hover over and zoom to check the cases by province. The size of the bubbles depend on the total number of cases in a Province as well as the colors. Next up is Analysis on Region Data<\/p>","ded998cb":"<h2 style = \"background:black;border:0;height:55px;width:220px;padding-top:5px;color:white;font-size:45px;padding-left:7px\">1.2 Italy<\/h2>","525ba98e":"><p style='font-size:25px'> The time series graph above verifies our statewise results about kerala, the rapid growth being in 2021.<\/p>","3dfbb4fa":"<p style='font-size:20px'>We step ahead to look at the days that registered the highest number of cases throught the span of these 2 years. The trend seen above drives us to the conclusion that they will be form 2021. <\/p>","88436b4f":"<h1 style = \"background:black;border:0;height:65px;width:700px;padding-top:5px;color:white;font-size:50px;padding-left:7px\">1. Exploratory Data Analysis<\/h1>","3962fc27":"<h2 style = \"background:black;border:0;height:55px;width:360px;padding-top:5px;color:white;font-size:45px;padding-left:7px\">1.1.1 Conclusion<\/h2>","566ecae5":"> <p style='font-size:25px'>The Exploratory Data Analysis that we performed for each country led us to conclude that:.<ui><li style='font-size:25px'>The initial months from Jan'2020 will be key for Brazil.<\/li><li style='font-size:25px'>A policy that implements lockdowns, close tracking and a vaccination scheme(in the later months as we start from Jan'2020) together will be more efficient.<\/li><li style='font-size:25px'>As learnt from India, even with vaccination, cases went up. This could have been because there were only 1\/4 fully vaccinated people out of 400 million those were vaccinated. The population let alone is 1.3B, that means 300M people are partially vaccinated and 900M have not even recieved a single dose. A vaccination scheme that is fast and have a wider coverage should be thought of.<\/li><li style='font-size:25px'>Also, Covishield was the major administered vaccine, which appreciates to have a 12 week gap between the 2 shots. Going forward the stratergy should be to opt for a single shot vaccine or a Vaccine that have a shorter time period for the next dose should be considered.<\/li><!--><li style='font-size:25px'><\/li><\/ui><\/p>","4978a0d9":"<h1 style = \"background:black;border:0;height:65px;width:1400px;padding-top:5px;color:white;font-size:50px;padding-left:7px\">2.Developing ML and AI models to predict Deaths in Brazil<\/h1>","394875a3":"<p style='font-size:20px'>In the above map graph, we have considered the buble size as the total confirmed cases and the color is elderely population ratio.<\/p>","cdfc44e7":"<p style='font-size:20px'>We know will move ahead and do a quick time series analysis, also you will see timeseris forcasting for the next 15 days in Italy. We start by transforming our data and making it suitable for timeseries analysis.<\/p>","0bfd854b":"><p style='font-size:25px'> It can be clearly seen that the beggining of the year registered the lowest cases untill June when it started to rise rapidly. The summer season is in flow by then. The initial months of the winter season have seen the greatest number of cases registered, in the year.<\/p>","1f165057":"<p style='font-size:20px'>In the above map graph, we have considered the buble size as the total confirmed cases and the color is the number of deaths.<\/p>","4f3eedf0":"> <p style='font-size:25px'> The graph above depicts the 11 month journey of vaccination in India. The first dose is administered at a very high scale but the second doses are have not been administered at the same rate, as we move on we'll see the reason behind low rates for second dose<\/p>","1ad698b4":"><p style='font-size:25px'>Our Multilayer Perceptron worked well as a timeseries model but here we have only developed our model and we forecast on data later, Linear and Polynomial Models were also developed but MSE for both of them were considerably higher than the Multilayer Perceptron<\/p>","7e7fe350":"<h2 style = \"background:black;border:0;height:55px;width:390px;padding-top:5px;color:white;font-size:45px;padding-left:7px\">2.1 Indian Models<\/h2>","5e763f56":"<h2 style = \"background:black;border:0;height:55px;width:380px;padding-top:5px;color:white;font-size:45px;padding-left:7px\">1.3 South Korea<\/h2>","57482a7b":"India is a country of diversity and situated at the heart of Asian Continent, accounts for the second most populous country in Asia. Covid, like any other country treated India rough and a glimpse of it has been captured in the dataset below. The data comprises of 3 csv files:\n<ui>\n    <li> Covid 19 India: It contains daily records of Corona virus cases, deaths and curing of people from 20'Jan 2020 to 15'Aug 2021<\/li>\n    <li> State wise Details: It contains daily records of Corona virus cases, deaths and curing of people from 20'Jan 2020 to 15'Aug 2021 divided statewise<\/li>\n    <li> State wise Details: It contains details of the vaccination drill going on in India from Jan'21<\/li>\n<\/ui>","cae9e9ff":"<p style='font-size:20px'> Now that we have verified the impact of the vaccines on people of India let's see how many doeses did get administered in the time span of 9 months and which vaccines are used in India. <\/p>","a5e74aa0":"><p style='font-size:25px'>The error is in the range of 1e29. That's something to move on from. Hence our MLP performed the best for Time Series forecasting and hence we will use this model for our predictions for the next 15 days.<\/p>","cccae53d":"<p style='font-size:20px'>The next step will be to get a clear view our initial timeseries analysis and plot it better with 7 day average taken in Consideration. We plot it for the India and it's two states: Maharashtra(as it has the highest numeber of registered cases) and Kerala(the new comers in 2021). We extracrt the data for the state or the whole nation and add a new feature <b>7DayAvg<\/b> to our dataset.<\/p>","5a5d8839":"<p style='font-size:20px'>The best Model found is KNN Regressor with the least MSE, Hence we consider it as our best Indian Model.<\/p>","ff853130":"><p style='font-size:25px'>The above graph represents the positivity rate of corona cases by their respective regions, feel free to hover around and zoom in. The bubble size and colors are dependent on increasing positivity rate <\/p>","d567a26f":"<h2 style = \"background:black;border:0;height:55px;width:240px;padding-top:5px;color:white;font-size:45px;padding-left:7px\">1.4 Brazil<\/h2>","054ba383":"<p style='font-size:25px'>After a brief analysis above we move into time series forecasting where we will predict the total positive cases for the next 15 days. The function <b>split_sequence<\/b> is taken from Jason Brownlee's book <a href=https:\/\/machinelearningmastery.com\/introduction-to-time-series-forecasting-with-python\/>Introduction to Timeseries Forecasting With Python.<\/a> <\/p>","67e072b6":"> <p style='font-size:25px'>This gives an index of the vaccine process in India and we can use this later when we decide things for Brazil.<ui><li style='font-size:25px'>More than 513.2 Million Vaccines were administered in India with help of 46163 vaccinations sites.<\/li><li style='font-size:25px'>  400 Million people got their fisrt doese while a fourth of them got fully vaccinated.<\/li><li style='font-size:25px'> The sex ratio came out to be 1.2; For every one women 1.2 men got vaccinated.<\/li><li style='font-size:25px'>The age bracket 18-44 registered the most number of recipients of the vaccine<\/li><li style='font-size:25px'>The most used vaccine was Covishield, the Oxford prepared drug was India's choice.<\/li><\/ui><\/p>","66d8c46b":"> <p style='font-size:25px'>From the above analysis, we can conclude that:.<ui><li style='font-size:25px'>Even after early lockdowns that took place in India, Covid-19 couldn't be controlled.<\/li><li style='font-size:25px'>Vaccination did had impact in curing people but the rate of fully vaccinated people was low.<\/li><!--><li style='font-size:25px'> The sex ratio came out to be 1.2; For every one women 1.2 men got vaccinated.<\/li><li style='font-size:25px'>The age bracket 18-44 registered the most number of rexipients of the vaccine<\/li><li style='font-size:25px'>The most used vaccine was Covishield, the Oxford prepared drug was India's choice.<\/li><\/ui><\/p>","ba89c251":"<p style='font-size:20px'>The place where footballing legends like Pele and Ronaldinho were born, Brazil is no stranger to the devil Covid-19. The datasets here provide city coordinate, timeseries data and state wise data.<\/p>","57dde580":"<p style ='font-size:20px'>We go deep and take a step forward in the time series analysis by checking the seasonality of the data by considering new feautres like Month and Day in our data<\/p>","40ecedc4":"><p style='font-size:25px'>The whole month of August for which we have data for saw an increasing trend of cases and hence the above result. 11'Aug 2021 the last date for which data is present and also we had the highest number of cases there. In the next step we look at the deaths trend in our data set an intresting thing found was that the trend is similar as seen already in the rise of cases over the year.  <\/p>","6183f9c5":"<p style='font-size:20px'> Notice that the data for vaccines is available from 16'Jan 2021 and we 6.5k plus records for this collective analysis. We are analysing the timeseries graph for first and secod doses in India and then we move on to seeing the impact of vaccination on India.<\/p>","20c55534":"<p style='font-size:20px'>The best Model found is KNN Regressor with the least MSE, Hence we consider it as our best Italian Model. We finally have two predictors form India and Italy both KNN Regressors who out performed linear regressors and neural nets. We did not consider neural net in Italy because of a similar performance and higher MSE, hence it is ignored. We move on to the final subsection of our project Predictions.<\/p>","051870d6":"<h1 style = \"font-size:100px Solid\"> Covid-19 Modelling Project By Aamir Ahmad Ansari<\/h1>\n<h2 style = \"font-size:100px Solid\">Introduction<\/h2>\n<p style = \"font-size:10px Solid\"> This report is prepared using Covid Data set Available on Kaggle for 4 Different Countries, who are:<ui id=1 style='list-style-type: circle;'><li>India<\/li><li>Italy<\/li><li>South Korea<\/li><li>Brzail<\/li><\/ui>\nThe main Aim to achieve with this project was to take decisions for Brazil from January'2020 while you have a chance to peek into the future with the data of the rest of the countries. All the datasets are shown on the right and can be downloaded or viewed on kaggle.\n<\/p>\n<p style = \"font-size:10px Solid\">\n    This notebook is to be read from top to bottom as a report. It comprises of two parts:<ui id=2><li>Exploratory Data Analysis<\/li><li>Developing ML and AI models to predict Deaths in Brazil<\/li><\/ui><\/p>\n<h3 style = \"font-size:50pxSolid\">1.Exploratory Data Analysis<\/h3>\n<p>Exploratory Data Analysis is performed on each country with the intent to find valuable insights and trends that the data contain. There are embedded map graphs of which the code cannot be provided as they use MapBox API key which is unique to each member but a tutorial link will be provided. <\/p>\n<h3 style = \"font-size:40pxSolid\">2.Developing ML and AI models to predict Deaths in Brazil<\/h3>\n<p>In this section I developed 5 models:<ui id=1 style='list-style-type: circle;'><li>Linear Regression Model<\/li><li>Ridge Regression Model<\/li><li>Lasso Regression Model<\/li><li>KNN Regressor<\/li><li>MultiLayer Perceptron Model<\/li><\/ui> <br> for India and Italy to predict the death count. I compare all 5 them and choose the best form each country to work as a predictor for Brazil's Death Coun. This Project is asssigned by <a href=https:\/\/www.univ.ai>Univ.AI<\/a> and I am grateful to be a part of them and for the skills I have developed in the domain of Data Science so far.\n<\/p>\n   \n    \n    \n    ","ba50c457":"<p style='font-size:20px'>In this section we will develop ML and AI models to predict deaths in Brazil. We will create different models for India and Italy. We will compare all the models developed for a country, the best model selected and will be used for predicting number of deaths in Brazil. We start that by tansforming datasets and taking similar features: Cured, Deaths and and Confirmed cases. We also add two new features from the existing features; Curing Rate and Mortality Rate. Curing Rate is Cured Cases by the Total number of case and likewise Mortality rate can be deduced for each day. We have three sub sections here as Indian Models, Italian Models and Predictions. Here We Go!! <\/p>","6e273fd8":"> <p style='font-size:25px'>Corona Virus cases rose exponentially over the time but people got cured in approximately the same ratio. Note the solid lines are the average of the observations at each step and the cluster around it is the 95% confidence Interval.<\/p>","d23cfd89":"<p style='font-size:20px'>A country of rich culture, South Korea, went through the same phase of Covid, they Adopted the policy of contact tracing and the dataset here conatins the timeseries as well as patient Information.<\/p>","90f400fe":"<p style='font-size:20px'>A beautiful European country that experienced its worst nightmare in Covid-19, Italy. We have two datsets for this country, one contains the data for each province in Italy and the other one contains detailed information on covid cases according to their region <\/p>","1b36f17f":"><p style='font-size:25px'> The cases in Maharashtra have been twice as many as any state in India despite of the cautionful early lockdowns, the state suffered alot. The only positive here is that people got cured in almost the same proportion<\/p>","7ef5b9a2":"><p style='font-size:25px'>The data contains null values, both numerical and string. We'll start by filling the string column ProvinceAbbreviation which has short names for each province, we propose to fill these values as unknown 'UK' rather than dropping this information.<\/p>","fc7e40eb":"<h2 style = \"background:black;border:0;height:55px;width:220px;padding-top:5px;color:white;font-size:45px;padding-left:7px\">1.1 India<\/h2>","9f7a4d9f":"<h2 style = \"background:black;border:0;height:55px;width:400px;padding-top:5px;color:white;font-size:45px;padding-left:7px\">2.2 Italian Models<\/h2>","19b04d71":"<p style='font-size:20px'> Moving forward, we'll now look at the state wise distributions of cases, deaths and curation in both the years; 2020 and 2021. Histograms is the opted visulaiization for this analysis. We prepare our data by grouping by states and union teritorry column <b>State\/UnionTerritory<\/b>.","22d14be8":"><p style='font-size:25px'> A similar trend can be seen in 2021, where the initial months registers low number of cases as compared to the penultimate and ending months of the year. A difference that can be noticed is that in 2020 June was the month where cases started to rise and in 2021 the cases has been rising almost linearly from the start <\/p>","2317d4d2":"> <p style='font-size:25px'> It can be noticed that the five most affected states in 2021 are:<ui><li style='font-size:25px'>Maharashtra<\/li><li style='font-size:25px'>Kerala<\/li><li style='font-size:25px'>Karnataka<\/li><li style='font-size:25px'>Tamil Nadu<\/li><li style='font-size:25px'>UttarPradesh<\/li><\/ui><\/p>\n> <p style='font-size:25px'>The rise of Kerala in the ranks can be viewed as carelessness towards precautions by government and the people.<\/p>","c7d1aba1":"<p style='font-size:20px'>Moving on to explore Patient info data dataset where we first clean the data set and then procees further.<\/p>","8e3382b5":"<p style='font-size:20px'> The proposed idea for this analysis is to observe the trend of both the years seperately. We start by visualizing the monthly trend for 2020 and then we move onto 2021<\/p>","7192f73c":"<p style='font-size:20px'>Let's do something fancy now, we'll create a map graph and see cases on a geographical map. We start by preparing our data and we choose the provinces where we have information of latitudes and lattitudes.<\/p>","edbf1831":"> <p style='font-size:25px'> Almost every column in our data set contains null values. Luckily all of them are numerical columns and hence we can fill them together and with zero so that we can use all our data and we do not loose information as the data set is fairly small with only 7845 data points.<\/p>","bf559619":"><p style='font-size:25px'>The box plot in the first visual, shows how the other viral diseases having low outliers are behaving normally but the Corona virus outbreak is evident and the evidence continues in the following time series plot.<\/p>","5fb44204":"<p style='font-size:20px'> The Vaccination came as a blessing in disguise for the whole world. There were many different vaccination developed across the world but in India majorly 3 were used, namely: Covishield; The oxford developed vaccine, Covaxin; India's first indegenious vaccine and the Russian vaccine Sputnik V. We will explore our data set to find the patterns. <\/p>","bf9e2dd7":"# # This code snapshot for best_classifier function has been taken from <a href=https:\/\/www.univ.ai>Univ.ai: The best place to learn Data Science<\/a>","79b5bf74":"<p style='font-size:20px'> Remember we created a collective dataset, now we will use it. We wanted to see that how the vaccine is working and with the available data we chose to look at the number of people cured with and without vaccine.<\/p>","c4f42bba":"<h2 style = \"background:black;border:0;height:55px;width:340px;padding-top:5px;color:white;font-size:45px;padding-left:7px\">1.5 Conclusion<\/h2>","70cbc56a":"<p style='font-size:20px'> Now that we have our data ready we will plot this graph with plotly and we will get the map background from <a href=https:\/\/account.mapbox.com>MapBox API<\/a>. As this requires and API access token and for higher traffic it is paid.<\/p>","155b6e15":"<h2 style = \"background:black;border:0;height:55px;width:390px;padding-top:5px;color:white;font-size:45px;padding-left:7px\">2.3 Predictions<\/h2>","9970e764":"><p style='font-size:25px'>The number of cured patients increased rapidly in the time vaccination was present and applied. Ofcourse other factor also affects this graph but you can not deny the part that vaccination has played here.<\/p>","085ba68b":"<p>We'll start by importing all the necessary libraries. Pandas has been used to work with around and clean the datasets. MatplotLib, Plotly and Seaborn has been used for plottting all the graphs. Sklearn and Tensorflow are used for the developing models and features<\/p>","48097d9c":"><p style='font-size:25px'>Italy went into a late lockdown which seemed to work for them as the cases were controlled after the early rise. It was untill late in 2020 where the cases rose rapidly.<\/p>","2e44ef52":"<p style='font-size:20px'>After Doing it for the above states, we would like to visualize it for the whole nation.<\/p>","6f11db7b":"<p style='font-size:20px'>We will now see the relationship between elder population ratio and total number of cases and we will visualise this relationship with a map graph.<\/p>"}}