{"cell_type":{"30606037":"code","08a1a8cb":"code","69fdd407":"code","a57fdbad":"code","b721193a":"code","4cc61b99":"code","131834e5":"code","74b3a571":"code","4ad742a6":"code","1a29cd9d":"code","abcdcf79":"code","a69efb72":"code","1d911b53":"code","37b6b15c":"code","a8b4f33c":"code","e1851fd4":"markdown","af1bb776":"markdown","33596507":"markdown","898956c1":"markdown","3350c7a0":"markdown","55daecd6":"markdown","5fda6cf1":"markdown"},"source":{"30606037":"import numpy as np\nimport pandas as pd\nfrom glob import glob\nimport os\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nfrom pathlib import Path\nimport plotly.express as px\nfrom multiprocessing import Pool\nimport multiprocessing as multi","08a1a8cb":"PATH = Path(\"..\/input\/google-smartphone-decimeter-challenge\")\ntrain_df = pd.read_csv(PATH \/ \"baseline_locations_train.csv\")\ntest_df = pd.read_csv(PATH \/ \"baseline_locations_test.csv\")","69fdd407":"print(train_df.shape)\ntrain_df.head()","a57fdbad":"print(test_df.shape)\ntest_df.head()","b721193a":"def gnss_log_to_dataframes(path):\n    gnss_section_names = {'Raw','UncalAccel', 'UncalGyro', 'UncalMag', 'Fix', 'Status', 'OrientationDeg'}\n    with open(path) as f_open:\n        datalines = f_open.readlines()\n\n    datas = {k: [] for k in gnss_section_names}\n    gnss_map = {k: [] for k in gnss_section_names}\n    for dataline in datalines:\n        is_header = dataline.startswith('#')\n        dataline = dataline.strip('#').strip().split(',')\n        # skip over notes, version numbers, etc\n        if is_header and dataline[0] in gnss_section_names:\n            try:\n                gnss_map[dataline[0]] = dataline[1:]\n            except:\n                pass\n        elif not is_header:\n            try:\n                datas[dataline[0]].append(dataline[1:])\n            except:\n                pass\n    results = dict()\n    for k, v in datas.items():\n        results[k] = pd.DataFrame(v, columns=gnss_map[k])\n    # pandas doesn't properly infer types from these lists by default\n    for k, df in results.items():\n        for col in df.columns:\n            if col == 'CodeType':\n                continue\n            try:\n                results[k][col] = pd.to_numeric(results[k][col])\n            except:\n                pass\n    return results","4cc61b99":"def get_addtional_data(df : pd.DataFrame, path: Path, train = True):\n    gnss_section_names = {'Raw','UncalAccel', 'UncalGyro', 'UncalMag', 'Fix', 'Status', 'OrientationDeg'}\n    section_names = {'GroundTruth', 'Derived', 'Raw','UncalAccel', 'UncalGyro', 'UncalMag', 'Fix', 'Status', 'OrientationDeg'}\n    _columns = ['latDeg', 'lngDeg', 'heightAboveWgs84EllipsoidM']\n\n    output = dict()\n    for section in section_names:\n        output[section] = pd.DataFrame()\n\n    if train:\n        start_path = \"train\"\n    else:\n        start_path = \"test\"\n        \n    for path in tqdm(glob(str(PATH \/ start_path \/ \"*\/*\/*\"))):\n        print(path)\n        (collectionName, phoneName) = path.split(\"\/\")[-3:-1]\n        \n        file_name = path.split(\"\/\")[-1]\n        \n        if(file_name.find('ground_truth') >= 0): # get ground truth data\n            _df = pd.read_csv(path)    \n            _df[['t_'+col for col in _columns]] = _df[_columns]\n            _df = _df.drop(columns=_columns)\n            output['GroundTruth'] = pd.concat([output['GroundTruth'], _df])\n            \n        elif(file_name.find('derived.csv') >= 0): # get derived data\n            _df = pd.read_csv(path)\n            output['Derived'] = pd.concat([output['Derived'], _df])\n            \n        elif(file_name.find('GnssLog.txt') >= 0): # get gnss log data (it is dict)\n            _dict = gnss_log_to_dataframes(path)\n            for key, value in _dict.items():\n                if value.shape[0] == 0: # empty log bypass\n                    continue\n                    \n                # Addtional meta data for merging original data frame\n                value['collectionName'] = collectionName \n                value['phoneName'] = phoneName\n                if (key == \"Status\") or (key == \"Fix\"):  \n                    value.rename(columns = {'UnixTimeMillis':'utcTimeMillis'}, inplace = True)\n                value[\"millisSinceGpsEpoch\"] = value[\"utcTimeMillis\"] - 315964800000\n                \n                output[key] = pd.concat([output[key], value])\n\n    for key, value in output.items():\n        if value.shape[0] == 0:\n            continue\n        df = pd.merge_asof(df.sort_values('millisSinceGpsEpoch'), \n              value.sort_values('millisSinceGpsEpoch'), \n              on=\"millisSinceGpsEpoch\", by=[\"collectionName\", \"phoneName\"], \n              direction='nearest',tolerance=100000)\n        \n    return df\n    \n                \n    \n    ","131834e5":"output = get_addtional_data(train_df, PATH, train = True)\n\noutput.to_pickle(\"gsdc_train.pkl.gzip\")","74b3a571":"output = get_addtional_data(test_df, PATH, train = False)\n\noutput.to_pickle(\"gsdc_test.pkl.gzip\")","4ad742a6":"%clear","1a29cd9d":"import numpy as np\nimport pandas as pd\nfrom glob import glob\nimport os\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nfrom pathlib import Path\nimport plotly.express as px","abcdcf79":"PATH = Path(\"..\/input\/google-smartphone-decimeter-challenge\")","a69efb72":"df_train = pd.read_pickle(\"gsdc_train.pkl.gzip\")","1d911b53":"print(df_train.shape)\ndf_train.head()","37b6b15c":"df_test = pd.read_pickle(\"gsdc_test.pkl.gzip\")","a8b4f33c":"print(df_test.shape)\ndf_test.head()","e1851fd4":"# Set Path and Load Dataset","af1bb776":"# Reference\n1. https:\/\/www.kaggle.com\/rohanrao\/tutorial-on-reading-large-datasets\n1. https:\/\/www.kaggle.com\/asobod11138\/gsdc-neuralnet-keras (multi-threading)","33596507":"# Import Libraries","898956c1":"# Save To Pickle File","3350c7a0":"# Define Loading GnssLog.txt file Function","55daecd6":"# Load All Data Function","5fda6cf1":"# Load Pickle File"}}