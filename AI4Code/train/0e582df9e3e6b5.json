{"cell_type":{"8b43ad6e":"code","b2e3df5d":"code","c336d979":"code","51bfd362":"code","b140022f":"code","39c42a13":"code","749341ef":"code","48e60358":"code","ecfca645":"code","24fb55b1":"code","f5e42257":"code","936ba3e4":"code","8d7d875a":"code","3f8ac6bb":"code","a96b185a":"markdown","e994fe66":"markdown","486bdb62":"markdown","34e41096":"markdown","7d00fd1b":"markdown","e714d85b":"markdown","98dbe83a":"markdown","c8f2843e":"markdown"},"source":{"8b43ad6e":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b2e3df5d":"leaderboard_prev = pd.read_csv('..\/input\/lb20190401\/publicleaderboarddata20190401\/two-sigma-financial-news-publicleaderboard.csv')\nleaderboard = pd.read_csv('..\/input\/lb20190418\/publicleaderboarddata20190418\/two-sigma-financial-news-publicleaderboard.csv')","c336d979":"leaderboard.head()","51bfd362":"leaderboard.shape[0], leaderboard.TeamId.nunique()","b140022f":"plt.figure(figsize=(15,6))\nleaderboard.Score.plot.density(color='green')\nleaderboard.groupby('TeamId').Score.max().plot.density(color='red');","39c42a13":"leaderboard.groupby('TeamName').size().value_counts()","749341ef":"leaderboard.groupby('TeamName').size().plot.hist();","48e60358":"lb_sorted = leaderboard.groupby('TeamName').Score.max().sort_values(ascending=False).reset_index()\nlb_sorted_prev = leaderboard_prev.groupby('TeamName').Score.max()\nlb_sorted['Score_prev'] = lb_sorted.TeamName.map(lb_sorted_prev) \nlb_sorted['Score_prev_rank'] = lb_sorted['Score_prev'].rank()\nlb_sorted['Score_rank'] = lb_sorted['Score'].rank()\nlb_sorted['Score_prev_rank'] = lb_sorted['Score_prev_rank'].max() - lb_sorted['Score_prev_rank'] + 1\nlb_sorted['Score_rank'] = lb_sorted['Score_rank'].max() - lb_sorted['Score_rank'] + 1","ecfca645":"from bokeh.io import output_file,show,output_notebook,push_notebook\nfrom bokeh.plotting import figure\nfrom bokeh.models import ColumnDataSource,HoverTool,CategoricalColorMapper\nfrom bokeh.layouts import row,column,gridplot\nfrom bokeh.models.widgets import Tabs,Panel\noutput_notebook()\n\nsource = ColumnDataSource(lb_sorted)\nplot = figure(\n    x_axis_label = \"Score\",\n    y_axis_label = \"Prev Score\",\n    tools=\"crosshair,pan,wheel_zoom,zoom_in,zoom_out,box_zoom,undo,redo,reset,tap,save,box_select,poly_select,lasso_select,\",\n    plot_width=1000,\n    plot_height=1000,\n)\nplot.circle(x=\"Score\",y=\"Score_prev\",source = source, radius=.01, alpha=0.5)\nhover = HoverTool(tooltips = [\n    ('Team', '@TeamName'), \n    ('Score\/Prev', '@Score \/ @Score_prev'), \n    ('LB\/Prev', '@Score_rank \/ @Score_prev_rank')])\nplot.add_tools(hover)\n\nplot.text(x=lb_sorted['Score'],y=lb_sorted['Score_prev'], text=lb_sorted['TeamName'],\n       text_baseline=\"middle\", text_align=\"left\", text_font_size='8pt', text_font='Arial', alpha=0.5)\n    \nshow(plot)\n","24fb55b1":"df = lb_sorted.dropna().copy()\ndf.columns","f5e42257":"from IPython.display import HTML\nimport matplotlib.animation as animation\n\ndf = lb_sorted.dropna().copy()\ndf.columns = ['z', 'y', 'x', 'x_rank', 'y_rank']\n\nfig, ax = plt.subplots(figsize=(15,15))\nax.grid()\ni=0\nsc, = ax.plot((df.x+i*(df.y-df.x)\/50).values, (df.x_rank+i*(df.y_rank-df.x_rank)\/50).values, marker=\"o\", ls=\"\") # set linestyle to none\nax.set_ylim(ax.get_ylim()[::-1])\ntexts = []\nfor ind in df.index.values:\n    texts += [plt.text(df.loc[ind, 'x']+0.01, df.loc[ind, 'x_rank'], df.loc[ind, 'z'])]\n\nFRAMES = 32\nFRAMES_2 = FRAMES \/\/ 2\n\ndef plot(i):\n    delta = ((df.y_rank - df.x_rank)\/700 * (FRAMES_2 - np.abs(i - FRAMES_2))\/FRAMES_2).values\n    \n    X = [(df.x+i*(df.y-df.x)\/FRAMES).values+delta*2, (df.x_rank+i*(df.y_rank-df.x_rank)\/FRAMES).values+delta*300]\n    sc.set_data(X[0], X[1])\n    for ind, t in enumerate(texts):\n        t.set_x(X[0][ind])\n        t.set_y(X[1][ind])\n#     ax.relim()\n    ax.set_xlim(np.min(X[0]), np.max(X[0]))\n    ax.set_ylim(np.max(X[1]), np.min(X[1]))\n    ax.autoscale_view(True,True,True)\n\nani = animation.FuncAnimation(fig, plot,\n            frames=FRAMES+1, interval=100, repeat=False) \nHTML(ani.to_jshtml())","936ba3e4":"scores_count = leaderboard.groupby('Score').size().sort_values(ascending=False)\nscores_count[scores_count>1]","8d7d875a":"for s in scores_count[scores_count>1].index.values:\n    print(f'Score: {s}, Kernels count: {scores_count[s]}')\n    print(f'Teamnames:', leaderboard[leaderboard.Score==s].TeamName.values)\n    print()","3f8ac6bb":"plt.figure(figsize=(9,96))\nsns.barplot(x='Score', y='TeamName', data=lb_sorted);","a96b185a":"> We have 959 kernels in competition and 693 teams.","e994fe66":"All results (Later we will have more information)","486bdb62":"Simple kernel for of Two sigma predict stock movements results. Later I'll add some animation based on later LB results.","34e41096":"There are 427 teams with one kernel and 266 teams with 2 kernels","7d00fd1b":"Results of two previous scorings","e714d85b":"And animation :)","98dbe83a":"Kernels with the same results:","c8f2843e":"This is a distribution of all kernels and team max values"}}