{"cell_type":{"fd968cb8":"code","423d89e3":"code","8d94b4bd":"code","442b21c5":"code","47fe3e47":"code","5d879031":"code","63dfa3b4":"code","c58ae2f0":"markdown","fd44e161":"markdown","22923d22":"markdown","2f712ede":"markdown","b27c08ff":"markdown"},"source":{"fd968cb8":"import pandas as pd \nimport numpy as np\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","423d89e3":"dataset = pd.read_csv('..\/input\/diabetes-dataset\/diabetes2.csv')\n\nx = dataset.iloc[:, 0:8].values\ny = dataset.iloc[:, 8].values","8d94b4bd":"import statsmodels.api as sm\ndef backwardElimination(x, sl):    \n    numVars = len(x[0])    \n    for i in range(0, numVars):        \n        regressor_OLS = sm.OLS(y, x.tolist()).fit()        \n        maxVar = max(regressor_OLS.pvalues).astype(float)        \n        if maxVar > sl:            \n            for j in range(0, numVars - i):                \n                if (regressor_OLS.pvalues[j].astype(float) == maxVar):                    \n                    x = np.delete(x, j, 1)    \n    regressor_OLS.summary()    \n    return x \n\nSL = 0.05\nX_opt = x[:, [0, 1, 2, 3, 4, 5, 6, 7]]\nX_Modeled = backwardElimination(X_opt, SL)","442b21c5":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X_Modeled, y, random_state = 0, test_size = 0.2)","47fe3e47":"from sklearn.preprocessing import StandardScaler\nsc_x = StandardScaler()\nx_train = sc_x.fit_transform(x_train)\nx_test = sc_x.fit_transform(x_test)\n\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nregressor = lr.fit(x_train, y_train)","5d879031":"y_pred = regressor.predict(x_test)\n\nfrom sklearn.model_selection import cross_val_score\naccuracy_1 = cross_val_score(estimator = regressor, X = x_train, y = y_train, cv = 10)\nporcentaje = accuracy_1.mean()\nprint(porcentaje)","63dfa3b4":"accuracy_2 = cross_val_score(estimator = regressor, X = x_test, y = y_test, cv = 10)\nporcentaje2 = accuracy_2.mean()\nprint(porcentaje2)","c58ae2f0":"**Porcentaje de predicci\u00f3n para conjuntos de entrenamiento**","fd44e161":"**Normalizamos las variables y creando el regresor logistico**","22923d22":"**Porcentaje de predicci\u00f3n para conjuntos de test**","2f712ede":"**Dividimos el dataset en entrenamiento y testing**","b27c08ff":"**Importamos la libreria statsmodels y crear la clase bacwardElimination para evaluar aquellas variables que tengan una correlaci\u00f3n fuerte con un p valor igual o menor a 0.05**"}}