{"cell_type":{"62fd633b":"code","27bf5caf":"code","7bc6ee6a":"code","72b3580a":"code","0de76391":"code","a0e12b75":"code","9e003066":"code","85bd5616":"code","581343dd":"code","f09a4f97":"markdown","04ff6438":"markdown","05ebde3b":"markdown","c8774a37":"markdown","5110f043":"markdown","3373d9c1":"markdown","2aed83ce":"markdown"},"source":{"62fd633b":"import random\nimport numpy as np\nimport pandas as pd\n\nfrom numba import njit\nfrom ortools.graph.pywrapgraph import SimpleMinCostFlow\nfrom ortools.linear_solver.pywraplp import Solver\n\nSEED = 1\nrandom.seed(SEED)\nnp.random.seed(SEED)\n\nN_DAYS = 100\nN_FAMILIES = 5000\nN_CHOICES = 10\nMAX_POP = 300\nMIN_POP = 125\n\ndata = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv')\n\nchoice_cols = [f'choice_{i}' for i in range(N_CHOICES)]\nCHOICES = data[choice_cols].values - 1\n\nCOST_PER_FAMILY = [0, 50, 50, 100, 200, 200, 300, 300, 400, 500, 500]\nCOST_PER_MEMBER = [0,  0,  9,   9,   9,  18,  18,  36,  36, 235, 434]\nF_COUNTS = data['n_people'].astype(int).values\n\nC_COSTS = np.zeros((N_FAMILIES, N_DAYS), dtype=np.int32)\nfor f in range(N_FAMILIES):\n    for d in range(N_DAYS):\n        if d in CHOICES[f, :]:\n            c = list(CHOICES[f, :]).index(d)\n        else:\n            c = N_CHOICES\n        C_COSTS[f, d] = COST_PER_FAMILY[c] + F_COUNTS[f] * COST_PER_MEMBER[c]","27bf5caf":"@njit(fastmath=True)\ndef get_daily_occupancy(schedule):\n    daily_occupancy = np.zeros(N_DAYS, np.int32)\n    for f, d in enumerate(schedule):\n        daily_occupancy[d] += F_COUNTS[f]\n    return daily_occupancy\n\n\n@njit(fastmath=True)\ndef cost_function(schedule):\n    choice_cost = 0\n    for f, d in enumerate(schedule):\n        choice_cost += C_COSTS[f, d]\n    \n    daily_occupancy = get_daily_occupancy(schedule)\n        \n    accounting_cost = 0\n    for d0 in range(N_DAYS):\n        pop0 = daily_occupancy[d0]\n        d1 = min(d0+1, N_DAYS-1)\n        pop1 = daily_occupancy[d1]\n        accounting_cost += max(0, (pop0-125.0) \/ 400.0 * pop0**(0.5 + abs(pop0 - pop1) \/ 50.0))\n    \n    violations = (np.count_nonzero(daily_occupancy < MIN_POP) + \n                  np.count_nonzero(daily_occupancy > MAX_POP))\n    penalty = int(violations * 10e8)\n    \n    return choice_cost, accounting_cost, penalty\n\n\ndef fix_schedule(schedule):\n    daily_occupancy = get_daily_occupancy(schedule)\n    \n    f_list = np.flip(np.argsort(F_COUNTS))\n    \n    while (daily_occupancy.min() < MIN_POP) or \\\n          (daily_occupancy.max() > MAX_POP):\n        \n        for c in range(N_CHOICES):\n            for f in f_list:\n                n = F_COUNTS[f]\n                d_old = schedule[f]\n                d_new = CHOICES[f, c]\n\n                if (daily_occupancy[d_old] > MAX_POP) and \\\n                   ((daily_occupancy[d_new] + n) <= MAX_POP):\n                    schedule[f] = d_new\n                    daily_occupancy[d_new] += n\n                    daily_occupancy[d_old] -= n\n\n        for c in range(N_CHOICES):\n            for f in f_list:\n                n = F_COUNTS[f]\n                d_old = schedule[f]\n                d_new = CHOICES[f, c]\n\n                if (daily_occupancy[d_new] < MIN_POP) and \\\n                   ((daily_occupancy[d_old] - n) >= MIN_POP):\n                    schedule[f] = d_new\n                    daily_occupancy[d_new] += n\n                    daily_occupancy[d_old] -= n\n    \n    return schedule","7bc6ee6a":"model = Solver('SantaLinear', Solver.GLOP_LINEAR_PROGRAMMING)\n\nset_f = range(N_FAMILIES)\nset_d = range(N_DAYS)\n\nx = {(f, d): model.BoolVar(f'x[{f},{d}]') for f in set_f for d in CHOICES[f, :]}\ny = {(d): model.IntVar(0, MAX_POP-MIN_POP, f'y[{d}]') for d in set_d}\n\nfor f in set_f:\n    model.Add(model.Sum(x[f, d] for d in set_d if (f, d) in x.keys()) == 1)\n\npops = [model.Sum(x[f, d] * F_COUNTS[f] for f in set_f if (f, d) in x.keys()) for d in set_d]\n\nfor d0 in set_d:\n    pop0 = pops[d0]\n    model.Add(pop0 >= MIN_POP)\n    model.Add(pop0 <= MAX_POP)\n\n    d1 = min(d0+1, N_DAYS-1)\n    pop1 = pops[d1]\n    model.Add(pop0 - pop1 <= y[d])\n    model.Add(pop1 - pop0 <= y[d])\n    \n    model.Add(y[d] <= 30)\n\nDELTA_WEIGHT = 500\nobjective = model.Sum(x[f, d] * C_COSTS[f, d] for f, d in x.keys())\nobjective += model.Sum(y[d] for d in set_d) * DELTA_WEIGHT\n\nmodel.Minimize(objective)\n\nmodel.SetTimeLimit(5 * 60 * 1000)\nstatus = model.Solve()\n\nif status == Solver.OPTIMAL:\n    print('Found Optimal Solution')\nelse:\n    print(f'Solver Error. Status = {status}')\n\nschedule = np.full(N_FAMILIES, -1, dtype=np.int8)\n\nx_vals = np.zeros((N_FAMILIES, N_DAYS))\nfor f, d in x.keys():\n    x_vals[f, d] = x[f, d].solution_value()\n\nfor f, vals in enumerate(x_vals):\n    d = np.argmax(vals)\n    schedule[f] = d\n\nscore = cost_function(schedule)\nprint(sum(score), '|', score)\n\nschedule = fix_schedule(schedule)\nscore = cost_function(schedule)\nprint(sum(score), '|', score)","72b3580a":"def choice_search(schedule):\n    best_score = cost_function(schedule)\n    \n    f_list = np.flip(np.argsort(F_COUNTS))\n\n    for f in f_list:\n        d_old = schedule[f]\n        for d_new in CHOICES[f, :]:\n            schedule[f] = d_new\n\n            score = cost_function(schedule)\n                \n            if (sum(score) < sum(best_score)) or \\\n               (sum(score) == sum(best_score) and np.random.random() < 0.5):\n                best_score = score\n                d_old = d_new\n            else:\n                schedule[f] = d_old\n    return schedule","0de76391":"def min_cost_flow(schedule):\n    MIN_FAMILY = F_COUNTS.min()\n    MAX_FAMILY = F_COUNTS.max()\n    \n    solver = SimpleMinCostFlow()\n    \n    occupancy = np.zeros((N_DAYS, MAX_FAMILY+1), dtype=np.int32)\n    for f, n in enumerate(F_COUNTS):\n        f_node = int(f)\n        f_demand = -1\n        solver.SetNodeSupply(f_node, f_demand)\n        \n        d = schedule[f]\n        occupancy[d, n] += 1\n        \n    for d in range(N_DAYS):\n        for n in range(MIN_FAMILY, MAX_FAMILY):\n            occ_node = int(N_FAMILIES + (n-2) * N_DAYS + d)\n            occ_supply = int(occupancy[d, n])\n            solver.SetNodeSupply(occ_node, occ_supply)\n\n    for f, n in enumerate(F_COUNTS):\n        f_node = int(f)\n        \n        for c in range(N_CHOICES):\n            d = CHOICES[f, c]\n            c_cost = int(C_COSTS[f, d])\n            occ_node = int(N_FAMILIES + (n-2) * N_DAYS + d)\n            solver.AddArcWithCapacityAndUnitCost(occ_node, f_node, 1, c_cost)\n\n    status = solver.SolveMaxFlowWithMinCost()\n\n    if status == SimpleMinCostFlow.OPTIMAL:\n        for arc in range(solver.NumArcs()):\n            if solver.Flow(arc) > 0:\n                head = solver.Head(arc)\n\n                if head in range(N_FAMILIES):\n                    f = head\n                    n = F_COUNTS[f]\n                    occ_node = solver.Tail(arc)\n                    d = occ_node - N_FAMILIES - (n-2) * N_DAYS\n                    schedule[f] = d\n    else:\n        print(f'Solver Error. Status = {status}')\n\n    return schedule","a0e12b75":"def swap_search(schedule):\n    best_score = cost_function(schedule)\n    \n    f_list = np.random.permutation(N_FAMILIES)\n    \n    for f0 in f_list:\n        d0 = schedule[f0]\n        c0 = list(CHOICES[f0, :]).index(d0)\n\n        swapped = False\n        for d1 in CHOICES[f0, 0:c0]:\n            f1_set = np.where(schedule == d1)[0]\n            for f1 in f1_set:\n                if d0 in CHOICES[f1, :]:\n                    schedule[f0] = d1\n                    schedule[f1] = d0\n                    score = cost_function(schedule)\n                    \n                    if (sum(score) < sum(best_score)) or \\\n                       (sum(score) == sum(best_score) and np.random.random() < 0.5):\n                        best_score = score\n                        swapped = True\n                        break\n                    else:\n                        schedule[f0] = d0\n                        schedule[f1] = d1\n            if swapped: break\n                \n    return schedule","9e003066":"def random_climb(schedule, repeats=100000):\n    best_score = cost_function(schedule)\n\n    for _ in range(repeats):\n        f = np.random.randint(N_FAMILIES)\n        c = np.random.randint(N_CHOICES)\n\n        d_old = schedule[f]\n        d_new = CHOICES[f, c]\n\n        schedule[f] = d_new\n        score = cost_function(schedule)\n\n        if (sum(score) < sum(best_score)) or \\\n           (sum(score) == sum(best_score) and np.random.random() < 0.5):\n            best_score = score\n        else:\n            schedule[f] = d_old\n\n    return schedule","85bd5616":"best_score = cost_function(schedule)\n\nno_improvement = 0\nwhile no_improvement < 5:\n    improved = False\n    \n    while True:\n        schedule = random_climb(schedule)\n        score = cost_function(schedule)\n        print('Random  :', sum(score), '|', score)\n        if sum(score) < sum(best_score):\n            best_score = score\n            improved = True\n        else:\n            break\n    \n    while True:\n        schedule = swap_search(schedule)\n        score = cost_function(schedule)\n        print('Swaps   :', sum(score), '|', score)\n        if sum(score) < sum(best_score):\n            best_score = score\n            improved = True\n        else:\n            break\n    \n    while True:\n        schedule = choice_search(schedule)\n        score = cost_function(schedule)\n        print('Choice  :', sum(score), '|', score)\n        if sum(score) < sum(best_score):\n            best_score = score\n            improved = True\n        else:\n            break\n    \n    if not improved:\n        schedule = min_cost_flow(schedule)\n        score = cost_function(schedule)\n        print('MinCost :', sum(score), '|', score)\n        if sum(score) < sum(best_score):\n            best_score = score\n            improved = True\n    \n    no_improvement = 0 if improved else no_improvement + 1","581343dd":"submission = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/sample_submission.csv')\nsubmission['assigned_day'] = schedule + 1\nsubmission.to_csv('submission.csv', index=False)","f09a4f97":"# Swap Search","04ff6438":"# Choice Search","05ebde3b":"# References\n* https:\/\/www.kaggle.com\/vipito\/santa-ip\n* https:\/\/www.kaggle.com\/golubev\/optimization-preference-cost-mincostflow\n* https:\/\/www.kaggle.com\/nickel\/santa-s-2019-fast-pythonic-cost-23-s\n* https:\/\/www.kaggle.com\/inversion\/santa-s-2019-starter-notebook","c8774a37":"# Min Cost Flow","5110f043":"# Ensemble","3373d9c1":"# Random Hill Climbing","2aed83ce":"# Initial LP solution"}}