{"cell_type":{"c38ea748":"code","c5850825":"code","bc815cb3":"code","ec2906a0":"code","9becd87d":"code","6ac0f6b8":"code","3295fb58":"code","6e5954f3":"code","3be99546":"code","83e5ad62":"code","0337f41c":"code","89da84f1":"code","2d2edaf4":"code","8e21962a":"code","e9cc8893":"code","855c3a5c":"code","356fe6f7":"code","5f6c1bbb":"code","bc4b2b40":"code","4e7bb526":"code","a86324eb":"code","452a18cc":"code","085608c1":"code","38b66d86":"code","eef86915":"code","a1acefd6":"code","3629617f":"code","f61c0e2b":"code","ae35f351":"code","35cf72b8":"code","7bdbcb81":"code","040bc973":"code","208726fc":"code","d64a2b15":"code","4c993d2d":"markdown","98a4da84":"markdown","5f80ddc3":"markdown","17a5edb6":"markdown"},"source":{"c38ea748":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport plotly.express as px\nimport pandas_profiling as pp\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nfrom plotly.offline import iplot\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","c5850825":"Data=pd.read_csv(\"\/kaggle\/input\/online-retail-socgen\/OnlineRetail.csv\", encoding='iso-8859-1' )\nprint(\"Count of Rows, Columns: \",Data.shape)","bc815cb3":"Data.head()","ec2906a0":"Data.isnull().sum()","9becd87d":"for k in Data.columns:\n    print(k,Data[k].nunique())\n    \nData.head()","6ac0f6b8":"bool_series = Data[\"InvoiceNo\"].str.startswith(\"C\", na = False) \nInvoice_Cancelled = Data[bool_series]\nInvoice_Cancelled","3295fb58":"Data['Date']=[item[0] for item in Data['InvoiceDate'].str.split()]\nData['Time']=[item[1] for item in Data['InvoiceDate'].str.split()]\nData['Month']=[item[1] for item in Data['Date'].str.split('-')]\nData['Year']=[item[2] for item in Data['Date'].str.split('-')]\nData['TotalCost']=Data['Quantity']*Data['UnitPrice']","6e5954f3":"Month={'1':'Jan' , '2':'Feb' , '3':'Mar', '4':'Apr' ,'5':'May' , '6':'Jun' ,\n       '7':'Jul' , '8':'Aug' , '9':'Sep' , '10':'Oct', '11':'Nov' ,'12':'Dec',\n       '01':'Jan' , '02':'Feb' , '03':'Mar', '04':'Apr' ,'05':'May' , '06':'Jun' ,\n       '07':'Jul' , '08':'Aug' , '09':'Sep' }\n\nData=Data.replace({\"Month\": Month})\nData.head()","3be99546":"temp_df = Data.groupby([\"Month\"])[\"TotalCost\"].agg([\"size\",\"mean\"]).reset_index()\ntemp_df[\"Month\"] = pd.to_datetime(temp_df.Month, format='%b', errors='coerce').dt.month\ntemp_df = temp_df.sort_values(by=\"Month\")\n\n\n\ntrace = go.Scatter(\n    x=temp_df['Month'],\n    y=temp_df['size'],\n    marker=dict(\n        color=\"#1E90FF\",\n    ),\n)\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Number of Sales - Month on Month\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=500,\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"funding\")","83e5ad62":"temp_df = Data.groupby([\"Month\"])[\"TotalCost\"].agg([\"mean\"]).reset_index()\ntemp_df[\"Month\"] = pd.to_datetime(temp_df.Month, format='%b', errors='coerce').dt.month\ntemp_df = temp_df.sort_values(by=\"Month\")\n","0337f41c":"\ntrace = go.Scatter(\n    x=temp_df['Month'],\n    y=temp_df['mean'],\n    marker=dict(\n        color=\"#1E90FF\",\n    ),\n)\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Average cost of Sales - Month on Month\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=500,\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Retail\")","89da84f1":"temp_df","2d2edaf4":"def horizontal_bar_chart(srs, color):\n    trace = go.Bar(\n        x=srs.values[::-1],\n        y=srs.index[::-1],\n        showlegend=False,\n        orientation = 'h',\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\ncnt_srs = Data['Country'].value_counts().head(7)\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Number of Sales in Top 7 Country\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=800,\n)\n\ndata = [horizontal_bar_chart(cnt_srs, \"#1E90FF\")]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Retail\")\n","8e21962a":"def horizontal_bar_chart(srs, color):\n    trace = go.Bar(\n        x=srs.values[::-1],\n        y=srs.index[::-1],\n        showlegend=False,\n        orientation = 'h',\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\ncnt_srs = Data['Country'].value_counts().tail(7)\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Number of Sales in Least 7 Country\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=800,\n)\n\ndata = [horizontal_bar_chart(cnt_srs, \"#1E90FF\")]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Retail\")\n","e9cc8893":"temp_df = Data.groupby([\"Country\",\"Month\"])[\"TotalCost\"].agg([\"size\", \"mean\"]).reset_index()\ntemp_df.columns = [\"Country\",\"Month\", \"Size\", \"Mean\"]","855c3a5c":"temp_df = Data.groupby([\"Country\",\"Month\"])[\"TotalCost\"].agg([\"size\", \"mean\"]).reset_index()\ntemp_df","356fe6f7":"temp_df = Data.groupby([\"Country\",\"Month\"])[\"TotalCost\"].agg([\"size\", \"mean\"]).reset_index()\ntemp_df.columns = [\"Country\",\"Month\", \"Size\", \"Mean\"]\ntemp_df= temp_df.sort_values(by=['Mean'])\n\ndef horizontal_bar_chart(srs, color):\n    trace = go.Bar(\n        x=temp_df['Mean'].head(7),\n        y=temp_df['Country'].head(7),\n        showlegend=False,\n        orientation = 'h',\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\ncnt_srs = temp_df['Mean'].head(7)\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Average Cost spend by Country\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=800,\n)\n\ndata = [horizontal_bar_chart(cnt_srs, \"#1E90FF\")]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Retail\")\n","5f6c1bbb":"temp_df.sort_values(by=\"Size\", ascending=False).reset_index()[:100]","bc4b2b40":"temp_df = Data.groupby([\"Country\",\"Month\"])[\"TotalCost\"].agg([\"size\", \"mean\"]).reset_index()\ntemp_df.columns = [\"Country\",\"Month\", \"Size\", \"Mean\"]\n#temp_df.Country = temp_df[temp_df.Country != 'United Kingdom']\ntemp_df=temp_df.sort_values(by=\"Mean\", ascending=False).reset_index()[:100]\ntemp_df=temp_df.head(50)\nfig = px.scatter(temp_df, x=\"Month\", y=\"Country\", color=\"Country\", size=\"Mean\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Mean Purchase over Month by Country\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=600,\n    showlegend=False\n)\nfig.update_layout(layout)\nfig.show()","4e7bb526":"temp_df = Data.groupby([\"Country\",\"Month\"])[\"TotalCost\"].agg([\"size\", \"mean\"]).reset_index()\ntemp_df.columns = [\"Country\",\"Month\", \"Size\", \"Mean\"]\n#temp_df.Country = temp_df[temp_df.Country != 'United Kingdom']\ntemp_df=temp_df.sort_values(by=\"Size\", ascending=False).reset_index()[:100]\n#temp_df=tem\nfig = px.scatter(temp_df, x=\"Month\", y=\"Country\", color=\"Country\", size=\"Size\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Number of Purchase over Month by Country\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=600,\n    showlegend=False\n)\nfig.update_layout(layout)\nfig.show()","a86324eb":"from wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\n\ninv_names = []\nfor invs in Data['Description']:\n    for inv in str(invs).split():\n        if inv != \"\":\n            inv_names.append(inv.strip().lower().replace(\"'\",\"\"))\n            \ndef plot_wordcloud(text, mask=None, max_words=40, max_font_size=80, figure_size=(24.0,16.0), \n                   title = None, title_size=40, image_color=False):\n    stopwords = set(STOPWORDS)\n    more_stopwords = {'one', 'br', 'Po', 'th', 'sayi', 'fo', 'Unknown', 'nan', ' nan'}\n    stopwords = stopwords.union(more_stopwords)\n\n    wordcloud = WordCloud(background_color='white',\n                    stopwords = stopwords,\n                    max_words = max_words,\n                    prefer_horizontal = 1.0,\n                    max_font_size = max_font_size, \n                    min_font_size = 10,\n                    random_state = 42,\n                    #color_func = lambda *args, **kwargs: (140,0,0),\n                    #color_func = color_map(),\n                    colormap=\"Blues\",\n                    width=600, \n                    height=300,\n                    mask = mask)\n    wordcloud.generate(str(text))\n    \n    plt.figure(figsize=figure_size)\n    if image_color:\n        #image_colors = ImageColorGenerator(mask);\n        plt.imshow(wordcloud.recolor(color_func=image_color), interpolation=\"bilinear\");\n        plt.title(title, fontdict={'size': title_size, 'color': 'blue',\n                                  'verticalalignment': 'bottom'})\n    else:\n        plt.imshow(wordcloud);\n        plt.title(title, fontdict={'size': title_size, 'color': 'blue', \n                                  'verticalalignment': 'bottom'})\n    plt.axis('off');\n    plt.tight_layout()  \n\nplot_wordcloud(' '.join(inv_names), title=\"Most Sold Products\")","452a18cc":"Data['Description']=Data.groupby([\"Country\",\"UnitPrice\",\"Date\"])['Description'].transform(lambda x: x.fillna(x.mode()))\nData['Description']=Data['Description'].transform(lambda x: x.fillna(\"Others\"))","085608c1":"temp_df = Data.groupby([\"Description\",\"Month\"])[\"TotalCost\"].agg([\"size\", \"mean\"]).reset_index()\ntemp_df.columns = [\"Description\",\"Month\", \"Size\", \"Mean\"]\ntemp_df= temp_df.sort_values(by=['Mean'])\n\ntemp_df=temp_df.sort_values(by=\"Size\", ascending=False).reset_index()[:50]\n#temp_df=tem\nfig = px.scatter(temp_df, x=\"Month\", y=\"Description\", color=\"Description\", size=\"Size\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Number of Purchase over Month by Description\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=600,\n    showlegend=False\n)\nfig.update_layout(layout)\nfig.show()","38b66d86":"temp_df = Data.groupby([\"Description\",\"Month\"])[\"TotalCost\"].agg([\"size\", \"mean\"]).reset_index()\ntemp_df.columns = [\"Description\",\"Month\", \"Size\", \"Mean\"]\ntemp_df= temp_df.sort_values(by=['Mean'])\n\ntemp_df=temp_df.sort_values(by=\"Size\", ascending=False).reset_index().tail(50)\n#temp_df=tem\nfig = px.scatter(temp_df, x=\"Month\", y=\"Description\", color=\"Description\", size=\"Size\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Number of Purchase over Month by Description\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=600,\n    showlegend=False\n)\nfig.update_layout(layout)\nfig.show()","eef86915":"temp_df = Data.groupby([\"Description\",\"Month\"])[\"TotalCost\"].agg([\"size\", \"mean\"]).reset_index()\ntemp_df.columns = [\"Description\",\"Month\", \"Size\", \"Mean\"]\ntemp_df= temp_df.sort_values(by=['Mean'])\n\ntemp_df=temp_df.sort_values(by=\"Size\", ascending=False).reset_index().tail(50)\n#temp_df=tem\nfig = px.scatter(temp_df, x=\"Month\", y=\"Description\", color=\"Description\", size=\"Size\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Number of Purchase over Month by Description\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=600,\n    showlegend=False\n)\nfig.update_layout(layout)\nfig.show()","a1acefd6":"temp_df = Data.groupby([\"Country\"])[\"TotalCost\"].agg([\"size\", \"sum\"]).reset_index()\ntemp_df.columns = [\"Country\", \"Size\", \"Sum\"]\n#temp_df.Country = temp_df[temp_df.Country != 'United Kingdom']\ntemp_df=temp_df.sort_values(by=\"Sum\", ascending=False).reset_index().head(5)\ntemp_df=temp_df\nfig = px.scatter(temp_df, x=\"Sum\", y=\"Country\", color=\"Country\", size=\"Sum\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Top 5 Countries Contributing towards revenue\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=600,\n    showlegend=False\n)\nfig.update_layout(layout)\nfig.show()","3629617f":"temp_df = Data.groupby([\"Country\"])[\"TotalCost\"].agg([\"size\", \"sum\"]).reset_index()\ntemp_df.columns = [\"Country\", \"Size\", \"Sum\"]\n#temp_df.Country = temp_df[temp_df.Country != 'United Kingdom']\ntemp_df=temp_df.sort_values(by=\"Sum\", ascending=False).reset_index().tail(5)\ntemp_df=temp_df\nfig = px.scatter(temp_df, x=\"Sum\", y=\"Country\", color=\"Country\", size=\"Sum\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Last 5 Countries Contributing towards revenue\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=600,\n    showlegend=False\n)\nfig.update_layout(layout)\nfig.show()","f61c0e2b":"temp_df","ae35f351":"temp_df=Data[Data['Country'] == 'United Kingdom']\ntemp_df = Data.groupby([\"Description\"])[\"TotalCost\"].agg([\"size\", \"sum\"]).reset_index()\ntemp_df.columns = [\"Description\", \"Size\", \"Sum\"]\n#temp_df.Country = temp_df[temp_df.Country != 'United Kingdom']\ntemp_df=temp_df.sort_values(by=\"Sum\", ascending=False).head(10)\ntemp_df=temp_df","35cf72b8":"def horizontal_bar_chart(srs, color):\n    trace = go.Bar(\n        x=temp_df['Sum'],\n        y=temp_df['Description'],\n        showlegend=False,\n        orientation = 'h',\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\ncnt_srs = temp_df['Sum']\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Top Sources Contributing to UK's Revenue\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=800,\n)\n\ndata = [horizontal_bar_chart(cnt_srs, \"#1E90FF\")]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Retail\")\n\n","7bdbcb81":"df=Data[Data['Country'] == 'United Kingdom']\ndf = Data.groupby([\"Description\"])[\"TotalCost\"].agg([\"size\", \"sum\"]).reset_index()\ndf.columns = [\"Description\", \"Size\", \"Sum\"]","040bc973":"print(\"Total  % of income of from these top 10 product in UK is\",sum(temp_df['Sum'])\/sum(df[\"Sum\"])*100)","208726fc":"temp_df=Data[['Month','Description']]\ntemp_df[\"Month\"] = pd.to_datetime(temp_df.Month, format='%b', errors='coerce').dt.month\ntemp_df = temp_df.sort_values(by=\"Month\")","d64a2b15":"nunique()","4c993d2d":"## Missing Values ","98a4da84":"## Unique Values","5f80ddc3":"## Feature Engineering","17a5edb6":"## 2. Analyze the sales performance of this company, and provide your insights regarding the same?\n   \n### Deepdive Analysis of Sales Performance  "}}