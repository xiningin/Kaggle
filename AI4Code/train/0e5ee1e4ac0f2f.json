{"cell_type":{"e98433c8":"code","98078a84":"code","6e1ae569":"code","f6db75df":"code","a2e49bfa":"code","641fa11d":"code","2001a376":"code","566e6299":"code","f655c022":"code","8c64b7bd":"code","489b3cbb":"code","fa582d81":"code","643b4107":"code","4a195953":"code","08ed7e1c":"code","f7ec9e48":"code","da378d2d":"code","60b5a61a":"code","85769ca6":"code","c44d7a6f":"code","8895825e":"code","78125805":"code","164b933b":"code","e9d65b78":"code","64678c1c":"code","89d00a4d":"code","947ef124":"code","2d56c89f":"code","a974715d":"code","484fabb4":"code","12dd133f":"code","6201e692":"code","6bf7cf1f":"code","44b7ff8b":"code","ffaf6f50":"code","e5596995":"code","1cb269c5":"code","b5d2d51e":"code","e28074f1":"code","357165b3":"code","5c95150c":"code","c61ad17c":"code","579bb611":"code","67da4532":"code","c744a4b6":"code","ce8481e6":"markdown","d1c177d5":"markdown","f1728f85":"markdown","e051f891":"markdown","e08dcd67":"markdown","02457221":"markdown","5ca95b94":"markdown","cc215d76":"markdown","02053f60":"markdown","46f35c36":"markdown","248905be":"markdown","3099ea6b":"markdown","fe378c91":"markdown","ed6ec42b":"markdown","0ee33b41":"markdown","0c298511":"markdown","3225b837":"markdown","388812e0":"markdown","4ef73641":"markdown","7ce104f6":"markdown","75e65237":"markdown","86e08f79":"markdown","b7fc4c4b":"markdown","f4f5d92b":"markdown","34bc2d74":"markdown","9662947a":"markdown","9d3e2ebc":"markdown"},"source":{"e98433c8":"%matplotlib inline\nimport pandas as pd\nimport numpy as np \nimport os\n\nfrom scipy import stats\nfrom ast import literal_eval\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel, cosine_similarity\n\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.corpus import wordnet\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","98078a84":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('ggplot')","6e1ae569":"movies = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/movies_metadata.csv')","f6db75df":"pd.set_option('display.max_columns', None)\nmovies.head()","a2e49bfa":"movies['adult'].unique()","641fa11d":"def fix_adult(x):\n    if x != 'True' and x != 'False':\n        x = 'Else'\n    else:\n        pass\n    return x\nmovies['adult'] = movies['adult'].apply(fix_adult)\nmovies['adult'].unique()","2001a376":"movies['adult'].value_counts()","566e6299":"movies.info()","f655c022":"def fix_genres(x):\n    genres = []\n    for i in x:\n        genres.append(list(i.values())[1])\n\n    return genres\n\nmovies['genresx'] = movies['genres'].fillna('[]').apply(literal_eval).apply(lambda x: fix_genres(x))","8c64b7bd":"movies = movies.drop([19730, 29503, 35587])","489b3cbb":"def fix_language(x):\n    lang = []\n    for i in x:\n        lang.append(list(i.values())[1])\n    return lang\n\nmovies['spoken_languages'] = movies['spoken_languages'].fillna('[]').apply(literal_eval).apply(fix_language)\nmovies.head()","fa582d81":"links = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/links_small.csv')\nlinks = links[links['tmdbId'].notnull()]['tmdbId'].astype('int')\nlinks.head()","643b4107":"movies['tagline'].unique()","4a195953":"movies['tagline'] = movies['tagline'].fillna('')\nmovies['overview'] = movies['overview'].fillna('')","08ed7e1c":"movies['description'] = movies['overview'] + movies['tagline']\nmovies['description'] = movies['description'].fillna('')","f7ec9e48":"credits = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/credits.csv')\nkeywords = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/keywords.csv')","da378d2d":"credits.head()","60b5a61a":"credits.info()","85769ca6":"keywords.head()","c44d7a6f":"keywords.info()","8895825e":"print(movies['id'].dtype)\nmovies['id'] = movies['id'].astype(int)\nprint(movies['id'].dtype)","78125805":"movies = movies.merge(credits, on='id')\nmovies = movies.merge(keywords, on='id')","164b933b":"recom = movies[movies['id'].isin(links)]","e9d65b78":"recom['cast'] = recom['cast'].apply(literal_eval)\nrecom['crew'] = recom['crew'].apply(literal_eval)\nrecom['keywords'] = recom['keywords'].apply(literal_eval)","64678c1c":"# Uncomment this to see an example of a crew\n#recom['crew'][0]","89d00a4d":"def director(x):\n    for i in x:\n        if i['job'] == 'Director':\n            return i['name']\n    return np.nan","947ef124":"recom['director'] = recom['crew'].apply(director)","2d56c89f":"recom['cast']","a974715d":"recom['cast'] = recom['cast'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])\nrecom['cast'] = recom['cast'].apply(lambda x: x[:3] if len(x) >=3 else x)","484fabb4":"recom['keywords'] = recom['keywords'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])","12dd133f":"recom['cast'] = recom['cast'].apply(lambda x: [str.lower(i.replace(\" \", \"\")) for i in x])","6201e692":"recom['director'] = recom['director'].astype('str').apply(lambda x: str.lower(x.replace(\" \", \"\")))\nrecom['director'] = recom['director'].apply(lambda x: [x,x, x])","6bf7cf1f":"keyw = recom.apply(lambda x: pd.Series(x['keywords']),axis=1).stack().reset_index(level=1, drop=True)","44b7ff8b":"keyw = keyw.value_counts()\nkeyw = keyw[keyw > 2]\nkeyw","ffaf6f50":"stemmer = SnowballStemmer('english')\ndef fix_keywords(x):\n    keys = []\n    for i in x:\n        if i in keyw:\n            keys.append(i)\n    return keys\nrecom['keywords'] = recom['keywords'].apply(fix_keywords)\nrecom['keywords'] = recom['keywords'].apply(lambda x: [stemmer.stem(i) for i in x])\nrecom['keywords'] = recom['keywords'].apply(lambda x: [str.lower(i.replace(\" \", \"\")) for i in x])","e5596995":"recom['overall'] = recom['keywords'] + recom['cast'] + recom['director'] + recom['genresx']\nrecom['overall'] = recom['overall'].apply(lambda x: ' '.join(x))","1cb269c5":"count = CountVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')\ncount_matrix = count.fit_transform(recom['overall'])","b5d2d51e":"cosine_sim = cosine_similarity(count_matrix, count_matrix)","e28074f1":"def get_recommendations(title):\n    idx = indices[title]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:31]\n    movie_indices = [i[0] for i in sim_scores]\n    return titles.iloc[movie_indices]","357165b3":"recom = recom.reset_index()\ntitles = recom['title']\nindices = pd.Series(recom.index, index=recom['title'])","5c95150c":"recom['year'] = pd.to_datetime(recom['release_date'], errors='coerce').apply(lambda x: str(x).split('-')[0] if x != np.nan else np.nan)","c61ad17c":"recom['year'].unique()","579bb611":"vote_counts = recom[recom['vote_count'].notnull()]['vote_count'].astype('int')\nvote_averages = recom[recom['vote_average'].notnull()]['vote_average'].astype('int')\nC = vote_averages.mean()\nm = vote_counts.quantile(0.95)\ndef weighted_rating(x):\n    v = x['vote_count']\n    R = x['vote_average']\n    return (v\/(v+m) * R) + (m\/(m+v) * C)","67da4532":"def recommender_system(title):\n    idx = indices[title]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:26]\n    movie_indices = [i[0] for i in sim_scores]\n    \n    movies = recom.iloc[movie_indices][['title', 'vote_count', 'vote_average', 'year']]\n    vote_counts = movies[movies['vote_count'].notnull()]['vote_count'].astype('int')\n    vote_averages = movies[movies['vote_average'].notnull()]['vote_average'].astype('int')\n    C = vote_averages.mean()\n    m = vote_counts.quantile(0.60)\n    qualified = movies[(movies['vote_count'] >= m) & (movies['vote_count'].notnull()) & (movies['vote_average'].notnull())]\n    qualified['vote_count'] = qualified['vote_count'].astype('int')\n    qualified['vote_average'] = qualified['vote_average'].astype('int')\n    qualified['wr'] = qualified.apply(weighted_rating, axis=1)\n    qualified = qualified.sort_values('wr', ascending=False).head(10)\n    return qualified","c744a4b6":"recommender_system('The Dark Knight')","ce8481e6":"The id of a genre won't matter, so we will transform this column to contain only one list with the genres instead of a list of a dictionary.","d1c177d5":"As I mentioned in the introduction, I will be using crew, cast data and keywords, so let us merge these dataframes with the movies dataframe.","f1728f85":"` Note: I am using small dataset version because of the computing power, the same code could be applied to larger datasets `","e051f891":"From the first glence we can see that genres is a list containing a dictionary, so I would use literal_eval of ast to pre process this column.","e08dcd67":"Again, each movie has dozens of actors, not all of them are that important, so we will only pick top three actors in the cast list.","02457221":"# Movies -Metadata Based- Recommender System","5ca95b94":"Starting with import the first dataset, movies metadata:","cc215d76":"I will be using the Cosine Similarity to calculate a numeric quantity that denotes the similarity between two movies. Mathematically, it is defined as follows:\n\n<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\">\n  <mi>c<\/mi>\n  <mi>o<\/mi>\n  <mi>s<\/mi>\n  <mi>i<\/mi>\n  <mi>n<\/mi>\n  <mi>e<\/mi>\n  <mo stretchy=\"false\">(<\/mo>\n  <mi>x<\/mi>\n  <mo>,<\/mo>\n  <mi>y<\/mi>\n  <mo stretchy=\"false\">)<\/mo>\n  <mo>=<\/mo>\n  <mfrac>\n    <mrow>\n      <mi>x<\/mi>\n      <mo>.<\/mo>\n      <msup>\n        <mi>y<\/mi>\n        <mo>&#x22BA;<!-- \u22ba --><\/mo>\n      <\/msup>\n    <\/mrow>\n    <mrow>\n      <mrow class=\"MJX-TeXAtom-ORD\">\n        <mo stretchy=\"false\">|<\/mo>\n      <\/mrow>\n      <mrow class=\"MJX-TeXAtom-ORD\">\n        <mo stretchy=\"false\">|<\/mo>\n      <\/mrow>\n      <mi>x<\/mi>\n      <mrow class=\"MJX-TeXAtom-ORD\">\n        <mo stretchy=\"false\">|<\/mo>\n      <\/mrow>\n      <mrow class=\"MJX-TeXAtom-ORD\">\n        <mo stretchy=\"false\">|<\/mo>\n      <\/mrow>\n      <mo>.<\/mo>\n      <mrow class=\"MJX-TeXAtom-ORD\">\n        <mo stretchy=\"false\">|<\/mo>\n      <\/mrow>\n      <mrow class=\"MJX-TeXAtom-ORD\">\n        <mo stretchy=\"false\">|<\/mo>\n      <\/mrow>\n      <mi>y<\/mi>\n      <mrow class=\"MJX-TeXAtom-ORD\">\n        <mo stretchy=\"false\">|<\/mo>\n      <\/mrow>\n      <mrow class=\"MJX-TeXAtom-ORD\">\n        <mo stretchy=\"false\">|<\/mo>\n      <\/mrow>\n    <\/mrow>\n  <\/mfrac>\n<\/math>","02053f60":"We can see that a crew of a movie contains dozens of people and roles, starting from simple tasks to the most complicated ones.\nWe will only pick the director since other roles don't contribute that much to the feel of the movie.","46f35c36":"As we did with the genre column in movies dataframe, we would apply literal_eval on cast, crew and keywords columns.","248905be":"We will keep only movies that are in tmbd, and we will create a new dataframe so we would leave the original dataframe movies with no changes.","3099ea6b":"## Introduction\nIn this notebook I will be creating a recommender system based on metadata of movies. Besides movies data, we will use crew, cast data from credits dataset and keywords of each movie from the keywords dataset. Also, we will filter the results based on the ratings in the ratings dataset, so that only good movies will show up as recommended.\n### Plan:\n1- Data preprocessing and visualization: Exploring data and understanding what it can offer is important before starting any data science project. We will have to make some cleaning to the data in order to create the recommender function.\n<br\/>\n2- Creating the recommender system.","fe378c91":"Directors affect the quality of a movie more than any other role, so we will mention the director name three times in order to add to its weight.","ed6ec42b":"Moving on, we will import credits and keywords dataset.","0ee33b41":"Movie taglines are slogans or catchphrases for films. They can include a clever pun, a short phrase, or a sentence or two. Taglines can refer to the plot of the film or suggest the experience you'll have as a viewer. So we will concatenate this column with the overview column to get an overall description column.","0c298511":"Now we will create a general columnn that contains all the data we have gathered so far, such as keywords, cast, director and genres of a movie.","3225b837":"We would do the same thing with spoken languages column:","388812e0":"We will only keep movies with more than two keywords.","4ef73641":"Now we will be using ratings to filter the results, we don't want a bad movie to show to a user even if they like the genre and the director of that movie. I will use IMDB's weighted rating formula to weight the ratings. Mathematically, it is represented as follows:","7ce104f6":"Most of the movies are not adult movies. We will not take this columns into consideration because we could consider those adult cases are outliers.","75e65237":"* v is the number of votes for the movie <br\/>\n* m is the minimum votes required to be listed in the chart <br\/>\n* R is the average rating of the movie <br\/>\n* C is the mean vote across the whole report","86e08f79":"Create a count vectorizer:","b7fc4c4b":"There are multiple columns in this dataset that could be used to create a recommender system, in this notebook we will take into consideration the genre of the movie, the title, overview, tagline, vote_average and vote_count.","f4f5d92b":"### Omar El Yousfi\n### elyousfiomarr@gmail.com","34bc2d74":"## Data Visualization and Pre-processing","9662947a":"<a href=\"https:\/\/imgbb.com\/\"><img src=\"https:\/\/i.ibb.co\/1m8Yzbq\/eq.jpg\" alt=\"eq\" border=\"0\"><\/a>","9d3e2ebc":"## Recommendation:\nI would recommend to anyone who is learning how to create recommender systems to read this notebook: https:\/\/www.kaggle.com\/rounakbanik\/movie-recommender-systems\nIt is well explained and the writer used multiple examples, als they used collaborative filtering the enables the possibility to classifiy the suggestions based on the user's prefereneces."}}