{"cell_type":{"d4675d80":"code","3897b7b5":"code","b3c59c95":"code","ce0316ae":"code","476ab37e":"code","abb06bc9":"code","5f10f9b9":"code","c96e69fb":"code","3bdb90b3":"code","a850bdbc":"code","2ce44417":"code","75e8b855":"code","e923529b":"code","ba9a375f":"code","c8fb6189":"code","753f6473":"code","4b7455e0":"code","bec3615e":"code","0e719886":"markdown","7f35baa3":"markdown","129dbedd":"markdown","e35c53c4":"markdown","628ad9d9":"markdown","4cfb379b":"markdown","d83252e8":"markdown","444d0084":"markdown","b02e20ee":"markdown","5c295b02":"markdown","0b0e7e10":"markdown","8e68c104":"markdown"},"source":{"d4675d80":"import os\nfrom time import time\n\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neural_network import MLPRegressor\n\nfor dirname, _, filenames in os.walk('..\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3897b7b5":"import pandas as pd","b3c59c95":"articles = pd.read_csv('..\/input\/medium-articles\/articles.csv')","ce0316ae":"articles.head()","476ab37e":"articles.info()","abb06bc9":"# drop useless columns and rows\narticles = articles.drop('link', axis=1)\\\n                   .drop_duplicates()\\\n                   .reset_index(drop=True)\n\n# convert claps to floats\narticles['claps'] = articles['claps'].apply(lambda s: float(s) if s[-1] != 'K' else float(s[:-1])*1000)\n\n# add author library count\nauthor_count = pd.value_counts(articles['author'])\narticles['author_lib_count'] = articles['author'].apply(lambda a : author_count[a])\narticles.drop('author', axis=1, inplace=True)","5f10f9b9":"articles","c96e69fb":"sum(len(article.split(\" \")) for article in articles[\"text\"])","3bdb90b3":"pd.value_counts(articles['author_lib_count']).sort_index().plot.bar()","a850bdbc":"def vectorization(data, min_df, max_df):\n    vectorizer = TfidfVectorizer(analyzer='word', stop_words='english', min_df=min_df, max_df=max_df)\n    corpus = data\n    return vectorizer.fit_transform(corpus).toarray(), vectorizer.get_feature_names()","2ce44417":"X, feature_names = vectorization(articles['text'].values, 30, 200)\ny = articles['claps']","75e8b855":"Xdf = pd.DataFrame(X, columns=feature_names)\n\ndef normalized(col):\n    return col.apply(lambda e: e\/max(col))\n\nXdf['reading_time'] = normalized(articles['reading_time'])\nXdf['author_lib_count'] = normalized(articles['author_lib_count'])\nXdf","e923529b":"X_train, X_test, y_train, y_test = train_test_split(Xdf.values, y.values, test_size=0.3, random_state=145)\n#X_train, X_test, y_train, y_test = train_test_split(Xdf[['reading_time', 'author_lib_count']], y.values, test_size=0.33, random_state=42)","ba9a375f":"def compare(X_test, y_test, prediction):\n    '''Comparison visualization function'''\n    fig, ax = plt.subplots(figsize=(20, 10))\n    width = 0.3\n    x = np.arange(len(X_test))\n    ax.bar(x - width\/2, prediction(X_test), width, x, label='predicted')\n    ax.bar(x + width\/2, y_test, width, x, label='actual')\n    ax.legend()\n    fig.tight_layout()","c8fb6189":"reg = LinearRegression().fit(X_train, y_train)\nprint(f'Score: {reg.score(X_test, y_test)}')\ncompare(X_test, y_test, reg.predict)","753f6473":"start = time()\nmlp = MLPRegressor(hidden_layer_sizes=(1000), max_iter=400, learning_rate_init=0.01).fit(X_train, y_train)\nprint(f'done in {time() - start}s')\nprint(f'Score: {mlp.score(X_test, y_test)}')\ncompare(X_test, y_test, mlp.predict)","4b7455e0":"def rank(data, query, vectorization):\n    pass\n    # TODO","bec3615e":"rank(articles, 'Artificial Intelligence', vectorization(articles['text'].values, 15, 150))","0e719886":"# Claps predictor","7f35baa3":"## Total number of words","129dbedd":"## Linear Regression","e35c53c4":"## MLP","628ad9d9":"## Tag search","4cfb379b":"# Text conversion","d83252e8":"\\**Sad beginner sounds*\\*","444d0084":"# TFIDF","b02e20ee":"## Authors' articles count","5c295b02":"# Analysis","0b0e7e10":"# Pre-processing","8e68c104":"# Article search"}}