{"cell_type":{"51a2089a":"code","2a72334d":"code","05feb494":"code","e77fa84c":"code","eb2c54e9":"code","74ada108":"code","a7224488":"code","b208e7bb":"code","2572c90d":"code","d02e1632":"code","3eceaa52":"code","4359e8db":"code","81a35e8e":"code","7f05f087":"code","dd377e05":"code","86289ade":"code","6d7214ed":"code","68afce4c":"code","e951244c":"code","4680fd37":"code","191b0809":"code","8588672c":"code","16777c03":"code","e65c7827":"code","6d0fa0fe":"code","59e163a1":"markdown","12f6bfe3":"markdown","d155185c":"markdown","6e21b4bc":"markdown","1b4ec3e7":"markdown","3a8a61dd":"markdown","d8b550d5":"markdown","e214aefa":"markdown","b43751d5":"markdown","f96fe8be":"markdown","bd6e3470":"markdown"},"source":{"51a2089a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a72334d":"import pandas as pd","05feb494":"import numpy as np","e77fa84c":"import matplotlib.pyplot as plt","eb2c54e9":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","74ada108":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}","a7224488":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","b208e7bb":"football","2572c90d":"edu = pd.read_csv('\/kaggle\/input\/cours2\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","d02e1632":"edu.head()","3eceaa52":"edu.head(9)","4359e8db":"edu.tail(9)","81a35e8e":"edu.describe()","7f05f087":"edu.iloc[90:94][['TIME','GEO']]","dd377e05":"edu.max(axis=0)","86289ade":"edu[edu['Value'] > 6.5].tail()","6d7214ed":"edu[edu[\"Value\"].isnull()].head()","68afce4c":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","e951244c":"s = edu[\"Value\"]\/100\ns.head()","4680fd37":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","191b0809":"edu","8588672c":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","16777c03":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","e65c7827":"pivedu\n","6d0fa0fe":"pivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","59e163a1":"It shows the rows with the column types selected. The first index represent the selected lines  and the second one the selected column.","12f6bfe3":"It shows the average, the first quartile, the last quartile, the minimum, the maximum etc...","d155185c":"This operation gives the last rows of the table","6e21b4bc":"**What happens if we give a number as argument to the method head()?**","1b4ec3e7":"**Which measures does the result show? It seems that it shows some default values, can you guess which ones?**","3a8a61dd":"The number used as argument will give the number of lines displayed.","d8b550d5":"**What does the method tail()return?**","e214aefa":"This operation shows all lines where the value of the line is >6.5.","b43751d5":"Here this operation gives us the lines that have no associated values.","f96fe8be":"**-What does this index return? What does the first index represent? And the second one?**","bd6e3470":"**What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?**"}}