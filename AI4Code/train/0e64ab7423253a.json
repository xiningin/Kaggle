{"cell_type":{"b82545ff":"code","9f014839":"code","cd62d1e3":"code","2af4a3b7":"code","ba0ff216":"code","1dc354dc":"code","aaf977d4":"code","021be589":"code","612f9d14":"code","a1db2efb":"code","7db648eb":"code","7722d673":"code","dd548ac7":"code","43844b35":"code","6e84dc65":"code","fa379481":"markdown","cf90f42a":"markdown","450947d4":"markdown","b38c6c54":"markdown","d4e61a67":"markdown"},"source":{"b82545ff":"x = 4              # integer\nprint(x, type(x))\n\ny = True           # boolean (True, False)\nprint(y, type(y))\n\nz = 3.7            # floating point\nprint(z, type(z))\n\ns = \"This is a string\"    # string\nprint(s, type(s))","9f014839":"x = 4            # integer\nx1 = x + 4       # addition \nx2 = x * 3       # multiplication\nx += 2           # equivalent to x = x + 2\nx3 = x       \nx *= 3           # equivalent to x = x * 3\nx4 = x      \nx5 = x % 4       # modulo (remainder) operator\n\nz = 3.7          # floating point number\nz1 = z - 2       # subtraction\nz2 = z \/ 3       # division\nz3 = z \/\/ 3      # integer division\nz4 = z ** 2      # square of z \nz5 = z4 ** 0.5   # square root\nz6 = pow(z,2)    # equivalent to square of z\nz7 = round(z)    # rounding z to its nearest integer \nz8 = int(z)      # type casting float to int\n\nprint(x,x1,x2,x3,x4,x5)\nprint(z,z1,z2,z3,z4)\nprint(z5,z6,z7,z8)","cd62d1e3":"import math\n\nx = 4\nprint(math.sqrt(x))      # sqrt(4) = 2\nprint(math.pow(x,2))     # 4**2 = 16\nprint(math.exp(x))       # exp(4) = 54.6\nprint(math.log(x,2))     # log based 2  (default is natural logarithm)\nprint(math.fabs(-4))     # absolute value\nprint(math.factorial(x)) # 4! = 4 x 3 x 2 x 1 = 24\n\nz = 0.2\nprint(math.ceil(z))      # ceiling function\nprint(math.floor(z))     # floor function\nprint(math.trunc(z))     # truncate function\n\nz = 3*math.pi            # math.pi = 3.141592653589793 \nprint(math.sin(z))       # sine function\nprint(math.tanh(z))      # arctan function\n\nx = math.nan             # not a number\nprint(math.isnan(x))\n\nx = math.inf             # infinity\nprint(math.isinf(x))","2af4a3b7":"y1 = True\ny2 = False\n\nprint(y1 and y2)       # logical AND\nprint(y1 or y2)        # logical OR\nprint(y1 and not y2)   # logical NOT","ba0ff216":"s1 = \"This\"\n\nprint(s1[1:])                    # print last three characters \nprint(len(s1))                               # get the string length\nprint(\"Length of string is \" + str(len(s1))) # type casting int to str\nprint(s1.upper())                            # convert to upper case\nprint(s1.lower())                            # convert to lower case\n\ns2 = \"This is a string\"\nwords = s2.split(' ')             # split the string into words\nprint(words[0])\nprint(s2.replace('a','another'))  # replace \"a\" with \"another\"\nprint(s2.replace('is','at'))      # replace \"is\" with \"at\"\nprint(s2.find(\"a\"))               # find the position of \"a\" in s2\nprint(s1 in s2)                   # check if s1 is a substring of s2\n\nprint(s1 == 'This')               # equality comparison\nprint(s1 < 'That')                # inequality comparison\nprint(s2 + \" too\")                # string concatenation\nprint((s1 + \" \")* 3)              # replicate the string 3 times","1dc354dc":"intlist = [1, 3, 5, 7, 9]\nprint(type(intlist))\nprint(intlist)\nintlist2 = list(range(0,10,2))   # range[startvalue, endvalue, stepsize]\nprint(intlist2)\n\nprint(intlist[2])                # get the third element of the list\nprint(intlist[:2])               # get the first two elements\nprint(intlist[2:])               # get the last three elements of the list\nprint(len(intlist))              # get the number of elements in the list\nprint(sum(intlist))              # sums up elements of the list\n\nintlist.append(11)               # insert 11 to end of the list\nprint(intlist)\nprint(intlist.pop())             # remove last element of the list\nprint(intlist)\nprint(intlist + [11,13,15])      # concatenate two lists\nprint(intlist * 3)               # replicate the list\nintlist.insert(2,4)              # insert item 4 at index 2  \nprint(intlist)\nintlist.sort(reverse=True)       # sort elements in descending order\nprint(intlist)","aaf977d4":"mylist = ['this', 'is', 'a', 'list']\nprint(mylist)\nprint(type(mylist))\n\nprint(\"list\" in mylist)          # check whether \"list\" is in mylist\nprint(mylist[2])                 # show the 3rd element of the list\nprint(mylist[:2])                # show the first two elements of the list\nprint(mylist[2:])                # show the last two elements of the list\nmylist.append(\"too\")             # insert element to end of the list\n\nseparator = \" \"\nprint(separator.join(mylist))    # merge all elements of the list into a string\n\nmylist.remove(\"is\")              # remove element from list\nprint(mylist)","021be589":"abbrev = {}\nabbrev['MI'] = \"Michigan\"\nabbrev['MN'] = \"Minnesota\"\nabbrev['TX'] = \"Texas\"\nabbrev['CA'] = \"California\"\n\nprint(abbrev)\nprint(abbrev.keys())            # get the keys of the dictionary\nprint(abbrev.values())          # get the values of the dictionary\nprint(len(abbrev))              # get number of key-value pairs\n\nprint(abbrev.get('MI'))\nprint(\"FL\" in abbrev)\nprint(\"CA\" in abbrev)\n\nkeys = ['apples', 'oranges', 'bananas', 'cherries']\nvalues = [3, 4, 2, 10]\nfruits = dict(zip(keys, values))\nprint(fruits)\nprint(sorted(fruits))     # sort keys of dictionary\n\nfrom operator import itemgetter\nprint(sorted(fruits.items(), key=itemgetter(0)))    # sort by key of dictionary\nprint(sorted(fruits.items(), key=itemgetter(1)))    # sort by value of dictionary","612f9d14":"MItuple = ('MI', 'Michigan', 'Lansing')\nCAtuple = ('CA', 'California', 'Sacramento')\nTXtuple = ('TX', 'Texas', 'Austin')\n\nprint(MItuple)\nprint(MItuple[1:])\n\nstates = [MItuple, CAtuple, TXtuple]    # this will create a list of tuples\nprint(states)\nprint(states[2])\nprint(states[2][:])\nprint(states[2][1:])\n\nstates.sort(key=lambda state: state[2])  # sort the states by their capital cities\nprint(states)","a1db2efb":"# using if-else statement\n\nx = 10\n\nif x % 2 == 0:\n    print(\"x =\", x, \"is even\")\nelse:\n    print(\"x =\", x, \"is odd\")\n\nif x > 0:\n    print(\"x =\", x, \"is positive\")\nelif x < 0:\n    print(\"x =\", x, \"is negative\")\nelse:\n    print(\"x =\", x, \"is neither positive nor negative\")","7db648eb":"# using for loop with a list\n\nmylist = ['this', 'is', 'a', 'list']\nfor word in mylist:\n    print(word.replace(\"is\", \"at\"))\n    \nmylist2 = [len(word) for word in mylist]   # number of characters in each word\nprint(mylist2)\n\n# using for loop with list of tuples\n\nstates = [('MI', 'Michigan', 'Lansing'),('CA', 'California', 'Sacramento'),\n          ('TX', 'Texas', 'Austin')]\n\nsorted_capitals = [state[2] for state in states]\nsorted_capitals.sort()\nprint(sorted_capitals)\n\n# using for loop with dictionary\n\nfruits = {'apples': 3, 'oranges': 4, 'bananas': 2, 'cherries': 10}\nfruitnames = [k for (k,v) in fruits.items()]\nprint(fruitnames)","7722d673":"# using while loop\n\nmylist = list(range(-10,10))\nprint(mylist)\n\ni = 0\nwhile (mylist[i] < 0):\n    i = i + 1\n    \nprint(\"First non-negative number:\", mylist[i])","dd548ac7":"myfunc = lambda x: 3*x**2 - 2*x + 3      # example of an unnamed quadratic function\n\nprint(myfunc(2))","43844b35":"import math\n\n# The following function will discard missing values from a list\ndef discard(inlist, sortFlag=False):    # default value for sortFlag is False \n    outlist = []\n    for item in inlist:\n        if not math.isnan(item):\n            outlist.append(item)\n            \n    if sortFlag:\n        outlist.sort()\n    return outlist\n\nmylist = [12, math.nan, 23, -11, 45, math.nan, 71]\n\nprint(discard(mylist,True))  ","6e84dc65":"states = [('MI', 'Michigan', 'Lansing'),('CA', 'California', 'Sacramento'),\n          ('TX', 'Texas', 'Austin'), ('MN', 'Minnesota', 'St Paul')]\n\nwith open('states.txt', 'w') as f:\n    f.write('\\n'.join('%s,%s,%s' % state for state in states))\n    \nwith open('states.txt', 'r') as f:\n    for line in f:\n        fields = line.split(sep=',')    # split each line into its respective fields\n        print('State=',fields[1],'(',fields[0],')','Capital:', fields[2])","fa379481":"# File I\/O","cf90f42a":"# Elementary Data Types","450947d4":"# Compound Data Types","b38c6c54":"# Control Flow Statements","d4e61a67":"# User-Defined Functions"}}