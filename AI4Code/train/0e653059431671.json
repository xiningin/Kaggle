{"cell_type":{"162e150b":"code","1bc34faf":"code","3abe562d":"code","43328a3a":"code","c6f50d94":"code","a78177d6":"code","755a1703":"code","c0394600":"markdown","4e7bb57c":"markdown","1c0daea0":"markdown"},"source":{"162e150b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1bc34faf":"# \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c PLINK\n!wget http:\/\/s3.amazonaws.com\/plink1-assets\/dev\/plink_linux_x86_64.zip\n!unzip plink_linux_x86_64.zip","3abe562d":"!mkdir -p khazar","43328a3a":"!.\/plink --bfile ..\/input\/genome-data-of-a-khazar-origin\/full_data_panel_for_khazar_paper\/khazar3_1-22_maf0.01mind0.035geno0.005\\\n--keep-allele-order --recode vcf-iid bgz\\\n--out khazar\/khazar","c6f50d94":"from Bio import Entrez\nfrom gzip import GzipFile\nimport pandas as pd\nimport random\nfrom collections import defaultdict","a78177d6":"def get_rs(filename, ncbi_email, nsymb = -1, quick = True, num_snp = 10):\n    if quick:\n        nsymb  = 1000000\n    gzfile = GzipFile(filename, 'rb').read(nsymb)\n    start = gzfile.decode('utf-8').find('#CHROM')\n    chr = [str(x) for x in range(1, 23)]\n    df = pd.DataFrame(row.split('\\t') for row in gzfile.decode('utf-8')[start:].split('\\n')).iloc[:-1,:3]\n    df.columns = list(df.iloc[0,:])\n    df2dict = df.loc[df['#CHROM'].isin(chr)].to_dict('index')\n    def get_snp(q):\n        \"\"\" \n        <CHRPOS>13:42994949<\/CHRPOS><CHRPOS_PREV_ASSM>13:43569085<\/CHRPOS_PREV_ASSM>\n        Takes as input an array of snp identifiers and returns \n        a parsed dictionary of their data from Entrez.\n        \"\"\"\n\n        response = Entrez.efetch(db='SNP', id=','.join(q), rettype='flt', retmode='flt').read()\n        r = defaultdict(lambda: defaultdict(lambda: {})) # Return dictionary variable\n        \n        # Parse flat file response\n        for cnt, snp_info in enumerate(filter(None,response.split('\\n'))):\n            snp_name = q[cnt]\n            if ('<CHRPOS>' in snp_info) & ('<\/CHRPOS>' in snp_info):\n                r[snp_name]['CHRPOS38'] = snp_info.split('<CHRPOS>')[1].split('<\/CHRPOS>')[0]\n            else:\n                r[snp_name]['CHRPOS38'] = None\n            if ('<CHRPOS_PREV_ASSM>' in snp_info) & ('<\/CHRPOS_PREV_ASSM>' in snp_info):            \n                r[snp_name]['CHRPOS37'] = snp_info.split('<CHRPOS_PREV_ASSM>')[1].split('<\/CHRPOS_PREV_ASSM>')[0]\n            else:\n                r[snp_name]['CHRPOS37'] = None\n\n        return r   \n    Entrez.email = ncbi_email\n    if len(df2dict) > num_snp:\n        check_dict ={df2dict[s]['ID']:(df2dict[s]['#CHROM'], df2dict[s]['POS']) \n                    for s in random.sample(range(1, len(df2dict)), num_snp)}\n    else:\n        check_dict ={df2dict[s]['ID']:(df2dict[s]['#CHROM'], df2dict[s]['POS']) \n                    for s in range(1, len(df2dict))}\n    \n    ncbi = get_snp(list(check_dict.keys()))\n    check_set = {check_dict[hg][0] + ':'+check_dict[hg][1] for hg in check_dict}\n    check4hg37_set = {ncbi[hg]['CHRPOS37'] for hg in ncbi}\n    check4hg38_set = {ncbi[hg]['CHRPOS38'] for hg in ncbi}\n    print(f'from {num_snp} snp {len(check_set & check4hg37_set)} are hg37 = {100*len(check_set & check4hg37_set)\/num_snp} %')\n    print(f'from {num_snp} snp {len(check_set & check4hg38_set)} are hg38 = {100*len(check_set & check4hg38_set)\/num_snp} %')\n\n    return ncbi","755a1703":"filename = 'khazar\/khazar.vcf.gz'\nncbi_email = '...@gmail.com'\n_ = get_rs(filename, ncbi_email, num_snp = 100)","c0394600":"!pip install biopython #if needed","4e7bb57c":"Register on NCBI to send requests. [REGISTER](https:\/\/www.ncbi.nlm.nih.gov\/account\/register\/)","1c0daea0":"<img src=\"https:\/\/i.gifer.com\/embedded\/download\/7aNx.gif\" width=\"640\" height=\"280\">"}}