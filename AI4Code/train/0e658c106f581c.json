{"cell_type":{"637db602":"code","c94f268c":"code","00565a6c":"code","4ca22c2a":"code","b3faac5b":"code","0587be16":"code","332e86ea":"code","f1e09bc6":"code","f3cdec5e":"code","68159627":"code","5087fd77":"code","ee4263e8":"code","98d98d3d":"code","c3f6665a":"markdown","a3a85476":"markdown"},"source":{"637db602":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport missingno as msno\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c94f268c":"df_train=pd.read_csv('..\/input\/dont-overfit-ii\/train.csv')\ndf_test=pd.read_csv('..\/input\/dont-overfit-ii\/test.csv')\n\nlabels=df_train.columns.drop(['id','target'])\ntarget=df_train['target']\nide=df_test['id']\ndf_test=df_test.drop('id',axis=1)","00565a6c":"df_train.info()","4ca22c2a":"df_train.head()","b3faac5b":"msno.matrix(df_train,figsize=(20,7))","0587be16":"\nx_train, x_test, y_train, y_test = train_test_split(df_train[labels] , target,  train_size=0.8, test_size=0.2, random_state =0)","332e86ea":"# First I will try to use Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression()\nmodel.fit(x_train, y_train)\npreds=model.predict(x_test)\n","f1e09bc6":"from sklearn.metrics import roc_auc_score\nprint('auc_train:', roc_auc_score(y_train,model.predict(x_train)))\nprint('auc_test:' , roc_auc_score(y_test, preds))","f3cdec5e":"from xgboost import XGBClassifier\n\nm = XGBClassifier(max_depth=2,gamma=11,eta=0.8,reg_alpha=0.7,reg_lambda=0.9,eval_metric=None)\nm.fit(x_train, y_train)\npred=m.predict(x_test)","68159627":"print('auc_train:', roc_auc_score(y_train,m.predict(x_train)))\nprint('auc_test:' , roc_auc_score(y_test, pred))","5087fd77":"print(df_test.shape)\nou=m.predict(df_test)","ee4263e8":"output=pd.DataFrame({'id':ide,\n                    'target':ou})","98d98d3d":"output.to_csv('submission.csv', index=False)","c3f6665a":"**So I will be using a more complex model and try to make a good tuning for it**","a3a85476":"**As our training data is considerd small data and will tend to over fit simple models should be used or complex models with a good tuning the hyper parameters like L1 and L2 for regulaization and any parameter will lead to genralize our model, So I will try to Firstly see if there is any missing values first then will try simple models**"}}