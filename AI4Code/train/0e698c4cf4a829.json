{"cell_type":{"192f8a46":"code","8a1c38d0":"code","971a9d3d":"code","f22f39bf":"code","91d2ed6c":"code","6b89bd08":"code","ff3fc87a":"code","c967565a":"code","cfeee7b6":"code","69c216d0":"code","49ae7acf":"code","2ddcea22":"code","2d38e596":"code","feb37147":"code","dab40880":"code","94ead191":"code","751afb44":"code","70304401":"code","75bd1562":"code","aeeb6605":"code","a4cf3143":"code","940d6db9":"code","919dcdfc":"code","59c08b4a":"code","710d4a3d":"code","fc9e158e":"code","b8173fb9":"code","cce4e0f7":"code","92d54c1a":"code","a1d5d592":"code","221f1f74":"code","cf0d3348":"code","83b78ef7":"code","404a80aa":"code","5587a4d6":"code","7398d6ab":"code","4654052f":"code","a2b1b7e2":"code","c33e4365":"code","b90f07c4":"code","b98ba61f":"code","af20ed3e":"code","a8a306de":"code","fdb705bf":"code","b6aeddae":"code","48d3ae3a":"code","4ef07d27":"code","a48da4ee":"code","358f77dc":"code","8665d965":"code","0d6e252e":"code","4fb7a3c9":"code","16902b1a":"code","f4f7e0a7":"code","d1d649d1":"code","22296bf7":"code","ee7ecf77":"code","f1f78aba":"code","09e72f17":"code","25d377c3":"code","8ca9fe09":"code","e1b05789":"code","e972d1c4":"code","617951d1":"code","29745dd1":"code","7e0a493d":"code","b8bb77db":"code","3abe833a":"code","19e96871":"code","edba1d96":"code","1c920ec5":"code","210e2448":"code","0eae8be0":"code","b8a178bf":"code","12f1a975":"code","d92ea734":"code","18acac63":"code","fde5e7a0":"code","0fcb8be4":"code","9313db84":"code","94736648":"code","a8b1963d":"code","7a764499":"code","d49c8789":"code","126efb30":"code","c78072d3":"code","491b6d7c":"code","b61f5438":"code","8583570a":"code","0b330fe5":"code","37f546cf":"code","b76d6657":"code","2b034815":"code","91f263d5":"code","9b6ff82a":"code","4de5ebe9":"code","b55018ff":"code","1f9d8d55":"code","63347cd5":"code","bd89bb63":"code","3102e8f3":"code","f683cad3":"code","0ffdb8de":"code","31d5bd77":"code","7bc4af10":"code","3377f7f1":"markdown","87fe33a6":"markdown","165eca2c":"markdown","2de5ee87":"markdown","14be633b":"markdown","ed90b6b7":"markdown","78d86db2":"markdown","db8072a2":"markdown","f6e5af44":"markdown","2d504078":"markdown","685b2b69":"markdown","cf9bcb31":"markdown","5b2692fe":"markdown","b7be7037":"markdown"},"source":{"192f8a46":"import os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom hashlib import md5\nfrom IPython.display import Image\nfrom matplotlib import pyplot as plt\n","8a1c38d0":"%matplotlib inline \npd.options.mode.chained_assignment = None  # default='warn'","971a9d3d":"import os\nprint(os.listdir(\"..\/input\"))\nprint(os.listdir(\"..\/input\/superheroes-comics-and-characters\/\"))\nprint(os.listdir(\"..\/input\/superheroes-stats-n-info\/\"))","f22f39bf":"characters_stats = pd.read_csv(\"..\/input\/superheroes-stats-n-info\/superheroes_stats.csv\")\ncharacters_stats.sample(1)","91d2ed6c":"superheroes_power_matrix = pd.read_csv(\"..\/input\/superheroes-stats-n-info\/superheroes_power_matrix.csv\",index_col=\"Name\")\nsuperheroes_power_matrix.sample(1)","6b89bd08":"characters_info = pd.read_csv(\"..\/input\/superheroes-stats-n-info\/superheroes_info.csv\",index_col=0,parse_dates=[\"FirstAppearance\",\"Year\"])\ncharacters_info.sample(1)\n","ff3fc87a":"marvel_comics = pd.read_csv(\"..\/input\/superheroes-comics-and-characters\/comics.csv\")\nmarvel_characters = pd.read_csv(\"..\/input\/superheroes-comics-and-characters\/characters.csv\")\nmarvel_characters_to_comics = pd.read_csv(\"..\/input\/superheroes-comics-and-characters\/charactersToComics.csv\")\ncomics_and_characters = marvel_comics.merge(marvel_characters_to_comics).merge(marvel_characters)\n\ncomics_and_characters.sample(1)","c967565a":"# marvel_characters_to_comics.groupby(\"comicID\").count()","cfeee7b6":"# e-01\n# question: Good versus Evil - Which group has more combined power?\n# difficulty: easy\n# datasets: characters_stats.csv\n","69c216d0":"# danniel\n# characters_stats.groupby(characters_stats[\"Alignment\"]).sum()\ntotal_powers_by_aligment = characters_stats[[\"Alignment\",\"Total\"]].groupby(characters_stats[\"Alignment\"]).sum()\ntotal_powers_by_aligment = total_powers_by_aligment.sort_values(by=\"Total\",ascending=False)\ntotal_powers_by_aligment.plot(kind='bar')","49ae7acf":"# nimrod\nalignment_based_power = characters_stats.groupby('Alignment')['Total'].sum()\nalignment_based_power.plot(kind='bar')","2ddcea22":"# e-02\n# question:   Which alignment (good\\bad) has higher avg speed?\n# difficulty: easy\n# datasets: characters_stats\n\n","2d38e596":"# danniel\n\n# remove nneutral \ngood_n_bad_characters_stats = characters_stats[characters_stats['Alignment'].isin([\"good\",\"bad\"])]\ngood_n_bad_characters_stats\navg_speed_by_aligment = good_n_bad_characters_stats[[\"Alignment\",\"Speed\"]].groupby(characters_stats[\"Alignment\"]).mean()\navg_speed_by_aligment = avg_speed_by_aligment.sort_values(by=\"Speed\",ascending=False)\navg_speed_by_aligment\navg_speed_by_aligment.plot.bar()","feb37147":"# nimrod\nalignment_based_avg_speed = characters_stats.groupby('Alignment')['Speed'].mean()\nalignment_based_avg_speed.plot(kind='bar')\n# datasets: characters_stats","dab40880":"# e-03\n# question: How many superheros have more Intelligence then strength?\n# difficulty: easy\n# datasets: characters_stats","94ead191":"# nimrod\nlen(characters_stats[characters_stats['Intelligence'] > characters_stats['Strength']])","751afb44":"# e-04\n# question: Show the distribution of Total (all the powers combined) for the good and the evil.\n# difficulty: easy\n# datasets: charcters_stats","70304401":"# nimrod\nstats_with_data = characters_stats.dropna()\n\nmean_total = stats_with_data['Total'].mean()\nmax_total = stats_with_data['Total'].max()\nbins=range(0,int(max_total + mean_total),20)\n\nplt.hist(stats_with_data[\"Total\"],bins,histtype=\"bar\",rwidth=1.2,color='#0ff0ff')\nplt.xlabel('Total') #set the xlabel name\nplt.ylabel('Count') #set the ylabel name\nplt.plot()\nplt.axvline(mean_total,linestyle='dashed',color='red')\nplt.show()","75bd1562":"# Omer\nplt.subplots(figsize = (20,10))\nplt.title('Attack by Type1')\nsns.violinplot(x = \"Alignment\", y = \"Total\",data = characters_stats)\nplt.show()","aeeb6605":"# e-05\n# question: How many comics with 7 or more character published each year?\n# difficulty: easy\n# datasets: comics_and_characters","a4cf3143":"# Omer \n# Answer 1\ngrouped_up_comics = comics_and_characters.groupby('comicID').count()\ngrouped_up_comics.loc[grouped_up_comics['characterID']>=7].count()","940d6db9":"# Omer\n# Answer 2\ncomics_series = comics_and_characters['comicID'].value_counts()#.groupby('comicID').count()\nlen(comics_series[comics_series >= 7])","919dcdfc":"# e-06\n\n# question: How has more characters DC or Marvel?\n# difficulty: easy\n# datasets: comics,characters,comics_to_characters","59c08b4a":"# Nimrod\nmarvel_and_dc_characters_only = characters_info[characters_info.Publisher.isin([\"Marvel\",\"DC\"])]\n# marvel_and_dc_characters_only.sample(5)\nuniverse_based_count = marvel_and_dc_characters_only.groupby('Publisher')['Publisher'].count()\nuniverse_based_count.plot(kind='bar')","710d4a3d":"# e-07\n# question: Who has higher representation of female heros DC or Marvel?\n# difficulty: easy\n# datasets: characters_info","fc9e158e":"# TODO: update question","b8173fb9":"# Nimrod\nmarvel_and_dc_characters_only = characters_info[characters_info.Publisher.isin([\"Marvel\",\"DC\"])]\nuniverse_based_woman_percentage = 100 * marvel_and_dc_characters_only[marvel_and_dc_characters_only['Gender'] == 'Female'].groupby('Publisher')['Publisher'].count() \/ marvel_and_dc_characters_only.groupby('Publisher')['Publisher'].count()\nuniverse_based_woman_percentage.plot(kind='barh')","cce4e0f7":"#hen\nmarvel_and_dc_characters_only = characters_info[characters_info.Publisher.isin([\"Marvel\",\"DC\"])]\nmarvel_vs_dc_woman=marvel_and_dc_characters_only[marvel_and_dc_characters_only['Gender']=='Female'].groupby('Publisher')['Publisher'].count()\nif (marvel_vs_dc_woman.DC > marvel_vs_dc_woman.Marvel):\n    print (\"DC\") \nelif (marvel_vs_dc_woman.DC < marvel_vs_dc_woman.Marvel):\n    print (\"MARVEL\")\nelse:\n    print (\"EQUAL\")\n    \nmarvel_vs_dc_woman.plot(kind='bar')","92d54c1a":"# e-08\n# question: Who has higher representation of black skined heros DC or Marvel?\n# difficulty: easy\n# datasets: characters_info\n","a1d5d592":"param_to_compare = \"EyeColor\"\nparam_to_compare = \"HairColor\"\ncharacters_with_info = characters_info[~characters_info[param_to_compare].isna()]\n# len(characters_with_info)\ncharacters_with_info[param_to_compare].value_counts().sort_values(ascending=False).head(5)\n","221f1f74":"# Nimrod\nuniverse_based_black_percentage = 100 * characters_info[characters_info['SkinColor'].isin(['Black'])].groupby('Publisher')['Publisher'].count() \/ characters_info.groupby('Publisher')['Publisher'].count()\nuniverse_based_black_percentage.plot(kind='barh')\n\n### Not enough information to answer this question, not a very good graph :) ###","cf0d3348":"# e-09\n### dup ###\n# question: Show how common is each trait in 'superheroes_power_matrix.csv'.\n# difficulty: easy\n# datasets: superheroes_power_matrix","83b78ef7":"# e-10\n# question: Show the hight distrebution for the characters of 'Marvel Comics' (from 'characters_info.csv').\n# difficulty: easy\n# datasets: characters_info","404a80aa":"# Nimrod\ncharacter_with_data = characters_info.dropna()\nmean_total = character_with_data['Height'].mean()\nmax_total = character_with_data['Height'].max()\nbins=range(0,int(max_total + mean_total),20)\n\nplt.hist(character_with_data[\"Height\"],bins,histtype=\"bar\",rwidth=1.2,color='#0ff0ff')\nplt.xlabel('Total') #set the xlabel name\nplt.ylabel('Count') #set the ylabel name\nplt.plot()\nplt.axvline(mean_total,linestyle='dashed',color='red')\nplt.show()","5587a4d6":"# e-11\n# question: Show the distrebution of apperences.\n# difficulty: easy\n# datasets: characters_info.csv","7398d6ab":"# Nimrod\ntotal_aperences = marvel_characters_to_comics['characterID'].value_counts()\nmean_total = total_aperences.mean()\nmax_total = total_aperences.max()\nbins=range(0,int(max_total + mean_total),20)\nplt.hist(total_aperences,bins,histtype=\"bar\",rwidth=1.2,color='#0ff0ff')\nplt.xlabel('Apperences') #set the xlabel name\nplt.ylabel('Count') #set the ylabel name\nplt.plot()\nplt.axvline(mean_total,linestyle='dashed',color='red')\nplt.show()","4654052f":"# e-12\n# question: Show the distrebution of eye colors.\n# difficulty: easy\n# datasets: characters_info.csv","a2b1b7e2":"eye_color=characters_info.groupby('EyeColor')['EyeColor'].count()\neye_color.plot(kind='bar')","c33e4365":"# Nimrod\ncharacters_info['EyeColor'].value_counts().plot.barh()","b90f07c4":"# Nimrod\ncharacters_info['EyeColor'].value_counts().head(10).plot.pie()","b98ba61f":"# e-13\n# question: How many characters apperred only once?\n# difficulty: easy\n# datasets: characters_info.csv","af20ed3e":"comic_aperences = comics_and_characters['characterID'].value_counts()\nlen(comic_aperences[comic_aperences == 1])","a8a306de":"# e-14\n# question: How many characters died in thair first apperance (have one apperance and are deceased)?\n# difficulty: easy\n# datasets: characters_info.csv","fdb705bf":"#hen\ndied_in_first_apperance=characters_info[(characters_info['Appearances']==1) & (characters_info['Status']=='Deceased')] \nprint (len(died_in_first_apperance))","b6aeddae":"# nimrod\nlen(characters_info[(characters_info['Appearances'] == 1.0) & (characters_info['Status'] == 'Deceased')])","48d3ae3a":"# e-15\n# question:   Display a pie chart of the 10 most common hair styles\n# difficulty: easy\n# datasets: characters_info","4ef07d27":"# Eitan\nmarvel_chars_df = characters_info.replace(\"No Hair\", \"Bald\") #this transformation needs to be added to the data\nmarvel_chars_df = characters_info.replace(\"-\", \"Unknown\") #this transformation needs to be added to the data\nmost_common_hair_styles = pd.value_counts(marvel_chars_df[\"HairColor\"]).head(10)\nmost_common_hair_styles.plot.pie()","a48da4ee":"# e-16\n# question: Display the average height\n# difficulty: easy\n# datasets: characters_info","358f77dc":"# ?\nmarvel_chars_df\npd.DataFrame.mean(marvel_chars_df[\"Height\"])","8665d965":"# e-17\n### dup ###\n# find the comic with most characters. display the comics name and the name of the characters\n# difficulty: easy","0d6e252e":"# Nimrod\n#find the comic with the most participants\nbest_comic = comics_and_characters[\"title\"].value_counts().idxmax()\nprint(best_comic)\ncomics_and_characters[comics_and_characters['title'] == best_comic]['name'].head()","4fb7a3c9":"# e-18\n# the oldest character of both universes\n# difficulty: easy\npd.DataFrame.min(characters_info[\"Year\"])","16902b1a":"# Nimrod\ndc = characters_info[characters_info['Publisher'] == 'DC']\nmarvel = characters_info[characters_info['Publisher'] == 'Marvel']\nmarvel.sample()\nprint(dc[['Name','Year']].loc[dc['Year'].idxmin()])\nprint(marvel[['Name','Year']].loc[marvel['Year'].idxmin])","f4f7e0a7":"# e-19\n# we want to build the master group to fight evil, kind of an avengers 2.0, but only better,\n# lets select the captain, the one with the most total stats  (obviously his Alignment must be good to fight evil)\n# level: easy","d1d649d1":"# Nimrod\ngood_characters = characters_stats[characters_stats['Alignment'] == 'good']\ngood_characters.loc[good_characters['Total'].idxmax()][['Name','Total']]","22296bf7":"# danniel\ngood_characters = characters_stats[characters_stats['Alignment'] == 'good']\nmax_total = good_characters['Total'].max()\ngood_characters[good_characters['Total']==max_total]","ee7ecf77":"# e-20\n# People will pay big money for original vintage comic books, retrive all first issue comic books\n# level: easy\n# datasets: comics_characters","f1f78aba":"# Nimrod\nmarvel_comics[marvel_comics['issueNumber'] == 1.0].head()","09e72f17":"# e-21\n# On the other hand, long lasting series are great as well :), retrive the comic book with the biggest issue number\n#level: easy\n# datasets: comics_characters","25d377c3":"# Nimrod\nlong_lasting_series = marvel_comics.loc[marvel_comics['issueNumber'].idxmax()]\nlong_lasting_series","8ca9fe09":"# e-22\n# It's the holiday season, and to celebrate marvel usually comes out with holiday special comic books, \n# retrive all  holiday special comic books (the word 'Holiday' will appeer in the title)\n# level: easy","e1b05789":"# Nimrod\nmarvel_comics[marvel_comics.title.str.contains('Holiday')].head() ","e972d1c4":"# e-23\n# What's the mean intelligence of the superheroes who have a 'True' value in the power matrix and the same for the superheroes who have a 'False' value?\n\n# difficulty: easy","617951d1":"# ?\ncharacters_intelligence = characters_stats.merge(superheroes_power_matrix, on='Name')[['Name', 'Intelligence_x', 'Intelligence_y']].rename(columns={'Intelligence_x': 'Intelligence Score', 'Intelligence_y': 'Is Intelligent'})\ncharacters_intelligence.groupby('Is Intelligent').mean()","29745dd1":"# m-01\n# question: Show 5 top comics with top participants on a plot bar.\n# difficulty: medium\n# datasets: comics,characters,comics_to_characters","7e0a493d":"# Nimrod\ncomics_and_characters['title'].value_counts().head(5).plot(kind='barh')","b8bb77db":"# m-02\n# question: Unmatched rivals - show for each super hero the number of vilans that stronger then him\/her\n# difficulty: medium-hard\n# datasets: charcters_stats.csv","3abe833a":"# m-03\n# question: Weak point - for each vilan, show his weakest characteristic.\n# difficulty: medium\n# datasets: characters_stats","19e96871":"# Nimrod\ncharactaristics = ['Intelligence','Strength','Speed','Durability','Power','Combat']\nvillans = characters_stats[characters_stats['Alignment'] == 'bad']\nvillans['weakest'] = villans[charactaristics].idxmin(axis=1)\nvillans[['Name','weakest']].sample(10)","edba1d96":"# m-04\n# question: Who can beat me? - for each vilan, show how many superheros can defeat them (compare by total score)\n# difficulty: medium\n# datasets: characters_stats","1c920ec5":"#hen\nsuperheros_number = []\nsuperhearos= characters_stats[characters_stats['Alignment'] == 'good'][['Name','Total']]\nvillans= characters_stats[characters_stats['Alignment'] == 'bad'][['Name','Total']]\nfor villan_power in villans['Total']:\n    number=len(superhearos.loc[superhearos['Total']>villan_power])\n    superheros_number.append(number)\n    \nvillans['superheros_num']=superheros_number\n\nprint (villans[['Name','superheros_num']])","210e2448":"# m-05\n# question: Display box plot summarizing the next statistics:\n# Height, Weight, Intelligence, Strength, Speed, Durability, Power, Combat\n# difficulty: medium\n# datasets: characters_info, characters_stats","0eae8be0":"# Nimrod\nsns.boxplot(data=characters_stats[['Intelligence','Strength','Speed','Durability','Power','Combat']])\nplt.ylim(0,150)  #change the scale of y axix\nplt.show()","b8a178bf":"# m-06\n# find the comics with most participants and display all of the participants\n# difficulty: medium\n","12f1a975":"# m-07\n# A great team needs great diversity, and to be great at everything, get the best hero at each statistical category\n# level: easy - medium\n","d92ea734":"# Nimrod\ngood_characters = characters_stats[characters_stats['Alignment'] == 'good']\nstats = ['Intelligence','Strength','Speed','Durability','Power','Combat']\nmax_stats_rows = []\nfor stat in stats:\n    max_stats_rows.append(good_characters.loc[good_characters[stat].idxmax()][['Name',stat]])\npd.concat(max_stats_rows)","18acac63":"# m-08\n# Is your strngth and intelligence related?.\n# Show a scatter chart where the x axis is stength, and the y axis is intelligence, scatter heros and villans as two different color dots\n# level: easy - medium","fde5e7a0":"# Nimrod\ngood = characters_stats[characters_stats['Alignment'] == 'good'] #fire contains all fire pokemons\nbad = characters_stats[characters_stats['Alignment'] == 'bad']  #all water pokemins\nplt.scatter(good.Strength.head(100),good.Intelligence.head(100),color='B',label='Good',marker=\"*\",s=50) #scatter plot\nplt.scatter(bad.Strength.head(100),bad.Intelligence.head(100),color='R',label=\"Bad\",s=25)\nplt.xlabel(\"Stength\")\nplt.ylabel(\"Intelligence\")\nplt.legend()\nplt.plot()\nfig=plt.gcf()  #get the current figure using .gcf()\nfig.set_size_inches(12,6) #set the size for the figure\nplt.show()","0fcb8be4":"# m-09\n# To truly be a great superhero, you can't be a one trick pony, you need to posess multipule abilities. Create a series of every superhero and how many different abilities they posess, in descending order\n# level: medium","9313db84":"# Nimrod\nability_count = [ int(sum([row[c] for c in superheroes_power_matrix.columns])) for index, row in superheroes_power_matrix.iterrows() ]\nsuperheroes_power_matrix['Ability Count'] = ability_count\nsuperheroes_power_matrix['Ability Count'].sort_values(ascending=False).head()","94736648":"# m-10\n# Create a serires that counts the number of comic book appeerences for each hero\n# Bonus: show the top 10 heros in a pie chart\n\n#level: easy - medium\n","a8b1963d":"# Nimrod\nsuperhero_comic_performences = pd.merge(marvel_characters_to_comics,marvel_characters)['name'].value_counts()\ntop_10 = superhero_comic_performences.nlargest(10)\nlabels = top_10.index.tolist()\nsizes = top_10.values\ncolors = ['Y', 'B', '#00ff00', 'C', 'R', 'G', 'silver', 'white', 'M','gray']\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=90)\nplt.axis('equal')\nplt.title(\"Top 10 comic performences\")\nplt.plot()\nfig=plt.gcf()\nfig.set_size_inches(7,7)\nplt.show()","7a764499":"# m-11\n# Pick any hero from the previous question and list all the comic book titles that he appeared in\n#level: medium","d49c8789":"# Nimrod\nhero_name = 'Iron Man'\nall_character_comics = pd.merge(marvel_characters_to_comics,marvel_characters)\nall_ca_comics_id = all_character_comics[all_character_comics['name'] == hero_name]['comicID']\nmarvel_comics[marvel_comics['comicID'].isin(all_ca_comics_id)]['title'].head()","126efb30":"# m-12\n# It's the holiday season once again, since we already have a list of all holiday comics, \n# retrive all heros who have participated in a holiday comic book\n# level: easy - medium","c78072d3":"# Nimrod\nmarvel_characters_to_comics[marvel_characters_to_comics['comicID'] == 17429]\nholiday_comics = marvel_comics[marvel_comics.title.str.contains('Holiday')]\nholiday_character_to_comic = marvel_characters_to_comics[marvel_characters_to_comics['comicID'].isin(holiday_comics['comicID'])]\npd.merge(holiday_character_to_comic,marvel_characters)","491b6d7c":"# m-13","b61f5438":"# difficulty: medium","8583570a":"# Adir\nfirst_mismatch = characters_intelligence.loc[(characters_intelligence['Intelligence Score'] == 100) & (~characters_intelligence['Is Intelligent'])]\nsecond_mismatch = characters_intelligence.loc[(characters_intelligence['Intelligence Score'] == 0) & (characters_intelligence['Is Intelligent'])]\nmismatch = pd.concat([first_mismatch, second_mismatch])\nmismatch.head(10)\n# len(mismatch) - the answer","0b330fe5":"# m-14\n# show the distribution of BMI for all characters with height and weight data. show the distribution according to BMI categories\n# difficulty: medium\ncharacters_info\nheight_n_weight_info = characters_info[[\"Name\",\"Height\",\"Weight\",\"AdditionalData\"]]\nheight_n_weight_info.dropna(inplace=True)\nheight_n_weight_info.drop_duplicates(inplace=True)\nheight_n_weight_info[\"BMI\"] = height_n_weight_info.Weight\/np.power(height_n_weight_info.Height\/100,2)\nheight_n_weight_info[\"WeightStatus\"] = pd.cut(height_n_weight_info['BMI'], [0, 18.5, 25,30,1000],labels=[\"Underweight\",\"Normal weight\",\"Overweight\",\"Obesity\"])\nheight_n_weight_info.WeightStatus.value_counts().plot.bar()\n","37f546cf":"# h-01\n# question: Show pairs of characters that always appear together. rank them by number of appearances\n# difficulty: hard - very hard\n# datasets: comics,characters,comics_to_characters\n\n\n","b76d6657":"# danniel\ncomics_character_list = comics_and_characters[[\"title\",\"name\"]]\n# fill_val = 0, since NaN is incomparable\ncomics_character_matrix = comics_character_list.pivot_table(index=\"name\",columns=\"title\",aggfunc=len,fill_value=0)\ncomics_character_matrix.sample(5)\n","2b034815":"comics_character_matrix[\"ComicsArrayHash\"] = \"\"\ncomics_character_matrix.sample(5)\nimport hashlib\nstop_after = 5\ncurr_id = 0\n# len(comics_character_matrix.index)\n\nfor curr_character in comics_character_matrix.index:\n    comics_array = comics_character_matrix.loc[curr_character]\n    comics_array = comics_array.values.tobytes()\n    \n    digest = hashlib.sha224(comics_array).hexdigest()\n    comics_character_matrix.at[curr_character,\"ComicsArrayHash\"] = digest\n#     print (comics_array.values)\n#     curr_id += 1\n    \n#     if curr_id == stop_after:\n#         break\n\n    \n    \ncomics_character_matrix[\"ComicsArrayHash\"].sample(5)\n","91f263d5":"loyal_characters_ids = pd.DataFrame(comics_character_matrix.ComicsArrayHash.value_counts())\n# loyal_characters_ids = loyal_characters_ids[loyal_characters_ids.ComicsArrayHash > 1]\nloyal_characters_ids.sample(10)\n# appear_together = trns.pivot_table(index=\"ComicsArrayHash\",)","9b6ff82a":"trns = pd.DataFrame(comics_character_matrix[\"ComicsArrayHash\"])\ntrns.ComicsArrayHash.value_counts().sort_values(ascending=False)\n# trns.ComicsArrayHash\n# trns = trns\n# trns.sample(5)\n","4de5ebe9":"# first try\nnumber_of_columns = len(comics_character_matrix.columns)\nloyal_duos = pd.DataFrame(columns=[\"Appearances\",\"DuoName\"])\n\nstop_after = number_of_columns\nstop_after = 3\n\nfor first_idx in range(number_of_columns):\n    if first_idx == stop_after:\n        break\n    \n    for second_idx in range(first_idx+1,number_of_columns):\n        first_charcter_name = comics_character_matrix.columns[first_idx]\n        second_charcter_name = comics_character_matrix.columns[second_idx]\n        are_equals = comics_character_matrix[first_charcter_name].equals(comics_character_matrix[second_charcter_name])\n        \n        if (are_equals):\n            duo_name = first_charcter_name,\"-\",second_charcter_name\n            num_of_appearances = len(comics_character_matrix[comics_character_matrix[first_charcter_name]!=0])\n            new_data = [{\"DuoName\":duo_name,\"Appearances\":num_of_appearances}]\n            loyal_duos = loyal_duos.append(new_data,ignore_index=True)\n#             print(duo_name)\n\nloyal_duos       \nloyal_duos.sort_values(by=[\"Appearances\"],ascending =False)","b55018ff":"# Nimrod\ncomics_to_duos = pd.merge(marvel_characters_to_comics,marvel_characters_to_comics,on='comicID')\ncomics_to_duos = comics_to_duos[comics_to_duos['characterID_x'] > comics_to_duos['characterID_y']]\nunique_duos = comics_to_duos.groupby(['characterID_x','characterID_y']).size().reset_index().rename(columns={0:'apperences_together'})\nheros_together = []\nfor index, duo in unique_duos.iterrows():\n    x_apperences = len(marvel_characters_to_comics[marvel_characters_to_comics['characterID'] == duo['characterID_x']])\n    y_apperences = len(marvel_characters_to_comics[marvel_characters_to_comics['characterID'] == duo['characterID_y']])\n    xy_apperences = duo['apperences_together']\n    if x_apperences == y_apperences == xy_apperences:\n        heros_together.append({'x':duo['characterID_x'],'y':duo['characterID_y'],'apperences':xy_apperences})\nheros_together_df = pd.DataFrame(heros_together)\nheros_together_df= pd.merge(heros_together_df,marvel_characters,left_on='x',right_on='characterID')\nheros_together_df= pd.merge(heros_together_df,marvel_characters,left_on='y',right_on='characterID')\nheros_together_df[['apperences','name_x','name_y']].sort_values(by=['apperences'],ascending=False).sample(5)","1f9d8d55":"# h-02\n# question: Unmatched rivals - show for each super hero , all the names of the  vilans that stronger then him\/her\n# difficulty: hard\n# datasets: characters_stats.csv\n\n# BONUS\n# question: Unmatched rivals - find an informative way to visualize the results you got","63347cd5":"# danniel\ncharacters_stats = pd.read_csv(\"..\/input\/superheroes-stats-n-info\/superheroes_stats.csv\",index_col=\"Name\")\n\ngood_characters = pd.DataFrame(characters_stats[characters_stats['Alignment'] == 'good'][\"Total\"])\ngood_characters.dropna(inplace=True)\ngood_characters.drop_duplicates(inplace=True)\nbad_characters = pd.DataFrame(characters_stats[characters_stats['Alignment'] == 'bad'][\"Total\"])\nbad_characters.dropna(inplace=True)\nbad_characters.drop_duplicates(inplace=True)\n\ngood_characters = good_characters.sort_values(by=\"Total\",ascending=False).head(7)\nbad_characters = bad_characters.sort_values(by=\"Total\",ascending=False).head(7)\n\nunmatched_rivals = pd.DataFrame(columns=[\"Good\",\"Bad\",\"IsUnmatched\"])\nfor curr_good in good_characters.index:\n    good_char_total = good_characters.loc[curr_good][\"Total\"]\n#     print (curr_good,\":\", good_char_total)\n    for curr_bad in bad_characters.index:\n        bad_char_total = bad_characters.loc[curr_bad][\"Total\"]\n        is_unmatched = \"Yes\" if np.bool((bad_char_total > good_char_total)) else \"No\"\n#         print (\"\\t\",curr_bad,\":\", bad_char_total, \"unmatched=\",is_unmatched)\n        new_data = [{\"Good\":curr_good,\"Bad\":curr_bad,\"IsUnmatched\":is_unmatched}]\n        unmatched_rivals = unmatched_rivals.append(new_data,ignore_index=True)\n \nunmatched_rivals.head(100)\n\ndef concat_characters(in_str):\n    result = in_str.str.cat(sep=\", \")\n    return result\n    \n\nu_matrix = unmatched_rivals.pivot_table(index=\"Good\",columns=\"IsUnmatched\",values=\"Bad\",aggfunc=concat_characters)\nresult = pd.DataFrame(u_matrix.Yes)\nresult\n","bd89bb63":"# h-03\n# show 5 top rare and common abilites\n# difficulty: hard","3102e8f3":"# danniel\nsuperheroes_power_matrix\n\nshp_trans = superheroes_power_matrix.transpose()\nshp_trans\nshp_trans[\"AbilityNum\"] = (shp_trans[shp_trans.columns]==True).sum(axis=1)\nabilities_sorted_by_freq = shp_trans[\"AbilityNum\"].sort_values(ascending=False)\nabilities_sorted_by_freq\n\ncommon = abilities_sorted_by_freq[:5]\ncommon\n\nrare = abilities_sorted_by_freq[-5:]\nrare\n \ncommon_and_rare = common.append(rare)\ncommon_and_rare\n","f683cad3":"# h-04\n# Two of the most iconic marvel superheros, Iron Man and Captain America, appeer together quite offten. \n# see if you can get the ammount of comic books they both appear in\n\n# level: medium - hard","0ffdb8de":"# Nimrod\nall_character_comics = pd.merge(marvel_characters_to_comics,marvel_characters)\nmarvel_comics\nall_ca_comics_id = all_character_comics[all_character_comics['name'] == 'Captain America']['comicID']\nall_ca_comics = marvel_comics[marvel_comics['comicID'].isin(all_ca_comics_id)]\n\nall_im_comics_id = all_character_comics[all_character_comics['name'] == 'Iron Man']['comicID']\nall_im_comics = marvel_comics[marvel_comics['comicID'].isin(all_im_comics_id)]\n\nlen(pd.merge(all_im_comics,all_ca_comics,on='comicID', how='inner'))","31d5bd77":"# h-05\n# Now that we know how many comic books both of those guys have appeared together at, are they the best power duo in the marvel universe?.\n# craete a series with a multi index of 2 superheros(name1,name2) and count for each of them the ammount of comic books they have been in together in, order by that ammount in a descending order\n# level: really hard :)\n","7bc4af10":"# Nimrod\nmarvel_characters_to_comics\ncomics_to_duos = pd.merge(marvel_characters_to_comics,marvel_characters_to_comics,on='comicID')\ncomics_to_duos = comics_to_duos[comics_to_duos['characterID_x'] > comics_to_duos['characterID_y']] # remove acuurences where the 2 heros are the same, \n\n\n# and removes duplicates, because hero1,hero2 == hero2,hero1\ncomic_duos = pd.merge(comics_to_duos,marvel_characters,left_on='characterID_x',right_on='characterID').drop(['characterID','characterID_x'],axis=1).rename(columns={'name':'name1'})\ncomic_duos = pd.merge(comic_duos,marvel_characters,left_on='characterID_y',right_on='characterID').drop(['characterID','characterID_y'],axis=1).rename(columns={'name':'name2'})\n\n# comic_duos = comic_duos.set_index(['name1','name2'])\n# comic_duos = comic_duos.groupby(level=[0,1]).size().sort_values(ascending=False)\n# top_duos = comic_duos[:5]\n\n\ncomic_duos[\"DouName\"] = comic_duos.name1 + \"-\" + comic_duos.name2\ntop_duos = comic_duos.DouName.value_counts()[:5]\n\ntop_duos.plot.barh()\n","3377f7f1":"# Imports","87fe33a6":"# TODO: change to hair color","165eca2c":"We saw that the characters with the 'False' intelligence do have a lower intelligence score than the 'True' ones. That means that the 2 different datasets we based our analysis on have a similar evalutaion of characters intelligence in general.\n\n* Can you find characters that one dataset classifies them as intelligent and the other one classifies them as not intelligent?\n\n* How many characters like that are there? (since 1 dataset is boolean and the other is numeric, assume that 100 score equals 'True' and 0 score equals 'False')\n\n* What that might say on those 2 datasets?","2de5ee87":"## Hard","14be633b":"## Medium","ed90b6b7":"* Yes - solution above.\n* 8 - solution above.\n* That means that those 2 datasets sometimes classifies characters differently and we, as analysts, should pay attention to this fact.","78d86db2":"# TODO: Remvoe Dup","db8072a2":"# Read data from files","f6e5af44":"## Easy","2d504078":"# TODO: solve","685b2b69":"# TODO: clarify the question","cf9bcb31":"# The End","5b2692fe":"# TODO: solve","b7be7037":"# TODO: move to hard and solve"}}