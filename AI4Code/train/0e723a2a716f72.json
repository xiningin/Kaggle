{"cell_type":{"6f08c294":"code","b36c3e25":"code","b5dee494":"code","2a0ec0f9":"code","2cb8c66c":"code","4cca66d3":"code","28629e62":"code","17fb2f46":"code","8814420b":"code","2f8c430b":"code","fdb56256":"code","19ae4f6a":"code","4fab3575":"code","d30596f1":"code","5a2228c8":"code","08fea318":"code","2f86dfce":"code","de7406cb":"code","f0e674fb":"code","febe668a":"code","16e49411":"code","509106b2":"code","a99403cc":"code","7ffcfd27":"code","27ac462c":"code","51704c36":"code","479efca5":"code","12fc7975":"markdown","7ab3e1b1":"markdown","b835628e":"markdown","386b76b4":"markdown","930c92f5":"markdown","23e3890c":"markdown","2d8e4a26":"markdown","618077eb":"markdown","90ea8fc9":"markdown","94486b2e":"markdown","01eb1488":"markdown"},"source":{"6f08c294":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","b36c3e25":"print(os.listdir('..\/input'))","b5dee494":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","2a0ec0f9":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.show()\n","2cb8c66c":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","4cca66d3":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf1 = pd.read_csv('..\/input\/Automobile.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'Automobile.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","28629e62":"df1.head(5)","17fb2f46":"plotPerColumnDistribution(df1, 10, 5)","8814420b":"plotCorrelationMatrix(df1, 8)","2f8c430b":"plotScatterMatrix(df1, 20, 10)","fdb56256":"#Define category columns\ncat_cols = ['symboling', 'fuel-type', 'aspiration', 'num-of-doors', \n                'body-style', 'drive-wheels', 'engine-location', 'fuel-system',\n                'engine-type', 'num-of-cylinders']","19ae4f6a":"#Converting type of categorical columns to category\nfor col in cat_cols:\n    df1[col] = df1[col].astype('category')","4fab3575":"#Converting  numeric to categorical variables\ndummied = pd.get_dummies(df1[cat_cols], drop_first = True)","d30596f1":"plotCorrelationMatrix(dummied, 8)","5a2228c8":"#adding price column with categorical varaibles\ndf2=pd.concat([df1['price'],dummied],axis =1)","08fea318":"# Plotting graph between price and categorical variables\nplotCorrelationMatrix(df2, 8)","2f86dfce":"# Coorelation amnong price and categorical variables\ndf2.corr(method='pearson', min_periods=1)","de7406cb":"# create X and y\nfeature_cols = ['symboling']\nX = df1[feature_cols]\ny = df1.price","f0e674fb":"#Convertng categorical variable to numeric for make \n#dummy_make = pd.get_dummies(df1['make'], drop_first = True)\n#df_make=pd.concat([df1['price'],dummy_make],axis =1)\ndf1.info()","febe668a":"# import, instantiate, fit\nfrom sklearn.linear_model import LinearRegression\nlinreg = LinearRegression()\nlinreg.fit(X, y)","16e49411":"# print the coefficients\nprint (linreg.intercept_)\nprint (linreg.coef_)","509106b2":"# Plot the graph between symboling and price\ndf1.plot(kind='scatter', x='height', y='price', alpha=0.2)","a99403cc":"# Seaborn scatter plot with regression line\nimport seaborn as sns\nsns.lmplot(x='height', y='price', data=df1, aspect=1.5, scatter_kws={'alpha':0.2})","7ffcfd27":"\nfeature_cols = ['length', 'width', 'height']\nimport seaborn as sns\n# multiple scatter plots in Seaborn\nsns.pairplot(df1, x_vars=feature_cols, y_vars='price', kind='reg')","27ac462c":"\n# multiple scatter plots in Pandas\nfig, axs = plt.subplots(1, len(feature_cols), sharey=True)\nfor index, feature in enumerate(feature_cols):\n    df1.plot(kind='scatter', x=feature, y='price', ax=axs[index], figsize=(16, 3))\n","51704c36":"#Line plot for price\n\ndf1.price.plot()","479efca5":"#boxplot fir price group by length\ndf1.boxplot(column='price', by='length')","12fc7975":"Let's take a quick look at what the data looks like:","7ab3e1b1":"There is 1 csv file in the current version of the dataset:\n","b835628e":"## Exploratory Analysis\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data. Depending on the data, not all plots will be made. (Hey, I'm just a kerneling bot, not a Kaggle Competitions Grandmaster!)","386b76b4":"## Introduction\nGreetings from the Kaggle bot! This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring. Click the blue \"Edit Notebook\" or \"Fork Notebook\" button at the top of this kernel to begin editing.","930c92f5":"Scatter and density plots:","23e3890c":"### Let's check 1st file: ..\/input\/Automobile.csv","2d8e4a26":"## Conclusion\nPrice is strongly corealted with drive-wheel_rwd, fuel-system_mpfi\nand negative coorelatred to number-of-cylinder-four. \nLinear regression cleary show that price is hisgher for negative symboling rating and low for positve symboling","618077eb":"Correlation matrix:","90ea8fc9":"Now you're ready to read in the data and use the plotting functions to visualize the data.","94486b2e":"Distribution graphs (histogram\/bar graph) of sampled columns:","01eb1488":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code."}}