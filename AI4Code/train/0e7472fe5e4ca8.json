{"cell_type":{"ca70eb2a":"code","8d4ae7d2":"code","9f688e0b":"code","4893bb13":"code","8b916ec4":"code","3f99eb1e":"code","0ee21d19":"code","030c5def":"code","e6f9fa99":"code","417c3368":"code","6676ad8b":"code","23a2f312":"code","5329f942":"code","42c86dbb":"code","7634f906":"code","a24ab622":"code","f4ae048f":"code","00eca6c9":"code","8c81962c":"code","ee6205b1":"code","8b0921bb":"code","7998133c":"code","59444712":"code","2114d0b5":"code","3ca1d2be":"code","c9a2da3f":"code","fbcd228c":"code","1c65daa2":"code","26c5ae27":"code","7a5cd4c9":"code","f7acf9f1":"code","3d262f92":"code","6105a93d":"code","55b8f2fa":"code","f0e04dc4":"code","fc0e2ebc":"code","4ce6f733":"code","7c3814de":"code","3856a565":"code","54f4fd4f":"code","999770a2":"code","d07c4e28":"code","4895878d":"code","a0b53486":"code","4758256f":"code","e77ed0cf":"code","f080f5c9":"code","def581ea":"code","5d365f47":"code","5133599d":"code","b944ea99":"code","e190e020":"code","2f524f90":"code","81e6f16d":"code","a7f65e98":"code","769a60f1":"code","1b17438e":"code","a83ae385":"code","6bb42100":"code","cb6dff78":"code","b8fd4d5c":"code","16fe7905":"markdown","4592a683":"markdown","cbb26225":"markdown","7b09bd81":"markdown","b2564e3d":"markdown","2dbcf36a":"markdown","60bfdca5":"markdown","a6fe0c32":"markdown","ca9dc956":"markdown","08390a14":"markdown","aad01ccd":"markdown","81fb76b8":"markdown","47177e47":"markdown","0d538140":"markdown","7fc060c5":"markdown","1b934835":"markdown","1d33c87d":"markdown","93465574":"markdown","29970650":"markdown","cae98b27":"markdown","97c84ab4":"markdown","b7e25eab":"markdown","4852623b":"markdown","34754efc":"markdown","9489c791":"markdown","4e09d7ee":"markdown","4f649b6f":"markdown","9241be89":"markdown","341639d7":"markdown","e4db1ec8":"markdown","5ae89dc4":"markdown","06de0e13":"markdown","96758f1a":"markdown","08008aed":"markdown"},"source":{"ca70eb2a":"# Importing Libraries\nimport numpy as np\nimport pandas as pd\nimport os\nimport pickle\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tensorflow import keras\nfrom keras.preprocessing.image import ImageDataGenerator as imgen\nfrom keras.models import load_model, Sequential\nfrom keras.layers import Conv2D,MaxPooling2D,Dropout,Flatten,Dense,BatchNormalization\nfrom keras.preprocessing import image\nfrom keras.optimizers import Adam\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix,mean_absolute_error","8d4ae7d2":"#read\ndata = pd.read_csv(\"..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv\")\ndata.head()","9f688e0b":"#shape\ndata.shape","4893bb13":"data.info()","8b916ec4":"# Getting Image data\n\ndef toPixels(pixels):\n    arr = np.array(pixels.split(),\"float64\")\n    arr = arr.reshape(48,48)\n    \n    return arr","3f99eb1e":"%%time\ndata[\"pixels\"] = data[\"pixels\"].apply(toPixels)","0ee21d19":"pixels = np.reshape(data[\"pixels\"].to_list(), (data.shape[0],48,48,1))","030c5def":"pixels.shape","e6f9fa99":"x_train_age,x_test_age, y_train_age,y_test_age = train_test_split(pixels,np.array(data[\"age\"]),random_state = 42, test_size = 0.2)\nx_train_age,x_val_age, y_train_age,y_val_age = train_test_split(x_train_age,y_train_age,random_state = 21, test_size = 0.15)","417c3368":"print(x_train_age.shape,y_train_age.shape, x_test_age.shape,x_val_age.shape)","6676ad8b":"traingen = imgen(rescale=1.\/255,\n                zoom_range=0.2,\n                 shear_range=0.2,\n                 horizontal_flip= True\n                )\nvalgen = imgen(rescale=1.\/255,\n                zoom_range=0.2,\n                 shear_range=0.2,\n                 horizontal_flip= True\n                )\n\ntestgen = imgen(rescale=1.\/255)","23a2f312":"age_train_ds = traingen.flow(x_train_age,y_train_age,\n                        batch_size = 32\n                       )\n\nage_val_ds = valgen.flow(x_val_age,y_val_age,\n                        batch_size = 32\n                       )\n\nage_test_ds = testgen.flow(x_test_age,y_test_age,\n                     batch_size = 32,\n                    shuffle=False\n                     )","5329f942":"def showImagesAge(img,label):\n    plt.figure(figsize=[22,15])\n    for i in range(25):\n        plt.subplot(5,5,i+1)\n        plt.imshow(img[i])\n        plt.title(\"Age is {}\".format(label[i]))\n        plt.axis('off')\n    plt.show()","42c86dbb":"X,Y = next(age_train_ds)\n\nshowImagesAge(X,Y)","7634f906":"image_input = keras.Input(shape=(48,48,1))\n\nl1 = Conv2D(32,(3,3), activation=\"relu\")(image_input)\nl2 = Conv2D(32,(3,3), activation=\"relu\")(l1)\nl3 = MaxPooling2D(pool_size=(2, 2))(l2)\n\nl4 = Dropout(0.30)(l3)\n\nl5 = Conv2D(64,(3,3), activation=\"relu\")(l4)\nl6 = Conv2D(128,(3,3), activation=\"relu\")(l5)\n\n#l7 = BatchNormalization()(l6)\n\nl8 = Flatten()(l6)\nl9 = Dense(256, activation= \"relu\")(l8)\nimage_output = Dense(1)(l9)\nmodel_age = keras.Model(image_input, image_output)","a24ab622":"model_age.summary()","f4ae048f":"# Compiling the model\nmodel_age.compile(optimizer='adam', loss = 'mse', metrics=[keras.metrics.mean_absolute_error])","00eca6c9":"my_calls = [keras.callbacks.EarlyStopping(monitor='val_mean_absolute_error',patience=3),\n            keras.callbacks.ModelCheckpoint(\"Model_age.h5\",verbose=1,save_best_only=True)]","8c81962c":"hist_age = model_age.fit(age_train_ds,epochs=35,validation_data=age_val_ds,callbacks=my_calls)","ee6205b1":"model_age.evaluate(age_test_ds,verbose=1)","8b0921bb":"plt.figure(figsize=(15,6))\n\nplt.subplot(1,2,1)\nplt.plot(hist_age.epoch,hist_age.history['mean_absolute_error'],label = 'Training')\nplt.plot(hist_age.epoch,hist_age.history['val_mean_absolute_error'],label = 'validation')\n\nplt.title(\"Accuracy\")\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.plot(hist_age.epoch,hist_age.history['loss'],label = 'Training')\nplt.plot(hist_age.epoch,hist_age.history['val_loss'],label = 'validation')\n\nplt.title(\"Loss\")\nplt.legend()\nplt.show()","7998133c":"pred_Age = model_age.predict(age_test_ds, verbose=1)","59444712":"pred_age = []\nfor i in pred_Age:\n    pred_age.append(np.round(i[0]))","2114d0b5":"def plotAgePA(image,pred,actual):\n    plt.figure(figsize=[22,15])\n    for i in range(500,525):\n        plt.subplot(5,5,(i%25)+1)\n        plt.xticks([])\n        plt.yticks([])\n        plt.imshow(x_test_age[i])\n        plt.xlabel(\"Actual Age is {}\".format(actual[i]))\n        plt.ylabel(\"Prediced is {}\".format(pred[i]))\n    plt.show()","3ca1d2be":"plotAgePA(x_test_age,pred_age,y_test_age)","c9a2da3f":"x_train_gen,x_test_gen, y_train_gen,y_test_gen = train_test_split(pixels,np.array(data[\"gender\"]),random_state = 42, test_size = 0.2)\nx_train_gen,x_val_gen, y_train_gen,y_val_gen = train_test_split(x_train_gen,y_train_gen,random_state = 21, test_size = 0.15)","fbcd228c":"print(x_train_gen.shape,y_train_gen.shape,x_val_gen.shape,y_val_gen.shape)","1c65daa2":"gender = [\"Male\",\"Female\"]","26c5ae27":"gen_train_ds = traingen.flow(x_train_gen,y_train_gen,\n                        batch_size = 32\n                       )\n\ngen_val_ds = valgen.flow(x_val_gen,y_val_gen,\n                        batch_size = 32\n                       )\n\ngen_test_ds = testgen.flow(x_test_gen,y_test_gen,\n                     batch_size = 32,\n                    shuffle=False\n                     )","7a5cd4c9":"#one batch\ndef showImagesGender(img,label):\n    plt.figure(figsize=[22,15])\n    for i in range(25):\n        plt.subplot(5,5,i+1)\n        plt.imshow(img[i])\n        plt.title(\"Gender is {}\".format(gender[label[i]]))\n        plt.axis('off')\n    plt.show()","f7acf9f1":"A,b = next(gen_train_ds)\nshowImagesGender(A,b)","3d262f92":"model_gender = Sequential([\n    Conv2D(32,(3,3), activation = \"relu\", input_shape = (48,48,1)),\n    MaxPooling2D(2,2),\n    \n    Conv2D(32,(3,3), activation = \"relu\"),\n    MaxPooling2D(2,2),\n    \n    Dropout(0.3),\n    \n    Conv2D(64,(3,3), activation = \"relu\"),\n    MaxPooling2D(2,2),\n    \n    #Conv2D(128,(3,3), activation = \"relu\"),\n    #MaxPooling2D(2,2),\n    \n    Flatten(),\n    \n    #Dense(256,activation = 'relu'),\n    #Dropout(0.5),\n    \n    Dense(64,activation = 'relu'),\n    Dropout(0.5),\n    \n    \n    Dense(1,activation='sigmoid')\n])\nmodel_gender.summary()","6105a93d":"model_gender.compile(optimizer='adam',loss = \"binary_crossentropy\",metrics=['accuracy'])","55b8f2fa":"my_calls_1 = [keras.callbacks.EarlyStopping(monitor='val_accuracy',patience=3),\n            keras.callbacks.ModelCheckpoint(\"Model_Gender.h5\",verbose=1,save_best_only=True)]","f0e04dc4":"hist_gender = model_gender.fit(gen_train_ds,epochs = 23, validation_data = gen_val_ds, callbacks = my_calls_1)","fc0e2ebc":"model_gender.evaluate(gen_test_ds)","4ce6f733":"plt.figure(figsize=(15,6))\n\nplt.subplot(1,2,1)\nplt.plot(hist_gender.epoch,hist_gender.history['accuracy'],label = 'Training')\nplt.plot(hist_gender.epoch,hist_gender.history['val_accuracy'],label = 'validation')\n\nplt.title(\"Accuracy\")\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.plot(hist_gender.epoch,hist_gender.history['loss'],label = 'Training')\nplt.plot(hist_gender.epoch,hist_gender.history['val_loss'],label = 'validation')\n\nplt.title(\"Loss\")\nplt.legend()\nplt.show()","7c3814de":"pred_gender = model_gender.predict(gen_test_ds)","3856a565":"pred_gen = []\nfor i in pred_gender:\n    pred_gen.append(int(np.round(i[0])))","54f4fd4f":"pred_gen[:5]","999770a2":"print(classification_report(pred_gen,y_test_gen))","d07c4e28":"sns.heatmap(confusion_matrix(pred_gen,y_test_gen),annot = True, fmt = 'd', cmap = \"BuPu\");","4895878d":"def testGender(image,pred,actual):\n    plt.figure(figsize=[22,15])\n    for i in range(500,525):\n        plt.subplot(5,5,(i%25)+1)\n        plt.xticks([])\n        plt.yticks([])\n        plt.imshow(image[i])\n        plt.xlabel(\"Actual Gender is {}\".format(gender[actual[i]]))\n        plt.ylabel(\"Prediced is {}\".format(gender[pred[i]]))\n    plt.show()","a0b53486":"testGender(x_test_gen,pred_gen, y_test_gen)","4758256f":"x_train_et,x_test_et, y_train_et,y_test_et = train_test_split(pixels,np.array(data[\"ethnicity\"]),random_state = 42, test_size = 0.2)\nx_train_et,x_val_et, y_train_et,y_val_et = train_test_split(x_train_et,y_train_et,random_state = 21, test_size = 0.15)","e77ed0cf":"print(x_train_et.shape,y_train_et.shape)","f080f5c9":"et_train_ds = traingen.flow(x_train_et,y_train_et,\n                        batch_size = 32\n                       )\n\net_val_ds = valgen.flow(x_val_et,y_val_et,\n                        batch_size = 32\n                       )\n\net_test_ds = testgen.flow(x_test_et,y_test_et,\n                     batch_size = 32,\n                    shuffle=False\n                     )","def581ea":"#one batch\ndef showImagesEthnicity(img,label):\n    plt.figure(figsize=[22,15])\n    for i in range(25):\n        plt.subplot(5,5,i+1)\n        plt.imshow(img[i])\n        plt.title(\"Race is {}\".format(label[i]))\n        plt.axis('off')\n    plt.show()","5d365f47":"c,d = next(et_train_ds)\nshowImagesEthnicity(c,d)","5133599d":"model_et = Sequential([\n    Conv2D(32,(3,3), activation = \"relu\", input_shape = (48,48,1)),\n    MaxPooling2D(2,2),\n    \n    Conv2D(32,(3,3), activation = \"relu\"),\n    MaxPooling2D(2,2),\n    \n    Dropout(0.3),\n    \n    Conv2D(64,(3,3), activation = \"relu\"),\n    MaxPooling2D(2,2),\n    \n    Conv2D(128,(3,3), activation = \"relu\"),\n    MaxPooling2D(2,2),\n    \n    Flatten(),\n    \n    Dense(256,activation = 'relu'),\n    Dropout(0.5),\n    \n    #Dense(64,activation = 'relu'),\n    #Dropout(0.5),\n    \n    \n    Dense(5,activation='softmax')\n])\nmodel_et.summary()","b944ea99":"model_et.compile(optimizer='adam',loss = \"sparse_categorical_crossentropy\",metrics=['accuracy'])","e190e020":"my_calls_2 = [keras.callbacks.EarlyStopping(monitor='val_accuracy',patience=3),\n            keras.callbacks.ModelCheckpoint(\"Model_Ethnicity.h5\",verbose=1,save_best_only=True)]","2f524f90":"hist_et = model_et.fit(et_train_ds,epochs=22,validation_data=et_val_ds,callbacks=my_calls_2)","81e6f16d":"model_et.evaluate(et_test_ds)","a7f65e98":"plt.figure(figsize=(15,6))\n\nplt.subplot(1,2,1)\nplt.plot(hist_et.epoch,hist_et.history['accuracy'],label = 'Training')\nplt.plot(hist_et.epoch,hist_et.history['val_accuracy'],label = 'validation')\n\nplt.title(\"Accuracy\")\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.plot(hist_et.epoch,hist_et.history['loss'],label = 'Training')\nplt.plot(hist_et.epoch,hist_et.history['val_loss'],label = 'validation')\n\nplt.title(\"Loss\")\nplt.legend()\nplt.show()","769a60f1":"pred_et = model_et.predict(et_test_ds)","1b17438e":"pred_et = [np.argmax(i) for i in pred_et]\npred_et[:5]","a83ae385":"pd.DataFrame(pred_et).value_counts()","6bb42100":"pd.DataFrame(y_test_et).value_counts()","cb6dff78":"print(classification_report(pred_et,y_test_et))","b8fd4d5c":"plt.figure(figsize=[12,7])\nsns.heatmap(confusion_matrix(pred_et,y_test_et),annot=True,fmt='d',cmap=\"Blues\");","16fe7905":"**Loss and Accuracy**","4592a683":"### Dataset for Gender Prediction","cbb26225":"### **Details**\n\n\n**ETHNICITIES = [ 0: \"White\", 1: \"Black\", 2: \"Asian\", 3: \"Indian\", 4: \"Hispanic\" ]**\n\n**GENDERS = [ 0: \"Male\", 1: \"Female\" ]**\n","7b09bd81":"**Test for age prediction**","b2564e3d":"**Test**","2dbcf36a":"# **Gender Prediction Model**","60bfdca5":"**compile the model**","a6fe0c32":"**Compile the model**","ca9dc956":"**Loss and MAE**","08390a14":"**Predictions**","aad01ccd":"**Not performing well at all, will get back to this**","81fb76b8":"### Generating Datsets for Age Prediction","47177e47":"## Model","0d538140":"**Train**","7fc060c5":"**Training the model for age.**","1b934835":"**Visualizing one batch.**","1d33c87d":"**Test**","93465574":"# **Ethnicity Prediction**","29970650":"**Predictions**","cae98b27":"**Image data Generator.**","97c84ab4":"**Defining callbacks.**","b7e25eab":"## Reading and fixing Dataset","4852623b":"**Loss and Accuracy**","34754efc":"**Callbacks**","9489c791":"**Train**","4e09d7ee":"**Callbacks**","4f649b6f":"### Model","9241be89":"**Verifying the Predictions**","341639d7":"## Data for ethnicity prediction","e4db1ec8":"# **Age, Gender and Race Prediction**","5ae89dc4":"**Plotting predicetd v\/s actual ages**","06de0e13":"**Data Generator**","96758f1a":"# **Age Prediction Model**","08008aed":"## Model"}}