{"cell_type":{"26a4d8d2":"code","e62e1e82":"code","a6126943":"code","ba74b69f":"code","35ddf63c":"code","8b935b09":"code","e6d1dff2":"code","e21354e1":"code","c8c482f5":"code","1d02176e":"code","84f79087":"code","e3f877b6":"code","21031bea":"code","ce9c2aa3":"code","7db03c75":"code","7a0778db":"code","30e41321":"code","d50793e4":"code","ecf89e3b":"code","826b47f6":"code","363db6f6":"code","c875c30a":"code","abd97d48":"code","91b46c61":"code","df71d952":"code","2a5ef582":"code","c541c870":"code","1067ca7f":"code","13c1c2f8":"code","7c41bc10":"code","67466bb2":"code","cdce543e":"code","b6304244":"markdown","a7e6bb43":"markdown","dd38b97c":"markdown","0d561059":"markdown","732dd99a":"markdown","b5827897":"markdown"},"source":{"26a4d8d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('ggplot')\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e62e1e82":"df=pd.read_csv('..\/input\/gemstone-price-prediction\/cubic_zirconia.csv')\ndf.shape","a6126943":"df.head()","ba74b69f":"df=df.iloc[:, 1:]","35ddf63c":"#show the information about dataset\ndf_dtype=df.dtypes\ndf_missing=df.isna().mean().round(4)*100\ndf_desc = df.describe(include='all')\ndtls_1=pd.DataFrame(df_missing, columns=['missing'])\ndtls_2=pd.DataFrame(df_dtype, columns=['dtype'])\ndtls_3=pd.DataFrame(df_desc)\ndtls_3=dtls_3.T\ndtls=pd.concat([dtls_1, dtls_2, dtls_3], axis=1)\ndtls.sort_values(by='missing', ascending=False)","8b935b09":"df['depth'].fillna(df['depth'].mean(), inplace=True)","e6d1dff2":"print(f'before removing duplicates{df.shape}')\ndf.drop_duplicates(inplace=True)\nprint(f'after removing duplicates{df.shape}')","e21354e1":"plt.rcParams['figure.figsize']=23,5\nplt.subplot(131)\nplt.pie(df['cut'].value_counts().values,\n        labels=df['cut'].value_counts().index,\n        startangle=90,\n        colors=['gold', 'lightgreen', 'red', 'lightblue', 'pink'],\n        explode=[0.05,0.05,0.05,0.05,0.2],\n        shadow=True, autopct='%1.2f%%')\nplt.subplot(132)\nsns.countplot(df['color'], palette='ocean', order=df['color'].value_counts().index)\n\nplt.subplot(133)\ndf[\"clarity\"].value_counts().plot.bar()\nplt.xlabel('clarity types')\nplt.ylabel('count')\n\n\nplt.suptitle('Distribution of Cut, Color and Clarity of Gems')\nplt.show()","c8c482f5":"plt.rcParams['figure.figsize']=20,5\nplt.subplot(131)\nsns.distplot(df['depth'], color='orange')\n\nplt.subplot(132)\nsns.distplot(df['carat'], color='red')\n\nplt.subplot(133)\nsns.distplot(df['price'], color='black')\n\nplt.suptitle('Distribution of depth, carat, and Price')\nplt.show()","1d02176e":"plt.rcParams['figure.figsize']=20,5\nplt.subplot(131)\nsns.boxplot(df['x'], color='orange')\n\nplt.subplot(132)\nsns.boxplot(df['y'], color='red')\n\nplt.subplot(133)\nsns.boxplot(df['z'], color='black')\n\nplt.suptitle('Distribution of Length of the cubic zirconia (x,y,z)')\nplt.show()","84f79087":"import plotly.express as px","e3f877b6":"sns.scatterplot(df['carat'], df['price'])\nplt.title('carat vs price')\nplt.show()","21031bea":"plt.rcParams['figure.figsize']=20,5\nplt.subplot(131)\nsns.scatterplot(df['x'], df['price'], color='orange')\n\nplt.subplot(132)\nsns.scatterplot(df['y'], df['price'], color='orange')\n\nplt.subplot(133)\nsns.scatterplot(df['z'], df['price'], color='orange')\n\nplt.suptitle('price and length of gem')\nplt.show()","ce9c2aa3":"#we have few zeros in gem size and length, either we can drop or replace with proper value.\n#I'll drop coz dropping 9 from 27000 will not gonna affect much\ndf=df[~((df['x']==0)|(df['y']==0)|(df['z']==0))]","7db03c75":"#We have outliers in y and z let's cap them with most frequent value\n\ndf['y'].values[df['y'].values>50]=df['y'].mode()[0]\ndf['z'].values[df['z'].values>30]=df['z'].mode()[0]","7a0778db":"plt.subplot(131)\nsns.boxplot(df['cut'], df['price'])\n\nplt.subplot(132)\nsns.boxplot(df['color'], df['price'])\n\nplt.subplot(133)\nsns.boxplot(df['clarity'], df['price'])","30e41321":"df[['price', 'cut']].groupby(['cut']).agg(['min', 'mean', 'max']).style.background_gradient(cmap='Wistia')","d50793e4":"df[['price', 'color']].groupby(['color']).agg(['min', 'mean', 'max']).style.background_gradient(cmap='Wistia')","ecf89e3b":"df[['price', 'clarity']].groupby(['clarity']).agg(['min', 'mean', 'max']).style.background_gradient(cmap='Wistia')","826b47f6":"df['cut']=df['cut'].replace(('Fair', 'Good', 'Very Good', 'Premium', 'Ideal'), (1,2,3,4,5))\n","363db6f6":"colors_dummies=pd.get_dummies(df['color'], drop_first=True)\nclarity_dummies=pd.get_dummies(df['clarity'], drop_first=True)","c875c30a":"dummies=pd.concat([colors_dummies, clarity_dummies], axis=1)","abd97d48":"df=pd.concat([df, dummies], axis=1)","91b46c61":"df.drop(['color', 'clarity'], axis=1, inplace=True)","df71d952":"sns.heatmap(df.corr(), annot=True)","2a5ef582":"df.drop(['x', 'y', 'z'], axis=1, inplace=True)","c541c870":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split","1067ca7f":"x=df.drop('price', axis=1)\ny=df['price']","13c1c2f8":"X_train, X_test, y_train, y_test=train_test_split(x, y, test_size=0.2, random_state=10)","7c41bc10":"model=RandomForestRegressor()","67466bb2":"model.fit(X_train, y_train)","cdce543e":"model.score(X_test, y_test)","b6304244":"### Missing value Treatment","a7e6bb43":"If carat increased price is also increases","dd38b97c":"### Univariate Analysis","0d561059":"### Bivariate Analysis","732dd99a":"### Data Preprocessing\n* as per description let's encode 'cut' ","b5827897":"### Let's drop duplicates"}}