{"cell_type":{"b9c5b631":"code","03e27dc4":"code","ba428197":"code","93c07f97":"code","20f495a7":"code","bebb001b":"code","de207d90":"code","b937abfe":"code","50276426":"code","d5e28a91":"code","3928a3d2":"code","3ed83e71":"code","aa636d15":"code","c53ebdbe":"code","125720f4":"code","4a6edf27":"code","5eb98abd":"code","515debaf":"code","dd472279":"code","da93ec34":"code","42a969d5":"code","ae7ebad0":"code","ae3d0f2b":"code","3831a3b1":"code","d4bf7f0a":"code","d2099801":"code","f6c35ea3":"code","f99d3445":"code","7be47343":"code","6baf7d9d":"code","7331f8a9":"code","ea62c648":"code","7c0fa291":"code","25524336":"code","e5f52b57":"code","19acda23":"code","11375dab":"code","02c403df":"code","7c343e14":"code","ff328680":"code","7abad98b":"code","6416af76":"code","04f4b53b":"code","d1aa5742":"markdown","c9364541":"markdown","170c30d4":"markdown","d4decdbb":"markdown","8645156e":"markdown","4280fd15":"markdown","dffd9d26":"markdown","c0918d88":"markdown","cc504625":"markdown","88426c49":"markdown","0c589108":"markdown","8a202d1e":"markdown"},"source":{"b9c5b631":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","03e27dc4":"#TFI (tab food investments) has provided a dataset with 137 restaurants in the training set, and a test set of 100000 restaurants..\ndata =  pd.read_csv('..\/input\/restaurant-revenue-prediction\/train.csv')\ntest_data = pd.read_csv('..\/input\/restaurant-revenue-prediction\/test.csv')","ba428197":"data.describe()","93c07f97":"data.head()","20f495a7":"data.columns","bebb001b":"data.dtypes","de207d90":"data.info()","b937abfe":"data['Type'].unique()","50276426":"data['City Group'].unique()","d5e28a91":"data['City'].unique()","3928a3d2":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(14,6))\nplt.subplot(1,2,1)\nsns.boxplot(data.revenue)\nplt.subplot(1,2,2)\nsns.distplot(data.revenue, bins=20, kde=False)\nplt.show()","3ed83e71":"#City distribution\ndata[\"City\"].value_counts().plot(kind='bar')","aa636d15":"data[\"Type\"].value_counts().plot(kind='bar')","c53ebdbe":"data[\"City Group\"].value_counts().plot(kind='bar')","125720f4":"# Crrelation between revenue and feature (p)s\ndef numFeaturePlot():\n    features=(data.loc[:,'P1':'P37']).columns.tolist()\n    plt.figure(figsize=(35,18))\n    j=1\n    while j<len(features):\n        col=features[j-1]\n        plt.subplot(6,6,j)\n        sorted_grp = data.groupby(col)[\"revenue\"].sum().sort_values(ascending=False).reset_index()\n        x_val = sorted_grp.index\n        y_val = sorted_grp['revenue'].values\n        plt.scatter(x_val, y_val)\n        plt.xticks(rotation=60)\n        plt.xlabel(col, fontsize=20)\n        plt.ylabel('Revenue', fontsize=20)\n        j+=1    \n    plt.tight_layout()\n    plt.show()\nnumFeaturePlot()","4a6edf27":"# This method helps in understanding the correlation between the different features and the Revenue.\ndef featureCatPlot(col):\n    \n    plt.figure(figsize=(15,6))\n    i=1\n    if not data[col].dtype.name=='int64' and not data[col].dtype.name=='float64':\n        plt.subplot(1,2,i)\n        sns.boxplot(x=col,y='revenue',data=data)\n        plt.xticks(rotation=60)\n        plt.ylabel('Revenue')\n        i+=1 \n        plt.subplot(1,2,i)\n        mean=data.groupby(col)['revenue'].mean()\n        level=mean.sort_values().index.tolist()\n        data[col]=data[col].astype('category')\n        data[col].cat.reorder_categories(level,inplace=True)\n        data[col].value_counts().plot()\n        plt.xticks(rotation=60)\n        plt.xlabel(col)\n        plt.ylabel('Counts')       \n        plt.show()","5eb98abd":"featureCatPlot('City Group')\n","515debaf":"# Splitting 01\/31\/2018 as 01, 31, 2018\ntrain_date=data['Open Date'].str.split('\/', n = 2, expand = True)\ndata['month']=train_date[0]\ndata['days']=train_date[1]\ndata['year']=train_date[2]\n\ntest_date=test_data['Open Date'].str.split('\/', n = 2, expand = True)\ntest_data['month']=test_date[0]\ntest_data['days']=test_date[1]\ntest_data['year']=test_date[2]\ndata['month']\n","dd472279":"featureCatPlot('month')","da93ec34":"data.sort_values('revenue', ascending=False)[:20]","42a969d5":"top_6= data.sort_values('revenue', ascending=False)[:20]\nplt.figure(figsize=(13,12))\nplt.title(\"The top 6 resturants\")\nsns.barplot(x=top_6['City'], y=top_6['revenue'])\n\n","ae7ebad0":"best_month= data.sort_values('revenue', ascending=False)[:20]\n","ae3d0f2b":"plt.figure(figsize=(13,12))\n\nsns.barplot(x=best_month['month'], y=best_month['revenue'])\nplt.xticks(rotation=60)","3831a3b1":"best_type= data.sort_values('revenue', ascending=False)\n\nplt.figure(figsize=(13,12))\n\nsns.barplot(x=best_type['Type'], y=best_type['revenue'])","d4bf7f0a":"data.isnull().sum()","d2099801":"data","f6c35ea3":"# Get list of categorical variables\n\nnew= data[data.columns[~data.columns.isin(['Open Date','days','year','month'])]]\n\nnumerical_features = new.select_dtypes([np.number]).columns.tolist()\ncategorical_features = new.select_dtypes(exclude = [np.number,np.datetime64]).columns.tolist()\ncategorical_features\n","f99d3445":"from sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split","7be47343":"#data = data.drop('Id', axis=1)\n#test_data = test_data.drop('Id', axis=1)\ny= data.revenue\n\nx_train = data[data.columns[~data.columns.isin(['Open Date','revenue'])]]  #train features to be fit in model\nx_test = test_data[test_data.columns[~test_data.columns.isin(['Open Date'])]]  #test features\n","6baf7d9d":"from sklearn.preprocessing import LabelEncoder\n# Processing the categorical columns to provide vector form of feature\nclass DataFrameProcess:\n    def __init__(self,df,col):\n        self.df =df\n        self.col=col\n    def dataEncoding(self):\n        if self.df[self.col].dtype.name == 'object' or self.df[self.col].dtype.name == 'category':\n            le = LabelEncoder()\n            self.df[self.col] = le.fit_transform(self.df[self.col])    \n\n\ndef data_transform(df):  \n    for col in df.columns:\n        data_prcs = DataFrameProcess(df,col)\n        data_prcs.dataEncoding()  \ndata_transform(x_train) \ndata_transform(x_test)","7331f8a9":"x_train.head(5)","ea62c648":"#X_train, X_valid, y_train, y_valid = train_test_split(x_train, y, train_size=0.8, test_size=0.2,\n #                                                               random_state=0)","7c0fa291":"from xgboost import XGBRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\n\ngbRegr = GradientBoostingRegressor(max_depth=3, random_state=42)\ngbRegr.fit(x_train, y)\nprediction_rr = gbRegr.predict(x_test)\n","25524336":"test_label=pd.read_csv('..\/input\/restaurant-revenue-prediction\/sampleSubmission.csv')  # test target\ntest_label.head(10)","e5f52b57":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\nlabel_list=test_label['Prediction'].tolist()","19acda23":"print('Root Mean squared error {}'.format(sqrt(mean_squared_error(label_list, prediction_rr))))\n","11375dab":"from sklearn import ensemble\n\nparams = {'n_estimators': 100, 'max_depth': 4, 'min_samples_split': 2,\n          'learning_rate': 0.05, 'loss': 'ls'}\nGBR = ensemble.GradientBoostingRegressor(**params)\n\nGBR.fit(x_train, y)\npreds_GBR = GBR.predict(x_test)\n\nGradientBoostingRegressor_RMSE= sqrt(mean_squared_error(label_list, preds_GBR))\n\nprint('Root Mean squared error {}'.format(GradientBoostingRegressor_RMSE))","02c403df":"parameters = [{'n_estimators': [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], \n                     'learning_rate': [0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, \n                                       0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0]\n                    }]\nfrom sklearn.model_selection import GridSearchCV\ngsearch = GridSearchCV(estimator=XGBRegressor(),\n                       param_grid = parameters, \n                       scoring='neg_mean_absolute_error',\n                       n_jobs=4,cv=3)\n\ngsearch.fit(x_train,y)\ngsearch.best_params_, gsearch.best_score_","7c343e14":"final_model = XGBRegressor(n_estimators=gsearch.best_params_.get('n_estimators'), \n                           learning_rate=gsearch.best_params_.get('learning_rate'), \n                           n_jobs=4)","ff328680":"final_model.fit(x_train, y)","7abad98b":"preds_test = final_model.predict(x_test)","6416af76":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nrf_model = RandomForestRegressor(random_state=1)\nrf_model.fit(x_train, y)\nrf_val_predictions = rf_model.predict(x_test)\nRMSE = sqrt(mean_squared_error(label_list,rf_val_predictions))\nprint(RMSE)\n\n","04f4b53b":"submission = pd.DataFrame({\n        \"Id\": test_data[\"Id\"],\n        \"Prediction\": rf_val_predictions\n    })\nsubmission.to_csv('submission.csv',header=True, index=False)\nprint('done')","d1aa5742":"### Splitting the opening date by month and year\n","c9364541":"As shown above the restauants have the most highest revenue in [10, 12 ,01]","170c30d4":"As shown above the food court restauants are the most popular and the highest revenue.","d4decdbb":"> # 1. Data loading and Exploration:","8645156e":"# 2. Data Visualization:","4280fd15":"There are 3 types of the restaurant. FC: Food Court, IL: Inline, DT: Drive Thru.","dffd9d26":"As shown above there is no missing values so there is no need to handle the missing value here!","c0918d88":"# 3. Data Preprocessing:\n    -Check out the missing values\n    -See the Categorical Values\n    -Splitting the data-set into Training and Test Set\n","cc504625":"From the above figure we can say that most of the restaurants locate in Istanbul.","88426c49":"There are 39 numerical features & 4 categorical features.","0c589108":"As shown above the revenue distrubited over the range (0.25-0.60)*10^7","8a202d1e":"# 4. Model Selection:\n"}}