{"cell_type":{"d0bb9c36":"code","742334e4":"code","f1755aa0":"code","ce603f5a":"code","b7093bb1":"code","2c46285b":"code","66625e21":"code","8ce27109":"code","53fdfdb8":"code","5314d274":"code","ad63f56f":"code","feabdebf":"code","8a4781ad":"code","09a3353a":"code","b0916def":"code","78b5e7a1":"code","3328bb29":"code","a382c574":"code","e12ee2d6":"code","31cbc640":"code","af3bfc16":"code","ad952966":"code","6da86da4":"code","79e792d2":"code","790856c6":"code","6e73a4d3":"code","587e456d":"code","1aed5c64":"code","2d1ba5b8":"code","28186b33":"code","614770e7":"code","72d6f760":"code","71b2de69":"code","346ec1d8":"code","e5bb1da7":"code","49acc5b8":"code","80893893":"code","ac77501e":"code","bf9a87d3":"code","1ef958f5":"code","4c8315dd":"code","198771d6":"code","da037d1e":"code","b786fd8a":"code","967d8dfd":"code","b7d8e70b":"code","f99772e7":"code","523866d6":"code","5c59c0f3":"code","ba0d2978":"code","cb91ab96":"code","54ea7ecb":"code","0a5b1fe9":"code","19f1b3f0":"code","b8f7a285":"code","036b56ac":"code","f4687139":"code","d15175b4":"code","ce58b9af":"code","fce89213":"code","7d63a3ce":"code","9815071c":"markdown","223afbdf":"markdown","2f19279c":"markdown","7ea058af":"markdown","707e72a8":"markdown","21eab2e8":"markdown","d01747e6":"markdown","b26b6dca":"markdown","4617d646":"markdown","bf8b1fc0":"markdown","27a90049":"markdown","ddb72fff":"markdown","4b2c67ba":"markdown","93cd5044":"markdown","fd90e805":"markdown","94bee775":"markdown","fbf9b10f":"markdown","6d7670f2":"markdown","d74b90de":"markdown","ea929616":"markdown","bb9c956f":"markdown","b12aee40":"markdown","45d18257":"markdown","9d6bfae2":"markdown","c5b56d24":"markdown","0509c89a":"markdown","34429d03":"markdown","7ea2fad1":"markdown","8b4f82ff":"markdown","e907b501":"markdown","eb19a6fc":"markdown","87a5cc1a":"markdown","1a4f9986":"markdown","caaea6a5":"markdown","80e0ff2e":"markdown","49682449":"markdown","aad62398":"markdown","e06b4910":"markdown","6556251f":"markdown","a878a926":"markdown","06877d60":"markdown","1e5b140d":"markdown","7e7c0506":"markdown","60c28624":"markdown","96e98e02":"markdown","309e5212":"markdown","ba664bcb":"markdown","a5e37351":"markdown","f18ab767":"markdown","f4364353":"markdown","16011681":"markdown","a21a6e13":"markdown","043b18e8":"markdown","1ba18377":"markdown","4207a792":"markdown","b7147b27":"markdown","0a2cb5e6":"markdown"},"source":{"d0bb9c36":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set()","742334e4":"test_path = \"\/kaggle\/input\/titanic\/test.csv\"\ntrain_path = \"\/kaggle\/input\/titanic\/train.csv\"\n\ntitanic_test = pd.read_csv(test_path)\ntitanic_train = pd.read_csv(train_path)","f1755aa0":"titanic_train.head()","ce603f5a":"titanic_train.describe().T","b7093bb1":"titanic_train.info()","2c46285b":"categorical = []\nnumerical = []\n\nfor column in titanic_train.columns:\n  if titanic_train[column].dtype == \"object\":\n    categorical.append(column)\n  else:\n    numerical.append(column)\n\nprint(\"Categorical Variables: \", *categorical)\nprint(\"Numerical Variables: \" , *numerical)","66625e21":"values = titanic_train[\"Survived\"].value_counts()\n\n# plotting\nvalues.plot.pie(autopct='%1.1f%%',shadow=True,figsize=(10,6))\nplt.show()\n\n#printing the values\nprint(\"Number of Survived\")\nprint(values)","8ce27109":"sns.countplot(x = \"Sex\", data = titanic_train)\nplt.title(\"Number of Sex (fig.1)\")\nplt.show()\n\nprint(\"Proportion of Sex\")\nprint(titanic_train.Sex.value_counts(normalize=True)*100)","53fdfdb8":"sns.catplot(x = \"Sex\", y=\"Survived\",\n            data=titanic_train, kind = \"bar\", height = 5)\nplt.title(\"Survived Probability (fig.2)\")\nplt.show()\n\nsns.countplot(x = \"Sex\", hue = \"Survived\", data = titanic_train)\nplt.title(\"Number of Survived (fig.3)\")\nplt.show()","5314d274":"sns.countplot(x = \"Pclass\", data = titanic_train)\nplt.title(\"Number of Pclass (Fig.1)\")\nplt.show()\n\n\ntitanic_train.Pclass.value_counts(normalize = True).plot.pie(autopct='%1.1f%%',shadow=True,figsize=(10,6))\nplt.title(\"Proportions of Pclass (Fig.2)\")\nplt.show()","ad63f56f":"sns.countplot(x = \"Pclass\", hue = \"Survived\", data = titanic_train)\nplt.title(\"Number of Survived for Each Class (Fig.2)\")\nplt.show()\nsns.catplot(x= \"Pclass\", y=\"Survived\", data = titanic_train,\n            kind = \"bar\", height = 5)\nplt.title(\"Survived Ratio According to Pclass (Fig.3)\")\nplt.show()","feabdebf":"sns.distplot(titanic_train[\"Age\"], bins = 20, kde = True)\nplt.title(\"Age Distribution (Fig.1)\")\nplt.show()","8a4781ad":"# Box Plot\nsns.boxplot(x =\"Survived\",y=\"Age\", data = titanic_train)\nplt.title(\"Dist. of Age According to Survived (Fig.2)\")\nplt.show()\n\n# KDE plot\nax = sns.kdeplot(titanic_train.loc[(titanic_train.Survived == 0), \"Age\"],\n                 color = \"r\", shade = True,label = \"Not Survived\")\n\nax = sns.kdeplot(titanic_train.loc[(titanic_train.Survived == 1), \"Age\"],\n                 color = \"b\", shade = True, label = \"Survived\")\nax.legend(loc=\"upper right\")\nax.set_xlabel(\"Number of Ages\")\nax.set_ylabel(\"Frequency\")\nax.set_title(\"Age - Survived (Fig.3)\")\nplt.show()\n\nprint(\"-- Mean of Age the Survived --\")\nprint(titanic_train.groupby(\"Survived\")[[\"Age\"]].mean())","09a3353a":"print(titanic_train.Cabin.unique())","b0916def":"def extract_first(x):\n  if str(x)[0:3] != \"nan\":\n    return str(x)[0]\n\n# extracting first letter of cabin values except nan values\ntitanic_train[\"Cabin_first\"] = titanic_train.Cabin.apply(lambda x: extract_first(x))","78b5e7a1":"sns.countplot(x = \"Cabin_first\", data=titanic_train,\n              order = titanic_train.Cabin_first.value_counts().index)\nplt.title(\"Number of People in Cabins (Fig.1)\")\nplt.show()\n","3328bb29":"sns.catplot(x=\"Cabin_first\", y=\"Survived\",\n            kind = \"bar\", height = 5, data = titanic_train)\nplt.title(\"Proportions of Survived (Fig.2)\")\nplt.show()\n\n\nprint(\"Mean of Age that each cabin part\")\nprint(titanic_train.groupby(titanic_train[\"Cabin_first\"])[[\"Age\"]].mean().sort_values(by =\"Age\",ascending=False))\n\n\nprint(\"Mean of Survival Rate that each cabin part\")\nprint(titanic_train.groupby(titanic_train[\"Cabin_first\"])[[\"Survived\"]].mean().sort_values(by = \"Survived\",ascending=False))","a382c574":"# but I will drop now because I will handle with that in F.Engineering\ntitanic_train = titanic_train.drop(\"Cabin_first\", axis = 1)","e12ee2d6":"sns.distplot(titanic_train[\"Fare\"], kde = True)\nplt.title(\"Distribution of Fare\")\nplt.show()","31cbc640":"sns.boxplot(y = \"Fare\", x = \"Survived\", data = titanic_train)\nplt.show()\n\n# cut the fare into 4 parts\nprint(pd.cut(titanic_train['Fare'], 4).value_counts())\nprint(\"-\"*20)\nprint(\"Fare Mean According to Each Cabin\")\ntitanic_train[\"Fare\"].groupby(titanic_train[\"Cabin\"]).mean().sort_values(ascending = False)","af3bfc16":"titanic_train[\"Survived\"].groupby(pd.cut(titanic_train['Fare'], 4)).mean()","ad952966":"print(titanic_train[\"Ticket\"].unique())","6da86da4":"# Get first letters of the tickets\ntitanic_train[\"Ticket_first\"] = titanic_train[\"Ticket\"].apply(lambda x: str(x)[0])\n\n\nsns.catplot(x=\"Ticket_first\", y=\"Survived\", \n            height=5, kind=\"bar\", data = titanic_train)\nplt.title(\"Survival Rate\")\nplt.show()\n\nprint(\"Surviving rates of first letters\")\nprint(titanic_train.groupby(\"Ticket_first\")[\"Survived\"].mean().sort_values(ascending=False))","79e792d2":"# but I will drop now because I will handle with that in F.Engineering\ntitanic_train = titanic_train.drop(\"Ticket_first\", axis = 1)","790856c6":"titanic_train.Embarked.value_counts().plot.pie(autopct='%1.1f%%',shadow=True,figsize=(10,6))\nplt.title(\"Embarked Ports (Fig.1)\")\nplt.show()\n\nprint(\"-- Mean of Age According to Each Embarked Points --\")\nprint(titanic_train.groupby(\"Embarked\")[[\"Age\"]].mean())","6e73a4d3":"sns.catplot(x = \"Embarked\",y=\"Survived\",\n            data=titanic_train, kind=\"bar\", height = 5)\nplt.title(\"Survived Rate (Fig.2)\")\nplt.show()","587e456d":"sns.countplot(x = \"SibSp\", data = titanic_train)\nplt.title(\"Number of Sibling or Spouse\")\nplt.show()\n","1aed5c64":"g = sns.catplot(x = \"SibSp\", y = \"Survived\",\n                data = titanic_train, kind = \"bar\", height = 5)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","2d1ba5b8":"sns.countplot(x = \"Parch\", data = titanic_train)\nplt.title(\"Number of Parch\")\nplt.show()","28186b33":"g = sns.catplot(x = \"Parch\", y = \"Survived\", \n                   kind = \"bar\", data = titanic_train, height = 5)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","614770e7":"titanic_train.Name.value_counts()","72d6f760":"# Get titles\ntitanic_train[\"Title\"] = titanic_train['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\n\n# Print title counts\nprint(titanic_train[\"Title\"].value_counts())","71b2de69":"g = sns.catplot(x = \"Title\", y = \"Survived\",kind = \"bar\", \n                data = titanic_train, height = 5)\ng.set_ylabels(\"Survived Probability\")\nplt.xticks(rotation=90) \nplt.show()\n\nprint(titanic_train[\"Survived\"].groupby(titanic_train[\"Title\"]).mean().sort_values(ascending=False))","346ec1d8":"# but I will drop now because I will handle with that in F.Engineering\ntitanic_train = titanic_train.drop(\"Title\", axis = 1)","e5bb1da7":"# Before starting imputation I will take a copy from my original dataset\ndata1 = titanic_train.copy()\ndata2 = titanic_test.copy()","49acc5b8":"def missing_val_table(data):\n    \"\"\"\n    Takes the dataframe as Input and returns the missing values and\n    percentages with respect to dataframe length.\n    \"\"\"\n    missing_val = data.isnull().sum()\n    missing_val_perc = 100 * data.isnull().sum() \/ len(data)\n    table = pd.concat([missing_val, missing_val_perc], axis=1)\n    table = table.rename(columns = {0:\"Missing Values\",\n                                    1:\"% of Total Values\"})\n    table = table.sort_values(by=\"% of Total Values\",\n                              ascending=False)\n    return table\n\nmissing_val_table(data1)","80893893":"# imputing Age\ndata1[\"Age\"] = data1[\"Age\"].fillna(data1[\"Age\"].mean())\ndata2[\"Age\"] = data2[\"Age\"].fillna(data2[\"Age\"].mean())\n\n# imputing Embarked\ndata1[\"Embarked\"] = data1[\"Embarked\"].fillna(data1[\"Embarked\"].mode()[0])\ndata2[\"Embarked\"] = data2[\"Embarked\"].fillna(data2[\"Embarked\"].mode()[0])","ac77501e":"def assign_label_cabin(cabin):\n    if cabin in [\"D\", \"E\", \"B\", \"F\", \"C\"]:\n        return \"Cabin_high\"\n    elif cabin in [\"G\", \"A\"]:\n        return \"Cabin_middle\"\n    else:\n        return \"Cabin_low\"\n\n# extract first letter\ndata1[\"Cabin\"] = data1[\"Cabin\"].apply(lambda x: str(x)[0])\ndata2[\"Cabin\"] = data2[\"Cabin\"].apply(lambda x: str(x)[0])\n\n# apply the function\ndata1[\"Cabin_first\"] = data1[\"Cabin\"].apply(lambda x: assign_label_cabin(x))\ndata2[\"Cabin_first\"] = data2[\"Cabin\"].apply(lambda x: assign_label_cabin(x))\n\n#drop the cabin feature\ndata1 = data1.drop(\"Cabin\", axis = 1)\ndata2 = data2.drop(\"Cabin\", axis = 1)","bf9a87d3":"def fare_bound(x):\n  x = float(x)\n  if (x > 384.247) & (x <= 512.329):\n    return \"Very High Fare\"\n  elif (x > 256.165) & (x <= 384.247):\n    return \"High Fare\"\n  elif (x > 128.082) & (x <= 256.165):\n    return \"Normal Fare\"\n  else:\n    return \"Low Fare\"\n\n# apply the function\ndata1[\"Fare_cat\"] = data1[\"Fare\"].apply(lambda x: fare_bound(x))\ndata2[\"Fare_cat\"] = data2[\"Fare\"].apply(lambda x: fare_bound(x))\n\n#drop the fare feature\ndata1 = data1.drop(\"Fare\", axis = 1)\ndata2 = data2.drop(\"Fare\", axis = 1)","1ef958f5":"def label_ticket(x):\n    if x in [\"F\", \"1\", \"P\", \"9\"]:\n        return \"Ticket_high\"\n    elif x in [\"S\", \"C\", \"2\"]:\n        return \"Ticket_middle\"\n    else:\n        return \"Ticket_low\"\n\n# extract first letter\ndata1[\"Ticket\"] = data1[\"Ticket\"].apply(lambda x: str(x)[0])\ndata2[\"Ticket\"] = data2[\"Ticket\"].apply(lambda x: str(x)[0])\n\n# apply the function\ndata1[\"Ticket_cat\"] = data1[\"Ticket\"].apply(lambda x: label_ticket(x))\ndata2[\"Ticket_cat\"] = data2[\"Ticket\"].apply(lambda x: label_ticket(x))\n\n\n#drop the ticket feature\ndata1 = data1.drop(\"Ticket\", axis = 1)\ndata2 = data2.drop(\"Ticket\", axis = 1)","4c8315dd":"def assign_label_title(title):\n    if title in [\"the Countess\", \"Mlle\", \"Lady\", \"Ms\", \"Sir\", \"Mme\", \"Mrs\", \"Miss\", \"Master\"]:\n        return \"Title_high\"\n    elif title in [\"Major\", \"Col\", \"Dr\"]:\n        return \"Title_middle\"\n    else:\n        return \"Title_low\"\n\n# extract title from the name\ndata1[\"Title\"] = data1['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\ndata2[\"Title\"] = data2['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\n\n#apply the function\ndata1[\"Title\"] = data1[\"Title\"].apply(lambda x: assign_label_title(x))\ndata2[\"Title\"] = data2[\"Title\"].apply(lambda x: assign_label_title(x))\n\n#drop the name\ndata1 = data1.drop(\"Name\", axis = 1)\ndata2 = data2.drop(\"Name\", axis = 1)","198771d6":"data1[\"family_size\"] = data1[\"SibSp\"] + data1[\"Parch\"]\ndata2[\"family_size\"] = data2[\"SibSp\"] + data2[\"Parch\"]","da037d1e":"def family_label(family_size):\n    if family_size == 0:\n        return \"Alone\"\n    elif family_size <=3:\n        return \"Small_family\"\n    else:\n        return \"Big_family\"\n\n#apply the function\ndata1[\"family_size\"] = data1[\"family_size\"].apply(lambda x: family_label(x))\ndata2[\"family_size\"] = data2[\"family_size\"].apply(lambda x: family_label(x))\n\n#drop the SibSp and Parch\ndata1 = data1.drop(\"SibSp\", axis=1)\ndata1 = data1.drop(\"Parch\", axis =1)\n\ndata2 = data2.drop(\"Parch\", axis =1)\ndata2 = data2.drop(\"SibSp\", axis =1)","b786fd8a":"data1 = data1.drop(\"PassengerId\", axis = 1)\ndata2 = data2.drop(\"PassengerId\", axis = 1)","967d8dfd":"display(data1.head())\ndisplay(data2.head())","b7d8e70b":"data1_new = data1.copy()\ndata2_new = data2.copy()","f99772e7":"from sklearn.preprocessing import LabelEncoder\n\nlabelEncoder = LabelEncoder()\n\ndata1_new[\"Sex\"] = labelEncoder.fit_transform(data1[[\"Sex\"]].values.ravel())\ndata2_new[\"Sex\"] = labelEncoder.fit_transform(data2_new[[\"Sex\"]].values.ravel())","523866d6":"data1_new = pd.get_dummies(columns=[\"Pclass\", \"Embarked\", \"Ticket_cat\", \"Fare_cat\",\"Cabin_first\",\"Title\", \"family_size\"], data=data1_new, drop_first=True)\ndata2_new = pd.get_dummies(columns=[\"Pclass\", \"Embarked\", \"Ticket_cat\", \"Fare_cat\", \"Cabin_first\",\"Title\", \"family_size\"], data=data2_new, drop_first=True)","5c59c0f3":"display(data1_new.head())","ba0d2978":"display(data2_new.head())","cb91ab96":"from sklearn.model_selection import train_test_split,cross_val_score,RandomizedSearchCV\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.ensemble import RandomForestClassifier","54ea7ecb":"# I will make another copy\ntrain = data1_new.copy()\ntest = data2_new.copy() \n\nX = train.drop(\"Survived\", axis = 1)\ny = train[\"Survived\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state = 42, stratify=y)","0a5b1fe9":"rf = RandomForestClassifier()\n\nparams = {'n_estimators': [100,300,500,700,1000],\n          'max_depth': [3,5,7],\n          'criterion':['entropy', 'gini'],\n          'min_samples_leaf' : [1, 2, 3, 4, 5],\n          'max_features':['auto'],\n          'min_samples_split': [3, 5, 10],\n          'max_leaf_nodes':[2,3,5,7],\n          }\n\nrf_cv = RandomizedSearchCV(rf, params, cv = 10, n_jobs=-1, verbose=2).fit(X_train, y_train)","19f1b3f0":"rf_cv.best_params_\nbest_rf_model = rf_cv.best_estimator_\n\nprint(best_rf_model)\nprint(rf_cv.best_score_)","b8f7a285":"rf_pred = rf_cv.predict(X_test)\n\n# Print the accuracy with accuracy_score function\nprint(\"Accuracy: \", accuracy_score(y_test, rf_pred))\n\n# Display the confusion matrix\nprint(\"\\nConfusion Matrix\\n\")\nprint(confusion_matrix(y_test, rf_pred))","036b56ac":"import pickle\n\npickle.dump(best_rf_model, open(\"titanic_model.pkl\", 'wb'))","f4687139":"Importance = pd.DataFrame({\"Importance\": best_rf_model.feature_importances_*100},\n                         index = X_train.columns)\nImportance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = True).plot(kind =\"barh\", color = \"r\")\n\nplt.xlabel(\"Feature Importance\")\nplt.show()","d15175b4":"last_model =RandomForestClassifier(max_depth=3, max_leaf_nodes=7, min_samples_leaf=3,\n                       min_samples_split=10, n_estimators=500).fit(X,y)","ce58b9af":"IDs = pd.read_csv(test_path)[[\"PassengerId\"]].values\n\npredictions = last_model.predict(test.values)\n\nprint(predictions)","fce89213":"result_df = {'PassengerId': IDs.ravel(), 'Survived':predictions}\nsubmission = pd.DataFrame(result_df)\n\ndisplay(submission.head())\n","7d63a3ce":"# Save the file\nsubmission.to_csv(\"titanic_sub.csv\", index=False)","9815071c":"<a id=\"6\"><\/a> <br>\n# **Submission**","223afbdf":"## **Fare**\nI will group Fare values like as follows:\n  - **Very High Fare**: 384.247 - 512.329\n  - **High Fare**: 256.165 - 384.247\n  - **Normal Fare**: 128.082 - 256.165\n  - **Low Fare**: -0.512, 128.082","2f19279c":"I will import necessary libraries","7ea058af":"## **Cabin**\nI will prepare first letter of Cabin feature as follows in Feature Engineering:\n\n- **High Survival Rate**: D,E,B,F,C\n- **Normal Survival Rate**: G, A\n- **Lower**: T","707e72a8":"## **Sex**","21eab2e8":"## **Variables**","d01747e6":"## **Pclass**","b26b6dca":"- **Survived** is our target variable. As the name suggests, this variable gives us information about the passengers who survived the Titanic crash.\n\n  - Survived = 1\n  - Not Survived = 0\n","4617d646":"<a id=\"2\"><\/a> <br>\n# **Missing Value Analysis**","bf8b1fc0":"**Lets drop also PassengerId**","27a90049":"## **Parch**\nNumber of Parent or Child in the Titanic","ddb72fff":"In this part I'm going to follow:\n- LabelEncoding: Sex\n- OneHotEncoding: Rest","4b2c67ba":"- I will impute as follows:\n  - Mean: Age\n  - Mode: Cabin and Embarked","93cd5044":"## **SibSp & Parch**","fd90e805":"- Let's take a look at the number of men and women on board. \n- Next, let's examine the relationship between gender and target variable.","94bee775":"## **Name**\nI will group title by their surviving rates like following\n\n  - **Higher** = the Countess, Mlle, Lady, Ms , Sir, Mme, Mrs, Miss, Master\n  - **Neutral** = Major, Col, Dr\n  - **Lower** = Mr, Rev, Jonkheer, Don, Capt","fbf9b10f":"## **Age**\nI don't think much of an explanation is needed, as the name suggests, it gives information about the ages of the passengers on board.","6d7670f2":"### **Embarked-Survived**","d74b90de":"**Let's look at the final version of our data set at the end of Feature Engineering**","ea929616":"## **Ticket**\nPassengers' ticket codes","bb9c956f":"- We see that the most passengers board the Titanic at **Southampton** from Figure 1.\n- But we see that the people most likely to survived are the passengers on **Cherbourg** from Figure 2","b12aee40":"- When we look at the Figure 1, we see that 64 percent of the passengers on the ship are men.\n- But only an average of 20 percent of the majority men survived according to Figure 2\n- As far as we understand from all these graphs, we see that the rate of survival of women from this accident is higher.","45d18257":"### **Cabin-Survived**","9d6bfae2":"## **Cabin**","c5b56d24":"<a id=\"5\"><\/a> <br>\n# **Modelling**","0509c89a":"**Pclass** shows us in which part of the ship the passengers travel. You can think of part number 1 as *First Class*. This variable actually gives us information about the **economic and social** status of the passengers.","34429d03":"# **Titanic:Machine Learning Disaster**","7ea2fad1":"I will group title by their surviving rates like following\n\n  - **Higher** = the Countess, Mlle, Lady, Ms , Sir, Mme, Mrs, Miss, Master\n  - **Neutral** = Major, Col, Dr\n  - **Lower** = Mr, Rev, Jonkheer, Don, Capt","8b4f82ff":"**Final look our data**","e907b501":"### **Parch-Survived**","eb19a6fc":"### **Random Forest**","87a5cc1a":"- I will group Fare values like as follows in F.Engineering :\n  - **Very High Fare**: 384.247 - 512.329\n  - **High Fare**: 256.165 - 384.247\n  - **Normal Fare**: 128.082 - 256.165\n  - **Low Fare**: -0.512, 128.082","1a4f9986":"### **SibSp-Survived**","caaea6a5":"## **Embarked**\nThe Embarked feature shows us at which port the passengers board the Titanic.\n  - S: Southampton\n  - C: Cherbourg\n  - Q: Queenstown\n","80e0ff2e":"- As we can see, there is a ratio of 60 to 40 percent.","49682449":"<a id=\"1\"><\/a> <br>\n# **EDA**","aad62398":"## **Ticket**\nI am going to group them like as follows:\n\n  - **Ticket High** = F, 1, P , 9\n  - **Ticket Middle** = S, C, 2\n  - **Ticket Low** = else","e06b4910":"## **Fare**\nIt tells us about the prices of passengers' tickets","6556251f":"- Having a lot of **SibSp** have less chance to survive.\n- If **SibSp** value is equal 0 or 1 or 2, passenger has more chance to survive\n- We can consider a new feature describing these categories.","a878a926":"eksik de\u011fi\u015fkenler tipler say\u0131lar hakk\u0131nda bilgi ekle","06877d60":"## **Survived**","1e5b140d":"Hello everyone,<br>\nThis is my first detailed contest notebook. A month ago I did the first submission just for fun and my ranking was around 80 percent. After that, I wanted to deal with it again and I was able to reduce it to **%8**.\n\nNotebook content is as follows:\n\n - [Exploratory Data Analysis](#1)\n - [Missing Value Analysis](#2)\n - [Feature Engineering](#3)\n - [Label Encoding](#4)\n - [Modelling](#5)\n - [Submission](#6)","7e7c0506":"#### **Age-Survived**\n","60c28624":"### **Fare-Survived**","96e98e02":"## **Name**\nPassengers' names","309e5212":"We have 12 variables, some of them categorical some of them numerical.<br>\n\n**Categorical**:\n  - Name\n  - Sex\n  - Ticket\n  - Cabin\n  - Embarked\n\n**Numerical**:\n  - PassengerId\n  - Survived (target)\n  - Pclass\n  - Age\n  - SibSp\n  - Parch\n  - Fare ","ba664bcb":"- As we can see from the graphics, we can say that there is a nearly young population on the Titanic.\n- We can say that the average age of death(30.6) is higher than the survivors(28.3).","a5e37351":"## **SibSp**\nNumber of Sibling or Spouse in the Titanic","f18ab767":"Let's save the model","f4364353":"### **Name-Survived**","16011681":"#### **Pclass-Survived**","a21a6e13":"#### **Sex-Survived**","043b18e8":"<a id=\"4\"><\/a> <br>\n# **Label Encoding**","1ba18377":"- **SibSp** and **Parch** can be used for new feature extraction with th = 3\n- Small familes have more chance to survive.\n- There is a std in survival of passenger with Parch = 3","4207a792":"- We can see that the number of First Class passengers on board is the highest from Fig1 and Fig2.\n- And when we looked at the recovery rates, we found that likewise, those traveling in First Class were higher. The lowest rate is in 3rd class passengers.\n- As far as I remember from the movie, 3rd class passengers were traveling in the lowest part of the ship. This is probably the reason for such a high death rate.","b7147b27":"- Most passengers are traveling in **Cabin C**\n- Mean of Age according to each cabin like following:\n  - T : 45.0\n  - A : 44.1\n  - D : 39.7\n  - C : 38.3\n  - E : 38.1\n  - B : 36.4\n  - F : 21.3\n  - G : 12.0\n\n- I will prepare Cabin_first feature as follows in Feature Engineering:\n  - **High Survival Rate**: D,E,B,F,C\n  - **Normal Survival Rate**: G, A\n  - **Lower**: T\n","0a2cb5e6":"<a id=\"3\"><\/a> <br>\n# **Feature Engineering**"}}