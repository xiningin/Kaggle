{"cell_type":{"997454b6":"code","ead17407":"code","ad2735b3":"code","b9dc2bff":"code","02324441":"code","bef09f37":"code","3403470a":"code","b904e8cb":"code","e9c81ae0":"code","ce43787f":"code","759ac583":"code","a9fcdb92":"code","183015d2":"code","d1e6922c":"code","a025e3ea":"code","add1fe25":"code","be56e6a5":"code","1ce37c14":"code","09a591c5":"code","49118905":"markdown","157eb117":"markdown","c3f619a0":"markdown","514d280f":"markdown","16f49cc0":"markdown","232baef8":"markdown","ee8027db":"markdown","33a2b8ab":"markdown","916389a0":"markdown","47584429":"markdown","6483c495":"markdown","fd19b29f":"markdown","b42c8553":"markdown","3d863d11":"markdown","6e44fa3c":"markdown","f0ca6aec":"markdown","0915d387":"markdown"},"source":{"997454b6":"# modules we'll use\nimport pandas as pd\nimport numpy as np\n\n# read in all our data\nnfl_data = pd.read_csv(\"..\/input\/nflplaybyplay2009to2016\/NFL Play by Play 2009-2017 (v4).csv\", low_memory=False)\nsf_permits = pd.read_csv(\"..\/input\/building-permit-applications-data\/Building_Permits.csv\", low_memory=False)\n\n# set seed for reproducibility\nnp.random.seed(0) ","ead17407":"# look at a few rows of the nfl_data file. I can see a handful of missing data already!\nnfl_data.sample(5)","ad2735b3":"# your turn! Look at a couple of rows from the sf_permits dataset. Do you notice any missing data?\n\n# your code goes here :)\nsf_permits.head()","b9dc2bff":"# get the number of missing data points per column\nmissing_values_count = nfl_data.isnull().sum()\n\n# look at the # of missing points in the first ten columns\nmissing_values_count[0:10]","02324441":"# how many total missing values do we have?\ntotal_cells = np.product(nfl_data.shape)\ntotal_missing = missing_values_count.sum()\n\n# percent of data that is missing\n(total_missing\/total_cells) * 100","bef09f37":"# your turn! Find out what percent of the sf_permits dataset is missing\ntotal_cell_sf =np.product(sf_permits.shape)\nmissing_values_sf = sf_permits.isnull().sum()\ntotal_missing = missing_values_sf.sum()\n(total_missing \/total_cell_sf)*100","3403470a":"# look at the # of missing points in the first ten columns\nmissing_values_count[0:10]","b904e8cb":"missing_values_sf[:]","e9c81ae0":"# remove all the rows that contain a missing value\nnfl_data.dropna()","ce43787f":"# remove all columns with at least one missing value\ncolumns_with_na_dropped = nfl_data.dropna(axis=1)\ncolumns_with_na_dropped.head()","759ac583":"# just how much data did we lose?\nprint(\"Columns in original dataset: %d \\n\" % nfl_data.shape[1])\nprint(\"Columns with na's dropped: %d\" % columns_with_na_dropped.shape[1])","a9fcdb92":"# Your turn! Try removing all the rows from the sf_permits dataset that contain missing values. How many are left?\nsf_permits.dropna()","183015d2":"# Now try removing all the columns with empty values. Now how much of your data is left?\ncolumns_with_na_dropped_sf = sf_permits.dropna(axis=1)\ncolumns_with_na_dropped_sf","d1e6922c":"# just how much data did we lose?\nprint(\"Columns in original dataset: %d \\n\" % sf_permits.shape[1])\nprint(\"Columns with na's dropped: %d\" % columns_with_na_dropped_sf.shape[1])","a025e3ea":"# get a small subset of the NFL dataset\nsubset_nfl_data = nfl_data.loc[:, 'EPA':'Season'].head()\nsubset_nfl_data","add1fe25":"# replace all NA's with 0\nsubset_nfl_data.fillna(0)","be56e6a5":"# replace all NA's the value that comes directly after it in the same column, \n# then replace all the reamining na's with 0\nsubset_nfl_data.fillna(method = 'bfill', axis=0).fillna(0)","1ce37c14":"# Your turn! Try replacing all the NaN's in the sf_permits data with the one that\n# comes directly after it and then replacing any remaining NaN's with 0\nsf_permits.fillna(0)","09a591c5":"sf_permits.fillna(method = \"bfill\", axis =  0 ).fillna(0)","49118905":"That seems like a lot! It might be helpful to see what percentage of the values in our dataset were missing to give us a better sense of the scale of this problem:","157eb117":"I could also be a bit more savvy and replace missing values with whatever value comes directly after it in the same column. (This makes a lot of sense for datasets where the observations have some sort of logical order to them.)","c3f619a0":"### All days of the challange:\n\n* [Day 1: Handling missing values](https:\/\/www.kaggle.com\/rtatman\/data-cleaning-challenge-handling-missing-values)\n* [Day 2: Scaling and normalization](https:\/\/www.kaggle.com\/rtatman\/data-cleaning-challenge-scale-and-normalize-data)\n* [Day 3: Parsing dates](https:\/\/www.kaggle.com\/rtatman\/data-cleaning-challenge-parsing-dates\/)\n* [Day 4: Character encodings](https:\/\/www.kaggle.com\/rtatman\/data-cleaning-challenge-character-encodings\/)\n* [Day 5: Inconsistent Data Entry](https:\/\/www.kaggle.com\/rtatman\/data-cleaning-challenge-inconsistent-data-entry\/)\n___\nWelcome to day 1 of the 5-Day Data Challenge! Today, we're going to be looking at how to deal with missing values. To get started, click the blue \"Fork Notebook\" button in the upper, right hand corner. This will create a private copy of this notebook that you can edit and play with. Once you're finished with the exercises, you can choose to make your notebook public to share with others. :)\n\n> **Your turn!** As we work through this notebook, you'll see some notebook cells (a block of either code or text) that has \"Your Turn!\" written in it. These are exercises for you to do to help cement your understanding of the concepts we're talking about. Once you've written the code to answer a specific question, you can run the code by clicking inside the cell (box with code in it) with the code you want to run and then hit CTRL + ENTER (CMD + ENTER on a Mac). You can also click in a cell and then click on the right \"play\" arrow to the left of the code. If you want to run all the code in your notebook, you can use the double, \"fast forward\" arrows at the bottom of the notebook editor.\n\nHere's what we're going to do today:\n\n* [Take a first look at the data](#Take-a-first-look-at-the-data)\n* [See how many missing data points we have](#See-how-many-missing-data-points-we-have)\n* [Figure out why the data is missing](#Figure-out-why-the-data-is-missing)\n* [Drop missing values](#Drop-missing-values)\n* [Filling in missing values](#Filling-in-missing-values)\n\nLet's get started!","514d280f":"The first thing I do when I get a new dataset is take a look at some of it. This lets me see that it all read in correctly and get an idea of what's going on with the data. In this case, I'm looking to see if I see any missing values, which will be reprsented with `NaN` or `None`.","16f49cc0":"And that's it for today! If you have any questions, be sure to post them in the comments below or [on the forums](https:\/\/www.kaggle.com\/questions-and-answers). \n\nRemember that your notebook is private by default, and in order to share it with other people or ask for help with it, you'll need to make it public. First, you'll need to save a version of your notebook that shows your current work by hitting the \"Commit & Run\" button. (Your work is saved automatically, but versioning your work lets you go back and look at what it was like at the point you saved it. It also let's you share a nice compiled notebook instead of just the raw code.) Then, once your notebook is finished running, you can go to the Settings tab in the panel to the left (you may have to expand it by hitting the [<] button next to the \"Commit & Run\" button) and setting the \"Visibility\" dropdown to \"Public\".\n\n# More practice!\n___\n\nIf you're looking for more practice handling missing values, check out these extra-credit\\* exercises:\n\n* [Handling Missing Values](https:\/\/www.kaggle.com\/dansbecker\/handling-missing-values): In this notebook Dan shows you several approaches to imputing missing data using scikit-learn's imputer. \n* Look back at the `Zipcode` column in the `sf_permits` dataset, which has some missing values. How would you go about figuring out what the actual zipcode of each address should be? (You might try using another dataset. You can search for datasets about San Fransisco on the [Datasets listing](https:\/\/www.kaggle.com\/datasets).) \n\n\\* no actual credit is given for completing the challenge, you just learn how to clean data real good :P","232baef8":"By looking at [the documentation](https:\/\/www.kaggle.com\/maxhorowitz\/nflplaybyplay2009to2016), I can see that this column has information on the number of seconds left in the game when the play was made. This means that these values are probably missing because they were not recorded, rather than because they don't exist. So, it would make sense for us to try and guess what they should be rather than just leaving them as NA's.\n\nOn the other hand, there are other fields, like `PenalizedTeam` that also have lot of missing fields. In this case, though, the field is missing because if there was no penalty then it doesn't make sense to say *which* team was penalized. For this column, it would make more sense to either leave it empty or to add a third value like \"neither\" and use that to replace the NA's.\n\n> **Tip:** This is a great place to read over the dataset documentation if you haven't already! If you're working with a dataset that you've gotten from another person, you can also try reaching out to them to get more information.\n\nIf you're doing very careful data analysis, this is the point at which you'd look at each column individually to figure out the best strategy for filling those missing values. For the rest of this notebook, we'll cover some \"quick and dirty\" techniques that can help you with missing values but will probably also end up removing some useful information or adding some noise to your data.\n\n## Your turn!\n\n* Look at the columns `Street Number Suffix` and `Zipcode` from the `sf_permits` datasets. Both of these contain missing values. Which, if either, of these are missing because they don't exist? Which, if either, are missing because they weren't recorded?","ee8027db":"Oh dear, it looks like that's removed all our data! \ud83d\ude31 This is because every row in our dataset had at least one missing value. We might have better luck removing all the *columns* that have at least one missing value instead.","33a2b8ab":"# Figure out why the data is missing\n____\n \nThis is the point at which we get into the part of data science that I like to call \"data intution\", by which I mean \"really looking at your data and trying to figure out why it is the way it is and how that will affect your analysis\". It can be a frustrating part of data science, especially if you're newer to the field and don't have a lot of experience. For dealing with missing values, you'll need to use your intution to figure out why the value is missing. One of the most important question you can ask yourself to help figure this out is this:\n\n> **Is this value missing becuase it wasn't recorded or becuase it dosen't exist?**\n\nIf a value is missing becuase it doens't exist (like the height of the oldest child of someone who doesn't have any children) then it doesn't make sense to try and guess what it might be. These values you probalby do want to keep as NaN. On the other hand, if a value is missing becuase it wasn't recorded, then you can try to guess what it might have been based on the other values in that column and row. (This is called \"imputation\" and we'll learn how to do it next! :)\n\nLet's work through an example. Looking at the number of missing values in the nfl_data dataframe, I notice that the column `TimesSec` has a lot of missing values in it: ","916389a0":"# Filling in missing values automatically\n_____\n\nAnother option is to try and fill in the missing values. For this next bit, I'm getting a small sub-section of the NFL data so that it will print well.","47584429":"Filling in missing values is also known as \"imputation\", and you can find more exercises on it [in this lesson, also linked under the \"More practice!\" section](https:\/\/www.kaggle.com\/dansbecker\/handling-missing-values). First, however, why don't you try replacing some of the missing values in the sf_permit dataset?","6483c495":"# Drop missing values\n___\n\nIf you're in a hurry or don't have a reason to figure out why your values are missing, one option you have is to just remove any rows or columns that contain missing values. (Note: I don't generally recommend this approch for important projects! It's usually worth it to take the time to go through your data and really look at all the columns with missing values one-by-one to really get to know your dataset.)  \n\nIf you're sure you want to drop rows with missing values, pandas does have a handy function, `dropna()` to help you do this. Let's try it out on our NFL dataset!","fd19b29f":"Wow, almost a quarter of the cells in this dataset are empty! In the next step, we're going to take a closer look at some of the columns with missing values and try to figure out what might be going on with them.","b42c8553":"# See how many missing data points we have\n___\n\nOk, now we know that we do have some missing values. Let's see how many we have in each column. ","3d863d11":"# Take a first look at the data\n________\n\nThe first thing we'll need to do is load in the libraries and datasets we'll be using. For today, I'll be using a dataset of events that occured in American Football games for demonstration, and you'll be using a dataset of building permits issued in San Francisco.\n\n> **Important!** Make sure you run this cell yourself or the rest of your code won't work!","6e44fa3c":"We can use the Panda's fillna() function to fill in missing values in a dataframe for us. One option we have is to specify what we want the `NaN` values to be replaced with. Here, I'm saying that I would like to replace all the `NaN` values with 0.","f0ca6aec":"We've lost quite a bit of data, but at this point we have successfully removed all the `NaN`'s from our data. ","0915d387":"Yep, it looks like there's some missing values. What about in the sf_permits dataset?"}}