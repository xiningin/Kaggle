{"cell_type":{"7f7af51b":"code","56c625f8":"code","2967a593":"code","0d4650c7":"code","ae276019":"code","a161b6fd":"code","baed9f94":"code","ad2ffc82":"code","9680e50d":"code","b76474a6":"code","1bb42d03":"code","42b02d45":"code","768e0b8c":"code","bae114fc":"code","8b9e616d":"code","ab6e70d8":"code","7878912b":"code","f7757953":"code","3dd0e8a6":"code","024d453d":"code","85e7a503":"code","5b206074":"code","35444400":"code","8ef1ca97":"code","f4b91083":"code","1c4b61f0":"code","8fe948e5":"code","d5179bcd":"code","58d8125f":"code","f166a450":"code","b69af441":"code","d38a9454":"code","7f1ce855":"markdown","b01d18d7":"markdown","f0c3c967":"markdown","4eb7d336":"markdown","802f78f0":"markdown","87e78bcf":"markdown","86cf4363":"markdown","fa0a3cd2":"markdown","71a0925f":"markdown","a3f707d9":"markdown","6131be8e":"markdown","4a175ffb":"markdown","5d0e3880":"markdown","ba8cee09":"markdown","2edc8215":"markdown"},"source":{"7f7af51b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","56c625f8":"# Importan Lib\nimport pandas as pd\n\n# Libraries for Visualization\nimport plotly.express as px\nimport matplotlib.pyplot as plt \n# data viz lib\nimport seaborn as sns # not used in this code\n# data viz lib\nimport numpy as np \n# numneric calculation\n\n# Library for splitting the data in Train and Test\nfrom sklearn.model_selection import train_test_split\n\n# Library required for the Linear Regression Algorithm\nfrom sklearn.linear_model import LinearRegression\n\n# Library for the metric required to evaluate the model\nfrom sklearn.metrics import mean_absolute_error\n\n%matplotlib inline \n# allow to plot the charts inline","2967a593":"import os\nos.getcwd()","0d4650c7":"df = pd.read_csv('\/kaggle\/input\/house-data\/kc_house_data.csv')","ae276019":"df.head()","a161b6fd":"df.sample(10)","baed9f94":"df.dtypes","ad2ffc82":"df.info()","9680e50d":"df.shape","b76474a6":"df.isnull().sum()","1bb42d03":"df_new = pd.DataFrame(df.price )\ndf_new['sqft_living'] = df.sqft_living","42b02d45":"df_new.head()","768e0b8c":"df_new.shape","bae114fc":"df_new.isnull().sum()","8b9e616d":"fig = px.scatter(x = df_new.price, y = df_new.sqft_living, labels = {'x' : 'price', 'y' : 'sqft_living'}, trendline=\"ols\")\nfig.data[1].line.color = 'red'\nfig.show()","ab6e70d8":"df_new.loc[(df_new.sqft_living>13000)] ","7878912b":"df_new.drop(df_new.query(\"sqft_living > 13000\").index, inplace=True)","f7757953":"df_new.shape","3dd0e8a6":"fig = px.scatter(x = df_new.price, y = df_new.sqft_living, labels = {'x' : 'price', 'y' : 'sqft_living'}, trendline=\"ols\")\nfig.data[1].line.color = 'red'\nfig.show()","024d453d":"feature = df_new.sqft_living.values\ntarget = df_new.price.values","85e7a503":"feature = feature.reshape(-1,1)\ntarget = target.reshape(-1,1)","5b206074":"X_train, X_test, Y_train, Y_test = train_test_split(feature, target, test_size = 0.2, random_state = 0)\nprint(\"X-Train :\",X_train.shape)\nprint(\"X-Test :\",X_test.shape)\nprint(\"Y-Train :\",Y_test.shape)\nprint(\"Y-Test :\",Y_test.shape)","35444400":"# Instantiating the object of the class\nlr = LinearRegression()\n\n# Fitting the model\nlr.fit(X_train, Y_train)","8ef1ca97":"plt.figure(figsize = (15,8))\nplt.scatter(X_train, Y_train)\nplt.plot(X_train, lr.predict(X_train), color = 'red')\nplt.title('Price vs Sqft_living')\nplt.xlabel('price')\nplt.ylabel('square feet Living')\nplt.show()","f4b91083":"pred_vals = lr.predict(X_test)\npred_vals","1c4b61f0":"df_ac_vs_pr = pd.DataFrame(pred_vals, index = range(0,4323), columns = ['Predicted'])\ndf_ac_vs_pr['Actual'] = Y_test","8fe948e5":"df_ac_vs_pr.head()","d5179bcd":"print('Mean Absolute Error =', mean_absolute_error(Y_test, pred_vals))","58d8125f":"# Defining variable 'y' with given data\ny = np.array(3000)\ny = y.reshape(-1, 1)\n\n# Predicting on the basis of the value in 'y'\npred_y = lr.predict(y)\npred_y","f166a450":"print('The score obtained after studying for {} hours = {}'.format(y[0][0], pred_y[0][0]))","b69af441":"def mape(actual, pred): \n    actual, pred = np.array(actual), np.array(pred)\n    return np.mean(np.abs((actual - pred) \/ actual)) * 100","d38a9454":"mape(Y_test, pred_vals)","7f1ce855":"# Exploring the data","b01d18d7":"##### conclusion - 1 outlier is present ","f0c3c967":"# Step 2 : Reading the data into a Pandas Dataframe","4eb7d336":"### # Conclusion - as MAPE is 36% , that means sqft_living alone is not responsible for Proce veriation. ","802f78f0":"# Finding the solution of question asked in the problem statement","87e78bcf":"### Calculation MAPE","86cf4363":"# Next Step - Splitting the dataset into Train and Test data","fa0a3cd2":"# Step 3 : Understanding the data","71a0925f":"# Next step - Implementing the Linear Regression Algorithm","a3f707d9":"### Plotting the Regression Line with Actual vs Predicted values","6131be8e":"# Next Step - Evaluating the performance of the model","4a175ffb":"# Step 1 : Importing required libraries","5d0e3880":"#### Predicting the values","ba8cee09":"#### Creating a dataframe with Actual and Predicted Values","2edc8215":"# Task 1 - Prediction price of plot as per square feet area\n## Given Problem Statement\n-- A simple linear regression task involving 2 variables, we need to predict the price as per sqrft area.\n-- What will be predicted price if a the plot size is 3000 and will only one depended variable is enough to predict the Price?"}}