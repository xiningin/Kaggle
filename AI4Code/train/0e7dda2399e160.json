{"cell_type":{"fdaa4b5c":"code","461ab7af":"code","a1157c75":"code","6d304f1c":"code","8bc2275f":"code","9d1f700d":"code","ed182093":"code","55a58b3d":"code","fe090aab":"code","4fd5f37f":"code","bdd12561":"code","c6e9b76a":"code","144de652":"code","a89f5fbe":"code","f86c8af2":"code","e4cc3d45":"code","0055102f":"code","1a3c47eb":"code","b954aae3":"code","03e56e1f":"code","4fcd006c":"code","7f30cdbc":"code","230d6ce4":"code","41da2b04":"code","e7e89d0f":"code","713b5228":"markdown","9076f3bf":"markdown","6af6748c":"markdown","f9adc452":"markdown","e8daa68f":"markdown","516e5d12":"markdown","1ed2ae42":"markdown","82f5d209":"markdown","9aae14f3":"markdown","e5e6c1a9":"markdown","4637d4bf":"markdown"},"source":{"fdaa4b5c":"# Import necessary libraries\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import dates\nfrom datetime import datetime","461ab7af":"# Load dataset\n\ndata = pd.read_csv('..\/input\/retail-analysis-with-walmart-data\/Walmart_Store_sales.csv')\ndata","a1157c75":"# Convert date to datetime format and show dataset information\ndata['Date'] =  pd.to_datetime(data['Date'])\ndata.info()","6d304f1c":"# checking for missing values\ndata.isnull().sum()","8bc2275f":"# Splitting Date and create new columns (Day, Month, and Year)\ndata[\"Day\"]= pd.DatetimeIndex(data['Date']).day\ndata['Month'] = pd.DatetimeIndex(data['Date']).month\ndata['Year'] = pd.DatetimeIndex(data['Date']).year\ndata","9d1f700d":"plt.figure(figsize=(15,7))\n\n# Sum Weekly_Sales for each store, then sortded by total sales\ntotal_sales_for_each_store = data.groupby('Store')['Weekly_Sales'].sum().sort_values() \ntotal_sales_for_each_store_array = np.array(total_sales_for_each_store) # convert to array\n\n# Assigning a specific color for the stores have the lowest and highest sales\nclrs = ['lightsteelblue' if ((x < max(total_sales_for_each_store_array)) and (x > min(total_sales_for_each_store_array))) else 'midnightblue' for x in total_sales_for_each_store_array]\n\n\nax = total_sales_for_each_store.plot(kind='bar',color=clrs);\n\n# store have minimum sales\np = ax.patches[0]\nprint(type(p.get_height()))\nax.annotate(\"The store has minimum sales is 33 with {0:.2f} $\".format((p.get_height())), xy=(p.get_x(), p.get_height()), xycoords='data',\n            xytext=(0.17, 0.32), textcoords='axes fraction',\n            arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3\"),\n            horizontalalignment='center', verticalalignment='center')\n\n\n# store have maximum sales \np = ax.patches[44]\nax.annotate(\"The store has maximum sales is 20 with {0:.2f} $\".format((p.get_height())), xy=(p.get_x(), p.get_height()), xycoords='data',\n            xytext=(0.82, 0.98), textcoords='axes fraction',\n            arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3\"),\n            horizontalalignment='center', verticalalignment='center')\n\n\n# plot properties\nplt.xticks(rotation=0)\nplt.ticklabel_format(useOffset=False, style='plain', axis='y')\nplt.title('Total sales for each store')\nplt.xlabel('Store')\nplt.ylabel('Total Sales');","ed182093":"# Which store has maximum standard deviation\ndata_std = pd.DataFrame(data.groupby('Store')['Weekly_Sales'].std().sort_values(ascending=False))\nprint(\"The store has maximum standard deviation is \"+str(data_std.head(1).index[0])+\" with {0:.0f} $\".format(data_std.head(1).Weekly_Sales[data_std.head(1).index[0]]))","55a58b3d":"# Distribution of store has maximum standard deviation\nplt.figure(figsize=(15,7))\nsns.distplot(data[data['Store'] == data_std.head(1).index[0]]['Weekly_Sales'])\nplt.title('The Sales Distribution of Store #'+ str(data_std.head(1).index[0]));","fe090aab":"# Coefficient of mean to standard deviation\ncoef_mean_std = pd.DataFrame(data.groupby('Store')['Weekly_Sales'].std() \/ data.groupby('Store')['Weekly_Sales'].mean())\ncoef_mean_std = coef_mean_std.rename(columns={'Weekly_Sales':'Coefficient of mean to standard deviation'})\ncoef_mean_std","4fd5f37f":"# Distribution of store has maximum coefficient of mean to standard deviation\ncoef_mean_std_max = coef_mean_std.sort_values(by='Coefficient of mean to standard deviation')\nplt.figure(figsize=(15,7))\nsns.distplot(data[data['Store'] == coef_mean_std_max.tail(1).index[0]]['Weekly_Sales'])\nplt.title('The Sales Distribution of Store #'+str(coef_mean_std_max.tail(1).index[0]));","bdd12561":"plt.figure(figsize=(15,7))\n\n# Sales for third quarterly in 2012\nQ3 = data[(data['Date'] > '2012-07-01') & (data['Date'] < '2012-09-30')].groupby('Store')['Weekly_Sales'].sum()\n\n# Sales for second quarterly in 2012\nQ2 = data[(data['Date'] > '2012-04-01') & (data['Date'] < '2012-06-30')].groupby('Store')['Weekly_Sales'].sum()\n\n# Plotting the difference between sales for second and third quarterly\nQ2.plot(ax=Q3.plot(kind='bar',legend=True),kind='bar',color='r',alpha=0.2,legend=True);\nplt.legend([\"Q3' 2012\", \"Q2' 2012\"]);","c6e9b76a":"#  store\/s has good quarterly growth rate in Q3\u20192012 - .sort_values(by='Weekly_Sales')\nprint('Store have good quarterly growth rate in Q3\u20192012 is Store '+str(Q3.idxmax())+' With '+str(Q3.max())+' $')","144de652":"def plot_line(df,holiday_dates,holiday_label):\n    fig, ax = plt.subplots(figsize = (15,5))  \n    ax.plot(df['Date'],df['Weekly_Sales'],label=holiday_label)\n    \n    for day in holiday_dates:\n        day = datetime.strptime(day, '%d-%m-%Y')\n        plt.axvline(x=day, linestyle='--', c='r')\n    \n\n    plt.title(holiday_label)\n    x_dates = df['Date'].dt.strftime('%Y-%m-%d').sort_values().unique()\n    xfmt = dates.DateFormatter('%d-%m-%y')\n    ax.xaxis.set_major_formatter(xfmt)\n    ax.xaxis.set_major_locator(dates.DayLocator(1))\n    plt.gcf().autofmt_xdate(rotation=90)\n    plt.show()\n\n\ntotal_sales = data.groupby('Date')['Weekly_Sales'].sum().reset_index()\nSuper_Bowl =['12-2-2010', '11-2-2011', '10-2-2012']\nLabour_Day =  ['10-9-2010', '9-9-2011', '7-9-2012']\nThanksgiving =  ['26-11-2010', '25-11-2011', '23-11-2012']\nChristmas = ['31-12-2010', '30-12-2011', '28-12-2012']\n    \nplot_line(total_sales,Super_Bowl,'Super Bowl')\nplot_line(total_sales,Labour_Day,'Labour Day')\nplot_line(total_sales,Thanksgiving,'Thanksgiving')\nplot_line(total_sales,Christmas,'Christmas')","a89f5fbe":"data.loc[data.Date.isin(Super_Bowl)]","f86c8af2":"# Yearly Sales in holidays\nSuper_Bowl_df = pd.DataFrame(data.loc[data.Date.isin(Super_Bowl)].groupby('Year')['Weekly_Sales'].sum())\nThanksgiving_df = pd.DataFrame(data.loc[data.Date.isin(Thanksgiving)].groupby('Year')['Weekly_Sales'].sum())\nLabour_Day_df = pd.DataFrame(data.loc[data.Date.isin(Labour_Day)].groupby('Year')['Weekly_Sales'].sum())\nChristmas_df = pd.DataFrame(data.loc[data.Date.isin(Christmas)].groupby('Year')['Weekly_Sales'].sum())\n\nSuper_Bowl_df.plot(kind='bar',legend=False,title='Yearly Sales in Super Bowl holiday') \nThanksgiving_df.plot(kind='bar',legend=False,title='Yearly Sales in Thanksgiving holiday') \nLabour_Day_df.plot(kind='bar',legend=False,title='Yearly Sales in Labour Day holiday')\nChristmas_df.plot(kind='bar',legend=False,title='Yearly Sales in Christmas holiday')\n","e4cc3d45":"\n# Monthly view of sales for each years\nplt.scatter(data[data.Year==2010][\"Month\"],data[data.Year==2010][\"Weekly_Sales\"])\nplt.xlabel(\"months\")\nplt.ylabel(\"Weekly Sales\")\nplt.title(\"Monthly view of sales in 2010\")\nplt.show()\n\nplt.scatter(data[data.Year==2011][\"Month\"],data[data.Year==2011][\"Weekly_Sales\"])\nplt.xlabel(\"months\")\nplt.ylabel(\"Weekly Sales\")\nplt.title(\"Monthly view of sales in 2011\")\nplt.show()\n\nplt.scatter(data[data.Year==2012][\"Month\"],data[data.Year==2012][\"Weekly_Sales\"])\nplt.xlabel(\"months\")\nplt.ylabel(\"Weekly Sales\")\nplt.title(\"Monthly view of sales in 2012\")\nplt.show()\n","0055102f":"# Monthly view of sales for all years\nplt.figure(figsize=(10,6))\nplt.bar(data[\"Month\"],data[\"Weekly_Sales\"])\nplt.xlabel(\"months\")\nplt.ylabel(\"Weekly Sales\")\nplt.title(\"Monthly view of sales\")","1a3c47eb":"# Yearly view of sales\nplt.figure(figsize=(10,6))\ndata.groupby(\"Year\")[[\"Weekly_Sales\"]].sum().plot(kind='bar',legend=False)\nplt.xlabel(\"years\")\nplt.ylabel(\"Weekly Sales\")\nplt.title(\"Yearly view of sales\");","b954aae3":"# find outliers \nfig, axs = plt.subplots(4,figsize=(6,18))\nX = data[['Temperature','Fuel_Price','CPI','Unemployment']]\nfor i,column in enumerate(X):\n    sns.boxplot(data[column], ax=axs[i])\n","03e56e1f":"# drop the outliers     \ndata_new = data[(data['Unemployment']<10) & (data['Unemployment']>4.5) & (data['Temperature']>10)]\ndata_new","4fcd006c":"# check outliers \nfig, axs = plt.subplots(4,figsize=(6,18))\nX = data_new[['Temperature','Fuel_Price','CPI','Unemployment']]\nfor i,column in enumerate(X):\n    sns.boxplot(data_new[column], ax=axs[i])","7f30cdbc":"# Import sklearn \nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.linear_model import LinearRegression","230d6ce4":"# Select features and target \nX = data_new[['Store','Fuel_Price','CPI','Unemployment','Day','Month','Year']]\ny = data_new['Weekly_Sales']\n\n# Split data to train and test (0.80:0.20)\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)","41da2b04":"# Linear Regression model\nprint('Linear Regression:')\nprint()\nreg = LinearRegression()\nreg.fit(X_train, y_train)\ny_pred = reg.predict(X_test)\nprint('Accuracy:',reg.score(X_train, y_train)*100)\n\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\n\n\nsns.scatterplot(y_pred, y_test);","e7e89d0f":"# Random Forest Regressor\nprint('Random Forest Regressor:')\nprint()\nrfr = RandomForestRegressor(n_estimators = 400,max_depth=15,n_jobs=5)        \nrfr.fit(X_train,y_train)\ny_pred=rfr.predict(X_test)\nprint('Accuracy:',rfr.score(X_test, y_test)*100)\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\n\n\nsns.scatterplot(y_pred, y_test);","713b5228":"### Build Model","9076f3bf":"### Q5: Provide a monthly and semester view of sales in units and give insights","6af6748c":"#### The sales increased during thanksgiving. And the sales decreased during christmas.","f9adc452":"### Q4: Some holidays have a negative impact on sales. Find out holidays which have higher sales than the mean sales in non-holiday season for all stores together\n\n\n**Holiday Events:**\n\n- Super Bowl: 12-Feb-10, 11-Feb-11, 10-Feb-12, 8-Feb-13\n\n- Labour Day: 10-Sep-10, 9-Sep-11, 7-Sep-12, 6-Sep-13\n\n- Thanksgiving: 26-Nov-10, 25-Nov-11, 23-Nov-12, 29-Nov-13\n\n- Christmas: 31-Dec-10, 30-Dec-11, 28-Dec-12, 27-Dec-13\n","e8daa68f":"### Data Preparation","516e5d12":"### Q1: Which store has minimum and maximum sales?","1ed2ae42":"### Q3: Which store\/s has good quarterly growth rate in Q3\u20192012","82f5d209":"## Build  prediction models to forecast demand (Modeling)","9aae14f3":"### Q2: Which store has maximum standard deviation i.e., the sales vary a lot. Also, find out the coefficient of mean to standard deviation?","e5e6c1a9":"### Data Understanding\n\nThere are sales data available for 45 stores of Walmart in [Kaggle](https:\/\/www.kaggle.com\/aditya6196\/retail-analysis-with-walmart-data). This is the data that covers sales from 2010-02-05 to 2012-11-01. \n\nThe data contains these features:\n- Store - the store number\n- Date - the week of sales\n- Weekly_Sales - sales for the given store\n- Holiday_Flag - whether the week is a special holiday week 1 \u2013 Holiday week 0 \u2013 Non-holiday week\n- Temperature - Temperature on the day of sale\n- Fuel_Price - Cost of fuel in the region\n- CPI \u2013 Prevailing consumer price index\n- Unemployment - Prevailing unemployment rate\n","4637d4bf":"### Business Understanding\n\n\n#### Walmart is an American retail corporation that operates a chain of hypermarkets, discount department stores, and grocery stores.\n\n#### In this project, we focused to answer the following questions:\n1. Which store has minimum and maximum sales?\n2. Which store has maximum standard deviation i.e., the sales vary a lot. Also, find out the coefficient of mean to standard deviation\n3. Which store\/s has good quarterly growth rate in Q3\u20192012\n4. Some holidays have a negative impact on sales. Find out holidays which have higher sales than the mean sales in non-holiday season for all stores together\n5. Provide a monthly and semester view of sales in units and give insights\n6. Build prediction to forecast demand.\n"}}