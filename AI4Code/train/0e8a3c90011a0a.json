{"cell_type":{"a79a060c":"code","6db52ea7":"code","b87e711f":"code","1c0559bd":"code","b05583f9":"code","0cd8b5ee":"code","69dfc0ed":"code","853bb48b":"code","3a6dea10":"code","de00c219":"code","5505a40d":"code","45271c79":"code","7a9924a8":"code","3fc19446":"markdown","5edce799":"markdown","86d95a1e":"markdown","f9fb4cb9":"markdown"},"source":{"a79a060c":"import pandas as pd\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.impute import KNNImputer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV","6db52ea7":"def preprocess(data, dtype = 'train'):\n    # Return Ground Truth labels when training\n    if dtype == 'train':\n        data_pred = data['Survived']\n        data.drop('Survived', axis = 1, inplace = True)\n        \n    # Extract Title of the passenger\n    data['Title'] = [data['Name'][i].split(', ') [1].split('.') [0] for i in range(data.shape[0])]\n    \n    # Drop some columns\n    data.drop(['Name', 'PassengerId', 'Ticket', 'Cabin'], axis = 1, inplace = True)\n    \n    one_hot_emb = pd.get_dummies(data['Embarked'])\n    data.drop('Embarked', axis = 1, inplace = True)\n    \n    data['Sex'] = data['Sex'].astype('category') .cat.rename_categories([0,1])\n    data['Title'] = data['Title'].astype('category')\n    data['Title'] = data['Title'].cat.rename_categories(list(range(len(data['Title'].cat.categories))))\n    \n    data = pd.concat((data, one_hot_emb), axis = 1)\n    \n    # Imputation using K nearest neighbors\n    imputer = KNNImputer(n_neighbors=5, weights=\"uniform\")\n    data_np = imputer.fit_transform(data)\n    \n    data = pd.DataFrame(data = data_np,  columns= data.keys())\n    \n    if dtype == 'train':\n        return data, data_pred\n    else:\n        return data","b87e711f":"def feature_engineer(data):\n    data['size'] = data['SibSp'] + data['Parch']\n    data['Age*Class']=data['Age']*data['Pclass']\n    return data","1c0559bd":"data_raw = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","b05583f9":"final_data, gt = preprocess(data_raw)\nfinal_data = feature_engineer(final_data)","0cd8b5ee":"params = {'max_depth': list(range(2, 11)), 'n_estimators':list(range(10, 100, 10))}\n\ngsc = GridSearchCV(estimator=RandomForestClassifier(), param_grid=params, scoring='accuracy', verbose=3)\ngrid = gsc.fit(final_data, gt)","69dfc0ed":"grid.best_params_","853bb48b":"grid.best_estimator_","3a6dea10":"grid.best_score_ # Accuracy","de00c219":"data_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nids = data_test['PassengerId']","5505a40d":"final_test = preprocess(data_test, dtype = 'test')\nfinal_test = feature_engineer(final_test)","45271c79":"out = grid.predict(final_test)","7a9924a8":"out_frame = pd.DataFrame({'PassengerId':ids, 'Survived':out})\nout_frame.to_csv(r'out.csv', index = False, header=True)\n# ~~ 75% Accuracy","3fc19446":"# Random Forest Classifier\nStarter Code\n* Read and pre-process data\n* Train and Validate using GridSearchCV\n* Write the output into a CSV file","5edce799":"## Grid Search via Cross Validation","86d95a1e":"## Submit Predictions on Test Data","f9fb4cb9":"## Data and Preprocessing"}}