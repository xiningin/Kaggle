{"cell_type":{"4e28b1c7":"code","0afeb424":"code","609fd170":"code","cda01915":"code","9b28e2f8":"code","7109fbad":"code","7c0dc875":"code","ce9cc0c8":"code","c6a8c259":"code","1c62fb10":"code","c72190fb":"code","7ce52022":"code","aa9d5b85":"code","e581e73c":"code","6a4e8c8e":"code","0165fd73":"markdown","384cff22":"markdown"},"source":{"4e28b1c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0afeb424":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport os\nimport random\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, KFold\nimport tensorflow as tf\nfrom sklearn.metrics import log_loss\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau","609fd170":"def seeds(seed):\n    np.random.seed(seed)\n    #tf.random.set_random_seed(seed) # tensorflow v1.14\n    tf.random.set_seed(seed) #tensorflow v2.0\n    \nseeds(42)","cda01915":"train_features = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\ntrain_targets_scored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\ntest_features = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/lish-moa\/sample_submission.csv')","9b28e2f8":"train_features['cp_type'].value_counts()\nsns.barplot(train_features['cp_type'].value_counts().index, train_features['cp_type'].value_counts())","7109fbad":"train_features['cp_time'].value_counts()\nsns.barplot(train_features['cp_time'].value_counts().index, train_features['cp_time'].value_counts())","7c0dc875":"train_features['cp_dose'].value_counts()\nsns.barplot(train_features['cp_dose'].value_counts().index, train_features['cp_dose'].value_counts())","ce9cc0c8":"def normalize(df, cols):\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n    return df\n#    test_features[cols] = scaler.fit_transform(test_features[cols])\n\ncols = [x for x in train_features.columns if x not in ['sig_id', 'cp_type', 'cp_time', 'cp_dose']]\ntrain_features = normalize(train_features, cols)\ntest_features = normalize(test_features, cols)","c6a8c259":"def ohe(df, cols):\n    for i in cols:\n        df = df.merge(pd.get_dummies(df[i]),left_index=True,right_index=True)\n        df.drop(i, axis=1,inplace=True)\n    df.drop('sig_id', axis=1, inplace=True)\n    return df\n\ntrain_features = ohe(train_features, ['cp_type', 'cp_dose', 'cp_time'])\ntest_features = ohe(test_features, ['cp_type', 'cp_dose', 'cp_time'])\n\ntrain_targets_scored.drop('sig_id',axis=1,inplace=True)","1c62fb10":"train_features.head()","c72190fb":"def model_struct(num_of_cols):\n    model = tf.keras.models.Sequential([\n        tf.keras.layers.Dense(1024, input_dim=num_of_cols, activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.25),\n        tf.keras.layers.Dense(512, activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.25),\n        tf.keras.layers.Dense(256, activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.25),\n        tf.keras.layers.Dense(206, activation='sigmoid')\n        ])\n    \n    #RMSprop(lr=0.001)\n    \n    model.summary()\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n    return model","7ce52022":"submission.loc[:,train_targets_scored.columns] = 0\nres = train_targets_scored.copy()\nn_loop = 3\nfor loop in range(n_loop):\n    for n, (trn_ind, val_ind) in enumerate(KFold(n_splits=5,shuffle=True,random_state=loop).split(train_features)):\n        print(\"\\n\")\n        print('-'*50)\n        print(\"Loop \", loop, \" Fold \", n)\n        model = model_struct(train_features.shape[1])\n        lr_loss = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=3, verbose=1, mode='min', min_delta=0.00001)\n        model.fit(train_features.values[trn_ind], \n          train_targets_scored.values[trn_ind], \n          epochs=35, \n          batch_size=128, \n          validation_data=(train_features.values[val_ind], train_targets_scored.values[val_ind]), \n          verbose=1,\n          callbacks=[lr_loss])\n        \n        test_pred = model.predict(test_features.values)\n        val_pred = model.predict(train_features.values[val_ind])\n        \n        submission.loc[:,train_targets_scored.columns] += test_pred\n        res.loc[val_ind,train_targets_scored.columns] +=val_pred","aa9d5b85":"res.loc[:,train_targets_scored.columns] \/= (n_loop*(n+1))\ndef metric(y_true, y_pred):\n    metrics = []\n    for _target in train_targets_scored.columns:\n        metrics.append(log_loss(y_true.loc[:, _target], y_pred.loc[:, _target].astype(float), labels=[0,1]))\n    return np.mean(metrics)\n\nprint(f'OOF Metric: {metric(train_targets_scored, res)}')\n\n# 0.008535362743676658 * 0.008531169160687455\n# 0.008528504555434469\n# 0.008642192757732887","e581e73c":"submission.loc[:,train_targets_scored.columns] \/= (n_loop*(n+1))\ntest = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\ntest_ctl_vehicle_idx = (test['cp_type'] == 'ctl_vehicle')\nsubmission.loc[test_ctl_vehicle_idx, 1:] = 0\nsubmission.loc[test_ctl_vehicle_idx].iloc[:, 1:].sum().sum()","6a4e8c8e":"submission.to_csv('submission.csv', index=False)","0165fd73":"#### I tried using StratifiedKFold which is not working as expected. There are reasons for it.\n1. It needs 2 parameter in split(). I was passing only 1 parameter.\n2. It works with binary or multiclass problems only. Since this problem is multilabel, we won't be able to use it.\n\nTherefore, i am using KFold() to split the data.","384cff22":"In general, Softmax is useful when we have more than 2 classes for classification. Howerver, we haven't used softmax for this prediction because \n* #### sigmoid should be used in case of multilabel classification \n* #### softmax should be used in case of multiclass classification"}}