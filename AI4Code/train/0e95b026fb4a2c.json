{"cell_type":{"c07a6588":"code","7db1d093":"code","776f386a":"code","34743bda":"code","42178992":"code","fa62d3c7":"code","88b21f0e":"code","99fe6940":"code","00e5406a":"code","c40367c5":"code","1f1e3909":"code","ad109c1c":"code","770689e6":"code","5f51dc9f":"code","43fe1f6f":"code","5b8841be":"code","560924a2":"code","41c7fd22":"code","becbbba8":"code","5290c1f6":"code","786aaa32":"markdown"},"source":{"c07a6588":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7db1d093":"df = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","776f386a":"df.head()","34743bda":"df = df.drop('id', axis=1)\ndf = df.drop('Unnamed: 32', axis=1)","42178992":"df.head()","fa62d3c7":"df.isnull().sum()","88b21f0e":"import matplotlib.pyplot as plt\nimport seaborn as sns","99fe6940":"sns.countplot(data=df, x=df[\"diagnosis\"])\nplt.title(\"Diagnosis\")\nplt.show()","00e5406a":"sns.pairplot(data=df)","c40367c5":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\ndf['diagnosis'] = le.fit_transform(df['diagnosis'])\ndf['diagnosis'].head()","1f1e3909":"x = df.drop(columns=\"diagnosis\", axis=1).values\ny = df['diagnosis'].values","ad109c1c":"x","770689e6":"x.shape","5f51dc9f":"y.shape","43fe1f6f":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, shuffle=True)","5b8841be":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","560924a2":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score","41c7fd22":"for i in range(1, 20):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(x_train, y_train)\n    pred = knn.predict(x_test)\n    acc = accuracy_score(pred, y_test)\n    print ('n_neighbour : {} -> Prediction : {}'.format(i, acc))","becbbba8":"knn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(x_train, y_train)\npred = knn.predict(x_test)\nacc = accuracy_score(pred, y_test)\nprint (acc)","5290c1f6":"plt.plot(pred, '--r')\nplt.plot(y_test, '--b')\nplt.title('Comparison between predicted vs actual value')\nplt.show()","786aaa32":"**KNeighborsClassifier gives the best result when the value of n_neighbors is 3**"}}