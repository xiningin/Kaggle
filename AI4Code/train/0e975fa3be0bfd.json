{"cell_type":{"3c5e967b":"code","67d75b2c":"code","8bccbff0":"code","9a54e1b4":"code","81648b83":"code","bd8bfeb0":"code","ab85dc45":"code","838bf6d4":"code","b9756f25":"code","3f2873d9":"code","7f991a6c":"code","54827b1d":"code","d0fd38dc":"code","7041408f":"code","d509b9a8":"code","34ed9eea":"code","b85b9754":"code","badee130":"code","1893497b":"code","d3bca2dc":"code","10a6f9ea":"code","55488ec5":"markdown","4fc63d4d":"markdown","85249fda":"markdown","8ef5c08e":"markdown","9dda6668":"markdown","ef8afa2b":"markdown","324bb633":"markdown","bcbb9d1f":"markdown"},"source":{"3c5e967b":"!pip install pycaret","67d75b2c":"import pandas as pd\nimport numpy as np\n\nfrom pycaret.classification import *\n\nimport gc\ntrain_path = '..\/input\/tabular-playground-series-jun-2021\/train.csv'\ntest_path = '..\/input\/tabular-playground-series-jun-2021\/test.csv'\nRS = 69420","8bccbff0":"df = pd.read_csv(train_path, index_col=0)\n\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ndf['target'] = le.fit_transform(df['target'])\n\ndf","9a54e1b4":"%%time\n# Fixing Imbalance takes ages\nclf = setup(data=df,\n            target='target',\n            use_gpu=True,\n            silent=True)","81648b83":"gc.collect()","bd8bfeb0":"%%time\nlgbm = tune_model(create_model('lightgbm'),\n                  optimize='AUC',\n                  early_stopping=True,\n                  early_stopping_max_iters=50,\n                  choose_better=True,\n                  search_library='optuna')","ab85dc45":"plot_model(lgbm)","838bf6d4":"plot_model(lgbm, plot='confusion_matrix')","b9756f25":"%%time\nxgb = tune_model(create_model('xgboost'),\n                  optimize='AUC',\n                  early_stopping=True,\n                  early_stopping_max_iters=10,\n                  choose_better=True,\n                  search_library='optuna')","3f2873d9":"plot_model(xgb)","7f991a6c":"plot_model(xgb, plot='confusion_matrix')","54827b1d":"%%time\ncat = tune_model(create_model('catboost'),\n                 optimize='AUC',\n                 early_stopping=True,\n                 early_stopping_max_iters=50,\n                 choose_better=True)","d0fd38dc":"plot_model(cat)","7041408f":"plot_model(cat, plot='confusion_matrix')","d509b9a8":"models = [lgbm, xgb, cat]","34ed9eea":"%%time\nblend = blend_models(estimator_list=models,\n                     method='soft',\n                     optimize='AUC')","b85b9754":"test = pd.read_csv(test_path, index_col=0)\ntest","badee130":"test_preds = predict_model(blend, data=test, raw_score=True)\ntest_preds","1893497b":"test_preds = test_preds.values","d3bca2dc":"output = pd.DataFrame({'id': test.index,\n                       'Class_1': test_preds[:, -9],\n                       'Class_2': test_preds[:, -8],\n                       'Class_3': test_preds[:, -7],\n                       'Class_4': test_preds[:, -6],\n                       'Class_5': test_preds[:, -5],\n                       'Class_6': test_preds[:, -4],\n                       'Class_7': test_preds[:, -3],\n                       'Class_8': test_preds[:, -2],\n                       'Class_9': test_preds[:, -1],\n                      })\n\noutput.to_csv('submission_tps.csv', index=False)","10a6f9ea":"output.head()","55488ec5":"# Preprocess & Setup Data Pipeline","4fc63d4d":"# Tuned LGBMClassifier","85249fda":"# Tuned XGBClassifier","8ef5c08e":"# Ensemble that shi","9dda6668":"# Submit Predictions","ef8afa2b":"# Tuned CatboostClassifier","324bb633":"# Import Libraries","bcbb9d1f":"**PyCaret has quickly become my favourite AutoML\/StructuredML library! In this notebook I wanted to share that with you. I still believe that the library has a ways to go especially with optimizing runtime and with the documentation (its so bad) but it has come a long way!**"}}