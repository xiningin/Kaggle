{"cell_type":{"8584168a":"code","2d5f4a70":"code","5f39e6da":"code","e8fd2ebe":"code","d1a2dbf4":"code","7afbbe41":"code","f7d04fae":"code","c8172a35":"code","1bbe0d83":"code","1b69af10":"code","8c37eedd":"code","a92f7c54":"code","2491223f":"code","58431574":"code","82e8b181":"code","34e5b494":"code","041b6b26":"code","76ec1b33":"code","a119bfe7":"code","c579be66":"code","d64e19bd":"code","b32b9277":"code","8f9d4d07":"markdown","1770f713":"markdown"},"source":{"8584168a":"! pip install segmentation_models_pytorch albumentations gdown\n! pip install -U git+https:\/\/github.com\/albu\/albumentations --no-cache-dir","2d5f4a70":"!gdown https:\/\/drive.google.com\/u\/2\/uc?id=1RPfZIfUqGv8Kb5PUbJdy5zuovooSrAnU\n!gdown https:\/\/drive.google.com\/u\/2\/uc?id=1QPrwXDmP1NYHOGE1wsKegOa7E4ZhWHug\n!gdown https:\/\/drive.google.com\/u\/2\/uc?id=1JLOTumqdxs6dqqI06YPJlVzxaIk1vdbB","5f39e6da":"import os\nimport csv\nimport re\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport itertools\n\nimport cv2\nfrom tqdm.notebook import tqdm\nfrom glob import glob\nfrom PIL import Image\nfrom skimage.transform import resize\nfrom sklearn.model_selection import train_test_split, KFold\n\nimport shutil\n\nimport torch\nfrom torch.utils.data import DataLoader,Dataset\nimport torch.nn as nn\nimport albumentations\nimport torchvision \nfrom torchvision import transforms, models\n\nimport random\n\nimport segmentation_models_pytorch as smp\nfrom PIL import Image\n\n","e8fd2ebe":"def rle_encoding(x):\n    dots = np.where(x.T.flatten()==1)[0]\n    run_lengths = []\n    prev = -2\n    for b in dots:\n        if (b>prev+1): run_lengths.extend((b+1, 0))\n        run_lengths[-1] += 1\n        prev = b\n    return run_lengths\n\ndef convert_to_tensor(x,**kwargs):\n    return x.transpose(2,0,1).astype(\"float32\")\n\ndef func_for_preprocessing(preprocessing_fn=None):\n    transform = []\n    if preprocessing_fn:\n        transform.append(albumentations.Lambda(image=preprocessing_fn))\n    transform.append(albumentations.Lambda(image=convert_to_tensor))\n    return albumentations.Compose(transform)\n\ndef trainaugs():\n    transform =  [\n                albumentations.Resize(height=224,width=224,interpolation=Image.BILINEAR),\n                albumentations.RandomBrightnessContrast(brightness_limit=0.15, contrast_limit=0),\n                albumentations.ShiftScaleRotate(rotate_limit=15, shift_limit=0.15, scale_limit=0.2),\n                albumentations.HorizontalFlip(),\n            ]\n    return albumentations.Compose(transform)\n\ndef valaugs():\n    transform = [\n                albumentations.Resize(height=224,width=224,interpolation=Image.BILINEAR),\n            ]\n    return albumentations.Compose(transform)\n\n\nclass GetDataset(Dataset):\n    def __init__(self,imagespath,maskspath,name,augment=None,preprocess=None):\n        self.imagespath = imagespath\n        self.name = name\n        self.maskspath = maskspath\n        self.augment = augment\n        self.preprocess = preprocess\n        \n    def __len__(self):\n        return len(self.imagespath)\n    \n    def __getitem__(self,idx):\n        image = cv2.cvtColor(cv2.imread(self.imagespath[idx]),cv2.COLOR_BGR2RGB)\n        mask = cv2.imread(self.maskspath[idx], cv2.IMREAD_GRAYSCALE)\n\n        if self.augment:\n            sample = self.augment(image=image, mask=mask)\n            image,mask = sample['image'],sample['mask']\n        if self.preprocess:\n            sample = self.preprocess(image=image,mask=mask)\n            image,mask = sample['image'],sample['mask']\n\n        mask = (mask \/ 255).astype(np.float32)\n        mask = np.expand_dims(mask, axis=0)\n\n        return image,mask\n#model\nencoder_wts = \"imagenet\"\nactivation = \"sigmoid\"\n# model1 = smp.Unet(encoder_name=\"resnet50\",activation=activation,encoder_weights=encoder_wts)\n# model2 = smp.Unet(encoder_name=\"densenet201\",activation=activation,encoder_weights=encoder_wts)\n# model3 = smp.Unet(encoder_name=\"vgg16\",activation=activation,encoder_weights=encoder_wts)","d1a2dbf4":"!git clone https:\/\/github.com\/tranduchuy682\/TraoNguocA.git","7afbbe41":"testpath = \".\/TraoNguocA\/traonguocdoA\/Orig\/Test\"\ntestmask = \".\/TraoNguocA\/traonguocdoA\/GT\/test\/\"\n\ntest_masks = [os.path.join(testmask,i) for i in os.listdir(testmask)]\ntest_imgs = [os.path.join(testpath,i) for i in os.listdir(testpath)]\nname = [i for i in os.listdir(testpath)]\ndf_test = pd.DataFrame({\"image\":test_imgs,\"mask\":test_masks,\"name\":name})\n\n# df_train, df_val = train_test_split(df,test_size = 0.15)\nprint(df_test.values.shape)","f7d04fae":"#resnet50\ndevice = \"cuda\"\npreprocess_func = smp.encoders.get_preprocessing_fn(\"resnet50\",encoder_wts)\nbest_model_resnet50 = torch.load('.\/best_model_A_Resnet50.pth')\ndice = 0.0\nIOU = 0.0\ndice_resnet50, iou_resnet50 = [], []\ntest_dataset = GetDataset(imagespath = df_test['image'].tolist(),\n                          maskspath = df_test['mask'].tolist(),\n                          name = df_test['name'].tolist(),\n                          augment = valaugs(),\n                          preprocess = func_for_preprocessing(preprocess_func))\n\nfor n in range(len(df_test)):\n    print(n, test_dataset.name[n])\n    image, gt_mask = test_dataset[n]\n    gt_mask = gt_mask.squeeze()\n\n    x_tensor = torch.from_numpy(image).to(device).unsqueeze(0)\n    pr_mask = best_model_resnet50.predict(x_tensor)\n    pr_mask = pr_mask.squeeze().cpu().numpy().round()\n    res = (pr_mask - pr_mask.min()) \/ (pr_mask.max() - pr_mask.min() + 1e-8)\n    gt = np.asarray(gt_mask, np.float32)\n    gt \/= (gt.max() + 1e-8)\n    d = (2 * (gt * res).sum() + 1) \/ (gt.sum() + res.sum() + 1)\n    i = ((gt * res).sum() + 1) \/ (gt.sum() + res.sum() - (gt * res).sum() + 1)\n    dice_resnet50.append(d) \n    iou_resnet50.append(i)\n#     print(\"Dice = \", d)\n#     print(\"IOU = \", i)\n    dice += d\n    IOU += i\ndice = dice \/ len(df_test)\nIOU = IOU \/ len(df_test)\n# print(\"Mean dice = \",dice)\n# print(\"Mean IOU = \",IOU)\nprint(\"done\")","c8172a35":"#densenet201\ndevice = \"cuda\"\npreprocess_func = smp.encoders.get_preprocessing_fn(\"densenet201\",encoder_wts)\nbest_model_densnet201 = torch.load('.\/best_model_A_DenseNet201.pth')\ndice = 0.0\nIOU = 0.0\ndice_densnet201, iou_densnet201 = [], []\ntest_dataset = GetDataset(imagespath = df_test['image'].tolist(),\n                          maskspath = df_test['mask'].tolist(),\n                          name = df_test['name'].tolist(),\n                          augment = valaugs(),\n                          preprocess = func_for_preprocessing(preprocess_func))\n\nfor n in range(len(df_test)):\n\n#     print(test_dataset_vis.name[n])\n    image, gt_mask = test_dataset[n]\n    gt_mask = gt_mask.squeeze()\n\n    x_tensor = torch.from_numpy(image).to(device).unsqueeze(0)\n    pr_mask = best_model_densnet201.predict(x_tensor)\n    pr_mask = pr_mask.squeeze().cpu().numpy().round()\n    res = (pr_mask - pr_mask.min()) \/ (pr_mask.max() - pr_mask.min() + 1e-8)\n    gt = np.asarray(gt_mask, np.float32)\n    gt \/= (gt.max() + 1e-8)\n    d = (2 * (gt * res).sum() + 1) \/ (gt.sum() + res.sum() + 1)\n    i = ((gt * res).sum() + 1) \/ (gt.sum() + res.sum() - (gt * res).sum() + 1)\n    dice_densnet201.append(d) \n    iou_densnet201.append(i)\n#     print(\"Dice = \", d)\n#     print(\"IOU = \", i)\n    dice += d\n    IOU += i\ndice = dice \/ len(df_test)\nIOU = IOU \/ len(df_test)\n# print(\"Mean dice = \",dice)\n# print(\"Mean IOU = \",IOU)\nprint(\"done\")","1bbe0d83":"#densenet201\ndevice = \"cuda\"\npreprocess_func = smp.encoders.get_preprocessing_fn(\"vgg16\",encoder_wts)\nbest_model_VGG16 = torch.load('.\/best_model_A_VGG16.pth')\ndice = 0.0\nIOU = 0.0\ndice_VGG16, iou_VGG16 = [], []\ntest_dataset = GetDataset(imagespath = df_test['image'].tolist(),\n                          maskspath = df_test['mask'].tolist(),\n                          name = df_test['name'].tolist(),\n                          augment = valaugs(),\n                          preprocess = func_for_preprocessing(preprocess_func))\n\nfor n in range(len(df_test)):\n\n#     print(test_dataset_vis.name[n])\n    image, gt_mask = test_dataset[n]\n    gt_mask = gt_mask.squeeze()\n\n    x_tensor = torch.from_numpy(image).to(device).unsqueeze(0)\n    pr_mask = best_model_VGG16.predict(x_tensor)\n    pr_mask = pr_mask.squeeze().cpu().numpy().round()\n    res = (pr_mask - pr_mask.min()) \/ (pr_mask.max() - pr_mask.min() + 1e-8)\n    gt = np.asarray(gt_mask, np.float32)\n    gt \/= (gt.max() + 1e-8)\n    d = (2 * (gt * res).sum() + 1) \/ (gt.sum() + res.sum() + 1)\n    i = ((gt * res).sum() + 1) \/ (gt.sum() + res.sum() - (gt * res).sum() + 1)\n    dice_VGG16.append(d) \n    iou_VGG16.append(i)\n#     print(\"Dice = \", d)\n#     print(\"IOU = \", i)\n    dice += d\n    IOU += i\ndice = dice \/ len(df_test)\nIOU = IOU \/ len(df_test)\n# print(\"Mean dice = \",dice)\n# print(\"Mean IOU = \",IOU)\nprint(\"done\")","1b69af10":"print(len(dice_resnet50), len(dice_densnet201), len(dice_VGG16))","8c37eedd":"num = [i for i in range(44)]","a92f7c54":"df_dice = pd.DataFrame({\"Resnet50\":dice_resnet50,\"Densenet201\":dice_densnet201,\"VGG16\":dice_VGG16, \"name\":num})\ndf_IOU = pd.DataFrame({\"Resnet50\":iou_resnet50,\"Densenet201\":iou_densnet201,\"VGG16\":iou_VGG16, \"name\":num})","2491223f":"print(df_dice.shape, df_IOU.shape)","58431574":"df_dice.to_csv(\"dice.csv\")","82e8b181":"df_IOU.to_csv(\"IOU.csv\")","34e5b494":"pd.DataFrame({\"Resnet50\":dice_resnet50,\"Densenet201\":dice_densnet201,\"VGG16\":dice_VGG16}, index = num).plot.bar(figsize=(18,5),\n                                                                                                               title=\"Dice score\")","041b6b26":"x= pd.DataFrame({\"Resnet50\":iou_resnet50,\"Densenet201\":iou_densnet201,\"VGG16\":iou_VGG16}, index = num).plot.bar(figsize=(18,5), title=\"IOU score\")","76ec1b33":"pip install openpyxl","a119bfe7":"from pandas import read_excel\nmy_sheet = 'Sheet1' # change it to your sheet name, you can find your sheet name at the bottom left of your excel file\nfile_name = '..\/input\/vedothi\/SW_IO.xlsx' # change it to the name of your excel file\ndf = read_excel(file_name, sheet_name = my_sheet)\nprint(df.head()) # shows headers with top 5 rows","c579be66":"x= pd.DataFrame({\"Whole image\":df1['dice'],\"Inner\/Outer\":df['dice']}, index = num).plot.bar(figsize=(18,5), title=\"Dice score\")","d64e19bd":"x= pd.DataFrame({\"Whole image\":df1['IOU'],\"Inner\/Outer\":df['IOU']}, index = num).plot.bar(figsize=(18,5), title=\"IOU score\")","b32b9277":"from pandas import read_excel\nmy_sheet = 'Sheet1' # change it to your sheet name, you can find your sheet name at the bottom left of your excel file\nfile_name = '..\/input\/vedothi\/SW_wholeImg.xlsx' # change it to the name of your excel file\ndf1 = read_excel(file_name, sheet_name = my_sheet)\nprint(df.head())","8f9d4d07":"# Test loai A\n","1770f713":"# Ve Do Thi\n"}}