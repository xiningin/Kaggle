{"cell_type":{"99411059":"code","914260d2":"code","65f79056":"code","520af6b8":"code","de2f6abe":"code","1afd73fa":"code","bd638e9d":"code","bb91a804":"code","67eafc9f":"code","a07e526c":"code","956d142e":"code","30cec37a":"code","86d965dd":"code","a74f6d9d":"code","05acd9d7":"code","4d800a5f":"code","6cddba9b":"code","f6fd54df":"code","9e65582e":"code","918d1ff6":"code","ba24bd78":"code","188d50e4":"code","f76283e7":"code","85dccf98":"code","74794452":"code","ee8bff12":"code","7dc867b4":"code","913bf267":"code","bafe842e":"code","99b11e42":"code","be11d62d":"code","5a76a258":"code","52b02fc4":"code","1aaca09a":"code","c28ade6e":"code","970d7efa":"code","a670dec4":"code","d0d10bd0":"code","c4c83761":"code","e9024607":"code","c9645c06":"code","c23c220c":"code","315305a5":"code","4bcac603":"code","916f2f98":"code","f6913308":"code","fe58b61f":"code","dd3edc95":"code","87e1a593":"code","8c87c2ea":"code","e0b61269":"code","0f4d0ab8":"code","08e1fac4":"code","e9d6ba35":"code","80b13fd1":"code","24081064":"code","137d535c":"code","8c369530":"code","a976ac57":"code","67ac6828":"code","8535db3b":"code","386f4422":"code","119d7f32":"code","cba80668":"code","649127a2":"code","55c57a5b":"markdown","b0d7ef95":"markdown","1e5375e3":"markdown","a02dcbf5":"markdown","341f772a":"markdown","3086fc5a":"markdown","d33261cf":"markdown","5e573e6c":"markdown","5583132e":"markdown","e46c6805":"markdown","247d550b":"markdown","ef5c1b5b":"markdown","3ae2d6b8":"markdown","c66e78eb":"markdown","156e325e":"markdown","fe4afa10":"markdown","5833f6a1":"markdown"},"source":{"99411059":"# Importing Dependencies\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import style\nplt.style.use('seaborn-dark')\n\nimport matplotlib.image as mpimg\nfrom matplotlib.offsetbox import AnnotationBbox, OffsetImage\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score","914260d2":"# Loading the dataset\ncar_data = pd.read_csv(\"..\/input\/vehicle-dataset-from-cardekho\/car data.csv\")","65f79056":"# Head\ncar_data.head()","520af6b8":"# Car Details\ncar_details = pd.read_csv(\"..\/input\/vehicle-dataset-from-cardekho\/CAR DETAILS FROM CAR DEKHO.csv\")","de2f6abe":"car_details.head()","1afd73fa":"# Checking the missing values and datatypes of the features\ncar_data.info()","bd638e9d":"# Checking the distribution of the data\ncar_data.describe()","bb91a804":"car_data['Car_Name'].value_counts()","67eafc9f":"# Dropping car name column\ncar_data.drop(['Car_Name'], axis = 1, inplace = True)","a07e526c":"# Saving the original data\ndata = car_data.copy()","956d142e":"data.head()","30cec37a":"# Creating a new columns with the age of the car\ndata['car_age'] = 2020 - data['Year']","86d965dd":"# Dropping the year column\ndata.drop('Year', axis =1, inplace = True)","a74f6d9d":"# Scatterplot to see the trend of selling price over the years\nsns.scatterplot(x = data['car_age'], y = data['Selling_Price'], data = data)","05acd9d7":"# Scatterplot to see the impact of the 'Kms_Driven' on the sale of the car \nsns.scatterplot(x = data['Kms_Driven'], y = data['Selling_Price'], data = data)","4d800a5f":"# Barplot to see how 'Seller_Type' affects the 'Selling_Price'\nsns.barplot(x = data['Seller_Type'], y = data['Selling_Price'])","6cddba9b":"# Barplot to see how 'Transmission' affects the 'Selling_Price'\nsns.barplot(x = data['Transmission'], y = data['Selling_Price'])","f6fd54df":"# Barplot to see how 'Owner' affects the 'Selling_Price'\nsns.barplot(x = data['Owner'], y = data['Selling_Price'])","9e65582e":"plt.figure(figsize=(12,10))\nsns.jointplot(x='Present_Price',y='Selling_Price',data=data)\nplt.title('Present_Price vs Selling_Price',fontweight=\"bold\", size=20)\nplt.show()","918d1ff6":"plt.figure(figsize=(12,10))\nsns.jointplot(x='Kms_Driven',y='Selling_Price',data=data, kind = 'hex')\nplt.title('Kms_Driven vs Selling_Price',fontweight=\"bold\", size=20)\nplt.show()","ba24bd78":"data.head()","188d50e4":"plt.figure(figsize = (10,4))\nplt.subplot(1,2,1)\nsns.violinplot(x = 'Fuel_Type',y ='Selling_Price', data = data)\nplt.subplot(1,2,2)\nsns.violinplot(x = 'Transmission',y ='Selling_Price', data = data)","f76283e7":"data.head()","85dccf98":"# Dummy Encoding\n\nfuel_type = pd.get_dummies(data['Fuel_Type'], drop_first= True)\nseller_type = pd.get_dummies(data['Seller_Type'], drop_first= True)\ntransmission = pd.get_dummies(data['Transmission'], drop_first= True)\n\ndata = pd.concat([data,fuel_type,seller_type,transmission], axis = 1)\n","74794452":"data.head()","ee8bff12":"# Dropping the dummified columns\n\ndata.drop(['Fuel_Type','Seller_Type','Transmission'], axis = 1, inplace = True)","7dc867b4":"data.head()","913bf267":"from sklearn.tree import DecisionTreeRegressor","bafe842e":"# Setting the max_depth at 5\ndt = DecisionTreeRegressor(random_state=42)","99b11e42":"np.random.seed(0)\ndf_train, df_test = train_test_split(data, train_size=0.8, random_state=100)","be11d62d":"df_train.shape, df_test.shape","5a76a258":"y_train = df_train.pop(\"Selling_Price\")\nX_train = df_train\n\ny_test = df_test.pop(\"Selling_Price\")\nX_test = df_test","52b02fc4":"# Fitting the decision tree\ndt.fit(X_train, y_train)","1aaca09a":"# Visualization of the decision tree\nfrom sklearn.tree import plot_tree\nplt.figure(figsize=(40,12))\nplot_tree(dt, feature_names = df_train.columns,filled=True);","c28ade6e":"# Making Prediction on training data set\ny_train_pred = dt.predict(X_train)","970d7efa":"# Clearly model has over-fitted the data\nr2_score(y_train, y_train_pred)","a670dec4":"# Making Prediction on test data set\ny_test_pred = dt.predict(X_test)","d0d10bd0":"# Not a very good score as compared to the training data r2 score\nr2_score(y_test, y_test_pred)","c4c83761":"dt = DecisionTreeRegressor(random_state = 42)","e9024607":"from sklearn.model_selection import GridSearchCV","c9645c06":"# Create the parameter grid based on the results of random search \nparams = {\n    'max_depth': [11,13,15,17,19],\n    'min_samples_leaf': [1,3,5,7],\n    'criterion': [\"mse\",\"friedman_mse\", \"mae\"]\n}","c23c220c":"# Instantiate the grid search model\ngrid_search = GridSearchCV(estimator=dt, \n                           param_grid=params, \n                           cv=4, n_jobs=-1, verbose=1, scoring = 'r2')","315305a5":"%%time\ngrid_search.fit(X_train, y_train)","4bcac603":"score_df = pd.DataFrame(grid_search.cv_results_)\nscore_df.head()","916f2f98":"score_df.nlargest(5,\"mean_test_score\")","f6913308":"grid_search.best_estimator_","fe58b61f":"dt_best = grid_search.best_estimator_","dd3edc95":"def evaluate_model(dt_regressor):\n    print(\"Train r2 :\", r2_score(y_train, dt_regressor.predict(X_train)))\n    \n    \n    print(\"-\"*50)\n    print(\"Test r2 :\", r2_score(y_test, dt_regressor.predict(X_test)))\n   ","87e1a593":"evaluate_model(dt_best)","8c87c2ea":"# Importing the Random Forest Library\nfrom sklearn.ensemble import RandomForestRegressor","e0b61269":"rf = RandomForestRegressor(random_state=42, n_jobs=-1, max_depth=11, min_samples_leaf=3)","0f4d0ab8":"# Fitting the model into training data\nrf.fit(X_train, y_train)","08e1fac4":"sample_tree = rf.estimators_[30]","e9d6ba35":"sample_tree","80b13fd1":"# Making predictions for training and test data\ny_train_pred = rf.predict(X_train)\ny_test_pred = rf.predict(X_test)","24081064":"# R2 score on the training data\nr2_score(y_train, y_train_pred)","137d535c":"# R2 score on test data\nr2_score(y_test, y_test_pred)","8c369530":"# Create the parameter grid based on the results of random search \nn_estimators = np.arange(100,200,10)\nparams = {\n    'n_estimators': n_estimators,\n    'max_depth': [11,13,15,17,19],\n    'min_samples_leaf': [1,3,5,7],\n    'criterion': [\"mse\",\"friedman_mse\", \"mae\"]\n}","a976ac57":"rf = RandomForestRegressor(random_state=42)","67ac6828":"# Instantiate the grid search model\ngrid_search = GridSearchCV(estimator=rf, \n                           param_grid=params, \n                           cv=4, n_jobs=-1, verbose=1, scoring = 'r2')","8535db3b":"%%time\ngrid_search.fit(X_train, y_train)","386f4422":"grid_search.best_estimator_","119d7f32":"def evaluate_model(rf_regressor):\n    print(\"Train r2 :\", r2_score(y_train, rf_regressor.predict(X_train)))\n    \n    \n    print(\"-\"*50)\n    print(\"Test r2 :\", r2_score(y_test, rf_regressor.predict(X_test)))","cba80668":"# Best Estimator\nrf_best = grid_search.best_estimator_","649127a2":"# Getting a better r2 score of 0.83\nevaluate_model(rf_best)","55c57a5b":"#### We can see that the price decreases with increase in age ","b0d7ef95":"### With Hypertuning the parameters","1e5375e3":"### Splitting the data into train and test dataset","a02dcbf5":"# Using Random Forest Regressor","341f772a":"#### Distribution of Selling_Price with respect to Fuel_Type and Transmission","3086fc5a":"### Without Hyperparameter tunning","d33261cf":"### With Hyperparameter tunning","5e573e6c":"# Predicting Car Price","5583132e":"# Conclusion\n\n#### We used decision tree and random forest and found that random forest after hyperparameter tuning performed better than random forest","e46c6805":"#### The above plot show that cars with tranmission type 'Automatic' is way higher than 'Manual' transmission type","247d550b":"#### Seems like there is no missing values","ef5c1b5b":"# Using Decision Tree","3ae2d6b8":"# EDA","c66e78eb":"#### Surprising for the data we have the selling price of 'Third person' is more than 'Second person', this could because of outliers.","156e325e":"#### Most of tha data is clustered within 100000 'Kms-driven' showing that people do not prefer cars driven more than '100000' kms","fe4afa10":"# Data Preparation","5833f6a1":"#### We can see that getting a car deal from a dealer is convinient but the price difference is significant "}}