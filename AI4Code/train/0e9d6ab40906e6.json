{"cell_type":{"c2943530":"code","28b06130":"code","18d290c4":"code","981b0344":"code","ded9b760":"code","08ea20b0":"code","b6765831":"code","359a0b34":"code","29f3b379":"code","1140c106":"code","784b0543":"code","11b435e6":"code","93f9f1ca":"code","2137201a":"code","3cd31a64":"code","1a37bcfd":"code","70572467":"code","f983714b":"code","47792a02":"code","de8c0030":"code","db7e0eea":"code","bbc0881c":"code","a9dc7075":"code","0324366c":"code","a53aaef2":"code","6044d6b9":"code","05579447":"code","d136583c":"code","a7686199":"code","50a55374":"code","d1dc060b":"code","4c103011":"code","41dba0e4":"code","8b3eb4f3":"code","c37d6349":"code","4fdf16c2":"markdown","223ba896":"markdown","df510739":"markdown","5d0d2801":"markdown","7cb3c301":"markdown","a4063fd8":"markdown","a5224863":"markdown","d4d10d3a":"markdown","b352d58b":"markdown","c2a82640":"markdown","9ae40ff6":"markdown","d5490ad2":"markdown","463b78c1":"markdown","6fc635cc":"markdown","57398a56":"markdown","55625b25":"markdown","45a84ef0":"markdown"},"source":{"c2943530":"! pip install --quiet chart-studio","28b06130":"import numpy as np\nimport dask as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nimport fastai\nfrom fastai import *\nfrom fastai.text import *\nimport os\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import iplot\nfrom wordcloud import WordCloud\nfrom plotly.offline import iplot\nimport re","18d290c4":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\nplt.style.use('fivethirtyeight')","981b0344":"data = pd.read_csv(\"..\/input\/twitter-airline-sentiment\/Tweets.csv\")\ndata.head()","ded9b760":"train_data = data[['airline_sentiment', 'text']]\ntrain_data.head()","08ea20b0":"train_data.info()\ntrain_data.describe()","b6765831":"train_data.isna().sum()","359a0b34":"vals = [len(train_data[train_data['airline_sentiment']=='negative']['airline_sentiment']), len(train_data[train_data['airline_sentiment']=='positive']['airline_sentiment']), len(train_data[train_data['airline_sentiment']=='neutral']['airline_sentiment'])]\nidx = ['negative', 'positive', 'neutral']\nfig = px.pie(\n    train_data,\n    names='airline_sentiment',\n    title='Target Value Distribution Chart',\n    height=400,\n    width=750\n)\niplot(fig)","29f3b379":"neg = train_data[train_data['airline_sentiment']=='negative']['text'].str.len()\npos = train_data[train_data['airline_sentiment']=='positive']['text'].str.len()\nneu = train_data[train_data['airline_sentiment']=='neutral']['text'].str.len()\n\nfig = make_subplots(rows=1, cols=3)\n\nfig.add_trace(\n    go.Histogram(x=list(neg), name='Negative Tweets'),\n    row=1, \n    col=1\n)\n\nfig.add_trace(\n    go.Histogram(x=list(pos), name='Positive Tweets'),\n    row=1, \n    col=2,\n)\n\nfig.add_trace(\n    go.Histogram(x=list(neu), name='Neutral Tweets'),\n    row=1, \n    col=3,\n)\n\n\nfig.update_layout(height=400, width=800, title_text=\"Character Count\")\niplot(fig)","1140c106":"neg = train_data[train_data['airline_sentiment']=='negative']['text'].str.split().map(lambda x: len(x))\npos = train_data[train_data['airline_sentiment']=='positive']['text'].str.split().map(lambda x: len(x))\nneu = train_data[train_data['airline_sentiment']=='neutral']['text'].str.split().map(lambda x: len(x))\n\nfig = make_subplots(rows=1, cols=3)\n\nfig.add_trace(\n    go.Histogram(x=list(neg), name='Negative Tweets'),\n    row=1, \n    col=1\n)\n\nfig.add_trace(\n    go.Histogram(x=list(pos), name='Positive Tweets'),\n    row=1, \n    col=2,\n)\n\nfig.add_trace(\n    go.Histogram(x=list(neu), name='Neutral Tweets'),\n    row=1, \n    col=3,\n)\n\nfig.update_layout(height=500, width=850, title_text=\"Word Count\")\niplot(fig)","784b0543":"neg = train_data[train_data['airline_sentiment']=='negative']['text'].str.split().map(lambda x: [len(j) for j in x]).map(lambda x: np.mean(x)).to_list()\npos = train_data[train_data['airline_sentiment']=='positive']['text'].str.split().map(lambda x: [len(j) for j in x]).map(lambda x: np.mean(x)).to_list()\nneu = train_data[train_data['airline_sentiment']=='neutral']['text'].str.split().map(lambda x: [len(j) for j in x]).map(lambda x: np.mean(x)).to_list()\n\n\nfig = ff.create_distplot([neg, pos, neu], ['Negative', 'Positive', 'Neutral'])\nfig.update_layout(height=500, width=800, title_text=\"Average Word Length Distribution\")\niplot(fig)","11b435e6":"neg = train_data[train_data['airline_sentiment']=='negative']['text'].apply(lambda x: len(set(str(x).split()))).to_list()\npos = train_data[train_data['airline_sentiment']=='positive']['text'].apply(lambda x: len(set(str(x).split()))).to_list()\nneu = train_data[train_data['airline_sentiment']=='neutral']['text'].apply(lambda x: len(set(str(x).split()))).to_list()\n\nfig = ff.create_distplot([neg, pos, neu], ['Negative', 'Positive', 'Neutral'])\nfig.update_layout(height=500, width=800, title_text=\"Unique Word Count Distribution\")\niplot(fig)","93f9f1ca":"neg = train_data[train_data['airline_sentiment']=='negative']['text'].str.split().map(lambda x: len([w for w in str(x).lower().split() if 'http' in w or 'https' in w or 'ftp' in w]))\npos = train_data[train_data['airline_sentiment']=='positive']['text'].str.split().map(lambda x: len([w for w in str(x).lower().split() if 'http' in w or 'https' in w or 'ftp' in w]))\nneu = train_data[train_data['airline_sentiment']=='neutral']['text'].str.split().map(lambda x: len([w for w in str(x).lower().split() if 'http' in w or 'https' in w or 'ftp' in w]))\n\nfig = make_subplots(rows=1, cols=3)\n\nfig.add_trace(\n    go.Histogram(x=list(neg), name='Negative Tweets'),\n    row=1, \n    col=1\n)\n\nfig.add_trace(\n    go.Histogram(x=list(pos), name='Positive Tweets'),\n    row=1, \n    col=2,\n)\n\nfig.add_trace(\n    go.Histogram(x=list(neu), name='Neutral Tweets'),\n    row=1, \n    col=3,\n)\n\nfig.update_layout(height=500, width=850, title_text=\"URL Count\")\niplot(fig)","2137201a":"negative = \" \".join(train_data[train_data['airline_sentiment'] == 'negative']['text'].to_list())\npositive = \" \".join(train_data[train_data['airline_sentiment'] == 'positive']['text'].to_list())\nneutral = \" \".join(train_data[train_data['airline_sentiment'] == 'neutral']['text'].to_list())\n\nfig, ax = plt.subplots(1, 3, figsize=(15,15))\nng_wlc = WordCloud(width=256, height=256, collocations=False).generate(negative)\nps_wlc = WordCloud(width=256, height=256, collocations=False).generate(positive)\nne_wlc = WordCloud(width=256, height=256, collocations=False).generate(neutral)\nwcs = [ng_wlc, ps_wlc, ne_wlc]\ntitls = [\"Negative Tweets\", \"Positive Tweets\", \"Neutral Tweets\"]\n\nfor num, el in enumerate(wcs):\n    ax[num].imshow(el)\n    ax[num].axis('off')\n    ax[num].set_title(titls[num])","3cd31a64":"# Get the stopwords\nst_wrds = stopwords.words(\"english\")","1a37bcfd":"# Remove everything except basic text characters\ntrain_data['text'] = train_data['text'].str.replace(\"[^a-zA-Z]\", \" \").str.lower()\ntrain_data.sample(5)","70572467":"# Tokenizing the data\ntokenized_data = train_data['text'].apply(lambda x: x.split())\ntokenized_data = tokenized_data.apply(lambda x: [word for word in x if word not in st_wrds])","f983714b":"tokenized_data.sample(5)","47792a02":"# Replace the normal text with tokenized text\ntok = []\nfor i in range(len(train_data)):\n    t = ' '.join(tokenized_data[i])\n    tok.append(t)\ntrain_data['text'] = tok\ntrain_data.sample(5)","de8c0030":"# Change the column name and encode the labels\ntrain_data = train_data.rename(columns={'airline_sentiment':'label'})\ntrain_data['label'] = train_data['label'].apply(lambda x: 0 if x=='negative' else (1 if x=='positive' else 2))","db7e0eea":"# Let us now split the dataset into training and validation sets\nsplit_pcent = 0.15  # How much percent of data should go into testing set\nsplit = int(split_pcent * len(train_data))\n\nshuffled_set = train_data.sample(frac=1).reset_index(drop=True)   # Shuffle the data\nvalid_set = shuffled_set[:split]   # Get everything till split number\ntrain_set = shuffled_set[split:]   # Get everything after split number","bbc0881c":"# Make a Language Model Data Bunch from our train set\ndata_bunch = TextLMDataBunch.from_df(train_df=train_set, valid_df=valid_set, path=\"\")","a9dc7075":"# Make the data classifier\ndata_clf = TextClasDataBunch.from_df(path=\"\", train_df=train_set, valid_df=valid_set, vocab=data_bunch.train_ds.vocab, bs=16)","0324366c":"# Define the language learner model and fit for one epoch\nlearner = language_model_learner(data_bunch, arch=AWD_LSTM, drop_mult=0.5)\n\nlearner.fit_one_cycle(1, 1e-2)","a53aaef2":"# Try unfreezing last 3 layers first\nlayers_to_unfreeze = [1, 2, 3]\nfor i in layers_to_unfreeze:\n    learner.freeze_to(-i)\n    learner.fit_one_cycle(1, 1e-2)","6044d6b9":"# Now let's unfreeze all layers and train them\nlearner.unfreeze()\nlearner.fit_one_cycle(1, 1e-2)","05579447":"learner.save_encoder('learn_encoder')","d136583c":"clf = text_classifier_learner(data_clf, arch=AWD_LSTM, drop_mult=0.5)\nclf.load_encoder('learn_encoder')","a7686199":"clf.fit_one_cycle(1, 1e-2)","50a55374":"# Let's unfreeze all it's layers and train it.\nclf.unfreeze()\nclf.fit_one_cycle(1)","d1dc060b":"# Unfreeze last layer and give it a learning rate range using `slice()` function\n# This way it'll use the learning rates from 5e-3\/2->5e-3 (i.e: 0.0025 -> 0.005)\nclf.freeze_to(-1)\nclf.fit_one_cycle(1, slice(5e-3\/2., 5e-3))","4c103011":"# No let's unfreeze all the layers and try DFT again\nclf.unfreeze()\nclf.fit_one_cycle(1, slice(2e-3\/100, 2e-3))","41dba0e4":"# The Classifier classifies it Neutral, which is right\nclf.predict(\"Hello, how are you doing?\")","8b3eb4f3":"# The Classifier classifier it Negative, which is right\nclf.predict(\"Wow, the flight duration was boring and the passenger treatement was not the best I have seen!\")","c37d6349":"# The Classifier classifier it Positive, which is right\nclf.predict(\"Great service and good staff, I would recommend it!\")","4fdf16c2":"# 1. Importing and Data Loading\nAuthor: Tanay Mehta\n* LinkedIn: https:\/\/www.linkedin.com\/in\/tanaymehta28\/\n* Blog: https:\/\/tanaymehta.codes\n* Website: http:\/\/tanaymehta.codes\n\nNote: I am using Dask rather than pandas because it's faster on bigger datasets","223ba896":"#### Improvements\n* Since the data is a bit imbalanced, Accuracy won't be the best bet in the long run. We could also use Precision, Recall and F1 Score.\n* Further exploration of Discriminative Fine Tuning would be surely helpful to obtain better results.\n* Better Data Preprocessing (like using Porter-Stemming Algorithm), using other vocab dictionary and better data tokenization techniques will further increase the accuracy.\n* Using other models such as BERT, would achieve a better accuracy at classifying tweets.","df510739":"# 2. EDA and Data Preprocessing\nThe Dataset consists of many features, however every features isn't of importance to sentiment classification. There is also a very significant presence of NuLL values in both important and non-important features.\nFor this, I am just taking 2 features which are the most important ones; `text` and `airline_sentiment` (target)","5d0d2801":"### 3.2 Unfreezing Layers\nTill now, the internal layers were not training as they were freezed. Let's now train our model by un-freezing layer after layer.","7cb3c301":"### 2.8 Word Cloud\nFinally, we make a word cloud of the most appearing words in negative, positive and neutral categories","a4063fd8":"### 2.3 Character frequency Count\nAlso, let's count the frequency of characters in the data","a5224863":"### 3.3 Training the Classifier\nLet's just now train the classifier using the encoder we trained on the data.","d4d10d3a":"### 2.2 Target Values\nLet's now look at the distribution of target values (`airline_sentiment`)","b352d58b":"### 3.3 Discriminative Fine Tuning\nSince the AWD_LSTM architecture consists of 3-Stacked LSTMs, the level of information captured by every layer will be more and more complex the deeper we go.\nFor this, it makes sense to use different learning rates for different layers.\nSo, Let us try discriminative fine tuning by un-freezing and fine tuning with custom learning rates","c2a82640":"### 2.5 Average Word Length Distribution\nOn an average how many words are present in each set","9ae40ff6":"### 2.7 URL Count\nHow many URLs are present in each tweet","d5490ad2":"### 2.1 Missing Values\nAs seen below, there aren't any missing values in the dataset","463b78c1":"# 4. Testing and Conclusion\nAfter all the different learning rates and methods we used, the best accuracy we got was `0.811`.\nLet's try and predict a few sentences using the classifier we trained.\n\nKeep in mind about the labels and we encoded them in Data Preprocessing.\n* 0 = Negative\n* 1 = Positive\n* 2 = Neutral","6fc635cc":"### 2.6 Unqiue Word Count Distribution\nHow many unique words are in each set","57398a56":"# 3. Training the Model\n### 3.1 Vanilla Training\nLet's first train the model out of the box (we'll get the learning rate and then fit the model for 2 epochs using that learning rate). Although, it won't perform well.","55625b25":"### 2.9 Cleaning and Tokenizing\nLet's just clean the data (by removing the hyperlinks and other unwanted elements","45a84ef0":"### 2.4 Word Count Distribution"}}