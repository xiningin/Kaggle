{"cell_type":{"81384f5e":"code","4160d7a7":"code","3bb91ff8":"code","3d85c71d":"code","6f1c7d43":"code","7408dda9":"code","7bb6e2bf":"code","757de88c":"code","a3935eb7":"code","9ce5324b":"code","23e09289":"code","8c513877":"code","d96f8668":"code","ae9b4781":"code","93b43b0c":"code","8b543f4b":"code","d8e30bfc":"code","48d286a2":"code","88be80dc":"code","6d559bb6":"code","f6d85f89":"code","aba113ae":"code","4b6acdc5":"code","0c700a37":"code","0e61374a":"code","fef819b7":"code","d620f9c1":"code","47c6e6be":"code","3917bfba":"code","957c5e3f":"code","8c037132":"code","abb2e696":"code","e9a26085":"code","3020fc4f":"code","2cc7a3a2":"code","6d636bf1":"code","f45a50df":"code","7a78e2ae":"markdown","87250e56":"markdown","b0661d33":"markdown","2e22fcba":"markdown","ca5d2295":"markdown","62edede6":"markdown","b9dc154e":"markdown","6979b239":"markdown","57abf139":"markdown","6d4ce3e8":"markdown","1bb2edd8":"markdown","ac5355e4":"markdown","6920a928":"markdown","f04d194c":"markdown","c5bb6b4e":"markdown","82e0d51e":"markdown","42168931":"markdown","1c398b72":"markdown","644f1e86":"markdown","53ce1ea6":"markdown","4bc3115b":"markdown","83c114ec":"markdown","4b8b7764":"markdown","f87b25d6":"markdown","b8b49316":"markdown"},"source":{"81384f5e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4160d7a7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom dateutil.parser import parse\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\nfrom statsmodels.tsa.stattools import adfuller\nfrom tqdm import tqdm_notebook\nfrom itertools import product\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.preprocessing.sequence import TimeseriesGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nimport math\nfrom sklearn.metrics import mean_squared_error as mse","3bb91ff8":"# Import all of them \nsales=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\n\n# settings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nitem_cat=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")\nitem=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nsub=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv\")\nshops=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/shops.csv\")\ntest=pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/test.csv\")","3d85c71d":"sales.head()","6f1c7d43":"sales['date'] = pd.to_datetime(sales['date'],format = '%d.%m.%Y')\n","7408dda9":"ts=sales.groupby([\"date\"])[\"item_cnt_day\"].sum()\nts.astype('float')\nts=ts.to_frame()\nts.reset_index(inplace=True)\nts.date = pd.to_datetime(ts.date)\n\n","7bb6e2bf":"# Draw Plot\nplt.figure(figsize=(12,8), dpi= 80)\nplt.plot( 'item_cnt_day', data=ts)\n\n# Decoration\nplt.ylim(50, 15000)\nplt.xticks( rotation=0, horizontalalignment='center', alpha=.7)\nplt.yticks(alpha=.7) \nplt.title(\"N\u00ba o sold items in a day from 2013 - 2016\")\nplt.grid(axis='both', alpha=.3)\n\n# Remove borders\nplt.gca().spines[\"top\"].set_alpha(0.0)    \nplt.gca().spines[\"bottom\"].set_alpha(0.3)\nplt.gca().spines[\"right\"].set_alpha(0.0)    \nplt.gca().spines[\"left\"].set_alpha(0.3)   \nplt.show()","757de88c":"stats.boxcox(ts['item_cnt_day'])","a3935eb7":"ts['item_box']=stats.boxcox(ts['item_cnt_day'])[0]","9ce5324b":"# Draw Plot\nplt.figure(figsize=(12,8), dpi= 80)\nplt.plot( 'item_box', data=ts)\n\n# Decoration\nplt.ylim(2.525, 2.7)\nplt.xticks( rotation=0, horizontalalignment='center', alpha=.7)\nplt.yticks(alpha=.7) \nplt.title(\"N\u00ba o sold items in a day from 2013 - 2016\")\nplt.grid(axis='both', alpha=.3)\n\n# Remove borders\nplt.gca().spines[\"top\"].set_alpha(0.0)    \nplt.gca().spines[\"bottom\"].set_alpha(0.3)\nplt.gca().spines[\"right\"].set_alpha(0.0)    \nplt.gca().spines[\"left\"].set_alpha(0.3)   \nplt.show()","23e09289":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(12,4), dpi= 80)\nplot_acf(ts.item_box.tolist(), ax=ax1, lags=100)\nplot_pacf(ts.item_box.tolist(), ax=ax2, lags=80)\n\n# Decorate\n# lighten the borders\nax1.spines[\"top\"].set_alpha(.3); ax2.spines[\"top\"].set_alpha(.3)\nax1.spines[\"bottom\"].set_alpha(.3); ax2.spines[\"bottom\"].set_alpha(.3)\nax1.spines[\"right\"].set_alpha(.3); ax2.spines[\"right\"].set_alpha(.3)\nax1.spines[\"left\"].set_alpha(.3); ax2.spines[\"left\"].set_alpha(.3)\n\n# font size of tick labels\nax1.tick_params(axis='both', labelsize=12)\nax2.tick_params(axis='both', labelsize=12)\nplt.show()","8c513877":"# Import Data\nts.set_index(ts['date'], inplace=True)\n\n# Decompose\nresult = seasonal_decompose(ts['item_box'], model='multiplicative')\n\n# Plot\nplt.rcParams.update({'figure.figsize': (10,10)})\nresult.plot().suptitle('Time Series Decomposition of sold items')\nplt.show()","d96f8668":"diff = ts.diff()\ndiff.drop(diff.index[0], inplace=True)","ae9b4781":"result = seasonal_decompose(diff['item_box'], model='additive')\n# Plot\nplt.rcParams.update({'figure.figsize': (10,10)})\nresult.plot().suptitle('Time Series Decomposition of sold items')\nplt.show()","93b43b0c":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(12,4), dpi= 80)\nplot_acf(diff.item_box.tolist(), ax=ax1, lags=100)\nplot_pacf(diff.item_box.tolist(), ax=ax2, lags=80)\n\n# Decorate\n# lighten the borders\nax1.spines[\"top\"].set_alpha(.3); ax2.spines[\"top\"].set_alpha(.3)\nax1.spines[\"bottom\"].set_alpha(.3); ax2.spines[\"bottom\"].set_alpha(.3)\nax1.spines[\"right\"].set_alpha(.3); ax2.spines[\"right\"].set_alpha(.3)\nax1.spines[\"left\"].set_alpha(.3); ax2.spines[\"left\"].set_alpha(.3)\n\n# font size of tick labels\nax1.tick_params(axis='both', labelsize=12)\nax2.tick_params(axis='both', labelsize=12)\nplt.show()","8b543f4b":"diff_s = diff.diff(7)\ndiff_s.drop(diff_s.index[0:7], inplace=True)","d8e30bfc":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(12,4), dpi= 80)\nplot_acf(diff_s.item_box.tolist(), ax=ax1, lags=100)\nplot_pacf(diff_s.item_box.tolist(), ax=ax2, lags=80)\n\n# Decorate\n# lighten the borders\nax1.spines[\"top\"].set_alpha(.3); ax2.spines[\"top\"].set_alpha(.3)\nax1.spines[\"bottom\"].set_alpha(.3); ax2.spines[\"bottom\"].set_alpha(.3)\nax1.spines[\"right\"].set_alpha(.3); ax2.spines[\"right\"].set_alpha(.3)\nax1.spines[\"left\"].set_alpha(.3); ax2.spines[\"left\"].set_alpha(.3)\n\n# font size of tick labels\nax1.tick_params(axis='both', labelsize=12)\nax2.tick_params(axis='both', labelsize=12)\nplt.show()","48d286a2":"def SARIMA_PARAMETERS(parameters,time_serie):\n    \"\"\"\n    parameters-> list of SARIMA parameters (p,d,q,P,D,Q,s)\n    \n    \"\"\"\n    list_param=[]\n    \n    for i in tqdm_notebook(parameters):\n        try:\n            model=SARIMAX(time_serie, order=(i[0], i[1], i[2]), seasonal_order=(i[3], i[4], i[5], i[6])).fit(disp=-1)\n        except:\n            continue\n            \n        aic = model.aic\n        list_param.append([i, aic])   \n        \n    list_param_df = pd.DataFrame(list_param)\n    list_param_df.columns = ['(p,d,q)x(P,D,Q)s', 'AIC']\n    list_param_df = list_param_df.sort_values(by='AIC', ascending=True).reset_index(drop=True)\n    \n    return list_param_df","88be80dc":"p = range(0, 3, 1)\nd = range(1,2)\nq = range(0, 3, 1)\nP = range(0, 3, 1)\nD = range(1, 2, 1)\nQ = range(0, 3, 1)\ns = range(7,8)\nparameters = product(p,d, q, P,D, Q,s)\nparameters_list = list(parameters)\n","6d559bb6":"results_df=SARIMA_PARAMETERS(parameters_list,ts['item_box'][0:1004])","f6d85f89":"results_df","aba113ae":"model = SARIMAX(ts['item_box'][0:1004], order=(1, 1, 1), seasonal_order=(1, 1, 1, 7))\nres=model.fit(dis=-1)\nfcast = res.get_forecast(30)","4b6acdc5":"a=res.plot_diagnostics(figsize=(15,12))","0c700a37":"ts['arima_model'] = res.fittedvalues\nforecast = res.predict(start=ts['item_box'][:1004].shape[0], end=ts['item_box'].shape[0]-1)\nforecast = ts['arima_model'][:1004].append(forecast)\nplt.figure(figsize=(18, 7.5))\nplt.plot(forecast[10:1004], color='r', label='model')\nplt.plot(ts['item_box'][10:1004], label='actual')\n\n\nplt.legend()\nplt.show()","0e61374a":"x=list(range(1,31))\ny_error =[abs(fcast.conf_int(alpha=0.01)['lower item_box'].values-forecast[1004:].values), fcast.conf_int(alpha=0.01)['upper item_box'].values-forecast[1004:].values] \n","fef819b7":"plt.figure(figsize=(15, 7.5))\n\nplt.errorbar(x,forecast[1004:].values,yerr=y_error,fmt='o')\nplt.errorbar(x,ts['item_box'][1004:].values, label='actual', fmt='o',color='r')\n\nplt.show()","d620f9c1":"scaler = MinMaxScaler()\nscaler.fit(ts.take([ 2], axis=1))\nscaled_train_data = scaler.transform(ts.take([2], axis=1)[0:1004])\n","47c6e6be":"n_input = 12\nn_features= 1\ngenerator = TimeseriesGenerator(scaled_train_data, scaled_train_data, length=n_input, batch_size=1)\n\n\nlstm_model = Sequential()\nlstm_model.add(LSTM(200, activation='relu', input_shape=(n_input, n_features)))\nlstm_model.add(Dense(1))\nlstm_model.compile(optimizer='adam', loss='mse')\n\nlstm_model.summary()","3917bfba":"lstm_model.fit_generator(generator,epochs=20)\n","957c5e3f":"plt.figure(figsize=(15, 7.5))\nlosses_lstm = lstm_model.history.history['loss']\nplt.figure(figsize=(12,4))\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.xticks(np.arange(0,21,1))\nplt.plot(range(len(losses_lstm)),losses_lstm);","8c037132":"lstm_predictions_scaled = list()\n\nbatch = scaled_train_data[-n_input:]\ncurrent_batch = batch.reshape((1, n_input, n_features))\n\nfor i in range(30):   \n    lstm_pred = lstm_model.predict(current_batch)[0]\n    lstm_predictions_scaled.append(lstm_pred) \n    current_batch = np.append(current_batch[:,1:,:],[[lstm_pred]],axis=1)","abb2e696":"lstm_predictions = scaler.inverse_transform(lstm_predictions_scaled)","e9a26085":"test_data=pd.DataFrame()\ntest_data['LSTM_Predictions'] = lstm_predictions.reshape(30)\ntest_data.index=ts.index[1004:]","3020fc4f":"plt.figure(figsize=(15, 7.5))\nplt.errorbar(x,test_data['LSTM_Predictions'],fmt='o')\nplt.errorbar(x,ts['item_box'][1004:], label='actual', fmt='o', color='r')\n\n\nplt.show()","2cc7a3a2":"def rmse(y_true, y_pred):\n    return math.sqrt(mse(y_true, y_pred))","6d636bf1":"rmse(ts['item_box'][1004:],test_data['LSTM_Predictions'])","f45a50df":"rmse(ts['item_box'][1004:],forecast[1004:])","7a78e2ae":"<h1 style='background:lightblue; border:0; color:black'><center>Time series analysis for predict daily sales<\/center><\/h1>","87250e56":"Our series has some noise but is slightly better than the previous case. \nThe next step is study the autocorrelation and the partial autocorrelation function.","b0661d33":"As we can see our function has 7 parameters. The p,q correspond with the order of the ARMA model associated, the P and Q are the order of the seasonal component. The d is the number of differentiation in the model, and D and s are the number of differentiations and the lag of the seasonal component. The reader could think that why we take care about the number of differentiations and the lag of the seasonal component in the previus section, well the answer is simple, if we have the number of differenciations we have less parameters to determinate. Right now we have a total of 81 posible combinations, but the number increase incredible fast if we have to estime three more parameters.","2e22fcba":"The best model is the $(1, 1, 1)( 1, 1, 1)_{7}$ with an aic socre of -6257","ca5d2295":"$$ y_{i}^{(\\lambda)}= \\left\\{\\begin{matrix}\n\\frac{y_{i}^{\\lambda}-1}{\\lambda} \\quad   \\lambda\\neq 0\\\\\nln(y_{i}) \\quad  \\lambda = 0\\end{matrix}\\right. $$","62edede6":"The autocorrelation and the partial autocorrelation function suggest that the time series has a seasonal and a trend component. In the next plot can be watching better.","b9dc154e":"<h2 style='background:lightblue; border:0; color:black'><center>Advanced methods<\/center><\/h2>\n","6979b239":"<h2 style='background:lightblue; border:0; color:black'><center>Box-Cox transform<\/center><\/h2>\n","57abf139":"<h2 style='background:lightblue; border:0; color:black'><center>Comparison<\/center><\/h2>","6d4ce3e8":"Our time series has the form","1bb2edd8":"Along this notebook we will focus in analyse the total number of sold items of a company. Instead of predict the number of a particular product in a store sold over a month, we will try to predict the total number of sold in over all the stores.\n\nIn the first part we will make a classical approach, using ARIMA models. In the second part we will use a slightly different methodology, using Recurrent Neural Networks (RNN), widely used in the COVID-19 analysis.","ac5355e4":"As we can see in the plot, our residuals don't fall a normal distribution, but at least they are uncorrelated.","6920a928":"In blue we have the prediction with a confidence band of 95% and in red is the real data.","f04d194c":"<h2 style='background:lightblue; border:0; color:black'><center>The ARIMA model<\/center><\/h2>\n","c5bb6b4e":"The data we use for this analysis is the one propose in the kaggle competition Predict Future Sales.","82e0d51e":"As we can see our time series has a very noisy form. To reduce all that noise we will make a Box-Cox transform.","42168931":"We use the function boxcox of the packet stats, to calculate the transform and the $\\lambda$ parameter","1c398b72":"It is obvious that our time series has a seasonality with lag 7, and it something that makes sense if one thinks about that this lag has the same length as the number of the days of the week.To solve this problem we will make a differentiation with lag 7.","644f1e86":"In red we have the model and the real data is in blue. As we can see the fit is quite good in all the serie. The next part is to compare the test data with the prediction.","53ce1ea6":"We know that the time series has a trend component. The first thing we have to do is eliminate that trend. To do this we differentiate with lag 1.","4bc3115b":"We use all the time serie except of the last 30 days, which we will use for test our model.","83c114ec":"Now we have a series that don't have the trend and the seasonality. We will try now to find the right parameters of the ARIMA model. To do this we make a simple function to find this parameters based on the aic score.","4b8b7764":"The Box-Cox transformation is defined as","f87b25d6":"The trend has gone. We will see what happens now with the autocorrelation and the partial autocorrelation function.","b8b49316":"As we mentioned in the introduction, we only focus in the total number of sold item, so that the next is to sum over all the products grouping by days."}}