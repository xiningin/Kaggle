{"cell_type":{"510b6324":"code","f0d7f604":"code","7cbc803d":"code","52a58bf4":"code","3cfac6cd":"code","7c0f86a7":"code","33757fe2":"code","7204f9f7":"code","9f8c55eb":"code","34e9b1ed":"code","63256791":"code","a74eddac":"code","d0ea82df":"code","0d97f061":"code","c86a44e4":"code","076aadbd":"code","06742e8e":"code","ebd941c1":"code","729d78f7":"code","a6942298":"code","bb273874":"code","33ae5792":"code","d8a86d6f":"code","680a18ee":"code","3db6001a":"code","1d45ee67":"code","6c7d2eb4":"code","f55bc91a":"code","9b253fb2":"code","e9fa51ef":"code","f65be9f5":"code","e6f9ba1f":"code","c9f6d044":"code","073877bf":"code","d53453b0":"code","c78b150f":"code","ffd73ce8":"code","c778941a":"code","4974571a":"code","a5930d4f":"code","3c944c6e":"code","4c2fded5":"code","02b76820":"code","947ce5ee":"code","d9756bee":"code","c859c77a":"code","6773176d":"code","6ce93a22":"code","c2381c10":"code","ade581ff":"code","4ff06294":"code","be2bd882":"code","1bb0706a":"code","4ac12707":"code","24083296":"code","30462691":"code","bd69e741":"code","ed8cca35":"code","6f4573b2":"code","c26a12b6":"code","05f99482":"code","099b559e":"markdown","87a13342":"markdown","eb4eda99":"markdown","91b6cec4":"markdown","20b00222":"markdown","00447414":"markdown","3ada2597":"markdown","3e23b24e":"markdown","1c115572":"markdown","e9470610":"markdown","0ca0668f":"markdown","085dd036":"markdown","aca12c94":"markdown","0f8133c8":"markdown","0d659ced":"markdown","a0122220":"markdown","93951a98":"markdown","91d60943":"markdown","71777ca3":"markdown","c292e9ad":"markdown","20eb581c":"markdown","cb78a6dd":"markdown","8f1159bd":"markdown","f99d88c7":"markdown","87485a7d":"markdown","e9ba0d9a":"markdown","935afc11":"markdown"},"source":{"510b6324":"import numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport scipy as sp\nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator \nplt.style.use('fivethirtyeight')\n%matplotlib inline \nimport warnings\nwarnings.filterwarnings('ignore')","f0d7f604":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecoveries_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/04-30-2020.csv')\nus_medical_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports_us\/04-30-2020.csv')","7cbc803d":"latest_data.head()","52a58bf4":"confirmed_df.head()","3cfac6cd":"deaths_df.head()","7c0f86a7":"recoveries_df.head()","33757fe2":"us_medical_data.head()","7204f9f7":"cols = confirmed_df.keys()","9f8c55eb":"confirmed = confirmed_df.loc[:, cols[4]:cols[-1]]\ndeaths = deaths_df.loc[:, cols[4]:cols[-1]]\nrecoveries = recoveries_df.loc[:, cols[4]:cols[-1]]","34e9b1ed":"dates = confirmed.keys()","63256791":"# storing world data\nworld_cases = [] # to store total cases\ntotal_deaths = [] # to store total deaths\nmortality_rate = [] # to store mortality rate\nrecovery_rate = [] # to store recovery rate\ntotal_recovered = [] \ntotal_active = [] \n\n# storing US data\nus_cases = [] \nus_deaths = [] \nus_recoveries = []\n\n\nfor i in dates:\n    # calculate sums\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n\n    # confirmed, deaths, recovered, and active\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    total_recovered.append(recovered_sum)\n    total_active.append(confirmed_sum-death_sum-recovered_sum)\n\n    # calculate rates\n    mortality_rate.append(death_sum\/confirmed_sum)\n    recovery_rate.append(recovered_sum\/confirmed_sum)\n\n    # case studies \n    us_cases.append(confirmed_df[confirmed_df['Country\/Region']=='US'][i].sum())    \n    us_deaths.append(deaths_df[deaths_df['Country\/Region']=='US'][i].sum())\n    us_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='US'][i].sum())","a74eddac":"def get_daily_increase(data):\n    '''\n    INPUT - a list containing day by day case counts\n    \n    OUTPUT - a list containing the day by day increment of count \n    \n    Function to count the daily increment in figures\n    '''\n    increment_count = [] \n    for i in range(len(data)):\n        if i == 0:\n            increment_count.append(data[0])\n        else:\n            increment_count.append(data[i]-data[i-1])\n    return increment_count","d0ea82df":"# confirmed cases\nworld_daily_increase = get_daily_increase(world_cases)\nus_daily_increase = get_daily_increase(us_cases)\n\n# deaths\nworld_daily_death = get_daily_increase(total_deaths)\nus_daily_death = get_daily_increase(us_deaths)\n\n# recoveries\nworld_daily_recovery = get_daily_increase(total_recovered)\nus_daily_recovery = get_daily_increase(us_recoveries)","0d97f061":"# days from the first day in the dataset i.e. Jan 22, 2020 (1\/22\/2020)\ndays = np.array([i for i in range(len(dates))]).reshape(-1, 1)\n\n# reshaping the data\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)","c86a44e4":"num_days_future = 15\nforecast_future = np.array([i for i in range(len(dates)+num_days_future)]).reshape(-1, 1)\nadjusted_dates = forecast_future[:-15]","076aadbd":"start = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\ndates_for_forecast_future = []\nfor i in range(len(forecast_future)):\n    dates_for_forecast_future.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","06742e8e":"def plot_stats(x_data, y_data, title, y_label):\n    '''\n    INPUT - data to be plotted on X-axis and Y-axis and a strings for title, and y-axis label\n    \n    OUTPUT - function doesn't return anything but prints required plots\n    '''\n    plt.plot(x_data, y_data)\n    plt.title(title)\n    plt.xlabel('Days Since Jan 22, 2020')\n    plt.ylabel(y_label)\n    plt.xticks(size=10)\n    plt.yticks(size=10)\n    plt.show()","ebd941c1":"adjusted_dates = adjusted_dates.reshape(1, -1)[0]","729d78f7":"plot_stats(adjusted_dates, world_cases,'Number of COVID-19 Cases Over Time','Number of Cases')","a6942298":"plot_stats(adjusted_dates, total_deaths,'Number of COVID-19 Deaths Over Time','Number of Deaths')","bb273874":"plot_stats(adjusted_dates, total_recovered, 'Number of COVID-19 Recoveries Over Time', 'Number of Recoveries')","33ae5792":"plot_stats(adjusted_dates, total_active, 'Number of COVID-19 Active Cases Over Time','Number of  Active Cases')","d8a86d6f":"plot_stats(adjusted_dates, world_daily_increase, 'Day-wise plot of Confirmed Cases - Worldwide', 'Number of Cases')","680a18ee":"plot_stats(adjusted_dates, world_daily_death, 'Day-wise plot of Deaths - Worldwide','Number of Cases')","3db6001a":"plot_stats(adjusted_dates, world_daily_recovery, 'Day-wise plot of Recoveries - Worldwide', 'Number of Cases')","1d45ee67":"plot_stats(adjusted_dates,us_cases,'Number of Confirmed cases - USA','Number of Cases')","6c7d2eb4":"plot_stats(adjusted_dates,us_daily_increase,'Day-wise plot of Cases - USA','Number of Cases')","f55bc91a":"plot_stats(adjusted_dates,us_daily_death,'Day-wise plot of Deaths - USA','Number of Cases')","9b253fb2":"plot_stats(adjusted_dates,us_daily_recovery,'Day-wise plot of Recoveries - USA','Number of Cases')","e9fa51ef":"states =  list(latest_data.loc[latest_data['Country_Region'] == 'US','Province_State'].unique())","f65be9f5":"states_confirmed_cases = []\nstates_death_cases = [] \nstates_recovery_cases = []\nstates_mortality_rate = [] \n\nno_cases = [] \nfor state in states:\n    cases = latest_data[latest_data['Province_State']==state]['Confirmed'].sum()\n    if cases > 0:\n        states_confirmed_cases.append(cases)\n    else:\n        no_cases.append(state)\n \n# removing the areas with zero cases\nif len(no_cases) != 0:\n    for area in no_cases:\n        states.remove(area)\n    \nstates = [k for k, v in sorted(zip(states, states_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\nfor i in range(len(states)):\n    states_confirmed_cases[i] = latest_data[latest_data['Province_State']==states[i]]['Confirmed'].sum()\n    states_death_cases.append(latest_data[latest_data['Province_State']==states[i]]['Deaths'].sum())\n    states_recovery_cases.append(latest_data[latest_data['Province_State']==states[i]]['Recovered'].sum())\n    states_mortality_rate.append(states_death_cases[i]\/states_confirmed_cases[i])","e6f9ba1f":"# number of cases per US state\nstate_df = pd.DataFrame({'State': states, 'Number of Confirmed Cases': states_confirmed_cases,'Number of Deaths': states_death_cases, 'Mortality Rate': states_mortality_rate})\n\n# number of cases per country\/region\nstate_df.style.background_gradient(cmap='Oranges')","c9f6d044":"def plot_bar_graphs(x_axis, y_axis, title):\n    '''\n    INPUT - variables to be plotted on X-axis and Y-axis, and title\n    \n    OUTPUT - function doesn't return anything but prints required plots\n    '''\n    plt.figure()\n    plt.barh(x_axis, y_axis)\n    plt.title(title)\n    plt.show()","073877bf":"visual_unique_states = [] \nvisual_confirmed_cases = []\nothers = np.sum(states_confirmed_cases[10:])\nfor i in range(len(states_confirmed_cases[:10])):\n    visual_unique_states.append(states[i])\n    visual_confirmed_cases.append(states_confirmed_cases[i])\n\nvisual_unique_states.append('Others')\nvisual_confirmed_cases.append(others)","d53453b0":"plot_bar_graphs(visual_unique_states, visual_confirmed_cases, 'Number of COVID-19 Cases in States')","c78b150f":"def plot_pie_charts(x_axis, y_axis, title):\n    '''\n    INPUT - variables to be plotted on X-axis and Y-axis, and title\n    \n    OUTPUT - function doesn't return anything but prints required plots\n    \n    '''\n    plt.figure(figsize=(15,15))\n    plt.title(title)\n    plt.pie(y_axis, colors= random.choices(list(mcolors.CSS4_COLORS.values()),k = len(states)))\n    plt.legend(x_axis, loc='best')\n    plt.show()","ffd73ce8":"plot_pie_charts(visual_unique_states, visual_confirmed_cases, 'Number of COVID-19 Cases in States of USA')","c778941a":"def plot_rates(x_axis,y_axis,title,y_label,color):\n    '''\n    INPUT - data to be plotted on X-axis and Y-axis and a strings for title, legend, and y-axis label\n    \n    OUTPUT - function doesn't return anything but prints required plots\n    '''\n    mean_rate = np.mean(y_axis)\n    plt.plot(x_axis, y_axis, color = color)\n    plt.axhline(y = mean_rate,linestyle='--', color='black')\n    plt.title(title)\n    plt.legend([y_label, 'y='+str(mean_rate)])\n    plt.xlabel('Days Since Jan 22,2020')\n    plt.ylabel(y_label)\n    plt.show()","4974571a":"plot_rates(adjusted_dates, mortality_rate, 'Mortality Rate of COVID-19 patients Over Time', 'Mortality Rate','red')","a5930d4f":"plot_rates(adjusted_dates, recovery_rate, 'Recovery Rate of COVID-19 patients Over Time', 'Recovery Rate','green')","3c944c6e":"X_confirmed_train, X_confirmed_test, y_confirmed_train, y_confirmed_test = train_test_split(days, world_cases, test_size=0.30, shuffle=False) ","4c2fded5":"# define linear regression model\nlinear_model = LinearRegression(normalize=True, fit_intercept=False)","02b76820":"# function to train the model and predict the number of probable cases\ndef execute_linear_model(X_confirmed_train, y_confirmed_train, X_confirmed_test, forecast_future):\n    '''\n    INPUT - the split data\n    \n    OUTPUT - executes linear model and prints MAE & MSE, returns predicted values\n    '''\n    linear_model.fit(X_confirmed_train, y_confirmed_train)\n    test_linear_pred = linear_model.predict(X_confirmed_test)\n    linear_pred = linear_model.predict(forecast_future)\n    print('MAE:', mean_absolute_error(test_linear_pred, y_confirmed_test))\n    print('MSE:',mean_squared_error(test_linear_pred, y_confirmed_test))\n    return test_linear_pred, linear_pred","947ce5ee":"# function to plot the models predictions against the test data\ndef plot_model_predictions(model,y_confirmed_test,test_linear_pred):\n    '''\n    INPUT - model name, predicted and actual lables\n    \n    OUTPUT - displays graphs\n    '''\n    plt.plot(y_confirmed_test)\n    plt.plot(test_linear_pred)\n    plt.legend(['Test Data',  model+' Regression Predictions'])","d9756bee":"test_linear_pred, linear_pred = execute_linear_model(X_confirmed_train, y_confirmed_train,X_confirmed_test,forecast_future)","c859c77a":"plot_model_predictions('Linear',y_confirmed_test,test_linear_pred)","6773176d":"# transform our data for polynomial variants of linear regression\ndef transform_to_poly(degree=2):\n    '''\n    INPUT - degree \n    \n    OUTPUT - returns the transformed data\n    \n    Transorms data into required polymonial degree\n    '''\n    poly = PolynomialFeatures(degree)\n    poly_X_confirmed_train = poly.fit_transform(X_confirmed_train)\n    poly_X_confirmed_test = poly.fit_transform(X_confirmed_test)\n    poly_forecast_future = poly.fit_transform(forecast_future)\n    \n    return poly_X_confirmed_train, poly_X_confirmed_test, poly_forecast_future","6ce93a22":"poly_2_X_confirmed_train, poly_2_X_confirmed_test, poly_2_forecast_future = transform_to_poly(degree = 2)","c2381c10":"test_ploy_2_pred, poly_2_pred = execute_linear_model(poly_2_X_confirmed_train,y_confirmed_train,poly_2_X_confirmed_test,poly_2_forecast_future)","ade581ff":"plot_model_predictions('Polynomial Degree 2',y_confirmed_test,test_ploy_2_pred)","4ff06294":"poly_3_X_confirmed_train, poly_3_X_confirmed_test, poly_3_forecast_future = transform_to_poly(degree = 3)","be2bd882":"test_ploy_3_pred, poly_3_pred = execute_linear_model(poly_3_X_confirmed_train,y_confirmed_train,poly_3_X_confirmed_test,poly_3_forecast_future)","1bb0706a":"plot_model_predictions('Polynomial Degree 3',y_confirmed_test,test_ploy_3_pred)","4ac12707":"test_avg_pred = []\nfor i in range(0,len(test_ploy_2_pred)):\n    temp = float(test_ploy_2_pred[i]+test_ploy_3_pred[i])\/2\n    test_avg_pred.append(temp)","24083296":"plot_model_predictions('Average of Polynomial Degree 2 & 3',y_confirmed_test,test_avg_pred)","30462691":"print('MAE:', mean_absolute_error(test_avg_pred, y_confirmed_test))\nprint('MSE:',mean_squared_error(test_avg_pred, y_confirmed_test))","bd69e741":"preds = []\nfor i in range(0,len(poly_2_pred)):\n    temp = float(poly_2_pred[i]+poly_3_pred[i])\/2\n    preds.append(temp)","ed8cca35":"def plot_future_predictions(x_data, y_data, predictions, algorithms):\n    '''\n    INPUT - \n        x_data & y_data: data for x-axis and y-axis\n        predictions1,predictions2,predictions3: predictions by te above declared models\n        algo_1_name,algo_2_name,algo_3_name: names for algorithms to show in graph legend\n        \n    OUTPUT - \n        This function doesn't return anything but prints the predictions of models against current confirmed cases\n    '''\n    \n    plt.figure(figsize=(12, 9))\n    plt.plot(x_data, y_data)\n    for prediction in predictions:\n        plt.plot(forecast_future, prediction, linestyle='dashed')\n    plt.title('Number of COVID-19 Cases Over Time')\n    plt.xlabel('Days Since Jan 22, 2020')\n    plt.ylabel('Number of Cases')\n    legend = ['Confirmed Cases']\n    for algorithm in algorithms:\n        legend.append(algorithm)\n    plt.legend(legend)\n    plt.ticklabel_format(style = 'plain')\n    plt.show()","6f4573b2":"pred = [linear_pred, poly_2_pred, poly_3_pred, preds]\nalgos = ['Linear Regression','Degree 2 Polynomial Regression','Degree 3 Polynomial Regression','Average of Polynomial Models']\nplot_future_predictions(adjusted_dates, world_cases,pred,algos)","c26a12b6":"poly_3_preds = poly_3_pred.reshape(1,-1)[0]\npoly_3_df = pd.DataFrame({'Date': dates_for_forecast_future[-15:], 'Number of worldwide cases predicted': np.round(poly_3_preds[-15:])})\npoly_3_df","05f99482":"preds_m = np.array(preds).reshape(1,-1)[0]\npoly_df = pd.DataFrame({'Date': dates_for_forecast_future[-15:], 'Number of worldwide cases predicted': np.round(preds[-15:])})\npoly_df","099b559e":"Now, we shall plot predictions of the 3 variants against the confirmed cases","87a13342":"The next cell is for storing the data into different lists for making it easy to visualize. Of the different lists, one is for storing mortality rate and another is for storing recovery rate.\n\n<br>Mortality rate can be defined as the ratio of number of deaths recorded against the total number of cases recorded and this is calculated using the following formula:<br>\n\n$$mortality\\;rate = \\frac{no.\\:of\\:deaths}{no.\\:of\\:confirmed\\:cases}$$\n\n<br>Recovery rate can be defined as the ratio of number of recovered patients recorded against the total number of cases recorded and this is calculated using the following formula:<br>\n\n$$recovery\\:rate = \\frac{no.\\:of\\:recovered\\:cases}{no.\\:of\\:confirmed\\:cases}$$","eb4eda99":"**Average of predictions of Polynomial Regression models**","91b6cec4":"It can be seen that the aerage of predictions from Degree-2 and Degree-3 Polynomial regression models showed better results","20b00222":"**USA wide data trends**","00447414":"**Days for Future Forecast**","3ada2597":"### Data Preparation","3e23b24e":"**Plotting the 10 states with the most confirmed cases. The remaining states are grouped into \"others\" category**","1c115572":"The dates in dataset are in int64 format. Convert these into date-time format","e9470610":"**View Data Samples**","0ca0668f":"### Visualizing the data","085dd036":"It can be seen that the Polynomial variant with degree three performed well compared to other two variants of the Linear Regression model.\n\n<br> \n\nThe next cell is for displaying our predictions for the next 15 days that we obtained using the Polynomial model.\n<br>*Note that this is just a simple model and the results are not accurate*","aca12c94":"Now that we have all the data of the recorded cases, let us calculate the day-wise change in count of cases, deaths, and recoveries. The function in the following cell helps to calculate this change","0f8133c8":"It can be seen that normal LinearRegression did not work well with the data. Try using Polynomial Regression. <br> For that first transform the data","0d659ced":"It is clear that the average of predictions of Polynomial Regression models of Degree-2&3 has less MAE and MSE compared to those of the individual models.","a0122220":"**State wise COVID-19 cases analysis**","93951a98":"# COVID-19 Analysis & Prediction on World and USA Data","91d60943":"\nThis notebook visualizes and predicts the spread of the novel coronavirus, also known as SARS-CoV-2. It is a contagious respiratory virus that first started in Wuhan in December 2019. On 11 February 2020, the disease is officially named COVID-19 by the World Health Organization. \n<br>\n\nIn this project, the COVID-19 data by Johns Hopkins University Center for Systems Science and Engineering (JHU CSSE) is used for analysis and visualizations.\n\n<br>Data: <a href='https:\/\/github.com\/CSSEGISandData\/COVID-19'>https:\/\/github.com\/CSSEGISandData\/COVID-19<\/a>\n\nPart of this code was used from https:\/\/www.kaggle.com\/therealcyberlord\/coronavirus-covid-19-visualization-prediction\n    \nMedium Link: https:\/\/medium.com\/analytics-vidhya\/covid-19-data-analysis-e9cb652e8c10    \n***Note: This data is updated on a regular basis. For updated visualizations please run the notebook* <br>\n*Last Updated: 5th of May, 2020***","71777ca3":"**Split Data**\n<br>\nNow I'm predicting the number of confirmed cases for the next 15 days. For this first, we have to split the data into train and test sets","c292e9ad":"As we obtained and visualized the data of world and the US, the following cells are for plotting the region wise data","20eb581c":"**Models for predicting confirmed cases**<br> I used variants of LinearRegression to compare the performance\n<br>*Note that this is just a simple model and the results are not accurate*","cb78a6dd":"**Plot Worldwide Mortality and Recovery Rates**","8f1159bd":"**World wide COVID-19 data trends**","f99d88c7":"**Import data**","87485a7d":"**Import Required Libraries**","e9ba0d9a":"**Plotting the same in a pie chart**","935afc11":"**Get the dates and number of cases associated with that date**"}}