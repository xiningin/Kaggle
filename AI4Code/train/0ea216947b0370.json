{"cell_type":{"03f99665":"code","626ef7d6":"code","aef7b8d8":"code","6568948e":"code","5f60e32e":"code","848dc31e":"code","e266e9dd":"code","4a3f3d40":"code","f18d6695":"code","08f3a720":"code","8bbdc3e8":"code","95ed8d92":"code","f4070d75":"code","526e8a40":"markdown","090c7595":"markdown","300707c8":"markdown"},"source":{"03f99665":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os, shutil\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","626ef7d6":"#Importing datafiles to be used by ImageGenerator\ntrain_cats = '..\/input\/dogs-vs-cats-small\/dogs_vs_cats_small\/train\/cats' \ntrain_dogs = \"..\/input\/dogs-vs-cats-small\/dogs_vs_cats_small\/train\/dogs\"\ntest_cats = \"..\/input\/dogs-vs-cats-small\/dogs_vs_cats_small\/test\/cats\"\ntest_dogs = \"..\/input\/dogs-vs-cats-small\/dogs_vs_cats_small\/test\/dogs\"\nval_cats = \"..\/input\/dogs-vs-cats-small\/dogs_vs_cats_small\/val\/cats\"\nval_dogs = \"..\/input\/dogs-vs-cats-small\/dogs_vs_cats_small\/val\/dogs\"\ntrain = \"..\/input\/dogs-vs-cats-small\/dogs_vs_cats_small\/train\"\ntest = \"..\/input\/dogs-vs-cats-small\/dogs_vs_cats_small\/test\"\nval = \"..\/input\/dogs-vs-cats-small\/dogs_vs_cats_small\/val\"","aef7b8d8":"#Checking file images\nimport imageio\ncat_image_names = os.listdir(train_cats)\ncat_img = imageio.imread(os.path.join(train_cats, cat_image_names[5]))\nplt.imshow(cat_img)\n\nplt.figure()\n\ndog_image_names = os.listdir(train_dogs)\ndog_img = imageio.imread(os.path.join(train_dogs, dog_image_names[5]))\nplt.imshow(dog_img)","6568948e":"#Reading the images from the respective folders.\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_gen = ImageDataGenerator(rescale=1.\/255)\nval_gen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_gen.flow_from_directory(\ntrain,\ntarget_size=(150, 150),\nbatch_size=20,\nclass_mode='binary'\n)\n\nval_generator = val_gen.flow_from_directory(\nval,\ntarget_size=(150, 150),\nbatch_size=20,\nclass_mode='binary'\n)\n","5f60e32e":"#Building the Architecture of CNN\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\nmodel.summary()","848dc31e":"# Compiling the model\nmodel.compile(optimizer=tf.keras.optimizers.RMSprop(lr=0.001),\n             loss='binary_crossentropy',\n             metrics=['accuracy'])","e266e9dd":"#fit the model on train data. (data is being brought in after conversion through ImageGenerator)\nhistory = model.fit(train_generator,\n                             steps_per_epoch=100,\n                             epochs=30,\n                             validation_data=val_generator,\n                             validation_steps=50)","4a3f3d40":"#Visualise curves\npd.DataFrame(history.history).plot(figsize=(10,8))\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.grid(True)\n\nplt.gca().set_ylim(0,1)\n#plt.savefig(\"Performance of the model.jpeg\")\nplt.show()","f18d6695":"test_generator = val_gen.flow_from_directory(\ntest,\ntarget_size=(150, 150),\nbatch_size=20,\nclass_mode='binary'\n)","08f3a720":"#Evaluating model on test data\nmodel.evaluate(test_generator, steps=75)","8bbdc3e8":"#check shape\ntest_img = test_generator[0][0][10]\ntest_img.shape","95ed8d92":"#Predict and Compare the result\nmodel.predict_classes(np.expand_dims(test_img, axis=0))\n# label 1 for dogs and 0 for cats","f4070d75":"plt.imshow(test_img)","526e8a40":"Build the CNN model\n1. We need 3 Conv2D layers with 32, 32 and 32 filters of sixe 3 x 3 each (neurons)\n2. 3 MaxPooling2D layers\n3. Two Dense layers with 128 and 1 neurons each","090c7595":"### Result: Model predicted it to be a Dog. It is a dog in fact.","300707c8":"##### Here, we can see that model doesn't generalised well. It shows high variance as val_loss is quite high w.r.t train loss."}}