{"cell_type":{"c608f3e1":"code","16552def":"code","fe42655d":"code","1645e1e9":"code","4f25d502":"code","d197951b":"code","b064ede4":"code","a186eed8":"code","01dab855":"code","6cd52de7":"code","5282dc9a":"code","cddc23da":"code","346ec462":"code","5761449c":"code","db0b7736":"code","dfd8260b":"code","efd3a208":"code","a55b7f13":"code","93f6d1f1":"code","6c05e8e2":"code","4c101449":"code","62fe63c3":"code","6f1dc3e1":"code","1ef1d08f":"code","5ed8e3d3":"code","d26c6c36":"code","15f92916":"code","1d66a3a1":"code","f16d788e":"code","10827433":"code","2b2a3b54":"code","1aea983f":"code","eb37d1f6":"code","8e21eab1":"code","a067bd81":"code","e42189d5":"code","50bcec89":"code","0f5542c2":"code","6ab1c875":"code","e728b301":"markdown","2ee518e5":"markdown","5768bda1":"markdown","b2b0930b":"markdown","05e4a7a2":"markdown","b387671d":"markdown","8c278cd3":"markdown","5bb77b48":"markdown","5b7a2073":"markdown","45d4ac8e":"markdown","998bb704":"markdown","3862ed56":"markdown","b0eba42f":"markdown"},"source":{"c608f3e1":"import numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt \n%matplotlib inline\n\n# import SVC classifier\nfrom sklearn.svm import SVC\n\n# import metrics to compute accuracy (Evulate)\nfrom sklearn.metrics import accuracy_score, confusion_matrix,classification_report\nfrom sklearn.model_selection import cross_val_score, GridSearchCV","16552def":"df_train = pd.read_csv(\"..\/input\/human-activity-recognition-with-smartphones\/train.csv\")","fe42655d":"df_train.head()","1645e1e9":"df_train.tail()","4f25d502":"df_train.shape","d197951b":"df_train.isnull().values.any()","b064ede4":"df_train[\"Activity\"].unique()","a186eed8":"#finding max and min values of the parameter to find range\ntbodymax=df_train['tBodyAcc-mean()-X'].max(skipna = False)\ntbodymin=df_train['tBodyAcc-mean()-X'].min(skipna = False)\nprint(\"The range of values for tbodyAccmean()-X are: \")\nprint(\"Max value: \",tbodymax)\nprint(\"Min value: \",tbodymin)","01dab855":"tgravmax=df_train['angle(X,gravityMean)'].max(skipna = False)\ntgravmin=df_train['angle(X,gravityMean)'].min(skipna = False)\nprint(\"The range of values for tgravityAcc-mean()-X are: \")\nprint(\"Max value: \",tgravmax)\nprint(\"Min value: \",tgravmin)","6cd52de7":"plt.figure(figsize=(7,7))\nsns.boxplot(x='Activity', y='tBodyAccMag-mean()',data=df_train, showfliers=False, saturation=1)\nplt.ylabel('Acceleration Magnitude mean')\nplt.axhline(y=-0.7, xmin=0.1, xmax=0.9,dashes=(5,5), c='g')\nplt.axhline(y=-0.05, xmin=0.4, dashes=(5,5), c='m')\nplt.xticks(rotation=90)\nplt.show()","5282dc9a":"sns.boxplot(x='Activity', y='angle(X,gravityMean)', data=df_train)\nplt.axhline(y=0.08, xmin=0.1, xmax=0.9,c='m',dashes=(5,3))\nplt.title('Angle between X-axis and Gravity_mean', fontsize=15)\nplt.xticks(rotation = 40)\nplt.show()","cddc23da":"sns.boxplot(x='Activity', y='angle(Y,gravityMean)', data = df_train, showfliers=False)\nplt.title('Angle between Y-axis and Gravity_mean', fontsize=15)\nplt.xticks(rotation = 40)\nplt.axhline(y=-0.22, xmin=0.1, xmax=0.8, dashes=(5,3), c='m')\nplt.show()","346ec462":"#Creating a dataframe of Walking activity \nwalkingactivity=df_train[df_train['Activity']=='WALKING']\n#For walking \ntbodymax=walkingactivity['tBodyAccMag-mean()'].max(skipna = False)\ntbodymin=walkingactivity['tBodyAccMag-mean()'].min(skipna = False)\nprint(\"The range of values for tBodyAccMag-mean() of 'WALKING' activity are: \")\nprint(\"Max value: \",tbodymax)\nprint(\"Min value: \",tbodymin)","5761449c":"#Creating a dataframe of Walking Upstairs activity \nwalking_upstairsactivity=df_train[df_train['Activity']=='WALKING_UPSTAIRS']\n#For walkingupstairs \ntbodymax=walking_upstairsactivity['tBodyAccMag-mean()'].max(skipna = False)\ntbodymin=walking_upstairsactivity['tBodyAccMag-mean()'].min(skipna = False)\nprint(\"The range of values for tBodyAccMag-mean() of 'WALKING_UPSTAIRS' activity are: \")\nprint(\"Max value: \",tbodymax)\nprint(\"Min value: \",tbodymin)","db0b7736":"#Creating a dataframe of Walking Downstairs activity \nwalking_downstairsactivity=df_train[df_train['Activity']=='WALKING_DOWNSTAIRS']\n#For walkingdownstairs \ntbodymax=walking_downstairsactivity['tBodyAccMag-mean()'].max(skipna = False)\ntbodymin=walking_downstairsactivity['tBodyAccMag-mean()'].min(skipna = False)\nprint(\"The range of values for tBodyAccMag-mean() of 'WALKING_DOWNSTAIRS' activity are: \")\nprint(\"Max value: \",tbodymax)\nprint(\"Min value: \",tbodymin)","dfd8260b":"#Creating a dataframe of STANDING \nstandingactivity=df_train[df_train['Activity']=='STANDING']\n#For standing \ntbodymax=standingactivity['angle(X,gravityMean)'].max(skipna = False)\ntbodymin=standingactivity['angle(X,gravityMean)'].min(skipna = False)\nprint(\"The range of values for angle(X,gravityMean) of 'STANDING' activity are: \")\nprint(\"Max value: \",tbodymax)\nprint(\"Min value: \",tbodymin)","efd3a208":"#For standing \ntbodymax=standingactivity['angle(Y,gravityMean)'].max(skipna = False)\ntbodymin=standingactivity['angle(Y,gravityMean)'].min(skipna = False)\nprint(\"The range of values for angle(Y,gravityMean) of 'STANDING' activity are: \")\nprint(\"Max value: \",tbodymax)\nprint(\"Min value: \",tbodymin)","a55b7f13":"#Creating a dataframe of SITTING \nsittingactivity=df_train[df_train['Activity']=='SITTING']\n#For sitting\ntbodymax=sittingactivity['angle(X,gravityMean)'].max(skipna = False)\ntbodymin=sittingactivity['angle(X,gravityMean)'].min(skipna = False)\nprint(\"The range of values for angle(X,gravityMean) of 'Sitting' activity are: \")\nprint(\"Max value: \",tbodymax)\nprint(\"Min value: \",tbodymin)","93f6d1f1":"#For sitting\ntbodymax=sittingactivity['angle(Y,gravityMean)'].max(skipna = False)\ntbodymin=sittingactivity['angle(Y,gravityMean)'].min(skipna = False)\nprint(\"The range of values for angle(Y,gravityMean) of 'Sitting' activity are: \")\nprint(\"Max value: \",tbodymax)\nprint(\"Min value: \",tbodymin)","6c05e8e2":"pd.crosstab(index = df_train[\"Activity\"],columns=\"count\")","4c101449":"plt.figure(figsize=(10,5))\nax = sns.countplot(x=\"Activity\", data=df_train)\nplt.xticks(x = df_train['Activity'],  rotation='vertical')\nplt.show()","62fe63c3":"df_train[\"subject\"].unique()","6f1dc3e1":"X = pd.DataFrame(df_train.drop(['Activity','subject'],axis=1))\nY = df_train.Activity.values.astype(object)\n\nX.shape, Y.shape","1ef1d08f":"X.head()","5ed8e3d3":"Y[1]","d26c6c36":"X.info()","15f92916":"#Total Number of Continous and Categorical features in the training set\nnum_cols = X._get_numeric_data().columns\nprint(\"Number of numeric features:\",num_cols.size)","1d66a3a1":"from sklearn import preprocessing\nencoder = preprocessing.LabelEncoder()","f16d788e":"# encoding train labels \nencoder.fit(Y)\ny = encoder.transform(Y)\ny.shape","10827433":"y[1]","2b2a3b54":"encoder.classes_","1aea983f":"encoder.classes_[2]","eb37d1f6":"# Scaling the feature \nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","8e21eab1":"X = scaler.fit_transform(X)\nX[1]","a067bd81":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.2, random_state = 99)\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape","e42189d5":"# instantiate classifier with default hyperparameters\nsvc = SVC() ","50bcec89":"# fit classifier to training set\nsvc.fit(X_train,y_train)","0f5542c2":"# make predictions on test set\ny_pred = svc.predict(X_valid)","6ab1c875":"# compute and print accuracy score\nprint('Model accuracy score with default hyperparameters: {0:0.4f}'. format(accuracy_score(y_valid, y_pred)))","e728b301":"* Observation: If angley,gravityMean < -0.2 then the activity is laying.","2ee518e5":"## Visualize the Class Distribution","5768bda1":"## Class Distribution","b2b0930b":"* If angleX,gravityMean > 0 then Activity is Laying.\nWe can classify all datapoints belonging to Laying activity with just a single if else statement.","05e4a7a2":"# Train the Model","b387671d":"# Load the Training DataSet","8c278cd3":"* Observation:\nIf tAccMean is < -0.8 then the Activities are either Standing or Sitting or Laying.\nIf tAccMean is > -0.6 then the Activities are either Walking or WalkingDownstairs or WalkingUpstairs.\nIf tAccMean > 0.0 then the Activity is WalkingDownstairs.\nWe can classify 75% the Acitivity labels with some errors.","5bb77b48":"## Check for missing values in the dataset","5b7a2073":"# Split X and y into training and validation sets","45d4ac8e":"## Feature Scaling","998bb704":"# Import Library","3862ed56":"## Transforming non numerical labels into numerical labels","b0eba42f":"# EDA"}}