{"cell_type":{"55771307":"code","149e6040":"code","d718f875":"code","ac55d2df":"code","d9ae0048":"code","d2daeb54":"code","95d6c491":"code","ef2b3f85":"code","57513442":"code","5cdb774e":"code","5266d71a":"code","f2e32c19":"code","f4985eb6":"code","8ba5483a":"code","76b19991":"code","e9d28544":"code","8a19a9ca":"code","fbd5d7f7":"code","7e0983d5":"code","bf0f927c":"code","093dc2ce":"code","10e3c4d8":"code","decd4d17":"code","1f031930":"code","ac52cf7b":"code","c7360349":"code","813a6742":"code","a4a0ff89":"code","2b85dcd9":"code","ece8fd69":"code","d267c96e":"code","c5e0e56e":"code","6c1a8352":"code","e976291d":"code","63bdc5d3":"code","670c75ff":"code","abddf330":"code","19d802d9":"code","a6306988":"code","508ecb68":"code","e8f52fb4":"code","17de1676":"code","ba9c6610":"code","e8f8a93d":"code","a28ca6ec":"code","880d7c56":"code","17846ddd":"code","c29c3244":"code","8f17b947":"code","d29e06de":"code","6419e9e8":"code","72433647":"code","22ffce71":"code","34bd58bc":"code","5e3d572a":"code","67b1008c":"code","ab11de91":"code","e7fe6599":"code","b9681452":"code","33ee8af0":"code","e649c2dd":"code","9fba4678":"code","3427f8a8":"code","4bf357fe":"code","427feecb":"markdown","3b2ebd82":"markdown","fba935a0":"markdown","45613382":"markdown","91ec3bef":"markdown","86ad9f0a":"markdown","1609285c":"markdown","62c26c7f":"markdown","54b75429":"markdown","9f9f8cf3":"markdown","ade88865":"markdown","ee424927":"markdown","b9722a60":"markdown"},"source":{"55771307":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\nimport seaborn as sns","149e6040":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d718f875":"train_dataset = '\/kaggle\/input\/amexpert-2021-machine-learning-hackathon\/train_go05W65.csv'\ntest_dataset = '\/kaggle\/input\/amexpert-2021-machine-learning-hackathon\/test_VkM91FT.csv'","ac55d2df":"df = pd.read_csv(train_dataset)\ndf.head()","d9ae0048":"sns.displot(df.Age)","d2daeb54":"sns.displot(df.Vintage)","95d6c491":"from sklearn.preprocessing import RobustScaler","ef2b3f85":"transformer_age = RobustScaler().fit(df[['Age']])\ntransformer_Vintage = RobustScaler().fit(df[['Vintage']])","57513442":"#scaled_age = list(transformer_age.transform(df[['Age']]))\ndf['Age'] = pd.DataFrame(transformer_age.transform(df[['Age']]))\ndf['Vintage'] = pd.DataFrame(transformer_Vintage.transform(df[['Vintage']]))\ndf.head()","5cdb774e":"df_num_train = pd.DataFrame(transformer_age.transform(df[['Age', 'Vintage']]), columns = ['Age', 'Vintage'])\ndf_num_train.head()","5266d71a":"product_set = set()\n\nproducts_set = list(df.Product_Holding_B1)\nfor product_list in products_set:\n    for product in product_list.strip('[]').split(','):\n        product_set.add(product.strip(\"' \"))\nprint(len(product_set))\nprint(product_set)","f2e32c19":"# Target\ntarget_product_set = set()\nproducts_set = list(df.Product_Holding_B2)\nfor product_list in products_set:\n    for product in product_list.strip('[]').split(','):\n        target_product_set.add(product.strip(\"' \"))\nprint(len(target_product_set))\nprint(target_product_set)","f4985eb6":"def fe_product(feature, match):\n    for product in feature.strip('[]').split(','):\n        if match == product.strip(\"' \"):\n            return 1\n    return 0","8ba5483a":"for product in product_set:\n    feature = 'Product_' + product\n    df[feature] = df.apply(lambda x: fe_product(x.Product_Holding_B1, product), axis=1)\ndf.head()","76b19991":"target_df = df[['Product_Holding_B2']]","e9d28544":"df.drop(['Product_Holding_B1', 'Product_Holding_B2', 'Customer_ID'], axis = 1, inplace = True)\ndf.columns","8a19a9ca":"df = pd.get_dummies(df, drop_first = True)\ndf.head()","fbd5d7f7":"df.columns","7e0983d5":"df.shape","bf0f927c":"from sklearn.decomposition import PCA","093dc2ce":"pca = PCA(n_components=29)\npca.fit(df.values)","10e3c4d8":"print(pca.explained_variance_ratio_)","decd4d17":"plt.bar(list(range(1,30)),pca.explained_variance_ratio_,alpha=0.5, align='center')\nplt.ylabel('Variation explained')\nplt.xlabel('eigen Value')\nplt.show()","1f031930":"sum = 0\nfor no_of_pc, variance_ration in enumerate(pca.explained_variance_ratio_, 1):\n    sum += variance_ration\n    print(sum, no_of_pc)\n    if sum > 0.99:\n        break","ac52cf7b":"pca18 = PCA(n_components=18)\npca18.fit(df.values)\nX = pca18.transform(df.values)","c7360349":"#X = df.values\nX.shape","813a6742":"target_df.head()","a4a0ff89":"y = np.zeros((target_df.shape[0], 22), dtype = 'int')\ny.shape","2b85dcd9":"products_set = list(target_df.Product_Holding_B2)\nfor pos, product_list in enumerate(products_set):\n    for product in product_list.strip('[]').split(','):\n        product = product.strip(\"' \")\n        product_id = int(product[1:])\n        y[pos, product_id] = 1","ece8fd69":"X.shape","d267c96e":"y.shape","c5e0e56e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","6c1a8352":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","e976291d":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import optimizers, regularizers\nimport tensorflow as tf","63bdc5d3":"#'''\nmodel = Sequential()\n#model.add(layers.Dropout(0.2))\nmodel.add(layers.Dense(512, activation='relu', input_shape=(18,)))\n#model.add(layers.BatchNormalization())\nmodel.add(layers.Dropout(0.5))\n\n'''\nmodel.add(layers.Dense(512, activation='relu'))\n#model.add(layers.BatchNormalization())\nmodel.add(layers.Dropout(0.5))\n'''\n\nmodel.add(layers.Dense(256, activation='relu'))\n#model.add(layers.BatchNormalization())\nmodel.add(layers.Dropout(0.5))\n\nmodel.add(layers.Dense(128, activation='relu'))\n#model.add(layers.BatchNormalization())\nmodel.add(layers.Dropout(0.5))\n\nmodel.add(layers.Dense(64, activation='relu'))\n#model.add(layers.BatchNormalization())\nmodel.add(layers.Dropout(0.5))\n\nmodel.add(layers.Dense(22, activation='sigmoid'))\nmodel.summary()\n#'''","670c75ff":"'''\nmodel = Sequential()\nmodel.add(layers.Dense(512, kernel_initializer='he_normal', activation='relu', input_shape=(29,)))\nmodel.add(layers.BatchNormalization())\n#model.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(256, kernel_initializer='he_normal', activation='relu'))\nmodel.add(layers.BatchNormalization())\n#model.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(128, kernel_initializer='he_normal', activation='relu'))\nmodel.add(layers.BatchNormalization())\n#model.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(64, kernel_initializer='he_normal', activation='relu'))\nmodel.add(layers.BatchNormalization())\n#model.add(layers.Dropout(0.5))\n\n\nmodel.add(layers.Dense(32, kernel_initializer='he_normal', activation='relu'))\nmodel.add(layers.BatchNormalization())\n#model.add(layers.Dropout(0.5))\n\n\nmodel.add(layers.Dense(22, activation='softmax'))\nmodel.summary()\n'''","abddf330":"#model.compile(optimizer=optimizers.Adam(learning_rate=0.0001), loss = 'binary_crossentropy', metrics = ['binary_accuracy'])\n#model.compile(optimizer=optimizers.SGD(learning_rate=0.01, momentum=0.9), loss = 'binary_crossentropy', metrics = ['binary_accuracy'])\n","19d802d9":"model.compile(optimizer=optimizers.Adam(), loss = 'binary_crossentropy', metrics = ['binary_accuracy'])\n#history_final = model.fit(X, y, validation_split=0.2, batch_size = 32, epochs = 50, verbose = 1)\nhistory_final = model.fit(X, y, batch_size = 32, epochs = 25, verbose = 1)","a6306988":"df_test = pd.read_csv(test_dataset)\ndf_test.head(20)","508ecb68":"df_test.shape","e8f52fb4":"df_test['Age'] = pd.DataFrame(transformer_age.transform(df_test[['Age']]))\ndf_test['Vintage'] = pd.DataFrame(transformer_Vintage.transform(df_test[['Vintage']]))\ndf_test.head()","17de1676":"for product in product_set:\n    feature = 'Product_' + product\n    df_test[feature] = df_test.apply(lambda x: fe_product(x.Product_Holding_B1, product), axis=1)\ndf_test.head()","ba9c6610":"df_submission = df_test[['Customer_ID', 'Product_Holding_B1']]\ndf_submission.head()","e8f8a93d":"existing_products = np.zeros((df_submission.shape[0], 22), dtype = 'int')\nexisting_products.shape","a28ca6ec":"products_set = list(df_submission.Product_Holding_B1)\nfor pos, product_list in enumerate(products_set):\n    for product in product_list.strip('[]').split(','):\n        product = product.strip(\"' \")\n        product_id = int(product[1:])\n        existing_products[pos, product_id] = 1\nexisting_products.shape","880d7c56":"existing_products[0:5]","17846ddd":"df_test.head()","c29c3244":"df_test.drop(['Product_Holding_B1', 'Customer_ID'], axis = 1, inplace = True)\ndf_test.columns","8f17b947":"df_test = pd.get_dummies(df_test, drop_first = True)\ndf_test.shape","d29e06de":"df_test.head(20)","6419e9e8":"X_test = pca18.transform(df_test.values)\n\ny_test_pred = model.predict(X_test)\ny_test_pred.shape","72433647":"df_submission['Target'] = list(y_test_pred)\ndf_submission.head()","22ffce71":"df_submission.drop('Product_Holding_B1', axis = 1, inplace = True)\ndf_submission.head()","34bd58bc":"df_submission['Existing'] = list(existing_products)\ndf_submission.head()","5e3d572a":"df_submission.head(30)","67b1008c":"df_submission.Existing[0].sum()","ab11de91":"match_count = 0\ndef generate_pred(cust_id, existing, target):\n    global match_count\n    existing_count = existing.sum()\n    int_result = list()\n    str_result = list()\n    existing_list_org = list(existing)\n    temp_list_org = list(target)\n    temp_list_1 = list(target)\n    temp_list_1.sort(reverse = True)\n    count = 1\n    for prob in temp_list_1:\n\n        if existing_count == 1 and count > 1:\n            break\n        if existing_count == 2 and count > 2:\n            break\n\n        if count > 3:\n            break\n            \n        index = temp_list_org.index(prob)\n        if prob > 0.15 and existing_list_org[index] != 1:\n            int_result.append(temp_list_org.index(prob))\n            count += 1\n            \n    if len(int_result) == 0:\n        for prob in temp_list_1:\n            index = temp_list_org.index(prob)\n            if existing_list_org[index] != 1:\n                int_result.append(temp_list_org.index(prob))\n                break\n     \n                \n    int_result.sort()   \n    for item in int_result:\n        if item == 0:\n            str_result.append('P00')\n        else:\n            str_result.append('P' + str(item))\n    return str_result","e7fe6599":"df_submission['Product_Holding_B2'] = df_submission.apply(lambda x: generate_pred(x.Customer_ID, x.Existing, x.Target), axis=1)","b9681452":"print(match_count)","33ee8af0":"df_submission.drop('Target', axis = 1, inplace = True)\ndf_submission.head()","e649c2dd":"df_submission.drop('Existing', axis = 1, inplace = True)","9fba4678":"df_submission.head(30)","3427f8a8":"predicted_product_set = set()\nproducts_set = list(df_submission.Product_Holding_B2)\nfor product_list in products_set:\n    for product in product_list:\n        predicted_product_set.add(product)\nprint(len(predicted_product_set))\nprint(predicted_product_set)","4bf357fe":"df_submission.to_csv('submission.csv', index = False)","427feecb":"### Existing Products","3b2ebd82":"### Neural Network Model","fba935a0":"### Feature Engineering","45613382":"### Remove features 'Product_Holding_B1', 'Customer_ID'","91ec3bef":"### Evaluating using Test Data","86ad9f0a":"### Train Validaion split","1609285c":"### Exploratory Data Analysis","62c26c7f":"### Feature Engineering for *target* Column","54b75429":"### Extract all products from Product_Holding_B1 column and create individual products as features","9f9f8cf3":"### One-Hot encoding using *pd.get_dummies*","ade88865":"### Prediction","ee424927":"## Import necessary libraries","b9722a60":"### Dimentionality Reduction"}}