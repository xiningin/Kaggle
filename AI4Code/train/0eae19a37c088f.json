{"cell_type":{"d97e6935":"code","57798fc1":"code","543df8cc":"code","e1eb0597":"code","02774dce":"code","c80f0765":"code","969d85f1":"code","f5fcbd6b":"code","98bd3492":"code","c727db35":"code","b3ca2b45":"markdown"},"source":{"d97e6935":"# This Python 3 environment is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_rows', 500) # Show longer results\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport xgboost as xgb\n\n# Input data files are available in the \"..\/input\/\" directory.\n# List all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","57798fc1":"# Read test and train datasets to dataframes\ntrain1 = pd.read_csv('\/kaggle\/input\/equipfailstest\/equip_failures_training_set.csv', na_values='na')\ntest1 = pd.read_csv('\/kaggle\/input\/equipfailstest\/equip_failures_test_set.csv', na_values='na')\n# View first few rows\ntrain1.head()","543df8cc":"# Verify all columns are numbers\ntrain1.info()","e1eb0597":"# Fill NaN with median values\ntrain2 = train1\ntest2 = test1\nfor col in train1.columns:\n    if col != ('id' or 'target'):\n        train2[col] = train1[col].fillna(train1[col].median())\n        test2[col] = train1[col].fillna(train1[col].median())","02774dce":"# Plot violin plots by target for each column\nfor col in train1.columns:\n    if col != 'id' and col != 'target':\n        try:\n            sns.violinplot(train1.loc[train2[col].notnull(), 'target'], train2.loc[train2[col].notnull(), col])\n            plt.show()\n        except:\n            print(train2[col].nunique())","c80f0765":"# After reviewing violin plots select columns for training where violin plots differ substantially by target\ntrain_cols = ['sensor1_measure',\n              'sensor8_measure',\n              'sensor14_measure',\n              'sensor15_measure',\n              'sensor16_measure',\n              'sensor17_measure',\n              'sensor27_measure',\n              'sensor32_measure',\n              'sensor33_measure',\n              'sensor34_measure',\n              'sensor35_measure',\n              'sensor36_measure',\n              'sensor37_measure',\n              'sensor38_measure',\n              'sensor44_measure',\n              'sensor45_measure',\n              'sensor46_measure',\n              'sensor47_measure',\n              'sensor48_measure',\n              'sensor49_measure',\n              'sensor53_measure',\n              'sensor59_measure',\n              'sensor61_measure',\n              'sensor67_measure',\n              'sensor72_measure',\n              'sensor78_measure',\n              'sensor89_measure',\n              'sensor90_measure',\n              'sensor91_measure',\n              'sensor94_measure',\n              'sensor95_measure']\ntrain3 = train2[train_cols]\ntest3 = test2[train_cols]","969d85f1":"# Train with XGBoost\ndtrain = xgb.DMatrix(data=train3, label=train1.target)\nparam = {'max_depth':6, 'eta':0.3, 'objective':'binary:logistic' }\nnum_round = 10\nbst = xgb.train(param, dtrain, num_round)\nprint(\"Training complete\")","f5fcbd6b":"# Save model\nbst.save_model('EquipFail_10-13-19.model')","98bd3492":"# Predict!!!\ndtest = xgb.DMatrix(data=test3)\npred1 = bst.predict(dtest)\npred2 = pred1.round()","c727db35":"# Create output file and save\nsub1 = test1[['id']]\npred3 = pd.DataFrame(pred2, columns=['target'])\npred4 = pred3.astype('int')\nsub2 = pd.concat([sub1, pred4], axis=1)\nsub2.sample(10)\nsub2.to_csv('EquipFail_10-13-19.csv', index=False)","b3ca2b45":"# Predictive Equipment Failures Notebook Steps\n* Load Packages in Kaggle's default cell\n* Load data into Pandas dataframes\n* View dataframe and check statistics\n* Fill null values with medians\n* Plot violin plots for each column by target\n* Select columns where violin plots differ substantially\n* Train XGBoost model with selected columns\n* Save model so it can be used outside notebook\n* Predict target on test dataset\n* Output submission file"}}