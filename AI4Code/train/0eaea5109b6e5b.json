{"cell_type":{"18a149a5":"code","9409d1af":"code","37914f6e":"code","46370e2b":"code","7884c1c6":"code","cd21dc50":"code","ae1fc11c":"code","9247b062":"code","7880d644":"code","0a90558b":"code","1a12ce63":"code","e4e175b4":"code","8722fd9f":"code","f30cca6f":"code","82003ed0":"code","3a999386":"code","598d4d16":"code","f12d3ceb":"code","534af688":"code","7c99b726":"code","99733d63":"code","0b121c41":"code","9537fcc9":"code","91374238":"code","e484a939":"code","55b8690e":"code","bbd86291":"code","7a6dea74":"code","2487b817":"code","5fec5abb":"code","c8658f45":"code","fc165291":"code","1713a845":"code","2426531e":"code","117451db":"code","9b795771":"code","19bfc2ca":"code","70546cbd":"markdown","dee6a3cc":"markdown","c3598afe":"markdown","478ea351":"markdown","39d800a6":"markdown","f4e043f9":"markdown","903febc9":"markdown","f95f3c69":"markdown","b791e576":"markdown","93c29ac1":"markdown","0fcd65b9":"markdown","1c5d371a":"markdown","34aa7f12":"markdown","f2026d00":"markdown","b46e43f4":"markdown","a91b2965":"markdown"},"source":{"18a149a5":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n# _______________________________\n\nsub974 = pd.read_csv(\"..\/input\/lb-0-980-rainforest-comparative-method-part-a\/submission.csv\") \n\nsub943 = pd.read_csv(\"..\/input\/rain943\/RAIN943.csv\") \n","9409d1af":"def generate(main, support, coeff):\n    g1 = main.copy()\n    g2 = main.copy()\n    g3 = main.copy()\n    g4 = main.copy()\n    \n    for i in main.columns[1:]:\n        lm, Is = [], []                \n        lm = main[i].tolist()\n        ls = support[i].tolist() \n        \n        res1, res2, res3, res4 = [], [], [], []          \n        for j in range(len(main)):\n            res1.append(max(lm[j] , ls[j]))\n            res2.append(min(lm[j] , ls[j]))\n            res3.append((lm[j] + ls[j]) \/ 2)\n            res4.append((lm[j] * coeff) + (ls[j] * (1.- coeff)))\n            \n        g1[i] = res1\n        g2[i] = res2\n        g3[i] = res3\n        g4[i] = res4\n        \n    return g1,g2,g3,g4","37914f6e":"def generate1(main, support, coeff):\n    \n    g = main.copy()    \n    for i in main.columns[1:]:\n        \n        res = []\n        lm, Is = [], []        \n        lm = main[i].tolist()\n        ls = support[i].tolist()  \n        \n        for j in range(len(main)):\n            res.append((lm[j] * coeff[i]) + (ls[j] * (1.- coeff[i])))            \n        g[i] = res\n        \n    return g","46370e2b":"def drawing(main, support, generated, column_number):\n    \n    X  = main.iloc[:, column_number]\n    Y1 = support.iloc[:, column_number]\n    Y2 = generated.iloc[:, column_number]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nOn the X axis >>> main\\n\\nOn the Y axis >>> support\\n')           \n    plt.scatter(X, Y1, s=3)\n    plt.show() \n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nOn the X axis >>> main\\n\\nOn the Y axis >>> generated\\n')           \n    plt.scatter(X, Y2, s=3)\n    plt.show()     ","7884c1c6":"def drawing1(main, support, generated, column_number):\n    \n    X  = main.iloc[:, column_number]\n    Y1 = support.iloc[:, column_number]\n    Y2 = generated.iloc[:, column_number]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nBlue | X axis >> main | Y axis >> support\\n\\nOrange | X axis >> main | Y axis >> generated\\n') \n    \n    plt.scatter(X, Y1, s=3)    \n    plt.scatter(X, Y2, s=3)\n    \n    plt.show()     ","cd21dc50":"# print(sub974.mean() , sub943.mean())\n\nm1 = sub974.mean() + sub943.mean()\n\nm1mean = m1.mean()\n\nm2 = m1 \/ m1mean\n\nm2","ae1fc11c":"m3 = m2.copy()\nfor k in range(24):\n    m3[k] = 0.80\n\n# m3    ","9247b062":"m4 = m3.copy()\n\nm4[2]   = 0.70\n\nm4[3]   = 0.70\n\nm4[17]  = 0.70\n\nm4[18]  = 1.00\n\nm4[20]  = 0.50\n\nm4[23]  = 0.70\n\nm4","7880d644":"f = generate1(sub974, sub943, m4)","0a90558b":"sub974.describe()","1a12ce63":"sub943.describe()","e4e175b4":"drawing1(sub974, sub943, f, 1)","8722fd9f":"drawing1(sub974, sub943, f, 2)","f30cca6f":"drawing1(sub974, sub943, f, 3)","82003ed0":"drawing1(sub974, sub943, f, 4)","3a999386":"drawing1(sub974, sub943, f, 5)","598d4d16":"drawing1(sub974, sub943, f, 6)","f12d3ceb":"drawing1(sub974, sub943, f, 7)","534af688":"drawing1(sub974, sub943, f, 8)","7c99b726":"drawing1(sub974, sub943, f, 9)","99733d63":"drawing1(sub974, sub943, f, 10)","0b121c41":"drawing1(sub974, sub943, f, 11)","9537fcc9":"drawing1(sub974, sub943, f, 12)","91374238":"drawing1(sub974, sub943, f, 13)","e484a939":"drawing1(sub974, sub943, f, 14)","55b8690e":"drawing1(sub974, sub943, f, 15)","bbd86291":"drawing1(sub974, sub943, f, 16)","7a6dea74":"drawing1(sub974, sub943, f, 17)","2487b817":"drawing1(sub974, sub943, f, 18)","5fec5abb":"drawing1(sub974, sub943, f, 19)","c8658f45":"drawing1(sub974, sub943, f, 20)","fc165291":"drawing1(sub974, sub943, f, 21)","1713a845":"drawing1(sub974, sub943, f, 22)","2426531e":"drawing1(sub974, sub943, f, 23)","117451db":"drawing1(sub974, sub943, f, 24)","9b795771":"f.describe()","19bfc2ca":"sub = f\nsub.to_csv(\"submission.csv\", index=False)\n","70546cbd":"<div class=\"alert alert-success\">  \n<\/div>","dee6a3cc":"<div>\n    <h1 align=\"center\"> Comparative Method - Part(B)<\/h1><\/h1>\n    <h2 align=\"center\">Rainforest Connection Species Audio Detection<\/h2>\n    <h3 align=\"center\">By: Somayyeh Gholami & Mehran Kazeminia<\/h3>\n<\/div>","c3598afe":"<div class=\"alert alert-success\">  \n<\/div>","478ea351":"## Result\n\n## [(Score: 0.974) , (Score: 0.943)] >>> f\n\n## f : [(Private Score: 0.98415) , (Public Score: 0.97684)]","39d800a6":"## If you find this work useful, please don't forget upvoting :)","f4e043f9":"# Description:","903febc9":"# Import & Data Set","f95f3c69":"<div class=\"alert alert-success\">  \n<\/div>","b791e576":"# Comparative Method\n","93c29ac1":"<div class=\"alert alert-success\">  \n<\/div>","0fcd65b9":"<div class=\"alert alert-success\">  \n<\/div>","1c5d371a":"### - In this notebook, we use the Comparative Method to improve the results of the previous notebook (Part A). The address of our previous notebook (Part A) is as follows:\n\nhttps:\/\/www.kaggle.com\/mehrankazeminia\/lb-0-980-rainforest-comparative-method-part-a\n\n### - Of course, to use the Comparative Method, we need another suitable notebook. We have used the following notebook for this purpose. Thanks also to Mr. [@vzaguskin](https:\/\/www.kaggle.com\/vzaguskin) for sharing this great notebook.\n\nhttps:\/\/www.kaggle.com\/vzaguskin\/rfcx-complete-tpu-training-and-inference-lb-0-95\n\n### - In the end, we were able to easily improve the results once again with our own method. We saved the final results in the \"f\" file. The scores of the \"f\" file are as follows:\n\n### \"f\" : [(Private Score: 0.98415) , (Public Score: 0.97684)]\n","34aa7f12":"# Functions","f2026d00":"# Submission\n","b46e43f4":"<div class=\"alert alert-success\">  \n<\/div>","a91b2965":"<div class=\"alert alert-success\">  \n<\/div>"}}