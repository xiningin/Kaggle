{"cell_type":{"7cfe8b0f":"code","b4b9fda0":"code","313de2c8":"code","877057e1":"code","191ac15e":"code","9152dced":"code","2e222d78":"code","fb7be4e3":"code","4d4e1bb9":"code","d7ef40ce":"code","38fafe43":"code","453fa81c":"code","7cb868b8":"code","1394b207":"code","cc65f2a7":"code","2a16c48a":"code","b466c602":"code","66bc096e":"code","ac731117":"code","108d044e":"code","bd582681":"code","a94d5106":"code","d04c34db":"code","8c979dd6":"code","96630223":"code","28a1a97e":"code","1e6cfae1":"code","e0760e55":"code","a3f4ac06":"code","dd97e063":"code","f3634907":"code","53ec947e":"code","e403d843":"code","e8a44c71":"code","1a81656e":"code","9510b369":"code","1373e7a0":"code","3a69b3bf":"code","2e1b87dc":"code","85327e02":"code","657707aa":"code","5f27d9a2":"code","cf26587f":"code","aca96dec":"code","4573e572":"code","0b9e8d66":"code","fd9a0742":"code","704e1b54":"code","91be74a7":"code","bf78fb39":"code","0d9e8374":"code","df92e62a":"code","5f445d77":"code","3b85256c":"code","2e900ddd":"code","a0e5ded0":"code","dbff63b2":"code","89f8d5ba":"code","e2860bc9":"code","4c831316":"code","e4a5c650":"code","7bd25382":"code","93f31724":"code","c85730ef":"code","5d511759":"markdown","01a16b71":"markdown","f5457415":"markdown","cca7c12a":"markdown","4c83173c":"markdown","b8bffde7":"markdown","500f101b":"markdown","6ce2d499":"markdown","c2e9b18b":"markdown","2003ef95":"markdown"},"source":{"7cfe8b0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b4b9fda0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix,classification_report,roc_curve,accuracy_score,auc\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom keras.utils import np_utils\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Dense, Dropout, Activation, Conv2D,MaxPooling2D, Flatten\ndf = pd.read_csv(\"..\/input\/pima-diabetes-dataset\/Diabetes.csv\")","313de2c8":"print(df.columns.tolist())","877057e1":"title_mapping = {'YES':1,'NO':0}\ndf[' Class variable']=df[' Class variable'].map(title_mapping)","191ac15e":"#0\ucc98\ub9ac\n\nz=(df == 0).sum(axis=0)\nz=pd.DataFrame(z)\nz.columns=['Zeros Count']\nz.drop(' Class variable',inplace=True)\nz.plot(kind='bar',stacked=True, figsize=(10,5),grid=True)","9152dced":"col=['n_pregnant','glucose_conc','bp','skin_len','insulin','bmi','pedigree_fun','age','Output']\ndf.columns=col\ndf.head()","2e222d78":"#0 \uc81c\uac70 \ud6c4 nan \uc73c\ub85c \ubcc0\ud658\ncol=['glucose_conc','bp','insulin','bmi','skin_len']\nfor i in col:\n    df[i].replace(0, np.nan, inplace= True)","fb7be4e3":"#\uacb0\uacfc\ud655\uc778\ndf.isnull().sum()","4d4e1bb9":"def median_target(var):   \n    temp = df[df[var].notnull()]\n    temp = temp[[var, 'Output']].groupby(['Output'])[[var]].median().reset_index()\n    return temp","d7ef40ce":"median_target('insulin')","38fafe43":"median_target('glucose_conc')","453fa81c":"median_target('skin_len')","7cb868b8":"median_target('bp')","1394b207":"median_target('bmi')","cc65f2a7":"#\uc911\uac04\uac12\uc73c\ub85c NaN \ucc44\uc6cc\ub123\uae30\ndf.loc[(df['Output'] == 0 ) & (df['insulin'].isnull()), 'insulin'] = 102.5\ndf.loc[(df['Output'] == 1 ) & (df['insulin'].isnull()), 'insulin'] = 169.5\ndf.loc[(df['Output'] == 0 ) & (df['glucose_conc'].isnull()), 'glucose_conc'] = 107\ndf.loc[(df['Output'] == 1 ) & (df['glucose_conc'].isnull()), 'glucose_conc'] = 140\ndf.loc[(df['Output'] == 0 ) & (df['skin_len'].isnull()), 'skin_len'] = 27\ndf.loc[(df['Output'] == 1 ) & (df['skin_len'].isnull()), 'skin_len'] = 32\ndf.loc[(df['Output'] == 0 ) & (df['bp'].isnull()), 'bp'] = 70\ndf.loc[(df['Output'] == 1 ) & (df['bp'].isnull()), 'bp'] = 74.5\ndf.loc[(df['Output'] == 0 ) & (df['bmi'].isnull()), 'bmi'] = 30.1\ndf.loc[(df['Output'] == 1 ) & (df['bmi'].isnull()), 'bmi'] = 34.3","2a16c48a":"#\uc544\uc6c3\ub77c\uc774\uc5b4\ub97c \ucc3e\uae30 \uc704\ud55c \ubc15\uc2a4\ud50c\ub86f\nplt.style.use('ggplot') # Using ggplot2 style visuals \n\nf, ax = plt.subplots(figsize=(11, 15))\n\nax.set_facecolor('#fafafa')\nax.set(xlim=(-.05, 200))\nplt.ylabel('Variables')\nplt.title(\"Overview Data Set\")\nax = sns.boxplot(data = df, \n  orient = 'h', \n  palette = 'Set2')","b466c602":"#\uc911\uac04\uac12\uc744 \ud65c\uc6a9\ud55c \uc544\uc6c3\ub77c\uc774\uc5b4 \uc81c\uac70\nsns.boxplot(df.n_pregnant)\n\ndf['n_pregnant'].value_counts()","66bc096e":"median_target('n_pregnant')","ac731117":"#\uc778\uc704\uc870\uc815 : \uc784\uc2e0\ud69f\uc218\ndf.loc[(df['Output'] == 0 ) & (df['n_pregnant']>13), 'n_pregnant'] = 2\ndf.loc[(df['Output'] == 1 ) & (df['n_pregnant']>13), 'n_pregnant'] = 4","108d044e":"#\ud655\uc778\uc0ac\uc0b4\ndf['n_pregnant'].value_counts()","bd582681":"#\ud608\uc555. \uc774\ud558 \ubaa8\ub4e0 \ubcc0\uc218\uc5d0 \ub300\ud574\uc11c \ubc18\ubcf5\ud558\uae30 \ub54c\ubb38\uc5d0 \ud070 \uc124\uba85\uc740 \ud558\uc9c0 \uc54a\uaca0\uc2b5\ub2c8\ub2e4.\nsns.boxplot(df.bp)","a94d5106":"median_target('bp')","d04c34db":"df.loc[(df['Output'] == 0 ) & (df['bp']<40), 'bp'] = 70\ndf.loc[(df['Output'] == 1 ) & (df['bp']<40), 'bp'] = 74.5","8c979dd6":"df.loc[(df['Output'] == 0 ) & (df['bp']>103), 'bp'] = 70\ndf.loc[(df['Output'] == 1 ) & (df['bp']>103), 'bp'] = 74.5","96630223":"sns.boxplot(df.bp)","28a1a97e":"sns.boxplot(df.skin_len)","1e6cfae1":"median_target('skin_len')","e0760e55":"df.loc[(df['Output'] == 0 ) & (df['skin_len']>38), 'skin_len'] = 27\ndf.loc[(df['Output'] == 1 ) & (df['skin_len']>38), 'skin_len'] = 32\ndf.loc[(df['Output'] == 0 ) & (df['skin_len']<20), 'skin_len'] = 27\ndf.loc[(df['Output'] == 1 ) & (df['skin_len']<20), 'skin_len'] = 32","a3f4ac06":"sns.boxplot(df.skin_len)","dd97e063":"sns.boxplot(df.bmi)","f3634907":"median_target('bmi')","53ec947e":"df.loc[(df['Output'] == 0 ) & (df['bmi']>48), 'bmi'] = 30.1\ndf.loc[(df['Output'] == 1 ) & (df['bmi']>48), 'bmi'] = 34.3","e403d843":"sns.boxplot(df.bmi)","e8a44c71":"sns.boxplot(df.pedigree_fun)","1a81656e":"median_target('pedigree_fun')","9510b369":"df.loc[(df['Output'] == 0 ) & (df['pedigree_fun']>1), 'pedigree_fun'] = 0.336\ndf.loc[(df['Output'] == 1 ) & (df['pedigree_fun']>1), 'pedigree_fun'] = 0.449\nsns.boxplot(df.pedigree_fun)","1373e7a0":"median_target('age')","3a69b3bf":"df.loc[(df['Output'] == 0 ) & (df['age']>61), 'age'] = 27\ndf.loc[(df['Output'] == 1 ) & (df['age']>61), 'age'] = 36","2e1b87dc":"VarCorr = df.corr()\nprint(VarCorr)\nsns.heatmap(VarCorr,xticklabels=VarCorr.columns,yticklabels=VarCorr.columns)","85327e02":"#\ud14c\uc2a4\ud2b8\uc14b, \ud2b8\ub808\uc778\uc14b \ubd84\ub9ac\nX = df.drop(['n_pregnant','skin_len','insulin','pedigree_fun','Output'], 1)\ny = df['Output']\nx_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","657707aa":"X.head(5)","5f27d9a2":"std = StandardScaler()\nx_train = std.fit_transform(x_train)\nx_test = std.transform(x_test)","cf26587f":"model=SVC(kernel='rbf')\nmodel.fit(x_train,y_train)","aca96dec":"y_pred=model.predict(x_test)","4573e572":"accuracy_score(y_test,y_pred)","0b9e8d66":"confusion_matrix(y_test,y_pred)","fd9a0742":"print(classification_report(y_test,y_pred))","704e1b54":"model=SVC(kernel='linear')\nmodel.fit(x_train,y_train)","91be74a7":"y_pred=model.predict(x_test)","bf78fb39":"accuracy_score(y_test,y_pred)","0d9e8374":"confusion_matrix(y_test,y_pred)","df92e62a":"print(classification_report(y_test,y_pred))","5f445d77":"regressor=LogisticRegression()","3b85256c":"regressor.fit(x_train,y_train)","2e900ddd":"y_pred=regressor.predict(x_test)","a0e5ded0":"accuracy_score(y_test,y_pred)","dbff63b2":"confusion_matrix(y_test,y_pred)","89f8d5ba":"clf = KNeighborsClassifier(n_neighbors=3) \nclf.fit(x_train,y_train)  \nprint(clf.score(x_test,y_test))","e2860bc9":"print(classification_report(y_test,y_pred))","4c831316":"classifier=RandomForestClassifier()\nclassifier.fit(x_train,y_train)","e4a5c650":"Y_pred=classifier.predict(x_test)\nconfusion_matrix(y_test,Y_pred)","7bd25382":"accuracy_score(y_test,Y_pred)","93f31724":"model = Sequential()\nmodel.add(Dense(32,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(64,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(64,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(128,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(128,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(256,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(256,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))","c85730ef":"print(model.summary())\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer=\"sgd\",metrics=['accuracy'])\nmodel.fit(x_train, y_train, batch_size=10, epochs=50, verbose=1, validation_data=(x_test, y_test))\nloss, accuracy = model.evaluate(x_test,y_test, verbose=0)\nprint(\"Loss : \"+str(loss))\nprint(\"Accuracy :\"+str(accuracy*100.0))","5d511759":"# \ud559\uc2b5\ub370\uc774\ud130 \uc900\ube44\n\n\ud559\uc2b5 \ubc0f \uac80\uc99d\uc744 \uc704\ud574 \ud14c\uc2a4\ud2b8 \uc14b\uacfc \ud559\uc2b5\uc6a9 \uc14b\uc744 \ubd84\ub9ac\ud588\uc2b5\ub2c8\ub2e4.","01a16b71":"# Pima Indian Dataset \uc744 \ubc14\ud0d5\uc73c\ub85c \ud55c\uad6d \uac74\uac15\uac80\uc9c4 \uacb0\uacfc\ub97c \ud1b5\ud574 \ub2f9\ub1e8\ub97c \uc608\uce21\ud558\ub294 \ubaa8\ub378 \ub9cc\ub4e4\uc5b4\ubcf4\uae30","f5457415":"# Neural Net","cca7c12a":"# SVM (RBF \uc0ac\uc6a9)","4c83173c":"# \uc0c1\uad00\uacb0\uacfc \ubd84\uc11d\n\n![image.png](attachment:image.png)\n\n\ubcf4\uc2dc\ub294 \ubc14\uc640 \uac19\uc774 \uc6b0\ub9ac\ub098\ub77c \uac74\uac15 \uac80\uc9c4\uc5d0\uc11c \ubc1b\uc744 \uc218 \uc788\ub294 \ub370\uc774\ud130\ub4e4\uc774 \uac00\uc7a5 \ud070 \uc0c1\uad00\uacc4\uc218\ub97c \ubcf4\uc785\ub2c8\ub2e4.\n\n\ud608\ub2f9(glucose_conc) : 0.49\n\ub098\uc774 (age) : 0.32\nBMI (bmi) : 0.29\n\ud608\uc555(bp) : 0.25\n\n\uc21c\uc73c\ub85c \ub192\uc740 \uc0c1\uad00\uacc4\uc218\ub97c \ubcf4\uc785\ub2c8\ub2e4.\n\n\uadf8\ub7ec\ubbc0\ub85c, \uc800\ub294 \ub300\ud55c\ubbfc\uad6d \uc9c1\uc7a5\uc778 \uac74\uac15\uac80\uc9c4 \ub370\uc774\ud130\ub9cc\uc73c\ub85c\ub3c4 \ub2f9\ub1e8\ubcd1 \ubc1c\ubcd1\ud655\ub960\uc744 \uc608\uce21\ud558\ub294\uac8c \ucda9\ubd84\ud788 \uac00\ub2a5\ud560\uac70\ub77c\uace0 \uc608\uc0c1\ud588\uc2b5\ub2c8\ub2e4.\n\n\n\n","b8bffde7":"# \uacb0\ub860\n\n\uc77c\ub2e8 2020.04.22 Run3 \uae30\uc900 (\uc774 \uae00 \uc5c5\ub85c\ub4dc \uc2dc\uc810 \ub7f0)\uc73c\ub85c\ub294 \uac01 \uae30\ubc95\ubcc4 \uc810\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\nSVM(RBF \uc0ac\uc6a9) : 78%\nSVM(\uc120\ud615) : 79%\nk-\ucd5c\uadfc\uc811 \uc774\uc6c3 : 78%\n\ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8 : 77%\n\uc778\uacf5\uc2e0\uacbd\ub9dd : 77%\n\n1. \ubaa8\ub4e0 \ubc29\ubc95\ub4e4\uc774 80%\uc815\ub3c4 \uc774\ub0b4\uc758 \uc815\ud655\ub3c4\ub97c \ubcf4\uc785\ub2c8\ub2e4.\nSVM(RBF \uc0ac\uc6a9) \uacfc Random Forest \uac00 77~80 \uc0ac\uc774\ub85c \uac00\uc7a5 \uc548\uc815\uc801\uc778 \uba85\uc911\ub960\uc744 \ubcf4\uc785\ub2c8\ub2e4.\n\n\n2. \uc778\uacf5\uc2e0\uacbd\ub9dd\uc740 \ub9cc\ub2a5\uc774 \uc544\ub2d9\ub2c8\ub2e4.\n\uc2e4\ud589 \uc2dc\uac04\uc740 \uac00\uc7a5 \uae34\ub370, kNN\uc774\ub098 SVM \ub4f1 \uba38\uc2e0\ub7ec\ub2dd \ubc29\ubc95\ub860\ub4e4\uacfc \uadf8\ub807\uac8c \uc720\uc758\ubbf8\ud55c \uba85\uc911\ub960 \ucc28\uc774\ub97c \ubcf4\uc774\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4 (2~3% \uc5ce\uce58\ub77d \ub4a4\uce58\ub77d\ud558\ub294\uc815\ub3c4)\n\n\n3. \uc815\ud655\ub3c4\uac00 \uc0dd\uac01\ubcf4\ub2e4 \ub192\uac8c \ub098\uc635\ub2c8\ub2e4\n\uc778\uc290\ub9b0, \uc0b4\uac17 \ub450\uaed8, \uc784\uc2e0 \ud69f\uc218, \ub2f9\ub1e8 \ud568\uc218 \ubcc0\uc218\ub4e4\uc758 \ub098\uba38\uc9c0 \ubc18\uc744 \uccd0\ub0c8\uc74c\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0, 78~80% \uc815\ub3c4\uc758 \uc815\ud655\ub3c4\ub97c \ubcf4\uc774\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\n","500f101b":"# SVM (\uc120\ud615)","6ce2d499":"# \uacb0\uce21\uce58 \ucc98\ub9ac \ud6c4 \ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d\n\n\uc77c\ub2e8 \ud559\uc2b5\uc5d0 \uc6a9\uc774\ud558\uac8c, \ubaa8\ub4e0 \uacb0\uce21\uce58\ub97c \uc911\uac04\uac12\uc73c\ub85c \ubc14\uafd4\uc900 \ub4a4\uc5d0 \ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d\uc5d0 \ub4e4\uc5b4\uac00\uaca0\uc2b5\ub2c8\ub2e4.","c2e9b18b":"# Random Forest","2003ef95":"# k-Nearest Neighbors"}}