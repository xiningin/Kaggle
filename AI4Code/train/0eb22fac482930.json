{"cell_type":{"29cb3011":"code","d6ccd218":"code","dd3eaaab":"code","19eb8297":"code","545cb8c8":"code","a67be4de":"code","d038a6f2":"code","c22dacd0":"code","d99c8202":"code","2a2348bf":"code","5a9db646":"code","966f31cd":"code","443c86ff":"code","0400a8eb":"code","ed9dd69b":"code","b77ec060":"code","ce2bd792":"code","43df3375":"code","78111f69":"code","363b804c":"code","413f1c6b":"code","9eb8f906":"code","b95d5e8c":"code","0928686c":"code","3be133b9":"code","4a1708f6":"code","29104481":"code","7f0885eb":"code","8654240e":"code","e6e3d3dd":"code","c47097b5":"code","cc7fdf10":"code","f7ac0995":"code","3b1379ca":"code","011a5ebd":"code","5bc6e882":"code","c7124576":"code","7dc227a0":"code","88884f2f":"markdown","c6c26bf1":"markdown","56cf6edd":"markdown","563b287e":"markdown","d1ab80ef":"markdown","47d0b9ee":"markdown","a56665c6":"markdown","3341801e":"markdown","8044e2d7":"markdown","603fb0b0":"markdown","84f8e38a":"markdown","c03a1969":"markdown","cae9a276":"markdown","15250ad3":"markdown","235930c4":"markdown","2fe71ec6":"markdown","d975c27a":"markdown","b49aa9b8":"markdown","e0e6b134":"markdown","90cdf4cc":"markdown"},"source":{"29cb3011":"import warnings\nwarnings.filterwarnings('ignore')\n!pip install plotly_express\n!wget -nc https:\/\/codeload.github.com\/weiyunchen\/data\/zip\/master\n!unzip master","d6ccd218":"import os\nimport math\nimport numpy as np\nimport pandas as pd\n\nimport datetime\nfrom datetime import datetime\nfrom math import sqrt\nimport lightgbm as lgb\nfrom keras.models import Sequential\nfrom keras import backend as K\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom keras.layers.core import Dense, Dropout, Activation, Flatten\nfrom keras.optimizers import Adam\nfrom keras.layers.embeddings import Embedding\nfrom keras.preprocessing import sequence\nfrom keras import regularizers\nfrom keras import layers\nfrom keras.layers import LSTM,GRU\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import mean_squared_error\nfrom scipy import stats\nfrom scipy.stats import norm, skew \nimport plotly_express as px\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nplt.style.use('ggplot')\n\nlarge = 18; med = 15; small = 12\nparams = {'axes.titlesize': large,\n          'legend.fontsize': med,\n          'figure.figsize': (16, 10),\n          'axes.labelsize': med,\n          'axes.titlesize': med,\n          'xtick.labelsize': med,\n          'ytick.labelsize': med,\n          'figure.titlesize': large}\nplt.rcParams.update(params)\nplt.style.use('seaborn-whitegrid')\nsns.set_style(\"white\")\n%matplotlib inline","dd3eaaab":"train = pd.read_csv('data-master\/test.csv')\ntest = pd.read_csv('data-master\/test.csv')\n\ntrain.rename(columns={'Lane 1 Flow (Veh\/5 Minutes)':'flow','5 Minutes':'time' },inplace = True)\ntest.rename(columns={'Lane 1 Flow (Veh\/5 Minutes)':'flow','5 Minutes':'time' },inplace = True)","19eb8297":"def null_count(data):  # \u5b9a\u4e49 null \u503c\u67e5\u627e\u51fd\u6570\uff0c\u51fd\u6570\u540d null_count\n    null_data = data.isnull().sum()  # \u67e5\u627e\u5404\u4e2a\u7279\u5f81 null \u503c\u5e76\u8ba1\u7b97\u6570\u91cf\n    null_data = null_data.drop(null_data[null_data == 0].index).sort_values(\n        ascending=False)  # \u5220\u9664\u6570\u76ee\u4e3a\u96f6\u7684\u7279\u5f81\uff0c\u964d\u5e8f\u6392\u5217\n    return null_data  # \u8fd4\u56de\u7ed3\u679c\n\nnull_count(train)  # \u8c03\u7528 null_count \u51fd\u6570\u7edf\u8ba1 data \u7684 null\uff0c\u8f93\u51fa\u7ed3\u679c","545cb8c8":"plt.figure(figsize=(25,10), dpi= 80)\nplt.plot('time', 'flow', data=train, color='tab:blue')\n\nplt.ylim(0, 200)\nxtick_location = train['time'].tolist()[::1555]\nplt.xticks(xtick_location,xtick_location, rotation=0, fontsize=12, horizontalalignment='center', alpha=.7)\nplt.yticks(fontsize=12, alpha=.7)\nplt.title(\"Traffic Flow(per 5 mins)\", fontsize=20)\nplt.grid(axis='both', alpha=.3)\n\nplt.gca().spines[\"top\"].set_alpha(0.0)    \nplt.gca().spines[\"bottom\"].set_alpha(0.3)\nplt.gca().spines[\"right\"].set_alpha(0.0)    \nplt.gca().spines[\"left\"].set_alpha(0.3)   \nplt.show()","a67be4de":"train1=train.head(301)\n\ntrain2=train1.drop(axis=1, index=0)\ntrain2.index=train2.index-1\ntrain2['flow_prev5min']=train1['flow'] # flow_prev5min\u4e3a\u4e94\u5206\u949f\u524d\u7684\u4ea4\u901a\u6d41\u91cf\ntrain2['change_5min']=train2['flow']\/train2['flow_prev5min']\n\ntrain0=train.head(600)\ntrain3=train0.drop(axis=1, index=range(288))\ntrain3.index=train3.index-288\ntrain3['flow_prev1day']=train0['flow'] # flow_prev1day\u4e3a\u4e00\u5929\u524d\u7684\u4ea4\u901a\u6d41\u91cf\ntrain3['change_1day']=train3['flow']\/train3['flow_prev1day']","d038a6f2":"# \u901a\u8fc7\u52a8\u6001\u65f6\u5e8f\u56fe\u50cf\u89c2\u5bdf\u6bcf\u4e2a\u65f6\u523b\u7684\u5f53\u65f6\u4ea4\u901a\u6d41\u91cf\u548c5\u5206\u949f\u524d\u7684\u4ea4\u901a\u6d41\u91cf\u53d8\u5316\u60c5\u51b5\nimport plotly_express as px\n\npx.scatter(train2,x=\"flow_prev5min\",y=\"flow\",size=\"change_5min\",size_max=35,\n           animation_frame=\"time\",range_x=[0,200], range_y=[0,200],width=900, height=900)","c22dacd0":"# \u901a\u8fc7\u52a8\u6001\u65f6\u5e8f\u56fe\u50cf\u89c2\u5bdf\u6bcf\u4e2a\u65f6\u523b\u7684\u5f53\u65f6\u4ea4\u901a\u6d41\u91cf\u548c1\u5929\u524d\u7684\u4ea4\u901a\u6d41\u91cf\u53d8\u5316\u60c5\u51b5\npx.scatter(train3,x=\"flow_prev1day\",y=\"flow\",size=\"change_1day\",size_max=35,\n           animation_frame=\"time\",range_x=[0,200], range_y=[0,200],width=900, height=900)","d99c8202":"def get_hour(time):\n    hour = time[-5:-3]\n    return hour\n\ndef get_min(time):\n    min = time[-2:]\n    return min\n\ndef get_day(time):\n    day = time[:2]\n    return day\n\ndef get_month(time):\n    month = time[3:5]\n    return month\n\ndef get_year(time):\n    year = time[6:10]\n    return year\n\ndef get_line(time):\n    line = time[2:3]\n    return line\n\ntrain['hour'] = train['time'].apply(get_hour)\ntrain['min'] = train['time'].apply(get_min)\ntrain['day'] = train['time'].apply(get_day)\ntrain['month'] = train['time'].apply(get_month)\ntrain['year'] = train['time'].apply(get_year)\ntrain['line'] = train['time'].apply(get_line)\n\n# \u751f\u6210yymmdd\u683c\u5f0f\u7684\u65e5\u671f\ntrain['yymmdd']=train['year']+train['line']+train['month']+train['line']+train['day']\n# \u751f\u6210yymmdd\u683c\u5f0f\u7684\u65f6\u95f4\ntrain['yymmddh']=train['year']+train['line']+train['month']+train['line']+train['day']+train['line']+train['hour']","2a2348bf":"test['hour'] = test['time'].apply(get_hour)\ntest['min'] = test['time'].apply(get_min)\ntest['day'] = test['time'].apply(get_day)\ntest['month'] = test['time'].apply(get_month)\ntest['year'] = test['time'].apply(get_year)\ntest['line'] = test['time'].apply(get_line)\n\n# \u751f\u6210yymmdd\u683c\u5f0f\u7684\u65e5\u671f\ntest['yymmdd']=test['year']+test['line']+test['month']+test['line']+test['day']\n# \u751f\u6210yymmdd\u683c\u5f0f\u7684\u65f6\u95f4\ntest['yymmddh']=test['year']+test['line']+test['month']+test['line']+test['day']+test['line']+test['hour']","5a9db646":"grb_day_flow_sum=train.groupby('yymmdd')['flow'].sum()\n\nday_flow_sum = pd.DataFrame({\"date\" : grb_day_flow_sum.index, \"day_flow\":grb_day_flow_sum})\nday_flow_sum.index = range(len(grb_day_flow_sum))\n\n\ngrb_hour_flow_sum=train.groupby('hour')['flow'].sum()\n\nhour_flow_sum = pd.DataFrame({\"hour\" : grb_hour_flow_sum.index, \"hour_flow\":grb_hour_flow_sum})\nhour_flow_sum.index = range(len(grb_hour_flow_sum))","966f31cd":"plt.figure(1)\nplt.figure(figsize=(10,11), dpi= 80)\n\nplt.subplot(211)\nplt.plot('date', 'day_flow', data=day_flow_sum, color='tab:blue')\n\nplt.ylim(0, 30000)\nxtick_location = day_flow_sum['date'].tolist()[::4]\nplt.xticks(xtick_location,xtick_location, rotation=0, fontsize=12, horizontalalignment='center', alpha=.7)\nplt.yticks(fontsize=12, alpha=.7)\nplt.title(\"Traffic Flow(per day)\", fontsize=20)\nplt.grid(axis='both', alpha=.3)\n\nplt.gca().spines[\"top\"].set_alpha(0.0)    \nplt.gca().spines[\"bottom\"].set_alpha(0.3)\nplt.gca().spines[\"right\"].set_alpha(0.0)    \nplt.gca().spines[\"left\"].set_alpha(0.3)   \n\nplt.subplot(212)\nplt.plot('hour', 'hour_flow', data=hour_flow_sum, color='tab:blue')\n\nplt.ylim(0, 50000)\nxtick_location = hour_flow_sum['hour'].tolist()[::1]\nplt.xticks(xtick_location,xtick_location, rotation=0, fontsize=12, horizontalalignment='center', alpha=.7)\nplt.yticks(fontsize=12, alpha=.7)\nplt.title(\"Traffic Flow(hour)\", fontsize=20)\nplt.grid(axis='both', alpha=.3)\n\nplt.gca().spines[\"top\"].set_alpha(0.0)    \nplt.gca().spines[\"bottom\"].set_alpha(0.3)\nplt.gca().spines[\"right\"].set_alpha(0.0)    \nplt.gca().spines[\"left\"].set_alpha(0.3)   \nplt.show()","443c86ff":"every_hour_flow = train.groupby('yymmddh').sum()","0400a8eb":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nfig, (ax1, ax2) = plt.subplots(1, 2,figsize=(16,6), dpi= 80)\nplot_acf(every_hour_flow.flow.tolist(), ax=ax1, lags=90)\nplot_pacf(every_hour_flow.flow.tolist(), ax=ax2, lags=50)\n\nax1.spines[\"top\"].set_alpha(.3); ax2.spines[\"top\"].set_alpha(.3)\nax1.spines[\"bottom\"].set_alpha(.3); ax2.spines[\"bottom\"].set_alpha(.3)\nax1.spines[\"right\"].set_alpha(.3); ax2.spines[\"right\"].set_alpha(.3)\nax1.spines[\"left\"].set_alpha(.3); ax2.spines[\"left\"].set_alpha(.3)\n\nax1.tick_params(axis='both', labelsize=12)\nax2.tick_params(axis='both', labelsize=12)\nplt.show()","ed9dd69b":"# \u5bf9\u7c7b\u522b\u7279\u5f81\u7f16\u7801\nlb=LabelEncoder()\ntrain['hour_code'] = lb.fit_transform(train['hour'].values)\ntrain['month_code'] = lb.fit_transform(train['month'].values)\ntrain['day_code'] = lb.fit_transform(train['day'].values)\ntrain['min_code'] = lb.fit_transform(train['min'].values)\n\ntest['hour_code'] = lb.fit_transform(test['hour'].values)\ntest['month_code'] = lb.fit_transform(test['month'].values)\ntest['day_code'] = lb.fit_transform(test['day'].values)\ntest['min_code'] = lb.fit_transform(test['min'].values)","b77ec060":"col=['hour_code', 'day_code','month_code','min_code']\n\nX=train[col]\ny=train['flow']\n\nX_train,X_test,y_train,y_test=train_test_split(X,y,random_state=0,test_size=0.2)","ce2bd792":"from matplotlib.pylab import date2num\n\ntrain['time1'] = pd.to_datetime(train['time'],format=\"%d\/%m\/%Y %H:%M\")\ntrain['timestamp'] = date2num(train['time1'])\n\ntest['time1'] = pd.to_datetime(test['time'],format=\"%d\/%m\/%Y %H:%M\")\ntest['timestamp'] = date2num(test['time1'])","43df3375":"lgb_train = lgb.Dataset(X_train, y_train, feature_name=col, categorical_feature=col)\nlgb_test = lgb.Dataset(X_test, y_test, feature_name=col, categorical_feature=col, reference=lgb_train)\n\n# \u8bbe\u7f6e\u53c2\u6570\nparams = {'nthread': 32,  # \u8fdb\u7a0b\u6570\n              'objective': 'regression',\n              'learning_rate':0.001,\n              #'num_leaves': 64, \n              #'max_depth': 6, \n              'feature_fraction': 0.7,  # \u6837\u672c\u5217\u91c7\u6837\n              'lambda_l1':0.001,  # L1 \u6b63\u5219\u5316\n              'lambda_l2': 0,  # L2 \u6b63\u5219\u5316\n              'bagging_seed': 100,  # \u968f\u673a\u79cd\u5b50\n              }\nparams['metric'] = ['rmse']\n\nevals_result = {}  #\u8bb0\u5f55\u8bad\u7ec3\u7ed3\u679c\n\nprint('START LGBM')\ngbm_start=datetime.now() \n# train\ngbm = lgb.train(params,\n                lgb_train,\n                num_boost_round=10000,\n                valid_sets=[lgb_train, lgb_test],\n                evals_result=evals_result,\n                verbose_eval=10)\ngbm_end=datetime.now() \nprint('spendt time :'+str((gbm_end-gbm_start).seconds)+'(s)')","78111f69":"ax = lgb.plot_metric(evals_result, metric='rmse')\nplt.show()","363b804c":"ax = lgb.plot_importance(gbm, max_num_features=7)\nplt.show()","413f1c6b":"test_lgb=gbm.predict(test[col]) \n\ntest['flow_LGBM']=test_lgb","9eb8f906":"train = pd.read_csv('data-master\/test.csv')\ntest = pd.read_csv('data-master\/test.csv')\n\ntrain.rename(columns={'Lane 1 Flow (Veh\/5 Minutes)':'flow','5 Minutes':'time' },inplace = True)\ntest.rename(columns={'Lane 1 Flow (Veh\/5 Minutes)':'flow','5 Minutes':'time' },inplace = True)","b95d5e8c":"scaler = MinMaxScaler(feature_range=(0, 1)).fit(train0['flow'].values.reshape(-1, 1))\n\nflow_train_now = scaler.transform(train['flow'].values.reshape(-1, 1)).reshape(1, -1)[0]\nflow_test_now = scaler.transform(test['flow'].values.reshape(-1, 1)).reshape(1, -1)[0]\n\ntr, te = [], []\nfor i in range(1, len(flow_train_now)):\n    tr.append(flow_train_now[i - 1: i + 1])\nfor i in range(1, len(flow_test_now)):\n    te.append(flow_test_now[i - 1: i + 1])\n\ntr = np.array(tr)\nte = np.array(te)\nnp.random.shuffle(tr)","0928686c":"X_train = tr[:, :-1]\ny_train = tr[:, -1]\nX_test = te[:, :-1]\ny_test = te[:, -1]\n\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))","3be133b9":"model = Sequential()\nmodel.add(LSTM(128, input_shape=(1, 1), return_sequences=True))\nmodel.add(LSTM(64))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.summary() ","4a1708f6":"#from keras.utils import multi_gpu_model   #\u5bfc\u5165keras\u591aGPU\u51fd\u6570\n\n#LSTM_model = multi_gpu_model(model, gpus=4) # \u8bbe\u7f6e\u4f7f\u75284\u4e2agpu\nLSTM_model = model\nLSTM_model.compile(loss='mean_squared_error', optimizer=Adam())\n\nfrom keras.callbacks import EarlyStopping\nearly_stopping = EarlyStopping(monitor='val_loss', patience=50, verbose=2)\n# \u8bad\u7ec3\nhistory = LSTM_model.fit(X_train, y_train, epochs=200, batch_size=200, validation_data=(X_test, y_test), verbose=2, shuffle=False, callbacks=[early_stopping])","29104481":"# loss\u66f2\u7ebf\nplt.plot(history.history['loss'], label='train')\nplt.plot(history.history['val_loss'], label='test')\nplt.legend()\nplt.show()","7f0885eb":"# make predictions\ntrpre_LSTM = LSTM_model.predict(X_train)\ntepre_LSTM = LSTM_model.predict(X_test)\n\n# invert predictions\ntrpre_LSTM = scaler.inverse_transform(trpre_LSTM)\ny_train_LSTM = scaler.inverse_transform([y_train])\n\ntepre_LSTM = scaler.inverse_transform(tepre_LSTM)\ny_test_LSTM = scaler.inverse_transform([y_test])\n\ntrainScore = math.sqrt(mean_squared_error(y_train_LSTM[0], trpre_LSTM[:,0]))\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(y_test_LSTM[0], tepre_LSTM[:,0]))\nprint('Test Score: %.2f RMSE' % (testScore))","8654240e":"trainScore = math.sqrt(mean_squared_error(y_train_LSTM[0], trpre_LSTM[:,0]))\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(y_test_LSTM[0], tepre_LSTM[:,0]))\nprint('Test Score: %.2f RMSE' % (testScore))","e6e3d3dd":"model = Sequential()\nmodel.add(GRU(128, input_shape=(1, 1), return_sequences=True))\nmodel.add(GRU(64))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation='sigmoid'))","c47097b5":"#from keras.utils import multi_gpu_model   #\u5bfc\u5165keras\u591aGPU\u51fd\u6570\n\n#GRU_model = multi_gpu_model(model, gpus=4) # \u8bbe\u7f6e\u4f7f\u75284\u4e2agpu\nGRU_model=model\nGRU_model.compile(loss='mean_squared_error', optimizer=Adam())\n\nfrom keras.callbacks import EarlyStopping\nearly_stopping = EarlyStopping(monitor='val_loss', patience=50, verbose=2)\n# \u8bad\u7ec3\nhistory = GRU_model.fit(X_train, y_train, epochs=200, batch_size=200, validation_data=(X_test, y_test), verbose=2, shuffle=False, callbacks=[early_stopping])","cc7fdf10":"# loss\u66f2\u7ebf\nplt.plot(history.history['loss'], label='train')\nplt.plot(history.history['val_loss'], label='test')\nplt.legend()\nplt.show()","f7ac0995":"# make predictions\ntrpre_GRU = GRU_model.predict(X_train)\ntepre_GRU = GRU_model.predict(X_test)\n\n# invert predictions\ntrpre_GRU = scaler.inverse_transform(trpre_GRU)\ny_train_GRU = scaler.inverse_transform([y_train])\n\ntepre_GRU = scaler.inverse_transform(tepre_GRU)\ny_test_GRU = scaler.inverse_transform([y_test])","3b1379ca":"trainScore = math.sqrt(mean_squared_error(y_train_GRU[0], trpre_GRU[:,0]))\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(y_test_GRU[0], tepre_GRU[:,0]))\nprint('Test Score: %.2f RMSE' % (testScore))","011a5ebd":"test.drop(axis=1, index=4319,inplace=True)","5bc6e882":"test['flow_LGBM']=test_lgb[:-1]\ntest['flow_LSTM']=y_test_LSTM[0]\ntest['flow_GRU']=y_test_GRU[0]\n\ncol = ['time', 'flow','flow_LSTM','flow_GRU','flow_LGBM','flow_SRNN']","c7124576":"test_0=test.head(500)","7dc227a0":"fig, ax = plt.subplots(1,1,figsize=(30, 14), dpi= 80)    \nplt.plot(test_0.flow,'r-')\nplt.plot(test_0.flow_LGBM,'pink')\nplt.plot(test_0.flow_LSTM,'orange')\nplt.plot(test_0.flow_GRU,'green')\nplt.show()","88884f2f":"\u53ef\u4ee5\u770b\u51fa\u4ea4\u901a\u6d41\u91cf\u6709\u975e\u5e38\u660e\u663e\u7684\u5468\u671f\u6027\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8fdb\u4e00\u6b65\u5206\u6790","c6c26bf1":"\u901a\u8fc7\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u5b9e\u9a8c\u671f\u95f4\u5185\uff0c\u5f71\u54cd\u4ea4\u901a\u6d41\u91cf\u7684\u4e3b\u8981\u65f6\u95f4\u56e0\u7d20\u662f\u5c0f\u65f6\uff0c\u800c\u65e5\u671f\u7684\u53d8\u5316\u5bf9\u4ea4\u901a\u6d41\u91cf\u7684\u5f71\u54cd\u5f88\u5c0f\u3002\u6211\u4eec\u5206\u6790\u8fd9\u662f\u7531\u4e8e\u4eba\u7c7b\u7684\u4f5c\u606f\u4e60\u60ef\u5bfc\u81f4\u7684\uff0c\u53ef\u4ee5\u770b\u51fa\u57286\u70b9\u5de6\u53f3\u5b58\u5728\u4e00\u6bb5\u9ad8\u5cf0\u671f\uff0c\u572822\u70b9\u52304\u70b9\u8fd9\u6bb5\u65f6\u95f4\u4eba\u4eec\u90fd\u5728\u7761\u89c9\uff0c\u4ea4\u901a\u6d41\u91cf\u5f88\u5c0f\u3002","56cf6edd":"\u63a5\u4e0b\u6765\u6211\u4eec\u7edf\u8ba1\u6bcf\u65e5\u4ea4\u901a\u6d41\u91cf\u548c\u8fd9\u6bb5\u65f6\u671f\u91cc\u5404\u4e2a\u5c0f\u65f6\u7684\u603b\u4ea4\u901a\u6d41\u91cf","563b287e":"## \u51e0\u79cd\u6a21\u578b\u5bf9\u6bd4","d1ab80ef":" \u6211\u4eec\u91cd\u65b0\u56de\u5230\u539f\u59cb\u6570\u636e\u96c6\uff0c\u7ed9\u6570\u636e\u96c6\u53ea\u6709\u4e00\u4e2a\u7279\u5f81\uff0c\u5c31\u662f\u65f6\u95f4\u5e8f\u5217\uff0c\u56e0\u6b64\u5f88\u660e\u663e\uff0c\u6211\u4eec\u8981\u7528RNN\u6765\u5efa\u6a21\uff0c\u4f46\u662f\u7531\u4e8e\u6211\u4eec\u7684\u7ec6\u5fc3\u89c2\u5bdf\u548c\u806a\u660e\u624d\u667a\uff0c\u6211\u4eec\u5c06\u65f6\u95f4\u5e8f\u5217\u7ec6\u5206\u6210\u4e86\u51e0\u4e2a\u65f6\u95f4\u7279\u5f81\u5e76\u4e14\u603b\u7ed3\u51fa\u4e86\u975e\u5e38\u4e0d\u9519\u7684\u7ed3\u8bba\uff0c\u800c\u4e14LGBM\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u7c7b\u522b\u7279\u5f81\u4ece\u800c\u5e2e\u52a9\u6211\u4eec\u6316\u6398\u65f6\u95f4\u548c\u4ea4\u901a\u6d41\u91cf\u7684\u5173\u7cfb\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u5c1d\u8bd5\u4f7f\u7528LGBM\u5efa\u6a21\uff0c\u7136\u540e\u518d\u7528LSTM\uff0cGRU\uff0cSAEs\u5efa\u6a21\uff0c\u5c06\u8fd9\u4e9b\u6a21\u578b\u7684\u7ed3\u679c\u8fdb\u884c\u5bf9\u6bd4\u3002\n LGBM\u5927\u4f53\u5efa\u6a21\u601d\u8def\u5982\u4e0b\uff1a\n - LGBM\uff1a\u5c06\u6708\u3001\u65e5\u3001\u65f6\u6307\u5b9a\u4e3a\u7c7b\u522b\u7279\u5f81\u3002\n\u7f3a\u70b9\uff1a\u5c06`day`\u3001`month`\u6307\u5b9a\u4e3a\u7c7b\u522b\u662f\u4e00\u4e2a\u975e\u5e38\u65e0\u5948\u5730\u89e3\u51b3\u65b9\u5f0f\uff0c\u56e0\u4e3a\u4e00\u4e2a\u6708\u670930\u591a\u5929\uff0c\u4f46\u8fd9\u4e2a\u6570\u636e\u96c6\u53ea\u6709\u4e24\u4e2a\u6708\uff0c\u6bcf\u4e2a\u7c7b\u522b\u5e26\u6765\u7684\u4fe1\u606f\u589e\u76ca\u4f1a\u975e\u5e38\u975e\u5e38\u5c0f\u751a\u81f3\u53ef\u80fd\u8d77\u5230\u8d1f\u4f5c\u7528\u3002","47d0b9ee":"## \u5c06\u65f6\u95f4\u5e8f\u5217\u5206\u89e3\u8fdb\u4e00\u6b65\u5206\u6790","a56665c6":"# \u65f6\u95f4\u5e8f\u5217\u5206\u6790\u53ca\u53ef\u89c6\u5316","3341801e":"### LSTM","8044e2d7":"\u5176\u5b9e\u65f6\u95f4\u5e8f\u5217\u91cc\u9690\u542b\u4e86\u5f88\u591a\u7279\u5f81\uff0c\u5982\u6708\u4efd\u3001\u65e5\u671f\u3001\u5b63\u8282\u3001\u5c0f\u65f6\u7b49\uff0c\u8fd9\u4e9b\u7279\u5f81\u672c\u8eab\u5c31\u5177\u6709\u4e25\u683c\u7684\u5468\u671f\u3002\u5229\u7528\u8fd9\u4e9b\u7279\u5f81\u53ef\u4ee5\u6316\u6398\u51fa\u5f88\u591a\u6570\u636e\u7684\u89c4\u5f8b\u3002\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u65f6\u95f4\u5e8f\u5217\u8fdb\u884c\u7ec6\u5206\uff0c\u5c06\u65f6\u95f4\u5e8f\u5217\u4e2d\u7684\u65e5\u671f\u3001\u5e26\u5177\u4f53\u65e5\u671f\u7684\u5c0f\u65f6\u548c\u4e0d\u5e26\u5177\u4f53\u65e5\u671f\u7684\u5c0f\u65f6\u5355\u72ec\u63d0\u53d6\u51fa\u6765\uff0c\u540e\u7eed\u8fd9\u4e9b\u7279\u5f81\u4f5c\u4e3a\u5f52\u7c7b\u7684\u7d22\u5f15\u4f7f\u7528\uff0c\u4ee5\u4fbf\u8fdb\u4e00\u6b65\u5206\u6790\u65f6\u95f4\u5e8f\u5217","603fb0b0":"\u53ef\u4ee5\u770b\u5230\uff0cLSTM\u548cGRU\u7684\u66f2\u7ebf\u548c\u771f\u5b9e\u4ea4\u901a\u6d41\u91cf\u7684\u66f2\u7ebf\u8f83\u4e3a\u63a5\u8fd1\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u5e8f\u8d2f\u6a21\u578b\uff0cLGBM\u5bf9\u65f6\u95f4\u70b9\u7684\u6d41\u91cf\u9884\u6d4b\u8f83\u4e0d\u7a33\u5b9a\uff0c\u4f46\u662f\u5bf9\u65f6\u95f4\u6bb5\u7684\u603b\u6d41\u91cf\u6709\u4e00\u5b9a\u9884\u6d4b\u80fd\u529b\uff0c\u56e0\u4e3aLGBM\u6ca1\u6709\u8003\u8651\u4e0a\u4e00\u65f6\u523b\u6d41\u91cf\u5bf9\u540e\u7eed\u6d41\u91cf\u9020\u6210\u7684\u5f71\u54cd","84f8e38a":"## RNN","c03a1969":"\u6211\u4eec\u5c06\u65f6\u95f4\u5e8f\u5217\u7ec6\u5206\u6210\u4e86\u5f88\u591a\u7279\u5f81\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5206\u522b\u4ee5\u8fd9\u4e9b\u7279\u5f81\u4e3a\u7d22\u5f15\u5bf9\u6570\u636e\u8fdb\u884c\u5408\u5e76\uff0c\u8fdb\u800c\u5206\u6790\u6bcf\u4e00\u5929\u6216\u6bcf\u4e2a\u5c0f\u65f6\u7684\u4ea4\u901a\u603b\u6d41\u91cf\u3001\u4e00\u4e8c\u6708\u4efd\u5404\u4e2a\u5c0f\u65f6\u7684\u4ea4\u901a\u603b\u6d41\u91cf","cae9a276":"# \u5bfc\u5165\u6570\u636e\u53ca\u9884\u5904\u7406","15250ad3":"# \u673a\u5668\u5b66\u4e60\u5efa\u6a21","235930c4":"### GRU","2fe71ec6":"\u63a5\u4e0b\u6765\u6211\u4eec\u505a\u51fa\u4ea4\u901a\u6d41\u91cf\u7684\u81ea\u76f8\u5173\u56fe\uff0c\u6211\u4eec\u9996\u5148\u7edf\u8ba1\u5404\u4e2a\u65e5\u671f\u91cc\u7684\u6bcf\u4e2a\u5c0f\u65f6\u7684\u4ea4\u901a\u603b\u6d41\u91cf\uff0c\u7136\u540e\u8fdb\u884c\u5206\u6790","d975c27a":"## LGBM","b49aa9b8":"### \u63a5\u4e0b\u6765\u6211\u4eec\u91cd\u65b0\u5904\u7406\u6570\u636e","e0e6b134":"## ACF\u548cPCAF","90cdf4cc":"\u53ef\u4ee5\u770b\u51fa\uff0cACF\u548cPCAF\u90fd\u662f24\u9636\u62d6\u5c3e\uff0c\u8bf4\u660e\u4ea4\u901a\u6d41\u91cf\u5177\u6709\u975e\u5e38\u5f3a\u7684\u65e5\u5468\u671f\u7279\u5f81\u3002\u540e\u7eed\u6211\u4eec\u5efa\u6a21\u65f6\u9700\u8981\u5c06\u5468\u671f\u53d8\u52a8\u7279\u5f81\u8003\u8651\u5230\u3002"}}