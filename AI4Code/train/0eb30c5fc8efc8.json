{"cell_type":{"ae7b3e9d":"code","f276d1a3":"code","1d4c7070":"code","4b37a84a":"code","aa499c75":"code","ef0c349e":"code","c0363386":"code","68bd6050":"code","bb577251":"code","60787c78":"code","aa70dc9e":"code","dfbe85f7":"code","a0b3d848":"code","7a3abd21":"code","c8ba93b0":"code","5bf3cb32":"code","a0d323c4":"code","e83579e1":"code","3d359a34":"code","72a29043":"code","349af784":"code","f6697015":"code","d43308af":"code","12a72cd1":"code","b32a4797":"code","90d6cca6":"code","f70089b7":"code","c1407bf4":"code","3958faf9":"code","c5b8b97e":"code","852f7ebe":"code","92d5ae77":"code","d3ed6a4d":"code","0dd7f2c3":"code","505547ec":"code","0ec10454":"code","b7ad29e3":"code","4994a186":"code","c180036c":"code","5d7b886c":"code","fe4e2562":"code","f392abb5":"code","b538a13a":"code","082c959d":"code","7f1c364e":"code","618d4b86":"code","0fec4673":"code","6e110b06":"code","5cdacda1":"code","7c0e4b3f":"code","f5536efa":"code","d79dc3a3":"code","c588a58c":"code","6f5f16b6":"markdown","e7a5a453":"markdown","256eb949":"markdown","166b2a12":"markdown","67b23fc4":"markdown"},"source":{"ae7b3e9d":"!pip install fbprophet","f276d1a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport statsmodels.tsa as tsa\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, plot_components_plotly\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d4c7070":"infected = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\")\ndead = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\")\nrecovered = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\")","4b37a84a":"infected.head()","aa499c75":"def country(c):\n    inf = infected.loc[infected['Country\/Region'] == str(c)].T[4:]\n    deaths = dead.loc[dead['Country\/Region'] == str(c)].T[4:]\n    rec = recovered.loc[recovered['Country\/Region'] == str(c)].T[4:]\n    return [inf,deaths,rec]","ef0c349e":"data = country('Brazil')","c0363386":"def daily(data):\n    data['daily'] = data.diff()","68bd6050":"def ma(data,time):\n    data['ma'+str(time)] = data['daily'].rolling(time).mean()","bb577251":"for d in data:\n    daily(d)\n    ma(d,7)","60787c78":"print('Infectados: {:,}'.format(data[0]['daily'].sum()))\nprint(\"Mortos: {:,}\".format(data[1]['daily'].sum()))\nprint(\"Recuperados: {:,}\".format(data[2]['daily'].sum()))","aa70dc9e":"data[0]['daily'].plot(figsize=(20,10))\ndata[0]['ma7'].plot(figsize=(20,10))","dfbe85f7":"decompose = tsa.seasonal.seasonal_decompose(data[0]['daily'].dropna(), period=14)","a0b3d848":"g = decompose.plot()","7a3abd21":"g.set_figwidth(20)\ng.set_figheight(12)","c8ba93b0":"g","5bf3cb32":"acf = tsa.stattools.acf(data[0]['daily'].dropna())","a0d323c4":"acf","e83579e1":"pd.Series(acf).plot.bar(figsize=(10,5))","3d359a34":"dir(acf)","72a29043":"data[1]['daily'].plot(figsize=(20,10))\ndata[1]['ma7'].plot(figsize=(20,10))","349af784":"decompose = tsa.seasonal.seasonal_decompose(data[1]['daily'].dropna(), period=14)","f6697015":"g = decompose.plot()","d43308af":"g.set_figwidth(20)\ng.set_figheight(12)","12a72cd1":"g","b32a4797":"acf = tsa.stattools.acf(data[1]['daily'].dropna())","90d6cca6":"pd.Series(acf).plot.bar(figsize=(10,5))","f70089b7":"ccf = tsa.stattools.ccf(data[0]['daily'].dropna(),data[1]['daily'].dropna())","c1407bf4":"pd.Series(ccf).plot.bar(figsize=(10,5))","3958faf9":"data[2]['daily'].plot(figsize=(20,10))\ndata[2]['ma7'].plot(figsize=(20,10))","c5b8b97e":"decompose = tsa.seasonal.seasonal_decompose(data[2]['daily'].dropna(), period=14)","852f7ebe":"g = decompose.plot()","92d5ae77":"g.set_figwidth(20)\ng.set_figheight(12)","d3ed6a4d":"g","0dd7f2c3":"acf = tsa.stattools.acf(data[2]['daily'].dropna())","505547ec":"pd.Series(acf).plot.bar(figsize=(10,5))","0ec10454":"ccf = tsa.stattools.ccf(data[0]['daily'].dropna(),data[2]['daily'].dropna())","b7ad29e3":"pd.Series(ccf).plot.bar(figsize=(10,5))","4994a186":"X = pd.DataFrame({'ds':data[0].index,'y':np.array(data[0]['ma7'])})","c180036c":"m = Prophet()\nm.fit(X[1:])\nfuture = m.make_future_dataframe(periods=365)\nforecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()\nfig1 = m.plot(forecast)","5d7b886c":"results = sm.OLS(np.array(X.dropna()['y']),np.array(X.dropna().index)).fit()\n#results.summary()","fe4e2562":"pd.Series(results.predict(X.dropna().index)).plot()","f392abb5":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom sklearn import linear_model\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error","b538a13a":"X = pd.DataFrame({'t-1': data[0]['ma7'].dropna().shift(periods=1),\\\n                  't-2': data[0]['ma7'].dropna().shift(periods=2),\\\n                  't-3': data[0]['ma7'].dropna().shift(periods=3),\\\n                  't-4': data[0]['ma7'].dropna().shift(periods=4),\\\n                  't-5': data[0]['ma7'].dropna().shift(periods=5),\\\n                  't-6': data[0]['ma7'].dropna().shift(periods=6),\\\n                  't-7': data[0]['ma7'].dropna().shift(periods=7)\n                 })","082c959d":"X = X.dropna()","7f1c364e":"y = data[0]['ma7'].dropna()","618d4b86":"y = y[7:]","0fec4673":"tscv = TimeSeriesSplit()","6e110b06":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)","5cdacda1":"\"\"\"\nfor train_index, test_index in tscv.split(X):\n    print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n\"\"\"","7c0e4b3f":"bay = linear_model.BayesianRidge()\nnn = linear_model.Ridge(alpha=.5)\nsvr = SVR(C=1.0, epsilon=0.2)\nrf = RandomForestRegressor(max_depth=2, random_state=0)","f5536efa":"models = [bay, nn, svr, rf]\nnames = ['bay','nn', 'svr', 'rf']","d79dc3a3":"def train_models(model, name):\n    model.fit(X_train, y_train)\n    r = model.predict(X_test)\n    score = mean_squared_error(r,y_test)\n    score2 = mean_absolute_error(r,y_test)\n    print(name)\n    print('{:,}'.format(score))\n    print('{:,}'.format(score2))\n    return score","c588a58c":"for model in zip(models,names):\n    train_models(model[0],model[1])","6f5f16b6":"### Infected","e7a5a453":"### Quick and dirty compariosions","256eb949":"### Deaths","166b2a12":"### Quick and dirty Forecast","67b23fc4":"### Recovered"}}