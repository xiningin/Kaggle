{"cell_type":{"8d50b449":"code","0470fb19":"code","7fa75cf4":"code","5feecd01":"code","757dbbf3":"code","d5df57d7":"code","d939b4f8":"code","7dfb01db":"code","d0e97c0e":"code","4169eb94":"code","51bfaba5":"code","1a09a864":"code","e09ce56c":"code","e9d6ab0d":"code","6ed92aec":"code","820cf835":"code","aa6b3958":"code","5206e58a":"code","6d27c8d4":"code","5005605f":"code","bad9761d":"code","6b0678be":"code","040d4194":"code","e3189209":"code","bec64d7d":"code","2e7b3b99":"code","b94f28d5":"code","a0da8d89":"markdown","478689ff":"markdown","cdf3e91e":"markdown","fcd0b66d":"markdown","ebad58d8":"markdown","f8cefb9c":"markdown"},"source":{"8d50b449":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0470fb19":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\nimport plotly.express as px # to plot the time series plot\n\nimport warnings\nwarnings.simplefilter('ignore')","7fa75cf4":"import datetime as datetime\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.metrics import accuracy_score, f1_score, mean_squared_error, r2_score\nfrom sklearn.model_selection import KFold, RandomizedSearchCV\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=1)\n\nfrom sklearn.linear_model import RidgeCV, ElasticNetCV\nfrom sklearn.linear_model import LinearRegression, ElasticNet\nfrom sklearn.svm import LinearSVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.dummy import DummyRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor\nfrom sklearn.ensemble import StackingRegressor, BaggingRegressor, VotingRegressor, ExtraTreesRegressor\n\nfrom lightgbm import LGBMRegressor\n!pip install -q catboost\nfrom catboost import CatBoostRegressor\nfrom xgboost import XGBRegressor\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","5feecd01":"train = pd.read_csv(\"\/kaggle\/input\/supplement-sales-prediction\/TRAIN.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/supplement-sales-prediction\/TEST_FINAL.csv\")\nsub = pd.read_csv(\"\/kaggle\/input\/supplement-sales-prediction\/SAMPLE.csv\")","757dbbf3":"display(train.head())\ndisplay(test.head())\ndisplay(sub.head())","d5df57d7":"display(train.shape)\ndisplay(test.shape)","d939b4f8":"train_original = train.copy()\ntest_original = test.copy()","7dfb01db":"TARGET_COL1 = \"#Order\"\nTARGET_COL2 = 'Sales'\nID = \"ID\"\nDATE = 'Date'\ncat_cols = ['Store_Type', 'Location_Type', 'Region_Code', 'Discount']\nnum_cols = ['Store_id', 'Holiday']","d0e97c0e":"train.describe()","4169eb94":"train.nunique()","51bfaba5":"train.isnull().sum()","1a09a864":"sns.kdeplot(TARGET_COL1, data=train);","e09ce56c":"sns.kdeplot(TARGET_COL2, data=train);","e9d6ab0d":"sns.boxplot((train[TARGET_COL2]))","6ed92aec":"train = train[train[TARGET_COL2]<=200000]\ntrain","820cf835":"fig, axes = plt.subplots(2,2, figsize=(14,10))\naxes = [ax for ax_row in axes for ax in ax_row]\n\nfor i,c in enumerate(train[cat_cols]):\n  train[c].value_counts()[:10].plot(kind='pie', ax=axes[i], title=c, autopct='%.0f', fontsize=12)\n  axes[i].set_ylabel('')\n\nplt.tight_layout()\nplt.show()","aa6b3958":"fig, axes = plt.subplots(2,1,figsize=(16, 7))\n\nfor i,c in enumerate(train[num_cols]):\n  sns.boxplot(x=c, data=train, ax=axes[i])\n\nplt.tight_layout()","5206e58a":"sns.boxplot(np.log1p(train['#Order']))","6d27c8d4":"sns.set(font_scale=1.3)\nfig, axes = plt.subplots(2,1,figsize=(17, 8))\n\nfor i,c in enumerate(train[num_cols]):\n  sns.kdeplot(x=c, data=train, ax=axes[i], fill=True)\n\nplt.tight_layout()","5005605f":"plt.figure(figsize=(9,7))\nsns.heatmap(train.corr(method='pearson'), annot=True, fmt='.2f');","bad9761d":"train['Date'] = pd.to_datetime(train['Date'])","6b0678be":"_ = train.set_index('Date')[TARGET_COL1].plot(figsize=(23, 6))","040d4194":"_ = train.set_index('Date')[TARGET_COL2].plot(figsize=(23, 6))","e3189209":"plt.figure(figsize=(16,9))\nfig = px.line(train[train['Store_id'] == 1], x='Date', y='Sales', title='Sales with slider')\nfig.update_xaxes(rangeslider_visible=True)\nfig.show() ","bec64d7d":"plt.figure(figsize=(16,9))\nfig = px.line(train[train['Store_id'] == 2], x='Date', y='Sales', title='Sales with slider')\nfig.update_xaxes(rangeslider_visible=True)\nfig.show() ","2e7b3b99":"!pip install autoviz\n!pip install xlrd","b94f28d5":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\n\ndf = AV.AutoViz(\"\/kaggle\/input\/supplement-sales-prediction\/TRAIN.csv\")","a0da8d89":"### [1) Version 04: LightAutoML](#1)\n\n### [2) Version 07: H2o AutoML \/ LGBM](#2)\n\n### [3) Version 08: EDA \/ AutoViz(AutoEDA)](#3)","478689ff":"### **Univariate Analysis**","cdf3e91e":"### **AutoViz (AutoEDA)**","fcd0b66d":"### **Bivariate Analysis**","ebad58d8":"### **Timeseries Plots**","f8cefb9c":"### **Target Column**"}}