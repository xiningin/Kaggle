{"cell_type":{"19a1cdda":"code","e0a5d139":"code","f93a3242":"code","afe6b7ac":"code","8730e82e":"code","56ea8f3f":"code","086ab17c":"code","1476b7b9":"code","055430c3":"code","e87b6f72":"code","23015f5a":"code","072336c5":"code","d7f88dad":"code","d6974776":"code","c75fe1a5":"code","26be6ac8":"code","4087590a":"code","a79b478d":"markdown","e7a21a62":"markdown","7f0538a0":"markdown","0007e9ce":"markdown","e533b2a0":"markdown","7c0f66cb":"markdown","159c0be6":"markdown","b9d6d738":"markdown","cd539d57":"markdown","5fef4ade":"markdown","b68a440c":"markdown"},"source":{"19a1cdda":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e0a5d139":"import pandas as pd\ndf = pd.read_csv('\/kaggle\/input\/amazon-fine-food-reviews\/Reviews.csv')\ndf.head()","f93a3242":"import matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n%matplotlib inline\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.express as px\n\nfig = px.histogram(df, x=\"Score\")\nfig.update_traces(marker_color=\"green\",marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5)\nfig.update_layout(title_text='Product Score')\nfig.show()","afe6b7ac":"import nltk\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud\n# Create stopword list:\nnltk.download('stopwords')\nstopwords1 = set(stopwords.words('english'))\nstopwords1.update([\"br\", \"href\"])\ntextt = \" \".join(review for review in df.Text)\nwordcloud = WordCloud(stopwords=stopwords1,background_color=\"white\").generate(textt)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","8730e82e":"# assign reviews with score > 3 as positive sentiment\n# score < 3 negative sentiment\n# remove score = 3, because they are neutral\ndf = df[df['Score'] != 3]\ndf['sentiment'] = df['Score'].apply(lambda rating : +1 if rating > 3 else -1)\ndf.head()","56ea8f3f":"df['sentimentt'] = df['sentiment'].replace({-1 : 'negative'})\ndf['sentimentt'] = df['sentimentt'].replace({1 : 'positive'})\nfig = px.histogram(df, x=\"sentimentt\")\nfig.update_traces(marker_color=\"indianred\",marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5)\nfig.update_layout(title_text='Product Sentiment')\nfig.show()","086ab17c":"def remove_punctuation(text):\n    final = \"\".join(i for i in text if i not in (\"?\", \".\", \";\", \":\",  \"!\",'\"'))\n    return final\n\ndf['Text']=df['Text'].apply(remove_punctuation)\ndf=df.dropna(subset=['Summary'])\ndf['Summary']=df['Summary'].apply(remove_punctuation)\n","1476b7b9":"dfNew = df[['Summary','sentiment']]\ndfNew.head()","055430c3":"# random split train and test data\nindex = df.index\ndf['random_number'] = np.random.randn(len(index))\ntrain = df[df['random_number'] <= 0.8]\ntest = df[df['random_number'] > 0.8]","e87b6f72":"train=train.dropna()\ntest=test.dropna()","23015f5a":"from sklearn.feature_extraction.text import CountVectorizer\n\nvectorizer = CountVectorizer(token_pattern=r'\\b\\w+\\b')\n\ntrain_matrix = vectorizer.fit_transform(train['Summary'])\ntest_matrix = vectorizer.transform(test['Summary'])","072336c5":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression(solver='liblinear')","d7f88dad":"X_train = train_matrix\nX_test = test_matrix\ny_train = train['sentiment']\ny_test = test['sentiment']","d6974776":"lr.fit(X_train,y_train)","c75fe1a5":"predictions=lr.predict(X_test)","26be6ac8":"from sklearn.metrics import confusion_matrix,classification_report\nnew = np.asarray(y_test)\nconfusion_matrix(predictions,y_test)","4087590a":"print(classification_report(predictions,y_test))","a79b478d":"# **Read the DataFrame**","e7a21a62":"# **Test the accuracy**","7f0538a0":"# **More data analysis**","0007e9ce":"# Create a bag of words\n*We will need to convert the text into a bag-of-words model since the logistic regression algorithm cannot understand text.*","e533b2a0":"*Some popular words that can be observed here include \u201cproduct,\u201d \u201ctaste,\u201d, \u201clove,\u201d and \u201clike.\u201d These words are mostly positive, also indicating that most reviews in the dataset express a positive sentiment.*\n# **Classifying Reviews**","7c0f66cb":"# **Data analysis**\n*Let's look at the 'Score' variable to find out how many reviews are positive or negative*","159c0be6":" # **Building the Model**\n*This model will take reviews in as input. It will then come up with a prediction on whether the review is positive or negative.\nThis is a classification task, so we will train a simple logistic regression model to do it.*\n#  Data cleaning\n*We will be using the summary data to come up with predictions. First, we need to remove all punctuation from the data*","b9d6d738":"*As we can see, mostly customer ratings score are positive, it means that most reviews will be postitive too. We can create some wordclouds to see the most frequently used words in the reviews.*\n","cd539d57":"**We will be using the 'Reviews.csv' file from Kaggle\u2019s Amazon Fine Food Reviews dataset to perform the sentiment analysis with Python and ML.**\n![](https:\/\/www.kdnuggets.com\/images\/sentiment-fig-1-689.jpg)","5fef4ade":"# Split the DataFrame","b68a440c":"#  Logistic Regression \n*(import, split the data into target and independ variables, fit)*"}}