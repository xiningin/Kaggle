{"cell_type":{"c737be1e":"code","c2cc8c99":"code","49c2060b":"code","406dceea":"code","8eefa740":"code","d92425c4":"code","55b5cef4":"code","b9356689":"code","6ab33d46":"code","fb1ae7d9":"code","d62d3e5c":"code","f6b0e233":"code","4cfac09f":"code","ceb588b2":"code","fcd4d863":"code","e4070ea5":"code","69b9714b":"code","71a11c5d":"code","37919f60":"code","8c0eb86f":"code","1c69e3ec":"code","77819405":"code","b889f419":"code","a72d82ae":"code","32efda3d":"code","276462de":"code","4401acd6":"code","2e0dbde5":"code","6b0b0351":"code","58d36196":"code","c1b1b3f3":"code","e8110c1d":"code","f96da5a4":"markdown"},"source":{"c737be1e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2cc8c99":"from yellowbrick.classifier import ROCAUC\n","49c2060b":"train = pd.read_csv('\/kaggle\/input\/desafio-falconi-ii\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/desafio-falconi-ii\/test.csv')","406dceea":"train.head()","8eefa740":"train.shape","d92425c4":"train.info()","55b5cef4":"train.loc[train.total_charges == ' ', 'total_charges'] = 0\ntest.loc[test.total_charges == ' ', 'total_charges'] = 0","b9356689":"train.total_charges = train.total_charges.astype('float')\ntest.total_charges = test.total_charges.astype('float')","6ab33d46":"train = train[['cltv', 'contract', 'paperless_billing', 'payment_method',\n       'monthly_charges', 'total_charges', 'tenure_months', 'tech_support',\n       'tv_streaming', 'phone_service', 'multiple_lines', 'online_security',\n       'online_backup', 'device_protection', 'movies_streaming',\n       'internet_service', 'gender', 'dependents', 'senior_citizen', 'partner','churn']]","fb1ae7d9":"numeric = ['cltv','monthly_charges', 'total_charges', 'tenure_months']\n\ncategorical = ['contract', 'paperless_billing', 'payment_method','tech_support',\n       'tv_streaming', 'phone_service', 'multiple_lines', 'online_security',\n       'online_backup', 'device_protection', 'movies_streaming',\n       'internet_service', 'gender', 'dependents', 'senior_citizen', 'partner']","d62d3e5c":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import MinMaxScaler, OneHotEncoder\n","f6b0e233":"scaler = MinMaxScaler()\n\ntrain[numeric] = scaler.fit_transform(train[numeric])","4cfac09f":"encoder = OneHotEncoder(sparse=False)\n\n\nnew_columns = encoder.fit_transform(train[categorical])\n\nnew_columns = pd.DataFrame(new_columns, columns=encoder.get_feature_names())","ceb588b2":"train = train.drop(columns=categorical).join(new_columns)\n\ntrain.head()","fcd4d863":"model = KNeighborsClassifier(n_neighbors=5)","e4070ea5":"X = train.drop(columns='churn')\ny = train.churn","69b9714b":"model.fit(X,y)","71a11c5d":"from sklearn.metrics import roc_curve","37919f60":"visualizer = ROCAUC(model, classes=[0, 1], title=\"ROC Curves for Random Forest\")\nvisualizer.fit(X, y)\nvisualizer.score(X, y)\nvisualizer.show();","8c0eb86f":"test =test[['client_id','cltv', 'contract', 'paperless_billing', 'payment_method',\n       'monthly_charges', 'total_charges', 'tenure_months', 'tech_support',\n       'tv_streaming', 'phone_service', 'multiple_lines', 'online_security',\n       'online_backup', 'device_protection', 'movies_streaming',\n       'internet_service', 'gender', 'dependents', 'senior_citizen', 'partner']]","1c69e3ec":"test[numeric] = scaler.transform(test[numeric])","77819405":"new_columns_test = encoder.transform(test[categorical])\n\nnew_columns_test = pd.DataFrame(new_columns_test, columns=encoder.get_feature_names())","b889f419":"test = test.drop(columns=categorical).join(new_columns_test)\n","a72d82ae":"test.head()","32efda3d":"test.set_index('client_id', inplace=True)\n","276462de":"test","4401acd6":"predict = model.predict_proba(test)\n\npredict\n","2e0dbde5":"sample = pd.read_csv('\/kaggle\/input\/desafio-falconi-ii\/sample_submission.csv')\nsample.head()","6b0b0351":"prob_0, prob_1 = zip(*predict)","58d36196":"test['predict_probability'] = prob_1","c1b1b3f3":"test.reset_index()[['client_id','predict_probability']]","e8110c1d":"test[['predict_probability']].to_csv('knn_simples.csv')","f96da5a4":"## Tratamento de dados"}}