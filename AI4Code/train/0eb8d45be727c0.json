{"cell_type":{"cf0688c1":"code","796afeb2":"code","43a32ba1":"code","f666b23d":"code","204a747e":"code","24bfb2c4":"code","0688f74e":"code","48c93ebc":"code","e1045c40":"code","fb74e88f":"code","45bd2c71":"code","ac5ab510":"code","20f2bfae":"code","8155ff96":"code","cc17d9dc":"code","713ff104":"code","7ad2c8cf":"code","2cad92a0":"code","a7ff22ff":"code","f2be63d8":"code","04d5cb76":"code","95692aa8":"markdown","e289bb9a":"markdown","3a7f2af0":"markdown","b1511664":"markdown","49a90480":"markdown"},"source":{"cf0688c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","796afeb2":"!pip install Prophet\nfrom prophet import Prophet","43a32ba1":"import requests\ncontent = requests.get('https:\/\/d35p9e4fm9h3wo.cloudfront.net\/latestData.json')","f666b23d":"data = json.loads(content.text)","204a747e":"rows= []\nfor k in data['historicalData'].keys():\n    row = data['historicalData'][k]['incidence']\n    try:\n        row['date'] = k\n        rows.append(row)\n    except:\n        pass","24bfb2c4":"data = pd.DataFrame(rows)","0688f74e":"df = pd.read_csv('https:\/\/covid.ourworldindata.org\/data\/owid-covid-data.csv')","48c93ebc":"df = df[df.location == 'Romania']","e1045c40":"df.tail(5)","fb74e88f":"df.date = pd.to_datetime(df.date)","45bd2c71":"fig = px.line(df, 'date', 'new_cases_smoothed')\nfig.add_bar(x=df.date, y=df.new_cases, name='new cases')\nfig.show()","ac5ab510":"fig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=df.date,\n        y=df.new_cases,\n        mode='markers',\n        name='New Cases'\n    ))\n\nfig.add_trace(\n    go.Scatter(\n        x=df.date,\n        y=df.new_cases_smoothed,\n        name='New Cases Smoothed'\n    ))\n\nfig.show()","20f2bfae":"mask1 = ((df.date >= pd.to_datetime('1 September 2020')) & (df.date <= pd.to_datetime('30 November 2020')))\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=df[mask1].date,\n        y=df[mask1].new_cases,\n        mode='markers',\n        name='New Cases'\n    ))\n\nfig.add_trace(\n    go.Scatter(\n        x=df[mask1].date,\n        y=df[mask1].new_cases_smoothed,\n        name='New Cases Smoothed'\n    ))\nfig.show()","8155ff96":"mask2 = ((df.date >= pd.to_datetime('1 September 2021')) & (df.date <= pd.to_datetime('30 November 2021')))\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=df[mask2].date,\n        y=df[mask2].new_cases,\n        mode='markers',\n        name='New Cases'\n    ))\n\nfig.add_trace(\n    go.Scatter(\n        x=df[mask2].date,\n        y=df[mask2].new_cases_smoothed,\n        name='New Cases Smoothed'\n    ))\nfig.show()","cc17d9dc":"px.line(data, 'date', 'B', labels={'B': 'incidence rate in Bucharest'})","713ff104":"data.date = pd.to_datetime(data.date)","7ad2c8cf":"train = data[data.date >= pd.to_datetime('1 August 2021')].sort_values('date')[['date','B']]","2cad92a0":"train = train.rename(columns={'B': 'y', 'date': 'ds'})","a7ff22ff":"m = Prophet()\nm.fit(train)\nfuture = m.make_future_dataframe(periods=90)\nfuture.tail()\nforecast = m.predict(future)","f2be63d8":"\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=forecast.ds,\n        y=forecast.yhat,\n        error_y=dict(\n            type='data', # value of error bar given in data coordinates\n            symmetric=False,\n            array=forecast.yhat_upper - forecast.yhat,\n            arrayminus=forecast.yhat - forecast.yhat_lower,\n            visible=True),\n        name='Forecast'\n    ))\n\nfig.add_trace(\n    go.Scatter(\n        x=train['ds'].values,\n        y=train['y'].values,\n        name='Data'\n    ))\nfig.show()","04d5cb76":"plt.figure(figsize=(20,10))\nplt.plot(forecast.ds, forecast.yhat, label='Pred')\nplt.plot(train['ds'].values, train['y'].values, label='Data', linewidth=3)\nplt.fill_between(forecast.ds, forecast.yhat_upper, forecast.yhat_lower, alpha=0.5)\nplt.axhline(3, color='red')\nplt.axhline(6, color='red')\nplt.legend()","95692aa8":"translating the response to a pandas dataframe","e289bb9a":"# Getting Data","3a7f2af0":"getting json data by making a request to a CDN assosicated with https:\/\/datelazi.ro, a platform developed by Code for Romania","b1511664":"- Pmdarima - used for auto-arima model\n- Prophet ( FB library ) - is a statistical forecasting library","49a90480":"getting general Romanian COVID cases data from ourworldindata"}}