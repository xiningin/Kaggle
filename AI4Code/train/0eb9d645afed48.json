{"cell_type":{"a526396f":"code","004a7b7c":"code","b3da16c4":"code","d7bfaad0":"code","fd6ee3e2":"code","e5c901c6":"code","662049ec":"code","267697e0":"code","d36361b7":"code","369a74bc":"code","f450c06e":"code","564ac7f9":"code","dfbd3adc":"code","74e2c518":"code","69a453fa":"code","021cd432":"code","2f90f022":"code","ac83d8d6":"code","33173121":"code","d5c5439e":"code","bdb57377":"code","113a5181":"code","68ff2f29":"code","f9e3fe18":"code","3fcc0b48":"markdown","eacee061":"markdown","be3c740d":"markdown","62cd358e":"markdown","e40ca404":"markdown","d650b7e7":"markdown"},"source":{"a526396f":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","004a7b7c":"data0 = pd.read_csv(\"..\/input\/real-estate-dataset\/data.csv\")\ndata0[0:2].T","b3da16c4":"print(data0.columns.to_list())","d7bfaad0":"data0.iloc[:,:].hist(figsize=(15,15))\nplt.show()","fd6ee3e2":"datap=data0[['CRIM', 'NOX','RM','AGE','MEDV']]\nsns.pairplot(datap.iloc[:,:5])\nplt.show()","e5c901c6":"target=['CRIM']\ndatay=data0[target]\ndatax=data0.drop(target,axis=1)","662049ec":"print(datay[0:2].T)\nprint()\nprint(datax[0:2].T)","267697e0":"train=np.array(datax)\ntrainy=np.array(datay)\nprint(train.shape)\nprint(trainy.shape)","d36361b7":"df_columns = list(datax.columns)\nprint(df_columns)","369a74bc":"train_df=pd.DataFrame(train)\n#test_df=pd.DataFrame(test)","f450c06e":"train_df.columns=df_columns\n#test_df.columns=df_columns","564ac7f9":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","dfbd3adc":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","74e2c518":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","69a453fa":"train_feat_df = to_feature(train_df)\n#test_feat_df = to_feature(test_df)","021cd432":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","2f90f022":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","ac83d8d6":"y = trainy\nprint(y.shape)","33173121":"ydf=pd.DataFrame(y)\nydf","d5c5439e":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('oof '+str(i),fontsize=12)\n    ax.set_ylabel('train_y '+str(i),fontsize=12)\n    ax.scatter(oof,y)\n","bdb57377":"print(target)","113a5181":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","68ff2f29":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)","f9e3fe18":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(target[i],fontsize=20)\nax.set_xlabel('MEDV',fontsize=12)\nax.set_ylabel('CRIM',fontsize=12)\nax.scatter(data0['MEDV'],data0['CRIM'])","3fcc0b48":"# Data Visualization","eacee061":"# Target setting","be3c740d":"### For 'CRIM'(per capita crime rate by town), 'MEDV'(Median value of owner-occupied homes in $1000's) is the most important factor. ","62cd358e":"# Data preparation","e40ca404":"# Model","d650b7e7":"# Visualize Importance"}}