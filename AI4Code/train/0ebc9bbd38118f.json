{"cell_type":{"504fa251":"code","be04f91f":"code","5d796745":"code","47cf5e18":"code","d8e96e58":"code","fca0e3c3":"code","2dc43660":"code","2993bfcb":"code","cd242081":"code","ff1407d2":"code","ed8cbe58":"code","9438c12e":"code","8e2de912":"code","5d336ebb":"code","20a6aa82":"code","4e8413ac":"code","9a3169ac":"code","97abd6b9":"code","83f8f134":"code","e209dbaf":"code","87b6b762":"code","7716c3cb":"code","7dad3c5e":"code","2edac564":"code","54a7c2d8":"code","0e08dc28":"code","b36e3b12":"code","f7f1545c":"code","2f2bfd25":"code","0737ce92":"code","772dab98":"code","01bde2f5":"code","f1d17a2b":"code","f7b3ece8":"code","6280d1bc":"code","d426155a":"code","637d4353":"code","c328980f":"code","986caa69":"code","827d2e4a":"code","c7ae26e0":"code","91749b64":"code","c9413da1":"code","517ec2b0":"code","1516a0a3":"code","33e8e29f":"code","83f5d903":"code","341bb709":"code","0fc1f4b2":"code","1eab67bc":"code","7b17c983":"code","6a8779b4":"code","4404869f":"code","169730a8":"code","01c78d66":"code","bd2c645f":"markdown","26e34a03":"markdown","39b7efea":"markdown","7eb0a326":"markdown","28ea4349":"markdown","9d1aefc3":"markdown","3acebe43":"markdown","a0a7f314":"markdown","44566a7b":"markdown","9515f4b9":"markdown","c71bd1de":"markdown","08c29a0f":"markdown","c0eac3e7":"markdown","c3204ba7":"markdown","da1399eb":"markdown","a56b33ba":"markdown","291f9ad0":"markdown"},"source":{"504fa251":"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\nimport random\nimport pandas as pd\nimport scipy.stats as stat\nfrom collections import Counter\nfrom scipy.stats import t\nfrom scipy.stats import norm\nfrom sklearn.utils import shuffle\n\nimport os\n\npath = os.environ['PATH']\n\nif path.startswith('C'):\n    IN_KAGGLE = False\nelse:\n    IN_KAGGLE = True","be04f91f":"# Calcula n\u00famero de desvios na distribui\u00e7\u00e3o t de student para determinada confianca\n\n\ndef calcula_Z_tstudent(confianca, tamanho_amostra):\n    mean = 0\n    std = 1\n    rv = t(df=(tamanho_amostra-1))\n    return rv.interval(confianca)[1]","5d796745":"# Calcula n\u00famero de desvios na distribui\u00e7\u00e3o normal para determinada confianca\n\n\ndef calcula_Z_normal(confianca):\n    mean = 0\n    std = 1\n    rv = norm(loc=mean, scale=std)\n    return rv.interval(confianca)[1]","47cf5e18":"# Calcula n\u00famero de desvios na distribui\u00e7\u00e3o normal para determinada confianca e m\u00faltiplas propor\u00e7\u00f5es\n\ndef calcula_Z_Multiplas_Proporcoes(confianca, numero_proporcoes):\n    area = math.pow(  confianca, 1\/(numero_proporcoes-1) )\n    return calcula_Z_normal(area)\n\n","d8e96e58":"def calcula_P_Value_Proporcao(proporcao_amostra, tamanho_amostra, proporcao_populacao):\n    p_value = 0  \n    z = (proporcao_amostra - proporcao_populacao)\/np.sqrt((proporcao_populacao*(1-proporcao_populacao))\/tamanho_amostra)\n    if (tamanho_amostra>=30):\n        if z<0:\n            p_value = norm.cdf(z)\n        else:\n            p_value = norm.sf(z)\n    else:\n        if z<0:\n            p_value = t.cdf(z, df=(tamanho_amostra-1))\n        else:\n            p_value = t.sf(z, df=(tamanho_amostra-1))\n    \n    return z, p_value \n        \n       ","fca0e3c3":"def calcula_P_Value_Media(media_amostra, tamanho_amostra, desvio_amostra, media_populacao, desvio_populacao):\n        \n    if (desvio_populacao!=0) & (tamanho_amostra>=30):\n        return calcula_P_Value_Normal(media_amostra, tamanho_amostra, media_populacao, desvio_populacao)\n    else:\n        if (desvio_populacao==0):\n            desvio_populacao = desvio_amostra\n        if (desvio_amostra==0):\n            desvio_amostra = desvio_populacao\n        return calcula_P_Value_Media_T_Student(media_amostra, tamanho_amostra, media_populacao, desvio_amostra)","2dc43660":"def calcula_P_Value_Media_Normal(media_amostra, tamanho_amostra, media_populacao, desvio_populacao):\n    SE = (desvio_populacao\/np.sqrt(tamanho_amostra))\n    z = (media_amostra - media_populacao)\/SE\n    if z<0:\n        p_value = norm.cdf(z)\n    else:\n        p_value = norm.sf(z)\n    return z, p_value","2993bfcb":"def calcula_P_Value_Media_T_Student(media_amostra, tamanho_amostra, media_populacao, desvio_populacao):\n    SE = (desvio_populacao\/np.sqrt(tamanho_amostra))\n    z = (media_amostra - media_populacao)\/SE\n    if z<0:\n        p_value = t.cdf(z, df=(tamanho_amostra-1))\n    else:\n        p_value = t.sf(z, df=(tamanho_amostra-1))\n    return z, p_value","cd242081":"def teste_hipotese_media_desvio_populacao(significancia, tipo, media_amostra, tamanho_amostra, media_populacao, desvio_populacao ):\n    z, p_value = calcula_P_Value_Media(media_amostra, tamanho_amostra, 0, media_populacao, desvio_populacao)\n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","ff1407d2":"def teste_hipotese_media_desvio_amostra(significancia, tipo, media_amostra, desvio_amostra, tamanho_amostra, media_populacao ):\n    z, p_value = calcula_P_Value_Media(media_amostra, tamanho_amostra, desvio_amostra, media_populacao, 0)\n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","ed8cbe58":"def teste_hipotese_proporcao(significancia, tipo, proporcao_amostra, tamanho_amostra, proporcao_populacao ):\n    z, p_value = calcula_P_Value_Proporcao(proporcao_amostra, tamanho_amostra, proporcao_populacao)\n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","9438c12e":"def teste_hipotese_media_duas_amostras_desvio_populacao(significancia, tipo, \n                                                        media_amostra_1, tamanho_amostra_1, desvio_populacao_1,\n                                                        media_amostra_2, tamanho_amostra_2, desvio_populacao_2,\n                                                     diferenca = 0 ):\n    SE = np.sqrt((np.power(desvio_populacao_1,2)\/tamanho_amostra_1)+(np.power(desvio_populacao_2,2)\/tamanho_amostra_2))\n    z = (media_amostra_1 - media_amostra_2 - diferenca)\/SE\n    if z<0:\n        p_value = norm.cdf(z)\n    else:\n        p_value = norm.sf(z)\n    \n    \n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","8e2de912":"def teste_hipotese_media_duas_amostras_desvio_amostra(significancia, tipo,\n                                                        media_amostra_1, tamanho_amostra_1, desvio_amostra_1,\n                                                        media_amostra_2, tamanho_amostra_2, desvio_amostra_2,\n                                                     diferenca = 0):\n    S2 = ( (tamanho_amostra_1-1)*np.power(desvio_amostra_1,2) + (tamanho_amostra_2-1)*np.power(desvio_amostra_2,2) )\/ (tamanho_amostra_1+tamanho_amostra_2-2)\n    SE = np.sqrt( S2 * (1\/tamanho_amostra_1 + 1\/tamanho_amostra_2) )\n    z = (media_amostra_1 - media_amostra_2 - diferenca)\/SE\n    if z<0:\n        p_value = t.cdf(z, df=(tamanho_amostra_1+tamanho_amostra_2-2))\n    else:\n        p_value = t.sf(z, df=(tamanho_amostra_1+tamanho_amostra_2-2))\n    \n    \n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","5d336ebb":"def teste_hipotese_media_duas_amostras_pareadas(significancia, tipo,\n                                                        amostra1,\n                                                amostra2,\n                                                     diferenca = 0):\n    if len(amostra1)!=len(amostra2):\n        return 'ERRO - Tamanhos diferentes de amostra'\n    media_amostra1 = amostra1.mean()\n    media_amostra2 = amostra2.mean()\n    Diferen\u00e7as = Media1 - Media2\n    \n    SD = Diferen\u00e7as.std()\n    SE = SD \/ np.sqrt(tamanho_amostras)\n    z = (media_amostra1 - media_amostra2 - diferenca)\/SE\n    if z<0:\n        p_value = t.cdf(z, df=tamanho_amostras-1)\n    else:\n        p_value = t.sf(z, df=tamanho_amostras-1)\n    \n    \n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","20a6aa82":"def teste_hipotese_media_duas_amostras_pareadas(significancia, tipo,\n                                                        media_amostra1,\n                                                media_amostra2,\n                                                desvio_diferencas,\n                                                tamanho_amostras,\n                                                     diferenca = 0):\n    \n    \n    SD = desvio_diferencas\n    SE = SD \/ np.sqrt(tamanho_amostras)\n    z = (media_amostra1 - media_amostra2 - diferenca)\/SE\n    if z<0:\n        p_value = t.cdf(z, df=tamanho_amostras-1)\n    else:\n        p_value = t.sf(z, df=tamanho_amostras-1)\n    \n    \n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","4e8413ac":"def teste_hipotese_proporcao_duas_amostras(significancia, tipo, \n                                                        proporcao_amostra_1, tamanho_amostra_1,\n                                                        proporcao_amostra_2, tamanho_amostra_2 ):\n    P = (proporcao_amostra_1*tamanho_amostra_1 + proporcao_amostra_2*tamanho_amostra_2) \/ (tamanho_amostra_1+tamanho_amostra_2)\n    SE = np.sqrt( P * (1-P) * (1\/tamanho_amostra_1 + 1\/tamanho_amostra_2) )\n    z = (proporcao_amostra_1 - proporcao_amostra_2)\/SE\n    if z<0:\n        p_value = norm.cdf(z)\n    else:\n        p_value = norm.sf(z)\n    \n    \n    if tipo == 'bilateral':\n        significancia = significancia\/2\n    if p_value < significancia:\n        return 'H0 rejeitada tendo em vista que p-value={} correspondente a z={} menor que signific\u00e2ncia {}'.format(p_value,z,significancia)\n    else:\n        return 'H0 n\u00e3o rejeitada tendo em vista que p-value={} correspondente a z={} maior que signific\u00e2ncia {}'.format(p_value,z,significancia)","9a3169ac":"# Recupera amostra da popula\u00e7\u00e3o\n\ndef recupera_amostra(populacao, tamanho_amostra):\n    tamanho_amostra = int(tamanho_amostra)\n    if type(populacao) is pd.DataFrame:\n        return populacao.sample(tamanho_amostra)\n    else:\n        #return populacao[np.random.randint(0, len(populacao), tamanho_amostra)]\n        return [populacao[i] for i in np.random.randint(0, len(populacao), tamanho_amostra)]","97abd6b9":"# Fun\u00e7\u00e3o que calcula intervalo de confian\u00e7a para m\u00e9dia com base em uma amostra e a confian\u00e7a desejada\n\ndef calcula_intervalo_media(amostra, confianca, tamanho_populacao=0):\n    tamanho_amostra = len(amostra)\n    \n    #1-Calcule a m\u00e9dia da amostra ex. media_amostra = np.mean(amostra)\n    media_amostra = np.mean(amostra)\n\n    #2-Calcule o desvio da amostra ex. desvio_amostra = np.std(amostra)\n    desvio_amostra = np.std(amostra)\n\n    #3-Calcule quantos desvios precisar\u00e1 para seu grau de confi\u00e2n\u00e7a ex. numero_desvios = calcula_numero_desvios_tstudent_para_confianca(confian\u00e7a, tamanho_amostra)\n    numero_desvios = calcula_Z_tstudent(confianca, tamanho_amostra)\n\n    #4-Calcule o desvio das amostras ex. desvio_amostras = desvio_amostra\/np.sqrt(tamanho_amostra)\n    desvio_amostras = desvio_amostra\/np.sqrt(tamanho_amostra)\n\n    #5-Calcule a margem de erro ex. margem_erro = numero_desvios*desvio_amostras\n    margem_erro = numero_desvios*desvio_amostras\n    \n    if (tamanho_populacao!=0) & (tamanho_amostra>0.05*tamanho_populacao):\n        margem_erro = margem_erro * (np.sqrt(tamanho_populacao-tamanho_amostra)\/np.sqrt(tamanho_populacao-1))\n\n    #6-Calcule o intervalo ex. inferior = media_amostra-margem_erro, superior = media_amostra+margem_erro\n    inferior = media_amostra-margem_erro\n    superior = media_amostra+margem_erro\n\n    return inferior,superior","83f8f134":"# Fun\u00e7\u00e3o que calcula intervalo de confian\u00e7a para propor\u00e7\u00e3o de determinado valor com base em uma amostra e a confian\u00e7a desejada\n# O par\u00e2metro valor representa a categoria na amostra para a qual se deseja o intervalo de confian\u00e7a da propor\u00e7\u00e3o, por exemplo o nome de um candidato\n\ndef calcula_intervalo_proporcao(amostra, confianca, valor, tamanho_populacao=0):\n    tamanho_amostra = len(amostra)\n    \n    proporcao_valor = Counter(amostra)[valor]\/tamanho_amostra\n    \n    numero_desvios = calcula_Z_tstudent(confianca, tamanho_amostra)\n\n    margem_erro = numero_desvios*np.sqrt(proporcao_valor*(1-proporcao_valor))\/np.sqrt(tamanho_amostra)\n    \n    if (tamanho_populacao!=0) & (tamanho_amostra>0.05*tamanho_populacao):\n        margem_erro = margem_erro * (np.sqrt(tamanho_populacao-tamanho_amostra)\/np.sqrt(tamanho_populacao-1))\n\n    inferior = proporcao_valor-margem_erro\n    superior = proporcao_valor+margem_erro\n\n    return inferior,superior","e209dbaf":"# Fun\u00e7\u00e3o para c\u00e1lculo do n\u00famero de amostras para m\u00e9dias e somas\n\ndef Tamanho_Amostra_Valor_Pontual(Tamanho_Populacao, Grau_Confianca, Variancia, Margem_Erro):\n    Numero_Desvios = calcula_Z_normal(Grau_Confianca)\n    return math.ceil( \n            (Tamanho_Populacao * math.pow(Numero_Desvios,2) * Variancia) \/ \\\n            ( (Tamanho_Populacao-1)*math.pow(Margem_Erro,2) + math.pow(Numero_Desvios,2)*Variancia )\n            )","87b6b762":"# Fun\u00e7\u00e3o para c\u00e1lculo do n\u00famero de amostras para propor\u00e7\u00f5es simples\n\ndef Tamanho_Amostra_Proporcao_Simples(Tamanho_Populacao, Grau_Confianca, Proporcao, Margem_Erro):\n    Numero_Desvios = calcula_Z_normal(Grau_Confianca)\n    return math.ceil( \n            (Tamanho_Populacao * math.pow(Numero_Desvios,2) * Proporcao * (1-Proporcao)) \/ \\\n            ( (Tamanho_Populacao-1)*math.pow(Margem_Erro,2) + math.pow(Numero_Desvios,2)*Proporcao*(1-Proporcao) )\n            )","7716c3cb":"# Fun\u00e7\u00e3o para c\u00e1lculo do tamanho da amostra para propor\u00e7\u00f5es m\u00faltiplas\n\ndef Tamanho_Amostra_Proporcao_Multipla(Tamanho_Populacao, Confianca, Numero_Proporcoes, Margem_Erro):\n    Confianca_ = calcula_Z_Multiplas_Proporcoes(Confianca, Numero_Proporcoes)\n    return math.ceil( \n            (Tamanho_Populacao * math.pow(Confianca_,2) * 0.25 ) \/ \\\n            ( (Tamanho_Populacao-1)*math.pow(Margem_Erro,2) + math.pow(Confianca_,2)*0.25 )\n            )","7dad3c5e":"def graficoBarra(planilha, coluna):\n    planilha[coluna].value_counts().plot(kind='bar')\n    plt.xlabel(coluna)\n    plt.ylabel('Quantidade')\n\n    plt.title(coluna)\n    plt.grid(True)\n    plt.show()\n    \n    print(planilha[coluna].value_counts()\/len(planilha))","2edac564":"def graficoLinha(planilha, coluna):\n    planilha[coluna].plot()\n    plt.xlabel(coluna)\n    plt.ylabel('Quantidade')\n\n    plt.title(coluna)\n    plt.grid(True)\n    plt.show()","54a7c2d8":"def histograma(planilha, coluna):\n    n, bins, patches = plt.hist(planilha[coluna],  facecolor='g', alpha=0.75, bins=50)\n    plt.xlabel(coluna)\n    plt.ylabel('Quantidade')\n\n    plt.title(coluna)\n    plt.grid(True)\n    plt.show()\n    \n    print('M\u00e9dia {}, desvio padr\u00e3o {}'.format(planilha[coluna].mean(),planilha[coluna].std()))\n","0e08dc28":"#TamanhoPopulacao = 146656000\nTamanhoPopulacao = 1000000\nRegioes = ['Sul','Sudeste', 'Norte', 'Nordeste',  'CentroOeste']\nCandidatos = ['B', 'H', 'C', 'I']\nPercentualVotosSexoMasculinoPorCandidato = [0.65, 0.3, 0.5, 0.4]\nPercentualEleitoresRegiao = [0.143, 0.418, 0.080, 0.287, 0.072]\nMediaSalarioRegiao = [2286, 2541, 2025, 1920, 2155]\neleitoresRegiao = np.multiply(PercentualEleitoresRegiao,TamanhoPopulacao).astype(int).tolist()\neleitoresRegiao","b36e3b12":"populacao = pd.DataFrame( columns=['Regiao', 'Voto', 'Sexo', 'Salario', 'Idade'])","f7f1545c":"# Define vota\u00e7\u00e3o\nPercentualVotosRegiaoCandidato = [0.57,0.2,0.09,                             \n                                  0.53,0.19,0.12,\n                                  0.43,0.37,0.09,\n                                  0.26,0.51,0.17,\n                                 0.58,0.21,0.18]\ni = 0\nj = 0\nTempVotos = []\nfor x in Regioes:\n    print(x)\n    \n    B = int(eleitoresRegiao[i] * PercentualVotosRegiaoCandidato[j])\n    j+=1\n    H = int(eleitoresRegiao[i] * PercentualVotosRegiaoCandidato[j])\n    j+=1\n    C = int(eleitoresRegiao[i] * PercentualVotosRegiaoCandidato[j])\n    j+=1\n    I = eleitoresRegiao[i]-B-H-C\n    TempVotos = TempVotos + ['B']*B + ['H']*H + ['C']*C + ['I']*I\n    \n    i+=1\n    \npopulacao.Voto = TempVotos\n        \n\nlen(populacao)","2f2bfd25":"# Define Regi\u00e3o\npopulacao.Regiao = ['Sul']*eleitoresRegiao[0] + \\\n['Sudeste']*eleitoresRegiao[1] + \\\n['Norte']*eleitoresRegiao[2] + \\\n['Nordeste']*eleitoresRegiao[3] + \\\n['CentroOeste']*eleitoresRegiao[4]\n\nlen(populacao)\n","0737ce92":"# Define Sal\u00e1rio\ni = 0\nfor x in Regioes:\n    print(x)\n    tamanho = len(populacao.loc[populacao.Regiao == x,:])\n    populacao.loc[populacao.Regiao == x,'Salario'] = norm(loc=MediaSalarioRegiao[i], scale=0.5*MediaSalarioRegiao[i]).rvs(size=tamanho)\n    i+=1\n\n    \npopulacao.Salario =     populacao.Salario.astype('int')\npopulacao.loc[populacao.Salario <900,'Salario'] = 900\nlen(populacao)","772dab98":"\n\n\n# Define sexo\ni = 0\nfor x in Candidatos:\n    print(x)\n    tamanho = len(populacao.loc[populacao.Voto == x,:])\n    votosMasculinos = int(tamanho*PercentualVotosSexoMasculinoPorCandidato[i])\n    votosFemininos = tamanho - votosMasculinos\n    populacao.loc[populacao.Voto == x,'Sexo'] = ['M'] * votosMasculinos + ['F'] * votosFemininos\n    i+=1    \nlen(populacao)\n\n","01bde2f5":"populacao.Idade = (populacao.Salario\/100 * 2).astype('int')\npopulacao.Idade = populacao.Idade - populacao.Idade.min() \npopulacao.Idade = populacao.Idade * 80 \/ populacao.Idade.max()\npopulacao.Idade = populacao.Idade + 18\npopulacao.Idade = populacao.Idade.astype('int')\nlen(populacao)","f1d17a2b":"populacao = shuffle(populacao)","f7b3ece8":"\npopulacao.head()","6280d1bc":"histograma(populacao,'Salario')","d426155a":"histograma(populacao,'Idade')","637d4353":"graficoBarra(populacao,'Regiao')","c328980f":"graficoBarra(populacao,'Voto')","986caa69":"graficoBarra(populacao,'Sexo')","827d2e4a":"PopulacaoPotencial = populacao.loc[(populacao.Regiao=='Nordeste') & (populacao.Salario<=900),:].copy()\n\nTamanhoPopulacaoPotencial = len(PopulacaoPotencial)\n\nPopulacaoPotencialMediaSalario = PopulacaoPotencial.Salario.mean()\nPopulacaoPotencial.Salario = norm(loc=PopulacaoPotencialMediaSalario, scale=0.1*PopulacaoPotencialMediaSalario).rvs(size=TamanhoPopulacaoPotencial)\najuste = []\nfor x in range(TamanhoPopulacaoPotencial):\n    ajuste = ajuste + [random.randint(-300, 300)]\nPopulacaoPotencial.Salario = PopulacaoPotencial.Salario +   ajuste  \n\nfrom sklearn.model_selection import train_test_split\n\nPopulacaoControle, PopulacaoTeste = train_test_split(PopulacaoPotencial, test_size=0.5)","c7ae26e0":"TamanhoPopulacaoTeste = len(PopulacaoTeste)\nTamanhoPopulacaoTeste","91749b64":"TamanhoPopulacaoControle = len(PopulacaoControle)\nTamanhoPopulacaoControle","c9413da1":"histograma(PopulacaoTeste,'Salario')","517ec2b0":"histograma(PopulacaoControle,'Salario')","1516a0a3":"PopulacaoControlePosPolitica = PopulacaoControle.copy()\nPopulacaoControlePosPoliticaMediaSalario = PopulacaoControlePosPolitica.Salario.mean()\nPopulacaoControlePosPoliticaMediaSalario = PopulacaoControlePosPoliticaMediaSalario * 1.1\nPopulacaoControlePosPolitica.Salario = norm(loc=PopulacaoControlePosPoliticaMediaSalario, scale=0.1*PopulacaoControlePosPoliticaMediaSalario).rvs(size=TamanhoPopulacaoControle)\n\nPopulacaoTestePosPolitica = PopulacaoTeste.copy()\nPopulacaoTestePosPoliticaMediaSalario = PopulacaoTestePosPolitica.Salario.mean()\nPopulacaoTestePosPoliticaMediaSalario = PopulacaoTestePosPoliticaMediaSalario * 1.3\nPopulacaoTestePosPolitica.Salario = norm(loc=PopulacaoTestePosPoliticaMediaSalario, scale=0.1*PopulacaoTestePosPoliticaMediaSalario).rvs(size=TamanhoPopulacaoTeste)\n\nhistograma(PopulacaoTestePosPolitica,'Salario')\n\nhistograma(PopulacaoControlePosPolitica,'Salario')","33e8e29f":"Tamanho_Amostra_Teste = 0\n\nTamanho_Amostra_Teste = Tamanho_Amostra_Valor_Pontual(20674, 0.95, 37240, 100)\nTamanho_Amostra_Teste","83f5d903":"Tamanho_Amostra_Controle = 0\n\nTamanho_Amostra_Controle = Tamanho_Amostra_Valor_Pontual(20674, 0.95, 37240, 100)\n\nTamanho_Amostra_Controle","341bb709":"amostraTeste = pd.DataFrame(columns=['Salario'])\namostraTeste = recupera_amostra(PopulacaoTeste, 15)\namostraTeste = amostraTeste.Salario\namostraTeste.head()","0fc1f4b2":"amostraControle = pd.DataFrame(columns=['Salario'])\namostraControle = recupera_amostra(PopulacaoControle, 15)\namostraControle = amostraControle.Salario\namostraControle.head()","1eab67bc":"inferior,superior = 0,0\n\ninferior,superior = calcula_intervalo_media(amostraTeste, 0.95, 20674)\nprint('Intervalo da m\u00e9dia {} {}'.format(inferior,superior))","7b17c983":"inferior,superior = 0,0\n\ninferior,superior = calcula_intervalo_media(amostraControle, 0.95, 20674)\nprint('Intervalo da m\u00e9dia {} {}'.format(inferior,superior))","6a8779b4":"mediaSalarioTesteAntesPolitica = amostraTeste.mean()\nmediaSalarioTesteAntesPolitica","4404869f":"mediaSalarioControleAntesPolitica = amostraControle.mean()\nmediaSalarioControleAntesPolitica","169730a8":"\nteste_hipotese_media_duas_amostras_desvio_populacao(0.05, \"bilateral\",                                                     mediaSalarioTesteAntesPolitica, Tamanho_Amostra_Teste, 194,\n                                                        mediaSalarioControleAntesPolitica, Tamanho_Amostra_Controle, 194,\n                                                     diferenca = 0  )","01c78d66":"# teste_hipotese_media_duas_amostras_desvio_populacao( )","bd2c645f":"## Fun\u00e7\u00f5es para c\u00e1lculo do valor Z","26e34a03":"## Fun\u00e7\u00f5es para c\u00e1lculo do tamanho da amostra","39b7efea":"# Veja os dados carregados","7eb0a326":"# Passo 5\n\nFoi aplicado o treinamento para adultos e medidos os sal\u00e1rios de amostras das popula\u00e7\u00f5es de teste e controle. Use os dados abaixo para realizar novo teste de hip\u00f3tese em rela\u00e7\u00e3o \u00e0s m\u00e9dias salariais das duas popula\u00e7\u00f5es\n\nA siginific\u00e2ncia \u00e9 0.05\n\nO tipo do teste \u00e9 'bilateral'\n\nAs m\u00e9dias dos sal\u00e1rios das amostras s\u00e3o 1033 para a popula\u00e7\u00e3o de teste e 988 para o controle\n\nO tamanho das amostras est\u00e3o em Tamanho_Amostra_Teste e Tamanho_Amostra_Controle_AntesDaPolitica\n\nO desvio padr\u00e3o da popula\u00e7\u00e3o de teste \u00e9 102 e do controle 98\n\nUse a fun\u00e7\u00e3o: \nteste_hipotese_media_duas_amostras_desvio_populacao(significancia, tipo, \n                                                        media_amostra_1, tamanho_amostra_1, desvio_populacao_1,\n                                                        media_amostra_2, tamanho_amostra_2, desvio_populacao_2,\n                                                     diferenca = 0 )\n                                                     \nOBS: altere somente a linha comentada (iniciando com #)                                                     ","28ea4349":"## Fun\u00e7\u00f5es para Teste de Hip\u00f3tese","9d1aefc3":"<font size=\"6\" color=\"red\">Exerc\u00edcios<\/font>\n\nFoi implantada uma pol\u00edtica de educa\u00e7\u00e3o para adultos numa regi\u00e3o do Nordeste com objetivo de melhorar o sal\u00e1rio da popula\u00e7\u00e3o\n\nPara realizar avalia\u00e7\u00e3o de impacto, foram separados um grupo de teste e um grupo de controle\n\nForam criadas planilhas de dados com informa\u00e7\u00f5es dos dois grupos antes e depois da aplica\u00e7\u00e3o da pol\u00edtica\n\nO objetivo deste exerc\u00edcio \u00e9 responder um conjunto de perguntas (listadas abaixo) para verificar se houve ou n\u00e3o impacto ","3acebe43":"# Gera\u00e7\u00e3o de dados simulando toda a popula\u00e7\u00e3o","a0a7f314":"# Passo 2\n\nObtenha uma amostra da popula\u00e7\u00e3o de teste e uma amostra da popula\u00e7\u00e3o de controle usando o tamanho de amostra calculado no passo 1\n\nUse a fun\u00e7\u00e3o recupera_amostra(populacao, tamanho_amostra)\n\nAs popula\u00e7\u00f5es est\u00e3o armazenadas nas vari\u00e1veis PopulacaoControle e PopulacaoTeste\n\nOBS: altere somente a linha comentada (iniciando com #)","44566a7b":"<font size=\"10\" color=\"black\">Exerc\u00edcio Extra<\/font>\n\nEduardo Chaves Ferreira","9515f4b9":"# Passo 4\n\nFa\u00e7a um teste de hip\u00f3tese usando as m\u00e9dias salarias das popula\u00e7\u00f5es de teste e controle calculadas acima\n\nA siginific\u00e2ncia \u00e9 0.05\n\nO tipo do teste \u00e9 'bilateral'\n\nAs m\u00e9dias das amostras est\u00e3o em mediaSalarioTesteAntesPolitica e mediaSalarioControleAntesPolitica\n\nO tamanho das amostras est\u00e3o em Tamanho_Amostra_Teste e Tamanho_Amostra_Controle\n\nO desvio padr\u00e3o das duas popula\u00e7\u00f5es \u00e9 194\n\nUse a fun\u00e7\u00e3o: \nteste_hipotese_media_duas_amostras_desvio_populacao(significancia, tipo, \n                                                        media_amostra_1, tamanho_amostra_1, desvio_populacao_1,\n                                                        media_amostra_2, tamanho_amostra_2, desvio_populacao_2,\n                                                     diferenca = 0 )\n                                                     \nOBS: altere somente a linha comentada (iniciando com #)","c71bd1de":"# Passo 1 \n\nCalcule o tamanho m\u00ednimo das amostras para estimar o sal\u00e1rio das popula\u00e7\u00f5es de teste e controle antes da aplica\u00e7\u00e3o da pol\u00edtica\n\nO tamanho das popula\u00e7\u00f5es de teste e controle \u00e9 20674\n\nO grau de confian\u00e7a ser\u00e1 0.95\n\nA vari\u00e2ncia do sal\u00e1rio nas duas popula\u00e7\u00f5es \u00e9 37240\n\nA margem de erro \u00e9 100\n\nUse a fun\u00e7\u00e3o Tamanho_Amostra_Valor_Pontual(Tamanho_Populacao, Grau_Confianca, Variancia, Margem_Erro)\n\nOBS: altere somente a linha comentada (iniciando com #)","08c29a0f":"# Passo 3\n\nCalcule oa intervaloa de confian\u00e7a para o sal\u00e1rio das popula\u00e7\u00f5es de teste e de controle usando as amostras do passo 2\n\nO grau de confian\u00e7a \u00e9 0.95\n\nO tamanho das popula\u00e7\u00f5es de teste e controle \u00e9 20674\n\nUse a fun\u00e7\u00e3o calcula_intervalo_media(amostra, Grau_Confianca, TamanhoPopulacao)\n\nOBS: altere somente a linha comentada (iniciando com #)","c0eac3e7":"## Fun\u00e7\u00e3o para recupera\u00e7\u00e3o de amostra a partir da popula\u00e7\u00e3o","c3204ba7":"## Fun\u00e7\u00f5es gr\u00e1ficas","da1399eb":"## Importa\u00e7\u00e3o de bibliotecas usadas nos exemplos","a56b33ba":"## Passo 6\n\nNo passo 4, H0 n\u00e3o foi rejeitada, no passo 5 H0 foi rejeitada.\n\nO que esses testes dizem sobre a compara\u00e7\u00e3o da m\u00e9dia dos sal\u00e1rios antes e depois da aplica\u00e7\u00e3o da pol\u00edtica?\n\n","291f9ad0":"## Fun\u00e7\u00f5es para c\u00e1lculo do intervalo de confian\u00e7a"}}