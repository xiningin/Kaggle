{"cell_type":{"85ae2e26":"code","3fadc390":"code","21eeb18d":"code","97bd1136":"code","3a501ff5":"code","e8f029c3":"code","8c0833c5":"code","6a193690":"code","c5a72ca9":"code","6cee794b":"code","e2f3c483":"code","5a203aa8":"code","fd30b91d":"code","8311c22c":"code","af94ff4e":"code","61da04de":"code","2acdfe5e":"code","db03fa98":"code","c3346fea":"code","1246155e":"code","4d42e831":"code","205731a5":"code","9eb1a94c":"code","0c2f9fd9":"code","c1517021":"code","7fc89a89":"code","9667d2b7":"code","0ee5b98d":"code","d8b5adb2":"code","a6a0f057":"code","2e7b04a3":"code","6553697c":"code","c89d427d":"code","24620d6d":"code","ff1fd646":"code","796074bc":"code","59b2399c":"code","e8bd34a1":"code","d6883fa0":"code","4e6e3ae9":"code","04397224":"code","013114e5":"code","632c4944":"markdown","6a2fb339":"markdown","ac2c4398":"markdown","a3fbe22e":"markdown","87c224d4":"markdown","921129a0":"markdown"},"source":{"85ae2e26":"\"\"\"author s_agnik1511\"\"\"\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\nimport plotly.graph_objs as go\n\nimport gc\nimport sys\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import LabelEncoder\n\n# Models Libs\nfrom xgboost import XGBRegressor\n\nimport warnings\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)","3fadc390":"\"\"\"author s_agnik1511\"\"\"\n# Csv Files\ntrain_data_path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv'\ntest_data_path = '..\/input\/house-prices-advanced-regression-techniques\/test.csv'","21eeb18d":"\"\"\"author s_agnik1511\"\"\"\n# Read csv\ntrain_df = pd.read_csv(train_data_path)\ntest_df = pd.read_csv(test_data_path)","97bd1136":"# Look to shape's\nprint('Train Shape:', train_df.shape)\nprint('Test Shape:', test_df.shape)","3a501ff5":"\"\"\"author s_agnik1511\"\"\"\n# See the raw data, first 10\ntrain_df.head()","e8f029c3":"\"\"\"author s_agnik1511\"\"\"\nyear_stations_df = train_df[['SalePrice','MoSold']].copy()\n\ndef setStation(month):\n    if month in (1,2,3):\n        return \"Summer\"\n    if month in (4,5,6):\n        return \"Autumn\"\n    if month in (7,8,9):\n        return \"Winter\"\n    return \"Spring\"\n    \n\nyear_stations_df['yearStation'] = year_stations_df.MoSold.apply(lambda x: setStation(x));\n\nyear_stations_df.sort_values(by='SalePrice', inplace=True)\n\ntrace = go.Box(\n    x = year_stations_df.yearStation,\n    y = year_stations_df.SalePrice\n)\n\ndata = [trace]\n\nlayout = go.Layout(title=\"Prices x Year Station\",\n                  yaxis={'title':'Sale Price'},\n                  xaxis={'title':'Year Station'})\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig)","8c0833c5":"\"\"\"author s_agnik1511\"\"\"\nyear_stations_gp_df = year_stations_df.groupby('yearStation')['SalePrice'].count().reset_index()\nyear_stations_gp_df = pd.DataFrame({'yearStation': year_stations_gp_df.yearStation,\n                                   'CountHouse': year_stations_gp_df.SalePrice})\nyear_stations_gp_df.sort_values(by='CountHouse', inplace=True)","6a193690":"\"\"\"author s_agnik1511\"\"\"\ntrace = go.Bar(\n    x = year_stations_gp_df.yearStation,\n    y = year_stations_gp_df.CountHouse\n)\ndata = [trace]\nlayout = go.Layout(title=\"Count House x Year Station\",\n                  yaxis={'title':'Count House'},\n                  xaxis={'title':'Year Station'})\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig)","c5a72ca9":"\"\"\"author s_agnik1511\"\"\"\ndef labelStation(x):\n    if x==\"Summer\":\n        return 1\n    if x==\"Autumn\":\n        return 2\n    if x==\"Winter\":\n        return 3\n    return 4\nyear_stations_df['labelStation']=year_stations_df.yearStation.apply(lambda x:labelStation(x))\ndf_corr_year_stations = year_stations_df.corr()\ndf_corr_year_stations","6cee794b":"\"\"\"author s_agnik1511\"\"\"\nyear_stations_sorted_df = year_stations_df.sort_values(by='MoSold')\nyear_stations_sorted_gp_df = year_stations_df.groupby('MoSold')['SalePrice'].count().reset_index();","e2f3c483":"\"\"\"author s_agnik1511\"\"\"\ndf = year_stations_sorted_gp_df\ntrace = go.Scatter(\n    x = df.MoSold,\n    y = df.SalePrice,\n    mode = 'markers+lines',\n    line_shape='spline'\n)\n\ndata = [trace]\n\nlayout = go.Layout(title=\"Prices by month's\",\n                  yaxis={'title':'Sale Price'},\n                  xaxis={'title':'Month sold', 'zeroline':False})\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig)","5a203aa8":"#train_df\n\ntrace = go.Scatter(\n    x = train_df.LotArea,\n    y = train_df.SalePrice,\n    mode = 'markers'\n)\n\ndata = [trace]\n\nlayout = go.Layout(title=\"Lot Area x Sale Price\",\n                  yaxis={'title':'Sale Price'},\n                  xaxis={'title':'Lot Area'})\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig)","fd30b91d":"trace = go.Box(\n    y = train_df.SalePrice,\n    name = 'Sale Price'\n)\n\ndata = [trace]\n\nlayout = go.Layout(title=\"Distribuiton Sale Price\",\n                  yaxis={'title':'Sale Price'})\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig)","8311c22c":"trace = go.Box(\n    y = train_df.LotArea,\n    name = 'Lot Area'\n)\n\ndata = [trace]\n\nlayout = go.Layout(title=\"Distribuiton Lot Area\",\n                  yaxis={'title':'Lot Area'})\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig)","af94ff4e":"\"\"\"author s_agnik1511\"\"\"\nlotarea_saleprice_df = train_df[['SalePrice', 'LotArea']]\nlotarea_saleprice_df.corr()","61da04de":"\"\"\"author s_agnik1511\"\"\"\ntrain_df = train_df.drop(train_df.loc[(train_df['LotArea'] > 100000)].index)\ntrain_df = train_df.drop(train_df.loc[(train_df['SalePrice'] > 500000)].index)","2acdfe5e":"\"\"\"author s_agnik1511\"\"\"\ntrace = go.Scatter(\n    x = train_df.LotArea,\n    y = train_df.SalePrice,\n    mode = 'markers'\n)\ndata = [trace]\nlayout = go.Layout(title=\"Lot Area x Sale Price\",\n                  yaxis={'title':'Sale Price'},\n                  xaxis={'title':'Lot Area'})\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","db03fa98":"\"\"\"author s_agnik1511\"\"\"\ndef setStation(month):\n    if month in (1,2,3):\n        return \"Summer\"\n    if month in (4,5,6):\n        return \"Autumn\"\n    if month in (7,8,9):\n        return \"Winter\"\n    return \"Spring\"\ntrain_df['yearStation'] = train_df.MoSold.apply(lambda x: setStation(x));\ntest_df['yearStation'] = test_df.MoSold.apply(lambda x: setStation(x));","c3346fea":"\"\"\"author s_agnik1511\"\"\"\n# Set y (Target)\ny = np.log(train_df.SalePrice)\n\nX = train_df.copy()","1246155e":"\"\"\"author s_agnik1511\"\"\"\nX.dropna(axis=0, subset=['SalePrice'], inplace=True)\nX.drop(['SalePrice','OverallQual'], axis=1, inplace=True)\nX_test = test_df.copy();","4d42e831":"X.head()","205731a5":"\"\"\"author s_agnik1511\"\"\"\nX_val = X.isnull().sum() * 100 \/ len(X)\nX_val.loc[X_val > 50.00]","9eb1a94c":"\"\"\"author s_agnik1511\"\"\"\ncolls= [col for col in X.columns if X[col].isnull().sum() * 100 \/ len(X) > 50.00]\nfor col in colls:\n    X[col].fillna(\"None\")\n    X_test[col].fillna(\"None\")","0c2f9fd9":"\"\"\"author s_agnik1511\"\"\"\nprint('Train Shape:', X.shape)\nprint('Test Shape:', X_test.shape)","c1517021":"\"\"\"author s_agnik1511\"\"\"\ncategorical_cols = [cname for cname in X.columns\nif X[cname].dtype == \"object\"            \n]\nnumerical_cols = [cname for cname in X.columns\nif X[cname].dtype in ['int64', 'float64']]","7fc89a89":"\"\"\"author s_agnik1511\"\"\"\nmy_cols = categorical_cols + numerical_cols\nX = X[my_cols].copy()\nX_test = X_test[my_cols].copy()\nX.head()","9667d2b7":"\"\"\"author s_agnik1511\"\"\"\nx_cat_unique_values  = [col for col in X[categorical_cols].columns if len(X[col].unique()) <= 5]\ndict_diff_onehot = set(categorical_cols) - set(x_cat_unique_values)\none_hot_cols = list(dict_diff_onehot)","0ee5b98d":"\"\"\"author s_agnik1511\"\"\"\nfor col in numerical_cols:\n    X['{}_{}'.format(col,2)] = X[col]**2\n    X_test['{}_{}'.format(col,2)] = X_test[col]**2\n    X['{}_{}'.format(col,3)] = X[col]**3\n    X_test['{}_{}'.format(col,3)] = X_test[col]**3","d8b5adb2":"X.head()","a6a0f057":"\"\"\"author s_agnik1511\"\"\"\nlabelEncoder = LabelEncoder()\nfor col in x_cat_unique_values:\n    x_unique = X[col].unique();\n    x_test_unique = X_test[col].unique();\n    union_uniques = list(x_unique) + list(x_test_unique)\n    uniques = list(dict.fromkeys(union_uniques));\n    labelEncoder.fit(uniques);\n    X[col] = labelEncoder.transform(X[col].astype(str))\n    X_test[col] = labelEncoder.transform(X_test[col].astype(str))","2e7b04a3":"\"\"\"author s_agnik1511\"\"\"\nsimple_imp = SimpleImputer(missing_values=np.nan, strategy='constant')\nX['GarageYrBlt'] = simple_imp.fit_transform(X[['GarageYrBlt']])\nX_test['GarageYrBlt'] = simple_imp.transform(X_test[['GarageYrBlt']])","6553697c":"\"\"\"author s_agnik1511\"\"\"\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import learning_curve\nfrom math import sqrt\nfrom sklearn.ensemble import RandomForestRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.model_selection import KFold\nfrom lightgbm import LGBMRegressor","c89d427d":"\"\"\"author s_agnik1511\"\"\"\nX.head()","24620d6d":"\"\"\"author s_agnik1511\"\"\"\nnumerical_transformer = Pipeline(steps=[\n  ('imputer', SimpleImputer(strategy='median')),\n  ('scaler', StandardScaler())\n])\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, one_hot_cols)\n    ]\n)\npipeline = Pipeline(\n    steps=[\n        ('preprocessor', preprocessor),\n    ]\n)\nX_train_fit = pipeline.fit_transform(X)","ff1fd646":"\"\"\"author s_agnik1511\"\"\"\nfrom sklearn.model_selection import RandomizedSearchCV\nn_estimators = [100, 500, 900, 1100, 1500]\nmax_depth = [2, 3, 5, 10, 15]\nbooster=['gbtree','gblinear','dart']\nlearning_rate=[0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4]\nbase_score=[0.25,0.5,0.75,1]\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }\nrandom_cv = RandomizedSearchCV(estimator=XGBRegressor(),\n            param_distributions=hyperparameter_grid,\n            cv=5, n_iter=50,\n            scoring = 'neg_mean_squared_error',n_jobs = 4,\n            verbose = 5, \n            return_train_score = True,\n            random_state=42)\nrandom_cv.fit(X_train_fit,y)","796074bc":"random_cv.best_estimator_","59b2399c":"\"\"\"author s_agnik1511\"\"\"\nmodelGb =  XGBRegressor(base_score=0.25, booster='dart', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0,\n             importance_type='gain', learning_rate=0.1, max_delta_step=0,\n             max_depth=2, min_child_weight=3, missing=None, n_estimators=500,\n             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n             silent=None, subsample=1, verbosity=1)\nmodelCat = CatBoostRegressor(depth=3,learning_rate=0.014,iterations=7600,verbose=False,task_type = 'GPU')","e8bd34a1":"\"\"\"author s_agnik1511\"\"\"\nkf = KFold(5, shuffle=True, random_state=0)\nfor linhas_treino, linhas_valid in kf.split(X_train_fit):\n    X_train, X_valid = X_train_fit[linhas_treino], X_train_fit[linhas_valid];\n    y_train, y_valid = y.iloc[linhas_treino], y.iloc[linhas_valid];\n    model = modelGb;\n    model.fit(X_train, y_train);\n    preds = model.predict(X_valid)\n    print('RMSE:', np.sqrt(mean_squared_error(y_valid, preds)),'\\n');","d6883fa0":"\n\"\"\"author s_agnik1511\"\"\"\nX_train, X_valid, y_train, y_valid = train_test_split(X_train_fit, y, random_state = 1, train_size=0.8, test_size=0.2)","4e6e3ae9":"\"\"\"author s_agnik1511\"\"\"\n# Define Model\nmodel = modelGb;\nmodel.fit(X_train, y_train);\npreds = model.predict(X_valid)\nprint('MAE:', mean_absolute_error(y_valid, preds),'\\n');\nprint('RMSE:', np.sqrt(mean_squared_error(y_valid, preds)),'\\n');","04397224":"\"\"\"author s_agnik1511\"\"\"\nX_test_fit = pipeline.transform(X_test)","013114e5":"\"\"\"author s_agnik1511\"\"\"\npreds_test = model.predict(X_test_fit)\noutput = pd.DataFrame({'Id': X_test.Id, 'SalePrice': np.exp(preds_test)})\noutput.to_csv('sample_sub_#3.csv', index=False)\noutput.head()","632c4944":"## Import Libraries","6a2fb339":"# Pipeline","ac2c4398":"# ..........................................................","a3fbe22e":"Conclusion","87c224d4":"# EDA - Exploratory Data Analysis","921129a0":"## Feature engineering"}}