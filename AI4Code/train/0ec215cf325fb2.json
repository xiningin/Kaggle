{"cell_type":{"aae32d69":"code","3fe611af":"code","67fe64bd":"code","09eca3f8":"code","0bcaa899":"code","de19bc7f":"code","c68062ad":"code","77133d98":"code","baa86849":"code","04760930":"code","4cf2337a":"code","22763704":"code","82e738cc":"code","f5f1cb41":"code","e10f87d8":"code","436b3483":"code","f1a9fdd0":"code","7a6893d9":"code","bc42e131":"markdown","2e91580b":"markdown","5ace6510":"markdown","c5cbe6f3":"markdown","69463027":"markdown","194d24f4":"markdown","bbac1aa9":"markdown","3ef18ad1":"markdown","dd922e91":"markdown","ba55cf59":"markdown","3cdfc068":"markdown","f6e7a00a":"markdown","407ba0d8":"markdown","08f05c64":"markdown"},"source":{"aae32d69":"import numpy \nimport shapely.geometry as shg \nimport fiona \nimport geopandas \nimport matplotlib.pyplot as plt ","3fe611af":"poly1 = [(1,1), (1,5), (5,5), (5,1), (1,1)]\npoly2 = [(2,1.3), (5,1.2), (6,3), (6,4), (3,5), (1.4,3), (1.5,2), (2,1.3)]","67fe64bd":"shgpoly1 = shg.Polygon(poly1)\nshgpoly2 = shg.Polygon(poly2)\n\nprint('Area of Poly 1 is {}'.format(shgpoly1.area))\nprint('Area of Poly 2 is {}'. format(shgpoly2.area))\n","09eca3f8":"plt.plot(shgpoly1.exterior.xy[0], shgpoly1.exterior.xy[1])\nplt.plot(shgpoly2.exterior.xy[0], shgpoly2.exterior.xy[1])","0bcaa899":"\"\"\"\nwhat the function does? calculates the spatial mean of a set of xy coordinates \nparameters- a list of coordinates [(1,1), (1,5), (5,5), (5,1), (1,1)]\nwhat the function returns- the mean x and y values \nhow the function is used- x, y = spatialmean(coords) \n\"\"\"\ndef spatialmean(coords):\n    adj=1\n    if coords[0] != coords[-1]:\n        adj == 0\n        \n    x, y = zip(*coords)\n    mx = 0 \n    my = 0\n    for i in range(len(coords)-adj):\n        mx = mx + x[i]\n        my = my + y[i]\n    mx = mx \/ (len(coords)-adj)\n    my = my \/ (len(coords)-adj)\n    return mx, my ","de19bc7f":"x, y = spatialmean(poly1)\nprint(x, y)","c68062ad":"x, y = spatialmean(poly2)\nprint(x, y)","77133d98":"for i in range(len(poly1)-1):  #iterating over a polygon and accessing pairs of coordinates \n    print(poly1[i], poly1[i+1])","baa86849":"for i in range(len(poly2)-1):  \n    print(poly2[i], poly2[i+1])","04760930":"def areapoly(poly):\n    runningsum = 0\n    mx, my = spatialmean(poly)\n    for i in range(len(poly)-1):\n        xi, yi = poly[i]\n        xj, yj = poly[i + 1]\n        sum = ((xj - mx) * (yi - my)) - ((yj - my) * (xi-mx))\n        runningsum = (runningsum + sum)\n        area = runningsum\/2\n    return area \nprint(areapoly(poly1))\n        ","4cf2337a":"area1 = areapoly(poly1)\narea2 = areapoly(poly2)\n\nprint('area of poly 1 is {} and from function {}'.format(shgpoly1.area, area1))\nprint('area of poly 2 is {} and from function {}'.format(shgpoly2.area, area2))\n","22763704":"# Loading shapefile data into a list\nshapefile_polygons = []                  #a list to store the polygons we load\n\n\nc = fiona.open('..\/input\/ceg1713-data-files\/polygons.shp') #Open the shapefile using fiona \n\nfor each_poly in c:\n    geom = shg.shape(each_poly['geometry'])\n    poly_data = each_poly[\"geometry\"][\"coordinates\"][0]  #EXTERIOR RING ONLY\n    poly = shg.Polygon(poly_data)\n    print(poly)\n    #Converts into the same format as the other data\n    shapefile_polygons.append(list(poly.exterior.coords))\n\ndisplay(shapefile_polygons)","82e738cc":"plt.gca().set_aspect('equal', adjustable='box')  #To make the x and y axis the same scale\n\nfor poly in shapefile_polygons:\n    xy = list(zip(*poly))\n    plt.fill(xy[0], xy[1], alpha=0.5)","f5f1cb41":"def areapoly(poly):\n    runningsum = 0\n    mx, my = spatialmean(poly)\n    for i in range(len(poly)-1):\n        xi, yi = poly[i]\n        xj, yj = poly[i + 1]\n        sum = ((xj - mx) * (yi - my)) - ((yj - my) * (xi-mx))\n        runningsum = (runningsum + sum)\n        area = runningsum\/2\n    return area \nprint(areapoly(poly1))","e10f87d8":"# Loading shapefile data into a list\nshapefile_buildings = []                  #a list to store the polygons we load\n\n\nc = fiona.open('..\/input\/ceg1713-data-files\/buildings.shp') #Open the shapefile using fiona \n\nfor each_poly in c:\n    geom = shg.shape(each_poly['geometry'])\n    poly_data = each_poly[\"geometry\"][\"coordinates\"][0]  #EXTERIOR RING ONLY\n    poly = shg.Polygon(poly_data)\n    print(poly)\n    #Converts into the same format as the other data\n    shapefile_buildings.append(list(poly.exterior.coords))\n\ndisplay(shapefile_buildings)","436b3483":"plt.gca().set_aspect('equal', adjustable='box')  #To make the x and y axis the same scale\n\nfor poly in shapefile_buildings:\n    xy = list(zip(*poly))\n    plt.fill(xy[0], xy[1], alpha=0.5)","f1a9fdd0":"for shp in shapefile_buildings:\n    print(areapoly(shp))","7a6893d9":"area1 = areapoly(poly)\n\nprint('area of building is {} and from function {}'.format(shg.Polygon(poly).area, area1))","bc42e131":"Function to calculate the area of a polygon- this is done by splitting the shape into triangles from each corner ","2e91580b":"Comparing our own function to a shapely library ","5ace6510":"Plotting the polygons ","c5cbe6f3":"Adding data from a file- start off with the simple polygons","69463027":"Areas of the buildings using a known library ","194d24f4":"Check the function works ","bbac1aa9":"Simple test data ","3ef18ad1":"Test the function and compare with shapely- if the answers match up then the function works ","dd922e91":"Next use the more complex building data and find their coordinates  ","ba55cf59":"We end up with a list of polygons-  lets plot them","3cdfc068":"A spatial mean function- this calculates the middle of the polygons ","f6e7a00a":"*image of 1\/2 the sum formula* - couldnt seem to copy the image into the page","407ba0d8":"Need objective truth- need to know the correct answer to prove if my function works ","08f05c64":"Plotting the buildings "}}