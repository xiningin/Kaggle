{"cell_type":{"1bbfb213":"code","9124a0a5":"code","97229e04":"code","5370853a":"code","cb828f69":"code","6fe7a83f":"code","f5778134":"code","ef5617da":"code","b1945a57":"code","e592d3ab":"code","807fe624":"code","eb099288":"code","8c0d948c":"code","2069e66b":"code","25394821":"code","aa457eef":"code","10f3104e":"code","edc33049":"code","85950002":"code","1a043517":"code","d4a73df1":"code","89d24543":"code","a3682a9d":"code","16bf803b":"code","2be6516d":"code","374c7e6f":"code","8668c396":"code","323cea81":"code","78dff35d":"code","93b8eb5a":"code","a0728d8f":"code","4f2652ff":"code","003b934c":"code","ae65a259":"code","151e093c":"code","5b324d53":"code","48182ca5":"code","0e750962":"code","1ccdd255":"code","17b129c3":"code","e1b11bc5":"code","880cfcc2":"code","2d4df8c6":"code","b088296e":"code","8c5e4edc":"markdown","6fe7974e":"markdown","c8defef7":"markdown","cdebae99":"markdown","ec5d18b3":"markdown","f1b7b946":"markdown","07b9b9bc":"markdown","cd1fae40":"markdown","16e6dfe1":"markdown","fe4ecd16":"markdown","5b5dcf4a":"markdown","8c7aa606":"markdown","b61ca165":"markdown","0cc421c1":"markdown","3cde9cbc":"markdown","6e1940f9":"markdown","882a4c4b":"markdown","1755bbea":"markdown","e813787d":"markdown","e04174f8":"markdown","ee07d4f8":"markdown","f902c1d2":"markdown","dced1be5":"markdown","82895e10":"markdown","24fde057":"markdown","c3ec8829":"markdown","10b5065e":"markdown","6188fdf9":"markdown","bbc63ed6":"markdown","9f0da0ce":"markdown","85eb2760":"markdown","a2a28a29":"markdown","e6c173e0":"markdown","64660329":"markdown","2d2bc26c":"markdown"},"source":{"1bbfb213":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")","9124a0a5":"df = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")","97229e04":"df.head()","5370853a":"df.shape","cb828f69":"df.info()","6fe7a83f":"df.isnull().sum()","f5778134":"df[\"country\"].value_counts().head()","ef5617da":"df[\"country\"].fillna(\"United States\", inplace=True)","b1945a57":"df[\"rating\"].value_counts().head()","e592d3ab":"df[\"rating\"].fillna(\"TV-MA\", inplace=True)","807fe624":"fig, ax = plt.subplots(1,2, figsize=(24,12))\nfig.suptitle('Top 5 Countries With Most Contents on Netflix', size=24, fontweight=\"bold\")\ndf.country.value_counts().head().sort_values().plot(kind = 'barh', color=\"skyblue\",ax=ax[0])\nax[0].set_xlabel(\"Content Number\", fontweight=\"bold\", size=15)\nax[0].xaxis.set_tick_params(labelsize=15)\nax[0].yaxis.set_tick_params(labelsize=15)\nax[0].set_ylabel(\"Country\", fontweight=\"bold\", size=15)\n\nexplode = (0, 0, 0, 0 ,0.1)\ncolors = [\"pink\", \"violet\",\"gray\", \"green\",\"skyblue\"]\nlabels = df.country.value_counts().head().sort_values().index\nvalues =df.country.value_counts().head().sort_values()\nplt.pie(values, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90, textprops={'fontsize': 15, \"fontweight\" : \"bold\"}, colors=colors)\n","eb099288":"fig, ax = plt.subplots(1,2, figsize=(24,12))\nfig.suptitle('Distribution of Show Types', size=24, fontweight=\"bold\")\nsns.countplot(df[\"type\"], palette = \"Blues\", ax=ax[0])\nax[0].set_xlabel(\"Show Type\", fontweight=\"bold\", size=15)\nax[0].xaxis.set_tick_params(labelsize=15)\nax[0].yaxis.set_tick_params(labelsize=15)\nax[0].set_ylabel(\"Content Number\", fontweight=\"bold\", size=15)\n\nexplode = (0, 0)\ncolors = [\"#83CEAB\", \"#C97FAB\"]\nlabels = df.type.unique().tolist()\nvalues = df.type.value_counts().tolist()\nplt.pie(values, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90, textprops={'fontsize': 15, \"fontweight\" : \"bold\"}, colors=colors)","8c0d948c":"plt.figure(figsize=(16, 8))\nsns.countplot(x = 'country',data = df ,hue = 'type', palette = \"Purples\",\n              order = df.country.value_counts().index[0:5])\nplt.legend(prop={\"size\":20}, loc=\"upper right\")\nplt.xlabel(\"Country\", size=18)\nplt.ylabel(\"Count\", size=18)\nplt.title(\"Comparison of Movies and TV Shows According to Top 5 Countries\", size=22, fontweight=\"bold\")\nplt.grid()","2069e66b":"plt.figure(figsize=(16, 8))\nsns.countplot(x='rating',data = df,hue='type', palette = \"Oranges\")\nplt.legend(prop={\"size\":20}, loc=\"upper right\")\nplt.xlabel(\"Rating\", size=18)\nplt.ylabel(\"Count\", size=18)\nplt.title(\"Comparison of Movies and TV Shows According to Ratings\", size=22, fontweight=\"bold\")\nplt.grid()","25394821":"category = df[\"listed_in\"].str.split(', ', expand=True).stack()\nplt.figure(figsize=(16, 8))\ncategory.value_counts().head(25).sort_values(ascending=True).plot(kind=\"barh\", color=\"#85A18B\")\nplt.title(\"Top 25 Categories With Most Contents\", size=20)\nplt.xlabel(\"Number of Content\", size=15)\nplt.ylabel(\"Category\", size=15)","aa457eef":"act = df[\"cast\"].str.split(', ', expand=True).stack()\nplt.figure(figsize=(16, 8))\nact.value_counts().head(10).sort_values(ascending=True).plot(kind=\"barh\", color=\"#A15878\")\nplt.title(\"Top 10 Actors\/Actresses With Most Contents\", size=20)\nplt.xlabel(\"Number of Content\", size=15)\nplt.ylabel(\"Actor\/Actress\", size=15)","10f3104e":"df_nadrop_da =  df.dropna(subset = [\"date_added\"])","edc33049":"added_year = []\nadded_month = []\nadded_day = []\n\nfor date in df_nadrop_da.date_added:\n    year = (date[-4::1])\n    month = date.split()[0]\n    day = date.split()[1][0]\n    added_year.append(year)\n    added_month.append(month)\n    added_day.append(day)\n    \ndf_nadrop_da[\"Added Year\"] = added_year\ndf_nadrop_da[\"Added Month\"] = added_month\ndf_nadrop_da[\"Added Day\"] = added_day\ndf_nadrop_da[\"AY-RY\"] = df_nadrop_da[\"Added Year\"].astype(int)- df_nadrop_da[\"release_year\"].astype(int)\n\ndf_nadrop_da.head(3)","85950002":"fig, ax = plt.subplots(1,2, figsize=(24,12))\ndf_nadrop_da[\"Added Year\"].value_counts().sort_index().plot(kind = 'barh', color=\"green\", ax=ax[0])\nfig.suptitle('Variation of Content Number According to Years', size=24, fontweight=\"bold\")\nax[0].set_xlabel(\"Content Number\", size=18)\nax[0].set_ylabel(\"Year\", size=18)\nax[0].xaxis.set_tick_params(labelsize=15)\nax[0].yaxis.set_tick_params(labelsize=15)\nx = df_nadrop_da[\"Added Year\"].value_counts().sort_index().index\ny = df_nadrop_da[\"Added Year\"].value_counts().sort_index()\nax[1].plot(x, y, linewidth = 4, color=\"green\", marker=\"o\", markerfacecolor=\"green\", markersize=15)\nax[1].set_xlabel(\"Year\", size=18)\nax[1].set_ylabel(\"Content Number\", size=18)\nax[1].xaxis.set_tick_params(labelsize=15)\nax[1].yaxis.set_tick_params(labelsize=15)","1a043517":"plt.figure(figsize=(10,6))\ndf_nadrop_da[\"Added Month\"].value_counts().plot(kind=\"bar\", color = \"gray\")\nplt.xlabel(\"Month\", size=18, fontweight=\"bold\")\nplt.ylabel(\"Content Number\", size=18, fontweight=\"bold\")\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.title(\"Variation of Content Number According to Months\", size=22, fontweight=\"bold\", fontstyle=\"italic\")","d4a73df1":"plt.figure(figsize=(10,6))\ndf_nadrop_da[\"Added Day\"].value_counts().plot(kind=\"bar\", color = \"pink\")\nplt.xlabel(\"Day\", size=18, fontweight=\"bold\")\nplt.ylabel(\"Content Number\", size=18, fontweight=\"bold\")\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.title(\"Variation of Content Number According to Days of A Month\", size=22, fontweight=\"bold\", fontstyle=\"italic\")","89d24543":"df_nadrop_da_mov = df_nadrop_da[df_nadrop_da[\"type\"] == \"Movie\"]\ndf_nadrop_da_tv = df_nadrop_da[df_nadrop_da[\"type\"] == \"TV Show\"]","a3682a9d":"ave_year_dict = {}\nave_year_dict[\"Movie\"] = df_nadrop_da_mov[\"AY-RY\"].mean()\nave_year_dict[\"TV Show\"] = df_nadrop_da_tv[\"AY-RY\"].mean()\n\nkeys = ave_year_dict.keys()\nvalues = ave_year_dict.values()\n\nplt.figure(figsize=(10,6))\nplt.bar(keys, values, color = \"#BD8787\")\nplt.xlabel(\"Type of Show\", size=18)\nplt.ylabel(\"Average Year\", size=18)\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.title(\"Added Time For Show Types After Being Released\", size=20, fontweight=\"bold\", fontstyle=\"italic\")","16bf803b":"df_mov = df[df[\"type\"] == \"Movie\"]\ndf_tv = df[df[\"type\"] == \"TV Show\"]\n\nfig, ax = plt.subplots(1,2, figsize=(18,8))\nsns.distplot(df_mov[\"release_year\"], ax=ax[0], color=\"red\")\nsns.distplot(df_tv[\"release_year\"], ax=ax[1], color=\"red\")\nax[0].set_xlabel(\"Release Year\", size=20)\nax[0].set_title(\"Distribution of Release Year for Movies\", size=25, fontweight=\"bold\", fontstyle=\"italic\")\nax[1].set_xlabel(\"Release Year\", size=20)\nax[1].set_title(\"Distribution of Release Year for TV Shows\", size=25, fontweight=\"bold\", fontstyle=\"italic\")\nplt.tight_layout()","2be6516d":"df_mov.head(1)","374c7e6f":"arr_duration_list_mov = []\narr_duration_list_tv = []\n\nfor duration in df_mov.duration:\n    arr_duration = duration.split()[0]\n    arr_duration_list_mov.append(arr_duration)\ndf_mov[\"Arranged Duration\"] = arr_duration_list_mov\ndf_mov[\"Arranged Duration\"] = df_mov[\"Arranged Duration\"].astype(int)\n\nfor duration in df_tv.duration:\n    arr_duration = duration.split()[0]\n    arr_duration_list_tv.append(arr_duration)\ndf_tv[\"Arranged Duration\"] = arr_duration_list_tv\ndf_tv[\"Arranged Duration\"] = df_tv[\"Arranged Duration\"].astype(int)","8668c396":"fig, ax = plt.subplots(1,2, figsize=(18,8))\nsns.distplot(df_mov[\"Arranged Duration\"], ax=ax[0], color=\"green\")\nsns.distplot(df_tv[\"Arranged Duration\"], ax=ax[1], color=\"green\")\nax[0].set_xlabel(\"Duration (min)\", size=20)\nax[0].set_title(\"Distribution of Duration for Movies\", size=25, fontweight=\"bold\", fontstyle=\"italic\")\nax[1].set_xlabel(\"Duration (Season)\", size=20)\nax[1].set_title(\"Distribution of Duration for TV Shows\", size=25, fontweight=\"bold\", fontstyle=\"italic\")\nplt.tight_layout()","323cea81":"mean_duration_movies = df_mov[\"Arranged Duration\"].mean()\nmean_duration_tv_shows = df_tv[\"Arranged Duration\"].mean()\n\nprint(\"Average Duration for Movies is\", round(mean_duration_movies, 2), \"minutes.\")\nprint(\"Average Duration for TV Show is\", round(mean_duration_tv_shows, 2), \"Season(s).\")\n\nfig, ax = plt.subplots(1,2, figsize=(16,8))\nax[0].bar(\" \", mean_duration_movies, color=\"skyblue\")\nax[1].bar(\" \", mean_duration_tv_shows, color=\"skyblue\")\nax[0].set_xlabel(\"Movie\", size=20)\nax[0].set_ylabel(\"Average Min.\", size=20)\nax[0].set_title(\"Average Duration for Movies\", size=25, fontweight=\"bold\", fontstyle=\"italic\")\nax[1].set_xlabel(\"TV Shows\", size=20)\nax[1].set_ylabel(\"Average Season\", size=20)\nax[1].set_title(\"Average Duration for TV Shows\", size=25, fontweight=\"bold\", fontstyle=\"italic\")","78dff35d":"longest_movie = df_mov.loc[df_mov[\"Arranged Duration\"] == df_mov[\"Arranged Duration\"].max()]\nprint(\"The longest movie is\", longest_movie.reset_index()[\"title\"][0], \"with\",\n       longest_movie.reset_index()[\"duration\"][0]+\".\")\nlongest_movie","93b8eb5a":"longest_tv_show = df_tv.loc[df_tv[\"Arranged Duration\"] == df_tv[\"Arranged Duration\"].max()]\nprint(\"There are\", len(longest_tv_show), \"longest TV Shows.\")\nfor i in range(len(longest_tv_show)):\n    print(str(i+1) + \".TV Show is\", longest_tv_show.reset_index()[\"title\"][i], \n          \"with\", longest_tv_show.reset_index()[\"duration\"][i]+\".\" )\nlongest_tv_show","a0728d8f":"df_mov_old = df_mov.loc[df_mov[\"release_year\"] == df_mov[\"release_year\"].min()]\nprint(\"There are\", len(df_mov_old), \"oldest movies.\")\nfor i in range(len(df_mov_old)):\n    print(str(i+1) + \".Movie is\", df_mov_old.reset_index()[\"title\"][i], \"with release year of\", \n          df_mov_old.reset_index()[\"release_year\"][i])\ndf_mov_old","4f2652ff":"df_tv_old = df_tv.loc[df_tv[\"release_year\"] == df_tv[\"release_year\"].min()]\nprint(\"The oldest TV show is\", df_tv_old.reset_index()[\"title\"][0], \"with release year of\",\n       df_tv_old.reset_index()[\"release_year\"][0])\ndf_tv_old","003b934c":"plt.figure(figsize=(10,6))\ndf_mov.director.value_counts().head().sort_values().plot(kind=\"barh\", color = \"#D77373\")\nplt.xticks(np.arange(0,21,1))\nplt.xlabel(\"Number of Movies\", size=15)\nplt.ylabel(\"Director\", size=15)\nplt.title(\"Top 5 Directors With Most Movies\", size=22, fontweight=\"bold\", fontstyle=\"italic\")","ae65a259":"plt.figure(figsize=(10,6))\ndf_tv.director.value_counts().head().sort_values().plot(kind=\"barh\", color = \"#8DB7B9\")\nplt.xticks(np.arange(0,6,1))\nplt.xlabel(\"Number of TV Shows\", size=15)\nplt.ylabel(\"Director\", size=15)\nplt.title(\"Top 5 Directors With Most TV Shows\", size=22, fontweight=\"bold\", fontstyle=\"italic\")","151e093c":"df_comedy_mov = df_mov[df_mov.listed_in.str.contains('Comedy') | df_mov.listed_in.str.contains(\"Comedies\")] \ndf_comedy_tv = df_tv[df_tv.listed_in.str.contains('Comedy') | df_tv.listed_in.str.contains(\"Comedies\")] \n\ndf_horror_mov = df_mov[df_mov.listed_in.str.contains('Horror') | df_mov.listed_in.str.contains(\"horror\")] \ndf_horror_tv = df_tv[df_tv.listed_in.str.contains('Horror') | df_tv.listed_in.str.contains(\"horror\")] ","5b324d53":"labels = [\"Movie\", \"TV Show\"]\ncomedy_count = [df_comedy_mov.shape[0], df_comedy_tv.shape[0]]\nhorror_count = [df_horror_mov.shape[0], df_horror_tv.shape[0]]\nx = np.arange(len(labels))\nwidth = 0.40\n\nfig, ax = plt.subplots(figsize=(16,8))\nrects1 = ax.bar(x - width\/2, comedy_count, width, label='Comedy', color=\"#9DB0B0\")\nrects2 = ax.bar(x + width\/2, horror_count, width, label='Horror', color=\"#979870\")\n\nax.set_xlabel('Show Type', fontsize=15)\nax.set_ylabel('Content Number', fontsize=15)\nax.set_title('Comparison of Comedy and Horror Contents', fontsize=22, fontweight=\"bold\", fontstyle=\"italic\")\nax.set_xticks(x)\nax.set_xticklabels(labels)\nplt.xticks(fontsize=16)\nlegend = ax.legend(loc='upper right',prop={\"size\":18})\nlegend.set_title('Category',prop={'size':20})","48182ca5":"df_tv_trans = df_tv[df_tv.title.str.contains('Transformers') | df_tv.title.str.contains(\"transformers\")]\n\nprint(\"There are\", df_tv_trans.shape[0], \"Transformers shows.\")\ndf_tv_trans","0e750962":"df_tv_trans.sort_values(by=['release_year'], inplace=True, ascending=False)\n\nprint(\"The newest Transformers show on Netflix is\", df_tv_trans.head(1).reset_index()[\"title\"][0], \n      \"with release year of\", df_tv_trans.head(1).reset_index()[\"release_year\"][0])\ndf_tv_trans.head(1)","1ccdd255":"df_war = df[df.description.str.contains('War') | df.description.str.contains(\"war\")]\nprint(\"There are\", df_war.shape[0], 'contents which contain the word \"war\".')","17b129c3":"plt.figure(figsize=(10,6))\ndf_war[\"country\"].value_counts().head().plot(kind=\"bar\", color = \"#B5C338\")\nplt.title('Countries Which Have The Most Contents That\\n Contain The Word \"war\" In The Description', size=22, \n          fontweight=\"bold\", fontstyle=\"italic\")\nplt.xlabel(\"Country\", size=18)\nplt.ylabel(\"Content Number\", size=18)\nplt.xticks(size=15)\nplt.yticks(size=15)","e1b11bc5":"df_love = df[df.description.str.contains('Love') | df.description.str.contains(\"love\")]\nprint(\"There are\", df_love.shape[0], 'contents which contain the word \"love\".')","880cfcc2":"plt.figure(figsize=(10,6))\ndf_love[\"country\"].value_counts().head().plot(kind=\"bar\", color=\"#A92E43\")\nplt.title('Countries Which Have The Most Contents That\\n Contain The Word \"love\" In The Description', size=22, \n          fontweight=\"bold\", fontstyle=\"italic\")\nplt.xlabel(\"Country\", size=18)\nplt.ylabel(\"Content Number\", size=18)\nplt.xticks(size=15)\nplt.yticks(size=15)","2d4df8c6":"df_will_eva = df[df.cast.str.contains('Will Smith') & df.cast.str.contains(\"Eva Mendes\")]\n\nprint(\"The\", df_will_eva.reset_index()[\"type\"][0] + ' \"' +df_will_eva.reset_index()[\"title\"][0]+ '\" ' +\n     \"has both Will Smith and Eva Mendes in its cast.\")\ndf_will_eva","b088296e":"df_burton = df[df.director.str.contains('tim burton') | df.director.str.contains(\"Tim Burton\")]\ndf_burton = df_burton[df_burton[\"duration\"] == df_burton[\"duration\"].max()]\n\nprint(\"The longest movie directed by Tim Burton is\" + ' \"'+df_burton.reset_index()[\"title\"][0]+'\" ' \n      \"with\", df_burton[\"duration\"].max() + \".\")\ndf_burton","8c5e4edc":"<h2 style=\"color:teal;\">Which movie has the longest duration?<\/h2>","6fe7974e":"<p style=\"color:teal;\">We have null values in 5 columns. Let's try to make it better.<\/p>","c8defef7":"# Question & Answer Section","cdebae99":"<h2 style=\"color:teal;\">What are the average durations for both movies and TV shows on Netflix?<\/h2>","ec5d18b3":"<h2 style=\"color:teal;\">What are the top 5 countries have the most contents that contain the word \"love\" in the description?<\/h2>","f1b7b946":"<h2 style=\"color:teal;\">Who are the top 5 directors with most TV shows on Netflix?<\/h2>","07b9b9bc":"<h2 style=\"color:teal;\">How many descriptions of contents contain the word \"war\"?<\/h2>","cd1fae40":"<h2 style=\"color:teal;\">Is there any content that has both Will Smith and Eva Mendes in its cast?<\/h2>","16e6dfe1":"<p style=\"color:teal;\">Let's dive into little bit deeper.<\/p>","fe4ecd16":"<p style=\"color:teal;\">Let's apply the same operation for the rating columns.<\/p>","5b5dcf4a":"<h2 style=\"color:teal;\">What is the oldest TV show on Netflix?<\/h2>","8c7aa606":"<p style=\"color:teal;\">Now, let's create 4 new columns. Three of them, respectively to keep added years, added_months and added days for each row and another one to keep value in between added year and release year.<\/p>","b61ca165":"<p style=\"color:teal;\">Let's look at the distribution of show types.<\/p>","0cc421c1":"<h2 style=\"color:teal;\">What is the distribution of release years for both movies and TV shows on Netflix?<\/h2>","3cde9cbc":"<p style=\"color:teal;\">Let's take a glance at the average year differences between added year and release year of the show types on Netflix.<\/p>","6e1940f9":"<h2 style=\"color:teal;\">What is the longest movie directed by Tim Burton?<\/h2>","882a4c4b":"<h2 style=\"color:teal;\">Which month has the most contents added?<\/h2>","1755bbea":"<h2 style=\"color:teal;\">Which one is more on Netflix? Comedy contents or horror contents?<\/h2>","e813787d":"# Data Analysis and Visualizations","e04174f8":"<h2 style=\"color:teal;\">What is the distribution of duration for both movies and TV shows on Netflix?<\/h2>","ee07d4f8":"<p style=\"color:teal;\">Let's take a look at the variation of content numbers according to years. We have 11 null values on date_added column. So, let's drop the rows which contain null values.<\/p>","f902c1d2":"<p style=\"color:teal;\">As it's seen, United States has the most contents compared to other countries. So, it's not a bad idea to change all the null values with United States in country column.<\/p>","dced1be5":"<p style=\"color:teal;\">Let's check if there are null values or not<\/p>","82895e10":"<h2 style=\"color:teal;\">Which one is the newest Transformers show available on Netflix?<\/h2>","24fde057":"<h2 style=\"color:teal;\">How many Tranformers shows does Netflix have?<\/h2>","c3ec8829":"<h2 style=\"color:teal;\">What are the top 5 countries have the most contents that contain the word \"war\" in the description?<\/h2>","10b5065e":"<h2 style=\"color:teal;\">Which day of the month has the most contents added?<\/h2>","6188fdf9":"<h2 style=\"color:teal;\">Which year has the most contents added?<\/h2>","bbc63ed6":"<h2 style=\"color:teal;\">Who are the top 5 directors with most movies on Netflix?<\/h2>","9f0da0ce":"# Netflix Data Analysis with Question & Answer","85eb2760":"<h2 style=\"color:teal;\">How many descriptions of contents contain the word \"love\"?<\/h2>","a2a28a29":"# Importing Necessary Libraries","e6c173e0":"<h2 style=\"color:teal;\">Which TV shows have the longest duration?<\/h2>","64660329":"<h2 style=\"color:teal;\">What are the oldest movies on Netflix?<\/h2>","2d2bc26c":"<p style=\"color:teal;\">In duration column, we have string values like \"90 min\" etc. We have to remove \"min\" values and change to column type to integer to get the average value.<\/p>"}}