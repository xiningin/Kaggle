{"cell_type":{"1d35af3b":"code","3441eb35":"code","fb2a8201":"code","2ceaac93":"code","9b22fe3f":"code","a8c6098c":"code","b625ec78":"code","7db649a2":"code","03e8de41":"code","a3eafe64":"code","3844f5a8":"code","34554fdc":"code","12ffcfc3":"code","adc61362":"code","4a7b003b":"code","aee60a68":"code","6a468d73":"code","54ab1785":"code","7294f44c":"code","6903a050":"code","213762c5":"code","04915456":"code","2f84810a":"code","57d67259":"code","18e3baf2":"code","13655a6f":"code","0a68c51d":"code","51758eae":"code","e017cf36":"code","22e7e6a8":"code","4086b66c":"code","bdf86964":"code","4f676781":"code","badfb18e":"code","c99bb7ca":"code","9000baf8":"code","cd52d9a5":"code","39574ae8":"code","e8213715":"code","bf589d9c":"code","b816cd1e":"code","74f17c9e":"code","3b5fda6c":"code","bc481ac9":"code","996fc60d":"code","a49d8ee1":"code","6713077c":"code","266ba067":"code","142ac075":"code","0f1ae2e7":"code","f50664d4":"code","6a262062":"code","4178c68d":"code","49301ffd":"markdown","da6c68cb":"markdown","b556fb98":"markdown","7ec02b4d":"markdown","945f439f":"markdown","79351f55":"markdown","d0208f95":"markdown","cc0010be":"markdown","5140df0f":"markdown","ed01912b":"markdown","26622420":"markdown","0fc634ca":"markdown","01be78a1":"markdown","d9583f70":"markdown","71e7e4ea":"markdown","fd3f1268":"markdown"},"source":{"1d35af3b":"import pandas as pd\nimport numpy as np\n\nimport json\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom catboost import CatBoostClassifier\n# from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\n\nimport keras\n\n# import pprint\nimport gc\nimport matplotlib.pyplot as plt\n\n# pandas display option\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_row', 1500)\npd.set_option('max_colwidth', 150)\npd.set_option('display.float_format', '{:.2f}'.format)","3441eb35":"train = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/train.csv\")\n# test = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/test.csv\")\nlabel = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv\")\n# sample = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv\")\nspecs = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/specs.csv\")","fb2a8201":"df = train.merge(label, how=\"left\", on=[\"installation_id\", \"game_session\", \"title\"])\ndf.timestamp = pd.to_datetime(df.timestamp)\ndf.sort_values(\"timestamp\", ascending=False, inplace=True)\ndel train, label\ngc.collect()","2ceaac93":"df.head()","9b22fe3f":"world = df.groupby([\"installation_id\", \"world\"]).size().unstack().reset_index().fillna(0)\nworld.columns.name = None","a8c6098c":"len(world), len(pd.unique(world.installation_id))","b625ec78":"plt.figure(figsize=(30, 10))\nplt.subplot(2, 4, 1)\nplt.hist(world.CRYSTALCAVES)\nplt.title(\"CRYSTALCAVES\")\nplt.subplot(2, 4, 2)\nplt.hist(np.log(world.CRYSTALCAVES+1))\nplt.title(\"CRYSTALCAVES(log)\")\n\nplt.subplot(2, 4, 3)\nplt.hist(world.MAGMAPEAK)\nplt.title(\"MAGMAPEAK\")\nplt.subplot(2, 4, 4)\nplt.hist(np.log(world.MAGMAPEAK+1))\nplt.title(\"MAGMAPEAK(log)\")\n\nplt.subplot(2, 4, 5)\nplt.hist(world.NONE)\nplt.title(\"NONE\")\nplt.subplot(2, 4, 6)\nplt.hist(np.log(world.NONE+1))\nplt.title(\"NONE(log)\")\n\nplt.subplot(2, 4, 7)\nplt.hist(world.TREETOPCITY)\nplt.title(\"TREETOPCITY\")\nplt.subplot(2, 4, 8)\nplt.hist(np.log(world.TREETOPCITY+1))\nplt.title(\"TREETOPCITY(log)\")\n\nplt.show()","7db649a2":"world.iloc[:, 1:] = np.log(world.iloc[:, 1:]+1)","03e8de41":"# display(len(df[df.world==\"NONE\"])), \n# display(len(df[df.world==\"NONE\"].installation_id), len(pd.unique(df[df.world==\"NONE\"].installation_id)))\n# display(len(df[df.world==\"NONE\"].game_session), len(pd.unique(df[df.world==\"NONE\"].game_session)))","a3eafe64":"event_count = df.groupby([\"installation_id\", \"game_session\"]).event_count.is_monotonic_decreasing","3844f5a8":"event_count","34554fdc":"event_code = df.groupby([\"installation_id\", \"event_code\"]).size().unstack().reset_index().fillna(0)\nevent_code.columns.name = None\nevent_code = event_code.add_prefix(\"x_\")\nevent_code.rename(columns={\"x_installation_id\":\"installation_id\"}, inplace=True)","12ffcfc3":"len(event_code), len(pd.unique(event_code.installation_id))","adc61362":"plt.figure(figsize=(30, 20))\nfor idx, val in enumerate(event_code.columns[1:]):\n    plt.subplot(6, 7, idx+1)\n    plt.hist(event_code[val])\n    plt.title(val)","4a7b003b":"plt.figure(figsize=(30, 20))\nfor idx, val in enumerate(event_code.columns[1:]):\n    plt.subplot(6, 7, idx+1)\n    plt.hist(np.log(event_code[val]+1))\n    plt.title(val)","aee60a68":"event_code.iloc[:, 1:] = np.log(event_code.iloc[:, 1:]+1)","6a468d73":"game_time = pd.DataFrame(df.groupby([\"installation_id\", \"game_session\"]).game_time.max()).reset_index()\ngame_time = game_time.groupby(\"installation_id\").mean().reset_index()","54ab1785":"len(game_time), len(pd.unique(game_time.installation_id))","7294f44c":"plt.figure(figsize=(40, 5))\nplt.subplot(1, 4, 1)\nplt.hist(game_time.game_time, bins=100)\nplt.subplot(1, 4, 2)\nplt.hist(np.log(game_time.game_time+1), bins=100)\nplt.subplot(1, 4, 3)\nplt.hist(np.log(np.cbrt(game_time.game_time+1)), bins=100)\nplt.subplot(1, 4, 4)\nplt.hist(np.log(np.cbrt(game_time.game_time+100)+1), bins=100)\nplt.show()","6903a050":"# game_time.iloc[:, 1:] = np.log(game_time.iloc[:, 1:]+1)\ngame_time.iloc[:, 1:] = np.log(np.cbrt(game_time.iloc[:, 1:]+100)+1)","213762c5":"session = pd.DataFrame(df.groupby([\"installation_id\"]).game_session.nunique()).reset_index()\nsession.columns.name = None","04915456":"len(session), len(pd.unique(session.installation_id))","2f84810a":"plt.figure(figsize=(20, 5))\nplt.subplot(1, 3, 1)\nplt.hist(session.game_session, bins=50)\nplt.subplot(1, 3, 2)\nplt.hist(np.log(session.game_session+10), bins=50)\nplt.subplot(1, 3, 3)\nplt.hist(np.cbrt(session.game_session+10), bins=50)\nplt.show()","57d67259":"session.iloc[:, 1:] = np.cbrt(session.iloc[:, 1:]+10)","18e3baf2":"types = df.groupby([\"installation_id\", \"type\"]).type.size().unstack().reset_index().fillna(0)\ntypes.columns.name = None","13655a6f":"plt.figure(figsize=(40, 7))\nfor idx, val in enumerate(types.columns[1:]):\n    plt.subplot(1, 4, idx+1)\n    plt.hist(types[val], bins=50)\n    plt.title(val)","0a68c51d":"plt.figure(figsize=(40, 7))\nfor idx, val in enumerate(types.columns[1:]):\n    plt.subplot(1, 4, idx+1)\n    plt.hist(np.log(types[val]+1), bins=50)\n    plt.title(val)","51758eae":"types.iloc[:, 1:] = np.log(types.iloc[:, 1:]+1)","e017cf36":"title = df.groupby([\"installation_id\", \"title\"]).size().unstack().reset_index().fillna(0)\ntitle.columns.name = None","22e7e6a8":"len(title), len(pd.unique(title.installation_id))","4086b66c":"plt.figure(figsize=(30, 20))\nfor idx, val in enumerate(title.columns[1:]):\n    plt.subplot(7, 7, idx+1)\n    plt.hist(title[val])\n    plt.title(val)","bdf86964":"plt.figure(figsize=(30, 20))\nfor idx, val in enumerate(title.columns[1:]):\n    plt.subplot(7, 7, idx+1)\n    plt.hist(np.log2(title[val]+1))\n    plt.title(val)","4f676781":"plt.figure(figsize=(30, 20))\nfor idx, val in enumerate(title.columns[1:]):\n    plt.subplot(7, 7, idx+1)\n    plt.hist(np.log(title[val]+1), bins=50)\n    plt.title(val)","badfb18e":"assessment = df[df.type==\"Assessment\"].groupby([\"installation_id\"]).title.last().reset_index()\n\nassessment['Assessment_1'] = 0\nassessment['Assessment_2'] = 0\nassessment['Assessment_3'] = 0\nassessment['Assessment_4'] = 0\nassessment['Assessment_5'] = 0\n\nassessment.loc[assessment.title=='Mushroom Sorter (Assessment)', 'Assessment_1'] = 1\nassessment.loc[assessment.title=='Cauldron Filler (Assessment)', 'Assessment_2'] = 1\nassessment.loc[assessment.title=='Chest Sorter (Assessment)', 'Assessment_3'] = 1\nassessment.loc[assessment.title=='Cart Balancer (Assessment)', 'Assessment_4'] = 1\nassessment.loc[assessment.title=='Bird Measurer (Assessment)', 'Assessment_5'] = 1\n\ndel assessment[\"title\"]","c99bb7ca":"len(assessment), len(pd.unique(assessment.installation_id))","9000baf8":"# label = pd.DataFrame(df.groupby([\"installation_id\"]).accuracy_group.last()).reset_index()","cd52d9a5":"accuracy = df.query(\"((event_code==2000) or (event_code==4100 and title!='Bird Measurer (Assessment)') or \\\n                     (event_code==4110 and title=='Bird Measurer (Assessment)')) and (type=='Assessment')\").reset_index(drop=True)\n\naccuracy[\"event_data_json\"] = accuracy[\"event_data\"].apply(lambda x: json.loads(x))\n\naccuracy[\"num_incorrect\"] = accuracy[\"event_data_json\"].apply(lambda x: (0 if x[\"correct\"] else 1) if \"correct\" in x  else 0)\naccuracy[\"num_correct\"] = accuracy[\"event_data_json\"].apply(lambda x: (1 if x[\"correct\"] else 0)  if \"correct\" in x  else 0)\n\naccuracy = accuracy.groupby([\"installation_id\", \"game_session\"]).agg(num_correct_pred = (\"num_correct\", \"max\"), num_incorrect_pred = (\"num_incorrect\", \"sum\"), ).reset_index()\naccuracy[\"accuracy_group_pred\"] = accuracy[\"num_incorrect_pred\"].apply(lambda x: 3 if x == 0 else (2 if x == 1 else 1)) * accuracy[\"num_correct_pred\"]\n\naccuracy = accuracy.groupby([\"installation_id\"]).last().reset_index()\naccuracy.drop(\"game_session\", axis=1, inplace=True)","39574ae8":"# _ = label[label.accuracy_group.isnull()].merge(accuracy, on=[\"installation_id\"], how=\"left\")\nlabel = accuracy.rename(columns={\"accuracy_group_pred\":\"accuracy_group\"})","e8213715":"_ = world.merge(event_code, how=\"left\", on=[\"installation_id\"])\n_ = _.merge(game_time, how=\"left\", on=[\"installation_id\"])\n_ = _.merge(session, how=\"left\", on=[\"installation_id\"])\n_ = _.merge(types, how=\"left\", on=[\"installation_id\"])\n_ = _.merge(title, how=\"left\", on=[\"installation_id\"])\n_ = _.merge(assessment, how=\"left\", on=[\"installation_id\"])\n_ = _.merge(label, how=\"left\", on=[\"installation_id\"])\n\ntrain_x_col = ['installation_id', \n               'CRYSTALCAVES', 'MAGMAPEAK', 'NONE', 'TREETOPCITY',\n               'x_2000', 'x_2010', 'x_2020', 'x_2025', 'x_2030', 'x_2035', 'x_2040',\n               'x_2050', 'x_2060', 'x_2070', 'x_2075', 'x_2080', 'x_2081', 'x_2083',\n               'x_3010', 'x_3020', 'x_3021', 'x_3110', 'x_3120', 'x_3121', 'x_4010',\n               'x_4020', 'x_4021', 'x_4022', 'x_4025', 'x_4030', 'x_4031', 'x_4035',\n               'x_4040', 'x_4045', 'x_4050', 'x_4070', 'x_4080', 'x_4090', 'x_4095',\n               'x_4100', 'x_4110', 'x_4220', 'x_4230', 'x_4235', 'x_5000', 'x_5010',\n               'game_session', 'game_time', \n               'Activity', 'Assessment', 'Clip', 'Game', \n               '12 Monkeys', 'Air Show', 'All Star Sorting', 'Balancing Act', \n               'Bird Measurer (Assessment)', 'Bottle Filler (Activity)', 'Bubble Bath', \n               'Bug Measurer (Activity)', 'Cart Balancer (Assessment)', 'Cauldron Filler (Assessment)',\n               'Chest Sorter (Assessment)', 'Chicken Balancer (Activity)', 'Chow Time',\n               'Costume Box', 'Crystal Caves - Level 1', 'Crystal Caves - Level 2',\n               'Crystal Caves - Level 3', 'Crystals Rule', 'Dino Dive', 'Dino Drink',\n               'Egg Dropper (Activity)', 'Fireworks (Activity)', 'Flower Waterer (Activity)', \n               'Happy Camel', 'Heavy, Heavier, Heaviest', 'Honey Cake', 'Leaf Leader', \n               'Lifting Heavy Things', 'Magma Peak - Level 1', 'Magma Peak - Level 2',\n               'Mushroom Sorter (Assessment)', 'Ordering Spheres', 'Pan Balance',\n               \"Pirate's Tale\", 'Rulers', 'Sandcastle Builder (Activity)', 'Scrub-A-Dub', \n               'Slop Problem', 'Treasure Map', 'Tree Top City - Level 1', \n               'Tree Top City - Level 2', 'Tree Top City - Level 3', \n               'Watering Hole (Activity)', 'Welcome to Lost Lagoon!', \n               'Assessment_1', 'Assessment_2', 'Assessment_3', 'Assessment_4', 'Assessment_5']\ntrain_y_col = [\"y_0\", \"y_1\", \"y_2\", \"y_3\"]","bf589d9c":"_[\"y_0\"] = 0\n_[\"y_1\"] = 0\n_[\"y_2\"] = 0\n_[\"y_3\"] = 0\n\n_.loc[_.accuracy_group==0, \"y_0\"] = 1\n_.loc[_.accuracy_group==1, \"y_1\"] = 1\n_.loc[_.accuracy_group==2, \"y_2\"] = 1\n_.loc[_.accuracy_group==3, \"y_3\"] = 1\n_.dropna(inplace=True)\n_ = _.reset_index(drop=True)\n_.head()","b816cd1e":"scaler = StandardScaler()\nscaler = MinMaxScaler()\ntrain_x = scaler.fit_transform(_.loc[:, train_x_col[1:]])\ntrain_y = _.loc[:, train_y_col]\ntrain_x[0]","74f17c9e":"model = keras.models.Sequential()\n\nmodel.add(keras.layers.Dense(512, activation=\"relu\", kernel_initializer=\"he_normal\"))\nmodel.add(keras.layers.Dropout(.3))\n\nmodel.add(keras.layers.Dense(256, activation=\"relu\", kernel_initializer=\"he_normal\"))\nmodel.add(keras.layers.Dropout(.3))\n\nmodel.add(keras.layers.Dense(128, activation=\"relu\", kernel_initializer=\"he_normal\"))\nmodel.add(keras.layers.Dropout(.3))\n\nmodel.add(keras.layers.Dense(64, activation=\"relu\", kernel_initializer=\"he_normal\"))\nmodel.add(keras.layers.Dropout(.3))\n\nmodel.add(keras.layers.Dense(32, activation=\"relu\", kernel_initializer=\"he_normal\"))\nmodel.add(keras.layers.Dropout(.3))\n\nmodel.add(keras.layers.Dense(16, activation=\"relu\", kernel_initializer=\"he_normal\"))\n\nmodel.add(keras.layers.Dense(4, activation=\"softmax\"))\n\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"RMSprop\", metrics=['categorical_accuracy'])","3b5fda6c":"# keras.backend.reset_uids()","bc481ac9":"model.fit(train_x, train_y.values, epochs=50, verbose=1, validation_split=.1, batch_size=10, shuffle=True)","996fc60d":"plt.figure(figsize=(40, 20))\nplt.subplot(2, 1, 1)\nplt.plot(model.history.history[\"loss\"], \"o-\", alpha=.4, label=\"loss\")\nplt.plot(model.history.history[\"val_loss\"], \"o-\", alpha=.4, label=\"val_loss\")\nplt.axhline(1, linestyle=\"--\", c=\"C2\")\nplt.legend()\nplt.subplot(2, 1, 2)\nplt.plot(model.history.history[\"categorical_accuracy\"], \"o-\", alpha=.4, label=\"categorical_accuracy\")\nplt.plot(model.history.history[\"val_categorical_accuracy\"], \"o-\", alpha=.4, label=\"val_categorical_accuracy\")\nplt.axhline(.7, linestyle=\"--\", c=\"C2\")\nplt.legend()\nplt.show()","a49d8ee1":"def quadratic_kappa(actuals, preds, N=4):\n    \"\"\"This function calculates the Quadratic Kappa Metric used for Evaluation in the PetFinder competition\n    at Kaggle. It returns the Quadratic Weighted Kappa metric score between the actual and the predicted values \n    of adoption rating.\"\"\"\n    w = np.zeros((N,N))\n    O = confusion_matrix(actuals, preds)\n    for i in range(len(w)): \n        for j in range(len(w)):\n            w[i][j] = float(((i-j)**2)\/(N-1)**2)\n    \n    act_hist=np.zeros([N])\n    for item in actuals: \n        act_hist[item]+=1\n    \n    pred_hist=np.zeros([N])\n    for item in preds: \n        pred_hist[item]+=1\n                         \n    E = np.outer(act_hist, pred_hist);\n    E = E\/E.sum();\n    O = O\/O.sum();\n    \n    num=0\n    den=0\n    for i in range(len(w)):\n        for j in range(len(w)):\n            num+=w[i][j]*O[i][j]\n            den+=w[i][j]*E[i][j]\n    return (1 - (num\/den))","6713077c":"_.accuracy_group = _.accuracy_group.astype(\"int\")","266ba067":"result = model.predict(train_x)\nquadratic_kappa(_.accuracy_group, result.argmax(axis=1))","142ac075":"# test\ndf = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/test.csv\")\n\n# world\nworld = df.groupby([\"installation_id\", \"world\"]).size().unstack().reset_index().fillna(0)\nworld.columns.name = None\nworld.iloc[:, 1:] = np.log(world.iloc[:, 1:]+1)\n\n# event_code\nevent_code = df.groupby([\"installation_id\", \"event_code\"]).size().unstack().reset_index().fillna(0)\nevent_code.columns.name = None\nevent_code = event_code.add_prefix(\"x_\")\nevent_code.rename(columns={\"x_installation_id\":\"installation_id\"}, inplace=True)\nevent_code.iloc[:, 1:] = np.log(event_code.iloc[:, 1:]+1)\n\n# game_time\ngame_time = pd.DataFrame(df.groupby([\"installation_id\", \"game_session\"]).game_time.max()).reset_index()\ngame_time = game_time.groupby(\"installation_id\").mean().reset_index()\n# game_time.iloc[:, 1:] = np.log(game_time.iloc[:, 1:]+1)\ngame_time.iloc[:, 1:] = np.log(np.cbrt(game_time.iloc[:, 1:]+100)+1)\n\n# session length\nsession = pd.DataFrame(df.groupby([\"installation_id\"]).game_session.nunique()).reset_index()\nsession.columns.name = None\nsession.iloc[:, 1:] = np.cbrt(session.iloc[:, 1:]+10)\n\n# type\ntypes = df.groupby([\"installation_id\", \"type\"]).type.size().unstack().reset_index().fillna(0)\ntypes.columns.name = None\ntypes.iloc[:, 1:] = np.log(types.iloc[:, 1:]+1)\n\n# title\ntitle = df.groupby([\"installation_id\", \"title\"]).size().unstack().reset_index().fillna(0)\ntitle.columns.name = None\n\n# last assessment\nassessment = df[df.type==\"Assessment\"].groupby([\"installation_id\"]).title.last().reset_index()\n\nassessment['Assessment_1'] = 0\nassessment['Assessment_2'] = 0\nassessment['Assessment_3'] = 0\nassessment['Assessment_4'] = 0\nassessment['Assessment_5'] = 0\n\nassessment.loc[assessment.title=='Mushroom Sorter (Assessment)', 'Assessment_1'] = 1\nassessment.loc[assessment.title=='Cauldron Filler (Assessment)', 'Assessment_2'] = 1\nassessment.loc[assessment.title=='Chest Sorter (Assessment)', 'Assessment_3'] = 1\nassessment.loc[assessment.title=='Cart Balancer (Assessment)', 'Assessment_4'] = 1\nassessment.loc[assessment.title=='Bird Measurer (Assessment)', 'Assessment_5'] = 1\n\ndel assessment[\"title\"]","0f1ae2e7":"_ = world.merge(event_code, how=\"left\", on=[\"installation_id\"])\n_ = _.merge(game_time, how=\"left\", on=[\"installation_id\"])\n_ = _.merge(session, how=\"left\", on=[\"installation_id\"])\n_ = _.merge(types, how=\"left\", on=[\"installation_id\"])\n_ = _.merge(title, how=\"left\", on=[\"installation_id\"])\n_ = _.merge(assessment, how=\"left\", on=[\"installation_id\"])\n\ntest_x = scaler.transform(_.loc[:, train_x_col[1:]])","f50664d4":"result = model.predict(test_x)","6a262062":"submission = pd.DataFrame({\"installation_id\":_.installation_id, \"accuracy_group\":result.argmax(axis=1)})\nsubmission.to_csv(\"submission.csv\", index=False)","4178c68d":"plt.hist(submission.accuracy_group)\nplt.show()","49301ffd":"## Label\n3: the assessment was solved on the first attempt  \n2: the assessment was solved on the second attempt  \n1: the assessment was solved after 3 or more attempts  \n0: the assessment was never solved","da6c68cb":"---\n# Feature Engineering","b556fb98":"## Game time","7ec02b4d":"---\n# Predict","945f439f":"## World","79351f55":"---\n# Modeling","d0208f95":"## Last Assessment","cc0010be":"## Event_count\nEvent count is not always monotonic","5140df0f":"---\n# One-Hot encoding \/ Scaling","ed01912b":"The end of notebook","26622420":"## Title","0fc634ca":"---\n# Merge all data set","01be78a1":"2019 Data Science Bowl\n===\nDamien Park  \n2019.11.14","d9583f70":"## Event_code","71e7e4ea":"## Type","fd3f1268":"## Session length"}}