{"cell_type":{"d8125828":"code","6dabb73d":"code","ef46c718":"code","b95291c8":"code","08877336":"code","8cc33867":"code","94a61151":"code","a081e247":"code","6e0fa206":"code","9d28ec60":"code","21ab1179":"code","f283f92f":"code","1beb134f":"markdown"},"source":{"d8125828":"\"\"\"\ncreate a CNN image classifier using tensorflow and keras with the fashion mnist dataset\n1. import tensorflow and keras libraries\n2. fix random seed for reproducibility\n3. load the fashion mnist dataset\n4. flatten the 28*28 images into a 784 vector for each image\n5. normalize the inputs from 0-255 to 0-1\n6. Use one hot encoding to convert the class labels to vectors\n7. split the data into training and test sets\n8. define the CNN model\n9. build the model\n10. compile the model\n11. fit the model\n12. evaluate the model\n13. print summary of the model\n\"\"\"","6dabb73d":"#1. import tensorflow and keras libraries\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.datasets import mnist","ef46c718":"# fix random seed for reproducibility\nseed = 7\n#np.random.seed(seed)\ntf.random.set_seed(seed)","b95291c8":"\n# load the fashion mnist dataset\n(train_images, train_labels), (test_images, test_labels) = keras.datasets.fashion_mnist.load_data()","08877336":"# flatten 28*28 images to a 784 vector for each image\ntrain_images = train_images.reshape(train_images.shape[0], 28, 28, 1)\ntest_images = test_images.reshape(test_images.shape[0], 28, 28, 1)","8cc33867":"# normalize inputs from 0-255 to 0-1\ntrain_images = train_images \/ 255\ntest_images = test_images \/ 255","94a61151":"# one hot encode outputs\ntrain_labels = keras.utils.to_categorical(train_labels)\ntest_labels = keras.utils.to_categorical(test_labels)","a081e247":"# build the model\nmodel = keras.Sequential([\n    keras.layers.Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)),\n    keras.layers.MaxPooling2D(pool_size=(2, 2)),\n    keras.layers.Conv2D(64, kernel_size=(3, 3), activation='relu'),\n    keras.layers.MaxPooling2D(pool_size=(2, 2)),\n    keras.layers.Flatten(),\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.Dense(10, activation='softmax')\n    ])","6e0fa206":"# create model\nmodel.compile(optimizer='adam',\n                loss='categorical_crossentropy',\n                metrics=['accuracy'])\n","9d28ec60":"# Fit the model\nmodel.fit(train_images, train_labels, epochs=50)","21ab1179":"# Final evaluation of the model\ntest_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)\nprint('\\nTest accuracy:', test_acc)","f283f92f":"# print model summary\nmodel.summary()","1beb134f":"Conv2d: \nApplies a 2D convolution over an input signal composed of several input planes.\nParameters\nin_channels (int) \u2013 Number of channels in the input image\nout_channels (int) \u2013 Number of channels produced by the convolution\nkernel_size (int or tuple) \u2013 Size of the convolving kernel\n\nMaxpool2d: \nParameters: kernel_size \u2013 the size of the window to take a max over"}}