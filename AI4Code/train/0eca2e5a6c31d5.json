{"cell_type":{"d3a13bbe":"code","38af3061":"code","f8988af8":"code","01e900c1":"code","34c2a607":"code","5e423f3c":"code","38665d8a":"code","6b111822":"code","748bab72":"code","5f742011":"code","fac6005e":"code","b9ff8b7f":"code","835db92d":"code","5ef858b5":"code","9e6585c0":"code","8b1e07c6":"code","958b2422":"code","280cac3e":"code","ccfa78dd":"code","87a0d7b4":"code","a6179744":"code","10d9d1d4":"code","8c35962d":"code","74792e5a":"code","8d7ba951":"code","69b354a9":"code","bd5821ca":"code","b3a13f64":"markdown","466bf9bb":"markdown","43741f10":"markdown","44f1b05e":"markdown","5482c092":"markdown","eba18f6b":"markdown","774ee471":"markdown"},"source":{"d3a13bbe":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom icecream import ic","38af3061":"p_train = '..\/input\/titanic\/train.csv'\np_test = '..\/input\/titanic\/test.csv'","f8988af8":"df = pd.read_csv(p_train)\ndf_test_or = pd.read_csv(p_test)","01e900c1":"df_test.isna().sum()","34c2a607":"df_prep = pd.concat((df,df_test_or),axis=0,ignore_index=True)\n\ntrain_ind = df.index\ntest_ind = list(range(len(df.index),len(df_prep.index)))\n\ndf_prep[\"tra_tes\"] = [1 if x <= len(train_ind) else 0 for x in range(len(df_prep.index))]","5e423f3c":"sum(df_prep[\"tra_tes\"]==1)","38665d8a":"def str_low(x):\n    x.columns = map(lambda a: str.lower(a),x.columns)\n    return x","6b111822":"def name(x,ind=0):\n    x[\"fam\"] = [a.split(\",\",1)[ind] for a in x[\"name\"]]\n    \n    return x","748bab72":"def marriage(x):\n    nom = [a.split(\",\",1)[1] for a in x[\"name\"]]\n    x[\"marr\"] = [0 if \"Mr\" in a else 2*(\"Miss.\" in a)+1*(\"Mrs.\" in a) for a in nom]\n    x.drop(columns=[\"name\"],inplace=True)\n    return x","5f742011":"def fact(x):\n    for i in x.columns:\n        if x[i].dtype == object:\n            x[i] = pd.factorize(x[i])[0]\n        else:\n            continue\n    return x","fac6005e":"def nann(x):\n    return x.applymap(lambda a: np.nan if a==-1 else a)","b9ff8b7f":"def dropn(x):\n    out = x.dropna(axis=0,how=\"all\",inplace=False)\n    sav = out\n    out = out.dropna(axis=1,how=\"any\",inplace=False)\n    out[\"age\"] = sav[\"age\"]\n    out[\"survived\"] = sav[\"survived\"]\n    out.drop(columns=[\"passengerid\",\"ticket\"],inplace=True)\n    return out","835db92d":"df_acl = df_prep\ndf_clean = (df_acl.\n            pipe(str_low).\n            pipe(name).\n            pipe(marriage).\n            pipe(fact).\n            pipe(nann).\n            pipe(dropn)\n           )\n\ndf_train = df_clean[df_clean[\"tra_tes\"]==1]\ndf_test = df_clean[df_clean[\"tra_tes\"]==0]\n\ndf_train.interpolate(inplace=True)\ndf_test.interpolate(inplace=True)\n\ndf_train.drop(columns=[\"tra_tes\"],inplace=True)\ndf_test.drop(columns=[\"tra_tes\"],inplace=True)","5ef858b5":"from pyitlib import discrete_random_variable as drv","9e6585c0":"import itertools as itr\n\ndf_out = pd.DataFrame(0,columns=[x for x in df_train.columns if not x in [\"survived\",\"fam\"]],index=[x for x in df_train.columns if not x in [\"survived\",\"fam\"]])\nfor i,j in itr.product(df_out.columns,df_out.columns):\n    ic(i,j)\n    a = df_train[\"survived\"]\n    b = df_train[i]\n    c = df_train[j]\n    if i == j:\n        df_out.loc[i,j] = 0.8\n    else:\n        df_out.loc[i,j] += drv.information_mutual_conditional(a,b,c,cartesian_product=False)\n    \nsns.heatmap(df_out)","8b1e07c6":"min(df_out[\"pclass\"])","958b2422":"df_out.sort_index(1,key=lambda a:[min(df_out[x]) for x in a],ascending=True)","280cac3e":"#\u00b5df_c.drop(labels=[\"passengerid\",\"name\"],axis=1,inplace=True)\ndf_train.sort_index(1,key= lambda a: [drv.information_mutual(df_train[x],df_train[\"survived\"]) for x in a],ascending=False)\ndf_test = df_test.loc[:,df_train.columns]","ccfa78dd":"from sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score\n\n\nskf = StratifiedKFold(n_splits=5)\n\n\nX = df_train.loc[:,df_out.columns].to_numpy()\ny = df_train.loc[:,\"survived\"].to_numpy()\n\nsc = np.zeros((3,X.shape[1]))\n\nfor i in range(X.shape[1]):\n    for (train,test) in skf.split(X[:,:i+1],y):\n        X_tr = X[train,:i+1]\n        X_te = X[test,:i+1]\n        y_tr = y[train]\n        y_te = y[test]\n        \n        \n        lr = LogisticRegression().fit(X_tr ,y_tr)\n        clf = SVC(class_weight=\"balanced\").fit(X_tr ,y_tr)\n        rf = RandomForestClassifier().fit(X_tr,y_tr)\n    \n        sc[0,i] += balanced_accuracy_score(y_te,lr.predict(X_te))\/5\n        sc[1,i] += balanced_accuracy_score(y_te,clf.predict(X_te))\/5\n        sc[2,i] += balanced_accuracy_score(y_te,rf.predict(X_te))\/5\n    print(\"reg_log\",sc[0,i])\n    print(\"svm\",sc[1,i])\n    print(\"rf\",sc[2,i])\n    \nplt.plot(sc.T,label=[\"reg\",\"svm\",\"rf\"])\nplt.legend()","87a0d7b4":"lr = LogisticRegression().fit(X[:,:5] ,y)\nclf = SVC(class_weight=\"balanced\").fit(X[:,:5] ,y)\nrf = RandomForestClassifier().fit(X[:,:5] ,y)","a6179744":"gender_sub = '..\/input\/titanic\/gender_submission.csv'\ndf_gen = pd.read_csv(gender_sub)\nprint(len(df_gen))\nprint(len(df_test))","10d9d1d4":"df_out.columns","8c35962d":"ind_test = [x-min(df_test.index)+1 for x in df_test.index]","74792e5a":"df_test.loc[:,df_out.columns[:4]].to_numpy()","8d7ba951":"print(balanced_accuracy_score(df_gen.iloc[ind_test,:].to_numpy()[:,1],lr.predict(df_test.loc[:,df_out.columns[:5]].to_numpy())))\nprint(balanced_accuracy_score(df_gen.iloc[ind_test,:].to_numpy()[:,1],clf.predict(df_test.loc[:,df_out.columns[:5]].to_numpy())))\nprint(balanced_accuracy_score(df_gen.iloc[ind_test,:].to_numpy()[:,1],rf.predict(df_test.loc[:,df_out.columns[:5]].to_numpy())))","69b354a9":"df_fin.to_numpy().shape\nprint(clf.predict(df_test.loc[:,df_out.columns[:5]].to_numpy()).shape)","bd5821ca":"df_fin = pd.DataFrame(0,index=df_test_or.iloc[:,0],columns=[\"Survived\"])\nprint(df_fin.columns)\nprint(df_fin.index)\nprint(len(clf.predict(df_test.loc[:,df_out.columns[:5]].to_numpy())))\ndf_fin[\"Survived\"] = [1]+[int(x) for x in clf.predict(df_test.loc[:,df_out.columns[:5]])]\ndf_fin.to_csv(\"pred_titanic.csv\")","b3a13f64":"## lowering strings","466bf9bb":"# Feature reduction using the train_set","43741f10":"## Spliting names and getting informations from it","44f1b05e":"# Predictions on test set and comparison with the gender_submission dataset","5482c092":"# Opening datasets","eba18f6b":"# Librairies","774ee471":"# Preprocessing"}}