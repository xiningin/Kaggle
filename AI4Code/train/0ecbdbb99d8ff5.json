{"cell_type":{"ec5a9a27":"code","2620ba11":"code","40275eba":"code","8da8e882":"code","9af7ca7f":"code","8d378bbf":"code","d8f3f6e5":"code","8a444965":"code","566de66c":"code","9f6430f8":"code","1dfbc010":"code","89d5392b":"code","52a573f9":"code","348dfe73":"code","8cab1def":"code","13bd09a5":"code","e97ae3eb":"code","acf0857a":"code","29e95e86":"code","d85f3bd2":"code","771a86ae":"code","e58ae1f8":"code","58515aa8":"code","6b56b478":"code","b7f33db2":"code","90ac0483":"code","e7091d3b":"code","797c428a":"code","836c5ab5":"code","fb366314":"code","bff2f915":"code","aaef2e28":"code","2dff3c17":"code","a4a3b1a4":"code","aed55e24":"code","a994ccc9":"code","9e4fe197":"code","8f19e092":"code","f6e69c1a":"code","afd29502":"code","4bbf132d":"code","da0236aa":"code","cdd35743":"markdown","977e85d8":"markdown","376cd89e":"markdown","f238f291":"markdown","ac39619a":"markdown","e762d75b":"markdown","386c4e7f":"markdown","d0c445b8":"markdown","1e3c6b4a":"markdown","acc23844":"markdown","4ee15d84":"markdown","dc0c3fa5":"markdown","2b0eac70":"markdown","5c0b0d0c":"markdown","eaf3e21d":"markdown","a920c252":"markdown","fa08d010":"markdown","69a8c16c":"markdown","bd008513":"markdown","5c18aad7":"markdown","3af095d4":"markdown","6981260c":"markdown","601dec94":"markdown","7a0d2579":"markdown","6e591953":"markdown","d0590bc9":"markdown","483f2837":"markdown","f85a658f":"markdown","0055603c":"markdown","fe002783":"markdown"},"source":{"ec5a9a27":"import numpy as np \nimport pandas as pd \nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score\n\nimport optuna","2620ba11":"! pip install openpyxl","40275eba":"data = pd.read_excel(r'..\/input\/insaid\/Churn.xlsx')","8da8e882":"data.shape","9af7ca7f":"data.head()","8d378bbf":"data.nunique()","d8f3f6e5":"data.dtypes","8a444965":"fig = go.Figure(data=[go.Pie(labels=data.gender, hole=.4)])\nfig.add_annotation(text='gender',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","566de66c":"fig = go.Figure(data=[go.Pie(labels=data.Partner, hole=.4)])\nfig.add_annotation(text='Partner',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","9f6430f8":"fig = go.Figure(data=[go.Pie(labels=data.Dependents, hole=.4)])\nfig.add_annotation(text='Dependents',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","1dfbc010":"fig = go.Figure(data=[go.Pie(labels=data.PhoneService, hole=.4)])\nfig.add_annotation(text='PhoneService',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","89d5392b":"fig = go.Figure(data=[go.Pie(labels=data.MultipleLines, hole=.4)])\nfig.add_annotation(text='MultipleLines',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","52a573f9":"fig = go.Figure(data=[go.Pie(labels=data.InternetService, hole=.4)])\nfig.add_annotation(text='InternetService',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","348dfe73":"fig = go.Figure(data=[go.Pie(labels=data.OnlineSecurity, hole=.4)])\nfig.add_annotation(text='OnlineSecurity',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","8cab1def":"fig = go.Figure(data=[go.Pie(labels=data.OnlineBackup, hole=.4)])\nfig.add_annotation(text='OnlineBackup',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","13bd09a5":"fig = go.Figure(data=[go.Pie(labels=data.DeviceProtection, hole=.4)])\nfig.add_annotation(text='DeviceProtection',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","e97ae3eb":"fig = go.Figure(data=[go.Pie(labels=data.TechSupport, hole=.4)])\nfig.add_annotation(text='TechSupport',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","acf0857a":"fig = go.Figure(data=[go.Pie(labels=data.StreamingTV, hole=.4)])\nfig.add_annotation(text='StreamingTV',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","29e95e86":"fig = go.Figure(data=[go.Pie(labels=data.StreamingMovies, hole=.4)])\nfig.add_annotation(text='StreamingMovies',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","d85f3bd2":"fig = go.Figure(data=[go.Pie(labels=data.Contract, hole=.4)])\nfig.add_annotation(text='Contract',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","771a86ae":"fig = go.Figure(data=[go.Pie(labels=data.PaperlessBilling, hole=.4)])\nfig.add_annotation(text='PaperlessBilling',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","e58ae1f8":"fig = go.Figure(data=[go.Pie(labels=data.PaymentMethod, hole=.4)])\nfig.add_annotation(text='PaymentMethod',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","58515aa8":"fig = go.Figure(data=[go.Pie(labels=data.Churn, hole=.4)])\nfig.add_annotation(text='Churn',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.update_layout(\n    font_family='monospace',\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","6b56b478":"data.Churn.replace({'No':0,\n                   'Yes':1},inplace = True)","b7f33db2":"data.isnull().sum()","90ac0483":"data.dropna(inplace=True)","e7091d3b":"# drop unique value feature\ndata.drop('customerID',axis=1,inplace=True)","797c428a":"fig = px.histogram(data,x='MonthlyCharges',template='plotly_white',\n                  marginal='box',opacity=0.7,nbins=100,color_discrete_sequence=['#FECB52'],\n                  barmode='group',histfunc='count')\n\nfig.update_layout(\n    font_family='monospace',\n    title=dict(text='MonthlyCharges Distribution',x=0.53,y=0.95),\n    xaxis_title_text='MonthlyCharges',\n    yaxis_title_text='Count',\n    bargap=0.3,\n)\nfig.show()","836c5ab5":"fig = px.histogram(data,x='TotalCharges',template='plotly_white',\n                  marginal='box',opacity=0.7,nbins=100,color_discrete_sequence=['#FECB52'],\n                  barmode='group',histfunc='count')\n\nfig.update_layout(\n    font_family='monospace',\n    title=dict(text='TotalCharges Distribution',x=0.53,y=0.95),\n    xaxis_title_text='TotalCharges',\n    yaxis_title_text='Count',\n    bargap=0.3,\n)\nfig.show()","fb366314":"fig = px.histogram(data,x='tenure',template='plotly_white',\n                  marginal='box',opacity=0.7,nbins=100,color_discrete_sequence=['#FECB52'],\n                  barmode='group',histfunc='count')\n\nfig.update_layout(\n    font_family='monospace',\n    title=dict(text='tenure Distribution',x=0.53,y=0.95),\n    xaxis_title_text='tenure',\n    yaxis_title_text='Count',\n    bargap=0.3,\n)\nfig.show()","bff2f915":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nvar = ['gender','Partner','Dependents','PhoneService','MultipleLines','InternetService','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','Contract','PaperlessBilling','PaymentMethod']\nfor i in var:\n    data[i] = le.fit_transform(data[i])","aaef2e28":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\ndef calc_vif(X):\n\n    # Calculating VIF\n    vif = pd.DataFrame()\n    vif[\"variables\"] = X.columns\n    vif[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n\n    return(vif)","2dff3c17":"X = data.iloc[:,:-1]\ncalc_vif(X)","a4a3b1a4":"X = data.drop(['MonthlyCharges','tenure'],axis=1)\ncalc_vif(X)","aed55e24":"x = X.drop('Churn',axis=1)\ny = X['Churn']","a994ccc9":"def fit_gbc(trial, x_train, y_train, x_test, y_test):\n    params = {\n        'n_estimators' : (trial.suggest_int('n_estimators', 200,2000,100)),\n        'max_depth' : (trial.suggest_int('max_depth', 4, 10)),\n        'learning_rate' : trial.suggest_loguniform('learning_rate', 0.008, 0.8),\n        }\n    model = GradientBoostingClassifier(**params, random_state=2021)\n    model.fit(x_train, y_train)\n    \n    y_train_pred = model.predict(x_train)\n    \n    y_test_pred = model.predict(x_test)\n    \n    log = {\n        \"train accuracy\": accuracy_score(y_train, y_train_pred),\n        \"valid accuracy\": accuracy_score(y_test, y_test_pred)\n    }\n    \n    return model, log","9e4fe197":"def objective(trial):\n    accuracy = 0\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.56)\n    model, log = fit_gbc(trial, x_train, y_train, x_test, y_test)\n    accuracy += log['valid accuracy']\n        \n    return accuracy","8f19e092":"gbc_params = {'n_estimators': 1700, \n              'max_depth': 4, \n              'learning_rate': 0.009751953178333802}","f6e69c1a":"def cross_val(X, y, model, params, folds =5):\n\n    kf = KFold(n_splits=folds, shuffle=True, random_state=21)\n    for fold, (train_idx, test_idx) in enumerate(kf.split(X, y)):\n        print(f\"Fold: {fold}\")\n        x_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n        x_test, y_test = X.iloc[test_idx], y.iloc[test_idx]\n\n        alg = model(**params)\n        alg.fit(x_train, y_train,)\n        pred = alg.predict(x_test)\n        accuracy = accuracy_score(y_test, pred)\n        print(f\" accuracy_score: {accuracy}\")\n        print(\"-\"*50)\n    \n    return alg","afd29502":"gbc = cross_val(x, y, GradientBoostingClassifier, gbc_params)","4bbf132d":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef plot_feature_importance(importance,names,model_type):\n\n    #Create arrays from feature importance and feature names\n    feature_importance = np.array(importance)\n    feature_names = np.array(names)\n\n    #Create a DataFrame using a Dictionary\n    data={'feature_names':feature_names,'feature_importance':feature_importance}\n    fi_df = pd.DataFrame(data)\n\n    #Sort the DataFrame in order decreasing feature importance\n    fi_df.sort_values(by=['feature_importance'], ascending=False,inplace=True)\n\n    #Define size of bar plot\n    plt.figure(figsize=(10,8))\n    #Plot Searborn bar chart\n    sns.barplot(x=fi_df['feature_importance'], y=fi_df['feature_names'])\n    #Add chart labels\n    plt.title(model_type + 'FEATURE IMPORTANCE')\n    plt.xlabel('FEATURE IMPORTANCE')\n    plt.ylabel('FEATURE NAMES')","da0236aa":"plot_feature_importance(gbc.feature_importances_,x.columns,'Gradient Boosting Classifier ')","cdd35743":"### **Building Model**","977e85d8":"* **VIF (Variable Inflation Factors)**\n\nfor multicollinearity detection","376cd89e":"* **PaymentMethod:**","f238f291":"* best params recovered from optuna:","ac39619a":"* **TotalCharges:**","e762d75b":"* **PhoneService:**","386c4e7f":"* **DeviceProtection:**","d0c445b8":"* **Contract:**","1e3c6b4a":"* **OnlineBackup:**","acc23844":"* **tenure:**","4ee15d84":"* **gender:**","dc0c3fa5":"* **InternetService:**","2b0eac70":"* **Dependents:**","5c0b0d0c":"#### **if you like this notebook plz upvote it**\n#### **Thank you!**","eaf3e21d":"* **StreamingTV:**","a920c252":"* **StreamingMovies:**","fa08d010":"* **Partner:**","69a8c16c":"* **Fixing Multicollinearity**\n\n\nDropping one of the correlated features will help in bringing down the multicollinearity between correlated features:\n\n","bd008513":"### **Data Cleaning**","5c18aad7":"### **Preprocessing data**","3af095d4":"* **PaperlessBilling:**","6981260c":"### **Numerical features**","601dec94":"* **Churn:**","7a0d2579":"* **OnlineSecurity:**","6e591953":"* **MultipleLines:**","d0590bc9":"* **MonthlyCharges:**","483f2837":"We can see here that the \u2018tenure\u2019, 'PhoneService', 'MonthlyCharges' and \u2018TotalCharges\u2019 have a high VIF value, meaning they can be predicted by other independent variables in the dataset.","f85a658f":"* **Optuna**","0055603c":"### **Categorical feature:**","fe002783":"* **TechSupport:**"}}