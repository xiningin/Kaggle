{"cell_type":{"eedfa295":"code","086215c1":"code","604ebe9d":"code","8e55e106":"code","c4650a7d":"code","ad068163":"code","905507cc":"code","4a8b4120":"code","38750eb1":"code","987ac917":"code","d856b747":"code","004c0378":"code","0ce19af5":"code","04cc0af6":"markdown","7c7f0c91":"markdown","8ed50fb7":"markdown","368e9929":"markdown","fe597b3b":"markdown","93cadf20":"markdown","f13993ac":"markdown","1d5c129b":"markdown"},"source":{"eedfa295":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","086215c1":"import matplotlib.pyplot as plt\nimport keras\nimport numpy as np\nimport pandas as pd\nimport sys\nimport os\n%matplotlib inline","604ebe9d":"train_dir = '\/kaggle\/input\/10-monkey-species\/training\/training\/'\nvalidation_dir = '\/kaggle\/input\/10-monkey-species\/validation\/validation\/'\nvalid_dir = '\/kaggle\/input\/10-monkey-species\/validation\/validation\/'\nlabel_files = '\/kaggle\/input\/10-monkey-species\/monkey_labels.txt'\nlabels = pd.read_csv(label_files, header=0)\nlabels.head(10)","8e55e106":"height = 128\nwidth = 128\nchannals = 3\nbatch_sizes = 64\nnum_classes = 10\ntrain_data_generator = keras.preprocessing.image.ImageDataGenerator(rescale=1.0\/255, \n                                                                    rotation_range=40, \n                                                                    width_shift_range=0.2, \n                                                                    height_shift_range=0.2,\n                                                                    shear_range=0.2,\n                                                                    zoom_range=0.2,\n                                                                    horizontal_flip=True,\n                                                                    fill_mode='nearest')\ntrain_generator = train_data_generator.flow_from_directory(train_dir, target_size = (height, width), batch_size = batch_sizes, seed = 7, shuffle = True, class_mode = 'categorical')\nvalidation_data_generator = keras.preprocessing.image.ImageDataGenerator(rescale=1.0\/255 )\nvalidation_generator = validation_data_generator.flow_from_directory(validation_dir, target_size = (height, width), batch_size = batch_sizes,\n                                                                    seed = 7, class_mode = 'categorical', shuffle = False)","c4650a7d":"train_num = train_generator.samples\nvalidation_num = validation_generator.samples","ad068163":"model  = keras.models.Sequential()\nmodel.add(keras.layers.Conv2D(filters = 32, kernel_size=3, padding='same', activation='relu', input_shape = [height, width,channals]))\nmodel.add(keras.layers.Conv2D(filters = 32, kernel_size=3, padding='same', activation='relu'))\nmodel.add(keras.layers.MaxPool2D(pool_size = 2))\n\nmodel.add(keras.layers.Conv2D(filters = 64, kernel_size=3, padding='same', activation='relu'))\nmodel.add(keras.layers.Conv2D(filters = 64, kernel_size=3, padding='same', activation='relu'))\nmodel.add(keras.layers.MaxPool2D(pool_size = 2))\n\nmodel.add(keras.layers.Conv2D(filters = 128, kernel_size=3, padding='same', activation='relu'))\nmodel.add(keras.layers.Conv2D(filters = 128, kernel_size=3, padding='same', activation='relu'))\nmodel.add(keras.layers.MaxPool2D(pool_size = 2))\n\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(128, activation='relu'))\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()","905507cc":"epoch = 100\nhistory = model.fit_generator(train_generator, \n                              steps_per_epoch=train_num\/\/batch_sizes, \n                              epochs=epoch, \n                              validation_data=validation_generator,\n                              validation_steps=valid_num\/\/batch_sizes)","4a8b4120":"def plot_learning_curve(history, label, minIndex, MaxIndex):\n    data = {}\n    data[label] = history.history[label]\n    data['val_' + label] = history.history['val_'+label]\n    pd.DataFrame(data).plot(figsize=(10, 5))\n    plt.ylim(minIndex, MaxIndex)\n    plt.show()\n    \nplot_learning_curve(history, 'accuracy', 0, 1)\nplot_learning_curve(history, 'loss', 0., 2.5)","38750eb1":"height = 224\nwidth = 224\nchannals = 3\nbatch_sizes = 24\nnum_classes = 10\ntrain_data_generator = keras.preprocessing.image.ImageDataGenerator(preprocessing_function=keras.applications.resnet50.preprocess_input,\n                                                                    rotation_range=40, width_shift_range=0.2, height_shift_range=0.2,\n                                                                    shear_range=0.2, zoom_range=0.2, horizontal_flip=True, fill_mode='nearest')\ntrain_generator = train_data_generator.flow_from_directory(train_dir, target_size=(height, width), batch_size = batch_sizes, seed = 7,shuffle = True, class_mode='categorical')\nvalidation_data_generator = keras.preprocessing.image.ImageDataGenerator(preprocessing_function=keras.applications.resnet50.preprocess_input)\nvalidation_generator = validation_data_generator.flow_from_directory(validation_dir, target_size=(height, width), batch_size=batch_sizes,shuffle = False, seed = 7, class_mode='categorical')","987ac917":"train_num = train_generator.samples\nvalid_num  = valid_generator.samples\nprint(train_num, valid_num)","d856b747":"resnet50_fine_tune = keras.models.Sequential()\nresnet50_fine_tune.add(keras.applications.ResNet50(include_top = False,\n                                                  pooling = 'avg',\n                                                  weights = 'imagenet'))\nresnet50_fine_tune.add(keras.layers.Dense(num_classes, activation = 'softmax'))\nresnet50_fine_tune.layers[0].trainable = False\n\nresnet50_fine_tune.compile(loss=\"categorical_crossentropy\",\n             optimizer=\"sgd\", metrics=['accuracy'])\nresnet50_fine_tune.summary()","004c0378":"epochs = 50\nbatch_size = 24\nhistory = resnet50_fine_tune.fit_generator(train_generator,\n                                           steps_per_epoch = train_num \/\/ batch_size,\n                                           epochs = epochs,\n                                           validation_data = validation_generator,\n                                           validation_steps=valid_num \/\/ batch_size )","0ce19af5":"plot_learning_curve(history, 'accuracy', 0, 1)\nplot_learning_curve(history, 'loss', 0., 2)","04cc0af6":"mother fucker\uff0cthe performance is unstable","7c7f0c91":"next function can get x_train, y_train, you can call function 'next'  to get next batch ","8ed50fb7":"#### import dataset","368e9929":"'include_top = False' can forbidden lastest layers, in resnet50, the lastest layers is an output layer with 1000 categories, but 10 in this case.<br>\nWhen we shut down the lastest layer, the last but one layer output shape is 4D, we should apply this parameter to transform to 2D.<br>\n","fe597b3b":"### reading pictures\nkeras.preprocessing.image.ImageDataGenerator is a tool to import pictures. <br>\nFist parameter \u2018rescale\u2019 means each pixel multiple rescale. Second parameter 'rotation_range' rotates each picture randomly range o to 0.2,.<br>\n'width_shift_range' and 'height_shift_range' can shift the picture along with x axis or y axis randomly range 0 to 0.2.<br>\n'shear_range' will shear your picture randomly range 0 to 0.2.<br>\nIf you want to have your picture upside down,set 'horizontal_flip=True'. <br>\nWhen you padding picture,set 'fill_mode' and indicate your model to fill.<br>\n'class_mode = categorical' is applying on labels, it means y_labels will be coded after one-hot.","93cadf20":"> #### Transfer learning\nLet's try resnet50 in keras.application","f13993ac":"#### import datasets","1d5c129b":"By contrast, we pay less time for better returns."}}