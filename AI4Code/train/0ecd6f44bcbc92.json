{"cell_type":{"f3a4f3f9":"code","11d419f3":"code","a8feafad":"code","e2bf766e":"code","85a4e748":"code","8f166962":"code","2b85ffe5":"code","ccad423e":"code","be555979":"code","85a691c2":"code","9d42cc32":"code","fdfca28c":"code","ba1e7671":"code","028fde15":"code","2d1f9688":"code","7cd0926a":"code","29ba605c":"code","68cdc6c9":"code","c80e2c59":"code","4db5dc9c":"code","a1d8034c":"code","2e5d6517":"code","8afdb7cd":"code","7bb25aad":"code","4e9a6391":"code","8a28d44e":"code","45ef4a49":"code","caade834":"code","3e13286b":"code","27a074b4":"code","275fee4a":"markdown","1875f5eb":"markdown","8529dbf9":"markdown","cb3e8da2":"markdown","67d40ce1":"markdown","94ffa61a":"markdown","5c1656b5":"markdown","43e21c05":"markdown","4955fbab":"markdown","e7f7b529":"markdown","402bf03b":"markdown"},"source":{"f3a4f3f9":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport scipy.stats as st\nimport seaborn as sns\nimport os, gc, re, warnings\nfrom wordcloud import WordCloud, STOPWORDS\n# from IPython.html import widgets\n# from IPython.display import display\nwarnings.filterwarnings(\"ignore\")","11d419f3":"plays = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/plays.csv')\nplays['scoreDiff'] = abs(plays.preSnapHomeScore-plays.preSnapVisitorScore)\nplays.head(2)","a8feafad":"fig, ((ax1,ax2),(ax3,ax4),(ax5,ax6),(ax7,ax8), (ax9,ax10)) = plt.subplots(5,2, figsize=(15,20))\nplays.kickLength.plot.hist(bins=50, title='Kick length', grid=True, ax=ax1)\nplays.loc[plays.kickReturnYardage.notnull()]['kickReturnYardage'].plot.hist(bins=50, title='Return result (yds)', grid=True, ax=ax2)\nplays.playResult.plot.hist(bins=50, title='Play result (yds)', grid=True, ax=ax3)\nplays.yardsToGo.plot.hist(bins=20, title='Yards to go at play start', grid=True, ax=ax4)\nplays.penaltyYards.plot.hist(title='Penalty yards', grid=True, ax=ax5)\nplays.penaltyCodes.value_counts()[:10].plot.bar(title='Penalty codes (top 10)', ax=ax6)\nplays.specialTeamsPlayType.value_counts().plot.bar(title='Play type', ax=ax7)\nplays.specialTeamsResult.value_counts().plot.bar(title='Play result breakdown', ax=ax8)\nplays.loc[plays.passResult.notnull()]['passResult'].value_counts().plot.bar(title='Pass result breakdown', ax=ax9)\nplays.yardlineNumber.plot.hist(bins=20, title='Where plays happen (yardline #)', grid=True, ax=ax10)\nplt.tight_layout()","e2bf766e":"fig, (ax1,ax2) = plt.subplots(1,2, figsize=(15,15))  \nplays.down.value_counts().plot.pie(title='Down when plays happen', ax=ax1)\nplays.quarter.value_counts().plot.pie(title='Quarter when plays happen', ax=ax2)\nplt.tight_layout()","85a4e748":"comment_words = ''\nstopwords = set(STOPWORDS)\n \n# iterate through the df\nfor val in plays.playDescription:\n     \n    val = str(val)\n \n    tokens = val.split()\n     \n    for i in range(len(tokens)):\n        tokens[i] = tokens[i].lower()\n     \n    comment_words += \" \".join(tokens)+\" \"\n \nwordcloud = WordCloud(width = 800, height = 800,\n                background_color ='white',\n                stopwords = stopwords,\n                min_font_size = 10).generate(comment_words)\n \n# plot WordCloud                       \nplt.figure(figsize = (8, 8), facecolor = None)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Play description word cloud')\nplt.tight_layout(pad = 0)\n \nplt.show()","8f166962":"scout = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv')\nscout.head(2)","2b85ffe5":"fig, ((ax1,ax2,ax3), (ax4,ax5,ax6)) = plt.subplots(2,3, figsize=(15,8))  \nscout.hangTime.plot.hist(bins=20, grid=True, title='Hangtime (seconds)', ax=ax1)\nscout.loc[scout.kickType.notnull()]['kickType'].value_counts().plot.bar(title='Kick type', ax=ax2)\nscout.loc[scout.kickDirectionActual.notnull()]['kickDirectionActual'].value_counts().plot.bar(title='Kick direction', ax=ax3)\nscout.loc[scout.snapTime.notnull()]['snapTime'].plot.hist(bins=20, grid=True, title='Snap time', ax=ax4)\nscout.loc[scout.kickContactType.notnull()]['kickContactType'].value_counts().plot.bar(title='Kick contact type', ax=ax5)\nscout.loc[scout.returnDirectionActual.notnull()]['returnDirectionActual'].value_counts().plot.bar(title='Return direction', ax=ax6)\nplt.tight_layout()","ccad423e":"# merge scout and plays\nplay_scout = pd.merge(plays, scout, how='left', on=['playId','gameId'])\n# select only numeric columns\nnum_play_scout = play_scout.select_dtypes(include=['int','float'])\n\nprint('Numeric columns:')\nfor x in num_play_scout.columns:\n    print(f'-{x}')","be555979":"corr_df = num_play_scout[['quarter','down','yardsToGo','yardlineNumber',\n                          'penaltyYards','preSnapHomeScore','preSnapVisitorScore',\n                          'kickLength','kickReturnYardage','playResult',\n                          'absoluteYardlineNumber','snapTime','operationTime',\n                          'hangTime']]\n\nplt.figure(figsize=(19, 10))\ncorr = corr_df.corr()\nsns.heatmap(corr, annot=True)\nplt.title('Plays-Scout data correlation heatmap')\nplt.show()","85a691c2":"# creates linear regression plots\ndef regress(input1, input2):\n    \n    temp_df = play_scout[[input1,input2]].dropna(how='any')\n    \n    x = temp_df[input1]\n    y = temp_df[input2]\n    \n    # calculates linear regression\n    (slope, intercept, rvalue, pvalue, stderr) = st.linregress(x,y)\n    x = np.asarray(x, dtype=np.float64)\n    regress_values = x * slope + intercept\n    \n    print(regress_values)\n\n    # plots scatter plot and regresion\n    plt.figure(figsize=(10, 8))\n    plt.scatter(x,y)\n    plt.plot(x,regress_values,\"r-\")\n\n    # annotates graph with equation\n    line_eq = \"y = \" + str(round(slope,2)) + \"x + \" + str(round(intercept,2))\n    plt.annotate(line_eq,xy=(min(x),min(y)),fontsize=15,color=\"red\")\n    plt.xlabel(input1)\n    plt.ylabel(input2)\n    plt.title(f'{input1} vs. {input2}')\n    \n    # prints r squared value from linregress function\n    print(f'The r-squared is: {rvalue}')\n    \nregress('kickReturnYardage','hangTime')","9d42cc32":"players = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/players.csv')\nplayers.head(2)","fdfca28c":"# convert height to feet\nplayers[['feet','inches']] = players['height'].str.split('-',expand=True)\nplayers['feet'] = players['feet'].astype('int')\nplayers['inches'] = players['inches'].astype('float').fillna(0.0)\nplayers['feet'] = np.where(players.feet>8, players.feet\/12, players.feet)\nplayers['feet'] = round(players['feet'] + players['inches']\/12, 2)\nplayers = players.drop(columns=['inches'])\nplayers.head(2)","ba1e7671":"fig, (ax1,ax2) = plt.subplots(1,2, figsize=(10,4))\nplayers.feet.plot.hist(bins=10, grid=True, title='Player height (ft)', ax=ax1)\nplayers.weight.plot.hist(bins=20, grid=True, title='Player weight (lbs)', ax=ax2)\nplt.tight_layout()","028fde15":"players.groupby('Position')['weight'].mean().sort_values(ascending=False)\\\n    .plot.bar(figsize=(15,5), \n              title='Avg. player weight (lbs) by position', \n              grid=True, \n              ylim=(150,325))\nplt.tight_layout()","2d1f9688":"players.groupby('Position')['feet'].mean().sort_values(ascending=False)\\\n    .plot.bar(figsize=(15,5), \n              title='Avg. player height (ft) by position', \n              grid=True, \n              ylim=(5,7))\nplt.tight_layout()","7cd0926a":"games = track = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/games.csv')\ngames.head(2)","29ba605c":"track = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv')\ntrack.head(2)","68cdc6c9":"print('Tracking events:')\ntrack.event.unique()","c80e2c59":"# convert to timestamp\ntrack['ts'] = pd.to_datetime(track['time']).values.astype(np.int64) \/\/ 10 ** 9\ntrack = track.drop(columns=['time'])\ntrack.head(2)","4db5dc9c":"# messing with aggregations\ntrack.groupby(['playId','nflId']).agg({'x': lambda x: x.iat[-1] - x.iat[0], # x pos difference\n                                       'y': lambda x: x.iat[-1] - x.iat[0], # y pos difference\n                                       's': 'mean',                         # avg speed\n                                       'dis': 'sum',                        # total dist\n                                       'o': 'mean',                         # avg orientation\n                                       'dir': 'mean',                       # avg direction\n                                       'frameId': 'last',                   # number of frames\n                                       'ts': lambda x: x.max() - x.min(),   # play time\n                                       'position': 'first', \n                                       'team': 'first',\n                                       'playDirection': 'first',\n                                       'event': 'first'}\n                                     )","a1d8034c":"ball_df = pd.merge(track.loc[track.team=='football'], plays, how='left', on=['gameId','playId'])","2e5d6517":"fig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2, figsize=(15,10))  \nball_df.loc[ball_df.specialTeamsPlayType=='Kickoff'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on kickoff plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax1)\nball_df.loc[ball_df.specialTeamsPlayType=='Punt'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on punt plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax2)\nball_df.loc[ball_df.specialTeamsPlayType=='Field Goal'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on field goal plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax3)\nball_df.loc[ball_df.specialTeamsPlayType=='Extra Point'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on extra point plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax4)\nplt.tight_layout()","8afdb7cd":"def ball_speed_plotter(play, game):\n    '''\n    A function to plot ball speed of individual plays and frame id of events. \n    argument=\"playId, gameId\" \n    '''\n    if play not in ball_df.playId.unique():\n        return 'Error: Play number does not exist.'\n    temp_df = ball_df.loc[(ball_df.playId==play) & (ball_df.gameId==game)].reset_index()\n    temp_df['s'].plot.line(figsize=(15, 8), \n                           title=f'Game {game}, play {play} ball speed and events',\n                           xlabel='Frame id',\n                           ylabel='Ball speed')\n    \n    plt.gca().set_ylim(bottom=-3)\n    print('Play events')\n    print('------')\n    for index, row in temp_df.loc[temp_df.event!='None'].iterrows():\n        print(f\"-{row['event']} at frame {row['frameId']}\")\n        plt.axvline(x=row['frameId'], color='r', alpha=.4)\n        plt.annotate(row['event'], xy=(row['frameId'], -2), color='r')\n        \nball_speed_plotter(36, 2018123000)","7bb25aad":"ball_speed_plotter(892,2018123000)","4e9a6391":"ball_speed_plotter(373,2018123000)","8a28d44e":"del ball_df\ngc.collect()","45ef4a49":"# assemble df of fake plays\nall_fakes = {'2018':'','2019':'','2020':''}\nfor year in all_fakes:\n    print(f'Loading {year} data....')\n    df = pd.read_csv(f'..\/input\/nfl-big-data-bowl-2022\/tracking{year}.csv')\n    print(f'Filtering fake play data....')\n    fake_play_list = df.loc[df.event.str.contains('fake')]['playId'].unique().tolist()\n    all_fakes[year] = df.loc[df.playId.isin(fake_play_list)]\n    print(f'Freeing memory....')\n    del df\n    gc.collect()\n    print('Done.')\n    \nfake_df = all_fakes['2018'].append(all_fakes['2019']).append(all_fakes['2020'])\n\n# fake_df.to_csv('all_fake_plays.csv')\n\nprint(f'\\nShape of fake_df: {fake_df.shape}\\n')\nfake_df.head(2)","caade834":"# merge fake df with player, scout, and play data\nmerged = pd.merge(fake_df, play_scout, how='left', on=['gameId','playId'])\nmerged = pd.merge(merged, games, how='left', on='gameId')\nmerged = pd.merge(merged, players[['nflId','feet','weight','birthDate','collegeName']], how='left', on='nflId')\n\ndel fake_df\ngc.collect()\n\nmerged[\"playSeason\"] = merged['playId'].astype(str) + '_' + merged['season'].astype(str)\n    \nprint(f'Shape of merged df: {merged.shape}')","3e13286b":"fig, ((ax1,ax2,ax3),(ax4,ax5,ax6)) = plt.subplots(2,3, figsize=(15,8))\nmerged.groupby('playSeason').first().season.value_counts().plot.bar(title='Fake plays by season', ax=ax1)\nmerged.groupby('playSeason')['frameId'].max().plot.hist(grid=True, title='Number of frames in fake plays',ax=ax2)\nmerged.groupby('playSeason').first().playDirection.value_counts().plot.bar(title='Fake play directions', ax=ax3)\nmerged.loc[~merged.event.isin(['None','ball_snap'])].groupby('playSeason').first().event.value_counts()[:20].plot.bar(title='Most common fake play \"events\" (top 20)', ax=ax4)\nmerged.loc[merged.event.str.contains('fake')].groupby('playSeason')['frameId'].mean().plot.hist(bins=15, grid=True, title='Frame id when fake play takes place', ax=ax5)\nmerged.groupby('playSeason').first().scoreDiff.plot.hist(grid=True, title='Score diff at time of fake play', ax=ax6)\nplt.tight_layout()","27a074b4":"fig, ((ax1,ax2,ax3),(ax4,ax5,ax6)) = plt.subplots(2,3, figsize=(15,8))\nmerged.groupby('playSeason')['yardlineNumber'].first().plot.hist(bins=15, grid=True, title='Yardline No. where fake play takes place', ax=ax1)\nmerged.groupby('playSeason')['playResult'].first().plot.hist(bins=10, grid=True, title='Fake play results',ax=ax2)\nmerged.groupby('playSeason')['kickType'].first().value_counts().plot.bar(title='Fake play kick types', ax=ax3)\nmerged.groupby('playSeason')['snapDetail'].first().value_counts().plot.pie(title='Snap target', ax=ax4)\nmerged.groupby('playSeason')['possessionTeam'].first().value_counts().plot.bar(title='Teams who do fake plays', ax=ax5)\nmerged.groupby('playSeason')['week'].first().value_counts().sort_index().plot.line(title='Fake plays by week', ax=ax6)\nplt.tight_layout()","275fee4a":"Merge fake df with player, scout, and play data.","1875f5eb":"## Eye on the ball","8529dbf9":"# Tracking data","cb3e8da2":"# Exploring NFL special teams data for seasons 2018-20","67d40ce1":"## Fake plays","94ffa61a":"# Play data","5c1656b5":"## Game data","43e21c05":"Convert height to feet","4955fbab":"Merged scout and play data.","e7f7b529":"# Player data","402bf03b":"# Scout data"}}