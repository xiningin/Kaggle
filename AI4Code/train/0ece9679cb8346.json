{"cell_type":{"8794e614":"code","a786214b":"code","829f040b":"code","f93b58f4":"code","fe6530cb":"code","9ca18be9":"code","d304dccf":"code","a01261a7":"code","03435166":"code","a2369f3a":"code","d3028fe9":"code","02fdd31e":"code","f2d5353b":"markdown"},"source":{"8794e614":"import numpy as np \nimport pandas as pd \n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error","a786214b":"warnings.filterwarnings('ignore')","829f040b":"dataframe = pd.read_csv(\"..\/input\/price-volume-data-for-all-us-stocks-etfs\/Data\/Stocks\/tsla.us.txt\")\ndataframe.head()","f93b58f4":"print(dataframe.shape)\nprint(dataframe.columns)","fe6530cb":"dataframe[['Close']].plot()\nplt.title(\"Tesla\")\nplt.show()","9ca18be9":"# Cumulative Return (cr)\ncr = dataframe.cumsum()\ncr.plot()\nplt.title('Cumulative Returns')","d304dccf":"dataframe['Date'][1800]","a01261a7":"train_data, test_data = dataframe[0:int(len(dataframe)*0.7)], dataframe[int(len(dataframe)*0.7):]\nplt.figure(figsize=(12,7))\nplt.title('Tesla Prices')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.plot(dataframe['Open'], 'orange', label='Training Data')\nplt.plot(test_data['Open'], 'green', label='Testing Data')\nplt.xticks(np.arange(0,1857, 300), dataframe['Date'][0:1857:300])\nplt.legend()","03435166":"def smape_kun(y_true, y_pred):\n    return np.mean((np.abs(y_pred - y_true) * 200\/ (np.abs(y_pred) + np.abs(y_true))))","a2369f3a":"train_ar = train_data['Open'].values\ntest_ar = test_data['Open'].values\n\n\nhistory = [x for x in train_ar]\nprint(type(history))\npredictions = list()\nfor t in range(len(test_ar)):\n    model = ARIMA(history, order=(5,1,0))\n    model_fit = model.fit(disp=0)\n    output = model_fit.forecast()\n    yhat = output[0]\n    predictions.append(yhat)\n    obs = test_ar[t]\n    history.append(obs)\n    #print('predicted=%f, expected=%f' % (yhat, obs))\nerror = mean_squared_error(test_ar, predictions)\nprint('Testing Mean Squared Error: %.3f' % error)\nerror2 = smape_kun(test_ar, predictions)\nprint('Symmetric mean absolute percentage error: %.3f' % error2)","d3028fe9":"plt.figure(figsize=(12,7))\nplt.plot(dataframe['Open'], 'green', color='orange', label='Training Data')\nplt.plot(test_data.index, predictions, color='green', marker='o', linestyle='dashed', \n         label='Predicted Price')\nplt.plot(test_data.index, test_data['Open'], color='yellow', label='Actual Price')\nplt.title('Tesla Prices Prediction')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.xticks(np.arange(0,1857, 300), dataframe['Date'][0:1857:300])\nplt.legend()","02fdd31e":"plt.figure(figsize=(12,7))\nplt.plot(test_data.index, predictions, color='green', marker='o', linestyle='dashed', \n         label='Predicted Price')\nplt.plot(test_data.index, test_data['Open'], color='yellow', label='Actual Price')\nplt.xticks(np.arange(1486,1856, 60), dataframe['Date'][1486:1856:60])\nplt.title('Tesla Prices Prediction')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.legend()","f2d5353b":"Moving Average for Time Series Prediction"}}