{"cell_type":{"d547c076":"code","ff7fabb7":"code","14daeabb":"code","5532f844":"code","b4108431":"code","cacfbef5":"code","4b4cb591":"code","8234a172":"code","cdae3d45":"code","2ac78255":"code","323bd75b":"code","3b5e8706":"code","565e0368":"code","01e5b71f":"code","7588cc2a":"code","82b54ff6":"code","4bbf4718":"code","e66ca6d2":"code","cf314d4e":"code","361eeae7":"code","6dd1de14":"code","92648b55":"code","45a3d9ab":"code","3a412dff":"code","e7062fa2":"code","1d24568c":"code","e6e10122":"code","cb67e3a5":"code","97918391":"code","58ee21ec":"code","ca1b6265":"code","e4b2ffd3":"code","0760dc32":"code","c20af505":"code","e4e3cc0c":"code","75726530":"code","4b71fde7":"code","96552840":"code","544b2d6f":"code","027bd12b":"code","33c959a9":"code","045c5f8d":"code","6c57dcba":"code","b9e054b2":"code","5836bd0d":"code","a6f3ba8b":"code","2b41dcbe":"code","88b99491":"code","c1ab0025":"code","ef616d43":"code","d7c53636":"code","d8ef12f0":"code","6f98bad5":"code","94145007":"code","2b5a245b":"code","aa6b06ab":"code","4c90ff46":"code","d2b1e0a9":"code","fd0feb67":"code","ffb0057f":"markdown","407082dc":"markdown","d6bbdb69":"markdown","9ecdaeac":"markdown","cc695693":"markdown","361b77f0":"markdown","20951735":"markdown","6ba8ceb2":"markdown","166634c8":"markdown","56ee4c5a":"markdown","3d480c1b":"markdown","6370a8ff":"markdown","95d1003b":"markdown","d2f94dbd":"markdown","69bb3be4":"markdown","eefc8146":"markdown","960a56dd":"markdown","bf54a3da":"markdown","ad668b9b":"markdown","0f158a5b":"markdown","40db9992":"markdown","1b67c0e4":"markdown","8d998da7":"markdown","0a5b1150":"markdown","404a6582":"markdown","3852410d":"markdown","82854811":"markdown","876eac93":"markdown","88463c26":"markdown"},"source":{"d547c076":"import os\nimport torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\nimport torchvision.transforms as transforms\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\n%matplotlib inline","ff7fabb7":"DATA_DIR = '..\/input\/jovian-pytorch-z2g\/Human protein atlas'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           # Contains training images\nTEST_DIR = DATA_DIR + '\/test'                             # Contains test images\n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       # Contains real labels for training images\nTEST_CSV = '..\/input\/jovian-pytorch-z2g\/submission.csv'   # Contains dummy labels for test image","14daeabb":"!head \"{TRAIN_CSV}\"","5532f844":"!head \"{TEST_CSV}\"","b4108431":"!ls \"{TRAIN_DIR}\" | head","cacfbef5":"train_df = pd.read_csv(TRAIN_CSV)\ntrain_df.head()","4b4cb591":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","8234a172":"def encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)\n    ","cdae3d45":"encode_label('2 4 5')","2ac78255":"decode_target(torch.tensor([0, 0, 1, 0, 1, 1, 0, 0, 0, 0.]))","323bd75b":"decode_target(torch.tensor([0, 0, 1, 0, 1, 1, 0, 0, 0, 0.]), text_labels=True)","3b5e8706":"class HumanProteinDataset(Dataset):\n    def __init__(self, csv_file, root_dir, transform=None):\n        self.df = pd.read_csv(csv_file)\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","565e0368":"transform = transforms.Compose([transforms.ToTensor()])\ndataset = HumanProteinDataset(TRAIN_CSV, TRAIN_DIR, transform=transform)","01e5b71f":"len(dataset)","7588cc2a":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))\n    ","82b54ff6":"show_sample(*dataset[0], invert=False)","4bbf4718":"show_sample(*dataset[0])","e66ca6d2":"torch.manual_seed(10)","cf314d4e":"val_pct = 0.1\nval_size = int(val_pct * len(dataset))\ntrain_size = len(dataset) - val_size","361eeae7":"train_ds, val_ds = random_split(dataset, [train_size, val_size])\nlen(train_ds), len(val_ds)","6dd1de14":"batch_size = 32","92648b55":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=2, pin_memory=True)","45a3d9ab":"def show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break","3a412dff":"show_batch(train_dl)","e7062fa2":"def F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","1d24568c":"class MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                      \n        loss = F.binary_cross_entropy(out, targets)      \n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                           # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        score = F_score(out, targets)\n        return {'val_loss': loss.detach(), 'val_score': score.detach() }\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_score']))","e6e10122":"class ProteinCnnModel(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n\n            nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n\n            nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.AdaptiveAvgPool2d(1),\n\n            nn.Flatten(), \n            nn.Linear(256, 128),\n            nn.ReLU(),\n            nn.Linear(128, 64),\n            nn.ReLU(),\n            nn.Linear(64, 10),\n            nn.Sigmoid()\n        )\n        \n    def forward(self, xb):\n        return self.network(xb)","cb67e3a5":"pip install efficientnet_pytorch","97918391":"from efficientnet_pytorch import EfficientNet\n\n\nclass ProteinCnnModel2(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = EfficientNet.from_pretrained('efficientnet-b0') #EfficientNet\n        # Replace last layer\n        num_ftrs = self.network._fc.in_features\n        self.network._fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n    \n","58ee21ec":"# class ProteinCnnModel2(MultilabelImageClassificationBase):\n#     def __init__(self):\n#         super().__init__()\n#         # Use a pretrained model\n#         self.network = models.resnet34(pretrained=True) #\n# EfficientNet\n#         # Replace last layer\n#         num_ftrs = self.network.fc.in_features\n#         self.network.fc = nn.Linear(num_ftrs, 10)\n    \n#     def forward(self, xb):\n#         return torch.sigmoid(self.network(xb)) ","ca1b6265":"model = ProteinCnnModel2()\nmodel","e4b2ffd3":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","0760dc32":"device = get_default_device()\ndevice","c20af505":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device);","e4e3cc0c":"def try_batch(dl):\n    for images, labels in dl:\n        print('images.shape:', images.shape)\n        out = model(images)\n        print('out.shape:', out.shape)\n        print('out[0]:', out[0])\n        break\n\ntry_batch(train_dl)","75726530":"from tqdm.notebook import tqdm\n\n\n# Stolen from https:\/\/github.com\/Bjarten\/early-stopping-pytorch\nclass EarlyStopping:\n    \"\"\"Early stops the training if validation loss doesn't improve after a given patience.\"\"\"\n    def __init__(self, patience=7, verbose=False):\n        \"\"\"\n        Args:\n            patience (int): How long to wait after last time validation loss improved.\n                            Default: 7\n            verbose (bool): If True, prints a message for each validation loss improvement. \n                            Default: False\n        \"\"\"\n        self.patience = patience\n        self.verbose = verbose\n        self.counter = 0\n        self.best_score = None\n        self.early_stop = False\n        self.val_loss_min = np.Inf\n\n    def __call__(self, val_loss, model):\n\n        score = -val_loss\n\n        if self.best_score is None:\n            self.best_score = score\n            self.save_checkpoint(val_loss, model)\n        elif score < self.best_score:\n            self.counter += 1\n            print(f'EarlyStopping counter: {self.counter} out of {self.patience}')\n            if self.counter >= self.patience:\n                self.early_stop = True\n        else:\n            self.best_score = score\n            self.save_checkpoint(val_loss, model)\n            self.counter = 0\n\n    def save_checkpoint(self, val_loss, model):\n        '''Saves model when validation loss decrease.'''\n        if self.verbose:\n            print(f'Validation loss decreased ({self.val_loss_min:.6f} --> {val_loss:.6f}).  Saving model ...')\n        torch.save(model.state_dict(), 'checkpoint.pt')\n        self.val_loss_min = val_loss\n","4b71fde7":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, patience,train_loader, val_loader, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n      # initialize the early_stopping object\n    early_stopping = EarlyStopping(patience=patience, verbose=True)\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n         # early_stopping needs the validation loss to check if it has decresed, \n        # and if it has, it will make a checkpoint of the current model\n        early_stopping(result['train_loss'], model)\n        \n        if early_stopping.early_stop:\n            print(\"Early stopping\")\n            break\n        history.append(result)\n    return history","96552840":"model = to_device(ProteinCnnModel2(), device)","544b2d6f":"evaluate(model, val_dl)","027bd12b":"num_epochs = 9\nopt_func = torch.optim.Adam\nlr = 1e-3","33c959a9":"# early stopping patience; how long to wait after last time validation loss improved.\npatience = 20\nhistory = fit(num_epochs, lr, model, patience ,train_dl, val_dl, opt_func)","045c5f8d":"def predict_single(image):\n    xb = image.unsqueeze(0)\n    xb = to_device(xb, device)\n    preds = model(xb)\n    prediction = preds[0]\n    print(\"Prediction: \", prediction)\n    show_sample(image, prediction)","6c57dcba":"test_dataset = HumanProteinDataset(TEST_CSV, TEST_DIR, transform=transform)","b9e054b2":"img, target = test_dataset[0]\nimg.shape","5836bd0d":"predict_single(test_dataset[100][0])","a6f3ba8b":"predict_single(test_dataset[74][0])","2b41dcbe":"def plot_losses(history):\n    losses = [x['val_loss'] for x in history]\n    plt.plot(losses, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.title('Loss vs. No. of epochs');\n\ndef plot_accuracies(history):\n    accuracies = [x['val_score'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');\nplot_losses(history)","88b99491":"history","c1ab0025":"plot_accuracies(history)","ef616d43":"test_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size, num_workers=2, pin_memory=True), device)","d7c53636":"@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    batch_probs = torch.cat(batch_probs)\n    return [decode_target(x) for x in batch_probs]","d8ef12f0":"test_preds = predict_dl(test_dl, model)","6f98bad5":"submission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.head()","94145007":"sub_fname = 'efficientNet_submission_Mohcine_Madkour.csv'","2b5a245b":"submission_df.to_csv(sub_fname, index=False)","aa6b06ab":"sub_fname","4c90ff46":"!pip install jovian --upgrade","d2b1e0a9":"import jovian","fd0feb67":"jovian.commit(project='zerogans-protein-competition')","ffb0057f":"Let's check how many samples the dataset contains","407082dc":"## Training the model","d6bbdb69":"You can also use the \"Save Version\" button on Kaggle itself, to save a copy on your Kaggle profile.","9ecdaeac":"If your kernel runs out of memory here, you might need to reduce your batch size.","cc695693":"I'm using a validation percentage of 10%, but you can use a smaller or larger percentage. One good strategy is to determine a good set of hyperparameters, and then retrain on a smaller validation set for your final submission.","361b77f0":"Let us know create a submission file with these predictions","20951735":"Let's load the `train.csv` file into a Pandas dataframe","6ba8ceb2":"The image files are named `<image-id>.png` and can be found in the respective `train` and `test` folders.","166634c8":"Let's try predicting the labels for some sample images","56ee4c5a":"The `train.csv` file contains image IDs and labels for training data. Note that this is a multi-label classification problem. Each image can have more than one type of protein.","3d480c1b":"## Exploring the Data\n\nWhen you create a notebook with the \"Notebooks\" tab of a Kaggle competition, the data is automatically included in the `..\/input` folder. You can explore the files in the sidebar. Let us create some constants acess the data directories and CSV files.","6370a8ff":"## Making predictions & submission\n\nTo start with, let's create a helper function to make a prediction on a single image.","95d1003b":"You can now upload this submission file here: https:\/\/www.kaggle.com\/c\/jovian-pytorch-z2g\/submit","d2f94dbd":"## Human Protein Multi Label Image Classification \n\nThis is a starter notebook for the competition [Zero to GANs - Human Protein Classification](https:\/\/www.kaggle.com\/c\/jovian-pytorch-z2g)","69bb3be4":"Here's the same image viewed with the colors inverted","eefc8146":"Let's also put the textual labels in a dictionary for later use.","960a56dd":"### Data Loaders","bf54a3da":"We can now save it batck to CSV, and download the file from the sidebar (check the output folder)","ad668b9b":"## Creating Datasets & Data Loaders\n\nWe can now create a custom dataset by extending the `Dataset` class from PyTorch. We need to define the `__len__` and `__getitem__` methods to create a dataset. We'll also provide the option of adding transforms into the constructor.","0f158a5b":"To create a tensor from the labels, we will encode the labels as vectors of 1s & 0s. For example, if the labels are `'2 4 5'`, the correspoding vector for it would be `[0, 0, 1, 0, 1, 1, 0, 0, 0, 0]`. Let's define helper funtions to encode labels into tensors and vice versa.","40db9992":"Here's a sample image without the colors inverted.","1b67c0e4":"Similarly, `submission.csv` contains image IDs for test data. However, since the goal of this competition is to make predictions for the test set, the `submission.csv` files contains **dummy labels**, which you need to replace with your predictions and sumbit to the competition on the \"Submission\" tab. In other words, we don't have the labels for the test set.","8d998da7":"## Save to Jovian","0a5b1150":"### Training & Validation sets\n\nAs a good practice, we should split the data into training and validation datasets. Let's fix a seed for PyTorch (to ensure we always get the same validation set), and create the datasets using `random_split`.","404a6582":"## Creating a submission file","3852410d":"Next, let's create a test dataset using the `submission.csv` file. Note that the file contains dummy labels (always `'0'`). We'll use the same transforms we used for the training set.","82854811":"Let's take a look at a sample image from the dataset. We'll define a function `show_sample` to help us. We will also include the option to invert the image before showing it, because the original images are quite dark.","876eac93":"Transforms can be chained using `transforms.Compose`. For instance, you may add `transforms.Resize(128)` before `transforms.ToTensor()` to resize images to size 128x128 before converting them into tensors. See the full list of transforms here: https:\/\/pytorch.org\/docs\/master\/torchvision\/transforms.html","88463c26":"## Model"}}