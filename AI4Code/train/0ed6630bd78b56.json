{"cell_type":{"d0e8ccd5":"code","5147a0aa":"code","e7d5afd2":"code","94670239":"code","f5e53fdf":"code","1e443152":"markdown","a22f2d61":"markdown","7a838fb1":"markdown","3f27cf25":"markdown","62b2d288":"markdown"},"source":{"d0e8ccd5":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom IPython.display import clear_output\nfrom time import sleep\nimport os\n\nos.listdir('..\/input')\ntrain_data = pd.read_csv('..\/input\/training\/training.csv')  \ntest_data = pd.read_csv('..\/input\/test\/test.csv')\nlookid_data = pd.read_csv('..\/input\/IdLookupTable.csv')\n\ntrain_data.head().T","5147a0aa":"# Lets check for missing values\ntrain_data.isnull().any().value_counts()\n# Fill the missing values with the previous values in that row\ntrain_data.fillna(method = 'ffill',inplace = True)\n# check for missing values again\ntrain_data.isnull().any().value_counts()","e7d5afd2":"def split_image_feature(data):\n    \"\"\"Return extracted image feature\"\"\"\n    imag = []\n    for i in range(0, data.shape[0]):\n        img = data['Image'][i].split(' ')\n        img = ['0' if x == '' else x for x in img]\n        imag.append(img)\n\n    # Lets reshape and convert it into float value\n    image_list = np.array(imag, dtype = 'float')\n    X_train = image_list.reshape(-1,96,96)\n    return X_train\n\nX_train = split_image_feature(train_data)\n# Now lets separate labels.\ntraining = train_data.drop('Image',axis = 1)\ny_train = []\nfor i in range(0, train_data.shape[0]):\n    y = training.iloc[i,:]\n    y_train.append(y)\ny_train = np.array(y_train,dtype = 'float')\n\n# Lets see what is the first image\nplt.imshow(X_train[0],cmap='gray')\nplt.show()","94670239":"from keras.layers import Conv2D,Dropout,Dense,Flatten\nfrom keras.models import Sequential\n\nmodel = Sequential([Flatten(input_shape=(96,96)),\n                         Dense(128, activation=\"relu\"),\n                         Dropout(0.1),\n                         Dense(64, activation=\"relu\"),\n                         Dense(30)\n                         ])\n\nmodel.compile(optimizer='adam', \n              loss='mse',\n              metrics=['mae','accuracy'])\nmodel.fit(X_train,y_train,epochs = 500,batch_size = 128,validation_split = 0.2)\n","f5e53fdf":"X_test = split_image_feature(test_data)\nprediction = model.predict(X_test)\n\nlookid_list = list(lookid_data['FeatureName'])\nimageID_list = list(lookid_data['ImageId'] - 1)\nrowID_list = list(lookid_data['RowId'])\nprediction_list = list(prediction)\n\nfeature = []\nfor f in list(lookid_data['FeatureName']):\n    feature.append(lookid_list.index(f))\n    \nlocation = []\nfor x,y in zip(imageID_list, feature):\n    location.append(prediction_list[x][y])\n    \nrowid = pd.Series(rowID_list, name = 'RowId')\nloc = pd.Series(location, name = 'Location')\n\nsubmission = pd.concat([rowid,loc], axis = 1)\nsubmission.to_csv('submission.csv',index = False)","1e443152":"# Data Preprocessing","a22f2d61":"# Prediction & Submission\nNow the last step is the create our submission file keeping in the mind required format with two columns: RowId and Location.\nLocation column values should be filled according the lookup table provided (IdLookupTable.csv)","7a838fb1":"The image is our feature and other values are labes that we have to predict later. As image column values are in string format and there is also some missing values so we have to split the string by space and append it and also handling missing values","3f27cf25":"This kernel is written for the [Facial Keypoints Detection](https:\/\/www.kaggle.com\/c\/facial-keypoints-detection) competetion. If you Like the notebook and think that it helped you, <font color=\"red\"><b> please upvote<\/b><\/font>.\n\n---\n\n## Table of Content\n1. Data Preprocessing\n2. Modeling\n    * Model Architecture\n    * Model Evaluation\n3. Prediction & Submission","62b2d288":"# Modeling"}}