{"cell_type":{"69a23081":"code","eb34363d":"code","c563eb74":"code","30cd2d9b":"code","604fdcd5":"code","f3e7f4a4":"code","e66df945":"code","723b7f10":"code","4e5a0491":"code","550c43c1":"code","1216cbe8":"code","12c503b9":"code","c4f4c8ab":"code","abe445a1":"code","e945671f":"code","c6e768d2":"code","92d9e10c":"code","5bbe6bad":"code","e3b172c8":"code","253624ef":"code","9601705f":"code","04db1236":"code","47b60884":"code","22119fdc":"code","3053086f":"code","28b1b8af":"code","72ecc783":"code","0bede697":"code","0bc6fa36":"code","e95561ce":"code","51f30560":"code","6f469286":"code","21447f29":"code","f0cd65aa":"code","529e4bbd":"code","98689e59":"code","3c0b5598":"code","67cd5041":"code","b23a4af2":"code","27a903b4":"code","2e8ea34a":"code","afe47731":"code","1d7c8578":"code","5009662f":"code","271f54b2":"markdown","d38bad80":"markdown","9c0309df":"markdown","bed70314":"markdown","8bd01127":"markdown","261a5a75":"markdown","68470496":"markdown","aa4316cf":"markdown","818df74a":"markdown","021e47a4":"markdown","adb30cc5":"markdown","bd8b584a":"markdown","02cd9915":"markdown","bb3e043a":"markdown","5c948d97":"markdown","3f0e976e":"markdown","f5392555":"markdown","78b547ae":"markdown","76989288":"markdown","af2b03d3":"markdown","e6ebb3f4":"markdown","44689aa7":"markdown","1050d8fe":"markdown","3dc9a1f6":"markdown","1b221e09":"markdown","ac18abdf":"markdown","b0fc150d":"markdown","52f4f24e":"markdown","91878050":"markdown","909d514a":"markdown","d8ce4537":"markdown","a09ac8d2":"markdown","c284f58b":"markdown","a82e1fd4":"markdown","630c8b30":"markdown","14846b9b":"markdown","021359e5":"markdown","daabd72a":"markdown","7f228258":"markdown","8bdf64c4":"markdown","3e5f6697":"markdown","965b1e76":"markdown","bb42057b":"markdown","944edbd2":"markdown","fc68b2ac":"markdown","45af2635":"markdown","557006cc":"markdown","789e19e0":"markdown","8a4873a1":"markdown","e554e1fb":"markdown","fb89bc28":"markdown","b9d81bcd":"markdown","fdca30ac":"markdown","173958c0":"markdown","f839bf59":"markdown","07fd24ac":"markdown","e5a3fd19":"markdown","1b427b6b":"markdown"},"source":{"69a23081":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nfrom __future__ import print_function # adds compatibility to python 2  #it mussed be added in the first line of program or it will give an error.\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Any results you write to the current directory are saved as output.","eb34363d":"# install xlrd\n!pip install xlrd\n\nprint('xlrd installed!')","c563eb74":"df_can = pd.read_excel(\"..\/input\/Canada.xlsx\",\n                       sheetname='Canada by Citizenship',\n                       skiprows=range(20),\n                       skip_footer=2)\n\nprint ('Data read into a pandas dataframe!')","30cd2d9b":"df_can.head()","604fdcd5":"df_can.tail()","f3e7f4a4":"df_can.info()","e66df945":"df_can.columns.values","723b7f10":"df_can.index.values","4e5a0491":"print(type(df_can.index))\nprint(type(df_can.columns))","550c43c1":"df_can.columns.tolist()\ndf_can.index.tolist()\nprint(type(df_can.index))\nprint(type(df_can.columns))","1216cbe8":"df_can.rename(columns={'Type':'Purpose','RegName':'ContinentArea','OdName':'Country'},inplace=True)    #inplace very important read the description above\ndf_can.columns","12c503b9":"df_can['Total'] = df_can.sum(axis=1)\ndf_can.head()","c4f4c8ab":"df_can.isnull().sum()","abe445a1":"df_can.describe()","e945671f":"df_can.Purpose","c6e768d2":"df_can[['Purpose','ContinentArea']]","92d9e10c":"df_can.set_index('Country',inplace=True)","5bbe6bad":"df_can.head(8)","e3b172c8":"# 1. the full row data (all columns)\ndf_can.loc['Argentina']\n\n#or some alternatives\ndf_can.iloc[7]","253624ef":"# 2. for year 2013\ndf_can.loc['Argentina', 2013]\n\n# alternate methods   #the methods below didn't work\n#df_can.iloc[0, 36] # year 2013 is the last column, with a positional index of 36\n#df_can.ix['Argentina', 36]\n\n# does not work\n# df_can.ix[87, 2013]","9601705f":"# 3. for years 1980 to 1985\n#df_can.ix[87, [1980, 1981, 1982, 1983, 1984, 1984]]\n\n# alternate methods\ndf_can.loc['Argentina', [1980, 1981, 1982, 1983, 1984, 1984]]\ndf_can.iloc[7, [3, 4, 5, 6, 7, 8]] ","04db1236":"df_can.columns=list(map(str,df_can.columns))\n# useful for plotting later on\nyears = list(map(str, range(1980, 2014)))\nprint(years)","47b60884":"condition=df_can[\"AreaName\"]==\"Europe\"\nprint(condition)","22119fdc":"# 2. pass this condition into the dataFrame\ndf_can[condition]\n#you'll se above only the countries in Europe.","3053086f":"# we can pass mutliple criteria in the same line. \n# let's filter for AreaNAme = Asia and RegName = Southern Asia\n\ndf_can[(df_can['AreaName']=='Asia') | (df_can['ContinentArea']=='Southern Asia')]\n\n# note: When using 'and' and 'or' operators, pandas requires we use '&' and '|' instead of 'and' and 'or'\n# don't forget to enclose the two conditions in parentheses","28b1b8af":"print ('data dimensions:', df_can.shape)\nprint(df_can.columns)\ndf_can.head(2)","72ecc783":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl","0bede697":"print(\"Version\",mpl.__version__)","0bc6fa36":"print(plt.style.available)\nplt.style.use([\"classic\"])","e95561ce":"df_can.loc['Haiti', years].plot()\nplt.title('Immigration from Haiti')\nplt.ylabel('Number of immigrants')\nplt.xlabel('Years')\n\nplt.show()","51f30560":"haiti=df_can.loc[\"Haiti\",years]\nprint(haiti)","6f469286":"\nhaiti.plot(kind='line')\nplt.title('Immigration from Haiti')\nplt.ylabel('Number of immigrants')\nplt.xlabel('Years')\n# syntax: plt.text(x, y, label)\nplt.text(20, 6000, '2010 Earthquake') \nplt.show()","21447f29":"india=df_can.loc[\"India\",\"1980\":\"2013\"]\nchina=df_can.loc[\"China\",\"1980\":\"2013\"]\nindia.plot(kind=\"line\")\nchina.plot(kind=\"line\")\nplt.ylabel(\"China And India\")\nplt.xlabel(\"Years\")\nplt.show()","f0cd65aa":"df_CI = df_can.loc[['India', 'China'], years]\ndf_CI.head()","529e4bbd":"df_CI.plot(kind='line')","98689e59":"df_CI = df_CI.transpose()\ndf_CI.head()","3c0b5598":"df_CI.plot(kind='line')\n\nplt.title('Immigrants from China and India')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show() ","67cd5041":"df_can_max=df_can.sort_values('Total',ascending=False)\ndf_can_max.head()","b23a4af2":"df_can_max=df_can.loc[['India','China','United Kingdom of Great Britain and Northern Ireland','Philippines','Pakistan'],years]\ndf_can_max = df_can_max.transpose()\ndf_can_max.head()\ndf_can_max.plot( figsize=(14, 8))","27a903b4":"# inplace = True paramemter saves the changes to the original df_can dataframe\ndf_can.sort_values(by='Total', ascending=False, axis=0, inplace=True)\n\n# get the top 5 entries\ndf_top5 = df_can.head(5)\n\n# transpose the dataframe\ndf_top5 = df_top5[years].transpose() \n\ndf_top5","2e8ea34a":"df_top5.plot(kind='line', figsize=(14, 8)) # pass a tuple (x, y) size\n\nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()","afe47731":"df_top5.plot(kind='Area', figsize=(14, 8)) # pass a tuple (x, y) size\n\nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()","1d7c8578":"count,bin_edges =np.histogram(df_can['2012'])\ndf_can['2012'].plot(kind='hist',xticks=bin_edges)\nplt.title('Immigration from 195 countries in 2012')\nplt.ylabel('Number of Countries')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","5009662f":"df_turkey=df_can.loc['Turkey',years]\ndf_turkey.plot(kind='bar')\nplt.title(\"Imigrants from Turkey in years\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Imigrants from Turkey\")\nplt.show()","271f54b2":"Step 1: Get the dataset. Recall that we created a `Total` column that calculates the cumulative immigration by country. We will sort on this column to get our top 5 countries using pandas `sort_values()` method.","d38bad80":"We can easily add more countries to line plot to make meaningful comparisons immigration from different countries. \n\n**Question:** Let us compare the number of immigrants from India and China from 1980 to 2013.","9c0309df":"please notice that there are multiple ways to create a plot.","bed70314":"That's the end for this lab\n\nThis notebook was originally created by [Jay Rajasekharan](https:\/\/www.linkedin.com\/in\/jayrajasekharan) with contributions from [Ehsan M. Kermani](https:\/\/www.linkedin.com\/in\/ehsanmkermani), and [Slobodan Markovic](https:\/\/www.linkedin.com\/in\/slobodan-markovic).\n\nThis notebook was recently revised by [Alex Aklson](https:\/\/www.linkedin.com\/in\/aklson\/). I hope you found this lab session interesting. Feel free to contact me if you have any questions!","8bd01127":"Before we proceed, notice that the defaul index of the dataset is a numeric range from 0 to 194. This makes it very difficult to do a query by a specific country. For example to search for data on Argentina, we need to know the corressponding index value.\n\nThis can be fixed very easily by setting the 'Country' column as the index using set_index() method.\n\n","261a5a75":"When analyzing a dataset, it's always a good idea to start by getting basic information about your dataframe. We can do this by using the info() method.","68470496":"Note:My kernel is not the same as Ibm Course kernel","aa4316cf":"Pandas also gives us the opportunity to change the column names. The parameter inplace is important.If you remove it from the function it wil not change the column names permanently.","818df74a":"To get the list of column headers we can call upon the dataframe's .columns parameter.","021e47a4":"## **pandas** Basics<a id=\"4\"><\/a>\nThe first thing we'll do is import two key data analysis modules: pandas and Numpy.","adb30cc5":"Step 2: Plot graph. We will explicitly specify line plot by passing in `kind` parameter to `plot()`.","bd8b584a":"### Filtering based on a criteria\nTo filter the dataframe based on a condition, we simply pass the condition as a boolean vector. \n\nFor example, Let's filter the dataframe to show the data on Asian countries (AreaName = Africa).","02cd9915":"### Plotting in *pandas*\n\nFortunately, pandas has a built-in implementation of Matplotlib that we can use. Plotting in *pandas* is as simple as appending a `.plot()` method to a series or dataframe.\n\nDocumentation:\n- [Plotting with Series](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/api.html#plotting)<br>\n- [Plotting with Dataframes](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/api.html#api-dataframe-plotting)","bb3e043a":"We can also print the types of the column and index values.                Spoiler=Both Class","5c948d97":"Finally, let's view a quick summary of each column in our dataframe using the describe() method.","3f0e976e":"Step 2: Plot the dataframe. To make the plot more readeable, we will change the size using the `figsize` parameter.","f5392555":"The method tolist() helps us to get the index and columns as list.And I'll take a look on the type again. They are both Class again.","78b547ae":"## The Dataset: Immigration to Canada from 1980 to 2013 <a id=\"2\"><\/a>","76989288":"## Table of Contents\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n\n1. [Exploring Datasets with *pandas*](#0)<br>\n1.1 [The Dataset: Immigration to Canada from 1980 to 2013](#2)<br>\n1.2 [*pandas* Basics](#4) <br>\n1.3 [*pandas* Intermediate: Indexing and Selection](#6) <br>\n2. [Visualizing Data using Matplotlib](#8) <br>\n2.1 [Matplotlib: Standard Python Visualization Library](#10) <br>\n3. [Line Plots](#12)\n<\/div>\n<hr>","af2b03d3":"Bar chart exapmle","e6ebb3f4":"With just a few lines of code, you were able to quickly identify and visualize the spike in immigration!\n\nQuick note on x and y values in `plt.text(x, y, label)`:\n\n    Since the x-axis (years) is type 'string', we need to specify the years in terms of its index position. Eg 20th index is year 2000. The y axis (number of Immigrants) is type 'integer', so we can just specify the value y = 6000.\n```python\n    plt.text(20, 6000, '2010 Earthquake') # years stored as type str\n```\n    If the years were stored as type 'integer' or 'float', we would have specified x = 2000 instead.\n```python\n    plt.text(2000, 6000, '2010 Earthquake') # years stored as type int\n```","44689aa7":"# Line Pots (Series\/Dataframe) <a id=\"12\"><\/a>","1050d8fe":"Let us start by importing `Matplotlib` and `Matplotlib.pyplot` as follows:","3dc9a1f6":"*Note*: How come we didn't need to transpose Haiti's dataframe before plotting (like we did for df_CI)?\n\nThat's because `haiti` is a series as opposed to a dataframe, and has the years as its indices as shown below. \n```python\nprint(type(haiti))\nprint(haiti.head(5))\n```\n>class 'pandas.core.series.Series' <br>\n>1980    1666 <br>\n>1981    3692 <br>\n>1982    3498 <br>\n>1983    2860 <br>\n>1984    1418 <br>\n>Name: Haiti, dtype: int64 <br>","1b221e09":"When the column names are integers (such as the years), there is a bit of ambiguity when using .ix[]. pandas can not clearly distinguish whether we are asking for the column name 2013, or asking for the column with the 2013th positional index.\n\nTo avoid this ambuigity, let's convert the column names into strings: '1980' to '2013'.","ac18abdf":"---\n# Visualizing Data using Matplotlib<a id=\"8\"><\/a>","b0fc150d":"**Question:** Compare the trend of top 5 countries that contributed the most to immigration to Canada.","52f4f24e":"\nDataset Source: International migration flows to and from selected countries - The 2015 revision.<br>\n<br>\nThe dataset contains annual data on the flows of international immigrants as recorded by the countries of destination. The data presents both inflows and outflows according to the place of birth, citizenship or place of previous \/ next residence both for foreigners and nationals. The current version presents data pertaining to 45 countries.\n<br>\nIn this lab, we will focus on the Canadian immigration data.<br><br>\nFor sake of simplicity, Canada's immigration data has been extracted and uploaded to one of IBM servers. \n","91878050":"*pandas* will auomatically graph the two countries on the same graph. Note that we can alternatively pass a `title` parameter to the `plot()` method as an alternate approach to add the title.","909d514a":"**<h3>Select Column**\nThere are two ways to filter on a column name:\n\nMethod 1: Quick and easy, but only works if the column name does NOT have spaces or special characters.\n\n    df.column_name \n        (returns series)\nMethod 2: More robust, and can filter on multiple columns.\n\n    df['column']  \n        (returns series)\n    df[['column 1', 'column 2']] \n        (returns dataframe)\nExample: Let's try filtering on the list of countries ('Purpose').","d8ce4537":"That was my solution Now let's see Ibm solution","a09ac8d2":"**<h4>Select Row**\nThere are main 3 ways to select rows:\n\n    df.loc[label]        \n        #filters by the labels of the index\/column\n    df.iloc[index]       \n        #filters by the positions of the index\/column\n    df.ix[label\/index]  \n        #filters by labels first (loc) but falls back to positions (iloc) if label is not found ","c284f58b":"As you can see the same result but diffrent ways to do it. I am a beginner so IBM's answer should be much better than mine.","a82e1fd4":"now if I would use my solution method in the previous question I'll have to define 5 variables but instead I'll use the olutin from Ibm from the previous question","630c8b30":"Let's view the top 5 rows of the dataset using the head() function.","14846b9b":"### Matplotlib.Pyplot\n\nOne of the core aspects of Matplotlib is `matplotlib.pyplot`. It is Matplotlib's scripting layer . Recall that it is a collection of command style functions that make Matplotlib work like MATLAB. Each `pyplot` function makes some change to a figure: e.g., creates a figure, creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc.  \n","021359e5":"## Matplotlib: Standard Python Visualization Library<a id=\"10\"><\/a>\n\nThe primary plotting library we will explore in the course is [Matplotlib](http:\/\/matplotlib.org\/).  As mentioned on their website: \n>Matplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python and IPython shell, the jupyter notebook, web application servers, and four graphical user interface toolkits.\n\nIf you are aspiring to create impactful visualization with python, Matplotlib is an essential tool to have at your disposal.","daabd72a":"The answer above is my answer. Let's take a look on Ibm's Answer","7f228258":"**Let's start with a case study:**\n\nIn 2010, Haiti suffered a catastrophic magnitude 7.0 earthquake. The quake caused widespread devastation and loss of life and aout three million people were affected by this natural disaster. As part of Canada's humanitarian effort, the Government of Canada stepped up its effort in accepting refugees from Haiti. We can quickly visualize this effort using a `Line` plot:\n\n**Question:** Plot a line graph of immigration from Haiti using `df.plot()`.\n","8bdf64c4":"We can check to see how many null objects we have in the dataset as follows:","3e5f6697":"Let us download and import our primary Canadian Immigration dataset using pandas read_excel() method. But before we can do that, we need to download a module which pandas requires to read in excel files. This module is xlrd.","965b1e76":"That doesn't look right... Editor's Comment= it looks very nice actually I don't agree with Ibm in this case :)\n\nRecall that *pandas* plots the indices on the x-axis and the columns as individual lines on the y-axis. Since `df_CI` is a dataframe with the `country` as the index and `years` as the columns, we must first transpose the dataframe using `transpose()` method to swap the row and columns.","bb42057b":"Histogram Example","944edbd2":"*optional: check if Matplotlib is loaded.","fc68b2ac":"We can also veiw the bottom 5 rows of the dataset using the tail() function.","45af2635":"Before we proceed: let's review the changes we have made to our dataframe.","557006cc":"**What is a line plot and why use it?**\n\nA line chart or line plot is a type of plot which displays information as a series of data points called 'markers' connected by straight line segments. It is a basic type of chart common in many fields.\nUse line plot when you have a continuous data set. These are best suited for trend-based visualizations of data over a period of time.\nFor Example \"the usage of computers in years\" this is a continuous data set.\n","789e19e0":"Line plot is a handy tool to display several dependent variables against one independent variable. However, it is recommended that no more than 5-10 lines on a single graph; any more than that and it becomes difficult to interpret.","8a4873a1":"Step 1: Get the data set for China and India.","e554e1fb":"\n<hr>\nCopyright &copy; 2018 [Cognitive Class](https:\/\/cognitiveclass.ai\/?utm_source=bducopyrightlink&utm_medium=dswb&utm_campaign=bdu). This notebook and its source code are released under the terms of the [MIT License](https:\/\/bigdatauniversity.com\/mit-license\/).","fb89bc28":"Example: Let us view the number of immigrants from Argentina (row 7) for the following scenarios:\n    1. The full row data (all columns)\n    2. For year 2013\n    3. For years 1980 to 1985","b9d81bcd":"Or we can select two columns. Important=we must use two brackets.","fdca30ac":"his notebook is part of the free course on **Cognitive Class** called *Data Visualization with Python*. If you accessed this notebook outside the course, you can take this free self-paced course online by clicking [here](https:\/\/cocl.us\/DV0101EN_Lab1).","173958c0":"Similarly, to get the list of indicies we use the .index parameter.","f839bf59":"We will also add a 'Total' column that sums up the total immigrants by country over the entire period 1980 - 2013, as follows:","07fd24ac":"*optional: apply a style to Matplotlib.","e5a3fd19":"\n## **pandas** Intermediate: Indexing and Selection (slicing)<a id=\"6\"><\/a>","1b427b6b":"We can clearly notice how number of immigrants from Haiti spiked up from 2010 as Canada stepped up its efforts to accept refugees from Haiti. Let us annotate this spike in the plot by using the `plt.text()` method.But first I'll define another variable only for Haiti to make the process of coding better."}}