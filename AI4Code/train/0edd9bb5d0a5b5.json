{"cell_type":{"5df54f86":"code","3cfd0fea":"code","fd041d69":"code","37791d87":"code","a437852c":"code","c29375d1":"code","bb9cc74b":"code","4c3bfce7":"code","5fdbb988":"code","c6b32dc2":"code","0093ce44":"markdown","0db6cfba":"markdown","1f1540ad":"markdown","3e760b5c":"markdown","c4a9a707":"markdown","8b89cf45":"markdown","24bf4d2d":"markdown"},"source":{"5df54f86":"import json \nimport pandas as pd \nfrom pandas.io.json import json_normalize #package for flattening json in pandas df\n\n#load json object\nwith open('..\/input\/raw_nyc_phil.json',\"r\") as file:\n    d = json.load(file)\n\nprint(\"Type\", type(d))","3cfd0fea":"#lets put the data into a pandas df\n#clicking on raw_nyc_phil.json under \"Input Files\"\n#tells us parent node is 'programs'\nnycphil = json_normalize(d['programs'])\nprint(type(nycphil))\nnycphil.head(3)","fd041d69":"works_data = json_normalize(data=d['programs'], record_path='works', \n                            meta=['id', 'orchestra','programID', 'season'])\nworks_data.head(3)","37791d87":"#flatten concerts column here\nconcerts_data = json_normalize(data = d[\"programs\"], record_path=\"concerts\", meta=['id', 'orchestra','programID', 'season'])\nconcerts_data.head(3)","a437852c":"soloist_data = json_normalize(data=d['programs'], record_path=['works', 'soloists'], \n                              meta=['id'])\nsoloist_data.head(3)","c29375d1":"intermediate_level1_1 = json_normalize(data = d[\"programs\"], record_path = \"works\", meta = ['id', 'orchestra', 'season', 'programID'])\nintermediate_level1_1.head(3)","bb9cc74b":"intermediate_level2 = json_normalize(data=d[\"programs\"], record_path=[\"works\", \"soloists\"], meta=['id'])\nintermediate_level2.head(20)","4c3bfce7":"intermediate_level1_combined = intermediate_level1_1.merge(intermediate_level2, how=\"inner\", on=['id'])\nintermediate_level1_combined.head(6)","5fdbb988":"intermediate_level1_2 = json_normalize(data=d['programs'], record_path='concerts', meta=['id'])\nintermediate_level1_2.head(20)","c6b32dc2":"total = intermediate_level1_combined.merge(intermediate_level1_2, how=\"inner\", on=\"id\")\ntotal.head(10)","0093ce44":"## This final created total dataframe can now be written into a csv or saved in a SQL table","0db6cfba":"Great! We:\n\n1. passed the json object data path ```d[programs]```\n\n2. passed the record path within the object we wanted to parse ```works```\n\n3. passed the parent metadata we wanted to append\n\nYour turn: can you unpack the ```concerts``` data?\n","1f1540ad":"We see (at least) two nested columns, ```concerts``` and ```works```. Json_normalize [docs](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.io.json.json_normalize.html) give us some hints how to flatten semi-structured data further. Let's unpack the ```works``` column into a  standalone dataframe. We'll also  grab the flat columns so we can do analysis. The parameters here are a bit unorthodox, see if you can understand what is happening.\n","3e760b5c":"But what if I want to flatten concerts and works together?\n","c4a9a707":"\n**Parsing Nested JSON with Pandas**\n\nNested JSON files can be painful to flatten and load into Pandas.","8b89cf45":"**Deeply Nested Data**\n\nSo what if you run into a nested array inside your nested array? If you go back and look at the flattened ```works_data```, you can see a *second* nested column, ```soloists```. Luckily, json_normalize docs show that you can pass in a list of columns, rather than a single column, to the record path to directly unflatten deeply nested json.\n\nLet's flatten the ```'soloists'``` data here by passing a list. Since ```soloists``` is nested in ```works```, we can pass that as:","24bf4d2d":"Hope you enjoyed this quick tutorial and JSON parsing is a bit less daunting. \n\n**Fork this notebook** to complete the ```concerts``` dataframe, and try playing around with changing the different parameters."}}