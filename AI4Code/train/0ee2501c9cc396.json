{"cell_type":{"3980ee7b":"code","4767158d":"code","cd09784c":"code","fda4dbd6":"code","cb8cc5e5":"code","d0e1b7a2":"code","69d4dcfa":"code","a2e8d9fb":"code","657d97e7":"code","021a6622":"code","251f31c3":"code","ff0571c1":"code","a37148ad":"code","963ed79d":"code","98b0cfe6":"code","e19406ee":"code","a0fcede8":"code","1425b843":"code","9da93732":"code","2901f8e8":"code","09cf991f":"code","920f8951":"markdown","c8d50d3f":"markdown"},"source":{"3980ee7b":"import numpy as np\nimport pandas as pd\nimport os\nimport random, re, math\nimport tensorflow as tf, tensorflow.keras.backend as K\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras import optimizers\nfrom kaggle_datasets import KaggleDatasets\n\nprint(tf.__version__)\nprint(tf.keras.__version__)","4767158d":"!pip install efficientnet\nimport efficientnet.tfkeras as efn","cd09784c":"AUTO = tf.data.experimental.AUTOTUNE\n# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)\n\n\n# Data access\nGCS_DS_PATH = KaggleDatasets().get_gcs_path()","fda4dbd6":"from matplotlib import pyplot as plt\n\nimg = plt.imread('..\/input\/plant-pathology-2020-fgvc7\/images\/Train_0.jpg')\nprint(img.shape)\nplt.imshow(img)","cb8cc5e5":"path='..\/input\/plant-pathology-2020-fgvc7\/'\ntrain = pd.read_csv(path + 'train.csv')\ntest = pd.read_csv(path + 'test.csv')\nsub = pd.read_csv(path + 'sample_submission.csv')\n\ntrain_paths = train.image_id.apply(lambda x: GCS_DS_PATH + '\/images\/' + x + '.jpg').values\ntest_paths = test.image_id.apply(lambda x: GCS_DS_PATH + '\/images\/' + x + '.jpg').values\n\ntrain_labels = train.loc[:, 'healthy':].values","d0e1b7a2":"nb_classes = 4\nBATCH_SIZE = 8 * strategy.num_replicas_in_sync\nimg_size = 256\nEPOCHS = 10","69d4dcfa":"def decode_image(filename, label=None, image_size=(img_size, img_size)):\n    bits = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(bits, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.resize(image, image_size)\n    if label is None:\n        return image\n    else:\n        return image, label\n    \ndef data_augment(image, label=None, seed=2020):\n    image = tf.image.random_flip_left_right(image, seed=seed)\n    #image = tf.image.random_flip_up_down(image, seed=seed)\n    image = tf.image.adjust_saturation(image, 3)\n    # image = tf.image.random_crop(image, size=[img_size, img_size, 3])\n    image = tf.image.random_brightness(image, max_delta=0.1)\n           \n    if label is None:\n        return image\n    else:\n        return image, label","a2e8d9fb":"img = plt.imread('..\/input\/plant-pathology-2020-fgvc7\/images\/Train_0.jpg')\nplt.imshow(img)\nplt.show()\nimage = data_augment(img)\nplt.imshow(image)\nplt.show()","657d97e7":"from skimage import exposure\n\nplt.imshow(img)\nplt.show()\nimg_eq = exposure.equalize_adapthist(img)\nplt.imshow(img_eq)\nplt.show()\n\nimage = data_augment(img_eq)\nplt.imshow(image)\nplt.show()","021a6622":"def data_augment2(image, label=None, seed=2020):\n    image = exposure.equalize_adapthist(image)\n    image = tf.image.random_flip_left_right(image, seed=seed)\n    #image = tf.image.random_flip_up_down(image, seed=seed)\n    image = tf.image.random_saturation(image, 2, 5, seed=seed)\n    #image = tf.image.random_crop(image, size=[img_size, img_size, 3])\n    image = tf.image.random_brightness(image, max_delta=0.2)\n           \n    if label is None:\n        return image\n    else:\n        return image, label","251f31c3":"img = plt.imread('..\/input\/plant-pathology-2020-fgvc7\/images\/Train_10.jpg')\nplt.imshow(img)\nplt.show()\nimage = data_augment2(img)\nplt.imshow(image)\nplt.show()","ff0571c1":"for i in train_paths:\n    print(i)\n    break","a37148ad":"train_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((train_paths, train_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .map(data_augment2, num_parallel_calls=AUTO)\n    .repeat()\n    .shuffle(512)\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n    )","963ed79d":"def decode_image_test(filename, label=None, image_size=(img_size, img_size)):\n    bits = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(bits, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.resize(image, image_size)\n    if label is None:\n        return data_augment2(image.numpy())\n    else:\n        return data_augment2(image.numpy()), label","98b0cfe6":"test_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(test_paths)\n    .map(decode_image_test, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE)\n)","e19406ee":"import tensorflow as tf\n\nLR_START = 0.0001\nLR_MAX = 0.0001 * strategy.num_replicas_in_sync\nLR_MIN = 0.0001\nLR_RAMPUP_EPOCHS = 10\nLR_SUSTAIN_EPOCHS = 2\nLR_EXP_DECAY = .8\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)\nearly_stopping = tf.keras.callbacks.EarlyStopping(\n    monitor='val_loss', min_delta=0, patience=0, verbose=0, mode='auto',\n    baseline=None, restore_best_weights=False\n)\n\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","a0fcede8":"def get_model():\n    base_model =  efn.EfficientNetB7(weights='imagenet', include_top=False, pooling='avg', input_shape=(img_size, img_size, 3))\n    x = base_model.output\n    out = Dense(2048, activation=\"softmax\")(x)\n    predictions = Dense(nb_classes, activation=\"softmax\")(out)\n    return Model(inputs=base_model.input, outputs=predictions)","1425b843":"with strategy.scope():\n    model = get_model()\n    \nmodel.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['accuracy'])","9da93732":"%%time\nmodel.fit(\n    train_dataset, \n    steps_per_epoch=train_labels.shape[0] \/\/ BATCH_SIZE,\n    callbacks=[lr_callback, early_stopping],\n    epochs=40\n)","2901f8e8":"%%time\nprobs = model.predict(test_dataset)","09cf991f":"sub.loc[:, 'healthy':] = probs\nsub.to_csv('submission.csv', index=False)\nsub.head()","920f8951":"#### TPU","c8d50d3f":"Create datasets"}}