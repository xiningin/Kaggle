{"cell_type":{"c1165b0d":"code","ac47a0fd":"code","e7cf7c97":"code","05068735":"code","bef68a67":"code","a905891f":"code","b6676d9e":"code","7b94804f":"code","2cd75280":"code","c224a6ca":"code","97a07f95":"code","2e3def0e":"code","86ed75dc":"code","65bb4d05":"code","c4960af5":"code","2ba33653":"code","784a2472":"code","e3ccfb0b":"code","b2ca97a8":"code","56e5434e":"code","6989a720":"code","3d02ae1e":"code","64976dca":"code","47f04db3":"code","157bcfde":"code","316df2cc":"code","a2c3c485":"code","2f1f9d5e":"code","889a3100":"code","dade39e9":"code","a0a0a6d1":"code","260f8d62":"code","c5925ebe":"markdown","531a196d":"markdown","ec520216":"markdown","961b966d":"markdown","c9f60188":"markdown","1fe9e3e4":"markdown","6413375e":"markdown","88e7b55b":"markdown","7c1a9259":"markdown","65563ffa":"markdown"},"source":{"c1165b0d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ac47a0fd":"!pip install fastai2","e7cf7c97":"!pip install fastcore==0.1.35 ##Currently supported with fastai2","05068735":"import fastcore\nfastcore.__version__\n","bef68a67":"import fastai2\nfastai2.__version__","a905891f":"from fastai2.tabular.all import *\n","b6676d9e":"df_test= pd.read_csv('\/kaggle\/input\/titanic-extended\/test.csv')\ndf_train= pd.read_csv('..\/input\/titanic-extended\/train.csv')\ndf_train.head()","7b94804f":"df_train.describe()","2cd75280":"df_train.isnull().sum().sort_index()\/len(df_train)","c224a6ca":"df_train.dtypes\ng_train =df_train.columns.to_series().groupby(df_train.dtypes).groups\ng_train","97a07f95":"cat_names= [\n        'Name', 'Sex', 'Ticket', 'Cabin', \n        'Embarked', 'Name_wiki', 'Hometown', \n        'Boarded', 'Destination', 'Lifeboat', \n        'Body'\n]\n\ncont_names = [ \n    'PassengerId', 'Pclass', 'SibSp', 'Parch', \n    'Age', 'Fare', 'WikiId', 'Age_wiki','Class'\n ]","2e3def0e":"splits = RandomSplitter(valid_pct=0.2)(range_of(df_train))\n\nto = TabularPandas(df_train, procs=[Categorify, FillMissing,Normalize],\n                   cat_names = cat_names,\n                   cont_names = cont_names,\n                   y_names='Survived',\n                   splits=splits)","86ed75dc":"#df_train.dtypes\ng_train =to.train.xs.columns.to_series().groupby(to.train.xs.dtypes).groups\ng_train\n","65bb4d05":"to.train.xs.Age_na.head()","c4960af5":"to.train","2ba33653":"to.train.xs","784a2472":"to.train.ys.values.ravel()","e3ccfb0b":"from sklearn.ensemble import RandomForestClassifier\n\nX_train, y_train = to.train.xs, to.train.ys.values.ravel()\nX_valid, y_valid = to.valid.xs, to.valid.ys.values.ravel()","b2ca97a8":"X_train.head()","56e5434e":"rnf_classifier= RandomForestClassifier(n_estimators=100, n_jobs=-1)\nrnf_classifier.fit(X_train,y_train)","6989a720":"y_pred=rnf_classifier.predict(X_valid)\n\n\nfrom sklearn.metrics import accuracy_score\n\naccuracy_score(y_pred, y_valid)","3d02ae1e":"df_test.head()","64976dca":"df_test.dtypes\ng_train =df_test.columns.to_series().groupby(df_test.dtypes).groups\ng_train","47f04db3":"cat_names= [\n        'Name', 'Sex', 'Ticket', 'Cabin', \n        'Embarked', 'Name_wiki', 'Hometown', \n        'Boarded', 'Destination', 'Lifeboat', \n        'Body'\n]\n\ncont_names = [ \n    'PassengerId', 'Pclass', 'SibSp', 'Parch', \n    'Age', 'Fare', 'WikiId', 'Age_wiki','Class'\n ]","157bcfde":"test = TabularPandas(df_test, procs=[Categorify, FillMissing,Normalize],\n                   cat_names = cat_names,\n                   cont_names = cont_names,\n                   )","316df2cc":"X_test= test.train.xs","a2c3c485":"X_test.head()","2f1f9d5e":"X_test.dtypes\ng_train =X_test.columns.to_series().groupby(X_test.dtypes).groups\ng_train","889a3100":"X_test= X_test.drop('Fare_na', axis=1)","dade39e9":"y_pred=rnf_classifier.predict(X_test)","a0a0a6d1":"y_pred= y_pred.astype(int)","260f8d62":"output= pd.DataFrame({'PassengerId':df_test.PassengerId, 'Survived': y_pred})\noutput.to_csv('my_submission_titanic.csv', index=False)\noutput.head()","c5925ebe":"Now this might be a bit puzzling if you are new to fastai. And its completely alright.\n\ncat_names refers to the features which are categorical.\n\ncont_names refers to the features which are continuous. For example : int and float\n\nfastai needs them in order to do preprocessing for you properly","531a196d":"doing the same preprocessing we did for training set","ec520216":"# **Introduction**","961b966d":"# **FastAI2**","c9f60188":"Generally what happens is, we cannot use the output of tabularpandas straightaway. So we need to access it as follows.. just taking peek at train data(for validation data replace train with valid)","1fe9e3e4":"using 'xs' to get the table in the manner we are used to see it. Notice that it is without 'Survived' column","6413375e":"now we are diving into fastai2. looking down at code. Might be new and intimidating. But no worries, following the documentation helped me. https:\/\/docs.fast.ai\/tutorial.tabular\n\nHere we are using fastai TabularPandas library. Which will do all the preprocessing for us. before that splitting our data into validation set to have a fair amount of idea that we are not overfitting the data. valid_pct= 0.2 means (as you may have guessed by now) it means 20% validation data.\n\ny_names, using column we are targetting to be predicted. procs are [Categorify, FillMissing,Normalize], Convering objects into category, filling the missing value and normalizing the content for quick processing.\n\nNOTE: Tabularpandas function creates a new column if there is any missing value spotted in any particular feature(only float or int column). for example: lets say Fare has a missing value somewhere. It will create a new column named 'Fare_na' where it will have integer values (1 or 2).","88e7b55b":"# **Output**","7c1a9259":"This is my first notebook submission. Please let me know if i can improve incase i have left some things unexplained. We are not USING EDA here. Only automatic preprocessing data in fastai and training model and getting score of top1%.\n\nHere, we are using dataset which is a bit extension of classic titanic dataset. you can check out this: https:\/\/www.kaggle.com\/pavlofesenko\/titanic-extended\n\nAnd It is fair to use this, i reckon. We are not altering test data at all. Only using new features(Like how we generate new features). Number of rows remains same in both test and training data.\n\nWe will be using newly released fastai2.0 library and standard sklearn. fastai2.0 is worth checking out https:\/\/docs.fast.ai\/ It is more fast and efficient. With this, we can minimize our effort for preprocessing and gain better results.","65563ffa":"# **Test**"}}