{"cell_type":{"5d9218bf":"code","9f1f4e07":"code","355decad":"code","64d11038":"code","1c7e0885":"code","40d0e3f0":"code","41d4b165":"code","b1492d36":"code","aaa8e745":"code","61b7144e":"code","84a84225":"code","52074c0c":"code","01915e95":"code","d0d107eb":"code","c1c6ba0f":"code","4b40dc91":"code","f55c5280":"code","f4d67cfe":"code","ea89b007":"code","913d94ad":"code","c6cb1e7a":"code","e3447d8e":"code","3d36cc85":"code","842cfdd3":"code","a2609fb7":"code","83a6246a":"code","6ec04807":"code","d68c765a":"code","146299c2":"code","8c491bdf":"code","f66ffb5f":"code","1d5dd43c":"code","509a85de":"code","565aeaef":"code","711cd25d":"code","9e6424c1":"code","3b3f16c9":"code","cb9dfb7a":"code","10be28af":"code","204c3297":"code","36c24795":"code","ebff87cf":"code","5844a4b3":"code","e8e1b82a":"code","92416b0b":"code","f5e6a731":"code","cb629748":"markdown","3621cdc8":"markdown","33da9436":"markdown","e7ed0095":"markdown","2f4dc992":"markdown","444b29a1":"markdown","10c13145":"markdown","4c0b3670":"markdown","167ed664":"markdown","f876dee6":"markdown","61af910c":"markdown","74a2fc48":"markdown","a8871762":"markdown","ab044ab3":"markdown"},"source":{"5d9218bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression, Lasso\nfrom sklearn.preprocessing import LabelEncoder, RobustScaler# LabelEncoder: Encode target labels with value between 0 and n_classes-1.\nfrom sklearn.model_selection import GridSearchCV,KFold,cross_val_score\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.pipeline import make_pipeline\n\nfrom scipy.stats import skew # for a normal distributed data skew is zero, a skewness value greater than zero\n                            # means that there is more weight in the right tail of the distribution\n\nfrom scipy.special import boxcox1p\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9f1f4e07":"X_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nX = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nX.head()","355decad":"# Printing top 7 rows\nX_test.head(7)","64d11038":"# Printing shape with '.shape'\nX.shape,X_test.shape","1c7e0885":"X.isnull().sum()[X.isnull().sum()>0] # Counting null values and printing them of X_train","40d0e3f0":"X_test.isnull().sum()[X_test.isnull().sum()>0] # Counting null values and printing them of X_test","41d4b165":"corr=X.corr() # corr() is used to find the pairwise correlation of all columns in X\nplt.figure(figsize=(10,10))\nsns.heatmap(X[corr.index[abs(corr['SalePrice'])>0.4]].corr(),annot=True) # for simpler view\nplt.show()","b1492d36":"# Filling null values.\nfillnull={ 'PoolQC':'NoPool', 'MiscFeature':'NoMisc', 'Alley':'NoAlley', 'Fence':'NoFence', 'FireplaceQu':'NoFire' }\nX.fillna(fillnull,inplace=True)\nX_test.fillna(fillnull,inplace=True)","aaa8e745":"X.drop(X[X.GrLivArea>4000].index.values,inplace=True)","61b7144e":"plt.plot((X.LotArea)**0.5,X.LotFrontage,'.', color='red') # LotArea is square unit and LotFrontage is not so using square-root\nplt.xlabel('LotArea', size=13)\nplt.ylabel('LotFrontage', size=13)\nplt.show()","84a84225":"X.drop(X[X.LotFrontage>300].index.values,inplace=True)\nX.drop(X[X.LotArea>100000].index.values,inplace=True)\nX.shape","52074c0c":"plt.plot((X.LotArea)**0.5,X.LotFrontage,'.')\nplt.xlabel('LotArea', size=13)\nplt.ylabel('LotFrontage', size=13)\nplt.show()","01915e95":"reg=LinearRegression()\nreg.fit(((X[(X.LotArea<35000) & (X.LotFrontage<200)].LotArea)**0.5).values.reshape(-1,1),X[(X.LotArea<35000) & (X.LotFrontage<200)].LotFrontage.values)\nreg.intercept_,reg.coef_[0] # The coef_ contain the coefficients for the prediction of each of the targets","d0d107eb":"X.loc[X.LotFrontage.isnull(),'LotFrontage']=reg.predict((X[X.LotFrontage.isnull()].LotArea.values.reshape(-1,1))**0.5)\nX_test.loc[X_test.LotFrontage.isnull(),'LotFrontage']=reg.predict((X_test[X_test.LotFrontage.isnull()].LotArea.values.reshape(-1,1))**0.5)","c1c6ba0f":"X_test.GarageYrBlt.describe()","4b40dc91":"X_test[X_test.GarageYrBlt>2018].GarageYrBlt","f55c5280":"X_test.GarageYrBlt.replace({2207:2007},inplace=True)","f4d67cfe":"fillnull={ 'GarageType':'NoGarage', 'GarageFinish':'NoGarage', 'GarageQual':'NoGarage', 'GarageCond':'NoGarage', 'BsmtQual':'NoBsmt', 'BsmtCond':'NoBsmt', 'BsmtExposure':'NoBsmt', 'BsmtFinType1':'NoBsmt', 'BsmtFinType2':'NoBsmt' }\nX.fillna(fillnull,inplace=True)\nX_test.fillna(fillnull,inplace=True)","ea89b007":"X.MasVnrType.fillna(\"None\",inplace=True)\nX_test.MasVnrType.fillna(\"None\",inplace=True)\nX.MasVnrArea.fillna(0,inplace=True)\nX_test.MasVnrArea.fillna(0,inplace=True)\nX.Electrical.fillna(\"SBrkr\",inplace=True)","913d94ad":"fillwithmode=['MSZoning','Utilities','Exterior1st','Exterior2nd','KitchenQual','Functional','SaleType']\nfor column in fillwithmode:\n    mode=X[column].mode()[0]\n    X_test[column].fillna(mode,inplace=True)\nfillwithzero=['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath']\nfor column in fillwithzero:\n    X_test[column].fillna(0,inplace=True)\nfillwithmedian=['GarageArea','GarageCars']\nfor column in fillwithmedian:\n    median=X[column].median()\n    X_test[column].fillna(median,inplace=True)\nX_test.isnull().sum()[X_test.isnull().sum()>0]","c6cb1e7a":"X.isnull().sum()[X.isnull().sum()>0]","e3447d8e":"le=LabelEncoder()\ndummies=pd.get_dummies(X.MSZoning,prefix='MSZoning')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.MSZoning,prefix='MSZoning')\nX_test=pd.concat([X_test,dummies],axis=1)\nX.loc[:,'Street']=le.fit_transform(X.Street.values)\nX_test.loc[:,'Street']=le.transform(X_test.Street.values)\nmapping={'NoAlley':0,'Grvl':1,'Pave':2}\nX.Alley.replace(mapping,inplace=True)\nX_test.Alley.replace(mapping,inplace=True)\nmapping={'IR3':0,'IR2':1,'IR1':2,'Reg':3}\nX.LotShape.replace(mapping,inplace=True)\nX_test.LotShape.replace(mapping,inplace=True)\nmapping={'Low':0,'HLS':1,'Bnk':2,'Lvl':3}\nX.LandContour.replace(mapping,inplace=True)\nX_test.LandContour.replace(mapping,inplace=True)\nX.drop('Utilities',axis=1,inplace=True)\nX_test.drop('Utilities',axis=1,inplace=True)\ndummies=pd.get_dummies(X.LotConfig,prefix='LotConfig')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.LotConfig,prefix='LotConfig')\nX_test=pd.concat([X_test,dummies],axis=1)\nX.loc[:,'LandSlope']=le.fit_transform(X.LandSlope.values)\nX_test.loc[:,'LandSlope']=le.transform(X_test.LandSlope.values)\ndummies=pd.get_dummies(X.Neighborhood,prefix='Neigh')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.Neighborhood,prefix='Neigh')\nX_test=pd.concat([X_test,dummies],axis=1)","3d36cc85":"dummies=pd.get_dummies(X.Condition1,prefix='Cond1')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.Condition1,prefix='Cond1')\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.Condition2,prefix='Cond2')\nX=pd.concat([X,dummies],axis=1)\nX['Cond2_RRNe']=0\ndummies=pd.get_dummies(X_test.Condition2,prefix='Cond2')\nX_test=pd.concat([X_test,dummies],axis=1)\nX_test['Cond2_RRAe']=0\nX_test['Cond2_RRAn']=0\nX_test['Cond2_RRNn']=0\nX_test['Cond2_RRNe']=0\nconditions=X.Condition1.unique()\nfor cond in conditions:\n    X['Cond_'+cond]=((X['Cond1_'+cond]+X['Cond2_'+cond])>0)*1\n    X_test['Cond_'+cond]=((X_test['Cond1_'+cond]+X_test['Cond2_'+cond])>0)*1\n    X.drop(['Cond1_'+cond,'Cond2_'+cond],axis=1,inplace=True)\n    X_test.drop(['Cond1_'+cond,'Cond2_'+cond],axis=1,inplace=True)","842cfdd3":"dummies=pd.get_dummies(X.BldgType,prefix='BldgType')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.BldgType,prefix='BldgType')\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.HouseStyle,prefix='HouseStyle')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.HouseStyle,prefix='HouseStyle')\ndummies['HouseStyle_2.5Fin']=0\ndummies.sort_index(axis=1,inplace=True)\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.RoofStyle,prefix='RoofStyle')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.RoofStyle,prefix='RoofStyle')\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.RoofMatl,prefix='RoofMatl')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.RoofMatl,prefix='RoofMatl')\ndummies['RoofMatl_Roll']=0\ndummies['RoofMatl_Membran']=0\ndummies['RoofMatl_Metal']=0\ndummies.sort_index(axis=1,inplace=True)\nX_test=pd.concat([X_test,dummies],axis=1)","a2609fb7":"X.Exterior1st.unique()","83a6246a":"X_test.Exterior1st.unique()","6ec04807":"X.Exterior2nd.unique()","d68c765a":"X_test.Exterior2nd.unique()","146299c2":"mapping={ 'Wd Shng':'WdShing','Brk Cmn':'BrkComm','CmentBd':'CemntBd' }\nX.Exterior2nd.replace(mapping,inplace=True)\nX_test.Exterior2nd.replace(mapping,inplace=True)\na=X.Exterior1st.value_counts()\nb=X.Exterior2nd.value_counts()\nc=pd.concat([a,b],axis=1,sort=True)\nc.plot.bar(stacked=True)\nplt.show()","8c491bdf":"dummies=pd.get_dummies(X.Exterior1st,prefix='Ext1')\ndummies['Ext1_Other']=0\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.Exterior1st,prefix='Ext1')\ndummies['Ext1_ImStucc']=0\ndummies['Ext1_Stone']=0\ndummies['Ext1_Other']=0\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.Exterior2nd,prefix='Ext2')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.Exterior2nd,prefix='Ext2')\ndummies['Ext2_Other']=0\nX_test=pd.concat([X_test,dummies],axis=1)\nexteriors=X.Exterior2nd.unique()\nfor ext in exteriors:\n    X['Ext_'+ext]=((X['Ext1_'+ext]+X['Ext2_'+ext])>0)*1\n    X_test['Ext_'+ext]=((X_test['Ext1_'+ext]+X_test['Ext2_'+ext])>0)*1\n    X.drop(['Ext1_'+ext,'Ext2_'+ext],axis=1,inplace=True)\n    X_test.drop(['Ext1_'+ext,'Ext2_'+ext],axis=1,inplace=True)","f66ffb5f":"dummies=pd.get_dummies(X.MasVnrType,prefix='MVT')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.MasVnrType,prefix='MVT')\nX_test=pd.concat([X_test,dummies],axis=1)\nmapping={ 'Ex':4,'Gd':3,'TA':2,'Fa':1,'Po':0 }\nX.ExterQual.replace(mapping,inplace=True)\nX_test.ExterQual.replace(mapping,inplace=True)\nX.ExterCond.replace(mapping,inplace=True)\nX_test.ExterCond.replace(mapping,inplace=True)\ndummies=pd.get_dummies(X.Foundation,prefix='Foundation')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.Foundation,prefix='Foundation')\nX_test=pd.concat([X_test,dummies],axis=1)\nX['NoBsmt']=(X.BsmtQual=='NoBsmt')*1\nX_test['NoBsmt']=(X_test.BsmtQual=='NoBsmt')*1\nmapping={ 'Ex':4,'Gd':3,'TA':2,'Fa':1,'Po':0,'NoBsmt':-1 }\nX.BsmtQual.replace(mapping,inplace=True)\nX_test.BsmtQual.replace(mapping,inplace=True)\nX.BsmtCond.replace(mapping,inplace=True)\nX_test.BsmtCond.replace(mapping,inplace=True)\nmapping={ 'Gd':4,'Av':3,'Mn':2,'No':1,'NoBsmt':0 }\nX.BsmtExposure.replace(mapping,inplace=True)\nX_test.BsmtExposure.replace(mapping,inplace=True)","1d5dd43c":"X['BsmtFinSF']=X.BsmtFinSF1+X.BsmtFinSF2\nX_test['BsmtFinSF']=X_test.BsmtFinSF1+X_test.BsmtFinSF2","509a85de":"mapping={'GLQ':6,'ALQ':5,'BLQ':4,'Rec':3,'LwQ':2,'Unf':1,'NoBsmt':0}\nX.BsmtFinType1.replace(mapping,inplace=True)\nX_test.BsmtFinType1.replace(mapping,inplace=True)\nX.BsmtFinType2.replace(mapping,inplace=True)\nX_test.BsmtFinType2.replace(mapping,inplace=True)\ndummies=pd.get_dummies(X.Heating,prefix='Heating')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.Heating,prefix='Heating')\ndummies['Heating_OthW']=0\ndummies['Heating_Floor']=0\ndummies.sort_index(axis=1,inplace=True)\nX_test=pd.concat([X_test,dummies],axis=1)\nmapping={ 'Ex':4,'Gd':3,'TA':2,'Fa':1,'Po':0 }\nX.HeatingQC.replace(mapping,inplace=True)\nX_test.HeatingQC.replace(mapping,inplace=True)\nX.loc[:,'CentralAir']=le.fit_transform(X.CentralAir.values)\nX_test.loc[:,'CentralAir']=le.transform(X_test.CentralAir.values)\ndummies=pd.get_dummies(X.Electrical,prefix='Electrical')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.Electrical,prefix='Electrical')\ndummies['Electrical_Mix']=0\ndummies.sort_index(axis=1,inplace=True)\nX_test=pd.concat([X_test,dummies],axis=1)","565aeaef":"X['TotalSF']=X['TotalBsmtSF']+X['1stFlrSF']+X['2ndFlrSF']\nX_test['TotalSF']=X_test['TotalBsmtSF']+X_test['1stFlrSF']+X_test['2ndFlrSF']","711cd25d":"mapping={ 'Ex':4,'Gd':3,'TA':2,'Fa':1,'Po':0 }\nX.KitchenQual.replace(mapping,inplace=True)\nX_test.KitchenQual.replace(mapping,inplace=True)\nmapping= {'Maj1':2,'Maj2':1,'Min1':5,'Min2':4,'Mod':3,'Sev':0,'Typ':6}\nX.Functional.replace(mapping,inplace=True)\nX_test.Functional.replace(mapping,inplace=True)\nmapping={ 'Ex':4,'Gd':3,'TA':2,'Fa':1,'Po':0,'NoFire':-1 }\nX.FireplaceQu.replace(mapping,inplace=True)\nX_test.FireplaceQu.replace(mapping,inplace=True)\nX['NoGarage']=(X.GarageType=='NoGarage')*1\nX_test['NoGarage']=(X_test.GarageType=='NoGarage')*1\ndummies=pd.get_dummies(X.GarageType,prefix='GarageType')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.GarageType,prefix='GarageType')\nX_test=pd.concat([X_test,dummies],axis=1)\nmapping={'Fin':3,'RFn':2,'Unf':1,'NoGarage':0}\nX.GarageFinish.replace(mapping,inplace=True)\nX_test.GarageFinish.replace(mapping,inplace=True)\nmapping={ 'Ex':4,'Gd':3,'TA':2,'Fa':1,'Po':0,'NoGarage':-1 }\nX.GarageQual.replace(mapping,inplace=True)\nX_test.GarageQual.replace(mapping,inplace=True)\nX.GarageCond.replace(mapping,inplace=True)\nX_test.GarageCond.replace(mapping,inplace=True)\nX.loc[:,'PavedDrive']=le.fit_transform(X.PavedDrive.values)\nX_test.loc[:,'PavedDrive']=le.transform(X_test.PavedDrive.values)\nmapping={'Ex':3,'Gd':2,'Fa':1,'NoPool':0}\nX.PoolQC.replace(mapping,inplace=True)\nX_test.PoolQC.replace(mapping,inplace=True)\ndummies=pd.get_dummies(X.MiscFeature,prefix='Misc')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.MiscFeature,prefix='Misc')\ndummies['Misc_TenC']=0\nX_test=pd.concat([X_test,dummies],axis=1)\nmapping={'GdPrv':4,'MnPrv':3,'GdWo':2,'MnWw':1,'NoFence':0}\nX.Fence.replace(mapping,inplace=True)\nX_test.Fence.replace(mapping,inplace=True)\nmapping={1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'Jun',7:'Jul',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'}\nX.MoSold.replace(mapping,inplace=True)\nX_test.MoSold.replace(mapping,inplace=True)\ndummies=pd.get_dummies(X.MoSold,prefix='MoSold')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.MoSold,prefix='MoSold')\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.YrSold,prefix='YrSold')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.YrSold,prefix='YrSold')\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.SaleType,prefix='SaleType')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.SaleType,prefix='SaleType')\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.SaleCondition,prefix='SaleCondition')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.SaleCondition,prefix='SaleCondition')\nX_test=pd.concat([X_test,dummies],axis=1)\nX.head()","9e6424c1":"X_test.head(6)","3b3f16c9":"column_drop=['Id','MSZoning','LotConfig','Condition1','Condition2','HouseStyle','RoofStyle','Exterior1st','Exterior2nd','MasVnrType','Foundation','Electrical','GarageType','MiscFeature','YrSold','SaleType','SaleCondition','GarageYrBlt','Neighborhood','BldgType','RoofMatl','Heating','MoSold']\nX.drop(column_drop,axis=1,inplace=True)\nX_test.drop(column_drop,axis=1,inplace=True)\nY=X.SalePrice\nX.drop('SalePrice',axis=1,inplace=True)","cb9dfb7a":"skew(Y)","10be28af":"Y=np.log1p(Y)\nskew(Y)","204c3297":"lst=list(range(56))\nto_extend=[153,165]\nlst.extend(to_extend)\nskew_features=X.iloc[:,lst].apply(lambda x:skew(x)).sort_values(ascending=False)\nskew_features_test=X_test.iloc[:,lst].apply(lambda x:skew(x)).sort_values(ascending=False)\nskewness = pd.DataFrame({'Skew' :skew_features})\nskewness_test = pd.DataFrame({'Skew' :skew_features_test})\nskewness.head()","36c24795":"skewness = skewness[abs(skewness) > 0.5].dropna()\nfeats=skewness.index.values.tolist()\nlam=0.1\nfor feat in feats:\n    X[feat]=boxcox1p(X[feat], lam)\n    X_test[feat]=boxcox1p(X_test[feat], lam)\nX.shape,X_test.shape","ebff87cf":"X.head()","5844a4b3":"X_test.head()","e8e1b82a":"#parameters = {'max_depth':[2,3,4],'n_estimators':[2800,3000,3200],'max_features':['sqrt'],'loss':['huber'],'min_samples_leaf':[14,15,16],'min_samples_split':[9,10,11],'random_state':[0]}\nparameters = {'max_depth':[3],'n_estimators':[3000],'max_features':['sqrt'],'loss':['huber'],'min_samples_leaf':[15],'min_samples_split':[10],'random_state':[0]}\nmodel=GridSearchCV(GradientBoostingRegressor(),parameters,scoring='neg_mean_squared_error',cv=KFold(n_splits=7))\nmodel.fit(X,Y)\nY_test1=model.predict(X_test)\nY_test1=np.exp(Y_test1)-1\n((model.best_score_)*(-1))**0.5","92416b0b":"model=make_pipeline(RobustScaler(),Lasso(0.0004,random_state=0))\nrmslerror=(-cross_val_score(model,X,Y,scoring='neg_mean_squared_error',cv=KFold(n_splits=7)))**0.5\nprint(rmslerror.mean())\nmodel.fit(X,Y)\nY_test2=np.expm1(model.predict(X_test))","f5e6a731":"Y_test=(Y_test1+Y_test2)\/2\nsubmission=pd.DataFrame({'Id':range(1461,2920),'SalePrice':Y_test})\nsubmission.to_csv('submit.csv',index=False)","cb629748":"Total finished area of the basement will be equal to the finished area of basement type 1 & 2. So creating a new feature 'BsmtFinSF' equal to the sum of 'BsmtFinSF1' & 'BsmtFinSF2'.","3621cdc8":"As we can see in Exterior2nd feature 'WdShing' is misspelled as 'Wd Shng', 'BrkComm' is misspelled as 'Brk Cmn' & 'CemntBd' is misspelled as 'CmentBd', so we need to correct these in the dataset.","33da9436":"**Box-Cox Transformation :-**\n\nWe will now apply box cox transformation on features except for the dummy ones. Purpose of the transformation is to reduce skewness of features for modelling. These features have index 0 to 55,153 &165.","e7ed0095":"In next step we will take mean of the above models, advantage of taking mean is that error in one model is compensated by other model.","2f4dc992":"As we can see our target variable Y is highly skewed, so we will apply log transformation on Y.\n\nThis is how log transformation of some variable x is done :-\n\n**x' = log(1+x)**","444b29a1":"Deleting the columns which are not required.","10c13145":"***Thank You!***","4c0b3670":"Correlation matrix of features highly correlated with SalePrice feature.","167ed664":"We can see above that skewness of Y is reduced after applying log transformation.","f876dee6":"Creating a new feature 'TotalSF' equal to sum of area of all floors including basement.","61af910c":"Now filling missing missing values in LotFontage by linear regression between square root of LotArea and LotFrontage by using the logic that area is proportinal to square of length.","74a2fc48":"Reading dataset using pandas.","a8871762":"Maximum value of Garbage Year Built is 2207.0 in test set which is not possible so correcting these values.","ab044ab3":"Dropping data points with above ground living area greater than 4,000 sqr feet."}}