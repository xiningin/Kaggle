{"cell_type":{"03da3832":"code","c7100f20":"code","4f621dda":"code","d2209f0b":"code","bbf6c1d3":"code","91e682b7":"code","9e151c5b":"code","94c39337":"code","2ca0bfb3":"code","afc28f01":"code","50951e8a":"code","7a20fc5f":"code","a1601c93":"code","a0542c79":"code","c45c243b":"code","55d0b97c":"code","d987c79f":"code","63c1a765":"code","8931608c":"code","52ac6420":"code","2211572c":"code","7c3513f4":"code","bdc608e7":"code","d597ff79":"code","21086e59":"code","055d5113":"code","c3c6bcaa":"code","72bd58cf":"code","a06b4e87":"code","a530df8f":"code","e2a0c94f":"code","798729b6":"code","1627496a":"code","a361036c":"code","5a4450e2":"code","7894baa7":"code","af72175c":"code","740f9a77":"code","c311b8a7":"code","0654dd0c":"code","15ac408f":"code","afc7d27d":"code","8780392e":"code","7a841ac2":"code","5b34e283":"code","970ad423":"code","bf0320da":"code","1e6f317e":"code","420f6301":"code","46baed60":"code","cb0b2f1c":"code","ddc2486d":"code","b2bae5fe":"code","ccb7bd2b":"code","6250f936":"code","6c07a208":"code","bbc0d73a":"code","9e77a1a1":"code","d319efeb":"code","bf2b2a85":"code","0f72277c":"code","a2bd49f9":"code","cafe5c16":"code","0aaaa585":"code","281bf939":"code","ce7c26c2":"code","5609fe07":"code","14e48128":"code","11726a3a":"markdown","14e7e24d":"markdown","72d1c048":"markdown","f0116c1d":"markdown","c183aae8":"markdown"},"source":{"03da3832":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.simplefilter('ignore')\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c7100f20":"training_data = pd.read_csv('..\/input\/train.csv')","4f621dda":"training_data.head()","d2209f0b":"training_data.isnull().values.any()","bbf6c1d3":"#gives birdeye view of columns which might have null values\nsns.heatmap(training_data.isnull(),yticklabels=False,cbar=False)","91e682b7":"sns.distplot(training_data['Age'].dropna(),kde=False,bins=30)","9e151c5b":"sns.barplot(x='Pclass',y='Fare',data=training_data,ci=None)","94c39337":"sns.boxplot(x='Pclass',y='Age',data=training_data)","2ca0bfb3":"def compute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 25\n    else:\n        return Age","afc28f01":"training_data['Age'] = training_data[['Age','Pclass']].apply(compute_age,axis=1)","50951e8a":"#gives birdeye view of columns which might have null values\nsns.heatmap(training_data.isnull(),yticklabels=False,cbar=False)","7a20fc5f":"training_data.drop('Cabin',axis=1,inplace=True)","a1601c93":"training_data.isnull().values.any()","a0542c79":"null_columns=training_data.columns[training_data.isnull().any()]\ntraining_data[null_columns].isnull().sum()","c45c243b":"training_data.dropna(inplace=True)","55d0b97c":"training_data.isnull().values.any()","d987c79f":"def categorise_sex(cols):\n    age = cols[0]\n    sex = cols[1]\n    \n    if age<16:\n        return 'child'\n    else:\n        return cols[1]","63c1a765":"training_data['Sex'] = training_data[['Age','Sex']].apply(categorise_sex,axis=1)","8931608c":"sns.countplot(x='Survived',data=training_data,hue='Sex')","52ac6420":"sns.countplot(x='Survived',hue='Pclass',data=training_data)","2211572c":"def is_alone(cols):\n    siblings_or_spouse = cols[0]\n    parents_or_child = cols[1]\n    if (siblings_or_spouse == 0) & (parents_or_child == 0):\n        return 1\n    else:\n        return 0\n\ntraining_data['Is_Alone'] = training_data[['SibSp','Parch']].apply(is_alone,axis=1)","7c3513f4":"training_data.head()","bdc608e7":"sns.countplot(x='Survived',hue='Is_Alone',data=training_data)","d597ff79":"training_data.info()","21086e59":"training_data['Pclass'] = training_data['Pclass'].astype('object')\ntraining_data['Is_Alone'] = training_data['Is_Alone'].astype('object')","055d5113":"embark = pd.get_dummies(training_data['Embarked'],drop_first=True)\nsex = pd.get_dummies(training_data['Sex'],drop_first=True)\npclass = pd.get_dummies(training_data['Pclass'],drop_first=True)","c3c6bcaa":"training_data = pd.concat([training_data,sex,embark,pclass],axis=1)","72bd58cf":"training_data.head()","a06b4e87":"training_data.drop(['Sex','Embarked','Name','Ticket','Pclass','SibSp','Parch'],axis=1,inplace=True)","a530df8f":"training_data.head()","e2a0c94f":"training_data.drop('PassengerId',axis=1,inplace=True)","798729b6":"X = training_data.drop('Survived',axis=1)\ny = training_data['Survived']\n\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3)\n\nfrom sklearn.linear_model import LogisticRegression\n\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","1627496a":"pred = logmodel.predict(X_test)","a361036c":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test,pred))","5a4450e2":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train,y_train)\nrfc_pred = rfc.predict(X_test)\nprint(classification_report(y_test,rfc_pred))","7894baa7":"#tuning RFClassifier to get best results\n\nfrom sklearn.model_selection import GridSearchCV\n\nn_folds = 5\n\n# parameters to build the model on\nparameters = {'max_depth': range(10, 30, 3),\n              'min_samples_leaf': [3,4,5,6] }\n\n# instantiate the model\nrf = RandomForestClassifier(random_state=42)\n\nrf = GridSearchCV(rf, param_grid=parameters,\n                  cv=n_folds, \n                 scoring=\"accuracy\")\n\nrf.fit(X_train,y_train)\n\nprint('\\n'+'Enter the best parameters: ',rf.best_params_)\n\nrf_tuned = RandomForestClassifier(bootstrap=True,\n                             max_depth=rf.best_params_['max_depth'],\n                             min_samples_leaf=rf.best_params_['min_samples_leaf'],\n                             n_estimators=100,\n                             random_state=42)\n\nrf_tuned.fit(X_train,y_train)\n\nrf_tuned_pred = rf_tuned.predict(X_test)\n\nprint(classification_report(y_test,rf_tuned_pred))","af72175c":"#Using SVM\n\nfrom sklearn.svm import SVC\n\nmodel = SVC()\n\nmodel.fit(X_train,y_train)\n\nSVM_predictions = model.predict(X_test)\n\nprint(classification_report(y_test,SVM_predictions))","740f9a77":"#tuning SVM to get best results\nparam_grid = {'C':[0.1,1,10,100,1000,10000,100000],'gamma':[1,.1,.01,.001,.0001,.00001]}\ngrid = GridSearchCV(SVC(),param_grid,verbose=3)\n\ngrid.fit(X_train,y_train)","c311b8a7":"grid.best_params_","0654dd0c":"grid.best_estimator_","15ac408f":"grid_predictions = grid.predict(X_test)\nprint(classification_report(y_test,grid_predictions))","afc7d27d":"testing_data = pd.read_csv('..\/input\/test.csv')","8780392e":"testing_data.head()","7a841ac2":"testing_data['Age'] = testing_data[['Age','Pclass']].apply(compute_age,axis=1)","5b34e283":"testing_data.head()","970ad423":"testing_data['Sex'] = testing_data[['Age','Sex']].apply(categorise_sex,axis=1)","bf0320da":"testing_data['Is_Alone'] = testing_data[['SibSp','Parch']].apply(is_alone,axis=1)","1e6f317e":"test_data = testing_data[['Pclass','Sex','Age','Fare','Embarked', 'Is_Alone']]","420f6301":"test_data.head()","46baed60":"#gives birdeye view of columns which might have null values\nsns.heatmap(test_data.isnull(),yticklabels=False,cbar=False)","cb0b2f1c":"test_data.isnull().values.any()","ddc2486d":"null_columns=test_data.columns[test_data.isnull().any()]\ntest_data[null_columns].isnull().sum()","b2bae5fe":"ax = sns.boxplot(x='Pclass',y='Fare',data=test_data)\nax.set_ylim(0,100)","ccb7bd2b":"def compute_fare(cols):\n    Fare = cols[1]\n    Pclass = cols[0]\n    if pd.isnull(Fare):\n        if Pclass == 1:\n            return 60\n        elif Pclass == 2:\n            return 18\n        else:\n            return 15\n    else:\n        return Fare","6250f936":"test_data['Fare'] = test_data[['Pclass','Fare']].apply(compute_fare,axis=1)","6c07a208":"test_data.isnull().values.any()","bbc0d73a":"test_data['Pclass'] = test_data['Pclass'].astype('object')\ntest_data['Is_Alone'] = test_data['Is_Alone'].astype('object')","9e77a1a1":"test_embark = pd.get_dummies(test_data['Embarked'],drop_first=True)\ntest_sex = pd.get_dummies(test_data['Sex'],drop_first=True)\ntest_pclass = pd.get_dummies(test_data['Pclass'],drop_first=True)","d319efeb":"test_data = pd.concat([test_data,test_embark,test_pclass,test_sex],axis=1)","bf2b2a85":"test_data.head()","0f72277c":"test_data.drop(['Sex','Pclass','Embarked'],axis=1,inplace=True)","a2bd49f9":"test_data.head()","cafe5c16":"predictions = rf_tuned.predict(test_data)","0aaaa585":"predictions = pd.Series(predictions)","281bf939":"result = pd.concat([testing_data['PassengerId'],predictions],axis=1)","ce7c26c2":"result.columns = ['PassengerId','Survived']","5609fe07":"result.head()","14e48128":"filename = 'Titanic Predictions - RF_TUNED.csv'\n\nresult.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","11726a3a":"The passengers in class 1 were wealthier as compared to the ones in class 2 and 3","14e7e24d":"Shows that as the class increasing the age decreases - wealthier passengers are older. We will use this data to fill in the Null values in age column!","72d1c048":"As most of the cabin data is not defined, if we compute the missing data from the very less known data, it might lead to distorted computations. Hence it is best to not take this column into consideration at all.","f0116c1d":"Of the people who survived, most of them were the wealthier ones in class 1 while the ones who died were mostly the ones in the lowest passenger class.","c183aae8":"Of the people who managed to survive, mostly were women and of the people who died, mostly were men."}}