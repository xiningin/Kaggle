{"cell_type":{"30a122d6":"code","d94c2d50":"code","efffffb4":"code","13e7f28c":"code","815b5d3d":"code","05487427":"code","80003e5e":"code","f0900d5c":"code","3c259dc2":"code","599baed3":"code","f69ec40f":"code","1d5cd645":"code","6cc3a7be":"code","11c8842b":"code","b11ede51":"code","278e0520":"code","f61c877c":"markdown","ee016959":"markdown"},"source":{"30a122d6":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\nimport plotly.express as px\nimport plotly.graph_objects as go\ncolorMap = sns.light_palette(\"blue\", as_cmap=True)\nimport warnings\nwarnings.filterwarnings('ignore')\ncolorMap = sns.light_palette(\"blue\", as_cmap=True)\nimport missingno as msno\n\ninternet = True\ndebug = False","d94c2d50":"if internet:\n    #install datatable\n    !pip install datatable > \/dev\/null\n    import datatable as dt","efffffb4":"%%time\n\nif internet:\n    train_data_datatable = dt.fread('..\/input\/jane-street-market-prediction\/train.csv')\n    train_data = train_data_datatable.to_pandas()\nelse:\n    train_data = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')","13e7f28c":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, LSTM, Bidirectional\nfrom keras.regularizers import l2\nfrom keras.initializers import GlorotNormal\nfrom keras.optimizers import Adam\nfrom sklearn.preprocessing import MinMaxScaler","815b5d3d":"features_csv = pd.read_csv('..\/input\/jane-street-market-prediction\/features.csv')","05487427":"x_data = np.array([])\nnumber_of_tags = 28\nfor i in range(number_of_tags+1):\n    tag_col = features_csv[f'tag_{i}']\n    true_index = tag_col.to_numpy().nonzero()\n    arr = pd.Series(train_data[f'feature_{true_index[0][0]}']).to_numpy().reshape(-1, 1)\n    for j in range(1, len(true_index[0])):\n        tmp = train_data[f'feature_{true_index[0][j]}'].to_numpy()\n        arr = np.insert(arr, 0, tmp, axis=1)\n    \n    val = np.nanmean(arr, axis=1)\n    \n    if i == 0:\n        x_data = val.reshape(-1, 1)\n    else:\n        x_data = np.insert(x_data, i, val, axis=1)\n    \n    print(i)","80003e5e":"x_data = np.insert(x_data, 0, train_data['feature_0'].to_numpy(), axis=1)","f0900d5c":"weights = pd.Series(train_data['weight']).to_numpy()\nresp = pd.Series(train_data['resp'])\nresp_np = resp.to_numpy()\nresp_np = resp_np.reshape(-1, 1)\n\nfor i in range(1, 5):\n    tmp_resp = pd.Series(train_data[f'resp_{i}'])\n    resp += tmp_resp\n    resp_np = np.insert(resp_np, 0, tmp_resp.to_numpy(), axis=1)","3c259dc2":"#np_resp = resp.to_numpy().reshape(-1, 1)\n\nresp_scaler = MinMaxScaler(feature_range=(-1,1))\nfeature_scaler = MinMaxScaler(feature_range=(-1,1))\n\nxt_data = np.nan_to_num(x_data)\nx_train = xt_data.copy()\n#x_train = feature_scaler.fit_transform(xt_data)\n#y_train = np.count_nonzero(resp_np > 0, axis=1)\/5\n\ny_train = (np.count_nonzero(resp_np > 0, axis = 1) >= 3)\ny_train = y_train.reshape(-1, 1)","599baed3":"val_x_train = x_train[2300000:len(x_train)]\nval_y_train = y_train[2300000:len(y_train)]\nx_train = x_train[:2300000]\ny_train = y_train[:2300000]","f69ec40f":"import xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\n\"\"\"\nclf = xgb.XGBClassifier(\n    n_estimators=4000,\n    max_depth=11,\n    learning_rate=0.005,\n    subsample=0.9,\n    colsample_bytree=0.7,\n    missing=-999,\n    random_state=2020,\n    tree_method='gpu_hist'\n)\n\"\"\"\n\nclf = xgb.XGBClassifier(\n    n_estimators=50000,\n    max_depth=6,\n    learning_rate=0.0005,\n    tree_method='gpu_hist',\n    subsample=0.7,\n    colsample_bytree=0.7,\n    objective='binary:logistic',\n    seed=42\n    )\n\n%time clf.fit(x_train, y_train, early_stopping_rounds=50, eval_set=[(val_x_train, val_y_train)], verbose = 0)","1d5cd645":"np.count_nonzero(clf.predict(val_x_train) == val_y_train.reshape(-1))\/len(val_x_train)","6cc3a7be":"\"\"\"\nif not debug:\n    model = Sequential()\n    model.add(Dense(units=30, kernel_regularizer=l2(1e-4), kernel_initializer=GlorotNormal(),\n                   activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(units=64, kernel_regularizer=l2(1e-4), kernel_initializer=GlorotNormal(),\n                   activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(units=64, kernel_regularizer=l2(1e-4), kernel_initializer=GlorotNormal(),\n                   activation='relu'))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=Adam(learning_rate=0.00001))\n    model.fit(x_train, y_train, epochs=2, batch_size=32, \n              validation_data=(x_train[:1000], y_train[:1000]))\nelse:\n    model = Sequential()\n    model.add(Dense(units=16, kernel_regularizer=l2(1e-4), kernel_initializer=GlorotNormal()))\n    model.add(Dense(1))\n    model.compile(loss='mse', optimizer=Adam(learning_rate=0.0001))\n    model.fit(x_train, y_train, epochs=1, batch_size=128, validation_data=(x_train[:1000], y_train[:1000]))\n\"\"\"","11c8842b":"f = clf.predict(x_train[0].reshape(1, -1))\nf[0]","b11ede51":"import janestreet\nenv = janestreet.make_env() # initialize the environment\niter_test = env.iter_test() # an iterator which loops over the test set","278e0520":"import time\n\nstart = time.perf_counter()\n\nif not debug:\n    index_list = []\n    for i in range(number_of_tags+1):\n        index_list.append(features_csv[f'tag_{i}'].to_numpy().nonzero())\n\n    for (test_df, sample_prediction_df) in iter_test:\n        if test_df.iloc[0]['weight'] <= 0:\n            sample_prediction_df.action = 0\n            env.predict(sample_prediction_df)\n            continue\n\n        val_list = np.array(test_df.iloc[0])[3:]\n        pred = np.zeros([2+number_of_tags])\n        pred[0] = test_df['feature_0'].to_numpy()[0]\n        for i in range(number_of_tags+1):\n            val = 0\n            cnt = 0\n            for j in index_list[i][0]:\n                feature_num = val_list[j-1]\n                if np.isnan(feature_num):\n                    continue\n                val += feature_num\n                cnt += 1\n\n            if cnt != 0:\n                val \/= cnt\n\n            pred[i+1] = val\n\n        pred = pred.reshape(1, -1)\n        action = clf.predict(pred)\n        sample_prediction_df.action = 1 if action[0] == True else 0 #make your 0\/1 prediction here\n        env.predict(sample_prediction_df)\n\n    print(time.perf_counter()-start)","f61c877c":"preprocessing","ee016959":"https:\/\/www.kaggle.com\/c\/jane-street-market-prediction\/data?select=train.csv\n\nhttps:\/\/www.kaggle.com\/carlmcbrideellis\/jane-street-eda-of-day-0-and-feature-importance\n\nhttps:\/\/www.analyticsvidhya.com\/blog\/2016\/03\/complete-guide-parameter-tuning-xgboost-with-codes-python\/"}}