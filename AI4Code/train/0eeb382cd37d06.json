{"cell_type":{"9c354cb5":"code","543721a4":"code","dc7feebb":"code","c900e2e4":"code","1cd31ac6":"code","848724e7":"code","fc98770e":"code","c747ee35":"code","529ada23":"code","9b3540fd":"code","d849f61d":"code","c1c65782":"code","c252584c":"code","9482d747":"code","9803ab4b":"code","a3f338ee":"code","5c2e0e1c":"code","eea70c6a":"code","d5068985":"code","93a4f969":"code","64706020":"code","dc194d47":"code","7cd6e414":"code","41472286":"code","8345c598":"code","91c84a05":"code","e5d40bd8":"code","5f4b2cde":"code","ad339e71":"code","72502d06":"code","9d261600":"code","60c5f741":"code","a0f40c17":"code","621b96fe":"code","a2b2f55c":"code","27621cbc":"code","363e11a0":"code","5bd1956c":"code","0332802a":"code","21bbab68":"code","b8993088":"code","0c688e64":"code","fd4ef4c8":"code","8238cca8":"code","53f12cbb":"code","371f1a74":"code","62ef91e5":"code","99071abd":"code","0ae42c23":"code","d0234df5":"code","efc8e9a7":"code","c2491bda":"code","45311a0a":"code","8c11a853":"code","0dba3ae1":"code","4d022775":"code","287da1ad":"code","20ae2571":"code","d8bcec84":"code","e804e233":"code","e9ec04d2":"code","0f7d10c2":"code","67ae9a42":"code","3b6553ea":"code","eb533333":"code","cb3d4a60":"code","5ae92cc0":"code","395a572d":"code","064eba03":"code","ba0deb8b":"code","f38020a1":"code","6a483eb8":"code","8365d6cc":"code","56feae74":"code","e05cb991":"code","a97d4c46":"code","44168c45":"code","6dc822f5":"code","7a1064e9":"code","b49a2d46":"code","97fbe5b8":"code","d9fce8c2":"code","8de42dec":"code","fa0fd118":"code","e80852eb":"code","1cc54002":"code","a02b41bc":"code","3161678e":"code","4936a92f":"code","6c09929e":"code","ca7df541":"code","1c468972":"markdown","354fb460":"markdown","123a3825":"markdown","6075c34d":"markdown","1f41bbb2":"markdown","9fed3282":"markdown","2643b168":"markdown","9165a0f7":"markdown","122c53a7":"markdown","9eee1298":"markdown","5176af12":"markdown","9a7a85ca":"markdown","9053cb96":"markdown","ee50f2b9":"markdown","adabf941":"markdown","510dbfa0":"markdown","59e8caef":"markdown","9929a846":"markdown","3564a0e7":"markdown","2fc65ff4":"markdown","bb425dde":"markdown","ba509554":"markdown","1d5f7499":"markdown","1d3cb578":"markdown","8a52a3a8":"markdown","a651a1a4":"markdown","8814cda5":"markdown","cd303d2e":"markdown","f309c47f":"markdown","d072783c":"markdown","94d2a604":"markdown","ba20c693":"markdown","8ab6b2c3":"markdown","63b51718":"markdown","6d43b8e6":"markdown","962392af":"markdown","6aa65922":"markdown","8bbe0208":"markdown","dfcd91c7":"markdown"},"source":{"9c354cb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","543721a4":"# importing libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","dc7feebb":"## 2. Checking the structure of datasets","c900e2e4":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 50)\n\ndf_train.head()","1cd31ac6":"df_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndf_test.head()","848724e7":"df = pd.concat([df_train, df_test])\ndf.head()","fc98770e":"# Determining the shape of the datset\n\ndf.shape","c747ee35":"# Checking the column-wise info of the dataframe\ndf.info()","529ada23":"# Checking the summary for the numeric columns \ndf.describe()","9b3540fd":"# Checking the null values\n\ndf.isnull().sum()","d849f61d":"sns.boxplot(df.Age)\nplt.show()","c1c65782":"# Median value for Age column.\n\nmedian_age = df.Age.median()\nmedian_age","c252584c":"# Filling missing values with median value.\n\ndf.Age.fillna(median_age, inplace = True)","9482d747":"# Checking null values from column 'Age'\n\ndf.Age.isnull().sum()","9803ab4b":"df.Embarked.isnull().sum()","a3f338ee":"# Checking normalize value counts for Embarked column\n\ndf.Embarked.value_counts(normalize = True)","5c2e0e1c":"# Missing values in Categorical column 'Embarked' should be replaced with the mode value.\n\nmode_Embarked = df.Embarked.mode()[0]\nmode_Embarked","eea70c6a":"# Filling missing values with mode value.\n\ndf['Embarked'].fillna(mode_Embarked, inplace = True)","d5068985":"# # Checking the null values \ndf.Cabin.isnull().sum()","93a4f969":"# Checking the null values percentages\n100*(df.Cabin.isnull().sum()\/len(df))","64706020":"df['Cabin'].replace([None], ['missing'], inplace = True)","dc194d47":"# Checking the null values \ndf.Cabin.isnull().sum()","7cd6e414":"# Checking missing values in df_train again\n\ndf.isnull().sum()","41472286":"df.Fare.isnull().sum()","8345c598":"# Fare is correlated to Pclass imputing value related Pclass= 3\n\ndf[\"Fare\"] = df[\"Fare\"].fillna(np.mean(df[((df[\"Pclass\"]==3))][\"Fare\"]))","91c84a05":"df.isnull().sum()","e5d40bd8":"# Sex- Survived\n\nsns.barplot(x= 'Sex', y= 'Survived', data = df)\nplt.show()","5f4b2cde":"df[['Sex','Survived']].groupby(['Sex'], as_index = False).mean()","ad339e71":"# Pclass - Survived\n\nsns.barplot(x= 'Pclass', y= 'Survived',hue = 'Sex', data = df)\nplt.show()","72502d06":"df[['Pclass','Survived']].groupby(['Pclass'], as_index = False).mean()","9d261600":"# Embarked - Survived\n\nsns.barplot(x= 'Embarked', y= 'Survived',hue = 'Sex', data = df)\nplt.show()","60c5f741":"df[['Embarked','Survived']].groupby(['Embarked'], as_index = False).mean()","a0f40c17":"# SibSp - Survived\n\nsns.barplot(x= 'SibSp', y= 'Survived',hue = 'Sex', data = df)\nplt.show()","621b96fe":"df[['SibSp','Survived']].groupby(['SibSp'], as_index = False).mean()","a2b2f55c":"# Parch - Survived\n\nsns.barplot(x= 'Parch', y= 'Survived',hue = 'Sex', data = df)\nplt.show()","27621cbc":"df[['Parch','Survived']].groupby(['Parch'], as_index = False).mean()","363e11a0":"# Groupby the Survived to find the mean of the Age with Survived as 0-no & 1-Yes\n\ndf.groupby('Survived')['Age'].mean()","5bd1956c":"# Groupby the Survived to find the median of the Age with Survived as 0-no & 1-Yes\n\ndf.groupby('Survived')['Age'].median()","0332802a":"# Plotting box plot between Survived & Age\n\nsns.boxplot(data = df, x = 'Survived', y= 'Age')\nplt.show()","21bbab68":"# Groupby the Survived to find the mean of the fare with Survived as 0-no & 1-Yes\n\ndf.groupby('Survived')['Fare'].mean()","b8993088":"# Groupby the Survived to find the median of the Fare with Survived as 0-no & 1-Yes\n\ndf.groupby('Survived')['Fare'].median()","0c688e64":"# Plotting box plot between Survived & Age\n\nsns.boxplot(data = df, x = 'Survived', y= 'Fare')\nplt.show()","fd4ef4c8":"# Converting male as 0 & female as 1\n\ndf['Sex'].replace(('male','female'),[0,1], inplace= True)","8238cca8":"# Converting 'S' as 0 , 'C' as '1' & 'Q' as 3 for 'Embarked' column\n\ndf['Embarked'].replace(['S', 'C', 'Q'], [0,1,2], inplace= True)","53f12cbb":"df.head()","371f1a74":"# Heatmap\nplt.figure(figsize= (10,5))\nsns.heatmap(df[['Survived','Pclass','Sex', 'Age','SibSp','Parch','Fare', 'Embarked']].corr(),\n            cmap = 'RdYlGn', annot = True)\nplt.show()","62ef91e5":"# Binning Age Feature to convert it into multilevel Categorical variable\n\ndf['Age_Group'] = pd.cut(df.Age, [0,20,30,40,50,60,999], \n                               labels = ['<20','20-30','30-40','40-50','50-60','60+'])","99071abd":"df.Age_Group.value_counts()","0ae42c23":"#plotting the bar graph of Age_Group with Survived value.\n\nsns.barplot(x= 'Age_Group', y = 'Survived',hue = 'Sex', data = df)\nplt.show()","d0234df5":"df[['Age_Group','Survived']].groupby(['Age_Group'], as_index = False).mean()","efc8e9a7":"df['Age_Group'] = df['Age_Group'].replace(['<20','20-30','30-40','40-50','50-60','60+'],\n                          [0,1,2,3,3,3])","c2491bda":"#plotting the bar graph of Age_Group with Survived value.\n\nsns.barplot(x= 'Age_Group', y = 'Survived',hue = 'Sex', data = df)\nplt.show()","45311a0a":"df['Cabin'] = df['Cabin'].str.extract(r'(?P<letter>[A-Za-z])(?P<digit>\\d)')","8c11a853":"df['Cabin'].replace([None], ['missing'], inplace = True)","0dba3ae1":"sns.barplot(x= 'Cabin', y='Survived',hue = 'Sex', data = df)\nplt.show()","4d022775":"df_train['Cabin'].replace(['missing', 'G','A','C','E','D','B','F'],\n                          [0,0,1,2,3,3,3,3],inplace = True)","287da1ad":"sns.barplot(x= 'Cabin', y='Survived',hue = 'Sex', data = df)\nplt.show()","20ae2571":"# Family is combination or addition of column 'SibSp' & 'Parch'\n\ndf['family'] = df['SibSp'] + df['Parch']","d8bcec84":"sns.barplot(x = 'family', y= 'Survived',hue = 'Sex', data = df)\nplt.show()","e804e233":"# We will extract title from Name column\n\ndf['Title'] = df.Name.str.extract('([A-Za-z]+)\\.')","e9ec04d2":"plt.figure(figsize=(15,6))\nsns.barplot(x = 'Title', y='Survived', data = df)\nplt.show()","0f7d10c2":"df['Title'].replace(['Mme','Ms','Mlle','Lady','Countess','Dona',\n                       'Dr','Major','Sir','Capt','Don','Rev','Col', \n                       'Jonkheer'],['Miss','Miss','Miss','Mrs','Mrs','Mrs','Mr','Mr',\n                                    'Mr','Mr','Mr','Other','Other','Other'], inplace=True)","67ae9a42":"sns.countplot(df['Title'])\nplt.show()","3b6553ea":"sns.barplot(x = 'Title', y='Survived', data = df)\nplt.show()","eb533333":"# Converting categorical variable Title into numerical variable\ndf['Title'].replace(['Mr', 'Mrs', 'Miss', 'Master','Other'],[0,1,1,2,0], inplace =True)","cb3d4a60":"sns.barplot(x = 'Title', y='Survived', data = df)\nplt.show()","5ae92cc0":"# Binning Age Feature to convert it into multilevel Categorical variable\n\ndf['Fare_limit'] = pd.cut(df.Fare, [0,5,7,10,20,30,40,50,100,999], \n           labels = ['<5','5-7','7-10','10-20','20-30','30-40','40-50','50-100','100+'])","395a572d":"df.Fare_limit.value_counts()","064eba03":"sns.countplot(df['Fare_limit'])\nplt.show()","ba0deb8b":"sns.barplot(x = 'Fare_limit', y= 'Survived',hue = 'Sex', data = df)\nplt.show()","f38020a1":"# Converting categorical variable Fare into numerical variable\n\ndf['Fare_limit'] = df['Fare_limit'].replace(['<5','5-7','7-10','10-20',\n                                                         '20-30','30-40','40-50',\n                                                         '50-100','100+'],[0,0,0,1,1,2,2,3,3])","6a483eb8":"sns.barplot(x = 'Fare_limit', y= 'Survived',hue = 'Sex', data = df)\nplt.show()","8365d6cc":"df['Fare_limit'] = df['Fare_limit'].fillna(0).astype(int)","56feae74":"plt.figure(figsize=(12,8))\nsns.heatmap(df.corr(), cmap = 'RdYlGn',annot = True)\nplt.show()","e05cb991":"# Dropping Features\n\ndf.drop(labels = ['Age','SibSp','Parch','Name','Fare','Cabin','Ticket','PassengerId'],\n             axis = 1, inplace = True)","a97d4c46":"df.head()","44168c45":"df = pd.get_dummies(df, columns = ['Pclass','Embarked','Age_Group',\n                                               'family','Title','Fare_limit'])","6dc822f5":"df.head()","7a1064e9":"if len(df) == (len(df_train) + len(df_test)):\n    print('Success')\nelse:\n    print('No')","b49a2d46":"from sklearn.model_selection import train_test_split","97fbe5b8":"train = df[:len(df_train)]\n\ntest = df[len(df_train):]\n\ntest.drop(labels='Survived', axis = 1, inplace = True)","d9fce8c2":"X_train = train.drop(labels = \"Survived\", axis=1)\n\ny_train = train[\"Survived\"]","8de42dec":"# Splitting the data into train and test\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, train_size=0.7, test_size=0.3, random_state=42)","fa0fd118":"from sklearn.linear_model import LogisticRegression","e80852eb":"log_reg = LogisticRegression(random_state=42)\n\nlog_reg.fit(X_train, y_train)\n\nprint(\"Accuracy: \", log_reg.score(X_test,y_test))","1cc54002":"from sklearn.ensemble import RandomForestClassifier, VotingClassifier","a02b41bc":"rf_model = RandomForestClassifier(random_state=42)\n\nrf_model.fit(X_train, y_train)\n\nprint(\"Accuracy: \", rf_model.score(X_train,y_train))","3161678e":"print(\"Accuracy: \", rf_model.score(X_test,y_test))","4936a92f":"# ROC Score\n\nfrom sklearn.metrics import roc_auc_score\n\ny_pred = rf_model.predict(X_test)\nroc_auc_score(y_pred, y_test)","6c09929e":"voting_classfication = VotingClassifier(estimators = [('lg', log_reg), ('rfg', rf_model)], voting=\"hard\", n_jobs=-1)\n\nvoting_classfication.fit(X_train, y_train)\n\nprint(\"Accuracy: \", voting_classfication.score(X_test,y_test))","ca7df541":"test_result = pd.Series(voting_classfication.predict(test), name = \"Survived\").astype(int)\n\nresults = pd.concat([df_test[\"PassengerId\"], test_result],axis = 1)\n\nresults.to_csv(\"Pred_titanic.csv\", index = False)\n\nprint(\"Your submission was successfully saved!\")","1c468972":"##### Random Forest Regression","354fb460":"## 4. Feature Engineering\n\nUpdating & Correcting features\n1. Age\n2. Cabin\n3. Family = SibSp + Parch\n4. Name\n5. Fare","123a3825":"##### Performing analysis on combined `df_train` & `df_test` as `df`","6075c34d":"# Prediction of survival on the Titanic","1f41bbb2":"#### 3.4 Correlation between Features","9fed3282":"#### 3.1  We are comparing `Survived` people with Categorical variables as \"Sex, Pclass, Embarked, SibSp, Parch\"","2643b168":"We have Age groups 40-50, 50-60 and 60+ almost equal, so keeping similar in each group.\n\n- <20 as 0\n- 20-30 as 1\n- 30-40 as 2\n- 40-50, 50-60, 60+ as 3 \n","9165a0f7":"Here, we have 8 categorical groups. We will keep similar count in each group,\n\n- missing, G as 0\n- A as 1\n- C as 2 \n- E, D,B,F as 3","122c53a7":"### 2.1 Data Type","9eee1298":"## 1. Importing libraries & Files","5176af12":"#### 2.2.3 Missing values of Categorical column 'Cabin'","9a7a85ca":"##### Ensemble modeling","9053cb96":"#### 6.1 Train-Test Split","ee50f2b9":"We have 77.4% missing values in dataset, imputing with any value will create unrelaible output. So creating a `missing` value to address missing values.","adabf941":"#### 4.6 Correlation matrix","510dbfa0":"##### Output File","59e8caef":"### 6. Classification Method:","9929a846":"We will keep similar count in each group,\n- Mr, other as 0\n- Mrs, Miss as 1\n- Master as 2","3564a0e7":"#### 2.2.2 Missing values of Categorical column 'Embarked'","2fc65ff4":"#### 4.5 Survived Vs. Fare","bb425dde":"Inferences:\n- Sex is having high association with Survived.\n- Fare & Embarked are also poisitively associated with Survived.","ba509554":"##### Missing values from Survived column are from df_test dataset only","1d5f7499":"##### Survived Vs. Fare","1d3cb578":"#### 4.3 Survived Vs. Family","8a52a3a8":"Inferences:\n\n- We have high correlation between Age and Age_Group. So Dropping column 'Age'.\n- High correlation between Family with SibSp & Parch. So Dropping columns 'SibSp' & 'Parch'.\n- We have derived feature Title for 'Name' Column, so Dropping column 'Name'.(As Title is created from column Name).\n- We have high correlation between 'Fare_limit' with 'Fare' & 'Cabin'.So Dropping 'Fare' & 'Cabin'.","a651a1a4":"## 3. Feature analysis","8814cda5":"### 5. One Hot Encoding","cd303d2e":"We will keep similar count in each group,\n\n- <5, 5-7,7-10 as 0\n- 10-20, 20-30 as 1\n- 30-40,40-50 as 2\n- 50-100, 100+ as 3","f309c47f":"##### Logistic Regression","d072783c":"#### 2.2.1 Missing values of Numeric column 'Age'","94d2a604":"#### 4.1 Survived Vs. Age ","ba20c693":"Here, we will keep consider `Mr. , Mrs, Miss, master, other` as others can be referenced with these.","8ab6b2c3":"#### 3.3 Converting categorical variables to numerical variables","63b51718":"#### 6.2 Modelling","6d43b8e6":"#### 4.2 Survived Vs. Cabin","962392af":"#### 4.4 Survived Vs. Title","6aa65922":"##### This column is have outliers which is very large it will be inappropriate to fill those missing values with mean, we will fill those missing banks with median value.","8bbe0208":"#### 2.2.4 Missing values of Numeric column 'Fare'","dfcd91c7":"#### 3.2 Now We are comparing `Survived` people with Continuous variables as 'Age, Fare'\n\n##### Survived Vs. Age"}}