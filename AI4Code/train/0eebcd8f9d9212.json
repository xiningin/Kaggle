{"cell_type":{"f79a0691":"code","b4a2e585":"code","252a5e6e":"code","6e5a4eb8":"code","38d910f4":"code","2ad5e83c":"markdown","1b5eb3ee":"markdown","a21ec9c1":"markdown","83a9f79f":"markdown","4c39fd20":"markdown","6ea5563e":"markdown","bd8379af":"markdown","c892ddf7":"markdown","fc2a6700":"markdown"},"source":{"f79a0691":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4a2e585":"import numpy as np\nimport random\ndef score_move_a(grid, col, mark, config, start_score, n_steps):\n    next_grid, pos = drop_piece(grid, col, mark, config)\n    row, col = pos\n    score = get_heuristic_optimised(grid,next_grid,mark,config, row, col,start_score)\n    valid_moves = [col for col in range (config.columns) if next_grid[0][col]==0]\n    #Since we have just dropped our piece there is only the possibility of us getting 4 in a row and not the opponent.\n    #Thus score can only be +infinity.\n    scores = []\n    if len(valid_moves)==0 or n_steps ==0 or score == float(\"inf\"):\n        return score\n    else :\n        for col in valid_moves:\n            current = score_move_b(next_grid,col,mark,config,score,n_steps-1)\n            scores.append(current)\n        score = min(scores)\n    return score\n\ndef score_move_b(grid, col, mark, config, start_score, n_steps):\n    next_grid, pos = drop_piece(grid,col,(mark%2)+1,config)\n    row, col = pos\n    score = get_heuristic_optimised(grid,next_grid,mark,config, row, col,start_score)\n    valid_moves = [col for col in range (config.columns) if next_grid[0][col]==0]\n    \n    #The converse is true here.\n    #Since we have just dropped opponent piece there is only the possibility of opponent getting 4 in a row and not us.\n    #Thus score can only be -infinity.\n    scores = []\n    if len(valid_moves)==0 or n_steps ==0 or score == float (\"-inf\"):\n        return score\n    else :\n        for col in valid_moves:\n            current = score_move_a (next_grid,col,mark,config,score,n_steps-1)\n            scores.append(current)\n        score = max(scores)\n    return score\n\ndef drop_piece(grid, col, mark, config):\n    next_grid = grid.copy()\n    for row in range(config.rows-1, -1, -1):\n        if next_grid[row][col] == 0:\n            break\n    next_grid[row][col] = mark\n    return next_grid,(row,col)\n\ndef get_heuristic(grid, mark, config):\n    score = 0\n    num = count_windows(grid,mark,config)\n    for i in range(config.inarow):\n        #num  = count_windows (grid,i+1,mark,config)\n        if (i==(config.inarow-1) and num[i+1] >= 1):\n            return float(\"inf\")\n        score += (4**(i))*num[i+1]\n    num_opp = count_windows (grid,mark%2+1,config)\n    for i in range(config.inarow):\n        if (i==(config.inarow-1) and num_opp[i+1] >= 1):\n            return float (\"-inf\")\n        score-= (2**((2*i)+1))*num_opp[i+1]\n    return score\n\ndef get_heuristic_optimised(grid, next_grid, mark, config, row, col, start_score):\n    score = 0\n    num1 = count_windows_optimised(grid,mark,config,row,col)\n    num2 = count_windows_optimised(next_grid,mark,config,row,col)\n    for i in range(config.inarow):\n        if (i==(config.inarow-1) and (num2[i+1]-num1[i+1]) >= 1):\n            return float(\"inf\")\n        score += (4**(i))*(num2[i+1]-num1[i+1])\n    num1_opp = count_windows_optimised(grid,mark%2+1,config,row,col)\n    num2_opp = count_windows_optimised(next_grid,mark%2+1,config,row,col)\n    for i in range(config.inarow): \n        if (i==(config.inarow-1) and num2_opp[i+1]-num1_opp[i+1]  >= 1):\n            return float (\"-inf\")     \n        score-= (2**((2*i)+1))*(num2_opp[i+1]-num1_opp[i+1])\n    score+= start_score\n    return score\n\ndef check_window(window, piece, config):\n    if window.count((piece%2)+1)==0:\n        return window.count(piece)\n    else:\n        return -1\n\ndef count_windows(grid, piece, config):\n    num_windows = np.zeros(config.inarow+1)\n    # horizontal\n    for row in range(config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[row, col:col+config.inarow])\n            type_window = check_window(window, piece, config)\n            if type_window != -1:\n                num_windows[type_window] += 1\n    # vertical\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns):\n            window = list(grid[row:row+config.inarow, col])\n            type_window = check_window(window, piece, config)\n            if type_window != -1:\n                num_windows[type_window] += 1\n    # positive diagonal\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n            type_window = check_window(window, piece, config)\n            if type_window != -1:\n                num_windows[type_window] += 1\n    # negative diagonal\n    for row in range(config.inarow-1, config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n            type_window = check_window(window, piece, config)\n            if type_window != -1:\n                num_windows[type_window] += 1\n    return num_windows\n\ndef count_windows_optimised(grid, piece, config, row, col):\n    num_windows = np.zeros(config.inarow+1)\n    # horizontal\n    for acol in range(max(0,col-(config.inarow-1)),min(col+1,(config.columns-(config.inarow-1)))):\n        window = list(grid[row, acol:acol+config.inarow])\n        type_window = check_window(window, piece, config)\n        if type_window != -1:\n            num_windows[type_window] += 1\n    # vertical\n    for arow in range(max(0,row-(config.inarow-1)),min(row+1,(config.rows-(config.inarow-1)))):\n        window = list(grid[arow:arow+config.inarow, col])\n        type_window = check_window(window, piece, config)\n        if type_window != -1:\n            num_windows[type_window] += 1\n    # positive diagonal\n    for arow, acol in zip(range(row-(config.inarow-1),row+1),range(col-(config.inarow-1),col+1)):\n        if (arow>=0 and acol>=0 and arow<=(config.rows-config.inarow) and acol<=(config.columns-config.inarow)):\n            window = list(grid[range(arow, arow+config.inarow), range(acol, acol+config.inarow)])\n            type_window = check_window(window, piece, config)\n            if type_window != -1:\n                num_windows[type_window] += 1\n    # negative diagonal\n    for arow,acol in zip(range(row,row+config.inarow),range(col,col-config.inarow,-1)):\n        if (arow >= (config.inarow-1) and acol >=0 and arow <= (config.rows-1) and acol <= (config.columns-config.inarow)):\n            window = list(grid[range(arow, arow-config.inarow, -1), range(acol, acol+config.inarow)])\n            type_window = check_window(window, piece, config)\n            if type_window != -1:\n                num_windows[type_window] += 1\n    return num_windows\n\ndef agent(obs, config):\n    grid = np.asarray(obs.board).reshape(config.rows, config.columns)\n    valid_moves = [c for c in range(config.columns) if grid[0][c] == 0]\n    scores = {}\n    start_score = get_heuristic(grid, obs.mark, config)\n    for col in valid_moves:\n        scores[col] = score_move_a(grid, col, obs.mark, config,start_score,2)\n    print (\"2 Step lookahead agent:\",scores)\n    max_cols = [key for key in scores.keys() if scores[key] == max(scores.values())]\n    return random.choice(max_cols)","252a5e6e":"from kaggle_environments import make, evaluate\nenv = make(\"connectx\", debug=True)\nenv.run([agent,\"negamax\"])\nenv.render(mode=\"ipython\")","6e5a4eb8":"def get_win_percentages(agent1, agent2, n_rounds=100):\n    config = {'rows': 10, 'columns': 7, 'inarow': 4}\n    outcomes = evaluate(\"connectx\", [agent1, agent2], config, [], n_rounds\/\/2)\n    outcomes += [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], n_rounds-n_rounds\/\/2)]\n    print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,-1])\/len(outcomes), 2))\n    print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([-1,1])\/len(outcomes), 2))\n    print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0]))\n    print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0, None]))","38d910f4":"get_win_percentages(agent1=agent, agent2=\"negamax\",n_rounds = 100)","2ad5e83c":"## The code after the above optimisations has been implemented below.","1b5eb3ee":"1. The first and most important place we can reduce the time complexity is at step 4 where we pass the whole grid to the get_heuristic function and from it, it takes each and every possible window of size m which is (n-m+1)^2. Instead of calculating the value on the whole grid, we can we can just calculate the change in the value of the windows which contain the position in which the piece was dropped. This will reuce the number of windows from [(n^2) * m]*[n * (n-m+1) horizontal windows + n * (n-m+1) vertical windows + (n-m+1)^2 diagonal windows along both the diagonals] to only m along each of the 4 directions. This will reduce our compexity by a factor of n^2\/m.\n\n2. The second place we can reduce the complexity is at step 5. The insight is instead of calling check_window for each value less than m, we can use check window to return the correct count of m that it would have returned true for in the same time by cheking that if number of opponent piece are 0 then we can easily return the count of our piece. This will reduce our complexity further by a factor of m which might not seem a lot but consider this that if the value of m was 4, the new code would be 4 times fater than the old one. A computation that earlier took 12 seconds and would have resulted in invalid submission can now be submitted and will run easily.\n\nThis results in the final complexity being O((n^2)*(m^2)) for 1 step lookahead.\n\nIf we use a 2 step lookahead the complexity of the algorithm is O((n^3) *(m^2)).","a21ec9c1":"## Understanding the complexity for a one step lookahead:","83a9f79f":"For a 2 step lookahead, each of these steps is done n more times resulting in the time complexity being (n^5)*(m^2)","4c39fd20":"## Where can we reduce the time complexity of the algorithm","6ea5563e":"**If you like my notebook, please upvote my work!**\n\n**If you use parts of this notebook in your scripts\/notebooks, giving some kind of credit for instance link back to this notebook would be very much appreciated. Thanks in advance! :)**\n\n**Thankyou! :) Hope you like my work!**","bd8379af":"For one step lookahead the following steps are to be performed:\n\nP.S: Here we have considered a board size on n*n and m pieces to connect\n\n1. The program drops a piece in each of the n columns which takes O(n^2) and generates n configurations\n\n2. For each of the n columns, it agains drops opponent piece in each possible column O(n^3) and genrates n^2 configurations\n\n3. For each of these n^2 cofigurations, a heuristic function is called upon. This heuristic function calls count_windows for each value less than config.inarow resulting in (n^2)*m configuraions\n\n4. The count_windows isolates all possible windows of size config.inarow in the grid resulting in [(n^2) * m]*[n * (n-m+1) horizontal windows + n * (n-m+1) vertical windows + (n-m+1)^2 diagonal windows along both the diagonals] which we can take as (n^4)*m for simplicity\n\n5. Now for each of these windows a check_window is called once resulting in the total complexity to be [(n^4)*m] * m since the complexity of check window itself is m \n\n6. The final complexity is of the order (n^4)*(m^2)","c892ddf7":"Okay so in order to speed up the minimax algorithm we need to need to understand the time complexity of the original algorithm. ","fc2a6700":"This notebook is a continuation of my previous notebook where I have explained the minimax algorithm as well as the intution for the hueristic function used in this notebook. The link to that notebook has been attached [here](https:\/\/www.kaggle.com\/sidagar\/getting-1000-score-using-only-minimax)."}}