{"cell_type":{"8bb916e4":"code","bd58ce8c":"code","5d310a39":"code","c15a925b":"code","e049adf5":"code","6c82fbe4":"code","2810916a":"code","1edce7d0":"code","d9e79aab":"code","5cbfd5ca":"code","5db96ad8":"code","5519d028":"code","40f0a0c2":"code","83eaaffa":"code","fd55f7ea":"code","c7371ff6":"code","f14587fe":"code","b2b63e32":"code","80f9a6fa":"code","0d8dea53":"code","1b906fa6":"code","d0293a63":"code","1db39540":"code","90fdb4c5":"code","a09e5e8b":"code","81434087":"code","b2c68455":"code","0b5878f9":"markdown","5d441af3":"markdown","28c1bb8e":"markdown","e3d0f510":"markdown","30c18648":"markdown","f6d669a6":"markdown","2065f552":"markdown","0b32066a":"markdown","5d3f91f3":"markdown","df613767":"markdown","d5356362":"markdown","4add3f21":"markdown","acb504e5":"markdown","0760177c":"markdown","1290c108":"markdown","63802d51":"markdown","7749a8c7":"markdown","f789d79f":"markdown","c59ec465":"markdown","2bead817":"markdown","06fab5c0":"markdown","e327c0d6":"markdown","e303bf75":"markdown","80a2b62e":"markdown","15b83786":"markdown","948bcaf6":"markdown","b9f139de":"markdown","a101831c":"markdown","d7b14d49":"markdown","8b179b65":"markdown","7ab11c25":"markdown","301bf1b5":"markdown","91956cb3":"markdown","b4e6f327":"markdown"},"source":{"8bb916e4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler","bd58ce8c":"dataset = pd.read_csv(\"..\/input\/movies-on-netflix-prime-video-hulu-and-disney\/MoviesOnStreamingPlatforms_updated.csv\")\ngenres = dataset['Genres'].str.get_dummies(',')\ndata = pd.concat([dataset,genres],axis=1,sort=False)\ndata.drop(['Unnamed: 0'],axis=1,inplace=True)\ndata.fillna(np.nan,inplace=True)","5d310a39":"data.head()","c15a925b":"data.columns","e049adf5":"#Missing Values\ntotal = data.isnull().sum().sort_values(ascending=False)\npercent = ((data.isnull().sum()\/data.isnull().count())*100).sort_values(ascending=False)\nmissing = pd.concat([total,percent],axis=1,keys=['Total','Percent'])[:8]\nfig = px.bar(missing,x=missing.index,y='Total',title='Missing Values',hover_data=['Percent'],\n             labels={'index':'Column'})\nfig.update_traces(marker_color= '#faa476')\nfig.show()","6c82fbe4":"#Platforms\nnetflix = len(data[data['Netflix']==1])\nhulu = len(data[data['Hulu']==1])\nprime = len(data[data['Prime Video']==1])\ndisney = len(data[data['Disney+']==1])\nPlatform=['Netflix','Hulu','Prime Video','Disney+']\nCount = [netflix,hulu,prime,disney]\n\nfig = px.pie(names=Platform,values=Count,title='Movie Count Of Different Platforms',\n            color_discrete_sequence=px.colors.sequential.Sunsetdark)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","2810916a":"netflix_movies = data.loc[data['Netflix'] == 1].drop(['Hulu', 'Prime Video', 'Disney+', 'Type'],axis=1)\nhulu_movies = data.loc[data['Hulu'] == 1].drop(['Netflix', 'Prime Video', 'Disney+', 'Type'],axis=1)\nprime_video_movies = data.loc[data['Prime Video'] == 1].drop(['Netflix','Hulu', 'Disney+', 'Type'],axis=1)\ndisney_movies = data.loc[data['Disney+'] == 1].drop(['Netflix','Hulu', 'Prime Video', 'Type'],axis=1)","1edce7d0":"#Platforms with IMDB 8+ Movies\ncount_imdb = [len(netflix_movies[netflix_movies['IMDb']>8]),len(hulu_movies[hulu_movies['IMDb']>8]),\n              len(prime_video_movies[prime_video_movies['IMDb']>8]),len(disney_movies[disney_movies['IMDb']>8])]\nplatform = ['Netflix','Hulu','Prime Video','Disney+']\n\ntop_rated = pd.DataFrame({'Platforms':platform,'Count':count_imdb})\nfig = px.bar(top_rated,x='Platforms',y='Count',color='Count',color_continuous_scale='Sunsetdark',title='IMDB 8+ Movies on different Platforms')\nfig.show()","d9e79aab":"#Top Movies on Different Platforms\nn = netflix_movies.sort_values('IMDb',ascending=False).head(10)\nh = hulu_movies.sort_values('IMDb',ascending=False).head(10)\np = prime_video_movies.sort_values('IMDb',ascending=False).head(10)\nd = disney_movies.sort_values('IMDb',ascending=False).head(10)\n\nfig = make_subplots(rows=4, cols=1,subplot_titles=(\"Top 10 Movies on Netflix\",\"Top 10 Movies on Hulu\",\n                                                   \"Top 10 Movies on Prime Video\",\"Top 10 Movies on Disney\"))\n\nfig.add_trace(go.Bar(y=n['Title'],x=n['IMDb'],orientation='h',marker=dict(color=n['IMDb'],coloraxis=\"coloraxis\"))\n             ,row=1,col=1)\nfig.add_trace(go.Bar(y=h['Title'],x=h['IMDb'],orientation='h',marker=dict(color=h['IMDb'], coloraxis=\"coloraxis\")),row=2,col=1)\nfig.add_trace(go.Bar(y=p['Title'],x=p['IMDb'],orientation='h',marker=dict(color=p['IMDb'], coloraxis=\"coloraxis\")),row=3,col=1)\nfig.add_trace(go.Bar(y=d['Title'],x=d['IMDb'],orientation='h',marker=dict(color=d['IMDb'], coloraxis=\"coloraxis\")),row=4,col=1)\n\nfig.update_layout(height=1300, width=1000, title_text=\"Top Movies on Different Platforms based on IMDB Rating\",\n                  coloraxis=dict(colorscale='Sunsetdark'),showlegend=False)\nfig.show()","5cbfd5ca":"#Avg Runtime om Different Platforms\navg_runtime = [netflix_movies['Runtime'].mean(),hulu_movies['Runtime'].mean(),prime_video_movies['Runtime'].mean(),\n               disney_movies['Runtime'].mean()]\nplatform = ['Netflix','Hulu','Prime Video','Disney+']\n\nruntime_ott = pd.DataFrame({'Platforms':platform,'Avg Runtime': avg_runtime})\nfig = px.bar(runtime_ott,x='Platforms',y='Avg Runtime',color='Avg Runtime',color_continuous_scale='Sunsetdark',title='Avg Runtime on different Platforms')\nfig.show()","5db96ad8":"#Year\nyear_count = data.groupby('Year')['Title'].count()\nyear_movie = data.groupby('Year')[['Netflix','Hulu','Prime Video','Disney+']].sum()\nyear_data = pd.concat([year_count,year_movie],axis=1).reset_index().rename(columns={'Title':'Movie Count'})\n\nfig = px.bar(year_data,x='Year',y='Movie Count',hover_data=['Netflix','Hulu','Prime Video','Disney+'],\n             color='Movie Count',color_continuous_scale='Sunsetdark',title='Movie Count By Year')\nfig.show()","5519d028":"#Best movie every year\nbest_movie_year = data.sort_values('IMDb',ascending=False).groupby('Year').first().reset_index()\nfig = px.scatter(best_movie_year,x='Year',y='IMDb',hover_data=['Title','Runtime','Genres','Language'],\n                 color_continuous_scale='Sunsetdark',color='IMDb',size='IMDb',\n                 title='Best Movie Each Year According to IMDB Rating')\nfig.show()","40f0a0c2":"#Movie Count by Language\nlan_count = data.groupby('Language')['Title'].count()\nlan_movie = data.groupby('Language')[['Netflix','Hulu','Prime Video','Disney+']].sum()\nlanguage_data = pd.concat([lan_count,lan_movie],axis=1).reset_index().rename(columns={'Title':'Movie Count'})\nlanguage_data = language_data.sort_values('Movie Count',ascending=False)[:10]\n\nfig = px.bar(language_data,x='Language',y='Movie Count',hover_data=['Netflix','Hulu','Prime Video','Disney+'],color='Movie Count',color_continuous_scale='Sunsetdark',title='Movie Count by Language')\nfig.show()","83eaaffa":"#best movie in top 10 languages\nbest_movie_lang = data.sort_values('IMDb',ascending=False).groupby('Language')[['Title','IMDb','Runtime','Genres','Directors']].first().reset_index()\nbest_movie_lang['Count'] = lan_count.reset_index()['Title']\n\nbest_movie_lang = best_movie_lang.sort_values('Count',ascending=False).head(10)\n\nfig = px.scatter(best_movie_lang,x='Language',y='IMDb',hover_data=['Title','Runtime','Genres','Directors'],\n                 color_continuous_scale='Sunsetdark',color='IMDb',size='IMDb',\n                 title='Best Movie In Top 10 Languages According to IMDB Rating')\nfig.show()","fd55f7ea":"#Country\ncountry_count = data.groupby('Country')['Title'].count()\ncountry_movie = data.groupby('Country')[['Netflix','Hulu','Prime Video','Disney+']].sum()\ncountry_data = pd.concat([country_count,country_movie],axis=1).reset_index().rename(columns={'Title':'Movie Count'})\ncountry_data = country_data.sort_values('Movie Count',ascending=False)[:10]\n\nfig = px.bar(country_data,x='Country',y='Movie Count',hover_data=['Netflix','Hulu','Prime Video','Disney+'],\n             color='Movie Count',color_continuous_scale='Sunsetdark',title='Movie Count by Country')\nfig.show()","c7371ff6":"#best movie in top 10 Countries\nbest_movie_con = data.sort_values('IMDb',ascending=False).groupby('Country')[['Title','IMDb','Runtime','Genres','Year']].first().reset_index()\nbest_movie_con['Count'] = country_count.reset_index()['Title']\n\nbest_movie_con = best_movie_con.sort_values('Count',ascending=False).head(10)\n\nfig = px.scatter(best_movie_con,x='Country',y='IMDb',hover_data=['Title','Runtime','Genres','Year'],\n                 color_continuous_scale='Sunsetdark',color='IMDb',size='IMDb',\n                 title='Best Movie In Top 10 Countries According to IMDB Rating')\nfig.show()","f14587fe":"#Runtime\nfig = px.histogram(data,x='Runtime',opacity=0.8)\nfig.update_traces(marker_color='#faa476')\nfig.show()","b2b63e32":"# Top Movie with longest \nlong_movie = data.sort_values('Runtime',ascending=False).reset_index(drop=True).head(10)\nlong_movie.fillna(\"NA\",inplace=True)\nfor x in ['Netflix','Hulu','Prime Video','Disney+']:\n    long_movie[x].replace(1,x,inplace=True)\n    long_movie[x].replace(0,\"\",inplace=True)\n\nlong_movie['Platform']=long_movie[['Netflix','Hulu','Prime Video','Disney+']].agg(\"  \".join,axis=1)\n  \nfig = px.bar(long_movie,x='Title',y='Runtime',hover_data=['Directors','IMDb','Rotten Tomatoes','Platform'],title='Top 10 Longest Movies',color='Runtime', color_continuous_scale='Sunsetdark')\nfig.show()","80f9a6fa":"#Highest Rating\nimdb_rating = data.sort_values('IMDb',ascending=False).reset_index(drop=True).head(10)\nimdb_rating.fillna(\"NA\",inplace=True)\nfor x in ['Netflix','Hulu','Prime Video','Disney+']:\n    imdb_rating[x].replace(1,x,inplace=True)\n    imdb_rating[x].replace(0,\"\",inplace=True)\n\nimdb_rating['Platform']=imdb_rating[['Netflix','Hulu','Prime Video','Disney+']].agg(\"  \".join,axis=1)\n\nfig = px.bar(imdb_rating,x='Title',y='Runtime',hover_data=['Directors','IMDb','Platform'],title='Top 10 Highest IMDB Rated Movies',\n             color='Runtime', color_continuous_scale='Sunsetdark')\nfig.show()","0d8dea53":"dir_count = data.groupby('Directors')['Title'].count()\ndir_movie = data.groupby('Directors')[['Netflix','Hulu','Prime Video','Disney+']].sum()\ndir_rating = data.groupby('Directors')['IMDb'].mean()\ndir_data = pd.concat([dir_count,dir_movie,dir_rating],axis=1).reset_index().rename(columns={'Title':'Movie Count',\n                                                                                            'IMDb':'Avg Rating'})\ndir_count_data = dir_data.sort_values('Movie Count',ascending=False).head(10)\n\nfig = px.bar(dir_count_data,x='Directors',y='Movie Count',hover_data=['Netflix','Hulu','Prime Video','Disney+'],color='Movie Count',color_continuous_scale='Sunsetdark',title='Top 10 Directors Movie Count')\nfig.show()","1b906fa6":"jc = data[data['Directors']=='Jay Chapman'].sort_values('IMDb',ascending=False).head(5)\njk = data[data['Directors']=='Joseph Kane'].sort_values('IMDb',ascending=False).head(5)\ncc = data[data['Directors']=='Cheh Chang'].sort_values('IMDb',ascending=False).head(5)\njw = data[data['Directors']=='Jim Wynorski'].sort_values('IMDb',ascending=False).head(5)\nsn = data[data['Directors']=='Sam Newfield'].sort_values('IMDb',ascending=False).head(5)\n\nfig = make_subplots(rows=5,cols=1,subplot_titles=(\"Top 5 Movies of Jay Chapman\",\n                                                  \"Top 5 Movies of Joseph Kane\",\n                                                  \"Top 5 Movies of Cheh Chang\",\n                                                  \"Top 5 Movies of Jim Wynorski\",\n                                                  \"Top 5 Movies of Sam Newfield\"))\n\nfig.add_trace(go.Bar(x=jc['IMDb'],y=jc['Title'],orientation='h',marker=dict(color=jc['IMDb'],coloraxis=\"coloraxis\")),row=1,col=1)\nfig.add_trace(go.Bar(x=jk['IMDb'],y=jk['Title'],orientation='h',marker=dict(color=jk['IMDb'],coloraxis=\"coloraxis\")),row=2,col=1)\nfig.add_trace(go.Bar(x=cc['IMDb'],y=cc['Title'],orientation='h',marker=dict(color=cc['IMDb'],coloraxis=\"coloraxis\")),row=3,col=1)\nfig.add_trace(go.Bar(x=jw['IMDb'],y=jw['Title'],orientation='h',marker=dict(color=jw['IMDb'],coloraxis=\"coloraxis\")),row=4,col=1)\nfig.add_trace(go.Bar(x=sn['IMDb'],y=sn['Title'],orientation='h',marker=dict(color=sn['IMDb'],coloraxis=\"coloraxis\")),row=5,col=1)\n\nfig.update_layout(height=1500, width=1000, title_text=\"Top 5 Directors With Most Movies\",\n                  coloraxis=dict(colorscale='Sunsetdark'),showlegend=False)\nfig.show()","d0293a63":"dir_rating_data = dir_data.sort_values('Avg Rating',ascending=False).head(10)\nfig = px.bar(dir_rating_data,x='Directors',y='Avg Rating',hover_data=['Movie Count','Netflix','Hulu','Prime Video','Disney+'],color='Avg Rating',color_continuous_scale='Sunsetdark',title='Top 10 Directors with Movies Having Highest IMDB Rating')\nfig.show()","1db39540":"gen_count = data.groupby('Genres')['Title'].count()\ngen_movie = data.groupby('Genres')[['Netflix','Hulu','Prime Video','Disney+']].sum()\ngen_data = pd.concat([gen_count,gen_movie],axis=1).reset_index().rename(columns={'Title':'Movie Count'})\ngen_data = gen_data.sort_values('Movie Count',ascending=False)[:10]\n\nfig = px.bar(gen_data,x='Genres',y='Movie Count',hover_data=['Netflix','Hulu','Prime Video','Disney+'],color='Movie Count',color_continuous_scale='Sunsetdark',title='Top 10 Genres Movie Count')\nfig.show()","90fdb4c5":"drama = data[data['Drama']==1].sort_values('IMDb',ascending=False).head(10)\ndocumentary = data[data['Documentary']==1].sort_values('IMDb',ascending=False).head(10)\ncomedy = data[data['Comedy']==1].sort_values('IMDb',ascending=False).head(10)\n\nfig = make_subplots(rows=3,cols=1,subplot_titles=(\"Top 10 Movies of Drama Genre\",\"Top 10 Movies of Documentary Genre\",\n                                                  \"Top 10 Movies of Comedy Genre\"))\nfig.add_trace(go.Bar(x=drama['IMDb'],y=drama['Title'],orientation='h',marker=dict(color=drama['IMDb'],coloraxis=\"coloraxis\")),row=1,col=1)\nfig.add_trace(go.Bar(x=documentary['IMDb'],y=documentary['Title'],orientation='h',marker=dict(color=documentary['IMDb'],coloraxis=\"coloraxis\")),row=2,col=1)\nfig.add_trace(go.Bar(x=comedy['IMDb'],y=comedy['Title'],orientation='h',marker=dict(color=comedy['IMDb'],coloraxis=\"coloraxis\")),row=3,col=1)\n\nfig.update_layout(height=1000, width=1000, title_text=\"Top Movies of Different Genres based on IMDB Rating\",\n                  coloraxis=dict(colorscale='Sunsetdark'),showlegend=False)\nfig.show()","a09e5e8b":"#Select the features on the basis of ehich you want to cluster\nfeatures = data[['Action', 'Adventure', 'Animation',\n                 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family',\n                 'Fantasy', 'Film-Noir', 'Game-Show', 'History', 'Horror', 'Music',\n                 'Musical', 'Mystery', 'News', 'Reality-TV', 'Romance', 'Sci-Fi',\n                 'Short', 'Sport', 'Talk-Show', 'Thriller', 'War', 'Western']].astype(int)\n\n#Scaling the data\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(features)\n\n#Using TSNE\ntsne = TSNE(n_components=2)\ntransformed_genre = tsne.fit_transform(scaled_data)","81434087":"#KMeans - Elbow Method\ndistortions = []\nK = range(1,100)\nfor k in K:\n    kmean = KMeans(n_clusters=k)\n    kmean.fit(scaled_data)\n    distortions.append(kmean.inertia_)\nfig = px.line(x=K,y=distortions,title='The Elbow Method Showing The Optimal K',\n              labels={'x':'No of Clusters','y':'Distortions'})\nfig.show()","b2c68455":"#Kmeans\ncluster = KMeans(n_clusters=27)\ngroup_pred = cluster.fit_predict(scaled_data)\n\ntsne_df = pd.DataFrame(np.column_stack((transformed_genre,group_pred,data['Title'],data['Genres'])),columns=['X','Y','Group','Title','Genres'])\n\nfig = px.scatter(tsne_df,x='X',y='Y',hover_data=['Title','Genres'],color='Group',\n                 color_discrete_sequence=px.colors.cyclical.IceFire)\nfig.show()","0b5878f9":"Majority of the movies are of **United States** with **6817** movies on **Prime Video** and **1305** movies on **Netflix**.","5d441af3":"### MISSING VALUES","28c1bb8e":"### RUNTIME","e3d0f510":"Of all the highest rated movies, **Natsamrat** has the highest runtime of **166** minutes and is present only on **Netflix**.","30c18648":"**Drama, Documentary and Comedy** are the most famous genres among all.","f6d669a6":"Great! We can even check that clustering is pretty accurate by checking the genres of movie with its nearest neighbor.","2065f552":"Average Runtime of Movies is **90-100** minutes.","0b32066a":"More than 50% of the data is missing from **Rotten Tomatoes** and **Age** Columns.","5d3f91f3":"**Prime Video** and **Netflix** have better ranked movies than **Hulu** and **Disney**.","df613767":"**Jay Chapman** has the directed the most number of movies and most of them are present on **Prime Video**.","d5356362":"# Importing Libraries","4add3f21":"### DIRECTORS","acb504e5":"**English** is the most common of all languages. Thers are **8617** English movies on **Prime Video** and **1624** on **Netflix**.","0760177c":"### GENRES ","1290c108":"<img src='https:\/\/cdn.technadu.com\/wp-content\/uploads\/2020\/04\/Netflix-Amazon-Prime-Hulu-Disney-Plus-Logos.png' alt='OTT Platforms' width=750 height=500>\n<br><br><br>\nThe acronym <b>OTT<\/b> stands for Over-the-top. This means streaming across different devices whenever we want is possible because of \u201cover-the-top,\u201d a convenient little term that explains the new delivery method of film and TV content over the internet without the need for traditional cable or satellite pay-TV services.","63802d51":"#### USING KMEANS CLUSTERING TO PLOT DIFFERENT GENRES","7749a8c7":"Since majority of the movies were in English, it was expected that the best movie from English will also be best among others. ","f789d79f":"**K-means** clustering is one of the simplest and popular unsupervised machine learning algorithm.<br>\nA cluster refers to a collection of data points aggregated together because of certain similarities.\nYou\u2019ll define a target number k, which refers to the number of centroids you need in the dataset. A centroid is the imaginary or real location representing the center of the cluster.\nEvery data point is allocated to each of the clusters through reducing the in-cluster sum of squares.\nIn other words, the K-means algorithm identifies k number of centroids, and then allocates every data point to the nearest cluster, while keeping the centroids as small as possible.<br><br>\n**StandardScaler** - It standardizes a feature by subtracting the mean and then scaling to unit variance. Unit variance means dividing all the values by the standard deviation.<br><br>\n**TSNE** - t-Distributed Stochastic Neighbor Embedding (t-SNE) is a technique for dimensionality reduction that is particularly well suited for the visualization of high-dimensional datasets.","c59ec465":"As expected, **Prime Video** has more **IMDB 8+** Movies than any other platforms majorly due to the amount of movies on its platform.","2bead817":"#### Elbow Method \nThe elbow method helps to choose the optimum value of \u2018k\u2019 (number of clusters) by fitting the model with a range of values of \u2018k\u2019. Here we would be using a 2-dimensional data set but the elbow method holds for any multivariate data set.","06fab5c0":"Average Runtime of movies on all platforms is similar.","e327c0d6":"We can observe that the **\u201celbow\u201d** is the number **27** which is optimal for this case. We can also verify this beacuse there are **27 different genres** so this result was pretty much expected.","e303bf75":"**Prime Video** has the majority of movies on its platform.","80a2b62e":"# EDA","15b83786":"Movies has been increasing year by year and the highest movies were released in the year **2017** in which **763** were released on **Prime Video** and **569** on **Netflix.**","948bcaf6":"### LANGUAGE","b9f139de":"### YEAR","a101831c":"It seems that the directors with highest movie counts always make **mediocre movies!** None of them have IMDB 8+ ranking.","d7b14d49":"### PLATFORMS","8b179b65":"The directors who have made highest ranked IMDB movies have only one movie count!","7ab11c25":"Best Movies in the last few years have been the best in all the years in terms of IMDB Rating.","301bf1b5":"**Colorado** has the highest runtime of whopping **1256** minutes and is only present on **Prime Video**.","91956cb3":"# Load Data","b4e6f327":"### COUNTRY"}}