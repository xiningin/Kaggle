{"cell_type":{"11d240d3":"code","98de17de":"code","6fac91c4":"code","d154f553":"code","66648233":"code","e2e94063":"code","c4b999d7":"code","c1f43d89":"code","fba262de":"code","0d9a2c61":"code","57dbae9b":"code","fb4a4fe3":"code","b30f3fcb":"code","e9a29c7a":"code","5831dbe9":"code","db0360b8":"markdown","5af328c9":"markdown","e23ed5e7":"markdown","ccdccaad":"markdown","eeea77ec":"markdown","76c0c289":"markdown","1e533dbd":"markdown","7fbed85b":"markdown"},"source":{"11d240d3":"#importing libraries..\nimport numpy as np \nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom keras.utils import np_utils\nimport tensorflow as tf\nimport seaborn as sns","98de17de":"np.random.seed(9)\ntf.random.set_seed(9)","6fac91c4":"#loading train_data\ntrain_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\") #(42000, 785)\ntrain_data.head()","d154f553":"#slicing train_data into train_labels and train_images\ntrain_labels = train_data.iloc[:,0].astype(np.float32).values   #(42000, 1) <class 'numpy.ndarray'>\ntrain_images = train_data.iloc[:,1:].astype(np.float32).values   #(42000, 784) <class 'numpy.ndarray'>\n\n#reshaping train_images\ntrain_images = train_images.reshape(42000, 28, 28, 1)   #(42000, 28, 28, 1)  ","66648233":"#splitting train_data into train and dev sets\nx_train, x_test, y_train, y_test = train_test_split(train_images, train_labels, test_size=0.024, random_state = 42, shuffle=True, stratify=train_labels)\nprint(x_train.shape, x_test.shape, y_train.shape, y_test.shape )","e2e94063":"train_set_plot = sns.countplot(y_train)","c4b999d7":"dev_set_plot = sns.countplot(y_test)","c1f43d89":"#one-hot enoding \ny_train = np_utils.to_categorical(y_train, 10)  \ny_test = np_utils.to_categorical(y_test, 10)   \n\n#normalizing train and dev set images\nx_train = x_train \/ 255.0  \nx_test = x_test \/ 255.0","fba262de":"#loading test_data\ntest_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")  #(28000, 784)\ntest_data.head()","0d9a2c61":"test_images = test_data.astype(np.float32).values # (28000, 784) <class 'numpy.ndarray'>\n\n#reshaping test_images\ntest_images = test_images.reshape(28000, 28, 28, 1) #(28000, 28, 28, 1)\n\n#normalizing test_images\ntest_images = test_images \/ 255.0","57dbae9b":"#Model\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Conv2D(32, (5,5), activation='relu', padding = 'Same', input_shape=(28, 28, 1)),\n  tf.keras.layers.MaxPooling2D(2, 2),\n  tf.keras.layers.Conv2D(32, (3,3), activation='relu',padding = 'Same'),\n  tf.keras.layers.MaxPooling2D(2,2),\n  tf.keras.layers.Conv2D(64, (3,3), activation='relu',padding = 'Same'),\n  tf.keras.layers.MaxPooling2D(2,2),\n  tf.keras.layers.Conv2D(128, (3,3), activation='relu',padding = 'Same'),\n  tf.keras.layers.MaxPooling2D(2,2),\n  tf.keras.layers.Dropout(0.25),\n  tf.keras.layers.Flatten(),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\nmodel.summary()","fb4a4fe3":"#training model using train set\nmodel.fit(x_train, y_train, epochs=30)","b30f3fcb":"#evaluating model using dev set\ntest_loss = model.evaluate(x_test, y_test)","e9a29c7a":"#making predictions using test_images\npredictions = model.predict(test_images)\npredictions = np.argmax(predictions, axis=1)","5831dbe9":"#making submission file\n\npredictions = pd.Series(predictions,name=\"Label\")\nresult = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),predictions],axis = 1)\n\nresult.to_csv(\"digit_recognizer.csv\",index=False)","db0360b8":"# 2.1.1 Splitting Training Data into Train and Dev sets:","5af328c9":"# 2.2 Loading Test Data and Preprocessing:","e23ed5e7":"# 2.1 Loading Training Data and Preprocessing:","ccdccaad":"# 1. Importing required Libraries:","eeea77ec":"# 4. Training and Evaluation:","76c0c289":"# **Digit Recognizer | CNN | Keras | Beginner**","1e533dbd":"# 3. CNN Model","7fbed85b":"# 5. Prediction and Submission File:"}}