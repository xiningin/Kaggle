{"cell_type":{"1e78c6b8":"code","35ff821f":"code","800deb3b":"code","f0d03387":"code","bc8fe22e":"code","05914936":"code","20446e7a":"code","76470e7f":"code","1383c97c":"code","7df50006":"code","5f780426":"code","da40eedc":"code","81432e26":"code","4bd4c06c":"code","48f2324f":"markdown"},"source":{"1e78c6b8":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport pydicom\nimport scipy.ndimage\n# import gdcm\n\nfrom skimage import measure \nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\nfrom skimage.morphology import disk, opening, closing\nfrom tqdm import tqdm\n\nfrom IPython.display import HTML\nfrom PIL import Image\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\nfrom os import listdir, mkdir","35ff821f":"listdir(\"..\/input\/\")","800deb3b":"basepath = \"..\/input\/vinbigdata-chest-xray-abnormalities-detection\/train\/\"\nlistdir(basepath)","f0d03387":"train = pd.read_csv(basepath + \"train.csv\")\n","bc8fe22e":"train.shape","05914936":"train.head()\n","20446e7a":"def load_scans(dcm_path):\n    slices = pydicom.dcmread(basepath + \"\/\" + str(dcm_path) + \".dicom\" )\n\n    return slices","76470e7f":"example = train.image_id.values[0]\nscans = load_scans(example)","1383c97c":"scans","7df50006":"fig, ax = plt.subplots(1,2,figsize=(20,5))\nimage = scans.pixel_array.flatten()\nrescaled_image = image * scans.RescaleSlope + scans.RescaleIntercept\nsns.distplot(image.flatten(), ax=ax[0]);\nsns.distplot(rescaled_image.flatten(), ax=ax[1])\nax[0].set_title(\"Raw pixel array distributions for 10 examples\")\nax[1].set_title(\"HU unit distributions for 10 examples\");","5f780426":"def set_outside_scanner_to_air(raw_pixelarrays):\n    # in OSIC we find outside-scanner-regions with raw-values of -2000. \n    # Let's threshold between air (0) and this default (-2000) using -1000\n    raw_pixelarrays[raw_pixelarrays <= -1000] = 0\n    return raw_pixelarrays","da40eedc":"def transform_to_hu(slices):\n    images = slices.pixel_array\n    images = images.astype(np.int16)\n\n    images = set_outside_scanner_to_air(images)\n    \n    # convert to HU        \n    intercept = slices.RescaleIntercept\n    slope = slices.RescaleSlope\n\n    if slope != 1:\n        images = slope * images.astype(np.float64)\n        images = images.astype(np.int16)\n\n    images += np.int16(intercept)\n    \n    return np.array(images, dtype=np.int16)","81432e26":"hu_scans = transform_to_hu(scans)\n","4bd4c06c":"fig, ax = plt.subplots(1,4,figsize=(20,3))\nax[0].set_title(\"Original CT-scan\")\nax[0].imshow(scans.pixel_array, cmap=\"bone\")\nax[1].set_title(\"Pixelarray distribution\");\nsns.distplot(scans.pixel_array.flatten(), ax=ax[1]);\n\nax[2].set_title(\"CT-scan in HU\")\nax[2].imshow(hu_scans, cmap=\"bone\")\nax[3].set_title(\"HU values distribution\");\nsns.distplot(hu_scans.flatten(), ax=ax[3]);\n\nfor m in [0,2]:\n    ax[m].grid(False)","48f2324f":"# Working with dicom files "}}