{"cell_type":{"ead6ae6a":"code","2c117d8b":"code","bfc47b28":"code","71ae9fa8":"code","d86cc16d":"code","e693b453":"code","eddf2b4e":"code","d6247cac":"code","a53b3468":"code","633c6555":"code","56366954":"code","1fc56537":"code","d38011ad":"code","9649b628":"code","e6120049":"code","f77e2766":"code","52fd17d1":"code","5842440d":"code","0a3eae06":"code","a0744d5b":"code","6b0bad56":"code","30f375f9":"code","6d29c923":"code","7451e2e3":"code","c430072a":"code","585e1c0b":"code","6ad09ef5":"code","f0c49311":"code","cac5125a":"code","490b7148":"code","f45c82b4":"code","a01a131e":"code","01daa79d":"code","258b41a7":"code","e0388b7b":"code","74cd01d5":"code","f8bc3891":"code","5f09cc64":"code","6f4d2e8d":"code","fdfa9e3f":"code","4d19be53":"code","1e183188":"code","caba991d":"code","aa5bd539":"code","5d63f989":"code","e4381919":"code","ebb9c86b":"code","b1559f2a":"code","905778a3":"code","3422055d":"code","db20afdc":"code","66a71fd2":"code","fe533d3d":"code","ca2743bb":"code","167d974b":"code","fa68b3e4":"code","9f8b5aab":"code","c40c5e96":"code","92ca9559":"code","868ab857":"code","6d4af6d7":"code","603e77cb":"code","f5140b66":"code","e8f6c359":"code","6a49f68b":"code","a6fc7ddc":"code","11c153cf":"markdown","6f883422":"markdown","a34e2881":"markdown","468de928":"markdown","8d920d1c":"markdown","85167722":"markdown","20c5823d":"markdown","ae7b6d4b":"markdown","e74097d8":"markdown","ba8ddb9a":"markdown","1686f4c0":"markdown","1715fd7b":"markdown","5b77e004":"markdown","1163fe2f":"markdown","b7de9850":"markdown","6715d048":"markdown","88a17c99":"markdown","4bdcf54e":"markdown","2c15ff06":"markdown","7c9f66de":"markdown","6e29f060":"markdown"},"source":{"ead6ae6a":"from IPython.display import Image\nImage(filename='..\/input\/imagehr\/consulenza_marketing_vendita_slide20.jpg', width=\"1100\", height='50')","2c117d8b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport cufflinks as cf \n  \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\n%matplotlib inline\nsns.set_style(\"whitegrid\")\nplt.style.use(\"fivethirtyeight\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bfc47b28":"############# Importing the datasets\ntrain = pd.read_csv(\"\/kaggle\/input\/hranalysis\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/hranalysis\/test.csv\")","71ae9fa8":"train.head()","d86cc16d":"train.columns","e693b453":"test.head()","eddf2b4e":"train.shape","d6247cac":"train.info()","a53b3468":"train.isnull().sum()","633c6555":"#### Visualizing the null values using missingo function\n\nimport missingno as msno\nmsno.matrix(train)","56366954":"test.shape","1fc56537":"test.info() ### Check all information in the datasets","d38011ad":"test.isnull().sum()","9649b628":"msno.bar(test, color = 'y', figsize = (10,8))  #### Check the missing values in test data","e6120049":"### Pairplot using seaborn library\nsns.pairplot(train)","f77e2766":"# Visulazing the distibution of the data for every feature\ntrain.hist(edgecolor='black', linewidth=1.2, figsize=(20, 20));","52fd17d1":"plt.figure(figsize=(30, 30))\nsns.heatmap(train.corr(), annot=True, cmap=\"RdYlGn\", annot_kws={\"size\":15})","5842440d":"train['department'].value_counts()","0a3eae06":"# visualizing the different groups in the dataset\nplt.subplots(figsize=(15,5))\ntrain['department'].value_counts(normalize = True)\ntrain['department'].value_counts(dropna = False).plot.bar(color=['black', 'red', 'green', 'blue', 'cyan'])\nplt.show()","a0744d5b":"# checking the different regions of the company\nplt.subplots(figsize=(15,5))\nsns.countplot(train['region'], color = 'red')\nplt.title('Different Regions in the company', fontsize = 30)\nplt.xticks(rotation = 60)\nplt.xlabel('Region Code')\nplt.ylabel('count')\nplt.show()","6b0bad56":" #### Check most popular department\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\n\nstopword = set(STOPWORDS)\n\nwordcloud = WordCloud(stopwords = stopword).generate(str(train['department']))\n\nplt.rcParams['figure.figsize'] = (15, 8)\nprint(wordcloud)\nplt.imshow(wordcloud)\nplt.title('Most Popular Departments', fontsize = 30)\nplt.axis('off')\nplt.show()","30f375f9":"train['education'].value_counts()","6d29c923":"# Prepare Data\ndf = train.groupby('education').size()\n\n# Make the plot with pandas\ndf.plot(kind='pie', subplots=True, figsize=(15, 8))\nplt.title(\"Pie Chart of different types of education\")\nplt.ylabel(\"\")\nplt.show()","7451e2e3":"# most popular education degree among the employees\n\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\n\nstopword = set(STOPWORDS)\n\nwordcloud = WordCloud(stopwords = stopword, max_words = 5).generate(str(train['education']))\n\nplt.rcParams['figure.figsize'] = (15, 8)\nprint(wordcloud)\nplt.imshow(wordcloud)\nplt.title('Most Popular Degrees among the Employees', fontsize = 30)\nplt.axis('off')\nplt.show()","c430072a":"# checking the gender gap\n\ntrain['gender'].value_counts()","585e1c0b":"# plotting a pie chart\n\nsize = [38496, 16312]\nlabels = \"Male\", \"Female\"\ncolors = ['yellow', 'orange']\nexplode = [0, 0.1]\n\nplt.subplots(figsize=(8,8))\nplt.pie(size, labels = labels, colors = colors, explode = explode, shadow = True, autopct = \"%.2f%%\")\nplt.title('A Pie Chart Representing GenderGap', fontsize = 30)\nplt.axis('off')\nplt.legend()\nplt.show()","6ad09ef5":"# comparison of permoted gender male & female\nplt.subplots(figsize=(15,5))\nsns.countplot(x = 'education', data = train, hue = 'gender', palette = 'dark')\nplt.show()","f0c49311":"# comparison of permoted gender male & female\nplt.subplots(figsize=(15,5))\nsns.countplot(x = 'gender', data = train, hue = 'is_promoted', palette = 'dark')\nplt.show()","cac5125a":"# comparison of permoted gender male & female\nplt.subplots(figsize=(15,5))\nsns.countplot(x = 'recruitment_channel', data = train, hue = 'gender', palette = 'dark')\nplt.show()","490b7148":"train['recruitment_channel'].value_counts()","f45c82b4":"# plotting a donut chart for visualizing each of the recruitment channel's share\n\nsize = [30446, 23220, 1142]\ncolors = ['black', 'red', 'blue']\nlabels = \"Others\", \"Sourcing\", \"Reffered\"\n\nmy_circle = plt.Circle((0, 0), 0.7, color = 'white')\n\nplt.rcParams['figure.figsize'] = (9, 9)\nplt.pie(size, colors = colors, labels = labels, shadow = True, autopct = '%.2f%%')\nplt.title('Showing share of different Recruitment Channels', fontsize = 30)\np = plt.gcf()\np.gca().add_artist(my_circle)\nplt.legend()\nplt.show()","a01a131e":"plt.subplots(figsize=(15,5))\nsns.distplot(train['age'])\nplt.title('Distribution of Age of Employees', fontsize = 30)","01daa79d":"train['previous_year_rating'].value_counts().sort_values().plot.bar(color = 'violet', figsize = (15, 7))\nplt.title('Distribution of Previous year rating of the Employees', fontsize = 30)\nplt.xlabel('Ratings', fontsize = 15)\nplt.ylabel('count')\nplt.show()","258b41a7":"# checking the distribution of length of service\nplt.subplots(figsize=(15,8))\nsns.distplot(train['length_of_service'], color = 'green')\nplt.title('Distribution of length of service among the Employees', fontsize = 30)\nplt.xlabel('Length of Service in years')\nplt.ylabel('count')\nplt.show()","e0388b7b":"train['KPIs_met >80%'].value_counts()","74cd01d5":"# plotting a pie chart\n\n\nsize = [35517, 19291]\nlabels = \"Not Met KPI > 80%\", \"Met KPI > 80%\"\ncolors = ['violet', 'grey']\nexplode = [0, 0.1]\n\nplt.rcParams['figure.figsize'] = (8, 8)\nplt.pie(size, labels = labels, colors = colors, explode = explode, shadow = True, autopct = \"%.2f%%\")\nplt.title('A Pie Chart Representing Gap in Employees in terms of KPI', fontsize = 30)\nplt.axis('off')\nplt.legend()\nplt.show()","f8bc3891":"train['awards_won?'].value_counts()","5f09cc64":"# plotting a donut chart for visualizing each of the recruitment channel's share\n\nsize = [53538, 1270]\ncolors = ['black', 'red']\nlabels = \"Awards Won\", \"NO Awards Won\"\n\nmy_circle = plt.Circle((0, 0), 0.7, color = 'white')\n\nplt.rcParams['figure.figsize'] = (9, 9)\nplt.pie(size, colors = colors, labels = labels, shadow = True, autopct = '%.2f%%')\nplt.title('Showing a Percentage of employees who won awards', fontsize = 30)\np = plt.gcf()\np.gca().add_artist(my_circle)\nplt.legend()\nplt.show()","6f4d2e8d":"# checking the distribution of the avg_training score of the Employees\n\nplt.subplots(figsize=(15,7))\nsns.distplot(train['avg_training_score'], color = 'blue')\nplt.title('Distribution of Training Score among the Employees', fontsize = 30)\nplt.xlabel('Average Training Score', fontsize = 20)\nplt.ylabel('count')\nplt.show()","fdfa9e3f":"# checkig the no. of Employees Promoted\n\ntrain['is_promoted'].value_counts()","4d19be53":"\n# finding the %age of people promoted\n\npromoted = (4668\/54808)*100\nprint(\"Percentage of Promoted Employees is {:.2f}%\".format(promoted))","1e183188":"#plotting a scatter plot \n\nplt.hist(train['is_promoted'])\nplt.title('plot to show the gap in Promoted and Non-Promoted Employees', fontsize = 30)\nplt.xlabel('0 -No Promotion and 1- Promotion', fontsize = 20)\nplt.ylabel('count')\nplt.show()","caba991d":"# scatter plot between average training score and is_promoted\n\ndata = pd.crosstab(train['avg_training_score'], train['is_promoted'])\ndata.div(data.sum(1).astype(float), axis = 0).plot(kind = 'bar', stacked = True, figsize = (20, 9), color = ['darkred', 'lightgreen'])\n\nplt.title('Looking at the Dependency of Training Score in promotion', fontsize = 30)\nplt.xlabel('Average Training Scores', fontsize = 15)\nplt.legend()\nplt.show()","aa5bd539":"# checking dependency of different regions in promotion\n\ndata = pd.crosstab(train['region'], train['is_promoted'])\ndata.div(data.sum(1).astype('float'), axis = 0).plot(kind = 'bar', stacked = True, figsize = (20, 8), color = ['lightblue', 'purple'])\n\nplt.title('Dependency of Regions in determining Promotion of Employees', fontsize = 30)\nplt.xlabel('Different Regions of the Company', fontsize = 20)\nplt.legend()\nplt.show()","5d63f989":"\n# dependency of awards won on promotion\n\ndata = pd.crosstab(train['awards_won?'], train['is_promoted'])\ndata.div(data.sum(1).astype('float'), axis = 0).plot(kind = 'bar', stacked = True, figsize = (10, 8), color = ['magenta', 'purple'])\n\nplt.title('Dependency of Awards in determining Promotion', fontsize = 30)\nplt.xlabel('Awards Won or Not', fontsize = 20)\nplt.legend()\nplt.show()","e4381919":"#dependency of KPIs with Promotion\n\ndata = pd.crosstab(train['KPIs_met >80%'], train['is_promoted'])\ndata.div(data.sum(1).astype('float'), axis = 0).plot(kind = 'bar', stacked = True, figsize = (10, 8), color = ['pink', 'darkred'])\n\nplt.title('Dependency of KPIs in determining Promotion', fontsize = 30)\nplt.xlabel('KPIs Met or Not', fontsize = 20)\nplt.legend()\nplt.show()","ebb9c86b":"# checking dependency on previous years' ratings\n\ndata = pd.crosstab(train['previous_year_rating'], train['is_promoted'])\ndata.div(data.sum(1).astype('float'), axis = 0).plot(kind = 'bar', stacked = True, figsize = (15, 8), color = ['violet', 'pink'])\n\nplt.title('Dependency of Previous year Ratings in determining Promotion', fontsize = 30)\nplt.xlabel('Different Ratings', fontsize = 20)\nplt.legend()\nplt.show()","b1559f2a":"# checking how length of service determines the promotion of employees\n\ndata = pd.crosstab(train['length_of_service'], train['is_promoted'])\ndata.div(data.sum(1).astype('float'), axis = 0).plot(kind = 'bar', stacked = True, figsize = (20, 8), color = ['pink', 'lightblue'])\n\nplt.title('Dependency of Length of service in Promotions of Employees', fontsize = 30)\nplt.xlabel('Length of service of employees', fontsize = 20)\nplt.legend()\nplt.show()","905778a3":"# checking dependency of age factor in promotion of employees\n\ndata = pd.crosstab(train['age'], train['is_promoted'])\ndata.div(data.sum(1).astype('float'), axis = 0).plot(kind = 'bar', stacked = True, figsize = (20, 8), color = ['lightblue', 'green'])\n\nplt.title('Dependency of Age in determining Promotion of Employees', fontsize = 30)\nplt.xlabel('Age of Employees', fontsize = 20)\nplt.legend()\nplt.show()","3422055d":"# checking which department got most number of promotions\n\ndata = pd.crosstab(train['department'], train['is_promoted'])\ndata.div(data.sum(1).astype('float'), axis = 0).plot(kind = 'bar', stacked = True, figsize = (20, 8), color = ['orange', 'lightgreen'])\n\nplt.title('Dependency of Departments in determining Promotion of Employees', fontsize = 30)\nplt.xlabel('Different Departments of the Company', fontsize = 20)\nplt.legend()\nplt.show()","db20afdc":"# checking dependency of gender over promotion\n\ndata = pd.crosstab(train['gender'], train['is_promoted'])\ndata.div(data.sum(1).astype('float'), axis = 0).plot(kind = 'bar', stacked = True, figsize = (7, 5), color = ['pink', 'yellow'])\n\nplt.title('Dependency of Genders in determining Promotion of Employees', fontsize = 30)\nplt.xlabel('Gender', fontsize = 20)\nplt.legend()","66a71fd2":"# filling missing values\n\ntrain['education'].fillna(train['education'].mode()[0], inplace = True)\ntrain['previous_year_rating'].fillna(1, inplace = True)\n\n# again checking if there is any Null value left in the data\ntrain.isnull().sum().sum()","fe533d3d":"# filling missing values\n\ntest['education'].fillna(test['education'].mode()[0], inplace = True)\ntest['previous_year_rating'].fillna(1, inplace = True)\n\n# again checking if there is any Null value left in the data\ntest.isnull().sum().sum()","ca2743bb":"# removing the employee_id column\n\ntrain = train.drop(['employee_id'], axis = 1)\n\ntrain.columns","167d974b":"# saving the employee_id\n\nemp_id = test['employee_id']\n\n# removing the employee_id column\n\ntest = test.drop(['employee_id'], axis = 1)\n\ntest.columns","fa68b3e4":"# defining the test set\n\nx_test = test\n\nx_test.columns","9f8b5aab":"# one hot encoding for the test set\n\nx_test = pd.get_dummies(x_test)\n\nx_test.columns","c40c5e96":"# splitting the train set into dependent and independent sets\n\nx = train.iloc[:, :-1]\ny = train.iloc[:, -1]\n\nprint(\"Shape of x:\", x.shape)\nprint(\"Shape of y:\", y.shape)","92ca9559":"# one hot encoding for the train set\n\nx = pd.get_dummies(x)\n\nx.columns","868ab857":"from imblearn.over_sampling import SMOTE\n\nx_sample, y_sample = SMOTE().fit_sample(x, y.values.ravel())\n\nx_sample = pd.DataFrame(x_sample)\ny_sample = pd.DataFrame(y_sample)\n\n# checking the sizes of the sample data\nprint(\"Size of x-sample :\", x_sample.shape)\nprint(\"Size of y-sample :\", y_sample.shape)","6d4af6d7":"# splitting x and y into train and validation sets\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_valid, y_train, y_valid = train_test_split(x_sample, y_sample, test_size = 0.2, random_state = 0)\n\nprint(\"Shape of x_train: \", x_train.shape)\nprint(\"Shape of x_valid: \", x_valid.shape)\nprint(\"Shape of y_train: \", y_train.shape)\nprint(\"Shape of y_valid: \", y_valid.shape)","603e77cb":"# standard scaling\n\nfrom sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test  = sc.transform(x_test)\nx_valid = sc.transform(x_valid)","f5140b66":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import average_precision_score\n\nrfc = RandomForestClassifier()\nrfc.fit(x_train, y_train)\n\nrfc_pred = rfc.predict(x_test)\n\nprint(\"Training Accuracy :\", rfc.score(x_train, y_train))","e8f6c359":"from xgboost.sklearn import XGBClassifier\nxgb = XGBClassifier()\nxgb.fit(x_train, y_train)\n\nxgb_pred = xgb.predict(x_test)\n\nprint(\"Training Accuracy :\", xgb.score(x_train, y_train))","6a49f68b":"from lightgbm import LGBMClassifier\nlgb = LGBMClassifier()\nlgb.fit(x_train, y_train)\n\nlgb_pred = lgb.predict(x_test)\n\nprint(\"Training Accuracy :\", lgb.score(x_train, y_train))","a6fc7ddc":"from sklearn.ensemble import ExtraTreesClassifier\netc = ExtraTreesClassifier()\netc.fit(x_train, y_train)\n\netc_pred = etc.predict(x_test)\n\nprint(\"Training Accuracy :\", etc.score(x_train, y_train))","11c153cf":"### Bivariate","6f883422":"# <font size=\"+3\" color=red ><b> <center><u>HR Analysis, Prediction and Visualization<\/u><\/center><\/b><\/font><br><a id=\"top\"><\/a>","a34e2881":"##### As, the Training Scores Increases, the chances of Promotion Increases Highly","468de928":"### The above graph shows that there is no biasedness over regions in terms of Promotion as all the regions share promotions almost equally.","8d920d1c":"#### Again Having a good KPI score increases the chances of getting promoted in the company.","85167722":"## <font color='purple'> Checking the Null Values <\/font>","20c5823d":"<a href=\"#top\" class=\"btn btn-success btn-lg active\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to Colors\">Go to TOP<\/a>","ae7b6d4b":"## <font color='purple'>I hope you enjoyed this kernel , Please don't forget to appreciate me with an Upvote.<\/font>","e74097d8":"##### There is a very good chance of getting promoted if the employee has won an award","ba8ddb9a":"## <font color='purple'> Random Forest Classifier<\/font>","1686f4c0":"## <font color='purple'> XGBoost CLassifier <\/font>","1715fd7b":"# <font color='Red'>Table of Contents:<\/font>\n1. Importing the Library\n2. Loading the Dataset\n3. Check the Null Values using Visualization\n4. Exploratory Data Analysis\n    - Numerical Value Visualization\n        - Pairplot\n        - Heatmap\n        - Countplot\n        - Hist Plot\n        ....\n    - Categorical Variable Visualization\n5. Data Preprocessing\n    - Handling Categorical Variables\n6. Data Modeling\n    - RandomForest CLassifier\n    - XGBoost Classifier\n    - Light Gradient CLassifier\n    - Extra Trees Classifier","5b77e004":"#### The above plot shows that there is no partiality between males and females in terms of promotion\n\n## <font color='purple'>Data Pre-processing<\/font>","1163fe2f":"#### The Above Graph clearly suggests that previous ratings matter a lot, if the ratings are high, the chances of being promoted in the company increases and there is completely no promotion for the employees with previous year ratings = 0","b7de9850":"#### This is Very Impressive that the company promotes employees of all the ages equally even the freshers have equal share of promotion and also the senior citizen employees are getting the equal share of Promotion in the Company","6715d048":"## <font color='purple'> Exploratory Data Analysis <\/font>","88a17c99":"## <font color='purple'> Loading the Dataset <\/font>","4bdcf54e":"## <font color='purple'> Light Gradient Boosting Classifier<\/font>","2c15ff06":"## <font color='purple'> Extra Trees Classifier<\/font>\n\n","7c9f66de":"# <font color='purple'> Model Building <\/font>","6e29f060":"#### Again, Each of the departments have equal no. of promotions showing an equal developement in each of the departments of the company."}}