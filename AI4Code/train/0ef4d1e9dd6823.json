{"cell_type":{"57d6f1d7":"code","7342fb00":"code","e396811e":"code","7cbcb325":"code","b26712aa":"code","f361cb15":"code","6ae1a3b5":"code","5ab722c1":"code","5b85d0f2":"code","7efce3f3":"code","f7d909f9":"code","4cf8a348":"code","8b6b205a":"code","39d6a0d9":"code","4ee64815":"code","5bdad51b":"code","2de327f5":"code","b7c5112a":"code","f9afe395":"code","79900a54":"code","a2e065d0":"code","650f3644":"code","4914fa89":"code","859fd955":"code","450c71b3":"code","c4ff53b1":"code","da369073":"code","e114966b":"code","75790d78":"code","2d566574":"code","f468fd07":"code","c138e76c":"code","201bf647":"code","053746ab":"code","4c411e5c":"code","6b81d3b6":"code","64702a24":"code","6bb9478c":"code","0627f558":"code","bd260eed":"code","525dfdb9":"code","d56d40f1":"code","485c1ab0":"code","1c387864":"code","dfeabbad":"code","239bcef1":"code","ba3bee35":"code","06be1738":"code","50aad863":"code","f8758da9":"code","40cf97ea":"code","560f3d76":"code","1403a8af":"markdown","c2a561ef":"markdown","060cd7d6":"markdown","444b0734":"markdown","216eeed5":"markdown","3a1ffd22":"markdown","812354bb":"markdown","6896f3d6":"markdown","1945c8b2":"markdown","fcd9dcd3":"markdown","69a0a1ef":"markdown","239cbe43":"markdown","51dd184f":"markdown","1d998679":"markdown","572f2a05":"markdown","acd2dcbd":"markdown","7bdb5497":"markdown","baa403fa":"markdown","624771b0":"markdown","9549d9ca":"markdown","31e9452d":"markdown","f616b170":"markdown","fb7fee5a":"markdown","7f109d5a":"markdown"},"source":{"57d6f1d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7342fb00":"# Loading the covid-19 india date-wise record\ndf=pd.read_csv(\"..\/input\/covid19-in-india\/covid_19_india.csv\")\nstate_testing = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\ndf_vc = pd.read_csv('..\/input\/covid19-in-india\/covid_vaccine_statewise.csv')","e396811e":"# Overviewing the data before modifications\ndf.head()","7cbcb325":"df.info()","b26712aa":"# Checking for any null values\ndf.isnull().sum()","f361cb15":"# Dropping the columns which are not going to be used\n\ndf.drop([\"Sno\",\"Time\",\"ConfirmedIndianNational\",\"ConfirmedForeignNational\"],inplace=True,axis=1)","6ae1a3b5":"#finding the active cases\n\ndf['Active_cases']=df['Confirmed']-(df['Cured']+df['Deaths'])\ndf.head()","5ab722c1":"df['Confirmed'] = pd.to_numeric(df['Confirmed'], errors='coerce')\ndf['Confirmed']=df['Confirmed'].fillna(0)\ndf['Confirmed']=df['Confirmed'].astype('int')\n\ndf['Deaths'] = pd.to_numeric(df['Deaths'], errors='coerce')\ndf['Deaths']=df['Deaths'].fillna(0)\ndf['Deaths']=df['Deaths'].astype('int')\n\ndf['Cured'] = pd.to_numeric(df['Cured'], errors='coerce')\ndf['Cured']=df['Cured'].fillna(0)\ndf['Cured']=df['Cured'].astype('int')\n\ndf['Deaths'] = pd.to_numeric(df['Deaths'], errors='coerce')\ndf['Deaths']=df['Deaths'].fillna(0)\ndf['Deaths']=df['Deaths'].astype('int')\n\ndf['Cured'] = pd.to_numeric(df['Cured'], errors='coerce')\ndf['Cured']=df['Cured'].fillna(0)\ndf['Cured']=df['Cured'].astype('int')","5b85d0f2":"statewise = pd.pivot_table(df, values=['Confirmed','Deaths','Cured'], index='State\/UnionTerritory', aggfunc='max')\nstatewise['Recovery Rate'] = statewise['Cured']*100 \/ statewise['Confirmed']\nstatewise['Mortality Rate'] = statewise['Deaths']*100 \/statewise['Confirmed']\nstatewise = statewise.sort_values(by='Confirmed', ascending= False)\nstatewise.style.background_gradient(cmap='YlOrRd')","7efce3f3":"# Data Cleaning\nstate_testing['TotalSamples']=state_testing['TotalSamples'].fillna(0)\nstate_testing['TotalSamples']=state_testing['TotalSamples'].astype('int')\nstate_testing['Positive']=state_testing['Positive'].fillna(0)\nstate_testing['Positive']=state_testing['Positive'].astype('int')\nstate_testing['Negative']=state_testing['Negative'].fillna(0)\n#state_testing['Negative']=state_testing['Negative'].astype('int')","f7d909f9":"statewise_testing = pd.pivot_table(state_testing, values=['TotalSamples','Positive','Negative'], index='State', aggfunc='max')\nstatewise_testing['Positive_Case_Rate'] = statewise_testing['Positive']*100 \/ statewise_testing['TotalSamples']\nstatewise_testing['Positive_Case_Rate']=round(statewise_testing['Positive_Case_Rate'].astype('int'),2)\nstatewise_testing = statewise_testing.sort_values(by='TotalSamples', ascending= False)\nstatewise_testing.style.background_gradient(cmap='YlOrRd')","4cf8a348":"pip install plotly","8b6b205a":"# Data Visualization Liraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nimport plotly.offline as pyo\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom IPython.display import display, Markdown","39d6a0d9":"testing=state_testing.groupby('State')['TotalSamples'].max().sort_values(ascending=False).reset_index()\nfig = px.bar(testing, \n             x=\"TotalSamples\",\n             y=\"State\", \n             orientation='h',\n             height=800,\n             title='Statewise Testing',\n            color='State')\nfig.show()","4ee64815":"plt.figure(figsize = (18,10))\nfigure = px.line(df, x='Date', y='Confirmed', color='State\/UnionTerritory')\nfigure.update_xaxes(rangeslider_visible=True)\npyo.iplot(figure)","5bdad51b":"# Adding Location data (Latitude,Longitude)\nlocations = {\n    \"Kerala\" : [10.8505,76.2711],\n    \"Maharashtra\" : [19.7515,75.7139],\n    \"Karnataka\": [15.3173,75.7139],\n    \"Telangana\": [18.1124,79.0193],\n    \"Uttar Pradesh\": [26.8467,80.9462],\n    \"Rajasthan\": [27.0238,74.2179],\n    \"Gujarat\":[22.2587,71.1924],\n    \"Delhi\" : [28.7041,77.1025],\n    \"Punjab\":[31.1471,75.3412],\n    \"Tamil Nadu\": [11.1271,78.6569],\n    \"Haryana\": [29.0588,76.0856],\n    \"Madhya Pradesh\":[22.9734,78.6569],\n    \"Jammu and Kashmir\":[33.7782,76.5762],\n    \"Ladakh\": [34.1526,77.5770],\n    \"Andhra Pradesh\":[15.9129,79.7400],\n    \"West Bengal\": [22.9868,87.8550],\n    \"Bihar\": [25.0961,85.3131],\n    \"Chhattisgarh\":[21.2787,81.8661],\n    \"Chandigarh\":[30.7333,76.7794],\n    \"Uttarakhand\":[30.0668,79.0193],\n    \"Himachal Pradesh\":[31.1048,77.1734],\n    \"Goa\": [15.2993,74.1240],\n    \"Odisha\":[20.9517,85.0985],\n    \"Andaman and Nicobar Islands\": [11.7401,92.6586],\n    \"Puducherry\":[11.9416,79.8083],\n    \"Manipur\":[24.6637,93.9063],\n    \"Mizoram\":[23.1645,92.9376],\n    \"Assam\":[26.2006,92.9376],\n    \"Meghalaya\":[25.4670,91.3662],\n    \"Tripura\":[23.9408,91.9882],\n    \"Arunachal Pradesh\":[28.2180,94.7278],\n    \"Jharkhand\" : [23.6102,85.2799],\n    \"Nagaland\": [26.1584,94.5624],\n    \"Sikkim\": [27.5330,88.5122],\n    \"Dadra and Nagar Haveli\":[20.1809,73.0169],\n    \"Lakshadweep\":[10.5667,72.6417],\n    \"Daman and Diu\":[20.4283,72.8397]    \n}\nstatewise[\"Lat\"] = \"\"\nstatewise[\"Long\"] = \"\"\n\nfor index in statewise.index :\n    if index in locations:\n        statewise.loc[statewise.index == index,\"Lat\"] = locations[index][0]\n        statewise.loc[statewise.index == index,\"Long\"] = locations[index][1]\n    else:\n        statewise.drop([index],inplace=True)","2de327f5":"import folium  \nfrom IPython.display import HTML, display\nindia = folium.Map(location=[23,80], zoom_start=4,max_zoom=6,min_zoom=4,height=500,width=\"80%\")\nfor i in range(0,len(statewise[statewise['Confirmed']>0].index)):\n    folium.Circle(\n        location=[statewise.iloc[i]['Lat'], statewise.iloc[i]['Long']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+statewise.iloc[i].name+\"<\/h5>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(statewise.iloc[i]['Confirmed'])+\"<\/li>\"+\n        \"<li>Cured:   \"+str(statewise.iloc[i]['Cured'])+\"<\/li>\"+\n        \"<li>Deaths:   \"+str(statewise.iloc[i]['Deaths'])+\"<\/li>\"+\n        \"<li>Recovery Rate:   \"+str(np.round(statewise.iloc[i]['Recovery Rate'],2))+\"<\/li>\"+\n        \"<li>Mortality Rate:   \"+str(np.round(statewise.iloc[i]['Mortality Rate'],2))+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=(int(np.log2(statewise.iloc[i]['Confirmed']+1)))*15000,\n        color='#ff6600',\n        fill_color='#ff8533',\n        fill=True).add_to(india)\n\nindia","b7c5112a":"df1=df.groupby('Date')[['Cured','Deaths','Confirmed']].sum()","f9afe395":"df1.tail()","79900a54":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=df1.index, y=df1[\"Confirmed\"],\n                    mode='lines+markers',\n                    name='Confirmed Cases'))\nfig.add_trace(go.Scatter(x=df1.index, y=df1[\"Cured\"],\n                    mode='lines+markers',\n                    name='Cured Cases'))\nfig.add_trace(go.Scatter(x=df1.index, y=df1[\"Deaths\"],\n                    mode='lines+markers',\n                    name='Death Cases'))\nfig.update_layout(title=\"Growth of different types of cases in India\",\n                 xaxis_title=\"Date\",yaxis_title=\"Number of Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","a2e065d0":"fig = make_subplots(rows=2, cols=1,\n                   subplot_titles=(\"Recovery Rate\", \"Mortatlity Rate\"))\nfig.add_trace(\n    go.Scatter(x=df1.index, y=(df1[\"Cured\"]\/df1[\"Confirmed\"])*100,\n              name=\"Recovery Rate\"),\n    row=1, col=1\n)\nfig.add_trace(\n    go.Scatter(x=df1.index, y=(df1[\"Deaths\"]\/df1[\"Confirmed\"])*100,\n              name=\"Mortality Rate\"),\n    row=2, col=1\n)\nfig.update_layout(height=1000,legend=dict(x=-0.1,y=1.2,traceorder=\"normal\"))\nfig.update_xaxes(title_text=\"Date\", row=1, col=1)\nfig.update_yaxes(title_text=\"Recovery Rate\", row=1, col=1)\nfig.update_xaxes(title_text=\"Date\", row=1, col=2)\nfig.update_yaxes(title_text=\"Mortality Rate\", row=1, col=2)\nfig.show()","650f3644":"growth_diff = []\n\nfor i in range(1,len(df1['Confirmed'])):\n    growth_diff.append(df1['Confirmed'][i] \/ df1['Confirmed'][i-1])\n\ngrowth_factor = sum(growth_diff)\/len(growth_diff)\nprint('Average growth factor',growth_factor)","4914fa89":"df1.reset_index(inplace=True)\ndf1.head()","859fd955":"prediction_dates = []\nfrom datetime import datetime,timedelta\ndf1['Date']=pd.to_datetime(df1['Date'], format='%Y-%m-%d')\nstart_date = df1['Date'][len(df1['Date']) - 1]\nfor i in range(300):\n    date = start_date +timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date\nprevious_day_cases = df1['Confirmed'][len(df1['Date']) - 1]\npredicted_cases = []\n\nfor i in range(300):\n    predicted_value = previous_day_cases *  growth_factor\n    predicted_cases.append(predicted_value)\n    previous_day_cases = predicted_value\n\nplt.figure(figsize= (15,10))\nplt.xticks(rotation = 90 ,fontsize = 11)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Predicted Values for the next 10 months\" , fontsize = 20)\nax1 = plt.plot_date(y= predicted_cases,x= prediction_dates,linestyle ='-',color = 'c')","450c71b3":"No_Lockdown=df1[df1[\"Date\"]<pd.to_datetime(\"2020-03-24\")]\nLockdown_1=df1[(df1[\"Date\"]>=pd.to_datetime(\"2020-03-24\"))&(df1[\"Date\"]<pd.to_datetime(\"2020-07-15\"))]\nLockdown_2=df1[(df1[\"Date\"]>=pd.to_datetime(\"2020-07-15\"))&(df1[\"Date\"]<pd.to_datetime(\"2020-11-04\"))]\nLockdown_3=df1[(df1[\"Date\"]>=pd.to_datetime(\"2020-11-04\"))&(df1[\"Date\"]<pd.to_datetime(\"2021-02-19\"))]\nLockdown_4=df1[(df1[\"Date\"]>=pd.to_datetime(\"2021-02-19\"))&(df1[\"Date\"]<=pd.to_datetime(\"2021-05-31\"))]\nUnlock_1=df1[(df1[\"Date\"]>=pd.to_datetime(\"2020-06-01\"))&(df1[\"Date\"]<=pd.to_datetime(\"2020-06-30\"))]\nUnlock_2=df1[(df1[\"Date\"]>=pd.to_datetime(\"2020-07-01\"))]\n\nNo_Lockdown_datewise=No_Lockdown.groupby([\"Date\"]).agg({\"Confirmed\":'sum',\"Cured\":'sum',\"Deaths\":'sum'})\nLockdown_1_datewise=Lockdown_1.groupby([\"Date\"]).agg({\"Confirmed\":'sum',\"Cured\":'sum',\"Deaths\":'sum'})\nLockdown_2_datewise=Lockdown_2.groupby([\"Date\"]).agg({\"Confirmed\":'sum',\"Cured\":'sum',\"Deaths\":'sum'})\nLockdown_3_datewise=Lockdown_3.groupby([\"Date\"]).agg({\"Confirmed\":'sum',\"Cured\":'sum',\"Deaths\":'sum'})\nLockdown_4_datewise=Lockdown_4.groupby([\"Date\"]).agg({\"Confirmed\":'sum',\"Cured\":'sum',\"Deaths\":'sum'})\nUnlock_1_datewise=Unlock_1.groupby([\"Date\"]).agg({\"Confirmed\":'sum',\"Cured\":'sum',\"Deaths\":'sum'})\nUnlock_2_datewise=Unlock_2.groupby([\"Date\"]).agg({\"Confirmed\":'sum',\"Cured\":'sum',\"Deaths\":'sum'})\n\nNo_Lockdown_datewise[\"Active Cases\"]=No_Lockdown_datewise[\"Confirmed\"]-No_Lockdown_datewise[\"Cured\"]-No_Lockdown_datewise[\"Deaths\"]\nLockdown_1_datewise[\"Active Cases\"]=Lockdown_1_datewise[\"Confirmed\"]-Lockdown_1_datewise[\"Cured\"]-Lockdown_1_datewise[\"Deaths\"]\nLockdown_2_datewise[\"Active Cases\"]=Lockdown_2_datewise[\"Confirmed\"]-Lockdown_2_datewise[\"Cured\"]-Lockdown_2_datewise[\"Deaths\"]\nLockdown_3_datewise[\"Active Cases\"]=Lockdown_3_datewise[\"Confirmed\"]-Lockdown_3_datewise[\"Cured\"]-Lockdown_3_datewise[\"Deaths\"]\nLockdown_4_datewise[\"Active Cases\"]=Lockdown_4_datewise[\"Confirmed\"]-Lockdown_4_datewise[\"Cured\"]-Lockdown_4_datewise[\"Deaths\"]\nUnlock_1_datewise[\"Active Cases\"]=Unlock_1_datewise[\"Confirmed\"]-Unlock_1_datewise[\"Cured\"]-Unlock_1_datewise[\"Deaths\"]\nUnlock_2_datewise[\"Active Cases\"]=Unlock_2_datewise[\"Confirmed\"]-Unlock_2_datewise[\"Cured\"]-Unlock_2_datewise[\"Deaths\"]\n\nNo_Lockdown_datewise[\"Days Since\"]=(No_Lockdown_datewise.index-No_Lockdown_datewise.index.min()).days\nLockdown_1_datewise[\"Days Since\"]=(Lockdown_1_datewise.index-Lockdown_1_datewise.index.min()).days\nLockdown_2_datewise[\"Days Since\"]=(Lockdown_2_datewise.index-Lockdown_2_datewise.index.min()).days\nLockdown_3_datewise[\"Days Since\"]=(Lockdown_3_datewise.index-Lockdown_3_datewise.index.min()).days\nLockdown_4_datewise[\"Days Since\"]=(Lockdown_4_datewise.index-Lockdown_4_datewise.index.min()).days\nUnlock_1_datewise[\"Days Since\"]=(Unlock_1_datewise.index-Unlock_1_datewise.index.min()).days\nUnlock_2_datewise[\"Days Since\"]=(Unlock_2_datewise.index-Unlock_2_datewise.index.min()).days\n\nprint(\"Average Active Cases growth rate in Lockdown 1.0: \",(Lockdown_1_datewise[\"Active Cases\"]\/Lockdown_1_datewise[\"Active Cases\"].shift()).mean())\nprint(\"Median Active Cases growth rate in Lockdown 1.0: \",(Lockdown_1_datewise[\"Active Cases\"]\/Lockdown_1_datewise[\"Active Cases\"].shift()).median())\nprint(\"Average Active Cases growth rate in Lockdown 2.0: \",(Lockdown_2_datewise[\"Active Cases\"]\/Lockdown_2_datewise[\"Active Cases\"].shift()).mean())\nprint(\"Median Active Cases growth rate in Lockdown 2.0: \",(Lockdown_2_datewise[\"Active Cases\"]\/Lockdown_2_datewise[\"Active Cases\"].shift()).median())\nprint(\"Average Active Cases growth rate in Lockdown 3.0: \",(Lockdown_3_datewise[\"Active Cases\"]\/Lockdown_3_datewise[\"Active Cases\"].shift()).mean())\nprint(\"Median Active Cases growth rate in Lockdown 3.0: \",(Lockdown_3_datewise[\"Active Cases\"]\/Lockdown_3_datewise[\"Active Cases\"].shift()).median())\nprint(\"Average Active Cases growth rate in Lockdown 4.0: \",(Lockdown_4_datewise[\"Active Cases\"]\/Lockdown_4_datewise[\"Active Cases\"].shift()).mean())\nprint(\"Median Active Cases growth rate in Lockdown 4.0: \",(Lockdown_4_datewise[\"Active Cases\"]\/Lockdown_4_datewise[\"Active Cases\"].shift()).median())\nprint(\"Average Active Cases growth rate in Unlock 1.0: \",(Unlock_1_datewise[\"Active Cases\"]\/Unlock_1_datewise[\"Active Cases\"].shift()).mean())\nprint(\"Median Active Cases growth rate in Unlock 1.0: \",(Unlock_1_datewise[\"Active Cases\"]\/Unlock_1_datewise[\"Active Cases\"].shift()).median())","c4ff53b1":"fig=go.Figure()\nfig.add_trace(go.Scatter(y=list(Lockdown_1_datewise[\"Active Cases\"]\/Lockdown_1_datewise[\"Active Cases\"].shift()),\n                    mode='lines+markers',\n                    name='Growth Factor of Lockdown 1.0 Active Cases'))\nfig.add_trace(go.Scatter(y=list(Lockdown_2_datewise[\"Active Cases\"]\/Lockdown_2_datewise[\"Active Cases\"].shift()),\n                    mode='lines+markers',\n                    name='Growth Factor of Lockdown 2.0 Active Cases'))\nfig.add_trace(go.Scatter(y=list(Lockdown_3_datewise[\"Active Cases\"]\/Lockdown_3_datewise[\"Active Cases\"].shift()),\n                    mode='lines+markers',\n                    name='Growth Factor of Lockdown 3.0 Active Cases'))\nfig.add_trace(go.Scatter(y=list(Lockdown_4_datewise[\"Active Cases\"]\/Lockdown_4_datewise[\"Active Cases\"].shift()),\n                    mode='lines+markers',\n                    name='Growth Factor of Lockdown 4.0 Active Cases'))\nfig.add_trace(go.Scatter(y=list(Unlock_1_datewise[\"Active Cases\"]\/Unlock_1_datewise[\"Active Cases\"].shift()),\n                    mode='lines+markers',\n                    name='Growth Factor of Unlock 1.0 Active Cases'))\n# fig.add_trace(go.Scatter(y=list(Unlock_2_datewise[\"Active Cases\"]\/Unlock_2_datewise[\"Active Cases\"].shift()),\n#                     mode='lines+markers',\n#                     name='Growth Factor of Unlock 2.0 Active Cases'))\nfig.update_layout(title=\"Lockdownwise Growth Factor of Active Cases in India\",\n                 xaxis_title=\"Date\",yaxis_title=\"Growth Factor\",\n                 legend=(dict(x=0,y=1,traceorder=\"normal\")))\nfig.show()","da369073":"predIndiaDF = df1.copy()\nextended_period = 2000\nfrom scipy.optimize import curve_fit\ndef sigmoid(x, L, k, x0):\n    return L \/ (1 + np.exp(-k * (x - x0))) + 1\n\npopt, pcov = curve_fit(sigmoid,  (predIndiaDF.index+1).astype(float), predIndiaDF['Confirmed'],  p0=(0,0,0),maxfev=5000 )\n\nx0 = int(popt[2]\/10)\nprint('\\033[1mx0 (point\/day of inflexion):\\033[0m',int(popt[2]\/10))\nprint('\\033[1mL (Maximum no.of cases):\\033[0m',int(popt[0]\/10000) )\nprint('\\033[1mk (Growth Rate):\\033[0m',round(float(popt[1]),2) )\nprint('\\033[1mPCOV: \\033[0m\\n',pcov )\n\nfig = go.Figure()\ndateRange = pd.date_range(pd.to_datetime(predIndiaDF['Date'].min()),\\\n                                         pd.to_datetime(predIndiaDF['Date'].min())+pd.DateOffset(extended_period))\n\nfig.add_trace(go.Scatter(x = predIndiaDF['Date'],\n                         y = predIndiaDF['Confirmed'],\n                         mode = 'lines',\n                         name = 'Observed'))\nfig.add_trace(go.Scatter(x = dateRange[:600],\n                         y = sigmoid([x for x in range(extended_period)],*popt),\n                         mode = 'lines',\n                         name = 'Predicted'))\nfig.add_trace(go.Scatter(x = [dateRange[x0], dateRange[x0]],\n                         y = [0,  sigmoid([x for x in range(extended_period)],*popt)[x0]],\n                         name = 'X0 - Inflexion point',\n                         mode = 'lines'))\n\nfig.update_layout(template='plotly_dark',title='Projected Confirmed Cases')\nfig.show()","e114966b":"import tensorflow as tf\nfrom numpy import array\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_squared_error\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras import Input\nfrom tensorflow.keras.layers import BatchNormalization","75790d78":"from fbprophet import Prophet\nfb_data = df1.copy()\nfb_confirm = fb_data[['Date', 'Confirmed']]\nfb_confirm = fb_confirm.rename(columns={'Date': 'ds',\n                        'Confirmed': 'y'})\n\nfb_confirm.head()","2d566574":"# Time Series Forecasting with Prophet\n# set the uncertainty interval to 95% (the Prophet default is 80%)\nmy_model = Prophet(interval_width=0.95)\nmy_model.fit(fb_confirm)","f468fd07":"# Creating a new dataframe\n# Prophet provides the make_future_dataframe helper function\nfuture_dates = my_model.make_future_dataframe(periods=15, freq='MS')\nfuture_dates.tail()","c138e76c":"forecast = my_model.predict(future_dates)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","201bf647":"from fbprophet.plot import plot_plotly, add_changepoints_to_plot\nfig = plot_plotly(my_model, forecast)\npyo.iplot(fig) \n\nfig = my_model.plot(forecast,xlabel='Date',ylabel='Confirmed Count')","053746ab":"forecast_components=my_model.plot_components(forecast)","4c411e5c":"fb_death = fb_data[['Date', 'Deaths']]\nfb_death = fb_death.rename(columns={'Date': 'ds',\n                        'Deaths': 'y'})\n\nm = Prophet()\nm.fit(fb_death)\nfuture = m.make_future_dataframe(periods=90)\nforecast = m.predict(future)\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat'],\n                    mode='lines+markers',name='Predicted Cases',marker_color='red'))\nfig.add_trace(go.Scatter(x=fb_death['ds'], y=fb_death['y'],\n                    mode='lines+markers',name='Actual Cases',marker_color='blue'))\nfig.update_layout(\n    title='Forecasting of Deaths in INDIA for Next 30 Days')\nfig.show()","6b81d3b6":"fb_Cured = fb_data[['Date', 'Cured']]\nfb_Cured = fb_death.rename(columns={'Date': 'ds',\n                        'Cured': 'y'})\n\nm = Prophet()\nm.fit(fb_Cured)\nfuture = m.make_future_dataframe(periods=90)\nforecast = m.predict(future)\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat'],\n                    mode='lines+markers',name='Predicted Cases',marker_color='green'))\nfig.add_trace(go.Scatter(x=fb_Cured['ds'], y=fb_Cured['y'],\n                    mode='lines+markers',name='Actual Cases',marker_color='yellow'))\nfig.update_layout(\n    title='Forecasting of Cured in INDIA for Next 30 Days')\nfig.show()","64702a24":"# test size\ntest_size = 30\ntrain_size= len(df1) - test_size\ntrain = df1[['Confirmed']].iloc[:train_size]\ntest = df1[['Confirmed']].iloc[train_size:]\n# train and test\n\nprint(train.shape)\nprint(test.shape)","6bb9478c":"# exons variables\nexons=df1[['Cured','Deaths']]\n\nfull_data = df1['Confirmed']","0627f558":"import statsmodels.api as sm\nSARIMAX__model = sm.tsa.statespace.SARIMAX(full_data.values,exons=exons,\n                                            order=(1,0,1),\n                                            seasonal_order=(1,0,1,7),\n                                         enforce_stationarity=False,\n                                         enforce_invertibility=False,)\nSARIMAX__model = SARIMAX__model.fit(maxiter=1000)\n\ndays=150\nprediction = SARIMAX__model.get_forecast(steps=days)\npred_date = prediction.summary_frame(alpha=0.05).set_index(pd.date_range(start='2021-08-11',periods=days,freq='D'))","bd260eed":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    name=\"Actual\",\n     x=df1['Date'], y=df1[\"Confirmed\"]))\n\nfig.add_trace(go.Scatter(\n    name=\"prediction\",mode=\"lines\",\n     x=pred_date.index, y=pred_date['mean']))\n\nfig.add_trace(go.Scatter(\n    name=\"lowerbound\",mode=\"lines\",\n        line=dict(width=0),fillcolor='rgba(68, 68, 68, 0.3)',\n        fill='tonexty',showlegend=False,\n     x=pred_date.index, y=pred_date['mean_ci_lower']))\n\nfig.add_trace(go.Scatter(name=\"upperbound\",mode=\"lines\",\n        line=dict(width=0),fillcolor='rgba(68, 68, 68, 0.3)',fill='tonexty',showlegend=False,\n                         x=pred_date.index, y=pred_date['mean_ci_upper']))","525dfdb9":"Telangana_test=state_testing[(state_testing['State']=='Telangana')]\nplt.figure(figsize=(8,8))\nplt.plot(Telangana_test['Date'],Telangana_test['TotalSamples'],'-r')\nplt.rc(\"xtick\",labelsize=9)\nplt.rc(\"ytick\",labelsize=10)\nax = plt.gca()\nstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, 12))\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Total Samples')\nplt.title('Dates V\/S Total Samples')\nax.annotate('Lockdown 2', xy =('2020-07-15', 21994), xytext=('2020-07-15',150000),ha='center',\n                arrowprops = dict(facecolor ='Blue',shrink = 0.05),) \nax.annotate('Lockdown 3', xy =('2020-11-04',162970), xytext=('2020-11-04',5000),ha='center', \n                arrowprops = dict(facecolor ='Yellow',shrink = 0.05),) \nax.annotate('Lockdown 4', xy =('2021-03-18',337841), xytext=('2021-03-18',185000),ha='center',\n                arrowprops = dict(facecolor ='Black',shrink = 0.05),) \nax.annotate('Unlock 1.0', xy =('2021-06-08',607952), xytext=('2021-06-08',200000),ha='center',\n                arrowprops = dict(facecolor ='orange',shrink = 0.05),) ","d56d40f1":"states=['Kerala', 'Telengana', 'Tamil Nadu', 'Karnataka', 'Maharashtra',\n        'Andhra Pradesh']\nfrom datetime import datetime,timedelta\ndf['Date']=pd.to_datetime(df['Date'], format='%Y-%m-%d')\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom statsmodels.tsa.arima_model import ARIMA\nfig = plt.figure(figsize=(25,20),dpi = 250)\nsubplotno = 1\n\nfor state in states:\n    \n     \n    state_df = df[df['State\/UnionTerritory'] == state]\n    y = state_df['Confirmed']\n    \n    arima = ARIMA(y, order=(5, 2, 0))\n    arima = arima.fit(trend='c', full_output=True, disp=True)\n    forecast = arima.forecast(steps= 6)\n    pred = list(forecast[0])\n\n    start_date = state_df['Date'].max()\n\n    prediction_dates = [pd.to_datetime(start_date)]\n\n    for i in range(5):\n        \n        tempdate = start_date + timedelta(days=1)\n        prediction_dates.append(tempdate)\n        start_date = tempdate\n    \n    ax = fig.add_subplot(3,2,subplotno)\n    \n    plt.title(state + ' : ' + str(int(round(pred[-1],0))) + ' Cases' , fontsize = 16)\n\n\n    plt.xticks(fontsize = 8)\n    \n    sns.lineplot(y= pred,x= prediction_dates,linestyle ='dashed',label = 'Predicted',color = 'red')\n    sns.lineplot(y=state_df['Confirmed'] , x = state_df['Date'] ,color = 'darkcyan',label = 'Actual')\n    plt.legend()\n    \n\n    plt.ylabel('')\n    plt.xlabel('')\n\n    subplotno +=1\n\nplt.suptitle('State-wise Predicted Number of Cases by '+str(prediction_dates[-1].date()) ,fontsize = 23)\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\nplt.savefig('Statepred - ARIMA')","485c1ab0":"vc_pro =df_vc.groupby('State')['Total Individuals Vaccinated'].max().reset_index().sort_values(['Total Individuals Vaccinated'],ascending=False)\nvc_pro","1c387864":"andhra = df_vc[df_vc[\"State\"]==\"Andhra Pradesh\"] \nandhra.head()","dfeabbad":"fig = px.line(andhra,x=\"Updated On\",y=\"Total Individuals Vaccinated\",title=\"Total Individuals Vaccinated from day to day\")  \nfig.update_xaxes(rangeslider_visible=True) ","239bcef1":"fig = px.line(andhra,x=\"Updated On\",y=\"Sessions\",title=\"Total Number of sessions are conducted from day to day\")  \nfig.update_xaxes(rangeslider_visible=True) ","ba3bee35":"male = andhra[\"Male (Doses Administered)\"].sum() \nfemale = andhra[\"Female (Doses Administered)\"].sum()  \ntrans = andhra[\"Transgender (Doses Administered)\"].sum()\npx.pie(names=[\"Male Vaccinated\",\"Female Vaccinated\",\"Trans Gender\"],values=[male,female,trans],title=\"Male and Female Vaccinated ratio for Covid19--Andhra Pradesh\")","06be1738":"first = andhra[\"First Dose Administered\"].sum() \nsecond = andhra[\"Second Dose Administered\"].sum() \npx.pie(names=[\"First Dose\",\"Second dose\"],values=[first,second],title =\"First and Second dosage ratio for covid in andhra pradesh\")","50aad863":"Telangana  = df_vc[df_vc[\"State\"]==\"Telangana\"]\nfig = px.line(Telangana,x=\"Updated On\",y=\"Total Individuals Vaccinated\",title=\"Total Individuals Vaccinated from day to day-->Telangana\")  \nfig.update_xaxes(rangeslider_visible=True)","f8758da9":"fig = px.line(Telangana,x=\"Updated On\",y=\"Sessions\",title=\"Total Number of sessions are conducted from day to day-->Telangana\")  \nfig.update_xaxes(rangeslider_visible=True)","40cf97ea":"male = Telangana[\"Male (Doses Administered)\"].sum() \nfemale = Telangana[\"Female (Doses Administered)\"].sum()  \ntrans = Telangana[\"Transgender (Doses Administered)\"].sum()\npx.pie(names=[\"Male Vaccinated\",\"Female Vaccinated\",\"Trans Gender\"],values=[male,female,trans],title=\"Male and Female Vaccinated ratio for Covid19-->Telangana\")","560f3d76":"first = Telangana[\"First Dose Administered\"].sum() \nsecond = Telangana[\"Second Dose Administered\"].sum()\npx.pie(names=[\"First Dose\",\"Second dose\"],values=[first,second],title =\"First and Second dosage ratio for covid in Telangana\")","1403a8af":"Fitting data into a Logistic Curve\/Sigmoid equation: y=(L1\/1+e\u2212k(x\u2212x0))+1","c2a561ef":"**Telangana**\n\nPopulation = 39.9 Million","060cd7d6":"# State wise prediction","444b0734":"# State wise Analysis","216eeed5":"**Andhra Pradesh**\n\nPopulation = 54.6 Million","3a1ffd22":"# **Data loading**","812354bb":"Our fight with COVID starts and ends with the people. By folowing the guideline stated below, we can overcome this pandamic situation:\n\nVulnerable Age Groups: Children less than 10yrs of age and elders above 60yrs of age are advised to avoid going out doors unless mandatory. They are advised to stay indoors.\n\nUse of Face Masks: Everybody should wear mask when he\/she goes out of the house. Face masks are the first line of defence against Covid-19.\n\nPhysical Distancing: Maintaining a distance of more than 6ft between people is essential. The citizens who go out for purchasing groceries and other essentials are advised to maintain safe physical distance.\n\nWorkspace: The work spaces are to be provided with soap and hand washing facility \/ sanitizer. Adequate physical distancing between employees should be maintained.\n\nTravel: The citizens are requested to avoid unnecessary travel. In case it is unavoidable, they shall ensure all safety measures- use of face masks, frequent hand wash, use of sanitizer, safe physical distance etc.\n\nSeek Medical care: In case of any Flu\/ Influenza like symptoms such as fever, cough, sore throat, running nose, difficulty in breathing, body pains and headache, please report to the nearest government health facility and seek health services without any delay.\n\nCo-Morbid conditions: People with Co-morbid conditions like Hypertension, Diabetes, Cardiac illness, chronic kidney disease, chronic obstructive pulmonary disease, Cancer and \/ or any other chronic illness are requested to stay indoors and avoid any kind of travel except for medical care in order to avoid exposure to COVID.","6896f3d6":"Will 3rd wave hit India?\n\nIt's frightening to see what may come to be. But ,it is quite possible to flatten the curve in the next few months.\n\nWe should follow the protocols and get vaccinated as soon as possible.","1945c8b2":"# Prediction","fcd9dcd3":"# Visualizations","69a0a1ef":"It's no brainer that Maharshtra tops this list in all aspect\n\nConsidering the number of cases Punjab has done a great job when it comes to recovery rate\n\nSimilarly in terms of mortality rate West Bengal and Gujarat seem to have higher numbers\n\nTamilnadu, Maharshtra, Andhra Pradesh and Rajastan respectively had ramped up their testing capabilities\n\nThough being second in the country w.r.t. total confirmed cases Tamilnadu seem to have established the healthcare facility to a higher level which is evident from the lower mortality rate (0.6%)","239cbe43":"Above data shows Maharastra has more number of active cases.","51dd184f":"# **Covid-19 Analysis in India**","1d998679":"On 24 March 2020, PM Narendra Modi announced a complete nationwide lockdown\n\n* No lockdown= 2020-01-30 to 2020-03-24\n* lockdown 1= 2020-03-24 to 2020-07-15\n* Lockdown_2= 2020-07-15 to 2020-11-04\n* Lockdown_3= 2020-11-04 to 2021-02-19\n* Lockdown_4= 2021-02-19 to 2021-05-31\n* Unlock_1= 2020-06-01 to 2020-06-30\n* Unlock_2= 2020-07-01 to present","572f2a05":"All Lockdowns seems to have shown a slight effect of the Growth Rate of Active Cases implying the COVID-19 controlling practices are working well.\n\nThe Growth rate of Active Cases has slowed down during each Lockdown.\n\nGrowth of Active Cases is showing a decreasing trend in Lockdown 3.0, probably because Lockdown 3.0 is much more lenient as compared to previous Lockdown versions","acd2dcbd":"* ds: the datestamp of the forecasted value\n* yhat: the forecasted value of our metric (in Statistics, yhat is a notation traditionally used to represent the predicted values of a value y)\n* yhat_lower: the lower bound of our forecasts\n* yhat_upper: the upper bound of our forecasts","7bdb5497":"SARIMAX MODEL","baa403fa":"We could see that the graph is increasing exponentialy if the average growth factor doesn't decrease. It is important that the growth factor is reduced to flatten the curve.","624771b0":"Mortality rate = (Number of Death Cases \/ Number of Confirmed Cases) x 100\n\nRecovery Rate= (Number of Recoverd Cases \/ Number of Confirmed Cases) x 100\n\nRecovery Rate was initially very high when the number of positive (Confirmed) cases were low and showed a drastic drop with increasing number of cases. Increasing Mortality rate and dropped Recovery Rate is worrying sign for India.\n\nIncreasing Mortality Rate and very slowly increasing Recovery Rate is conclusive evidence for increase in number of Closed Cases\n\nRecovery Rate is showing an upward trend which is a really good sign. Mortality Rate is showing a slight dips but with occasional upward trends.","9549d9ca":"The infection trend is exponential and evident india has not yet reached the peak point\n\nTowards weekend and beginning of the week the confirmed cases rate seem to be high\n\nMovement of people during weekend and week beginning. This could contribute this rise\n\nSocial distancing not followed in some parts of the country as evident from various web sources and news channels","31e9452d":"# Effect of Lockdown","f616b170":"# Vaccination Progress","fb7fee5a":"**Facebook's Prophet Model Prediction**","7f109d5a":"![image.png](attachment:314f1af4-771c-4187-ad53-d53d45b97901.png)"}}