{"cell_type":{"7bdee0bb":"code","17b7c850":"code","90bd9510":"code","72ee64da":"code","f1b93ad9":"code","caf7cb07":"code","42af868d":"code","9cf45d54":"code","e67e55be":"code","dc67a7eb":"code","fabc2aea":"code","a4f6514f":"code","5c07476d":"code","397da710":"code","59004e0f":"code","877a867a":"code","c91380c2":"code","534eeed2":"code","c8c77a6e":"code","9116fd42":"code","3d0043dc":"code","d873de57":"markdown","9140bb6d":"markdown","86df8db3":"markdown","addee63e":"markdown","a0425cb3":"markdown","df5bdfe0":"markdown","860d1b4e":"markdown","d822f88f":"markdown","06e3f278":"markdown","1a798446":"markdown","4e68bbf1":"markdown","cdff0321":"markdown"},"source":{"7bdee0bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pylab as pl\nimport seaborn as sns\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pydicom as dcm\nfrom glob import glob\n\n\nWidth, Height = 1024, 1024\n\n# modified from the provided .py files\ndef mask2rle(img, width=Width, height=Height):\n    if img is None or pl.isnan(img).all():\n        return '-1'\n    rle = []\n    lastColor = 0;\n    currentPixel = 0;\n    runStart = -1;\n    runLength = 0;\n\n    for x in range(width):\n        for y in range(height):\n            currentColor = img[x][y]\n            if currentColor != lastColor:\n                if currentColor == 255:\n                    runStart = currentPixel;\n                    runLength = 1;\n                else:\n                    rle.append(str(runStart));\n                    rle.append(str(runLength));\n                    runStart = -1;\n                    runLength = 0;\n                    currentPixel = 0;\n            elif runStart > -1:\n                runLength += 1\n            lastColor = currentColor;\n            currentPixel+=1;\n\n    return \" \".join(rle)\n\ndef rle2mask(rle, width=Width, height=Height):\n    mask= np.zeros(width* height)\n    if rle == '-1' or rle == ' -1':\n        return mask.reshape(width, height)\n    array = np.asarray([int(x) for x in rle.split()])\n    starts = array[0::2]\n    lengths = array[1::2]\n\n    current_position = 0\n    for index, start in enumerate(starts):\n        current_position += start\n        mask[current_position:current_position+lengths[index]] = 255\n        current_position += lengths[index]\n\n    return mask.reshape(width, height)\n\n","17b7c850":"trFolders = glob('..\/input\/siim-train-test\/siim\/dicom-images-train\/*')\ntsFolders = glob('..\/input\/siim-train-test\/siim\/dicom-images-test\/*')\ntrainDF = pd.read_csv('..\/input\/siim-train-test\/siim\/train-rle.csv', index_col='ImageId')","90bd9510":"Attrs = ['ViewPosition', 'PatientAge', 'PatientSex',\n#         'StudyDate', 'Modality', 'ConversionType',\n#          'ReferringPhysicianName','BodyPartExamined',\n#          'SeriesNumber', 'InstanceNumber','PatientOrientation',\n#          'SamplesPerPixel','PhotometricInterpretation','Rows', 'Columns', \n#         'PixelSpacing','BitsAllocated','BitsStored','HighBit', 'PixelRepresentation', \n#         'LossyImageCompression', 'LossyImageCompressionMethod',\n        ]\n\n\ndef readMetaData(Folders, DF=pd.DataFrame()):\n    missing = []\n    for Fol in Folders:\n        Sub = glob(Fol+'\/*')\n        File = glob(Sub[0]+'\/*.dcm')[0]\n        ID = File.split('\/')[-1][:-4]\n        try:\n            DCM = dcm.dcmread(File)\n            for atr in Attrs:\n                DF.loc[ID, atr] = getattr(DCM, atr)\n            Im = DCM.pixel_array\n            for i, Part in enumerate([Im, \n                            Im[:512, :512], \n                            Im[:512, 512:], \n                            Im[512:, :512], \n                            Im[512:, 512:]]):\n                DF.loc[ID, 'ImageMean_%d'%i] = Part.mean()\n                DF.loc[ID, 'ImageStd_%d'%i] = Part.std()\n        except Exception:\n            missing.append(File)\n    return DF, missing","72ee64da":"trainDF, missingTR = readMetaData(trFolders, trainDF)\ntestDF, missingTS = readMetaData(tsFolders)\nprint(f'{len(missingTR)} files in train set are not downloaded perperly')\nprint(f'{len(missingTS)} files in test set are not downloaded perperly')","f1b93ad9":"trainDF.rename(columns={' EncodedPixels':'EncodedPixels'}, inplace=True)\ntrainDF['PneumMask'] = trainDF.EncodedPixels.apply(rle2mask)\ntrainDF['PneumSize'] = trainDF.PneumMask.apply(lambda mask: len(np.where(mask>0)[0]))\ntrainDF['PneumSizeLog'] = trainDF.PneumSize.apply(np.log1p)\ntrainDF.dropna(inplace=True)","caf7cb07":"MaskFreq = np.mean(trainDF[trainDF.PneumSize > 0].PneumMask.values, 0)\nMaskFreq \/= 255  # when the pixel is present in the mask, its value is 255\n# It is the probability of being in the mask if the patient is diagnosed with Pneumothorax.\n\npl.figure(figsize=(10,10))\npl.imshow(MaskFreq.T);\npl.title('Most Frequent Spots')\npl.axis('off');","42af868d":"pl.figure(figsize=(16,5))\nfor i, (Cond, Label)  in enumerate(zip([trainDF.PatientSex=='F', \n                                     trainDF.PatientSex=='M', \n                                     trainDF.ViewPosition=='PA', \n                                     trainDF.ViewPosition=='AP'], \n                                    ['Female','Male','PA View', 'AP View'])):\n    pl.subplot(1,4,i+1)\n    pl.imshow(np.sum(trainDF[Cond].PneumMask.values, 0).T);\n    pl.title(Label)\n    pl.axis('off');\npl.subplots_adjust(wspace=0.01, left=0.01, right=0.99)","9cf45d54":"for DF in [trainDF, testDF]:\n    DF['PatientAge'] = DF.PatientAge.astype(int)\n    DF['PatientAge'] = DF.PatientAge.apply(lambda x:x if x<100 else int(x\/10))\n","e67e55be":"trainDF.head()","dc67a7eb":"testDF.head()","fabc2aea":"sns.distplot(trainDF.PatientAge);\nsns.distplot(testDF.PatientAge);","a4f6514f":"print('Train Set:\\n', trainDF.PatientSex.value_counts())\nprint('Test Set:\\n', testDF.PatientSex.value_counts())","5c07476d":"print('Train Set:\\n', trainDF.ViewPosition.value_counts())\nprint('Test Set:\\n', testDF.ViewPosition.value_counts())","397da710":"pl.figure(figsize=(15,7))\npl.scatter(trainDF.PatientAge, trainDF.PneumSizeLog, \n           c=list(map(lambda k: 5 if k == 'F' else  10, trainDF.PatientSex)),\n           s=list(map(lambda k: 5 if k == 'PA' else 10, trainDF.ViewPosition)), \n          )\npl.xlabel('Age')\npl.ylabel('Pneum Size (Log)')\npl.legend(['F:Blue \\nM:Yellow']);","59004e0f":"pl.figure(figsize=(15,10))\nsns.lineplot(x='PatientAge',hue='PatientSex', y='PneumSizeLog', data=trainDF);","877a867a":"pl.figure(figsize=(15,7))\npl.scatter(trainDF.ImageMean_0, trainDF.ImageStd_0, c=trainDF.PneumSizeLog, s=trainDF.PneumSizeLog*2+1);\npl.xlabel('Pixel Average')\npl.ylabel('Pixel STD')\ncb=pl.colorbar()\ncb.set_label('Pneum Size')","c91380c2":"from catboost import CatBoostRegressor\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error as mse\n\nVars = ['ViewPosition', 'PatientAge', 'PatientSex'] + \\\n        sum([['ImageMean_%d'%i, 'ImageStd_%d'%i] for i in range(5)], []) \nnFolds = 10\ntrOutput = pl.zeros(len(trainDF))\ntsOutput = pl.zeros(len(testDF))\nspliter = KFold(nFolds)\nfor trInx, vlInx in spliter.split(trainDF[Vars], trainDF.PneumSizeLog):\n    Xtr, Xvl = trainDF[Vars].iloc[trInx], trainDF[Vars].iloc[vlInx]\n    Ytr, Yvl = trainDF.PneumSizeLog.iloc[trInx], trainDF.PneumSizeLog.iloc[vlInx]\n    Reg = CatBoostRegressor(objective='RMSE', n_estimators=10000)\n    Reg.fit(Xtr, Ytr, cat_features=['ViewPosition', 'PatientSex'], silent=True,\n            eval_set=[(Xvl, Yvl)], early_stopping_rounds=500)\n    trOutput[vlInx] = Reg.predict(Xvl)\n    tsOutput += Reg.predict(testDF[Vars]) \/ nFolds\n\npl.plot(trainDF.PneumSizeLog, trOutput, '.')\npl.title('rmse: %.5g' % mse(trainDF.PneumSizeLog, trOutput)**0.5)\npl.xlabel('train log Pneumothorax Size')\npl.ylabel('train Output');","534eeed2":"tsOutput[tsOutput<0] = 0\ntestDF['PneumSize'] = np.expm1(tsOutput)","c8c77a6e":"def getMask(numPos, MaskFreq=MaskFreq):\n    prob = MaskFreq \/ MaskFreq.sum() * numPos\n    return np.where(pl.rand(prob.shape[0], prob.shape[1])<=prob, 255, 0)\n\n\ntestDF['Mask'] = testDF.PneumSize.apply(getMask)","9116fd42":"sub = pd.read_csv('..\/input\/siim-acr-pneumothorax-segmentation\/sample_submission.csv', index_col='ImageId')\nsub = sub.join(testDF[['Mask']])\nsub['EncodedPixels'] = sub.Mask.apply(mask2rle)\nsub[['EncodedPixels']].to_csv('submission.csv', index_label='ImageId')","3d0043dc":"sub.sample(10)","d873de57":"From the provided masks I creat a new target column which shows the greatness (size) of the *Pneumothorax* and its log values. Later I'm going to predict this value based on only simple features provided in the metadata of the files.","9140bb6d":"Simple Pixel statistics also don't seem to be predictive of Pneum Size. \n\nBut Let's build our model anyways:\n\nI make a simple CatBoostRegressor model with no fancy hyper-parameters:","86df8db3":"The relation of detected Pneum Size to the Patients age, sex, and imaging direction is not strong.","addee63e":"There are more Male subjects, and more PA scans in both of the train and test sets.","a0425cb3":"Let's make a submission based on that:","df5bdfe0":"Distribution of Patient Ages seems to be similar in train and test sets:","860d1b4e":"We can see there are locations in the lungs more vulnerable to Pneumothorax. We later use this Map to guess Pneumothorax spots in the test set.\n\nLet's take a look at frequency of Pneumothorax spots for different meta-data conditions:","d822f88f":"Lets continue with preparing datasets:\n\nSome data cleaning is always necessary, here we should decide what to do with ages greater than 100. I guess they are typos, so I divide them by 10.","06e3f278":"The masks are located on the lungs and if we aggregate them on top of each other:","1a798446":"In this simple kernel, I'm going to guess the degree a patient has Pneumothorax, and fill the submission with the most frequent masked pixels.\n\nI know it is somewhat silly, but let's play around with the dataset.\n\nThanks to [@seesee](https:\/\/www.kaggle.com\/seesee), the dataset is now available on Kaggle as well:\nhttps:\/\/www.kaggle.com\/seesee\/siim-train-test","4e68bbf1":"Based on the Frequency of Pneumothorax spots and predicted size of the colapsed area we can extract masks that are most probable, with the desired size:","cdff0321":"DCM files have many attributes, that in our case only **ViewPosition**, **PatientAge**, **PatientSex** had meaningful values. View Position has two values of PA and AP, which are most probably posterior-anteror and anterior-posterior. They show the direction at which the scan was taken. i.e. from front or from back. (Correct me if I'm wrong)"}}