{"cell_type":{"c02c67a6":"code","ee29e8e4":"code","b16f9a7e":"code","0fa5e81b":"code","6e77d8f6":"code","e1ec047a":"code","ffb3744e":"code","4ccd2335":"code","ba10e90f":"code","ac6df962":"code","88f0956e":"code","4b8ea70f":"code","86ed81ad":"code","2f562225":"code","bffdbd70":"code","d180fa22":"code","5ca20bf7":"code","dbfa0069":"code","b9db627f":"code","666e08ad":"code","a1267d67":"code","749c543e":"code","21472087":"code","3007b524":"code","683832a5":"code","ad73cdee":"code","1e335845":"code","708cec56":"code","38d1fb0e":"code","ee94da92":"code","a8e45909":"code","ff7bba1e":"code","d88403ac":"code","74333c8c":"code","2c34d438":"code","da00c717":"code","090bb7db":"code","04742f06":"code","0cbb4c87":"code","f2fa342f":"code","bd5514fa":"code","9ac6dfc6":"code","f9d2d9b3":"code","76233113":"code","f0b6bfde":"code","c80869d2":"code","4424bf6d":"code","17117fbe":"code","eeb4f357":"code","54bb7d7c":"code","4dcc7169":"code","83e36d6e":"code","0e8e0044":"code","aab65f4b":"code","02d71927":"code","2196645e":"code","d1691ced":"code","c70520fd":"code","6b053cc2":"code","c586f244":"code","a8d096d4":"code","835acb2c":"code","1b597034":"code","86d07fb0":"code","cb451d89":"code","cc120e0c":"code","526ab871":"code","ebd5d015":"code","f7b71a3f":"code","0ee8c545":"code","e84f0c43":"code","67924264":"code","88dc1afb":"code","9326fa0f":"code","609a401e":"code","1b80511a":"code","1c532e00":"code","60021e3d":"code","178d5eee":"code","d042110e":"code","c79fcd3a":"code","31ebf66f":"markdown","5b7e398a":"markdown","d951046f":"markdown","bfc26ba0":"markdown","fcfa8bac":"markdown","62acbacc":"markdown","12ccc105":"markdown","c57d343c":"markdown","701aafc1":"markdown","303035f1":"markdown","8b84356b":"markdown","31eb7202":"markdown","27291235":"markdown","c0e3e377":"markdown"},"source":{"c02c67a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ee29e8e4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","b16f9a7e":"df = pd.read_csv(\"..\/input\/random-forest-hotel-booking\/hotel_bookings.csv\")\ndf.head()","0fa5e81b":"df.shape","6e77d8f6":"df.dtypes","e1ec047a":"df.describe()","ffb3744e":"df[\"is_canceled\"].value_counts()","4ccd2335":"df[\"hotel\"].value_counts()","ba10e90f":"df[\"target\"] = np.where(df[\"is_canceled\"].isin([\"1\"]), 1, 0)\ndf[\"target\"].value_counts()","ac6df962":"df[\"target\"].mean()","88f0956e":"sns.countplot(x = \"target\", data = df)\nplt.show","4b8ea70f":"## checking missing values\ndf.isnull().sum()","86ed81ad":"# Replace missing values:\n# agent: If no agency is given, booking was most likely made without one.\n# company: If none given, it was most likely private.\n# rest schould be self-explanatory.\nnan_replacements = {\"children\": 0,\"country\": \"Unknown\", \"agent\": 0, \"company\": 0}\ndf = df.fillna(nan_replacements)\n\n# \"meal\" contains values \"Undefined\", which is equal to SC.\ndf[\"meal\"].replace(\"Undefined\", \"SC\", inplace=True)","2f562225":"## Checking null values\ndf.isnull().sum()","bffdbd70":"ax = sns.barplot(x = \"meal\", y = \"target\", data = df, estimator = np.mean)","d180fa22":"ax = sns.barplot(x = \"arrival_date_month\", y = \"target\", data = df, estimator = np.mean)","5ca20bf7":"df.groupby(\"arrival_date_month\")[\"target\"].mean()","dbfa0069":"df.groupby(\"country\")[\"target\"].mean()","b9db627f":"ax = sns.barplot(x = \"market_segment\", y = \"target\", data = df, estimator = np.mean)","666e08ad":"df.groupby(\"market_segment\")[\"target\"].count()","a1267d67":"ax = sns.barplot(x = \"distribution_channel\", y = \"target\", data = df, estimator = np.mean)","749c543e":"df.groupby(\"distribution_channel\")[\"target\"].count()","21472087":"ax = sns.barplot(x = \"reserved_room_type\", y = \"target\", data = df, estimator = np.mean)","3007b524":"df.groupby(\"reserved_room_type\")[\"target\"].count()","683832a5":"ax = sns.barplot(x = \"assigned_room_type\", y = \"target\", data = df, estimator = np.mean)","ad73cdee":"df.groupby(\"assigned_room_type\")[\"target\"].count()","1e335845":"ax = sns.barplot(x = \"deposit_type\", y = \"target\", data = df, estimator = np.mean)","708cec56":"df.groupby(\"deposit_type\")[\"target\"].count()","38d1fb0e":"ax = sns.barplot(x = \"customer_type\", y = \"target\", data = df, estimator = np.mean)","ee94da92":"df.groupby(\"customer_type\")[\"target\"].count()","a8e45909":"ax = sns.barplot(x = \"reservation_status\", y = \"target\", data = df, estimator = np.mean)\n","ff7bba1e":"df.groupby(\"reservation_status\")[\"target\"].count()","d88403ac":"ax = sns.barplot(x = \"lead_time\", y = \"target\", data = df, estimator = np.mean)","74333c8c":"df.groupby(\"lead_time\")[\"target\"].count()","2c34d438":"df['lead_time_rank']=pd.qcut(df['lead_time'].rank(method='first').values,10,duplicates='drop').codes+1","da00c717":"df.groupby(\"lead_time_rank\")[\"target\"].min()","090bb7db":"ax = sns.barplot(x = \"lead_time_rank\", y = \"target\", data = df, estimator = np.mean)","04742f06":"ax = sns.barplot(x = \"arrival_date_year\", y = \"target\", data = df, estimator = np.mean)","0cbb4c87":"df.groupby(\"arrival_date_year\")[\"target\"].mean()","f2fa342f":"ax = sns.barplot(x = \"stays_in_weekend_nights\", y = \"target\", data = df, estimator = np.mean)","bd5514fa":"df.groupby(\"stays_in_weekend_nights\")[\"target\"].mean()","9ac6dfc6":"ax = sns.barplot(x = \"stays_in_weekend_nights\", y = \"target\", data = df, estimator = np.mean)","f9d2d9b3":"df[\"stays_in_week_nights_rank\"] = pd.qcut(df['stays_in_week_nights'].rank(method='first').values,\n                                          5,duplicates='drop').codes+1","76233113":"ax = sns.barplot(x = \"stays_in_week_nights_rank\", y = \"target\", data = df, estimator = np.mean)","f0b6bfde":"df['stay_in_week_night_grp']=np.where(df['stays_in_week_nights_rank'].isin(['1','2']),1,\n                                      np.where(df['stays_in_week_nights_rank'].isin(['3','4']),2,3))\ndf.groupby('stay_in_week_night_grp')['target'].mean()","c80869d2":"ax = sns.barplot(x = \"is_repeated_guest\", y = \"target\", data = df, estimator = np.mean)","4424bf6d":"df.groupby(\"is_repeated_guest\")[\"target\"].mean()","17117fbe":"ax = sns.barplot(x = \"previous_cancellations\", y = \"target\", data = df, estimator = np.mean)","eeb4f357":"df.groupby(\"previous_cancellations\")[\"target\"].mean()","54bb7d7c":"df[\"previous_cancellations\"].value_counts()","4dcc7169":"df[\"prev_cancel_ind\"] = np.where(df['previous_cancellations'].isin([\"0\"]),0,1)\ndf.groupby(\"prev_cancel_ind\")[\"target\"].count()","83e36d6e":"ax = sns.barplot(x = \"booking_changes\", y = \"target\", data = df, estimator = np.mean)","0e8e0044":"df.groupby(\"booking_changes\")[\"target\"].mean()","aab65f4b":"df.groupby(\"days_in_waiting_list\")[\"target\"].mean()","02d71927":"df['day_wait_rank'] = pd.qcut(df['days_in_waiting_list'].rank(method='first').values,5,duplicates='drop').codes+1\nax = sns.barplot(x = \"day_wait_rank\", y = \"target\", data=df, estimator = np.mean)","2196645e":"df['day_wait_ind']=np.where(df['day_wait_rank'].isin(['3']),1,0)\ndf.groupby('day_wait_ind')['target'].count()","d1691ced":"df[\"adr_rank\"] = pd.qcut(df[\"adr\"].rank(method='first').values,10 ,duplicates='drop').codes+1\nax = sns.barplot(x = \"adr_rank\", y = \"target\", data=df, estimator = np.mean)","c70520fd":"ax = sns.barplot(x = \"total_of_special_requests\", y = \"target\", data = df, estimator = np.mean)","6b053cc2":"df.groupby(\"total_of_special_requests\")[\"target\"].mean()","c586f244":"col_num = [\"lead_time\", \"adr\"]","a8d096d4":"col_char = [\"total_of_special_requests\", \"day_wait_ind\", \"prev_cancel_ind\", \n            \"stay_in_week_night_grp\", \"market_segment\", \"reserved_room_type\",\n            \"distribution_channel\"]","835acb2c":"x_dummies = pd.get_dummies(df[col_char], drop_first = True)","1b597034":"x_all = pd.concat([df[col_num],x_dummies], axis = 1, join = \"inner\")","86d07fb0":"x_var = x_all\ny_var = df[\"target\"]","cb451d89":"x_train, x_test, y_train, y_test = train_test_split(x_var, y_var, test_size = 0.3, random_state = 42)","cc120e0c":"lr = LogisticRegression()\nlr.fit(x_train, y_train)","526ab871":"y_pred_lr = lr.predict(x_test)\nscore = lr.score(x_test, y_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(score))","ebd5d015":"confusion_matrix = confusion_matrix(y_test, y_pred_lr)\nprint(confusion_matrix)","f7b71a3f":"dt = DecisionTreeClassifier()\ndt.fit(x_train, y_train)","0ee8c545":"y_pred_dt = dt.predict(x_test)\nscore = metrics.accuracy_score(y_test,y_pred_dt)\nprint('Accuracy of Decision Tree on test set: {:.2f}'.format(score))","e84f0c43":"from sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test, y_pred_dt)\nprint(confusion_matrix)","67924264":"rf = RandomForestClassifier()\nrf.fit(x_train, y_train)","88dc1afb":"y_pred_rf = rf.predict(x_test)\nscore = metrics.accuracy_score(y_test,y_pred_rf)\nprint('Accuracy of Random Forest Classifier on test set: {:.2f}'.format(score))","9326fa0f":"from sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test, y_pred_rf)\nprint(confusion_matrix)","609a401e":"print(classification_report(y_test, y_pred_rf))","1b80511a":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nlogit_roc_auc = roc_auc_score(y_test, lr.predict(x_test))\ntree_roc_auc = roc_auc_score(y_test, dt.predict(x_test))\nRF_roc_auc = roc_auc_score(y_test, rf.predict(x_test))\n\nfpr, tpr, thresholds = roc_curve(y_test, lr.predict_proba(x_test)[:,1])\nfpr, tpr, thresholds = roc_curve(y_test, dt.predict_proba(x_test)[:,1])\nfpr, tpr, thresholds = roc_curve(y_test, rf.predict_proba(x_test)[:,1])\n\nplt.figure()\n\nplt.plot(fpr, tpr, label = 'Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot(fpr, tpr, label = 'Decision Tree (area = %0.2f)' % tree_roc_auc)\nplt.plot(fpr, tpr, label = 'Random Foreest Regression (area = %0.2f)' % RF_roc_auc)\n\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","1c532e00":"y_pred_prob_lr = lr.predict_proba(x_var)[:, 1]\ndf['y_pred_P_lr'] = pd.DataFrame(y_pred_prob_lr)\ndf['P_Rank_lr'] = pd.qcut(df['y_pred_P_lr'].rank(method='first').values,10,duplicates='drop').codes+1\ndf.groupby('P_Rank_lr')['y_pred_P_lr'].sum()","60021e3d":"y_pred_prob_dt = dt.predict_proba(x_var)[:, 1]\ndf['y_pred_P_dt'] = pd.DataFrame(y_pred_prob_dt)\ndf['P_Rank_dt'] = pd.qcut(df['y_pred_P_dt'].rank(method='first').values,10,duplicates='drop').codes+1\ndf.groupby('P_Rank_dt')['target'].sum()","178d5eee":"y_pred_prob_dt = dt.predict_proba(x_var)[:, 1]\ndf['y_pred_P_dt'] = pd.DataFrame(y_pred_prob_dt)\ndf['P_Rank_dt'] = pd.qcut(df['y_pred_P_dt'].rank(method='first').values,10,duplicates='drop').codes+1\ndf.groupby('P_Rank_dt')['target'].sum()","d042110e":"y_pred_prob_rf = rf.predict_proba(x_var)[:, 1]\ndf['y_pred_P_rf'] = pd.DataFrame(y_pred_prob_rf)\ndf['P_Rank_rf']=pd.qcut(df['y_pred_P_rf'].rank(method='first').values,10,duplicates='drop').codes+1\ndf.groupby('P_Rank_rf')['target'].sum()","c79fcd3a":"df.head()\ndf.to_csv('hotel_demand_prediction_scored_file.csv')","31ebf66f":"## ROC Curve","5b7e398a":"## Load the data","d951046f":"### Continuous Data","bfc26ba0":"### Import Libraries","fcfa8bac":"## One-Hot Encoding","62acbacc":"## Random Forest","12ccc105":"## Splitting the data","c57d343c":"## DecisionTree","701aafc1":"## Export","303035f1":"### Categorical Data","8b84356b":"## Data Handling","31eb7202":"## Logistic Regression","27291235":"## Data Visualization","c0e3e377":"## Predictions"}}