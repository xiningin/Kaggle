{"cell_type":{"a26cd6b6":"code","f865d756":"code","d094f2fc":"code","8adb82ef":"code","194c46f9":"code","3185ea24":"code","4f64219f":"code","05b33196":"code","d9562786":"code","c14dd6d5":"code","f980da33":"code","73da5e2a":"code","9223080f":"code","62e7f6ee":"code","79c9150d":"code","d065ae00":"code","fc3bbb0b":"code","88d18608":"code","2a241802":"code","2dabf70d":"code","794921ec":"code","e8d982f9":"code","57aa14bf":"code","c645facc":"code","d4eac3d2":"code","3231acb9":"code","6daf75e2":"code","d640362b":"code","41724ba3":"code","672d72c8":"code","886a970b":"code","3294bf1b":"code","4a9ebde9":"code","d2786575":"code","4bcbb138":"code","a4e019b5":"code","bb04d0e7":"code","ca4034b3":"code","55599478":"code","c070c212":"code","06758ff7":"code","cbf0ba48":"code","48651641":"code","54dbbee9":"code","8678e049":"code","b9db0a77":"code","4db5d2bc":"code","4a1eb623":"code","35431d2e":"code","23d8d04e":"markdown","6d955413":"markdown","c9cddfa6":"markdown","3da04449":"markdown","d0069d5d":"markdown","5936ea69":"markdown","2ca987b3":"markdown","743498fe":"markdown","c8ebad90":"markdown","f653bd47":"markdown","5c97503d":"markdown","8f9942ef":"markdown","eb648b77":"markdown","ab5404ab":"markdown","4301d8a9":"markdown","fda5e7ff":"markdown"},"source":{"a26cd6b6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import GridSearchCV \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier, GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import AdaBoostClassifier\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f865d756":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","d094f2fc":"train.head()","8adb82ef":"test.head()","194c46f9":"train.describe()","3185ea24":"train.notnull()","4f64219f":"train.dtypes","05b33196":"train.isna().sum()","d9562786":"train['Cabin'].unique()","c14dd6d5":"train['Cabin'] = train['Cabin'].apply(lambda i: i[0] if pd.notnull(i) else 'N')\ntest['Cabin'] = test['Cabin'].apply(lambda i: i[0] if pd.notnull(i) else 'N')","f980da33":"train['Cabin'].unique()","73da5e2a":"train[train['Cabin'] == 'T'].index.values","9223080f":"train['Cabin'].iloc[339]","62e7f6ee":"train.iloc[339]","79c9150d":"index = train[train['Cabin'] == 'T'].index","d065ae00":"train.loc[index, 'Cabin'] = 'A'","fc3bbb0b":"train.iloc[339]","88d18608":"plt.style.use('seaborn-whitegrid')\nfig, arr = plt.subplots(2,3, figsize=(20,10))\nsns.countplot(x = train['Cabin'],ax=arr[0][0])\nsns.countplot(x = train['Survived'],ax=arr[0][1])\nsns.countplot(x=train['Pclass'],ax=arr[0][2])\n\nsns.countplot(x = train['Parch'],ax=arr[1][0])\nsns.countplot(x = train['Embarked'],ax=arr[1][1])\nsns.countplot(x=train['SibSp'],ax=arr[1][2])","2a241802":"fig, arr = plt.subplots(1, 2, figsize=(30,10),sharey=False)\nsns.countplot(x =train['Age'],ax=arr[0])\nsns.countplot(x =train['Fare'],ax=arr[1])","2dabf70d":"train[['Sex','Survived']].groupby(['Sex']).mean()","794921ec":"train[['Pclass','Survived']].groupby(['Pclass']).mean()","e8d982f9":"train[['Embarked','Survived']].groupby('Embarked').mean()","57aa14bf":"train[['Parch','Survived']].groupby('Parch').mean()","c645facc":"figure, ar = plt.subplots(2,2, figsize=(30,10),sharey=False)\nsns.pointplot(x='SibSp',y='Survived',data=train, ax=ar[0][0])\nsns.pointplot(x='Embarked',y='Survived',data=train,ax=ar[0][1])\nsns.pointplot(x='Pclass',y='Survived', data= train,ax=ar[1][0])\nsns.pointplot(x='Parch',y='Survived', data= train,ax=ar[1][1])","d4eac3d2":"train.isnull().sum()","3231acb9":"fig, ax = plt.subplots(1,2, figsize=(30,10))\nsns.boxplot(x = 'Parch', y = 'Age', data=train,ax=ax[0])\nsns.boxplot(x = 'SibSp', y = 'Age', data=train,ax=ax[1])","6daf75e2":"train['Sex'] = [1 if i == 'male' else 0 for i in train['Sex']]\ntest['Sex'] = [1 if i == 'male' else 0 for i in test['Sex']]","d640362b":"train.head()","41724ba3":"sns.heatmap(train[['Age', 'Sex', 'SibSp', 'Parch', 'Pclass','Fare','Cabin']].corr(), annot=True)","672d72c8":"def handel_non_numeric_data(train):\n    columns = np.array(['Cabin'])\n    \n    for column in columns:\n        text_digit_vals = {}\n        def convert_to_int(val):\n            return text_digit_vals[val]\n        \n        if train[column].dtype != np.int64 and train[column].dtype != np.float64:\n            column_contents = train[column].values.tolist()\n            unique_elements = set(column_contents)\n            x = 0\n            for unique in unique_elements:\n                if unique not in text_digit_vals:\n                    text_digit_vals[unique] = x\n                    x+=1\n            train[column] = list(map(convert_to_int, train[column]))\n    return train","886a970b":"train = handel_non_numeric_data(train)\ntest = handel_non_numeric_data(test)","3294bf1b":"train.head()","4a9ebde9":"test.head()","d2786575":"train.drop(['Name','PassengerId','Ticket','Embarked'],axis=1,inplace=True)\ntest.drop(['Name','PassengerId','Ticket','Embarked'],axis=1,inplace=True)","4bcbb138":"test.head()","a4e019b5":"train.head()","bb04d0e7":"test['Fare'] = test['Fare'].fillna(0)\ntest['Fare'][152]\ntest.isnull().sum()\ntest.dtypes\ntest.head()","ca4034b3":"Features = ['Pclass','Sex','SibSp','Parch','Fare','Cabin']","55599478":"X_train = pd.get_dummies(train[Features])\ny_train = train['Survived']\n\nX_test = pd.get_dummies(test[Features])","c070c212":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\nlogreg.score(X_train,y_train)","06758ff7":"support = SVC(kernel='poly')\nsupport.fit(X_train,y_train)\nsupport.score(X_train,y_train)","cbf0ba48":"neigh = KNeighborsClassifier()\nneigh.fit(X_train,y_train)\nneigh.score(X_train, y_train)","48651641":"model = RandomForestClassifier(n_estimators=100, max_depth=7, random_state=7)\nmodel.fit(X_train, y_train)\nmodel.score(X_train,y_train)","54dbbee9":"dtc = DecisionTreeClassifier(criterion='entropy')\ndtc.fit(X_train,y_train)\ndtc.score(X_train,y_train)","8678e049":"gbc = GradientBoostingClassifier(loss='exponential')\ngbc.fit(X_train,y_train)\ngbc.score(X_train,y_train)","b9db0a77":"predictions = dtc.predict(X_test)","4db5d2bc":"predictions","4a1eb623":"predictions = predictions.astype(np.int16)","35431d2e":"# submission = pd.read_csv('gender_submission.csv')\n# submission['Survived'] = predictions\n# submission.to_csv('submission.csv', index=False)","23d8d04e":"### Droping Unused Columns","6d955413":"#### Logistic Regression\n","c9cddfa6":"### Reading Data","3da04449":"### Converting Non-Numeric Data Into Numeric","d0069d5d":"#### Random Forest Classifier","5936ea69":"### Checking Survival Rate","2ca987b3":"### Training Machine learning Models","743498fe":"#### Decision Tree Classifier","c8ebad90":"### Predicting Stuff","f653bd47":"### Getting Unique Values For Further Analysis","5c97503d":"#### Support Vector Machine","8f9942ef":"#### K Neighbors Classification","eb648b77":"#### Gradient Boosting Classifier","ab5404ab":"### Plotting Graphs","4301d8a9":"### Importing Modules","fda5e7ff":"### More Plotting"}}