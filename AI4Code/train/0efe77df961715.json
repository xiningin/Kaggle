{"cell_type":{"3852f2fb":"code","841e5f03":"code","49208e28":"code","e0496e7c":"code","fb92e63d":"code","3a52c6bd":"code","72388333":"code","1755013e":"code","b251f60d":"code","255fff32":"code","71839642":"code","511511e6":"code","7baae7f7":"code","1f2f9d02":"code","107dee9b":"code","0f38a3ec":"code","2d7436cd":"code","8d91170f":"code","46377763":"code","b9b9a7c2":"code","fc28465f":"code","48386b75":"code","5a2006bc":"code","7500c0d6":"code","ae0f19b1":"code","e4e6fb49":"code","7a0d7077":"code","89d1b76f":"code","f1e4d0f3":"code","6836084b":"code","74f94fa6":"code","979e5b85":"code","6771228d":"code","f33bfa97":"code","77fd5a69":"code","6270ffb4":"code","af9b6296":"code","432f171c":"code","6df6a054":"code","9aa0c414":"code","3dfe4798":"code","ec839be9":"code","363a2da1":"markdown","21bbc337":"markdown","e4850098":"markdown","42c0aa64":"markdown","afcc32a0":"markdown","706d2c61":"markdown","f68ff2fb":"markdown","54352e4c":"markdown","6dcfe4b5":"markdown","da75fbb4":"markdown","8a73d560":"markdown","8c52b569":"markdown","dc78ad63":"markdown","39d65e0e":"markdown","79c164cf":"markdown","c10ad988":"markdown","52ad857c":"markdown","8f1e6ce8":"markdown","dfc657b2":"markdown","a586ef99":"markdown","f99d7db9":"markdown","32bc2617":"markdown","995091dc":"markdown","046ed956":"markdown","9a7f4784":"markdown","5db85924":"markdown","08bae02c":"markdown","e7424393":"markdown","6484c176":"markdown","c2c4f94e":"markdown","de5bd446":"markdown","d52db9d3":"markdown","848a3205":"markdown","8d96452a":"markdown","85f0d091":"markdown","385b8052":"markdown","95b04b35":"markdown","cabb937d":"markdown","79952471":"markdown","a4d3e1ce":"markdown","204d9cbd":"markdown"},"source":{"3852f2fb":"pip install xgboost","841e5f03":"pip install lightgbm","49208e28":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport datetime\nfrom itertools import groupby\nfrom matplotlib.gridspec import GridSpec\n\nfrom scipy import stats\nfrom sklearn.metrics import f1_score,confusion_matrix,classification_report\nfrom sklearn.feature_selection import f_classif\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import tree\n\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.linear_model import LogisticRegression,SGDClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.neural_network import MLPClassifier\n\nimport warnings\nwarnings.filterwarnings('ignore')","e0496e7c":"data= pd.read_csv(\"..\/input\/digital-marketing-ecommerce-customer-behavior\/data1.csv\",sep= \";\",decimal=\",\")\n\ndata.columns = data.columns.str.replace(\" \",\"_\")\ntr_eng = str.maketrans(\"\u00e7\u011f\u0131\u00f6\u015f\u00fc\", \"cgiosu\")\ndata.columns = data.columns.str.lower().str.translate(tr_eng)","fb92e63d":"for i in data.select_dtypes(include = ['object']).columns.values:\n    data[i] = data[i].replace([\"yes\",\"no\"],[1,0])\n\ncategorical_columns = [\"location_code\",\"push_status\",\"credit_card_info_save\"]\nout_of_analyze = [\"user_id\",\"churn\"]\nnumeric_columns = ['account_length', 'add_to_wishlist', 'desktop_sessions','app_sessions', 'desktop_transactions',\n                   'total_product_detail_views','session_duration', 'promotion_clicks', 'avg_order_value','sale_product_views',\n                   'discount_rate_per_visited_products','product_detail_view_per_app_session', 'app_transactions',\n                   'add_to_cart_per_session', 'customer_service_calls']","3a52c6bd":"data.head()","72388333":"data.shape","1755013e":"data.user_id.nunique()","b251f60d":"data.churn.value_counts()","255fff32":"data.location_code.value_counts()","71839642":"data.info()","511511e6":"plt.figure(figsize=(12,6))\nsns.heatmap(data.isnull(), yticklabels=False,cbar=True,cmap='viridis');","7baae7f7":"outliers = []\nfor i in numeric_columns:\n    outliers.extend(data[(data[i] < data[i].mean() - 3*data[i].std()) | (data[i] > data[i].mean() + 3*data[i].std())].index)","1f2f9d02":"data.drop(set(outliers),inplace = True)\ndata.churn.value_counts()","107dee9b":"data.churn.value_counts().sum()","0f38a3ec":"round(data.describe(),2)","2d7436cd":"fig, axes = plt.subplots(5,3, figsize=(24,24))\nfig.suptitle(\"De\u011fi\u015fkenlerin Da\u011f\u0131l\u0131m\u0131\", size=48)\n\nfor i in range(5):\n    for j in range(3):\n        sns.histplot(data[numeric_columns[3*i+j]], ax=axes[i,j], kde=True)","8d91170f":"fig, ax = plt.subplots(1,2,figsize= (12,6))\nplt.pie(data.churn.value_counts(),labels = [\"Not Churn\",\"Churn\"],colors = [\"lightgreen\",\"lightcoral\"],autopct='%.0f%%',textprops={'fontsize': 14})\ncp = sns.countplot('churn',data=data,ax=ax[0],palette=\"pastel\")\ncp.set_xlabel(\"Churn\",fontsize=14)\ncp.set_ylabel(\"Kullan\u0131c\u0131 Say\u0131s\u0131\",fontsize=14)\nplt.show()","46377763":"fig, ax = plt.subplots(1,len(categorical_columns),figsize= (15,6))\nfor i,a in zip(categorical_columns,ax):\n    temp = data[i].value_counts()\n    a.set_title(\"Churn Counts Of \" + str(i))\n    sns.barplot(ax = a, x=temp.index, y=temp.values) \nplt.show()","b9b9a7c2":"plt.figure(1, figsize=(20,30))\nthe_grid = GridSpec(3, 3)\n\nplt.subplot(the_grid[0, 0], aspect=1, title='location code = 415')\nsource_pie = plt.pie(data[data[categorical_columns[0]] == data[categorical_columns[0]].unique()[0]].churn.value_counts(),colors = [\"lightgreen\",\"lightcoral\"],autopct='%.1f%%',textprops={'fontsize': 14})\n\nplt.subplot(the_grid[0, 1], aspect=1, title='location code = 408')\nsource_pie = plt.pie(data[data[categorical_columns[0]] == data[categorical_columns[0]].unique()[1]].churn.value_counts(),colors = [\"lightgreen\",\"lightcoral\"],autopct='%.1f%%',textprops={'fontsize': 14})\n\nplt.subplot(the_grid[0, 2], aspect=1, title='location code = 510')\nsource_pie = plt.pie(data[data[categorical_columns[0]] == data[categorical_columns[0]].unique()[2]].churn.value_counts(),colors = [\"lightgreen\",\"lightcoral\"],autopct='%.1f%%',textprops={'fontsize': 14})\n\nplt.subplot(the_grid[1, 0], aspect=1, title='push status = 0')\nsource_pie = plt.pie(data[data[categorical_columns[1]] == 0].churn.value_counts(),colors = [\"lightgreen\",\"lightcoral\"],autopct='%.1f%%',textprops={'fontsize': 14})\n\nplt.subplot(the_grid[1, 1], aspect=1, title='push status = 1')\nsource_pie = plt.pie(data[data[categorical_columns[1]] == 1].churn.value_counts(),colors = [\"lightgreen\",\"lightcoral\"],autopct='%.1f%%',textprops={'fontsize': 14})\n\nplt.subplot(the_grid[2, 0], aspect=1, title='credit card info save = 0')\nsource_pie = plt.pie(data[data[categorical_columns[2]] == 0].churn.value_counts(),colors = [\"lightgreen\",\"lightcoral\"],autopct='%.1f%%',textprops={'fontsize': 14})\n\nplt.subplot(the_grid[2, 1], aspect=1, title='credit card info save = 1')\nsource_pie = plt.pie(data[data[categorical_columns[2]] == 1].churn.value_counts(),colors = [\"lightgreen\",\"lightcoral\"],autopct='%.1f%%',textprops={'fontsize': 14})\n\n\nplt.show()","fc28465f":"data.groupby(\"credit_card_info_save\").mean().round(2)","48386b75":"data.groupby(\"location_code\").mean().round(2)","5a2006bc":"data.groupby(\"push_status\").mean().round(2)","7500c0d6":"fig, axes = plt.subplots(5,3, figsize=(24,24))\nfig.suptitle(\"De\u011fi\u015fkenlerin Credit_card_info_save Kolonuna G\u00f6re Sa\u00e7\u0131l\u0131m\u0131\", size=48)\nfor i in range(5):\n    for j in range(3):\n        sns.boxplot(x=data['credit_card_info_save'], y=data[numeric_columns[3*i+j]], ax=axes[i,j])","ae0f19b1":"one_hot = pd.get_dummies(data['location_code'], drop_first = True, prefix = \"_\")\ndel data[\"location_code\"]\ndata = data.join(one_hot)","e4e6fb49":"Logit = LogisticRegression(solver='liblinear',random_state = 8)\nSdgc = SGDClassifier(random_state = 8)\nKnn = KNeighborsClassifier()\nDtree = DecisionTreeClassifier(random_state = 8)\nRndfr = RandomForestClassifier(random_state = 8)\nMlp = MLPClassifier(random_state = 8)\nXgb = XGBClassifier(random_state = 8,eval_metric='mlogloss')\nlgbm = LGBMClassifier(random_state = 8)\n\nAlgorithms =[Logit,Knn,Dtree,Rndfr,Xgb,lgbm,Mlp,Sdgc]","7a0d7077":"X = data.drop(out_of_analyze, axis=1)\ny = data[\"churn\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 8)","89d1b76f":"l = []\n\nfor i in Algorithms:\n    res = i.fit(X_train,y_train)\n    l.append([str(i).split(\"(\")[0],confusion_matrix(y_test,res.predict(X_test)),f1_score(y_test,res.predict(X_test)),round(accuracy_score(y_test, res.predict(X_test)), 3)])\n    print(str(i).split(\"(\")[0],\" - \",\" \u2713\")\n    \na1 = []\nfor i in l:\n    a1.append([i[0],\n              i[1][1][1]\/(i[1][1][1]+i[1][1][0]),\n              i[1][0][0]\/(i[1][0][1]+i[1][0][0]),\n              i[1][1][1]\/(i[1][0][1]+i[1][1][1]),\n              i[1][0][0]\/(i[1][0][0]+i[1][1][0]),   \n              i[1][0][1]+i[1][1][1],\n              y_test.sum(),\n              i[2],\n              i[3]\n              ]\n             )\n    \nresults_raw = pd.DataFrame(a1,columns = [\"model\",\"recall1\",\"recall0\",\"precision1\",\"precision0\",\"precision_sample\",\"real_churn_count\",\"f1score\",\"accuracyscore\"]).fillna(0)\nresults_raw = results_raw.sort_values(\"f1score\",ascending = False)\nresults_raw","f1e4d0f3":"results = results_raw[results_raw.model == \"RandomForestClassifier\"]\nresults.model = \"Random Forest Classifier Raw Model[1]\"","6836084b":"fig, ax = plt.subplots(8,2, figsize=(16,32))\n\nfor i in range(8):\n    for j in range(2):\n        sns.kdeplot(data[numeric_columns[2*i+j]][data['churn'] == 0], ax=ax[i,j], shade=True, color=\"b\")\n        sns.kdeplot(data[numeric_columns[2*i+j]][data['churn'] == 1], ax=ax[i,j], shade=True, color=\"r\")\n        if 2*i+j >13:\n            break","74f94fa6":"out_of_analyze.extend([\"account_length\",\"promotion_clicks\",\"sale_product_views\",\"avg_order_value\"])","979e5b85":"lnorm = []\nfor col in data.columns.drop(out_of_analyze):\n    lnorm.append([col,\n                  stats.kstest(data[col], 'norm').pvalue, \n                  stats.kstest(data[col][data.churn == 0], data[col][data.churn == 1]).pvalue,\n                  stats.levene(data[col][data.churn == 0],data[col][data.churn == 1]).pvalue,\n                  stats.f_oneway(data[col][data.churn == 0], data[col][data.churn == 1]).pvalue\n                  ])\npvalues = pd.DataFrame(lnorm,columns=[\"Column\",\"Normallik Testi\",\"Kolmogorov-Smirnov Testi\",\"Levene Testi\",\"Anova\"])\nround(pvalues,4)","6771228d":"mtr = round(data.corr(),2)\nmask = np.zeros_like(mtr)\nmask[np.triu_indices_from(mask)] = True\nfig, ax = plt.subplots(figsize=(15,12))\nplt.suptitle(\"Correlation Matrix of Columns in Heatmap\", size=24)\nsns.heatmap(mtr, mask= mask, annot=True, annot_kws={\"size\": 10});","f33bfa97":"X = data.drop(out_of_analyze,axis = 1)\ny = data.churn\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=8)\n\nrndforest = RandomForestClassifier(random_state=8)\nrndforest.fit(X_train, y_train)\n\ny_pred = rndforest.predict(X_test)\n\nprint(classification_report(y_pred, y_test))\nprint(confusion_matrix(y_pred, y_test))\n\nfig, ax = plt.subplots(figsize=(8,8))\nsns.barplot(rndforest.feature_importances_,X.columns)\nplt.show()","77fd5a69":"out_of_analyze.extend([\"desktop_transactions\",\"add_to_cart_per_session\",\"app_sessions\",\"push_status\",\"__415\",\"__510\"])","6270ffb4":"X = data.drop(out_of_analyze,axis = 1)\ny = data.churn\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=8)\n\nl = []\nrndforest = RandomForestClassifier(random_state=8)\nrndforest.fit(X_train, y_train)\n\nres = rndforest.fit(X_train,y_train)\nl.append([\"Random Forest Classifier with F.Selection [2]\",confusion_matrix(y_test,res.predict(X_test)),f1_score(y_test,res.predict(X_test)),round(accuracy_score(y_test, res.predict(X_test)), 3)])\n    \na1 = []\nfor i in l:\n    a1.append([i[0],\n              i[1][1][1]\/(i[1][1][1]+i[1][1][0]),\n              i[1][0][0]\/(i[1][0][1]+i[1][0][0]),\n              i[1][1][1]\/(i[1][0][1]+i[1][1][1]),\n              i[1][0][0]\/(i[1][0][0]+i[1][1][0]),   \n              i[1][0][1]+i[1][1][1],\n              y_test.sum(),\n              i[2],\n              i[3]\n              ]\n             )\n    \nresults_feature_sel = pd.DataFrame(a1,columns = [\"model\",\"recall1\",\"recall0\",\"precision1\",\"precision0\",\"precision_sample\",\"real_churn_count\",\"f1score\",\"accuracyscore\"]).fillna(0)\nresults_feature_sel = results_feature_sel.sort_values(\"f1score\",ascending = False)\nresults = results.append(results_feature_sel)\nresults","af9b6296":"Rndfr_params = {'n_estimators':[5,50,100,200],\n                'criterion': ['gini','entropy'],\n                'bootstrap': [\"True\", \"False\"],\n                'max_depth': list(range(1,10)),\n                'max_features': [3,'auto']} # S\u0131n\u0131fland\u0131rmada de\u011fi\u015fken say\u0131s\u0131n\u0131n karek\u00f6k\u00fcn\u00fcn bilimsel anlamda iyi \u00e7al\u0131\u015ft\u0131\u011f\u0131 kan\u0131tlanm\u0131\u015ft\u0131r.\n\nclf = GridSearchCV(rndforest, Rndfr_params,scoring = \"f1\")\nclf.fit(X, y)","432f171c":"clf.best_params_","6df6a054":"rndforest = RandomForestClassifier(bootstrap= 'True',criterion= 'entropy', max_features= 3, n_estimators= 205, random_state = 8)\n\nl = []\nres = rndforest.fit(X_train,y_train)\nl.append([\"Random Forest Classifier with H.Optimization [3]\",confusion_matrix(y_test,res.predict(X_test)),f1_score(y_test,res.predict(X_test)),round(accuracy_score(y_test, res.predict(X_test)), 3)])\n    \na1 = []\nfor i in l:\n    a1.append([i[0],\n              i[1][1][1]\/(i[1][1][1]+i[1][1][0]),\n              i[1][0][0]\/(i[1][0][1]+i[1][0][0]),\n              i[1][1][1]\/(i[1][0][1]+i[1][1][1]),\n              i[1][0][0]\/(i[1][0][0]+i[1][1][0]),   \n              i[1][0][1]+i[1][1][1],\n              y_test.sum(),\n              i[2],\n              i[3]\n              ]\n             )\n    \nresults_feature_opt = pd.DataFrame(a1,columns = [\"model\",\"recall1\",\"recall0\",\"precision1\",\"precision0\",\"precision_sample\",\"real_churn_count\",\"f1score\",\"accuracyscore\"]).fillna(0)\nresults_feature_opt = results_feature_opt.sort_values(\"f1score\",ascending = False)\nresults = results.append(results_feature_opt)\nresults","9aa0c414":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=8)\n\nl = []\nres = rndforest.fit(X_train,y_train)\nl.append([\"Random Forest Classifier %40 Test Size [4]\",confusion_matrix(y_test,res.predict(X_test)),f1_score(y_test,res.predict(X_test)),round(accuracy_score(y_test, res.predict(X_test)), 3)])\n    \na1 = []\nfor i in l:\n    a1.append([i[0],\n              i[1][1][1]\/(i[1][1][1]+i[1][1][0]),\n              i[1][0][0]\/(i[1][0][1]+i[1][0][0]),\n              i[1][1][1]\/(i[1][0][1]+i[1][1][1]),\n              i[1][0][0]\/(i[1][0][0]+i[1][1][0]),   \n              i[1][0][1]+i[1][1][1],\n              y_test.sum(),\n              i[2],\n              i[3]\n              ]\n             )\n    \nresults_feature_40 = pd.DataFrame(a1,columns = [\"model\",\"recall1\",\"recall0\",\"precision1\",\"precision0\",\"precision_sample\",\"real_churn_count\",\"f1score\",\"accuracyscore\"]).fillna(0)\nresults_feature_40 = results_feature_40.sort_values(\"f1score\",ascending = False)\nresults = results.append(results_feature_40)\nresults","3dfe4798":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=8)\n\nl = []\nres = rndforest.fit(X_train,y_train)\nl.append([\"Random Forest Classifier %20 Test Size [5]\",confusion_matrix(y_test,res.predict(X_test)),f1_score(y_test,res.predict(X_test)),round(accuracy_score(y_test, res.predict(X_test)), 3)])\n    \na1 = []\nfor i in l:\n    a1.append([i[0],\n              i[1][1][1]\/(i[1][1][1]+i[1][1][0]),\n              i[1][0][0]\/(i[1][0][1]+i[1][0][0]),\n              i[1][1][1]\/(i[1][0][1]+i[1][1][1]),\n              i[1][0][0]\/(i[1][0][0]+i[1][1][0]),   \n              i[1][0][1]+i[1][1][1],\n              y_test.sum(),\n              i[2],\n              i[3]\n              ]\n             )\n    \nresults_feature_20 = pd.DataFrame(a1,columns = [\"model\",\"recall1\",\"recall0\",\"precision1\",\"precision0\",\"precision_sample\",\"real_churn_count\",\"f1score\",\"accuracyscore\"]).fillna(0)\nresults_feature_20 = results_feature_20.sort_values(\"f1score\",ascending = False)\nresults = results.append(results_feature_20)\nresults","ec839be9":"fig, axes = plt.subplots(nrows = 1,ncols = 1,figsize = (10,2))\n\ntree.plot_tree(rndforest.estimators_[1],feature_names = X.columns, class_names='churn',filled = True, ax=axes);\naxes.set_title('Estimator: 1 ' , fontsize = 11);","363a2da1":"#### Korelasyon Matrisi","21bbc337":"### Tip Kontrol\u00fc","e4850098":"<font color='blue'>**T\u00fcm s\u00fctunlar do\u011fru veri tipine sahiptir.**","42c0aa64":"#### Churne G\u00f6re Da\u011f\u0131l\u0131m Farkl\u0131l\u0131klar\u0131","afcc32a0":"<font color='blue'>**\u015eimdi farkl\u0131 algoritmalar\u0131n performanslar\u0131n\u0131 ham model kurarak de\u011ferlendirece\u011fim.**","706d2c61":"<font color='blue'>**Say\u0131sal de\u011fi\u015fkenlerimizin churn durumlar\u0131na g\u00f6re olas\u0131l\u0131k yo\u011funluk da\u011f\u0131l\u0131mlar\u0131na bakt\u0131\u011f\u0131m\u0131zda cutomer_service_calls, desktop_sessions ve app_sessions s\u00fctunlar\u0131nda anlaml\u0131 farkl\u0131l\u0131klar vard\u0131r. Di\u011fer s\u00fctunlarda ise birbirine yak\u0131n da\u011f\u0131l\u0131mlar g\u00f6zlemliyorum.**\n\n<font color='blue'>**A\u015f\u0131r\u0131 derecede yak\u0131nla\u015fan s\u00fctunlar, location_code, account_length, promotion_clicks, sale_product_views ve avg_order_value dur. Bu s\u00fctunlar\u0131 modellemeden hari\u00e7 tutmak rasyonel olacakt\u0131r.**","f68ff2fb":"<font color='blue'>**Kategorik de\u011fi\u015fkenler aras\u0131nda Push Status ve Credit Card Save zaten dummy oldu\u011fu i\u00e7in sadece Location_code'u dummy haline getirip birini silerek dummy de\u011fi\u015fken tuza\u011f\u0131ndan ka\u00e7\u0131naca\u011f\u0131z.**","54352e4c":"### Feature Selection & Hiperparametre Optimizasyonu Sonras\u0131 Model [3]","6dcfe4b5":"--------------------------------------------","da75fbb4":"<font color='blue'>**Outlierlar\u0131 sildikten sonra 3168 m\u00fc\u015fteri kald\u0131. Bunlar\u0131n 442 si churn olanlar iken 2726 si churn olmayan m\u00fc\u015fterilerdir.**","8a73d560":"<font color='blue'>**Toplam 3333 unique m\u00fc\u015fteri bulunmaktad\u0131r. Bunlar\u0131n 483 \u00fc churn, 2850 si churn olmayan kullan\u0131c\u0131lard\u0131r.**","8c52b569":"### Model Se\u00e7imi [1]","dc78ad63":"### K\u00fct\u00fcphaneler","39d65e0e":"### Test Size Kar\u015f\u0131la\u015ft\u0131rmas\u0131","79c164cf":"### Ba\u011f\u0131ml\u0131 De\u011fi\u015fken Da\u011f\u0131l\u0131m\u0131","c10ad988":"<font color='blue'>**Hem accuracy hem de f1 score anlam\u0131nda en performansl\u0131 algoritman\u0131n XGBoost oldu\u011funu g\u00f6rmekteyiz. Bununla beraber karar a\u011fac\u0131 tabanl\u0131 modellerin performanslar\u0131n\u0131n \u00fcst\u00fcnl\u00fc\u011f\u00fc dikkat \u00e7ekmektedir. Casede random forest denildi\u011fi i\u00e7in performans\u0131 XGBoost'a yak\u0131n olan random forest algoritmas\u0131 ile ilerleyece\u011fiz. \u015eimdi modelin performans\u0131n\u0131 iyile\u015ftirme hipotezi ile feature selection i\u015flemi uygulayaca\u011f\u0131z.**","52ad857c":"<font color='blue'>**Bu veri seti, bir \u015firketin m\u00fc\u015fterilerinin hizmet kullan\u0131m al\u0131\u015fkanl\u0131klar\u0131na ili\u015fkin verileri ve ilgili m\u00fc\u015fterinin \u015firketten ayr\u0131l\u0131p ayr\u0131lmad\u0131\u011f\u0131n\u0131 g\u00f6steren etiketleri i\u00e7erir. S\u00fctunlar\u0131n tan\u0131m\u0131 a\u015fa\u011f\u0131daki gibidir:**<\/font>\n\n<font color='red'>**Account length:**<\/font> Kullan\u0131c\u0131n\u0131n ka\u00e7 g\u00fcnd\u00fcr siteye \u00fcye oldu\u011fu bilgisi.\n\n<font color='red'>**Location code:**<\/font> Kullan\u0131c\u0131n\u0131n lokasyon kodu\n\n<font color='red'>**User id:**<\/font> Kullan\u0131c\u0131ya atanan benzersiz kimlik\n\n<font color='red'>**Credit card info save:**<\/font> Kullan\u0131c\u0131n\u0131n kredi kart\u0131n\u0131 sisteme kaydedip kaydetmedi\u011fi bilgisi \n\n<font color='red'>**Push status:**<\/font> Kullan\u0131c\u0131n\u0131n bildirimlere izin verip vermedi\u011fi bilgisi\n\n<font color='red'>**Add to wishlist:**<\/font> Kullan\u0131c\u0131n\u0131n istek listesine ekleme say\u0131s\u0131\n\n<font color='red'>**Desktop sessions:**<\/font> Kullan\u0131c\u0131n\u0131n masa\u00fcst\u00fc oturumlar\u0131n\u0131n say\u0131s\u0131\n\n<font color='red'>**App sessions:**<\/font> Kullan\u0131c\u0131n\u0131n app oturumlar\u0131n\u0131n say\u0131s\u0131\n\n<font color='red'>**Desktop transactions:**<\/font> Kullan\u0131c\u0131n\u0131n masa\u00fcst\u00fcnden yapt\u0131\u011f\u0131 al\u0131\u015fveri\u015f say\u0131s\u0131\n\n<font color='red'>**Total product detail reviews:**<\/font> Kullan\u0131c\u0131n\u0131n \u00fcr\u00fcn detay g\u00f6r\u00fcnt\u00fcleme say\u0131s\u0131\n\n<font color='red'>**Session duration:**<\/font> Kullan\u0131c\u0131n\u0131n oturumlar\u0131nda ge\u00e7irdi\u011fi ortalama s\u00fcre\n\n<font color='red'>**Promotion clicks:**<\/font> Kullan\u0131c\u0131n\u0131n indirim tekliflerine t\u0131klama say\u0131s\u0131\n\n<font color='red'>**Avg order value:**<\/font> Kullan\u0131c\u0131n\u0131n ortalama sipari\u015f tutar\u0131\n\n<font color='red'>**Sale product views:**<\/font> Kullan\u0131c\u0131n\u0131n indirimli \u00fcr\u00fcn g\u00f6r\u00fcnt\u00fcleme say\u0131s\u0131\n\n<font color='red'>**Discount rate per visited products:**<\/font> Kullan\u0131c\u0131n\u0131n g\u00f6r\u00fcnt\u00fcledi\u011fi \u00fcr\u00fcnlerin ortalama indirim oran\u0131\n\n<font color='red'>**Product detail view per app session:**<\/font> Kullan\u0131c\u0131n\u0131n oturum ba\u015f\u0131na detay\u0131n\u0131 g\u00f6r\u00fcnt\u00fcledi\u011fi ortalama \u00fcr\u00fcn say\u0131s\u0131\n\n<font color='red'>**App transactions:**<\/font> Kullan\u0131c\u0131n\u0131n app \u00fczerinden yapt\u0131\u011f\u0131 al\u0131\u015fveri\u015f say\u0131s\u0131\n\n<font color='red'>**Add to cart per session:**<\/font> Kullan\u0131c\u0131n\u0131n oturum ba\u015f\u0131na sepete ekleme ortalamas\u0131\n\n<font color='red'>**Customer service calls:**<\/font> Kullan\u0131c\u0131n\u0131n m\u00fc\u015fteri hizmetlerini arama say\u0131s\u0131\n\n<font color='red'>**Churn:**<\/font> Kullan\u0131c\u0131n\u0131n churn olup olmad\u0131\u011f\u0131n\u0131n bilgisi | Hedef De\u011fi\u015fken","8f1e6ce8":"### Kategorik ve N\u00fcmerik De\u011fi\u015fken \u00d6zetleri","dfc657b2":"### Eksik Veri Kontrol\u00fc","a586ef99":"<font color='blue'>**Kategorik de\u011fi\u015fkenlerin kay\u0131p da\u011f\u0131l\u0131m\u0131na bakt\u0131\u011f\u0131m\u0131zda location_code gruplar\u0131 aras\u0131nda bir fark yok ancak push_status durumunda 2 kat, kredi_kart\u0131_bilgi_save s\u00fctununda 4 kat fark var. Dolay\u0131s\u0131yla bu iki de\u011fi\u015fkenin modelin ay\u0131rt edici g\u00fcc\u00fc \u00fczerinde \u00f6nemli olaca\u011f\u0131n\u0131 s\u00f6yleyebiliriz.**","f99d7db9":"<font color='blue'>**Grafikten g\u00f6r\u00fclebilece\u011fi \u00fczere verisetindeki hi\u00e7bir s\u00fctun eksik de\u011fer i\u00e7ermemektedir.**","32bc2617":"#### \u0130statistiki De\u011fi\u015fken S\u0131namalar\u0131","995091dc":"--------------------------------------------","046ed956":"<font color='blue'>**Kategorik de\u011fi\u015fkenlerimize bakt\u0131\u011f\u0131m\u0131zda 415 olan lokasyon kodunda yo\u011funla\u015fma varken push_status ve credit_card_info_save s\u00fctunlar\u0131nda False lehine bir yo\u011funla\u015fma var. Yani Churn olan kullan\u0131c\u0131lar\u0131n b\u00fcy\u00fck b\u00f6l\u00fcm\u00fc bildirim almayan ve kredi kart\u0131n\u0131 kaydetmeyen kullan\u0131c\u0131lardan olu\u015fmaktad\u0131r.**","9a7f4784":"### Random Forest G\u00f6rselle\u015ftirme","5db85924":"<font color='blue'>**Grid Search'e g\u00f6re en iyi parametreler a\u015fa\u011f\u0131daki gibidir. Algoritma f1 puan\u0131na odaklan\u0131r, ancak bizim odak noktam\u0131z, kayb\u0131n ne kadar\u0131n\u0131 ger\u00e7ekten do\u011fru kategorize etti\u011fimizdir.**","08bae02c":"## \u00d6znitelik Se\u00e7imi","e7424393":"<font color='blue'>**Korelasyon matrisi genellikle bize \u00f6nemli bilgiler verir. Ancak do\u011frusal ayr\u0131labilir problemlerde s\u0131n\u0131fland\u0131rma gibi ikili problemlerden daha \u00f6nemli sonu\u00e7lar verir.**\n\n<font color='blue'>**Korelasyon matrisine g\u00f6re,**\n\n**session_duration ve desktop_transactions**\n    \n**discount_rate_per_visited_products ve avg_order_value**\n    \n**add_to_card_per_session ve product_detail_view_per_app_session**\n    \n**app_sessions ve desktop_sessions**\n\n<font color='blue'>**S\u00fctun \u00e7iftleri birbiriyle tamamen ili\u015fkilidir, add_to_wishlist ve push_status s\u00fctunlar\u0131 birbirleriyle y\u00fcksek oranda ili\u015fkilidir. Sadece ilgili kolonlardan birini almam\u0131z yeterlidir. Hangilerini silece\u011fimizi belirlemek i\u00e7in feature importance'lara bakmam\u0131z gerekmektedir.**","6484c176":"### Dummy De\u011fi\u015fkenler","c2c4f94e":"<font color='blue'>**De\u011fi\u015fkenler genel olarak normal da\u011f\u0131l\u0131ma yak\u0131nsamaktad\u0131r ancak app_transactions, add_to_wishlist ve customer_service_calls de\u011fi\u015fkenlerinin sa\u011fa \u00e7arp\u0131k oldu\u011fu g\u00f6r\u00fclmektedir.**","de5bd446":"#### Feature Importance","d52db9d3":"<font color='blue'>**Yukar\u0131daki istatistiki s\u0131namalara ili\u015fkin p-value lara g\u00f6re;**\n    \n<font color='blue'>- Normallik Testi : De\u011fi\u015fkenlerin hi\u00e7biri tam olarak normal da\u011f\u0131l\u0131ma uymamaktad\u0131r. (p<0.05) Bu s\u0131nama, anovan\u0131n \u00f6n ko\u015fuludur.\n\n<font color='blue'>- Kolmogorov-Smirnov Testi : De\u011fi\u015fkenlerin \u00e7o\u011funda, churn olma ve olmama durumlar\u0131n\u0131n da\u011f\u0131l\u0131mlar\u0131nda anlaml\u0131 farklar bulunmaktad\u0131r. (p<0.05)\n\n<font color='blue'>- Levene Testi : De\u011fi\u015fkenlerin 8 tanesinin churn olma ve olmama durumlar\u0131n\u0131n varyanslar\u0131 homojendir. (p>0.05) Bu s\u0131nama, anovan\u0131n \u00f6n ko\u015fuludur.\n    \n<font color='blue'>- Anova Testi : De\u011fi\u015fkenlerin b\u00fcy\u00fck b\u00f6l\u00fcm\u00fcnde churn olma ve olmama durumlar\u0131 birbirinden anlaml\u0131 olarak farkl\u0131d\u0131r. (p<0.05)","848a3205":"<font color='blue'>**Ham modelden nihai modele kadar her ad\u0131mda modelin ba\u015far\u0131 metriklerinde iyile\u015fme g\u00f6zlemlenmektedir. Test size kar\u015f\u0131la\u015ft\u0131rmas\u0131 yapt\u0131\u011f\u0131m\u0131zda da %20 test size al\u0131nd\u0131\u011f\u0131nda model, daha geni\u015f bir train setinde datan\u0131n genel yap\u0131s\u0131n\u0131 daha efektif \u00f6\u011frenmi\u015f ve test datas\u0131nda daha isabetli tahminlerde bulunmu\u015ftur. Dolay\u0131s\u0131yla nihai modelimiz Feature Selection ve hiperparametre optimizasyonu yap\u0131lm\u0131\u015f olan %20 test sizeli modeldir.**","8d96452a":"<font color='blue'>**Feature Importancelara bakarak, tam ili\u015fkili \u00e7iftlerimiz aras\u0131ndan koyu olanlar\u0131 se\u00e7iyoruz.**\n\n**session_duration** ve desktop_transactions\n\n**discount_rate_per_visited_products** ve avg_order_value (bunu daha \u00f6nce kald\u0131rd\u0131k)\n\nadd_to_card_per_session ve **product_detail_view_per_app_session**\n\napp_sessions ve **desktop_sessions**\n\n**add_to_wishlist** ve push_status\n    \n<font color='blue'>**Buna ek olarak 415 ve 510' da zay\u0131f a\u00e7\u0131klay\u0131c\u0131l\u0131\u011fa sahip oldu\u011fu i\u00e7in kald\u0131raca\u011f\u0131z.**","85f0d091":"### Ba\u011f\u0131ms\u0131z De\u011fi\u015fkenlerin Da\u011f\u0131l\u0131m\u0131","385b8052":"### De\u011fi\u015fkenlerin Tan\u0131m\u0131 ve Veriye \u0130lk Bak\u0131\u015f","95b04b35":"### Feature Selection Sonras\u0131 Model [2]","cabb937d":"### Outlier Yakla\u015f\u0131m\u0131","79952471":"<font color='blue'>**Kullan\u0131c\u0131n\u0131n kredi kart\u0131n\u0131 kaydetmesinin di\u011fer de\u011fi\u015fkenlerin \u00e7o\u011fu \u00fczerinde anlaml\u0131 bir etkisi bulunmamakla birlikte ayk\u0131r\u0131 de\u011ferler de benzer sa\u00e7\u0131lmaktad\u0131r.**","a4d3e1ce":"### Veri Okuma & Format De\u011fi\u015fimi","204d9cbd":"<font color='blue'>**\u0130statistiki anlamda her s\u00fctun i\u00e7in s\u00fctun ortalaman\u0131s\u0131n\u0131n 3 standart sapma alt\u0131nda veya \u00fcst\u00fcnde olan de\u011ferler outlierdir. Bunlar\u0131 silece\u011fim.**"}}