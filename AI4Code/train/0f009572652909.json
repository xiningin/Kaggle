{"cell_type":{"1905eaa1":"code","d2337fd6":"code","a92a11c4":"code","4782ddb1":"code","2c86304e":"code","970d2541":"code","038c7139":"code","57f3b472":"code","b1cb31cb":"code","02e54768":"code","4468e0e5":"code","84ca2748":"code","e253a43d":"code","52c0becb":"code","d356218d":"code","106d1033":"code","29289914":"markdown","6df6a9fe":"markdown","da357789":"markdown"},"source":{"1905eaa1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d2337fd6":"import pandas as pd\nimport numpy as np\nimport os","a92a11c4":"train= pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ntest=pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\nsubmission = pd.read_csv(\"..\/input\/nlp-getting-started\/sample_submission.csv\")","4782ddb1":"print('There are {} rows and {} columns in train'.format(train.shape[0],train.shape[1]))\nprint('There are {} rows and {} columns in test'.format(test.shape[0],test.shape[1]))","2c86304e":"train.head()","970d2541":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\n\nimport bert_tokenization as tokenization","038c7139":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","57f3b472":"def build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(clf_output)\n    \n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=2e-5), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","b1cb31cb":"module_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-12_H-768_A-12\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","02e54768":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\nvocab_file","4468e0e5":"do_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","84ca2748":"train_input = bert_encode(train.text.values, tokenizer, max_len=160)\ntest_input = bert_encode(test.text.values, tokenizer, max_len=160)\ntrain_labels = train.target.values","e253a43d":"model = build_model(bert_layer, max_len=160)\nmodel.summary()","52c0becb":"checkpoint = ModelCheckpoint('model.h5', monitor='val_loss', save_best_only=True)\n\ntrain_history = model.fit(\n    train_input, train_labels,\n    validation_split=0.25,\n    epochs=3,\n    callbacks=[checkpoint],\n    batch_size=64\n)","d356218d":"model.load_weights('model.h5')\ntest_pred = model.predict(test_input)","106d1033":"submission['target'] = test_pred.round().astype(int)\nsubmission.to_csv('submission.csv', index=False)","29289914":"### Load BERT from TFHub","6df6a9fe":"**Acknowledgements**\n\nI thank the following kernels for inspiration :\n\n* https:\/\/www.kaggle.com\/vbmokin\/nlp-eda-bag-of-words-tf-idf-glove-bert\n* https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub","da357789":"**References**\n\n* Source for bert_encode function: https:\/\/www.kaggle.com\/user123454321\/bert-starter-inference\n* All pre-trained BERT models from Tensorflow Hub: https:\/\/tfhub.dev\/s?q=bert"}}