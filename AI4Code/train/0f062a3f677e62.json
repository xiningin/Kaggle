{"cell_type":{"8b793af5":"code","c7582c88":"code","8c328ece":"code","fd943b16":"code","c832b9a5":"code","baf125f3":"code","fac08b8e":"code","bcb86da5":"code","702e40e2":"code","5f482a06":"code","28cd3c67":"code","d87c6968":"code","0faa411c":"code","d7737a41":"code","6f55fd01":"code","595a468a":"code","d716b55e":"code","4d4f42a6":"code","b82812f2":"code","65af2712":"code","5ebe109b":"code","911542c7":"code","71a3a56a":"code","6df69bee":"code","bc7259bd":"code","4f84f6c8":"code","65e97293":"code","18d13d2e":"code","0dd10deb":"code","ce66e9c5":"code","d61ddfc8":"code","6942354d":"code","499e59ae":"code","c13539f6":"code","433f4272":"code","88f40065":"code","64057c32":"code","0bc14cba":"code","8cf267d2":"code","e48fcd62":"code","fbe837c1":"code","70909e6d":"code","e96ef585":"code","b76fed99":"code","1a9ce198":"code","f13677c9":"code","da8e4c95":"code","f424b431":"code","9761c175":"code","f3f9cb7e":"code","134529a0":"code","bb7deb9f":"code","bd4c1110":"code","91716d10":"code","3130dc8d":"code","fdc55660":"code","0074407c":"code","2c2301a8":"code","bea0ab1e":"code","68e71198":"code","3e442686":"code","8a2d7e11":"code","a5bcc333":"markdown","d8c2d643":"markdown","d57f4221":"markdown","2b7d7b27":"markdown","8035c8a1":"markdown","2f84f2d3":"markdown","ee266557":"markdown","ffd62223":"markdown","a32dffa1":"markdown","46930186":"markdown","28b6572f":"markdown","a45c7ca8":"markdown","085cf33c":"markdown"},"source":{"8b793af5":"# Import relevant packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport sqlite3 # Reading sql database\n\n# Set visualization package and configuration\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('ggplot')","c7582c88":"# Listing files in input directory\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8c328ece":"# Create a SQL connection to SQLite database\ncon = sqlite3.connect(\"\/kaggle\/input\/california-traffic-collision-data-from-switrs\/switrs.sqlite\")\ncur = con.cursor()","fd943b16":"# Import SQL query into DataFrame\ndf_sqllite = pd.read_sql_query('SELECT * FROM parties JOIN collisions USING (case_id) WHERE at_fault > 0 AND killed_victims > 0', con)","c832b9a5":"# Create df for year\n#df_year = pd.read_sql_query(\"SELECT * FROM collisions WHERE date(collision_date) BETWEEN date('2015-01-01') and date('2020-12-31')\", con)","baf125f3":"df_sqllite","fac08b8e":"# Check amount of columns in DataFrame\nlen(df_sqllite.columns)","bcb86da5":"# Create list of columns for subsetting\ncolumns = ['id', 'case_id', 'party_number', 'party_type', 'at_fault', 'party_sex', 'party_age','party_sobriety', 'cellphone_use', 'collision_severity','killed_victims','injured_victims', 'type_of_collision', 'pedestrian_collision','bicycle_collision','motorcycle_collision', 'truck_collision', 'lighting', 'alcohol_involved', 'pedestrian_killed_count', 'bicyclist_killed_count', 'motorcyclist_killed_count', 'collision_date', 'collision_time']","702e40e2":"# Checking if there is any errors in 'columns' list\nfor i in range(len(columns)):\n    print(df_sqllite[columns[i]])","5f482a06":"# Create dataframe with shortlisted columns\ndf_shortlist = df_sqllite[columns]","28cd3c67":"df_shortlist","d87c6968":"# Check columns in shortlisted dataframe\ndf_shortlist.columns","0faa411c":"df_shortlist.describe()","d7737a41":"# Check amount of null values\ndf_shortlist.isna().sum()","6f55fd01":"df_fault = df_shortlist[df_shortlist['at_fault'] == 1]\ndf_fault","595a468a":"# Show missingno matrix\nimport missingno as msno\nmsno.matrix(df_fault)","d716b55e":"# Show amount of entries in dataframe\nlen(df_fault.index)","4d4f42a6":"# Fill 'collision' null values with 0\ncollision_set = ['pedestrian_collision', 'bicycle_collision', 'motorcycle_collision',\n       'truck_collision']\n\nfor i in collision_set:\n    df_fault[i].fillna(0, inplace=True)\n\n# Show 'collision' columns\ndf_fault[collision_set]","b82812f2":"# Show proportion of accidents with the type of collisions:\nbeyond_car_collisions = df_fault[collision_set].mean().sort_values(ascending=False)\nbeyond_car_collisions","65af2712":"beyond_car_collisions.plot(kind='bar', title='Proportion of Fatal Collisions - Types Beyond The Car', rot=45);","5ebe109b":"# Check amount of nulls in dataframe\ndf_fault.isna().sum()","911542c7":"# Check unique values for column 'party_type'\ndf_fault['party_type'].unique()","71a3a56a":"# Replace null values for 'party_type' as 'other'\ndf_fault['party_type'].fillna('other', inplace=True)","6df69bee":"# Show count of Party types at fault\nparty_type_at_fault = df_fault['party_type'].value_counts()\nparty_type_at_fault","bc7259bd":"import matplotlib.pyplot as plt","4f84f6c8":"# Using Matplotlib's Object Orientated Visualization create Larger sized Bar Chart\nfig, ax = plt.subplots(figsize=(10, 6))\nax.bar(party_type_at_fault.index, height=party_type_at_fault.values)\nax.set_title(\"Fatal Collisions - Party Type at Fault\")\nplt.show()","65e97293":"# Using Matplotlib's Object Orientated Visualization create Larger sized Pie Chart\nfig, ax = plt.subplots(figsize=(10, 10))\nax.pie(party_type_at_fault.values, autopct='%1.0f%%',\n        shadow=True)\nax.set_title(\"Fatal Collisions - Party Type at Fault (Labels removed - refer above)\")\nplt.show()","18d13d2e":"# Check unique values for column 'party_sex'\ndf_fault['party_sex'].unique()","0dd10deb":"# Replace null values for 'party_type' as 'NA', and replace values 'X' as 'NA'\ndf_fault['party_sex'].fillna(value='not specified', inplace=True)\ndf_fault['party_sex'].replace(to_replace='X', value='not specified', inplace=True)\ndf_fault['party_sex'].unique()","ce66e9c5":"# Show count of Party types at fault\nparty_sex = df_fault['party_sex'].value_counts()\nparty_sex","d61ddfc8":"# Using Matplotlib's Object Orientated Visualization create Pie Chart\nfig, ax = plt.subplots(figsize=(10, 10))\nax.pie(party_sex.values, labels=party_sex.index, autopct='%1.1f%%',\n        shadow=True)\nax.set_title(\"Fatal Collisions - Sex of Party at Fault\")\nplt.show()","6942354d":"# Check amount of missing values from 'party_age'\ndf_fault['party_age'].isna().sum()","499e59ae":"# Visualizing distribution of ages of parties at fault\ndf_fault['party_age'].plot(kind='hist', bins=40, title='Distribution of Parties at Fault - By Age');","c13539f6":"# Impute null values from 'party_age' with median value\ndf_fault['party_age'].fillna(df_fault['party_age'].median(), inplace=True)\nprint(\"Are there any null values in 'party_sex'?: {}\" .format(df_fault['party_age'].isna().any()))","433f4272":"# Check unique values for column 'party_sobriety'\ndf_fault['party_sobriety'].unique()","88f40065":"df_fault['party_sobriety'].sort_values().hist()","64057c32":"# Impute 'party_sobriety' with 'No'\ndf_fault['party_sobriety'].fillna('No', inplace=True)\ndf_fault['party_sobriety'].replace(to_replace='X', value='No', inplace=True)\ndf_fault['party_sobriety'].unique()","0bc14cba":"# Check unique values for column 'cellphone_use'\ndf_fault['cellphone_use'].unique()","8cf267d2":"df_fault['cellphone_use'].sort_values().hist()","e48fcd62":"df_fault['cellphone_use'].isna().any()","fbe837c1":"# Impute 'cellphone_use' with '0'\ndf_fault['cellphone_use'].fillna('0', inplace=True)\ndf_fault['cellphone_use'].unique()","70909e6d":"df_fault['cellphone_use'].sort_values().hist()","e96ef585":"# Check unique values for column 'injured_victims'\ndf_fault['injured_victims'].unique()","b76fed99":"df_fault['injured_victims'].hist(bins=100)","1a9ce198":"# Impute 'injured_victims' with median value\ndf_fault['injured_victims'].fillna(df_fault['injured_victims'].median(), inplace=True)\ndf_fault['injured_victims'].unique()","f13677c9":"# Check value counts of 'type of collision'\ntypes_of_collision = df_fault['type_of_collision'].value_counts()\ntypes_of_collision","da8e4c95":"# Check unique values of 'type_of_collision'\ndf_fault['type_of_collision'].unique()","f424b431":"types_of_collision.plot(kind='bar', title='Types of Fatal Collisions', rot=45);","9761c175":"# Impute null values of 'type_of_collision' with modal value\ndf_fault['type_of_collision'].fillna(df_fault['type_of_collision'].mode()[0], inplace=True)\ndf_fault['type_of_collision'].unique()","f3f9cb7e":"# Check unique values of 'lighting'\ndf_fault['lighting'].unique()","134529a0":"# Check value counts of 'lighting' values\ndf_fault['lighting'].value_counts()","bb7deb9f":"df_fault['lighting'].value_counts().plot(kind='bar', title='Lighting of Fatal Collisions');","bd4c1110":"# Fill nulls of 'lighting' with modal value ('daylight')\ndf_fault['lighting'].fillna(df_fault['lighting'].mode()[0], inplace=True)\ndf_fault['lighting'].unique()","91716d10":"# Check unique values of 'alcohol_involved'\ndf_fault['alcohol_involved'].unique()","3130dc8d":"# Fill null values of 'alcohol_involved' with 0\ndf_fault['alcohol_involved'].fillna(0, inplace=True)\ndf_fault['alcohol_involved'].unique()","fdc55660":"df_fault['alcohol_involved'].replace(to_replace=0, value='No', inplace=True)\ndf_fault['alcohol_involved'].replace(to_replace=1, value='Yes', inplace=True)","0074407c":"# Using Matplotlib's Object Orientated Visualization create Pie Chart for 'alcohol_involved'\n\nalcohol_inv = df_fault['alcohol_involved'].value_counts()\n\nfig, ax = plt.subplots(figsize=(10, 10))\nax.pie(alcohol_inv.values, labels=alcohol_inv.index, autopct='%1.1f%%',\n        shadow=True)\nax.set_title(\"Fatal Collisions - Alcohol Involved\")\nplt.show()","2c2301a8":"collision_series = df_fault['collision_time']\ncollision_series.dropna(how='any', axis=0, inplace=True)\ncollision_series.isna().any()","bea0ab1e":"collision_series","68e71198":"# Convert strings into datetime objects\n\nconv_time2 = [datetime.strptime(i, \"%H:%M:%S\") for i in collision_series]\n\nfig, ax = plt.subplots(figsize=(16,9))\n\n# Create histogram\n_counts, bins, _patches = ax.hist(conv_time2, bins = 24)\n\n# Set xticks at bin edges\nplt.xticks(bins)\n\n# Set title\nax.set_title(\"Distribution of Fatal Collisions by Time of Day (by hour)\")\n\n# Reformat bin label into format hour\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%H\"))\nplt.show()","3e442686":"# Process 'collision date' in order to visualize as days of the week\ndate_series = df_fault['collision_date']\ndate_series.dropna(how='any', axis=0, inplace=True)\ndate_series2 = date_series.sort_values()","8a2d7e11":"# Visualize fatal collisions by day of the week\n\nconv_time3 = [datetime.strptime(i, \"%Y-%m-%d\") for i in date_series2]\n\nday = []\n\nfor i in conv_time3:\n    day.append(i.weekday())\n\nfig, ax = plt.subplots(figsize=(16,9))\n\n# Create histogram\n_counts, bins, _patches = ax.hist(day, bins = 7)\n\n# Set title\nax.set_title(\"Distribution of Fatal Collisions by day\")\n\nplt.show()","a5bcc333":"As the final visual analysis of this notebook (0 is Sunday, 6 is Saturday): \nThe amount of crashes is relatively low on from Sunday (0) to Wednesday, with the trough experienced on Tuesday (2). There is a dramatic increase on Thursday (4), and peaks on Friday (5). There is minor drip from Friday to Saturday (6). \nIt appears that the weekend or rather, the lead-up into the weeken, is a common period for these types of accidents.","d8c2d643":"Hitting an object was the most common type of Fatal Collision, followed by hitting pedstrians. ","d57f4221":"# California Fatal Traffic Collisions 2001-2020: Data from SWITRS\nThis data comes from the California Highway Patrol and covers collisions from January 1st, 2001 until mid-October, 2020. Courtesy from Alex Gude (https:\/\/www.kaggle.com\/alexgude)\n\nThis will be an Exploratory Data Analysis of collisions that are fatal in nature (mostly due to computing constraints of Kaggle). \n\nHere we will:\n* Do an SQL query that does an inner join of 'parties' and 'collisions' and the entries that have resulted in fatal accidents, where the party is at fault. The purpose of this exercise is do a visual exploration of the responsible parties. \n* Do some minor preprocessing and fix missing values (we will 'clean' as we go through explore the features one at a time). \n* Conduct a visualization of the data, according to a few select features (eg. Age, Sex, Alcohol Use, Cellphone Use)\n\nPossible future developments: \n* A predictive model or clustering model may be looked into. That will be in the next version of this notebook.\n\nIf you enjoyed this notebook, please feel free to hit the 'like' and\/or comment! Thanks.","2b7d7b27":"Because the original dataset not specify what the values 'A' to 'H' stand for, it is hard to infer the meaning of these value labels. It is likely that 'A' stands for the highest level of sobriety.","8035c8a1":"From the dataset, there are set of values from 1 to 3, and B to D. The values 3 are the most frequent here, by quite a margin.","2f84f2d3":"It seems that alcohol is involved with 35.6% of responsible parties in fatal collisions. That number is more than a third of all fatal accidents.","ee266557":"As the columns with 'collision' contain the most null values, we will focus on these this data first. Additionally, they are also the most intuitive to clean: null values denotes non-applicability ie. 0. ","ffd62223":"As we can see, pedestrian collisions are the most common at over 22%, followed by fatal collisions involving motorcycles.","a32dffa1":"# Data Cleaning","46930186":"It appears most of the fatal accidents have occurred during daylight, this is most likely due to the fact most trips are made during day light hours.","28b6572f":"For the vast majority of fatal collisions, the driver is at fault. \nIn the pie chart (labels removed in order to avoid overlapping text), we can get a sense of this proportion. \nPedestrians are at fault at a not insignificant 14% of instances. Cyclists are at fault 3% of the time. ","a45c7ca8":"Within the database of fatal collisions, the most common amount of injured victims is 1 victim, at nearly 35,000 cases. \nThis is followed by injured victims of 2 victims, at under 15,000 cases. ","085cf33c":"We can see that fatal accidents usually peak from the hours 17:00 to 21:00, this translates to 5pm to 9pm. This lately makes sense as this is after-work 'rush hour', and also may coincide with dinner and evening events. "}}