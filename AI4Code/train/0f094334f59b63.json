{"cell_type":{"feb8d0b3":"code","86d754a9":"code","ceaf7368":"code","79017f16":"code","e62c8dbf":"code","2ee2a34f":"code","8e017723":"code","7a5e3ca2":"code","f1e92cdc":"code","75fe3ffa":"code","7ec1e16f":"code","66f3e5bd":"code","2ca39125":"code","87dbc214":"code","2a8928d8":"code","2c1c0bed":"code","107031aa":"code","fc4eeb91":"code","9356d841":"code","85f776e8":"code","2a3a5575":"code","a79f1a41":"code","b264bcb2":"code","3e8baa94":"code","c1162a78":"code","add89a91":"markdown","6b48ef9e":"markdown","7d47a336":"markdown","b783a501":"markdown","ac9ec5db":"markdown","039934de":"markdown","5c482eeb":"markdown","07089b33":"markdown","966a3c54":"markdown","6020d565":"markdown","0baeead1":"markdown","896f80fb":"markdown","c7532309":"markdown","6a238064":"markdown","2d24b1e8":"markdown","82b7cd77":"markdown","02b31df3":"markdown","67c2f81f":"markdown"},"source":{"feb8d0b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","86d754a9":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.metrics import classification_report,confusion_matrix\n\nfrom sklearn.ensemble import RandomForestClassifier","ceaf7368":"dfloan=pd.read_csv(\"..\/input\/loan_data.csv\")\ndfloan.head()","79017f16":"dfloan.info()","e62c8dbf":"dfloan.describe()","2ee2a34f":"plt.figure(figsize=(15,10))\ndfloan[dfloan['credit.policy']==1]['fico'].hist(bins=30,color='blue',rwidth=0.95,label='Credit Policy=1',alpha=0.6)\ndfloan[dfloan['credit.policy']==0]['fico'].hist(bins=30,color='grey',rwidth=0.95,label='credit policy=0',alpha=0.6)\nplt.legend()\nplt.xlabel('FICO')\n\n","8e017723":"plt.figure(figsize=(15,10))\ndfloan[dfloan['not.fully.paid']==1]['fico'].hist(bins=30,color='blue',label='Not Fully Paid=1',alpha=0.6)\ndfloan[dfloan['not.fully.paid']==0]['fico'].hist(bins=30,color='grey',label='Not Fully Paid=0',alpha=0.6)\nplt.legend()\nplt.xlabel('FICO')","7a5e3ca2":"plt.figure(figsize=(12,8))\nsns.countplot(x='purpose',hue='not.fully.paid',data=dfloan,palette='Set1')","f1e92cdc":"sns.jointplot(x='fico',y='int.rate',data=dfloan)","75fe3ffa":"plt.figure(figsize=(11,7))\nsns.lmplot(y='int.rate',x='fico',data=dfloan,hue='credit.policy',col='not.fully.paid',palette='Set1')","7ec1e16f":"cat_feats=['purpose']","66f3e5bd":"final_data=pd.get_dummies(dfloan,columns=cat_feats,drop_first=True)","2ca39125":"final_data.info()","87dbc214":"final_data.head()","2a8928d8":"X=final_data.drop('not.fully.paid',axis=1)\ny=final_data['not.fully.paid']\n\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=1)","2c1c0bed":"dtree=DecisionTreeClassifier()","107031aa":"dtree.fit(X_train,y_train)","fc4eeb91":"dtreepredictions=dtree.predict(X_test)","9356d841":"print(classification_report(y_test,dtreepredictions))","85f776e8":"print(confusion_matrix(y_test,dtreepredictions))","2a3a5575":"rfc=RandomForestClassifier(n_estimators=300)","a79f1a41":"rfc.fit(X_train,y_train)","b264bcb2":"rfcpredictions=rfc.predict(X_test)","3e8baa94":"print(classification_report(y_test,rfcpredictions))","c1162a78":"print(confusion_matrix(y_test,rfcpredictions))","add89a91":"**Training the RandomForest Modeel**\nCreate an instance of RFC class and fit it to our training data from the previous step","6b48ef9e":"**Import Libraries**","7d47a336":"Trainign a DecisionTree Model\nLet's start by training single decision tree first\nImport DecisionTreeClassifier","b783a501":"**Setting up the Data** Since we have purpose which is a caregorical.\ncreate a list of 1 element containing the string 'purpose'.","ac9ec5db":"**Printing Classification Report**","039934de":"**Printing Classification Report******","5c482eeb":"**Predictions and Evaluations** \nLets predict off the y_test values and evaluate our model.\nPredict the class of not.fully.paid for the X_test data\n","07089b33":"**Printing Confusion Matrix**","966a3c54":"Now use pd.get_dummies(DF,columns=,drop_first=) to create a fixed larger dataframe that has new feature columns with dummy variables. Set this dataframe as final_data","6020d565":"**Exploratory Data Analysis**","0baeead1":"LMPlots to see if the trend differed between not.fully.paid and credit policy.","896f80fb":"**Countplot using seaborn showing the counts of loan by purpose, with the color hue defined by not.fully.paid,**","c7532309":"**Train Test Split** \nUse sklearn to split your data into a training and testing set ","6a238064":"**Reading the Data from CSV file**","2d24b1e8":"**Priting Confusion Matrix**","82b7cd77":"Lets see the trend between FICO score and interest rate using Jointplot","02b31df3":"**Decision Tree vs RandomForest** : Dataset used is Lending Club Loan Data","67c2f81f":"**Predictions and Evaluations of Decision Tree**\nCreate predictions from test set and create a classification report and a confusion matrix."}}