{"cell_type":{"4dc64cef":"code","e890f0fe":"code","b80146f5":"code","1a57d490":"code","94d7d09a":"code","82eb4660":"code","14a1a376":"code","dfc86564":"code","298ac6b3":"code","17df3ff0":"code","56047bcc":"markdown"},"source":{"4dc64cef":"import numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing","e890f0fe":"df = pd.read_csv(\"..\/input\/spotifyclassification\/data.csv\")\nprint(\"\\n  There are\",len(df),\"songs in the dataset\\n\")","b80146f5":"features = ['acousticness', 'danceability', 'duration_ms', 'energy',\n       'instrumentalness', 'key', 'liveness', 'loudness', 'mode',\n       'speechiness', 'tempo', 'time_signature', 'valence']\nprint(\"\\n  There are 13 song characteristics in the dataset. They are stored as the features:\\n\")\nfor x in features:\n    print(\"  \",x)\nprint()","1a57d490":"print(\"\\n  Standardizing the song features.\\n  The columns are now in a z-distributions.\\n\")\n# Create the Scaler object\nscaler = preprocessing.StandardScaler(with_mean=True, with_std=True)\n# Fit your data on the scaler object\ndfz = scaler.fit_transform(df[features])\ndfz = pd.DataFrame(dfz, columns=features)\ndfz['song_title']=df['song_title']\ndfz['artist']=df['artist']","94d7d09a":"print(\"\\n  10 Random Songs from the Dataset:\\n\")\nrandom_songs = df.loc[np.random.permutation(df.index)[:10]]['song_title'].values\nfor song in random_songs:\n    print(\"  \",song)\nprint()","82eb4660":"title = random_songs[0]\ntarget_row = dfz.loc[dfz['song_title'] == title].head(1)\nartist = target_row.iloc[0]['artist']\nprint(\"\\n  We can now find the songs most similar to\",title,\"by\",artist,\"\\n  (the first random song selected)\\n\")","14a1a376":"print(\"\\n  Retrieving the song characteristics (in z-scores) for each feature of\",title,\"by\",artist,\"\\n\")\nacousticness = target_row.iloc[0]['acousticness'] \ndanceability = target_row.iloc[0]['danceability']\ninstrumentalness = target_row.iloc[0]['instrumentalness'] \nduration_ms = target_row.iloc[0]['duration_ms'] \nenergy = target_row.iloc[0]['energy'] \nkey = target_row.iloc[0]['key'] \nliveness = target_row.iloc[0]['liveness']\nloudness = target_row.iloc[0]['loudness'] \nmode = target_row.iloc[0]['mode'] \nspeechiness = target_row.iloc[0]['speechiness'] \ntempo = target_row.iloc[0]['tempo'] \ntime_signature = target_row.iloc[0]['time_signature'] \nvalence = target_row.iloc[0]['valence']","dfc86564":"print(\"\\n  Song Characteristics\\n  -----------------------------------------\")\nfor col in list(target_row)[::-1]:\n    try:\n        print(\" \",col,\" \"*(30-len(col)),round(target_row.iloc[0][col],3))\n    except:\n        print(\" \",col,\" \"*(30-len(col)),target_row.iloc[0][col])\nprint()","298ac6b3":"dfz['similarity'] = abs(dfz['acousticness'] - acousticness) + abs(dfz['danceability'] - danceability)\n+ abs(dfz['duration_ms'] - duration_ms) + abs(dfz['energy'] - energy) + abs(dfz['instrumentalness'] - instrumentalness) \n+ abs(dfz['key'] - key) + abs(dfz['liveness'] - liveness) + abs(dfz['loudness'] - loudness)\n+ abs(dfz['mode'] - mode) + abs(dfz['danceability'] - danceability) + abs(dfz['tempo'] - tempo)\n+ abs(dfz['speechiness'] - speechiness) + abs(dfz['valence'] - valence)\nprint(\"\\n  Computing the similarity score for all songs in the dataset with the song\\n \",title,\"by\",artist,\"\\n\")","17df3ff0":"dfz_sims = dfz[dfz.song_title != title].nsmallest(10, 'similarity')\nprint(\"\\n  Top 10 Songs Most Similar to:\\n \",title,\"-\",artist,\"\\n\")\nscore = 1\nfor ind, row in dfz_sims.iterrows():\n    print(\"   \",score,row['song_title'],\"-\",row['artist'])\n    score+=1\nprint()","56047bcc":"# Identifing Similar Songs based on Spotify Characteristics\n### 13 characteristics such as tempo, danceability, acousticness.\n### Similarity scores are based on standardizing the data and then calculating euclidean distance"}}