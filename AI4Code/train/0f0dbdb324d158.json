{"cell_type":{"22e72ada":"code","6bb59fb8":"code","d6f1ba6c":"code","35027163":"code","25f27c9a":"code","8aa9ee3f":"code","2dfd3781":"code","face0b99":"code","50d3c86a":"code","658b1cae":"code","ac1c4062":"code","9f960c3a":"code","8a31022f":"code","e8b42740":"markdown","f713f4d1":"markdown","414cbeed":"markdown","024bd83a":"markdown","e7483ecf":"markdown","b1715e82":"markdown","f19df917":"markdown","886749ad":"markdown","657179be":"markdown","4b18fecc":"markdown","a82fcc7e":"markdown","4fd3213f":"markdown","7334cefe":"markdown","ab31ec19":"markdown","10c502ea":"markdown","d099d5f3":"markdown","a9d98a75":"markdown"},"source":{"22e72ada":"import IPython.display as ipd \nimport librosa\nimport pandas as pd\nimport os\nimport numpy as np\nfrom tqdm import tqdm\n\n\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.preprocessing import LabelEncoder\n\nimport tensorflow as tf\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense , Activation , Dropout","6bb59fb8":"# reading the files\naudio_dataset_path = '..\/input\/urbansound8k\/'\n\n# loading the csv\nmeta_data = pd.read_csv('..\/input\/urbansound8k\/UrbanSound8K.csv')\nmeta_data.head()","d6f1ba6c":"# do feature extraction using librosa\ndef features_extract(file):\n    # load the audio file\n    audio,sample_rate = librosa.load(file_name,res_type='kaiser_fast')\n    \n    # extract the features\n    feature = librosa.feature.mfcc(y=audio,sr=sample_rate,n_mfcc=50)\n    \n    # feature scaling\n    scaled_feature = np.mean(feature.T,axis=0)\n    \n    # return the scaled features\n    return scaled_feature\n\n# list containg all the features\nextracted = []\n\n# for each row in the csv\nfor index_num,row in tqdm(meta_data.iterrows()):\n    \n    # get the file \n    file_name = os.path.join(os.path.abspath(audio_dataset_path),'fold'+str(row[\"fold\"])+'\/',str(row['slice_file_name']))\n    \n    # get file label\n    final_class_labels = row['class']\n    \n    # extract feature\n    data= features_extract(file_name)\n    \n    # store it in a list\n    extracted.append([data,final_class_labels])\n","35027163":"# create na new dataframe\nextracted_df = pd.DataFrame(extracted,columns=['feature','class'])\n\n# display first fivve rows of the dataframe\nextracted_df.head()","25f27c9a":"# get the data as a list and send it to np.array() \n# function to convert it into an array \nx = np.array(extracted_df['feature'].tolist())\ny = np.array(extracted_df['class'].tolist())","8aa9ee3f":"# label encoding to get encoding\nle = LabelEncoder()\n\n# transform each category with it's respected label\nY = to_categorical(le.fit_transform(y))","2dfd3781":"# split the data to train and test set\nx_train, x_test, y_train, y_test = train_test_split(x, Y, test_size=0.2, random_state = 42)\n\n# print the details\nprint(\"Number of training samples = \", x_train.shape[0])\nprint(\"Number of testing samples = \",x_test.shape[0])","face0b99":"# Construct model \nnum_labels = Y.shape[1]\nmodel = Sequential()\n\nmodel.add(Dense(256, input_shape=(50,)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(256))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(256))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(128))\n\nmodel.add(Dense(num_labels))\nmodel.add(Activation('softmax'))\nmodel.summary()","50d3c86a":"model.compile(\n    optimizer=tf.keras.optimizers.Adam(),\n    loss=tf.keras.losses.CategoricalCrossentropy(),\n    metrics=['accuracy'],\n)","658b1cae":"num_epochs = 150\nnum_batch_size = 32\n\nmodel.fit(\n          x_train, \n          y_train, \n          batch_size=num_batch_size, \n          epochs=num_epochs,\n          validation_data=(x_test, y_test),\n         )","ac1c4062":"# function to extract features from the audion file\ndef extract_feature(file_name):\n    # load the audio file\n    audio_data, sample_rate = librosa.load(file_name, res_type='kaiser_fast') \n    \n    # get the feature \n    feature = librosa.feature.mfcc(y=audio_data, sr=sample_rate, n_mfcc=50)\n    \n    # scale the features\n    feature_scaled = np.mean(feature.T,axis=0)\n    \n    # return the array of features\n    return np.array([feature_scaled])","9f960c3a":"# function to predict the feature\ndef print_prediction(file_name):\n    \n    # extract feature from the function defined above\n    prediction_feature = extract_feature(file_name) \n    \n    # get the id of label using argmax\n    predicted_vector = np.argmax(model.predict(prediction_feature), axis=-1)\n    \n    # get the class label from class id\n    predicted_class = le.inverse_transform(predicted_vector)\n    \n    # display the result\n    print(\"The predicted class is:\", predicted_class[0], '\\n') ","8a31022f":"# File name\nfile_name = '..\/input\/urbansound8k\/fold8\/103076-3-0-0.wav'\n\n# get the output\nprint_prediction(file_name)\n\n# play the file\nipd.Audio(file_name)","e8b42740":"### Importing the required modules","f713f4d1":"### Create a new dataframe from the extracted features","414cbeed":"### Built the model","024bd83a":"## Testing the model","e7483ecf":"### Distribute the data to X and Y","b1715e82":"### Reading the data","f19df917":"### Split the data into train and test sets","886749ad":"### Create a function to extract feature from test audio","657179be":"## There are a lot of ways by which we can process an audio file to feed it in a neural network. Though there are multiple ways but all work on a single principal which is to manipulate the data into tha data which we require( tabular -> numerical form) and then feed it to a neural network. ","4b18fecc":"# This notebook deals with audio classification using librosa and tensorflow","a82fcc7e":"### Print the result of test audio by feeding it to model","4fd3213f":"### Extracting features using librosa","7334cefe":"### testing an audio","ab31ec19":"### Use encoding to encode the string labels to an integer","10c502ea":"### In this notebook I have explained the method of working with a audio files to convert it to a tabular form for building a model.","d099d5f3":"### Fitting the model with a batch size of 32 for 150 epochs","a9d98a75":"### Compile the model \n#### optimizer-> adam\n#### loss function -> Categorical Cross Entropy"}}