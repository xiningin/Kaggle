{"cell_type":{"0b36cc2d":"code","b711124e":"code","717e6e22":"code","27480e97":"code","b8ddf68d":"code","9809b1bf":"code","a4c48003":"code","f179885e":"code","688a8833":"code","5570589e":"code","2ddad057":"code","31e695fc":"code","237c08b9":"code","d047d6a3":"code","f05a1783":"code","186725cf":"code","1c186ccf":"code","a135d013":"code","3c210c1a":"code","071f63d4":"code","2ece6774":"code","579c4cbb":"code","9474a957":"code","be149aea":"code","ecf065c2":"code","a6e1bd78":"code","f433ed57":"code","0fd25ae8":"code","5631382c":"code","d858ee11":"code","3f21c95f":"code","93232de4":"code","04e8518e":"code","11a093b6":"code","9bfcf52a":"code","be994219":"markdown","5e75801f":"markdown","4f5e4f86":"markdown","2530df2b":"markdown","b4a80eac":"markdown","b52abbfd":"markdown","60b67d74":"markdown","07c557f9":"markdown","3cd541be":"markdown","8a9e4255":"markdown","77b012fa":"markdown"},"source":{"0b36cc2d":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","b711124e":"# reading the data\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","717e6e22":"train.head()","27480e97":"print(f'shape train {train.shape}, shape test {test.shape}')","b8ddf68d":"# Check Missing Value\ntrain.isna().sum()","9809b1bf":"test.isna().sum()","a4c48003":"categorical = ['Pclass','Sex','SibSp','Parch','Embarked']\nnumerical = ['Age']","f179885e":"sns.catplot(x=\"Sex\", hue=\"Survived\", kind=\"count\", data=train)\nsns.catplot(x=\"SibSp\", hue=\"Survived\", kind=\"count\", data=train)\nsns.catplot(x=\"Pclass\", hue=\"Survived\", kind=\"count\", data=train)\nsns.catplot(x=\"Parch\", hue=\"Survived\", kind=\"count\", data=train)\nsns.catplot(x=\"Embarked\", hue=\"Survived\", kind=\"count\", data=train)","688a8833":"sns.histplot(x= 'Age', data = train, hue = 'Survived', kde = True)","5570589e":"sns.countplot(x = 'Survived', data = train)","2ddad057":"all_data = [train,test]\nfor data in all_data :\n    data['Status'] = data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","31e695fc":"train.Status.unique()","237c08b9":"sns.catplot(x=\"Status\", hue=\"Survived\", kind=\"count\", data=train)","d047d6a3":"for dataset in all_data:\n    dataset['Status'] = dataset['Status'].replace(['Lady', 'Countess','Capt', 'Col',\\\n     'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Status'] = dataset['Status'].replace('Mlle', 'Miss')\n    dataset['Status'] = dataset['Status'].replace('Ms', 'Miss')\n    dataset['Status'] = dataset['Status'].replace('Mme', 'Mrs')","f05a1783":"sns.catplot(x=\"Status\", hue=\"Survived\", kind=\"count\", data=train)","186725cf":"train['FamilySize'] = train ['SibSp'] + train['Parch'] + 1\ntest['FamilySize'] = test ['SibSp'] + test['Parch'] + 1","1c186ccf":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in all_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)\n    \nfor dataset in all_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1","a135d013":"train['Cabin_category'] = train['Cabin'].astype(str).str[0]\ntrain['Cabin_category'] = train['Cabin_category'].map({'A':1,'B':2,'C':2,'D':3,'E':4,'F':5,'G':6,'T':7})\ntrain['Cabin_category'] = train['Cabin_category'].fillna(0)\n# Cabin Grouping \ntrain['HasCabin'] = train['Cabin'].apply(lambda x:0 if x is np.nan else 1)\ntest['Cabin_category'] = test['Cabin'].astype(str).str[0]\ntest['Cabin_category'] = test['Cabin_category'].map({'A':1,'B':2,'C':2,'D':3,'E':4,'F':5,'G':6,'T':7})\ntest['Cabin_category'] = test['Cabin_category'].fillna(0)\n# Cabin Grouping \ntest['HasCabin'] = test['Cabin'].apply(lambda x:0 if x is np.nan else 1)","3c210c1a":"train.head()","071f63d4":"train.isna().sum()","2ece6774":"train['Age']","579c4cbb":"for i in train[\"Status\"].unique():\n    med = train[train[\"Status\"] == i]['Age'].median()\n    med_t = test[test[\"Status\"] == i]['Age'].median()\n    train.loc[train[\"Status\"] == i,'Age'] = train.loc[train[\"Status\"] == i,'Age'].fillna(med)\n    test.loc[test[\"Status\"] == i,'Age'] = test.loc[test[\"Status\"] == i,'Age'].fillna(med_t)\n\ntrain['Fare'].fillna(train.groupby(['Pclass', 'Parch', 'SibSp'])['Fare'].median()[3][0][0], inplace = True)\ntest['Fare'].fillna(test.groupby(['Pclass', 'Parch', 'SibSp'])['Fare'].median()[3][0][0], inplace = True)\ntrain['Embarked'].fillna('S', inplace = True)\ntest['Embarked'].fillna('S', inplace = True)","9474a957":"train.isna().sum()","be149aea":"test.isna().sum()","ecf065c2":"features = [\"Pclass\",\"Sex\", \"Age\",\"IsAlone\", \"FamilySize\", \"Status\",\"Embarked\",\"Fare\",\"Cabin_category\",\"HasCabin\"]","a6e1bd78":"X_full = pd.get_dummies(train[features])\ny_full = train[\"Survived\"]\n\nX_test_full = pd.get_dummies(test[features])","f433ed57":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X_full, y_full, train_size=0.8, test_size=0.2,random_state=73)","0fd25ae8":"from sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nimport xgboost as xgb","5631382c":"key = ['LogisticRegression','KNeighborsClassifier','SVC','DecisionTreeClassifier','RandomForestClassifier',\n       'GradientBoostingClassifier','AdaBoostClassifier','XGBClassifier']\nvalue = [LogisticRegression(solver='liblinear'),KNeighborsClassifier(),SVC(),\n         DecisionTreeClassifier(),RandomForestClassifier(),GradientBoostingClassifier(),AdaBoostClassifier(),xgb.XGBClassifier()]\nmodels = dict(zip(key,value))\nprint(models)","d858ee11":"predicted =[]\nresults = []\nfor name,algo in models.items():\n    algo.fit(X_train,y_train)\n    predict = algo.predict(X_valid)\n    acc = accuracy_score(y_valid, predict)\n    result = algo.predict(X_test_full)\n    results.append(result)\n    predicted.append(acc)\n    print(name,acc)","3f21c95f":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom datetime import datetime","93232de4":" #creating model\nmodel = Sequential()\n\nneuron_hidden = [512,64,64,64,1]\nact_func = ['sigmoid','sigmoid','relu','relu','sigmoid']\n\nfor i in range(len(neuron_hidden)):\n    if i == 0:\n        model.add(Dense(neuron_hidden[0], input_dim=X_train.shape[1], activation=act_func[0]))\n    else:\n        model.add(Dense(neuron_hidden[i], activation=act_func[i])),\n        model.add(Dropout(0.4))\n\n######### compile the keras model #########\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n#model.fit(X, y, epochs=150, batch_size=10)\nhistory = model.fit(X_train, y_train, validation_data = (X_valid, y_valid), epochs=100, batch_size=64, verbose=0, shuffle = False)\n_,acc_train = model.evaluate(X_train,y_train,verbose = 0)\n_,acc_test = model.evaluate(X_valid,y_valid, verbose = 0)\nresult_nn = model.predict(X_test_full)\nprint('acc train: ',acc_train,'acc test: ',acc_test)","04e8518e":"key.append('ANN')\npredicted.append(acc_test)","11a093b6":"plt.figure(figsize = (10,5))\nsns.barplot(x = predicted, y = key)","9bfcf52a":"output = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': results[0]})\noutput.to_csv('my_submission.csv', index=False)","be994219":"too much missing value in `cabin`, we will delete later","5e75801f":"# Training model","4f5e4f86":"# Bar plot","2530df2b":"# Distribution of Survived","b4a80eac":"# Load Data","b52abbfd":"# Check Missing Value","60b67d74":"# Neural Network","07c557f9":"## Feature Engineering","3cd541be":"# Data Visualization","8a9e4255":"# Data Preprocessing","77b012fa":"# Filling Missing Value"}}