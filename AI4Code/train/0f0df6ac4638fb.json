{"cell_type":{"4ff4791a":"code","deffdbd5":"code","96debc72":"code","4c2b7d1b":"code","e2252bce":"code","322cb428":"code","e271d12c":"code","62f6d609":"code","17f58402":"code","3688e3da":"code","eeacb9f0":"code","4fd04907":"code","ffa7722d":"code","d77e558d":"code","4e144b23":"code","76c5702c":"code","60a8daeb":"code","de923b83":"code","5430d68d":"code","ce52f00f":"code","e0b0661a":"code","3f47dbf6":"code","ac2d50f7":"code","1171f4fc":"code","581077ac":"code","ba6db2ad":"code","6951b41f":"code","c749feb3":"code","40f0fa0c":"code","fcdc70e4":"code","af963db1":"code","c3f0e6d7":"code","214208e9":"code","2f0424c3":"code","d6015511":"code","81fd2829":"code","d0c9eb21":"code","f6452bbe":"code","9ea0b70a":"code","315987ab":"code","bf244cae":"code","667aa3ad":"code","61b08882":"code","c4316e7a":"code","c3ac4264":"code","c335ad01":"code","16217c53":"code","c36c5637":"code","fdd3598d":"code","d97cf6ea":"code","ab2df919":"code","2ad6c86b":"code","cba1fca1":"code","907f6b47":"code","95696949":"code","7813631f":"code","d8c8219f":"code","ab0e0039":"code","9c124216":"code","3b17bda5":"code","67e3c4f5":"markdown","0c778c27":"markdown","b4cfcfbf":"markdown","00963171":"markdown","25ca07c3":"markdown","81f13196":"markdown","52c5556a":"markdown","e641595d":"markdown","560b3f83":"markdown","8d49a8f6":"markdown","125aa747":"markdown","7737872d":"markdown","a65f74f8":"markdown","c2761606":"markdown","9181700f":"markdown","04dfde61":"markdown","d5f0abf6":"markdown","f7bb2c08":"markdown","b7b2f918":"markdown","f7339ac4":"markdown","d0def95a":"markdown","6ba612e5":"markdown","875f782c":"markdown","ec8d2225":"markdown","422968b0":"markdown","dab96e83":"markdown","665ffb7f":"markdown","7bfa1aa2":"markdown","00038db0":"markdown","b027fffc":"markdown","b4e9f836":"markdown"},"source":{"4ff4791a":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","deffdbd5":"import pandas as pd\nimport numpy as np\nimport helpers\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import r2_score, mean_squared_error\nsns.set()\nnp.random.seed(42)","96debc72":"symbol = 'DJIA'","4c2b7d1b":"output_size = 'full'","e2252bce":"df_raw = helpers.fetch_data(symbol, output_size)\ndf_full = df_raw.copy()","322cb428":"# # Fetch local data \n# input_directory = '\/kaggle\/input\/simulation-project-fall2019-sfsu\/'\n# df_raw = pd.read_csv(input_directory+'daily_adjusted_'+symbol+'.csv')\n# df_full = df_raw.copy()","e271d12c":"df_full = df_full.sort_values(by='timestamp').set_index('timestamp')\ndf_full = df_full.drop(['dividend_amount', 'split_coefficient'], axis=1)\nprint('df_full shape:', df_full.shape)\ndf_full.head()","62f6d609":"df = df_full.tail(1001)\ndf.head()","17f58402":"x_ticks_interval = np.arange(0, 1001, 120)\nx_ticks_value = df.index[::120]\nprint('x_ticks_interval.shape:', x_ticks_interval.shape)\nprint('x_ticks_value.shape', x_ticks_value.shape)","3688e3da":"plt.style.use(['ggplot'])\nplt.figure(figsize=(15,7), dpi=300)\nplt.plot(df['close'])\nplt.title(symbol+' Close Price Past 1001 Trading Days')\nplt.xticks(x_ticks_interval, x_ticks_value)\nplt.show()","eeacb9f0":"X_pre_shift = df[['open', 'high', 'low', 'close', 'adjusted_close', 'volume']]\nprint('X_pre_shift shape:', X_pre_shift.shape)\nX_pre_shift.head()","4fd04907":"X_shifted = helpers.time_series_shift(X_pre_shift)\nprint('X_shifted.shape', X_shifted.shape)\nX_shifted.head()","ffa7722d":"helpers.test_shift_X_values(X_shifted, 0)","d77e558d":"X_pre_transform = X_shifted[X_shifted.columns[:6]]\nX_pre_transform.columns = [i+' (t-1)' for i in X_pre_shift.columns.tolist()]\nprint('X_pre_transform.shape', X_pre_transform.shape)\nX_pre_transform.head()","4e144b23":"y_pre_transform = df['close'][1:]\nprint('y_pre_transform shape:', y_pre_transform.shape)\ny_pre_transform.head()","76c5702c":"helpers.test_shape(X_pre_transform, y_pre_transform)","60a8daeb":"X_train_pre_transform, X_dev_pre_transform, X_test_pre_transform = np.split(X_pre_transform, [int(.8 * len(X_pre_transform)), int(.9 * len(X_pre_transform))])","de923b83":"print('X_train_pre_transform.shape', X_train_pre_transform.shape)\nprint('X_dev_pre_transform.shape', X_dev_pre_transform.shape)\nprint('X_test_pre_transform.shape', X_test_pre_transform.shape)","5430d68d":"y_train_pre_transform, y_dev_pre_transform, y_test_pre_transform = np.split(y_pre_transform, [int(0.8 * len(y_pre_transform)), int(0.9 * len(y_pre_transform))])","ce52f00f":"print('y_train_pre_transform.shape', y_train_pre_transform.shape)\nprint('y_dev_pre_transform.shape', y_dev_pre_transform.shape)\nprint('y_test_pre_transform.shape', y_test_pre_transform.shape)","e0b0661a":"X_pre_transform_list = [X_train_pre_transform, X_dev_pre_transform, X_test_pre_transform]\ny_pre_transform_list = [y_train_pre_transform, y_dev_pre_transform, y_test_pre_transform]","3f47dbf6":"np.all([helpers.test_shape(X, y) for X, y in zip(X_pre_transform_list, y_pre_transform_list)])","ac2d50f7":"X_train_pre_sequence, X_dev_pre_sequence, X_test_pre_sequence = [helpers.transform_X('StandardScaler', dataset) for dataset in X_pre_transform_list]","1171f4fc":"print('X_train_pre_sequence.shape', X_train_pre_sequence.shape)\nX_train_pre_sequence.head()","581077ac":"y_train_pre_sequence, y_dev_pre_sequence, y_test_pre_sequence = [helpers.transform_y('StandardScaler', dataset) for dataset in y_pre_transform_list]","ba6db2ad":"print('y_train_pre_sequence.shape', y_train_pre_sequence.shape)\nprint('y_dev_pre_sequence.shape', y_dev_pre_sequence.shape)\nprint('y_test_pre_sequence.shape', y_test_pre_sequence.shape)","6951b41f":"y_train_pre_sequence.head()","c749feb3":"X_pre_sequence = [X_train_pre_sequence, X_dev_pre_sequence, X_test_pre_sequence]\ny_pre_sequence = [y_train_pre_sequence, y_dev_pre_sequence, y_test_pre_sequence]","40f0fa0c":"# Validate X transform values\nnp.all([helpers.test_transform_values(pre_transform, transformed) for pre_transform, transformed in zip(X_pre_transform_list, X_pre_sequence)])","fcdc70e4":"# Validate y transform values\nnp.all([helpers.test_transform_values(pre_transform, transformed) for pre_transform, transformed in zip(y_pre_transform_list, y_pre_sequence)])","af963db1":"sequence_length = 10\nprint('model will look at', sequence_length, 'trading days at a time')","c3f0e6d7":"X_train_sequence, X_dev_sequence, X_test_sequence = [np.array(list(helpers.gen_sequence_X(dataset, sequence_length))) for dataset in X_pre_sequence]","214208e9":"print('X_train_sequence.shape', X_train_sequence.shape)\nprint('X_dev_sequence.shape', X_dev_sequence.shape)\nprint('X_test_sequence.shape', X_test_sequence.shape)","2f0424c3":"y_train_sequence = helpers.gen_sequence_y(y_train_pre_sequence, sequence_length)\ny_train_sequence.shape","d6015511":"y_train_sequence, y_dev_sequence, y_test_sequence = [helpers.gen_sequence_y(dataset, sequence_length) for dataset in y_pre_sequence]","81fd2829":"print('y_train_sequence.shape', y_train_sequence.shape)\nprint('y_dev_sequence.shape', y_dev_sequence.shape)\nprint('y_test_sequence.shape', y_test_sequence.shape)","d0c9eb21":"X_sequence = [X_train_sequence, X_dev_sequence, X_test_sequence]","f6452bbe":"np.all([helpers.test_sequence_X_values(pre_sequence_X, sequence_X, 0) for pre_sequence_X, sequence_X in zip(X_pre_sequence, X_sequence)])","9ea0b70a":"X_train, X_dev, X_test = X_train_sequence.copy(), X_dev_sequence.copy(), X_test_sequence.copy()","315987ab":"y_train, y_dev, y_test = y_train_sequence.copy(), y_dev_sequence.copy(), y_test_sequence.copy()","bf244cae":"X_train_bench, X_dev_bench, X_test_bench = (helpers.transform_bench_X(X_train), \n                                                       helpers.transform_bench_X(X_dev), \n                                                       helpers.transform_bench_X(X_test))","667aa3ad":"y_train_bench, y_dev_bench, y_test_bench = (helpers.transform_bench_y(y_train), \n                                                       helpers.transform_bench_y(y_dev), \n                                                       helpers.transform_bench_y(y_test))","61b08882":"print('X_train_bench.shape:', X_train_bench.shape)\nprint('y_train_bench.shape:', y_train_bench.shape)","c4316e7a":"from sklearn.linear_model import LinearRegression\nlinear_regression = LinearRegression()","c3ac4264":"linear_regression.fit(X_train_bench, y_train_bench)","c335ad01":"y_pred_train_bench = linear_regression.predict(X_train_bench)\ny_pred_dev_bench = linear_regression.predict(X_dev_bench)\ny_pred_test_bench = linear_regression.predict(X_test_bench)","16217c53":"# X_pre_transform_list = [X_train_pre_transform, X_dev_pre_transform, X_test_pre_transform]\n# y_pre_transform_list = [y_train_pre_transform, y_dev_pre_transform, y_test_pre_transform]","c36c5637":"y_pred_train_bench = helpers.inverse_transform_StandardScaler(y_train_pre_transform.to_numpy(), y_pred_train_bench)\ny_pred_dev_bench = helpers.inverse_transform_StandardScaler(y_dev_pre_transform.to_numpy(), y_pred_dev_bench)\ny_pred_test_bench = helpers.inverse_transform_StandardScaler(y_test_pre_transform.to_numpy(), y_pred_test_bench)","fdd3598d":"r2_train_bench = r2_score(y_train, y_pred_train_bench) \nr2_dev_bench  = r2_score(y_dev, y_pred_dev_bench) \nr2_test_bench = r2_score(y_test, y_pred_test_bench)\nprint('r2_train_bench:', r2_train_bench)\nprint('r2_dev_bench:', r2_dev_bench)\nprint('r2_test_bench:', r2_test_bench)","d97cf6ea":"mse_train_bench = mean_squared_error(y_train, y_pred_train_bench)\nmse_dev_bench = mean_squared_error(y_dev, y_pred_dev_bench)\nmse_test_bench = mean_squared_error(y_test, y_pred_test_bench)\nprint('root mse_train_bench value:', np.sqrt(mse_train_bench))\nprint('root mse_dev_bench value:', np.sqrt(mse_dev_bench))\nprint('root mse_test_bench value:', np.sqrt(mse_test_bench))","ab2df919":"print('root mse_train_bench percent:', (np.sqrt(mse_train_bench)\/np.mean(y_train_pre_transform))*100)\nprint('root mse_dev_bench percent:', (np.sqrt(mse_dev_bench)\/np.mean(y_dev_pre_transform))*100)\nprint('root mse_test_bench percent:', (np.sqrt(mse_test_bench)\/np.mean(y_test_pre_transform))*100)","2ad6c86b":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, LSTM\nfrom keras import regularizers\n\nnum_features = X_train.shape[2]\n\nmodel = Sequential()\n\nmodel.add(LSTM(input_shape=(sequence_length, num_features), \n               units=256, return_sequences=True, \n               kernel_regularizer=regularizers.l2(0.01)))\n\nmodel.add(Dropout(0.5))\n\nmodel.add(LSTM(units=128, return_sequences=True, kernel_regularizer=regularizers.l2(0.01)))\n\nmodel.add(Dropout(0.5))\n\nmodel.add(LSTM(units=64, return_sequences=False, kernel_regularizer=regularizers.l2(0.01)))\n\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(1))\n\nmodel.compile(loss='mae', optimizer='nadam', metrics=['mean_squared_error'])","cba1fca1":"history = model.fit(X_train, y_train, epochs=100, batch_size=64, validation_data=[X_dev, y_dev], verbose=0)","907f6b47":"helpers.plot_result(history)","95696949":"y_pred_test_normalized = np.squeeze(model.predict(X_test))","7813631f":"y_test_actual = helpers.inverse_transform_StandardScaler(y_test_pre_transform.to_numpy(), y_test)\ny_pred_test_actual = helpers.inverse_transform_StandardScaler(y_test_pre_transform.to_numpy(), y_pred_test_normalized)","d8c8219f":"print('LSTM RMSE train value:', np.sqrt(helpers.inverse_transform_StandardScaler(y_train_pre_transform.to_numpy(), history.history['mean_squared_error'])[-1]))\nprint('LSTM RMSE dev: value', np.sqrt(helpers.inverse_transform_StandardScaler(y_dev_pre_transform.to_numpy(), history.history['val_mean_squared_error'])[-1]))\nprint('LSTM RMSE test: value', np.sqrt(mean_squared_error(y_test_actual, y_pred_test_actual)))","ab0e0039":"LSTM_RMSE_value_train = np.sqrt(helpers.inverse_transform_StandardScaler(y_train_pre_transform.to_numpy(), history.history['mean_squared_error'])[-1])\nLSTM_RMSE_value_dev = np.sqrt(helpers.inverse_transform_StandardScaler(y_dev_pre_transform.to_numpy(), history.history['val_mean_squared_error'])[-1])\nLSTM_RMSE_value_test = np.sqrt(mean_squared_error(y_test_actual, y_pred_test_actual))\nprint('LSTM RMSE train percent:', LSTM_RMSE_value_train\/(np.mean(y_train_pre_transform))*100)\nprint('LSTM RMSE dev: percent', LSTM_RMSE_value_dev\/(np.mean(y_dev_pre_transform))*100)\nprint('LSTM RMSE test: percent', LSTM_RMSE_value_test\/(np.mean(y_test_pre_transform))*100)","9c124216":"last_quarter_timestamp = df_full.index.to_list()[-90:]","3b17bda5":"plt.style.use(['seaborn'])\nplt.figure(figsize=(15,7), dpi=300)\nplt.plot(y_test_actual, label='Truth')\nplt.legend(loc='upper left')\nplt.plot(y_pred_test_actual, label='Prediction')\nplt.legend(loc='upper left')\nplt.title('Truth vs Prediction', color='black')\nplt.ylabel('Price')\nplt.xlabel('Time')\nplt.xticks(ticks=np.arange(0, 90, 3), labels=last_quarter_timestamp[::3], rotation='vertical')\nplt.show()","67e3c4f5":"----","0c778c27":"## Data Transformation","b4cfcfbf":"Create X sequence","00963171":"Create y dataset","25ca07c3":"Validate shape between X and y","81f13196":"## LSTM","52c5556a":"Retain X data at only t-1 period","e641595d":"Define output dataset size, `compact` return the last 100 trading days and `full` return the entire history.","560b3f83":"Retain only the past 1001 trading days, about 4 years of record.","8d49a8f6":"Shift y by 1 period backward and create y sequence","125aa747":"Standardize Y","7737872d":"Validate transform values","a65f74f8":"Validate shape between X and y","c2761606":"Query API","9181700f":"## Predict","04dfde61":"Define stock symbol","d5f0abf6":"## Data Fetching","f7bb2c08":"## Create X and y Datasets","b7b2f918":"Create X dataset","f7339ac4":"Validate X sequence values","d0def95a":"Shift X dataset by 1 period backward","6ba612e5":"## Train, Dev, Test Set Split","875f782c":"## Create Data Sequence","ec8d2225":"Standardize X ","422968b0":"## Data Visualization","dab96e83":"## Make Copies of Data","665ffb7f":"Split dataset first and then transform dataset separetely to prevent information leakage. ","7bfa1aa2":"Validate shift X values","00038db0":"Define sequence size","b027fffc":"## Benchmark Model","b4e9f836":"## File Directory and Import Libraries"}}