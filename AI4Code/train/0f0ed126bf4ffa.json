{"cell_type":{"16368cde":"code","ab07c8f8":"code","f5d3457e":"code","f9224b97":"code","a8b75a3c":"code","12742255":"code","883ca2fb":"code","a4639a29":"code","62e75f08":"code","d2641780":"code","5be4997b":"code","68df5a22":"code","9cfb8f6f":"code","a6fd97df":"code","047f83e8":"code","ca4ccb1e":"markdown"},"source":{"16368cde":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport pycountry\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ab07c8f8":"df = pd.read_csv('\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv')\ndf.head()","f5d3457e":"df.describe()","f9224b97":"sample_data=df.sample(n=1000,replace=\"False\")","a8b75a3c":"sns.lineplot(data=sample_data, x='year', y='suicides\/100k pop')\nplt.title('Suicides over taime')\nplt.show()\n","12742255":"bins = np.linspace(sample_data['gdp_per_capita ($)'].min(), sample_data['gdp_per_capita ($)'].max(), 12)\nsample_data['binned_gbp'] = pd.cut(df['gdp_per_capita ($)'], bins)","883ca2fb":"bins = np.linspace(sample_data['population'].min(), sample_data['population'].max(), 10)\nsample_data['binned_population'] = pd.cut(df['population'], bins)","a4639a29":"fig = px.box(sample_data, x=\"country\", y=\"suicides\/100k pop\", color=\"sex\")\nfig.show()","62e75f08":"fig = px.scatter(sample_data, x=\"age\", y=\"suicides\/100k pop\", marginal_y=\"histogram\")\nfig.show()","d2641780":"test = df.groupby(['year','age','sex'], as_index=False)[\"suicides\/100k pop\"].mean()\nfig = px.line(test, x=\"year\", y=\"suicides\/100k pop\", color=\"sex\", facet_col=\"age\")\nfig.show()","5be4997b":"df = df[df['year'] < 2016]\ndf = df.replace('5-14 years','05-14 years')","68df5a22":"year_age = df.sort_values(['year', 'age'], ascending=[True, True])\npx.strip(year_age, x=\"age\", y=\"suicides\/100k pop\", color=\"sex\", animation_frame=\"year\")","9cfb8f6f":"fig = px.histogram(df, x=\"year\", y=\"suicides\/100k pop\", color=\"generation\", marginal=\"box\", histnorm=\"percent\")\nfig.show()","a6fd97df":"input_countries = df['country']\n\ncountries = {}\nfor country in pycountry.countries:\n    countries[country.name] = country.alpha_3\n\ncodes = [countries.get(country, 'Unknown code') for country in input_countries]\n\ndf['country_codes'] = codes\n","047f83e8":"year_asc = df.sort_values('year', ascending=True)\nfig = px.choropleth(\n    year_asc,\n    locations=\"country_codes\",\n    color=\"suicides\/100k pop\",\n    hover_name=\"country\",\n    animation_frame=\"year\",\n    range_color=[0,100],\n    color_continuous_scale=px.colors.diverging.RdYlGn[::-1])\nfig.show()","ca4ccb1e":"#### Exploratory data analysis"}}