{"cell_type":{"136f3c9a":"code","1c139481":"code","db28f7e1":"code","0bf6488f":"code","1a7c5fda":"code","103b4912":"code","ef3f1561":"code","7ef10c84":"code","f4c98041":"code","f18ac3c4":"code","959224b2":"code","212dd86a":"code","c641dcc1":"code","131b0850":"code","591801d1":"code","62a59ec1":"code","4e7059a3":"markdown","58f5d9cd":"markdown","471dabb5":"markdown","37ebcff8":"markdown","d4880c81":"markdown","bd55ffaf":"markdown","9ffbaa82":"markdown","3b40318b":"markdown","f9bd9660":"markdown","a74b9393":"markdown","9386695e":"markdown","ef045fd2":"markdown","a60870d8":"markdown"},"source":{"136f3c9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c139481":"import pandas as pd\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.impute import SimpleImputer\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","db28f7e1":"BreastData = load_breast_cancer()\n","0bf6488f":"#X Data\nX = BreastData.data\n\nprint('X shape is ' , X.shape)\nprint('X Features are \\n' , BreastData.feature_names)\n\n#y Data\ny = BreastData.target\n\nprint('y shape is ' , y.shape)\nprint('y Columns are \\n' , BreastData.target_names)\n","1a7c5fda":"\n\nImputedModule = SimpleImputer(missing_values = np.nan, strategy ='mean')\nImputedX = ImputedModule.fit(X)\nX = ImputedX.transform(X)","103b4912":"scaler = StandardScaler(copy=True, with_mean=True, with_std=True)\nX = scaler.fit_transform(X)","ef3f1561":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=44, shuffle =True)","7ef10c84":"RandomForestClassifierModel = RandomForestClassifier(criterion = 'gini',n_estimators=100,max_depth=2,random_state=33) \nRandomForestClassifierModel.fit(X_train, y_train)","f4c98041":"print('RandomForestClassifierModel Train Score is : ' , RandomForestClassifierModel.score(X_train, y_train))\nprint('RandomForestClassifierModel Test Score is : ' , RandomForestClassifierModel.score(X_test, y_test))\nprint('RandomForestClassifierModel features importances are : ' , RandomForestClassifierModel.feature_importances_)\nprint('----------------------------------------------------')","f18ac3c4":"y_pred = RandomForestClassifierModel.predict(X_test)\ny_pred_prob = RandomForestClassifierModel.predict_proba(X_test)\nprint('Predicted Value for RandomForestClassifierModel is : ' , y_pred[:10])\nprint('the real value for RandomForestClassifierModel is  : ' , y_test[:10])\nprint('Prediction Probabilities Value for RandomForestClassifierModel is : ' , y_pred_prob[:10])\n","959224b2":"\nCM = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix is : \\n', CM)\n\n# drawing confusion matrix\nsns.heatmap(CM, center = True)\nplt.show()","212dd86a":"RandomForestClassifierModel = RandomForestClassifier(criterion = 'entropy',n_estimators=100,max_depth=2,random_state=33) \nRandomForestClassifierModel.fit(X_train, y_train)","c641dcc1":"\nprint('RandomForestClassifierModel Train Score is : ' , RandomForestClassifierModel.score(X_train, y_train))\nprint('RandomForestClassifierModel Test Score is : ' , RandomForestClassifierModel.score(X_test, y_test))\nprint('RandomForestClassifierModel features importances are : ' , RandomForestClassifierModel.feature_importances_)\nprint('----------------------------------------------------')","131b0850":"y_pred = RandomForestClassifierModel.predict(X_test)\ny_pred_prob = RandomForestClassifierModel.predict_proba(X_test)\nprint('Predicted Value for RandomForestClassifierModel is : ' , y_pred[:10])\nprint('the real value for RandomForestClassifierModel is  : ' , y_test[:10])\nprint('Prediction Probabilities Value for RandomForestClassifierModel is : ' , y_pred_prob[:10])","591801d1":"#Confusion Matrix with entropy","62a59ec1":"CM = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix is : \\n', CM)\n\n# drawing confusion matrix\nsns.heatmap(CM, center = True)\nplt.show()","4e7059a3":"#Prediction with gini","58f5d9cd":"#load breast cancer data","471dabb5":"Summary \nUsing hyper parameters criterion (entroy) giving more accuracy than criterion (gini) in RandomForestClassifier class with Breast Cancer detection dataset\n","37ebcff8":"#Confusion Matrix with gini","d4880c81":"#check score with gini","bd55ffaf":"#check score with entropy","9ffbaa82":"#Splitting data","3b40318b":"#Import Libraries","f9bd9660":"#Applying RandomForestClassifier Model with criterion gini","a74b9393":"#Prediction with entropy ","9386695e":"#Applying RandomForestClassifier Model with criterion entroy","ef045fd2":"#Standard Scaler for Data","a60870d8":"# Cleaning Data"}}