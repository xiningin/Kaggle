{"cell_type":{"6ecefe23":"code","12edf1fd":"code","c74ac1b6":"code","805ad654":"code","29a1bb4f":"code","e6724a9f":"code","8fbb7d14":"code","125e2355":"code","2a17e0d2":"code","9c8c18e3":"code","82f20de0":"code","90ff8f8c":"code","708cb362":"code","18c6f0a0":"code","44d8220d":"code","9bd7bd91":"code","137fde3f":"code","1169456d":"code","691eabc4":"code","8efa315e":"code","bd3ccc18":"code","7c5f87e3":"code","f6df05ea":"code","0b3881f2":"code","495bdcd9":"code","42c6d9b5":"code","5884d4d1":"code","bfb46799":"code","b693f58d":"code","123f31f2":"code","75c14888":"code","9dc52045":"code","96ad12f2":"code","ac959540":"code","109e52e6":"code","b4a5ee3f":"code","acc5e0f8":"code","25e8fa87":"code","ef9134b8":"code","2b9e2c66":"code","f9742b50":"code","e0c6515e":"code","95057c10":"code","9bd12f38":"code","0f117563":"code","932e471d":"code","91dc50e7":"code","8332162d":"code","91de0666":"code","477b37cc":"code","ca1db2f7":"code","55e6a6ac":"code","7e973e66":"code","9810a6db":"code","edc0fdb0":"code","5fd5d991":"code","8ac9179c":"code","9380749c":"code","4fac33e2":"code","08d39b77":"code","16b2093c":"code","45b22efd":"code","4d96bef9":"code","b668f415":"code","ce5fd737":"code","79fe7666":"markdown"},"source":{"6ecefe23":"#import tools (latter maybe news tools will be needed)\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n","12edf1fd":"df = pd.read_csv(\"..\/input\/insurance\/insurance.csv\")\ndf.shape","c74ac1b6":"#checking all informations about the data set\ndf.head()","805ad654":"df.info()","29a1bb4f":"df[\"sex\"].value_counts()","e6724a9f":"#548 different numbers for BMI(body mass index)\nlen(df[\"bmi\"].value_counts())     ","8fbb7d14":"df[\"children\"].value_counts()","125e2355":"df[\"smoker\"].value_counts()","2a17e0d2":"df[\"region\"].value_counts()","9c8c18e3":"fig, ax =plt.subplots()\nax.hist(df[\"bmi\"])\nax.set(ylabel =\"frequency(total number is 1338)\",\n       xlabel =\"BMI(body max index)\");","82f20de0":"fig, ax =plt.subplots()\nax.hist(df[\"charges\"]);\nax.set(ylabel =\"frequency\",\n       xlabel =\"price(charge) of insurance\");","90ff8f8c":"less_than_10k =[]\nbetween_10k_and_20k =[]\nmore_than_20k =[]\nfor x in df[\"charges\"]:\n    if x<10001:\n        less_than_10k.append(x)\n    if 10000<x<20001:\n        between_10k_and_20k.append(x)\n    if x>20000:\n        more_than_20k.append(x)\nprint(f\"{len(less_than_10k)} is number of people paying less than 10 000$ for insurance and \\n{len(between_10k_and_20k)} is a number of people paying between 10 000$ and 20 000$ for insurance \\n{len(more_than_20k)} is a number people are paying 20 000$ or above for insurance\")\n    ","708cb362":"df.loc[df[\"sex\"]==\"male\"]","18c6f0a0":"#mean (average) price of the health insurance\nround(df.charges.mean(),2)","44d8220d":"only_male_data =df.loc[df[\"sex\"]==\"male\" ]","9bd7bd91":"#average charges for the health insurance for the males\nonly_male_data[\"charges\"].mean()","137fde3f":"only_female_data =df.loc[df[\"sex\"]==\"female\" ]\n\n#average charges for the health insurance for the females\nonly_female_data[\"charges\"].mean()","1169456d":"smoker =df.loc[df[\"smoker\"]==\"yes\" ]\nnonsmoker =df.loc[df[\"smoker\"]==\"no\"]\n","691eabc4":"print(f\"averege smoker cost of the health insurance is {round(smoker.charges.mean(),2)}$, while a nosmoker pays {round(nonsmoker.charges.mean(),2)}$ which is {round(smoker.charges.mean()\/ nonsmoker.charges.mean(),2) } times more expensive\")","8efa315e":"smoker[\"charges\"].mean()","bd3ccc18":"BMI_less_than_average =df.loc[df[\"bmi\"]<30.66 ]\nBMI_abov_than_average =df.loc[df[\"bmi\"]>30.66 ]","7c5f87e3":"print(f\" people with the BMI less than average pays average about {round(BMI_less_than_average.charges.mean(),2)}$ for the health insurance, while people with the BMI above the average pays {round(BMI_abov_than_average.charges.mean(),2)}$\")","f6df05ea":"round(BMI_abov_than_average.charges.mean(),2)","0b3881f2":"fig, ax =plt.subplots()\nax.hist(df[\"age\"])\nax.set(ylabel =\"frequency\",\n       xlabel =\"age(the lowest age group is 18yrs)\");","495bdcd9":"#peparing a data for transforming - strings like male\/female to numbers like 0,1  so our model can undestand them\n#first we need to import a tools\nfrom sklearn.preprocessing import OneHotEncoder\nohe =OneHotEncoder(sparse =False)\n","42c6d9b5":"#test and example\nohe.fit_transform(df[[\"sex\"]])","5884d4d1":"#spliting the data to y variable(charges \/price of the insurance) and X variable(everything else) \nX=df.drop(\"charges\", axis=1)\ny =df[\"charges\"]\ny","bfb46799":"df[\"children\"].value_counts()","b693f58d":"#transforming all of the objects to numerical data via column transformer\nfrom sklearn.compose import make_column_transformer\ncolumn_trans = make_column_transformer(\n    (OneHotEncoder(), [\"sex\", \"smoker\", \"region\"]), remainder =\"passthrough\")","123f31f2":"transX =column_trans.fit_transform(X)","75c14888":"#raw data\npd.DataFrame(transX)","9dc52045":"dfcolumns =[ 'sex female',\"sex male\",'smoker no', \"smoker yes\" ,'region north east', \"region northwest\", \"region southeast\", \"region southwest\", \"age\" ,\"BMI\", \"num of childern\"]","96ad12f2":"# testing model with RandomForestRegressor\nnp.random.seed(42)\nfrom sklearn.ensemble import RandomForestRegressor\nregresor =RandomForestRegressor()","ac959540":"np.random.seed(42)\nX_train,X_test, y_train, y_test = train_test_split(transX, y , test_size=0.2)\nregresor.fit(X_train, y_train)\nregresor.score(X_test, y_test)","109e52e6":"#lets try RidgeRegression Model\nnp.random.seed(42)\nfrom sklearn.linear_model import Ridge\nridge =Ridge()\nridge.fit(X_train,y_train)\nridge.score(X_test, y_test)","b4a5ee3f":"#value of the price that our RandomForestRegressor model has predicted\ny_preds = regresor.predict(X_test)\ny_preds[:10]","acc5e0f8":"np.array(y_test[:10])","25e8fa87":"df.iloc[3]","ef9134b8":"#compare predictions from the truth (y_test is true value, y_preds is predicted value by my model)\n\nfrom sklearn.metrics import mean_absolute_error\nprint(f\" on average charges for health insurance that model predict is about {round(mean_absolute_error(y_test, y_preds),2)} $ from real value that was charged\")","2b9e2c66":"ytst_yprds = pd.DataFrame(data={\"acctual values \": y_test, \"predicted values\":y_preds})\nytst_yprds","f9742b50":"ytst_yprds[\"difference in $\"] =round(ytst_yprds[\"acctual values \"] - ytst_yprds[\"predicted values\"],2)","e0c6515e":"ytst_yprds.head()","95057c10":"ytst_yprds.loc[ytst_yprds[\"difference in $\"]>3000]","9bd12f38":"#time to introduce cross validation score - that splits our model to the 5 smaller models\ncvr2 =cross_val_score(regresor, transX, y, cv=5, scoring=None)\ncvr2","0f117563":"cvr2.mean()","932e471d":"np.random.seed(42)\nregresor.score(X_test, y_test)","91dc50e7":"#using cross validation score to calculate mean absolute error\nnp.random.seed(42)\ncv_mae =cross_val_score(regresor, transX, y , cv =5, scoring =\"neg_mean_absolute_error\")\ncv_mae, cv_mae.mean()","8332162d":"mean_absolute_error(y_test, y_preds)","91de0666":"#parameters that are important to make deicision in our model\nregresor.get_params()","477b37cc":"%time\n#searching for the best parameters so we can improve model\nrf_grid = {\"n_estimators\": np.arange(10,100,10) , \n           \"min_samples_leaf\": np.arange(1,20,2), \"max_depth\" :[None, 3,5,10], \"min_samples_split\": np.arange(2,20,2),\n           \"max_features\" : [0.5, 1, \"sqrt\", \"auto\"]}\n\nrand_search = RandomizedSearchCV(RandomForestRegressor(n_jobs=-1 ,random_state=42),\n                                param_distributions= rf_grid, n_iter=100, cv=5, verbose=True)\n\nrand_search.fit(X_train,y_train)","ca1db2f7":"#best parameters\nrand_search.best_params_","55e6a6ac":"#testing score with new better parameters and getting a new slightly improved model\nnp.random.seed(42)\nrand_search.score(X_test, y_test)","7e973e66":"#making the new model with a new improved parameters \nregresor_mod =RandomForestRegressor(n_estimators=20, min_samples_leaf=9, min_samples_split=6, max_features=\"auto\", max_depth=5)","9810a6db":"np.random.seed(42)\nregresor_mod.fit(X_train,y_train)\nregresor_mod.score(X_test, y_test)","edc0fdb0":"#compare with the first model\nnp.random.seed(42)\nregresor.score(X_test, y_test)","5fd5d991":"#features that had strongest impact on our model\nregresor.feature_importances_","8ac9179c":"regresor_mod.feature_importances_","9380749c":"dfcolumns","4fac33e2":"len(regresor_mod.feature_importances_)","08d39b77":"feat_data = zip(dfcolumns,regresor_mod.feature_importances_  )","16b2093c":"a =dict(feat_data)","45b22efd":"a","4d96bef9":"dataf =pd.DataFrame(a, index=[0])","b668f415":"# this  dataframe is showing us which features had most impact on our model. (for example: user is a smoker or a non-smoker; then body mass index ; then age)\ndataf","ce5fd737":"#visual presentation of the most important features \nfix, ax =plt.subplots()\nax.barh(dataf.columns, regresor_mod.feature_importances_);","79fe7666":"After some effort , this is my first ML model."}}