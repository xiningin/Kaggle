{"cell_type":{"90160f4d":"code","6ef2cfee":"code","911df7c8":"code","2664eca2":"code","8d092fcb":"code","a5135834":"code","80f8a836":"code","bfde2479":"code","df34c5ed":"code","61de1ace":"code","bf8d4421":"code","6b2d2a8e":"code","81e0e585":"code","730796a4":"code","45ab55be":"code","a29708b9":"code","cd0a30c0":"code","d9ca7d41":"code","5dcc4cab":"code","ceeab072":"code","b9a5cfc4":"code","23507810":"code","7b4e73c6":"code","8b71f32d":"code","a4c58470":"code","ccbf7328":"code","716b8dbe":"code","9ccb8968":"code","c164716c":"code","6e2f0a8a":"code","2e66691f":"code","64697afb":"code","bd48a3ea":"code","696b4b99":"code","aac7544c":"code","b8ab364f":"markdown","b200bdfd":"markdown","254ac345":"markdown","917624fe":"markdown","42591811":"markdown","f0cc6727":"markdown","bc04e714":"markdown","debaaf01":"markdown","37bbbb6a":"markdown","4194529d":"markdown","e11a1779":"markdown","acbfa721":"markdown","f919acee":"markdown","9a5eedf9":"markdown","2374d35d":"markdown","7fd8b374":"markdown","718a25af":"markdown","01a165e0":"markdown","8d048502":"markdown","150c06e5":"markdown","2ba6bd65":"markdown","6942d04c":"markdown","13c4f536":"markdown","28318381":"markdown","79a56fd9":"markdown","6a5bd7f2":"markdown","84ffa9ce":"markdown","0f075e2a":"markdown","7cd21edc":"markdown","f44d2b14":"markdown","20f1823e":"markdown","52fdc962":"markdown","7e412a8e":"markdown","ce3120a7":"markdown","62b89ef1":"markdown","92b64c30":"markdown"},"source":{"90160f4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6ef2cfee":"oil = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/oil.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/sample_submission.csv')\nholidays_events = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/holidays_events.csv')\nstores = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/stores.csv')\ntrain_data = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/test.csv')\ntransactions = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/transactions.csv')","911df7c8":"oil = oil.fillna(method = 'pad')\noil = oil.fillna(method = 'bfill')\noil.set_index('date', inplace = True)","2664eca2":"train_data_oil = pd.merge(train_data, oil, on = \"date\", how = 'left')\ntrain_data_oil = train_data_oil.fillna(method = 'pad')\n\ntest_data_oil = pd.merge(test_data, oil, on = \"date\", how = 'left')\ntest_data_oil = test_data_oil.fillna(method = 'pad')","8d092fcb":"train_data_oil_holiday = pd.merge(train_data_oil, holidays_events, on = \"date\", how = 'left')\ntrain_data_oil_holiday = train_data_oil_holiday.fillna('Empty')\n\ntest_data_oil_holiday = pd.merge(test_data_oil, holidays_events, on = \"date\", how = 'left')\ntest_data_oil_holiday = test_data_oil_holiday.fillna('Empty')","a5135834":"train_data_oil_holiday_transactions = pd.merge(train_data_oil_holiday, transactions, on = ['date', 'store_nbr'], how = 'left')\ntrain_data_oil_holiday_transactions['transactions'] = train_data_oil_holiday_transactions['transactions'].fillna(0)\n\ntest_data_oil_holiday_transactions = pd.merge(test_data_oil_holiday, transactions, on = ['date', 'store_nbr'], how = 'left')\ntest_data_oil_holiday_transactions['transactions'] = test_data_oil_holiday_transactions['transactions'].fillna(0)","80f8a836":"train_data_oil_holiday_transactions = pd.merge(train_data_oil_holiday, stores, on = 'store_nbr', how = 'left')\n\ntest_data_oil_holiday_transactions = pd.merge(test_data_oil_holiday, stores, on =  'store_nbr', how = 'left')\n","bfde2479":"def split_year(time):\n  return int(time.split('-')[0])\n\ndef split_month(time):\n  return int(time.split('-')[1])\n\ndef split_day(time):\n  return int(time.split('-')[2])\n\ndef weekend(date):\n  import datetime\n  weekend = []\n  a = pd.to_datetime(date)\n  for i in range(len(a)):\n    if a.iloc[i].weekday() >= 5 :\n      weekend.append(1)\n    else:\n      weekend.append(0)\n  return weekend\n#Weekday\ndef weekday(date):\n    import datetime\n    weekday = []\n    a = pd.to_datetime(date)\n    for i in range(len(a)):\n        weekday.append(a.iloc[i].weekday())\n    return weekday\n\ntrain_data_oil_holiday_transactions['Year'] = train_data_oil_holiday_transactions['date'].apply(split_year)\ntrain_data_oil_holiday_transactions['Month'] = train_data_oil_holiday_transactions['date'].apply(split_month)\ntrain_data_oil_holiday_transactions['Day'] = train_data_oil_holiday_transactions['date'].apply(split_day)\ntrain_data_oil_holiday_transactions['Weekend'] = weekend(train_data_oil_holiday_transactions['date'])\ntrain_data_oil_holiday_transactions['Weekday'] = weekday(train_data_oil_holiday_transactions['date'])\n\ntest_data_oil_holiday_transactions['Year'] = test_data_oil_holiday_transactions['date'].apply(split_year)\ntest_data_oil_holiday_transactions['Month'] = test_data_oil_holiday_transactions['date'].apply(split_month)\ntest_data_oil_holiday_transactions['Day'] = test_data_oil_holiday_transactions['date'].apply(split_day)\ntest_data_oil_holiday_transactions['Weekend'] = weekend(test_data_oil_holiday_transactions['date'])\ntest_data_oil_holiday_transactions['Weekday'] = weekday(test_data_oil_holiday_transactions['date'])","df34c5ed":"train_data_oil_holiday_transactions.rename(columns = {'type_x' : 'holiday_type', 'type_y' : 'shop_type'}, inplace = True)\ntest_data_oil_holiday_transactions.rename(columns = {'type_x' : 'holiday_type', 'type_y' : 'shop_type'}, inplace = True)","61de1ace":"disaster = train_data_oil_holiday_transactions[(train_data_oil_holiday_transactions['date'] >= '2016-04-16') & (train_data_oil_holiday_transactions['date'] <= '2016-10-16')]\ndisaster.sort_values('sales', ascending = False)","bf8d4421":"train_data_oil_holiday_transactions =train_data_oil_holiday_transactions.drop(disaster.index)","6b2d2a8e":"store_nbr_sales_means = train_data_oil_holiday_transactions.groupby('store_nbr').agg({'sales' : 'mean'}).reset_index().sort_values(by='sales', ascending=False)\nstore_nbr_sales_medians = train_data_oil_holiday_transactions.groupby('store_nbr').agg({'sales' : np.median}).reset_index().sort_values(by='sales', ascending=False)\n\nsns.set()\nplt.figure(figsize = (20,5))\nsns.lineplot(x = store_nbr_sales_means.store_nbr, y = store_nbr_sales_means.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.lineplot(x = store_nbr_sales_medians.store_nbr, y = store_nbr_sales_medians.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.title('Store_nbr : Comparsion with Mean and Middle')","81e0e585":"family_sales_mean = train_data_oil_holiday_transactions.groupby('family').agg({\"sales\" : \"mean\"}).reset_index().sort_values(by='sales', ascending=False)[:20]\nfamily_sales_median = train_data_oil_holiday_transactions.groupby('family').agg({\"sales\" : np.median}).reset_index().sort_values(by='sales', ascending=False)[:20]\nsns.set()\nplt.figure(figsize = (20, 5))\nsns.barplot(x = family_sales_mean.family, y = family_sales_mean.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.barplot(x = family_sales_median.family, y = family_sales_median.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.xticks(rotation = 90)\nplt.title('Family : Comparsion with Mean and Middle')","730796a4":"\nonpromotion_sales_means = train_data_oil_holiday_transactions.groupby('onpromotion').agg({'sales' : 'mean'}).reset_index().sort_values(by='sales', ascending=False)\nonpromotion_sales_medians = train_data_oil_holiday_transactions.groupby('onpromotion').agg({'sales' : np.median}).reset_index().sort_values(by='sales', ascending=False)\n\nsns.set()\nplt.figure(figsize = (20,5))\nsns.lineplot(x = onpromotion_sales_means.onpromotion, y = onpromotion_sales_means.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.lineplot(x = onpromotion_sales_medians.onpromotion, y = onpromotion_sales_medians.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.title('Hoilday_type : Comparsion with Mean and Middle')","45ab55be":"\ndcoilwtico_sales_means = train_data_oil_holiday_transactions.groupby('dcoilwtico').agg({'sales' : 'mean'}).reset_index().sort_values(by='sales', ascending=False)\ndcoilwtico_sales_medians = train_data_oil_holiday_transactions.groupby('dcoilwtico').agg({'sales' : np.median}).reset_index().sort_values(by='sales', ascending=False)\n\nsns.set()\nplt.figure(figsize = (20,5))\nsns.lineplot(x = dcoilwtico_sales_means.dcoilwtico, y = dcoilwtico_sales_means.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.lineplot(x = dcoilwtico_sales_medians.dcoilwtico, y = dcoilwtico_sales_medians.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.title('Dcoilwtico : Comparsion with Mean and Middle')\nplt.show()\nplt.clf()","a29708b9":"holiday_type_sales_means = train_data_oil_holiday_transactions.groupby('holiday_type').agg({'sales' : 'mean'}).reset_index().sort_values(by='sales', ascending=False)\nholiday_type_sales_medians = train_data_oil_holiday_transactions.groupby('holiday_type').agg({'sales' : np.median}).reset_index().sort_values(by='sales', ascending=False)\n\nsns.set()\nplt.figure(figsize = (20,5))\nsns.barplot(x = holiday_type_sales_means.holiday_type, y = holiday_type_sales_means.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.barplot(x = holiday_type_sales_medians.holiday_type, y = holiday_type_sales_medians.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.title('Hoilday_type : Comparsion with Mean and Middle')","cd0a30c0":"sns.set()\nplt.figure(figsize = (20, 5))\nlocale_sales_mean = train_data_oil_holiday_transactions.groupby('locale').agg({\"sales\" : \"mean\"}).reset_index().sort_values(by='sales', ascending=False)[:20]\nlocale_sales_median = train_data_oil_holiday_transactions.groupby('locale').agg({\"sales\" : np.median}).reset_index().sort_values(by='sales', ascending=False)[:20]\nsns.barplot(x = locale_sales_mean.locale, y = locale_sales_mean.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.barplot(x = locale_sales_median.locale, y = locale_sales_median.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.xticks(rotation = 90)\nplt.title('locale Comparsion with Mean and Middle')","d9ca7d41":"sns.set()\nplt.figure(figsize = (20, 5))\nlocale_name_sales_mean = train_data_oil_holiday_transactions.groupby('locale_name').agg({\"sales\" : \"mean\"}).reset_index().sort_values(by='sales', ascending=False)[:20]\nlocale_name_sales_median = train_data_oil_holiday_transactions.groupby('locale_name').agg({\"sales\" : np.median}).reset_index().sort_values(by='sales', ascending=False)[:20]\nsns.barplot(x = locale_name_sales_mean.locale_name, y = locale_name_sales_mean.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.barplot(x = locale_name_sales_median.locale_name, y = locale_name_sales_median.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.xticks(rotation = 90)\nplt.title('locale_name Comparsion with Mean and Middle')","5dcc4cab":"sns.set()\nplt.figure(figsize = (20, 5))\ndescription_sales_mean = train_data_oil_holiday_transactions.groupby('description').agg({\"sales\" : \"mean\"}).reset_index().sort_values(by='sales', ascending=False)[:20]\ndescription_sales_median = train_data_oil_holiday_transactions.groupby('description').agg({\"sales\" : np.median}).reset_index().sort_values(by='sales', ascending=False)[:20]\nsns.barplot(x = description_sales_mean.description, y = description_sales_mean.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.barplot(x = description_sales_median.description, y = description_sales_median.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.xticks(rotation = 90)\nplt.title('description Comparsion with Mean and Middle')","ceeab072":"sns.set()\nplt.figure(figsize = (20, 5))\ntransferred_mean = train_data_oil_holiday_transactions.groupby('transferred').agg({\"sales\" : \"mean\"}).reset_index().sort_values(by='sales', ascending=False)[:20]\ntransferred_median = train_data_oil_holiday_transactions.groupby('transferred').agg({\"sales\" : np.median}).reset_index().sort_values(by='sales', ascending=False)[:20]\nsns.barplot(x = transferred_mean.transferred, y = transferred_mean.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.barplot(x = transferred_median.transferred, y = transferred_median.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.xticks(rotation = 90)\nplt.title('transferred Comparsion with Mean and Middle')","b9a5cfc4":"sns.set()\nplt.figure(figsize = (20, 5))\ncity_mean = train_data_oil_holiday_transactions.groupby('city').agg({\"sales\" : \"mean\"}).reset_index().sort_values(by='sales', ascending=False)[:20]\ncity_median = train_data_oil_holiday_transactions.groupby('city').agg({\"sales\" : np.median}).reset_index().sort_values(by='sales', ascending=False)[:20]\nsns.barplot(x = city_mean.city, y = city_mean.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.barplot(x = city_median.city, y = city_median.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.xticks(rotation = 90)\nplt.title('city Comparsion with Mean and Middle')","23507810":"sns.set()\nplt.figure(figsize = (20, 5))\nstate_mean = train_data_oil_holiday_transactions.groupby('state').agg({\"sales\" : \"mean\"}).reset_index().sort_values(by='sales', ascending=False)[:20]\nstate_median = train_data_oil_holiday_transactions.groupby('state').agg({\"sales\" : np.median}).reset_index().sort_values(by='sales', ascending=False)[:20]\nsns.barplot(x = state_mean.state, y = state_mean.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.barplot(x = state_median.state, y = state_median.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.xticks(rotation = 90)\nplt.title('state Comparsion with Mean and Middle')","7b4e73c6":"sns.set()\nplt.figure(figsize = (20, 5))\nshop_type_mean = train_data_oil_holiday_transactions.groupby('shop_type').agg({\"sales\" : \"mean\"}).reset_index().sort_values(by='sales', ascending=False)[:20]\nshop_type_median = train_data_oil_holiday_transactions.groupby('shop_type').agg({\"sales\" : np.median}).reset_index().sort_values(by='sales', ascending=False)[:20]\nsns.barplot(x = shop_type_mean.shop_type, y = shop_type_mean.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.barplot(x = shop_type_median.shop_type, y = shop_type_median.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.xticks(rotation = 90)\nplt.title('state Comparsion with Mean and Middle')","8b71f32d":"\ncluster_sales_means = train_data_oil_holiday_transactions.groupby('cluster').agg({'sales' : 'mean'}).reset_index().sort_values(by='sales', ascending=False)\ncluster_sales_medians = train_data_oil_holiday_transactions.groupby('cluster').agg({'sales' : np.median}).reset_index().sort_values(by='sales', ascending=False)\n\nsns.set()\nplt.figure(figsize = (20,5))\nsns.lineplot(x = cluster_sales_means.cluster, y = cluster_sales_means.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.lineplot(x = cluster_sales_medians.cluster, y = cluster_sales_medians.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.title('cluster : Comparsion with Mean and Middle')\nplt.show()\nplt.clf()","a4c58470":"\nYear_sales_means = train_data_oil_holiday_transactions.groupby('Year').agg({'sales' : 'mean'}).reset_index().sort_values(by='sales', ascending=False)\nYear_sales_medians = train_data_oil_holiday_transactions.groupby('Year').agg({'sales' : np.median}).reset_index().sort_values(by='sales', ascending=False)\n\nsns.set()\nplt.figure(figsize = (20,5))\nsns.barplot(x = Year_sales_means.Year, y = Year_sales_means.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.barplot(x = Year_sales_medians.Year, y = Year_sales_medians.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.title('Year : Comparsion with Mean and Middle')\nplt.show()\nplt.clf()","ccbf7328":"Month_sales_means = train_data_oil_holiday_transactions.groupby('Month').agg({'sales' : 'mean'}).reset_index().sort_values(by='sales', ascending=False)\nMonth_sales_medians = train_data_oil_holiday_transactions.groupby('Month').agg({'sales' : np.median}).reset_index().sort_values(by='sales', ascending=False)\n\nsns.set()\nplt.figure(figsize = (20,5))\nsns.barplot(x = Month_sales_means.Month, y = Month_sales_means.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.barplot(x = Month_sales_medians.Month, y = Month_sales_medians.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.title('Month : Comparsion with Mean and Middle')\nplt.show()\nplt.clf()","716b8dbe":"Day_sales_means = train_data_oil_holiday_transactions.groupby('Day').agg({'sales' : 'mean'}).reset_index().sort_values(by='sales', ascending=False)\nDay_sales_medians = train_data_oil_holiday_transactions.groupby('Day').agg({'sales' : np.median}).reset_index().sort_values(by='sales', ascending=False)\n\nsns.set()\nplt.figure(figsize = (20,5))\nsns.barplot(x = Day_sales_means.Day, y = Day_sales_means.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.barplot(x = Day_sales_medians.Day, y = Day_sales_medians.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.title('Day : Comparsion with Mean and Middle')\nplt.show()\nplt.clf()","9ccb8968":"Weekend_sales_means = train_data_oil_holiday_transactions.groupby('Weekend').agg({'sales' : 'mean'}).reset_index().sort_values(by='sales', ascending=False)\nWeekend_sales_medians = train_data_oil_holiday_transactions.groupby('Weekend').agg({'sales' : np.median}).reset_index().sort_values(by='sales', ascending=False)\n\nsns.set()\nplt.figure(figsize = (20,5))\nsns.barplot(x = Weekend_sales_means.Weekend, y = Weekend_sales_means.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.barplot(x = Weekend_sales_medians.Weekend, y = Weekend_sales_medians.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.title('Weekend : Comparsion with Mean and Middle')\nplt.show()\nplt.clf()","c164716c":"Weekday_sales_means = train_data_oil_holiday_transactions.groupby('Weekday').agg({'sales' : 'mean'}).reset_index().sort_values(by='sales', ascending=False)\nWeekday_sales_medians = train_data_oil_holiday_transactions.groupby('Weekday').agg({'sales' : np.median}).reset_index().sort_values(by='sales', ascending=False)\n\nsns.set()\nplt.figure(figsize = (20,5))\nsns.barplot(x = Weekday_sales_means.Weekday, y = Weekday_sales_means.sales, color = 'r', label = 'Means', alpha = 0.3)\nsns.barplot(x = Weekday_sales_medians.Weekday, y = Weekday_sales_medians.sales, color = 'g', label = 'Middle', alpha = 0.3)\nplt.legend()\nplt.title('Weekday : Comparsion with Mean and Middle')\nplt.show()\nplt.clf()","6e2f0a8a":"train_data_oil_holiday_transactions = train_data_oil_holiday_transactions.drop(columns = ['id', 'date', 'transferred', 'Day', 'Weekday'])\ntest_data_oil_holiday_transactions = test_data_oil_holiday_transactions.drop(columns = ['id', 'date', 'transferred', 'Day', 'Weekday'])","2e66691f":"from sklearn.preprocessing import LabelEncoder\n\nencoder_family = LabelEncoder()\ntrain_data_oil_holiday_transactions['family'] = encoder_family.fit_transform(train_data_oil_holiday_transactions['family'])\ntest_data_oil_holiday_transactions['family'] = encoder_family.transform(test_data_oil_holiday_transactions['family'])\n\nencoder_type = LabelEncoder()\ntrain_data_oil_holiday_transactions['holiday_type'] = encoder_type.fit_transform(train_data_oil_holiday_transactions['holiday_type'])\ntest_data_oil_holiday_transactions['holiday_type'] = encoder_type.transform(test_data_oil_holiday_transactions['holiday_type'])\n\nencoder_locale = LabelEncoder()\ntrain_data_oil_holiday_transactions['locale'] = encoder_locale.fit_transform(train_data_oil_holiday_transactions['locale'])\ntest_data_oil_holiday_transactions['locale'] = encoder_locale.transform(test_data_oil_holiday_transactions['locale'])\n\nencoder_description = LabelEncoder()\ntrain_data_oil_holiday_transactions['description'] = encoder_description.fit_transform(train_data_oil_holiday_transactions['description'])\ntest_data_oil_holiday_transactions['description'] = encoder_description.transform(test_data_oil_holiday_transactions['description'])\n\nencoder_locale_name = LabelEncoder()\ntrain_data_oil_holiday_transactions['locale_name'] = encoder_locale_name.fit_transform(train_data_oil_holiday_transactions['locale_name'])\ntest_data_oil_holiday_transactions['locale_name'] = encoder_locale_name.transform(test_data_oil_holiday_transactions['locale_name'])\n\nencoder_city = LabelEncoder()\ntrain_data_oil_holiday_transactions['city'] = encoder_city.fit_transform(train_data_oil_holiday_transactions['city'])\ntest_data_oil_holiday_transactions['city'] = encoder_city.transform(test_data_oil_holiday_transactions['city'])\n\nencoder_state = LabelEncoder()\ntrain_data_oil_holiday_transactions['state'] = encoder_state.fit_transform(train_data_oil_holiday_transactions['state'])\ntest_data_oil_holiday_transactions['state'] = encoder_state.transform(test_data_oil_holiday_transactions['state'])\n\nencoder_shop_type = LabelEncoder()\ntrain_data_oil_holiday_transactions['shop_type'] = encoder_shop_type.fit_transform(train_data_oil_holiday_transactions['shop_type'])\ntest_data_oil_holiday_transactions['shop_type'] = encoder_shop_type.transform(test_data_oil_holiday_transactions['shop_type'])","64697afb":"data = train_data_oil_holiday_transactions.drop(columns = 'sales')\ntarget = train_data_oil_holiday_transactions['sales']\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(data, target, train_size = 0.8, random_state = 5)","bd48a3ea":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nXG = xgb.XGBRegressor(objective = 'reg:squarederror' , learning_rate = 0.1,\n                max_depth = 3, n_estimators = 500).fit(x_train, y_train)\ny_pred_XG = XG.predict(x_test)\ndef relu(x):\n    relu = []\n    for i in x: \n        if i < 0:\n            relu.append(0)\n        else:\n            relu.append(i)\n    return relu\n\nplt.scatter(y_test, relu(y_pred_XG))\nplt.plot([10000*x for x in range(10)], [10000*x for x in range(10)], color = 'r')\nplt.xlabel(\"Reality\")\nplt.ylabel(\"Predicted\")\nplt.title('CatBoostRegressor')\nplt.show()\nplt.clf()\nprint(XG.score(x_test, y_test))","696b4b99":"sub = XG.predict(test_data_oil_holiday_transactions)\nsample_submission['sales'] = relu(sub)\nsample_submission.to_csv('submission.csv', index=False)","aac7544c":"sample_submission","b8ab364f":"## 3-8. Description features relate the sales means \/ middle","b200bdfd":"## 3-2. Family features relate the sales means \/ middle","254ac345":"## 3-15. Month features relate the sales means \/ middle","917624fe":"## 3-14. Year features relate the sales means \/ middle","42591811":"## 3-11. State features relate the sales means \/ middle","f0cc6727":"# 1. Read the Data","bc04e714":"## 2-2. Holiday_events preprocessing and merge to train_data \/ test_data","debaaf01":"## 3-18. Weekday features relate the sales means \/ middle","37bbbb6a":"## 3-17. Weekend features relate the sales means \/ middle","4194529d":"## 3-5. Holiday_type features relate the sales means \/ middle","e11a1779":"# 2. Merge the total features to train_data \/ test_data","acbfa721":"# 4. Submission","f919acee":"## 3-1. Store_nbr features relate the sales means \/ middle","9a5eedf9":"### The dcoilwtico is powerful influence the sales means \/ middle","2374d35d":"## 2-3. Transactions preprocessing and merge to train_data \/ test_data","7fd8b374":"### The different stroe_nbr is powerful influence the sales, specially the 40~ 50 and 0~5","718a25af":"## 3-13. Cluster features relate the sales means \/ middle","01a165e0":"## 3-7. Locale_name features relate the sales means \/ middle","8d048502":"## 3-10. City features relate the sales means \/ middle","150c06e5":"## 2-5. Year, Month, Day, weekend, weekdays columns merge to train_data \/ test_data","2ba6bd65":"# 6. XGBoostRegressor","6942d04c":"# 5. Feature's encoder by LabelEncoder","13c4f536":"## 3-9. Transferred features relate the sales means \/ middle","28318381":"### The GROCERY_I , BEVERAGES, CLEANING, DAIRY is more powerfel influence the sales mean \/ middle","79a56fd9":"## 3-16. Day features relate the sales means \/ middle","6a5bd7f2":"## 2-4. Store preprocessing and merge to train_data \/ test_data","84ffa9ce":"### The onpromotion feature is influence the sales","0f075e2a":"## 3-3. Onpromotion features relate the sales means \/ middle","7cd21edc":"# 3. EDA - The relation between each feature and sale's means \/ medians","f44d2b14":"# 4. Data Feature's drop","20f1823e":"## 3-6. Locale features relate the sales means \/ middle","52fdc962":"*The sales is too high in some days , if I don't want these data to influence the Model, I could delete these data*","7e412a8e":"## 3-12. Shop_type features relate the sales means \/ middle","ce3120a7":"## 3-0. Discuss the disaster day 2016-04-16 to 2016-10-16","62b89ef1":"## 3-4. Dcoilwtico features relate the sales means \/ middle","92b64c30":"## 2-1. Oil preprocessing and merge to train_data \/ test_data"}}