{"cell_type":{"2098bb92":"code","64f76d63":"code","3c4b9a2a":"code","8006a7f1":"code","c5a032b6":"code","e391badd":"code","2fc5e5a0":"code","f8533086":"code","e57fe1ce":"code","3b8a6c42":"code","7431c35b":"code","d7844bb4":"code","91f291a6":"code","6d5277e5":"code","ae5e3b79":"code","e565e36c":"code","68e8554b":"code","fc7ff2df":"code","448eee29":"code","8efe0d4b":"code","5905fd28":"code","d865f3f9":"code","96261418":"code","4d69e0a9":"markdown","c2678fdc":"markdown","29dc9226":"markdown","23edd3ba":"markdown","af5ee702":"markdown","a10301a6":"markdown","ca2ee72f":"markdown","d028f8de":"markdown","8473b277":"markdown","d20ec2a3":"markdown","6ce9bbe9":"markdown","419b234b":"markdown","0eb464df":"markdown","a889ec26":"markdown","72c8c734":"markdown","746a8c93":"markdown","a4108285":"markdown"},"source":{"2098bb92":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","64f76d63":"df = pd.read_csv('..\/input\/500-greatest-songs-of-all-time\/Top 500 Songs.csv', encoding='ISO-8859-2')\ndf.head()","3c4b9a2a":"print(df.shape)\ndf.columns","8006a7f1":"df.isnull().sum()","c5a032b6":"df[df.isnull().any(axis=1)]","e391badd":"df.streak.unique()","2fc5e5a0":"# Removing letters from the strings in the Streak column\ndf['streak'].replace(regex=True, inplace=True, to_replace=r'\\D', value=r'')\n\ndf.streak.unique()        ","f8533086":"# Replacing empty strings and missing values with 0's\ndf['streak'].replace({'': 0}, inplace=True)\ndf['streak'] = df['streak'].replace(np.nan, 0)\n\n# Converting Streak column into integer\ndf['streak'] = pd.to_numeric(df['streak'])\ndf.streak.unique()","e57fe1ce":"# Changing the index\ndf.index = df.index + 1\n\n# Adding a new column for the rank\ndf['rank'] = df.index\ndf.head()","3b8a6c42":"# Dropping some columns that I am not going to use.\ndf.drop(['description', 'appears on', 'position'], axis=1, inplace=True)\ndf.head()","7431c35b":"number_of_songs = df.artist.value_counts() \nprint(number_of_songs[number_of_songs > 3].count())","d7844bb4":"fig, ax = plt.subplots(figsize=(10,10))\nsns.countplot(y='artist', data=df, order=df['artist'].value_counts().iloc[:33].index)\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n\nplt.xlabel(\"Song Count\")\nplt.ylabel(\"\")\nplt.title(\"Artists That Have More Than 3 Songs On The List\", fontsize=18)\nplt.show()","91f291a6":"df[['month', 'year']] = df['released'].str.split(\", \", expand=True)\ndf.head()","6d5277e5":"df.info()","ae5e3b79":"# Converting Year column into integer\ndf['year'] = pd.to_numeric(df['year'])\ndf.head()","e565e36c":"songs_per_year = df.year.value_counts()\nsongs_per_year","68e8554b":"fig, ax = plt.subplots(1, figsize=(16, 8))\nsns.distplot(df['year'], kde=False, color='g')\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nplt.ylabel('Number of Songs')\nplt.title('Histogram Showing Which Decade Were Most Songs Released In', fontsize=18)\nplt.show()","fc7ff2df":"songs_per_writer = df.writers.value_counts()\nprint(songs_per_writer[songs_per_writer>3])","448eee29":"df.month.unique()","8efe0d4b":"for s in df['month']:\n    if 'Jan' in s:\n        df['month'].replace({s: 'January'}, inplace=True)\n    elif 'Feb' in s:\n        df['month'].replace({s: 'February'}, inplace=True)\n    elif 'Mar' in s:\n        df['month'].replace({s: 'March'}, inplace=True)        \n    elif 'Apr' in s:\n        df['month'].replace({s: 'April'}, inplace=True)        \n    elif 'May' in s:\n        df['month'].replace({s: 'May'}, inplace=True)        \n    elif 'Jun' in s:\n        df['month'].replace({s: 'June'}, inplace=True)        \n    elif 'Jul' in s:\n        df['month'].replace({s: 'July'}, inplace=True)        \n    elif 'Aug' in s:\n        df['month'].replace({s: 'August'}, inplace=True)        \n    elif 'Sep' in s:\n        df['month'].replace({s: 'September'}, inplace=True)        \n    elif 'Oct' in s:\n        df['month'].replace({s: 'October'}, inplace=True)\n    elif 'Nov' in s:\n        df['month'].replace({s: 'November'}, inplace=True)        \n    elif 'Dec' in s:\n        df['month'].replace({s: 'December'}, inplace=True)        \n        \n        \n        ","5905fd28":"df.month.unique()","d865f3f9":"#songs_per_month = df.month.value_counts()\n#songs_per_month\n\nfig, ax = plt.subplots(1, figsize=(16, 8))\nsns.countplot(y='month', data=df, color='g', alpha=0.2)\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nplt.ylabel(' ')\nplt.xlabel('Song Count')\n\nplt.title('Histogram Showing Which Month Were Most Songs Released In', fontsize=18)\nplt.show()","96261418":"from PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS\n\ntext = \" \".join(str(song) for song in df.title)\n\n# Create a mask to use as a shape for the wordcloud\nmask = np.array(Image.open('..\/input\/ovalshape\/oval_shape.png'))\n\n# Final version with updated stopwords and shape\nstopwords = set(STOPWORDS)\nstopwords.update(['Dont', 'Da', 'B', 'Aint', 'Got', 'Lotta', 'O', 'Im', 'Bo', 'Ya'])\nwordcloud = WordCloud(max_font_size=130, max_words=200, background_color=\"white\", stopwords=stopwords, \n                      mask=mask, colormap='Paired', width=mask.shape[1], height=mask.shape[0]).generate(text)\nplt.figure(figsize=(12,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","4d69e0a9":"Woah! Clearly the 60s have revolutionized the music industry according to Rolling Stones!","c2678fdc":"### 7. Decade with most songs\n\n<a id='year'><\/a>\n\nIn which decade were most of the best songs released? In order to answer that question we want to have a separte column for year.","29dc9226":"### 3. Dealing with missing values\n\n<a id='nan'><\/a>","23edd3ba":"We can see that months are written down in many different ways. We change them into the standard month names.\n\n*p.s. There probably is a better way to do that, any advice is appreciated.*","af5ee702":"### 5. Drop unnecessary columns\n\n<a id='drop'><\/a>","a10301a6":"### 4. Changing the index\n\n<a id='index'><\/a>\n\n\nWe assume for the sake of analysis that the list is ordered and the first song on the list is actually the \"ggreatest song of all time\" according to the magazine, i.e. it is a number 1 song.\nTherefore we change the indexing of the items in the df, by starting the indexing with 1 instead of 0.\nWe can also add a column which will show the position of the song in the list of 500 greatest songs.","ca2ee72f":"### 9. Exploring the month column\n\n<a id='month'><\/a>","d028f8de":"If we want to get some statistical information from the Streak column we need to clean it up. \nFirst we remove the \" week\" part of the strings, then we replace missing values with 0, and lastly we transform the dtype of the column into numeric.","8473b277":"Now this measure is obviously completely random, and no month is a clear 'loser' in a sense.","d20ec2a3":"Surprisignly there are quite a lot of missing values in the dataset. The check revealed that there are about 20% of songs that have unidentified chart positions. We'll explore the rows with null values to see if we find a reason for it.  ","6ce9bbe9":"### 6. Artists with most songs on the list\n\n<a id='artists'><\/a>\n\nNow we'll see which artists have most songs on the list.\nExploring only artists that have more than 3 songs.","419b234b":"### 8. Writers with most songs on the list\n\n<a id='writers'><\/a>\n\nExploring those with more than 3 songs on the list.","0eb464df":"### 2. Shape\n\n<a id='shape'><\/a>\n\nWe know that there supposed to be information about 500 songs in this dataset, which would equal to 500 rows. We check the shape of the df to make sure it is what we expect it to be.\nWe also display all of the columns names.","a889ec26":"# Table of Contents\n\n1. [Introduction to the dataset](#intro)\n2. [Shape](#shape)\n3. [Dealing with missing values](#nan)\n4. [Changing the index](#index)\n5. [Drop unnecessary columns](#drop)\n6. [Artists with most songs on the list](#artists)\n7. [Decade with most songs](#year)\n8. [Writers with most songs on the list](#writers)\n9. [Exploring the month column](#month)\n10. [Wordcloud](#cloud)\n","72c8c734":"### 10. Wordcloud\n\n<a id='cloud'><\/a>\n\nI got this idea of making a wordcloud of most used words in the song titles from Marilia Prata https:\/\/www.kaggle.com\/mpwolke\/500-greatest-songs. That was a neat idea to see what the greatest songs of all time are about.","746a8c93":"### 1. Introduction to the dataset\n\n<a id='intro'><\/a>\n\n*The 500 Greatest Songs of All Time* was the cover story of a special issue of **Rolling Stone** magazine, issue number 963, published in December 2004.\n\nSources: \n\n[500 greatest songs - original article](https:\/\/www.rollingstone.com\/music\/music-lists\/500-greatest-songs-of-all-time-151127\/)\n\n[500 greatest songs - wiki](https:\/\/en.wikipedia.org\/wiki\/Rolling_Stone%27s_500_Greatest_Songs_of_All_Time)\n","a4108285":"Looking at the unique values of the \"streak\" column helped us to unveil that some of the reason as to why 20% of the songs miss chart positions are:\n- The song did not chart\n- The song is not a single\n- The song predates charts appearance"}}