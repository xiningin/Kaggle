{"cell_type":{"35f17050":"code","7162c466":"code","648b1b03":"code","644bf203":"code","d894bdac":"code","a73d313a":"code","0b966130":"code","ff9daf60":"code","f8c480f8":"code","15cd6f60":"code","79e62bf6":"code","27cf199c":"code","906c2a11":"code","be394411":"code","935dd391":"code","f27a34f3":"code","8812cc76":"code","948e4dda":"code","4947d8ca":"code","9b4ea821":"code","1326a251":"code","bffe3cc7":"code","96e12bb4":"code","96f5dd8a":"code","97e8e8c4":"code","ccc36766":"code","495f611d":"code","ee116c86":"code","595fe3ec":"code","e5b81293":"code","a7df2fac":"code","f93b8c22":"code","b2306b0c":"code","c3f1e91d":"code","78818f12":"code","9aa4fbd6":"code","36fff677":"code","58095438":"code","0fd782bd":"code","00144652":"code","2105b4fd":"code","4d26b84d":"code","15e21c85":"code","be603e9d":"code","d0112443":"code","74326311":"code","ec38c671":"code","8d01095f":"code","c6a10f65":"code","2eae5538":"code","e1ecd948":"code","cd9e87bc":"code","cc2a22d9":"markdown","5aa3cea2":"markdown","fc7dd5c2":"markdown","5c1a3554":"markdown","6aa97e3e":"markdown","ea951cfa":"markdown","110e32e0":"markdown","94b30e67":"markdown","635c8c5a":"markdown","10533ed2":"markdown","70fba5d6":"markdown","17e8b8cf":"markdown","f154d00b":"markdown","c66483fc":"markdown","46d0e20b":"markdown","881675ea":"markdown","3e9f487f":"markdown","82d63753":"markdown","84a957bb":"markdown","ef3e0feb":"markdown","63db6578":"markdown","994eda5a":"markdown","3df87ba0":"markdown","a65e3f11":"markdown","717036c2":"markdown","b9d3c341":"markdown","81b26ed5":"markdown","b20fdba4":"markdown","92817ce9":"markdown","8ed66320":"markdown","ce36a8fb":"markdown","9393b947":"markdown","2e285c0d":"markdown","d81967e6":"markdown","29fc8abe":"markdown","7ac582c3":"markdown","8155291f":"markdown","64ce68a1":"markdown","aa2de46b":"markdown","07561f64":"markdown"},"source":{"35f17050":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7162c466":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport datetime\nimport calendar\nimport seaborn as sns\nimport squarify","648b1b03":"def convStrDate(cadena):\n    cadena = str(cadena)\n    fec = cadena[0:4]+'-'+cadena[4:7]+'-01'\n    return fec","644bf203":"def add_months(date, months):\n    month = date.month - 1 + months\n    year = date.year + month \/\/ 12\n    month = month % 12 + 1\n    day = min(date.day, calendar.monthrange(year,month)[1])\n    return datetime.date(year, month, day)","d894bdac":"dataFramePre = pd.read_csv(\"\/kaggle\/input\/02databaseconsumo\/02dataBaseConsumo.txt\",delimiter='|', encoding='latin-1')\ndataFramePre = dataFramePre.drop(['grupoGiro'],axis=1)\ndataFramePre.head()","a73d313a":"# Creamos un campo de fecha para que nos ayudar a tratar la agregaci\u00f3n i disminuci\u00f3n de meses\ndataFrame = pd.DataFrame()\ndataFrame = dataFramePre.copy()\n\ndataFrame['fecha'] = dataFramePre['codmes'].apply(convStrDate)\ndataFrame['fecha'] = pd.to_datetime(dataFrame['fecha'])\ndataFrame.head()","0b966130":"dataFrame.info()","ff9daf60":"# Creamos Base de Datos con las variables de inter\u00e9s:\ndbGroup = dataFrame.groupby(['fecha','cliente']).agg({'trx':sum,'monto':sum})\ndbGroup['ind'] = 1\ndbGroup = dbGroup.reset_index()","f8c480f8":"dbGroup.head()","15cd6f60":"# Fecha m\u00ednima y m\u00e1ximo:\nprint(dbGroup['fecha'].min())\nprint(dbGroup['fecha'].max())","79e62bf6":"# Filtramos la cosecha para el universo:\ndbUniv = dbGroup[dbGroup['fecha']=='2017-10-01']\ndbUniv = dbUniv.rename(columns={'fecha':'periodo'})\ndbUniv = dbUniv[['periodo','cliente']]\ndbUniv.head()","27cf199c":"# Incluiremos fechas de los 3 \u00faltimos meses \nfor i in range(3):\n    dbUniv['fec_'+str(i+1)] =\\\n    pd.to_datetime(dbUniv.apply(lambda x: add_months(x['periodo'],-(i+1)),axis=1))\ndbUniv.head()","906c2a11":"dbFinal = pd.merge(dbUniv,dbGroup[['fecha','cliente','monto','trx','ind']], how='left',\n                   left_on=['fec_1','cliente'],right_on = ['fecha','cliente'])\ndbFinal.head()","be394411":"dbFinal = pd.merge(dbFinal,dbGroup[['fecha','cliente','monto','trx','ind']], how='left',\n                   left_on=['fec_2','cliente'],right_on = ['fecha','cliente'])\ndbFinal.head()","935dd391":"dbFinal = pd.merge(dbFinal,dbGroup[['fecha','cliente','monto','trx','ind']], how='left',\n                   left_on=['fec_3','cliente'],right_on = ['fecha','cliente'])\ndbFinal.head()","f27a34f3":"dbFinal['M_1'] = dbFinal['ind_x'].apply(lambda x: 1 if x==1 else 0)\ndbFinal['monto_1'] = dbFinal['monto_x'].fillna(0)\n\ndbFinal['M_2'] = dbFinal['ind_y'].apply(lambda x: 1 if x==1 else 0)\ndbFinal['monto_2'] = dbFinal['monto_y'].fillna(0)\n\ndbFinal['M_3'] = dbFinal['ind'].apply(lambda x: 1 if x==1 else 0)\ndbFinal['monto_3'] = dbFinal['monto'].fillna(0)\n\ndbFinal.head()","8812cc76":"dbFinal = dbFinal.fillna({'trx_x': 0})\ndbFinal = dbFinal.fillna({'trx_y': 0})\ndbFinal = dbFinal.fillna({'trx': 0})","948e4dda":"dbFinal['trxSum'] = dbFinal['trx_x'] + dbFinal['trx_y'] + dbFinal['trx']\ndbFinal.head()","4947d8ca":"dbFinal = dbFinal[['periodo','cliente','M_1','M_2','M_3','monto_1','monto_2','monto_3','trxSum']]\ndbFinal.head()","9b4ea821":"dbFinal[dbFinal['trxSum']==0]","1326a251":"dbFinal[dbFinal['trxSum']!=0]","bffe3cc7":"dbFinal['frec'] = dbFinal['M_1']+dbFinal['M_2']+dbFinal['M_3']\ndbFinal['rec'] = np.where(dbFinal['M_1']==1,3,np.where(dbFinal['M_2']==1,2,np.where(dbFinal['M_3']==1,1,0)))\ndbFinal['monto3um'] = np.where(dbFinal['frec']>0,\n                               (dbFinal['monto_1']+dbFinal['monto_2']+dbFinal['monto_3'])\/dbFinal['frec'],0)","96e12bb4":"dbFinal.head()","96f5dd8a":"sns.scatterplot(data=dbFinal, x=\"trxSum\", y=\"monto3um\")\nplt.show()","97e8e8c4":"print('********Correlaci\u00f3n de Pearson********')\nprint(dbFinal[['trxSum','monto3um']].corr())\nprint('****Correlaci\u00f3n de Pearson acotando los valores extremos****')\nprint(dbFinal[(dbFinal['monto3um']<40000) & (dbFinal['trxSum']<100)][['trxSum','monto3um']].corr())","ccc36766":"from kmodes.kmodes import KModes\nfrom sklearn import preprocessing","495f611d":"dbPrueba = pd.DataFrame()\ndbPrueba = dbFinal[['trxSum','monto3um']].copy()\ndbPrueba","ee116c86":"cost=[]\ncluster=[]\n\nfor i in list(range(1,20)):\n    model = KModes(n_clusters=i, init='Cao', n_init=1, verbose=1)\n    cluster.append(model.fit_predict(dbPrueba))\n    cost.append(model.cost_)\nprint(model.cluster_centroids_)","595fe3ec":"rango=np.array(range(1,len(cost)+1))\nplt.plot(rango,cost)\nplt.title('Evoluci\u00f3n de Cluster Vs Costo')\nplt.xlabel('nro de clusters')\nplt.show()","e5b81293":"n_cluster = 6\ndbPrueba['cluster'] = cluster[n_cluster-1]\ndbPrueba.head()","a7df2fac":"sns.scatterplot(data=dbPrueba, x=\"trxSum\", y=\"monto3um\",\n                hue='cluster', palette=\"deep\", alpha=1,\n                style='cluster')\nplt.show()","f93b8c22":"sns.scatterplot(data=dbPrueba, x=\"trxSum\", y=\"monto3um\",\n                hue='cluster', palette=\"deep\", alpha=1,\n                style='cluster')\nplt.xlim([0,15])\nplt.ylim([0,20000])\nplt.show()","b2306b0c":"dbPrueba = dbPrueba.drop(dbPrueba[dbPrueba['monto3um']>40000].index)\n\nsns.scatterplot(data=dbPrueba, x=\"trxSum\", y=\"monto3um\")\nplt.show()","c3f1e91d":"from sklearn.cluster import KMeans\n\ncost=[]\ncluster=[]\n\nfor i in list(range(1,11)):\n    kmeans = KMeans(n_clusters=i, max_iter=300, random_state=1)\n    kmeans.fit(dbPrueba)\n    cluster.append(kmeans.fit_predict(dbPrueba))\n    cost.append(kmeans.inertia_)","78818f12":"rango=np.array(range(1,len(cost)+1))\nplt.plot(rango,cost)\nplt.title('Evoluci\u00f3n de Cluster Vs Costo')\nplt.xlabel('nro de clusters')\nplt.show()","9aa4fbd6":"n_cluster = 3\ndbPrueba['cluster'] = cluster[n_cluster-1]\ndbPrueba.head()","36fff677":"sns.scatterplot(data=dbPrueba, x=\"trxSum\", y=\"monto3um\",\n                hue='cluster', palette=\"deep\", alpha=1,\n                style='cluster')\nplt.show()","58095438":"sns.scatterplot(data=dbPrueba, x=\"trxSum\", y=\"monto3um\",\n                hue='cluster', palette=\"deep\", alpha=1,\n                style='cluster')\nplt.xlim([0,100])\nplt.ylim([0,30000])\nplt.show()","0fd782bd":"dbFinal['cluster'] = dbPrueba['cluster']\ndbFinal.head()","00144652":"dbFinal['monto_x_tran']= np.where(dbFinal['cluster']==2, '2. mediano consumo',\n                         np.where(dbFinal['cluster']==1, '3. alto consumo',\n                         np.where(dbFinal['cluster']==0, '1. bajo consumo', 'None',)))","2105b4fd":"dbFinal = dbFinal.drop(dbFinal[dbFinal['monto3um']>40000].index)\ndbFinal.head()","4d26b84d":"sns.scatterplot(data=dbFinal, x=\"trxSum\", y=\"monto3um\",\n                hue='monto_x_tran', palette=\"deep\", alpha=1,\n                style='monto_x_tran')\nplt.show()","15e21c85":"dbFinal = dbFinal[['periodo','cliente','rec','frec','monto3um','trxSum','monto_x_tran']]\ndbFinal.head()","be603e9d":"dbFinal[((dbFinal['frec']>0) & (dbFinal['monto3um']==0))].head()","d0112443":"dbFinal = dbFinal[~((dbFinal['frec']>0) & (dbFinal['monto3um']==0))]","74326311":"#nTotal = dbFinal.count()[0]\n#dbRfm = dbFinal.groupby(['rec','frec','monto']).agg({'cliente':'count'}).sort_values(by=['rec','frec'], ascending=False)\nnTotal = dbFinal[dbFinal['rec']>0].count()[0]\nresumRfm = dbFinal[dbFinal['rec']>0].groupby(['rec','frec','monto_x_tran']).agg({'cliente':'count', 'monto3um':'sum'})\\\n                                 .sort_values(by=['rec','frec','monto_x_tran'], ascending=False)\n\nresumRfm = resumRfm.reset_index()\nresumRfm['%'] = round(100*resumRfm['cliente']\/nTotal,1)\nprint(f'Clientes Total: {nTotal}\\n')\nprint(resumRfm)","ec38c671":"#nTotal = dbFinal.count()[0]\n#dbRfm = dbFinal.groupby(['rec','frec','monto']).agg({'cliente':'count'}).sort_values(by=['rec','frec'], ascending=False)\nnTotal = dbFinal[dbFinal['rec']>0].count()[0]\nresumRfm = dbFinal[dbFinal['rec']>0].groupby(['rec','frec','monto_x_tran']).agg({'cliente':'count', 'monto3um':'sum'})\\\n                                 .sort_values(by=['monto3um'], ascending=False)\n\nresumRfm = resumRfm.reset_index()\nresumRfm['%'] = round(100*resumRfm['cliente']\/nTotal,1)\nprint(f'Clientes Total: {nTotal}\\n')\nprint('************Tabla ordenada por el monto consumido(monto3um)************')\nprint()\nprint(resumRfm)","8d01095f":"dbRfm = pd.DataFrame()\ndbRfm = dbFinal[dbFinal['rec']>0].copy()","c6a10f65":"dbRfm.loc[(dbRfm['rec']==3)&(dbRfm['frec']==2)&(dbRfm['monto_x_tran']=='1. bajo consumo'),'rfm_t'] = '1. Bajo'\ndbRfm.loc[(dbRfm['rec']==3)&(dbRfm['frec']==1)&(dbRfm['monto_x_tran']=='1. bajo consumo'),'rfm_t'] = '1. Bajo'\ndbRfm.loc[(dbRfm['rec']==2)&(dbRfm['frec']==2)&(dbRfm['monto_x_tran']=='1. bajo consumo'),'rfm_t'] = '1. Bajo'\ndbRfm.loc[(dbRfm['rec']==1)&(dbRfm['frec']==1)&(dbRfm['monto_x_tran']=='1. bajo consumo'),'rfm_t'] = '1. Bajo'\ndbRfm.loc[(dbRfm['rec']==2)&(dbRfm['frec']==1)&(dbRfm['monto_x_tran']=='1. bajo consumo'),'rfm_t'] = '1. Bajo'\n\ndbRfm.loc[(dbRfm['rec']==1)&(dbRfm['frec']==1)&(dbRfm['monto_x_tran']=='2. mediano consumo'),'rfm_t'] = '2. Insatisfecho'\ndbRfm.loc[(dbRfm['rec']==2)&(dbRfm['frec']==1)&(dbRfm['monto_x_tran']=='2. mediano consumo'),'rfm_t'] = '2. Insatisfecho'\n\ndbRfm.loc[(dbRfm['rec']==3)&(dbRfm['frec']==3)&(dbRfm['monto_x_tran']=='1. bajo consumo'),'rfm_t'] = '3. Posible Satisfecho'\ndbRfm.loc[(dbRfm['rec']==3)&(dbRfm['frec']==2)&(dbRfm['monto_x_tran']=='2. mediano consumo'),'rfm_t'] = '3. Posible Satisfecho'\ndbRfm.loc[(dbRfm['rec']==3)&(dbRfm['frec']==1)&(dbRfm['monto_x_tran']=='2. mediano consumo'),'rfm_t'] = '3. Posible Satisfecho'\ndbRfm.loc[(dbRfm['rec']==2)&(dbRfm['frec']==2)&(dbRfm['monto_x_tran']=='2. mediano consumo'),'rfm_t'] = '3. Posible Satisfecho'\n\ndbRfm.loc[(dbRfm['rec']==3)&(dbRfm['frec']==3)&(dbRfm['monto_x_tran']=='2. mediano consumo'),'rfm_t'] = '4. Satisfecho'\n\ndbRfm.loc[(dbRfm['rec']==3)&(dbRfm['frec']==1)&(dbRfm['monto_x_tran']=='3. alto consumo'),'rfm_t'] = '5. Posible Estrella'\ndbRfm.loc[(dbRfm['rec']==2)&(dbRfm['frec']==2)&(dbRfm['monto_x_tran']=='3. alto consumo'),'rfm_t'] = '5. Posible Estrella'\ndbRfm.loc[(dbRfm['rec']==2)&(dbRfm['frec']==1)&(dbRfm['monto_x_tran']=='3. alto consumo'),'rfm_t'] = '5. Posible Estrella'\ndbRfm.loc[(dbRfm['rec']==3)&(dbRfm['frec']==2)&(dbRfm['monto_x_tran']=='3. alto consumo'),'rfm_t'] = '5. Posible Estrella'\n\ndbRfm.loc[(dbRfm['rec']==3)&(dbRfm['frec']==3)&(dbRfm['monto_x_tran']=='3. alto consumo'),'rfm_t'] = '6. Estrella'","2eae5538":"resum = dbRfm.groupby('rfm_t').agg({'cliente':'count','rec':'mean','frec':'mean','monto3um':'sum', 'trxSum':'sum'})\\\n                                 .sort_values(by='rfm_t')\nresum = resum.reset_index()\nresum['%_cliente'] = round(100*resum['cliente']\/dbRfm.count()[0],1)\nresum['%_consumo'] = round(100*resum['monto3um']\/dbRfm.monto3um.sum(),1)\nprint(f'Clientes Total: {dbRfm.count()[0]}\\n')\nprint(resum)","e1ecd948":"fig = plt.gcf()\nax = fig.add_subplot()\nfig.set_size_inches(12, 8)\nsquarify.plot(sizes=resum['%_cliente'], \n              label=['1. Bajo', # Coloque los nombres que usted ha definido\n                     '2. Insatisfecho',\n                     '3. Posible Satisfecho',\n                     '4. Satisfecho',\n                     '5. Posible\\nEstrella',\n                     '6. Estrella'], alpha=0.7 )\nplt.title(\"Segmento RFM + t ( Basado en la cantidad de clientes )\",fontsize=18,fontweight=\"bold\")\nplt.axis('off')\nplt.show()","cd9e87bc":"fig = plt.gcf()\nax = fig.add_subplot()\nfig.set_size_inches(12, 8)\nsquarify.plot(sizes=resum['%_consumo'], \n              label=['1. Bajo\\nclientes 51.8%\\nconsumo 25.0%', # Coloque los nombres que usted ha definido\n                     '2. Insatisfecho\\nclientes 0.5%\\nconsumo 3.3%',\n                     '3. Posible Satisfecho\\nclientes 44.0%\\nconsumo 40.4%',\n                     '4. Satisfecho\\nclientes 3.5%\\nconsumo 21.0%',\n                     '5. Posible Estrella\\nclientes 0.1%\\nconsumo 3.2%',\n                     '6. Estrella\\nclientes 0.2%\\nconsumo 7.2%'], alpha=0.7 )\nplt.title(\"Segmento RFM + t ( Basado en el consumo: monto3um )\",fontsize=18,fontweight=\"bold\")\nplt.axis('off')\nplt.show()","cc2a22d9":"**La segmentaci\u00f3n por Kmeans tiene m\u00e1s sentido, ya que agrupa las dos variables en base al monto.**","5aa3cea2":"Agregamos la variable trxSum: Suma del n\u00famero de transacciones.\n\nSumamos todas las transacciones de los 3 meses de consumo.","fc7dd5c2":"A partir de la informaci\u00f3n de los 3 \u00faltimos meses damos forma a las variables R, F, M y t. Usando la libreria numpy para trabajar las condiciones","5c1a3554":"Pegamos la informaci\u00f3n de Tenencia y de consumo de los 3 \u00faltimos meses","6aa97e3e":"Este an\u00e1lisis se realiz\u00f3 teniendo en cuenta la experiencia del analista en el negocio el cual puede identificar los grupos con la informaci\u00f3n dada y apuntando lo que necesita.\n","ea951cfa":"## 6.1 Etiqueta de los segmentos:","110e32e0":"# 3. Extracci\u00f3n Base de Datos","94b30e67":"        rec  frec        monto_x_tran  cliente      monto3um     %\n        \n    2     3     2     1. bajo consumo     1944  4.306995e+05  18.0 : Bajo\n    4     3     1     1. bajo consumo     1334  2.330020e+05  12.3 : Bajo\n    5     2     2     1. bajo consumo      955  2.251220e+05   8.8 : Bajo\n    7     1     1     1. bajo consumo      714  1.284050e+05   6.6 : Bajo\n    8     2     1     1. bajo consumo      646  1.162060e+05   6.0 : Bajo\n    \n    11    1     1  2. mediano consumo       25  8.055100e+04   0.2 : Insatisfecho\n    12    2     1  2. mediano consumo       28  6.781100e+04   0.3 : Insatisfecho\n    \n    0     3     3     1. bajo consumo     4585  1.426960e+06  42.4 : Posible Satisfecho\n    6     3     2  2. mediano consumo       86  1.885815e+05   0.8 : Posible Satisfecho\n    9     3     1  2. mediano consumo       41  1.103000e+05   0.4 : Posible Satisfecho\n    10    2     2  2. mediano consumo       40  1.032720e+05   0.4 : Posible Satisfecho\n    \n    1     3     3  2. mediano consumo      373  9.495517e+05   3.5 : Satisfecho\n    \n    13    3     1     3. alto consumo        5  6.373300e+04   0.0 : Posible Cliente Estrella\n    14    2     2     3. alto consumo        2  3.676500e+04   0.0 : Posible Cliente Estrella\n    15    2     1     3. alto consumo        1  2.550000e+04   0.0 : Posible Cliente Estrella\n    16    3     2     3. alto consumo        2  1.893650e+04   0.0 : Posible Cliente Estrella\n    \n    3     3     3     3. alto consumo       23  3.253770e+05   0.2 : Cliente Estrella","635c8c5a":"# 2. Funciones","10533ed2":"### Variables trxSum vs Monto3um","70fba5d6":"# 4. Universo","17e8b8cf":"Visualizamos los segmentos RFM + t para el universo de nuestros clientes, esta distribuci\u00f3n ser\u00e1 referente para los siguientes meses en que se realice la r\u00e9plica del estudio.\n","f154d00b":"Analizaremos cada \u00edndice del dataframe ***resumRfm***, para justificar la segmentaci\u00f3n.\n\nNota: El 0 indica el \u00edndice 0 del dataframe ***resumRfm*** donde:\n\n        rec  frec        monto_x_tran  cliente      monto3um     %\n    0     3     3  1. bajo comsumo     4585  1.426960e+06  42.4\n\n0: Clientes frecuentes que debemos conservar e incentivar a que consuman m\u00e1s (***Posible Satisfecho***)\n\n1: Clientes de mediano consumo y con preferencia por nuestro mercado (***Satisfecho***)\n\n2: Clientes con bajo consumo debemos mejorar su presencia y consumo (***Bajo***)\n\n3: Clientes top, estos clientes se deben mantener debido a su alto consumo y preferencia por nuestro mercado (***Cliente Estrella***)\n\n4: Clientes que nos consumieron en el mes m\u00e1s reciente, pero con un consumo bajo (***Bajo***)\n\n5: Clientes que consumen poco y est\u00e1n perdiendo inter\u00e9s por nuestro mercado (***Bajo***)\n\n6: Clientes con buen consumo y que si mejoramos su preferencia por nuestro mercado ser\u00edan posibles clientes satisfechos (***Posible Satisfecho***)\n\n7: Clientes con bajo consumo y poco inter\u00e9s en nuestro mercado (***Bajo***)\n\n8: Clientes con bajo consumo y poco inter\u00e9s en nuestro mercado  (***Bajo***)\n\n9: Cliente con buen consumo y reciente presencia en nuestro mercado, si consolidamos su preferencia en nuestro mercado ser\u00edan posibles clientes satisfechos (***Posible Satisfecho***)\n\n10: Cliente con buen consumo y con presencia en nuestro mercado, si consolidamos su preferencia en nuestro mercado ser\u00edan posibles clientes satisfechos  (***Posible Satisfecho***)\n\n11: Clientes con buen consumo y est\u00e1n perdiendo inter\u00e9s en nuestro mercado (***Insatisfecho***)\n\n12: Clientes con buen consumo y est\u00e1n perdiendo inter\u00e9s en nuestro mercado (***Insatisfecho***)\n\n13: Nuevo cliente posible top debido a su alto consumo hay potencial aqu\u00ed (***Posible Cliente Estrella***)\n\n14: Clientes que no se deben perder ya que son buenos clientes debido a su alto consumo y han visitado nuestro mercado en los 2 anteriores mese, se debe incentivar (***Posible Cliente Estrella***)\n\n15: Cliente ocasional con potencial a ser cliente estrella (***Posible Cliente Estrella***)\n\n16: Clientes que si llegamos a consolidar su preferencia por nuestro mercado, se convertir\u00eda en un cliente estrella (***Posible Cliente Estrella***)","c66483fc":"# 1. Librer\u00edas","46d0e20b":"Eliminamos los valores an\u00f3malos.","881675ea":"Podemos notar que la correlaci\u00f3n es muy baja, eso implica que:\n\n    - Realizar m\u00e1s transacciones por tarjeta no significa que el cliente consuma m\u00e1s.\n    - Realizar menos transacciones por tarjeta no significa que el cliente consuma menos.\n\nProcederemos a segmentar estas dos variables en conjunto, utilizando Kmodes y Kmeans para ver cu\u00e1l es m\u00e1s efectiva.\n","3e9f487f":"#### Agregando la variable trx","82d63753":"Veremos la correlaci\u00f3n de trxSum y Monto3um para verificar si existe una relaci\u00f3n entre ellas","84a957bb":"Le damos los nombres seg\u00fan caracter\u00edsticas","ef3e0feb":"## 5.1 Formando R+F+M+t","63db6578":"### Segmentando trxSum y Monto3um por Kmeans","994eda5a":"Este paso nos dar\u00e1 la propuesta de la primera distribuci\u00f3n o los grupos propuestos donde nuestros clientes est\u00e1n almacenados, es aqu\u00ed donde surge el debate y analizan cuales ser\u00edan los grupos finales para el negocio.","3df87ba0":"***A partir de la base de datos constru\u00edda, y luego de analizar las distribuciones, se concluir\u00e1n los nombres de los grupos conjuntamente con las caracter\u00edsticas de la frecuencia, recencia y monto.***","a65e3f11":"El m\u00e9todo RFM + t Cl\u00e1sico di\u00f3 como resultado segmentar y detectar que un 3.8% de clientes (Estrella, Posible Estrella y Satisfecho) representan el 31.4% del consumo; adem\u00e1s que el 47.8% de clientes (Satisfecho, Insatisfecho, Posible Satisfecho, Estrella y Posible Estrella) representan el 71.8% de consumo cumpli\u00e9ndose una especie de ley de pareto donde el 20% de clientes hace el 80% de compras, adem\u00e1s este m\u00e9todo nos permiti\u00f3 hacer una segmentaci\u00f3n m\u00e1s minusiosa y detallada de los tipos de clientes.\n\nEn resumen, result\u00f3 muy \u00fatil debido a que se detecto a la poblaci\u00f3n que consume m\u00e1s en nuestro mercado, siendo esto muy \u00fatil, ya que nuestra campa\u00f1a se podr\u00eda dirigir mejor hacia esta clase de clientes, para que mejoren su consumo y mantener su preferencia por nuestro mercado.","717036c2":"trx_x, trx_y y trx son las transacciones de los meses anteriores. Por ello, crearemos una columna que sea la suma y represente todas las transacciones de los 3 meses de consumo.\n\nPara ello primero imputaremos los valores nulos de cada columna trx_x, trx_y y trx para evitar errores en la suma total.\n","b9d3c341":"Para poder relacionar nuestra base Universo con la base hist\u00f3rica de consumo, vamos agregar las fechas anteriores (-1, -2, -3) para que posteriormente podamos hacer merge\n","81b26ed5":"# M\u00e9todo RFM Cl\u00e1sico","b20fdba4":"***TENEMOS 6 GRUPOS DE CLIENTES, ESTOS SON:***\n\n    - 1. Bajo\n    - 2. Insatisfecho\n    - 3. Posible Satisfecho\n    - 4. Satisfecho\n    - 5. Potencial Estrella\n    - 6. Estrella","92817ce9":"## 5.2 Etiqueta de trxSum y monto3um","8ed66320":"#### Segmentando trxSum y Monto3um por Kmodes","ce36a8fb":"# 5. Desarrollo Base de Datos para el RFM+t","9393b947":"# Segmentaci\u00f3n RFM","2e285c0d":"***En este caso aguparemos sin contar con los valores muy extremos, ya que el m\u00e9todo de Kmeans es sensible a dichos valores y pueden sesgar nuestra forma de agrupamiento.***","d81967e6":"Extraemos la base de datos de consumo, en este caso no se considerar\u00e1los rubros, ya que, trataremos de aprovechar la esencia de las variables b\u00e1sicas como es la periodicidad y monto.","29fc8abe":"## 6.2 Conclusi\u00f3n de segmento:","7ac582c3":"# 6. RFM m\u00e9todo Cl\u00e1sico o Experto","8155291f":"Elegiremos una cosecha referente que servir\u00e1 como nuestro universo de clientes el cual analizaremos su comportamiento, esta cosecha puede ser un mes o varios meses.\n\n    Recordar: tiene que ser a nivel de cliente","64ce68a1":"## 5.3 Distribuci\u00f3n RFM + t","aa2de46b":"**Kmodes a pesar de ser robusta a los outliers, en este caso la segmentaci\u00f3n no tiene sentido, por tanto, no es un buen resultado, ni usaremos kmodes para el agrupamiento de estas dos variables.**","07561f64":"Creamos la base de datos con todos los periodos (hist\u00f3rico) de consumo e incluimos una variable de \u00edndice (ind) para los posteriores tratamientos."}}