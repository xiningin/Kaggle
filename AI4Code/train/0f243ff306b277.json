{"cell_type":{"1c78d9fc":"code","9daa0257":"code","e652e864":"code","115248bd":"code","066889a6":"code","ad9990c4":"code","5c32a714":"code","45ca90d3":"code","7b1fa1d7":"code","8b43a78a":"code","b945f06c":"code","1d5867d0":"code","8f97a8cb":"code","33e3327e":"code","073e2006":"code","aa8f7a6e":"code","dd4ce787":"markdown","fc492bb4":"markdown","6e8be19e":"markdown"},"source":{"1c78d9fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nfrom subprocess import check_output\nimport keras\nfrom keras.models import Sequential\nfrom keras.utils import to_categorical\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom sklearn.model_selection import train_test_split\n\n# Any results you write to the current directory are saved as output.","9daa0257":"print(os.listdir(\"..\/input\"))","e652e864":"data_train = pd.read_csv('..\/input\/train42000.csv')\ndata_test = pd.read_csv('..\/input\/test28000.csv')","115248bd":"data_train","066889a6":"data_test","ad9990c4":"X = np.array(data_train.iloc[:, 1:])\ny = to_categorical(np.array(data_train.iloc[:, 0]))","5c32a714":"#Here we split validation data to optimiza classifier during training\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=13)\n\n#Test data\nX_test = np.array(data_test.iloc[:, 0:])","45ca90d3":"img_rows, img_cols = 28, 28\ninput_shape = (img_rows, img_cols, 1)\nX_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 1)\nX_test = X_test.reshape(X_test.shape[0], img_rows, img_cols, 1)\nX_val = X_val.reshape(X_val.shape[0], img_rows, img_cols, 1)","7b1fa1d7":"X_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\nX_val = X_val.astype('float32')\nX_train \/= 255\nX_test \/= 255\nX_val \/= 255","8b43a78a":"batch_size = 256\nnum_classes = 10\nepochs = 5","b945f06c":"model = Sequential()\nmodel.add(Conv2D(20, kernel_size=(5, 5),\n                 activation='relu',\n                 kernel_initializer='he_normal',\n                 input_shape=input_shape))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(20, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes, activation='softmax'))","1d5867d0":"model.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adam(),\n              metrics=['accuracy'])","8f97a8cb":"history = model.fit(X_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(X_val, y_val))","33e3327e":"#get the predictions for the test data\npredicted_classes = model.predict_classes(X_test)","073e2006":"predicted_classes","aa8f7a6e":"df = pd.DataFrame(predicted_classes,columns=['label'])\ndf.to_csv(path_or_buf=\"Submission.csv\",index_label=\"image_id\")","dd4ce787":"\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002","fc492bb4":"\u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u3092\u30a4\u30e1\u30fc\u30b8\u3068\u6b63\u89e3\u30e9\u30d9\u30eb\u306b\u5206\u3051\u307e\u3059\u3002","6e8be19e":"\u5165\u529b\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002"}}