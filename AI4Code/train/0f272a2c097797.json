{"cell_type":{"0ee09382":"code","61edeacc":"code","fbf5e389":"code","995c6432":"code","a5b9b159":"code","b65ef89f":"code","0896d726":"code","6f95366d":"code","a88b2d37":"code","1776122c":"code","9bad30d2":"code","b610b5bd":"code","1933779e":"code","82bfc878":"code","ef23cd1f":"code","a0b9f11c":"code","d76227ad":"code","7d66e6f6":"code","f4aca8f1":"code","7d2e5265":"code","38364908":"code","90953be5":"code","a3411569":"code","4aa15827":"code","7f3ea94f":"code","d1de1849":"code","aae1577a":"code","1d22bf0e":"code","c20d9fc3":"code","ab168f06":"code","71d162d6":"code","d2742c03":"code","34d72093":"code","4c3ad2bd":"code","34146b4a":"code","05a04baa":"code","5002c147":"code","ea657a09":"code","7a4f5124":"code","8324dcd6":"code","b0ac7a23":"code","6471f13a":"code","f6a253ae":"code","c8d086f7":"code","6a8f7d05":"code","2857c7a6":"code","c1ccc8cd":"code","b47bed9f":"code","854cb418":"code","4a0eed45":"code","41f02f43":"code","d2ed05fd":"code","31085572":"code","d58e0f23":"code","0e25c40d":"code","230e8ae6":"code","9a1525b6":"code","7102b403":"code","1ca86dd3":"code","9a8a0a07":"code","f17f55d4":"code","5ff6104c":"code","f0c36210":"code","fa8433da":"code","076f790c":"code","45f0e3c6":"code","32231a5e":"code","b935f1ed":"code","aab79ab6":"code","06a98c69":"code","efb194e2":"code","26cd4c04":"code","0f765820":"code","44db65aa":"code","7e533e99":"markdown","4a94a8a6":"markdown","6629b0df":"markdown","bfbf58de":"markdown","356b6c6e":"markdown","1791dda6":"markdown","9b10c1c3":"markdown","90d3a277":"markdown","190f2604":"markdown","3845d517":"markdown","1ff67dfd":"markdown","768d6d2d":"markdown","f5af438d":"markdown","19552bea":"markdown","446d5568":"markdown","9dff3153":"markdown","dc534fd0":"markdown","03daa96e":"markdown","d4ebd939":"markdown","59dbde7c":"markdown","2706294f":"markdown","930c2570":"markdown","50c5ca56":"markdown","78e74509":"markdown","3c935737":"markdown","e4f322e8":"markdown","fe4f27f6":"markdown","e8566fc2":"markdown","94c7650b":"markdown","0bc9ac90":"markdown","2d9f8453":"markdown","298e82de":"markdown","c73a4223":"markdown","422347cd":"markdown","93df1138":"markdown","25324c46":"markdown","b7a8b969":"markdown","1f003200":"markdown","1f586d69":"markdown","e5d0202f":"markdown","21e05093":"markdown","20b0bcb7":"markdown","683ef58b":"markdown","0a0ea7f3":"markdown","f952a331":"markdown","cc34d7a8":"markdown","a6908846":"markdown","d3b3b2e9":"markdown","9886fe6c":"markdown","87312ce4":"markdown","e5cf0ef6":"markdown","9d9e3140":"markdown","613d490f":"markdown","abbb641a":"markdown","943abb95":"markdown","cf4b9591":"markdown","fb2ec3b0":"markdown"},"source":{"0ee09382":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","61edeacc":"sns.set(style=\"ticks\")\nsns.set_style(\"darkgrid\")","fbf5e389":"apps_df = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')\napps_df.head()","995c6432":"apps_df.info()","a5b9b159":"apps_df.isnull().sum()","b65ef89f":"apps_df.nunique()","0896d726":"# Function to drop rows and reset the index of the df\n\ndef drop_rows(df,drop_rows):\n    df.drop(drop_rows.index, inplace=True)\n    df.reset_index(drop=True)","6f95366d":"dup_apps = apps_df[apps_df.App.duplicated()]\ndup_apps.sort_values(by='Installs', ascending=False)","a88b2d37":"drop_rows(apps_df, dup_apps)","1776122c":"apps_df.Rating.describe()","9bad30d2":"apps_df.Category.value_counts()","b610b5bd":"cat_1dot9 = apps_df[apps_df.Category == '1.9']\ncat_1dot9","1933779e":"drop_rows(apps_df, cat_1dot9)","82bfc878":"apps_df.Reviews = apps_df.Reviews.astype('int64')","ef23cd1f":"apps_df.Size.nunique()","a0b9f11c":"size_symbols = apps_df.Size.map(lambda s: s[-1] if s != 'Varies with device' else s)\nsize_symbols.value_counts()","d76227ad":"apps_df.Size = apps_df.Size.str.replace('M', 'e+6')\napps_df.Size = apps_df.Size.str.replace('k', 'e+3')\napps_df.Size = apps_df.Size.replace('Varies with device', np.nan)\n\napps_df.Size = apps_df.Size.astype('float')","7d66e6f6":"apps_df.Installs.value_counts()","f4aca8f1":"apps_df.Installs = apps_df.Installs.str.replace('+', '')\napps_df.Installs = apps_df.Installs.str.replace(',', '')\n\napps_df.Installs = apps_df.Installs.astype('int64')","7d2e5265":"apps_df.Type.value_counts()","38364908":"apps_df.Price.unique()","90953be5":"apps_df.Price = apps_df.Price.str.strip('$')\napps_df.Price = apps_df.Price.astype('float')","a3411569":"apps_df['Content Rating'].unique()","4aa15827":"apps_df['Content Rating'].value_counts()","7f3ea94f":"unrated_app = apps_df[apps_df['Content Rating'] == 'Unrated']\ndrop_rows(apps_df, unrated_app)","d1de1849":"apps_df.Genres.unique()","aae1577a":"prim_genres = apps_df.Genres.apply(lambda g: g.split(';')[0])\nsec_genres = apps_df.Genres.apply(lambda g: g.split(';')[-1])\n\napps_df['Primary Genres'] = prim_genres\napps_df['Secondary Genres'] = sec_genres\napps_df.drop('Genres', axis=1, inplace=True)","1d22bf0e":"group_genres = apps_df.groupby(['Primary Genres', 'Secondary Genres'])\ngroup_genres['Rating', 'Reviews', 'Installs'].mean().tail(10)","c20d9fc3":"apps_df['Last Updated'].head()","ab168f06":"from datetime import date, datetime\n\napps_df['Last Updated'] = pd.to_datetime(apps_df['Last Updated'])","71d162d6":"apps_df['Current Ver'].value_counts()","d2742c03":"apps_df['Current Ver'] = apps_df['Current Ver'].replace('Varies with device', np.nan)","34d72093":"apps_df['Android Ver'].value_counts()","4c3ad2bd":"def clean_ver(version):\n    if 'and up' in str(version):\n        return str(version).strip('and up')\n    \n    elif '-' in str(version):\n        return str(version).split(' - ')[0]\n    \n    return str(version)","34146b4a":"apps_df['Android Ver'] = apps_df['Android Ver'].replace('4.4W','4.4')\napps_df['Android Ver'] = apps_df['Android Ver'].replace('Varies with device', np.nan)\napps_df['Android Ver'] = apps_df['Android Ver'].apply(clean_ver)","05a04baa":"apps_df.rename(columns={'Android Ver': 'Minimum Android Ver'}, inplace=True)","5002c147":"apps_df['Minimum Android Ver'].value_counts()","ea657a09":"apps_df.isnull().sum()","7a4f5124":"percent_missing = (apps_df.isnull().sum() \/ len(apps_df)) * 100\npercent_missing_df = pd.DataFrame({'Missing Percent':percent_missing})\npercent_missing_df.sort_values(by='Missing Percent', inplace=True, ascending=False)\npercent_missing_df","8324dcd6":"type_nan_i = apps_df[apps_df.Type.isna()].index\napps_df.loc[type_nan_i]","b0ac7a23":"apps_df.Type.loc[type_nan_i] = 'Free'","6471f13a":"miss_inst_rev = apps_df[(apps_df.Installs == 0) & (apps_df.Reviews == 0)]\ndrop_rows(apps_df, miss_inst_rev)\n\nmiss_rat = apps_df[apps_df.Rating.isna()]\ndrop_rows(apps_df, miss_rat)","f6a253ae":"apps_df.isnull().sum()","c8d086f7":"apps_df.Size = apps_df.groupby('Category')['Size'].apply(lambda x: x.fillna(x.mean()))\napps_df['Current Ver'] = apps_df.groupby('Category')['Current Ver'].apply(lambda x: x.fillna(x.value_counts().index[0])) # The mode can return +1 value so beter use value_counts","6a8f7d05":"apps_df.isna().sum()","2857c7a6":"fig_dims = (8, 8)\nfig, ax = plt.subplots(figsize=fig_dims)\norder = apps_df.Category.value_counts().index\nsns.countplot(y=apps_df.Category, ax=ax, orient='h', order=order)","c1ccc8cd":"fig_dims = (8, 8)\nfig, ax = plt.subplots(figsize=fig_dims)\ngroupby_cats = apps_df.groupby('Category').mean().reset_index().sort_values('Installs', ascending=False)\nsns.barplot(data=groupby_cats, x='Installs', y='Category', orient='h')","b47bed9f":"fig_dims = (8, 8)\nax = plt.subplots(figsize=fig_dims)\nsns.countplot(data=apps_df, x='Content Rating')","854cb418":"fig_dims = (8, 8)\nax = plt.subplots(figsize=fig_dims)\nlabels = apps_df['Type'].value_counts(sort=True).index\ntypes = apps_df['Type'].value_counts(sort = True)\nplt.pie(types, labels=labels, autopct='%1.2f%%', shadow=True, startangle=90)\nplt.legend()","4a0eed45":"fig_dims = (10, 8)\nax = plt.subplots(figsize=fig_dims)\nexpensive_apps = apps_df.sort_values(by='Price', ascending=False).head(10)\nsplot = sns.barplot(data=expensive_apps, y='App', x='Price', orient='h')\nfor (p, installs) in zip(splot.patches, expensive_apps['Installs']):\n    width = p.get_width()\n    splot.text(p.get_width()-50, p.get_y()+0.55*p.get_height(),\n             s=f'{installs} installs' ,\n             ha='center', va='center') ","41f02f43":"fig_dims = (8, 8)\nax = plt.subplots(figsize=fig_dims)\nupdated_month_idx = apps_df['Last Updated'].dt.month.value_counts().index\nupdated_month_value = apps_df['Last Updated'].dt.month.value_counts()\nsns.barplot(updated_month_idx, y=updated_month_value)","d2ed05fd":"df_corr = apps_df.corr()\n\nplt.subplots(figsize=(8,7))\nsns.heatmap(df_corr, annot=True, linewidths=1, cbar=True)","31085572":"apps_df_ml = apps_df.copy()","d58e0f23":"cols = [('Category', 'Cat'), ('Content Rating', 'CR'), ('Type', 'Ty')]\ndummy_cols = [pd.get_dummies(apps_df[c[0]], prefix=c[1], drop_first=True) for c in cols]\n\napps_df_ml = pd.concat([apps_df_ml, *dummy_cols], axis=1)\napps_df_ml.drop([c[0] for c in cols], axis=1, inplace=True)","0e25c40d":"apps_df_ml.filter(regex='Cat_\/*').head()","230e8ae6":"apps_df_ml.drop(['Minimum Android Ver', 'Current Ver', 'App', 'Last Updated', 'Primary Genres', 'Secondary Genres'], axis=1, inplace=True)","9a1525b6":"X=apps_df_ml.drop(['Rating'],axis=1)\ny=apps_df_ml['Rating'].values","7102b403":"from sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=0)","1ca86dd3":"from sklearn.preprocessing import StandardScaler\nX_scaled = StandardScaler()\nX_train = X_scaled.fit_transform(X_train)\nX_test=X_scaled.transform(X_test)","9a8a0a07":"def print_metrics(y, y_predict):\n    print('MSE: '+ str(metrics.mean_squared_error(y,y_predict)))\n    print('MAE: '+ str(metrics.mean_absolute_error(y,y_predict)))\n    print ('MSLE: '+ str(metrics.mean_squared_log_error(y,y_predict)))","f17f55d4":"def reg_plotting(y, y_predict, title):\n    plt.figure(figsize=(12,8))\n    sns.regplot(y_predict ,y,color='red')\n    plt.legend()\n    plt.title(title)\n    plt.xlabel('Predicted Ratings')\n    plt.ylabel('Ratings')\n    plt.show()","5ff6104c":"from sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)\nlin_red_predict = lin_reg.predict(X_test)","f0c36210":"print_metrics(y_test, lin_red_predict)","fa8433da":"reg_plotting(y_test, lin_red_predict, 'Linear Regression')","076f790c":"from sklearn.svm import SVR\n\nsvr = SVR()\nsvr.fit(X_train, y_train)\nsvr_predict = svr.predict(X_test)","45f0e3c6":"print_metrics(y_test, svr_predict)","32231a5e":"reg_plotting(y_test, svr_predict, 'SVR')","b935f1ed":"from sklearn.ensemble import RandomForestRegressor\n\nrand_forest = RandomForestRegressor(n_jobs=-1)\nrand_forest.fit(X_train, y_train)\nrand_forest_predict = rand_forest.predict(X_test)","aab79ab6":"print_metrics(y_test, rand_forest_predict)","06a98c69":"reg_plotting(y_test, rand_forest_predict, 'Random Forest Regressor')","efb194e2":"from sklearn.ensemble import VotingRegressor","26cd4c04":"voting_reg = VotingRegressor(estimators=[('lin', lin_reg), ('svr', svr), ('rf', rand_forest)])\nvoting_reg.fit(X_train, y_train)\nvoting_reg_predict = voting_reg.predict(X_test)","0f765820":"print_metrics(y_test, voting_reg_predict)","44db65aa":"reg_plotting(y_test, voting_reg_predict, 'Voting Classifier')","7e533e99":"#### Categories with most applications in it","4a94a8a6":"Seems that since App name is missing, this took the Category value instead, category took the rating value and so on. <br> Its better to just drop this row","6629b0df":"#### Correlation Matrix between variables","bfbf58de":"Applying Imputation to missing values based on its category using the mean for size and the mode for the version","356b6c6e":"### 2.2 Data Cleaning","1791dda6":"Only two categories in this field","9b10c1c3":"#### 2.2.3 Category\nLets leaves the categories as string for the moment, later I'll do One Hot Encoding","90d3a277":"#### 2.2.2 Rating","190f2604":"#### 2.1.3 Check for unique values","3845d517":"## 2. Exploratoy Data Analysis","1ff67dfd":"The Rating column is already numeric. Later I'll handle de null values","768d6d2d":"Lets drop two subsets. The apps that have neither **Installs** nor **Reviews** and the missing values in **Rating** because filling with the mean won't be the best bet","f5af438d":"#### 4.4 Voting Regressors","19552bea":"#### 2.2.1 Drop duplicated apps","446d5568":"Since there is only one app 'Unrated' lets bettet drop it","9dff3153":"For some reason, the month in which most applications had their last update is July (7)","dc534fd0":"#### 2.2.4 Reviews","03daa96e":"#### 2.2.6 Installs","d4ebd939":"Looks like this subsets were causing the majority of missing values in other columns","59dbde7c":"#### 4.2 SVR","2706294f":"#### 2.2.8 Price","930c2570":"The 10 most expensive apps have almost the same price with a difference of only 0.01$. (Its impresive that at least 10k people paid that price)","50c5ca56":"#### 3.1 Encode categorical features","78e74509":"#### 2.2.12 Current Version","3c935737":"#### 4.3 Random Forest Regressor","e4f322e8":"For better handy of the version, we'll extract the 'minimum version required'","fe4f27f6":"* The data contains apps from the playstore and tell us their category, rating, number of reviews, size of the app(Megabytes), approximate number of installs, type (free\/paid), price, content rating, genres, its last update, current version number and Android version\n* Apart we have a dataset with the reviews and sentiment analysis for every app\n\n> Objective: make an EDA to playstore apps dataset and predictions of app ratings","e8566fc2":"## 2.3 Data Analysis & Visualizations","94c7650b":"Lets replace the 'M' and 'k' and see what we can do with the 'Varies with devices'","0bc9ac90":"#### 3.3 Split dataset \nFirst we're going to make a model without the secondary genres and see the performance","2d9f8453":"#### 2.1.1 Check for Data type of columns","298e82de":"#### 3.4 Feature Scaling","c73a4223":"## 0. Imports","422347cd":"#### 2.2.10 Genres\nThe genres are divided in a primary genre and secondary genres and are separated with ';'","93df1138":"We can se that 92.6% of the apps are Free","25324c46":"Lets replace the 'Varies with device' to nan","b7a8b969":"It seems that Rating has the most null values","1f003200":"#### 2.2.7 Type","1f586d69":"#### 2.2.5 Size","e5d0202f":"### 2.1 Initial Analysis","21e05093":"#### 2.2.9 Content Rating","20b0bcb7":"#### 2.2.14 Handling missing values","683ef58b":"####  2.1.2 Check for null values","0a0ea7f3":"As expected \"Everyone\" have more apps than the other content ratings","f952a331":"Lets check for te percentage of missing values","cc34d7a8":"## 1. Data Collection and Problem Statement","a6908846":"## 4. Machine Learning Modelling\n#### Helper Functions","d3b3b2e9":"Looks like **Price** does not have missing values but **Type** does have one. Lets fix that ","9886fe6c":"#### 2.2.13 Android Ver","87312ce4":"Average installs of the applications by each category. It seems that \"Communication\" and \"Social\" apps have the highest average of installs","e5cf0ef6":"The strongest correlation here its between Installs and Reviews","9d9e3140":"### Conclusion\nAmong the three main models, the Random Forest performed better than the Linear Regression and SVR. Furthermore, the Voting Regressor performed better as expected though the difference is not that much","613d490f":"#### 2.2.11 Last Update\nLets convert this to a datetime, then to the days since last update","abbb641a":"#### 4.1 Linear Regression","943abb95":"#### 3.2 Drop Columns\nTo my consideration the 'Minimum Android Ver', 'Current Ver' 'App' and 'Last Updated' have no useful information for the model so its better to drop them. Also the 'Genres' columns are almost the same as Category so lets drop them too\n","cf4b9591":"## 3. Data Preparation for Machine Learning\nLets make a separate dataframe and make the machine learning preparation in it","fb2ec3b0":"In this column we have the symbols '+' and ',' so first lets remove it and then turn unto numeric values"}}