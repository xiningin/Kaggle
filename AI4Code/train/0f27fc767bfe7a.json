{"cell_type":{"7cd09e78":"code","bca18d78":"code","89e26643":"code","50a74e54":"code","c235e12e":"code","ae5ebeff":"code","2b30a773":"code","38f1d57c":"code","b93b042d":"code","15942990":"code","3472740c":"code","a1930d00":"code","e867653e":"code","2c2039b1":"code","0812548d":"code","8319c0c3":"code","ddce0ea8":"code","c2dddeff":"code","48100828":"markdown","900a81dc":"markdown","311c4a2f":"markdown","eedadb73":"markdown","ff5befdb":"markdown","fdadfb14":"markdown","27e4fc7c":"markdown","233e8ff4":"markdown","12731a17":"markdown","ac236592":"markdown","82f88c9f":"markdown","1b1a5c18":"markdown","0338b891":"markdown","9f9f9dd3":"markdown","8b40e407":"markdown","a6b4dce3":"markdown","42331765":"markdown","ed9881e9":"markdown","f17b87ca":"markdown","c2a3adef":"markdown","a6fec398":"markdown","3684984a":"markdown"},"source":{"7cd09e78":"import pandas as pd\nimport numpy as np\nimport math\nimport xlrd\nimport matplotlib.pyplot as plt\nimport scipy.stats\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler, normalize\nfrom sklearn.cluster import KMeans","bca18d78":"data=pd.read_csv(\"..\/input\/CC GENE.csv\")","89e26643":"data.head()","50a74e54":"data.shape","c235e12e":"data.describe()","ae5ebeff":"data.isnull().sum()","2b30a773":"data.MINIMUM_PAYMENTS=data.MINIMUM_PAYMENTS.fillna(data.MINIMUM_PAYMENTS.mean())","38f1d57c":"data.CREDIT_LIMIT=data.CREDIT_LIMIT.fillna(data.CREDIT_LIMIT.mean())","b93b042d":"data.isnull().sum()","15942990":"data.drop(\"CUST_ID\", axis=1, inplace=True)","3472740c":"data.shape","a1930d00":"plt.figure(figsize=(9,7))\nsns.heatmap(data.corr(),cmap='coolwarm')\nplt.title('Correlation Matrix')\nplt.show()","e867653e":"#sns.pairplot(data)\n#plt.show()","2c2039b1":"wcss = []\nK = range(1,30)\nfor k in K:\n    kmeanModel = KMeans(n_clusters=k)\n    kmeanModel.fit(data)\n    wcss.append(kmeanModel.inertia_)","0812548d":"plt.figure(figsize=(16,8))\nplt.plot(K, wcss, 'bx-')\nplt.xlabel('Number of k')\nplt.ylabel('WCSS')\nplt.title('The Elbow Method showing the optimal number of k')\nplt.show()","8319c0c3":"Kmeans=KMeans(n_clusters=8)\nKmeans.fit(data)\ny_Kmeans=Kmeans.predict(data)\ndata[\"Cluster\"] = y_Kmeans","ddce0ea8":"data_model=[\"BALANCE\", \"PURCHASES\", \"CASH_ADVANCE\",\"CREDIT_LIMIT\", \"PAYMENTS\", \"MINIMUM_PAYMENTS\", \"TENURE\"]\ndata[\"Cluster\"] = y_Kmeans\ndata_model.append(\"Cluster\")\ndata[data_model].head()","c2dddeff":"plt.figure(figsize=(25,25))\nsns.pairplot( data[data_model], hue=\"Cluster\")","48100828":"** Looking is there a missing values**","900a81dc":"**Removing Cust id variable**","311c4a2f":"**Looking the pair plot for variables in data set**","eedadb73":"![image.png](attachment:image.png)","ff5befdb":"**Filling the missing values with mean**","fdadfb14":"**Filling the missing values with mean**","27e4fc7c":"After running the model, the cluster colour si changing for every run, but we can see some of the cluster groups :\n 1. minimum biggest payments & lowest credit limit \n 2. big spenders with large payments  \n 3. cash advance & large payments \n 4. group with high credt limit \n 5. group with cash advance & low payments \n 6. small spenders & low credit limit \n 7. group with largest minimum payments","233e8ff4":"**Looking dimension**","12731a17":"**Selecting most imported columns for final model**","ac236592":"**Looking the head of the data set**","82f88c9f":"**Loading the data set**","1b1a5c18":"Column explanation:\n\n1. CUSTID : Identification of Credit Card holder (Categorical)\n2. BALANCE : Balance amount left in their account to make purchases (\n3. BALANCEFREQUENCY : How frequently the Balance is updated, score between 0 and 1 (1 = frequently updated, 0 = not frequently updated)\n4. PURCHASES : Amount of purchases made from account\n5. ONEOFFPURCHASES : Maximum purchase amount done in one-go\n6. INSTALLMENTSPURCHASES : Amount of purchase done in installment\n7. CASHADVANCE : Cash in advance given by the user\n8. PURCHASESFREQUENCY : How frequently the Purchases are being made, score between 0 and 1 (1 = frequently purchased, 0 = not frequently purchased)\n9. ONEOFFPURCHASESFREQUENCY : How frequently Purchases are happening in one-go (1 = frequently purchased, 0 = not frequently purchased)\n10. PURCHASESINSTALLMENTSFREQUENCY : How frequently purchases in installments are being done (1 = frequently done, 0 = not frequently done)\n11. CASHADVANCEFREQUENCY : How frequently the cash in advance being paid\n12. CASHADVANCETRX : Number of Transactions made with \"Cash in Advanced\"\n13. PURCHASESTRX : Numbe of purchase transactions made\n14. CREDITLIMIT : Limit of Credit Card for user\n15. PAYMENTS : Amount of Payment done by user\n16. MINIMUM_PAYMENTS : Minimum amount of payments made by user\n17. PRCFULLPAYMENT : Percent of full payment paid by user\n18. TENURE : Tenure of credit card service for user","0338b891":"**Looking the heatmap for correlation**","9f9f9dd3":"**Importing libraries to start the project**","8b40e407":"**In this project we are going to try to develop customer segmentation based on credit card usage see if we can define a marketing strategy.\nThe data set prisents the usage behavior of about 9000 active credit card during the last 6 months. \nThe file contains 18 different columns.**","a6b4dce3":"**Looking dimension**","42331765":"**Looking is there a missing values**","ed9881e9":"**Looking pair plot for final model**","f17b87ca":"**Looking the number if clusters in data set**","c2a3adef":"**Making the cluster model with 8 clusters**","a6fec398":"**Looking the summary of data set**","3684984a":"**Using elbow method to see the number of cluster**"}}