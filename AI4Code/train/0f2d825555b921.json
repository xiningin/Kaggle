{"cell_type":{"90de0624":"code","5dbef5b0":"code","cea646a6":"code","3c5bc341":"code","55fcb480":"code","e55bd74b":"code","fef24fc3":"code","349880f0":"code","b6c021a2":"code","81e7f821":"code","05d00ad2":"code","80e862ba":"code","6fc694b6":"code","02665501":"code","dc31b70d":"code","90de4243":"code","e784cee0":"code","2bf8bcef":"code","da4c8eb8":"code","2390d320":"code","15841245":"code","bc216880":"code","6c3b5b8c":"code","f0c4a598":"code","b664d590":"code","2d89646e":"code","3f2f46ed":"code","aad926b6":"code","93005667":"code","83ca74c4":"code","2b6397ae":"code","de04b5e2":"code","67f7d8bb":"code","7d4fcc1f":"code","271f0b93":"code","bc0a3674":"code","7c5ecd28":"code","68f5becd":"code","3dc8f383":"code","440850ef":"code","13f5885c":"code","5fbc8a5c":"code","f1f439ca":"code","620b2422":"code","37ed862d":"code","1b470818":"code","d0595d6f":"code","ff4c542e":"code","a324aad8":"code","490f4c00":"code","334c50cb":"code","518fbbf5":"code","bb22bb5b":"code","9c6d45c2":"code","6d3602fd":"code","6859b7b5":"code","80214dac":"code","390438f6":"code","7ff46b13":"code","6d594c67":"markdown","a9f45aa8":"markdown","b3e833be":"markdown","dff13c52":"markdown","85babb66":"markdown","5c8382a6":"markdown","dc778655":"markdown","1de08a3c":"markdown","dae89848":"markdown","fd5cd361":"markdown","262381cb":"markdown","eb51a97b":"markdown","5caf96fa":"markdown","9d4e5217":"markdown","1589f8ba":"markdown","6cacfb01":"markdown","39790790":"markdown","a1ea3303":"markdown","fbf58c2e":"markdown","c59b7b9c":"markdown","1fa0c66a":"markdown","d1c8adda":"markdown","5cba9faa":"markdown","ffdf6d4f":"markdown","1d227895":"markdown","d8c2ab74":"markdown","83cc606c":"markdown","5db19b6a":"markdown","887bd218":"markdown","bf71946f":"markdown","af5fb73a":"markdown","f9ec28d7":"markdown"},"source":{"90de0624":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np # linear algebra \nimport math\nfrom sklearn import svm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nimport time\nfrom sklearn.model_selection import cross_val_score\nimport joblib\n\n# data visualization(for EDA)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.style.use('ggplot')\nsns.set(color_codes=True)\nimport plotly.express as px\nimport cufflinks as cf\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5dbef5b0":"df = pd.read_csv('..\/input\/pakistan-super-leaguepsl-ball-by-ball-20162020\/psl_formated.csv')\ndf.head()\n","cea646a6":"df['wicket'].unique()","3c5bc341":"df['wicket_text'].unique()","55fcb480":"df['wicket'].fillna(0,inplace = True)\ndf.head()","e55bd74b":"boundries_df = df.groupby(['psl_year']).agg(\n    fours = ('is_four','sum'),\n    sixes = ('is_six','sum'),\n    matches = ('match_number','max')\n    \n)\nboundries_df = boundries_df.reset_index()\nboundries_df","fef24fc3":"ax = boundries_df.plot('psl_year', 'fours', kind='bar')","349880f0":"ax = boundries_df.plot('psl_year', 'sixes', kind='bar')","b6c021a2":"boundries_df['fours_per_match'] = boundries_df['fours']\/boundries_df['matches']\nboundries_df['six_per_match'] = boundries_df['sixes']\/boundries_df['matches']","81e7f821":"ax = boundries_df.plot('psl_year', 'fours_per_match', kind='bar')","05d00ad2":"ax = boundries_df.plot('psl_year', 'six_per_match', kind='bar')","80e862ba":"wickets = df['wicket_text'].value_counts()\nwicket_dict = dict(wickets)\ndel_keys = []\nothers = 0\nfor key, value in wicket_dict.items():\n    if value <100:\n        others = others+value\n        del_keys.append(key)\nfor del_key in del_keys:\n    del(wicket_dict[del_key])\nwicket_dict['others']= others\nwicket_dict","6fc694b6":"plt.bar(*zip(*wicket_dict.items()))","02665501":"teams_df = {'Quetta' : df.loc[((df['team_1'] == \"Quetta Gladiators\") & (df['inning'] == 1)) | ((df['team_2'] == \"Quetta Gladiators\") & (df['inning'] == 2))],\n'Lahore' : df.loc[((df['team_1'] == \"Lahore Qalandars\") & (df['inning'] == 1)) | ((df['team_2'] == \"Lahore Qalandars\") & (df['inning'] == 2))],\n'Islamabad' : df.loc[((df['team_1'] == \"Islamabad United\") & (df['inning'] == 1)) | ((df['team_2'] == \"Islamabad United\") & (df['inning'] == 2))],\n'Peshawar' : df.loc[((df['team_1'] == \"Peshawar Zalmi\") & (df['inning'] == 1)) | ((df['team_2'] == \"Peshawar Zalmi\") & (df['inning'] == 2))],\n'Multan' : df.loc[((df['team_1'] == \"Multan Sultans\") & (df['inning'] == 1)) | ((df['team_2'] == \"Multan Sultans\") & (df['inning'] == 2))],\n'Karachi' : df.loc[((df['team_1'] == \"Karachi Kings\") & (df['inning'] == 1)) | ((df['team_2'] == \"Karachi Kings\") & (df['inning'] == 2))]\n}","dc31b70d":"team_runs = {}\nfor team_name, value in teams_df.items():\n    team_runs[team_name] = value['runs'].sum()\nteam_matches = {}\nfor team_name , value in teams_df.items():\n    team_matches[team_name] = value.groupby(['psl_year', 'match_number']).ngroups","90de4243":"plt.bar(*zip(*team_runs.items()))","e784cee0":"team_boundry_runs = {}\nfor team_name, value in teams_df.items():\n    sixes = value['is_six'].sum()\n    fours = value['is_four'].sum()\n    team_boundry_runs[team_name]= (sixes*6)+(fours*4)\n\nboundry_run_percentage = {}\nfor team, runs in team_runs.items():\n#     print (f\"{team} scored {(team_boundry_runs[team]\/runs)*100}% runs in boundries\")\n    boundry_run_percentage[team] = (team_boundry_runs[team]\/runs)*100","2bf8bcef":"plt.bar(*zip(*boundry_run_percentage.items()))","da4c8eb8":"dot_balls_played = {}\ntotal_balls_played = {}\nfor team, value in teams_df.items():\n    dot_balls_played[team]=value[value['runs']==0].shape[0]\n    total_balls_played[team]= value.shape[0]\n\ndot_ball_percentage ={}\nfor team , value in dot_balls_played.items():\n    dot_ball_percentage[team] = (value\/total_balls_played[team])*100\n\n# for team , value in dot_ball_percentage.items():\n#     print (f\"Team : {team} played {math.trunc(value)}% of dot balls\")","2390d320":"plt.bar(*zip(*dot_ball_percentage.items()))","15841245":"six_per_team = {}\nfor team, value in teams_df.items():\n    six_per_team[team] = value['is_six'].sum()\n\nsix_per_match ={}\nfor team ,value in six_per_team.items():\n    six_per_match[team] = value\/team_matches[team]\n\nplt.bar(*zip(*six_per_match.items()))","bc216880":"plt.bar(*zip(*six_per_team.items()))","6c3b5b8c":"four_per_team = {}\nfor team, value in teams_df.items():\n    four_per_team[team] = value['is_four'].sum()\n\nfour_per_match ={}\nfor team ,value in four_per_team.items():\n    four_per_match[team] = value\/team_matches[team]\n\nplt.bar(*zip(*four_per_match.items()))","f0c4a598":"runs_per_team = {}\nfor team, value in teams_df.items():\n    runs_per_team[team] = value['runs'].sum()\n\nruns_per_match ={}\nfor team ,value in runs_per_team.items():\n    runs_per_match[team] = value\/team_matches[team]\n\nplt.bar(*zip(*runs_per_match.items()))","b664d590":"wickets_per_team = {}\nfor team, value in teams_df.items():\n    wickets_per_team[team] = value['is_wicket'].sum()\n\nwickets_per_match ={}\nfor team ,value in wickets_per_team.items():\n    wickets_per_match[team] = value\/team_matches[team]\n\nplt.bar(*zip(*wickets_per_team.items()))","2d89646e":"plt.bar(*zip(*wickets_per_match.items()))","3f2f46ed":"# Method to calculate if the team batting second won or not\ndef is_winner(row):\n    if type(row['result']) == str:\n        if row['result'] in row['team_2']:\n            return 1\n        return 0\n    else:\n        return 0","aad926b6":"# Method to calculate if a player was dismissed on this ball or not\ndef is_out(row):\n    if type(row['player_dismissed']) == str:\n        return 1\n    else:\n        return 0","93005667":"# Splitting on Innings\nfirst_inning = df[df['inning']==1]\nsecond_inning = df[df['inning']==2]","83ca74c4":"# Calculating Target\ntotal_sum = first_inning.groupby([\"psl_year\",\"match_number\"]).agg(\n   target= (\"runs\",\"sum\")\n)","2b6397ae":"total_sum = total_sum.reset_index()","de04b5e2":"# Merging the DF\nnew_df = pd.merge(total_sum, second_inning,  how='left', left_on=['psl_year','match_number'], right_on = ['psl_year','match_number'])","67f7d8bb":"# Calculating if Second Inning team won or not \nnew_df['won'] = new_df.apply(is_winner, axis=1)","7d4fcc1f":"# Calculating balls left\nnew_df['balls_left'] = 120-(((new_df['over']-1)*6)+new_df['ball'])","271f0b93":"# Creating the Final Dataset\nfinal_df = new_df[['over','ball','total_runs','wickets','target','balls_left','won']]","bc0a3674":"final_df.head()","7c5ecd28":"final_df['runs_left'] = final_df['target']- final_df['total_runs']","68f5becd":"corrMatrix = final_df.corr()\nsns.heatmap(corrMatrix, annot=True)\nplt.show()","3dc8f383":"new_cols =['wickets','balls_left','runs_left','won']","440850ef":"psl_df = final_df[new_cols]\npsl_df.head()","13f5885c":"psl_df.isnull().sum()","5fbc8a5c":"psl_df.shape","f1f439ca":"psl_df = psl_df.apply (pd.to_numeric, errors='coerce')\npsl_df = psl_df.dropna()","620b2422":"psl_df.shape","37ed862d":"# X and Y Split\ny = psl_df.iloc[:,3]\nX = psl_df.iloc[:,:3]","1b470818":"# Train and Test Split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state = 42)","d0595d6f":"# Training Model\nstart = time.time()\nRF = RandomForestClassifier(n_estimators = 10000, max_depth=6, random_state=0)\nRF.fit(X_train, y_train)\nprint(f\"Time Taken to Train {time.time()-start} seconds\")","ff4c542e":"y_pred_test = RF.predict(X_test)","a324aad8":"accuracy_score(y_test, y_pred_test)","490f4c00":"print(classification_report(y_test, y_pred_test))","334c50cb":"current= {\n    \"wickets\":1,\n    \"balls_left\" :105,\n    \"runs_left\":137\n}\ncurrent_df = pd.DataFrame(current,index=[0])\nRF.predict_proba(current_df)","518fbbf5":"XGBC = xgboost.XGBClassifier()\nXGBC.fit(X_train, y_train)","bb22bb5b":"y_pred = XGBC.predict(X_test)\npredictions = [round(value) for value in y_pred]","9c6d45c2":"# evaluate predictions\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","6d3602fd":"print(classification_report(y_test, predictions))","6859b7b5":"current= {\n    \"wickets\":1,\n    \"balls_left\" :105,\n    \"runs_left\":137\n}\ncurrent_df = pd.DataFrame(current,index=[0])\nXGBC.predict_proba(current_df)","80214dac":"# Define model\nSVC_model = svm.SVC()\n\n# Fit model\nSVC_model.fit(X_train, y_train)\n\n#Predict Output \npredicted = SVC_model.predict(X_test)\na = accuracy_score(y_test,predicted)\nprint('The accuracy using SVC Classifier is:',format(a*100))","390438f6":"print(classification_report(y_test, predicted))","7ff46b13":"# Saving Model\njoblib.dump(XGBC, \".\/model.joblib\")","6d594c67":"# Making predictions with Random Forest Classifier","a9f45aa8":"#### Here, it shows that Lahore Qalanders played the most Dot balls.","b3e833be":"# Selecting particular columns for our model","dff13c52":"#### This bar chart shows that Islamabad United dealt more in boundaries to score the runs.","85babb66":"# Data preprocessing (Cleaning)","5c8382a6":"# Runs Scored Per Team","dc778655":"#### Her the above barchart shows that, Lahore Qalanders had the most wickets being fallen per match.","1de08a3c":"# Wickets Per Team","dae89848":"# Boundaries Count","fd5cd361":"#### Talking about sixes hit by the teams, Islamabad United placed the most sixes per match.","262381cb":"#### Hence, we replaced the nans in the 'wicket' column with 0.","eb51a97b":"# Team Based Runs","5caf96fa":"#### The above barchart shows that, Peshawar Zalmi had the most wickets being fallen per team.","9d4e5217":"Note : To understand this complete end-to-end Machine Learning Project, Log on to this Link : https:\/\/youtu.be\/WsqD43zwSQ0","1589f8ba":"#### In this section we found the following insights:\n- Most fours and fours per match were scored in 2019.\n- Most sixes and sixes per match were scored in 2018.","6cacfb01":"# Importing Libraries","39790790":"# Making predictions with XGBoost Classifier","a1ea3303":"#### Talking about sixes hit by the teams, Peshawar Zalmi placed the most sixes per team.","fbf58c2e":"# Team Based Percentage Runs in Boundaries","c59b7b9c":"# Dot Balls Played","1fa0c66a":"# Wickets","d1c8adda":"# Six Hit Per Team","5cba9faa":"# Data Manipulation to Extract Important Features","ffdf6d4f":"# Four Hit Per Team","1d227895":"#### Here, again it seems that all the teams scored almost similar number of runs per match.","d8c2ab74":"# Team Based Dataframes","83cc606c":"#### It seems a coincidence that all the teams scored almost similar number of fours per match.","5db19b6a":"# Defining Functions to bulit Prediction Model","887bd218":"#### Among all the teams Peshawar scored the most runs, followed by Islamabad United.","bf71946f":"# Making predictions with SVM ","af5fb73a":"# Loading and Importing Data","f9ec28d7":"#### Here, we found an interesting fact that most of the players lost their wickets by getting caught."}}