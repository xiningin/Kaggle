{"cell_type":{"91616485":"code","4f8b7d76":"code","eb3ad7e7":"code","d9f767d0":"code","78a2d7e6":"code","413a3a7e":"code","34bf8d28":"code","14d5bebf":"code","bf07fb28":"code","658688b4":"code","73dd18fc":"code","0b4017b1":"code","75b67fb4":"code","6a9ec7e0":"code","7da81e61":"code","b523e10f":"code","e1f4eaf2":"markdown","8d30c5a3":"markdown","4c50a3a7":"markdown","91d6fda2":"markdown","9c95623b":"markdown","f7993fd5":"markdown"},"source":{"91616485":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import confusion_matrix","4f8b7d76":"df = pd.read_csv(\"..\/input\/sonardataset\/sonar data.csv\", header=None)","eb3ad7e7":"df.head()","d9f767d0":"df.info()","78a2d7e6":"df.describe()","413a3a7e":"df[60].value_counts()","34bf8d28":"df.groupby(df[60]).mean()","14d5bebf":"X = df.drop(columns=60, axis=1)\nY = df[60]","bf07fb28":"X.shape, Y.shape","658688b4":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=2, stratify=Y)","73dd18fc":"x_train.shape, x_test.shape","0b4017b1":"model = RandomForestClassifier(n_estimators=100,oob_score=True,n_jobs=-1,min_samples_leaf=1,random_state=2,max_features=\"auto\",min_samples_split=10,criterion=\"gini\")","75b67fb4":"model.fit(x_train, y_train)","6a9ec7e0":"result = model.score(x_test, y_test)\nprint(\"Accuracy: %.3f%%\" % (result*100.0))","7da81e61":"y_pred = model.predict(x_test) ","b523e10f":"class_name = [\"M\", \"R\"]\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.tight_layout()\n\n\n# Compute confusion matrix\ncnf_matrix = confusion_matrix(y_test, y_pred)\nnp.set_printoptions(precision=2)\n\n# Plot non-normalized confusion matrix\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes=class_name,\n                      title='Confusion matrix')\n","e1f4eaf2":"## Importing the Dependencies","8d30c5a3":"## Model Evaluation","4c50a3a7":"## Confusion Matrix","91d6fda2":"## Model Training","9c95623b":"## Data Collection and Data Processing","f7993fd5":"## Splitting Data into Train and Test"}}