{"cell_type":{"a51f6747":"code","55acaf54":"code","f6a77af7":"code","18fd3542":"code","7d52c856":"code","d25bb314":"code","05811f06":"code","bb712566":"code","3f2b664d":"code","23274507":"code","87bf0d11":"code","2ba01494":"code","61e4c185":"code","163f48b6":"code","2144c519":"code","35a0c128":"code","959eab63":"code","4a59249e":"code","9c9ffcf1":"code","0731c87d":"code","573c1181":"code","6f0e8045":"code","bc6f80b9":"code","37b9b475":"code","22b412a4":"code","c118d133":"code","4f584782":"code","3954436f":"code","9f2afec0":"code","73992415":"markdown","b7516915":"markdown","b8133abd":"markdown","a8c686ca":"markdown","fdcfb9a2":"markdown","b266dcd6":"markdown","f55af897":"markdown","d7d9d177":"markdown","f3a69f09":"markdown","cc15d028":"markdown","8d0a0c80":"markdown","e4bcebee":"markdown","da9c74d0":"markdown","55840777":"markdown","7196d0b7":"markdown"},"source":{"a51f6747":"import tensorflow as tf\nprint(tf.version)\n","55acaf54":"rank1_tensor= tf.Variable([\"I\",\"Am\",\"Happy\"], tf.string) # Tensor of rank 1. Here we have only one list.\nrank2_tensor= tf.Variable([[\"I\",\"am\", \"Miss\"],[\"Chetali\",\"Arora\", \"Tatvamasi\"]], tf.string) # Tensor of rank 2. Here we have a list inside a list.","f6a77af7":"tf.rank(rank1_tensor) # rank is given by numpy = 1","18fd3542":"tf.rank(rank2_tensor) #rank is given by numpy = 2","7d52c856":"tf.rank(number) # rank is given by numpy = 0","d25bb314":"rank2_tensor.shape  #here we have 2 lists with each having 3 elements inside them. ","05811f06":"rank1_tensor.shape","bb712566":"# creation of a tensor with one dimension, namely a scalar.\n\nt1 = tf.constant(2, tf.int16)\n\nprint(t1)\n\nt2 = tf.constant([1,2,3], tf.int16)\nprint(t2)\n\nt3=tf.constant([[1,2],[3,4]], tf.int16)  #rank 2 tensor\nprint(t3)\n\ntf.rank(t2)","3f2b664d":"print(t2.dtype)","23274507":"# Tensorflow choosing the type of data automatically when not specified during the creation.\n\nstring= tf.Variable(\"this is a string\")\nprint(string.dtype)","87bf0d11":"type_float = tf.constant(3.123456789, tf.float32)\ntype_int = tf.cast(type_float, dtype=tf.int32)\nprint(type_float.dtype)\nprint(type_int.dtype)","2ba01494":"# creating a rank 3 tensor\n\nt4 = tf.constant([ [[1, 2],\n                           [3, 4], \n                           [5, 6]] ], tf.int16)\nprint(t4)\ntf.rank(t4)","61e4c185":"# creating a 3*3*3 Tensor\n\nimport numpy as np\nfrom numpy import array\n\nT = array([\n  [[1,2,3],    [4,5,6],    [7,8,9]],\n  [[11,12,13], [14,15,16], [17,18,19]],\n  [[21,22,23], [24,25,26], [27,28,29]],\n  ])\nprint(T.shape)\n\nprint(T)","163f48b6":"# a vector 0f 0s.\n\nprint(tf.zeros([10]))  ","2144c519":"# a matrix of 1s.\n    \nprint(tf.ones([10,10])) ","35a0c128":"# You can use the shape of a given matrix to make a vector of ones. \n# T tensor is defined in one of the above codes. \n\nprint(tf.ones(T.shape[0])) # here with 0 in the bracket, we are making use of the row attribute of the T tensor.","959eab63":"P = array([\n  [[1,2,3],    [4,5,6],    [7,8,9]],\n  [[11,12,13], [14,15,16], [17,18,19]],\n  ])\nprint(P.shape)\n\nprint(P)","4a59249e":"# here with 0 in the bracket, we are making use of the row attribute of the P tensor.\n\nprint(tf.ones(P.shape[0])) ","9c9ffcf1":"# here with 1 in the bracket, we are making use of the column attribute of the P tensor.\n\nprint(tf.ones(P.shape[1])) ","0731c87d":"# You can use the shape of a given tensor to make a tensor with matrix of ones. \n\nprint(tf.ones(T.shape))","573c1181":"# Creating a 5*5*5*5 tensor of zeros. It will be having 625 elements.\n\nt= tf.zeros([5,5,5,5])\nprint(t)","6f0e8045":"tensor1= tf.ones([1,2,3])\nprint(tensor1)  \n\n# here we have one interior list, inside that we have two lists, inside which we have three elements. \n# In total we have 6 elements in the tensor1. \n# Now there is a possibility to reshape this tensor while making sure the elements remain 6. ","bc6f80b9":"# let us now reshape tensor1\n\ntensor2= tf.reshape(tensor1, [2,3,1])\nprint(tensor2)\n\n# here we have two interior list, inside those we have three lists, inside which we have one element each. \n# In total we have 6 elements in the tensor2 as well. ","37b9b475":"# let us now reshape tensor2\n\ntensor3= tf.reshape(tensor2,[3,-1]) # here -1 tells the tensor to calculate the size of the dimension that needs to be there. \nprint(tensor3)                     # It will reshape the tensor to (3,2) to make the element count to be 6.  ","22b412a4":"# let us now reshape t tensor\n\nt1= tf.reshape(t,[625])\nprint(t1)","c118d133":"t2=tf.reshape(t1,[125,-1])\nprint(t2)","4f584782":"x = tf.constant([2.0], dtype = tf.float32)\nprint(tf.sqrt(x))\n\n# The output returned a tensor object and not the result of the square of 2. \n# In the example, you print the definition of the tensor and not the actual evaluation of the operation.","3954436f":"a = tf.constant([[1,2]], dtype = tf.int16)\nb = tf.constant([[3, 4]], dtype = tf.int16)\n\ntensor_add = tf.add(a, b)\nprint(tensor_add)","9f2afec0":"tensor_multiply = tf.multiply(a, b)\nprint(tensor_multiply)","73992415":"## Type of data\n\nA tensor can only have one type of data at a time. You can return the type with the property dtype.\n\nTensorFlow chooses the type of data automatically when the argument is not specified during the creation of the tensor. TensorFlow will guess what is the most likely types of data. For instance, if you pass a text, it will guess it is a string and convert it to string.","b7516915":"## Some Useful TensorFlow operators\n\nFollowing is a list of commonly used operations. The idea is the same. Each operation requires one or more arguments.\n\n* tf.add(a, b)\n* tf.substract(a, b)\n* tf.multiply(a, b)\n* tf.div(a, b)\n* tf.pow(a, b)\n* tf.exp(a)\n* tf.sqrt(a)\n\n\n### TensorFlow method to compute the square of a number\n\nThe square of a number is constructed with tf.sqrt(x) with x as a floating number.","b8133abd":"### Addition operator\n\nBoth tensors need to have the same shape.","a8c686ca":"# Tensor Flow #\n\nThe name \u201cTensorFlow\u201d is derived from the operations which neural networks perform on multidimensional data arrays or tensors! It\u2019s literally a flow of tensors. Tensorflow is an Open source Library for Numerical computation and Large-scale Machine Learning. It is designed in Python programming language. It provides a comprehensive ecosystem of tools for developers, enterprises, and researchers who want to push the state of the art of Machine Learning and build scalable ML powered applications. It is designed to help you build models easily with an intutive ease to use set of APIs that makes it simple for you to learn and impliment machine learning and deep learning and scientifc computing. \n\nIt provides you with a rich collection of tools for building models. These include, data preprocessing, data ingestion, model evaluation,visulation and serving. Besides building, you can also train and deploy your model anywhere with Tensorflow. In TensorFlow, all the operations are conducted inside a graph. The graph is a set of computation that takes place successively. Each operation is called an op node and are connected to each other.   \n\n\n","fdcfb9a2":"## Types of Tensors\n\nThere are different types of Tensors. Most commonly used ones are:\n\n* Variable\n* Constant\n* Placeholder\n* SparseTensor\n\nExcept Variable tensor, all the other tensors mentioned above are immutable, that is there value may not change during execution. So if we intend to potentially change the value of our tensor, we use Variable tensor.\n\n## Create a tensor of n-dimension\n\nIn this tutorial, you will learn how to create a tf.constant and a tf.Variable.","b266dcd6":"## Shape of a Tensor\nShape of a Tensor is the amount of elements that exist in each dimesion. To get the shape of a Tensor we use the following attribute:","f55af897":"### Multiplication Operator","d7d9d177":"### Changing Shape of a Tensor \n\nThere could be many shapes of a Tensor resulting in same number of elements. It makes it convenient to change the shape of a Tensor. Let us see this using an example of a Tensor of ones.","f3a69f09":"## Tensors\n\nA tensor is a generalization of vectors and matrices and is easily understood as a multidimensional array of numbers. \n\nA vector is a one-dimensional or first order tensor and a matrix is a two-dimensional or second order tensor.\n\nLike vectors and matrices, tensors can be represented in Python using the N-dimensional array (N-d array). TensorFlow and Numpy are quite similar. (Both are N-d array libraries!)\n\nAll tensors are immutable like Python numbers and strings, that is, you can never update the contents of a tensor, only create a new one.\n\nA tensor is denoted by a symbol followed by a collection of subscripts. The number of subscripts attached to a tensor defines the rank of the tensor. \n\nA tensor of rank zero (no subscripts) is nothing more than a familiar scalar. A tensor of rank one (one subscript) is simply a common vector. If we are working a problem in three-dimensional space, then\nthe vector will contain three components. \n\nExample: X, Yj, \u03c3ij , \u03b2klm","cc15d028":"The shape of the tensor given by (3,3,3) depicts that we have three interior lists, inside each of which we have three lists, and inside them we have three elements. \n\nThe number of elements of the above Tensor is given by the product of all the sizes of the shapes, that is, 3 * 3 * 3 = 27","8d0a0c80":"# Will try adding to it as I learn \ud83d\ude03 \ud83e\udd13","e4bcebee":"### Change the Type of Data\n\nIn TensorFlow, it is possible to change the type of data with tf.cast method.","da9c74d0":"## Rank\/Degree of Tensor\n\nRank\/degree gives the number of dimensions involved in the tensor.\n \n\n| Rank     | Object |\n| ----------- | ----------- |\n| 0      | Scalar       |\n| 1   | Vector        |\n| 2   | N\u00d7N matrx     |\n| >=3   | Tensor        |\n\n\n\nThe above are the tensors of rank 0. Examples of tensors of higher degrees:","55840777":"TensorFlow has useful commands to create a vector or a matrix filled with 0 or 1. For instance, if you want to create a 1-D tensor with a specific shape of 10, filled with 0, you can run the code below:","7196d0b7":"### To determine the Rank of a Tensor"}}