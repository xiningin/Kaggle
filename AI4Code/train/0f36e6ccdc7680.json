{"cell_type":{"c21e6db0":"code","ed4b124e":"code","b0067267":"code","4e482e20":"code","1d0f7231":"code","9a8a2e34":"markdown","ca54f2d8":"markdown","03e17b45":"markdown"},"source":{"c21e6db0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ed4b124e":"# Fits different models passed in the argument and spits out the metrics\n# metrics are calculated on both test and train data - train being in ()\n#############################################################################################\ndef Model_Comparision_Train_Test(AllModels, x_train, y_train, x_test, y_test):\n    return_df = pd.DataFrame(columns=['Model', 'MSE', 'RMSE', 'MAE'])\n    for myModel in AllModels:\n        myModel.fit(x_train, y_train)\n\n        #predict, confusion matrix metrics on train\n        y_pred_train = myModel.predict(x_train)\n        mse_train, rmse_train, mae_train = extract_metrics_from_predicted(y_train,y_pred_train)\n        #print(accuracy_train,sensitivity_train,prec_train,f1score_train)\n\n        #predict, confusion matrix metrics on test\n        y_pred_test = myModel.predict(x_test)\n        mse_test, rmse_test, mae_test = extract_metrics_from_predicted(y_test, y_pred_test)\n        #print(accuracy_test,sensitivity_test,prec_test,f1score_test)\n\n        #create a summary dataframe\n        summary = pd.DataFrame([[type(myModel).__name__,\n                                         ''.join([str(round(mse_test,3)), \"(\", str(round(mse_train,3)), \")\"]),\n                                         ''.join([str(round(rmse_test,3)), \"(\", str(round(rmse_train,3)), \")\"]),\n                                         ''.join([str(round(mae_test,3)), \"(\", str(round(mae_test,3)), \")\"])]],\n                                         columns=['Model', 'MSE', 'RMSE', 'MAE'])\n        return_df = pd.concat([return_df, summary], axis=0)\n\n    #remove index and make model index\n    return_df.set_index('Model', inplace=True)\n    return(return_df)\n\n\n\ndef extract_metrics_from_predicted(y_true, y_pred):\n    from sklearn.metrics import mean_squared_error,mean_absolute_error \n    mse = mean_squared_error(y_true, y_pred)\n    rmse = np.sqrt(mse)\n    mae = mean_absolute_error(y_true, y_pred)\n    return (mse, rmse,mae)","b0067267":"#base model\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\n#LR = LinearRegression()\n#DTR = DecisionTreeRegressor()\n#Abr = AdaBoostRegressor(base_estimator=DecisionTreeRegressor(max_depth=6), learning_rate=0.01, n_estimators=500)\n#Gbr = GradientBoostingRegressor()\nLasso = Lasso()\nRidge = Ridge()\nKNNR = KNeighborsRegressor()\nRFR = RandomForestRegressor(bootstrap=True,max_depth=80,max_features=3,min_samples_leaf=3, min_samples_split=8, n_estimators=500)\nXgbR = XGBRegressor(colsample_bytree=0.9,learning_rate=0.4,n_estimators=500,reg_alpha=0.4)\n\n#skLearn_Model_Comparision_Train_Test([LR, DTR, Abr, Gbr, KNNR, RFR, XgbR], X_train, np.ravel(y_train), X_test, np.ravel(y_test))\nskLearn_Model_Comparision_Train_Test([KNNR, RFR, XgbR, Lasso, Ridge], X_train, np.ravel(y_train), X_test, np.ravel(y_test))","4e482e20":"def mape(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","1d0f7231":"print('mape:',mape(y_test, preds_test))","9a8a2e34":"#Copy this Whole code Helps you to Find RMSE, MAE, MSE","ca54f2d8":"Kaggle is Executing with some Line Mismatching. You can get code in this link\nhttps:\/\/github.com\/UdayReddie\/Cheat_code.git","03e17b45":"This way helps you find All the Regression models output"}}