{"cell_type":{"44df0f00":"code","be55a36f":"code","146c884f":"code","93eeb09b":"code","0c590c28":"code","03d13ce8":"code","2a1700b4":"code","484a60f8":"code","8ad76c5f":"code","e08f3ed8":"code","fe04c5a7":"code","84281f6a":"code","8778ef80":"code","d250abad":"code","d6acf31a":"code","808fb0de":"code","199170c1":"code","2786e15c":"markdown","06fc325f":"markdown","efcfcd8c":"markdown","fe3d7cb6":"markdown"},"source":{"44df0f00":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","be55a36f":"\nfrom surprise import Reader, Dataset\n# Define the format\nreader = Reader(line_format='user item rating timestamp', sep='\\t')\n\n# 1. Rating dataset\nr_cols = ['user_id', 'movie_id', 'rating', 'unix_timestamp']\nratings = pd.read_csv('..\/input\/ml-100k\/u.data', sep='\\t', names=r_cols,\n                      encoding='latin-1')\n\ndata = Dataset.load_from_file('..\/input\/ml-100k\/u.data', reader=reader)\n\n","146c884f":"#ratings\nprint(ratings.shape)\nratings.head(4)","93eeb09b":"from surprise import NormalPredictor\nfrom surprise import Dataset\nfrom surprise.model_selection import cross_validate","0c590c28":"# Split data into 5 folds\ndata.split(n_folds=5)","03d13ce8":"# We'll use the famous NormalPredictor  algorithm from Random.\nalgo = NormalPredictor()\n","2a1700b4":"cross_validate(algo, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)","484a60f8":"# Retrieve the trainset.\ntrainset = data.build_full_trainset()\nalgo.fit(trainset)","8ad76c5f":"userid = str(196)\nitemid = str(302)\nactual_rating = 4\nprint(algo.predict(userid, 302, 4))","e08f3ed8":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Our 2-dimensional distribution will be over variables X and Y\nN = 60\nX = np.linspace(-3, 3, N)\nY = np.linspace(0, 5, N)\nX, Y = np.meshgrid(X, Y)\n\n# Mean vector and covariance matrix\nmu = np.array([0., 1.])\nSigma = np.array([[ 1. , -0.5], [-0.5,  1.5]])\n\n# Pack X and Y into a single 3-dimensional array\npos = np.empty(X.shape + (2,))\npos[:, :, 0] = X\npos[:, :, 1] = Y\n\ndef multivariate_gaussian(pos, mu, Sigma):\n    \"\"\"Return the multivariate Gaussian distribution on array pos.\n\n    pos is an array constructed by packing the meshed arrays of variables\n    x_1, x_2, x_3, ..., x_k into its _last_ dimension.\n\n    \"\"\"\n\n    n = mu.shape[0]\n    Sigma_det = np.linalg.det(Sigma)\n    Sigma_inv = np.linalg.inv(Sigma)\n    N = np.sqrt((2*np.pi)**n * Sigma_det)\n    # This einsum call calculates (x-mu)T.Sigma-1.(x-mu) in a vectorized\n    # way across all the input variables.\n    fac = np.einsum('...k,kl,...l->...', pos-mu, Sigma_inv, pos-mu)\n\n    return np.exp(-fac \/ 2) \/ N\n\n# The distribution on the variables X, Y packed into pos.\nZ = multivariate_gaussian(pos, mu, Sigma)\n\n# Create a surface plot and projected filled contour plot under it.\nfig = plt.figure(figsize=(20,10))\nax = fig.gca(projection='3d')\nax.plot_surface(X, Y, Z, rstride=3, cstride=3, linewidth=1, antialiased=True,\n                cmap=cm.viridis)\n\ncset = ax.contourf(X, Y, Z, zdir='z', offset=-0.15, cmap=cm.viridis)\n\n# Adjust the limits, ticks and view angle\nax.set_zlim(-0.15,0.2)\nax.set_zticks(np.linspace(0,0.2,5))\nax.view_init(27, -21)\n\nplt.show()","fe04c5a7":"import pandas as pd \n  \n# initialize list of lists \ndata = [[196,243,3], [186,302,3], [22,377,1],[244,51,5]] \n  \n# Create the pandas DataFrame \ndf = pd.DataFrame(data, columns = ['user_id', 'movie_id','ratings']) \n  \n# print dataframe. \ndf ","84281f6a":"from scipy.stats import multivariate_normal\nF = multivariate_normal(mu, Sigma)\nZ = F.pdf(pos)","8778ef80":"#CONVERTING DATAFRAME TO ARRAY\ndfarr = df.values\nprint(dfarr[0])\ndfarr","d250abad":"#CALCULATING COVARIANCE OF ARRAY\ncovarr = np.cov(dfarr)\ncovarr","d6acf31a":"#CALCULATING MEAN OF ARRAY\numean = np.mean(dfarr,axis=1)\numean\n","808fb0de":"import matplotlib.pyplot as plt\nx, y = np.mgrid[-1:1:.01, -1:1:.01]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x; pos[:, :, 1] = y\nrv = multivariate_normal([0.5, -0.2], [[2.0, 0.3], [0.3, 0.5]])\nplt.contourf(x, y, rv.pdf(pos))","199170c1":"# import matplotlib.pyplot as plt\n# plt.plot(x,y)","2786e15c":"Surprise also supports the RMSE and MAE measurements so we will use those to measure the performance of our algorithm.","06fc325f":"**WORK OUT EXMPLES**","efcfcd8c":"u.data file that contains all the user-item ratings.\nThe format of each line is userID itemID rating timestamp with a tab distance \\t between them.","fe3d7cb6":"**FOR SOLVING MULTIVARIABLE GAUSSIAN NORMAL DISTRIBUTION WE NEED TWO PARAMETERS MEAN AND COVARIANCE MATRIX**"}}