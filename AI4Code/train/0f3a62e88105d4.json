{"cell_type":{"ef12ca65":"code","6f7f5979":"code","cb107983":"code","f92517ba":"code","6dad2971":"code","f56a0240":"code","08f92c7e":"code","a078557f":"code","a4f76520":"code","5b6652ee":"code","c4e38050":"code","3779cecf":"code","3e0e5ce4":"code","aad70c28":"code","1d59ba5a":"code","838725a0":"code","92a2b4cc":"code","77c7b7f6":"code","ecb6385f":"code","a6378c0a":"code","15687a88":"code","b2bd9fff":"code","eaf525c6":"code","89bca067":"code","ff30fc68":"code","34312cfa":"code","76176307":"code","846801c3":"code","05b9c501":"code","1ef1adc7":"code","e4a059cc":"code","a88eb692":"code","1404c0c3":"code","b363fbca":"code","d990cd57":"code","f7f479e1":"code","df9ca727":"code","fefd2779":"code","16824f44":"code","a52b6436":"markdown","1777967b":"markdown","fa738d23":"markdown","97a4bc5b":"markdown","32fd34f1":"markdown","4b035ae3":"markdown","6f651f16":"markdown"},"source":{"ef12ca65":"!pip install json_lines","6f7f5979":"import numpy as np\nimport pandas as pd\nfrom pandas.io.json import json_normalize\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport random\nfrom wordcloud import WordCloud \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport json_lines\nfrom tqdm.notebook import tqdm","cb107983":"import tensorflow as tf\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)","f92517ba":"data0=[]\nwith open('..\/input\/youtubes-channels-dataset\/YouTubeDataset_withChannelElapsed.json','rb') as f:\n    for i,item in enumerate(json_lines.reader(f)):\n        if i<10000:\n            data0+=[item]","6dad2971":"data0[0][0]","f56a0240":"data0[0][0].keys()","08f92c7e":"cols = ['totalviews\/channelelapsedtime', 'channelId', 'videoCategoryId', 'channelViewCount', \n      'likes\/subscriber', 'views\/subscribers', 'videoCount', 'subscriberCount', 'videoId', \n      'dislikes\/views', 'channelelapsedtime', 'comments\/subscriber', 'likes\/views', \n      'channelCommentCount', 'videoViewCount', 'likes\/dislikes', 'comments\/views', \n      'totvideos\/videocount', 'elapsedtime', 'videoLikeCount', 'videoDislikeCount', \n      'dislikes\/subscriber', 'totviews\/totsubs', 'views\/elapsedtime', 'videoPublished', \n      'VideoCommentCount']","a078557f":"print(len(data0[0]))","a4f76520":"users0=json_normalize(data0[0][0])\nusers0","5b6652ee":"for i,item in tqdm(enumerate(data0[0])):\n    if 0<i and i<10000:\n        usersi = json_normalize(item)\n        users0 = pd.concat([users0,usersi])","c4e38050":"print(len(users0))","3779cecf":"N=list(range(10000))\ndata1=users0.copy()\ndata1['index0']=N","3e0e5ce4":"data1=data1.set_index('index0',drop=True)\ndata1","aad70c28":"data2=data1.drop(['channelId','videoId','videoPublished'],axis=1)\ndata2","1d59ba5a":"data2.info()","838725a0":"data2=data2.astype(float)","92a2b4cc":"data2.info()","77c7b7f6":"data2","ecb6385f":"target=['subscriberCount']\ndataY=data2[target[0]]\ndataX=data2.drop(target,axis=1)","a6378c0a":"print(dataY[0:5].T)\nprint()\nprint(dataX[0:5].T)","15687a88":"n=len(dataX)\nprint(n)\nrandom.seed(2021)\nrandom.shuffle(N)","b2bd9fff":"trainX=dataX.loc[N[0:(n\/\/4)*3]]\ntrainY=dataY.loc[N[0:(n\/\/4)*3]]\ntestX=dataX.loc[N[(n\/\/4)*3:]]\ntestY=dataY.loc[N[(n\/\/4)*3:]]","eaf525c6":"df_columns = list(dataX.columns)\nprint(df_columns)","89bca067":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","ff30fc68":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","34312cfa":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","76176307":"train_feat_df = to_feature(trainX)\ntest_feat_df = to_feature(testX)","846801c3":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","05b9c501":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","1ef1adc7":"y = trainY\nprint(y.shape)\nprint(type(y))","e4a059cc":"ydf=pd.DataFrame(y)\nydf","a88eb692":"import numpy as np\nfrom sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_ylabel('Predicted Train '+target[i],fontsize=12)\n    ax.set_xlabel('Actual Train '+target[i],fontsize=12)\n    ax.scatter(y,oof)","1404c0c3":"print(target)","b363fbca":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","d990cd57":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)","f7f479e1":"pred0 = np.array([model.predict(test_feat_df.values) for model in models])\nPRED = pred0[4]\nPRED[0:5]","df9ca727":"ANS=np.array(testY)\nANS[0:5]","fefd2779":"fig, ax = plt.subplots(figsize=(8,8))\nsns.histplot(np.log10(PRED), label='Predicted Test '+target[0], ax=ax, color='black',bins=100)\nsns.histplot(np.log10(oof), label='Predict Train '+target[0], ax=ax, color='C1',bins=100)\nax.legend()\nax.grid()","16824f44":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(target[0],fontsize=20)\nax.set_xlabel('Actual Test '+target[0],fontsize=12)\nax.set_ylabel('Predicted Test '+target[0],fontsize=12)\nax.scatter(ANS,PRED)","a52b6436":"# JSON data to DataFrame","1777967b":"#### 'Channel View Count' and 'Total Views\/Channel Elapsed Time' are important factors for 'Subscriber Count'.","fa738d23":"# Visualize importance","97a4bc5b":"# Train and Test setting","32fd34f1":"# Model","4b035ae3":"# Target setting","6f651f16":"# Predict"}}