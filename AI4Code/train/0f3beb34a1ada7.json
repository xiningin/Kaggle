{"cell_type":{"cfce9380":"code","39b2e785":"code","89c16606":"code","e0efd569":"code","1a3c0fd7":"code","f054de9e":"code","1d31f93c":"code","acdcf261":"code","cd1b0ca4":"code","72ab4644":"code","aa5a5411":"code","c3be0107":"code","90413e57":"code","f2ea3925":"code","bd5ec6f7":"code","95c6e479":"code","e5684df1":"code","e5fa87c6":"code","d7e12635":"code","8dbb87d5":"code","95e000ff":"code","8efe3a51":"code","bcfda7c1":"code","9012b60e":"code","8522514d":"code","acc70ce6":"code","72c8a06c":"code","f68507ac":"code","fe9f955c":"code","f4217830":"code","b0013711":"code","79f77a64":"code","ae86f45f":"code","fcbb1760":"code","a4ff1fdd":"code","83f6e2ce":"code","82e0716f":"code","d6dd3c81":"code","053151b4":"code","d87755d2":"code","462f76eb":"code","1e67aefa":"code","75938619":"code","a0324a08":"code","b00f52fc":"code","9845d865":"code","083741ac":"code","277a6a96":"code","cdb13889":"code","78037e24":"code","f9a30431":"code","a2f9126f":"code","d8d94753":"code","0d96f9f7":"code","d8c0aef1":"code","06208543":"code","491d5c50":"code","f4848d37":"code","99ac4f1e":"code","e27f6141":"code","ae1d6870":"code","d60ca12f":"code","d903768a":"code","542401c3":"code","d7767f10":"code","c27d865c":"code","167d8da4":"code","60ca1bd5":"code","1fbaa04d":"code","90057361":"code","09634ef8":"code","a1bbc42b":"code","72a145be":"code","86de05c4":"code","68e63745":"code","c038a140":"code","53f7e708":"code","e66d1709":"code","86a66e4c":"code","0dba219b":"code","85642c56":"code","453e14c4":"code","fdd2550f":"code","bd82e744":"code","7c4f6e2e":"code","28f20ea1":"code","b3cd1d39":"code","1680b855":"code","b7ac7b40":"code","2a3481de":"code","8e763129":"code","a5bf2d97":"code","5648ccc8":"code","e6c381c6":"markdown","e912b171":"markdown","c4bcfe7f":"markdown","2c7708b9":"markdown","7f73351f":"markdown","4c55fb45":"markdown","07701f62":"markdown","8ccbeff0":"markdown","ad7b1f3a":"markdown","6c4ab26d":"markdown","f91674e1":"markdown","5131b04f":"markdown","ad02e0d4":"markdown","3b4837ec":"markdown","6ff5e936":"markdown","e49d82f7":"markdown","b73dcee5":"markdown","e9252cf9":"markdown","a1bae047":"markdown","eaa75b02":"markdown","12c95371":"markdown","a4e871c4":"markdown","b6ffed64":"markdown","16462baf":"markdown","38b5d54d":"markdown","886dadc8":"markdown","bce182d6":"markdown","f98f4e7b":"markdown","02a7ee28":"markdown","4f08b8e7":"markdown","1b4d7b24":"markdown","e54d7f47":"markdown","ca60ac23":"markdown","4cfd5f13":"markdown","23d63bbc":"markdown","508f7ef0":"markdown","57bcfa30":"markdown"},"source":{"cfce9380":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39b2e785":"results_2020 = pd.read_csv(\"\/kaggle\/input\/stack-overflow-developer-survey-2020\/developer_survey_2020\/survey_results_public.csv\")\nschema_2020 = pd.read_csv(\"\/kaggle\/input\/stack-overflow-developer-survey-2020\/developer_survey_2020\/survey_results_schema.csv\")\npopulation_2020 = pd.read_csv(\"\/kaggle\/input\/population-by-country-2020\/population_by_country_2020.csv\")","89c16606":"len(results_2020.Country.value_counts().index)","e0efd569":"respondent_count = results_2020.shape[0]\nprint(\"Survey respondents :\", respondent_count)\n\n\n# How many respondents having NaN for Country?\ncountry_nan_count = results_2020.Country.isnull().sum()\nprint(\"Survey respondents not having any country: \", country_nan_count)","1a3c0fd7":"# Check if the respondents having nan for \"Country\" have any nan for the rest of the features\nnot_na_percents = results_2020[results_2020.Country.isnull()==True].notnull().mean()\nprint(\"Not-Nan Percent > 0 :\\n\" ,not_na_percents[not_na_percents>0])","f054de9e":"df = results_2020.dropna(subset = [\"Country\"], axis = 0)","1d31f93c":"def create_count_table(df, col_name):\n    '''\n    INPUTS:\n    df - (dataframe)- The dataframe containing related column\n    col_name (string)- Column name of the column of which values to be counted\n    \n    OUTPUT:\n    new dataframe containing columns:\n    - col_name:  \n    - Counts : Counts of items in target column\n    - Percent : Counts of item \/ Total count of column\n    \n    '''\n    counts = df[col_name].value_counts().values\n    items = df[col_name].value_counts().index\n    percent = np.round(counts \/ counts.sum()*100,2)\n    \n    new_table = pd.DataFrame({col_name:items, \"Counts\":counts, \"Percent\":percent})\n    \n    return new_table\n    ","acdcf261":"# Creating a dataframe including countries, counts and percent.\ncountry_count = create_count_table(df, \"Country\")\ncountry_count.head()","cd1b0ca4":"# Visualisation\n\n# Creating ax object\ncountry_count_filtered = country_count[country_count.Percent>1]\nax = country_count_filtered.plot(kind = \"bar\", x = \"Country\", y = \"Counts\",legend = False, figsize = (15,6), edgecolor = \"black\")\n\ni=0\nfor patch in ax.patches:\n    ax.text((patch.get_x()),\n            patch.get_height()+100,\n            country_count_filtered.Percent.values[i],\n            fontsize=9,\n            rotation=0,\n            color=\"red\")\n    i = i + 1\n\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.ylabel(\"Respondent Count and Percent\", fontsize = 12)\nplt.title(\"Respondent Counts and Percents According to Countries (Countries having min %1 respondents are shown)\", fontsize=14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.xticks(rotation = 45, fontsize = 9)\nplt.savefig(\"Respondent Counts and Percents According to Countries Countries having min %1 respondents are shown\")\nplt.show()","72ab4644":"# Creating new df with necessary columns from population_2020 dataframe\n\npop_df = population_2020[[\"Country (or dependency)\",\"Population (2020)\"]]\npop_df.rename(columns={\"Country (or dependency)\": \"Country\", \"Population (2020)\": \"Population\"}, inplace = True)\n\npop_df.info()","aa5a5411":"# Checking the Country names if there are differences between pop_df and country_count df\n\nnon_matches = sorted(set.difference(set(country_count.Country),set(pop_df.Country)))\nnon_matches\n","c3be0107":"# Manuel correction of non-matches in pop_df\n\n# correcting_list = [\"country name in country_count\", \"country name in pop_df\"]\ncorrecting_list = [['Brunei Darussalam','Brunei'],['Cape Verde',  'Cabo Verde'],['Congo, Republic of the...',  'Congo'],\n                   ['Czech Republic', 'Czech Republic (Czechia)'],['Democratic Republic of the Congo', 'DR Congo'],['Hong Kong (S.A.R.)', 'Hong Kong'],\n                   ['Kosovo', \"Kosovo\"],[\"Lao People's Democratic Republic\",'Laos'],['Libyan Arab Jamahiriya','Libya'],\n                   ['Micronesia, Federated States of...','Micronesia'],['Nomadic',\"Nomadic\"],['Republic of Korea','South Korea'],['Republic of Moldova', 'Moldova'],\n                   ['Russian Federation','Russia'],['Saint Vincent and the Grenadines','St. Vincent & Grenadines'],['Swaziland',\"Swaziland\"],\n                   ['Syrian Arab Republic','Syria'],['The former Yugoslav Republic of Macedonia', \"The former Yugoslav Republic of Macedonia\"],['United Republic of Tanzania','Tanzania'],\n                   ['Venezuela, Bolivarian Republic of...','Venezuela'],['Viet Nam','Vietnam']]\n\nfor x,y in correcting_list:\n    pop_df.loc[pop_df.Country == y, \"Country\"] = x\n    ","90413e57":"# Creating new column in country count for population info\n\n\ncountry_count[\"Population\"]= np.NaN   # creating new column containing 0 values\n\nfor k in country_count.Country:   # look for each country name in country_count\n    for g in pop_df.Country:      # look for each country name in pop_df\n        if k == g:                # if country names are same\n            country_count.Population[country_count.Country == k] = pop_df.Population[pop_df.Country == g].values\n            # get the population value of country from pop_df and write in corresponding cell in country_count","f2ea3925":"# Drop nan\ncountry_count.dropna(inplace = True)\n\n\n# Change data type to int\ncountry_count.Population = country_count.Population.astype(int)\n","bd5ec6f7":"country_count.info()","95c6e479":"\n#country_count[\"Population\"] = (country_count.Population-country_count.Population.min())\/(country_count.Population.max()-country_count.Population.min())\ncountry_count[\"Resp_Density*100k\"] = country_count.Counts\/country_count.Population*100000\n#country_count[\"norm\"] = (country_count.Pop_Density-country_count.Pop_Density.min())\/(country_count.Pop_Density.max()-country_count.Pop_Density.min())","e5684df1":"#country_count.iloc[:,3:] = (country_count.iloc[:,3:] - country_count.iloc[:,3:].min())\/(country_count.iloc[:,3:].max()-country_count.iloc[:,3:].min())\n\n#country_count.iloc[:,4:] = country_count.iloc[:,4:] \/country_count.iloc[:,4:].mean()","e5fa87c6":"country_count_sorted = country_count.sort_values(by=['Resp_Density*100k'], ascending=False)\ncountry_count_sorted[country_count.Percent >1]","d7e12635":"country_count_sorted.describe()","8dbb87d5":"\ncountry_count_sorted[country_count_sorted.Percent >1 ].plot.bar(\"Country\",[\"Percent\", \"Resp_Density*100k\"],figsize=(15,6), edgecolor = \"black\")\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Respondent Percent and Respondent Density (Respondent Count \/ Country Population) of Countries\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"Respondent Percent and Respondent Density of Countries\")\nplt.show()\n","95e000ff":"top_country_list = list(country_count[country_count.Percent >1].Country.values)\ntop_country_list","8efe3a51":"feature_list = [\"Age\",\"Age1stCode\",\"ConvertedComp\",\"Country\",\"EdLevel\",\"Employment\",\"Hobbyist\", \"UndergradMajor\",\"JobSat\",\"JobSeek\",\n                \"LanguageDesireNextYear\", \"LanguageWorkedWith\", \"MainBranch\",\"NEWEdImpt\",\"OrgSize\",\"WorkWeekHrs\",\"YearsCode\",\"YearsCodePro\"]","bcfda7c1":"# Create new df for top countries\ntop_country_df = df[df.Country.isin(top_country_list)][feature_list]\n","9012b60e":"# percentage of nulls of columns\ntop_country_df.isnull().mean()[top_country_df.isnull().mean()>0.25]","8522514d":"def get_language_percent(df, col_country, col_lang, top_country_list ):\n    \n        \n    '''\n    INPUT:\n    df - Dataframe\n    col_country - Column name in df (as string) where the countries are stored\n    col_lang - Language column in df (as string) where the languages are stored\n    top_country_list - A list containig country names for which popularity to be calculated\n    \n    OUTPUT:\n    sorted_lang_percent_table:\n    Overal Percentages of currently worked languages sorted as descending (as Series)\n    country_lang_percent_df:\n    Percentages of currently worked languages in Countries (as dataframe)\n    lang_list:\n    A list containing unique languages\n    \n    '''\n    \n    # create new df\n    new_df = df[[col_country,col_lang]]\n    \n    # dropp na\n    new_df.dropna(inplace = True)\n    \n    # create list for unique languages\n    lang_list = []\n    for each in list(new_df[col_lang].value_counts().index):\n        splited = each.split(\";\")\n        for each in splited:\n            lang_list.append(each)\n    lang_list = list(set(lang_list))\n\n    # Arranging LanguageWorkedWith column by\n    # seperating into several columns\n    for lang in lang_list:\n\n        new_df[lang] = new_df[col_lang].str.split(\";\")\n        new_df[lang] = [lang in row for row in new_df[lang]]\n        new_df[lang] = new_df[lang].astype(int).replace({False: 0, True: 1})\n    \n    # Percentages of languages \n    sorted_lang_percent_table = new_df.iloc[:,2:].mean().sort_values(ascending = False)\n    \n    \n    # Sorting languages descending and creating new list\n    sorted_lang_list = new_df.iloc[:,2:].mean().sort_values(ascending = False).index\n    \n    # Creating series for language statistics of each country\n    # and creating df from those series\n    series_list = []\n\n    for country in top_country_list:\n        country_lang_percent = new_df[new_df.Country == country].iloc[:,2:].mean().reindex(sorted_lang_list)\n        series_list.append(country_lang_percent)\n\n    country_lang_percent_df = pd.concat(series_list, axis = 1)\n    country_lang_percent_df.columns = top_country_list\n    country_lang_percent_df = country_lang_percent_df.transpose()\n    \n\n    return sorted_lang_percent_table, country_lang_percent_df, lang_list\n    ","acc70ce6":"# getting statistics for LanguageWorkedWith\nsorted_lang_percent_table, country_lang_percent_df, lang_list = get_language_percent(top_country_df, \"Country\", \"LanguageWorkedWith\",top_country_list )","72c8a06c":"sorted_lang_percent_table","f68507ac":"# Visualisation\nsorted_lang_percent_table.plot.bar(figsize=(15,6), edgecolor = \"black\")\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Languages\", fontsize = 12)\nplt.title(\"Working Language Percentage of Respondents\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"Working Language Percentage of Respondents\")\nplt.show()","fe9f955c":"country_lang_percent_df","f4217830":"# Visualisation\ncountry_lang_percent_df.iloc[:,:5].plot.bar(figsize = (20,4), width = 0.8, colormap= \"Set3\", edgecolor = \"black\", alpha = 0.8)\n#country_lang_percent_df.iloc[:,:5].plot(figsize = (20,4))\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Usage Percentage of Top 5 Languages in Top Countries\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"Usage Percentage of Top 5 Languages in Top Countries\")\nplt.show()","b0013711":"# getting statistics for LanguageDesireNextYear\nsorted_desired_lang_percent_table, country_desired_lang_percent_df, lang_list = get_language_percent(top_country_df, \"Country\", \"LanguageDesireNextYear\",top_country_list )","79f77a64":"sorted_desired_lang_percent_table","ae86f45f":"# Visualisation\nsorted_desired_lang_percent_table.plot.bar(figsize=(15,6), edgecolor = \"black\")\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Language\", fontsize = 12)\nplt.title(\"Desired Language Percentage of Respondents\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"Desired Language Percentage of Respondents\")\nplt.show()","fcbb1760":"country_desired_lang_percent_df","a4ff1fdd":"# Visualisation\ncountry_desired_lang_percent_df.iloc[:,:5].plot.bar(figsize = (20,4), width = 0.8, colormap= \"Set3\", edgecolor = \"black\", alpha = 0.8)\n#country_desired_lang_percent_df.iloc[:,:5].plot(figsize = (20,4))\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Desire Percentage of Top 5 Languages in Top Countries\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"Desire Percentage of Top 5 Languages in Top Countries\")\nplt.show()","83f6e2ce":"top_country_df.head()","82e0716f":"# Arranging EdLevel column\n\ntop_country_df[\"EdLevel\"] = top_country_df.EdLevel.str.split(\"\\(\", expand=True)[0]\n\n# Arranging Employment column\ntop_country_df.Employment = top_country_df.Employment.str.split(\", f\", expand = True)[0]\n\n# Arranging UndergradMajor column\ntop_country_df.UndergradMajor = top_country_df.UndergradMajor.str.split(\"\\,|\\(\", expand = True)[0]\n\n# Arranging OrgSize column\ntop_country_df.OrgSize = top_country_df.OrgSize.str.split(\"em|er\", expand = True)[0]\n\n# Dropping nulls\ntop_country_df.dropna(subset = [\"LanguageDesireNextYear\",\"LanguageWorkedWith\"], inplace = True)\n","d6dd3c81":"# Arranging Age1stCode column\n# Data type to be changed from object to int\n# Younger than 5 years  --- > 4\ntop_country_df.Age1stCode = [4 if each == \"Younger than 5 years\" else each for each in top_country_df.Age1stCode]\n\nAge1stCode_sum = sum([int(each) for each in top_country_df.Age1stCode.dropna(inplace = False)])\nAge1stCode_len = len([int(each) for each in top_country_df.Age1stCode.dropna(inplace = False)])\nAge1stCode_mean = Age1stCode_sum \/ Age1stCode_len\n\ntop_country_df.Age1stCode = top_country_df.Age1stCode.fillna(Age1stCode_mean)\ntop_country_df.Age1stCode = top_country_df.Age1stCode.astype(int)","053151b4":"# Arranging YearsCode column\n# Less than 1 year  --> 0.5\n# More than 50 years --> 51\n\ntop_country_df.YearsCode = [0.5 if each == \"Less than 1 year\" else  51 if each == \"More than 50 years\" else each for each in top_country_df.YearsCode]\n\nYearsCode_sum = sum([float(each) for each in top_country_df.YearsCode.dropna(inplace = False)])\nYearsCode_len = len([float(each) for each in top_country_df.YearsCode.dropna(inplace = False)])\nYearsCode_mean = YearsCode_sum \/ YearsCode_len\n\ntop_country_df.YearsCode = top_country_df.YearsCode.fillna(YearsCode_mean)\ntop_country_df.YearsCode = top_country_df.YearsCode.astype(float)","d87755d2":"# Arranging YearsCodePro column\n# Less than 1 year  --> 0.5\n# More than 50 years --> 51\ntop_country_df.YearsCodePro = [0.5 if each == \"Less than 1 year\" else  51 if each == \"More than 50 years\" else each for each in top_country_df.YearsCodePro]\n\nYearsCodePro_sum = sum([float(each) for each in top_country_df.YearsCodePro.dropna(inplace = False)])\nYearsCodePro_len = len([float(each) for each in top_country_df.YearsCodePro.dropna(inplace = False)])\nYearsCodePro_mean = YearsCodePro_sum \/ YearsCodePro_len\n\ntop_country_df.YearsCodePro = top_country_df.YearsCodePro.fillna(YearsCodePro_mean)\ntop_country_df.YearsCodePro = top_country_df.YearsCodePro.astype(float)","462f76eb":"top_country_df.WorkWeekHrs = top_country_df.WorkWeekHrs.fillna(top_country_df.WorkWeekHrs.mean())\ntop_country_df.Age = top_country_df.Age.fillna(top_country_df.Age.mean())","1e67aefa":"for each in [\"MainBranch\",\"Employment\",\"EdLevel\",\"JobSeek\",\"UndergradMajor\",\"NEWEdImpt\",\"JobSat\",\"OrgSize\"]:\n    top_country_df[each].fillna(top_country_df[each].value_counts().index[0], inplace=True)","75938619":"top_country_df.notnull().mean().sort_values(ascending = False)","a0324a08":"# Arranging LanguageDesireNextYear\n\nfor lang in lang_list:\n\n    top_country_df[lang] = top_country_df[\"LanguageDesireNextYear\"].str.split(\";\")\n    top_country_df[lang] = [lang in row for row in top_country_df[lang]]\n    top_country_df[lang] = top_country_df[lang].replace({False: 0, True: 1}).astype(int)\n    top_country_df.rename(columns={lang: \"Desired_{}\".format(lang)}, inplace = True)\ntop_country_df.drop([\"LanguageDesireNextYear\"], axis = 1, inplace = True)","b00f52fc":"# Arranging LanguageWorkedWith\n\nfor lang in lang_list:\n\n    top_country_df[lang] = top_country_df[\"LanguageWorkedWith\"].str.split(\";\")\n    top_country_df[lang] = [lang in row for row in top_country_df[lang]]\n    top_country_df[lang] = top_country_df[lang].replace({False: 0, True: 1}).astype(int)\n    top_country_df.rename(columns={lang: \"Worked_{}\".format(lang)}, inplace = True)\ntop_country_df.drop([\"LanguageWorkedWith\"], axis = 1, inplace = True)","9845d865":"top_country_df.head()","083741ac":"def get_pair_statistics(top_country_df, in_col_pair1, col_pair2, top_country_list):\n\n        \n    '''\n    INPUTS:\n    top_country_df - Dataframe in which the features to be investigated (as dataframe)\n    in_col_pair1 - Name of the column in which data to be grouped (as string)\n    col_pair2 - Name of the column which will be investigated in grouped data (as string)\n    top_country_list - country list in order the reindex the data (as list)\n    \n    OUTPUTS:\n    percents_df - Percentage table of col_pair2 in in_col_pair1 (as dataframe)\n    ovrl_percents_df - Percentage table of col_pair2 in overall sum of col_pair2 for each in_col_pair1 (as dataframe)\n    \n    '''\n    \n    # Create gropued df\n    grouped_df = top_country_df.groupby([in_col_pair1])[col_pair2]\n    \n    # Creating new df from groups in grouped df\n    pair1_list = []\n    series_list = []\n    for a,b in grouped_df:\n        pair1_list.append(a)\n        series_list.append(b.value_counts())\n    \n    # Creating new df with series\n    percents_df = pd.concat(series_list, axis = 1)\n\n    # Updating column names\n    percents_df.columns = pair1_list   \n    \n    # Copying new_df for relative percentage\n    ovrl_percents_df = percents_df.copy()\n\n    # Getting percentages\n    for col in percents_df.columns:\n        percents_df[col] = percents_df[col].map(lambda x:x\/(percents_df[col].sum())*100)\n    \n    # Getting relative percentages\n    ovrl_percents_df = ovrl_percents_df.div(ovrl_percents_df.sum(axis = 1), axis = 0)*100\n\n    # Switching columns and rows in both dfs\n    percents_df = percents_df.transpose()\n    ovrl_percents_df = ovrl_percents_df.transpose()\n\n    # Reindex both dfs according to top_country_list\n    percents_df = percents_df.reindex(top_country_list)\n    ovrl_percents_df = ovrl_percents_df.reindex(top_country_list)\n    \n    return percents_df, ovrl_percents_df\n","277a6a96":"undergradMajor_percent_in_countries_df, undergradMajor_ovrl_percent_in_countries_df = get_pair_statistics(top_country_df, \"Country\", \"UndergradMajor\", top_country_list)","cdb13889":"undergradMajor_percent_in_countries_df","78037e24":"# Visualisation\nundergradMajor_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Primary Field of Study Percentage of Respondents in Top Countries (Field count in country \/ Respondent Sum in Country)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"Primary Field of Study Percentage of Respondents in Top Countries\")\nplt.show()","f9a30431":"undergradMajor_ovrl_percent_in_countries_df","a2f9126f":"# Visualisation\nundergradMajor_ovrl_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Primary Field of Study Overall Percentage of Respondents in Top Countries (Field count in country \/ Field's Overall Count)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"Primary Field of Study Overall Percentage of Respondents in Top Countries\")\nplt.show()","d8d94753":"EdLevel_percent_in_countries_df, EdLevel_ovrl_percent_in_countries_df = get_pair_statistics(top_country_df, \"Country\", \"EdLevel\", top_country_list)\nEdLevel_percent_in_countries_df","0d96f9f7":"# Visualisation\nEdLevel_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Education Level Percentage of Respondents in Top Countries (E.Level Count in country \/ E.Level Total in Country)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"Education Level Percentage of Respondents in Top Countries\")\nplt.show()","d8c0aef1":"EdLevel_ovrl_percent_in_countries_df","06208543":"# Visualisation\nEdLevel_ovrl_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Education Level Overall Percentage of Respondents in Top Countries (E.Level Count in country \/ E.Level Total)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"Education Level Overall Percentage of Respondents in Top Countries\")\nplt.show()","491d5c50":"JobSat_percent_in_countries_df, JobSat_ovrl_percent_in_countries_df = get_pair_statistics(top_country_df, \"Country\", \"JobSat\", top_country_list)","f4848d37":"JobSat_percent_in_countries_df","99ac4f1e":"# Visualisation\nJobSat_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Job Satisfaction Percentage of Respondents in Top Countries (JobSat Count in country \/ JobSat Total in Country)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"Job Satisfaction Percentage of Respondents in Top Countries\")\nplt.show()","e27f6141":"JobSat_ovrl_percent_in_countries_df","ae1d6870":"# Visualisation\nJobSat_ovrl_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Job Satisfaction Overall Percentage of Respondents in Top Countries (JobSat Count in country \/ JobSat Total)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"Job Satisfaction Overall Percentage of Respondents in Top Countries\")\nplt.show()","d60ca12f":"Empl_percent_in_countries_df, Empl_ovrl_percent_in_countries_df = get_pair_statistics(top_country_df, \"Country\", \"Employment\", top_country_list)","d903768a":"# Visualisation\nEmpl_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Employment Percentage of Respondents in Top Countries (Employment Count in country \/ Employment Total in Country)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"Employment Percentage of Respondents in Top Countries\")\nplt.show()","542401c3":"# Visualisation\nEmpl_ovrl_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Employment Overall Percentage of Respondents in Top Countries (Employment Count in country \/ Employment Total\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"Employment Overall Percentage of Respondents in Top Countries\")\nplt.show()","d7767f10":"JobSeek_percent_in_countries_df, JobSeek_ovrl_percent_in_countries_df = get_pair_statistics(top_country_df, \"Country\", \"JobSeek\", top_country_list)","c27d865c":"# Visualisation\nJobSeek_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"JobSeek Percentage of Respondents in Top Countries (JobSeek Count in country \/ JobSeek Total in Country)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"JobSeek Percentage of Respondents in Top Countries\")\nplt.show()","167d8da4":"# Visualisation\nJobSeek_ovrl_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"JobSeek Overall Percentage of Respondents in Top Countries (JobSeek Count in country \/ JobSeek Total)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"JobSeek Overall Percentage of Respondents in Top Countries\")\nplt.show()","60ca1bd5":"MainBranch_percent_in_countries_df, MainBranch_ovrl_percent_in_countries_df = get_pair_statistics(top_country_df, \"Country\", \"MainBranch\", top_country_list)","1fbaa04d":"# Visualisation\nMainBranch_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"MainBranch Percentage of Respondents in Top Countries (MainBranch Count in country \/ MainBranch Total in Country)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"MainBranch Percentage of Respondents in Top Countries\")\nplt.show()","90057361":"# Visualisation\nMainBranch_ovrl_percent_in_countries_df .plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"MainBranch Overall Percentage of Respondents in Top Countries (MainBranch Count in country \/ MainBranch Total)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"MainBranch Overall Percentage of Respondents in Top Countries\")\nplt.show()","09634ef8":"NEWEdImpt_percent_in_countries_df, NEWEdImpt_ovrl_percent_in_countries_df = get_pair_statistics(top_country_df, \"Country\", \"NEWEdImpt\", top_country_list)","a1bbc42b":"# Visualisation\nNEWEdImpt_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Education Importance Percentage of Respondents in Top Countries (Answer Count in country \/ Answers Total in Country)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"Education Importance Percentage of Respondents in Top Countries\")\nplt.show()","72a145be":"# Visualisation\nNEWEdImpt_ovrl_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Education Overall Importance Percentage of Respondents in Top Countries (Answer Count in country \/ Answers Total)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.savefig(\"Education Overall Importance Percentage of Respondents in Top Countries\")\nplt.show()","86de05c4":"OrgSize_percent_in_countries_df, OrgSize_ovrl_percent_in_countries_df = get_pair_statistics(top_country_df, \"Country\", \"OrgSize\", top_country_list)","68e63745":"# Visualisation\nOrgSize_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Organization Size Percentage of Respondents in Top Countries (OrgSize Count in country \/ Answers Total in Country)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.show()","c038a140":"# Visualisation\nOrgSize_ovrl_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Organization Size Overall Percentage of Respondents in Top Countries (OrgSize Count in country \/ Answers Total)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.show()","53f7e708":"Hobbyist_percent_in_countries_df, Hobbyist_ovrl_percent_in_countries_df = get_pair_statistics(top_country_df, \"Country\", \"Hobbyist\", top_country_list)","e66d1709":"# Visualisation\nHobbyist_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Hobbyist Percentage of Respondents in Top Countries (Hobbyist Count in country \/ Answers Total in Country)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.show()","86a66e4c":"# Visualisation\nHobbyist_ovrl_percent_in_countries_df.plot.bar(figsize = (20,4), width = 0.8, colormap= \"Paired\", edgecolor = \"black\", alpha = 0.9)\nplt.legend(bbox_to_anchor=(1,1))\nplt.xticks(rotation = 45, fontsize = 9)\nplt.xlabel(\"Countries\", fontsize = 12)\nplt.title(\"Hobbyist Overall Percentage of Respondents in Top Countries (Hobbyist Count in country \/ Answers Total)\", fontsize = 14)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.show()","0dba219b":"#numericals = top_country_df.select_dtypes(exclude = \"object\")\nnumericals = [\"Age\",\"Age1stCode\",\"ConvertedComp\",\"WorkWeekHrs\",\"YearsCode\",\"YearsCodePro\"]\ncategoricals = [\"Country\",\"EdLevel\",\"Employment\",\"Hobbyist\",\"UndergradMajor\",\"JobSeek\",\"MainBranch\",\"NEWEdImpt\",\"OrgSize\"]","85642c56":"pd.set_option('display.max_columns', None)\n#pd.set_option('display.max_rows', None)","453e14c4":"top_country_df.JobSat.value_counts()","fdd2550f":"# Combining JobSat column\n# Delete \"Neither satisfied nor dissatisfied\"\n# Combine \"Very satisfied\" and \"Slightly satisfied\", label as \"Satisfied\" -->1\n# Combine \"Very dissatisfied\" and \"Slightly dissatisfied\", label as \"Dissatisfied\"-->0\n\n# Delete rows \"Neither satisfied nor dissatisfied\"\ndf = top_country_df.drop(top_country_df[top_country_df.JobSat == \"Neither satisfied nor dissatisfied\"].index)\n\ndf.JobSat = [1 if each == \"Very satisfied\" else \n             1 if each == \"Slightly satisfied\" else \n             0 if each == \"Very dissatisfied\"else \n             0 if each == \"Slightly dissatisfied\" else\n             each for each in df.JobSat]","bd82e744":"# Dropping nan in ConvertedComp\ndf = df.dropna()","7c4f6e2e":"# one hot encoding\ndf = pd.get_dummies(df,  columns = categoricals )","28f20ea1":"# Convert all rows except int and float to category\n#for each in new_categoricals:\n    #df[each] = df[each].astype(\"category\")","b3cd1d39":"#new_numericals = df.select_dtypes(include = [\"int\",\"float\"]).columns\n#new_categoricals = df.select_dtypes(include = \"category\").columns\n#print(\"new_numericals:\",new_numericals)\n#print(\"new_categoricals:\",new_categoricals)","1680b855":"# Normalization of numerical features\nfor each in numericals:\n    df[each] = (df[each] - df[each].min()) \/ (df[each].max() - df[each].min())\n","b7ac7b40":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","2a3481de":"# Split data into X and y\nX = df.drop(\"JobSat\", axis = 1)\ny = df.JobSat","8e763129":"# split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=7)","a5bf2d97":"# define the model\nmodel = LogisticRegression()\n# fit the model\nmodel.fit(X, y)\n# get importance\nimportance = model.coef_[0]\n\n# make predictions for test data and evaluate\ny_pred = model.predict(X_test)\npredictions = [round(value) for value in y_pred]\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","5648ccc8":"results_df = pd.DataFrame()\nresults_df[\"Rates\"] = importance.tolist()\nresults_df[\"Columns\"] = X.columns\n\nnew_index = results_df.Rates.sort_values(ascending = False).index\nsorted_results = results_df.reindex(new_index)\nfiltered_results = sorted_results[np.abs(sorted_results.Rates) > 0.1]\n\nplt.figure(figsize =(10,11))\nplt.barh(filtered_results.Columns, filtered_results.Rates)\nplt.grid(axis=\"both\", color=\"gray\", linewidth=0.1)\nplt.title(\"Negative and Positive Effected Features on Job Satistaction\",fontsize = 14)\nplt.savefig(\"Negative and Positive Effected Features on Job Satistaction\")\nplt.show()\n","e6c381c6":"<a id=\"Q2.4\"><\/a>\n### Q2.4 What are the desired percents of languages in Countries, Which language is desired most in which country?","e912b171":"<a id=\"Q3\"><\/a>\n## Q3: How is the distribution of following features in those countries ? (Primary field of study, Education Level, Job satisfaction, Employment and Job seeking status, Education importance)\n","c4bcfe7f":"From above graph : \n* Most popular language currently being worked is JavaScript with 67 % of usages among the respondents.\n* Followed by HTML\/CSS, SQL, Python, Java... ","2c7708b9":"* Most desired language is Python with 49.5% desire among the respondents.\n* Followed by JavaScript, HTML\/CSS, SQL and TypeScript.\n* So, Bash\/Shell\/PowerShell and Java seems to be losing popularity.\n* TypeScript seems to be getting more popular.","7f73351f":"Having the top respondent density and greater positive effect ratio on satisfaction, Sweden seems to have the most satisfied developers.<br>\n\nAlthough Pakistan has the greatest positive effect ratio on job satisfaction; because it has lowest respondent density, i can not conclude that it has the satisfied developers.<br>\n\nWe can conclude that most dissatisfied developers are from Israel, due to it\u2019s respondent density is higher and it has top negative effect ration among the countries.<br>\n\nAs programing languages, Python and TypeScript have increasing popularity, however JavaScript is still mostly used language.","4c55fb45":"<a id=\"Q1.1\"><\/a>\n### Q1.1 : What is the percentage of Respondents according to Countries?","07701f62":"* At least 70 % of the respondents in India and Pakistan have Bachelor's degree; which is the highest among the other countries.\n* However in overall, US has the big portion of Bachelor's Degrees than India, roughly 30 percent of Bachelor's Degree is in US and 23% is in India.\n* US has the big portion of respondents (50%) having master's degree,Canada at 2nd rank with 13%.\n* Spain has th big portion of repondents (18%) having professioal degree, Russia at 2nd rank with 13%.","8ccbeff0":"# Analysis of Stack Over Flow 2020 Survey Results","ad7b1f3a":"[i. Importing Required Packages](#i)<br>\n[ii. Importing Data](#ii)<br>\n\n[Q1 : How is the distribution of the respondents according to countries, does the distribution represents the countries well according to their population ?](#Q1)<br>\n* [Q1.1 : What is the percentage of Respondents according to Countries?](#Q1.1)<br>\n* [Q1.2 : What is Respondent Density According to Population?](#Q1.2)<br>\n\n[Q2. What are the most popular (currently being worked and desired to work next year) programing languages in mostly represented countries ?](#Q2)<br>\n* [Q2.1: What is the most popular language among the respondents ?](#Q2.1)<br>\n* [Q2.2 What are the usage percents of languages in Countries, Which language is being used most in which Country?](#Q2.2)<br>\n* [Q2.3: What is the most desired language next year ?](#Q2.3)<br>\n* [Q2.4 What are the desired percents of languages in Countries, Which language is desired most in which country?](#Q2.4)<br>\n\n[Q3: How is the distribution of following features in those countries ? (Primary field of study, Education Level, Job satisfaction, Employment and Job seeking status, Education importance)](#Q3)<br>\n* [Q3.1 How is the distribution of the primary fields in top countries?](#Q3.1)<br>\n* [Q3.2 How is the distribution of the education level in top countries?](#Q3.2)<br>\n* [Q3.3 How is the distribution of the job satisfaction in top countries?](#Q3.3)<br>\n\n[Q4: 4.What are the most effected features on job satistaction ?](#Q4)<br>\n\n\n[Conclusion](#5)<br>\n","6c4ab26d":"For the Population 2020 data, i used the data [here], thanks to Tanu N Prabhu.\n\n[here]:https:\/\/www.kaggle.com\/tanuprabhu\/population-by-country-2020\n","f91674e1":"<a id=\"i\"><\/a>\n### i. Importing Required Packages ","5131b04f":"* As a new starter on learning programing language, Python, i want to undestand the \n popularity of the languages in different countries.\n* I will define the countries which are mostly represented or mostly interested in Survey as the countries having  <br>\npercentage > 1% (so they are the countries shown on above graphs).<br>\n\n* For uncovering most popular languages, i will use the columns \"LanguageWorkedWith\" and \"LanguageDesireNextYear\"<br>\n\n* I will also create a new data frame containing the columns in which i am interested for further analysis.\n\n","ad02e0d4":"Only 3 features (Respondent, MainBranch and Hobbyist) have any value. Rest of the features are all empty.<br>\nThus, i will drop all rows that have missing Country and created new data frame","3b4837ec":"* Python is mostly desired in Pakistan, India and Israel,\n* JavaScript is mostly desired Brazil and Pakistan,\n* HTML\/CSS is mostly desired in Brazil, \n* SQL is mostly desired in Brazil, Italy and US,\n* TypeScript is mostly desired in Netherlands.","6ff5e936":"* Primary field of the respondents is Computer Science in all countries; roughly min 60% of respondent's primary field is computer science in each country. \n* From 2nd graph we can see that big portion of the computer science and information system employees, as well as fine arts and humanities dicipline, are in US.\n* In india, respondents are mostly from other engineering diciplines.","e49d82f7":"* I will use Sklearn library to create a Logistic Regression model.\n* Using model coefficients, features that has negative and positive effect on job satisfaction to be calculated.\n* Before creting model, i will prepare the data.","b73dcee5":"* Overal top 5 language are JavaScript, HTML, SQL, Python and Java from previous graph.\n* Still almost in all countries JavaScript at the first rank except Pakistan; in Pakistan HTML\/CSS has greater usage than JavaScript.\n* Altough Python is at 4th rank, it is at 2nd rank in Israel and at 4th rank some other countries.\n* HTML\/CSS is mostly used in Pakistan,<br>\n    SQL is mostly used in Italy,<br>\n    Python is mostly used in Israel and US,<br>\n    Java is mostly used in Italy and Germany among the other countries.","e9252cf9":"Knowing the individuals distribution in each country is a must to gain consistent insights with further analysis.<br>\nIf there is not sufficient respondent for a country in survey, this means that the country is not well represented.<br>\nThus, i need to understand percentage of respondents according to countries.","a1bae047":"<a id=\"Q1.2\"><\/a>\n### Q1.2 : What is Respondent Density According to Population?","eaa75b02":"* We see from above graph: Although the big portion (19.5 %)of the respondents from the US, <br>\nif we compare the respondent densities, it is in the 8th order.<br>\n* So, we can say that the people in the US, did not show big interest in survey according to respondent density.<br>\n* Most interested top five countries are Sweden, Netherlands, Israel, Canada and UK.<br>\n* Least intereste countries are Pakistan and India among the countries having percentage > 1%.<br>\n","12c95371":"<a id=\"Q2.1\"><\/a>\n### Q2.1: What is the most popular language among the respondents ?","a4e871c4":"<a id=\"Q1\"><\/a>\n## Q1 : How is the distribution of the respondents according to countries, does the distribution represents the countries well according to their population ?","b6ffed64":"<a id=\"Q3.3\"><\/a>\n### Q3.3 How is the distribution of the job satisfaction in top countries?","16462baf":"<a id=\"Q4\"><\/a>\n## Q4: What are the most effective features on job satisfaction?","38b5d54d":"<a id=\"Q2.3\"><\/a>\n### Q2.3: What is the most desired language next year ? ","886dadc8":"<a id=\"Q2\"><\/a>\n## Q2. What are the most popular (currently being worked and desired to work next year) programing languages in mostly represented countries ?","bce182d6":"<a id=\"Q3.2\"><\/a>\n### Q3.2 How is the distribution of the education level in top countries?","f98f4e7b":"* Features having effect rate > abs(0.15) are shown.\n* According to graph:\n* Top 3 features negatively effecting Job Satisfaction are age, actively looking for a job and age of startin to coding. So, in the elderly ages job satisfaction may decrease because of the personal expectation increases. As expected, respondents who are looking for a job would be dissatisfied. Respondents who started in early ages may be dissatisfied beacuse of they are well-qualified in their profession but the company they work may not be well-qualified comparing with their expectations. In the same way, as the professional coding years increase, satisfaction may decrease. Also increased working hours decreases satisfaction.\n* Among the countries; most dissatisfied countries are Israel, France, Poland, Spain, Brazil and Italy.\n* Primary-Elementary shcool graduations most dissatisfied, whereas having doctoral degrees mostly satisfied.\n* Most satisfied countries Pakistan, Sweden, US, Canada and Australia.","02a7ee28":"From above graph: Most interested Country in the survey is United States with a 19.46 % .\n And it is followed by India, United Kingdom and Germany.","4f08b8e7":"<a id=\"Q3.1\"><\/a>\n### Q3.1 How is the distribution of the primary fields in top countries?","1b4d7b24":"<a id=\"5\"><\/a>\n## Conclusion","e54d7f47":"<a id=\"ii\"><\/a>\n## ii. Importing Data","ca60ac23":"I will create a function to calculate percentage of respondents according to countries:","4cfd5f13":"## How many respondents according to countries?","23d63bbc":"I will use \"Country\" column in order to find the number of the respondent from each country.<br>\nAfterwards i will divide the sum of respondents by total number of respondents to get the mean.<br>\nFirst: I will check if there is any NaN row in Country column:","508f7ef0":"* We see that top 5 countries according to respondent percent are US, India, UK, Germany and Canada.<br>\n* I want to understand how is the distribution according to country population.<br>\n* Thus i will compare the Respondent Density of each country:\n\n     Respondent Density = Respondent number in country \/ Population of Country <br>\n     \n\u2022 I will use Population data to get the population values corresponding Countries","57bcfa30":"In this notebook, I analyzed the Stack Overflow data from 2020 and tried to cover below topics:<br>\n\n* How is the distribution of the respondents according to countries, does the distribution represents<br>\nthe countries well according to their population ?<br>\n\n* What are the most popular (currently being worked and desired to work next year) programing languages<br>\nin mostly represented countries ?<br>\n\n* How is the distribution of following features in those countries ?<br>\n\n    * Job satisfaction\n    * Primary field of study\n    * Education Level\n    * Employment and Job seeking status\n    * Education importance\n    * What are the most effected features on job satistaction ?\n\nI created a Logistic Regression Model, in order to predict the job satisfaction status.<br>\nVery dissatisfied and Slightly dissatisfied values are labelled as Dissatisfied;<br>\nNeither satisfied nor dissatisfied values are deleted from data and Slightly satisfied and Very satisfied are labelled as Satisfied.<br>\n\nThe main findings also can be found at the post available [here].<br>\n\n[here]:https:\/\/ozkanoztork.medium.com\/you-are-a-satisfied-developer-arent-you-95170cc45ad4"}}