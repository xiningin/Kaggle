{"cell_type":{"db844008":"code","b0c49594":"code","03979c54":"code","ec9dc908":"code","513c2a23":"code","5474e094":"code","e40a84f0":"code","26b13eec":"code","bcfffff7":"code","23a23ea9":"code","d87d88ea":"code","14e7b786":"code","86821a9b":"code","9440b05a":"code","4a840527":"code","1d5e3d7f":"code","a3db68f8":"code","74c46cdd":"code","b0809c3d":"code","a6441e9e":"code","e161b82d":"code","e3cf2893":"code","a1f3e7c9":"code","659b5983":"code","3d2363ca":"code","7d13345f":"code","ed56387b":"code","2b092f9a":"code","ca2da29c":"markdown","a6debe5b":"markdown","49397aab":"markdown","018454cb":"markdown","9edb3656":"markdown","f61f17e5":"markdown","2fb485f1":"markdown","1508d65c":"markdown","7c41fa56":"markdown","71f00b12":"markdown","13a4ba80":"markdown","f4e75077":"markdown","e83603f0":"markdown","34aba9bb":"markdown","9df484ff":"markdown","4f4d5773":"markdown","3ea098ed":"markdown","55fc71db":"markdown","69217c67":"markdown","29ad51d5":"markdown","6ca49076":"markdown","ee48055d":"markdown","1f0e0705":"markdown","f6d2575e":"markdown"},"source":{"db844008":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\n!pip install tensorboardcolab","b0c49594":"import h5py\nimport numpy as np\n\nh5f = h5py.File('\/kaggle\/input\/street-view-house-nos-h5-file\/SVHN_single_grey1.h5', 'r')\nh5f","03979c54":"X_train = h5f['X_train'][:]\ny_train = h5f['y_train'][:]\nX_test = h5f['X_test'][:]\ny_test = h5f['y_test'][:]\n\nh5f.close() #close this file","ec9dc908":"print('X_train:', X_train.shape)\nprint('y_train:', y_train.shape)\nprint('X_test:', X_train.shape)\nprint('y_test:', y_train.shape)","513c2a23":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nfig = plt.figure(figsize = (10,10))\n\nrows = 10\ncolumns = 10\nw = 10\nh = 10\n\nfor i in range(1, rows * columns + 1):\n    img = X_test[i]\n    fig.add_subplot(rows, columns,i)\n    plt.imshow(img, cmap = 'gray')\nplt.show()","5474e094":"print(X_train.shape) #before reshape\nimg_rows, img_cols = 32,32 #capturing this separately to be used later ","e40a84f0":"#For Fully Connected Network\nX_train_FC = X_train.reshape(X_train.shape[0], img_rows * img_cols) #32*32\nX_test_FC = X_test.reshape(X_test.shape[0], img_rows * img_cols)\nprint(X_train_FC.shape)\n","26b13eec":"#For Convolutional Neural Network\nX_train_CNN = X_train.reshape(X_train.shape[0], img_rows, img_cols, 1)\nX_train_CNN.shape\nX_test_CNN = X_test.reshape(X_test.shape[0], img_rows, img_cols, 1)\nprint(X_train_CNN.shape)\n\n#Shape of 1 image would be as given below, this would be useful while creating models\ninput_shape  = (img_rows, img_cols, 1)\nprint(input_shape)","bcfffff7":"X_train_FC[0]","23a23ea9":"X_train_CNN[0]","d87d88ea":"#For FC Network\nX_train_FC = X_train_FC.astype('float32')\nX_test_FC =  X_test_FC.astype('float32')\n\n#Normalizing the input\nX_train_FC = X_train_FC \/ 255.0\nX_test_FC = X_test_FC \/ 255.0\n\nprint(X_train_FC.shape)","14e7b786":"X_train_FC.max() #This is to cross check whether inputs have been normalized.","86821a9b":"#For CNN \nX_train_CNN = X_train_CNN.astype('float32')\nX_test_CNN =  X_test_CNN.astype('float32')\n\n#Normalizing the input\nX_train_CNN = X_train_CNN \/ 255.0\nX_test_CNN = X_test_CNN \/ 255.0\n\nprint(X_train_CNN.shape)","9440b05a":"X_train_CNN.max() #This is to cross check whether inputs have been normalized.","4a840527":"y_train","1d5e3d7f":"#convert class vectors to binary class metrics\nnum_classes = 10 # since we will only classify nos between 0-9\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)\ny_train[0]","a3db68f8":"y_test[0]","74c46cdd":"model_FC = Sequential()\nmodel_FC.add(Dense(100, input_shape = (1024, ), activation = 'relu')) #hidden layer\nmodel_FC.add(Dense(10, activation = 'softmax')) #output layer\nmodel_FC.summary()","b0809c3d":"model_FC.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\nmodel_FC.fit(X_train_FC, y_train, batch_size = 128, epochs = 10, validation_data = (X_test_FC, y_test))","a6441e9e":"plt.figure(figsize = (2,2))\nplt.imshow(X_test_FC[5000].reshape(32,32), cmap = 'gray') #image, reshape size, cmap\nplt.show()\nprint(np.argmax(model_FC.predict(X_test_FC[5000].reshape(1,1024))))\n\nplt.figure(figsize = (2,2))\nplt.imshow(X_test_FC[9876].reshape(32,32), cmap = 'gray') #image, reshape size, cmap\nplt.show()\nprint(np.argmax(model_FC.predict(X_test_FC[9876].reshape(1,1024))))","e161b82d":"#Set model hyperparameters\nnum_classes = 10\n\n#Define the layers of the model\nmodel_CNN = Sequential()\n\n#1. Conv Layer\nmodel_CNN.add(Conv2D(32, kernel_size = (3,3), activation = 'relu', input_shape = input_shape))\n\n#2. Conv Layer\nmodel_CNN.add(Conv2D(64, kernel_size = (3,3), activation = 'relu', input_shape = input_shape))\n\n#3. MaxPooling Layer\nmodel_CNN.add(MaxPooling2D(pool_size = (2,2)))\n\n#4. Dropout this prevents model from overfitting\nmodel_CNN.add(Dropout(0.25))\n\n#5. Flatten Layer\nmodel_CNN.add(Flatten())\n\n#6. Fully Connected Layer\nmodel_CNN.add(Dense(128, activation = 'relu'))\n\n#7. Dropout\nmodel_CNN.add(Dropout(0.5))\n\n#8. Fully Connected Layer\nmodel_CNN.add(Dense(num_classes, activation = 'softmax'))\n\nmodel_CNN.summary()","e3cf2893":"model_CNN.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])","a1f3e7c9":"#Initializing the tensorboard callback for visualization of training\n\n#For COLAB\n#Import tensorboard colab modules for creating a tensorboard call back which will pass in model.fit function\n\n#from tensorboardcolab import TensorBoardColab, TensorBoardColabCallback\n#from time import time\n\n#Tensorboard callback is going to be added to model.fit function to draw graphs of loss values after every epoch\n#tbc = TensorBoardColab()\n\n#For KAGGLE\n# Load the extension and start TensorBoard\n\n%load_ext tensorboard\n%tensorboard --logdir logs\nimport tensorflow as tf\ntensorboard_callback = tf.keras.callbacks.TensorBoard(\"logs\")","659b5983":"#Adding Early Stopping function to the Fit function is going to stop the training. \n#That is, when the validation loss doesn't change even by '0.001' for more than 10 continuous epochs\n\nearly_stopping = EarlyStopping(monitor = 'val_loss', min_delta = 0.001, patience = 10)\n\n#Adding Model Checkpoint callback to the fit function is going to save the weights whenever the val_loss achieves a new low value\n\nmodel_checkpoint = ModelCheckpoint('svhn_cnn_checkpoint_{epoch:02d}_loss{val_loss:.4f}.h5',\n                                  monitor = 'val_loss',\n                                  verbose = 1,\n                                  save_best_only = True,\n                                  save_weights_only = True,\n                                  mode = 'auto',\n                                  period = 1)","3d2363ca":"model_CNN.fit(X_train_CNN, y_train,\n             batch_size = 128,\n             epochs = 10,\n             verbose = 1,\n             validation_data = (X_test_CNN, y_test))\n             #callbacks = [tensorboard_callback, early_stopping, model_checkpoint])","7d13345f":"score = model_CNN.evaluate(X_test_CNN, y_test)\nprint('Test Loss: ', score[0])\nprint('Test Accuracy: ', score[1])","ed56387b":"plt.figure(figsize = (2,2))\nplt.imshow(X_test_CNN[30].reshape(32,32), cmap = 'gray') #image, reshape size, cmap\nplt.show()\nprint(np.argmax(model_CNN.predict(X_test_CNN[30].reshape(1,32,32,1))))\n\nplt.figure(figsize = (2,2))\nplt.imshow(X_test_CNN[50].reshape(32,32), cmap = 'gray')\nplt.show()\nprint(np.argmax(model_CNN.predict(X_test_CNN[50].reshape(1,32,32,1))))\n\nplt.figure(figsize = (2,2))\nplt.imshow(X_test_CNN[100].reshape(32,32), cmap = 'gray') #image, reshape size, cmap\nplt.show()\nprint(np.argmax(model_CNN.predict(X_test_CNN[100].reshape(1,32,32,1))))\n\nplt.figure(figsize = (2,2))\nplt.imshow(X_test_CNN[230].reshape(32,32), cmap = 'gray') #image, reshape size, cmap\nplt.show()\nprint(np.argmax(model_CNN.predict(X_test_CNN[230].reshape(1,32,32,1))))\n\nplt.figure(figsize = (2,2))\nplt.imshow(X_test_CNN[1000].reshape(32,32), cmap = 'gray') #image, reshape size, cmap\nplt.show()\nprint(np.argmax(model_CNN.predict(X_test_CNN[1000].reshape(1,32,32,1))))","2b092f9a":"model_CNN.save('.\/cnn_svhn.h5')\nmodel_CNN.save_weights('.\/cnn_svhn_weights.h5')","ca2da29c":"## Using Tensorboard for training Visualization","a6debe5b":"Next we have to set 3 things: \n\n**\n* Loss function\n* Optimizers\n* Metrics\n**\n\nThink of it as Car is ready, to drive it around we need Keys, Fuel et all.. just like that these 3 things are very important for the model to learn and correct itself. This is the essence of Deep Learning.","49397aab":"**Lets visualize some predictions.**","018454cb":"For FC, Keras expects data to be in the format of **No. of Examples, Height * Width**\n\nFor CNN, Keras expects data to be in the format of **No. of Examples, Height, Width, No. of Channels**\n\nTherefore, we have to reshape the data accordingly.","9edb3656":"**Showing the first 100 test images, we have to build a model that would classify these images accurately. **","f61f17e5":"We have reshaped the images into format as accepted by Keras. Lets see what constitutes the training data, its a long list of arrays as seen below.","2fb485f1":"**Save the trained weights and model in .h5 file**","1508d65c":"We have a developed a very basic FC network that easily gives us an accuracy of 56% which is not bad.","7c41fa56":"## Visualize the dataset","71f00b12":"**Computer Vision is a field of study that seeks to develop computers to 'see' i.e visualize real world in the form of images, videos.\n\nIn this notebook, we attempt to teach computers to read house numbers that were captured by Google street view cars. These house numbers come in all shapes and sizes, our model should be intelligent enough to remove the noise from the image that may have crept in and identify numbers accurately.\n**\n\nWe would demonstrate 2 approaches:\n* Fully Connected Network\n* Convolutional Neural Network\n\n**Code Structure:**\n* Import packages, Visualize dataset\n* Pre-process the input to be fit into the model\n* Build Fully Connected Network\n* Build Convolutional Neural Network\n* Check Model accuracy\n* Visualize Model predictions\n\n*Special thanks to: https:\/\/machinelearningmastery.com\/what-is-computer-vision\/* This is a treasure trove of everything on Machine Learning","13a4ba80":"**Adding more layers into this model would further improve accuracy.**\n\n**This kernel is a work in progress...**","f4e75077":"Set Loss, Optimizer, Metrics for training","e83603f0":"**To understand the breadth and depth of the data, lets check shape of data.**","34aba9bb":"## Import train and test sets","9df484ff":"We need to preprocess this i.e normalize the input. This ensures none of the columns would dominate the other.","4f4d5773":"## Load the data","3ea098ed":"**Fit the model to dataset**","55fc71db":"We will use 2 approaches to classify these images.\n* Fully Connected Network\n* Convolutional Neural Network","69217c67":"**What is this and why do we need them ?**\n\nWhile training a NN, we often come across the problem of finding the right no. of training epochs to use. \n* Too many epochs - Training dataset is overfit\n* Too few epochs - Training dataset is underfit\n\nEarly stopping is a method that allows us to specify an arbitrary large no. of training epochs and stop training once the model performance stops improving on validation set.\n\nWhile we do this, we want the model to save our best weights this is where Model checkpoint comes in handy.","29ad51d5":"**CNN improves our accuracy from 56% to 89%. Thereby proving CNN performs better than FC for Computer Vision problems.  Now that we have fitted the model, lets also evaluate test set.**","6ca49076":"### Initializing Early stopping and Model checkpoint callbacks","ee48055d":"## Build a Convolutional Neural Network","1f0e0705":"Now that we have normalized the input, lets check whether y_train are in the right format to be inserted into the model or not. As we observe below, it needs to be converted into One Hot Encoding vectors. Else it would lead to one of the column dominating the others.","f6d2575e":"## Build a Fully Connected Network"}}