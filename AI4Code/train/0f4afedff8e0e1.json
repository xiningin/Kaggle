{"cell_type":{"e8146eec":"code","2b0db73c":"code","f405f964":"code","26feeb54":"code","f51f9db9":"code","3638c7de":"code","752612db":"code","d1bc99e7":"code","49e21269":"code","8aff6922":"code","8792f1b6":"code","7aa32c49":"code","165d6955":"code","1145fe51":"code","bad39411":"code","089179a1":"code","c434a3e7":"code","5f10c532":"code","3942efe0":"code","1d28b54d":"code","d0ef6b2d":"code","dc3b2d33":"code","cf2b9f8d":"code","a80a7ed8":"code","c7e1550f":"code","9b0d1841":"code","d7bba65c":"code","aed7767e":"code","27417577":"code","5848db93":"code","611ec982":"code","3e07a406":"code","5f60d50b":"code","60094ca4":"code","020cfd55":"code","027fe304":"code","fa0a5541":"code","fbe9d1de":"code","c52fbf3c":"code","373aeeba":"code","fca545ab":"code","930c1b35":"code","7bb1a0bf":"code","29caa666":"code","a80a153b":"code","63118124":"code","9819aacf":"code","024a1d13":"code","d5c1f7b3":"code","2adb2b50":"code","a0ae2c48":"code","24eb8f30":"code","6a88618f":"code","71b6ed99":"code","cacc99a9":"code","808b0da8":"code","2eb70786":"code","4cfec6b5":"code","0c858eed":"code","d8854000":"code","55c0af55":"code","e69954e7":"code","d355cad3":"code","529a651c":"code","71bb6966":"code","f422d0ed":"code","73569bc6":"code","265ea9bf":"code","69aeab54":"markdown","4096f3ed":"markdown","550601a3":"markdown","003b8b29":"markdown","660f400d":"markdown","f916c1f1":"markdown","9c5d0f22":"markdown","dea69d6d":"markdown","9d0c71f0":"markdown","3e7f5c50":"markdown","5bf9b522":"markdown"},"source":{"e8146eec":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","2b0db73c":"base_dir='\/kaggle\/input\/acea-water-prediction'","f405f964":"os.listdir(base_dir)","26feeb54":"aq_d=pd.read_csv(os.path.join(base_dir,'Aquifer_Doganella.csv'))\naq_d.head()","f51f9db9":"def find_missing_values(df):\n    missing_val_tbl=pd.DataFrame(df.isnull().sum(),columns=['Count'])    \n    return missing_val_tbl","3638c7de":"def display_missing_val(missing_val_tbl, title):\n    \n    plt.figure(figsize=(15,15))\n    missing_val_tbl.sort_values(by='Count',ascending=True).plot(kind='barh')\n    plt.title(title)\n    plt.show()","752612db":"display_missing_val(find_missing_values(aq_d),'Missing values for Aquifer_Doganella')","d1bc99e7":"aq_a=pd.read_csv(os.path.join(base_dir,'Aquifer_Auser.csv'))\naq_a.head()","49e21269":"display_missing_val(find_missing_values(aq_a),'Missing values for Aquifer_Auser')","8aff6922":"aq_l=pd.read_csv(os.path.join(base_dir,'Aquifer_Luco.csv'))\naq_l.head()","8792f1b6":"display_missing_val(find_missing_values(aq_l),'Missing values for Aquifer_Luco')","7aa32c49":"aq_p=pd.read_csv(os.path.join(base_dir,'Aquifer_Petrignano.csv'))\naq_p.head()","165d6955":"display_missing_val(find_missing_values(aq_p),'Missing values for Aquifer_Petrignano')","1145fe51":"ws_a=pd.read_csv(os.path.join(base_dir,'Water_Spring_Amiata.csv'))\nws_a.head()","bad39411":"display_missing_val(find_missing_values(ws_a),'Missing values for Water_Spring_Amiata')","089179a1":"ws_m=pd.read_csv(os.path.join(base_dir,'Water_Spring_Madonna_di_Canneto.csv'))\nws_m.head()","c434a3e7":"display_missing_val(find_missing_values(ws_m),'Missing values for Water_Spring_Madonna_di_Canneto')","5f10c532":"ws_l=pd.read_csv(os.path.join(base_dir,'Water_Spring_Lupa.csv'))\nws_l.head()","3942efe0":"display_missing_val(find_missing_values(ws_m),'Missing values for Water_Spring_Lupa')","1d28b54d":"all_ws={'Amiata':ws_a,'Madonna_di_Canneto':ws_m,'Lupa':ws_l}","d0ef6b2d":"def analyse_heatmap(src,title='', thres=.6):\n    print(f'Heatmap for {title}')\n    fig, ax=plt.subplots(1,1,figsize=(15,12))\n\n    corr=src.corr()\n    mask=np.tril(np.ones_like(corr, dtype=bool))\n    mask[(abs(corr)<thres) & (mask==False)]=True\n    sns.heatmap(corr,mask=mask,ax=ax,vmin=-1, vmax=1, annot=True)\n    ax.hlines(range(0, src.shape[1]),*ax.get_xlim(), lw=1)\n    ax.vlines(range(0, src.shape[1]), *ax.get_xlim(), lw=1)\n    plt.show()","dc3b2d33":"analyse_heatmap(ws_a, 'Amiata' )","cf2b9f8d":"analyse_heatmap(ws_m,'Madonna_di_Canneto',0)","a80a7ed8":"print(aq_d.info())","c7e1550f":"aq_d.shape","9b0d1841":"aq_d.columns","d7bba65c":"river_a=pd.read_csv(os.path.join(base_dir,'River_Arno.csv'))\nriver_a.head()","aed7767e":"display_missing_val(find_missing_values(river_a),'Missing values for River_Arno')","27417577":"fig, ax=plt.subplots(1,1,figsize=(15,12))\n\ncorr=river_a.corr()\nmask=np.tril(np.ones_like(corr, dtype=bool))\nmask[(abs(corr)<.6) & (mask==False)]=True\nsns.heatmap(corr,mask=mask,ax=ax,vmin=-1, vmax=1, annot=True)\nax.hlines(range(0, river_a.shape[1]),*ax.get_xlim(), lw=1)\nax.vlines(range(0, river_a.shape[1]), *ax.get_xlim(), lw=1)\nplt.show()","5848db93":"corr_pos=corr.abs()\nhi_corr_val=np.where(corr_pos>.6)\nhi_corr_val= [ (corr_pos.columns[x], corr_pos.columns[y]) for x, y in zip(*hi_corr_val) if x!=y and x<y]","611ec982":"# plotting correlated features\nriver_a.index=river_a.Date\ndf=river_a.loc['01\/01\/2020':'01\/05\/2020']\nfig, ax=plt.subplots(5,3, figsize=(20,20))\nax=ax.ravel()\nfor i in range(len(hi_corr_val[:15])):    \n    ax[i]=df[[hi_corr_val[i][0],hi_corr_val[i][1],'Date']].plot(x='Date', ax=ax[i])\n    ax[i].set_title(hi_corr_val[i][0]+' vs '+hi_corr_val[i][1])\nplt.subplots_adjust(wspace=.3, hspace=.3)\nplt.show()\n","3e07a406":"river_a.index=river_a.Date\nriver_a=river_a.drop(columns=['Date'], axis=1)","5f60d50b":"\nriv_cols=river_a.columns\nfig , ax= plt.subplots(4,len(riv_cols)\/\/4,figsize=(30,25))\naxes=ax.ravel()\n\nfor  i in range(len(river_a.columns)):    \n    axes[i]=river_a[riv_cols[i]].plot(ax=axes[i])\n    axes[i].set_title(riv_cols[i])\nplt.subplots_adjust(wspace=.3, hspace=.3)\nplt.show()","60094ca4":"river_a.Hydrometry_Nave_di_Rosano.rolling(window=12).mean().plot(figsize=(10,8))","020cfd55":"df_r=river_a.Hydrometry_Nave_di_Rosano","027fe304":"train=df_r.loc['01\/01\/2020':'30\/05\/2020']\ntest=df_r.loc['01\/06\/2020':]","fa0a5541":"train=train.dropna()","fbe9d1de":"# Fit an AR model\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom statsmodels.tsa.ar_model import AR, ARResults","c52fbf3c":"model=AR(train)\n","373aeeba":"ARfit=model.fit(method='mle')\nprint(f'Lag: {ARfit.k_ar}')\nprint(f'Coeff: {ARfit.params}')","fca545ab":"start=len(train)\nend=len(train)+len(test)-1\npreds=ARfit.predict(start=start, end=end, dynamic=False).rename('AR_Preds_River_Level')","930c1b35":"train.plot(legend=True)\npreds.plot(legend=True, figsize=(10,8))","7bb1a0bf":"# Evaluate the model\nfrom sklearn.metrics import mean_squared_error\nprint(f'MSE:{mean_squared_error(test, preds)}')","29caa666":"# Forecast using stat models\ndf_r=df_r.dropna()\n#df_r.index.freq='MS'\nmodel=AR(df_r)\nARfit=model.fit(maxlag=13, model='mle')\nfcast=ARfit.predict(start=len(df_r), end=len(df_r)+480, dynamic=False).rename('Forecast')\ndf_r.plot(legend=True)\nfcast.plot(legend=True, figsize=(10,8));","a80a153b":"from statsmodels.tsa.stattools import adfuller,grangercausalitytests\nfrom statsmodels.tools.eval_measures import mse, rmse, meanabs","63118124":"def adf_test(series, title=''):\n    print(f'Augmented Dickey-Fuller Test:{title}')\n    adf_series=adfuller(series.dropna(), autolag='AIC')\n    labels=['ADF Test Statistic', 'p-value','lags_used', '# of observations']\n    adf_series_result=pd.Series(adf_series[0:4],index=labels)\n    for k,v in adf_series[4].items():\n        adf_series_result[f'critical value: ({k})']=v\n    print(adf_series_result)\n    if adf_series_result[1]<.05:\n        print(\"Strong evidence against null hypothesis; Data is stationary\")\n    else:\n        print(\"Weak evidence against null hypothesis; Data is non-stationary\")","9819aacf":"adf_test(df_r, 'Rivers')","024a1d13":"gct_df=river_a.copy()\ngct_df.index=pd.to_datetime(gct_df.index)\ncols=list(gct_df.columns)\ncols.remove('Hydrometry_Nave_di_Rosano')\ntarget='Hydrometry_Nave_di_Rosano'\nfor col in cols:\n    gct_df[[col,target]].plot(figsize=(10,8))\n","d5c1f7b3":"for col in cols:\n    print(f'Granger Causality Tests for {col}')\n    grangercausalitytests(gct_df[[col,target]].dropna(), maxlag=3)\n    print()","2adb2b50":"from statsmodels.graphics.tsaplots import month_plot, quarter_plot\ndf_r.index=pd.to_datetime(df_r.index)","a0ae2c48":"# Resample to create monthly data\nm_dfr=df_r.resample(rule='M').mean()\nmonth_plot(m_dfr);","24eb8f30":"# Resample to create quarterly data\nq_dfr=df_r.resample(rule='Q').mean()\nquarter_plot(q_dfr);","6a88618f":"lake_b=pd.read_csv(os.path.join(base_dir,'Lake_Bilancino.csv'))\nlake_b.head()","71b6ed99":"display_missing_val(find_missing_values(river_a),'Missing values for Lake_Bilancino')","cacc99a9":"lake_b.index=lake_b.Date\n#lake_b.drop(columns=['Date'], axis=1, inplace=True)","808b0da8":"analyse_heatmap(lake_b, 'Bilancino',.6)","2eb70786":"def get_correlated_columns(corr):\n    corr_pos=corr.abs()\n    hi_corr_val=np.where(corr_pos>.6)\n    hi_corr_val= [ (corr_pos.columns[x], corr_pos.columns[y]) for x, y in zip(*hi_corr_val) if x!=y and x<y]\n    return hi_corr_val","4cfec6b5":"lake_hicorrvals=get_correlated_columns(lake_b.corr())\nprint(lake_hicorrvals)","0c858eed":"# plotting correlated features\ndef plot_correlated_features(wb,hi_corr_val, title=''):\n    print(f'plot correlated features for {title}')\n    wb.index=wb.Date\n    df=wb.loc['01\/01\/2020':'01\/05\/2020']\n    fig, ax=plt.subplots(5,len(hi_corr_val)\/\/5, figsize=(20,20))\n    ax=ax.ravel()\n    for i in range(len(hi_corr_val[:15])):    \n        ax[i]=df[[hi_corr_val[i][0],hi_corr_val[i][1],'Date']].plot(x='Date', ax=ax[i])\n        ax[i].set_title(hi_corr_val[i][0]+' vs '+hi_corr_val[i][1])\n    plt.subplots_adjust(wspace=.3, hspace=.3)\n    plt.show()\n","d8854000":"plot_correlated_features(lake_b,lake_hicorrvals, 'Lake')","55c0af55":"adf_test(lake_b.Lake_Level, 'Lake')","e69954e7":"adf_test(lake_b.Flow_Rate, 'Lake')","d355cad3":"lake_b.index=pd.to_datetime(lake_b.index)","529a651c":"# Resample to create monthly data\nm_lk_lvl=lake_b.Lake_Level.resample(rule='M').mean()\nmonth_plot(m_lk_lvl);","71bb6966":"# Resample to create quarterly data\nq_lk_lvl=lake_b.Lake_Level.resample(rule='Q').mean()\nquarter_plot(q_lk_lvl);","f422d0ed":"! pip install pmdarima","73569bc6":"from pmdarima import auto_arima","265ea9bf":"auto_arima(lake_b.Lake_Level.dropna(),error_action='ignore').summary()","69aeab54":"# Lake","4096f3ed":"Augmented Dickey-Fuller test: A small p-value rejects the null hypothesis which assumes the data is non stationary.","550601a3":"# Rivers","003b8b29":"# Revealing seasonality with month plots and quarter plots","660f400d":"In this case the p-value is very low and we reject the null hypothesis and the data is stationary.","f916c1f1":"# Granger Causality Tests","9c5d0f22":"# WIP","dea69d6d":"We are looking at extremely low p-values.","9d0c71f0":"There is correlation between the rainfall in different areas","3e7f5c50":" # Test for stationarity\nA time series is stationary if the mean and variance are fixed between two equidistant points.","5bf9b522":"# Water Spring"}}