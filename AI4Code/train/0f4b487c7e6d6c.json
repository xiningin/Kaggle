{"cell_type":{"73c7f1a3":"code","00b4f0b0":"code","80356f0c":"code","fd7ed673":"code","783fd281":"code","5896682a":"code","0be246f5":"code","ff996a75":"code","59a67638":"code","fc5de753":"code","e1c88aa4":"code","87ba28c3":"code","b48bd300":"code","f64fff29":"code","92b7668b":"code","4e82413c":"code","e70a89d6":"code","aa5d5208":"code","c1aa0807":"code","7029ec72":"code","f87faedf":"code","d04f5b80":"code","393f04b2":"code","1ca33550":"code","53c4225e":"code","02351c10":"code","4c144116":"code","898aedbb":"code","645acebb":"code","15a7b179":"markdown","5bd129b5":"markdown","8e3260cd":"markdown","dce4804f":"markdown","e50c8c94":"markdown","1caf1c0b":"markdown","a24f9e47":"markdown","b948f385":"markdown","de7a3593":"markdown","b69d13d0":"markdown","e3faa645":"markdown"},"source":{"73c7f1a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport pandas_profiling\nimport plotly_express as px\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew \nimport scipy.cluster.hierarchy as shc\n\n\nfrom sklearn.preprocessing import normalize\nfrom sklearn.cluster import KMeans\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.neighbors import DistanceMetric\n\nfrom kmodes.kprototypes import KPrototypes\n\n# !pip install gower\n# import gower\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00b4f0b0":"print(\"List of files:\", os.listdir('\/kaggle\/input\/customer-segmentation-tutorial-in-python'))\n\n# Load data\ndf = pd.read_csv('\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\nprint(\"\\nData length:\",df.shape)\nprint(\"\\nData columns:\",df.columns)\nprint(\"\\nData columns:\",df.info())\nprint(\"\\nData:\\n\\n\",df.head())","80356f0c":"# Correlation\ndf_corr = df.corr()\ndf_corr","fd7ed673":"df_corr.style.background_gradient(cmap='coolwarm', axis=None)","783fd281":"# Use panda profile report\ndf.profile_report()","5896682a":"# Use matplotlib\n\n# plt.style.use('ggplot')\nplt.hist(df['Annual Income (k$)'], bins = 100)\n\n# Add title and axis names\nplt.title('Annual Income')\nplt.xlabel('k$')\nplt.ylabel('Frequency') \n\nplt.show()","0be246f5":"# Scatter Plot\nfig, ax = plt.subplots()\nax.scatter(df['Age'], df['Annual Income (k$)'])\nplt.ylabel('Annual Income', fontsize=12)\nplt.xlabel('Age', fontsize=12)\nplt.title('Annual Income by Age', fontsize=16)\nplt.show()","ff996a75":"# Scatter Plot\nfig, ax = plt.subplots()\nax.scatter(df['Annual Income (k$)'], df['Spending Score (1-100)'])\nplt.xlabel('Annual Income', fontsize=12)\nplt.ylabel('Spending Score (1-100)', fontsize=12)\nplt.title('Annual Income by Spending Score (1-100)', fontsize=16)\nplt.show()","59a67638":"# QQ-plot\nfig = plt.figure()\nax = fig.add_subplot()\nres = stats.probplot(df['Annual Income (k$)'], plot=plt)\nplt.show()","fc5de753":"# Scatter Plot with color from 2nd variable\npx.scatter(df, x='Annual Income (k$)', y='Spending Score (1-100)', color='Age')","e1c88aa4":"# Scatter Plot with color from 2nd variable\npx.scatter(df, x='Annual Income (k$)', y='Spending Score (1-100)', color='Gender')","87ba28c3":"# Box Plot\npx.box(df[['Gender', 'Spending Score (1-100)']].sort_values(by='Gender')\n       , x='Gender'\n       , y='Spending Score (1-100)'\n       , color='Gender')","b48bd300":"# Box Plot\npx.box(df[['Age', 'Spending Score (1-100)']].sort_values(by='Age')\n       , x='Age'\n       , y='Spending Score (1-100)'\n       , color='Age')","f64fff29":"# Box Plot\npx.box(df[['Age', 'Annual Income (k$)']].sort_values(by='Age')\n       , x='Age'\n       , y='Annual Income (k$)'\n       , color='Age')","92b7668b":"# Plot the distribution\nsns.displot(df, x=\"Annual Income (k$)\", col=\"Gender\", kind=\"kde\")","4e82413c":"# Plot the distribution\nsns.displot(df, x=\"Spending Score (1-100)\", col=\"Gender\", kind=\"kde\")","e70a89d6":"# scale data\n# numerical variables\nvar_num = ['Age', 'Spending Score (1-100)', 'Annual Income (k$)']\ndf_scaled = normalize(df[var_num])\ndf_scaled = pd.DataFrame(df_scaled, columns=var_num)\n\ndf_scaled_full = pd.concat([df_scaled, df[['Gender']]], axis=1)\nprint(df_scaled_full.shape)\n\n# gower \n# df_gower = gower.gower_matrix(df_scaled_full)\n# print(df_gower.shape)\n# df_gower_mean = df_gower.mean(0)\n# df_gower_mean = df_gower_mean.reshape(-1,1)\n# print(df_gower_mean.shape)\n# df_gower_mean","aa5d5208":"# Age and spending Score\n\nX = df_scaled[['Age', 'Spending Score (1-100)']].iloc[: , :].values\ninertia = []\n\nk = 30\n\nfor n in range(1 , k+1):\n    algorithm = (KMeans(n_clusters = n\n                        ,init='k-means++'\n                        ,n_init = n\n                        ,max_iter=300\n                        ,tol=0.0001\n                        ,random_state=123  \n                        ,algorithm='full') )\n    algorithm.fit(X)\n    inertia.append(algorithm.inertia_)\n    \nplt.figure(1 , figsize = (15 ,6))\nplt.plot(np.arange(1 , k+1) , inertia , 'o')\nplt.plot(np.arange(1 , k+1) , inertia , '-' , alpha = 0.5)\nplt.xlabel('Number of Clusters') , plt.ylabel('Inertia')\nplt.show()","c1aa0807":"# Age, spending Score and income\nX = df_scaled[['Age', 'Spending Score (1-100)', 'Annual Income (k$)']].iloc[: , :].values\ninertia = []\n\nk = 30\n\nfor n in range(1 , k+1):\n    algorithm = (KMeans(n_clusters = n\n                        ,init='k-means++'\n                        ,n_init = n\n                        ,max_iter=300\n                        ,tol=0.0001\n                        ,random_state=123  \n                        ,algorithm='full') )\n    algorithm.fit(X)\n    inertia.append(algorithm.inertia_)\n    \nplt.figure(1 , figsize = (15 ,6))\nplt.plot(np.arange(1 , k+1) , inertia , 'o')\nplt.plot(np.arange(1 , k+1) , inertia , '-' , alpha = 0.5)\nplt.xlabel('Number of Clusters') , plt.ylabel('Inertia')\nplt.show()","7029ec72":"k_cluster = (KMeans(n_clusters = 7 \n                    ,init='k-means++'\n                    ,n_init = k \n                    ,max_iter=300\n                    ,tol=0.0001\n                    ,random_state= 123  \n                    ,algorithm='full') )\nk_cluster.fit(X)\ncentroids = algorithm.cluster_centers_","f87faedf":"px.scatter(df_scaled, x='Annual Income (k$)', y='Spending Score (1-100)', color=k_cluster.labels_.astype(str))","d04f5b80":"px.scatter(df_scaled, x='Age', y='Spending Score (1-100)', color=k_cluster.labels_.astype(str))","393f04b2":"plt.figure(figsize=(10, 7))  \nplt.title(\"Dendrograms\")  \ndend = shc.dendrogram(shc.linkage(df_scaled, method='ward'))","1ca33550":"\"\"\"\nThe x-axis contains the samples and y-axis represents the distance between these samples. \nThe vertical line with maximum distance is the blue line \nand hence we can decide a threshold of 2 and cut the dendrogram:\n\"\"\"\nplt.figure(figsize=(10, 7))  \nplt.title(\"Dendrograms\")  \ndend = shc.dendrogram(shc.linkage(df_scaled, method='ward'))\nplt.axhline(y=2, color='r', linestyle='--')","53c4225e":"cluster = AgglomerativeClustering(n_clusters=5, affinity='euclidean', linkage='ward')  \ncluster.fit_predict(df_scaled)","02351c10":"px.scatter(df_scaled, x='Annual Income (k$)', y='Spending Score (1-100)', color=cluster.labels_.astype(str))","4c144116":"px.scatter(df_scaled, x='Age', y='Annual Income (k$)', color=cluster.labels_.astype(str))","898aedbb":"kproto = KPrototypes(n_clusters=5, init='Cao')\ndf_scaled_full_dummy = pd.get_dummies(df_scaled_full, columns=[\"Gender\"])\nclusters = kproto.fit_predict(df_scaled_full_dummy, categorical=[0, 1])\n#join data with labels \nlabels = pd.DataFrame(clusters)\nlabeledCustomers = pd.concat((df_scaled_full,labels),axis=1)\nlabeledCustomers = labeledCustomers.rename({0:'labels'},axis=1)","645acebb":"px.scatter(df_scaled, x='Age', y='Annual Income (k$)', color=labeledCustomers[\"labels\"].astype(str))","15a7b179":"## 3.1. Use matplotlib<a id='3.1'><\/a>","5bd129b5":"# 01. Import Library<a id='01'><\/a>","8e3260cd":"## 4.3. K-prototypes<a id='4.3'><\/a>","dce4804f":"## 3.2. Use plotly_express<a id='3.2'><\/a>","e50c8c94":"## 4.2. Hierarchical clustering<a id='4.2'><\/a>","1caf1c0b":"## 3.3. Use seaborn<a id='3.3'><\/a>","a24f9e47":"## 4.1. K-means<a id='4.1'><\/a>","b948f385":"# Table of Contents\n\n[01. Import Library](#01)<br>\n\n[02. Load Data](#02)<br>\n\n[03. Exploratory Data Analysis (EDA)](#03)<br>\n&nbsp;&nbsp;&nbsp;[3.1. Use matplotlib](#3.1)<br>\n&nbsp;&nbsp;&nbsp;[3.2. Use plotly_express](#3.2)<br>\n&nbsp;&nbsp;&nbsp;[3.3. Use seaborn](#3.3)<br>\n\n[04. Clustering](#04)<br>\n&nbsp;&nbsp;&nbsp;[4.1. K-means](#4.1)<br>\n&nbsp;&nbsp;&nbsp;[4.2. Hierarchical clustering](#4.2)<br>\n&nbsp;&nbsp;&nbsp;[4.3. K-prototypes](#4.3)<br>","de7a3593":"# 04. Clustering<a id='04'><\/a>","b69d13d0":"# 03. Exploratory Data Analysis (EDA)<a id='03'><\/a>","e3faa645":"# 02. Load Data <a id='02'><\/a>"}}