{"cell_type":{"56a06dde":"code","17aeb37b":"code","26292726":"code","a2355915":"code","b1656e3d":"code","cc322119":"code","4edc1b54":"code","5231b696":"code","7fdef150":"code","7d04d064":"code","c3d14c34":"code","c9149f35":"code","b473f281":"code","bf40377e":"code","db846a8e":"code","c6b616b4":"code","21591e8c":"code","f913b98a":"code","a50b36f9":"code","e6c02225":"code","14d960b4":"code","66bb7eb0":"code","0e1985ef":"code","c9be4621":"code","346e00b6":"code","ddb74acf":"code","5ef8b254":"code","7840a1ff":"code","5d59cb24":"code","b70a4c07":"code","3fea7dd7":"code","d3231904":"markdown","379bacff":"markdown","cf9eb914":"markdown","2d09d2bd":"markdown","b7495ac2":"markdown","b9be0651":"markdown","b72e2443":"markdown"},"source":{"56a06dde":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import HTML\nfrom IPython.html import widgets\nfrom IPython.display import Image","17aeb37b":"df=pd.read_csv('\/kaggle\/input\/pokemon-challenge\/pokemon.csv')","26292726":"df.head()","a2355915":"#Renaming id column\ndf.rename(columns={'#': '_id'}, inplace=True)","b1656e3d":"df.head()","cc322119":"#get top 20 Pokemon with their numeric features\ndf_numeric=df._get_numeric_data().head(20)","4edc1b54":"def highlight_max(s):\n    is_max = s == s.max()\n    return ['background-color: yellow' if v else '' for v in is_max]\n\ndf_numeric.style.apply(highlight_max)","5231b696":"df_numeric.style.apply(highlight_max, subset=['HP', 'Attack', 'Defense'])","7fdef150":"def hover(hover_color=\"#ffff99\"):\n    return dict(selector=\"tr:hover\",\n                props=[(\"background-color\", \"%s\" % hover_color)])\n\nstyles = [\n    hover(),\n    dict(selector=\"th\", props=[(\"font-size\", \"150%\"),\n                               (\"text-align\", \"center\")]),\n    dict(selector=\"caption\", props=[(\"caption-side\", \"bottom\")])\n]\nhtml = (df_numeric.style.set_table_styles(styles)\n          .set_caption(\"Hover to highlight.\"))\nhtml","7d04d064":"def magnify():\n    return [dict(selector=\"th\",\n                 props=[(\"font-size\", \"4pt\")]),\n            dict(selector=\"td\",\n                 props=[('padding', \"0em 0em\")]),\n            dict(selector=\"th:hover\",\n                 props=[(\"font-size\", \"12pt\")]),\n            dict(selector=\"tr:hover td:hover\",\n                 props=[('max-width', '200px'),\n                        ('font-size', '12pt')])\n]\n\ncmap = cmap=sns.diverging_palette(5, 250, as_cmap=True)\n\ndf_numeric.style.background_gradient(cmap, axis=1)\\\n    .set_properties(**{'max-width': '500px', 'font-size': '1pt'})\\\n    .set_caption(\"Hover to magnify\")\\\n    .set_precision(2)\\\n    .set_table_styles(magnify())","c3d14c34":"#Heatmap Styling\n\ncm = sns.light_palette(\"red\", as_cmap=True)\n\ndf_numeric.style.background_gradient(cmap='viridis')","c9149f35":"#Styler.set_properties\ndf_numeric.style.set_properties(**{'background-color': 'black',\n                            'color': 'lawngreen',\n                            'border-color': 'white'})","b473f281":"#Bar Charts Styling\ndf_numeric.style.bar(subset=['_id', 'Attack'], color='#d65f5f')","bf40377e":"#Let's create a dataframe with negative and nan values.\nnp.random.seed(24)\ndf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\ndf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\n               axis=1)\ndf.iloc[3, 3] = np.nan\ndf.iloc[0, 2] = np.nan","db846a8e":"#Boring example of rendering a DataFrame, without any (visible) styles:\ndf.style","c6b616b4":"#Color code the text having values less than zero in a row\ndef color_negative_red(val):\n    \"\"\"\n    Takes a scalar and returns a string with\n    the css property `'color: red'` for negative\n    strings, black otherwise.\n    \"\"\"\n    color = 'red' if val < 0 else 'black'\n    return 'color: %s' % color\n\n","21591e8c":"df_red=df.style.applymap(color_negative_red)\ndf_red","f913b98a":"#You can use more than one function at the same time.\ndf.style.\\\n    applymap(color_negative_red).\\\n    apply(highlight_max)","a50b36f9":"#Or you can apply a function for subset in the dataframe\ndf.style.applymap(color_negative_red,\n                  subset=pd.IndexSlice[2:5, ['B', 'D']])","e6c02225":"#Formatting the dataframe\ndf.style.format(\"{:.2%}\", na_rep=\"-\")","14d960b4":"#Highlight max and also replace nan values with \"-\"\ndf.style.highlight_max().format(None, na_rep=\"-\")","66bb7eb0":"#Highlight null values\ndf.style.highlight_null(null_color='red')","0e1985ef":"#Create heatmap\ncm = sns.light_palette(\"green\", as_cmap=True)\n\ns = df.style.background_gradient(cmap=cm)\ns","c9be4621":"# Compress the color range\n(df.loc[:4]\n    .style\n    .background_gradient(cmap='viridis', low=.5, high=0)\n    .highlight_null('red'))","346e00b6":"#Create barchart with negative and positive value option.\ndf.style.bar(subset=['A', 'B'], align='mid', color=['#d65f5f', '#5fba7d'])","ddb74acf":"#Precision\nwith pd.option_context('display.precision', 2):\n    html = (df.style\n              .applymap(color_negative_red)\n              .apply(highlight_max))\nhtml","5ef8b254":"#Missing values\n(df.style\n   .set_na_rep(\"FAIL\")\n   .format(None, na_rep=\"PASS\", subset=[\"D\"])\n   .highlight_null(\"yellow\"))","7840a1ff":"#Hiding Index\ndf.style.hide_index()","5d59cb24":"#Hiding columns\ndf.style.hide_columns(['C','D'])","b70a4c07":"#you can export your styled dataframe to excel file\ndf.style.\\\n    applymap(color_negative_red).\\\n    apply(highlight_max).\\\n    to_excel('styled.xlsx', engine='openpyxl')","3fea7dd7":"Image(\"..\/input\/styled-excel\/styled_excel.JPG\")","d3231904":"# *6. Export to Excel*","379bacff":"# *7. Some last words*\n\nCheck out this link for more details on Pandas Style Documentation: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/style.html\n\nIf you have any ideas to feedback please let me know in comments, and if you liked my work please don't forget to vote, thank you!","cf9eb914":"\n# *5. Built-in Styles*","2d09d2bd":"\n# *3. Styling*","b7495ac2":"# ***Pandas Dataframe Styling***\n\nDataframes on Jupyter Notebooks can be used for data analysis. So, highlighting the rows,cells and columns which contains some specific kind of data can help better understanding the data.\nFor that reason, you can apply conditional formatting, the visual styling of a DataFrame depending on the data within, by using the DataFrame.style property.\n\nIn this notebook, I just want to show some examples of dataframe styling which is so useful in data analysis. \n\n\n\n# *1. Import libraries and have a look at the data!*","b9be0651":"\n# *4. Another example with negative and nan values!*","b72e2443":"\n# *2. Create functions and apply them to the data!*"}}