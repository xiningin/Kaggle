{"cell_type":{"55fd3e1a":"code","8985b2d6":"code","3e67a869":"code","26196b3e":"code","cd5f1c01":"code","a99fa1fc":"code","871687d2":"code","5006b737":"code","39273b98":"code","15881eb0":"code","bef6d61f":"code","9debc6f0":"code","07d05421":"code","36070129":"code","51d0cb99":"code","530db9cf":"code","bfbf0282":"code","a072d9e0":"code","88186759":"code","d3fbbdde":"code","8419d829":"code","7e39356e":"code","e3869747":"code","eaa841bd":"code","c2c8df1f":"code","228c26b3":"code","0b26525c":"code","de5669b2":"code","4126100e":"code","f7a73e2f":"code","0d8479af":"code","3fc6409b":"code","8d598da0":"code","6769dc00":"code","7c0484ca":"code","8a6be8e2":"code","6bbeccd5":"code","9b9b5ca9":"code","592ce6df":"code","aa6d860e":"code","525f3f92":"code","84222093":"code","1dfca733":"code","e145ea59":"code","24408c36":"code","2a25d5a3":"code","40f25d96":"code","3e80645c":"code","eabb73b4":"code","a4dada0c":"code","5c60538f":"code","509e6b11":"code","708c8271":"code","a804dd82":"code","dcbe4872":"code","a0094e21":"code","231005af":"code","7320dff4":"code","048b9e75":"code","36c305d1":"markdown","48575d47":"markdown","14e4737a":"markdown","921c5b9c":"markdown","9aa72e1d":"markdown","f90cc5ac":"markdown","99662edf":"markdown","c92134a0":"markdown","f7e1f0be":"markdown","9455d431":"markdown","cdeec1a6":"markdown","63d3a168":"markdown","321a4a2a":"markdown","cc93dbe1":"markdown","dd6073d3":"markdown","6baf3221":"markdown","37a3e86b":"markdown","84e5a6b9":"markdown","3fe87261":"markdown","48e0d810":"markdown","bde07306":"markdown","69bf19a2":"markdown","fe83f1f4":"markdown","32938f70":"markdown","9243c5eb":"markdown","1ceac81c":"markdown","4365c516":"markdown","95762be7":"markdown","37c56ebe":"markdown","6e88da4a":"markdown"},"source":{"55fd3e1a":"from numpy.random import seed\nseed(101)\nfrom tensorflow import set_random_seed\nset_random_seed(101)\n\nimport pandas as pd\nimport numpy as np\n\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Activation\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nfrom tensorflow.keras.optimizers import Adam\n\nimport os\nimport cv2\n\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nimport itertools\nimport shutil\nimport matplotlib.pyplot as plt\n%matplotlib inline","8985b2d6":"\nIMAGE_SIZE = 96\nIMAGE_CHANNELS = 3\n\nSAMPLE_SIZE = 80000 # the number of images we use from each of the two classes\n","3e67a869":"os.listdir('..\/input')","26196b3e":"\nprint(len(os.listdir('..\/input\/train')))\nprint(len(os.listdir('..\/input\/test')))","cd5f1c01":"df_data = pd.read_csv('..\/input\/train_labels.csv')\n\n# removing this image because it caused a training error previously\ndf_data[df_data['id'] != 'dd6dfed324f9fcb6f93f46f32fc800f2ec196be2']\n\n# removing this image because it's black\ndf_data[df_data['id'] != '9369c7278ec8bcc6c880d99194de09fc2bd4efbe']\n\n\nprint(df_data.shape)","a99fa1fc":"df_data['label'].value_counts()","871687d2":"# source: https:\/\/www.kaggle.com\/gpreda\/honey-bee-subspecies-classification\n\ndef draw_category_images(col_name,figure_cols, df, IMAGE_PATH):\n    \n    \"\"\"\n    Give a column in a dataframe,\n    this function takes a sample of each class and displays that\n    sample on one row. The sample size is the same as figure_cols which\n    is the number of columns in the figure.\n    Because this function takes a random sample, each time the function is run it\n    displays different images.\n    \"\"\"\n    \n\n    categories = (df.groupby([col_name])[col_name].nunique()).index\n    f, ax = plt.subplots(nrows=len(categories),ncols=figure_cols, \n                         figsize=(4*figure_cols,4*len(categories))) # adjust size here\n    # draw a number of images for each location\n    for i, cat in enumerate(categories):\n        sample = df[df[col_name]==cat].sample(figure_cols) # figure_cols is also the sample size\n        for j in range(0,figure_cols):\n            file=IMAGE_PATH + sample.iloc[j]['id'] + '.tif'\n            im=cv2.imread(file)\n            ax[i, j].imshow(im, resample=True, cmap='gray')\n            ax[i, j].set_title(cat, fontsize=16)  \n    plt.tight_layout()\n    plt.show()\n    ","5006b737":"IMAGE_PATH = '..\/input\/train\/' \n\ndraw_category_images('label',4, df_data, IMAGE_PATH)","39273b98":"df_data.head()","15881eb0":"# take a random sample of class 0 with size equal to num samples in class 1\ndf_0 = df_data[df_data['label'] == 0].sample(SAMPLE_SIZE, random_state = 101)\n# filter out class 1\ndf_1 = df_data[df_data['label'] == 1].sample(SAMPLE_SIZE, random_state = 101)\n\n# concat the dataframes\ndf_data = pd.concat([df_0, df_1], axis=0).reset_index(drop=True)\n# shuffle\ndf_data = shuffle(df_data)\n\ndf_data['label'].value_counts()","bef6d61f":"df_data.head()","9debc6f0":"# train_test_split\n\n# stratify=y creates a balanced validation set.\ny = df_data['label']\n\ndf_train, df_val = train_test_split(df_data, test_size=0.10, random_state=101, stratify=y)\n\nprint(df_train.shape)\nprint(df_val.shape)","07d05421":"df_train['label'].value_counts()","36070129":"df_val['label'].value_counts()","51d0cb99":"# Create a new directory\nbase_dir = 'base_dir'\nos.mkdir(base_dir)\n\n\n#[CREATE FOLDERS INSIDE THE BASE DIRECTORY]\n\n# now we create 2 folders inside 'base_dir':\n\n# train_dir\n    # a_no_tumor_tissue\n    # b_has_tumor_tissue\n\n# val_dir\n    # a_no_tumor_tissue\n    # b_has_tumor_tissue\n\n\n\n# create a path to 'base_dir' to which we will join the names of the new folders\n# train_dir\ntrain_dir = os.path.join(base_dir, 'train_dir')\nos.mkdir(train_dir)\n\n# val_dir\nval_dir = os.path.join(base_dir, 'val_dir')\nos.mkdir(val_dir)\n\n\n\n# [CREATE FOLDERS INSIDE THE TRAIN AND VALIDATION FOLDERS]\n# Inside each folder we create seperate folders for each class\n\n# create new folders inside train_dir\nno_tumor_tissue = os.path.join(train_dir, 'a_no_tumor_tissue')\nos.mkdir(no_tumor_tissue)\nhas_tumor_tissue = os.path.join(train_dir, 'b_has_tumor_tissue')\nos.mkdir(has_tumor_tissue)\n\n\n# create new folders inside val_dir\nno_tumor_tissue = os.path.join(val_dir, 'a_no_tumor_tissue')\nos.mkdir(no_tumor_tissue)\nhas_tumor_tissue = os.path.join(val_dir, 'b_has_tumor_tissue')\nos.mkdir(has_tumor_tissue)\n\n","530db9cf":"# check that the folders have been created\nos.listdir('base_dir\/train_dir')","bfbf0282":"# Set the id as the index in df_data\ndf_data.set_index('id', inplace=True)","a072d9e0":"\n\n# Get a list of train and val images\ntrain_list = list(df_train['id'])\nval_list = list(df_val['id'])\n\n\n\n# Transfer the train images\n\nfor image in train_list:\n    \n    # the id in the csv file does not have the .tif extension therefore we add it here\n    fname = image + '.tif'\n    # get the label for a certain image\n    target = df_data.loc[image,'label']\n    \n    # these must match the folder names\n    if target == 0:\n        label = 'a_no_tumor_tissue'\n    if target == 1:\n        label = 'b_has_tumor_tissue'\n    \n    # source path to image\n    src = os.path.join('..\/input\/train', fname)\n    # destination path to image\n    dst = os.path.join(train_dir, label, fname)\n    # copy the image from the source to the destination\n    shutil.copyfile(src, dst)\n\n\n# Transfer the val images\n\nfor image in val_list:\n    \n    # the id in the csv file does not have the .tif extension therefore we add it here\n    fname = image + '.tif'\n    # get the label for a certain image\n    target = df_data.loc[image,'label']\n    \n    # these must match the folder names\n    if target == 0:\n        label = 'a_no_tumor_tissue'\n    if target == 1:\n        label = 'b_has_tumor_tissue'\n    \n\n    # source path to image\n    src = os.path.join('..\/input\/train', fname)\n    # destination path to image\n    dst = os.path.join(val_dir, label, fname)\n    # copy the image from the source to the destination\n    shutil.copyfile(src, dst)\n    \n\n\n   ","88186759":"# check how many train images we have in each folder\n\nprint(len(os.listdir('base_dir\/train_dir\/a_no_tumor_tissue')))\nprint(len(os.listdir('base_dir\/train_dir\/b_has_tumor_tissue')))\n","d3fbbdde":"# check how many val images we have in each folder\n\nprint(len(os.listdir('base_dir\/val_dir\/a_no_tumor_tissue')))\nprint(len(os.listdir('base_dir\/val_dir\/b_has_tumor_tissue')))\n","8419d829":"# End of Data Preparation\n### ===================================================================================== ###\n# Start of Model Building\n","7e39356e":"train_path = 'base_dir\/train_dir'\nvalid_path = 'base_dir\/val_dir'\ntest_path = '..\/input\/test'\n\nnum_train_samples = len(df_train)\nnum_val_samples = len(df_val)\ntrain_batch_size = 10\nval_batch_size = 10\n\n\ntrain_steps = np.ceil(num_train_samples \/ train_batch_size)\nval_steps = np.ceil(num_val_samples \/ val_batch_size)","e3869747":"datagen = ImageDataGenerator(rescale=1.0\/255)\n\ntrain_gen = datagen.flow_from_directory(train_path,\n                                        target_size=(IMAGE_SIZE,IMAGE_SIZE),\n                                        batch_size=train_batch_size,\n                                        class_mode='categorical')\n\nval_gen = datagen.flow_from_directory(valid_path,\n                                        target_size=(IMAGE_SIZE,IMAGE_SIZE),\n                                        batch_size=val_batch_size,\n                                        class_mode='categorical')\n\n# Note: shuffle=False causes the test dataset to not be shuffled\ntest_gen = datagen.flow_from_directory(valid_path,\n                                        target_size=(IMAGE_SIZE,IMAGE_SIZE),\n                                        batch_size=1,\n                                        class_mode='categorical',\n                                        shuffle=False)","eaa841bd":"\n\nkernel_size = (3,3)\npool_size= (2,2)\nfirst_filters = 32\nsecond_filters = 64\nthird_filters = 128\n\ndropout_conv = 0.3\ndropout_dense = 0.3\n\n\nmodel = Sequential()\nmodel.add(Conv2D(first_filters, kernel_size, activation = 'relu', input_shape = (96, 96, 3)))\nmodel.add(Conv2D(first_filters, kernel_size, activation = 'relu'))\nmodel.add(Conv2D(first_filters, kernel_size, activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = pool_size)) \nmodel.add(Dropout(dropout_conv))\n\nmodel.add(Conv2D(second_filters, kernel_size, activation ='relu'))\nmodel.add(Conv2D(second_filters, kernel_size, activation ='relu'))\nmodel.add(Conv2D(second_filters, kernel_size, activation ='relu'))\nmodel.add(MaxPooling2D(pool_size = pool_size))\nmodel.add(Dropout(dropout_conv))\n\nmodel.add(Conv2D(third_filters, kernel_size, activation ='relu'))\nmodel.add(Conv2D(third_filters, kernel_size, activation ='relu'))\nmodel.add(Conv2D(third_filters, kernel_size, activation ='relu'))\nmodel.add(MaxPooling2D(pool_size = pool_size))\nmodel.add(Dropout(dropout_conv))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(dropout_dense))\nmodel.add(Dense(2, activation = \"softmax\"))\n\nmodel.summary()\n","c2c8df1f":"model.compile(Adam(lr=0.0001), loss='binary_crossentropy', \n              metrics=['accuracy'])","228c26b3":"# Get the labels that are associated with each index\nprint(val_gen.class_indices)","0b26525c":"filepath = \"model.h5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='val_acc', verbose=1, \n                             save_best_only=True, mode='max')\n\nreduce_lr = ReduceLROnPlateau(monitor='val_acc', factor=0.5, patience=2, \n                                   verbose=1, mode='max', min_lr=0.00001)\n                              \n                              \ncallbacks_list = [checkpoint, reduce_lr]\n\nhistory = model.fit_generator(train_gen, steps_per_epoch=train_steps, \n                    validation_data=val_gen,\n                    validation_steps=val_steps,\n                    epochs=20, verbose=1,\n                   callbacks=callbacks_list)","de5669b2":"# get the metric names so we can use evaulate_generator\nmodel.metrics_names","4126100e":"# Here the best epoch will be used.\n\nmodel.load_weights('model.h5')\n\nval_loss, val_acc = \\\nmodel.evaluate_generator(test_gen, \n                        steps=len(df_val))\n\nprint('val_loss:', val_loss)\nprint('val_acc:', val_acc)","f7a73e2f":"# display the loss and accuracy curves\n\nimport matplotlib.pyplot as plt\n\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\nplt.plot(epochs, loss, label='Training loss')\nplt.plot(epochs, val_loss, label='Validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Training and validation loss')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs, acc, label='Training acc')\nplt.plot(epochs, val_acc, label='Validation acc')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()","0d8479af":"# make a prediction\npredictions = model.predict_generator(test_gen, steps=len(df_val), verbose=1)","3fc6409b":"predictions.shape","8d598da0":"# This is how to check what index keras has internally assigned to each class. \ntest_gen.class_indices","6769dc00":"# Put the predictions into a dataframe.\n# The columns need to be oredered to match the output of the previous cell\n\ndf_preds = pd.DataFrame(predictions, columns=['no_tumor_tissue', 'has_tumor_tissue'])\n\ndf_preds.head()","7c0484ca":"# Get the true labels\ny_true = test_gen.classes\n\n# Get the predicted labels as probabilities\ny_pred = df_preds['has_tumor_tissue']\n","8a6be8e2":"from sklearn.metrics import roc_auc_score\n\nroc_auc_score(y_true, y_pred)","6bbeccd5":"from sklearn.metrics import roc_curve, roc_auc_score\nfrom sklearn import metrics\n\nfalse_positive_rate, true_positive_rate, threshold = roc_curve(y_true, y_pred)\nauc = metrics.auc(false_positive_rate, true_positive_rate)\nplt.title('Receiver Operating Characteristic')\nplt.plot(false_positive_rate, true_positive_rate)\nplt.plot([0, 1], ls=\"--\")\nplt.plot([0, 0], [1, 0] , c=\".7\"), plt.plot([1, 1] , c=\".7\")\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","9b9b5ca9":"# Source: Scikit Learn website\n# http:\/\/scikit-learn.org\/stable\/auto_examples\/\n# model_selection\/plot_confusion_matrix.html#sphx-glr-auto-examples-model-\n# selection-plot-confusion-matrix-py\n\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.tight_layout()","592ce6df":"# Get the labels of the test images.\n\ntest_labels = test_gen.classes","aa6d860e":"test_labels.shape","525f3f92":"# argmax returns the index of the max value in a row\ncm = confusion_matrix(test_labels, predictions.argmax(axis=1))","84222093":"# Print the label associated with each class\ntest_gen.class_indices","1dfca733":"# Define the labels of the class indices. These need to match the \n# order shown above.\ncm_plot_labels = ['benign', 'malignant']\n\nplot_confusion_matrix(cm, cm_plot_labels, title='Confusion Matrix')","e145ea59":"from sklearn.metrics import classification_report\n\n# Generate a classification report\n\n# For this to work we need y_pred as binary labels not as probabilities\ny_pred_binary = predictions.argmax(axis=1)\n\nreport = classification_report(y_true, y_pred_binary, target_names=cm_plot_labels)\n\nprint(report)\n","24408c36":"# Delete base_dir and it's sub folders to free up disk space.\n\nshutil.rmtree('base_dir')\n","2a25d5a3":"\n#[CREATE A TEST FOLDER DIRECTORY STRUCTURE]\n\n# We will be feeding test images from a folder into predict_generator().\n# Keras requires that the path should point to a folder containing images and not\n# to the images themselves. That is why we are creating a folder (test_images) \n# inside another folder (test_dir).\n\n# test_dir\n    # test_images\n\n# create test_dir\ntest_dir = 'test_dir'\nos.mkdir(test_dir)\n    \n# create test_images inside test_dir\ntest_images = os.path.join(test_dir, 'test_images')\nos.mkdir(test_images)","40f25d96":"# check that the directory we created exists\nos.listdir('test_dir')","3e80645c":"# Transfer the test images into image_dir\n\ntest_list = os.listdir('..\/input\/test')\n\nfor image in test_list:\n    \n    fname = image\n    \n    # source path to image\n    src = os.path.join('..\/input\/test', fname)\n    # destination path to image\n    dst = os.path.join(test_images, fname)\n    # copy the image from the source to the destination\n    shutil.copyfile(src, dst)","eabb73b4":"# check that the images are now in the test_images\n# Should now be 57458 images in the test_images folder\n\nlen(os.listdir('test_dir\/test_images'))","a4dada0c":"test_path ='test_dir'\n\n\n# Here we change the path to point to the test_images folder.\n\ntest_gen = datagen.flow_from_directory(test_path,\n                                        target_size=(IMAGE_SIZE,IMAGE_SIZE),\n                                        batch_size=1,\n                                        class_mode='categorical',\n                                        shuffle=False)","5c60538f":"num_test_images = 57458\n\n# make sure we are using the best epoch\nmodel.load_weights('model.h5')\n\npredictions = model.predict_generator(test_gen, steps=num_test_images, verbose=1)\n","509e6b11":"# Are the number of predictions correct?\n# Should be 57458.\n\nlen(predictions)","708c8271":"# Put the predictions into a dataframe\n\ndf_preds = pd.DataFrame(predictions, columns=['no_tumor_tissue', 'has_tumor_tissue'])\n\ndf_preds.head()","a804dd82":"\n# This outputs the file names in the sequence in which \n# the generator processed the test images.\ntest_filenames = test_gen.filenames\n\n# add the filenames to the dataframe\ndf_preds['file_names'] = test_filenames\n\ndf_preds.head()","dcbe4872":"# Create an id column\n\n# A file name now has this format: \n# test_images\/00006537328c33e284c973d7b39d340809f7271b.tif\n\n# This function will extract the id:\n# 00006537328c33e284c973d7b39d340809f7271b\n\n\ndef extract_id(x):\n    \n    # split into a list\n    a = x.split('\/')\n    # split into a list\n    b = a[1].split('.')\n    extracted_id = b[0]\n    \n    return extracted_id\n\ndf_preds['id'] = df_preds['file_names'].apply(extract_id)\n\ndf_preds.head()","a0094e21":"# Get the predicted labels.\n# We were asked to predict a probability that the image has tumor tissue\ny_pred = df_preds['has_tumor_tissue']\n\n# get the id column\nimage_id = df_preds['id']","231005af":"submission = pd.DataFrame({'id':image_id, \n                           'label':y_pred, \n                          }).set_index('id')\n\nsubmission.to_csv('patch_preds.csv', columns=['label']) ","7320dff4":"submission.head()","048b9e75":"# Delete the test_dir directory we created to prevent a Kaggle error.\n# Kaggle allows a max of 500 files to be saved.\n\nshutil.rmtree('test_dir')","36c305d1":"### Create a submission file","48575d47":"**Recall **= Given a class, will the classifier be able to detect it?<br>\n**Precision **= Given a class prediction from a classifier, how likely is it to be correct?<br>\n**F1 Score** = The harmonic mean of the recall and precision. Essentially, it punishes extreme values.\n\nFrom the confusion matrix and classification report we see that our model is equally good at detecting both classes.","14e4737a":"> 1. It helps to turn on the GPU before creating any folders. If you create the folder structure and then turn on the GPU or Internet - all the folders you created will disappear.\n> 2. I've used tensorflow.keras. If you use native Keras then you may get different results.\n> ","921c5b9c":"### Create a Confusion Matrix","9aa72e1d":"### Train the Model","f90cc5ac":"I've used the CNN architecture presented by @fmarazzi in this kernel:<br>\nhttps:\/\/www.kaggle.com\/fmarazzi\/baseline-keras-cnn-roc-fast-5min-0-8253-lb","99662edf":"### Create a Dataframe containing all images","c92134a0":"### Plot the Training Curves","f7e1f0be":"\n### Reference Kernels\n\nI found these kernels very helpful:\n\n1. Gabriel Preda, Honey Bee Subspecies Classification <br>\nhttps:\/\/www.kaggle.com\/gpreda\/honey-bee-subspecies-classification<br>\n\n2. Beluga, Black and White CNN<br>\nhttps:\/\/www.kaggle.com\/gaborfodor\/black-white-cnn-lb-0-77\n\n3.  Francesco Marazzi, Baseline Keras CNN<br>\nhttps:\/\/www.kaggle.com\/fmarazzi\/baseline-keras-cnn-roc-fast-5min-0-8253-lb\n","9455d431":"### A note on Keras class index values\n\nKeras assigns it's own index value (here 0 and 1) to the classes.\nIt infers the classes based on the folder structure.<br>\nImportant: These index values may not match the index values we were given in the **train_labels.csv** file.\n\nI've used 'a' and 'b' folder name pre-fixes to get keras to assign index values to match what\nwas in the train_labels.csv file - I guessed that keras is assigning the index value based on\nfolder name alphabetical order.","cdeec1a6":"### What files are available?","63d3a168":"**Introduction**\n\nIn this kernel I will describe a workflow that  allows 160,000 full size images to be used without crashing the kaggle kernel. \n\nThis is made possible by setting up a directory structure and then using generators to feed the data into the model for training, validation and for prediction.\n\nWe will train the model using 144,000 images and validate on 16,000 images.\n","321a4a2a":"### Create the Model Architecture\u00b6","cc93dbe1":"#### Balance the target distribution\nWe will reduce the number of samples in class 0.","dd6073d3":"### Make a prediction on the val set\nWe need these predictions to calculate the AUC score, print the Confusion Matrix and calculate the F1 score.","6baf3221":"### MAKE A TEST SET PREDICTION","37a3e86b":"Thank you for reading.","84e5a6b9":"### Set Up the Generators","3fe87261":"### How many images are in each folder?","48e0d810":"### Check the class distribution","bde07306":"### Transfer the images into the folders","69bf19a2":"### Create the Train and Val Sets","fe83f1f4":"### Create a Directory Structure","32938f70":"### Evaluate the model using the val set","9243c5eb":"### What is the AUC Score?","1ceac81c":"### Make a prediction on the test images","4365c516":"### Set up the generator","95762be7":"### Labels as per csv file\n\n0 = no tumor tissue<br>\n1 =   has tumor tissue. <br>\n","37c56ebe":"### Display a random sample of train images  by class","6e88da4a":"### Create a Classification Report"}}