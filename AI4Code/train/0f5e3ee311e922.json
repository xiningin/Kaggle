{"cell_type":{"c18344dd":"code","b407e6ff":"code","059b0985":"code","0a8c4088":"code","4c66d56f":"code","c350510b":"code","900ed185":"code","8f375884":"code","7d367687":"code","5b4aabdb":"code","90118719":"code","61c2c118":"code","b7f69c07":"code","0d30e367":"code","5267fc10":"code","1057d57f":"code","267a667a":"code","08472f24":"code","8ed0656e":"code","6a2fe0f3":"code","805422a1":"code","fc32de20":"code","2040de73":"code","b2118b81":"code","fd500b22":"code","bc91f651":"code","d9e5437d":"code","faf7ee6f":"code","1da0c528":"code","cf049367":"code","8c596e29":"code","b95b776d":"code","294f7ba3":"code","b7aaacda":"code","71d14a8a":"code","1d0a0752":"code","44593bfb":"code","81c927fa":"code","d8c863eb":"code","46760ec3":"code","7bed1951":"code","ae67de03":"code","b2646e29":"code","b1cff836":"code","6d92c91c":"code","27ea212b":"code","ef2980e2":"markdown","aea1dbe6":"markdown","2d20de68":"markdown","11822293":"markdown","aaf1a829":"markdown","5a9d09f0":"markdown","d8a04d20":"markdown","f1972618":"markdown","3a6fdf02":"markdown","be0dbf49":"markdown","1839828b":"markdown","0f98b4fc":"markdown","df6a112f":"markdown","c1c8f2c0":"markdown","317040df":"markdown","58701707":"markdown","84dd96c3":"markdown","81ae9e9a":"markdown","f7c7154d":"markdown","4c2bc235":"markdown","bb3b1a5e":"markdown"},"source":{"c18344dd":"#In this notebook,I am going to explain almost everything about Plotly from basic to advance.","b407e6ff":"#Importing Liabraries\nimport numpy as np \nimport pandas as pd \nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\nimport plotly.express as px\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nprint(os.listdir(\"..\/input\"))","059b0985":"#Now,we use random 50 rows and 4 columns\narr_1 = np.random.randn(50,4)\ndf_1 = pd.DataFrame(arr_1,columns=['A','B','C','D'])\ndf_1.head()","0a8c4088":"df_1.plot()","4c66d56f":"df_stocks = px.data.stocks()\ndf_stocks.head()","c350510b":"px.line(df_stocks, x='date', y='AMZN',labels={'x':'Date','y':'Price'})","900ed185":"#Multiple line plot \ndf_stocks = px.data.stocks()\npx.line(df_stocks, x='date', y=['GOOG','AAPL'],\n        labels={'x':'Date','y':'Price'},title='Apple vs.Google') \nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df_stocks.date, y=df_stocks.AAPL,mode='lines',name='Apple'))\nfig.add_trace(go.Scatter(x=df_stocks.date, y=df_stocks.AMZN,mode='lines+markers',name='Amazon'))\nfig.add_trace(go.Scatter(x=df_stocks.date, y=df_stocks.FB,mode='lines+markers',name='Facebook'))\nfig.add_trace(go.Scatter(x=df_stocks.date, y=df_stocks.GOOG,mode='lines+markers',name='Google',\n                        line=dict(color='firebrick',width=2,dash='dashdot')))\nfig.update_layout(title='Stock Price data',xaxis_title='Price',yaxis_title='Date')","8f375884":"fig.update_layout(\nxaxis=dict(\nshowline=True, showgrid=False , showticklabels=True,\n    linecolor='rgb(204,204,204)',\n    linewidth=2, ticks='outside',tickfont=dict(family='Arial',size=12,color='rgb(82,82,82)',\n),\n),\nyaxis=dict(showgrid=False,zeroline=False,showline=False,showticklabels=False),\nautosize=False,\nmargin=dict(\nautoexpand=False, l=100 , r=100 , t=100,),\nshowlegend=False,plot_bgcolor='white')\n","7d367687":"df_us = px.data.gapminder().query(\"country == 'Pakistan'\")\npx.bar(df_us, x='year',y='pop')\n#This bar chart shows population of Pakistan over period of time\n","5b4aabdb":"# Create a stacked bar with more customization\ndf_tips = px.data.tips()\npx.bar(df_tips, x='day', y='tip', color='sex', title='Tips by Sex on Each Day',\n      labels={'tip': 'Tip Amount', 'day': 'Day of the Week'})","90118719":"# Place bars next to each other\npx.bar(df_tips, x=\"sex\", y=\"total_bill\",\n             color='smoker', barmode='group')","61c2c118":"# Display pop data for countries in Asia in 2007 greater than 2000000\ndf_asia = px.data.gapminder().query(\"continent == 'Asia' and year == 2007 and pop > 2.e6\")\nfig = px.bar(df_asia, y='pop', x='country', text='pop', color='country')\n# Put bar total value above bars with 2 values of precision\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')","b7f69c07":"# Set fontsize and uniformtext_mode='hide' says to hide the text if it won't fit\nfig.update_layout(uniformtext_minsize=8)\n# Rotate labels 45 degrees\nfig.update_layout(xaxis_tickangle=-45)","0d30e367":"df_iris=pd.read_csv(\"..\/input\/iris\/Iris.csv\")\ndf_iris.head()\n","5267fc10":"# Create a scatter plot by defining x, y, different color for count of provided\n# column, size based on supplied column and additional data to display on hover\npx.scatter(df_iris, x=\"SepalWidthCm\", y=\"SepalLengthCm\", color=\"Species\",\n                 size='PetalLengthCm', hover_data=['PetalWidthCm'])","1057d57f":"# Create a customized scatter with black marker edges with line width 2, opaque\n# and colored based on width. Also show a scale on the right\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=df_iris.SepalWidthCm, y=df_iris.SepalLengthCm,\n    mode='markers',\n    marker_color=df_iris.SepalWidthCm,\n    text=df_iris.Species,\n    marker=dict(showscale=True)\n))\nfig.update_traces(marker_line_width=2, marker_size=10)","267a667a":"# Working with a lot of data use Scattergl\nfig = go.Figure(data=go.Scattergl(\n    x = np.random.randn(100000),\n    y = np.random.randn(100000),\n    mode='markers',\n    marker=dict(\n        color=np.random.randn(100000),\n        colorscale='Viridis',\n        line_width=1\n    )\n))\nfig","08472f24":"# Create Pie chart of the largest nations in Asia\n# Color maps here plotly.com\/python\/builtin-colorscales\/\ndf_samer = px.data.gapminder().query(\"year == 2007\").query(\"continent == 'Asia'\")\npx.pie(df_samer, values='pop', names='country', \n       title='Population of Asian continent', \n       color_discrete_sequence=px.colors.sequential.RdBu)","8ed0656e":"# Customize pie chart\ncolors = ['blue', 'green', 'black', 'purple', 'red', 'brown']\nfig = go.Figure(data=[go.Pie(labels=['Water','Grass','Normal','Psychic', 'Fire', 'Ground'], \n                       values=[110,90,80,80,70,60])])\n# Define hover info, text size, pull amount for each pie slice, and stroke\nfig.update_traces(hoverinfo='label+percent', textfont_size=20,\n                  textinfo='label+percent', pull=[0.1, 0, 0.2, 0, 0, 0],\n                  marker=dict(colors=colors, line=dict(color='#FFFFFF', width=2)))","6a2fe0f3":"dice_1 = np.random.randint(1,7,5000)\ndice_2 = np.random.randint(1,7,5000)\ndice_sum = dice_1 + dice_2\n# bins represent the number of bars to make\n# Can define x label, color, title\n# marginal creates another plot (violin, box, rug)\nfig = px.histogram(dice_sum, nbins=11, labels={'value':'Dice Roll'},\n             title='5000 Dice Roll Histogram', marginal='violin',\n            color_discrete_sequence=['blue'])\nfig.update_layout(\n    xaxis_title_text='Dice Roll',\n    yaxis_title_text='Dice Sum',\n    bargap=0.2, showlegend=False\n)","805422a1":"# Stack histograms based on different column data\ndf_tips = px.data.tips()\npx.histogram(df_tips, x=\"total_bill\", color=\"sex\")","fc32de20":"# A box plot allows you to compare different variables\n# The box shows the quartiles of the data. The bar in the middle is the median \n# The whiskers extend to all the other data aside from the points that are considered to be outliers\ndf_tips = px.data.tips()\n# We can see which sex tips the most, points displays all the data points\npx.box(df_tips, x='sex', y='tip', points='all')","2040de73":"# Display tip sex data by day\npx.box(df_tips, x='day', y='tip', color='sex')","b2118b81":"# Adding standard deviation and mean\nfig = go.Figure()\nfig.add_trace(go.Box(x=df_tips.sex, y=df_tips.tip, marker_color='blue',\n                    boxmean='sd'))\n","fd500b22":"# Complex Styling\ndf_stocks = px.data.stocks()\nfig = go.Figure()\n# Show all points, spread them so they don't overlap and change whisker width\nfig.add_trace(go.Box(y=df_stocks.GOOG, boxpoints='all', name='Google',\n                    fillcolor='blue', jitter=0.5, whiskerwidth=0.2))\nfig.add_trace(go.Box(y=df_stocks.AAPL, boxpoints='all', name='Apple',\n                    fillcolor='red', jitter=0.5, whiskerwidth=0.2))","bc91f651":"# Change background \/ grid colors\nfig.update_layout(title='Google vs. Apple', \n                  yaxis=dict(gridcolor='rgb(255, 255, 255)',\n                 gridwidth=3),\n                 paper_bgcolor='rgb(243, 243, 243)',\n                 plot_bgcolor='rgb(243, 243, 243)')","d9e5437d":"\n# Violin Plot is a combination of the boxplot and KDE\n# While a box plot corresponds to data points, the violin plot uses the KDE estimation\n# of the data points\ndf_tips = px.data.tips()\npx.violin(df_tips, y=\"total_bill\", box=True, points='all')","faf7ee6f":"# Multiple plots\npx.violin(df_tips, y=\"tip\", x=\"smoker\", color=\"sex\", box=True, points=\"all\",\n          hover_data=df_tips.columns)","1da0c528":"# Morph left and right sides based on if the customer smokes\nfig = go.Figure()\nfig.add_trace(go.Violin(x=df_tips['day'][ df_tips['smoker'] == 'Yes' ],\n                        y=df_tips['total_bill'][ df_tips['smoker'] == 'Yes' ],\n                        legendgroup='Yes', scalegroup='Yes', name='Yes',\n                        side='negative',\n                        line_color='blue'))","cf049367":"fig.add_trace(go.Violin(x=df_tips['day'][ df_tips['smoker'] == 'No' ],\n                        y=df_tips['total_bill'][ df_tips['smoker'] == 'No' ],\n                        legendgroup='Yes', scalegroup='Yes', name='No',\n                        side='positive',\n                        line_color='red'))","8c596e29":"# Create a heatmap using Seaborn data\nflights = sns.load_dataset(\"flights\")\nflights","b95b776d":"# You can set bins with nbinsx and nbinsy\nfig = px.density_heatmap(flights, x='year', y='month', z='passengers', \n                         color_continuous_scale=\"Viridis\")\nfig","294f7ba3":"# You can add histograms\nfig = px.density_heatmap(flights, x='year', y='month', z='passengers', \n                         marginal_x=\"histogram\", marginal_y=\"histogram\")\nfig","b7aaacda":"# Create a 3D scatter plot using flight data\nfig = px.scatter_3d(flights, x='year', y='month', z='passengers', color='year',\n                   opacity=0.7, width=800, height=400)\nfig","71d14a8a":"fig = px.line_3d(flights, x='year', y='month', z='passengers', color='year')\nfig","1d0a0752":"# With a scatter matrix we can compare changes when comparing column data\nfig = px.scatter_matrix(flights, color='month')\nfig","44593bfb":"\n# There are many interesting ways of working with maps\n# plotly.com\/python-api-reference\/generated\/plotly.express.scatter_geo.html\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.scatter_geo(df, locations=\"iso_alpha\",\n                     color=\"continent\", # which column to use to set the color of markers\n                     hover_name=\"country\", # column added to hover information\n                     size=\"pop\", # size of markers\n                     projection=\"orthographic\")\nfig","81c927fa":"\n# You can color complex maps like we do here representing unemployment data\n\n# Allows us to grab data from a supplied URL\nfrom urllib.request import urlopen\n# Used to decode JSON data\nimport json\n# Grab US county geometry data\nwith urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\n# Grab unemployment data based on each counties Federal Information Processing number\ndf = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/fips-unemp-16.csv\",\n                   dtype={\"fips\": str})\n\n# Draw map using the county JSON data, color using unemployment values on a range of 12\nfig = px.choropleth(df, geojson=counties, locations='fips', color='unemp',\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, 12),\n                           scope=\"usa\",\n                           labels={'unemp':'unemployment rate'}\n                          )\nfig\n","d8c863eb":"# Polar charts display data radially \n# Let's plot wind data based on direction and frequency\n# You can change size and auto-generate different symbols as well\ndf_wind = px.data.wind()\npx.scatter_polar(df_wind, r=\"frequency\", theta=\"direction\", color=\"strength\",\n                size=\"frequency\", symbol=\"strength\")","46760ec3":"# Data can also be plotted using lines radially\n# A template makes the data easier to see\npx.line_polar(df_wind, r=\"frequency\", theta=\"direction\", color=\"strength\",\n                line_close=True, template=\"plotly_dark\", width=800, height=400)","7bed1951":"# Used to represent ratios of 3 variables\ndf_exp = px.data.experiment()\npx.scatter_ternary(df_exp, a=\"experiment_1\", b=\"experiment_2\", \n                   c='experiment_3', hover_name=\"group\", color=\"gender\")","ae67de03":"# You can create numerous subplots\ndf_tips = px.data.tips()\npx.scatter(df_tips, x=\"total_bill\", y=\"tip\", color=\"smoker\", facet_col=\"sex\")","b2646e29":"# We can line up data in rows and columns\npx.histogram(df_tips, x=\"total_bill\", y=\"tip\", color=\"sex\", facet_row=\"time\", facet_col=\"day\",\n       category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"], \"time\": [\"Lunch\", \"Dinner\"]})","b1cff836":"# This dataframe provides scores for different students based on the level\n# of attention they could provide during testing\natt_df = sns.load_dataset(\"attention\")\nfig = px.line(att_df, x='solutions', y='score', facet_col='subject',\n             facet_col_wrap=5, title='Scores Based on Attention')\nfig","6d92c91c":"# Create an animated plot that you can use to cycle through continent\n# GDP & life expectancy changes\ndf_cnt = px.data.gapminder()\npx.scatter(df_cnt, x=\"gdpPercap\", y=\"lifeExp\", animation_frame=\"year\", \n           animation_group=\"country\",\n           size=\"pop\", color=\"continent\", hover_name=\"country\",\n           log_x=True, size_max=55, range_x=[100,100000], range_y=[25,90])","27ea212b":"# Watch as bars chart population changes\npx.bar(df_cnt, x=\"continent\", y=\"pop\", color=\"continent\",\n  animation_frame=\"year\", animation_group=\"country\", range_y=[0,4000000000])","ef2980e2":"## **Violin Plot**","aea1dbe6":"**Content:**\n\n*  Basics\n*  Line Plot\n*  Bar Chart\n*  Scatter Plot\n*  Pie Charts\n*  Histograms\n*  Box Plot\n*  Violin Plot\n*  Density Heatmap\n*  3D Scatter Plot\n*  3D Line Plot\n*  Scatter Matrix\n*  Map Scatter Plot\n*  Choropleth Map\n*  Polar Chart\n*  Ternary Plot\n*  Facets\n*  Animated Plot","2d20de68":"## **Ternary Plot**","11822293":"## **Polar Chart**","aaf1a829":"## **Animated Plot**","5a9d09f0":"## **3D Line Plot**","d8a04d20":"## **Scatter Matrix**","f1972618":"## **Histogram**","3a6fdf02":"## **Facets**","be0dbf49":"## **Style Grids**","1839828b":"## **3D scatter plot**","0f98b4fc":"## **Bar Chart**","df6a112f":"## **Scater Plot**","c1c8f2c0":"## **Basics**","317040df":"If you like this notebook,don't forget to upvote.","58701707":"## **Line Plot**","84dd96c3":"## **Map Scatter Plot**","81ae9e9a":"## **Density Heatmap**","f7c7154d":"## **Pie Charts**","4c2bc235":"## **Choropleth Maps**","bb3b1a5e":"## **Box Plots**"}}