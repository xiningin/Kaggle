{"cell_type":{"8e94a1ed":"code","dae25584":"code","b7fbc1df":"code","db475254":"code","f00c5b42":"code","5d7f22c5":"code","961dfb33":"code","1cb54b99":"code","c87b7d51":"code","6a9f197e":"code","fbaea71e":"code","d9fe3103":"code","a4500704":"code","caa64c78":"code","7ca811af":"code","17092eab":"code","e0194176":"code","c04b8761":"markdown","5eb044f4":"markdown","74e8eabb":"markdown","82b5f5dd":"markdown","acc40fa4":"markdown","56ae6f46":"markdown","8b4b23ef":"markdown"},"source":{"8e94a1ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly as py\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl', offline=True)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dae25584":"data = pd.read_csv('..\/input\/coursera-course-dataset\/coursea_data.csv')\ndata","b7fbc1df":"data=data.drop_duplicates()","db475254":"print('NaN values')\nprint(data.isna().sum())\nprint('Null values')\nprint(data.isnull().sum())","f00c5b42":"data.info()","5d7f22c5":"data['course_students_enrolled']=data['course_students_enrolled'].apply(lambda x: float(x.split('k')[0] if x[-1]=='k' else float(x.split('m')[0])*1000))","961dfb33":"import plotly.express as px\nfig=px.pie(data.groupby('course_Certificate_type').size().reset_index(), values=0, names='course_Certificate_type', color_discrete_sequence=px.colors.sequential.RdBu, \n          title='Amount of certificate types')\niplot(fig)","1cb54b99":"import plotly.express as px\nfig=px.pie(data.groupby('course_difficulty').size().reset_index(), values=0, names='course_difficulty', color_discrete_sequence=px.colors.sequential.RdBu, \n          title='Amount of levels')\niplot(fig)","c87b7d51":"px.bar(data.groupby('course_Certificate_type').course_students_enrolled.sum().reset_index(), x='course_Certificate_type', y='course_students_enrolled', \n       hover_data=[data.groupby('course_Certificate_type').course_rating.min(),data.groupby('course_Certificate_type').course_rating.max(),\n                                                                                    data.groupby('course_Certificate_type').course_rating.mean()], labels={\n           'course_Certificate_type':'Certificate type', 'course_students_enrolled':'amount of students','hover_data_0':'Min rate','hover_data_1':'Max rate',\n           'hover_data_2':'Mean rate'}, title='Certificate type: Amount of students, Min, Max and Mean rate')","6a9f197e":"a=data[data.course_Certificate_type=='COURSE'].groupby('course_difficulty').course_students_enrolled.sum().reset_index()\na=a.merge(data[data.course_Certificate_type=='COURSE'].groupby('course_difficulty').course_rating.min().reset_index(), on='course_difficulty')\na=a.merge(data[data.course_Certificate_type=='COURSE'].groupby('course_difficulty').course_rating.max(), on='course_difficulty')\na=a.merge(data[data.course_Certificate_type=='COURSE'].groupby('course_difficulty').course_rating.mean(), on='course_difficulty')\na=a.rename(columns={'course_difficulty':'Difficulty', 'course_students_enrolled':'Student Amount', 'course_rating_x':'Min rate',\n            'course_rating_y':'Max rate', 'course_rating':'Mean rate' })\npx.bar(a, x='Difficulty', y='Student Amount', hover_data=['Min rate', 'Max rate', 'Mean rate'], title='Courses: Student Amount and Rates')","fbaea71e":"a=data[data.course_Certificate_type=='SPECIALIZATION'].groupby('course_difficulty').course_students_enrolled.sum().reset_index()\na=a.merge(data[data.course_Certificate_type=='SPECIALIZATION'].groupby('course_difficulty').course_rating.min().reset_index(), on='course_difficulty')\na=a.merge(data[data.course_Certificate_type=='SPECIALIZATION'].groupby('course_difficulty').course_rating.max(), on='course_difficulty')\na=a.merge(data[data.course_Certificate_type=='SPECIALIZATION'].groupby('course_difficulty').course_rating.mean(), on='course_difficulty')\na=a.rename(columns={'course_difficulty':'Difficulty', 'course_students_enrolled':'Student Amount', 'course_rating_x':'Min rate',\n            'course_rating_y':'Max rate', 'course_rating':'Mean rate' })\npx.bar(a, x='Difficulty', y='Student Amount', hover_data=['Min rate', 'Max rate', 'Mean rate'], title='Specialization: Student Amount and Rates')","d9fe3103":"a=data[data.course_Certificate_type=='PROFESSIONAL CERTIFICATE'].groupby('course_difficulty').course_students_enrolled.sum().reset_index()\na=a.merge(data[data.course_Certificate_type=='PROFESSIONAL CERTIFICATE'].groupby('course_difficulty').course_rating.min().reset_index(), on='course_difficulty')\na=a.merge(data[data.course_Certificate_type=='PROFESSIONAL CERTIFICATE'].groupby('course_difficulty').course_rating.max(), on='course_difficulty')\na=a.merge(data[data.course_Certificate_type=='PROFESSIONAL CERTIFICATE'].groupby('course_difficulty').course_rating.mean(), on='course_difficulty')\na=a.rename(columns={'course_difficulty':'Difficulty', 'course_students_enrolled':'Student Amount', 'course_rating_x':'Min rate',\n            'course_rating_y':'Max rate', 'course_rating':'Mean rate' })\npx.bar(a, x='Difficulty', y='Student Amount', hover_data=['Min rate', 'Max rate', 'Mean rate'], title='Profesional certificate: Student Amount and Rates')","a4500704":"px.pie(data.course_organization.value_counts().reset_index().head(20), values='course_organization',names='index',\n       labels={'course_organization':'amount of courses', 'index':'Company'}, title='Top 20 Course organizations')","caa64c78":"a=data[(data.course_rating>4.6) & (data.course_students_enrolled>200.0) & (data.course_Certificate_type=='COURSE')]\npx.pie(a[:20],values='course_students_enrolled', hover_data=['course_organization', 'course_title'], title='TOP 20 COURSES')","7ca811af":"px.bar(a[:20], x='course_difficulty', y='course_students_enrolled', title='TOP 20 COURSES: level distribution', hover_data=['course_organization', 'course_title'])","17092eab":"a=data[(data.course_rating>4.6) & (data.course_students_enrolled>200.0) & (data.course_Certificate_type=='SPECIALIZATION')]\npx.pie(a,values='course_students_enrolled', hover_data=['course_organization', 'course_title'], title='TOP 20 SPECIALIZATIONS')","e0194176":"px.bar(a, x='course_difficulty', y='course_students_enrolled', hover_data=['course_organization', 'course_title'],\n       title='TOP 20 SPECIALIZATIONS: level distribution')","c04b8761":"#### We see, that course_students_enrolled is object type, but it should be represented as numeric. Let's do this data preparation. Quantity of enrolled students will be given in thousands.","5eb044f4":"#### Let's see brief summary of data","74e8eabb":"### Looking at data","82b5f5dd":"## Analytics","acc40fa4":"#### Checking if there are NaN and null values","56ae6f46":"### Let's see what proportion of the total amount of educational content is each type of certificate. -> It is 65,3% for courses, 33,3% for specialization and only 1,35% for professional certificates.","8b4b23ef":"## See TOP 20 COURSES (have 4.6+ rate and 200K+ students enrolled"}}