{"cell_type":{"a318d6ba":"code","c380d5fa":"code","c3e2ec76":"code","3932ab24":"code","0f846b98":"code","ed679a00":"code","6af35c30":"code","26cfc39d":"code","be89ab18":"code","1c1d8940":"code","fb954b6d":"markdown","92228875":"markdown"},"source":{"a318d6ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c380d5fa":"data_covid = pd.read_csv('\/kaggle\/input\/covid19-case-surveillance-public-use-dataset\/COVID-19_Case_Surveillance_Public_Use_Data.csv')\ndata = data_covid.copy()","c3e2ec76":"data.head(4)","3932ab24":"data.columns","0f846b98":"data_feature = data.dropna()\ndata_feature","ed679a00":"data_feature.info()","6af35c30":"print('Started', data_feature['cdc_report_dt'].min() , 'and End', data_feature['cdc_report_dt'].max())","26cfc39d":"data_feature['age_group'].unique()","be89ab18":"age = ['0 - 9 Years', '10 - 19 Years', '20 - 29 Years', '30 - 39 Years', '40 - 49 Years',\n       '50 - 59 Years', '60 - 69 Years', '70 - 79 Years', '80+ Years']\n\ndef create_list(value):\n    range_age = []\n    for old in value:\n        sam = []\n        range_old = old\n        len_old_yes = len(data_feature[(data_feature['death_yn'] == 'Yes') & (data_feature['age_group'] == old)])\n        len_old_no = len(data_feature[(data_feature['death_yn'] == 'No') & (data_feature['age_group'] == old)])\n        sam.append(range_old)\n        sam.append(len_old_yes)\n        sam.append(len_old_no)\n        range_age.append(sam)\n    return range_age\n\n## convert list to DataFrame\nnew_df = pd.DataFrame(create_list(age), columns=['year', 'Dearth', 'Alive'])","1c1d8940":"## Plot pie chart Dearth\nplt.figure(figsize=(15, 15))\nplt.subplot(121)\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)  # explode 1st slice\nplt.pie(new_df['Dearth'], startangle = 90, explode=explode, autopct='%1.0f%%', shadow=True)\nplt.legend(labels=new_df['year'])\nplt.title(\"Dearth in 2020\/11\/10 to 2020\/11\/14\")\n\n## Plot pie chart Alive\nplt.subplot(122)\nplt.pie(new_df['Alive'], startangle = 90, explode=explode, autopct='%1.0f%%', shadow=True)\nplt.legend(labels=new_df['year'])\nplt.title(\"Alive in 2020\/11\/10 to 2020\/11\/14\")\nplt.show()\n\n## Show Table\nfig, ax = plt.subplots()\nax.table(cellText=new_df.values, colLabels=new_df.columns, loc=\"center\")\nax.axis('off')\nfig.tight_layout()\nplt.show()","fb954b6d":"# ****Create DataFrame from dictionary****","92228875":"# Plot Pie Chart and Table of Data"}}