{"cell_type":{"a101284f":"code","c6dcbf42":"code","1eabcbdc":"code","64e3aca7":"code","2b7986d5":"code","91f19844":"code","5e2fac04":"code","c23a0a9a":"code","c5ce84a3":"code","5f5bd736":"code","64b71f9a":"code","c9458986":"code","dbf74dc5":"code","a45ba26b":"code","3cfde8a7":"code","77fd44e9":"code","b091141b":"code","4e81e7f0":"code","b2550481":"code","b90927f1":"code","dcfca129":"code","cce9eb7c":"code","0a86b9cf":"code","04f31e73":"code","9628156e":"code","107d9242":"code","1eccbadd":"code","c11df109":"code","93671f46":"code","912ad8b5":"code","323f3e5b":"code","fbf05605":"code","50f43aab":"code","cb685591":"code","34fee7b0":"code","c4551f3f":"code","b8d1247a":"code","0fd0b968":"code","4bc39692":"code","5bb2f24a":"code","b7a64de8":"code","f5dd1ec5":"code","707f43ef":"code","d89baa6e":"code","469a1237":"code","1721f336":"code","6d80946e":"code","25822c4c":"code","f7ef5bc8":"code","6e28558b":"code","3ac39420":"code","92702a08":"code","c468facb":"code","8232aa3a":"code","ed9ef613":"code","7c2f12e5":"code","18e59997":"code","17e9b83d":"code","cbc8c615":"code","13ad88e4":"code","1e6f5f4e":"code","643f6182":"code","ee4fed4e":"code","29de9f4b":"code","73627457":"code","cc1add84":"code","5c76cc77":"code","bb16d983":"code","3408a9f3":"code","9e101ead":"code","0fd6fafb":"code","974e881f":"code","abf06429":"code","599cd0e6":"code","defa00f0":"code","df07337a":"code","d3b066b7":"code","e775d704":"code","18cc6445":"code","6b754fa0":"code","77c7c40d":"code","326fb74b":"code","f7371595":"code","1c708656":"code","60a01a1d":"code","630124a1":"code","40f099a2":"code","d4d9d333":"code","0459886b":"code","d4792a4a":"code","267dae5c":"code","26271b30":"code","588ef99f":"code","3e00792f":"code","0e90720a":"code","c6e5079f":"code","58e9e41a":"code","35e0253f":"code","6030963c":"code","e7dcd886":"code","40f68782":"code","8a3debb9":"code","dfca4877":"code","a554d8b7":"code","2db53fb4":"code","061df58b":"code","004f7384":"code","c570f969":"code","7260ac2a":"code","580323f3":"code","c5c72ce3":"code","915c8b9e":"code","6e4d0744":"code","fe71e8de":"code","36aa2f61":"code","a4d920a0":"code","24f3b60d":"code","57ffea42":"code","37fa8a6c":"code","6d36476c":"code","e783370d":"code","45e1c4d2":"code","cff903a1":"code","3d3e35ea":"code","7ffe5270":"code","8fe91507":"code","634bbc5b":"code","7f8fecf0":"code","6dfebb3c":"code","8a54fde4":"code","cdf3bb1a":"code","4fc39044":"code","671f4246":"code","6c310261":"code","fbe931e7":"code","5f7022ef":"code","319aa16d":"code","03c9642c":"code","e8a84977":"code","3439be39":"code","eb626118":"code","ff31f92b":"code","d2bcf0ff":"code","2186402c":"code","24ba8393":"code","d4131055":"code","c7631758":"code","271221ac":"code","0f30f5d9":"code","137143ad":"code","0d46996f":"code","6b9b64e8":"code","77ffefc5":"code","5b90a34c":"code","fa43133e":"code","0819c032":"code","5245626a":"code","f616abca":"code","5aab612a":"code","124872a1":"code","536fc59b":"code","3facb877":"code","62f29826":"code","626b904b":"code","2f4d8ed9":"code","c9967537":"code","e127a210":"markdown","a160419c":"markdown","ae656ef9":"markdown","9d2f0a64":"markdown","73b92ecb":"markdown","d13e7736":"markdown","c10de796":"markdown","b16788dc":"markdown","33237dbb":"markdown","0fde6fac":"markdown","72461a05":"markdown","646af252":"markdown","37e1f275":"markdown","6845133c":"markdown","44420c74":"markdown","2ebdd618":"markdown","ba5c63fc":"markdown","c4c79258":"markdown","22ced5c5":"markdown","f04d6124":"markdown","a63d1d9b":"markdown","360f8614":"markdown","3a3f3143":"markdown","b5e216a0":"markdown","897a3b04":"markdown","1ab6bb19":"markdown","4bec9f96":"markdown","b6c37f35":"markdown","439b3b7b":"markdown","aa302eef":"markdown","100e2dd0":"markdown","aa4a7e8f":"markdown","7981ef63":"markdown","cd409738":"markdown","b8b081a7":"markdown","6c0923d5":"markdown","13d9de56":"markdown","cddd1447":"markdown","43b381bb":"markdown","82ea9a80":"markdown","b5bf4f61":"markdown","ac15844b":"markdown","d5b95741":"markdown","2c451513":"markdown","b5a37173":"markdown","c1c1641c":"markdown","f66dc4d3":"markdown","7159446d":"markdown","8008b7fc":"markdown","bb3e1533":"markdown","86bcafe9":"markdown","48a33840":"markdown","333cc2a8":"markdown","0905d16a":"markdown","9d228c86":"markdown","95623aab":"markdown","4cf114f0":"markdown","d0d7cdee":"markdown","fc6c76cd":"markdown","515ca2ec":"markdown","55f7f70c":"markdown","cc493db7":"markdown","9e92a8b0":"markdown","3c45c4e4":"markdown","87cff7c5":"markdown","71720c33":"markdown","447eba2f":"markdown","0a9068f8":"markdown","f4ba73d2":"markdown","04c86da1":"markdown","ed978da1":"markdown","947a498a":"markdown","70d86d6a":"markdown","da3e1d39":"markdown","b39a50fb":"markdown","21263816":"markdown","1b31db52":"markdown","fbd50909":"markdown","25f4cebe":"markdown","a9d1ee27":"markdown","f4b49bb4":"markdown","5fa047cf":"markdown","c0b5b9e2":"markdown","8f84942c":"markdown","b1d62397":"markdown","ccca3761":"markdown","a092841e":"markdown","29afaa9c":"markdown","e6e73b38":"markdown","bda1f33b":"markdown","7f84c2c7":"markdown","67f98ae7":"markdown","ff4d2a34":"markdown","1f38fde5":"markdown","aa4294b1":"markdown","8827d808":"markdown","befc1426":"markdown","24dfd621":"markdown","baff861e":"markdown","6fa98744":"markdown","e6b21fad":"markdown","77211896":"markdown","932e1ee4":"markdown","5038ccc9":"markdown","385e9359":"markdown","39cc87a4":"markdown","3fabcbb5":"markdown","203396ff":"markdown","b06a1418":"markdown","2c6055c4":"markdown","29415b4c":"markdown","31931b82":"markdown","ffb2ca67":"markdown","96352431":"markdown","db30ac4b":"markdown","b7cbc76c":"markdown","49f50c5f":"markdown","cbdd1005":"markdown","29f2ac3c":"markdown","7d050b3a":"markdown","a34f7dc2":"markdown","f61d406a":"markdown","dbd889c2":"markdown","56bd1bc9":"markdown","c2e3eb57":"markdown","f8c60b52":"markdown","57ec0ff5":"markdown","92ae96a0":"markdown","67a9bb10":"markdown","9d64a7de":"markdown","4bcbec2a":"markdown","ac95ba9a":"markdown","c3b1a4bb":"markdown","a9f80e79":"markdown","f0849aa8":"markdown","3b541e15":"markdown","08648817":"markdown","fb126a55":"markdown","9407f559":"markdown","cfe52876":"markdown","0f86ec24":"markdown","54ccca9b":"markdown","07b8d452":"markdown","9fdc3ff4":"markdown","23dfb963":"markdown","5f391add":"markdown","4e937485":"markdown","04f75c2e":"markdown","be6f2651":"markdown","8f985dcc":"markdown","944bb656":"markdown","e6ed0529":"markdown","3206fd33":"markdown","2715a777":"markdown","2700c3aa":"markdown","2345730a":"markdown","9aeb1433":"markdown","0d3c8043":"markdown","26198b6c":"markdown","578d817a":"markdown","1e19e59e":"markdown","66d50a9d":"markdown","ccbd9d45":"markdown","029e4af5":"markdown","b98fe13a":"markdown","2ace838c":"markdown","aafed8c6":"markdown","a5bc3094":"markdown","eb4d3267":"markdown","8929b14f":"markdown","4febb99f":"markdown","647bfd6c":"markdown","be3e2a49":"markdown","cd972b6e":"markdown","b6e7577a":"markdown","c88f0d5e":"markdown","af7f550c":"markdown","340a2626":"markdown","a5e964eb":"markdown","fc8e4328":"markdown","f37069f4":"markdown","1a0deef3":"markdown","969717e9":"markdown","c47081c0":"markdown","ad38e10b":"markdown","b38b3e01":"markdown"},"source":{"a101284f":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\ndf = pd.read_csv('..\/input\/used-cars-database\/autos.csv',encoding='latin_1')\nzip_codes = pd.read_csv('..\/input\/zipcodes\/Zipcodes.csv')\nzip_codes = zip_codes.loc[:,['zipcode','state']]","c6dcbf42":"df = df.merge(zip_codes,how='left',left_on='postalCode',right_on='zipcode',validate = 'm:1')\ndf.drop(columns='zipcode',inplace=True)\ndf.head()","1eabcbdc":"df['seller'].value_counts()","64e3aca7":"df['seller'].replace({'privat':'private',\n                      'gewerblich':'commercial'},\n                     inplace = True)\ndf['seller'].head()","2b7986d5":"df['offerType'].value_counts()","91f19844":"df['offerType'].replace({'Angebot':'offer',\n                      'Gesuch':'application'},\n                     inplace = True)\ndf['offerType'].head()","5e2fac04":"df['abtest'].value_counts()","c23a0a9a":"df['vehicleType'].value_counts()","c5ce84a3":"df['vehicleType'].replace({'kleinwagen':'small car',\n                      'kombi':'microbus',\n                      'cabrio':'convertible',\n                      'andere' : 'other'},\n                     inplace = True)\ndf['vehicleType'].head()","5f5bd736":"df['gearbox'].value_counts()","64b71f9a":"df['gearbox'].replace({'manuell':'manual',\n                      'automatik':'automatic'},\n                     inplace = True)\ndf['gearbox'].head()","c9458986":"orig_list = list(df['model'].value_counts().index)\nconverted_list = ['golf','other','3s','polo','corsa','astra','passat','a4','cclass','5s','eclass','a3','a6','focus','fiesta','transporter','twingo','2series','fortwo','aclass','vectra','1s','mondeo','clio','touran','3series','punto','zafira','megane','ibiza','ka','lupo','xseries','octavia','cooper','fabia','clk','micra','caddy','80','sharan','scenic','omega','slk','leon','laguna','civic','tt','1stseries','6series','iseries','galaxy','mclass','7s','meriva','yaris','great','mxseries','a5','kangoo','911','bclass','500','tiguan','vito','escort','one','arosa','zseries','bora','colt','beetle','berlingo','sprinter','tigra','v40','transit','touareg','fox','swift','insignia','c_max','corolla','panda','seicento','sl','v70','4series','scirocco','156','a1','primera','espace','grand','stilo','almera','a8','147','avensis','qashqai','eos','c3','c5','signum','Beetle','s_max','5series','q5','c4','matiz','ducato','agila','aygo','viano','getz','601','combo','100','carisma','cayenne','boxster','alhambra','cordoba','c2','superb','c1','kuga','forfour','rio','jetta','cuore','a2','altea','cadet','rav','picanto','sorento','mseries','accord','crseries','up','q7','vivaro','toledo','voyager','xcseries','Bravo','santa','doblo','logan','mode','verso','ptcruiser','cl','sportage','jazz','fusion','sandero','mustang','roomster','carnival','6s','ceed','gallant','v50','q3','tucson','lancer','auris','impreza','phaeton','freelander','glk','calibra','pajero','x_trail','850','159','jimny','ypsilon','spider','duster','clubman','yeti','cseries','cc','roadster','cherokee','x_type','gclass','captiva','vclass','wrangler','legacy','s60','300c','rxseries','defender','justy','sirion','forester','outlander','grade','niva','s_type','spark','r19','navara','cxseries','aveo','900','antara','90','juke','discovery','exeo','range_rover_sport','kalos','range_rover','citigo','lanos','mii','crossfire','range_rover_evoque','gl','nubira','move','lybra','145','v60','croma','amarok','delta','terios','lodgy','9000','charade','b_max','musa','materia','200','kappa','samara','elefantino','i3','kalina','serie_2','rangerover','serie_3','serie_1','discovery_sport']","dbf74dc5":"df['model'].replace(dict(zip(orig_list,converted_list)),inplace = True)\ndf.head()","a45ba26b":"df['monthOfRegistration'].value_counts()","3cfde8a7":"df['fuelType'].value_counts()","77fd44e9":"df['fuelType'].replace({'benzin':'petrol',\n                      'andere':'other',\n                      'elektro':'electric'},\n                     inplace = True)\ndf['fuelType'].head()","b091141b":"df['brand'].value_counts()","4e81e7f0":"df['notRepairedDamage'].value_counts()","b2550481":"df['notRepairedDamage'].replace({'nein':'No',\n                      'ja':'Yes'},\n                     inplace = True)\ndf['notRepairedDamage'].head()","b90927f1":"df.head(3)","dcfca129":"df.shape","cce9eb7c":"df.info()","0a86b9cf":"df['dateCrawled'] = pd.to_datetime(df['dateCrawled'])\ndf['dateCreated'] = pd.to_datetime(df['dateCreated'])\ndf['lastSeen'] = pd.to_datetime(df['lastSeen'])","04f31e73":"df.info()","9628156e":"df.head()","107d9242":"def get_missing_val_count_df(df):\n  missing_count_list = []\n  for col in df.columns:\n    missing_count_list.append(df[col].isnull().sum())\n  missing_count_df = pd.DataFrame(missing_count_list,columns=['count'],index = df.columns)\n  return missing_count_df.sort_values('count',ascending=False)\nget_missing_val_count_df(df)","1eccbadd":"df['price'].describe()","c11df109":"plt.figure(figsize = (20,5))\nsns.boxplot(df['price'])","93671f46":"plt.figure(figsize = (20,5))\nsns.boxplot(df[(df['price']>=100) & (df['price']<=100000)]['price'])","912ad8b5":"dfprice = df[(df['price'].isnull() == False)]['price']","323f3e5b":"#Import necessary libraries\nfrom sklearn.ensemble import IsolationForest\n#The required columns\nisolation_forest = IsolationForest(contamination='auto')\nisolation_forest.fit(dfprice.values.reshape(-1,1))\n\nxx = np.linspace(dfprice.min(), dfprice.max(), len(df)).reshape(-1,1)\nprint(xx)\nanomaly_score = isolation_forest.decision_function(xx)\noutlier = isolation_forest.predict(xx)\n\nplt.figure(figsize=(25,5))\nplt.plot(xx, anomaly_score, label='anomaly score')\nplt.fill_between(xx.T[0], np.min(anomaly_score), np.max(anomaly_score), \n                     where=outlier==-1, color='r', \n                     alpha=.4, label='outlier region')\nplt.legend()\nplt.xlim(0, 100000)\n# plt.axis([0,100000,0,0])\nplt.title('price')","fbf05605":"sns.distplot(df[(df['price']>=100) & (df['price']<=100000)]['price'])","50f43aab":"df[(df['price']>=100) & (df['price']<=100000)].shape","cb685591":"df2 = df[(df['price']>=100) & (df['price']<=100000)]","34fee7b0":"get_missing_val_count_df(df2)","c4551f3f":"from scipy.stats import shapiro\nshapiro(df2['price'])","b8d1247a":"df2['kilometer'].describe()","0fd0b968":"df2['kilometer'].value_counts()","4bc39692":"df2['kilometer'].value_counts().plot(kind = 'bar')","5bb2f24a":"from scipy.stats import f_oneway\ndef oneway_posthoc(i):\n    cat = {}\n    for j in range(df2[i].nunique()):\n        if pd.isna(df2[i].unique()[j]) == False:\n            cat[df2[i].unique()[j]] = df2[df2[i] == df2[i].unique()[j]]['price']\n    tstat,pval = f_oneway(*list(cat.values()))\n    print(f'pvalue for {i} is {pval}')\n    print()\n    for k in cat:\n        print(f'Avg price of car for {i} = {k} is ',cat[k].mean())","b7a64de8":"oneway_posthoc('kilometer')","f5dd1ec5":"df2.boxplot(column='price',by = 'kilometer')","707f43ef":"df2['notRepairedDamage'].describe()","d89baa6e":"df2['notRepairedDamage'].value_counts(dropna = False).plot(kind = 'bar')","469a1237":"df2 = df2[df2['notRepairedDamage'].isnull() == False]","1721f336":"price_repaired = df2.loc[df2['notRepairedDamage'] == 'No','price']\nprice_notRepaired = df2.loc[df2['notRepairedDamage'] == 'Yes','price']","6d80946e":"print(shapiro(price_repaired))\nprint(shapiro(price_notRepaired))","25822c4c":"from scipy.stats import bartlett\nprint(bartlett(price_repaired,price_notRepaired))","f7ef5bc8":"from scipy.stats import mannwhitneyu\nprint(mannwhitneyu(price_repaired,price_notRepaired))","6e28558b":"print('Avg price for car which has been repaired : ',price_repaired.mean())\nprint('Avg price for car which has not been repaired : ',price_notRepaired.mean())","3ac39420":"df2.boxplot(column='price',by = 'notRepairedDamage')","92702a08":"df2['vehicleType'].describe()","c468facb":"df2['vehicleType'].value_counts(dropna = False).plot(kind = 'bar')","8232aa3a":"oneway_posthoc('vehicleType')","ed9ef613":"df2.boxplot(column='price',by = 'vehicleType')","7c2f12e5":"df2['fuelType'].describe()","18e59997":"print(df2['fuelType'].value_counts(dropna = False))\ndf2['fuelType'].value_counts(dropna = False).plot(kind = 'bar')","17e9b83d":"df2 = df2[df2['fuelType'].isnull() == False]","cbc8c615":"oneway_posthoc('fuelType')","13ad88e4":"df2.boxplot(column='price',by = 'fuelType')","1e6f5f4e":"df2['model'].describe()","643f6182":"plt.figure(figsize=(40,8))\ndf2['model'].value_counts(dropna = False).plot(kind = 'bar')","ee4fed4e":"df2 = df2[df2['model'].isnull() == False]","29de9f4b":"oneway_posthoc('model')","73627457":"df2['gearbox'].describe()","cc1add84":"df2['gearbox'].value_counts(dropna = False).plot(kind = 'bar')","5c76cc77":"df2 = df2[df2['gearbox'].isnull() == False]","bb16d983":"price_manual = df2.loc[df2['gearbox'] == 'manual','price']\nprice_automatic = df2.loc[df2['gearbox'] == 'automatic','price']","3408a9f3":"print(shapiro(price_manual))\nprint(shapiro(price_automatic))","9e101ead":"from scipy.stats import bartlett\nprint(bartlett(price_manual,price_automatic))","0fd6fafb":"from scipy.stats import mannwhitneyu\nprint(mannwhitneyu(price_manual,price_automatic))","974e881f":"print('Avg price for car which has manual gearbox : ',price_manual.mean())\nprint('Avg price for car which has automatic gearbox : ',price_automatic.mean())","abf06429":"df2.boxplot(column='price',by = 'gearbox')","599cd0e6":"df2['seller'].describe()","defa00f0":"print(df2['seller'].value_counts(dropna = False))\ndf2['seller'].value_counts(dropna = False).plot(kind = 'bar')","df07337a":"df2['offerType'].describe()","d3b066b7":"print(df2['offerType'].value_counts(dropna = False))\ndf2['offerType'].value_counts(dropna = False).plot(kind = 'bar')","e775d704":"df2['abtest'].describe()","18cc6445":"df2['abtest'].value_counts(dropna = False).plot(kind = 'bar')","6b754fa0":"price_test = df2.loc[df2['abtest'] == 'test','price']\nprice_control = df2.loc[df2['abtest'] == 'control','price']","77c7c40d":"print(shapiro(price_test))\nprint(shapiro(price_control))","326fb74b":"from scipy.stats import bartlett\nprint(bartlett(price_test,price_control))","f7371595":"from scipy.stats import mannwhitneyu\nprint(mannwhitneyu(price_test,price_control))","1c708656":"df2['yearOfRegistration'].describe()","60a01a1d":"df2.loc[(df2['yearOfRegistration']<1923) | (df2['yearOfRegistration']>2020),'yearOfRegistration'] = np.nan","630124a1":"plt.figure(figsize=(25,5))\ndf2['yearOfRegistration'].value_counts(dropna = False).plot(kind = 'bar')","40f099a2":"df2 = df2[df2['yearOfRegistration'].isnull() == False]","d4d9d333":"df2['powerPS'].describe()","0459886b":"isolation_forest = IsolationForest(contamination='auto')\nisolation_forest.fit(df2['powerPS'].values.reshape(-1,1))\n\nxx = np.linspace(df2['powerPS'].min(), df2['powerPS'].max(), len(df)).reshape(-1,1)\nprint(xx)\nanomaly_score = isolation_forest.decision_function(xx)\noutlier = isolation_forest.predict(xx)\n\nplt.figure(figsize=(25,5))\nplt.plot(xx, anomaly_score, label='anomaly score')\nplt.fill_between(xx.T[0], np.min(anomaly_score), np.max(anomaly_score), \n                     where=outlier==-1, color='r', \n                     alpha=.4, label='outlier region')\nplt.legend()\nplt.xlim(40, 800)\nplt.title('Power PS')","d4792a4a":"df2 = df2[(df2['powerPS']<800) & (df2['powerPS']>40)]","267dae5c":"sns.scatterplot(x = 'price', y = 'powerPS',data = df2)","26271b30":"df2[['price','powerPS']].corr()","588ef99f":"df2['state'].describe()","3e00792f":"plt.figure(figsize=(15,5))\ndf2['state'].value_counts(dropna = False).plot(kind = 'bar')","0e90720a":"df2 = df2[df2['state'].isnull() == False]","c6e5079f":"oneway_posthoc('state')","58e9e41a":"df2.boxplot(column='price',by = 'state',figsize = (15,5))\nplt.xticks(rotation = 90)","35e0253f":"df2['CountryOfManufacture'] = df2['brand']\n\ndf2['CountryOfManufacture'] = df2['CountryOfManufacture'].replace(['ford','chevrolet','chrysler','jeep'], 'USA')\ndf2['CountryOfManufacture'] = df2['CountryOfManufacture'].replace(['jaguar', 'land_rover', 'rover', 'mini'], 'UK')\ndf2['CountryOfManufacture'] = df2['CountryOfManufacture'].replace(['toyota', 'nissan', 'honda', 'subaru', 'mazda', \n                                                                   'mitsubishi','suzuki','daihatsu'], 'Japan')\ndf2['CountryOfManufacture'] = df2['CountryOfManufacture'].replace(['volkswagen', 'bmw', 'audi', 'mercedes_benz','opel',\n                                                                   'porsche', 'smart','trabant'], 'Germany')\ndf2['CountryOfManufacture'] = df2['CountryOfManufacture'].replace(['hyundai', 'kia', 'daewoo'], 'Korea')\ndf2['CountryOfManufacture'] = df2['CountryOfManufacture'].replace(['volvo','saab'], 'Sweden')\ndf2['CountryOfManufacture'] = df2['CountryOfManufacture'].replace(['fiat', 'alfa_romeo', 'lancia', 'Ferrari'], 'Italy')\ndf2['CountryOfManufacture'] = df2['CountryOfManufacture'].replace(['skoda'],'Czech')\ndf2['CountryOfManufacture'] = df2['CountryOfManufacture'].replace(['peugeot','renault','citroen'],'France')\ndf2['CountryOfManufacture'] = df2['CountryOfManufacture'].replace('seat','Spain')\ndf2['CountryOfManufacture'] = df2['CountryOfManufacture'].replace('dacia','Romania')\ndf2['CountryOfManufacture'] = df2['CountryOfManufacture'].replace('lada','Russia')\ndf2['CountryOfManufacture'] = df2['CountryOfManufacture'].replace(['sonstige_autos'],'Others')","6030963c":"df2['CountryOfManufacture'].describe()","e7dcd886":"plt.figure(figsize=(15,5))\ndf2['CountryOfManufacture'].value_counts(dropna = False).plot(kind = 'bar')","40f68782":"oneway_posthoc('CountryOfManufacture')","8a3debb9":"df2.boxplot(column='price',by = 'CountryOfManufacture',figsize = (15,5))\nplt.xticks(rotation = 90)","dfca4877":"df2['brand'].describe()","a554d8b7":"plt.figure(figsize=(15,5))\ndf2['brand'].value_counts(dropna = False).plot(kind = 'bar')","2db53fb4":"oneway_posthoc('brand')","061df58b":"df2.boxplot(column='price',by = 'brand',figsize = (15,5))\nplt.xticks(rotation = 90)","004f7384":"df2['monthOfRegistration'].describe()","c570f969":"plt.figure(figsize=(25,7))\ndf2['monthOfRegistration'].value_counts(dropna = False).plot(kind = 'bar')","7260ac2a":"df2 = df2[df2['monthOfRegistration'] != 0]","580323f3":"val = list(df2['lastSeen'] - df2['dateCreated'])\ndays = [obj.days for obj in val]\nfor i in range(len(days)):\n  if days[i] < 0:\n    days[i] = np.nan\ndf2['No_of_days_online'] = days","c5c72ce3":"sns.scatterplot(x = 'price', y = 'No_of_days_online',data = df2)","915c8b9e":"df2[['price','No_of_days_online']].corr()","6e4d0744":"import datetime\n\ndef calculateAge(yr,mnth):\n    today_date = datetime.datetime.today()\n    years = today_date.year - yr\n    month = today_date.month - mnth\n    ageindecimal = years + month\/12\n    return round(ageindecimal,2)","fe71e8de":"df2['ageOfVehicle'] = list(map(calculateAge,df2['yearOfRegistration'],df2['monthOfRegistration']))","36aa2f61":"sns.scatterplot(y = 'price', x = 'ageOfVehicle',data = df2)","a4d920a0":"df2[['price','ageOfVehicle']].corr()","24f3b60d":"df3 = df2[['kilometer','notRepairedDamage', 'vehicleType', 'fuelType', 'gearbox', 'ageOfVehicle', 'model', 'brand', 'powerPS', 'No_of_days_online', 'state','CountryOfManufacture','price']]","57ffea42":"df3.head()","37fa8a6c":"get_missing_val_count_df(df3)","6d36476c":"# cat_cols = ['notRepairedDamage', 'vehicleType', 'fuelType', 'gearbox', 'model', 'brand']\ncat_cols = ['vehicleType', 'model', 'brand']","e783370d":"from sklearn.preprocessing import OrdinalEncoder\nordinal_enc_dict = {}\nfor col_name in cat_cols:\n  ordinal_enc_dict[col_name] = OrdinalEncoder()\n  col = df3[col_name]\n  col_not_null = col[col.notnull()]\n  reshaped_vals = col_not_null.values.reshape(-1, 1)\n  encoded_vals = ordinal_enc_dict[col_name].fit_transform(reshaped_vals)\n  df3.loc[col.notnull(), col_name] = np.squeeze(encoded_vals)","45e1c4d2":"from sklearn.impute import KNNImputer\nKNN_imputer = KNNImputer(n_neighbors=20)\ndf3_KNN = df3[['vehicleType', 'model', 'brand','price']].copy(deep=True)\ndf3_KNN.iloc[:, :] = np.round(KNN_imputer.fit_transform(df3_KNN))","cff903a1":"for col in cat_cols:\n    reshaped_col = df3_KNN[col].values.reshape(-1, 1)\n    df3_KNN[col] = ordinal_enc_dict[col].inverse_transform(reshaped_col)","3d3e35ea":"df_final = df3.copy(deep=True)","7ffe5270":"df_final.loc[:,cat_cols] = df3_KNN[cat_cols]","8fe91507":"df_final.reset_index(drop=True)","634bbc5b":"get_missing_val_count_df(df_final)","7f8fecf0":"df_final.head()","6dfebb3c":"# pip install feature-engine","8a54fde4":"X = df_final.drop(columns=['price'])\ny = df_final.price","cdf3bb1a":"X['kilometer'] = X['kilometer'].astype('O')\n#X['postalCode'] = X['postalCode'].astype('O')","4fc39044":"X['kilometer'].nunique()","671f4246":"cat_cols = ['kilometer','notRepairedDamage','vehicleType','fuelType','gearbox','model', 'brand','state','CountryOfManufacture']\nnum_cols = ['powerPS' ,'ageOfVehicle','No_of_days_online']","6c310261":"cat_cols_high_crdnlty = []\ncat_cols_low_crdnlty = []\n\nfor i in cat_cols:\n    if X[i].nunique()>5:\n        cat_cols_high_crdnlty.append(i)\n    else:\n        cat_cols_low_crdnlty.append(i)\nprint(cat_cols_high_crdnlty)\nprint(cat_cols_low_crdnlty)","fbe931e7":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X , y , test_size = 0.25 , random_state = 123)","5f7022ef":"# def OHE(df):\n#     df_OHE = pd.concat([df[num_cols], pd.get_dummies(df[cat_cols], drop_first=True)],axis=1)\n#     return df_OHE","319aa16d":"# X_train_OHE = OHE(X_train)\n# X_test_OHE = OHE(X_test)\n# #X_test_OHE.head()","03c9642c":"# def categorical_to_counts(df_train, df_test):\n#     #df copy\n#     df_train_temp = df_train.copy()\n#     df_test_temp = df_test.copy()\n#     for col in cat_cols_high_crdnlty:\n#         counts_map = df_train_temp[col].value_counts().to_dict()\n#         df_train_temp[col] = df_train_temp[col].map(counts_map)\n#         df_test_temp[col] = df_test_temp[col].map(counts_map)\n#     df_train_temp = pd.concat([df_train_temp, pd.get_dummies(df_train_temp[cat_cols_low_crdnlty], drop_first=True)],axis=1)\n#     df_test_temp = pd.concat([df_test_temp, pd.get_dummies(df_test_temp[cat_cols_low_crdnlty], drop_first=True)],axis=1)\n#     df_train_temp.drop(cat_cols_low_crdnlty,axis = 1, inplace = True)\n#     df_test_temp.drop(cat_cols_low_crdnlty,axis = 1, inplace = True)\n# #     df_train_temp[cat_cols_low_crdnlty] = pd.get_dummies(df_train_temp[cat_cols_low_crdnlty], drop_first=True)\n# #     df_test_temp[cat_cols_low_crdnlty] = pd.get_dummies(df_test_temp[cat_cols_low_crdnlty], drop_first=True)\n#     return df_train_temp, df_test_temp\n\n# X_train_count, X_test_count = categorical_to_counts(X_train, X_test)\n# X_test_count.head()","e8a84977":"# from feature_engine.categorical_encoders import CountFrequencyCategoricalEncoder\n\n# def counts(df_train, df_test):\n#     count_enc = CountFrequencyCategoricalEncoder(encoding_method='count',variables=cat_cols)\n#     count_enc.fit(df_train)\n#     return count_enc.transform(df_train) , count_enc.transform(df_test)","3439be39":"# X_train_count, X_test_count = counts(X_train, X_test)\n# #X_test_count.head()","eb626118":"# def categorical_to_freq(df_train, df_test):\n#     #df copy\n#     df_train_temp = df_train.copy()\n#     df_test_temp = df_test.copy()\n#     for col in cat_cols_high_crdnlty:\n#         freq_map = (df_train_temp.groupby([col]).size()\/len(df_train_temp)).to_dict()\n#         df_train_temp[col] = df_train_temp[col].map(freq_map)\n#         df_test_temp[col] = df_test_temp[col].map(freq_map)\n#     df_train_temp = pd.concat([df_train_temp, pd.get_dummies(df_train_temp[cat_cols_low_crdnlty], drop_first=True)],axis=1)\n#     df_test_temp = pd.concat([df_test_temp, pd.get_dummies(df_test_temp[cat_cols_low_crdnlty], drop_first=True)],axis=1)\n#     df_train_temp.drop(cat_cols_low_crdnlty,axis = 1, inplace = True)\n#     df_test_temp.drop(cat_cols_low_crdnlty,axis = 1, inplace = True)\n#     return df_train_temp, df_test_temp\n\n# X_train_freq, X_test_freq = categorical_to_freq(X_train, X_test)\n# X_test_freq.head()","ff31f92b":"# def frequency(df_train, df_test):\n#     freq_enc = CountFrequencyCategoricalEncoder(encoding_method='frequency',variables=cat_cols)\n#     freq_enc.fit(df_train)\n#     return freq_enc.transform(df_train) , freq_enc.transform(df_test)","d2bcf0ff":"# X_train_freq, X_test_freq = frequency(X_train, X_test)\n# #X_test_freq.head()","2186402c":"# def cat_to_mean(df_train, df_test, y_train, y_test):\n#     df_train_temp = pd.concat([df_train, y_train], axis=1).copy()\n#     df_test_temp = df_test\n\n#     for col in cat_cols_high_crdnlty:\n#         ordered_labels = df_train_temp.groupby([col])['price'].mean().to_dict()\n#         # Mapping\n#         df_train_temp[col] = df_train[col].map(ordered_labels)\n#         df_test_temp[col] = df_test[col].map(ordered_labels)\n\n#     # remove the target\n#     df_train_temp.drop(['price'], axis=1, inplace=True)\n#     df_train_temp = pd.concat([df_train_temp, pd.get_dummies(df_train_temp[cat_cols_low_crdnlty], drop_first=True)],axis=1)\n#     df_test_temp = pd.concat([df_test_temp, pd.get_dummies(df_test_temp[cat_cols_low_crdnlty], drop_first=True)],axis=1)\n#     df_train_temp.drop(cat_cols_low_crdnlty,axis = 1, inplace = True)\n#     df_test_temp.drop(cat_cols_low_crdnlty,axis = 1, inplace = True)\n#     return df_train_temp, df_test_temp\n\n\n# X_train_mean, X_test_mean = cat_to_mean(\n#     X_train, X_test, y_train, y_test)\n\n# X_test_mean.head()","24ba8393":"# from feature_engine.categorical_encoders import MeanCategoricalEncoder\n\n# def mean_enc(df_train,df_target,df_test):\n#     mean_enc = MeanCategoricalEncoder(variables=cat_cols)\n#     mean_enc.fit(df_train,df_target)\n#     return mean_enc.transform(df_train) , mean_enc.transform(df_test)","d4131055":"# X_train_mean, X_test_mean = frequency(X_train, X_test)\n# #X_test_mean.head()","c7631758":"from sklearn.model_selection import KFold\n\n#train1,test1=train_test_split(df_final,test_size=0.2,stratify = df_final.model,random_state=321)\ntrain1,test1=train_test_split(df_final,test_size=0.2,random_state=321)\n\ndef k_fold_target(train,test,columns,target,folds=5):\n    train2 = train\n    for column in columns:\n        for i,j in KFold(n_splits=folds).split(train):\n            mean=train.loc[train.index[i]].groupby(column)[target].mean()\n            train.loc[train.index[j],column+'_Enc']=train.loc[train.index[j],column].map(mean)\n        test[column+'_Enc']=test[column].map(train.groupby(column)[target].mean())\n        train2[column+'_Enc']=train2[column].map(train.groupby(column)[target].mean())\n        train = train.drop(column,axis=1)\n        train2  = train2.drop(column,axis=1) \n        test  = test.drop(column,axis=1) \n    return train2,test","271221ac":"# cat_cols.append('postalCode')\ntrain_kte , test_kte = k_fold_target(train1,test1,cat_cols_high_crdnlty,'price')\n# train_kte.drop('postalCode',axis = 1,inplace = True)\n# test_kte.drop('postalCode',axis = 1,inplace = True)\ntrain_kte = pd.concat([train_kte, pd.get_dummies(train_kte[cat_cols_low_crdnlty], drop_first=True)],axis=1)\ntest_kte = pd.concat([test_kte, pd.get_dummies(test_kte[cat_cols_low_crdnlty], drop_first=True)],axis=1)\ntrain_kte.drop(cat_cols_low_crdnlty,axis = 1, inplace = True)\ntest_kte.drop(cat_cols_low_crdnlty,axis = 1, inplace = True)\ntrain_kte.head()\ntest_kte.head()","0f30f5d9":"y_train = np.log1p(y_train)","137143ad":"train_kte.dropna(inplace=True)","0d46996f":"from sklearn.linear_model import LinearRegression , LassoCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.model_selection import KFold , cross_val_score , cross_validate\nfrom sklearn.metrics import make_scorer\nfrom sklearn.preprocessing import StandardScaler","6b9b64e8":"# res = []\n# def eval(Enc,X,y):\n#     for i in (LinearRegression() , LassoCV() , RandomForestRegressor(max_depth=4,n_jobs=-1) , KNeighborsRegressor()):\n#         scoring = {'r2':'r2' , \n#                    'Neg_RMSE' : 'neg_root_mean_squared_error'}\n#         kfold = KFold(n_splits=5, random_state=3)\n#         n = len(list(kfold.split(X))[0][1])\n#         p = len(X.columns)\n#         if isinstance(i,KNeighborsRegressor):\n#             ss = StandardScaler()\n#             X_scaled = ss.fit_transform(X)\n#             results = cross_validate(i, X_scaled, y, cv=kfold, scoring=scoring)\n#         else:\n#             results = cross_validate(i, X, y, cv=kfold, scoring=scoring)\n#         res1 = results['test_r2']\n#         res1 = list(map(lambda x : 1 - (1-x) * (n-1)\/(n-p-1),res1))\n#         #res.append((Enc,str(i).split('(')[0],'r2',np.mean(results['test_r2']),np.std(results['test_r2'])))\n#         res.append((Enc,str(i).split('(')[0],'Adj_r2',np.mean(res1),np.std(res1)))\n#         res.append((Enc,str(i).split('(')[0],'Neg_RMSE',np.mean(results['test_Neg_RMSE']),np.std(results['test_Neg_RMSE'])))","77ffefc5":"# from tqdm import tqdm_notebook as tqdm\n# for i,j,k in tqdm((('OHE',X_train_OHE,y_train),('Count Encoding',X_train_count,y_train),('Frequency Encoding',X_train_freq,y_train),\n#              ('Mean Encoding',X_train_mean,y_train),('K Fold Target Encoding',train_kte.drop(columns='price'),np.log1p(train_kte['price'])))):\n#     eval(i,j,k)\n\n# score = pd.DataFrame(res,columns=['Encoding','Algorithm','Scoring','Bias','Var'])\n# score.to_csv('scores_encoding.csv',index=False)\n\n# s1 = score\n# s1['Bias'] = s1['Bias'].round(4)\n# s1['Var']  = s1['Var'].round(4)\n# s1['Scores'] = s1['Bias'].astype('str') +' (+\/-'+ s1['Var'].astype('str')+')'\n# s1.drop(columns=['Bias','Var'],inplace=True)\n# s1.set_index(['Algorithm','Encoding','Scoring']).unstack('Algorithm')","5b90a34c":"import statsmodels.api as sm\n\nX = train_kte.drop(columns='price')\ny = np.log1p(train_kte['price'])\n\nX_constant = sm.add_constant(X)\nlr = sm.OLS(y,X_constant).fit()\nlr.summary()","fa43133e":"from statsmodels.stats.stattools import durbin_watson\nprint('Durbin Watson value : ',durbin_watson(lr.resid))","0819c032":"import statsmodels.tsa.api as smt\n\nfig , ax = plt.subplots(figsize=(25, 10))\nax.set_ylim([-0.007,0.007])\nacf = smt.graphics.plot_acf(lr.resid,lags=150, alpha=0.05 , ax = ax)\nplt.title('ACF Plot')\nacf.show()","5245626a":"from scipy import stats\njb_val , pval = stats.jarque_bera(lr.resid)\nprint('P value for Jarque Bera test is ',pval)\nprint('Test statistic value for Jarque Bera test is',jb_val)","f616abca":"#test critical\nstats.chi2.isf(0.05, df=2)","5aab612a":"fig = sm.qqplot(lr.resid,fit=True,line='45')","124872a1":"fstat , pval = sm.stats.diagnostic.linear_rainbow(res=lr, frac=0.5)\nprint('Pvalue for Linear rainbow test is ',np.round(pval,3))","536fc59b":"sns.set_style('darkgrid')\nfig, ax = plt.subplots(1,2,figsize = (30,10))\n\npredicted = lr.predict()[:5000]\nresid = lr.resid[:5000]\n\nsns.regplot(x=predicted, y=y[:5000], lowess=True, ax=ax[0], line_kws={'color': 'red'})\nax[0].set_title('Observed vs. Predicted Values', fontsize=16)\nax[0].set(xlabel='Predicted', ylabel='Observed')\n\nsns.regplot(x=predicted, y=resid, lowess=True, ax=ax[1], line_kws={'color': 'red'})\nax[1].set_title('Residuals vs. Predicted Values', fontsize=16)\nax[1].set(xlabel='Predicted', ylabel='Residuals')","3facb877":"import statsmodels.stats.api as sms\nfval , pval , ordering = sms.het_goldfeldquandt(lr.resid, lr.model.exog)\nfval , pval , ordering","62f29826":"print('P value for Goldfeld quandt is ',np.round(pval,4))","626b904b":"fitted_vals = lr.predict()[:5000]\nresids = lr.resid[:5000]\nresids_standardized = lr.get_influence().resid_studentized_internal[:5000]\nfig, ax = plt.subplots(1,2,figsize = (30,10))\n\nsns.regplot(x=fitted_vals, y=resids, lowess=True, ax=ax[0], line_kws={'color': 'red'})\nax[0].set_title('Residuals vs Fitted', fontsize=16)\nax[0].set(xlabel='Fitted Values', ylabel='Residuals')\nsns.regplot(x=fitted_vals, y=np.sqrt(np.abs(resids_standardized)), lowess=True, ax=ax[1], line_kws={'color': 'red'})\nax[1].set_title('Scale-Location', fontsize=16)\nax[1].set(xlabel='Fitted Values', ylabel='sqrt(abs(Residuals))')","2f4d8ed9":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\nvif = [variance_inflation_factor(X_constant.values, i) for i in range(X_constant.shape[1])]\npd.DataFrame({'vif': vif[1:]}, index=X.columns).T","c9967537":"X1 = X\nX1['price'] = y\nplt.figure(figsize = (20,15))\nsns.heatmap(X1.corr() , annot = True , cmap = 'viridis')\n","e127a210":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;powerPS&#47;1.png' >","a160419c":"Using model, brand and price to impute missing values of vehicle type.","ae656ef9":"As we can see quite evidently that the average price of a used car varies significantly for different brands of vehicles.","9d2f0a64":"### Month Of Registration","73b92ecb":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;AveragepowerPsvsfuelType&#47;1.png'>","d13e7736":"Post hoc analysis","c10de796":"**Inference:** The trend line in the above scatter plot indicates a strong negative correlation between price and age of vehicle. Exceptions include Porsche, Land Rover, Mercedes Benz and BMW that belong to luxury cars, wherein even though the age of vehicle is greater than 40 years, price would be higher.","b16788dc":"### Age of Vehicle","33237dbb":"As we can see quite evidently that the average price of a used car varies significantly for different models of vehicles.","0fde6fac":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;PricevsageOfVehicle&#47;1.png'>","72461a05":"We can see from the manwhitneyu test that the price of used car is affected by the fact that whether its an automatic or manual gearbox car as the pvalue is less than 0.05","646af252":"### Statistical Analysis\nIs there any discrepancy in avg price with respect to brand.\n\nH0 : avg_price_Nordrhein-Westfalen = avg_price_bayern = ..... = avg_price_bremen\n\nH1 : avg_price_Nordrhein-Westfalen != avg_price_bayern != ..... != avg_price_bremen","37e1f275":"## Finalizing features depending on EDA","6845133c":"### Statistical Analysis\nIs there any discrepancy in avg price with respect to the type of gearbox.\n\nH0 : avg_price_manual = avg_price_automatic\n\nH1 : avg_price_manual != avg_price_automatic","44420c74":"#### Price v\/s Not Repaired Damage","2ebdd618":"#### Count of fueltype in terms of gearbox","ba5c63fc":"We can see from the manwhitneyu test that the price of used car is not affected by the feature abtest as the pvalue is greater than 0.05. So we will prefer dropping this column.","c4c79258":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;Price&#47;1.png'>","22ced5c5":"**Inference:** The above trend line shows a positive correlation between price and powerPS. Basic vehicle type like small cars and bus have less powerPS as compared to sport cars that has powerPS more than 300. Such high powerPS cars belongs to brands like Mercedes Benz, Porsche, BMW, Audi etc., that are well known for manufacturing sports cars.","f04d6124":"The prices for cars with both test and control are not normally distributed as pvalue is less than 0.05.","a63d1d9b":"Homoscedacity : If the variance of the residuals are symmetrically distributed across the regression line , then the data is said to homoscedastic.\n\nHo : Residuals are homoscedastic.\n\nHa : Residuals are not homoscedastic.","360f8614":"### Statistical Analysis\nIs there any discrepancy in avg price with respect to vehicleType.\n\nH0 : avg_price_limousine = avg_price_small_car = avg_price_microbus = ..... = avg_price_other\n\nH1 : avg_price_limousine != avg_price_small_car != avg_price_microbus != ..... != avg_price_other","3a3f3143":"Imputation of the values for gearBox does not really make sense because we will not be able to determine what type of gearBox the car belongs to by using other features in the dataset. So we will drop the NA values.","b5e216a0":"#### Assumption 5- NO  MULTI COLLINEARITY","897a3b04":"**Inference:** Box plot between price and fuel type stated that the electric and hybrid fuel type cars belong to higher price ranges. But when compared in terms of gearbox, diesel cars are as expensive as electric and hybrid for automatic gearbox; while for manual gearbox, electric cars are of lesser price as compared to diesel and hybrid cars. Hence, gearbox plays a major role for selecting cars in terms of fuel type.","1ab6bb19":"### Statistical Analysis\nIs there any discrepancy in avg price with respect to Kilometers.\n\nH0 : avg_price_5000_km = avg_price_10000_km = avg_price_20000_km = avg_price_30000_km = ..... = avg_price_150000_km\n\nH1 : avg_price_5000_km != avg_price_10000_km != avg_price_20000_km != avg_price_30000_km != ..... != avg_price_150000_km","4bec9f96":"Since Durbin Watson is in the acceptance range (1.5 - 2.5) we can conclude that there is no Auto correlation ","b6c37f35":"##### ACF Plot : ","439b3b7b":"## Kilometers\nNumber of kilometers car has driven","aa302eef":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;CountofvehicleTypeintermsofgearbox&#47;1.png'>","100e2dd0":"### OfferType","aa4a7e8f":"The variance in price for repaired car is not equal to that in a not repaired car as pvallue is less that 0.05. So for a non parametric independent 2 sample t-test we will go with manwhitneyu test.","7981ef63":"#### Average powerPS v\/s Brand","cd409738":"Shapiro Test - Test for Normality","b8b081a7":"#### Choosing best encoding methods","6c0923d5":"#### Average powerPS v\/s Fuel type","13d9de56":"We will be combining this column with yearOfRegistration to convert it to the age of vehicle","cddd1447":"##### Visual check for linearity","43b381bb":"If we see from the above plot, almost all data point above 200 seems to come under outliers, but dropping all of those does not seem to be a feasible solution. We can also see that data points after 800 have consistently very low anamoly score, so we can go ahead and drop those data points, and the remaining outliers can be handled further using transformation techniques. Also data points with powerps below 40 also seem to be very low as far as powerps of a used car is concerned, so we will also drop those data points which have powerps below 40.","82ea9a80":"# Exploring the dataset","b5bf4f61":"**Inference:** Cars that do not have unrepaired damages have higher prices compared to the ones that have not repaired damages. Customers generally prefer cars in good condition over the ones that would bring about additional maintenance cost.","ac15844b":"###### Jarque Bera test","d5b95741":"From QQ plot and Jarque Bera test we can conclude that residuals are not normal","2c451513":"#### Base OLS Model","b5a37173":"We can see from the oneway test that the price of used car is affected by state as the pvalue is less than 0.05","c1c1641c":"### Gearbox","f66dc4d3":"### Power PS","7159446d":"Imputation of the values for model does not really make sense because we will not be able to determine what type of model the car belongs to by using other features in the dataset. So we will drop the NA values.","8008b7fc":"The data in this features seems extremely imbalanced. So we will consider dropping this feature.","bb3e1533":"**Inference:** Porsche, land rover and jaguar top the brand list being the most expensive used cars.","86bcafe9":"ACF plot confirms that there is no auto correlation","48a33840":"As we can see quite evidently that the average price of a used car which has been repaired is higher that that which has not been repaired.","333cc2a8":"Imputation of the values for state does not really make sense because we will not be able to determine which state car belongs to by using other features in the dataset. So we will drop the NA values.","0905d16a":"#### Price vs Fueltype","9d228c86":"# Converting all German values to English","95623aab":"Bartlett Test - Test for equal variance","4cf114f0":"We can see from the oneway test that the price of used car is affected by model of the car as the pvalue is less than 0.05","d0d7cdee":"<img src ='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;CountofnotRepairedDamage&#47;1.png'>","fc6c76cd":"### Brand","515ca2ec":"In this case the computed value of the JB statistic 279727.82 is greater than 5.99. Thus we reject the null hypothesis that the error terms are normally distributed.","55f7f70c":"#### OHE - FREQUENCY ENCODING","cc493db7":"## Price","9e92a8b0":"#### Count of Fuel type","3c45c4e4":"#### Price v\/s PowerPS","87cff7c5":"### Checking for Missing Values","71720c33":"No missing values for price feature.","447eba2f":"### Model","0a9068f8":"Bartlett Test - Test for equal variance","f4ba73d2":"Ho - Errors are normally distributed\n\nHa - Errors are not normally distributed","04c86da1":"### Seller","ed978da1":"### Statistical Analysis\nCheck for Normality - Shapiro Test\n\nH0 : Price is normally distributed","947a498a":"**Inference:** As Germany is more likely to ban diesel and petrol cars in the country by 2030, LPG and electric cars seems to be an efficient alternative in terms of powerPS performance, also LPG cars are the cheapest cars, this could be one of the main reason as customers are selling diesel and petrol cars, hence available in huge amount in dealer\u2019s inventory.","70d86d6a":"We can see from the manwhitneyu test that the price of used car is affected by the fact that whether its repaired or not as the pvalue is less than 0.05","da3e1d39":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;ageOfVehicle&#47;1.png'>","b39a50fb":"### Outlier detection using Isolation Forest","21263816":"### Bivariate Analysis","1b31db52":"## Imputation of vehicle type","fbd50909":"### Number of days online","25f4cebe":"#### Price v\/s Age of Vehicle","a9d1ee27":"The variance in price for car with automatic gearbox is not equal to the car with manual gearbox as pvalue is less that 0.05. So for a non parametric independent 2 sample t-test we will go with manwhitneyu test.","f4b49bb4":"Algorithm\t\n\n    Scoring  KNeighborsRegressor\tLassoCV\tLinearRegression\tRandomForestRegressor\n\n\nCount Encoding\t\n\n    Adj_r2\t0.8304 (+\/-0.0032)\t0.439 (+\/-0.0031)\t0.7007 (+\/-0.0046)\t0.7231 (+\/-0.0053)\n\n    Neg_RMSE\t-0.4638 (+\/-0.0036)\t-0.8435 (+\/-0.0009)\t-0.6161 (+\/-0.0038)\t-0.5925 (+\/-0.0053)\n                \n                \nFrequency Encoding\t\n\n    Adj_r2\t0.8304 (+\/-0.0032)\t0.624 (+\/-0.0058)\t0.7007 (+\/-0.0046)\t0.7222 (+\/-0.0055)\n\n    Neg_RMSE\t-0.4638 (+\/-0.0036)\t-0.6905 (+\/-0.0045)\t-0.6161 (+\/-0.0038)\t-0.5935 (+\/-0.0056)\n                    \n                    \nK Fold Target Encoding\t\n\n    Adj_r2\t0.8481 (+\/-0.0013)\t0.6175 (+\/-0.0033)\t0.7295 (+\/-0.0024)\t0.731 (+\/-0.0018)\n\n    Neg_RMSE\t-0.4385 (+\/-0.0021)\t-0.6958 (+\/-0.0025)\t-0.5852 (+\/-0.0028)\t-0.5836 (+\/-0.0029)\n                        \n                        \nMean Encoding\t\n\n    Adj_r2\t0.8483 (+\/-0.0016)\t0.6186 (+\/-0.0039)\t0.7305 (+\/-0.0046)\t0.7327 (+\/-0.0037)\n\n    Neg_RMSE\t-0.4386 (+\/-0.0015)\t-0.6954 (+\/-0.0027)\t-0.5846 (+\/-0.0039)\t-0.5822 (+\/-0.004)\n                \n                \nOHE\t\n\n    Adj_r2\t0.7399 (+\/-0.0031)\t0.6566 (+\/-0.0052)\t0.7706 (+\/-0.0042)\t0.7109 (+\/-0.007)\n\n    Neg_RMSE\t-0.5717 (+\/-0.0024)\t-0.6569 (+\/-0.0042)\t-0.5369 (+\/-0.0038)\t-0.6027 (+\/-0.0067)","5fa047cf":"#### Assumption 2- Normality of Residuals","c0b5b9e2":"### State","8f84942c":"#### Average powerPS v\/s gearbox","b1d62397":"##### Durbin Watson Test : ","ccca3761":"Shapiro Test - Test for Normality","a092841e":"The prices for both repaired and not repaired cars is not normally distributed as pvalue is less than 0.05.","29afaa9c":"We can impute the values of vehicleType depending on model,brand and price of the car.","e6e73b38":"As we can see quite evidently that the average price of a used car varies significantly for different type of vehicles.","bda1f33b":"### FuelType","7f84c2c7":"#### Average price v\/s kilometer","67f98ae7":"#### Price, vehicleType and gearbox","ff4d2a34":"#### Asssumption 3 - Linearity of residuals","1f38fde5":"**Inference:** Cars with automatic gearbox are of higher prices as compared to cars with manual gearbox. Mean price of cars with automatic and manual gearbox are different, p-value of gearbox is 0 which indicates that it is a significant feature in price prediction.","aa4294b1":"We can see from the oneway test that the price of used car is affected by fuelType as the pvalue is less than 0.05","8827d808":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;No_of_days_online&#47;1.png'>\n","befc1426":"## EDA","24dfd621":"The data in this features seems extremely imbalanced. So we will consider dropping this feature.","baff861e":"### Statistical Analysis\nIs there any discrepancy in avg price with respect to notRepairedDamage.\n\nH0 : avg_price_notRepaired = avg_price_Repaired\n\nH1 : avg_price_notRepaired != avg_price_Repaired","6fa98744":"We can see from the oneway test that the price of used car is affected by brand as the pvalue is less than 0.05","e6b21fad":"<img src ='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;CountofvehicleTypevsnotRepairedDamage&#47;1.png' >","77211896":"Imputation of the values for notRepairedDamaged does not really make sense because we will not be able to determine whether the car was damaged or not by using other features in the dataset. So we will drop the NA values.","932e1ee4":"Manwhitneyu Test\n\nH0 : Average price of repaired car is equal to average price of not repaired car.","5038ccc9":"The variance in price for car with control abtest is not equal to the car with test abtest as pvalue is less that 0.05. So for a non parametric independent 2 sample t-test we will go with manwhitneyu test.","385e9359":"The P value is greater than our significance level(0.05). So  it is homoscedastic distribution.","39cc87a4":"### Univariate Analysis","3fabcbb5":"As we can see quite evidently that the average price of a used car starts decreasing as the number of kilometers it has run increases.","203396ff":"#### Assumption 4 - Homoscedasticity_test","b06a1418":"### Statistical Analysis\nIs there any discrepancy in avg price with respect to abtest.\n\nH0 : avg_price_test = avg_price_control\n\nH1 : avg_price_test != avg_price_control","2c6055c4":"### VehicleType","29415b4c":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;AveragepowerPSvsbrand&#47;1.png'>","31931b82":"### Statistical Analysis\nIs there any discrepancy in avg price with respect to country of manufacture.\n\nH0 : avg_price_Germamy = avg_price_France = ..... = avg_price_Russia\n\nH1 : avg_price_Germany != avg_price_France != ..... != avg_price_Russia","ffb2ca67":"Bartlett Test - Test for equal variance","96352431":"#### Count of vehicleType in terms of notRepairedDamage","db30ac4b":"##### Linear Rainbow test","b7cbc76c":"### ABTEST","49f50c5f":"### Country of manufacture","cbdd1005":"We can see from the oneway test that the price of used car is affected by vehcleType as the pvalue is less than 0.05","29f2ac3c":"#### Power PS","7d050b3a":"#### Average Price of brand","a34f7dc2":"### Statistical Analysis\nIs there any discrepancy in avg price with respect to fuelType.\n\nH0 : avg_price_petrol_car = avg_price_diesel_car = avg_price_lpg_car = ..... = avg_price_other_fuelType\n\nH1 : avg_price_petrol_car != avg_price_diesel_car != avg_price_lpg_car != ..... != avg_price_other_fuelType","f61d406a":"#### Price, fuelType and gearbox","dbd889c2":"**Inference:** As we have seen in earlier plot between average price and brand; Porsche, Land Rover, Jaguar, Jeep, BMW are one of those brands whose average price is higher as compared to other brands. The bar plot between average price and powerPS also states same brands justifying the positive correlation between price and powerPS.","56bd1bc9":"Manwhitneyu Test\n\nH0 : Average price of car with automatic gearbox is equal to average price of car with manual gearbox.","c2e3eb57":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;Averagepricevskilometer&#47;1.png'>","f8c60b52":"We will be combining this column with monthOfRegistration to convert it to the age of vehicle","57ec0ff5":"### Multivariate Analysis","92ae96a0":"#### Number of days online","67a9bb10":"##### QQ Plot","9d64a7de":"There is no multicollinearity","4bcbec2a":"Imputation of the values for fuelType does not really make sense because we will not be able to determine what type of fuelType the car belongs to by using other features in the dataset. So we will drop the NA values.","ac95ba9a":"As we can see quite evidently that the average price of a used car which has an automatic gearbox is higher than that which has a manual gearbox.","c3b1a4bb":"The prices for cars with both manual and automatic gearbox are not normally distributed as pvalue is less than 0.05.","a9f80e79":"**Inference:** Cars with different fuel type have different prices, from the plot we can see that cars of electric and hybrid fuel type are expensive as compared to other fuel types, Diesel and petrol fuel type cars belong to moderate range of price. CNG and LPG cars are the least expensive. The horizontal grey line shows the mean price of each fuel type cars, also p-value of fuel type is 0 when One-way ANOVA test was performed, hence fuel type of car becomes significant to predict price.","f0849aa8":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;CountoffuelTypeintermsofgearbox&#47;1.png'>","3b541e15":"Post hoc analysis","08648817":"**Inference :**\n\n| **Statistical Information** | **Price** | **powerPS** |\n| --- | --- | --- |\n| 25% (lower quartile) | 100 | 41 |\n| 50% (Median \u2013 middle quartile) | 4000 | 4000 |\n| 75% (upper quartile) | 19,800 | 19800 |\n|Mean|\t6846.65|\t6846.65|","fb126a55":"Shapiro Test - Test for Normality","9407f559":"As we can see quite evidently that the average price of a used car varies significantly for different fueltypes of vehicles.","cfe52876":"#### K-Fold Target Encoding","0f86ec24":"Seems like the website had certain options from which a user could select the number of kilometers the car has been driven instead of providing a place to put in an exact number. We could use this as a categorical variable instead of continous variable.","54ccca9b":"**Inference:** As we have seen earlier in the plot between price and vehicle type; SUV, convertible and coupe are of higher prices as compared to other vehicle types; when compared in terms of gearbox we get the same results in both automatic and manual gearboxes. Thus in general, SUV, convertible and coupe are of higher prices irrespective of gearbox.","07b8d452":"#### OHE - MEAN ENCODING","9fdc3ff4":"**Assumptions Failed:**\n\n        * Normality of Residuals","23dfb963":"#### OHE - COUNT ENCODING","5f391add":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;Averagepriceofbrands&#47;1.png'> ","4e937485":"If we see from the above plot, almost all data point above 12000 seems to come under outliers, but dropping all of those does not seem to be a feasible solution. We can also see that data points after 100000 have consistently very low anamoly score, so we can go ahead and drop those data points, and the remaining outliers can be handled further using transformation techniques. Also data points with price below 100 also seem to be very low as far as price of a used car is concerned, so we will also drop those data points which have price below 100.","04f75c2e":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;PricevsnotRepairedDamage&#47;1.png'>","be6f2651":"#### Price vs Gearbox","8f985dcc":"Here since the P value is greater than 0.05 (significance level) we failed to reject the null hypothesis. Hence we can that conclude our data is linear","944bb656":"**Inference:** SUV, coupe and convertible vehicle types comes under higher price ranges. The mean price difference between convertible and coupe; limousine and microbus is less hence for price prediction one may consider only one vehicle type among them, though here we have considered each vehicle type distinctly.","e6ed0529":"From the above scatter plot the residuals are symmetrically distributed in the former one and around horizontal line in the latter one. In both cases linearity is observed","3206fd33":"<img src ='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;CountofvehicleType&#47;1.png'>\n","2715a777":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;PricevspowerPS&#47;1.png'>","2700c3aa":"#### Price","2345730a":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;Pricevsgearbox&#47;1.png'>","9aeb1433":"We can see from the oneway test that the price of used car is affected by kilometers as the pvalue is less than 0.05","0d3c8043":"**Inference:** Cars with low power generally have manual gearbox, whereas, mid-range cars will have an equal number of manual and automatic gearboxes. Nowadays, in many high range cars, manufacturers prefer automatic gearboxes because only then they can achieve their said 0-100 speeds. Additionally, launch control and gear response time will be better in cars with automatic gearboxes.","26198b6c":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;PricevsfuelType&#47;1.png'>","578d817a":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;AveragepowerPSvsgearbox&#47;1.png'>","1e19e59e":"#### Price v\/s Vehicle type","66d50a9d":"**Inference :**\n\n| **Statistical Information** | **ageOfVehicle** | **No\\_of\\_days\\_online** |\n| --- | --- | --- |\n| 25% (lower quartile) | 1.08 | 0 |\n| 50% (Median \u2013 middle quartile) | 15.75 | 7 |\n| 75% (upper quartile) | 33 | 31 |\n| Mean | 16.10 | 9.24 |\n\nPrice, powerPS, ageOfVehicle and No_of_days_online have outliers for which transformation technique will be applied to reduce the effect of outliers.","ccbd9d45":"**Inference:** Here, we have considered kilometer as a categorical feature against average price. As the kilometers driven increases, average price decreases, this could probably mean that customers are keen on buying used cars that are less driven and are relatively in good condition. Also, we can see the average price for 5000 km is less as compared to 10000 km, there could be three possible reasons:\n\n1. The data does not comprise much information about used cars that are driven 5000 kilometers.\n2. The cars might have some not be repaired damages; that would result in lower prices.\n3. Fuel type and vehicle type could rank higher when it comes to used car price determination.","029e4af5":"As we can see quite evidently that the average price of a used car varies significantly in different states.","b98fe13a":"Manwhitneyu Test\n\nH0 : Average price of car with automatic gearbox is equal to average price of car with manual gearbox.","2ace838c":"#### Count of Vehicle type","aafed8c6":"#### PURE ONE HOT ENCODING","a5bc3094":"As we can see the pvalue is less than 0.05. So we can reject the null hypothesis that price is normally distributed.\nWe will use log transformation for converting price to normal distribution after we are done with any imputation in our dataset.","eb4d3267":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;PricevsfuelTypevsgearbox&#47;1.png'>","8929b14f":"We can see from the oneway test that the price of used car is affected by country of manufacture as the pvalue is less than 0.05","4febb99f":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;PricevsvehicleTypevsgearbox&#47;1.png'>","647bfd6c":"## Assumptions For linear Regression","be3e2a49":"#### Count of notRepairedDamage","cd972b6e":"### Year Of Registration","b6e7577a":"#### Count of vehicleType in terms of gearbox","c88f0d5e":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;PricevsvehicleType&#47;1.png'>","af7f550c":"### Statistical Analysis\nIs there any discrepancy in avg price with respect to brand.\n\nH0 : avg_price_volkswagen = avg_price_bmw = avg_price_mercedes_benz = ..... = avg_price_trabant\n\nH1 : avg_price_volkswagen != avg_price_bmw != avg_price_mercedes_benz != ..... != avg_price_trabant","340a2626":"## Encoding","a5e964eb":"### NotRepairedDamaged \nIf the car has a damage which is not repaired yet","fc8e4328":"### Statistical Analysis\nIs there any discrepancy in avg price with respect to model.\n\nH0 : avg_price_golf = avg_price_3s = avg_price_polo = ..... = avg_price_discovery_sport\n\nH1 : avg_price_golf != avg_price_3s != avg_price_polo != ..... != avg_price_discovery_sport","f37069f4":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;CountofvehicleTypeintermsoffuelType&#47;1.png'>","1a0deef3":"Ho - Fit of the model using full sample is the same as using a central subset.\n\nHa - Fit of the model using full sample is the different as using a central subset.","969717e9":"<img src = 'https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Gr&#47;Group1EDA&#47;CountoffuelType&#47;1.png'>","c47081c0":"#### Count of vehicleType in terms of fuelType","ad38e10b":"#### Age of vehicle","b38b3e01":"#### Asssumption 1 No Auto correlation."}}