{"cell_type":{"b778bf72":"code","3a836d82":"code","90a91c06":"code","0ce6d73c":"code","88ae497a":"code","d888b214":"code","280564bf":"code","50064f35":"code","59894de8":"code","bfb8fec3":"code","1cf69152":"code","c6f75b15":"code","07cd4d82":"code","e6e1331d":"code","7b898603":"code","ebe59996":"markdown","d158ebcc":"markdown","a14504f6":"markdown","69d02c78":"markdown","540a5b8c":"markdown","0583c29f":"markdown","fe2eac65":"markdown","6c94ecf2":"markdown","3e251710":"markdown"},"source":{"b778bf72":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\nfrom matplotlib import animation, rc\nfrom IPython.display import HTML, Image\nrc('animation', html='html5')\n\n!pip install bar_chart_race\nimport bar_chart_race as bcr\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a836d82":"df1 = pd.read_csv('..\/input\/hackathon\/task_2-owid_covid_data-21_June_2020.csv')\ndf1.head()","90a91c06":"df = df1.groupby([\"date\"])[\"total_cases\"].sum().reset_index().sort_values(\"total_cases\",ascending=False).reset_index(drop=True)\ndf","0ce6d73c":"# Converting Date format\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'].dtype\n# Year wise data\n# mean price \ndf_year = df.groupby(df.date.dt.year)['total_cases'].agg('mean').reset_index()\ndf_year.head()","88ae497a":"# First set up the figure, the axis, and the plot element we want to animate\nfig, ax = plt.subplots(figsize=(8,6))\nax.set_xlim((2019, 2020))\nax.set_ylim(np.min(df_year.total_cases), np.max(df_year.total_cases)+1)\nax.set_xlabel('Year',fontsize = 14)\nax.set_ylabel('total_cases',fontsize = 14)\nax.set_title('Total Cases over the Years',fontsize = 18)\nax.xaxis.grid()\nax.yaxis.grid()\nax.set_facecolor('#000000') \nline, = ax.plot([], [], lw=4,color='green')\n\n# initialization function: plot the background of each frame\ndef init():\n    line.set_data([], [])\n    return (line,)\n\n\n# animation function. This is called sequentially\ndef animate(i):\n    d = df_year.iloc[:int(i+1)] #select data range\n    x = d.date\n    y = d.total_cases\n    line.set_data(x, y)\n    return (line,)\n\nanim = animation.FuncAnimation(fig, animate, init_func=init,\n                               frames=40, repeat=True)","d888b214":"anim","280564bf":"# Week wise data 2020 Jan to April\nmask = (df['date'] > '2019-12-31') & (df['date'] <= '2020-06-21')\ndata_2020 = df[mask]\n# mean price \ndata_2020_weekly = data_2020.set_index('date').resample('W').mean().reset_index()\ndata_2020_weekly.head()","50064f35":"import datetime\nfig, ax = plt.subplots(figsize=(8,6))\n\nax.set_xlim([datetime.date(2020, 1, 2), datetime.date(2020, 3, 31)])\nax.set_ylim(np.min(data_2020_weekly.total_cases), np.max(data_2020_weekly.total_cases)+1)\nax.set_xlabel('date',fontsize = 14)\nax.set_ylabel('total_cases',fontsize = 14)\nax.set_title('Total Cases Per Week 2020 Jan - Jun',fontsize = 18)\nax.xaxis.grid()\nax.yaxis.grid()\nax.set_facecolor('#000000') \nline, = ax.plot([], [], lw=4,color='green')\n\n# initialization function: plot the background of each frame\ndef init():\n    line.set_data([], [])\n    return (line,)\n\n\n# animation function. This is called sequentially\ndef animate(i):\n    d = data_2020_weekly.iloc[:int(i+1)] #select data range\n    x = d.date\n    y = d.total_cases\n    line.set_data(x, y)\n    return (line,)\n\nanim = animation.FuncAnimation(fig, animate, init_func=init,\n                               frames=14, repeat=True)","59894de8":"anim","bfb8fec3":"# Lets take only few countries\ncols = ['date','total_cases','cvd_death_rate']\ndata_deaths = df1[cols]\ndata_deaths.set_index(\"date\", inplace = True) \ndata_deaths.head()","1cf69152":"#bcr.bar_chart_race(df=data_deaths, filename=None, figsize = (3.5,3),title='COVID-19 Deaths')","c6f75b15":"from IPython.display import Image\nsns.set(style=\"darkgrid\", palette=\"pastel\", color_codes=True)\nsns.set_context(\"paper\")\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"seaborn\"\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot,plot\ninit_notebook_mode(connected=True)","07cd4d82":"# Create figure with secondary y-axis\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n# Add traces\nfig.add_trace(\n    go.Scatter(x=df1.date, y=df1.cvd_death_rate, name=\"cvd_death_rate\"),\n    secondary_y=False,\n)\n\nfig.add_trace(\n    go.Scatter(x=df1.date, y=df1.cvd_death_rate, name=\"Covid19 Death Rate\",line = dict(color = 'orangered')),\n    secondary_y=True,\n)\n\n# Add figure title\nfig.update_layout(\n#     title_text=\"Total cases vs Price\"\n    title='<b>Total cases by Covid19<\/b>',\n    plot_bgcolor='linen',\n#     paper_bgcolor = 'grey',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label='1m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=2,\n                     label='2m',\n                     step='month',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = True\n        ),\n        type='date'\n    )\n)\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"<b>date<\/b>\")\n\n# Set y-axes titles\nfig.update_yaxes(title_text=\"<b>total_cases<\/b>\", secondary_y=False)\nfig.update_yaxes(title_text=\"<b>cvd_death_rate<\/b>\", secondary_y=True)\n\niplot(fig)","e6e1331d":"# Impact till of Jun 21, 2020.\ncols = ['total_cases','date','cvd_death_rate','gdp_per_capita','extreme_poverty',\n        'life_expectancy','diabetes_prevalence']\n\ncordata = pd.DataFrame(df1[cols].corr(method ='pearson'))\n\nfig = go.Figure(data=go.Heatmap(z=cordata,x=cols,y=cols,colorscale='burgyl'))\n\niplot(fig)","7b898603":"cordata","ebe59996":"Das War's Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","d158ebcc":"It's very subtile. Though it's animated. The Pandemic isn't subtile like that.","a14504f6":"#Total cases by Covid19","69d02c78":"Since it comprises only two years (imagine having a Pandemic for decades). The animation didn't show much.","540a5b8c":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQ_pKOREn-CPoNA90tC8KNA4ritZzLcTSGa3w&usqp=CAU)youtube.com","0583c29f":"#All codes by Aravind Rajaelangovan and Shebin.  https:\/\/www.kaggle.com\/imarvind\/story-telling-animated-eda-beginner-s-model\/data?select=COVID-19_and_Price_dataset.csv","fe2eac65":"#Total cases by year.","6c94ecf2":"#A little different Correlation Plot.","3e251710":"#Total Cases Per Week."}}