{"cell_type":{"b2681a02":"code","b0184ca6":"code","ffee0cf1":"code","5ae5fd22":"code","a64efed8":"code","024d75c7":"code","99150c2c":"code","cbb4997b":"code","bca0209c":"code","f1d3c9f4":"code","a7b03f4e":"code","83c5e58d":"code","6aa32f0e":"code","d6f640c1":"code","f49c4358":"code","e00b4747":"code","ffff7ca6":"code","bcebf72f":"code","16c4ff71":"code","a6b3c64e":"code","cc71feb2":"code","3391f6d7":"code","130e4cf6":"markdown","856eb86a":"markdown","736864f9":"markdown","008f4645":"markdown","855e2f39":"markdown","074fb5aa":"markdown","28fe3b4e":"markdown","198b283a":"markdown","7fb0e819":"markdown","befcf628":"markdown","02285c81":"markdown","0e637d10":"markdown","63eedd3b":"markdown","e08f25cb":"markdown","b715e7f8":"markdown"},"source":{"b2681a02":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom datetime import datetime\nimport math\n\nimport os\nfrom pathlib import Path\nprint(os.listdir(\"..\/input\"))\n","b0184ca6":"df_train = pd.read_csv('..\/input\/train.zip', compression='zip')\ndf_test = pd.read_csv('..\/input\/test.zip', compression='zip')","ffee0cf1":"df_train.head()","5ae5fd22":"# check data usage\nprint('Memory usage, Mb: {:.2f}\\n'.format(df_train.memory_usage().sum()\/2**20))\n\n# overall df info\nprint('---------------- DataFrame Info -----------------')\nprint(df_train.info())","a64efed8":"print(df_train.isnull().sum())","024d75c7":"print('----------------distance Outliers-------------------')\nprint('Latitude : {} to {}'.format(\n    max(df_train.pickup_latitude.min(), df_train.dropoff_latitude.min()),\n    max(df_train.pickup_latitude.max(), df_train.dropoff_latitude.max())\n))\nprint('Longitude : {} to {}'.format(\n    max(df_train.pickup_longitude.min(), df_train.dropoff_longitude.min()),\n    max(df_train.pickup_longitude.max(), df_train.dropoff_longitude.max())\n))\nprint('')\nprint('------------------Time Outliers---------------------')\nprint('Trip duration in seconds: {} to {}'.format(\n    df_train.trip_duration.min(), df_train.trip_duration.max()))\n\nprint('')\nprint('------------------Date Outliers---------------------')\nprint('Datetime range: {} to {}'.format(df_train.pickup_datetime.min(), \n                                        df_train.dropoff_datetime.max()))\nprint('')\nprint('----------------Passengers Outliers------------------')\nprint('Passengers: {} to {}'.format(df_train.passenger_count.min(), \n                                        df_train.passenger_count.max()))","99150c2c":"print('duplicates IDs: {}'.format(len(df_train) - len(df_train.drop_duplicates(subset='id'))))","cbb4997b":"def haversine(lat1, lon1, lat2, lon2):\n    R = 6371800  # Earth radius in meters  \n    phi1, phi2 = math.radians(lat1), math.radians(lat2) \n    dphi       = math.radians(lat2 - lat1)\n    dlambda    = math.radians(lon2 - lon1)\n    \n    a = math.sin(dphi\/2)**2 + \\\n        math.cos(phi1)*math.cos(phi2)*math.sin(dlambda\/2)**2\n    \n    return 2*R*math.atan2(math.sqrt(a), math.sqrt(1 - a))","bca0209c":"df_train['distance'] = df_train.apply(lambda row: \n                                      haversine(row['pickup_latitude'], \n                                                row['pickup_longitude'], \n                                                row['dropoff_latitude'], \n                                                row['dropoff_longitude']), axis=1)\ndf_test['distance']  = df_test.apply(lambda row: \n                                     haversine(row['pickup_latitude'], \n                                               row['pickup_longitude'], \n                                               row['dropoff_latitude'], \n                                               row['dropoff_longitude']), axis=1)","f1d3c9f4":"df_train.head()","a7b03f4e":"sns.set(rc={'figure.figsize':(15,10)})\nsns.distplot(df_train['distance'],hist=False)","83c5e58d":"plt.figure(figsize=(8,5))\nsns.distplot(df_train['trip_duration']).set_title(\"Distribution of Trip Duration\")\nplt.xlabel(\"Trip Duration\")","6aa32f0e":"df_train['trip_duration'] = np.log(df_train['trip_duration'].values)","d6f640c1":"plt.figure(figsize=(8,5))\nsns.distplot(df_train['trip_duration']).set_title(\"Distribution of Trip Duration\")\nplt.xlabel(\"Trip Duration\")","f49c4358":"df_train['pickup_datetime'] = pd.to_datetime(df_train['pickup_datetime'], format='%Y-%m-%d %H:%M:%S')\ndf_test['pickup_datetime'] = pd.to_datetime(df_test['pickup_datetime'], format='%Y-%m-%d %H:%M:%S')","e00b4747":"df_train['hour'] = df_train.loc[:,'pickup_datetime'].dt.hour;\ndf_train['week'] = df_train.loc[:,'pickup_datetime'].dt.week;\ndf_train['weekday'] = df_train.loc[:,'pickup_datetime'].dt.weekday;\ndf_train['hour'] = df_train.loc[:,'pickup_datetime'].dt.hour;\ndf_train['month'] = df_train.loc[:,'pickup_datetime'].dt.month;\n\ndf_test['hour'] = df_test.loc[:,'pickup_datetime'].dt.hour;\ndf_test['week'] = df_test.loc[:,'pickup_datetime'].dt.week;\ndf_test['weekday'] = df_test.loc[:,'pickup_datetime'].dt.weekday;\ndf_test['hour'] = df_test.loc[:,'pickup_datetime'].dt.hour;\ndf_test['month'] = df_test.loc[:,'pickup_datetime'].dt.month;","ffff7ca6":"cat_vars = ['store_and_fwd_flag']\nfor col in cat_vars:\n    df_train[col] = df_train[col].astype('category').cat.codes\ndf_train.head()\n\nfor col in cat_vars:\n    df_test[col] = df_test[col].astype('category').cat.codes\ndf_test.head()","bcebf72f":"y_train = df_train[\"trip_duration\"]\nX_train = df_train[[\"vendor_id\", \"store_and_fwd_flag\",\"passenger_count\",\n                    \"pickup_longitude\", \"pickup_latitude\", \"distance\", \n                    \"dropoff_longitude\",\"dropoff_latitude\", \n                    \"hour\", \"week\", \"weekday\", \"month\" ]]","16c4ff71":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import Ridge\nm = Ridge()\n\ncross_val_score(m, X_train, y_train, cv=5)","a6b3c64e":"%%time\nfrom sklearn.linear_model import Ridge\nm = Ridge()\nm.fit(X_train, y_train)\n\nX_test = df_test[[\"vendor_id\", \"store_and_fwd_flag\",\"passenger_count\",\"pickup_longitude\", \"pickup_latitude\", \"distance\",\"dropoff_longitude\",\"dropoff_latitude\", \"hour\", \"week\", \"weekday\", \"month\"]]\nprediction = m.predict(X_test)\nprediction","cc71feb2":"from lightgbm import LGBMRegressor\nm = LGBMRegressor(n_estimators=500)\nm.fit(X_train, y_train)\n\nX_test = df_test[[\"vendor_id\", \"store_and_fwd_flag\",\"passenger_count\",\"pickup_longitude\", \"pickup_latitude\", \"distance\",\"dropoff_longitude\",\"dropoff_latitude\", \"hour\", \"week\", \"weekday\", \"month\"]]\nprediction = m.predict(X_test)\nprediction","3391f6d7":"submit = pd.read_csv('..\/input\/sample_submission.zip', compression='zip')\nsubmit.head()\nsubmit['trip_duration'] = np.exp(prediction)\nsubmit.to_csv('submission.csv', index=False)","130e4cf6":"#### 2.3 Check duplicates values","856eb86a":"# \u5bfc\u5165\u5e38\u89c1\u7684\u5e93\n","736864f9":"# 3 \u6570\u636e\u5904\u7406","008f4645":"## \u5b57\u6bb5\u63cf\u8ff0\n\n- id -\u6bcf\u6b21\u65c5\u884c\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n- vendor_id\u2014\u6307\u793a\u4e0e\u65c5\u884c\u8bb0\u5f55\u76f8\u5173\u8054\u7684\u63d0\u4f9b\u8005\u7684\u4ee3\u7801\n- pickup_datetime\uff1a\u4e0a\u8f66\u65e5\u671f\u548c\u65f6\u95f4\n- dropff_datetime\uff1a\u4e0b\u8f66\u65e5\u671f\u548c\u65f6\u95f4\n- passenger_count\uff1a\u8f66\u8f86\u4e0a\u7684\u4e58\u5ba2\u6570\u91cf(\u53f8\u673a\u8f93\u5165\u7684\u503c)\n- pickup_longitude\uff1a\u4e0a\u8f66\u7684\u7ecf\u5ea6\n- pickup_latitude\uff1a\u4e0a\u8f66\u7eac\u5ea6\n- dropoff_longitude\uff1a\u4e0b\u8f66\u7ecf\u5ea6\n- dropoff_latitude\uff1a\u4e0b\u8f66\u7eac\u5ea6\n- store_and_fwd_flag\u2014\u2014\u8fd9\u4e2a\u6807\u5fd7\u8868\u793a\u7531\u4e8e\u8f66\u8f86\u6ca1\u6709\u8fde\u63a5\u5230\u670d\u52a1\u5668\uff0c\u5728\u53d1\u9001\u7ed9\u4f9b\u5e94\u5546\u4e4b\u524d\u65c5\u884c\u8bb0\u5f55\u662f\u5426\u4fdd\u5b58\u5728\u8f66\u8f86\u5185\u5b58\u4e2d\u2014\u2014Y=store and forward;N=\u4e0d\u662f\u5b58\u50a8\u548c\u524d\u8fdb\u7684\u65c5\u884c\n- trip_duration\u2014\u2014\u65c5\u884c\u7684\u6301\u7eed\u65f6\u95f4\uff0c\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff0c\u76ee\u6807\u53d8\u91cf","855e2f39":"\u4f7f\u7528haversine\u8ddd\u79bb\u6765\u8ba1\u7b97\u7ecf\u7eac\u5ea6\u8ddd\u79bb","074fb5aa":"# 5 \u6784\u5efa\u673a\u5668\u5b66\u4e60\u6a21\u578b","28fe3b4e":"# 4 \u7279\u5f81\u5de5\u7a0b","198b283a":"\u5bf9\u65e5\u671f\u8fdb\u884c\u63d0\u53d6","7fb0e819":"#### 2.1 Check for N\/A values","befcf628":"# 1 \u6570\u636e\u8bfb\u53d6","02285c81":"# 2 \u6570\u636e\u53ef\u89c6\u5316","0e637d10":"## 7 \u8bfe\u540e\u4f5c\u4e1a\n\n1. \u9605\u8bfbsklearn\u6587\u6863\uff0c\u5c1d\u8bd5\u5176\u5b83\u6a21\u578b\u8fdb\u884c\u63d0\u4ea4\uff1b\n2. \u7406\u89e3\u6570\u636e\u6784\u5efa\u65b0\u7279\u5f81\uff0c\u52a0\u5165\u6a21\u578b\u8bad\u7ec3\uff1b\n    - https:\/\/www.kaggle.com\/jeffreycbw\/nyc-taxi-trip-public-0-37399-private-0-37206\n    - https:\/\/www.kaggle.com\/mnds18\/nyc-taxi-eda-mrig\n3. \u5bf9\u6bd4prediction\u53d6log\u548c\u6ca1\u6709\u53d6log\u5bf9\u7cbe\u5ea6\u7684\u5dee\u522b\uff1b\n4. \u8fbe\u52300.370\u4ee5\u4e0a\u7684\u5206\u6570\uff08\u5c0f\u4e8e0.370\uff09\uff1b","63eedd3b":"\u5982\u679c\u6807\u7b7e\u662f\u6570\u503c\u7c7b\u578b\u7684\uff1a\u8f6c\u6362\u4e3a\u6b63\u6001\u5206\u5e03\uff0c\u4f1a\u6709\u7cbe\u5ea6\u589e\u76ca","e08f25cb":"# 6 \u5bf9\u7ed3\u679c\u8fdb\u884c\u9884\u6d4b","b715e7f8":"#### 2.2 Check for Outliers"}}