{"cell_type":{"b17e5d2b":"code","c4d632cd":"code","39171caa":"code","515b2a62":"code","50586cd9":"code","8925c988":"code","4e54561a":"code","9f27dd65":"code","d990967b":"code","a3b8ef3e":"code","37f711cc":"code","8840f589":"code","36ef7061":"code","c95b0cf6":"code","e3a17393":"code","de454d6f":"code","99a6be24":"code","83114b64":"code","bc733009":"code","782c647e":"code","c562a204":"code","b2502099":"code","4d63b84d":"code","f43d1673":"code","16dab7ff":"code","2de54206":"code","d052b2a3":"code","b3714be2":"markdown","f4ea4d0f":"markdown","eaddbbf4":"markdown","d76ac73f":"markdown","1124309c":"markdown","4d2aa9ea":"markdown","aac8aaf9":"markdown","49a51bd7":"markdown","1543bc21":"markdown","a80e2e22":"markdown","69b4fa9c":"markdown","81d0bfd4":"markdown","14bb35c5":"markdown","fcedd31b":"markdown","8b065e02":"markdown","2bfc536a":"markdown","3e00972d":"markdown","06f7e0b3":"markdown","72c5bd8d":"markdown","487acf22":"markdown","bf2e0305":"markdown","a9f0bf76":"markdown"},"source":{"b17e5d2b":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nimport os\nprint(os.listdir('..\/input\/military-expenditure-of-countries-19602019'))","c4d632cd":"data = pd.read_csv('..\/input\/military-expenditure-of-countries-19602019\/Military Expenditure.csv')\ndata.head()","39171caa":"import missingno as msno\ndata2 = msno.nullity_sort(data, sort='descending')\nmsno.matrix(data2, color=(0.294, 0.325, 0.125)) #color : Army ","515b2a62":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Table(cells=dict(values=data['Name'].values.reshape(12, 22)))])\nfig.update_layout(title=f'Countries Name List ({data.shape[0]})')\nfig.show()","50586cd9":"print(f\"There are {len(data['Indicator Name'].unique())} types of indicator in this dataset.\")","8925c988":"data.drop(['Indicator Name'], axis=1, inplace=True)\ndata.head()","4e54561a":"third_data = px.data.gapminder()\nthird_data.head()","9f27dd65":"code_continent = third_data[['iso_alpha', 'continent']].drop_duplicates()\ncode_continent.rename(columns={'iso_alpha':'Code'}, inplace=True)\ncode_continent.head()","d990967b":"clean_data = pd.merge(data, code_continent , how='left')\nclean_data.head()","a3b8ef3e":"clean_data['continent'] = clean_data['continent'].fillna('unknown')\nclean_data = clean_data.fillna(0)","37f711cc":"fig = px.histogram(clean_data, x=\"Type\", y=\"Type\", color=\"Type\")\nfig.show()","8840f589":"fig = px.histogram(clean_data, x=\"continent\", y=\"continent\", color=\"continent\")\nfig.update_layout(title='Continent Distribution')\nfig.show()","36ef7061":"data_time = clean_data.melt(id_vars=['Name', 'Code', 'Type', 'continent'])\ndata_time.rename(columns={'variable' : 'year'}, inplace=True)\ndata_time","c95b0cf6":"msno.matrix(data_time, color=(0.294, 0.325, 0.125))","e3a17393":"# type 1 : default graph\n# location : country code \n# hover_name : hover information, single column or columns list\nimport plotly.express as px\n\nfig = px.scatter_geo(clean_data, \n                     locations=\"Code\",\n                     hover_name=\"Name\",\n                    )\nfig.update_layout(title=\"Simple Map\")\nfig.show()","de454d6f":"# type 2 : projection type change\n\nfig = px.scatter_geo(\n    clean_data, \n    locations = 'Code',\n    hover_name=\"Name\",\n    projection=\"orthographic\",\n)\n\nfig.update_layout(title='Orthographic Earth')\n\nfig.show()\n","99a6be24":"# type 2-2 : projection type change\n\nfig = px.scatter_geo(\n    clean_data, \n    locations = 'Code',\n    hover_name=\"Name\",\n    projection=\"natural earth\",\n)\n\nfig.update_layout(title='Natural Earth')\n\nfig.show()\n","83114b64":"# type 3 : change scatter marker size\n# size : marker size\n\nfig = px.scatter_geo(\n    clean_data, \n    locations = 'Code',\n    hover_name=\"Name\",\n    size = '2018',\n)\n\nfig.show()","bc733009":"fig, ax = plt.subplots(1, 2,figsize=(20, 7))\nsns.distplot(clean_data['2018'], color='orange', ax=ax[0])\nsns.boxplot(y=clean_data['2018'], color='orange', ax=ax[1])\nax[1].set_title(\"50% of 2018 non-zero data is under {}\".format(clean_data[clean_data['2018'] > 0]['2018'].quantile(0.5)))\nplt.show()","782c647e":"# type 3-2 : remove outliers\n\nfig = px.scatter_geo(\n    clean_data[clean_data['2018'] < 0.3 * 1e12 ], \n    locations = 'Code',\n    hover_name=\"Name\",\n    size = '2018',\n    projection=\"natural earth\",\n)\n\nfig.show()","c562a204":"# type 4 : color\n\nfig = px.scatter_geo(\n    clean_data, \n    locations = 'Code',\n    hover_name=\"Name\",\n    color = 'continent'\n)\n\nfig.show()","b2502099":"# type 4-2 : color with size\n\nfig = px.scatter_geo(\n    clean_data[clean_data['2018'] < 0.2 * 1e12 ], \n    locations = 'Code',\n    hover_name=\"Name\",\n    size='2018',\n    color = 'continent'\n)\n\nfig.show()","4d63b84d":"# type 5 : animation with year\nfig = px.scatter_geo(data_time, locations=\"Code\", color=\"continent\",\n                     hover_name=\"Name\", size=\"value\",\n                     animation_frame=\"year\",\n                     projection=\"natural earth\")\n\nfig.update_layout(title='Animation but USA...')\nfig.show()\n","f43d1673":"# type 5-2 : animation with default data\n# this is population dataset\ngapminder = px.data.gapminder()\nfig = px.scatter_geo(gapminder, locations=\"iso_alpha\", color=\"continent\",\n                     hover_name=\"country\", size=\"pop\",\n                     animation_frame=\"year\", \n                     projection=\"natural earth\")\nfig.show()\n","16dab7ff":"# type 1 : default choropleth\nfig = px.choropleth(clean_data, locations=\"Code\", color=\"2018\",\n                     hover_name=\"Name\", \n                    range_color=[0,10000000000],\n                     projection=\"natural earth\")\n\nfig.update_layout(title='Choropleth Graph')\nfig.show()\n","2de54206":"# type 2 : choropleth with animation\n\nfig = px.choropleth(data_time, locations=\"Code\", color=\"value\",\n                     hover_name=\"Name\", \n                    range_color=[0,1000000000],\n                    animation_frame='year')\n\nfig.update_layout(title='Choropleth Graph Animation')\nfig.show()\n","d052b2a3":"# type 1 : default\nfig = px.line_geo(clean_data[clean_data['continent'] !='unknown'], \n                  locations=\"Code\", \n                  color=\"continent\")\nfig.show()","b3714be2":"## Choropleth : px.choropleth\n\n> A **choropleth map** is a thematic map in which areas are shaded or patterned in proportion to the measurement of the statistical variable being displayed on the map, such as population density or per-capita income. [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Choropleth_map)\n\nAlmost same as `px.scatter_geo`\n\nYou can use `range_color` to limit scale. \n\n","f4ea4d0f":"## EDA & Preprocessing","eaddbbf4":"## Pre-Conclusion\n\n- USA is powerful...","d76ac73f":"Similar as `scatter_geo`, you can make animation with `year` data (or another time-series feature)","1124309c":"I can see that more continents are filled than I expected.\n\nAnd I will change the year data structure to use this data as **time series data**.\n\nUse `melt` method. [link](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/reshaping.html#reshaping-by-melt)","4d2aa9ea":"To merge 2 pandas dataset, preprocessing first.\nI use `drop_duplicates`(remove duplicates raws) + `merge`","aac8aaf9":"- [misingno | Advanced Configuration](https:\/\/github.com\/ResidentMario\/missingno\/blob\/1ef039cda6f77232f78ced4f1cfff15c53e300e8\/CONFIGURATION.md)\n\nYou can change missingno matrix color by using `color` parameter.","49a51bd7":"## TO BE CONTINUE ...\nThe kernel is still in progress.","1543bc21":"The indicators don't seem to mean much to me. If you look at it, you can see that there is only one content. Let's drop this.","a80e2e22":"Cool! Let's start visualization with `clean_data` and `data_time`!","69b4fa9c":"I think we can use KNN(K-Nearest Neigbors) to fill continent (except russia)","81d0bfd4":"I'm going to delete too large values to see more data.\n\nLet's look at the distribution before that.","14bb35c5":"Draw `Type` countplot with `px.histogram`. \n\n> if you don't know how to draw countplot with plotly, \nPlease refer to this article [link]()","fcedd31b":"The country is overwhelmingly large, the rest very few. If you visualize, the rest will be buried.\n\nHow about continent?","8b065e02":"## Network & Line : px.line_geo \n\nLike Airplane route, it needs line graph on map.\n\nYou can use `px.line_geo`","2bfc536a":"You can also color to whatever category you want.","3e00972d":"## Map with Scatter & Bubble : px.scatter_geo\n\n- [px.scatter_geo]()","06f7e0b3":"Let's check null data again.","72c5bd8d":"I want to add `continent` column.\n\nUse `px` default dataset : `px.data.gapminder()`","487acf22":"## Road to Visualization Expert\n\n### Part 3 : Geo with Plotly\n\nThis time it's a visualization of military costs.\n\nIn this kernel, we are going to use map visualization and new visualization tools.\n\n![Military](https:\/\/thumbor.forbes.com\/thumbor\/960x0\/https%3A%2F%2Fblogs-images.forbes.com%2Fniallmccarthy%2Ffiles%2F2017%2F04%2F20170424_Military_Expenditure.jpg)\n\nI would like to record my practice to become an expert in data visualization.\n\n- [Road to Viz Expert (1) - Unusual tools](https:\/\/www.kaggle.com\/subinium\/road-to-viz-expert-1-unusual-tools)\n- [Road to Viz Expert (2) - Plotly & Seaborn](https:\/\/www.kaggle.com\/subinium\/road-to-viz-expert-2-plotly-seaborn)\n\n**plotly express is amazing.**\n\n**Table of Contents**\n\n- EDA & Preprocessing\n    - missingno : color change\n    - go.Table\n    - Pandas Tricks (melt, rename, etc)\n- Map with Scatter&Bubble : px.scatter_geo\n    - default\n    - projection\n    - color\n    - size\n    - animation\n- Choropleth : px.choropleth\n    - default\n    - range_color\n    - animation\n- Network&Line Graph on Map : px.line_geo\n    - default","bf2e0305":"You can make country list by using `go.Table` + `reshape method`.","a9f0bf76":"The result I wanted was the following ...\n\nThere's a certain outlier in this dataset."}}