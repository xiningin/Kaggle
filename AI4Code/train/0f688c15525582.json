{"cell_type":{"694a92ee":"code","48d6c15c":"code","87c1cb15":"code","2b23d796":"code","17725f6b":"code","ac8d7f5a":"code","4d9ddfe4":"code","bad10806":"code","98d9cdb1":"code","e4b77192":"code","a0a0f302":"code","d1398f7c":"code","f6586878":"code","ff9d32f9":"code","d5fd00df":"code","52c7564d":"code","1ea7fec3":"code","96d16d62":"code","6d0fa1c4":"code","073090a9":"code","a2a57660":"code","c9af4688":"code","7eb8efac":"code","86b97c26":"code","754810e1":"code","546218bc":"code","e6be67bd":"code","45b26811":"code","7860bae3":"markdown","2947ef99":"markdown","0e976b43":"markdown","680ef750":"markdown","fb5e4af3":"markdown","6a851860":"markdown","7725552f":"markdown","d10c9f93":"markdown","8e4b7461":"markdown","d78f629e":"markdown","ec34e0f1":"markdown","d01f3d9f":"markdown","59c62575":"markdown"},"source":{"694a92ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48d6c15c":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","87c1cb15":"train=pd.read_csv('..\/input\/song-popularity-prediction\/train.csv')\ntrain=train.set_index('id')\ntrain.head()","2b23d796":"train.isnull().sum()","17725f6b":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","ac8d7f5a":"sns.set_style('darkgrid')\nsns.countplot(x='song_popularity',data=train)","4d9ddfe4":"sns.set_style('darkgrid')\nsns.countplot(x='song_popularity',hue='audio_mode',data=train,palette='RdBu_r')","bad10806":"sns.set_style('whitegrid')\nsns.countplot(x='song_popularity',hue='time_signature',data=train,palette='RdBu_r')","98d9cdb1":"train.columns","e4b77192":"mean=train['song_duration_ms'].mean()\ntrain['song_duration_ms']=train['song_duration_ms'].fillna(mean)","a0a0f302":"mean=train['acousticness'].mean()\ntrain['acousticness']=train['acousticness'].fillna(mean)","d1398f7c":"mean=train['danceability'].mean()\ntrain['danceability']=train['danceability'].fillna(mean)","f6586878":"mean=train['energy'].mean()\ntrain['energy']=train['energy'].fillna(mean)","ff9d32f9":"mean=train['instrumentalness'].mean()\ntrain['instrumentalness']=train['instrumentalness'].fillna(mean)","d5fd00df":"mean=train['key'].mean()\ntrain['key']=train['key'].fillna(mean)","52c7564d":"mean=train['liveness'].mean()\ntrain['liveness']=train['liveness'].fillna(mean)\nmean=train['loudness'].mean()\ntrain['loudness']=train['loudness'].fillna(mean)","1ea7fec3":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","96d16d62":"train.info()","6d0fa1c4":"train.drop('song_popularity',axis=1).head()","073090a9":"train['song_popularity'].head()","a2a57660":"from sklearn.model_selection import train_test_split","c9af4688":"X_train,X_test,y_train,y_test=train_test_split(train.drop('song_popularity',axis=1)\n                                                         ,train['song_popularity'],test_size=0.30,\n                                                         random_state=101)","7eb8efac":"X_train.shape,X_test.shape,y_train.shape,y_test.shape","86b97c26":"from sklearn.linear_model import LogisticRegression","754810e1":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","546218bc":"predictions=logmodel.predict(X_test)","e6be67bd":"from sklearn.metrics import roc_auc_score\n# auc scores\nauc_score1 = roc_auc_score(y_test, predictions)\n","45b26811":"print(auc_score1)","7860bae3":"### Observations:\nAround 37% songs are popular and 63% songs are not popular ","2947ef99":"## Training and Predicting","0e976b43":"## The Data\nLet's start by reading in the Song popularity prediction file into a pandas dataframe","680ef750":"## Missing Data\nwe can use seaborn to create simple heatmap to see where we are missing data!","fb5e4af3":"### Observations:\n* Irrespective of song_popularity most of the songs has 3 or 4 beats in each measure of a piece of music.\n* Very less number of songs has 1 or 4 or 5 number of beats.","6a851860":"# Exploratory Data Analysis\nLets begin some exploratory data analysis! We will start by checking out missing values.","7725552f":"### Observations:\nFeatures\/ columns which are highlighted in yellow color on diagram are missing values and count of them is below:\n* song_duration_ms    4101\n* acousticness        3992\n* danceability        4026\n* energy              3975\n* instrumentalness    3985\n* key                 4065\n* liveness            4086\n* loudness            3957\n##### Missing values are present in numerical columns and 10% of data on each column having missing needs to handled instead of dropping.\n","d10c9f93":"Observation: We have handled missing values with mean.","8e4b7461":"# Import Libraries","d78f629e":"### Observations:\n* Around 66% of popular songs are not in audio mode and only 34% are in audio mode.\n* Around 70% of unpopular songs are not in audio mode and only 30% are in audion mode.","ec34e0f1":"##### Observation: As all categorical features are handled numerically, no need to conversion required.","d01f3d9f":"### Filling Missing values with mean","59c62575":"# Description of Features:\n* **Song_duration_ms:** It defines the duration of song in milliseconds.\n* **Acousticness:** Describes the speechiness of a song.\n* **Danceability:** Describes how suitable a track is for dancing.\n* **Energy:** Represents a perceptual measure of intensity and activity.\n* **Instrumentalness:** Predicts whether a track contains no vocals.\n* **key:** Data on tracks to tell you both the BPM and Key signature of a track entered into the search bar.\n* **liveness:** Detects the presence of an audience in the recording.\n* **Loudness:** A way to measure audio levels based on the way humans perceive sound.\n* **Audio_mode:** Simply plays audio part of a video, so any intros, moments where there's just acting in the music video, outros etc. will still be included.\n* **speechiness:** Detects the presence of spoken words in a track.\n* **tempo:** is how fast or slow a piece of music is performed, while rhythm is the placement of sounds in time, in a regular and repeated pattern.\n* **time_signature:** How the music is to be counted. The time signature is written at the beginning of the staff after the clef and key signature.\n* **audio_valence:** Describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry)."}}