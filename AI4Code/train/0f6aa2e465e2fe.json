{"cell_type":{"fec6debb":"code","2bfda03e":"code","0dd48eb8":"code","9df9a84c":"code","044eef6c":"code","334d0143":"code","f7516775":"code","c35e4787":"code","a4414069":"code","90bac1c4":"code","357d8a06":"code","45e51687":"code","52476688":"code","cee4826c":"code","c301dd36":"code","139374d2":"code","401c1202":"code","96a5514b":"code","b493d02f":"code","7451bb25":"code","845f03d1":"code","7a5efc45":"code","5524ee81":"code","e0604264":"code","bd37e72a":"markdown","c0d56441":"markdown","807efa16":"markdown","348d31f2":"markdown","2dd004a2":"markdown"},"source":{"fec6debb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2bfda03e":"import cv2\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport os\nfrom PIL import Image\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import load_img\nfrom keras.utils import np_utils","0dd48eb8":"infected_data = os.listdir('..\/input\/cell_images\/cell_images\/Parasitized\/')\nprint(infected_data[:10]) #the output we get are the .png files\n\nuninfected_data = os.listdir('..\/input\/cell_images\/cell_images\/Uninfected\/')\nprint('\\n')\nprint(uninfected_data[:10])","9df9a84c":"plt.figure(figsize = (12,12))\nfor i in range(4):\n    plt.subplot(1, 4, i+1)\n    img = cv2.imread('..\/input\/cell_images\/cell_images\/Parasitized' + \"\/\" + infected_data[i])\n    plt.imshow(img)\n    plt.title('INFECTED : 1')\n    plt.tight_layout()\nplt.show()","044eef6c":"plt.figure(figsize = (12,12))\nfor i in range(4):\n    plt.subplot(1, 4, i+1)\n    img = cv2.imread('..\/input\/cell_images\/cell_images\/Uninfected' + \"\/\" + uninfected_data[i])\n    plt.imshow(img)\n    plt.title('UNINFECTED : 1')\n    plt.tight_layout()\nplt.show()","334d0143":"data = []\nlabels = []\nfor img in infected_data:\n    try:\n        img_read = plt.imread('..\/input\/cell_images\/cell_images\/Parasitized\/' + \"\/\" + img)\n        img_resize = cv2.resize(img_read, (50, 50))\n        img_array = img_to_array(img_resize)\n        img_aray=img_array\/255\n        data.append(img_array)\n        labels.append(1)\n    except:\n        None\n        \nfor img in uninfected_data:\n    try:\n        img_read = plt.imread('..\/input\/cell_images\/cell_images\/Uninfected' + \"\/\" + img)\n        img_resize = cv2.resize(img_read, (50, 50))\n        img_array = img_to_array(img_resize)\n        img_array= img_array\/255\n        data.append(img_array)\n        labels.append(0)\n    except:\n        None","f7516775":"plt.imshow(data[0])\nplt.show()","c35e4787":"image_data = np.array(data)\nlabels = np.array(labels)\nidx = np.arange(image_data.shape[0])\nnp.random.shuffle(idx)\nimage_data = image_data[idx]\nlabels = labels[idx]","a4414069":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(image_data, labels, test_size = 0.2, random_state = 42)","90bac1c4":"y_train = np_utils.to_categorical(y_train,  2)\ny_test = np_utils.to_categorical(y_test,  2)","357d8a06":"print(f'Shape of training image : {x_train.shape}')\nprint(f'Shape of testing image : {x_test.shape}')\nprint(f'Shape of training labels : {y_train.shape}')\nprint(f'Shape of testing labels : {y_test.shape}')","45e51687":"import keras\nfrom keras.layers import Dense, Conv2D\nfrom keras.layers import Flatten\nfrom keras.layers import MaxPooling2D, GlobalAveragePooling2D\nfrom keras.layers import Activation\nfrom keras.layers import BatchNormalization\nfrom keras.layers import Dropout\nfrom keras.models import Sequential\nfrom keras import backend as K\n\nfrom keras import optimizers","52476688":"inputShape= (50,50,3)\nmodel=Sequential()\nmodel.add(Conv2D(32, (3,3), activation = 'relu', input_shape = inputShape))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(BatchNormalization(axis =-1))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(32, (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(32, (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\n    \nmodel.add(Dense(512, activation = 'relu'))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation = 'softmax'))","cee4826c":"model.summary()","c301dd36":"#compile the model\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'Adam', metrics = ['accuracy'])","139374d2":"H = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=25)","401c1202":"print(H.history.keys())","96a5514b":"# summarize history for accuracy\nplt.plot(H.history['acc'])\nplt.plot(H.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train','test'], loc='upper left')\nplt.show()","b493d02f":"# summarize history for loss\nplt.plot(H.history['loss'])\nplt.plot(H.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train','test'], loc='upper right')\nplt.show()","7451bb25":"# make predictions on the test set\npreds = model.predict(x_test)","845f03d1":"from sklearn.metrics import accuracy_score\n\nprint(accuracy_score(y_test.argmax(axis=1), preds.argmax(axis=1)))","7a5efc45":"\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test.argmax(axis=1), preds.argmax(axis=1)))","5524ee81":"def plot_confusion_matrix(y_true, y_pred, classes,\n                          normalize=False,\n                          title=None,\n                          cmap=plt.cm.Blues):\n    from sklearn.metrics import confusion_matrix\n    from sklearn.utils.multiclass import unique_labels\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if not title:\n        if normalize:\n            title = 'Normalized confusion matrix'\n        else:\n            title = 'Confusion matrix, without normalization'\n\n    # Compute confusion matrix\n    cm = confusion_matrix(y_true, y_pred)\n    # Only use the labels that appear in the data\n    classes = classes[unique_labels(y_true, y_pred)]\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    fig, ax = plt.subplots()\n    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)\n    ax.figure.colorbar(im, ax=ax)\n    # We want to show all ticks...\n    ax.set(xticks=np.arange(cm.shape[1]),\n           yticks=np.arange(cm.shape[0]),\n           # ... and label them with the respective list entries\n           xticklabels=classes, yticklabels=classes,\n           title=title,\n           ylabel='True label',\n           xlabel='Predicted label')\n\n    # Rotate the tick labels and set their alignment.\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n             rotation_mode=\"anchor\")\n\n    # Loop over data dimensions and create text annotations.\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i in range(cm.shape[0]):\n        for j in range(cm.shape[1]):\n            ax.text(j, i, format(cm[i, j], fmt),\n                    ha=\"center\", va=\"center\",\n                    color=\"white\" if cm[i, j] > thresh else \"black\")\n    fig.tight_layout()\n    return ax","e0604264":"class_names=np.array((0,1))\nplot_confusion_matrix(y_test.argmax(axis=1), preds.argmax(axis=1), classes=class_names, title='Confusion Matrix')","bd37e72a":"## The Architecture of the CNN model","c0d56441":"2. Unifected Data","807efa16":"## Importing Neccessary Libraries","348d31f2":"1. Infected Data","2dd004a2":"## Visualization of Infected and Uninfected Cells"}}