{"cell_type":{"3d116c8a":"code","4e10d1a1":"code","46c6b576":"code","e0f325e9":"code","5505a6bb":"code","559c9feb":"code","2566a058":"code","b8b5aeb2":"code","77854513":"code","5f042edb":"code","d7ba4164":"code","fa1cd9e1":"code","0c0123c9":"code","397adaee":"code","3bc8cc3e":"code","bfbb07ff":"code","7b93bb15":"code","e8951bf3":"markdown","991f8a9d":"markdown","402e682c":"markdown","8fc40e7b":"markdown","5382d68a":"markdown","55705c7a":"markdown","4a00b25b":"markdown","e4c013be":"markdown","6499a436":"markdown","f446a234":"markdown","141378cc":"markdown","9f4f238a":"markdown"},"source":{"3d116c8a":"import pandas as pd\nimport numpy as np\nimport requests\n\nimport urllib.request\n\nfrom bs4 import BeautifulSoup\n\n# plotly\nimport plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\n\nimport plotly.express as px\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\n\n# matplotlib\nimport matplotlib.pyplot as plt","4e10d1a1":"# ulr of website\nURL = 'https:\/\/www.worldometers.info\/coronavirus\/'\n\n# get the page\npage = requests.get(url=URL)\n\n# soup\nsoup = BeautifulSoup(page.text)\n","46c6b576":"# choose today or yesterday's table, 1 = today, 0 = yesterday\ntoday = 0","e0f325e9":"if today == 1:\n    # today's table\n    full_table = soup.find('table', {'id':'main_table_countries_today'})\nelse:\n    # sometimes today's table are not updated yet and contain many blanks, then use yesterday's table\n    full_table = soup.find('table', {'id':'main_table_countries_yesterday'})\n","5505a6bb":"# generate the dataframe from HTML\n\ndef generate_dataframe_world(html_table):\n    \n    # generate columns for the df\n\n    A = [] # country\n    B = [] # confirmed\n    C = [] # new case\n    D = [] # death\n    E = [] # recover\n\n    for row in html_table.find_all('tr'):\n        cell = row.find_all('td')\n\n        if (len(cell) == 19):\n            A.append(cell[1].find(text = True))\n            B.append(cell[2].find(text = True))\n            C.append(cell[3].find(text = True))\n            D.append(cell[4].find(text = True))\n            E.append(cell[6].find(text = True))\n\n    # put togather in to df\n\n    df = pd.DataFrame()\n    df['Country'] = A\n    df['Confirmed'] = B\n    df['New_cases'] = C\n    df['Deaths'] = D\n    df['Recovered'] = E\n\n    # remove some unnecessary rows\n    df.set_index('Country', inplace=True)\n    df.drop(['\\n','World','Total:'], inplace=True)\n    df.reset_index(inplace=True)\n    df.fillna('0', inplace=True)\n\n    # remove symbols\n    df['Confirmed'] = df.Confirmed.str.replace(',','')\n    df['New_cases'] = df.New_cases.str.replace(',','')\n    df['New_cases'] = df.New_cases.str.replace('+','')\n    df['Deaths'] = df.Deaths.str.replace(',','')\n    df['Recovered'] = df.Recovered.str.replace(',','')\n    df['Recovered'] = df.Recovered.str.replace('N\/A','0')\n    df.replace(r'^\\s*$', 0, regex=True, inplace=True) # replace blank spaces in cells with 0\n\n    # set data type\n    df = df.astype({'Country':str, 'Confirmed':int, 'New_cases':int, 'Deaths':int, 'Recovered':int})\n    \n    return df","559c9feb":"df = generate_dataframe_world(full_table)\ndf","2566a058":"# pie chart\n\nfig = px.pie(df, values='Confirmed', names='Country', title='Percentage of Confirmed')\nfig.update_traces(textposition='inside', textinfo='label+percent')\nfig.update_layout(title_x=0.5)\n\nfig.show()","b8b5aeb2":"# top 20 countries for 'Confirmed'\ntop20 = df.copy()\ntop20 = top20.sort_values(by='Confirmed',ascending=True).tail(20).reset_index()\n\n# bar chart\ncolor_map = {'Confirmed':'dodgerblue', 'Deaths':'red', 'Recovered':'limegreen'}\nfig = px.bar(top20, x=['Confirmed','Recovered','Deaths'], y='Country', title='Confirmed, Recovered and Deaths',\n             labels={'value': 'Number of confirmed cases'},\n             barmode='overlay', \n             opacity=1,\n            color_discrete_map=color_map)\n\nfig.update_layout(yaxis={'categoryorder':'total ascending'})\nfig.update_layout(template='ggplot2')\nfig.show()","77854513":"# top 20 countries for 'New cases'\ntop20 = df.copy()\ntop20 = top20.sort_values(by='New_cases',ascending=True).tail(20).reset_index()\n\n# bar chart\nfig = px.bar(top20, x=['New_cases'], y='Country', title='Today\\'s New Cases',\n             labels={'value': 'Number of new cases'},\n             barmode='overlay', \n             opacity=1,\n            color='Country')\n\nfig.update_layout(yaxis={'categoryorder':'total ascending'})\nfig.update_layout(template='ggplot2')\nfig.show()","5f042edb":"# confirmed cases right now\n\nfig = px.choropleth(df, locations='Country',\n                    color='New_cases',\n                    locationmode='country names', \n                    hover_name='Country', \n                    color_continuous_scale=px.colors.sequential.YlOrRd )\nfig.update_layout(\n    title='New Cases In Each Country',title_x=0.5)\n\nfig.show()","d7ba4164":"# ulr of website\nURL = 'https:\/\/www.worldometers.info\/coronavirus\/country\/us\/'\n\n# get the page\npage = requests.get(url=URL)\n\n# soup\nsoup = BeautifulSoup(page.text)\n\n# find the table\nif today == 1:\n    # today's table\n    us_table = soup.find('table', {'id':'usa_table_countries_today'})\nelse:\n    # sometimes today's table are not updated yet and contain many blanks, then use yesterday's table\n    us_table = soup.find('table', {'id':'usa_table_countries_yesterday'})","fa1cd9e1":"# generate the dataframe from HTML\n\ndef generate_dataframe_us(html_table):\n    \n    # generate columns for the df\n\n    A = [] # state\n    B = [] # confirmed\n    C = [] # new case\n    D = [] # death\n\n\n    for row in html_table.find_all('tr'):\n        cell = row.find_all('td')\n\n        if (len(cell) == 11):\n            \n            # HTML format issue, source code contain '\\n' and state name is below it\n            if cell[0].find(text = True) == '\\n':\n                A.append(cell[0].find_next().find(text = True))\n            else:\n                A.append(cell[0].find(text = True))\n                \n            B.append(cell[1].find(text = True))\n            C.append(cell[2].find(text = True))\n            D.append(cell[3].find(text = True))\n            \n\n    # put togather in to df\n\n    df = pd.DataFrame()\n    df['State'] = A\n    df['Confirmed'] = B\n    df['New_cases'] = C\n    df['Deaths'] = D\n\n\n    # remove some unnecessary rows\n    col_drop = ['USA Total','Total:']\n    \n    df.set_index('State', inplace=True)\n    df.drop(col_drop, inplace=True)\n    df.reset_index(inplace=True)\n    df.fillna('0', inplace=True)\n\n    # remove symbols\n    df['Confirmed'] = df.Confirmed.str.replace(',','')\n    df['New_cases'] = df.New_cases.str.replace(',','')\n    df['New_cases'] = df.New_cases.str.replace('+','')\n    df['Deaths'] = df.Deaths.str.replace(',','')\n\n    df.replace(r'^\\s*$', 0, regex=True, inplace=True) # replace blank spaces in cells with 0\n\n    # set data type\n    df = df.astype({'State':str, 'Confirmed':int, 'New_cases':int, 'Deaths':int})\n    \n    return df.iloc[0:51,:] ","0c0123c9":"df = generate_dataframe_us(us_table)\ndf","397adaee":"# add new column for state abbr, abbr are used for map plot\n# add new column 'death rate'\n\nus_state_abbrev = {\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'American Samoa': 'AS',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Guam': 'GU',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Northern Mariana Islands':'MP',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\n    'Puerto Rico': 'PR',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virgin Islands': 'VI',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY'\n}\n\ndf['State_abbr'] = df['State']\ndf['State_abbr'] = df['State_abbr'].replace(us_state_abbrev)\ndf['Death_rate'] = df['Deaths'] \/ df['Confirmed'] \n\n","3bc8cc3e":"# Confirmed percentage in US\n\nfig = px.pie(df, values='Confirmed', names='State', title='Confirmed cases in the US')\nfig.update_traces(textposition='inside', textinfo='label+percent')\nfig.update_layout(title_x=0.5)\n\nfig.show()","bfbb07ff":"# New cases in the U.S. during the past day\n\nfig = px.choropleth(df, locations='State_abbr',\n                    color='New_cases',\n                    locationmode='USA-states',\n                    scope='usa',\n                    hover_name='State', \n                    color_continuous_scale=px.colors.sequential.YlOrRd )\n\nfig.update_traces(text='New_cases')\n\nfig.update_layout(\n    title='New cases in the U.S. during the past day', title_x=0.5)\n\nfig.show()","7b93bb15":"# top 20 state for 'New cases'\ntop20 = df.copy()\ntop20 = top20.sort_values(by='New_cases',ascending=True).tail(20).reset_index()\n\n# bar chart\nfig = px.bar(top20, x=['New_cases'], y='State', title='Today\\'s New Cases',\n             labels={'value': 'Number of new cases'},\n             barmode='overlay', \n             opacity=1,\n            color='State')\n\nfig.update_layout(yaxis={'categoryorder':'total ascending'})\nfig.update_layout(template='ggplot2')\nfig.show()","e8951bf3":"# Countries with highest number of New Cases","991f8a9d":"# Bar plot for highest Confirmed Cases","402e682c":"# Data for United States\n\nThe codes are mostly simliar to above, except on a different web page just for U.S. data","8fc40e7b":"## Import libraries\n\n* request\n* BeautifulSoup","5382d68a":"# Pie chart for Confirmed Cases","55705c7a":"## A look at the DataFrame generated from scraping \nI wrote a def that carries out data gathering, putting data into a pandas.df, then data cleaning.","4a00b25b":"# Scrape COVID-19 data from Worldometers\n\n\n\n## **Please like and comment if you find this kernel useful**\n\n### full kernel using kaggle dataset: https:\/\/www.kaggle.com\/yuankunsong\/covid-19-visualisation-analysis\n\n### source website: https:\/\/www.worldometers.info\/coronavirus\/","e4c013be":"# New cases in the world","6499a436":"## New cases in the U.S. during the past day","f446a234":"## DataFrame of COVID-19 in the U.S.","141378cc":"## Blanks in tables on the website\n\nDepends on time of the day, today's \"new cases\" may not be updated and will result in blank, this is probably because of timezone differences and it is impossible for all countries to be updated at the same time. \n\n\nTherefore I added an option to use yesterday's table, simply change the code below. The numbers from yesterday should still give a good picture of the situation.\n\nChoosing between `today = 1` and `today = 0` totally depends on how the table looks at the time running this kernel.\n\nSetting `1` or `0` will result reading different tables from HTML.","9f4f238a":"## Confirmed cases in the U.S."}}