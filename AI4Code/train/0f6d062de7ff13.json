{"cell_type":{"16503c66":"code","49e23b73":"code","ce646db9":"code","31805770":"code","73e1c49c":"code","b8c1b077":"code","701cb26f":"code","e47dc511":"code","88b5fa15":"code","a914ac97":"code","a2f952a5":"code","77872de1":"code","59bc2770":"code","8ba347f8":"code","9fc2b912":"code","ae7f5822":"code","e3c5bfe6":"code","c663a75b":"code","5fb0b36d":"code","2d9b3e0b":"code","1cf06b89":"code","8aa68083":"code","2484f131":"code","ed322f6e":"code","9e307870":"code","43ce273f":"code","5a9f6923":"code","f9f82b21":"code","a247ef5e":"code","34dd5612":"code","9b3cc9eb":"code","dbe0bc1e":"code","bf2ea3e8":"code","a8946c2d":"code","6ba95b56":"code","53c38d1e":"code","6adab80f":"code","d1e5263e":"code","d382f3d0":"code","9eb8b200":"code","be08112f":"code","85c48e5a":"code","65450dcd":"code","09967fa8":"code","ec9701b6":"code","ce4ee418":"code","cf78139b":"code","50f80e50":"code","c71024aa":"code","642400f2":"code","1a5dbeb6":"code","2cd615af":"code","b54962da":"code","95fa2d11":"code","b2ccea4c":"code","df9f8b10":"code","b94b5a1e":"code","b11392d7":"code","4b27cc77":"code","c800fcb7":"code","f7745f02":"markdown","186018c7":"markdown","e623e4a6":"markdown","aab9b11d":"markdown","6ed56704":"markdown","88c7424d":"markdown","1c82ce56":"markdown","148d12be":"markdown","1cd7e5f4":"markdown","b8f11a98":"markdown","199c4d3c":"markdown","657c87cf":"markdown","cfdb7b47":"markdown","3836c82d":"markdown","95b18ab6":"markdown","872bc4be":"markdown","b1636e44":"markdown","8213cc4e":"markdown","629531d6":"markdown","70e38d81":"markdown","15c88975":"markdown","9f2c1576":"markdown","b0b66d45":"markdown","57554506":"markdown","6a6934e6":"markdown","400a1fae":"markdown","fde6b886":"markdown","182770ea":"markdown","22d39598":"markdown","ac905aff":"markdown","9c06247b":"markdown","433cff4e":"markdown","8bff6024":"markdown","10cd48d2":"markdown","ed482241":"markdown","9d19d307":"markdown"},"source":{"16503c66":"#load the useful packages\n\n# General packages and data visualization packages\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns  # for nice graphics\nimport missingno as msno\nimport plotly.express as px\n\nimport plotly.graph_objects as go\n\n# machine learning packages\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49e23b73":"#load the data|\nmain_data = pd.read_csv(\"..\/input\/hotel-booking-demand\/hotel_bookings.csv\")","ce646db9":"main_data.head()","31805770":"main_data.info()","73e1c49c":"# get the first impression of missing values\nmsno.matrix(main_data);","b8c1b077":"msno.bar(main_data)","701cb26f":"msno.heatmap(main_data)","e47dc511":"for i in main_data.columns:\n    null_rate = main_data[i].isna().sum() \/ len(main_data) * 100 \n    if null_rate > 0 :\n        print(\"{}'s null rate :{}%\".format(i,round(null_rate,2)))","88b5fa15":"main_data[\"agent\"] = main_data.agent.fillna(0.0)","a914ac97":"main_data[\"company\"] = main_data.company.fillna(0.0)","a2f952a5":"main_data = main_data[main_data[\"children\"].notna() & main_data[\"country\"].notna()]","77872de1":"main_data.dtypes","59bc2770":"# the number of children, agent, company should be interger\ncols = [\"children\", \"agent\", \"company\"]\nmain_data[cols] = main_data[cols].applymap(np.int64)","8ba347f8":"main_data.meal.unique()","9fc2b912":"meal_interpretation = {\n    'BB' : \"Breakfast\",\n    'FB' : \"Full Board\",\n    'HB' : \"Half Board\",\n    'SC' : \"No meal\",\n    'Undefined' : \"No meal\"\n}\n\nmain_data[\"meal\"] = main_data[\"meal\"].replace(meal_interpretation)\nmain_data[\"meal\"].unique()\n\n# the type of \"meal\" should be a category\nmain_data[\"meal\"] = pd.Categorical(main_data[\"meal\"])","ae7f5822":"main_data.dtypes","e3c5bfe6":"plt.figure(figsize=(14, 7))\nlabels=['Resort Hotel', 'City Hotel']\nplt.pie(main_data['hotel'].value_counts().sort_values(),labels=labels,explode=[0.1,0.1],\n        autopct='%1.1f%%',colors=['lightblue','royalblue'], startangle=90)\nplt.title('Type of Hotel')\nplt.axis('equal')\nplt.show()","c663a75b":"resort_data = main_data[main_data[\"hotel\"] == \"Resort Hotel\"]\ncity_data = main_data[main_data[\"hotel\"] == \"City Hotel\"]","5fb0b36d":"def get_country(main_data, n):\n    country_data = main_data.groupby(['country']).size().reset_index(name='counts')\n    country_data = country_data.sort_values('counts')\n    return country_data.tail(n)","2d9b3e0b":"country_resort = get_country(resort_data, 20)\nfig1 = px.bar(country_resort, x='country', y='counts',title='Top 20 countries where the guests of the resort hotel are from')\nfig1.show()","1cf06b89":"country_city = get_country(city_data, 20)\nfig2 = px.bar(country_city, x='country', y='counts',title='Top 20 countries where the guests of the city hotel are from')\nfig2.show()","8aa68083":"children_data = main_data.groupby(['children',\"hotel\"]).size().reset_index(name='counts')\nchildren_data = children_data.sort_values('counts')","2484f131":"children_data","ed322f6e":"plt.figure(figsize=(12,6))\nsns.barplot(x='children', y='counts',hue='hotel', data= children_data)\n\nplt.title('Amount of Children per order')","9e307870":"resort_data[\"children\"].value_counts(normalize = True)","43ce273f":"city_data[\"children\"].value_counts(normalize = True)","5a9f6923":"meal_labels= ['Breakfast','Half Board', 'No Meal', 'Full Board']\n\ndef draw_meal_circle(main_data):\n    main_meal = main_data['meal'].value_counts()\n    cmap =plt.get_cmap(\"Set1\")\n    colors = cmap(np.arange(6)*1)\n    my_circle=plt.Circle( (0,0), 0.7, color='white')\n    plt.pie(main_meal, labels=meal_labels, colors=colors, wedgeprops = { 'linewidth' : 3, 'edgecolor' : 'white' })\n    p=plt.gcf()\n    p.gca().add_artist(my_circle)\n    ","f9f82b21":"plt.figure(figsize=(10,10))\n\ndraw_meal_circle(main_data)\nplt.title('Meal Choice', weight='bold')\nplt.show()","a247ef5e":"fig, ax = plt.subplots(1,2, figsize=(15,15))\nplt.subplot(121)\ndraw_meal_circle(resort_data)\nplt.title(\"Resort hotel\")\nplt.subplot(122) \ndraw_meal_circle(city_data)\nplt.title(\"City hotel\")\nplt.show()","34dd5612":"plt.figure(figsize=(12,6))\nsns.barplot(x='arrival_date_year', y='lead_time',hue='is_repeated_guest', data= main_data)\n\nplt.title('Lead time of (repeated) guests in each year')","9b3cc9eb":"plt.figure(figsize=(12,6))\nsns.barplot(x='arrival_date_year', y='lead_time',hue='is_repeated_guest', data= resort_data)\n\nplt.title('Lead time of (repeated) guests of the resort hotel in each year ')","dbe0bc1e":"plt.figure(figsize=(12,6))\nsns.barplot(x='arrival_date_year', y='lead_time',hue='is_repeated_guest', data= city_data)\n\nplt.title('Lead time of (repeated) guests of the city hotel in each year')","bf2ea3e8":"plt.figure(figsize=(20,5))\n\n\nsns.countplot(data = main_data, x= \"arrival_date_month\",hue=\"hotel\",order=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\n                                                                              \"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]).set_title(\n'Number of guests in each month')\nplt.xlabel('Month')\nplt.ylabel('No. of guests')","a8946c2d":"# since the the guests with no cancellation records can be wrongly indentified,\n# here we only consider guests who have cancelled their booking at least once (the tough customers)\ndef remove_none_can(main_data):\n    clean = main_data[main_data[\"previous_cancellations\"] != 0]\n    return clean","6ba95b56":"prev_can = remove_none_can(main_data).previous_cancellations.value_counts(normalize = True)\nprev_can","53c38d1e":"city_can =  remove_none_can(city_data).previous_cancellations.value_counts(normalize = True)\ncity_can = city_can.sort_index()\nresort_can = remove_none_can(resort_data).previous_cancellations.value_counts(normalize = True)\nresort_can = resort_can.sort_index()\nresort_can.plot.line()\ncity_can.plot.line()","6adab80f":"plt.figure(figsize=(10,10))\nsns.countplot(data = main_data, x= \"is_canceled\",hue=\"hotel\")\n\nplt.xlabel(\"Bookings Cancelled\")","d1e5263e":"# Now we compare the cancel rate of the city hotel and the resort hotel\ncan_rate = main_data.groupby([\"hotel\",\"is_canceled\"]).size().reset_index(name='rate')\nsumme = can_rate.groupby(\"hotel\")['rate'].transform(\"sum\")\ncan_rate['rate'] = can_rate['rate'].div(summe)\ncan_rate","d382f3d0":"channel_rate = main_data.groupby([\"hotel\",\"distribution_channel\"]).size().reset_index(name='rate')\nsumme = channel_rate.groupby(\"hotel\")['rate'].transform(\"sum\")\nchannel_rate['rate'] = channel_rate['rate'].div(summe)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x='distribution_channel', y='rate',hue='hotel', data= channel_rate)\n\nplt.title('Sources of customers')\nplt.show()","9eb8b200":"return_rate = main_data.groupby([\"hotel\",\"is_repeated_guest\"]).size().reset_index(name='rate')\nsumme = return_rate.groupby(\"hotel\")['rate'].transform(\"sum\")\nreturn_rate['rate'] = return_rate['rate'].div(summe)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x='is_repeated_guest', y='rate',hue='hotel', data= return_rate)\n\nplt.title('Guests return rate')\nplt.show()","be08112f":"# In order to show the correlations, we first categorize the features with data type \"object\"\n\ncorr_data = main_data.copy()\n\n\nfor col in corr_data.dtypes.to_dict():\n    if corr_data.dtypes.to_dict()[col] == \"object\":\n        corr_data[col] = corr_data[col].astype('category').cat.codes","85c48e5a":"# check the correlations\nplt.figure(figsize = (24, 12))\n\nsns.heatmap(corr_data.corr(), annot = True, linewidths = 1)\nplt.show()","65450dcd":"# check the correlation between 'is_canceled' and other features\ncorr_data.corr()['is_canceled'].abs().sort_values(ascending = False)","09967fa8":"# drop the irrelevant columns according to the above correlation list, \nirr_col = ['stays_in_weekend_nights', 'arrival_date_month', 'children', 'arrival_date_day_of_month', 'arrival_date_week_number', 'arrival_date_year', 'stays_in_week_nights', 'babies', 'days_in_waiting_list', 'market_segment']\n\nmain_data.drop(irr_col, axis = 1, inplace = True)","ec9701b6":"# get the columns of datatype \"object\"\n\nobj_col = [col for col in main_data.dtypes.to_dict() if main_data.dtypes.to_dict()[col] == object]\nobj_col.append('meal')","ce4ee418":"obj_data = main_data[obj_col]\n\n# fix the reservation date\n\nobj_data['reservation_status_date'] = pd.to_datetime(obj_data['reservation_status_date'])\nobj_data['reservation_year'] = obj_data['reservation_status_date'].dt.year\nobj_data['reservation_month'] = obj_data['reservation_status_date'].dt.month\nobj_data['reservation_day'] = obj_data['reservation_status_date'].dt.day\n\nobj_data.drop(['reservation_status_date'], axis = 1, inplace = True)","cf78139b":"obj_col.remove('reservation_status_date')\n\nfor col in obj_col:\n    obj_data[col] = obj_data[col].astype('category').cat.codes\n\nobj_data['reservation_year'] = obj_data['reservation_year'].astype('category').cat.codes","50f80e50":"# process the numerical values\n\nnum_data = main_data.drop(columns = obj_col, axis = 1)\nnum_data.drop('reservation_status_date', axis = 1, inplace = True)\nnum_data.drop('is_canceled', axis = 1, inplace = True)","c71024aa":"scaler = StandardScaler()\nscaled_features = scaler.fit_transform(num_data)\nscaled_features_df = pd.DataFrame(scaled_features, index=num_data.index, columns=num_data.columns)\nscaled_features_df","642400f2":"scaled_features_df.shape","1a5dbeb6":"X = pd.concat([obj_data,scaled_features_df], axis = 1)\nX.shape","2cd615af":"X.columns","b54962da":"y = main_data['is_canceled']\ny.shape","95fa2d11":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30)","b2ccea4c":"X_train.shape, y_train.shape","df9f8b10":"y_test.head()","b94b5a1e":"lr = LogisticRegression(solver='liblinear')\nlr.fit(X_train, y_train)\n\ny_pred_lr = lr.predict(X_test)\n\nacc_lr = accuracy_score(y_test, y_pred_lr)\nreport_lr = classification_report(y_test, y_pred_lr)\n\nprint(\"Accuracy Score of the Logistic Regression model:\", acc_lr)\nprint(\"Classification Report:\\n\", report_lr)","b11392d7":"knn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\n\ny_pred_knn = knn.predict(X_test)\n\nacc_knn = accuracy_score(y_test, y_pred_knn)\nreport_knn = classification_report(y_test, y_pred_knn)\n\nprint(\"Acuracy Score of the KNN model:\", acc_knn)\nprint(\"Classification Report:\\n\", report_knn)","4b27cc77":"rf = RandomForestClassifier()\nrf.fit(X_train, y_train)\n\ny_pred_rf = rf.predict(X_test)\n\nacc_rf = accuracy_score(y_test, y_pred_rf)\nreport_rf = classification_report(y_test, y_pred_rf)\n\nprint(\"Accuracy Score of the Random Forest model:\", acc_rf)\nprint(\"Classification report: \\n\", report_rf)","c800fcb7":"gb = GradientBoostingClassifier()\ngb.fit(X_train, y_train)\n\ny_pred_gb = gb.predict(X_test)\n\nacc_gb = accuracy_score(y_test, y_pred_gb)\nreport_gb = classification_report(y_test, y_pred_gb)\n\nprint(\"Accuracy Score of the Gradient Boosting Classifier:\", acc_gb)\nprint(\"Classification report: \\n\", report_gb)","f7745f02":"## Fix the data types","186018c7":"The above heatmap shows the correlation of missing values of two columns. A value near 0 means there is no dependence between the occurrence of missing values of two variables.","e623e4a6":"> Most guests don't return, the resort hotel has a higher possibility to have return guests.","aab9b11d":"# 5. Cancellation Prediction","6ed56704":"# 2. The first impression of the data","88c7424d":"## Model Building","1c82ce56":"* The city hotel has much more customers than the resort hotel. While we can notice that city hotel has more customers from travel agents, maybe this is a more efficient way to get customers. The resort hotels should update their marketing strategy by having closer cooperation with travel agents and maybe also putting advertisements on social media.\n\n* The French and the Germans prefer the city hotel, while the British and the Spanish people prefer the resort hotel. The hotels should target the potential customers in the corresponding countries.\n\n* The city hotel has less customers who ordered full board meal. The reason can be that the restaurants are more accessible nearby the city hotel. The hotel could colaborate with local hotels by introducing customers to them (e.g. by leaving vouchers in the room).\n\n* The lead time of repeated guests is significantly shorter, except from in 2015 for the city hotel. It could be interesting if we can find the reason for this phenomenon. The hotels should take advantange of the long lead time of fresh customers, preparing to provide them with a memorable experience upon arrival, in order to get more customers from the direct channel.\n\n* The city hotel has a higher cancellation rate, but the customers who has canceled before tend to cancel more times by the resort hotel. To solve this, the city hotel could apply no-refund policies, and the resort hotel could charge a higher fee for customers who have cancelled more times before.\n\n* Most guests don't return. However, the resort hotel has more loyal customers. The city hotel should try to plan more activities and provide specical for the repeat customers in order to attract them to visit again.","148d12be":">One can conclude from the above visualizations that:\n\n>* The hotels are most probably in Portugal.\n>* The French and the Germans prefer the city hotel, while the British and the Spanish people prefer the resort hotel.","1cd7e5f4":"<span style=\"color:red; font-family:Papyrus; font-size:2em;\">KNN<\/span>","b8f11a98":"**<center> <span style=\"color:navy;font-family:sans-serif; font-size:40px;\"> Hotel Booking Demand EDA<\/span> <\/center>**\n**<center> <span style=\"color:navy;font-family:cursive; font-size:30px;\"> \\& <\/span> <\/center>**\n**<center> <span style=\"color:navy;font-family:sans-serif; font-size:40px;\"> Cancellation prediction<\/span> <\/center>**\n","199c4d3c":"<span style=\"color:red; font-family:Papyrus; font-size:2em;\">Random Forest<\/span>","657c87cf":"# 4. Data Visualization","cfdb7b47":"> One can see that the guests who have cancellation records of the resort hotel tend to have more cancellations.","3836c82d":">As expected, the summer months (from May to August) are the most busy months for the hotels. People prefer to enjoy swimming in the Atlantics in the summer.","95b18ab6":"> The lead time of repeated guests is significantly shorter, except from in 2015 for the city hotel.","872bc4be":"> The city hotel has more customers from travel agent than the resort hotel, while the resort hotel has more direct customers and customers from corporate.","b1636e44":"<span style=\"color:red; font-family:Papyrus; font-size:2em;\">Gradient Boosting<\/span>","8213cc4e":">From the above analysis we can see that the city hotel has a much higher cancellation rate. However, if we only look at the guests who had canceled before, the guests of resort hotel has more cancellations.","629531d6":"**From the above visualization and analysis we can see that the columns \"agent\" and \"company\" have significantly many missing values. There are also few missing values in \"children\" and \"country\".**","70e38d81":"## Data pre-processing","15c88975":"> **One third of the hotels are resort hotels.**\n\n\nThe reason could be that:\n* Tere are more city hotels than resort hotels.\n* City Hotel are normally cheaper.\n* There are more demand for city hotels than resort hotels.\n","9f2c1576":"## Conclusion","b0b66d45":"The above figure shows the absolute amount of the canceled order of the city hotel and the resort hotel. The big difference does not tell us much information, since the city hotel has overall much more orders. **Only the cancellation rate matters.**","57554506":">From the above data, it is not so clear that guests with more children would prefer resort hotels.","6a6934e6":">The above visualization gives the first impression of the null values","400a1fae":"However, let's take a look of the cancellation rate of the orders.","fde6b886":"def remove_none-can(main_data):\n    clean = main_data[main_data[\"previous\"]]def remove_none-can(main_data):\n    clean = main_data[main_data[\"previous\"]]","182770ea":"# 3. Data Cleansing","22d39598":"**The absolute amount does not give us enough information. Let's take a look at the frequencies.**","ac905aff":"# 1. Load the dataset\n\nThe dataset is provided by Nuno Antonio, Ana Almeida, and Luis Nunes in the article [Hotel Booking Demand Datasets](https:\/\/www.sciencedirect.com\/science\/article\/pii\/S2352340918315191).","9c06247b":"## Fix the missing values","433cff4e":">Since it is impossible to find the missing values of \"children\" and \"country\", I will drop these as they are only a few rows of missing values.","8bff6024":">as we can read from the description of the dataset, the null values of \"agent\" or company imply that the order is not from an agent or have no company. Thus, we replace the null values accordingly for better comprehension.","10cd48d2":"The dataset has 119390 rows and 32 columns:\n* hotel: The name of the hotel, city hotel or resort hotel\n* is_canceled: Boolean value stored as int64, indicates the hotel is canceled or not\n* lead_time: Number of days that elapsed between the entering date of the booking into the PMS and the arrival date\n* arrival_date*: Information of the arrival date\n* stay in_weekend_nights: Number of weekend nights (Saturday or Sunday) the guest stayed or booked to stay at the hotel\n* stay in_week_nights: Number of week nights (Monday to Friday) the guest stayed or booked to stay at the hotel\n* adults\/children\/babies: Number of adults\/children\/babies\n* meal: Type of meal booked. Categories:\n    1. Undefined\/SC \u2013 no meal package;\n    2. BB \u2013 Bed & Breakfast;\n    3. HB \u2013 Half board (breakfast and one other meal \u2013 usually dinner);\n    4. FB \u2013 Full board (breakfast, lunch and dinner)\n* country: Country of origin.\n* market_segment: Market segment designation. In categories, the term \u201cTA\u201d means \u201cTravel Agents\u201d and \u201cTO\u201d means \u201cTour Operators\u201d\n* distribution_channel: Booking distribution channel. The term \u201cTA\u201d means \u201cTravel Agents\u201d and \u201cTO\u201d means \u201cTour Operators\u201d\n* is_repeated_guest: Value indicating if the booking name was from a repeated guest (1) or not (0)","ed482241":">One can see that the guests of the city hotel rarely oder Full Board. The reason can be that **restaurants are more accessible in the neighbourhood of the city hotel**.","9d19d307":"<span style=\"color:red; font-family:Papyrus; font-size:2em;\">Logistic Regression<\/span>"}}