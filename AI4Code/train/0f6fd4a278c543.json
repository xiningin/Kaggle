{"cell_type":{"4b1bfec0":"code","f088c550":"code","2aff19f4":"code","8f982158":"code","49dd1801":"code","ead33636":"code","3c082023":"code","4a9224fd":"code","79062168":"code","478c5631":"code","57d153ff":"code","db57f071":"code","bbb3cd03":"code","39898a88":"code","fe17f059":"markdown","827dae50":"markdown","db37487f":"markdown","492658d0":"markdown","5626abf3":"markdown","31e2b186":"markdown"},"source":{"4b1bfec0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport folium\n\n%matplotlib inline\n\nplt.style.use('fivethirtyeight')\n\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f088c550":"##############################################\n##             LISTINGS\n##############################################\n\n# -------------------------------------------------------\n# Selecionei as seguintes colunas para fazer a an\u00e1lise:\n# -------------------------------------------------------\nlistings=pd.read_csv('\/kaggle\/input\/airbnb-buenosaires\/listings.csv')\nlistings = listings.loc[:, ['id', 'name', 'host_id', 'host_is_superhost', 'neighbourhood_cleansed',\n                            'room_type', 'price', 'minimum_nights', 'availability_60',\n                            'number_of_reviews', 'instant_bookable', 'review_scores_rating',\n                           'latitude','longitude']]\nprint(listings.head())\nprint('--------------')\n\n# -------------------------------------------------------\n# Tratamento de valores faltantes:\n#   - para a coluna host_is_superhost, \n# assumi faltantes como false\n#   - para as demais colunas, como o n\u00famero de itens \n# faltantes era baixo, removi as linhas com NaN\n# -------------------------------------------------------\nlistings.host_is_superhost.fillna('f', inplace=True)\nlistings.dropna(inplace=True)\nprint(listings.isnull().sum() )\nprint('--------------')\nprint(listings.info())\n","2aff19f4":"##############################################\n##             LISTINGS\n##############################################\n\n# -------------------------------------------------------\n# Analisando a distribui\u00e7\u00e3o de acomoda\u00e7\u00f5es por bairros:\n# Como a lista \u00e9 muito extensa, selecionei os 10 \n# com maior frequencia para esse grafico (pie)\n# -------------------------------------------------------\nplt.figure(figsize=(13,7))\nplt.title(\"Acomoda\u00e7\u00f5es por Bairros\")\n\ng = plt.pie(listings.neighbourhood_cleansed.value_counts().head(10), \n            labels=listings.neighbourhood_cleansed.value_counts().head(10).index,\n            autopct='%1.1f%%', startangle=180)\nplt.show()","8f982158":"##############################################\n##             LISTINGS\n##############################################\n\n# -------------------------------------------------------\n# Analisando os tipos de acomoda\u00e7\u00f5es:\n# -------------------------------------------------------\nplt.figure(figsize=(10,5))\nplt.title(\"Tipos de acomoda\u00e7\u00e3o\")\nsns.countplot(listings.room_type, palette=\"bright\")\nfig = plt.gcf()\nplt.show()","49dd1801":"##############################################\n##             LISTINGS\n##############################################\n\n# -------------------------------------------------------\n# Analisando os tipos de acomoda\u00e7\u00f5es por bairro:\n# Como a lista \u00e9 muito extensa, selecionei os 20 \n# com maior frequencia para esse grafico \n# -------------------------------------------------------\nplt.figure(figsize=(20,7))\nplt.title(\"Tipo de acomoda\u00e7\u00e3o por bairro\")\n\nsns.countplot(listings.neighbourhood_cleansed.head(20),hue=listings.room_type, palette=\"bright\")\nplt.show()","ead33636":"\n##############################################\n##             LISTINGS\n##############################################\n\n#Verificar e remover nulos\nlistings.isnull().sum() \n\n# criar coluna com pre\u00e7o em formato numerico\nlistings['f_price'] = listings['price'].replace('[$,]',\"\",regex=True).astype(float)\n\nprint (listings['f_price'].min())\nprint (listings['f_price'].max())  \n\n#Limitei os pre\u00e7os em 5000 para facilitar a visualizacao\nsublist = listings[listings.f_price<5000]\n\nplt.figure(figsize=(20,10))\nplt.title(\"Mapa de distribui\u00e7\u00e3o de pre\u00e7os\")\nplt.scatter( x=sublist['longitude'],y=sublist['latitude'],c=sublist['f_price'],cmap=plt.get_cmap('jet'),alpha=0.4)\nplt.colorbar()\nplt.legend()\nplt.ioff()\nplt.show()","3c082023":"##############################################\n##             LISTINGS\n##############################################\n\n# -------------------------------------------------------\n# Analisando a distribui\u00e7\u00e3o de pre\u00e7os por bairros:\n# Como a lista \u00e9 muito extensa, selecionei os 15 \n# bairros com maior frequencia e limitei os pre\u00e7os\n# em 10000\n# -------------------------------------------------------\nplt.style.use('classic')\nplt.figure(figsize=(20,10))\nsublist = listings[listings.f_price<10000]\n\nlst = sublist.neighbourhood_cleansed.value_counts().head(15).index\nsublist2 = sublist[sublist['neighbourhood_cleansed'].isin(lst)]\n\nplt.title(\"Distribui\u00e7\u00e3o de pre\u00e7os por bairros\")\nsns.boxplot(y='f_price', x=sublist2.neighbourhood_cleansed, \n                 data=sublist2, \n                 width=0.3,\n                 palette=\"colorblind\")\nplt.show()\n\n","4a9224fd":"##############################################\n##             LISTINGS\n##############################################\n\n# -------------------------------------------------------\n# Analisando a distribui\u00e7\u00e3o de acomoda\u00e7\u00f5es por bairros.\n# -------------------------------------------------------\n\nfrom folium import plugins\n\ncoordenadas = []\ncidade = folium.Map(location=[-34.6083,-58.3712], zoom_start=12)\n\nfor lat,long in zip(listings['latitude'],listings['longitude']):\n    coordenadas.append([lat,long])\n\ncidade.add_child(plugins.FastMarkerCluster(coordenadas))\n\n\n","79062168":"##############################################\n##             LISTINGS\n##############################################\n\n# -------------------------------------------------------\n# Tentei achar alguma rela\u00e7\u00e3o entre o review e superuser\n# mas nao consegui\n# -------------------------------------------------------\nplt.figure(figsize=(10,5))\nplt.title(\"Reviews vs superhost\")\nbins = [0.0, 3.0, 5.0]\nlistings['review_binned'] = pd.cut(listings['review_scores_rating'], bins)\nsns.countplot(listings.host_is_superhost,hue=listings.review_binned, palette=\"bright\")\n\nplt.show()","478c5631":"##############################################\n##             LISTINGS\n##############################################\n\n# -------------------------------------------------------\n# Tentei achar alguma rela\u00e7\u00e3o entre o review e superuser\n# mas nao consegui\n# -------------------------------------------------------\n\nlistx = listings.loc[:, ['review_binned', 'host_is_superhost', 'neighbourhood_cleansed',\n                            'room_type', 'price', 'minimum_nights', 'availability_60',\n                            'number_of_reviews', 'instant_bookable']]\n\nsns.heatmap(listx.corr(), annot=True, cmap=\"PiYG\")","57d153ff":"##############################################\n##             CALENDAR\n##############################################\n\n# Importar os dados da tabela calendar\ncalendar=pd.read_csv('\/kaggle\/input\/airbnb-buenosaires\/calendar.csv')\ncalendar.info()\n\n# Remover colunas que nao serao usadas\ncalendar.drop([\"adjusted_price\", \"minimum_nights\", \"maximum_nights\"], axis=1, inplace=True)\nprint(calendar.head())\n\n#Verificar e remover nulos\ncalendar.isnull().sum() \ncalendar.dropna(subset=['price'], inplace=True)\ncalendar.isnull().sum() #checking for total null values\n\n# criar coluna com mes em formato numerico\ncalendar['month'] = pd.to_numeric(pd.to_datetime(calendar['date']).dt.strftime('%m')  )\n\n# criar coluna com pre\u00e7o em formato numerico\ncalendar['f_price'] = calendar['price'].replace('[$,]',\"\",regex=True).astype(float)\n\nprint (calendar['price'].min())\nprint (calendar['price'].max())   \n\n# criar coluna com disponibilidade em formato boleano\ncalendar['i_avail'] = calendar['available'].map({'f':0, 't':1})","db57f071":"##############################################\n##             CALENDAR\n##############################################\n\n# Set the width and height of the figure\nplt.figure(figsize=(10,6))\n\n# Add title\nplt.title(\"Ocupacao por mes\")\n\n# Bar chart \nsns.barplot(x=calendar['month'], y=calendar['i_avail'])\n\n# Add label for vertical axis\nplt.ylabel(\"disponivel\")","bbb3cd03":"##############################################\n##             REVIEWS\n##############################################\nimport string\nimport collections\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport matplotlib.cm as cm\n\nreviews=pd.read_csv('\/kaggle\/input\/airbnb-buenosaires\/reviews.csv')\n\n#Remove mulos e converte para min\u00fasculas\nrev = reviews['comments'].dropna()\nprint(rev.isnull().sum())\nrev= rev.str.lower()\n\nrev.head()","39898a88":"##############################################\n##             REVIEWS\n##############################################\n\n#Mapa de palavras\n\nall_summary = \" \".join(s for s in rev)\n \n# lista de stopword\nstopwords = set(STOPWORDS)\nstopwords.update([\"buenos\", \"aires\", \"y\", \"lo\", \"que\", \"br\", \"departamento\", \"apartment\", \"stay\", \"as\",\n                  \"muy\", \"and\", \"en\", \"el\", \"es\", \"de\",\"la\", \"everything\", \"apartamento\", \"las\", \"place\",\n                 \"nice\", \"foto\", \"great\", \"check\", \"location\", \"tal\", \"cual\", \"host\", \"perfect\", \"excelente\",\n                 \"ubicaci\u00f3n\", \"thank\", \"excellent\", \"con\", \"todo\", \"bien\", \"ubicado\", \"buena\", \"amable\",\n                 \"sin\", \"duda\", \"best\", \"todos\", \"los\", \"recomendable\",\"fotos\", \"est\u00e1\", \"lindo\", \"good\", \"airbnb\",\n                 \"helpful\", \"c\u00f3modo\"])\n \n# gerar uma wordcloud\nwordcloud = WordCloud(stopwords=stopwords,\n                      background_color=\"black\",\n                      width=1600, height=800).generate(all_summary)\n \n# mostrar a imagem final\nfig, ax = plt.subplots(figsize=(10,6))\nax.imshow(wordcloud, interpolation='bilinear')\nax.set_axis_off()\n \nplt.imshow(wordcloud);","fe17f059":"**Para esta an\u00e1lise, vou trabalhar com os arquivos separados.**\n**Uma proxima etapa seria uma analise combinada dos arquivos**.","827dae50":"Os bairros que oferecem o maior n\u00famero de acomoda\u00e7\u00f5es s\u00e3o Recoleta e Palermo.","db37487f":"Os meses mais procurados s\u00e3o v\u00e3o de agosto a janeiro","492658d0":"\nUma melhoria seria inserir o nome dos bairros.","5626abf3":"Pelo gr\u00e1fico, os bairros mais caros s\u00e3o Palermo e Recoleta","31e2b186":"A grande maioria \u00e9 de apartamentos e casas inteiras"}}