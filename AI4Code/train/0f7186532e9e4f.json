{"cell_type":{"78c42353":"code","48169f93":"code","5d7c3851":"code","38bfd190":"code","f12b29e9":"code","154fa648":"code","3a8d12ca":"markdown","6e799271":"markdown","4720c106":"markdown","8a7e8bcb":"markdown"},"source":{"78c42353":"# Sympy is a python library for symbolic mathematics. It has a nice\n# pretty printer for matrices, which is all we'll use it for.\nimport sympy\nsympy.init_printing()\nfrom IPython.display import display","48169f93":"import numpy as np\n#It is a image contains\n#1. Horizontal line\n#2. a small vertical line at left bottom\nimage = np.array([\n    [0,0,0,0,0,0],\n    [1,1,1,1,1,1],\n    [0,1,0,0,0,0],\n    [0,1,0,0,0,0],\n    [0,1,0,0,0,0],\n    [0,1,0,0,0,0],\n])\n#uncomment to show a difference of using sympy library\n#print(image)\ndisplay(sympy.Matrix(image))\n#kernel1 detect horizontal line\nkernel1 = np.array([\n    [1,1],\n    [-1,-1]\n])\n\ndisplay(sympy.Matrix(kernel1))","5d7c3851":"# Reformat for Tensorflow\nimage = tf.cast(image, dtype=tf.float32)\nimage = tf.reshape(image, [1, *image.shape, 1])\nkernel1 = tf.reshape(kernel1, [*kernel1.shape, 1, 1])\nkernel1 = tf.cast(kernel1, dtype=tf.float32)","38bfd190":"import tensorflow as tf\n#get feature map \nimage_filter = tf.nn.conv2d(\n    input=image,\n    filters=kernel1,\n    strides=1,\n    padding='VALID',\n)\n#Detect filter\nimage_detect = tf.nn.relu(image_filter)\n\n# The first matrix is the image after convolution, and the second is\n# the image after ReLU.\ndisplay(sympy.Matrix(tf.squeeze(image_filter).numpy()))\ndisplay(sympy.Matrix(tf.squeeze(image_detect).numpy()))","f12b29e9":"image2 = np.array([\n    [0,0,0,0,0,0],\n    [1,1,1,1,1,1],\n    [0,1,0,0,0,0],\n    [0,1,0,0,0,0],\n    [0,1,0,0,0,0],\n    [0,1,0,0,0,0],\n])\n#kernel2 detect vertical line\nkernel2 = np.array([\n    [1,-1],\n    [1,-1]\n])\n# Reformat for Tensorflow\nimage2 = tf.cast(image2, dtype=tf.float32)\nimage2 = tf.reshape(image2, [1, *image2.shape, 1])\nkernel2 = tf.reshape(kernel2, [*kernel2.shape, 1, 1])\nkernel2 = tf.cast(kernel2, dtype=tf.float32)","154fa648":"import tensorflow as tf\n#get feature map \nimage_filter2 = tf.nn.conv2d(\n    input=image2,\n    filters=kernel2,\n    strides=1,\n    padding='VALID',\n)\n#Detect filter\nimage_detect2 = tf.nn.relu(image_filter2)\n\n# The first matrix is the image after convolution, and the second is\n# the image after ReLU.\ndisplay(sympy.Matrix(tf.squeeze(image_filter2).numpy()))\ndisplay(sympy.Matrix(tf.squeeze(image_detect2).numpy()))","3a8d12ca":"Detection of Horizontal Line","6e799271":"Detection of Vertical Line","4720c106":"Define a image","8a7e8bcb":"# Convolutional and Relu With Arrays "}}