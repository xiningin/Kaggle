{"cell_type":{"77b88696":"code","338f890b":"code","4d1bd8d5":"code","428e9ddb":"code","7eed1b13":"code","2a67378e":"code","febdc2c8":"code","de1c14c6":"code","56fcaadf":"code","2238e5c5":"code","b8ffda35":"code","a1909f64":"code","c7be0d92":"code","765174e4":"code","420da6e7":"markdown","868cb718":"markdown","4ef1ccc4":"markdown"},"source":{"77b88696":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","338f890b":"# select a ticker for the analysis\nticker = 'ITSA3'","4d1bd8d5":"df = pd.read_csv('..\/input\/ibovespa-stocks\/b3_stocks_1994_2020.csv', low_memory=False)\ndf.head()","428e9ddb":"df_ticker = df[df['ticker'] == ticker]\nlen(df_ticker)","7eed1b13":"# just plotting an overview of the index's close value\nfig, ax = plt.subplots(figsize=(20,10))\nax.plot(df_ticker['datetime'], df_ticker['close'])\nax.xaxis.set_major_locator(plt.MaxNLocator(20))","2a67378e":"def create_df_windows(df, window_size, predict_ahead):\n    x, y = [], []\n\n    for i in range(len(df)-window_size-predict_ahead):\n        x.append(df.iloc[i:i+window_size])\n        y.append(df.iloc[i+window_size+predict_ahead-1])\n    \n    return x, y\n\n\ndef normalize_columns(df_x, df_y, cols):\n    norm_x = df_x[cols] \/ df_x[cols].iloc[0] - 1\n    norm_y = df_y.to_frame().T[cols] \/ df_x[cols].iloc[0] - 1\n\n    return norm_x, norm_y\n\ndef denorm_columns(df_x, df_norm_x, df_norm_y, cols):\n    df_denorm_x = df_x[cols].iloc[0] * (df_norm_x[cols] + 1)\n    df_denorm_y = df_x[cols].iloc[0] * (df_norm_y[cols] + 1)\n\n    return df_denorm_x, df_denorm_y\n\ndef create_dataset(df, window_size, predict_ahead, x_cols, y_col):\n    x_windows, y_windows = create_df_windows(df, window_size, predict_ahead)\n\n    # x_cols must be in list format\n    x_cols = x_cols if isinstance(x_cols, list) else [x_cols]\n    x_lst, y_lst = [], []\n\n    for x_window, y_window in zip(x_windows, y_windows):\n\n        x_norm, y_norm = normalize_columns(x_window, y_window, x_cols)\n\n        x_lst.append(x_norm.to_numpy())\n        y_lst.append(y_norm[y_col].to_numpy().astype('float').squeeze())\n\n    return x_windows, y_windows, np.stack(x_lst), np.stack(y_lst)\n\ndef split_train_test(items, train_pct=0.8):\n    results = []\n    for item in items:\n        split_i = int(len(item)*train_pct)\n        results.append(item[:split_i])\n        results.append(item[split_i:])\n    \n    return tuple(results)\n","febdc2c8":"features = ['close', 'volume']\ntarget = ['close']\nwindow_size = 20\npredict_ahead = 1\n\nx_windows, y_windows, x_norm, y_norm = create_dataset(df_ticker, window_size, predict_ahead, features, target)\nx_norm.shape, y_norm.shape","de1c14c6":"# Split train and test packs\nx_train, x_test, y_train, y_test = split_train_test([x_windows, y_windows], train_pct=0.85)\nx_norm_train, x_norm_test, y_norm_train, y_norm_test = split_train_test([x_norm, y_norm], train_pct=0.85)","56fcaadf":"from keras.models import Sequential\nfrom keras.layers import Dense, LSTM\n\n#Build the LSTM model\nmodel = Sequential()\nmodel.add(LSTM(50, dropout=0.2, return_sequences=True, input_shape= (x_norm_train.shape[1], len(features))))\n# model.add(LSTM(100, dropout=0.2, return_sequences= True))\nmodel.add(LSTM(50, dropout=0.2, return_sequences= True))\nmodel.add(LSTM(1, dropout=0.2, return_sequences= False))\n# model.add(Dense(25))\n# model.add(Dense(1))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')","2238e5c5":"model.summary()","b8ffda35":"model.fit(x_norm_train, y_norm_train,\n          validation_data=(x_norm_test, y_norm_test),\n          batch_size=64,\n          epochs=10)","a1909f64":"# predicting values\ndef denorm_preds(x_windows, norm_preds, col):\n    preds = np.zeros_like(norm_preds)\n\n    for i, window in enumerate(x_windows): \n        preds[i] = window[col].iloc[0] * (norm_preds[i] + 1)\n        \n    return preds\n\n# TEST DATASET\nnorm_preds = model.predict(x_norm_test)\npreds = denorm_preds(x_test, norm_preds, target)\ny = denorm_preds(x_test, y_norm_test, target)","c7be0d92":"# plot normalized predictions\nplt.figure(figsize=(20,10))\nplt.plot(norm_preds[:,0])\nplt.plot(y_norm_test)","765174e4":"# plot original prices predictions\nplt.figure(figsize=(20,10))\nplt.plot(preds[:,0])\nplt.plot(y)\n","420da6e7":"## Prepare the datasets\nTo feed our LSTM, we will create normalized windows of previously defined sizes - <b>window_size<\/b>. <br>\nThe target will be a price n steps ahead of time - <b>predict_ahead<\/b>.<br>\nThe final shape to be fed into the LSTM is: (n, window_size, features)\n\nEach window will be normalized. The target will be normalized using the same reference.\nA function to denormalization will also be necessary to reconstruct original values.\n\nLet's test the normalization and denormalization functions into a small sample.","868cb718":"## Read the Data","4ef1ccc4":"# Simple LSTM\nThe objective of this notebook is to provide a very simple LSTM network to predict future stock prices from IBOVESPA index. This first version uses only 1 stock. Future notebooks will analyse the results and add other input features as moving averages, etc.\n\nHope you enjoy it. ;)"}}