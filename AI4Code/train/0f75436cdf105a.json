{"cell_type":{"5fa69e43":"code","f33c1b91":"code","e5537dd0":"code","f549a045":"code","078d0022":"code","34cf3757":"code","0c8e06a6":"code","1027e5c5":"code","37e1c950":"code","87d349bf":"code","4745fea0":"code","b5ef53ab":"code","8531d7c5":"code","f51678c9":"code","0f3e8de2":"code","0a40e1ca":"code","bb128dc2":"code","6950e21d":"code","39140d19":"code","28faacd4":"code","a0f2e57b":"code","12bda8b1":"code","8c43b2e9":"code","426b334a":"code","fff585b8":"code","41d48181":"code","3296e393":"code","e2a9b6f7":"code","f4a53add":"code","95e8df18":"code","b7ecc220":"code","b38739f8":"code","16e28d82":"code","dcec6fa7":"code","0383e256":"code","78ba6546":"code","a2fdcb5f":"code","02db1a13":"markdown","a6c5c2b6":"markdown","c4b9d957":"markdown","dec58b3d":"markdown","e10efd25":"markdown","587a4ba4":"markdown","f8f9d2b9":"markdown","588b5eb0":"markdown","547c739a":"markdown","a2646105":"markdown","c0ba11d0":"markdown","70e1d462":"markdown","afff7e4a":"markdown","53502260":"markdown","f03926f1":"markdown","cdf12a66":"markdown","3bdf7858":"markdown","8bb559dc":"markdown","615254fa":"markdown","e2356d45":"markdown","668b3b77":"markdown","32099422":"markdown","36078671":"markdown","545c41c8":"markdown","9a69499a":"markdown"},"source":{"5fa69e43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f33c1b91":"my_boolean=True\nprint(my_boolean)","e5537dd0":"print(2==3)","f549a045":"print(\"hello\"==\"hello\")","078d0022":"print(1!=1)","34cf3757":"print(\"eleven\"!=\"seven\")","0c8e06a6":"print(2!=10)","1027e5c5":"print(7>7.0)","37e1c950":"print(7<=8)\nprint(9>=9.0)","87d349bf":"print(\"Annie\">\"Andy\")","4745fea0":"if 10>5:\n    print(\"10 greater than 5\")\nprint(\"program ended\")","b5ef53ab":"spam=7\nif spam>5:\n    print(\"spam is greater than 5\")\nif spam>8:\n    print(\"spam is greater than 8\")","8531d7c5":"num=12\nif num>5:\n    print(\"bigger than 5\")\n    if num<=47:\n        print(\"between 5 and 47\")","f51678c9":"num=7\nif num>3:\n    print(\"bigger than 3\")\n    if num<5:\n        print(\"between 3 and 5\")\n        if num==7:\n            print(\"num is 7\")\n        ","0f3e8de2":"x=4\nif x==5:\n    print(\"yes\")\nelse:\n    print(\"no\")","0a40e1ca":"if 1+1==2:\n    if 2*2==8:\n        print(\"if\")\n    else:\n        print(\"else\")","bb128dc2":"num=3\nif num==1:\n    print(\"one\")\nelse:\n    if num==2:\n        print(\"two\")\n    else:\n        if num==3:\n            print(\"three\")\n        else:\n            print(\"sth else\")","6950e21d":"x=10\ny=20\nif x>y:\n    print(\"if statement\")\nelse:\n    print(\"else statement\")","39140d19":"num=3\nif num==1:\n    print(\"one\")\nelif num==2:\n    print(\"two\")\nelif num==3:\n    print(\"three\")\nelse:\n    print(\"something else\")","28faacd4":"print(1==1 and 2==2)\nprint(1==1 and 2==3)\nprint(1!=1 and 2==2)\nprint(2<1 and 3>6)","a0f2e57b":"if(1==1) and (2+2>3):\n    print(\"true\")\nelse:\n    print(\"false\")\n","12bda8b1":"print(1==1 or 2==2)\nprint(1==1 or 2==3)\nprint(1!=1 or 2==2)\nprint(2<1 or 3>6)","8c43b2e9":"age=15\nmoney=500\nif age>18 or money>100:\n    print(\"welcome\")","426b334a":"print(not 1==1)\nprint(not 1>7)","fff585b8":"if not True:\n    print(\"1\")\nelif not(1+1==3):\n    print(\"2\")\nelse:\n    print(\"3\")","41d48181":"print(False==False or True)\nprint(False==(False or True))\nprint((False==False)or True)","3296e393":"if 1+1*3==6:\n    print(\"yes\")\nelse:\n    print(\"no\")","e2a9b6f7":"grade=88\nif(grade>=70 and grade<=100):\n    print(\"passed!\")","f4a53add":"x=4\ny=2\nif not 1+1==y or x==4 and 7==8:\n    print(\"yes\")\nelif x>y:\n    print(\"no\")","95e8df18":"words=[\"hello\",\"world\",\"!\"]\nprint(words[0])\nprint(words[1])\nprint(words[2])","b7ecc220":"nums=[5,4,3,2,1]\nprint(nums[1])","b38739f8":"empty_list=[]\nprint(empty_list)\n[2,]","16e28d82":"number=3\nthings=[\"string\",0,[1,2,number],4.56]\nprint(things[1])\nprint(things[2])\nprint(things[2][2])","dcec6fa7":"m=[\n    [1,2,3],\n    [4,5,6]\n]\nprint(m[1][2])","0383e256":"list=[42,55,67]\nprint(list[2])","78ba6546":"str=\"hello world!\"\nprint(str[6])","a2fdcb5f":"num=[5,4,3,[2],1]\nprint(num[0])\nprint(num[3][0])","02db1a13":"elif Statements\n\n\nMultiple if\/else statements make the code long and not very readable.\nThe elif (short for else if) statement is a shortcut to use when chaining if and else statements, making the code shorter.\n\nThe same example from the previous part can be rewritten using elif statements:\nAs you can see in the example above, a series of if elif statements can have a final else block, which is called if none of the if or elif expressions is True.\n\nAs you can see in the example above, a series of if elif statements can have a final else block, which is called if none of the if or elif expressions is True.\n\nThe elif statement is equivalent to an else\/if statement. It is used to make the code shorter, more readable, and avoid indentation increase.\n","a6c5c2b6":"Lists\n\n\nSome types, such as strings, can be indexed like lists.\nIndexing strings behaves as though you are indexing a list containing each character in the string.\n\nFor example:\n\nSpace (\" \") is also a symbol and has an index.\n\nTrying to access a non-existing index will produce an error.","c4b9d957":"Operator Precedence\n\n\nOperator precedence is a very important concept in programming. It is an extension of the mathematical idea of order of operations (multiplication being performed before addition, etc.) to include other operators, such as those in Boolean logic.\n\nThe below code shows that == has a higher precedence than or.\n\n> Python's order of operations is the same as that of normal mathematics: \nparentheses first, \nthen exponentiation, \nthen multiplication\/division, \nand then addition\/subtraction.","dec58b3d":"Lists\n\n\nSometimes you need to create an empty list and populate it later during the program. For example, if you are creating a queue management program, the queue is going to be empty in the beginning and get populated with people data later.\n\nAn empty list is created with an empty pair of square brackets.\n\nIn some code samples you might see a comma after the last item in the list. It's not mandatory, but perfectly valid.","e10efd25":"# Lists","587a4ba4":"Comparison\n\n\nThe greater than or equal to, and smaller than or equal to operators are >= and <=.\nThey are the same as the strict greater than and smaller than operators, except that they return True when comparing equal numbers.","f8f9d2b9":"if Statements\n\n\nTo perform more complex checks, if statements can be nested, one inside the other.\nThis means that the inner if statement is the statement part of the outer one. This is one way to see whether multiple conditions are satisfied.\n\nIndentation is used to define the level of nesting.","588b5eb0":"Lists\n\n\nLists are used to store items.\nA list is created using square brackets with commas separating items.\n\nIn the example above the words list contains three string items.\n\nA certain item in the list can be accessed by using its index in square brackets.\n\nFor example:\n\n> The first list item's index is 0, rather than 1, as might be expected.","547c739a":"Booleans\n\nAnother type in Python is the Boolean type. There are two Boolean values: True and False.\nThey can be created by comparing values, for instance by using the equal operator ==.\n\nBe careful not to confuse assignment (one equals sign) with comparison (two equals signs).","a2646105":"Greater than and smaller than operators can also be used to compare strings lexicographically (the alphabetical order of words is based on the alphabetical order of their component letters).\n\nThe first two characters from \"Annie\" and \"Andy\" (A and A) are compared. As they are equal, the second two characters are compared. Because they are also equal, the third two characters (n and d) are compared. And because n has greater alphabetical order value than d, \"Annie\" is greater than \"Andy\".","c0ba11d0":"Boolean Logic\n\n\nBoolean logic is used to make more complicated conditions for if statements that rely on more than one condition.\nPython's Boolean operators are and, or, and not.\nThe and operator takes two arguments, and evaluates as True if, and only if, both of its arguments are True. Otherwise, it evaluates to False.\n\nBoolean operators can be used in expression as many times as needed.","70e1d462":"# Boolean Logic","afff7e4a":"Chaining Multiple Conditions\n\n\nYou can chain multiple conditional statements in an if statement using the Boolean operators.\n\nFor example, we can check if the value of a grade is between 70 and 100:\n\nYou can use multiple and, or, not operators to chain multiple conditions together.","53502260":"Comparison\n\n\nAnother comparison operator, the not equal operator (!=), evaluates to True if the items being compared aren't equal, and False if they are.\n\nComparison operators are also called Relational operators.","f03926f1":"else Statements\n\n\nEvery if condition block can have only one else statement.\nIn order to make multiple checks, you can chain if and else statements.\n\nFor example, the following program checks and outputs the num variable's value as text:\n\nIndentation determines which if\/else statements the code blocks belong to.","cdf12a66":"# else Statements","3bdf7858":"# Booleans&Comparisons","8bb559dc":"Boolean Or\n\n\nThe or operator also takes two arguments. It evaluates to True if either (or both) of its arguments are True, and False if both arguments are False\n\nBesides values, you can also compare variables.","615254fa":"Comparison\n\n\nPython also has operators that determine whether one number (float or integer) is greater than or smaller than another. These operators are > and < respectively.\n\nDifferent numeric types can also be compared, for example, integer and float.","e2356d45":"Lists\n\n\nTypically, a list will contain items of a single item type, but it is also possible to include several different types.\nLists can also be nested within other lists.\n\nNested lists can be used to represent 2D grids, such as matrices.\nFor example:\n\nA matrix-like structure can be used in cases where you need to store data in **row-column** format. \nFor example, \nwhen creating a ticketing program, \nthe seat numbers can be stored in a matrix, \nwith their corresponding rows and numbers.\n???????????????????????????\n\nThe code above outputs the 3rd item of the 2nd row.","668b3b77":"# if Statements","32099422":"You can use if statements to run code if a certain condition holds.\nIf an expression evaluates to True, some statements are carried out. Otherwise, they aren't carried out.\nAn if statement looks like this:\n\n> if expression:\n>    statements\n\nPython uses indentation (white space at the beginning of a line) to delimit blocks of code. Depending on program's logic, indentation can be mandatory. As you can see, the statements in the if should be indented.\n\nThe expression determines whether 10 is greater than 5. Since it is, the indented statement runs, and \"10 greater than 5\" is output. Then, the unindented statement, which is not part of the if statement, is run, and \"Program ended\" is displayed.\n\nNotice the colon at the end of the expression in the if statement.","36078671":"else Statements\n\n\nThe if statement allows you to check a condition and run some statements, if the condition is True.\nThe else statement can be used to run some statements when the condition of the if statement is False.\n\nAs with if statements, the code inside the block should be indented.\n\nNotice the colon after the else keyword.","545c41c8":"# Multiple Operators&Conditions","9a69499a":"Boolean Not\n\n\nUnlike other operators we've seen so far, not only takes one argument, and inverts it.\nThe result of not True is False, and not False goes to True\n\nYou can chain multiple conditional statements in an if statement using the Boolean operators."}}