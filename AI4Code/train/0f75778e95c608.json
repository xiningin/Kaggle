{"cell_type":{"b701633e":"code","5778afbb":"code","cad868a8":"code","7416e7f3":"code","28682c73":"code","deb5baff":"code","f1666487":"code","1d61beba":"code","5231616f":"code","dd6c2dca":"code","1bc195fa":"code","4c704d46":"code","99ca9886":"code","2c35ae2c":"code","28f97011":"code","aa197430":"code","45e43509":"code","f81577dc":"code","be3ccbda":"code","8374332d":"code","12c1d38f":"code","c596e9cb":"code","0275701b":"code","0568b4a1":"code","91963243":"code","22fbbaf1":"code","9fbd83b1":"code","913fd03c":"code","2d81e026":"code","6c012dca":"code","16b3ffaa":"code","e7ff145d":"code","f6574c5b":"code","42304232":"code","68b6cb0d":"code","7926d241":"code","6d194ac2":"code","5a605e3a":"code","2cd9cf5c":"code","779a22bd":"code","9febb073":"markdown","13a55c2c":"markdown","b5a70f09":"markdown"},"source":{"b701633e":"# importing some of the libraries which we will use. \nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics # used for measuring the accuracy of model","5778afbb":"# Reading our csv file\ndf =pd.read_csv('\/kaggle\/input\/housedata\/data.csv')\ndf.head()","cad868a8":"# no missing values in our dataset\n\ndf.isna().sum()","7416e7f3":"# This states that we have 2 rows which is having 0 as a value in bedroom and bathroom category and 49 rows which contains 0 as a value in price category which is not possible \ndf[df==0].count()","28682c73":"#co-relation between the different features\ndf.corr()","deb5baff":"# for determining rows and columns\ndf.shape","f1666487":"# we are dropping some of the columns which we will not use further. \ndf.drop(['date','street','city','statezip','country'],axis=1,inplace=True)\ndf.head()","1d61beba":"# I am dropping rows in price column in order to increase the model accuracy\ndf.drop(df[df['price'] == 0].index, inplace = True)\ndf","5231616f":"df.drop(df[df['bedrooms'] == 0].index, inplace = True)\ndf","dd6c2dca":"# similarly with the bathrooms column \ndf.drop(df[df['bathrooms'] == 0].index, inplace = True)\ndf","1bc195fa":"#Now we have no rows which has 0 value in price , bedrooms and bathroom column (removed because its not possible)\ndf[df==0].count()","4c704d46":"#For detection of outliers in price column\nsns.boxplot(x=df['price'])","99ca9886":"# Using IQR method for outlier detection and correction\nQ1_price = df.price.quantile(0.25)\nQ3_price = df.price.quantile(0.75)\nIQR_price =Q3_price- Q1_price ","2c35ae2c":"lower_limit_price= Q1_price - 1.5*IQR_price\nupper_limit_price= Q3_price + 1.5*IQR_price","28f97011":"# Outliers\ndf[(df.price<lower_limit_price)|(df.price>upper_limit_price)]","aa197430":"#our new df after removing outliers from price column\nnew_df = df[(df.price>lower_limit_price)&(df.price<upper_limit_price)]\nnew_df","45e43509":"# for visulaizing outliers\nsns.boxplot(x=df['sqft_living'])","f81577dc":"Q1_sqft_living = df.sqft_living.quantile(0.25)\nQ3_sqft_living = df.sqft_living.quantile(0.75)\nIQR_sqft_living =Q3_sqft_living- Q1_sqft_living\nlower_limit_sqft_living= Q1_sqft_living - 1.5*IQR_sqft_living\nupper_limit_sqft_living= Q3_sqft_living + 1.5*IQR_sqft_living","be3ccbda":"#outliers\ndf[(df.sqft_living<lower_limit_sqft_living)|(df.sqft_living>upper_limit_sqft_living)]","8374332d":"# our new df after removing outliers from sqft_living column\nnew_df2 = new_df[(new_df.sqft_living>lower_limit_sqft_living)&(new_df.sqft_living<upper_limit_sqft_living)]\nnew_df2","12c1d38f":"#for visualizing outliers in sqft_lot cokumn \nsns.boxplot(x=df['sqft_lot'])","c596e9cb":"Q1_sqft_lot = df.sqft_lot.quantile(0.25)\nQ3_sqft_lot = df.sqft_lot.quantile(0.75)\nIQR_sqft_lot =Q3_sqft_lot- Q1_sqft_lot\nlower_limit_sqft_lot= Q1_sqft_lot - 1.5*IQR_sqft_lot\nupper_limit_sqft_lot= Q3_sqft_lot + 1.5*IQR_sqft_lot","0275701b":"#outliers\ndf[(df.sqft_lot<lower_limit_sqft_lot)|(df.sqft_lot>upper_limit_sqft_lot)]","0568b4a1":"# our new df after removing outliers from sqft_lot column\nnew_df3 = new_df2[(new_df2.sqft_lot>lower_limit_sqft_lot)&(new_df2.sqft_lot<upper_limit_sqft_lot)]\nnew_df3","91963243":"#for visualizing outliers in sqft_above column\nsns.boxplot(x=df['sqft_above'])","22fbbaf1":"#our new df after dropping outliers from sqft_above column\nQ1_sqft_above = df.sqft_above.quantile(0.25)\nQ3_sqft_above = df.sqft_above.quantile(0.75)\nIQR_sqft_above =Q3_sqft_above- Q1_sqft_above\nlower_limit_sqft_above= Q1_sqft_above - 1.5*IQR_sqft_above\nupper_limit_sqft_above= Q3_sqft_above + 1.5*IQR_sqft_above\nnew_df4 = new_df3[(new_df3.sqft_above>lower_limit_sqft_above)&(new_df3.sqft_above<upper_limit_sqft_above)]\nnew_df4","9fbd83b1":"# for visualizing outliers in sqft_basement column \nsns.boxplot(x=df['sqft_basement'])                              ","913fd03c":"# our new df after dropping outliers from sqft_basement column\nQ1_sqft_basement = df.sqft_basement.quantile(0.25)\nQ3_sqft_basement = df.sqft_basement.quantile(0.75)\nIQR_sqft_basement =Q3_sqft_basement- Q1_sqft_basement\nlower_limit_sqft_basement= Q1_sqft_basement - 1.5*IQR_sqft_basement\nupper_limit_sqft_basement= Q3_sqft_basement + 1.5*IQR_sqft_basement\nfinal_df = new_df4[(new_df4.sqft_basement>lower_limit_sqft_basement)&(new_df4.sqft_basement<upper_limit_sqft_basement)]\nfinal_df","2d81e026":"# Independent variables in x \nx=final_df.drop('price', axis=1)\nx","6c012dca":"# target variable (Dependent variable) will be in y\ny=final_df['price']\ny\n","16b3ffaa":"# Here i will split my dataset into trainning dataset and testing dataset!\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.3)","e7ff145d":"# now we will make a object\nobj =LinearRegression()","f6574c5b":"#now we will train our model with the help of fit function \nobj.fit(x_train, y_train)","42304232":"# These are the coefficents or we can say the value of m for eacch independent variable\nobj.coef_","68b6cb0d":"# this is our intercept value\nobj.intercept_","7926d241":"# we will predict the values using predict function. we will get predicted values \nprediction = obj.predict(x_test)\nprediction","6d194ac2":"# Note: the actual values are stored  in y_test and predicted values in prediction variable\n# we will use the regplot in order to visualize\n# Advantage of using regplot over scatter plot is we dont have to write extra code for the line generation in graph.\nsns.regplot(y_test, prediction, color='Blue')","5a605e3a":"# We are calculating mean squared error in our model andstoring it into MSE variable\nMSE = metrics.mean_squared_error(y_test, prediction)\nMSE","2cd9cf5c":"# now for root mean squared error i.e. RMSE we will just square root our previous result using numpy\nRMSE= np.sqrt(MSE)\nRMSE","779a22bd":"# for model accuracy we can use score function\nmodel_accuracy =obj.score(x_train, y_train)\nprint(model_accuracy)\n","9febb073":"## Which  means my model has 46% of accuracy which is  the bad one.","13a55c2c":"# House_price_prediction\n## Dataset source - Kaggle\n### Machine learning multiple linear regression model","b5a70f09":"## This graph shows that how our actual values and predicted values are distanced from each other"}}