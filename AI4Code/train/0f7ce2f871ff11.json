{"cell_type":{"67f33a5e":"code","d82783dc":"code","bea662bd":"code","d6d5ce82":"code","11152b2a":"code","c3a27e2f":"code","fcdd47ca":"code","ffbb1218":"code","a3cb91b0":"code","7f452e75":"code","d51ec58e":"code","965e721d":"code","a49f522c":"code","eb5ad46e":"code","7b671ba7":"code","10bc9e03":"code","b7a522c0":"code","c5df066d":"code","09b98284":"code","26c71f01":"code","9820cfb6":"code","8cdc0f97":"code","43c130c2":"code","88abbe99":"code","192705ef":"code","2894312e":"code","1a557db5":"code","706ca194":"code","3d32738f":"code","a6deae7a":"code","b94ed374":"code","41c606c6":"code","e0c3e3ce":"code","a03f067a":"code","92ce6b19":"markdown","f9473609":"markdown","e37d6c55":"markdown","1b58cc42":"markdown","03c49e44":"markdown","97e40872":"markdown","90c925fb":"markdown","95abe5a6":"markdown","a12f052b":"markdown","fa040c28":"markdown","f2f5a808":"markdown","c0d0b878":"markdown","c08b2ba0":"markdown","e4fe766e":"markdown","65accc6c":"markdown","c5d863ab":"markdown","9a9591bb":"markdown","9fef5718":"markdown"},"source":{"67f33a5e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\nsns.set(style='whitegrid')\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\n","d82783dc":"diamond_data = pd.read_csv('..\/input\/diamonds\/diamonds.csv')","bea662bd":"diamond_data.shape","d6d5ce82":"diamond_data.info()","11152b2a":"diamond_data.describe()","c3a27e2f":"diamond_data.head()","fcdd47ca":"diamond_data = diamond_data.drop([\"Unnamed: 0\"],axis=1)\ndiamond_data.head()","ffbb1218":"print(\"Number of rows with x == 0: {} \".format((diamond_data.x==0).sum()))\nprint(\"Number of rows with y == 0: {} \".format((diamond_data.y==0).sum()))\nprint(\"Number of rows with z == 0: {} \".format((diamond_data.z==0).sum()))\nprint(\"Number of rows with depth == 0: {} \".format((diamond_data.depth==0).sum()))","a3cb91b0":"diamond_data[['x','y','z']] = diamond_data[['x','y','z']].replace(0,np.NaN)\ndiamond_data.isnull().sum()","7f452e75":"diamond_data.dropna(inplace=True)\ndiamond_data.isnull().sum()","d51ec58e":"diamond_data['volume'] = diamond_data['x']*diamond_data['y']*diamond_data['z']\ndiamond_data.drop(['x', 'y', 'z'], axis=1, inplace=True)\ndiamond_data.head()","965e721d":"sns.pairplot(diamond_data)","a49f522c":"diamond_data.plot(kind='box',figsize=(15,10),subplots=True,layout=(3,3))\nplt.show()","eb5ad46e":"def outliers(var):\n    a = []\n    q1 = diamond_data[var].quantile(.25)\n    q2 = diamond_data[var].quantile(.5)\n    q3 = diamond_data[var].quantile(.75)\n    iqr = q3-q1\n    ulim = float(q3+(1.5*iqr))\n    llim = float(q1-(1.5*iqr))\n\n    for i in diamond_data[var]:\n        if i > ulim:\n            i = np.NaN\n        elif i < llim:\n            i = np.NaN\n        else:\n            i=i\n        a.append(i)\n    return a\n\nfor col in diamond_data.select_dtypes(exclude='object').columns:\n    diamond_data[col] = outliers(col)","7b671ba7":"for i in diamond_data.select_dtypes(exclude='object').columns:\n    diamond_data[i] = diamond_data[i].fillna(diamond_data[i].mean())","10bc9e03":"diamond_data.isnull().sum()","b7a522c0":"sns.scatterplot(data=diamond_data, x=diamond_data['volume'], y=diamond_data['carat'])","c5df066d":"numerical_cols = diamond_data.select_dtypes(include=np.number).columns.to_list()\ncategorical_cols = diamond_data.select_dtypes(exclude=np.number).columns.to_list()","09b98284":"numerical_cols","26c71f01":"categorical_cols","9820cfb6":"diamond_data['cut'].value_counts()","8cdc0f97":"diamond_data['color'].value_counts()","43c130c2":"diamond_data['cut'].value_counts()","88abbe99":"sns.catplot('clarity', data=diamond_data, kind='count',aspect=2.5)","192705ef":"from sklearn import preprocessing \nlabel_encoder = preprocessing.LabelEncoder() \n\ndiamond_data['cut'] = label_encoder.fit_transform(diamond_data['cut'])\ndiamond_data['color'] = label_encoder.fit_transform(diamond_data['color'])\ndiamond_data['clarity'] = label_encoder.fit_transform(diamond_data['clarity'])\ndiamond_data.head()","2894312e":"X = diamond_data.drop(['price'],1)\ny = diamond_data['price']","1a557db5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,random_state=142)","706ca194":"regr = LinearRegression()\nmodel = regr.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\nprint(\"RMSE: {}\".format(np.sqrt(mean_squared_error((y_test),(y_pred)))))\nprint(\"R2  : {}\".format(np.sqrt(r2_score((y_test),(y_pred)))))","3d32738f":"rr  = RandomForestRegressor()\nrr.fit(X_train,y_train)\ny_pred = rr.predict(X_test)\n\nprint(\"RMSE: {}\".format(np.sqrt(mean_squared_error((y_test),(y_pred)))))\nprint(\"R2  : {}\".format(np.sqrt(r2_score((y_test),(y_pred)))))","a6deae7a":"n_estimators = [int(x) for x in np.linspace(10,200,10)]\nmax_depth = [int(x) for x in np.linspace(10,100,10)]\nmin_samples_split = [2,3,4,5,10]\nmin_samples_leaf = [1,2,4,10,15,20]\nrandom_grid = {'n_estimators':n_estimators,'max_depth':max_depth,\n               'min_samples_split':min_samples_split,'min_samples_leaf':min_samples_leaf}\n\nrandom_grid","b94ed374":"rf = RandomForestRegressor()\nrf_random = RandomizedSearchCV(estimator=rf,\n                               param_distributions=random_grid,\n                               cv = 3)\n\nrf_random.fit(X_train,y_train)\ny_pred = rf_random.predict(X_test)\n\nprint(\"RMSE: {}\".format(np.sqrt(mean_squared_error((y_test),(y_pred)))))\nprint(\"R2  : {}\".format(np.sqrt(r2_score((y_test),(y_pred)))))","41c606c6":"rf_random.best_params_","e0c3e3ce":"rf = RandomForestRegressor(n_estimators=73,\n                         min_samples_split=3,\n                         min_samples_leaf=4,\n                         max_depth=40)\nrf.fit(X_train,y_train)\ny_pred = rf.predict(X_test)\n\nprint(\"RMSE: {}\".format(np.sqrt(mean_squared_error((y_test),(y_pred)))))\nprint(\"R2  : {}\".format(np.sqrt(r2_score((y_test),(y_pred)))))","a03f067a":"output = pd.Series(y_pred)\noutput.to_csv('Final Output.csv')","92ce6b19":"## Linear Regression Model","f9473609":"## Segregating Features and Labels","e37d6c55":"## Analysing Numerical and Categorical data","1b58cc42":"## Outlier Analysis","03c49e44":"## Data Visualization","97e40872":"### Check 0 and Null values","90c925fb":"### Import required libraries","95abe5a6":"### Deleting the Index row","a12f052b":"## Improving results by using RandomForestRegressor","fa040c28":"### Train-Test split","f2f5a808":"### Import the dataset","c0d0b878":"### Improving results using GridSearchCV","c08b2ba0":"## Data Cleaning and Pre-processing","e4fe766e":"### Label Encoding categorical data","65accc6c":"### Save Final Output","c5d863ab":"## Regression Analysis on Diamonds Dataset\n\nRegression is a statistical method used in finance, investing, and other disciplines that attempts to determine the strength and character of the relationship between one dependent variable (usually denoted by Y) and a series of other variables (known as independent variables).\n\n![types of regression](https:\/\/miro.medium.com\/max\/688\/0*Yfz5JM6W3a36FLD8.png)\n\n\nAbout the data - \n* price price in US dollars (\\\\$326--\\$18,823)\n* carat weight of the diamond (0.2--5.01)\n* cut quality of the cut (Fair, Good, Very Good, Premium, Ideal)\n* color diamond colour, from J (worst) to D (best)\n* clarity a measurement of how clear the diamond is (I1 (worst), SI2, SI1, VS2, VS1, VVS2, VVS1, IF (best))\n* x length in mm (0--10.74)\n* y width in mm (0--58.9)\n* z depth in mm (0--31.8)\n* depth total depth percentage = z \/ mean(x, y) = 2 * z \/ (x + y) (43--79)\n* table width of top of diamond relative to widest point (43--95)","9a9591bb":"## High Level Overview of data","9fef5718":"### Function to remove outliers"}}