{"cell_type":{"559eeb2b":"code","88be462b":"code","52d9a433":"code","7c08f40a":"code","1dafe293":"code","8dbff830":"code","4082e0f9":"code","6b81770a":"code","fc14cef2":"code","f336e351":"code","967b6f51":"code","5fab959e":"code","16bdb022":"code","c6d2baf7":"code","bccccde8":"code","d7377c4b":"code","f7e2e3de":"code","9574fb01":"code","a2e4fa37":"code","fa212589":"code","9ff43cb5":"code","40ba2957":"code","414249d2":"code","6ee29e1c":"code","e1d35a7f":"code","ac8b1354":"code","b9456957":"code","90715979":"code","26f59cab":"code","af5f5e1f":"code","613acbd3":"code","9bfd495e":"code","d92f6289":"code","d02c56d5":"code","680075da":"code","0c645899":"code","fe46d508":"code","f0fd5771":"code","f71b7382":"code","1fd7458e":"code","308d47c4":"code","8e3a8b1b":"code","a793e807":"code","46f75e37":"code","bc7b44e9":"markdown","4fab82a5":"markdown","83ae1f54":"markdown","eeabccbf":"markdown","65e38e36":"markdown","24c8423d":"markdown","5d9009ea":"markdown","3d733f20":"markdown","5ccf95a0":"markdown","a4a59006":"markdown","e367cd2f":"markdown","4336edc4":"markdown","ad3e7ae0":"markdown","1e5cb3f8":"markdown"},"source":{"559eeb2b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","88be462b":"# load packages\nimport networkx as nx  #make graphs for complex network\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport math as math\nimport seaborn as sns\nimport time\nimport plotly.graph_objects as go\n\nfrom termcolor import colored\n#plt.style.use('seaborn')\n#plt.rcParams['figure.figsize'] = [14,14]\n\n# load data\ndf= pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")","52d9a433":"# \u89c2\u6d4b\u70b9\u548c\u53d8\u91cf\u6570\u91cf\ndf.shape","7c08f40a":"# \u6570\u636e\u4fe1\u606f\ndf.info()","1dafe293":"# \u7f3a\u5931\u503c\u6982\u89c8\ndf.isnull().sum()","8dbff830":"# \u7f3a\u5931\u6bd4\u4f8b\ndf.isnull().sum()\/(len(df))*100","4082e0f9":"# \u8f6c\u5316 datetime\ndf[\"date_added\"] = pd.to_datetime(df['date_added'])\ndf['year'] = df['date_added'].dt.year\ndf['month'] = df['date_added'].dt.month\ndf['day'] = df['date_added'].dt.day","6b81770a":"# \u5e74\u7f3a\u5931\u503c\u5904\u7406  \u67e5\u770b\u6570\u91cf\ndf.year.value_counts()","fc14cef2":"df.year.isnull().sum()","f336e351":"df.year.fillna(2019,inplace= True)\ndf.year.value_counts()","967b6f51":"df.month.value_counts()","5fab959e":"df.month.fillna(7,inplace = True)\ndf.day.value_counts()","16bdb022":"df.day.fillna(1,inplace = True)\ndf.isnull().sum()","c6d2baf7":"df.rating.value_counts()","bccccde8":"df.rating.fillna(\"TV-MA\", inplace = True)\ndf.isnull().sum()","d7377c4b":"# df[df.duration.isnull()]\ndf_durnull_index = df[df.duration.isnull()]\ndf_durnull_index","f7e2e3de":"df.loc[5541, 'duration']  = \"74 min\" \ndf.loc[5794, 'duration']  = \"84 min\" \ndf.loc[5813, 'duration']  = \"66 min\" \n# \u68c0\u67e5\u662f\u5426\u586b\u5145\u6210\u529f\ndf.loc[[5541,5794,5813],:]","9574fb01":"df.isnull().sum()","a2e4fa37":"df.country.value_counts()","fa212589":"df.country.fillna(\"United States\",inplace = True)\ndf.country.value_counts()","9ff43cb5":"df.isnull().sum()","40ba2957":"#df.to_csv('P:\/py\/netflix\/netflix_new.csv')","414249d2":"#load new data\n\ndf = pd.read_csv(\"..\/input\/netflix-newcsv\/netflix_new.csv\")\ndf.head()","6ee29e1c":"df_content = df['year'].value_counts().reset_index().rename(columns = {\n    'year' : 'count', 'index' : 'year'}).sort_values('year')\ndf_content['percent'] = df_content['count'].apply(lambda x : 100*x\/sum(df_content['count']))\n\n\ndf_tv1 = df[df.type == \"TV Show\"]['year'].value_counts().reset_index().rename(columns = {\n    'year' : 'count', 'index' : 'year'}).sort_values('year')\ndf_tv1['percent'] = df_tv1['count'].apply(lambda x : 100*x\/sum(df_tv1['count']))\n\n\ndf_movies1 = df[df.type == \"Movie\"]['year'].value_counts().reset_index().rename(columns = {\n    'year' : 'count', 'index' : 'year'}).sort_values('year')\ndf_movies1['percent'] = df_movies1['count'].apply(lambda x : 100*x\/sum(df_movies1['count']))\n\nt1 = go.Scatter(x=df_movies1['year'], y=df_movies1[\"count\"], name=\"Movies\", marker=dict(color=\"#a678de\"))\nt2 = go.Scatter(x=df_tv1['year'], y=df_tv1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#6ad49b\"))\nt3 = go.Scatter(x=df_content['year'], y=df_content[\"count\"], name=\"Total Contents\", marker=dict(color=\"brown\"))\n\ndata = [t1, t2, t3]\n\nlayout = go.Layout(title=\"\u6bcf\u5e74\u4f5c\u54c1\u6570\u91cf\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","e1d35a7f":"# \u6708\u4efd\u540d\u79f0\ndf[\"date_added\"] = pd.to_datetime(df['date_added'])\ndf['month_name']=df['date_added'].dt.month_name()\n\ndf_content = df[['month','month_name']].value_counts().reset_index().rename(columns = {\n    0 : 'count'}).sort_values('month').drop('month',axis=1)\ndf_content['percent'] = df_content['count'].apply(lambda x : 100*x\/sum(df_content['count']))\n\n\ndf_tv2 = df[df.type == \"TV Show\"][['month','month_name']].value_counts().reset_index().rename(columns = {\n    0 : 'count'}).sort_values('month').drop('month',axis=1)\ndf_tv2['percent'] = df_tv2['count'].apply(lambda x : 100*x\/sum(df_tv2['count']))\n\n\ndf_movies2 = df[df.type == \"Movie\"][['month','month_name']].value_counts().reset_index().rename(columns = {\n    0 : 'count'}).sort_values('month').drop('month',axis=1)\ndf_movies2['percent'] = df_movies2['count'].apply(lambda x : 100*x\/sum(df_movies2['count']))\n\nt1 = go.Scatter(x=df_movies2['month_name'], y=df_movies2[\"count\"], name=\"Movies\", marker=dict(color=\"#a678de\"))\nt2 = go.Scatter(x=df_tv2['month_name'], y=df_tv2[\"count\"], name=\"TV Shows\", marker=dict(color=\"#6ad49b\"))\nt3 = go.Scatter(x=df_content['month_name'], y=df_content[\"count\"], name=\"Total Contents\", marker=dict(color=\"Brown\"))\n\n\ndata = [t1, t2, t3]\n\nlayout = go.Layout(title=\"\u6bcf\u6708\u4f5c\u54c1\u6570\u91cf\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","ac8b1354":"# \u6700\u8001\u768415\u90e8\u4f5c\u54c1\n\nsmall = df.sort_values(\"release_year\", ascending = True)\nsmall[['title', \"release_year\"]][:15]","b9456957":"df_movie = df[df.type == \"Movie\"]\ndf_tv = df[df.type == \"TV Show\"]","90715979":"from collections import Counter\ncol = \"listed_in\"\ncategories = \", \".join(df_tv['listed_in']).split(\", \")\ncounter_list = Counter(categories).most_common(50)\nlabels = [_[0] for _ in counter_list][::-1]\nvalues = [_[1] for _ in counter_list][::-1]\ntrace1 = go.Bar(y=labels, x=values, orientation=\"h\", name=\"TV Shows\", marker=dict(color=\"#a678de\"))\n\ndata = [trace1]\nlayout = go.Layout(title=\"\u6bcf\u7c7b\u7535\u89c6\u5267\u6570\u91cf\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","26f59cab":"col = \"listed_in\"\ncategories = \", \".join(df_movie['listed_in']).split(\", \")\ncounter_list = Counter(categories).most_common(50)\nlabels = [_[0] for _ in counter_list][::-1]\nvalues = [_[1] for _ in counter_list][::-1]\ntrace1 = go.Bar(y=labels, x=values, orientation=\"h\", name=\"TV Shows\", marker=dict(color=\"#a678de\"))\n\ndata = [trace1]\nlayout = go.Layout(title=\"\u6bcf\u7c7b\u7535\u5f71\u6570\u91cf\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","af5f5e1f":"# \u5c06listed_in \u4e2d\u7684\u5173\u952e\u5b57\u63d0\u53d6\u51fa\u6765\uff0c\u4f5c\u4e3a\u4f5c\u54c1\u7c7b\u578b\ndf['genre']= df['listed_in'].apply(lambda x :  x.replace(' ,',',').replace(', ',',').split(',')) \nTypes = []\nfor i in df['genre']: Types += i\nTypes = set(Types)   # \u4f7f\u7528\u96c6\u5408\u53bb\u9664\u91cd\u590d\u503c","613acbd3":"from sklearn.preprocessing import MultiLabelBinarizer \n\ndef relation_heatmap(df, title):    \n    test = df['genre']\n    mlb = MultiLabelBinarizer()\n    res = pd.DataFrame(mlb.fit_transform(test), columns=mlb.classes_, index=test.index)\n    corr = res.corr()\n    mask = np.zeros_like(corr, dtype=np.bool)\n    mask[np.triu_indices_from(mask)] = True\n    fig, ax = plt.subplots(figsize=(10, 7))\n    pl = sns.heatmap(corr, mask=mask, cmap= \"coolwarm\", vmax=.5, vmin=-.5, center=0, square=True, linewidths=.7,\n                     cbar_kws={\"shrink\": 0.6})\n    \n    plt.show()","9bfd495e":"df_movie = df[df.type == \"Movie\"]\nrelation_heatmap(df_movie, 'Movie')\nrelation_heatmap(df[df.type == \"TV Show\"], 'TV Show')","d92f6289":"col = \"rating\"\n\nvc1 = df_movie[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = df_tv[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Rating count of MOvie and TV show\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","d02c56d5":"import plotly.express as px\n\nRatings = df['rating'].value_counts()\nVisualization = px.funnel(Ratings,title='Types of Rating on Netflix')\nVisualization.show()","680075da":"l = list(df_durnull_index.index)\ndf.loc[l,'rating'] = \"TV-MA\"\ndf.loc[l]","0c645899":"rating_order_movie =  ['G', 'TV-Y', 'TV-G', 'PG', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'PG-13', 'TV-14', 'R', 'NC-17', 'TV-MA']\nrating_order_tv =  ['TV-Y', 'TV-G', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'TV-14', 'R', 'TV-MA']\nmovie_rating = df_movie['rating'].value_counts()[rating_order_movie]\ntv_rating = df_tv['rating'].value_counts()[rating_order_tv]\n\ndef rating_barplot(data, title, height, h_lim=None):\n    fig, ax = plt.subplots(1,1, figsize=(15, 7))\n    if h_lim :\n        ax.set_ylim(0, h_lim)\n    ax.bar(data.index, data,  color=\"#d0d0d0\", width=0.6, edgecolor='black')\n\n    color =  ['green',  'blue',  'orange',  'red']\n    span_range = [[0, 2], [3,  6], [7, 8], [9, 11]]\n\n    for idx, sub_title in enumerate(['Little Kids', 'Older Kids', 'Teens', 'Mature']):\n        ax.annotate(sub_title,\n                    xy=(sum(span_range[idx])\/2 ,height),\n                    xytext=(0,0), textcoords='offset points',\n                    va=\"center\", ha=\"center\",\n                    color=\"w\", fontsize=16, fontweight='bold',\n                    bbox=dict(boxstyle='round4', pad=0.4, color=color[idx], alpha=0.6))\n        ax.axvspan(span_range[idx][0]-0.4,span_range[idx][1]+0.4,  color=color[idx], alpha=0.1)\n\n    ax.set_title(f'Distribution of {title} Rating', fontsize=20, fontweight='bold', position=(0.5, 1.0+0.03))\n    plt.show()","fe46d508":"rating_barplot(movie_rating,'Movie', 1200)\nrating_barplot(tv_rating,'TV Show' , 700, 800)","f0fd5771":"ratings_ages = {\n    'TV-PG': 'Older Kids',\n    'TV-MA': 'Adults',\n    'TV-Y7-FV': 'Older Kids',\n    'TV-Y7': 'Older Kids',\n    'TV-14': 'Teens',\n    'R': 'Adults',\n    'TV-Y': 'Kids',\n    'NR': 'Adults',\n    'PG-13': 'Teens',\n    'TV-G': 'Kids',\n    'PG': 'Older Kids',\n    'G': 'Kids',\n    'UR': 'Adults',\n    'NC-17': 'Adults'\n}\ndf['target_ages'] = df['rating'].replace(ratings_ages)\ndf['target_ages'].unique()\nRatings = df['target_ages'].value_counts()\nVisualization = px.funnel(Ratings,title='Types of Target Audience on Netflix')\nVisualization.show()","f71b7382":"df['country'].value_counts().sort_values(ascending=False).iloc[1:21].plot(kind='barh', figsize=(15,15))\nplt.grid()\nplt.show()","1fd7458e":"from collections import Counter\ndef country_trace(country, flag = \"movie\"):\n    df[\"from_us\"] = df['country'].fillna(\"\").apply(lambda x : 1 if country.lower() in x.lower() else 0)\n    small = df[df[\"from_us\"] == 1]\n    if flag == \"movie\":\n        small = small[small[\"duration\"] != \"\"]\n    else:\n        small = small[small[\"season_count\"] != \"\"]\n    cast = \", \".join(small['cast'].fillna(\"\")).split(\", \")\n    tags = Counter(cast).most_common(25)\n    tags = [_ for _ in tags if \"\" != _[0]]\n\n    labels, values = [_[0]+\"  \" for _ in tags], [_[1] for _ in tags]\n    trace = go.Bar(y=labels[::-1], x=values[::-1], orientation=\"h\", name=\"\", marker=dict(color=\"#a678de\"))\n    return trace\n\nfrom plotly.subplots import make_subplots\ntraces = []\ntitles = [\"United States\", \"\",\"India\",\"\", \"United Kingdom\", \"Canada\",\"\", \"Spain\",\"\", \"Japan\"]\nfor title in titles:\n    if title != \"\":\n        traces.append(country_trace(title))\n\nfig = make_subplots(rows=2, cols=5, subplot_titles=titles)\nfig.add_trace(traces[0], 1,1)\nfig.add_trace(traces[1], 1,3)\nfig.add_trace(traces[2], 1,5)\nfig.add_trace(traces[3], 2,1)\nfig.add_trace(traces[4], 2,3)\nfig.add_trace(traces[5], 2,5)\n\nfig.update_layout(height=1200, showlegend=False)\nfig.show()","308d47c4":"from wordcloud import WordCloud,STOPWORDS\n\ntext=' '.join(df_movie['listed_in'])\n\nplt.rcParams['figure.figsize']=(15,15)\nwordcloud=WordCloud(background_color='black', colormap='vlag', width=1200, height=1200, max_words=121).generate(text)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","8e3a8b1b":"text=' '.join(df_tv['listed_in'])\n\nplt.rcParams['figure.figsize']=(15,15)\nwordcloud=WordCloud(background_color='black', colormap='vlag', width=1200, height=1200, max_words=121).generate(text)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","a793e807":"text=' '.join(df_movie['title'])\n\nplt.rcParams['figure.figsize']=(15,15)\nwordcloud=WordCloud(background_color='black', colormap='vlag', width=1200, height=1200, max_words=121).generate(text)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","46f75e37":"text=' '.join(df_tv['title'])\n\nplt.rcParams['figure.figsize']=(15,15)\nwordcloud=WordCloud(background_color='black', colormap='vlag', width=1200, height=1200, max_words=121).generate(text)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","bc7b44e9":"### Country","4fab82a5":"\u53d1\u73b03\u90e8\u7535\u5f71\u7684rating \u662f\u5176duration\u65f6\u95f4\uff0c\u8bf4\u660e\uff0c\u539f\u59cb\u6570\u636e\u4e2d\u90e8\u5206\u89c2\u6d4b\u70b9\u4e24\u5217\u6570\u636e\u6df7\u6dc6\u3002\u540e\u7eed\u5bf9\u5176\u8fdb\u884c\u5904\u7406\u3002","83ae1f54":"## \u6570\u636e\u53ef\u89c6\u5316","eeabccbf":"### \u4f5c\u54c1\u540d\u79f0","65e38e36":"\u5c06\u5904\u7406\u540e\u7684\u6570\u636e\u751f\u6210netflix_new.csv ","24c8423d":"### genre \u4f5c\u54c1\u7c7b\u578b\n\u70ed\u529b\u56fe\u67e5\u770b\u5404\u4e2a\u7c7b\u578b\u4e4b\u95f4\u7684\u76f8\u5173\u5173\u7cfb","5d9009ea":"### Rating\n\u7f8e\u56fd\u5f71\u89c6\u534f\u4f1a\u7684\u8bc4\u7ea7","3d733f20":"> \u672c\u9879\u76ee\u4e3a\u5927\u6570\u636e\u5206\u6790\u8bfe\u7a0b\u62a5\u544a\uff0c\u591a\u4e3a\u53ef\u89c6\u5316\u8fc7\u7a0b\uff0c\u5176\u4e2d\u53c2\u8003kaggle\u4e2d Netflix Movies and TV Shows \u9879\u76ee\u4e2d\u7684\u9ad8\u8d5e\u53ef\u89c6\u5316\u9879\u76ee\uff0c\u540e\u7eed\u4f1a\u9488\u5bf9\u4ee3\u7801\u8bed\u53e5\u6dfb\u52a0\u66f4\u591a\u4e2d\u6587\u6ce8\u89e3\n","5ccf95a0":"\u53d1\u73b0duration\u7f3a\u5931\u503c\u7684\u7f3a\u5931\u503c\u90fd\u662f\u7535\u5f71\uff0c\u4e14\u5bfc\u6f14\u90fd\u662fLouis C.K.,\u5bf9\u8be5\u5bfc\u6f14\u7684\u4f5c\u54c1\u8fdb\u884c\u67e5\u8be2\u53d1\u73b0\uff0c\u4e09\u90e8\u4f5c\u54c1\u7684\u65f6\u95f4\u5206\u522b\u4e3a 74min\u3001 84min\u300166min\uff0c\u5206\u522b\u8fdb\u884c\u586b\u5145","a4a59006":"    \u7535\u89c6\u5267\u7684\u4e3b\u8981\u53d7\u4f17\u662f\u5e74\u8f7b\u4eba\uff0c\u7535\u5f71\u7684\u53d7\u4f17\u66f4\u8303\u56f4\u66f4\u5e7f\u6cdb\uff0c\u4f46\u4e3b\u8981\u9762\u5411\u7fa4\u4f53\u662f\u6210\u5e74\u4eba\u3002\n","e367cd2f":"## \u6570\u636e\u6e05\u6d17\n\n\u65f6\u95f4\u6570\u636e\u8f6c\u6362\u3001\u7f3a\u5931\u503c\u5904\u7406","4336edc4":"### Description\n","ad3e7ae0":"## \u6570\u636e\u6982\u8ff0","1e5cb3f8":"### \u6bcf\u5e74\u3001\u6bcf\u6708\u7684\u4e0d\u540c\u79cd\u7c7b\u4f5c\u54c1\u6570\u91cf"}}