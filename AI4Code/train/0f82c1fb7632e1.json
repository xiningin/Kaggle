{"cell_type":{"917868ad":"code","6f74b9c8":"code","42b939c9":"code","b8a0e0ba":"code","a46abaac":"code","f8593cc1":"code","a4516c99":"code","4c90c2ca":"code","45b5bed2":"code","0d60bc7f":"code","df795b0b":"code","c040e79a":"code","37ee49e1":"code","5a5e4a50":"code","b7803e12":"code","f3ec205b":"code","37537a88":"code","a4459831":"code","f72b4e60":"markdown"},"source":{"917868ad":"import numpy as np # Numpy: biblioteca para manipular vetores e matrizes\nimport pandas as pd # Pandas: biblioteca para manipular tabelas","6f74b9c8":"data = pd.read_csv('\/kaggle\/input\/data-science-challenge-at-ita-2021-warm-up\/warmupv4publictrain.csv')\nprint(data.shape)","42b939c9":"print(data.head())","b8a0e0ba":"X = data.drop(columns=['sd_trans'])\ny = data.sd_trans\nprint(X.shape)","a46abaac":"num_cols = X.columns[X.dtypes == 'float64']\ncat_cols = X.columns[X.dtypes == 'object']","f8593cc1":"# Semente aleat\u00f3ria para reproducibilidade dos experimentos (reproduc\u00e3o dos experimentos)\nseed = 17","a4516c99":"from sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neural_network import MLPRegressor\n\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler, OneHotEncoder\nfrom sklearn.feature_selection import VarianceThreshold, SelectKBest\nfrom sklearn.decomposition import PCA\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.model_selection import GridSearchCV, KFold\nfrom sklearn.metrics import mean_squared_error, mean_absolute_percentage_error\nfrom sklearn.metrics import make_scorer","4c90c2ca":"scorer = make_scorer(mean_absolute_percentage_error, greater_is_better=False)\n\ncv = KFold(n_splits=10, shuffle=True, random_state=seed)\ngscv = KFold(n_splits=3, shuffle=True, random_state=seed)\n\nonehot = OneHotEncoder(sparse=False, handle_unknown=\"ignore\")\nimputer = SimpleImputer(strategy='mean')\nscaler = MinMaxScaler(feature_range=(0, 1))\n\ncat_cols = X.columns\ntransformer = ColumnTransformer([\n    ('cat_cols', onehot, cat_cols),\n    ('num_cols', Pipeline([('imputer', imputer), ('scaler', scaler)]), num_cols)\n])\n\nalgorithms = {\n    # Descomente para testar outros algoritmos\n    #'kNN':  GridSearchCV(\n    #    Pipeline([\n    #        ('transformer', transformer),\n    #        ('selector', VarianceThreshold()),\n    #        ('knn', KNeighborsRegressor())]), \n    #    param_grid={\n    #        'selector__threshold': [0, 0.01, 0.02, 0.03],\n    #        'knn__n_neighbors': [1, 3, 5],\n    #        'knn__p': [1, 2],\n    #    },\n    #    scoring=scorer,\n    #    cv=gscv),\n    'svmrbf': GridSearchCV(\n        Pipeline([\n            ('transformer', transformer),\n            ('svm', SVR(kernel='rbf'))]), \n        param_grid={\n            'svm__C': [1.0, 2.0],\n            'svm__gamma': [0.1, 1.0, 2.0],\n        },\n        scoring=scorer,\n        cv=gscv),\n    #'svmrbf+pca': GridSearchCV(\n    #    Pipeline([\n    #        ('transformer', transformer),\n    #        ('pca', PCA(random_state=seed)),\n    #        ('svm', SVR(kernel='rbf'))]), \n    #    param_grid={\n    #        #'pca__n_components': [2, 5, 10],\n    #        'svm__C': [1.0, 2.0],\n    #        'svm__gamma': [0.1, 1.0, 2.0],\n    #    },\n    #    scoring=scorer,\n    #    cv=gscv),\n    'nn': GridSearchCV(\n        Pipeline([\n            ('transformer', transformer),\n            ('mlp', MLPRegressor(hidden_layer_sizes=(30, 30), random_state=seed, max_iter=100))]), \n        param_grid={\n            'mlp__activation': ['logistic', 'tanh', 'relu']\n        },\n        scoring=scorer,\n        cv=gscv),\n}","45b5bed2":"from sklearn.model_selection import cross_val_score\n\nresult = {}\nfor alg, clf in algorithms.items():\n  result[alg] = -cross_val_score(clf, X, y, cv=cv, scoring=scorer, n_jobs=-1)\n\nresult = pd.DataFrame.from_dict(result)","0d60bc7f":"print(result)","df795b0b":"result.apply(lambda x: \"{:.2f} \u00b1 {:.2f}\".format(x.mean(), x.std()))","c040e79a":"import matplotlib.pyplot as plt\n\nplt.boxplot([ scores for alg, scores in result.iteritems() ])\nplt.xticks(1 + np.arange(result.shape[1]), result.columns)\nplt.show()","37ee49e1":"clf = algorithms['nn']\nprint(clf)","5a5e4a50":"best = clf.fit(X, y)","b7803e12":"data = pd.read_csv('\/kaggle\/input\/data-science-challenge-at-ita-2021-warm-up\/warmupv4publictest.csv')\nXtest = data.drop(columns=['id'])","f3ec205b":"ytest = best.predict(Xtest)","37537a88":"data['sd_trans'] = y","a4459831":"data[['id', 'sd_trans']] #.to_csv('warmupv4submission.csv', index=False)","f72b4e60":"# Avalia\u00e7\u00e3o e valida\u00e7\u00e3o de experimentos\n"}}