{"cell_type":{"c876c0fe":"code","1ed30ae2":"code","54c20384":"code","2918d57a":"code","b9ed83de":"code","eb567a80":"code","10ebaa0e":"code","c9800200":"code","48458daa":"code","0732c93c":"code","a38efb81":"code","3725855c":"code","3b240366":"code","1922c599":"code","5d71e855":"code","20737b70":"code","a7da0e96":"code","bc07d072":"code","b1b3d442":"code","a4ba66a6":"code","dedb5795":"code","6b976f07":"code","885f2db5":"code","c7cb8ace":"code","c68880e1":"code","c373351f":"code","984ea883":"code","e0e0339b":"code","a450492b":"code","2766f702":"code","44d24b21":"code","74e2bc28":"code","4854f992":"code","22cc3638":"code","75f3b5dc":"code","d0ee7c8f":"code","d7849898":"code","08d14dcd":"code","e262b071":"code","6e19c98b":"code","59c81b99":"code","386f8c90":"code","ea4959c5":"code","57089596":"code","ff0e9382":"code","55bfee45":"markdown","2b4eac1e":"markdown","de868f44":"markdown","7fbe65a2":"markdown","2137f226":"markdown","d27f6b7a":"markdown","d5c5d136":"markdown","84ecf020":"markdown","3def2ed1":"markdown","b93f1a98":"markdown","d84aa744":"markdown","0c5f1f74":"markdown","6bfc867f":"markdown","50fb9cee":"markdown","04e3dc8a":"markdown","ac717ae9":"markdown","98ef2b39":"markdown","4cfce8c4":"markdown","45643f49":"markdown","bd72ae29":"markdown","a6cb5cf1":"markdown","6f4101d9":"markdown","3da9c41f":"markdown","5de6f5c4":"markdown","e5cc8879":"markdown","73c24f4d":"markdown","a150be33":"markdown","170a9aba":"markdown","3418487d":"markdown","9017d9d7":"markdown","b5e56233":"markdown","02d8f836":"markdown"},"source":{"c876c0fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1ed30ae2":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","54c20384":"train_data.head()","2918d57a":"import seaborn as sns\ndisplay(train_data[['Sex','Survived']].groupby('Sex').mean())\nsns.catplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", kind=\"bar\", data=train_data)","b9ed83de":"sns.violinplot(x=\"Sex\", y=\"Age\",hue=\"Survived\", data=train_data, split=False, s=5)","eb567a80":"train_data['Age'].hist(bins=20,color='darkred',alpha=0.7)","10ebaa0e":"# Let's have a look on the train and test data\n\nprint(\"The total number of rows and columns in train data is: \", train_data.shape,\"\\n\")\nprint(\"\\nMissing values in train data:\\n \\n\",train_data.isnull().sum(),\"\\n\")\nprint(\"\\n\\nThe total number of rows and columns in test data is: \", test_data.shape)\nprint(\"\\nMissing values in test data:\\n \\n\",test_data.isnull().sum())","c9800200":"# Let's look at the missing values in the dataset with the help of heatmaps.\n# The yellow lines represent the NaN(Not a Number) values or missing values.\n\nimport matplotlib.pyplot as plt \nplt.figure(figsize=(10,10))\nprint(\"Train data\",sns.heatmap(train_data.isnull(),cmap = 'viridis'))","48458daa":"plt.figure(figsize=(10,10))\nprint(\"Test data\",sns.heatmap(test_data.isnull(),cmap = 'viridis'))","0732c93c":"# Extract all the titles\ntrain_data['Title'] = train_data['Name'].str.split(',').str[1].str.split('.').str[0].str.strip()\ntest_data['Title'] = test_data['Name'].str.split(',').str[1].str.split('.').str[0].str.strip()","a38efb81":"pd.set_option(\"display.max_rows\", None, \"display.max_columns\", None)","3725855c":"display(\"Train data Titles\",train_data.groupby(['Title'])['Age'].agg(['mean','count']))\ndisplay(\"Test data Titles\",test_data.groupby(['Title'])['Age'].agg(['mean','count']))","3b240366":"# The mean age of passengers with 'Ms' title returns a missing value.\n# We see that there is only one passenger who has this title and her age is missing.\n# This explains it. But let's not bother about that right now.\ntest_data[test_data['Title']=='Ms']","1922c599":"titles = {\"Capt\": \"Officer\",\"Col\": \"Officer\",\"Major\": \"Officer\",\"Jonkheer\": \"Royalty\", \\\n             \"Don\": \"Royalty\", \"Dona\": \"Royalty\", \"Sir\" : \"Royalty\",\"Dr\": \"Royalty\",\"Rev\": \"Royalty\", \\\n             \"the Countess\":\"Royalty\", \"Mme\": \"Mrs\", \"Mlle\": \"Miss\", \"Ms\": \"Mrs\",\"Mr\" : \"Mr\", \\\n             \"Mrs\" : \"Mrs\",\"Miss\" : \"Miss\",\"Master\" : \"Master\",\"Lady\" : \"Royalty\"}","5d71e855":"train_data['Title'] = train_data['Title'].map(titles)\ntrain_data.groupby(['Title'])['Age'].agg(['mean','count'])","20737b70":"test_data['Title'] = test_data['Title'].map(titles)\ntest_data.groupby(['Title'])['Age'].agg(['mean','count'])","a7da0e96":"# Determining the age of females using 'Miss' title and 'Parch'\n\nall_miss = train_data[train_data.Title==\"Miss\"]['Age']\n\nfem_adult = train_data[(train_data.Title==\"Miss\") & (train_data.Parch==0)]['Age']\n\nfem_child = train_data[(train_data.Title==\"Miss\") & (train_data.Parch!=0)]['Age']\n\nprint (\"Average age of 'Miss' Title\", all_miss.mean())\n\nprint (\"Average age of 'Miss' Title travelling without Parents\", fem_adult.mean())\n\nprint (\"Average age of 'Miss' Title travelling with Parents\", fem_child.mean())","bc07d072":"# Separating Titles for female children and adults\nfor i in train_data[(train_data.Title==\"Miss\") & (train_data.Parch==0)]['PassengerId']:\n    train_data.loc[i-1,'Title'] = \"Miss_adult\"\n    \nfor i in train_data[(train_data.Title==\"Miss\") & (train_data.Parch!=0)]['PassengerId']:\n    train_data.loc[i-1,'Title'] = \"Miss_child\"\n","b1b3d442":"train_data.groupby(['Title'])['Age'].agg(['mean','count'])","a4ba66a6":"# # Let's separate the tites in test data as well\nfor i in (test_data[(test_data.Title==\"Miss\") & (test_data.Parch==0)]['PassengerId']):\n    test_data.loc[i-892,'Title'] = \"Miss_adult\" # (i-892) as the PssengerId starts from 892\n    \nfor i in test_data[(test_data.Title==\"Miss\") & (test_data.Parch!=0)]['PassengerId']:\n    test_data.loc[i-892,'Title'] = \"Miss_child\"\n","dedb5795":"test_data.groupby(['Title'])['Age'].agg(['mean','count'])","6b976f07":"# Filling train data with the mean ages of their groups\ntrain_data.Age.fillna(train_data.groupby('Title').Age.transform(np.mean), inplace=True)","885f2db5":"# Let's check\ntrain_data.isnull().sum()","c7cb8ace":"# Filling test data with the mean ages of respective groups of train data to prevent test train leakage\ntest_data.Age.fillna(train_data.groupby('Title').Age.transform(np.mean), inplace=True)","c68880e1":"test_data.isnull().sum()","c373351f":"# Dropping 'Cabin' column from train data\ntrain_data.drop('Cabin', axis=1, inplace=True);","984ea883":"# Dropping 'Cabin' column from test data\ntest_data.drop('Cabin', axis=1, inplace=True);","e0e0339b":"train_data['Embarked'].describe()","a450492b":"train_data.fillna('S', inplace=True);","2766f702":"test_data.fillna(test_data['Fare'].mean(),inplace=True);","44d24b21":"print(\"Train data\",sns.heatmap(train_data.isnull()))","74e2bc28":"print(\"Test data\",sns.heatmap(test_data.isnull()))","4854f992":"X = train_data.drop(columns = ['Survived','PassengerId'])\ny = train_data['Survived']\nX_test = test_data.drop('PassengerId',axis=1)","22cc3638":"# Let's see how it looks\nX.head()","75f3b5dc":"# Look at the data type of the columns. Our machine learning model can easily \n# handle 'int' and 'float' (numerical) values but not 'object' (categorical) values\nX.info()","d0ee7c8f":"# Hence we need to encode the categorical columns  \n# We'll make a function to select the columns with low cardinality as labels with \n# high cardinality lead to poor performance\n\ndef encoder(df):\n    # Select categorical columns\n    categorical_cols = [col for col in df.columns if\n                        df[col].nunique() < 10 and \n                        df[col].dtype == \"object\"]\n\n    # Select numerical columns\n    numerical_cols = [col for col in df.columns if \n                    df[col].dtype in ['int64', 'float64']]\n\n    # To keep only the required columns\n    df = df[numerical_cols + categorical_cols].copy()\n    return df","d7849898":"# Applying the above function\nX = encoder(X)\nX_test = encoder(X_test)","08d14dcd":"X_test.head()","e262b071":"# Using get_dummies function to convert categorical columns to dummy variables\nX = pd.get_dummies( X, columns = ['Sex','Embarked','Title'], drop_first=True )\nX.head()","6e19c98b":"X_test = pd.get_dummies( X_test, columns = ['Sex','Embarked','Title'], drop_first=True )\nX_test.head()","59c81b99":"from sklearn.linear_model import LogisticRegressionCV\nmodel = LogisticRegressionCV(max_iter = 10000 , cv= 5, random_state=45, solver = 'liblinear')","386f8c90":"model.fit(X,y)","ea4959c5":"pred_y = model.predict(X_test)\npred_y","57089596":"test_data['Survived'] = pd.DataFrame(pred_y)","ff0e9382":"test_data[['PassengerId','Survived']].to_csv(\"Sub1.csv\",index=False)","55bfee45":"### 2. Calculating the mean ages","2b4eac1e":"Below are all the titles in our train and test set","de868f44":"# Dealing with the missing values","7fbe65a2":"Let's replace the titles of adult females and children","2137f226":"Great!! All null values have been fixed. ","d27f6b7a":"We've also seen that there are 2 missing values in 'Embarked' column in train set and 1 missing value in 'Fare' column. We'll fill the 'Embarked' with the most frequent port and 'Fare' with the average fare.","d5c5d136":"Now, it's easy to determine the adult males and male  children with their titles 'Mr' and 'Master' respectively. But the titles of adult unmarried females and the female children is same, 'Miss'. One way to separate them is to consider that the females travelling without parents and children are more likely to be adults. While the females travelling with their parents are children.","84ecf020":"Label Encoding refers to converting the categorical labels into numeric form so as to convert it into the machine-readable form.","3def2ed1":"## Dropping some missing values","b93f1a98":"Perfect!","d84aa744":"The below chart shows that more female passengers survived as compared to males","0c5f1f74":"But there's a one more problem to deal with. Since the chilren had higher survival than adults(as we saw in EDA), it'd be really unfair if use the mean age of adults to fill in the ages of children.","6bfc867f":"Our next step is dealing with this missing data and you must be aware that we can do that in following ways:\n1. Listwise deletion - It means deleting all data from any participant with missing values which is not possible here with 177 and 687 values missing in 'Age' and 'Cabin' column respectively. If we remove these rows we will lose 77.1% data. Although we can remove 2 rows containing missing values from 'Embarked' column.\n2. Imputation - It means filling in the missing values by the average or median age of the rest of the passengers. But we have to calculate the mean ages of all the males, females and children(male an female) separately as we just saw that females have high survivl rate. If we impute the 'Age' column with the mean age of all the passengers, it may lead to underfitting.","50fb9cee":"Since a lot of rows in 'Cabin' are missing and there's no point imputing it as it'll lead to unnecessary overfitting, we'll drop that column.","04e3dc8a":"# EXPLORATORY DATA ANALYSIS","ac717ae9":"### Let's begin with importing datasets and assigning it to separate variables.","98ef2b39":"We've fixed the 'Age' column let's look at other columns","4cfce8c4":"Perfect!!","45643f49":"# FITTING MODELS","bd72ae29":"# DATA CLEANING","a6cb5cf1":"Now that we've grouped the people with similar ages and genders, we can not find their  mean and fill the missing values with their corresponding means. ","6f4101d9":"Let's also separate the 'Survived' column from the train data and do some Label Encoding","3da9c41f":"The features provided in the data are:\n\n* Passenger Id: An ID given to each traveler on the boat\n* Pclass: The passenger class. It has three possible values: 1,2,3 (first, second and third class)\n* Name : The Name of the passenger\n* Sex\n* Age\n* SibSp: Number of siblings and spouses traveling with the passenger\n* Parch: Number of parents and children traveling with the passenger\n* The ticket number\n* The ticket Fare\n* The cabin number\n* The embarkation. This describe three possible areas of the Titanic from which the people embark. Three possible values S,C,Q","5de6f5c4":"### 1.  Extracting titles from the names of the passenngers","e5cc8879":"Let's map these to reduce the cardinality ang group the similar aged people with different titles together","73c24f4d":"We have to predict the survival or the death of a given passenger based on the features given","a150be33":"Okay we've filled all the rows in Age column of train data with the mean ages of the passengers. It's time to fill the column of test data.","170a9aba":"There are 891 rows and 12 columns in our training dataset that will be used to train the model. Now, the yellow area shows us that the columns 'Age', 'Cabin' and 'Embarked contain missing values.","3418487d":"## Label Encoding","9017d9d7":"Thanks for reading!","b5e56233":"Let's check if it worked","02d8f836":"### 3. Imputing values"}}