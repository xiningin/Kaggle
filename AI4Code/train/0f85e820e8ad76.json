{"cell_type":{"d0b5e102":"code","184f0858":"code","63acca16":"code","c6f47ab3":"code","a6a9bcad":"code","d69ea7f8":"code","4a013da8":"code","7dfdd1e1":"code","abc6e4d4":"code","d8322275":"code","fd83bae9":"code","d63e9718":"code","9186a587":"code","78ae3e32":"code","03456262":"code","0800fcb9":"markdown","e300b7f0":"markdown","0da475fd":"markdown","de875ca5":"markdown"},"source":{"d0b5e102":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","184f0858":"from keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255, shear_range = 0.2, zoom_range=0.2, horizontal_flip=True)\n\n\n\ntraining_set = train_datagen.flow_from_directory('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Train\/',\n                                                 target_size=(127,127),\n                                                 batch_size=32,\n                                                 class_mode='binary')\n","63acca16":"validation_datagen = ImageDataGenerator(rescale = 1.\/255)\nvalidation_set = validation_datagen.flow_from_directory('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Validation\/', target_size = (127,127), batch_size = 32, class_mode = 'binary')","c6f47ab3":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dropout, Conv2D, Flatten, MaxPool2D, Dense, BatchNormalization","a6a9bcad":"cnn = Sequential()","d69ea7f8":"cnn.add(Conv2D(32, activation = 'relu', kernel_size = 3, input_shape = [127,127,3]))\ncnn.add(BatchNormalization())\n\n#cnn.add(Conv2D(32, activation = 'relu', kernel_size = 3))\n#cnn.add(BatchNormalization())\n\n#cnn.add(MaxPool2D(pool_size = (2,2)))\n\n#cnn.add(Conv2D(64, activation = 'relu', kernel_size = 3))\n#cnn.add(BatchNormalization())\n\ncnn.add(Conv2D(64, activation = 'relu', kernel_size = 3))\ncnn.add(BatchNormalization())\n\ncnn.add(MaxPool2D(pool_size = (2,2)))","4a013da8":"cnn.add(Flatten())","7dfdd1e1":"cnn.add(Dense(64, activation = 'relu'))\ncnn.add(Dropout(0.2))\n\ncnn.add(Dense(128, activation = 'relu'))\ncnn.add(Dropout(0.2))\n\ncnn.add(Dense(1, activation = 'sigmoid'))\n\ncnn.compile(optimizer='adam', metrics = 'accuracy', loss = 'binary_crossentropy')","abc6e4d4":"cnn.fit(x=training_set,epochs = 50, validation_data =validation_set)","d8322275":"from keras.preprocessing import image","fd83bae9":"test_image = image.load_img('..\/input\/photom\/aditya-saxena-01R4fryNgUM-unsplash.jpg', target_size = (127,127,3))","d63e9718":"test_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)","9186a587":"answer = cnn.predict_classes(test_image)","78ae3e32":"training_set.class_indices\nif result[0][0]==1:\n    prediction = 'mask'\nelse :\n    prediction = 'unmask'","03456262":"print(prediction)","0800fcb9":"Image Preprocessing","e300b7f0":"You can add the image file path of your choice","0da475fd":"Training the model","de875ca5":"Prediction of single image"}}