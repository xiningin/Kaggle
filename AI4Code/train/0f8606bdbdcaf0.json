{"cell_type":{"9f8abce4":"code","c6bad28c":"code","afd8df44":"code","f0998e89":"code","03c24876":"code","75d62f82":"code","5d58aab9":"code","c8212845":"code","81760ff8":"code","3bb2631f":"code","913046d6":"code","af35dd5a":"code","c1956670":"code","b5287855":"code","91bd46dd":"code","eaf64b2f":"code","e2da11ea":"code","87b465f7":"code","02663e3f":"code","8573a945":"code","5cc61706":"code","5c78b62f":"code","cda0b734":"code","62af031e":"code","e0eae53a":"code","44b65122":"code","eb9bbe5e":"code","2dfd3aab":"code","72fee519":"code","0b74540d":"code","66dd3783":"code","d4b1e854":"code","f5cb56ef":"code","47953b21":"code","38539c62":"markdown","6bd2af45":"markdown"},"source":{"9f8abce4":"from fastai.vision import *\nfrom fastai.metrics import error_rate\nfrom fastai.metrics import fbeta","c6bad28c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        pass\n        #print(os.path.join(dirname, filename)\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","afd8df44":"pathi = Path(\"..\/input\/siic-isic-224x224-images\")","f0998e89":"pathc = Path(\"..\/input\/melanomacsv\")","03c24876":"train = pd.read_csv(pathc\/'train.csv')\ntest = pd.read_csv(pathc\/'test.csv')","75d62f82":"train.head(4)","5d58aab9":"train.target.value_counts()","c8212845":"train['image_name'] = 'train\/' + train['image_name'].astype(str) +'.png'\ntest['image_name'] = 'test\/' + test['image_name'].astype(str) +'.png'","81760ff8":"train.head()","3bb2631f":"test.head()","913046d6":"import warnings\nwarnings.filterwarnings('ignore')","af35dd5a":"labelcol=['image_name','target']\nlabels=train[labelcol]\nlabels.head(4)","c1956670":"pathi","b5287855":"tfms = get_transforms( flip_vert=True, max_rotate=15, max_zoom=1.2, max_lighting=0.3, max_warp=0, p_affine=0, p_lighting=0.8)","91bd46dd":"np.random.seed(42)\ndata = ImageDataBunch.from_df(pathi, labels, ds_tfms=tfms , size=224, bs=48 )\ndata.normalize(imagenet_stats)\ntest_data = ImageList.from_df(test,pathi)\ndata.add_test(test_data)\ndata","eaf64b2f":"data.show_batch(rows=3, figsize=(7,6))","e2da11ea":"print(data.classes)\nlen(data.classes)","87b465f7":"from fastai.metrics import Precision , accuracy , Recall\nfrom  fastai.metrics import AUROC","02663e3f":"pr=Precision()\nre=Recall()\naur=AUROC()","8573a945":"!pip install efficientnet-pytorch\nfrom efficientnet_pytorch import EfficientNet","5cc61706":"model = EfficientNet.from_name('efficientnet-b6')\nmodel._fc = nn.Linear(1280,2)","5c78b62f":"#model = pretrainedmodels.__dict__['resnext101_32x4d'](pretrained=None)","cda0b734":"learn = Learner(data, model , metrics=aur ) ","62af031e":"learn.model.cuda();\nimport torch\ntorch.cuda.device(0)","e0eae53a":"torch.cuda.get_device_name(0)","44b65122":"from fastai.utils.mem import GPUMemTrace\nwith GPUMemTrace():\n    learn.fit_one_cycle(12)","eb9bbe5e":"learn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot()","2dfd3aab":"learn.unfreeze()\nfrom fastai.utils.mem import GPUMemTrace\nwith GPUMemTrace():\n    learn.fit_one_cycle(4,max_lr=slice(3e-5,3e-3))","72fee519":"'''learn.freeze()\nfrom fastai.utils.mem import GPUMemTrace\nwith GPUMemTrace():\n    learn.fit_one_cycle(4,max_lr=slice(3e-5,3e-4))'''","0b74540d":"predictions, *_ = learn.get_preds(DatasetType.Test)\n#labels = np.argmax(predictions, 1)","66dd3783":"ans =predictions[:,1]\nans","d4b1e854":"sub=pd.read_csv(\"..\/input\/submission\/sample_submission.csv\")\nsub","f5cb56ef":"pred=pd.DataFrame(ans)\nsub['target']=pred\nsub.head()","47953b21":"sub.to_csv('densenet201-8-4.csv',index=False)","38539c62":"*UNFREEZE*","6bd2af45":"**TEST**"}}