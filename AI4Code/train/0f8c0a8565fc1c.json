{"cell_type":{"e80614a1":"code","785bb8d3":"code","a2bba031":"code","2ad11dab":"code","4a398bba":"code","649e0d19":"code","3ecad759":"code","0cd1739f":"code","e44c0995":"code","58e9ebda":"code","3381d294":"code","6083ee54":"code","57c09390":"code","25a72f38":"code","806349bb":"code","8ba9393d":"code","2e4444c2":"code","c69df41b":"code","62f494a3":"code","9b5e99b7":"code","b7ce5878":"markdown","db9a1859":"markdown","d03f3d3c":"markdown","ba547e2f":"markdown","1508192f":"markdown","47fdd94b":"markdown","c6e45c19":"markdown","0876246d":"markdown","2c7c06a1":"markdown","58d7207f":"markdown","5bbdcf9f":"markdown","31619ca7":"markdown","e2f3021d":"markdown","bc122157":"markdown","379043ef":"markdown","da4f2f67":"markdown"},"source":{"e80614a1":"import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report","785bb8d3":"kidney_main_df = pd.read_csv('https:\/\/assets.datacamp.com\/production\/repositories\/943\/datasets\/82c231cd41f92325cf33b78aaa360824e6b599b9\/chronic_kidney_disease.csv',header=None)","a2bba031":"kidney_main_df.head()","2ad11dab":"kidney_main_df.columns=['Age','Blood Pressure','Specific Gravity','Albumin','Sugar','Red Blood Cells','Pus Cell', 'Pus Cell clumps', 'Bacteria', 'Blood Glucose Random', 'Blood Urea', 'Serum Creatinine', 'Sodium', 'Potassium', 'Hemoglobin',  'Packed Cell Volume', 'White Blood Cell Count', 'Red Blood Cell Count', 'Hypertension', 'Diabetes Mellitus', 'Coronary Artery Disease', 'Appetite', 'Pedal Edema', 'Anemia', 'Class']","4a398bba":"kidney_main_df.replace('?',np.nan,inplace=True)","649e0d19":"kidney_main_df.describe()","3ecad759":"kidney_main_df.rename(columns={'Class': 'class'}, inplace=True)\nkidney_main_df['class'].replace({'notckd':0,'ckd':1}, inplace=True)\nkidney_main_df['class'].value_counts()","0cd1739f":"shuffled_kidney_dt = kidney_main_df.iloc[np.random.permutation(len(kidney_main_df))]\nkidney_dt_new=shuffled_kidney_dt.reset_index(drop=True)","e44c0995":"kidney_dt_new_target = kidney_dt_new['class'].values\nkidney_dt_new_features = kidney_dt_new.drop(['class'], axis=1)\nkidney_dt_new_features.head()","58e9ebda":"kidney_dt_new_features.dtypes","3381d294":"# Fill missing values with 0\nkidney_dt_without_missing_values = kidney_dt_new_features.fillna(-999)\n\n# Convert df into a dictionary: df_dict\nkidney_dt_new_dict = kidney_dt_without_missing_values.to_dict(\"records\")\n\n# Create the DictVectorizer object: dv\ndv = DictVectorizer(sparse=False)\n\n# Apply dv on df: df_encoded\nkidney_dt_new_encoded = dv.fit_transform(kidney_dt_new_dict)\n\n# Print the resulting first five rows\nprint(kidney_dt_new_encoded)\n\n# Print the vocabulary\nprint(dv.vocabulary_)","6083ee54":"np.isnan(kidney_dt_new_encoded).any()","57c09390":"kidney_dt_new_encoded[0].size","25a72f38":"training_indices, validation_indices = training_indices, testing_indices = train_test_split(kidney_dt_new.index, stratify = kidney_dt_new_target, train_size=0.75, test_size=0.25,random_state=42)\ntraining_indices.size, validation_indices.size","806349bb":"exported_pipeline = make_pipeline(\n    MinMaxScaler(),\n    LinearSVC(C=1.0, dual=True, loss=\"hinge\", penalty=\"l2\", tol=0.001)\n)\n\nexported_pipeline.fit(kidney_dt_new_encoded[training_indices],  kidney_dt_new_target[training_indices])","8ba9393d":"exported_pipeline.score(kidney_dt_new_encoded[validation_indices], kidney_dt_new.loc[validation_indices, 'class'].values)","2e4444c2":"pred = exported_pipeline.predict(kidney_dt_new_encoded[validation_indices])\n\n#Print out the accuracy score on the test set\naccuracy_score(pred, kidney_dt_new.loc[validation_indices, 'class'].values)","c69df41b":"#Print out the confusion matrix on the test set\nconfusion_matrix(pred,kidney_dt_new.loc[validation_indices, 'class'].values)\/len(kidney_dt_new.loc[validation_indices, 'class'].values)","62f494a3":"MSE_CV_scores = -cross_val_score(exported_pipeline,kidney_dt_new_encoded[training_indices], kidney_dt_new_target[training_indices], cv=10, \n                       scoring='neg_mean_squared_error',\n                       n_jobs=-1)\n\n# Compute the 10-folds CV RMSE\nRMSE_CV = (MSE_CV_scores.mean())**(1\/2)\n\n# Print RMSE_CV\nprint('CV RMSE: {:.2f}'.format(RMSE_CV))","9b5e99b7":"classification_report(pred,kidney_dt_new.loc[validation_indices, 'class'].values)","b7ce5878":"We code the categorical variables into numerical values using Scikit-learn's [DictVectorizer](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_extraction.DictVectorizer.html) and treat them as new features.","db9a1859":"Check the contents of the DataFrame using the head() method.","d03f3d3c":"we need to divide our training data into training and validation sets. The validation set is just to give us an idea of the test set error.","ba547e2f":"To give names to the columns of the DataFrame, you can use the attribute columns on the pandas DataFrame and assign it to a list containing the names of the columns.","1508192f":" We store the class labels, which we need to predict in a separate variable then we remove it from the dataset.","47fdd94b":"we Instantiate pur pipeline then fit it to the training set dataset","c6e45c19":"As we can see below, our data variables are in  categorical format so we will code the data to be in numerical format.\n","0876246d":"Replace '?' with NaN","2c7c06a1":"let's now compute the root mean square error (RMSE) of our models which measures, on average, how much the model's predictions differ from the actual labels.","58d7207f":"Keeping in mind that the final dataset is in the form of a numpy array, we can check the number of features in the final dataset as follows.","5bbdcf9f":"The confusion matrix will now be of size 2x2, each row will give the number of predicted cases for classes 1, and 0, and each column - the true number of cases in class 1, and 0. ","31619ca7":"# Kidney disease case\n\nWe will use that [Chronic Kidney Disease](https:\/\/archive.ics.uci.edu\/ml\/datasets\/Chronic_Kidney_Disease\/#)  from **UC Irvine Machine Learning Repository** to predict Chronic Kidney Disease.","e2f3021d":"Use the pandas read_csv() function to read the dataset as a DataFrame.","bc122157":"It's generally a good idea to randomly shuffle the data before starting to avoid any type of ordering in the data. You can rearrange the data in the DataFrame using numpy's random and **permutation**() function. To reset the index numbers after the shuffle use **reset_index()** method with **drop = True** as a parameter.","379043ef":"The accuracy measures the proportion of correctly predicted instances.","da4f2f67":"We change the name of column ('Class') to ('class') then we change its values {'notckd':0,'ckd':1} .\n\nYou can check the counts of each class in the target variable using value_counts() method"}}