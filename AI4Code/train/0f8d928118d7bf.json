{"cell_type":{"ae4e9071":"code","223b12b2":"code","d8c25973":"code","6478319c":"code","6a90e981":"code","f5d8ea22":"code","7301620b":"code","c8244bda":"code","db2a2844":"code","bf64d72a":"code","686ef757":"code","e4a660a5":"code","69eda8c5":"code","21392b00":"markdown","f8ba136b":"markdown","7a242f92":"markdown","c821ebe1":"markdown","fa794bf0":"markdown","b38f305c":"markdown","868fde44":"markdown","45f3ba36":"markdown","7c452575":"markdown","aeea1216":"markdown","0599c0f1":"markdown","4d10c897":"markdown","245736ad":"markdown","44eb5ab7":"markdown","a5043128":"markdown","614dcba7":"markdown","6e2a30de":"markdown","1c471e68":"markdown","33c584c2":"markdown","d6b95e08":"markdown","45938866":"markdown"},"source":{"ae4e9071":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","223b12b2":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n\ntrain_data.head()","d8c25973":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\ntest_data.head()","6478319c":"td = pd.concat([train_data, test_data], ignore_index=True, sort = False) # Concantinate train and test data","6a90e981":"import seaborn as sns # Import Seaborn\n\nimport matplotlib.pyplot as plt\n\ntd.isnull().sum() # Check the number of missing values in the data set\n\nsns.heatmap(td.isnull(), cbar = False).set_title(\"Missing values heatmap\") # Building a heatmap of missing values\n","f5d8ea22":"# Setting up visualisations\nsns.set_style(style='white') \nsns.set(rc={\n    'figure.figsize':(10,5), \n    'axes.facecolor': 'white',\n    'axes.grid': True, 'grid.color': '.9',\n    'axes.linewidth': 1,\n    'grid.linestyle': u'-'},font_scale=1.5)\ncustom_colors = [\"#3498db\", \"#95a5a6\",\"#34495e\", \"#2ecc71\", \"#e74c3c\"]\nsns.set_palette(custom_colors)","7301620b":"td.nunique() # Study number of unique values","c8244bda":"(train_data.Survived.value_counts(normalize=True) * 100).plot.barh().set_title(\"Training Data - Percentage of people survived and Deceased\")","db2a2844":"fig_pclass = train_data.Pclass.value_counts().plot.pie().legend(labels=[\"Class 3\",\"Class 1\",\"Class 2\"], loc='lower right', bbox_to_anchor=(3.25, 0.5)).set_title(\"Training Data - People travelling in different classes\")","bf64d72a":"pclass_1_survivor_distribution = round((train_data[train_data.Pclass == 1].Survived == 1).value_counts()[1]\/len(train_data[train_data.Pclass == 1]) * 100, 2) \npclass_2_survivor_distribution = round((train_data[train_data.Pclass == 2].Survived == 1).value_counts()[1]\/len(train_data[train_data.Pclass == 2]) * 100, 2)\npclass_3_survivor_distribution = round((train_data[train_data.Pclass == 3].Survived == 1).value_counts()[1]\/len(train_data[train_data.Pclass == 3]) * 100, 2)\npclass_perc_df = pd.DataFrame(\n    { \"Percentage Survived\":{\"Class 1\": pclass_1_survivor_distribution,\"Class 2\": pclass_2_survivor_distribution, \"Class 3\": pclass_3_survivor_distribution},  \n     \"Percentage Not Survived\":{\"Class 1\": 100-pclass_1_survivor_distribution,\"Class 2\": 100-pclass_2_survivor_distribution, \"Class 3\": 100-pclass_3_survivor_distribution}})\npclass_perc_df.plot.bar().set_title(\"Training Data - Percentage of people survived on the basis of class\")","686ef757":"for x in [1,2,3]:    ## for 3 classes\n    train_data.Age[train_data.Pclass == x].plot(kind=\"kde\")\nplt.title(\"Age density in classes\")\nplt.legend((\"1st\",\"2nd\",\"3rd\"))","e4a660a5":"for x in [\"male\",\"female\"]:\n    td.Pclass[td.Sex == x].plot(kind=\"kde\")\nplt.title(\"Training Data - Gender density in classes\")\nplt.legend((\"Male\",\"Female\"))","69eda8c5":"pclass_perc_df","21392b00":"# \u0421onclusion","f8ba136b":"# Encoding & dropping columns","7a242f92":"Accourding to the article: [Solving the Kaggle Titanic challenge for beginners](https:\/\/neurohive.io\/ru\/osnovy-data-science\/razbor-resheniya-zadachi-titanik-na-kaggle-dlya-nachinajushhih\/) (rus), [Tip of the Iceberg: EDA & Prediction (0.80861)](https:\/\/www.kaggle.com\/sumukhija\/tip-of-the-iceberg-eda-prediction-0-80861\/notebook) (eng)","c821ebe1":"# Titanic: Machine Learning from Disaster\n\n### 1. Getting the hang of the data","fa794bf0":"### 6. Parch","b38f305c":"### 3. Sex","868fde44":"### 2. Missing values","45f3ba36":"### 8. Fare","7c452575":"### 2. Pclass","aeea1216":"### 3. Cabin","0599c0f1":"# Prediction","4d10c897":"### 4. Age","245736ad":"### 5. SibSp","44eb5ab7":"### 10. Embarked","a5043128":"# Features\n\n### 1. Survived","614dcba7":"### 7. Ticket","6e2a30de":"### 2. Age","1c471e68":"### 3. Number of unique values","33c584c2":"# Data Imputation\n\n### 1. Embarked","d6b95e08":"### 9. Cabin","45938866":"Read the article (rus): [Titanic on Kaggle: You Won't Read This Post to the End](https:\/\/habr.com\/ru\/company\/mlclass\/blog\/270973\/)"}}