{"cell_type":{"f854b7c5":"code","0e2b8535":"code","51438107":"code","1133a638":"code","4d4da0f5":"code","9dce3131":"code","94e0ab3a":"code","0d100a69":"code","f620ec1e":"code","0426f302":"code","b2920ece":"code","bc2f09cc":"code","3e8eddcd":"code","13c30650":"code","ee602142":"code","fe3ea052":"code","d379d68c":"code","5711395f":"code","05e69122":"code","0f105f27":"code","456acf4e":"code","21554743":"code","cdfb1251":"code","a884b323":"code","84149776":"code","b2626080":"code","482ccdc1":"code","898a3720":"code","c204473d":"markdown"},"source":{"f854b7c5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0e2b8535":"train = pd.read_csv('..\/input\/av-healthcare-analytics-ii\/healthcare\/train_data.csv')\ntest = pd.read_csv('..\/input\/av-healthcare-analytics-ii\/healthcare\/test_data.csv')","51438107":"train.head()","1133a638":"train.info()","4d4da0f5":"features_with_na=[features for features in train.columns if train[features].isnull().sum()>1]\n## 2- step print the feature name and the percentage of missing values\n\nfor feature in features_with_na:\n    print(feature, np.round(train[feature].isnull().mean(), 4),  ' % missing values')","9dce3131":"test.isnull().sum().sort_values(ascending= False)","94e0ab3a":"train.shape","0d100a69":"test.shape","f620ec1e":"for i in train.columns:\n  print(i,' : ' , train[i].nunique())","0426f302":"for i in test.columns:\n  print(i,' : ' , test[i].nunique())","b2920ece":"train['Bed Grade'].fillna(train['Bed Grade'].mode()[0], inplace = True)\ntest['Bed Grade'].fillna(test['Bed Grade'].mode()[0], inplace = True)","bc2f09cc":"train['City_Code_Patient'].fillna(train['City_Code_Patient'].mode()[0], inplace = True)\ntest['City_Code_Patient'].fillna(test['City_Code_Patient'].mode()[0], inplace = True)","3e8eddcd":"test['Stay'] = -1\ndf = pd.concat([train, test])\ndf.shape","13c30650":"from sklearn.preprocessing import LabelEncoder\n\nfor i in ['Hospital_type_code', 'Hospital_region_code', 'Department', 'Ward_Type', 'Ward_Facility_Code', 'Type of Admission', 'Severity of Illness', 'Age']:\n    le = LabelEncoder()\n    df[i] = le.fit_transform(df[i].astype('str'))","ee602142":"train = df[df['Stay']!=-1]\ntest = df[df['Stay']==-1]","fe3ea052":"le = LabelEncoder()\ntrain['Stay'] = le.fit_transform(train['Stay'].astype('str'))","d379d68c":"def get_countid_enocde(train, test, cols, name):\n  temp = train.groupby(cols)['case_id'].count().reset_index().rename(columns = {'case_id': name})\n  temp2 = test.groupby(cols)['case_id'].count().reset_index().rename(columns = {'case_id': name})\n  train = pd.merge(train, temp, how='left', on= cols)\n  test = pd.merge(test,temp2, how='left', on= cols)\n  train[name] = train[name].astype('float')\n  test[name] = test[name].astype('float')\n  train[name].fillna(np.median(temp[name]), inplace = True)\n  test[name].fillna(np.median(temp2[name]), inplace = True)\n  return train, test","5711395f":"train, test = get_countid_enocde(train, test, ['patientid'], name = 'count_id_patient')\ntrain, test = get_countid_enocde(train, test, ['patientid', 'Hospital_region_code'], name = 'count_id_patient_hospitalCode')\ntrain, test = get_countid_enocde(train, test, ['patientid', 'Ward_Facility_Code'], name = 'count_id_patient_wardfacilityCode')","05e69122":"train.head()","0f105f27":"test = test.drop(['Stay', 'patientid', 'Hospital_region_code', 'Ward_Facility_Code'], axis =1)\ntrain = train.drop(['case_id', 'patientid', 'Hospital_region_code', 'Ward_Facility_Code'], axis =1)","456acf4e":"import xgboost\nclassifier=xgboost.XGBClassifier(max_depth=4, learning_rate=0.1, n_estimators=800, objective='multi:softmax',reg_alpha=0.5, reg_lambda=1.5,\n                                 booster='gbtree', n_jobs=4, min_child_weight=2, base_score= 0.75)","21554743":"X = train.drop('Stay', axis =1)\ny = train['Stay']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size =0.25, random_state =100)","cdfb1251":"classifier.fit(X_train, y_train)","a884b323":"prediction=classifier.predict(X_test)\nfrom sklearn.metrics import confusion_matrix,accuracy_score\ncm=confusion_matrix(prediction,y_test)\nacc_score=accuracy_score(prediction,y_test)\nprint(acc_score*100)","84149776":"pred = classifier.predict(test.iloc[:,1:])\nsubmissions = pd.DataFrame(pred, columns=['Stay'])\nsubmissions['case_id'] = test['case_id']\nsubmissions = submissions[['case_id', 'Stay']]","b2626080":"submissions['Stay'] = submissions['Stay'].replace({0:'0-10', 1: '11-20', 2: '21-30', 3:'31-40', 4: '41-50', 5: '51-60', 6: '61-70', 7: '71-80', 8: '81-90', 9: '91-100', 10: 'More than 100 Days'})","482ccdc1":"submissions.head()","898a3720":"#from google.colab import files\n#submissions.to_csv('submissions_new2.csv', index=False) \n#files.download('submissions_new2.csv')","c204473d":"###Predictions"}}