{"cell_type":{"989fdcd7":"code","9fc87356":"code","814d627a":"code","00139a4d":"code","7f7dc210":"code","75d5d5c3":"code","b60b164a":"markdown","fff3816a":"markdown","7205211a":"markdown","3b8f2c48":"markdown","b8bb0b2d":"markdown","c45b5451":"markdown"},"source":{"989fdcd7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as pyplot\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9fc87356":"data = pd.read_csv(\"\/kaggle\/input\/cannabis-strains\/cannabis.csv\")","814d627a":"flavors_and_effects = {}\n\nfor d in range(len(data)-1):\n    try:\n        if data.iloc[d][\"Flavor\"] != \"None\" and data.iloc[d][\"Effects\"] != \"None\":\n            for f in data.iloc[d][\"Flavor\"].split(\",\"):\n                if f not in flavors_and_effects:\n                    flavors_and_effects[f] = {}\n                    flavors_and_effects[f][\"timesAppeared\"] = 1\n                    for e in data.iloc[d][\"Effects\"].split(\",\"):\n                        if e not in flavors_and_effects[f]:\n                            flavors_and_effects[f][e] = 1\n                        else:\n                            flavors_and_effects[f][e] += 1\n                else:\n                    flavors_and_effects[f][\"timesAppeared\"] += 1\n                    for e in data.iloc[d][\"Effects\"].split(\",\"):\n                        if e not in flavors_and_effects[f]:\n                            flavors_and_effects[f][e] = 1\n                        else:\n                            flavors_and_effects[f][e] += 1\n\n    except:\n        pass\n\ndelArr = []\nfor f in flavors_and_effects:\n    if len(flavors_and_effects[f])-1 < 1:\n        delArr.append(f)\nfor a in delArr:\n    del flavors_and_effects[a]\n\nflavors_short_list = [\"Earthy\",\"Sweet\",\"Citrus\", \"Flowery\", \"Diesel\"]\nprint(\"Total Flavors: \", len(flavors_and_effects))\nfor f in flavors_and_effects:\n    if(f in flavors_short_list):\n        print(f)\n        print(\"* Total Effects: \", len(flavors_and_effects[f])-1)\n        for e in flavors_and_effects[f]:\n            if e == \"timesAppeared\":\n                print(\"*\",e, \": \", flavors_and_effects[f][e])\n            else:\n                print(\"*\",e, \": \", flavors_and_effects[f][e],\"--\",(flavors_and_effects[f][e] \/ flavors_and_effects[f][\"timesAppeared\"])*100, \"%\")","00139a4d":"effects_and_flavors = {}\n\nfor d in range(len(data)-1):\n    try:\n        if data.iloc[d][\"Flavor\"] != \"None\" and data.iloc[d][\"Effects\"] != \"None\":\n            for f in data.iloc[d][\"Effects\"].split(\",\"):\n                if f not in effects_and_flavors:\n                    effects_and_flavors[f] = {}\n                    effects_and_flavors[f][\"timesAppeared\"] = 1\n                    for e in data.iloc[d][\"Flavor\"].split(\",\"):\n                        if e not in effects_and_flavors[f]:\n                            effects_and_flavors[f][e] = 1\n                        else:\n                            effects_and_flavors[f][e] += 1\n                else:\n                    effects_and_flavors[f][\"timesAppeared\"] += 1\n                    for e in data.iloc[d][\"Flavor\"].split(\",\"):\n                        if e not in effects_and_flavors[f]:\n                            effects_and_flavors[f][e] = 1\n                        else:\n                            effects_and_flavors[f][e] += 1\n\n    except:\n        pass\n\ndelArr = []\nfor f in effects_and_flavors:\n    if len(effects_and_flavors[f])-1 < 1:\n        delArr.append(f)\nfor a in delArr:\n    del effects_and_flavors[a]\n\nprint(\"Total Effects: \", len(effects_and_flavors))\nfor f in effects_and_flavors:\n    print(f)\n    print(\"* Total Flavors: \", len(effects_and_flavors[f])-1)\n    for e in effects_and_flavors[f]:\n        if effects_and_flavors[f][e] \/ effects_and_flavors[f][\"timesAppeared\"] > 0.5:\n            if e == \"timesAppeared\":\n                print(\"*\",e, \": \", effects_and_flavors[f][e])\n            else:\n                print(\"**\",e, \": \", effects_and_flavors[f][e],\"--\",(effects_and_flavors[f][e] \/ effects_and_flavors[f][\"timesAppeared\"])*100, \"%\")","7f7dc210":"for f in flavors_and_effects:\n    if flavors_and_effects[f][\"Relaxed\"] \/ flavors_and_effects[f][\"timesAppeared\"] < 0.60:\n        print(f)\n        print(\"* Total Effects: \", len(flavors_and_effects[f])-1)\n        for e in flavors_and_effects[f]:\n            if e == \"timesAppeared\":\n                print(\"*\",e, \": \", flavors_and_effects[f][e])\n            else:\n                print(\"*\",e, \": \", flavors_and_effects[f][e],\"--\",(flavors_and_effects[f][e] \/ flavors_and_effects[f][\"timesAppeared\"])*100, \"%\")","75d5d5c3":"pyplot.figure(figsize=(20,20))\nfor f in flavors_and_effects:\n    for e in flavors_and_effects[f]:\n        if e not in [\"timesAppeared\",\"Dry\",\"Mouth\"]:\n            pyplot.scatter(e,f,flavors_and_effects[f][e], alpha=0.8)\n\npyplot.show()","b60b164a":"lettuce make a scatter graph to show how strongly each flavor correlates to each effect. \n\nSome flavors definitely have a lesser chance of being paired with the relaxed effect. these flavors also had a lesser chance of being tied to any effect, though. These flavors are probably more rare. This graph basically says that the flavors earthy and sweet and the effects euphoric, relaxed, happy and uplifted are more common.","fff3816a":"This information alone isnt going to be good at answering my question. I realize that now.","7205211a":"Can we tell what effects a particular bud will have given its flavor profile?\n\nThe biggest problem I see with using strain names to determine what effects a bud will have is that there is more biodiversity within strains than I think we realize.\n\nMaybe there is a correlation between a bud's effects and its smell, taste, and physical appearance. If there is any kind of correlation found here, it may be worth it to gather individual reports on a bud's observable properties.\n\nThis dataset includes the effects without any indication of how many people had these effects. The leafly website shows the percentage of people who reported certain properties. Obviously, not everyone has the same effects after consumption of the same strain. This may be because of the plant's biodiversity and\/or because different consumers interact with the plant differently.","3b8f2c48":"What flavors may not signify a decent possibility of a relaxing effect? None of them. Relaxed was paired with each flavor at leaste 58% of the time.","b8bb0b2d":"I think I will start by counting how many times an effect comes up for each flavor. Im only printing flavors on the flavors_shor_list so that the output isn't painfully long. ","c45b5451":"It would appear that some effects consistantly appear more frequantly. Relaxed showes up a lot with most flavors. Weed, in general, is likely to make the consumer feel relaxed. \n\nIt doesnt go the other way around. There seems to be a lot more diversity in flavor profiles than there is in effects."}}