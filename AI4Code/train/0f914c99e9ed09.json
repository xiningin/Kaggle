{"cell_type":{"7607e8e9":"code","c4b0060a":"code","84e426f2":"code","f0275fa8":"code","eba64a09":"code","e212cf96":"code","7aba2dbe":"code","e99367f3":"code","d7d1fe32":"code","113f1c7b":"code","277d563b":"code","a6314cfc":"code","6905cafb":"code","685606ed":"code","62deed66":"code","b818fc28":"code","974c754d":"code","28664726":"code","ccd2b03d":"code","584d1a4d":"code","72474598":"code","88ec30f3":"code","0d21f5fe":"code","2491f4cd":"code","02e6744f":"code","62af6108":"code","e524375e":"code","64421b4a":"code","f234e81d":"code","b12f5803":"markdown","775bd40d":"markdown","75328e9a":"markdown","75a3e5c5":"markdown","ba5c17a1":"markdown","062daad7":"markdown","9a8c7d70":"markdown"},"source":{"7607e8e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4b0060a":"dataset = pd.read_csv('\/kaggle\/input\/natural-gas-price-forecasting\/daily_csv.csv')\ndataset1 = pd.read_csv('\/kaggle\/input\/wti-data\/wti-daily_csv(1).csv')","84e426f2":"dataset.head()\ndataset1.head()","f0275fa8":"dataset.info()\ndataset1.info()","eba64a09":"dataset['year'] = pd.DatetimeIndex(dataset['Date']).year\ndataset['month'] = pd.DatetimeIndex(dataset['Date']).month\ndataset['day'] = pd.DatetimeIndex(dataset['Date']).day\ndataset1['year'] = pd.DatetimeIndex(dataset1['Date']).year\ndataset1['month'] = pd.DatetimeIndex(dataset1['Date']).month\ndataset1['day'] = pd.DatetimeIndex(dataset1['Date']).day","e212cf96":"dataset\ndataset1","7aba2dbe":"dataset.drop('Date', axis=1, inplace=True)\ndataset1.drop('Date', axis=1, inplace=True)","e99367f3":"dataset.isnull().any()\ndataset1.isnull().any()","d7d1fe32":"dataset.isnull().sum()\ndataset1.isnull().sum()","113f1c7b":"dataset['Price'].fillna(dataset['Price'].mean(),inplace=True)\ndataset1['Price'].fillna(dataset1['Price'].mean(),inplace=True)","277d563b":"dataset.isnull().any()\ndataset1.isnull().any()","a6314cfc":"#import the matplotlib library\nimport matplotlib.pyplot as plt\n#plot size\nfig=plt.figure(figsize=(5,5))\nplt.scatter(dataset['day'],dataset['Price'],color='blue')\n#Set the label for the x-axis.\nplt.xlabel('Day')\n#Set the label for the y-axis.\nplt.ylabel('Price')\n#Set a title for the axes.\nplt.title('PRICE OF NATURAL GAS ON THE BASIS OF DAYS OF A MONTH')\n#Place a legend on the axes.\nplt.legend()","6905cafb":"import matplotlib.pyplot as plt\nplt.bar(dataset['month'],dataset['Price'],color='green')\nplt.xlabel('Month')\nplt.ylabel('Price')\nplt.title('PRICE OF NATURAL GAS ON THE BASIS OF MONTHS OF A YEAR')\nplt.legend()","685606ed":"import seaborn as sns\nimport matplotlib.pyplot as plt\nng = sns.lineplot(x='year',y='Price',data=dataset, color=\"r\")\nax2 = plt.twinx()\ncr = sns.lineplot(x='year',y='Price', data=dataset1, color=\"b\", ax=ax2)\nng.set(ylabel='Price ($ per million BTU)')\ncr.set(ylabel='Price ($ per bbl)')\nf = ng.get_figure()\nf.savefig('main.png')\n# sns.lineplot(x='year',y='Price',data=dataset,color='red')\n# sns.lineplot(label=\"Points\", legend=True, data=dataset)\n# sns.lineplot(secondary_y=True, data=dataset)\n# yp = sns.lineplot(x='year',y='Price',data=dataset,color='red')\n# yp.set(xlabel='Year', ylabel='Price ($ per million BTU)')\n# f = yp.get_figure()\n# f.savefig('year.png')","62deed66":"import seaborn as sns\nmo = sns.lineplot(x='month',y='Price',data=dataset,color='red')\nmo.set(xlabel='Month', ylabel='Price ($ per Million BTU)')\n\nfig, axes = plt.subplots(2, 1, figsize=(10, 10))\n\nsns.lineplot(ax=axes[0], data=dataset, x='month', y='Price')\nte = sns.lineplot(ax=axes[1], x=[1,2,3,4,5,6,7,8,9,10,11,12], y=data)\naxes[0].set_ylabel('Price ($ per Million BTU)')\naxes[1].set_ylabel('Temperature (C)')\naxes[1].set_xlabel('month')\naxes[0].set_xlabel('')\nf = mo.get_figure()\ntem = te.get_figure()\ntem.savefig('temP.png')\n# f.subplots_adjust(top=2)\n# ax1 = f.add_subplot(211)\n# ax1.set_ylabel('Temperature')\n# ax2 = fig.add_axes([0.15, 0.1, 0.7, 0.3])\n# f.savefig('o.png')\n# print(dataset)\n\n# fig, (ax1, ax2) = plt.subplots(2, 1)\n# # fig.suptitle('A tale of 2 subplots')\n# # f.plot(dataset, 'o-')\n# ax1.plot(dataset['month'],dataset['Price'], 'o-')\n# ax1.set_ylabel('Price ($ per million BTU)')\n\n# ax2.plot([1,2,3,4,5,6,7,8,9,10,11,12],data, '.-')\n# ax2.set_xlabel('Month')\n# ax2.set_ylabel('Temperature (C)')\n\n# plt.show()","b818fc28":"data = [4.5,5,8.1,13,17.4,21.1,25.9,26.6,22.9,17,12,7]\nplt.plot([1,2,3,4,5,6,7,8,9,10,11,12], data)\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=16)\nplt.savefig('te.png')","974c754d":"import seaborn as sns\nsns.lineplot(x='day',y='Price',data=dataset,color='red')","28664726":"fig=plt.figure(figsize=(8,4))\nplt.scatter(dataset['year'],dataset['Price'],color='purple')\nplt.xlabel('Month')\nplt.ylabel('Price')\nplt.title('PRICE OF NATURAL GAS ON THE BASIS OF MONTHS OF A YEAR')\nplt.legend()","ccd2b03d":"import seaborn as sns\nsns.pairplot(dataset)\nplt.show()","584d1a4d":"x=dataset.iloc[:,1:4].values #inputs\ny=dataset.iloc[:,0:1].values #output price only","72474598":"x","88ec30f3":"y","0d21f5fe":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)","2491f4cd":"x_train.shape","02e6744f":"y_train.shape","62af6108":"#import decision tree regressor\nfrom sklearn.tree import DecisionTreeRegressor\ndtr=DecisionTreeRegressor()\n#fitting the model or training the model\ndtr.fit(x_train,y_train)","e524375e":"y_pred=dtr.predict(x_test)\ny_pred","64421b4a":"from sklearn.metrics import r2_score\naccuracy=r2_score(y_test,y_pred)\naccuracy","f234e81d":"y_p=dtr.predict([[1997,1,7]])\ny_p","b12f5803":"# Checking for null values","775bd40d":"# Data Visualization","75328e9a":"# Droping Columns","75a3e5c5":"# Reading dataset","ba5c17a1":"# **Handling Missing values**","062daad7":"Split data into train and test","9a8c7d70":"Now, Split the dataset into X(independent variable) and Y(dependent variable)"}}