{"cell_type":{"0b8567a9":"code","8a7fd1e5":"code","69518559":"code","13aabc59":"code","848aaf30":"code","77c538be":"code","71f2615a":"code","5ff8647f":"code","0a1d613a":"code","2c03592d":"code","e68537d4":"code","860d3547":"code","0d9c4906":"code","9dcac453":"code","f2662a6b":"code","d9c491c6":"code","bf8a4fc9":"code","4674a95c":"code","59b93787":"code","00e74043":"code","0ac2b3a3":"code","ba8b22f4":"code","e860b8aa":"code","0dbed2c5":"code","0bd314f6":"code","c85d9358":"code","9dbd146c":"code","449a943a":"code","b43cffac":"code","b576fada":"code","ce6363aa":"code","814722ed":"code","d400de98":"code","05a87abb":"code","e5c832f0":"code","ca55af23":"code","55d8f2d9":"code","bb9de667":"code","75c623d8":"code","ef232ad4":"code","a0951d2d":"code","da0da8eb":"code","434a0847":"code","553b533a":"code","765e25f0":"code","4ad0fed1":"code","928bb4e7":"code","5faa3a40":"code","9f9f63ac":"code","51b71975":"code","e9195550":"code","0b2e99b7":"code","0fb23b2d":"code","67325185":"code","bf5744fe":"code","88f17ca0":"code","bc2c96b3":"code","bb1e69cc":"code","b50c2bf9":"code","5300a692":"code","b8094f01":"code","d85ead00":"code","6451525c":"code","68ceeef8":"code","495b38ff":"code","26aaa116":"code","2ffe3147":"code","52341ab1":"code","db9ecc4c":"code","8ca39d52":"code","1562d1c1":"code","9fff422c":"code","8976b653":"code","0640fbc7":"code","7c81730d":"code","19919fcc":"code","e56cc1d3":"code","8e816b1b":"code","970a72fe":"code","13d12909":"code","096502fc":"code","e2e05142":"code","242bd3db":"code","b58562dd":"code","0121b8b1":"code","adec04f9":"code","ecf58beb":"code","bfbd2371":"code","f53f1d36":"code","49e6f7f5":"code","b38ac52f":"code","4ad03463":"code","1ab98d5f":"code","a13705dd":"code","1b8c4d7f":"code","c3fb406f":"code","3d910d66":"markdown","34e87861":"markdown","d2b8e513":"markdown","6586e1fd":"markdown","00da3c5b":"markdown","a389d002":"markdown","b72f46f9":"markdown","442a8b6a":"markdown","65925251":"markdown","217df712":"markdown","eb2ab578":"markdown"},"source":{"0b8567a9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8a7fd1e5":"AQI = pd.read_csv(\"..\/input\/Air Quality Index Prediction.csv\")\naq=AQI.iloc[1::2]\naq","69518559":"aq=aq.reset_index(drop=True)\naq","13aabc59":"aq.isna().sum().sum()","848aaf30":"aq.isna().sum()","77c538be":"aq['PM 2.5'][aq['PM 2.5'].isna()]","71f2615a":"aq['PM 2.5'].mode()","5ff8647f":"aq.iloc[184:185,8:9] = aq.iloc[184:185,8:9].fillna('0')","0a1d613a":"aq.isna().sum().sum()","2c03592d":"plt.rcParams[\"figure.figsize\"] = 15,18\naq.hist()","e68537d4":"plt.style.use('fivethirtyeight')\nplt.figure(figsize=(12,7))\nsns.distplot(aq.SLP, bins = 25)\nplt.xlabel('Sea Level Pressure')\nplt.ylabel('Count')\nplt.title('Sea Level Pressure Distribution')","860d3547":"fig_dims = (15, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(aq.TM,ax=ax)","0d9c4906":"fig_dims = (15, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(aq['PM 2.5'],ax=ax)","9dcac453":"aq.groupby('TM').SLP.mean().plot(kind='line',figsize=(15,4))","f2662a6b":"aq.groupby('PM 2.5').agg(['mean', 'std']).mean().plot(kind='line',figsize=(15,4))","d9c491c6":"aq.groupby(by=['PM 2.5','VM']).agg(['median','max']).mean().plot(kind='line',figsize=(15,4))","bf8a4fc9":"aq['PM 2.5'] =aq['PM 2.5'].astype(\"float\")","4674a95c":"from pylab import rcParams\nrcParams[\"figure.figsize\"] = 12,8\nimport matplotlib.pyplot as plt\nfig,axes = plt.subplots(3,3)\n\n\naxes[0,0].set_title(\"TM\")\naxes[0,0].boxplot(aq['TM'])\naxes[0,1].set_title(\"T\")\naxes[0,1].boxplot(aq['T'])\naxes[0,2].set_title(\"SLP\")\naxes[0,2].boxplot(aq['SLP'])\n\n\n\naxes[1,0].set_title(\"VV\")\naxes[1,0].boxplot(aq['VV'])\naxes[1,1].set_title(\"VM\")\naxes[1,1].boxplot(aq['VM'])\naxes[1,2].set_title(\"PM 2.5\")\naxes[1,2].boxplot(aq['PM 2.5'])\n\n\naxes[2,0].set_title(\"Tm\")\naxes[2,0].boxplot(aq['Tm'])\naxes[2,1].set_title(\"H\")\naxes[2,1].boxplot(aq['H'])\naxes[2,2].set_title(\"V\")\naxes[2,2].boxplot(aq['V'])","59b93787":"fig_dims = (10, 3)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.boxplot(x=aq['SLP'],data=aq,ax=ax)","00e74043":"sns.relplot(x=\"TM\",y=\"SLP\",data=aq)","0ac2b3a3":"sns.catplot(x=\"TM\",y=\"SLP\",data=aq)","ba8b22f4":"fig_dims = (15, 10)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.heatmap(aq.corr(), vmax=.8,annot_kws={'size': 20}, annot=True,ax=ax)","e860b8aa":"sns.pairplot(aq)","0dbed2c5":"aq.corr()","0bd314f6":"x=aq.iloc[:,:-1] \ny=aq.iloc[:,-1]","c85d9358":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)","9dbd146c":"from sklearn.tree import DecisionTreeRegressor","449a943a":"dtree=DecisionTreeRegressor(criterion=\"mse\")\ndtree.fit(x_train,y_train)","b43cffac":"print(\"Coefficient of determination :: train set: {}\".format(dtree.score(x_train, y_train)))","b576fada":"print(\"Coefficient of determination :: test set: {}\".format(dtree.score(x_test, y_test)))","ce6363aa":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(dtree,x,y,cv=5)","814722ed":"score.mean()","d400de98":"dtreepred = dtree.predict(x_test)\ndtreepred","05a87abb":"sns.distplot(y_test-dtreepred)","e5c832f0":"plt.scatter(y_test,dtreepred)","ca55af23":"params={\n \"splitter\"    : [\"best\",\"random\"] ,\n \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15,20],\n \"min_samples_leaf\" : [ 1,2,3,4,5,6,7 ],\n\"min_weight_fraction_leaf\":[0.1,0.2,0.3,0.4],\n \"max_features\" : [\"auto\",\"log2\",\"sqrt\",None ],\n    \"max_leaf_nodes\":[None,10,20,30,40,50,60,70]\n    \n}","55d8f2d9":"from sklearn.model_selection import GridSearchCV","bb9de667":"random_search=GridSearchCV(dtree,param_grid=params,scoring='neg_mean_squared_error',n_jobs=-1,cv=10,verbose=3)","75c623d8":"def timer(start_time=None):\n    if not start_time:\n        start_time = datetime.now()\n        return start_time\n    elif start_time:\n        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)\n        tmin, tsec = divmod(temp_sec, 60)\n        print('\\n Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))","ef232ad4":"from datetime import datetime\nstart_time = timer(None) \nrandom_search.fit(x,y)\ntimer(start_time) ","a0951d2d":"random_search.best_params_","da0da8eb":"random_search.best_score_","434a0847":"dtreepredCV=random_search.predict(x_test)\ndtreepredCV","553b533a":"sns.distplot(y_test-dtreepredCV)","765e25f0":"plt.scatter(y_test,dtreepredCV)","4ad0fed1":"from sklearn import metrics\nfrom sklearn.metrics import r2_score\ndtreeMAE=(metrics.mean_absolute_error(y_test, dtreepred))\ndtreeMSE=(metrics.mean_squared_error(y_test, dtreepred))\ndtreeRMSE=np.sqrt(metrics.mean_squared_error(y_test, dtreepred))\ndtree=r2_score(y_test, dtreepred)","928bb4e7":"dtreeCVMAE=(metrics.mean_absolute_error(y_test, dtreepredCV))\ndtreeCVMSE=(metrics.mean_squared_error(y_test, dtreepredCV))\ndtreeCVRMSE=np.sqrt(metrics.mean_squared_error(y_test, dtreepredCV))\ndtreecv=r2_score(y_test, dtreepredCV)","5faa3a40":"from sklearn.ensemble import RandomForestRegressor","9f9f63ac":"regressor=RandomForestRegressor()\nregressor.fit(x_train,y_train)","51b71975":"print(\"Coefficient of determination :: train set: {}\".format(regressor.score(x_train, y_train)))","e9195550":"print(\"Coefficient of determination :: train set: {}\".format(regressor.score(x_test, y_test)))","0b2e99b7":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(regressor,x,y,cv=5)","0fb23b2d":"score.mean()","67325185":"prediction=regressor.predict(x_test)\nprediction","bf5744fe":"sns.distplot(y_test-prediction)","88f17ca0":"plt.scatter(y_test,prediction)","bc2c96b3":"from sklearn.model_selection import RandomizedSearchCV\nRandomForestRegressor()","bb1e69cc":"n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\nprint(n_estimators)","b50c2bf9":"n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\nmin_samples_split = [2, 5, 10, 15, 100]\nmin_samples_leaf = [1, 2, 5, 10]","5300a692":"yy = pd.DataFrame(y_test)\nyz = pd.DataFrame(prediction)\nyy = pd.concat([yy,yz],axis=1)\nyy = yy.rename({0:'Prediction'},axis=1)\nyy = yy.rename({'PM 2.5':'y_test'},axis=1)","b8094f01":"sns.scatterplot(x=yy[\"y_test\"], y=yy['Prediction'], data=yy)","d85ead00":"random_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\nprint(random_grid)","6451525c":"rf = RandomForestRegressor()","68ceeef8":"rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 100, cv = 5, verbose=2, random_state=42, n_jobs = 1)","495b38ff":"rf_random.fit(x_train,y_train)","26aaa116":"predictionscv=rf_random.predict(x_test)\npredictionscv","2ffe3147":"sns.distplot(y_test-predictionscv)","52341ab1":"plt.scatter(y_test,predictionscv)","db9ecc4c":"from sklearn  import metrics\nfrom sklearn.metrics import r2_score","8ca39d52":"rfMAE=(metrics.mean_absolute_error(y_test, prediction))\nrfMSE=(metrics.mean_squared_error(y_test, prediction))\nrfRMSE=(np.sqrt(metrics.mean_squared_error(y_test, prediction)))\nRF=r2_score(y_test, prediction)\nrfRMSE","1562d1c1":"rfCV_MAE=(metrics.mean_absolute_error(y_test, predictionscv))\nrfCV_MSE=(metrics.mean_squared_error(y_test, predictionscv))\nrfCV_RMSE=(np.sqrt(metrics.mean_squared_error(y_test, predictionscv)))\nRF_CV=r2_score(y_test, predictionscv)","9fff422c":"import xgboost as xgb","8976b653":"regressor=xgb.XGBRegressor()\nregressor.fit(x_train,y_train)","0640fbc7":"print(\"Coefficient of determination :: train set: {}\".format(regressor.score(x_train, y_train)))","7c81730d":"print(\"Coefficient of determination :: train set: {}\".format(regressor.score(x_test, y_test)))","19919fcc":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(regressor,x,y,cv=5)","e56cc1d3":"score.mean()","8e816b1b":"predictionXgb=regressor.predict(x_test)\npredictionXgb","970a72fe":"sns.distplot(y_test-predictionXgb)","13d12909":"plt.scatter(y_test,predictionXgb)","096502fc":"RandomForestRegressor()","e2e05142":"from sklearn.model_selection import RandomizedSearchCV","242bd3db":"n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\nprint(n_estimators)","b58562dd":"n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\nmin_samples_split = [2, 5, 10, 15, 100]\nmin_samples_leaf = [1, 2, 5, 10]","0121b8b1":"yy = pd.DataFrame(y_test)\nyz = pd.DataFrame(prediction)\nyy = pd.concat([yy,yz],axis=1)\nyy = yy.rename({0:'Prediction'},axis=1)\nyy = yy.rename({'PM 2.5':'y_test'},axis=1)","adec04f9":"sns.scatterplot(x=yy[\"y_test\"], y=yy['Prediction'], data=yy)","ecf58beb":"random_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\nprint(random_grid)","bfbd2371":"rf = RandomForestRegressor()","f53f1d36":"rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 100, cv = 5, verbose=2, random_state=42, n_jobs = 1)","49e6f7f5":"rf_random.fit(x_train,y_train)","b38ac52f":"XbgpredictionCV1=rf_random.predict(x_test)\nXbgpredictionCV1","4ad03463":"sns.distplot(y_test-XbgpredictionCV1)","1ab98d5f":"plt.scatter(y_test,XbgpredictionCV1)","a13705dd":"from sklearn import metrics\nfrom sklearn.metrics import r2_score\nXGb_MAE=(metrics.mean_absolute_error(y_test, predictionXgb))\nXGb_MSE=(metrics.mean_squared_error(y_test, predictionXgb))\nXGb_RMSE=(np.sqrt(metrics.mean_squared_error(y_test, predictionXgb)))\nXgb=r2_score(y_test,predictionXgb)","1b8c4d7f":"xgbCV_MAE=(metrics.mean_absolute_error(y_test, XbgpredictionCV1))\nxgbCV_MSE=(metrics.mean_squared_error(y_test, XbgpredictionCV1))\nxgbCV_RMSE=(np.sqrt(metrics.mean_squared_error(y_test, XbgpredictionCV1)))\nXGb_CV=r2_score(y_test,XbgpredictionCV1)","c3fb406f":"Best_Model ={'Model':['Desicion Tree','Cross_Validated_DTree', 'Random Forest','Cross_Validated_RF', 'XGboost','Cross_Validated_Xgb'],\n        'R2_Score':[dtree,dtreecv,RF,RF_CV,Xgb,XGb_CV],'RMSE':[dtreeRMSE,dtreeCVRMSE,rfRMSE,rfCV_RMSE,XGb_RMSE,xgbCV_RMSE],'MSE':[dtreeMSE,dtreeCVMSE,rfMSE,rfCV_MSE,XGb_MSE,XGb_MSE],'MAE':[dtreeMAE,dtreeCVMAE,rfMAE,rfCV_MAE,XGb_MAE,XGb_MAE]}\nBest_Model =pd.DataFrame(Best_Model)\nBest_Model=Best_Model.set_index('Model')\nBest_Model","3d910d66":"# Data Visualization","34e87861":"# Random Forest Model","d2b8e513":"# Data Preprocessing","6586e1fd":"# Train Test Split","00da3c5b":"# Grid Search Cross Validation","a389d002":"# Decision Tree Model","b72f46f9":"# Randomized Search Cross Validation","442a8b6a":"# Best Modal","65925251":"# Randomized Search Cross Validation","217df712":"# Import Data","eb2ab578":"# XGboost Model"}}