{"cell_type":{"6d7360b6":"code","5b66d092":"code","bfad6893":"code","714f8878":"code","66faf32e":"code","f60e995c":"code","722d8418":"code","3cb83fcc":"code","698f5b88":"code","3391c987":"code","b41ad2db":"code","f047f669":"code","6d533654":"code","0c1f5e6c":"code","2d461599":"code","5a71f22a":"code","3710ccdf":"code","b9e8abb8":"code","247d4483":"code","8f22d515":"code","68c7c04d":"code","40162aab":"code","cfb10f66":"code","7820212f":"markdown","7a6a167a":"markdown","c264ef88":"markdown","e98b14ff":"markdown","8637796b":"markdown","9073f085":"markdown","45110ca8":"markdown","c1112237":"markdown","6d28af4e":"markdown","e4e45122":"markdown"},"source":{"6d7360b6":"#\ub370\uc774\ud130\ud655\uc778\nimport numpy as np\nimport pandas as pd\nimport glob\nfrom tqdm import tqdm\nimport datetime\n\n\n#\ub370\uc774\ud130 \uc2dc\uac01\ud654\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n#\uae30\ud0c0\nimport warnings\nwarnings.filterwarnings(\"ignore\")","5b66d092":"train = pd.read_csv(\"..\/input\/predict-volcanic-eruptions-ingv-oe\/train.csv\")\ntrain.head()","bfad6893":"train.info()","714f8878":"train_csvs = glob.glob(\"..\/input\/predict-volcanic-eruptions-ingv-oe\/train\/*\")\ntest_csvs = glob.glob(\"..\/input\/predict-volcanic-eruptions-ingv-oe\/test\/*\")","66faf32e":"train_csvs[0]  #\uc704\uc5d0 glob\uc73c\ub85c \ud30c\uc77c\ud328\uc2a4\ub97c \ub9cc\ub4e4\uc5c8\uae30\ub584\ubb38\uc5d0 \uc694\ub807\uac8c\uc4f0\uba74 \uacbd\ub85c\uc9c0\uc815\nsequence = pd.read_csv(train_csvs[0]) #\uc704\uc758 \uacbd\ub85c\uc5d0\uc788\ub294 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\nsequence","f60e995c":"sequence.describe()","722d8418":"#plt\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac04\ub2e8\ud558\uac8c \uc2dc\uac01\ud654\ndef show_sensors(df):\n    f, axes = plt.subplots(10, 1)\n    f.set_size_inches((16, 10)) \n    f.tight_layout()\n    plt.subplots_adjust(bottom=-0.4)\n    \n    # Sensor #1 ~ #10\n    for i in range(1,11):\n        axes[i-1].plot(df[f'sensor_{i}'].values)\n        axes[i-1].set_title('Sensor_'+str(i))\n        axes[i-1].set_xlabel('time')\n        \nshow_sensors(sequence)","3cb83fcc":"#\ub110\uac12\uc744 \ucc44\uc6cc\uc900\ub2e4\nshow_sensors(sequence.fillna(0))","698f5b88":"train.head()","3391c987":"#\uc704\uc758 0.0\ucd08\ub2e8\uc704\ub97c \uc2dc:\ubd84:\ucd08\ub85c \ubcc0\ud658\ntrain['time_to_eruption'].apply(lambda x:datetime.timedelta(seconds = x\/100))","b41ad2db":"#\ubc11\uc758 \uc2dc\uac01\ud654\ub97c \uc704\ud574 \uc0c8\ub85c\uc6b4 \uceec\ub7fc \uc0dd\uc131\ntrain['hhmmss'] = train['time_to_eruption'].apply(lambda x:datetime.timedelta(seconds = x\/100))\ntrain","f047f669":"#\ud3c9\uade0\uc801\uc73c\ub85c \uba87\uc77c\ub4a4\uc5d0 \ud654\uc0b0\uc774 \ubc1c\uc0dd\ud558\ub294\uc9c0 \ud655\uc778\nplt.figure(figsize=(16,8))\nplt.hist(train['hhmmss'] \/ pd.Timedelta(days=1))\nplt.xlabel('Time between eruptions (days)')\nplt.ylabel('# of eruptions');","6d533654":"(train['hhmmss'] \/ pd.Timedelta(hours=1)).hist()","0c1f5e6c":"#px\ub85c\ub3c4 \uc2dc\uac01\ud654 \uac00\ub2a5 \uc880\ub354 \uc720\ub3d9\uc801\uc778 \uac83\uc744 \uac00\ub2a5\nfig = px.histogram(\n    train, \n    x=\"time_to_eruption\",\n    width=800,\n    height=600,\n    nbins=10,\n    title='Time to eruption distribution'\n)\n\nfig.show()","2d461599":"fig = px.line(\n    train, \n    y=\"time_to_eruption\",\n    width=800,\n    height=500,\n    title='Time to eruption for all volcanos'\n)\n\nfig.show()","5a71f22a":"#\uc911\ubcf5\uc774 \uc788\ub294\uc9c0 \ud655\uc778,\uc13c\uc11c\uac12\uc774 \ubaa8\ub450 10\uac1c\uc778\uc9c0 \ud655\uc778 \ub110\uac12 \ucc44\uc6b0\uae30\nsensors = set()\nobservations = set()\nnan_columns = list()\nmissed_groups = list()\nfor_df = list()\n\nfor item in train_csvs:           #train_csvs\ud3f4\ub354\uc5d0\uc11c \ud30c\uc77c\ub4e4\uc744 \ud558\ub098\ud558\ub098 \uac00\uc838\uc634\n    name = int(item.split('.')[-2].split('\/')[-1])   #\ud30c\uc77c\uc774\ub984\uc5d0\uc11c.\uc804\uae4c\uc9c0 \uc989 \ud655\uc7a5\uc790 \ubeb4\uace0 \uc774\ub984\ub9cc \uac00\uc838\uc634\n    at_least_one_missed = 0\n    frag = pd.read_csv(item)     #\ud310\ub2e4\uc2a4\ub85c \ub370\uc774\ud130\ub97c \uc77d\ub294\ub2e4\n    missed_group = list()\n    missed_percents = list()\n    for col in frag.columns:\n        missed_percents.append(frag[col].isnull().sum() \/ len(frag))\n        if pd.isnull(frag[col]).all() == True:     #\uac01\uac01\uc758 \uceec\ub7fc\uc5d0\ub300\ud574 \ub110\uac12\uc774 \uc788\ub294\uc9c0 \ud655\n            at_least_one_missed = 1     #\ub110\uac12\uc774 \uc788\ub2e4\uba74 1\uc744 \uc800\n            nan_columns.append(col)     #\uc5b4\ud39c\ub4dc\ub85c \uc704\uc758 non_coloumns\uc5d0 \ub123\ub294\ub2e4\n            missed_group.append(col)\n    if len(missed_group) > 0:\n        missed_groups.append(missed_group)\n    sensors.add(len(frag.columns))\n    observations.add(len(frag))\n    for_df.append([name, at_least_one_missed] + missed_percents)","3710ccdf":"print('\uace0\uc720\ud55c(Unique) \uc13c\uc11c \uc218: ', sensors)\nprint('\uace0\uc720\ud55c(Unique) \ud589(row) \uc218: ', observations)","b9e8abb8":"#\ub111\uac12 \uccb4\nprint('\uc13c\uc11c \uac12\uc774 \ube44\uc5b4\uc788\ub294(missed) \uc13c\uc11c \uc218:', len(nan_columns))\n\nabsent_sensors = dict()\n\nfor item in nan_columns:\n    if item in absent_sensors:\n        absent_sensors[item] += 1\n    else:\n        absent_sensors[item] = 0","247d4483":"#\ub110\uac12\uc758 \uc2dc\uac01\ud654\nabsent_df = pd.DataFrame(absent_sensors.items(), columns=['Sensor', 'Missed sensors'])\n\nfig = px.bar(\n    absent_df, \n    x=\"Sensor\",\n    y='Missed sensors',\n    width=800,\n    height=500,\n    title='Number of missed sensors in training dataset'\n)\n\nfig.show()","8f22d515":"sensors = set()\nobservations = set()\nnan_columns = list()\nmissed_groups = list()\nfor_test_df = list()\n\nfor item in test_csvs:\n    name = int(item.split('.')[-2].split('\/')[-1])\n    at_least_one_missed = 0\n    frag = pd.read_csv(item)\n    missed_group = list()\n    missed_percents = list()\n    for col in frag.columns:\n        missed_percents.append(frag[col].isnull().sum() \/ len(frag))\n        if pd.isnull(frag[col]).all() == True:\n            at_least_one_missed = 1\n            nan_columns.append(col)\n            missed_group.append(col)\n    if len(missed_group) > 0:\n        missed_groups.append(missed_group)\n    sensors.add(len(frag.columns))\n    observations.add(len(frag))\n    for_test_df.append([name, at_least_one_missed] + missed_percents)","68c7c04d":"print('\uace0\uc720\ud55c(Unique) \uc13c\uc11c \uc218: ', sensors)\nprint('\uace0\uc720\ud55c(Unique) \ud589(row) \uc218: ', observations)","40162aab":"print('\uac12\uc774 \ube44\uc5b4\uc788\ub294(missed) \uc13c\uc11c \uc218:', len(nan_columns))\n\nabsent_sensors = dict()\n\nfor item in nan_columns:\n    if item in absent_sensors:\n        absent_sensors[item] += 1\n    else:\n        absent_sensors[item] = 0","cfb10f66":"absent_df = pd.DataFrame(absent_sensors.items(), columns=['Sensor', 'Missed sensors'])\n\nfig = px.bar(\n    absent_df, \n    x=\"Sensor\",\n    y='Missed sensors',\n    width=800,\n    height=500,\n    title='Number of missed sensors in test dataset'\n)\n\nfig.show()","7820212f":"## Train.csv \ud655\uc778","7a6a167a":"## Train & Test \uc14b \ubd84\uc11d","c264ef88":"# 1. \ub370\uc774\ud130 \ud655\uc778","e98b14ff":"## Train \uc14b","8637796b":"## Sensor \uac12 \ud655\uc778\ud558\uae30","9073f085":"## Train.csv\n- `time_to_eruption`\uc744 h:m:s(\uc2dc:\ubd84:\ucd08)\ub85c \ubcc0\ud658","45110ca8":"- \uc13c\uc11c \uac12\uc740 10\ubd84 \uac04 `60000`\uac1c\uac00 \uce21\uc815\ub428\n- 10\ubd84\uc740 600(10 * 60\ucd08)\ucd08 \uc774\ubbc0\ub85c, \uc13c\uc11c \uac12\uc740 0.01\ucd08 \uac04\uaca9\uc73c\ub85c \uc0d8\ud50c\ub9c1\ub428(\ub2e8\uc704\uac00 10e-2 \ucd08 - centisecond \uc784)\n- `datetime.timedelta` \uc801\uc6a9\ud560 \ub54c, \uc704 \ud2b9\uc131\uc744 \uc801\uc6a9","c1112237":"## Train segment_id \ud655\uc778","6d28af4e":"## Test \uc14b","e4e45122":"# 2. \ub370\uc774\ud130 \ubd84\uc11d - Basic EDA"}}