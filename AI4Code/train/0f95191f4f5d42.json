{"cell_type":{"5ee3837b":"code","8f9744ad":"code","ca786f2e":"code","08caf3d8":"code","01d7f949":"code","f432d32e":"code","82a4e6be":"code","a99546ca":"code","8cd8972b":"code","a45ad01b":"code","26738deb":"code","4e9860c7":"code","6b76fc70":"code","98f991f8":"code","14a5c7df":"code","1193b7ec":"code","83bea3f0":"code","52a309c9":"markdown","ec47a7d2":"markdown","2d5f7629":"markdown","65bdd8a1":"markdown","f9e2cfd4":"markdown","344256be":"markdown","b9e54e63":"markdown","54ad6087":"markdown","8a77ef2b":"markdown","849e6446":"markdown","535c680b":"markdown","a3ca1971":"markdown"},"source":{"5ee3837b":"import pandas as pd","8f9744ad":"df = pd.read_csv('..\/input\/bangalore-house-prediction-processed-dataset\/bangalore house price prediction cleaned.csv')","ca786f2e":"df.head()","08caf3d8":"X = df.drop('price', axis = 1)\ny = df['price']\n\nX.shape, y.shape","01d7f949":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.2, random_state = 99)\n\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape","f432d32e":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\n\n# sc.fit(X_train)\n# X_train = sc.transform(X_train)\n\nX_train = sc.fit_transform(X_train)\n\nX_valid = sc.transform(X_valid)","82a4e6be":"from sklearn.svm import SVR","a99546ca":"model_svr_default = SVR() # Using the default setting such as kernel as 'rbf'\nmodel_svr_default.fit(X_train, y_train)\n\nmodel_svr_default.score(X_valid, y_valid)","8cd8972b":"model_svr_lr = SVR(kernel = 'linear') \nmodel_svr_lr.fit(X_train, y_train)\n\nmodel_svr_lr.score(X_valid, y_valid)","a45ad01b":"model_svr_pl3d = SVR(kernel = 'poly') # With polynomial, we have to use degree, and the default is 3. \nmodel_svr_pl3d.fit(X_train, y_train)\n\nmodel_svr_pl3d.score(X_valid, y_valid)","26738deb":"model_svr_pl2d = SVR(kernel = 'poly', degree = 2) \nmodel_svr_pl2d.fit(X_train, y_train)\n\nmodel_svr_pl2d.score(X_valid, y_valid)","4e9860c7":"X_valid[0] # First row picked to predict.","6b76fc70":"model_svr_lr.predict([X_valid[0]])","98f991f8":"y_valid.iloc[0]","14a5c7df":"print(\"Predicted Price is {} and the actual price is {}\".format(model_svr_lr.predict([X_valid[0]]), y_valid.iloc[0]))","1193b7ec":"y_pred = model_svr_lr.predict(X_valid)","83bea3f0":"from sklearn.metrics import mean_squared_error\nimport numpy as np\n\nmse = mean_squared_error(y_valid, y_pred)\nrmse = np.sqrt(mse)\n\nprint('MSE = ', mse)\nprint('RMSE = ', rmse)","52a309c9":"# 3. Split Data","ec47a7d2":"# 4. Feature Scaling","2d5f7629":"Using Support Vector Regresssion, which is a Supervised Machine Learning Alogrithm, we are going to predict the house price for Bangalore city.\n\nNote: Attached dataset is pre-processed and cleaned dataset, and now it contains only numerical values.","65bdd8a1":"Wow... with linear kernel the accuracy has jumped from 31% to 81%.","f9e2cfd4":"There are many more parameters also called as Hyper Parameter Tuning. These are as below.\n\n* gamma --> default to 'scale'\n* coef0 --> default to 0.0\n* tol --> tollerance which is default to 0.001\n* C --> 1.0\n* epsilon --> 0.1\n* etc etc.","344256be":"# 1. Load Libraries","b9e54e63":"# 7. Metrics","54ad6087":"# 6. Predict","8a77ef2b":"# 5. Model building","849e6446":"# 2. Load Data","535c680b":"Default kernel 'rbf' has given the accuracy as 31%, lets try with other kernel's.","a3ca1971":"With polynomial as a kernel the accuracy drastically fall down, irrespective of degree used."}}