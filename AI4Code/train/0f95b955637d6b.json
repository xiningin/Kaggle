{"cell_type":{"4796b352":"code","99e0852f":"code","5d4c0621":"code","3a91f633":"code","b13190e4":"code","587b3b6f":"code","2a950afb":"code","456cfd24":"code","9339eb36":"code","9517444a":"code","ffb6bce2":"code","e75a574d":"code","db73270a":"code","18c419bb":"code","048ebc3c":"code","6611fbaa":"code","b86ce4c8":"code","e2eabdb7":"code","c431c924":"code","920166ce":"code","67b72e71":"code","b38179c2":"code","8f77adca":"code","e2cdafb5":"code","e5e68a11":"code","53ba714d":"markdown","15095907":"markdown","a0d926b9":"markdown","735855b7":"markdown","6c31424a":"markdown","f25b3526":"markdown","d4c3044b":"markdown","bfaf104a":"markdown","364b0979":"markdown","7c4a4f4a":"markdown","a49f8282":"markdown","82e70cd6":"markdown"},"source":{"4796b352":"%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\nimport seaborn as sns\nplt.rcParams[\"figure.figsize\"] = (15, 10)\nplt.rcParams[\"figure.dpi\"] = 125\nplt.rcParams[\"font.size\"] = 14\nplt.rcParams['font.family'] = ['sans-serif']\nplt.rcParams['font.sans-serif'] = ['DejaVu Sans']\nplt.style.use('ggplot')\nsns.set_style(\"whitegrid\", {'axes.grid': False})\nplt.rcParams['image.cmap'] = 'viridis' # grayscale looks better","99e0852f":"from pathlib import Path\nimport numpy as np\nimport pandas as pd\nfrom skimage.io import imread as imread\nfrom skimage.util import montage as montage2d\nfrom skimage.color import label2rgb\nfrom PIL import Image\nbase_dir = Path('..') \/ 'input' \/ 'skin-cancer-mnist-ham10000'","5d4c0621":"image_overview_df = pd.read_csv(base_dir \/ 'HAM10000_metadata.csv')\nall_image_ids = {c_path.stem: c_path for c_path in base_dir.glob('**\/*.jpg')}\nimage_overview_df['image_path'] = image_overview_df['image_id'].map(all_image_ids.get)\nimage_overview_df.dropna(inplace=True) # remove values that are missing\nprint(image_overview_df.shape[0], 'image, recipe pairs loaded')\nimage_overview_df.sample(3)","3a91f633":"image_overview_df.drop(['age'], axis=1).describe()","b13190e4":"dx_name_dict = {\n    'nv': 'melanocytic nevi',\n    'mel': 'melanoma',\n    'bcc': 'basal cell carcinoma',\n    'akiec': 'Actinic keratoses and intraepithelial carcinoma',\n    'vasc': 'vascular lesions',\n    'bkl': 'benign keratosis-like',\n    'df': 'dermatofibroma'\n}\nimage_overview_df['dx_name'] = image_overview_df['dx'].map(dx_name_dict.get)\ndx_name_id_dict = {name: id for id, name in enumerate(dx_name_dict.keys())}\nimage_overview_df['dx_id'] = image_overview_df['dx'].map(dx_name_id_dict.get).astype(int)\nimage_overview_df.sample(3)","587b3b6f":"image_overview_df['dx_name'].value_counts()","2a950afb":"fig, m_axs = plt.subplots(3, 3, figsize=(20, 20))\nfor c_ax, (_, c_row) in zip(m_axs.flatten(), \n                            image_overview_df.head(9).iterrows()):\n    c_ax.imshow(imread(c_row['image_path']))\n    c_ax.set_title('{dx_name}\\nAge: {age}, Loc: {localization}'.format(**c_row))\n    c_ax.axis('off')","456cfd24":"test_row = image_overview_df.iloc[1]\nprint(test_row)","9339eb36":"test_image = Image.open(test_row['image_path']) # normal image\n# convert to 8bit color (animated GIF) and then back\nweb_image = test_image.convert('P', palette='WEB', dither=None)\nfew_color_image = web_image.convert('RGB')\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\nax1.imshow(test_image)\nax2.imshow(few_color_image)","9517444a":"print('Unique colors before', len(set([tuple(rgb) for rgb in np.array(test_image).reshape((-1, 3))])))\nprint('Unique colors after', len(set([tuple(rgb) for rgb in np.array(few_color_image).reshape((-1, 3))])))","ffb6bce2":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 6))\nfor c_channel, c_name in enumerate(['red', 'green', 'blue']):\n    ax1.hist(np.array(test_image)[:, :, c_channel].ravel(), \n             color=c_name[0], \n             label=c_name, \n             bins=np.arange(256), \n             alpha=0.5)\n    ax2.hist(np.array(few_color_image)[:, :, c_channel].ravel(), \n             color=c_name[0], \n             label=c_name, \n             bins=np.arange(256), \n             alpha=0.5)","e75a574d":"idx_to_color = np.array(web_image.getpalette()).reshape((-1, 3))\/255.0","db73270a":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 6))\nax1.imshow(few_color_image)\ncounts, bins = np.histogram(web_image, bins=np.arange(256))\nfor i in range(counts.shape[0]):\n    ax2.bar(bins[i], counts[i], color=idx_to_color[i])\nax2.set_yscale('log')\nax2.set_xlabel('Color Id')\nax2.set_ylabel('Pixel Count')","18c419bb":"def color_count_feature(in_path):\n    raw_image = Image.open(in_path) \n    web_image = raw_image.convert('P', palette='WEB', dither=None)\n    counts, bins = np.histogram(np.array(web_image).ravel(), bins=np.arange(256))\n    return counts*1.0\/np.prod(web_image.size) # normalize output","048ebc3c":"%%time\nimage_subset_df = image_overview_df.sample(100).copy()\nimage_subset_df['color_features'] = image_subset_df['image_path'].map(color_count_feature)\nimage_subset_df.sample(3)","6611fbaa":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(20, 10))\ncombined_features = np.stack(image_subset_df['color_features'].values, 0)\nax1.imshow(combined_features)\nax1.set_title('Raw Color Counts')\nax1.set_xlabel('Color')\nax1.set_ylabel('Frequency')\ncolor_wise_average = np.tile(np.mean(combined_features, 0, keepdims=True), (combined_features.shape[0], 1))\nax2.imshow(combined_features\/color_wise_average, vmin=0.05, vmax=20)\nax2.set_title('Normalized Color Counts')\nax2.set_xlabel('Color')\nax2.set_ylabel('Frequency')","b86ce4c8":"from sklearn.decomposition import PCA\nxy_pca = PCA(n_components=2)\nxy_coords = xy_pca.fit_transform(combined_features)\nimage_subset_df['x'] = xy_coords[:, 0]\nimage_subset_df['y'] = xy_coords[:, 1]","e2eabdb7":"fig, ax1 = plt.subplots(1,1, figsize=(15, 15))\nfor _, c_row in image_subset_df.iterrows():\n    ax1.plot(c_row['x'], c_row['y'], '*')\n    ax1.text(s=c_row['dx_name'][:15], x=c_row['x'], y=c_row['y'])","c431c924":"def show_xy_images(in_df, image_zoom=1):\n    fig, ax1 = plt.subplots(1,1, figsize=(10, 10))\n    artists = []\n    for _, c_row in in_df.iterrows():\n        c_img = Image.open(c_row['image_path']).resize((64, 64))\n        img = OffsetImage(c_img, zoom=image_zoom)\n        ab = AnnotationBbox(img, (c_row['x'], c_row['y']), xycoords='data', frameon=False)\n        artists.append(ax1.add_artist(ab))\n    ax1.update_datalim(in_df[['x', 'y']])\n    ax1.autoscale()\n    ax1.axis('off')\nshow_xy_images(image_subset_df)","920166ce":"from sklearn.manifold import TSNE\ntsne = TSNE(n_iter=250, verbose=True)\nxy_coords = tsne.fit_transform(combined_features)\nimage_subset_df['x'] = xy_coords[:, 0]\nimage_subset_df['y'] = xy_coords[:, 1]","67b72e71":"show_xy_images(image_subset_df)","b38179c2":"%%time\nimage_overview_df['color_features'] = image_overview_df['image_path'].map(color_count_feature).map(lambda x: x.tolist())\nimage_overview_df.sample(3)","8f77adca":"image_overview_df['image_path'] = image_overview_df['image_path'].map(str)","e2cdafb5":"image_overview_df.to_json('color_features.json')","e5e68a11":"!ls -lh","53ba714d":"# Calculate for Many Images","15095907":"# How do the colors look?","a0d926b9":"### Reduce the number of colors\nCurrently we have $ \\underbrace{2^8}_{\\textrm{8-bit}}$ and $\\underbrace{3 \\textrm{channel}}_{\\textrm{Red, Green, Blue}}$. This means we have $2^{8^3} \\rightarrow 16,581,375$ different colors. \nWe can convert the image to 8-bit format to reduce the number of colors by a factor of 65536","735855b7":"## TSNE Representation\nRather than using simple PCA we can come up with a fancier representation called [TSNE](https:\/\/lvdmaaten.github.io\/tsne\/)","6c31424a":"## What diseases do we have?\nIn medicine the `dx` is an abbreviation for diagnosis and here these are short for\n### From the original text about the dataset we have this quite technical medical detail\nCases include a representative collection of all important diagnostic categories in the realm of pigmented lesions:\n- Actinic keratoses and intraepithelial carcinoma \/ Bowen's disease (akiec)\n- basal cell carcinoma (bcc)\n- benign keratosis-like lesions (solar lentigines \/ seborrheic keratoses and lichen-planus like keratoses, bkl)\n- dermatofibroma (df)\n- melanoma (mel)\n- melanocytic nevi (nv) \n- vascular lesions (angiomas, angiokeratomas, pyogenic granulomas and hemorrhage, vasc).\n### Simplified\n- nv $\\rightarrow$ melanocytic nevi $\\rightarrow$ 0\n- mel $\\rightarrow$ melanoma $\\rightarrow$ 1\n- bcc $\\rightarrow$ basal cell carcinoma $\\rightarrow$ 2\n- akiec $\\rightarrow$ Actinic keratoses and intraepithelial carcinoma $\\rightarrow$ 3\n- vasc  $\\rightarrow$ vascular lesions $\\rightarrow$ 4\n- bkl $\\rightarrow$ benign keratosis-like lesions $\\rightarrow$ 5\n- df $\\rightarrow$ dermatofibroma $\\rightarrow$ 6","f25b3526":"## PCA Components\nWe can use a tool called principle component analysis to show the images in features","d4c3044b":"# Overview\nLoad and process data","bfaf104a":"## Calculate for all images","364b0979":"## Calculate a few test images","7c4a4f4a":"## Examining what we have","a49f8282":"# Overview\nWe take images and turn them into features by performing a few simple analyses. We focus initially on colors and then on shapes","82e70cd6":"# Create Color Features\nWe start with simple color features by grouping the image into "}}