{"cell_type":{"f69f78d4":"code","74bc4a21":"code","937a3568":"code","11f03e46":"code","32d7c99d":"code","20e964d4":"code","2ce39b6b":"code","d432206e":"code","0937840d":"code","823b536f":"code","d64ca37f":"code","471e79a8":"code","51f4a165":"code","86ac3aeb":"code","080bf005":"code","ec825138":"code","76ad72c8":"markdown"},"source":{"f69f78d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","74bc4a21":"songs = pd.read_csv('..\/input\/dataset-for-collaborative-filters\/songsDataset.csv')\nsongs.head()","937a3568":"import matplotlib.pyplot as plt\nimport seaborn as sn\nsongs.shape","11f03e46":"songs.columns","32d7c99d":"plt.figure(figsize = (15,10))\nsongs[\"'rating'\"].hist()","20e964d4":"songs.isnull().sum()","2ce39b6b":"songs.nunique()","d432206e":"songsp = songs.transpose()\nsongsp.head()","0937840d":"songstrain = songs.drop(labels = range(100000,2000000), axis = 0)\nsongstrain.shape","823b536f":"songsp = songstrain.pivot_table(index=[\"'userID'\"],columns=[\"'songID'\"],values=\"'rating'\")\nsongsp.head()","d64ca37f":"songsp.shape","471e79a8":"print(\"Before: \",songsp.shape)\nsongsp = songsp.dropna(thresh=10, axis=1).fillna(0,axis=1)\n\n#userRatings.fillna(0, inplace=True)\nprint(\"After: \",songsp.shape)","51f4a165":"songsp","86ac3aeb":"corrMatrix = songsp.corr(method='pearson')\ncorrMatrix.head(10)","080bf005":"def get_similar(songID,rating):\n    similar_ratings = corrMatrix[songID]*(rating-2.5)\n    similar_ratings = similar_ratings.sort_values(ascending=False)\n    \n    #print(type(similar_ratings))\n    return print('The following recomendation list is as follows:\\n',similar_ratings)","ec825138":"playlist_1 = [(69,5),(619,3),(528,1),(833,2)]\nsimilar_songs = pd.DataFrame()\nfor songID,rating in playlist_1:\n    similar_songs = similar_songs.append(get_similar(songID,rating),ignore_index = True)\n\nsimilar_songs.head()","76ad72c8":"we are dropping a lot of data here because this notebook cannot compute 2000000 rows available in this dataset."}}