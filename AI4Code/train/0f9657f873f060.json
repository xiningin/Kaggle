{"cell_type":{"05461f7a":"code","615255f0":"code","b3380e62":"code","158e9d94":"code","964240a0":"code","7e96cdbe":"code","807f7312":"code","1e3c82e1":"code","fe050c13":"code","20752b85":"code","34f1aaee":"code","e763cd5e":"markdown","8c7aab69":"markdown","b62cc718":"markdown","4209006e":"markdown","d293e2e5":"markdown","43b1819a":"markdown","4a5d0fed":"markdown","62e1f122":"markdown","98300f5d":"markdown"},"source":{"05461f7a":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.optimizers import Adamax\n\nfrom sklearn.metrics import roc_auc_score, f1_score, classification_report, confusion_matrix\n\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'","615255f0":"df_meta=pd.read_csv(\"\/kaggle\/input\/coronahack-chest-xraydataset\/Chest_xray_Corona_Metadata.csv\",index_col=0)\ndf_meta.head()","b3380e62":"normal=df_meta[df_meta[\"Label\"]==\"Normal\"].iloc[0]\npnemonia=df_meta[df_meta[\"Label\"]==\"Pnemonia\"].iloc[0]\nplt.figure(figsize=(25,5))\nplt.suptitle(\" Normal(left) and Pnemonia (right) example images\", fontsize=\"25\")\nplt.subplot(121)\nplt.imshow(plt.imread(\"\/kaggle\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/\"+\n                      normal[\"Dataset_type\"].lower()+\"\/\"+normal[\"X_ray_image_name\"]))\n\nplt.subplot(122)\nplt.imshow(plt.imread(\"\/kaggle\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/\"+\n                      pnemonia[\"Dataset_type\"].lower()+\"\/\"+pnemonia[\"X_ray_image_name\"]))","158e9d94":"plt.figure(figsize=(10,10))\ndf_meta[df_meta[\"Dataset_type\"]==\"TRAIN\"][\"Label\"].value_counts().plot.bar(rot=0)\nplt.tick_params(labelsize=25)","964240a0":"train_datagen = ImageDataGenerator(preprocessing_function=tf.keras.applications.xception.preprocess_input,zoom_range=0.1,brightness_range=[0.5,1.3],\n                                   width_shift_range=0.1,height_shift_range=0.1,validation_split=0.1)\ntest_datagen=ImageDataGenerator(preprocessing_function=tf.keras.applications.xception.preprocess_input)","7e96cdbe":"BATCH_SIZE=64\npath=\"..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/\"\ntrain_images=train_datagen.flow_from_dataframe(dataframe=df_meta[df_meta[\"Dataset_type\"]==\"TRAIN\"],x_col='X_ray_image_name',y_col='Label',color_mode='rgb',class_mode='categorical',\n                                                target_size=(150,150),batch_size=BATCH_SIZE,shuffle=True,seed=1234,subset='training', directory=path+\"\/train\")\n\nval_images=train_datagen.flow_from_dataframe(dataframe=df_meta[df_meta[\"Dataset_type\"]==\"TRAIN\"],x_col='X_ray_image_name',y_col='Label',color_mode='rgb',class_mode='categorical',\n                                                target_size=(150,150),batch_size=BATCH_SIZE,shuffle=True,seed=1234,subset='validation', directory=path+\"\/train\")\n\ntest_images = test_datagen.flow_from_dataframe(dataframe=df_meta[df_meta[\"Dataset_type\"]==\"TEST\"],x_col='X_ray_image_name',y_col='Label',color_mode='rgb',class_mode='categorical',\n                                                target_size=(150,150),batch_size=BATCH_SIZE,shuffle=False, directory=path+\"\/test\")","807f7312":"inputs = tf.keras.layers.Input((150,150,3))\nbase_model=tf.keras.applications.xception.Xception(include_top=False, weights=\"imagenet\",input_shape=(150,150,3), pooling='avg') \nx=base_model(inputs)\noutput=layers.Dense(2, activation='sigmoid')(x)\nmodel=tf.keras.models.Model(inputs=inputs, outputs=output)","1e3c82e1":"model.compile(Adamax(learning_rate=1e-4), loss='binary_crossentropy',metrics=['accuracy'])\nhistory = model.fit(train_images, validation_data=val_images, epochs=30)","fe050c13":"fig, axes = plt.subplots(1, 2, figsize=(30, 10))\nwith plt.style.context(plt.style.available[8]):\n    plt.suptitle(\"Accuracy and loss of train and validation set for each epoch.\",fontsize=25)\n    axes[0].plot(history.history[\"accuracy\"],label=\"Train accuracy\")\n    axes[0].plot(history.history[\"val_accuracy\"],label=\"Validation accuracy\")\n    axes[0].legend(fontsize=25)\n    axes[0].tick_params(axis=\"both\", labelsize=20)\n    axes[0].set_xlabel(\"Epochs\",fontsize=25)\n    axes[0].set_ylabel(\"Accuracy\",fontsize=25)\n    \n    axes[1].plot(history.history[\"loss\"],label=\"Train loss\")\n    axes[1].plot(history.history[\"val_loss\"],label=\"Validation loss\")\n    axes[1].legend(fontsize=25)\n    axes[1].tick_params(axis=\"both\", labelsize=20)\n    axes[1].set_xlabel(\"Epochs\",fontsize=25)\n    axes[0].set_ylabel(\"Loss\",fontsize=25)\n    ","20752b85":"preds=model.predict(test_images)\npreds = np.argmax(preds,axis=1)\npreds=preds>0.5\ngt=[0 if x==\"Normal\" else 1 for x in df_meta[df_meta[\"Dataset_type\"]==\"TEST\"][\"Label\"]]\nprint(\"Results on test set:\")\nprint(classification_report(gt,preds,target_names=[\"Normal\",\"Phemonia\"]))\nprint(\"ROC AUC score:   \",roc_auc_score(gt,preds))\nprint(\"F1 score:\",f1_score(gt,preds))","34f1aaee":"conf_matrix = confusion_matrix(gt, preds)\nsns.heatmap(conf_matrix,xticklabels = [\"Normal\",\"Phemonia\"], yticklabels =[\"Normal\",\"Phemonia\"],annot=True,fmt='g')\nplt.title('Confusion Matrix')\nplt.show()","e763cd5e":"How are the images distributed among the classes?","8c7aab69":"The last thing to do before we work on the model is to read the images through the generators.","b62cc718":"# Model definition","4209006e":"Let's print two example images of the two classes.","d293e2e5":"We want to apply the transfer learning using the Xception as a neural net with imagenet's weights.","43b1819a":"Let's procede with image augmentation.","4a5d0fed":"# Data loading and inspection","62e1f122":"# Data preprocessing","98300f5d":"# Model training and evaluation"}}