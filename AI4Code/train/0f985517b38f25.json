{"cell_type":{"5c8a2b38":"code","49e07faa":"code","188c6fa2":"code","64a23a5f":"code","ee23cbf1":"code","38c8446a":"code","25243ff5":"code","67f92ea0":"code","f4e81109":"code","792acd3b":"code","a3bb8ca5":"code","c53a1ae3":"code","4b9256b6":"code","f16ac9d3":"code","0654910c":"code","5a0237a2":"code","0c323979":"code","0a1ed8e4":"code","3a333bf7":"code","0209bcac":"code","68a4b65e":"code","5675e1b9":"code","13957f98":"code","719eabae":"code","20c7e95c":"code","64aad08c":"code","02cf80aa":"markdown","45ed9b51":"markdown","3d3e96ee":"markdown","2e2900d6":"markdown","41e85e18":"markdown","79edf133":"markdown","cb6e1d9a":"markdown","7fb97386":"markdown","bca22f83":"markdown","d9a2dd0d":"markdown","cfc3e185":"markdown","d873ff64":"markdown","ed17fe69":"markdown","c51871ef":"markdown","90dab595":"markdown","118dc19c":"markdown","68eb36d4":"markdown","46274732":"markdown","0e844755":"markdown","03c48e09":"markdown","165cee6b":"markdown","808d52e3":"markdown"},"source":{"5c8a2b38":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","49e07faa":"import matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(16,6)})\nsns.set(style='whitegrid')\nfrom itertools import cycle\ncolor_cycle = cycle(plt.rcParams['axes.prop_cycle'].by_key()['color'])","188c6fa2":"calender = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\nsales_train_validation = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\nsell_prices = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv')","64a23a5f":"sales_train_validation.sample(5)","ee23cbf1":"calender.sample(3)","38c8446a":"print(sales_train_validation.shape)\nprint(calender.shape)","25243ff5":"dept_df = sales_train_validation.dept_id.value_counts().rename_axis('dept').reset_index(name='count')\nsns.barplot(x='dept', y='count', data=dept_df, palette='gist_gray')\nplt.title('Department level Sales')\nplt.show()","67f92ea0":"state_df = sales_train_validation.state_id.value_counts().rename_axis('state').reset_index(name='count')\nsns.barplot(x='state', y='count', data=state_df, palette='gist_gray')\nplt.title('State level Sales')\nplt.show()","f4e81109":"cat_df = sales_train_validation.cat_id.value_counts().rename_axis('cat').reset_index(name='count')\nsns.barplot(x='cat', y='count', data=cat_df, palette='gist_gray')\nplt.title('Sales by Category')\nplt.show()","792acd3b":"sales_train_validation['sales'] = sales_train_validation.sum(axis=1)\nsns.barplot(x='cat_id', y='sales', data=sales_train_validation, hue='state_id', color=next(color_cycle))\nplt.title('Sales by Category and State')\nplt.show()","a3bb8ca5":"sns.barplot(x='state_id', y='sales', data=sales_train_validation, hue='cat_id', color=next(color_cycle))\nplt.title('Sales by State and Category')\nplt.show()","c53a1ae3":"sns.barplot(x='store_id', y='sales', data=sales_train_validation, hue='cat_id', color=next(color_cycle))\nplt.title('Categorywise sales by different stores')\nplt.show()","4b9256b6":"day_cols = [col for col in sales_train_validation.columns if 'd_' in col]\nsales_train_validation.sort_values('sales', ascending=False)[day_cols].sample(5)","f16ac9d3":"random_items = ['FOODS_3_090_CA_3_validation','FOODS_3_661_CA_1_validation','FOODS_3_377_TX_3_validation']\nfig, axes = plt.subplots(3,1,figsize=(16,12), sharex=True)\naxes = axes.flatten()\naxx=0\nfor item in random_items:\n    sales_train_validation.loc[sales_train_validation.id==item][day_cols].T.plot(color=next(color_cycle), ax=axes[axx], label='sales')\n    axes[axx].set_title(item)\n    axx+=1\nplt.suptitle('Plotting random item sales')\nplt.show()","0654910c":"# Yearly sales in all the stores\nmean_sales_CA = sales_train_validation[sales_train_validation.state_id=='CA'][day_cols].mean(axis=0).reset_index().set_index(calender[0:1913]['date'])\nmean_sales_CA = mean_sales_CA.drop('index', axis=1)\nmean_sales_CA.index = pd.to_datetime(mean_sales_CA.index)\nmean_sales_CA.columns = ['mean_sale_items']\n\nmean_sales_TX = sales_train_validation[sales_train_validation.state_id=='TX'][day_cols].mean(axis=0).reset_index().set_index(calender[0:1913]['date'])\nmean_sales_TX = mean_sales_TX.drop('index', axis=1)\nmean_sales_TX.index = pd.to_datetime(mean_sales_TX.index)\nmean_sales_TX.columns = ['mean_sale_items']\n\nmean_sales_WI = sales_train_validation[sales_train_validation.state_id=='WI'][day_cols].mean(axis=0).reset_index().set_index(calender[0:1913]['date'])\nmean_sales_WI = mean_sales_WI.drop('index', axis=1)\nmean_sales_WI.index = pd.to_datetime(mean_sales_WI.index)\nmean_sales_WI.columns = ['mean_sale_items']\n\n# Plotting sale of items in all three cities\nfig, (ax1,ax2,ax3) = plt.subplots(3,1, figsize=(18,16), sharex=True)\n\nax1.plot(mean_sales_CA, label='sales - CA', color=next(color_cycle))\nax1.legend(loc='upper left')\n\nax2.plot(mean_sales_TX, label='sales - TX', color=next(color_cycle))\nax2.legend(loc='upper left')\n\nax3.plot(mean_sales_WI, label='sales - WI', color=next(color_cycle))\nax3.legend(loc='upper left')\nplt.title('Yearly sales of all goods across states')\nplt.tight_layout()\nplt.show() ","5a0237a2":"# Plotting the moving avrage\nfig, ax = plt.subplots(figsize=(18,6))\nax.plot(mean_sales_CA.rolling(window=80).mean(), label='moving average sales CA', color=next(color_cycle))\nax.plot(mean_sales_TX.rolling(window=80).mean(), label='moving average sales TX', color=next(color_cycle))\nax.plot(mean_sales_WI.rolling(window=80).mean(), label='moving average sales WI', color=next(color_cycle))\nplt.legend()\nplt.title('Moving average sales of the ctates')\nplt.show()","0c323979":"# Monthly sales across the states\nmean_sales_CA['month'] = pd.DatetimeIndex(mean_sales_CA.index).month_name()\nmean_sales_CA['weekday_name'] = pd.DatetimeIndex(mean_sales_CA.index).weekday_name\n\nmean_sales_TX['month'] = pd.DatetimeIndex(mean_sales_TX.index).month_name()\nmean_sales_TX['weekday_name'] = pd.DatetimeIndex(mean_sales_TX.index).weekday_name\n\nmean_sales_WI['month'] = pd.DatetimeIndex(mean_sales_WI.index).month_name()\nmean_sales_WI['weekday_name'] = pd.DatetimeIndex(mean_sales_WI.index).weekday_name\n\nnew_order = ['January','February','March','April','May','June','July','August','September','October','November','December']\n\nmean_sales_CA_grouped = mean_sales_CA.groupby(['month']).mean().reindex(new_order, axis=0)\nmean_sales_TX_grouped = mean_sales_TX.groupby(['month']).mean().reindex(new_order, axis=0)\nmean_sales_WI_grouped = mean_sales_WI.groupby(['month']).mean().reindex(new_order, axis=0)\n\nfig, ax = plt.subplots(figsize=(18,6))\n\nax.plot(mean_sales_CA_grouped, label='mothly sales in CA', c='red', linewidth=4)\nax.plot(mean_sales_TX_grouped, label='mothly sales in TX', c='green', linewidth=4)\nax.plot(mean_sales_WI_grouped, label='mothly sales in WI', c='blue', linewidth=4)\n\nax.legend(loc='upper right')\nplt.title('Consolidated monthly sales across States')\nplt.tight_layout()\nplt.show()","0a1ed8e4":"new_order = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']\nmean_sales_CA_grouped = mean_sales_CA.groupby(['weekday_name']).sum().reindex(new_order, axis=0)\nmean_sales_TX_grouped = mean_sales_TX.groupby(['weekday_name']).sum().reindex(new_order, axis=0)\nmean_sales_WI_grouped = mean_sales_WI.groupby(['weekday_name']).sum().reindex(new_order, axis=0)\nfig, ax = plt.subplots(figsize=(18,6))\nax.plot(mean_sales_CA_grouped, label='weekly sales in CA')\nax.plot(mean_sales_TX_grouped, label='weekly sales in TX')\nax.plot(mean_sales_WI_grouped, label='weekly sales in WI')\nplt.title('Consolidated weekly sales acrosss states')\nplt.legend()\nplt.show()","3a333bf7":"# Hobbey item sales in California\nfig, axes = plt.subplots(3, 1, figsize=(16,12), sharex=True)\naxes = axes.flatten()\naxx = 0\nfor cat in sales_train_validation.cat_id.unique():\n    sales = sales_train_validation[(sales_train_validation.cat_id==cat) & (sales_train_validation.state_id=='CA')][day_cols].T.\\\n    mean(axis=1).reset_index().set_index(calender[0:1913]['date']).drop('index', 1)\n    sales.columns = ['sales_CA_'+str(cat)]\n    sales.index = pd.to_datetime(sales.index)\n    sales.plot(color=next(color_cycle), ax=axes[axx])\n    axx += 1\nplt.suptitle('Hobbey item sales in California')\nplt.tight_layout()\nplt.show()","0209bcac":"# Sales by store\nsales_train_validation = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\nsales_by_store = sales_train_validation.groupby(['store_id']).mean().T\nsales_by_store = sales_by_store.set_index(calender[0:1913]['date'])\nsales_by_store.index = pd.to_datetime(sales_by_store.index)\n\nfig,ax = plt.subplots()\nfor col in sales_by_store.columns:\n    sales_by_store[col].plot(color=next(color_cycle), label='avg sales '+str(col), ax=ax)\nplt.title('Mean sales across the shops')\nplt.show()","68a4b65e":"# moving average sales in all the 10 shops\nimport matplotlib.dates as mdates\n\nsales_rolling = sales_by_store.rolling(100).mean()\nfig,ax = plt.subplots(figsize=(18,7))\nfor col in sales_by_store.columns:\n    sales_rolling[col].plot( label='avg sales '+str(col), ax=ax, color=next(color_cycle), linewidth=1)\n#ax.xaxis.set_major_locator(mdates.YearLocator())\n#ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nplt.title('moving average sales across the shops')\nplt.legend(fontsize=12)\nplt.show()","5675e1b9":"sales_by_store['month'] = pd.DatetimeIndex(sales_by_store.index).month_name()\nsales_by_store['weekdays'] = pd.DatetimeIndex(sales_by_store.index).weekday_name\n\n# Monthly sales across the stores\nnew_order = ['January','February','March','April','May','June','July','August','September','October','November','December']\nmonthly_store_sales = sales_by_store.groupby(['month']).mean().reindex(new_order, axis=0)\nfig, axes = plt.subplots(5,2,figsize=(18,12), sharex=True)\naxes = axes.flatten()\naxx = 0\nfor col in monthly_store_sales.columns[0:11]:\n    monthly_store_sales[col].plot(color=next(color_cycle), ax=axes[axx])\n    axes[axx].set_title(str(col))\n    axx+=1\nplt.suptitle('Monthly trend in different stores')\nplt.tight_layout()\nplt.show()","13957f98":"# Weekly sales across the stores\nnew_order = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']\nweekly_store_sales = sales_by_store.groupby(['weekdays']).mean().reindex(new_order, axis=0)\nfig, axes = plt.subplots(5,2,figsize=(18,12), sharex=True)\naxes = axes.flatten()\naxx = 0\nfor col in weekly_store_sales.columns[0:11]:\n    weekly_store_sales[col].plot(color=next(color_cycle), ax=axes[axx])\n    axes[axx].set_title(str(col))\n    axx+=1\nplt.suptitle('Weekly trend in different stores')\nplt.tight_layout()\nplt.show()","719eabae":"#new_order = ['January','February','March','April','May','June','July','August','September','October','November','December']\n#monthly_store_sales = sales_by_store.groupby(['month']).mean().reindex(new_order, axis=0)\nfig, axes = plt.subplots(5,2,figsize=(18,12), sharex=True)\naxes = axes.flatten()\naxx = 0\nfor col in monthly_store_sales.columns[0:11]:\n    sales_by_store[col].plot(color=next(color_cycle), ax=axes[axx])\n    axes[axx].set_title(str(col))\n    axx+=1\nplt.suptitle('Yearly trend in different stores')\nplt.tight_layout()\nplt.show()","20c7e95c":"# Trend in sales of items\nfor cat in sales_train_validation.cat_id.unique():\n    df = sales_train_validation[sales_train_validation.cat_id==cat][day_cols].\\\n    T.mean(axis=1).reset_index().set_index(calender[0:1913]['date']).drop('index', 1)\n    df.columns = ['mean_sales']\n    df.index = pd.to_datetime(df.index)\n    df['month'] = pd.DatetimeIndex(df.index).month_name()\n    df['weekday_name'] = pd.DatetimeIndex(df.index).weekday_name\n\n\n    fig, (ax1,ax2) = plt.subplots(2,1,figsize=(16,8))\n    sns.boxplot(x='month', y='mean_sales', data=df, ax=ax1)\n    ax1.set_title('monthly trend')\n    sns.boxplot(x='weekday_name', y='mean_sales', data=df, ax=ax2)\n    ax2.set_title('weekly trend')\n    plt.suptitle('Trend across ' + str(cat))\n    # plt.tight_layout()\n    plt.show()","64aad08c":"# Detect trend\nimport matplotlib.dates as mdates\ndef detect_trend(X_df):\n    coefficients, residuals, _, _, _ = np.polyfit(range(len(X_df)), X_df, 1, full=True)\n    mse = residuals[0]\/len(X_df)\n    nrmse = np.sqrt(mse)\/(X_df.max()-X_df.min())\n    \n    print('slope = ', str(float(coefficients[0])))\n    print('nrmse = ', str(float(nrmse)))\n    \n    fig, ax = plt.subplots(figsize=(9,5))\n    new_df = pd.DataFrame([coefficients[0]*x+coefficients[1] for x in range(len(X_df))], columns=['trend'])    \n    new_df = new_df.reset_index().set_index(calender[0:1913]['date']).drop('index', 1)\n    X_df.plot(color=next(color_cycle), ax=ax, label='Original')\n    new_df.plot(ax=ax, color='red', linewidth=4)\n    ax.legend()\n    plt.show()\n    \nfor col in sales_by_store.columns:\n    X_df = sales_by_store[col].reset_index().set_index(calender[0:1913]['date']).drop('date', 1)\n    detect_trend(X_df)","02cf80aa":"### Upvote if you like my notebook, Your support and encouragement are greatly appreciated!!!\n\n### Suggestions and Criticisms are welcomed !!\n\n### Thank you!","45ed9b51":"### Time series of Sales across the States","3d3e96ee":"### Looking at Sales of Random Items","2e2900d6":"### Visualizing monthly trends across the stores\n","41e85e18":"### Visualizing state level Sales","79edf133":"### Visualizing Sales by Category and State","cb6e1d9a":"### Moving average sales of all stores: better visualization, window=100","7fb97386":"### Specific on Hobbey item sales in California","bca22f83":"### Weekly trends across the stores","d9a2dd0d":"### Categorywise sales by different stores","cfc3e185":"### Consolidated weekly sales acrosss states","d873ff64":"### Monthly and weekly trends by Categories","ed17fe69":"### Visualizing department level sales","c51871ef":"### Looking at mean sales of all the stores","90dab595":"### Consolidated monthly mean of sales across States","118dc19c":"### Yearly trends across the stores","68eb36d4":"### Plotting the moving avrage sales across the states\n","46274732":"### Efforts from a humble beginner!\n\n### To be continued!\n\n### Cast an upvote if it was useful!","0e844755":"### Detecting trends for all the stores","03c48e09":"### Visualizing Sales by State and Category","165cee6b":"### Importing necessary modules and Reading the data","808d52e3":"### Visualizing Sales by Category"}}