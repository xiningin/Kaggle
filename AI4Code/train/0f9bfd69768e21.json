{"cell_type":{"569a8843":"code","8eaf4f34":"code","b0ef3427":"code","6dd04631":"code","bd0493fc":"code","c2e848f9":"code","3ba58803":"code","3bae801c":"code","6077bc8a":"code","e4567ca9":"code","81c810e7":"code","cc34d7b2":"code","107f7661":"code","1648de4d":"code","60ea8876":"code","fb88a5a2":"code","0445252a":"code","7b28b258":"markdown","302e5512":"markdown","78735bb1":"markdown","ab2fa5eb":"markdown","8b0ad15e":"markdown","2ff0194a":"markdown","1ac087b8":"markdown","459388ea":"markdown","7beb9ce5":"markdown"},"source":{"569a8843":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8eaf4f34":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split","b0ef3427":"file_path = '..\/input\/concrete-compressive-strength\/Concrete_Data.xls'\ndata = pd.read_excel(file_path)\ndata.head()","6dd04631":"features = data.iloc[:,:-1]\nfeatures.head()","bd0493fc":"plt.figure(figsize=(10,5))\nsns.heatmap(features.corr(), cmap ='Blues', annot = True)","c2e848f9":"features.isnull().sum()","3ba58803":"data.info()","3bae801c":"data.describe()","6077bc8a":"X = features.copy().values\ny = data.iloc[:,-1].values\n\ntrain_X, test_X, train_y, test_y = train_test_split(X,y, random_state = 1)","e4567ca9":"from sklearn import linear_model\nlr_model = linear_model.LinearRegression()\nlr_model.fit(train_X, train_y)\npredict_y = lr_model.predict(test_X)","81c810e7":"from sklearn.svm import SVR\nsvr_model = SVR(C=0.8, kernel = 'linear')\nsvr_model.fit(train_X, train_y)\npredict_y = svr_model.predict(test_X)","cc34d7b2":"from sklearn.linear_model import BayesianRidge\nbr_model = BayesianRidge(compute_score = True)\nbr_model.fit(train_X, train_y)\npredict_y = br_model.predict(test_X)","107f7661":"from sklearn.ensemble import RandomForestRegressor\nrf_model = RandomForestRegressor(random_state = 1)\nrf_model.fit(train_X,train_y)\npredict_y = rf_model.predict(test_X)","1648de4d":"from sklearn.tree import DecisionTreeRegressor\ndt_model = DecisionTreeRegressor(random_state = 1)\ndt_model.fit(train_X,train_y)\npredict_y = dt_model.predict(test_X)","60ea8876":"models = [lr_model, svr_model, br_model, rf_model, dt_model]\nmodel_names = ['Linear Regression Model', 'Support Vector Regression Model', 'BayesianRidge Regression Model', 'Random Forest Regression Model', 'Decision Tree Regression Model']\nfor model,model_name in zip(models,model_names):\n    mae = mean_absolute_error(model.predict(test_X),test_y)\n    print(f\"{model_name} MEA = {mae}\")","fb88a5a2":"for model,model_name in zip(models,model_names):\n    accuracy = model.score(test_X,test_y)\n    print(f\"{model_name} accuracy score = {accuracy}\")","0445252a":"for model,model_name in zip(models,model_names):\n    plt.plot(test_y, label = 'Actual Target')\n    plt.plot(model.predict(test_X), label = 'Predicted Target')\n    plt.legend(loc = 'upper left')\n    plt.title(model_name)\n    plt.show()","7b28b258":"Selecting the best Regression Model\n1. Linear Regression Model\n2. Support Vector Regression Model\n3. BayesianRidge Regression Model\n4. Random Forest Regression Model\n5. Decision Tree Regression Model","302e5512":"1. Linear Regression Model","78735bb1":"Accuracy Score","ab2fa5eb":"2. Support Vector Regression Model","8b0ad15e":"5. Decision Tree Regression Model","2ff0194a":"Mean Absolute Error","1ac087b8":"Plotting Actual vs Prediction","459388ea":"3. BayesianRidge Regression Model","7beb9ce5":"4. Random Forest Regression Model"}}