{"cell_type":{"f9b64638":"code","8abbd49f":"markdown"},"source":{"f9b64638":"import math\n\n\ndef distance(p1, p2):\n    d1 = p1[0] - p2[0]\n    print(d1)\n\n    d2 = p1[1] - p2[1]\n    print(d1)\n\n    s1 = d1 ** 2\n    print(s1)\n\n    s2 = d2 ** 2\n    print(s2)\n\n    t = s1 + s2\n    print(t)\n\n    d = math.sqrt(t)\n\n    return d\n\n\ndef distance2(p1, p2):\n    return math.sqrt(((p1[0] - p2[0]) ** 2) + ((p1[1] - p2[1]) ** 2))\n\n\nprint(distance([3.5, 3.5], [5.5, 5.5]))\nprint(distance2([3.5, 3.5], [5.5, 5.5]))\n\nlocations = [\n    [5, 5],\n    [2, 5],\n    [2, 6],\n    [1, 4],\n    [7, 7],\n]\ncurrent = [3, 2]\n\n\ndef find_nearest(current, locations):\n    best = None\n    best_index = 0\n\n    for index in range(0, len(locations)):\n        item = locations[index]\n\n        d = distance2(item, current)\n\n        if best is None or d < best:\n            best = d\n            best_index = index\n\n        #index += 1\n    return [best_index, best]\n\n\nresult = find_nearest(current, locations)\n\nprint(result)\n\n\ndef isNearest(x, y):\n    b = locations[result[0]]\n    if b[0] == x and b[1] == y:\n        return True\n    return False\n\n\ndef isStarbucks(x, y):\n    index = 0\n    for s in locations:\n        if s[0] == x and s[1] == y:\n            return index\n        index += 1\n    return False\n\n\ndef print_grid(n):\n    output = \"\"\n    for x in range(0, n):\n        for y in range(0, n):\n            i = isStarbucks(x, y)\n            if current[0] == x and current[1] == y:\n                output += \" x\"\n            elif i is not False:\n                if isNearest(x,y):\n                    output += str(i) + \"v\"\n                else:\n                    output += str(i) + \"*\"\n\n            else:\n                output += \" .\"\n\n        output += \"\\n\"\n\n    print(output)\n\n\nprint_grid(10)\n\n# what is the shortest path from the current location to visit all,\n#  and then return to the start.\n","8abbd49f":"https:\/\/en.wikipedia.org\/wiki\/Pythagorean_theorem"}}