{"cell_type":{"c02ea236":"code","1bc0b781":"code","6c8a991a":"code","ceb029a4":"code","4e20dc8e":"code","3679161a":"code","ce218047":"code","f3d53ea9":"markdown","b2df0187":"markdown","89e9700c":"markdown"},"source":{"c02ea236":"# Asthetics\nimport warnings\nimport sklearn.exceptions\nwarnings.filterwarnings('ignore', category=DeprecationWarning)\nwarnings.filterwarnings('ignore', category=FutureWarning)\nwarnings.filterwarnings(\"ignore\", category=sklearn.exceptions.UndefinedMetricWarning)\n\n# General\nimport pandas as pd\nimport numpy as np\nimport os\nimport random\npd.set_option('display.max_columns', None)\n\n# Visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set(style=\"whitegrid\")\n\n# Machine Learning\nfrom sklearn.decomposition import NMF\nfrom sklearn.preprocessing import normalize\n\n# Random Seed Initialize\nRANDOM_SEED = 42\n\ndef seed_everything(seed=RANDOM_SEED):\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    random.seed(seed)\n    \nseed_everything()","1bc0b781":"csv_dir = '..\/input\/seti-breakthrough-listen'\ntrain_dir = '..\/input\/seti-breakthrough-listen\/train'\ntest_dir = '..\/input\/seti-breakthrough-listen\/test'\n\ntrain_file_path = os.path.join(csv_dir, 'train_labels.csv')\nsample_sub_file_path = os.path.join(csv_dir, 'sample_submission.csv')\n\nprint(f'Train file: {train_file_path}')\nprint(f'Train file: {sample_sub_file_path}')","6c8a991a":"def return_filpath(name, folder=train_dir):\n    path = os.path.join(folder, name[0], f'{name}.npy')\n    return path","ceb029a4":"def show_cleaned_image_individually(image):\n    image_on = None\n    image_off = None\n    clean_image = None\n    \n    for i in range(0,6,2):\n        temp_on = image[i]\n        temp_off = image[i+1]\n        \n        temp_on = temp_on + 50\n        temp_off = temp_off + 50\n        \n        model = NMF(init = 'random',\n                    n_components = 2,\n                    solver = 'mu',\n                    alpha = 0.01,\n                    random_state = 0,\n                   )\n        \n        W_on = model.fit_transform(temp_on)\n        H_on = model.components_\n\n        W_off = model.fit_transform(temp_off)\n        H_off = model.components_\n        \n        temp_clean = normalize(temp_on - np.matmul(W_on, H_off))\n        \n        if image_off is None:\n            image_off = image[i+1]\n        else:\n            image_off = np.concatenate((image_off, image[i+1]))\n\n        if image_on is None:\n            image_on = image[i]\n        else:\n            image_on = np.concatenate((image_on, image[i]))\n            \n        if clean_image is None:\n            clean_image = temp_clean\n        else:\n            clean_image = np.concatenate((clean_image, temp_clean))\n    \n    plt.figure(figsize=(16, 10))\n    \n    plt.subplot(2, 2, 1)\n    plt.imshow(image_on.astype(float), interpolation='antialiased', aspect='auto', cmap='viridis');\n    plt.text(5, 100, 'ON', bbox={'facecolor': 'white'})\n    plt.grid(b=None)\n    \n    plt.subplot(2, 2, 2)\n    plt.imshow(image_off.astype(float), interpolation='antialiased', aspect='auto', cmap='viridis');\n    plt.text(5, 100, 'OFF', bbox={'facecolor': 'white'})\n    plt.grid(b=None)\n    \n    plt.subplot(2, 2, 3)\n    diff = normalize(image_on - image_off)\n    plt.imshow(diff.astype(float), interpolation='antialiased', aspect='auto', cmap='viridis');\n    plt.text(5, 100, 'Difference', bbox={'facecolor': 'white'})\n    plt.grid(b=None)\n    \n    plt.subplot(2, 2, 4)\n    plt.imshow(clean_image.astype(float), interpolation='antialiased', aspect='auto', cmap='viridis');\n    plt.text(5, 100, 'NMF', bbox={'facecolor': 'white'})\n    plt.grid(b=None)\n    plt.show()","4e20dc8e":"train_df = pd.read_csv(train_file_path)\ntest_df = pd.read_csv(sample_sub_file_path)","3679161a":"train_df['image_path'] = train_df['id'].apply(lambda x: return_filpath(x))\ntest_df['image_path'] = test_df['id'].apply(lambda x: return_filpath(x, folder=test_dir))","ce218047":"image = np.load(train_df[train_df['target'] == 1].sample(10)['image_path'].iloc[0])\nshow_cleaned_image_individually(image)","f3d53ea9":"# Plot Images","b2df0187":"# Utils","89e9700c":"# Imports"}}