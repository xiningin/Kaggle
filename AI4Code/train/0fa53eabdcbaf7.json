{"cell_type":{"2f9a9d5d":"code","3bc9955d":"code","4d106429":"code","f54dbefa":"code","34855e47":"code","a8fbad39":"code","8918ff0c":"code","b0b52d72":"code","5a660b09":"code","fbb766e0":"code","2698108e":"code","0bbc6135":"code","ab26da0b":"code","8b80e64f":"code","232b78c1":"code","038736a5":"markdown","865bd70c":"markdown","1d3022ed":"markdown","130e2396":"markdown","aab25b73":"markdown","d689afd6":"markdown"},"source":{"2f9a9d5d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3bc9955d":"import pandas as pd\n","4d106429":"data= ({'a':[1,2,3,4],'b':[3,4,5,6],'c':[12,3,4,5]})\ndf=pd.DataFrame(data)\ndf","f54dbefa":"type(df)\ndf.iloc[0]\ndf.iloc[0:-1,0:]","34855e47":"df=pd.read_csv(\"..\/input\/insurance.csv\")\ndf.keys()","a8fbad39":"df.info()","8918ff0c":"x=df.age \ny=df.charges\ny.values","b0b52d72":"x=df.iloc[:,0:1].values\ny=df.iloc[:,-1:]\ny","5a660b09":"from sklearn.linear_model import LinearRegression\nml=LinearRegression()\nml.fit(x,y)","fbb766e0":"m=ml.coef_\nc=ml.intercept_","2698108e":"y_pred=m*x+c\ny_pred","0bbc6135":"y_predict=ml.predict(x)\ny_predict","ab26da0b":"import matplotlib.pyplot as plt\n","8b80e64f":"plt.scatter(x,y)\nplt.plot(x,y_predict,c=\"red\")","232b78c1":"a1=45.5\na2=36.5\nplt.scatter(x,y)\nplt.plot(x,y_predict,c=\"red\")\nc=ml.predict([[a1],[a2]])\nplt.scatter([a1,a2],c,color=[\"green\",\"yellow\"])\nplt.show","038736a5":"now machine automaticaly get slope and intecept trough sklearn lib.\namd now the pidiction model is work on the equation y=mx+c.","865bd70c":"**the new data is on straight line shown by the yellow and green dot . so the prediction is very right**","1d3022ed":"**pandas.DataFrame.iloc**\nIt is used for Purely integer-location based indexing for selection by position.\nAllowed inputs are:\n\nAn integer, e.g. 5.\n\nA list or array of integers, e.g. [4, 3, 0].\n\nA slice object with ints, e.g. 1:7.\n\nA boolean array.\n\nA callable function with one argument (the calling Series or DataFrame) and that returns valid output for indexing (one of the above). This is useful in method chains, when you don\u2019t have a reference to the calling object, but would like to base your selection on some value","130e2396":"**Indexing just the rows**\nWith a scalar integer.","aab25b73":"**the machine has plot this plot with predict data we find it is working fine **\nso lets try with new data","d689afd6":" **AS for pridiction we have follow to the linear equation i.e.y=mx+c.\n so here we have two variables x is independent and y is dependent so we have to convert it to 2-d form n  dimensi dependent variable can be in single dimension **"}}