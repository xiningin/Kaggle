{"cell_type":{"83a4c696":"code","88fb51b2":"code","d7a659fa":"code","691ea0bb":"code","6a170447":"code","b454501e":"code","96e5e512":"code","efa9e7fe":"code","a6fb8203":"code","319c7c48":"code","e444ac8e":"code","b1cbd2ab":"code","2c5e7e2c":"code","a3df0770":"code","b118a5ea":"code","8c999290":"code","7e267e45":"code","cba78fca":"code","0041a0b1":"code","90c9b51a":"code","6f1922cc":"code","edf05a91":"markdown","9699e289":"markdown","29c9c601":"markdown","c35925fc":"markdown","3d87d619":"markdown","8a890028":"markdown"},"source":{"83a4c696":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","88fb51b2":"# Import Dependencies\n%matplotlib inline\n\n# Start Python Imports\nimport math, time, random, datetime\n\n# Data Manipulation\nimport numpy as np\nimport pandas as pd\n\n# Visualization \nimport matplotlib.pyplot as plt\nimport missingno\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\n\n# Preprocessing\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, label_binarize\n# Machine learning\nimport catboost\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection, tree, preprocessing, metrics, linear_model\nfrom sklearn.svm import LinearSVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier, Pool, cv\nfrom sklearn.preprocessing import StandardScaler\n\n\n# Let's be rebels and ignore warnings for now\nimport warnings\nwarnings.filterwarnings('ignore')\n","d7a659fa":"train = pd.read_csv('..\/input\/dont-overfit-ii\/train.csv')\ntest = pd.read_csv('..\/input\/dont-overfit-ii\/test.csv')\nsample_submission = pd.read_csv('..\/input\/dont-overfit-ii\/sample_submission.csv')","691ea0bb":"train.head()","6a170447":"train['target']  = train['target'].astype(int)\ntrain=train.drop('id',axis=1)\n","b454501e":"train.info()","96e5e512":"train.shape\n","efa9e7fe":"test.head()","a6fb8203":"test.info()","319c7c48":"test.shape","e444ac8e":"sample_submission.head()","b1cbd2ab":"sample_submission.info()","2c5e7e2c":"sample_submission.shape","a3df0770":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False )\n","b118a5ea":"sns.heatmap(test.isnull(),yticklabels=False,cbar=False )\n","8c999290":"sns.countplot(y='target', data=train);","7e267e45":"X_train=train.drop(['target'],axis=1)\ny_train=train['target']\nX_train_Scaled=pd.DataFrame(StandardScaler().fit_transform(X_train),columns=X_train.columns)\n","cba78fca":"X_train_Scaled.head()","0041a0b1":"test.head()\ntest=test.drop(['id'],axis=1)\ntest_Scaled=pd.DataFrame(StandardScaler().fit_transform(test),columns=test.columns)\n","90c9b51a":"classifier = KNeighborsClassifier(n_neighbors=5)\nclassifier.fit(X_train_Scaled, y_train)\ny_pred = classifier.predict(test_Scaled)\n","6f1922cc":"submission = pd.DataFrame()\ndataframe_Y=pd.DataFrame(y_pred, columns=['target']) \n\nsubmission=pd.concat([sample_submission['id'],dataframe_Y],axis=1)\n\nsubmission.to_csv('.\/Submit.csv',index=False)","edf05a91":"KNeighborsClassifier","9699e289":"# Imports","29c9c601":"# Read Data","c35925fc":"# Build Model","3d87d619":"# Check Missing Data\n","8a890028":"Submition:"}}