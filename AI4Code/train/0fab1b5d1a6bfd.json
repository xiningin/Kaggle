{"cell_type":{"1939abb9":"code","bdfa2c0a":"code","1c9e7167":"code","53670192":"code","9c7c6092":"code","b6b83c98":"code","7c021e66":"code","2c0e3f38":"code","dcdb9705":"code","c0fd7667":"code","c100cf54":"code","fe3c94a5":"code","1e7a6f9f":"code","25f46644":"code","198ffa5b":"code","de271c94":"code","90b4cfdc":"code","ebf96d11":"code","843b3743":"code","49e18655":"code","8e3fffde":"code","dc950a4d":"markdown","81c80115":"markdown","998fa245":"markdown","511fd8af":"markdown","4f0fa8b1":"markdown","dfb78cf5":"markdown","fade7122":"markdown","5f9022e0":"markdown","b833d28f":"markdown","991c1335":"markdown"},"source":{"1939abb9":"import numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\nfrom skimage.feature import hog\nfrom skimage import data, exposure\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nprint('Done!')","bdfa2c0a":"panda = imread('..\/input\/film-image\/panda.jpg')\nimshow(panda)\nprint(panda.shape)","1c9e7167":"bunny = imread('..\/input\/film-image\/bunny.jpg')\nimshow(bunny)\nprint(bunny.shape)","53670192":"quokka = imread('..\/input\/film-image\/quokka.jpg')\nimshow(quokka)\nprint(quokka.shape)","9c7c6092":"tiger = imread('..\/input\/film-image\/tiger.jpg')\nimshow(tiger)\nprint(tiger.shape)","b6b83c98":"zebra = imread('..\/input\/film-image\/zebra.jpg')\nimshow(zebra)\nprint(zebra.shape)","7c021e66":"meerkat = imread('..\/input\/film-image\/meerkat.jpg')\nimshow(meerkat)\nprint(meerkat.shape)","2c0e3f38":"resized_panda = resize(panda, (100,150)) \nimshow(resized_panda) \nprint(resized_panda.shape)","dcdb9705":"resized_bunny = resize(bunny, (170,230)) \nimshow(resized_bunny) \nprint(resized_bunny.shape)","c0fd7667":"resized_quokka = resize(quokka, (170,120)) \nimshow(resized_quokka) \nprint(resized_quokka.shape)","c100cf54":"resized_tiger = resize(tiger, (350,300)) \nimshow(resized_tiger) \nprint(resized_tiger.shape)","fe3c94a5":"resized_zebra = resize(zebra, (270,400)) \nimshow(resized_zebra) \nprint(resized_zebra.shape)","1e7a6f9f":"resized_meerkat = resize(meerkat, (260,200)) \nimshow(resized_meerkat) \nprint(resized_meerkat.shape)","25f46644":"#creating hog features \n\nfd, hog_panda = hog(resized_panda, orientations=9, pixels_per_cell=(8, 8), \n                    cells_per_block=(2, 2), visualize=True, multichannel=True)\n\nfd, hog_bunny = hog(resized_bunny, orientations=9, pixels_per_cell=(8, 8), \n                    cells_per_block=(2, 2), visualize=True, multichannel=True)\n\nfd, hog_quokka = hog(resized_quokka, orientations=9, pixels_per_cell=(8, 8), \n                    cells_per_block=(2, 2), visualize=True, multichannel=True)\n\nfd, hog_tiger = hog(resized_tiger, orientations=9, pixels_per_cell=(8, 8), \n                    cells_per_block=(2, 2), visualize=True, multichannel=True)\n\nfd, hog_zebra = hog(resized_zebra, orientations=9, pixels_per_cell=(8, 8), \n                    cells_per_block=(2, 2), visualize=True, multichannel=True)\n\nfd, hog_meerkat = hog(resized_meerkat, orientations=9, pixels_per_cell=(8, 8), \n                    cells_per_block=(2, 2), visualize=True, multichannel=True)","198ffa5b":"fd.shape","de271c94":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7), sharex=True, sharey=True) \n\nax1.imshow(resized_panda, cmap=plt.cm.gray) \nax1.set_title('Input image') \n\n# Rescale histogram for better display \nhog_panda_rescaled = exposure.rescale_intensity(hog_panda, in_range=(0, 10)) \n\nax2.imshow(hog_panda_rescaled, cmap=plt.cm.gray) \nax2.set_title('Histogram of Oriented Gradients (HOG)')\n\n# store to file\nplt.savefig(\"panda_hog.png\", dpi=125)\n\nplt.show()","90b4cfdc":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7), sharex=True, sharey=True) \n\nax1.imshow(resized_bunny, cmap=plt.cm.gray) \nax1.set_title('Input image') \n\n# Rescale histogram for better display \nhog_bunny_rescaled = exposure.rescale_intensity(hog_bunny, in_range=(0, 10)) \n\nax2.imshow(hog_bunny_rescaled, cmap=plt.cm.gray) \nax2.set_title('Histogram of Oriented Gradients (HOG)')\n\n# store to file\nplt.savefig(\"bunny_hog.png\", dpi=125)\n\nplt.show()","ebf96d11":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7), sharex=True, sharey=True) \n\nax1.imshow(resized_quokka, cmap=plt.cm.gray) \nax1.set_title('Input image') \n\n# Rescale histogram for better display \nhog_quokka_rescaled = exposure.rescale_intensity(hog_quokka, in_range=(0, 10)) \n\nax2.imshow(hog_quokka_rescaled, cmap=plt.cm.gray) \nax2.set_title('Histogram of Oriented Gradients (HOG)')\n\n# store to file\nplt.savefig(\"quokka_hog.png\", dpi=125)\n\nplt.show()","843b3743":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7), sharex=True, sharey=True) \n\nax1.imshow(resized_tiger, cmap=plt.cm.gray) \nax1.set_title('Input image') \n\n# Rescale histogram for better display \nhog_tiger_rescaled = exposure.rescale_intensity(hog_tiger, in_range=(0, 10)) \n\nax2.imshow(hog_tiger_rescaled, cmap=plt.cm.gray) \nax2.set_title('Histogram of Oriented Gradients (HOG)')\n\n# store to file\nplt.savefig(\"tiger_hog.png\", dpi=125)\n\nplt.show()","49e18655":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7), sharex=True, sharey=True) \n\nax1.imshow(resized_zebra, cmap=plt.cm.gray) \nax1.set_title('Input image') \n\n# Rescale histogram for better display \nhog_zebra_rescaled = exposure.rescale_intensity(hog_zebra, in_range=(0, 10)) \n\nax2.imshow(hog_zebra_rescaled, cmap=plt.cm.gray) \nax2.set_title('Histogram of Oriented Gradients (HOG)')\n\n# store to file\nplt.savefig(\"zebra_hog.png\", dpi=125)\n\nplt.show()","8e3fffde":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7), sharex=True, sharey=True) \n\nax1.imshow(resized_meerkat, cmap=plt.cm.gray) \nax1.set_title('Input image') \n\n# Rescale histogram for better display \nhog_meerkat_rescaled = exposure.rescale_intensity(hog_meerkat, in_range=(0, 10)) \n\nax2.imshow(hog_meerkat_rescaled, cmap=plt.cm.gray) \nax2.set_title('Histogram of Oriented Gradients (HOG)')\n\n# store to file\nplt.savefig(\"meerkat_hog.png\", dpi=125)\n\nplt.show()","dc950a4d":"![image.png](attachment:3a13f871-f753-4749-9150-a1470831b0f1.png)","81c80115":"# If you like this notebook, please an Upvote! Don't forget to check out my other notebooks too!\n\n* [ConnectX Baseline](https:\/\/www.kaggle.com\/brendan45774\/connectx-baseline)\n* [Data Visuals - Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/data-visuals-matplotlib)\n* [Digit Recognizer Solution](http:\/\/www.kaggle.com\/brendan45774\/digit-recognizer-solution)\n* [Dictionary and Pandas Cheat sheet](https:\/\/www.kaggle.com\/brendan45774\/dictionary-and-pandas-cheat-sheet)\n* [EDA Tutorial Hollywood Movies](https:\/\/www.kaggle.com\/brendan45774\/eda-tutorial-hollywood-movies)\n* [Getting started with Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/getting-started-with-matplotlib)\n* [HOG features - Histogram of Oriented Gradients](https:\/\/www.kaggle.com\/brendan45774\/hog-features-histogram-of-oriented-gradients)\n* [How to get the lowest score](https:\/\/www.kaggle.com\/brendan45774\/how-to-get-the-lowest-score)\n* [House predict solution](http:\/\/www.kaggle.com\/brendan45774\/house-predict-solution)\n* [K-Means Clustering (Image Compression)](https:\/\/www.kaggle.com\/brendan45774\/k-means-clustering-image-compression)\n* [Kuzushiji-MNIST Panda](http:\/\/www.kaggle.com\/brendan45774\/kuzushiji-mnist-panda)\n* [Plotly Coronavirus (Covid-19)](https:\/\/www.kaggle.com\/brendan45774\/plotly-coronavirus-covid-19)\n* [Titanic Top Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-top-solution)\n* [Titanic Data Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-data-solution)\n* [Word Cloud - Analyzing Names](https:\/\/www.kaggle.com\/brendan45774\/word-cloud-analyzing-names)","998fa245":"# Importing Libaries","511fd8af":"Adding the hog function from skimage.features directly. So we don\u2019t have to calculate the gradients, magnitude (total gradient) and orientation individually. The hog function would internally calculate it and return the feature matrix.\n\nAlso, if you set the parameter \u2018visualize = True\u2019, it will return an image of the HOG.","4f0fa8b1":"HOG, or Histogram of Oriented Gradients, is a feature descriptor that is often used to extract features from image data. It is widely used in computer vision tasks for object detection. The technique counts occurrences of gradient orientation in localized portions of an image.\n\nThe HOG descriptor focuses on the structure or the shape of an object.In the case of edge features, we only identify if the pixel is an edge or not. HOG is able to provide the edge direction as well. This is done by extracting the gradient and orientation (or you can say magnitude and direction) of the edges.\n\nI used the dataset [Images](https:\/\/www.kaggle.com\/brendan45774\/film-image) to input the animal images to create Histogram of Orietned Gradients (HOG features)","dfb78cf5":"# Resizing Images","fade7122":"# Overview","5f9022e0":"Resizing your images is very important because depending on what size you resized your images at, will change how they look when they are being processed.\n\nTIP:\nIf you want your histogram of oriented gradients or HOG to have a bigger white lines, make the pixel size of your image smaller. If you want more lines that are thinner, make your image more bigger. Depending on your image, your pixel size may vary base on clarity.","b833d28f":"# Reading the Images","991c1335":"# Hog Images"}}