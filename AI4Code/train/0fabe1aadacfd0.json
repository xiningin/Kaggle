{"cell_type":{"5c4829ae":"code","e5bfaa8d":"code","45e31a96":"code","0bdb0586":"code","dfcd726d":"code","b89ce1e2":"code","00011be9":"code","38fe22de":"code","73ad7d2d":"code","a209cf30":"code","0fb32c34":"code","4e316fef":"code","54416c69":"code","ecb6ab71":"code","1c25309c":"code","d50e1e72":"code","ca6fcd56":"code","c9600a20":"code","bc845141":"code","5b807aa2":"code","bfe11f93":"code","a0b1a52d":"code","9fc95ff2":"code","eda51d3a":"code","9944f6f4":"code","cf205c18":"code","1970f81a":"code","6aa019e6":"markdown","b78842ea":"markdown","646ddfda":"markdown","b24a5e10":"markdown","d060745b":"markdown","4a9e9b93":"markdown","7df0b519":"markdown","d95195a4":"markdown","bcc7a924":"markdown","17b91801":"markdown","79b590e6":"markdown","ddebc7e9":"markdown"},"source":{"5c4829ae":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","e5bfaa8d":"train_df=pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df=pd.read_csv('..\/input\/titanic\/test.csv')\ntrain_df","45e31a96":"train_df.Embarked.value_counts().plot(kind='bar', alpha=0.55)\nplt.title(\"Passengers per boarding location\");","0bdb0586":"train_df.hist(bins=10,figsize=(9,7),grid=False);","dfcd726d":"#Classwise visualizing the survival chances\ng = sns.FacetGrid(train_df, hue=\"Survived\", col=\"Pclass\", margin_titles=True,\n                  palette={1:\"blue\", 0:\"gray\"})\ng=g.map(plt.scatter, \"Fare\", \"Age\",edgecolor=\"w\").add_legend();","b89ce1e2":"corr=train_df.corr()\nplt.figure(figsize=(10, 10))\nsns.heatmap(corr, vmax=.8, linewidths=0.01,\n            square=True,annot=True,cmap='YlGnBu',linecolor=\"white\")\nplt.title('Correlation between features');","00011be9":"train_df.isnull().sum()","38fe22de":"test_df['Fare']=test_df['Fare'].fillna(test_df['Fare'].mean())\ntrain_df['Age']=train_df['Age'].fillna(train_df['Age'].mean())\ntest_df['Age']=test_df['Age'].fillna(test_df['Age'].mean())","73ad7d2d":"train_df.isna().sum()","a209cf30":"test_df.isna().sum()","0fb32c34":"#drop unnnecessary columns\ntrain_df.drop(['PassengerId','Name','Ticket','Cabin'],axis=1,inplace=True)\ntest_df.drop(['PassengerId','Name','Ticket','Cabin'],axis=1,inplace=True)","4e316fef":"train_df.dtypes","54416c69":"train_df['Embarked']=train_df['Embarked'].fillna('S')","ecb6ab71":"from sklearn.preprocessing import LabelEncoder,OneHotEncoder\n\nlabelEnc=LabelEncoder()\n\ncat_vars=['Embarked','Sex']\nfor col in cat_vars:\n    train_df[col]=labelEnc.fit_transform(train_df[col])\n    test_df[col]=labelEnc.fit_transform(test_df[col])\n\ntrain_df.head()","1c25309c":"from sklearn.preprocessing import StandardScaler\nscale=StandardScaler()\ntrain_df[['Age','Fare']]=scale.fit_transform(train_df[['Age','Fare']])\ntest_df[['Age','Fare']]=scale.fit_transform(test_df[['Age','Fare']])","d50e1e72":"test_df.isna().sum()","ca6fcd56":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","c9600a20":"train_df","bc845141":"#from sklearn.model_selection import cross_validate\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import ShuffleSplit","5b807aa2":"predictors = [\"Pclass\", \"Sex\", \"Fare\", \"Embarked\", \"Age\", \"Parch\",\"SibSp\"]\n\n# Initialize our algorithm\nlr = LogisticRegression(random_state=1)\n# Compute the accuracy score for all the cross validation folds.\ncv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=50)\n\nscores = cross_val_score(lr, train_df[predictors], \n                                          train_df[\"Survived\"],scoring='f1', cv=cv)\n\nprint(scores.mean())","bfe11f93":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split","a0b1a52d":"predictors = [\"Pclass\", \"Sex\", \"Age\", \"Fare\", \"SibSp\", \"Embarked\"]\nxtrain,xtest,ytrain,ytest=train_test_split(train_df[predictors],train_df[\"Survived\"],train_size=0.80)\nrf = RandomForestClassifier(random_state=1, n_estimators=10, min_samples_split=2, min_samples_leaf=1)\nrf.fit(xtrain,ytrain)\nprint('Model successfully fitted')\nprint(\"Making Predictions...\")\nypred=rf.predict(xtest)\nprint('Done')\nprint(\"Accuracy Score is {}\".format(accuracy_score(ytest,ypred)))","9fc95ff2":"from sklearn.ensemble import AdaBoostClassifier\nxtrain,xtest,ytrain,ytest=train_test_split(train_df[predictors],train_df[\"Survived\"],train_size=0.80)\nrf = AdaBoostClassifier(random_state=1)\nrf.fit(xtrain,ytrain)\nprint('Model successfully fitted')\nprint(\"Making Predictions...\")\nypred=rf.predict(xtest)\nprint('Done')\nprint(\"Accuracy Score is {}\".format(accuracy_score(ytest,ypred)))","eda51d3a":"from sklearn.tree import DecisionTreeClassifier\nxtrain,xtest,ytrain,ytest=train_test_split(train_df[predictors],train_df[\"Survived\"],train_size=0.80)\nrf = DecisionTreeClassifier(random_state=1,min_samples_split=2, min_samples_leaf=1)\nrf.fit(xtrain,ytrain)\nprint('Model successfully fitted')\nprint(\"Making Predictions...\")\nypred=rf.predict(xtest)\nprint('Done')\nprint(\"Accuracy Score is {}\".format(accuracy_score(ytest,ypred)))","9944f6f4":"from sklearn.ensemble import GradientBoostingClassifier\nxtrain,xtest,ytrain,ytest=train_test_split(train_df[predictors],train_df[\"Survived\"],train_size=0.80)\nrf = GradientBoostingClassifier(random_state=1,min_samples_split=2, min_samples_leaf=1)\nrf.fit(xtrain,ytrain)\nprint('Model successfully fitted')\nprint(\"Making Predictions...\")\nypred=rf.predict(xtest)\nprint('Done')\nprint(\"Accuracy Score is {}\".format(accuracy_score(ytest,ypred)))","cf205c18":"GaussianNB().get_params()","1970f81a":"from sklearn.naive_bayes import GaussianNB\nxtrain,xtest,ytrain,ytest=train_test_split(train_df[predictors],train_df[\"Survived\"],train_size=0.80)\ngb = GaussianNB()\ngb.fit(xtrain,ytrain)\nprint('Model successfully fitted')\nprint(\"Making Predictions...\")\nypred=gb.predict(xtest)\nprint('Done')\nprint(\"Accuracy Score is {}\".format(accuracy_score(ytest,ypred)))","6aa019e6":"**Importing Dependencies**","b78842ea":"**Gradient Boost Classifier**","646ddfda":"**Gaussian Naive Bayes**","b24a5e10":"**Decision Tree**","d060745b":"Let's find correlation between input variables","4a9e9b93":"# **Data Preprocessing**","7df0b519":"# Model Creation and Evaluation","d95195a4":"# Data Preparation","bcc7a924":"# **Data Visualization**","17b91801":"**Logistic Regression**","79b590e6":"**Random Forest Classifier**","ddebc7e9":"**ADA Boost Classifier**"}}