{"cell_type":{"e9d44ac9":"code","74881f3d":"code","0d8e926b":"code","bd1a8cf0":"code","12abfda6":"code","60a234a7":"code","27e0e454":"code","11262848":"code","099517cf":"code","d69f2d8d":"code","d3e7147a":"code","a71e5e2d":"code","e19e7287":"code","3c2db9e2":"code","42c70626":"code","753de0b8":"code","408d48a9":"code","9c8e303e":"code","c9ce0c25":"code","22bde195":"code","f108e3ef":"code","0d31295e":"code","151cc34a":"code","b29bd84e":"markdown","12091638":"markdown","1bb238f3":"markdown","9333ad68":"markdown","7f0bfadc":"markdown","99b84e07":"markdown","f8b58c90":"markdown","8f6cb961":"markdown","241dadd9":"markdown","629d008f":"markdown","d32d5ea8":"markdown","2644cdeb":"markdown","a1c2b840":"markdown","d48517a9":"markdown","a67d63f9":"markdown","ccfb1a94":"markdown","9a2a149f":"markdown"},"source":{"e9d44ac9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","74881f3d":"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0d8e926b":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-aug-2021\/train.csv\")\ntrain","bd1a8cf0":"test = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-aug-2021\/test.csv\")\ntest","12abfda6":"submission = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-aug-2021\/sample_submission.csv\")\nsubmission","60a234a7":"sns.displot(train['loss']);","27e0e454":"train['loss'].describe()","11262848":"target = train.loss\ntrain.drop(['loss'], axis=1, inplace=True)\ntrain","099517cf":"combi = train.append(test)\ncombi","d69f2d8d":"combi.drop(['id'], axis=1, inplace=True)\ncombi","d3e7147a":"combi.isnull().sum().sum()","a71e5e2d":"combi = (combi - combi.min()) \/ (combi.max() - combi.min())\ncombi.shape","e19e7287":"length = len(train)\n\ny = target.ravel()\nX = combi[: length]\nX_test = combi[length :]\ny.shape, X.shape, X_test.shape","3c2db9e2":"from sklearn.feature_selection import SelectKBest, f_regression\n\nselector = SelectKBest(f_regression, k=10)\n\nX = selector.fit_transform(X, y)\nX_test = selector.transform(X_test)\ny.shape, X.shape, X_test.shape","42c70626":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=1, shuffle=True)\nX_train.shape, X_val.shape, y_train.shape,y_val.shape, X_test.shape","753de0b8":"from sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingRegressor\n\nmodel = HistGradientBoostingRegressor(max_iter=20000, random_state=1).fit(X_train, y_train)\nprint(model.score(X_train, y_train))","408d48a9":"y_pred = model.predict(X_val)\nprint(model.score(X_val, y_val))","9c8e303e":"from sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_val, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_val, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_val, y_pred)))","c9ce0c25":"compare = pd.DataFrame({'actual': y_val, 'predicted': y_pred})\nprint(compare)","22bde195":"plt.figure(figsize=(10,10))\nplt.scatter(y_val, y_pred, c='crimson')\nplt.yscale('log')\nplt.xscale('log')\n\np1 = max(max(y_pred), max(y_val))\np2 = min(min(y_pred), min(y_val))\nplt.plot([p1, p2], [p1, p2], 'b-')\nplt.xlabel('Actual Values', fontsize=15)\nplt.ylabel('Predictions', fontsize=15)\nplt.axis('equal')\nplt.show()\n","f108e3ef":"prediction = model.predict(X_test)\nprediction[prediction < 0] = 0\nprediction.shape","0d31295e":"submission.loss = prediction\nsubmission","151cc34a":"submission.to_csv('submission.csv', index=False)\nsubmission = pd.read_csv(\"submission.csv\")\nsubmission\n","b29bd84e":"Predict on validation set","12091638":"Split","1bb238f3":"Analyse target","9333ad68":"Normalise","7f0bfadc":"Graph","99b84e07":"Read","f8b58c90":"Select Model","8f6cb961":"Evaluate","241dadd9":"Prepare submission","629d008f":"Check for null values","d32d5ea8":"Import","2644cdeb":"Combine","a1c2b840":"Problem Statement\n\nThe dataset is used for this competition is synthetic, but based on a real dataset and generated using a CTGAN. The original dataset deals with calculating the loss associated with a loan defaults. Although the features are anonymized, they have properties relating to real-world features.","d48517a9":"Predict on test set","a67d63f9":"Compare","ccfb1a94":"SelectKBest","9a2a149f":"Define X and y"}}