{"cell_type":{"377b8a73":"code","45e7f64e":"code","002a69e1":"code","55680c0b":"code","4460de23":"code","bcc30fc4":"code","5a6a268e":"code","26c40c57":"code","61e27887":"code","0ca3e4ce":"code","edbd0a68":"markdown","4c232f07":"markdown","61fa9b9a":"markdown","c73649d7":"markdown"},"source":{"377b8a73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45e7f64e":"# Flag to print the various intermediate data sets or skip them altogether\nfPrint = True\n\ndf = pd.read_csv(\"\/kaggle\/input\/d\/anandhuh\/latest-covid19-india-statewise-data\/Latest Covid-19 India Status.csv\")\ndf1 = pd.read_csv(\"\/kaggle\/input\/indianstates-rulinggovernment-population-area\/StateGovernmentsPopulationArea.csv\")\n# df[df['State\/UTs'].str(0) == 'D'].head()\nif fPrint:\n    print(df.head())\n    print(df1.head())","002a69e1":"df.set_index('State\/UTs', inplace=True)\ndf1.set_index('StatesUT', inplace=True)\n\ndf[['GovCat','Pop','Area']] = df1[['Gov Cat', 'Population2011', 'AreaSqKM']]\nif fPrint:\n    df.GovCat.value_counts()","55680c0b":"df.rename(columns={'Death Ratio (%)': 'DeathRatio', \n                  'Active Ratio (%)': 'ActiveRatio',\n                  'Total Cases': 'TotalCases',\n                  'Discharge Ratio (%)': 'DischargeRatio'\n#                   ,'State\/UTs': 'StateUT'\n                  }, inplace=True)\nif fPrint:\n    df.head()","4460de23":"# Searching in the Dataset > Exploring the data. Finding the states starting with 'D'\nif fPrint:\n    df[df.index.str[0] == 'D'].head()","bcc30fc4":"df_sortedDR = df.sort_values('DeathRatio', ascending=False)\ndf_sortedDR_TopBottom = df_sortedDR.head(3).append(df_sortedDR.tail(3))\nls = df_sortedDR.head(3).append(df_sortedDR.tail(3))\nls","5a6a268e":"%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nplt.rcParams['figure.figsize'] = (10,30)\nplt.plot(df.Area, df.index, label=\"Geographical Area\")\nplt.plot(df.Pop\/1000, df.index, label=\"Population\")\nplt.plot(df.TotalCases\/10, df.index, label=\"Covid Cases\")\n\nplt.legend()\nplt.show()","26c40c57":"group = df.groupby('GovCat').sum()\nif fPrint:\n    group","61e27887":"group['CasesPercentOfPopulation'] = group['TotalCases']\/group['Pop'] * 100\ngroup['DeathRatio'] = group['Deaths'] \/ group['TotalCases'] * 100\ngovStat = group[['CasesPercentOfPopulation','DeathRatio']]\ngovStat","0ca3e4ce":"plt.rcParams['figure.figsize'] = (10,5)\nplt.bar(govStat.index, govStat.CasesPercentOfPopulation, color='red')\nplt.title('Percentage Cases of Total Population by Gov in States')\nplt.show()\nplt.title('Death Ratio (%) by Gov in States')\nplt.bar(govStat.index, govStat.DeathRatio, color='maroon')","edbd0a68":"#### Adding Population, Ruling Government and Geographical Area data to the dataset to make it rich","4c232f07":"##### Highlighting the Top and Bottom 3 States\/UTs in the terms of Death Ratio. A good representation of the management of the State","61fa9b9a":"#### State wise Analysis of Geographical Area, Population and Covid Cases. Not giving very stark observations though","c73649d7":"##### Renaming Columns to ensure easy access to them in calculations"}}